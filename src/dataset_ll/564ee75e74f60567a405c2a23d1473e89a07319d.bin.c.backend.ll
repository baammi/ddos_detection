source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1b634.5 = global i32 0
@global_var_1b644.6 = global i32* @global_var_1b634.5
@global_var_1b7a4.12 = global i32 0
@global_var_d300.18 = constant i32 -382906384
@global_var_115d4.20 = constant i32 -481296384
@global_var_1b7c0.24 = global i32 0
@global_var_85dc.25 = constant i32 -352321555
@global_var_b9c4.31 = constant i32 -382906384
@global_var_bec0.33 = constant i32 -382906384
@global_var_b000.35 = constant i32 -382906384
@global_var_a880.37 = constant i32 -382906384
@global_var_a0c0.39 = constant i32 -382906384
@global_var_97b0.41 = constant i32 -382906384
@global_var_9078.43 = constant i32 -382906384
@global_var_88d0.45 = constant i32 -382906384
@global_var_1b860.47 = global i32 0
@global_var_1b7c4.58 = global i32 0
@global_var_13074.60 = constant i32 47
@global_var_1b864.63 = local_unnamed_addr global i32 0
@global_var_1b7c8.65 = global i32 0
@global_var_d054.67 = constant i32 -382910448
@global_var_1b650.69 = global i32 66548
@global_var_1b86c.73 = local_unnamed_addr global i32 0
@global_var_1b86b.74 = local_unnamed_addr global i32 0
@global_var_1b86a.75 = local_unnamed_addr global i32 0
@global_var_1b648.77 = global i32 -1
@global_var_1b7cc.82 = global i32 0
@global_var_d03c.84 = constant i32 -442556408
@global_var_1b869.88 = local_unnamed_addr global i32 0
@global_var_13078.92 = constant i32 10
@global_var_1b64c.94 = global i32 -1
@global_var_109bc.98 = constant i32 -382910448
@global_var_103f4.99 = constant i32 -382910224
@global_var_1307c.102 = constant i32 16777216
@global_var_1b7d4.104 = global i32 0
@global_var_1b7e0.106 = global i32 0
@global_var_1b7d8.108 = global i32 0
@global_var_1b7dc.110 = global i32 0
@global_var_13084.116 = constant [23 x i8] c"g1abc4dmo35hnp2lie0kjf\00"
@global_var_e09c.121 = constant i32 -442695668
@global_var_1b880.123 = global i32 0
@global_var_1b818.125 = global i32 0
@global_var_1b7e4.127 = global i32 0
@global_var_1b810.129 = global i32 0
@global_var_1b878.137 = global i32 0
@global_var_1b87c.139 = global i32 0
@global_var_1b7eb.142 = local_unnamed_addr global i32 0
@global_var_1b7ea.143 = local_unnamed_addr global i32 0
@global_var_1b7fc.145 = global i32 0
@global_var_1b7ed.147 = local_unnamed_addr global i32 0
@global_var_1b7f1.148 = local_unnamed_addr global i32 0
@global_var_1b7f0.149 = local_unnamed_addr global i32 0
@global_var_1b7ff.150 = local_unnamed_addr global i32 0
@global_var_1b7fd.151 = local_unnamed_addr global i32 0
@global_var_1b7ec.152 = local_unnamed_addr global i32 0
@global_var_1b7fe.153 = local_unnamed_addr global i32 0
@global_var_1b80b.155 = local_unnamed_addr global i32 0
@global_var_1b80a.156 = local_unnamed_addr global i32 0
@global_var_13188.158 = constant [5 x i8] c"7**1\00"
@global_var_13160.160 = constant i32 0
@global_var_1309c.162 = constant [6 x i8] c"$!(,+\00"
@global_var_13120.164 = constant [5 x i8] c"twvq\00"
@global_var_130a4.166 = constant [5 x i8] c"5$66\00"
@global_var_130ac.168 = constant [7 x i8] c"=&vptt\00"
@global_var_130b4.170 = constant [6 x i8] c"3,?=3\00"
@global_var_130bc.172 = constant [7 x i8] c"$+16)4\00"
@global_var_130c4.174 = constant [9 x i8] c"tuut&-,+\00"
@global_var_130d0.176 = constant [7 x i8] c"twvqps\00"
@global_var_130d8.178 = constant [4 x i8] c"twv\00"
@global_var_130dc.180 = constant [5 x i8] c"06 7\00"
@global_var_130e4.182 = constant [8 x i8] c"6055*71\00"
@global_var_130ec.184 = constant [4 x i8] c"p05\00"
@global_var_130f0.186 = constant [8 x i8] c"! #$0)1\00"
@global_var_130f8.188 = constant [4 x i8] c"$!(\00"
@global_var_130fc.190 = constant [7 x i8] c"!$ (*+\00"
@global_var_13104.192 = constant [4 x i8] c"',+\00"
@global_var_13108.194 = constant [5 x i8] c"$+.*\00"
@global_var_13110.196 = constant [9 x i8] c"-0+1prp|\00"
@global_var_1311c.198 = constant [9 x i8] c"twvqtwvq\00"
@global_var_13128.200 = constant [6 x i8] c"11+ 1\00"
@global_var_13130.202 = constant [6 x i8] c"?)==k\00"
@global_var_13138.204 = constant [6 x i8] c"twvqp\00"
@global_var_13140.206 = constant [8 x i8] c"$40$7,*\00"
@global_var_13148.208 = constant [5 x i8] c"'$'<\00"
@global_var_13150.210 = constant [5 x i8] c"170 \00"
@global_var_13158.212 = constant [9 x i8] c"&-$+\22 ( \00"
@global_var_13164.214 = constant [7 x i8] c"twvtwv\00"
@global_var_1b7f4.215 = local_unnamed_addr global i32 0
@global_var_1b7f2.217 = local_unnamed_addr global i32 0
@global_var_1b7f3.218 = local_unnamed_addr global i32 0
@global_var_1b80c.220 = local_unnamed_addr global i32 0
@global_var_1b80d.221 = local_unnamed_addr global i32 0
@global_var_1316c.226 = constant [5 x i8] c"ogin\00"
@global_var_13174.228 = constant [6 x i8] c"enter\00"
@global_var_1317c.231 = constant [3 x i8] c"\0D\0A\00"
@global_var_13196.233 = constant i32 2096127
@global_var_1318d.235 = constant i32 2095871
@global_var_13180.237 = constant [8 x i8] c"assword\00"
@global_var_1b888.239 = global i32 0
@global_var_1b658.242 = global i32 -555810886
@global_var_1319c.247 = constant [3 x i8] c"E:\00"
@global_var_1b898.248 = local_unnamed_addr global i32 0
@global_var_1b89c.249 = local_unnamed_addr global i32 0
@global_var_1b89d.250 = local_unnamed_addr global i32 0
@global_var_131a0.252 = constant [20 x i8] c"DPMQV[Q@MMVGP\0CQKVG\22\00"
@global_var_1b944.253 = local_unnamed_addr global i32 0
@global_var_1b940.254 = local_unnamed_addr global i32 0
@global_var_1b945.255 = local_unnamed_addr global i32 0
@global_var_131b4.257 = constant i32 41214
@global_var_1b948.258 = local_unnamed_addr global i32 0
@global_var_1b94c.259 = local_unnamed_addr global i32 0
@global_var_1b94d.260 = local_unnamed_addr global i32 0
@global_var_131b8.262 = constant [59 x i8] c"\22*6-e1-$1e&-,+ 6 e#$(,)<e$1e1- e*1- 7e1$') e607 e$1 e$)*1E\00"
@global_var_1b894.263 = local_unnamed_addr global i32 0
@global_var_1b890.264 = local_unnamed_addr global i32 0
@global_var_1b895.265 = local_unnamed_addr global i32 0
@global_var_131f4.267 = constant [7 x i8] c"6- ))E\00"
@global_var_1b908.268 = local_unnamed_addr global i32 0
@global_var_1b90c.269 = local_unnamed_addr global i32 0
@global_var_1b90d.270 = local_unnamed_addr global i32 0
@global_var_131fc.272 = constant [8 x i8] c" +$') E\00"
@global_var_1b910.273 = local_unnamed_addr global i32 0
@global_var_1b914.274 = local_unnamed_addr global i32 0
@global_var_1b915.275 = local_unnamed_addr global i32 0
@global_var_13204.277 = constant [8 x i8] c"6<61 (E\00"
@global_var_1b918.278 = local_unnamed_addr global i32 0
@global_var_1b91c.279 = local_unnamed_addr global i32 0
@global_var_1b91d.280 = local_unnamed_addr global i32 0
@global_var_1320c.282 = constant [4 x i8] c"6-E\00"
@global_var_1b92c.283 = local_unnamed_addr global i32 0
@global_var_1b928.284 = local_unnamed_addr global i32 0
@global_var_1b92d.285 = local_unnamed_addr global i32 0
@global_var_13210.287 = constant i32 724313962
@global_var_1b924.288 = local_unnamed_addr global i32 0
@global_var_1b920.289 = local_unnamed_addr global i32 0
@global_var_1b925.290 = local_unnamed_addr global i32 0
@global_var_13228.292 = constant i32 269878280
@global_var_1b934.293 = local_unnamed_addr global i32 0
@global_var_1b930.294 = local_unnamed_addr global i32 0
@global_var_1b935.295 = local_unnamed_addr global i32 0
@global_var_13244.297 = constant [10 x i8] c"+&*77 &1E\00"
@global_var_1b93c.298 = local_unnamed_addr global i32 0
@global_var_1b938.299 = local_unnamed_addr global i32 0
@global_var_1b93d.300 = local_unnamed_addr global i32 0
@global_var_13250.302 = constant [17 x i8] c"j',+j'06<'*=e56E\00"
@global_var_1b954.303 = local_unnamed_addr global i32 0
@global_var_1b950.304 = local_unnamed_addr global i32 0
@global_var_1b955.305 = local_unnamed_addr global i32 0
@global_var_13264.307 = constant [23 x i8] c"j',+j'06<'*=e.,))eh|jE\00"
@global_var_1b95c.308 = local_unnamed_addr global i32 0
@global_var_1b958.309 = local_unnamed_addr global i32 0
@global_var_1b95d.310 = local_unnamed_addr global i32 0
@global_var_1327c.312 = constant [8 x i8] c"j57*&jE\00"
@global_var_1b8a0.313 = local_unnamed_addr global i32 0
@global_var_1b8a4.314 = local_unnamed_addr global i32 0
@global_var_1b8a5.315 = local_unnamed_addr global i32 0
@global_var_13284.317 = constant [6 x i8] c"j = E\00"
@global_var_1b8ac.318 = local_unnamed_addr global i32 0
@global_var_1b8a8.319 = local_unnamed_addr global i32 0
@global_var_1b8ad.320 = local_unnamed_addr global i32 0
@global_var_1328c.322 = constant [5 x i8] c"j#!E\00"
@global_var_1b8bc.323 = local_unnamed_addr global i32 0
@global_var_1b8b8.324 = local_unnamed_addr global i32 0
@global_var_1b8bd.325 = local_unnamed_addr global i32 0
@global_var_13294.327 = constant [7 x i8] c"j($56E\00"
@global_var_1b8c0.328 = local_unnamed_addr global i32 0
@global_var_1b8c4.329 = local_unnamed_addr global i32 0
@global_var_1b8c5.330 = local_unnamed_addr global i32 0
@global_var_1329c.332 = constant [15 x i8] c"j57*&j+ 1j1&5E\00"
@global_var_1b8c8.333 = local_unnamed_addr global i32 0
@global_var_1b8cc.334 = local_unnamed_addr global i32 0
@global_var_1b8cd.335 = local_unnamed_addr global i32 0
@global_var_132ac.337 = constant [11 x i8] c"!37\0D )5 7E\00"
@global_var_1b8d4.338 = local_unnamed_addr global i32 0
@global_var_1b8d0.339 = local_unnamed_addr global i32 0
@global_var_1b8d5.340 = local_unnamed_addr global i32 0
@global_var_13300.342 = constant i32 808064529
@global_var_1b8dc.343 = local_unnamed_addr global i32 0
@global_var_1b8d8.344 = local_unnamed_addr global i32 0
@global_var_1b8dd.345 = local_unnamed_addr global i32 0
@global_var_132b8.347 = constant [18 x i8] c"j 1&j7 6*)3k&*+#E\00"
@global_var_1b8e4.348 = local_unnamed_addr global i32 0
@global_var_1b8e0.349 = local_unnamed_addr global i32 0
@global_var_1b8e5.350 = local_unnamed_addr global i32 0
@global_var_132cc.352 = constant [13 x i8] c"+$( 6 73 7eE\00"
@global_var_1b8ec.353 = local_unnamed_addr global i32 0
@global_var_1b8e8.354 = local_unnamed_addr global i32 0
@global_var_1b8ed.355 = local_unnamed_addr global i32 0
@global_var_132dc.357 = constant [15 x i8] c"j! 3j2$1&-!*\22E\00"
@global_var_1b8f0.358 = local_unnamed_addr global i32 0
@global_var_1b8f4.359 = local_unnamed_addr global i32 0
@global_var_1b8f5.360 = local_unnamed_addr global i32 0
@global_var_132ec.362 = constant [20 x i8] c"j! 3j(,6&j2$1&-!*\22E\00"
@global_var_1b8fd.363 = local_unnamed_addr global i32 0
@global_var_1b8f8.364 = local_unnamed_addr global i32 0
@global_var_1b8fc.365 = local_unnamed_addr global i32 0
@global_var_11e10.368 = constant i32 -476053504
@global_var_10d60.372 = constant i32 -443219956
@global_var_10ecc.377 = constant i32 -376111092
@global_var_1b854.380 = global i32 0
@global_var_1104c.382 = constant i32 -456978431
@global_var_1b900.384 = global i32 0
@global_var_1b81c.386 = global i32 0
@global_var_1b758.389 = global i32 256
@global_var_1b65c.390 = global i32* @global_var_1b758.389
@global_var_1b844.393 = global i32 0
@global_var_1b980.395 = global i32 0
@global_var_125c4.396 = constant i32 -382910416
@global_var_10fd0.397 = constant i32 -509595648
@global_var_11654.404 = constant i32 -442564520
@global_var_1b764.410 = global i32 0
@global_var_10c38.412 = constant i32 -481230848
@global_var_1b834.414 = global i32 0
@global_var_12214.416 = constant i32 -509587456
@global_var_1b77c.419 = global i32 0
@global_var_1b838.423 = local_unnamed_addr global i32 0
@global_var_11bc8.425 = constant i32 -352321419
@global_var_1b628.429 = global i32 -1
@global_var_1b848.432 = global i32 0
@global_var_1b84c.434 = local_unnamed_addr global i32 0
@global_var_11dfc.435 = constant i32 -390234096
@global_var_13318.437 = constant [10 x i8] c"/dev/null\00"
@global_var_1b850.439 = global i32 0
@global_var_1b83c.444 = local_unnamed_addr global i32 0
@global_var_1b840.446 = global i32 0
@global_var_10fb0.448 = constant i32 -369097058
@global_var_1b794 = external local_unnamed_addr global i32
@global_var_13424.454 = constant i32 33554944
@global_var_10f64.459 = constant i32 -442564608
@global_var_120c4.461 = constant i32 -335544664
@global_var_121e0.464 = constant i32 -275775369
@global_var_12958.465 = constant i32 -382910352
@global_var_1b85c.467 = global i32 0
@global_var_1b79c.469 = global i32* @global_var_13424.454
@global_var_1b998.471 = global i32 0
@global_var_1b99c.473 = global i32 0
@global_var_1b62c.476 = global i32 0
@global_var_1b7a0.3 = external global i8*
@global_var_1b7bc.22 = external global i8*
@global_var_1b7bd.29 = global i8 0
@global_var_1b868.71 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1b654.79 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1b7d0.97 = external global i8*
@global_var_1b814.131 = external global i8*
@global_var_1b815.132 = local_unnamed_addr global i8 0
@global_var_1b7e8.141 = external global i8*
@global_var_1b808.146 = local_unnamed_addr global i8 0
@global_var_1b809.154 = local_unnamed_addr global i8 0
@global_var_1b7f8.216 = local_unnamed_addr global i8 0
@global_var_1b800.219 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_13024(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1b7a0.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1b7a0.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1b644.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1b644.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1b644.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1b644.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1b7a0.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1b644.6, { 1, 0 }
  uselistorder i8** @global_var_1b7a0.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 112184 to i32*), align 8
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 112184

bb2:                                              ; preds = %.thread
  ret i32 112184

; uselistorder directives
  uselistorder i32 112184, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_11eb0(i32 ptrtoint (i32* @global_var_d300.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 77920, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_11a24()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8230:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8230 = urem i32 %arg1, 256
  %v2_8234 = icmp eq i32 %v1_8230, 0
  %v3_8238 = load i32, i32* @r4, align 4
  %v6_8238 = load i32, i32* @lr, align 4
  br i1 %v2_8234, label %dec_label_pc_8280, label %dec_label_pc_8244

dec_label_pc_8244:                                ; preds = %dec_label_pc_8230
  %v0_8244 = load i32, i32* %r1.global-to-local, align 4
  %v1_8244 = add i32 %v0_8244, 4
  %v2_8244 = inttoptr i32 %v1_8244 to i8*
  %v3_8244 = load i8, i8* %v2_8244, align 1
  %v4_8244 = zext i8 %v3_8244 to i32
  %v1_8248 = urem i32 %arg3, 256
  %v9_824c = icmp eq i32 %v4_8244, %v1_8248
  br i1 %v9_824c, label %dec_label_pc_8288, label %dec_label_pc_8270.preheader

dec_label_pc_8270.preheader:                      ; preds = %dec_label_pc_8244
  br label %dec_label_pc_8270

dec_label_pc_8260:                                ; preds = %dec_label_pc_8270
  %v1_8260 = add i32 %v0_8268.in, 12
  %v2_8260 = inttoptr i32 %v1_8260 to i8*
  %v3_8260 = load i8, i8* %v2_8260, align 1
  %v4_8260 = zext i8 %v3_8260 to i32
  %v9_8264 = icmp eq i32 %v1_8248, %v4_8260
  br i1 %v9_8264, label %dec_label_pc_8288, label %dec_label_pc_8270

dec_label_pc_8270:                                ; preds = %dec_label_pc_8270.preheader, %dec_label_pc_8260
  %v0_8268.in = phi i32 [ %v0_8244, %dec_label_pc_8270.preheader ], [ %v0_8268, %dec_label_pc_8260 ]
  %v0_8270 = phi i32 [ 0, %dec_label_pc_8270.preheader ], [ %v1_8270, %dec_label_pc_8260 ]
  %v0_8268 = add i32 %v0_8268.in, 8
  %v1_8270 = add i32 %v0_8270, 1
  store i32 %v1_8270, i32* @lr, align 4
  %v9_8274 = icmp eq i32 %v1_8230, %v1_8270
  store i32 %v0_8268, i32* %r1.global-to-local, align 4
  br i1 %v9_8274, label %dec_label_pc_8280, label %dec_label_pc_8260

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288, %dec_label_pc_8230
  store i32 %v3_8238, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8288:                                ; preds = %dec_label_pc_8260, %dec_label_pc_8244
  %v0_8288 = phi i32 [ %v0_8244, %dec_label_pc_8244 ], [ %v0_8268, %dec_label_pc_8260 ]
  %v1_8288 = inttoptr i32 %v0_8288 to i32*
  %v2_8288 = load i32, i32* %v1_8288, align 4
  store i32 %v2_8288, i32* @r0, align 4
  %v2_828c = icmp eq i32 %v2_8288, 0
  br i1 %v2_828c, label %dec_label_pc_8280, label %dec_label_pc_8294

dec_label_pc_8294:                                ; preds = %dec_label_pc_8288
  store i32 %v3_8238, i32* @r4, align 4
  store i32 %v6_8238, i32* @lr, align 4
  %v1_8298 = call i32 @function_11070(i32 %v2_8288)
  ret i32 %v1_8298

; uselistorder directives
  uselistorder i32 %v1_8270, { 1, 2, 0 }
  uselistorder i32 %v0_8268, { 1, 0, 2 }
  uselistorder i32 %v0_8268.in, { 1, 0 }
  uselistorder i32 %v1_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 1, 0, 2 }
  uselistorder i32 %v3_8238, { 1, 0 }
  uselistorder i32 %v1_8230, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8280, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8270, { 1, 0 }
}

define i32 @function_829c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_829c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_829c = urem i32 %arg1, 256
  %v2_82a0 = icmp eq i32 %v1_829c, 0
  %v3_82a4 = load i32, i32* @r4, align 4
  %v6_82a4 = load i32, i32* @lr, align 4
  br i1 %v2_82a0, label %dec_label_pc_82ec, label %dec_label_pc_82b0

dec_label_pc_82b0:                                ; preds = %dec_label_pc_829c
  %v0_82b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_82b0 = add i32 %v0_82b0, 4
  %v2_82b0 = inttoptr i32 %v1_82b0 to i8*
  %v3_82b0 = load i8, i8* %v2_82b0, align 1
  %v4_82b0 = zext i8 %v3_82b0 to i32
  %v1_82b4 = urem i32 %arg3, 256
  %v9_82b8 = icmp eq i32 %v4_82b0, %v1_82b4
  br i1 %v9_82b8, label %dec_label_pc_82f4, label %dec_label_pc_82dc.preheader

dec_label_pc_82dc.preheader:                      ; preds = %dec_label_pc_82b0
  br label %dec_label_pc_82dc

dec_label_pc_82cc:                                ; preds = %dec_label_pc_82dc
  %v1_82cc = add i32 %v0_82d4.in, 12
  %v2_82cc = inttoptr i32 %v1_82cc to i8*
  %v3_82cc = load i8, i8* %v2_82cc, align 1
  %v4_82cc = zext i8 %v3_82cc to i32
  %v9_82d0 = icmp eq i32 %v1_82b4, %v4_82cc
  br i1 %v9_82d0, label %dec_label_pc_82f4, label %dec_label_pc_82dc

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82dc.preheader, %dec_label_pc_82cc
  %v0_82d4.in = phi i32 [ %v0_82b0, %dec_label_pc_82dc.preheader ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v0_82dc = phi i32 [ 0, %dec_label_pc_82dc.preheader ], [ %v1_82dc, %dec_label_pc_82cc ]
  %v0_82d4 = add i32 %v0_82d4.in, 8
  %v1_82dc = add i32 %v0_82dc, 1
  store i32 %v1_82dc, i32* @lr, align 4
  %v9_82e0 = icmp eq i32 %v1_829c, %v1_82dc
  store i32 %v0_82d4, i32* %r1.global-to-local, align 4
  br i1 %v9_82e0, label %dec_label_pc_82ec, label %dec_label_pc_82cc

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82f4, %dec_label_pc_829c
  store i32 %v3_82a4, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82cc, %dec_label_pc_82b0
  %v0_82f4 = phi i32 [ %v0_82b0, %dec_label_pc_82b0 ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v1_82f4 = inttoptr i32 %v0_82f4 to i32*
  %v2_82f4 = load i32, i32* %v1_82f4, align 4
  %v2_82f8 = icmp eq i32 %v2_82f4, 0
  br i1 %v2_82f8, label %dec_label_pc_82ec, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82f4
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_82a4, i32* @r4, align 4
  store i32 %v6_82a4, i32* @lr, align 4
  %v2_8308 = inttoptr i32 %v2_82f4 to i8*
  %v3_8308 = call i32 @function_10268(i8* %v2_8308, i32 10)
  ret i32 %v3_8308

; uselistorder directives
  uselistorder i32 %v1_82dc, { 1, 2, 0 }
  uselistorder i32 %v0_82d4, { 1, 0, 2 }
  uselistorder i32 %v0_82d4.in, { 1, 0 }
  uselistorder i32 %v1_82b4, { 1, 0 }
  uselistorder i32 %v0_82b0, { 1, 0, 2 }
  uselistorder i32 %v3_82a4, { 1, 0 }
  uselistorder i32 %v1_829c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_82dc, { 1, 0 }
}

define i32 @function_830c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_830c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_830c = load i32, i32* @r4, align 4
  %v6_830c = load i32, i32* @r5, align 4
  %v9_830c = load i32, i32* @r6, align 4
  %v12_830c = load i32, i32* @r7, align 4
  %v15_830c = load i32, i32* @r8, align 4
  %v18_830c = load i32, i32* @sb, align 4
  %v21_830c = load i32, i32* @sl, align 4
  %v24_830c = load i32, i32* @fp, align 4
  %v27_830c = load i32, i32* @lr, align 4
  %v7_8310 = icmp eq i32 %arg2, 3
  store i1 %v7_8310, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_831c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_831c, i32* @r4, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_8330, label %dec_label_pc_8324

dec_label_pc_8324:                                ; preds = %dec_label_pc_830c
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v1_8328 = inttoptr i32 %v0_831c to i32*
  %v2_8328 = load i32, i32* %v1_8328, align 4
  store i32 %v2_8328, i32* %sl.global-to-local, align 4
  br i1 %v7_8324, label %dec_label_pc_8330, label %dec_label_pc_8338

dec_label_pc_8330:                                ; preds = %dec_label_pc_8354, %.dec_label_pc_8330_crit_edge, %dec_label_pc_8324, %dec_label_pc_8348, %dec_label_pc_8338, %dec_label_pc_830c
  %v29_8334 = phi i32 [ %v29_8334.pre, %.dec_label_pc_8330_crit_edge ], [ %v0_831c, %dec_label_pc_8354 ], [ %v0_831c, %dec_label_pc_8324 ], [ %v0_831c, %dec_label_pc_8348 ], [ %v0_831c, %dec_label_pc_8338 ], [ %v0_831c, %dec_label_pc_830c ]
  store i32 %v3_830c, i32* %r4.global-to-local, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v18_830c, i32* @sb, align 4
  store i32 %v21_830c, i32* @sl, align 4
  store i32 %v24_830c, i32* @fp, align 4
  ret i32 %v29_8334

dec_label_pc_8338:                                ; preds = %dec_label_pc_8324
  %v7_8338 = icmp eq i32 %arg2, 5
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = add i32 %v0_831c, 4
  %v2_833c = inttoptr i32 %v1_833c to i8*
  %v3_833c = load i8, i8* %v2_833c, align 1
  %v4_833c = zext i8 %v3_833c to i32
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  br i1 %v7_8338, label %dec_label_pc_8330, label %dec_label_pc_8348

dec_label_pc_8348:                                ; preds = %dec_label_pc_8338
  %v1_8348 = add i32 %v0_831c, 5
  %v2_8348 = inttoptr i32 %v1_8348 to i8*
  %v3_8348 = load i8, i8* %v2_8348, align 1
  %v4_8348 = zext i8 %v3_8348 to i32
  store i32 %v4_8348, i32* @r8, align 4
  %v2_834c = icmp eq i8 %v3_8348, 0
  store i1 %v2_834c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_834c, label %dec_label_pc_8330, label %dec_label_pc_8354

dec_label_pc_8354:                                ; preds = %dec_label_pc_8348
  %v3_8354 = mul nuw nsw i32 %v4_8348, 4
  store i32 %v3_8354, i32* %sb.global-to-local, align 4
  %v1_8358 = add i32 %arg2, -6
  store i32 %v1_8358, i32* @r6, align 4
  %v2_835c = mul nuw nsw i32 %v4_8348, 5
  store i32 %v2_835c, i32* @r7, align 4
  %v3_8360 = icmp ult i32 %v1_8358, %v2_835c
  %v9_8360 = icmp eq i32 %v1_8358, %v2_835c
  store i1 %v9_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8360, label %dec_label_pc_8330, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_8354
  store i32 %v4_8348, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8370 = call i32 @function_1157c(i32 %v4_8348, i32 24)
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  %v0_8374 = load i32, i32* @r8, align 4
  %v2_8374 = icmp eq i32 %v0_8374, 0
  store i1 %v2_8374, i1* %cpsr_z.global-to-local, align 1
  %v0_837c = load i32, i32* @r4, align 4
  %v1_837c = add i32 %v0_837c, 6
  store i32 %v1_837c, i32* %fp.global-to-local, align 4
  %tmp36 = icmp slt i32 %v0_8374, 1
  br i1 %tmp36, label %dec_label_pc_83d4thread-pre-split, label %dec_label_pc_8384

dec_label_pc_8384:                                ; preds = %dec_label_pc_8368
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v1_8388 = load i32, i32* @r7, align 4
  %v2_8388 = add i32 %v1_8388, %v0_837c
  store i32 %v2_8388, i32* @ip, align 4
  store i32 %v0_837c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_8398.dec_label_pc_8398_crit_edge, %dec_label_pc_8384
  %v2_83a8 = phi i32 [ %v1_83bc, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8370, %dec_label_pc_8384 ]
  %v0_83a4 = phi i32 [ %v0_83a4.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8388, %dec_label_pc_8384 ]
  %v0_83a0 = phi i32 [ %v0_8398.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v0_837c, %dec_label_pc_8384 ]
  %v1_8398 = add i32 %v0_83a0, 10
  %v2_8398 = inttoptr i32 %v1_8398 to i8*
  %v3_8398 = load i8, i8* %v2_8398, align 1
  %v1_839c = add i32 %v0_83a0, 6
  %v2_839c = inttoptr i32 %v1_839c to i32*
  %v3_839c = load i32, i32* %v2_839c, align 4
  store i32 %v3_839c, i32* @r2, align 4
  %v1_83a0 = add i32 %v0_83a0, 5
  store i32 %v1_83a0, i32* %r0.global-to-local, align 4
  %v9_83a4 = icmp eq i32 %v0_83a4, %v1_83a0
  store i1 %v9_83a4, i1* %cpsr_z.global-to-local, align 1
  %v3_83a8 = add i32 %v2_83a8, 20
  %v4_83a8 = inttoptr i32 %v3_83a8 to i8*
  store i8 %v3_8398, i8* %v4_83a8, align 1
  %v0_83ac = load i32, i32* @r2, align 4
  %v1_83ac = load i32, i32* %r1.global-to-local, align 4
  %v2_83ac = add i32 %v1_83ac, 4
  %v3_83ac = inttoptr i32 %v2_83ac to i32*
  store i32 %v0_83ac, i32* %v3_83ac, align 4
  %v0_83b0 = load i32, i32* @r2, align 4
  %v1_83b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83b0 = add i32 %v1_83b0, 16
  %v3_83b0 = inttoptr i32 %v2_83b0 to i32*
  store i32 %v0_83b0, i32* %v3_83b0, align 4
  %v0_83b4 = load i32, i32* @r4, align 4
  %v1_83b4 = trunc i32 %v0_83b4 to i8
  %v2_83b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b4 = inttoptr i32 %v2_83b4 to i8*
  store i8 %v1_83b4, i8* %v3_83b4, align 1
  %v0_83b8 = load i32, i32* @lr, align 4
  %v1_83b8 = trunc i32 %v0_83b8 to i8
  %v2_83b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b8 = add i32 %v2_83b8, 1
  %v4_83b8 = inttoptr i32 %v3_83b8 to i8*
  store i8 %v1_83b8, i8* %v4_83b8, align 1
  %v0_83bc = load i32, i32* %r1.global-to-local, align 4
  %v1_83bc = add i32 %v0_83bc, 24
  store i32 %v1_83bc, i32* %r1.global-to-local, align 4
  %v0_83c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83c0, label %dec_label_pc_83c4, label %dec_label_pc_8398.dec_label_pc_8398_crit_edge

dec_label_pc_8398.dec_label_pc_8398_crit_edge:    ; preds = %dec_label_pc_8398
  %v0_8398.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_83a4.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8398

dec_label_pc_83c4:                                ; preds = %dec_label_pc_8398
  %v0_83c4 = load i32, i32* %sb.global-to-local, align 4
  %v1_83c4 = load i32, i32* @r8, align 4
  %v1_83c8 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83c4, %v0_83c4
  %v2_83c8 = sub i32 %v1_83c8, %sum
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, 6
  store i32 %v1_83cc, i32* %fp.global-to-local, align 4
  %v1_83d0 = add i32 %v2_83c8, -6
  store i32 %v1_83d0, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4thread-pre-split:                ; preds = %dec_label_pc_8368
  %v0_83d4.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83d4thread-pre-split, %dec_label_pc_83c4
  %v0_83e0 = phi i32 [ %v1_837c, %dec_label_pc_83d4thread-pre-split ], [ %v1_83cc, %dec_label_pc_83c4 ]
  %v1_83d8 = phi i32 [ %v0_83d4.pr, %dec_label_pc_83d4thread-pre-split ], [ %v1_83d0, %dec_label_pc_83c4 ]
  %v2_83d4 = icmp eq i32 %v1_83d8, 0
  store i1 %v2_83d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83d4, label %dec_label_pc_84f4, label %dec_label_pc_83e0

dec_label_pc_83e0:                                ; preds = %dec_label_pc_83d4
  %v1_83e0 = inttoptr i32 %v0_83e0 to i8*
  %v2_83e0 = load i8, i8* %v1_83e0, align 1
  %v3_83e0 = zext i8 %v2_83e0 to i32
  store i32 %v3_83e0, i32* %sb.global-to-local, align 4
  %v2_83e4 = icmp eq i8 %v2_83e0, 0
  store i1 %v2_83e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e4, label %dec_label_pc_84c4, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e0
  store i32 %v3_83e0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83fc = call i32 @function_1157c(i32 %v3_83e0, i32 8)
  store i32 %v2_83fc, i32* %r0.global-to-local, align 4
  %v0_8400 = load i32, i32* %sb.global-to-local, align 4
  %v2_8400 = icmp eq i32 %v0_8400, 0
  store i1 %v2_8400, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_8400, 1
  br i1 %tmp37, label %dec_label_pc_84c4, label %dec_label_pc_8410

dec_label_pc_8410:                                ; preds = %dec_label_pc_83f4
  %v0_8410 = load i32, i32* @r6, align 4
  %v1_8410 = add i32 %v0_8410, -1
  store i32 %v1_8410, i32* @r2, align 4
  %v7_8410 = icmp eq i32 %v0_8410, 1
  store i1 %v7_8410, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8410, label %dec_label_pc_84f4, label %dec_label_pc_8418

dec_label_pc_8418:                                ; preds = %dec_label_pc_8410
  %v0_8418 = load i32, i32* %fp.global-to-local, align 4
  %v1_8418 = add i32 %v0_8418, 1
  %v2_8418 = inttoptr i32 %v1_8418 to i8*
  %v3_8418 = load i8, i8* %v2_8418, align 1
  %v1_841c = add i32 %v0_8410, -2
  store i32 %v1_841c, i32* @r2, align 4
  %v7_841c = icmp eq i32 %v1_8410, 1
  store i1 %v7_841c, i1* %cpsr_z.global-to-local, align 1
  %v3_8420 = add i32 %v2_83fc, 4
  %v4_8420 = inttoptr i32 %v3_8420 to i8*
  store i8 %v3_8418, i8* %v4_8420, align 1
  %v0_8424 = load i32, i32* %fp.global-to-local, align 4
  %v1_8424 = add i32 %v0_8424, 1
  store i32 %v1_8424, i32* %r0.global-to-local, align 4
  %v0_8428 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8428, label %dec_label_pc_84f4, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8418
  %v1_842c = add i32 %v0_8424, 2
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v4_842c = zext i8 %v3_842c to i32
  store i32 %v4_842c, i32* @r4, align 4
  %v0_8430 = load i32, i32* @r2, align 4
  %v1_8430 = add i32 %v0_8430, -1
  store i32 %v1_8430, i32* @r7, align 4
  %v9_8434 = icmp eq i32 %v1_8430, %v4_842c
  store i1 %v9_8434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_842c, i32* %r0.global-to-local, align 4
  %v5_843c = icmp slt i32 %v1_8430, %v4_842c
  br i1 %v5_843c, label %dec_label_pc_84f4, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  store i32 %v2_83fc, i32* @r5, align 4
  %v1_8448 = add i32 %v2_83fc, 8
  %v1_844c = add i32 %v0_8424, 3
  store i32 %v1_844c, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_849c

dec_label_pc_845c:                                ; preds = %dec_label_pc_849c
  %v0_845c = load i32, i32* @r7, align 4
  %v1_845c = load i32, i32* @r4, align 4
  %v2_845c = sub i32 %v0_845c, %v1_845c
  store i32 %v2_845c, i32* @r2, align 4
  %v9_845c = icmp eq i32 %v0_845c, %v1_845c
  store i1 %v9_845c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_845c, label %dec_label_pc_84f4, label %dec_label_pc_8464

dec_label_pc_8464:                                ; preds = %dec_label_pc_845c
  %v1_8464 = load i32, i32* @r6, align 4
  %v2_8464 = add i32 %v1_8464, %v1_845c
  %v3_8464 = inttoptr i32 %v2_8464 to i8*
  %v4_8464 = load i8, i8* %v3_8464, align 1
  store i32 %stack_var_-44.0, i32* @r5, align 4
  %v1_846c = add i32 %v2_845c, -1
  store i32 %v1_846c, i32* @r2, align 4
  %v7_846c = icmp eq i32 %v2_845c, 1
  store i1 %v7_846c, i1* %cpsr_z.global-to-local, align 1
  %v3_8470 = add i32 %stack_var_-44.0, 4
  %v4_8470 = inttoptr i32 %v3_8470 to i8*
  store i8 %v4_8464, i8* %v4_8470, align 1
  %v0_8474 = load i32, i32* @r4, align 4
  %v1_8474 = load i32, i32* @r6, align 4
  %v2_8474 = add i32 %v1_8474, %v0_8474
  store i32 %v2_8474, i32* %r0.global-to-local, align 4
  %v0_8478 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8478, label %dec_label_pc_84f4, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8464
  %v1_847c = add i32 %v2_8474, 1
  %v2_847c = inttoptr i32 %v1_847c to i8*
  %v3_847c = load i8, i8* %v2_847c, align 1
  %v4_847c = zext i8 %v3_847c to i32
  store i32 %v4_847c, i32* @r4, align 4
  %v0_8480 = load i32, i32* @r2, align 4
  %v1_8480 = add i32 %v0_8480, -1
  store i32 %v1_8480, i32* @r7, align 4
  %v0_8484 = load i32, i32* @r5, align 4
  %v1_8484 = add i32 %v0_8484, 8
  store i32 %v1_8484, i32* %r1.global-to-local, align 4
  %v2_8488 = sub i32 %v1_8480, %v4_847c
  %tmp39 = sub i32 0, %v2_8488
  %v6_8488 = and i32 %v1_8480, %tmp39
  %v7_8488 = icmp slt i32 %v6_8488, 0
  %v8_8488 = icmp slt i32 %v2_8488, 0
  %v9_8488 = icmp eq i32 %v1_8480, %v4_847c
  store i1 %v9_8488, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_847c, i32* %r0.global-to-local, align 4
  %v2_8494 = xor i1 %v8_8488, %v7_8488
  br i1 %v2_8494, label %dec_label_pc_84f4, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_847c
  %v1_8498 = add i32 %v2_8474, 2
  store i32 %v1_8498, i32* @r6, align 4
  br label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %dec_label_pc_8440, %dec_label_pc_8498
  %v0_84a0 = phi i32 [ %v4_842c, %dec_label_pc_8440 ], [ %v4_847c, %dec_label_pc_8498 ]
  %stack_var_-44.0 = phi i32 [ %v1_8448, %dec_label_pc_8440 ], [ %v1_8484, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v2_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @function_1157c(i32 %v2_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  %v0_84a8 = load i32, i32* %fp.global-to-local, align 4
  %v1_84a8 = add i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %fp.global-to-local, align 4
  %v1_84ac = load i32, i32* @r5, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  %v3_84b8 = call i32 @function_101b8(i32 %v2_84a4, i32 %v0_84b0, i32 %v0_84b4)
  store i32 %v3_84b8, i32* %r0.global-to-local, align 4
  %v0_84bc = load i32, i32* %sb.global-to-local, align 4
  %v1_84bc = load i32, i32* %fp.global-to-local, align 4
  %v9_84bc = icmp eq i32 %v0_84bc, %v1_84bc
  store i1 %v9_84bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84bc, label %dec_label_pc_84c4, label %dec_label_pc_845c

dec_label_pc_84c4:                                ; preds = %dec_label_pc_849c, %dec_label_pc_83f4, %dec_label_pc_83e0
  %stack_var_-52.2 = phi i32 [ %v3_83e0, %dec_label_pc_83e0 ], [ %v2_83fc, %dec_label_pc_83f4 ], [ %v2_83fc, %dec_label_pc_849c ]
  %v0_84c4 = call i32 @function_10f64()
  store i32 %v0_84c4, i32* %r0.global-to-local, align 4
  %v2_84cc = inttoptr i32 %v0_84c4 to i32*
  store i32 0, i32* %v2_84cc, align 4
  %v0_84d0 = call i32 @function_109e8()
  store i32 %v0_84d0, i32* %r0.global-to-local, align 4
  %v7_84d4 = icmp eq i32 %v0_84d0, -1
  %v2_84e0 = icmp eq i32 %v0_84d0, 0
  store i1 %v2_84e0, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_84d0, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_84c4
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_84f4

bb42:                                             ; preds = %dec_label_pc_84c4
  %. = zext i1 %v7_84d4 to i32
  store i32 %., i32* @r2, align 4
  %v2_84ec = icmp eq i1 %v7_84d4, false
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ec, label %dec_label_pc_8548, label %dec_label_pc_84f4

dec_label_pc_84f4:                                ; preds = %dec_label_pc_847c, %dec_label_pc_8464, %dec_label_pc_845c, %.thread1, %bb42, %dec_label_pc_842c, %dec_label_pc_8418, %dec_label_pc_8410, %dec_label_pc_83d4
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83d4 ], [ %stack_var_-52.2, %bb42 ], [ %v2_83fc, %dec_label_pc_8410 ], [ %v2_83fc, %dec_label_pc_8418 ], [ %v2_83fc, %dec_label_pc_842c ], [ %stack_var_-52.2, %.thread1 ], [ %v2_83fc, %dec_label_pc_845c ], [ %v2_83fc, %dec_label_pc_8464 ], [ %v2_83fc, %dec_label_pc_847c ]
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v2_84f8 = icmp eq i32 %v2_8370, 0
  store i1 %v2_84f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84f8, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_84f4
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_84f4, %bb43
  %v1_8500 = xor i1 %v2_84f8, true
  call void @__pseudo_cond_branch(i1 %v1_8500, i32 ptrtoint (i32* @global_var_115d4.20 to i32))
  %v2_8508 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8508, label %.dec_label_pc_8330_crit_edge, label %dec_label_pc_8510

.dec_label_pc_8330_crit_edge:                     ; preds = %bb44
  %v29_8334.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8330

dec_label_pc_8510:                                ; preds = %bb44
  %v0_8510 = load i32, i32* %sb.global-to-local, align 4
  %v2_8510 = icmp eq i32 %v0_8510, 0
  store i1 %v2_8510, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_8510, 1
  br i1 %tmp45, label %dec_label_pc_8538, label %dec_label_pc_8518

dec_label_pc_8518:                                ; preds = %dec_label_pc_8510
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8518
  %v1_8520 = phi i32 [ %v1_852c, %dec_label_pc_851c ], [ 0, %dec_label_pc_8518 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_8520 = mul i32 %v1_8520, 8
  %v5_8520 = add i32 %v4_8520, %stack_var_-52.3
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_8528, i32 ptrtoint (i32* @global_var_115d4.20 to i32))
  %v0_852c = load i32, i32* %r4.global-to-local, align 4
  %v1_852c = add i32 %v0_852c, 1
  store i32 %v1_852c, i32* %r4.global-to-local, align 4
  %v0_8530 = load i32, i32* %sb.global-to-local, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_852c
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_8538:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8510
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_830c, i32* @r4, align 4
  store i32 %v6_830c, i32* @r5, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v15_830c, i32* @r8, align 4
  store i32 %v18_830c, i32* %sb.global-to-local, align 4
  store i32 %v21_830c, i32* %sl.global-to-local, align 4
  store i32 %v24_830c, i32* %fp.global-to-local, align 4
  store i32 %v27_830c, i32* @lr, align 4
  %v0_8544 = call i32 @function_115d4()
  store i32 %v0_8544, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %bb42, %dec_label_pc_8538
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_8538 ], [ %stack_var_-52.2, %bb42 ]
  %v2_854c = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_854c = zext i8 %v2_854c to i32
  %v2_8550 = icmp eq i8 %v2_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8550, label %dec_label_pc_8598, label %dec_label_pc_8558

dec_label_pc_8558:                                ; preds = %dec_label_pc_8548
  %v2_855c = load i32, i32* @global_var_1b7c0.24, align 4
  store i32 %v2_855c, i32* %r0.global-to-local, align 4
  %v1_8560 = inttoptr i32 %v2_855c to i32*
  %v2_8560 = load i32, i32* %v1_8560, align 4
  store i32 %v2_8560, i32* @ip, align 4
  store i32 %v4_833c, i32* %r4.global-to-local, align 4
  %v1_8568 = add i32 %v2_8560, 4
  %v2_8568 = inttoptr i32 %v1_8568 to i8*
  %v3_8568 = load i8, i8* %v2_8568, align 1
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  %v9_8570 = icmp eq i8 %v3_8568, %v3_833c
  store i1 %v9_8570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8570, label %dec_label_pc_85a0, label %dec_label_pc_858c.preheader

dec_label_pc_858c.preheader:                      ; preds = %dec_label_pc_8558
  %v0_858c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_858c

dec_label_pc_857c:                                ; preds = %dec_label_pc_858c
  %v4_857c = mul i32 %v1_858c, 4
  %v5_857c = add i32 %v4_857c, %v2_855c
  %v6_857c = inttoptr i32 %v5_857c to i32*
  %v7_857c = load i32, i32* %v6_857c, align 4
  store i32 %v7_857c, i32* @ip, align 4
  %v1_8580 = add i32 %v7_857c, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v9_8584 = icmp eq i8 %v3_8580, %v3_833c
  store i1 %v9_8584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8584, label %dec_label_pc_85a0, label %dec_label_pc_858c

dec_label_pc_858c:                                ; preds = %dec_label_pc_858c.preheader, %dec_label_pc_857c
  %v0_858c = phi i32 [ %v0_858c.pre, %dec_label_pc_858c.preheader ], [ %v1_858c, %dec_label_pc_857c ]
  %v1_858c = add i32 %v0_858c, 1
  %v9_8590 = icmp eq i32 %v1_858c, %v3_854c
  store i1 %v9_8590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8590, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_8598:                                ; preds = %dec_label_pc_858c, %dec_label_pc_8548, %dec_label_pc_85a0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_859c = call i32 @function_11b6c(i32 0)
  store i32 %v1_859c, i32* %r0.global-to-local, align 4
  %v0_85d8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_85a0

dec_label_pc_85a0:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8558, %dec_label_pc_8598
  %v0_85d8 = phi i32 [ %v2_8560, %dec_label_pc_8558 ], [ %v0_85d8.pre, %dec_label_pc_8598 ], [ %v7_857c, %dec_label_pc_857c ]
  %v0_85a0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v2_85c4 = call i32 @llvm.bswap.i32(i32 %v0_85a0)
  store i32 %v2_85c4, i32* %r0.global-to-local, align 4
  %v0_85cc = load i32, i32* @r8, align 4
  store i32 %v0_85cc, i32* %r1.global-to-local, align 4
  %v1_85d8 = inttoptr i32 %v0_85d8 to i32*
  %v2_85d8 = load i32, i32* %v1_85d8, align 4
  call void @__pseudo_branch(i32 %v2_85d8)
  br label %dec_label_pc_8598

; uselistorder directives
  uselistorder i32 %v1_858c, { 2, 0, 1 }
  uselistorder i1 %v9_8584, { 1, 0 }
  uselistorder i1 %v9_8570, { 1, 0 }
  uselistorder i32 %v1_852c, { 1, 2, 0 }
  uselistorder i32 %stack_var_-52.3, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_84ec, { 1, 0 }
  uselistorder i1 %v7_84d4, { 1, 0 }
  uselistorder i32 %v0_84d0, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_8488, { 1, 0 }
  uselistorder i32 %v1_8480, { 2, 0, 1, 3 }
  uselistorder i32 %v4_847c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8410, { 0, 2, 1 }
  uselistorder i32 %v2_83fc, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_83e0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_83bc, { 1, 0 }
  uselistorder i32 %v0_83a0, { 0, 2, 1 }
  uselistorder i32 %v0_837c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8370, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_835c, { 2, 1, 0 }
  uselistorder i32 %v4_8348, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_831c, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_830c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 4, 5, 1, 2, 3, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 9, 5, 6, 3, 7, 25, 8, 2, 12, 13, 17, 14, 10, 11, 15, 16, 23, 18, 20, 19, 21, 22, 26, 24, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 5, 4, 0, 2, 3, 6 }
  uselistorder label %dec_label_pc_85a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8598, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 1, 0 }
  uselistorder label %dec_label_pc_8548, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_84f4, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8330, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_85e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e8:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e8 = load i32, i32* @r4, align 4
  store i32 %v3_85e8, i32* %stack_var_-24, align 4
  %v6_85e8 = load i32, i32* @r5, align 4
  %v9_85e8 = load i32, i32* @r6, align 4
  %v12_85e8 = load i32, i32* @r7, align 4
  %v15_85e8 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85f4 = call i32 @function_1157c(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1b7bc.22 to i32), i32* @r4, align 4
  %v2_85fc = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_85fc = zext i8 %v2_85fc to i32
  store i32 ptrtoint (i32* @global_var_1b7c0.24 to i32), i32* @r6, align 4
  store i32 45852, i32* %r2.global-to-local, align 4
  store i32 %v2_85f4, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8610 = mul nuw nsw i32 %v3_85fc, 4
  store i32 %v3_8610, i32* %r1.global-to-local, align 4
  %v2_8614 = load i32, i32* @global_var_1b7c0.24, align 4
  %v2_8618 = inttoptr i32 %v2_85f4 to i32*
  store i32 45852, i32* %v2_8618, align 4
  %v3_861c = load i32, i32* @r5, align 4
  %v4_861c = add i32 %v3_861c, 4
  %v5_861c = inttoptr i32 %v4_861c to i8*
  store i8 0, i8* %v5_861c, align 1
  %v0_8620 = load i32, i32* %r1.global-to-local, align 4
  %v1_8620 = add i32 %v0_8620, 4
  store i32 %v1_8620, i32* %r1.global-to-local, align 4
  %v5_8624 = call i32 @function_116c4(i32 %v2_8614, i32 %v1_8620, i32 45852, i32 0)
  %v2_8628 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_8628 = zext i8 %v2_8628 to i32
  store i32 %v3_8628, i32* %r3.global-to-local, align 4
  store i32 %v5_8624, i32* %ip.global-to-local, align 4
  %v0_8630 = load i32, i32* @r5, align 4
  %v5_8630 = mul nuw nsw i32 %v3_8628, 4
  %v6_8630 = add i32 %v5_8630, %v5_8624
  %v7_8630 = inttoptr i32 %v6_8630 to i32*
  store i32 %v0_8630, i32* %v7_8630, align 4
  store i32 ptrtoint (i8* @global_var_1b7bd.29 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_8640 = load i32, i32* @r4, align 4
  %v4_8640 = inttoptr i32 %v3_8640 to i8*
  store i8 ptrtoint (i8* @global_var_1b7bd.29 to i8), i8* %v4_8640, align 1
  %v0_8644 = load i32, i32* %ip.global-to-local, align 4
  %v1_8644 = load i32, i32* @r6, align 4
  %v2_8644 = inttoptr i32 %v1_8644 to i32*
  store i32 %v0_8644, i32* %v2_8644, align 4
  %v2_8648 = call i32 @function_1157c(i32 1, i32 8)
  %v2_864c = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_864c = zext i8 %v2_864c to i32
  store i32 ptrtoint (i32* @global_var_b9c4.31 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_8648, i32* @r5, align 4
  %v3_865c = mul nuw nsw i32 %v3_864c, 4
  store i32 %v3_865c, i32* %r1.global-to-local, align 4
  %v2_8660 = load i32, i32* @global_var_1b7c0.24, align 4
  %v2_8664 = inttoptr i32 %v2_8648 to i32*
  store i32 ptrtoint (i32* @global_var_b9c4.31 to i32), i32* %v2_8664, align 4
  %v0_8668 = load i32, i32* @r7, align 4
  %v1_8668 = trunc i32 %v0_8668 to i8
  %v2_8668 = load i32, i32* @r5, align 4
  %v3_8668 = add i32 %v2_8668, 4
  %v4_8668 = inttoptr i32 %v3_8668 to i8*
  store i8 %v1_8668, i8* %v4_8668, align 1
  %v0_866c = load i32, i32* %r1.global-to-local, align 4
  %v1_866c = add i32 %v0_866c, 4
  store i32 %v1_866c, i32* %r1.global-to-local, align 4
  %v5_8670 = call i32 @function_116c4(i32 %v2_8660, i32 %v1_866c, i32 sext (i8 ptrtoint (i8* @global_var_1b7bd.29 to i8) to i32), i32 ptrtoint (i32* @global_var_b9c4.31 to i32))
  %v2_8674 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_8674 = zext i8 %v2_8674 to i32
  store i32 %v3_8674, i32* %r3.global-to-local, align 4
  store i32 %v5_8670, i32* %ip.global-to-local, align 4
  %v0_867c = load i32, i32* @r5, align 4
  %v5_867c = mul nuw nsw i32 %v3_8674, 4
  %v6_867c = add i32 %v5_867c, %v5_8670
  %v7_867c = inttoptr i32 %v6_867c to i32*
  store i32 %v0_867c, i32* %v7_867c, align 4
  %v0_8680 = load i32, i32* %r3.global-to-local, align 4
  %v1_8680 = load i32, i32* @r7, align 4
  %v2_8680 = add i32 %v1_8680, %v0_8680
  store i32 %v2_8680, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_868c = load i32, i32* %ip.global-to-local, align 4
  %v1_868c = load i32, i32* @r6, align 4
  %v2_868c = inttoptr i32 %v1_868c to i32*
  store i32 %v0_868c, i32* %v2_868c, align 4
  %v0_8690 = load i32, i32* %r2.global-to-local, align 4
  %v1_8690 = trunc i32 %v0_8690 to i8
  %v2_8690 = load i32, i32* @r4, align 4
  %v3_8690 = inttoptr i32 %v2_8690 to i8*
  store i8 %v1_8690, i8* %v3_8690, align 1
  %v2_8694 = call i32 @function_1157c(i32 %v1_8680, i32 8)
  %v2_8698 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_8698 = zext i8 %v2_8698 to i32
  store i32 ptrtoint (i32* @global_var_bec0.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8694, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_86a8 = mul nuw nsw i32 %v3_8698, 4
  store i32 %v3_86a8, i32* %r1.global-to-local, align 4
  %v2_86ac = load i32, i32* @global_var_1b7c0.24, align 4
  %v2_86b0 = inttoptr i32 %v2_8694 to i32*
  store i32 ptrtoint (i32* @global_var_bec0.33 to i32), i32* %v2_86b0, align 4
  %v3_86b4 = load i32, i32* @r5, align 4
  %v4_86b4 = add i32 %v3_86b4, 4
  %v5_86b4 = inttoptr i32 %v4_86b4 to i8*
  store i8 2, i8* %v5_86b4, align 1
  %v0_86b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_86b8 = add i32 %v0_86b8, 4
  store i32 %v1_86b8, i32* %r1.global-to-local, align 4
  %v5_86bc = call i32 @function_116c4(i32 %v2_86ac, i32 %v1_86b8, i32 ptrtoint (i32* @global_var_bec0.33 to i32), i32 2)
  %v2_86c0 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_86c0 = zext i8 %v2_86c0 to i32
  store i32 %v3_86c0, i32* %r3.global-to-local, align 4
  store i32 %v5_86bc, i32* %ip.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r7, align 4
  %v2_86c8 = add i32 %v1_86c8, %v3_86c0
  %v3_86c8 = trunc i32 %v2_86c8 to i8
  store i32 %v2_86c8, i32* %r2.global-to-local, align 4
  %v0_86cc = load i32, i32* @r5, align 4
  %v5_86cc = mul nuw nsw i32 %v3_86c0, 4
  %v6_86cc = add i32 %v5_86cc, %v5_86bc
  %v7_86cc = inttoptr i32 %v6_86cc to i32*
  store i32 %v0_86cc, i32* %v7_86cc, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r7, align 4
  %v3_86d8 = load i32, i32* @r4, align 4
  %v4_86d8 = inttoptr i32 %v3_86d8 to i8*
  store i8 %v3_86c8, i8* %v4_86d8, align 1
  %v0_86dc = load i32, i32* %ip.global-to-local, align 4
  %v1_86dc = load i32, i32* @r6, align 4
  %v2_86dc = inttoptr i32 %v1_86dc to i32*
  store i32 %v0_86dc, i32* %v2_86dc, align 4
  %v2_86e0 = call i32 @function_1157c(i32 %v0_86d4, i32 8)
  %v2_86e4 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_86e4 = zext i8 %v2_86e4 to i32
  store i32 ptrtoint (i32* @global_var_b000.35 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r8, align 4
  store i32 %v2_86e0, i32* @r5, align 4
  %v3_86f4 = mul nuw nsw i32 %v3_86e4, 4
  store i32 %v3_86f4, i32* %r1.global-to-local, align 4
  %v2_86f8 = load i32, i32* @global_var_1b7c0.24, align 4
  %v2_86fc = inttoptr i32 %v2_86e0 to i32*
  store i32 ptrtoint (i32* @global_var_b000.35 to i32), i32* %v2_86fc, align 4
  %v0_8700 = load i32, i32* @r8, align 4
  %v1_8700 = trunc i32 %v0_8700 to i8
  %v2_8700 = load i32, i32* @r5, align 4
  %v3_8700 = add i32 %v2_8700, 4
  %v4_8700 = inttoptr i32 %v3_8700 to i8*
  store i8 %v1_8700, i8* %v4_8700, align 1
  %v0_8704 = load i32, i32* %r1.global-to-local, align 4
  %v1_8704 = add i32 %v0_8704, 4
  store i32 %v1_8704, i32* %r1.global-to-local, align 4
  %v5_8708 = call i32 @function_116c4(i32 %v2_86f8, i32 %v1_8704, i32 %v2_86c8, i32 ptrtoint (i32* @global_var_b000.35 to i32))
  %v2_870c = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_870c = zext i8 %v2_870c to i32
  store i32 %v3_870c, i32* %r3.global-to-local, align 4
  store i32 %v5_8708, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* @r5, align 4
  %v5_8714 = mul nuw nsw i32 %v3_870c, 4
  %v6_8714 = add i32 %v5_8714, %v5_8708
  %v7_8714 = inttoptr i32 %v6_8714 to i32*
  store i32 %v0_8714, i32* %v7_8714, align 4
  %v0_8718 = load i32, i32* %r3.global-to-local, align 4
  %v1_8718 = load i32, i32* @r7, align 4
  %v2_8718 = add i32 %v1_8718, %v0_8718
  store i32 %v2_8718, i32* %r2.global-to-local, align 4
  %v0_871c = load i32, i32* @r8, align 4
  store i32 %v0_871c, i32* %r1.global-to-local, align 4
  %v0_8724 = load i32, i32* %ip.global-to-local, align 4
  %v1_8724 = load i32, i32* @r6, align 4
  %v2_8724 = inttoptr i32 %v1_8724 to i32*
  store i32 %v0_8724, i32* %v2_8724, align 4
  %v0_8728 = load i32, i32* %r2.global-to-local, align 4
  %v1_8728 = trunc i32 %v0_8728 to i8
  %v2_8728 = load i32, i32* @r4, align 4
  %v3_8728 = inttoptr i32 %v2_8728 to i8*
  store i8 %v1_8728, i8* %v3_8728, align 1
  %v2_872c = call i32 @function_1157c(i32 %v1_8718, i32 %v0_871c)
  %v2_8730 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_8730 = zext i8 %v2_8730 to i32
  store i32 ptrtoint (i32* @global_var_a880.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_872c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_8740 = mul nuw nsw i32 %v3_8730, 4
  store i32 %v3_8740, i32* %r1.global-to-local, align 4
  %v2_8744 = load i32, i32* @global_var_1b7c0.24, align 4
  %v2_8748 = inttoptr i32 %v2_872c to i32*
  store i32 ptrtoint (i32* @global_var_a880.37 to i32), i32* %v2_8748, align 4
  %v3_874c = load i32, i32* @r5, align 4
  %v4_874c = add i32 %v3_874c, 4
  %v5_874c = inttoptr i32 %v4_874c to i8*
  store i8 3, i8* %v5_874c, align 1
  %v0_8750 = load i32, i32* %r1.global-to-local, align 4
  %v1_8750 = add i32 %v0_8750, 4
  store i32 %v1_8750, i32* %r1.global-to-local, align 4
  %v5_8754 = call i32 @function_116c4(i32 %v2_8744, i32 %v1_8750, i32 ptrtoint (i32* @global_var_a880.37 to i32), i32 3)
  %v2_8758 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_8758 = zext i8 %v2_8758 to i32
  store i32 %v3_8758, i32* %r3.global-to-local, align 4
  store i32 %v5_8754, i32* %ip.global-to-local, align 4
  %v0_8760 = load i32, i32* @r5, align 4
  %v5_8760 = mul nuw nsw i32 %v3_8758, 4
  %v6_8760 = add i32 %v5_8760, %v5_8754
  %v7_8760 = inttoptr i32 %v6_8760 to i32*
  store i32 %v0_8760, i32* %v7_8760, align 4
  %v0_8764 = load i32, i32* %r3.global-to-local, align 4
  %v1_8764 = load i32, i32* @r7, align 4
  %v2_8764 = add i32 %v1_8764, %v0_8764
  store i32 %v2_8764, i32* %r2.global-to-local, align 4
  %v0_8768 = load i32, i32* @r8, align 4
  store i32 %v0_8768, i32* %r1.global-to-local, align 4
  %v0_8770 = load i32, i32* %ip.global-to-local, align 4
  %v1_8770 = load i32, i32* @r6, align 4
  %v2_8770 = inttoptr i32 %v1_8770 to i32*
  store i32 %v0_8770, i32* %v2_8770, align 4
  %v0_8774 = load i32, i32* %r2.global-to-local, align 4
  %v1_8774 = trunc i32 %v0_8774 to i8
  %v2_8774 = load i32, i32* @r4, align 4
  %v3_8774 = inttoptr i32 %v2_8774 to i8*
  store i8 %v1_8774, i8* %v3_8774, align 1
  %v2_8778 = call i32 @function_1157c(i32 %v1_8764, i32 %v0_8768)
  %v2_877c = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_877c = zext i8 %v2_877c to i32
  store i32 ptrtoint (i32* @global_var_a0c0.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8778, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_878c = mul nuw nsw i32 %v3_877c, 4
  store i32 %v3_878c, i32* %r1.global-to-local, align 4
  %v2_8790 = load i32, i32* @global_var_1b7c0.24, align 4
  %v2_8794 = inttoptr i32 %v2_8778 to i32*
  store i32 ptrtoint (i32* @global_var_a0c0.39 to i32), i32* %v2_8794, align 4
  %v3_8798 = load i32, i32* @r5, align 4
  %v4_8798 = add i32 %v3_8798, 4
  %v5_8798 = inttoptr i32 %v4_8798 to i8*
  store i8 4, i8* %v5_8798, align 1
  %v0_879c = load i32, i32* %r1.global-to-local, align 4
  %v1_879c = add i32 %v0_879c, 4
  store i32 %v1_879c, i32* %r1.global-to-local, align 4
  %v5_87a0 = call i32 @function_116c4(i32 %v2_8790, i32 %v1_879c, i32 ptrtoint (i32* @global_var_a0c0.39 to i32), i32 4)
  %v2_87a4 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_87a4 = zext i8 %v2_87a4 to i32
  store i32 %v3_87a4, i32* %r3.global-to-local, align 4
  store i32 %v5_87a0, i32* %ip.global-to-local, align 4
  %v0_87ac = load i32, i32* @r5, align 4
  %v5_87ac = mul nuw nsw i32 %v3_87a4, 4
  %v6_87ac = add i32 %v5_87ac, %v5_87a0
  %v7_87ac = inttoptr i32 %v6_87ac to i32*
  store i32 %v0_87ac, i32* %v7_87ac, align 4
  %v0_87b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87b0 = load i32, i32* @r7, align 4
  %v2_87b0 = add i32 %v1_87b0, %v0_87b0
  store i32 %v2_87b0, i32* %r2.global-to-local, align 4
  %v0_87b4 = load i32, i32* @r8, align 4
  store i32 %v0_87b4, i32* %r1.global-to-local, align 4
  %v0_87bc = load i32, i32* %ip.global-to-local, align 4
  %v1_87bc = load i32, i32* @r6, align 4
  %v2_87bc = inttoptr i32 %v1_87bc to i32*
  store i32 %v0_87bc, i32* %v2_87bc, align 4
  %v0_87c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_87c0 = trunc i32 %v0_87c0 to i8
  %v2_87c0 = load i32, i32* @r4, align 4
  %v3_87c0 = inttoptr i32 %v2_87c0 to i8*
  store i8 %v1_87c0, i8* %v3_87c0, align 1
  %v2_87c4 = call i32 @function_1157c(i32 %v1_87b0, i32 %v0_87b4)
  %v2_87c8 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_87c8 = zext i8 %v2_87c8 to i32
  store i32 ptrtoint (i32* @global_var_97b0.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87c4, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_87d8 = mul nuw nsw i32 %v3_87c8, 4
  store i32 %v3_87d8, i32* %r1.global-to-local, align 4
  %v2_87dc = load i32, i32* @global_var_1b7c0.24, align 4
  %v2_87e0 = inttoptr i32 %v2_87c4 to i32*
  store i32 ptrtoint (i32* @global_var_97b0.41 to i32), i32* %v2_87e0, align 4
  %v3_87e4 = load i32, i32* @r5, align 4
  %v4_87e4 = add i32 %v3_87e4, 4
  %v5_87e4 = inttoptr i32 %v4_87e4 to i8*
  store i8 5, i8* %v5_87e4, align 1
  %v0_87e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87e8 = add i32 %v0_87e8, 4
  store i32 %v1_87e8, i32* %r1.global-to-local, align 4
  %v5_87ec = call i32 @function_116c4(i32 %v2_87dc, i32 %v1_87e8, i32 ptrtoint (i32* @global_var_97b0.41 to i32), i32 5)
  %v2_87f0 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_87f0 = zext i8 %v2_87f0 to i32
  store i32 %v3_87f0, i32* %r3.global-to-local, align 4
  store i32 %v5_87ec, i32* %ip.global-to-local, align 4
  %v0_87f8 = load i32, i32* @r5, align 4
  %v5_87f8 = mul nuw nsw i32 %v3_87f0, 4
  %v6_87f8 = add i32 %v5_87f8, %v5_87ec
  %v7_87f8 = inttoptr i32 %v6_87f8 to i32*
  store i32 %v0_87f8, i32* %v7_87f8, align 4
  %v0_87fc = load i32, i32* %r3.global-to-local, align 4
  %v1_87fc = load i32, i32* @r7, align 4
  %v2_87fc = add i32 %v1_87fc, %v0_87fc
  store i32 %v2_87fc, i32* %r2.global-to-local, align 4
  %v0_8800 = load i32, i32* @r8, align 4
  store i32 %v0_8800, i32* %r1.global-to-local, align 4
  %v0_8808 = load i32, i32* %ip.global-to-local, align 4
  %v1_8808 = load i32, i32* @r6, align 4
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  store i32 %v0_8808, i32* %v2_8808, align 4
  %v0_880c = load i32, i32* %r2.global-to-local, align 4
  %v1_880c = trunc i32 %v0_880c to i8
  %v2_880c = load i32, i32* @r4, align 4
  %v3_880c = inttoptr i32 %v2_880c to i8*
  store i8 %v1_880c, i8* %v3_880c, align 1
  %v2_8810 = call i32 @function_1157c(i32 %v1_87fc, i32 %v0_8800)
  %v2_8814 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_8814 = zext i8 %v2_8814 to i32
  store i32 ptrtoint (i32* @global_var_9078.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8810, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_8824 = mul nuw nsw i32 %v3_8814, 4
  store i32 %v3_8824, i32* %r1.global-to-local, align 4
  %v2_8828 = load i32, i32* @global_var_1b7c0.24, align 4
  %v2_882c = inttoptr i32 %v2_8810 to i32*
  store i32 ptrtoint (i32* @global_var_9078.43 to i32), i32* %v2_882c, align 4
  %v3_8830 = load i32, i32* @r5, align 4
  %v4_8830 = add i32 %v3_8830, 4
  %v5_8830 = inttoptr i32 %v4_8830 to i8*
  store i8 6, i8* %v5_8830, align 1
  %v0_8834 = load i32, i32* %r1.global-to-local, align 4
  %v1_8834 = add i32 %v0_8834, 4
  store i32 %v1_8834, i32* %r1.global-to-local, align 4
  %v5_8838 = call i32 @function_116c4(i32 %v2_8828, i32 %v1_8834, i32 ptrtoint (i32* @global_var_9078.43 to i32), i32 6)
  %v2_883c = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_883c = zext i8 %v2_883c to i32
  store i32 %v3_883c, i32* %r3.global-to-local, align 4
  store i32 %v5_8838, i32* %ip.global-to-local, align 4
  %v0_8844 = load i32, i32* @r5, align 4
  %v5_8844 = mul nuw nsw i32 %v3_883c, 4
  %v6_8844 = add i32 %v5_8844, %v5_8838
  %v7_8844 = inttoptr i32 %v6_8844 to i32*
  store i32 %v0_8844, i32* %v7_8844, align 4
  %v0_8848 = load i32, i32* %r3.global-to-local, align 4
  %v1_8848 = load i32, i32* @r7, align 4
  %v2_8848 = add i32 %v1_8848, %v0_8848
  store i32 %v2_8848, i32* %r2.global-to-local, align 4
  %v0_884c = load i32, i32* @r8, align 4
  store i32 %v0_884c, i32* %r1.global-to-local, align 4
  %v1_8854 = trunc i32 %v2_8848 to i8
  %v2_8854 = load i32, i32* @r4, align 4
  %v3_8854 = inttoptr i32 %v2_8854 to i8*
  store i8 %v1_8854, i8* %v3_8854, align 1
  %v0_8858 = load i32, i32* %ip.global-to-local, align 4
  %v1_8858 = load i32, i32* @r6, align 4
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  store i32 %v0_8858, i32* %v2_8858, align 4
  %v2_885c = call i32 @function_1157c(i32 %v1_8848, i32 %v0_884c)
  %v2_8860 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_8860 = zext i8 %v2_8860 to i32
  store i32 ptrtoint (i32* @global_var_88d0.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_885c, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8870 = mul nuw nsw i32 %v3_8860, 4
  store i32 %v3_8870, i32* %r1.global-to-local, align 4
  %v2_8874 = load i32, i32* @global_var_1b7c0.24, align 4
  %v2_8878 = inttoptr i32 %v2_885c to i32*
  store i32 ptrtoint (i32* @global_var_88d0.45 to i32), i32* %v2_8878, align 4
  %v3_887c = load i32, i32* @r5, align 4
  %v4_887c = add i32 %v3_887c, 4
  %v5_887c = inttoptr i32 %v4_887c to i8*
  store i8 7, i8* %v5_887c, align 1
  %v0_8880 = load i32, i32* %r1.global-to-local, align 4
  %v1_8880 = add i32 %v0_8880, 4
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v5_8884 = call i32 @function_116c4(i32 %v2_8874, i32 %v1_8880, i32 ptrtoint (i32* @global_var_88d0.45 to i32), i32 7)
  %v2_8888 = load i8, i8* bitcast (i8** @global_var_1b7bc.22 to i8*), align 4
  %v3_8888 = zext i8 %v2_8888 to i32
  store i32 %v3_8888, i32* %r3.global-to-local, align 4
  %v1_888c = load i32, i32* @r6, align 4
  %v2_888c = inttoptr i32 %v1_888c to i32*
  store i32 %v5_8884, i32* %v2_888c, align 4
  %v0_8890 = load i32, i32* @r5, align 4
  %v2_8890 = load i32, i32* %r3.global-to-local, align 4
  %v5_8890 = mul i32 %v2_8890, 4
  %v6_8890 = add i32 %v5_8890, %v5_8884
  %v7_8890 = inttoptr i32 %v6_8890 to i32*
  store i32 %v0_8890, i32* %v7_8890, align 4
  %v0_8894 = load i32, i32* %r3.global-to-local, align 4
  %v1_8894 = load i32, i32* @r7, align 4
  %v2_8894 = add i32 %v1_8894, %v0_8894
  store i32 %v2_8894, i32* %r2.global-to-local, align 4
  %v1_889c = trunc i32 %v2_8894 to i8
  %v2_889c = load i32, i32* @r4, align 4
  %v3_889c = inttoptr i32 %v2_889c to i8*
  store i8 %v1_889c, i8* %v3_889c, align 1
  %v2_88a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_88a0, i32* @r4, align 4
  store i32 %v6_85e8, i32* @r5, align 4
  store i32 %v9_85e8, i32* @r6, align 4
  store i32 %v12_85e8, i32* @r7, align 4
  store i32 %v15_85e8, i32* @r8, align 4
  ret i32 %v1_8894

; uselistorder directives
  uselistorder i32 %v1_8894, { 1, 0 }
  uselistorder i32 %v1_8848, { 1, 0 }
  uselistorder i32 %v1_87fc, { 1, 0 }
  uselistorder i32 %v1_87b0, { 1, 0 }
  uselistorder i32 %v1_8764, { 1, 0 }
  uselistorder i32 %v1_8718, { 1, 0 }
  uselistorder i32 %v2_86c8, { 0, 2, 1 }
  uselistorder i32 %v3_86c0, { 1, 0, 2 }
  uselistorder i32 %v1_8680, { 1, 0 }
  uselistorder i32* @global_var_1b7c0.24, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i8* bitcast (i8** @global_var_1b7bc.22 to i8*), { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_88d0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_88d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_88d0 = load i32, i32* @r4, align 4
  %v15_88d0 = load i32, i32* @r8, align 4
  %v21_88d0 = load i32, i32* @sl, align 4
  %v24_88d0 = load i32, i32* @fp, align 4
  %v1_88d4 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_88d4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_88f0 = urem i32 %arg4, 256
  store i32 %v1_88f0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_8900 = call i32 @function_1157c(i32 %v1_88d4, i32 4)
  %v0_8904 = load i32, i32* @r5, align 4
  store i32 %v0_8904, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8910 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8910, i32* %r3.global-to-local, align 4
  %v0_8914 = load i32, i32* @r4, align 4
  store i32 %v0_8914, i32* %r0.global-to-local, align 4
  %v5_8918 = inttoptr i32 %v0_8904 to i32*
  %v6_8918 = call i32 @function_829c(i32 %v0_8914, i32* %v5_8918, i32 2, i32 %v0_8910, i32 %v2_8900)
  %v1_8924 = urem i32 %v6_8918, 256
  store i32 %v1_8924, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8930 = load i32, i32* @r5, align 4
  store i32 %v0_8930, i32* %r1.global-to-local, align 4
  %v0_8934 = load i32, i32* @r4, align 4
  store i32 %v0_8934, i32* %r0.global-to-local, align 4
  %v5_8938 = trunc i32 %v6_8918 to i8
  %v6_893c = inttoptr i32 %v0_8930 to i32*
  %v7_893c = call i32 @function_829c(i32 %v0_8934, i32* %v6_893c, i32 3, i32 65535, i32 %v6_8918)
  %v0_8940 = load i32, i32* @r5, align 4
  store i32 %v0_8940, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_893c, i32* @r7, align 4
  %v0_8950 = load i32, i32* @r4, align 4
  store i32 %v0_8950, i32* %r0.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v0_8940 to i32*
  %v6_8954 = call i32 @function_829c(i32 %v0_8950, i32* %v5_8954, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_895c = urem i32 %v6_8954, 256
  store i32 %v1_895c, i32* %ip.global-to-local, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  store i32 %v0_8960, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_896c = load i32, i32* @r4, align 4
  store i32 %v0_896c, i32* %r0.global-to-local, align 4
  %v5_8970 = trunc i32 %v6_8954 to i8
  %v6_8974 = inttoptr i32 %v0_8960 to i32*
  %v7_8974 = call i32 @function_829c(i32 %v0_896c, i32* %v6_8974, i32 5, i32 1, i32 %v6_8954)
  %v1_8980 = urem i32 %v7_8974, 256
  store i32 %v1_8980, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_898c = load i32, i32* @r5, align 4
  store i32 %v0_898c, i32* %r1.global-to-local, align 4
  %v0_8990 = load i32, i32* @r4, align 4
  store i32 %v0_8990, i32* %r0.global-to-local, align 4
  %v5_8998 = inttoptr i32 %v0_898c to i32*
  %v6_8998 = call i32 @function_829c(i32 %v0_8990, i32* %v5_8998, i32 6, i32 65535, i32 %v1_8980)
  %v0_89a4 = load i32, i32* @r5, align 4
  store i32 %v0_89a4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_89b0 = load i32, i32* @r4, align 4
  store i32 %v0_89b0, i32* %r0.global-to-local, align 4
  %v5_89b4 = inttoptr i32 %v0_89a4 to i32*
  %v6_89b4 = call i32 @function_829c(i32 %v0_89b0, i32* %v5_89b4, i32 7, i32 65535, i32 %v6_8998)
  %v0_89b8 = load i32, i32* @r5, align 4
  store i32 %v0_89b8, i32* %r1.global-to-local, align 4
  %v0_89bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_89bc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_89b4, i32* @sl, align 4
  %v0_89c8 = load i32, i32* @r4, align 4
  store i32 %v0_89c8, i32* %r0.global-to-local, align 4
  %v5_89cc = inttoptr i32 %v0_89b8 to i32*
  %v6_89cc = call i32 @function_829c(i32 %v0_89c8, i32* %v5_89cc, i32 %v0_89bc, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_89dc = load i32, i32* @r5, align 4
  store i32 %v0_89dc, i32* %r1.global-to-local, align 4
  %v0_89e0 = load i32, i32* @r4, align 4
  store i32 %v0_89e0, i32* %r0.global-to-local, align 4
  %v5_89e4 = inttoptr i32 %v0_89dc to i32*
  %v6_89e4 = call i32 @function_829c(i32 %v0_89e0, i32* %v5_89e4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_89ec = urem i32 %v6_89e4, 256
  store i32 %v1_89ec, i32* %ip.global-to-local, align 4
  %v0_89f0 = load i32, i32* @r5, align 4
  store i32 %v0_89f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_89f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_89f8, i32* %r3.global-to-local, align 4
  %v0_89fc = load i32, i32* @r4, align 4
  store i32 %v0_89fc, i32* %r0.global-to-local, align 4
  %v5_8a04 = inttoptr i32 %v0_89f0 to i32*
  %v6_8a04 = call i32 @function_829c(i32 %v0_89fc, i32* %v5_8a04, i32 18, i32 %v0_89f8, i32 %v1_89ec)
  %v0_8a0c = load i32, i32* @r5, align 4
  store i32 %v0_8a0c, i32* %r1.global-to-local, align 4
  %v2_8a10 = load i32, i32* @global_var_1b860.47, align 4
  store i32 %v2_8a10, i32* %r3.global-to-local, align 4
  store i32 %v6_8a04, i32* @r8, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_8a1c = load i32, i32* @r4, align 4
  store i32 %v0_8a1c, i32* %r0.global-to-local, align 4
  %v5_8a20 = inttoptr i32 %v0_8a0c to i32*
  %v6_8a20 = call i32 @function_829c(i32 %v0_8a1c, i32* %v5_8a20, i32 19, i32 %v2_8a10, i32 ptrtoint (i32* @0 to i32))
  %v0_8a28 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a28, i32* %r0.global-to-local, align 4
  %v1_8a2c = inttoptr i32 %v0_8a28 to i32*
  %v2_8a2c = call i32 @function_10c8c(i32* %v1_8a2c)
  %v1_8a30 = load i32, i32* @r6, align 4
  %v2_8a30 = add i32 %v1_8a30, %v2_8a2c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_8a44 = call i32 @function_11290(i32 2, i32 3, i32 6)
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v7_8a48 = icmp eq i32 %v3_8a44, -1
  store i1 %v7_8a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a48, label %dec_label_pc_9060, label %dec_label_pc_8a54

dec_label_pc_8a54:                                ; preds = %dec_label_pc_88d0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_8a5c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_8a5c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_8a64 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a64, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_8a70 = call i32 @function_11260(i32 %v3_8a44, i32 %v0_8a64, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8a70, i32* %r0.global-to-local, align 4
  %v7_8a74 = icmp eq i32 %v6_8a70, -1
  store i1 %v7_8a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a74, label %dec_label_pc_9068, label %dec_label_pc_8a7c

dec_label_pc_8a7c:                                ; preds = %dec_label_pc_8a54
  %v0_8a88 = load i32, i32* @sl, align 4
  %v3_8a88 = mul i32 %v0_8a88, 65536
  store i32 %v3_8a88, i32* %sl.global-to-local, align 4
  %v0_8a8c = load i32, i32* @r7, align 4
  %v2_8a94 = icmp eq i32 %v1_88d4, 0
  store i1 %v2_8a94, i1* %cpsr_z.global-to-local, align 1
  %v0_8a98 = load i32, i32* @r8, align 4
  %v1_8a98 = urem i32 %v0_8a98, 256
  store i32 %v1_8a98, i32* %r8.global-to-local, align 4
  %v3_8a9c = urem i32 %v0_8a8c, 65536
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  %v3_8aa0 = urem i32 %v6_8998, 65536
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v3_8aa4 = urem i32 %v0_8a88, 65536
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v0_8ab0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ab0, i32* %stack_var_-40, align 4
  br i1 %v2_8a94, label %dec_label_pc_8d44.preheader, label %dec_label_pc_8ac4

dec_label_pc_8ac4:                                ; preds = %dec_label_pc_8a7c
  %v3_8acc = mul i32 %v6_89cc, 65536
  %v1_8ad4 = urem i32 %v6_8998, 256
  %v1_8adc = add i32 %v3_8acc, 524288
  %v1_8ae0 = add i32 %v3_8acc, 4325376
  %v1_8ae4 = urem i32 %v0_8a88, 256
  %v1_8ae8 = add i32 %v3_8acc, 1835008
  %v0_8a8c.not = or i32 %v0_8a8c, -65536
  %v1_8af0 = xor i32 %v0_8a8c.not, 65535
  %v3_8af4 = udiv i32 %v1_8ae8, 256
  %tmp82 = udiv i32 %v0_8a8c, 256
  %v1_8b08 = and i32 %v3_8af4, 65280
  store i32 %v1_8b08, i32* %r0.global-to-local, align 4
  %v3_8b2c = mul nuw nsw i32 %v1_8ad4, 256
  %tmp83 = udiv i32 %v6_8998, 256
  %v4_8b34 = urem i32 %tmp83, 256
  %v5_8b34 = or i32 %v4_8b34, %v3_8b2c
  store i32 %v5_8b34, i32* @lr, align 4
  %tmp84 = mul nsw i32 %v1_8af0, 256
  %v3_8b3c = mul nuw nsw i32 %v1_8ae4, 256
  %sext23 = mul i32 %tmp82, 16777216
  %v4_8b44 = sdiv i32 %sext23, 16777216
  %v4_8b0c = sdiv i32 %v1_8ae0, 16777216
  %tmp85 = udiv i32 %v0_8a88, 256
  %v4_8b4c = urem i32 %tmp85, 256
  %v5_8b4c = or i32 %v4_8b4c, %v3_8b3c
  store i32 %v5_8b4c, i32* @r7, align 4
  %v1_8b50 = and i32 %tmp84, 65280
  store i32 %v1_8b50, i32* %ip.global-to-local, align 4
  %v4_8b54 = sdiv i32 %v1_8ae8, 16777216
  %v3_8b58 = udiv i32 %v1_8adc, 256
  %tmp86 = udiv i32 %v1_8af0, 256
  %v4_8b5c = urem i32 %tmp86, 256
  %v5_8b5c = or i32 %v4_8b5c, %v1_8b50
  store i32 %v5_8b5c, i32* @r6, align 4
  %v3_8b60 = ashr i32 %v1_8ae0, 31
  %v3_8b64 = ashr i32 %sext23, 31
  %v1_8b68 = and i32 %v3_8b58, 65280
  store i32 %v1_8b68, i32* @r5, align 4
  %v3_8b74 = ashr i32 %v1_8ae8, 31
  store i32 %v3_8b74, i32* %r2.global-to-local, align 4
  %v3_8b7832 = udiv i32 %v1_8b50, 256
  store i32 %v3_8b7832, i32* %r3.global-to-local, align 4
  store i32 %v1_8ad4, i32* %r1.global-to-local, align 4
  %v4_8b80 = udiv i32 %v1_8adc, 16777216
  %v5_8b80 = or i32 %v4_8b80, %v1_8b68
  store i32 %v5_8b80, i32* %r8.global-to-local, align 4
  %v5_8b84 = trunc i32 %tmp86 to i8
  store i32 %v0_8ab0, i32* @r4, align 4
  %v3_8b9c33 = udiv i32 %v1_8b68, 256
  store i32 %v3_8b9c33, i32* %sl.global-to-local, align 4
  store i32 %v1_8ae4, i32* %fp.global-to-local, align 4
  %sext15 = mul i32 %v1_8af0, 16777216
  %v4_8cc0 = sdiv i32 %sext15, 16777216
  %v2_8cf0 = icmp eq i32 %v1_8a98, 0
  %sext16 = mul i32 %v6_8998, 16777216
  %v4_8d04 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp83, 16777216
  %v4_8d20 = sdiv i32 %sext17, 16777216
  %v1_8c08 = trunc i32 %v4_8b44 to i8
  br label %dec_label_pc_8ba4

dec_label_pc_8ba4:                                ; preds = %bb97, %dec_label_pc_8ac4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8bb0 = call i32 @function_1157c(i32 1510, i32 4)
  store i32 %v2_8bb0, i32* %r0.global-to-local, align 4
  store i32 %v2_8900, i32* %r2.global-to-local, align 4
  %v3_8bb8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8bb8, i32* %r3.global-to-local, align 4
  %v2_8bbc = load i32, i32* @r4, align 4
  %v5_8bbc = mul i32 %v2_8bbc, 4
  %v6_8bbc = add i32 %v5_8bbc, %v2_8900
  %v7_8bbc = inttoptr i32 %v6_8bbc to i32*
  store i32 %v2_8bb0, i32* %v7_8bbc, align 4
  %v0_8bc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_8bc0 = load i32, i32* %r3.global-to-local, align 4
  %v4_8bc0 = mul i32 %v1_8bc0, 4
  %v5_8bc0 = add i32 %v4_8bc0, %v0_8bc0
  %v6_8bc0 = inttoptr i32 %v5_8bc0 to i32*
  %v7_8bc0 = load i32, i32* %v6_8bc0, align 4
  store i32 %v7_8bc0, i32* %r4.global-to-local, align 4
  %v1_8bc4 = inttoptr i32 %v7_8bc0 to i8*
  %v2_8bc4 = load i8, i8* %v1_8bc4, align 1
  %tmp = urem i8 %v2_8bc4, 16
  %v1_8bc8 = zext i8 %tmp to i32
  %v1_8bcc = or i32 %v1_8bc8, 64
  store i32 %v1_8bcc, i32* %r2.global-to-local, align 4
  %v1_8bd0 = trunc i32 %v1_8bcc to i8
  store i8 %v1_8bd0, i8* %v1_8bc4, align 1
  %v0_8bd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bd4 = inttoptr i32 %v0_8bd4 to i8*
  %v2_8bd4 = load i8, i8* %v1_8bd4, align 1
  %v1_8bd8 = and i8 %v2_8bd4, -16
  %v1_8bdc = or i8 %v1_8bd8, 5
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  store i8 %v1_8bdc, i8* %v1_8bd4, align 1
  %v2_8bec = load i32, i32* %r4.global-to-local, align 4
  %v3_8bec = add i32 %v2_8bec, 1
  %v4_8bec = inttoptr i32 %v3_8bec to i8*
  store i8 %v5_8938, i8* %v4_8bec, align 1
  %v2_8bf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8bf4 = add i32 %v2_8bf4, 8
  %v4_8bf4 = inttoptr i32 %v3_8bf4 to i8*
  store i8 %v5_8970, i8* %v4_8bf4, align 1
  store i32 %v4_8b44, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_8c00 = load i32, i32* %r1.global-to-local, align 4
  %v9_8c00 = icmp eq i32 %v0_8c00, 0
  store i1 %v9_8c00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8b60, i32* %r2.global-to-local, align 4
  %v2_8c08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c08 = add i32 %v2_8c08, 4
  %v4_8c08 = inttoptr i32 %v3_8c08 to i8*
  store i8 %v1_8c08, i8* %v4_8c08, align 1
  store i32 %v4_8b0c, i32* %r1.global-to-local, align 4
  %v0_8c10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c10, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_8ba4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_8c14 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c14 = add i32 %v3_8c14, 6
  %v5_8c14 = inttoptr i32 %v4_8c14 to i8*
  store i8 64, i8* %v5_8c14, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_8ba4, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_8c1c = load i32, i32* %r2.global-to-local, align 4
  %v1_8c1c = trunc i32 %v0_8c1c to i8
  %v2_8c1c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c1c = add i32 %v2_8c1c, 3
  %v4_8c1c = inttoptr i32 %v3_8c1c to i8*
  store i8 %v1_8c1c, i8* %v4_8c1c, align 1
  %v0_8c20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c20 = trunc i32 %v0_8c20 to i8
  %v2_8c20 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c20 = add i32 %v2_8c20, 2
  %v4_8c20 = inttoptr i32 %v3_8c20 to i8*
  store i8 %v1_8c20, i8* %v4_8c20, align 1
  %v0_8c24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c24, label %bb88, label %bb87

bb87:                                             ; preds = %.thread
  %v1_8c24 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_8c24, i32* %r2.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %.thread, %bb87
  store i32 %v3_8b64, i32* %r1.global-to-local, align 4
  %v0_8c2c = load i32, i32* %r3.global-to-local, align 4
  %v1_8c2c = trunc i32 %v0_8c2c to i8
  %v2_8c2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c2c = add i32 %v2_8c2c, 9
  %v4_8c2c = inttoptr i32 %v3_8c2c to i8*
  store i8 %v1_8c2c, i8* %v4_8c2c, align 1
  %v0_8c30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c30, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_8c30 = load i32, i32* %r2.global-to-local, align 4
  %v2_8c30 = trunc i32 %v1_8c30 to i8
  %v3_8c30 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c30 = add i32 %v3_8c30, 7
  %v5_8c30 = inttoptr i32 %v4_8c30 to i8*
  store i8 %v2_8c30, i8* %v5_8c30, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  %v3_8c34 = load i32, i32* %stack_var_-40, align 4
  %v5_8c3c = mul i32 %v3_8c34, 24
  store i32 %v5_8c3c, i32* %r3.global-to-local, align 4
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  %v1_8c44 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c44 = add i32 %v1_8c44, 12
  %v3_8c44 = inttoptr i32 %v2_8c44 to i32*
  store i32 %v6_8a20, i32* %v3_8c44, align 4
  %v0_8c48 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c48 = load i32, i32* @sb, align 4
  %v2_8c48 = add i32 %v1_8c48, %v0_8c48
  store i32 %v2_8c48, i32* %r3.global-to-local, align 4
  %v1_8c4c = add i32 %v2_8c48, 16
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v0_8c50 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c50 = trunc i32 %v0_8c50 to i8
  %v2_8c50 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c50 = add i32 %v2_8c50, 5
  %v4_8c50 = inttoptr i32 %v3_8c50 to i8*
  store i8 %v1_8c50, i8* %v4_8c50, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_8c58 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c58 = add i32 %v0_8c58, 20
  store i32 %v1_8c58, i32* %r1.global-to-local, align 4
  %v3_8c5c = add i32 %v0_8c58, 22
  %v4_8c5c = inttoptr i32 %v3_8c5c to i8*
  store i8 101, i8* %v4_8c5c, align 1
  %v0_8c60 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c60 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c60 = add i32 %v1_8c60, 16
  %v3_8c60 = inttoptr i32 %v2_8c60 to i32*
  store i32 %v0_8c60, i32* %v3_8c60, align 4
  %v0_8c64 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c64 = add i32 %v0_8c64, 24
  store i32 %v1_8c64, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_8c6c = load i32, i32* %r3.global-to-local, align 4
  %v1_8c6c = add i32 %v0_8c6c, -93
  store i32 %v1_8c6c, i32* %r3.global-to-local, align 4
  %v2_8c70 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c70 = add i32 %v2_8c70, 3
  %v4_8c70 = inttoptr i32 %v3_8c70 to i8*
  store i8 88, i8* %v4_8c70, align 1
  %v0_8c74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c74 = trunc i32 %v0_8c74 to i8
  %v2_8c74 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c74 = add i32 %v2_8c74, 12
  %v4_8c74 = inttoptr i32 %v3_8c74 to i8*
  store i8 %v1_8c74, i8* %v4_8c74, align 1
  %v0_8c78 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c78 = trunc i32 %v0_8c78 to i8
  %v2_8c78 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c78 = add i32 %v2_8c78, 13
  %v4_8c78 = inttoptr i32 %v3_8c78 to i8*
  store i8 %v1_8c78, i8* %v4_8c78, align 1
  %v0_8c7c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c7c = add i32 %v0_8c7c, 38
  %v2_8c7c = inttoptr i32 %v1_8c7c to i8*
  %v3_8c7c = load i8, i8* %v2_8c7c, align 1
  %tmp103 = urem i8 %v3_8c7c, 16
  %v1_8c80 = zext i8 %tmp103 to i32
  %v1_8c84 = or i32 %v1_8c80, 64
  store i32 %v1_8c84, i32* %r3.global-to-local, align 4
  %v1_8c88 = trunc i32 %v1_8c84 to i8
  store i8 %v1_8c88, i8* %v2_8c7c, align 1
  %v0_8c8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c8c = add i32 %v0_8c8c, 38
  %v2_8c8c = inttoptr i32 %v1_8c8c to i8*
  %v3_8c8c = load i8, i8* %v2_8c8c, align 1
  %v1_8c90 = and i8 %v3_8c8c, -16
  %v1_8c94 = or i8 %v1_8c90, 5
  store i8 %v1_8c94, i8* %v2_8c8c, align 1
  %v0_8ca0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ca0 = add i32 %v0_8ca0, 38
  store i32 %v1_8ca0, i32* @r5, align 4
  %v3_8ca4 = add i32 %v0_8ca0, 39
  %v4_8ca4 = inttoptr i32 %v3_8ca4 to i8*
  store i8 %v5_8938, i8* %v4_8ca4, align 1
  store i32 %v4_8b54, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_8b74, i32* %r2.global-to-local, align 4
  %v2_8cb4 = load i32, i32* @r5, align 4
  %v3_8cb4 = add i32 %v2_8cb4, 4
  %v4_8cb4 = inttoptr i32 %v3_8cb4 to i8*
  store i8 %v5_8b84, i8* %v4_8cb4, align 1
  %v0_8cb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cb8 = trunc i32 %v0_8cb8 to i8
  %v2_8cb8 = load i32, i32* @r5, align 4
  %v3_8cb8 = add i32 %v2_8cb8, 2
  %v4_8cb8 = inttoptr i32 %v3_8cb8 to i8*
  store i8 %v1_8cb8, i8* %v4_8cb8, align 1
  %v0_8cbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cbc, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  store i32 %v4_8cc0, i32* %r1.global-to-local, align 4
  %v0_8cc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cc4 = trunc i32 %v0_8cc4 to i8
  %v2_8cc4 = load i32, i32* @r5, align 4
  %v3_8cc4 = add i32 %v2_8cc4, 3
  %v4_8cc4 = inttoptr i32 %v3_8cc4 to i8*
  store i8 %v1_8cc4, i8* %v4_8cc4, align 1
  store i32 %v6_8954, i32* %r2.global-to-local, align 4
  %v0_8ccc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8ccc, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_8ccc = load i32, i32* %r3.global-to-local, align 4
  %v2_8ccc = trunc i32 %v1_8ccc to i8
  %v3_8ccc = load i32, i32* @r5, align 4
  %v4_8ccc = add i32 %v3_8ccc, 6
  %v5_8ccc = inttoptr i32 %v4_8ccc to i8*
  store i8 %v2_8ccc, i8* %v5_8ccc, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_8cd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cd4 = trunc i32 %v0_8cd4 to i8
  %v2_8cd4 = load i32, i32* @r5, align 4
  %v3_8cd4 = add i32 %v2_8cd4, 5
  %v4_8cd4 = inttoptr i32 %v3_8cd4 to i8*
  store i8 %v1_8cd4, i8* %v4_8cd4, align 1
  %v0_8cd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v0_8cd8 to i8
  %v2_8cd8 = load i32, i32* @r5, align 4
  %v3_8cd8 = add i32 %v2_8cd8, 8
  %v4_8cd8 = inttoptr i32 %v3_8cd8 to i8*
  store i8 %v1_8cd8, i8* %v4_8cd8, align 1
  %v0_8cdc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cdc, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_8cdc = load i32, i32* %ip.global-to-local, align 4
  %v2_8cdc = trunc i32 %v1_8cdc to i8
  %v3_8cdc = load i32, i32* @r5, align 4
  %v4_8cdc = add i32 %v3_8cdc, 7
  %v5_8cdc = inttoptr i32 %v4_8cdc to i8*
  store i8 %v2_8cdc, i8* %v5_8cdc, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_8ce0 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ce0 = trunc i32 %v0_8ce0 to i8
  %v2_8ce0 = load i32, i32* @r5, align 4
  %v3_8ce0 = add i32 %v2_8ce0, 9
  %v4_8ce0 = inttoptr i32 %v3_8ce0 to i8*
  store i8 %v1_8ce0, i8* %v4_8ce0, align 1
  %v0_8ce4 = call i32 @function_dab8()
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  store i32 %v1_8a98, i32* %r1.global-to-local, align 4
  store i1 %v2_8cf0, i1* %cpsr_z.global-to-local, align 1
  %v1_8cf4 = sub i32 1023, %v0_8ce4
  store i32 %v1_8cf4, i32* %r3.global-to-local, align 4
  br i1 %v2_8cf0, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb96
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 16
  %v4_8cfc = inttoptr i32 %v3_8cfc to i32*
  store i32 %v1_8cf4, i32* %v4_8cfc, align 4
  br label %bb97

.thread19:                                        ; preds = %bb96
  %v1_8cf8 = load i32, i32* %r4.global-to-local, align 4
  %v2_8cf8 = add i32 %v1_8cf8, 16
  %v3_8cf8 = inttoptr i32 %v2_8cf8 to i32*
  %v4_8cf8 = load i32, i32* %v3_8cf8, align 4
  store i32 %v4_8cf8, i32* %r3.global-to-local, align 4
  %v2_8d00 = load i32, i32* @r5, align 4
  %v3_8d00 = add i32 %v2_8d00, 16
  %v4_8d00 = inttoptr i32 %v3_8d00 to i32*
  store i32 %v4_8cf8, i32* %v4_8d00, align 4
  br label %bb97

bb97:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_8d04, i32* %r3.global-to-local, align 4
  %v0_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d08 = add i32 %v0_8d08, 58
  store i32 %v1_8d08, i32* @r6, align 4
  %v1_8d0c = load i32, i32* @r5, align 4
  %v2_8d0c = add i32 %v1_8d0c, 12
  %v3_8d0c = inttoptr i32 %v2_8d0c to i32*
  store i32 %v0_8ce4, i32* %v3_8d0c, align 4
  %v0_8d10 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d10 = trunc i32 %v0_8d10 to i8
  %v2_8d10 = load i32, i32* @r6, align 4
  %v3_8d10 = add i32 %v2_8d10, 1
  %v4_8d10 = inttoptr i32 %v3_8d10 to i8*
  store i8 %v1_8d10, i8* %v4_8d10, align 1
  %v3_8d14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8d14, i32* %r3.global-to-local, align 4
  store i32 %v1_88d4, i32* %r1.global-to-local, align 4
  %v1_8d1c = add i32 %v3_8d14, 1
  store i32 %v1_8d1c, i32* @r4, align 4
  store i32 %v4_8d20, i32* %r2.global-to-local, align 4
  %v9_8d24 = icmp eq i32 %v1_8d1c, %v1_88d4
  store i1 %v9_8d24, i1* %cpsr_z.global-to-local, align 1
  %v0_8d28 = load i32, i32* %sl.global-to-local, align 4
  %v1_8d28 = trunc i32 %v0_8d28 to i8
  %v2_8d28 = load i32, i32* @r6, align 4
  %v3_8d28 = add i32 %v2_8d28, 5
  %v4_8d28 = inttoptr i32 %v3_8d28 to i8*
  store i8 %v1_8d28, i8* %v4_8d28, align 1
  %v0_8d2c = load i32, i32* %r2.global-to-local, align 4
  %v1_8d2c = trunc i32 %v0_8d2c to i8
  %v2_8d2c = load i32, i32* @r6, align 4
  %v3_8d2c = inttoptr i32 %v2_8d2c to i8*
  store i8 %v1_8d2c, i8* %v3_8d2c, align 1
  %v0_8d30 = load i32, i32* @r7, align 4
  %v1_8d30 = trunc i32 %v0_8d30 to i8
  %v2_8d30 = load i32, i32* @r6, align 4
  %v3_8d30 = add i32 %v2_8d30, 2
  %v4_8d30 = inttoptr i32 %v3_8d30 to i8*
  store i8 %v1_8d30, i8* %v4_8d30, align 1
  %v0_8d34 = load i32, i32* %fp.global-to-local, align 4
  %v1_8d34 = trunc i32 %v0_8d34 to i8
  %v2_8d34 = load i32, i32* @r6, align 4
  %v3_8d34 = add i32 %v2_8d34, 3
  %v4_8d34 = inttoptr i32 %v3_8d34 to i8*
  store i8 %v1_8d34, i8* %v4_8d34, align 1
  %v0_8d38 = load i32, i32* %r8.global-to-local, align 4
  %v1_8d38 = trunc i32 %v0_8d38 to i8
  %v2_8d38 = load i32, i32* @r6, align 4
  %v3_8d38 = add i32 %v2_8d38, 4
  %v4_8d38 = inttoptr i32 %v3_8d38 to i8*
  store i8 %v1_8d38, i8* %v4_8d38, align 1
  %v0_8d3c = load i32, i32* @r4, align 4
  store i32 %v0_8d3c, i32* %stack_var_-40, align 4
  %v5_8d40 = icmp slt i32 %v1_8d1c, %v1_88d4
  br i1 %v5_8d40, label %dec_label_pc_8ba4, label %dec_label_pc_8d44.preheader

dec_label_pc_8d44.preheader:                      ; preds = %bb97, %dec_label_pc_8a7c
  %v1_8d64 = add i32 %v6_89cc, 66
  %v1_8d68 = add i32 %v6_89cc, 8
  %v2_8d7c = icmp eq i32 %v6_8a20, -1
  %v7_8d7c = icmp eq i32 %v6_8a20, -1
  %v3_8fa0 = icmp eq i32 %v3_8a9c, 65535
  %v2_9010 = icmp eq i32 %v1_8a98, 0
  %v2_8dd8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8df0 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8e00 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e0c = ptrtoint i32* %stack_var_-50 to i32
  %v2_8e20 = icmp eq i32 %v1_89ec, 0
  br label %dec_label_pc_8d44

dec_label_pc_8d44:                                ; preds = %dec_label_pc_8d44.preheader, %dec_label_pc_904c
  store i32 %v1_88d4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_8a94, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_8a94, label %dec_label_pc_904c, label %dec_label_pc_8d58

dec_label_pc_8d58:                                ; preds = %dec_label_pc_8d44
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r1.global-to-local, align 4
  store i32 %v1_8d64, i32* @fp, align 4
  store i32 %v1_8d68, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_8efc

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8efc
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  store i1 %v7_8d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d7c, label %dec_label_pc_8f90, label %dec_label_pc_8d84

dec_label_pc_8d84:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8d78
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8fa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8fa0, label %dec_label_pc_8fac, label %dec_label_pc_8d98

dec_label_pc_8d98:                                ; preds = %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge, %dec_label_pc_8d84
  %v1_8d9c = phi i32 [ %v1_8d9c.pre, %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge ], [ 65535, %dec_label_pc_8d84 ]
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v9_8d9c = icmp eq i32 %v3_8aa0, %v1_8d9c
  store i1 %v9_8d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8d9c, label %dec_label_pc_8fe4, label %dec_label_pc_8da4

dec_label_pc_8da4:                                ; preds = %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge, %dec_label_pc_8d98
  %v1_8da8 = phi i32 [ %v1_8da8.pre, %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge ], [ %v1_8d9c, %dec_label_pc_8d98 ]
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v9_8da8 = icmp eq i32 %v3_8aa4, %v1_8da8
  store i1 %v9_8da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8da8, label %dec_label_pc_9000, label %dec_label_pc_8db0

dec_label_pc_8db0:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8da4
  store i32 %v1_8a98, i32* %r3.global-to-local, align 4
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9010, label %dec_label_pc_9024, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_8db0
  %v1_8db8 = load i32, i32* @r5, align 4
  %v2_8db8 = add i32 %v1_8db8, 16
  %v3_8db8 = inttoptr i32 %v2_8db8 to i32*
  %v4_8db8 = load i32, i32* %v3_8db8, align 4
  store i32 %v4_8db8, i32* %r3.global-to-local, align 4
  %v2_8dbc = load i32, i32* @r6, align 4
  %v3_8dbc = add i32 %v2_8dbc, 16
  %v4_8dbc = inttoptr i32 %v3_8dbc to i32*
  store i32 %v4_8db8, i32* %v4_8dbc, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_8dc4:                                ; preds = %bb102, %.thread20, %dec_label_pc_9024
  %v0_8dc4 = call i32 @function_dab8()
  store i32 %v0_8dc4, i32* %r0.global-to-local, align 4
  store i32 %v0_8dc4, i32* %stack_var_-44, align 4
  %v0_8dcc = call i32 @function_dab8()
  store i32 %v0_8dcc, i32* %r0.global-to-local, align 4
  store i32 %v0_8dcc, i32* %stack_var_-48, align 4
  %v0_8dd4 = call i32 @function_dab8()
  store i32 %v2_8dd8, i32* %r1.global-to-local, align 4
  store i32 %v0_8dd4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  store i32 %v0_8de4, i32* %r0.global-to-local, align 4
  %v3_8de8 = call i32 @function_101b8(i32 %v0_8de4, i32 %v2_8dd8, i32 4)
  %v0_8dec = load i32, i32* @r8, align 4
  %v1_8dec = add i32 %v0_8dec, 6
  store i32 %v1_8dec, i32* %r0.global-to-local, align 4
  store i32 %v2_8df0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8df8 = call i32 @function_101b8(i32 %v1_8dec, i32 %v2_8df0, i32 4)
  %v0_8dfc = load i32, i32* @r8, align 4
  %v1_8dfc = add i32 %v0_8dfc, 4
  store i32 %v1_8dfc, i32* %r0.global-to-local, align 4
  store i32 %v2_8e00, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e08 = call i32 @function_101b8(i32 %v1_8dfc, i32 %v2_8e00, i32 2)
  store i32 %v2_8e0c, i32* %r1.global-to-local, align 4
  %v0_8e10 = load i32, i32* @r8, align 4
  %v1_8e10 = add i32 %v0_8e10, 10
  store i32 %v1_8e10, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e18 = call i32 @function_101b8(i32 %v1_8e10, i32 %v2_8e0c, i32 2)
  store i32 %v3_8e18, i32* %r0.global-to-local, align 4
  store i32 %v1_89ec, i32* %r1.global-to-local, align 4
  store i1 %v2_8e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e20, label %dec_label_pc_8e28, label %dec_label_pc_9030

dec_label_pc_8e28:                                ; preds = %dec_label_pc_8dc4, %dec_label_pc_9030
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e2c = load i32, i32* @sl, align 4
  %v1_8e2c = trunc i32 %v0_8e2c to i8
  %v2_8e2c = load i32, i32* @r5, align 4
  %v3_8e2c = add i32 %v2_8e2c, 10
  %v4_8e2c = inttoptr i32 %v3_8e2c to i8*
  store i8 %v1_8e2c, i8* %v4_8e2c, align 1
  %v0_8e30 = load i32, i32* @sl, align 4
  %v1_8e30 = trunc i32 %v0_8e30 to i8
  %v2_8e30 = load i32, i32* @r5, align 4
  %v3_8e30 = add i32 %v2_8e30, 11
  %v4_8e30 = inttoptr i32 %v3_8e30 to i8*
  store i8 %v1_8e30, i8* %v4_8e30, align 1
  %v0_8e34 = load i32, i32* @r5, align 4
  store i32 %v0_8e34, i32* @r0, align 4
  %v2_8e38 = call i32 @function_c690(i32 %v0_8e34, i32 20)
  %v3_8e38 = trunc i32 %v2_8e38 to i8
  %v4_8e3c = sdiv i32 %v2_8e38, 256
  store i32 %v4_8e3c, i32* %r3.global-to-local, align 4
  %v1_8e40 = trunc i32 %v4_8e3c to i8
  %v2_8e40 = load i32, i32* @r5, align 4
  %v3_8e40 = add i32 %v2_8e40, 11
  %v4_8e40 = inttoptr i32 %v3_8e40 to i8*
  store i8 %v1_8e40, i8* %v4_8e40, align 1
  %v3_8e44 = load i32, i32* @r5, align 4
  %v4_8e44 = add i32 %v3_8e44, 10
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 %v3_8e38, i8* %v5_8e44, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e4c = load i32, i32* @sl, align 4
  %v1_8e4c = trunc i32 %v0_8e4c to i8
  %v2_8e4c = load i32, i32* @r6, align 4
  %v3_8e4c = add i32 %v2_8e4c, 10
  %v4_8e4c = inttoptr i32 %v3_8e4c to i8*
  store i8 %v1_8e4c, i8* %v4_8e4c, align 1
  %v0_8e50 = load i32, i32* @sl, align 4
  %v1_8e50 = trunc i32 %v0_8e50 to i8
  %v2_8e50 = load i32, i32* @r6, align 4
  %v3_8e50 = add i32 %v2_8e50, 11
  %v4_8e50 = inttoptr i32 %v3_8e50 to i8*
  store i8 %v1_8e50, i8* %v4_8e50, align 1
  %v0_8e54 = load i32, i32* @r6, align 4
  store i32 %v0_8e54, i32* @r0, align 4
  %v2_8e58 = call i32 @function_c690(i32 %v0_8e54, i32 20)
  %v3_8e58 = trunc i32 %v2_8e58 to i8
  store i32 %v2_8e58, i32* %r0.global-to-local, align 4
  %v4_8e5c = sdiv i32 %v2_8e58, 256
  store i32 %v4_8e5c, i32* %r3.global-to-local, align 4
  %v3_8e60 = load i32, i32* @r6, align 4
  %v4_8e60 = add i32 %v3_8e60, 10
  %v5_8e60 = inttoptr i32 %v4_8e60 to i8*
  store i8 %v3_8e58, i8* %v5_8e60, align 1
  %v0_8e64 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e64 = trunc i32 %v0_8e64 to i8
  %v2_8e64 = load i32, i32* @r6, align 4
  %v3_8e64 = add i32 %v2_8e64, 11
  %v4_8e64 = inttoptr i32 %v3_8e64 to i8*
  store i8 %v1_8e64, i8* %v4_8e64, align 1
  %v0_8e68 = load i32, i32* @r7, align 4
  %v1_8e68 = add i32 %v0_8e68, 4
  %v2_8e68 = inttoptr i32 %v1_8e68 to i8*
  %v3_8e68 = load i8, i8* %v2_8e68, align 1
  %v4_8e68 = zext i8 %v3_8e68 to i32
  store i32 %v4_8e68, i32* %r3.global-to-local, align 4
  %v1_8e6c = add i32 %v0_8e68, 5
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  store i32 %v0_8e68, i32* @r1, align 4
  %v4_8e74 = mul nuw nsw i32 %v4_8e6c, 256
  %v5_8e74 = or i32 %v4_8e74, %v4_8e68
  store i32 %v5_8e74, i32* %r2.global-to-local, align 4
  %v0_8e78 = load i32, i32* @sl, align 4
  %v1_8e78 = trunc i32 %v0_8e78 to i8
  %v3_8e78 = add i32 %v0_8e68, 6
  %v4_8e78 = inttoptr i32 %v3_8e78 to i8*
  store i8 %v1_8e78, i8* %v4_8e78, align 1
  store i32 %v1_8d68, i32* %r3.global-to-local, align 4
  %v0_8e80 = load i32, i32* @sl, align 4
  %v1_8e80 = trunc i32 %v0_8e80 to i8
  %v2_8e80 = load i32, i32* @r7, align 4
  %v3_8e80 = add i32 %v2_8e80, 7
  %v4_8e80 = inttoptr i32 %v3_8e80 to i8*
  store i8 %v1_8e80, i8* %v4_8e80, align 1
  %v0_8e84 = load i32, i32* @r6, align 4
  store i32 %v0_8e84, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_c6ec(i32 %v0_8e84, i32 %v0_8e68, i32 %v5_8e74, i32 %v1_8d68)
  %v5_8e88 = trunc i32 %v4_8e88 to i8
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v3_8e8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8e8c, i32* %r3.global-to-local, align 4
  %v3_8e90 = mul i32 %v3_8e8c, 32
  store i32 %v3_8e90, i32* %r2.global-to-local, align 4
  %v0_8e94 = load i32, i32* @r5, align 4
  %v1_8e94 = add i32 %v0_8e94, 16
  %v2_8e94 = inttoptr i32 %v1_8e94 to i32*
  %v3_8e94 = load i32, i32* %v2_8e94, align 4
  store i32 %v3_8e94, i32* %r1.global-to-local, align 4
  %v5_8e98 = mul i32 %v3_8e8c, 24
  store i32 %v5_8e98, i32* %r2.global-to-local, align 4
  %v4_8e9c35 = udiv i32 %v4_8e88, 256
  %v1_8ea0 = trunc i32 %v4_8e9c35 to i8
  %v2_8ea0 = load i32, i32* @r7, align 4
  %v3_8ea0 = add i32 %v2_8ea0, 7
  %v4_8ea0 = inttoptr i32 %v3_8ea0 to i8*
  store i8 %v1_8ea0, i8* %v4_8ea0, align 1
  %v0_8ea4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8ea4 = load i32, i32* @sb, align 4
  %v2_8ea4 = add i32 %v1_8ea4, %v0_8ea4
  store i32 %v2_8ea4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8eac = load i32, i32* @r7, align 4
  %v4_8eac = add i32 %v3_8eac, 6
  %v5_8eac = inttoptr i32 %v4_8eac to i8*
  store i8 %v5_8e88, i8* %v5_8eac, align 1
  %v0_8eb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8eb0 = load i32, i32* %lr.global-to-local, align 4
  %v2_8eb0 = add i32 %v1_8eb0, 4
  %v3_8eb0 = inttoptr i32 %v2_8eb0 to i32*
  store i32 %v0_8eb0, i32* %v3_8eb0, align 4
  %v0_8eb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8eb4 = trunc i32 %v0_8eb4 to i8
  %v2_8eb4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8eb4 = load i32, i32* @sb, align 4
  %v4_8eb4 = add i32 %v3_8eb4, %v2_8eb4
  %v5_8eb4 = inttoptr i32 %v4_8eb4 to i8*
  store i8 %v1_8eb4, i8* %v5_8eb4, align 1
  %v0_8eb8 = load i32, i32* @sl, align 4
  %v1_8eb8 = trunc i32 %v0_8eb8 to i8
  %v2_8eb8 = load i32, i32* %lr.global-to-local, align 4
  %v3_8eb8 = add i32 %v2_8eb8, 2
  %v4_8eb8 = inttoptr i32 %v3_8eb8 to i8*
  store i8 %v1_8eb8, i8* %v4_8eb8, align 1
  %v0_8ebc = load i32, i32* @sl, align 4
  %v1_8ebc = trunc i32 %v0_8ebc to i8
  %v2_8ebc = load i32, i32* %lr.global-to-local, align 4
  %v3_8ebc = add i32 %v2_8ebc, 1
  %v4_8ebc = inttoptr i32 %v3_8ebc to i8*
  store i8 %v1_8ebc, i8* %v4_8ebc, align 1
  %v0_8ec0 = load i32, i32* @sl, align 4
  %v1_8ec0 = trunc i32 %v0_8ec0 to i8
  %v2_8ec0 = load i32, i32* %lr.global-to-local, align 4
  %v3_8ec0 = add i32 %v2_8ec0, 3
  %v4_8ec0 = inttoptr i32 %v3_8ec0 to i8*
  store i8 %v1_8ec0, i8* %v4_8ec0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ecc = load i32, i32* @r5, align 4
  store i32 %v0_8ecc, i32* %r1.global-to-local, align 4
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v0_8ed4 = load i32, i32* @fp, align 4
  store i32 %v0_8ed4, i32* %r2.global-to-local, align 4
  %v0_8ed8 = load i32, i32* %lr.global-to-local, align 4
  %v6_8ee0 = inttoptr i32 %v0_8ecc to i32*
  %v7_8ee0 = call i32 @function_1122c(i32 %v3_8a44, i32* %v6_8ee0, i32 %v0_8ed4, i32 16384, i32 %v0_8ed8, i32 16)
  %v3_8ee4 = load i32, i32* %stack_var_-40, align 4
  %v1_8ee8 = add i32 %v3_8ee4, 1
  store i32 %v1_8ee8, i32* %r0.global-to-local, align 4
  store i32 %v1_88d4, i32* %r3.global-to-local, align 4
  %v9_8ef0 = icmp eq i32 %v1_8ee8, %v1_88d4
  store i1 %v9_8ef0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ee8, i32* %stack_var_-40, align 4
  %v6_8ef8 = icmp slt i32 %v1_8ee8, %v1_88d4
  br i1 %v6_8ef8, label %dec_label_pc_8efc, label %dec_label_pc_904c

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8e28, %dec_label_pc_8d58
  %v1_8f10 = phi i32 [ %v1_8ee8, %dec_label_pc_8e28 ], [ 0, %dec_label_pc_8d58 ]
  %v5_8f00 = mul i32 %v1_8f10, 24
  %v1_8f04 = load i32, i32* @sb, align 4
  %v2_8f04 = add i32 %v1_8f04, %v5_8f00
  store i32 %v2_8f04, i32* %r3.global-to-local, align 4
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v1_8f0c = add i32 %v2_8f04, 20
  %v2_8f0c = inttoptr i32 %v1_8f0c to i8*
  %v3_8f0c = load i8, i8* %v2_8f0c, align 1
  %v4_8f0c = zext i8 %v3_8f0c to i32
  store i32 %v4_8f0c, i32* %r2.global-to-local, align 4
  %v4_8f10 = mul i32 %v1_8f10, 4
  %v5_8f10 = add i32 %v4_8f10, %v2_8900
  %v6_8f10 = inttoptr i32 %v5_8f10 to i32*
  %v7_8f10 = load i32, i32* %v6_8f10, align 4
  store i32 %v7_8f10, i32* @r5, align 4
  %v2_8f14 = icmp ugt i8 %v3_8f0c, 30
  %v7_8f14 = icmp eq i8 %v3_8f0c, 31
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  %v1_8f18 = add i32 %v7_8f10, 24
  store i32 %v1_8f18, i32* @r8, align 4
  %v1_8f1c = add i32 %v7_8f10, 38
  store i32 %v1_8f1c, i32* @r6, align 4
  %v1_8f20 = add i32 %v7_8f10, 58
  store i32 %v1_8f20, i32* @r7, align 4
  %v2_8f24 = xor i1 %v7_8f14, true
  %v3_8f24 = and i1 %v2_8f14, %v2_8f24
  br i1 %v3_8f24, label %dec_label_pc_8d78, label %dec_label_pc_8f28

dec_label_pc_8f28:                                ; preds = %dec_label_pc_8efc
  %v1_8f28 = add i32 %v2_8f04, 16
  %v2_8f28 = inttoptr i32 %v1_8f28 to i32*
  %v3_8f28 = load i32, i32* %v2_8f28, align 4
  store i32 %v3_8f28, i32* %r4.global-to-local, align 4
  %v0_8f2c = call i32 @function_dab8()
  store i32 %v0_8f2c, i32* %r0.global-to-local, align 4
  %v3_8f30 = load i32, i32* %stack_var_-40, align 4
  %v5_8f38 = mul i32 %v3_8f30, 24
  %v0_8f3c = load i32, i32* %r4.global-to-local, align 4
  %v1_8f40 = load i32, i32* @sb, align 4
  %v2_8f40 = add i32 %v1_8f40, %v5_8f38
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_8f44 = and i32 %v0_8f3c, 65280
  store i32 %v1_8f44, i32* %r3.global-to-local, align 4
  %v1_8f3c = udiv i32 %v0_8f3c, 256
  %v3_8f48 = and i32 %v1_8f3c, 65280
  store i32 %v3_8f48, i32* %r2.global-to-local, align 4
  %v3_8f4c = mul i32 %v0_8f3c, 16777216
  store i32 %v3_8f4c, i32* %ip.global-to-local, align 4
  %v1_8f50 = add i32 %v2_8f40, 20
  %v2_8f50 = inttoptr i32 %v1_8f50 to i8*
  %v3_8f50 = load i8, i8* %v2_8f50, align 1
  %v4_8f50 = zext i8 %v3_8f50 to i32
  store i32 %v4_8f50, i32* %lr.global-to-local, align 4
  %v4_8f54 = mul nuw nsw i32 %v1_8f44, 256
  %v5_8f54 = or i32 %v4_8f54, %v3_8f4c
  store i32 %v5_8f54, i32* %ip.global-to-local, align 4
  %v2_8f5c = call i32 @llvm.bswap.i32(i32 %v0_8f3c)
  %v7_8f60 = lshr i32 %v0_8f2c, %v4_8f50
  %v8_8f60 = add i32 %v7_8f60, %v2_8f5c
  %v3_8f6c = mul i32 %v8_8f60, 16777216
  %v1_8f70 = and i32 %v8_8f60, 65280
  store i32 %v1_8f70, i32* %r0.global-to-local, align 4
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  %v4_8f7c = mul nuw nsw i32 %v1_8f70, 256
  %v5_8f7c = or i32 %v4_8f7c, %v3_8f6c
  store i32 %v5_8f7c, i32* %r1.global-to-local, align 4
  %v2_8f80 = call i32 @llvm.bswap.i32(i32 %v8_8f60)
  store i32 %v2_8f80, i32* %r3.global-to-local, align 4
  store i1 %v7_8d7c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f88 = load i32, i32* @r5, align 4
  %v2_8f88 = add i32 %v1_8f88, 16
  %v3_8f88 = inttoptr i32 %v2_8f88 to i32*
  store i32 %v2_8f80, i32* %v3_8f88, align 4
  br i1 %v2_8d7c, label %dec_label_pc_8f90, label %dec_label_pc_8d84

dec_label_pc_8f90:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8d78
  %v0_8f90 = call i32 @function_dab8()
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8fa0, i1* %cpsr_z.global-to-local, align 1
  %v1_8fa4 = load i32, i32* @r5, align 4
  %v2_8fa4 = add i32 %v1_8fa4, 12
  %v3_8fa4 = inttoptr i32 %v2_8fa4 to i32*
  store i32 %v0_8f90, i32* %v3_8fa4, align 4
  br i1 %v3_8fa0, label %dec_label_pc_8fac, label %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge

dec_label_pc_8f90.dec_label_pc_8d98_crit_edge:    ; preds = %dec_label_pc_8f90
  %v1_8d9c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8d98

dec_label_pc_8fac:                                ; preds = %dec_label_pc_8f90, %dec_label_pc_8d84
  %v0_8fac = call i32 @function_dab8()
  %v3_8fb4 = urem i32 %v0_8fac, 65536
  store i32 %v3_8fb4, i32* %r0.global-to-local, align 4
  %v1_8fbc = sub nsw i32 999, %v3_8fb4
  store i32 %v1_8fbc, i32* %r2.global-to-local, align 4
  %v3_8fc0 = sdiv i32 %v1_8fbc, 256
  store i32 %v3_8fc0, i32* %r1.global-to-local, align 4
  %v3_8fc434 = udiv i32 %v3_8fb4, 256
  store i32 %v3_8fc434, i32* %r3.global-to-local, align 4
  %v1_8fc8 = trunc i32 %v3_8fc434 to i8
  %v2_8fc8 = load i32, i32* @r5, align 4
  %v3_8fc8 = add i32 %v2_8fc8, 5
  %v4_8fc8 = inttoptr i32 %v3_8fc8 to i8*
  store i8 %v1_8fc8, i8* %v4_8fc8, align 1
  %v0_8fcc = load i32, i32* %r0.global-to-local, align 4
  %v1_8fcc = trunc i32 %v0_8fcc to i8
  %v2_8fcc = load i32, i32* @r5, align 4
  %v3_8fcc = add i32 %v2_8fcc, 4
  %v4_8fcc = inttoptr i32 %v3_8fcc to i8*
  store i8 %v1_8fcc, i8* %v4_8fcc, align 1
  %v0_8fd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8fd0 = trunc i32 %v0_8fd0 to i8
  %v2_8fd0 = load i32, i32* @r6, align 4
  %v3_8fd0 = add i32 %v2_8fd0, 5
  %v4_8fd0 = inttoptr i32 %v3_8fd0 to i8*
  store i8 %v1_8fd0, i8* %v4_8fd0, align 1
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v1_8fd8 = load i32, i32* @r4, align 4
  %v9_8fd8 = icmp eq i32 %v3_8aa0, %v1_8fd8
  store i1 %v9_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v0_8fdc = load i32, i32* %r2.global-to-local, align 4
  %v1_8fdc = trunc i32 %v0_8fdc to i8
  %v2_8fdc = load i32, i32* @r6, align 4
  %v3_8fdc = add i32 %v2_8fdc, 4
  %v4_8fdc = inttoptr i32 %v3_8fdc to i8*
  store i8 %v1_8fdc, i8* %v4_8fdc, align 1
  %v0_8fe0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8fe0, label %dec_label_pc_8fe4, label %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge

dec_label_pc_8fac.dec_label_pc_8da4_crit_edge:    ; preds = %dec_label_pc_8fac
  %v1_8da8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8da4

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8fac, %dec_label_pc_8d98
  %v0_8fe4 = call i32 @function_dab8()
  %v1_8fe4 = trunc i32 %v0_8fe4 to i8
  store i32 %v0_8fe4, i32* %r0.global-to-local, align 4
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v4_8fec = sdiv i32 %v0_8fe4, 256
  store i32 %v4_8fec, i32* %r3.global-to-local, align 4
  %v1_8ff0 = load i32, i32* @r4, align 4
  %v9_8ff0 = icmp eq i32 %v3_8aa4, %v1_8ff0
  store i1 %v9_8ff0, i1* %cpsr_z.global-to-local, align 1
  %v3_8ff4 = load i32, i32* @r5, align 4
  %v4_8ff4 = add i32 %v3_8ff4, 58
  %v5_8ff4 = inttoptr i32 %v4_8ff4 to i8*
  store i8 %v1_8fe4, i8* %v5_8ff4, align 1
  %v0_8ff8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ff8 = trunc i32 %v0_8ff8 to i8
  %v2_8ff8 = load i32, i32* @r7, align 4
  %v3_8ff8 = add i32 %v2_8ff8, 1
  %v4_8ff8 = inttoptr i32 %v3_8ff8 to i8*
  store i8 %v1_8ff8, i8* %v4_8ff8, align 1
  %v0_8ffc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8ffc, label %dec_label_pc_9000, label %dec_label_pc_8db0

dec_label_pc_9000:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8da4
  %v0_9000 = call i32 @function_dab8()
  %v1_9000 = trunc i32 %v0_9000 to i8
  store i32 %v0_9000, i32* %r0.global-to-local, align 4
  %v4_900436 = udiv i32 %v0_9000, 256
  %v1_9008 = trunc i32 %v4_900436 to i8
  %v2_9008 = load i32, i32* @r7, align 4
  %v3_9008 = add i32 %v2_9008, 3
  %v4_9008 = inttoptr i32 %v3_9008 to i8*
  store i8 %v1_9008, i8* %v4_9008, align 1
  store i32 %v1_8a98, i32* %r3.global-to-local, align 4
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9010, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9000
  %v1_9014 = load i32, i32* @r5, align 4
  %v2_9014 = add i32 %v1_9014, 16
  %v3_9014 = inttoptr i32 %v2_9014 to i32*
  %v4_9014 = load i32, i32* %v3_9014, align 4
  store i32 %v4_9014, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9000, %bb100
  %v3_9018 = load i32, i32* @r7, align 4
  %v4_9018 = add i32 %v3_9018, 2
  %v5_9018 = inttoptr i32 %v4_9018 to i8*
  store i8 %v1_9000, i8* %v5_9018, align 1
  %v0_901c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_901c, label %dec_label_pc_9024, label %bb102

bb102:                                            ; preds = %bb101
  %v1_901c = load i32, i32* %r3.global-to-local, align 4
  %v2_901c = load i32, i32* @r6, align 4
  %v3_901c = add i32 %v2_901c, 16
  %v4_901c = inttoptr i32 %v3_901c to i32*
  store i32 %v1_901c, i32* %v4_901c, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_9024:                                ; preds = %dec_label_pc_8db0, %bb101
  %v0_9024 = call i32 @function_dab8()
  store i32 %v0_9024, i32* %r0.global-to-local, align 4
  %v1_9028 = load i32, i32* @r6, align 4
  %v2_9028 = add i32 %v1_9028, 16
  %v3_9028 = inttoptr i32 %v2_9028 to i32*
  store i32 %v0_9024, i32* %v3_9028, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_9030:                                ; preds = %dec_label_pc_8dc4
  %v0_9030 = load i32, i32* @r7, align 4
  %v1_9030 = add i32 %v0_9030, 8
  store i32 %v1_9030, i32* @r4, align 4
  store i32 %v1_9030, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r1.global-to-local, align 4
  %v2_903c = call i32 @function_db6c(i32 %v1_9030, i32 %v6_89cc)
  store i32 %v2_903c, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r2.global-to-local, align 4
  %v0_9044 = load i32, i32* @sl, align 4
  %v1_9044 = trunc i32 %v0_9044 to i8
  %v2_9044 = load i32, i32* @r4, align 4
  %v4_9044 = add i32 %v2_9044, %v6_89cc
  %v5_9044 = inttoptr i32 %v4_9044 to i8*
  store i8 %v1_9044, i8* %v5_9044, align 1
  br label %dec_label_pc_8e28

dec_label_pc_904c:                                ; preds = %dec_label_pc_8e28, %dec_label_pc_8d44
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9050 = call i32 @function_10c8c(i32* null)
  store i32 %v2_9050, i32* %r0.global-to-local, align 4
  store i32 %v2_8a30, i32* %r1.global-to-local, align 4
  %v9_9058 = icmp eq i32 %v2_8a30, %v2_9050
  store i1 %v9_9058, i1* %cpsr_z.global-to-local, align 1
  %v6_905c = icmp slt i32 %v2_8a30, %v2_9050
  br i1 %v6_905c, label %dec_label_pc_9060, label %dec_label_pc_8d44

dec_label_pc_9060:                                ; preds = %dec_label_pc_904c, %dec_label_pc_88d0, %dec_label_pc_9068
  %v29_9064 = phi i32 [ %v3_8a44, %dec_label_pc_88d0 ], [ %v1_906c, %dec_label_pc_9068 ], [ %v2_9050, %dec_label_pc_904c ]
  store i32 %v3_88d0, i32* %r4.global-to-local, align 4
  store i32 %v15_88d0, i32* %r8.global-to-local, align 4
  store i32 %v21_88d0, i32* %sl.global-to-local, align 4
  store i32 %v24_88d0, i32* %fp.global-to-local, align 4
  ret i32 %v29_9064

dec_label_pc_9068:                                ; preds = %dec_label_pc_8a54
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v1_906c = call i32 @function_109bc(i32 %v3_8a44)
  store i32 %v1_906c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9060

; uselistorder directives
  uselistorder i32 %v1_906c, { 1, 0 }
  uselistorder i32 %v0_9000, { 0, 2, 1 }
  uselistorder i32 %v0_8fe4, { 0, 2, 1 }
  uselistorder i32 %v3_8fb4, { 0, 2, 1 }
  uselistorder i32 %v2_8f80, { 1, 0 }
  uselistorder i32 %v8_8f60, { 1, 2, 0 }
  uselistorder i32 %v3_8f4c, { 1, 0 }
  uselistorder i32 %v0_8f3c, { 2, 0, 1, 3 }
  uselistorder i32 %v7_8f10, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8ee8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_8e8c, { 1, 0, 2 }
  uselistorder i32 %v4_8e88, { 0, 2, 1 }
  uselistorder i32 %v0_8e68, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8e58, { 0, 2, 1 }
  uselistorder i32 %v4_8e3c, { 1, 0 }
  uselistorder i1 %v2_9010, { 2, 3, 1, 0 }
  uselistorder i1 %v3_8fa0, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8d7c, { 2, 1, 0 }
  uselistorder i32 %v1_8d68, { 1, 0, 2 }
  uselistorder i32 %v0_8ce4, { 1, 0, 2 }
  uselistorder i32 %v3_8b74, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0, 2 }
  uselistorder i32 %v1_8af0, { 0, 2, 1 }
  uselistorder i32 %v1_8ae8, { 2, 1, 0 }
  uselistorder i32 %v1_8ae4, { 1, 0 }
  uselistorder i32 %v1_8ae0, { 1, 0 }
  uselistorder i32 %v1_8ad4, { 1, 0 }
  uselistorder i32 %v3_8acc, { 2, 0, 1 }
  uselistorder i32 %v3_8a9c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_8a98, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_8a94, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8a8c, { 0, 2, 1 }
  uselistorder i32 %v0_8a88, { 0, 1, 3, 2 }
  uselistorder i1 %v7_8a74, { 1, 0 }
  uselistorder i1 %v7_8a48, { 1, 0 }
  uselistorder i32 %v3_8a44, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_8a30, { 2, 1, 0 }
  uselistorder i32 %v6_8a20, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_89ec, { 1, 2, 3, 0 }
  uselistorder i32 %v6_89cc, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_8980, { 1, 2, 0 }
  uselistorder i32 %v6_8954, { 2, 1, 3, 0 }
  uselistorder i32 %v6_8918, { 1, 2, 0 }
  uselistorder i32 %v2_8900, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_88d4, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 6, 5, 8, 7, 9, 12, 13, 10, 11, 15, 14, 17, 16, 18, 20, 19, 21, 23, 22, 24, 25, 26, 27, 29, 28, 33, 30, 31, 32, 36, 34, 35, 2, 1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_9060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9024, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_8e28, { 1, 0 }
  uselistorder label %dec_label_pc_8dc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d44, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_9078(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9078:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9078 = load i32, i32* @r4, align 4
  %v15_9078 = load i32, i32* @r8, align 4
  %v21_9078 = load i32, i32* @sl, align 4
  %v24_9078 = load i32, i32* @fp, align 4
  %v1_907c = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_907c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9098 = urem i32 %arg4, 256
  store i32 %v1_9098, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_90a8 = call i32 @function_1157c(i32 %v1_907c, i32 4)
  %v0_90ac = load i32, i32* @r5, align 4
  store i32 %v0_90ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_90b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_90b8, i32* %r3.global-to-local, align 4
  %v0_90bc = load i32, i32* @r4, align 4
  store i32 %v0_90bc, i32* %r0.global-to-local, align 4
  %v5_90c0 = inttoptr i32 %v0_90ac to i32*
  %v6_90c0 = call i32 @function_829c(i32 %v0_90bc, i32* %v5_90c0, i32 2, i32 %v0_90b8, i32 %v2_90a8)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_90d8 = load i32, i32* @r5, align 4
  store i32 %v0_90d8, i32* %r1.global-to-local, align 4
  %v0_90dc = load i32, i32* @r4, align 4
  store i32 %v0_90dc, i32* %r0.global-to-local, align 4
  %v5_90e0 = trunc i32 %v6_90c0 to i8
  %v6_90e4 = inttoptr i32 %v0_90d8 to i32*
  %v7_90e4 = call i32 @function_829c(i32 %v0_90dc, i32* %v6_90e4, i32 3, i32 65535, i32 %v6_90c0)
  %v0_90e8 = load i32, i32* @r5, align 4
  store i32 %v0_90e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_90e4, i32* @r7, align 4
  %v0_90f8 = load i32, i32* @r4, align 4
  store i32 %v0_90f8, i32* %r0.global-to-local, align 4
  %v5_90fc = inttoptr i32 %v0_90e8 to i32*
  %v6_90fc = call i32 @function_829c(i32 %v0_90f8, i32* %v5_90fc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_9108 = load i32, i32* @r5, align 4
  store i32 %v0_9108, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9114 = load i32, i32* @r4, align 4
  store i32 %v0_9114, i32* %r0.global-to-local, align 4
  %v5_9118 = trunc i32 %v6_90fc to i8
  %v6_911c = inttoptr i32 %v0_9108 to i32*
  %v7_911c = call i32 @function_829c(i32 %v0_9114, i32* %v6_911c, i32 5, i32 1, i32 %v6_90fc)
  %v1_9128 = urem i32 %v7_911c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9134 = load i32, i32* @r5, align 4
  store i32 %v0_9134, i32* %r1.global-to-local, align 4
  %v0_9138 = load i32, i32* @r4, align 4
  store i32 %v0_9138, i32* %r0.global-to-local, align 4
  %v5_9140 = inttoptr i32 %v0_9134 to i32*
  %v6_9140 = call i32 @function_829c(i32 %v0_9138, i32* %v5_9140, i32 6, i32 65535, i32 %v1_9128)
  %v0_914c = load i32, i32* @r5, align 4
  store i32 %v0_914c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9158 = load i32, i32* @r4, align 4
  store i32 %v0_9158, i32* %r0.global-to-local, align 4
  %v5_915c = inttoptr i32 %v0_914c to i32*
  %v6_915c = call i32 @function_829c(i32 %v0_9158, i32* %v5_915c, i32 7, i32 65535, i32 %v6_9140)
  %v0_9160 = load i32, i32* @r5, align 4
  store i32 %v0_9160, i32* %r1.global-to-local, align 4
  %v0_9164 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9164, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_915c, i32* @sl, align 4
  %v0_9170 = load i32, i32* @r4, align 4
  store i32 %v0_9170, i32* %r0.global-to-local, align 4
  %v5_9174 = inttoptr i32 %v0_9160 to i32*
  %v6_9174 = call i32 @function_829c(i32 %v0_9170, i32* %v5_9174, i32 %v0_9164, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9184 = load i32, i32* @r5, align 4
  store i32 %v0_9184, i32* %r1.global-to-local, align 4
  %v0_9188 = load i32, i32* @r4, align 4
  store i32 %v0_9188, i32* %r0.global-to-local, align 4
  %v5_918c = inttoptr i32 %v0_9184 to i32*
  %v6_918c = call i32 @function_829c(i32 %v0_9188, i32* %v5_918c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9194 = urem i32 %v6_918c, 256
  %v0_9198 = load i32, i32* @r5, align 4
  store i32 %v0_9198, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_91a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91a0, i32* %r3.global-to-local, align 4
  %v0_91a4 = load i32, i32* @r4, align 4
  store i32 %v0_91a4, i32* %r0.global-to-local, align 4
  %v5_91ac = inttoptr i32 %v0_9198 to i32*
  %v6_91ac = call i32 @function_829c(i32 %v0_91a4, i32* %v5_91ac, i32 18, i32 %v0_91a0, i32 %v1_9194)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  %v2_91b8 = load i32, i32* @global_var_1b860.47, align 4
  store i32 %v2_91b8, i32* %r3.global-to-local, align 4
  store i32 %v6_91ac, i32* @r8, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_91c4 = load i32, i32* @r4, align 4
  store i32 %v0_91c4, i32* %r0.global-to-local, align 4
  %v5_91c8 = inttoptr i32 %v0_91b4 to i32*
  %v6_91c8 = call i32 @function_829c(i32 %v0_91c4, i32* %v5_91c8, i32 19, i32 %v2_91b8, i32 ptrtoint (i32* @0 to i32))
  %v0_91d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91d0, i32* %r0.global-to-local, align 4
  %v1_91d4 = inttoptr i32 %v0_91d0 to i32*
  %v2_91d4 = call i32 @function_10c8c(i32* %v1_91d4)
  %v1_91d8 = load i32, i32* @r6, align 4
  %v2_91d8 = add i32 %v1_91d8, %v2_91d4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_91ec = call i32 @function_11290(i32 2, i32 3, i32 6)
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v7_91f0 = icmp eq i32 %v3_91ec, -1
  store i1 %v7_91f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91f0, label %dec_label_pc_9798, label %dec_label_pc_91fc

dec_label_pc_91fc:                                ; preds = %dec_label_pc_9078
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9204 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9204, i32* %r3.global-to-local, align 4
  %v0_920c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_920c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9218 = call i32 @function_11260(i32 %v3_91ec, i32 %v0_920c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9218, i32* %r0.global-to-local, align 4
  %v7_921c = icmp eq i32 %v6_9218, -1
  store i1 %v7_921c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_921c, label %dec_label_pc_97a0, label %dec_label_pc_9224

dec_label_pc_9224:                                ; preds = %dec_label_pc_91fc
  %v0_9230 = load i32, i32* @sl, align 4
  %v3_9230 = mul i32 %v0_9230, 65536
  store i32 %v3_9230, i32* %sl.global-to-local, align 4
  %v0_9234 = load i32, i32* @r7, align 4
  %v2_923c = icmp eq i32 %v1_907c, 0
  store i1 %v2_923c, i1* %cpsr_z.global-to-local, align 1
  %v0_9240 = load i32, i32* @r8, align 4
  %v1_9240 = urem i32 %v0_9240, 256
  store i32 %v1_9240, i32* %r8.global-to-local, align 4
  %v3_9244 = urem i32 %v0_9234, 65536
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  %v3_9248 = urem i32 %v6_9140, 65536
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v3_924c = urem i32 %v0_9230, 65536
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v0_9258 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9258, i32* %stack_var_-40, align 4
  br i1 %v2_923c, label %dec_label_pc_94d8.preheader, label %dec_label_pc_926c

dec_label_pc_926c:                                ; preds = %dec_label_pc_9224
  %v3_9274 = mul i32 %v6_9174, 65536
  %v1_927c = urem i32 %v6_9140, 256
  %v1_9284 = add i32 %v3_9274, 524288
  %v1_9288 = add i32 %v3_9274, 3407872
  %v1_928c = urem i32 %v0_9230, 256
  %v1_9290 = add i32 %v3_9274, 1835008
  %v0_9234.not = or i32 %v0_9234, -65536
  %v1_9298 = xor i32 %v0_9234.not, 65535
  %v3_929c = udiv i32 %v1_9290, 256
  %tmp77 = udiv i32 %v0_9234, 256
  %v1_92b0 = and i32 %v3_929c, 65280
  store i32 %v1_92b0, i32* %r0.global-to-local, align 4
  %v3_92d4 = mul nuw nsw i32 %v1_927c, 256
  %tmp78 = udiv i32 %v6_9140, 256
  %v4_92dc = urem i32 %tmp78, 256
  %v5_92dc = or i32 %v4_92dc, %v3_92d4
  store i32 %v5_92dc, i32* @lr, align 4
  %tmp79 = mul nsw i32 %v1_9298, 256
  %v3_92e4 = mul nuw nsw i32 %v1_928c, 256
  %sext23 = mul i32 %tmp77, 16777216
  %v4_92ec = sdiv i32 %sext23, 16777216
  %v4_92b4 = sdiv i32 %v1_9288, 16777216
  %tmp80 = udiv i32 %v0_9230, 256
  %v4_92f4 = urem i32 %tmp80, 256
  %v5_92f4 = or i32 %v4_92f4, %v3_92e4
  store i32 %v5_92f4, i32* @r7, align 4
  %v1_92f8 = and i32 %tmp79, 65280
  %v4_92fc = sdiv i32 %v1_9290, 16777216
  %v3_9300 = udiv i32 %v1_9284, 256
  %tmp81 = udiv i32 %v1_9298, 256
  %v4_9304 = urem i32 %tmp81, 256
  %v5_9304 = or i32 %v4_9304, %v1_92f8
  store i32 %v5_9304, i32* @r6, align 4
  %v3_9308 = ashr i32 %v1_9288, 31
  %v3_930c = ashr i32 %sext23, 31
  %v1_9310 = and i32 %v3_9300, 65280
  store i32 %v1_9310, i32* @r5, align 4
  %v3_931c = ashr i32 %v1_9290, 31
  store i32 %v3_931c, i32* %r2.global-to-local, align 4
  %v3_932032 = udiv i32 %v1_92f8, 256
  store i32 %v3_932032, i32* %r3.global-to-local, align 4
  store i32 %v1_927c, i32* %r1.global-to-local, align 4
  %v4_9328 = udiv i32 %v1_9284, 16777216
  %v5_9328 = or i32 %v4_9328, %v1_9310
  store i32 %v5_9328, i32* %r8.global-to-local, align 4
  %v5_932c = trunc i32 %tmp81 to i8
  store i32 %v0_9258, i32* @r4, align 4
  %v3_934433 = udiv i32 %v1_9310, 256
  store i32 %v3_934433, i32* %sl.global-to-local, align 4
  store i32 %v1_928c, i32* %fp.global-to-local, align 4
  %sext15 = mul i32 %v1_9298, 16777216
  %v4_9454 = sdiv i32 %sext15, 16777216
  %v2_9484 = icmp eq i32 %v1_9240, 0
  %sext16 = mul i32 %v6_9140, 16777216
  %v4_9498 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp78, 16777216
  %v4_94b4 = sdiv i32 %sext17, 16777216
  %v1_93b0 = trunc i32 %v4_92ec to i8
  br label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %bb92, %dec_label_pc_926c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9358 = call i32 @function_1157c(i32 1510, i32 4)
  store i32 %v2_9358, i32* %r0.global-to-local, align 4
  store i32 %v2_90a8, i32* %r2.global-to-local, align 4
  %v3_9360 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9360, i32* %r3.global-to-local, align 4
  %v2_9364 = load i32, i32* @r4, align 4
  %v5_9364 = mul i32 %v2_9364, 4
  %v6_9364 = add i32 %v5_9364, %v2_90a8
  %v7_9364 = inttoptr i32 %v6_9364 to i32*
  store i32 %v2_9358, i32* %v7_9364, align 4
  %v0_9368 = load i32, i32* %r2.global-to-local, align 4
  %v1_9368 = load i32, i32* %r3.global-to-local, align 4
  %v4_9368 = mul i32 %v1_9368, 4
  %v5_9368 = add i32 %v4_9368, %v0_9368
  %v6_9368 = inttoptr i32 %v5_9368 to i32*
  %v7_9368 = load i32, i32* %v6_9368, align 4
  store i32 %v7_9368, i32* %r4.global-to-local, align 4
  %v1_936c = inttoptr i32 %v7_9368 to i8*
  %v2_936c = load i8, i8* %v1_936c, align 1
  %tmp = urem i8 %v2_936c, 16
  %v1_9370 = zext i8 %tmp to i32
  %v1_9374 = or i32 %v1_9370, 64
  store i32 %v1_9374, i32* %r2.global-to-local, align 4
  %v1_9378 = trunc i32 %v1_9374 to i8
  store i8 %v1_9378, i8* %v1_936c, align 1
  %v0_937c = load i32, i32* %r4.global-to-local, align 4
  %v1_937c = inttoptr i32 %v0_937c to i8*
  %v2_937c = load i8, i8* %v1_937c, align 1
  %v1_9380 = and i8 %v2_937c, -16
  %v1_9384 = or i8 %v1_9380, 5
  store i32 %v1_9128, i32* %r1.global-to-local, align 4
  store i8 %v1_9384, i8* %v1_937c, align 1
  %v2_9394 = load i32, i32* %r4.global-to-local, align 4
  %v3_9394 = add i32 %v2_9394, 1
  %v4_9394 = inttoptr i32 %v3_9394 to i8*
  store i8 %v5_90e0, i8* %v4_9394, align 1
  %v2_939c = load i32, i32* %r4.global-to-local, align 4
  %v3_939c = add i32 %v2_939c, 8
  %v4_939c = inttoptr i32 %v3_939c to i8*
  store i8 %v5_9118, i8* %v4_939c, align 1
  store i32 %v4_92ec, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_93a8 = load i32, i32* %r1.global-to-local, align 4
  %v9_93a8 = icmp eq i32 %v0_93a8, 0
  store i1 %v9_93a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9308, i32* %r2.global-to-local, align 4
  %v2_93b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_93b0 = add i32 %v2_93b0, 4
  %v4_93b0 = inttoptr i32 %v3_93b0 to i8*
  store i8 %v1_93b0, i8* %v4_93b0, align 1
  store i32 %v4_92b4, i32* %r1.global-to-local, align 4
  %v0_93b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93b8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_934c
  %v1_93b8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_93b8, i32* %r3.global-to-local, align 4
  %v2_93bc = trunc i32 %v1_93b8 to i8
  %v3_93bc = load i32, i32* %r4.global-to-local, align 4
  %v4_93bc = add i32 %v3_93bc, 7
  %v5_93bc = inttoptr i32 %v4_93bc to i8*
  store i8 %v2_93bc, i8* %v5_93bc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_934c, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_93c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93c4 = trunc i32 %v0_93c4 to i8
  %v2_93c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c4 = add i32 %v2_93c4, 3
  %v4_93c4 = inttoptr i32 %v3_93c4 to i8*
  store i8 %v1_93c4, i8* %v4_93c4, align 1
  %v0_93c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_93c8 = trunc i32 %v0_93c8 to i8
  %v2_93c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c8 = add i32 %v2_93c8, 2
  %v4_93c8 = inttoptr i32 %v3_93c8 to i8*
  store i8 %v1_93c8, i8* %v4_93c8, align 1
  %v0_93cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93cc, label %bb83, label %bb82

bb82:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %.thread, %bb82
  store i32 %v3_930c, i32* %r1.global-to-local, align 4
  %v0_93d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i8
  %v2_93d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93d4 = add i32 %v2_93d4, 9
  %v4_93d4 = inttoptr i32 %v3_93d4 to i8*
  store i8 %v1_93d4, i8* %v4_93d4, align 1
  %v0_93d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93d8, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_93d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_93d8 = trunc i32 %v1_93d8 to i8
  %v3_93d8 = load i32, i32* %r4.global-to-local, align 4
  %v4_93d8 = add i32 %v3_93d8, 6
  %v5_93d8 = inttoptr i32 %v4_93d8 to i8*
  store i8 %v2_93d8, i8* %v5_93d8, align 1
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  %v3_93dc = load i32, i32* %stack_var_-40, align 4
  %v5_93e4 = mul i32 %v3_93dc, 24
  store i32 %v5_93e4, i32* %r3.global-to-local, align 4
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v1_93ec = load i32, i32* %r4.global-to-local, align 4
  %v2_93ec = add i32 %v1_93ec, 12
  %v3_93ec = inttoptr i32 %v2_93ec to i32*
  store i32 %v6_91c8, i32* %v3_93ec, align 4
  %v0_93f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f0 = load i32, i32* @sb, align 4
  %v2_93f0 = add i32 %v1_93f0, %v0_93f0
  store i32 %v2_93f0, i32* %r3.global-to-local, align 4
  %v0_93f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_93f4 = trunc i32 %v0_93f4 to i8
  %v2_93f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93f4 = add i32 %v2_93f4, 5
  %v4_93f4 = inttoptr i32 %v3_93f4 to i8*
  store i8 %v1_93f4, i8* %v4_93f4, align 1
  %v0_93f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f8 = add i32 %v0_93f8, 16
  %v2_93f8 = inttoptr i32 %v1_93f8 to i32*
  %v3_93f8 = load i32, i32* %v2_93f8, align 4
  store i32 %v3_93f8, i32* %r2.global-to-local, align 4
  %v0_93fc = load i32, i32* %r4.global-to-local, align 4
  %v1_93fc = add i32 %v0_93fc, 20
  store i32 %v1_93fc, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9404 = load i32, i32* %r0.global-to-local, align 4
  %v1_9404 = trunc i32 %v0_9404 to i8
  %v3_9404 = add i32 %v0_93fc, 23
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 %v1_9404, i8* %v4_9404, align 1
  %v0_9408 = load i32, i32* %r3.global-to-local, align 4
  %v1_9408 = trunc i32 %v0_9408 to i8
  %v2_9408 = load i32, i32* %r1.global-to-local, align 4
  %v3_9408 = add i32 %v2_9408, 2
  %v4_9408 = inttoptr i32 %v3_9408 to i8*
  store i8 %v1_9408, i8* %v4_9408, align 1
  %v0_940c = load i32, i32* %r4.global-to-local, align 4
  %v1_940c = add i32 %v0_940c, 24
  %v2_940c = inttoptr i32 %v1_940c to i8*
  %v3_940c = load i8, i8* %v2_940c, align 1
  %tmp98 = urem i8 %v3_940c, 16
  %v1_9410 = zext i8 %tmp98 to i32
  %v1_9414 = or i32 %v1_9410, 64
  store i32 %v1_9414, i32* %r3.global-to-local, align 4
  %v1_9418 = trunc i32 %v1_9414 to i8
  store i8 %v1_9418, i8* %v2_940c, align 1
  %v0_941c = load i32, i32* %r2.global-to-local, align 4
  %v1_941c = load i32, i32* %r4.global-to-local, align 4
  %v2_941c = add i32 %v1_941c, 16
  %v3_941c = inttoptr i32 %v2_941c to i32*
  store i32 %v0_941c, i32* %v3_941c, align 4
  %v0_9420 = load i32, i32* %r4.global-to-local, align 4
  %v1_9420 = add i32 %v0_9420, 24
  %v2_9420 = inttoptr i32 %v1_9420 to i8*
  %v3_9420 = load i8, i8* %v2_9420, align 1
  %v1_9424 = and i8 %v3_9420, -16
  %v1_9428 = or i8 %v1_9424, 5
  store i8 %v1_9428, i8* %v2_9420, align 1
  %v0_9434 = load i32, i32* %r4.global-to-local, align 4
  %v1_9434 = add i32 %v0_9434, 24
  store i32 %v1_9434, i32* @r5, align 4
  %v3_9438 = add i32 %v0_9434, 25
  %v4_9438 = inttoptr i32 %v3_9438 to i8*
  store i8 %v5_90e0, i8* %v4_9438, align 1
  store i32 %v4_92fc, i32* %r1.global-to-local, align 4
  store i32 %tmp81, i32* %r3.global-to-local, align 4
  store i32 %v3_931c, i32* %r2.global-to-local, align 4
  %v2_9448 = load i32, i32* @r5, align 4
  %v3_9448 = add i32 %v2_9448, 4
  %v4_9448 = inttoptr i32 %v3_9448 to i8*
  store i8 %v5_932c, i8* %v4_9448, align 1
  %v0_944c = load i32, i32* %r1.global-to-local, align 4
  %v1_944c = trunc i32 %v0_944c to i8
  %v2_944c = load i32, i32* @r5, align 4
  %v3_944c = add i32 %v2_944c, 2
  %v4_944c = inttoptr i32 %v3_944c to i8*
  store i8 %v1_944c, i8* %v4_944c, align 1
  %v0_9450 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9450, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  store i32 %v4_9454, i32* %r1.global-to-local, align 4
  %v0_9458 = load i32, i32* %r2.global-to-local, align 4
  %v1_9458 = trunc i32 %v0_9458 to i8
  %v2_9458 = load i32, i32* @r5, align 4
  %v3_9458 = add i32 %v2_9458, 3
  %v4_9458 = inttoptr i32 %v3_9458 to i8*
  store i8 %v1_9458, i8* %v4_9458, align 1
  store i32 %v6_90fc, i32* %r2.global-to-local, align 4
  %v0_9460 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9460, label %bb89, label %bb88

bb88:                                             ; preds = %bb87
  %v1_9460 = load i32, i32* %r3.global-to-local, align 4
  %v2_9460 = trunc i32 %v1_9460 to i8
  %v3_9460 = load i32, i32* @r5, align 4
  %v4_9460 = add i32 %v3_9460, 6
  %v5_9460 = inttoptr i32 %v4_9460 to i8*
  store i8 %v2_9460, i8* %v5_9460, align 1
  br label %bb89

bb89:                                             ; preds = %bb87, %bb88
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9468 = load i32, i32* %r1.global-to-local, align 4
  %v1_9468 = trunc i32 %v0_9468 to i8
  %v2_9468 = load i32, i32* @r5, align 4
  %v3_9468 = add i32 %v2_9468, 5
  %v4_9468 = inttoptr i32 %v3_9468 to i8*
  store i8 %v1_9468, i8* %v4_9468, align 1
  %v0_946c = load i32, i32* %r2.global-to-local, align 4
  %v1_946c = trunc i32 %v0_946c to i8
  %v2_946c = load i32, i32* @r5, align 4
  %v3_946c = add i32 %v2_946c, 8
  %v4_946c = inttoptr i32 %v3_946c to i8*
  store i8 %v1_946c, i8* %v4_946c, align 1
  %v0_9470 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9470, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_9470 = load i32, i32* %r0.global-to-local, align 4
  %v2_9470 = trunc i32 %v1_9470 to i8
  %v3_9470 = load i32, i32* @r5, align 4
  %v4_9470 = add i32 %v3_9470, 7
  %v5_9470 = inttoptr i32 %v4_9470 to i8*
  store i8 %v2_9470, i8* %v5_9470, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_9474 = load i32, i32* %r3.global-to-local, align 4
  %v1_9474 = trunc i32 %v0_9474 to i8
  %v2_9474 = load i32, i32* @r5, align 4
  %v3_9474 = add i32 %v2_9474, 9
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  %v0_9478 = call i32 @function_dab8()
  store i32 %v0_9478, i32* %r0.global-to-local, align 4
  store i32 %v1_9240, i32* %r1.global-to-local, align 4
  store i1 %v2_9484, i1* %cpsr_z.global-to-local, align 1
  %v1_9488 = sub i32 1023, %v0_9478
  store i32 %v1_9488, i32* %r3.global-to-local, align 4
  br i1 %v2_9484, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb91
  %v2_9490 = load i32, i32* @r5, align 4
  %v3_9490 = add i32 %v2_9490, 16
  %v4_9490 = inttoptr i32 %v3_9490 to i32*
  store i32 %v1_9488, i32* %v4_9490, align 4
  br label %bb92

.thread19:                                        ; preds = %bb91
  %v1_948c = load i32, i32* %r4.global-to-local, align 4
  %v2_948c = add i32 %v1_948c, 16
  %v3_948c = inttoptr i32 %v2_948c to i32*
  %v4_948c = load i32, i32* %v3_948c, align 4
  store i32 %v4_948c, i32* %r3.global-to-local, align 4
  %v2_9494 = load i32, i32* @r5, align 4
  %v3_9494 = add i32 %v2_9494, 16
  %v4_9494 = inttoptr i32 %v3_9494 to i32*
  store i32 %v4_948c, i32* %v4_9494, align 4
  br label %bb92

bb92:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_9498, i32* %r3.global-to-local, align 4
  %v0_949c = load i32, i32* %r4.global-to-local, align 4
  %v1_949c = add i32 %v0_949c, 44
  store i32 %v1_949c, i32* @r6, align 4
  %v1_94a0 = load i32, i32* @r5, align 4
  %v2_94a0 = add i32 %v1_94a0, 12
  %v3_94a0 = inttoptr i32 %v2_94a0 to i32*
  store i32 %v0_9478, i32* %v3_94a0, align 4
  %v0_94a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_94a4 = trunc i32 %v0_94a4 to i8
  %v2_94a4 = load i32, i32* @r6, align 4
  %v3_94a4 = add i32 %v2_94a4, 1
  %v4_94a4 = inttoptr i32 %v3_94a4 to i8*
  store i8 %v1_94a4, i8* %v4_94a4, align 1
  %v3_94a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_94a8, i32* %r3.global-to-local, align 4
  store i32 %v1_907c, i32* %r1.global-to-local, align 4
  %v1_94b0 = add i32 %v3_94a8, 1
  store i32 %v1_94b0, i32* @r4, align 4
  store i32 %v4_94b4, i32* %r2.global-to-local, align 4
  %v9_94b8 = icmp eq i32 %v1_94b0, %v1_907c
  store i1 %v9_94b8, i1* %cpsr_z.global-to-local, align 1
  %v0_94bc = load i32, i32* %sl.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* @r6, align 4
  %v3_94bc = add i32 %v2_94bc, 5
  %v4_94bc = inttoptr i32 %v3_94bc to i8*
  store i8 %v1_94bc, i8* %v4_94bc, align 1
  %v0_94c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_94c0 = trunc i32 %v0_94c0 to i8
  %v2_94c0 = load i32, i32* @r6, align 4
  %v3_94c0 = inttoptr i32 %v2_94c0 to i8*
  store i8 %v1_94c0, i8* %v3_94c0, align 1
  %v0_94c4 = load i32, i32* @r7, align 4
  %v1_94c4 = trunc i32 %v0_94c4 to i8
  %v2_94c4 = load i32, i32* @r6, align 4
  %v3_94c4 = add i32 %v2_94c4, 2
  %v4_94c4 = inttoptr i32 %v3_94c4 to i8*
  store i8 %v1_94c4, i8* %v4_94c4, align 1
  %v0_94c8 = load i32, i32* %fp.global-to-local, align 4
  %v1_94c8 = trunc i32 %v0_94c8 to i8
  %v2_94c8 = load i32, i32* @r6, align 4
  %v3_94c8 = add i32 %v2_94c8, 3
  %v4_94c8 = inttoptr i32 %v3_94c8 to i8*
  store i8 %v1_94c8, i8* %v4_94c8, align 1
  %v0_94cc = load i32, i32* %r8.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v2_94cc = load i32, i32* @r6, align 4
  %v3_94cc = add i32 %v2_94cc, 4
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* @r4, align 4
  store i32 %v0_94d0, i32* %stack_var_-40, align 4
  %v5_94d4 = icmp slt i32 %v1_94b0, %v1_907c
  br i1 %v5_94d4, label %dec_label_pc_934c, label %dec_label_pc_94d8.preheader

dec_label_pc_94d8.preheader:                      ; preds = %bb92, %dec_label_pc_9224
  %v1_94f8 = add i32 %v6_9174, 8
  %v1_94fc = add i32 %v6_9174, 52
  %v2_9508 = icmp eq i32 %v6_91c8, -1
  %v7_9508 = icmp eq i32 %v6_91c8, -1
  %v3_96d0 = icmp eq i32 %v3_9244, 65535
  %v2_9740 = icmp eq i32 %v1_9240, 0
  %v2_975c = icmp eq i32 %v1_9194, 0
  br label %dec_label_pc_94d8

dec_label_pc_94d8:                                ; preds = %dec_label_pc_94d8.preheader, %dec_label_pc_9784
  store i32 %v1_907c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_923c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_923c, label %dec_label_pc_9784, label %dec_label_pc_94ec

dec_label_pc_94ec:                                ; preds = %dec_label_pc_94d8
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_94f8, i32* @fp, align 4
  store i32 %v1_94fc, i32* @sl, align 4
  br label %dec_label_pc_9630

dec_label_pc_9504:                                ; preds = %dec_label_pc_9630
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  store i1 %v7_9508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9508, label %dec_label_pc_96c0, label %dec_label_pc_9510

dec_label_pc_9510:                                ; preds = %dec_label_pc_9658, %dec_label_pc_9504
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_96d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_96d0, label %dec_label_pc_96dc, label %dec_label_pc_9524

dec_label_pc_9524:                                ; preds = %dec_label_pc_96c0.dec_label_pc_9524_crit_edge, %dec_label_pc_9510
  %v1_9528 = phi i32 [ %v1_9528.pre, %dec_label_pc_96c0.dec_label_pc_9524_crit_edge ], [ 65535, %dec_label_pc_9510 ]
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v9_9528 = icmp eq i32 %v3_9248, %v1_9528
  store i1 %v9_9528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9528, label %dec_label_pc_9714, label %dec_label_pc_9530

dec_label_pc_9530:                                ; preds = %dec_label_pc_96dc.dec_label_pc_9530_crit_edge, %dec_label_pc_9524
  %v1_9534 = phi i32 [ %v1_9534.pre, %dec_label_pc_96dc.dec_label_pc_9530_crit_edge ], [ %v1_9528, %dec_label_pc_9524 ]
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v9_9534 = icmp eq i32 %v3_924c, %v1_9534
  store i1 %v9_9534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9534, label %dec_label_pc_9730, label %dec_label_pc_953c

dec_label_pc_953c:                                ; preds = %dec_label_pc_9714, %dec_label_pc_9530
  store i32 %v1_9240, i32* %r3.global-to-local, align 4
  store i1 %v2_9740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9740, label %dec_label_pc_9754, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_953c
  %v1_9544 = load i32, i32* @r5, align 4
  %v2_9544 = add i32 %v1_9544, 16
  %v3_9544 = inttoptr i32 %v2_9544 to i32*
  %v4_9544 = load i32, i32* %v3_9544, align 4
  store i32 %v4_9544, i32* %r3.global-to-local, align 4
  %v2_9548 = load i32, i32* @r6, align 4
  %v3_9548 = add i32 %v2_9548, 16
  %v4_9548 = inttoptr i32 %v3_9548 to i32*
  store i32 %v4_9544, i32* %v4_9548, align 4
  br label %dec_label_pc_9550

dec_label_pc_9550:                                ; preds = %bb97, %.thread20
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_975c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_975c, label %dec_label_pc_955c, label %dec_label_pc_9768

dec_label_pc_955c:                                ; preds = %dec_label_pc_9550, %dec_label_pc_9754, %dec_label_pc_9768
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9560 = load i32, i32* @r8, align 4
  %v1_9560 = trunc i32 %v0_9560 to i8
  %v2_9560 = load i32, i32* @r5, align 4
  %v3_9560 = add i32 %v2_9560, 10
  %v4_9560 = inttoptr i32 %v3_9560 to i8*
  store i8 %v1_9560, i8* %v4_9560, align 1
  %v0_9564 = load i32, i32* @r8, align 4
  %v1_9564 = trunc i32 %v0_9564 to i8
  %v2_9564 = load i32, i32* @r5, align 4
  %v3_9564 = add i32 %v2_9564, 11
  %v4_9564 = inttoptr i32 %v3_9564 to i8*
  store i8 %v1_9564, i8* %v4_9564, align 1
  %v0_9568 = load i32, i32* @r5, align 4
  store i32 %v0_9568, i32* @r0, align 4
  %v2_956c = call i32 @function_c690(i32 %v0_9568, i32 20)
  %v3_956c = trunc i32 %v2_956c to i8
  %v4_9570 = sdiv i32 %v2_956c, 256
  store i32 %v4_9570, i32* %r3.global-to-local, align 4
  %v1_9574 = trunc i32 %v4_9570 to i8
  %v2_9574 = load i32, i32* @r5, align 4
  %v3_9574 = add i32 %v2_9574, 11
  %v4_9574 = inttoptr i32 %v3_9574 to i8*
  store i8 %v1_9574, i8* %v4_9574, align 1
  %v3_9578 = load i32, i32* @r5, align 4
  %v4_9578 = add i32 %v3_9578, 10
  %v5_9578 = inttoptr i32 %v4_9578 to i8*
  store i8 %v3_956c, i8* %v5_9578, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9580 = load i32, i32* @r8, align 4
  %v1_9580 = trunc i32 %v0_9580 to i8
  %v2_9580 = load i32, i32* @r6, align 4
  %v3_9580 = add i32 %v2_9580, 10
  %v4_9580 = inttoptr i32 %v3_9580 to i8*
  store i8 %v1_9580, i8* %v4_9580, align 1
  %v0_9584 = load i32, i32* @r8, align 4
  %v1_9584 = trunc i32 %v0_9584 to i8
  %v2_9584 = load i32, i32* @r6, align 4
  %v3_9584 = add i32 %v2_9584, 11
  %v4_9584 = inttoptr i32 %v3_9584 to i8*
  store i8 %v1_9584, i8* %v4_9584, align 1
  %v0_9588 = load i32, i32* @r6, align 4
  store i32 %v0_9588, i32* @r0, align 4
  %v2_958c = call i32 @function_c690(i32 %v0_9588, i32 20)
  %v3_958c = trunc i32 %v2_958c to i8
  store i32 %v2_958c, i32* %r0.global-to-local, align 4
  %v4_9590 = sdiv i32 %v2_958c, 256
  store i32 %v4_9590, i32* %r3.global-to-local, align 4
  %v3_9594 = load i32, i32* @r6, align 4
  %v4_9594 = add i32 %v3_9594, 10
  %v5_9594 = inttoptr i32 %v4_9594 to i8*
  store i8 %v3_958c, i8* %v5_9594, align 1
  %v0_9598 = load i32, i32* %r3.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* @r6, align 4
  %v3_9598 = add i32 %v2_9598, 11
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* @r7, align 4
  %v1_959c = add i32 %v0_959c, 4
  %v2_959c = inttoptr i32 %v1_959c to i8*
  %v3_959c = load i8, i8* %v2_959c, align 1
  %v4_959c = zext i8 %v3_959c to i32
  store i32 %v4_959c, i32* %r3.global-to-local, align 4
  %v1_95a0 = add i32 %v0_959c, 5
  %v2_95a0 = inttoptr i32 %v1_95a0 to i8*
  %v3_95a0 = load i8, i8* %v2_95a0, align 1
  %v4_95a0 = zext i8 %v3_95a0 to i32
  store i32 %v0_959c, i32* @r1, align 4
  %v4_95a8 = mul nuw nsw i32 %v4_95a0, 256
  %v5_95a8 = or i32 %v4_95a8, %v4_959c
  store i32 %v5_95a8, i32* %r2.global-to-local, align 4
  %v0_95ac = load i32, i32* @r8, align 4
  %v1_95ac = trunc i32 %v0_95ac to i8
  %v3_95ac = add i32 %v0_959c, 6
  %v4_95ac = inttoptr i32 %v3_95ac to i8*
  store i8 %v1_95ac, i8* %v4_95ac, align 1
  %v0_95b0 = load i32, i32* @fp, align 4
  store i32 %v0_95b0, i32* %r3.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r8, align 4
  %v1_95b4 = trunc i32 %v0_95b4 to i8
  %v2_95b4 = load i32, i32* @r7, align 4
  %v3_95b4 = add i32 %v2_95b4, 7
  %v4_95b4 = inttoptr i32 %v3_95b4 to i8*
  store i8 %v1_95b4, i8* %v4_95b4, align 1
  %v0_95b8 = load i32, i32* @r6, align 4
  store i32 %v0_95b8, i32* %r0.global-to-local, align 4
  %v4_95bc = call i32 @function_c6ec(i32 %v0_95b8, i32 %v0_959c, i32 %v5_95a8, i32 %v0_95b0)
  %v5_95bc = trunc i32 %v4_95bc to i8
  store i32 %v4_95bc, i32* %r0.global-to-local, align 4
  %v3_95c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_95c0, i32* %r3.global-to-local, align 4
  %v3_95c4 = mul i32 %v3_95c0, 32
  store i32 %v3_95c4, i32* %r2.global-to-local, align 4
  %v0_95c8 = load i32, i32* @r5, align 4
  %v1_95c8 = add i32 %v0_95c8, 16
  %v2_95c8 = inttoptr i32 %v1_95c8 to i32*
  %v3_95c8 = load i32, i32* %v2_95c8, align 4
  store i32 %v3_95c8, i32* %r1.global-to-local, align 4
  %v5_95cc = mul i32 %v3_95c0, 24
  store i32 %v5_95cc, i32* %r2.global-to-local, align 4
  %v4_95d035 = udiv i32 %v4_95bc, 256
  %v1_95d4 = trunc i32 %v4_95d035 to i8
  %v2_95d4 = load i32, i32* @r7, align 4
  %v3_95d4 = add i32 %v2_95d4, 7
  %v4_95d4 = inttoptr i32 %v3_95d4 to i8*
  store i8 %v1_95d4, i8* %v4_95d4, align 1
  %v0_95d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_95d8 = load i32, i32* @sb, align 4
  %v2_95d8 = add i32 %v1_95d8, %v0_95d8
  store i32 %v2_95d8, i32* @lr, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_95e0 = load i32, i32* @r7, align 4
  %v4_95e0 = add i32 %v3_95e0, 6
  %v5_95e0 = inttoptr i32 %v4_95e0 to i8*
  store i8 %v5_95bc, i8* %v5_95e0, align 1
  %v0_95e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95e4 = load i32, i32* @lr, align 4
  %v2_95e4 = add i32 %v1_95e4, 4
  %v3_95e4 = inttoptr i32 %v2_95e4 to i32*
  store i32 %v0_95e4, i32* %v3_95e4, align 4
  %v0_95e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v2_95e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_95e8 = load i32, i32* @sb, align 4
  %v4_95e8 = add i32 %v3_95e8, %v2_95e8
  %v5_95e8 = inttoptr i32 %v4_95e8 to i8*
  store i8 %v1_95e8, i8* %v5_95e8, align 1
  %v0_95ec = load i32, i32* @r8, align 4
  %v1_95ec = trunc i32 %v0_95ec to i8
  %v2_95ec = load i32, i32* @lr, align 4
  %v3_95ec = add i32 %v2_95ec, 2
  %v4_95ec = inttoptr i32 %v3_95ec to i8*
  store i8 %v1_95ec, i8* %v4_95ec, align 1
  %v0_95f0 = load i32, i32* @r8, align 4
  %v1_95f0 = trunc i32 %v0_95f0 to i8
  %v2_95f0 = load i32, i32* @lr, align 4
  %v3_95f0 = add i32 %v2_95f0, 1
  %v4_95f0 = inttoptr i32 %v3_95f0 to i8*
  store i8 %v1_95f0, i8* %v4_95f0, align 1
  %v0_95f4 = load i32, i32* @r8, align 4
  %v1_95f4 = trunc i32 %v0_95f4 to i8
  %v2_95f4 = load i32, i32* @lr, align 4
  %v3_95f4 = add i32 %v2_95f4, 3
  %v4_95f4 = inttoptr i32 %v3_95f4 to i8*
  store i8 %v1_95f4, i8* %v4_95f4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9600 = load i32, i32* @r5, align 4
  store i32 %v0_9600, i32* %r1.global-to-local, align 4
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v0_9608 = load i32, i32* @sl, align 4
  store i32 %v0_9608, i32* %r2.global-to-local, align 4
  %v0_960c = load i32, i32* @lr, align 4
  %v6_9614 = inttoptr i32 %v0_9600 to i32*
  %v7_9614 = call i32 @function_1122c(i32 %v3_91ec, i32* %v6_9614, i32 %v0_9608, i32 16384, i32 %v0_960c, i32 16)
  %v3_9618 = load i32, i32* %stack_var_-40, align 4
  %v1_961c = add i32 %v3_9618, 1
  store i32 %v1_961c, i32* %r0.global-to-local, align 4
  store i32 %v1_907c, i32* %r3.global-to-local, align 4
  %v9_9624 = icmp eq i32 %v1_961c, %v1_907c
  store i1 %v9_9624, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_961c, i32* %stack_var_-40, align 4
  %v6_962c = icmp slt i32 %v1_961c, %v1_907c
  br i1 %v6_962c, label %dec_label_pc_9630, label %dec_label_pc_9784

dec_label_pc_9630:                                ; preds = %dec_label_pc_955c, %dec_label_pc_94ec
  %v1_9644 = phi i32 [ %v1_961c, %dec_label_pc_955c ], [ 0, %dec_label_pc_94ec ]
  %v5_9634 = mul i32 %v1_9644, 24
  %v1_9638 = load i32, i32* @sb, align 4
  %v2_9638 = add i32 %v1_9638, %v5_9634
  store i32 %v2_9638, i32* %r3.global-to-local, align 4
  store i32 %v2_90a8, i32* %r1.global-to-local, align 4
  %v1_9640 = add i32 %v2_9638, 20
  %v2_9640 = inttoptr i32 %v1_9640 to i8*
  %v3_9640 = load i8, i8* %v2_9640, align 1
  %v4_9640 = zext i8 %v3_9640 to i32
  store i32 %v4_9640, i32* %r2.global-to-local, align 4
  %v4_9644 = mul i32 %v1_9644, 4
  %v5_9644 = add i32 %v4_9644, %v2_90a8
  %v6_9644 = inttoptr i32 %v5_9644 to i32*
  %v7_9644 = load i32, i32* %v6_9644, align 4
  store i32 %v7_9644, i32* @r5, align 4
  %v2_9648 = icmp ugt i8 %v3_9640, 30
  %v7_9648 = icmp eq i8 %v3_9640, 31
  store i1 %v7_9648, i1* %cpsr_z.global-to-local, align 1
  %v1_964c = add i32 %v7_9644, 24
  store i32 %v1_964c, i32* @r6, align 4
  %v1_9650 = add i32 %v7_9644, 44
  store i32 %v1_9650, i32* @r7, align 4
  %v2_9654 = xor i1 %v7_9648, true
  %v3_9654 = and i1 %v2_9648, %v2_9654
  br i1 %v3_9654, label %dec_label_pc_9504, label %dec_label_pc_9658

dec_label_pc_9658:                                ; preds = %dec_label_pc_9630
  %v1_9658 = add i32 %v2_9638, 16
  %v2_9658 = inttoptr i32 %v1_9658 to i32*
  %v3_9658 = load i32, i32* %v2_9658, align 4
  store i32 %v3_9658, i32* %r4.global-to-local, align 4
  %v0_965c = call i32 @function_dab8()
  store i32 %v0_965c, i32* %r0.global-to-local, align 4
  %v3_9660 = load i32, i32* %stack_var_-40, align 4
  %v5_9668 = mul i32 %v3_9660, 24
  %v0_966c = load i32, i32* %r4.global-to-local, align 4
  %v1_9670 = load i32, i32* @sb, align 4
  %v2_9670 = add i32 %v1_9670, %v5_9668
  store i32 %v2_9670, i32* %r1.global-to-local, align 4
  %v1_9674 = and i32 %v0_966c, 65280
  store i32 %v1_9674, i32* %r3.global-to-local, align 4
  %v1_966c = udiv i32 %v0_966c, 256
  %v3_9678 = and i32 %v1_966c, 65280
  store i32 %v3_9678, i32* %r2.global-to-local, align 4
  %v1_9680 = add i32 %v2_9670, 20
  %v2_9680 = inttoptr i32 %v1_9680 to i8*
  %v3_9680 = load i8, i8* %v2_9680, align 1
  %v4_9680 = zext i8 %v3_9680 to i32
  store i32 %v4_9680, i32* @lr, align 4
  %v2_968c = call i32 @llvm.bswap.i32(i32 %v0_966c)
  %v7_9690 = lshr i32 %v0_965c, %v4_9680
  %v8_9690 = add i32 %v7_9690, %v2_968c
  %v3_969c = mul i32 %v8_9690, 16777216
  %v1_96a0 = and i32 %v8_9690, 65280
  store i32 %v1_96a0, i32* %r0.global-to-local, align 4
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v4_96ac = mul nuw nsw i32 %v1_96a0, 256
  %v5_96ac = or i32 %v4_96ac, %v3_969c
  store i32 %v5_96ac, i32* %r1.global-to-local, align 4
  %v2_96b0 = call i32 @llvm.bswap.i32(i32 %v8_9690)
  store i32 %v2_96b0, i32* %r3.global-to-local, align 4
  store i1 %v7_9508, i1* %cpsr_z.global-to-local, align 1
  %v1_96b8 = load i32, i32* @r5, align 4
  %v2_96b8 = add i32 %v1_96b8, 16
  %v3_96b8 = inttoptr i32 %v2_96b8 to i32*
  store i32 %v2_96b0, i32* %v3_96b8, align 4
  br i1 %v2_9508, label %dec_label_pc_96c0, label %dec_label_pc_9510

dec_label_pc_96c0:                                ; preds = %dec_label_pc_9658, %dec_label_pc_9504
  %v0_96c0 = call i32 @function_dab8()
  store i32 %v0_96c0, i32* %r0.global-to-local, align 4
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_96d0, i1* %cpsr_z.global-to-local, align 1
  %v1_96d4 = load i32, i32* @r5, align 4
  %v2_96d4 = add i32 %v1_96d4, 12
  %v3_96d4 = inttoptr i32 %v2_96d4 to i32*
  store i32 %v0_96c0, i32* %v3_96d4, align 4
  br i1 %v3_96d0, label %dec_label_pc_96dc, label %dec_label_pc_96c0.dec_label_pc_9524_crit_edge

dec_label_pc_96c0.dec_label_pc_9524_crit_edge:    ; preds = %dec_label_pc_96c0
  %v1_9528.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9524

dec_label_pc_96dc:                                ; preds = %dec_label_pc_96c0, %dec_label_pc_9510
  %v0_96dc = call i32 @function_dab8()
  %v3_96e4 = urem i32 %v0_96dc, 65536
  store i32 %v3_96e4, i32* %r0.global-to-local, align 4
  %v1_96ec = sub nsw i32 999, %v3_96e4
  store i32 %v1_96ec, i32* %r2.global-to-local, align 4
  %v3_96f0 = sdiv i32 %v1_96ec, 256
  store i32 %v3_96f0, i32* %r1.global-to-local, align 4
  %v3_96f434 = udiv i32 %v3_96e4, 256
  store i32 %v3_96f434, i32* %r3.global-to-local, align 4
  %v1_96f8 = trunc i32 %v3_96f434 to i8
  %v2_96f8 = load i32, i32* @r5, align 4
  %v3_96f8 = add i32 %v2_96f8, 5
  %v4_96f8 = inttoptr i32 %v3_96f8 to i8*
  store i8 %v1_96f8, i8* %v4_96f8, align 1
  %v0_96fc = load i32, i32* %r0.global-to-local, align 4
  %v1_96fc = trunc i32 %v0_96fc to i8
  %v2_96fc = load i32, i32* @r5, align 4
  %v3_96fc = add i32 %v2_96fc, 4
  %v4_96fc = inttoptr i32 %v3_96fc to i8*
  store i8 %v1_96fc, i8* %v4_96fc, align 1
  %v0_9700 = load i32, i32* %r1.global-to-local, align 4
  %v1_9700 = trunc i32 %v0_9700 to i8
  %v2_9700 = load i32, i32* @r6, align 4
  %v3_9700 = add i32 %v2_9700, 5
  %v4_9700 = inttoptr i32 %v3_9700 to i8*
  store i8 %v1_9700, i8* %v4_9700, align 1
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v1_9708 = load i32, i32* @r4, align 4
  %v9_9708 = icmp eq i32 %v3_9248, %v1_9708
  store i1 %v9_9708, i1* %cpsr_z.global-to-local, align 1
  %v0_970c = load i32, i32* %r2.global-to-local, align 4
  %v1_970c = trunc i32 %v0_970c to i8
  %v2_970c = load i32, i32* @r6, align 4
  %v3_970c = add i32 %v2_970c, 4
  %v4_970c = inttoptr i32 %v3_970c to i8*
  store i8 %v1_970c, i8* %v4_970c, align 1
  %v0_9710 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9710, label %dec_label_pc_9714, label %dec_label_pc_96dc.dec_label_pc_9530_crit_edge

dec_label_pc_96dc.dec_label_pc_9530_crit_edge:    ; preds = %dec_label_pc_96dc
  %v1_9534.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9530

dec_label_pc_9714:                                ; preds = %dec_label_pc_96dc, %dec_label_pc_9524
  %v0_9714 = call i32 @function_dab8()
  %v1_9714 = trunc i32 %v0_9714 to i8
  store i32 %v0_9714, i32* %r0.global-to-local, align 4
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v4_971c = sdiv i32 %v0_9714, 256
  store i32 %v4_971c, i32* %r3.global-to-local, align 4
  %v1_9720 = load i32, i32* @r4, align 4
  %v9_9720 = icmp eq i32 %v3_924c, %v1_9720
  store i1 %v9_9720, i1* %cpsr_z.global-to-local, align 1
  %v3_9724 = load i32, i32* @r5, align 4
  %v4_9724 = add i32 %v3_9724, 44
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 %v1_9714, i8* %v5_9724, align 1
  %v0_9728 = load i32, i32* %r3.global-to-local, align 4
  %v1_9728 = trunc i32 %v0_9728 to i8
  %v2_9728 = load i32, i32* @r7, align 4
  %v3_9728 = add i32 %v2_9728, 1
  %v4_9728 = inttoptr i32 %v3_9728 to i8*
  store i8 %v1_9728, i8* %v4_9728, align 1
  %v0_972c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_972c, label %dec_label_pc_9730, label %dec_label_pc_953c

dec_label_pc_9730:                                ; preds = %dec_label_pc_9714, %dec_label_pc_9530
  %v0_9730 = call i32 @function_dab8()
  %v1_9730 = trunc i32 %v0_9730 to i8
  store i32 %v0_9730, i32* %r0.global-to-local, align 4
  %v4_973436 = udiv i32 %v0_9730, 256
  %v1_9738 = trunc i32 %v4_973436 to i8
  %v2_9738 = load i32, i32* @r7, align 4
  %v3_9738 = add i32 %v2_9738, 3
  %v4_9738 = inttoptr i32 %v3_9738 to i8*
  store i8 %v1_9738, i8* %v4_9738, align 1
  store i32 %v1_9240, i32* %r3.global-to-local, align 4
  store i1 %v2_9740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9740, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_9730
  %v1_9744 = load i32, i32* @r5, align 4
  %v2_9744 = add i32 %v1_9744, 16
  %v3_9744 = inttoptr i32 %v2_9744 to i32*
  %v4_9744 = load i32, i32* %v3_9744, align 4
  store i32 %v4_9744, i32* %r3.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_9730, %bb95
  %v3_9748 = load i32, i32* @r7, align 4
  %v4_9748 = add i32 %v3_9748, 2
  %v5_9748 = inttoptr i32 %v4_9748 to i8*
  store i8 %v1_9730, i8* %v5_9748, align 1
  %v0_974c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_974c, label %dec_label_pc_9754, label %bb97

bb97:                                             ; preds = %bb96
  %v1_974c = load i32, i32* %r3.global-to-local, align 4
  %v2_974c = load i32, i32* @r6, align 4
  %v3_974c = add i32 %v2_974c, 16
  %v4_974c = inttoptr i32 %v3_974c to i32*
  store i32 %v1_974c, i32* %v4_974c, align 4
  br label %dec_label_pc_9550

dec_label_pc_9754:                                ; preds = %dec_label_pc_953c, %bb96
  %v0_9754 = call i32 @function_dab8()
  store i32 %v0_9754, i32* %r0.global-to-local, align 4
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_975c, i1* %cpsr_z.global-to-local, align 1
  %v1_9760 = load i32, i32* @r6, align 4
  %v2_9760 = add i32 %v1_9760, 16
  %v3_9760 = inttoptr i32 %v2_9760 to i32*
  store i32 %v0_9754, i32* %v3_9760, align 4
  br i1 %v2_975c, label %dec_label_pc_955c, label %dec_label_pc_9768

dec_label_pc_9768:                                ; preds = %dec_label_pc_9550, %dec_label_pc_9754
  %v0_9768 = load i32, i32* @r7, align 4
  %v1_9768 = add i32 %v0_9768, 8
  store i32 %v1_9768, i32* @r4, align 4
  store i32 %v1_9768, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r1.global-to-local, align 4
  %v2_9774 = call i32 @function_db6c(i32 %v1_9768, i32 %v6_9174)
  store i32 %v2_9774, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r2.global-to-local, align 4
  %v0_977c = load i32, i32* @r8, align 4
  %v1_977c = trunc i32 %v0_977c to i8
  %v2_977c = load i32, i32* @r4, align 4
  %v4_977c = add i32 %v2_977c, %v6_9174
  %v5_977c = inttoptr i32 %v4_977c to i8*
  store i8 %v1_977c, i8* %v5_977c, align 1
  br label %dec_label_pc_955c

dec_label_pc_9784:                                ; preds = %dec_label_pc_955c, %dec_label_pc_94d8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9788 = call i32 @function_10c8c(i32* null)
  store i32 %v2_9788, i32* %r0.global-to-local, align 4
  store i32 %v2_91d8, i32* %r1.global-to-local, align 4
  %v9_9790 = icmp eq i32 %v2_91d8, %v2_9788
  store i1 %v9_9790, i1* %cpsr_z.global-to-local, align 1
  %v6_9794 = icmp slt i32 %v2_91d8, %v2_9788
  br i1 %v6_9794, label %dec_label_pc_9798, label %dec_label_pc_94d8

dec_label_pc_9798:                                ; preds = %dec_label_pc_9784, %dec_label_pc_9078, %dec_label_pc_97a0
  %v29_979c = phi i32 [ %v3_91ec, %dec_label_pc_9078 ], [ %v1_97a4, %dec_label_pc_97a0 ], [ %v2_9788, %dec_label_pc_9784 ]
  store i32 %v3_9078, i32* %r4.global-to-local, align 4
  store i32 %v15_9078, i32* %r8.global-to-local, align 4
  store i32 %v21_9078, i32* %sl.global-to-local, align 4
  store i32 %v24_9078, i32* %fp.global-to-local, align 4
  ret i32 %v29_979c

dec_label_pc_97a0:                                ; preds = %dec_label_pc_91fc
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v1_97a4 = call i32 @function_109bc(i32 %v3_91ec)
  store i32 %v1_97a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9798

; uselistorder directives
  uselistorder i32 %v1_97a4, { 1, 0 }
  uselistorder i32 %v0_9730, { 0, 2, 1 }
  uselistorder i32 %v0_9714, { 0, 2, 1 }
  uselistorder i32 %v3_96e4, { 0, 2, 1 }
  uselistorder i32 %v2_96b0, { 1, 0 }
  uselistorder i32 %v8_9690, { 1, 2, 0 }
  uselistorder i32 %v0_966c, { 1, 0, 2 }
  uselistorder i32 %v7_9644, { 1, 0, 2 }
  uselistorder i32 %v1_961c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_95c0, { 1, 0, 2 }
  uselistorder i32 %v4_95bc, { 0, 2, 1 }
  uselistorder i32 %v0_959c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_958c, { 0, 2, 1 }
  uselistorder i32 %v4_9570, { 1, 0 }
  uselistorder i1 %v2_975c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_9740, { 2, 3, 1, 0 }
  uselistorder i1 %v3_96d0, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9508, { 2, 1, 0 }
  uselistorder i32 %v0_9478, { 1, 0, 2 }
  uselistorder i32 %v3_931c, { 1, 0 }
  uselistorder i32 %tmp81, { 1, 0, 2 }
  uselistorder i32 %v1_9298, { 0, 2, 1 }
  uselistorder i32 %v1_9290, { 2, 1, 0 }
  uselistorder i32 %v1_928c, { 1, 0 }
  uselistorder i32 %v1_9288, { 1, 0 }
  uselistorder i32 %v1_927c, { 1, 0 }
  uselistorder i32 %v3_9274, { 2, 0, 1 }
  uselistorder i32 %v3_9244, { 0, 1, 3, 2 }
  uselistorder i32 %v1_9240, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_923c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9234, { 0, 2, 1 }
  uselistorder i32 %v0_9230, { 0, 1, 3, 2 }
  uselistorder i1 %v7_921c, { 1, 0 }
  uselistorder i1 %v7_91f0, { 1, 0 }
  uselistorder i32 %v3_91ec, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_91d8, { 2, 1, 0 }
  uselistorder i32 %v6_91c8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_9194, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9174, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v6_90fc, { 1, 0, 2 }
  uselistorder i32 %v2_90a8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_907c, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 19, 20, 21, 0, 1, 2, 3, 4, 5, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18 }
  uselistorder i32* %r3.global-to-local, { 45, 44, 46, 47, 48, 49, 50, 51, 52, 5, 53, 54, 55, 56, 57, 58, 59, 60, 61, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r2.global-to-local, { 35, 36, 37, 38, 39, 40, 3, 41, 42, 43, 44, 45, 46, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 0 }
  uselistorder i32* %r1.global-to-local, { 35, 36, 37, 38, 39, 40, 41, 42, 4, 43, 44, 45, 46, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 32, 31, 34, 33, 0 }
  uselistorder i32* %r0.global-to-local, { 31, 30, 1, 32, 3, 33, 34, 37, 38, 35, 36, 40, 39, 2, 41, 42, 4, 43, 5, 6, 11, 7, 8, 9, 10, 14, 12, 13, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %fp.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 7, 30, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder label %dec_label_pc_9798, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9768, { 1, 0 }
  uselistorder label %dec_label_pc_9754, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_955c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_94d8, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_97b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_97b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i8 @__decompiler_undefined_function_1()
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_97b4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  %v1_97d0 = urem i32 %arg4, 256
  store i32 %v1_97d0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_97e0 = call i32 @function_1157c(i32 %v1_97b4, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  %v2_97f0 = call i32 @function_1157c(i32 %v1_97b4, i32 4)
  %v0_97f4 = load i32, i32* @r5, align 4
  store i32 %v0_97f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_9800 = load i32, i32* @r7, align 4
  store i32 %v0_9800, i32* %r3.global-to-local, align 4
  %v0_9804 = load i32, i32* @r4, align 4
  store i32 %v0_9804, i32* %r0.global-to-local, align 4
  %v5_9808 = inttoptr i32 %v0_97f4 to i32*
  %v6_9808 = call i32 @function_829c(i32 %v0_9804, i32* %v5_9808, i32 2, i32 %v0_9800, i32 %v2_97f0)
  %v1_9814 = urem i32 %v6_9808, 256
  store i32 %v1_9814, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9820 = load i32, i32* @r5, align 4
  store i32 %v0_9820, i32* %r1.global-to-local, align 4
  %v0_9824 = load i32, i32* @r4, align 4
  store i32 %v0_9824, i32* %r0.global-to-local, align 4
  %v5_9828 = trunc i32 %v6_9808 to i8
  %v6_982c = inttoptr i32 %v0_9820 to i32*
  %v7_982c = call i32 @function_829c(i32 %v0_9824, i32* %v6_982c, i32 3, i32 65535, i32 %v6_9808)
  %v0_9830 = load i32, i32* @r5, align 4
  store i32 %v0_9830, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_982c, i32* @sl, align 4
  %v0_9840 = load i32, i32* @r4, align 4
  store i32 %v0_9840, i32* %r0.global-to-local, align 4
  %v5_9844 = inttoptr i32 %v0_9830 to i32*
  %v6_9844 = call i32 @function_829c(i32 %v0_9840, i32* %v5_9844, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_984c = urem i32 %v6_9844, 256
  store i32 %v1_984c, i32* %ip.global-to-local, align 4
  %v0_9850 = load i32, i32* @r5, align 4
  store i32 %v0_9850, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_985c = load i32, i32* @r4, align 4
  store i32 %v0_985c, i32* %r0.global-to-local, align 4
  %sext8 = mul i32 %v6_9844, 16777216
  %v5_9864 = sdiv i32 %sext8, 16777216
  %v6_9864 = inttoptr i32 %v0_9850 to i32*
  %v7_9864 = call i32 @function_829c(i32 %v0_985c, i32* %v6_9864, i32 5, i32 1, i32 %v5_9864)
  %v1_9870 = urem i32 %v7_9864, 256
  store i32 %v1_9870, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9878 = load i32, i32* @r5, align 4
  store i32 %v0_9878, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9880 = load i32, i32* @r4, align 4
  store i32 %v0_9880, i32* %r0.global-to-local, align 4
  %v5_9888 = inttoptr i32 %v0_9878 to i32*
  %v6_9888 = call i32 @function_829c(i32 %v0_9880, i32* %v5_9888, i32 7, i32 65535, i32 %v1_9870)
  %v0_988c = load i32, i32* @r5, align 4
  store i32 %v0_988c, i32* %r1.global-to-local, align 4
  %v3_9890 = mul i32 %v6_9888, 65536
  store i32 %v3_9890, i32* @r8, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9898 = load i32, i32* @r7, align 4
  store i32 %v0_9898, i32* %r3.global-to-local, align 4
  %v0_989c = load i32, i32* @r4, align 4
  store i32 %v0_989c, i32* %r0.global-to-local, align 4
  %v5_98a0 = inttoptr i32 %v0_988c to i32*
  %v6_98a0 = call i32 @function_829c(i32 %v0_989c, i32* %v5_98a0, i32 10, i32 %v0_9898, i32 ptrtoint (i32* @0 to i32))
  %v1_98a8 = urem i32 %v6_98a0, 256
  store i32 %v1_98a8, i32* %ip.global-to-local, align 4
  %v0_98ac = load i32, i32* @r5, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_98b8 = load i32, i32* @r4, align 4
  store i32 %v0_98b8, i32* %r0.global-to-local, align 4
  %v5_98c0 = inttoptr i32 %v0_98ac to i32*
  %v6_98c0 = call i32 @function_829c(i32 %v0_98b8, i32* %v5_98c0, i32 11, i32 1, i32 %v1_98a8)
  %v1_98c8 = urem i32 %v6_98c0, 256
  store i32 %v1_98c8, i32* %ip.global-to-local, align 4
  %v0_98cc = load i32, i32* @r5, align 4
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_98d8 = load i32, i32* @r4, align 4
  store i32 %v0_98d8, i32* %r0.global-to-local, align 4
  %v5_98e0 = inttoptr i32 %v0_98cc to i32*
  %v6_98e0 = call i32 @function_829c(i32 %v0_98d8, i32* %v5_98e0, i32 12, i32 1, i32 %v1_98c8)
  %v1_98e8 = urem i32 %v6_98e0, 256
  store i32 %v1_98e8, i32* %ip.global-to-local, align 4
  %v0_98ec = load i32, i32* @r5, align 4
  store i32 %v0_98ec, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r7, align 4
  store i32 %v0_98f4, i32* %r3.global-to-local, align 4
  %v0_98f8 = load i32, i32* @r4, align 4
  store i32 %v0_98f8, i32* %r0.global-to-local, align 4
  %v5_9900 = inttoptr i32 %v0_98ec to i32*
  %v6_9900 = call i32 @function_829c(i32 %v0_98f8, i32* %v5_9900, i32 13, i32 %v0_98f4, i32 %v1_98e8)
  %v1_9908 = urem i32 %v6_9900, 256
  store i32 %v1_9908, i32* %ip.global-to-local, align 4
  %v0_990c = load i32, i32* @r5, align 4
  store i32 %v0_990c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_9914 = load i32, i32* @r7, align 4
  store i32 %v0_9914, i32* %r3.global-to-local, align 4
  %v0_9918 = load i32, i32* @r4, align 4
  store i32 %v0_9918, i32* %r0.global-to-local, align 4
  %v5_9920 = inttoptr i32 %v0_990c to i32*
  %v6_9920 = call i32 @function_829c(i32 %v0_9918, i32* %v5_9920, i32 14, i32 %v0_9914, i32 %v1_9908)
  %v1_9928 = urem i32 %v6_9920, 256
  store i32 %v1_9928, i32* %ip.global-to-local, align 4
  %v0_992c = load i32, i32* @r5, align 4
  store i32 %v0_992c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_9934 = load i32, i32* @r7, align 4
  store i32 %v0_9934, i32* %r3.global-to-local, align 4
  %v0_9938 = load i32, i32* @r4, align 4
  store i32 %v0_9938, i32* %r0.global-to-local, align 4
  %v5_9940 = inttoptr i32 %v0_992c to i32*
  %v6_9940 = call i32 @function_829c(i32 %v0_9938, i32* %v5_9940, i32 15, i32 %v0_9934, i32 %v1_9928)
  %v1_9948 = urem i32 %v6_9940, 256
  store i32 %v1_9948, i32* %ip.global-to-local, align 4
  %v0_994c = load i32, i32* @r7, align 4
  store i32 %v0_994c, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9954 = load i32, i32* @r5, align 4
  store i32 %v0_9954, i32* %r1.global-to-local, align 4
  %v0_9958 = load i32, i32* @r4, align 4
  store i32 %v0_9958, i32* %r0.global-to-local, align 4
  %v5_9960 = inttoptr i32 %v0_9954 to i32*
  %v6_9960 = call i32 @function_829c(i32 %v0_9958, i32* %v5_9960, i32 %v0_994c, i32 768, i32 %v1_9948)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_996c = load i32, i32* @r5, align 4
  store i32 %v0_996c, i32* %r1.global-to-local, align 4
  %v0_9974 = load i32, i32* @r4, align 4
  store i32 %v0_9974, i32* %r0.global-to-local, align 4
  %v5_9978 = inttoptr i32 %v0_996c to i32*
  %v6_9978 = call i32 @function_829c(i32 %v0_9974, i32* %v5_9978, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9980 = urem i32 %v6_9978, 256
  store i32 %v1_9980, i32* %r3.global-to-local, align 4
  %v0_9984 = load i32, i32* @r7, align 4
  store i32 %v0_9984, i32* %r0.global-to-local, align 4
  %v1_998c = inttoptr i32 %v0_9984 to i32*
  %v2_998c = call i32 @function_10c8c(i32* %v1_998c)
  %v1_9990 = load i32, i32* @r6, align 4
  %v2_9990 = add i32 %v1_9990, %v2_998c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_99a4 = call i32 @function_11290(i32 2, i32 3, i32 6)
  store i32 %v3_99a4, i32* %r0.global-to-local, align 4
  %v0_99a8 = load i32, i32* @r8, align 4
  %v3_99a8 = udiv i32 %v0_99a8, 65536
  store i32 %v3_99a8, i32* %r1.global-to-local, align 4
  %v7_99ac = icmp eq i32 %v3_99a4, -1
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_99a4, i32* @sb, align 4
  br i1 %v7_99ac, label %dec_label_pc_9d60, label %dec_label_pc_99bc

dec_label_pc_99bc:                                ; preds = %dec_label_pc_97b0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_99c4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_99c4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_99cc = load i32, i32* @r7, align 4
  store i32 %v0_99cc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_99d8 = call i32 @function_11260(i32 %v3_99a4, i32 %v0_99cc, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_99d8, i32* %r0.global-to-local, align 4
  %v7_99dc = icmp eq i32 %v6_99d8, -1
  store i1 %v7_99dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99dc, label %dec_label_pc_9d58, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99bc
  store i32 %v1_97b4, i32* %r2.global-to-local, align 4
  %v0_99e8 = load i32, i32* @sl, align 4
  %v3_99e8 = mul i32 %v0_99e8, 65536
  store i32 %v3_99e8, i32* %r0.global-to-local, align 4
  %v3_99ec = urem i32 %v0_99e8, 65536
  store i32 %v3_99ec, i32* %r3.global-to-local, align 4
  %v2_99f0 = icmp eq i32 %v1_97b4, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %v0_99f4 = load i32, i32* @r7, align 4
  store i32 %v0_99f4, i32* %stack_var_-40, align 4
  br i1 %v2_99f0, label %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge, label %dec_label_pc_9a00

dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge: ; preds = %dec_label_pc_99e4
  %.pre = add i32 %v6_9960, 40
  br label %dec_label_pc_9be0.preheader

dec_label_pc_9a00:                                ; preds = %dec_label_pc_99e4
  %v0_9a04 = load i32, i32* @r8, align 4
  %v3_9a04 = udiv i32 %v0_9a04, 16777216
  %tmp77 = udiv i32 %v0_99e8, 256
  %v3_9a08 = urem i32 %tmp77, 256
  store i32 %v3_9a08, i32* %r0.global-to-local, align 4
  %v1_9a0c = add i32 %v6_9960, 40
  store i32 %v1_9a0c, i32* %ip.global-to-local, align 4
  %v3_9dd4 = icmp ugt i32 %v0_99a8, -65537
  %v2_9ab8 = ptrtoint i32* %stack_var_-60 to i32
  %v3_9ac4 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_9adc = urem i32 %v1_9a0c, 256
  %tmp78 = udiv i32 %v1_9a0c, 256
  %v3_9ae0 = urem i32 %tmp78, 256
  %v2_9af0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_9af4 = ptrtoint i32* %stack_var_-332 to i32
  %v2_9af8 = ptrtoint i32* %stack_var_-44 to i32
  %v4_9b6c = zext i8 %tmp32 to i32
  %v4_9b70 = zext i8 %tmp31 to i32
  %v4_9b7c = mul nuw nsw i32 %v4_9b70, 256
  %v4_9b8c = zext i8 %tmp30 to i32
  %v1_9b90 = and i32 %v4_9b8c, 18
  %v2_9b94 = icmp eq i32 %v1_9b90, 18
  %v1_9fec = urem i32 %v6_98a0, 2
  %tmp101 = sub nsw i32 0, %v1_9fec
  %v4_9ff4 = and i32 %tmp101, 32
  %v1_a020 = urem i32 %v6_98e0, 2
  %tmp102 = sub nsw i32 0, %v1_a020
  %v4_a028 = and i32 %tmp102, 8
  %v1_a06c = urem i32 %v6_9940, 2
  %v4_9ae4 = mul nuw nsw i32 %v1_9adc, 256
  %v5_9ae4 = or i32 %v4_9ae4, %v3_9ae0
  %v5_9b7c = or i32 %v4_9b6c, %v4_9b7c
  %v1_9b9c = and i32 %v4_9b8c, 5
  %v2_9b9c = icmp eq i32 %v1_9b9c, 0
  %v1_9aa4 = urem i32 %v3_99a8, 256
  %v4_9aa8 = mul nuw nsw i32 %v1_9aa4, 256
  %v5_9aa8 = or i32 %v3_9a04, %v4_9aa8
  %v1_9ab0 = trunc i32 %v3_99a8 to i8
  %v1_9ab4 = trunc i32 %v3_9a04 to i8
  %v1_9edc = urem i32 %v0_99e8, 256
  %v4_9ee4 = mul nuw nsw i32 %v1_9edc, 256
  %v5_9ee4 = or i32 %v4_9ee4, %v3_9a08
  %sext = mul i32 %v1_9a0c, 16777216
  %v4_9f00 = sdiv i32 %sext, 16777216
  %v1_a004 = urem i32 %v6_98c0, 2
  %tmp103 = sub nsw i32 0, %v1_a004
  %v4_a00c = and i32 %tmp103, 16
  %v1_a038 = urem i32 %v6_9900, 2
  %tmp104 = sub nsw i32 0, %v1_a038
  %v4_a040 = and i32 %tmp104, 4
  %v1_a050 = urem i32 %v6_9920, 2
  %tmp105 = sub nsw i32 0, %v1_a050
  %v3_a058 = and i32 %tmp105, 2
  br label %dec_label_pc_9a1c.outer

dec_label_pc_9a1c.outer:                          ; preds = %bb93, %dec_label_pc_9a00
  %stack_var_-336.0.ph = phi i32 [ %v0_9f1c, %bb93 ], [ %tmp, %dec_label_pc_9a00 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_9e28, %bb93 ], [ %tmp38, %dec_label_pc_9a00 ]
  br label %dec_label_pc_9a1c

dec_label_pc_9a1c:                                ; preds = %dec_label_pc_9a1c.outer, %dec_label_pc_9bc8
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.5, %dec_label_pc_9bc8 ], [ %stack_var_-56.0.ph, %dec_label_pc_9a1c.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9a28 = call i32 @function_11290(i32 2, i32 1, i32 0)
  store i32 %v3_9a28, i32* %r0.global-to-local, align 4
  %v7_9a2c = icmp eq i32 %v3_9a28, -1
  store i1 %v7_9a2c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9a28, i32* @sl, align 4
  br i1 %v7_9a2c, label %dec_label_pc_9bc8, label %dec_label_pc_9a38

dec_label_pc_9a38:                                ; preds = %dec_label_pc_9a1c, %dec_label_pc_9ba4
  %v0_9a40 = phi i32 [ %v3_9bb8, %dec_label_pc_9ba4 ], [ %v3_9a28, %dec_label_pc_9a1c ]
  %stack_var_-56.1 = phi i32 [ %v0_9e28, %dec_label_pc_9ba4 ], [ %stack_var_-56.0, %dec_label_pc_9a1c ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9a40 = call i32 @function_108f8(i32 %v0_9a40, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9a48 = or i32 %v2_9a40, 2048
  store i32 %v1_9a48, i32* @r2, align 4
  %v0_9a4c = load i32, i32* @sl, align 4
  store i32 %v0_9a4c, i32* %r0.global-to-local, align 4
  %v2_9a50 = call i32 @function_108f8(i32 %v0_9a4c, i32 4)
  store i32 %v2_9a50, i32* %r0.global-to-local, align 4
  %v3_9a54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9a54, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %lr.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_9a70 = mul i32 %v3_9a54, 24
  store i32 %v5_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = add i32 %v5_9a70, %arg3
  store i32 %v2_9a74, i32* %r2.global-to-local, align 4
  %v1_9a78 = add i32 %v2_9a74, 20
  %v2_9a78 = inttoptr i32 %v1_9a78 to i8*
  %v3_9a78 = load i8, i8* %v2_9a78, align 1
  %v4_9a78 = zext i8 %v3_9a78 to i32
  store i32 %v4_9a78, i32* %r3.global-to-local, align 4
  %v2_9a7c = icmp ugt i8 %v3_9a78, 30
  %v7_9a7c = icmp eq i8 %v3_9a78, 31
  store i1 %v7_9a7c, i1* %cpsr_z.global-to-local, align 1
  %v2_9a80 = xor i1 %v7_9a7c, true
  %v3_9a80 = and i1 %v2_9a7c, %v2_9a80
  br i1 %v3_9a80, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_9a38
  %v5_9a80 = add i32 %v2_9a74, 16
  %v6_9a80 = inttoptr i32 %v5_9a80 to i32*
  %v7_9a80 = load i32, i32* %v6_9a80, align 4
  store i32 %v7_9a80, i32* %r3.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_9a38, %bb
  %v4_9a84 = phi i32 [ %v4_9a78, %dec_label_pc_9a38 ], [ %v7_9a80, %bb ]
  %v4_9a84.stack_var_-56.1 = select i1 %v3_9a80, i32 %v4_9a84, i32 %stack_var_-56.1
  %v2_9a88 = xor i1 %v2_9a7c, true
  %v3_9a88 = or i1 %v7_9a7c, %v2_9a88
  br i1 %v3_9a88, label %dec_label_pc_9d68, label %dec_label_pc_9a8c

dec_label_pc_9a8c:                                ; preds = %bb79
  store i32 %v3_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9dd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9dd4, label %dec_label_pc_9ddc, label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_9d68, %dec_label_pc_9a8c
  %stack_var_-56.3 = phi i32 [ %v2_9dc0, %dec_label_pc_9d68 ], [ %v4_9a84.stack_var_-56.1, %dec_label_pc_9a8c ]
  store i32 %v3_9a04, i32* %r0.global-to-local, align 4
  store i32 %v5_9aa8, i32* %r3.global-to-local, align 4
  store i32 %v1_9aa4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9ab8

dec_label_pc_9ab8:                                ; preds = %dec_label_pc_9ddc, %dec_label_pc_9aa0
  %stack_var_-57.0 = phi i8 [ %v1_9de4, %dec_label_pc_9ddc ], [ %v1_9ab0, %dec_label_pc_9aa0 ]
  %v0_9e28 = phi i32 [ %stack_var_-56.6, %dec_label_pc_9ddc ], [ %stack_var_-56.3, %dec_label_pc_9aa0 ]
  %storemerge = phi i8 [ %v1_9ddc, %dec_label_pc_9ddc ], [ %v1_9ab4, %dec_label_pc_9aa0 ]
  store i32 %v2_9ab8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9ac0 = load i32, i32* @sl, align 4
  store i32 %v0_9ac0, i32* %r0.global-to-local, align 4
  %v4_9ac4 = call i32 @function_110ec(i32 %v0_9ac0, %sockaddr* %v3_9ac4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9acc = call i32 @function_10c8c(i32* null)
  store i32 %v2_9acc, i32* %r0.global-to-local, align 4
  store i32 %v1_9a0c, i32* %r1.global-to-local, align 4
  store i32 %v1_9adc, i32* %r3.global-to-local, align 4
  store i32 %v5_9ae4, i32* @fp, align 4
  store i32 %v1_9adc, i32* %r2.global-to-local, align 4
  store i32 %v2_9acc, i32* @r4, align 4
  store i32 %v2_9af8, i32* @r6, align 4
  %v9_9b50 = icmp eq i32 %tmp33, %v0_9e28
  %v4_9b74 = zext i8 %storemerge to i32
  %v4_9b78 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_9b50 to i32
  %v9_9b64 = icmp eq i1 %v9_9b50, false
  %v4_9b80 = mul nuw nsw i32 %v4_9b78, 256
  %v5_9b80 = or i32 %v4_9b74, %v4_9b80
  %v9_9b84 = icmp eq i32 %v5_9b80, %v5_9b7c
  br label %dec_label_pc_9b14

dec_label_pc_9b04:                                ; preds = %.thread25, %dec_label_pc_9b6c, %dec_label_pc_9b9c, %bb82
  %v2_9b04 = call i32 @function_10c8c(i32* null)
  %v0_9b08 = load i32, i32* @r4, align 4
  %v2_9b08 = sub i32 %v2_9b04, %v0_9b08
  store i32 %v2_9b08, i32* %r0.global-to-local, align 4
  %v7_9b0c = icmp eq i32 %v2_9b08, 10
  store i1 %v7_9b0c, i1* %cpsr_z.global-to-local, align 1
  %v8_9b10 = icmp sgt i32 %v2_9b08, 10
  br i1 %v8_9b10, label %dec_label_pc_9ba4, label %dec_label_pc_9b14

dec_label_pc_9b14:                                ; preds = %dec_label_pc_9b04, %dec_label_pc_9ab8
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_9af4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9b24 = load i32, i32* @sb, align 4
  store i32 %v0_9b24, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v7_9b34 = call i32 @function_111cc(i32 %v0_9b24, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_9af0, i32 %v2_9af8)
  store i32 %v7_9b34, i32* %r2.global-to-local, align 4
  %v7_9b3c = icmp eq i32 %v7_9b34, -1
  store i1 %v7_9b3c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9b3c, label %dec_label_pc_9d60, label %dec_label_pc_9b48

dec_label_pc_9b48:                                ; preds = %dec_label_pc_9b14
  store i32 %tmp33, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9b5c = icmp eq i32 %v7_9b34, 40
  store i1 %v7_9b5c, i1* %cpsr_z.global-to-local, align 1
  %tmp106 = icmp ult i32 %v7_9b34, 41
  br i1 %tmp106, label %.thread25, label %bb82

.thread25:                                        ; preds = %dec_label_pc_9b48
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9b04

bb82:                                             ; preds = %dec_label_pc_9b48
  store i1 %v9_9b64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b64, label %dec_label_pc_9b04, label %dec_label_pc_9b6c

dec_label_pc_9b6c:                                ; preds = %bb82
  store i32 %v4_9b70, i32* %r1.global-to-local, align 4
  store i32 %v4_9b74, i32* %ip.global-to-local, align 4
  store i32 %v4_9b78, i32* %r2.global-to-local, align 4
  store i32 %v5_9b7c, i32* %r3.global-to-local, align 4
  store i32 %v5_9b80, i32* @r5, align 4
  store i1 %v9_9b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b84, label %dec_label_pc_9b8c, label %dec_label_pc_9b04

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9b6c
  store i32 %v4_9b8c, i32* %r2.global-to-local, align 4
  store i32 %v1_9b90, i32* %r3.global-to-local, align 4
  store i1 %v2_9b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b94, label %dec_label_pc_9e1c, label %dec_label_pc_9b9c

dec_label_pc_9b9c:                                ; preds = %dec_label_pc_9b8c
  store i1 %v2_9b9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b9c, label %dec_label_pc_9b04, label %dec_label_pc_9ba4

dec_label_pc_9ba4:                                ; preds = %dec_label_pc_9b9c, %dec_label_pc_9b04
  %v0_9ba4 = load i32, i32* @sl, align 4
  store i32 %v0_9ba4, i32* %r0.global-to-local, align 4
  %v1_9ba8 = call i32 @function_109bc(i32 %v0_9ba4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9bb8 = call i32 @function_11290(i32 2, i32 1, i32 0)
  store i32 %v3_9bb8, i32* %r0.global-to-local, align 4
  %v3_9bbc = icmp eq i32 %v3_9bb8, -1
  %v8_9bbc = icmp eq i32 %v3_9bb8, -1
  store i1 %v8_9bbc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9bb8, i32* @sl, align 4
  br i1 %v3_9bbc, label %dec_label_pc_9bc8, label %dec_label_pc_9a38

dec_label_pc_9bc8:                                ; preds = %dec_label_pc_9ba4, %dec_label_pc_9a1c
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_9a1c ], [ %v0_9e28, %dec_label_pc_9ba4 ]
  %v3_9bc8 = load i32, i32* %stack_var_-40, align 4
  %v1_9bd0 = add i32 %v3_9bc8, 1
  store i32 %v1_9bd0, i32* %r3.global-to-local, align 4
  %v9_9bd4 = icmp eq i32 %v1_9bd0, %v1_97b4
  store i1 %v9_9bd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9bd0, i32* %stack_var_-40, align 4
  %v5_9bdc = icmp slt i32 %v1_9bd0, %v1_97b4
  br i1 %v5_9bdc, label %dec_label_pc_9a1c, label %dec_label_pc_9be0.preheader

dec_label_pc_9be0.preheader:                      ; preds = %bb93, %dec_label_pc_9bc8, %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge
  %v1_9c14.pre-phi = phi i32 [ %.pre, %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge ], [ %v1_9a0c, %dec_label_pc_9bc8 ], [ %v1_9a0c, %bb93 ]
  %v1_9bf8 = add i32 %v6_9960, 20
  %v3_9bfc = mul i32 %v1_9bf8, 65536
  %tmp84 = mul i32 %v1_9bf8, 256
  %v1_9c04 = and i32 %tmp84, 65280
  %tmp85 = udiv i32 %v1_9bf8, 256
  %v4_9c08 = urem i32 %tmp85, 256
  %v5_9c08 = or i32 %v4_9c08, %v1_9c04
  %v2_9d38 = icmp eq i32 %v1_9980, 0
  %v3_9d24 = icmp eq i32 %v3_99ec, 65535
  br label %dec_label_pc_9be0

dec_label_pc_9be0:                                ; preds = %dec_label_pc_9be0.preheader, %dec_label_pc_9e04
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_99f0, label %dec_label_pc_9e04, label %dec_label_pc_9bf4

dec_label_pc_9bf4:                                ; preds = %dec_label_pc_9be0
  store i32 %v1_9bf8, i32* @r8, align 4
  store i32 %v3_9bfc, i32* %r2.global-to-local, align 4
  store i32 %v5_9c08, i32* @fp, align 4
  store i32 %v6_9960, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_9c14.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_9d10

dec_label_pc_9c20:                                ; preds = %dec_label_pc_9d34, %dec_label_pc_9d48
  %v0_9c20 = load i32, i32* @r7, align 4
  %v1_9c20 = trunc i32 %v0_9c20 to i8
  %v2_9c20 = load i32, i32* @r4, align 4
  %v3_9c20 = add i32 %v2_9c20, 10
  %v4_9c20 = inttoptr i32 %v3_9c20 to i8*
  store i8 %v1_9c20, i8* %v4_9c20, align 1
  %v0_9c24 = load i32, i32* @r7, align 4
  %v1_9c24 = trunc i32 %v0_9c24 to i8
  %v2_9c24 = load i32, i32* @r4, align 4
  %v3_9c24 = add i32 %v2_9c24, 11
  %v4_9c24 = inttoptr i32 %v3_9c24 to i8*
  store i8 %v1_9c24, i8* %v4_9c24, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9c2c = load i32, i32* @r4, align 4
  store i32 %v0_9c2c, i32* @r0, align 4
  %v2_9c30 = call i32 @function_c690(i32 %v0_9c2c, i32 20)
  %v3_9c30 = trunc i32 %v2_9c30 to i8
  store i32 %v2_9c30, i32* %r0.global-to-local, align 4
  %v3_9c34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_97e0, i32* %r2.global-to-local, align 4
  %v3_9c3c = mul i32 %v3_9c34, 16
  %v2_9c40 = add i32 %v3_9c3c, %v2_97e0
  store i32 %v2_9c40, i32* %r1.global-to-local, align 4
  %v1_9c44 = add i32 %v2_9c40, 4
  %v2_9c44 = inttoptr i32 %v1_9c44 to i32*
  %v3_9c44 = load i32, i32* %v2_9c44, align 4
  %v3_9c48 = mul i32 %v3_9c44, 65536
  store i32 %v3_9c48, i32* %ip.global-to-local, align 4
  %tmp86 = mul i32 %v3_9c44, 256
  %v1_9c50 = and i32 %tmp86, 65280
  %tmp87 = udiv i32 %v3_9c44, 256
  %v4_9c54 = urem i32 %tmp87, 256
  %v5_9c54 = or i32 %v4_9c54, %v1_9c50
  store i32 %v5_9c54, i32* %r2.global-to-local, align 4
  %v1_9c58 = add i32 %v3_9c44, 1
  store i32 %v1_9c58, i32* %r3.global-to-local, align 4
  store i32 %v1_9c58, i32* %v2_9c44, align 4
  %v0_9c60 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c60 = load i32, i32* @r5, align 4
  %v2_9c60 = add i32 %v1_9c60, 4
  %v3_9c60 = inttoptr i32 %v2_9c60 to i32*
  store i32 %v0_9c60, i32* %v3_9c60, align 4
  %v0_9c64 = load i32, i32* %r1.global-to-local, align 4
  %v1_9c64 = add i32 %v0_9c64, 8
  %v2_9c64 = inttoptr i32 %v1_9c64 to i32*
  %v3_9c64 = load i32, i32* %v2_9c64, align 4
  %tmp88 = mul i32 %v3_9c64, 256
  %v1_9c70 = and i32 %tmp88, 65280
  %tmp89 = udiv i32 %v3_9c64, 256
  %v4_9c74 = urem i32 %tmp89, 256
  %v5_9c74 = or i32 %v4_9c74, %v1_9c70
  store i32 %v5_9c74, i32* %r2.global-to-local, align 4
  %v4_9c7828 = udiv i32 %v2_9c30, 256
  %v1_9c7c = trunc i32 %v4_9c7828 to i8
  %v2_9c7c = load i32, i32* @r4, align 4
  %v3_9c7c = add i32 %v2_9c7c, 11
  %v4_9c7c = inttoptr i32 %v3_9c7c to i8*
  store i8 %v1_9c7c, i8* %v4_9c7c, align 1
  %v3_9c80 = load i32, i32* @r4, align 4
  %v4_9c80 = add i32 %v3_9c80, 10
  %v5_9c80 = inttoptr i32 %v4_9c80 to i8*
  store i8 %v3_9c30, i8* %v5_9c80, align 1
  %v0_9c84 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c84 = load i32, i32* @r5, align 4
  %v2_9c84 = add i32 %v1_9c84, 8
  %v3_9c84 = inttoptr i32 %v2_9c84 to i32*
  store i32 %v0_9c84, i32* %v3_9c84, align 4
  %v0_9c88 = load i32, i32* @r5, align 4
  store i32 %v0_9c88, i32* @r1, align 4
  %v0_9c8c = load i32, i32* @fp, align 4
  store i32 %v0_9c8c, i32* %r2.global-to-local, align 4
  %v0_9c90 = load i32, i32* @r8, align 4
  store i32 %v0_9c90, i32* %r3.global-to-local, align 4
  %v0_9c94 = load i32, i32* @r4, align 4
  store i32 %v0_9c94, i32* %r0.global-to-local, align 4
  %v0_9c98 = load i32, i32* @r7, align 4
  %v1_9c98 = trunc i32 %v0_9c98 to i8
  %v3_9c98 = add i32 %v0_9c88, 16
  %v4_9c98 = inttoptr i32 %v3_9c98 to i8*
  store i8 %v1_9c98, i8* %v4_9c98, align 1
  %v0_9c9c = load i32, i32* @r7, align 4
  %v1_9c9c = trunc i32 %v0_9c9c to i8
  %v2_9c9c = load i32, i32* @r5, align 4
  %v3_9c9c = add i32 %v2_9c9c, 17
  %v4_9c9c = inttoptr i32 %v3_9c9c to i8*
  store i8 %v1_9c9c, i8* %v4_9c9c, align 1
  %v4_9ca0 = call i32 @function_c6ec(i32 %v0_9c94, i32 %v0_9c88, i32 %v0_9c8c, i32 %v0_9c90)
  %v5_9ca0 = trunc i32 %v4_9ca0 to i8
  store i32 %v4_9ca0, i32* %r0.global-to-local, align 4
  %v4_9ca429 = udiv i32 %v4_9ca0, 256
  %v1_9ca8 = trunc i32 %v4_9ca429 to i8
  %v2_9ca8 = load i32, i32* @r5, align 4
  %v3_9ca8 = add i32 %v2_9ca8, 17
  %v4_9ca8 = inttoptr i32 %v3_9ca8 to i8*
  store i8 %v1_9ca8, i8* %v4_9ca8, align 1
  %v3_9cac = load i32, i32* @r5, align 4
  %v4_9cac = add i32 %v3_9cac, 16
  %v5_9cac = inttoptr i32 %v4_9cac to i8*
  store i8 %v5_9ca0, i8* %v5_9cac, align 1
  %v3_9cb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9cb0, i32* %r3.global-to-local, align 4
  %v0_9cb4 = load i32, i32* @r4, align 4
  %v1_9cb4 = add i32 %v0_9cb4, 20
  %v2_9cb4 = inttoptr i32 %v1_9cb4 to i32*
  %v3_9cb4 = load i32, i32* %v2_9cb4, align 4
  %v5_9cbc = mul i32 %v3_9cb0, 24
  %v3_9cc4 = udiv i32 %v3_9cb4, 65536
  store i32 %v3_9cc4, i32* %r2.global-to-local, align 4
  %v2_9cc8 = add i32 %v5_9cbc, %arg3
  store i32 %v2_9cc8, i32* %ip.global-to-local, align 4
  %v3_9ccc4 = udiv i32 %v3_9cb4, 16777216
  %v1_9cd0 = trunc i32 %v3_9ccc4 to i8
  %v3_9cd0 = add i32 %v2_9cc8, 3
  %v4_9cd0 = inttoptr i32 %v3_9cd0 to i8*
  store i8 %v1_9cd0, i8* %v4_9cd0, align 1
  %v0_9cd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cd4 = trunc i32 %v0_9cd4 to i8
  %v2_9cd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9cd4 = add i32 %v2_9cd4, 2
  %v4_9cd4 = inttoptr i32 %v3_9cd4 to i8*
  store i8 %v1_9cd4, i8* %v4_9cd4, align 1
  %v0_9cd8 = load i32, i32* @r4, align 4
  store i32 %v0_9cd8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9ce0 = load i32, i32* @sb, align 4
  store i32 %v0_9ce0, i32* %r0.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @sl, align 4
  store i32 %v0_9ce4, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_9cec = load i32, i32* %ip.global-to-local, align 4
  %v6_9cf4 = inttoptr i32 %v0_9cd8 to i32*
  %v7_9cf4 = call i32 @function_1122c(i32 %v0_9ce0, i32* %v6_9cf4, i32 %v0_9ce4, i32 16384, i32 %v0_9cec, i32 16)
  %v3_9cf8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9cf8, i32* %r3.global-to-local, align 4
  store i32 %v1_97b4, i32* %ip.global-to-local, align 4
  %v1_9d00 = add i32 %v3_9cf8, 1
  store i32 %v1_9d00, i32* %r0.global-to-local, align 4
  %v9_9d04 = icmp eq i32 %v1_9d00, %v1_97b4
  store i1 %v9_9d04, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9d00, i32* %stack_var_-40, align 4
  %v6_9d0c = icmp slt i32 %v1_9d00, %v1_97b4
  br i1 %v6_9d0c, label %dec_label_pc_9d10, label %dec_label_pc_9e04

dec_label_pc_9d10:                                ; preds = %dec_label_pc_9c20, %dec_label_pc_9bf4
  %v1_9d1c = phi i32 [ %v1_9d00, %dec_label_pc_9c20 ], [ 0, %dec_label_pc_9bf4 ]
  store i32 %v2_97f0, i32* %ip.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_99ec, i32* @lr, align 4
  %v4_9d1c = mul i32 %v1_9d1c, 4
  %v5_9d1c = add i32 %v4_9d1c, %v2_97f0
  %v6_9d1c = inttoptr i32 %v5_9d1c to i32*
  %v7_9d1c = load i32, i32* %v6_9d1c, align 4
  store i32 %v7_9d1c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9d24, i1* %cpsr_z.global-to-local, align 1
  %v1_9d28 = add i32 %v7_9d1c, 40
  store i32 %v1_9d28, i32* @r6, align 4
  %v1_9d2c = add i32 %v7_9d1c, 20
  store i32 %v1_9d2c, i32* @r5, align 4
  br i1 %v3_9d24, label %dec_label_pc_9df0, label %dec_label_pc_9d34

dec_label_pc_9d34:                                ; preds = %dec_label_pc_9d10, %dec_label_pc_9df0
  %v0_9d40 = phi i32 [ %v1_9d28, %dec_label_pc_9d10 ], [ %v0_9d40.pre, %dec_label_pc_9df0 ]
  store i1 %v2_9d38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  store i32 %v0_9d40, i32* %r0.global-to-local, align 4
  br i1 %v2_9d38, label %dec_label_pc_9c20, label %dec_label_pc_9d48

dec_label_pc_9d48:                                ; preds = %dec_label_pc_9d34
  %v2_9d48 = call i32 @function_db6c(i32 %v0_9d40, i32 %v6_9960)
  store i32 %v2_9d48, i32* %r0.global-to-local, align 4
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  %v0_9d50 = load i32, i32* @r7, align 4
  %v1_9d50 = trunc i32 %v0_9d50 to i8
  %v2_9d50 = load i32, i32* @r6, align 4
  %v4_9d50 = add i32 %v2_9d50, %v6_9960
  %v5_9d50 = inttoptr i32 %v4_9d50 to i8*
  store i8 %v1_9d50, i8* %v5_9d50, align 1
  br label %dec_label_pc_9c20

dec_label_pc_9d58:                                ; preds = %dec_label_pc_99bc
  %v0_9d58 = load i32, i32* @sb, align 4
  store i32 %v0_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = call i32 @function_109bc(i32 %v0_9d58)
  store i32 %v1_9d5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d60

dec_label_pc_9d60:                                ; preds = %dec_label_pc_9b14, %dec_label_pc_9e04, %dec_label_pc_97b0, %dec_label_pc_9d58
  %v29_9d64 = phi i32 [ %v3_99a4, %dec_label_pc_97b0 ], [ %v1_9d5c, %dec_label_pc_9d58 ], [ %v2_9e08, %dec_label_pc_9e04 ], [ 0, %dec_label_pc_9b14 ]
  ret i32 %v29_9d64

dec_label_pc_9d68:                                ; preds = %bb79
  %v1_9d68 = add i32 %v2_9a74, 16
  %v2_9d68 = inttoptr i32 %v1_9d68 to i32*
  %v3_9d68 = load i32, i32* %v2_9d68, align 4
  store i32 %v3_9d68, i32* @r4, align 4
  %v0_9d6c = call i32 @function_dab8()
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  %v3_9d70 = load i32, i32* %stack_var_-40, align 4
  %v5_9d78 = mul i32 %v3_9d70, 24
  %v0_9d80 = load i32, i32* @r4, align 4
  %v2_9d84 = add i32 %v5_9d78, %arg3
  store i32 %v2_9d84, i32* %r1.global-to-local, align 4
  %v1_9d80 = udiv i32 %v0_9d80, 256
  %v3_9d88 = and i32 %v1_9d80, 65280
  store i32 %v3_9d88, i32* %r2.global-to-local, align 4
  %v1_9d8c = and i32 %v0_9d80, 65280
  store i32 %v1_9d8c, i32* %r3.global-to-local, align 4
  %v3_9d90 = mul i32 %v0_9d80, 16777216
  %v4_9d94 = mul nuw nsw i32 %v1_9d8c, 256
  %v5_9d94 = or i32 %v4_9d94, %v3_9d90
  store i32 %v5_9d94, i32* %ip.global-to-local, align 4
  %v1_9d98 = add i32 %v2_9d84, 20
  %v2_9d98 = inttoptr i32 %v1_9d98 to i8*
  %v3_9d98 = load i8, i8* %v2_9d98, align 1
  %v4_9d98 = zext i8 %v3_9d98 to i32
  store i32 %v4_9d98, i32* %lr.global-to-local, align 4
  %v2_9da0 = call i32 @llvm.bswap.i32(i32 %v0_9d80)
  %v7_9da4 = lshr i32 %v0_9d6c, %v4_9d98
  %v8_9da4 = add i32 %v7_9da4, %v2_9da0
  store i32 %v8_9da4, i32* %r2.global-to-local, align 4
  %v3_9db0 = mul i32 %v8_9da4, 16777216
  %v1_9db4 = and i32 %v8_9da4, 65280
  store i32 %v1_9db4, i32* %r0.global-to-local, align 4
  %v4_9db8 = mul nuw nsw i32 %v1_9db4, 256
  %v5_9db8 = or i32 %v4_9db8, %v3_9db0
  store i32 %v5_9db8, i32* %r1.global-to-local, align 4
  %v2_9dc0 = call i32 @llvm.bswap.i32(i32 %v8_9da4)
  store i32 %v3_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9dd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9dd4, label %dec_label_pc_9ddc, label %dec_label_pc_9aa0

dec_label_pc_9ddc:                                ; preds = %dec_label_pc_9d68, %dec_label_pc_9a8c
  %stack_var_-56.6 = phi i32 [ %v2_9dc0, %dec_label_pc_9d68 ], [ %v4_9a84.stack_var_-56.1, %dec_label_pc_9a8c ]
  %v0_9ddc = call i32 @function_dab8()
  %v1_9ddc = trunc i32 %v0_9ddc to i8
  store i32 %v0_9ddc, i32* %r0.global-to-local, align 4
  %v4_9de0 = sdiv i32 %v0_9ddc, 256
  store i32 %v4_9de0, i32* %r3.global-to-local, align 4
  %v1_9de4 = trunc i32 %v4_9de0 to i8
  br label %dec_label_pc_9ab8

dec_label_pc_9df0:                                ; preds = %dec_label_pc_9d10
  %v0_9df0 = call i32 @function_dab8()
  %v1_9df0 = trunc i32 %v0_9df0 to i8
  store i32 %v0_9df0, i32* %r0.global-to-local, align 4
  %v4_9df4 = sdiv i32 %v0_9df0, 256
  store i32 %v4_9df4, i32* %r3.global-to-local, align 4
  %v1_9df8 = trunc i32 %v4_9df4 to i8
  %v2_9df8 = load i32, i32* @r4, align 4
  %v3_9df8 = add i32 %v2_9df8, 5
  %v4_9df8 = inttoptr i32 %v3_9df8 to i8*
  store i8 %v1_9df8, i8* %v4_9df8, align 1
  %v3_9dfc = load i32, i32* @r4, align 4
  %v4_9dfc = add i32 %v3_9dfc, 4
  %v5_9dfc = inttoptr i32 %v4_9dfc to i8*
  store i8 %v1_9df0, i8* %v5_9dfc, align 1
  %v0_9d40.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9d34

dec_label_pc_9e04:                                ; preds = %dec_label_pc_9c20, %dec_label_pc_9be0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9e08 = call i32 @function_10c8c(i32* null)
  store i32 %v2_9e08, i32* %r0.global-to-local, align 4
  store i32 %v2_9990, i32* %lr.global-to-local, align 4
  %v9_9e10 = icmp eq i32 %v2_9990, %v2_9e08
  store i1 %v9_9e10, i1* %cpsr_z.global-to-local, align 1
  %v6_9e14 = icmp slt i32 %v2_9990, %v2_9e08
  br i1 %v6_9e14, label %dec_label_pc_9d60, label %dec_label_pc_9be0

dec_label_pc_9e1c:                                ; preds = %dec_label_pc_9b8c
  %v3_9e1c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9e1c, i32* @r4, align 4
  store i32 %v2_97e0, i32* %r0.global-to-local, align 4
  %v3_9e24 = mul i32 %v3_9e1c, 16
  store i32 %v3_9e24, i32* %ip.global-to-local, align 4
  %v3_9e28 = add i32 %v3_9e24, %v2_97e0
  %v4_9e28 = inttoptr i32 %v3_9e28 to i32*
  store i32 %v0_9e28, i32* %v4_9e28, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_9e30 = add i32 %stack_var_-336.0.ph, 4
  %v2_9e30 = inttoptr i32 %v1_9e30 to i32*
  %v3_9e30 = load i32, i32* %v2_9e30, align 4
  store i32 %v3_9e30, i32* %r0.global-to-local, align 4
  %v1_9e38 = and i32 %v3_9e30, 65280
  store i32 %v1_9e38, i32* %r1.global-to-local, align 4
  %v2_9e4c = call i32 @llvm.bswap.i32(i32 %v3_9e30)
  store i32 %v2_97e0, i32* %r2.global-to-local, align 4
  %v1_9e54 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e54 = add i32 %v1_9e54, %v2_97e0
  store i32 %v2_9e54, i32* %ip.global-to-local, align 4
  %v2_9e58 = add i32 %v2_9e54, 4
  %v3_9e58 = inttoptr i32 %v2_9e58 to i32*
  store i32 %v2_9e4c, i32* %v3_9e58, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_9e60 = add i32 %stack_var_-336.0.ph, 8
  %v2_9e60 = inttoptr i32 %v1_9e60 to i32*
  %v3_9e60 = load i32, i32* %v2_9e60, align 4
  store i32 %v3_9e60, i32* %r0.global-to-local, align 4
  %v1_9e68 = and i32 %v3_9e60, 65280
  store i32 %v1_9e68, i32* %r1.global-to-local, align 4
  %v3_9e6c = mul i32 %v3_9e60, 16777216
  %v4_9e74 = mul nuw nsw i32 %v1_9e68, 256
  %v5_9e74 = or i32 %v4_9e74, %v3_9e6c
  store i32 %v5_9e74, i32* %r2.global-to-local, align 4
  %v2_9e7c = call i32 @llvm.bswap.i32(i32 %v3_9e60)
  store i32 %v2_9e7c, i32* %r3.global-to-local, align 4
  %v1_9e80 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e80 = add i32 %v1_9e80, 8
  %v3_9e80 = inttoptr i32 %v2_9e80 to i32*
  store i32 %v2_9e7c, i32* %v3_9e80, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_9e88 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_9e88 = load i32, i32* %v1_9e88, align 4
  %v3_9e8c = udiv i32 %v2_9e88, 65536
  store i32 %v3_9e8c, i32* %r2.global-to-local, align 4
  %v3_9e905 = udiv i32 %v2_9e88, 16777216
  store i32 %v3_9e905, i32* %r1.global-to-local, align 4
  %v0_9e94 = load i32, i32* @r5, align 4
  %v3_9e94 = sdiv i32 %v0_9e94, 256
  store i32 %v3_9e94, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v3_9e94 to i8
  %v2_9e98 = load i32, i32* %ip.global-to-local, align 4
  %v3_9e98 = add i32 %v2_9e98, 15
  %v4_9e98 = inttoptr i32 %v3_9e98 to i8*
  store i8 %v1_9e98, i8* %v4_9e98, align 1
  %v0_9e9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9e9c = trunc i32 %v0_9e9c to i8
  %v2_9e9c = load i32, i32* %ip.global-to-local, align 4
  %v3_9e9c = add i32 %v2_9e9c, 13
  %v4_9e9c = inttoptr i32 %v3_9e9c to i8*
  store i8 %v1_9e9c, i8* %v4_9e9c, align 1
  %v0_9ea0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9ea0 = trunc i32 %v0_9ea0 to i8
  %v2_9ea0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ea0 = add i32 %v2_9ea0, 12
  %v4_9ea0 = inttoptr i32 %v3_9ea0 to i8*
  store i8 %v1_9ea0, i8* %v4_9ea0, align 1
  %v0_9ea4 = load i32, i32* @r5, align 4
  %v1_9ea4 = trunc i32 %v0_9ea4 to i8
  %v2_9ea4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ea4 = add i32 %v2_9ea4, 14
  %v4_9ea4 = inttoptr i32 %v3_9ea4 to i8*
  store i8 %v1_9ea4, i8* %v4_9ea4, align 1
  store i32 %v1_9a0c, i32* %r0.global-to-local, align 4
  %v1_9eac = call i32 @function_11428(i32 %v1_9a0c)
  store i32 %v1_9eac, i32* %r0.global-to-local, align 4
  store i32 %v2_97f0, i32* %r1.global-to-local, align 4
  %v3_9eb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9eb4, i32* %r2.global-to-local, align 4
  %v2_9eb8 = load i32, i32* @r4, align 4
  %v5_9eb8 = mul i32 %v2_9eb8, 4
  %v6_9eb8 = add i32 %v5_9eb8, %v2_97f0
  %v7_9eb8 = inttoptr i32 %v6_9eb8 to i32*
  store i32 %v1_9eac, i32* %v7_9eb8, align 4
  %v0_9ebc = load i32, i32* %r1.global-to-local, align 4
  %v1_9ebc = load i32, i32* %r2.global-to-local, align 4
  %v4_9ebc = mul i32 %v1_9ebc, 4
  %v5_9ebc = add i32 %v4_9ebc, %v0_9ebc
  %v6_9ebc = inttoptr i32 %v5_9ebc to i32*
  %v7_9ebc = load i32, i32* %v6_9ebc, align 4
  store i32 %v7_9ebc, i32* %r0.global-to-local, align 4
  %v1_9ec0 = inttoptr i32 %v7_9ebc to i8*
  %v2_9ec0 = load i8, i8* %v1_9ec0, align 1
  %tmp107 = urem i8 %v2_9ec0, 16
  %v1_9ec4 = zext i8 %tmp107 to i32
  %v1_9ec8 = or i32 %v1_9ec4, 64
  store i32 %v1_9ec8, i32* %r3.global-to-local, align 4
  %v1_9ecc = trunc i32 %v1_9ec8 to i8
  store i8 %v1_9ecc, i8* %v1_9ec0, align 1
  store i32 %v3_99ec, i32* %ip.global-to-local, align 4
  %v0_9ed4 = load i32, i32* %r0.global-to-local, align 4
  %v1_9ed4 = inttoptr i32 %v0_9ed4 to i8*
  %v2_9ed4 = load i8, i8* %v1_9ed4, align 1
  %v1_9ee0 = and i8 %v2_9ed4, -16
  store i32 %v5_9ee4, i32* %r3.global-to-local, align 4
  %v1_9ee8 = or i8 %v1_9ee0, 5
  store i32 %v1_9870, i32* %ip.global-to-local, align 4
  store i32 %v1_9edc, i32* %r1.global-to-local, align 4
  store i8 %v1_9ee8, i8* %v1_9ed4, align 1
  %v0_9ef8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ef8 = trunc i32 %v0_9ef8 to i8
  %v2_9ef8 = load i32, i32* %r0.global-to-local, align 4
  %v3_9ef8 = add i32 %v2_9ef8, 5
  %v4_9ef8 = inttoptr i32 %v3_9ef8 to i8*
  store i8 %v1_9ef8, i8* %v4_9ef8, align 1
  store i32 %v6_9808, i32* %r1.global-to-local, align 4
  store i32 %v4_9f00, i32* %lr.global-to-local, align 4
  %v2_9f04 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f04 = add i32 %v2_9f04, 1
  %v4_9f04 = inttoptr i32 %v3_9f04 to i8*
  store i8 %v5_9828, i8* %v4_9f04, align 1
  store i32 %v5_9864, i32* %r2.global-to-local, align 4
  %v0_9f0c = load i32, i32* %ip.global-to-local, align 4
  %v2_9f0c = icmp eq i32 %v0_9f0c, 0
  store i1 %v2_9f0c, i1* %cpsr_z.global-to-local, align 1
  %v0_9f10 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f10 = trunc i32 %v0_9f10 to i8
  %v2_9f10 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f10 = add i32 %v2_9f10, 4
  %v4_9f10 = inttoptr i32 %v3_9f10 to i8*
  store i8 %v1_9f10, i8* %v4_9f10, align 1
  %v0_9f14 = load i32, i32* %r0.global-to-local, align 4
  %v1_9f14 = add i32 %v0_9f14, 20
  store i32 %v1_9f14, i32* %r3.global-to-local, align 4
  %v0_9f18 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f18 = trunc i32 %v0_9f18 to i8
  %v3_9f18 = add i32 %v0_9f14, 8
  %v4_9f18 = inttoptr i32 %v3_9f18 to i8*
  store i8 %v1_9f18, i8* %v4_9f18, align 1
  %v0_9f1c = load i32, i32* %r3.global-to-local, align 4
  %v0_9f20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f20, label %.thread7, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_9e1c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9f24 = load i32, i32* %r0.global-to-local, align 4
  %v4_9f24 = add i32 %v3_9f24, 6
  %v5_9f24 = inttoptr i32 %v4_9f24 to i8*
  store i8 64, i8* %v5_9f24, align 1
  %v0_9f28.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f28.pr.pr, label %.thread7, label %bb91

bb91:                                             ; preds = %.thread6
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_9e1c, %.thread6, %bb91
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_9f30 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f30 = add i32 %v2_9f30, 9
  %v4_9f30 = inttoptr i32 %v3_9f30 to i8*
  store i8 6, i8* %v4_9f30, align 1
  %v0_9f34 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f34, label %bb93, label %bb92

bb92:                                             ; preds = %.thread7
  %v1_9f34 = load i32, i32* %r2.global-to-local, align 4
  %v2_9f34 = trunc i32 %v1_9f34 to i8
  %v3_9f34 = load i32, i32* %r0.global-to-local, align 4
  %v4_9f34 = add i32 %v3_9f34, 7
  %v5_9f34 = inttoptr i32 %v4_9f34 to i8*
  store i8 %v2_9f34, i8* %v5_9f34, align 1
  br label %bb93

bb93:                                             ; preds = %.thread7, %bb92
  %v2_9f3c = load i32, i32* @global_var_1b860.47, align 4
  store i32 %v2_9f3c, i32* %r3.global-to-local, align 4
  %v1_9f40 = load i32, i32* %r0.global-to-local, align 4
  %v2_9f40 = add i32 %v1_9f40, 12
  %v3_9f40 = inttoptr i32 %v2_9f40 to i32*
  store i32 %v2_9f3c, i32* %v3_9f40, align 4
  %v3_9f44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f44, i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* %ip.global-to-local, align 4
  %v4_9f4c = mul i32 %v3_9f44, 16
  %v5_9f4c = add i32 %v4_9f4c, %v2_97e0
  %v6_9f4c = inttoptr i32 %v5_9f4c to i32*
  %v7_9f4c = load i32, i32* %v6_9f4c, align 4
  store i32 %v7_9f4c, i32* %r3.global-to-local, align 4
  %v0_9f50 = load i32, i32* %lr.global-to-local, align 4
  %v1_9f50 = trunc i32 %v0_9f50 to i8
  %v2_9f50 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f50 = add i32 %v2_9f50, 3
  %v4_9f50 = inttoptr i32 %v3_9f50 to i8*
  store i8 %v1_9f50, i8* %v4_9f50, align 1
  %v0_9f54 = load i32, i32* @fp, align 4
  %v1_9f54 = trunc i32 %v0_9f54 to i8
  %v2_9f54 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f54 = add i32 %v2_9f54, 2
  %v4_9f54 = inttoptr i32 %v3_9f54 to i8*
  store i8 %v1_9f54, i8* %v4_9f54, align 1
  %v0_9f58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f58 = load i32, i32* %r0.global-to-local, align 4
  %v2_9f58 = add i32 %v1_9f58, 16
  %v3_9f58 = inttoptr i32 %v2_9f58 to i32*
  store i32 %v0_9f58, i32* %v3_9f58, align 4
  %v0_9f5c = load i32, i32* %r2.global-to-local, align 4
  %v3_9f5c = mul i32 %v0_9f5c, 16
  %v1_9f60 = load i32, i32* %ip.global-to-local, align 4
  %v2_9f60 = add i32 %v1_9f60, %v3_9f5c
  store i32 %v2_9f60, i32* %r2.global-to-local, align 4
  %v1_9f64 = add i32 %v2_9f60, 13
  %v2_9f64 = inttoptr i32 %v1_9f64 to i8*
  %v3_9f64 = load i8, i8* %v2_9f64, align 1
  %v4_9f64 = zext i8 %v3_9f64 to i32
  store i32 %v4_9f64, i32* %r1.global-to-local, align 4
  %v1_9f68 = add i32 %v2_9f60, 12
  %v2_9f68 = inttoptr i32 %v1_9f68 to i8*
  %v3_9f68 = load i8, i8* %v2_9f68, align 1
  %v4_9f68 = zext i8 %v3_9f68 to i32
  store i32 %v0_9f1c, i32* %lr.global-to-local, align 4
  %v4_9f70 = mul nuw nsw i32 %v4_9f64, 256
  %v5_9f70 = or i32 %v4_9f68, %v4_9f70
  store i32 %v5_9f70, i32* %r3.global-to-local, align 4
  %v2_9f74 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f74 = add i32 %v2_9f74, 20
  %v4_9f74 = inttoptr i32 %v3_9f74 to i8*
  store i8 %v3_9f68, i8* %v4_9f74, align 1
  %v0_9f78 = load i32, i32* %r3.global-to-local, align 4
  %v3_9f78 = sdiv i32 %v0_9f78, 256
  store i32 %v3_9f78, i32* %r3.global-to-local, align 4
  %v1_9f7c = trunc i32 %v3_9f78 to i8
  %v2_9f7c = load i32, i32* %lr.global-to-local, align 4
  %v3_9f7c = add i32 %v2_9f7c, 1
  %v4_9f7c = inttoptr i32 %v3_9f7c to i8*
  store i8 %v1_9f7c, i8* %v4_9f7c, align 1
  %v0_9f80 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f80 = add i32 %v0_9f80, 8
  %v2_9f80 = inttoptr i32 %v1_9f80 to i32*
  %v3_9f80 = load i32, i32* %v2_9f80, align 4
  store i32 %v3_9f80, i32* %r1.global-to-local, align 4
  %v0_9f84 = load i32, i32* %lr.global-to-local, align 4
  %v1_9f84 = add i32 %v0_9f84, 13
  %v2_9f84 = inttoptr i32 %v1_9f84 to i8*
  %v3_9f84 = load i8, i8* %v2_9f84, align 1
  %v4_9f84 = zext i8 %v3_9f84 to i32
  store i32 %v4_9f84, i32* %r3.global-to-local, align 4
  %v1_9f88 = add i32 %v0_9f80, 15
  %v2_9f88 = inttoptr i32 %v1_9f88 to i8*
  %v3_9f88 = load i8, i8* %v2_9f88, align 1
  %v4_9f88 = zext i8 %v3_9f88 to i32
  store i32 %v4_9f88, i32* %ip.global-to-local, align 4
  %v0_9f8c = load i32, i32* %r0.global-to-local, align 4
  %v1_9f8c = add i32 %v0_9f8c, 40
  store i32 %v1_9f8c, i32* @r4, align 4
  %v1_9f90 = add i32 %v0_9f80, 14
  %v2_9f90 = inttoptr i32 %v1_9f90 to i8*
  %v3_9f90 = load i8, i8* %v2_9f90, align 1
  %v4_9f90 = zext i8 %v3_9f90 to i32
  store i32 %v4_9f90, i32* %r0.global-to-local, align 4
  %v2_9f94 = add i32 %v0_9f84, 4
  %v3_9f94 = inttoptr i32 %v2_9f94 to i32*
  store i32 %v3_9f80, i32* %v3_9f94, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  %v0_9f9c = load i32, i32* %r3.global-to-local, align 4
  %v1_9f9c = or i32 %v0_9f9c, 1
  store i32 %v1_9f9c, i32* %r3.global-to-local, align 4
  %v0_9fa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fa0 = add i32 %v0_9fa0, 4
  %v2_9fa0 = inttoptr i32 %v1_9fa0 to i32*
  %v3_9fa0 = load i32, i32* %v2_9fa0, align 4
  store i32 %v3_9fa0, i32* %lr.global-to-local, align 4
  %v1_9fa4 = trunc i32 %v1_9f9c to i8
  %v3_9fa4 = add i32 %v0_9f1c, 13
  %v4_9fa4 = inttoptr i32 %v3_9fa4 to i8*
  store i8 %v1_9fa4, i8* %v4_9fa4, align 1
  %v0_9fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fa8 = add i32 %v0_9fa8, 12
  %v2_9fa8 = inttoptr i32 %v1_9fa8 to i8*
  %v3_9fa8 = load i8, i8* %v2_9fa8, align 1
  %v4_9fa8 = zext i8 %v3_9fa8 to i32
  store i32 %v4_9fa8, i32* %r2.global-to-local, align 4
  %v1_9fac = add i32 %v0_9fa8, 13
  %v2_9fac = inttoptr i32 %v1_9fac to i8*
  %v3_9fac = load i8, i8* %v2_9fac, align 1
  %v4_9fac = zext i8 %v3_9fac to i32
  %v0_9fb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fb0 = load i32, i32* %ip.global-to-local, align 4
  %v4_9fb0 = mul i32 %v1_9fb0, 256
  %v5_9fb0 = or i32 %v4_9fb0, %v0_9fb0
  store i32 %v5_9fb0, i32* %r0.global-to-local, align 4
  %tmp108 = urem i8 %v3_9fa8, 16
  %v1_9fb4 = zext i8 %tmp108 to i32
  store i32 %v0_9f1c, i32* %ip.global-to-local, align 4
  %v3_9fbc = sdiv i32 %v5_9fb0, 256
  store i32 %v3_9fbc, i32* %r1.global-to-local, align 4
  %v1_9fc0 = or i32 %v1_9fb4, 128
  store i32 %v1_9fc0, i32* %r2.global-to-local, align 4
  %v1_9fc4 = or i32 %v4_9fac, 16
  store i32 %v1_9fc4, i32* %r3.global-to-local, align 4
  %v1_9fc8 = trunc i32 %v3_9fbc to i8
  %v3_9fc8 = add i32 %v0_9f1c, 3
  %v4_9fc8 = inttoptr i32 %v3_9fc8 to i8*
  store i8 %v1_9fc8, i8* %v4_9fc8, align 1
  %v0_9fcc = load i32, i32* %lr.global-to-local, align 4
  %v1_9fcc = load i32, i32* %ip.global-to-local, align 4
  %v2_9fcc = add i32 %v1_9fcc, 8
  %v3_9fcc = inttoptr i32 %v2_9fcc to i32*
  store i32 %v0_9fcc, i32* %v3_9fcc, align 4
  %v0_9fd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fd0 = trunc i32 %v0_9fd0 to i8
  %v2_9fd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd0 = add i32 %v2_9fd0, 12
  %v4_9fd0 = inttoptr i32 %v3_9fd0 to i8*
  store i8 %v1_9fd0, i8* %v4_9fd0, align 1
  %v0_9fd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fd4 = trunc i32 %v0_9fd4 to i8
  %v2_9fd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd4 = add i32 %v2_9fd4, 13
  %v4_9fd4 = inttoptr i32 %v3_9fd4 to i8*
  store i8 %v1_9fd4, i8* %v4_9fd4, align 1
  %v0_9fd8 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fd8 = trunc i32 %v0_9fd8 to i8
  %v2_9fd8 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd8 = add i32 %v2_9fd8, 2
  %v4_9fd8 = inttoptr i32 %v3_9fd8 to i8*
  store i8 %v1_9fd8, i8* %v4_9fd8, align 1
  %v0_9fdc = call i32 @function_dab8()
  %v1_9fdc = trunc i32 %v0_9fdc to i8
  store i32 %v0_9fdc, i32* %r0.global-to-local, align 4
  store i32 %v0_9f1c, i32* %lr.global-to-local, align 4
  store i32 %v1_98a8, i32* %r1.global-to-local, align 4
  %v3_9fe8 = load i8, i8* %v4_9fa4, align 1
  %v4_9fe8 = zext i8 %v3_9fe8 to i32
  store i32 %v1_9fec, i32* %r2.global-to-local, align 4
  %v1_9ff0 = and i32 %v4_9fe8, 223
  %v5_9ff4 = or i32 %v1_9ff0, %v4_9ff4
  store i32 %v5_9ff4, i32* %r3.global-to-local, align 4
  %v1_9ff8 = trunc i32 %v5_9ff4 to i8
  store i8 %v1_9ff8, i8* %v4_9fa4, align 1
  store i32 %v1_98c8, i32* %ip.global-to-local, align 4
  %v0_a000 = load i32, i32* %lr.global-to-local, align 4
  %v1_a000 = add i32 %v0_a000, 13
  %v2_a000 = inttoptr i32 %v1_a000 to i8*
  %v3_a000 = load i8, i8* %v2_a000, align 1
  %v4_a000 = zext i8 %v3_a000 to i32
  store i32 %v1_a004, i32* %r3.global-to-local, align 4
  %v1_a008 = and i32 %v4_a000, 239
  %v5_a00c = or i32 %v1_a008, %v4_a00c
  store i32 %v5_a00c, i32* %r2.global-to-local, align 4
  %v1_a010 = trunc i32 %v5_a00c to i8
  store i8 %v1_a010, i8* %v2_a000, align 1
  %v0_a014 = load i32, i32* %lr.global-to-local, align 4
  %v1_a014 = add i32 %v0_a014, 13
  %v2_a014 = inttoptr i32 %v1_a014 to i8*
  %v3_a014 = load i8, i8* %v2_a014, align 1
  %v4_a014 = zext i8 %v3_a014 to i32
  store i32 %v1_98e8, i32* %lr.global-to-local, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  store i32 %v1_a020, i32* %r2.global-to-local, align 4
  %v1_a024 = and i32 %v4_a014, 247
  %v5_a028 = or i32 %v1_a024, %v4_a028
  store i32 %v5_a028, i32* %r3.global-to-local, align 4
  %v1_a02c = trunc i32 %v5_a028 to i8
  store i8 %v1_a02c, i8* %v4_9fa4, align 1
  store i32 %v1_9908, i32* %ip.global-to-local, align 4
  %v0_a034 = load i32, i32* %r1.global-to-local, align 4
  %v1_a034 = add i32 %v0_a034, 13
  %v2_a034 = inttoptr i32 %v1_a034 to i8*
  %v3_a034 = load i8, i8* %v2_a034, align 1
  %v4_a034 = zext i8 %v3_a034 to i32
  store i32 %v1_a038, i32* %r3.global-to-local, align 4
  %v1_a03c = and i32 %v4_a034, 251
  %v5_a040 = or i32 %v1_a03c, %v4_a040
  store i32 %v5_a040, i32* %r2.global-to-local, align 4
  %v1_a044 = trunc i32 %v5_a040 to i8
  store i8 %v1_a044, i8* %v2_a034, align 1
  store i32 %v1_9928, i32* @lr, align 4
  %v0_a04c = load i32, i32* %r1.global-to-local, align 4
  %v1_a04c = add i32 %v0_a04c, 13
  %v2_a04c = inttoptr i32 %v1_a04c to i8*
  %v3_a04c = load i8, i8* %v2_a04c, align 1
  %v4_a04c = zext i8 %v3_a04c to i32
  store i32 %v1_a050, i32* %r2.global-to-local, align 4
  %v1_a054 = and i32 %v4_a04c, 253
  %v4_a058 = or i32 %v1_a054, %v3_a058
  store i32 %v4_a058, i32* %r3.global-to-local, align 4
  %v1_a05c = trunc i32 %v4_a058 to i8
  store i8 %v1_a05c, i8* %v2_a04c, align 1
  %v0_a060 = load i32, i32* %r1.global-to-local, align 4
  %v1_a060 = add i32 %v0_a060, 13
  %v2_a060 = inttoptr i32 %v1_a060 to i8*
  %v3_a060 = load i8, i8* %v2_a060, align 1
  %v4_a060 = zext i8 %v3_a060 to i32
  %v1_a068 = and i32 %v4_a060, 254
  %v2_a070 = or i32 %v1_a068, %v1_a06c
  store i32 %v2_a070, i32* %r3.global-to-local, align 4
  store i32 %v0_9f1c, i32* %r2.global-to-local, align 4
  %v4_a078 = sdiv i32 %v0_9fdc, 256
  store i32 %v4_a078, i32* %r1.global-to-local, align 4
  %v1_a07c = trunc i32 %v2_a070 to i8
  store i8 %v1_a07c, i8* %v4_9fa4, align 1
  %v0_a080 = load i32, i32* %r1.global-to-local, align 4
  %v1_a080 = trunc i32 %v0_a080 to i8
  %v2_a080 = load i32, i32* %r2.global-to-local, align 4
  %v3_a080 = add i32 %v2_a080, 15
  %v4_a080 = inttoptr i32 %v3_a080 to i8*
  store i8 %v1_a080, i8* %v4_a080, align 1
  %v3_a084 = load i32, i32* %r2.global-to-local, align 4
  %v4_a084 = add i32 %v3_a084, 14
  %v5_a084 = inttoptr i32 %v4_a084 to i8*
  store i8 %v1_9fdc, i8* %v5_a084, align 1
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  %v0_a08c = load i32, i32* @r4, align 4
  store i32 %v0_a08c, i32* %r0.global-to-local, align 4
  %v2_a090 = call i32 @function_db6c(i32 %v0_a08c, i32 %v6_9960)
  store i32 %v2_a090, i32* %r0.global-to-local, align 4
  store i32 %v6_9960, i32* %ip.global-to-local, align 4
  %v2_a09c = load i32, i32* @r4, align 4
  %v4_a09c = add i32 %v2_a09c, %v6_9960
  %v5_a09c = inttoptr i32 %v4_a09c to i8*
  store i8 0, i8* %v5_a09c, align 1
  %v3_a0a0 = load i32, i32* %stack_var_-40, align 4
  %v1_a0a8 = add i32 %v3_a0a0, 1
  store i32 %v1_a0a8, i32* %r3.global-to-local, align 4
  %v9_a0ac = icmp eq i32 %v1_a0a8, %v1_97b4
  store i1 %v9_a0ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a0a8, i32* %stack_var_-40, align 4
  %v5_a0b4 = icmp slt i32 %v1_a0a8, %v1_97b4
  br i1 %v5_a0b4, label %dec_label_pc_9a1c.outer, label %dec_label_pc_9be0.preheader

; uselistorder directives
  uselistorder i32 %v1_a0a8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9fdc, { 0, 2, 1 }
  uselistorder i32 %v3_9fbc, { 1, 0 }
  uselistorder i32 %v3_9f78, { 1, 0 }
  uselistorder i32 %v0_9f1c, { 3, 4, 5, 0, 6, 1, 7, 8, 2 }
  uselistorder i32 %v3_9e94, { 1, 0 }
  uselistorder i32 %v2_9e7c, { 1, 0 }
  uselistorder i32 %v3_9e60, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9e24, { 1, 0 }
  uselistorder i32 %v2_9e08, { 1, 2, 3, 0 }
  uselistorder i32 %v4_9df4, { 1, 0 }
  uselistorder i32 %v0_9df0, { 0, 2, 1 }
  uselistorder i32 %v4_9de0, { 1, 0 }
  uselistorder i32 %v0_9ddc, { 0, 2, 1 }
  uselistorder i32 %v8_9da4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_9d80, { 2, 0, 3, 1 }
  uselistorder i32 %v0_9d40, { 1, 0 }
  uselistorder i32 %v7_9d1c, { 1, 0, 2 }
  uselistorder i32 %v1_9d00, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_9ca0, { 0, 2, 1 }
  uselistorder i32 %v0_9c88, { 1, 0, 2 }
  uselistorder i32 %v3_9c64, { 1, 0 }
  uselistorder i32 %v3_9c44, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9c30, { 0, 2, 1 }
  uselistorder i1 %v3_9d24, { 1, 0 }
  uselistorder i32 %v1_9bf8, { 3, 2, 0, 1 }
  uselistorder i32 %v1_9bd0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9bb8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9b3c, { 1, 0 }
  uselistorder i32 %v7_9b34, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9b80, { 1, 0 }
  uselistorder i1 %v9_9b64, { 1, 0 }
  uselistorder i32 %v4_9b78, { 1, 0 }
  uselistorder i32 %v4_9b74, { 1, 0 }
  uselistorder i32 %v0_9e28, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_9a7c, { 1, 0, 2 }
  uselistorder i1 %v7_9a2c, { 1, 0 }
  uselistorder i32 %v3_9a28, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_a050, { 1, 0 }
  uselistorder i32 %v1_a038, { 1, 0 }
  uselistorder i32 %v1_a004, { 1, 0 }
  uselistorder i32 %v1_9edc, { 1, 0 }
  uselistorder i32 %v1_9aa4, { 1, 0 }
  uselistorder i32 %v5_9b7c, { 1, 0 }
  uselistorder i32 %v1_a020, { 1, 0 }
  uselistorder i32 %v1_9fec, { 1, 0 }
  uselistorder i1 %v2_9b94, { 1, 0 }
  uselistorder i32 %v1_9b90, { 1, 0 }
  uselistorder i32 %v4_9b8c, { 2, 0, 1 }
  uselistorder i32 %v4_9b70, { 1, 0 }
  uselistorder i32 %v1_9adc, { 2, 1, 0 }
  uselistorder i1 %v3_9dd4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_9a0c, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_9a04, { 1, 0, 2 }
  uselistorder i1 %v2_99f0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_99ec, { 1, 2, 3, 0 }
  uselistorder i32 %v0_99e8, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99dc, { 1, 0 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v3_99a8, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_99a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_9990, { 2, 1, 0 }
  uselistorder i32 %v1_9980, { 1, 0 }
  uselistorder i32 %v6_9960, { 0, 6, 5, 4, 1, 7, 9, 8, 10, 11, 3, 2 }
  uselistorder i32 %v1_9948, { 1, 0 }
  uselistorder i32 %v1_9928, { 1, 2, 0 }
  uselistorder i32 %v1_9908, { 1, 2, 0 }
  uselistorder i32 %v1_98e8, { 1, 2, 0 }
  uselistorder i32 %v1_98c8, { 1, 2, 0 }
  uselistorder i32 %v1_98a8, { 1, 2, 0 }
  uselistorder i32 %v1_9870, { 1, 2, 0 }
  uselistorder i32 %v6_9808, { 2, 1, 3, 0 }
  uselistorder i32 %v2_97f0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_97e0, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_97b4, { 11, 12, 6, 7, 8, 5, 9, 10, 13, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 56, 55, 57, 59, 58, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 22, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 23, 24, 25, 26, 29, 28, 30, 32, 31, 33, 35, 34, 37, 41, 36, 38, 40, 39, 44, 42, 43, 45, 46, 47, 49, 50, 48, 51, 54, 52, 53, 56, 55, 60, 57, 58, 59, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 25, 26, 27, 28, 29, 31, 32, 47, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 9, 10, 8, 11, 12, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9d60, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_9d34, { 1, 0 }
  uselistorder label %dec_label_pc_9c20, { 1, 0 }
  uselistorder label %dec_label_pc_9be0, { 1, 0 }
  uselistorder label %dec_label_pc_9b04, { 2, 1, 3, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_9a38, { 1, 0 }
  uselistorder label %dec_label_pc_9a1c, { 1, 0 }
}

define i32 @function_a0c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a0c0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_a0c0 = load i32, i32* @sb, align 4
  %v24_a0c0 = load i32, i32* @fp, align 4
  %v1_a0c4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a0e0 = urem i32 %arg4, 256
  store i32 %v1_a0e0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a0f0 = call i32 @function_1157c(i32 %v1_a0c4, i32 4)
  %v0_a0f4 = load i32, i32* @r5, align 4
  store i32 %v0_a0f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a100 = load i32, i32* @r7, align 4
  store i32 %v0_a100, i32* %r3.global-to-local, align 4
  %v0_a104 = load i32, i32* @r4, align 4
  %v5_a108 = inttoptr i32 %v0_a0f4 to i32*
  %v6_a108 = call i32 @function_829c(i32 %v0_a104, i32* %v5_a108, i32 2, i32 %v0_a100, i32 %v2_a0f0)
  %v1_a114 = urem i32 %v6_a108, 256
  store i32 %v1_a114, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a120 = load i32, i32* @r5, align 4
  store i32 %v0_a120, i32* %r1.global-to-local, align 4
  %v0_a124 = load i32, i32* @r4, align 4
  %v5_a128 = trunc i32 %v6_a108 to i8
  %v6_a12c = inttoptr i32 %v0_a120 to i32*
  %v7_a12c = call i32 @function_829c(i32 %v0_a124, i32* %v6_a12c, i32 3, i32 65535, i32 %v6_a108)
  %v0_a130 = load i32, i32* @r5, align 4
  store i32 %v0_a130, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a140 = load i32, i32* @r4, align 4
  %v5_a144 = inttoptr i32 %v0_a130 to i32*
  %v6_a144 = call i32 @function_829c(i32 %v0_a140, i32* %v5_a144, i32 4, i32 64, i32 %v7_a12c)
  %v1_a14c = urem i32 %v6_a144, 256
  store i32 %v1_a14c, i32* %ip.global-to-local, align 4
  %v0_a150 = load i32, i32* @r5, align 4
  store i32 %v0_a150, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_a158 = load i32, i32* @r7, align 4
  store i32 %v0_a158, i32* %r3.global-to-local, align 4
  %v0_a15c = load i32, i32* @r4, align 4
  %v5_a160 = trunc i32 %v6_a144 to i8
  %v6_a164 = inttoptr i32 %v0_a150 to i32*
  %v7_a164 = call i32 @function_829c(i32 %v0_a15c, i32* %v6_a164, i32 5, i32 %v0_a158, i32 %v6_a144)
  %v1_a170 = urem i32 %v7_a164, 256
  store i32 %v1_a170, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a17c = load i32, i32* @r5, align 4
  store i32 %v0_a17c, i32* %r1.global-to-local, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v5_a188 = inttoptr i32 %v0_a17c to i32*
  %v6_a188 = call i32 @function_829c(i32 %v0_a180, i32* %v5_a188, i32 6, i32 65535, i32 %v1_a170)
  %v0_a190 = load i32, i32* @r5, align 4
  store i32 %v0_a190, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a188, i32* %sb.global-to-local, align 4
  %v0_a1a0 = load i32, i32* @r4, align 4
  %v5_a1a4 = inttoptr i32 %v0_a190 to i32*
  %v6_a1a4 = call i32 @function_829c(i32 %v0_a1a0, i32* %v5_a1a4, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a1b0 = load i32, i32* @r5, align 4
  store i32 %v0_a1b0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r4, align 4
  %v5_a1c0 = inttoptr i32 %v0_a1b0 to i32*
  %v6_a1c0 = call i32 @function_829c(i32 %v0_a1bc, i32* %v5_a1c0, i32 16, i32 65535, i32 %v6_a1a4)
  %v0_a1cc = load i32, i32* @r5, align 4
  store i32 %v0_a1cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a1d8 = load i32, i32* @r4, align 4
  %v5_a1dc = inttoptr i32 %v0_a1cc to i32*
  %v6_a1dc = call i32 @function_829c(i32 %v0_a1d8, i32* %v5_a1dc, i32 17, i32 65535, i32 %v6_a1c0)
  %v0_a1e0 = load i32, i32* @r5, align 4
  store i32 %v0_a1e0, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a1ec = load i32, i32* @r7, align 4
  store i32 %v0_a1ec, i32* %r3.global-to-local, align 4
  %v0_a1f0 = load i32, i32* @r4, align 4
  %v5_a1f4 = inttoptr i32 %v0_a1e0 to i32*
  %v6_a1f4 = call i32 @function_829c(i32 %v0_a1f0, i32* %v5_a1f4, i32 10, i32 %v0_a1ec, i32 %v6_a1dc)
  %v0_a1f8 = load i32, i32* @r5, align 4
  store i32 %v0_a1f8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  %v5_a20c = inttoptr i32 %v0_a1f8 to i32*
  %v6_a20c = call i32 @function_829c(i32 %v0_a208, i32* %v5_a20c, i32 11, i32 1, i32 %v6_a1f4)
  %v0_a210 = load i32, i32* @r5, align 4
  store i32 %v0_a210, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a21c = load i32, i32* @r7, align 4
  store i32 %v0_a21c, i32* %r3.global-to-local, align 4
  %v0_a220 = load i32, i32* @r4, align 4
  %v5_a224 = inttoptr i32 %v0_a210 to i32*
  %v6_a224 = call i32 @function_829c(i32 %v0_a220, i32* %v5_a224, i32 12, i32 %v0_a21c, i32 %v6_a20c)
  %v0_a228 = load i32, i32* @r5, align 4
  store i32 %v0_a228, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_a234 = load i32, i32* @r7, align 4
  store i32 %v0_a234, i32* %r3.global-to-local, align 4
  %v0_a238 = load i32, i32* @r4, align 4
  %v5_a23c = inttoptr i32 %v0_a228 to i32*
  %v6_a23c = call i32 @function_829c(i32 %v0_a238, i32* %v5_a23c, i32 13, i32 %v0_a234, i32 %v6_a224)
  %v0_a240 = load i32, i32* @r5, align 4
  store i32 %v0_a240, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_a24c = load i32, i32* @r7, align 4
  store i32 %v0_a24c, i32* %r3.global-to-local, align 4
  %v0_a250 = load i32, i32* @r4, align 4
  %v5_a254 = inttoptr i32 %v0_a240 to i32*
  %v6_a254 = call i32 @function_829c(i32 %v0_a250, i32* %v5_a254, i32 14, i32 %v0_a24c, i32 %v6_a23c)
  %v0_a258 = load i32, i32* @r5, align 4
  store i32 %v0_a258, i32* %r1.global-to-local, align 4
  %v0_a260 = load i32, i32* @r7, align 4
  store i32 %v0_a260, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_a268 = load i32, i32* @r4, align 4
  %v5_a26c = inttoptr i32 %v0_a258 to i32*
  %v6_a26c = call i32 @function_829c(i32 %v0_a268, i32* %v5_a26c, i32 15, i32 %v0_a260, i32 %v6_a254)
  %v0_a270 = load i32, i32* @r5, align 4
  store i32 %v0_a270, i32* %r1.global-to-local, align 4
  %v0_a274 = load i32, i32* @r7, align 4
  store i32 %v0_a274, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a26c, i32* %fp.global-to-local, align 4
  %v0_a280 = load i32, i32* @r4, align 4
  %v5_a284 = inttoptr i32 %v0_a270 to i32*
  %v6_a284 = call i32 @function_829c(i32 %v0_a280, i32* %v5_a284, i32 %v0_a274, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a290 = load i32, i32* @r5, align 4
  store i32 %v0_a290, i32* %r1.global-to-local, align 4
  store i32 %v6_a284, i32* @sl, align 4
  %v0_a298 = load i32, i32* @r4, align 4
  %v5_a29c = inttoptr i32 %v0_a290 to i32*
  %v6_a29c = call i32 @function_829c(i32 %v0_a298, i32* %v5_a29c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_a2a8 = load i32, i32* @global_var_1b860.47, align 4
  store i32 %v2_a2a8, i32* %r3.global-to-local, align 4
  %v1_a2ac = urem i32 %v6_a29c, 256
  store i32 %v1_a2ac, i32* %ip.global-to-local, align 4
  %v0_a2b0 = load i32, i32* @r5, align 4
  store i32 %v0_a2b0, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_a2b8 = load i32, i32* @r4, align 4
  %v5_a2c0 = inttoptr i32 %v0_a2b0 to i32*
  %v6_a2c0 = call i32 @function_8230(i32 %v0_a2b8, i32* %v5_a2c0, i32 19, i32 %v2_a2a8, i32 %v1_a2ac)
  %v0_a2c8 = load i32, i32* @r7, align 4
  %v1_a2cc = inttoptr i32 %v0_a2c8 to i32*
  %v2_a2cc = call i32 @function_10c8c(i32* %v1_a2cc)
  %v1_a2d0 = load i32, i32* @r6, align 4
  %v2_a2d0 = add i32 %v1_a2d0, %v2_a2cc
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a2e4 = call i32 @function_11290(i32 2, i32 3, i32 6)
  %v7_a2e8 = icmp eq i32 %v3_a2e4, -1
  store i1 %v7_a2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2e8, label %dec_label_pc_a868, label %dec_label_pc_a2f4

dec_label_pc_a2f4:                                ; preds = %dec_label_pc_a0c0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a2fc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a2fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a304 = load i32, i32* @r7, align 4
  store i32 %v0_a304, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a310 = call i32 @function_11260(i32 %v3_a2e4, i32 %v0_a304, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_a314 = icmp eq i32 %v6_a310, -1
  store i1 %v7_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a314, label %dec_label_pc_a870, label %dec_label_pc_a31c

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a2f4
  store i32 %v1_a0c4, i32* %r3.global-to-local, align 4
  %v3_a328 = mul i32 %v7_a12c, 65536
  store i32 %v3_a328, i32* @r4, align 4
  %v0_a32c = load i32, i32* %sb.global-to-local, align 4
  %v3_a32c = mul i32 %v0_a32c, 65536
  store i32 %v3_a32c, i32* %sb.global-to-local, align 4
  %v3_a334 = urem i32 %v7_a12c, 65536
  store i32 %v3_a334, i32* %ip.global-to-local, align 4
  %v3_a338 = urem i32 %v0_a32c, 65536
  store i32 %v3_a338, i32* %r1.global-to-local, align 4
  %v3_a33c = urem i32 %v6_a1a4, 65536
  store i32 %v3_a33c, i32* %r2.global-to-local, align 4
  %v2_a340 = icmp eq i32 %v1_a0c4, 0
  store i1 %v2_a340, i1* %cpsr_z.global-to-local, align 1
  %v0_a344 = load i32, i32* @r7, align 4
  store i32 %v0_a344, i32* %stack_var_-40, align 4
  br i1 %v2_a340, label %dec_label_pc_a5dc.preheader, label %dec_label_pc_a358

dec_label_pc_a358:                                ; preds = %dec_label_pc_a31c
  %v0_a368 = load i32, i32* @sl, align 4
  %v1_a370 = urem i32 %v0_a32c, 256
  %tmp73 = udiv i32 %v7_a12c, 256
  %v1_a388 = urem i32 %v6_a1a4, 256
  store i32 %v1_a388, i32* @lr, align 4
  %tmp74 = mul i32 %v6_a1c0, 256
  %v1_a398 = and i32 %tmp74, 65280
  %tmp76 = udiv i32 %v6_a1c0, 256
  %v4_a39c = urem i32 %tmp76, 256
  %v5_a39c = or i32 %v4_a39c, %v1_a398
  %v1_a3b8 = urem i32 %v6_a1f4, 2
  %v1_a3bc = urem i32 %v6_a20c, 2
  %v1_a3c0 = urem i32 %v6_a224, 2
  %v1_a3c4 = urem i32 %v6_a23c, 2
  %v1_a368 = mul i32 %v0_a368, 65536
  %tmp93 = add i32 %v1_a368, 2621440
  %v3_a3e4 = sdiv i32 %tmp93, 16777216
  %sext12 = mul i32 %tmp73, 16777216
  %v7_a3e4 = sdiv i32 %sext12, 16777216
  %v3_a3e8 = mul nuw nsw i32 %v1_a370, 256
  %tmp77 = udiv i32 %v6_a1a4, 256
  %v3_a3ec = urem i32 %tmp77, 256
  %v1_a3f0 = urem i32 %v6_a254, 2
  store i32 %v1_a3f0, i32* %ip.global-to-local, align 4
  %v1_a3f4 = urem i32 %v6_a224, 256
  store i32 %v1_a3f4, i32* %r1.global-to-local, align 4
  %v3_a3f8 = ashr i32 %tmp93, 31
  store i32 %v3_a3f8, i32* %r2.global-to-local, align 4
  %v3_a3fc = ashr i32 %sext12, 31
  store i32 %v3_a3fc, i32* %r3.global-to-local, align 4
  %tmp94 = udiv i32 %v0_a32c, 256
  %v4_a400 = urem i32 %tmp94, 256
  %v5_a400 = or i32 %v4_a400, %v3_a3e8
  store i32 %v5_a400, i32* @r4, align 4
  %v0_a404 = load i32, i32* %fp.global-to-local, align 4
  %v1_a404 = urem i32 %v0_a404, 2
  %v4_a408 = mul nuw nsw i32 %v1_a388, 256
  %v5_a408 = or i32 %v4_a408, %v3_a3ec
  store i32 %v5_a408, i32* @r5, align 4
  %v5_a414 = trunc i32 %v3_a3f8 to i8
  store i32 %v0_a344, i32* @r6, align 4
  store i32 %v1_a370, i32* @fp, align 4
  store i32 %v1_a388, i32* @sb, align 4
  %tmp = sub nsw i32 0, %v1_a3b8
  %v4_a4f8 = and i32 %tmp, 32
  %tmp95 = sub nsw i32 0, %v1_a3bc
  %v4_a50c = and i32 %tmp95, 16
  %tmp96 = sub nsw i32 0, %v1_a3c0
  %v4_a520 = and i32 %tmp96, 8
  %tmp97 = sub nsw i32 0, %v1_a3c4
  %v4_a534 = and i32 %tmp97, 4
  %tmp98 = sub nsw i32 0, %v1_a3f0
  %v3_a548 = and i32 %tmp98, 2
  %v2_a598 = icmp eq i32 %v1_a3f4, 0
  br label %dec_label_pc_a430

dec_label_pc_a430:                                ; preds = %.thread11, %dec_label_pc_a358
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a43c = call i32 @function_1157c(i32 1510, i32 1)
  store i32 %v2_a0f0, i32* %ip.global-to-local, align 4
  %v3_a444 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a444, i32* %r3.global-to-local, align 4
  %v2_a448 = load i32, i32* @r6, align 4
  %v5_a448 = mul i32 %v2_a448, 4
  %v6_a448 = add i32 %v5_a448, %v2_a0f0
  %v7_a448 = inttoptr i32 %v6_a448 to i32*
  store i32 %v2_a43c, i32* %v7_a448, align 4
  %v0_a44c = load i32, i32* %ip.global-to-local, align 4
  %v1_a44c = load i32, i32* %r3.global-to-local, align 4
  %v4_a44c = mul i32 %v1_a44c, 4
  %v5_a44c = add i32 %v4_a44c, %v0_a44c
  %v6_a44c = inttoptr i32 %v5_a44c to i32*
  %v7_a44c = load i32, i32* %v6_a44c, align 4
  store i32 %v7_a44c, i32* %r1.global-to-local, align 4
  %v1_a450 = inttoptr i32 %v7_a44c to i8*
  %v2_a450 = load i8, i8* %v1_a450, align 1
  %tmp99 = urem i8 %v2_a450, 16
  %v1_a454 = zext i8 %tmp99 to i32
  %v1_a458 = or i32 %v1_a454, 64
  store i32 %v1_a458, i32* %r2.global-to-local, align 4
  %v1_a45c = trunc i32 %v1_a458 to i8
  store i8 %v1_a45c, i8* %v1_a450, align 1
  %v0_a460 = load i32, i32* %r1.global-to-local, align 4
  %v1_a460 = inttoptr i32 %v0_a460 to i8*
  %v2_a460 = load i8, i8* %v1_a460, align 1
  %v1_a464 = and i8 %v2_a460, -16
  %v1_a468 = or i8 %v1_a464, 5
  store i32 %v1_a170, i32* %r2.global-to-local, align 4
  store i8 %v1_a468, i8* %v1_a460, align 1
  %v2_a478 = load i32, i32* %r1.global-to-local, align 4
  %v3_a478 = add i32 %v2_a478, 1
  %v4_a478 = inttoptr i32 %v3_a478 to i8*
  store i8 %v5_a128, i8* %v4_a478, align 1
  store i32 %v6_a144, i32* %ip.global-to-local, align 4
  %v2_a480 = load i32, i32* %r1.global-to-local, align 4
  %v3_a480 = add i32 %v2_a480, 8
  %v4_a480 = inttoptr i32 %v3_a480 to i8*
  store i8 %v5_a160, i8* %v4_a480, align 1
  %v0_a484 = load i32, i32* %r2.global-to-local, align 4
  %v2_a484 = icmp eq i32 %v0_a484, 0
  store i1 %v2_a484, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a3f8, i32* %r3.global-to-local, align 4
  store i32 %v3_a3e4, i32* %r2.global-to-local, align 4
  %v2_a490 = load i32, i32* %r1.global-to-local, align 4
  %v3_a490 = add i32 %v2_a490, 3
  %v4_a490 = inttoptr i32 %v3_a490 to i8*
  store i8 %v5_a414, i8* %v4_a490, align 1
  %v0_a494 = load i32, i32* %r2.global-to-local, align 4
  %v1_a494 = trunc i32 %v0_a494 to i8
  %v2_a494 = load i32, i32* %r1.global-to-local, align 4
  %v3_a494 = add i32 %v2_a494, 2
  %v4_a494 = inttoptr i32 %v3_a494 to i8*
  store i8 %v1_a494, i8* %v4_a494, align 1
  %v0_a498 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a498, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_a430
  store i32 %v3_a3fc, i32* %r2.global-to-local, align 4
  %extract.t91 = trunc i32 %v3_a3fc to i8
  br label %bb78

bb:                                               ; preds = %dec_label_pc_a430
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_a3fc, i32* %r2.global-to-local, align 4
  %v3_a4a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_a4a0 = add i32 %v3_a4a0, 6
  %v5_a4a0 = inttoptr i32 %v4_a4a0 to i8*
  store i8 64, i8* %v5_a4a0, align 1
  %v0_a4a8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t92 = trunc i32 %v0_a4a8.pre to i8
  br label %bb78

bb78:                                             ; preds = %.thread, %bb
  %v3_a3fc.sink.off0 = phi i8 [ %extract.t91, %.thread ], [ %extract.t92, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a4a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4a8 = add i32 %v2_a4a8, 5
  %v4_a4a8 = inttoptr i32 %v3_a4a8 to i8*
  store i8 %v3_a3fc.sink.off0, i8* %v4_a4a8, align 1
  store i32 %v7_a3e4, i32* %ip.global-to-local, align 4
  %v0_a4b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4b0, label %bb80, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %bb78, %bb79
  %v0_a4b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4b4 = trunc i32 %v0_a4b4 to i8
  %v2_a4b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4b4 = add i32 %v2_a4b4, 9
  %v4_a4b4 = inttoptr i32 %v3_a4b4 to i8*
  store i8 %v1_a4b4, i8* %v4_a4b4, align 1
  %v0_a4b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4b8, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a4b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a4b8 = trunc i32 %v1_a4b8 to i8
  %v3_a4b8 = load i32, i32* %r1.global-to-local, align 4
  %v4_a4b8 = add i32 %v3_a4b8, 7
  %v5_a4b8 = inttoptr i32 %v4_a4b8 to i8*
  store i8 %v2_a4b8, i8* %v5_a4b8, align 1
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  %v3_a4bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a4bc, i32* %r2.global-to-local, align 4
  %v0_a4c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a4c0 = trunc i32 %v0_a4c0 to i8
  %v2_a4c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4c0 = add i32 %v2_a4c0, 4
  %v4_a4c0 = inttoptr i32 %v3_a4c0 to i8*
  store i8 %v1_a4c0, i8* %v4_a4c0, align 1
  store i32 %v6_a2c0, i32* %ip.global-to-local, align 4
  %v0_a4c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a4c8 = mul i32 %v0_a4c8, 32
  store i32 %v3_a4c8, i32* %r3.global-to-local, align 4
  %v1_a4cc = load i32, i32* %r1.global-to-local, align 4
  %v2_a4cc = add i32 %v1_a4cc, 12
  %v3_a4cc = inttoptr i32 %v2_a4cc to i32*
  store i32 %v6_a2c0, i32* %v3_a4cc, align 4
  %v0_a4d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4d0 = load i32, i32* %r2.global-to-local, align 4
  %tmp100 = mul i32 %v1_a4d0, -8
  %v5_a4d0 = add i32 %v0_a4d0, %tmp100
  %v1_a4d4 = load i32, i32* @r8, align 4
  %v2_a4d4 = add i32 %v1_a4d4, %v5_a4d0
  store i32 %v2_a4d4, i32* %r3.global-to-local, align 4
  %v1_a4d8 = add i32 %v2_a4d4, 16
  %v2_a4d8 = inttoptr i32 %v1_a4d8 to i32*
  %v3_a4d8 = load i32, i32* %v2_a4d8, align 4
  store i32 %v3_a4d8, i32* %r2.global-to-local, align 4
  %v0_a4dc = load i32, i32* @r4, align 4
  %v1_a4dc = trunc i32 %v0_a4dc to i8
  %v2_a4dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a4dc = add i32 %v2_a4dc, 20
  %v4_a4dc = inttoptr i32 %v3_a4dc to i8*
  store i8 %v1_a4dc, i8* %v4_a4dc, align 1
  %v0_a4e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a4e0 = add i32 %v1_a4e0, 16
  %v3_a4e0 = inttoptr i32 %v2_a4e0 to i32*
  store i32 %v0_a4e0, i32* %v3_a4e0, align 4
  %v0_a4e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a4e4 = add i32 %v0_a4e4, 20
  store i32 %v1_a4e4, i32* @r6, align 4
  %v1_a4e8 = add i32 %v0_a4e4, 33
  %v2_a4e8 = inttoptr i32 %v1_a4e8 to i8*
  %v3_a4e8 = load i8, i8* %v2_a4e8, align 1
  %v4_a4e8 = zext i8 %v3_a4e8 to i32
  %v1_a4ec = add i32 %v0_a4e4, 40
  store i32 %v1_a4ec, i32* @r7, align 4
  store i32 %v1_a3b8, i32* %r1.global-to-local, align 4
  %v1_a4f4 = and i32 %v4_a4e8, 223
  %v5_a4f8 = or i32 %v1_a4f4, %v4_a4f8
  store i32 %v5_a4f8, i32* %r3.global-to-local, align 4
  %v1_a4fc = trunc i32 %v5_a4f8 to i8
  store i8 %v1_a4fc, i8* %v2_a4e8, align 1
  %v0_a500 = load i32, i32* @r6, align 4
  %v1_a500 = add i32 %v0_a500, 13
  %v2_a500 = inttoptr i32 %v1_a500 to i8*
  %v3_a500 = load i8, i8* %v2_a500, align 1
  %v4_a500 = zext i8 %v3_a500 to i32
  store i32 %v1_a3bc, i32* %r3.global-to-local, align 4
  %v1_a508 = and i32 %v4_a500, 239
  %v5_a50c = or i32 %v1_a508, %v4_a50c
  store i32 %v5_a50c, i32* %r2.global-to-local, align 4
  %v1_a510 = trunc i32 %v5_a50c to i8
  store i8 %v1_a510, i8* %v2_a500, align 1
  %v0_a514 = load i32, i32* @r6, align 4
  %v1_a514 = add i32 %v0_a514, 13
  %v2_a514 = inttoptr i32 %v1_a514 to i8*
  %v3_a514 = load i8, i8* %v2_a514, align 1
  %v4_a514 = zext i8 %v3_a514 to i32
  store i32 %v1_a3c0, i32* %ip.global-to-local, align 4
  %v1_a51c = and i32 %v4_a514, 247
  %v5_a520 = or i32 %v1_a51c, %v4_a520
  store i32 %v5_a520, i32* %r3.global-to-local, align 4
  %v1_a524 = trunc i32 %v5_a520 to i8
  store i8 %v1_a524, i8* %v2_a514, align 1
  %v0_a528 = load i32, i32* @r6, align 4
  %v1_a528 = add i32 %v0_a528, 13
  %v2_a528 = inttoptr i32 %v1_a528 to i8*
  %v3_a528 = load i8, i8* %v2_a528, align 1
  %v4_a528 = zext i8 %v3_a528 to i32
  store i32 %v1_a3c4, i32* %r1.global-to-local, align 4
  %v1_a530 = and i32 %v4_a528, 251
  %v5_a534 = or i32 %v1_a530, %v4_a534
  store i32 %v5_a534, i32* %r2.global-to-local, align 4
  %v1_a538 = trunc i32 %v5_a534 to i8
  store i8 %v1_a538, i8* %v2_a528, align 1
  %v0_a53c = load i32, i32* @r6, align 4
  %v1_a53c = add i32 %v0_a53c, 13
  %v2_a53c = inttoptr i32 %v1_a53c to i8*
  %v3_a53c = load i8, i8* %v2_a53c, align 1
  %v4_a53c = zext i8 %v3_a53c to i32
  store i32 %v1_a3f0, i32* %r2.global-to-local, align 4
  %v1_a544 = and i32 %v4_a53c, 253
  %v4_a548 = or i32 %v1_a544, %v3_a548
  store i32 %v4_a548, i32* %r3.global-to-local, align 4
  %v1_a54c = trunc i32 %v4_a548 to i8
  store i8 %v1_a54c, i8* %v2_a53c, align 1
  %v0_a550 = load i32, i32* @r6, align 4
  %v1_a550 = add i32 %v0_a550, 12
  %v2_a550 = inttoptr i32 %v1_a550 to i8*
  %v3_a550 = load i8, i8* %v2_a550, align 1
  %v4_a550 = zext i8 %v3_a550 to i32
  store i32 %v4_a550, i32* %r2.global-to-local, align 4
  %v1_a554 = add i32 %v0_a550, 13
  %v2_a554 = inttoptr i32 %v1_a554 to i8*
  %v3_a554 = load i8, i8* %v2_a554, align 1
  %v4_a554 = zext i8 %v3_a554 to i32
  store i32 %v1_a404, i32* %ip.global-to-local, align 4
  %tmp101 = urem i8 %v3_a550, 16
  %v1_a55c = zext i8 %tmp101 to i32
  %v1_a560 = and i32 %v4_a554, 254
  %v2_a564 = or i32 %v1_a560, %v1_a404
  store i32 %v2_a564, i32* %r3.global-to-local, align 4
  %v1_a568 = or i32 %v1_a55c, 80
  store i32 %v1_a568, i32* %r2.global-to-local, align 4
  %v1_a56c = trunc i32 %v1_a568 to i8
  store i8 %v1_a56c, i8* %v2_a550, align 1
  %v0_a570 = load i32, i32* %r3.global-to-local, align 4
  %v1_a570 = trunc i32 %v0_a570 to i8
  %v2_a570 = load i32, i32* @r6, align 4
  %v3_a570 = add i32 %v2_a570, 13
  %v4_a570 = inttoptr i32 %v3_a570 to i8*
  store i8 %v1_a570, i8* %v4_a570, align 1
  store i32 %v5_a39c, i32* %r1.global-to-local, align 4
  %v0_a578 = load i32, i32* @fp, align 4
  %v1_a578 = trunc i32 %v0_a578 to i8
  %v2_a578 = load i32, i32* @r6, align 4
  %v3_a578 = add i32 %v2_a578, 1
  %v4_a578 = inttoptr i32 %v3_a578 to i8*
  store i8 %v1_a578, i8* %v4_a578, align 1
  %v0_a57c = load i32, i32* %r1.global-to-local, align 4
  %v1_a57c = load i32, i32* @r6, align 4
  %v2_a57c = add i32 %v1_a57c, 4
  %v3_a57c = inttoptr i32 %v2_a57c to i32*
  store i32 %v0_a57c, i32* %v3_a57c, align 4
  %v0_a580 = load i32, i32* @r5, align 4
  %v1_a580 = trunc i32 %v0_a580 to i8
  %v2_a580 = load i32, i32* @r6, align 4
  %v3_a580 = add i32 %v2_a580, 2
  %v4_a580 = inttoptr i32 %v3_a580 to i8*
  store i8 %v1_a580, i8* %v4_a580, align 1
  %v0_a584 = load i32, i32* @sb, align 4
  %v1_a584 = trunc i32 %v0_a584 to i8
  %v2_a584 = load i32, i32* @r6, align 4
  %v3_a584 = add i32 %v2_a584, 3
  %v4_a584 = inttoptr i32 %v3_a584 to i8*
  store i8 %v1_a584, i8* %v4_a584, align 1
  %v0_a588 = call i32 @function_dab8()
  store i32 %v1_a3f4, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_a588, 16777216
  %v1_a590 = sdiv i32 %sext, 16777216
  store i32 %v1_a590, i32* %r2.global-to-local, align 4
  %v3_a594 = ashr i32 %sext, 31
  store i32 %v3_a594, i32* %r3.global-to-local, align 4
  store i1 %v2_a598, i1* %cpsr_z.global-to-local, align 1
  %v1_a59c = trunc i32 %v3_a594 to i8
  %v2_a59c = load i32, i32* @r6, align 4
  %v3_a59c = add i32 %v2_a59c, 15
  %v4_a59c = inttoptr i32 %v3_a59c to i8*
  store i8 %v1_a59c, i8* %v4_a59c, align 1
  %v0_a5a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5a0, label %.thread11, label %bb83

bb83:                                             ; preds = %bb82
  %v1_a5a0 = load i32, i32* @r6, align 4
  %v2_a5a0 = add i32 %v1_a5a0, 13
  %v3_a5a0 = inttoptr i32 %v2_a5a0 to i8*
  %v4_a5a0 = load i8, i8* %v3_a5a0, align 1
  %v5_a5a0 = zext i8 %v4_a5a0 to i32
  %v2_a5a4 = or i32 %v5_a5a0, 8
  store i32 %v2_a5a4, i32* %r3.global-to-local, align 4
  %v2_a5a8 = trunc i32 %v2_a5a4 to i8
  store i8 %v2_a5a8, i8* %v3_a5a0, align 1
  br label %.thread11

.thread11:                                        ; preds = %bb82, %bb83
  %v0_a5ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a5ac = trunc i32 %v0_a5ac to i8
  %v2_a5ac = load i32, i32* @r6, align 4
  %v3_a5ac = add i32 %v2_a5ac, 14
  %v4_a5ac = inttoptr i32 %v3_a5ac to i8*
  store i8 %v1_a5ac, i8* %v4_a5ac, align 1
  %v0_a5b0 = load i32, i32* @sl, align 4
  store i32 %v0_a5b0, i32* %r1.global-to-local, align 4
  %v0_a5b4 = load i32, i32* @r7, align 4
  %v2_a5b8 = call i32 @function_db6c(i32 %v0_a5b4, i32 %v0_a5b0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a5c0 = load i32, i32* @r7, align 4
  %v3_a5c0 = load i32, i32* @sl, align 4
  %v4_a5c0 = add i32 %v3_a5c0, %v2_a5c0
  %v5_a5c0 = inttoptr i32 %v4_a5c0 to i8*
  store i8 0, i8* %v5_a5c0, align 1
  %v3_a5c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a5c4, i32* %r2.global-to-local, align 4
  store i32 %v1_a0c4, i32* %r1.global-to-local, align 4
  %v1_a5cc = add i32 %v3_a5c4, 1
  store i32 %v1_a5cc, i32* @r6, align 4
  %v9_a5d0 = icmp eq i32 %v1_a0c4, %v1_a5cc
  store i1 %v9_a5d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a5cc, i32* %stack_var_-40, align 4
  %v8_a5d8 = icmp sgt i32 %v1_a0c4, %v1_a5cc
  br i1 %v8_a5d8, label %dec_label_pc_a430, label %dec_label_pc_a5dc.preheader

dec_label_pc_a5dc.preheader:                      ; preds = %.thread11, %dec_label_pc_a31c
  %v2_a61c = icmp eq i32 %v6_a2c0, -1
  %v7_a61c = icmp eq i32 %v6_a2c0, -1
  %v3_a7b4 = icmp eq i32 %v3_a334, 65535
  %v2_a830 = icmp eq i32 %v1_a2ac, 0
  br label %dec_label_pc_a5dc

dec_label_pc_a5dc:                                ; preds = %dec_label_pc_a5dc.preheader, %dec_label_pc_a854
  store i32 %v1_a0c4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_a340, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_a340, label %dec_label_pc_a854, label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_a5dc
  %v0_a5f0 = load i32, i32* @sl, align 4
  %v1_a5f0 = add i32 %v0_a5f0, 20
  store i32 %v1_a5f0, i32* @sb, align 4
  %tmp84 = mul i32 %v1_a5f0, 256
  %v1_a5fc = and i32 %tmp84, 65280
  store i32 %v1_a5fc, i32* %r3.global-to-local, align 4
  %tmp85 = udiv i32 %v1_a5f0, 256
  %v4_a600 = urem i32 %tmp85, 256
  %v5_a600 = or i32 %v4_a600, %v1_a5fc
  store i32 %v5_a600, i32* %r2.global-to-local, align 4
  %v1_a608 = add i32 %v0_a5f0, 40
  store i32 %v1_a608, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_a718

dec_label_pc_a618:                                ; preds = %dec_label_pc_a718
  store i32 %v6_a2c0, i32* %r1.global-to-local, align 4
  store i1 %v7_a61c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a61c, label %dec_label_pc_a7a4, label %dec_label_pc_a624

dec_label_pc_a624:                                ; preds = %dec_label_pc_a73c, %dec_label_pc_a618
  store i32 %v3_a334, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a7b4, label %dec_label_pc_a7c0, label %dec_label_pc_a638

dec_label_pc_a638:                                ; preds = %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge, %dec_label_pc_a624
  %v1_a63c = phi i32 [ %v1_a63c.pre, %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge ], [ 65535, %dec_label_pc_a624 ]
  store i32 %v3_a338, i32* %r3.global-to-local, align 4
  %v9_a63c = icmp eq i32 %v3_a338, %v1_a63c
  store i1 %v9_a63c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a63c, label %dec_label_pc_a7dc, label %dec_label_pc_a644

dec_label_pc_a644:                                ; preds = %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge, %dec_label_pc_a638
  %v1_a648 = phi i32 [ %v1_a648.pre, %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge ], [ %v1_a63c, %dec_label_pc_a638 ]
  store i32 %v3_a33c, i32* %ip.global-to-local, align 4
  %v9_a648 = icmp eq i32 %v3_a33c, %v1_a648
  store i1 %v9_a648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a648, label %dec_label_pc_a7f8, label %dec_label_pc_a650

dec_label_pc_a650:                                ; preds = %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge, %dec_label_pc_a644
  %v1_a654 = phi i32 [ %v1_a654.pre, %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge ], [ %v1_a648, %dec_label_pc_a644 ]
  store i32 %v6_a1c0, i32* %r1.global-to-local, align 4
  %v9_a654 = icmp eq i32 %v6_a1c0, %v1_a654
  store i1 %v9_a654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a654, label %dec_label_pc_a814, label %dec_label_pc_a65c

dec_label_pc_a65c:                                ; preds = %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge, %dec_label_pc_a650
  %v1_a660 = phi i32 [ %v1_a660.pre, %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge ], [ %v1_a654, %dec_label_pc_a650 ]
  store i32 %v6_a1dc, i32* %r2.global-to-local, align 4
  %v9_a660 = icmp eq i32 %v6_a1dc, %v1_a660
  store i1 %v9_a660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a660, label %dec_label_pc_a828, label %dec_label_pc_a668

dec_label_pc_a668:                                ; preds = %dec_label_pc_a814, %dec_label_pc_a65c
  store i32 %v1_a2ac, i32* %r3.global-to-local, align 4
  store i1 %v2_a830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a830, label %dec_label_pc_a674, label %dec_label_pc_a83c

dec_label_pc_a674:                                ; preds = %dec_label_pc_a668, %dec_label_pc_a828, %dec_label_pc_a83c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a678 = load i32, i32* @r7, align 4
  %v1_a678 = trunc i32 %v0_a678 to i8
  %v2_a678 = load i32, i32* @r5, align 4
  %v3_a678 = add i32 %v2_a678, 10
  %v4_a678 = inttoptr i32 %v3_a678 to i8*
  store i8 %v1_a678, i8* %v4_a678, align 1
  %v0_a67c = load i32, i32* @r7, align 4
  %v1_a67c = trunc i32 %v0_a67c to i8
  %v2_a67c = load i32, i32* @r5, align 4
  %v3_a67c = add i32 %v2_a67c, 11
  %v4_a67c = inttoptr i32 %v3_a67c to i8*
  store i8 %v1_a67c, i8* %v4_a67c, align 1
  %v0_a680 = load i32, i32* @r5, align 4
  store i32 %v0_a680, i32* @r0, align 4
  %v2_a684 = call i32 @function_c690(i32 %v0_a680, i32 20)
  %v3_a684 = trunc i32 %v2_a684 to i8
  %v4_a68824 = udiv i32 %v2_a684, 256
  %v1_a68c = trunc i32 %v4_a68824 to i8
  %v2_a68c = load i32, i32* @r5, align 4
  %v3_a68c = add i32 %v2_a68c, 11
  %v4_a68c = inttoptr i32 %v3_a68c to i8*
  store i8 %v1_a68c, i8* %v4_a68c, align 1
  %v3_a690 = load i32, i32* @r5, align 4
  %v4_a690 = add i32 %v3_a690, 10
  %v5_a690 = inttoptr i32 %v4_a690 to i8*
  store i8 %v3_a684, i8* %v5_a690, align 1
  %v0_a694 = load i32, i32* @r6, align 4
  store i32 %v0_a694, i32* @r1, align 4
  store i32 %v5_a600, i32* %r2.global-to-local, align 4
  %v0_a69c = load i32, i32* @sb, align 4
  store i32 %v0_a69c, i32* %r3.global-to-local, align 4
  %v0_a6a0 = load i32, i32* @r7, align 4
  %v1_a6a0 = trunc i32 %v0_a6a0 to i8
  %v3_a6a0 = add i32 %v0_a694, 16
  %v4_a6a0 = inttoptr i32 %v3_a6a0 to i8*
  store i8 %v1_a6a0, i8* %v4_a6a0, align 1
  %v0_a6a4 = load i32, i32* @r7, align 4
  %v1_a6a4 = trunc i32 %v0_a6a4 to i8
  %v2_a6a4 = load i32, i32* @r6, align 4
  %v3_a6a4 = add i32 %v2_a6a4, 17
  %v4_a6a4 = inttoptr i32 %v3_a6a4 to i8*
  store i8 %v1_a6a4, i8* %v4_a6a4, align 1
  %v0_a6a8 = load i32, i32* @r5, align 4
  %v4_a6ac = call i32 @function_c6ec(i32 %v0_a6a8, i32 %v0_a694, i32 %v5_a600, i32 %v0_a69c)
  %v5_a6ac = trunc i32 %v4_a6ac to i8
  %v4_a6b025 = udiv i32 %v4_a6ac, 256
  %v1_a6b4 = trunc i32 %v4_a6b025 to i8
  %v2_a6b4 = load i32, i32* @r6, align 4
  %v3_a6b4 = add i32 %v2_a6b4, 17
  %v4_a6b4 = inttoptr i32 %v3_a6b4 to i8*
  store i8 %v1_a6b4, i8* %v4_a6b4, align 1
  %v3_a6b8 = load i32, i32* @r6, align 4
  %v4_a6b8 = add i32 %v3_a6b8, 16
  %v5_a6b8 = inttoptr i32 %v4_a6b8 to i8*
  store i8 %v5_a6ac, i8* %v5_a6b8, align 1
  %v3_a6bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a6bc, i32* %r3.global-to-local, align 4
  %v0_a6c0 = load i32, i32* @r5, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 20
  %v2_a6c0 = inttoptr i32 %v1_a6c0 to i32*
  %v3_a6c0 = load i32, i32* %v2_a6c0, align 4
  %v3_a6c8 = udiv i32 %v3_a6c0, 65536
  store i32 %v3_a6c8, i32* %r2.global-to-local, align 4
  %v5_a6cc = mul i32 %v3_a6bc, 24
  %v1_a6d0 = load i32, i32* @r8, align 4
  %v2_a6d0 = add i32 %v1_a6d0, %v5_a6cc
  store i32 %v2_a6d0, i32* %ip.global-to-local, align 4
  %v3_a6d421 = udiv i32 %v3_a6c0, 16777216
  %v1_a6d8 = trunc i32 %v3_a6d421 to i8
  %v3_a6d8 = add i32 %v2_a6d0, 3
  %v4_a6d8 = inttoptr i32 %v3_a6d8 to i8*
  store i8 %v1_a6d8, i8* %v4_a6d8, align 1
  %v0_a6dc = load i32, i32* %r2.global-to-local, align 4
  %v1_a6dc = trunc i32 %v0_a6dc to i8
  %v2_a6dc = load i32, i32* %ip.global-to-local, align 4
  %v3_a6dc = add i32 %v2_a6dc, 2
  %v4_a6dc = inttoptr i32 %v3_a6dc to i8*
  store i8 %v1_a6dc, i8* %v4_a6dc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a6e4 = load i32, i32* @r5, align 4
  store i32 %v0_a6e4, i32* %r1.global-to-local, align 4
  %v0_a6ec = load i32, i32* @fp, align 4
  store i32 %v0_a6ec, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a6f4 = load i32, i32* %ip.global-to-local, align 4
  %v6_a6fc = inttoptr i32 %v0_a6e4 to i32*
  %v7_a6fc = call i32 @function_1122c(i32 %v3_a2e4, i32* %v6_a6fc, i32 %v0_a6ec, i32 16384, i32 %v0_a6f4, i32 16)
  %v3_a700 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a700, i32* %r3.global-to-local, align 4
  store i32 %v1_a0c4, i32* %ip.global-to-local, align 4
  %v1_a708 = add i32 %v3_a700, 1
  %v9_a70c = icmp eq i32 %v1_a0c4, %v1_a708
  store i1 %v9_a70c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a708, i32* %stack_var_-40, align 4
  %v7_a714 = icmp sgt i32 %v1_a0c4, %v1_a708
  br i1 %v7_a714, label %dec_label_pc_a718, label %dec_label_pc_a854

dec_label_pc_a718:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a5f0
  %v1_a72c = phi i32 [ %v1_a708, %dec_label_pc_a674 ], [ 0, %dec_label_pc_a5f0 ]
  %v5_a71c = mul i32 %v1_a72c, 24
  %v1_a720 = load i32, i32* @r8, align 4
  %v2_a720 = add i32 %v1_a720, %v5_a71c
  store i32 %v2_a720, i32* %r3.global-to-local, align 4
  store i32 %v2_a0f0, i32* %ip.global-to-local, align 4
  %v1_a728 = add i32 %v2_a720, 20
  %v2_a728 = inttoptr i32 %v1_a728 to i8*
  %v3_a728 = load i8, i8* %v2_a728, align 1
  %v4_a728 = zext i8 %v3_a728 to i32
  store i32 %v4_a728, i32* %r2.global-to-local, align 4
  %v4_a72c = mul i32 %v1_a72c, 4
  %v5_a72c = add i32 %v4_a72c, %v2_a0f0
  %v6_a72c = inttoptr i32 %v5_a72c to i32*
  %v7_a72c = load i32, i32* %v6_a72c, align 4
  store i32 %v7_a72c, i32* @r5, align 4
  %v2_a730 = icmp ugt i8 %v3_a728, 30
  %v7_a730 = icmp eq i8 %v3_a728, 31
  store i1 %v7_a730, i1* %cpsr_z.global-to-local, align 1
  %v1_a734 = add i32 %v7_a72c, 20
  store i32 %v1_a734, i32* @r6, align 4
  %v2_a738 = xor i1 %v7_a730, true
  %v3_a738 = and i1 %v2_a730, %v2_a738
  br i1 %v3_a738, label %dec_label_pc_a618, label %dec_label_pc_a73c

dec_label_pc_a73c:                                ; preds = %dec_label_pc_a718
  %v1_a73c = add i32 %v2_a720, 16
  %v2_a73c = inttoptr i32 %v1_a73c to i32*
  %v3_a73c = load i32, i32* %v2_a73c, align 4
  %v0_a740 = call i32 @function_dab8()
  %v3_a744 = load i32, i32* %stack_var_-40, align 4
  %v5_a74c = mul i32 %v3_a744, 24
  %v1_a754 = load i32, i32* @r8, align 4
  %v2_a754 = add i32 %v1_a754, %v5_a74c
  store i32 %v2_a754, i32* %r1.global-to-local, align 4
  %v1_a758 = and i32 %v3_a73c, 65280
  store i32 %v1_a758, i32* %r3.global-to-local, align 4
  %v1_a750 = udiv i32 %v3_a73c, 256
  %v3_a75c = and i32 %v1_a750, 65280
  store i32 %v3_a75c, i32* %r2.global-to-local, align 4
  %v3_a760 = mul i32 %v3_a73c, 16777216
  store i32 %v3_a760, i32* %ip.global-to-local, align 4
  %v1_a764 = add i32 %v2_a754, 20
  %v2_a764 = inttoptr i32 %v1_a764 to i8*
  %v3_a764 = load i8, i8* %v2_a764, align 1
  %v4_a764 = zext i8 %v3_a764 to i32
  store i32 %v4_a764, i32* @lr, align 4
  %v4_a768 = mul nuw nsw i32 %v1_a758, 256
  %v5_a768 = or i32 %v4_a768, %v3_a760
  store i32 %v5_a768, i32* %ip.global-to-local, align 4
  %v2_a770 = call i32 @llvm.bswap.i32(i32 %v3_a73c)
  %v7_a774 = lshr i32 %v0_a740, %v4_a764
  %v8_a774 = add i32 %v7_a774, %v2_a770
  store i32 %v8_a774, i32* %r2.global-to-local, align 4
  %v2_a790 = call i32 @llvm.bswap.i32(i32 %v8_a774)
  store i32 %v2_a790, i32* %r3.global-to-local, align 4
  store i32 %v6_a2c0, i32* %r1.global-to-local, align 4
  store i1 %v7_a61c, i1* %cpsr_z.global-to-local, align 1
  %v1_a79c = load i32, i32* @r5, align 4
  %v2_a79c = add i32 %v1_a79c, 16
  %v3_a79c = inttoptr i32 %v2_a79c to i32*
  store i32 %v2_a790, i32* %v3_a79c, align 4
  br i1 %v2_a61c, label %dec_label_pc_a7a4, label %dec_label_pc_a624

dec_label_pc_a7a4:                                ; preds = %dec_label_pc_a73c, %dec_label_pc_a618
  %v0_a7a4 = call i32 @function_dab8()
  store i32 %v3_a334, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a7b4, i1* %cpsr_z.global-to-local, align 1
  %v1_a7b8 = load i32, i32* @r5, align 4
  %v2_a7b8 = add i32 %v1_a7b8, 12
  %v3_a7b8 = inttoptr i32 %v2_a7b8 to i32*
  store i32 %v0_a7a4, i32* %v3_a7b8, align 4
  br i1 %v3_a7b4, label %dec_label_pc_a7c0, label %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge

dec_label_pc_a7a4.dec_label_pc_a638_crit_edge:    ; preds = %dec_label_pc_a7a4
  %v1_a63c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a638

dec_label_pc_a7c0:                                ; preds = %dec_label_pc_a7a4, %dec_label_pc_a624
  %v0_a7c0 = call i32 @function_dab8()
  %v1_a7c0 = trunc i32 %v0_a7c0 to i8
  %v4_a7c426 = udiv i32 %v0_a7c0, 256
  %v1_a7c8 = trunc i32 %v4_a7c426 to i8
  %v2_a7c8 = load i32, i32* @r5, align 4
  %v3_a7c8 = add i32 %v2_a7c8, 5
  %v4_a7c8 = inttoptr i32 %v3_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v4_a7c8, align 1
  store i32 %v3_a338, i32* %r3.global-to-local, align 4
  %v1_a7d0 = load i32, i32* @r4, align 4
  %v9_a7d0 = icmp eq i32 %v3_a338, %v1_a7d0
  store i1 %v9_a7d0, i1* %cpsr_z.global-to-local, align 1
  %v3_a7d4 = load i32, i32* @r5, align 4
  %v4_a7d4 = add i32 %v3_a7d4, 4
  %v5_a7d4 = inttoptr i32 %v4_a7d4 to i8*
  store i8 %v1_a7c0, i8* %v5_a7d4, align 1
  %v0_a7d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a7d8, label %dec_label_pc_a7dc, label %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge

dec_label_pc_a7c0.dec_label_pc_a644_crit_edge:    ; preds = %dec_label_pc_a7c0
  %v1_a648.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a644

dec_label_pc_a7dc:                                ; preds = %dec_label_pc_a7c0, %dec_label_pc_a638
  %v0_a7dc = call i32 @function_dab8()
  %v1_a7dc = trunc i32 %v0_a7dc to i8
  store i32 %v3_a33c, i32* %ip.global-to-local, align 4
  %v4_a7e4 = sdiv i32 %v0_a7dc, 256
  store i32 %v4_a7e4, i32* %r3.global-to-local, align 4
  %v1_a7e8 = load i32, i32* @r4, align 4
  %v9_a7e8 = icmp eq i32 %v3_a33c, %v1_a7e8
  store i1 %v9_a7e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 20
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 %v1_a7dc, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7f0 = trunc i32 %v0_a7f0 to i8
  %v2_a7f0 = load i32, i32* @r6, align 4
  %v3_a7f0 = add i32 %v2_a7f0, 1
  %v4_a7f0 = inttoptr i32 %v3_a7f0 to i8*
  store i8 %v1_a7f0, i8* %v4_a7f0, align 1
  %v0_a7f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a7f4, label %dec_label_pc_a7f8, label %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge

dec_label_pc_a7dc.dec_label_pc_a650_crit_edge:    ; preds = %dec_label_pc_a7dc
  %v1_a654.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a650

dec_label_pc_a7f8:                                ; preds = %dec_label_pc_a7dc, %dec_label_pc_a644
  %v0_a7f8 = call i32 @function_dab8()
  %v1_a7f8 = trunc i32 %v0_a7f8 to i8
  store i32 %v6_a1c0, i32* %r1.global-to-local, align 4
  %v4_a800 = sdiv i32 %v0_a7f8, 256
  store i32 %v4_a800, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r4, align 4
  %v9_a804 = icmp eq i32 %v6_a1c0, %v1_a804
  store i1 %v9_a804, i1* %cpsr_z.global-to-local, align 1
  %v1_a808 = trunc i32 %v4_a800 to i8
  %v2_a808 = load i32, i32* @r6, align 4
  %v3_a808 = add i32 %v2_a808, 3
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v3_a80c = load i32, i32* @r6, align 4
  %v4_a80c = add i32 %v3_a80c, 2
  %v5_a80c = inttoptr i32 %v4_a80c to i8*
  store i8 %v1_a7f8, i8* %v5_a80c, align 1
  %v0_a810 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a810, label %dec_label_pc_a814, label %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge

dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge:    ; preds = %dec_label_pc_a7f8
  %v1_a660.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a65c

dec_label_pc_a814:                                ; preds = %dec_label_pc_a7f8, %dec_label_pc_a650
  %v0_a814 = call i32 @function_dab8()
  store i32 %v6_a1dc, i32* %r2.global-to-local, align 4
  %v1_a81c = load i32, i32* @r4, align 4
  %v9_a81c = icmp eq i32 %v6_a1dc, %v1_a81c
  store i1 %v9_a81c, i1* %cpsr_z.global-to-local, align 1
  %v1_a820 = load i32, i32* @r6, align 4
  %v2_a820 = add i32 %v1_a820, 4
  %v3_a820 = inttoptr i32 %v2_a820 to i32*
  store i32 %v0_a814, i32* %v3_a820, align 4
  br i1 %v9_a81c, label %dec_label_pc_a828, label %dec_label_pc_a668

dec_label_pc_a828:                                ; preds = %dec_label_pc_a814, %dec_label_pc_a65c
  %v0_a828 = call i32 @function_dab8()
  store i32 %v1_a2ac, i32* %r3.global-to-local, align 4
  store i1 %v2_a830, i1* %cpsr_z.global-to-local, align 1
  %v1_a834 = load i32, i32* @r6, align 4
  %v2_a834 = add i32 %v1_a834, 8
  %v3_a834 = inttoptr i32 %v2_a834 to i32*
  store i32 %v0_a828, i32* %v3_a834, align 4
  br i1 %v2_a830, label %dec_label_pc_a674, label %dec_label_pc_a83c

dec_label_pc_a83c:                                ; preds = %dec_label_pc_a668, %dec_label_pc_a828
  %v0_a83c = load i32, i32* @r5, align 4
  %v1_a83c = add i32 %v0_a83c, 40
  store i32 %v1_a83c, i32* @r4, align 4
  %v0_a844 = load i32, i32* @sl, align 4
  store i32 %v0_a844, i32* %r1.global-to-local, align 4
  %v2_a848 = call i32 @function_db6c(i32 %v1_a83c, i32 %v0_a844)
  %v0_a84c = load i32, i32* @r7, align 4
  %v1_a84c = trunc i32 %v0_a84c to i8
  %v2_a84c = load i32, i32* @r4, align 4
  %v3_a84c = load i32, i32* @sl, align 4
  %v4_a84c = add i32 %v3_a84c, %v2_a84c
  %v5_a84c = inttoptr i32 %v4_a84c to i8*
  store i8 %v1_a84c, i8* %v5_a84c, align 1
  br label %dec_label_pc_a674

dec_label_pc_a854:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a5dc
  %v2_a858 = call i32 @function_10c8c(i32* null)
  store i32 %v2_a2d0, i32* %r1.global-to-local, align 4
  %v9_a860 = icmp eq i32 %v2_a2d0, %v2_a858
  store i1 %v9_a860, i1* %cpsr_z.global-to-local, align 1
  %v6_a864 = icmp slt i32 %v2_a2d0, %v2_a858
  br i1 %v6_a864, label %dec_label_pc_a868, label %dec_label_pc_a5dc

dec_label_pc_a868:                                ; preds = %dec_label_pc_a854, %dec_label_pc_a0c0, %dec_label_pc_a870
  %v29_a86c = phi i32 [ %v3_a2e4, %dec_label_pc_a0c0 ], [ %v1_a874, %dec_label_pc_a870 ], [ %v2_a858, %dec_label_pc_a854 ]
  store i32 %v18_a0c0, i32* %sb.global-to-local, align 4
  store i32 %v24_a0c0, i32* %fp.global-to-local, align 4
  ret i32 %v29_a86c

dec_label_pc_a870:                                ; preds = %dec_label_pc_a2f4
  %v1_a874 = call i32 @function_109bc(i32 %v3_a2e4)
  br label %dec_label_pc_a868

; uselistorder directives
  uselistorder i32 %v4_a800, { 1, 0 }
  uselistorder i32 %v2_a790, { 1, 0 }
  uselistorder i32 %v3_a760, { 1, 0 }
  uselistorder i32 %v3_a73c, { 1, 3, 2, 0 }
  uselistorder i32 %v1_a708, { 1, 2, 0, 3 }
  uselistorder i32 %v0_a694, { 1, 0, 2 }
  uselistorder i32 %v1_a5f0, { 1, 0, 2 }
  uselistorder i1 %v2_a830, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a7b4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a61c, { 2, 1, 0 }
  uselistorder i32 %v1_a5cc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a404, { 1, 0 }
  uselistorder i32 %v3_a3fc, { 2, 0, 1, 3 }
  uselistorder i32 %v3_a3f8, { 0, 2, 1 }
  uselistorder i32 %v1_a3f4, { 1, 2, 0 }
  uselistorder i32 %v1_a3f0, { 2, 0, 1 }
  uselistorder i32 %tmp93, { 1, 0 }
  uselistorder i32 %v1_a3c4, { 1, 0 }
  uselistorder i32 %v1_a3c0, { 1, 0 }
  uselistorder i32 %v1_a3bc, { 1, 0 }
  uselistorder i32 %v1_a3b8, { 1, 0 }
  uselistorder i32 %v1_a388, { 2, 0, 1 }
  uselistorder i32 %v1_a370, { 1, 0 }
  uselistorder i1 %v2_a340, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a334, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a32c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a314, { 1, 0 }
  uselistorder i1 %v7_a2e8, { 1, 0 }
  uselistorder i32 %v3_a2e4, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_a2d0, { 2, 1, 0 }
  uselistorder i32 %v6_a2c0, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_a2ac, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_a1dc, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a1c0, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_a170, { 1, 2, 0 }
  uselistorder i32 %v6_a144, { 2, 1, 3, 0 }
  uselistorder i32 %v7_a12c, { 0, 2, 1, 3 }
  uselistorder i32 %v6_a108, { 1, 2, 0 }
  uselistorder i32 %v2_a0f0, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_a0c4, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 18, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 56, 27, 28, 29, 57, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_a868, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a83c, { 1, 0 }
  uselistorder label %dec_label_pc_a674, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a5dc, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
}

define i32 @function_a880(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a880:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a880 = load i32, i32* @r4, align 4
  %v12_a880 = load i32, i32* @r7, align 4
  %v1_a884 = urem i32 %arg2, 256
  store i32 %v1_a884, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_a884, i32* %r0.global-to-local, align 4
  %v1_a89c = urem i32 %arg4, 256
  store i32 %v1_a89c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a8ac = call i32 @function_1157c(i32 %v1_a884, i32 4)
  %v0_a8b0 = load i32, i32* @r5, align 4
  store i32 %v0_a8b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a8b8 = load i32, i32* @r7, align 4
  store i32 %v0_a8b8, i32* %r3.global-to-local, align 4
  store i32 %v2_a8ac, i32* %sb.global-to-local, align 4
  %v0_a8c0 = load i32, i32* @r4, align 4
  store i32 %v0_a8c0, i32* %r0.global-to-local, align 4
  %v5_a8c4 = inttoptr i32 %v0_a8b0 to i32*
  %v6_a8c4 = call i32 @function_829c(i32 %v0_a8c0, i32* %v5_a8c4, i32 2, i32 %v0_a8b8, i32 ptrtoint (i32* @0 to i32))
  %v1_a8d0 = urem i32 %v6_a8c4, 256
  store i32 %v1_a8d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8dc = load i32, i32* @r5, align 4
  store i32 %v0_a8dc, i32* %r1.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r4, align 4
  store i32 %v0_a8e0, i32* %r0.global-to-local, align 4
  %v5_a8e4 = trunc i32 %v6_a8c4 to i8
  %v6_a8e8 = inttoptr i32 %v0_a8dc to i32*
  %v7_a8e8 = call i32 @function_829c(i32 %v0_a8e0, i32* %v6_a8e8, i32 3, i32 65535, i32 %v6_a8c4)
  %v0_a8ec = load i32, i32* @r5, align 4
  store i32 %v0_a8ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a8fc = load i32, i32* @r4, align 4
  store i32 %v0_a8fc, i32* %r0.global-to-local, align 4
  %v5_a900 = inttoptr i32 %v0_a8ec to i32*
  %v6_a900 = call i32 @function_829c(i32 %v0_a8fc, i32* %v5_a900, i32 4, i32 64, i32 %v7_a8e8)
  %v1_a908 = urem i32 %v6_a900, 256
  store i32 %v1_a908, i32* %ip.global-to-local, align 4
  %v0_a90c = load i32, i32* @r5, align 4
  store i32 %v0_a90c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a918 = load i32, i32* @r4, align 4
  store i32 %v0_a918, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_a900, 16777216
  %v5_a920 = sdiv i32 %sext9, 16777216
  %v6_a920 = inttoptr i32 %v0_a90c to i32*
  %v7_a920 = call i32 @function_829c(i32 %v0_a918, i32* %v6_a920, i32 5, i32 1, i32 %v5_a920)
  %v1_a92c = urem i32 %v7_a920, 256
  store i32 %v1_a92c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a938 = load i32, i32* @r5, align 4
  store i32 %v0_a938, i32* %r1.global-to-local, align 4
  %v0_a93c = load i32, i32* @r4, align 4
  store i32 %v0_a93c, i32* %r0.global-to-local, align 4
  %v5_a944 = inttoptr i32 %v0_a938 to i32*
  %v6_a944 = call i32 @function_829c(i32 %v0_a93c, i32* %v5_a944, i32 6, i32 65535, i32 %v1_a92c)
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a95c = load i32, i32* @r4, align 4
  store i32 %v0_a95c, i32* %r0.global-to-local, align 4
  %v5_a960 = inttoptr i32 %v0_a950 to i32*
  %v6_a960 = call i32 @function_829c(i32 %v0_a95c, i32* %v5_a960, i32 7, i32 65535, i32 %v6_a944)
  %v0_a96c = load i32, i32* @r5, align 4
  store i32 %v0_a96c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a978 = load i32, i32* @r4, align 4
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v5_a97c = inttoptr i32 %v0_a96c to i32*
  %v6_a97c = call i32 @function_829c(i32 %v0_a978, i32* %v5_a97c, i32 16, i32 65535, i32 %v6_a960)
  %v0_a980 = load i32, i32* @r5, align 4
  store i32 %v0_a980, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a98c = load i32, i32* @r7, align 4
  store i32 %v0_a98c, i32* %r3.global-to-local, align 4
  %v0_a990 = load i32, i32* @r4, align 4
  store i32 %v0_a990, i32* %r0.global-to-local, align 4
  %v5_a994 = inttoptr i32 %v0_a980 to i32*
  %v6_a994 = call i32 @function_829c(i32 %v0_a990, i32* %v5_a994, i32 17, i32 %v0_a98c, i32 %v6_a97c)
  %v0_a998 = load i32, i32* @r5, align 4
  store i32 %v0_a998, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a9a4 = load i32, i32* @r7, align 4
  store i32 %v0_a9a4, i32* %r3.global-to-local, align 4
  %v0_a9a8 = load i32, i32* @r4, align 4
  store i32 %v0_a9a8, i32* %r0.global-to-local, align 4
  %v5_a9ac = inttoptr i32 %v0_a998 to i32*
  %v6_a9ac = call i32 @function_829c(i32 %v0_a9a8, i32* %v5_a9ac, i32 10, i32 %v0_a9a4, i32 %v6_a994)
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r7, align 4
  store i32 %v0_a9bc, i32* %r3.global-to-local, align 4
  %v0_a9c0 = load i32, i32* @r4, align 4
  store i32 %v0_a9c0, i32* %r0.global-to-local, align 4
  %v5_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v6_a9c4 = call i32 @function_829c(i32 %v0_a9c0, i32* %v5_a9c4, i32 11, i32 %v0_a9bc, i32 %v6_a9ac)
  %v0_a9c8 = load i32, i32* @r5, align 4
  store i32 %v0_a9c8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a9d4 = load i32, i32* @r7, align 4
  store i32 %v0_a9d4, i32* %r3.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r4, align 4
  store i32 %v0_a9d8, i32* %r0.global-to-local, align 4
  %v5_a9dc = inttoptr i32 %v0_a9c8 to i32*
  %v6_a9dc = call i32 @function_829c(i32 %v0_a9d8, i32* %v5_a9dc, i32 12, i32 %v0_a9d4, i32 %v6_a9c4)
  %v0_a9e0 = load i32, i32* @r5, align 4
  store i32 %v0_a9e0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_a9ec = load i32, i32* @r7, align 4
  store i32 %v0_a9ec, i32* %r3.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r4, align 4
  store i32 %v0_a9f0, i32* %r0.global-to-local, align 4
  %v5_a9f4 = inttoptr i32 %v0_a9e0 to i32*
  %v6_a9f4 = call i32 @function_829c(i32 %v0_a9f0, i32* %v5_a9f4, i32 13, i32 %v0_a9ec, i32 %v6_a9dc)
  %v0_a9f8 = load i32, i32* @r5, align 4
  store i32 %v0_a9f8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v5_aa0c = inttoptr i32 %v0_a9f8 to i32*
  %v6_aa0c = call i32 @function_829c(i32 %v0_aa08, i32* %v5_aa0c, i32 14, i32 1, i32 %v6_a9f4)
  %v0_aa10 = load i32, i32* @r5, align 4
  store i32 %v0_aa10, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_aa1c = load i32, i32* @r7, align 4
  store i32 %v0_aa1c, i32* %r3.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r4, align 4
  store i32 %v0_aa20, i32* %r0.global-to-local, align 4
  %v5_aa24 = inttoptr i32 %v0_aa10 to i32*
  %v6_aa24 = call i32 @function_829c(i32 %v0_aa20, i32* %v5_aa24, i32 15, i32 %v0_aa1c, i32 %v6_aa0c)
  %v0_aa2c = load i32, i32* @r5, align 4
  store i32 %v0_aa2c, i32* %r1.global-to-local, align 4
  %v2_aa30 = load i32, i32* @global_var_1b860.47, align 4
  store i32 %v2_aa30, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_aa3c = load i32, i32* @r4, align 4
  store i32 %v0_aa3c, i32* %r0.global-to-local, align 4
  %v5_aa40 = inttoptr i32 %v0_aa2c to i32*
  %v6_aa40 = call i32 @function_8230(i32 %v0_aa3c, i32* %v5_aa40, i32 19, i32 %v2_aa30, i32 %v6_aa24)
  %v0_aa48 = load i32, i32* @r7, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v1_aa4c = inttoptr i32 %v0_aa48 to i32*
  %v2_aa4c = call i32 @function_10c8c(i32* %v1_aa4c)
  %v1_aa50 = load i32, i32* @r6, align 4
  %v2_aa50 = add i32 %v1_aa50, %v2_aa4c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_aa64 = call i32 @function_11290(i32 2, i32 3, i32 6)
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v7_aa68 = icmp eq i32 %v3_aa64, -1
  store i1 %v7_aa68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aa64, i32* %sl.global-to-local, align 4
  br i1 %v7_aa68, label %dec_label_pc_afe8, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %dec_label_pc_a880
  store i32 1, i32* %stack_var_-40, align 4
  %v6_aa7c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_aa7c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_aa84 = load i32, i32* @r7, align 4
  store i32 %v0_aa84, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aa90 = call i32 @function_11260(i32 %v3_aa64, i32 %v0_aa84, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_aa90, i32* %r0.global-to-local, align 4
  %v7_aa94 = icmp eq i32 %v6_aa90, -1
  store i1 %v7_aa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa94, label %dec_label_pc_aff0, label %dec_label_pc_aa9c

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa74
  %v3_aaa0 = mul i32 %v7_a8e8, 65536
  store i32 %v3_aaa0, i32* @r4, align 4
  %v3_aaac = urem i32 %v7_a8e8, 65536
  %v3_aab8 = mul i32 %v6_a944, 65536
  store i32 %v3_aab8, i32* %r0.global-to-local, align 4
  %v3_aac0 = urem i32 %v6_a944, 65536
  store i32 %v3_aac0, i32* %r2.global-to-local, align 4
  %v3_aac4 = urem i32 %v6_a960, 65536
  store i32 %v3_aac4, i32* %r3.global-to-local, align 4
  %v1_aac8 = urem i32 %v6_a9ac, 256
  store i32 %v1_aac8, i32* %ip.global-to-local, align 4
  %v0_aacc = load i32, i32* %fp.global-to-local, align 4
  %v2_aacc = icmp eq i32 %v0_aacc, 0
  store i1 %v2_aacc, i1* %cpsr_z.global-to-local, align 1
  %v0_aad0 = load i32, i32* @r7, align 4
  store i32 %v0_aad0, i32* %stack_var_-40, align 4
  %tmp68 = icmp slt i32 %v0_aacc, 1
  br i1 %tmp68, label %dec_label_pc_ad88.preheader, label %dec_label_pc_aae4

dec_label_pc_aae4:                                ; preds = %dec_label_pc_aa9c
  %v1_aafc = urem i32 %v6_a960, 256
  %tmp69 = udiv i32 %v6_a944, 256
  %tmp70 = mul i32 %v6_a97c, 256
  %v1_ab14 = and i32 %tmp70, 65280
  %tmp72 = udiv i32 %v6_a97c, 256
  %v4_ab24 = urem i32 %tmp72, 256
  %v5_ab24 = or i32 %v4_ab24, %v1_ab14
  store i32 %v5_ab24, i32* @lr, align 4
  %v1_ab30 = urem i32 %v6_a9ac, 2
  %v1_ab38 = urem i32 %v6_a9c4, 2
  %v1_ab3c = urem i32 %v6_a9dc, 2
  %v1_ab40 = urem i32 %v6_a9f4, 2
  %v3_ab4c = mul nuw nsw i32 %v1_aafc, 256
  store i32 %v3_ab4c, i32* %r1.global-to-local, align 4
  %v3_ab64 = sdiv i32 %v3_aaa0, 16777216
  %sext10 = mul i32 %tmp69, 16777216
  %v7_ab64 = sdiv i32 %sext10, 16777216
  %tmp73 = udiv i32 %v6_a960, 256
  %v4_ab68 = urem i32 %tmp73, 256
  %v5_ab68 = or i32 %v4_ab68, %v3_ab4c
  store i32 %v5_ab68, i32* @r6, align 4
  %v1_ab6c = urem i32 %v6_aa0c, 2
  %v1_ab74 = urem i32 %v6_aa24, 2
  store i32 %v1_ab74, i32* %r0.global-to-local, align 4
  %v3_ab78 = ashr i32 %v3_aaa0, 31
  store i32 %v3_ab78, i32* %r2.global-to-local, align 4
  %v3_ab7c = ashr i32 %sext10, 31
  store i32 %v3_ab7c, i32* %r3.global-to-local, align 4
  store i32 %v1_aafc, i32* %ip.global-to-local, align 4
  %v5_ab90 = trunc i32 %v3_ab7c to i8
  store i32 %v0_aad0, i32* @r4, align 4
  store i32 %v0_aad0, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %tmp = sub nsw i32 0, %v1_ab30
  %v4_ac58 = and i32 %tmp, 32
  %tmp77 = sub nsw i32 0, %v1_ab38
  %v4_ac6c = and i32 %tmp77, 16
  %tmp78 = sub nsw i32 0, %v1_ab3c
  %v4_ac80 = and i32 %tmp78, 8
  %tmp79 = sub nsw i32 0, %v1_ab40
  %v4_ac94 = and i32 %tmp79, 4
  %tmp80 = sub nsw i32 0, %v1_ab6c
  %v3_aca8 = and i32 %tmp80, 2
  %sext8 = mul i32 %v6_a960, 16777216
  %v7_acd8 = sdiv i32 %sext8, 16777216
  br label %dec_label_pc_aba4

dec_label_pc_aba4:                                ; preds = %bb75, %dec_label_pc_aae4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_abac = call i32 @function_1157c(i32 128, i32 1)
  store i32 %v2_abac, i32* %r0.global-to-local, align 4
  %v3_abb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abb0, i32* %r2.global-to-local, align 4
  %v1_abb4 = load i32, i32* %sb.global-to-local, align 4
  %v2_abb4 = load i32, i32* @r4, align 4
  %v5_abb4 = mul i32 %v2_abb4, 4
  %v6_abb4 = add i32 %v5_abb4, %v1_abb4
  %v7_abb4 = inttoptr i32 %v6_abb4 to i32*
  store i32 %v2_abac, i32* %v7_abb4, align 4
  %v0_abb8 = load i32, i32* %sb.global-to-local, align 4
  %v1_abb8 = load i32, i32* %r2.global-to-local, align 4
  %v4_abb8 = mul i32 %v1_abb8, 4
  %v5_abb8 = add i32 %v4_abb8, %v0_abb8
  %v6_abb8 = inttoptr i32 %v5_abb8 to i32*
  %v7_abb8 = load i32, i32* %v6_abb8, align 4
  store i32 %v7_abb8, i32* %r4.global-to-local, align 4
  %v1_abbc = inttoptr i32 %v7_abb8 to i8*
  %v2_abbc = load i8, i8* %v1_abbc, align 1
  %tmp81 = urem i8 %v2_abbc, 16
  %v1_abc0 = zext i8 %tmp81 to i32
  %v1_abc4 = or i32 %v1_abc0, 64
  store i32 %v1_abc4, i32* %r3.global-to-local, align 4
  %v1_abc8 = trunc i32 %v1_abc4 to i8
  store i8 %v1_abc8, i8* %v1_abbc, align 1
  %v0_abcc = load i32, i32* %r4.global-to-local, align 4
  %v1_abcc = inttoptr i32 %v0_abcc to i8*
  %v2_abcc = load i8, i8* %v1_abcc, align 1
  %v1_abd0 = and i8 %v2_abcc, -16
  %v1_abd4 = or i8 %v1_abd0, 5
  store i32 %v1_a92c, i32* %r0.global-to-local, align 4
  store i8 %v1_abd4, i8* %v1_abcc, align 1
  %v2_abe4 = load i32, i32* %r4.global-to-local, align 4
  %v3_abe4 = add i32 %v2_abe4, 1
  %v4_abe4 = inttoptr i32 %v3_abe4 to i8*
  store i8 %v5_a8e4, i8* %v4_abe4, align 1
  %v0_abe8 = load i32, i32* %r0.global-to-local, align 4
  %v2_abe8 = icmp eq i32 %v0_abe8, 0
  store i1 %v2_abe8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a920, i32* %r0.global-to-local, align 4
  %v2_abf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_abf4 = add i32 %v2_abf4, 3
  %v4_abf4 = inttoptr i32 %v3_abf4 to i8*
  store i8 60, i8* %v4_abf4, align 1
  store i32 %v3_ab78, i32* %ip.global-to-local, align 4
  store i32 %v3_ab64, i32* %r3.global-to-local, align 4
  %v0_ac00 = load i32, i32* %r0.global-to-local, align 4
  %v1_ac00 = trunc i32 %v0_ac00 to i8
  %v2_ac00 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac00 = add i32 %v2_ac00, 8
  %v4_ac00 = inttoptr i32 %v3_ac00 to i8*
  store i8 %v1_ac00, i8* %v4_ac00, align 1
  %v0_ac04 = load i32, i32* @r7, align 4
  %v1_ac04 = trunc i32 %v0_ac04 to i8
  %v2_ac04 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac04 = add i32 %v2_ac04, 9
  %v4_ac04 = inttoptr i32 %v3_ac04 to i8*
  store i8 %v1_ac04, i8* %v4_ac04, align 1
  %v3_ac08 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac08, i32* %r2.global-to-local, align 4
  %v0_ac0c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac0c = trunc i32 %v0_ac0c to i8
  %v2_ac0c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac0c = add i32 %v2_ac0c, 4
  %v4_ac0c = inttoptr i32 %v3_ac0c to i8*
  store i8 %v1_ac0c, i8* %v4_ac0c, align 1
  %v0_ac10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac10, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_aba4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ac14 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac14 = add i32 %v3_ac14, 6
  %v5_ac14 = inttoptr i32 %v4_ac14 to i8*
  store i8 64, i8* %v5_ac14, align 1
  %v0_ac34.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_aba4, %bb
  %v0_ac34 = phi i1 [ true, %dec_label_pc_aba4 ], [ %v0_ac34.pre, %bb ]
  %v0_ac18 = load i32, i32* %r2.global-to-local, align 4
  %v5_ac1c = mul i32 %v0_ac18, 24
  store i32 %v5_ac1c, i32* %r3.global-to-local, align 4
  store i32 %v6_aa40, i32* %r2.global-to-local, align 4
  %v1_ac24 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac24 = add i32 %v1_ac24, 12
  %v3_ac24 = inttoptr i32 %v2_ac24 to i32*
  store i32 %v6_aa40, i32* %v3_ac24, align 4
  %v0_ac28 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac28 = load i32, i32* @r8, align 4
  %v2_ac28 = add i32 %v1_ac28, %v0_ac28
  store i32 %v2_ac28, i32* %r3.global-to-local, align 4
  %v1_ac2c = add i32 %v2_ac28, 16
  %v2_ac2c = inttoptr i32 %v1_ac2c to i32*
  %v3_ac2c = load i32, i32* %v2_ac2c, align 4
  store i32 %v3_ac2c, i32* %r2.global-to-local, align 4
  store i32 %v7_ab64, i32* %r3.global-to-local, align 4
  br i1 %v0_ac34, label %bb75, label %bb74

bb74:                                             ; preds = %.thread
  %v1_ac34 = load i32, i32* @r5, align 4
  %v2_ac34 = trunc i32 %v1_ac34 to i8
  %v3_ac34 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac34 = add i32 %v3_ac34, 7
  %v5_ac34 = inttoptr i32 %v4_ac34 to i8*
  store i8 %v2_ac34, i8* %v5_ac34, align 1
  br label %bb75

bb75:                                             ; preds = %.thread, %bb74
  %v0_ac38 = load i32, i32* %ip.global-to-local, align 4
  %v1_ac38 = trunc i32 %v0_ac38 to i8
  %v2_ac38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac38 = add i32 %v2_ac38, 5
  %v4_ac38 = inttoptr i32 %v3_ac38 to i8*
  store i8 %v1_ac38, i8* %v4_ac38, align 1
  %v0_ac3c = load i32, i32* @r5, align 4
  %v1_ac3c = trunc i32 %v0_ac3c to i8
  %v2_ac3c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac3c = add i32 %v2_ac3c, 2
  %v4_ac3c = inttoptr i32 %v3_ac3c to i8*
  store i8 %v1_ac3c, i8* %v4_ac3c, align 1
  %v0_ac40 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac40 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac40 = add i32 %v1_ac40, 16
  %v3_ac40 = inttoptr i32 %v2_ac40 to i32*
  store i32 %v0_ac40, i32* %v3_ac40, align 4
  %v0_ac44 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac44 = trunc i32 %v0_ac44 to i8
  %v2_ac44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac44 = add i32 %v2_ac44, 20
  %v4_ac44 = inttoptr i32 %v3_ac44 to i8*
  store i8 %v1_ac44, i8* %v4_ac44, align 1
  %v0_ac48 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac48 = add i32 %v0_ac48, 20
  store i32 %v1_ac48, i32* %r1.global-to-local, align 4
  %v1_ac4c = add i32 %v0_ac48, 33
  %v2_ac4c = inttoptr i32 %v1_ac4c to i8*
  %v3_ac4c = load i8, i8* %v2_ac4c, align 1
  %v4_ac4c = zext i8 %v3_ac4c to i32
  store i32 %v1_ab30, i32* %ip.global-to-local, align 4
  %v1_ac54 = and i32 %v4_ac4c, 223
  %v5_ac58 = or i32 %v1_ac54, %v4_ac58
  store i32 %v5_ac58, i32* %r3.global-to-local, align 4
  %v1_ac5c = trunc i32 %v5_ac58 to i8
  store i8 %v1_ac5c, i8* %v2_ac4c, align 1
  %v0_ac60 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac60 = add i32 %v0_ac60, 13
  %v2_ac60 = inttoptr i32 %v1_ac60 to i8*
  %v3_ac60 = load i8, i8* %v2_ac60, align 1
  %v4_ac60 = zext i8 %v3_ac60 to i32
  store i32 %v1_ab38, i32* %r0.global-to-local, align 4
  %v1_ac68 = and i32 %v4_ac60, 239
  %v5_ac6c = or i32 %v1_ac68, %v4_ac6c
  store i32 %v5_ac6c, i32* %r2.global-to-local, align 4
  %v1_ac70 = trunc i32 %v5_ac6c to i8
  store i8 %v1_ac70, i8* %v2_ac60, align 1
  %v0_ac74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac74 = add i32 %v0_ac74, 13
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v1_ab3c, i32* %r2.global-to-local, align 4
  %v1_ac7c = and i32 %v4_ac74, 247
  %v5_ac80 = or i32 %v1_ac7c, %v4_ac80
  store i32 %v5_ac80, i32* %r3.global-to-local, align 4
  %v1_ac84 = trunc i32 %v5_ac80 to i8
  store i8 %v1_ac84, i8* %v2_ac74, align 1
  %v0_ac88 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac88 = add i32 %v0_ac88, 13
  %v2_ac88 = inttoptr i32 %v1_ac88 to i8*
  %v3_ac88 = load i8, i8* %v2_ac88, align 1
  %v4_ac88 = zext i8 %v3_ac88 to i32
  store i32 %v1_ab40, i32* %r3.global-to-local, align 4
  %v1_ac90 = and i32 %v4_ac88, 251
  %v5_ac94 = or i32 %v1_ac90, %v4_ac94
  store i32 %v5_ac94, i32* %r2.global-to-local, align 4
  %v1_ac98 = trunc i32 %v5_ac94 to i8
  store i8 %v1_ac98, i8* %v2_ac88, align 1
  %v0_ac9c = load i32, i32* %r1.global-to-local, align 4
  %v1_ac9c = add i32 %v0_ac9c, 13
  %v2_ac9c = inttoptr i32 %v1_ac9c to i8*
  %v3_ac9c = load i8, i8* %v2_ac9c, align 1
  %v4_ac9c = zext i8 %v3_ac9c to i32
  store i32 %v1_ab6c, i32* %ip.global-to-local, align 4
  %v1_aca4 = and i32 %v4_ac9c, 253
  %v4_aca8 = or i32 %v1_aca4, %v3_aca8
  store i32 %v4_aca8, i32* %r3.global-to-local, align 4
  %v1_acac = trunc i32 %v4_aca8 to i8
  store i8 %v1_acac, i8* %v2_ac9c, align 1
  %v0_acb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_acb0 = add i32 %v0_acb0, 12
  %v2_acb0 = inttoptr i32 %v1_acb0 to i8*
  %v3_acb0 = load i8, i8* %v2_acb0, align 1
  %v4_acb0 = zext i8 %v3_acb0 to i32
  store i32 %v4_acb0, i32* %r2.global-to-local, align 4
  %v1_acb4 = add i32 %v0_acb0, 13
  %v2_acb4 = inttoptr i32 %v1_acb4 to i8*
  %v3_acb4 = load i8, i8* %v2_acb4, align 1
  %v4_acb4 = zext i8 %v3_acb4 to i32
  %tmp82 = urem i8 %v3_acb0, 16
  %v1_acbc = zext i8 %tmp82 to i32
  %v1_acc0 = and i32 %v4_acb4, 254
  %v2_acc4 = or i32 %v1_acc0, %v1_ab74
  %v1_acc8 = or i32 %v1_acbc, 160
  store i32 %v1_acc8, i32* %r2.global-to-local, align 4
  %v1_accc = trunc i32 %v2_acc4 to i8
  store i8 %v1_accc, i8* %v2_acb4, align 1
  %v0_acd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_acd0 = trunc i32 %v0_acd0 to i8
  %v2_acd0 = load i32, i32* %r1.global-to-local, align 4
  %v3_acd0 = add i32 %v2_acd0, 12
  %v4_acd0 = inttoptr i32 %v3_acd0 to i8*
  store i8 %v1_acd0, i8* %v4_acd0, align 1
  store i32 %v7_acd8, i32* %r3.global-to-local, align 4
  store i32 %v5_ab24, i32* %ip.global-to-local, align 4
  %v2_ace0 = load i32, i32* %r1.global-to-local, align 4
  %v3_ace0 = add i32 %v2_ace0, 1
  %v4_ace0 = inttoptr i32 %v3_ace0 to i8*
  store i8 %v5_ab90, i8* %v4_ace0, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_acec = load i32, i32* %r3.global-to-local, align 4
  %v1_acec = trunc i32 %v0_acec to i8
  %v2_acec = load i32, i32* %r1.global-to-local, align 4
  %v3_acec = add i32 %v2_acec, 3
  %v4_acec = inttoptr i32 %v3_acec to i8*
  store i8 %v1_acec, i8* %v4_acec, align 1
  %v0_acf0 = load i32, i32* %ip.global-to-local, align 4
  %v1_acf0 = load i32, i32* %r1.global-to-local, align 4
  %v2_acf0 = add i32 %v1_acf0, 4
  %v3_acf0 = inttoptr i32 %v2_acf0 to i32*
  store i32 %v0_acf0, i32* %v3_acf0, align 4
  %v0_acf4 = load i32, i32* @r6, align 4
  %v1_acf4 = trunc i32 %v0_acf4 to i8
  %v2_acf4 = load i32, i32* %r1.global-to-local, align 4
  %v3_acf4 = add i32 %v2_acf4, 2
  %v4_acf4 = inttoptr i32 %v3_acf4 to i8*
  store i8 %v1_acf4, i8* %v4_acf4, align 1
  %v0_acf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_acf8 = trunc i32 %v0_acf8 to i8
  %v2_acf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_acf8 = add i32 %v2_acf8, 41
  %v4_acf8 = inttoptr i32 %v3_acf8 to i8*
  store i8 %v1_acf8, i8* %v4_acf8, align 1
  %v0_acfc = load i32, i32* %r0.global-to-local, align 4
  %v1_acfc = trunc i32 %v0_acfc to i8
  %v2_acfc = load i32, i32* %r4.global-to-local, align 4
  %v3_acfc = add i32 %v2_acfc, 40
  %v4_acfc = inttoptr i32 %v3_acfc to i8*
  store i8 %v1_acfc, i8* %v4_acfc, align 1
  %v0_ad00 = call i32 @function_dab8()
  %v1_ad04 = urem i32 %v0_ad00, 16
  %v1_ad08 = or i32 %v1_ad04, 1392
  %v1_ad0c = add nuw nsw i32 %v1_ad08, 8
  %v3_ad10 = mul nuw nsw i32 %v1_ad0c, 65536
  store i32 %v3_ad10, i32* %r0.global-to-local, align 4
  %v3_ad14 = mul nuw nsw i32 %v1_ad0c, 256
  %v1_ad18 = and i32 %v3_ad14, 65280
  %v5_ad1c = or i32 %v1_ad18, 5
  store i32 %v5_ad1c, i32* %r3.global-to-local, align 4
  %v2_ad20 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad20 = add i32 %v2_ad20, 42
  %v4_ad20 = inttoptr i32 %v3_ad20 to i8*
  store i8 5, i8* %v4_ad20, align 1
  %v0_ad24 = load i32, i32* %r3.global-to-local, align 4
  %v3_ad24 = sdiv i32 %v0_ad24, 256
  store i32 %v3_ad24, i32* %r1.global-to-local, align 4
  %v0_ad28 = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_ad30 = trunc i32 %v3_ad24 to i8
  %v3_ad30 = add i32 %v0_ad28, 43
  %v4_ad30 = inttoptr i32 %v3_ad30 to i8*
  store i8 %v1_ad30, i8* %v4_ad30, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_ad38 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad38 = trunc i32 %v0_ad38 to i8
  %v2_ad38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad38 = add i32 %v2_ad38, 46
  %v4_ad38 = inttoptr i32 %v3_ad38 to i8*
  store i8 %v1_ad38, i8* %v4_ad38, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_ad44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad44 = add i32 %v2_ad44, 47
  %v4_ad44 = inttoptr i32 %v3_ad44 to i8*
  store i8 10, i8* %v4_ad44, align 1
  %v0_ad48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad48 = trunc i32 %v0_ad48 to i8
  %v2_ad48 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad48 = add i32 %v2_ad48, 44
  %v4_ad48 = inttoptr i32 %v3_ad48 to i8*
  store i8 %v1_ad48, i8* %v4_ad48, align 1
  %v0_ad4c = load i32, i32* %ip.global-to-local, align 4
  %v1_ad4c = trunc i32 %v0_ad4c to i8
  %v2_ad4c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad4c = add i32 %v2_ad4c, 45
  %v4_ad4c = inttoptr i32 %v3_ad4c to i8*
  store i8 %v1_ad4c, i8* %v4_ad4c, align 1
  %v0_ad50 = call i32 @function_dab8()
  store i32 %v0_ad50, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_ad5c = load i32, i32* %r4.global-to-local, align 4
  %v2_ad5c = add i32 %v1_ad5c, 48
  %v3_ad5c = inttoptr i32 %v2_ad5c to i32*
  store i32 %v0_ad50, i32* %v3_ad5c, align 4
  %v0_ad60 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad60 = trunc i32 %v0_ad60 to i8
  %v2_ad60 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad60 = add i32 %v2_ad60, 56
  %v4_ad60 = inttoptr i32 %v3_ad60 to i8*
  store i8 %v1_ad60, i8* %v4_ad60, align 1
  %v0_ad64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad64 = trunc i32 %v0_ad64 to i8
  %v2_ad64 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad64 = add i32 %v2_ad64, 58
  %v4_ad64 = inttoptr i32 %v3_ad64 to i8*
  store i8 %v1_ad64, i8* %v4_ad64, align 1
  %v0_ad68 = load i32, i32* @r7, align 4
  %v1_ad68 = trunc i32 %v0_ad68 to i8
  %v2_ad68 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad68 = add i32 %v2_ad68, 59
  %v4_ad68 = inttoptr i32 %v3_ad68 to i8*
  store i8 %v1_ad68, i8* %v4_ad68, align 1
  %v0_ad6c = load i32, i32* @r5, align 4
  %v1_ad6c = load i32, i32* %r4.global-to-local, align 4
  %v2_ad6c = add i32 %v1_ad6c, 52
  %v3_ad6c = inttoptr i32 %v2_ad6c to i32*
  store i32 %v0_ad6c, i32* %v3_ad6c, align 4
  %v0_ad70 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad70 = trunc i32 %v0_ad70 to i8
  %v2_ad70 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad70 = add i32 %v2_ad70, 57
  %v4_ad70 = inttoptr i32 %v3_ad70 to i8*
  store i8 %v1_ad70, i8* %v4_ad70, align 1
  %v3_ad74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad74, i32* %r3.global-to-local, align 4
  %v1_ad78 = add i32 %v3_ad74, 1
  store i32 %v1_ad78, i32* @r4, align 4
  %v0_ad7c = load i32, i32* %fp.global-to-local, align 4
  %v9_ad7c = icmp eq i32 %v0_ad7c, %v1_ad78
  store i1 %v9_ad7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ad78, i32* %stack_var_-40, align 4
  %v8_ad84 = icmp sgt i32 %v0_ad7c, %v1_ad78
  br i1 %v8_ad84, label %dec_label_pc_aba4, label %dec_label_pc_ad88.preheader

dec_label_pc_ad88.preheader:                      ; preds = %bb75, %dec_label_pc_aa9c
  %v0_ad8c13 = phi i32 [ %v0_aacc, %dec_label_pc_aa9c ], [ %v0_ad7c, %bb75 ]
  %v2_ada8 = icmp eq i32 %v6_aa40, -1
  %v7_ada8 = icmp eq i32 %v6_aa40, -1
  %v3_af38 = icmp eq i32 %v3_aaac, 65535
  %v2_afb4 = icmp eq i32 %v1_aac8, 0
  br label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_afd4.dec_label_pc_ad88_crit_edge, %dec_label_pc_ad88.preheader
  %v0_ad8c = phi i32 [ %v0_ad8c.pre, %dec_label_pc_afd4.dec_label_pc_ad88_crit_edge ], [ %v0_ad8c13, %dec_label_pc_ad88.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ad8c = icmp eq i32 %v0_ad8c, 0
  store i1 %v2_ad8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp76 = icmp slt i32 %v0_ad8c, 1
  br i1 %tmp76, label %dec_label_pc_afd4, label %dec_label_pc_ad98

dec_label_pc_ad98:                                ; preds = %dec_label_pc_ad88
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_aea0

dec_label_pc_ada4:                                ; preds = %dec_label_pc_aea0
  store i32 %v6_aa40, i32* %r0.global-to-local, align 4
  store i1 %v7_ada8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ada8, label %dec_label_pc_af28, label %dec_label_pc_adb0

dec_label_pc_adb0:                                ; preds = %dec_label_pc_aec0, %dec_label_pc_ada4
  store i32 %v3_aaac, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_af38, label %dec_label_pc_af44, label %dec_label_pc_adc4

dec_label_pc_adc4:                                ; preds = %dec_label_pc_af28.dec_label_pc_adc4_crit_edge, %dec_label_pc_adb0
  %v1_adc8 = phi i32 [ %v1_adc8.pre, %dec_label_pc_af28.dec_label_pc_adc4_crit_edge ], [ 65535, %dec_label_pc_adb0 ]
  store i32 %v3_aac0, i32* %r3.global-to-local, align 4
  %v9_adc8 = icmp eq i32 %v3_aac0, %v1_adc8
  store i1 %v9_adc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_adc8, label %dec_label_pc_af60, label %dec_label_pc_add0

dec_label_pc_add0:                                ; preds = %dec_label_pc_af44.dec_label_pc_add0_crit_edge, %dec_label_pc_adc4
  %v1_add4 = phi i32 [ %v1_add4.pre, %dec_label_pc_af44.dec_label_pc_add0_crit_edge ], [ %v1_adc8, %dec_label_pc_adc4 ]
  store i32 %v3_aac4, i32* %ip.global-to-local, align 4
  %v9_add4 = icmp eq i32 %v3_aac4, %v1_add4
  store i1 %v9_add4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_add4, label %dec_label_pc_af7c, label %dec_label_pc_addc

dec_label_pc_addc:                                ; preds = %dec_label_pc_af60.dec_label_pc_addc_crit_edge, %dec_label_pc_add0
  %v1_ade0 = phi i32 [ %v1_ade0.pre, %dec_label_pc_af60.dec_label_pc_addc_crit_edge ], [ %v1_add4, %dec_label_pc_add0 ]
  store i32 %v6_a97c, i32* %r0.global-to-local, align 4
  %v9_ade0 = icmp eq i32 %v6_a97c, %v1_ade0
  store i1 %v9_ade0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ade0, label %dec_label_pc_af98, label %dec_label_pc_ade8

dec_label_pc_ade8:                                ; preds = %dec_label_pc_af7c.dec_label_pc_ade8_crit_edge, %dec_label_pc_addc
  %v1_adec = phi i32 [ %v1_adec.pre, %dec_label_pc_af7c.dec_label_pc_ade8_crit_edge ], [ %v1_ade0, %dec_label_pc_addc ]
  store i32 %v6_a994, i32* %r2.global-to-local, align 4
  %v9_adec = icmp eq i32 %v6_a994, %v1_adec
  store i1 %v9_adec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_adec, label %dec_label_pc_afac, label %dec_label_pc_adf4

dec_label_pc_adf4:                                ; preds = %dec_label_pc_af98, %dec_label_pc_ade8
  store i32 %v1_aac8, i32* %r3.global-to-local, align 4
  store i1 %v2_afb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afb4, label %dec_label_pc_ae00, label %dec_label_pc_afc0

dec_label_pc_ae00:                                ; preds = %dec_label_pc_adf4, %dec_label_pc_afac, %dec_label_pc_afc0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae04 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae04 = trunc i32 %v0_ae04 to i8
  %v2_ae04 = load i32, i32* @r5, align 4
  %v3_ae04 = add i32 %v2_ae04, 10
  %v4_ae04 = inttoptr i32 %v3_ae04 to i8*
  store i8 %v1_ae04, i8* %v4_ae04, align 1
  %v0_ae08 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae08 = trunc i32 %v0_ae08 to i8
  %v2_ae08 = load i32, i32* @r5, align 4
  %v3_ae08 = add i32 %v2_ae08, 11
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v0_ae0c = load i32, i32* @r5, align 4
  store i32 %v0_ae0c, i32* @r0, align 4
  %v2_ae10 = call i32 @function_c690(i32 %v0_ae0c, i32 20)
  %v3_ae10 = trunc i32 %v2_ae10 to i8
  %v4_ae1421 = udiv i32 %v2_ae10, 256
  %v1_ae18 = trunc i32 %v4_ae1421 to i8
  %v2_ae18 = load i32, i32* @r5, align 4
  %v3_ae18 = add i32 %v2_ae18, 11
  %v4_ae18 = inttoptr i32 %v3_ae18 to i8*
  store i8 %v1_ae18, i8* %v4_ae18, align 1
  %v3_ae1c = load i32, i32* @r5, align 4
  %v4_ae1c = add i32 %v3_ae1c, 10
  %v5_ae1c = inttoptr i32 %v4_ae1c to i8*
  store i8 %v3_ae10, i8* %v5_ae1c, align 1
  %v0_ae20 = load i32, i32* @r6, align 4
  store i32 %v0_ae20, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_ae2c = load i32, i32* %r7.global-to-local, align 4
  %v1_ae2c = trunc i32 %v0_ae2c to i8
  %v3_ae2c = add i32 %v0_ae20, 16
  %v4_ae2c = inttoptr i32 %v3_ae2c to i8*
  store i8 %v1_ae2c, i8* %v4_ae2c, align 1
  %v0_ae30 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae30 = trunc i32 %v0_ae30 to i8
  %v2_ae30 = load i32, i32* @r6, align 4
  %v3_ae30 = add i32 %v2_ae30, 17
  %v4_ae30 = inttoptr i32 %v3_ae30 to i8*
  store i8 %v1_ae30, i8* %v4_ae30, align 1
  %v0_ae34 = load i32, i32* @r5, align 4
  store i32 %v0_ae34, i32* %r0.global-to-local, align 4
  %v4_ae38 = call i32 @function_c6ec(i32 %v0_ae34, i32 %v0_ae20, i32 10240, i32 40)
  %v5_ae38 = trunc i32 %v4_ae38 to i8
  store i32 %v4_ae38, i32* %r0.global-to-local, align 4
  %v4_ae3c22 = udiv i32 %v4_ae38, 256
  %v1_ae40 = trunc i32 %v4_ae3c22 to i8
  %v2_ae40 = load i32, i32* @r6, align 4
  %v3_ae40 = add i32 %v2_ae40, 17
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  %v3_ae44 = load i32, i32* @r6, align 4
  %v4_ae44 = add i32 %v3_ae44, 16
  %v5_ae44 = inttoptr i32 %v4_ae44 to i8*
  store i8 %v5_ae38, i8* %v5_ae44, align 1
  %v3_ae48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae48, i32* %r3.global-to-local, align 4
  %v0_ae4c = load i32, i32* @r5, align 4
  %v1_ae4c = add i32 %v0_ae4c, 20
  %v2_ae4c = inttoptr i32 %v1_ae4c to i32*
  %v3_ae4c = load i32, i32* %v2_ae4c, align 4
  %v3_ae54 = udiv i32 %v3_ae4c, 65536
  store i32 %v3_ae54, i32* %r2.global-to-local, align 4
  %v5_ae58 = mul i32 %v3_ae48, 24
  %v1_ae5c = load i32, i32* @r8, align 4
  %v2_ae5c = add i32 %v1_ae5c, %v5_ae58
  store i32 %v2_ae5c, i32* %ip.global-to-local, align 4
  %v3_ae6020 = udiv i32 %v3_ae4c, 16777216
  %v1_ae64 = trunc i32 %v3_ae6020 to i8
  %v3_ae64 = add i32 %v2_ae5c, 3
  %v4_ae64 = inttoptr i32 %v3_ae64 to i8*
  store i8 %v1_ae64, i8* %v4_ae64, align 1
  %v0_ae68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae68 = trunc i32 %v0_ae68 to i8
  %v2_ae68 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae68 = add i32 %v2_ae68, 2
  %v4_ae68 = inttoptr i32 %v3_ae68 to i8*
  store i8 %v1_ae68, i8* %v4_ae68, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae70 = load i32, i32* @r5, align 4
  store i32 %v0_ae70, i32* %r1.global-to-local, align 4
  %v0_ae74 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ae74, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ae80 = load i32, i32* %ip.global-to-local, align 4
  %v6_ae88 = inttoptr i32 %v0_ae70 to i32*
  %v7_ae88 = call i32 @function_1122c(i32 %v0_ae74, i32* %v6_ae88, i32 60, i32 16384, i32 %v0_ae80, i32 16)
  %v3_ae8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae8c, i32* %r3.global-to-local, align 4
  %v1_ae90 = add i32 %v3_ae8c, 1
  store i32 %v1_ae90, i32* %r0.global-to-local, align 4
  %v1_ae94 = load i32, i32* %fp.global-to-local, align 4
  %v9_ae94 = icmp eq i32 %v1_ae90, %v1_ae94
  store i1 %v9_ae94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ae90, i32* %stack_var_-40, align 4
  %v6_ae9c = icmp slt i32 %v1_ae90, %v1_ae94
  br i1 %v6_ae9c, label %dec_label_pc_aea0, label %dec_label_pc_afd4

dec_label_pc_aea0:                                ; preds = %dec_label_pc_ae00, %dec_label_pc_ad98
  %v1_aeb0 = phi i32 [ %v1_ae90, %dec_label_pc_ae00 ], [ 0, %dec_label_pc_ad98 ]
  %v5_aea4 = mul i32 %v1_aeb0, 24
  %v1_aea8 = load i32, i32* @r8, align 4
  %v2_aea8 = add i32 %v1_aea8, %v5_aea4
  store i32 %v2_aea8, i32* %r3.global-to-local, align 4
  %v1_aeac = add i32 %v2_aea8, 20
  %v2_aeac = inttoptr i32 %v1_aeac to i8*
  %v3_aeac = load i8, i8* %v2_aeac, align 1
  %v4_aeac = zext i8 %v3_aeac to i32
  store i32 %v4_aeac, i32* %r2.global-to-local, align 4
  %v0_aeb0 = load i32, i32* %sb.global-to-local, align 4
  %v4_aeb0 = mul i32 %v1_aeb0, 4
  %v5_aeb0 = add i32 %v0_aeb0, %v4_aeb0
  %v6_aeb0 = inttoptr i32 %v5_aeb0 to i32*
  %v7_aeb0 = load i32, i32* %v6_aeb0, align 4
  store i32 %v7_aeb0, i32* @r5, align 4
  %v2_aeb4 = icmp ugt i8 %v3_aeac, 30
  %v7_aeb4 = icmp eq i8 %v3_aeac, 31
  store i1 %v7_aeb4, i1* %cpsr_z.global-to-local, align 1
  %v1_aeb8 = add i32 %v7_aeb0, 20
  store i32 %v1_aeb8, i32* @r6, align 4
  %v2_aebc = xor i1 %v7_aeb4, true
  %v3_aebc = and i1 %v2_aeb4, %v2_aebc
  br i1 %v3_aebc, label %dec_label_pc_ada4, label %dec_label_pc_aec0

dec_label_pc_aec0:                                ; preds = %dec_label_pc_aea0
  %v1_aec0 = add i32 %v2_aea8, 16
  %v2_aec0 = inttoptr i32 %v1_aec0 to i32*
  %v3_aec0 = load i32, i32* %v2_aec0, align 4
  store i32 %v3_aec0, i32* %r4.global-to-local, align 4
  %v0_aec4 = call i32 @function_dab8()
  store i32 %v0_aec4, i32* %r0.global-to-local, align 4
  %v3_aec8 = load i32, i32* %stack_var_-40, align 4
  %v5_aed0 = mul i32 %v3_aec8, 24
  %v0_aed4 = load i32, i32* %r4.global-to-local, align 4
  %v1_aed8 = load i32, i32* @r8, align 4
  %v2_aed8 = add i32 %v1_aed8, %v5_aed0
  store i32 %v2_aed8, i32* %r1.global-to-local, align 4
  %v1_aedc = and i32 %v0_aed4, 65280
  store i32 %v1_aedc, i32* %r3.global-to-local, align 4
  %v1_aed4 = udiv i32 %v0_aed4, 256
  %v3_aee0 = and i32 %v1_aed4, 65280
  store i32 %v3_aee0, i32* %r2.global-to-local, align 4
  %v3_aee4 = mul i32 %v0_aed4, 16777216
  store i32 %v3_aee4, i32* %ip.global-to-local, align 4
  %v1_aee8 = add i32 %v2_aed8, 20
  %v2_aee8 = inttoptr i32 %v1_aee8 to i8*
  %v3_aee8 = load i8, i8* %v2_aee8, align 1
  %v4_aee8 = zext i8 %v3_aee8 to i32
  %v4_aeec = mul nuw nsw i32 %v1_aedc, 256
  %v5_aeec = or i32 %v4_aeec, %v3_aee4
  store i32 %v5_aeec, i32* %ip.global-to-local, align 4
  %v2_aef4 = call i32 @llvm.bswap.i32(i32 %v0_aed4)
  %v7_aef8 = lshr i32 %v0_aec4, %v4_aee8
  %v8_aef8 = add i32 %v7_aef8, %v2_aef4
  store i32 %v8_aef8, i32* %r2.global-to-local, align 4
  %v3_af04 = mul i32 %v8_aef8, 16777216
  %v1_aefc = mul i32 %v8_aef8, 256
  %v4_af08 = and i32 %v1_aefc, 16711680
  %v5_af08 = or i32 %v4_af08, %v3_af04
  store i32 %v5_af08, i32* %r1.global-to-local, align 4
  store i32 %v6_aa40, i32* %r0.global-to-local, align 4
  %v2_af18 = call i32 @llvm.bswap.i32(i32 %v8_aef8)
  store i32 %v2_af18, i32* %r3.global-to-local, align 4
  store i1 %v7_ada8, i1* %cpsr_z.global-to-local, align 1
  %v1_af20 = load i32, i32* @r5, align 4
  %v2_af20 = add i32 %v1_af20, 16
  %v3_af20 = inttoptr i32 %v2_af20 to i32*
  store i32 %v2_af18, i32* %v3_af20, align 4
  br i1 %v2_ada8, label %dec_label_pc_af28, label %dec_label_pc_adb0

dec_label_pc_af28:                                ; preds = %dec_label_pc_aec0, %dec_label_pc_ada4
  %v0_af28 = call i32 @function_dab8()
  store i32 %v0_af28, i32* %r0.global-to-local, align 4
  store i32 %v3_aaac, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af38, i1* %cpsr_z.global-to-local, align 1
  %v1_af3c = load i32, i32* @r5, align 4
  %v2_af3c = add i32 %v1_af3c, 12
  %v3_af3c = inttoptr i32 %v2_af3c to i32*
  store i32 %v0_af28, i32* %v3_af3c, align 4
  br i1 %v3_af38, label %dec_label_pc_af44, label %dec_label_pc_af28.dec_label_pc_adc4_crit_edge

dec_label_pc_af28.dec_label_pc_adc4_crit_edge:    ; preds = %dec_label_pc_af28
  %v1_adc8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_adc4

dec_label_pc_af44:                                ; preds = %dec_label_pc_af28, %dec_label_pc_adb0
  %v0_af44 = call i32 @function_dab8()
  %v1_af44 = trunc i32 %v0_af44 to i8
  store i32 %v0_af44, i32* %r0.global-to-local, align 4
  %v4_af4823 = udiv i32 %v0_af44, 256
  %v1_af4c = trunc i32 %v4_af4823 to i8
  %v2_af4c = load i32, i32* @r5, align 4
  %v3_af4c = add i32 %v2_af4c, 5
  %v4_af4c = inttoptr i32 %v3_af4c to i8*
  store i8 %v1_af4c, i8* %v4_af4c, align 1
  store i32 %v3_aac0, i32* %r3.global-to-local, align 4
  %v1_af54 = load i32, i32* @r4, align 4
  %v9_af54 = icmp eq i32 %v3_aac0, %v1_af54
  store i1 %v9_af54, i1* %cpsr_z.global-to-local, align 1
  %v3_af58 = load i32, i32* @r5, align 4
  %v4_af58 = add i32 %v3_af58, 4
  %v5_af58 = inttoptr i32 %v4_af58 to i8*
  store i8 %v1_af44, i8* %v5_af58, align 1
  %v0_af5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af5c, label %dec_label_pc_af60, label %dec_label_pc_af44.dec_label_pc_add0_crit_edge

dec_label_pc_af44.dec_label_pc_add0_crit_edge:    ; preds = %dec_label_pc_af44
  %v1_add4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_add0

dec_label_pc_af60:                                ; preds = %dec_label_pc_af44, %dec_label_pc_adc4
  %v0_af60 = call i32 @function_dab8()
  %v1_af60 = trunc i32 %v0_af60 to i8
  store i32 %v0_af60, i32* %r0.global-to-local, align 4
  store i32 %v3_aac4, i32* %ip.global-to-local, align 4
  %v4_af68 = sdiv i32 %v0_af60, 256
  store i32 %v4_af68, i32* %r3.global-to-local, align 4
  %v1_af6c = load i32, i32* @r4, align 4
  %v9_af6c = icmp eq i32 %v3_aac4, %v1_af6c
  store i1 %v9_af6c, i1* %cpsr_z.global-to-local, align 1
  %v3_af70 = load i32, i32* @r5, align 4
  %v4_af70 = add i32 %v3_af70, 20
  %v5_af70 = inttoptr i32 %v4_af70 to i8*
  store i8 %v1_af60, i8* %v5_af70, align 1
  %v0_af74 = load i32, i32* %r3.global-to-local, align 4
  %v1_af74 = trunc i32 %v0_af74 to i8
  %v2_af74 = load i32, i32* @r6, align 4
  %v3_af74 = add i32 %v2_af74, 1
  %v4_af74 = inttoptr i32 %v3_af74 to i8*
  store i8 %v1_af74, i8* %v4_af74, align 1
  %v0_af78 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af78, label %dec_label_pc_af7c, label %dec_label_pc_af60.dec_label_pc_addc_crit_edge

dec_label_pc_af60.dec_label_pc_addc_crit_edge:    ; preds = %dec_label_pc_af60
  %v1_ade0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_addc

dec_label_pc_af7c:                                ; preds = %dec_label_pc_af60, %dec_label_pc_add0
  %v0_af7c = call i32 @function_dab8()
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v4_af80 = sdiv i32 %v0_af7c, 256
  store i32 %v4_af80, i32* %r3.global-to-local, align 4
  %v3_af84 = load i32, i32* @r6, align 4
  %v4_af84 = add i32 %v3_af84, 2
  %v5_af84 = inttoptr i32 %v4_af84 to i8*
  store i8 %v1_af7c, i8* %v5_af84, align 1
  store i32 %v6_a97c, i32* %r0.global-to-local, align 4
  %v1_af8c = load i32, i32* @r4, align 4
  %v9_af8c = icmp eq i32 %v6_a97c, %v1_af8c
  store i1 %v9_af8c, i1* %cpsr_z.global-to-local, align 1
  %v0_af90 = load i32, i32* %r3.global-to-local, align 4
  %v1_af90 = trunc i32 %v0_af90 to i8
  %v2_af90 = load i32, i32* @r6, align 4
  %v3_af90 = add i32 %v2_af90, 3
  %v4_af90 = inttoptr i32 %v3_af90 to i8*
  store i8 %v1_af90, i8* %v4_af90, align 1
  %v0_af94 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af94, label %dec_label_pc_af98, label %dec_label_pc_af7c.dec_label_pc_ade8_crit_edge

dec_label_pc_af7c.dec_label_pc_ade8_crit_edge:    ; preds = %dec_label_pc_af7c
  %v1_adec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ade8

dec_label_pc_af98:                                ; preds = %dec_label_pc_af7c, %dec_label_pc_addc
  %v0_af98 = call i32 @function_dab8()
  store i32 %v0_af98, i32* %r0.global-to-local, align 4
  store i32 %v6_a994, i32* %r2.global-to-local, align 4
  %v1_afa0 = load i32, i32* @r4, align 4
  %v9_afa0 = icmp eq i32 %v6_a994, %v1_afa0
  store i1 %v9_afa0, i1* %cpsr_z.global-to-local, align 1
  %v1_afa4 = load i32, i32* @r6, align 4
  %v2_afa4 = add i32 %v1_afa4, 4
  %v3_afa4 = inttoptr i32 %v2_afa4 to i32*
  store i32 %v0_af98, i32* %v3_afa4, align 4
  br i1 %v9_afa0, label %dec_label_pc_afac, label %dec_label_pc_adf4

dec_label_pc_afac:                                ; preds = %dec_label_pc_af98, %dec_label_pc_ade8
  %v0_afac = call i32 @function_dab8()
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  store i32 %v1_aac8, i32* %r3.global-to-local, align 4
  store i1 %v2_afb4, i1* %cpsr_z.global-to-local, align 1
  %v1_afb8 = load i32, i32* @r6, align 4
  %v2_afb8 = add i32 %v1_afb8, 8
  %v3_afb8 = inttoptr i32 %v2_afb8 to i32*
  store i32 %v0_afac, i32* %v3_afb8, align 4
  br i1 %v2_afb4, label %dec_label_pc_ae00, label %dec_label_pc_afc0

dec_label_pc_afc0:                                ; preds = %dec_label_pc_adf4, %dec_label_pc_afac
  %v0_afc0 = call i32 @function_dab8()
  %v1_afc0 = trunc i32 %v0_afc0 to i8
  store i32 %v0_afc0, i32* %r0.global-to-local, align 4
  %v4_afc4 = sdiv i32 %v0_afc0, 256
  store i32 %v4_afc4, i32* %r3.global-to-local, align 4
  %v1_afc8 = trunc i32 %v4_afc4 to i8
  %v2_afc8 = load i32, i32* @r6, align 4
  %v3_afc8 = add i32 %v2_afc8, 19
  %v4_afc8 = inttoptr i32 %v3_afc8 to i8*
  store i8 %v1_afc8, i8* %v4_afc8, align 1
  %v3_afcc = load i32, i32* @r6, align 4
  %v4_afcc = add i32 %v3_afcc, 18
  %v5_afcc = inttoptr i32 %v4_afcc to i8*
  store i8 %v1_afc0, i8* %v5_afcc, align 1
  br label %dec_label_pc_ae00

dec_label_pc_afd4:                                ; preds = %dec_label_pc_ae00, %dec_label_pc_ad88
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_afd8 = call i32 @function_10c8c(i32* null)
  store i32 %v2_afd8, i32* %r0.global-to-local, align 4
  store i32 %v2_aa50, i32* %ip.global-to-local, align 4
  %v9_afe0 = icmp eq i32 %v2_aa50, %v2_afd8
  store i1 %v9_afe0, i1* %cpsr_z.global-to-local, align 1
  %v6_afe4 = icmp slt i32 %v2_aa50, %v2_afd8
  br i1 %v6_afe4, label %dec_label_pc_afe8, label %dec_label_pc_afd4.dec_label_pc_ad88_crit_edge

dec_label_pc_afd4.dec_label_pc_ad88_crit_edge:    ; preds = %dec_label_pc_afd4
  %v0_ad8c.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_ad88

dec_label_pc_afe8:                                ; preds = %dec_label_pc_afd4, %dec_label_pc_a880, %dec_label_pc_aff0
  %v29_afec = phi i32 [ %v3_aa64, %dec_label_pc_a880 ], [ %v1_aff4, %dec_label_pc_aff0 ], [ %v2_afd8, %dec_label_pc_afd4 ]
  store i32 %v3_a880, i32* %r4.global-to-local, align 4
  store i32 %v12_a880, i32* %r7.global-to-local, align 4
  ret i32 %v29_afec

dec_label_pc_aff0:                                ; preds = %dec_label_pc_aa74
  %v0_aff0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_aff0, i32* %r0.global-to-local, align 4
  %v1_aff4 = call i32 @function_109bc(i32 %v0_aff0)
  store i32 %v1_aff4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_afe8

; uselistorder directives
  uselistorder i32 %v1_aff4, { 1, 0 }
  uselistorder i32 %v4_afc4, { 1, 0 }
  uselistorder i32 %v0_afc0, { 0, 2, 1 }
  uselistorder i32 %v0_af60, { 0, 2, 1 }
  uselistorder i32 %v0_af44, { 0, 2, 1 }
  uselistorder i32 %v2_af18, { 1, 0 }
  uselistorder i32 %v8_aef8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_aee4, { 1, 0 }
  uselistorder i32 %v0_aed4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_ae90, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_ae38, { 0, 2, 1 }
  uselistorder i32 %v0_ae20, { 1, 0, 2 }
  uselistorder i1 %v2_afb4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_af38, { 3, 2, 0, 1 }
  uselistorder i1 %v7_ada8, { 2, 1, 0 }
  uselistorder i32 %v1_ad78, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ad24, { 1, 0 }
  uselistorder i32 %v3_ab7c, { 1, 0 }
  uselistorder i32 %v3_ab78, { 1, 0 }
  uselistorder i32 %v1_ab74, { 1, 0 }
  uselistorder i32 %v1_ab6c, { 1, 0 }
  uselistorder i32 %v3_ab4c, { 1, 0 }
  uselistorder i32 %v1_ab40, { 1, 0 }
  uselistorder i32 %v1_ab3c, { 1, 0 }
  uselistorder i32 %v1_ab38, { 1, 0 }
  uselistorder i32 %v1_ab30, { 1, 0 }
  uselistorder i32 %v1_aafc, { 1, 0 }
  uselistorder i32 %v0_aad0, { 1, 0, 2 }
  uselistorder i32 %v1_aac8, { 2, 1, 3, 0 }
  uselistorder i32 %v3_aaac, { 1, 0, 2 }
  uselistorder i32 %v3_aaa0, { 2, 0, 1 }
  uselistorder i1 %v7_aa94, { 1, 0 }
  uselistorder i1 %v7_aa68, { 1, 0 }
  uselistorder i32 %v3_aa64, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_aa50, { 2, 1, 0 }
  uselistorder i32 %v6_aa40, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_a994, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a97c, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v6_a944, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a92c, { 1, 2, 0 }
  uselistorder i32 %v7_a8e8, { 1, 0, 2 }
  uselistorder i32 %v6_a8c4, { 1, 2, 0 }
  uselistorder i32 %v1_a884, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_afe8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_afc0, { 1, 0 }
  uselistorder label %dec_label_pc_ae00, { 2, 1, 0 }
  uselistorder label %bb75, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b000(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b000:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v1_b004 = urem i32 %arg2, 256
  store i32 %v1_b004, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_b004, i32* %r0.global-to-local, align 4
  %v1_b018 = urem i32 %arg4, 256
  store i32 %v1_b018, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_b024 = call i32 @function_1157c(i32 %v1_b004, i32 4)
  %v0_b030 = load i32, i32* @sl, align 4
  store i32 %v0_b030, i32* %r0.global-to-local, align 4
  %v2_b034 = call i32 @function_1157c(i32 %v0_b030, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_b040 = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_b034, i32* @sb, align 4
  %v0_b050 = load i32, i32* @r4, align 4
  store i32 %v0_b050, i32* %r0.global-to-local, align 4
  %v5_b054 = inttoptr i32 %v0_b040 to i32*
  %v6_b054 = call i32 @function_829c(i32 %v0_b050, i32* %v5_b054, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b058 = load i32, i32* @r5, align 4
  %v0_b064 = load i32, i32* @r6, align 4
  store i32 %v0_b064, i32* %r3.global-to-local, align 4
  %v0_b068 = load i32, i32* @r4, align 4
  store i32 %v0_b068, i32* %r0.global-to-local, align 4
  %v3_b06c = urem i32 %v6_b054, 65536
  store i32 %v3_b06c, i32* @fp, align 4
  %v5_b070 = inttoptr i32 %v0_b058 to i32*
  %v6_b070 = call i32 @function_829c(i32 %v0_b068, i32* %v5_b070, i32 6, i32 %v0_b064, i32 ptrtoint (i32* @0 to i32))
  %v0_b074 = load i32, i32* @r5, align 4
  %v3_b078 = mul i32 %v6_b070, 65536
  store i32 %v3_b078, i32* @r8, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b084 = load i32, i32* @r4, align 4
  store i32 %v0_b084, i32* %r0.global-to-local, align 4
  %v5_b088 = inttoptr i32 %v0_b074 to i32*
  %v6_b088 = call i32 @function_829c(i32 %v0_b084, i32* %v5_b088, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_b098 = urem i32 %v6_b088, 65536
  %v0_b09c = load i32, i32* @r5, align 4
  %v0_b0a0 = load i32, i32* @r4, align 4
  store i32 %v0_b0a0, i32* %r0.global-to-local, align 4
  %v5_b0a8 = inttoptr i32 %v0_b09c to i32*
  %v6_b0a8 = call i32 @function_829c(i32 %v0_b0a0, i32* %v5_b0a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b0b4 = urem i32 %v6_b0a8, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_b0d0 = call i32 @function_10c8c(i32* null)
  %v0_b0d4 = load i32, i32* @r8, align 4
  %v3_b0d4 = udiv i32 %v0_b0d4, 65536
  store i32 %v3_b0d4, i32* %r3.global-to-local, align 4
  %v1_b0d8 = load i32, i32* @r6, align 4
  %v9_b0d8 = icmp eq i32 %v3_b0d4, %v1_b0d8
  %v1_b0e04 = load i32, i32* @r7, align 4
  %v2_b0e05 = add i32 %v1_b0e04, %v2_b0d0
  store i32 %v2_b0e05, i32* %r0.global-to-local, align 4
  br i1 %v9_b0d8, label %dec_label_pc_b2bc, label %bb

bb:                                               ; preds = %dec_label_pc_b000
  %v2_b0dc = mul nuw nsw i32 %v3_b0d4, 256
  %v4_b0e4 = and i32 %v2_b0dc, 65280
  store i32 %v4_b0e4, i32* %r3.global-to-local, align 4
  %v5_b0ec = udiv i32 %v0_b0d4, 16777216
  %v6_b0ec = or i32 %v4_b0e4, %v5_b0ec
  br label %dec_label_pc_b0f4

dec_label_pc_b0f4:                                ; preds = %bb, %dec_label_pc_b2bc
  %storemerge = phi i32 [ %v6_b0ec, %bb ], [ %v3_b2c4, %dec_label_pc_b2bc ]
  store i32 %storemerge, i32* @r7, align 4
  %v0_b0f4 = load i32, i32* @sl, align 4
  %tmp47 = icmp slt i32 %v0_b0f4, 1
  br i1 %tmp47, label %dec_label_pc_b28c, label %dec_label_pc_b0fc

dec_label_pc_b0fc:                                ; preds = %dec_label_pc_b0f4
  %v0_b0fc = load i32, i32* @fp, align 4
  %v3_b0fc = udiv i32 %v0_b0fc, 256
  %v1_b100 = mul i32 %v0_b0fc, 256
  %v4_b104 = and i32 %v1_b100, 65280
  %v5_b104 = or i32 %v4_b104, %v3_b0fc
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* @r5, align 4
  %v5_b114 = trunc i32 %v3_b0fc to i8
  %v3_b11c3 = udiv i32 %v5_b104, 256
  store i32 %v3_b11c3, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_b128 = trunc i32 %v3_b11c3 to i8
  store i8 %v4_b128, i8* %stack_var_-84, align 1
  %v3_b1cc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_b150

dec_label_pc_b130:                                ; preds = %dec_label_pc_b1b4
  %v0_b130 = load i32, i32* @r6, align 4
  %v1_b130 = load i32, i32* @sb, align 4
  %v2_b130 = add i32 %v1_b130, %v0_b130
  %v3_b130 = inttoptr i32 %v2_b130 to i32*
  %v4_b130 = load i32, i32* %v3_b130, align 4
  store i32 %v4_b130, i32* %r0.global-to-local, align 4
  %v3_b13c = inttoptr i32 %v0_b1d0 to %sockaddr*
  %v4_b13c = call i32 @function_110ec(i32 %v4_b130, %sockaddr* %v3_b13c, i32 16)
  store i32 %v4_b13c, i32* %r0.global-to-local, align 4
  %v0_b140 = load i32, i32* @r8, align 4
  %v1_b140 = load i32, i32* @sl, align 4
  %v9_b140 = icmp eq i32 %v0_b140, %v1_b140
  %v0_b144 = load i32, i32* @r6, align 4
  %v1_b144 = add i32 %v0_b144, 4
  store i32 %v1_b144, i32* @r6, align 4
  %v0_b148 = load i32, i32* @r5, align 4
  %v1_b148 = add i32 %v0_b148, 24
  store i32 %v1_b148, i32* @r5, align 4
  br i1 %v9_b140, label %dec_label_pc_b248, label %dec_label_pc_b150

dec_label_pc_b150:                                ; preds = %dec_label_pc_b1dc, %dec_label_pc_b130, %dec_label_pc_b0fc
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_b15c = call i32 @function_1157c(i32 65535, i32 1)
  store i32 %v2_b15c, i32* %r0.global-to-local, align 4
  store i32 %v2_b024, i32* %r3.global-to-local, align 4
  %v0_b168 = load i32, i32* @fp, align 4
  %v9_b168 = icmp eq i32 %v0_b168, 65535
  %v1_b16c = load i32, i32* @r6, align 4
  %v3_b16c = add i32 %v1_b16c, %v2_b024
  %v4_b16c = inttoptr i32 %v3_b16c to i32*
  store i32 %v2_b15c, i32* %v4_b16c, align 4
  br i1 %v9_b168, label %dec_label_pc_b2a8, label %dec_label_pc_b174

dec_label_pc_b174:                                ; preds = %dec_label_pc_b150
  %v2_b178 = load i8, i8* %stack_var_-84, align 1
  %v3_b178 = sext i8 %v2_b178 to i32
  store i32 %v3_b178, i32* %r3.global-to-local, align 4
  %v2_b17c = load i32, i32* @r5, align 4
  %v3_b17c = add i32 %v2_b17c, 2
  %v4_b17c = inttoptr i32 %v3_b17c to i8*
  store i8 %v5_b114, i8* %v4_b17c, align 1
  %v0_b180 = load i32, i32* %r3.global-to-local, align 4
  %v1_b180 = trunc i32 %v0_b180 to i8
  %v2_b180 = load i32, i32* @r5, align 4
  %v3_b180 = add i32 %v2_b180, 3
  %v4_b180 = inttoptr i32 %v3_b180 to i8*
  store i8 %v1_b180, i8* %v4_b180, align 1
  br label %dec_label_pc_b184

dec_label_pc_b184:                                ; preds = %dec_label_pc_b2a8, %dec_label_pc_b174
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b190 = call i32 @function_11290(i32 2, i32 2, i32 17)
  store i32 %v3_b190, i32* %r0.global-to-local, align 4
  %v7_b194 = icmp eq i32 %v3_b190, -1
  %v0_b198 = load i32, i32* @r8, align 4
  %v1_b198 = add i32 %v0_b198, 1
  store i32 %v1_b198, i32* @r8, align 4
  store i32 0, i32* @lr, align 4
  %v1_b1ac = load i32, i32* @r6, align 4
  %v2_b1ac = load i32, i32* @sb, align 4
  %v3_b1ac = add i32 %v2_b1ac, %v1_b1ac
  %v4_b1ac = inttoptr i32 %v3_b1ac to i32*
  store i32 %v3_b190, i32* %v4_b1ac, align 4
  br i1 %v7_b194, label %dec_label_pc_b2a0.loopexit, label %dec_label_pc_b1b4

dec_label_pc_b1b4:                                ; preds = %dec_label_pc_b184
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v0_b1cc = load i32, i32* %r0.global-to-local, align 4
  %v4_b1cc = call i32 @function_110c0(i32 %v0_b1cc, %sockaddr* %v3_b1cc, i32 16)
  store i32 %v4_b1cc, i32* %r0.global-to-local, align 4
  %v0_b1d0 = load i32, i32* @r5, align 4
  %v1_b1d0 = add i32 %v0_b1d0, 20
  %v2_b1d0 = inttoptr i32 %v1_b1d0 to i8*
  %v3_b1d0 = load i8, i8* %v2_b1d0, align 1
  %v4_b1d0 = zext i8 %v3_b1d0 to i32
  store i32 %v4_b1d0, i32* %r3.global-to-local, align 4
  %tmp51 = icmp ugt i8 %v3_b1d0, 31
  br i1 %tmp51, label %dec_label_pc_b130, label %dec_label_pc_b1dc

dec_label_pc_b1dc:                                ; preds = %dec_label_pc_b1b4
  %v1_b1dc = add i32 %v0_b1d0, 16
  %v2_b1dc = inttoptr i32 %v1_b1dc to i32*
  %v3_b1dc = load i32, i32* %v2_b1dc, align 4
  store i32 %v3_b1dc, i32* @r4, align 4
  %v0_b1e0 = call i32 @function_dab8()
  store i32 %v0_b1e0, i32* %r0.global-to-local, align 4
  %v0_b1e4 = load i32, i32* @r4, align 4
  %v1_b1e8 = and i32 %v0_b1e4, 65280
  store i32 %v1_b1e8, i32* %r3.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r5, align 4
  %v1_b1f8 = add i32 %v0_b1f8, 20
  %v2_b1f8 = inttoptr i32 %v1_b1f8 to i8*
  %v3_b1f8 = load i8, i8* %v2_b1f8, align 1
  %v4_b1f8 = zext i8 %v3_b1f8 to i32
  %v2_b200 = call i32 @llvm.bswap.i32(i32 %v0_b1e4)
  %v7_b204 = lshr i32 %v0_b1e0, %v4_b1f8
  %v8_b204 = add i32 %v7_b204, %v2_b200
  %v1_b20c = and i32 %v8_b204, 65280
  store i32 %v1_b20c, i32* %r0.global-to-local, align 4
  %v2_b220 = call i32 @llvm.bswap.i32(i32 %v8_b204)
  store i32 %v2_b220, i32* %r3.global-to-local, align 4
  %v2_b224 = add i32 %v0_b1f8, 4
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v2_b220, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* @r5, align 4
  %v0_b22c = load i32, i32* @r6, align 4
  %v1_b22c = load i32, i32* @sb, align 4
  %v2_b22c = add i32 %v1_b22c, %v0_b22c
  %v3_b22c = inttoptr i32 %v2_b22c to i32*
  %v4_b22c = load i32, i32* %v3_b22c, align 4
  store i32 %v4_b22c, i32* %r0.global-to-local, align 4
  %v3_b234 = inttoptr i32 %v0_b228 to %sockaddr*
  %v4_b234 = call i32 @function_110ec(i32 %v4_b22c, %sockaddr* %v3_b234, i32 16)
  store i32 %v4_b234, i32* %r0.global-to-local, align 4
  %v0_b238 = load i32, i32* @r8, align 4
  %v1_b238 = load i32, i32* @sl, align 4
  %v9_b238 = icmp eq i32 %v0_b238, %v1_b238
  %v0_b23c = load i32, i32* @r6, align 4
  %v1_b23c = add i32 %v0_b23c, 4
  store i32 %v1_b23c, i32* @r6, align 4
  %v0_b240 = load i32, i32* @r5, align 4
  %v1_b240 = add i32 %v0_b240, 24
  store i32 %v1_b240, i32* @r5, align 4
  br i1 %v9_b238, label %dec_label_pc_b248, label %dec_label_pc_b150

dec_label_pc_b248:                                ; preds = %dec_label_pc_b1dc, %dec_label_pc_b130, %dec_label_pc_b28c.dec_label_pc_b248_crit_edge
  %v0_b248 = phi i32 [ %v0_b248.pre, %dec_label_pc_b28c.dec_label_pc_b248_crit_edge ], [ %v0_b238, %dec_label_pc_b1dc ], [ %v0_b140, %dec_label_pc_b130 ]
  %tmp48 = icmp slt i32 %v0_b248, 1
  br i1 %tmp48, label %dec_label_pc_b28c, label %dec_label_pc_b250

dec_label_pc_b250:                                ; preds = %dec_label_pc_b248
  %v2_b254 = icmp eq i32 %v1_b0b4, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_b254, label %dec_label_pc_b25c, label %dec_label_pc_b2cc

dec_label_pc_b25c:                                ; preds = %dec_label_pc_b250
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_b264

dec_label_pc_b264:                                ; preds = %dec_label_pc_b264, %dec_label_pc_b25c
  %v0_b270 = phi i32 [ %v1_b270, %dec_label_pc_b264 ], [ 0, %dec_label_pc_b25c ]
  %v0_b268 = phi i32 [ %v1_b284, %dec_label_pc_b264 ], [ 0, %dec_label_pc_b25c ]
  store i32 %v2_b024, i32* %r3.global-to-local, align 4
  %v1_b268 = load i32, i32* @sb, align 4
  %v2_b268 = add i32 %v1_b268, %v0_b268
  %v3_b268 = inttoptr i32 %v2_b268 to i32*
  %v4_b268 = load i32, i32* %v3_b268, align 4
  store i32 %v4_b268, i32* %r0.global-to-local, align 4
  %v2_b26c = add i32 %v0_b268, %v2_b024
  %v3_b26c = inttoptr i32 %v2_b26c to i32*
  %v4_b26c = load i32, i32* %v3_b26c, align 4
  %v1_b270 = add i32 %v0_b270, 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b27c = inttoptr i32 %v4_b26c to i32*
  %v5_b27c = call i32 @function_11200(i32 %v4_b268, i32* %v4_b27c, i32 %v3_b098, i32 16384)
  store i32 %v5_b27c, i32* %r0.global-to-local, align 4
  %v1_b280 = load i32, i32* @sl, align 4
  %v9_b280 = icmp eq i32 %v1_b270, %v1_b280
  %v0_b284 = load i32, i32* @r4, align 4
  %v1_b284 = add i32 %v0_b284, 4
  store i32 %v1_b284, i32* @r4, align 4
  br i1 %v9_b280, label %dec_label_pc_b28c, label %dec_label_pc_b264

dec_label_pc_b28c:                                ; preds = %dec_label_pc_b2d4, %dec_label_pc_b264, %dec_label_pc_b248, %dec_label_pc_b0f4
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b290 = call i32 @function_10c8c(i32* null)
  store i32 %v2_b290, i32* %r0.global-to-local, align 4
  store i32 %v2_b0e05, i32* %r3.global-to-local, align 4
  %v6_b29c = icmp slt i32 %v2_b0e05, %v2_b290
  br i1 %v6_b29c, label %dec_label_pc_b2a0, label %dec_label_pc_b28c.dec_label_pc_b248_crit_edge

dec_label_pc_b28c.dec_label_pc_b248_crit_edge:    ; preds = %dec_label_pc_b28c
  %v0_b248.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_b248

dec_label_pc_b2a0.loopexit:                       ; preds = %dec_label_pc_b184
  %v29_b2a4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b2a0

dec_label_pc_b2a0:                                ; preds = %dec_label_pc_b2a0.loopexit, %dec_label_pc_b28c
  %v29_b2a4 = phi i32 [ %v29_b2a4.pre, %dec_label_pc_b2a0.loopexit ], [ %v2_b290, %dec_label_pc_b28c ]
  ret i32 %v29_b2a4

dec_label_pc_b2a8:                                ; preds = %dec_label_pc_b150
  %v0_b2a8 = call i32 @function_dab8()
  %v1_b2a8 = trunc i32 %v0_b2a8 to i8
  store i32 %v0_b2a8, i32* %r0.global-to-local, align 4
  %v4_b2ac = sdiv i32 %v0_b2a8, 256
  store i32 %v4_b2ac, i32* %r3.global-to-local, align 4
  %v1_b2b0 = trunc i32 %v4_b2ac to i8
  %v2_b2b0 = load i32, i32* @r5, align 4
  %v3_b2b0 = add i32 %v2_b2b0, 3
  %v4_b2b0 = inttoptr i32 %v3_b2b0 to i8*
  store i8 %v1_b2b0, i8* %v4_b2b0, align 1
  %v3_b2b4 = load i32, i32* @r5, align 4
  %v4_b2b4 = add i32 %v3_b2b4, 2
  %v5_b2b4 = inttoptr i32 %v4_b2b4 to i8*
  store i8 %v1_b2a8, i8* %v5_b2b4, align 1
  br label %dec_label_pc_b184

dec_label_pc_b2bc:                                ; preds = %dec_label_pc_b000
  %v0_b2bc = call i32 @function_dab8()
  %v3_b2c0 = mul i32 %v0_b2bc, 65536
  store i32 %v3_b2c0, i32* %r0.global-to-local, align 4
  %v3_b2c4 = urem i32 %v0_b2bc, 65536
  br label %dec_label_pc_b0f4

dec_label_pc_b2cc:                                ; preds = %dec_label_pc_b250
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_b2d4

dec_label_pc_b2d4:                                ; preds = %dec_label_pc_b2d4, %dec_label_pc_b2cc
  %v0_b2d8 = phi i32 [ %v1_b310, %dec_label_pc_b2d4 ], [ 0, %dec_label_pc_b2cc ]
  %v2_b2d8 = add i32 %v0_b2d8, %v2_b024
  %v3_b2d8 = inttoptr i32 %v2_b2d8 to i32*
  %v4_b2d8 = load i32, i32* %v3_b2d8, align 4
  store i32 %v4_b2d8, i32* @r4, align 4
  store i32 %v4_b2d8, i32* %r0.global-to-local, align 4
  %v2_b2e4 = call i32 @function_db6c(i32 %v4_b2d8, i32 %v3_b098)
  store i32 %v2_b2e4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2f0 = load i32, i32* @r4, align 4
  %v4_b2f0 = add i32 %v2_b2f0, %v3_b098
  %v5_b2f0 = inttoptr i32 %v4_b2f0 to i8*
  store i8 0, i8* %v5_b2f0, align 1
  %v0_b2f4 = load i32, i32* @r4, align 4
  %v0_b2f8 = load i32, i32* @r6, align 4
  %v1_b2f8 = load i32, i32* @sb, align 4
  %v2_b2f8 = add i32 %v1_b2f8, %v0_b2f8
  %v3_b2f8 = inttoptr i32 %v2_b2f8 to i32*
  %v4_b2f8 = load i32, i32* %v3_b2f8, align 4
  store i32 %v4_b2f8, i32* %r0.global-to-local, align 4
  %v0_b2fc = load i32, i32* @r5, align 4
  %v1_b2fc = add i32 %v0_b2fc, 1
  store i32 %v1_b2fc, i32* @r5, align 4
  %v0_b304 = load i32, i32* %r3.global-to-local, align 4
  %v1_b304 = add i32 %v0_b304, 16384
  store i32 %v1_b304, i32* %r3.global-to-local, align 4
  %v4_b308 = inttoptr i32 %v0_b2f4 to i32*
  %v5_b308 = call i32 @function_11200(i32 %v4_b2f8, i32* %v4_b308, i32 %v3_b098, i32 %v1_b304)
  store i32 %v5_b308, i32* %r0.global-to-local, align 4
  %v0_b30c = load i32, i32* @r5, align 4
  %v1_b30c = load i32, i32* @sl, align 4
  %v9_b30c = icmp eq i32 %v0_b30c, %v1_b30c
  %v0_b310 = load i32, i32* @r6, align 4
  %v1_b310 = add i32 %v0_b310, 4
  store i32 %v1_b310, i32* @r6, align 4
  br i1 %v9_b30c, label %dec_label_pc_b28c, label %dec_label_pc_b2d4

; uselistorder directives
  uselistorder i32 %v1_b310, { 1, 0 }
  uselistorder i32 %v0_b2bc, { 1, 0 }
  uselistorder i32 %v4_b2ac, { 1, 0 }
  uselistorder i32 %v0_b2a8, { 0, 2, 1 }
  uselistorder i32 %v1_b284, { 1, 0 }
  uselistorder i32 %v2_b220, { 1, 0 }
  uselistorder i32 %v0_b1d0, { 1, 2, 0 }
  uselistorder i32 %v3_b190, { 1, 0, 2 }
  uselistorder i32 %v3_b0d4, { 0, 2, 1 }
  uselistorder i32 %v3_b098, { 2, 3, 1, 0 }
  uselistorder i32 %v2_b024, { 0, 1, 4, 2, 3 }
  uselistorder i32 %v1_b004, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 5, 3, 4, 6, 17, 8, 7, 31, 9, 12, 10, 11, 13, 30, 18, 19, 16, 21, 20, 15, 14, 29, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder label %dec_label_pc_b248, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b0f4, { 1, 0 }
}

define i32 @function_b31c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b31c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_b31c = load i32, i32* @sb, align 4
  %v21_b31c = load i32, i32* @sl, align 4
  %v1_b320 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_b320, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b33c = urem i32 %arg4, 256
  store i32 %v1_b33c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b34c = call i32 @function_1157c(i32 %v1_b320, i32 4)
  %v0_b350 = load i32, i32* @r5, align 4
  store i32 %v0_b350, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b35c = load i32, i32* @r7, align 4
  store i32 %v0_b35c, i32* %r3.global-to-local, align 4
  %v0_b360 = load i32, i32* @r4, align 4
  store i32 %v0_b360, i32* %r0.global-to-local, align 4
  %v5_b364 = inttoptr i32 %v0_b350 to i32*
  %v6_b364 = call i32 @function_829c(i32 %v0_b360, i32* %v5_b364, i32 2, i32 %v0_b35c, i32 %v2_b34c)
  %v1_b370 = urem i32 %v6_b364, 256
  store i32 %v1_b370, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b37c = load i32, i32* @r5, align 4
  store i32 %v0_b37c, i32* %r1.global-to-local, align 4
  %v0_b380 = load i32, i32* @r4, align 4
  store i32 %v0_b380, i32* %r0.global-to-local, align 4
  %v5_b384 = trunc i32 %v6_b364 to i8
  %v6_b388 = inttoptr i32 %v0_b37c to i32*
  %v7_b388 = call i32 @function_829c(i32 %v0_b380, i32* %v6_b388, i32 3, i32 65535, i32 %v6_b364)
  %v0_b38c = load i32, i32* @r5, align 4
  store i32 %v0_b38c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b39c = load i32, i32* @r4, align 4
  store i32 %v0_b39c, i32* %r0.global-to-local, align 4
  %v5_b3a0 = inttoptr i32 %v0_b38c to i32*
  %v6_b3a0 = call i32 @function_829c(i32 %v0_b39c, i32* %v5_b3a0, i32 4, i32 64, i32 %v7_b388)
  %v1_b3a8 = urem i32 %v6_b3a0, 256
  store i32 %v1_b3a8, i32* %ip.global-to-local, align 4
  %v0_b3ac = load i32, i32* @r5, align 4
  store i32 %v0_b3ac, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b3b4 = load i32, i32* @r7, align 4
  store i32 %v0_b3b4, i32* %r3.global-to-local, align 4
  %v0_b3b8 = load i32, i32* @r4, align 4
  store i32 %v0_b3b8, i32* %r0.global-to-local, align 4
  %v5_b3bc = trunc i32 %v6_b3a0 to i8
  %v6_b3c0 = inttoptr i32 %v0_b3ac to i32*
  %v7_b3c0 = call i32 @function_829c(i32 %v0_b3b8, i32* %v6_b3c0, i32 5, i32 %v0_b3b4, i32 %v6_b3a0)
  %v1_b3cc = urem i32 %v7_b3c0, 256
  store i32 %v1_b3cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b3d8 = load i32, i32* @r5, align 4
  store i32 %v0_b3d8, i32* %r1.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r4, align 4
  store i32 %v0_b3dc, i32* %r0.global-to-local, align 4
  %v5_b3e4 = inttoptr i32 %v0_b3d8 to i32*
  %v6_b3e4 = call i32 @function_829c(i32 %v0_b3dc, i32* %v5_b3e4, i32 6, i32 65535, i32 %v1_b3cc)
  %v0_b3f0 = load i32, i32* @r5, align 4
  store i32 %v0_b3f0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3fc = load i32, i32* @r4, align 4
  store i32 %v0_b3fc, i32* %r0.global-to-local, align 4
  %v5_b400 = inttoptr i32 %v0_b3f0 to i32*
  %v6_b400 = call i32 @function_829c(i32 %v0_b3fc, i32* %v5_b400, i32 7, i32 65535, i32 %v6_b3e4)
  %v0_b404 = load i32, i32* @r5, align 4
  store i32 %v0_b404, i32* %r1.global-to-local, align 4
  %v0_b408 = load i32, i32* @r7, align 4
  store i32 %v0_b408, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b400, i32* %sb.global-to-local, align 4
  %v0_b414 = load i32, i32* @r4, align 4
  store i32 %v0_b414, i32* %r0.global-to-local, align 4
  %v5_b418 = inttoptr i32 %v0_b404 to i32*
  %v6_b418 = call i32 @function_829c(i32 %v0_b414, i32* %v5_b418, i32 %v0_b408, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b424 = load i32, i32* @r5, align 4
  store i32 %v0_b424, i32* %r1.global-to-local, align 4
  store i32 %v6_b418, i32* @sl, align 4
  %v0_b42c = load i32, i32* @r4, align 4
  store i32 %v0_b42c, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b424 to i32*
  %v6_b430 = call i32 @function_829c(i32 %v0_b42c, i32* %v5_b430, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b43c = load i32, i32* @global_var_1b860.47, align 4
  store i32 %v2_b43c, i32* %r3.global-to-local, align 4
  %v1_b440 = urem i32 %v6_b430, 256
  store i32 %v1_b440, i32* %ip.global-to-local, align 4
  %v0_b444 = load i32, i32* @r5, align 4
  store i32 %v0_b444, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_b44c = load i32, i32* @r4, align 4
  store i32 %v0_b44c, i32* %r0.global-to-local, align 4
  %v5_b454 = inttoptr i32 %v0_b444 to i32*
  %v6_b454 = call i32 @function_829c(i32 %v0_b44c, i32* %v5_b454, i32 19, i32 %v2_b43c, i32 %v1_b440)
  store i32 %v6_b454, i32* @fp, align 4
  %v0_b45c = load i32, i32* @r7, align 4
  store i32 %v0_b45c, i32* %r0.global-to-local, align 4
  %v1_b460 = inttoptr i32 %v0_b45c to i32*
  %v2_b460 = call i32 @function_10c8c(i32* %v1_b460)
  %v1_b464 = load i32, i32* @r6, align 4
  %v2_b464 = add i32 %v1_b464, %v2_b460
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b478 = call i32 @function_11290(i32 2, i32 3, i32 17)
  store i32 %v3_b478, i32* %r0.global-to-local, align 4
  %v7_b47c = icmp eq i32 %v3_b478, -1
  store i1 %v7_b47c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b47c, label %dec_label_pc_b8a4, label %dec_label_pc_b488

dec_label_pc_b488:                                ; preds = %dec_label_pc_b31c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b490 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b490, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b498 = load i32, i32* @r7, align 4
  store i32 %v0_b498, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b4a4 = call i32 @function_11260(i32 %v3_b478, i32 %v0_b498, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b4a4, i32* %r0.global-to-local, align 4
  %v7_b4a8 = icmp eq i32 %v6_b4a4, -1
  store i1 %v7_b4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4a8, label %dec_label_pc_b8ac, label %dec_label_pc_b4b0

dec_label_pc_b4b0:                                ; preds = %dec_label_pc_b488
  %v0_b4b0 = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_b4bc = urem i32 %v0_b4b0, 65536
  store i32 %v3_b4bc, i32* %r2.global-to-local, align 4
  %v3_b4c0 = icmp ugt i32 %v3_b4bc, 1459
  %v9_b4c0 = icmp eq i32 %v3_b4bc, 1460
  store i1 %v9_b4c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4c0, label %bb, label %bb56

bb:                                               ; preds = %dec_label_pc_b4b0
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_b4b0, %bb
  %v0_b4c8 = phi i32 [ %v3_b4bc, %dec_label_pc_b4b0 ], [ 1460, %bb ]
  store i32 %v7_b388, i32* %r1.global-to-local, align 4
  store i32 %v6_b3e4, i32* %r2.global-to-local, align 4
  store i32 %v1_b320, i32* %r3.global-to-local, align 4
  %v0_b4d8 = load i32, i32* %sb.global-to-local, align 4
  %v3_b4dc = mul i32 %v7_b388, 65536
  store i32 %v3_b4dc, i32* %r0.global-to-local, align 4
  %v3_b4e0 = mul i32 %v6_b3e4, 65536
  store i32 %v3_b4e0, i32* %sl.global-to-local, align 4
  %v3_b4e4 = urem i32 %v7_b388, 65536
  store i32 %v3_b4e4, i32* @r4, align 4
  %v3_b4e8 = urem i32 %v6_b3e4, 65536
  store i32 %v3_b4e8, i32* %sb.global-to-local, align 4
  %v3_b4ec = urem i32 %v0_b4d8, 65536
  store i32 %v3_b4ec, i32* %ip.global-to-local, align 4
  %v2_b4f0 = icmp eq i32 %v1_b320, 0
  store i1 %v2_b4f0, i1* %cpsr_z.global-to-local, align 1
  %v0_b4f4 = load i32, i32* @r7, align 4
  store i32 %v0_b4f4, i32* %stack_var_-40, align 4
  br i1 %v2_b4f0, label %.dec_label_pc_b664.preheader_crit_edge, label %dec_label_pc_b508

.dec_label_pc_b664.preheader_crit_edge:           ; preds = %bb56
  %.pre = add nuw nsw i32 %v0_b4c8, 8
  %.pre19 = add nuw nsw i32 %v0_b4c8, 28
  br label %dec_label_pc_b664.preheader

dec_label_pc_b508:                                ; preds = %bb56
  %v1_b50c = add nuw nsw i32 %v0_b4c8, 28
  %v1_b510 = add nuw nsw i32 %v0_b4c8, 8
  %v1_b514 = urem i32 %v6_b3e4, 256
  %tmp57 = udiv i32 %v7_b388, 256
  %v3_b520 = urem i32 %tmp57, 256
  %v3_b524 = mul i32 %v1_b510, 65536
  store i32 %v3_b524, i32* @lr, align 4
  %tmp58 = mul nuw nsw i32 %v1_b50c, 256
  %v1_b530 = urem i32 %v7_b388, 256
  %tmp59 = mul nuw nsw i32 %v1_b510, 256
  %v1_b53c = and i32 %tmp58, 65280
  store i32 %v1_b53c, i32* %r3.global-to-local, align 4
  %v4_b540 = mul nuw nsw i32 %v1_b530, 256
  %v5_b540 = or i32 %v4_b540, %v3_b520
  store i32 %v5_b540, i32* %r0.global-to-local, align 4
  %v3_b544 = mul nuw nsw i32 %v1_b514, 256
  store i32 %v3_b544, i32* %r1.global-to-local, align 4
  %tmp60 = udiv i32 %v0_b4d8, 256
  %v3_b548 = urem i32 %tmp60, 256
  %v1_b54c = and i32 %tmp59, 65280
  store i32 %v1_b54c, i32* %ip.global-to-local, align 4
  %v2_b550 = icmp eq i32 %v1_b3cc, 0
  store i1 %v2_b550, i1* %cpsr_z.global-to-local, align 1
  %tmp61 = udiv i32 %v1_b50c, 256
  %v4_b554 = urem i32 %tmp61, 256
  %v5_b554 = or i32 %v4_b554, %v1_b53c
  store i32 %v5_b554, i32* %r2.global-to-local, align 4
  %v1_b558 = urem i32 %v0_b4d8, 256
  %v5_b55c = trunc i32 %tmp61 to i8
  %v5_b560 = trunc i32 %tmp57 to i8
  %tmp62 = udiv i32 %v6_b3e4, 256
  %v4_b564 = urem i32 %tmp62, 256
  %v5_b564 = or i32 %v4_b564, %v3_b544
  store i32 %v5_b564, i32* @r5, align 4
  %v4_b568 = mul nuw nsw i32 %v1_b558, 256
  %v5_b568 = or i32 %v4_b568, %v3_b548
  store i32 %v5_b568, i32* @r6, align 4
  %tmp63 = udiv i32 %v1_b510, 256
  %v4_b56c = urem i32 %tmp63, 256
  %v5_b56c = or i32 %v4_b56c, %v1_b54c
  store i32 %v5_b56c, i32* %sb.global-to-local, align 4
  br i1 %v2_b550, label %dec_label_pc_b574, label %dec_label_pc_b8b8

dec_label_pc_b574:                                ; preds = %dec_label_pc_b508
  %v3_b57422 = udiv i32 %v1_b53c, 256
  store i32 %v3_b57422, i32* %ip.global-to-local, align 4
  store i32 %v1_b530, i32* %r0.global-to-local, align 4
  store i32 %v1_b514, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v1_b558, i32* %sl.global-to-local, align 4
  %v3_b59423 = udiv i32 %v1_b54c, 256
  store i32 %v3_b59423, i32* @r7, align 4
  %sext10 = mul i32 %v1_b50c, 16777216
  %v4_b61c = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v7_b388, 16777216
  %v4_b628 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v6_b3e4, 16777216
  %v4_b62c = sdiv i32 %sext12, 16777216
  %v4_b634 = sext i8 %v5_b560 to i32
  %v4_b610 = sext i8 %v5_b55c to i32
  br label %dec_label_pc_b598

dec_label_pc_b598:                                ; preds = %dec_label_pc_b598, %dec_label_pc_b574
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b5a4 = call i32 @function_1157c(i32 1510, i32 1)
  store i32 %v2_b5a4, i32* %r0.global-to-local, align 4
  store i32 %v2_b34c, i32* %r3.global-to-local, align 4
  %v2_b5b0 = load i32, i32* @r4, align 4
  %v5_b5b0 = mul i32 %v2_b5b0, 4
  %v6_b5b0 = add i32 %v5_b5b0, %v2_b34c
  %v7_b5b0 = inttoptr i32 %v6_b5b0 to i32*
  store i32 %v2_b5a4, i32* %v7_b5b0, align 4
  %v3_b5b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5b4, i32* %r2.global-to-local, align 4
  %v0_b5b8 = load i32, i32* %r3.global-to-local, align 4
  %v4_b5b8 = mul i32 %v3_b5b4, 4
  %v5_b5b8 = add i32 %v0_b5b8, %v4_b5b8
  %v6_b5b8 = inttoptr i32 %v5_b5b8 to i32*
  %v7_b5b8 = load i32, i32* %v6_b5b8, align 4
  store i32 %v7_b5b8, i32* %r1.global-to-local, align 4
  %v1_b5bc = inttoptr i32 %v7_b5b8 to i8*
  %v2_b5bc = load i8, i8* %v1_b5bc, align 1
  %tmp = urem i8 %v2_b5bc, 16
  %v1_b5c0 = zext i8 %tmp to i32
  %v1_b5c4 = or i32 %v1_b5c0, 64
  store i32 %v1_b5c4, i32* %r3.global-to-local, align 4
  %v1_b5c8 = trunc i32 %v1_b5c4 to i8
  store i8 %v1_b5c8, i8* %v1_b5bc, align 1
  %v0_b5cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b5cc = inttoptr i32 %v0_b5cc to i8*
  %v2_b5cc = load i8, i8* %v1_b5cc, align 1
  %v3_b5cc = zext i8 %v2_b5cc to i32
  %v1_b5d0 = and i32 %v3_b5cc, 240
  %v1_b5d4 = or i32 %v1_b5d0, 5
  store i32 %v1_b5d4, i32* %r2.global-to-local, align 4
  %v3_b5dc = add i32 %v0_b5cc, 9
  %v4_b5dc = inttoptr i32 %v3_b5dc to i8*
  store i8 17, i8* %v4_b5dc, align 1
  %v0_b5e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b5e0 = trunc i32 %v0_b5e0 to i8
  %v2_b5e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b5e0 = inttoptr i32 %v2_b5e0 to i8*
  store i8 %v1_b5e0, i8* %v3_b5e0, align 1
  %v2_b5e8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b5e8 = add i32 %v2_b5e8, 1
  %v4_b5e8 = inttoptr i32 %v3_b5e8 to i8*
  store i8 %v5_b384, i8* %v4_b5e8, align 1
  store i32 %v6_b3a0, i32* %ip.global-to-local, align 4
  %v2_b5f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b5f0 = add i32 %v2_b5f0, 8
  %v4_b5f0 = inttoptr i32 %v3_b5f0 to i8*
  store i8 %v5_b3bc, i8* %v4_b5f0, align 1
  %v3_b5f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5f4, i32* %r2.global-to-local, align 4
  %v3_b5f8 = mul i32 %v3_b5f4, 32
  store i32 %v3_b5f8, i32* %r3.global-to-local, align 4
  %v0_b5fc = load i32, i32* @fp, align 4
  %v1_b5fc = load i32, i32* %r1.global-to-local, align 4
  %v2_b5fc = add i32 %v1_b5fc, 12
  %v3_b5fc = inttoptr i32 %v2_b5fc to i32*
  store i32 %v0_b5fc, i32* %v3_b5fc, align 4
  %v0_b600 = load i32, i32* %r3.global-to-local, align 4
  %v1_b600 = load i32, i32* %r2.global-to-local, align 4
  %tmp66 = mul i32 %v1_b600, -8
  %v5_b600 = add i32 %v0_b600, %tmp66
  %v1_b604 = load i32, i32* @r8, align 4
  %v2_b604 = add i32 %v5_b600, %v1_b604
  store i32 %v2_b604, i32* %r3.global-to-local, align 4
  %v1_b608 = add i32 %v2_b604, 16
  %v2_b608 = inttoptr i32 %v1_b608 to i32*
  %v3_b608 = load i32, i32* %v2_b608, align 4
  %v1_b60c = add i32 %v1_b600, 1
  store i32 %v1_b60c, i32* @r4, align 4
  store i32 %v4_b610, i32* %ip.global-to-local, align 4
  store i32 %v1_b320, i32* %r2.global-to-local, align 4
  %v1_b618 = load i32, i32* %r1.global-to-local, align 4
  %v2_b618 = add i32 %v1_b618, 16
  %v3_b618 = inttoptr i32 %v2_b618 to i32*
  store i32 %v3_b608, i32* %v3_b618, align 4
  store i32 %v4_b61c, i32* %r0.global-to-local, align 4
  %v0_b620 = load i32, i32* %ip.global-to-local, align 4
  %v1_b620 = trunc i32 %v0_b620 to i8
  %v2_b620 = load i32, i32* %r1.global-to-local, align 4
  %v3_b620 = add i32 %v2_b620, 2
  %v4_b620 = inttoptr i32 %v3_b620 to i8*
  store i8 %v1_b620, i8* %v4_b620, align 1
  %v0_b624 = load i32, i32* %r0.global-to-local, align 4
  %v1_b624 = trunc i32 %v0_b624 to i8
  %v2_b624 = load i32, i32* %r1.global-to-local, align 4
  %v3_b624 = add i32 %v2_b624, 3
  %v4_b624 = inttoptr i32 %v3_b624 to i8*
  store i8 %v1_b624, i8* %v4_b624, align 1
  store i32 %v4_b628, i32* %ip.global-to-local, align 4
  store i32 %v4_b62c, i32* %r0.global-to-local, align 4
  %v0_b630 = load i32, i32* @r4, align 4
  %v1_b630 = load i32, i32* %r2.global-to-local, align 4
  %v9_b630 = icmp eq i32 %v0_b630, %v1_b630
  store i1 %v9_b630, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b634, i32* %r2.global-to-local, align 4
  %v0_b638 = load i32, i32* %r1.global-to-local, align 4
  %v1_b638 = add i32 %v0_b638, 20
  store i32 %v1_b638, i32* %r3.global-to-local, align 4
  %v3_b63c = add i32 %v0_b638, 4
  %v4_b63c = inttoptr i32 %v3_b63c to i8*
  store i8 %v5_b560, i8* %v4_b63c, align 1
  %v0_b640 = load i32, i32* %ip.global-to-local, align 4
  %v1_b640 = trunc i32 %v0_b640 to i8
  %v2_b640 = load i32, i32* %r1.global-to-local, align 4
  %v3_b640 = add i32 %v2_b640, 5
  %v4_b640 = inttoptr i32 %v3_b640 to i8*
  store i8 %v1_b640, i8* %v4_b640, align 1
  %v0_b644 = load i32, i32* @r5, align 4
  %v1_b644 = trunc i32 %v0_b644 to i8
  %v2_b644 = load i32, i32* %r1.global-to-local, align 4
  %v3_b644 = add i32 %v2_b644, 20
  %v4_b644 = inttoptr i32 %v3_b644 to i8*
  store i8 %v1_b644, i8* %v4_b644, align 1
  %v0_b648 = load i32, i32* @r7, align 4
  %v1_b648 = trunc i32 %v0_b648 to i8
  %v2_b648 = load i32, i32* %r3.global-to-local, align 4
  %v3_b648 = add i32 %v2_b648, 5
  %v4_b648 = inttoptr i32 %v3_b648 to i8*
  store i8 %v1_b648, i8* %v4_b648, align 1
  %v0_b64c = load i32, i32* %r0.global-to-local, align 4
  %v1_b64c = trunc i32 %v0_b64c to i8
  %v2_b64c = load i32, i32* %r3.global-to-local, align 4
  %v3_b64c = add i32 %v2_b64c, 1
  %v4_b64c = inttoptr i32 %v3_b64c to i8*
  store i8 %v1_b64c, i8* %v4_b64c, align 1
  %v0_b650 = load i32, i32* @r6, align 4
  %v1_b650 = trunc i32 %v0_b650 to i8
  %v2_b650 = load i32, i32* %r3.global-to-local, align 4
  %v3_b650 = add i32 %v2_b650, 2
  %v4_b650 = inttoptr i32 %v3_b650 to i8*
  store i8 %v1_b650, i8* %v4_b650, align 1
  %v0_b654 = load i32, i32* %sl.global-to-local, align 4
  %v1_b654 = trunc i32 %v0_b654 to i8
  %v2_b654 = load i32, i32* %r3.global-to-local, align 4
  %v3_b654 = add i32 %v2_b654, 3
  %v4_b654 = inttoptr i32 %v3_b654 to i8*
  store i8 %v1_b654, i8* %v4_b654, align 1
  %v0_b658 = load i32, i32* %sb.global-to-local, align 4
  %v1_b658 = trunc i32 %v0_b658 to i8
  %v2_b658 = load i32, i32* %r3.global-to-local, align 4
  %v3_b658 = add i32 %v2_b658, 4
  %v4_b658 = inttoptr i32 %v3_b658 to i8*
  store i8 %v1_b658, i8* %v4_b658, align 1
  %v0_b65c = load i32, i32* @r4, align 4
  store i32 %v0_b65c, i32* %stack_var_-40, align 4
  %v5_b660 = icmp slt i32 %v0_b630, %v1_b630
  br i1 %v5_b660, label %dec_label_pc_b598, label %dec_label_pc_b664.preheader

dec_label_pc_b664.preheader:                      ; preds = %dec_label_pc_b8e4, %dec_label_pc_b598, %.dec_label_pc_b664.preheader_crit_edge
  %v1_b688.pre-phi = phi i32 [ %.pre19, %.dec_label_pc_b664.preheader_crit_edge ], [ %v1_b50c, %dec_label_pc_b598 ], [ %v1_b50c, %dec_label_pc_b8e4 ]
  %v1_b684.pre-phi = phi i32 [ %.pre, %.dec_label_pc_b664.preheader_crit_edge ], [ %v1_b510, %dec_label_pc_b598 ], [ %v1_b510, %dec_label_pc_b8e4 ]
  %v3_b814 = icmp eq i32 %v3_b4e4, 65535
  %v2_b6c8 = icmp eq i32 %v1_b440, 0
  br label %dec_label_pc_b664

dec_label_pc_b664:                                ; preds = %dec_label_pc_b664.preheader, %dec_label_pc_b890
  store i32 %v1_b320, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b4f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b4f0, label %dec_label_pc_b890, label %dec_label_pc_b678

dec_label_pc_b678:                                ; preds = %dec_label_pc_b664
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %v1_b684.pre-phi, i32* @sb, align 4
  store i32 %v1_b688.pre-phi, i32* @sl, align 4
  br label %dec_label_pc_b77c

dec_label_pc_b690:                                ; preds = %dec_label_pc_b77c
  %v0_b690 = load i32, i32* @fp, align 4
  %v7_b690 = icmp eq i32 %v0_b690, -1
  store i1 %v7_b690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b690, label %dec_label_pc_b804, label %dec_label_pc_b698

dec_label_pc_b698:                                ; preds = %dec_label_pc_b7a0, %dec_label_pc_b690
  store i32 %v3_b4e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b814, label %dec_label_pc_b820, label %dec_label_pc_b6ac

dec_label_pc_b6ac:                                ; preds = %dec_label_pc_b804.dec_label_pc_b6ac_crit_edge, %dec_label_pc_b698
  %v1_b6b0 = phi i32 [ %v1_b6b0.pre, %dec_label_pc_b804.dec_label_pc_b6ac_crit_edge ], [ 65535, %dec_label_pc_b698 ]
  store i32 %v3_b4e8, i32* %r0.global-to-local, align 4
  %v9_b6b0 = icmp eq i32 %v3_b4e8, %v1_b6b0
  store i1 %v9_b6b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b6b0, label %dec_label_pc_b83c, label %dec_label_pc_b6b8

dec_label_pc_b6b8:                                ; preds = %dec_label_pc_b820.dec_label_pc_b6b8_crit_edge, %dec_label_pc_b6ac
  %v1_b6bc = phi i32 [ %v1_b6bc.pre, %dec_label_pc_b820.dec_label_pc_b6b8_crit_edge ], [ %v1_b6b0, %dec_label_pc_b6ac ]
  store i32 %v3_b4ec, i32* %r1.global-to-local, align 4
  %v9_b6bc = icmp eq i32 %v3_b4ec, %v1_b6bc
  store i1 %v9_b6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b6bc, label %dec_label_pc_b858, label %dec_label_pc_b6c4

dec_label_pc_b6c4:                                ; preds = %dec_label_pc_b83c, %dec_label_pc_b6b8
  store i32 %v1_b440, i32* %r2.global-to-local, align 4
  store i1 %v2_b6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b6c8, label %dec_label_pc_b6d0, label %dec_label_pc_b874

dec_label_pc_b6d0:                                ; preds = %dec_label_pc_b6c4, %dec_label_pc_b858, %dec_label_pc_b874
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b6d4 = load i32, i32* @r7, align 4
  %v1_b6d4 = trunc i32 %v0_b6d4 to i8
  %v2_b6d4 = load i32, i32* @r5, align 4
  %v3_b6d4 = add i32 %v2_b6d4, 10
  %v4_b6d4 = inttoptr i32 %v3_b6d4 to i8*
  store i8 %v1_b6d4, i8* %v4_b6d4, align 1
  %v0_b6d8 = load i32, i32* @r7, align 4
  %v1_b6d8 = trunc i32 %v0_b6d8 to i8
  %v2_b6d8 = load i32, i32* @r5, align 4
  %v3_b6d8 = add i32 %v2_b6d8, 11
  %v4_b6d8 = inttoptr i32 %v3_b6d8 to i8*
  store i8 %v1_b6d8, i8* %v4_b6d8, align 1
  %v0_b6dc = load i32, i32* @r5, align 4
  store i32 %v0_b6dc, i32* @r0, align 4
  %v2_b6e0 = call i32 @function_c690(i32 %v0_b6dc, i32 20)
  %v3_b6e0 = trunc i32 %v2_b6e0 to i8
  store i32 %v2_b6e0, i32* %r0.global-to-local, align 4
  %v4_b6e4 = sdiv i32 %v2_b6e0, 256
  store i32 %v4_b6e4, i32* %r3.global-to-local, align 4
  %v1_b6e8 = trunc i32 %v4_b6e4 to i8
  %v2_b6e8 = load i32, i32* @r5, align 4
  %v3_b6e8 = add i32 %v2_b6e8, 11
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v3_b6ec = load i32, i32* @r5, align 4
  %v4_b6ec = add i32 %v3_b6ec, 10
  %v5_b6ec = inttoptr i32 %v4_b6ec to i8*
  store i8 %v3_b6e0, i8* %v5_b6ec, align 1
  %v0_b6f0 = load i32, i32* @r7, align 4
  %v1_b6f0 = trunc i32 %v0_b6f0 to i8
  %v2_b6f0 = load i32, i32* @r6, align 4
  %v3_b6f0 = add i32 %v2_b6f0, 6
  %v4_b6f0 = inttoptr i32 %v3_b6f0 to i8*
  store i8 %v1_b6f0, i8* %v4_b6f0, align 1
  %v0_b6f4 = load i32, i32* @r7, align 4
  %v1_b6f4 = trunc i32 %v0_b6f4 to i8
  %v2_b6f4 = load i32, i32* @r6, align 4
  %v3_b6f4 = add i32 %v2_b6f4, 7
  %v4_b6f4 = inttoptr i32 %v3_b6f4 to i8*
  store i8 %v1_b6f4, i8* %v4_b6f4, align 1
  %v0_b6f8 = load i32, i32* @r5, align 4
  %v1_b6f8 = add i32 %v0_b6f8, 24
  %v2_b6f8 = inttoptr i32 %v1_b6f8 to i8*
  %v3_b6f8 = load i8, i8* %v2_b6f8, align 1
  %v4_b6f8 = zext i8 %v3_b6f8 to i32
  store i32 %v4_b6f8, i32* %r3.global-to-local, align 4
  %v1_b6fc = add i32 %v0_b6f8, 25
  %v2_b6fc = inttoptr i32 %v1_b6fc to i8*
  %v3_b6fc = load i8, i8* %v2_b6fc, align 1
  %v4_b6fc = zext i8 %v3_b6fc to i32
  %v0_b700 = load i32, i32* @r6, align 4
  store i32 %v0_b700, i32* @r1, align 4
  %v4_b704 = mul nuw nsw i32 %v4_b6fc, 256
  %v5_b704 = or i32 %v4_b704, %v4_b6f8
  store i32 %v5_b704, i32* %r2.global-to-local, align 4
  store i32 %v0_b6f8, i32* %r0.global-to-local, align 4
  %v0_b70c = load i32, i32* @sb, align 4
  store i32 %v0_b70c, i32* %r3.global-to-local, align 4
  %v4_b710 = call i32 @function_c6ec(i32 %v0_b6f8, i32 %v0_b700, i32 %v5_b704, i32 %v0_b70c)
  %v5_b710 = trunc i32 %v4_b710 to i8
  store i32 %v4_b710, i32* %r0.global-to-local, align 4
  %v4_b71424 = udiv i32 %v4_b710, 256
  %v1_b718 = trunc i32 %v4_b71424 to i8
  %v2_b718 = load i32, i32* @r6, align 4
  %v3_b718 = add i32 %v2_b718, 7
  %v4_b718 = inttoptr i32 %v3_b718 to i8*
  store i8 %v1_b718, i8* %v4_b718, align 1
  %v3_b71c = load i32, i32* @r6, align 4
  %v4_b71c = add i32 %v3_b71c, 6
  %v5_b71c = inttoptr i32 %v4_b71c to i8*
  store i8 %v5_b710, i8* %v5_b71c, align 1
  %v3_b720 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b720, i32* %r3.global-to-local, align 4
  %v0_b724 = load i32, i32* @r5, align 4
  %v1_b724 = add i32 %v0_b724, 20
  %v2_b724 = inttoptr i32 %v1_b724 to i32*
  %v3_b724 = load i32, i32* %v2_b724, align 4
  %v3_b72c = udiv i32 %v3_b724, 65536
  store i32 %v3_b72c, i32* %r2.global-to-local, align 4
  %v5_b730 = mul i32 %v3_b720, 24
  %v1_b734 = load i32, i32* @r8, align 4
  %v2_b734 = add i32 %v1_b734, %v5_b730
  store i32 %v2_b734, i32* %ip.global-to-local, align 4
  %v3_b73821 = udiv i32 %v3_b724, 16777216
  %v1_b73c = trunc i32 %v3_b73821 to i8
  %v3_b73c = add i32 %v2_b734, 3
  %v4_b73c = inttoptr i32 %v3_b73c to i8*
  store i8 %v1_b73c, i8* %v4_b73c, align 1
  %v0_b740 = load i32, i32* %r2.global-to-local, align 4
  %v1_b740 = trunc i32 %v0_b740 to i8
  %v2_b740 = load i32, i32* %ip.global-to-local, align 4
  %v3_b740 = add i32 %v2_b740, 2
  %v4_b740 = inttoptr i32 %v3_b740 to i8*
  store i8 %v1_b740, i8* %v4_b740, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b74c = load i32, i32* @r5, align 4
  store i32 %v0_b74c, i32* %r1.global-to-local, align 4
  store i32 %v3_b478, i32* %r0.global-to-local, align 4
  %v0_b754 = load i32, i32* @sl, align 4
  store i32 %v0_b754, i32* %r2.global-to-local, align 4
  %v0_b75c = load i32, i32* %ip.global-to-local, align 4
  %v6_b760 = inttoptr i32 %v0_b74c to i32*
  %v7_b760 = call i32 @function_1122c(i32 %v3_b478, i32* %v6_b760, i32 %v0_b754, i32 16384, i32 %v0_b75c, i32 16)
  %v3_b764 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b764, i32* %r3.global-to-local, align 4
  store i32 %v1_b320, i32* @r4, align 4
  %v1_b76c = add i32 %v3_b764, 1
  store i32 %v1_b76c, i32* %r0.global-to-local, align 4
  %v9_b770 = icmp eq i32 %v1_b76c, %v1_b320
  store i1 %v9_b770, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b76c, i32* %stack_var_-40, align 4
  %v6_b778 = icmp slt i32 %v1_b76c, %v1_b320
  br i1 %v6_b778, label %dec_label_pc_b77c, label %dec_label_pc_b890

dec_label_pc_b77c:                                ; preds = %dec_label_pc_b6d0, %dec_label_pc_b678
  %v1_b790 = phi i32 [ %v1_b76c, %dec_label_pc_b6d0 ], [ 0, %dec_label_pc_b678 ]
  %v5_b780 = mul i32 %v1_b790, 24
  %v1_b784 = load i32, i32* @r8, align 4
  %v2_b784 = add i32 %v1_b784, %v5_b780
  store i32 %v2_b784, i32* %r3.global-to-local, align 4
  %v1_b78c = add i32 %v2_b784, 20
  %v2_b78c = inttoptr i32 %v1_b78c to i8*
  %v3_b78c = load i8, i8* %v2_b78c, align 1
  %v4_b78c = zext i8 %v3_b78c to i32
  store i32 %v4_b78c, i32* %r2.global-to-local, align 4
  %v4_b790 = mul i32 %v1_b790, 4
  %v5_b790 = add i32 %v4_b790, %v2_b34c
  %v6_b790 = inttoptr i32 %v5_b790 to i32*
  %v7_b790 = load i32, i32* %v6_b790, align 4
  store i32 %v7_b790, i32* @r5, align 4
  %v2_b794 = icmp ugt i8 %v3_b78c, 30
  %v7_b794 = icmp eq i8 %v3_b78c, 31
  store i1 %v7_b794, i1* %cpsr_z.global-to-local, align 1
  %v1_b798 = add i32 %v7_b790, 20
  store i32 %v1_b798, i32* @r6, align 4
  %v2_b79c = xor i1 %v7_b794, true
  %v3_b79c = and i1 %v2_b794, %v2_b79c
  br i1 %v3_b79c, label %dec_label_pc_b690, label %dec_label_pc_b7a0

dec_label_pc_b7a0:                                ; preds = %dec_label_pc_b77c
  %v1_b7a0 = add i32 %v2_b784, 16
  %v2_b7a0 = inttoptr i32 %v1_b7a0 to i32*
  %v3_b7a0 = load i32, i32* %v2_b7a0, align 4
  %v0_b7a4 = call i32 @function_dab8()
  store i32 %v0_b7a4, i32* %r0.global-to-local, align 4
  %v3_b7a8 = load i32, i32* %stack_var_-40, align 4
  %v5_b7b0 = mul i32 %v3_b7a8, 24
  %v1_b7b8 = load i32, i32* @r8, align 4
  %v2_b7b8 = add i32 %v1_b7b8, %v5_b7b0
  store i32 %v2_b7b8, i32* %r1.global-to-local, align 4
  %v1_b7bc = and i32 %v3_b7a0, 65280
  store i32 %v1_b7bc, i32* %r3.global-to-local, align 4
  %v1_b7b4 = udiv i32 %v3_b7a0, 256
  %v3_b7c0 = and i32 %v1_b7b4, 65280
  store i32 %v3_b7c0, i32* %r2.global-to-local, align 4
  %v3_b7c4 = mul i32 %v3_b7a0, 16777216
  store i32 %v3_b7c4, i32* %ip.global-to-local, align 4
  %v1_b7c8 = add i32 %v2_b7b8, 20
  %v2_b7c8 = inttoptr i32 %v1_b7c8 to i8*
  %v3_b7c8 = load i8, i8* %v2_b7c8, align 1
  %v4_b7c8 = zext i8 %v3_b7c8 to i32
  store i32 %v4_b7c8, i32* @lr, align 4
  %v4_b7cc = mul nuw nsw i32 %v1_b7bc, 256
  %v5_b7cc = or i32 %v4_b7cc, %v3_b7c4
  store i32 %v5_b7cc, i32* %ip.global-to-local, align 4
  %v2_b7d4 = call i32 @llvm.bswap.i32(i32 %v3_b7a0)
  %v7_b7d8 = lshr i32 %v0_b7a4, %v4_b7c8
  %v8_b7d8 = add i32 %v7_b7d8, %v2_b7d4
  store i32 %v8_b7d8, i32* %r2.global-to-local, align 4
  %v3_b7e4 = mul i32 %v8_b7d8, 16777216
  %v1_b7e8 = and i32 %v8_b7d8, 65280
  store i32 %v1_b7e8, i32* %r0.global-to-local, align 4
  %v4_b7ec = mul nuw nsw i32 %v1_b7e8, 256
  %v5_b7ec = or i32 %v4_b7ec, %v3_b7e4
  store i32 %v5_b7ec, i32* %r1.global-to-local, align 4
  %v2_b7f4 = call i32 @llvm.bswap.i32(i32 %v8_b7d8)
  store i32 %v2_b7f4, i32* %r3.global-to-local, align 4
  %v0_b7f8 = load i32, i32* @fp, align 4
  %v3_b7f8 = icmp eq i32 %v0_b7f8, -1
  %v8_b7f8 = icmp eq i32 %v0_b7f8, -1
  store i1 %v8_b7f8, i1* %cpsr_z.global-to-local, align 1
  %v1_b7fc = load i32, i32* @r5, align 4
  %v2_b7fc = add i32 %v1_b7fc, 16
  %v3_b7fc = inttoptr i32 %v2_b7fc to i32*
  store i32 %v2_b7f4, i32* %v3_b7fc, align 4
  br i1 %v3_b7f8, label %dec_label_pc_b804, label %dec_label_pc_b698

dec_label_pc_b804:                                ; preds = %dec_label_pc_b7a0, %dec_label_pc_b690
  %v0_b804 = call i32 @function_dab8()
  store i32 %v0_b804, i32* %r0.global-to-local, align 4
  store i32 %v3_b4e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b814, i1* %cpsr_z.global-to-local, align 1
  %v1_b818 = load i32, i32* @r5, align 4
  %v2_b818 = add i32 %v1_b818, 12
  %v3_b818 = inttoptr i32 %v2_b818 to i32*
  store i32 %v0_b804, i32* %v3_b818, align 4
  br i1 %v3_b814, label %dec_label_pc_b820, label %dec_label_pc_b804.dec_label_pc_b6ac_crit_edge

dec_label_pc_b804.dec_label_pc_b6ac_crit_edge:    ; preds = %dec_label_pc_b804
  %v1_b6b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b6ac

dec_label_pc_b820:                                ; preds = %dec_label_pc_b804, %dec_label_pc_b698
  %v0_b820 = call i32 @function_dab8()
  %v1_b820 = trunc i32 %v0_b820 to i8
  %v4_b824 = sdiv i32 %v0_b820, 256
  store i32 %v4_b824, i32* %r3.global-to-local, align 4
  %v3_b828 = load i32, i32* @r5, align 4
  %v4_b828 = add i32 %v3_b828, 4
  %v5_b828 = inttoptr i32 %v4_b828 to i8*
  store i8 %v1_b820, i8* %v5_b828, align 1
  store i32 %v3_b4e8, i32* %r0.global-to-local, align 4
  %v1_b830 = load i32, i32* @r4, align 4
  %v9_b830 = icmp eq i32 %v3_b4e8, %v1_b830
  store i1 %v9_b830, i1* %cpsr_z.global-to-local, align 1
  %v0_b834 = load i32, i32* %r3.global-to-local, align 4
  %v1_b834 = trunc i32 %v0_b834 to i8
  %v2_b834 = load i32, i32* @r5, align 4
  %v3_b834 = add i32 %v2_b834, 5
  %v4_b834 = inttoptr i32 %v3_b834 to i8*
  store i8 %v1_b834, i8* %v4_b834, align 1
  %v0_b838 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b838, label %dec_label_pc_b83c, label %dec_label_pc_b820.dec_label_pc_b6b8_crit_edge

dec_label_pc_b820.dec_label_pc_b6b8_crit_edge:    ; preds = %dec_label_pc_b820
  %v1_b6bc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b6b8

dec_label_pc_b83c:                                ; preds = %dec_label_pc_b820, %dec_label_pc_b6ac
  %v0_b83c = call i32 @function_dab8()
  %v1_b83c = trunc i32 %v0_b83c to i8
  store i32 %v0_b83c, i32* %r0.global-to-local, align 4
  store i32 %v3_b4ec, i32* %r1.global-to-local, align 4
  %v4_b844 = sdiv i32 %v0_b83c, 256
  store i32 %v4_b844, i32* %r3.global-to-local, align 4
  %v1_b848 = load i32, i32* @r4, align 4
  %v9_b848 = icmp eq i32 %v3_b4ec, %v1_b848
  store i1 %v9_b848, i1* %cpsr_z.global-to-local, align 1
  %v3_b84c = load i32, i32* @r5, align 4
  %v4_b84c = add i32 %v3_b84c, 20
  %v5_b84c = inttoptr i32 %v4_b84c to i8*
  store i8 %v1_b83c, i8* %v5_b84c, align 1
  %v0_b850 = load i32, i32* %r3.global-to-local, align 4
  %v1_b850 = trunc i32 %v0_b850 to i8
  %v2_b850 = load i32, i32* @r6, align 4
  %v3_b850 = add i32 %v2_b850, 1
  %v4_b850 = inttoptr i32 %v3_b850 to i8*
  store i8 %v1_b850, i8* %v4_b850, align 1
  %v0_b854 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b854, label %dec_label_pc_b858, label %dec_label_pc_b6c4

dec_label_pc_b858:                                ; preds = %dec_label_pc_b83c, %dec_label_pc_b6b8
  %v0_b858 = call i32 @function_dab8()
  %v1_b858 = trunc i32 %v0_b858 to i8
  store i32 %v0_b858, i32* %r0.global-to-local, align 4
  store i32 %v1_b440, i32* %r2.global-to-local, align 4
  %v4_b860 = sdiv i32 %v0_b858, 256
  store i32 %v4_b860, i32* %r3.global-to-local, align 4
  store i1 %v2_b6c8, i1* %cpsr_z.global-to-local, align 1
  %v1_b868 = trunc i32 %v4_b860 to i8
  %v2_b868 = load i32, i32* @r6, align 4
  %v3_b868 = add i32 %v2_b868, 3
  %v4_b868 = inttoptr i32 %v3_b868 to i8*
  store i8 %v1_b868, i8* %v4_b868, align 1
  %v3_b86c = load i32, i32* @r6, align 4
  %v4_b86c = add i32 %v3_b86c, 2
  %v5_b86c = inttoptr i32 %v4_b86c to i8*
  store i8 %v1_b858, i8* %v5_b86c, align 1
  %v0_b870 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b870, label %dec_label_pc_b6d0, label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b6c4, %dec_label_pc_b858
  %v0_b874 = load i32, i32* @r5, align 4
  %v1_b874 = add i32 %v0_b874, 28
  store i32 %v1_b874, i32* @r4, align 4
  store i32 %v1_b874, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c8, i32* %r1.global-to-local, align 4
  %v2_b880 = call i32 @function_db6c(i32 %v1_b874, i32 %v0_b4c8)
  store i32 %v2_b880, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c8, i32* %r3.global-to-local, align 4
  %v0_b888 = load i32, i32* @r7, align 4
  %v1_b888 = trunc i32 %v0_b888 to i8
  %v2_b888 = load i32, i32* @r4, align 4
  %v4_b888 = add i32 %v2_b888, %v0_b4c8
  %v5_b888 = inttoptr i32 %v4_b888 to i8*
  store i8 %v1_b888, i8* %v5_b888, align 1
  br label %dec_label_pc_b6d0

dec_label_pc_b890:                                ; preds = %dec_label_pc_b6d0, %dec_label_pc_b664
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b894 = call i32 @function_10c8c(i32* null)
  store i32 %v2_b894, i32* %r0.global-to-local, align 4
  store i32 %v2_b464, i32* %sb.global-to-local, align 4
  %v9_b89c = icmp eq i32 %v2_b464, %v2_b894
  store i1 %v9_b89c, i1* %cpsr_z.global-to-local, align 1
  %v6_b8a0 = icmp slt i32 %v2_b464, %v2_b894
  br i1 %v6_b8a0, label %dec_label_pc_b8a4, label %dec_label_pc_b664

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b890, %dec_label_pc_b31c, %dec_label_pc_b8ac
  %v29_b8a8 = phi i32 [ %v3_b478, %dec_label_pc_b31c ], [ %v1_b8b0, %dec_label_pc_b8ac ], [ %v2_b894, %dec_label_pc_b890 ]
  store i32 %v18_b31c, i32* %sb.global-to-local, align 4
  store i32 %v21_b31c, i32* %sl.global-to-local, align 4
  ret i32 %v29_b8a8

dec_label_pc_b8ac:                                ; preds = %dec_label_pc_b488
  store i32 %v3_b478, i32* %r0.global-to-local, align 4
  %v1_b8b0 = call i32 @function_109bc(i32 %v3_b478)
  store i32 %v1_b8b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8a4

dec_label_pc_b8b8:                                ; preds = %dec_label_pc_b508
  %v3_b8bc = sext i8 %v5_b55c to i32
  %v7_b8bc = sext i8 %v5_b560 to i32
  %v3_b8c0 = sdiv i32 %v3_b8bc, 256
  store i32 %v3_b8c0, i32* %r1.global-to-local, align 4
  %v3_b8c4 = sdiv i32 %v7_b8bc, 256
  store i32 %v3_b8c4, i32* %r2.global-to-local, align 4
  store i32 %v1_b514, i32* %r3.global-to-local, align 4
  store i32 %v0_b4f4, i32* @r4, align 4
  store i32 %v1_b558, i32* %sl.global-to-local, align 4
  %v3_b8e020 = udiv i32 %v1_b54c, 256
  store i32 %v3_b8e020, i32* @r7, align 4
  %sext9 = mul i32 %v6_b3e4, 16777216
  %v4_b99c = sdiv i32 %sext9, 16777216
  %v1_b98c = trunc i32 %v3_b8c0 to i8
  br label %dec_label_pc_b8e4

dec_label_pc_b8e4:                                ; preds = %dec_label_pc_b8e4, %dec_label_pc_b8b8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b8f0 = call i32 @function_1157c(i32 1510, i32 1)
  store i32 %v2_b8f0, i32* %r0.global-to-local, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v3_b8f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b8f8, i32* %r2.global-to-local, align 4
  %v2_b8fc = load i32, i32* @r4, align 4
  %v5_b8fc = mul i32 %v2_b8fc, 4
  %v6_b8fc = add i32 %v5_b8fc, %v2_b34c
  %v7_b8fc = inttoptr i32 %v6_b8fc to i32*
  store i32 %v2_b8f0, i32* %v7_b8fc, align 4
  %v0_b900 = load i32, i32* %ip.global-to-local, align 4
  %v1_b900 = load i32, i32* %r2.global-to-local, align 4
  %v4_b900 = mul i32 %v1_b900, 4
  %v5_b900 = add i32 %v4_b900, %v0_b900
  %v6_b900 = inttoptr i32 %v5_b900 to i32*
  %v7_b900 = load i32, i32* %v6_b900, align 4
  store i32 %v7_b900, i32* %r1.global-to-local, align 4
  %v1_b904 = inttoptr i32 %v7_b900 to i8*
  %v2_b904 = load i8, i8* %v1_b904, align 1
  %tmp67 = urem i8 %v2_b904, 16
  %v1_b908 = zext i8 %tmp67 to i32
  %v1_b90c = or i32 %v1_b908, 64
  store i32 %v1_b90c, i32* %r3.global-to-local, align 4
  %v1_b910 = trunc i32 %v1_b90c to i8
  store i8 %v1_b910, i8* %v1_b904, align 1
  %v0_b914 = load i32, i32* %r1.global-to-local, align 4
  %v1_b914 = inttoptr i32 %v0_b914 to i8*
  %v2_b914 = load i8, i8* %v1_b914, align 1
  %v3_b914 = zext i8 %v2_b914 to i32
  %v1_b918 = and i32 %v3_b914, 240
  %v1_b91c = or i32 %v1_b918, 5
  store i32 %v1_b91c, i32* %r2.global-to-local, align 4
  %v3_b924 = add i32 %v0_b914, 9
  %v4_b924 = inttoptr i32 %v3_b924 to i8*
  store i8 17, i8* %v4_b924, align 1
  %v0_b928 = load i32, i32* %r2.global-to-local, align 4
  %v1_b928 = trunc i32 %v0_b928 to i8
  %v2_b928 = load i32, i32* %r1.global-to-local, align 4
  %v3_b928 = inttoptr i32 %v2_b928 to i8*
  store i8 %v1_b928, i8* %v3_b928, align 1
  store i32 %v6_b364, i32* %r0.global-to-local, align 4
  %v2_b930 = load i32, i32* %r1.global-to-local, align 4
  %v3_b930 = add i32 %v2_b930, 1
  %v4_b930 = inttoptr i32 %v3_b930 to i8*
  store i8 %v5_b384, i8* %v4_b930, align 1
  %v2_b938 = load i32, i32* %r1.global-to-local, align 4
  %v3_b938 = add i32 %v2_b938, 8
  %v4_b938 = inttoptr i32 %v3_b938 to i8*
  store i8 %v5_b3bc, i8* %v4_b938, align 1
  %v3_b93c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b93c, i32* %r2.global-to-local, align 4
  %v3_b940 = mul i32 %v3_b93c, 32
  store i32 %v3_b940, i32* %r3.global-to-local, align 4
  %v0_b944 = load i32, i32* @fp, align 4
  %v1_b944 = load i32, i32* %r1.global-to-local, align 4
  %v2_b944 = add i32 %v1_b944, 12
  %v3_b944 = inttoptr i32 %v2_b944 to i32*
  store i32 %v0_b944, i32* %v3_b944, align 4
  %v0_b948 = load i32, i32* %r3.global-to-local, align 4
  %v1_b948 = load i32, i32* %r2.global-to-local, align 4
  %tmp68 = mul i32 %v1_b948, -8
  %v5_b948 = add i32 %v0_b948, %tmp68
  %v1_b94c = load i32, i32* @r8, align 4
  %v2_b94c = add i32 %v5_b948, %v1_b94c
  store i32 %v2_b94c, i32* %r3.global-to-local, align 4
  %v1_b950 = add i32 %v2_b94c, 16
  %v2_b950 = inttoptr i32 %v1_b950 to i32*
  %v3_b950 = load i32, i32* %v2_b950, align 4
  store i32 %v1_b320, i32* %r3.global-to-local, align 4
  %v1_b958 = add i32 %v1_b948, 1
  store i32 %v1_b958, i32* @r4, align 4
  %v1_b95c = load i32, i32* %r1.global-to-local, align 4
  %v2_b95c = add i32 %v1_b95c, 16
  %v3_b95c = inttoptr i32 %v2_b95c to i32*
  store i32 %v3_b950, i32* %v3_b95c, align 4
  store i32 %v3_b8bc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_b968 = load i32, i32* @r4, align 4
  %v1_b968 = load i32, i32* %r3.global-to-local, align 4
  %v9_b968 = icmp eq i32 %v0_b968, %v1_b968
  store i1 %v9_b968, i1* %cpsr_z.global-to-local, align 1
  %v2_b970 = load i32, i32* %r1.global-to-local, align 4
  %v3_b970 = add i32 %v2_b970, 6
  %v4_b970 = inttoptr i32 %v3_b970 to i8*
  store i8 64, i8* %v4_b970, align 1
  %v0_b974 = load i32, i32* %r2.global-to-local, align 4
  %v1_b974 = trunc i32 %v0_b974 to i8
  %v2_b974 = load i32, i32* %r1.global-to-local, align 4
  %v3_b974 = add i32 %v2_b974, 7
  %v4_b974 = inttoptr i32 %v3_b974 to i8*
  store i8 %v1_b974, i8* %v4_b974, align 1
  %v0_b978 = load i32, i32* %ip.global-to-local, align 4
  %v1_b978 = trunc i32 %v0_b978 to i8
  %v2_b978 = load i32, i32* %r1.global-to-local, align 4
  %v3_b978 = add i32 %v2_b978, 2
  %v4_b978 = inttoptr i32 %v3_b978 to i8*
  store i8 %v1_b978, i8* %v4_b978, align 1
  store i32 %v3_b8c0, i32* %r2.global-to-local, align 4
  store i32 %v7_b8bc, i32* %r3.global-to-local, align 4
  store i32 %v3_b8c4, i32* %ip.global-to-local, align 4
  %v0_b988 = load i32, i32* %r1.global-to-local, align 4
  %v1_b988 = add i32 %v0_b988, 20
  store i32 %v1_b988, i32* %r0.global-to-local, align 4
  %v3_b98c = add i32 %v0_b988, 3
  %v4_b98c = inttoptr i32 %v3_b98c to i8*
  store i8 %v1_b98c, i8* %v4_b98c, align 1
  %v0_b990 = load i32, i32* %r3.global-to-local, align 4
  %v1_b990 = trunc i32 %v0_b990 to i8
  %v2_b990 = load i32, i32* %r1.global-to-local, align 4
  %v3_b990 = add i32 %v2_b990, 4
  %v4_b990 = inttoptr i32 %v3_b990 to i8*
  store i8 %v1_b990, i8* %v4_b990, align 1
  %v0_b994 = load i32, i32* %ip.global-to-local, align 4
  %v1_b994 = trunc i32 %v0_b994 to i8
  %v2_b994 = load i32, i32* %r1.global-to-local, align 4
  %v3_b994 = add i32 %v2_b994, 5
  %v4_b994 = inttoptr i32 %v3_b994 to i8*
  store i8 %v1_b994, i8* %v4_b994, align 1
  %v0_b998 = load i32, i32* @r5, align 4
  %v1_b998 = trunc i32 %v0_b998 to i8
  %v2_b998 = load i32, i32* %r1.global-to-local, align 4
  %v3_b998 = add i32 %v2_b998, 20
  %v4_b998 = inttoptr i32 %v3_b998 to i8*
  store i8 %v1_b998, i8* %v4_b998, align 1
  store i32 %v4_b99c, i32* %r1.global-to-local, align 4
  %v0_b9a0 = load i32, i32* @r7, align 4
  %v1_b9a0 = trunc i32 %v0_b9a0 to i8
  %v2_b9a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a0 = add i32 %v2_b9a0, 5
  %v4_b9a0 = inttoptr i32 %v3_b9a0 to i8*
  store i8 %v1_b9a0, i8* %v4_b9a0, align 1
  %v0_b9a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b9a4 = trunc i32 %v0_b9a4 to i8
  %v2_b9a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a4 = add i32 %v2_b9a4, 1
  %v4_b9a4 = inttoptr i32 %v3_b9a4 to i8*
  store i8 %v1_b9a4, i8* %v4_b9a4, align 1
  %v0_b9a8 = load i32, i32* @r6, align 4
  %v1_b9a8 = trunc i32 %v0_b9a8 to i8
  %v2_b9a8 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a8 = add i32 %v2_b9a8, 2
  %v4_b9a8 = inttoptr i32 %v3_b9a8 to i8*
  store i8 %v1_b9a8, i8* %v4_b9a8, align 1
  %v0_b9ac = load i32, i32* %sl.global-to-local, align 4
  %v1_b9ac = trunc i32 %v0_b9ac to i8
  %v2_b9ac = load i32, i32* %r0.global-to-local, align 4
  %v3_b9ac = add i32 %v2_b9ac, 3
  %v4_b9ac = inttoptr i32 %v3_b9ac to i8*
  store i8 %v1_b9ac, i8* %v4_b9ac, align 1
  %v0_b9b0 = load i32, i32* %sb.global-to-local, align 4
  %v1_b9b0 = trunc i32 %v0_b9b0 to i8
  %v2_b9b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9b0 = add i32 %v2_b9b0, 4
  %v4_b9b0 = inttoptr i32 %v3_b9b0 to i8*
  store i8 %v1_b9b0, i8* %v4_b9b0, align 1
  %v0_b9b4 = load i32, i32* @r4, align 4
  store i32 %v0_b9b4, i32* %stack_var_-40, align 4
  %v5_b9b8 = icmp slt i32 %v0_b968, %v1_b968
  br i1 %v5_b9b8, label %dec_label_pc_b8e4, label %dec_label_pc_b664.preheader

; uselistorder directives
  uselistorder i32 %v1_b948, { 1, 0 }
  uselistorder i32 %v3_b8c4, { 1, 0 }
  uselistorder i32 %v3_b8c0, { 2, 1, 0 }
  uselistorder i32 %v7_b8bc, { 1, 0 }
  uselistorder i32 %v3_b8bc, { 1, 0 }
  uselistorder i32 %v1_b8b0, { 1, 0 }
  uselistorder i32 %v4_b860, { 1, 0 }
  uselistorder i32 %v0_b858, { 0, 2, 1 }
  uselistorder i32 %v0_b83c, { 0, 2, 1 }
  uselistorder i32 %v2_b7f4, { 1, 0 }
  uselistorder i32 %v8_b7d8, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b7c4, { 1, 0 }
  uselistorder i32 %v3_b7a0, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b76c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_b710, { 0, 2, 1 }
  uselistorder i32 %v0_b6f8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_b6e4, { 1, 0 }
  uselistorder i32 %v2_b6e0, { 0, 2, 1 }
  uselistorder i1 %v7_b690, { 1, 0 }
  uselistorder i1 %v3_b814, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b600, { 1, 0 }
  uselistorder i8 %v5_b560, { 0, 2, 1 }
  uselistorder i8 %v5_b55c, { 1, 0 }
  uselistorder i32 %v1_b558, { 1, 2, 0 }
  uselistorder i32 %v3_b544, { 1, 0 }
  uselistorder i32 %v1_b530, { 1, 0 }
  uselistorder i32 %v1_b514, { 1, 2, 0 }
  uselistorder i32 %v1_b510, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_b50c, { 3, 4, 0, 2, 1 }
  uselistorder i1 %v2_b4f0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b4e4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b4d8, { 1, 0, 2 }
  uselistorder i32 %v0_b4c8, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_b4bc, { 3, 1, 2, 0 }
  uselistorder i1 %v7_b4a8, { 1, 0 }
  uselistorder i1 %v7_b47c, { 1, 0 }
  uselistorder i32 %v3_b478, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_b464, { 2, 1, 0 }
  uselistorder i32 %v1_b440, { 3, 1, 2, 4, 0 }
  uselistorder i32 %v6_b3e4, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 %v1_b3cc, { 2, 1, 0 }
  uselistorder i32 %v6_b3a0, { 2, 1, 3, 0 }
  uselistorder i32 %v7_b388, { 0, 2, 1, 4, 3, 5, 6 }
  uselistorder i32 %v6_b364, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b34c, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v1_b320, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 51, 50, 53, 52, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 11, 10, 13, 12, 15, 14, 17, 18, 16, 20, 19, 22, 21, 23, 25, 24, 32, 26, 27, 28, 29, 30, 31, 37, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_b8a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b874, { 1, 0 }
  uselistorder label %dec_label_pc_b6d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b664, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
}

define i32 @function_b9c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b9c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b9c4 = load i32, i32* @r4, align 4
  %v12_b9c4 = load i32, i32* @r7, align 4
  %v15_b9c4 = load i32, i32* @r8, align 4
  %v1_b9c8 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_b9e4 = urem i32 %arg4, 256
  store i32 %v1_b9e4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b9f4 = call i32 @function_1157c(i32 %v1_b9c8, i32 4)
  %v0_b9f8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ba00 = load i32, i32* @r7, align 4
  store i32 %v0_ba00, i32* %r3.global-to-local, align 4
  store i32 %v2_b9f4, i32* %fp.global-to-local, align 4
  %v0_ba08 = load i32, i32* @r4, align 4
  %v5_ba0c = inttoptr i32 %v0_b9f8 to i32*
  %v6_ba0c = call i32 @function_829c(i32 %v0_ba08, i32* %v5_ba0c, i32 2, i32 %v0_ba00, i32 ptrtoint (i32* @0 to i32))
  %v1_ba18 = urem i32 %v6_ba0c, 256
  store i32 %v1_ba18, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ba24 = load i32, i32* @r4, align 4
  %v0_ba28 = load i32, i32* @r5, align 4
  %v5_ba2c = trunc i32 %v6_ba0c to i8
  %v6_ba30 = inttoptr i32 %v0_ba28 to i32*
  %v7_ba30 = call i32 @function_829c(i32 %v0_ba24, i32* %v6_ba30, i32 3, i32 65535, i32 %v6_ba0c)
  %v0_ba34 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ba40 = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_ba48 = inttoptr i32 %v0_ba34 to i32*
  %v6_ba48 = call i32 @function_829c(i32 %v0_ba40, i32* %v5_ba48, i32 4, i32 64, i32 %v7_ba30)
  %v1_ba50 = urem i32 %v6_ba48, 256
  store i32 %v1_ba50, i32* %ip.global-to-local, align 4
  %v0_ba54 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_ba5c = load i32, i32* @r7, align 4
  store i32 %v0_ba5c, i32* %r3.global-to-local, align 4
  %v0_ba60 = load i32, i32* @r4, align 4
  %sext8 = mul i32 %v6_ba48, 16777216
  %v5_ba68 = sdiv i32 %sext8, 16777216
  %v6_ba68 = inttoptr i32 %v0_ba54 to i32*
  %v7_ba68 = call i32 @function_829c(i32 %v0_ba60, i32* %v6_ba68, i32 5, i32 %v0_ba5c, i32 %v5_ba68)
  %v1_ba74 = urem i32 %v7_ba68, 256
  store i32 %v1_ba74, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ba80 = load i32, i32* @r4, align 4
  %v0_ba84 = load i32, i32* @r5, align 4
  %v5_ba8c = inttoptr i32 %v0_ba84 to i32*
  %v6_ba8c = call i32 @function_829c(i32 %v0_ba80, i32* %v5_ba8c, i32 6, i32 65535, i32 %v1_ba74)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r5, align 4
  store i32 %v6_ba8c, i32* @r8, align 4
  %v0_baa4 = load i32, i32* @r4, align 4
  %v5_baa8 = inttoptr i32 %v0_ba9c to i32*
  %v6_baa8 = call i32 @function_829c(i32 %v0_baa4, i32* %v5_baa8, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_baa8, i32* @r4, align 4
  %v0_bab0 = load i32, i32* @r7, align 4
  store i32 %v0_bab0, i32* %stack_var_-44, align 4
  %v1_bab8 = inttoptr i32 %v0_bab0 to i32*
  %v2_bab8 = call i32 @function_10c8c(i32* %v1_bab8)
  %v1_babc = load i32, i32* @r6, align 4
  %v2_babc = add i32 %v1_babc, %v2_bab8
  %v1_bac8 = call i32 @function_fc64(i32 10)
  %v3_bad4 = call i32 @function_fb80(i32 10, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_bae8 = call i32 @function_11290(i32 2, i32 3, i32 17)
  %v7_baec = icmp eq i32 %v3_bae8, -1
  store i1 %v7_baec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bae8, i32* %sb.global-to-local, align 4
  br i1 %v7_baec, label %dec_label_pc_bea8, label %dec_label_pc_baf8

dec_label_pc_baf8:                                ; preds = %dec_label_pc_b9c4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bb00 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bb00, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_bb08 = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bb14 = call i32 @function_11260(i32 %v3_bae8, i32 %v0_bb08, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_bb18 = icmp eq i32 %v6_bb14, -1
  store i1 %v7_bb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb18, label %dec_label_pc_beb0, label %dec_label_pc_bb20

dec_label_pc_bb20:                                ; preds = %dec_label_pc_baf8
  %v0_bb24 = load i32, i32* @r4, align 4
  %v3_bb24 = mul i32 %v0_bb24, 65536
  store i32 %v3_bb24, i32* @lr, align 4
  %v3_bb30 = urem i32 %v7_ba30, 65536
  %v0_bb34 = load i32, i32* @r8, align 4
  %v3_bb34 = mul i32 %v0_bb34, 65536
  store i32 %v3_bb34, i32* %ip.global-to-local, align 4
  %v2_bb38 = icmp eq i32 %v1_b9c8, 0
  store i1 %v2_bb38, i1* %cpsr_z.global-to-local, align 1
  %v3_bb40 = urem i32 %v0_bb34, 65536
  store i32 %v3_bb40, i32* %r4.global-to-local, align 4
  %v3_bb44 = urem i32 %v0_bb24, 65536
  store i32 %v3_bb44, i32* %r3.global-to-local, align 4
  %v0_bb48 = load i32, i32* @r7, align 4
  store i32 %v0_bb48, i32* %stack_var_-40, align 4
  br i1 %v2_bb38, label %dec_label_pc_be94.critedge, label %dec_label_pc_bb58

dec_label_pc_bb58:                                ; preds = %dec_label_pc_bb20
  %v1_bb58 = urem i32 %v0_bb34, 256
  %v1_bb60 = urem i32 %v0_bb24, 256
  %tmp41 = udiv i32 %v7_ba30, 256
  %v3_bb64 = urem i32 %tmp41, 256
  %v3_bb6c = mul nuw nsw i32 %v1_bb60, 256
  %v1_bb68 = mul i32 %v7_ba30, 256
  %v4_bb70 = and i32 %v1_bb68, 65280
  %v5_bb70 = or i32 %v4_bb70, %v3_bb64
  store i32 %v5_bb70, i32* %r8.global-to-local, align 4
  %tmp42 = udiv i32 %v0_bb24, 256
  %v4_bb78 = urem i32 %tmp42, 256
  %v5_bb78 = or i32 %v4_bb78, %v3_bb6c
  store i32 %v5_bb78, i32* @r5, align 4
  %v3_bb7c = mul nuw nsw i32 %v1_bb58, 256
  store i32 %v3_bb7c, i32* %r2.global-to-local, align 4
  %v5_bb80 = trunc i32 %v7_ba30 to i8
  store i32 %v1_bb60, i32* %r3.global-to-local, align 4
  %tmp43 = udiv i32 %v0_bb34, 256
  %v4_bb88 = urem i32 %tmp43, 256
  %v5_bb88 = or i32 %v4_bb88, %v3_bb7c
  store i32 %v5_bb88, i32* @r6, align 4
  store i32 %v0_bb48, i32* @r4, align 4
  store i32 %v1_bb58, i32* @r7, align 4
  %v4_bc04 = sext i8 %v5_bb80 to i32
  %sext = mul i32 %v0_bb24, 16777216
  %v4_bc7c = sdiv i32 %sext, 16777216
  %v1_bbfc = trunc i32 %v5_ba68 to i8
  br label %dec_label_pc_bb98

dec_label_pc_bb98:                                ; preds = %bb47, %dec_label_pc_bb58
  %v2_bba0 = call i32 @function_1157c(i32 128, i32 1)
  %v3_bba4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bba4, i32* %r3.global-to-local, align 4
  %v1_bba8 = load i32, i32* %fp.global-to-local, align 4
  %v2_bba8 = load i32, i32* @r4, align 4
  %v5_bba8 = mul i32 %v2_bba8, 4
  %v6_bba8 = add i32 %v5_bba8, %v1_bba8
  %v7_bba8 = inttoptr i32 %v6_bba8 to i32*
  store i32 %v2_bba0, i32* %v7_bba8, align 4
  %v0_bbac = load i32, i32* %fp.global-to-local, align 4
  %v1_bbac = load i32, i32* %r3.global-to-local, align 4
  %v4_bbac = mul i32 %v1_bbac, 4
  %v5_bbac = add i32 %v4_bbac, %v0_bbac
  %v6_bbac = inttoptr i32 %v5_bbac to i32*
  %v7_bbac = load i32, i32* %v6_bbac, align 4
  store i32 %v7_bbac, i32* @lr, align 4
  %v1_bbb0 = inttoptr i32 %v7_bbac to i8*
  %v2_bbb0 = load i8, i8* %v1_bbb0, align 1
  %tmp = urem i8 %v2_bbb0, 16
  %v1_bbb4 = zext i8 %tmp to i32
  %v1_bbb8 = or i32 %v1_bbb4, 64
  store i32 %v1_bbb8, i32* %r3.global-to-local, align 4
  %v1_bbc0 = trunc i32 %v1_bbb8 to i8
  store i8 %v1_bbc0, i8* %v1_bbb0, align 1
  %v0_bbc4 = load i32, i32* @lr, align 4
  %v1_bbc4 = inttoptr i32 %v0_bbc4 to i8*
  %v2_bbc4 = load i8, i8* %v1_bbc4, align 1
  %v1_bbc8 = and i8 %v2_bbc4, -16
  %v1_bbcc = or i8 %v1_bbc8, 5
  store i8 %v1_bbcc, i8* %v1_bbc4, align 1
  %v2_bbd8 = load i32, i32* @lr, align 4
  %v3_bbd8 = add i32 %v2_bbd8, 1
  %v4_bbd8 = inttoptr i32 %v3_bbd8 to i8*
  store i8 %v5_ba2c, i8* %v4_bbd8, align 1
  %v3_bbdc = load i32, i32* %stack_var_-44, align 4
  %v1_bbe0 = add i32 %v3_bbdc, 32
  %tmp44 = mul i32 %v1_bbe0, 256
  store i32 %v5_ba68, i32* %r4.global-to-local, align 4
  %v1_bbf0 = and i32 %tmp44, 65280
  %tmp45 = udiv i32 %v1_bbe0, 256
  %v4_bbf4 = urem i32 %tmp45, 256
  %v5_bbf4 = or i32 %v4_bbf4, %v1_bbf0
  store i32 %v5_bbf4, i32* %r2.global-to-local, align 4
  store i32 %v1_ba74, i32* %r3.global-to-local, align 4
  %v2_bbfc = load i32, i32* @lr, align 4
  %v3_bbfc = add i32 %v2_bbfc, 8
  %v4_bbfc = inttoptr i32 %v3_bbfc to i8*
  store i8 %v1_bbfc, i8* %v4_bbfc, align 1
  %v0_bc00 = load i32, i32* %r3.global-to-local, align 4
  %v2_bc00 = icmp eq i32 %v0_bc00, 0
  store i1 %v2_bc00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_bc04, i32* %r3.global-to-local, align 4
  %v2_bc08 = load i32, i32* @lr, align 4
  %v3_bc08 = add i32 %v2_bc08, 5
  %v4_bc08 = inttoptr i32 %v3_bc08 to i8*
  store i8 %v5_bb80, i8* %v4_bc08, align 1
  %v0_bc0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc0c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bb98
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bc10 = load i32, i32* @lr, align 4
  %v4_bc10 = add i32 %v3_bc10, 6
  %v5_bc10 = inttoptr i32 %v4_bc10 to i8*
  store i8 64, i8* %v5_bc10, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bb98, %bb
  %v2_bc18 = load i32, i32* @lr, align 4
  %v3_bc18 = add i32 %v2_bc18, 9
  %v4_bc18 = inttoptr i32 %v3_bc18 to i8*
  store i8 17, i8* %v4_bc18, align 1
  %v0_bc1c = load i32, i32* %r2.global-to-local, align 4
  %v3_bc1c = sdiv i32 %v0_bc1c, 256
  store i32 %v3_bc1c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b860.47 to i32), i32* %r3.global-to-local, align 4
  %v1_bc24 = trunc i32 %v0_bc1c to i8
  %v2_bc24 = load i32, i32* @lr, align 4
  %v3_bc24 = add i32 %v2_bc24, 2
  %v4_bc24 = inttoptr i32 %v3_bc24 to i8*
  store i8 %v1_bc24, i8* %v4_bc24, align 1
  %v0_bc28 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc28 = trunc i32 %v0_bc28 to i8
  %v2_bc28 = load i32, i32* @lr, align 4
  %v3_bc28 = add i32 %v2_bc28, 3
  %v4_bc28 = inttoptr i32 %v3_bc28 to i8*
  store i8 %v1_bc28, i8* %v4_bc28, align 1
  %v0_bc2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc2c, label %.thread6, label %bb46

.thread6:                                         ; preds = %.thread
  %v3_bc307 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc307, i32* %ip.global-to-local, align 4
  br label %bb47

bb46:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_bc30 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc30, i32* %ip.global-to-local, align 4
  %v3_bc34 = load i32, i32* @lr, align 4
  %v4_bc34 = add i32 %v3_bc34, 7
  %v5_bc34 = inttoptr i32 %v4_bc34 to i8*
  store i8 0, i8* %v5_bc34, align 1
  %v0_bc3c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %.thread6, %bb46
  %v0_bc3c = phi i32 [ %v3_bc307, %.thread6 ], [ %v0_bc3c.pre, %bb46 ]
  %v2_bc38 = load i32, i32* @global_var_1b860.47, align 4
  store i32 %v2_bc38, i32* %r2.global-to-local, align 4
  %v3_bc3c = mul i32 %v0_bc3c, 32
  store i32 %v3_bc3c, i32* %r3.global-to-local, align 4
  %v1_bc40 = load i32, i32* @lr, align 4
  %v2_bc40 = add i32 %v1_bc40, 12
  %v3_bc40 = inttoptr i32 %v2_bc40 to i32*
  store i32 %v2_bc38, i32* %v3_bc40, align 4
  %v0_bc44 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc44 = load i32, i32* %ip.global-to-local, align 4
  %tmp52 = mul i32 %v1_bc44, -8
  %v5_bc44 = add i32 %v0_bc44, %tmp52
  %v1_bc48 = load i32, i32* @sl, align 4
  %v2_bc48 = add i32 %v5_bc44, %v1_bc48
  store i32 %v2_bc48, i32* %r3.global-to-local, align 4
  %v1_bc4c = add i32 %v2_bc48, 16
  %v2_bc4c = inttoptr i32 %v1_bc4c to i32*
  %v3_bc4c = load i32, i32* %v2_bc4c, align 4
  %v1_bc50 = load i32, i32* @lr, align 4
  %v2_bc50 = add i32 %v1_bc50, 16
  %v3_bc50 = inttoptr i32 %v2_bc50 to i32*
  store i32 %v3_bc4c, i32* %v3_bc50, align 4
  %v3_bc54 = load i32, i32* %stack_var_-44, align 4
  %v1_bc58 = add i32 %v3_bc54, 12
  %tmp48 = mul i32 %v1_bc58, 256
  %v1_bc64 = and i32 %tmp48, 65280
  %tmp49 = udiv i32 %v1_bc58, 256
  %v4_bc68 = urem i32 %tmp49, 256
  %v5_bc68 = or i32 %v4_bc68, %v1_bc64
  store i32 %v5_bc68, i32* %ip.global-to-local, align 4
  %v0_bc6c = load i32, i32* @lr, align 4
  %v1_bc6c = add i32 %v0_bc6c, 20
  store i32 %v1_bc6c, i32* %r4.global-to-local, align 4
  %v3_bc705 = udiv i32 %v1_bc64, 256
  store i32 %v3_bc705, i32* %r3.global-to-local, align 4
  %v0_bc74 = load i32, i32* %r8.global-to-local, align 4
  %v1_bc74 = trunc i32 %v0_bc74 to i8
  %v3_bc74 = add i32 %v0_bc6c, 4
  %v4_bc74 = inttoptr i32 %v3_bc74 to i8*
  store i8 %v1_bc74, i8* %v4_bc74, align 1
  %v0_bc78 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc78 = trunc i32 %v0_bc78 to i8
  %v2_bc78 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc78 = add i32 %v2_bc78, 5
  %v4_bc78 = inttoptr i32 %v3_bc78 to i8*
  store i8 %v1_bc78, i8* %v4_bc78, align 1
  store i32 %v4_bc7c, i32* %r3.global-to-local, align 4
  %v1_bc84 = load i32, i32* @lr, align 4
  %v2_bc84 = add i32 %v1_bc84, 28
  %v3_bc84 = inttoptr i32 %v2_bc84 to i32*
  store i32 -1, i32* %v3_bc84, align 4
  %v0_bc88 = load i32, i32* @r6, align 4
  %v1_bc88 = trunc i32 %v0_bc88 to i8
  %v2_bc88 = load i32, i32* @lr, align 4
  %v3_bc88 = add i32 %v2_bc88, 20
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 %v1_bc88, i8* %v4_bc88, align 1
  %v0_bc8c = load i32, i32* @r5, align 4
  %v1_bc8c = trunc i32 %v0_bc8c to i8
  %v2_bc8c = load i32, i32* %r4.global-to-local, align 4
  %v3_bc8c = add i32 %v2_bc8c, 2
  %v4_bc8c = inttoptr i32 %v3_bc8c to i8*
  store i8 %v1_bc8c, i8* %v4_bc8c, align 1
  %v0_bc90 = load i32, i32* @r7, align 4
  %v1_bc90 = trunc i32 %v0_bc90 to i8
  %v2_bc90 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc90 = add i32 %v2_bc90, 1
  %v4_bc90 = inttoptr i32 %v3_bc90 to i8*
  store i8 %v1_bc90, i8* %v4_bc90, align 1
  %v0_bc94 = load i32, i32* @lr, align 4
  %v1_bc94 = add i32 %v0_bc94, 32
  %v0_bc98 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc98 = trunc i32 %v0_bc98 to i8
  %v2_bc98 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc98 = add i32 %v2_bc98, 3
  %v4_bc98 = inttoptr i32 %v3_bc98 to i8*
  store i8 %v1_bc98, i8* %v4_bc98, align 1
  %v0_bc9c = load i32, i32* %ip.global-to-local, align 4
  %v1_bc9c = trunc i32 %v0_bc9c to i8
  %v2_bc9c = load i32, i32* %r4.global-to-local, align 4
  %v3_bc9c = add i32 %v2_bc9c, 4
  %v4_bc9c = inttoptr i32 %v3_bc9c to i8*
  store i8 %v1_bc9c, i8* %v4_bc9c, align 1
  %v3_bca0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bca0, i32* %r2.global-to-local, align 4
  %v3_bca4 = call i32 @function_101b8(i32 %v1_bc94, i32 %v3_bad4, i32 %v3_bca0)
  %v3_bca8 = load i32, i32* %stack_var_-40, align 4
  %v1_bcac = add i32 %v3_bca8, 1
  store i32 %v1_bcac, i32* @r4, align 4
  store i32 %v1_b9c8, i32* %r3.global-to-local, align 4
  %v9_bcb4 = icmp eq i32 %v1_bcac, %v1_b9c8
  store i1 %v9_bcb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bcac, i32* %stack_var_-40, align 4
  %v5_bcbc = icmp slt i32 %v1_bcac, %v1_b9c8
  br i1 %v5_bcbc, label %dec_label_pc_bb98, label %dec_label_pc_bcc0

dec_label_pc_bcc0:                                ; preds = %bb47, %dec_label_pc_be94
  store i32 %v1_b9c8, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_bb38, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_bb38, label %dec_label_pc_be94, label %dec_label_pc_bcd4

dec_label_pc_bcd4:                                ; preds = %dec_label_pc_bcc0
  store i32 0, i32* %r8.global-to-local, align 4
  %v3_bce4 = icmp eq i32 %v3_bb30, 65535
  br label %dec_label_pc_bdb8

dec_label_pc_bce0:                                ; preds = %dec_label_pc_bdb8
  store i32 %v3_bb30, i32* %r3.global-to-local, align 4
  store i1 %v3_bce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bce4, label %dec_label_pc_be48, label %dec_label_pc_bcec

dec_label_pc_bcec:                                ; preds = %dec_label_pc_bde0, %dec_label_pc_bce0
  %v1_bcf0 = phi i32 [ %v1_be40, %dec_label_pc_bde0 ], [ 65535, %dec_label_pc_bce0 ]
  %v9_bcf0 = icmp eq i32 %v3_bb40, %v1_bcf0
  store i1 %v9_bcf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bcf0, label %dec_label_pc_be64, label %dec_label_pc_bcf8

dec_label_pc_bcf8:                                ; preds = %dec_label_pc_be48.dec_label_pc_bcf8_crit_edge, %dec_label_pc_bcec
  %v1_bcfc = phi i32 [ %v1_bcfc.pre, %dec_label_pc_be48.dec_label_pc_bcf8_crit_edge ], [ %v1_bcf0, %dec_label_pc_bcec ]
  store i32 %v3_bb44, i32* %r3.global-to-local, align 4
  %v9_bcfc = icmp eq i32 %v3_bb44, %v1_bcfc
  store i1 %v9_bcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bcfc, label %dec_label_pc_be80, label %dec_label_pc_bd04

dec_label_pc_bd04:                                ; preds = %dec_label_pc_be64, %dec_label_pc_bcf8, %dec_label_pc_be80
  %v0_bd08 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd08 = trunc i32 %v0_bd08 to i8
  %v2_bd08 = load i32, i32* @r5, align 4
  %v3_bd08 = add i32 %v2_bd08, 10
  %v4_bd08 = inttoptr i32 %v3_bd08 to i8*
  store i8 %v1_bd08, i8* %v4_bd08, align 1
  %v0_bd0c = load i32, i32* %r8.global-to-local, align 4
  %v1_bd0c = trunc i32 %v0_bd0c to i8
  %v2_bd0c = load i32, i32* @r5, align 4
  %v3_bd0c = add i32 %v2_bd0c, 11
  %v4_bd0c = inttoptr i32 %v3_bd0c to i8*
  store i8 %v1_bd0c, i8* %v4_bd0c, align 1
  %v0_bd10 = load i32, i32* @r5, align 4
  store i32 %v0_bd10, i32* @r0, align 4
  %v2_bd14 = call i32 @function_c690(i32 %v0_bd10, i32 20)
  %v3_bd14 = trunc i32 %v2_bd14 to i8
  %v4_bd18 = sdiv i32 %v2_bd14, 256
  store i32 %v4_bd18, i32* %r3.global-to-local, align 4
  %v1_bd1c = trunc i32 %v4_bd18 to i8
  %v2_bd1c = load i32, i32* @r5, align 4
  %v3_bd1c = add i32 %v2_bd1c, 11
  %v4_bd1c = inttoptr i32 %v3_bd1c to i8*
  store i8 %v1_bd1c, i8* %v4_bd1c, align 1
  %v3_bd20 = load i32, i32* @r5, align 4
  %v4_bd20 = add i32 %v3_bd20, 10
  %v5_bd20 = inttoptr i32 %v4_bd20 to i8*
  store i8 %v3_bd14, i8* %v5_bd20, align 1
  %v0_bd24 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd24 = trunc i32 %v0_bd24 to i8
  %v2_bd24 = load i32, i32* @r6, align 4
  %v3_bd24 = add i32 %v2_bd24, 6
  %v4_bd24 = inttoptr i32 %v3_bd24 to i8*
  store i8 %v1_bd24, i8* %v4_bd24, align 1
  %v0_bd28 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd28 = trunc i32 %v0_bd28 to i8
  %v2_bd28 = load i32, i32* @r6, align 4
  %v3_bd28 = add i32 %v2_bd28, 7
  %v4_bd28 = inttoptr i32 %v3_bd28 to i8*
  store i8 %v1_bd28, i8* %v4_bd28, align 1
  %v0_bd2c = load i32, i32* @r5, align 4
  %v1_bd2c = add i32 %v0_bd2c, 24
  %v2_bd2c = inttoptr i32 %v1_bd2c to i8*
  %v3_bd2c = load i8, i8* %v2_bd2c, align 1
  %v4_bd2c = zext i8 %v3_bd2c to i32
  store i32 %v4_bd2c, i32* %r3.global-to-local, align 4
  %v1_bd30 = add i32 %v0_bd2c, 25
  %v2_bd30 = inttoptr i32 %v1_bd30 to i8*
  %v3_bd30 = load i8, i8* %v2_bd30, align 1
  %v4_bd30 = zext i8 %v3_bd30 to i32
  %v4_bd34 = mul nuw nsw i32 %v4_bd30, 256
  %v5_bd34 = or i32 %v4_bd34, %v4_bd2c
  store i32 %v5_bd34, i32* %r2.global-to-local, align 4
  %v3_bd38 = load i32, i32* %stack_var_-44, align 4
  %v0_bd3c = load i32, i32* @r6, align 4
  store i32 %v0_bd3c, i32* @r1, align 4
  %v1_bd40 = add i32 %v3_bd38, 12
  store i32 %v1_bd40, i32* %r3.global-to-local, align 4
  %v4_bd48 = call i32 @function_c6ec(i32 %v0_bd2c, i32 %v0_bd3c, i32 %v5_bd34, i32 %v1_bd40)
  %v5_bd48 = trunc i32 %v4_bd48 to i8
  %v4_bd4c14 = udiv i32 %v4_bd48, 256
  %v1_bd50 = trunc i32 %v4_bd4c14 to i8
  %v2_bd50 = load i32, i32* @r6, align 4
  %v3_bd50 = add i32 %v2_bd50, 7
  %v4_bd50 = inttoptr i32 %v3_bd50 to i8*
  store i8 %v1_bd50, i8* %v4_bd50, align 1
  %v3_bd54 = load i32, i32* @r6, align 4
  %v4_bd54 = add i32 %v3_bd54, 6
  %v5_bd54 = inttoptr i32 %v4_bd54 to i8*
  store i8 %v5_bd48, i8* %v5_bd54, align 1
  %v3_bd58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd58, i32* %r3.global-to-local, align 4
  %v0_bd5c = load i32, i32* @r5, align 4
  %v1_bd5c = add i32 %v0_bd5c, 20
  %v2_bd5c = inttoptr i32 %v1_bd5c to i32*
  %v3_bd5c = load i32, i32* %v2_bd5c, align 4
  %v5_bd64 = mul i32 %v3_bd58, 24
  %v1_bd68 = load i32, i32* @sl, align 4
  %v2_bd68 = add i32 %v1_bd68, %v5_bd64
  store i32 %v2_bd68, i32* %ip.global-to-local, align 4
  %v3_bd6c = udiv i32 %v3_bd5c, 65536
  store i32 %v3_bd6c, i32* %r2.global-to-local, align 4
  %v1_bd70 = trunc i32 %v3_bd6c to i8
  %v3_bd70 = add i32 %v2_bd68, 2
  %v4_bd70 = inttoptr i32 %v3_bd70 to i8*
  store i8 %v1_bd70, i8* %v4_bd70, align 1
  %v0_bd74 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd7415 = udiv i32 %v0_bd74, 256
  %v3_bd78 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bd78, i32* %r2.global-to-local, align 4
  %v1_bd7c = trunc i32 %v3_bd7415 to i8
  %v2_bd7c = load i32, i32* %ip.global-to-local, align 4
  %v3_bd7c = add i32 %v2_bd7c, 3
  %v4_bd7c = inttoptr i32 %v3_bd7c to i8*
  store i8 %v1_bd7c, i8* %v4_bd7c, align 1
  store i32 16, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bd88 = load i32, i32* @r5, align 4
  %v0_bd8c = load i32, i32* %r2.global-to-local, align 4
  %v1_bd8c = add i32 %v0_bd8c, 32
  store i32 %v1_bd8c, i32* %r2.global-to-local, align 4
  %v0_bd90 = load i32, i32* %sb.global-to-local, align 4
  %v0_bd98 = load i32, i32* %ip.global-to-local, align 4
  %v6_bd9c = inttoptr i32 %v0_bd88 to i32*
  %v7_bd9c = call i32 @function_1122c(i32 %v0_bd90, i32* %v6_bd9c, i32 %v1_bd8c, i32 16384, i32 %v0_bd98, i32 16)
  %v3_bda0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bda0, i32* %r3.global-to-local, align 4
  store i32 %v1_b9c8, i32* @r4, align 4
  %v1_bda8 = add i32 %v3_bda0, 1
  %v9_bdac = icmp eq i32 %v1_bda8, %v1_b9c8
  store i1 %v9_bdac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bda8, i32* %stack_var_-40, align 4
  %v6_bdb4 = icmp slt i32 %v1_bda8, %v1_b9c8
  br i1 %v6_bdb4, label %dec_label_pc_bdb8, label %dec_label_pc_be94

dec_label_pc_bdb8:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bcd4
  %v1_bdc8 = phi i32 [ %v1_bda8, %dec_label_pc_bd04 ], [ 0, %dec_label_pc_bcd4 ]
  %v5_bdbc = mul i32 %v1_bdc8, 24
  %v1_bdc0 = load i32, i32* @sl, align 4
  %v2_bdc0 = add i32 %v1_bdc0, %v5_bdbc
  store i32 %v2_bdc0, i32* %r3.global-to-local, align 4
  %v1_bdc4 = add i32 %v2_bdc0, 20
  %v2_bdc4 = inttoptr i32 %v1_bdc4 to i8*
  %v3_bdc4 = load i8, i8* %v2_bdc4, align 1
  %v4_bdc4 = zext i8 %v3_bdc4 to i32
  store i32 %v4_bdc4, i32* %r2.global-to-local, align 4
  %v0_bdc8 = load i32, i32* %fp.global-to-local, align 4
  %v4_bdc8 = mul i32 %v1_bdc8, 4
  %v5_bdc8 = add i32 %v0_bdc8, %v4_bdc8
  %v6_bdc8 = inttoptr i32 %v5_bdc8 to i32*
  %v7_bdc8 = load i32, i32* %v6_bdc8, align 4
  store i32 %v7_bdc8, i32* @r5, align 4
  %v2_bdd0 = icmp ugt i8 %v3_bdc4, 30
  %v7_bdd0 = icmp eq i8 %v3_bdc4, 31
  store i1 %v7_bdd0, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_bdd8 = add i32 %v7_bdc8, 20
  store i32 %v1_bdd8, i32* @r6, align 4
  %v2_bddc = xor i1 %v7_bdd0, true
  %v3_bddc = and i1 %v2_bdd0, %v2_bddc
  br i1 %v3_bddc, label %dec_label_pc_bce0, label %dec_label_pc_bde0

dec_label_pc_bde0:                                ; preds = %dec_label_pc_bdb8
  %v1_bde0 = add i32 %v2_bdc0, 16
  %v2_bde0 = inttoptr i32 %v1_bde0 to i32*
  %v3_bde0 = load i32, i32* %v2_bde0, align 4
  store i32 %v3_bde0, i32* %r4.global-to-local, align 4
  %v0_bde4 = call i32 @function_dab8()
  %v3_bde8 = load i32, i32* %stack_var_-40, align 4
  %v5_bdf0 = mul i32 %v3_bde8, 24
  %v1_bdf8 = and i32 %v3_bde0, 65280
  store i32 %v1_bdf8, i32* %r3.global-to-local, align 4
  %v1_bdf4 = udiv i32 %v3_bde0, 256
  %v3_bdfc = and i32 %v1_bdf4, 65280
  store i32 %v3_bdfc, i32* %r2.global-to-local, align 4
  %v1_be00 = load i32, i32* @sl, align 4
  %v2_be00 = add i32 %v1_be00, %v5_bdf0
  store i32 %v2_be00, i32* %ip.global-to-local, align 4
  %v1_be0c = add i32 %v2_be00, 20
  %v2_be0c = inttoptr i32 %v1_be0c to i8*
  %v3_be0c = load i8, i8* %v2_be0c, align 1
  %v4_be0c = zext i8 %v3_be0c to i32
  %v2_be14 = call i32 @llvm.bswap.i32(i32 %v3_bde0)
  %v7_be18 = lshr i32 %v0_bde4, %v4_be0c
  %v8_be18 = add i32 %v7_be18, %v2_be14
  store i32 %v8_be18, i32* %r2.global-to-local, align 4
  %v2_be34 = call i32 @llvm.bswap.i32(i32 %v8_be18)
  %v1_be38 = load i32, i32* @r5, align 4
  %v2_be38 = add i32 %v1_be38, 16
  %v3_be38 = inttoptr i32 %v2_be38 to i32*
  store i32 %v2_be34, i32* %v3_be38, align 4
  store i32 %v3_bb30, i32* %r3.global-to-local, align 4
  %v1_be40 = load i32, i32* %r7.global-to-local, align 4
  %v9_be40 = icmp eq i32 %v3_bb30, %v1_be40
  store i1 %v9_be40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_be40, label %dec_label_pc_be48, label %dec_label_pc_bcec

dec_label_pc_be48:                                ; preds = %dec_label_pc_bde0, %dec_label_pc_bce0
  %v0_be48 = call i32 @function_dab8()
  %v1_be48 = trunc i32 %v0_be48 to i8
  %v4_be50 = sdiv i32 %v0_be48, 256
  store i32 %v4_be50, i32* %r3.global-to-local, align 4
  %v1_be54 = load i32, i32* %r7.global-to-local, align 4
  %v9_be54 = icmp eq i32 %v3_bb40, %v1_be54
  store i1 %v9_be54, i1* %cpsr_z.global-to-local, align 1
  %v1_be58 = trunc i32 %v4_be50 to i8
  %v2_be58 = load i32, i32* @r5, align 4
  %v3_be58 = add i32 %v2_be58, 5
  %v4_be58 = inttoptr i32 %v3_be58 to i8*
  store i8 %v1_be58, i8* %v4_be58, align 1
  %v3_be5c = load i32, i32* @r5, align 4
  %v4_be5c = add i32 %v3_be5c, 4
  %v5_be5c = inttoptr i32 %v4_be5c to i8*
  store i8 %v1_be48, i8* %v5_be5c, align 1
  %v0_be60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be60, label %dec_label_pc_be64, label %dec_label_pc_be48.dec_label_pc_bcf8_crit_edge

dec_label_pc_be48.dec_label_pc_bcf8_crit_edge:    ; preds = %dec_label_pc_be48
  %v1_bcfc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bcf8

dec_label_pc_be64:                                ; preds = %dec_label_pc_be48, %dec_label_pc_bcec
  %v0_be64 = call i32 @function_dab8()
  %v1_be64 = trunc i32 %v0_be64 to i8
  %v4_be68 = sdiv i32 %v0_be64, 256
  store i32 %v4_be68, i32* %r3.global-to-local, align 4
  %v3_be6c = load i32, i32* @r5, align 4
  %v4_be6c = add i32 %v3_be6c, 20
  %v5_be6c = inttoptr i32 %v4_be6c to i8*
  store i8 %v1_be64, i8* %v5_be6c, align 1
  %v0_be70 = load i32, i32* %r3.global-to-local, align 4
  %v1_be70 = trunc i32 %v0_be70 to i8
  %v2_be70 = load i32, i32* @r6, align 4
  %v3_be70 = add i32 %v2_be70, 1
  %v4_be70 = inttoptr i32 %v3_be70 to i8*
  store i8 %v1_be70, i8* %v4_be70, align 1
  store i32 %v3_bb44, i32* %r3.global-to-local, align 4
  %v1_be78 = load i32, i32* %r7.global-to-local, align 4
  %v9_be78 = icmp eq i32 %v3_bb44, %v1_be78
  store i1 %v9_be78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_be78, label %dec_label_pc_be80, label %dec_label_pc_bd04

dec_label_pc_be80:                                ; preds = %dec_label_pc_be64, %dec_label_pc_bcf8
  %v0_be80 = call i32 @function_dab8()
  %v1_be80 = trunc i32 %v0_be80 to i8
  %v4_be84 = sdiv i32 %v0_be80, 256
  store i32 %v4_be84, i32* %r3.global-to-local, align 4
  %v1_be88 = trunc i32 %v4_be84 to i8
  %v2_be88 = load i32, i32* @r6, align 4
  %v3_be88 = add i32 %v2_be88, 3
  %v4_be88 = inttoptr i32 %v3_be88 to i8*
  store i8 %v1_be88, i8* %v4_be88, align 1
  %v3_be8c = load i32, i32* @r6, align 4
  %v4_be8c = add i32 %v3_be8c, 2
  %v5_be8c = inttoptr i32 %v4_be8c to i8*
  store i8 %v1_be80, i8* %v5_be8c, align 1
  br label %dec_label_pc_bd04

dec_label_pc_be94.critedge:                       ; preds = %dec_label_pc_bb20
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_be94

dec_label_pc_be94:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_be94.critedge, %dec_label_pc_bcc0
  %v2_be98 = call i32 @function_10c8c(i32* null)
  store i32 %v2_babc, i32* %r3.global-to-local, align 4
  %v9_bea0 = icmp eq i32 %v2_babc, %v2_be98
  store i1 %v9_bea0, i1* %cpsr_z.global-to-local, align 1
  %v6_bea4 = icmp slt i32 %v2_babc, %v2_be98
  br i1 %v6_bea4, label %dec_label_pc_bea8, label %dec_label_pc_bcc0

dec_label_pc_bea8:                                ; preds = %dec_label_pc_be94, %dec_label_pc_b9c4, %dec_label_pc_beb0
  %v29_beac = phi i32 [ %v3_bae8, %dec_label_pc_b9c4 ], [ %v1_beb4, %dec_label_pc_beb0 ], [ %v2_be98, %dec_label_pc_be94 ]
  store i32 %v3_b9c4, i32* %r4.global-to-local, align 4
  store i32 %v12_b9c4, i32* %r7.global-to-local, align 4
  store i32 %v15_b9c4, i32* %r8.global-to-local, align 4
  ret i32 %v29_beac

dec_label_pc_beb0:                                ; preds = %dec_label_pc_baf8
  %v0_beb0 = load i32, i32* %sb.global-to-local, align 4
  %v1_beb4 = call i32 @function_109bc(i32 %v0_beb0)
  br label %dec_label_pc_bea8

; uselistorder directives
  uselistorder i32 %v4_be84, { 1, 0 }
  uselistorder i32 %v4_be50, { 1, 0 }
  uselistorder i32 %v1_be40, { 1, 0 }
  uselistorder i32 %v3_bde0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_bda8, { 1, 2, 0, 3 }
  uselistorder i32 %v3_bd6c, { 1, 0 }
  uselistorder i32 %v4_bd18, { 1, 0 }
  uselistorder i1 %v3_bce4, { 1, 0 }
  uselistorder i32 %v1_bcac, { 1, 0, 2, 3 }
  uselistorder i32 %v1_bc58, { 1, 0 }
  uselistorder i32 %v0_bc1c, { 1, 0 }
  uselistorder i32 %v1_bbe0, { 1, 0 }
  uselistorder i8 %v5_bb80, { 1, 0 }
  uselistorder i32 %v3_bb7c, { 1, 0 }
  uselistorder i32 %v1_bb60, { 1, 0 }
  uselistorder i32 %v1_bb58, { 1, 0 }
  uselistorder i32 %v3_bb44, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_bb34, { 0, 1, 3, 2 }
  uselistorder i32 %v3_bb30, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bb24, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_bb18, { 1, 0 }
  uselistorder i1 %v7_baec, { 1, 0 }
  uselistorder i32 %v3_bae8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_babc, { 2, 1, 0 }
  uselistorder i32 %v1_ba74, { 1, 2, 0 }
  uselistorder i32 %v5_ba68, { 0, 2, 1 }
  uselistorder i32 %v7_ba30, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v6_ba0c, { 1, 2, 0 }
  uselistorder i32 %v1_b9c8, { 1, 2, 3, 0, 4, 5, 6, 8, 7 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 18, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 9, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5, 10, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_bea8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_be94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bcc0, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bec0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bec0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_bec0 = load i32, i32* @r4, align 4
  %v15_bec0 = load i32, i32* @r8, align 4
  %v21_bec0 = load i32, i32* @sl, align 4
  %v24_bec0 = load i32, i32* @fp, align 4
  %v1_becc = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_becc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bee4 = urem i32 %arg4, 256
  store i32 %v1_bee4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_bef4 = call i32 @function_1157c(i32 %v1_becc, i32 4)
  %v0_bef8 = load i32, i32* @r5, align 4
  store i32 %v0_bef8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bf04 = load i32, i32* @r4, align 4
  store i32 %v0_bf04, i32* %r0.global-to-local, align 4
  %v0_bf08 = load i32, i32* @r6, align 4
  store i32 %v0_bf08, i32* %r3.global-to-local, align 4
  %v5_bf0c = inttoptr i32 %v0_bef8 to i32*
  %v6_bf0c = call i32 @function_829c(i32 %v0_bf04, i32* %v5_bf0c, i32 2, i32 %v0_bf08, i32 %v2_bef4)
  %v1_bf18 = urem i32 %v6_bf0c, 256
  store i32 %v1_bf18, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bf24 = load i32, i32* @r4, align 4
  store i32 %v0_bf24, i32* %r0.global-to-local, align 4
  %v0_bf28 = load i32, i32* @r5, align 4
  store i32 %v0_bf28, i32* %r1.global-to-local, align 4
  %v5_bf2c = trunc i32 %v6_bf0c to i8
  %v6_bf30 = inttoptr i32 %v0_bf28 to i32*
  %v7_bf30 = call i32 @function_829c(i32 %v0_bf24, i32* %v6_bf30, i32 3, i32 65535, i32 %v6_bf0c)
  %v0_bf34 = load i32, i32* @r5, align 4
  store i32 %v0_bf34, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_bf40 = load i32, i32* @r4, align 4
  store i32 %v0_bf40, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_bf48 = inttoptr i32 %v0_bf34 to i32*
  %v6_bf48 = call i32 @function_829c(i32 %v0_bf40, i32* %v5_bf48, i32 4, i32 64, i32 %v7_bf30)
  %v1_bf50 = urem i32 %v6_bf48, 256
  store i32 %v1_bf50, i32* %ip.global-to-local, align 4
  %v0_bf54 = load i32, i32* @r5, align 4
  store i32 %v0_bf54, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bf5c = load i32, i32* @r6, align 4
  store i32 %v0_bf5c, i32* %r3.global-to-local, align 4
  %v0_bf60 = load i32, i32* @r4, align 4
  store i32 %v0_bf60, i32* %r0.global-to-local, align 4
  %sext38 = mul i32 %v6_bf48, 16777216
  %v5_bf68 = sdiv i32 %sext38, 16777216
  %v6_bf68 = inttoptr i32 %v0_bf54 to i32*
  %v7_bf68 = call i32 @function_829c(i32 %v0_bf60, i32* %v6_bf68, i32 5, i32 %v0_bf5c, i32 %v5_bf68)
  %v1_bf74 = urem i32 %v7_bf68, 256
  store i32 %v1_bf74, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bf80 = load i32, i32* @r4, align 4
  store i32 %v0_bf80, i32* %r0.global-to-local, align 4
  %v0_bf84 = load i32, i32* @r5, align 4
  store i32 %v0_bf84, i32* %r1.global-to-local, align 4
  %v5_bf8c = inttoptr i32 %v0_bf84 to i32*
  %v6_bf8c = call i32 @function_829c(i32 %v0_bf80, i32* %v5_bf8c, i32 6, i32 65535, i32 %v1_bf74)
  %v0_bf90 = load i32, i32* @r5, align 4
  store i32 %v0_bf90, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_bf9c = load i32, i32* @r4, align 4
  store i32 %v0_bf9c, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_bfa4 = inttoptr i32 %v0_bf90 to i32*
  %v6_bfa4 = call i32 @function_829c(i32 %v0_bf9c, i32* %v5_bfa4, i32 7, i32 53, i32 %v6_bf8c)
  %v0_bfb0 = load i32, i32* @r5, align 4
  store i32 %v0_bfb0, i32* %r1.global-to-local, align 4
  %v0_bfb4 = load i32, i32* @r4, align 4
  store i32 %v0_bfb4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_bfc0 = inttoptr i32 %v0_bfb0 to i32*
  %v6_bfc0 = call i32 @function_829c(i32 %v0_bfb4, i32* %v5_bfc0, i32 9, i32 65535, i32 %v6_bfa4)
  %v0_bfc4 = load i32, i32* @r5, align 4
  store i32 %v0_bfc4, i32* %r1.global-to-local, align 4
  %v0_bfcc = load i32, i32* @r6, align 4
  store i32 %v0_bfcc, i32* %r2.global-to-local, align 4
  %v0_bfd0 = load i32, i32* @r4, align 4
  store i32 %v0_bfd0, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_bfd8 = inttoptr i32 %v0_bfc4 to i32*
  %v6_bfd8 = call i32 @function_829c(i32 %v0_bfd0, i32* %v5_bfd8, i32 %v0_bfcc, i32 12, i32 %v6_bfc0)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_bfe0 = load i32, i32* @r6, align 4
  store i32 %v0_bfe0, i32* %r3.global-to-local, align 4
  %v0_bfe4 = load i32, i32* @r5, align 4
  store i32 %v0_bfe4, i32* %r1.global-to-local, align 4
  %v0_bfec = load i32, i32* @r4, align 4
  store i32 %v0_bfec, i32* %r0.global-to-local, align 4
  %v5_bff0 = inttoptr i32 %v0_bfe4 to i32*
  %v6_bff0 = call i32 @function_81cc(i32 %v0_bfec, i32* %v5_bff0, i32 8, i32 %v0_bfe0, i32 %v6_bfd8)
  store i32 %v6_bff0, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_bffc = call i32 @function_fc64(i32 11)
  %v0_c000 = load i32, i32* @r6, align 4
  store i32 %v0_c000, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v2_c008 = inttoptr i32 %v0_c000 to i32*
  %v3_c008 = call i32 @function_fb80(i32 11, i32* %v2_c008)
  store i32 %v3_c008, i32* %r0.global-to-local, align 4
  %v0_c00c = load i32, i32* @r6, align 4
  store i32 %v0_c00c, i32* %r1.global-to-local, align 4
  %v2_c010 = inttoptr i32 %v3_c008 to i8*
  %v3_c010 = call i32 @function_10ae8(i8* %v2_c010, i32 %v0_c00c)
  store i32 %v3_c010, i32* @r4, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_c01c = call i32 @function_fbac(i32 11)
  store i32 %v1_c01c, i32* %r0.global-to-local, align 4
  %v0_c020 = load i32, i32* @r4, align 4
  %v1_c020 = load i32, i32* @r6, align 4
  %v9_c020 = icmp eq i32 %v0_c020, %v1_c020
  store i1 %v9_c020, i1* %cpsr_z.global-to-local, align 1
  %v5_c024 = icmp slt i32 %v0_c020, %v1_c020
  br i1 %v5_c024, label %dec_label_pc_c0f8, label %dec_label_pc_c028

dec_label_pc_c028:                                ; preds = %dec_label_pc_bec0
  %v2_c02c = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_c02c, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_c02c, i32* %r1.global-to-local, align 4
  store i32 %v0_c020, i32* %r0.global-to-local, align 4
  %v4_c03c = call i32 @function_10b84(i32 %v0_c020, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_c03c, i32* @r5, align 4
  %v0_c044 = load i32, i32* @r4, align 4
  store i32 %v0_c044, i32* %r0.global-to-local, align 4
  %v1_c048 = call i32 @function_109bc(i32 %v0_c044)
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_c050 = call i32 @function_fc64(i32 12)
  %v0_c054 = load i32, i32* @r6, align 4
  store i32 %v0_c054, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v2_c05c = inttoptr i32 %v0_c054 to i32*
  %v3_c05c = call i32 @function_fb80(i32 12, i32* %v2_c05c)
  %v0_c060 = load i32, i32* @r5, align 4
  store i32 %v0_c060, i32* @r1, align 4
  store i32 %v3_c05c, i32* %r2.global-to-local, align 4
  store i32 %v2_c02c, i32* %r0.global-to-local, align 4
  %v3_c06c = bitcast i32* %stack_var_-2120 to i8*
  %v4_c06c = call i32 @function_10490(i8* %v3_c06c, i32 %v0_c060, i32 %v3_c05c)
  store i32 %v4_c06c, i32* %r8.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_c078 = call i32 @function_fbac(i32 12)
  store i32 %v1_c078, i32* %r0.global-to-local, align 4
  %v7_c07c = icmp eq i32 %v4_c06c, -1
  store i1 %v7_c07c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c07c, label %dec_label_pc_c0f8, label %dec_label_pc_c084

dec_label_pc_c084:                                ; preds = %dec_label_pc_c028
  %v0_c084 = load i32, i32* @r5, align 4
  %v9_c084 = icmp eq i32 %v0_c084, %v4_c06c
  store i1 %v9_c084, i1* %cpsr_z.global-to-local, align 1
  %v7_c088 = icmp sgt i32 %v0_c084, %v4_c06c
  br i1 %v7_c088, label %dec_label_pc_c08c, label %dec_label_pc_c0f8

dec_label_pc_c08c:                                ; preds = %dec_label_pc_c084
  %v2_c084 = sub i32 %v0_c084, %v4_c06c
  store i32 %v2_c084, i32* %r3.global-to-local, align 4
  %v2_c094 = ptrtoint i32* %stack_var_-72 to i32
  %v0_c098 = load i32, i32* @r6, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 %v4_c06c, i32* %r2.global-to-local, align 4
  %v0_c0a4 = load i32, i32* %sl.global-to-local, align 4
  %v2_c0a4 = add i32 %v0_c0a4, %v4_c06c
  store i32 %v2_c0a4, i32* %r0.global-to-local, align 4
  store i32 %v2_c094, i32* @r4, align 4
  %v1_c0b4 = add i32 %v0_c084, -1
  br label %dec_label_pc_c0ac

dec_label_pc_c0ac:                                ; preds = %dec_label_pc_c0e8, %dec_label_pc_c08c
  %v0_c0f0 = phi i32 [ %v1_c0f0, %dec_label_pc_c0e8 ], [ %v2_c094, %dec_label_pc_c08c ]
  %v0_c0e8 = phi i32 [ %v1_c0e8, %dec_label_pc_c0e8 ], [ %v4_c06c, %dec_label_pc_c08c ]
  %v0_c0d0 = phi i32 [ %v0_c0d046, %dec_label_pc_c0e8 ], [ %v0_c098, %dec_label_pc_c08c ]
  %v0_c0b0 = phi i32 [ %v0_c0b042, %dec_label_pc_c0e8 ], [ %v0_c098, %dec_label_pc_c08c ]
  %v0_c0b8 = phi i32 [ %v1_c0b8, %dec_label_pc_c0e8 ], [ %v2_c0a4, %dec_label_pc_c08c ]
  %v1_c0ac = inttoptr i32 %v0_c0b8 to i8*
  %v2_c0ac = load i8, i8* %v1_c0ac, align 1
  %v3_c0ac = zext i8 %v2_c0ac to i32
  store i32 %v3_c0ac, i32* %r3.global-to-local, align 4
  %v2_c0b0 = icmp eq i32 %v0_c0b0, 0
  store i1 %v2_c0b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0b4, i32* %lr.global-to-local, align 4
  %v1_c0b8 = add i32 %v0_c0b8, 1
  store i32 %v1_c0b8, i32* %r0.global-to-local, align 4
  %v1_c0bc = add nsw i32 %v3_c0ac, -48
  store i32 %v1_c0bc, i32* %ip.global-to-local, align 4
  br i1 %v2_c0b0, label %dec_label_pc_c0c4, label %dec_label_pc_c0d4

dec_label_pc_c0c4:                                ; preds = %dec_label_pc_c0ac
  %v7_c0c4 = icmp eq i8 %v2_c0ac, 9
  store i1 %v7_c0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0c4, label %dec_label_pc_c0e8, label %bb

bb:                                               ; preds = %dec_label_pc_c0c4
  %v8_c0c8 = icmp eq i8 %v2_c0ac, 32
  store i1 %v8_c0c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c0c8, label %dec_label_pc_c0e8, label %dec_label_pc_c0d0

dec_label_pc_c0d0:                                ; preds = %bb
  %v1_c0d0 = add i32 %v0_c0d0, 1
  store i32 %v1_c0d0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c0d4

dec_label_pc_c0d4:                                ; preds = %dec_label_pc_c0ac, %dec_label_pc_c0d0
  %v0_c0d047 = phi i32 [ %v0_c0d0, %dec_label_pc_c0ac ], [ %v1_c0d0, %dec_label_pc_c0d0 ]
  %v0_c0b043 = phi i32 [ %v0_c0b0, %dec_label_pc_c0ac ], [ %v1_c0d0, %dec_label_pc_c0d0 ]
  %v7_c0d4 = icmp eq i8 %v2_c0ac, 46
  store i1 %v7_c0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0d4, label %dec_label_pc_c0e0, label %bb129

bb129:                                            ; preds = %dec_label_pc_c0d4
  %v3_c0d8 = icmp ugt i32 %v1_c0bc, 8
  %v8_c0d8 = icmp eq i32 %v1_c0bc, 9
  store i1 %v8_c0d8, i1* %cpsr_z.global-to-local, align 1
  %v2_c0dc = xor i1 %v8_c0d8, true
  %v3_c0dc = and i1 %v3_c0d8, %v2_c0dc
  br i1 %v3_c0dc, label %dec_label_pc_c628, label %dec_label_pc_c0e0

dec_label_pc_c0e0:                                ; preds = %dec_label_pc_c0d4, %bb129
  %v9_c0e0 = icmp eq i32 %v0_c0e8, %v1_c0b4
  store i1 %v9_c0e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c0e0, label %dec_label_pc_c628, label %dec_label_pc_c0e8

dec_label_pc_c0e8:                                ; preds = %dec_label_pc_c0c4, %dec_label_pc_c0e0, %bb
  %v0_c0d046 = phi i32 [ %v0_c0d0, %dec_label_pc_c0c4 ], [ %v0_c0d047, %dec_label_pc_c0e0 ], [ %v0_c0d0, %bb ]
  %v0_c0b042 = phi i32 [ 0, %dec_label_pc_c0c4 ], [ %v0_c0b043, %dec_label_pc_c0e0 ], [ 0, %bb ]
  %v1_c0e8 = add i32 %v0_c0e8, 1
  store i32 %v1_c0e8, i32* %r2.global-to-local, align 4
  %v9_c0ec = icmp eq i32 %v0_c084, %v1_c0e8
  store i1 %v9_c0ec, i1* %cpsr_z.global-to-local, align 1
  %v1_c0f0 = add i32 %v0_c0f0, 1
  store i32 %v1_c0f0, i32* @r4, align 4
  br i1 %v9_c0ec, label %dec_label_pc_c0f8, label %dec_label_pc_c0ac

dec_label_pc_c0f8:                                ; preds = %dec_label_pc_c0e8, %dec_label_pc_c084, %dec_label_pc_c028, %dec_label_pc_bec0
  %v0_c0f8 = call i32 @function_dab8()
  %v1_c0fc = urem i32 %v0_c0f8, 4
  store i32 %v1_c0fc, i32* %r0.global-to-local, align 4
  %v2_c100 = icmp eq i32 %v1_c0fc, 3
  store i1 %v2_c100, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c0f8 to i2
  switch i2 %trunc, label %dec_label_pc_c12424 [
    i2 0, label %dec_label_pc_c660
    i2 1, label %dec_label_pc_c11c
    i2 -2, label %dec_label_pc_c650
    i2 -1, label %dec_label_pc_c674
  ]

dec_label_pc_c11c:                                ; preds = %dec_label_pc_c0f8
  store i32 74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c124

dec_label_pc_c12424:                              ; preds = %dec_label_pc_c0f8
  unreachable

dec_label_pc_c124:                                ; preds = %dec_label_pc_c674, %dec_label_pc_c660, %dec_label_pc_c650, %dec_label_pc_c628, %dec_label_pc_c11c
  %stack_var_-2188.0 = phi i32 [ 4, %dec_label_pc_c674 ], [ 64, %dec_label_pc_c650 ], [ 74, %dec_label_pc_c11c ], [ 8, %dec_label_pc_c660 ], [ %phitmp, %dec_label_pc_c628 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c128 = call i32 @function_10c8c(i32* null)
  %v0_c12c = load i32, i32* @r7, align 4
  %v2_c12c = icmp eq i32 %v0_c12c, 0
  store i1 %v2_c12c, i1* %cpsr_z.global-to-local, align 1
  %v1_c130 = load i32, i32* %fp.global-to-local, align 4
  %v2_c130 = add i32 %v1_c130, %v2_c128
  store i32 %v2_c130, i32* %r0.global-to-local, align 4
  br i1 %v2_c12c, label %dec_label_pc_c604, label %dec_label_pc_c13c

dec_label_pc_c13c:                                ; preds = %dec_label_pc_c124
  store i32 %v0_c12c, i32* %r0.global-to-local, align 4
  %v1_c140 = inttoptr i32 %v0_c12c to i8*
  %v2_c140 = call i32 @function_1013c(i8* %v1_c140)
  %v3_c140 = inttoptr i32 %v2_c140 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c154 = call i32 @function_11290(i32 2, i32 3, i32 17)
  store i32 %v3_c154, i32* %r0.global-to-local, align 4
  %v7_c158 = icmp eq i32 %v3_c154, -1
  store i1 %v7_c158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c158, label %dec_label_pc_c604, label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c13c
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c170 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c170, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c184 = call i32 @function_11260(i32 %v3_c154, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_c184, i32* %r0.global-to-local, align 4
  %v7_c188 = icmp eq i32 %v6_c184, -1
  store i1 %v7_c188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c188, label %dec_label_pc_c5fc, label %dec_label_pc_c190

dec_label_pc_c190:                                ; preds = %dec_label_pc_c164
  %v3_c198 = mul i32 %v7_bf30, 65536
  store i32 %v3_c198, i32* %r8.global-to-local, align 4
  %v3_c1a4 = mul i32 %v6_bf8c, 65536
  store i32 %v3_c1a4, i32* %r0.global-to-local, align 4
  %v3_c1a8 = mul i32 %v6_bfa4, 65536
  store i32 %v3_c1a8, i32* %sl.global-to-local, align 4
  %v3_c1ac = mul i32 %v6_bfc0, 65536
  store i32 %v3_c1ac, i32* %fp.global-to-local, align 4
  %v2_c1b0 = icmp eq i32 %v1_becc, 0
  store i1 %v2_c1b0, i1* %cpsr_z.global-to-local, align 1
  %v1_c1b4 = urem i32 %v6_bfd8, 256
  store i32 %v1_c1b4, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c1bc = urem i32 %v7_bf30, 65536
  %v3_c1c0 = urem i32 %v6_bf8c, 65536
  store i32 %v3_c1c0, i32* %ip.global-to-local, align 4
  %v3_c1c4 = urem i32 %v6_bfa4, 65536
  store i32 %v3_c1c4, i32* %lr.global-to-local, align 4
  %v3_c1c8 = urem i32 %v6_bfc0, 65536
  store i32 %v3_c1c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c1b0, label %dec_label_pc_c610.critedge, label %dec_label_pc_c1e4

dec_label_pc_c1e4:                                ; preds = %dec_label_pc_c190
  %v2_c1ec = add i32 %v2_c140, %v1_c1b4
  %v3_c1f0 = mul i32 %v2_c1ec, 65536
  %v1_c1f4 = add i32 %v3_c1f0, 1769472
  %v1_c1f8 = add i32 %v3_c1f0, 3080192
  %v1_c214 = urem i32 %v6_bfc0, 256
  %tmp130 = udiv i32 %v6_bf8c, 256
  %v3_c218 = urem i32 %tmp130, 256
  %v1_c21c = urem i32 %v6_bf8c, 256
  %v1_c210 = mul i32 %v7_bf30, 256
  %v3_c224 = and i32 %v1_c210, 65280
  store i32 %v3_c224, i32* %r1.global-to-local, align 4
  %v1_c22c = urem i32 %v6_bfa4, 256
  %tmp131 = udiv i32 %v7_bf30, 256
  %v3_c234 = udiv i32 %v1_c1f4, 256
  %v1_c23c = and i32 %v3_c234, 65280
  %tmp132 = udiv i32 %v6_bfa4, 256
  %v4_c24c = udiv i32 %v1_c1f4, 16777216
  %v5_c24c = or i32 %v1_c23c, %v4_c24c
  store i32 %v5_c24c, i32* @r6, align 4
  %v3_c254 = sdiv i32 %v1_c1f8, 16777216
  %sext39 = mul i32 %tmp131, 16777216
  %v7_c254 = sdiv i32 %sext39, 16777216
  %v3_c258 = mul nuw nsw i32 %v1_c214, 256
  %v4_c260 = mul nuw nsw i32 %v1_c21c, 256
  %v5_c260 = or i32 %v4_c260, %v3_c218
  store i32 %v5_c260, i32* %r0.global-to-local, align 4
  %v3_c264 = ashr i32 %v1_c1f8, 31
  %tmp133 = udiv i32 %v6_bfc0, 256
  %v4_c268 = urem i32 %tmp133, 256
  %v5_c268 = or i32 %v4_c268, %v3_c258
  store i32 %v5_c268, i32* @r5, align 4
  %v3_c26c = ashr i32 %sext39, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_c274 = add i32 %v2_c140, 1
  store i32 %v2_c274, i32* %fp.global-to-local, align 4
  store i32 %v1_c22c, i32* %r3.global-to-local, align 4
  store i32 %v1_c21c, i32* %r2.global-to-local, align 4
  %v3_c28869 = udiv i32 %v1_c23c, 256
  store i32 %v3_c28869, i32* %ip.global-to-local, align 4
  store i32 %v1_c214, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  %v5_c294 = trunc i32 %tmp130 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext18 = mul i32 %v1_c1f4, 256
  %v4_c344 = sdiv i32 %sext18, 16777216
  %sext20 = mul i32 %v6_bfa4, 16777216
  %v4_c360 = sdiv i32 %sext20, 16777216
  %sext21 = mul nuw i32 %v4_c24c, 16777216
  %v4_c364 = sdiv i32 %sext21, 16777216
  %sext23 = mul i32 %v6_bfc0, 16777216
  %v4_c384 = sdiv i32 %sext23, 16777216
  %v1_c308 = trunc i32 %v3_c264 to i8
  %extract.t = trunc i32 %v3_c26c to i8
  %v1_c368 = trunc i32 %tmp132 to i8
  %v1_c390 = trunc i32 %v6_bf8c to i8
  br label %dec_label_pc_c2b4

dec_label_pc_c2b4:                                ; preds = %dec_label_pc_c414, %dec_label_pc_c1e4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c2bc = call i32 @function_1157c(i32 600, i32 1)
  store i32 %v2_c2bc, i32* %r0.global-to-local, align 4
  store i32 %v2_bef4, i32* %r2.global-to-local, align 4
  %v3_c2c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2c4, i32* %r3.global-to-local, align 4
  %v2_c2c8 = load i32, i32* @r4, align 4
  %v5_c2c8 = mul i32 %v2_c2c8, 4
  %v6_c2c8 = add i32 %v5_c2c8, %v2_bef4
  %v7_c2c8 = inttoptr i32 %v6_c2c8 to i32*
  store i32 %v2_c2bc, i32* %v7_c2c8, align 4
  %v0_c2cc = load i32, i32* %r2.global-to-local, align 4
  %v1_c2cc = load i32, i32* %r3.global-to-local, align 4
  %v4_c2cc = mul i32 %v1_c2cc, 4
  %v5_c2cc = add i32 %v4_c2cc, %v0_c2cc
  %v6_c2cc = inttoptr i32 %v5_c2cc to i32*
  %v7_c2cc = load i32, i32* %v6_c2cc, align 4
  store i32 %v7_c2cc, i32* %r1.global-to-local, align 4
  %v1_c2d0 = inttoptr i32 %v7_c2cc to i8*
  %v2_c2d0 = load i8, i8* %v1_c2d0, align 1
  %tmp = urem i8 %v2_c2d0, 16
  %v1_c2d4 = zext i8 %tmp to i32
  %v1_c2d8 = or i32 %v1_c2d4, 64
  store i32 %v1_c2d8, i32* %r2.global-to-local, align 4
  %v1_c2dc = trunc i32 %v1_c2d8 to i8
  store i8 %v1_c2dc, i8* %v1_c2d0, align 1
  %v0_c2e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c2e0 = inttoptr i32 %v0_c2e0 to i8*
  %v2_c2e0 = load i8, i8* %v1_c2e0, align 1
  %v1_c2e4 = and i8 %v2_c2e0, -16
  %v1_c2e8 = or i8 %v1_c2e4, 5
  store i32 %v1_bf74, i32* %ip.global-to-local, align 4
  store i8 %v1_c2e8, i8* %v1_c2e0, align 1
  %v2_c2f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2f8 = add i32 %v2_c2f8, 1
  %v4_c2f8 = inttoptr i32 %v3_c2f8 to i8*
  store i8 %v5_bf2c, i8* %v4_c2f8, align 1
  store i32 %v3_c264, i32* %r3.global-to-local, align 4
  store i32 %v3_c254, i32* %r2.global-to-local, align 4
  %v0_c304 = load i32, i32* %ip.global-to-local, align 4
  %v2_c304 = icmp eq i32 %v0_c304, 0
  store i1 %v2_c304, i1* %cpsr_z.global-to-local, align 1
  %v2_c308 = load i32, i32* %r1.global-to-local, align 4
  %v3_c308 = add i32 %v2_c308, 3
  %v4_c308 = inttoptr i32 %v3_c308 to i8*
  store i8 %v1_c308, i8* %v4_c308, align 1
  %v0_c30c = load i32, i32* %r2.global-to-local, align 4
  %v1_c30c = trunc i32 %v0_c30c to i8
  %v2_c30c = load i32, i32* %r1.global-to-local, align 4
  %v3_c30c = add i32 %v2_c30c, 2
  %v4_c30c = inttoptr i32 %v3_c30c to i8*
  store i8 %v1_c30c, i8* %v4_c30c, align 1
  store i32 %v3_c26c, i32* %lr.global-to-local, align 4
  store i32 %v5_bf68, i32* %r2.global-to-local, align 4
  %v0_c318 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c318, label %.thread25, label %bb134

bb134:                                            ; preds = %dec_label_pc_c2b4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c31c = load i32, i32* %r1.global-to-local, align 4
  %v4_c31c = add i32 %v3_c31c, 6
  %v5_c31c = inttoptr i32 %v4_c31c to i8*
  store i8 64, i8* %v5_c31c, align 1
  %v0_c324.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t70 = trunc i32 %v0_c324.pre to i8
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_c2b4, %bb134
  %v0_c324.off0 = phi i8 [ %extract.t, %dec_label_pc_c2b4 ], [ %extract.t70, %bb134 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c324 = load i32, i32* %r1.global-to-local, align 4
  %v3_c324 = add i32 %v2_c324, 5
  %v4_c324 = inttoptr i32 %v3_c324 to i8*
  store i8 %v0_c324.off0, i8* %v4_c324, align 1
  store i32 %v7_c254, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b860.47 to i32), i32* %lr.global-to-local, align 4
  %v0_c330 = load i32, i32* %r2.global-to-local, align 4
  %v1_c330 = trunc i32 %v0_c330 to i8
  %v2_c330 = load i32, i32* %r1.global-to-local, align 4
  %v3_c330 = add i32 %v2_c330, 8
  %v4_c330 = inttoptr i32 %v3_c330 to i8*
  store i8 %v1_c330, i8* %v4_c330, align 1
  %v0_c334 = load i32, i32* %r3.global-to-local, align 4
  %v1_c334 = trunc i32 %v0_c334 to i8
  %v2_c334 = load i32, i32* %r1.global-to-local, align 4
  %v3_c334 = add i32 %v2_c334, 9
  %v4_c334 = inttoptr i32 %v3_c334 to i8*
  store i8 %v1_c334, i8* %v4_c334, align 1
  %v0_c338 = load i32, i32* %r1.global-to-local, align 4
  %v1_c338 = add i32 %v0_c338, 41
  %v2_c33c = load i32, i32* @global_var_1b860.47, align 4
  store i32 %v2_c33c, i32* %r3.global-to-local, align 4
  %v0_c340 = load i32, i32* @sb, align 4
  %v2_c340 = add i32 %v1_c338, %v0_c340
  store i32 %v2_c340, i32* %r4.global-to-local, align 4
  store i32 %v4_c344, i32* %r2.global-to-local, align 4
  %v1_c348 = add i32 %v0_c338, 20
  store i32 %v1_c348, i32* %r0.global-to-local, align 4
  %v0_c34c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c34c, label %bb136, label %bb135

bb135:                                            ; preds = %.thread25
  %v1_c34c = load i32, i32* %sl.global-to-local, align 4
  %v2_c34c = trunc i32 %v1_c34c to i8
  %v4_c34c = add i32 %v0_c338, 7
  %v5_c34c = inttoptr i32 %v4_c34c to i8*
  store i8 %v2_c34c, i8* %v5_c34c, align 1
  %v2_c350.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb136

bb136:                                            ; preds = %.thread25, %bb135
  %v2_c350 = phi i32 [ %v0_c338, %.thread25 ], [ %v2_c350.pre, %bb135 ]
  %v0_c350 = load i32, i32* %ip.global-to-local, align 4
  %v1_c350 = trunc i32 %v0_c350 to i8
  %v3_c350 = add i32 %v2_c350, 4
  %v4_c350 = inttoptr i32 %v3_c350 to i8*
  store i8 %v1_c350, i8* %v4_c350, align 1
  %v0_c354 = load i32, i32* %r3.global-to-local, align 4
  %v1_c354 = load i32, i32* %r1.global-to-local, align 4
  %v2_c354 = add i32 %v1_c354, 12
  %v3_c354 = inttoptr i32 %v2_c354 to i32*
  store i32 %v0_c354, i32* %v3_c354, align 4
  %v0_c358 = load i32, i32* %r2.global-to-local, align 4
  %v1_c358 = trunc i32 %v0_c358 to i8
  %v2_c358 = load i32, i32* %r0.global-to-local, align 4
  %v3_c358 = add i32 %v2_c358, 5
  %v4_c358 = inttoptr i32 %v3_c358 to i8*
  store i8 %v1_c358, i8* %v4_c358, align 1
  store i32 %v4_c360, i32* %lr.global-to-local, align 4
  store i32 %v4_c364, i32* %r2.global-to-local, align 4
  %v2_c368 = load i32, i32* %r0.global-to-local, align 4
  %v3_c368 = add i32 %v2_c368, 2
  %v4_c368 = inttoptr i32 %v3_c368 to i8*
  store i8 %v1_c368, i8* %v4_c368, align 1
  %v0_c36c = load i32, i32* %lr.global-to-local, align 4
  %v1_c36c = trunc i32 %v0_c36c to i8
  %v2_c36c = load i32, i32* %r0.global-to-local, align 4
  %v3_c36c = add i32 %v2_c36c, 3
  %v4_c36c = inttoptr i32 %v3_c36c to i8*
  store i8 %v1_c36c, i8* %v4_c36c, align 1
  %v0_c370 = load i32, i32* %r2.global-to-local, align 4
  %v1_c370 = trunc i32 %v0_c370 to i8
  %v2_c370 = load i32, i32* %r0.global-to-local, align 4
  %v3_c370 = add i32 %v2_c370, 4
  %v4_c370 = inttoptr i32 %v3_c370 to i8*
  store i8 %v1_c370, i8* %v4_c370, align 1
  store i32 %stack_var_-2188.0, i32* %lr.global-to-local, align 4
  %v2_c37c = load i32, i32* %r1.global-to-local, align 4
  %v3_c37c = add i32 %v2_c37c, 20
  %v4_c37c = inttoptr i32 %v3_c37c to i8*
  store i8 %v5_c294, i8* %v4_c37c, align 1
  store i32 %v4_c384, i32* %r3.global-to-local, align 4
  %v0_c388 = load i32, i32* %r1.global-to-local, align 4
  %v1_c388 = add i32 %v0_c388, 28
  store i32 %v1_c388, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v2_c390 = load i32, i32* %r0.global-to-local, align 4
  %v3_c390 = add i32 %v2_c390, 1
  %v4_c390 = inttoptr i32 %v3_c390 to i8*
  store i8 %v1_c390, i8* %v4_c390, align 1
  %v0_c394 = load i32, i32* %lr.global-to-local, align 4
  %v1_c394 = load i32, i32* %r1.global-to-local, align 4
  %v2_c394 = add i32 %v1_c394, 16
  %v3_c394 = inttoptr i32 %v2_c394 to i32*
  store i32 %v0_c394, i32* %v3_c394, align 4
  %v0_c398 = load i32, i32* %r8.global-to-local, align 4
  %v1_c398 = trunc i32 %v0_c398 to i8
  %v2_c398 = load i32, i32* %ip.global-to-local, align 4
  %v3_c398 = add i32 %v2_c398, 5
  %v4_c398 = inttoptr i32 %v3_c398 to i8*
  store i8 %v1_c398, i8* %v4_c398, align 1
  %v0_c39c = load i32, i32* @r5, align 4
  %v1_c39c = trunc i32 %v0_c39c to i8
  %v2_c39c = load i32, i32* %r1.global-to-local, align 4
  %v3_c39c = add i32 %v2_c39c, 28
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 %v1_c39c, i8* %v4_c39c, align 1
  %v0_c3a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a0 = add i32 %v2_c3a0, 2
  %v4_c3a0 = inttoptr i32 %v3_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v4_c3a0, align 1
  %v0_c3a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3a4 = trunc i32 %v0_c3a4 to i8
  %v2_c3a4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a4 = add i32 %v2_c3a4, 1
  %v4_c3a4 = inttoptr i32 %v3_c3a4 to i8*
  store i8 %v1_c3a4, i8* %v4_c3a4, align 1
  %v0_c3a8 = load i32, i32* @r6, align 4
  %v1_c3a8 = trunc i32 %v0_c3a8 to i8
  %v2_c3a8 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a8 = add i32 %v2_c3a8, 3
  %v4_c3a8 = inttoptr i32 %v3_c3a8 to i8*
  store i8 %v1_c3a8, i8* %v4_c3a8, align 1
  %v0_c3ac = load i32, i32* @r6, align 4
  %v1_c3ac = trunc i32 %v0_c3ac to i8
  %v2_c3ac = load i32, i32* %ip.global-to-local, align 4
  %v3_c3ac = add i32 %v2_c3ac, 4
  %v4_c3ac = inttoptr i32 %v3_c3ac to i8*
  store i8 %v1_c3ac, i8* %v4_c3ac, align 1
  %v0_c3b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_c3b0 = add i32 %v0_c3b0, 1
  store i32 %v1_c3b0, i32* %r0.global-to-local, align 4
  %v0_c3b4 = load i32, i32* @sb, align 4
  %v1_c3b4 = trunc i32 %v0_c3b4 to i8
  %v2_c3b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3b4 = add i32 %v2_c3b4, 40
  %v4_c3b4 = inttoptr i32 %v3_c3b4 to i8*
  store i8 %v1_c3b4, i8* %v4_c3b4, align 1
  %v0_c3b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c3b8, i32* %r2.global-to-local, align 4
  %v0_c3bc = load i32, i32* @r7, align 4
  store i32 %v0_c3bc, i32* %r1.global-to-local, align 4
  %v3_c3c0 = call i32 @function_101b8(i32 %v1_c3b0, i32 %v0_c3bc, i32 %v0_c3b8)
  store i32 %v3_c3c0, i32* %r0.global-to-local, align 4
  %v1_c3c8 = load i32, i32* @r6, align 4
  %v10_c3c8 = inttoptr i32 %v1_c3c8 to i8*
  %v15_c3c8 = icmp eq i32 %v2_c140, %v1_c3c8
  store i1 %v15_c3c8, i1* %cpsr_z.global-to-local, align 1
  %v9_c3cc = icmp sgt i8* %v3_c140, %v10_c3c8
  store i32 %v1_c3c8, i32* %lr.global-to-local, align 4
  %v0_c3dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c3dc, i32* %ip.global-to-local, align 4
  %extract.t72 = trunc i32 %v1_c3c8 to i8
  br i1 %v9_c3cc, label %dec_label_pc_c3d8, label %dec_label_pc_c414

dec_label_pc_c3d8:                                ; preds = %bb136
  store i32 %v1_c3c8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c3e4

dec_label_pc_c3e4:                                ; preds = %.thread37, %dec_label_pc_c3d8
  %v1_c3ec = phi i32 [ %v1_c3ec58, %.thread37 ], [ %v1_c3c8, %dec_label_pc_c3d8 ]
  %v0_c3e4 = phi i32 [ %v1_c400, %.thread37 ], [ %v1_c3c8, %dec_label_pc_c3d8 ]
  %v1_c3e4 = load i32, i32* @r7, align 4
  %v2_c3e4 = add i32 %v1_c3e4, %v0_c3e4
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i8*
  %v4_c3e4 = load i8, i8* %v3_c3e4, align 1
  %v6_c3e4 = zext i8 %v4_c3e4 to i32
  store i32 %v6_c3e4, i32* %r3.global-to-local, align 4
  %v7_c3e8 = icmp eq i8 %v4_c3e4, 46
  store i1 %v7_c3e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3e8, label %bb137, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_c3e4
  %v1_c3f035 = add i32 %v1_c3ec, 1
  store i32 %v1_c3f035, i32* %r2.global-to-local, align 4
  br label %bb138

bb137:                                            ; preds = %dec_label_pc_c3e4
  %v2_c3ec = trunc i32 %v1_c3ec to i8
  %v3_c3ec = load i32, i32* %ip.global-to-local, align 4
  %v4_c3ec = inttoptr i32 %v3_c3ec to i8*
  store i8 %v2_c3ec, i8* %v4_c3ec, align 1
  %v0_c3f4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_c3f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_c3f0 = add i32 %v0_c3f0, 1
  store i32 %v1_c3f0, i32* %r2.global-to-local, align 4
  br i1 %v0_c3f4.pr, label %bb139, label %bb138

bb138:                                            ; preds = %.thread33, %bb137
  %v1_c3f036 = phi i32 [ %v1_c3f035, %.thread33 ], [ %v1_c3f0, %bb137 ]
  %v2_c3f4 = urem i32 %v1_c3f036, 256
  store i32 %v2_c3f4, i32* %lr.global-to-local, align 4
  br label %bb139

bb139:                                            ; preds = %bb137, %bb138
  %v1_c3ec59 = phi i32 [ %v0_c3f0, %bb137 ], [ %v2_c3f4, %bb138 ]
  %v0_c408.pr = phi i1 [ true, %bb137 ], [ false, %bb138 ]
  store i32 %v2_c140, i32* %r2.global-to-local, align 4
  %v0_c3fc = load i32, i32* %r4.global-to-local, align 4
  %v1_c3fc = load i32, i32* %r1.global-to-local, align 4
  %v2_c3fc = add i32 %v1_c3fc, %v0_c3fc
  store i32 %v2_c3fc, i32* %r0.global-to-local, align 4
  %v1_c400 = add i32 %v1_c3fc, 1
  store i32 %v1_c400, i32* %r1.global-to-local, align 4
  br i1 %v0_c408.pr, label %bb140, label %.thread37

bb140:                                            ; preds = %bb139
  %v2_c404 = add i32 %v2_c3fc, 1
  store i32 %v2_c404, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread37

.thread37:                                        ; preds = %bb139, %bb140
  %v1_c3ec58 = phi i32 [ %v1_c3ec59, %bb139 ], [ 0, %bb140 ]
  %v9_c40c = icmp eq i32 %v2_c140, %v1_c400
  store i1 %v9_c40c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c40c, label %dec_label_pc_c414.loopexit, label %dec_label_pc_c3e4

dec_label_pc_c414.loopexit:                       ; preds = %.thread37
  %v2_c414.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_c3ec58 to i8
  br label %dec_label_pc_c414

dec_label_pc_c414:                                ; preds = %dec_label_pc_c414.loopexit, %bb136
  %v2_c414 = phi i32 [ %v2_c414.pre, %dec_label_pc_c414.loopexit ], [ %v0_c3dc, %bb136 ]
  %v0_c414.off0 = phi i8 [ %extract.t71, %dec_label_pc_c414.loopexit ], [ %extract.t72, %bb136 ]
  %v3_c414 = inttoptr i32 %v2_c414 to i8*
  store i8 %v0_c414.off0, i8* %v3_c414, align 1
  %v3_c418 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_c140, i32* %ip.global-to-local, align 4
  store i32 %v1_becc, i32* @lr, align 4
  %v0_c424 = load i32, i32* %r4.global-to-local, align 4
  %v2_c424 = add i32 %v0_c424, %v2_c140
  store i32 %v2_c424, i32* %r3.global-to-local, align 4
  %v1_c428 = add i32 %v3_c418, 1
  store i32 %v1_c428, i32* @r4, align 4
  %v9_c42c = icmp eq i32 %v1_becc, %v1_c428
  store i1 %v9_c42c, i1* %cpsr_z.global-to-local, align 1
  %v1_c430 = add i32 %v2_c424, 2
  store i32 %v1_c430, i32* %r2.global-to-local, align 4
  %v0_c434 = load i32, i32* %sl.global-to-local, align 4
  %v1_c434 = trunc i32 %v0_c434 to i8
  %v4_c434 = inttoptr i32 %v1_c430 to i8*
  store i8 %v1_c434, i8* %v4_c434, align 1
  %v0_c438 = load i32, i32* %r8.global-to-local, align 4
  %v1_c438 = trunc i32 %v0_c438 to i8
  %v2_c438 = load i32, i32* %r2.global-to-local, align 4
  %v3_c438 = add i32 %v2_c438, 3
  %v4_c438 = inttoptr i32 %v3_c438 to i8*
  store i8 %v1_c438, i8* %v4_c438, align 1
  %v0_c43c = load i32, i32* %r8.global-to-local, align 4
  %v1_c43c = trunc i32 %v0_c43c to i8
  %v2_c43c = load i32, i32* %r2.global-to-local, align 4
  %v3_c43c = add i32 %v2_c43c, 1
  %v4_c43c = inttoptr i32 %v3_c43c to i8*
  store i8 %v1_c43c, i8* %v4_c43c, align 1
  %v0_c440 = load i32, i32* %sl.global-to-local, align 4
  %v1_c440 = trunc i32 %v0_c440 to i8
  %v2_c440 = load i32, i32* %r2.global-to-local, align 4
  %v3_c440 = add i32 %v2_c440, 2
  %v4_c440 = inttoptr i32 %v3_c440 to i8*
  store i8 %v1_c440, i8* %v4_c440, align 1
  %v0_c444 = load i32, i32* @r4, align 4
  store i32 %v0_c444, i32* %stack_var_-40, align 4
  %v8_c448 = icmp sgt i32 %v1_becc, %v1_c428
  br i1 %v8_c448, label %dec_label_pc_c2b4, label %dec_label_pc_c44c

dec_label_pc_c44c:                                ; preds = %dec_label_pc_c414, %dec_label_pc_c610
  store i32 %v1_becc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_c1b0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c1b0, label %dec_label_pc_c610, label %dec_label_pc_c460

dec_label_pc_c460:                                ; preds = %dec_label_pc_c44c
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c46c = load i32, i32* @sb, align 4
  %v2_c46c = add i32 %v0_c46c, %v2_c140
  store i32 %v2_c46c, i32* %r3.global-to-local, align 4
  %v1_c470 = add i32 %v2_c46c, 47
  store i32 %v1_c470, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r8, align 4
  %v1_c478 = add i32 %v2_c46c, 27
  store i32 %v1_c478, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c574

dec_label_pc_c488:                                ; preds = %dec_label_pc_c574
  store i32 %v3_c1c0, i32* %r3.global-to-local, align 4
  %v9_c48c = icmp eq i32 %v3_c1c0, %v1_c48c
  store i1 %v9_c48c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c48c, label %dec_label_pc_c5b0, label %dec_label_pc_c494

dec_label_pc_c494:                                ; preds = %dec_label_pc_c594.dec_label_pc_c494_crit_edge, %dec_label_pc_c488
  %v1_c498 = phi i32 [ %v1_c498.pre, %dec_label_pc_c594.dec_label_pc_c494_crit_edge ], [ %v1_c48c, %dec_label_pc_c488 ]
  store i32 %v3_c1c4, i32* %ip.global-to-local, align 4
  %v9_c498 = icmp eq i32 %v3_c1c4, %v1_c498
  store i1 %v9_c498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c498, label %dec_label_pc_c5cc, label %dec_label_pc_c4a0

dec_label_pc_c4a0:                                ; preds = %dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge, %dec_label_pc_c494
  %v1_c4a4 = phi i32 [ %v1_c4a4.pre, %dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge ], [ %v1_c498, %dec_label_pc_c494 ]
  store i32 %v3_c1c8, i32* @lr, align 4
  %v9_c4a4 = icmp eq i32 %v3_c1c8, %v1_c4a4
  store i1 %v9_c4a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4a4, label %dec_label_pc_c5e8, label %dec_label_pc_c4ac

dec_label_pc_c4ac:                                ; preds = %dec_label_pc_c5cc, %dec_label_pc_c4a0, %dec_label_pc_c5e8
  %v0_c4ac = load i32, i32* @r6, align 4
  store i32 %v0_c4ac, i32* %r0.global-to-local, align 4
  %v0_c4b0 = load i32, i32* @sb, align 4
  store i32 %v0_c4b0, i32* %r1.global-to-local, align 4
  %v2_c4b4 = call i32 @function_db6c(i32 %v0_c4ac, i32 %v0_c4b0)
  %v0_c4b8 = load i32, i32* @r7, align 4
  %v1_c4b8 = trunc i32 %v0_c4b8 to i8
  %v2_c4b8 = load i32, i32* @r6, align 4
  %v3_c4b8 = load i32, i32* @sb, align 4
  %v4_c4b8 = add i32 %v3_c4b8, %v2_c4b8
  %v5_c4b8 = inttoptr i32 %v4_c4b8 to i8*
  store i8 %v1_c4b8, i8* %v5_c4b8, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c4c0 = load i32, i32* @r7, align 4
  %v1_c4c0 = trunc i32 %v0_c4c0 to i8
  %v2_c4c0 = load i32, i32* @r4, align 4
  %v3_c4c0 = add i32 %v2_c4c0, 10
  %v4_c4c0 = inttoptr i32 %v3_c4c0 to i8*
  store i8 %v1_c4c0, i8* %v4_c4c0, align 1
  %v0_c4c4 = load i32, i32* @r7, align 4
  %v1_c4c4 = trunc i32 %v0_c4c4 to i8
  %v2_c4c4 = load i32, i32* @r4, align 4
  %v3_c4c4 = add i32 %v2_c4c4, 11
  %v4_c4c4 = inttoptr i32 %v3_c4c4 to i8*
  store i8 %v1_c4c4, i8* %v4_c4c4, align 1
  %v0_c4c8 = load i32, i32* @r4, align 4
  store i32 %v0_c4c8, i32* @r0, align 4
  %v2_c4cc = call i32 @function_c690(i32 %v0_c4c8, i32 20)
  %v3_c4cc = trunc i32 %v2_c4cc to i8
  store i32 %v2_c4cc, i32* %r0.global-to-local, align 4
  %v4_c4d0 = sdiv i32 %v2_c4cc, 256
  store i32 %v4_c4d0, i32* %r3.global-to-local, align 4
  %v1_c4d4 = trunc i32 %v4_c4d0 to i8
  %v2_c4d4 = load i32, i32* @r4, align 4
  %v3_c4d4 = add i32 %v2_c4d4, 11
  %v4_c4d4 = inttoptr i32 %v3_c4d4 to i8*
  store i8 %v1_c4d4, i8* %v4_c4d4, align 1
  %v3_c4d8 = load i32, i32* @r4, align 4
  %v4_c4d8 = add i32 %v3_c4d8, 10
  %v5_c4d8 = inttoptr i32 %v4_c4d8 to i8*
  store i8 %v3_c4cc, i8* %v5_c4d8, align 1
  %v0_c4dc = load i32, i32* @r7, align 4
  %v1_c4dc = trunc i32 %v0_c4dc to i8
  %v2_c4dc = load i32, i32* @r5, align 4
  %v3_c4dc = add i32 %v2_c4dc, 6
  %v4_c4dc = inttoptr i32 %v3_c4dc to i8*
  store i8 %v1_c4dc, i8* %v4_c4dc, align 1
  %v0_c4e0 = load i32, i32* @r7, align 4
  %v1_c4e0 = trunc i32 %v0_c4e0 to i8
  %v2_c4e0 = load i32, i32* @r5, align 4
  %v3_c4e0 = add i32 %v2_c4e0, 7
  %v4_c4e0 = inttoptr i32 %v3_c4e0 to i8*
  store i8 %v1_c4e0, i8* %v4_c4e0, align 1
  %v0_c4e4 = load i32, i32* @r4, align 4
  %v1_c4e4 = add i32 %v0_c4e4, 24
  %v2_c4e4 = inttoptr i32 %v1_c4e4 to i8*
  %v3_c4e4 = load i8, i8* %v2_c4e4, align 1
  %v4_c4e4 = zext i8 %v3_c4e4 to i32
  store i32 %v4_c4e4, i32* %r3.global-to-local, align 4
  %v1_c4e8 = add i32 %v0_c4e4, 25
  %v2_c4e8 = inttoptr i32 %v1_c4e8 to i8*
  %v3_c4e8 = load i8, i8* %v2_c4e8, align 1
  %v4_c4e8 = zext i8 %v3_c4e8 to i32
  %v0_c4ec = load i32, i32* @r5, align 4
  store i32 %v0_c4ec, i32* @r1, align 4
  %v4_c4f0 = mul nuw nsw i32 %v4_c4e8, 256
  %v5_c4f0 = or i32 %v4_c4f0, %v4_c4e4
  store i32 %v5_c4f0, i32* %r2.global-to-local, align 4
  store i32 %v0_c4e4, i32* %r0.global-to-local, align 4
  %v0_c4f8 = load i32, i32* @fp, align 4
  store i32 %v0_c4f8, i32* %r3.global-to-local, align 4
  %v4_c4fc = call i32 @function_c6ec(i32 %v0_c4e4, i32 %v0_c4ec, i32 %v5_c4f0, i32 %v0_c4f8)
  %v5_c4fc = trunc i32 %v4_c4fc to i8
  store i32 %v4_c4fc, i32* %r0.global-to-local, align 4
  %v3_c500 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_c50c = mul i32 %v3_c500, 24
  store i32 %v5_c50c, i32* %lr.global-to-local, align 4
  %v4_c51077 = udiv i32 %v4_c4fc, 256
  %v1_c514 = trunc i32 %v4_c51077 to i8
  %v2_c514 = load i32, i32* @r5, align 4
  %v3_c514 = add i32 %v2_c514, 7
  %v4_c514 = inttoptr i32 %v3_c514 to i8*
  store i8 %v1_c514, i8* %v4_c514, align 1
  store i32 %stack_var_-2188.0, i32* %r3.global-to-local, align 4
  %v0_c51c = load i32, i32* %lr.global-to-local, align 4
  %v1_c51c = load i32, i32* %r2.global-to-local, align 4
  %v2_c51c = add i32 %v1_c51c, %v0_c51c
  store i32 %v2_c51c, i32* %lr.global-to-local, align 4
  %v3_c520 = load i32, i32* @r5, align 4
  %v4_c520 = add i32 %v3_c520, 6
  %v5_c520 = inttoptr i32 %v4_c520 to i8*
  store i8 %v5_c4fc, i8* %v5_c520, align 1
  %v0_c524 = load i32, i32* %r3.global-to-local, align 4
  %v1_c524 = load i32, i32* %lr.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 4
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v0_c524, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* @r4, align 4
  %v1_c528 = add i32 %v0_c528, 20
  %v2_c528 = inttoptr i32 %v1_c528 to i32*
  %v3_c528 = load i32, i32* %v2_c528, align 4
  %v3_c52c = udiv i32 %v3_c528, 65536
  store i32 %v3_c52c, i32* %r3.global-to-local, align 4
  %v3_c53016 = udiv i32 %v3_c528, 16777216
  %v1_c534 = trunc i32 %v3_c53016 to i8
  %v2_c534 = load i32, i32* %lr.global-to-local, align 4
  %v3_c534 = add i32 %v2_c534, 3
  %v4_c534 = inttoptr i32 %v3_c534 to i8*
  store i8 %v1_c534, i8* %v4_c534, align 1
  %v0_c538 = load i32, i32* %r3.global-to-local, align 4
  %v1_c538 = trunc i32 %v0_c538 to i8
  %v2_c538 = load i32, i32* %lr.global-to-local, align 4
  %v3_c538 = add i32 %v2_c538, 2
  %v4_c538 = inttoptr i32 %v3_c538 to i8*
  store i8 %v1_c538, i8* %v4_c538, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c544 = load i32, i32* @r4, align 4
  store i32 %v0_c544, i32* %r1.global-to-local, align 4
  store i32 %v3_c154, i32* %r0.global-to-local, align 4
  store i32 %v1_c470, i32* %r2.global-to-local, align 4
  %v0_c550 = load i32, i32* %lr.global-to-local, align 4
  %v6_c558 = inttoptr i32 %v0_c544 to i32*
  %v7_c558 = call i32 @function_1122c(i32 %v3_c154, i32* %v6_c558, i32 %v1_c470, i32 16384, i32 %v0_c550, i32 16)
  %v3_c55c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c55c, i32* %r3.global-to-local, align 4
  %v1_c564 = add i32 %v3_c55c, 1
  store i32 %v1_c564, i32* %r0.global-to-local, align 4
  %v9_c568 = icmp eq i32 %v1_becc, %v1_c564
  store i1 %v9_c568, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c564, i32* %stack_var_-40, align 4
  %v7_c570 = icmp sgt i32 %v1_becc, %v1_c564
  br i1 %v7_c570, label %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge, label %dec_label_pc_c610

dec_label_pc_c4ac.dec_label_pc_c574_crit_edge:    ; preds = %dec_label_pc_c4ac
  %v1_c580.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c574

dec_label_pc_c574:                                ; preds = %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge, %dec_label_pc_c460
  %v1_c48c = phi i32 [ %v1_c580.pre, %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge ], [ 65535, %dec_label_pc_c460 ]
  %v1_c57c = phi i32 [ %v1_c564, %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge ], [ 0, %dec_label_pc_c460 ]
  store i32 %v2_bef4, i32* %lr.global-to-local, align 4
  store i32 %v3_c1bc, i32* %r2.global-to-local, align 4
  %v4_c57c = mul i32 %v1_c57c, 4
  %v5_c57c = add i32 %v4_c57c, %v2_bef4
  %v6_c57c = inttoptr i32 %v5_c57c to i32*
  %v7_c57c = load i32, i32* %v6_c57c, align 4
  store i32 %v7_c57c, i32* @r4, align 4
  %v9_c580 = icmp eq i32 %v3_c1bc, %v1_c48c
  store i1 %v9_c580, i1* %cpsr_z.global-to-local, align 1
  %v1_c584 = add i32 %v7_c57c, 20
  store i32 %v1_c584, i32* @r5, align 4
  %v1_c588 = add i32 %v7_c57c, 41
  store i32 %v1_c588, i32* @r6, align 4
  %v1_c58c = add i32 %v7_c57c, 28
  store i32 %v1_c58c, i32* @sl, align 4
  br i1 %v9_c580, label %dec_label_pc_c594, label %dec_label_pc_c488

dec_label_pc_c594:                                ; preds = %dec_label_pc_c574
  %v0_c594 = call i32 @function_dab8()
  %v1_c594 = trunc i32 %v0_c594 to i8
  store i32 %v0_c594, i32* %r0.global-to-local, align 4
  %v4_c59878 = udiv i32 %v0_c594, 256
  %v1_c59c = trunc i32 %v4_c59878 to i8
  %v2_c59c = load i32, i32* @r4, align 4
  %v3_c59c = add i32 %v2_c59c, 5
  %v4_c59c = inttoptr i32 %v3_c59c to i8*
  store i8 %v1_c59c, i8* %v4_c59c, align 1
  store i32 %v3_c1c0, i32* %r3.global-to-local, align 4
  %v1_c5a4 = load i32, i32* @r8, align 4
  %v9_c5a4 = icmp eq i32 %v3_c1c0, %v1_c5a4
  store i1 %v9_c5a4, i1* %cpsr_z.global-to-local, align 1
  %v3_c5a8 = load i32, i32* @r4, align 4
  %v4_c5a8 = add i32 %v3_c5a8, 4
  %v5_c5a8 = inttoptr i32 %v4_c5a8 to i8*
  store i8 %v1_c594, i8* %v5_c5a8, align 1
  %v0_c5ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5ac, label %dec_label_pc_c5b0, label %dec_label_pc_c594.dec_label_pc_c494_crit_edge

dec_label_pc_c594.dec_label_pc_c494_crit_edge:    ; preds = %dec_label_pc_c594
  %v1_c498.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c494

dec_label_pc_c5b0:                                ; preds = %dec_label_pc_c594, %dec_label_pc_c488
  %v0_c5b0 = call i32 @function_dab8()
  %v1_c5b0 = trunc i32 %v0_c5b0 to i8
  store i32 %v0_c5b0, i32* %r0.global-to-local, align 4
  store i32 %v3_c1c4, i32* %ip.global-to-local, align 4
  %v4_c5b8 = sdiv i32 %v0_c5b0, 256
  store i32 %v4_c5b8, i32* %r3.global-to-local, align 4
  %v1_c5bc = load i32, i32* @r8, align 4
  %v9_c5bc = icmp eq i32 %v3_c1c4, %v1_c5bc
  store i1 %v9_c5bc, i1* %cpsr_z.global-to-local, align 1
  %v3_c5c0 = load i32, i32* @r4, align 4
  %v4_c5c0 = add i32 %v3_c5c0, 20
  %v5_c5c0 = inttoptr i32 %v4_c5c0 to i8*
  store i8 %v1_c5b0, i8* %v5_c5c0, align 1
  %v0_c5c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5c4 = trunc i32 %v0_c5c4 to i8
  %v2_c5c4 = load i32, i32* @r5, align 4
  %v3_c5c4 = add i32 %v2_c5c4, 1
  %v4_c5c4 = inttoptr i32 %v3_c5c4 to i8*
  store i8 %v1_c5c4, i8* %v4_c5c4, align 1
  %v0_c5c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5c8, label %dec_label_pc_c5cc, label %dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge

dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge:    ; preds = %dec_label_pc_c5b0
  %v1_c4a4.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c4a0

dec_label_pc_c5cc:                                ; preds = %dec_label_pc_c5b0, %dec_label_pc_c494
  %v0_c5cc = call i32 @function_dab8()
  %v1_c5cc = trunc i32 %v0_c5cc to i8
  store i32 %v0_c5cc, i32* %r0.global-to-local, align 4
  store i32 %v3_c1c8, i32* @lr, align 4
  %v4_c5d4 = sdiv i32 %v0_c5cc, 256
  store i32 %v4_c5d4, i32* %r3.global-to-local, align 4
  %v1_c5d8 = load i32, i32* @r8, align 4
  %v9_c5d8 = icmp eq i32 %v3_c1c8, %v1_c5d8
  store i1 %v9_c5d8, i1* %cpsr_z.global-to-local, align 1
  %v1_c5dc = trunc i32 %v4_c5d4 to i8
  %v2_c5dc = load i32, i32* @r5, align 4
  %v3_c5dc = add i32 %v2_c5dc, 3
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v3_c5e0 = load i32, i32* @r5, align 4
  %v4_c5e0 = add i32 %v3_c5e0, 2
  %v5_c5e0 = inttoptr i32 %v4_c5e0 to i8*
  store i8 %v1_c5cc, i8* %v5_c5e0, align 1
  %v0_c5e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5e4, label %dec_label_pc_c5e8, label %dec_label_pc_c4ac

dec_label_pc_c5e8:                                ; preds = %dec_label_pc_c5cc, %dec_label_pc_c4a0
  %v0_c5e8 = call i32 @function_dab8()
  %v1_c5e8 = trunc i32 %v0_c5e8 to i8
  store i32 %v0_c5e8, i32* %r0.global-to-local, align 4
  %v4_c5ec = sdiv i32 %v0_c5e8, 256
  store i32 %v4_c5ec, i32* %r3.global-to-local, align 4
  %v3_c5f0 = load i32, i32* @r4, align 4
  %v4_c5f0 = add i32 %v3_c5f0, 28
  %v5_c5f0 = inttoptr i32 %v4_c5f0 to i8*
  store i8 %v1_c5e8, i8* %v5_c5f0, align 1
  %v0_c5f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f4 = trunc i32 %v0_c5f4 to i8
  %v2_c5f4 = load i32, i32* @sl, align 4
  %v3_c5f4 = add i32 %v2_c5f4, 1
  %v4_c5f4 = inttoptr i32 %v3_c5f4 to i8*
  store i8 %v1_c5f4, i8* %v4_c5f4, align 1
  br label %dec_label_pc_c4ac

dec_label_pc_c5fc:                                ; preds = %dec_label_pc_c164
  store i32 %v3_c154, i32* %r0.global-to-local, align 4
  %v1_c600 = call i32 @function_109bc(i32 %v3_c154)
  store i32 %v1_c600, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c604

dec_label_pc_c604:                                ; preds = %dec_label_pc_c610, %dec_label_pc_c13c, %dec_label_pc_c124, %dec_label_pc_c5fc
  %v29_c60c = phi i32 [ %v3_c154, %dec_label_pc_c13c ], [ %v2_c130, %dec_label_pc_c124 ], [ %v1_c600, %dec_label_pc_c5fc ], [ %v2_c614, %dec_label_pc_c610 ]
  store i32 %v3_bec0, i32* %r4.global-to-local, align 4
  store i32 %v15_bec0, i32* %r8.global-to-local, align 4
  store i32 %v21_bec0, i32* %sl.global-to-local, align 4
  store i32 %v24_bec0, i32* %fp.global-to-local, align 4
  ret i32 %v29_c60c

dec_label_pc_c610.critedge:                       ; preds = %dec_label_pc_c190
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c610

dec_label_pc_c610:                                ; preds = %dec_label_pc_c4ac, %dec_label_pc_c610.critedge, %dec_label_pc_c44c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c614 = call i32 @function_10c8c(i32* null)
  store i32 %v2_c614, i32* %r0.global-to-local, align 4
  store i32 %v2_c130, i32* %ip.global-to-local, align 4
  %v9_c61c = icmp eq i32 %v2_c130, %v2_c614
  store i1 %v9_c61c, i1* %cpsr_z.global-to-local, align 1
  %v6_c620 = icmp slt i32 %v2_c130, %v2_c614
  br i1 %v6_c620, label %dec_label_pc_c604, label %dec_label_pc_c44c

dec_label_pc_c628:                                ; preds = %dec_label_pc_c0e0, %bb129
  %v0_c0e8.lcssa = phi i32 [ %v1_c0b4, %dec_label_pc_c0e0 ], [ %v0_c0e8, %bb129 ]
  %v2_c628 = sub i32 %v0_c0e8.lcssa, %v4_c06c
  store i32 %v2_c628, i32* %r2.global-to-local, align 4
  store i32 %v2_c0a4, i32* %r1.global-to-local, align 4
  store i32 %v2_c094, i32* %r0.global-to-local, align 4
  %v3_c634 = call i32 @function_101b8(i32 %v2_c094, i32 %v2_c0a4, i32 %v2_c628)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c094, i32* @r0, align 4
  %v2_c640 = load i32, i32* @r4, align 4
  %v3_c640 = inttoptr i32 %v2_c640 to i8*
  store i8 0, i8* %v3_c640, align 1
  %v1_c644 = call i32 @function_11070(i32 %v2_c094)
  store i32 %v1_c644, i32* %r0.global-to-local, align 4
  %sext40 = mul i32 %v1_c644, 16777216
  %phitmp = sdiv i32 %sext40, 16777216
  br label %dec_label_pc_c124

dec_label_pc_c650:                                ; preds = %dec_label_pc_c0f8
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c124

dec_label_pc_c660:                                ; preds = %dec_label_pc_c0f8
  br label %dec_label_pc_c124

dec_label_pc_c674:                                ; preds = %dec_label_pc_c0f8
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c124

; uselistorder directives
  uselistorder i32 %v2_c614, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c5e8, { 0, 2, 1 }
  uselistorder i32 %v4_c5d4, { 1, 0 }
  uselistorder i32 %v0_c5cc, { 0, 2, 1 }
  uselistorder i32 %v0_c5b0, { 0, 2, 1 }
  uselistorder i32 %v0_c594, { 0, 2, 1 }
  uselistorder i32 %v7_c57c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c48c, { 2, 1, 0 }
  uselistorder i32 %v1_c564, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_c4fc, { 0, 2, 1 }
  uselistorder i32 %v0_c4e4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c4d0, { 1, 0 }
  uselistorder i32 %v2_c4cc, { 0, 2, 1 }
  uselistorder i32 %v1_c470, { 1, 0, 2 }
  uselistorder i32 %v1_c400, { 0, 2, 1 }
  uselistorder i32 %v1_c3fc, { 1, 0 }
  uselistorder i32 %v2_c3f4, { 1, 0 }
  uselistorder i32 %v1_c3c8, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_c26c, { 1, 0 }
  uselistorder i32 %v3_c264, { 1, 0 }
  uselistorder i32 %v1_c21c, { 1, 0 }
  uselistorder i32 %v1_c214, { 1, 0 }
  uselistorder i32 %v1_c1f8, { 1, 0 }
  uselistorder i32 %v3_c1f0, { 1, 0 }
  uselistorder i32 %v1_c1b4, { 1, 0 }
  uselistorder i1 %v7_c188, { 1, 0 }
  uselistorder i1 %v7_c158, { 1, 0 }
  uselistorder i32 %v3_c154, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_c140, { 0, 1, 6, 3, 5, 7, 4, 2, 8 }
  uselistorder i32 %v2_c130, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_c12c, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_c0fc, { 1, 0 }
  uselistorder i32 %v0_c0f8, { 1, 0 }
  uselistorder i32 %v1_c0f0, { 1, 0 }
  uselistorder i32 %v1_c0e8, { 1, 2, 0 }
  uselistorder i1 %v7_c0d4, { 1, 0 }
  uselistorder i32 %v1_c0d0, { 1, 0, 2 }
  uselistorder i1 %v8_c0c8, { 1, 0 }
  uselistorder i1 %v7_c0c4, { 1, 0 }
  uselistorder i32 %v1_c0b8, { 1, 0 }
  uselistorder i8 %v2_c0ac, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c0b0, { 1, 0 }
  uselistorder i32 %v0_c0d0, { 1, 2, 3, 0 }
  uselistorder i32 %v2_c0a4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c098, { 1, 0, 2 }
  uselistorder i32 %v2_c094, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_c084, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_c07c, { 1, 0 }
  uselistorder i32 %v4_c06c, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_c020, { 1, 0, 2, 3 }
  uselistorder i32 %v6_bfc0, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_bfa4, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_bf8c, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32 %v1_bf74, { 1, 2, 0 }
  uselistorder i32 %v7_bf30, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v6_bf0c, { 1, 2, 0 }
  uselistorder i32 %v2_bef4, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_becc, { 3, 4, 2, 6, 7, 5, 8, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 12, 10, 11 }
  uselistorder i32* %sl.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 2, 29, 1, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 38, 1, 43, 39, 40, 41, 42, 44, 3, 4, 5, 6, 7, 8, 45, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 42, 43, 44, 45, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 36, 35, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 60, 44, 46, 45, 48, 47, 49, 50, 51, 53, 52, 54, 56, 55, 57, 58, 59, 1, 9, 2, 3, 4, 5, 6, 7, 8, 13, 10, 11, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 24, 23, 25, 26, 28, 27, 29, 61, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %lr.global-to-local, { 21, 14, 15, 16, 17, 18, 19, 20, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 23, 24, 25, 26, 27, 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 18, 19, 20, 21 }
  uselistorder i32* %fp.global-to-local, { 5, 0, 1, 2, 3, 4 }
  uselistorder i1* %cpsr_z.global-to-local, { 24, 0, 25, 26, 27, 28, 29, 30, 35, 31, 32, 33, 34, 36, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 41, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_829c, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder label %dec_label_pc_c610, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c604, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_c4ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c44c, { 1, 0 }
  uselistorder label %.thread37, { 1, 0 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %bb136, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
  uselistorder label %dec_label_pc_c0e8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c0e0, { 1, 0 }
  uselistorder label %dec_label_pc_c0d4, { 1, 0 }
}

define i32 @function_c688(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c688:
  %v0_c688 = load i1, i1* @cpsr_c, align 1
  call void @__pseudo_cond_branch(i1 %v0_c688, i32 11145144)
  %v0_c68c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c68c, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_c688
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_c688, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_c690(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c690:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c6c0, label %dec_label_pc_c69c

dec_label_pc_c69c:                                ; preds = %dec_label_pc_c690
  %v0_c6a0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c6a0

dec_label_pc_c6a0:                                ; preds = %dec_label_pc_c6a0, %dec_label_pc_c69c
  %v0_c6b4 = phi i32 [ %v2_c6b4, %dec_label_pc_c6a0 ], [ 0, %dec_label_pc_c69c ]
  %v0_c6a8 = phi i32 [ %v1_c6a8, %dec_label_pc_c6a0 ], [ %arg1, %dec_label_pc_c69c ]
  %v0_c6b8 = phi i32 [ %v1_c6b8, %dec_label_pc_c6a0 ], [ %v0_c6a0.pre, %dec_label_pc_c69c ]
  %v1_c6a0 = inttoptr i32 %v0_c6b8 to i8*
  %v2_c6a0 = load i8, i8* %v1_c6a0, align 1
  %v3_c6a0 = zext i8 %v2_c6a0 to i32
  %v1_c6a4 = add i32 %v0_c6b8, 1
  %v2_c6a4 = inttoptr i32 %v1_c6a4 to i8*
  %v3_c6a4 = load i8, i8* %v2_c6a4, align 1
  %v4_c6a4 = zext i8 %v3_c6a4 to i32
  %v1_c6a8 = add i32 %v0_c6a8, -2
  %v4_c6ac = mul nuw nsw i32 %v4_c6a4, 256
  %v5_c6ac = or i32 %v4_c6ac, %v3_c6a0
  %v2_c6b4 = add i32 %v5_c6ac, %v0_c6b4
  %v1_c6b8 = add i32 %v0_c6b8, 2
  store i32 %v1_c6b8, i32* @r0, align 4
  %v1_c6a8.cmp = icmp ugt i32 %v1_c6a8, 1
  br i1 %v1_c6a8.cmp, label %dec_label_pc_c6a0, label %dec_label_pc_c6c0

dec_label_pc_c6c0:                                ; preds = %dec_label_pc_c6a0, %dec_label_pc_c690
  %v1_c6c8 = phi i32 [ 0, %dec_label_pc_c690 ], [ %v2_c6b4, %dec_label_pc_c6a0 ]
  %v0_c6c0 = phi i32 [ %arg1, %dec_label_pc_c690 ], [ %v1_c6a8, %dec_label_pc_c6a0 ]
  %v7_c6c0 = icmp eq i32 %v0_c6c0, 1
  br i1 %v7_c6c0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c6c0
  %v1_c6c4 = load i32, i32* @r0, align 4
  %v2_c6c4 = inttoptr i32 %v1_c6c4 to i8*
  %v3_c6c4 = load i8, i8* %v2_c6c4, align 1
  %v4_c6c4 = zext i8 %v3_c6c4 to i32
  %v3_c6c8 = add i32 %v1_c6c8, %v4_c6c4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c6c0, %bb
  %v0_c6cc = phi i32 [ %v1_c6c8, %dec_label_pc_c6c0 ], [ %v3_c6c8, %bb ]
  %v3_c6d0 = urem i32 %v0_c6cc, 65536
  %v4_c6d4 = udiv i32 %v0_c6cc, 65536
  %v5_c6d4 = add nuw nsw i32 %v4_c6d4, %v3_c6d0
  %v4_c6d8 = udiv i32 %v5_c6d4, 65536
  %v5_c6d8 = add nuw nsw i32 %v4_c6d8, %v5_c6d4
  %v1_c6dc = urem i32 %v5_c6d8, 65536
  %v3_c6e4 = xor i32 %v1_c6dc, 65535
  ret i32 %v3_c6e4

; uselistorder directives
  uselistorder i32 %v5_c6d4, { 1, 0 }
  uselistorder i32 %v1_c6b8, { 1, 0 }
  uselistorder i32 %v1_c6a8, { 1, 0, 2 }
  uselistorder i32 %v0_c6b8, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c6ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c6ec:
  %v3_c6fc = urem i32 %arg2, 65536
  %v1_c700 = add i32 %arg1, 12
  %v1_c704 = inttoptr i32 %v1_c700 to i32*
  %v2_c704 = load i32, i32* %v1_c704, align 4
  %v3_c704 = add i32 %arg1, 16
  %v4_c704 = inttoptr i32 %v3_c704 to i32*
  %v5_c704 = load i32, i32* %v4_c704, align 4
  %v7_c708 = icmp sgt i32 %arg3, 1
  store i32 0, i32* @lr, align 4
  br i1 %v7_c708, label %dec_label_pc_c714.preheader, label %dec_label_pc_c734

dec_label_pc_c714.preheader:                      ; preds = %dec_label_pc_c6ec
  %v0_c714.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c714

dec_label_pc_c714:                                ; preds = %dec_label_pc_c714.preheader, %dec_label_pc_c714
  %v0_c728 = phi i32 [ 0, %dec_label_pc_c714.preheader ], [ %v2_c728, %dec_label_pc_c714 ]
  %v0_c71c = phi i32 [ %arg3, %dec_label_pc_c714.preheader ], [ %v1_c71c, %dec_label_pc_c714 ]
  %v0_c72c = phi i32 [ %v0_c714.pre, %dec_label_pc_c714.preheader ], [ %v1_c72c, %dec_label_pc_c714 ]
  %v1_c714 = inttoptr i32 %v0_c72c to i8*
  %v2_c714 = load i8, i8* %v1_c714, align 1
  %v3_c714 = zext i8 %v2_c714 to i32
  %v1_c718 = add i32 %v0_c72c, 1
  %v2_c718 = inttoptr i32 %v1_c718 to i8*
  %v3_c718 = load i8, i8* %v2_c718, align 1
  %v4_c718 = zext i8 %v3_c718 to i32
  %v1_c71c = add nsw i32 %v0_c71c, -2
  %v4_c720 = mul nuw nsw i32 %v4_c718, 256
  %v5_c720 = or i32 %v4_c720, %v3_c714
  %v2_c728 = add i32 %v5_c720, %v0_c728
  store i32 %v2_c728, i32* @lr, align 4
  %v1_c72c = add i32 %v0_c72c, 2
  store i32 %v1_c72c, i32* @r1, align 4
  %v8_c730 = icmp sgt i32 %v1_c71c, 1
  br i1 %v8_c730, label %dec_label_pc_c714, label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c714, %dec_label_pc_c6ec
  %v1_c73c = phi i32 [ 0, %dec_label_pc_c6ec ], [ %v2_c728, %dec_label_pc_c714 ]
  %v0_c734 = phi i32 [ %arg3, %dec_label_pc_c6ec ], [ %v1_c71c, %dec_label_pc_c714 ]
  %v7_c734 = icmp eq i32 %v0_c734, 1
  br i1 %v7_c734, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c734
  %v1_c738 = load i32, i32* @r1, align 4
  %v2_c738 = inttoptr i32 %v1_c738 to i8*
  %v3_c738 = load i8, i8* %v2_c738, align 1
  %v4_c738 = zext i8 %v3_c738 to i32
  %v3_c73c = add i32 %v4_c738, %v1_c73c
  store i32 %v3_c73c, i32* @lr, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c734, %bb
  %v0_c760 = phi i32 [ %v1_c73c, %dec_label_pc_c734 ], [ %v3_c73c, %bb ]
  %v3_c744 = urem i32 %v2_c704, 65536
  %v1_c74c = add i32 %arg1, 9
  %v2_c74c = inttoptr i32 %v1_c74c to i8*
  %v3_c74c = load i8, i8* %v2_c74c, align 1
  %v4_c74c = zext i8 %v3_c74c to i32
  %v3_c750 = urem i32 %v5_c704, 65536
  %v4_c754 = udiv i32 %v2_c704, 65536
  %v3_c75c = mul nuw nsw i32 %v4_c74c, 256
  %v4_c760 = udiv i32 %v5_c704, 65536
  %v5_c760 = add i32 %v0_c760, %v4_c760
  %v2_c764 = add i32 %v5_c760, %v3_c75c
  %v5_c754 = add nuw nsw i32 %v3_c744, %v3_c6fc
  %v2_c758 = add nuw nsw i32 %v5_c754, %v4_c754
  %v2_c768 = add nuw nsw i32 %v2_c758, %v3_c750
  %v2_c76c = add i32 %v2_c764, %v2_c768
  %tmp = icmp ult i32 %v2_c76c, 65536
  br i1 %tmp, label %dec_label_pc_c78c, label %dec_label_pc_c778

dec_label_pc_c778:                                ; preds = %.thread, %dec_label_pc_c778
  %v2_c7801 = phi i32 [ %v2_c780, %dec_label_pc_c778 ], [ %v2_c76c, %.thread ]
  %v3_c7842.in = phi i32 [ %v2_c780, %dec_label_pc_c778 ], [ %v2_c76c, %.thread ]
  %v3_c7842 = udiv i32 %v3_c7842.in, 65536
  %v3_c77c = urem i32 %v2_c7801, 65536
  %v2_c780 = add nuw nsw i32 %v3_c77c, %v3_c7842
  %tmp14 = icmp ult i32 %v2_c780, 65536
  br i1 %tmp14, label %dec_label_pc_c78c.loopexit, label %dec_label_pc_c778

dec_label_pc_c78c.loopexit:                       ; preds = %dec_label_pc_c778
  br label %dec_label_pc_c78c

dec_label_pc_c78c:                                ; preds = %dec_label_pc_c78c.loopexit, %.thread
  %v0_c78c = phi i32 [ %v2_c780, %dec_label_pc_c78c.loopexit ], [ %v2_c76c, %.thread ]
  %v1_c78c = urem i32 %v0_c78c, 65536
  %v3_c794 = xor i32 %v1_c78c, 65535
  ret i32 %v3_c794

; uselistorder directives
  uselistorder i32 %v2_c780, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c76c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c73c, { 1, 0 }
  uselistorder i32 %v1_c72c, { 1, 0 }
  uselistorder i32 %v2_c728, { 0, 2, 1 }
  uselistorder i32 %v1_c71c, { 0, 2, 1 }
  uselistorder i32 %v0_c72c, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c778, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c714, { 1, 0 }
}

define i32 @function_c79c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c79c:
  %v2_c7a0 = load i32, i32* @global_var_1b7c4.58, align 4
  %v2_c7a8 = call i32 @function_10abc(i32 %v2_c7a0, i32 9)
  %v0_c7ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c7ac, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_c79c
  %v2_c7ac = load i32, i32* @r4, align 4
  %v5_c7ac1 = udiv i32 %v2_c7ac, 32768
  %v6_c7ac = and i32 %v5_c7ac1, 9
  store i32 %v6_c7ac, i32* @fp, align 4
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_c79c, %bb
  ret i32 %v2_c7a8

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_c7b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_c7b0:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-584 = alloca i32, align 4
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_c7b0 = load i32, i32* @r4, align 4
  store i32 %v3_c7b0, i32* %stack_var_-36, align 4
  %v6_c7b0 = load i32, i32* @r5, align 4
  %v9_c7b0 = load i32, i32* @r6, align 4
  %v12_c7b0 = load i32, i32* @r7, align 4
  %v15_c7b0 = load i32, i32* @r8, align 4
  %v18_c7b0 = load i32, i32* @sb, align 4
  %v21_c7b0 = load i32, i32* @sl, align 4
  %v24_c7b0 = load i32, i32* @fp, align 4
  %v2_c7c4 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_c7c4, i32* @sl, align 4
  %v3_c7cc = mul i32 %arg1, 65536
  store i32 %v3_c7cc, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c7d8 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_c7e0 = ptrtoint i32* %stack_var_-584 to i32
  %v2_c7e4 = bitcast i32* %stack_var_-4677 to i8*
  %v3_c7e4 = call i32 @function_10fd0(i8* %v2_c7e4, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_c7fc = bitcast i32* %stack_var_-8773 to i8*
  %v3_c7fc = call i32 @function_10fd0(i8* %v2_c7fc, i32 0)
  %v2_c800 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_c800, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_c820 = call i32 @function_10fd0(i8* nonnull %stack_var_-581, i32 0)
  %v2_c824 = ptrtoint i8* %stack_var_-68 to i32
  %v1_c82c = load i32, i32* @r5, align 4
  %v4_c82c = udiv i32 %v1_c82c, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v8_c84c = trunc i32 %v4_c82c to i8
  %v9_c84c = call i32 @function_1051c(i8 %v8_c84c, i32 16, i32 %v2_c824, i32 %v2_c7e0, i32 0, i32 0, i32 0, i32 0)
  %v2_c854 = call i32 @function_1013c(i8* nonnull %stack_var_-68)
  %v7_c858 = icmp eq i32 %v2_c854, 2
  br i1 %v7_c858, label %dec_label_pc_cd04, label %dec_label_pc_c860

dec_label_pc_c860:                                ; preds = %dec_label_pc_c7b0, %dec_label_pc_cd04
  %v1_c864 = call i32 @function_fc64(i32 3)
  %v1_c86c = call i32 @function_fc64(i32 4)
  %v1_c874 = call i32 @function_fc64(i32 6)
  %v1_c87c = call i32 @function_fc64(i32 8)
  %v0_c880 = load i32, i32* @r4, align 4
  %v2_c888 = inttoptr i32 %v0_c880 to i32*
  %v3_c888 = call i32 @function_fb80(i32 8, i32* %v2_c888)
  %v0_c88c = load i32, i32* @r4, align 4
  %v2_c890 = inttoptr i32 %v3_c888 to i8*
  %v3_c890 = call i32 @function_10ae8(i8* %v2_c890, i32 %v0_c88c)
  %v7_c894 = icmp eq i32 %v3_c890, -1
  store i32 %v3_c890, i32* @r8, align 4
  br i1 %v7_c894, label %dec_label_pc_ccc4, label %dec_label_pc_c8a0.preheader

dec_label_pc_c8a0.preheader:                      ; preds = %dec_label_pc_c860
  %v4_c8ac58 = call i32 @function_10394(i8* nonnull %stack_var_-581, i32 512, i32 %v3_c890)
  %v2_c8b060 = icmp eq i32 %v4_c8ac58, 0
  br i1 %v2_c8b060, label %dec_label_pc_ca40.loopexit, label %dec_label_pc_c8b8.lr.ph

dec_label_pc_c8b8.lr.ph:                          ; preds = %dec_label_pc_c8a0.preheader
  %v2_c900 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_c8b8

dec_label_pc_c8b8:                                ; preds = %dec_label_pc_c8b8.lr.ph, %dec_label_pc_c8a0.backedge
  %v3_c8bc = load i8, i8* %stack_var_-581, align 1
  %v4_c8bc = sext i8 %v3_c8bc to i32
  %v2_c8c0 = icmp eq i8 %v3_c8bc, 0
  br i1 %v2_c8c0, label %bb126, label %bb

bb:                                               ; preds = %dec_label_pc_c8b8
  %v8_c8c4 = icmp eq i8 %v3_c8bc, 58
  br i1 %v8_c8c4, label %.thread6, label %dec_label_pc_c8d8

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_c8f0

bb126:                                            ; preds = %dec_label_pc_c8b8
  br label %dec_label_pc_c8f0

dec_label_pc_c8d8:                                ; preds = %bb
  %v1_c8e0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c8dc

dec_label_pc_c8dc:                                ; preds = %bb127, %dec_label_pc_c8d8
  %v0_c8dc = phi i32 [ %v1_c8dc, %bb127 ], [ 0, %dec_label_pc_c8d8 ]
  %v1_c8dc = add i32 %v0_c8dc, 1
  %v2_c8e0 = add i32 %v1_c8dc, %v1_c8e0.pre
  %v3_c8e0 = inttoptr i32 %v2_c8e0 to i8*
  %v4_c8e0 = load i8, i8* %v3_c8e0, align 1
  %v6_c8e0 = zext i8 %v4_c8e0 to i32
  %v2_c8e4 = icmp eq i8 %v4_c8e0, 0
  br i1 %v2_c8e4, label %dec_label_pc_c8f0, label %bb127

bb127:                                            ; preds = %dec_label_pc_c8dc
  %v8_c8e8 = icmp eq i8 %v4_c8e0, 58
  br i1 %v8_c8e8, label %dec_label_pc_c8f0, label %dec_label_pc_c8dc

dec_label_pc_c8f0:                                ; preds = %dec_label_pc_c8dc, %bb127, %bb126, %.thread6
  %v1_c91c = phi i32 [ 0, %.thread6 ], [ 0, %bb126 ], [ %v1_c8dc, %bb127 ], [ %v1_c8dc, %dec_label_pc_c8dc ]
  %v0_c8f0 = phi i32 [ %v4_c8bc, %.thread6 ], [ %v4_c8bc, %bb126 ], [ %v6_c8e0, %bb127 ], [ %v6_c8e0, %dec_label_pc_c8dc ]
  %v2_c8f0 = icmp eq i32 %v0_c8f0, 0
  br i1 %v2_c8f0, label %dec_label_pc_c8a0.backedge, label %dec_label_pc_c8f8

dec_label_pc_c8a0.backedge:                       ; preds = %dec_label_pc_c8f0, %dec_label_pc_c9c8, %dec_label_pc_ca14, %dec_label_pc_c93c
  %v0_c8a8 = load i32, i32* @r8, align 4
  %v4_c8ac = call i32 @function_10394(i8* nonnull %stack_var_-581, i32 512, i32 %v0_c8a8)
  %v2_c8b0 = icmp eq i32 %v4_c8ac, 0
  br i1 %v2_c8b0, label %dec_label_pc_ca40.loopexit, label %dec_label_pc_c8b8

dec_label_pc_c8f8:                                ; preds = %dec_label_pc_c8f0
  %v1_c8fc = add i32 %v1_c91c, 2
  %v2_c904 = add i32 %v1_c8fc, %v2_c900
  %v1_c908 = add i32 %v2_c904, -545
  %v2_c908 = inttoptr i32 %v1_c908 to i8*
  %v3_c908 = load i8, i8* %v2_c908, align 1
  %v2_c90c = icmp eq i8 %v3_c908, 0
  br i1 %v2_c90c, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_c8f8
  %v8_c910 = icmp eq i8 %v3_c908, 32
  br i1 %v8_c910, label %.thread10, label %dec_label_pc_c91c

.thread10:                                        ; preds = %bb128
  store i32 %v1_c8fc, i32* @r5, align 4
  br label %dec_label_pc_c93c

bb129:                                            ; preds = %dec_label_pc_c8f8
  store i32 %v1_c8fc, i32* @r5, align 4
  br label %dec_label_pc_c93c

dec_label_pc_c91c:                                ; preds = %bb128
  %v0_c91c = load i32, i32* @r6, align 4
  %v2_c91c = add i32 %v0_c91c, %v1_c91c
  br label %dec_label_pc_c920

dec_label_pc_c920:                                ; preds = %bb130, %dec_label_pc_c91c
  %v0_c92c13 = phi i32 [ %v1_c92c, %bb130 ], [ %v2_c91c, %dec_label_pc_c91c ]
  %v1_c920 = add i32 %v0_c92c13, 3
  %v2_c920 = inttoptr i32 %v1_c920 to i8*
  %v3_c920 = load i8, i8* %v2_c920, align 1
  %v2_c924 = icmp eq i8 %v3_c920, 0
  br i1 %v2_c924, label %.thread12, label %bb130

.thread12:                                        ; preds = %dec_label_pc_c920
  %v1_c92c14 = add i32 %v0_c92c13, 1
  br label %dec_label_pc_c934

bb130:                                            ; preds = %dec_label_pc_c920
  %v8_c928 = icmp eq i8 %v3_c920, 32
  %v1_c92c = add i32 %v0_c92c13, 1
  br i1 %v8_c928, label %dec_label_pc_c934, label %dec_label_pc_c920

dec_label_pc_c934:                                ; preds = %bb130, %.thread12
  %v1_c92c15 = phi i32 [ %v1_c92c14, %.thread12 ], [ %v1_c92c, %bb130 ]
  %v2_c934 = sub i32 %v1_c92c15, %v0_c91c
  %v1_c938 = add i32 %v2_c934, 2
  store i32 %v1_c938, i32* @r5, align 4
  br label %dec_label_pc_c93c

dec_label_pc_c93c:                                ; preds = %bb129, %.thread10, %dec_label_pc_c934
  %v1_c948 = phi i32 [ %v1_c8fc, %.thread10 ], [ %v1_c8fc, %bb129 ], [ %v1_c938, %dec_label_pc_c934 ]
  %v0_c93c = load i32, i32* @r6, align 4
  %v2_c93c = add i32 %v0_c93c, %v1_c8fc
  store i32 %v2_c93c, i32* @r4, align 4
  %v2_c948 = add i32 %v1_c948, %v2_c900
  store i32 0, i32* @r7, align 4
  %v3_c954 = add i32 %v2_c948, -545
  %v4_c954 = inttoptr i32 %v3_c954 to i8*
  store i8 0, i8* %v4_c954, align 1
  %v1_c958 = inttoptr i32 %v2_c93c to i8*
  %v2_c958 = call i32 @function_1013c(i8* %v1_c958)
  store i32 %v2_c958, i32* @r1, align 4
  %v0_c964 = load i32, i32* @r4, align 4
  %v3_c968 = inttoptr i32 %v0_c964 to i8*
  %v4_c968 = call i32 @function_10490(i8* %v3_c968, i32 %v2_c958, i32 %v2_c824)
  %v7_c96c = icmp eq i32 %v4_c968, -1
  br i1 %v7_c96c, label %dec_label_pc_c8a0.backedge, label %dec_label_pc_c988.preheader

dec_label_pc_c988.preheader:                      ; preds = %dec_label_pc_c93c
  %v1_c970 = load i32, i32* @r7, align 4
  %v1_c974 = load i32, i32* @r6, align 4
  %v2_c974 = load i32, i32* @r5, align 4
  %v3_c974 = add i32 %v2_c974, %v1_c974
  store i32 %v1_c970, i32* @lr, align 4
  store i32 %v1_c970, i32* @r4, align 4
  %v1_c98850 = add i32 %v3_c974, 2
  %v2_c98851 = inttoptr i32 %v1_c98850 to i8*
  %v3_c98852 = load i8, i8* %v2_c98851, align 1
  %v2_c98c54 = icmp eq i8 %v3_c98852, 0
  %v1_c99056 = add i32 %v2_c974, 2
  br i1 %v2_c98c54, label %dec_label_pc_c9c8, label %dec_label_pc_c998

dec_label_pc_c998:                                ; preds = %dec_label_pc_c988.preheader, %dec_label_pc_c988.backedge
  %v0_c9c886 = phi i32 [ %v0_c9c885, %dec_label_pc_c988.backedge ], [ %v1_c970, %dec_label_pc_c988.preheader ]
  %v0_c9b0.pr = phi i32 [ %v0_c9b0.pr71, %dec_label_pc_c988.backedge ], [ %v1_c970, %dec_label_pc_c988.preheader ]
  %v0_ccd4 = phi i32 [ %v0_ccd474, %dec_label_pc_c988.backedge ], [ %v1_c970, %dec_label_pc_c988.preheader ]
  %v0_c99082 = phi i32 [ %v1_c990, %dec_label_pc_c988.backedge ], [ %v1_c99056, %dec_label_pc_c988.preheader ]
  %v0_c9c0 = phi i32 [ %v0_c988, %dec_label_pc_c988.backedge ], [ %v3_c974, %dec_label_pc_c988.preheader ]
  %v1_c99c.in = phi i8 [ %v3_c988, %dec_label_pc_c988.backedge ], [ %v3_c98852, %dec_label_pc_c988.preheader ]
  %v7_c998 = icmp eq i8 %v1_c99c.in, 9
  br i1 %v7_c998, label %.thread23, label %bb131

bb131:                                            ; preds = %dec_label_pc_c998
  %v8_c99c = icmp eq i8 %v1_c99c.in, 32
  br i1 %v8_c99c, label %.thread23.thread35, label %dec_label_pc_c9b0

.thread23.thread35:                               ; preds = %bb131
  br label %dec_label_pc_c9bc

.thread23:                                        ; preds = %dec_label_pc_c998
  br label %dec_label_pc_c9bc

dec_label_pc_c9b0:                                ; preds = %bb131
  %v7_c9b0 = icmp eq i32 %v0_c9b0.pr, 1
  br i1 %v7_c9b0, label %dec_label_pc_ccd4, label %dec_label_pc_c9b8

dec_label_pc_c9b8:                                ; preds = %dec_label_pc_ccd4, %dec_label_pc_c9b0
  %v0_c9bc79 = phi i32 [ %v1_ccd4, %dec_label_pc_ccd4 ], [ %v0_ccd4, %dec_label_pc_c9b0 ]
  br label %dec_label_pc_c9bc

dec_label_pc_c9bc:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_c9b8
  %v0_c9bc = phi i32 [ %v0_ccd4, %.thread23.thread35 ], [ %v0_ccd4, %.thread23 ], [ %v0_c9bc79, %dec_label_pc_c9b8 ]
  %v0_c9b0.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_c9b8 ]
  %v7_c9c4 = icmp sgt i32 %v0_c9bc, 6
  br i1 %v7_c9c4, label %dec_label_pc_c9c8, label %dec_label_pc_c988.backedge

dec_label_pc_c9c8:                                ; preds = %dec_label_pc_c988.backedge, %dec_label_pc_c9bc, %dec_label_pc_c988.preheader
  %v1_ca18 = phi i32 [ %v1_c99056, %dec_label_pc_c988.preheader ], [ %v1_c990, %dec_label_pc_c988.backedge ], [ %v0_c99082, %dec_label_pc_c9bc ]
  %v0_c9c8 = phi i32 [ %v1_c970, %dec_label_pc_c988.preheader ], [ %v0_c9c885, %dec_label_pc_c988.backedge ], [ %v0_c9c886, %dec_label_pc_c9bc ]
  %v2_c9c8 = icmp eq i32 %v0_c9c8, 0
  br i1 %v2_c9c8, label %dec_label_pc_c8a0.backedge, label %dec_label_pc_c9d4

dec_label_pc_c9d4:                                ; preds = %dec_label_pc_c9c8
  %v2_c9dc = add i32 %v1_ca18, %v2_c900
  %v1_c9e0 = add i32 %v2_c9dc, -545
  %v2_c9e0 = inttoptr i32 %v1_c9e0 to i8*
  %v3_c9e0 = load i8, i8* %v2_c9e0, align 1
  %v2_c9e4 = icmp eq i8 %v3_c9e0, 0
  br i1 %v2_c9e4, label %dec_label_pc_ca14, label %bb132

bb132:                                            ; preds = %dec_label_pc_c9d4
  %v8_c9e8 = icmp eq i8 %v3_c9e0, 32
  br i1 %v8_c9e8, label %dec_label_pc_ca14, label %dec_label_pc_c9f0

dec_label_pc_c9f0:                                ; preds = %bb132
  %v2_c9f0 = add i32 %v1_ca18, %v1_c974
  br label %dec_label_pc_c9f4

dec_label_pc_c9f4:                                ; preds = %bb133, %dec_label_pc_c9f0
  %v0_ca0028 = phi i32 [ %v1_ca00, %bb133 ], [ %v1_ca18, %dec_label_pc_c9f0 ]
  %v0_c9f4 = phi i32 [ %v1_c9f4, %bb133 ], [ %v2_c9f0, %dec_label_pc_c9f0 ]
  %v1_c9f4 = add i32 %v0_c9f4, 1
  %v2_c9f4 = inttoptr i32 %v1_c9f4 to i8*
  %v3_c9f4 = load i8, i8* %v2_c9f4, align 1
  %v2_c9f8 = icmp eq i8 %v3_c9f4, 0
  br i1 %v2_c9f8, label %.thread27, label %bb133

.thread27:                                        ; preds = %dec_label_pc_c9f4
  %v1_ca0029 = add i32 %v0_ca0028, 1
  br label %dec_label_pc_ca08

bb133:                                            ; preds = %dec_label_pc_c9f4
  %v8_c9fc = icmp eq i8 %v3_c9f4, 32
  %v1_ca00 = add i32 %v0_ca0028, 1
  br i1 %v8_c9fc, label %dec_label_pc_ca08, label %dec_label_pc_c9f4

dec_label_pc_ca08:                                ; preds = %bb133, %.thread27
  %v1_ca10 = phi i32 [ %v1_ca0029, %.thread27 ], [ %v1_ca00, %bb133 ]
  %v2_ca10 = add i32 %v1_ca10, %v2_c900
  br label %dec_label_pc_ca14

dec_label_pc_ca14:                                ; preds = %dec_label_pc_c9d4, %bb132, %dec_label_pc_ca08
  %v2_ca20 = phi i32 [ %v2_c9dc, %dec_label_pc_c9d4 ], [ %v2_c9dc, %bb132 ], [ %v2_ca10, %dec_label_pc_ca08 ]
  %v2_ca18 = add i32 %v1_ca18, %v1_c974
  store i32 %v2_ca18, i32* @r4, align 4
  %v3_ca20 = add i32 %v2_ca20, -545
  %v4_ca20 = inttoptr i32 %v3_ca20 to i8*
  store i8 0, i8* %v4_ca20, align 1
  %v1_ca24 = inttoptr i32 %v2_ca18 to i8*
  %v2_ca24 = call i32 @function_1013c(i8* %v1_ca24)
  %v8_ca2c = icmp sgt i32 %v2_ca24, 15
  br i1 %v8_ca2c, label %dec_label_pc_c8a0.backedge, label %dec_label_pc_ca30

dec_label_pc_ca30:                                ; preds = %dec_label_pc_ca14
  %v0_ca34 = load i32, i32* @r4, align 4
  %v2_ca38 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ca38, i32* @r0, align 4
  %v2_ca3c = bitcast i32* %stack_var_-52 to i8*
  %v3_ca3c = call i32 @function_10164(i8* %v2_ca3c, i32 %v0_ca34)
  br label %dec_label_pc_ca40

dec_label_pc_ca40.loopexit:                       ; preds = %dec_label_pc_c8a0.backedge, %dec_label_pc_c8a0.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre95 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_ca40

dec_label_pc_ca40:                                ; preds = %dec_label_pc_ca40.loopexit, %dec_label_pc_ca30
  %v1_ca50.pre-phi = phi i8* [ %.pre95, %dec_label_pc_ca40.loopexit ], [ %v2_ca3c, %dec_label_pc_ca30 ]
  %v2_ca4c.pre-phi = phi i32 [ %.pre, %dec_label_pc_ca40.loopexit ], [ %v2_ca38, %dec_label_pc_ca30 ]
  %v0_ca40 = load i32, i32* @r8, align 4
  %v1_ca44 = call i32 @function_109bc(i32 %v0_ca40)
  %v2_ca50 = call i32 @function_1013c(i8* %v1_ca50.pre-phi)
  store i32 %v2_ca50, i32* @r4, align 4
  %v2_ca54 = icmp eq i32 %v2_ca50, 0
  br i1 %v2_ca54, label %dec_label_pc_cca4, label %dec_label_pc_ca5c

dec_label_pc_ca5c:                                ; preds = %dec_label_pc_ca40
  %v3_ca64 = call i32 @function_fb80(i32 3, i32* null)
  %v1_ca68 = call i32 @function_10d98(i32 %v3_ca64)
  store i32 %v1_ca68, i32* @r8, align 4
  %v2_ca6c = icmp eq i32 %v1_ca68, 0
  br i1 %v2_ca6c, label %dec_label_pc_cc9c, label %dec_label_pc_ca7c.preheader

dec_label_pc_ca7c.preheader:                      ; preds = %dec_label_pc_ca5c
  store i32 0, i32* @r5, align 4
  %v1_ca8045 = inttoptr i32 %v1_ca68 to i32*
  %v2_ca8046 = call i32 @function_10e94(i32* %v1_ca8045)
  %v2_ca8448 = icmp eq i32 %v2_ca8046, 0
  br i1 %v2_ca8448, label %dec_label_pc_cc90, label %dec_label_pc_ca8c.preheader

dec_label_pc_ca7c.loopexit:                       ; preds = %dec_label_pc_ca94, %dec_label_pc_caa8, %dec_label_pc_cb10
  %v0_ca7c = load i32, i32* @r8, align 4
  %v1_ca80 = inttoptr i32 %v0_ca7c to i32*
  %v2_ca80 = call i32 @function_10e94(i32* %v1_ca80)
  %v2_ca84 = icmp eq i32 %v2_ca80, 0
  br i1 %v2_ca84, label %dec_label_pc_cc90, label %dec_label_pc_ca8c.preheader

dec_label_pc_ca8c.preheader:                      ; preds = %dec_label_pc_ca7c.preheader, %dec_label_pc_ca7c.loopexit
  %v0_ca9494 = phi i32 [ %v2_ca80, %dec_label_pc_ca7c.loopexit ], [ %v2_ca8046, %dec_label_pc_ca7c.preheader ]
  br label %dec_label_pc_ca8c

dec_label_pc_ca8c:                                ; preds = %dec_label_pc_ca8c.preheader, %dec_label_pc_cc78
  %v0_caa0 = phi i32 [ %v0_ca9494, %dec_label_pc_ca8c.preheader ], [ %v2_cc84, %dec_label_pc_cc78 ]
  %v0_ca8c = load i32, i32* @r5, align 4
  %v2_ca8c = icmp eq i32 %v0_ca8c, 0
  br i1 %v2_ca8c, label %dec_label_pc_ca94, label %dec_label_pc_cc90

dec_label_pc_ca94:                                ; preds = %dec_label_pc_ca8c
  %v1_ca94 = add i32 %v0_caa0, 11
  %v2_ca94 = inttoptr i32 %v1_ca94 to i8*
  %v3_ca94 = load i8, i8* %v2_ca94, align 1
  %v4_ca94 = zext i8 %v3_ca94 to i32
  %v1_ca98 = add nsw i32 %v4_ca94, -48
  store i32 %v1_ca94, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_ca98, 9
  br i1 %tmp, label %dec_label_pc_ca7c.loopexit, label %dec_label_pc_caa8

dec_label_pc_caa8:                                ; preds = %dec_label_pc_ca94
  %v3_cab0 = call i32 @function_fb80(i32 3, i32* null)
  store i32 %v2_c7c4, i32* @r0, align 4
  %v3_cabc = call i32 @function_10164(i8* %v2_c7e4, i32 %v3_cab0)
  %v2_cac4 = call i32 @function_1013c(i8* %v2_c7e4)
  %v0_cac8 = load i32, i32* @r7, align 4
  %v0_cacc = load i32, i32* @sl, align 4
  %v2_cacc = add i32 %v0_cacc, %v2_cac4
  store i32 %v2_cacc, i32* @r0, align 4
  %v2_cad0 = inttoptr i32 %v2_cacc to i8*
  %v3_cad0 = call i32 @function_10164(i8* %v2_cad0, i32 %v0_cac8)
  %v2_cad8 = call i32 @function_1013c(i8* %v2_c7e4)
  %v0_cadc = load i32, i32* @r5, align 4
  store i32 %v2_cad8, i32* @r4, align 4
  %v2_cae8 = inttoptr i32 %v0_cadc to i32*
  %v3_cae8 = call i32 @function_fb80(i32 4, i32* %v2_cae8)
  %v0_caf0 = load i32, i32* @sl, align 4
  %v1_caf0 = load i32, i32* @r4, align 4
  %v2_caf0 = add i32 %v1_caf0, %v0_caf0
  store i32 %v2_caf0, i32* @r0, align 4
  %v2_caf4 = inttoptr i32 %v2_caf0 to i8*
  %v3_caf4 = call i32 @function_10164(i8* %v2_caf4, i32 %v3_cae8)
  %v4_cb04 = call i32 @function_10bb0(i8* %v2_c7e4, i32 %v2_c7d8, i32 4096)
  %v7_cb08 = icmp eq i32 %v4_cb04, -1
  br i1 %v7_cb08, label %dec_label_pc_ca7c.loopexit, label %dec_label_pc_cb10

dec_label_pc_cb10:                                ; preds = %dec_label_pc_caa8
  %v0_cb10 = load i32, i32* @r5, align 4
  %v2_cb18 = inttoptr i32 %v0_cb10 to i32*
  %v3_cb18 = call i32 @function_fb80(i32 3, i32* %v2_cb18)
  store i32 %v2_c7c4, i32* @r0, align 4
  %v3_cb24 = call i32 @function_10164(i8* %v2_c7e4, i32 %v3_cb18)
  %v2_cb2c = call i32 @function_1013c(i8* %v2_c7e4)
  %v0_cb30 = load i32, i32* @r7, align 4
  %v0_cb34 = load i32, i32* @sl, align 4
  %v2_cb34 = add i32 %v0_cb34, %v2_cb2c
  store i32 %v2_cb34, i32* @r0, align 4
  %v2_cb38 = inttoptr i32 %v2_cb34 to i8*
  %v3_cb38 = call i32 @function_10164(i8* %v2_cb38, i32 %v0_cb30)
  %v2_cb40 = call i32 @function_1013c(i8* %v2_c7e4)
  %v0_cb44 = load i32, i32* @r5, align 4
  store i32 %v2_cb40, i32* @r4, align 4
  %v2_cb50 = inttoptr i32 %v0_cb44 to i32*
  %v3_cb50 = call i32 @function_fb80(i32 6, i32* %v2_cb50)
  %v0_cb58 = load i32, i32* @sl, align 4
  %v1_cb58 = load i32, i32* @r4, align 4
  %v2_cb58 = add i32 %v1_cb58, %v0_cb58
  store i32 %v2_cb58, i32* @r0, align 4
  %v2_cb5c = inttoptr i32 %v2_cb58 to i8*
  %v3_cb5c = call i32 @function_10164(i8* %v2_cb5c, i32 %v3_cb50)
  %v1_cb64 = call i32 @function_10d98(i32 %v2_c7c4)
  store i32 %v1_cb64, i32* @sb, align 4
  %v2_cb68 = icmp eq i32 %v1_cb64, 0
  br i1 %v2_cb68, label %dec_label_pc_ca7c.loopexit, label %dec_label_pc_cb70.preheader

dec_label_pc_cb70.preheader:                      ; preds = %dec_label_pc_cb10
  %v1_cb7440 = inttoptr i32 %v1_cb64 to i32*
  %v2_cb7441 = call i32 @function_10e94(i32* %v1_cb7440)
  store i32 %v2_cb7441, i32* @r6, align 4
  %v2_cb7843 = icmp eq i32 %v2_cb7441, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c7d8, i32* @r0, align 4
  br i1 %v2_cb7843, label %dec_label_pc_cc78, label %dec_label_pc_cb88thread-pre-split

dec_label_pc_cb70.loopexit:                       ; preds = %dec_label_pc_cb90, %dec_label_pc_cc28
  %v0_cb70 = load i32, i32* @sb, align 4
  %v1_cb74 = inttoptr i32 %v0_cb70 to i32*
  %v2_cb74 = call i32 @function_10e94(i32* %v1_cb74)
  store i32 %v2_cb74, i32* @r6, align 4
  %v2_cb78 = icmp eq i32 %v2_cb74, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c7d8, i32* @r0, align 4
  br i1 %v2_cb78, label %dec_label_pc_cc78, label %dec_label_pc_cb88thread-pre-split

dec_label_pc_cb88thread-pre-split:                ; preds = %dec_label_pc_cb70.preheader, %dec_label_pc_cb70.loopexit
  %v0_cb88.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cb88

dec_label_pc_cb88:                                ; preds = %dec_label_pc_cb88thread-pre-split, %dec_label_pc_cc50
  %v0_cb88 = phi i32 [ %v0_cb88.pr, %dec_label_pc_cb88thread-pre-split ], [ 1, %dec_label_pc_cc50 ]
  %v2_cb88 = icmp eq i32 %v0_cb88, 0
  br i1 %v2_cb88, label %dec_label_pc_cb90, label %dec_label_pc_cc78

dec_label_pc_cb90:                                ; preds = %dec_label_pc_cb88
  %v0_cb90 = call i32 @function_101dc()
  %v0_cb94 = load i32, i32* @r5, align 4
  %v2_cb9c = inttoptr i32 %v0_cb94 to i32*
  %v3_cb9c = call i32 @function_fb80(i32 3, i32* %v2_cb9c)
  store i32 %v2_c7c4, i32* @r0, align 4
  %v3_cba8 = call i32 @function_10164(i8* %v2_c7e4, i32 %v3_cb9c)
  %v2_cbb0 = call i32 @function_1013c(i8* %v2_c7e4)
  %v0_cbb4 = load i32, i32* @r7, align 4
  %v0_cbb8 = load i32, i32* @sl, align 4
  %v2_cbb8 = add i32 %v0_cbb8, %v2_cbb0
  store i32 %v2_cbb8, i32* @r0, align 4
  %v2_cbbc = inttoptr i32 %v2_cbb8 to i8*
  %v3_cbbc = call i32 @function_10164(i8* %v2_cbbc, i32 %v0_cbb4)
  %v2_cbc4 = call i32 @function_1013c(i8* %v2_c7e4)
  %v0_cbc8 = load i32, i32* @r5, align 4
  store i32 %v2_cbc4, i32* @r4, align 4
  %v2_cbd4 = inttoptr i32 %v0_cbc8 to i32*
  %v3_cbd4 = call i32 @function_fb80(i32 6, i32* %v2_cbd4)
  %v0_cbdc = load i32, i32* @sl, align 4
  %v1_cbdc = load i32, i32* @r4, align 4
  %v2_cbdc = add i32 %v1_cbdc, %v0_cbdc
  store i32 %v2_cbdc, i32* @r0, align 4
  %v2_cbe0 = inttoptr i32 %v2_cbdc to i8*
  %v3_cbe0 = call i32 @function_10164(i8* %v2_cbe0, i32 %v3_cbd4)
  %v2_cbe8 = call i32 @function_1013c(i8* %v2_c7e4)
  %v0_cbf0 = load i32, i32* @sl, align 4
  %v2_cbf0 = add i32 %v0_cbf0, %v2_cbe8
  store i32 %v2_cbf0, i32* @r0, align 4
  %v2_cbf4 = inttoptr i32 %v2_cbf0 to i8*
  %v3_cbf4 = call i32 @function_10164(i8* %v2_cbf4, i32 ptrtoint (i32* @global_var_13074.60 to i32))
  %v2_cbfc = call i32 @function_1013c(i8* %v2_c7e4)
  %v0_cc00 = load i32, i32* @r6, align 4
  %v1_cc00 = add i32 %v0_cc00, 11
  %v0_cc04 = load i32, i32* @sl, align 4
  %v2_cc04 = add i32 %v0_cc04, %v2_cbfc
  store i32 %v2_cc04, i32* @r0, align 4
  %v2_cc08 = inttoptr i32 %v2_cc04 to i8*
  %v3_cc08 = call i32 @function_10164(i8* %v2_cc08, i32 %v1_cc00)
  %v4_cc18 = call i32 @function_10bb0(i8* %v2_c7e4, i32 %v2_c7d8, i32 4096)
  %v7_cc1c = icmp eq i32 %v4_cc18, -1
  br i1 %v7_cc1c, label %dec_label_pc_cb70.loopexit, label %dec_label_pc_cc28

dec_label_pc_cc28:                                ; preds = %dec_label_pc_cb90
  %v2_cc28 = call i32 @function_1013c(i8* %v2_c7fc)
  store i32 %v2_cc28, i32* @r1, align 4
  %v4_cc3c = call i32 @function_10490(i8* %v2_c7fc, i32 %v2_cc28, i32 %v2_ca4c.pre-phi)
  %v7_cc40 = icmp eq i32 %v4_cc3c, -1
  br i1 %v7_cc40, label %dec_label_pc_cb70.loopexit, label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc28
  %v0_cc48 = load i32, i32* @r7, align 4
  %v2_cc50 = inttoptr i32 %v0_cc48 to i8*
  %v3_cc50 = call i32 @function_10268(i8* %v2_cc50, i32 10)
  %v2_cc58 = call i32 @function_10abc(i32 %v3_cc50, i32 9)
  %v0_cc5c = load i32, i32* @sb, align 4
  %v1_cc60 = inttoptr i32 %v0_cc5c to i32*
  %v2_cc60 = call i32 @function_10e94(i32* %v1_cc60)
  store i32 %v2_cc60, i32* @r6, align 4
  %v2_cc64 = icmp eq i32 %v2_cc60, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c7d8, i32* @r0, align 4
  br i1 %v2_cc64, label %dec_label_pc_cc78, label %dec_label_pc_cb88

dec_label_pc_cc78:                                ; preds = %dec_label_pc_cb70.loopexit, %dec_label_pc_cc50, %dec_label_pc_cb88, %dec_label_pc_cb70.preheader
  %v0_cc78 = load i32, i32* @sb, align 4
  %v1_cc7c = inttoptr i32 %v0_cc78 to i32*
  %v2_cc7c = call i32 @function_10ce4(i32* %v1_cc7c)
  %v0_cc80 = load i32, i32* @r8, align 4
  %v1_cc84 = inttoptr i32 %v0_cc80 to i32*
  %v2_cc84 = call i32 @function_10e94(i32* %v1_cc84)
  %v2_cc88 = icmp eq i32 %v2_cc84, 0
  br i1 %v2_cc88, label %dec_label_pc_cc90, label %dec_label_pc_ca8c

dec_label_pc_cc90:                                ; preds = %dec_label_pc_ca7c.loopexit, %dec_label_pc_cc78, %dec_label_pc_ca8c, %dec_label_pc_ca7c.preheader
  %v0_cc90 = load i32, i32* @r8, align 4
  %v1_cc94 = inttoptr i32 %v0_cc90 to i32*
  %v2_cc94 = call i32 @function_10ce4(i32* %v1_cc94)
  %v0_cc98 = load i32, i32* @r5, align 4
  %v1_cc98 = urem i32 %v0_cc98, 256
  br label %dec_label_pc_cc9c

dec_label_pc_cc9c:                                ; preds = %dec_label_pc_ca5c, %dec_label_pc_cc90
  %storemerge = phi i32 [ %v1_cc98, %dec_label_pc_cc90 ], [ 0, %dec_label_pc_ca5c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_cca0 = call i32 @function_11c00(i32 1)
  br label %dec_label_pc_cca4

dec_label_pc_cca4:                                ; preds = %dec_label_pc_ca40, %dec_label_pc_cc9c
  %v1_cca8 = call i32 @function_fbac(i32 3)
  %v1_ccb0 = call i32 @function_fbac(i32 4)
  %v1_ccb8 = call i32 @function_fbac(i32 6)
  %v1_ccc0 = call i32 @function_fbac(i32 8)
  br label %dec_label_pc_ccc4

dec_label_pc_ccc4:                                ; preds = %dec_label_pc_c860, %dec_label_pc_cca4
  %v0_ccc4 = load i32, i32* @r4, align 4
  %v2_ccd0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ccd0, i32* @r4, align 4
  store i32 %v6_c7b0, i32* @r5, align 4
  store i32 %v9_c7b0, i32* @r6, align 4
  store i32 %v12_c7b0, i32* @r7, align 4
  store i32 %v15_c7b0, i32* @r8, align 4
  store i32 %v18_c7b0, i32* @sb, align 4
  store i32 %v21_c7b0, i32* @sl, align 4
  store i32 %v24_c7b0, i32* @fp, align 4
  ret i32 %v0_ccc4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_c9b0
  %v1_ccd4 = add i32 %v0_ccd4, 1
  store i32 %v1_ccd4, i32* @lr, align 4
  %v7_ccd8 = icmp eq i32 %v0_ccd4, 0
  br i1 %v7_ccd8, label %dec_label_pc_cce0, label %dec_label_pc_c9b8

dec_label_pc_cce0:                                ; preds = %dec_label_pc_ccd4
  %v1_cce0 = add i32 %v0_c9c0, 3
  %v2_cce0 = inttoptr i32 %v1_cce0 to i8*
  %v3_cce0 = load i8, i8* %v2_cce0, align 1
  %v7_cce4 = icmp eq i8 %v3_cce0, 65
  br i1 %v7_cce4, label %dec_label_pc_ccf4, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_cce0
  br label %dec_label_pc_c988.backedge

dec_label_pc_ccf4:                                ; preds = %dec_label_pc_cce0
  store i32 %v1_ccd4, i32* @r4, align 4
  br label %dec_label_pc_c988.backedge

dec_label_pc_c988.backedge:                       ; preds = %.thread33, %dec_label_pc_ccf4, %dec_label_pc_c9bc
  %v0_c9c885 = phi i32 [ %v1_ccd4, %dec_label_pc_ccf4 ], [ %v0_c9c886, %dec_label_pc_c9bc ], [ %v0_c9c886, %.thread33 ]
  %v0_ccd474 = phi i32 [ %v1_ccd4, %dec_label_pc_ccf4 ], [ %v0_c9bc, %dec_label_pc_c9bc ], [ %v1_ccd4, %.thread33 ]
  %v0_c9b0.pr71 = phi i32 [ 0, %dec_label_pc_ccf4 ], [ %v0_c9b0.pr72, %dec_label_pc_c9bc ], [ 0, %.thread33 ]
  %v0_c988 = add i32 %v0_c9c0, 1
  %v1_c988 = add i32 %v0_c9c0, 3
  %v2_c988 = inttoptr i32 %v1_c988 to i8*
  %v3_c988 = load i8, i8* %v2_c988, align 1
  %v2_c98c = icmp eq i8 %v3_c988, 0
  %v1_c990 = add i32 %v0_c99082, 1
  br i1 %v2_c98c, label %dec_label_pc_c9c8, label %dec_label_pc_c998

dec_label_pc_cd04:                                ; preds = %dec_label_pc_c7b0
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_c860

; uselistorder directives
  uselistorder i32 %v1_c990, { 1, 0 }
  uselistorder i8 %v3_c988, { 1, 0 }
  uselistorder i32 %v0_c9c885, { 1, 0 }
  uselistorder i32 %v1_ccd4, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_cc84, { 1, 0 }
  uselistorder i32 %v1_c9f4, { 1, 0 }
  uselistorder i32 %v0_ca0028, { 1, 0 }
  uselistorder i32 %v1_ca18, { 0, 3, 1, 2 }
  uselistorder i32 %v0_c9bc, { 1, 0 }
  uselistorder i32 %v0_c99082, { 1, 0 }
  uselistorder i32 %v0_ccd4, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_c9c886, { 1, 2, 0 }
  uselistorder i32 %v1_c99056, { 1, 0 }
  uselistorder i32 %v2_c974, { 1, 0 }
  uselistorder i32 %v1_c970, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_c92c13, { 1, 0, 2 }
  uselistorder i32 %v0_c91c, { 1, 0 }
  uselistorder i32 %v1_c8fc, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_c890, { 1, 2, 0 }
  uselistorder i32 %v2_c824, { 1, 0 }
  uselistorder i32 %v2_c7d8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_10394, { 1, 0 }
  uselistorder label %dec_label_pc_c988.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ccc4, { 1, 0 }
  uselistorder label %dec_label_pc_cca4, { 1, 0 }
  uselistorder label %dec_label_pc_cc9c, { 1, 0 }
  uselistorder label %dec_label_pc_cc90, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cc78, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cb88, { 1, 0 }
  uselistorder label %dec_label_pc_cb88thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cb70.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_ca8c, { 1, 0 }
  uselistorder label %dec_label_pc_ca8c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_ca7c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ca14, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c9bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c998, { 1, 0 }
  uselistorder label %dec_label_pc_c93c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c8a0.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c8f0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_c8b8, { 1, 0 }
  uselistorder label %dec_label_pc_c860, { 1, 0 }
}

define i32 @function_cd30(i32 %arg1) local_unnamed_addr {
dec_label_pc_cd30:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-628 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %v3_cd30 = load i32, i32* @r4, align 4
  %v6_cd30 = load i32, i32* @r5, align 4
  %v9_cd30 = load i32, i32* @r6, align 4
  %v12_cd30 = load i32, i32* @r7, align 4
  %v15_cd30 = load i32, i32* @r8, align 4
  %v18_cd30 = load i32, i32* @sb, align 4
  %v21_cd30 = load i32, i32* @sl, align 4
  %v24_cd30 = load i32, i32* @fp, align 4
  %v2_cd3c = call i32 @function_10c8c(i32* null)
  store i32 %v2_cd3c, i32* @r6, align 4
  %v0_cd44 = call i32 @function_109e8()
  %v7_cd48 = icmp eq i32 %v0_cd44, -1
  %. = zext i1 %v7_cd48 to i32
  %tmp56 = icmp slt i32 %v0_cd44, 1
  %storemerge37 = select i1 %tmp56, i32 %., i32 1
  store i32 %storemerge37, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1b7c4.58 to i32), i32* %r3.global-to-local, align 4
  %v2_cd64 = icmp eq i32 %storemerge37, 0
  store i32 %v0_cd44, i32* @global_var_1b7c4.58, align 4
  br i1 %v2_cd64, label %dec_label_pc_cd78, label %dec_label_pc_cd70

dec_label_pc_cd70:                                ; preds = %dec_label_pc_cdd4, %dec_label_pc_cd30
  %v29_cd74 = phi i32 [ %v0_cd44, %dec_label_pc_cd30 ], [ 0, %dec_label_pc_cdd4 ]
  store i32 %v3_cd30, i32* @r4, align 4
  store i32 %v6_cd30, i32* @r5, align 4
  store i32 %v9_cd30, i32* @r6, align 4
  store i32 %v12_cd30, i32* @r7, align 4
  store i32 %v15_cd30, i32* @r8, align 4
  store i32 %v18_cd30, i32* @sb, align 4
  store i32 %v21_cd30, i32* @sl, align 4
  store i32 %v24_cd30, i32* @fp, align 4
  ret i32 %v29_cd74

dec_label_pc_cd78:                                ; preds = %dec_label_pc_cd30
  store i32 2, i32* @r5, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v1_cd8c = call i32 @function_c7b0(i32 20736)
  %v2_cd90 = icmp eq i32 %v1_cd8c, 0
  br i1 %v2_cd90, label %dec_label_pc_cd98, label %dec_label_pc_cfec

dec_label_pc_cd98:                                ; preds = %dec_label_pc_cd78, %dec_label_pc_cfec, %dec_label_pc_d014
  %v1_cd9c = call i32 @function_11c00(i32 5)
  %v1_cda4 = call i32 @function_11428(i32 4096)
  %v2_cda4 = inttoptr i32 %v1_cda4 to i8*
  store i32 %v1_cda4, i32* @global_var_1b864.63, align 4
  store i32 ptrtoint (i32* @global_var_1b7c8.65 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v2_cda4, align 1
  %v0_cdbc = load i32, i32* %r2.global-to-local, align 4
  %v1_cdbc = load i32, i32* %r3.global-to-local, align 4
  %v2_cdbc = inttoptr i32 %v1_cdbc to i32*
  store i32 %v0_cdbc, i32* %v2_cdbc, align 4
  %v0_cdc0 = load i32, i32* @r6, align 4
  store i32 %v0_cdc0, i32* @r5, align 4
  %v0_cdc4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_cdc4, i32* @sb, align 4
  store i32 400, i32* @r6, align 4
  %v2_cdcc = ptrtoint i32* %stack_var_-116 to i32
  store i32 %v2_cdcc, i32* @fp, align 4
  %v2_cdd0 = ptrtoint i32* %stack_var_-628 to i32
  store i32 %v2_cdd0, i32* @r8, align 4
  %v2_cec4 = bitcast i32* %stack_var_-116 to i8*
  br label %dec_label_pc_cdd4

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_ce88, %dec_label_pc_cd98
  %v1_cdd8 = call i32 @function_fc64(i32 3)
  %v3_cde4 = call i32 @function_fb80(i32 3, i32* null)
  %v1_cde8 = call i32 @function_10d98(i32 %v3_cde4)
  store i32 %v1_cde8, i32* @sl, align 4
  %v2_cdec = icmp eq i32 %v1_cde8, 0
  br i1 %v2_cdec, label %dec_label_pc_cd70, label %dec_label_pc_cdf4

dec_label_pc_cdf4:                                ; preds = %dec_label_pc_cdd4
  %v1_cdf8 = call i32 @function_fbac(i32 3)
  %v0_cdfc20 = load i32, i32* @sl, align 4
  %v1_ce0021 = inttoptr i32 %v0_cdfc20 to i32*
  %v2_ce0022 = call i32 @function_10e94(i32* %v1_ce0021)
  %v2_ce0424 = icmp eq i32 %v2_ce0022, 0
  br i1 %v2_ce0424, label %dec_label_pc_ce88, label %dec_label_pc_ce0c.preheader

dec_label_pc_ce0c.preheader:                      ; preds = %dec_label_pc_cdf4, %dec_label_pc_cdfc.backedge
  %v0_ce0c29 = phi i32 [ %v2_ce00, %dec_label_pc_cdfc.backedge ], [ %v2_ce0022, %dec_label_pc_cdf4 ]
  br label %dec_label_pc_ce0c

dec_label_pc_ce0c:                                ; preds = %dec_label_pc_ce0c.preheader, %dec_label_pc_ce70
  %v0_ce1c = phi i32 [ %v0_ce0c29, %dec_label_pc_ce0c.preheader ], [ %v2_ce7c, %dec_label_pc_ce70 ]
  %v1_ce0c = add i32 %v0_ce1c, 11
  %v2_ce0c = inttoptr i32 %v1_ce0c to i8*
  %v3_ce0c = load i8, i8* %v2_ce0c, align 1
  %v4_ce0c = zext i8 %v3_ce0c to i32
  %v1_ce10 = add nsw i32 %v4_ce0c, -48
  store i32 %v1_ce10, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ce10, 9
  br i1 %tmp, label %dec_label_pc_cdfc.backedge, label %dec_label_pc_ce1c

dec_label_pc_ce1c:                                ; preds = %dec_label_pc_ce0c
  store i32 %v1_ce0c, i32* @r4, align 4
  %v3_ce28 = call i32 @function_10268(i8* %v2_ce0c, i32 10)
  %v0_ce2c = load i32, i32* @r6, align 4
  store i32 %v3_ce28, i32* @r7, align 4
  %v0_ce34 = load i32, i32* @sb, align 4
  %v1_ce34 = add i32 %v0_ce34, 1
  store i32 %v1_ce34, i32* @sb, align 4
  %v5_ce38 = icmp slt i32 %v0_ce2c, %v3_ce28
  %v2_ce98 = call i32 @function_10c8c(i32* null)
  br i1 %v5_ce38, label %dec_label_pc_ce94, label %dec_label_pc_ce3c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_ce1c
  %v0_ce44 = load i32, i32* @r5, align 4
  %v2_ce44 = sub i32 %v2_ce98, %v0_ce44
  %v7_ce4c = icmp slt i32 %v2_ce44, 601
  br i1 %v7_ce4c, label %dec_label_pc_ce54, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_ce3c
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_cdfc.backedge

dec_label_pc_ce54:                                ; preds = %dec_label_pc_ce3c
  %v0_ce54 = load i32, i32* @r7, align 4
  %v7_ce58 = icmp slt i32 %v0_ce54, 401
  br i1 %v7_ce58, label %dec_label_pc_cdfc.backedge, label %dec_label_pc_ce5c

dec_label_pc_ce5c:                                ; preds = %dec_label_pc_ce54
  %v0_ce5c = load i32, i32* @sb, align 4
  %v2_ce64 = call i32 @function_10744(i32 %v0_ce5c, i32 10)
  %v2_ce68 = icmp eq i32 %v2_ce64, 0
  br i1 %v2_ce68, label %dec_label_pc_ce70, label %dec_label_pc_cdfc.backedge

dec_label_pc_ce70:                                ; preds = %dec_label_pc_ce5c
  %v1_ce74 = call i32 @function_11c00(i32 1)
  %v0_ce78 = load i32, i32* @sl, align 4
  %v1_ce7c = inttoptr i32 %v0_ce78 to i32*
  %v2_ce7c = call i32 @function_10e94(i32* %v1_ce7c)
  %v2_ce80 = icmp eq i32 %v2_ce7c, 0
  br i1 %v2_ce80, label %dec_label_pc_ce88, label %dec_label_pc_ce0c

dec_label_pc_ce88:                                ; preds = %dec_label_pc_cdfc.backedge, %dec_label_pc_ce70, %dec_label_pc_cdf4
  %v0_ce88 = load i32, i32* @sl, align 4
  %v1_ce8c = inttoptr i32 %v0_ce88 to i32*
  %v2_ce8c = call i32 @function_10ce4(i32* %v1_ce8c)
  br label %dec_label_pc_cdd4

dec_label_pc_ce94:                                ; preds = %dec_label_pc_ce1c
  store i32 %v2_ce98, i32* %stack_var_-632, align 4
  %v1_cea4 = call i32 @function_fc64(i32 3)
  %v1_ceac = call i32 @function_fc64(i32 7)
  %v3_ceb8 = call i32 @function_fb80(i32 3, i32* null)
  store i32 %v2_cdcc, i32* @r0, align 4
  %v3_cec4 = call i32 @function_10164(i8* %v2_cec4, i32 %v3_ceb8)
  %v0_cec8 = load i32, i32* @fp, align 4
  %v2_cec8 = add i32 %v0_cec8, %v3_cec4
  store i32 %v2_cec8, i32* @r5, align 4
  %v0_cecc = load i32, i32* @r4, align 4
  store i32 %v2_cec8, i32* @r0, align 4
  %v2_ced4 = inttoptr i32 %v2_cec8 to i8*
  %v3_ced4 = call i32 @function_10164(i8* %v2_ced4, i32 %v0_cecc)
  store i32 %v3_ced4, i32* @r4, align 4
  %v3_cee4 = call i32 @function_fb80(i32 7, i32* null)
  %v0_ceec = load i32, i32* @r5, align 4
  %v1_ceec = load i32, i32* @r4, align 4
  %v2_ceec = add i32 %v1_ceec, %v0_ceec
  store i32 %v2_ceec, i32* @r0, align 4
  %v2_cef0 = inttoptr i32 %v2_ceec to i8*
  %v3_cef0 = call i32 @function_10164(i8* %v2_cef0, i32 %v3_cee4)
  %v1_cef8 = call i32 @function_fbac(i32 3)
  %v1_cf00 = call i32 @function_fbac(i32 7)
  %v3_cf0c = call i32 @function_10ae8(i8* %v2_cec4, i32 0)
  %v7_cf10 = icmp eq i32 %v3_cf0c, -1
  store i32 %v3_cf0c, i32* @r6, align 4
  br i1 %v7_cf10, label %dec_label_pc_cfb8, label %dec_label_pc_cf1c

dec_label_pc_cf1c:                                ; preds = %dec_label_pc_ce94
  %v1_cf20 = call i32 @function_fc64(i32 9)
  br label %dec_label_pc_cf24

dec_label_pc_cf24:                                ; preds = %dec_label_pc_cf8c, %.thread6, %dec_label_pc_cf3c, %dec_label_pc_cf1c
  %v0_cf24 = load i32, i32* @r6, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v4_cf30 = call i32 @function_10b84(i32 %v0_cf24, i32* nonnull %stack_var_-628, i32 512)
  store i32 %v4_cf30, i32* @r4, align 4
  %tmp59 = icmp slt i32 %v4_cf30, 1
  br i1 %tmp59, label %dec_label_pc_cfd8, label %dec_label_pc_cf3c

dec_label_pc_cf3c:                                ; preds = %dec_label_pc_cf24
  %v3_cf44 = call i32 @function_fb80(i32 9, i32* null)
  store i32 %v3_cf44, i32* @r5, align 4
  %v3_cf54 = call i32 @function_fb80(i32 9, i32* null)
  %v1_cf58 = inttoptr i32 %v3_cf54 to i8*
  %v2_cf58 = call i32 @function_1013c(i8* %v1_cf58)
  %v0_cf5c = load i32, i32* @r4, align 4
  %v5_cf60 = icmp slt i32 %v0_cf5c, %v2_cf58
  br i1 %v5_cf60, label %dec_label_pc_cf24, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_cf3c
  %v1_cf6c12 = add i32 %v0_cf5c, -1
  store i32 %v1_cf6c12, i32* @r4, align 4
  %v2_cf6c13 = icmp eq i32 %v0_cf5c, 0
  br i1 %v2_cf6c13, label %dec_label_pc_cf24, label %dec_label_pc_cf74.lr.ph

dec_label_pc_cf74.lr.ph:                          ; preds = %.thread6
  %v0_cf74.pre = load i32, i32* @r5, align 4
  %v1_cf78.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_cf74

dec_label_pc_cf74:                                ; preds = %dec_label_pc_cf8c, %dec_label_pc_cf74.lr.ph
  %v0_cf6c = phi i32 [ %v1_cf6c12, %dec_label_pc_cf74.lr.ph ], [ %v1_cf6c, %dec_label_pc_cf8c ]
  %v0_cf8c = phi i32 [ 0, %dec_label_pc_cf74.lr.ph ], [ %v1_cf8c, %dec_label_pc_cf8c ]
  %v0_cf80 = phi i32 [ 0, %dec_label_pc_cf74.lr.ph ], [ %v1_cf80., %dec_label_pc_cf8c ]
  %v2_cf74 = add i32 %v0_cf80, %v0_cf74.pre
  %v3_cf74 = inttoptr i32 %v2_cf74 to i8*
  %v4_cf74 = load i8, i8* %v3_cf74, align 1
  %v6_cf74 = zext i8 %v4_cf74 to i32
  store i32 %v6_cf74, i32* %r2.global-to-local, align 4
  %v2_cf78 = add i32 %v0_cf8c, %v1_cf78.pre
  %v3_cf78 = inttoptr i32 %v2_cf78 to i8*
  %v4_cf78 = load i8, i8* %v3_cf78, align 1
  %v6_cf78 = zext i8 %v4_cf78 to i32
  store i32 %v6_cf78, i32* %r3.global-to-local, align 4
  %v9_cf7c = icmp eq i8 %v4_cf78, %v4_cf74
  %v1_cf80 = add i32 %v0_cf80, 1
  %v1_cf80. = select i1 %v9_cf7c, i32 %v1_cf80, i32 0
  br i1 %v9_cf7c, label %dec_label_pc_cf94, label %dec_label_pc_cf8c

dec_label_pc_cf8c:                                ; preds = %dec_label_pc_cf94, %dec_label_pc_cf74
  %v1_cf8c = add i32 %v0_cf8c, 1
  %v1_cf6c = add i32 %v0_cf6c, -1
  store i32 %v1_cf6c, i32* @r4, align 4
  %v2_cf6c = icmp eq i32 %v0_cf6c, 0
  br i1 %v2_cf6c, label %dec_label_pc_cf24, label %dec_label_pc_cf74

dec_label_pc_cf94:                                ; preds = %dec_label_pc_cf74
  %v9_cf94 = icmp eq i32 %v2_cf58, %v1_cf80.
  br i1 %v9_cf94, label %dec_label_pc_cf9c, label %dec_label_pc_cf8c

dec_label_pc_cf9c:                                ; preds = %dec_label_pc_cf94
  %v1_cfa0 = call i32 @function_fbac(i32 9)
  %v0_cfa4 = load i32, i32* @r6, align 4
  %v1_cfa8 = call i32 @function_109bc(i32 %v0_cfa4)
  %v0_cfac = load i32, i32* @r7, align 4
  %v2_cfb4 = call i32 @function_10abc(i32 %v0_cfac, i32 9)
  br label %dec_label_pc_cfb8

dec_label_pc_cfb8:                                ; preds = %dec_label_pc_ce94, %dec_label_pc_cfd8, %dec_label_pc_cf9c
  store i32 %v2_cdcc, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_cfc0 = call i32 @function_101dc()
  %v1_cfc8 = call i32 @function_11c00(i32 1)
  %v2_cfcc = load i32, i32* %stack_var_-632, align 4
  store i32 %v2_cfcc, i32* @r5, align 4
  %v0_cfd0 = load i32, i32* @r7, align 4
  store i32 %v0_cfd0, i32* @r6, align 4
  br label %dec_label_pc_cdfc.backedge

dec_label_pc_cdfc.backedge:                       ; preds = %dec_label_pc_ce5c, %dec_label_pc_ce54, %dec_label_pc_ce0c, %dec_label_pc_cfb8, %.thread1
  %v0_cdfc = load i32, i32* @sl, align 4
  %v1_ce00 = inttoptr i32 %v0_cdfc to i32*
  %v2_ce00 = call i32 @function_10e94(i32* %v1_ce00)
  %v2_ce04 = icmp eq i32 %v2_ce00, 0
  br i1 %v2_ce04, label %dec_label_pc_ce88, label %dec_label_pc_ce0c.preheader

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cf24
  %v1_cfdc = call i32 @function_fbac(i32 9)
  %v0_cfe0 = load i32, i32* @r6, align 4
  %v1_cfe4 = call i32 @function_109bc(i32 %v0_cfe0)
  br label %dec_label_pc_cfb8

dec_label_pc_cfec:                                ; preds = %dec_label_pc_cd78
  %v0_cfec = load i32, i32* @r4, align 4
  store i32 %v0_cfec, i32* %r2.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_cff4 = load i32, i32* @r5, align 4
  %v3_d004 = call i32 @function_11290(i32 %v0_cff4, i32 1, i32 %v0_cfec)
  %v7_d008 = icmp eq i32 %v3_d004, -1
  store i32 %v3_d004, i32* @r4, align 4
  br i1 %v7_d008, label %dec_label_pc_cd98, label %dec_label_pc_d014

dec_label_pc_d014:                                ; preds = %dec_label_pc_cfec
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d01c = bitcast i32* %stack_var_-52 to %sockaddr*
  %v4_d01c = call i32 @function_110c0(i32 %v3_d004, %sockaddr* %v3_d01c, i32 16)
  %v0_d020 = load i32, i32* @r4, align 4
  %v2_d028 = call i32 @function_11174(i32 %v0_d020, i32 1)
  br label %dec_label_pc_cd98

; uselistorder directives
  uselistorder i32 %v3_d004, { 2, 1, 0 }
  uselistorder i32 %v2_ce00, { 1, 0 }
  uselistorder i32 %v1_cf6c, { 1, 0 }
  uselistorder i32 %v1_cf80., { 1, 0 }
  uselistorder i1 %v9_cf7c, { 1, 0 }
  uselistorder i32 %v0_cf80, { 1, 0 }
  uselistorder i32 %v0_cf8c, { 1, 0 }
  uselistorder i32 %v0_cf6c, { 1, 0 }
  uselistorder i32 %v0_cf5c, { 1, 0, 2 }
  uselistorder i32 %v2_cf58, { 1, 0 }
  uselistorder i32 %v3_cf0c, { 1, 0 }
  uselistorder i32 %v2_ce7c, { 1, 0 }
  uselistorder i32 %storemerge37, { 1, 0 }
  uselistorder i32 %v0_cd44, { 1, 2, 3, 0 }
  uselistorder i32 (i8*, i32)* @function_10268, { 1, 2, 0 }
  uselistorder i32 (i32*)* @function_10e94, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_10d98, { 2, 1, 0 }
  uselistorder i32* @global_var_1b7c4.58, { 0, 2, 1 }
  uselistorder label %dec_label_pc_cdfc.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_cfb8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce0c, { 1, 0 }
  uselistorder label %dec_label_pc_ce0c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cd98, { 2, 1, 0 }
}

define i32 @function_d03c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d03c:
  store i32 ptrtoint (i32* @global_var_d054.67 to i32), i32* @global_var_1b650.69, align 4
  ret i32 %arg1
}

define i32 @function_d054() local_unnamed_addr {
dec_label_pc_d054:
  %stack_var_-8 = alloca i32, align 4
  %v3_d054 = load i32, i32* @r4, align 4
  store i32 %v3_d054, i32* %stack_var_-8, align 4
  %v1_d05c = call i32 @function_fc64(i32 2)
  store i32 991929785, i32* @global_var_1b86c.73, align 4
  %v3_d074 = call i32 @function_fb80(i32 2, i32* null)
  %v4_d074 = inttoptr i32 %v3_d074 to i8*
  %v2_d078 = add i32 %v3_d074, 1
  %v3_d078 = inttoptr i32 %v2_d078 to i8*
  %v4_d078 = load i8, i8* %v3_d078, align 1
  %v3_d07c = load i8, i8* %v4_d074, align 1
  store i8 %v4_d078, i8* bitcast (i32* @global_var_1b86b.74 to i8*), align 4
  store i8 %v3_d07c, i8* bitcast (i32* @global_var_1b86a.75 to i8*), align 4
  %v2_d094 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d094, i32* @r4, align 4
  %v1_d098 = call i32 @function_fbac(i32 2)
  %v0_d09c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d09c, label %bb, label %dec_label_pc_d054._crit_edge

dec_label_pc_d054._crit_edge:                     ; preds = %dec_label_pc_d054
  %v0_d0a0.pre = load i1, i1* @cpsr_c, align 1
  br label %bb4

bb:                                               ; preds = %dec_label_pc_d054
  %v2_d09c = load i32, i32* @r8, align 4
  %v6_d09c = and i32 %v2_d09c, 32768
  %v7_d09c = icmp ne i32 %v6_d09c, 0
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_d054._crit_edge, %bb
  %v0_d0a0 = phi i1 [ %v0_d0a0.pre, %dec_label_pc_d054._crit_edge ], [ %v7_d09c, %bb ]
  %v1_d0a0 = xor i1 %v0_d0a0, true
  call void @__pseudo_cond_branch(i1 %v1_d0a0, i32 8349580)
  ret i32 %v1_d098

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_d0a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d0a4:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_d0a4 = load i32, i32* @r4, align 4
  %v9_d0a4 = load i32, i32* @r6, align 4
  %v15_d0a4 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d0c0 = call i32 @function_11290(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1b648.77 to i32), i32* @r6, align 4
  %v7_d0c8 = icmp eq i32 %v3_d0c0, -1
  store i32 %v3_d0c0, i32* @global_var_1b648.77, align 4
  br i1 %v7_d0c8, label %dec_label_pc_d188, label %dec_label_pc_d0d4

dec_label_pc_d0d4:                                ; preds = %dec_label_pc_d0a4
  %v0_d0d8 = load i32, i32* @r4, align 4
  %v6_d0e8 = call i32 @function_11260(i32 %v3_d0c0, i32 %v0_d0d8, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_d0ec = load i32, i32* @global_var_1b648.77, align 4
  store i32 %v2_d0ec, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_d0fc = call i32 @function_108f8(i32 %v2_d0ec, i32 3)
  %v1_d104 = or i32 %v2_d0fc, 2048
  store i32 %v1_d104, i32* @r2, align 4
  %v0_d108 = load i32, i32* @r4, align 4
  %v2_d10c = call i32 @function_108f8(i32 %v0_d108, i32 4)
  store i32 ptrtoint (i8** @global_var_1b654.79 to i32), i32* @r8, align 4
  %v2_d114 = load i8, i8* bitcast (i8** @global_var_1b654.79 to i8*), align 4
  %v2_d118 = icmp eq i8 %v2_d114, 0
  br i1 %v2_d118, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_d0d4
  br label %bb

.thread:                                          ; preds = %dec_label_pc_d0d4
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_d150 = call i32 @function_10f64()
  %v0_d154 = load i32, i32* @r5, align 4
  %v2_d154 = inttoptr i32 %v0_d150 to i32*
  store i32 %v0_d154, i32* %v2_d154, align 4
  %v2_d158 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d158, i32* @r7, align 4
  store i32 %v0_d150, i32* @r4, align 4
  %v2_d164 = load i32, i32* @global_var_1b648.77, align 4
  %v3_d16c = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_d16c = call i32 @function_110c0(i32 %v2_d164, %sockaddr* %v3_d16c, i32 16)
  %v7_d170 = icmp eq i32 %v4_d16c, -1
  br i1 %v7_d170, label %dec_label_pc_d190, label %dec_label_pc_d178

dec_label_pc_d178:                                ; preds = %bb
  %v2_d180 = load i32, i32* @global_var_1b648.77, align 4
  %v2_d184 = call i32 @function_11174(i32 %v2_d180, i32 1)
  br label %dec_label_pc_d188

dec_label_pc_d188:                                ; preds = %dec_label_pc_d0a4, %dec_label_pc_d19c, %dec_label_pc_d178
  %v20_d18c = phi i32 [ %v3_d0c0, %dec_label_pc_d0a4 ], [ %v1_d1ec, %dec_label_pc_d19c ], [ %v2_d184, %dec_label_pc_d178 ]
  store i32 %v3_d0a4, i32* @r4, align 4
  store i32 %v9_d0a4, i32* @r6, align 4
  store i32 %v15_d0a4, i32* @r8, align 4
  ret i32 %v20_d18c

dec_label_pc_d190:                                ; preds = %bb
  %v0_d190 = load i32, i32* @r4, align 4
  %v1_d190 = inttoptr i32 %v0_d190 to i32*
  %v2_d190 = load i32, i32* %v1_d190, align 4
  %v7_d194 = icmp eq i32 %v2_d190, 99
  br i1 %v7_d194, label %dec_label_pc_d1f4, label %dec_label_pc_d19c

dec_label_pc_d19c:                                ; preds = %dec_label_pc_d1f4, %bb21, %dec_label_pc_d190
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_d1b4 = load i32, i32* @global_var_1b648.77, align 4
  %v4_d1cc = call i32 @function_110ec(i32 %v2_d1b4, %sockaddr* %v3_d16c, i32 16)
  %v1_d1d4 = call i32 @function_11c00(i32 5)
  %v2_d1d8 = load i32, i32* @global_var_1b648.77, align 4
  %v1_d1dc = call i32 @function_109bc(i32 %v2_d1d8)
  %v1_d1e8 = call i32 @function_c7b0(i32 50951)
  %v1_d1ec = call i32 @function_d0a4(i32 %v1_d1e8)
  br label %dec_label_pc_d188

dec_label_pc_d1f4:                                ; preds = %dec_label_pc_d190
  %v2_d1f4 = load i8, i8* bitcast (i8** @global_var_1b654.79 to i8*), align 4
  %v3_d1f4 = zext i8 %v2_d1f4 to i32
  %v1_d1f8 = load i32, i32* @r5, align 4
  %v9_d1f8 = icmp eq i32 %v3_d1f4, %v1_d1f8
  br i1 %v9_d1f8, label %dec_label_pc_d19c, label %bb21

bb21:                                             ; preds = %dec_label_pc_d1f4
  %v2_d200 = trunc i32 %v1_d1f8 to i8
  store i8 %v2_d200, i8* bitcast (i8** @global_var_1b654.79 to i8*), align 4
  br label %dec_label_pc_d19c

; uselistorder directives
  uselistorder i32 %v3_d0c0, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_c7b0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_11174, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1b654.79 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1b654.79, { 1, 0 }
  uselistorder label %dec_label_pc_d19c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d188, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_d214(i32 %arg1) local_unnamed_addr {
dec_label_pc_d214:
  %stack_var_-16 = alloca i32, align 4
  %v3_d214 = load i32, i32* @r4, align 4
  %v6_d214 = load i32, i32* @r5, align 4
  %v2_d218 = ptrtoint i32* %stack_var_-16 to i32
  %v0_d21c = call i32 @function_109e8()
  %v7_d220 = icmp eq i32 %v0_d21c, -1
  %. = zext i1 %v7_d220 to i32
  %tmp11 = icmp slt i32 %v0_d21c, 1
  %storemerge5 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge5, i32* @r5, align 4
  %v2_d23c = icmp eq i32 %storemerge5, 0
  store i32 %v0_d21c, i32* @global_var_1b7cc.82, align 4
  br i1 %v2_d23c, label %dec_label_pc_d250, label %dec_label_pc_d248

dec_label_pc_d248:                                ; preds = %dec_label_pc_d214
  store i32 %v3_d214, i32* @r4, align 4
  store i32 %v6_d214, i32* @r5, align 4
  ret i32 %v0_d21c

dec_label_pc_d250:                                ; preds = %dec_label_pc_d214
  store i32 1, i32* %stack_var_-16, align 4
  %v1_d25c = call i32 @function_fc64(i32 13)
  %v1_d264 = call i32 @function_fc64(i32 14)
  %v0_d268 = load i32, i32* @r5, align 4
  %v2_d270 = inttoptr i32 %v0_d268 to i32*
  %v3_d270 = call i32 @function_fb80(i32 13, i32* %v2_d270)
  %v2_d278 = inttoptr i32 %v3_d270 to i8*
  %v3_d278 = call i32 @function_10ae8(i8* %v2_d278, i32 2)
  %v7_d27c = icmp eq i32 %v3_d278, -1
  store i32 %v3_d278, i32* @r4, align 4
  br i1 %v7_d27c, label %dec_label_pc_d2c4, label %dec_label_pc_d288

dec_label_pc_d288:                                ; preds = %dec_label_pc_d2c4, %dec_label_pc_d250
  %v0_d294 = phi i32 [ %v3_d2d4, %dec_label_pc_d2c4 ], [ %v3_d278, %dec_label_pc_d250 ]
  %v3_d29c = call i32 @function_10a6c(i32 %v0_d294, i32 -2147199228, i32 %v2_d218)
  br label %dec_label_pc_d2a0

dec_label_pc_d2a0:                                ; preds = %dec_label_pc_d2a0, %dec_label_pc_d288
  %v0_d2ac = load i32, i32* @r4, align 4
  %v3_d2b4 = call i32 @function_10a6c(i32 %v0_d2ac, i32 -2147199227, i32 0)
  %v1_d2bc = call i32 @function_11c00(i32 10)
  br label %dec_label_pc_d2a0

dec_label_pc_d2c4:                                ; preds = %dec_label_pc_d250
  %v0_d2c4 = load i32, i32* @r5, align 4
  %v2_d2cc = inttoptr i32 %v0_d2c4 to i32*
  %v3_d2cc = call i32 @function_fb80(i32 14, i32* %v2_d2cc)
  %v2_d2d4 = inttoptr i32 %v3_d2cc to i8*
  %v3_d2d4 = call i32 @function_10ae8(i8* %v2_d2d4, i32 2)
  %v3_d2d8 = icmp eq i32 %v3_d2d4, -1
  store i32 %v3_d2d4, i32* @r4, align 4
  br i1 %v3_d2d8, label %dec_label_pc_d2e4, label %dec_label_pc_d288

dec_label_pc_d2e4:                                ; preds = %dec_label_pc_d2c4
  %v1_d2e8 = call i32 @function_fbac(i32 13)
  %v1_d2f0 = call i32 @function_fbac(i32 14)
  %v0_d2f4 = load i32, i32* @r5, align 4
  %v1_d2f8 = call i32 @function_11b6c(i32 %v0_d2f4)
  %v0_d2fc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d2fc, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d2e4
  %v2_d2fc = load i32, i32* @ip, align 4
  %v5_d2fc1 = udiv i32 %v2_d2fc, 32768
  %v6_d2fc = and i32 %v5_d2fc1, 2
  store i32 %v6_d2fc, i32* @fp, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d2e4, %bb14
  ret i32 %v1_d2f8

; uselistorder directives
  uselistorder i32 %v3_d2d4, { 1, 2, 0 }
  uselistorder i32 %v3_d278, { 1, 2, 0 }
  uselistorder i32 %storemerge5, { 1, 0 }
  uselistorder i32 %v0_d21c, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10a6c, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_d300(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_d300:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d300 = load i32, i32* @r4, align 4
  store i32 %v3_d300, i32* %stack_var_-36, align 4
  %v6_d300 = load i32, i32* @r5, align 4
  %v9_d300 = load i32, i32* @r6, align 4
  %v15_d300 = load i32, i32* @r8, align 4
  %v2_d30c = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_d30c, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_d30c, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_d324 = call i32 @function_112ec(i32 %v2_d30c)
  store i32 %v2_d30c, i32* @r0, align 4
  %v2_d330 = call i32 @function_112bc(i32 %v2_d30c, i32 2)
  %v0_d334 = load i32, i32* @r5, align 4
  store i32 %v0_d334, i32* %r2.global-to-local, align 4
  %v3_d340 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_d340 = call i32 @function_10c38(i32 %v0_d334, %_TYPEDEF_sigset_t* %v3_d340, i32 %v0_d334)
  %v2_d34c = call i32 @function_11304(i32 17, i32 1)
  %v2_d358 = call i32 @function_11304(i32 5, i32 ptrtoint (i32* @global_var_d03c.84 to i32))
  %v0_d35c = call i32 @function_103f4()
  store i32 %v0_d35c, i32* @global_var_1b860.47, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1b86b.74 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1b868.71 to i8*), align 4
  store i32 1494907824, i32* @global_var_1b86c.73, align 4
  %v0_d384 = load i32, i32* @r5, align 4
  %v1_d384 = trunc i32 %v0_d384 to i8
  store i8 %v1_d384, i8* bitcast (i32* @global_var_1b86a.75 to i8*), align 4
  store i8 %v1_d384, i8* bitcast (i32* @global_var_1b869.88 to i8*), align 4
  %v6_d38c = call i32 @function_fd1c(i32 %v0_d35c, i32 ptrtoint (i8** @global_var_1b868.71 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_d054.67 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_d054.67 to i32), i32* @global_var_1b650.69, align 4
  %v2_d3a0 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_d3a0, i32* @sb, align 4
  %v1_d3a4 = call i32 @function_d0a4(i32 %v6_d38c)
  %v1_d3a8 = call i32 @function_db10(i32 %v1_d3a4)
  store i32 %v2_d3a0, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d3b4 = call i32 @function_101dc()
  %v0_d3b8 = load i32, i32* @r6, align 4
  %v7_d3b8 = icmp eq i32 %v0_d3b8, 2
  br i1 %v7_d3b8, label %dec_label_pc_d4e4, label %dec_label_pc_d3c0

dec_label_pc_d3c0:                                ; preds = %dec_label_pc_d4e4, %dec_label_pc_d300, %dec_label_pc_d4f4
  %v0_d3c0 = call i32 @function_dab8()
  store i32 %v0_d3c0, i32* %r6.global-to-local, align 4
  %v0_d3c8 = load i32, i32* @r8, align 4
  %v1_d3c8 = inttoptr i32 %v0_d3c8 to i32*
  %v2_d3c8 = load i32, i32* %v1_d3c8, align 4
  %v1_d3cc = inttoptr i32 %v2_d3c8 to i8*
  %v2_d3cc = call i32 @function_1013c(i8* %v1_d3cc)
  %v0_d3d4 = load i32, i32* @r8, align 4
  %v1_d3d4 = inttoptr i32 %v0_d3d4 to i32*
  %v2_d3d4 = load i32, i32* %v1_d3d4, align 4
  %v1_d3d8 = inttoptr i32 %v2_d3d4 to i8*
  %v2_d3d8 = call i32 @function_1013c(i8* %v1_d3d8)
  %v1_d3dc = sub i32 20, %v2_d3cc
  store i32 %v2_d3d8, i32* @r5, align 4
  %v0_d3e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_d3e8 = call i32 @function_10744(i32 %v0_d3e4, i32 %v1_d3dc)
  %v1_d3f0 = load i32, i32* @r5, align 4
  %v2_d3f0 = add i32 %v1_d3f0, %v2_d3e8
  store i32 %v2_d3f0, i32* @r4, align 4
  %v2_d3f4 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_d3f4, i32* @r6, align 4
  %v2_d400 = call i32 @function_db6c(i32 %v2_d3f4, i32 %v2_d3f0)
  %v2_d404 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_d404, i32* %r2.global-to-local, align 4
  %v1_d408 = load i32, i32* @r4, align 4
  %v2_d408 = add i32 %v1_d408, %v2_d404
  store i32 %v2_d408, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_d414 = load i32, i32* @r8, align 4
  %v1_d414 = inttoptr i32 %v0_d414 to i32*
  %v2_d414 = load i32, i32* %v1_d414, align 4
  store i32 %v2_d414, i32* @r0, align 4
  %v3_d418 = add i32 %v2_d408, -72
  %v4_d418 = inttoptr i32 %v3_d418 to i8*
  store i8 0, i8* %v4_d418, align 1
  %v2_d41c = inttoptr i32 %v2_d414 to i8*
  %v3_d41c = call i32 @function_10164(i8* %v2_d41c, i32 %v2_d3f4)
  store i32 32, i32* @r1, align 4
  store i32 %v2_d3f4, i32* @r0, align 4
  %v0_d428 = call i32 @function_101dc()
  %v0_d42c = call i32 @function_dab8()
  store i32 %v0_d42c, i32* @r7, align 4
  %v0_d434 = load i32, i32* @r8, align 4
  %v1_d434 = inttoptr i32 %v0_d434 to i32*
  %v2_d434 = load i32, i32* %v1_d434, align 4
  %v1_d438 = inttoptr i32 %v2_d434 to i8*
  %v2_d438 = call i32 @function_1013c(i8* %v1_d438)
  %v0_d440 = load i32, i32* @r8, align 4
  %v1_d440 = inttoptr i32 %v0_d440 to i32*
  %v2_d440 = load i32, i32* %v1_d440, align 4
  %v1_d444 = inttoptr i32 %v2_d440 to i8*
  %v2_d444 = call i32 @function_1013c(i8* %v1_d444)
  %v1_d448 = sub i32 20, %v2_d438
  store i32 %v2_d444, i32* @r5, align 4
  %v0_d450 = load i32, i32* @r7, align 4
  %v2_d454 = call i32 @function_10744(i32 %v0_d450, i32 %v1_d448)
  %v1_d458 = load i32, i32* @r5, align 4
  %v2_d458 = add i32 %v1_d458, %v2_d454
  store i32 %v2_d458, i32* @r4, align 4
  %v2_d464 = call i32 @function_db6c(i32 %v2_d3f4, i32 %v2_d458)
  %v1_d46c = load i32, i32* @r4, align 4
  %v2_d46c = add i32 %v1_d46c, %v2_d404
  store i32 %v2_d46c, i32* @r3, align 4
  %v0_d470 = load i32, i32* @sl, align 4
  %v1_d470 = trunc i32 %v0_d470 to i8
  %v3_d470 = add i32 %v2_d46c, -72
  %v4_d470 = inttoptr i32 %v3_d470 to i8*
  store i8 %v1_d470, i8* %v4_d470, align 1
  %v2_d47c = call i32 @function_10b54(i32 15, i32 %v2_d3f4)
  %v1_d484 = call i32 @function_fc64(i32 1)
  %v3_d494 = call i32 @function_fb80(i32 1, i32* nonnull %stack_var_-44)
  %v3_d498 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d498, i32* %r2.global-to-local, align 4
  %v3_d4a4 = inttoptr i32 %v3_d494 to i32*
  %v4_d4a4 = call i32 @function_10cb8(i32 1, i32* %v3_d4a4, i32 %v3_d498)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d4b4 = call i32 @function_10cb8(i32 1, i32* nonnull @global_var_13078.92, i32 1)
  %v1_d4bc = call i32 @function_fbac(i32 1)
  %v1_d4c0 = call i32 @function_85e8(i32 %v1_d4bc)
  %v1_d4c4 = call i32 @function_cd30(i32 %v1_d4c0)
  %v1_d4c8 = call i32 @function_d214(i32 %v1_d4c4)
  %v0_d4cc = call i32 @function_109e8()
  %v1_d4d0 = load i32, i32* @sl, align 4
  %v7_d4d4 = icmp sgt i32 %v0_d4cc, %v1_d4d0
  br i1 %v7_d4d4, label %dec_label_pc_d4d8, label %dec_label_pc_d51c

dec_label_pc_d4d8:                                ; preds = %dec_label_pc_d3c0
  store i32 %v6_d300, i32* %r5.global-to-local, align 4
  store i32 %v9_d300, i32* %r6.global-to-local, align 4
  store i32 %v15_d300, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_d4e4:                                ; preds = %dec_label_pc_d300
  %v0_d4e4 = load i32, i32* @r8, align 4
  %v1_d4e4 = add i32 %v0_d4e4, 4
  %v2_d4e4 = inttoptr i32 %v1_d4e4 to i32*
  %v3_d4e4 = load i32, i32* %v2_d4e4, align 4
  %v1_d4e8 = inttoptr i32 %v3_d4e4 to i8*
  %v2_d4e8 = call i32 @function_1013c(i8* %v1_d4e8)
  %v8_d4f0 = icmp sgt i32 %v2_d4e8, 31
  br i1 %v8_d4f0, label %dec_label_pc_d3c0, label %dec_label_pc_d4f4

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d4e4
  %v0_d4f4 = load i32, i32* @r8, align 4
  %v1_d4f4 = add i32 %v0_d4f4, 4
  %v2_d4f4 = inttoptr i32 %v1_d4f4 to i32*
  %v3_d4f4 = load i32, i32* %v2_d4f4, align 4
  store i32 %v2_d3a0, i32* @r0, align 4
  %v2_d4fc = bitcast i32* %stack_var_-140 to i8*
  %v3_d4fc = call i32 @function_10164(i8* %v2_d4fc, i32 %v3_d4f4)
  %v0_d500 = load i32, i32* @r8, align 4
  %v1_d500 = add i32 %v0_d500, 4
  %v2_d500 = inttoptr i32 %v1_d500 to i32*
  %v3_d500 = load i32, i32* %v2_d500, align 4
  %v1_d508 = inttoptr i32 %v3_d500 to i8*
  %v2_d508 = call i32 @function_1013c(i8* %v1_d508)
  store i32 %v2_d508, i32* @r1, align 4
  store i32 %v3_d500, i32* @r0, align 4
  %v0_d514 = call i32 @function_101dc()
  br label %dec_label_pc_d3c0

dec_label_pc_d51c:                                ; preds = %dec_label_pc_d3c0
  %v1_d51c = call i32 @function_10c0c(i32 %v0_d4cc)
  %v0_d524 = load i32, i32* @sl, align 4
  %v1_d528 = call i32 @function_109bc(i32 %v0_d524)
  %v1_d530 = call i32 @function_109bc(i32 1)
  %v1_d538 = call i32 @function_109bc(i32 2)
  %v1_d53c = call i32 @function_85e8(i32 %v1_d538)
  %v1_d540 = call i32 @function_cd30(i32 %v1_d53c)
  %v1_d544 = call i32 @function_d214(i32 %v1_d540)
  %v1_d548 = call i32 @function_e42c(i32 %v1_d544)
  store i32 ptrtoint (i32* @global_var_1b64c.94 to i32), i32* @fp, align 4
  %v2_d558 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_d558, i32* @r6, align 4
  %v2_d55c = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_d55c, i32* @r7, align 4
  %v2_d634 = ptrtoint i32* %stack_var_-60 to i32
  %v2_d874 = ptrtoint i32* %stack_var_-52 to i32
  %v4_d888 = bitcast i8** %stack_var_-38 to i32*
  %v2_d9e4 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_d898 = ptrtoint i32* %stack_var_-48 to i32
  %v1_d93c = bitcast i32* %stack_var_-140 to i8*
  %v5_d904 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_d918 = sub i32 0, %v1_d51c
  br label %dec_label_pc_d560

dec_label_pc_d560:                                ; preds = %dec_label_pc_d560.backedge, %dec_label_pc_d51c
  %v2_d56845 = phi i32 [ %v2_d56845.pre, %dec_label_pc_d560.backedge ], [ %v2_d558, %dec_label_pc_d51c ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_d56847 = inttoptr i32 %v2_d56845 to i32*
  store i32 0, i32* %v4_d56847, align 4
  %v0_d56c48 = load i32, i32* %r3.global-to-local, align 4
  %v1_d56c49 = add i32 %v0_d56c48, 4
  store i32 %v1_d56c49, i32* %r3.global-to-local, align 4
  %v7_d57050 = icmp eq i32 %v1_d56c49, 128
  br i1 %v7_d57050, label %dec_label_pc_d578, label %dec_label_pc_d568.dec_label_pc_d568_crit_edge

dec_label_pc_d568.dec_label_pc_d568_crit_edge:    ; preds = %dec_label_pc_d560, %dec_label_pc_d568.dec_label_pc_d568_crit_edge
  %v1_d56c51 = phi i32 [ %v1_d56c, %dec_label_pc_d568.dec_label_pc_d568_crit_edge ], [ %v1_d56c49, %dec_label_pc_d560 ]
  %v0_d568.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_d568 = load i32, i32* @r6, align 4
  %v3_d568 = add i32 %v2_d568, %v1_d56c51
  %v4_d568 = inttoptr i32 %v3_d568 to i32*
  store i32 %v0_d568.pre, i32* %v4_d568, align 4
  %v0_d56c = load i32, i32* %r3.global-to-local, align 4
  %v1_d56c = add i32 %v0_d56c, 4
  store i32 %v1_d56c, i32* %r3.global-to-local, align 4
  %v7_d570 = icmp eq i32 %v1_d56c, 128
  br i1 %v7_d570, label %dec_label_pc_d578, label %dec_label_pc_d568.dec_label_pc_d568_crit_edge

dec_label_pc_d578:                                ; preds = %dec_label_pc_d568.dec_label_pc_d568_crit_edge, %dec_label_pc_d560
  %v0_d578 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_d578, i32* %r3.global-to-local, align 4
  store i32 %v0_d578, i32* @r4, align 4
  %v2_d58052 = load i32, i32* @r7, align 4
  %v3_d58053 = add i32 %v2_d58052, %v0_d578
  %v4_d58054 = inttoptr i32 %v3_d58053 to i32*
  store i32 %v0_d578, i32* %v4_d58054, align 4
  %v0_d58455 = load i32, i32* %r3.global-to-local, align 4
  %v1_d58456 = add i32 %v0_d58455, 4
  store i32 %v1_d58456, i32* %r3.global-to-local, align 4
  %v7_d58857 = icmp eq i32 %v1_d58456, 128
  br i1 %v7_d58857, label %dec_label_pc_d590, label %dec_label_pc_d580.dec_label_pc_d580_crit_edge

dec_label_pc_d580.dec_label_pc_d580_crit_edge:    ; preds = %dec_label_pc_d578, %dec_label_pc_d580.dec_label_pc_d580_crit_edge
  %v1_d58458 = phi i32 [ %v1_d584, %dec_label_pc_d580.dec_label_pc_d580_crit_edge ], [ %v1_d58456, %dec_label_pc_d578 ]
  %v0_d580.pre = load i32, i32* @r4, align 4
  %v2_d580 = load i32, i32* @r7, align 4
  %v3_d580 = add i32 %v2_d580, %v1_d58458
  %v4_d580 = inttoptr i32 %v3_d580 to i32*
  store i32 %v0_d580.pre, i32* %v4_d580, align 4
  %v0_d584 = load i32, i32* %r3.global-to-local, align 4
  %v1_d584 = add i32 %v0_d584, 4
  store i32 %v1_d584, i32* %r3.global-to-local, align 4
  %v7_d588 = icmp eq i32 %v1_d584, 128
  br i1 %v7_d588, label %dec_label_pc_d590, label %dec_label_pc_d580.dec_label_pc_d580_crit_edge

dec_label_pc_d590:                                ; preds = %dec_label_pc_d580.dec_label_pc_d580_crit_edge, %dec_label_pc_d578
  store i32 ptrtoint (i32* @global_var_1b648.77 to i32), i32* %r2.global-to-local, align 4
  %v2_d594 = load i32, i32* @global_var_1b648.77, align 4
  %v7_d598 = icmp eq i32 %v2_d594, -1
  br i1 %v7_d598, label %dec_label_pc_d5c4, label %dec_label_pc_d5a0

dec_label_pc_d5a0:                                ; preds = %dec_label_pc_d590
  %v3_d5a0 = udiv i32 %v2_d594, 32
  %v3_d5a4 = mul nuw nsw i32 %v3_d5a0, 4
  %v2_d5ac = add i32 %v3_d5a4, %v2_d404
  store i32 %v2_d5ac, i32* %r3.global-to-local, align 4
  %v1_d5b0 = add i32 %v2_d5ac, -360
  %v2_d5b0 = inttoptr i32 %v1_d5b0 to i32*
  %v3_d5b0 = load i32, i32* %v2_d5b0, align 4
  %v1_d5b4 = urem i32 %v2_d594, 32
  %v7_d5bc = shl i32 1, %v1_d5b4
  %v8_d5bc = or i32 %v3_d5b0, %v7_d5bc
  store i32 %v8_d5bc, i32* %r2.global-to-local, align 4
  store i32 %v8_d5bc, i32* %v2_d5b0, align 4
  br label %dec_label_pc_d5c4

dec_label_pc_d5c4:                                ; preds = %dec_label_pc_d590, %dec_label_pc_d5a0
  %v2_d5c4 = load i32, i32* @global_var_1b64c.94, align 4
  store i32 %v2_d5c4, i32* %r3.global-to-local, align 4
  %v7_d5c8 = icmp eq i32 %v2_d5c4, -1
  store i32 ptrtoint (i32* @global_var_1b64c.94 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_d5c8, label %dec_label_pc_d800, label %dec_label_pc_d5d4

dec_label_pc_d5d4:                                ; preds = %dec_label_pc_d800, %dec_label_pc_d5c4, %.thread
  store i32 ptrtoint (i8** @global_var_1b7d0.97 to i32), i32* %r2.global-to-local, align 4
  %v2_d5d8 = load i8, i8* bitcast (i8** @global_var_1b7d0.97 to i8*), align 4
  %v2_d5dc = icmp eq i8 %v2_d5d8, 0
  %v2_d71c = load i32, i32* @global_var_1b64c.94, align 4
  %v3_d720 = udiv i32 %v2_d71c, 32
  store i32 %v3_d720, i32* %r3.global-to-local, align 4
  br i1 %v2_d5dc, label %dec_label_pc_d71c, label %dec_label_pc_d5e4

dec_label_pc_d5e4:                                ; preds = %dec_label_pc_d5d4
  %v3_d5ec = mul nuw nsw i32 %v3_d720, 4
  %v2_d5f4 = add i32 %v3_d5ec, %v2_d404
  store i32 %v2_d5f4, i32* %r3.global-to-local, align 4
  %v1_d5f8 = add i32 %v2_d5f4, -488
  %v2_d5f8 = inttoptr i32 %v1_d5f8 to i32*
  %v3_d5f8 = load i32, i32* %v2_d5f8, align 4
  %v1_d5fc = urem i32 %v2_d71c, 32
  %v7_d604 = shl i32 1, %v1_d5fc
  %v8_d604 = or i32 %v3_d5f8, %v7_d604
  store i32 %v8_d604, i32* %r2.global-to-local, align 4
  store i32 %v8_d604, i32* %v2_d5f8, align 4
  br label %dec_label_pc_d60c

dec_label_pc_d60c:                                ; preds = %dec_label_pc_d71c, %dec_label_pc_d5e4
  %v2_d610 = load i32, i32* @global_var_1b648.77, align 4
  %v2_d614 = load i32, i32* @global_var_1b64c.94, align 4
  store i32 %v2_d614, i32* %r3.global-to-local, align 4
  %v5_d620 = icmp slt i32 %v2_d610, %v2_d614
  br i1 %v5_d620, label %bb, label %bb42

bb:                                               ; preds = %dec_label_pc_d60c
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_d60c, %bb
  %v0_d638 = phi i32 [ %v2_d610, %dec_label_pc_d60c ], [ %v2_d614, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_d638 = add i32 %v0_d638, 1
  store i32 %v2_d55c, i32* %r2.global-to-local, align 4
  %v5_d64c = call i32 @function_10bdc(i32 %v1_d638, i32 %v2_d558, i32 %v2_d55c, i32 0, i32 %v2_d634)
  %v8_d650 = icmp eq i32 %v5_d64c, -1
  store i32 %v5_d64c, i32* %r3.global-to-local, align 4
  br i1 %v8_d650, label %dec_label_pc_d560.backedge, label %dec_label_pc_d65c

dec_label_pc_d65c:                                ; preds = %bb42
  %v6_d64c = trunc i32 %v5_d64c to i8
  %v3_d65c = icmp eq i8 %v6_d64c, 0
  br i1 %v3_d65c, label %dec_label_pc_d664, label %dec_label_pc_d684

dec_label_pc_d664:                                ; preds = %dec_label_pc_d65c
  %v0_d664 = load i32, i32* @sl, align 4
  %v6_d670 = inttoptr i32 %v5_d64c to i8*
  store i8* %v6_d670, i8** %stack_var_-38, align 4
  %v2_d674 = call i32 @function_10810(i32 %v0_d664, i32 6)
  %v2_d678 = icmp eq i32 %v2_d674, 0
  %v0_d67c = load i32, i32* @sl, align 4
  %v1_d67c = add i32 %v0_d67c, 1
  store i32 %v1_d67c, i32* @sl, align 4
  br i1 %v2_d678, label %dec_label_pc_d870, label %dec_label_pc_d684

dec_label_pc_d684:                                ; preds = %dec_label_pc_d65c, %dec_label_pc_d664, %dec_label_pc_d870
  store i32 ptrtoint (i32* @global_var_1b648.77 to i32), i32* %r2.global-to-local, align 4
  %v2_d688 = load i32, i32* @global_var_1b648.77, align 4
  %v7_d68c = icmp eq i32 %v2_d688, -1
  br i1 %v7_d68c, label %dec_label_pc_d6b8, label %dec_label_pc_d694

dec_label_pc_d694:                                ; preds = %dec_label_pc_d684
  %v3_d694 = udiv i32 %v2_d688, 32
  %v3_d698 = mul nuw nsw i32 %v3_d694, 4
  %v2_d6a0 = add i32 %v3_d698, %v2_d404
  store i32 %v2_d6a0, i32* %r3.global-to-local, align 4
  %v1_d6a4 = add i32 %v2_d6a0, -360
  %v2_d6a4 = inttoptr i32 %v1_d6a4 to i32*
  %v3_d6a4 = load i32, i32* %v2_d6a4, align 4
  %v1_d6a8 = urem i32 %v2_d688, 32
  %v6_d6ac = lshr i32 %v3_d6a4, %v1_d6a8
  store i32 %v6_d6ac, i32* %r2.global-to-local, align 4
  %v1_d6b0 = urem i32 %v6_d6ac, 2
  %v2_d6b0 = icmp eq i32 %v1_d6b0, 0
  br i1 %v2_d6b0, label %dec_label_pc_d6b8, label %dec_label_pc_d8ec

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d694, %dec_label_pc_d684
  store i32 ptrtoint (i8** @global_var_1b7d0.97 to i32), i32* %r3.global-to-local, align 4
  %v2_d6bc = load i8, i8* bitcast (i8** @global_var_1b7d0.97 to i8*), align 4
  %v3_d6bc = zext i8 %v2_d6bc to i32
  store i32 %v3_d6bc, i32* @r4, align 4
  %v2_d6c0 = icmp eq i8 %v2_d6bc, 0
  %v2_d748 = load i32, i32* @global_var_1b64c.94, align 4
  br i1 %v2_d6c0, label %dec_label_pc_d748, label %dec_label_pc_d6c8

dec_label_pc_d6c8:                                ; preds = %dec_label_pc_d6b8
  %v3_d6cc = udiv i32 %v2_d748, 32
  %v3_d6d4 = mul nuw nsw i32 %v3_d6cc, 4
  %v2_d6d8 = add i32 %v3_d6d4, %v2_d404
  store i32 %v2_d6d8, i32* %r3.global-to-local, align 4
  %v1_d6dc = add i32 %v2_d6d8, -488
  %v2_d6dc = inttoptr i32 %v1_d6dc to i32*
  %v3_d6dc = load i32, i32* %v2_d6dc, align 4
  %v1_d6e0 = urem i32 %v2_d748, 32
  %v6_d6e4 = lshr i32 %v3_d6dc, %v1_d6e0
  store i32 %v6_d6e4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b7d0.97 to i32), i32* %r3.global-to-local, align 4
  %v1_d6f0 = urem i32 %v6_d6e4, 2
  %v2_d6f0 = icmp eq i32 %v1_d6f0, 0
  store i8 0, i8* bitcast (i8** @global_var_1b7d0.97 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1b64c.94 to i32), i32* @r5, align 4
  br i1 %v2_d6f0, label %dec_label_pc_d700, label %dec_label_pc_d890

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6c8
  store i32 55048, i32* @lr, align 4
  %v1_d704 = icmp ne i32 %v2_d748, -1
  call void @__pseudo_cond_branch(i1 %v1_d704, i32 ptrtoint (i32* @global_var_109bc.98 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d70c = load i32, i32* @r5, align 4
  %v2_d70c = inttoptr i32 %v1_d70c to i32*
  store i32 -1, i32* %v2_d70c, align 4
  %v1_d714 = call i32 @function_11c00(i32 1)
  br label %dec_label_pc_d560.backedge

dec_label_pc_d560.backedge:                       ; preds = %dec_label_pc_d700, %dec_label_pc_d7ec, %dec_label_pc_d8c4, %dec_label_pc_d988, %dec_label_pc_d9ac, %dec_label_pc_da60, %dec_label_pc_da6c, %bb42, %dec_label_pc_d748, %dec_label_pc_d758, %dec_label_pc_d938, %bb44, %dec_label_pc_da0c, %dec_label_pc_d99c
  %v2_d56845.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d560

dec_label_pc_d71c:                                ; preds = %dec_label_pc_d5d4
  store i32 %v2_d404, i32* %r2.global-to-local, align 4
  %v3_d728 = mul nuw nsw i32 %v3_d720, 4
  %v2_d72c = add i32 %v3_d728, %v2_d404
  store i32 %v2_d72c, i32* %r3.global-to-local, align 4
  %v1_d730 = add i32 %v2_d72c, -360
  %v2_d730 = inttoptr i32 %v1_d730 to i32*
  %v3_d730 = load i32, i32* %v2_d730, align 4
  %v1_d734 = urem i32 %v2_d71c, 32
  %v7_d73c = shl i32 1, %v1_d734
  %v8_d73c = or i32 %v3_d730, %v7_d73c
  store i32 %v8_d73c, i32* %r2.global-to-local, align 4
  store i32 %v8_d73c, i32* %v2_d730, align 4
  br label %dec_label_pc_d60c

dec_label_pc_d748:                                ; preds = %dec_label_pc_d6b8
  %v7_d74c = icmp eq i32 %v2_d748, -1
  store i32 ptrtoint (i32* @global_var_1b64c.94 to i32), i32* @r5, align 4
  br i1 %v7_d74c, label %dec_label_pc_d560.backedge, label %dec_label_pc_d758

dec_label_pc_d758:                                ; preds = %dec_label_pc_d748
  %v3_d758 = udiv i32 %v2_d748, 32
  %v3_d75c = mul nuw nsw i32 %v3_d758, 4
  %v2_d764 = add i32 %v3_d75c, %v2_d404
  store i32 %v2_d764, i32* %r3.global-to-local, align 4
  %v1_d768 = add i32 %v2_d764, -360
  %v2_d768 = inttoptr i32 %v1_d768 to i32*
  %v3_d768 = load i32, i32* %v2_d768, align 4
  %v1_d76c = urem i32 %v2_d748, 32
  %v6_d770 = lshr i32 %v3_d768, %v1_d76c
  store i32 %v6_d770, i32* %r2.global-to-local, align 4
  %v1_d774 = urem i32 %v6_d770, 2
  %v2_d774 = icmp eq i32 %v1_d774, 0
  br i1 %v2_d774, label %dec_label_pc_d560.backedge, label %dec_label_pc_d77c

dec_label_pc_d77c:                                ; preds = %dec_label_pc_d758
  %v6_d77c = inttoptr i32 %v3_d6bc to i8*
  store i8* %v6_d77c, i8** %stack_var_-38, align 4
  %v0_d784 = call i32 @function_10f64()
  %v0_d788 = load i32, i32* @r4, align 4
  %v2_d788 = inttoptr i32 %v0_d784 to i32*
  store i32 %v0_d788, i32* %v2_d788, align 4
  store i32 %v0_d784, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_d79c = load i32, i32* @global_var_1b64c.94, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_d7a8 = call i32 @function_111a0(i32 %v2_d79c, i32* %v4_d888, i32 2, i32 16386)
  %v7_d7ac = icmp eq i32 %v5_d7a8, -1
  br i1 %v7_d7ac, label %dec_label_pc_d99c, label %dec_label_pc_d7b4

dec_label_pc_d7b4:                                ; preds = %dec_label_pc_d77c
  %v2_d7b4 = icmp eq i32 %v5_d7a8, 0
  br i1 %v2_d7b4, label %dec_label_pc_d9ac, label %dec_label_pc_d7bc

dec_label_pc_d7bc:                                ; preds = %dec_label_pc_d7b4
  %v3_d7bc = load i8*, i8** %stack_var_-38, align 4
  %v4_d7bc = ptrtoint i8* %v3_d7bc to i32
  store i32 %v3_d6bc, i32* %r3.global-to-local, align 4
  %v4_d7c4 = mul nuw nsw i32 %v3_d6bc, 256
  %v5_d7c4 = or i32 %v4_d7bc, %v4_d7c4
  store i32 %v5_d7c4, i32* %r2.global-to-local, align 4
  %v7_d7c4 = icmp eq i32 %v5_d7c4, 0
  br i1 %v7_d7c4, label %dec_label_pc_da6c, label %dec_label_pc_d7cc

dec_label_pc_d7cc:                                ; preds = %dec_label_pc_d7bc
  %v1_d7cc = mul i32 %v4_d7bc, 256
  %v3_d7d0 = and i32 %v1_d7cc, 65280
  %v4_d7d4 = udiv i32 %v5_d7c4, 256
  %v5_d7d4 = or i32 %v3_d7d0, %v4_d7d4
  %v6_d7d4 = trunc i32 %v4_d7d4 to i8
  store i32 %v5_d7d4, i32* %r2.global-to-local, align 4
  %v4_d7d8 = udiv i32 %v5_d7c4, 65536
  store i32 %v4_d7d8, i32* %r3.global-to-local, align 4
  %v3_d7dc = icmp slt i8 %v6_d7d4, 0
  %v7_d7e4 = inttoptr i32 %v4_d7d4 to i8*
  store i8* %v7_d7e4, i8** %stack_var_-38, align 4
  br i1 %v3_d7dc, label %dec_label_pc_d7ec, label %dec_label_pc_d9dc

dec_label_pc_d7ec:                                ; preds = %dec_label_pc_d7cc
  %v2_d7ec = load i32, i32* @global_var_1b64c.94, align 4
  %v1_d7f0 = call i32 @function_109bc(i32 %v2_d7ec)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d7f8 = load i32, i32* @r5, align 4
  %v2_d7f8 = inttoptr i32 %v1_d7f8 to i32*
  store i32 -1, i32* %v2_d7f8, align 4
  br label %dec_label_pc_d560.backedge

dec_label_pc_d800:                                ; preds = %dec_label_pc_d5c4
  %v0_d808 = load i32, i32* @r4, align 4
  store i32 %v0_d808, i32* %r2.global-to-local, align 4
  %v3_d80c = call i32 @function_11290(i32 2, i32 1, i32 %v0_d808)
  %v7_d810 = icmp eq i32 %v3_d80c, -1
  store i32 %v3_d80c, i32* %r5.global-to-local, align 4
  %v1_d818 = load i32, i32* %r8.global-to-local, align 4
  %v2_d818 = inttoptr i32 %v1_d818 to i32*
  store i32 %v3_d80c, i32* %v2_d818, align 4
  br i1 %v7_d810, label %dec_label_pc_d5d4, label %dec_label_pc_d820

dec_label_pc_d820:                                ; preds = %dec_label_pc_d800
  %v0_d820 = load i32, i32* @r4, align 4
  store i32 %v0_d820, i32* @r2, align 4
  %v2_d828 = call i32 @function_108f8(i32 %v3_d80c, i32 3)
  %v1_d830 = or i32 %v2_d828, 2048
  store i32 %v1_d830, i32* @r2, align 4
  %v0_d834 = load i32, i32* %r5.global-to-local, align 4
  %v2_d838 = call i32 @function_108f8(i32 %v0_d834, i32 4)
  store i32 ptrtoint (i32* @global_var_1b650.69 to i32), i32* %r2.global-to-local, align 4
  %v2_d840 = load i32, i32* @global_var_1b650.69, align 4
  store i32 %v2_d840, i32* %r3.global-to-local, align 4
  %v2_d844 = icmp eq i32 %v2_d840, 0
  br i1 %v2_d844, label %.thread, label %bb43

bb43:                                             ; preds = %dec_label_pc_d820
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_103f4.99 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d820, %bb43
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_d858 = load i32, i32* @global_var_1b64c.94, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1b7d0.97 to i8*), align 4
  %v5_d868 = call i32 @function_110ec(i32 %v2_d858, %sockaddr* bitcast (i8** @global_var_1b868.71 to %sockaddr*), i32 16)
  br label %dec_label_pc_d5d4

dec_label_pc_d870:                                ; preds = %dec_label_pc_d664
  %v2_d878 = load i32, i32* @global_var_1b64c.94, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d888 = call i32 @function_11200(i32 %v2_d878, i32* nonnull %v4_d888, i32 2, i32 16384)
  br label %dec_label_pc_d684

dec_label_pc_d890:                                ; preds = %dec_label_pc_d6c8
  store i32 4, i32* @r4, align 4
  store i32 %v2_d898, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_d8b4 = call i32 @function_11144(i32 %v2_d748, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_d874)
  %v3_d8b8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d8b8, i32* %r3.global-to-local, align 4
  %v2_d8bc = icmp eq i32 %v3_d8b8, 0
  br i1 %v2_d8bc, label %dec_label_pc_d938, label %dec_label_pc_d8c4

dec_label_pc_d8c4:                                ; preds = %dec_label_pc_d890
  %v2_d8c4 = load i32, i32* @global_var_1b64c.94, align 4
  %v1_d8c8 = call i32 @function_109bc(i32 %v2_d8c4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d8d0 = load i32, i32* @r5, align 4
  %v2_d8d0 = inttoptr i32 %v1_d8d0 to i32*
  store i32 -1, i32* %v2_d8d0, align 4
  %v0_d8d4 = call i32 @function_dab8()
  %v2_d8dc = call i32 @function_10744(i32 %v0_d8d4, i32 10)
  %v1_d8e0 = add i32 %v2_d8dc, 1
  %v1_d8e4 = call i32 @function_11c00(i32 %v1_d8e0)
  br label %dec_label_pc_d560.backedge

dec_label_pc_d8ec:                                ; preds = %dec_label_pc_d694
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_d898, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_d904 = call i32 @function_11094(i32 %v2_d688, %sockaddr* %v5_d904, i32 %v2_d898, i32 16, i32 16)
  %v1_d908 = call i32 @function_e190(i32 %v6_d904)
  %v1_d90c = call i32 @function_c79c(i32 %v1_d908)
  store i32 %v1_d51c, i32* %r2.global-to-local, align 4
  %v2_d91c = call i32 @function_10abc(i32 %v1_d918, i32 9)
  store i32 ptrtoint (i32* @global_var_1b7cc.82 to i32), i32* %r3.global-to-local, align 4
  %v2_d924 = load i32, i32* @global_var_1b7cc.82, align 4
  %v2_d928 = icmp eq i32 %v2_d924, 0
  br i1 %v2_d928, label %dec_label_pc_d930, label %dec_label_pc_d9d0

dec_label_pc_d930:                                ; preds = %dec_label_pc_d8ec, %dec_label_pc_d9d0
  %v1_d934 = call i32 @function_11b6c(i32 0)
  br label %dec_label_pc_d938

dec_label_pc_d938:                                ; preds = %dec_label_pc_d890, %dec_label_pc_d930
  %v2_d93c = call i32 @function_1013c(i8* %v1_d93c)
  %sext = mul i32 %v2_d93c, 16777216
  %v1_d940 = sdiv i32 %sext, 16777216
  %v7_d940 = inttoptr i32 %v1_d940 to i8*
  store i8* %v7_d940, i8** %stack_var_-38, align 4
  %v0_d944 = call i32 @function_103f4()
  store i32 %v0_d944, i32* @global_var_1b860.47, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d958 = load i32, i32* @r4, align 4
  store i32 %v0_d958, i32* %r2.global-to-local, align 4
  %v0_d95c = load i32, i32* @r5, align 4
  %v1_d95c = inttoptr i32 %v0_d95c to i32*
  %v2_d95c = load i32, i32* %v1_d95c, align 4
  %v5_d960 = call i32 @function_11200(i32 %v2_d95c, i32* nonnull @global_var_1307c.102, i32 %v0_d958, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_d96c = load i32, i32* @r5, align 4
  %v1_d96c = inttoptr i32 %v0_d96c to i32*
  %v2_d96c = load i32, i32* %v1_d96c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d978 = call i32 @function_11200(i32 %v2_d96c, i32* %v4_d888, i32 1, i32 16384)
  %v3_d97c = load i8*, i8** %stack_var_-38, align 4
  %v4_d97c = ptrtoint i8* %v3_d97c to i32
  store i32 %v4_d97c, i32* %r2.global-to-local, align 4
  %v3_d980 = icmp eq i8* %v3_d97c, null
  br i1 %v3_d980, label %dec_label_pc_d560.backedge, label %dec_label_pc_d988

dec_label_pc_d988:                                ; preds = %dec_label_pc_d938
  %v0_d988 = load i32, i32* @r5, align 4
  %v1_d988 = inttoptr i32 %v0_d988 to i32*
  %v2_d988 = load i32, i32* %v1_d988, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_d994 = call i32 @function_11200(i32 %v2_d988, i32* nonnull %stack_var_-140, i32 %v4_d97c, i32 16384)
  br label %dec_label_pc_d560.backedge

dec_label_pc_d99c:                                ; preds = %dec_label_pc_d9dc, %dec_label_pc_d77c
  %v0_d99c = load i32, i32* @r8, align 4
  %v1_d99c = inttoptr i32 %v0_d99c to i32*
  %v2_d99c = load i32, i32* %v1_d99c, align 4
  store i32 %v2_d99c, i32* %r3.global-to-local, align 4
  %v7_d9a0 = icmp eq i32 %v2_d99c, 4
  br i1 %v7_d9a0, label %dec_label_pc_d560.backedge, label %bb44

bb44:                                             ; preds = %dec_label_pc_d99c
  %v8_d9a4 = icmp eq i32 %v2_d99c, 11
  br i1 %v8_d9a4, label %dec_label_pc_d560.backedge, label %dec_label_pc_d9ac

dec_label_pc_d9ac:                                ; preds = %dec_label_pc_da04, %bb44, %dec_label_pc_d7b4
  %v2_d9ac = load i32, i32* @global_var_1b64c.94, align 4
  store i32 55736, i32* @lr, align 4
  %v1_d9b4 = icmp ne i32 %v2_d9ac, -1
  call void @__pseudo_cond_branch(i1 %v1_d9b4, i32 ptrtoint (i32* @global_var_109bc.98 to i32))
  store i32 ptrtoint (i32* @global_var_1b64c.94 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1b64c.94, align 4
  %v1_d9c8 = call i32 @function_11c00(i32 1)
  br label %dec_label_pc_d560.backedge

dec_label_pc_d9d0:                                ; preds = %dec_label_pc_d8ec
  %v2_d9d4 = call i32 @function_10abc(i32 %v2_d924, i32 9)
  br label %dec_label_pc_d930

dec_label_pc_d9dc:                                ; preds = %dec_label_pc_d7cc
  %v0_d9dc = load i32, i32* @r4, align 4
  %v1_d9dc = load i32, i32* @r8, align 4
  %v2_d9dc = inttoptr i32 %v1_d9dc to i32*
  store i32 %v0_d9dc, i32* %v2_d9dc, align 4
  store i32 %v2_d9e4, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_d9f0 = load i32, i32* @global_var_1b64c.94, align 4
  %v9_d9f8 = call i32 @function_111a0(i32 %v2_d9f0, i32* nonnull %stack_var_-1548, i32 %v4_d7d4, i32 16386)
  %v7_d9fc = icmp eq i32 %v9_d9f8, -1
  br i1 %v7_d9fc, label %dec_label_pc_d99c, label %dec_label_pc_da04

dec_label_pc_da04:                                ; preds = %dec_label_pc_d9dc
  %v2_da04 = icmp eq i32 %v9_d9f8, 0
  br i1 %v2_da04, label %dec_label_pc_d9ac, label %dec_label_pc_da0c

dec_label_pc_da0c:                                ; preds = %dec_label_pc_da04
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_da1c = load i32, i32* @global_var_1b64c.94, align 4
  %v5_da20 = call i32 @function_111a0(i32 %v2_da1c, i32* nonnull %v4_d888, i32 2, i32 16384)
  %v3_da24 = load i8*, i8** %stack_var_-38, align 4
  %v4_da24 = ptrtoint i8* %v3_da24 to i32
  %v4_da28 = urem i32 %v4_d7d8, 256
  %v4_da2c = mul i32 %v4_da24, 256
  %v5_da2c = or i32 %v4_da2c, %v4_da28
  store i32 %v5_da2c, i32* @ip, align 4
  store i32 %v5_da2c, i32* %r2.global-to-local, align 4
  %v3_da34 = sdiv i32 %v4_da2c, 256
  store i32 %v3_da34, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_da40 = load i32, i32* @global_var_1b64c.94, align 4
  %v6_da48 = inttoptr i32 %v5_da2c to i8*
  store i8* %v6_da48, i8** %stack_var_-38, align 4
  %v8_da4c = call i32 @function_111a0(i32 %v2_da40, i32* nonnull %stack_var_-1548, i32 %v5_da2c, i32 16384)
  %v3_da50 = load i8*, i8** %stack_var_-38, align 4
  %v4_da50 = ptrtoint i8* %v3_da50 to i32
  store i32 %v4_da50, i32* %r2.global-to-local, align 4
  %v4_da54 = urem i32 %v3_da34, 256
  store i32 %v4_da54, i32* %r3.global-to-local, align 4
  %v6_da58 = mul nuw nsw i32 %v4_da54, 256
  %v7_da58 = or i32 %v4_da50, %v6_da58
  %v9_da58 = icmp eq i32 %v7_da58, 0
  br i1 %v9_da58, label %dec_label_pc_d560.backedge, label %dec_label_pc_da60

dec_label_pc_da60:                                ; preds = %dec_label_pc_da0c
  %v7_da64 = call i32 @function_830c(i32* nonnull %stack_var_-1548, i32 %v7_da58, i32 %v4_da50, i32 %v4_da54)
  br label %dec_label_pc_d560.backedge

dec_label_pc_da6c:                                ; preds = %dec_label_pc_d7bc
  %v2_da70 = load i32, i32* @global_var_1b64c.94, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_da80 = call i32 @function_111a0(i32 %v2_da70, i32* nonnull %v4_d888, i32 2, i32 16384)
  br label %dec_label_pc_d560.backedge

; uselistorder directives
  uselistorder i32 %v4_da54, { 2, 0, 1 }
  uselistorder i32 %v4_da50, { 1, 0, 2 }
  uselistorder i32 %v3_da34, { 1, 0 }
  uselistorder i32 %v5_da2c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_da2c, { 1, 0 }
  uselistorder i32 %v9_d9f8, { 1, 0 }
  uselistorder i32 %v3_d80c, { 3, 2, 1, 0 }
  uselistorder i32 %v4_d7d4, { 2, 3, 0, 1 }
  uselistorder i32 %v5_d7a8, { 1, 0 }
  uselistorder i32 %v2_d748, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_d688, { 3, 2, 1, 0 }
  uselistorder i32 %v5_d64c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_d594, { 2, 1, 0 }
  uselistorder i32 %v1_d584, { 1, 2, 0 }
  uselistorder i32 %v1_d56c, { 1, 2, 0 }
  uselistorder i32 %v2_d898, { 1, 0, 2 }
  uselistorder i32* %v4_d888, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_d55c, { 1, 0, 2 }
  uselistorder i32 %v2_d558, { 1, 0, 2 }
  uselistorder i32 %v2_d404, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder i32 %v2_d3f4, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_d30c, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @global_var_1b7cc.82, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i8* bitcast (i8** @global_var_1b7d0.97 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1b7d0.97, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1b7d0.97 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1b648.77, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1b64c.94, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_d214, { 1, 0 }
  uselistorder i32 (i32)* @function_cd30, { 1, 0 }
  uselistorder i32 (i32)* @function_85e8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_db6c, { 10, 9, 2, 8, 7, 6, 5, 4, 3, 0, 1 }
  uselistorder i32 (i32)* @function_d0a4, { 1, 0 }
  uselistorder i32* @global_var_1b650.69, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d054.67 to i32), { 0, 2, 1 }
  uselistorder i8** @global_var_1b868.71, { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_11304, { 1, 0 }
  uselistorder label %dec_label_pc_d938, { 1, 0 }
  uselistorder label %dec_label_pc_d930, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d560.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_d684, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_d5d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d5c4, { 1, 0 }
  uselistorder label %dec_label_pc_d580.dec_label_pc_d580_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_d568.dec_label_pc_d568_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_d3c0, { 2, 0, 1 }
}

define i32 @function_dab8() local_unnamed_addr {
dec_label_pc_dab8:
  %v2_dac4 = load i32, i32* @global_var_1b7d4.104, align 4
  %v2_dac8 = load i32, i32* @global_var_1b7e0.106, align 4
  store i32 ptrtoint (i32* @global_var_1b7d8.108 to i32), i32* @lr, align 4
  %v4_dad4 = mul i32 %v2_dac4, 2048
  %v5_dad4 = xor i32 %v4_dad4, %v2_dac4
  %v4_dad8 = udiv i32 %v2_dac8, 524288
  %v5_dad8 = xor i32 %v4_dad8, %v2_dac8
  %v2_dadc = load i32, i32* @global_var_1b7d8.108, align 4
  %v2_dae0 = load i32, i32* @global_var_1b7dc.110, align 4
  %v2_dae4 = xor i32 %v5_dad8, %v5_dad4
  %v4_dae8 = udiv i32 %v5_dad4, 256
  %v5_dae8 = xor i32 %v2_dae4, %v4_dae8
  store i32 %v2_dadc, i32* @global_var_1b7d4.104, align 4
  store i32 %v2_dae0, i32* @global_var_1b7d8.108, align 4
  store i32 %v2_dac8, i32* @global_var_1b7dc.110, align 4
  store i32 %v5_dae8, i32* @global_var_1b7e0.106, align 4
  ret i32 %v5_dae8

; uselistorder directives
  uselistorder i32 %v2_dac8, { 2, 1, 0 }
  uselistorder i32 %v2_dac4, { 1, 0 }
}

define i32 @function_db10(i32 %arg1) local_unnamed_addr {
dec_label_pc_db10:
  %stack_var_-12 = alloca i32, align 4
  %v3_db10 = load i32, i32* @r4, align 4
  store i32 %v3_db10, i32* %stack_var_-12, align 4
  %v2_db18 = call i32 @function_10c8c(i32* null)
  store i32 %v2_db18, i32* @global_var_1b7d4.104, align 4
  %v0_db24 = call i32 @function_10a14()
  store i32 %v0_db24, i32* @r4, align 4
  %v0_db2c = call i32 @function_10a40()
  %v0_db34 = load i32, i32* @r4, align 4
  %v2_db34 = xor i32 %v0_db34, %v0_db2c
  store i32 %v2_db34, i32* @r4, align 4
  store i32 %v2_db34, i32* @global_var_1b7d8.108, align 4
  %v1_db3c = call i32 @function_10f70(i32 %v0_db2c)
  %v2_db40 = load i32, i32* @global_var_1b7d8.108, align 4
  %v2_db4c = xor i32 %v2_db40, %v1_db3c
  store i32 %v2_db4c, i32* @global_var_1b7e0.106, align 4
  store i32 %v1_db3c, i32* @global_var_1b7dc.110, align 4
  %v2_db58 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_db58, i32* @r4, align 4
  ret i32 %v1_db3c

; uselistorder directives
  uselistorder i32 %v1_db3c, { 1, 2, 0 }
  uselistorder i32 %v0_db2c, { 1, 0 }
}

define i32 @function_db6c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_db6c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-59 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_db6c = load i32, i32* @r4, align 4
  store i32 %v3_db6c, i32* %stack_var_-36, align 4
  %v28_db6c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg2, i32* %fp.global-to-local, align 4
  %v2_db70 = icmp eq i32 %arg2, 0
  %v0_db78 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_db78, i32* %sb.global-to-local, align 4
  br i1 %v2_db70, label %dec_label_pc_dc04, label %dec_label_pc_db80

dec_label_pc_db80:                                ; preds = %dec_label_pc_db6c
  %v2_db80 = ptrtoint i32* %stack_var_-59 to i32
  store i32 %v2_db80, i32* @r0, align 4
  store i32 ptrtoint ([23 x i8]* @global_var_13084.116 to i32), i32* @r1, align 4
  store i32 23, i32* @r2, align 4
  %v4_db8c = call i32 @function_10fb0(i32 %v2_db80, i32 ptrtoint ([23 x i8]* @global_var_13084.116 to i32), i32 23)
  store i32 %v4_db8c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b7d4.104 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b7d8.108 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b7dc.110 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b7e0.106 to i32), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v1_dbd8 = bitcast i32* %stack_var_-59 to i8*
  br label %dec_label_pc_dba4

dec_label_pc_dba4:                                ; preds = %dec_label_pc_dba4.dec_label_pc_dba4_crit_edge, %dec_label_pc_db80
  %v1_dbc8 = phi i32 [ %v1_dbc8.pre, %dec_label_pc_dba4.dec_label_pc_dba4_crit_edge ], [ ptrtoint (i32* @global_var_1b7d4.104 to i32), %dec_label_pc_db80 ]
  %v2_dba4 = load i32, i32* @global_var_1b7e0.106, align 4
  store i32 %v2_dba4, i32* %r2.global-to-local, align 4
  %v2_dba8 = load i32, i32* @global_var_1b7d4.104, align 4
  %v4_dbac = udiv i32 %v2_dba4, 524288
  %v5_dbac = xor i32 %v4_dbac, %v2_dba4
  %v4_dbb0 = mul i32 %v2_dba8, 2048
  %v5_dbb0 = xor i32 %v4_dbb0, %v2_dba8
  %v2_dbb4 = xor i32 %v5_dbac, %v5_dbb0
  %v2_dbb8 = load i32, i32* @global_var_1b7d8.108, align 4
  %v2_dbbc = load i32, i32* @global_var_1b7dc.110, align 4
  store i32 %v2_dbbc, i32* %ip.global-to-local, align 4
  %v4_dbc0 = udiv i32 %v5_dbb0, 256
  %v5_dbc0 = xor i32 %v2_dbb4, %v4_dbc0
  store i32 %v5_dbc0, i32* %r4.global-to-local, align 4
  store i32 %v2_db80, i32* %r0.global-to-local, align 4
  %v2_dbc8 = inttoptr i32 %v1_dbc8 to i32*
  store i32 %v2_dbb8, i32* %v2_dbc8, align 4
  %v0_dbcc = load i32, i32* %ip.global-to-local, align 4
  %v1_dbcc = load i32, i32* %r8.global-to-local, align 4
  %v2_dbcc = inttoptr i32 %v1_dbcc to i32*
  store i32 %v0_dbcc, i32* %v2_dbcc, align 4
  %v0_dbd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_dbd0 = load i32, i32* %r7.global-to-local, align 4
  %v2_dbd0 = inttoptr i32 %v1_dbd0 to i32*
  store i32 %v0_dbd0, i32* %v2_dbd0, align 4
  %v0_dbd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_dbd4 = load i32, i32* %r6.global-to-local, align 4
  %v2_dbd4 = inttoptr i32 %v1_dbd4 to i32*
  store i32 %v0_dbd4, i32* %v2_dbd4, align 4
  %v2_dbd8 = call i32 @function_1013c(i8* %v1_dbd8)
  %v0_dbe0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_dbe0, i32* %r0.global-to-local, align 4
  %v2_dbe4 = call i32 @function_10744(i32 %v0_dbe0, i32 %v2_dbd8)
  %v2_dbec = add i32 %v2_dbe4, %v28_db6c
  store i32 %v2_dbec, i32* %r0.global-to-local, align 4
  %v1_dbf0 = add i32 %v2_dbec, -23
  %v2_dbf0 = inttoptr i32 %v1_dbf0 to i8*
  %v3_dbf0 = load i8, i8* %v2_dbf0, align 1
  %v2_dbf4 = load i32, i32* %r5.global-to-local, align 4
  %v3_dbf4 = load i32, i32* %sb.global-to-local, align 4
  %v4_dbf4 = add i32 %v3_dbf4, %v2_dbf4
  %v5_dbf4 = inttoptr i32 %v4_dbf4 to i8*
  store i8 %v3_dbf0, i8* %v5_dbf4, align 1
  %v0_dbf8 = load i32, i32* %r5.global-to-local, align 4
  %v1_dbf8 = add i32 %v0_dbf8, 1
  store i32 %v1_dbf8, i32* %r5.global-to-local, align 4
  %v1_dbfc = load i32, i32* %fp.global-to-local, align 4
  %v9_dbfc = icmp eq i32 %v1_dbf8, %v1_dbfc
  br i1 %v9_dbfc, label %dec_label_pc_dc04.loopexit, label %dec_label_pc_dba4.dec_label_pc_dba4_crit_edge

dec_label_pc_dba4.dec_label_pc_dba4_crit_edge:    ; preds = %dec_label_pc_dba4
  %v1_dbc8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_dba4

dec_label_pc_dc04.loopexit:                       ; preds = %dec_label_pc_dba4
  %v2_dc08.pre = load i32, i32* %stack_var_-36, align 4
  %v29_dc08.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dc04

dec_label_pc_dc04:                                ; preds = %dec_label_pc_dc04.loopexit, %dec_label_pc_db6c
  %v29_dc08 = phi i32 [ %v29_dc08.pre, %dec_label_pc_dc04.loopexit ], [ %v0_db78, %dec_label_pc_db6c ]
  %v2_dc08 = phi i32 [ %v2_dc08.pre, %dec_label_pc_dc04.loopexit ], [ %v3_db6c, %dec_label_pc_db6c ]
  store i32 %v2_dc08, i32* @r4, align 4
  ret i32 %v29_dc08

; uselistorder directives
  uselistorder i32 %v2_dba8, { 1, 0 }
  uselistorder i32 %v2_dba4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32* @global_var_1b7e0.106, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1b7dc.110, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1b7d8.108, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1b7d4.104, { 2, 4, 1, 0, 3 }
}

define i32 @function_dc20(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_dc20:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_dc20 = load i32, i32* @r4, align 4
  store i32 %v3_dc20, i32* %stack_var_-8, align 4
  %v6_dc20 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_dc24 = icmp eq i32 %arg1, 0
  br i1 %v2_dc24, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_dc20
  store i32 %v3_dc20, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_dc20
  %v1_dc2c = add i32 %arg1, 4
  %v2_dc2c = inttoptr i32 %v1_dc2c to i32*
  %v3_dc2c = load i32, i32* %v2_dc2c, align 4
  %v1_dc34 = icmp ne i32 %v3_dc2c, 0
  call void @__pseudo_cond_branch(i1 %v1_dc34, i32 ptrtoint (i32* @global_var_115d4.20 to i32))
  %v0_dc38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_dc38, i32* @r0, align 4
  %v2_dc3c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_dc3c, i32* @r4, align 4
  store i32 %v6_dc20, i32* @lr, align 4
  %v0_dc40 = call i32 @function_115d4()
  ret i32 %v0_dc40
}

define i32 @function_dc44(i8* %arg1) local_unnamed_addr {
dec_label_pc_dc44:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_dc44 = load i32, i32* @r4, align 4
  store i32 %v3_dc44, i32* %stack_var_-36, align 4
  %v6_dc44 = load i32, i32* @r5, align 4
  %v9_dc44 = load i32, i32* @r6, align 4
  %v12_dc44 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_dc5c = call i32 @function_1157c(i32 1, i32 8)
  %v0_dc64 = load i32, i32* @r4, align 4
  %v1_dc64 = inttoptr i32 %v0_dc64 to i8*
  store i32 %v0_dc64, i32* %r0.global-to-local, align 4
  %v3_dc68 = call i32 @function_1013c(i8* %v1_dc64)
  %v2_dc70 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_dc70, i32* %fp.global-to-local, align 4
  %v2_dc74 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_dc78 = add i32 %v3_dc68, 1
  store i32 %v1_dc78, i32* %r0.global-to-local, align 4
  %v2_dc7c = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_dc7c, i32* %r2.global-to-local, align 4
  store i32 %v2_dc70, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_dcbc162 = icmp eq i32 %v1_dc78, 0
  store i1 %v2_dcbc162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_dcc4163 = or i32 %v2_dc7c, 1
  store i32 %v1_dcc4163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_dc78, 1
  br i1 %tmp124164, label %dec_label_pc_dccc, label %dec_label_pc_dc8c.lr.ph

dec_label_pc_dc8c.lr.ph:                          ; preds = %dec_label_pc_dc44
  %v0_dc8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dc8c

dec_label_pc_dc8c:                                ; preds = %dec_label_pc_dc8c.lr.ph, %.thread12
  %v1_dca0176.off0 = phi i8 [ 0, %dec_label_pc_dc8c.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_dc8c = phi i32 [ %v0_dc8c.pre, %dec_label_pc_dc8c.lr.ph ], [ %v1_dcb0, %.thread12 ]
  %v2_dcd0165 = phi i32 [ %v2_dc7c, %dec_label_pc_dc8c.lr.ph ], [ %v0_dcb8, %.thread12 ]
  %v1_dc8c = inttoptr i32 %v0_dc8c to i8*
  %v2_dc8c = load i8, i8* %v1_dc8c, align 1
  %v3_dc8c = zext i8 %v2_dc8c to i32
  store i32 %v3_dc8c, i32* %r3.global-to-local, align 4
  %v2_dc90 = icmp eq i8 %v2_dc8c, 0
  store i1 %v2_dc90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dc90, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_dc8c
  %v8_dc94 = icmp eq i8 %v2_dc8c, 46
  store i1 %v8_dc94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_dc94, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_dc98 = inttoptr i32 %v2_dcd0165 to i8*
  store i8 %v2_dc8c, i8* %v4_dc98, align 1
  %v5_dc98 = load i32, i32* %r2.global-to-local, align 4
  %v6_dc98 = add i32 %v5_dc98, 1
  store i32 %v6_dc98, i32* %r2.global-to-local, align 4
  %v0_dc9c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc9c.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_dca0.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_dca0.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_dc8c
  %v1_dca0.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_dca0176.off0, %bb ], [ %v1_dca0176.off0, %dec_label_pc_dc8c ]
  %v3_dca0 = load i32, i32* %r5.global-to-local, align 4
  %v4_dca0 = inttoptr i32 %v3_dca0 to i8*
  store i8 %v1_dca0.off0, i8* %v4_dca0, align 1
  %v0_dca4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dca4.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_dc98, i32* %r1.global-to-local, align 4
  %v1_dca4 = load i32, i32* %ip.global-to-local, align 4
  %v2_dca4 = urem i32 %v1_dca4, 256
  store i32 %v2_dca4, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_dca410 = load i32, i32* %ip.global-to-local, align 4
  %v2_dca411 = urem i32 %v1_dca410, 256
  store i32 %v2_dca411, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_dca8.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_dca8.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_dcc0.pre = phi i32 [ %v2_dca411, %..thread12_crit_edge ], [ %v2_dca4, %bb122 ], [ 0, %bb123 ]
  %v0_dcb0 = load i32, i32* @r4, align 4
  %v1_dcb0 = add i32 %v0_dcb0, 1
  store i32 %v1_dcb0, i32* @r4, align 4
  %v0_dcb4 = load i32, i32* %r0.global-to-local, align 4
  %v1_dcb4 = add i32 %v0_dcb4, -1
  store i32 %v1_dcb4, i32* %r0.global-to-local, align 4
  %v0_dcb8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_dcb8, i32* %r2.global-to-local, align 4
  %v2_dcbc = icmp eq i32 %v1_dcb4, 0
  store i1 %v2_dcbc, i1* %cpsr_z.global-to-local, align 1
  %v1_dcc0 = add nuw nsw i32 %v0_dcc0.pre, 1
  store i32 %v1_dcc0, i32* %ip.global-to-local, align 4
  %v1_dcc4 = add i32 %v0_dcb8, 1
  store i32 %v1_dcc4, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_dcb4, 1
  %extract.t179 = trunc i32 %v0_dcc0.pre to i8
  br i1 %tmp124, label %dec_label_pc_dccc, label %dec_label_pc_dc8c

dec_label_pc_dccc:                                ; preds = %.thread12, %dec_label_pc_dc44
  %v2_dcd0.lcssa = phi i32 [ %v2_dc7c, %dec_label_pc_dc44 ], [ %v0_dcb8, %.thread12 ]
  %v3_dc5c = inttoptr i32 %v2_dc5c to i8*
  store i32 0, i32* @r4, align 4
  %v3_dcd0 = inttoptr i32 %v2_dcd0.lcssa to i8*
  store i8 0, i8* %v3_dcd0, align 1
  store i32 %v2_dc70, i32* %r0.global-to-local, align 4
  %v1_dcd8 = bitcast i32* %stack_var_-2228 to i8*
  %v2_dcd8 = call i32 @function_1013c(i8* %v1_dcd8)
  %v2_dcdc = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_dcdc, i32* %r1.global-to-local, align 4
  %v0_dce0 = load i32, i32* %fp.global-to-local, align 4
  %v2_dce0 = add i32 %v0_dce0, %v2_dcd8
  store i32 %v2_dce0, i32* @r5, align 4
  %v0_dce4 = load i32, i32* @r4, align 4
  store i32 %v0_dce4, i32* %stack_var_-64, align 4
  store i32 %v2_dc70, i32* %r0.global-to-local, align 4
  %v2_dcf8 = call i32 @function_1013c(i8* %v1_dcd8)
  %v1_dcfc = add i32 %v2_dcf8, 17
  store i32 %v1_dcfc, i32* %r0.global-to-local, align 4
  %v0_dd04 = call i32 @function_dab8()
  store i32 %v0_dd04, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_dd10 = call i32 @function_10744(i32 %v0_dd04, i32 65535)
  store i32 16, i32* @r1, align 4
  %v6_dd1c = urem i32 %v2_dd10, 65536
  store i32 %v6_dd1c, i32* %r3.global-to-local, align 4
  %v2_dd24 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_dd24, i32* @r0, align 4
  %v0_dd2c = call i32 @function_101dc()
  %sext = mul i32 %v2_dd10, 16777216
  %v4_dd30 = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_dcdc, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_dd30, i32* %lr.global-to-local, align 4
  %v0_dd78 = load i32, i32* @r5, align 4
  %v2_dd78 = add i32 %v0_dd78, 1
  store i32 %v2_dd78, i32* %ip.global-to-local, align 4
  %v2_dd7c = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_dd7c, i32* %r1.global-to-local, align 4
  %v5_dd80 = trunc i32 %v4_dd30 to i8
  store i8 %v5_dd80, i8* %stack_var_-2240, align 1
  %v0_dd98 = load i32, i32* @r4, align 4
  %v1_dd98 = trunc i32 %v0_dd98 to i8
  %v4_dd98 = inttoptr i32 %v2_dd78 to i8*
  store i8 %v1_dd98, i8* %v4_dd98, align 1
  %v0_dd9c = load i32, i32* @r4, align 4
  %v1_dd9c = trunc i32 %v0_dd9c to i8
  %v2_dd9c = load i32, i32* %ip.global-to-local, align 4
  %v3_dd9c = add i32 %v2_dd9c, 2
  %v4_dd9c = inttoptr i32 %v3_dd9c to i8*
  store i8 %v1_dd9c, i8* %v4_dd9c, align 1
  %v0_dda0 = load i32, i32* %r0.global-to-local, align 4
  %v1_dda0 = trunc i32 %v0_dda0 to i8
  %v2_dda0 = load i32, i32* %ip.global-to-local, align 4
  %v3_dda0 = add i32 %v2_dda0, 3
  %v4_dda0 = inttoptr i32 %v3_dda0 to i8*
  store i8 %v1_dda0, i8* %v4_dda0, align 1
  %v0_dda4 = load i32, i32* %r0.global-to-local, align 4
  %v1_dda4 = trunc i32 %v0_dda4 to i8
  %v2_dda4 = load i32, i32* %ip.global-to-local, align 4
  %v3_dda4 = add i32 %v2_dda4, 1
  %v4_dda4 = inttoptr i32 %v3_dda4 to i8*
  store i8 %v1_dda4, i8* %v4_dda4, align 1
  %v0_ddac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ddac, i32* %sl.global-to-local, align 4
  %v2_ddb4 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_ddb4, i32* @r6, align 4
  %v3_ddec = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_de08 = bitcast i8* %stack_var_-2240 to i32*
  %v2_de58 = ptrtoint i32* %stack_var_-36 to i32
  %v2_de84 = ptrtoint i32* %stack_var_-48 to i32
  %v6_dee0 = bitcast i8* %stack_var_-4288 to i32*
  %v1_df5c = add i32 %v2_dd7c, 12
  %v1_df64 = inttoptr i32 %v1_df5c to i8*
  %v1_df78 = add i32 %v2_dd7c, 1
  %v2_df78 = inttoptr i32 %v1_df78 to i8*
  %v1_df94 = add i32 %v2_dd7c, 6
  %v2_df94 = inttoptr i32 %v1_df94 to i8*
  %v1_df98 = add i32 %v2_dd7c, 7
  %v2_df98 = inttoptr i32 %v1_df98 to i8*
  br label %dec_label_pc_ddb8

dec_label_pc_ddb8:                                ; preds = %dec_label_pc_df0c, %dec_label_pc_dccc
  %v1_ddbc = phi i32 [ %v0_ddb8.pre, %dec_label_pc_df0c ], [ -1, %dec_label_pc_dccc ]
  %v7_ddb8 = icmp eq i32 %v1_ddbc, -1
  store i1 %v7_ddb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ddb8, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ddb8
  store i32 %v1_ddbc, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_ddb8, %bb125
  store i32 56772, i32* @lr, align 4
  %v1_ddc0 = xor i1 %v7_ddb8, true
  call void @__pseudo_cond_branch(i1 %v1_ddc0, i32 ptrtoint (i32* @global_var_109bc.98 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ddd0 = call i32 @function_11290(i32 2, i32 2, i32 0)
  store i32 %v3_ddd0, i32* %r0.global-to-local, align 4
  %v7_ddd4 = icmp eq i32 %v3_ddd0, -1
  store i1 %v7_ddd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ddd0, i32* @r7, align 4
  br i1 %v7_ddd4, label %dec_label_pc_df4c, label %dec_label_pc_dde0

dec_label_pc_dde0:                                ; preds = %bb126
  store i32 %v2_dd24, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_ddec = call i32 @function_110ec(i32 %v3_ddd0, %sockaddr* %v3_ddec, i32 16)
  store i32 %v4_ddec, i32* %r0.global-to-local, align 4
  %v7_ddf0 = icmp eq i32 %v4_ddec, -1
  store i1 %v7_ddf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ddf0, label %dec_label_pc_df14, label %dec_label_pc_ddf8

dec_label_pc_ddf8:                                ; preds = %dec_label_pc_dde0
  %v0_ddf8 = load i32, i32* @r7, align 4
  store i32 %v0_ddf8, i32* %r0.global-to-local, align 4
  store i32 %v2_dc74, i32* %r1.global-to-local, align 4
  store i32 %v1_dcfc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_de08 = call i32 @function_11200(i32 %v0_ddf8, i32* %v4_de08, i32 %v1_dcfc, i32 16384)
  store i32 %v5_de08, i32* %r0.global-to-local, align 4
  %v7_de0c = icmp eq i32 %v5_de08, -1
  store i1 %v7_de0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de0c, label %dec_label_pc_df14, label %dec_label_pc_de14

dec_label_pc_de14:                                ; preds = %dec_label_pc_ddf8
  %v0_de14 = load i32, i32* @r7, align 4
  store i32 %v0_de14, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_de20 = call i32 @function_108f8(i32 3, i32 %v0_de14)
  store i32 0, i32* @r4, align 4
  %v1_de28 = or i32 %v2_de20, 2048
  store i32 %v1_de28, i32* @r2, align 4
  %v0_de2c = load i32, i32* @r7, align 4
  store i32 %v0_de2c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_de34 = call i32 @function_108f8(i32 4, i32 %v0_de2c)
  store i32 %v2_de34, i32* %r0.global-to-local, align 4
  %v0_de38 = load i32, i32* @r4, align 4
  store i32 %v0_de38, i32* %r3.global-to-local, align 4
  %v2_de3c154 = load i32, i32* @r6, align 4
  %v3_de3c155 = add i32 %v2_de3c154, %v0_de38
  %v4_de3c156 = inttoptr i32 %v3_de3c155 to i32*
  store i32 %v0_de38, i32* %v4_de3c156, align 4
  %v0_de40157 = load i32, i32* %r3.global-to-local, align 4
  %v1_de40158 = add i32 %v0_de40157, 4
  store i32 %v1_de40158, i32* %r3.global-to-local, align 4
  %v7_de44159 = icmp eq i32 %v1_de40158, 128
  br i1 %v7_de44159, label %dec_label_pc_de4c, label %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge

dec_label_pc_de3c.dec_label_pc_de3c_crit_edge:    ; preds = %dec_label_pc_de14, %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge
  %v1_de40160 = phi i32 [ %v1_de40, %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge ], [ %v1_de40158, %dec_label_pc_de14 ]
  %v0_de3c.pre = load i32, i32* @r4, align 4
  %v2_de3c = load i32, i32* @r6, align 4
  %v3_de3c = add i32 %v2_de3c, %v1_de40160
  %v4_de3c = inttoptr i32 %v3_de3c to i32*
  store i32 %v0_de3c.pre, i32* %v4_de3c, align 4
  %v0_de40 = load i32, i32* %r3.global-to-local, align 4
  %v1_de40 = add i32 %v0_de40, 4
  store i32 %v1_de40, i32* %r3.global-to-local, align 4
  %v7_de44 = icmp eq i32 %v1_de40, 128
  br i1 %v7_de44, label %dec_label_pc_de4c, label %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge

dec_label_pc_de4c:                                ; preds = %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge, %dec_label_pc_de14
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_de4c = load i32, i32* @r7, align 4
  %v3_de4c = udiv i32 %v0_de4c, 32
  %v3_de54 = mul nuw nsw i32 %v3_de4c, 4
  store i32 %v3_de54, i32* %r3.global-to-local, align 4
  store i32 %v2_de58, i32* %r2.global-to-local, align 4
  %v2_de5c = add i32 %v3_de54, %v2_de58
  store i32 %v2_de5c, i32* @r5, align 4
  %v1_de60 = add i32 %v2_de5c, -156
  %v2_de60 = inttoptr i32 %v1_de60 to i32*
  %v3_de60 = load i32, i32* %v2_de60, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_de68 = urem i32 %v0_de4c, 32
  store i32 %v1_de68, i32* @r8, align 4
  %v7_de6c = shl i32 1, %v1_de68
  %v8_de6c = or i32 %v3_de60, %v7_de6c
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_de6c, i32* %v2_de60, align 4
  %v0_de7c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_de7c, i32* %stack_var_-48, align 4
  store i32 %v2_de84, i32* @lr, align 4
  store i32 %v2_dcdc, i32* %ip.global-to-local, align 4
  %v0_de8c = load i32, i32* @r7, align 4
  %v1_de8c = load i32, i32* %r3.global-to-local, align 4
  %v2_de8c = add i32 %v1_de8c, %v0_de8c
  store i32 %v2_de8c, i32* %r0.global-to-local, align 4
  store i32 %v2_ddb4, i32* %r1.global-to-local, align 4
  %v0_de98 = load i32, i32* @r4, align 4
  store i32 %v0_de98, i32* %r2.global-to-local, align 4
  store i32 %v0_de98, i32* %r3.global-to-local, align 4
  %v5_dea4 = call i32 @function_10bdc(i32 %v2_de8c, i32 %v2_ddb4, i32 %v0_de98, i32 %v0_de98, i32 %v2_de84)
  store i32 %v5_dea4, i32* %r0.global-to-local, align 4
  %v7_dea8 = icmp eq i32 %v5_dea4, -1
  store i1 %v7_dea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dea8, label %dec_label_pc_df24, label %dec_label_pc_deb0

dec_label_pc_deb0:                                ; preds = %dec_label_pc_de4c
  %v2_deb0 = icmp eq i32 %v5_dea4, 0
  store i1 %v2_deb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_deb0, label %dec_label_pc_df04, label %dec_label_pc_deb8

dec_label_pc_deb8:                                ; preds = %dec_label_pc_deb0
  %v0_deb8 = load i32, i32* @r5, align 4
  %v1_deb8 = add i32 %v0_deb8, -156
  %v2_deb8 = inttoptr i32 %v1_deb8 to i32*
  %v3_deb8 = load i32, i32* %v2_deb8, align 4
  %v1_debc = load i32, i32* @r8, align 4
  %v6_debc = ashr i32 %v3_deb8, %v1_debc
  store i32 %v6_debc, i32* %r3.global-to-local, align 4
  %v1_dec0 = urem i32 %v6_debc, 2
  %v2_dec0 = icmp eq i32 %v1_dec0, 0
  store i1 %v2_dec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dec0, label %dec_label_pc_df24, label %dec_label_pc_dec8

dec_label_pc_dec8:                                ; preds = %dec_label_pc_deb8
  store i32 %v2_dd7c, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ded4 = load i32, i32* @r7, align 4
  store i32 %v0_ded4, i32* %r0.global-to-local, align 4
  %v0_ded8 = load i32, i32* @r4, align 4
  %v7_dee0 = call i32 @function_111cc(i32 %v0_ded4, i32* %v6_dee0, i32 2048, i32 16384, i32 %v0_ded8, i32 %v0_ded8)
  store i32 %v7_dee0, i32* %r4.global-to-local, align 4
  %v0_dee8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_dee8, i32* %r0.global-to-local, align 4
  %v1_deec = inttoptr i32 %v0_dee8 to i8*
  %v2_deec = call i32 @function_1013c(i8* %v1_deec)
  %v1_def0 = add i32 %v2_deec, 17
  store i32 %v1_def0, i32* %r0.global-to-local, align 4
  %v0_def4 = load i32, i32* %r4.global-to-local, align 4
  %v3_def4 = icmp ult i32 %v0_def4, %v1_def0
  %v9_def4 = icmp eq i32 %v0_def4, %v1_def0
  store i1 %v9_def4, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_def4, label %dec_label_pc_df04, label %dec_label_pc_df58

dec_label_pc_df04:                                ; preds = %dec_label_pc_dec8, %dec_label_pc_df58, %dec_label_pc_df94, %dec_label_pc_deb0, %dec_label_pc_df4c
  %v0_df04 = load i32, i32* %sl.global-to-local, align 4
  %v7_df04 = icmp eq i32 %v0_df04, 5
  store i1 %v7_df04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df04, label %dec_label_pc_df24, label %dec_label_pc_df0c

dec_label_pc_df0c:                                ; preds = %dec_label_pc_df14, %dec_label_pc_df04
  %v0_df0c = phi i32 [ %v0_df1c, %dec_label_pc_df14 ], [ %v0_df04, %dec_label_pc_df04 ]
  %v1_df0c = add i32 %v0_df0c, 1
  store i32 %v1_df0c, i32* %sl.global-to-local, align 4
  %v0_ddb8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ddb8

dec_label_pc_df14:                                ; preds = %dec_label_pc_ddf8, %dec_label_pc_dde0
  %v0_df14 = phi i32 [ %v5_de08, %dec_label_pc_ddf8 ], [ %v4_ddec, %dec_label_pc_dde0 ]
  %v1_df14 = add i32 %v0_df14, 2
  store i32 %v1_df14, i32* %r0.global-to-local, align 4
  %v1_df18 = call i32 @function_11c00(i32 %v1_df14)
  store i32 %v1_df18, i32* %r0.global-to-local, align 4
  %v0_df1c = load i32, i32* %sl.global-to-local, align 4
  %v7_df1c = icmp eq i32 %v0_df1c, 5
  store i1 %v7_df1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df1c, label %dec_label_pc_df24, label %dec_label_pc_df0c

dec_label_pc_df24:                                ; preds = %dec_label_pc_df14, %dec_label_pc_df04, %dec_label_pc_deb8, %dec_label_pc_de4c, %dec_label_pc_dfa4, %dec_label_pc_dfb0.backedge
  %v0_df24 = load i32, i32* @r7, align 4
  store i32 %v0_df24, i32* %r0.global-to-local, align 4
  %v1_df28 = call i32 @function_109bc(i32 %v0_df24)
  store i32 %v1_df28, i32* %r0.global-to-local, align 4
  store i32 %v2_dc5c, i32* %r2.global-to-local, align 4
  %v2_df30 = load i8, i8* %v3_dc5c, align 1
  %v3_df30 = zext i8 %v2_df30 to i32
  store i32 %v3_df30, i32* @r4, align 4
  %v2_df34 = icmp eq i8 %v2_df30, 0
  store i1 %v2_df34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_df34, label %dec_label_pc_e090, label %dec_label_pc_df3c

dec_label_pc_df3c:                                ; preds = %dec_label_pc_df24, %dec_label_pc_e090
  %stack_var_-4300.0 = phi i8* [ %v5_e0a4, %dec_label_pc_e090 ], [ %v3_dc5c, %dec_label_pc_df24 ]
  %v4_df3c = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_df3c, i32* %r0.global-to-local, align 4
  %v2_df48 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_df48, i32* @r4, align 4
  store i32 %v6_dc44, i32* @r5, align 4
  store i32 %v9_dc44, i32* @r6, align 4
  store i32 %v12_dc44, i32* @r7, align 4
  ret i32 %v4_df3c

dec_label_pc_df4c:                                ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_df50 = call i32 @function_11c00(i32 1)
  store i32 %v1_df50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_df04

dec_label_pc_df58:                                ; preds = %dec_label_pc_dec8
  store i32 %v2_dd7c, i32* %lr.global-to-local, align 4
  store i32 %v1_df5c, i32* %fp.global-to-local, align 4
  store i32 %v1_df5c, i32* %r0.global-to-local, align 4
  %v2_df64 = call i32 @function_1013c(i8* %v1_df64)
  store i32 %v2_df64, i32* %r0.global-to-local, align 4
  store i32 %v2_dd7c, i32* %ip.global-to-local, align 4
  store i32 %v2_de58, i32* %r1.global-to-local, align 4
  %v4_df74 = load i8, i8* %stack_var_-4288, align 1
  %v5_df74 = sext i8 %v4_df74 to i32
  store i32 %v5_df74, i32* %r3.global-to-local, align 4
  %v3_df78 = load i8, i8* %v2_df78, align 1
  %v4_df78 = zext i8 %v3_df78 to i32
  store i32 %v4_df78, i32* %r2.global-to-local, align 4
  store i32 %v4_dd30, i32* @lr, align 4
  %v4_df80 = mul nuw nsw i32 %v4_df78, 256
  %v5_df80 = or i32 %v4_df80, %v5_df74
  store i32 %v5_df80, i32* %r3.global-to-local, align 4
  %v0_df84 = load i32, i32* %fp.global-to-local, align 4
  %v9_df88 = icmp eq i32 %v5_df80, %v4_dd30
  store i1 %v9_df88, i1* %cpsr_z.global-to-local, align 1
  %v2_df84 = add i32 %v2_df64, 5
  %v1_df8c = add i32 %v2_df84, %v0_df84
  store i32 %v1_df8c, i32* %r0.global-to-local, align 4
  br i1 %v9_df88, label %dec_label_pc_df94, label %dec_label_pc_df04

dec_label_pc_df94:                                ; preds = %dec_label_pc_df58
  %v3_df94 = load i8, i8* %v2_df94, align 1
  %v4_df94 = zext i8 %v3_df94 to i32
  store i32 %v4_df94, i32* %r2.global-to-local, align 4
  %v3_df98 = load i8, i8* %v2_df98, align 1
  %v4_df98 = zext i8 %v3_df98 to i32
  store i32 %v4_df98, i32* %r3.global-to-local, align 4
  %v4_df9c = mul nuw nsw i32 %v4_df98, 256
  %v5_df9c = or i32 %v4_df9c, %v4_df94
  store i32 %v5_df9c, i32* %r2.global-to-local, align 4
  %v7_df9c = icmp eq i32 %v5_df9c, 0
  store i1 %v7_df9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df9c, label %dec_label_pc_df04, label %dec_label_pc_dfa4

dec_label_pc_dfa4:                                ; preds = %dec_label_pc_df94
  %v3_dfa8 = mul nuw nsw i32 %v4_df94, 256
  %v5_dfac = or i32 %v4_df98, %v3_dfa8
  %v1_e064 = add i32 %v2_dd7c, -49152
  %v1_dfb0143 = add nsw i32 %v5_dfac, -1
  %v3_dfb4144 = mul i32 %v1_dfb0143, 65536
  store i32 %v3_dfb4144, i32* %r3.global-to-local, align 4
  %v7_dfb8150 = icmp eq i32 %v3_dfb4144, -65536
  store i1 %v7_dfb8150, i1* %cpsr_z.global-to-local, align 1
  %v3_dfbc151 = urem i32 %v1_dfb0143, 65536
  store i32 %v3_dfbc151, i32* @r6, align 4
  br i1 %v7_dfb8150, label %dec_label_pc_df24, label %dec_label_pc_dfc4.lr.ph

dec_label_pc_dfc4.lr.ph:                          ; preds = %dec_label_pc_dfa4
  %v1_e140 = add i32 %v2_dc5c, 4
  %v2_e140 = inttoptr i32 %v1_e140 to i32*
  br label %dec_label_pc_dfc4

dec_label_pc_dfc4:                                ; preds = %dec_label_pc_dfc4.lr.ph, %dec_label_pc_dfb0.backedge
  %v3_dfbc153 = phi i32 [ %v3_dfbc151, %dec_label_pc_dfc4.lr.ph ], [ %v3_dfbc, %dec_label_pc_dfb0.backedge ]
  %v0_e018152 = phi i32 [ %v1_df8c, %dec_label_pc_dfc4.lr.ph ], [ %storemerge, %dec_label_pc_dfb0.backedge ]
  store i32 %v0_e018152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_dfd017 = inttoptr i32 %v0_e018152 to i8*
  %v2_dfd018 = load i8, i8* %v1_dfd017, align 1
  %v3_dfd019 = zext i8 %v2_dfd018 to i32
  store i32 %v3_dfd019, i32* %r2.global-to-local, align 4
  %v2_dfd420 = icmp eq i8 %v2_dfd018, 0
  store i1 %v2_dfd420, i1* %cpsr_z.global-to-local, align 1
  %v3_dfd821 = mul nuw nsw i32 %v3_dfd019, 256
  store i32 %v3_dfd821, i32* %r1.global-to-local, align 4
  br i1 %v2_dfd420, label %dec_label_pc_e010, label %dec_label_pc_dfe0.preheader

dec_label_pc_dfe0.preheader:                      ; preds = %dec_label_pc_dfc4, %dec_label_pc_dfd0.backedge
  %v1_e0b4 = phi i32 [ %v1_e0b449, %dec_label_pc_dfd0.backedge ], [ 1, %dec_label_pc_dfc4 ]
  %v0_e0ac47 = phi i32 [ %v0_e0ac, %dec_label_pc_dfd0.backedge ], [ 0, %dec_label_pc_dfc4 ]
  %v0_dfec45 = phi i32 [ %v3_dfd8, %dec_label_pc_dfd0.backedge ], [ %v3_dfd821, %dec_label_pc_dfc4 ]
  %v0_dfe843 = phi i32 [ %v1_e0b0, %dec_label_pc_dfd0.backedge ], [ %v0_e018152, %dec_label_pc_dfc4 ]
  %v0_dfe041 = phi i32 [ %v3_dfd0, %dec_label_pc_dfd0.backedge ], [ %v3_dfd019, %dec_label_pc_dfc4 ]
  br label %dec_label_pc_dfe0

dec_label_pc_dfe0:                                ; preds = %dec_label_pc_dfe0.preheader, %dec_label_pc_dfe8
  %v0_e0ac = phi i32 [ %v0_e0ac47, %dec_label_pc_dfe0.preheader ], [ 1, %dec_label_pc_dfe8 ]
  %v0_dfec = phi i32 [ %v0_dfec45, %dec_label_pc_dfe0.preheader ], [ %v3_e008, %dec_label_pc_dfe8 ]
  %v0_e0b0 = phi i32 [ %v0_dfe843, %dec_label_pc_dfe0.preheader ], [ %v2_dff8, %dec_label_pc_dfe8 ]
  %v0_dfe0 = phi i32 [ %v0_dfe041, %dec_label_pc_dfe0.preheader ], [ %v3_dffc, %dec_label_pc_dfe8 ]
  %v7_dfe0 = icmp eq i32 %v0_dfe0, 191
  store i1 %v7_dfe0, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_dfe0, 192
  br i1 %tmp180, label %dec_label_pc_e0ac, label %dec_label_pc_dfe8

dec_label_pc_dfe8:                                ; preds = %dec_label_pc_dfe0
  %v1_dfe8 = add i32 %v0_e0b0, 1
  %v2_dfe8 = inttoptr i32 %v1_dfe8 to i8*
  %v3_dfe8 = load i8, i8* %v2_dfe8, align 1
  %v4_dfe8 = zext i8 %v3_dfe8 to i32
  store i32 %v2_dd7c, i32* %r1.global-to-local, align 4
  %v2_dfec = add i32 %v0_dfec, %v1_e064
  %v2_dff8 = add i32 %v2_dfec, %v4_dfe8
  store i32 %v2_dff8, i32* %r3.global-to-local, align 4
  %v1_dffc = inttoptr i32 %v2_dff8 to i8*
  %v2_dffc = load i8, i8* %v1_dffc, align 1
  %v3_dffc = zext i8 %v2_dffc to i32
  store i32 %v3_dffc, i32* %r2.global-to-local, align 4
  %v2_e000 = icmp eq i8 %v2_dffc, 0
  store i1 %v2_e000, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_e008 = mul nuw nsw i32 %v3_dffc, 256
  store i32 %v3_e008, i32* %r1.global-to-local, align 4
  br i1 %v2_e000, label %dec_label_pc_e010, label %dec_label_pc_dfe0

dec_label_pc_e010:                                ; preds = %dec_label_pc_dfd0.backedge, %dec_label_pc_dfe8, %dec_label_pc_dfc4
  %v1_e014 = phi i32 [ 1, %dec_label_pc_dfc4 ], [ %v1_e0b4, %dec_label_pc_dfe8 ], [ %v1_e0b449, %dec_label_pc_dfd0.backedge ]
  %v0_e010 = phi i32 [ 0, %dec_label_pc_dfc4 ], [ 1, %dec_label_pc_dfe8 ], [ %v0_e0ac, %dec_label_pc_dfd0.backedge ]
  %v7_e010 = icmp eq i32 %v0_e010, 1
  store i1 %v7_e010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e010, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_e010
  %v2_e014 = add i32 %v1_e014, 1
  store i32 %v2_e014, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_e010, %bb127
  %v1_e018 = phi i32 [ %v1_e014, %dec_label_pc_e010 ], [ %v2_e014, %bb127 ]
  %v2_e018 = add i32 %v1_e018, %v0_e018152
  store i32 %v2_e018, i32* @r4, align 4
  %v3_e01c = inttoptr i32 %v2_e018 to i8*
  %v4_e01c = load i8, i8* %v3_e01c, align 1
  %v6_e01c = zext i8 %v4_e01c to i32
  store i32 %v6_e01c, i32* %r3.global-to-local, align 4
  %v1_e020 = add i32 %v2_e018, 1
  %v2_e020 = inttoptr i32 %v1_e020 to i8*
  %v3_e020 = load i8, i8* %v2_e020, align 1
  %v4_e020 = zext i8 %v3_e020 to i32
  store i32 %v4_e020, i32* %r2.global-to-local, align 4
  %v4_e024 = mul nuw nsw i32 %v4_e020, 256
  %v5_e024 = or i32 %v4_e024, %v6_e01c
  store i32 %v5_e024, i32* %r3.global-to-local, align 4
  %v7_e028 = icmp eq i32 %v5_e024, 256
  store i1 %v7_e028, i1* %cpsr_z.global-to-local, align 1
  %v1_e02c = add i32 %v2_e018, 10
  store i32 %v1_e02c, i32* @r5, align 4
  br i1 %v7_e028, label %dec_label_pc_e0cc, label %dec_label_pc_e034

dec_label_pc_e034:                                ; preds = %dec_label_pc_e0cc, %bb128
  store i32 %v1_e02c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e04023 = inttoptr i32 %v1_e02c to i8*
  %v2_e04024 = load i8, i8* %v1_e04023, align 1
  %v3_e04025 = zext i8 %v2_e04024 to i32
  store i32 %v3_e04025, i32* %r2.global-to-local, align 4
  %v2_e04426 = icmp eq i8 %v2_e04024, 0
  store i1 %v2_e04426, i1* %cpsr_z.global-to-local, align 1
  %v3_e04827 = mul nuw nsw i32 %v3_e04025, 256
  store i32 %v3_e04827, i32* %r1.global-to-local, align 4
  br i1 %v2_e04426, label %dec_label_pc_e080, label %dec_label_pc_e050.preheader

dec_label_pc_e050.preheader:                      ; preds = %dec_label_pc_e034, %dec_label_pc_e040.backedge
  %v1_e0c4 = phi i32 [ %v1_e0c464, %dec_label_pc_e040.backedge ], [ 1, %dec_label_pc_e034 ]
  %v0_e0bc62 = phi i32 [ %v0_e0bc, %dec_label_pc_e040.backedge ], [ 0, %dec_label_pc_e034 ]
  %v0_e05c60 = phi i32 [ %v3_e048, %dec_label_pc_e040.backedge ], [ %v3_e04827, %dec_label_pc_e034 ]
  %v0_e05858 = phi i32 [ %v1_e0c0, %dec_label_pc_e040.backedge ], [ %v1_e02c, %dec_label_pc_e034 ]
  %v0_e05056 = phi i32 [ %v3_e040, %dec_label_pc_e040.backedge ], [ %v3_e04025, %dec_label_pc_e034 ]
  br label %dec_label_pc_e050

dec_label_pc_e050:                                ; preds = %dec_label_pc_e050.preheader, %dec_label_pc_e058
  %v0_e0bc = phi i32 [ %v0_e0bc62, %dec_label_pc_e050.preheader ], [ 1, %dec_label_pc_e058 ]
  %v0_e05c = phi i32 [ %v0_e05c60, %dec_label_pc_e050.preheader ], [ %v3_e078, %dec_label_pc_e058 ]
  %v0_e0c0 = phi i32 [ %v0_e05858, %dec_label_pc_e050.preheader ], [ %v2_e068, %dec_label_pc_e058 ]
  %v0_e050 = phi i32 [ %v0_e05056, %dec_label_pc_e050.preheader ], [ %v3_e06c, %dec_label_pc_e058 ]
  %v7_e050 = icmp eq i32 %v0_e050, 191
  store i1 %v7_e050, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_e050, 192
  br i1 %tmp181, label %dec_label_pc_e0bc, label %dec_label_pc_e058

dec_label_pc_e058:                                ; preds = %dec_label_pc_e050
  %v1_e058 = add i32 %v0_e0c0, 1
  %v2_e058 = inttoptr i32 %v1_e058 to i8*
  %v3_e058 = load i8, i8* %v2_e058, align 1
  %v4_e058 = zext i8 %v3_e058 to i32
  store i32 %v2_dd7c, i32* %r1.global-to-local, align 4
  %v2_e05c = add i32 %v0_e05c, %v1_e064
  %v2_e068 = add i32 %v2_e05c, %v4_e058
  store i32 %v2_e068, i32* %r3.global-to-local, align 4
  %v1_e06c = inttoptr i32 %v2_e068 to i8*
  %v2_e06c = load i8, i8* %v1_e06c, align 1
  %v3_e06c = zext i8 %v2_e06c to i32
  store i32 %v3_e06c, i32* %r2.global-to-local, align 4
  %v2_e070 = icmp eq i8 %v2_e06c, 0
  store i1 %v2_e070, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_e078 = mul nuw nsw i32 %v3_e06c, 256
  store i32 %v3_e078, i32* %r1.global-to-local, align 4
  br i1 %v2_e070, label %dec_label_pc_e080, label %dec_label_pc_e050

dec_label_pc_e080:                                ; preds = %dec_label_pc_e040.backedge, %dec_label_pc_e058, %dec_label_pc_e034
  %v1_e084 = phi i32 [ 1, %dec_label_pc_e034 ], [ %v1_e0c4, %dec_label_pc_e058 ], [ %v1_e0c464, %dec_label_pc_e040.backedge ]
  %v0_e080 = phi i32 [ 0, %dec_label_pc_e034 ], [ 1, %dec_label_pc_e058 ], [ %v0_e0bc, %dec_label_pc_e040.backedge ]
  %v7_e080 = icmp eq i32 %v0_e080, 1
  store i1 %v7_e080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e080, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_e080
  %v2_e084 = add i32 %v1_e084, 1
  store i32 %v2_e084, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_e080, %bb129
  %v1_e088 = phi i32 [ %v1_e084, %dec_label_pc_e080 ], [ %v2_e084, %bb129 ]
  %v2_e088 = add i32 %v1_e088, %v1_e02c
  br label %dec_label_pc_dfb0.backedge

dec_label_pc_dfb0.backedge:                       ; preds = %bb130, %dec_label_pc_e174
  %v0_dfb0.pre = phi i32 [ %v3_dfbc153, %bb130 ], [ %v0_dfb0.pre.pre, %dec_label_pc_e174 ]
  %storemerge = phi i32 [ %v2_e088, %bb130 ], [ %v2_e188, %dec_label_pc_e174 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_dfb0 = add i32 %v0_dfb0.pre, -1
  %v3_dfb4 = mul i32 %v1_dfb0, 65536
  store i32 %v3_dfb4, i32* %r3.global-to-local, align 4
  %v7_dfb8 = icmp eq i32 %v3_dfb4, -65536
  store i1 %v7_dfb8, i1* %cpsr_z.global-to-local, align 1
  %v3_dfbc = urem i32 %v1_dfb0, 65536
  store i32 %v3_dfbc, i32* @r6, align 4
  br i1 %v7_dfb8, label %dec_label_pc_df24, label %dec_label_pc_dfc4

dec_label_pc_e090:                                ; preds = %dec_label_pc_df24
  %v1_e090 = add i32 %v2_dc5c, 4
  %v2_e090 = inttoptr i32 %v1_e090 to i32*
  %v3_e090 = load i32, i32* %v2_e090, align 4
  store i32 %v3_e090, i32* %r0.global-to-local, align 4
  %v2_e094 = icmp eq i32 %v3_e090, 0
  store i1 %v2_e094, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_e09c.121 to i32), i32* @lr, align 4
  %v1_e098 = xor i1 %v2_e094, true
  call void @__pseudo_cond_branch(i1 %v1_e098, i32 ptrtoint (i32* @global_var_115d4.20 to i32))
  store i32 %v2_dc5c, i32* @r0, align 4
  %v0_e0a0 = call i32 @function_115d4()
  store i32 %v0_e0a0, i32* %r0.global-to-local, align 4
  %v0_e0a4 = load i32, i32* @r4, align 4
  %v5_e0a4 = inttoptr i32 %v0_e0a4 to i8*
  br label %dec_label_pc_df3c

dec_label_pc_e0ac:                                ; preds = %dec_label_pc_dfe0
  %v2_e0ac = icmp eq i32 %v0_e0ac, 0
  store i1 %v2_e0ac, i1* %cpsr_z.global-to-local, align 1
  %v1_e0b0 = add i32 %v0_e0b0, 1
  store i32 %v1_e0b0, i32* %r3.global-to-local, align 4
  br i1 %v2_e0ac, label %bb131, label %dec_label_pc_dfd0.backedge

dec_label_pc_dfd0.backedge:                       ; preds = %dec_label_pc_e0ac, %bb131
  %v1_e0b449 = phi i32 [ %v1_e0b4, %dec_label_pc_e0ac ], [ %v2_e0b4, %bb131 ]
  %v1_dfd0 = inttoptr i32 %v1_e0b0 to i8*
  %v2_dfd0 = load i8, i8* %v1_dfd0, align 1
  %v3_dfd0 = zext i8 %v2_dfd0 to i32
  store i32 %v3_dfd0, i32* %r2.global-to-local, align 4
  %v2_dfd4 = icmp eq i8 %v2_dfd0, 0
  store i1 %v2_dfd4, i1* %cpsr_z.global-to-local, align 1
  %v3_dfd8 = mul nuw nsw i32 %v3_dfd0, 256
  store i32 %v3_dfd8, i32* %r1.global-to-local, align 4
  br i1 %v2_dfd4, label %dec_label_pc_e010, label %dec_label_pc_dfe0.preheader

bb131:                                            ; preds = %dec_label_pc_e0ac
  %v2_e0b4 = add i32 %v1_e0b4, 1
  store i32 %v2_e0b4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_dfd0.backedge

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_e050
  %v2_e0bc = icmp eq i32 %v0_e0bc, 0
  store i1 %v2_e0bc, i1* %cpsr_z.global-to-local, align 1
  %v1_e0c0 = add i32 %v0_e0c0, 1
  store i32 %v1_e0c0, i32* %r3.global-to-local, align 4
  br i1 %v2_e0bc, label %bb132, label %dec_label_pc_e040.backedge

dec_label_pc_e040.backedge:                       ; preds = %dec_label_pc_e0bc, %bb132
  %v1_e0c464 = phi i32 [ %v1_e0c4, %dec_label_pc_e0bc ], [ %v2_e0c4, %bb132 ]
  %v1_e040 = inttoptr i32 %v1_e0c0 to i8*
  %v2_e040 = load i8, i8* %v1_e040, align 1
  %v3_e040 = zext i8 %v2_e040 to i32
  store i32 %v3_e040, i32* %r2.global-to-local, align 4
  %v2_e044 = icmp eq i8 %v2_e040, 0
  store i1 %v2_e044, i1* %cpsr_z.global-to-local, align 1
  %v3_e048 = mul nuw nsw i32 %v3_e040, 256
  store i32 %v3_e048, i32* %r1.global-to-local, align 4
  br i1 %v2_e044, label %dec_label_pc_e080, label %dec_label_pc_e050.preheader

bb132:                                            ; preds = %dec_label_pc_e0bc
  %v2_e0c4 = add i32 %v1_e0c4, 1
  store i32 %v2_e0c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e040.backedge

dec_label_pc_e0cc:                                ; preds = %bb128
  %v1_e0cc = add i32 %v2_e018, 2
  %v2_e0cc = inttoptr i32 %v1_e0cc to i8*
  %v3_e0cc = load i8, i8* %v2_e0cc, align 1
  %v4_e0cc = zext i8 %v3_e0cc to i32
  store i32 %v4_e0cc, i32* %r3.global-to-local, align 4
  %v1_e0d0 = add i32 %v2_e018, 3
  %v2_e0d0 = inttoptr i32 %v1_e0d0 to i8*
  %v3_e0d0 = load i8, i8* %v2_e0d0, align 1
  %v4_e0d0 = zext i8 %v3_e0d0 to i32
  store i32 %v4_e0d0, i32* %r2.global-to-local, align 4
  %v4_e0d4 = mul nuw nsw i32 %v4_e0d0, 256
  %v5_e0d4 = or i32 %v4_e0d4, %v4_e0cc
  store i32 %v5_e0d4, i32* %r3.global-to-local, align 4
  %v7_e0d8 = icmp eq i32 %v5_e0d4, 256
  store i1 %v7_e0d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0d8, label %dec_label_pc_e0e0, label %dec_label_pc_e034

dec_label_pc_e0e0:                                ; preds = %dec_label_pc_e0cc
  %v1_e0e0 = add i32 %v2_e018, 8
  %v2_e0e0 = inttoptr i32 %v1_e0e0 to i8*
  %v3_e0e0 = load i8, i8* %v2_e0e0, align 1
  %v4_e0e0 = zext i8 %v3_e0e0 to i32
  store i32 %v4_e0e0, i32* %r1.global-to-local, align 4
  %v1_e0e4 = add i32 %v2_e018, 9
  %v2_e0e4 = inttoptr i32 %v1_e0e4 to i8*
  %v3_e0e4 = load i8, i8* %v2_e0e4, align 1
  %v4_e0e4 = zext i8 %v3_e0e4 to i32
  store i32 %v4_e0e4, i32* %r0.global-to-local, align 4
  %v4_e0e8 = mul nuw nsw i32 %v4_e0e4, 256
  %v5_e0e8 = or i32 %v4_e0e8, %v4_e0e0
  %v3_e0ec = mul i32 %v5_e0e8, 65536
  store i32 %v3_e0ec, i32* %r2.global-to-local, align 4
  %v3_e0f0 = mul nuw nsw i32 %v4_e0e0, 256
  %v5_e0f8 = or i32 %v4_e0e4, %v3_e0f0
  store i32 %v5_e0f8, i32* %r3.global-to-local, align 4
  %v7_e0fc = icmp eq i32 %v5_e0f8, 4
  store i1 %v7_e0fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0fc, label %dec_label_pc_e104, label %dec_label_pc_e174

dec_label_pc_e104:                                ; preds = %dec_label_pc_e0e0
  %v2_e104 = inttoptr i32 %v1_e02c to i8*
  %v3_e104 = load i8, i8* %v2_e104, align 1
  %v4_e104 = zext i8 %v3_e104 to i32
  store i32 %v4_e104, i32* %r3.global-to-local, align 4
  store i32 %v2_dcdc, i32* %r2.global-to-local, align 4
  %v1_e110 = add i32 %v2_e018, 11
  %v2_e110 = inttoptr i32 %v1_e110 to i8*
  %v3_e110 = load i8, i8* %v2_e110, align 1
  %v4_e110 = zext i8 %v3_e110 to i32
  store i32 %v4_e110, i32* %r2.global-to-local, align 4
  store i32 %v2_dcdc, i32* %r3.global-to-local, align 4
  %v1_e11c = add i32 %v2_e018, 12
  %v2_e11c = inttoptr i32 %v1_e11c to i8*
  %v3_e11c = load i8, i8* %v2_e11c, align 1
  %v4_e11c = zext i8 %v3_e11c to i32
  store i32 %v4_e11c, i32* %r3.global-to-local, align 4
  store i32 %v2_dcdc, i32* %ip.global-to-local, align 4
  %v1_e128 = add i32 %v2_e018, 13
  %v2_e128 = inttoptr i32 %v1_e128 to i8*
  %v3_e128 = load i8, i8* %v2_e128, align 1
  %v4_e128 = zext i8 %v3_e128 to i32
  store i32 %v4_e128, i32* %r2.global-to-local, align 4
  store i32 %v2_dc5c, i32* @lr, align 4
  %v2_e134 = load i8, i8* %v3_dc5c, align 1
  %v3_e134 = zext i8 %v2_e134 to i32
  %v3_e138 = mul nuw nsw i32 %v3_e134, 4
  %v1_e13c = add nuw nsw i32 %v3_e138, 4
  store i32 %v1_e13c, i32* %r1.global-to-local, align 4
  %v3_e140 = load i32, i32* %v2_e140, align 4
  store i32 %v3_e140, i32* %r0.global-to-local, align 4
  %v3_e144 = sext i8 %v3_e128 to i32
  %v5_e144 = sext i8 %v3_e11c to i32
  %v10_e144 = call i32 @function_116c4(i32 %v3_e140, i32 %v1_e13c, i32 %v3_e144, i32 %v5_e144)
  store i32 %v10_e144, i32* %r0.global-to-local, align 4
  store i32 %v2_dc5c, i32* %r1.global-to-local, align 4
  store i32 %v2_dcdc, i32* %ip.global-to-local, align 4
  %v2_e150 = load i8, i8* %v3_dc5c, align 1
  %v3_e150 = zext i8 %v2_e150 to i32
  store i32 %v3_e150, i32* %r2.global-to-local, align 4
  %v4_e154 = sext i8 %v3_e104 to i32
  store i32 %v4_e154, i32* %r3.global-to-local, align 4
  store i32 %v2_dc5c, i32* @lr, align 4
  %v1_e15c = add nuw nsw i32 %v3_e150, 1
  store i32 %v1_e15c, i32* %r1.global-to-local, align 4
  %v5_e160 = mul nuw nsw i32 %v3_e150, 4
  %v6_e160 = add i32 %v5_e160, %v10_e144
  %v7_e160 = inttoptr i32 %v6_e160 to i32*
  store i32 %v4_e154, i32* %v7_e160, align 4
  %v1_e164 = load i32, i32* @lr, align 4
  %v2_e164 = add i32 %v1_e164, 4
  %v3_e164 = inttoptr i32 %v2_e164 to i32*
  store i32 %v10_e144, i32* %v3_e164, align 4
  %v0_e168 = load i32, i32* %r1.global-to-local, align 4
  %v1_e168 = trunc i32 %v0_e168 to i8
  %v2_e168 = load i32, i32* @lr, align 4
  %v3_e168 = inttoptr i32 %v2_e168 to i8*
  store i8 %v1_e168, i8* %v3_e168, align 1
  %v0_e16c = load i32, i32* @r4, align 4
  %v1_e16c = add i32 %v0_e16c, 9
  %v2_e16c = inttoptr i32 %v1_e16c to i8*
  %v3_e16c = load i8, i8* %v2_e16c, align 1
  %v4_e16c = zext i8 %v3_e16c to i32
  store i32 %v4_e16c, i32* %r0.global-to-local, align 4
  %v1_e170 = add i32 %v0_e16c, 8
  %v2_e170 = inttoptr i32 %v1_e170 to i8*
  %v3_e170 = load i8, i8* %v2_e170, align 1
  %v4_e170 = zext i8 %v3_e170 to i32
  store i32 %v4_e170, i32* %r1.global-to-local, align 4
  %v0_e188.pre = load i32, i32* @r5, align 4
  %v0_dfb0.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e174

dec_label_pc_e174:                                ; preds = %dec_label_pc_e0e0, %dec_label_pc_e104
  %v0_dfb0.pre.pre = phi i32 [ %v3_dfbc153, %dec_label_pc_e0e0 ], [ %v0_dfb0.pre.pre.pre, %dec_label_pc_e104 ]
  %v0_e188 = phi i32 [ %v1_e02c, %dec_label_pc_e0e0 ], [ %v0_e188.pre, %dec_label_pc_e104 ]
  %v1_e174 = phi i32 [ %v4_e0e4, %dec_label_pc_e0e0 ], [ %v4_e16c, %dec_label_pc_e104 ]
  %v0_e174 = phi i32 [ %v4_e0e0, %dec_label_pc_e0e0 ], [ %v4_e170, %dec_label_pc_e104 ]
  %v4_e174 = mul nuw nsw i32 %v1_e174, 256
  %v5_e174 = or i32 %v4_e174, %v0_e174
  %v3_e178 = mul i32 %v5_e174, 65536
  store i32 %v3_e178, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_e174, 256
  %v5_e184 = or i32 %tmp133, %v1_e174
  store i32 %v5_e184, i32* %r3.global-to-local, align 4
  %v2_e188 = add i32 %v5_e184, %v0_e188
  br label %dec_label_pc_dfb0.backedge

; uselistorder directives
  uselistorder i32 %v1_e174, { 1, 0 }
  uselistorder i32 %v3_e150, { 1, 0, 2 }
  uselistorder i32 %v10_e144, { 1, 0, 2 }
  uselistorder i32 %v4_e0e4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_e0e0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_e0c4, { 1, 0 }
  uselistorder i32 %v3_e040, { 0, 2, 1 }
  uselistorder i32 %v1_e0c464, { 1, 0 }
  uselistorder i32 %v1_e0c0, { 1, 2, 0 }
  uselistorder i32 %v2_e0b4, { 1, 0 }
  uselistorder i32 %v3_dfd0, { 0, 2, 1 }
  uselistorder i32 %v1_e0b449, { 1, 0 }
  uselistorder i32 %v1_e0b0, { 1, 2, 0 }
  uselistorder i1 %v7_dfb8, { 1, 0 }
  uselistorder i32 %v1_dfb0, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_e06c, { 0, 2, 1 }
  uselistorder i32 %v2_e068, { 1, 2, 0 }
  uselistorder i32 %v0_e0bc, { 2, 0, 1 }
  uselistorder i32 %v1_e0c4, { 1, 2, 0 }
  uselistorder i32 %v3_e04827, { 1, 0 }
  uselistorder i32 %v3_e04025, { 1, 0, 2 }
  uselistorder i32 %v1_e02c, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_e018, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_dffc, { 0, 2, 1 }
  uselistorder i32 %v2_dff8, { 1, 2, 0 }
  uselistorder i32 %v0_e0ac, { 2, 0, 1 }
  uselistorder i32 %v1_e0b4, { 1, 2, 0 }
  uselistorder i32 %v3_dfd821, { 1, 0 }
  uselistorder i32 %v3_dfd019, { 1, 0, 2 }
  uselistorder i32 %v0_e018152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_dfbc151, { 1, 0 }
  uselistorder i1 %v7_dfb8150, { 1, 0 }
  uselistorder i32 %v1_dfb0143, { 1, 0 }
  uselistorder i32 %v4_df98, { 1, 0, 2 }
  uselistorder i32 %v0_df1c, { 1, 0 }
  uselistorder i32 %v0_def4, { 1, 0 }
  uselistorder i1 %v7_dea8, { 1, 0 }
  uselistorder i32 %v5_dea4, { 1, 0, 2 }
  uselistorder i32 %v1_de68, { 1, 0 }
  uselistorder i32 %v3_de54, { 1, 0 }
  uselistorder i32 %v0_de4c, { 1, 0 }
  uselistorder i32 %v1_de40, { 1, 2, 0 }
  uselistorder i1 %v7_de0c, { 1, 0 }
  uselistorder i32 %v5_de08, { 1, 0, 2 }
  uselistorder i1 %v7_ddf0, { 1, 0 }
  uselistorder i32 %v4_ddec, { 1, 0, 2 }
  uselistorder i1 %v7_ddd4, { 1, 0 }
  uselistorder i32 %v3_ddd0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_ddb8, { 2, 1, 0 }
  uselistorder i32 %v1_ddbc, { 1, 0 }
  uselistorder i32 %v1_df5c, { 1, 2, 0 }
  uselistorder i32 %v2_de58, { 1, 0, 2 }
  uselistorder i32 %v2_ddb4, { 1, 0, 2 }
  uselistorder i32 %v2_dd7c, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_dd30, { 3, 0, 2, 1 }
  uselistorder i32 %v1_dcfc, { 1, 0, 2 }
  uselistorder i32 %v0_dcb8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_dcb4, { 1, 0, 2 }
  uselistorder i32 %v1_dcb0, { 1, 0 }
  uselistorder i32 %v2_dca411, { 1, 0 }
  uselistorder i32 %v2_dca4, { 1, 0 }
  uselistorder i1 %v8_dc94, { 1, 0 }
  uselistorder i32 %v2_dc7c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_dc64, { 1, 0 }
  uselistorder i32 %v2_dc5c, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 10, 13, 9, 8, 11, 12, 5, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 10, 13, 8, 9, 7, 11, 12, 6, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 25, 29, 27 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 47, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 37, 32, 31, 33, 34, 35, 36, 39, 38, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 6, 3, 5, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 10, 3, 15, 4, 5, 16, 7, 8, 9, 6, 11, 12, 13, 14, 2, 36, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 26, 27, 28, 29, 35, 33, 31, 32, 34, 37 }
  uselistorder i32 (i32)* @function_11c00, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e174, { 1, 0 }
  uselistorder label %dec_label_pc_e040.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_dfd0.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_dfb0.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_e050, { 1, 0 }
  uselistorder label %dec_label_pc_e050.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_dfe0, { 1, 0 }
  uselistorder label %dec_label_pc_dfe0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_dfc4, { 1, 0 }
  uselistorder label %dec_label_pc_df3c, { 1, 0 }
  uselistorder label %dec_label_pc_df24, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_df04, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_dc8c, { 1, 0 }
}

define i32 @function_e190(i32 %arg1) local_unnamed_addr {
dec_label_pc_e190:
  %v2_e194 = load i32, i32* @global_var_1b880.123, align 4
  %v2_e19c = call i32 @function_10abc(i32 %v2_e194, i32 9)
  %v0_e1a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e1a0, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e190
  store i32 0, i32* @fp, align 4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e190, %bb
  ret i32 %v2_e19c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e1a4() local_unnamed_addr {
dec_label_pc_e1a4:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e1a4 = load i32, i32* @r4, align 4
  store i32 %v3_e1a4, i32* %stack_var_-16, align 4
  %v0_e1a8 = load i32, i32* @r0, align 4
  store i32 %v0_e1a8, i32* %r5.global-to-local, align 4
  %v1_e1ac = add i32 %v0_e1a8, 4
  %v2_e1ac = inttoptr i32 %v1_e1ac to i32*
  %v3_e1ac = load i32, i32* %v2_e1ac, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 57808, i32* @lr, align 4
  %v1_e1cc = icmp ne i32 %v3_e1ac, -1
  call void @__pseudo_cond_branch(i1 %v1_e1cc, i32 ptrtoint (i32* @global_var_109bc.98 to i32))
  %v3_e1dc = call i32 @function_11290(i32 2, i32 1, i32 0)
  store i32 %v3_e1dc, i32* %r3.global-to-local, align 4
  %v7_e1e4 = icmp eq i32 %v3_e1dc, -1
  store i32 256, i32* @r1, align 4
  %v0_e1ec = load i32, i32* %r5.global-to-local, align 4
  %v1_e1ec = add i32 %v0_e1ec, 28
  store i32 %v1_e1ec, i32* @r0, align 4
  %v2_e1f0 = add i32 %v0_e1ec, 4
  %v3_e1f0 = inttoptr i32 %v2_e1f0 to i32*
  store i32 %v3_e1dc, i32* %v3_e1f0, align 4
  br i1 %v7_e1e4, label %dec_label_pc_e1a4.dec_label_pc_e26c_crit_edge, label %dec_label_pc_e1f8

dec_label_pc_e1a4.dec_label_pc_e26c_crit_edge:    ; preds = %dec_label_pc_e1a4
  %v14_e270.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e26c

dec_label_pc_e1f8:                                ; preds = %dec_label_pc_e1a4
  %v0_e1f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_e1f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_e1f8 = add i32 %v1_e1f8, 24
  %v3_e1f8 = inttoptr i32 %v2_e1f8 to i32*
  store i32 %v0_e1f8, i32* %v3_e1f8, align 4
  %v0_e1fc = call i32 @function_101dc()
  %v0_e200 = load i32, i32* %r5.global-to-local, align 4
  %v1_e200 = add i32 %v0_e200, 4
  %v2_e200 = inttoptr i32 %v1_e200 to i32*
  %v3_e200 = load i32, i32* %v2_e200, align 4
  store i32 %v3_e200, i32* @r4, align 4
  %v0_e208 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e208, i32* @r2, align 4
  %v2_e210 = call i32 @function_108f8(i32 %v3_e200, i32 3)
  %v1_e218 = or i32 %v2_e210, 2048
  store i32 %v1_e218, i32* @r2, align 4
  %v0_e21c = load i32, i32* @r4, align 4
  %v2_e220 = call i32 @function_108f8(i32 %v0_e21c, i32 4)
  store i32 ptrtoint (i32* @global_var_1b818.125 to i32), i32* %r3.global-to-local, align 4
  %v0_e228 = load i32, i32* %r5.global-to-local, align 4
  %v1_e228 = add i32 %v0_e228, 20
  %v2_e228 = inttoptr i32 %v1_e228 to i32*
  %v3_e228 = load i32, i32* %v2_e228, align 4
  store i32 %v3_e228, i32* @r4, align 4
  %v2_e22c = load i32, i32* @global_var_1b818.125, align 4
  %v1_e230 = add i32 %v0_e228, 16
  %v2_e230 = inttoptr i32 %v1_e230 to i32*
  %v3_e230 = load i32, i32* %v2_e230, align 4
  store i32 %v3_e230, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e238 = add i32 %v0_e228, 8
  %v3_e238 = inttoptr i32 %v2_e238 to i32*
  store i32 %v2_e22c, i32* %v3_e238, align 4
  %v0_e23c = load i32, i32* %r3.global-to-local, align 4
  %v1_e23c = load i32, i32* %r5.global-to-local, align 4
  %v2_e23c = add i32 %v1_e23c, 12
  %v3_e23c = inttoptr i32 %v2_e23c to i32*
  store i32 %v0_e23c, i32* %v3_e23c, align 4
  %v0_e244 = load i32, i32* %r5.global-to-local, align 4
  %v1_e244 = add i32 %v0_e244, 4
  %v2_e244 = inttoptr i32 %v1_e244 to i32*
  %v3_e244 = load i32, i32* %v2_e244, align 4
  %v0_e248 = load i32, i32* %r3.global-to-local, align 4
  %v2_e248 = mul i32 %v0_e248, 2
  store i32 %v2_e248, i32* %r3.global-to-local, align 4
  store i32 %v2_e248, i32* %stack_var_-32, align 4
  %v3_e268 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_e268 = call i32 @function_110ec(i32 %v3_e244, %sockaddr* %v3_e268, i32 16)
  br label %dec_label_pc_e26c

dec_label_pc_e26c:                                ; preds = %dec_label_pc_e1a4.dec_label_pc_e26c_crit_edge, %dec_label_pc_e1f8
  %v14_e270 = phi i32 [ %v14_e270.pre, %dec_label_pc_e1a4.dec_label_pc_e26c_crit_edge ], [ %v4_e268, %dec_label_pc_e1f8 ]
  %v2_e270 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e270, i32* @r4, align 4
  ret i32 %v14_e270

; uselistorder directives
  uselistorder i32 %v2_e248, { 1, 0 }
  uselistorder i32 %v3_e1dc, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_101dc, { 5, 6, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e26c, { 1, 0 }
}

define i32 @function_e278(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e278:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_e278 = load i32, i32* @r4, align 4
  %v6_e278 = load i32, i32* @r5, align 4
  %v9_e278 = load i32, i32* @r6, align 4
  %v12_e278 = load i32, i32* @r7, align 4
  %v15_e278 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1b7e4.127 to i32), i32* @r8, align 4
  %v2_e280 = load i32, i32* @global_var_1b7e4.127, align 4
  store i32 ptrtoint (i32* @global_var_1b810.129 to i32), i32* %sb.global-to-local, align 4
  %v3_e28c = mul i32 %v2_e280, 16
  store i32 %v3_e28c, i32* %r3.global-to-local, align 4
  %v3_e294 = urem i32 %arg3, 65536
  store i32 %v3_e294, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e2a0 = load i32, i32* @global_var_1b810.129, align 4
  %v1_e2a4 = add i32 %v3_e28c, 16
  store i32 %v1_e2a4, i32* %r1.global-to-local, align 4
  store i32 %v3_e294, i32* %stack_var_-44, align 4
  %v8_e2ac = call i32 @function_116c4(i32 %v2_e2a0, i32 %v1_e2a4, i32 %v3_e294, i32 %v3_e28c)
  store i32 %v8_e2ac, i32* %sl.global-to-local, align 4
  %v0_e2b4 = load i32, i32* @r5, align 4
  %v1_e2b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_e2b8 = inttoptr i32 %v1_e2b8 to i32*
  store i32 %v8_e2ac, i32* %v2_e2b8, align 4
  %v2_e2bc = load i32, i32* @global_var_1b7e4.127, align 4
  store i32 %v2_e2bc, i32* %fp.global-to-local, align 4
  %v1_e2c0 = inttoptr i32 %v0_e2b4 to i8*
  %v2_e2c0 = call i32 @function_1013c(i8* %v1_e2c0)
  %sext = mul i32 %v2_e2c0, 16777216
  %v1_e2c4 = sdiv i32 %sext, 16777216
  %v2_e2c4 = add nsw i32 %v1_e2c4, 1
  store i32 %v2_e2c4, i32* @r4, align 4
  store i32 %v1_e2c4, i32* @r7, align 4
  %v1_e2d0 = call i32 @function_11428(i32 %v2_e2c4)
  %v0_e2d4 = load i32, i32* @r5, align 4
  store i32 %v0_e2d4, i32* %r1.global-to-local, align 4
  %v0_e2d8 = load i32, i32* @r4, align 4
  store i32 %v0_e2d8, i32* %r2.global-to-local, align 4
  store i32 %v1_e2d0, i32* @r6, align 4
  %v3_e2e0 = call i32 @function_101b8(i32 %v1_e2d0, i32 %v0_e2d4, i32 %v0_e2d8)
  %v0_e2e4 = load i32, i32* @r7, align 4
  %tmp23 = icmp slt i32 %v0_e2e4, 1
  %extract.t8 = trunc i32 %v0_e2e4 to i8
  br i1 %tmp23, label %dec_label_pc_e310, label %dec_label_pc_e2ec

dec_label_pc_e2ec:                                ; preds = %dec_label_pc_e278
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -70, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2f4

dec_label_pc_e2f4:                                ; preds = %dec_label_pc_e2f4.dec_label_pc_e2f4_crit_edge, %dec_label_pc_e2ec
  %v1_e2fc = phi i32 [ %v1_e2fc.pre, %dec_label_pc_e2f4.dec_label_pc_e2f4_crit_edge ], [ -70, %dec_label_pc_e2ec ]
  %v2_e300 = phi i32 [ %v1_e304, %dec_label_pc_e2f4.dec_label_pc_e2f4_crit_edge ], [ 0, %dec_label_pc_e2ec ]
  %v1_e2f4 = load i32, i32* @r6, align 4
  %v2_e2f4 = add i32 %v1_e2f4, %v2_e300
  %v3_e2f4 = inttoptr i32 %v2_e2f4 to i8*
  %v4_e2f4 = load i8, i8* %v3_e2f4, align 1
  %v6_e2f4 = zext i8 %v4_e2f4 to i32
  %v1_e2f8 = sub i32 -1, %v1_e2fc
  %v2_e2fc = xor i32 %v6_e2f4, %v1_e2f8
  store i32 %v2_e2fc, i32* %r3.global-to-local, align 4
  %v1_e300 = trunc i32 %v2_e2fc to i8
  store i8 %v1_e300, i8* %v3_e2f4, align 1
  %v0_e304 = load i32, i32* %r2.global-to-local, align 4
  %v1_e304 = add i32 %v0_e304, 1
  store i32 %v1_e304, i32* %r2.global-to-local, align 4
  %v0_e308 = load i32, i32* @r7, align 4
  %v9_e308 = icmp eq i32 %v0_e308, %v1_e304
  br i1 %v9_e308, label %dec_label_pc_e310.loopexit, label %dec_label_pc_e2f4.dec_label_pc_e2f4_crit_edge

dec_label_pc_e2f4.dec_label_pc_e2f4_crit_edge:    ; preds = %dec_label_pc_e2f4
  %v1_e2fc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2f4

dec_label_pc_e310.loopexit:                       ; preds = %dec_label_pc_e2f4
  %extract.t = trunc i32 %v1_e304 to i8
  br label %dec_label_pc_e310

dec_label_pc_e310:                                ; preds = %dec_label_pc_e310.loopexit, %dec_label_pc_e278
  %v0_e320.off0 = phi i8 [ %extract.t, %dec_label_pc_e310.loopexit ], [ %extract.t8, %dec_label_pc_e278 ]
  %v2_e310 = load i32, i32* @global_var_1b7e4.127, align 4
  %v2_e314 = load i32, i32* @global_var_1b810.129, align 4
  store i32 %v2_e314, i32* %r2.global-to-local, align 4
  %v3_e318 = mul i32 %v2_e310, 16
  %v2_e31c = add i32 %v2_e314, %v3_e318
  store i32 %v2_e31c, i32* %r3.global-to-local, align 4
  %v3_e320 = add i32 %v2_e31c, 12
  %v4_e320 = inttoptr i32 %v3_e320 to i8*
  store i8 %v0_e320.off0, i8* %v4_e320, align 1
  %v0_e324 = load i32, i32* @r6, align 4
  %v1_e324 = load i32, i32* %sl.global-to-local, align 4
  %v2_e324 = load i32, i32* %fp.global-to-local, align 4
  %v5_e324 = mul i32 %v2_e324, 16
  %v6_e324 = add i32 %v5_e324, %v1_e324
  %v7_e324 = inttoptr i32 %v6_e324 to i32*
  store i32 %v0_e324, i32* %v7_e324, align 4
  %v2_e32c = load i32, i32* @global_var_1b7e4.127, align 4
  store i32 %v2_e32c, i32* @r7, align 4
  %v2_e330 = load i32, i32* @global_var_1b810.129, align 4
  store i32 %v2_e330, i32* %sl.global-to-local, align 4
  %v1_e334 = inttoptr i32 %arg2 to i8*
  %v2_e334 = call i32 @function_1013c(i8* %v1_e334)
  %sext1 = mul i32 %v2_e334, 16777216
  %v1_e338 = sdiv i32 %sext1, 16777216
  %v2_e338 = add nsw i32 %v1_e338, 1
  store i32 %v2_e338, i32* @r4, align 4
  store i32 %v1_e338, i32* @r5, align 4
  %v1_e344 = call i32 @function_11428(i32 %v2_e338)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e34c = load i32, i32* @r4, align 4
  store i32 %v0_e34c, i32* %r2.global-to-local, align 4
  store i32 %v1_e344, i32* %r6.global-to-local, align 4
  %v3_e354 = call i32 @function_101b8(i32 %v1_e344, i32 %arg2, i32 %v0_e34c)
  %v0_e358 = load i32, i32* @r5, align 4
  %tmp24 = icmp slt i32 %v0_e358, 1
  %extract.t10 = trunc i32 %v0_e358 to i8
  br i1 %tmp24, label %dec_label_pc_e384, label %dec_label_pc_e360

dec_label_pc_e360:                                ; preds = %dec_label_pc_e310
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -70, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e368

dec_label_pc_e368:                                ; preds = %dec_label_pc_e368.dec_label_pc_e368_crit_edge, %dec_label_pc_e360
  %v1_e370 = phi i32 [ %v1_e370.pre, %dec_label_pc_e368.dec_label_pc_e368_crit_edge ], [ -70, %dec_label_pc_e360 ]
  %v2_e374 = phi i32 [ %v1_e378, %dec_label_pc_e368.dec_label_pc_e368_crit_edge ], [ 0, %dec_label_pc_e360 ]
  %v1_e368 = load i32, i32* %r6.global-to-local, align 4
  %v2_e368 = add i32 %v1_e368, %v2_e374
  %v3_e368 = inttoptr i32 %v2_e368 to i8*
  %v4_e368 = load i8, i8* %v3_e368, align 1
  %v6_e368 = zext i8 %v4_e368 to i32
  %v1_e36c = sub i32 -1, %v1_e370
  %v2_e370 = xor i32 %v6_e368, %v1_e36c
  store i32 %v2_e370, i32* %r3.global-to-local, align 4
  %v1_e374 = trunc i32 %v2_e370 to i8
  store i8 %v1_e374, i8* %v3_e368, align 1
  %v0_e378 = load i32, i32* %r2.global-to-local, align 4
  %v1_e378 = add i32 %v0_e378, 1
  store i32 %v1_e378, i32* %r2.global-to-local, align 4
  %v0_e37c = load i32, i32* @r5, align 4
  %v9_e37c = icmp eq i32 %v0_e37c, %v1_e378
  br i1 %v9_e37c, label %dec_label_pc_e384.loopexit, label %dec_label_pc_e368.dec_label_pc_e368_crit_edge

dec_label_pc_e368.dec_label_pc_e368_crit_edge:    ; preds = %dec_label_pc_e368
  %v1_e370.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e368

dec_label_pc_e384.loopexit:                       ; preds = %dec_label_pc_e368
  %extract.t9 = trunc i32 %v1_e378 to i8
  br label %dec_label_pc_e384

dec_label_pc_e384:                                ; preds = %dec_label_pc_e384.loopexit, %dec_label_pc_e310
  %v0_e394.off0 = phi i8 [ %extract.t9, %dec_label_pc_e384.loopexit ], [ %extract.t10, %dec_label_pc_e310 ]
  %v2_e384 = load i32, i32* @global_var_1b7e4.127, align 4
  %v2_e388 = load i32, i32* @global_var_1b810.129, align 4
  %v3_e38c = mul i32 %v2_e384, 16
  %v2_e390 = or i32 %v3_e38c, 13
  %v3_e394 = add i32 %v2_e390, %v2_e388
  %v4_e394 = inttoptr i32 %v3_e394 to i8*
  store i8 %v0_e394.off0, i8* %v4_e394, align 1
  %v2_e39c = load i32, i32* @global_var_1b7e4.127, align 4
  store i32 %v2_e39c, i32* %lr.global-to-local, align 4
  %v4_e3a0 = load i8, i8* @global_var_1b815.132, align 1
  %v5_e3a0 = zext i8 %v4_e3a0 to i32
  %v3_e3a4 = load i8, i8* bitcast (i8** @global_var_1b814.131 to i8*), align 4
  %v4_e3a4 = zext i8 %v3_e3a4 to i32
  %v2_e3a8 = load i32, i32* @global_var_1b810.129, align 4
  %v4_e3ac = mul nuw nsw i32 %v5_e3a0, 256
  %v5_e3ac = or i32 %v4_e3a4, %v4_e3ac
  store i32 %v5_e3ac, i32* %r2.global-to-local, align 4
  %v3_e3b0 = mul i32 %v2_e39c, 16
  %v2_e3b4 = add i32 %v2_e3a8, %v3_e3b0
  store i32 %v2_e3b4, i32* %r1.global-to-local, align 4
  %v3_e3bc = add i32 %v2_e3b4, 9
  %v4_e3bc = inttoptr i32 %v3_e3bc to i8*
  store i8 %v4_e3a0, i8* %v4_e3bc, align 1
  %v0_e3c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e3c0 = trunc i32 %v0_e3c0 to i8
  %v2_e3c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e3c0 = add i32 %v2_e3c0, 8
  %v4_e3c0 = inttoptr i32 %v3_e3c0 to i8*
  store i8 %v1_e3c0, i8* %v4_e3c0, align 1
  %v4_e3c4 = load i8, i8* @global_var_1b815.132, align 1
  %v5_e3c4 = zext i8 %v4_e3c4 to i32
  %v3_e3c8 = load i8, i8* bitcast (i8** @global_var_1b814.131 to i8*), align 4
  %v4_e3c8 = zext i8 %v3_e3c8 to i32
  %v4_e3cc = mul nuw nsw i32 %v5_e3c4, 256
  %v5_e3cc = or i32 %v4_e3c8, %v4_e3cc
  %v2_e3d0 = load i32, i32* %stack_var_-44, align 4
  %v2_e3d4 = add i32 %v5_e3cc, %v2_e3d0
  store i32 %v2_e3d4, i32* %r3.global-to-local, align 4
  %v3_e3d811 = udiv i32 %v2_e3d4, 256
  %v1_e3dc = trunc i32 %v3_e3d811 to i8
  %v2_e3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_e3dc = add i32 %v2_e3dc, 11
  %v4_e3dc = inttoptr i32 %v3_e3dc to i8*
  store i8 %v1_e3dc, i8* %v4_e3dc, align 1
  %v0_e3e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e3e0 = trunc i32 %v0_e3e0 to i8
  %v2_e3e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e3e0 = add i32 %v2_e3e0, 10
  %v4_e3e0 = inttoptr i32 %v3_e3e0 to i8*
  store i8 %v1_e3e0, i8* %v4_e3e0, align 1
  %v4_e3e4 = load i8, i8* @global_var_1b815.132, align 1
  %v5_e3e4 = zext i8 %v4_e3e4 to i32
  %v3_e3e8 = load i8, i8* bitcast (i8** @global_var_1b814.131 to i8*), align 4
  %v4_e3e8 = zext i8 %v3_e3e8 to i32
  %v4_e3ec = mul nuw nsw i32 %v5_e3e4, 256
  %v5_e3ec = or i32 %v4_e3e8, %v4_e3ec
  %v2_e3f0 = load i32, i32* %stack_var_-44, align 4
  %v2_e3f4 = add i32 %v5_e3ec, %v2_e3f0
  store i32 %v2_e3f4, i32* %r2.global-to-local, align 4
  %v0_e3f8 = load i32, i32* @r7, align 4
  %v3_e3f8 = mul i32 %v0_e3f8, 16
  %v1_e3fc = load i32, i32* %sl.global-to-local, align 4
  %v2_e3fc = add i32 %v1_e3fc, %v3_e3f8
  store i32 %v2_e3fc, i32* %r3.global-to-local, align 4
  %v0_e400 = load i32, i32* %lr.global-to-local, align 4
  %v1_e400 = add i32 %v0_e400, 1
  store i32 %v1_e400, i32* @lr, align 4
  %v3_e404 = sdiv i32 %v2_e3f4, 256
  store i32 %v3_e404, i32* %r1.global-to-local, align 4
  %v0_e408 = load i32, i32* %r6.global-to-local, align 4
  %v2_e408 = add i32 %v2_e3fc, 4
  %v3_e408 = inttoptr i32 %v2_e408 to i32*
  store i32 %v0_e408, i32* %v3_e408, align 4
  %v0_e40c = load i32, i32* @lr, align 4
  %v1_e40c = load i32, i32* @r8, align 4
  %v2_e40c = inttoptr i32 %v1_e40c to i32*
  store i32 %v0_e40c, i32* %v2_e40c, align 4
  %v0_e410 = load i32, i32* %r1.global-to-local, align 4
  %v1_e410 = trunc i32 %v0_e410 to i8
  store i8 %v1_e410, i8* @global_var_1b815.132, align 1
  %v0_e414 = load i32, i32* %r2.global-to-local, align 4
  %v1_e414 = trunc i32 %v0_e414 to i8
  store i8 %v1_e414, i8* bitcast (i8** @global_var_1b814.131 to i8*), align 4
  store i32 %v3_e278, i32* @r4, align 4
  store i32 %v6_e278, i32* @r5, align 4
  store i32 %v9_e278, i32* @r6, align 4
  store i32 %v12_e278, i32* @r7, align 4
  store i32 %v15_e278, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1b814.131 to i32)

; uselistorder directives
  uselistorder i32 %v1_e378, { 0, 2, 3, 1 }
  uselistorder i32 %v1_e344, { 1, 0 }
  uselistorder i32 %v1_e304, { 0, 2, 3, 1 }
  uselistorder i32 %v1_e2d0, { 1, 0 }
  uselistorder i32 %v3_e294, { 1, 2, 0 }
  uselistorder i32 %v3_e28c, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32 -70, { 0, 2, 1, 3 }
  uselistorder i32 (i8*)* @function_1013c, { 5, 6, 0, 1, 2, 3, 4, 29, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32 (i32, i32, i32, i32)* @function_116c4, { 9, 10, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_e42c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e42c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp232 = call i32 @__decompiler_undefined_function_0()
  %tmp239 = call i32 @__decompiler_undefined_function_0()
  %tmp240 = call i8* @__decompiler_undefined_function_2()
  %tmp241 = call i32 @__decompiler_undefined_function_0()
  %tmp242 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e42c = load i32, i32* @r4, align 4
  store i32 %v3_e42c, i32* %stack_var_-36, align 4
  %v6_e42c = load i32, i32* @r5, align 4
  %v18_e42c = load i32, i32* @sb, align 4
  %v21_e42c = load i32, i32* @sl, align 4
  %v0_e434 = call i32 @function_109e8()
  store i32 %v0_e434, i32* %r0.global-to-local, align 4
  %v7_e438 = icmp eq i32 %v0_e434, -1
  %. = zext i1 %v7_e438 to i32
  %tmp273 = icmp slt i32 %v0_e434, 1
  %storemerge229 = select i1 %tmp273, i32 %., i32 1
  store i32 %storemerge229, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1b880.123 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e454 = icmp eq i32 %storemerge229, 0
  store i1 %v2_e454, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e434, i32* @global_var_1b880.123, align 4
  br i1 %v2_e454, label %dec_label_pc_e468, label %dec_label_pc_e460

dec_label_pc_e460:                                ; preds = %dec_label_pc_e42c
  store i32 %v3_e42c, i32* %r4.global-to-local, align 4
  store i32 %v6_e42c, i32* %r5.global-to-local, align 4
  store i32 %v18_e42c, i32* @sb, align 4
  store i32 %v21_e42c, i32* @sl, align 4
  ret i32 %v0_e434

dec_label_pc_e468:                                ; preds = %dec_label_pc_e42c
  %v0_e468 = call i32 @function_103f4()
  store i32 %v0_e468, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b860.47 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e468, i32* @global_var_1b860.47, align 4
  %v1_e474 = call i32 @function_db10(i32 %v0_e468)
  %v0_e478 = load i32, i32* @r4, align 4
  store i32 %v0_e478, i32* %r0.global-to-local, align 4
  %v1_e47c = inttoptr i32 %v0_e478 to i32*
  %v2_e47c = call i32 @function_10c8c(i32* %v1_e47c)
  store i32 ptrtoint (i32* @global_var_1b818.125 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e47c, i32* @global_var_1b818.125, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e490 = call i32 @function_1157c(i32 256, i32 288)
  store i32 %v2_e490, i32* %lr.global-to-local, align 4
  %v0_e49c = load i32, i32* @r4, align 4
  store i32 %v0_e49c, i32* %stack_var_-52, align 4
  store i32 %v2_e490, i32* @global_var_1b878.137, align 4
  store i32 %v0_e49c, i32* %r3.global-to-local, align 4
  store i32 %v0_e49c, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_e49c, i32* %ip.global-to-local, align 4
  %v1_e4b4 = add i32 %v2_e490, 4
  store i32 %v1_e4b4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e4b8

dec_label_pc_e4b8:                                ; preds = %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge, %dec_label_pc_e468
  %v0_e4d0 = phi i32 [ %v0_e4d0.pre, %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge ], [ %v0_e49c, %dec_label_pc_e468 ]
  %v0_e4c0 = phi i32 [ %v0_e4d8, %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge ], [ %v0_e49c, %dec_label_pc_e468 ]
  %v1_e4c8 = phi i32 [ %v1_e4c8.pre, %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge ], [ %v2_e490, %dec_label_pc_e468 ]
  %v3_e4b8 = mul i32 %v0_e4c0, 256
  store i32 %v3_e4b8, i32* %r2.global-to-local, align 4
  %v1_e4c0 = add i32 %v0_e4c0, 1
  store i32 %v1_e4c0, i32* %ip.global-to-local, align 4
  %v2_e4c4 = mul i32 %v0_e4c0, 288
  %v2_e4c8 = add i32 %v1_e4c8, 12
  %v2_e4d0 = add i32 %v2_e4c8, %v2_e4c4
  %v3_e4d0 = inttoptr i32 %v2_e4d0 to i32*
  store i32 %v0_e4d0, i32* %v3_e4d0, align 4
  %v0_e4d4 = load i32, i32* %r0.global-to-local, align 4
  %v1_e4d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_e4d4 = inttoptr i32 %v1_e4d4 to i32*
  store i32 %v0_e4d4, i32* %v2_e4d4, align 4
  %v3_e4d4 = load i32, i32* %r1.global-to-local, align 4
  %v4_e4d4 = add i32 %v3_e4d4, 288
  store i32 %v4_e4d4, i32* %r1.global-to-local, align 4
  %v0_e4d8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_e4d8, i32* %r3.global-to-local, align 4
  %v7_e4dc = icmp sgt i32 %v1_e4c0, 255
  br i1 %v7_e4dc, label %dec_label_pc_e4e0, label %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge

dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge:    ; preds = %dec_label_pc_e4b8
  %v1_e4c8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_e4d0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e4b8

dec_label_pc_e4e0:                                ; preds = %dec_label_pc_e4b8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_e4d8, i32* %stack_var_-52, align 4
  %v3_e4f0 = call i32 @function_11290(i32 2, i32 3, i32 6)
  store i32 %v3_e4f0, i32* %r0.global-to-local, align 4
  %v2_e4f8 = icmp eq i32 %v3_e4f0, -1
  store i1 %v2_e4f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e4f8 = icmp eq i32 %v3_e4f0, -1
  store i1 %v7_e4f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e4f0, i32* @r4, align 4
  store i32 %v3_e4f0, i32* @global_var_1b87c.139, align 4
  br i1 %v7_e4f8, label %dec_label_pc_ecc4, label %dec_label_pc_e508

dec_label_pc_e508:                                ; preds = %dec_label_pc_e4e0
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e50c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_e50c, i32* @r2, align 4
  %v2_e510 = call i32 @function_108f8(i32 %v3_e4f0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e518 = or i32 %v2_e510, 2048
  store i32 %v1_e518, i32* @r2, align 4
  %v0_e51c = load i32, i32* @r4, align 4
  store i32 %v0_e51c, i32* %r0.global-to-local, align 4
  %v2_e520 = call i32 @function_108f8(i32 %v0_e51c, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_e52c = load i32, i32* @global_var_1b87c.139, align 4
  store i32 %v2_e52c, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e534 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_e534, i32* %r1.global-to-local, align 4
  %v2_e538 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e538, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_e548 = call i32 @function_11260(i32 %v2_e52c, i32 %v0_e534, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_e548, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e54c = icmp eq i32 %v6_e548, 0
  store i1 %v2_e54c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e54c, label %dec_label_pc_e554, label %dec_label_pc_ecb8

dec_label_pc_e554:                                ; preds = %dec_label_pc_e508, %dec_label_pc_e554
  %v0_e554 = call i32 @function_dab8()
  %v3_e558 = mul i32 %v0_e554, 65536
  store i32 %v3_e558, i32* %r0.global-to-local, align 4
  %v1_e564 = mul i32 %v0_e554, 256
  %v3_e568 = and i32 %v1_e564, 65280
  %tmp276 = udiv i32 %v0_e554, 256
  %v4_e56c = urem i32 %tmp276, 256
  %v5_e56c = or i32 %v4_e56c, %v3_e568
  store i32 %v5_e56c, i32* %r3.global-to-local, align 4
  %v2_e570 = icmp ugt i32 %v5_e56c, 1023
  store i1 %v2_e570, i1* %cpsr_c.global-to-local, align 1
  %v7_e570 = icmp eq i32 %v5_e56c, 1024
  store i1 %v7_e570, i1* %cpsr_z.global-to-local, align 1
  %v3_e574 = icmp ult i32 %v5_e56c, 1022
  br i1 %v3_e574, label %dec_label_pc_e554, label %dec_label_pc_e578

dec_label_pc_e578:                                ; preds = %dec_label_pc_e554
  %v5_e560.le = trunc i32 %v0_e554 to i8
  store i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1b7e8.141 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1b7eb.142 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1b7ea.143 to i8*), align 4
  %v0_e5ac = call i32 @function_dab8()
  %v1_e5ac = trunc i32 %v0_e5ac to i8
  store i32 %v0_e5ac, i32* %r0.global-to-local, align 4
  %v3_e5b4 = load i8, i8* @global_var_1b808.146, align 1
  store i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), i32* %lr.global-to-local, align 4
  %v4_e5bc228 = udiv i32 %v0_e5ac, 256
  %v1_e5c0 = trunc i32 %v4_e5bc228 to i8
  store i8 %v1_e5c0, i8* bitcast (i32* @global_var_1b7ed.147 to i8*), align 4
  %v4_e5c4 = sext i8 %v5_e560.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1b7f1.148 to i8*), align 4
  %tmp = urem i8 %v3_e5b4, 16
  %v1_e5d0 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1b7fc.145 to i32), i32* %r2.global-to-local, align 4
  %v1_e5d8 = and i32 %v4_e5c4, 128
  %v2_e5d8 = icmp ne i32 %v1_e5d8, 0
  store i1 %v2_e5d8, i1* %cpsr_c.global-to-local, align 1
  %v3_e5d8 = sdiv i32 %v4_e5c4, 256
  store i32 %v3_e5d8, i32* %ip.global-to-local, align 4
  %v1_e5dc = or i32 %v1_e5d0, 80
  store i32 %v1_e5dc, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1b7f0.149 to i8*), align 4
  %v1_e5e8 = trunc i32 %v1_e5dc to i8
  store i8 %v1_e5e8, i8* @global_var_1b808.146, align 1
  store i8 23, i8* bitcast (i32* @global_var_1b7ff.150 to i8*), align 4
  store i32 %v4_e5c4, i32* %r3.global-to-local, align 4
  %v1_e5f8 = trunc i32 %v3_e5d8 to i8
  store i8 %v1_e5f8, i8* bitcast (i32* @global_var_1b7fd.151 to i8*), align 4
  store i8 %v1_e5ac, i8* bitcast (i32* @global_var_1b7ec.152 to i8*), align 4
  store i8 %v5_e560.le, i8* bitcast (i32* @global_var_1b7fc.145 to i8*), align 4
  %v0_e604 = load i32, i32* @r5, align 4
  %v1_e604 = trunc i32 %v0_e604 to i8
  store i8 %v1_e604, i8* bitcast (i32* @global_var_1b7fe.153 to i8*), align 4
  %v0_e608 = call i32 @function_dab8()
  %v1_e608 = trunc i32 %v0_e608 to i8
  %v3_e610 = load i8, i8* @global_var_1b809.154, align 1
  %v4_e610 = zext i8 %v3_e610 to i32
  store i32 ptrtoint (i32* @global_var_1b7fc.145 to i32), i32* @lr, align 4
  %v2_e618 = and i32 %v0_e608, 128
  %v3_e618 = icmp ne i32 %v2_e618, 0
  store i1 %v3_e618, i1* %cpsr_c.global-to-local, align 1
  %v4_e618 = sdiv i32 %v0_e608, 256
  store i32 %v4_e618, i32* %ip.global-to-local, align 4
  %v1_e61c = or i32 %v4_e610, 2
  store i32 %v1_e61c, i32* %r3.global-to-local, align 4
  store i32 %v0_e608, i32* @r4, align 4
  %v1_e624 = trunc i32 %v4_e618 to i8
  store i8 %v1_e624, i8* bitcast (i32* @global_var_1b80b.155 to i8*), align 4
  %v1_e628 = trunc i32 %v1_e61c to i8
  store i8 %v1_e628, i8* @global_var_1b809.154, align 1
  store i8 %v1_e608, i8* bitcast (i32* @global_var_1b80a.156 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13160.160 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e63c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint (i32* @global_var_13160.160 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32* %r1.global-to-local, align 4
  %v5_e64c = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13120.164 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e65c = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32 ptrtoint ([5 x i8]* @global_var_13120.164 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13160.160 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e66c = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32 ptrtoint (i32* @global_var_13160.160 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_130a4.166 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e67c = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32 ptrtoint ([5 x i8]* @global_var_130a4.166 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_130ac.168 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e68c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_130ac.168 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_130b4.170 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e69c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([6 x i8]* @global_var_130b4.170 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_130bc.172 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e6ac = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_130bc.172 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_130c4.174 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_e6bc = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([9 x i8]* @global_var_130c4.174 to i32), i32 13)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_130d0.176 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e6cc = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_130d0.176 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_130d8.178 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e6dc = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([4 x i8]* @global_var_130d8.178 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_130dc.180 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_130dc.180 to i32), i32* %r1.global-to-local, align 4
  %v5_e6ec = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_130dc.180 to i32), i32 ptrtoint ([5 x i8]* @global_var_130dc.180 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_130e4.182 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_130e4.182 to i32), i32* %r1.global-to-local, align 4
  %v5_e6fc = call i32 @function_e278(i32 ptrtoint ([8 x i8]* @global_var_130e4.182 to i32), i32 ptrtoint ([8 x i8]* @global_var_130e4.182 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_13120.164 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13120.164 to i32), i32* %r1.global-to-local, align 4
  %v5_e70c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13120.164 to i32), i32 ptrtoint ([5 x i8]* @global_var_13120.164 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_130ec.184 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e71c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([4 x i8]* @global_var_130ec.184 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_130f0.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13160.160 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e72c = call i32 @function_e278(i32 ptrtoint ([8 x i8]* @global_var_130f0.186 to i32), i32 ptrtoint (i32* @global_var_13160.160 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_130f0.186 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e73c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([8 x i8]* @global_var_130f0.186 to i32), i32 11)
  store i32 ptrtoint ([4 x i8]* @global_var_130f8.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13160.160 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e74c = call i32 @function_e278(i32 ptrtoint ([4 x i8]* @global_var_130f8.188 to i32), i32 ptrtoint (i32* @global_var_13160.160 to i32), i32 3)
  store i32 ptrtoint ([7 x i8]* @global_var_130fc.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13160.160 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e75c = call i32 @function_e278(i32 ptrtoint ([7 x i8]* @global_var_130fc.190 to i32), i32 ptrtoint (i32* @global_var_13160.160 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_13104.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13160.160 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e76c = call i32 @function_e278(i32 ptrtoint ([4 x i8]* @global_var_13104.192 to i32), i32 ptrtoint (i32* @global_var_13160.160 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13108.194 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e77c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([5 x i8]* @global_var_13108.194 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13110.196 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e78c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([9 x i8]* @global_var_13110.196 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1311c.198 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e79c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([9 x i8]* @global_var_1311c.198 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13128.200 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e7ac = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([6 x i8]* @global_var_13128.200 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13130.202 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e7bc = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([6 x i8]* @global_var_13130.202 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r1.global-to-local, align 4
  %v5_e7cc = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13138.204 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e7dc = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([6 x i8]* @global_var_13138.204 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13140.206 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e7ec = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32 ptrtoint ([8 x i8]* @global_var_13140.206 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_13148.208 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13148.208 to i32), i32* %r1.global-to-local, align 4
  %v5_e7fc = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13148.208 to i32), i32 ptrtoint ([5 x i8]* @global_var_13148.208 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13150.210 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e80c = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32 ptrtoint ([5 x i8]* @global_var_13150.210 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13158.212 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_e81c = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), i32 ptrtoint ([9 x i8]* @global_var_13158.212 to i32), i32 13)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13158.212 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e82c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([9 x i8]* @global_var_13158.212 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_13164.214 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_e83c = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_13164.214 to i32), i32 10)
  %v2_e844 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_e844, i32* %r0.global-to-local, align 4
  %v2_e848 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_e848, i32* %r1.global-to-local, align 4
  %tmp277 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_e854

dec_label_pc_e854:                                ; preds = %dec_label_pc_eeac, %dec_label_pc_e578
  %stack_var_-1872.0 = phi i32 [ %tmp239, %dec_label_pc_e578 ], [ %stack_var_-1872.2, %dec_label_pc_eeac ]
  %stack_var_-1884.0 = phi i8* [ %tmp277, %dec_label_pc_e578 ], [ %stack_var_-1884.1, %dec_label_pc_eeac ]
  %v0_eb84 = phi i32 [ %v2_e844, %dec_label_pc_e578 ], [ %stack_var_-1880.1, %dec_label_pc_eeac ]
  %stack_var_-1876.0 = phi i8 [ %v5_e560.le, %dec_label_pc_e578 ], [ %stack_var_-1876.1, %dec_label_pc_eeac ]
  store i32 ptrtoint (i32* @global_var_1b818.125 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_e85c = load i32, i32* @global_var_1b818.125, align 4
  store i32 %v2_e85c, i32* @r8, align 4
  %v3_e860 = icmp uge i32 %stack_var_-1872.0, %v2_e85c
  store i1 %v3_e860, i1* %cpsr_c.global-to-local, align 1
  %v9_e860 = icmp eq i32 %stack_var_-1872.0, %v2_e85c
  store i1 %v9_e860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e860, label %dec_label_pc_eb0c, label %dec_label_pc_e868

dec_label_pc_e868:                                ; preds = %dec_label_pc_e854
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_eadc = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_e874

dec_label_pc_e874:                                ; preds = %.thread48.dec_label_pc_e874_crit_edge, %dec_label_pc_e868
  %v0_e874 = phi i32 [ %v0_e874.pre, %.thread48.dec_label_pc_e874_crit_edge ], [ 0, %dec_label_pc_e868 ]
  store i32 %v0_e874, i32* %stack_var_-92, align 4
  store i32 %v0_e874, i32* %stack_var_-84, align 4
  %v0_e884 = call i32 @function_dab8()
  %v1_e884 = trunc i32 %v0_e884 to i8
  store i32 %v0_e884, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b860.47 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), i32* %r1.global-to-local, align 4
  %v2_e890 = load i32, i32* @global_var_1b860.47, align 4
  store i32 %v2_e890, i32* %r2.global-to-local, align 4
  %v2_e894 = and i32 %v0_e884, 128
  %v3_e894 = icmp ne i32 %v2_e894, 0
  store i1 %v3_e894, i1* %cpsr_c.global-to-local, align 1
  %v4_e894 = sdiv i32 %v0_e884, 256
  store i32 %v4_e894, i32* %r3.global-to-local, align 4
  %v1_e898 = trunc i32 %v4_e894 to i8
  store i8 %v1_e898, i8* bitcast (i32* @global_var_1b7ed.147 to i8*), align 4
  store i32 %v2_e890, i32* @global_var_1b7f4.215, align 4
  store i8 %v1_e884, i8* bitcast (i32* @global_var_1b7ec.152 to i8*), align 4
  br label %dec_label_pc_e8a4

dec_label_pc_e8a4:                                ; preds = %dec_label_pc_e978, %dec_label_pc_e8d4, %dec_label_pc_e9ac, %dec_label_pc_e9a0, %dec_label_pc_e994, %dec_label_pc_e988, %.thread33, %bb296, %bb295, %bb294, %bb293, %bb292, %dec_label_pc_e970, %dec_label_pc_e968, %bb288, %dec_label_pc_e938, %dec_label_pc_e914, %bb281, %dec_label_pc_e8e4, %bb280, %dec_label_pc_e8cc, %bb279, %bb298, %dec_label_pc_e874
  %v0_e8a4 = call i32 @function_dab8()
  store i32 %v0_e8a4, i32* %r0.global-to-local, align 4
  %v1_e8a8 = urem i32 %v0_e8a4, 256
  store i32 %v1_e8a8, i32* %r1.global-to-local, align 4
  %v3_e8ac = udiv i32 %v0_e8a4, 256
  store i32 %v3_e8ac, i32* %r3.global-to-local, align 4
  %v3_e8b0 = udiv i32 %v0_e8a4, 65536
  store i32 %v3_e8b0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e8b4 = icmp eq i32 %v1_e8a8, 0
  store i1 %v2_e8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8b4, label %bb279, label %bb278

bb278:                                            ; preds = %dec_label_pc_e8a4
  %v3_e8b8 = icmp ugt i32 %v1_e8a8, 126
  store i1 %v3_e8b8, i1* %cpsr_c.global-to-local, align 1
  %v8_e8b8 = icmp eq i32 %v1_e8a8, 127
  store i1 %v8_e8b8, i1* %cpsr_z.global-to-local, align 1
  br label %bb279

bb279:                                            ; preds = %dec_label_pc_e8a4, %bb278
  %v0_e8c8 = phi i1 [ true, %dec_label_pc_e8a4 ], [ %v8_e8b8, %bb278 ]
  %v1_e8bc = urem i32 %v3_e8ac, 256
  store i32 %v1_e8bc, i32* %ip.global-to-local, align 4
  %v1_e8c0 = urem i32 %v3_e8b0, 256
  store i32 %v1_e8c0, i32* %r2.global-to-local, align 4
  %v1_e8c4 = and i32 %v0_e8a4, 8388608
  %v2_e8c4 = icmp ne i32 %v1_e8c4, 0
  store i1 %v2_e8c4, i1* %cpsr_c.global-to-local, align 1
  %v3_e8c4 = udiv i32 %v0_e8a4, 16777216
  store i32 %v3_e8c4, i32* %r0.global-to-local, align 4
  br i1 %v0_e8c8, label %dec_label_pc_e8a4, label %dec_label_pc_e8cc

dec_label_pc_e8cc:                                ; preds = %bb279
  %v2_e8cc = icmp ugt i32 %v1_e8a8, 2
  store i1 %v2_e8cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e8cc = icmp eq i32 %v1_e8a8, 3
  store i1 %v7_e8cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8cc, label %dec_label_pc_e8a4, label %dec_label_pc_e8d4

dec_label_pc_e8d4:                                ; preds = %dec_label_pc_e8cc
  %v1_e8d4 = add nsw i32 %v1_e8a8, -15
  store i32 %v1_e8d4, i32* %r3.global-to-local, align 4
  %v2_e8d8 = icmp ugt i32 %v1_e8a8, 55
  store i1 %v2_e8d8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8d8 = icmp eq i32 %v1_e8a8, 56
  store i1 %v7_e8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8d8, label %dec_label_pc_e8a4, label %bb280

bb280:                                            ; preds = %dec_label_pc_e8d4
  %v3_e8dc = icmp ne i32 %v1_e8d4, 0
  store i1 %v3_e8dc, i1* %cpsr_c.global-to-local, align 1
  %v8_e8dc = icmp eq i32 %v1_e8d4, 1
  store i1 %v8_e8dc, i1* %cpsr_z.global-to-local, align 1
  %v2_e8e0 = xor i1 %v3_e8dc, true
  %v3_e8e0 = or i1 %v8_e8dc, %v2_e8e0
  br i1 %v3_e8e0, label %dec_label_pc_e8a4, label %dec_label_pc_e8e4

dec_label_pc_e8e4:                                ; preds = %bb280
  %v2_e8e4 = icmp ugt i32 %v1_e8a8, 9
  store i1 %v2_e8e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e8e4 = icmp eq i32 %v1_e8a8, 10
  store i1 %v7_e8e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8e4, label %dec_label_pc_e8a4, label %dec_label_pc_e8ec

dec_label_pc_e8ec:                                ; preds = %dec_label_pc_e8e4
  %v2_e8ec = icmp ugt i32 %v1_e8a8, 191
  store i1 %v2_e8ec, i1* %cpsr_c.global-to-local, align 1
  %v7_e8ec = icmp eq i32 %v1_e8a8, 192
  store i1 %v7_e8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8ec, label %bb281, label %dec_label_pc_e8f8

bb281:                                            ; preds = %dec_label_pc_e8ec
  %v3_e8f0 = icmp ugt i32 %v1_e8bc, 167
  store i1 %v3_e8f0, i1* %cpsr_c.global-to-local, align 1
  %v8_e8f0 = icmp eq i32 %v1_e8bc, 168
  store i1 %v8_e8f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e8f0, label %dec_label_pc_e8a4, label %dec_label_pc_e8f8

dec_label_pc_e8f8:                                ; preds = %dec_label_pc_e8ec, %bb281
  %v7_e8f8 = icmp eq i32 %v1_e8a8, 172
  %.347 = zext i1 %v7_e8f8 to i32
  store i32 %.347, i32* %r3.global-to-local, align 4
  %v2_e904 = icmp ugt i32 %v1_e8bc, 14
  store i1 %v2_e904, i1* %cpsr_c.global-to-local, align 1
  %v7_e904 = icmp eq i32 %v1_e8bc, 15
  store i1 %v7_e904, i1* %cpsr_z.global-to-local, align 1
  %v2_e908 = xor i1 %v2_e904, true
  %v3_e908 = or i1 %v7_e904, %v2_e908
  br i1 %v3_e908, label %.thread11, label %bb284

.thread11:                                        ; preds = %dec_label_pc_e8f8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e91c

bb284:                                            ; preds = %dec_label_pc_e8f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e90c = icmp eq i1 %v7_e8f8, false
  store i1 %v2_e90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e90c, label %dec_label_pc_e91c, label %dec_label_pc_e914

dec_label_pc_e914:                                ; preds = %bb284
  %v2_e914 = icmp ugt i32 %v1_e8bc, 30
  store i1 %v2_e914, i1* %cpsr_c.global-to-local, align 1
  %v7_e914 = icmp eq i32 %v1_e8bc, 31
  store i1 %v7_e914, i1* %cpsr_z.global-to-local, align 1
  %v2_e918 = xor i1 %v2_e914, true
  %v3_e918 = or i1 %v7_e914, %v2_e918
  br i1 %v3_e918, label %dec_label_pc_e8a4, label %dec_label_pc_e91c

dec_label_pc_e91c:                                ; preds = %.thread11, %dec_label_pc_e914, %bb284
  %v7_e91c = icmp eq i32 %v1_e8a8, 100
  %.348 = zext i1 %v7_e91c to i32
  store i32 %.348, i32* %r3.global-to-local, align 4
  %v2_e928 = icmp ugt i32 %v1_e8bc, 62
  store i1 %v2_e928, i1* %cpsr_c.global-to-local, align 1
  %v7_e928 = icmp eq i32 %v1_e8bc, 63
  store i1 %v7_e928, i1* %cpsr_z.global-to-local, align 1
  %v2_e92c = xor i1 %v2_e928, true
  %v3_e92c = or i1 %v7_e928, %v2_e92c
  br i1 %v3_e92c, label %.thread16, label %bb287

.thread16:                                        ; preds = %dec_label_pc_e91c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e940

bb287:                                            ; preds = %dec_label_pc_e91c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e930 = icmp eq i1 %v7_e91c, false
  store i1 %v2_e930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e930, label %dec_label_pc_e940, label %dec_label_pc_e938

dec_label_pc_e938:                                ; preds = %bb287
  %v2_e938 = icmp ugt i32 %v1_e8bc, 125
  store i1 %v2_e938, i1* %cpsr_c.global-to-local, align 1
  %v7_e938 = icmp eq i32 %v1_e8bc, 126
  store i1 %v7_e938, i1* %cpsr_z.global-to-local, align 1
  %v2_e93c = xor i1 %v2_e938, true
  %v3_e93c = or i1 %v7_e938, %v2_e93c
  br i1 %v3_e93c, label %dec_label_pc_e8a4, label %dec_label_pc_e940

dec_label_pc_e940:                                ; preds = %.thread16, %dec_label_pc_e938, %bb287
  %v2_e940 = icmp ugt i32 %v1_e8a8, 168
  store i1 %v2_e940, i1* %cpsr_c.global-to-local, align 1
  %v7_e940 = icmp eq i32 %v1_e8a8, 169
  store i1 %v7_e940, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e940, label %bb288, label %dec_label_pc_e94c

bb288:                                            ; preds = %dec_label_pc_e940
  %v3_e944 = icmp eq i32 %v1_e8bc, 255
  store i1 %v3_e944, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e944, label %dec_label_pc_e8a4, label %dec_label_pc_e94c

dec_label_pc_e94c:                                ; preds = %dec_label_pc_e940, %bb288
  %v7_e94c = icmp eq i32 %v1_e8a8, 198
  %.349 = zext i1 %v7_e94c to i32
  store i32 %.349, i32* %r3.global-to-local, align 4
  %v2_e958 = icmp ugt i32 %v1_e8bc, 16
  store i1 %v2_e958, i1* %cpsr_c.global-to-local, align 1
  %v7_e958 = icmp eq i32 %v1_e8bc, 17
  store i1 %v7_e958, i1* %cpsr_z.global-to-local, align 1
  %v2_e95c = xor i1 %v2_e958, true
  %v3_e95c = or i1 %v7_e958, %v2_e95c
  br i1 %v3_e95c, label %.thread22, label %bb291

.thread22:                                        ; preds = %dec_label_pc_e94c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e970

bb291:                                            ; preds = %dec_label_pc_e94c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e960 = icmp eq i1 %v7_e94c, false
  store i1 %v2_e960, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e960, label %dec_label_pc_e970, label %dec_label_pc_e968

dec_label_pc_e968:                                ; preds = %bb291
  %v2_e968 = icmp ugt i32 %v1_e8bc, 18
  store i1 %v2_e968, i1* %cpsr_c.global-to-local, align 1
  %v7_e968 = icmp eq i32 %v1_e8bc, 19
  store i1 %v7_e968, i1* %cpsr_z.global-to-local, align 1
  %v2_e96c = xor i1 %v2_e968, true
  %v3_e96c = or i1 %v7_e968, %v2_e96c
  br i1 %v3_e96c, label %dec_label_pc_e8a4, label %dec_label_pc_e970

dec_label_pc_e970:                                ; preds = %.thread22, %dec_label_pc_e968, %bb291
  %v2_e970 = icmp ugt i32 %v1_e8a8, 222
  store i1 %v2_e970, i1* %cpsr_c.global-to-local, align 1
  %v7_e970 = icmp eq i32 %v1_e8a8, 223
  store i1 %v7_e970, i1* %cpsr_z.global-to-local, align 1
  %v2_e974 = xor i1 %v7_e970, true
  %v3_e974 = and i1 %v2_e970, %v2_e974
  br i1 %v3_e974, label %dec_label_pc_e8a4, label %dec_label_pc_e978

dec_label_pc_e978:                                ; preds = %dec_label_pc_e970
  %v1_e978 = add nsw i32 %v1_e8a8, -6
  store i32 %v1_e978, i32* %r3.global-to-local, align 4
  %v2_e97c = icmp ugt i32 %v1_e8a8, 10
  store i1 %v2_e97c, i1* %cpsr_c.global-to-local, align 1
  %v7_e97c = icmp eq i32 %v1_e8a8, 11
  store i1 %v7_e97c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e97c, label %dec_label_pc_e8a4, label %bb292

bb292:                                            ; preds = %dec_label_pc_e978
  %v3_e980 = icmp ne i32 %v1_e978, 0
  store i1 %v3_e980, i1* %cpsr_c.global-to-local, align 1
  %v8_e980 = icmp eq i32 %v1_e978, 1
  store i1 %v8_e980, i1* %cpsr_z.global-to-local, align 1
  %v2_e984 = xor i1 %v3_e980, true
  %v3_e984 = or i1 %v8_e980, %v2_e984
  br i1 %v3_e984, label %dec_label_pc_e8a4, label %dec_label_pc_e988

dec_label_pc_e988:                                ; preds = %bb292
  %v2_e988 = icmp ugt i32 %v1_e8a8, 21
  store i1 %v2_e988, i1* %cpsr_c.global-to-local, align 1
  %v7_e988 = icmp eq i32 %v1_e8a8, 22
  store i1 %v7_e988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e988, label %dec_label_pc_e8a4, label %bb293

bb293:                                            ; preds = %dec_label_pc_e988
  %v3_e98c = icmp ugt i32 %v1_e8a8, 20
  store i1 %v3_e98c, i1* %cpsr_c.global-to-local, align 1
  %v8_e98c = icmp eq i32 %v1_e8a8, 21
  store i1 %v8_e98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e98c, label %dec_label_pc_e8a4, label %dec_label_pc_e994

dec_label_pc_e994:                                ; preds = %bb293
  %v2_e994 = icmp ugt i32 %v1_e8a8, 27
  store i1 %v2_e994, i1* %cpsr_c.global-to-local, align 1
  %v7_e994 = icmp eq i32 %v1_e8a8, 28
  store i1 %v7_e994, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e994, label %dec_label_pc_e8a4, label %bb294

bb294:                                            ; preds = %dec_label_pc_e994
  %v3_e998 = icmp ugt i32 %v1_e8a8, 25
  store i1 %v3_e998, i1* %cpsr_c.global-to-local, align 1
  %v8_e998 = icmp eq i32 %v1_e8a8, 26
  store i1 %v8_e998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e998, label %dec_label_pc_e8a4, label %dec_label_pc_e9a0

dec_label_pc_e9a0:                                ; preds = %bb294
  %v2_e9a0 = icmp ugt i32 %v1_e8a8, 29
  store i1 %v2_e9a0, i1* %cpsr_c.global-to-local, align 1
  %v7_e9a0 = icmp eq i32 %v1_e8a8, 30
  store i1 %v7_e9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9a0, label %dec_label_pc_e8a4, label %bb295

bb295:                                            ; preds = %dec_label_pc_e9a0
  %v3_e9a4 = icmp ugt i32 %v1_e8a8, 28
  store i1 %v3_e9a4, i1* %cpsr_c.global-to-local, align 1
  %v8_e9a4 = icmp eq i32 %v1_e8a8, 29
  store i1 %v8_e9a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9a4, label %dec_label_pc_e8a4, label %dec_label_pc_e9ac

dec_label_pc_e9ac:                                ; preds = %bb295
  %v2_e9ac = icmp ugt i32 %v1_e8a8, 54
  store i1 %v2_e9ac, i1* %cpsr_c.global-to-local, align 1
  %v7_e9ac = icmp eq i32 %v1_e8a8, 55
  store i1 %v7_e9ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9ac, label %dec_label_pc_e8a4, label %bb296

bb296:                                            ; preds = %dec_label_pc_e9ac
  %v3_e9b0 = icmp ugt i32 %v1_e8a8, 32
  store i1 %v3_e9b0, i1* %cpsr_c.global-to-local, align 1
  %v8_e9b0 = icmp eq i32 %v1_e8a8, 33
  store i1 %v8_e9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9b0, label %dec_label_pc_e8a4, label %dec_label_pc_e9b8

dec_label_pc_e9b8:                                ; preds = %bb296
  %v2_e9b8 = icmp ugt i32 %v1_e8a8, 214
  store i1 %v2_e9b8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9b8 = icmp eq i32 %v1_e8a8, 215
  store i1 %v7_e9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9b8, label %.thread33, label %bb297

bb297:                                            ; preds = %dec_label_pc_e9b8
  %v3_e9bc = icmp ugt i32 %v1_e8a8, 213
  store i1 %v3_e9bc, i1* %cpsr_c.global-to-local, align 1
  %v8_e9bc = icmp eq i32 %v1_e8a8, 214
  store i1 %v8_e9bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9bc, label %bb298, label %dec_label_pc_e9cc

.thread33:                                        ; preds = %dec_label_pc_e9b8
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e8a4

bb298:                                            ; preds = %bb297
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e8a4

dec_label_pc_e9cc:                                ; preds = %bb297
  store i32 0, i32* @r4, align 4
  %v5_e9d8 = call i32 @llvm.bswap.i32(i32 %v0_e8a4)
  store i32 %v5_e9d8, i32* %r3.global-to-local, align 4
  %tmp299 = and i32 %v0_e8a4, 65280
  %tmp300 = call i32 @llvm.bswap.i32(i32 %tmp299)
  %tmp301 = and i32 %v0_e8a4, 16711680
  %tmp302 = call i32 @llvm.bswap.i32(i32 %tmp301)
  %v3_e9e4 = mul nuw i32 %v3_e8c4, 16777216
  %v3_e9e8 = udiv i32 %tmp300, 256
  %v4_e9ec = mul nuw nsw i32 %tmp302, 256
  %tmp303 = and i32 %v0_e8a4, 32768
  %v3_e9f0 = icmp ne i32 %tmp303, 0
  store i1 %v3_e9f0, i1* %cpsr_c.global-to-local, align 1
  %v4_e9f0 = udiv i32 %v5_e9d8, 16777216
  store i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), i32* @r0, align 4
  %v5_e9f0 = or i32 %v4_e9f0, %v3_e9e4
  %v5_e9ec = or i32 %v5_e9f0, %v4_e9ec
  %v2_e9f8 = or i32 %v5_e9ec, %v3_e9e8
  store i32 %v2_e9f8, i32* %r2.global-to-local, align 4
  %v5_e9fc = trunc i32 %v4_e9f0 to i8
  store i8 %v5_e9fc, i8* @global_var_1b7f8.216, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1b7f2.217 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1b7f3.218 to i8*), align 4
  %v3_ea0c = call i32 @function_c690(i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_ea0c, 16777216
  %v1_ea14 = sdiv i32 %sext6, 16777216
  store i32 %v1_ea14, i32* %r3.global-to-local, align 4
  %v2_ea18 = and i32 %v1_ea14, 128
  %v3_ea18 = icmp ne i32 %v2_ea18, 0
  store i1 %v3_ea18, i1* %cpsr_c.global-to-local, align 1
  %v4_ea18 = ashr i32 %sext6, 31
  store i32 %v4_ea18, i32* %r2.global-to-local, align 4
  %v1_ea1c = trunc i32 %v1_ea14 to i8
  store i8 %v1_ea1c, i8* bitcast (i32* @global_var_1b7f2.217 to i8*), align 4
  %v1_ea20 = trunc i32 %v4_ea18 to i8
  store i8 %v1_ea20, i8* bitcast (i32* @global_var_1b7f3.218 to i8*), align 4
  %v3_ea24 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ea24, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_ea2c = call i32 @function_10810(i32 %v3_ea24, i32 10)
  store i32 %v4_ea2c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea30 = icmp eq i32 %v4_ea2c, 0
  store i1 %v2_ea30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea30, label %.thread199, label %bb304

.thread199:                                       ; preds = %dec_label_pc_e9cc
  store i32 ptrtoint (i32* @global_var_1b7fc.145 to i32), i32* @lr, align 4
  br label %.thread43.thread74

bb304:                                            ; preds = %dec_label_pc_e9cc
  store i32 ptrtoint (i32* @global_var_1b7fc.145 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_ea40 = load i32, i32* @r4, align 4
  %v2_ea40 = trunc i32 %v1_ea40 to i8
  store i8 %v2_ea40, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1b7fc.145 to i32), i32 2) to i8*), align 2
  %v0_ea44.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ea44.pr.pre, label %.thread43.thread74, label %.thread40

.thread40:                                        ; preds = %bb304
  %v1_ea44 = load i32, i32* %r3.global-to-local, align 4
  %v2_ea44 = trunc i32 %v1_ea44 to i8
  %v3_ea44 = load i32, i32* %r0.global-to-local, align 4
  %v4_ea44 = add i32 %v3_ea44, 3
  %v5_ea44 = inttoptr i32 %v4_ea44 to i8*
  store i8 %v2_ea44, i8* %v5_ea44, align 1
  %v0_ea4c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_ea4c.pr.pr, label %.thread46, label %.thread48

.thread43.thread74:                               ; preds = %bb304, %.thread199
  store i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), i32* %r0.global-to-local, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread40, %.thread43.thread74
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_ea54 = load i32, i32* @lr, align 4
  %v4_ea54 = add i32 %v3_ea54, 2
  %v5_ea54 = inttoptr i32 %v4_ea54 to i8*
  store i8 9, i8* %v5_ea54, align 1
  %v0_ea58.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ea58.pr.pr, label %bb305, label %.thread48

bb305:                                            ; preds = %.thread46
  %v1_ea58 = load i32, i32* %r2.global-to-local, align 4
  %v2_ea58 = trunc i32 %v1_ea58 to i8
  %v3_ea58 = load i32, i32* @lr, align 4
  %v4_ea58 = add i32 %v3_ea58, 3
  %v5_ea58 = inttoptr i32 %v4_ea58 to i8*
  store i8 %v2_ea58, i8* %v5_ea58, align 1
  br label %.thread48

.thread48:                                        ; preds = %.thread40, %.thread46, %bb305
  %v4_ea5c = load i8, i8* @global_var_1b7f8.216, align 1
  %v5_ea5c = sext i8 %v4_ea5c to i32
  store i32 %v5_ea5c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b7fc.145 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b7fc.145 to i32), i32* @r1, align 4
  store i8 %v4_ea5c, i8* @global_var_1b800.219, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_ea74 = load i32, i32* %sl.global-to-local, align 4
  %v1_ea74 = trunc i32 %v0_ea74 to i8
  store i8 %v1_ea74, i8* bitcast (i32* @global_var_1b80c.220 to i8*), align 4
  store i8 %v1_ea74, i8* bitcast (i32* @global_var_1b80d.221 to i8*), align 4
  %v5_ea7c = call i32 @function_c6ec(i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), i32 ptrtoint (i32* @global_var_1b7fc.145 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_ea7c, 16777216
  %v1_ea84 = sdiv i32 %sext, 16777216
  %v3_ea8c = ashr i32 %sext, 31
  %v2_ea90 = load i32, i32* @global_var_1b7fc.145, align 4
  %v1_ea98 = trunc i32 %v3_ea8c to i8
  store i8 %v1_ea98, i8* bitcast (i32* @global_var_1b80d.221 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_eaac = load i8, i8* @global_var_1b7f8.216, align 1
  %v4_eaac = sext i8 %v3_eaac to i32
  store i32 %v4_eaac, i32* @r4, align 4
  %v2_eab0 = load i32, i32* @global_var_1b87c.139, align 4
  store i32 %v2_eab0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b7fc.145 to i32), i32* %ip.global-to-local, align 4
  %v1_eac0 = and i32 %v2_ea90, 8388608
  %v2_eac0 = icmp ne i32 %v1_eac0, 0
  store i1 %v2_eac0, i1* %cpsr_c.global-to-local, align 1
  %v1_eac8 = trunc i32 %v1_ea84 to i8
  store i8 %v1_eac8, i8* bitcast (i32* @global_var_1b80c.220 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_eadc, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_eaf0 = call i32 @function_1122c(i32 %v2_eab0, i32* bitcast (i8** @global_var_1b7e8.141 to i32*), i32 40, i32 16384, i32 %v2_eadc, i32 16)
  store i32 %v8_eaf0, i32* %r0.global-to-local, align 4
  %v3_eaf4 = load i32, i32* %stack_var_-52, align 4
  %v1_eaf8 = add i32 %v3_eaf4, 1
  store i32 %v1_eaf8, i32* %r3.global-to-local, align 4
  %v3_eafc = icmp ugt i32 %v1_eaf8, 383
  store i1 %v3_eafc, i1* %cpsr_c.global-to-local, align 1
  %v8_eafc = icmp eq i32 %v1_eaf8, 384
  store i1 %v8_eafc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eaf8, i32* %stack_var_-52, align 4
  %v5_eb04 = icmp slt i32 %v1_eaf8, 384
  br i1 %v5_eb04, label %.thread48.dec_label_pc_e874_crit_edge, label %dec_label_pc_eb08

.thread48.dec_label_pc_e874_crit_edge:            ; preds = %.thread48
  %v0_e874.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e874

dec_label_pc_eb08:                                ; preds = %.thread48
  %v0_eb08 = load i32, i32* @r8, align 4
  br label %dec_label_pc_eb0c

dec_label_pc_eb0c:                                ; preds = %dec_label_pc_e854, %dec_label_pc_eb08
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_e854 ], [ %v0_eb08, %dec_label_pc_eb08 ]
  %v0_eb0c = call i32 @function_10f64()
  store i32 %v0_eb0c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_eb20 = inttoptr i32 %v0_eb0c to i32*
  %v6_eb48 = inttoptr i32 %v0_eb84 to i32*
  %v1_eb74 = add i32 %v0_eb84, 16
  %v2_eb74 = inttoptr i32 %v1_eb74 to i32*
  %v4_eb90 = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_eb98 = add i32 %v4_eb90, 1
  %v2_eb98 = inttoptr i32 %v1_eb98 to i8*
  %v1_ebbc = add i32 %v4_eb90, 2
  %v2_ebbc = inttoptr i32 %v1_ebbc to i8*
  %v1_ebc0 = add i32 %v4_eb90, 3
  %v2_ebc0 = inttoptr i32 %v1_ebc0 to i8*
  %v4_ebc4 = sext i8 %stack_var_-1876.0 to i32
  %v1_eca0 = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_eb84 = add i32 %v0_eb84, 9
  %v2_eb84 = inttoptr i32 %v1_eb84 to i8*
  %v1_ebd4 = add i32 %v4_eb90, 13
  %v2_ebd4 = inttoptr i32 %v1_ebd4 to i8*
  %v1_ebf8 = add i32 %v4_eb90, 8
  %v2_ebf8 = inttoptr i32 %v1_ebf8 to i32*
  %v1_ec38 = add i32 %v0_eb84, 12
  %v2_ec38 = inttoptr i32 %v1_ec38 to i32*
  br label %dec_label_pc_eb18

dec_label_pc_eb18:                                ; preds = %dec_label_pc_ebf8, %dec_label_pc_ebf0, %dec_label_pc_ebe8, %dec_label_pc_ebb8, %dec_label_pc_eba8, %dec_label_pc_eb84, %dec_label_pc_eb6c, %dec_label_pc_ebe0, %dec_label_pc_ebd4, %dec_label_pc_eb64, %dec_label_pc_ec98, %dec_label_pc_eb0c
  store i32 0, i32* %v2_eb20, align 4
  %v2_eb28 = load i32, i32* @global_var_1b87c.139, align 4
  store i32 %v2_eb28, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_eb84, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_eb48 = call i32 @function_111cc(i32 %v2_eb28, i32* %v6_eb48, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_eb48, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb4c = icmp eq i32 %v7_eb48, 0
  store i1 %v2_eb4c, i1* %cpsr_z.global-to-local, align 1
  %tmp306 = icmp slt i32 %v7_eb48, 1
  br i1 %tmp306, label %dec_label_pc_eccc, label %dec_label_pc_eb54

dec_label_pc_eb54:                                ; preds = %dec_label_pc_eb18
  store i32 %v0_eb0c, i32* %lr.global-to-local, align 4
  %v2_eb58 = load i32, i32* %v2_eb20, align 4
  store i32 %v2_eb58, i32* %r3.global-to-local, align 4
  %v2_eb5c = icmp ugt i32 %v2_eb58, 10
  store i1 %v2_eb5c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb5c = icmp eq i32 %v2_eb58, 11
  store i1 %v7_eb5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb5c, label %dec_label_pc_eccc, label %dec_label_pc_eb64

dec_label_pc_eb64:                                ; preds = %dec_label_pc_eb54
  %v2_eb64 = icmp ugt i32 %v7_eb48, 38
  store i1 %v2_eb64, i1* %cpsr_c.global-to-local, align 1
  %v7_eb64 = icmp eq i32 %v7_eb48, 39
  store i1 %v7_eb64, i1* %cpsr_z.global-to-local, align 1
  %v2_eb68 = xor i1 %v2_eb64, true
  %v3_eb68 = or i1 %v7_eb64, %v2_eb68
  br i1 %v3_eb68, label %dec_label_pc_eb18, label %dec_label_pc_eb6c

dec_label_pc_eb6c:                                ; preds = %dec_label_pc_eb64
  store i32 %v0_eb84, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b860.47 to i32), i32* %r1.global-to-local, align 4
  %v3_eb74 = load i32, i32* %v2_eb74, align 4
  store i32 %v3_eb74, i32* %r2.global-to-local, align 4
  %v2_eb78 = load i32, i32* @global_var_1b860.47, align 4
  store i32 %v2_eb78, i32* %r3.global-to-local, align 4
  %v3_eb7c = icmp uge i32 %v3_eb74, %v2_eb78
  store i1 %v3_eb7c, i1* %cpsr_c.global-to-local, align 1
  %v9_eb7c = icmp eq i32 %v3_eb74, %v2_eb78
  store i1 %v9_eb7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_eb7c, label %dec_label_pc_eb84, label %dec_label_pc_eb18

dec_label_pc_eb84:                                ; preds = %dec_label_pc_eb6c
  %v3_eb84 = load i8, i8* %v2_eb84, align 1
  %v4_eb84 = zext i8 %v3_eb84 to i32
  store i32 %v4_eb84, i32* %r3.global-to-local, align 4
  %v2_eb88 = icmp ugt i8 %v3_eb84, 5
  store i1 %v2_eb88, i1* %cpsr_c.global-to-local, align 1
  %v7_eb88 = icmp eq i8 %v3_eb84, 6
  store i1 %v7_eb88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb88, label %dec_label_pc_eb90, label %dec_label_pc_eb18

dec_label_pc_eb90:                                ; preds = %dec_label_pc_eb84
  store i32 %v4_eb90, i32* %r3.global-to-local, align 4
  %v2_eb94 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_eb94 = zext i8 %v2_eb94 to i32
  store i32 %v3_eb94, i32* %r2.global-to-local, align 4
  %v3_eb98 = load i8, i8* %v2_eb98, align 1
  %v4_eb98 = zext i8 %v3_eb98 to i32
  store i32 %v4_eb98, i32* %r3.global-to-local, align 4
  %v4_eb9c = mul nuw nsw i32 %v4_eb98, 256
  %v5_eb9c = or i32 %v4_eb9c, %v3_eb94
  store i32 %v5_eb9c, i32* %r2.global-to-local, align 4
  %v2_eba0 = icmp ugt i32 %v5_eb9c, 5887
  store i1 %v2_eba0, i1* %cpsr_c.global-to-local, align 1
  %v7_eba0 = icmp eq i32 %v5_eb9c, 5888
  store i1 %v7_eba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eba0, label %dec_label_pc_ebb8, label %dec_label_pc_eba8

dec_label_pc_eba8:                                ; preds = %dec_label_pc_eb90
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ebb0 = icmp ugt i32 %v5_eb9c, 4872
  store i1 %v3_ebb0, i1* %cpsr_c.global-to-local, align 1
  %v9_ebb0 = icmp eq i32 %v5_eb9c, 4873
  store i1 %v9_ebb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebb0, label %dec_label_pc_ebb8, label %dec_label_pc_eb18

dec_label_pc_ebb8:                                ; preds = %dec_label_pc_eba8, %dec_label_pc_eb90
  store i32 %v4_eb90, i32* %ip.global-to-local, align 4
  %v3_ebbc = load i8, i8* %v2_ebbc, align 1
  %v4_ebbc = zext i8 %v3_ebbc to i32
  store i32 %v4_ebbc, i32* %r3.global-to-local, align 4
  %v3_ebc0 = load i8, i8* %v2_ebc0, align 1
  %v4_ebc0 = zext i8 %v3_ebc0 to i32
  store i32 %v4_ebc0, i32* %r2.global-to-local, align 4
  store i32 %v4_ebc4, i32* %lr.global-to-local, align 4
  %v4_ebc8 = mul nuw nsw i32 %v4_ebc0, 256
  %v5_ebc8 = or i32 %v4_ebc8, %v4_ebbc
  store i32 %v5_ebc8, i32* %r3.global-to-local, align 4
  %v3_ebcc = icmp uge i32 %v5_ebc8, %v4_ebc4
  store i1 %v3_ebcc, i1* %cpsr_c.global-to-local, align 1
  %v9_ebcc = icmp eq i32 %v5_ebc8, %v4_ebc4
  store i1 %v9_ebcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebcc, label %dec_label_pc_ebd4, label %dec_label_pc_eb18

dec_label_pc_ebd4:                                ; preds = %dec_label_pc_ebb8
  %v3_ebd4 = load i8, i8* %v2_ebd4, align 1
  %v4_ebd4 = zext i8 %v3_ebd4 to i32
  store i32 %v4_ebd4, i32* %r3.global-to-local, align 4
  %v1_ebd8 = and i32 %v4_ebd4, 2
  %v2_ebd8 = icmp eq i32 %v1_ebd8, 0
  store i1 %v2_ebd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebd8, label %dec_label_pc_eb18, label %dec_label_pc_ebe0

dec_label_pc_ebe0:                                ; preds = %dec_label_pc_ebd4
  %v1_ebe0 = and i32 %v4_ebd4, 16
  %v2_ebe0 = icmp eq i32 %v1_ebe0, 0
  store i1 %v2_ebe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebe0, label %dec_label_pc_eb18, label %dec_label_pc_ebe8

dec_label_pc_ebe8:                                ; preds = %dec_label_pc_ebe0
  %v1_ebe8 = and i32 %v4_ebd4, 4
  %v2_ebe8 = icmp eq i32 %v1_ebe8, 0
  store i1 %v2_ebe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebe8, label %dec_label_pc_ebf0, label %dec_label_pc_eb18

dec_label_pc_ebf0:                                ; preds = %dec_label_pc_ebe8
  %tmp450 = urem i8 %v3_ebd4, 2
  %v2_ebf0 = icmp eq i8 %tmp450, 0
  store i1 %v2_ebf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebf0, label %dec_label_pc_ebf8, label %dec_label_pc_eb18

dec_label_pc_ebf8:                                ; preds = %dec_label_pc_ebf0
  %v3_ebf8 = load i32, i32* %v2_ebf8, align 4
  %v2_ec14 = call i32 @llvm.bswap.i32(i32 %v3_ebf8)
  %v1_ec18 = add i32 %v2_ec14, -1
  %v1_ec1c = udiv i32 %v1_ec18, 256
  %v3_ec20 = and i32 %v1_ec1c, 65280
  %v1_ec24 = and i32 %v1_ec18, 65280
  store i32 %v1_ec24, i32* %r2.global-to-local, align 4
  %v3_ec28 = mul i32 %v1_ec18, 16777216
  %v4_ec2c = udiv i32 %v1_ec18, 16777216
  %v5_ec2c = or i32 %v3_ec20, %v4_ec2c
  store i32 %v5_ec2c, i32* %r1.global-to-local, align 4
  store i32 %v0_eb84, i32* %r3.global-to-local, align 4
  %v4_ec34 = mul nuw nsw i32 %v1_ec24, 256
  %v5_ec34 = or i32 %v4_ec34, %v3_ec28
  store i32 %v5_ec34, i32* %r0.global-to-local, align 4
  %v3_ec38 = load i32, i32* %v2_ec38, align 4
  store i32 %v3_ec38, i32* %r2.global-to-local, align 4
  %v2_ec3c = call i32 @llvm.bswap.i32(i32 %v1_ec18)
  store i32 %v2_ec3c, i32* %ip.global-to-local, align 4
  %v3_ec40 = icmp uge i32 %v2_ec3c, %v3_ec38
  store i1 %v3_ec40, i1* %cpsr_c.global-to-local, align 1
  %v9_ec40 = icmp eq i32 %v2_ec3c, %v3_ec38
  store i1 %v9_ec40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec40, label %dec_label_pc_ec48, label %dec_label_pc_eb18

dec_label_pc_ec48:                                ; preds = %dec_label_pc_ebf8
  %v0_ec48 = load i32, i32* @r4, align 4
  %v2_ec48 = icmp ugt i32 %v0_ec48, 254
  store i1 %v2_ec48, i1* %cpsr_c.global-to-local, align 1
  %v7_ec48 = icmp eq i32 %v0_ec48, 255
  store i1 %v7_ec48, i1* %cpsr_z.global-to-local, align 1
  %v8_ec4c = icmp sgt i32 %v0_ec48, 255
  br i1 %v8_ec4c, label %dec_label_pc_eccc, label %dec_label_pc_ec50

dec_label_pc_ec50:                                ; preds = %dec_label_pc_ec48
  store i32 ptrtoint (i32* @global_var_1b878.137 to i32), i32* %lr.global-to-local, align 4
  %v3_ec54 = mul i32 %v0_ec48, 256
  store i32 %v3_ec54, i32* %r2.global-to-local, align 4
  %v2_ec58 = load i32, i32* @global_var_1b878.137, align 4
  store i32 %v2_ec58, i32* %r1.global-to-local, align 4
  %v2_ec60 = mul i32 %v0_ec48, 288
  store i32 %v2_ec60, i32* %r3.global-to-local, align 4
  %v2_ec64 = add i32 %v2_ec58, %v2_ec60
  store i32 %v2_ec64, i32* @r0, align 4
  %v1_ec68 = add i32 %v2_ec64, 12
  %v2_ec68 = inttoptr i32 %v1_ec68 to i32*
  %v3_ec68 = load i32, i32* %v2_ec68, align 4
  store i32 %v3_ec68, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec6c = icmp eq i32 %v3_ec68, 0
  store i1 %v2_ec6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec6c, label %dec_label_pc_ec98, label %dec_label_pc_ec78.preheader

dec_label_pc_ec78.preheader:                      ; preds = %dec_label_pc_ec50
  %v2_ec70 = add i32 %v2_ec64, 288
  store i32 %v2_ec70, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ec78

dec_label_pc_ec78:                                ; preds = %dec_label_pc_ec78.preheader, %dec_label_pc_ec84
  %v0_ec84 = phi i32 [ %v2_ec70, %dec_label_pc_ec78.preheader ], [ %v1_ec90, %dec_label_pc_ec84 ]
  %v0_ec78 = phi i32 [ %v0_ec48, %dec_label_pc_ec78.preheader ], [ %v1_ec78, %dec_label_pc_ec84 ]
  %v1_ec78 = add i32 %v0_ec78, 1
  store i32 %v1_ec78, i32* @r4, align 4
  %v7_ec7c = icmp eq i32 %v1_ec78, 256
  br i1 %v7_ec7c, label %dec_label_pc_eccc.loopexit, label %dec_label_pc_ec84

dec_label_pc_ec84:                                ; preds = %dec_label_pc_ec78
  store i32 %v0_ec84, i32* @r0, align 4
  %v1_ec88 = add i32 %v0_ec84, 12
  %v2_ec88 = inttoptr i32 %v1_ec88 to i32*
  %v3_ec88 = load i32, i32* %v2_ec88, align 4
  %v2_ec8c = icmp eq i32 %v3_ec88, 0
  %v1_ec90 = add i32 %v0_ec84, 288
  store i32 %v1_ec90, i32* %r3.global-to-local, align 4
  br i1 %v2_ec8c, label %dec_label_pc_ec98.loopexit, label %dec_label_pc_ec78

dec_label_pc_ec98.loopexit:                       ; preds = %dec_label_pc_ec84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ec98

dec_label_pc_ec98:                                ; preds = %dec_label_pc_ec98.loopexit, %dec_label_pc_ec50
  %v1_ec98 = phi i32 [ %v0_ec84, %dec_label_pc_ec98.loopexit ], [ %v2_ec64, %dec_label_pc_ec50 ]
  %v2_ec98 = add i32 %v1_ec98, 16
  %v3_ec98 = inttoptr i32 %v2_ec98 to i32*
  store i32 %v3_ec38, i32* %v3_ec98, align 4
  store i32 %v4_eb90, i32* %r1.global-to-local, align 4
  %v2_eca0 = load i32, i32* %v1_eca0, align 4
  store i32 %v2_eca0, i32* %r2.global-to-local, align 4
  %v1_eca4 = and i32 %v2_eca0, 128
  %v2_eca4 = icmp ne i32 %v1_eca4, 0
  store i1 %v2_eca4, i1* %cpsr_c.global-to-local, align 1
  %v3_eca4 = sdiv i32 %v2_eca0, 256
  store i32 %v3_eca4, i32* %r3.global-to-local, align 4
  %v1_eca8 = trunc i32 %v3_eca4 to i8
  %v2_eca8 = load i32, i32* @r0, align 4
  %v3_eca8 = add i32 %v2_eca8, 21
  %v4_eca8 = inttoptr i32 %v3_eca8 to i8*
  store i8 %v1_eca8, i8* %v4_eca8, align 1
  %v0_ecac = load i32, i32* %r2.global-to-local, align 4
  %v1_ecac = trunc i32 %v0_ecac to i8
  %v2_ecac = load i32, i32* @r0, align 4
  %v3_ecac = add i32 %v2_ecac, 20
  %v4_ecac = inttoptr i32 %v3_ecac to i8*
  store i8 %v1_ecac, i8* %v4_ecac, align 1
  %v0_ecb0 = call i32 @function_e1a4()
  store i32 %v0_ecb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb18

dec_label_pc_ecb8:                                ; preds = %dec_label_pc_e508
  store i32 ptrtoint (i32* @global_var_1b87c.139 to i32), i32* %r2.global-to-local, align 4
  %v2_ecbc = load i32, i32* @global_var_1b87c.139, align 4
  store i32 %v2_ecbc, i32* %r0.global-to-local, align 4
  %v1_ecc0 = call i32 @function_109bc(i32 %v2_ecbc)
  store i32 %v1_ecc0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ecc4

dec_label_pc_ecc4:                                ; preds = %dec_label_pc_e4e0, %dec_label_pc_ecb8
  %v0_ecc4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ecc4, i32* %r0.global-to-local, align 4
  %v1_ecc8 = call i32 @function_11b6c(i32 %v0_ecc4)
  store i32 %v1_ecc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eccc

dec_label_pc_eccc.loopexit:                       ; preds = %dec_label_pc_ec78
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eccc

dec_label_pc_eccc:                                ; preds = %dec_label_pc_ec48, %dec_label_pc_eb54, %dec_label_pc_eb18, %dec_label_pc_eccc.loopexit, %dec_label_pc_ecc4
  %stack_var_-1868.0 = phi i32 [ %tmp232, %dec_label_pc_ecc4 ], [ %v0_eb0c, %dec_label_pc_eccc.loopexit ], [ %v0_eb0c, %dec_label_pc_eb18 ], [ %v0_eb0c, %dec_label_pc_eb54 ], [ %v0_eb0c, %dec_label_pc_ec48 ]
  %stack_var_-1872.2 = phi i32 [ %tmp239, %dec_label_pc_ecc4 ], [ %stack_var_-1872.1, %dec_label_pc_eccc.loopexit ], [ %stack_var_-1872.1, %dec_label_pc_eb18 ], [ %stack_var_-1872.1, %dec_label_pc_eb54 ], [ %stack_var_-1872.1, %dec_label_pc_ec48 ]
  %stack_var_-1884.1 = phi i8* [ %tmp240, %dec_label_pc_ecc4 ], [ %stack_var_-1884.0, %dec_label_pc_eccc.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_eb18 ], [ %stack_var_-1884.0, %dec_label_pc_eb54 ], [ %stack_var_-1884.0, %dec_label_pc_ec48 ]
  %stack_var_-1880.1 = phi i32 [ %tmp241, %dec_label_pc_ecc4 ], [ %v0_eb84, %dec_label_pc_eccc.loopexit ], [ %v0_eb84, %dec_label_pc_eb18 ], [ %v0_eb84, %dec_label_pc_eb54 ], [ %v0_eb84, %dec_label_pc_ec48 ]
  %stack_var_-1876.1 = phi i8 [ %tmp242, %dec_label_pc_ecc4 ], [ %stack_var_-1876.0, %dec_label_pc_eccc.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_eb18 ], [ %stack_var_-1876.0, %dec_label_pc_eb54 ], [ %stack_var_-1876.0, %dec_label_pc_ec48 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_ece4406 = load i32, i32* @sp, align 4
  %v3_ece4407 = add i32 %v2_ece4406, 1672
  %v4_ece4408 = inttoptr i32 %v3_ece4407 to i32*
  store i32 0, i32* %v4_ece4408, align 4
  br label %dec_label_pc_ecd4.dec_label_pc_ecd4_crit_edge

dec_label_pc_ecd4.dec_label_pc_ecd4_crit_edge:    ; preds = %dec_label_pc_eccc, %dec_label_pc_ecd4.dec_label_pc_ecd4_crit_edge
  %v0_ecd4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_ece4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ecd8 = add i32 %v0_ecd4.pre, 4
  store i32 %v1_ecd8, i32* %r3.global-to-local, align 4
  %v1_ecdc = add i32 %v0_ecd4.pre, 1672
  store i32 %v1_ecdc, i32* %ip.global-to-local, align 4
  %v7_ece0 = icmp eq i32 %v1_ecd8, 128
  %v2_ece4 = load i32, i32* @sp, align 4
  %v3_ece4 = add i32 %v2_ece4, %v1_ecdc
  %v4_ece4 = inttoptr i32 %v3_ece4 to i32*
  store i32 %v0_ece4.pre, i32* %v4_ece4, align 4
  br i1 %v7_ece0, label %dec_label_pc_ecec, label %dec_label_pc_ecd4.dec_label_pc_ecd4_crit_edge

dec_label_pc_ecec:                                ; preds = %dec_label_pc_ecd4.dec_label_pc_ecd4_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ecec = load i32, i32* %r2.global-to-local, align 4
  %v1_ecf4400 = add i32 %v0_ecec, 4
  store i32 %v1_ecf4400, i32* %r3.global-to-local, align 4
  %v1_ecf8401 = add i32 %v0_ecec, 1544
  store i32 %v1_ecf8401, i32* %lr.global-to-local, align 4
  %v7_ecfc402 = icmp eq i32 %v1_ecf4400, 128
  %v2_ed00403 = load i32, i32* @sp, align 4
  %v3_ed00404 = add i32 %v2_ed00403, %v1_ecf8401
  %v4_ed00405 = inttoptr i32 %v3_ed00404 to i32*
  store i32 %v0_ecec, i32* %v4_ed00405, align 4
  br i1 %v7_ecfc402, label %dec_label_pc_ed08, label %dec_label_pc_ecf0.dec_label_pc_ecf0_crit_edge

dec_label_pc_ecf0.dec_label_pc_ecf0_crit_edge:    ; preds = %dec_label_pc_ecec, %dec_label_pc_ecf0.dec_label_pc_ecf0_crit_edge
  %v0_ecf0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_ed00.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ecf4 = add i32 %v0_ecf0.pre, 4
  store i32 %v1_ecf4, i32* %r3.global-to-local, align 4
  %v1_ecf8 = add i32 %v0_ecf0.pre, 1544
  store i32 %v1_ecf8, i32* %lr.global-to-local, align 4
  %v7_ecfc = icmp eq i32 %v1_ecf4, 128
  %v2_ed00 = load i32, i32* @sp, align 4
  %v3_ed00 = add i32 %v2_ed00, %v1_ecf8
  %v4_ed00 = inttoptr i32 %v3_ed00 to i32*
  store i32 %v0_ed00.pre, i32* %v4_ed00, align 4
  br i1 %v7_ecfc, label %dec_label_pc_ed08, label %dec_label_pc_ecf0.dec_label_pc_ecf0_crit_edge

dec_label_pc_ed08:                                ; preds = %dec_label_pc_ecf0.dec_label_pc_ecf0_crit_edge, %dec_label_pc_ecec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed08 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ed08, i32* @r6, align 4
  store i32 %v0_ed08, i32* @r5, align 4
  store i32 %v0_ed08, i32* @r7, align 4
  store i32 %v0_ed08, i32* %stack_var_-52, align 4
  %v2_edc4 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_ed80

dec_label_pc_ed1c:                                ; preds = %dec_label_pc_eda8, %dec_label_pc_ed80
  %storemerge223 = phi i32 [ 30, %dec_label_pc_ed80 ], [ 5, %dec_label_pc_eda8 ]
  store i32 %storemerge223, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b818.125 to i32), i32* %r2.global-to-local, align 4
  %v2_ed20 = load i32, i32* @global_var_1b818.125, align 4
  store i32 %v2_ed20, i32* %r3.global-to-local, align 4
  %v1_ed24 = add i32 %v2_ed94, 8
  %v2_ed24 = inttoptr i32 %v1_ed24 to i32*
  %v3_ed24 = load i32, i32* %v2_ed24, align 4
  store i32 %v3_ed24, i32* %r2.global-to-local, align 4
  %v2_ed28 = sub i32 %v2_ed20, %v3_ed24
  store i32 %v2_ed28, i32* %r3.global-to-local, align 4
  %v3_ed2c = icmp uge i32 %v2_ed28, %storemerge223
  store i1 %v3_ed2c, i1* %cpsr_c.global-to-local, align 1
  %v9_ed2c = icmp eq i32 %v2_ed28, %storemerge223
  store i1 %v9_ed2c, i1* %cpsr_z.global-to-local, align 1
  %v2_ed30 = xor i1 %v9_ed2c, true
  %v3_ed30 = and i1 %v3_ed2c, %v2_ed30
  br i1 %v3_ed30, label %dec_label_pc_ede8, label %dec_label_pc_ed34

dec_label_pc_ed34:                                ; preds = %dec_label_pc_ed1c
  store i1 %v2_ed9c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ed9c, i1* %cpsr_z.global-to-local, align 1
  %v1_edb8 = add i32 %v2_ed94, 4
  %v2_edb8 = inttoptr i32 %v1_edb8 to i32*
  %v3_edb8 = load i32, i32* %v2_edb8, align 4
  br i1 %v7_ed9c, label %dec_label_pc_edb8, label %dec_label_pc_ed3c

dec_label_pc_ed3c:                                ; preds = %dec_label_pc_ed34
  store i32 %v3_edb8, i32* %ip.global-to-local, align 4
  %v3_ed40 = udiv i32 %v3_edb8, 32
  store i32 %v2_edc4, i32* %r0.global-to-local, align 4
  %v3_ed48 = mul nuw nsw i32 %v3_ed40, 4
  %v2_ed4c = add i32 %v3_ed48, %v2_edc4
  store i32 %v2_ed4c, i32* %r3.global-to-local, align 4
  %v1_ed50 = add i32 %v2_ed4c, -184
  %v2_ed50 = inttoptr i32 %v1_ed50 to i32*
  %v3_ed50 = load i32, i32* %v2_ed50, align 4
  %v1_ed54 = urem i32 %v3_edb8, 32
  store i32 %v1_ed54, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_ed5c = shl i32 1, %v1_ed54
  %v8_ed5c = or i32 %v3_ed50, %v7_ed5c
  store i32 %v8_ed5c, i32* %r2.global-to-local, align 4
  store i32 %v8_ed5c, i32* %v2_ed50, align 4
  %v0_ed64 = load i32, i32* @r6, align 4
  %v1_ed64 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed64 = icmp uge i32 %v0_ed64, %v1_ed64
  store i1 %v3_ed64, i1* %cpsr_c.global-to-local, align 1
  %v9_ed64 = icmp eq i32 %v0_ed64, %v1_ed64
  store i1 %v9_ed64, i1* %cpsr_z.global-to-local, align 1
  %v5_ed68 = icmp slt i32 %v0_ed64, %v1_ed64
  br i1 %v5_ed68, label %bb308, label %bb309

bb308:                                            ; preds = %dec_label_pc_ed3c
  store i32 %v1_ed64, i32* @r6, align 4
  br label %bb309

bb309:                                            ; preds = %dec_label_pc_eda8, %dec_label_pc_f9f8, %dec_label_pc_ee1c, %bb311, %dec_label_pc_ed3c, %bb308
  %v3_ed6c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ed6c, i32* %r3.global-to-local, align 4
  %v1_ed70 = add i32 %v3_ed6c, 1
  store i32 %v1_ed70, i32* %r2.global-to-local, align 4
  %v2_ed74 = icmp ugt i32 %v1_ed70, 254
  store i1 %v2_ed74, i1* %cpsr_c.global-to-local, align 1
  %v7_ed74 = icmp eq i32 %v1_ed70, 255
  store i1 %v7_ed74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ed70, i32* %stack_var_-52, align 4
  %v8_ed7c = icmp sgt i32 %v1_ed70, 255
  br i1 %v8_ed7c, label %dec_label_pc_ee28, label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %bb309, %dec_label_pc_ed08
  %v0_ed8c = phi i32 [ %v1_ed70, %bb309 ], [ %v0_ed08, %dec_label_pc_ed08 ]
  store i32 ptrtoint (i32* @global_var_1b878.137 to i32), i32* %r0.global-to-local, align 4
  %v3_ed84 = mul i32 %v0_ed8c, 256
  store i32 %v3_ed84, i32* %r3.global-to-local, align 4
  %v2_ed88 = load i32, i32* @global_var_1b878.137, align 4
  store i32 %v2_ed88, i32* %r1.global-to-local, align 4
  %v2_ed90 = mul i32 %v0_ed8c, 288
  store i32 %v2_ed90, i32* %r2.global-to-local, align 4
  %v2_ed94 = add i32 %v2_ed88, %v2_ed90
  store i32 %v2_ed94, i32* @r4, align 4
  %v1_ed98 = add i32 %v2_ed94, 12
  %v2_ed98 = inttoptr i32 %v1_ed98 to i32*
  %v3_ed98 = load i32, i32* %v2_ed98, align 4
  store i32 %v3_ed98, i32* %ip.global-to-local, align 4
  %v2_ed9c = icmp ne i32 %v3_ed98, 0
  store i1 %v2_ed9c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed9c = icmp eq i32 %v3_ed98, 1
  store i1 %v7_ed9c, i1* %cpsr_z.global-to-local, align 1
  %v2_eda0 = xor i1 %v7_ed9c, true
  %v3_eda0 = and i1 %v2_ed9c, %v2_eda0
  br i1 %v3_eda0, label %dec_label_pc_ed1c, label %dec_label_pc_eda8

dec_label_pc_eda8:                                ; preds = %dec_label_pc_ed80
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eda8 = icmp eq i32 %v3_ed98, 0
  store i1 %v2_eda8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eda8, label %bb309, label %dec_label_pc_ed1c

dec_label_pc_edb8:                                ; preds = %dec_label_pc_ed34
  store i32 %v3_edb8, i32* %r0.global-to-local, align 4
  %v3_edbc = udiv i32 %v3_edb8, 32
  %v3_edc0 = mul nuw nsw i32 %v3_edbc, 4
  store i32 %v2_edc4, i32* %lr.global-to-local, align 4
  %v2_edc8 = add i32 %v3_edc0, %v2_edc4
  store i32 %v2_edc8, i32* %r3.global-to-local, align 4
  %v1_edcc = add i32 %v2_edc8, -312
  %v2_edcc = inttoptr i32 %v1_edcc to i32*
  %v3_edcc = load i32, i32* %v2_edcc, align 4
  %v1_edd0 = urem i32 %v3_edb8, 32
  store i32 %v1_edd0, i32* %r1.global-to-local, align 4
  %v7_edd4 = shl i32 1, %v1_edd0
  %v8_edd4 = or i32 %v3_edcc, %v7_edd4
  store i32 %v8_edd4, i32* %r2.global-to-local, align 4
  %v0_edd8 = load i32, i32* @r5, align 4
  %v3_edd8 = icmp uge i32 %v0_edd8, %v3_edb8
  store i1 %v3_edd8, i1* %cpsr_c.global-to-local, align 1
  %v9_edd8 = icmp eq i32 %v0_edd8, %v3_edb8
  store i1 %v9_edd8, i1* %cpsr_z.global-to-local, align 1
  %v5_eddc = icmp slt i32 %v0_edd8, %v3_edb8
  br i1 %v5_eddc, label %bb310, label %bb311

bb310:                                            ; preds = %dec_label_pc_edb8
  store i32 %v3_edb8, i32* @r5, align 4
  br label %bb311

bb311:                                            ; preds = %dec_label_pc_edb8, %bb310
  store i32 %v8_edd4, i32* %v2_edcc, align 4
  br label %bb309

dec_label_pc_ede8:                                ; preds = %dec_label_pc_ed1c
  %v1_ede8 = add i32 %v2_ed94, 4
  %v2_ede8 = inttoptr i32 %v1_ede8 to i32*
  %v3_ede8 = load i32, i32* %v2_ede8, align 4
  store i32 %v3_ede8, i32* %r0.global-to-local, align 4
  %v1_edec = call i32 @function_109bc(i32 %v3_ede8)
  store i32 %v1_edec, i32* %r0.global-to-local, align 4
  %v0_edf0 = load i32, i32* @r4, align 4
  %v1_edf0 = add i32 %v0_edf0, 12
  %v2_edf0 = inttoptr i32 %v1_edf0 to i32*
  %v3_edf0 = load i32, i32* %v2_edf0, align 4
  store i32 %v3_edf0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_edf8 = icmp ugt i32 %v3_edf0, 1
  store i1 %v2_edf8, i1* %cpsr_c.global-to-local, align 1
  %v7_edf8 = icmp eq i32 %v3_edf0, 2
  store i1 %v7_edf8, i1* %cpsr_z.global-to-local, align 1
  %v2_edfc = add i32 %v0_edf0, 4
  %v3_edfc = inttoptr i32 %v2_edfc to i32*
  store i32 -1, i32* %v3_edfc, align 4
  %v2_ee00 = xor i1 %v2_edf8, true
  %v3_ee00 = or i1 %v7_edf8, %v2_ee00
  br i1 %v3_ee00, label %dec_label_pc_f9f8, label %dec_label_pc_ee04

dec_label_pc_ee04:                                ; preds = %dec_label_pc_ede8
  %v0_ee04 = load i32, i32* @r4, align 4
  %v1_ee04 = add i32 %v0_ee04, 284
  %v2_ee04 = inttoptr i32 %v1_ee04 to i8*
  %v3_ee04 = load i8, i8* %v2_ee04, align 1
  %v4_ee04 = zext i8 %v3_ee04 to i32
  %v1_ee08 = add nuw nsw i32 %v4_ee04, 1
  %v1_ee0c = urem i32 %v1_ee08, 256
  store i32 %v1_ee0c, i32* %r3.global-to-local, align 4
  %v2_ee10 = icmp ugt i32 %v1_ee0c, 9
  store i1 %v2_ee10, i1* %cpsr_c.global-to-local, align 1
  %v7_ee10 = icmp eq i32 %v1_ee0c, 10
  store i1 %v7_ee10, i1* %cpsr_z.global-to-local, align 1
  %v1_ee14 = trunc i32 %v1_ee08 to i8
  store i8 %v1_ee14, i8* %v2_ee04, align 1
  %v0_ee18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee18, label %dec_label_pc_f9f8, label %dec_label_pc_ee1c

dec_label_pc_ee1c:                                ; preds = %dec_label_pc_ee04
  %v0_ee1c = load i32, i32* @r4, align 4
  store i32 %v0_ee1c, i32* @r0, align 4
  %v0_ee20 = call i32 @function_e1a4()
  store i32 %v0_ee20, i32* %r0.global-to-local, align 4
  br label %bb309

dec_label_pc_ee28:                                ; preds = %bb309
  store i32 1, i32* %stack_var_-64, align 4
  %v0_ee30 = load i32, i32* @r6, align 4
  %v1_ee30 = load i32, i32* @r5, align 4
  %v3_ee30 = icmp uge i32 %v0_ee30, %v1_ee30
  store i1 %v3_ee30, i1* %cpsr_c.global-to-local, align 1
  %v9_ee30 = icmp eq i32 %v0_ee30, %v1_ee30
  store i1 %v9_ee30, i1* %cpsr_z.global-to-local, align 1
  %v5_ee34 = icmp slt i32 %v0_ee30, %v1_ee30
  %storemerge76 = select i1 %v5_ee34, i32 %v1_ee30, i32 %v0_ee30
  %v2_ee48 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_ee48, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ee50 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_ee50, i32* %ip.global-to-local, align 4
  %v2_ee54 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_ee54, i32* %r1.global-to-local, align 4
  %v1_ee58 = add i32 %storemerge76, 1
  store i32 %v1_ee58, i32* %r0.global-to-local, align 4
  %v5_ee64 = call i32 @function_10bdc(i32 %v1_ee58, i32 %v2_ee54, i32 %v2_ee48, i32 0, i32 %v2_ee50)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ee6c = call i32 @function_10c8c(i32* null)
  store i32 ptrtoint (i32* @global_var_1b818.125 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_ee6c, i32* @global_var_1b818.125, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_f034 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_f0dc = ptrtoint i32* %stack_var_-41 to i32
  %v2_f87c = ptrtoint i32* %stack_var_-84 to i32
  %v2_f884 = ptrtoint i32* %stack_var_-73 to i32
  %v2_f344 = ptrtoint i32* %stack_var_-56 to i32
  %v2_f4ac = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_eec0

dec_label_pc_ee88:                                ; preds = %dec_label_pc_eee4, %dec_label_pc_fa08
  %v0_ee9c = phi i32 [ %v3_eed8, %dec_label_pc_eee4 ], [ %v0_ee88.pre, %dec_label_pc_fa08 ]
  %v3_ee88 = udiv i32 %v0_ee9c, 32
  %v3_ee8c = mul nuw nsw i32 %v3_ee88, 4
  store i32 %v2_edc4, i32* @lr, align 4
  %v2_ee94 = add i32 %v3_ee8c, %v2_edc4
  store i32 %v2_ee94, i32* %r3.global-to-local, align 4
  %v1_ee98 = add i32 %v2_ee94, -184
  %v2_ee98 = inttoptr i32 %v1_ee98 to i32*
  %v3_ee98 = load i32, i32* %v2_ee98, align 4
  %v1_ee9c = urem i32 %v0_ee9c, 32
  store i32 %v1_ee9c, i32* %r1.global-to-local, align 4
  %v2_eea0 = add nsw i32 %v1_ee9c, -1
  %v3_eea0 = shl i32 1, %v2_eea0
  %v4_eea0 = and i32 %v3_eea0, %v3_ee98
  %v5_eea0 = icmp ne i32 %v4_eea0, 0
  store i1 %v5_eea0, i1* %cpsr_c.global-to-local, align 1
  %v6_eea0 = lshr i32 %v3_ee98, %v1_ee9c
  store i32 %v6_eea0, i32* %r2.global-to-local, align 4
  %v1_eea4 = urem i32 %v6_eea0, 2
  %v2_eea4 = icmp eq i32 %v1_eea4, 0
  store i1 %v2_eea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eea4, label %dec_label_pc_eeac, label %dec_label_pc_f010.preheader

dec_label_pc_f010.preheader:                      ; preds = %dec_label_pc_ee88
  %v0_f010102 = load i32, i32* @r5, align 4
  %v1_f010103 = add i32 %v0_f010102, 12
  %v2_f010104 = inttoptr i32 %v1_f010103 to i32*
  %v3_f010105 = load i32, i32* %v2_f010104, align 4
  store i32 %v3_f010105, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f014101107 = icmp eq i32 %v3_f010105, 0
  store i1 %v2_f014101107, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f014101107, label %dec_label_pc_eeac, label %dec_label_pc_f01c.lr.ph

dec_label_pc_eeac:                                ; preds = %dec_label_pc_f010.loopexit, %dec_label_pc_f010.preheader, %dec_label_pc_ee88, %bb346, %dec_label_pc_f924, %dec_label_pc_eec0, %dec_label_pc_fa1c, %dec_label_pc_f968
  %v3_eeac = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_eeac, i32* %r3.global-to-local, align 4
  %v1_eeb0 = add i32 %v3_eeac, 1
  store i32 %v1_eeb0, i32* %r2.global-to-local, align 4
  %v2_eeb4 = icmp ugt i32 %v1_eeb0, 254
  store i1 %v2_eeb4, i1* %cpsr_c.global-to-local, align 1
  %v7_eeb4 = icmp eq i32 %v1_eeb0, 255
  store i1 %v7_eeb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eeb0, i32* %stack_var_-52, align 4
  %v8_eebc = icmp sgt i32 %v1_eeb0, 255
  br i1 %v8_eebc, label %dec_label_pc_e854, label %dec_label_pc_eec0

dec_label_pc_eec0:                                ; preds = %dec_label_pc_eeac, %dec_label_pc_ee28
  %v0_eecc = phi i32 [ %v1_eeb0, %dec_label_pc_eeac ], [ 0, %dec_label_pc_ee28 ]
  store i32 ptrtoint (i32* @global_var_1b878.137 to i32), i32* %ip.global-to-local, align 4
  %v3_eec4 = mul i32 %v0_eecc, 256
  store i32 %v3_eec4, i32* %r3.global-to-local, align 4
  %v2_eec8 = load i32, i32* @global_var_1b878.137, align 4
  store i32 %v2_eec8, i32* %r1.global-to-local, align 4
  %v2_eed0 = mul i32 %v0_eecc, 288
  store i32 %v2_eed0, i32* %r2.global-to-local, align 4
  %v2_eed4 = add i32 %v2_eec8, %v2_eed0
  store i32 %v2_eed4, i32* @r5, align 4
  %v1_eed8 = add i32 %v2_eed4, 4
  %v2_eed8 = inttoptr i32 %v1_eed8 to i32*
  %v3_eed8 = load i32, i32* %v2_eed8, align 4
  store i32 %v3_eed8, i32* @r4, align 4
  %v2_eedc = icmp eq i32 %v3_eed8, -1
  store i1 %v2_eedc, i1* %cpsr_c.global-to-local, align 1
  %v7_eedc = icmp eq i32 %v3_eed8, -1
  store i1 %v7_eedc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eedc, label %dec_label_pc_eeac, label %dec_label_pc_eee4

dec_label_pc_eee4:                                ; preds = %dec_label_pc_eec0
  %v3_eee4 = udiv i32 %v3_eed8, 32
  %v3_eee8 = mul nuw nsw i32 %v3_eee4, 4
  store i32 %v2_edc4, i32* %lr.global-to-local, align 4
  %v2_eef0 = add i32 %v3_eee8, %v2_edc4
  store i32 %v2_eef0, i32* %r3.global-to-local, align 4
  %v1_eef4 = add i32 %v2_eef0, -312
  %v2_eef4 = inttoptr i32 %v1_eef4 to i32*
  %v3_eef4 = load i32, i32* %v2_eef4, align 4
  %v1_eef8 = urem i32 %v3_eed8, 32
  store i32 %v1_eef8, i32* %r1.global-to-local, align 4
  %v2_eefc = add nsw i32 %v1_eef8, -1
  %v3_eefc = shl i32 1, %v2_eefc
  %v4_eefc = and i32 %v3_eef4, %v3_eefc
  %v5_eefc = icmp ne i32 %v4_eefc, 0
  store i1 %v5_eefc, i1* %cpsr_c.global-to-local, align 1
  %v6_eefc = lshr i32 %v3_eef4, %v1_eef8
  store i32 %v6_eefc, i32* %r2.global-to-local, align 4
  %v1_ef00 = urem i32 %v6_eefc, 2
  %v2_ef00 = icmp eq i32 %v1_ef00, 0
  store i1 %v2_ef00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef00, label %dec_label_pc_ee88, label %dec_label_pc_ef08

dec_label_pc_ef08:                                ; preds = %dec_label_pc_eee4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_f4ac, i32* %r3.global-to-local, align 4
  store i32 %v2_f344, i32* %ip.global-to-local, align 4
  store i32 %v3_eed8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_ef38 = call i32 @function_11144(i32 %v3_eed8, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_f344)
  %v3_ef3c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_ef3c, i32* %r3.global-to-local, align 4
  %v2_ef40 = or i32 %v3_ef3c, %v6_ef38
  store i32 %v2_ef40, i32* %r0.global-to-local, align 4
  %v4_ef40 = icmp eq i32 %v2_ef40, 0
  store i1 %v4_ef40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_ef40, label %dec_label_pc_ef48, label %dec_label_pc_fa1c

dec_label_pc_ef48:                                ; preds = %dec_label_pc_ef08
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_ef4c = load i32, i32* @r5, align 4
  %v2_ef4c = add i32 %v1_ef4c, 12
  %v3_ef4c = inttoptr i32 %v2_ef4c to i32*
  store i32 2, i32* %v3_ef4c, align 4
  %v0_ef50 = call i32 @function_dab8()
  store i32 %v0_ef50, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b814.131 to i32), i32* %r3.global-to-local, align 4
  %v3_ef58 = load i8, i8* @global_var_1b815.132, align 1
  %v4_ef58 = zext i8 %v3_ef58 to i32
  store i32 %v4_ef58, i32* %r2.global-to-local, align 4
  %v2_ef5c = load i8, i8* bitcast (i8** @global_var_1b814.131 to i8*), align 4
  %v3_ef5c = zext i8 %v2_ef5c to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_ef60 = mul nuw nsw i32 %v4_ef58, 256
  %v5_ef60 = or i32 %v3_ef5c, %v4_ef60
  store i32 %v5_ef60, i32* %r1.global-to-local, align 4
  %v2_ef64 = call i32 @function_10744(i32 %v0_ef50, i32 %v5_ef60)
  store i32 ptrtoint (i32* @global_var_1b7e4.127 to i32), i32* %r3.global-to-local, align 4
  %v2_ef6c = load i32, i32* @global_var_1b7e4.127, align 4
  store i32 %v2_ef6c, i32* %lr.global-to-local, align 4
  %v1_ef74 = load i32, i32* @r6, align 4
  %v9_ef74 = icmp eq i32 %v2_ef6c, %v1_ef74
  store i1 %v9_ef74, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_ef78 = urem i32 %v2_ef64, 65536
  store i32 %v3_ef78, i32* %r0.global-to-local, align 4
  %v7_ef7c = icmp sgt i32 %v2_ef6c, %v1_ef74
  br i1 %v7_ef7c, label %dec_label_pc_ef80, label %dec_label_pc_fa04

dec_label_pc_ef80:                                ; preds = %dec_label_pc_ef48
  %v2_ef84 = load i32, i32* @global_var_1b810.129, align 4
  store i32 %v2_ef84, i32* %r3.global-to-local, align 4
  store i32 %v1_ef74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_efa0

dec_label_pc_ef90:                                ; preds = %dec_label_pc_efb8, %dec_label_pc_efa0
  %v1_ef90 = add i32 %v0_ef90, 1
  store i32 %v1_ef90, i32* %ip.global-to-local, align 4
  %v3_ef94 = icmp uge i32 %v1_ef90, %v2_ef6c
  store i1 %v3_ef94, i1* %cpsr_c.global-to-local, align 1
  %v9_ef94 = icmp eq i32 %v1_ef90, %v2_ef6c
  store i1 %v9_ef94, i1* %cpsr_z.global-to-local, align 1
  %v1_ef98 = add i32 %v0_ef98, 16
  store i32 %v1_ef98, i32* %r3.global-to-local, align 4
  br i1 %v9_ef94, label %dec_label_pc_fa04, label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %dec_label_pc_ef90, %dec_label_pc_ef80
  %v0_ef90 = phi i32 [ %v1_ef90, %dec_label_pc_ef90 ], [ %v1_ef74, %dec_label_pc_ef80 ]
  %v0_ef98 = phi i32 [ %v1_ef98, %dec_label_pc_ef90 ], [ %v2_ef84, %dec_label_pc_ef80 ]
  store i32 %v0_ef98, i32* %r1.global-to-local, align 4
  %v1_efa4 = add i32 %v0_ef98, 9
  %v2_efa4 = inttoptr i32 %v1_efa4 to i8*
  %v3_efa4 = load i8, i8* %v2_efa4, align 1
  %v4_efa4 = zext i8 %v3_efa4 to i32
  store i32 %v4_efa4, i32* %r2.global-to-local, align 4
  %v1_efa8 = add i32 %v0_ef98, 8
  %v2_efa8 = inttoptr i32 %v1_efa8 to i8*
  %v3_efa8 = load i8, i8* %v2_efa8, align 1
  %v4_efa8 = zext i8 %v3_efa8 to i32
  %v4_efac = mul nuw nsw i32 %v4_efa4, 256
  %v5_efac = or i32 %v4_efa8, %v4_efac
  store i32 %v5_efac, i32* %r3.global-to-local, align 4
  %v3_efb0 = icmp uge i32 %v5_efac, %v3_ef78
  store i1 %v3_efb0, i1* %cpsr_c.global-to-local, align 1
  %v9_efb0 = icmp eq i32 %v5_efac, %v3_ef78
  store i1 %v9_efb0, i1* %cpsr_z.global-to-local, align 1
  %v2_efb4 = xor i1 %v9_efb0, true
  %v3_efb4 = and i1 %v3_efb0, %v2_efb4
  br i1 %v3_efb4, label %dec_label_pc_ef90, label %dec_label_pc_efb8

dec_label_pc_efb8:                                ; preds = %dec_label_pc_efa0
  %v1_efb8 = add i32 %v0_ef98, 10
  %v2_efb8 = inttoptr i32 %v1_efb8 to i8*
  %v3_efb8 = load i8, i8* %v2_efb8, align 1
  %v4_efb8 = zext i8 %v3_efb8 to i32
  store i32 %v4_efb8, i32* %r3.global-to-local, align 4
  %v1_efbc = add i32 %v0_ef98, 11
  %v2_efbc = inttoptr i32 %v1_efbc to i8*
  %v3_efbc = load i8, i8* %v2_efbc, align 1
  %v4_efbc = zext i8 %v3_efbc to i32
  store i32 %v4_efbc, i32* %r2.global-to-local, align 4
  %v4_efc0 = mul nuw nsw i32 %v4_efbc, 256
  %v5_efc0 = or i32 %v4_efc0, %v4_efb8
  store i32 %v5_efc0, i32* %r3.global-to-local, align 4
  %v3_efc4 = icmp uge i32 %v5_efc0, %v3_ef78
  store i1 %v3_efc4, i1* %cpsr_c.global-to-local, align 1
  %v9_efc4 = icmp eq i32 %v5_efc0, %v3_ef78
  store i1 %v9_efc4, i1* %cpsr_z.global-to-local, align 1
  %v2_efc8 = xor i1 %v3_efc4, true
  %v3_efc8 = or i1 %v9_efc4, %v2_efc8
  br i1 %v3_efc8, label %dec_label_pc_ef90, label %dec_label_pc_fa08

dec_label_pc_efd0:                                ; preds = %dec_label_pc_f1e0, %dec_label_pc_f1b4, %dec_label_pc_f1fc
  store i32 %v3_f1b4, i32* %r1.global-to-local, align 4
  %v0_efd4 = load i32, i32* @sb, align 4
  store i32 %v0_efd4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1316c.226 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_efe0 = call i32 @function_10200(i32 %v0_efd4, i32 %v3_f1b4, i32 ptrtoint ([5 x i8]* @global_var_1316c.226 to i32), i32 4)
  store i32 %v5_efe0, i32* %r0.global-to-local, align 4
  %v3_efe4 = icmp eq i32 %v5_efe0, -1
  store i1 %v3_efe4, i1* %cpsr_c.global-to-local, align 1
  %v8_efe4 = icmp eq i32 %v5_efe0, -1
  store i1 %v8_efe4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_efe0, i32* @r7, align 4
  br i1 %v3_efe4, label %dec_label_pc_eff0, label %dec_label_pc_f208

dec_label_pc_eff0:                                ; preds = %dec_label_pc_efd0
  %v0_eff0 = load i32, i32* @sb, align 4
  store i32 %v0_eff0, i32* %r0.global-to-local, align 4
  %v0_eff4 = load i32, i32* @r5, align 4
  %v1_eff4 = add i32 %v0_eff4, 24
  %v2_eff4 = inttoptr i32 %v1_eff4 to i32*
  %v3_eff4 = load i32, i32* %v2_eff4, align 4
  store i32 %v3_eff4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13174.228 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_f000 = call i32 @function_10200(i32 %v0_eff0, i32 %v3_eff4, i32 ptrtoint ([6 x i8]* @global_var_13174.228 to i32), i32 5)
  store i32 %v5_f000, i32* %r0.global-to-local, align 4
  %v3_f004 = icmp eq i32 %v5_f000, -1
  store i1 %v3_f004, i1* %cpsr_c.global-to-local, align 1
  %v8_f004 = icmp eq i32 %v5_f000, -1
  store i1 %v8_f004, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_f000, i32* @r7, align 4
  br i1 %v3_f004, label %dec_label_pc_f010.loopexit, label %dec_label_pc_f208

dec_label_pc_f010.loopexit:                       ; preds = %dec_label_pc_f1a4, %dec_label_pc_f698, %dec_label_pc_f094, %dec_label_pc_eff0, %dec_label_pc_f974
  %v0_f010 = load i32, i32* @r5, align 4
  %v1_f010 = add i32 %v0_f010, 12
  %v2_f010 = inttoptr i32 %v1_f010 to i32*
  %v3_f010 = load i32, i32* %v2_f010, align 4
  store i32 %v3_f010, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f014101 = icmp eq i32 %v3_f010, 0
  store i1 %v2_f014101, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f014101, label %dec_label_pc_eeac, label %dec_label_pc_f01c.lr.ph

dec_label_pc_f01c.lr.ph:                          ; preds = %dec_label_pc_f010.preheader, %dec_label_pc_f010.loopexit
  %v0_f01c133 = phi i32 [ %v0_f010, %dec_label_pc_f010.loopexit ], [ %v0_f010102, %dec_label_pc_f010.preheader ]
  br label %dec_label_pc_f01c

dec_label_pc_f014thread-pre-split.thread:         ; preds = %dec_label_pc_f2dc, %dec_label_pc_f390, %dec_label_pc_f4f8, %dec_label_pc_f5ac, %dec_label_pc_f7b8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f01c

dec_label_pc_f014thread-pre-split:                ; preds = %dec_label_pc_f324, %dec_label_pc_f48c, %dec_label_pc_f540, %dec_label_pc_f5f4, %dec_label_pc_f800, %dec_label_pc_f7e4, %dec_label_pc_f524, %dec_label_pc_f5d8, %dec_label_pc_f470, %dec_label_pc_f308
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f01c

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f014thread-pre-split.thread, %dec_label_pc_f014thread-pre-split, %dec_label_pc_f01c.lr.ph
  %v0_f9c0 = phi i32 [ %v0_f01c133, %dec_label_pc_f01c.lr.ph ], [ %v0_f094, %dec_label_pc_f014thread-pre-split ], [ %v0_f094, %dec_label_pc_f014thread-pre-split.thread ]
  %v1_f01c = add i32 %v0_f9c0, 24
  %v2_f01c = inttoptr i32 %v1_f01c to i32*
  %v3_f01c = load i32, i32* %v2_f01c, align 4
  store i32 %v3_f01c, i32* %r3.global-to-local, align 4
  %v2_f020 = icmp ugt i32 %v3_f01c, 255
  store i1 %v2_f020, i1* %cpsr_c.global-to-local, align 1
  %v7_f020 = icmp eq i32 %v3_f01c, 256
  store i1 %v7_f020, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_f9c0, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_f020, label %dec_label_pc_f9c0, label %dec_label_pc_f02c

dec_label_pc_f02c:                                ; preds = %dec_label_pc_f01c, %dec_label_pc_f9c0
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %v2_f034, align 4
  %v0_f038 = load i32, i32* @r5, align 4
  %v1_f038 = add i32 %v0_f038, 24
  %v2_f038 = inttoptr i32 %v1_f038 to i32*
  %v3_f038 = load i32, i32* %v2_f038, align 4
  store i32 %v3_f038, i32* %r2.global-to-local, align 4
  %v0_f03c = load i32, i32* @sb, align 4
  %v2_f03c = add i32 %v0_f03c, %v3_f038
  store i32 %v2_f03c, i32* @r4, align 4
  %v1_f040 = add i32 %v0_f038, 4
  %v2_f040 = inttoptr i32 %v1_f040 to i32*
  %v3_f040 = load i32, i32* %v2_f040, align 4
  store i32 %v3_f040, i32* %r0.global-to-local, align 4
  %v1_f044 = sub i32 256, %v3_f038
  store i32 %v1_f044, i32* %r2.global-to-local, align 4
  store i32 %v2_f03c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f050 = inttoptr i32 %v2_f03c to i32*
  %v5_f050 = call i32 @function_111a0(i32 %v3_f040, i32* %v4_f050, i32 %v1_f044, i32 16384)
  store i32 %v5_f050, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f054 = icmp eq i32 %v5_f050, 0
  store i1 %v2_f054, i1* %cpsr_z.global-to-local, align 1
  %tmp312 = icmp slt i32 %v5_f050, 1
  br i1 %tmp312, label %dec_label_pc_f918, label %dec_label_pc_f05c

dec_label_pc_f05c:                                ; preds = %dec_label_pc_f02c
  %v0_f05c = load i32, i32* @r6, align 4
  store i32 %v0_f05c, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f064

dec_label_pc_f064:                                ; preds = %bb314, %dec_label_pc_f05c
  %v3_f06c = phi i32 [ %v1_f070, %bb314 ], [ %v0_f05c, %dec_label_pc_f05c ]
  %v1_f064 = load i32, i32* @r4, align 4
  %v2_f064 = add i32 %v1_f064, %v3_f06c
  %v3_f064 = inttoptr i32 %v2_f064 to i8*
  %v4_f064 = load i8, i8* %v3_f064, align 1
  %v6_f064 = zext i8 %v4_f064 to i32
  store i32 %v6_f064, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f068 = icmp eq i8 %v4_f064, 0
  store i1 %v2_f068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f068, label %bb313, label %bb314

bb313:                                            ; preds = %dec_label_pc_f064
  %v1_f06c = load i32, i32* %r1.global-to-local, align 4
  %v2_f06c = trunc i32 %v1_f06c to i8
  store i8 %v2_f06c, i8* %v3_f064, align 1
  %v0_f070.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb314

bb314:                                            ; preds = %dec_label_pc_f064, %bb313
  %v0_f070 = phi i32 [ %v3_f06c, %dec_label_pc_f064 ], [ %v0_f070.pre, %bb313 ]
  %v1_f070 = add i32 %v0_f070, 1
  store i32 %v1_f070, i32* %r2.global-to-local, align 4
  %v3_f074 = icmp uge i32 %v5_f050, %v1_f070
  store i1 %v3_f074, i1* %cpsr_c.global-to-local, align 1
  %v9_f074 = icmp eq i32 %v5_f050, %v1_f070
  store i1 %v9_f074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f074, label %dec_label_pc_f07c, label %dec_label_pc_f064

dec_label_pc_f07c:                                ; preds = %bb314, %dec_label_pc_f91c
  store i32 ptrtoint (i32* @global_var_1b818.125 to i32), i32* @lr, align 4
  %v0_f080 = load i32, i32* @r5, align 4
  %v1_f080 = add i32 %v0_f080, 24
  %v2_f080 = inttoptr i32 %v1_f080 to i32*
  %v3_f080 = load i32, i32* %v2_f080, align 4
  %v2_f084 = load i32, i32* @global_var_1b818.125, align 4
  store i32 %v2_f084, i32* %r3.global-to-local, align 4
  %v2_f088 = add i32 %v3_f080, %v5_f050
  store i32 %v2_f088, i32* %ip.global-to-local, align 4
  store i32 %v2_f088, i32* %v2_f080, align 4
  %v0_f090 = load i32, i32* %r3.global-to-local, align 4
  %v1_f090 = load i32, i32* @r5, align 4
  %v2_f090 = add i32 %v1_f090, 8
  %v3_f090 = inttoptr i32 %v2_f090 to i32*
  store i32 %v0_f090, i32* %v3_f090, align 4
  br label %dec_label_pc_f094

dec_label_pc_f094:                                ; preds = %dec_label_pc_f794, %dec_label_pc_f07c
  %v0_f094 = load i32, i32* @r5, align 4
  %v1_f094 = add i32 %v0_f094, 12
  %v2_f094 = inttoptr i32 %v1_f094 to i32*
  %v3_f094 = load i32, i32* %v2_f094, align 4
  store i32 %v3_f094, i32* %r2.global-to-local, align 4
  %v1_f098 = add i32 %v3_f094, -2
  store i32 %v1_f098, i32* %r3.global-to-local, align 4
  %v7_f09c = icmp eq i32 %v1_f098, 8
  store i1 %v7_f09c, i1* %cpsr_z.global-to-local, align 1
  %v5_f0a0 = and i32 %v1_f098, 1073741824
  %v6_f0a0 = icmp ne i32 %v5_f0a0, 0
  store i1 %v6_f0a0, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_f094, label %dec_label_pc_f010.loopexit [
    i32 2, label %dec_label_pc_f0cc
    i32 3, label %dec_label_pc_f1b4
    i32 4, label %dec_label_pc_f24c
    i32 5, label %dec_label_pc_f2dc
    i32 6, label %dec_label_pc_f390
    i32 7, label %dec_label_pc_f5ac
    i32 8, label %dec_label_pc_f4f8
    i32 9, label %dec_label_pc_f7b8
    i32 10, label %dec_label_pc_f660
  ]

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f094
  %v1_f0d0 = add i32 %v0_f094, 24
  %v2_f0d0 = inttoptr i32 %v1_f0d0 to i32*
  %v3_f0d0 = load i32, i32* %v2_f0d0, align 4
  store i32 %v3_f0d0, i32* %ip.global-to-local, align 4
  %v0_f0d4 = load i32, i32* @sb, align 4
  store i32 %v0_f0d4, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_f0e0 = add i32 %v0_f094, 29
  store i32 %v1_f0e0, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_f0ec92 = icmp eq i32 %v3_f0d0, 0
  store i1 %v3_f0ec92, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f0ec92, i1* %cpsr_z.global-to-local, align 1
  %v6_f0f099 = icmp sgt i32 %v3_f0d0, 0
  br i1 %v6_f0f099, label %dec_label_pc_f0f4.preheader, label %dec_label_pc_f194

dec_label_pc_f0ec.loopexit:                       ; preds = %dec_label_pc_f10c
  %v2_f114 = add i32 %v1_f114, 2
  store i32 %v2_f114, i32* @r6, align 4
  %v2_f118 = add i32 %v1_f118, 2
  store i32 %v2_f118, i32* @r4, align 4
  %v2_f11c = add i32 %v1_f11c, 2
  store i32 %v2_f11c, i32* @r7, align 4
  %v3_f0ec = icmp uge i32 %v2_f11c, %v1_f0ec
  store i1 %v3_f0ec, i1* %cpsr_c.global-to-local, align 1
  %v9_f0ec = icmp eq i32 %v2_f11c, %v1_f0ec
  store i1 %v9_f0ec, i1* %cpsr_z.global-to-local, align 1
  %v6_f0f0 = icmp slt i32 %v2_f11c, %v1_f0ec
  br i1 %v6_f0f0, label %dec_label_pc_f0f4.preheader, label %dec_label_pc_f194

dec_label_pc_f0f4.preheader:                      ; preds = %dec_label_pc_f0cc, %dec_label_pc_f0ec.loopexit
  %v6_f19c169 = phi i32 [ %v6_f19c170, %dec_label_pc_f0ec.loopexit ], [ %v0_f094, %dec_label_pc_f0cc ]
  %v1_f11c158 = phi i32 [ %v2_f11c, %dec_label_pc_f0ec.loopexit ], [ 0, %dec_label_pc_f0cc ]
  %v1_f114156 = phi i32 [ %v2_f114, %dec_label_pc_f0ec.loopexit ], [ %v0_f0d4, %dec_label_pc_f0cc ]
  %v1_f100154 = phi i32 [ %v1_f0ec, %dec_label_pc_f0ec.loopexit ], [ %v3_f0d0, %dec_label_pc_f0cc ]
  %v0_f0f4152 = phi i32 [ %v2_f118, %dec_label_pc_f0ec.loopexit ], [ %v1_f0e0, %dec_label_pc_f0cc ]
  br label %dec_label_pc_f0f4

dec_label_pc_f0f4:                                ; preds = %dec_label_pc_f0f4.preheader, %dec_label_pc_f174
  %v6_f19c170 = phi i32 [ %v6_f19c169, %dec_label_pc_f0f4.preheader ], [ %v0_f17c, %dec_label_pc_f174 ]
  %v1_f11c = phi i32 [ %v1_f11c158, %dec_label_pc_f0f4.preheader ], [ %v1_f180, %dec_label_pc_f174 ]
  %v1_f114 = phi i32 [ %v1_f114156, %dec_label_pc_f0f4.preheader ], [ %v1_f188, %dec_label_pc_f174 ]
  %v1_f0ec = phi i32 [ %v1_f100154, %dec_label_pc_f0f4.preheader ], [ %v3_f17c, %dec_label_pc_f174 ]
  %v1_f118 = phi i32 [ %v0_f0f4152, %dec_label_pc_f0f4.preheader ], [ %v1_f18c, %dec_label_pc_f174 ]
  %v1_f0f4 = add i32 %v1_f118, -1
  %v2_f0f4 = inttoptr i32 %v1_f0f4 to i8*
  %v3_f0f4 = load i8, i8* %v2_f0f4, align 1
  %v4_f0f4 = zext i8 %v3_f0f4 to i32
  store i32 %v4_f0f4, i32* %r3.global-to-local, align 4
  %v2_f0f8 = icmp eq i8 %v3_f0f4, -1
  store i1 %v2_f0f8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f0f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0f8, label %dec_label_pc_f100, label %dec_label_pc_f194

dec_label_pc_f100:                                ; preds = %dec_label_pc_f0f4
  %v0_f100 = load i32, i32* @sb, align 4
  %v2_f100 = add i32 %v0_f100, %v1_f0ec
  store i32 %v2_f100, i32* %r2.global-to-local, align 4
  %v3_f104 = icmp uge i32 %v2_f100, %v1_f118
  store i1 %v3_f104, i1* %cpsr_c.global-to-local, align 1
  %v9_f104 = icmp eq i32 %v2_f100, %v1_f118
  store i1 %v9_f104, i1* %cpsr_z.global-to-local, align 1
  %v2_f108 = xor i1 %v3_f104, true
  %v3_f108 = or i1 %v9_f104, %v2_f108
  br i1 %v3_f108, label %dec_label_pc_f194, label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %dec_label_pc_f100
  %v1_f10c = inttoptr i32 %v1_f118 to i8*
  %v2_f10c = load i8, i8* %v1_f10c, align 1
  %v3_f10c = zext i8 %v2_f10c to i32
  store i32 %v3_f10c, i32* %r3.global-to-local, align 4
  %v2_f110 = icmp eq i8 %v2_f10c, -1
  store i1 %v2_f110, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f110, label %dec_label_pc_f0ec.loopexit, label %dec_label_pc_f124

dec_label_pc_f124:                                ; preds = %dec_label_pc_f10c
  %v2_f124 = icmp ugt i8 %v2_f10c, -4
  store i1 %v2_f124, i1* %cpsr_c.global-to-local, align 1
  %v7_f124 = icmp eq i8 %v2_f10c, -3
  store i1 %v7_f124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f124, label %dec_label_pc_f86c, label %dec_label_pc_f12c

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f124
  %v1_f12c = add i32 %v1_f114, 2
  store i32 %v1_f12c, i32* %r3.global-to-local, align 4
  %v3_f130 = icmp uge i32 %v2_f100, %v1_f12c
  store i1 %v3_f130, i1* %cpsr_c.global-to-local, align 1
  %v9_f130 = icmp eq i32 %v2_f100, %v1_f12c
  store i1 %v9_f130, i1* %cpsr_z.global-to-local, align 1
  %v2_f134 = xor i1 %v3_f130, true
  %v3_f134 = or i1 %v9_f130, %v2_f134
  br i1 %v3_f134, label %dec_label_pc_f194, label %dec_label_pc_f138

dec_label_pc_f138:                                ; preds = %bb344, %dec_label_pc_f8c0, %bb343, %dec_label_pc_f12c
  %v0_f138 = load i32, i32* @r4, align 4
  %v1_f138 = inttoptr i32 %v0_f138 to i8*
  %v2_f138 = load i8, i8* %v1_f138, align 1
  %v3_f138 = zext i8 %v2_f138 to i32
  store i32 %v3_f138, i32* %r3.global-to-local, align 4
  %v2_f13c = icmp ugt i8 %v2_f138, -4
  store i1 %v2_f13c, i1* %cpsr_c.global-to-local, align 1
  %v7_f13c = icmp eq i8 %v2_f138, -3
  store i1 %v7_f13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f13c, label %bb315, label %dec_label_pc_f148

bb315:                                            ; preds = %dec_label_pc_f138
  %v1_f140 = load i32, i32* @r8, align 4
  %v2_f140 = trunc i32 %v1_f140 to i8
  store i8 %v2_f140, i8* %v1_f138, align 1
  %v0_f144.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f144.pr, label %bb317, label %.dec_label_pc_f148_crit_edge

.dec_label_pc_f148_crit_edge:                     ; preds = %bb315
  %v0_f148.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f148

dec_label_pc_f148:                                ; preds = %.dec_label_pc_f148_crit_edge, %dec_label_pc_f138
  %v0_f148 = phi i32 [ %v0_f148.pre, %.dec_label_pc_f148_crit_edge ], [ %v3_f138, %dec_label_pc_f138 ]
  %v2_f148 = icmp ugt i32 %v0_f148, 250
  store i1 %v2_f148, i1* %cpsr_c.global-to-local, align 1
  %v7_f148 = icmp eq i32 %v0_f148, 251
  store i1 %v7_f148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f148, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_f148
  %v1_f14c = load i32, i32* %sl.global-to-local, align 4
  %v2_f14c = trunc i32 %v1_f14c to i8
  %v3_f14c = load i32, i32* @r4, align 4
  %v4_f14c = inttoptr i32 %v3_f14c to i8*
  store i8 %v2_f14c, i8* %v4_f14c, align 1
  br label %bb317

bb317:                                            ; preds = %bb315, %dec_label_pc_f148, %bb316
  %v0_f150 = load i32, i32* @r4, align 4
  %v1_f150 = add i32 %v0_f150, 1
  %v2_f150 = inttoptr i32 %v1_f150 to i8*
  %v3_f150 = load i8, i8* %v2_f150, align 1
  %v4_f150 = zext i8 %v3_f150 to i32
  store i32 %v4_f150, i32* %r3.global-to-local, align 4
  %v2_f154 = icmp ugt i8 %v3_f150, -4
  store i1 %v2_f154, i1* %cpsr_c.global-to-local, align 1
  %v7_f154 = icmp eq i8 %v3_f150, -3
  store i1 %v7_f154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f154, label %bb318, label %dec_label_pc_f160

bb318:                                            ; preds = %bb317
  %v1_f158 = load i32, i32* @r8, align 4
  %v2_f158 = trunc i32 %v1_f158 to i8
  store i8 %v2_f158, i8* %v2_f150, align 1
  %v0_f15c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f15c.pr, label %bb320, label %.dec_label_pc_f160_crit_edge

.dec_label_pc_f160_crit_edge:                     ; preds = %bb318
  %v0_f160.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f160

dec_label_pc_f160:                                ; preds = %.dec_label_pc_f160_crit_edge, %bb317
  %v0_f160 = phi i32 [ %v0_f160.pre, %.dec_label_pc_f160_crit_edge ], [ %v4_f150, %bb317 ]
  %v2_f160 = icmp ugt i32 %v0_f160, 250
  store i1 %v2_f160, i1* %cpsr_c.global-to-local, align 1
  %v7_f160 = icmp eq i32 %v0_f160, 251
  store i1 %v7_f160, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f160, label %bb319, label %bb320

bb319:                                            ; preds = %dec_label_pc_f160
  %v1_f164 = load i32, i32* %sl.global-to-local, align 4
  %v2_f164 = trunc i32 %v1_f164 to i8
  %v3_f164 = load i32, i32* @r4, align 4
  %v4_f164 = add i32 %v3_f164, 1
  %v5_f164 = inttoptr i32 %v4_f164 to i8*
  store i8 %v2_f164, i8* %v5_f164, align 1
  br label %bb320

bb320:                                            ; preds = %bb318, %dec_label_pc_f160, %bb319
  %v0_f168 = load i32, i32* @r5, align 4
  %v1_f168 = add i32 %v0_f168, 4
  %v2_f168 = inttoptr i32 %v1_f168 to i32*
  %v3_f168 = load i32, i32* %v2_f168, align 4
  store i32 %v3_f168, i32* %r0.global-to-local, align 4
  %v0_f16c = load i32, i32* @r6, align 4
  br label %dec_label_pc_f174

dec_label_pc_f174:                                ; preds = %dec_label_pc_f998, %bb320
  %v0_f178 = phi i32 [ %v3_f9b0, %dec_label_pc_f998 ], [ %v3_f168, %bb320 ]
  %storemerge5 = phi i32 [ %v2_f884, %dec_label_pc_f998 ], [ %v0_f16c, %bb320 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_f998 ], [ 3, %bb320 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f178 = inttoptr i32 %storemerge5 to i32*
  %v5_f178 = call i32 @function_11200(i32 %v0_f178, i32* %v4_f178, i32 %storemerge, i32 16384)
  store i32 %v5_f178, i32* %r0.global-to-local, align 4
  %v0_f17c = load i32, i32* @r5, align 4
  %v1_f17c = add i32 %v0_f17c, 24
  %v2_f17c = inttoptr i32 %v1_f17c to i32*
  %v3_f17c = load i32, i32* %v2_f17c, align 4
  store i32 %v3_f17c, i32* %ip.global-to-local, align 4
  %v0_f180 = load i32, i32* @r7, align 4
  %v1_f180 = add i32 %v0_f180, 3
  store i32 %v1_f180, i32* @r7, align 4
  %v3_f184 = icmp uge i32 %v1_f180, %v3_f17c
  store i1 %v3_f184, i1* %cpsr_c.global-to-local, align 1
  %v9_f184 = icmp eq i32 %v1_f180, %v3_f17c
  store i1 %v9_f184, i1* %cpsr_z.global-to-local, align 1
  %v0_f188 = load i32, i32* @r6, align 4
  %v1_f188 = add i32 %v0_f188, 3
  store i32 %v1_f188, i32* @r6, align 4
  %v0_f18c = load i32, i32* @r4, align 4
  %v1_f18c = add i32 %v0_f18c, 3
  store i32 %v1_f18c, i32* @r4, align 4
  %v5_f190 = icmp slt i32 %v1_f180, %v3_f17c
  br i1 %v5_f190, label %dec_label_pc_f0f4, label %dec_label_pc_f194

dec_label_pc_f194:                                ; preds = %dec_label_pc_f0ec.loopexit, %dec_label_pc_f0f4, %dec_label_pc_f174, %dec_label_pc_f12c, %dec_label_pc_f100, %dec_label_pc_f0cc, %dec_label_pc_f86c.dec_label_pc_f194.loopexit_crit_edge
  %v6_f19c = phi i32 [ %v0_f890, %dec_label_pc_f86c.dec_label_pc_f194.loopexit_crit_edge ], [ %v0_f094, %dec_label_pc_f0cc ], [ %v6_f19c170, %dec_label_pc_f0f4 ], [ %v0_f17c, %dec_label_pc_f174 ], [ %v6_f19c170, %dec_label_pc_f12c ], [ %v6_f19c170, %dec_label_pc_f100 ], [ %v6_f19c170, %dec_label_pc_f0ec.loopexit ]
  %v0_f1a4.pre = phi i32 [ %v0_f194.pre.pre, %dec_label_pc_f86c.dec_label_pc_f194.loopexit_crit_edge ], [ 0, %dec_label_pc_f0cc ], [ %v1_f11c, %dec_label_pc_f0f4 ], [ %v1_f180, %dec_label_pc_f174 ], [ %v1_f11c, %dec_label_pc_f12c ], [ %v1_f11c, %dec_label_pc_f100 ], [ %v2_f11c, %dec_label_pc_f0ec.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f194 = icmp eq i32 %v0_f1a4.pre, 0
  store i1 %v2_f194, i1* %cpsr_z.global-to-local, align 1
  %tmp321 = icmp slt i32 %v0_f1a4.pre, 1
  br i1 %tmp321, label %dec_label_pc_f1a4, label %.thread205

.thread205:                                       ; preds = %dec_label_pc_f194
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_f19c = add i32 %v6_f19c, 12
  %v8_f19c = inttoptr i32 %v7_f19c to i32*
  store i32 3, i32* %v8_f19c, align 4
  br label %dec_label_pc_f794

dec_label_pc_f1a4:                                ; preds = %dec_label_pc_f194, %dec_label_pc_f80c, %dec_label_pc_f6e4, %dec_label_pc_f600, %dec_label_pc_f54c, %dec_label_pc_f498, %dec_label_pc_f330, %dec_label_pc_f298, %dec_label_pc_f208
  %v0_f1a4 = phi i32 [ %v1_f800, %dec_label_pc_f80c ], [ %v0_f6dc, %dec_label_pc_f6e4 ], [ %v1_f5f4, %dec_label_pc_f600 ], [ %v1_f540, %dec_label_pc_f54c ], [ %v1_f48c, %dec_label_pc_f498 ], [ %v1_f324, %dec_label_pc_f330 ], [ %v0_f298, %dec_label_pc_f298 ], [ %v0_f208, %dec_label_pc_f208 ], [ %v0_f1a4.pre, %dec_label_pc_f194 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1a4 = icmp eq i32 %v0_f1a4, 0
  store i1 %v2_f1a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f1a4, label %dec_label_pc_f010.loopexit, label %dec_label_pc_f1ac

dec_label_pc_f1ac:                                ; preds = %dec_label_pc_f1a4
  %v0_f1ac = load i32, i32* @r5, align 4
  %v1_f1ac = add i32 %v0_f1ac, 24
  %v2_f1ac = inttoptr i32 %v1_f1ac to i32*
  %v3_f1ac = load i32, i32* %v2_f1ac, align 4
  store i32 %v3_f1ac, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f794

dec_label_pc_f1b4:                                ; preds = %dec_label_pc_f094
  %v1_f1b4 = add i32 %v0_f094, 24
  %v2_f1b4 = inttoptr i32 %v1_f1b4 to i32*
  %v3_f1b4 = load i32, i32* %v2_f1b4, align 4
  store i32 %v3_f1b4, i32* %ip.global-to-local, align 4
  %v1_f1b8 = add i32 %v3_f1b4, -1
  store i32 %v1_f1b8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1bc = icmp eq i32 %v1_f1b8, 0
  store i1 %v2_f1bc, i1* %cpsr_z.global-to-local, align 1
  %v5_f1c0 = icmp sgt i32 %v1_f1b8, 0
  br i1 %v5_f1c0, label %dec_label_pc_f1e8, label %dec_label_pc_efd0

dec_label_pc_f1c8:                                ; preds = %bb322
  %v2_f1c8 = icmp ugt i8 %v3_f1ec, 35
  store i1 %v2_f1c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1c8 = icmp eq i8 %v3_f1ec, 36
  store i1 %v7_f1c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1c8, label %dec_label_pc_f1fc, label %dec_label_pc_f1d0

dec_label_pc_f1d0:                                ; preds = %dec_label_pc_f1c8
  %v2_f1d0 = icmp ugt i8 %v3_f1ec, 34
  store i1 %v2_f1d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f1d0 = icmp eq i8 %v3_f1ec, 35
  store i1 %v7_f1d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1d0, label %dec_label_pc_f1fc, label %dec_label_pc_f1d8

dec_label_pc_f1d8:                                ; preds = %dec_label_pc_f1d0
  %v2_f1d8 = icmp ugt i8 %v3_f1ec, 36
  store i1 %v2_f1d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1d8 = icmp eq i8 %v3_f1ec, 37
  store i1 %v7_f1d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1d8, label %dec_label_pc_f1fc, label %dec_label_pc_f1e0

dec_label_pc_f1e0:                                ; preds = %dec_label_pc_f1d8
  %v1_f1e0 = add i32 %v0_f1fc, -1
  store i32 %v1_f1e0, i32* %r0.global-to-local, align 4
  %v2_f1e0 = icmp ne i32 %v0_f1fc, 0
  store i1 %v2_f1e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f1e0 = icmp eq i32 %v0_f1fc, 1
  store i1 %v7_f1e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1e0, label %dec_label_pc_efd0, label %dec_label_pc_f1e8

dec_label_pc_f1e8:                                ; preds = %dec_label_pc_f1b4, %dec_label_pc_f1e0
  %v0_f1fc = phi i32 [ %v1_f1e0, %dec_label_pc_f1e0 ], [ %v1_f1b8, %dec_label_pc_f1b4 ]
  %v2_f1e8 = add i32 %v0_f1fc, %v0_f094
  store i32 %v2_f1e8, i32* %r3.global-to-local, align 4
  %v1_f1ec = add i32 %v2_f1e8, 28
  %v2_f1ec = inttoptr i32 %v1_f1ec to i8*
  %v3_f1ec = load i8, i8* %v2_f1ec, align 1
  %v4_f1ec = zext i8 %v3_f1ec to i32
  store i32 %v4_f1ec, i32* %r3.global-to-local, align 4
  %v2_f1f0 = icmp ugt i8 %v3_f1ec, 61
  store i1 %v2_f1f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f1f0 = icmp eq i8 %v3_f1ec, 62
  store i1 %v7_f1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1f0, label %dec_label_pc_f1fc, label %bb322

bb322:                                            ; preds = %dec_label_pc_f1e8
  %v3_f1f4 = icmp ugt i8 %v3_f1ec, 57
  store i1 %v3_f1f4, i1* %cpsr_c.global-to-local, align 1
  %v8_f1f4 = icmp eq i8 %v3_f1ec, 58
  store i1 %v8_f1f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1f4, label %dec_label_pc_f1fc, label %dec_label_pc_f1c8

dec_label_pc_f1fc:                                ; preds = %dec_label_pc_f1e8, %bb322, %dec_label_pc_f1d8, %dec_label_pc_f1d0, %dec_label_pc_f1c8
  %v1_f1fc = add i32 %v0_f1fc, 1
  store i32 %v1_f1fc, i32* @r7, align 4
  %v2_f200 = icmp eq i32 %v1_f1fc, -1
  store i1 %v2_f200, i1* %cpsr_c.global-to-local, align 1
  %v7_f200 = icmp eq i32 %v0_f1fc, -2
  store i1 %v7_f200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f200, label %dec_label_pc_efd0, label %dec_label_pc_f208

dec_label_pc_f208:                                ; preds = %dec_label_pc_f1fc, %dec_label_pc_eff0, %dec_label_pc_efd0
  %v0_f208 = phi i32 [ %v5_f000, %dec_label_pc_eff0 ], [ %v5_efe0, %dec_label_pc_efd0 ], [ %v1_f1fc, %dec_label_pc_f1fc ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f208 = icmp eq i32 %v0_f208, 0
  store i1 %v2_f208, i1* %cpsr_z.global-to-local, align 1
  %tmp323 = icmp slt i32 %v0_f208, 1
  br i1 %tmp323, label %dec_label_pc_f1a4, label %dec_label_pc_f210

dec_label_pc_f210:                                ; preds = %dec_label_pc_f208
  %v0_f210 = load i32, i32* @r5, align 4
  %v1_f210 = inttoptr i32 %v0_f210 to i32*
  %v2_f210 = load i32, i32* %v1_f210, align 4
  store i32 %v2_f210, i32* %r3.global-to-local, align 4
  %v1_f214 = add i32 %v0_f210, 4
  %v2_f214 = inttoptr i32 %v1_f214 to i32*
  %v3_f214 = load i32, i32* %v2_f214, align 4
  store i32 %v3_f214, i32* %r0.global-to-local, align 4
  %v1_f218 = add i32 %v2_f210, 12
  %v2_f218 = inttoptr i32 %v1_f218 to i8*
  %v3_f218 = load i8, i8* %v2_f218, align 1
  %v4_f218 = zext i8 %v3_f218 to i32
  store i32 %v4_f218, i32* %r2.global-to-local, align 4
  %v1_f21c = inttoptr i32 %v2_f210 to i32*
  %v2_f21c = load i32, i32* %v1_f21c, align 4
  store i32 %v2_f21c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f224 = inttoptr i32 %v2_f21c to i32*
  %v5_f224 = call i32 @function_11200(i32 %v3_f214, i32* %v4_f224, i32 %v4_f218, i32 16384)
  store i32 %v5_f224, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f22c = load i32, i32* @r5, align 4
  %v1_f22c = add i32 %v0_f22c, 4
  %v2_f22c = inttoptr i32 %v1_f22c to i32*
  %v3_f22c = load i32, i32* %v2_f22c, align 4
  store i32 %v3_f22c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1317c.231 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f238 = call i32 @function_11200(i32 %v3_f22c, i32* bitcast ([3 x i8]* @global_var_1317c.231 to i32*), i32 2, i32 16384)
  store i32 %v5_f238, i32* %r0.global-to-local, align 4
  %v0_f23c = load i32, i32* @r5, align 4
  %v1_f23c = add i32 %v0_f23c, 24
  %v2_f23c = inttoptr i32 %v1_f23c to i32*
  %v3_f23c = load i32, i32* %v2_f23c, align 4
  store i32 %v3_f23c, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_f244 = add i32 %v0_f23c, 12
  %v3_f244 = inttoptr i32 %v2_f244 to i32*
  store i32 4, i32* %v3_f244, align 4
  br label %dec_label_pc_f794

dec_label_pc_f24c:                                ; preds = %dec_label_pc_f094
  %v1_f24c = add i32 %v0_f094, 24
  %v2_f24c = inttoptr i32 %v1_f24c to i32*
  %v3_f24c = load i32, i32* %v2_f24c, align 4
  store i32 %v3_f24c, i32* %ip.global-to-local, align 4
  %v1_f250 = add i32 %v3_f24c, -1
  store i32 %v1_f250, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f254 = icmp eq i32 %v1_f250, 0
  store i1 %v2_f254, i1* %cpsr_z.global-to-local, align 1
  %v5_f258 = icmp sgt i32 %v1_f250, 0
  br i1 %v5_f258, label %dec_label_pc_f278, label %dec_label_pc_f974

dec_label_pc_f260:                                ; preds = %bb324
  %v2_f260 = icmp ugt i8 %v3_f27c, 35
  store i1 %v2_f260, i1* %cpsr_c.global-to-local, align 1
  %v7_f260 = icmp eq i8 %v3_f27c, 36
  store i1 %v7_f260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f260, label %dec_label_pc_f28c, label %dec_label_pc_f268

dec_label_pc_f268:                                ; preds = %dec_label_pc_f260
  %v2_f268 = icmp ugt i8 %v3_f27c, 34
  store i1 %v2_f268, i1* %cpsr_c.global-to-local, align 1
  %v7_f268 = icmp eq i8 %v3_f27c, 35
  store i1 %v7_f268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f268, label %dec_label_pc_f28c, label %dec_label_pc_f270

dec_label_pc_f270:                                ; preds = %dec_label_pc_f268
  %v1_f270 = add i32 %v0_f28c, -1
  store i32 %v1_f270, i32* %r0.global-to-local, align 4
  %v2_f270 = icmp ne i32 %v0_f28c, 0
  store i1 %v2_f270, i1* %cpsr_c.global-to-local, align 1
  %v7_f270 = icmp eq i32 %v0_f28c, 1
  store i1 %v7_f270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f270, label %dec_label_pc_f974, label %dec_label_pc_f278

dec_label_pc_f278:                                ; preds = %dec_label_pc_f24c, %dec_label_pc_f270
  %v0_f28c = phi i32 [ %v1_f270, %dec_label_pc_f270 ], [ %v1_f250, %dec_label_pc_f24c ]
  %v2_f278 = add i32 %v0_f28c, %v0_f094
  store i32 %v2_f278, i32* %r3.global-to-local, align 4
  %v1_f27c = add i32 %v2_f278, 28
  %v2_f27c = inttoptr i32 %v1_f27c to i8*
  %v3_f27c = load i8, i8* %v2_f27c, align 1
  %v4_f27c = zext i8 %v3_f27c to i32
  store i32 %v4_f27c, i32* %r3.global-to-local, align 4
  %v2_f280 = icmp ugt i8 %v3_f27c, 61
  store i1 %v2_f280, i1* %cpsr_c.global-to-local, align 1
  %v7_f280 = icmp eq i8 %v3_f27c, 62
  store i1 %v7_f280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f280, label %dec_label_pc_f28c, label %bb324

bb324:                                            ; preds = %dec_label_pc_f278
  %v3_f284 = icmp ugt i8 %v3_f27c, 57
  store i1 %v3_f284, i1* %cpsr_c.global-to-local, align 1
  %v8_f284 = icmp eq i8 %v3_f27c, 58
  store i1 %v8_f284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f284, label %dec_label_pc_f28c, label %dec_label_pc_f260

dec_label_pc_f28c:                                ; preds = %dec_label_pc_f278, %bb324, %dec_label_pc_f268, %dec_label_pc_f260
  %v1_f28c = add i32 %v0_f28c, 1
  store i32 %v1_f28c, i32* @r7, align 4
  %v2_f290 = icmp eq i32 %v1_f28c, -1
  store i1 %v2_f290, i1* %cpsr_c.global-to-local, align 1
  %v7_f290 = icmp eq i32 %v0_f28c, -2
  store i1 %v7_f290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f290, label %dec_label_pc_f974, label %dec_label_pc_f298

dec_label_pc_f298:                                ; preds = %dec_label_pc_f28c, %dec_label_pc_f974
  %v0_f298 = phi i32 [ %v5_f984, %dec_label_pc_f974 ], [ %v1_f28c, %dec_label_pc_f28c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f298 = icmp eq i32 %v0_f298, 0
  store i1 %v2_f298, i1* %cpsr_z.global-to-local, align 1
  %tmp325 = icmp slt i32 %v0_f298, 1
  br i1 %tmp325, label %dec_label_pc_f1a4, label %dec_label_pc_f2a0

dec_label_pc_f2a0:                                ; preds = %dec_label_pc_f298
  %v0_f2a0 = load i32, i32* @r5, align 4
  %v1_f2a0 = inttoptr i32 %v0_f2a0 to i32*
  %v2_f2a0 = load i32, i32* %v1_f2a0, align 4
  store i32 %v2_f2a0, i32* %r3.global-to-local, align 4
  %v1_f2a4 = add i32 %v0_f2a0, 4
  %v2_f2a4 = inttoptr i32 %v1_f2a4 to i32*
  %v3_f2a4 = load i32, i32* %v2_f2a4, align 4
  store i32 %v3_f2a4, i32* %r0.global-to-local, align 4
  %v1_f2a8 = add i32 %v2_f2a0, 13
  %v2_f2a8 = inttoptr i32 %v1_f2a8 to i8*
  %v3_f2a8 = load i8, i8* %v2_f2a8, align 1
  %v4_f2a8 = zext i8 %v3_f2a8 to i32
  store i32 %v4_f2a8, i32* %r2.global-to-local, align 4
  %v1_f2ac = add i32 %v2_f2a0, 4
  %v2_f2ac = inttoptr i32 %v1_f2ac to i32*
  %v3_f2ac = load i32, i32* %v2_f2ac, align 4
  store i32 %v3_f2ac, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f2b4 = inttoptr i32 %v3_f2ac to i32*
  %v5_f2b4 = call i32 @function_11200(i32 %v3_f2a4, i32* %v4_f2b4, i32 %v4_f2a8, i32 16384)
  store i32 %v5_f2b4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f2bc = load i32, i32* @r5, align 4
  %v1_f2bc = add i32 %v0_f2bc, 4
  %v2_f2bc = inttoptr i32 %v1_f2bc to i32*
  %v3_f2bc = load i32, i32* %v2_f2bc, align 4
  store i32 %v3_f2bc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1317c.231 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f2c8 = call i32 @function_11200(i32 %v3_f2bc, i32* bitcast ([3 x i8]* @global_var_1317c.231 to i32*), i32 2, i32 16384)
  store i32 %v5_f2c8, i32* %r0.global-to-local, align 4
  %v0_f2cc = load i32, i32* @r5, align 4
  %v1_f2cc = add i32 %v0_f2cc, 24
  %v2_f2cc = inttoptr i32 %v1_f2cc to i32*
  %v3_f2cc = load i32, i32* %v2_f2cc, align 4
  store i32 %v3_f2cc, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_f2d4 = add i32 %v0_f2cc, 12
  %v3_f2d4 = inttoptr i32 %v2_f2d4 to i32*
  store i32 5, i32* %v3_f2d4, align 4
  br label %dec_label_pc_f794

dec_label_pc_f2dc:                                ; preds = %dec_label_pc_f094
  %v1_f2dc = add i32 %v0_f094, 24
  %v2_f2dc = inttoptr i32 %v1_f2dc to i32*
  %v3_f2dc = load i32, i32* %v2_f2dc, align 4
  store i32 %v3_f2dc, i32* %ip.global-to-local, align 4
  %v1_f2e0 = add i32 %v3_f2dc, -1
  store i32 %v1_f2e0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f2e4 = icmp eq i32 %v1_f2e0, 0
  store i1 %v2_f2e4, i1* %cpsr_z.global-to-local, align 1
  %v5_f2e8 = icmp sgt i32 %v1_f2e0, 0
  br i1 %v5_f2e8, label %dec_label_pc_f310, label %dec_label_pc_f014thread-pre-split.thread

dec_label_pc_f2f0:                                ; preds = %bb326
  %v2_f2f0 = icmp ugt i8 %v3_f314, 35
  store i1 %v2_f2f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2f0 = icmp eq i8 %v3_f314, 36
  store i1 %v7_f2f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2f0, label %dec_label_pc_f324, label %dec_label_pc_f2f8

dec_label_pc_f2f8:                                ; preds = %dec_label_pc_f2f0
  %v2_f2f8 = icmp ugt i8 %v3_f314, 34
  store i1 %v2_f2f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2f8 = icmp eq i8 %v3_f314, 35
  store i1 %v7_f2f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2f8, label %dec_label_pc_f324, label %dec_label_pc_f300

dec_label_pc_f300:                                ; preds = %dec_label_pc_f2f8
  %v2_f300 = icmp ugt i8 %v3_f314, 36
  store i1 %v2_f300, i1* %cpsr_c.global-to-local, align 1
  %v7_f300 = icmp eq i8 %v3_f314, 37
  store i1 %v7_f300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f300, label %dec_label_pc_f324, label %dec_label_pc_f308

dec_label_pc_f308:                                ; preds = %dec_label_pc_f300
  %v1_f308 = add i32 %v0_f324, -1
  store i32 %v1_f308, i32* %r0.global-to-local, align 4
  %v2_f308 = icmp ne i32 %v0_f324, 0
  store i1 %v2_f308, i1* %cpsr_c.global-to-local, align 1
  %v7_f308 = icmp eq i32 %v0_f324, 1
  store i1 %v7_f308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f308, label %dec_label_pc_f014thread-pre-split, label %dec_label_pc_f310

dec_label_pc_f310:                                ; preds = %dec_label_pc_f2dc, %dec_label_pc_f308
  %v0_f324 = phi i32 [ %v1_f308, %dec_label_pc_f308 ], [ %v1_f2e0, %dec_label_pc_f2dc ]
  %v2_f310 = add i32 %v0_f324, %v0_f094
  store i32 %v2_f310, i32* %r3.global-to-local, align 4
  %v1_f314 = add i32 %v2_f310, 28
  %v2_f314 = inttoptr i32 %v1_f314 to i8*
  %v3_f314 = load i8, i8* %v2_f314, align 1
  %v4_f314 = zext i8 %v3_f314 to i32
  store i32 %v4_f314, i32* %r3.global-to-local, align 4
  %v2_f318 = icmp ugt i8 %v3_f314, 61
  store i1 %v2_f318, i1* %cpsr_c.global-to-local, align 1
  %v7_f318 = icmp eq i8 %v3_f314, 62
  store i1 %v7_f318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f318, label %dec_label_pc_f324, label %bb326

bb326:                                            ; preds = %dec_label_pc_f310
  %v3_f31c = icmp ugt i8 %v3_f314, 57
  store i1 %v3_f31c, i1* %cpsr_c.global-to-local, align 1
  %v8_f31c = icmp eq i8 %v3_f314, 58
  store i1 %v8_f31c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f31c, label %dec_label_pc_f324, label %dec_label_pc_f2f0

dec_label_pc_f324:                                ; preds = %dec_label_pc_f310, %bb326, %dec_label_pc_f300, %dec_label_pc_f2f8, %dec_label_pc_f2f0
  %v1_f324 = add i32 %v0_f324, 1
  store i32 %v1_f324, i32* @r7, align 4
  %v2_f328 = icmp eq i32 %v1_f324, -1
  store i1 %v2_f328, i1* %cpsr_c.global-to-local, align 1
  %v7_f328 = icmp eq i32 %v0_f324, -2
  store i1 %v7_f328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f328, label %dec_label_pc_f014thread-pre-split, label %dec_label_pc_f330

dec_label_pc_f330:                                ; preds = %dec_label_pc_f324
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f330 = icmp eq i32 %v1_f324, 0
  store i1 %v2_f330, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v1_f324, 1
  br i1 %tmp327, label %dec_label_pc_f1a4, label %dec_label_pc_f338

dec_label_pc_f338:                                ; preds = %dec_label_pc_f330
  store i32 17, i32* %r0.global-to-local, align 4
  %v1_f33c = call i32 @function_fc64(i32 17)
  store i32 %v2_f344, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r0.global-to-local, align 4
  %v3_f34c = call i32 @function_fb80(i32 17, i32* nonnull %stack_var_-56)
  store i32 %v3_f34c, i32* %r0.global-to-local, align 4
  %v3_f350 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f350, i32* %r2.global-to-local, align 4
  store i32 %v3_f34c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f35c = load i32, i32* @r5, align 4
  %v1_f35c = add i32 %v0_f35c, 4
  %v2_f35c = inttoptr i32 %v1_f35c to i32*
  %v3_f35c = load i32, i32* %v2_f35c, align 4
  store i32 %v3_f35c, i32* %r0.global-to-local, align 4
  %v4_f360 = inttoptr i32 %v3_f34c to i32*
  %v5_f360 = call i32 @function_11200(i32 %v3_f35c, i32* %v4_f360, i32 %v3_f350, i32 16384)
  store i32 %v5_f360, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1317c.231 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f370 = load i32, i32* @r5, align 4
  %v1_f370 = add i32 %v0_f370, 4
  %v2_f370 = inttoptr i32 %v1_f370 to i32*
  %v3_f370 = load i32, i32* %v2_f370, align 4
  store i32 %v3_f370, i32* %r0.global-to-local, align 4
  %v5_f374 = call i32 @function_11200(i32 %v3_f370, i32* bitcast ([3 x i8]* @global_var_1317c.231 to i32*), i32 2, i32 16384)
  store i32 17, i32* %r0.global-to-local, align 4
  %v1_f37c = call i32 @function_fbac(i32 17)
  store i32 %v1_f37c, i32* %r0.global-to-local, align 4
  %v0_f380 = load i32, i32* @r5, align 4
  %v1_f380 = add i32 %v0_f380, 24
  %v2_f380 = inttoptr i32 %v1_f380 to i32*
  %v3_f380 = load i32, i32* %v2_f380, align 4
  store i32 %v3_f380, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_f388 = add i32 %v0_f380, 12
  %v3_f388 = inttoptr i32 %v2_f388 to i32*
  store i32 6, i32* %v3_f388, align 4
  br label %dec_label_pc_f794

dec_label_pc_f390:                                ; preds = %dec_label_pc_f094
  %v1_f390 = add i32 %v0_f094, 24
  %v2_f390 = inttoptr i32 %v1_f390 to i32*
  %v3_f390 = load i32, i32* %v2_f390, align 4
  store i32 %v3_f390, i32* %ip.global-to-local, align 4
  %v1_f394 = add i32 %v3_f390, -1
  store i32 %v1_f394, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f398 = icmp eq i32 %v1_f394, 0
  store i1 %v2_f398, i1* %cpsr_z.global-to-local, align 1
  %v5_f39c = icmp sgt i32 %v1_f394, 0
  br i1 %v5_f39c, label %dec_label_pc_f478, label %dec_label_pc_f014thread-pre-split.thread

dec_label_pc_f458:                                ; preds = %bb328
  %v2_f458 = icmp ugt i8 %v3_f47c, 35
  store i1 %v2_f458, i1* %cpsr_c.global-to-local, align 1
  %v7_f458 = icmp eq i8 %v3_f47c, 36
  store i1 %v7_f458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f458, label %dec_label_pc_f48c, label %dec_label_pc_f460

dec_label_pc_f460:                                ; preds = %dec_label_pc_f458
  %v2_f460 = icmp ugt i8 %v3_f47c, 34
  store i1 %v2_f460, i1* %cpsr_c.global-to-local, align 1
  %v7_f460 = icmp eq i8 %v3_f47c, 35
  store i1 %v7_f460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f460, label %dec_label_pc_f48c, label %dec_label_pc_f468

dec_label_pc_f468:                                ; preds = %dec_label_pc_f460
  %v2_f468 = icmp ugt i8 %v3_f47c, 36
  store i1 %v2_f468, i1* %cpsr_c.global-to-local, align 1
  %v7_f468 = icmp eq i8 %v3_f47c, 37
  store i1 %v7_f468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f468, label %dec_label_pc_f48c, label %dec_label_pc_f470

dec_label_pc_f470:                                ; preds = %dec_label_pc_f468
  %v1_f470 = add i32 %v0_f48c, -1
  store i32 %v1_f470, i32* %r0.global-to-local, align 4
  %v2_f470 = icmp ne i32 %v0_f48c, 0
  store i1 %v2_f470, i1* %cpsr_c.global-to-local, align 1
  %v7_f470 = icmp eq i32 %v0_f48c, 1
  store i1 %v7_f470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f470, label %dec_label_pc_f014thread-pre-split, label %dec_label_pc_f478

dec_label_pc_f478:                                ; preds = %dec_label_pc_f390, %dec_label_pc_f470
  %v0_f48c = phi i32 [ %v1_f470, %dec_label_pc_f470 ], [ %v1_f394, %dec_label_pc_f390 ]
  %v2_f478 = add i32 %v0_f48c, %v0_f094
  store i32 %v2_f478, i32* %r3.global-to-local, align 4
  %v1_f47c = add i32 %v2_f478, 28
  %v2_f47c = inttoptr i32 %v1_f47c to i8*
  %v3_f47c = load i8, i8* %v2_f47c, align 1
  %v4_f47c = zext i8 %v3_f47c to i32
  store i32 %v4_f47c, i32* %r3.global-to-local, align 4
  %v2_f480 = icmp ugt i8 %v3_f47c, 61
  store i1 %v2_f480, i1* %cpsr_c.global-to-local, align 1
  %v7_f480 = icmp eq i8 %v3_f47c, 62
  store i1 %v7_f480, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f480, label %dec_label_pc_f48c, label %bb328

bb328:                                            ; preds = %dec_label_pc_f478
  %v3_f484 = icmp ugt i8 %v3_f47c, 57
  store i1 %v3_f484, i1* %cpsr_c.global-to-local, align 1
  %v8_f484 = icmp eq i8 %v3_f47c, 58
  store i1 %v8_f484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f484, label %dec_label_pc_f48c, label %dec_label_pc_f458

dec_label_pc_f48c:                                ; preds = %dec_label_pc_f478, %bb328, %dec_label_pc_f468, %dec_label_pc_f460, %dec_label_pc_f458
  %v1_f48c = add i32 %v0_f48c, 1
  store i32 %v1_f48c, i32* @r7, align 4
  %v2_f490 = icmp eq i32 %v1_f48c, -1
  store i1 %v2_f490, i1* %cpsr_c.global-to-local, align 1
  %v7_f490 = icmp eq i32 %v0_f48c, -2
  store i1 %v7_f490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f490, label %dec_label_pc_f014thread-pre-split, label %dec_label_pc_f498

dec_label_pc_f498:                                ; preds = %dec_label_pc_f48c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f498 = icmp eq i32 %v1_f48c, 0
  store i1 %v2_f498, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v1_f48c, 1
  br i1 %tmp329, label %dec_label_pc_f1a4, label %dec_label_pc_f4a0

dec_label_pc_f4a0:                                ; preds = %dec_label_pc_f498
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_f4a4 = call i32 @function_fc64(i32 18)
  store i32 %v2_f4ac, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v3_f4b4 = call i32 @function_fb80(i32 18, i32* nonnull %stack_var_-48)
  store i32 %v3_f4b4, i32* %r0.global-to-local, align 4
  %v3_f4b8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f4b8, i32* %r2.global-to-local, align 4
  store i32 %v3_f4b4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f4c4 = load i32, i32* @r5, align 4
  %v1_f4c4 = add i32 %v0_f4c4, 4
  %v2_f4c4 = inttoptr i32 %v1_f4c4 to i32*
  %v3_f4c4 = load i32, i32* %v2_f4c4, align 4
  store i32 %v3_f4c4, i32* %r0.global-to-local, align 4
  %v4_f4c8 = inttoptr i32 %v3_f4b4 to i32*
  %v5_f4c8 = call i32 @function_11200(i32 %v3_f4c4, i32* %v4_f4c8, i32 %v3_f4b8, i32 16384)
  store i32 %v5_f4c8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1317c.231 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f4d8 = load i32, i32* @r5, align 4
  %v1_f4d8 = add i32 %v0_f4d8, 4
  %v2_f4d8 = inttoptr i32 %v1_f4d8 to i32*
  %v3_f4d8 = load i32, i32* %v2_f4d8, align 4
  store i32 %v3_f4d8, i32* %r0.global-to-local, align 4
  %v5_f4dc = call i32 @function_11200(i32 %v3_f4d8, i32* bitcast ([3 x i8]* @global_var_1317c.231 to i32*), i32 2, i32 16384)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_f4e4 = call i32 @function_fbac(i32 18)
  store i32 %v1_f4e4, i32* %r0.global-to-local, align 4
  %v0_f4e8 = load i32, i32* @r5, align 4
  %v1_f4e8 = add i32 %v0_f4e8, 24
  %v2_f4e8 = inttoptr i32 %v1_f4e8 to i32*
  %v3_f4e8 = load i32, i32* %v2_f4e8, align 4
  store i32 %v3_f4e8, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_f4f0 = add i32 %v0_f4e8, 12
  %v3_f4f0 = inttoptr i32 %v2_f4f0 to i32*
  store i32 7, i32* %v3_f4f0, align 4
  br label %dec_label_pc_f794

dec_label_pc_f4f8:                                ; preds = %dec_label_pc_f094
  %v1_f4f8 = add i32 %v0_f094, 24
  %v2_f4f8 = inttoptr i32 %v1_f4f8 to i32*
  %v3_f4f8 = load i32, i32* %v2_f4f8, align 4
  store i32 %v3_f4f8, i32* %ip.global-to-local, align 4
  %v1_f4fc = add i32 %v3_f4f8, -1
  store i32 %v1_f4fc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f500 = icmp eq i32 %v1_f4fc, 0
  store i1 %v2_f500, i1* %cpsr_z.global-to-local, align 1
  %v5_f504 = icmp sgt i32 %v1_f4fc, 0
  br i1 %v5_f504, label %dec_label_pc_f52c, label %dec_label_pc_f014thread-pre-split.thread

dec_label_pc_f50c:                                ; preds = %bb330
  %v2_f50c = icmp ugt i8 %v3_f530, 35
  store i1 %v2_f50c, i1* %cpsr_c.global-to-local, align 1
  %v7_f50c = icmp eq i8 %v3_f530, 36
  store i1 %v7_f50c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f50c, label %dec_label_pc_f540, label %dec_label_pc_f514

dec_label_pc_f514:                                ; preds = %dec_label_pc_f50c
  %v2_f514 = icmp ugt i8 %v3_f530, 34
  store i1 %v2_f514, i1* %cpsr_c.global-to-local, align 1
  %v7_f514 = icmp eq i8 %v3_f530, 35
  store i1 %v7_f514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f514, label %dec_label_pc_f540, label %dec_label_pc_f51c

dec_label_pc_f51c:                                ; preds = %dec_label_pc_f514
  %v2_f51c = icmp ugt i8 %v3_f530, 36
  store i1 %v2_f51c, i1* %cpsr_c.global-to-local, align 1
  %v7_f51c = icmp eq i8 %v3_f530, 37
  store i1 %v7_f51c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f51c, label %dec_label_pc_f540, label %dec_label_pc_f524

dec_label_pc_f524:                                ; preds = %dec_label_pc_f51c
  %v1_f524 = add i32 %v0_f540, -1
  store i32 %v1_f524, i32* %r0.global-to-local, align 4
  %v2_f524 = icmp ne i32 %v0_f540, 0
  store i1 %v2_f524, i1* %cpsr_c.global-to-local, align 1
  %v7_f524 = icmp eq i32 %v0_f540, 1
  store i1 %v7_f524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f524, label %dec_label_pc_f014thread-pre-split, label %dec_label_pc_f52c

dec_label_pc_f52c:                                ; preds = %dec_label_pc_f4f8, %dec_label_pc_f524
  %v0_f540 = phi i32 [ %v1_f524, %dec_label_pc_f524 ], [ %v1_f4fc, %dec_label_pc_f4f8 ]
  %v2_f52c = add i32 %v0_f540, %v0_f094
  store i32 %v2_f52c, i32* %r3.global-to-local, align 4
  %v1_f530 = add i32 %v2_f52c, 28
  %v2_f530 = inttoptr i32 %v1_f530 to i8*
  %v3_f530 = load i8, i8* %v2_f530, align 1
  %v4_f530 = zext i8 %v3_f530 to i32
  store i32 %v4_f530, i32* %r3.global-to-local, align 4
  %v2_f534 = icmp ugt i8 %v3_f530, 61
  store i1 %v2_f534, i1* %cpsr_c.global-to-local, align 1
  %v7_f534 = icmp eq i8 %v3_f530, 62
  store i1 %v7_f534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f534, label %dec_label_pc_f540, label %bb330

bb330:                                            ; preds = %dec_label_pc_f52c
  %v3_f538 = icmp ugt i8 %v3_f530, 57
  store i1 %v3_f538, i1* %cpsr_c.global-to-local, align 1
  %v8_f538 = icmp eq i8 %v3_f530, 58
  store i1 %v8_f538, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f538, label %dec_label_pc_f540, label %dec_label_pc_f50c

dec_label_pc_f540:                                ; preds = %dec_label_pc_f52c, %bb330, %dec_label_pc_f51c, %dec_label_pc_f514, %dec_label_pc_f50c
  %v1_f540 = add i32 %v0_f540, 1
  store i32 %v1_f540, i32* @r7, align 4
  %v2_f544 = icmp eq i32 %v1_f540, -1
  store i1 %v2_f544, i1* %cpsr_c.global-to-local, align 1
  %v7_f544 = icmp eq i32 %v0_f540, -2
  store i1 %v7_f544, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f544, label %dec_label_pc_f014thread-pre-split, label %dec_label_pc_f54c

dec_label_pc_f54c:                                ; preds = %dec_label_pc_f540
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f54c = icmp eq i32 %v1_f540, 0
  store i1 %v2_f54c, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v1_f540, 1
  br i1 %tmp331, label %dec_label_pc_f1a4, label %dec_label_pc_f554

dec_label_pc_f554:                                ; preds = %dec_label_pc_f54c
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_f558 = call i32 @function_fc64(i32 20)
  store i32 %v2_f344, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_f568 = call i32 @function_fb80(i32 20, i32* nonnull %stack_var_-56)
  store i32 %v3_f568, i32* %r0.global-to-local, align 4
  %v3_f56c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f56c, i32* %r2.global-to-local, align 4
  store i32 %v3_f568, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f578 = load i32, i32* @r5, align 4
  %v1_f578 = add i32 %v0_f578, 4
  %v2_f578 = inttoptr i32 %v1_f578 to i32*
  %v3_f578 = load i32, i32* %v2_f578, align 4
  store i32 %v3_f578, i32* %r0.global-to-local, align 4
  %v4_f57c = inttoptr i32 %v3_f568 to i32*
  %v5_f57c = call i32 @function_11200(i32 %v3_f578, i32* %v4_f57c, i32 %v3_f56c, i32 16384)
  store i32 %v5_f57c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1317c.231 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f58c = load i32, i32* @r5, align 4
  %v1_f58c = add i32 %v0_f58c, 4
  %v2_f58c = inttoptr i32 %v1_f58c to i32*
  %v3_f58c = load i32, i32* %v2_f58c, align 4
  store i32 %v3_f58c, i32* %r0.global-to-local, align 4
  %v5_f590 = call i32 @function_11200(i32 %v3_f58c, i32* bitcast ([3 x i8]* @global_var_1317c.231 to i32*), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_f598 = call i32 @function_fbac(i32 20)
  store i32 %v1_f598, i32* %r0.global-to-local, align 4
  %v0_f59c = load i32, i32* @r5, align 4
  %v1_f59c = add i32 %v0_f59c, 24
  %v2_f59c = inttoptr i32 %v1_f59c to i32*
  %v3_f59c = load i32, i32* %v2_f59c, align 4
  store i32 %v3_f59c, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_f5a4 = add i32 %v0_f59c, 12
  %v3_f5a4 = inttoptr i32 %v2_f5a4 to i32*
  store i32 9, i32* %v3_f5a4, align 4
  br label %dec_label_pc_f794

dec_label_pc_f5ac:                                ; preds = %dec_label_pc_f094
  %v1_f5ac = add i32 %v0_f094, 24
  %v2_f5ac = inttoptr i32 %v1_f5ac to i32*
  %v3_f5ac = load i32, i32* %v2_f5ac, align 4
  store i32 %v3_f5ac, i32* %ip.global-to-local, align 4
  %v1_f5b0 = add i32 %v3_f5ac, -1
  store i32 %v1_f5b0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5b4 = icmp eq i32 %v1_f5b0, 0
  store i1 %v2_f5b4, i1* %cpsr_z.global-to-local, align 1
  %v5_f5b8 = icmp sgt i32 %v1_f5b0, 0
  br i1 %v5_f5b8, label %dec_label_pc_f5e0, label %dec_label_pc_f014thread-pre-split.thread

dec_label_pc_f5c0:                                ; preds = %bb332
  %v2_f5c0 = icmp ugt i8 %v3_f5e4, 35
  store i1 %v2_f5c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5c0 = icmp eq i8 %v3_f5e4, 36
  store i1 %v7_f5c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5c0, label %dec_label_pc_f5f4, label %dec_label_pc_f5c8

dec_label_pc_f5c8:                                ; preds = %dec_label_pc_f5c0
  %v2_f5c8 = icmp ugt i8 %v3_f5e4, 34
  store i1 %v2_f5c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5c8 = icmp eq i8 %v3_f5e4, 35
  store i1 %v7_f5c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5c8, label %dec_label_pc_f5f4, label %dec_label_pc_f5d0

dec_label_pc_f5d0:                                ; preds = %dec_label_pc_f5c8
  %v2_f5d0 = icmp ugt i8 %v3_f5e4, 36
  store i1 %v2_f5d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5d0 = icmp eq i8 %v3_f5e4, 37
  store i1 %v7_f5d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5d0, label %dec_label_pc_f5f4, label %dec_label_pc_f5d8

dec_label_pc_f5d8:                                ; preds = %dec_label_pc_f5d0
  %v1_f5d8 = add i32 %v0_f5f4, -1
  store i32 %v1_f5d8, i32* %r0.global-to-local, align 4
  %v2_f5d8 = icmp ne i32 %v0_f5f4, 0
  store i1 %v2_f5d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5d8 = icmp eq i32 %v0_f5f4, 1
  store i1 %v7_f5d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5d8, label %dec_label_pc_f014thread-pre-split, label %dec_label_pc_f5e0

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f5ac, %dec_label_pc_f5d8
  %v0_f5f4 = phi i32 [ %v1_f5d8, %dec_label_pc_f5d8 ], [ %v1_f5b0, %dec_label_pc_f5ac ]
  %v2_f5e0 = add i32 %v0_f5f4, %v0_f094
  store i32 %v2_f5e0, i32* %r3.global-to-local, align 4
  %v1_f5e4 = add i32 %v2_f5e0, 28
  %v2_f5e4 = inttoptr i32 %v1_f5e4 to i8*
  %v3_f5e4 = load i8, i8* %v2_f5e4, align 1
  %v4_f5e4 = zext i8 %v3_f5e4 to i32
  store i32 %v4_f5e4, i32* %r3.global-to-local, align 4
  %v2_f5e8 = icmp ugt i8 %v3_f5e4, 61
  store i1 %v2_f5e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5e8 = icmp eq i8 %v3_f5e4, 62
  store i1 %v7_f5e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5e8, label %dec_label_pc_f5f4, label %bb332

bb332:                                            ; preds = %dec_label_pc_f5e0
  %v3_f5ec = icmp ugt i8 %v3_f5e4, 57
  store i1 %v3_f5ec, i1* %cpsr_c.global-to-local, align 1
  %v8_f5ec = icmp eq i8 %v3_f5e4, 58
  store i1 %v8_f5ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5ec, label %dec_label_pc_f5f4, label %dec_label_pc_f5c0

dec_label_pc_f5f4:                                ; preds = %dec_label_pc_f5e0, %bb332, %dec_label_pc_f5d0, %dec_label_pc_f5c8, %dec_label_pc_f5c0
  %v1_f5f4 = add i32 %v0_f5f4, 1
  store i32 %v1_f5f4, i32* @r7, align 4
  %v2_f5f8 = icmp eq i32 %v1_f5f4, -1
  store i1 %v2_f5f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5f8 = icmp eq i32 %v0_f5f4, -2
  store i1 %v7_f5f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5f8, label %dec_label_pc_f014thread-pre-split, label %dec_label_pc_f600

dec_label_pc_f600:                                ; preds = %dec_label_pc_f5f4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f600 = icmp eq i32 %v1_f5f4, 0
  store i1 %v2_f600, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v1_f5f4, 1
  br i1 %tmp333, label %dec_label_pc_f1a4, label %dec_label_pc_f608

dec_label_pc_f608:                                ; preds = %dec_label_pc_f600
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_f60c = call i32 @function_fc64(i32 16)
  store i32 %v2_f4ac, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v3_f61c = call i32 @function_fb80(i32 16, i32* nonnull %stack_var_-48)
  store i32 %v3_f61c, i32* %r0.global-to-local, align 4
  %v3_f620 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f620, i32* %r2.global-to-local, align 4
  store i32 %v3_f61c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f62c = load i32, i32* @r5, align 4
  %v1_f62c = add i32 %v0_f62c, 4
  %v2_f62c = inttoptr i32 %v1_f62c to i32*
  %v3_f62c = load i32, i32* %v2_f62c, align 4
  store i32 %v3_f62c, i32* %r0.global-to-local, align 4
  %v4_f630 = inttoptr i32 %v3_f61c to i32*
  %v5_f630 = call i32 @function_11200(i32 %v3_f62c, i32* %v4_f630, i32 %v3_f620, i32 16384)
  store i32 %v5_f630, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1317c.231 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f640 = load i32, i32* @r5, align 4
  %v1_f640 = add i32 %v0_f640, 4
  %v2_f640 = inttoptr i32 %v1_f640 to i32*
  %v3_f640 = load i32, i32* %v2_f640, align 4
  store i32 %v3_f640, i32* %r0.global-to-local, align 4
  %v5_f644 = call i32 @function_11200(i32 %v3_f640, i32* bitcast ([3 x i8]* @global_var_1317c.231 to i32*), i32 2, i32 16384)
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_f64c = call i32 @function_fbac(i32 16)
  store i32 %v1_f64c, i32* %r0.global-to-local, align 4
  %v0_f650 = load i32, i32* @r5, align 4
  %v1_f650 = add i32 %v0_f650, 24
  %v2_f650 = inttoptr i32 %v1_f650 to i32*
  %v3_f650 = load i32, i32* %v2_f650, align 4
  store i32 %v3_f650, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_f658 = add i32 %v0_f650, 12
  %v3_f658 = inttoptr i32 %v2_f658 to i32*
  store i32 8, i32* %v3_f658, align 4
  br label %dec_label_pc_f794

dec_label_pc_f660:                                ; preds = %dec_label_pc_f094
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_f664 = call i32 @function_fc64(i32 22)
  store i32 %v2_f344, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_f674 = call i32 @function_fb80(i32 22, i32* nonnull %stack_var_-56)
  %v3_f678 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f674, i32* %r2.global-to-local, align 4
  %v1_f680 = add i32 %v3_f678, -1
  store i32 %v1_f680, i32* %r3.global-to-local, align 4
  %v0_f684 = load i32, i32* @sb, align 4
  store i32 %v0_f684, i32* %r0.global-to-local, align 4
  %v0_f688 = load i32, i32* @r5, align 4
  %v1_f688 = add i32 %v0_f688, 24
  %v2_f688 = inttoptr i32 %v1_f688 to i32*
  %v3_f688 = load i32, i32* %v2_f688, align 4
  store i32 %v3_f688, i32* %r1.global-to-local, align 4
  %v4_f68c = call i32 @function_10200(i32 %v0_f684, i32 %v3_f688, i32 %v3_f674, i32 %v1_f680)
  %v3_f690 = icmp eq i32 %v4_f68c, -1
  store i1 %v3_f690, i1* %cpsr_c.global-to-local, align 1
  %v8_f690 = icmp eq i32 %v4_f68c, -1
  store i1 %v8_f690, i1* %cpsr_z.global-to-local, align 1
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_f69c = call i32 @function_fbac(i32 22)
  br i1 %v3_f690, label %dec_label_pc_f698, label %dec_label_pc_f8cc

dec_label_pc_f698:                                ; preds = %dec_label_pc_f660
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_f6a4 = call i32 @function_fc64(i32 21)
  store i32 %v2_f344, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_f6b4 = call i32 @function_fb80(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_f6b4, i32* %r0.global-to-local, align 4
  %v3_f6b8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f6b4, i32* %r2.global-to-local, align 4
  %v1_f6c0 = add i32 %v3_f6b8, -1
  store i32 %v1_f6c0, i32* %r3.global-to-local, align 4
  %v0_f6c4 = load i32, i32* @r5, align 4
  %v1_f6c4 = add i32 %v0_f6c4, 24
  %v2_f6c4 = inttoptr i32 %v1_f6c4 to i32*
  %v3_f6c4 = load i32, i32* %v2_f6c4, align 4
  store i32 %v3_f6c4, i32* %r1.global-to-local, align 4
  %v0_f6c8 = load i32, i32* @sb, align 4
  store i32 %v0_f6c8, i32* %r0.global-to-local, align 4
  %v4_f6cc = call i32 @function_10200(i32 %v0_f6c8, i32 %v3_f6c4, i32 %v3_f6b4, i32 %v1_f6c0)
  store i32 %v4_f6cc, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_f6d8 = call i32 @function_fbac(i32 21)
  store i32 %v1_f6d8, i32* %r0.global-to-local, align 4
  %v0_f6dc = load i32, i32* @r7, align 4
  %v2_f6dc = icmp eq i32 %v0_f6dc, -1
  store i1 %v2_f6dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6dc = icmp eq i32 %v0_f6dc, -1
  store i1 %v7_f6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6dc, label %dec_label_pc_f010.loopexit, label %dec_label_pc_f6e4

dec_label_pc_f6e4:                                ; preds = %dec_label_pc_f698
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6e4 = icmp eq i32 %v0_f6dc, 0
  store i1 %v2_f6e4, i1* %cpsr_z.global-to-local, align 1
  %tmp334 = icmp slt i32 %v0_f6dc, 1
  br i1 %tmp334, label %dec_label_pc_f1a4, label %dec_label_pc_f6ec

dec_label_pc_f6ec:                                ; preds = %dec_label_pc_f6e4
  %v0_f6ec = load i32, i32* @r5, align 4
  %v1_f6ec = add i32 %v0_f6ec, 21
  %v2_f6ec = inttoptr i32 %v1_f6ec to i8*
  %v3_f6ec = load i8, i8* %v2_f6ec, align 1
  %v4_f6ec = zext i8 %v3_f6ec to i32
  store i32 %v4_f6ec, i32* %r3.global-to-local, align 4
  %v1_f6f0 = add i32 %v0_f6ec, 20
  %v2_f6f0 = inttoptr i32 %v1_f6f0 to i8*
  %v3_f6f0 = load i8, i8* %v2_f6f0, align 1
  %v4_f6f0 = zext i8 %v3_f6f0 to i32
  store i32 %v4_f6f0, i32* %r2.global-to-local, align 4
  %v1_f6f4 = add i32 %v0_f6ec, 16
  %v2_f6f4 = inttoptr i32 %v1_f6f4 to i32*
  %v3_f6f4 = load i32, i32* %v2_f6f4, align 4
  store i32 %v3_f6f4, i32* %r1.global-to-local, align 4
  %v4_f6f8 = mul nuw nsw i32 %v4_f6ec, 256
  %v5_f6f8 = or i32 %v4_f6f0, %v4_f6f8
  store i32 %v5_f6f8, i32* %r2.global-to-local, align 4
  %v1_f6fc = and i32 %v4_f6f0, 128
  %v2_f6fc = icmp ne i32 %v1_f6fc, 0
  store i1 %v2_f6fc, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_f6ec, i32* %r3.global-to-local, align 4
  store i32 %v3_f6f4, i32* %stack_var_-48, align 4
  store i32 %v5_f6f8, i32* %stack_var_-38, align 4
  %v1_f70c = inttoptr i32 %v0_f6ec to i32*
  %v2_f70c = load i32, i32* %v1_f70c, align 4
  store i32 %v2_f70c, i32* @fp, align 4
  %v0_f710 = call i32 @function_109e8()
  store i32 %v0_f710, i32* %r0.global-to-local, align 4
  %v7_f714 = icmp eq i32 %v0_f710, -1
  %.350 = zext i1 %v7_f714 to i32
  store i32 %.350, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f720 = icmp eq i32 %v0_f710, 0
  store i1 %v2_f720, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v0_f710, 1
  br i1 %tmp337, label %bb338, label %.thread69

.thread69:                                        ; preds = %dec_label_pc_f6ec
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f778

bb338:                                            ; preds = %dec_label_pc_f6ec
  store i32 %.350, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f72c = icmp eq i1 %v7_f714, false
  store i1 %v2_f72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f72c, label %dec_label_pc_f734, label %dec_label_pc_f778

dec_label_pc_f734:                                ; preds = %bb338
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f740 = call i32 @function_11290(i32 2, i32 1, i32 0)
  store i32 %v3_f740, i32* %r0.global-to-local, align 4
  %v2_f744 = icmp eq i32 %v3_f740, -1
  store i1 %v2_f744, i1* %cpsr_c.global-to-local, align 1
  %v7_f744 = icmp eq i32 %v3_f740, -1
  store i1 %v7_f744, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f740, i32* @r6, align 4
  br i1 %v7_f744, label %dec_label_pc_fb78, label %dec_label_pc_f750

dec_label_pc_f750:                                ; preds = %dec_label_pc_f734
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_f754 = call i32 @function_fc64(i32 23)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_f75c = call i32 @function_fc64(i32 24)
  %v0_f760 = load i32, i32* @sl, align 4
  store i32 %v0_f760, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v2_f768 = inttoptr i32 %v0_f760 to i32*
  %v3_f768 = call i32 @function_fb80(i32 23, i32* %v2_f768)
  store i32 %v3_f768, i32* %r0.global-to-local, align 4
  %v1_f76c = inttoptr i32 %v3_f768 to i8*
  %v2_f76c = call i32 @function_dc44(i8* %v1_f76c)
  store i32 %v2_f76c, i32* %r0.global-to-local, align 4
  store i32 %v2_f76c, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_f770 = icmp eq i32 %v2_f76c, 0
  store i1 %v3_f770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f770, label %dec_label_pc_f778, label %dec_label_pc_fa48

dec_label_pc_f778:                                ; preds = %.thread69, %dec_label_pc_f750, %bb338
  %v0_f778 = load i32, i32* @r5, align 4
  %v1_f778 = add i32 %v0_f778, 4
  %v2_f778 = inttoptr i32 %v1_f778 to i32*
  %v3_f778 = load i32, i32* %v2_f778, align 4
  store i32 %v3_f778, i32* %r0.global-to-local, align 4
  %v1_f77c = call i32 @function_109bc(i32 %v3_f778)
  store i32 %v1_f77c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_f788 = load i32, i32* @r5, align 4
  %v1_f788 = add i32 %v0_f788, 24
  %v2_f788 = inttoptr i32 %v1_f788 to i32*
  %v3_f788 = load i32, i32* %v2_f788, align 4
  store i32 %v3_f788, i32* %ip.global-to-local, align 4
  %v2_f78c = add i32 %v0_f788, 4
  %v3_f78c = inttoptr i32 %v2_f78c to i32*
  store i32 -1, i32* %v3_f78c, align 4
  %v0_f790 = load i32, i32* %r2.global-to-local, align 4
  %v1_f790 = load i32, i32* @r5, align 4
  %v2_f790 = add i32 %v1_f790, 12
  %v3_f790 = inttoptr i32 %v2_f790 to i32*
  store i32 %v0_f790, i32* %v3_f790, align 4
  br label %dec_label_pc_f794

dec_label_pc_f794:                                ; preds = %.thread205, %dec_label_pc_f814, %dec_label_pc_f9e4, %dec_label_pc_f8fc, %dec_label_pc_f608, %dec_label_pc_f554, %dec_label_pc_f4a0, %dec_label_pc_f338, %dec_label_pc_f2a0, %dec_label_pc_f210, %dec_label_pc_f1ac, %dec_label_pc_f778
  %v0_f794 = load i32, i32* %ip.global-to-local, align 4
  %v1_f794 = load i32, i32* @r7, align 4
  %v2_f794 = sub i32 %v0_f794, %v1_f794
  %v3_f794 = icmp uge i32 %v0_f794, %v1_f794
  store i1 %v3_f794, i1* %cpsr_c.global-to-local, align 1
  %v4_f794 = xor i32 %v1_f794, %v0_f794
  %v5_f794 = xor i32 %v2_f794, %v0_f794
  %v6_f794 = and i32 %v5_f794, %v4_f794
  %v7_f794 = icmp slt i32 %v6_f794, 0
  %v8_f794 = icmp slt i32 %v2_f794, 0
  %v9_f794 = icmp eq i32 %v0_f794, %v1_f794
  store i1 %v9_f794, i1* %cpsr_z.global-to-local, align 1
  %v2_f798 = xor i1 %v8_f794, %v7_f794
  %v0_f794.v1_f794 = select i1 %v2_f798, i32 %v0_f794, i32 %v1_f794
  store i32 %v0_f794.v1_f794, i32* %r1.global-to-local, align 4
  %v2_f7a0 = sub i32 %v0_f794, %v0_f794.v1_f794
  store i32 %v2_f7a0, i32* @r2, align 4
  %v1_f7a4 = load i32, i32* @r5, align 4
  %v2_f7a4 = add i32 %v1_f7a4, 24
  %v3_f7a4 = inttoptr i32 %v2_f7a4 to i32*
  store i32 %v2_f7a0, i32* %v3_f7a4, align 4
  %v0_f7a8 = load i32, i32* @sb, align 4
  %v1_f7a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_f7a8 = add i32 %v1_f7a8, %v0_f7a8
  store i32 %v2_f7a8, i32* @r1, align 4
  store i32 %v0_f7a8, i32* @r0, align 4
  %v3_f7b0 = call i32 @function_10fc0(i32 %v0_f7a8, i32 %v2_f7a8, i32 %v2_f7a0)
  store i32 %v3_f7b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f094

dec_label_pc_f7b8:                                ; preds = %dec_label_pc_f094
  %v1_f7b8 = add i32 %v0_f094, 24
  %v2_f7b8 = inttoptr i32 %v1_f7b8 to i32*
  %v3_f7b8 = load i32, i32* %v2_f7b8, align 4
  store i32 %v3_f7b8, i32* %ip.global-to-local, align 4
  %v1_f7bc = add i32 %v3_f7b8, -1
  store i32 %v1_f7bc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7c0 = icmp eq i32 %v1_f7bc, 0
  store i1 %v2_f7c0, i1* %cpsr_z.global-to-local, align 1
  %v5_f7c4 = icmp sgt i32 %v1_f7bc, 0
  br i1 %v5_f7c4, label %dec_label_pc_f7ec, label %dec_label_pc_f014thread-pre-split.thread

dec_label_pc_f7cc:                                ; preds = %bb341
  %v2_f7cc = icmp ugt i8 %v3_f7f0, 35
  store i1 %v2_f7cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7cc = icmp eq i8 %v3_f7f0, 36
  store i1 %v7_f7cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7cc, label %dec_label_pc_f800, label %dec_label_pc_f7d4

dec_label_pc_f7d4:                                ; preds = %dec_label_pc_f7cc
  %v2_f7d4 = icmp ugt i8 %v3_f7f0, 34
  store i1 %v2_f7d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7d4 = icmp eq i8 %v3_f7f0, 35
  store i1 %v7_f7d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7d4, label %dec_label_pc_f800, label %dec_label_pc_f7dc

dec_label_pc_f7dc:                                ; preds = %dec_label_pc_f7d4
  %v2_f7dc = icmp ugt i8 %v3_f7f0, 36
  store i1 %v2_f7dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7dc = icmp eq i8 %v3_f7f0, 37
  store i1 %v7_f7dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7dc, label %dec_label_pc_f800, label %dec_label_pc_f7e4

dec_label_pc_f7e4:                                ; preds = %dec_label_pc_f7dc
  %v1_f7e4 = add i32 %v0_f800, -1
  store i32 %v1_f7e4, i32* %r0.global-to-local, align 4
  %v2_f7e4 = icmp ne i32 %v0_f800, 0
  store i1 %v2_f7e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7e4 = icmp eq i32 %v0_f800, 1
  store i1 %v7_f7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7e4, label %dec_label_pc_f014thread-pre-split, label %dec_label_pc_f7ec

dec_label_pc_f7ec:                                ; preds = %dec_label_pc_f7b8, %dec_label_pc_f7e4
  %v0_f800 = phi i32 [ %v1_f7e4, %dec_label_pc_f7e4 ], [ %v1_f7bc, %dec_label_pc_f7b8 ]
  %v2_f7ec = add i32 %v0_f800, %v0_f094
  store i32 %v2_f7ec, i32* %r3.global-to-local, align 4
  %v1_f7f0 = add i32 %v2_f7ec, 28
  %v2_f7f0 = inttoptr i32 %v1_f7f0 to i8*
  %v3_f7f0 = load i8, i8* %v2_f7f0, align 1
  %v4_f7f0 = zext i8 %v3_f7f0 to i32
  store i32 %v4_f7f0, i32* %r3.global-to-local, align 4
  %v2_f7f4 = icmp ugt i8 %v3_f7f0, 61
  store i1 %v2_f7f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7f4 = icmp eq i8 %v3_f7f0, 62
  store i1 %v7_f7f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7f4, label %dec_label_pc_f800, label %bb341

bb341:                                            ; preds = %dec_label_pc_f7ec
  %v3_f7f8 = icmp ugt i8 %v3_f7f0, 57
  store i1 %v3_f7f8, i1* %cpsr_c.global-to-local, align 1
  %v8_f7f8 = icmp eq i8 %v3_f7f0, 58
  store i1 %v8_f7f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7f8, label %dec_label_pc_f800, label %dec_label_pc_f7cc

dec_label_pc_f800:                                ; preds = %dec_label_pc_f7ec, %bb341, %dec_label_pc_f7dc, %dec_label_pc_f7d4, %dec_label_pc_f7cc
  %v1_f800 = add i32 %v0_f800, 1
  store i32 %v1_f800, i32* @r7, align 4
  %v2_f804 = icmp eq i32 %v1_f800, -1
  store i1 %v2_f804, i1* %cpsr_c.global-to-local, align 1
  %v7_f804 = icmp eq i32 %v0_f800, -2
  store i1 %v7_f804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f804, label %dec_label_pc_f014thread-pre-split, label %dec_label_pc_f80c

dec_label_pc_f80c:                                ; preds = %dec_label_pc_f800
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f80c = icmp eq i32 %v1_f800, 0
  store i1 %v2_f80c, i1* %cpsr_z.global-to-local, align 1
  %tmp342 = icmp slt i32 %v1_f800, 1
  br i1 %tmp342, label %dec_label_pc_f1a4, label %dec_label_pc_f814

dec_label_pc_f814:                                ; preds = %dec_label_pc_f80c
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_f818 = call i32 @function_fc64(i32 19)
  store i32 %v2_f344, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v3_f828 = call i32 @function_fb80(i32 19, i32* nonnull %stack_var_-56)
  store i32 %v3_f828, i32* %r0.global-to-local, align 4
  %v3_f82c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f82c, i32* %r2.global-to-local, align 4
  store i32 %v3_f828, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f838 = load i32, i32* @r5, align 4
  %v1_f838 = add i32 %v0_f838, 4
  %v2_f838 = inttoptr i32 %v1_f838 to i32*
  %v3_f838 = load i32, i32* %v2_f838, align 4
  store i32 %v3_f838, i32* %r0.global-to-local, align 4
  %v4_f83c = inttoptr i32 %v3_f828 to i32*
  %v5_f83c = call i32 @function_11200(i32 %v3_f838, i32* %v4_f83c, i32 %v3_f82c, i32 16384)
  store i32 %v5_f83c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1317c.231 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f84c = load i32, i32* @r5, align 4
  %v1_f84c = add i32 %v0_f84c, 4
  %v2_f84c = inttoptr i32 %v1_f84c to i32*
  %v3_f84c = load i32, i32* %v2_f84c, align 4
  store i32 %v3_f84c, i32* %r0.global-to-local, align 4
  %v5_f850 = call i32 @function_11200(i32 %v3_f84c, i32* bitcast ([3 x i8]* @global_var_1317c.231 to i32*), i32 2, i32 16384)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_f858 = call i32 @function_fbac(i32 19)
  store i32 %v1_f858, i32* %r0.global-to-local, align 4
  %v0_f85c = load i32, i32* @r5, align 4
  %v1_f85c = add i32 %v0_f85c, 24
  %v2_f85c = inttoptr i32 %v1_f85c to i32*
  %v3_f85c = load i32, i32* %v2_f85c, align 4
  store i32 %v3_f85c, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_f864 = add i32 %v0_f85c, 12
  %v3_f864 = inttoptr i32 %v2_f864 to i32*
  store i32 10, i32* %v3_f864, align 4
  br label %dec_label_pc_f794

dec_label_pc_f86c:                                ; preds = %dec_label_pc_f124
  store i32 ptrtoint (i32* @global_var_13196.233 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f0dc, i32* @r0, align 4
  %v3_f878 = call i32 @function_10fb0(i32 %v2_f0dc, i32 ptrtoint (i32* @global_var_13196.233 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_f884, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1318d.235 to i32), i32* @r1, align 4
  %v3_f88c = call i32 @function_10fb0(i32 %v2_f884, i32 ptrtoint (i32* @global_var_1318d.235 to i32), i32 9)
  store i32 %v3_f88c, i32* %r0.global-to-local, align 4
  %v0_f890 = load i32, i32* @r5, align 4
  %v1_f890 = add i32 %v0_f890, 24
  %v2_f890 = inttoptr i32 %v1_f890 to i32*
  %v3_f890 = load i32, i32* %v2_f890, align 4
  store i32 %v3_f890, i32* %ip.global-to-local, align 4
  %v0_f894 = load i32, i32* @r6, align 4
  %v1_f894 = add i32 %v0_f894, 2
  store i32 %v1_f894, i32* %r2.global-to-local, align 4
  %v0_f898 = load i32, i32* @sb, align 4
  %v2_f898 = add i32 %v0_f898, %v3_f890
  store i32 %v2_f898, i32* %r3.global-to-local, align 4
  %v3_f89c = icmp uge i32 %v2_f898, %v1_f894
  store i1 %v3_f89c, i1* %cpsr_c.global-to-local, align 1
  %v9_f89c = icmp eq i32 %v2_f898, %v1_f894
  store i1 %v9_f89c, i1* %cpsr_z.global-to-local, align 1
  %v2_f8a0 = xor i1 %v3_f89c, true
  %v3_f8a0 = or i1 %v9_f89c, %v2_f8a0
  br i1 %v3_f8a0, label %dec_label_pc_f86c.dec_label_pc_f194.loopexit_crit_edge, label %dec_label_pc_f8a4

dec_label_pc_f86c.dec_label_pc_f194.loopexit_crit_edge: ; preds = %dec_label_pc_f86c
  %v0_f194.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f194

dec_label_pc_f8a4:                                ; preds = %dec_label_pc_f86c
  %v0_f8a4 = load i32, i32* @r4, align 4
  %v1_f8a4 = add i32 %v0_f8a4, 1
  %v2_f8a4 = inttoptr i32 %v1_f8a4 to i8*
  %v3_f8a4 = load i8, i8* %v2_f8a4, align 1
  %v4_f8a4 = zext i8 %v3_f8a4 to i32
  store i32 %v4_f8a4, i32* %r3.global-to-local, align 4
  %v2_f8a8 = icmp ugt i8 %v3_f8a4, 30
  store i1 %v2_f8a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f8a8 = icmp eq i8 %v3_f8a4, 31
  store i1 %v7_f8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8a8, label %dec_label_pc_f998, label %dec_label_pc_f8b0

dec_label_pc_f8b0:                                ; preds = %dec_label_pc_f8a4
  %v1_f8b0 = add i32 %v0_f8a4, -1
  %v2_f8b0 = inttoptr i32 %v1_f8b0 to i8*
  %v3_f8b0 = load i8, i8* %v2_f8b0, align 1
  %v4_f8b0 = zext i8 %v3_f8b0 to i32
  store i32 %v4_f8b0, i32* %r3.global-to-local, align 4
  %v2_f8b4 = icmp ugt i8 %v3_f8b0, -4
  store i1 %v2_f8b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f8b4 = icmp eq i8 %v3_f8b0, -3
  store i1 %v7_f8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8b4, label %bb343, label %dec_label_pc_f8c0

bb343:                                            ; preds = %dec_label_pc_f8b0
  %v1_f8b8 = load i32, i32* @r8, align 4
  %v2_f8b8 = trunc i32 %v1_f8b8 to i8
  store i8 %v2_f8b8, i8* %v2_f8b0, align 1
  %v0_f8bc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f8bc.pr, label %dec_label_pc_f138, label %.dec_label_pc_f8c0_crit_edge

.dec_label_pc_f8c0_crit_edge:                     ; preds = %bb343
  %v0_f8c0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f8c0

dec_label_pc_f8c0:                                ; preds = %.dec_label_pc_f8c0_crit_edge, %dec_label_pc_f8b0
  %v0_f8c0 = phi i32 [ %v0_f8c0.pre, %.dec_label_pc_f8c0_crit_edge ], [ %v4_f8b0, %dec_label_pc_f8b0 ]
  %v2_f8c0 = icmp ugt i32 %v0_f8c0, 250
  store i1 %v2_f8c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f8c0 = icmp eq i32 %v0_f8c0, 251
  store i1 %v7_f8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8c0, label %bb344, label %dec_label_pc_f138

bb344:                                            ; preds = %dec_label_pc_f8c0
  %v1_f8c4 = load i32, i32* %sl.global-to-local, align 4
  %v2_f8c4 = trunc i32 %v1_f8c4 to i8
  %v3_f8c4 = load i32, i32* @r4, align 4
  %v4_f8c4 = add i32 %v3_f8c4, -1
  %v5_f8c4 = inttoptr i32 %v4_f8c4 to i8*
  store i8 %v2_f8c4, i8* %v5_f8c4, align 1
  br label %dec_label_pc_f138

dec_label_pc_f8cc:                                ; preds = %dec_label_pc_f660
  store i32 %v1_f69c, i32* %r0.global-to-local, align 4
  %v0_f8d4 = load i32, i32* @r5, align 4
  %v1_f8d4 = add i32 %v0_f8d4, 4
  %v2_f8d4 = inttoptr i32 %v1_f8d4 to i32*
  %v3_f8d4 = load i32, i32* %v2_f8d4, align 4
  store i32 %v3_f8d4, i32* %r0.global-to-local, align 4
  %v1_f8d8 = call i32 @function_109bc(i32 %v3_f8d4)
  store i32 %v1_f8d8, i32* %r0.global-to-local, align 4
  %v0_f8dc = load i32, i32* @r5, align 4
  %v1_f8dc = add i32 %v0_f8dc, 284
  %v2_f8dc = inttoptr i32 %v1_f8dc to i8*
  %v3_f8dc = load i8, i8* %v2_f8dc, align 1
  %v4_f8dc = zext i8 %v3_f8dc to i32
  %v1_f8e0 = add nuw nsw i32 %v4_f8dc, 1
  %v1_f8e4 = urem i32 %v1_f8e0, 256
  store i32 %v1_f8e4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_f8ec = icmp ugt i32 %v1_f8e4, 9
  store i1 %v2_f8ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f8ec = icmp eq i32 %v1_f8e4, 10
  store i1 %v7_f8ec, i1* %cpsr_z.global-to-local, align 1
  %v2_f8f0 = add i32 %v0_f8dc, 4
  %v3_f8f0 = inttoptr i32 %v2_f8f0 to i32*
  store i32 -1, i32* %v3_f8f0, align 4
  %v0_f8f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8f4 = trunc i32 %v0_f8f4 to i8
  %v2_f8f4 = load i32, i32* @r5, align 4
  %v3_f8f4 = add i32 %v2_f8f4, 284
  %v4_f8f4 = inttoptr i32 %v3_f8f4 to i8*
  store i8 %v1_f8f4, i8* %v4_f8f4, align 1
  %v0_f8f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_f8fc = load i32, i32* @r5, align 4
  br i1 %v0_f8f8, label %dec_label_pc_f8fc, label %dec_label_pc_f9e4

dec_label_pc_f8fc:                                ; preds = %dec_label_pc_f8cc
  %v1_f8fc = add i32 %v0_f8fc, 24
  %v2_f8fc = inttoptr i32 %v1_f8fc to i32*
  %v3_f8fc = load i32, i32* %v2_f8fc, align 4
  store i32 %v3_f8fc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_f90c = add i32 %v0_f8fc, 284
  %v4_f90c = inttoptr i32 %v3_f90c to i8*
  store i8 0, i8* %v4_f90c, align 1
  %v0_f910 = load i32, i32* %r1.global-to-local, align 4
  %v1_f910 = load i32, i32* @r5, align 4
  %v2_f910 = add i32 %v1_f910, 12
  %v3_f910 = inttoptr i32 %v2_f910 to i32*
  store i32 %v0_f910, i32* %v3_f910, align 4
  br label %dec_label_pc_f794

dec_label_pc_f918:                                ; preds = %dec_label_pc_f02c
  br i1 %v2_f054, label %dec_label_pc_fa38, label %dec_label_pc_f91c

dec_label_pc_f91c:                                ; preds = %dec_label_pc_f918
  %v3_f91c = icmp eq i32 %v5_f050, -1
  store i1 %v3_f91c, i1* %cpsr_c.global-to-local, align 1
  %v8_f91c = icmp eq i32 %v5_f050, -1
  store i1 %v8_f91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f91c, label %dec_label_pc_f924, label %dec_label_pc_f07c

dec_label_pc_f924:                                ; preds = %dec_label_pc_f91c
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_f928 = load i32, i32* %v2_f034, align 4
  store i32 %v2_f928, i32* %r3.global-to-local, align 4
  %v2_f92c = icmp ugt i32 %v2_f928, 10
  store i1 %v2_f92c, i1* %cpsr_c.global-to-local, align 1
  %v7_f92c = icmp eq i32 %v2_f928, 11
  store i1 %v7_f92c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f92c, label %dec_label_pc_eeac, label %dec_label_pc_f934

dec_label_pc_f934:                                ; preds = %dec_label_pc_f924, %dec_label_pc_fa38
  %v0_f934 = load i32, i32* @r5, align 4
  %v1_f934 = add i32 %v0_f934, 4
  %v2_f934 = inttoptr i32 %v1_f934 to i32*
  %v3_f934 = load i32, i32* %v2_f934, align 4
  store i32 %v3_f934, i32* %r0.global-to-local, align 4
  %v1_f938 = call i32 @function_109bc(i32 %v3_f934)
  store i32 %v1_f938, i32* %r0.global-to-local, align 4
  %v0_f93c = load i32, i32* @r5, align 4
  %v1_f93c = add i32 %v0_f93c, 284
  %v2_f93c = inttoptr i32 %v1_f93c to i8*
  %v3_f93c = load i8, i8* %v2_f93c, align 1
  %v4_f93c = zext i8 %v3_f93c to i32
  %v1_f940 = add nuw nsw i32 %v4_f93c, 1
  %v1_f944 = urem i32 %v1_f940, 256
  store i32 %v1_f944, i32* %r3.global-to-local, align 4
  %v2_f948 = icmp ugt i32 %v1_f944, 8
  store i1 %v2_f948, i1* %cpsr_c.global-to-local, align 1
  %v7_f948 = icmp eq i32 %v1_f944, 9
  store i1 %v7_f948, i1* %cpsr_z.global-to-local, align 1
  %v1_f94c = trunc i32 %v1_f940 to i8
  store i8 %v1_f94c, i8* %v2_f93c, align 1
  store i32 -1, i32* @r4, align 4
  %v0_f954 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f954 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f954 = xor i1 %v1_f954, true
  %v3_f954 = and i1 %v0_f954, %v2_f954
  br i1 %v3_f954, label %bb345, label %.thread218

.thread218:                                       ; preds = %dec_label_pc_f934
  %v1_f958214219 = load i32, i32* @r5, align 4
  %v2_f958215220 = add i32 %v1_f958214219, 4
  %v3_f958216221 = inttoptr i32 %v2_f958215220 to i32*
  store i32 -1, i32* %v3_f958216221, align 4
  br label %bb346

bb345:                                            ; preds = %dec_label_pc_f934
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f958210 = load i32, i32* @r5, align 4
  %v2_f958211 = add i32 %v1_f958210, 4
  %v3_f958212 = inttoptr i32 %v2_f958211 to i32*
  store i32 -1, i32* %v3_f958212, align 4
  %v4_f95c = load i32, i32* %r3.global-to-local, align 4
  %v5_f95c = load i32, i32* @r5, align 4
  %v6_f95c = add i32 %v5_f95c, 12
  %v7_f95c = inttoptr i32 %v6_f95c to i32*
  store i32 %v4_f95c, i32* %v7_f95c, align 4
  %v4_f960 = load i32, i32* %r3.global-to-local, align 4
  %v5_f960 = trunc i32 %v4_f960 to i8
  %v6_f960 = load i32, i32* @r5, align 4
  %v7_f960 = add i32 %v6_f960, 284
  %v8_f960 = inttoptr i32 %v7_f960 to i8*
  store i8 %v5_f960, i8* %v8_f960, align 1
  %v0_f964.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f964.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb346

bb346:                                            ; preds = %.thread218, %bb345
  %v1_f964 = phi i1 [ %v1_f964.pre, %bb345 ], [ %v1_f954, %.thread218 ]
  %v0_f964 = phi i1 [ %v0_f964.pre, %bb345 ], [ %v0_f954, %.thread218 ]
  %v2_f964 = xor i1 %v1_f964, true
  %v3_f964 = and i1 %v0_f964, %v2_f964
  br i1 %v3_f964, label %dec_label_pc_eeac, label %dec_label_pc_f968

dec_label_pc_f968:                                ; preds = %bb346
  %v0_f968 = load i32, i32* @r5, align 4
  store i32 %v0_f968, i32* @r0, align 4
  %v0_f96c = call i32 @function_e1a4()
  store i32 %v0_f96c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eeac

dec_label_pc_f974:                                ; preds = %dec_label_pc_f270, %dec_label_pc_f24c, %dec_label_pc_f28c
  store i32 %v3_f24c, i32* %r1.global-to-local, align 4
  %v0_f978 = load i32, i32* @sb, align 4
  store i32 %v0_f978, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13180.237 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_f984 = call i32 @function_10200(i32 %v0_f978, i32 %v3_f24c, i32 ptrtoint ([8 x i8]* @global_var_13180.237 to i32), i32 7)
  store i32 %v5_f984, i32* %r0.global-to-local, align 4
  %v3_f988 = icmp eq i32 %v5_f984, -1
  store i1 %v3_f988, i1* %cpsr_c.global-to-local, align 1
  %v8_f988 = icmp eq i32 %v5_f984, -1
  store i1 %v8_f988, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_f984, i32* @r7, align 4
  br i1 %v3_f988, label %dec_label_pc_f010.loopexit, label %dec_label_pc_f298

dec_label_pc_f998:                                ; preds = %dec_label_pc_f8a4
  store i32 %v2_f0dc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f9a4 = add i32 %v0_f890, 4
  %v2_f9a4 = inttoptr i32 %v1_f9a4 to i32*
  %v3_f9a4 = load i32, i32* %v2_f9a4, align 4
  store i32 %v3_f9a4, i32* %r0.global-to-local, align 4
  %v5_f9a8 = call i32 @function_11200(i32 %v3_f9a4, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_f9a8, i32* %r0.global-to-local, align 4
  store i32 %v2_f87c, i32* %r1.global-to-local, align 4
  %v0_f9b0 = load i32, i32* @r5, align 4
  %v1_f9b0 = add i32 %v0_f9b0, 4
  %v2_f9b0 = inttoptr i32 %v1_f9b0 to i32*
  %v3_f9b0 = load i32, i32* %v2_f9b0, align 4
  store i32 %v3_f9b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f174

dec_label_pc_f9c0:                                ; preds = %dec_label_pc_f01c
  store i32 %.pre, i32* @r0, align 4
  %v1_f9c8 = add i32 %v0_f9c0, 92
  store i32 %v1_f9c8, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_f9d0 = call i32 @function_10fc0(i32 %.pre, i32 %v1_f9c8, i32 192)
  store i32 %v3_f9d0, i32* %r0.global-to-local, align 4
  %v0_f9d4 = load i32, i32* @r5, align 4
  %v1_f9d4 = add i32 %v0_f9d4, 24
  %v2_f9d4 = inttoptr i32 %v1_f9d4 to i32*
  %v3_f9d4 = load i32, i32* %v2_f9d4, align 4
  store i32 %v3_f9d4, i32* %r3.global-to-local, align 4
  %v1_f9d8 = add i32 %v3_f9d4, -64
  store i32 %v1_f9d8, i32* %ip.global-to-local, align 4
  store i32 %v1_f9d8, i32* %v2_f9d4, align 4
  br label %dec_label_pc_f02c

dec_label_pc_f9e4:                                ; preds = %dec_label_pc_f8cc
  store i32 %v0_f8fc, i32* @r0, align 4
  %v0_f9e8 = call i32 @function_e1a4()
  store i32 %v0_f9e8, i32* %r0.global-to-local, align 4
  %v0_f9ec = load i32, i32* @r5, align 4
  %v1_f9ec = add i32 %v0_f9ec, 24
  %v2_f9ec = inttoptr i32 %v1_f9ec to i32*
  %v3_f9ec = load i32, i32* %v2_f9ec, align 4
  store i32 %v3_f9ec, i32* %ip.global-to-local, align 4
  %v0_f9f0 = load i32, i32* @r4, align 4
  store i32 %v0_f9f0, i32* @r7, align 4
  br label %dec_label_pc_f794

dec_label_pc_f9f8:                                ; preds = %dec_label_pc_ee04, %dec_label_pc_ede8
  %v0_f9f8 = load i32, i32* @r7, align 4
  %v1_f9f8 = load i32, i32* @r4, align 4
  %v2_f9f8 = add i32 %v1_f9f8, 12
  %v3_f9f8 = inttoptr i32 %v2_f9f8 to i32*
  store i32 %v0_f9f8, i32* %v3_f9f8, align 4
  %v0_f9fc = load i32, i32* @r7, align 4
  %v1_f9fc = trunc i32 %v0_f9fc to i8
  %v2_f9fc = load i32, i32* @r4, align 4
  %v3_f9fc = add i32 %v2_f9fc, 284
  %v4_f9fc = inttoptr i32 %v3_f9fc to i8*
  store i8 %v1_f9fc, i8* %v4_f9fc, align 1
  br label %bb309

dec_label_pc_fa04:                                ; preds = %dec_label_pc_ef90, %dec_label_pc_ef48
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fa08

dec_label_pc_fa08:                                ; preds = %dec_label_pc_efb8, %dec_label_pc_fa04
  %v0_fa10 = phi i32 [ 0, %dec_label_pc_fa04 ], [ %v0_ef98, %dec_label_pc_efb8 ]
  %v0_fa08 = load i32, i32* @r5, align 4
  %v1_fa08 = add i32 %v0_fa08, 4
  %v2_fa08 = inttoptr i32 %v1_fa08 to i32*
  %v3_fa08 = load i32, i32* %v2_fa08, align 4
  store i32 %v3_fa08, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_fa10 = inttoptr i32 %v0_fa08 to i32*
  store i32 %v0_fa10, i32* %v2_fa10, align 4
  %v0_fa14 = load i32, i32* %ip.global-to-local, align 4
  %v1_fa14 = load i32, i32* @r5, align 4
  %v2_fa14 = add i32 %v1_fa14, 24
  %v3_fa14 = inttoptr i32 %v2_fa14 to i32*
  store i32 %v0_fa14, i32* %v3_fa14, align 4
  %v0_ee88.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ee88

dec_label_pc_fa1c:                                ; preds = %dec_label_pc_ef08
  %v0_fa1c = load i32, i32* @r5, align 4
  %v1_fa1c = add i32 %v0_fa1c, 4
  %v2_fa1c = inttoptr i32 %v1_fa1c to i32*
  %v3_fa1c = load i32, i32* %v2_fa1c, align 4
  store i32 %v3_fa1c, i32* %r0.global-to-local, align 4
  %v1_fa20 = call i32 @function_109bc(i32 %v3_fa1c)
  store i32 %v1_fa20, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_fa28 = load i32, i32* @r6, align 4
  %v1_fa28 = load i32, i32* @r5, align 4
  %v2_fa28 = add i32 %v1_fa28, 12
  %v3_fa28 = inttoptr i32 %v2_fa28 to i32*
  store i32 %v0_fa28, i32* %v3_fa28, align 4
  %v0_fa2c = load i32, i32* %r4.global-to-local, align 4
  %v1_fa2c = load i32, i32* @r5, align 4
  %v2_fa2c = add i32 %v1_fa2c, 4
  %v3_fa2c = inttoptr i32 %v2_fa2c to i32*
  store i32 %v0_fa2c, i32* %v3_fa2c, align 4
  %v0_fa30 = load i32, i32* @r6, align 4
  %v1_fa30 = trunc i32 %v0_fa30 to i8
  %v2_fa30 = load i32, i32* @r5, align 4
  %v3_fa30 = add i32 %v2_fa30, 284
  %v4_fa30 = inttoptr i32 %v3_fa30 to i8*
  store i8 %v1_fa30, i8* %v4_fa30, align 1
  br label %dec_label_pc_eeac

dec_label_pc_fa38:                                ; preds = %dec_label_pc_f918
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_f034, align 4
  br label %dec_label_pc_f934

dec_label_pc_fa48:                                ; preds = %dec_label_pc_f750
  store i32 2, i32* @r5, align 4
  %v1_fa4c = add i32 %v2_f76c, 4
  %v2_fa4c = inttoptr i32 %v1_fa4c to i32*
  %v3_fa4c = load i32, i32* %v2_fa4c, align 4
  store i32 %v3_fa4c, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_fa58 = call i32 @function_dab8()
  store i32 %v0_fa58, i32* %r0.global-to-local, align 4
  %v0_fa5c = load i32, i32* @r8, align 4
  %v1_fa5c = inttoptr i32 %v0_fa5c to i8*
  %v2_fa5c = load i8, i8* %v1_fa5c, align 1
  %v3_fa5c = zext i8 %v2_fa5c to i32
  store i32 %v3_fa5c, i32* %r1.global-to-local, align 4
  %v2_fa60 = call i32 @function_10744(i32 %v0_fa58, i32 %v3_fa5c)
  store i32 %v2_fa60, i32* %r0.global-to-local, align 4
  %v0_fa64 = load i32, i32* @r4, align 4
  %v2_fa64 = and i32 %v2_fa60, 1073741824
  %v3_fa64 = icmp ne i32 %v2_fa64, 0
  store i1 %v3_fa64, i1* %cpsr_c.global-to-local, align 1
  %v4_fa64 = mul i32 %v2_fa60, 4
  %v5_fa64 = add i32 %v0_fa64, %v4_fa64
  %v6_fa64 = inttoptr i32 %v5_fa64 to i32*
  %v7_fa64 = load i32, i32* %v6_fa64, align 4
  store i32 %v7_fa64, i32* %r3.global-to-local, align 4
  %v0_fa68 = load i32, i32* @sl, align 4
  store i32 %v0_fa68, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v2_fa74 = inttoptr i32 %v0_fa68 to i32*
  %v3_fa74 = call i32 @function_fb80(i32 24, i32* %v2_fa74)
  %v4_fa74 = inttoptr i32 %v3_fa74 to i8*
  store i32 %v3_fa74, i32* %r0.global-to-local, align 4
  %v2_fa78 = add i32 %v3_fa74, 1
  %v3_fa78 = inttoptr i32 %v2_fa78 to i8*
  %v4_fa78 = load i8, i8* %v3_fa78, align 1
  %v5_fa78 = zext i8 %v4_fa78 to i32
  store i32 %v5_fa78, i32* %r2.global-to-local, align 4
  %v3_fa7c = load i8, i8* %v4_fa74, align 1
  %v4_fa7c = zext i8 %v3_fa7c to i32
  %v4_fa80 = mul nuw nsw i32 %v5_fa78, 256
  %v5_fa80 = or i32 %v4_fa7c, %v4_fa80
  store i32 %v5_fa80, i32* %r3.global-to-local, align 4
  %v1_fa84 = sext i8 %v3_fa7c to i32
  %v2_fa84 = and i32 %v1_fa84, 128
  %v3_fa84 = icmp ne i32 %v2_fa84, 0
  store i1 %v3_fa84, i1* %cpsr_c.global-to-local, align 1
  %v4_fa84 = sdiv i32 %v1_fa84, 256
  store i32 %v4_fa84, i32* %r1.global-to-local, align 4
  %v0_fa88 = load i32, i32* @r8, align 4
  store i32 %v0_fa88, i32* %r0.global-to-local, align 4
  %v10_fa94 = call i32 @function_dc20(i32 %v0_fa88, i32 %v4_fa84, i32 %v5_fa78, i32 %v1_fa84, i32 %v1_fa84, i32 %v4_fa84)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_fa9c = call i32 @function_fbac(i32 23)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_faa4 = call i32 @function_fbac(i32 24)
  %v0_faac = load i32, i32* @r6, align 4
  store i32 %v0_faac, i32* %r0.global-to-local, align 4
  %v2_fab0 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_fab0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_fab8 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_fab8 = call i32 @function_110ec(i32 %v0_faac, %sockaddr* %v3_fab8, i32 16)
  store i32 %v4_fab8, i32* %r0.global-to-local, align 4
  %v3_fabc = icmp eq i32 %v4_fab8, -1
  store i1 %v3_fabc, i1* %cpsr_c.global-to-local, align 1
  %v8_fabc = icmp eq i32 %v4_fab8, -1
  store i1 %v8_fabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fabc, label %dec_label_pc_fac4, label %dec_label_pc_fad4

dec_label_pc_fac4:                                ; preds = %dec_label_pc_fa48
  %v0_fac4 = load i32, i32* @r6, align 4
  store i32 %v0_fac4, i32* %r0.global-to-local, align 4
  %v1_fac8 = call i32 @function_109bc(i32 %v0_fac4)
  %v0_facc = load i32, i32* @sl, align 4
  store i32 %v0_facc, i32* %r0.global-to-local, align 4
  %v1_fad0 = call i32 @function_11b6c(i32 %v0_facc)
  store i32 %v1_fad0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fad4

dec_label_pc_fad4:                                ; preds = %dec_label_pc_fa48, %dec_label_pc_fac4
  store i32 %v2_f344, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fae4 = load i32, i32* @r6, align 4
  store i32 %v0_fae4, i32* %r0.global-to-local, align 4
  %v0_fae8 = load i32, i32* @sl, align 4
  store i32 %v0_fae8, i32* %stack_var_-56, align 4
  %v6_faec = call i32 @function_11200(i32 %v0_fae4, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_f4ac, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb00 = load i32, i32* @r6, align 4
  store i32 %v0_fb00, i32* %r0.global-to-local, align 4
  %v5_fb04 = call i32 @function_11200(i32 %v0_fb00, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_fb0c = load i32, i32* @r5, align 4
  store i32 %v0_fb0c, i32* %r2.global-to-local, align 4
  %v2_fb10 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_fb10, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb18 = load i32, i32* @r6, align 4
  store i32 %v0_fb18, i32* %r0.global-to-local, align 4
  %v5_fb1c = call i32 @function_11200(i32 %v0_fb18, i32* nonnull %stack_var_-38, i32 %v0_fb0c, i32 16384)
  %v0_fb20 = load i32, i32* @fp, align 4
  %v1_fb20 = add i32 %v0_fb20, 12
  store i32 %v1_fb20, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb2c = load i32, i32* @r6, align 4
  store i32 %v0_fb2c, i32* %r0.global-to-local, align 4
  %v4_fb30 = inttoptr i32 %v1_fb20 to i32*
  %v5_fb30 = call i32 @function_11200(i32 %v0_fb2c, i32* %v4_fb30, i32 1, i32 16384)
  store i32 %v5_fb30, i32* %r0.global-to-local, align 4
  %v0_fb34 = load i32, i32* @fp, align 4
  %v1_fb34 = inttoptr i32 %v0_fb34 to i32*
  %v2_fb34 = load i32, i32* %v1_fb34, align 4
  store i32 %v2_fb34, i32* %r1.global-to-local, align 4
  %v1_fb38 = add i32 %v0_fb34, 12
  %v2_fb38 = inttoptr i32 %v1_fb38 to i8*
  %v3_fb38 = load i8, i8* %v2_fb38, align 1
  %v4_fb38 = zext i8 %v3_fb38 to i32
  store i32 %v4_fb38, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb40 = load i32, i32* @r6, align 4
  store i32 %v0_fb40, i32* %r0.global-to-local, align 4
  %v4_fb44 = inttoptr i32 %v2_fb34 to i32*
  %v5_fb44 = call i32 @function_11200(i32 %v0_fb40, i32* %v4_fb44, i32 %v4_fb38, i32 16384)
  %v0_fb48 = load i32, i32* @fp, align 4
  %v1_fb48 = add i32 %v0_fb48, 13
  store i32 %v1_fb48, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb54 = load i32, i32* @r6, align 4
  store i32 %v0_fb54, i32* %r0.global-to-local, align 4
  %v4_fb58 = inttoptr i32 %v1_fb48 to i32*
  %v5_fb58 = call i32 @function_11200(i32 %v0_fb54, i32* %v4_fb58, i32 1, i32 16384)
  %v0_fb5c = load i32, i32* @r6, align 4
  store i32 %v0_fb5c, i32* %r0.global-to-local, align 4
  %v0_fb60 = load i32, i32* @fp, align 4
  %v1_fb60 = add i32 %v0_fb60, 13
  %v2_fb60 = inttoptr i32 %v1_fb60 to i8*
  %v3_fb60 = load i8, i8* %v2_fb60, align 1
  %v4_fb60 = zext i8 %v3_fb60 to i32
  store i32 %v4_fb60, i32* %r2.global-to-local, align 4
  %v1_fb64 = add i32 %v0_fb60, 4
  %v2_fb64 = inttoptr i32 %v1_fb64 to i32*
  %v3_fb64 = load i32, i32* %v2_fb64, align 4
  store i32 %v3_fb64, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fb6c = inttoptr i32 %v3_fb64 to i32*
  %v5_fb6c = call i32 @function_11200(i32 %v0_fb5c, i32* %v4_fb6c, i32 %v4_fb60, i32 16384)
  %v0_fb70 = load i32, i32* @r6, align 4
  store i32 %v0_fb70, i32* %r0.global-to-local, align 4
  %v1_fb74 = call i32 @function_109bc(i32 %v0_fb70)
  store i32 %v1_fb74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb78

dec_label_pc_fb78:                                ; preds = %dec_label_pc_f734, %dec_label_pc_fad4
  %v0_fb78 = load i32, i32* @sl, align 4
  store i32 %v0_fb78, i32* %r0.global-to-local, align 4
  %v1_fb7c = call i32 @function_11b6c(i32 %v0_fb78)
  store i32 %v1_fb7c, i32* %r0.global-to-local, align 4
  ret i32 %v1_fb7c

; uselistorder directives
  uselistorder i32 %v4_fa84, { 2, 1, 0 }
  uselistorder i32 %v1_fa84, { 2, 1, 0, 3 }
  uselistorder i32 %v5_fa78, { 1, 0, 2 }
  uselistorder i32 %v2_fa60, { 1, 0, 2 }
  uselistorder i32 %v3_f9b0, { 1, 0 }
  uselistorder i32 %v5_f984, { 2, 0, 3, 4, 1 }
  uselistorder i1 %v1_f954, { 1, 0 }
  uselistorder i32 %v1_f944, { 2, 1, 0 }
  uselistorder i32 %v1_f940, { 1, 0 }
  uselistorder i32 %v0_f8fc, { 1, 0, 2 }
  uselistorder i32 %v1_f8e4, { 2, 1, 0 }
  uselistorder i32 %v0_f890, { 1, 2, 0 }
  uselistorder i1 %v7_f804, { 1, 0 }
  uselistorder i32 %v1_f800, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f7f8, { 1, 0 }
  uselistorder i8 %v3_f7f0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f800, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f7dc, { 1, 0 }
  uselistorder i1 %v7_f7d4, { 1, 0 }
  uselistorder i1 %v7_f7cc, { 1, 0 }
  uselistorder i32 %v0_f7a8, { 1, 2, 0 }
  uselistorder i32 %v2_f794, { 1, 0 }
  uselistorder i32 %v1_f794, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_f794, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_f744, { 1, 0 }
  uselistorder i32 %v3_f740, { 1, 0, 2, 3 }
  uselistorder i1 %v2_f72c, { 1, 0 }
  uselistorder i32 %.350, { 1, 0 }
  uselistorder i1 %v7_f714, { 1, 0 }
  uselistorder i32 %v0_f710, { 2, 1, 0, 3 }
  uselistorder i32 %v4_f6f0, { 1, 0, 2 }
  uselistorder i32 %v4_f6ec, { 1, 0, 2 }
  uselistorder i1 %v7_f6dc, { 1, 0 }
  uselistorder i32 %v0_f6dc, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_f5f8, { 1, 0 }
  uselistorder i32 %v1_f5f4, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f5ec, { 1, 0 }
  uselistorder i8 %v3_f5e4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f5f4, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f5d0, { 1, 0 }
  uselistorder i1 %v7_f5c8, { 1, 0 }
  uselistorder i1 %v7_f5c0, { 1, 0 }
  uselistorder i1 %v7_f544, { 1, 0 }
  uselistorder i32 %v1_f540, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f538, { 1, 0 }
  uselistorder i8 %v3_f530, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f540, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f51c, { 1, 0 }
  uselistorder i1 %v7_f514, { 1, 0 }
  uselistorder i1 %v7_f50c, { 1, 0 }
  uselistorder i1 %v7_f490, { 1, 0 }
  uselistorder i32 %v1_f48c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f484, { 1, 0 }
  uselistorder i8 %v3_f47c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f48c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f468, { 1, 0 }
  uselistorder i1 %v7_f460, { 1, 0 }
  uselistorder i1 %v7_f458, { 1, 0 }
  uselistorder i1 %v7_f328, { 1, 0 }
  uselistorder i32 %v1_f324, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f31c, { 1, 0 }
  uselistorder i8 %v3_f314, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f324, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f300, { 1, 0 }
  uselistorder i1 %v7_f2f8, { 1, 0 }
  uselistorder i1 %v7_f2f0, { 1, 0 }
  uselistorder i32 %v0_f298, { 2, 1, 0 }
  uselistorder i1 %v7_f290, { 1, 0 }
  uselistorder i1 %v8_f284, { 1, 0 }
  uselistorder i8 %v3_f27c, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_f28c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f268, { 1, 0 }
  uselistorder i1 %v7_f260, { 1, 0 }
  uselistorder i32 %v3_f24c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_f208, { 2, 1, 0 }
  uselistorder i1 %v7_f200, { 1, 0 }
  uselistorder i1 %v8_f1f4, { 1, 0 }
  uselistorder i8 %v3_f1ec, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f1fc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f1d8, { 1, 0 }
  uselistorder i1 %v7_f1d0, { 1, 0 }
  uselistorder i1 %v7_f1c8, { 1, 0 }
  uselistorder i32 %v3_f1b4, { 2, 3, 0, 1 }
  uselistorder i32 %v0_f1a4.pre, { 0, 2, 1 }
  uselistorder i32 %v1_f18c, { 1, 0 }
  uselistorder i32 %v1_f188, { 1, 0 }
  uselistorder i32 %v1_f180, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f17c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f17c, { 0, 2, 1 }
  uselistorder i1 %v7_f124, { 1, 0 }
  uselistorder i1 %v2_f110, { 1, 0, 2 }
  uselistorder i1 %v2_f0f8, { 1, 0, 2 }
  uselistorder i32 %v1_f118, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_f0ec, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_f114, { 1, 0 }
  uselistorder i32 %v2_f11c, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_f094, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 0, 11, 12, 20, 2, 1 }
  uselistorder i32 %v1_f070, { 1, 2, 3, 0 }
  uselistorder i32 %v3_f06c, { 1, 0 }
  uselistorder i32 %v5_f050, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_f03c, { 1, 0, 2 }
  uselistorder i32 %v3_f038, { 1, 0, 2 }
  uselistorder i32 %v0_f9c0, { 1, 0, 2 }
  uselistorder i32 %v5_f000, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_efe0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_ef98, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_ef78, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_ef6c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_eef8, { 2, 1, 0 }
  uselistorder i32 %v3_eef4, { 1, 0 }
  uselistorder i1 %v7_eedc, { 1, 0 }
  uselistorder i32 %v3_eed8, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_eecc, { 1, 0 }
  uselistorder i32 %v1_eeb0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ee9c, { 2, 1, 0 }
  uselistorder i32 %v3_ee98, { 1, 0 }
  uselistorder i32 %v0_ee9c, { 1, 0 }
  uselistorder i32 %v2_f4ac, { 0, 2, 3, 1 }
  uselistorder i32 %v2_f344, { 4, 5, 3, 2, 6, 7, 1, 0 }
  uselistorder i32 %v2_f884, { 1, 2, 0 }
  uselistorder i32 %v2_f0dc, { 0, 2, 1 }
  uselistorder i32 %v1_ee30, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ee30, { 0, 1, 3, 2 }
  uselistorder i32 %v1_ee0c, { 2, 1, 0 }
  uselistorder i32 %v1_ee08, { 1, 0 }
  uselistorder i32 %v0_edd8, { 0, 2, 1 }
  uselistorder i32 %v1_edd0, { 1, 0 }
  uselistorder i1 %v7_ed9c, { 0, 3, 1, 2 }
  uselistorder i1 %v2_ed9c, { 1, 2, 0 }
  uselistorder i32 %v2_ed94, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_ed8c, { 1, 0 }
  uselistorder i32 %v1_ed70, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ed64, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ed64, { 0, 2, 1 }
  uselistorder i32 %v1_ed54, { 1, 0 }
  uselistorder i32 %v3_edb8, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge223, { 1, 0, 2 }
  uselistorder i32 %v2_edc4, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_eca4, { 1, 0 }
  uselistorder i32 %v1_ec90, { 1, 0 }
  uselistorder i32 %v1_ec78, { 1, 2, 0 }
  uselistorder i32 %v0_ec84, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ec48, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_ec3c, { 2, 1, 0 }
  uselistorder i32 %v1_ec18, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_ebf0, { 1, 0 }
  uselistorder i32 %v4_eb90, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_eaf8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_ea18, { 1, 0 }
  uselistorder i32 %v1_ea14, { 2, 0, 1 }
  uselistorder i32 %v4_e9f0, { 1, 0 }
  uselistorder i1 %v2_e960, { 1, 0 }
  uselistorder i1 %v3_e944, { 1, 0, 2 }
  uselistorder i1 %v2_e930, { 1, 0 }
  uselistorder i1 %v2_e90c, { 1, 0 }
  uselistorder i32 %v1_e8bc, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e8a8, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e8a4, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_e894, { 1, 0 }
  uselistorder i32 %v0_e884, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e874, { 1, 0 }
  uselistorder i32 %v0_eb84, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i8* %stack_var_-1884.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_e618, { 1, 0 }
  uselistorder i32 %v0_e608, { 2, 0, 1, 3 }
  uselistorder i32 %v3_e5d8, { 1, 0 }
  uselistorder i32 %v4_e5c4, { 2, 0, 1 }
  uselistorder i32 %v0_e5ac, { 0, 2, 1 }
  uselistorder i32 %v0_e554, { 3, 2, 0, 1 }
  uselistorder i1 %v7_e4f8, { 1, 0 }
  uselistorder i32 %v3_e4f0, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_e4d8, { 0, 2, 1 }
  uselistorder i32 %v0_e4c0, { 2, 1, 0 }
  uselistorder i32 %v0_e49c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge229, { 1, 0 }
  uselistorder i32 %v0_e434, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 5, 3, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 6, 7, 3, 8, 4, 9, 5, 10, 2, 11, 1, 12, 13 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32 %tmp239, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 4, 2 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 62, 63, 44, 36, 64, 65, 66, 67, 68, 13, 14, 45, 46, 47, 48, 0, 1, 2, 3, 15, 145, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 57, 58, 59, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 69, 70, 71, 72, 73, 74, 60, 61, 75, 76, 78, 77, 79, 80, 81, 82, 83, 85, 87, 86, 84, 88, 89, 90, 91, 97, 92, 93, 94, 95, 98, 128, 129, 99, 130, 131, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 144, 118, 119, 132, 133, 134, 135, 137, 136, 139, 138, 96, 140, 141, 142, 143, 120, 121, 122, 123, 124, 125, 126, 127 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 31, 46, 36, 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 29, 30, 32, 34, 33, 40, 42, 41, 37, 38, 39, 47, 48, 49, 50, 51, 52, 53, 43, 44, 54, 55, 56, 57, 58, 60, 62, 61, 45, 59, 63, 64, 65, 66, 70, 67, 68, 69, 71, 74, 72, 75, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 91, 92, 93, 94, 95, 96, 97, 98, 99 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 44, 45, 39, 40, 36, 15, 16, 1, 2, 3, 81, 82, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 41, 42, 0, 46, 47, 48, 43, 56, 49, 50, 51, 53, 54, 52, 55, 57, 59, 58, 80, 60, 61, 62, 63, 64, 65, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 26, 25, 27, 29, 28, 31, 30, 32, 33, 126, 125, 35, 127, 108, 111, 110, 100, 99, 128, 130, 129, 34, 37, 36, 38, 112, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 115, 40, 39, 41, 43, 42, 44, 45, 47, 46, 48, 50, 49, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 63, 62, 65, 64, 66, 67, 68, 69, 71, 70, 73, 72, 75, 74, 76, 77, 78, 79, 81, 80, 83, 82, 85, 84, 86, 87, 88, 90, 89, 91, 93, 92, 95, 94, 96, 97, 98, 102, 101, 109, 103, 104, 105, 117, 116, 119, 118, 106, 107, 114, 113, 134, 131, 132, 121, 120, 123, 122, 133, 136, 135, 137, 138, 140, 139, 141, 147, 142, 143, 146, 144, 145, 148, 150, 151, 149, 154, 152, 153, 156, 155, 157, 159, 158, 196, 160, 161, 162, 124, 180, 181, 182, 184, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 163, 164, 165, 166, 168, 167, 170, 169, 171, 175, 174, 172, 173, 176, 177, 178, 179 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 13, 5, 6, 7, 8, 9, 14, 10, 11, 12 }
  uselistorder i32* %ip.global-to-local, { 22, 23, 2, 24, 3, 16, 0, 1, 20, 4, 5, 7, 6, 9, 8, 10, 11, 12, 13, 14, 19, 15, 21, 17, 18, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 47, 35, 36, 37, 38, 39, 48, 49, 50, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 55, 105, 104, 106, 107, 108, 10, 11, 72, 73, 74, 75, 76, 0, 1, 6, 7, 2, 3, 4, 5, 8, 91, 12, 13, 14, 196, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 56, 57, 61, 62, 58, 59, 60, 63, 93, 64, 69, 70, 65, 66, 67, 68, 71, 92, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 109, 110, 111, 112, 113, 114, 155, 97, 94, 95, 115, 117, 116, 118, 119, 121, 123, 122, 98, 120, 124, 125, 126, 127, 128, 129, 134, 130, 131, 132, 133, 99, 100, 101, 102, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 156, 158, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 195, 175, 176, 177, 178, 179, 194, 180, 181, 182, 193, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 151, 152, 153, 103, 154 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 57, 104, 103, 105, 106, 107, 12, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 90, 13, 14, 15, 195, 16, 17, 18, 19, 20, 21, 22, 27, 28, 23, 24, 25, 26, 29, 30, 31, 36, 37, 32, 33, 34, 35, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 58, 59, 63, 64, 60, 61, 62, 65, 92, 66, 71, 72, 67, 68, 69, 70, 73, 91, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 108, 109, 110, 111, 112, 113, 153, 96, 93, 94, 114, 116, 115, 117, 118, 120, 122, 121, 97, 119, 123, 124, 125, 126, 127, 132, 128, 129, 130, 131, 100, 101, 98, 133, 99, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 194, 172, 173, 174, 175, 176, 193, 177, 178, 179, 192, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 147, 148, 149, 150, 151, 102, 152 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5 }
  uselistorder i32* @fp, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 38, 39 }
  uselistorder i32 (i32)* @function_fbac, { 21, 20, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 23, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_fb80, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32 (i32)* @function_fc64, { 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_1317c.231 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_1317c.231, { 1, 0 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_11200, { 2, 3, 4, 5, 6, 7, 8, 19, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10200, { 2, 4, 3, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1b814.131 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1b815.132, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1b814.131 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10bdc, { 1, 2, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_e1a4, { 3, 2, 1, 0 }
  uselistorder i32 254, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_111cc, { 1, 0, 2 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_1122c, { 0, 6, 1, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 16384, { 31, 47, 32, 48, 33, 49, 34, 50, 35, 51, 36, 52, 13, 53, 12, 64, 0, 45, 1, 46, 2, 54, 3, 55, 4, 56, 5, 57, 6, 58, 7, 59, 8, 60, 9, 61, 29, 62, 30, 63, 27, 66, 28, 67, 26, 65, 37, 70, 10, 71, 11, 72, 14, 68, 38, 69, 40, 73, 16, 74, 41, 75, 42, 76, 43, 77, 15, 78, 39, 79, 17, 80, 18, 81, 19, 82, 83, 44, 84, 20, 85, 21, 86, 23, 87, 22, 88, 24, 89, 25, 90 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c6ec, { 8, 2, 7, 6, 5, 4, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_c690, { 4, 5, 10, 9, 8, 7, 6, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1b7f8.216, { 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_13158.212 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_130f0.186 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_13120.164 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_1309c.162 to i32), { 0, 9, 1, 10, 2, 11, 3, 12, 4, 13, 5, 14, 6, 7, 8, 15 }
  uselistorder i32 (i32, i32, i32)* @function_e278, { 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 32, 31, 30 }
  uselistorder i32 ptrtoint (i32* @global_var_13160.160 to i32), { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_13188.158 to i32), { 0, 20, 1, 21, 2, 22, 3, 4, 5, 23, 6, 24, 7, 25, 8, 26, 9, 27, 10, 28, 11, 29, 12, 30, 13, 31, 14, 32, 15, 33, 16, 34, 17, 35, 18, 36, 19, 37 }
  uselistorder i8* @global_var_1b809.154, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1b7fc.145 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8* @global_var_1b808.146, { 1, 0 }
  uselistorder i8** @global_var_1b7e8.141, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1b7e8.141 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 27, 1, 14, 0, 2, 28, 3, 4, 29, 21, 22, 5, 30, 6, 31, 15, 16, 32, 33, 7, 8, 9, 34, 35, 17, 10, 36, 23, 18, 37, 38, 39, 40, 11, 24, 25, 26, 41, 12, 42, 43, 19, 44, 45, 13, 46, 47, 20, 48 }
  uselistorder i32 ()* @function_dab8, { 66, 64, 18, 17, 63, 62, 61, 65, 60, 59, 58, 22, 21, 20, 19, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 5, 4, 3, 2, 1, 0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 }
  uselistorder i32 2048, { 7, 6, 2, 4, 5, 0, 1, 8, 9, 3, 10, 11 }
  uselistorder i32* @global_var_1b87c.139, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1b878.137, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1b818.125, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_10c8c, { 0, 1, 2, 3, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23 }
  uselistorder i32 (i32)* @function_db10, { 1, 0 }
  uselistorder i32* @global_var_1b860.47, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_103f4, { 2, 1, 0 }
  uselistorder i32* @global_var_1b880.123, { 0, 2, 1 }
  uselistorder i32 ()* @function_109e8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 17, 18, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 75, 76 }
  uselistorder i32* @sb, { 2, 3, 6, 0, 1, 4, 5, 10, 9, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 51, 52, 54, 55, 58, 61, 59, 60, 62, 63, 56, 57 }
  uselistorder label %dec_label_pc_fb78, { 1, 0 }
  uselistorder label %dec_label_pc_fad4, { 1, 0 }
  uselistorder label %dec_label_pc_fa08, { 1, 0 }
  uselistorder label %dec_label_pc_f974, { 2, 0, 1 }
  uselistorder label %bb346, { 1, 0 }
  uselistorder label %dec_label_pc_f934, { 1, 0 }
  uselistorder label %dec_label_pc_f800, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f7ec, { 1, 0 }
  uselistorder label %dec_label_pc_f794, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_f778, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f5f4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f5e0, { 1, 0 }
  uselistorder label %dec_label_pc_f540, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f52c, { 1, 0 }
  uselistorder label %dec_label_pc_f48c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f478, { 1, 0 }
  uselistorder label %dec_label_pc_f324, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f310, { 1, 0 }
  uselistorder label %dec_label_pc_f298, { 1, 0 }
  uselistorder label %dec_label_pc_f28c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f278, { 1, 0 }
  uselistorder label %dec_label_pc_f1fc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f1e8, { 1, 0 }
  uselistorder label %dec_label_pc_f1a4, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_f194, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb320, { 2, 1, 0 }
  uselistorder label %bb317, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f0f4, { 1, 0 }
  uselistorder label %dec_label_pc_f0f4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f07c, { 1, 0 }
  uselistorder label %bb314, { 1, 0 }
  uselistorder label %dec_label_pc_f02c, { 1, 0 }
  uselistorder label %dec_label_pc_f01c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f014thread-pre-split, { 4, 5, 3, 7, 2, 6, 1, 8, 0, 9 }
  uselistorder label %dec_label_pc_f014thread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f01c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_f010.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_efd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_eeac, { 6, 7, 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_ee88, { 1, 0 }
  uselistorder label %bb311, { 1, 0 }
  uselistorder label %bb309, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_ecf0.dec_label_pc_ecf0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ecd4.dec_label_pc_ecd4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_eccc, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_ecc4, { 1, 0 }
  uselistorder label %dec_label_pc_ec78, { 1, 0 }
  uselistorder label %dec_label_pc_eb18, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_eb0c, { 1, 0 }
  uselistorder label %.thread48, { 2, 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %dec_label_pc_e970, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e94c, { 1, 0 }
  uselistorder label %dec_label_pc_e940, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e91c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e8f8, { 1, 0 }
  uselistorder label %bb279, { 1, 0 }
  uselistorder label %dec_label_pc_e8a4, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_e554, { 1, 0 }
}

define i32 @function_fb80(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_fb80:
  store i32 ptrtoint (i32* @global_var_1b888.239 to i32), i32* @ip, align 4
  %v3_fb84 = mul i32 %arg1, 8
  %v2_fb88 = add i32 %v3_fb84, ptrtoint (i32* @global_var_1b888.239 to i32)
  %v2_fb8c = icmp eq i32* %arg2, null
  br i1 %v2_fb8c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_fb80
  %v3_fb9811 = inttoptr i32 %v2_fb88 to i32*
  %v4_fb9812 = load i32, i32* %v3_fb9811, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_fb80
  %v2_fb90 = add i32 %v3_fb84, add (i32 ptrtoint (i32* @global_var_1b888.239 to i32), i32 5)
  %v3_fb90 = inttoptr i32 %v2_fb90 to i8*
  %v4_fb90 = load i8, i8* %v3_fb90, align 1
  %v5_fb90 = zext i8 %v4_fb90 to i32
  store i32 %v5_fb90, i32* @r2, align 4
  %v2_fb94 = add i32 %v3_fb84, add (i32 ptrtoint (i32* @global_var_1b888.239 to i32), i32 4)
  %v3_fb94 = inttoptr i32 %v2_fb94 to i8*
  %v4_fb94 = load i8, i8* %v3_fb94, align 4
  %v5_fb94 = zext i8 %v4_fb94 to i32
  %v3_fb98 = inttoptr i32 %v2_fb88 to i32*
  %v4_fb98 = load i32, i32* %v3_fb98, align 4
  %v5_fb9c = mul nuw nsw i32 %v5_fb90, 256
  %v6_fb9c = or i32 %v5_fb94, %v5_fb9c
  store i32 %v6_fb9c, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_fb98714 = phi i32 [ %v4_fb9812, %.thread ], [ %v4_fb98, %bb ]
  ret i32 %v4_fb98714

; uselistorder directives
  uselistorder i32 %v2_fb88, { 1, 0 }
  uselistorder i32 %v3_fb84, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_fbac(i32 %arg1) local_unnamed_addr {
dec_label_pc_fbac:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_fbac = mul i32 %arg1, 8
  %v3_fbb0 = load i32, i32* @r4, align 4
  store i32 %v3_fbb0, i32* %stack_var_-20, align 4
  %v3_fbc0 = and i32 %v3_fbac, 2040
  %v2_fbc4 = add i32 %v3_fbc0, ptrtoint (i32* @global_var_1b888.239 to i32)
  store i32 %v2_fbc4, i32* @lr, align 4
  %v1_fbcc = add i32 %v3_fbc0, add (i32 ptrtoint (i32* @global_var_1b888.239 to i32), i32 4)
  store i32 %v1_fbcc, i32* %r7.global-to-local, align 4
  %v2_fbd0 = load i32, i32* @global_var_1b658.242, align 4
  store i32 %v2_fbd0, i32* @r2, align 4
  %v2_fbd4 = inttoptr i32 %v1_fbcc to i8*
  %v3_fbd4 = load i8, i8* %v2_fbd4, align 4
  %v4_fbd4 = zext i8 %v3_fbd4 to i32
  store i32 %v4_fbd4, i32* @r1, align 4
  %v1_fbd8 = add i32 %v3_fbc0, add (i32 ptrtoint (i32* @global_var_1b888.239 to i32), i32 5)
  %v2_fbd8 = inttoptr i32 %v1_fbd8 to i8*
  %v3_fbd8 = load i8, i8* %v2_fbd8, align 1
  %v4_fbd8 = zext i8 %v3_fbd8 to i32
  %v3_fbdc = udiv i32 %v2_fbd0, 256
  %v4_fbe0 = mul nuw nsw i32 %v4_fbd8, 256
  %v5_fbe0 = or i32 %v4_fbe0, %v4_fbd4
  %v7_fbe0 = icmp eq i32 %v5_fbe0, 0
  store i1 %v7_fbe0, i1* @cpsr_z, align 1
  %v3_fbe4 = udiv i32 %v2_fbd0, 65536
  %v1_fbe8 = urem i32 %v3_fbdc, 256
  store i32 %v1_fbe8, i32* %r6.global-to-local, align 4
  %v1_fbec = urem i32 %v3_fbe4, 256
  store i32 %v1_fbec, i32* %r5.global-to-local, align 4
  %v1_fbf0 = and i32 %v2_fbd0, 8388608
  %v2_fbf0 = icmp ne i32 %v1_fbf0, 0
  store i1 %v2_fbf0, i1* @cpsr_c, align 1
  %v3_fbf0 = udiv i32 %v2_fbd0, 16777216
  store i32 %v3_fbf0, i32* %r4.global-to-local, align 4
  %v1_fbf4 = urem i32 %v2_fbd0, 256
  br i1 %v7_fbe0, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_fbac
  store i32 %v3_fbb0, i32* @r4, align 4
  ret i32 %v1_fbf4

bb8:                                              ; preds = %dec_label_pc_fbac
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_fc00

dec_label_pc_fc00:                                ; preds = %dec_label_pc_fc00, %bb8
  %v2_fc0c = phi i32 [ %v1_fc48, %dec_label_pc_fc00 ], [ 0, %bb8 ]
  %v0_fc00 = phi i32 [ %v0_fc40, %dec_label_pc_fc00 ], [ %v2_fbc4, %bb8 ]
  %v1_fc00 = inttoptr i32 %v0_fc00 to i32*
  %v2_fc00 = load i32, i32* %v1_fc00, align 4
  %v2_fc04 = add i32 %v2_fc00, %v2_fc0c
  %v3_fc04 = inttoptr i32 %v2_fc04 to i8*
  %v4_fc04 = load i8, i8* %v3_fc04, align 1
  %v6_fc04 = zext i8 %v4_fc04 to i32
  %v2_fc08 = xor i32 %v6_fc04, %v1_fbf4
  %v1_fc0c = trunc i32 %v2_fc08 to i8
  store i8 %v1_fc0c, i8* %v3_fc04, align 1
  %v0_fc10 = load i32, i32* @lr, align 4
  %v1_fc10 = inttoptr i32 %v0_fc10 to i32*
  %v2_fc10 = load i32, i32* %v1_fc10, align 4
  %v0_fc14 = load i32, i32* @ip, align 4
  %v2_fc14 = add i32 %v0_fc14, %v2_fc10
  %v3_fc14 = inttoptr i32 %v2_fc14 to i8*
  %v4_fc14 = load i8, i8* %v3_fc14, align 1
  %v6_fc14 = zext i8 %v4_fc14 to i32
  %v0_fc18 = load i32, i32* %r6.global-to-local, align 4
  %v2_fc18 = xor i32 %v0_fc18, %v6_fc14
  %v1_fc1c = trunc i32 %v2_fc18 to i8
  store i8 %v1_fc1c, i8* %v3_fc14, align 1
  %v0_fc20 = load i32, i32* @lr, align 4
  %v1_fc20 = inttoptr i32 %v0_fc20 to i32*
  %v2_fc20 = load i32, i32* %v1_fc20, align 4
  %v0_fc24 = load i32, i32* @ip, align 4
  %v2_fc24 = add i32 %v0_fc24, %v2_fc20
  %v3_fc24 = inttoptr i32 %v2_fc24 to i8*
  %v4_fc24 = load i8, i8* %v3_fc24, align 1
  %v6_fc24 = zext i8 %v4_fc24 to i32
  %v0_fc28 = load i32, i32* %r5.global-to-local, align 4
  %v2_fc28 = xor i32 %v0_fc28, %v6_fc24
  %v1_fc2c = trunc i32 %v2_fc28 to i8
  store i8 %v1_fc2c, i8* %v3_fc24, align 1
  %v0_fc30 = load i32, i32* @lr, align 4
  %v1_fc30 = inttoptr i32 %v0_fc30 to i32*
  %v2_fc30 = load i32, i32* %v1_fc30, align 4
  store i32 %v2_fc30, i32* @r1, align 4
  %v0_fc34 = load i32, i32* @ip, align 4
  %v2_fc34 = add i32 %v0_fc34, %v2_fc30
  %v3_fc34 = inttoptr i32 %v2_fc34 to i8*
  %v4_fc34 = load i8, i8* %v3_fc34, align 1
  %v6_fc34 = zext i8 %v4_fc34 to i32
  %v0_fc38 = load i32, i32* %r4.global-to-local, align 4
  %v2_fc38 = xor i32 %v0_fc38, %v6_fc34
  %v1_fc3c = trunc i32 %v2_fc38 to i8
  store i8 %v1_fc3c, i8* %v3_fc34, align 1
  %v0_fc40 = load i32, i32* @lr, align 4
  %v1_fc40 = add i32 %v0_fc40, 4
  %v2_fc40 = inttoptr i32 %v1_fc40 to i8*
  %v3_fc40 = load i8, i8* %v2_fc40, align 1
  %v4_fc40 = zext i8 %v3_fc40 to i32
  %v0_fc44 = load i32, i32* %r7.global-to-local, align 4
  %v1_fc44 = add i32 %v0_fc44, 1
  %v2_fc44 = inttoptr i32 %v1_fc44 to i8*
  %v3_fc44 = load i8, i8* %v2_fc44, align 1
  %v4_fc44 = zext i8 %v3_fc44 to i32
  %v0_fc48 = load i32, i32* @ip, align 4
  %v1_fc48 = add i32 %v0_fc48, 1
  store i32 %v1_fc48, i32* @ip, align 4
  %v4_fc4c = mul nuw nsw i32 %v4_fc44, 256
  %v5_fc4c = or i32 %v4_fc4c, %v4_fc40
  store i32 %v5_fc4c, i32* @r2, align 4
  %v3_fc50 = icmp uge i32 %v5_fc4c, %v1_fc48
  store i1 %v3_fc50, i1* @cpsr_c, align 1
  %v9_fc50 = icmp eq i32 %v5_fc4c, %v1_fc48
  store i1 %v9_fc50, i1* @cpsr_z, align 1
  %v8_fc54 = icmp sgt i32 %v5_fc4c, %v1_fc48
  br i1 %v8_fc54, label %dec_label_pc_fc00, label %dec_label_pc_fc58

dec_label_pc_fc58:                                ; preds = %dec_label_pc_fc00
  %v2_fc58 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_fc58, i32* @r4, align 4
  ret i32 %v1_fbf4

; uselistorder directives
  uselistorder i32 %v1_fc48, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_fc40, { 1, 0 }
  uselistorder i32 %v1_fbf4, { 0, 2, 1 }
  uselistorder i32 %v2_fbd0, { 3, 0, 4, 1, 2, 5 }
  uselistorder i1* @cpsr_c, { 2, 3, 0, 1 }
  uselistorder i32 8388608, { 1, 0, 2 }
}

define i32 @function_fc64(i32 %arg1) local_unnamed_addr {
dec_label_pc_fc64:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_fc64 = mul i32 %arg1, 8
  %v3_fc68 = load i32, i32* @r4, align 4
  store i32 %v3_fc68, i32* %stack_var_-20, align 4
  %v3_fc78 = and i32 %v3_fc64, 2040
  %v2_fc7c = add i32 %v3_fc78, ptrtoint (i32* @global_var_1b888.239 to i32)
  store i32 %v2_fc7c, i32* @lr, align 4
  %v1_fc84 = add i32 %v3_fc78, add (i32 ptrtoint (i32* @global_var_1b888.239 to i32), i32 4)
  store i32 %v1_fc84, i32* %r7.global-to-local, align 4
  %v2_fc88 = load i32, i32* @global_var_1b658.242, align 4
  store i32 %v2_fc88, i32* @r2, align 4
  %v2_fc8c = inttoptr i32 %v1_fc84 to i8*
  %v3_fc8c = load i8, i8* %v2_fc8c, align 4
  %v4_fc8c = zext i8 %v3_fc8c to i32
  %v1_fc90 = add i32 %v3_fc78, add (i32 ptrtoint (i32* @global_var_1b888.239 to i32), i32 5)
  %v2_fc90 = inttoptr i32 %v1_fc90 to i8*
  %v3_fc90 = load i8, i8* %v2_fc90, align 1
  %v4_fc90 = zext i8 %v3_fc90 to i32
  %v3_fc94 = udiv i32 %v2_fc88, 256
  %v4_fc98 = mul nuw nsw i32 %v4_fc90, 256
  %v5_fc98 = or i32 %v4_fc98, %v4_fc8c
  %v7_fc98 = icmp eq i32 %v5_fc98, 0
  %v3_fc9c = udiv i32 %v2_fc88, 65536
  %v1_fca0 = urem i32 %v3_fc94, 256
  store i32 %v1_fca0, i32* %r6.global-to-local, align 4
  %v1_fca4 = urem i32 %v3_fc9c, 256
  store i32 %v1_fca4, i32* %r5.global-to-local, align 4
  %v3_fca8 = udiv i32 %v2_fc88, 16777216
  store i32 %v3_fca8, i32* %r4.global-to-local, align 4
  %v1_fcac = urem i32 %v2_fc88, 256
  br i1 %v7_fc98, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_fc64
  store i32 %v3_fc68, i32* @r4, align 4
  ret i32 %v1_fcac

bb8:                                              ; preds = %dec_label_pc_fc64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fcb8

dec_label_pc_fcb8:                                ; preds = %dec_label_pc_fcb8, %bb8
  %v2_fcc4 = phi i32 [ %v1_fd00, %dec_label_pc_fcb8 ], [ 0, %bb8 ]
  %v0_fcb8 = phi i32 [ %v0_fcf8, %dec_label_pc_fcb8 ], [ %v2_fc7c, %bb8 ]
  %v1_fcb8 = inttoptr i32 %v0_fcb8 to i32*
  %v2_fcb8 = load i32, i32* %v1_fcb8, align 4
  %v2_fcbc = add i32 %v2_fcb8, %v2_fcc4
  %v3_fcbc = inttoptr i32 %v2_fcbc to i8*
  %v4_fcbc = load i8, i8* %v3_fcbc, align 1
  %v6_fcbc = zext i8 %v4_fcbc to i32
  %v2_fcc0 = xor i32 %v6_fcbc, %v1_fcac
  %v1_fcc4 = trunc i32 %v2_fcc0 to i8
  store i8 %v1_fcc4, i8* %v3_fcbc, align 1
  %v0_fcc8 = load i32, i32* @lr, align 4
  %v1_fcc8 = inttoptr i32 %v0_fcc8 to i32*
  %v2_fcc8 = load i32, i32* %v1_fcc8, align 4
  %v0_fccc = load i32, i32* %ip.global-to-local, align 4
  %v2_fccc = add i32 %v0_fccc, %v2_fcc8
  %v3_fccc = inttoptr i32 %v2_fccc to i8*
  %v4_fccc = load i8, i8* %v3_fccc, align 1
  %v6_fccc = zext i8 %v4_fccc to i32
  %v0_fcd0 = load i32, i32* %r6.global-to-local, align 4
  %v2_fcd0 = xor i32 %v0_fcd0, %v6_fccc
  %v1_fcd4 = trunc i32 %v2_fcd0 to i8
  store i8 %v1_fcd4, i8* %v3_fccc, align 1
  %v0_fcd8 = load i32, i32* @lr, align 4
  %v1_fcd8 = inttoptr i32 %v0_fcd8 to i32*
  %v2_fcd8 = load i32, i32* %v1_fcd8, align 4
  %v0_fcdc = load i32, i32* %ip.global-to-local, align 4
  %v2_fcdc = add i32 %v0_fcdc, %v2_fcd8
  %v3_fcdc = inttoptr i32 %v2_fcdc to i8*
  %v4_fcdc = load i8, i8* %v3_fcdc, align 1
  %v6_fcdc = zext i8 %v4_fcdc to i32
  %v0_fce0 = load i32, i32* %r5.global-to-local, align 4
  %v2_fce0 = xor i32 %v0_fce0, %v6_fcdc
  %v1_fce4 = trunc i32 %v2_fce0 to i8
  store i8 %v1_fce4, i8* %v3_fcdc, align 1
  %v0_fce8 = load i32, i32* @lr, align 4
  %v1_fce8 = inttoptr i32 %v0_fce8 to i32*
  %v2_fce8 = load i32, i32* %v1_fce8, align 4
  %v0_fcec = load i32, i32* %ip.global-to-local, align 4
  %v2_fcec = add i32 %v0_fcec, %v2_fce8
  %v3_fcec = inttoptr i32 %v2_fcec to i8*
  %v4_fcec = load i8, i8* %v3_fcec, align 1
  %v6_fcec = zext i8 %v4_fcec to i32
  %v0_fcf0 = load i32, i32* %r4.global-to-local, align 4
  %v2_fcf0 = xor i32 %v0_fcf0, %v6_fcec
  %v1_fcf4 = trunc i32 %v2_fcf0 to i8
  store i8 %v1_fcf4, i8* %v3_fcec, align 1
  %v0_fcf8 = load i32, i32* @lr, align 4
  %v1_fcf8 = add i32 %v0_fcf8, 4
  %v2_fcf8 = inttoptr i32 %v1_fcf8 to i8*
  %v3_fcf8 = load i8, i8* %v2_fcf8, align 1
  %v4_fcf8 = zext i8 %v3_fcf8 to i32
  %v0_fcfc = load i32, i32* %r7.global-to-local, align 4
  %v1_fcfc = add i32 %v0_fcfc, 1
  %v2_fcfc = inttoptr i32 %v1_fcfc to i8*
  %v3_fcfc = load i8, i8* %v2_fcfc, align 1
  %v4_fcfc = zext i8 %v3_fcfc to i32
  %v0_fd00 = load i32, i32* %ip.global-to-local, align 4
  %v1_fd00 = add i32 %v0_fd00, 1
  store i32 %v1_fd00, i32* %ip.global-to-local, align 4
  %v4_fd04 = mul nuw nsw i32 %v4_fcfc, 256
  %v5_fd04 = or i32 %v4_fd04, %v4_fcf8
  store i32 %v5_fd04, i32* @r2, align 4
  %v8_fd0c = icmp sgt i32 %v5_fd04, %v1_fd00
  br i1 %v8_fd0c, label %dec_label_pc_fcb8, label %dec_label_pc_fd10

dec_label_pc_fd10:                                ; preds = %dec_label_pc_fcb8
  %v2_fd10 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_fd10, i32* @r4, align 4
  ret i32 %v1_fcac

; uselistorder directives
  uselistorder i32 %v1_fd00, { 1, 2, 0 }
  uselistorder i32 %v0_fcf8, { 1, 0 }
  uselistorder i32 %v1_fcac, { 1, 2, 0 }
  uselistorder i32 %v2_fc88, { 3, 0, 1, 2, 4 }
}

define i32 @function_fd1c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fd1c:
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_fd1c = load i32, i32* @r4, align 4
  store i32 %v3_fd1c, i32* %stack_var_-24, align 4
  %v6_fd1c = load i32, i32* @r5, align 4
  %v9_fd1c = load i32, i32* @r6, align 4
  %v12_fd1c = load i32, i32* @r7, align 4
  %v1_fd24 = call i32 @function_11428(i32 2)
  store i32 ptrtoint (i32* @global_var_1b888.239 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 2, i32* @r5, align 4
  store i32 %v1_fd24, i32* @r7, align 4
  %v4_fd40 = call i32 @function_101b8(i32 %v1_fd24, i32 ptrtoint ([3 x i8]* @global_var_1319c.247 to i32), i32 2)
  %v0_fd48 = load i32, i32* @r7, align 4
  store i32 %v0_fd48, i32* @global_var_1b898.248, align 4
  %v0_fd4c = load i32, i32* @r5, align 4
  %v1_fd4c = trunc i32 %v0_fd4c to i8
  store i8 %v1_fd4c, i8* bitcast (i32* @global_var_1b89c.249 to i8*), align 4
  %v0_fd50 = load i32, i32* @r6, align 4
  %v1_fd50 = trunc i32 %v0_fd50 to i8
  store i8 %v1_fd50, i8* bitcast (i32* @global_var_1b89d.250 to i8*), align 4
  %v1_fd54 = call i32 @function_11428(i32 18)
  store i32 %v1_fd54, i32* @r7, align 4
  %v4_fd64 = call i32 @function_101b8(i32 %v1_fd54, i32 ptrtoint ([20 x i8]* @global_var_131a0.252 to i32), i32 18)
  %v0_fd6c = load i32, i32* @r5, align 4
  store i8 18, i8* bitcast (i32* @global_var_1b944.253 to i8*), align 4
  %v0_fd74 = load i32, i32* @r7, align 4
  store i32 %v0_fd74, i32* @global_var_1b940.254, align 4
  %v0_fd78 = load i32, i32* @r6, align 4
  %v1_fd78 = trunc i32 %v0_fd78 to i8
  store i8 %v1_fd78, i8* bitcast (i32* @global_var_1b945.255 to i8*), align 4
  %v1_fd7c = call i32 @function_11428(i32 %v0_fd6c)
  %v0_fd80 = load i32, i32* @r5, align 4
  store i32 %v1_fd7c, i32* @r7, align 4
  %v3_fd8c = call i32 @function_101b8(i32 %v1_fd7c, i32 ptrtoint (i32* @global_var_131b4.257 to i32), i32 %v0_fd80)
  %v0_fd94 = load i32, i32* @r7, align 4
  store i32 %v0_fd94, i32* @global_var_1b948.258, align 4
  %v0_fd98 = load i32, i32* @r5, align 4
  %v1_fd98 = trunc i32 %v0_fd98 to i8
  store i8 %v1_fd98, i8* bitcast (i32* @global_var_1b94c.259 to i8*), align 4
  %v0_fd9c = load i32, i32* @r6, align 4
  %v1_fd9c = trunc i32 %v0_fd9c to i8
  store i8 %v1_fd9c, i8* bitcast (i32* @global_var_1b94d.260 to i8*), align 4
  %v1_fda0 = call i32 @function_11428(i32 58)
  store i32 %v1_fda0, i32* @r5, align 4
  %v4_fdb0 = call i32 @function_101b8(i32 %v1_fda0, i32 ptrtoint ([59 x i8]* @global_var_131b8.262 to i32), i32 58)
  store i8 58, i8* bitcast (i32* @global_var_1b894.263 to i8*), align 4
  %v0_fdc0 = load i32, i32* @r5, align 4
  store i32 %v0_fdc0, i32* @global_var_1b890.264, align 4
  %v0_fdc4 = load i32, i32* @r6, align 4
  %v1_fdc4 = trunc i32 %v0_fdc4 to i8
  store i8 %v1_fdc4, i8* bitcast (i32* @global_var_1b895.265 to i8*), align 4
  %v1_fdc8 = call i32 @function_11428(i32 6)
  store i32 %v1_fdc8, i32* @r5, align 4
  store i32 6, i32* %r8.global-to-local, align 4
  %v4_fddc = call i32 @function_101b8(i32 %v1_fdc8, i32 ptrtoint ([7 x i8]* @global_var_131f4.267 to i32), i32 6)
  %v0_fde4 = load i32, i32* @r5, align 4
  store i32 %v0_fde4, i32* @global_var_1b908.268, align 4
  store i8 6, i8* bitcast (i32* @global_var_1b90c.269 to i8*), align 4
  %v0_fdec = load i32, i32* @r6, align 4
  %v1_fdec = trunc i32 %v0_fdec to i8
  store i8 %v1_fdec, i8* bitcast (i32* @global_var_1b90d.270 to i8*), align 4
  %v1_fdf0 = call i32 @function_11428(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_fdf0, i32* @r5, align 4
  %v4_fe04 = call i32 @function_101b8(i32 %v1_fdf0, i32 ptrtoint ([8 x i8]* @global_var_131fc.272 to i32), i32 7)
  %v0_fe08 = load i32, i32* @r7, align 4
  %v0_fe0c = load i32, i32* @r5, align 4
  store i32 %v0_fe0c, i32* @global_var_1b910.273, align 4
  %v1_fe10 = trunc i32 %v0_fe08 to i8
  store i8 %v1_fe10, i8* bitcast (i32* @global_var_1b914.274 to i8*), align 4
  %v0_fe14 = load i32, i32* @r6, align 4
  %v1_fe14 = trunc i32 %v0_fe14 to i8
  store i8 %v1_fe14, i8* bitcast (i32* @global_var_1b915.275 to i8*), align 4
  %v1_fe18 = call i32 @function_11428(i32 %v0_fe08)
  %v0_fe1c = load i32, i32* @r7, align 4
  store i32 %v1_fe18, i32* @r5, align 4
  %v4_fe28 = call i32 @function_101b8(i32 %v1_fe18, i32 ptrtoint ([8 x i8]* @global_var_13204.277 to i32), i32 %v0_fe1c)
  %v0_fe30 = load i32, i32* @r5, align 4
  store i32 %v0_fe30, i32* @global_var_1b918.278, align 4
  %v0_fe34 = load i32, i32* @r7, align 4
  %v1_fe34 = trunc i32 %v0_fe34 to i8
  store i8 %v1_fe34, i8* bitcast (i32* @global_var_1b91c.279 to i8*), align 4
  %v0_fe38 = load i32, i32* @r6, align 4
  %v1_fe38 = trunc i32 %v0_fe38 to i8
  store i8 %v1_fe38, i8* bitcast (i32* @global_var_1b91d.280 to i8*), align 4
  %v1_fe3c = call i32 @function_11428(i32 3)
  store i32 %v1_fe3c, i32* @r5, align 4
  %v4_fe4c = call i32 @function_101b8(i32 %v1_fe3c, i32 ptrtoint ([4 x i8]* @global_var_1320c.282 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1b92c.283 to i8*), align 4
  %v0_fe5c = load i32, i32* @r5, align 4
  store i32 %v0_fe5c, i32* @global_var_1b928.284, align 4
  %v0_fe60 = load i32, i32* @r6, align 4
  %v1_fe60 = trunc i32 %v0_fe60 to i8
  store i8 %v1_fe60, i8* bitcast (i32* @global_var_1b92d.285 to i8*), align 4
  %v1_fe64 = call i32 @function_11428(i32 20)
  store i32 %v1_fe64, i32* @r5, align 4
  %v3_fe74 = call i32 @function_101b8(i32 %v1_fe64, i32 ptrtoint (i32* @global_var_13210.287 to i32), i32 20)
  store i8 20, i8* bitcast (i32* @global_var_1b924.288 to i8*), align 4
  %v0_fe84 = load i32, i32* @r5, align 4
  store i32 %v0_fe84, i32* @global_var_1b920.289, align 4
  %v0_fe88 = load i32, i32* @r6, align 4
  %v1_fe88 = trunc i32 %v0_fe88 to i8
  store i8 %v1_fe88, i8* bitcast (i32* @global_var_1b925.290 to i8*), align 4
  %v1_fe8c = call i32 @function_11428(i32 25)
  store i32 %v1_fe8c, i32* @r5, align 4
  %v3_fe9c = call i32 @function_101b8(i32 %v1_fe8c, i32 ptrtoint (i32* @global_var_13228.292 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1b934.293 to i8*), align 4
  %v0_feac = load i32, i32* @r5, align 4
  store i32 %v0_feac, i32* @global_var_1b930.294, align 4
  %v0_feb0 = load i32, i32* @r6, align 4
  %v1_feb0 = trunc i32 %v0_feb0 to i8
  store i8 %v1_feb0, i8* bitcast (i32* @global_var_1b935.295 to i8*), align 4
  %v1_feb4 = call i32 @function_11428(i32 9)
  store i32 %v1_feb4, i32* @r5, align 4
  %v4_fec4 = call i32 @function_101b8(i32 %v1_feb4, i32 ptrtoint ([10 x i8]* @global_var_13244.297 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1b93c.298 to i8*), align 4
  %v0_fed4 = load i32, i32* @r5, align 4
  store i32 %v0_fed4, i32* @global_var_1b938.299, align 4
  %v0_fed8 = load i32, i32* @r6, align 4
  %v1_fed8 = trunc i32 %v0_fed8 to i8
  store i8 %v1_fed8, i8* bitcast (i32* @global_var_1b93d.300 to i8*), align 4
  %v1_fedc = call i32 @function_11428(i32 16)
  store i32 %v1_fedc, i32* @r5, align 4
  %v4_feec = call i32 @function_101b8(i32 %v1_fedc, i32 ptrtoint ([17 x i8]* @global_var_13250.302 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1b954.303 to i8*), align 4
  %v0_fefc = load i32, i32* @r5, align 4
  store i32 %v0_fefc, i32* @global_var_1b950.304, align 4
  %v0_ff00 = load i32, i32* @r6, align 4
  %v1_ff00 = trunc i32 %v0_ff00 to i8
  store i8 %v1_ff00, i8* bitcast (i32* @global_var_1b955.305 to i8*), align 4
  %v1_ff04 = call i32 @function_11428(i32 22)
  store i32 %v1_ff04, i32* @r5, align 4
  %v4_ff14 = call i32 @function_101b8(i32 %v1_ff04, i32 ptrtoint ([23 x i8]* @global_var_13264.307 to i32), i32 22)
  %v0_ff1c = load i32, i32* @r7, align 4
  store i8 22, i8* bitcast (i32* @global_var_1b95c.308 to i8*), align 4
  %v0_ff24 = load i32, i32* @r5, align 4
  store i32 %v0_ff24, i32* @global_var_1b958.309, align 4
  %v0_ff28 = load i32, i32* @r6, align 4
  %v1_ff28 = trunc i32 %v0_ff28 to i8
  store i8 %v1_ff28, i8* bitcast (i32* @global_var_1b95d.310 to i8*), align 4
  %v1_ff2c = call i32 @function_11428(i32 %v0_ff1c)
  %v0_ff30 = load i32, i32* @r7, align 4
  store i32 %v1_ff2c, i32* @r5, align 4
  %v4_ff3c = call i32 @function_101b8(i32 %v1_ff2c, i32 ptrtoint ([8 x i8]* @global_var_1327c.312 to i32), i32 %v0_ff30)
  %v0_ff44 = load i32, i32* @r5, align 4
  store i32 %v0_ff44, i32* @global_var_1b8a0.313, align 4
  %v0_ff48 = load i32, i32* @r7, align 4
  %v1_ff48 = trunc i32 %v0_ff48 to i8
  store i8 %v1_ff48, i8* bitcast (i32* @global_var_1b8a4.314 to i8*), align 4
  %v0_ff4c = load i32, i32* @r6, align 4
  %v1_ff4c = trunc i32 %v0_ff4c to i8
  store i8 %v1_ff4c, i8* bitcast (i32* @global_var_1b8a5.315 to i8*), align 4
  %v1_ff50 = call i32 @function_11428(i32 5)
  store i32 %v1_ff50, i32* @r5, align 4
  %v4_ff60 = call i32 @function_101b8(i32 %v1_ff50, i32 ptrtoint ([6 x i8]* @global_var_13284.317 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1b8ac.318 to i8*), align 4
  %v0_ff70 = load i32, i32* @r5, align 4
  store i32 %v0_ff70, i32* @global_var_1b8a8.319, align 4
  %v0_ff74 = load i32, i32* @r6, align 4
  %v1_ff74 = trunc i32 %v0_ff74 to i8
  store i8 %v1_ff74, i8* bitcast (i32* @global_var_1b8ad.320 to i8*), align 4
  %v1_ff78 = call i32 @function_11428(i32 4)
  store i32 %v1_ff78, i32* @r5, align 4
  %v4_ff88 = call i32 @function_101b8(i32 %v1_ff78, i32 ptrtoint ([5 x i8]* @global_var_1328c.322 to i32), i32 4)
  %v0_ff90 = load i32, i32* %r8.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1b8bc.323 to i8*), align 4
  %v0_ff98 = load i32, i32* @r5, align 4
  store i32 %v0_ff98, i32* @global_var_1b8b8.324, align 4
  %v0_ff9c = load i32, i32* @r6, align 4
  %v1_ff9c = trunc i32 %v0_ff9c to i8
  store i8 %v1_ff9c, i8* bitcast (i32* @global_var_1b8bd.325 to i8*), align 4
  %v1_ffa0 = call i32 @function_11428(i32 %v0_ff90)
  %v0_ffa8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_ffa0, i32* @r5, align 4
  %v4_ffb0 = call i32 @function_101b8(i32 %v1_ffa0, i32 ptrtoint ([7 x i8]* @global_var_13294.327 to i32), i32 %v0_ffa8)
  %v0_ffb8 = load i32, i32* @r5, align 4
  store i32 %v0_ffb8, i32* @global_var_1b8c0.328, align 4
  %v1_ffbc = trunc i32 %v0_ffa8 to i8
  store i8 %v1_ffbc, i8* bitcast (i32* @global_var_1b8c4.329 to i8*), align 4
  %v0_ffc0 = load i32, i32* @r6, align 4
  %v1_ffc0 = trunc i32 %v0_ffc0 to i8
  store i8 %v1_ffc0, i8* bitcast (i32* @global_var_1b8c5.330 to i8*), align 4
  %v1_ffc4 = call i32 @function_11428(i32 14)
  store i32 %v1_ffc4, i32* @r5, align 4
  %v0_ffd4 = load i32, i32* @r7, align 4
  %v2_ffd4 = mul i32 %v0_ffd4, 2
  store i32 %v2_ffd4, i32* @r7, align 4
  %v4_ffd8 = call i32 @function_101b8(i32 %v1_ffc4, i32 ptrtoint ([15 x i8]* @global_var_1329c.332 to i32), i32 14)
  %v0_ffe0 = load i32, i32* @r5, align 4
  store i32 %v0_ffe0, i32* @global_var_1b8c8.333, align 4
  %v0_ffe4 = load i32, i32* @r7, align 4
  %v1_ffe4 = trunc i32 %v0_ffe4 to i8
  store i8 %v1_ffe4, i8* bitcast (i32* @global_var_1b8cc.334 to i8*), align 4
  %v0_ffe8 = load i32, i32* @r6, align 4
  %v1_ffe8 = trunc i32 %v0_ffe8 to i8
  store i8 %v1_ffe8, i8* bitcast (i32* @global_var_1b8cd.335 to i8*), align 4
  %v1_ffec = call i32 @function_11428(i32 10)
  store i32 %v1_ffec, i32* @r5, align 4
  %v4_fffc = call i32 @function_101b8(i32 %v1_ffec, i32 ptrtoint ([11 x i8]* @global_var_132ac.337 to i32), i32 10)
  store i8 10, i8* bitcast (i32* @global_var_1b8d4.338 to i8*), align 4
  %v0_1000c = load i32, i32* @r5, align 4
  store i32 %v0_1000c, i32* @global_var_1b8d0.339, align 4
  %v0_10010 = load i32, i32* @r6, align 4
  %v1_10010 = trunc i32 %v0_10010 to i8
  store i8 %v1_10010, i8* bitcast (i32* @global_var_1b8d5.340 to i8*), align 4
  %v1_10014 = call i32 @function_11428(i32 21)
  store i32 %v1_10014, i32* @r5, align 4
  %v3_10024 = call i32 @function_101b8(i32 %v1_10014, i32 ptrtoint (i32* @global_var_13300.342 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1b8dc.343 to i8*), align 4
  %v0_10034 = load i32, i32* @r5, align 4
  store i32 %v0_10034, i32* @global_var_1b8d8.344, align 4
  %v0_10038 = load i32, i32* @r6, align 4
  %v1_10038 = trunc i32 %v0_10038 to i8
  store i8 %v1_10038, i8* bitcast (i32* @global_var_1b8dd.345 to i8*), align 4
  %v1_1003c = call i32 @function_11428(i32 17)
  store i32 %v1_1003c, i32* @r5, align 4
  %v4_1004c = call i32 @function_101b8(i32 %v1_1003c, i32 ptrtoint ([18 x i8]* @global_var_132b8.347 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1b8e4.348 to i8*), align 4
  %v0_1005c = load i32, i32* @r5, align 4
  store i32 %v0_1005c, i32* @global_var_1b8e0.349, align 4
  %v0_10060 = load i32, i32* @r6, align 4
  %v1_10060 = trunc i32 %v0_10060 to i8
  store i8 %v1_10060, i8* bitcast (i32* @global_var_1b8e5.350 to i8*), align 4
  %v1_10064 = call i32 @function_11428(i32 12)
  store i32 %v1_10064, i32* @r5, align 4
  %v4_10074 = call i32 @function_101b8(i32 %v1_10064, i32 ptrtoint ([13 x i8]* @global_var_132cc.352 to i32), i32 12)
  %v0_1007c = load i32, i32* @r7, align 4
  store i8 12, i8* bitcast (i32* @global_var_1b8ec.353 to i8*), align 4
  %v0_10084 = load i32, i32* @r5, align 4
  store i32 %v0_10084, i32* @global_var_1b8e8.354, align 4
  %v0_10088 = load i32, i32* @r6, align 4
  %v1_10088 = trunc i32 %v0_10088 to i8
  store i8 %v1_10088, i8* bitcast (i32* @global_var_1b8ed.355 to i8*), align 4
  %v1_1008c = call i32 @function_11428(i32 %v0_1007c)
  %v0_10094 = load i32, i32* @r7, align 4
  store i32 %v1_1008c, i32* @r5, align 4
  %v4_1009c = call i32 @function_101b8(i32 %v1_1008c, i32 ptrtoint ([15 x i8]* @global_var_132dc.357 to i32), i32 %v0_10094)
  %v0_100a4 = load i32, i32* @r5, align 4
  store i32 %v0_100a4, i32* @global_var_1b8f0.358, align 4
  %v0_100a8 = load i32, i32* @r7, align 4
  %v1_100a8 = trunc i32 %v0_100a8 to i8
  store i8 %v1_100a8, i8* bitcast (i32* @global_var_1b8f4.359 to i8*), align 4
  %v0_100ac = load i32, i32* @r6, align 4
  %v1_100ac = trunc i32 %v0_100ac to i8
  store i8 %v1_100ac, i8* bitcast (i32* @global_var_1b8f5.360 to i8*), align 4
  %v1_100b0 = call i32 @function_11428(i32 19)
  %v4_100c0 = call i32 @function_101b8(i32 %v1_100b0, i32 ptrtoint ([20 x i8]* @global_var_132ec.362 to i32), i32 19)
  %v0_100c8 = load i32, i32* @r6, align 4
  %v1_100c8 = trunc i32 %v0_100c8 to i8
  store i8 %v1_100c8, i8* bitcast (i32* @global_var_1b8fd.363 to i8*), align 4
  store i32 %v1_100b0, i32* @global_var_1b8f8.364, align 4
  store i8 19, i8* bitcast (i32* @global_var_1b8fc.365 to i8*), align 4
  %v2_100d4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_100d4, i32* @r4, align 4
  store i32 %v6_fd1c, i32* @r5, align 4
  store i32 %v9_fd1c, i32* @r6, align 4
  store i32 %v12_fd1c, i32* @r7, align 4
  ret i32 %v4_100c0

; uselistorder directives
  uselistorder i32 %v1_1008c, { 1, 0 }
  uselistorder i32 %v1_ffa0, { 1, 0 }
  uselistorder i32 %v1_ff2c, { 1, 0 }
  uselistorder i32 %v1_fe18, { 1, 0 }
  uselistorder i32 %v1_fdf0, { 1, 0 }
  uselistorder i32 %v1_fd7c, { 1, 0 }
  uselistorder i32 %v1_fd24, { 1, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 10, 11, 0, 1, 12, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i8 16, { 15, 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 0, 2, 3, 4, 1 }
  uselistorder i8 58, { 9, 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i32 (i32, i32, i32)* @function_101b8, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 5, 7, 6, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1b888.239 to i32), { 5, 0, 1, 2, 3, 4, 6 }
}

define i32 @function_1013c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1013c:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_10140 = load i8, i8* %arg1, align 1
  %v4_10140 = zext i8 %v3_10140 to i32
  %v2_10144 = icmp eq i8 %v3_10140, 0
  br i1 %v2_10144, label %dec_label_pc_10160, label %bb

dec_label_pc_10160:                               ; preds = %dec_label_pc_10150, %dec_label_pc_1013c
  %merge = phi i32 [ %v4_10140, %dec_label_pc_1013c ], [ %v1_10150, %dec_label_pc_10150 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_1013c
  br label %dec_label_pc_10150

dec_label_pc_10150:                               ; preds = %dec_label_pc_10150, %bb
  %v0_10150 = phi i32 [ %v1_10150, %dec_label_pc_10150 ], [ 0, %bb ]
  %v1_10150 = add i32 %v0_10150, 1
  %v2_10154 = add i32 %v1_10150, %tmp
  %v3_10154 = inttoptr i32 %v2_10154 to i8*
  %v4_10154 = load i8, i8* %v3_10154, align 1
  %v2_10158 = icmp eq i8 %v4_10154, 0
  br i1 %v2_10158, label %dec_label_pc_10160, label %dec_label_pc_10150

; uselistorder directives
  uselistorder i32 %v1_10150, { 1, 0, 2 }
}

define i32 @function_10164(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10164:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_10164 = load i8, i8* %arg1, align 1
  %v3_10164 = zext i8 %v2_10164 to i32
  %v2_10168 = icmp eq i8 %v2_10164, 0
  br i1 %v2_10168, label %dec_label_pc_101ac, label %dec_label_pc_10170

dec_label_pc_10170:                               ; preds = %dec_label_pc_10164
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10174

dec_label_pc_10174:                               ; preds = %dec_label_pc_10174, %dec_label_pc_10170
  %v0_10174 = phi i32 [ %v1_10174, %dec_label_pc_10174 ], [ 0, %dec_label_pc_10170 ]
  %v1_10174 = add i32 %v0_10174, 1
  store i32 %v1_10174, i32* %ip.global-to-local, align 4
  %v2_10178 = add i32 %v1_10174, %tmp
  %v3_10178 = inttoptr i32 %v2_10178 to i8*
  %v4_10178 = load i8, i8* %v3_10178, align 1
  %v2_1017c = icmp eq i8 %v4_10178, 0
  br i1 %v2_1017c, label %dec_label_pc_10184, label %dec_label_pc_10174

dec_label_pc_10184:                               ; preds = %dec_label_pc_10174
  %v7_10184 = icmp eq i32 %v0_10174, -2
  br i1 %v7_10184, label %dec_label_pc_101a4, label %dec_label_pc_10190.preheader

dec_label_pc_10190.preheader:                     ; preds = %dec_label_pc_10184, %dec_label_pc_101ac
  %storemerge = phi i32 [ %v3_10164, %dec_label_pc_101ac ], [ %v1_10174, %dec_label_pc_10184 ]
  %v2_1019c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_10190

dec_label_pc_10190:                               ; preds = %dec_label_pc_10190.dec_label_pc_10190_crit_edge, %dec_label_pc_10190.preheader
  %v2_1019c = phi i32 [ %v5_1019c, %dec_label_pc_10190.dec_label_pc_10190_crit_edge ], [ %v2_1019c.pre, %dec_label_pc_10190.preheader ]
  %v0_10194 = phi i32 [ %v0_10194.pre, %dec_label_pc_10190.dec_label_pc_10190_crit_edge ], [ %tmp, %dec_label_pc_10190.preheader ]
  %v0_10190 = phi i32 [ %v0_10190.pre, %dec_label_pc_10190.dec_label_pc_10190_crit_edge ], [ %storemerge, %dec_label_pc_10190.preheader ]
  %v1_10190 = add i32 %v0_10190, -1
  store i32 %v1_10190, i32* @r2, align 4
  %v1_10194 = inttoptr i32 %v0_10194 to i8*
  %v2_10194 = load i8, i8* %v1_10194, align 1
  %v5_10194 = add i32 %v0_10194, 1
  store i32 %v5_10194, i32* %r1.global-to-local, align 4
  %v3_10198 = icmp eq i32 %v0_10190, 0
  %v3_1019c = inttoptr i32 %v2_1019c to i8*
  store i8 %v2_10194, i8* %v3_1019c, align 1
  %v4_1019c = load i32, i32* @r0, align 4
  %v5_1019c = add i32 %v4_1019c, 1
  store i32 %v5_1019c, i32* @r0, align 4
  br i1 %v3_10198, label %dec_label_pc_101a4.loopexit, label %dec_label_pc_10190.dec_label_pc_10190_crit_edge

dec_label_pc_10190.dec_label_pc_10190_crit_edge:  ; preds = %dec_label_pc_10190
  %v0_10190.pre = load i32, i32* @r2, align 4
  %v0_10194.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10190

dec_label_pc_101a4.loopexit:                      ; preds = %dec_label_pc_10190
  %v0_101a4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_101a4

dec_label_pc_101a4:                               ; preds = %dec_label_pc_101a4.loopexit, %dec_label_pc_10184
  %v0_101a4 = phi i32 [ %v0_101a4.pre, %dec_label_pc_101a4.loopexit ], [ %v1_10174, %dec_label_pc_10184 ]
  ret i32 %v0_101a4

dec_label_pc_101ac:                               ; preds = %dec_label_pc_10164
  store i32 %v3_10164, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10190.preheader

; uselistorder directives
  uselistorder i32 %v5_1019c, { 1, 0 }
  uselistorder i32 %v0_10194, { 1, 0 }
  uselistorder i32 %v1_10174, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_10164, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10190.preheader, { 1, 0 }
}

define i32 @function_101b8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_101b8:
  %v2_101b8 = icmp eq i32 %arg3, 0
  br i1 %v2_101b8, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_101c4, %dec_label_pc_101b8
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_101b8
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_101c4

dec_label_pc_101c4:                               ; preds = %dec_label_pc_101c4, %bb
  %v0_101c4 = phi i32 [ %v1_101cc, %dec_label_pc_101c4 ], [ 0, %bb ]
  %v2_101c4 = add i32 %v0_101c4, %arg2
  %v3_101c4 = inttoptr i32 %v2_101c4 to i8*
  %v4_101c4 = load i8, i8* %v3_101c4, align 1
  %v4_101c8 = add i32 %v0_101c4, %arg1
  %v5_101c8 = inttoptr i32 %v4_101c8 to i8*
  store i8 %v4_101c4, i8* %v5_101c8, align 1
  %v0_101cc = load i32, i32* @ip, align 4
  %v1_101cc = add i32 %v0_101cc, 1
  store i32 %v1_101cc, i32* @ip, align 4
  %v9_101d0 = icmp eq i32 %v1_101cc, %arg3
  br i1 %v9_101d0, label %.loopexit, label %dec_label_pc_101c4

; uselistorder directives
  uselistorder i32 %v1_101cc, { 1, 2, 0 }
}

define i32 @function_101dc() local_unnamed_addr {
dec_label_pc_101dc:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_101dc = load i32, i32* @r1, align 4
  %v2_101dc = icmp eq i32 %v0_101dc, 0
  br i1 %v2_101dc, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_101dc
  %v2_101e0 = load i32, i32* @r0, align 4
  ret i32 %v2_101e0

bb3:                                              ; preds = %dec_label_pc_101dc
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_101ec

dec_label_pc_101ec:                               ; preds = %dec_label_pc_101ec.dec_label_pc_101ec_crit_edge, %bb3
  %v2_101ec = phi i32 [ %v1_101f0, %dec_label_pc_101ec.dec_label_pc_101ec_crit_edge ], [ 0, %bb3 ]
  %v0_101ec.off0 = phi i8 [ %extract.t, %dec_label_pc_101ec.dec_label_pc_101ec_crit_edge ], [ 0, %bb3 ]
  %v3_101ec = load i32, i32* @r0, align 4
  %v4_101ec = add i32 %v3_101ec, %v2_101ec
  %v5_101ec = inttoptr i32 %v4_101ec to i8*
  store i8 %v0_101ec.off0, i8* %v5_101ec, align 1
  %v0_101f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_101f0 = add i32 %v0_101f0, 1
  store i32 %v1_101f0, i32* %r3.global-to-local, align 4
  %v1_101f4 = load i32, i32* @r1, align 4
  %v9_101f4 = icmp eq i32 %v1_101f0, %v1_101f4
  br i1 %v9_101f4, label %dec_label_pc_101fc, label %dec_label_pc_101ec.dec_label_pc_101ec_crit_edge

dec_label_pc_101ec.dec_label_pc_101ec_crit_edge:  ; preds = %dec_label_pc_101ec
  %v0_101ec.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_101ec.pre to i8
  br label %dec_label_pc_101ec

dec_label_pc_101fc:                               ; preds = %dec_label_pc_101ec
  %v1_101fc = load i32, i32* @r0, align 4
  ret i32 %v1_101fc

; uselistorder directives
  uselistorder i32 %v1_101f0, { 1, 2, 0 }
}

define i32 @function_10200(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10200:
  store i32 %arg4, i32* @lr, align 4
  %v7_10214 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10214, label %dec_label_pc_10218, label %dec_label_pc_10220

dec_label_pc_10218:                               ; preds = %dec_label_pc_10234, %dec_label_pc_10200, %dec_label_pc_10220
  ret i32 -1

dec_label_pc_10220:                               ; preds = %dec_label_pc_10200
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_10218, label %dec_label_pc_10228

dec_label_pc_10228:                               ; preds = %dec_label_pc_10220
  br label %dec_label_pc_10240

dec_label_pc_10234:                               ; preds = %dec_label_pc_10258, %dec_label_pc_10240
  %v1_10234 = add i32 %v0_10260, 1
  %v9_10238 = icmp eq i32 %v1_10234, %arg2
  br i1 %v9_10238, label %dec_label_pc_10218, label %dec_label_pc_10240

dec_label_pc_10240:                               ; preds = %dec_label_pc_10234, %dec_label_pc_10228
  %v0_10260 = phi i32 [ %v1_10234, %dec_label_pc_10234 ], [ 0, %dec_label_pc_10228 ]
  %v0_1024c = phi i32 [ %v1_1024c., %dec_label_pc_10234 ], [ 0, %dec_label_pc_10228 ]
  %v2_10240 = add i32 %v0_1024c, %arg3
  %v3_10240 = inttoptr i32 %v2_10240 to i8*
  %v4_10240 = load i8, i8* %v3_10240, align 1
  %v2_10244 = add i32 %v0_10260, %arg1
  %v3_10244 = inttoptr i32 %v2_10244 to i8*
  %v4_10244 = load i8, i8* %v3_10244, align 1
  %v9_10248 = icmp eq i8 %v4_10244, %v4_10240
  %v1_1024c = add i32 %v0_1024c, 1
  %v1_1024c. = select i1 %v9_10248, i32 %v1_1024c, i32 0
  br i1 %v9_10248, label %dec_label_pc_10258, label %dec_label_pc_10234

dec_label_pc_10258:                               ; preds = %dec_label_pc_10240
  %v9_10258 = icmp eq i32 %v1_1024c., %arg4
  br i1 %v9_10258, label %dec_label_pc_10260, label %dec_label_pc_10234

dec_label_pc_10260:                               ; preds = %dec_label_pc_10258
  %v1_10260 = add i32 %v0_10260, 1
  ret i32 %v1_10260

; uselistorder directives
  uselistorder i1 %v9_10248, { 1, 0 }
  uselistorder i32 %v0_1024c, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10218, { 0, 2, 1 }
}

define i32 @function_10268(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10268:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_10268 = load i32, i32* @r4, align 4
  store i32 %v3_10268, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10274

dec_label_pc_10274:                               ; preds = %.thread, %dec_label_pc_1028c, %bb, %dec_label_pc_10268
  %v0_10274 = phi i32 [ %tmp, %dec_label_pc_10268 ], [ %v5_10274, %bb ], [ %v5_10274, %dec_label_pc_1028c ], [ %v5_10274, %.thread ]
  %v1_10274 = inttoptr i32 %v0_10274 to i8*
  %v2_10274 = load i8, i8* %v1_10274, align 1
  %v3_10274 = zext i8 %v2_10274 to i32
  %v5_10274 = add i32 %v0_10274, 1
  store i32 %v5_10274, i32* %r5.global-to-local, align 4
  %v7_1027c = icmp eq i8 %v2_10274, 9
  br i1 %v7_1027c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10274
  store i32 %v3_10274, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10274

bb:                                               ; preds = %dec_label_pc_10274
  %v8_10280 = icmp eq i8 %v2_10274, 32
  store i32 %v3_10274, i32* %r4.global-to-local, align 4
  br i1 %v8_10280, label %dec_label_pc_10274, label %dec_label_pc_1028c

dec_label_pc_1028c:                               ; preds = %bb
  %v7_1028c = icmp eq i8 %v2_10274, 10
  br i1 %v7_1028c, label %dec_label_pc_10274, label %dec_label_pc_10294

dec_label_pc_10294:                               ; preds = %dec_label_pc_1028c
  %v7_10294 = icmp eq i8 %v2_10274, 45
  br i1 %v7_10294, label %dec_label_pc_10374, label %dec_label_pc_1029c

dec_label_pc_1029c:                               ; preds = %dec_label_pc_10294
  %v7_1029c = icmp eq i8 %v2_10274, 43
  br i1 %v7_1029c, label %bb48, label %dec_label_pc_102ac

bb48:                                             ; preds = %dec_label_pc_1029c
  %v2_102a0 = inttoptr i32 %v5_10274 to i8*
  %v3_102a0 = load i8, i8* %v2_102a0, align 1
  %v4_102a0 = zext i8 %v3_102a0 to i32
  store i32 %v4_102a0, i32* %r4.global-to-local, align 4
  %v6_102a0 = add i32 %v0_10274, 2
  store i32 %v6_102a0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_102ac

dec_label_pc_102ac:                               ; preds = %bb48, %dec_label_pc_1029c, %dec_label_pc_10374
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10374 ], [ 2147483647, %dec_label_pc_1029c ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10374 ], [ 0, %dec_label_pc_1029c ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_102b4 = call i32 @function_10744(i32 %storemerge1, i32 %arg2)
  %v0_102b8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_102b8, i32* @r1, align 4
  store i32 %v2_102b4, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_102c4 = call i32 @function_10634()
  store i32 %v0_102c4, i32* @lr, align 4
  %v0_102d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_102d4

dec_label_pc_102d4:                               ; preds = %.thread8, %dec_label_pc_102ac
  %v2_1035011 = phi i32 [ %v1_1036c26, %.thread8 ], [ 0, %dec_label_pc_102ac ]
  %v1_1032c = phi i32 [ %v0_1036024, %.thread8 ], [ 0, %dec_label_pc_102ac ]
  %v1_10314 = phi i32 [ %v3_10358, %.thread8 ], [ %v0_102d4.pre, %dec_label_pc_102ac ]
  %v1_102d4 = urem i32 %v1_10314, 256
  %v1_102d8 = add nsw i32 %v1_102d4, -48
  %v1_102e0 = add nsw i32 %v1_102d4, -97
  %v1_102e4 = add i32 %v1_10314, -48
  %v1_102e8 = add nsw i32 %v1_102d4, -65
  %tmp71 = icmp ult i32 %v1_102d8, 10
  br i1 %tmp71, label %dec_label_pc_10318, label %dec_label_pc_102f0

dec_label_pc_102f0:                               ; preds = %dec_label_pc_102d4
  %v2_102f0 = icmp ugt i32 %v1_102e8, 24
  %v7_102f0 = icmp eq i32 %v1_102e8, 25
  %v2_102f4 = xor i1 %v7_102f0, true
  %v3_102f4 = and i1 %v2_102f0, %v2_102f4
  br i1 %v3_102f4, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_102f0
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_102f0, %bb49
  %v0_1030820 = phi i32 [ %v1_102e4, %dec_label_pc_102f0 ], [ 0, %bb49 ]
  %v2_102f8 = xor i1 %v2_102f0, true
  %v3_102f8 = or i1 %v7_102f0, %v2_102f8
  br i1 %v3_102f8, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_10308 = phi i32 [ %v0_1030820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_102f4, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_10300 = icmp ugt i32 %v1_102e0, 24
  %v11_10300 = icmp eq i32 %v1_102e0, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_10304 = phi i1 [ %v7_102f0, %bb52 ], [ %v11_10300, %bb53 ]
  %v0_10304 = phi i1 [ %v2_102f0, %bb52 ], [ %v6_10300, %bb53 ]
  %v2_10304 = xor i1 %v1_10304, true
  %v3_10304 = and i1 %v0_10304, %v2_10304
  br i1 %v3_10304, label %dec_label_pc_10360, label %dec_label_pc_10308

dec_label_pc_10308:                               ; preds = %bb54
  %v2_10308 = icmp eq i32 %v0_10308, 0
  %. = select i1 %v2_10308, i32 87, i32 55
  %v2_10314 = sub i32 %v1_10314, %.
  br label %dec_label_pc_10318

dec_label_pc_10318:                               ; preds = %dec_label_pc_102d4, %dec_label_pc_10308
  %v0_1032c34 = phi i32 [ %v1_102e8, %dec_label_pc_102d4 ], [ %., %dec_label_pc_10308 ]
  %v3_1035012 = phi i32 [ %v1_102e4, %dec_label_pc_102d4 ], [ %v2_10314, %dec_label_pc_10308 ]
  %v1_10318 = load i32, i32* %r6.global-to-local, align 4
  %v6_1031c = icmp slt i32 %v3_1035012, %v1_10318
  br i1 %v6_1031c, label %dec_label_pc_10320, label %dec_label_pc_10360

dec_label_pc_10320:                               ; preds = %dec_label_pc_10318
  %v3_10320 = icmp uge i32 %v2_1035011, %v0_102c4
  %v9_10320 = icmp eq i32 %v2_1035011, %v0_102c4
  %v2_10324 = xor i1 %v3_10320, true
  %v3_10324 = or i1 %v9_10320, %v2_10324
  br i1 %v3_10324, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_10320
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_10320, %bb57
  %v0_1032c33 = phi i32 [ %v0_1032c34, %dec_label_pc_10320 ], [ 0, %bb57 ]
  %v2_10328 = xor i1 %v9_10320, true
  %v3_10328 = and i1 %v3_10320, %v2_10328
  br i1 %v3_10328, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_1032c = phi i32 [ %v0_1032c33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_1032c, 0
  %v4_1032c = zext i1 %tmp72 to i32
  %v5_1032c = or i32 %v0_1032c, %v4_1032c
  %v7_1032c = icmp eq i32 %v5_1032c, 0
  br i1 %v7_1032c, label %dec_label_pc_10338, label %.thread8

dec_label_pc_10338:                               ; preds = %bb60
  %v1_10344 = load i32, i32* %r8.global-to-local, align 4
  %v7_10348 = icmp sgt i32 %v3_1035012, %v1_10344
  br i1 %v7_10348, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_10338
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_10338
  %v2_1034c = icmp eq i1 %v9_10320, false
  br i1 %v2_1034c, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_1035013 = mul i32 %v1_10318, %v2_1035011
  %v5_1035014 = add i32 %v4_1035013, %v3_1035012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1036c26 = phi i32 [ %v2_1035011, %bb63 ], [ %v2_1035011, %bb60 ], [ %v5_1035014, %bb64 ]
  %v0_1036024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_10358 = load i32, i32* %r5.global-to-local, align 4
  %v1_10358 = inttoptr i32 %v0_10358 to i8*
  %v2_10358 = load i8, i8* %v1_10358, align 1
  %v3_10358 = zext i8 %v2_10358 to i32
  store i32 %v3_10358, i32* %r4.global-to-local, align 4
  %v5_10358 = add i32 %v0_10358, 1
  store i32 %v5_10358, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_102d4

dec_label_pc_10360:                               ; preds = %dec_label_pc_10318, %bb54
  %v1_10360 = icmp slt i32 %v1_1032c, 0
  %v0_10384 = load i32, i32* %sl.global-to-local, align 4
  %v2_10384 = icmp eq i32 %v0_10384, 0
  br i1 %v1_10360, label %dec_label_pc_10384, label %dec_label_pc_10368

dec_label_pc_10368:                               ; preds = %dec_label_pc_10360
  br i1 %v2_10384, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_10368
  %v2_1036c = sub i32 0, %v2_1035011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_10368, %bb65
  %v23_10370 = phi i32 [ %v2_1035011, %dec_label_pc_10368 ], [ %v2_1036c, %bb65 ]
  %v2_10370 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10370, i32* @r4, align 4
  ret i32 %v23_10370

dec_label_pc_10374:                               ; preds = %dec_label_pc_10294
  %v1_10374 = inttoptr i32 %v5_10274 to i8*
  %v2_10374 = load i8, i8* %v1_10374, align 1
  %v3_10374 = zext i8 %v2_10374 to i32
  store i32 %v3_10374, i32* %r4.global-to-local, align 4
  %v5_10374 = add i32 %v0_10274, 2
  store i32 %v5_10374, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_102ac

dec_label_pc_10384:                               ; preds = %dec_label_pc_10360
  %.70 = select i1 %v2_10384, i32 2147483647, i32 -2147483648
  %v2_10390 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10390, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_10358, { 1, 0 }
  uselistorder i1 %v9_10320, { 1, 0, 2 }
  uselistorder i1 %v3_10320, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_102f0, { 1, 2, 0 }
  uselistorder i1 %v2_102f0, { 1, 0, 2 }
  uselistorder i32 %v1_102d4, { 1, 2, 0 }
  uselistorder i32 %v1_10314, { 1, 2, 0 }
  uselistorder i32 %v1_1032c, { 1, 0 }
  uselistorder i32 %v2_1035011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_102c4, { 1, 0, 2 }
  uselistorder i32 %v5_10274, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_10274, { 1, 0 }
  uselistorder i32 %v0_10274, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 32, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i8 9, { 3, 4, 2, 0, 1 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_10318, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_102ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10274, { 1, 2, 0, 3 }
}

define i32 @function_10394(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10394:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10394 = load i32, i32* @r4, align 4
  store i32 %v3_10394, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_103ac

dec_label_pc_103ac:                               ; preds = %dec_label_pc_103d8.dec_label_pc_103ac_crit_edge, %dec_label_pc_10394
  %v0_103b0 = phi i32 [ %v0_103b0.pre, %dec_label_pc_103d8.dec_label_pc_103ac_crit_edge ], [ %arg3, %dec_label_pc_10394 ]
  %v0_103ac = phi i32 [ %v1_103c4, %dec_label_pc_103d8.dec_label_pc_103ac_crit_edge ], [ %tmp, %dec_label_pc_10394 ]
  %tmp12 = inttoptr i32 %v0_103ac to i32*
  %v5_103b8 = call i32 @function_10b84(i32 %v0_103b0, i32* %tmp12, i32 1)
  %v7_103bc = icmp eq i32 %v5_103b8, 1
  %v0_103c0 = load i32, i32* @r4, align 4
  %v1_103c4 = add i32 %v0_103c0, 1
  store i32 %v1_103c4, i32* @r4, align 4
  %v0_103cc = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_103bc, label %dec_label_pc_103cc, label %dec_label_pc_103e4

dec_label_pc_103cc:                               ; preds = %dec_label_pc_103ac
  %v1_103cc = add i32 %v0_103cc, 1
  store i32 %v1_103cc, i32* %r5.global-to-local, align 4
  %v0_103d0 = load i32, i32* %r7.global-to-local, align 4
  %v7_103d4 = icmp sgt i32 %v0_103d0, %v1_103cc
  br i1 %v7_103d4, label %dec_label_pc_103d8, label %dec_label_pc_103e4

dec_label_pc_103d8:                               ; preds = %dec_label_pc_103cc
  %v1_103d8 = inttoptr i32 %v0_103c0 to i8*
  %v2_103d8 = load i8, i8* %v1_103d8, align 1
  %v7_103dc = icmp eq i8 %v2_103d8, 10
  br i1 %v7_103dc, label %dec_label_pc_103e4, label %dec_label_pc_103d8.dec_label_pc_103ac_crit_edge

dec_label_pc_103d8.dec_label_pc_103ac_crit_edge:  ; preds = %dec_label_pc_103d8
  %v0_103b0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_103ac

dec_label_pc_103e4:                               ; preds = %dec_label_pc_103ac, %dec_label_pc_103d8, %dec_label_pc_103cc
  %v0_103e4 = phi i32 [ %v1_103cc, %dec_label_pc_103d8 ], [ %v1_103cc, %dec_label_pc_103cc ], [ %v0_103cc, %dec_label_pc_103ac ]
  %v2_103e4 = icmp eq i32 %v0_103e4, 0
  %v1_103e8 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_103e4, i32 0, i32 %v1_103e8
  %v2_103f0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_103f0, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_103c4, { 1, 0 }
  uselistorder i8 10, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32*, i32)* @function_10b84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_103e4, { 1, 2, 0 }
}

define i32 @function_103f4() local_unnamed_addr {
dec_label_pc_103f4:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_103f4 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_10404 = call i32 @function_10f64()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_1040c = inttoptr i32 %v0_10404 to i32*
  store i32 0, i32* %v2_1040c, align 4
  %v0_10418 = load i32, i32* %r6.global-to-local, align 4
  %v3_1041c = call i32 @function_11290(i32 2, i32 2, i32 %v0_10418)
  %v7_10428 = icmp eq i32 %v3_1041c, -1
  store i32 %v3_1041c, i32* %r5.global-to-local, align 4
  %v2_10434 = load i32, i32* @r4, align 4
  br i1 %v7_10428, label %dec_label_pc_10484, label %dec_label_pc_10448

dec_label_pc_10448:                               ; preds = %dec_label_pc_103f4
  %v7_10434 = shl i32 2056, %v2_10434
  %v8_10434 = or i32 %v7_10434, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_10464 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_10464 = call i32 @function_110ec(i32 %v3_1041c, %sockaddr* %v3_10464, i32 %v2_10434)
  %v2_1046c = ptrtoint i32* %stack_var_-24 to i32
  %v0_10470 = load i32, i32* %r5.global-to-local, align 4
  %v4_10474 = call i32 @function_11118(i32 %v0_10470, %sockaddr* %v3_10464, i32 %v2_1046c)
  %v1_1047c = call i32 @function_109bc(i32 %v0_10470)
  br label %dec_label_pc_10484

dec_label_pc_10484:                               ; preds = %dec_label_pc_103f4, %dec_label_pc_10448
  %v0_10484 = phi i32 [ %v0_10418, %dec_label_pc_103f4 ], [ %v8_10434, %dec_label_pc_10448 ]
  store i32 %v3_103f4, i32* @r4, align 4
  ret i32 %v0_10484

; uselistorder directives
  uselistorder i32 %v3_1041c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_110ec, { 2, 0, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11290, { 16, 18, 14, 15, 17, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10484, { 1, 0 }
}

define i32 @function_10490(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10490:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_10494 = load i8, i8* %tmp, align 1
  %v2_10498 = icmp eq i8 %v3_10494, 0
  br i1 %v2_10498, label %bb, label %dec_label_pc_104ac

bb:                                               ; preds = %dec_label_pc_10490
  %v4_10494 = zext i8 %v3_10494 to i32
  br label %dec_label_pc_104c0

dec_label_pc_104ac:                               ; preds = %dec_label_pc_10490
  br label %dec_label_pc_104b0

dec_label_pc_104b0:                               ; preds = %dec_label_pc_104b0, %dec_label_pc_104ac
  %v0_104b0 = phi i32 [ %v1_104b0, %dec_label_pc_104b0 ], [ 0, %dec_label_pc_104ac ]
  %v1_104b0 = add i32 %v0_104b0, 1
  %v2_104b4 = add i32 %v1_104b0, %arg2
  %v3_104b4 = inttoptr i32 %v2_104b4 to i8*
  %v4_104b4 = load i8, i8* %v3_104b4, align 1
  %v2_104b8 = icmp eq i8 %v4_104b4, 0
  br i1 %v2_104b8, label %dec_label_pc_104c0, label %dec_label_pc_104b0

dec_label_pc_104c0:                               ; preds = %dec_label_pc_104b0, %bb
  %v0_1050418 = phi i32 [ %v4_10494, %bb ], [ %v1_104b0, %dec_label_pc_104b0 ]
  %v0_104c81 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_104c81, 1
  br i1 %tmp27, label %dec_label_pc_10514, label %dec_label_pc_104d4

dec_label_pc_104d4:                               ; preds = %dec_label_pc_104c0, %dec_label_pc_104c8.backedge
  %v0_104cc.in = phi i32 [ %v0_104cc, %dec_label_pc_104c8.backedge ], [ %v0_104c81, %dec_label_pc_104c0 ]
  %v0_104f8 = phi i32 [ %v1_104f8., %dec_label_pc_104c8.backedge ], [ 0, %dec_label_pc_104c0 ]
  %v0_104d4 = phi i32 [ %v5_104d4, %dec_label_pc_104c8.backedge ], [ %tmp20, %dec_label_pc_104c0 ]
  %v0_104cc = add i32 %v0_104cc.in, -1
  %v1_104d4 = inttoptr i32 %v0_104d4 to i8*
  %v2_104d4 = load i8, i8* %v1_104d4, align 1
  %v3_104d4 = zext i8 %v2_104d4 to i32
  store i32 %v3_104d4, i32* @lr, align 4
  %v5_104d4 = add i32 %v0_104d4, 1
  %v2_104d8 = add i32 %v0_104f8, %arg2
  %v3_104d8 = inttoptr i32 %v2_104d8 to i8*
  %v4_104d8 = load i8, i8* %v3_104d8, align 1
  %v6_104d8 = zext i8 %v4_104d8 to i32
  %v1_104dc = add nsw i32 %v3_104d4, -65
  %v1_104e0 = add nsw i32 %v6_104d8, -65
  %tmp35 = icmp ult i32 %v1_104dc, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_104d4
  %v5_104e8 = or i32 %v3_104d4, 96
  store i32 %v5_104e8, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_104d4, %bb28
  %v0_104f4 = phi i32 [ %v3_104d4, %dec_label_pc_104d4 ], [ %v5_104e8, %bb28 ]
  %tmp36 = icmp ult i32 %v1_104e0, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_104f0 = or i32 %v6_104d8, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_104f4 = phi i32 [ %v6_104d8, %bb29 ], [ %v5_104f0, %bb30 ]
  %v9_104f4 = icmp eq i32 %v0_104f4, %v1_104f4
  %v1_104f8 = add i32 %v0_104f8, 1
  %v1_104f8. = select i1 %v9_104f4, i32 %v1_104f8, i32 0
  br i1 %v9_104f4, label %dec_label_pc_10504, label %dec_label_pc_104c8.backedge

dec_label_pc_104c8.backedge:                      ; preds = %bb31, %dec_label_pc_10504
  %tmp32 = icmp slt i32 %v0_104cc, 1
  br i1 %tmp32, label %dec_label_pc_10514, label %dec_label_pc_104d4

dec_label_pc_10504:                               ; preds = %bb31
  %v9_10504 = icmp eq i32 %v0_1050418, %v1_104f8.
  br i1 %v9_10504, label %dec_label_pc_1050c, label %dec_label_pc_104c8.backedge

dec_label_pc_1050c:                               ; preds = %dec_label_pc_10504
  %v2_1050c = sub i32 %v5_104d4, %tmp20
  ret i32 %v2_1050c

dec_label_pc_10514:                               ; preds = %dec_label_pc_104c8.backedge, %dec_label_pc_104c0
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_104f8., { 1, 0 }
  uselistorder i32 %v0_104d4, { 1, 0 }
  uselistorder i32 %v0_104f8, { 1, 0 }
  uselistorder i8 %v3_10494, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_104c8.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_104d4, { 1, 0 }
}

define i32 @function_1051c(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_1051c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1051c = load i32, i32* @r4, align 4
  store i32 %v3_1051c, i32* %stack_var_-28, align 4
  %v22_1051c = ptrtoint i32* %stack_var_-28 to i32
  %v0_10520 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10520, i32* %r8.global-to-local, align 4
  %v2_10520 = icmp eq i32 %v0_10520, 0
  store i1 %v2_10520, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_10520, label %dec_label_pc_10610, label %dec_label_pc_10530

dec_label_pc_10530:                               ; preds = %dec_label_pc_1051c
  %v3_10530 = icmp eq i8 %arg1, 0
  store i1 %v3_10530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10530, label %.thread, label %dec_label_pc_10544

.thread:                                          ; preds = %dec_label_pc_10530
  %v4_10538 = inttoptr i32 %v0_10520 to i8*
  store i8 48, i8* %v4_10538, align 1
  %v0_1053c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1053c.pr.pr, label %.thread1, label %dec_label_pc_10544

.thread1:                                         ; preds = %.thread
  %v4_1053c = load i32, i32* %r8.global-to-local, align 4
  %v5_1053c = add i32 %v4_1053c, 1
  %v6_1053c = inttoptr i32 %v5_1053c to i8*
  store i8 0, i8* %v6_1053c, align 1
  %v0_10540.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10540.pr.pr, label %dec_label_pc_10610, label %dec_label_pc_10544

dec_label_pc_10544:                               ; preds = %dec_label_pc_10530, %.thread, %.thread1
  %tmp39 = icmp slt i8 %arg1, 0
  %v7_10548 = icmp eq i32 %arg2, 10
  store i1 %v7_10548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10548, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_10544
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_10544
  %v4_10544 = zext i1 %tmp39 to i32
  store i32 %v4_10544, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_1056c

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1057c

dec_label_pc_1056c:                               ; preds = %bb
  %v2_1056c = sub nsw i32 0, %tmp
  store i32 %v2_1056c, i32* %r4.global-to-local, align 4
  store i1 %v3_10530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10530, label %dec_label_pc_1061c, label %dec_label_pc_1057c

dec_label_pc_1057c:                               ; preds = %dec_label_pc_1056c, %.thread4
  %v0_1058410 = phi i32 [ %tmp, %.thread4 ], [ %v2_1056c, %dec_label_pc_1056c ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_1056c ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_10580 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_10580, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10584

dec_label_pc_10584:                               ; preds = %bb37, %dec_label_pc_1057c
  %v0_10584 = phi i32 [ %v0_105a8, %bb37 ], [ %v0_1058410, %dec_label_pc_1057c ]
  store i32 %v0_10584, i32* %r0.global-to-local, align 4
  %v0_10588 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10588, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_10584, 16777216
  %v1_1058c = sdiv i32 %sext, 16777216
  %v3_1058c = call i32 @function_10744(i32 %v1_1058c, i32 %v0_10588)
  store i32 %v3_1058c, i32* %r0.global-to-local, align 4
  %v7_10590 = icmp eq i32 %v3_1058c, 9
  store i1 %v7_10590, i1* %cpsr_z.global-to-local, align 1
  %v1_10594 = add i32 %v3_1058c, 48
  %v0_10598 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10598, i32* @r1, align 4
  %v7_1059c = icmp sgt i32 %v3_1058c, 9
  %extract.t = trunc i32 %v1_10594 to i8
  br i1 %v7_1059c, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_10584
  %v9_1059c = add i32 %v3_1058c, 55
  %extract.t20 = trunc i32 %v9_1059c to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_10584, %bb36
  %v0_105a4.off0 = phi i8 [ %extract.t, %dec_label_pc_10584 ], [ %extract.t20, %bb36 ]
  %v0_105a0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_105a0, i32* @r0, align 4
  %v2_105a4 = load i32, i32* %r7.global-to-local, align 4
  %v3_105a4 = inttoptr i32 %v2_105a4 to i8*
  store i8 %v0_105a4.off0, i8* %v3_105a4, align 1
  %v4_105a4 = load i32, i32* %r7.global-to-local, align 4
  %v5_105a4 = add i32 %v4_105a4, -1
  store i32 %v5_105a4, i32* %r7.global-to-local, align 4
  %v0_105a8 = call i32 @function_10634()
  store i32 %v0_105a8, i32* %r0.global-to-local, align 4
  store i32 %v0_105a8, i32* %r4.global-to-local, align 4
  %v2_105ac = icmp eq i32 %v0_105a8, 0
  store i1 %v2_105ac, i1* %cpsr_z.global-to-local, align 1
  %v0_105b0 = load i32, i32* %r6.global-to-local, align 4
  %v1_105b0 = add i32 %v0_105b0, -1
  store i32 %v1_105b0, i32* %r6.global-to-local, align 4
  br i1 %v2_105ac, label %dec_label_pc_105b8, label %dec_label_pc_10584

dec_label_pc_105b8:                               ; preds = %bb37
  %v0_105b8 = load i32, i32* %sl.global-to-local, align 4
  %v2_105b8 = icmp eq i32 %v0_105b8, 0
  store i1 %v2_105b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105b8, label %bb38, label %dec_label_pc_10620

bb38:                                             ; preds = %dec_label_pc_105b8
  store i32 %v0_105b0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_105c4

dec_label_pc_105c4:                               ; preds = %bb38, %dec_label_pc_10620
  %v1_105d0 = phi i32 [ %v0_105b0, %bb38 ], [ %v1_105c8.pre, %dec_label_pc_10620 ]
  %v2_105c4 = ptrtoint i32* %stack_var_-62 to i32
  %v2_105c8 = add i32 %v1_105d0, %v2_105c4
  %v3_105c8 = inttoptr i32 %v2_105c8 to i8*
  %v4_105c8 = load i8, i8* %v3_105c8, align 1
  %v6_105c8 = zext i8 %v4_105c8 to i32
  store i32 %v6_105c8, i32* %r2.global-to-local, align 4
  %v2_105cc = icmp eq i8 %v4_105c8, 0
  store i1 %v2_105cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_105c8, i32* %r1.global-to-local, align 4
  br i1 %v2_105cc, label %dec_label_pc_105f4, label %dec_label_pc_105d8

dec_label_pc_105d8:                               ; preds = %dec_label_pc_105c4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_105dc

dec_label_pc_105dc:                               ; preds = %dec_label_pc_105dc, %dec_label_pc_105d8
  %v0_105dc = phi i32 [ %v1_105dc, %dec_label_pc_105dc ], [ 0, %dec_label_pc_105d8 ]
  %v1_105dc = add i32 %v0_105dc, 1
  store i32 %v1_105dc, i32* %r2.global-to-local, align 4
  %v2_105e0 = add i32 %v1_105dc, %v2_105c8
  %v3_105e0 = inttoptr i32 %v2_105e0 to i8*
  %v4_105e0 = load i8, i8* %v3_105e0, align 1
  %v2_105e4 = icmp eq i8 %v4_105e0, 0
  store i1 %v2_105e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105e4, label %dec_label_pc_105ec, label %dec_label_pc_105dc

dec_label_pc_105ec:                               ; preds = %dec_label_pc_105dc
  %v7_105ec = icmp eq i32 %v0_105dc, -2
  store i1 %v7_105ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105ec, label %dec_label_pc_10610, label %dec_label_pc_105f4

dec_label_pc_105f4:                               ; preds = %dec_label_pc_105ec, %dec_label_pc_105c4
  %v0_105fc17 = phi i32 [ %v1_105dc, %dec_label_pc_105ec ], [ %v6_105c8, %dec_label_pc_105c4 ]
  store i32 %v2_105c8, i32* %r0.global-to-local, align 4
  %v0_105f8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_105f8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_105fc

dec_label_pc_105fc:                               ; preds = %dec_label_pc_105fc.dec_label_pc_105fc_crit_edge, %dec_label_pc_105f4
  %v2_10608 = phi i32 [ %v5_10608, %dec_label_pc_105fc.dec_label_pc_105fc_crit_edge ], [ %v0_105f8, %dec_label_pc_105f4 ]
  %v0_10600 = phi i32 [ %v0_10600.pre, %dec_label_pc_105fc.dec_label_pc_105fc_crit_edge ], [ %v2_105c8, %dec_label_pc_105f4 ]
  %v0_105fc = phi i32 [ %v0_105fc.pre, %dec_label_pc_105fc.dec_label_pc_105fc_crit_edge ], [ %v0_105fc17, %dec_label_pc_105f4 ]
  %v1_105fc = add i32 %v0_105fc, -1
  store i32 %v1_105fc, i32* %r2.global-to-local, align 4
  %v1_10600 = inttoptr i32 %v0_10600 to i8*
  %v2_10600 = load i8, i8* %v1_10600, align 1
  %v5_10600 = add i32 %v0_10600, 1
  store i32 %v5_10600, i32* %r0.global-to-local, align 4
  %v3_10604 = icmp eq i32 %v0_105fc, 0
  store i1 %v3_10604, i1* %cpsr_z.global-to-local, align 1
  %v3_10608 = inttoptr i32 %v2_10608 to i8*
  store i8 %v2_10600, i8* %v3_10608, align 1
  %v4_10608 = load i32, i32* %r1.global-to-local, align 4
  %v5_10608 = add i32 %v4_10608, 1
  store i32 %v5_10608, i32* %r1.global-to-local, align 4
  br i1 %v3_10604, label %dec_label_pc_10610, label %dec_label_pc_105fc.dec_label_pc_105fc_crit_edge

dec_label_pc_105fc.dec_label_pc_105fc_crit_edge:  ; preds = %dec_label_pc_105fc
  %v0_105fc.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_10600.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_105fc

dec_label_pc_10610:                               ; preds = %dec_label_pc_105fc, %dec_label_pc_105ec, %.thread1, %dec_label_pc_1051c
  %v0_10610 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10610, i32* %r0.global-to-local, align 4
  %v2_10618 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10618, i32* @r4, align 4
  ret i32 %v0_10610

dec_label_pc_1061c:                               ; preds = %dec_label_pc_1056c
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10620

dec_label_pc_10620:                               ; preds = %dec_label_pc_105b8, %dec_label_pc_1061c
  %v1_10624 = phi i32 [ %v1_105b0, %dec_label_pc_105b8 ], [ 32, %dec_label_pc_1061c ]
  %v2_10624 = add i32 %v1_10624, %v22_1051c
  store i32 %v2_10624, i32* %r2.global-to-local, align 4
  %v3_1062c = add i32 %v2_10624, -34
  %v4_1062c = inttoptr i32 %v3_1062c to i8*
  store i8 45, i8* %v4_1062c, align 1
  %v1_105c8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_105c4

; uselistorder directives
  uselistorder i32 %v5_10608, { 1, 0 }
  uselistorder i1 %v3_10604, { 1, 0 }
  uselistorder i32 %v0_10600, { 1, 0 }
  uselistorder i1 %v7_105ec, { 1, 0 }
  uselistorder i32 %v1_105dc, { 0, 1, 3, 2 }
  uselistorder i32 %v2_105c8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_105a8, { 1, 2, 3, 0 }
  uselistorder i32 %v3_1058c, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_10530, { 1, 0, 2, 3 }
  uselistorder i32 %v0_10520, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 11, 10, 12, 13 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_10744, { 2, 1, 9, 7, 8, 0, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_10620, { 1, 0 }
  uselistorder label %dec_label_pc_105c4, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_10544, { 2, 1, 0 }
}

define i32 @function_10634() local_unnamed_addr {
dec_label_pc_10634:
  %v0_10634 = load i32, i32* @r1, align 4
  %v1_10634 = add i32 %v0_10634, -1
  store i32 %v1_10634, i32* @r2, align 4
  %v7_10634 = icmp eq i32 %v0_10634, 1
  br i1 %v7_10634, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_10634
  %v2_10638 = load i32, i32* @r0, align 4
  ret i32 %v2_10638

bb82:                                             ; preds = %dec_label_pc_10634
  %v2_10634 = icmp eq i32 %v0_10634, 0
  br i1 %v2_10634, label %dec_label_pc_1071c, label %dec_label_pc_10640

dec_label_pc_10640:                               ; preds = %bb82
  %v0_10640 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_10640, %v0_10634
  br i1 %tmp, label %dec_label_pc_10648, label %dec_label_pc_106d4

dec_label_pc_10648:                               ; preds = %dec_label_pc_10640
  %v2_10648 = and i32 %v1_10634, %v0_10634
  %v4_10648 = icmp eq i32 %v2_10648, 0
  br i1 %v4_10648, label %dec_label_pc_106e0, label %dec_label_pc_10650

dec_label_pc_10650:                               ; preds = %dec_label_pc_10648
  %v3_10650 = icmp ult i32 %v0_10634, 536870912
  br i1 %v3_10650, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10650
  %v4_10654 = mul i32 %v0_10634, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10650, %.thread
  %v0_10674.pr36.ph = phi i32 [ %v4_10654, %.thread ], [ %v0_10634, %dec_label_pc_10650 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10650 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_10674.pr36 = phi i32 [ %v4_10668, %bb85 ], [ %v0_10674.pr36.ph, %.preheader.preheader ]
  %v1_1066c = phi i32 [ %v4_1066c, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_10660 = icmp ugt i32 %v0_10674.pr36, 268435455
  br i1 %v2_10660, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10674thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_10664 = icmp ult i32 %v0_10674.pr36, %v0_10640
  br i1 %v4_10664, label %bb84, label %dec_label_pc_10674thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_10668 = and i32 %v0_10674.pr36, 268435456
  %v3_10668 = icmp eq i32 %v2_10668, 0
  %v4_10668 = mul i32 %v0_10674.pr36, 16
  br i1 %v3_10668, label %bb85, label %dec_label_pc_10674.loopexit

bb85:                                             ; preds = %bb84
  %v2_1066c = and i32 %v1_1066c, 268435456
  %v3_1066c = icmp eq i32 %v2_1066c, 0
  %v4_1066c = mul i32 %v1_1066c, 16
  br i1 %v3_1066c, label %.preheader, label %dec_label_pc_10674thread-pre-split.loopexit.loopexit

dec_label_pc_10674thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1068048.ph = phi i32 [ %v1_1066c, %bb83 ], [ %v4_1066c, %bb85 ]
  %v0_10674.pr38.ph = phi i32 [ %v0_10674.pr36, %bb83 ], [ %v4_10668, %bb85 ]
  br label %dec_label_pc_10674thread-pre-split.loopexit

dec_label_pc_10674thread-pre-split.loopexit:      ; preds = %dec_label_pc_10674thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1068048 = phi i32 [ %v1_1066c, %.thread2 ], [ %v1_1068048.ph, %dec_label_pc_10674thread-pre-split.loopexit.loopexit ]
  %v0_10674.pr38 = phi i32 [ %v0_10674.pr36, %.thread2 ], [ %v0_10674.pr38.ph, %dec_label_pc_10674thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10674thread-pre-split

dec_label_pc_10674thread-pre-split:               ; preds = %dec_label_pc_10674thread-pre-split.loopexit, %bb87
  %v1_1068046 = phi i32 [ %v1_1068048, %dec_label_pc_10674thread-pre-split.loopexit ], [ %v3_10680, %bb87 ]
  %v0_10674.pr = phi i32 [ %v0_10674.pr38, %dec_label_pc_10674thread-pre-split.loopexit ], [ %v3_1067c, %bb87 ]
  br label %dec_label_pc_10674

dec_label_pc_10674.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_10674

dec_label_pc_10674:                               ; preds = %dec_label_pc_10674.loopexit, %dec_label_pc_10674thread-pre-split
  %v1_10680 = phi i32 [ %v1_1068046, %dec_label_pc_10674thread-pre-split ], [ %v1_1066c, %dec_label_pc_10674.loopexit ]
  %v1_1067c = phi i32 [ %v0_10674.pr, %dec_label_pc_10674thread-pre-split ], [ %v4_10668, %dec_label_pc_10674.loopexit ]
  %v2_10674 = icmp slt i32 %v1_1067c, 0
  br i1 %v2_10674, label %dec_label_pc_10688, label %bb86

bb86:                                             ; preds = %dec_label_pc_10674
  %v4_10678 = icmp ult i32 %v1_1067c, %v0_10640
  br i1 %v4_10678, label %bb87, label %dec_label_pc_10688

bb87:                                             ; preds = %bb86
  %v3_1067c = mul i32 %v1_1067c, 2
  %v2_10680 = icmp slt i32 %v1_10680, 0
  %v3_10680 = mul i32 %v1_10680, 2
  br i1 %v2_10680, label %dec_label_pc_10688, label %dec_label_pc_10674thread-pre-split

dec_label_pc_10688:                               ; preds = %bb86, %dec_label_pc_10674, %bb87
  %v2_1069459 = phi i32 [ %v3_10680, %bb87 ], [ %v1_10680, %bb86 ], [ %v1_10680, %dec_label_pc_10674 ]
  %v1_1068c51 = phi i32 [ %v3_1067c, %bb87 ], [ %v1_1067c, %bb86 ], [ %v1_1067c, %dec_label_pc_10674 ]
  store i32 0, i32* @r2, align 4
  br label %dec_label_pc_1068c

dec_label_pc_1068c:                               ; preds = %.thread11, %dec_label_pc_10688
  %v1_106c0 = phi i32 [ %v4_106c0, %.thread11 ], [ %v2_1069459, %dec_label_pc_10688 ]
  %v1_10694 = phi i32 [ %v0_106cc, %.thread11 ], [ 0, %dec_label_pc_10688 ]
  %v1_106c4 = phi i32 [ %v4_106c4, %.thread11 ], [ %v1_1068c51, %dec_label_pc_10688 ]
  %v1_10690 = phi i32 [ %v0_106bc, %.thread11 ], [ %v0_10640, %dec_label_pc_10688 ]
  %v3_1068c = icmp ult i32 %v1_10690, %v1_106c4
  br i1 %v3_1068c, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_1068c
  %v3_10690 = sub i32 %v1_10690, %v1_106c4
  %v3_10694 = or i32 %v1_10694, %v1_106c0
  store i32 %v3_10694, i32* @r2, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_1068c, %bb88
  %v1_1069c = phi i32 [ %v1_10690, %dec_label_pc_1068c ], [ %v3_10690, %bb88 ]
  %v1_106a0 = phi i32 [ %v1_10694, %dec_label_pc_1068c ], [ %v3_10694, %bb88 ]
  %v4_10698 = udiv i32 %v1_106c4, 2
  %v6_10698 = icmp ult i32 %v1_1069c, %v4_10698
  br i1 %v6_10698, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_1069c = urem i32 %v1_106c4, 2
  %v4_1069c = icmp eq i32 %v3_1069c, 0
  %v6_1069c = sub i32 %v1_1069c, %v4_10698
  br i1 %v4_1069c, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_106a0 = udiv i32 %v1_106c0, 2
  %v6_106a0 = or i32 %v1_106a0, %v5_106a0
  store i32 %v6_106a0, i32* @r2, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_106a8 = phi i32 [ %v6_1069c, %bb89 ], [ %v1_1069c, %.thread7 ], [ %v6_1069c, %bb90 ]
  %v1_106ac = phi i32 [ %v1_106a0, %bb89 ], [ %v1_106a0, %.thread7 ], [ %v6_106a0, %bb90 ]
  %v4_106a4 = udiv i32 %v1_106c4, 4
  %v6_106a4 = icmp ult i32 %v1_106a8, %v4_106a4
  br i1 %v6_106a4, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_106a8 = and i32 %v1_106c4, 2
  %v4_106a8 = icmp eq i32 %v3_106a8, 0
  %v6_106a8 = sub i32 %v1_106a8, %v4_106a4
  br i1 %v4_106a8, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_106ac = udiv i32 %v1_106c0, 4
  %v6_106ac = or i32 %v1_106ac, %v5_106ac
  store i32 %v6_106ac, i32* @r2, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_106b4 = phi i32 [ %v6_106a8, %bb91 ], [ %v1_106a8, %.thread8 ], [ %v6_106a8, %bb92 ]
  %v1_106b8 = phi i32 [ %v1_106ac, %bb91 ], [ %v1_106ac, %.thread8 ], [ %v6_106ac, %bb92 ]
  %v4_106b0 = udiv i32 %v1_106c4, 8
  %v6_106b0 = icmp ult i32 %v1_106b4, %v4_106b0
  br i1 %v6_106b0, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_106b4 = and i32 %v1_106c4, 4
  %v4_106b4 = icmp eq i32 %v3_106b4, 0
  %v6_106b4 = sub i32 %v1_106b4, %v4_106b0
  br i1 %v4_106b4, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_106b8 = udiv i32 %v1_106c0, 8
  %v6_106b8 = or i32 %v1_106b8, %v5_106b8
  store i32 %v6_106b8, i32* @r2, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_106cc = phi i32 [ %v1_106b8, %bb93 ], [ %v1_106b8, %.thread9 ], [ %v6_106b8, %bb94 ]
  %v0_106bc = phi i32 [ %v6_106b4, %bb93 ], [ %v1_106b4, %.thread9 ], [ %v6_106b4, %bb94 ]
  %v2_106bc = icmp eq i32 %v0_106bc, 0
  br i1 %v2_106bc, label %dec_label_pc_106cc, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_106c0, 16
  br i1 %tmp142, label %dec_label_pc_106cc, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_106c0 = udiv i32 %v1_106c0, 16
  %v4_106c4 = udiv i32 %v1_106c4, 16
  br label %dec_label_pc_1068c

dec_label_pc_106cc:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_106cc

dec_label_pc_106d4:                               ; preds = %dec_label_pc_10640
  %v9_10640 = icmp eq i32 %v0_10640, %v0_10634
  %. = zext i1 %v9_10640 to i32
  ret i32 %.

dec_label_pc_106e0:                               ; preds = %dec_label_pc_10648
  %v2_106e0 = icmp ugt i32 %v0_10634, 65535
  br i1 %v2_106e0, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_106e0
  %v2_106e4 = and i32 %v0_10634, 32768
  %v3_106e4 = icmp eq i32 %v2_106e4, 0
  %v4_106e4 = udiv i32 %v0_10634, 65536
  br i1 %v3_106e4, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_106e0
  %v0_106f065 = phi i32 [ %v0_10634, %dec_label_pc_106e0 ], [ %v4_106e4, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_106f4 = phi i32 [ %v0_106f065, %.thread16 ], [ %v4_106e4, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  store i32 %storemerge, i32* @r2, align 4
  %v2_106f0 = icmp ugt i32 %v1_106f4, 255
  br i1 %v2_106f0, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_106f4 = and i32 %v1_106f4, 128
  %v3_106f4 = icmp eq i32 %v2_106f4, 0
  %v4_106f4 = udiv i32 %v1_106f4, 256
  br i1 %v3_106f4, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_106f8 = or i32 %storemerge, 8
  store i32 %v2_106f8, i32* @r2, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_10704 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_106f8, %bb102 ]
  %v1_10700 = phi i32 [ %v1_106f4, %bb100 ], [ %v4_106f4, %bb101 ], [ %v4_106f4, %bb102 ]
  %v2_106fc = icmp ugt i32 %v1_10700, 15
  br i1 %v2_106fc, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_10700 = and i32 %v1_10700, 8
  %v3_10700 = icmp eq i32 %v2_10700, 0
  %v4_10700 = udiv i32 %v1_10700, 16
  br i1 %v3_10700, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_10704 = add nsw i32 %v1_10704, 4
  store i32 %v2_10704, i32* @r2, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_1070c = phi i32 [ %v1_10704, %.thread17 ], [ %v1_10704, %bb103 ], [ %v2_10704, %bb104 ]
  %v5_10710 = phi i32 [ %v1_10700, %.thread17 ], [ %v4_10700, %bb103 ], [ %v4_10700, %bb104 ]
  %v2_10708 = icmp ugt i32 %v5_10710, 3
  %v7_10708 = icmp eq i32 %v5_10710, 4
  %v2_1070c = xor i1 %v7_10708, true
  %v3_1070c = and i1 %v2_10708, %v2_1070c
  br i1 %v3_1070c, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_1070c = add nsw i32 %v4_1070c, 3
  store i32 %v5_1070c, i32* @r2, align 4
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_10710 = phi i32 [ %v4_1070c, %.thread18 ], [ %v5_1070c, %bb105 ]
  %v2_10710 = xor i1 %v2_10708, true
  %v3_10710 = or i1 %v7_10708, %v2_10710
  br i1 %v3_10710, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_10710 = udiv i32 %v5_10710, 2
  %v9_10710 = add i32 %v4_10710, %v8_10710
  store i32 %v9_10710, i32* @r2, align 4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_10714 = phi i32 [ %v4_10710, %bb106 ], [ %v9_10710, %bb107 ]
  %v6_10714 = lshr i32 %v0_10640, %v1_10714
  ret i32 %v6_10714

dec_label_pc_1071c:                               ; preds = %bb82
  %v0_1071c = load i32, i32* @lr, align 4
  %v0_10720 = call i32 @function_108f4()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_1071c)
  %v6_1072c = load i32, i32* @r1, align 4
  %v9_1072c = load i32, i32* @lr, align 4
  %v0_10730 = call i32 @function_10634()
  store i32 %v6_1072c, i32* @r2, align 4
  store i32 %v9_1072c, i32* @lr, align 4
  ret i32 %v0_10730

; uselistorder directives
  uselistorder i32 %v4_10710, { 1, 0 }
  uselistorder i1 %v7_10708, { 1, 0 }
  uselistorder i32 %v4_10700, { 1, 0 }
  uselistorder i32 %v1_10700, { 1, 0, 2, 3 }
  uselistorder i32 %v2_106f8, { 1, 0 }
  uselistorder i32 %v4_106f4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_106f4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_106e4, { 1, 0 }
  uselistorder i32 %v0_106bc, { 1, 0 }
  uselistorder i32 %v4_106b0, { 1, 0 }
  uselistorder i32 %v1_106b8, { 1, 2, 0 }
  uselistorder i32 %v4_106a4, { 1, 0 }
  uselistorder i32 %v1_106ac, { 1, 2, 0 }
  uselistorder i32 %v4_10698, { 1, 0 }
  uselistorder i32 %v1_106a0, { 1, 2, 0 }
  uselistorder i32 %v1_106c4, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10694, { 1, 0 }
  uselistorder i32 %v1_106c0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10680, { 1, 0 }
  uselistorder i32 %v3_1067c, { 1, 0 }
  uselistorder i32 %v1_1067c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10680, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1066c, { 1, 0 }
  uselistorder i32 %v4_10668, { 2, 1, 0 }
  uselistorder i32 %v1_1066c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10674.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_10640, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10634, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 91, 41, 42, 1, 2, 11, 43, 21, 20, 24, 44, 23, 45, 13, 12, 3, 26, 46, 25, 47, 49, 14, 48, 4, 50, 51, 27, 52, 28, 53, 0, 54, 55, 29, 56, 57, 59, 15, 58, 22, 60, 61, 62, 63, 30, 64, 31, 65, 67, 16, 66, 5, 68, 69, 70, 71, 32, 72, 33, 73, 34, 74, 75, 17, 6, 76, 35, 77, 36, 78, 80, 18, 79, 7, 8, 81, 82, 38, 83, 37, 84, 86, 19, 85, 9, 10, 87, 88, 40, 89, 39, 90 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_106cc, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10688, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10674thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10744(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10744:
  store i32 %arg1, i32* @r0, align 4
  %v1_10744 = add i32 %arg2, -1
  store i32 %v1_10744, i32* @r2, align 4
  %v2_10744 = icmp eq i32 %arg2, 0
  br i1 %v2_10744, label %dec_label_pc_10800, label %dec_label_pc_1074c

dec_label_pc_1074c:                               ; preds = %dec_label_pc_10744
  %v7_10744 = icmp eq i32 %arg2, 1
  br i1 %v7_10744, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_1074c
  %v1_1074c = load i32, i32* @r0, align 4
  %v10_1074c = icmp eq i32 %v1_1074c, %arg2
  br i1 %v10_1074c, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_1074c, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_1074c = icmp ult i32 %v1_1074c, %arg2
  br i1 %v4_1074c, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_10754 = and i32 %v1_10744, %arg2
  %v8_10754 = icmp eq i32 %v6_10754, 0
  br i1 %v8_10754, label %.thread67, label %dec_label_pc_10764.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_10758 = phi i32 [ %v1_1074c, %bb75 ], [ 0, %.thread65 ]
  %v3_10758 = and i32 %v1_10758, %v1_10744
  br label %bb76

dec_label_pc_10764.preheader:                     ; preds = %bb75
  %v2_1076499 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1076499, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_107f4, %bb74, %bb89, %bb84, %dec_label_pc_107c4, %.thread67
  %v5_1075c = phi i32 [ %v1_1074c, %bb74 ], [ %v3_10758, %.thread67 ], [ %v1_107a0.v6_107a0.v6_107a8.v6_107b0, %dec_label_pc_107c4 ], [ 0, %bb84 ], [ %v1_107f8, %dec_label_pc_107f4 ], [ %v2_107f4, %bb89 ]
  ret i32 %v5_1075c

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_10764.preheader
  %v0_10778.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_10764.preheader ], [ %v4_1076c, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_10764.preheader ], [ %v2_1077011, %.thread1.thread9 ]
  br label %dec_label_pc_10778thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_10764.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1077011, %.thread1.thread9 ], [ 0, %dec_label_pc_10764.preheader ]
  %v0_10778.pr33100 = phi i32 [ %v4_1076c, %.thread1.thread9 ], [ %arg2, %dec_label_pc_10764.preheader ]
  %v4_10768 = icmp ult i32 %v0_10778.pr33100, %v1_1074c
  br i1 %v4_10768, label %bb78, label %dec_label_pc_10778thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_1076c = and i32 %v0_10778.pr33100, 268435456
  %v3_1076c = icmp eq i32 %v2_1076c, 0
  %v4_1076c = mul i32 %v0_10778.pr33100, 16
  br i1 %v3_1076c, label %.thread1.thread9, label %dec_label_pc_10778.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1077011 = add i32 %storemerge101, 4
  %v2_10764 = icmp ugt i32 %v4_1076c, 268435455
  br i1 %v2_10764, label %.thread, label %bb77

dec_label_pc_10778thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_10778thread-pre-split.loopexit

dec_label_pc_10778thread-pre-split.loopexit:      ; preds = %dec_label_pc_10778thread-pre-split.loopexit.loopexit, %.thread
  %v0_10778.pr3398 = phi i32 [ %v0_10778.pr33.lcssa, %.thread ], [ %v0_10778.pr33100, %dec_label_pc_10778thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_10778thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10778thread-pre-split

dec_label_pc_10778thread-pre-split:               ; preds = %.thread4, %dec_label_pc_10778thread-pre-split.loopexit
  %v1_1078439 = phi i32 [ %storemerge95, %dec_label_pc_10778thread-pre-split.loopexit ], [ %v2_10784, %.thread4 ]
  %v0_10778.pr = phi i32 [ %v0_10778.pr3398, %dec_label_pc_10778thread-pre-split.loopexit ], [ %v3_10780, %.thread4 ]
  br label %dec_label_pc_10778

dec_label_pc_10778.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_10778

dec_label_pc_10778:                               ; preds = %dec_label_pc_10778.loopexit, %dec_label_pc_10778thread-pre-split
  %v0_1078c.pr = phi i32 [ %v1_1078439, %dec_label_pc_10778thread-pre-split ], [ %storemerge101, %dec_label_pc_10778.loopexit ]
  %v1_10780 = phi i32 [ %v0_10778.pr, %dec_label_pc_10778thread-pre-split ], [ %v4_1076c, %dec_label_pc_10778.loopexit ]
  %v2_10778 = icmp slt i32 %v1_10780, 0
  br i1 %v2_10778, label %dec_label_pc_1078c, label %bb79

bb79:                                             ; preds = %dec_label_pc_10778
  %v4_1077c = icmp ult i32 %v1_10780, %v1_1074c
  br i1 %v4_1077c, label %.thread4, label %dec_label_pc_1078c

.thread4:                                         ; preds = %bb79
  %v3_10780 = mul i32 %v1_10780, 2
  %v2_10784 = add i32 %v0_1078c.pr, 1
  br label %dec_label_pc_10778thread-pre-split

dec_label_pc_1078c:                               ; preds = %bb79, %dec_label_pc_10778
  %v2_1078c = add i32 %v0_1078c.pr, -3
  store i32 %v2_1078c, i32* @r2, align 4
  %v5_10790 = icmp slt i32 %v0_1078c.pr, 3
  br i1 %v5_10790, label %dec_label_pc_107d0, label %dec_label_pc_10794

dec_label_pc_10794:                               ; preds = %dec_label_pc_1078c, %bb83
  %v6_107bc = phi i32 [ %v0_107c4, %bb83 ], [ %v2_1078c, %dec_label_pc_1078c ]
  %v1_10798 = phi i32 [ %v1_107a0.v6_107a0.v6_107a8.v6_107b0, %bb83 ], [ %v1_1074c, %dec_label_pc_1078c ]
  %v3_107b812 = phi i32 [ %v3_107b8, %bb83 ], [ %v1_10780, %dec_label_pc_1078c ]
  %v3_10794 = icmp ult i32 %v1_10798, %v3_107b812
  %v3_10798 = select i1 %v3_10794, i32 0, i32 %v3_107b812
  %v1_107a0 = sub i32 %v1_10798, %v3_10798
  %v4_1079c = udiv i32 %v3_107b812, 2
  %v6_1079c = icmp ult i32 %v1_107a0, %v4_1079c
  %v6_107a0 = select i1 %v6_1079c, i32 0, i32 %v4_1079c
  %v1_107a0.v6_107a0 = sub i32 %v1_107a0, %v6_107a0
  %.demorgan = and i1 %v3_10794, %v6_1079c
  %v4_107a4 = udiv i32 %v3_107b812, 4
  %v6_107a4 = icmp ult i32 %v1_107a0.v6_107a0, %v4_107a4
  %v6_107a8 = select i1 %v6_107a4, i32 0, i32 %v4_107a4
  %v1_107a0.v6_107a0.v6_107a8 = sub i32 %v1_107a0.v6_107a0, %v6_107a8
  %.demorgan71 = and i1 %.demorgan, %v6_107a4
  %v4_107ac = udiv i32 %v3_107b812, 8
  %v6_107ac = icmp ult i32 %v1_107a0.v6_107a0.v6_107a8, %v4_107ac
  %v6_107b0 = select i1 %v6_107ac, i32 0, i32 %v4_107ac
  %v1_107a0.v6_107a0.v6_107a8.v6_107b0 = sub i32 %v1_107a0.v6_107a0.v6_107a8, %v6_107b0
  %.demorgan72 = and i1 %.demorgan71, %v6_107ac
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_10794
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_10794, %bb80
  %v2_107b4 = add i32 %v1_107a0.v6_107a0.v6_107a8.v6_107b0, -1
  %v4_107b4 = sub i32 0, %v1_107a0.v6_107a0.v6_107a8.v6_107b0
  %v5_107b4 = and i32 %v1_107a0.v6_107a0.v6_107a8.v6_107b0, %v4_107b4
  %v3_107b8 = udiv i32 %v3_107b812, 16
  %v5_107bc = icmp slt i32 %v1_107a0.v6_107a0.v6_107a8.v6_107b0, 1
  br i1 %v5_107bc, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_107bc = add i32 %v6_107bc, -4
  store i32 %v7_107bc, i32* @r2, align 4
  %v9_107bc = sub i32 3, %v6_107bc
  %v10_107bc = and i32 %v9_107bc, %v6_107bc
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_107c4 = phi i32 [ %v6_107bc, %bb81 ], [ %v7_107bc, %bb82 ]
  %v0_107c015.in = phi i32 [ %v2_107b4, %bb81 ], [ %v7_107bc, %bb82 ]
  %v1_107c014.in = phi i32 [ %v5_107b4, %bb81 ], [ %v10_107bc, %bb82 ]
  %v1_107c014 = icmp slt i32 %v1_107c014.in, 0
  %v0_107c015 = icmp slt i32 %v0_107c015.in, 0
  %v2_107c0 = xor i1 %v0_107c015, %v1_107c014
  br i1 %v2_107c0, label %dec_label_pc_107c4, label %dec_label_pc_10794

dec_label_pc_107c4:                               ; preds = %bb83
  %v1_107c4 = urem i32 %v0_107c4, 4
  %v2_107c4 = icmp eq i32 %v1_107c4, 0
  br i1 %v2_107c4, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_107c4
  %v3_107c8 = icmp eq i32 %v1_107a0.v6_107a0.v6_107a8.v6_107b0, 0
  br i1 %v3_107c8, label %bb76, label %dec_label_pc_107d0

dec_label_pc_107d0:                               ; preds = %bb84, %dec_label_pc_1078c
  %v0_107e4 = phi i32 [ %v3_107b8, %bb84 ], [ %v1_10780, %dec_label_pc_1078c ]
  %v1_107e0 = phi i32 [ %v1_107a0.v6_107a0.v6_107a8.v6_107b0, %bb84 ], [ %v1_1074c, %dec_label_pc_1078c ]
  %v0_107d0 = phi i32 [ %v0_107c4, %bb84 ], [ %v2_1078c, %dec_label_pc_1078c ]
  %v5_107d4 = icmp slt i32 %v0_107d0, -2
  br i1 %v5_107d4, label %dec_label_pc_107f4, label %dec_label_pc_107d8

dec_label_pc_107d8:                               ; preds = %dec_label_pc_107d0
  %v8_107d0 = icmp eq i32 %v0_107d0, -2
  br i1 %v8_107d0, label %dec_label_pc_107e8, label %dec_label_pc_107dc

dec_label_pc_107dc:                               ; preds = %dec_label_pc_107d8
  %v3_107dc = icmp ult i32 %v1_107e0, %v0_107e4
  br i1 %v3_107dc, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_107dc
  %v2_107dc = sub i32 %v1_107e0, %v0_107e4
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_107dc, %bb85
  %v0_107e852 = phi i32 [ %v1_107e0, %dec_label_pc_107dc ], [ %v2_107dc, %bb85 ]
  %v3_107e4 = udiv i32 %v0_107e4, 2
  br label %dec_label_pc_107e8

dec_label_pc_107e8:                               ; preds = %dec_label_pc_107d8, %bb86
  %v0_107f0 = phi i32 [ %v0_107e4, %dec_label_pc_107d8 ], [ %v3_107e4, %bb86 ]
  %v1_107ec = phi i32 [ %v1_107e0, %dec_label_pc_107d8 ], [ %v0_107e852, %bb86 ]
  %v3_107e8 = icmp ult i32 %v1_107ec, %v0_107f0
  br i1 %v3_107e8, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_107e8
  %v2_107e8 = sub i32 %v1_107ec, %v0_107f0
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_107e8, %bb87
  %v0_107f455 = phi i32 [ %v1_107ec, %dec_label_pc_107e8 ], [ %v2_107e8, %bb87 ]
  %v3_107f0 = udiv i32 %v0_107f0, 2
  br label %dec_label_pc_107f4

dec_label_pc_107f4:                               ; preds = %dec_label_pc_107d0, %bb88
  %v2_107f8 = phi i32 [ %v0_107e4, %dec_label_pc_107d0 ], [ %v3_107f0, %bb88 ]
  %v1_107f8 = phi i32 [ %v1_107e0, %dec_label_pc_107d0 ], [ %v0_107f455, %bb88 ]
  %v3_107f4 = icmp ult i32 %v1_107f8, %v2_107f8
  br i1 %v3_107f4, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_107f4
  %v2_107f4 = sub i32 %v1_107f8, %v2_107f8
  br label %bb76

dec_label_pc_10800:                               ; preds = %dec_label_pc_10744
  %v0_10800 = load i32, i32* @lr, align 4
  %v0_10804 = call i32 @function_108f4()
  call void @__pseudo_branch(i32 %v0_10800)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_107f8, { 1, 2, 0 }
  uselistorder i32 %v0_107e4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_107c4, { 1, 0, 2 }
  uselistorder i32 %v7_107bc, { 1, 0, 2 }
  uselistorder i32 %v3_107b8, { 1, 0 }
  uselistorder i32 %v1_107a0.v6_107a0.v6_107a8.v6_107b0, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_107ac, { 1, 0 }
  uselistorder i32 %v4_107a4, { 1, 0 }
  uselistorder i32 %v4_1079c, { 1, 0 }
  uselistorder i32 %v6_107bc, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1078c, { 1, 0, 2 }
  uselistorder i32 %v1_10780, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_1076c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_10778.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1074c, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_107f4, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_107e8, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_10794, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_10810(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10810:
  store i32 %arg1, i32* @r0, align 4
  %v2_10810 = icmp eq i32 %arg2, 0
  br i1 %v2_10810, label %dec_label_pc_108e4, label %dec_label_pc_10818

dec_label_pc_10818:                               ; preds = %dec_label_pc_10810
  %v1_10810 = icmp slt i32 %arg2, 0
  br i1 %v1_10810, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_10818
  %v2_10818 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_10818, %bb
  %v4_10830 = phi i32 [ %arg2, %dec_label_pc_10818 ], [ %v2_10818, %bb ]
  %v0_1081c = load i32, i32* @r0, align 4
  %v1_1081c = icmp slt i32 %v0_1081c, 0
  br i1 %v1_1081c, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_10820 = sub i32 0, %v0_1081c
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_10828 = phi i32 [ %v0_1081c, %bb79 ], [ %v2_10820, %bb80 ]
  %v1_10824 = add i32 %v4_10830, -1
  %v7_10824 = icmp eq i32 %v4_10830, 1
  br i1 %v7_10824, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_10828 = icmp eq i32 %v1_10828, %v4_10830
  br i1 %v10_10828, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_10828 = icmp ult i32 %v1_10828, %v4_10830
  br i1 %v4_10828, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_10830 = and i32 %v1_10824, %v4_10830
  %v8_10830 = icmp eq i32 %v6_10830, 0
  br i1 %v8_10830, label %.thread72, label %dec_label_pc_10840.preheader

dec_label_pc_10840.preheader:                     ; preds = %bb84
  %v2_10840109 = icmp ugt i32 %v4_10830, 268435455
  br i1 %v2_10840109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1083464 = phi i32 [ %v1_10828, %bb84 ], [ 0, %.thread70 ]
  %v3_10834 = and i32 %v1_1083464, %v1_10824
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_10840.preheader
  %v0_10854.pr35.lcssa = phi i32 [ %v4_10830, %dec_label_pc_10840.preheader ], [ %v4_10848, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_10840.preheader ], [ %v2_1084c9, %.thread2.thread7 ]
  br label %dec_label_pc_10854thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_10840.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_1084c9, %.thread2.thread7 ], [ 0, %dec_label_pc_10840.preheader ]
  %v0_10854.pr35110 = phi i32 [ %v4_10848, %.thread2.thread7 ], [ %v4_10830, %dec_label_pc_10840.preheader ]
  %v4_10844 = icmp ult i32 %v0_10854.pr35110, %v1_10828
  br i1 %v4_10844, label %bb86, label %dec_label_pc_10854thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_10848 = and i32 %v0_10854.pr35110, 268435456
  %v3_10848 = icmp eq i32 %v2_10848, 0
  %v4_10848 = mul i32 %v0_10854.pr35110, 16
  br i1 %v3_10848, label %.thread2.thread7, label %dec_label_pc_10854.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_1084c9 = add i32 %storemerge111, 4
  %v2_10840 = icmp ugt i32 %v4_10848, 268435455
  br i1 %v2_10840, label %.thread1, label %bb85

dec_label_pc_10854thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_10854thread-pre-split.loopexit

dec_label_pc_10854thread-pre-split.loopexit:      ; preds = %dec_label_pc_10854thread-pre-split.loopexit.loopexit, %.thread1
  %v0_10854.pr35108 = phi i32 [ %v0_10854.pr35.lcssa, %.thread1 ], [ %v0_10854.pr35110, %dec_label_pc_10854thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_10854thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10854thread-pre-split

dec_label_pc_10854thread-pre-split:               ; preds = %.thread4, %dec_label_pc_10854thread-pre-split.loopexit
  %v1_1086041 = phi i32 [ %storemerge105, %dec_label_pc_10854thread-pre-split.loopexit ], [ %v2_10860, %.thread4 ]
  %v2_1085836 = phi i32 [ %v1_10828, %dec_label_pc_10854thread-pre-split.loopexit ], [ %v2_10858, %.thread4 ]
  %v0_10854.pr = phi i32 [ %v0_10854.pr35108, %dec_label_pc_10854thread-pre-split.loopexit ], [ %v3_1085c, %.thread4 ]
  br label %dec_label_pc_10854

dec_label_pc_10854.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_10854

dec_label_pc_10854:                               ; preds = %dec_label_pc_10854.loopexit, %dec_label_pc_10854thread-pre-split
  %v0_10868.pr = phi i32 [ %v1_1086041, %dec_label_pc_10854thread-pre-split ], [ %storemerge111, %dec_label_pc_10854.loopexit ]
  %v2_10858 = phi i32 [ %v2_1085836, %dec_label_pc_10854thread-pre-split ], [ %v1_10828, %dec_label_pc_10854.loopexit ]
  %v1_1085c = phi i32 [ %v0_10854.pr, %dec_label_pc_10854thread-pre-split ], [ %v4_10848, %dec_label_pc_10854.loopexit ]
  %v2_10854 = icmp slt i32 %v1_1085c, 0
  br i1 %v2_10854, label %dec_label_pc_10868, label %bb87

bb87:                                             ; preds = %dec_label_pc_10854
  %v4_10858 = icmp ult i32 %v1_1085c, %v2_10858
  br i1 %v4_10858, label %.thread4, label %dec_label_pc_10868

.thread4:                                         ; preds = %bb87
  %v3_1085c = mul i32 %v1_1085c, 2
  %v2_10860 = add i32 %v0_10868.pr, 1
  br label %dec_label_pc_10854thread-pre-split

dec_label_pc_10868:                               ; preds = %bb87, %dec_label_pc_10854
  %v2_10868 = add i32 %v0_10868.pr, -3
  %v5_1086c = icmp slt i32 %v0_10868.pr, 3
  br i1 %v5_1086c, label %dec_label_pc_108ac, label %dec_label_pc_10870

dec_label_pc_10870:                               ; preds = %dec_label_pc_10868, %bb91
  %v6_10898 = phi i32 [ %v0_108a0, %bb91 ], [ %v2_10868, %dec_label_pc_10868 ]
  %v1_10874 = phi i32 [ %v1_1087c.v6_1087c.v6_10884.v6_1088c, %bb91 ], [ %v2_10858, %dec_label_pc_10868 ]
  %v3_1089410 = phi i32 [ %v3_10894, %bb91 ], [ %v1_1085c, %dec_label_pc_10868 ]
  %v3_10870 = icmp ult i32 %v1_10874, %v3_1089410
  %v3_10874 = select i1 %v3_10870, i32 0, i32 %v3_1089410
  %v1_1087c = sub i32 %v1_10874, %v3_10874
  %v4_10878 = udiv i32 %v3_1089410, 2
  %v6_10878 = icmp ult i32 %v1_1087c, %v4_10878
  %v6_1087c = select i1 %v6_10878, i32 0, i32 %v4_10878
  %v1_1087c.v6_1087c = sub i32 %v1_1087c, %v6_1087c
  %.demorgan = and i1 %v3_10870, %v6_10878
  %v4_10880 = udiv i32 %v3_1089410, 4
  %v6_10880 = icmp ult i32 %v1_1087c.v6_1087c, %v4_10880
  %v6_10884 = select i1 %v6_10880, i32 0, i32 %v4_10880
  %v1_1087c.v6_1087c.v6_10884 = sub i32 %v1_1087c.v6_1087c, %v6_10884
  %.demorgan76 = and i1 %.demorgan, %v6_10880
  %v4_10888 = udiv i32 %v3_1089410, 8
  %v6_10888 = icmp ult i32 %v1_1087c.v6_1087c.v6_10884, %v4_10888
  %v6_1088c = select i1 %v6_10888, i32 0, i32 %v4_10888
  %v1_1087c.v6_1087c.v6_10884.v6_1088c = sub i32 %v1_1087c.v6_1087c.v6_10884, %v6_1088c
  %.demorgan77 = and i1 %.demorgan76, %v6_10888
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_10870
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_10870, %bb88
  %v2_10890 = add i32 %v1_1087c.v6_1087c.v6_10884.v6_1088c, -1
  %v4_10890 = sub i32 0, %v1_1087c.v6_1087c.v6_10884.v6_1088c
  %v5_10890 = and i32 %v1_1087c.v6_1087c.v6_10884.v6_1088c, %v4_10890
  %v3_10894 = udiv i32 %v3_1089410, 16
  %v5_10898 = icmp slt i32 %v1_1087c.v6_1087c.v6_10884.v6_1088c, 1
  br i1 %v5_10898, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_10898 = add i32 %v6_10898, -4
  %v9_10898 = sub i32 3, %v6_10898
  %v10_10898 = and i32 %v9_10898, %v6_10898
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_108a0 = phi i32 [ %v6_10898, %bb89 ], [ %v7_10898, %bb90 ]
  %v0_1089c13.in = phi i32 [ %v2_10890, %bb89 ], [ %v7_10898, %bb90 ]
  %v1_1089c12.in = phi i32 [ %v5_10890, %bb89 ], [ %v10_10898, %bb90 ]
  %v1_1089c12 = icmp slt i32 %v1_1089c12.in, 0
  %v0_1089c13 = icmp slt i32 %v0_1089c13.in, 0
  %v2_1089c = xor i1 %v0_1089c13, %v1_1089c12
  br i1 %v2_1089c, label %dec_label_pc_108a0, label %dec_label_pc_10870

dec_label_pc_108a0:                               ; preds = %bb91
  %v1_108a0 = urem i32 %v0_108a0, 4
  %v2_108a0 = icmp eq i32 %v1_108a0, 0
  br i1 %v2_108a0, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_108a0
  %v3_108a4 = icmp eq i32 %v1_1087c.v6_1087c.v6_10884.v6_1088c, 0
  br i1 %v3_108a4, label %.thread6, label %dec_label_pc_108ac

dec_label_pc_108ac:                               ; preds = %bb92, %dec_label_pc_10868
  %v0_108c0 = phi i32 [ %v3_10894, %bb92 ], [ %v1_1085c, %dec_label_pc_10868 ]
  %v1_108bc = phi i32 [ %v1_1087c.v6_1087c.v6_10884.v6_1088c, %bb92 ], [ %v2_10858, %dec_label_pc_10868 ]
  %v0_108ac = phi i32 [ %v0_108a0, %bb92 ], [ %v2_10868, %dec_label_pc_10868 ]
  %v5_108b0 = icmp slt i32 %v0_108ac, -2
  br i1 %v5_108b0, label %dec_label_pc_108d0, label %dec_label_pc_108b4

dec_label_pc_108b4:                               ; preds = %dec_label_pc_108ac
  %v8_108ac = icmp eq i32 %v0_108ac, -2
  br i1 %v8_108ac, label %dec_label_pc_108c4, label %dec_label_pc_108b8

dec_label_pc_108b8:                               ; preds = %dec_label_pc_108b4
  %v3_108b8 = icmp ult i32 %v1_108bc, %v0_108c0
  br i1 %v3_108b8, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_108b8
  %v2_108b8 = sub i32 %v1_108bc, %v0_108c0
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_108b8, %bb93
  %v0_108c454 = phi i32 [ %v1_108bc, %dec_label_pc_108b8 ], [ %v2_108b8, %bb93 ]
  %v3_108c0 = udiv i32 %v0_108c0, 2
  br label %dec_label_pc_108c4

dec_label_pc_108c4:                               ; preds = %dec_label_pc_108b4, %bb94
  %v0_108cc = phi i32 [ %v0_108c0, %dec_label_pc_108b4 ], [ %v3_108c0, %bb94 ]
  %v1_108c8 = phi i32 [ %v1_108bc, %dec_label_pc_108b4 ], [ %v0_108c454, %bb94 ]
  %v3_108c4 = icmp ult i32 %v1_108c8, %v0_108cc
  br i1 %v3_108c4, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_108c4
  %v2_108c4 = sub i32 %v1_108c8, %v0_108cc
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_108c4, %bb95
  %v0_108d057 = phi i32 [ %v1_108c8, %dec_label_pc_108c4 ], [ %v2_108c4, %bb95 ]
  %v3_108cc = udiv i32 %v0_108cc, 2
  br label %dec_label_pc_108d0

dec_label_pc_108d0:                               ; preds = %dec_label_pc_108ac, %bb96
  %v2_108d4 = phi i32 [ %v0_108c0, %dec_label_pc_108ac ], [ %v3_108cc, %bb96 ]
  %v1_108d4 = phi i32 [ %v1_108bc, %dec_label_pc_108ac ], [ %v0_108d057, %bb96 ]
  %v3_108d0 = icmp ult i32 %v1_108d4, %v2_108d4
  br i1 %v3_108d0, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_108d0
  %v2_108d0 = sub i32 %v1_108d4, %v2_108d4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_108d0, %bb83, %.thread72, %dec_label_pc_108a0, %bb92, %bb97
  %v1_108dc = phi i32 [ %v1_1087c.v6_1087c.v6_10884.v6_1088c, %dec_label_pc_108a0 ], [ 0, %bb92 ], [ %v1_108d4, %dec_label_pc_108d0 ], [ %v2_108d0, %bb97 ], [ %v3_10834, %.thread72 ], [ %v1_10828, %bb83 ]
  br i1 %v1_1081c, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_108dc = sub i32 0, %v1_108dc
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_108e0 = phi i32 [ %v1_108dc, %.thread6 ], [ %v2_108dc, %bb98 ]
  ret i32 %v1_108e0

dec_label_pc_108e4:                               ; preds = %dec_label_pc_10810
  %v0_108e4 = load i32, i32* @lr, align 4
  %v0_108e8 = call i32 @function_108f4()
  call void @__pseudo_branch(i32 %v0_108e4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_108c0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_108a0, { 1, 0, 2 }
  uselistorder i32 %v7_10898, { 1, 0 }
  uselistorder i32 %v3_10894, { 1, 0 }
  uselistorder i32 %v1_1087c.v6_1087c.v6_10884.v6_1088c, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_10888, { 1, 0 }
  uselistorder i32 %v4_10880, { 1, 0 }
  uselistorder i32 %v4_10878, { 1, 0 }
  uselistorder i32 %v6_10898, { 3, 0, 2, 1 }
  uselistorder i32 %v2_10868, { 1, 0 }
  uselistorder i32 %v1_1085c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_10858, { 1, 0, 3, 2 }
  uselistorder i32 %v4_10848, { 1, 0, 3, 2 }
  uselistorder i32 %v0_10854.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10828, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_10830, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_108f4, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_108d0, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_108c4, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_10870, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_108f4() local_unnamed_addr {
dec_label_pc_108f4:
  %v1_108f4 = load i32, i32* @r0, align 4
  ret i32 %v1_108f4
}

define i32 @function_108f8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_108f8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_108f8 = load i32, i32* @r2, align 4
  %v1_10908 = add i32 %arg2, -12
  store i32 %v6_108f8, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_10908, 2
  br i1 %tmp, label %dec_label_pc_10930, label %dec_label_pc_10928

dec_label_pc_10928:                               ; preds = %dec_label_pc_108f8
  %v0_10928 = call i32 @function_1096c()
  br label %dec_label_pc_1095c

dec_label_pc_10930:                               ; preds = %dec_label_pc_108f8
  %v2_10938 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_10938, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_10938, -4095
  br i1 %tmp8, label %dec_label_pc_1095c, label %dec_label_pc_10948

dec_label_pc_10948:                               ; preds = %dec_label_pc_10930
  %v0_10948 = call i32 @function_10f64()
  %v0_1094c = load i32, i32* %r4.global-to-local, align 4
  %v1_1094c = sub i32 0, %v0_1094c
  %v2_10950 = inttoptr i32 %v0_10948 to i32*
  store i32 %v1_1094c, i32* %v2_10950, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1095c

dec_label_pc_1095c:                               ; preds = %dec_label_pc_10948, %dec_label_pc_10930, %dec_label_pc_10928
  %storemerge = phi i32 [ %v0_10928, %dec_label_pc_10928 ], [ %v2_10938, %dec_label_pc_10930 ], [ -1, %dec_label_pc_10948 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_10938, { 1, 0, 2 }
}

define i32 @function_1096c() local_unnamed_addr {
dec_label_pc_1096c:
  %r4.global-to-local = alloca i32, align 4
  %v0_1098c = load i32, i32* @r0, align 4
  store i32 %v0_1098c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1098c, -4095
  br i1 %tmp, label %dec_label_pc_109a8, label %dec_label_pc_10998

dec_label_pc_10998:                               ; preds = %dec_label_pc_1096c
  %v0_10998 = call i32 @function_10f64()
  %v0_1099c = load i32, i32* %r4.global-to-local, align 4
  %v1_1099c = sub i32 0, %v0_1099c
  %v2_109a0 = inttoptr i32 %v0_10998 to i32*
  store i32 %v1_1099c, i32* %v2_109a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_109a8

dec_label_pc_109a8:                               ; preds = %dec_label_pc_1096c, %dec_label_pc_10998
  %v0_109a8 = phi i32 [ %v0_1098c, %dec_label_pc_1096c ], [ -1, %dec_label_pc_10998 ]
  ret i32 %v0_109a8

; uselistorder directives
  uselistorder i32 %v0_1098c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_109a8, { 1, 0 }
}

define i32 @function_109bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_109bc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109bc = load i32, i32* @r4, align 4
  store i32 %v3_109bc, i32* %stack_var_-8, align 4
  %v1_109c0 = call i32 @close(i32 %arg1)
  store i32 %v1_109c0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_109c0, -4095
  br i1 %tmp, label %dec_label_pc_109e0, label %dec_label_pc_109d0

dec_label_pc_109d0:                               ; preds = %dec_label_pc_109bc
  %v0_109d0 = call i32 @function_10f64()
  %v0_109d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_109d4 = sub i32 0, %v0_109d4
  %v2_109d8 = inttoptr i32 %v0_109d0 to i32*
  store i32 %v1_109d4, i32* %v2_109d8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_109e0

dec_label_pc_109e0:                               ; preds = %dec_label_pc_109bc, %dec_label_pc_109d0
  %v0_109e0 = phi i32 [ %v1_109c0, %dec_label_pc_109bc ], [ -1, %dec_label_pc_109d0 ]
  %v2_109e4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_109e4, i32* @r4, align 4
  ret i32 %v0_109e0

; uselistorder directives
  uselistorder i32 %v1_109c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_109e0, { 1, 0 }
}

define i32 @function_109e8() local_unnamed_addr {
dec_label_pc_109e8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109e8 = load i32, i32* @r4, align 4
  store i32 %v3_109e8, i32* %stack_var_-8, align 4
  %v0_109ec = call i32 @fork()
  store i32 %v0_109ec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_109ec, -4095
  br i1 %tmp, label %dec_label_pc_10a0c, label %dec_label_pc_109fc

dec_label_pc_109fc:                               ; preds = %dec_label_pc_109e8
  %v0_109fc = call i32 @function_10f64()
  %v0_10a00 = load i32, i32* %r4.global-to-local, align 4
  %v1_10a00 = sub i32 0, %v0_10a00
  %v2_10a04 = inttoptr i32 %v0_109fc to i32*
  store i32 %v1_10a00, i32* %v2_10a04, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a0c

dec_label_pc_10a0c:                               ; preds = %dec_label_pc_109e8, %dec_label_pc_109fc
  %v0_10a0c = phi i32 [ %v0_109ec, %dec_label_pc_109e8 ], [ -1, %dec_label_pc_109fc ]
  %v2_10a10 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a10, i32* @r4, align 4
  ret i32 %v0_10a0c

; uselistorder directives
  uselistorder i32 %v0_109ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a0c, { 1, 0 }
}

define i32 @function_10a14() local_unnamed_addr {
dec_label_pc_10a14:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a14 = load i32, i32* @r4, align 4
  store i32 %v3_10a14, i32* %stack_var_-8, align 4
  %v0_10a18 = call i32 @getpid()
  store i32 %v0_10a18, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10a18, -4095
  br i1 %tmp, label %dec_label_pc_10a38, label %dec_label_pc_10a28

dec_label_pc_10a28:                               ; preds = %dec_label_pc_10a14
  %v0_10a28 = call i32 @function_10f64()
  %v0_10a2c = load i32, i32* %r4.global-to-local, align 4
  %v1_10a2c = sub i32 0, %v0_10a2c
  %v2_10a30 = inttoptr i32 %v0_10a28 to i32*
  store i32 %v1_10a2c, i32* %v2_10a30, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a38

dec_label_pc_10a38:                               ; preds = %dec_label_pc_10a14, %dec_label_pc_10a28
  %v0_10a38 = phi i32 [ %v0_10a18, %dec_label_pc_10a14 ], [ -1, %dec_label_pc_10a28 ]
  %v2_10a3c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a3c, i32* @r4, align 4
  ret i32 %v0_10a38

; uselistorder directives
  uselistorder i32 %v0_10a18, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a38, { 1, 0 }
}

define i32 @function_10a40() local_unnamed_addr {
dec_label_pc_10a40:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a40 = load i32, i32* @r4, align 4
  store i32 %v3_10a40, i32* %stack_var_-8, align 4
  %v0_10a44 = call i32 @getppid()
  store i32 %v0_10a44, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10a44, -4095
  br i1 %tmp, label %dec_label_pc_10a64, label %dec_label_pc_10a54

dec_label_pc_10a54:                               ; preds = %dec_label_pc_10a40
  %v0_10a54 = call i32 @function_10f64()
  %v0_10a58 = load i32, i32* %r4.global-to-local, align 4
  %v1_10a58 = sub i32 0, %v0_10a58
  %v2_10a5c = inttoptr i32 %v0_10a54 to i32*
  store i32 %v1_10a58, i32* %v2_10a5c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a64

dec_label_pc_10a64:                               ; preds = %dec_label_pc_10a40, %dec_label_pc_10a54
  %v0_10a64 = phi i32 [ %v0_10a44, %dec_label_pc_10a40 ], [ -1, %dec_label_pc_10a54 ]
  %v2_10a68 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a68, i32* @r4, align 4
  ret i32 %v0_10a64

; uselistorder directives
  uselistorder i32 %v0_10a44, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a64, { 1, 0 }
}

define i32 @function_10a6c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a6c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10a6c = load i32, i32* @r3, align 4
  store i32 %v9_10a6c, i32* %stack_var_-4, align 4
  %v2_10a78 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10a78, i32* @r3, align 4
  %v2_10a88 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_10a88, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10a88, -4095
  br i1 %tmp, label %dec_label_pc_10aa8, label %dec_label_pc_10a98

dec_label_pc_10a98:                               ; preds = %dec_label_pc_10a6c
  %v0_10a98 = call i32 @function_10f64()
  %v0_10a9c = load i32, i32* %r4.global-to-local, align 4
  %v1_10a9c = sub i32 0, %v0_10a9c
  store i32 %v1_10a9c, i32* @r3, align 4
  %v2_10aa0 = inttoptr i32 %v0_10a98 to i32*
  store i32 %v1_10a9c, i32* %v2_10aa0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10aa8

dec_label_pc_10aa8:                               ; preds = %dec_label_pc_10a6c, %dec_label_pc_10a98
  %v0_10aa8 = phi i32 [ %v2_10a88, %dec_label_pc_10a6c ], [ -1, %dec_label_pc_10a98 ]
  ret i32 %v0_10aa8

; uselistorder directives
  uselistorder i32 %v2_10a88, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_10aa8, { 1, 0 }
}

define i32 @function_10abc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10abc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10abc = load i32, i32* @r4, align 4
  store i32 %v3_10abc, i32* %stack_var_-8, align 4
  %v2_10ac0 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_10ac4 = icmp eq i32 %v2_10ac0, -4096
  store i1 %v7_10ac4, i1* @cpsr_z, align 1
  store i32 %v2_10ac0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10ac0, -4095
  br i1 %tmp, label %dec_label_pc_10ae0, label %dec_label_pc_10ad0

dec_label_pc_10ad0:                               ; preds = %dec_label_pc_10abc
  %v0_10ad0 = call i32 @function_10f64()
  %v0_10ad4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10ad4 = sub i32 0, %v0_10ad4
  %v2_10ad8 = inttoptr i32 %v0_10ad0 to i32*
  store i32 %v1_10ad4, i32* %v2_10ad8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ae0

dec_label_pc_10ae0:                               ; preds = %dec_label_pc_10abc, %dec_label_pc_10ad0
  %v0_10ae0 = phi i32 [ %v2_10ac0, %dec_label_pc_10abc ], [ -1, %dec_label_pc_10ad0 ]
  %v2_10ae4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10ae4, i32* @r4, align 4
  ret i32 %v0_10ae0

; uselistorder directives
  uselistorder i32 %v2_10ac0, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_10ae0, { 1, 0 }
}

define i32 @function_10ae8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ae8:
  %r4.global-to-local = alloca i32, align 4
  %v6_10ae8 = load i32, i32* @r2, align 4
  %v1_10af8 = and i32 %arg2, 64
  store i32 %v1_10af8, i32* @r3, align 4
  %v2_10af8 = icmp eq i32 %v1_10af8, 0
  br i1 %v2_10af8, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_10ae8
  store i32 %v6_10ae8, i32* @r3, align 4
  %phitmp = urem i32 %v6_10ae8, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_10ae8, %bb
  %v0_10b08 = phi i32 [ 0, %dec_label_pc_10ae8 ], [ %phitmp, %bb ]
  store i32 %v0_10b08, i32* @r2, align 4
  %v4_10b10 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_10b14 = icmp eq i32 %v4_10b10, -4096
  store i1 %v7_10b14, i1* @cpsr_z, align 1
  store i32 %v4_10b10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10b10, -4095
  br i1 %tmp, label %dec_label_pc_10b30, label %dec_label_pc_10b20

dec_label_pc_10b20:                               ; preds = %.thread1
  %v0_10b20 = call i32 @function_10f64()
  %v0_10b24 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b24 = sub i32 0, %v0_10b24
  store i32 %v1_10b24, i32* @r3, align 4
  %v2_10b28 = inttoptr i32 %v0_10b20 to i32*
  store i32 %v1_10b24, i32* %v2_10b28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b30

dec_label_pc_10b30:                               ; preds = %.thread1, %dec_label_pc_10b20
  %v0_10b30 = phi i32 [ %v4_10b10, %.thread1 ], [ -1, %dec_label_pc_10b20 ]
  ret i32 %v0_10b30

; uselistorder directives
  uselistorder i32 %v4_10b10, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_10b30, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_10b44(i32 %arg1) local_unnamed_addr {
dec_label_pc_10b44:
  store i32 %arg1, i32* @r2, align 4
  %v0_10b4c = load i32, i32* @r0, align 4
  %v2_10b4c = inttoptr i32 %v0_10b4c to i8*
  %v3_10b4c = call i32 @function_10ae8(i8* %v2_10b4c, i32 577)
  %v0_10b50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10b50, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_10b44
  %v6_10b50 = and i32 %v3_10b4c, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_10b44, %bb
  %v7_10b50 = phi i32 [ %v3_10b4c, %dec_label_pc_10b44 ], [ %v6_10b50, %bb ]
  ret i32 %v7_10b50

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_10b54(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10b54:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b54 = load i32, i32* @r4, align 4
  store i32 %v3_10b54, i32* %stack_var_-8, align 4
  %v2_10b5c = load i32, i32* @r2, align 4
  %v3_10b5c = load i32, i32* @r3, align 4
  %v4_10b5c = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_10b5c, i32 %v3_10b5c, i32 0)
  store i32 %v4_10b5c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10b5c, -4095
  br i1 %tmp, label %dec_label_pc_10b7c, label %dec_label_pc_10b6c

dec_label_pc_10b6c:                               ; preds = %dec_label_pc_10b54
  %v0_10b6c = call i32 @function_10f64()
  %v0_10b70 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b70 = sub i32 0, %v0_10b70
  %v2_10b74 = inttoptr i32 %v0_10b6c to i32*
  store i32 %v1_10b70, i32* %v2_10b74, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b7c

dec_label_pc_10b7c:                               ; preds = %dec_label_pc_10b54, %dec_label_pc_10b6c
  %v0_10b7c = phi i32 [ %v4_10b5c, %dec_label_pc_10b54 ], [ -1, %dec_label_pc_10b6c ]
  %v2_10b80 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10b80, i32* @r4, align 4
  ret i32 %v0_10b7c

; uselistorder directives
  uselistorder i32 %v4_10b5c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b7c, { 1, 0 }
}

define i32 @function_10b84(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b84:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b84 = load i32, i32* @r4, align 4
  store i32 %v3_10b84, i32* %stack_var_-8, align 4
  %v4_10b88 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_10b88, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10b88, -4095
  br i1 %tmp, label %dec_label_pc_10ba8, label %dec_label_pc_10b98

dec_label_pc_10b98:                               ; preds = %dec_label_pc_10b84
  %v0_10b98 = call i32 @function_10f64()
  %v0_10b9c = load i32, i32* %r4.global-to-local, align 4
  %v1_10b9c = sub i32 0, %v0_10b9c
  %v2_10ba0 = inttoptr i32 %v0_10b98 to i32*
  store i32 %v1_10b9c, i32* %v2_10ba0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ba8

dec_label_pc_10ba8:                               ; preds = %dec_label_pc_10b84, %dec_label_pc_10b98
  %v0_10ba8 = phi i32 [ %v4_10b88, %dec_label_pc_10b84 ], [ -1, %dec_label_pc_10b98 ]
  %v2_10bac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10bac, i32* @r4, align 4
  ret i32 %v0_10ba8

; uselistorder directives
  uselistorder i32 %v4_10b88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ba8, { 1, 0 }
}

define i32 @function_10bb0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10bb0:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_10bb0 = load i32, i32* @r4, align 4
  store i32 %v3_10bb0, i32* %stack_var_-8, align 4
  %v7_10bb4 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_10bb4, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_10bb4, -4095
  br i1 %tmp6, label %dec_label_pc_10bd4, label %dec_label_pc_10bc4

dec_label_pc_10bc4:                               ; preds = %dec_label_pc_10bb0
  %v0_10bc4 = call i32 @function_10f64()
  %v0_10bc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10bc8 = sub i32 0, %v0_10bc8
  %v2_10bcc = inttoptr i32 %v0_10bc4 to i32*
  store i32 %v1_10bc8, i32* %v2_10bcc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10bd4

dec_label_pc_10bd4:                               ; preds = %dec_label_pc_10bb0, %dec_label_pc_10bc4
  %v0_10bd4 = phi i32 [ %v7_10bb4, %dec_label_pc_10bb0 ], [ -1, %dec_label_pc_10bc4 ]
  %v2_10bd8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10bd8, i32* @r4, align 4
  ret i32 %v0_10bd4

; uselistorder directives
  uselistorder i32 %v7_10bb4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10bd4, { 1, 0 }
}

define i32 @function_10bdc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10bdc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10bdc = load i32, i32* @r4, align 4
  store i32 %v3_10bdc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10c04, label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bdc
  %v0_10bf4 = call i32 @function_10f64()
  %v0_10bf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10bf8 = sub i32 0, %v0_10bf8
  %v2_10bfc = inttoptr i32 %v0_10bf4 to i32*
  store i32 %v1_10bf8, i32* %v2_10bfc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10c08.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c04

dec_label_pc_10c04:                               ; preds = %dec_label_pc_10bdc, %dec_label_pc_10bf4
  %v2_10c08 = phi i32 [ %v3_10bdc, %dec_label_pc_10bdc ], [ %v2_10c08.pre, %dec_label_pc_10bf4 ]
  %v0_10c04 = phi i32 [ %arg1, %dec_label_pc_10bdc ], [ -1, %dec_label_pc_10bf4 ]
  store i32 %v2_10c08, i32* @r4, align 4
  ret i32 %v0_10c04

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c04, { 1, 0 }
}

define i32 @function_10c0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_10c0c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c0c = load i32, i32* @r4, align 4
  store i32 %v3_10c0c, i32* %stack_var_-8, align 4
  %v0_10c10 = call i32 @setsid()
  store i32 %v0_10c10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10c10, -4095
  br i1 %tmp, label %dec_label_pc_10c30, label %dec_label_pc_10c20

dec_label_pc_10c20:                               ; preds = %dec_label_pc_10c0c
  %v0_10c20 = call i32 @function_10f64()
  %v0_10c24 = load i32, i32* %r4.global-to-local, align 4
  %v1_10c24 = sub i32 0, %v0_10c24
  %v2_10c28 = inttoptr i32 %v0_10c20 to i32*
  store i32 %v1_10c24, i32* %v2_10c28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c30

dec_label_pc_10c30:                               ; preds = %dec_label_pc_10c0c, %dec_label_pc_10c20
  %v0_10c30 = phi i32 [ %v0_10c10, %dec_label_pc_10c0c ], [ -1, %dec_label_pc_10c20 ]
  %v2_10c34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10c34, i32* @r4, align 4
  ret i32 %v0_10c30

; uselistorder directives
  uselistorder i32 %v0_10c10, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c30, { 1, 0 }
}

define i32 @function_10c38(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10c38:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c38 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_10c38, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10c38
  %v3_10c405 = load i32, i32* @r4, align 4
  store i32 %v3_10c405, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c60

bb:                                               ; preds = %dec_label_pc_10c38
  %v3_10c40 = load i32, i32* @r4, align 4
  store i32 %v3_10c40, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_10c60, label %dec_label_pc_10c4c

dec_label_pc_10c4c:                               ; preds = %bb
  %v0_10c4c = call i32 @function_10f64()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10c58 = inttoptr i32 %v0_10c4c to i32*
  store i32 22, i32* %v2_10c58, align 4
  %v0_10c84.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10c84

dec_label_pc_10c60:                               ; preds = %.thread, %bb
  %v7_10c60 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_10c60, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_10c60, -4095
  br i1 %tmp13, label %dec_label_pc_10c80, label %dec_label_pc_10c70

dec_label_pc_10c70:                               ; preds = %dec_label_pc_10c60
  %v0_10c70 = call i32 @function_10f64()
  %v0_10c74 = load i32, i32* %r4.global-to-local, align 4
  %v1_10c74 = sub i32 0, %v0_10c74
  %v2_10c78 = inttoptr i32 %v0_10c70 to i32*
  store i32 %v1_10c74, i32* %v2_10c78, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c80

dec_label_pc_10c80:                               ; preds = %dec_label_pc_10c60, %dec_label_pc_10c70
  %v0_10c80 = phi i32 [ %v7_10c60, %dec_label_pc_10c60 ], [ -1, %dec_label_pc_10c70 ]
  store i32 %v0_10c80, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10c84

dec_label_pc_10c84:                               ; preds = %dec_label_pc_10c4c, %dec_label_pc_10c80
  %v0_10c84 = phi i32 [ %v0_10c84.pre, %dec_label_pc_10c4c ], [ %v0_10c80, %dec_label_pc_10c80 ]
  %v2_10c88 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10c88, i32* @r4, align 4
  ret i32 %v0_10c84

; uselistorder directives
  uselistorder i32 %v7_10c60, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_10c84, { 1, 0 }
  uselistorder label %dec_label_pc_10c80, { 1, 0 }
  uselistorder label %dec_label_pc_10c60, { 1, 0 }
}

define i32 @function_10c8c(i32* %arg1) local_unnamed_addr {
dec_label_pc_10c8c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c8c = load i32, i32* @r4, align 4
  store i32 %v3_10c8c, i32* %stack_var_-8, align 4
  %v2_10c90 = call i32 @time(i32* %arg1)
  store i32 %v2_10c90, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10c90, -4095
  br i1 %tmp, label %dec_label_pc_10cb0, label %dec_label_pc_10ca0

dec_label_pc_10ca0:                               ; preds = %dec_label_pc_10c8c
  %v0_10ca0 = call i32 @function_10f64()
  %v0_10ca4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10ca4 = sub i32 0, %v0_10ca4
  %v2_10ca8 = inttoptr i32 %v0_10ca0 to i32*
  store i32 %v1_10ca4, i32* %v2_10ca8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10cb0

dec_label_pc_10cb0:                               ; preds = %dec_label_pc_10c8c, %dec_label_pc_10ca0
  %v0_10cb0 = phi i32 [ %v2_10c90, %dec_label_pc_10c8c ], [ -1, %dec_label_pc_10ca0 ]
  %v2_10cb4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10cb4, i32* @r4, align 4
  ret i32 %v0_10cb0

; uselistorder directives
  uselistorder i32 %v2_10c90, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10cb0, { 1, 0 }
}

define i32 @function_10cb8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10cb8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10cb8 = load i32, i32* @r4, align 4
  store i32 %v3_10cb8, i32* %stack_var_-8, align 4
  %v4_10cbc = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_10cbc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10cbc, -4095
  br i1 %tmp, label %dec_label_pc_10cdc, label %dec_label_pc_10ccc

dec_label_pc_10ccc:                               ; preds = %dec_label_pc_10cb8
  %v0_10ccc = call i32 @function_10f64()
  %v0_10cd0 = load i32, i32* %r4.global-to-local, align 4
  %v1_10cd0 = sub i32 0, %v0_10cd0
  %v2_10cd4 = inttoptr i32 %v0_10ccc to i32*
  store i32 %v1_10cd0, i32* %v2_10cd4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10cdc

dec_label_pc_10cdc:                               ; preds = %dec_label_pc_10cb8, %dec_label_pc_10ccc
  %v0_10cdc = phi i32 [ %v4_10cbc, %dec_label_pc_10cb8 ], [ -1, %dec_label_pc_10ccc ]
  %v2_10ce0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10ce0, i32* @r4, align 4
  ret i32 %v0_10cdc

; uselistorder directives
  uselistorder i32 %v4_10cbc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10cdc, { 1, 0 }
}

define i32 @function_10ce4(i32* %arg1) local_unnamed_addr {
dec_label_pc_10ce4:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10ce4 = load i32, i32* @r4, align 4
  store i32 %v3_10ce4, i32* %stack_var_-20, align 4
  %v6_10ce4 = load i32, i32* @r5, align 4
  %v9_10ce4 = load i32, i32* @r6, align 4
  %v12_10ce4 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_10cec = load i32, i32* %arg1, align 4
  store i32 %v2_10cec, i32* %r4.global-to-local, align 4
  %v2_10cf0 = ptrtoint i32* %stack_var_-36 to i32
  %v1_10cf4 = add i32 %tmp, 24
  store i32 %v1_10cf4, i32* @r6, align 4
  %v3_10cf8 = icmp eq i32 %v2_10cec, -1
  store i32 %v2_10cf0, i32* @r7, align 4
  store i32 %v1_10cf4, i32* %r2.global-to-local, align 4
  store i32 %v2_10cf0, i32* @r0, align 4
  br i1 %v3_10cf8, label %dec_label_pc_10d10, label %dec_label_pc_10d24

dec_label_pc_10d10:                               ; preds = %dec_label_pc_10ce4
  %v0_10d10 = call i32 @function_10f64()
  %v0_10d18 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10d18, i32* %r2.global-to-local, align 4
  %v2_10d1c = inttoptr i32 %v0_10d10 to i32*
  store i32 9, i32* %v2_10d1c, align 4
  %v0_10d7c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d7c

dec_label_pc_10d24:                               ; preds = %dec_label_pc_10ce4
  %v8_10d2c = call i32 @function_11e18(i32 %v2_10cf0, i32 ptrtoint (i32* @global_var_11e10.368 to i32), i32 %v1_10cf4, i32 73240, i32 %v3_10ce4, i32 %v6_10ce4, i32 %v9_10ce4)
  %v1_10d3c = call i32 @function_11e10()
  %v0_10d48 = load i32, i32* @r5, align 4
  %v1_10d48 = inttoptr i32 %v0_10d48 to i32*
  %v2_10d48 = load i32, i32* %v1_10d48, align 4
  store i32 %v2_10d48, i32* @r4, align 4
  store i32 %v2_10cf0, i32* @r0, align 4
  store i32 -1, i32* %v1_10d48, align 4
  store i32 ptrtoint (i32* @global_var_10d60.372 to i32), i32* @lr, align 4
  %v8_10d5c = call i32 @function_11e18(i32 %v2_10cf0, i32 1, i32 %v1_10cf4, i32 73240, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_10d60 = load i32, i32* @r5, align 4
  %v1_10d60 = add i32 %v0_10d60, 12
  %v2_10d60 = inttoptr i32 %v1_10d60 to i32*
  %v3_10d60 = load i32, i32* %v2_10d60, align 4
  store i32 %v3_10d60, i32* @r0, align 4
  %v0_10d64 = call i32 @function_115d4()
  %v0_10d68 = load i32, i32* @r5, align 4
  store i32 %v0_10d68, i32* @r0, align 4
  %v0_10d6c = call i32 @function_115d4()
  %v0_10d70 = load i32, i32* @r4, align 4
  %v1_10d74 = call i32 @function_109bc(i32 %v0_10d70)
  store i32 %v1_10d74, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d7c

dec_label_pc_10d7c:                               ; preds = %dec_label_pc_10d10, %dec_label_pc_10d24
  %v0_10d7c = phi i32 [ %v0_10d7c.pre, %dec_label_pc_10d10 ], [ %v1_10d74, %dec_label_pc_10d24 ]
  %v2_10d84 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10d84, i32* @r4, align 4
  store i32 %v6_10ce4, i32* @r5, align 4
  store i32 %v9_10ce4, i32* @r6, align 4
  store i32 %v12_10ce4, i32* @r7, align 4
  ret i32 %v0_10d7c

; uselistorder directives
  uselistorder i32 %v1_10cf4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_10cf0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_10ce4, { 1, 0 }
  uselistorder i32 %v6_10ce4, { 1, 0 }
  uselistorder label %dec_label_pc_10d7c, { 1, 0 }
}

define i32 @function_10d98(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d98:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_10d98 = load i32, i32* @r4, align 4
  %v9_10d98 = load i32, i32* @r6, align 4
  %v12_10d98 = load i32, i32* @r7, align 4
  %v2_10da4 = inttoptr i32 %arg1 to i8*
  %v3_10da4 = call i32 @function_10ae8(i8* %v2_10da4, i32 18432)
  store i32 %v3_10da4, i32* @r0, align 4
  store i32 %v3_10da4, i32* @r7, align 4
  %v1_10da8 = icmp slt i32 %v3_10da4, 0
  br i1 %v1_10da8, label %.thread1, label %dec_label_pc_10db4

.thread1:                                         ; preds = %dec_label_pc_10d98
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_10e84

dec_label_pc_10db4:                               ; preds = %dec_label_pc_10d98
  %v2_10da0 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_10da0, i32* @r1, align 4
  %v0_10db8 = call i32 @function_1223c()
  %v1_10dbc = icmp slt i32 %v0_10db8, 0
  br i1 %v1_10dbc, label %dec_label_pc_10ddc, label %dec_label_pc_10dc4

dec_label_pc_10dc4:                               ; preds = %dec_label_pc_10db4
  %v0_10dc4 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_10dd0 = call i32 @function_108f8(i32 %v0_10dc4, i32 2)
  %v1_10dd4 = icmp slt i32 %v2_10dd0, 0
  br i1 %v1_10dd4, label %dec_label_pc_10ddc, label %dec_label_pc_10dfc

dec_label_pc_10ddc:                               ; preds = %dec_label_pc_10dc4, %dec_label_pc_10db4
  %v0_10ddc = call i32 @function_10f64()
  store i32 %v0_10ddc, i32* %r5.global-to-local, align 4
  %v0_10de4 = load i32, i32* @r7, align 4
  %v1_10de8 = inttoptr i32 %v0_10ddc to i32*
  %v2_10de8 = load i32, i32* %v1_10de8, align 4
  store i32 %v2_10de8, i32* @r4, align 4
  %v1_10dec = call i32 @function_109bc(i32 %v0_10de4)
  store i32 0, i32* @r6, align 4
  %v0_10df4 = load i32, i32* @r4, align 4
  %v1_10df4 = load i32, i32* %r5.global-to-local, align 4
  %v2_10df4 = inttoptr i32 %v1_10df4 to i32*
  store i32 %v0_10df4, i32* %v2_10df4, align 4
  br label %dec_label_pc_10e84

dec_label_pc_10dfc:                               ; preds = %dec_label_pc_10dc4
  %v1_10e00 = call i32 @function_11428(i32 48)
  store i32 %v1_10e00, i32* @r6, align 4
  %v2_10e04 = icmp eq i32 %v1_10e00, 0
  br i1 %v2_10e04, label %dec_label_pc_10e54, label %dec_label_pc_10e0c

dec_label_pc_10e0c:                               ; preds = %dec_label_pc_10dfc
  store i32 0, i32* @r4, align 4
  %v2_10e10 = add i32 %v1_10e00, 16
  %v3_10e10 = inttoptr i32 %v2_10e10 to i32*
  store i32 0, i32* %v3_10e10, align 4
  %v2_10e18 = icmp ugt i32 %tmp, 511
  %v1_10e1c = load i32, i32* @r6, align 4
  %v2_10e1c = add i32 %v1_10e1c, 20
  %v3_10e1c = inttoptr i32 %v2_10e1c to i32*
  store i32 %tmp, i32* %v3_10e1c, align 4
  br i1 %v2_10e18, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_10e0c
  %v2_10e24 = load i32, i32* @r6, align 4
  %v3_10e24 = add i32 %v2_10e24, 20
  %v4_10e24 = inttoptr i32 %v3_10e24 to i32*
  store i32 512, i32* %v4_10e24, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10e0c, %bb
  %v0_10e28 = load i32, i32* @r7, align 4
  %v1_10e28 = load i32, i32* @r6, align 4
  %v2_10e28 = inttoptr i32 %v1_10e28 to i32*
  store i32 %v0_10e28, i32* %v2_10e28, align 4
  %v0_10e2c = load i32, i32* @r4, align 4
  %v1_10e2c = load i32, i32* @r6, align 4
  %v2_10e2c = add i32 %v1_10e2c, 8
  %v3_10e2c = inttoptr i32 %v2_10e2c to i32*
  store i32 %v0_10e2c, i32* %v3_10e2c, align 4
  %v0_10e30 = load i32, i32* @r4, align 4
  %v1_10e30 = load i32, i32* @r6, align 4
  %v2_10e30 = add i32 %v1_10e30, 4
  %v3_10e30 = inttoptr i32 %v2_10e30 to i32*
  store i32 %v0_10e30, i32* %v3_10e30, align 4
  %v0_10e38 = load i32, i32* @r6, align 4
  %v1_10e38 = add i32 %v0_10e38, 20
  %v2_10e38 = inttoptr i32 %v1_10e38 to i32*
  %v3_10e38 = load i32, i32* %v2_10e38, align 4
  %v2_10e3c = call i32 @function_1157c(i32 1, i32 %v3_10e38)
  %v2_10e40 = icmp eq i32 %v2_10e3c, 0
  %v1_10e44 = load i32, i32* @r6, align 4
  %v2_10e44 = add i32 %v1_10e44, 12
  %v3_10e44 = inttoptr i32 %v2_10e44 to i32*
  store i32 %v2_10e3c, i32* %v3_10e44, align 4
  br i1 %v2_10e40, label %dec_label_pc_10e4c, label %dec_label_pc_10e70

dec_label_pc_10e4c:                               ; preds = %.thread
  %v0_10e4c = load i32, i32* @r6, align 4
  store i32 %v0_10e4c, i32* @r0, align 4
  %v0_10e50 = call i32 @function_115d4()
  br label %dec_label_pc_10e54

dec_label_pc_10e54:                               ; preds = %dec_label_pc_10dfc, %dec_label_pc_10e4c
  %v0_10e54 = load i32, i32* @r7, align 4
  %v1_10e58 = call i32 @function_109bc(i32 %v0_10e54)
  %v0_10e5c = call i32 @function_10f64()
  store i32 0, i32* @r6, align 4
  %v2_10e68 = inttoptr i32 %v0_10e5c to i32*
  store i32 12, i32* %v2_10e68, align 4
  br label %dec_label_pc_10e84

dec_label_pc_10e70:                               ; preds = %.thread
  store i32 69252, i32* @lr, align 4
  %v1_10e80 = call i32 @function_11e10()
  br label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %.thread1, %dec_label_pc_10e54, %dec_label_pc_10ddc, %dec_label_pc_10e70
  %v0_10e84 = load i32, i32* @r6, align 4
  store i32 %v3_10d98, i32* @r4, align 4
  store i32 %v9_10d98, i32* @r6, align 4
  store i32 %v12_10d98, i32* @r7, align 4
  ret i32 %v0_10e84

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_1157c, { 32, 33, 34, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 3, 2, 17, 16, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 512, { 0, 6, 9, 7, 1, 2, 10, 8, 11, 3, 12, 4, 13, 5, 14 }
  uselistorder i32 (i32)* @function_109bc, { 13, 12, 11, 26, 31, 30, 25, 24, 29, 28, 23, 22, 27, 21, 20, 19, 18, 17, 16, 15, 14, 10, 2, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder label %dec_label_pc_10e84, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_10e54, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_10e94(i32* %arg1) local_unnamed_addr {
dec_label_pc_10e94:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10e94 = load i32, i32* @r4, align 4
  %v6_10e94 = load i32, i32* @r5, align 4
  %v9_10e94 = load i32, i32* @lr, align 4
  %v1_10e98 = add i32 %tmp, 24
  store i32 %v1_10e98, i32* @r4, align 4
  %v2_10e9c = ptrtoint i32* %stack_var_-28 to i32
  store i32 73240, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_10e9c, i32* @r0, align 4
  store i32 %v1_10e98, i32* %r2.global-to-local, align 4
  %v8_10eb8 = call i32 @function_11e18(i32 %v2_10e9c, i32 ptrtoint (i32* @global_var_11e10.368 to i32), i32 %v1_10e98, i32 73240, i32 %v3_10e94, i32 %v6_10e94, i32 %v9_10e94)
  %v0_10ebc = load i32, i32* @r4, align 4
  store i32 %v0_10ebc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11e10.368 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10ecc.377 to i32), i32* @lr, align 4
  %v1_10ec8 = call i32 @function_11e10()
  store i32 %v1_10ec8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10ecc

dec_label_pc_10ecc:                               ; preds = %dec_label_pc_10f00, %dec_label_pc_10e94
  %v0_10ecc = load i32, i32* @r5, align 4
  %v1_10ecc = add i32 %v0_10ecc, 4
  %v2_10ecc = inttoptr i32 %v1_10ecc to i32*
  %v3_10ecc = load i32, i32* %v2_10ecc, align 4
  store i32 %v3_10ecc, i32* %r2.global-to-local, align 4
  %v4_10ecc = add i32 %v0_10ecc, 8
  %v5_10ecc = inttoptr i32 %v4_10ecc to i32*
  %v6_10ecc = load i32, i32* %v5_10ecc, align 4
  store i32 %v6_10ecc, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_10ecc, %v3_10ecc
  br i1 %tmp8, label %dec_label_pc_10f00, label %dec_label_pc_10ed8

dec_label_pc_10ed8:                               ; preds = %dec_label_pc_10ecc
  %v1_10ed8 = inttoptr i32 %v0_10ecc to i32*
  %v2_10ed8 = load i32, i32* %v1_10ed8, align 4
  store i32 %v2_10ed8, i32* @r0, align 4
  %v1_10edc = add i32 %v0_10ecc, 12
  %v2_10edc = inttoptr i32 %v1_10edc to i32*
  %v3_10edc = load i32, i32* %v2_10edc, align 4
  %v1_10ee0 = add i32 %v0_10ecc, 20
  %v2_10ee0 = inttoptr i32 %v1_10ee0 to i32*
  %v3_10ee0 = load i32, i32* %v2_10ee0, align 4
  store i32 %v3_10ee0, i32* @r2, align 4
  %v4_10ee4 = call i32 @function_1228c(i32 %v2_10ed8, i32 %v3_10edc, i32 %v3_10ee0, i32 %v6_10ecc)
  store i32 %v4_10ee4, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_10ee4, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_10ef4

.thread:                                          ; preds = %dec_label_pc_10ed8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_10f34

dec_label_pc_10ef4:                               ; preds = %dec_label_pc_10ed8
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10ef8 = load i32, i32* @r5, align 4
  %v2_10ef8 = add i32 %v1_10ef8, 4
  %v3_10ef8 = inttoptr i32 %v2_10ef8 to i32*
  store i32 0, i32* %v3_10ef8, align 4
  %v1_10efc = load i32, i32* @r5, align 4
  %v2_10efc = add i32 %v1_10efc, 8
  %v3_10efc = inttoptr i32 %v2_10efc to i32*
  store i32 %v4_10ee4, i32* %v3_10efc, align 4
  %v0_10f00.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10f00

dec_label_pc_10f00:                               ; preds = %dec_label_pc_10ecc, %dec_label_pc_10ef4
  %v1_10f18 = phi i32 [ %v0_10ecc, %dec_label_pc_10ecc ], [ %v0_10f00.pre, %dec_label_pc_10ef4 ]
  %v1_10f00 = add i32 %v1_10f18, 4
  %v2_10f00 = inttoptr i32 %v1_10f00 to i32*
  %v3_10f00 = load i32, i32* %v2_10f00, align 4
  store i32 %v3_10f00, i32* %r2.global-to-local, align 4
  %v1_10f04 = add i32 %v1_10f18, 12
  %v2_10f04 = inttoptr i32 %v1_10f04 to i32*
  %v3_10f04 = load i32, i32* %v2_10f04, align 4
  store i32 %v3_10f04, i32* %ip.global-to-local, align 4
  %v2_10f08 = add i32 %v3_10f04, %v3_10f00
  store i32 %v2_10f08, i32* @r4, align 4
  %v1_10f0c = add i32 %v2_10f08, 4
  %v2_10f0c = inttoptr i32 %v1_10f0c to i32*
  %v3_10f0c = load i32, i32* %v2_10f0c, align 4
  %v1_10f10 = add i32 %v2_10f08, 8
  %v2_10f10 = inttoptr i32 %v1_10f10 to i8*
  %v3_10f10 = load i8, i8* %v2_10f10, align 1
  %v4_10f10 = zext i8 %v3_10f10 to i32
  store i32 %v4_10f10, i32* %r3.global-to-local, align 4
  %v1_10f14 = add i32 %v2_10f08, 9
  %v2_10f14 = inttoptr i32 %v1_10f14 to i8*
  %v3_10f14 = load i8, i8* %v2_10f14, align 1
  %v4_10f14 = zext i8 %v3_10f14 to i32
  store i32 %v4_10f14, i32* %r0.global-to-local, align 4
  %v2_10f18 = add i32 %v1_10f18, 16
  %v3_10f18 = inttoptr i32 %v2_10f18 to i32*
  store i32 %v3_10f0c, i32* %v3_10f18, align 4
  %v0_10f1c = load i32, i32* %r2.global-to-local, align 4
  %v1_10f1c = load i32, i32* %ip.global-to-local, align 4
  %v2_10f1c = add i32 %v1_10f1c, %v0_10f1c
  %v3_10f1c = inttoptr i32 %v2_10f1c to i32*
  %v4_10f1c = load i32, i32* %v3_10f1c, align 4
  %v0_10f20 = load i32, i32* %r3.global-to-local, align 4
  %v1_10f20 = load i32, i32* %r0.global-to-local, align 4
  %v4_10f20 = mul i32 %v1_10f20, 256
  %v5_10f20 = or i32 %v4_10f20, %v0_10f20
  store i32 %v5_10f20, i32* %r3.global-to-local, align 4
  %v2_10f24 = add i32 %v5_10f20, %v0_10f1c
  store i32 %v2_10f24, i32* @r2, align 4
  %v2_10f28 = icmp eq i32 %v4_10f1c, 0
  %v1_10f2c = load i32, i32* @r5, align 4
  %v2_10f2c = add i32 %v1_10f2c, 4
  %v3_10f2c = inttoptr i32 %v2_10f2c to i32*
  store i32 %v2_10f24, i32* %v3_10f2c, align 4
  br i1 %v2_10f28, label %dec_label_pc_10ecc, label %dec_label_pc_10f34

dec_label_pc_10f34:                               ; preds = %dec_label_pc_10f00, %.thread
  store i32 %v2_10e9c, i32* @r0, align 4
  store i32 73240, i32* %r3.global-to-local, align 4
  store i32 69448, i32* @lr, align 4
  %v3_10f44 = load i32, i32* @r2, align 4
  %v8_10f44 = call i32 @function_11e18(i32 %v2_10e9c, i32 1, i32 %v3_10f44, i32 73240, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_10f48 = load i32, i32* @r4, align 4
  store i32 %v0_10f48, i32* %r0.global-to-local, align 4
  store i32 %v3_10e94, i32* @r4, align 4
  store i32 %v6_10e94, i32* @r5, align 4
  ret i32 %v0_10f48

; uselistorder directives
  uselistorder i32 %v1_10f18, { 0, 2, 1 }
  uselistorder i32 %v6_10ecc, { 1, 0, 2 }
  uselistorder i32 %v0_10ecc, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_10e9c, { 1, 0, 3, 2 }
  uselistorder i32 %v1_10e98, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_10f00, { 1, 0 }
}

define i32 @function_10f64() local_unnamed_addr {
dec_label_pc_10f64:
  ret i32 ptrtoint (i32* @global_var_1b854.380 to i32)
}

define i32 @function_10f70(i32 %arg1) local_unnamed_addr {
dec_label_pc_10f70:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_10f7c = bitcast i32* %stack_var_-20 to %tms*
  %v2_10f7c = call i32 @function_1261c(%tms* %v1_10f7c)
  %v2_10f84 = load i32, i32* %stack_var_-20, align 4
  %v2_10f88 = add i32 %v2_10f84, %tmp
  %v2_10f90 = mul i32 %v2_10f88, 10000
  %v1_10f94 = and i32 %v2_10f90, 2147483632
  ret i32 %v1_10f94

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_10fb0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10fb0:
  %v0_10fb0 = call i32 @function_12a30()
  ret i32 %v0_10fb0
}

define i32 @function_10fc0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10fc0:
  %v0_10fc0 = call i32 @function_12a30()
  ret i32 %v0_10fc0

; uselistorder directives
  uselistorder i32 ()* @function_12a30, { 1, 0 }
}

define i32 @function_10fd0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10fd0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_10fd4 = load i32, i32* @r2, align 4
  %v8_10fd4 = icmp eq i32 %v0_10fd4, 8
  store i1 %v8_10fd4, i1* %cpsr_z.global-to-local, align 1
  %v5_10fd8 = icmp slt i32 %v0_10fd4, 8
  br i1 %v5_10fd8, label %dec_label_pc_11038, label %dec_label_pc_10fdc

dec_label_pc_10fdc:                               ; preds = %dec_label_pc_10fd0
  %v4_10fdc = mul i32 %arg2, 256
  %v5_10fdc = or i32 %v4_10fdc, %arg2
  %v4_10fe0 = mul i32 %v5_10fdc, 65536
  %v5_10fe0 = or i32 %v4_10fe0, %v5_10fdc
  store i32 %v5_10fe0, i32* %r1.global-to-local, align 4
  %v1_10fe457 = urem i32 %tmp, 4
  %v2_10fe458 = icmp eq i32 %v1_10fe457, 0
  store i1 %v2_10fe458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_10fe458, label %dec_label_pc_10ff4, label %bb

bb:                                               ; preds = %dec_label_pc_10fdc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_10fdc ]
  %v3_10fe859 = phi i32 [ %v6_10fe8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_10fdc ]
  %v4_10fe8 = inttoptr i32 %v3_10fe859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_10fe8, align 1
  %v5_10fe8 = load i32, i32* %r3.global-to-local, align 4
  %v6_10fe8 = add i32 %v5_10fe8, 1
  store i32 %v6_10fe8, i32* %r3.global-to-local, align 4
  %v0_10fec.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10ff8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_10fec.pr, label %dec_label_pc_10ff4, label %.thread

.thread:                                          ; preds = %bb
  %v2_10fec = add i32 %v0_10ff8.pr.pre, -1
  store i32 %v2_10fec, i32* @r2, align 4
  %v1_10fe4 = urem i32 %v6_10fe8, 4
  %v2_10fe4 = icmp eq i32 %v1_10fe4, 0
  store i1 %v2_10fe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fe4, label %dec_label_pc_10ff4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_10fe8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_10fe8.pre to i8
  br label %bb

dec_label_pc_10ff4:                               ; preds = %.thread, %bb, %dec_label_pc_10fdc
  %v0_1100028 = phi i32 [ %tmp, %dec_label_pc_10fdc ], [ %v6_10fe8, %bb ], [ %v6_10fe8, %.thread ]
  %v0_10ff8.pr = phi i32 [ %v0_10fd4, %dec_label_pc_10fdc ], [ %v0_10ff8.pr.pre, %bb ], [ %v2_10fec, %.thread ]
  %v0_10ff4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_10ff4, i32* %ip.global-to-local, align 4
  %v8_10ff810 = icmp eq i32 %v0_10ff8.pr, 8
  store i1 %v8_10ff810, i1* %cpsr_z.global-to-local, align 1
  %v5_10ffc11 = icmp slt i32 %v0_10ff8.pr, 8
  br i1 %v5_10ffc11, label %dec_label_pc_11038, label %dec_label_pc_11000.preheader

dec_label_pc_11000.preheader:                     ; preds = %dec_label_pc_10ff4
  %v1_1100046 = inttoptr i32 %v0_1100028 to i32*
  store i32 %v0_10ff4, i32* %v1_1100046, align 4
  %v3_1100047 = add i32 %v0_1100028, 4
  %v4_1100048 = inttoptr i32 %v3_1100047 to i32*
  %v5_1100049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1100049, i32* %v4_1100048, align 4
  %v6_1100050 = add i32 %v0_1100028, 8
  store i32 %v6_1100050, i32* %r3.global-to-local, align 4
  %v0_1100451 = load i32, i32* @r2, align 4
  %v1_1100452 = add i32 %v0_1100451, -8
  store i32 %v1_1100452, i32* %r2.global-to-local, align 4
  %v5_1100c53 = icmp slt i32 %v1_1100452, 8
  br i1 %v5_1100c53, label %dec_label_pc_11000.dec_label_pc_11038.loopexit_crit_edge, label %dec_label_pc_11010

dec_label_pc_11010:                               ; preds = %dec_label_pc_11000.preheader, %dec_label_pc_10ff8.dec_label_pc_11000_crit_edge
  %v6_1100055 = phi i32 [ %v6_11000, %dec_label_pc_10ff8.dec_label_pc_11000_crit_edge ], [ %v6_1100050, %dec_label_pc_11000.preheader ]
  %v0_1100054 = phi i32 [ %v12_1102c, %dec_label_pc_10ff8.dec_label_pc_11000_crit_edge ], [ %v0_1100028, %dec_label_pc_11000.preheader ]
  %v1_11010 = inttoptr i32 %v6_1100055 to i32*
  %v2_11010 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11010, i32* %v1_11010, align 4
  %v3_11010 = add i32 %v0_1100054, 12
  %v4_11010 = inttoptr i32 %v3_11010 to i32*
  %v5_11010 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11010, i32* %v4_11010, align 4
  %v6_11010 = add i32 %v0_1100054, 16
  store i32 %v6_11010, i32* %r3.global-to-local, align 4
  %v0_11014 = load i32, i32* %r2.global-to-local, align 4
  %v1_11014 = add i32 %v0_11014, -8
  store i32 %v1_11014, i32* %r2.global-to-local, align 4
  %v5_1101c = icmp slt i32 %v1_11014, 8
  br i1 %v5_1101c, label %dec_label_pc_11010.dec_label_pc_11038.loopexit_crit_edge, label %dec_label_pc_11020

dec_label_pc_11020:                               ; preds = %dec_label_pc_11010
  %v1_11020 = inttoptr i32 %v6_11010 to i32*
  %v2_11020 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11020, i32* %v1_11020, align 4
  %v3_11020 = add i32 %v0_1100054, 20
  %v4_11020 = inttoptr i32 %v3_11020 to i32*
  %v5_11020 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11020, i32* %v4_11020, align 4
  %v6_11020 = add i32 %v0_1100054, 24
  store i32 %v6_11020, i32* %r3.global-to-local, align 4
  %v0_11024 = load i32, i32* %r2.global-to-local, align 4
  %v1_11024 = add i32 %v0_11024, -8
  store i32 %v1_11024, i32* %r2.global-to-local, align 4
  %v5_1102c = icmp slt i32 %v1_11024, 8
  br i1 %v5_1102c, label %dec_label_pc_11020.dec_label_pc_11038.loopexit_crit_edge, label %dec_label_pc_10ff8

dec_label_pc_10ff8:                               ; preds = %dec_label_pc_11020
  %v7_1102c = inttoptr i32 %v6_11020 to i32*
  %v8_1102c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1102c, i32* %v7_1102c, align 4
  %v9_1102c = add i32 %v0_1100054, 28
  %v10_1102c = inttoptr i32 %v9_1102c to i32*
  %v11_1102c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1102c, i32* %v10_1102c, align 4
  %v12_1102c = add i32 %v0_1100054, 32
  store i32 %v12_1102c, i32* %r3.global-to-local, align 4
  %v6_11030 = load i32, i32* %r2.global-to-local, align 4
  %v7_11030 = add i32 %v6_11030, -8
  store i32 %v7_11030, i32* %r2.global-to-local, align 4
  %v5_10ffc = icmp slt i32 %v7_11030, 8
  br i1 %v5_10ffc, label %dec_label_pc_10ff8.dec_label_pc_11038.loopexit_crit_edge, label %dec_label_pc_10ff8.dec_label_pc_11000_crit_edge

dec_label_pc_10ff8.dec_label_pc_11000_crit_edge:  ; preds = %dec_label_pc_10ff8
  %v2_11000.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11000 = inttoptr i32 %v12_1102c to i32*
  store i32 %v2_11000.pre, i32* %v1_11000, align 4
  %v3_11000 = add i32 %v0_1100054, 36
  %v4_11000 = inttoptr i32 %v3_11000 to i32*
  %v5_11000 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11000, i32* %v4_11000, align 4
  %v6_11000 = add i32 %v0_1100054, 40
  store i32 %v6_11000, i32* %r3.global-to-local, align 4
  %v0_11004 = load i32, i32* %r2.global-to-local, align 4
  %v1_11004 = add i32 %v0_11004, -8
  store i32 %v1_11004, i32* %r2.global-to-local, align 4
  %v5_1100c = icmp slt i32 %v1_11004, 8
  br i1 %v5_1100c, label %dec_label_pc_11000.dec_label_pc_11038.loopexit_crit_edge, label %dec_label_pc_11010

dec_label_pc_11000.dec_label_pc_11038.loopexit_crit_edge: ; preds = %dec_label_pc_10ff8.dec_label_pc_11000_crit_edge, %dec_label_pc_11000.preheader
  %v1_11004.lcssa = phi i32 [ %v1_1100452, %dec_label_pc_11000.preheader ], [ %v1_11004, %dec_label_pc_10ff8.dec_label_pc_11000_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11038

dec_label_pc_10ff8.dec_label_pc_11038.loopexit_crit_edge: ; preds = %dec_label_pc_10ff8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11038

dec_label_pc_11010.dec_label_pc_11038.loopexit_crit_edge: ; preds = %dec_label_pc_11010
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11038

dec_label_pc_11020.dec_label_pc_11038.loopexit_crit_edge: ; preds = %dec_label_pc_11020
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11038

dec_label_pc_11038:                               ; preds = %dec_label_pc_10ff4, %dec_label_pc_11000.dec_label_pc_11038.loopexit_crit_edge, %dec_label_pc_10ff8.dec_label_pc_11038.loopexit_crit_edge, %dec_label_pc_11010.dec_label_pc_11038.loopexit_crit_edge, %dec_label_pc_11020.dec_label_pc_11038.loopexit_crit_edge, %dec_label_pc_10fd0
  %v0_11040 = phi i32 [ %v0_10fd4, %dec_label_pc_10fd0 ], [ %v1_11024, %dec_label_pc_11020.dec_label_pc_11038.loopexit_crit_edge ], [ %v1_11014, %dec_label_pc_11010.dec_label_pc_11038.loopexit_crit_edge ], [ %v7_11030, %dec_label_pc_10ff8.dec_label_pc_11038.loopexit_crit_edge ], [ %v1_11004.lcssa, %dec_label_pc_11000.dec_label_pc_11038.loopexit_crit_edge ], [ %v0_10ff8.pr, %dec_label_pc_10ff4 ]
  %v2_11038 = icmp eq i32 %v0_11040, 0
  store i1 %v2_11038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11038, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11038
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11038
  %v1_11040 = sub i32 7, %v0_11040
  store i32 %v1_11040, i32* %r2.global-to-local, align 4
  %v3_11044 = mul i32 %v1_11040, 4
  %v4_11044 = add i32 %v3_11044, ptrtoint (i32* @global_var_1104c.382 to i32)
  call void @__pseudo_branch(i32 %v4_11044)
  %v0_1104c = load i32, i32* %r1.global-to-local, align 4
  %v1_1104c = trunc i32 %v0_1104c to i8
  %v2_1104c = load i32, i32* %r3.global-to-local, align 4
  %v3_1104c = inttoptr i32 %v2_1104c to i8*
  store i8 %v1_1104c, i8* %v3_1104c, align 1
  %v4_1104c = load i32, i32* %r3.global-to-local, align 4
  %v5_1104c = add i32 %v4_1104c, 1
  store i32 %v5_1104c, i32* %r3.global-to-local, align 4
  %v0_11050 = load i32, i32* %r1.global-to-local, align 4
  %v1_11050 = trunc i32 %v0_11050 to i8
  %v3_11050 = inttoptr i32 %v5_1104c to i8*
  store i8 %v1_11050, i8* %v3_11050, align 1
  %v4_11050 = load i32, i32* %r3.global-to-local, align 4
  %v5_11050 = add i32 %v4_11050, 1
  store i32 %v5_11050, i32* %r3.global-to-local, align 4
  %v0_11054 = load i32, i32* %r1.global-to-local, align 4
  %v1_11054 = trunc i32 %v0_11054 to i8
  %v3_11054 = inttoptr i32 %v5_11050 to i8*
  store i8 %v1_11054, i8* %v3_11054, align 1
  %v4_11054 = load i32, i32* %r3.global-to-local, align 4
  %v5_11054 = add i32 %v4_11054, 1
  store i32 %v5_11054, i32* %r3.global-to-local, align 4
  %v0_11058 = load i32, i32* %r1.global-to-local, align 4
  %v1_11058 = trunc i32 %v0_11058 to i8
  %v3_11058 = inttoptr i32 %v5_11054 to i8*
  store i8 %v1_11058, i8* %v3_11058, align 1
  %v4_11058 = load i32, i32* %r3.global-to-local, align 4
  %v5_11058 = add i32 %v4_11058, 1
  store i32 %v5_11058, i32* %r3.global-to-local, align 4
  %v0_1105c = load i32, i32* %r1.global-to-local, align 4
  %v1_1105c = trunc i32 %v0_1105c to i8
  %v3_1105c = inttoptr i32 %v5_11058 to i8*
  store i8 %v1_1105c, i8* %v3_1105c, align 1
  %v4_1105c = load i32, i32* %r3.global-to-local, align 4
  %v5_1105c = add i32 %v4_1105c, 1
  store i32 %v5_1105c, i32* %r3.global-to-local, align 4
  %v0_11060 = load i32, i32* %r1.global-to-local, align 4
  %v1_11060 = trunc i32 %v0_11060 to i8
  %v3_11060 = inttoptr i32 %v5_1105c to i8*
  store i8 %v1_11060, i8* %v3_11060, align 1
  %v4_11060 = load i32, i32* %r3.global-to-local, align 4
  %v5_11060 = add i32 %v4_11060, 1
  store i32 %v5_11060, i32* %r3.global-to-local, align 4
  %v0_11064 = load i32, i32* %r1.global-to-local, align 4
  %v1_11064 = trunc i32 %v0_11064 to i8
  %v3_11064 = inttoptr i32 %v5_11060 to i8*
  store i8 %v1_11064, i8* %v3_11064, align 1
  %v4_11064 = load i32, i32* %r3.global-to-local, align 4
  %v5_11064 = add i32 %v4_11064, 1
  store i32 %v5_11064, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11000, { 1, 0 }
  uselistorder i32 %v12_1102c, { 1, 2, 0 }
  uselistorder i32 %v0_1100054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_10ff8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_10fe8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_10fdc, { 1, 0 }
  uselistorder i32 %v0_10fd4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 9, 10, 12, 13, 11, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11038, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11010, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_11070(i32 %arg1) local_unnamed_addr {
dec_label_pc_11070:
  %stack_var_-8 = alloca i32, align 4
  %v2_11074 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_11074, i32* @r1, align 4
  %v0_1107c = call i32 @function_12ec0()
  %v2_11080 = icmp eq i32 %v0_1107c, 0
  br i1 %v2_11080, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_11070
  %v3_11088 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_11070, %bb
  %v5_11090 = phi i32 [ -1, %dec_label_pc_11070 ], [ %v3_11088, %bb ]
  ret i32 %v5_11090

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_11094(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11094:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11094 = load i32, i32* @r4, align 4
  store i32 %v3_11094, i32* %stack_var_-8, align 4
  %v5_11098 = inttoptr i32 %arg3 to i32*
  %v6_11098 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_11098)
  store i32 %v6_11098, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_11098, -4095
  br i1 %tmp, label %dec_label_pc_110b8, label %dec_label_pc_110a8

dec_label_pc_110a8:                               ; preds = %dec_label_pc_11094
  %v0_110a8 = call i32 @function_10f64()
  %v0_110ac = load i32, i32* %r4.global-to-local, align 4
  %v1_110ac = sub i32 0, %v0_110ac
  %v2_110b0 = inttoptr i32 %v0_110a8 to i32*
  store i32 %v1_110ac, i32* %v2_110b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_110b8

dec_label_pc_110b8:                               ; preds = %dec_label_pc_11094, %dec_label_pc_110a8
  %v0_110b8 = phi i32 [ %v6_11098, %dec_label_pc_11094 ], [ -1, %dec_label_pc_110a8 ]
  %v2_110bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_110bc, i32* @r4, align 4
  ret i32 %v0_110b8

; uselistorder directives
  uselistorder i32 %v6_11098, { 1, 0, 2 }
  uselistorder label %dec_label_pc_110b8, { 1, 0 }
}

define i32 @function_110c0(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_110c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110c0 = load i32, i32* @r4, align 4
  store i32 %v3_110c0, i32* %stack_var_-8, align 4
  %v5_110c4 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_110c4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_110c4, -4095
  br i1 %tmp, label %dec_label_pc_110e4, label %dec_label_pc_110d4

dec_label_pc_110d4:                               ; preds = %dec_label_pc_110c0
  %v0_110d4 = call i32 @function_10f64()
  %v0_110d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_110d8 = sub i32 0, %v0_110d8
  %v2_110dc = inttoptr i32 %v0_110d4 to i32*
  store i32 %v1_110d8, i32* %v2_110dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_110e4

dec_label_pc_110e4:                               ; preds = %dec_label_pc_110c0, %dec_label_pc_110d4
  %v0_110e4 = phi i32 [ %v5_110c4, %dec_label_pc_110c0 ], [ -1, %dec_label_pc_110d4 ]
  %v2_110e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_110e8, i32* @r4, align 4
  ret i32 %v0_110e4

; uselistorder directives
  uselistorder i32 %v5_110c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_110e4, { 1, 0 }
}

define i32 @function_110ec(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_110ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110ec = load i32, i32* @r4, align 4
  store i32 %v3_110ec, i32* %stack_var_-8, align 4
  %v5_110f0 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_110f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_110f0, -4095
  br i1 %tmp, label %dec_label_pc_11110, label %dec_label_pc_11100

dec_label_pc_11100:                               ; preds = %dec_label_pc_110ec
  %v0_11100 = call i32 @function_10f64()
  %v0_11104 = load i32, i32* %r4.global-to-local, align 4
  %v1_11104 = sub i32 0, %v0_11104
  %v2_11108 = inttoptr i32 %v0_11100 to i32*
  store i32 %v1_11104, i32* %v2_11108, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11110

dec_label_pc_11110:                               ; preds = %dec_label_pc_110ec, %dec_label_pc_11100
  %v0_11110 = phi i32 [ %v5_110f0, %dec_label_pc_110ec ], [ -1, %dec_label_pc_11100 ]
  %v2_11114 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11114, i32* @r4, align 4
  ret i32 %v0_11110

; uselistorder directives
  uselistorder i32 %v5_110f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11110, { 1, 0 }
}

define i32 @function_11118(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11118:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11118 = load i32, i32* @r4, align 4
  store i32 %v3_11118, i32* %stack_var_-8, align 4
  %v5_1111c = inttoptr i32 %arg3 to i32*
  %v6_1111c = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_1111c)
  store i32 %v6_1111c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_1111c, -4095
  br i1 %tmp, label %dec_label_pc_1113c, label %dec_label_pc_1112c

dec_label_pc_1112c:                               ; preds = %dec_label_pc_11118
  %v0_1112c = call i32 @function_10f64()
  %v0_11130 = load i32, i32* %r4.global-to-local, align 4
  %v1_11130 = sub i32 0, %v0_11130
  %v2_11134 = inttoptr i32 %v0_1112c to i32*
  store i32 %v1_11130, i32* %v2_11134, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1113c

dec_label_pc_1113c:                               ; preds = %dec_label_pc_11118, %dec_label_pc_1112c
  %v0_1113c = phi i32 [ %v6_1111c, %dec_label_pc_11118 ], [ -1, %dec_label_pc_1112c ]
  %v2_11140 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11140, i32* @r4, align 4
  ret i32 %v0_1113c

; uselistorder directives
  uselistorder i32 %v6_1111c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1113c, { 1, 0 }
}

define i32 @function_11144(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11144:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11144 = load i32, i32* @r4, align 4
  store i32 %v3_11144, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_1114c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_1114c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1114c, -4095
  br i1 %tmp, label %dec_label_pc_1116c, label %dec_label_pc_1115c

dec_label_pc_1115c:                               ; preds = %dec_label_pc_11144
  %v0_1115c = call i32 @function_10f64()
  %v0_11160 = load i32, i32* %r4.global-to-local, align 4
  %v1_11160 = sub i32 0, %v0_11160
  %v2_11164 = inttoptr i32 %v0_1115c to i32*
  store i32 %v1_11160, i32* %v2_11164, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1116c

dec_label_pc_1116c:                               ; preds = %dec_label_pc_11144, %dec_label_pc_1115c
  %v0_1116c = phi i32 [ %v5_1114c, %dec_label_pc_11144 ], [ -1, %dec_label_pc_1115c ]
  %v2_11170 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11170, i32* @r4, align 4
  ret i32 %v0_1116c

; uselistorder directives
  uselistorder i32 %v5_1114c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1116c, { 1, 0 }
}

define i32 @function_11174(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11174:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11174 = load i32, i32* @r4, align 4
  store i32 %v3_11174, i32* %stack_var_-8, align 4
  %v2_11178 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_11178, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11178, -4095
  br i1 %tmp, label %dec_label_pc_11198, label %dec_label_pc_11188

dec_label_pc_11188:                               ; preds = %dec_label_pc_11174
  %v0_11188 = call i32 @function_10f64()
  %v0_1118c = load i32, i32* %r4.global-to-local, align 4
  %v1_1118c = sub i32 0, %v0_1118c
  %v2_11190 = inttoptr i32 %v0_11188 to i32*
  store i32 %v1_1118c, i32* %v2_11190, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11198

dec_label_pc_11198:                               ; preds = %dec_label_pc_11174, %dec_label_pc_11188
  %v0_11198 = phi i32 [ %v2_11178, %dec_label_pc_11174 ], [ -1, %dec_label_pc_11188 ]
  %v2_1119c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1119c, i32* @r4, align 4
  ret i32 %v0_11198

; uselistorder directives
  uselistorder i32 %v2_11178, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11198, { 1, 0 }
}

define i32 @function_111a0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_111a0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_111a0 = load i32, i32* @r4, align 4
  store i32 %v3_111a0, i32* %stack_var_-8, align 4
  %v5_111a4 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_111a4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_111a4, -4095
  br i1 %tmp, label %dec_label_pc_111c4, label %dec_label_pc_111b4

dec_label_pc_111b4:                               ; preds = %dec_label_pc_111a0
  %v0_111b4 = call i32 @function_10f64()
  %v0_111b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_111b8 = sub i32 0, %v0_111b8
  %v2_111bc = inttoptr i32 %v0_111b4 to i32*
  store i32 %v1_111b8, i32* %v2_111bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_111c4

dec_label_pc_111c4:                               ; preds = %dec_label_pc_111a0, %dec_label_pc_111b4
  %v0_111c4 = phi i32 [ %v5_111a4, %dec_label_pc_111a0 ], [ -1, %dec_label_pc_111b4 ]
  %v2_111c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_111c8, i32* @r4, align 4
  ret i32 %v0_111c4

; uselistorder directives
  uselistorder i32 %v5_111a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_111c4, { 1, 0 }
}

define i32 @function_111cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_111cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_111cc = load i32, i32* @r4, align 4
  store i32 %v3_111cc, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_111d8 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_111d8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_111d8, -4095
  br i1 %tmp, label %dec_label_pc_111f8, label %dec_label_pc_111e8

dec_label_pc_111e8:                               ; preds = %dec_label_pc_111cc
  %v0_111e8 = call i32 @function_10f64()
  %v0_111ec = load i32, i32* %r4.global-to-local, align 4
  %v1_111ec = sub i32 0, %v0_111ec
  %v2_111f0 = inttoptr i32 %v0_111e8 to i32*
  store i32 %v1_111ec, i32* %v2_111f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_111f8

dec_label_pc_111f8:                               ; preds = %dec_label_pc_111cc, %dec_label_pc_111e8
  %v0_111f8 = phi i32 [ %v5_111d8, %dec_label_pc_111cc ], [ -1, %dec_label_pc_111e8 ]
  %v2_111fc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_111fc, i32* @r4, align 4
  ret i32 %v0_111f8

; uselistorder directives
  uselistorder i32 %v5_111d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_111f8, { 1, 0 }
}

define i32 @function_11200(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11200:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11200 = load i32, i32* @r4, align 4
  store i32 %v3_11200, i32* %stack_var_-8, align 4
  %v5_11204 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_11204, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11204, -4095
  br i1 %tmp, label %dec_label_pc_11224, label %dec_label_pc_11214

dec_label_pc_11214:                               ; preds = %dec_label_pc_11200
  %v0_11214 = call i32 @function_10f64()
  %v0_11218 = load i32, i32* %r4.global-to-local, align 4
  %v1_11218 = sub i32 0, %v0_11218
  %v2_1121c = inttoptr i32 %v0_11214 to i32*
  store i32 %v1_11218, i32* %v2_1121c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11224

dec_label_pc_11224:                               ; preds = %dec_label_pc_11200, %dec_label_pc_11214
  %v0_11224 = phi i32 [ %v5_11204, %dec_label_pc_11200 ], [ -1, %dec_label_pc_11214 ]
  %v2_11228 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11228, i32* @r4, align 4
  ret i32 %v0_11224

; uselistorder directives
  uselistorder i32 %v5_11204, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11224, { 1, 0 }
}

define i32 @function_1122c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1122c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1122c = load i32, i32* @r4, align 4
  store i32 %v3_1122c, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11238 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_11238, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11238, -4095
  br i1 %tmp, label %dec_label_pc_11258, label %dec_label_pc_11248

dec_label_pc_11248:                               ; preds = %dec_label_pc_1122c
  %v0_11248 = call i32 @function_10f64()
  %v0_1124c = load i32, i32* %r4.global-to-local, align 4
  %v1_1124c = sub i32 0, %v0_1124c
  %v2_11250 = inttoptr i32 %v0_11248 to i32*
  store i32 %v1_1124c, i32* %v2_11250, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11258

dec_label_pc_11258:                               ; preds = %dec_label_pc_1122c, %dec_label_pc_11248
  %v0_11258 = phi i32 [ %v5_11238, %dec_label_pc_1122c ], [ -1, %dec_label_pc_11248 ]
  %v2_1125c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1125c, i32* @r4, align 4
  ret i32 %v0_11258

; uselistorder directives
  uselistorder i32 %v5_11238, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11258, { 1, 0 }
}

define i32 @function_11260(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11260:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11260 = load i32, i32* @r4, align 4
  store i32 %v3_11260, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11268 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_11268, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11268, -4095
  br i1 %tmp, label %dec_label_pc_11288, label %dec_label_pc_11278

dec_label_pc_11278:                               ; preds = %dec_label_pc_11260
  %v0_11278 = call i32 @function_10f64()
  %v0_1127c = load i32, i32* %r4.global-to-local, align 4
  %v1_1127c = sub i32 0, %v0_1127c
  %v2_11280 = inttoptr i32 %v0_11278 to i32*
  store i32 %v1_1127c, i32* %v2_11280, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11288

dec_label_pc_11288:                               ; preds = %dec_label_pc_11260, %dec_label_pc_11278
  %v0_11288 = phi i32 [ %v5_11268, %dec_label_pc_11260 ], [ -1, %dec_label_pc_11278 ]
  %v2_1128c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1128c, i32* @r4, align 4
  ret i32 %v0_11288

; uselistorder directives
  uselistorder i32 %v5_11268, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11288, { 1, 0 }
}

define i32 @function_11290(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11290:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11290 = load i32, i32* @r4, align 4
  store i32 %v3_11290, i32* %stack_var_-8, align 4
  %v3_11294 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_11294, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_11294, -4095
  br i1 %tmp, label %dec_label_pc_112b4, label %dec_label_pc_112a4

dec_label_pc_112a4:                               ; preds = %dec_label_pc_11290
  %v0_112a4 = call i32 @function_10f64()
  %v0_112a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_112a8 = sub i32 0, %v0_112a8
  %v2_112ac = inttoptr i32 %v0_112a4 to i32*
  store i32 %v1_112a8, i32* %v2_112ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_112b4

dec_label_pc_112b4:                               ; preds = %dec_label_pc_11290, %dec_label_pc_112a4
  %v0_112b4 = phi i32 [ %v3_11294, %dec_label_pc_11290 ], [ -1, %dec_label_pc_112a4 ]
  %v2_112b8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_112b8, i32* @r4, align 4
  ret i32 %v0_112b4

; uselistorder directives
  uselistorder i32 %v3_11294, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112b4, { 1, 0 }
}

define i32 @function_112bc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_112bc:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_112d8, label %dec_label_pc_112c8

dec_label_pc_112c8:                               ; preds = %dec_label_pc_112bc
  %v8_112cc = icmp sgt i32 %arg1, 64
  br i1 %v8_112cc, label %dec_label_pc_112d8, label %dec_label_pc_112d0

dec_label_pc_112d0:                               ; preds = %dec_label_pc_112c8
  %v0_112d4 = call i32 @function_113e0()
  br label %dec_label_pc_112d8

dec_label_pc_112d8:                               ; preds = %dec_label_pc_112c8, %dec_label_pc_112bc, %dec_label_pc_112d0
  %v0_112d8 = call i32 @function_10f64()
  %v2_112e0 = inttoptr i32 %v0_112d8 to i32*
  store i32 22, i32* %v2_112e0, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112d8, { 2, 0, 1 }
}

define i32 @function_112ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_112ec:
  store i32 128, i32* @r2, align 4
  %v0_112f8 = load i32, i32* @r0, align 4
  %v2_112f8 = inttoptr i32 %v0_112f8 to i8*
  %v3_112f8 = call i32 @function_10fd0(i8* %v2_112f8, i32 0)
  ret i32 0
}

define i32 @function_11304(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11304:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11304 = load i32, i32* @r4, align 4
  store i32 %v3_11304, i32* %stack_var_-12, align 4
  %v6_11304 = load i32, i32* @r5, align 4
  %v10_11304 = ptrtoint i32* %stack_var_-12 to i32
  %v7_11308 = icmp eq i32 %arg2, -1
  %v0_11314.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_11308, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11304
  br label %dec_label_pc_1132c

bb:                                               ; preds = %dec_label_pc_11304
  %v2_11310 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_11314.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_11314.pre, 1
  br i1 %tmp19, label %dec_label_pc_1132c, label %dec_label_pc_1131c

dec_label_pc_1131c:                               ; preds = %bb
  %v7_11320 = icmp sgt i32 %v0_11314.pre, 64
  br i1 %v7_11320, label %dec_label_pc_1132c, label %bb20

bb20:                                             ; preds = %dec_label_pc_1131c
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_1135024 = add i32 %v10_11304, 124
  store i32 %v5_1135024, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11340

dec_label_pc_1132c:                               ; preds = %.thread, %dec_label_pc_1131c, %bb
  %v0_1132c = call i32 @function_10f64()
  store i32 %v0_1132c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11338 = inttoptr i32 %v0_1132c to i32*
  store i32 22, i32* %v2_11338, align 4
  %v0_113ac.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_113ac

dec_label_pc_11340:                               ; preds = %bb20, %dec_label_pc_11340
  %v5_1135025 = phi i32 [ %v5_1135024, %bb20 ], [ %v5_11350, %dec_label_pc_11340 ]
  %v2_11344 = add i32 %v5_1135025, -136
  %v3_11344 = inttoptr i32 %v2_11344 to i32*
  store i32 0, i32* %v3_11344, align 4
  %v0_11348.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_11348 = add i32 %v0_11348.pre, -1
  store i32 %v1_11348, i32* %r0.global-to-local, align 4
  %v6_11348 = icmp slt i32 %v1_11348, 0
  %v4_11350 = mul i32 %v1_11348, 4
  %v5_11350 = add i32 %v4_11350, %v10_11304
  store i32 %v5_11350, i32* %r2.global-to-local, align 4
  br i1 %v6_11348, label %dec_label_pc_11358, label %dec_label_pc_11340

dec_label_pc_11358:                               ; preds = %dec_label_pc_11340
  %v2_11358 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_11358, i32* @r5, align 4
  %v2_1135c = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_1135c, i32* @r0, align 4
  %v0_11360 = load i32, i32* @r4, align 4
  store i32 %v0_11360, i32* @r1, align 4
  %v0_11364 = call i32 @function_113e0()
  store i32 %v0_11364, i32* %r0.global-to-local, align 4
  %v1_11368 = icmp slt i32 %v0_11364, 0
  br i1 %v1_11368, label %dec_label_pc_113a8, label %dec_label_pc_11370

dec_label_pc_11370:                               ; preds = %dec_label_pc_11358
  %v0_11370 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1b900.384 to i32), i32* %r0.global-to-local, align 4
  %v2_11378 = call i32 @function_113bc(i32 ptrtoint (i32* @global_var_1b900.384 to i32), i32 %v0_11370)
  store i32 %v2_11310, i32* %r2.global-to-local, align 4
  %v0_11390 = load i32, i32* @r4, align 4
  store i32 %v0_11390, i32* %r0.global-to-local, align 4
  %v4_11398 = call i32 @function_120fc(i32 %v0_11390, i32* nonnull %stack_var_-152, i32 %v2_11310)
  store i32 %v4_11398, i32* %r0.global-to-local, align 4
  %v1_1139c = icmp slt i32 %v4_11398, 0
  br i1 %v1_1139c, label %dec_label_pc_113a8, label %bb23

bb23:                                             ; preds = %dec_label_pc_11370
  %v5_113a0 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_113a0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_113ac

dec_label_pc_113a8:                               ; preds = %dec_label_pc_11370, %dec_label_pc_11358
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_113ac

dec_label_pc_113ac:                               ; preds = %bb23, %dec_label_pc_1132c, %dec_label_pc_113a8
  %v0_113ac = phi i32 [ %v5_113a0, %bb23 ], [ %v0_113ac.pre, %dec_label_pc_1132c ], [ -1, %dec_label_pc_113a8 ]
  store i32 %v0_113ac, i32* %r0.global-to-local, align 4
  %v2_113b4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_113b4, i32* @r4, align 4
  store i32 %v6_11304, i32* @r5, align 4
  ret i32 %v0_113ac

; uselistorder directives
  uselistorder i32 %v0_113ac, { 1, 0 }
  uselistorder i32 %v5_11350, { 1, 0 }
  uselistorder i32 %v1_11348, { 0, 2, 1 }
  uselistorder i32 %v2_11310, { 1, 0 }
  uselistorder i32 %v0_11314.pre, { 1, 0, 2 }
  uselistorder i32 %v10_11304, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_113ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11340, { 1, 0 }
  uselistorder label %dec_label_pc_1132c, { 1, 2, 0 }
}

define i32 @function_113bc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_113bc:
  %v1_113bc = add i32 %arg2, -1
  %v3_113c0 = udiv i32 %v1_113bc, 32
  %v4_113c4 = mul nuw nsw i32 %v3_113c0, 4
  %v5_113c4 = add i32 %v4_113c4, %arg1
  %v6_113c4 = inttoptr i32 %v5_113c4 to i32*
  %v7_113c4 = load i32, i32* %v6_113c4, align 4
  %v1_113c8 = urem i32 %v1_113bc, 32
  %v7_113d0 = shl i32 1, %v1_113c8
  %v8_113d0 = and i32 %v7_113c4, %v7_113d0
  %v10_113d0 = icmp ne i32 %v8_113d0, 0
  %. = zext i1 %v10_113d0 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_113bc, { 1, 0 }
}

define i32 @function_113e0() local_unnamed_addr {
dec_label_pc_113e0:
  %v0_113e0 = load i32, i32* @r1, align 4
  %v1_113e0 = add i32 %v0_113e0, -1
  %v3_113e4 = udiv i32 %v1_113e0, 32
  %v0_113e8 = load i32, i32* @r0, align 4
  %v4_113e8 = mul nuw nsw i32 %v3_113e4, 4
  %v5_113e8 = add i32 %v0_113e8, %v4_113e8
  %v6_113e8 = inttoptr i32 %v5_113e8 to i32*
  %v7_113e8 = load i32, i32* %v6_113e8, align 4
  %v1_113ec = urem i32 %v1_113e0, 32
  %v7_113f4 = shl i32 1, %v1_113ec
  %v8_113f4 = or i32 %v7_113e8, %v7_113f4
  store i32 %v8_113f4, i32* %v6_113e8, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_113e0, { 1, 0 }
}

define i32 @function_11404(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11404:
  %v1_11404 = add i32 %arg2, -1
  %v3_11408 = udiv i32 %v1_11404, 32
  %v4_1140c = mul nuw nsw i32 %v3_11408, 4
  %v5_1140c = add i32 %v4_1140c, %arg1
  %v6_1140c = inttoptr i32 %v5_1140c to i32*
  %v7_1140c = load i32, i32* %v6_1140c, align 4
  %v1_11410 = urem i32 %v1_11404, 32
  %tmp = shl i32 -1, %v1_11410
  %v8_11418 = add i32 %tmp, -1
  %v9_11418 = and i32 %v7_1140c, %v8_11418
  store i32 %v9_11418, i32* %v6_1140c, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11404, { 1, 0 }
}

define i32 @function_11428(i32 %arg1) local_unnamed_addr {
dec_label_pc_11428:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11428 = load i32, i32* @r4, align 4
  %v6_11428 = load i32, i32* @r5, align 4
  %v9_11428 = load i32, i32* @r6, align 4
  %v0_1142c = load i32, i32* %r0.global-to-local, align 4
  %v2_1142c = icmp eq i32 %v0_1142c, 0
  %v2_11430 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_1142c, label %bb, label %dec_label_pc_1143c

bb:                                               ; preds = %dec_label_pc_11428
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11444

dec_label_pc_1143c:                               ; preds = %dec_label_pc_11428
  %tmp = icmp ugt i32 %v0_1142c, -8
  br i1 %tmp, label %dec_label_pc_11548, label %dec_label_pc_11444

dec_label_pc_11444:                               ; preds = %bb, %dec_label_pc_1143c
  %v0_11444 = phi i32 [ %v0_1142c, %dec_label_pc_1143c ], [ 1, %bb ]
  %v1_11444 = add i32 %v0_11444, 4
  store i32 %v1_11444, i32* %stack_var_-20, align 4
  store i32 %v2_11430, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1b81c.386 to i32), i32* %r0.global-to-local, align 4
  %v1_1145c = call i32 @function_11e10()
  store i32 ptrtoint (i32** @global_var_1b65c.390 to i32), i32* %r0.global-to-local, align 4
  %v3_11468 = call i32 @function_117dc(i32* bitcast (i32** @global_var_1b65c.390 to i32*), i32 %v2_11430)
  store i32 %v3_11468, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b81c.386 to i32), i32* %r0.global-to-local, align 4
  store i32 70784, i32* @lr, align 4
  %v1_1147c = call i32 @function_11e10()
  store i32 %v1_1147c, i32* %r0.global-to-local, align 4
  %v2_11480 = icmp eq i32 %v3_11468, 0
  br i1 %v2_11480, label %dec_label_pc_11488, label %dec_label_pc_11538

dec_label_pc_11488:                               ; preds = %dec_label_pc_11444
  %v2_1148c = load i32, i32* @global_var_1b844.393, align 4
  store i32 %v2_1148c, i32* @r4, align 4
  %v2_11490 = load i32, i32* %stack_var_-20, align 4
  %v3_11494 = icmp ult i32 %v2_11490, %v2_1148c
  br i1 %v3_11494, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_11488
  %v3_11498 = add i32 %v2_1148c, -1
  %v2_1149c = add i32 %v3_11498, %v2_11490
  %v2_114a0 = sub i32 0, %v2_1148c
  %v3_114a4 = and i32 %v2_1149c, %v2_114a0
  store i32 %v3_114a4, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11488, %bb14
  store i32 ptrtoint (i32* @global_var_1b980.395 to i32), i32* %r0.global-to-local, align 4
  %v1_114b0 = call i32 @function_11e10()
  %v0_114b4 = load i32, i32* @r4, align 4
  store i32 %v0_114b4, i32* %r0.global-to-local, align 4
  %v1_114b8 = call i32 @function_125c4(i32 %v0_114b4)
  store i32 %v1_114b8, i32* %r0.global-to-local, align 4
  %v7_114bc = icmp eq i32 %v1_114b8, -1
  br i1 %v7_114bc, label %bb15, label %dec_label_pc_114c8

bb15:                                             ; preds = %.thread3
  store i32 %v1_114b8, i32* @r5, align 4
  br label %dec_label_pc_114dc

dec_label_pc_114c8:                               ; preds = %.thread3
  %v1_114c8 = add i32 %v1_114b8, 3
  %v1_114cc = and i32 %v1_114c8, -4
  store i32 %v1_114cc, i32* @r5, align 4
  %v9_114d0 = icmp eq i32 %v1_114cc, %v1_114b8
  br i1 %v9_114d0, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_114c8
  %v3_114d4 = sub i32 %v1_114cc, %v1_114b8
  store i32 %v3_114d4, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_114c8, %bb16
  %v1_114d8 = xor i1 %v9_114d0, true
  call void @__pseudo_cond_branch(i1 %v1_114d8, i32 ptrtoint (i32* @global_var_125c4.396 to i32))
  br label %dec_label_pc_114dc

dec_label_pc_114dc:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1b980.395 to i32), i32* %r0.global-to-local, align 4
  store i32 70892, i32* @lr, align 4
  %v1_114e8 = call i32 @function_11e10()
  store i32 %v1_114e8, i32* %r0.global-to-local, align 4
  %v0_114ec = load i32, i32* @r5, align 4
  %v7_114ec = icmp eq i32 %v0_114ec, -1
  br i1 %v7_114ec, label %dec_label_pc_11548, label %dec_label_pc_114f4

dec_label_pc_114f4:                               ; preds = %dec_label_pc_114dc
  store i32 ptrtoint (i32* @global_var_1b81c.386 to i32), i32* %r0.global-to-local, align 4
  %v1_11500 = call i32 @function_11e10()
  %v0_11504 = load i32, i32* @r4, align 4
  %v0_11508 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1b65c.390 to i32), i32* %r0.global-to-local, align 4
  %v4_11510 = call i32 @function_11930(i32* bitcast (i32** @global_var_1b65c.390 to i32*), i32 %v0_11508, i32 %v0_11504)
  store i32 ptrtoint (i32** @global_var_1b65c.390 to i32), i32* %r0.global-to-local, align 4
  %v3_1151c = call i32 @function_117dc(i32* bitcast (i32** @global_var_1b65c.390 to i32*), i32 %v2_11430)
  store i32 %v3_1151c, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b81c.386 to i32), i32* %r0.global-to-local, align 4
  store i32 70960, i32* @lr, align 4
  %v1_1152c = call i32 @function_11e10()
  store i32 %v1_1152c, i32* %r0.global-to-local, align 4
  %v2_11530 = icmp eq i32 %v3_1151c, 0
  br i1 %v2_11530, label %dec_label_pc_11548, label %dec_label_pc_11538

dec_label_pc_11538:                               ; preds = %dec_label_pc_11444, %dec_label_pc_114f4
  %v1_1153c = phi i32 [ %v3_11468, %dec_label_pc_11444 ], [ %v3_1151c, %dec_label_pc_114f4 ]
  %v2_11538 = load i32, i32* %stack_var_-20, align 4
  %v2_1153c = inttoptr i32 %v1_1153c to i32*
  store i32 %v2_11538, i32* %v2_1153c, align 4
  %v3_1153c = load i32, i32* %r4.global-to-local, align 4
  %v4_1153c = add i32 %v3_1153c, 4
  store i32 %v4_1153c, i32* %r4.global-to-local, align 4
  %v2_11540 = icmp eq i32 %v4_1153c, 0
  br i1 %v2_11540, label %dec_label_pc_11548, label %dec_label_pc_11558

dec_label_pc_11548:                               ; preds = %dec_label_pc_11538, %dec_label_pc_114f4, %dec_label_pc_114dc, %dec_label_pc_1143c
  %v0_11548 = call i32 @function_10f64()
  store i32 %v0_11548, i32* %r0.global-to-local, align 4
  %v2_11550 = inttoptr i32 %v0_11548 to i32*
  store i32 12, i32* %v2_11550, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11558

dec_label_pc_11558:                               ; preds = %dec_label_pc_11538, %dec_label_pc_11548
  %v0_11558 = phi i32 [ %v4_1153c, %dec_label_pc_11538 ], [ 0, %dec_label_pc_11548 ]
  store i32 %v0_11558, i32* %r0.global-to-local, align 4
  store i32 %v3_11428, i32* @r4, align 4
  store i32 %v6_11428, i32* @r5, align 4
  store i32 %v9_11428, i32* @r6, align 4
  ret i32 %v0_11558

; uselistorder directives
  uselistorder i32 %v0_11558, { 1, 0 }
  uselistorder i32 %v3_1151c, { 1, 0, 2 }
  uselistorder i32 %v1_114cc, { 1, 0, 2 }
  uselistorder i32 %v1_114b8, { 3, 0, 4, 2, 1, 5 }
  uselistorder i32 %v3_11468, { 1, 0, 2 }
  uselistorder i32 %v0_1142c, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 4, 7, 9, 10, 11, 1, 13, 12, 5, 15, 14, 0, 16, 17, 18, 19, 2, 3 }
  uselistorder label %dec_label_pc_11558, { 1, 0 }
  uselistorder label %dec_label_pc_11538, { 1, 0 }
  uselistorder label %dec_label_pc_114dc, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11444, { 1, 0 }
}

define i32 @function_1157c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1157c:
  %stack_var_-12 = alloca i32, align 4
  %v3_1157c = load i32, i32* @r4, align 4
  store i32 %v3_1157c, i32* %stack_var_-12, align 4
  %v6_1157c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_11584 = mul i32 %arg2, %arg1
  store i32 %v2_11584, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11588 = icmp eq i32 %arg1, 0
  store i32 %v2_11584, i32* @r0, align 4
  br i1 %v2_11588, label %dec_label_pc_115b4, label %dec_label_pc_11594

dec_label_pc_11594:                               ; preds = %dec_label_pc_1157c
  %v0_11594 = call i32 @function_10634()
  %v0_11598 = load i32, i32* @r5, align 4
  %v9_11598 = icmp eq i32 %v0_11598, %v0_11594
  store i32 0, i32* @r5, align 4
  br i1 %v9_11598, label %dec_label_pc_11594.dec_label_pc_115b4_crit_edge, label %dec_label_pc_115a4

dec_label_pc_11594.dec_label_pc_115b4_crit_edge:  ; preds = %dec_label_pc_11594
  %v0_115b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_115b4

dec_label_pc_115a4:                               ; preds = %dec_label_pc_11594
  %v0_115a4 = call i32 @function_10f64()
  %v2_115ac = inttoptr i32 %v0_115a4 to i32*
  store i32 12, i32* %v2_115ac, align 4
  br label %dec_label_pc_115cc

dec_label_pc_115b4:                               ; preds = %dec_label_pc_11594.dec_label_pc_115b4_crit_edge, %dec_label_pc_1157c
  %v0_115b4 = phi i32 [ %v0_115b4.pre, %dec_label_pc_11594.dec_label_pc_115b4_crit_edge ], [ %v2_11584, %dec_label_pc_1157c ]
  %v1_115b8 = call i32 @function_11428(i32 %v0_115b4)
  store i32 %v1_115b8, i32* @r5, align 4
  %v0_115c0 = load i32, i32* @r4, align 4
  store i32 %v0_115c0, i32* @r2, align 4
  store i32 71116, i32* @lr, align 4
  %v1_115c8 = icmp ne i32 %v1_115b8, 0
  call void @__pseudo_cond_branch(i1 %v1_115c8, i32 ptrtoint (i32* @global_var_10fd0.397 to i32))
  br label %dec_label_pc_115cc

dec_label_pc_115cc:                               ; preds = %dec_label_pc_115a4, %dec_label_pc_115b4
  %v0_115cc = load i32, i32* @r5, align 4
  %v2_115d0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_115d0, i32* @r4, align 4
  store i32 %v6_1157c, i32* @r5, align 4
  ret i32 %v0_115cc

; uselistorder directives
  uselistorder i32 ()* @function_10634, { 1, 3, 2, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_115cc, { 1, 0 }
}

define i32 @function_115d4() local_unnamed_addr {
dec_label_pc_115d4:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_115d4 = load i32, i32* @r0, align 4
  %v2_115d4 = icmp eq i32 %v0_115d4, 0
  %v3_115d8 = load i32, i32* @r4, align 4
  store i32 %v3_115d8, i32* %stack_var_-24, align 4
  %v6_115d8 = load i32, i32* @r5, align 4
  %v9_115d8 = load i32, i32* @r6, align 4
  %v15_115d8 = load i32, i32* @r8, align 4
  br i1 %v2_115d4, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_115d4
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_115d4
  %v1_115e0 = add i32 %v0_115d4, -4
  %v2_115e0 = inttoptr i32 %v1_115e0 to i32*
  %v3_115e0 = load i32, i32* %v2_115e0, align 4
  store i32 %v3_115e0, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1b65c.390 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_115e0, i32* @r4, align 4
  %v1_115f8 = call i32 @function_11e10()
  %v0_115fc = load i32, i32* @r4, align 4
  %v0_11600 = load i32, i32* @r5, align 4
  %v4_11608 = call i32 @function_11930(i32* bitcast (i32** @global_var_1b65c.390 to i32*), i32 %v0_115fc, i32 %v0_11600)
  %v1_11610 = inttoptr i32 %v4_11608 to i32*
  %v2_11610 = load i32, i32* %v1_11610, align 4
  store i32 %v2_11610, i32* %r6.global-to-local, align 4
  %v2_11614 = load i32, i32* @global_var_1b844.393, align 4
  %v4_11618 = mul i32 %v2_11614, 8
  %v6_11618 = icmp ult i32 %v2_11610, %v4_11618
  store i32 %v4_11608, i32* @r4, align 4
  br i1 %v6_11618, label %dec_label_pc_11658, label %dec_label_pc_11624

dec_label_pc_11624:                               ; preds = %bb11
  %v1_1162c = call i32 @function_11e10()
  %v1_11634 = call i32 @function_125c4(i32 0)
  %v0_11638 = load i32, i32* @r4, align 4
  %v1_11638 = add i32 %v0_11638, 12
  store i32 %v1_11638, i32* @r5, align 4
  %v9_1163c = icmp eq i32 %v1_11638, %v1_11634
  br i1 %v9_1163c, label %dec_label_pc_11660, label %dec_label_pc_11644

dec_label_pc_11644:                               ; preds = %dec_label_pc_11624
  %v1_11650 = call i32 @function_11e10()
  br label %dec_label_pc_11658

dec_label_pc_11658:                               ; preds = %bb11, %dec_label_pc_11644, %bb14
  %v2_11658 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11658, i32* @r4, align 4
  store i32 %v6_115d8, i32* @r5, align 4
  store i32 %v9_115d8, i32* %r6.global-to-local, align 4
  store i32 %v15_115d8, i32* %r8.global-to-local, align 4
  %v0_1165c = call i32 @function_11e10()
  %v0_11660.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11660

dec_label_pc_11660:                               ; preds = %dec_label_pc_11624, %dec_label_pc_11658
  %v1_11668 = phi i32 [ %v0_11638, %dec_label_pc_11624 ], [ %v0_11660.pre, %dec_label_pc_11658 ]
  %v1_11660 = add i32 %v1_11668, 4
  %v2_11660 = inttoptr i32 %v1_11660 to i32*
  %v3_11660 = load i32, i32* %v2_11660, align 4
  %v2_11664 = icmp eq i32 %v3_11660, 0
  br i1 %v2_11664, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_11660
  %v2_11668 = add i32 %v1_11668, 8
  %v3_11668 = inttoptr i32 %v2_11668 to i32*
  %v4_11668 = load i32, i32* %v3_11668, align 4
  %v3_1166c = add i32 %v3_11660, 8
  %v4_1166c = inttoptr i32 %v3_1166c to i32*
  store i32 %v4_11668, i32* %v4_1166c, align 4
  %v0_11670.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11660, %bb12
  %v0_11670 = phi i32 [ %v1_11668, %dec_label_pc_11660 ], [ %v0_11670.pre, %bb12 ]
  %v1_11670 = add i32 %v0_11670, 8
  %v2_11670 = inttoptr i32 %v1_11670 to i32*
  %v3_11670 = load i32, i32* %v2_11670, align 4
  %v1_11674 = add i32 %v0_11670, 4
  %v2_11674 = inttoptr i32 %v1_11674 to i32*
  %v3_11674 = load i32, i32* %v2_11674, align 4
  %v2_11678 = icmp eq i32 %v3_11670, 0
  br i1 %v2_11678, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_1167c = add i32 %v3_11670, 4
  %v4_1167c = inttoptr i32 %v3_1167c to i32*
  store i32 %v3_11674, i32* %v4_1167c, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_11680 = load i32, i32* %r8.global-to-local, align 4
  %v3_11680 = inttoptr i32 %v2_11680 to i32*
  store i32 %v3_11674, i32* %v3_11680, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_11690 = call i32 @function_11e10()
  %v0_11694 = load i32, i32* %r6.global-to-local, align 4
  %v1_11694 = load i32, i32* @r4, align 4
  %v0_1169c = load i32, i32* @r5, align 4
  %v2_11694 = sub i32 12, %v0_11694
  %v1_11698 = add i32 %v2_11694, %v1_11694
  %v2_1169c = sub i32 %v1_11698, %v0_1169c
  %v1_116a0 = call i32 @function_125c4(i32 %v2_1169c)
  br label %dec_label_pc_11658

; uselistorder directives
  uselistorder i32 %v0_11670, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_125c4, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_11660, { 1, 0 }
  uselistorder label %dec_label_pc_11658, { 2, 1, 0 }
}

define i32 @function_116c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_116c4:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_116c4 = load i32, i32* @r4, align 4
  store i32 %v3_116c4, i32* %stack_var_-24, align 4
  %v6_116c4 = load i32, i32* @r5, align 4
  %v9_116c4 = load i32, i32* @r6, align 4
  %v12_116c4 = load i32, i32* @r7, align 4
  %v15_116c4 = load i32, i32* @r8, align 4
  %v18_116c4 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_116c8 = icmp eq i32 %arg2, 0
  %v0_116cc = load i32, i32* @r0, align 4
  store i32 %v0_116cc, i32* @r7, align 4
  br i1 %v2_116c8, label %dec_label_pc_116d4, label %dec_label_pc_116dc

dec_label_pc_116d4:                               ; preds = %dec_label_pc_116c4
  %v0_116d4 = call i32 @function_115d4()
  %v0_116e4.pre = load i32, i32* @r4, align 4
  %v2_116e8.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_116e4

dec_label_pc_116dc:                               ; preds = %dec_label_pc_116c4
  %v2_116dc = icmp eq i32 %v0_116cc, 0
  br i1 %v2_116dc, label %dec_label_pc_116e4, label %dec_label_pc_116f0

dec_label_pc_116e4:                               ; preds = %dec_label_pc_116dc, %dec_label_pc_116d4
  %v2_116e8 = phi i32 [ %v3_116c4, %dec_label_pc_116dc ], [ %v2_116e8.pre, %dec_label_pc_116d4 ]
  %v0_116e4 = phi i32 [ %arg2, %dec_label_pc_116dc ], [ %v0_116e4.pre, %dec_label_pc_116d4 ]
  store i32 %v2_116e8, i32* @r4, align 4
  store i32 %v6_116c4, i32* @r5, align 4
  store i32 %v9_116c4, i32* @r6, align 4
  store i32 %v12_116c4, i32* @r7, align 4
  store i32 %v18_116c4, i32* @lr, align 4
  %v1_116ec = call i32 @function_11428(i32 %v0_116e4)
  %v0_116f0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_116f0

dec_label_pc_116f0:                               ; preds = %dec_label_pc_116dc, %dec_label_pc_116e4
  %v0_11708 = phi i32 [ %v0_116cc, %dec_label_pc_116dc ], [ %v1_116ec, %dec_label_pc_116e4 ]
  %v0_116f0 = phi i32 [ %arg2, %dec_label_pc_116dc ], [ %v0_116f0.pre, %dec_label_pc_116e4 ]
  %v1_116f0 = add i32 %v0_116f0, 7
  %v1_116f4 = and i32 %v1_116f0, -4
  store i32 %v1_116f4, i32* @r5, align 4
  %v2_116f8 = icmp ugt i32 %v1_116f4, 10
  %v1_116fc = add i32 %v0_11708, -4
  %v2_116fc = inttoptr i32 %v1_116fc to i32*
  %v3_116fc = load i32, i32* %v2_116fc, align 4
  store i32 %v3_116fc, i32* @r6, align 4
  br i1 %v2_116f8, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_116f0
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_116f0, %bb
  %v0_11784 = phi i32 [ %v1_116f4, %dec_label_pc_116f0 ], [ 12, %bb ]
  store i32 %v1_116fc, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_11784, %v3_116fc
  br i1 %tmp, label %dec_label_pc_11710, label %dec_label_pc_11784

dec_label_pc_11710:                               ; preds = %bb14
  %v2_11704 = sub i32 %v0_11784, %v3_116fc
  %v1_11720 = call i32 @function_11e10()
  %v0_11728 = load i32, i32* @r8, align 4
  %v1_11728 = load i32, i32* @r6, align 4
  %v2_11728 = add i32 %v1_11728, %v0_11728
  %v4_11730 = call i32 @function_11870(i32* bitcast (i32** @global_var_1b65c.390 to i32*), i32 %v2_11728, i32 %v2_11704)
  store i32 %v4_11730, i32* @r4, align 4
  store i32 71496, i32* @lr, align 4
  %v1_11744 = call i32 @function_11e10()
  %v0_11748 = load i32, i32* @r4, align 4
  %v2_11748 = icmp eq i32 %v0_11748, 0
  br i1 %v2_11748, label %dec_label_pc_11758, label %.thread

.thread:                                          ; preds = %dec_label_pc_11710
  %v1_1174c = load i32, i32* @r6, align 4
  %v3_1174c = add i32 %v1_1174c, %v0_11748
  %v2_11750 = load i32, i32* @r7, align 4
  %v3_11750 = add i32 %v2_11750, -4
  %v4_11750 = inttoptr i32 %v3_11750 to i32*
  store i32 %v3_1174c, i32* %v4_11750, align 4
  br label %dec_label_pc_117c4

dec_label_pc_11758:                               ; preds = %dec_label_pc_11710
  %v0_11758 = load i32, i32* @r5, align 4
  %v1_11758 = add i32 %v0_11758, -4
  %v1_1175c = call i32 @function_11428(i32 %v1_11758)
  store i32 %v1_1175c, i32* @r0, align 4
  store i32 %v1_1175c, i32* @r4, align 4
  %v2_11760 = icmp eq i32 %v1_1175c, 0
  br i1 %v2_11760, label %dec_label_pc_1177c, label %dec_label_pc_11768

dec_label_pc_11768:                               ; preds = %dec_label_pc_11758
  %v0_11768 = load i32, i32* @r6, align 4
  %v1_11768 = add i32 %v0_11768, -4
  store i32 %v1_11768, i32* @r2, align 4
  %v0_1176c = load i32, i32* @r7, align 4
  store i32 %v0_1176c, i32* @r1, align 4
  %v3_11770 = call i32 @function_10fb0(i32 %v1_1175c, i32 %v0_1176c, i32 %v1_11768)
  %v0_11774 = load i32, i32* @r7, align 4
  store i32 %v0_11774, i32* @r0, align 4
  %v0_11778 = call i32 @function_115d4()
  %v0_1177c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1177c

dec_label_pc_1177c:                               ; preds = %dec_label_pc_11758, %dec_label_pc_11768
  %v0_1177c = phi i32 [ 0, %dec_label_pc_11758 ], [ %v0_1177c.pre, %dec_label_pc_11768 ]
  store i32 %v0_1177c, i32* @r7, align 4
  br label %dec_label_pc_117c4

dec_label_pc_11784:                               ; preds = %bb14
  %v1_11784 = add i32 %v0_11784, 28
  %tmp15 = icmp ugt i32 %v1_11784, %v3_116fc
  br i1 %tmp15, label %dec_label_pc_117c4, label %dec_label_pc_11790

dec_label_pc_11790:                               ; preds = %dec_label_pc_11784
  %v1_1179c = call i32 @function_11e10()
  %v0_117a0 = load i32, i32* @r8, align 4
  %v1_117a0 = load i32, i32* @r5, align 4
  %v2_117a0 = add i32 %v1_117a0, %v0_117a0
  %v1_117a4 = load i32, i32* @r6, align 4
  %v2_117a4 = sub i32 %v1_117a4, %v1_117a0
  %v4_117ac = call i32 @function_11930(i32* bitcast (i32** @global_var_1b65c.390 to i32*), i32 %v2_117a0, i32 %v2_117a4)
  store i32 71616, i32* @lr, align 4
  %v1_117bc = call i32 @function_11e10()
  %v0_117c0 = load i32, i32* @r5, align 4
  %v1_117c0 = load i32, i32* @r7, align 4
  %v2_117c0 = add i32 %v1_117c0, -4
  %v3_117c0 = inttoptr i32 %v2_117c0 to i32*
  store i32 %v0_117c0, i32* %v3_117c0, align 4
  br label %dec_label_pc_117c4

dec_label_pc_117c4:                               ; preds = %.thread, %dec_label_pc_11784, %dec_label_pc_1177c, %dec_label_pc_11790
  %v0_117c4 = load i32, i32* @r7, align 4
  %v2_117c8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_117c8, i32* @r4, align 4
  store i32 %v6_116c4, i32* @r5, align 4
  store i32 %v9_116c4, i32* @r6, align 4
  store i32 %v12_116c4, i32* @r7, align 4
  store i32 %v15_116c4, i32* @r8, align 4
  ret i32 %v0_117c4

; uselistorder directives
  uselistorder i32 %v1_117a0, { 1, 0 }
  uselistorder i32 %v0_11784, { 1, 2, 0 }
  uselistorder i32 %v3_116fc, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1b65c.390, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1b65c.390 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_11428, { 1, 31, 0, 3, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2 }
  uselistorder i32 ()* @function_115d4, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 98, 99, 100, 101, 102, 112, 4, 5, 7, 6, 8, 9, 10, 13, 14, 15, 16, 17, 18, 11, 12, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 1, 49, 2, 50, 3, 51, 52, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62, 64, 65, 63, 66, 67, 68, 69, 71, 70, 72, 73, 74, 76, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 123, 119, 120, 121, 122, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118 }
  uselistorder i32* @r7, { 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 6, 14, 7, 2, 5, 21, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 57, 58, 59, 60, 61, 62, 63, 64, 24, 25, 3, 26, 27, 28, 29, 30, 31, 32, 33, 65, 0, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 1, 4, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 188, 189, 190, 191, 193, 194, 195, 196, 228, 229, 230, 231, 236, 232, 233, 234, 235, 237, 238, 239, 240, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227 }
  uselistorder label %dec_label_pc_117c4, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_1177c, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_116f0, { 1, 0 }
}

define i32 @function_117dc(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_117dc:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_117dc = inttoptr i32 %arg2 to i32*
  %v2_117dc = load i32, i32* %v1_117dc, align 4
  %v3_117e0 = load i32, i32* @r4, align 4
  store i32 %v3_117e0, i32* %stack_var_-8, align 4
  %v1_117e4 = add i32 %v2_117dc, 3
  %v1_117e8 = and i32 %v1_117e4, -4
  store i32 %v1_117e8, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_117f0 = icmp ugt i32 %v1_117e8, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_117f8 = load i32, i32* %arg1, align 4
  store i32 %v2_117f8, i32* %r0.global-to-local, align 4
  br i1 %v2_117f0, label %dec_label_pc_11864.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_117dc
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11864.preheader

dec_label_pc_11864.preheader:                     ; preds = %dec_label_pc_117dc, %bb
  %v1_11818 = phi i32 [ %v1_117e8, %dec_label_pc_117dc ], [ 12, %bb ]
  %v2_118649 = icmp eq i32 %v2_117f8, 0
  br i1 %v2_118649, label %dec_label_pc_1186c, label %dec_label_pc_11804

dec_label_pc_11804:                               ; preds = %dec_label_pc_11864.preheader, %dec_label_pc_11860
  %v2_1181c = phi i32 [ %v3_11860, %dec_label_pc_11860 ], [ %v2_117f8, %dec_label_pc_11864.preheader ]
  %v1_11804 = inttoptr i32 %v2_1181c to i32*
  %v2_11804 = load i32, i32* %v1_11804, align 4
  store i32 %v2_11804, i32* @ip, align 4
  %v3_11808 = icmp ult i32 %v2_11804, %v1_11818
  br i1 %v3_11808, label %dec_label_pc_11860, label %dec_label_pc_11810

dec_label_pc_11810:                               ; preds = %dec_label_pc_11804
  %v1_11810 = add i32 %v1_11818, 44
  %v3_11814 = icmp ult i32 %v2_11804, %v1_11810
  br i1 %v3_11814, label %dec_label_pc_11824, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_11810
  %v2_11808.le = sub i32 %v2_11804, %v1_11818
  store i32 %v2_11808.le, i32* %v1_11804, align 4
  %v0_11850.pre = load i32, i32* @ip, align 4
  %v0_11858.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_11824:                               ; preds = %dec_label_pc_11810
  %v1_11824 = add i32 %v2_1181c, 4
  %v2_11824 = inttoptr i32 %v1_11824 to i32*
  %v3_11824 = load i32, i32* %v2_11824, align 4
  store i32 %v3_11824, i32* %r2.global-to-local, align 4
  %v2_11828 = icmp eq i32 %v3_11824, 0
  br i1 %v2_11828, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_11824
  %v2_1182c = add i32 %v2_1181c, 8
  %v3_1182c = inttoptr i32 %v2_1182c to i32*
  %v4_1182c = load i32, i32* %v3_1182c, align 4
  %v3_11830 = add i32 %v3_11824, 8
  %v4_11830 = inttoptr i32 %v3_11830 to i32*
  store i32 %v4_1182c, i32* %v4_11830, align 4
  %v0_11834.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11824, %bb27
  %v0_11834 = phi i32 [ %v2_1181c, %dec_label_pc_11824 ], [ %v0_11834.pre, %bb27 ]
  %v1_11834 = add i32 %v0_11834, 8
  %v2_11834 = inttoptr i32 %v1_11834 to i32*
  %v3_11834 = load i32, i32* %v2_11834, align 4
  %v1_11838 = add i32 %v0_11834, 4
  %v2_11838 = inttoptr i32 %v1_11838 to i32*
  %v3_11838 = load i32, i32* %v2_11838, align 4
  %v2_1183c = icmp eq i32 %v3_11834, 0
  br i1 %v2_1183c, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_11840 = add i32 %v3_11834, 4
  %v4_11840 = inttoptr i32 %v3_11840 to i32*
  store i32 %v3_11838, i32* %v4_11840, align 4
  %v1_11848 = load i32, i32* @ip, align 4
  store i32 %v1_11848, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_11844 = load i32, i32* %r1.global-to-local, align 4
  %v3_11844 = inttoptr i32 %v2_11844 to i32*
  store i32 %v3_11838, i32* %v3_11844, align 4
  %v1_1184c.pre = load i32, i32* @ip, align 4
  store i32 %v1_1184c.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_11858 = phi i32 [ %v0_11858.pre, %.thread._crit_edge ], [ %v1_11848, %bb28 ], [ %v1_1184c.pre, %.thread5 ]
  %v0_11850 = phi i32 [ %v0_11850.pre, %.thread._crit_edge ], [ %v1_11848, %bb28 ], [ %v1_1184c.pre, %.thread5 ]
  %v1_11850 = load i32, i32* %r0.global-to-local, align 4
  %v2_11850 = sub i32 %v1_11850, %v0_11850
  %v1_11854 = add i32 %v2_11850, 12
  store i32 %v1_11854, i32* %r0.global-to-local, align 4
  %v1_11858 = load i32, i32* %r4.global-to-local, align 4
  %v2_11858 = inttoptr i32 %v1_11858 to i32*
  store i32 %v0_11858, i32* %v2_11858, align 4
  %v2_1185c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1185c, i32* %r4.global-to-local, align 4
  ret i32 %v1_11854

dec_label_pc_11860:                               ; preds = %dec_label_pc_11804
  %v1_11860 = add i32 %v2_1181c, 4
  %v2_11860 = inttoptr i32 %v1_11860 to i32*
  %v3_11860 = load i32, i32* %v2_11860, align 4
  store i32 %v3_11860, i32* %r0.global-to-local, align 4
  %v2_11864 = icmp eq i32 %v3_11860, 0
  br i1 %v2_11864, label %dec_label_pc_11864.dec_label_pc_1186c_crit_edge, label %dec_label_pc_11804

dec_label_pc_11864.dec_label_pc_1186c_crit_edge:  ; preds = %dec_label_pc_11860
  br label %dec_label_pc_1186c

dec_label_pc_1186c:                               ; preds = %dec_label_pc_11864.dec_label_pc_1186c_crit_edge, %dec_label_pc_11864.preheader
  store i32 %v3_117e0, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_11860, { 1, 2, 0 }
  uselistorder i32 %v0_11834, { 1, 0 }
  uselistorder i32 %v2_11804, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1181c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_11818, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_11804, { 1, 0 }
  uselistorder label %dec_label_pc_11864.preheader, { 1, 0 }
}

define i32 @function_11870(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11870:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_11874 = load i32, i32* %arg1, align 4
  store i32 %v2_11874, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_118ec6 = icmp eq i32 %v2_11874, 0
  br i1 %v2_118ec6, label %dec_label_pc_118f4, label %dec_label_pc_11880

dec_label_pc_11880:                               ; preds = %dec_label_pc_11870, %dec_label_pc_118e8
  %v0_118c0 = phi i32 [ %v3_118e8, %dec_label_pc_118e8 ], [ %v2_11874, %dec_label_pc_11870 ]
  %v1_11880 = inttoptr i32 %v0_118c0 to i32*
  %v2_11880 = load i32, i32* %v1_11880, align 4
  store i32 %v2_11880, i32* %r0.global-to-local, align 4
  %v2_11884 = sub i32 %v0_118c0, %v2_11880
  %v1_11888 = add i32 %v2_11884, 12
  %v3_1188c = icmp uge i32 %v1_11888, %arg2
  %v9_1188c = icmp eq i32 %v1_11888, %arg2
  %v2_11890 = xor i1 %v9_1188c, true
  %v3_11890 = and i1 %v3_1188c, %v2_11890
  br i1 %v3_11890, label %dec_label_pc_118e8, label %dec_label_pc_11894

dec_label_pc_11894:                               ; preds = %dec_label_pc_11880
  br i1 %v9_1188c, label %dec_label_pc_11898, label %dec_label_pc_118f4

dec_label_pc_11898:                               ; preds = %dec_label_pc_11894
  %v1_11898 = add i32 %arg3, 3
  %v1_1189c = and i32 %v1_11898, -4
  store i32 %v1_1189c, i32* %r2.global-to-local, align 4
  %v2_118a0 = sub i32 %v2_11880, %v1_1189c
  %v3_118a0 = icmp ult i32 %v2_11880, %v1_1189c
  br i1 %v3_118a0, label %dec_label_pc_118f4, label %dec_label_pc_118a8

dec_label_pc_118a8:                               ; preds = %dec_label_pc_11898
  %v1_118a8 = add i32 %v1_1189c, 44
  %v3_118ac = icmp ult i32 %v2_11880, %v1_118a8
  br i1 %v3_118ac, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_118a8
  store i32 %v2_118a0, i32* %v1_11880, align 4
  %v1_118b8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_118b8, i32* %r0.global-to-local, align 4
  ret i32 %v1_118b8

.thread2:                                         ; preds = %dec_label_pc_118a8
  %v1_118c0 = add i32 %v0_118c0, 4
  %v2_118c0 = inttoptr i32 %v1_118c0 to i32*
  %v3_118c0 = load i32, i32* %v2_118c0, align 4
  store i32 %v3_118c0, i32* %r2.global-to-local, align 4
  %v2_118c4 = icmp eq i32 %v3_118c0, 0
  br i1 %v2_118c4, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_118c8 = add i32 %v0_118c0, 8
  %v3_118c8 = inttoptr i32 %v2_118c8 to i32*
  %v4_118c8 = load i32, i32* %v3_118c8, align 4
  %v3_118cc = add i32 %v3_118c0, 8
  %v4_118cc = inttoptr i32 %v3_118cc to i32*
  store i32 %v4_118c8, i32* %v4_118cc, align 4
  %v0_118d0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_118d0 = phi i32 [ %v0_118c0, %.thread2 ], [ %v0_118d0.pre, %bb17 ]
  %v1_118d0 = add i32 %v0_118d0, 8
  %v2_118d0 = inttoptr i32 %v1_118d0 to i32*
  %v3_118d0 = load i32, i32* %v2_118d0, align 4
  store i32 %v3_118d0, i32* %r2.global-to-local, align 4
  %v1_118d4 = add i32 %v0_118d0, 4
  %v2_118d4 = inttoptr i32 %v1_118d4 to i32*
  %v3_118d4 = load i32, i32* %v2_118d4, align 4
  %v2_118d8 = icmp eq i32 %v3_118d0, 0
  br i1 %v2_118d8, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_118dc = add i32 %v3_118d0, 4
  %v4_118dc = inttoptr i32 %v3_118dc to i32*
  store i32 %v3_118d4, i32* %v4_118dc, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_118e0 = load i32, i32* %lr.global-to-local, align 4
  %v3_118e0 = inttoptr i32 %v2_118e0 to i32*
  store i32 %v3_118d4, i32* %v3_118e0, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_118e4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_118e4

dec_label_pc_118e8:                               ; preds = %dec_label_pc_11880
  %v1_118e8 = add i32 %v0_118c0, 4
  %v2_118e8 = inttoptr i32 %v1_118e8 to i32*
  %v3_118e8 = load i32, i32* %v2_118e8, align 4
  store i32 %v3_118e8, i32* %ip.global-to-local, align 4
  %v2_118ec = icmp eq i32 %v3_118e8, 0
  br i1 %v2_118ec, label %dec_label_pc_118ec.dec_label_pc_118f4.loopexit_crit_edge, label %dec_label_pc_11880

dec_label_pc_118ec.dec_label_pc_118f4.loopexit_crit_edge: ; preds = %dec_label_pc_118e8
  br label %dec_label_pc_118f4

dec_label_pc_118f4:                               ; preds = %dec_label_pc_11898, %dec_label_pc_11870, %dec_label_pc_118ec.dec_label_pc_118f4.loopexit_crit_edge, %dec_label_pc_11894
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_118e8, { 1, 2, 0 }
  uselistorder i32 %v0_118d0, { 1, 0 }
  uselistorder i32 %v1_1189c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_1188c, { 1, 0 }
  uselistorder i32 %v2_11880, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_118c0, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_118f4, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11880, { 1, 0 }
}

define i32 @function_118fc() local_unnamed_addr {
dec_label_pc_118fc:
  %v0_118fc = load i32, i32* @r2, align 4
  %v2_118fc = icmp eq i32 %v0_118fc, 0
  %v0_11900 = load i32, i32* @r3, align 4
  %v1_11900 = load i32, i32* @r1, align 4
  %v2_11900 = add i32 %v1_11900, 4
  %v3_11900 = inttoptr i32 %v2_11900 to i32*
  store i32 %v0_11900, i32* %v3_11900, align 4
  %v0_11904 = load i32, i32* @r2, align 4
  %v1_11904 = load i32, i32* @r1, align 4
  %v2_11904 = add i32 %v1_11904, 8
  %v3_11904 = inttoptr i32 %v2_11904 to i32*
  store i32 %v0_11904, i32* %v3_11904, align 4
  %v1_1190c = load i32, i32* @r1, align 4
  br i1 %v2_118fc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_118fc
  %v2_11908 = load i32, i32* @r2, align 4
  %v3_11908 = add i32 %v2_11908, 4
  %v4_11908 = inttoptr i32 %v3_11908 to i32*
  store i32 %v1_1190c, i32* %v4_11908, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_118fc
  %v2_1190c = load i32, i32* @r0, align 4
  %v3_1190c = inttoptr i32 %v2_1190c to i32*
  store i32 %v1_1190c, i32* %v3_1190c, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_11910 = load i32, i32* @r3, align 4
  %v2_11910 = icmp eq i32 %v0_11910, 0
  br i1 %v2_11910, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_11914 = load i32, i32* @r1, align 4
  %v3_11914 = add i32 %v0_11910, 8
  %v4_11914 = inttoptr i32 %v3_11914 to i32*
  store i32 %v1_11914, i32* %v4_11914, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_11918 = load i32, i32* @r0, align 4
  ret i32 %v1_11918

; uselistorder directives
  uselistorder i32 %v1_1190c, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_1191c() local_unnamed_addr {
dec_label_pc_1191c:
  %v0_1191c = load i32, i32* @r2, align 4
  %v2_1191c = icmp eq i32 %v0_1191c, 0
  %v1_11920 = load i32, i32* @r1, align 4
  br i1 %v2_1191c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1191c
  %v2_11920 = load i32, i32* @r0, align 4
  %v3_11920 = inttoptr i32 %v2_11920 to i32*
  store i32 %v1_11920, i32* %v3_11920, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_1191c
  %v3_11924 = add i32 %v0_1191c, 4
  %v4_11924 = inttoptr i32 %v3_11924 to i32*
  store i32 %v1_11920, i32* %v4_11924, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_11928 = load i32, i32* @r2, align 4
  %v1_11928 = load i32, i32* @r1, align 4
  %v2_11928 = add i32 %v1_11928, 8
  %v3_11928 = inttoptr i32 %v2_11928 to i32*
  store i32 %v0_11928, i32* %v3_11928, align 4
  %v1_1192c = load i32, i32* @r0, align 4
  ret i32 %v1_1192c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_11930(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11930:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11930 = load i32, i32* @r4, align 4
  store i32 %v3_11930, i32* %stack_var_-20, align 4
  %v2_11934 = load i32, i32* %arg1, align 4
  store i32 %v2_11934, i32* %r4.global-to-local, align 4
  %v2_11938 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_119542 = icmp eq i32 %v2_11934, 0
  br i1 %v2_119542, label %dec_label_pc_11a04, label %dec_label_pc_11944

dec_label_pc_11944:                               ; preds = %dec_label_pc_11930, %dec_label_pc_1194c
  %v0_11994 = phi i32 [ %v0_1199c, %dec_label_pc_1194c ], [ 0, %dec_label_pc_11930 ]
  %v0_1199c = phi i32 [ %v3_11950, %dec_label_pc_1194c ], [ %v2_11934, %dec_label_pc_11930 ]
  %v1_119585.in = phi i32 [ %v3_11950, %dec_label_pc_1194c ], [ %v2_11934, %dec_label_pc_11930 ]
  %v1_119585 = add i32 %v1_119585.in, 12
  %v3_11944 = icmp ult i32 %v1_119585, %arg2
  br i1 %v3_11944, label %dec_label_pc_1194c, label %dec_label_pc_11964

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11944
  store i32 %v0_1199c, i32* %r6.global-to-local, align 4
  %v1_11950 = add i32 %v0_1199c, 4
  %v2_11950 = inttoptr i32 %v1_11950 to i32*
  %v3_11950 = load i32, i32* %v2_11950, align 4
  store i32 %v3_11950, i32* %r4.global-to-local, align 4
  %v2_11954 = icmp eq i32 %v3_11950, 0
  br i1 %v2_11954, label %dec_label_pc_11954.dec_label_pc_11a04.loopexit_crit_edge, label %dec_label_pc_11944

dec_label_pc_11964:                               ; preds = %dec_label_pc_11944
  %v1_11964 = inttoptr i32 %v0_1199c to i32*
  %v2_11964 = load i32, i32* %v1_11964, align 4
  store i32 %v2_11964, i32* @ip, align 4
  %v2_11968 = sub i32 %v0_1199c, %v2_11964
  %v1_1196c = add i32 %v2_11968, 12
  %v3_11970 = icmp uge i32 %v1_1196c, %v2_11938
  %v9_11970 = icmp eq i32 %v1_1196c, %v2_11938
  %v2_11974 = xor i1 %v9_11970, true
  %v3_11974 = and i1 %v3_11970, %v2_11974
  br i1 %v3_11974, label %dec_label_pc_11a04, label %dec_label_pc_11978

dec_label_pc_11978:                               ; preds = %dec_label_pc_11964
  %v2_11978 = add i32 %v2_11964, %arg3
  store i32 %v2_11978, i32* %r7.global-to-local, align 4
  br i1 %v9_11970, label %dec_label_pc_11980, label %dec_label_pc_119ac

dec_label_pc_11980:                               ; preds = %dec_label_pc_11978
  %v2_11980 = icmp eq i32 %v0_11994, 0
  br i1 %v2_11980, label %dec_label_pc_119f8, label %dec_label_pc_11988

dec_label_pc_11988:                               ; preds = %dec_label_pc_11980
  %v1_11988 = add i32 %v0_11994, 12
  %v9_1198c = icmp eq i32 %v1_11988, %arg2
  br i1 %v9_1198c, label %dec_label_pc_11994, label %dec_label_pc_119f8

dec_label_pc_11994:                               ; preds = %dec_label_pc_11988
  %v1_11994 = inttoptr i32 %v0_11994 to i32*
  %v2_11994 = load i32, i32* %v1_11994, align 4
  %v1_11998 = add i32 %v0_11994, 8
  %v2_11998 = inttoptr i32 %v1_11998 to i32*
  %v3_11998 = load i32, i32* %v2_11998, align 4
  store i32 %v3_11998, i32* @r2, align 4
  store i32 %v0_1199c, i32* @r1, align 4
  %v2_119a0 = add i32 %v2_11994, %v2_11978
  store i32 %v2_119a0, i32* %r7.global-to-local, align 4
  %v0_119a4 = call i32 @function_1191c()
  br label %dec_label_pc_119f8

dec_label_pc_119ac:                               ; preds = %dec_label_pc_11978
  %v1_119ac = add i32 %v0_1199c, 4
  %v2_119ac = inttoptr i32 %v1_119ac to i32*
  %v3_119ac = load i32, i32* %v2_119ac, align 4
  store i32 %v3_119ac, i32* %r5.global-to-local, align 4
  %v2_119b0 = icmp eq i32 %v3_119ac, 0
  br i1 %v2_119b0, label %dec_label_pc_119e4, label %dec_label_pc_119b8

dec_label_pc_119b8:                               ; preds = %dec_label_pc_119ac
  %v1_119b8 = inttoptr i32 %v3_119ac to i32*
  %v2_119b8 = load i32, i32* %v1_119b8, align 4
  store i32 %v2_119b8, i32* @ip, align 4
  %v2_119bc = sub i32 %v3_119ac, %v2_119b8
  %v1_119c0 = add i32 %v2_119bc, 12
  %v9_119c4 = icmp eq i32 %v2_11938, %v1_119c0
  br i1 %v9_119c4, label %dec_label_pc_119cc, label %dec_label_pc_119e4

dec_label_pc_119cc:                               ; preds = %dec_label_pc_119b8
  store i32 %v0_11994, i32* @r2, align 4
  store i32 %v3_119ac, i32* @r1, align 4
  %v2_119d4 = add i32 %v2_119b8, %v2_11978
  store i32 %v2_119d4, i32* %r7.global-to-local, align 4
  %v0_119d8 = call i32 @function_1191c()
  %v0_119dc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_119dc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_119f8

dec_label_pc_119e4:                               ; preds = %dec_label_pc_119b8, %dec_label_pc_119ac
  %v2_119e4 = add i32 %v0_1199c, %arg3
  store i32 %v2_119e4, i32* %r4.global-to-local, align 4
  store i32 %v3_119ac, i32* @r3, align 4
  store i32 %v0_11994, i32* @r2, align 4
  store i32 %v2_119e4, i32* @r1, align 4
  %v0_119f4 = call i32 @function_118fc()
  br label %dec_label_pc_119f8

dec_label_pc_119f8:                               ; preds = %dec_label_pc_11988, %dec_label_pc_11980, %dec_label_pc_119cc, %dec_label_pc_11994, %dec_label_pc_119e4
  %v0_119f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_119f8, i32* %r5.global-to-local, align 4
  %v0_119fc = load i32, i32* %r7.global-to-local, align 4
  %v2_119fc = inttoptr i32 %v0_119f8 to i32*
  store i32 %v0_119fc, i32* %v2_119fc, align 4
  br label %dec_label_pc_11a1c

dec_label_pc_11954.dec_label_pc_11a04.loopexit_crit_edge: ; preds = %dec_label_pc_1194c
  br label %dec_label_pc_11a04

dec_label_pc_11a04:                               ; preds = %dec_label_pc_11930, %dec_label_pc_11954.dec_label_pc_11a04.loopexit_crit_edge, %dec_label_pc_11964
  %v1_11a04 = add i32 %v2_11938, -12
  store i32 %v1_11a04, i32* %r5.global-to-local, align 4
  %v3_11a08 = inttoptr i32 %v1_11a04 to i32*
  store i32 %arg3, i32* %v3_11a08, align 4
  %v0_11a0c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11a0c, i32* @r3, align 4
  %v0_11a10 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11a10, i32* @r2, align 4
  %v0_11a14 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11a14, i32* @r1, align 4
  %v0_11a18 = call i32 @function_118fc()
  br label %dec_label_pc_11a1c

dec_label_pc_11a1c:                               ; preds = %dec_label_pc_119f8, %dec_label_pc_11a04
  %v0_11a1c = load i32, i32* %r5.global-to-local, align 4
  %v2_11a20 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11a20, i32* @r4, align 4
  ret i32 %v0_11a1c

; uselistorder directives
  uselistorder i32 %v3_119ac, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_11970, { 1, 0 }
  uselistorder i32 %v3_11950, { 2, 3, 1, 0 }
  uselistorder i32 %v0_1199c, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_11994, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_118fc, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_1191c, { 1, 0 }
  uselistorder i32* @ip, { 16, 17, 1, 18, 0, 19, 20, 21, 22, 6, 7, 8, 9, 10, 11, 12, 4, 5, 2, 13, 14, 3, 15 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11a1c, { 1, 0 }
  uselistorder label %dec_label_pc_11a04, { 1, 2, 0 }
  uselistorder label %dec_label_pc_119f8, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_11944, { 1, 0 }
}

define i32 @function_11a24() local_unnamed_addr {
dec_label_pc_11a40.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_11a24 = ptrtoint i32* %stack_var_-268 to i32
  %v1_11a34 = call i32 @function_11e10()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_11a40 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_11a40

dec_label_pc_11a40:                               ; preds = %dec_label_pc_11a40.lr.ph, %dec_label_pc_11a40
  %v1_11a44 = phi i32 [ 31, %dec_label_pc_11a40.lr.ph ], [ %v1_11a50, %dec_label_pc_11a40 ]
  %v4_11a44 = mul i32 %v1_11a44, 4
  %v5_11a44 = add i32 %v4_11a44, %v2_11a40
  %v2_11a4c = add i32 %v5_11a44, -128
  %v3_11a4c = inttoptr i32 %v2_11a4c to i32*
  store i32 0, i32* %v3_11a4c, align 4
  %v0_11a50 = load i32, i32* %r1.global-to-local, align 4
  %v1_11a50 = add i32 %v0_11a50, -1
  store i32 %v1_11a50, i32* %r1.global-to-local, align 4
  %v6_11a50 = icmp slt i32 %v1_11a50, 0
  br i1 %v6_11a50, label %dec_label_pc_11a58, label %dec_label_pc_11a40

dec_label_pc_11a58:                               ; preds = %dec_label_pc_11a40
  %v2_11a58 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_11a58, i32* @r4, align 4
  store i32 %v2_11a58, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_11a64 = call i32 @function_113e0()
  %v2_11a68 = icmp eq i32 %v0_11a64, 0
  br i1 %v2_11a68, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_11a58
  store i32 %v2_11a58, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11a58, %bb
  store i32 72316, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11a68, i32 ptrtoint (i32* @global_var_10c38.412 to i32))
  %v2_11a80 = load i32, i32* @global_var_1b834.414, align 4
  %v2_11a84 = icmp eq i32 %v2_11a80, 0
  br i1 %v2_11a84, label %dec_label_pc_11a8c, label %dec_label_pc_11abc

dec_label_pc_11a8c:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1b834.414, align 4
  br label %dec_label_pc_11a94

dec_label_pc_11a94:                               ; preds = %dec_label_pc_11b0c, %dec_label_pc_11a8c
  %v1_11aa0 = call i32 @function_11e10()
  %v1_11aa8 = call i32 @function_12fac(i32 6)
  store i32 72380, i32* @lr, align 4
  %v1_11ab8 = call i32 @function_11e10()
  %v2_11ac0.pre = load i32, i32* @global_var_1b834.414, align 4
  br label %dec_label_pc_11abc

dec_label_pc_11abc:                               ; preds = %.thread1, %dec_label_pc_11a94
  %v0_11b30 = phi i32 [ %v2_11a80, %.thread1 ], [ %v2_11ac0.pre, %dec_label_pc_11a94 ]
  store i32 ptrtoint (i32* @global_var_1b834.414 to i32), i32* %ip.global-to-local, align 4
  %v7_11ac4 = icmp eq i32 %v0_11b30, 1
  br i1 %v7_11ac4, label %dec_label_pc_11af4.lr.ph, label %dec_label_pc_11b28

dec_label_pc_11af4.lr.ph:                         ; preds = %dec_label_pc_11abc
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1b834.414, align 4
  %v2_11ae0 = bitcast i32* %stack_var_-268 to i8*
  %v3_11ae0 = call i32 @function_10fd0(i8* %v2_11ae0, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11af4

dec_label_pc_11af4:                               ; preds = %dec_label_pc_11af4.lr.ph, %dec_label_pc_11af4
  %v1_11af8 = phi i32 [ 31, %dec_label_pc_11af4.lr.ph ], [ %v1_11b04, %dec_label_pc_11af4 ]
  %v4_11af8 = mul i32 %v1_11af8, 4
  %v5_11af8 = add i32 %v4_11af8, %v2_11a40
  %v2_11b00 = add i32 %v5_11af8, -264
  %v3_11b00 = inttoptr i32 %v2_11b00 to i32*
  store i32 -1, i32* %v3_11b00, align 4
  %v0_11b04 = load i32, i32* %r1.global-to-local, align 4
  %v1_11b04 = add i32 %v0_11b04, -1
  store i32 %v1_11b04, i32* %r1.global-to-local, align 4
  %v6_11b04 = icmp slt i32 %v1_11b04, 0
  br i1 %v6_11b04, label %dec_label_pc_11b0c, label %dec_label_pc_11af4

dec_label_pc_11b0c:                               ; preds = %dec_label_pc_11af4
  store i32 %v2_11a24, i32* %r1.global-to-local, align 4
  %v4_11b20 = call i32 @function_120fc(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_11a94

dec_label_pc_11b28:                               ; preds = %dec_label_pc_11abc
  %v7_11b28 = icmp eq i32 %v0_11b30, 2
  br i1 %v7_11b28, label %dec_label_pc_11b30, label %dec_label_pc_11b3c

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11b28
  store i32 3, i32* @global_var_1b834.414, align 4
  %v0_11b38 = call i32 @function_11a24()
  %v2_11b3c.pre = load i32, i32* @global_var_1b834.414, align 4
  br label %dec_label_pc_11b3c

dec_label_pc_11b3c:                               ; preds = %dec_label_pc_11b28, %dec_label_pc_11b30
  %v1_11b44 = phi i32 [ %v0_11b30, %dec_label_pc_11b28 ], [ %v2_11b3c.pre, %dec_label_pc_11b30 ]
  %v7_11b40 = icmp eq i32 %v1_11b44, 3
  br i1 %v7_11b40, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_11b3c
  %v2_11b4c = load i32, i32* %ip.global-to-local, align 4
  %v3_11b4c = inttoptr i32 %v2_11b4c to i32*
  store i32 4, i32* %v3_11b4c, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11b3c, %bb27
  call void @__pseudo_cond_branch(i1 %v7_11b40, i32 ptrtoint (i32* @global_var_12214.416 to i32))
  br label %dec_label_pc_11b54

dec_label_pc_11b54:                               ; preds = %dec_label_pc_11b54, %.thread3
  %v0_11b54 = call i32 @function_11a24()
  br label %dec_label_pc_11b54

; uselistorder directives
  uselistorder i32 %v1_11b04, { 2, 1, 0 }
  uselistorder i32 %v1_11a50, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 6, 7, 0, 1, 8, 3, 5, 4, 2 }
  uselistorder i32* @global_var_1b834.414, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11b3c, { 1, 0 }
  uselistorder label %dec_label_pc_11af4, { 1, 0 }
  uselistorder label %dec_label_pc_11abc, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_11a40, { 1, 0 }
}

define i32 @function_11b6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11b6c:
  %stack_var_-16 = alloca i32, align 4
  %v2_11b6c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_11b6c, i32* @r0, align 4
  %v8_11b88 = call i32 @function_11e18(i32 %v2_11b6c, i32 ptrtoint (i32* @global_var_11e10.368 to i32), i32 ptrtoint (i32* @global_var_1b77c.419 to i32), i32 73240, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_11b98 = call i32 @function_11e10()
  %v2_11ba0 = load i32, i32* @global_var_1b838.423, align 4
  %v2_11ba4 = icmp eq i32 %v2_11ba0, 0
  br i1 %v2_11ba4, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_11b6c
  call void @__pseudo_branch(i32 %v2_11ba0)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11b6c, %bb
  store i32 %v2_11b6c, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_11bc8.425 to i32), i32* @lr, align 4
  %v8_11bc4 = call i32 @function_11e18(i32 %v2_11b6c, i32 1, i32 ptrtoint (i32* @global_var_1b77c.419 to i32), i32 73240, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_11bc4, i32* @r0, align 4
  %v1_11bc8 = call i32 @function_11da4(i32 %v8_11bc4)
  store i1 true, i1* @cpsr_z, align 1
  %v0_11bdc = load i32, i32* @r4, align 4
  %v1_11be0 = call i32 @function_12214(i32 %v0_11bdc)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_11b6c, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_11e10, { 4, 2, 1, 3, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_11e18, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 73240, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1b77c.419 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_11e10.368 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_11c00(i32 %arg1) local_unnamed_addr {
dec_label_pc_11c00:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11c00 = load i32, i32* @r4, align 4
  store i32 %v3_11c00, i32* %stack_var_-20, align 4
  %v6_11c00 = load i32, i32* @r5, align 4
  %v9_11c00 = load i32, i32* @r6, align 4
  %v16_11c00 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_11c04 = icmp eq i32 %arg1, 0
  %v2_11c08 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_11c04, label %dec_label_pc_11d8c, label %dec_label_pc_11c20.preheader

dec_label_pc_11c20.preheader:                     ; preds = %dec_label_pc_11c00
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_11c2817 = add i32 %v16_11c00, 124
  br label %dec_label_pc_11c18

dec_label_pc_11c18:                               ; preds = %dec_label_pc_11c20.preheader, %dec_label_pc_11c18
  %v5_11c2818 = phi i32 [ %v5_11c2817, %dec_label_pc_11c20.preheader ], [ %v5_11c28, %dec_label_pc_11c18 ]
  %v2_11c1c = add i32 %v5_11c2818, -136
  %v3_11c1c = inttoptr i32 %v2_11c1c to i32*
  store i32 0, i32* %v3_11c1c, align 4
  %v0_11c20.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11c20 = add i32 %v0_11c20.pre, -1
  store i32 %v1_11c20, i32* %r1.global-to-local, align 4
  %v6_11c20 = icmp slt i32 %v1_11c20, 0
  %v4_11c28 = mul i32 %v1_11c20, 4
  %v5_11c28 = add i32 %v4_11c28, %v16_11c00
  br i1 %v6_11c20, label %dec_label_pc_11c30, label %dec_label_pc_11c18

dec_label_pc_11c30:                               ; preds = %dec_label_pc_11c18
  %v2_11c30 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_11c30, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_11c40 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_11c40, i32* %stack_var_-28, align 4
  %v0_11c48 = call i32 @function_113e0()
  store i32 %v0_11c48, i32* %r0.global-to-local, align 4
  %v1_11c4c = load i32, i32* @r5, align 4
  %v5_11c50 = icmp slt i32 %v0_11c48, %v1_11c4c
  br i1 %v5_11c50, label %dec_label_pc_11d94, label %dec_label_pc_11c54

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11c30
  %v2_11c54 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_11c54, i32* @r4, align 4
  store i32 %v1_11c4c, i32* %r0.global-to-local, align 4
  store i32 %v2_11c30, i32* %r1.global-to-local, align 4
  %v3_11c64 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_11c64 = call i32 @function_10c38(i32 %v1_11c4c, %_TYPEDEF_sigset_t* %v3_11c64, i32 %v2_11c54)
  store i32 %v4_11c64, i32* %r0.global-to-local, align 4
  %v1_11c68 = load i32, i32* @r5, align 4
  %v9_11c68 = icmp eq i32 %v4_11c64, %v1_11c68
  br i1 %v9_11c68, label %dec_label_pc_11c70, label %dec_label_pc_11d94

dec_label_pc_11c70:                               ; preds = %dec_label_pc_11c54
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_11c54, i32* %r0.global-to-local, align 4
  %v2_11c78 = call i32 @function_113bc(i32 %v2_11c54, i32 17)
  store i32 %v2_11c78, i32* %r0.global-to-local, align 4
  %v1_11c7c = load i32, i32* @r5, align 4
  %v9_11c7c = icmp eq i32 %v2_11c78, %v1_11c7c
  br i1 %v9_11c7c, label %dec_label_pc_11c94.preheader, label %dec_label_pc_11c70.dec_label_pc_11d5c_crit_edge

dec_label_pc_11c70.dec_label_pc_11d5c_crit_edge:  ; preds = %dec_label_pc_11c70
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_11d5c

dec_label_pc_11c94.preheader:                     ; preds = %dec_label_pc_11c70
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11c8c

dec_label_pc_11c8c:                               ; preds = %dec_label_pc_11c94.preheader, %dec_label_pc_11c8c
  %v5_11c9c16 = phi i32 [ %v5_11c2817, %dec_label_pc_11c94.preheader ], [ %v5_11c9c, %dec_label_pc_11c8c ]
  %v2_11c90 = add i32 %v5_11c9c16, -136
  %v3_11c90 = inttoptr i32 %v2_11c90 to i32*
  store i32 0, i32* %v3_11c90, align 4
  %v0_11c94.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11c94 = add i32 %v0_11c94.pre, -1
  store i32 %v1_11c94, i32* %r1.global-to-local, align 4
  %v6_11c94 = icmp slt i32 %v1_11c94, 0
  %v4_11c9c = mul i32 %v1_11c94, 4
  %v5_11c9c = add i32 %v4_11c9c, %v16_11c00
  br i1 %v6_11c94, label %dec_label_pc_11ca4, label %dec_label_pc_11c8c

dec_label_pc_11ca4:                               ; preds = %dec_label_pc_11c8c
  store i32 %v2_11c30, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_11cac = call i32 @function_113e0()
  store i32 %v0_11cac, i32* %r0.global-to-local, align 4
  %v1_11cb0 = icmp slt i32 %v0_11cac, 0
  br i1 %v1_11cb0, label %dec_label_pc_11d94, label %dec_label_pc_11cb8

dec_label_pc_11cb8:                               ; preds = %dec_label_pc_11ca4
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_11cc4 = call i32 @function_120fc(i32 17, i32* null, i32 %v2_11c08)
  store i32 %v4_11cc4, i32* %r0.global-to-local, align 4
  %v1_11cc8 = icmp slt i32 %v4_11cc4, 0
  br i1 %v1_11cc8, label %dec_label_pc_11cd0, label %dec_label_pc_11cf8

dec_label_pc_11cd0:                               ; preds = %dec_label_pc_11cb8
  %v0_11cd0 = call i32 @function_10f64()
  store i32 %v2_11c54, i32* %r1.global-to-local, align 4
  store i32 %v0_11cd0, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11ce4 = inttoptr i32 %v0_11cd0 to i32*
  %v2_11ce4 = load i32, i32* %v1_11ce4, align 4
  store i32 %v2_11ce4, i32* @r4, align 4
  %v3_11ce8 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11ce8 = call i32 @function_10c38(i32 2, %_TYPEDEF_sigset_t* %v3_11ce8, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_11cf0 = load i32, i32* @r4, align 4
  %v1_11cf0 = load i32, i32* %r5.global-to-local, align 4
  %v2_11cf0 = inttoptr i32 %v1_11cf0 to i32*
  store i32 %v0_11cf0, i32* %v2_11cf0, align 4
  %v17_11d9c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d98

dec_label_pc_11cf8:                               ; preds = %dec_label_pc_11cb8
  %v2_11cf8 = load i32, i32* %stack_var_-424, align 4
  %v7_11cfc = icmp eq i32 %v2_11cf8, 1
  %v2_11d04 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_11d04, i32* @r4, align 4
  br i1 %v7_11cfc, label %dec_label_pc_11d0c, label %dec_label_pc_11d40

dec_label_pc_11d0c:                               ; preds = %dec_label_pc_11cf8
  store i32 %v2_11d04, i32* %r1.global-to-local, align 4
  store i32 %v2_11d04, i32* %r0.global-to-local, align 4
  %v2_11d14 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_11d14 = call i32 @function_12598(%timespec* %v2_11d14, i32 %v2_11d04)
  store i32 %v3_11d14, i32* %r0.global-to-local, align 4
  store i32 %v3_11d14, i32* %r6.global-to-local, align 4
  %v0_11d1c = call i32 @function_10f64()
  store i32 %v2_11c54, i32* %r1.global-to-local, align 4
  store i32 %v0_11d1c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11d30 = inttoptr i32 %v0_11d1c to i32*
  %v2_11d30 = load i32, i32* %v1_11d30, align 4
  store i32 %v2_11d30, i32* @r4, align 4
  %v3_11d34 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11d34 = call i32 @function_10c38(i32 2, %_TYPEDEF_sigset_t* %v3_11d34, i32 0)
  store i32 %v4_11d34, i32* %r0.global-to-local, align 4
  %v0_11d38 = load i32, i32* @r4, align 4
  %v1_11d38 = load i32, i32* %r5.global-to-local, align 4
  %v2_11d38 = inttoptr i32 %v1_11d38 to i32*
  store i32 %v0_11d38, i32* %v2_11d38, align 4
  %v0_11d68.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11d68

dec_label_pc_11d40:                               ; preds = %dec_label_pc_11cf8
  store i32 %v2_11c54, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_11d4c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11d4c = call i32 @function_10c38(i32 2, %_TYPEDEF_sigset_t* %v3_11d4c, i32 0)
  store i32 %v4_11d4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d5c

dec_label_pc_11d5c:                               ; preds = %dec_label_pc_11c70.dec_label_pc_11d5c_crit_edge, %dec_label_pc_11d40
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_11c70.dec_label_pc_11d5c_crit_edge ], [ %v2_11d04, %dec_label_pc_11d40 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_11d60 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_11d60 = call i32 @function_12598(%timespec* %v2_11d60, i32 %storemerge.pre-phi)
  store i32 %v3_11d60, i32* %r0.global-to-local, align 4
  store i32 %v3_11d60, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11d68

dec_label_pc_11d68:                               ; preds = %dec_label_pc_11d0c, %dec_label_pc_11d5c
  %v0_11d68 = phi i32 [ %v0_11d68.pr, %dec_label_pc_11d0c ], [ %v3_11d60, %dec_label_pc_11d5c ]
  %v2_11d68 = icmp eq i32 %v0_11d68, 0
  br i1 %v2_11d68, label %dec_label_pc_11d8c, label %dec_label_pc_11d70

dec_label_pc_11d70:                               ; preds = %dec_label_pc_11d68
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_11d78 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_11d78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d98

dec_label_pc_11d8c:                               ; preds = %dec_label_pc_11c00, %dec_label_pc_11d68
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d98

dec_label_pc_11d94:                               ; preds = %dec_label_pc_11c54, %dec_label_pc_11ca4, %dec_label_pc_11c30
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d98

dec_label_pc_11d98:                               ; preds = %dec_label_pc_11d70, %dec_label_pc_11d8c, %dec_label_pc_11cd0, %dec_label_pc_11d94
  %v17_11d9c = phi i32 [ %v3_11d78, %dec_label_pc_11d70 ], [ 0, %dec_label_pc_11d8c ], [ %v17_11d9c.pre, %dec_label_pc_11cd0 ], [ -1, %dec_label_pc_11d94 ]
  %v2_11d9c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11d9c, i32* @r4, align 4
  store i32 %v6_11c00, i32* @r5, align 4
  store i32 %v9_11c00, i32* @r6, align 4
  ret i32 %v17_11d9c

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_11d04, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_11c94, { 0, 2, 1 }
  uselistorder i32 %v2_11c54, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_11c4c, { 1, 0, 2 }
  uselistorder i32 %v1_11c20, { 0, 2, 1 }
  uselistorder i32 %v16_11c00, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 22, 10, 12, 13, 11, 15, 14, 16, 21, 17, 20, 18, 19, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_120fc, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_10c38, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_113e0, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11d98, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_11d94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d8c, { 1, 0 }
  uselistorder label %dec_label_pc_11d68, { 1, 0 }
  uselistorder label %dec_label_pc_11d5c, { 1, 0 }
  uselistorder label %dec_label_pc_11c8c, { 1, 0 }
  uselistorder label %dec_label_pc_11c18, { 1, 0 }
}

define i32 @function_11da4(i32 %arg1) local_unnamed_addr {
dec_label_pc_11dd0:
  %stack_var_-8 = alloca i32, align 4
  %v3_11da4 = load i32, i32* @r4, align 4
  store i32 %v3_11da4, i32* %stack_var_-8, align 4
  %v2_11dd4 = load i32, i32* @global_var_1b848.432, align 4
  %v2_11dd8 = icmp eq i32 %v2_11dd4, 0
  br i1 %v2_11dd8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_11dd0
  store i32 73188, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_11dd4)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11dd0, %bb
  %v2_11de8 = load i32, i32* @global_var_1b84c.434, align 4
  %v2_11dec = icmp eq i32 %v2_11de8, 0
  br i1 %v2_11dec, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_11df0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_11df0, i32* @r4, align 4
  %v9_11df0 = load i32, i32* @r0, align 4
  ret i32 %v9_11df0

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_11dfc.435 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_11de8)
  %v2_11dfc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11dfc, i32* @r4, align 4
  %v8_11dfc = load i32, i32* @r0, align 4
  ret i32 %v8_11dfc

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_11e10() local_unnamed_addr {
dec_label_pc_11e10:
  ret i32 0
}

define i32 @function_11e18(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_11e18:
  %v1_11e18 = load i32, i32* @r0, align 4
  ret i32 %v1_11e18
}

define i32 @function_11e1c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11e1c:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11e1c = load i32, i32* @r4, align 4
  store i32 %v3_11e1c, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_11e2c = call i32 @function_108f8(i32 %arg1, i32 1)
  %v7_11e30 = icmp eq i32 %v2_11e2c, -1
  br i1 %v7_11e30, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_11e1c
  %v3_11e34 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_11e34, i32* @r4, align 4
  ret i32 %v2_11e2c

bb4:                                              ; preds = %dec_label_pc_11e1c
  %v0_11e38 = load i32, i32* @r4, align 4
  %v4_11e40 = call i32 @function_10ae8(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13318.437, i32 0, i32 0), i32 %v0_11e38)
  %v1_11e44 = load i32, i32* %r5.global-to-local, align 4
  %v9_11e44 = icmp eq i32 %v4_11e40, %v1_11e44
  br i1 %v9_11e44, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_11e48 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_11e48, i32* @r4, align 4
  ret i32 %v4_11e40

bb6:                                              ; preds = %bb4
  %v0_11e4c = call i32 @function_11a24()
  %v0_11e50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11e50, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_11e4c

; uselistorder directives
  uselistorder i32 %v2_11e2c, { 1, 0 }
  uselistorder i1* @cpsr_z, { 11, 10, 0, 12, 9, 6, 7, 1, 2, 3, 4, 5, 8 }
  uselistorder i32 ()* @function_11a24, { 2, 1, 0, 3 }
  uselistorder i32 (i8*, i32)* @function_10ae8, { 7, 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_108f8, { 0, 3, 9, 8, 11, 10, 13, 12, 7, 6, 5, 4, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_11e54(i32 %arg1) local_unnamed_addr {
dec_label_pc_11e54:
  %v2_11e58 = load i32, i32* @global_var_1b850.439, align 4
  %v2_11e5c = icmp eq i32 %v2_11e58, 0
  br i1 %v2_11e5c, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_11e54
  %v6_11e68 = load i32, i32* @r0, align 4
  ret i32 %v6_11e68

bb2:                                              ; preds = %dec_label_pc_11e54
  store i32 1, i32* @global_var_1b850.439, align 4
  store i32 4096, i32* @global_var_1b844.393, align 4
  ret i32 undef
}

define i32 @function_11eb0(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_11eb0:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_11eb4 = mul i32 %arg2, 4
  %v5_11eb4 = add i32 %tmp, %v4_11eb4
  %v2_11eb8 = load i32, i32* %arg3, align 4
  %v2_11ebc = ptrtoint i32* %stack_var_-120 to i32
  %v1_11ec0 = add i32 %v5_11eb4, 4
  %v9_11ec4 = icmp eq i32 %v1_11ec0, %v2_11eb8
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1b83c.444, align 4
  store i32 %v1_11ec0, i32* @global_var_1b840.446, align 4
  store i32 %arg6, i32* @global_var_1b84c.434, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_11ec4, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_11eb0
  store i32 %v5_11eb4, i32* @global_var_1b840.446, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_11eb0, %bb
  %v2_11f04 = bitcast i32* %stack_var_-120 to i8*
  %v3_11f04 = call i32 @function_10fd0(i8* %v2_11f04, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1b840.446, align 4
  br label %dec_label_pc_11f14

dec_label_pc_11f14:                               ; preds = %dec_label_pc_11f14, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_11f14, %dec_label_pc_11f14 ]
  %v1_11f14 = inttoptr i32 %storemerge to i32*
  %v2_11f14 = load i32, i32* %v1_11f14, align 4
  %v4_11f14 = add i32 %storemerge, 4
  %v2_11f18 = icmp eq i32 %v2_11f14, 0
  br i1 %v2_11f18, label %dec_label_pc_11f24, label %dec_label_pc_11f14

dec_label_pc_11f24:                               ; preds = %dec_label_pc_11f14
  store i32 %v4_11f14, i32* @r4, align 4
  %v1_11f4422 = inttoptr i32 %v4_11f14 to i32*
  %v2_11f4423 = load i32, i32* %v1_11f4422, align 4
  %v2_11f4825 = icmp eq i32 %v2_11f4423, 0
  br i1 %v2_11f4825, label %dec_label_pc_11f50, label %dec_label_pc_11f2c

dec_label_pc_11f2c:                               ; preds = %dec_label_pc_11f24, %dec_label_pc_11f44
  %v5_11f30 = phi i32 [ %v2_11f44, %dec_label_pc_11f44 ], [ %v2_11f4423, %dec_label_pc_11f24 ]
  %v2_11f2c = icmp ugt i32 %v5_11f30, 13
  %v7_11f2c = icmp eq i32 %v5_11f30, 14
  %v2_11f30 = xor i1 %v2_11f2c, true
  %v3_11f30 = or i1 %v7_11f2c, %v2_11f30
  br i1 %v3_11f30, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_11f2c
  %v6_11f30 = and i32 %v5_11f30, 536870912
  %v7_11f30 = icmp ne i32 %v6_11f30, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_11f2c, %bb42
  %v1_11f3c = phi i1 [ %v2_11f2c, %dec_label_pc_11f2c ], [ %v7_11f30, %bb42 ]
  %v2_11f34 = xor i1 %v1_11f3c, true
  %v3_11f34 = or i1 %v7_11f2c, %v2_11f34
  br i1 %v3_11f34, label %bb44, label %dec_label_pc_11f44

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_11f44

dec_label_pc_11f44:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_11f34, i32 ptrtoint (i32* @global_var_10fb0.448 to i32))
  %v0_11f40 = load i32, i32* @r4, align 4
  %v1_11f40 = add i32 %v0_11f40, 8
  store i32 %v1_11f40, i32* @r4, align 4
  %v1_11f44 = inttoptr i32 %v1_11f40 to i32*
  %v2_11f44 = load i32, i32* %v1_11f44, align 4
  %v2_11f48 = icmp eq i32 %v2_11f44, 0
  br i1 %v2_11f48, label %dec_label_pc_11f50, label %dec_label_pc_11f2c

dec_label_pc_11f50:                               ; preds = %dec_label_pc_11f44, %dec_label_pc_11f24
  %v1_11f54 = call i32 @function_12fc4(i32 %v2_11ebc)
  store i32 %v1_11f54, i32* @r0, align 4
  %v1_11f58 = call i32 @function_11e54(i32 %v1_11f54)
  store i32 %v1_11f58, i32* @r0, align 4
  %v2_11f64 = icmp eq i32 %tmp37, 0
  br i1 %v2_11f64, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_11f50
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_11f50, %bb45
  %v0_11f74 = phi i32 [ %tmp37, %dec_label_pc_11f50 ], [ 4096, %bb45 ]
  %v3_11f6c = icmp eq i32 %tmp36, -1
  %v8_11f6c = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1b844.393 to i32), i32* @r2, align 4
  store i32 %v0_11f74, i32* @global_var_1b844.393, align 4
  br i1 %v3_11f6c, label %dec_label_pc_11f7c, label %dec_label_pc_11fa4

dec_label_pc_11f7c:                               ; preds = %bb46
  %v0_11f7c = call i32 @function_12508()
  store i32 %v0_11f7c, i32* @r0, align 4
  store i32 %v0_11f7c, i32* @r4, align 4
  %v0_11f84 = call i32 @function_124b0()
  %v0_11f88 = load i32, i32* @r4, align 4
  %v9_11f88 = icmp eq i32 %v0_11f88, %v0_11f84
  br i1 %v9_11f88, label %dec_label_pc_11f90, label %dec_label_pc_11fcc

dec_label_pc_11f90:                               ; preds = %dec_label_pc_11f7c
  %v1_11f90 = call i32 @function_124dc(i32 %v0_11f84)
  store i32 %v1_11f90, i32* @r0, align 4
  store i32 %v1_11f90, i32* @r4, align 4
  %v0_11f98 = call i32 @function_12484()
  %v0_11f9c = load i32, i32* @r4, align 4
  %v9_11f9c = icmp eq i32 %v0_11f9c, %v0_11f98
  br i1 %v9_11f9c, label %dec_label_pc_11fa4, label %dec_label_pc_11fcc

dec_label_pc_11fa4:                               ; preds = %dec_label_pc_11f90, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_11f6c, label %dec_label_pc_12038, label %dec_label_pc_11fb0

dec_label_pc_11fb0:                               ; preds = %dec_label_pc_11fa4
  %v9_11fb4 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_11fb4, label %dec_label_pc_11fbc, label %dec_label_pc_11fcc

dec_label_pc_11fbc:                               ; preds = %dec_label_pc_11fb0
  br label %dec_label_pc_11fcc

dec_label_pc_11fcc:                               ; preds = %dec_label_pc_11fbc, %dec_label_pc_11fb0, %dec_label_pc_11f90, %dec_label_pc_11f7c
  %v2_11fd4 = call i32 @function_11e1c(i32 0, i32 32768)
  %v2_11fe0 = call i32 @function_11e1c(i32 1, i32 32770)
  %v2_11fec = call i32 @function_11e1c(i32 2, i32 32770)
  br label %dec_label_pc_12038

dec_label_pc_12038:                               ; preds = %dec_label_pc_11fcc, %dec_label_pc_11fa4
  %v0_11ffc = load i32, i32* %r6.global-to-local, align 4
  %v1_11ffc = inttoptr i32 %v0_11ffc to i32*
  %v2_11ffc = load i32, i32* %v1_11ffc, align 4
  store i32 %v2_11ffc, i32* @global_var_1b794, align 4
  store i32 %arg5, i32* @global_var_1b848.432, align 4
  %v2_12038 = icmp eq i32 %arg4, 0
  br i1 %v2_12038, label %dec_label_pc_12074, label %bb47

bb47:                                             ; preds = %dec_label_pc_12038
  br label %dec_label_pc_12074

dec_label_pc_12074:                               ; preds = %dec_label_pc_12038, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_12084 = call i32 @function_10f64()
  %v2_1208c = inttoptr i32 %v1_12084 to i32*
  store i32 0, i32* %v2_1208c, align 4
  %v0_120b8 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_120c4 = call i32 @function_11b6c(i32 %v0_120b8)
  ret i32 %v1_120c4

; uselistorder directives
  uselistorder i32 %v2_11f44, { 1, 0 }
  uselistorder i32 %v1_11f40, { 1, 0 }
  uselistorder i1 %v2_11f2c, { 1, 0 }
  uselistorder i32 %v4_11f14, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_11b6c, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_11e1c, { 2, 0, 1 }
  uselistorder i32 32768, { 3, 5, 2, 0, 4, 1 }
  uselistorder i32* @global_var_1b844.393, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 6, 4, 7, 2, 5, 8, 9 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 73, 2, 3, 4, 5, 6, 48, 7, 8, 9, 10, 11, 15, 16, 17, 74, 75, 76, 77, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 18, 19, 94, 95, 96, 49, 65, 13, 14, 64, 12, 97, 31, 30, 54, 60, 55, 61, 52, 59, 53, 63, 98, 20, 99, 100, 21, 22, 23, 101, 67, 68, 24, 25, 102, 69, 70, 26, 27, 103, 71, 72, 28, 29, 51, 104, 105, 62, 106, 32, 56, 33, 34, 46, 57, 35, 47, 36, 37, 38, 58, 39, 50, 40, 41, 42, 43, 44, 45 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_12074, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_11f44, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_11f2c, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_120fc(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_120fc:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_120fc = load i32, i32* @r4, align 4
  %v6_120fc = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_12100 = icmp eq i32* %arg2, null
  %v2_12104 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_12100, label %dec_label_pc_12170, label %dec_label_pc_12114

dec_label_pc_12114:                               ; preds = %dec_label_pc_120fc
  %v2_12118 = load i32, i32* %arg2, align 4
  %v4_12118 = add i32 %tmp, 4
  store i32 %v4_12118, i32* @r1, align 4
  %v2_1211c = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_1211c, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_12118, i32* %stack_var_-156, align 4
  %v3_12128 = call i32 @function_10fb0(i32 %v2_1211c, i32 %v4_12118, i32 128)
  store i32 %v3_12128, i32* %r0.global-to-local, align 4
  %v0_1212c = load i32, i32* @r4, align 4
  %v1_1212c = add i32 %v0_1212c, 132
  %v2_1212c = inttoptr i32 %v1_1212c to i32*
  %v3_1212c = load i32, i32* %v2_1212c, align 4
  %v1_12130 = and i32 %v3_1212c, 67108864
  %v2_12130 = icmp eq i32 %v1_12130, 0
  br i1 %v2_12130, label %dec_label_pc_12144, label %bb

bb:                                               ; preds = %dec_label_pc_12114
  br label %dec_label_pc_12160

dec_label_pc_12144:                               ; preds = %dec_label_pc_12114
  %v1_1214c = and i32 %v3_1212c, 4
  %v2_1214c = icmp eq i32 %v1_1214c, 0
  br i1 %v2_1214c, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_12144
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_12144, %bb20
  br label %dec_label_pc_12160

dec_label_pc_12160:                               ; preds = %bb, %bb21
  %v2_12160 = icmp eq i32 %v0_1212c, 0
  %v3_12164 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_12164 = select i1 %v2_12160, i32 0, i32 %v3_12164
  %v0_12170.pre = load i32, i32* @r5, align 4
  %v0_12180.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12170

dec_label_pc_12170:                               ; preds = %dec_label_pc_12160, %dec_label_pc_120fc
  %v0_12180 = phi i32 [ %arg1, %dec_label_pc_120fc ], [ %v0_12180.pre, %dec_label_pc_12160 ]
  %v0_12170 = phi i32 [ %arg3, %dec_label_pc_120fc ], [ %v0_12170.pre, %dec_label_pc_12160 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_120fc ], [ %.v3_12164, %dec_label_pc_12160 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_12170 = icmp eq i32 %v0_12170, 0
  %.v2_12104 = select i1 %v2_12170, i32 0, i32 %v2_12104
  store i32 %.v2_12104, i32* @r2, align 4
  store i32 %v0_12180, i32* %r0.global-to-local, align 4
  %v1_12184 = call i32 @function_121e8(i32 %v0_12180)
  store i32 %v1_12184, i32* %r0.global-to-local, align 4
  %v0_12188 = load i32, i32* @r5, align 4
  %v2_12188 = icmp eq i32 %v0_12188, 0
  br i1 %v2_12188, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_12170
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_12170, %bb25
  %v0_12198.pr = phi i32 [ 0, %dec_label_pc_12170 ], [ 1, %bb25 ]
  %v1_12190 = icmp slt i32 %v1_12184, 0
  br i1 %v1_12190, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_121cc

thread-pre-split:                                 ; preds = %bb26
  %v2_12198 = icmp eq i32 %v0_12198.pr, 0
  store i32 %v1_12184, i32* @r4, align 4
  br i1 %v2_12198, label %dec_label_pc_121cc, label %dec_label_pc_121a4

dec_label_pc_121a4:                               ; preds = %thread-pre-split
  %v2_121a4 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_12188, i32* %r0.global-to-local, align 4
  %v2_121ac = inttoptr i32 %v0_12188 to i32*
  store i32 %v2_121a4, i32* %v2_121ac, align 4
  %v3_121ac = load i32, i32* %r0.global-to-local, align 4
  %v4_121ac = add i32 %v3_121ac, 4
  store i32 %v4_121ac, i32* @r0, align 4
  %v2_121b0 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_121b0, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_121b8 = call i32 @function_10fb0(i32 %v4_121ac, i32 %v2_121b0, i32 128)
  store i32 %v3_121b8, i32* %r0.global-to-local, align 4
  %v1_121c0 = load i32, i32* @r5, align 4
  %v2_121c0 = add i32 %v1_121c0, 136
  %v3_121c0 = inttoptr i32 %v2_121c0 to i32*
  %v1_121c8 = load i32, i32* @r5, align 4
  %v2_121c8 = add i32 %v1_121c8, 132
  %v3_121c8 = inttoptr i32 %v2_121c8 to i32*
  %v0_121cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_121cc

dec_label_pc_121cc:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_121a4
  %v0_121cc = phi i32 [ %v1_12184, %thread-pre-split ], [ %v0_121cc.pre, %dec_label_pc_121a4 ], [ %v1_12184, %thread-pre-split.thread ]
  store i32 %v0_121cc, i32* %r0.global-to-local, align 4
  store i32 %v3_120fc, i32* @r4, align 4
  store i32 %v6_120fc, i32* @r5, align 4
  ret i32 %v0_121cc

; uselistorder directives
  uselistorder i32 %v0_121cc, { 1, 0 }
  uselistorder i32 %v0_12188, { 1, 0, 2 }
  uselistorder i32 %v0_12180, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_121cc, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_12160, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_121e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_121e8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_121e8 = load i32, i32* @r4, align 4
  store i32 %v3_121e8, i32* %stack_var_-8, align 4
  %v1_121ec = load i32, i32* @r1, align 4
  %v2_121ec = inttoptr i32 %v1_121ec to %sigaction*
  %v3_121ec = load i32, i32* @r2, align 4
  %v4_121ec = inttoptr i32 %v3_121ec to %sigaction*
  %v5_121ec = call i32 @sigaction(i32 %arg1, %sigaction* %v2_121ec, %sigaction* %v4_121ec)
  store i32 %v5_121ec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_121ec, -4095
  br i1 %tmp, label %dec_label_pc_1220c, label %dec_label_pc_121fc

dec_label_pc_121fc:                               ; preds = %dec_label_pc_121e8
  %v0_121fc = call i32 @function_10f64()
  %v0_12200 = load i32, i32* %r4.global-to-local, align 4
  %v1_12200 = sub i32 0, %v0_12200
  %v2_12204 = inttoptr i32 %v0_121fc to i32*
  store i32 %v1_12200, i32* %v2_12204, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1220c

dec_label_pc_1220c:                               ; preds = %dec_label_pc_121e8, %dec_label_pc_121fc
  %v0_1220c = phi i32 [ %v5_121ec, %dec_label_pc_121e8 ], [ -1, %dec_label_pc_121fc ]
  %v2_12210 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12210, i32* %r4.global-to-local, align 4
  ret i32 %v0_1220c

; uselistorder directives
  uselistorder i32 %v5_121ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1220c, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_12214(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_12214:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_1223c() local_unnamed_addr {
dec_label_pc_1223c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_1224c = load i32, i32* @r0, align 4
  %v4_1224c = call i32 @fstat(i32 %v0_1224c, %stat* %tmp4)
  store i32 %v4_1224c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1224c, -4095
  br i1 %tmp, label %dec_label_pc_12270, label %dec_label_pc_1225c

dec_label_pc_1225c:                               ; preds = %dec_label_pc_1223c
  %v0_1225c = call i32 @function_10f64()
  %v0_12260 = load i32, i32* %r4.global-to-local, align 4
  %v1_12260 = sub i32 0, %v0_12260
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12268 = inttoptr i32 %v0_1225c to i32*
  store i32 %v1_12260, i32* %v2_12268, align 4
  br label %dec_label_pc_12280

dec_label_pc_12270:                               ; preds = %dec_label_pc_1223c
  %v2_12270 = icmp eq i32 %v4_1224c, 0
  store i32 74368, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12270, i32 ptrtoint (i32* @global_var_12958.465 to i32))
  br label %dec_label_pc_12280

dec_label_pc_12280:                               ; preds = %dec_label_pc_1225c, %dec_label_pc_12270
  %v0_12280 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_12280

; uselistorder directives
  uselistorder i32 %v4_1224c, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 7, 15, 13, 14, 11, 12, 3, 0, 1, 2, 4, 5, 6, 8, 9, 10 }
  uselistorder label %dec_label_pc_12280, { 1, 0 }
}

define i32 @function_1228c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1228c:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_1228c = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12294 = call i32 @function_12320()
  store i32 %v0_12294, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_12294, 1
  br i1 %tmp8, label %dec_label_pc_12318, label %dec_label_pc_12304.preheader

dec_label_pc_12304.preheader:                     ; preds = %dec_label_pc_1228c
  %v5_1229c = load i32, i32* @r4, align 4
  %v7_1229c = add i32 %v5_1229c, %v0_12294
  store i32 %v7_1229c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12304

dec_label_pc_122a8:                               ; preds = %dec_label_pc_12304
  %v1_122a8 = add i32 %v2_122b8, 16
  %v2_122a8 = inttoptr i32 %v1_122a8 to i32*
  %v3_122a8 = load i32, i32* %v2_122a8, align 4
  store i32 %v3_122a8, i32* @lr, align 4
  %v2_122ac = inttoptr i32 %v1_12308 to i32*
  %v3_122ac = load i32, i32* %v2_122ac, align 4
  store i32 %v3_122ac, i32* %r2.global-to-local, align 4
  %v1_122b0 = add i32 %v2_122b8, 18
  %v2_122b0 = inttoptr i32 %v1_122b0 to i8*
  %v3_122b0 = load i8, i8* %v2_122b0, align 1
  %v4_122b0 = zext i8 %v3_122b0 to i32
  store i32 %v4_122b0, i32* %ip.global-to-local, align 4
  %v3_122b4 = sdiv i32 %v3_122a8, 256
  store i32 %v3_122b4, i32* %r3.global-to-local, align 4
  %v1_122b8 = trunc i32 %v3_122a8 to i8
  %v4_122b8 = inttoptr i32 %v1_12308 to i8*
  store i8 %v1_122b8, i8* %v4_122b8, align 1
  %v0_122bc = load i32, i32* %r2.global-to-local, align 4
  %v1_122bc = load i32, i32* @r4, align 4
  %v2_122bc = add i32 %v1_122bc, 4
  %v3_122bc = inttoptr i32 %v2_122bc to i32*
  store i32 %v0_122bc, i32* %v3_122bc, align 4
  %v0_122c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_122c0 = trunc i32 %v0_122c0 to i8
  %v2_122c0 = load i32, i32* @r4, align 4
  %v3_122c0 = add i32 %v2_122c0, 10
  %v4_122c0 = inttoptr i32 %v3_122c0 to i8*
  store i8 %v1_122c0, i8* %v4_122c0, align 1
  %v0_122c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_122c4 = trunc i32 %v0_122c4 to i8
  %v2_122c4 = load i32, i32* @r4, align 4
  %v3_122c4 = add i32 %v2_122c4, 9
  %v4_122c4 = inttoptr i32 %v3_122c4 to i8*
  store i8 %v1_122c4, i8* %v4_122c4, align 1
  %v0_122c8 = load i32, i32* @r4, align 4
  %v1_122c8 = add i32 %v0_122c8, 8
  %v2_122c8 = inttoptr i32 %v1_122c8 to i8*
  %v3_122c8 = load i8, i8* %v2_122c8, align 1
  %v4_122c8 = zext i8 %v3_122c8 to i32
  store i32 %v4_122c8, i32* %r2.global-to-local, align 4
  %v0_122cc = load i32, i32* @r5, align 4
  %v1_122cc = add i32 %v0_122cc, 1
  %v2_122cc = inttoptr i32 %v1_122cc to i8*
  %v3_122cc = load i8, i8* %v2_122cc, align 1
  %v4_122cc = zext i8 %v3_122cc to i32
  store i32 %v4_122cc, i32* %r3.global-to-local, align 4
  %v4_122d0 = mul nuw nsw i32 %v4_122cc, 256
  %v5_122d0 = or i32 %v4_122d0, %v4_122c8
  %v1_122d4 = add nsw i32 %v5_122d0, -19
  store i32 %v1_122d4, i32* @r2, align 4
  %v3_122d8 = call i32 @function_10fc0(i32 %v1_12310, i32 %v1_1230c, i32 %v1_122d4)
  %v0_122dc = load i32, i32* @r4, align 4
  %v1_122dc = add i32 %v0_122dc, 8
  %v2_122dc = inttoptr i32 %v1_122dc to i8*
  %v3_122dc = load i8, i8* %v2_122dc, align 1
  %v4_122dc = zext i8 %v3_122dc to i32
  store i32 %v4_122dc, i32* %r3.global-to-local, align 4
  %v0_122e0 = load i32, i32* @r5, align 4
  %v1_122e0 = add i32 %v0_122e0, 1
  %v2_122e0 = inttoptr i32 %v1_122e0 to i8*
  %v3_122e0 = load i8, i8* %v2_122e0, align 1
  %v4_122e0 = zext i8 %v3_122e0 to i32
  store i32 %v0_122dc, i32* @r0, align 4
  %v4_122e8 = mul nuw nsw i32 %v4_122e0, 256
  %v5_122e8 = or i32 %v4_122e8, %v4_122dc
  store i32 %v5_122e8, i32* @r2, align 4
  store i32 %v0_122dc, i32* @r1, align 4
  %v3_122f0 = call i32 @function_10fc0(i32 %v0_122dc, i32 %v0_122dc, i32 %v5_122e8)
  %v0_122f4 = load i32, i32* @r4, align 4
  %v1_122f4 = add i32 %v0_122f4, 8
  %v2_122f4 = inttoptr i32 %v1_122f4 to i8*
  %v3_122f4 = load i8, i8* %v2_122f4, align 1
  %v4_122f4 = zext i8 %v3_122f4 to i32
  store i32 %v4_122f4, i32* %r3.global-to-local, align 4
  %v0_122f8 = load i32, i32* @r5, align 4
  %v1_122f8 = add i32 %v0_122f8, 1
  %v2_122f8 = inttoptr i32 %v1_122f8 to i8*
  %v3_122f8 = load i8, i8* %v2_122f8, align 1
  %v4_122f8 = zext i8 %v3_122f8 to i32
  store i32 %v4_122f8, i32* @r2, align 4
  %v4_122fc = mul nuw nsw i32 %v4_122f8, 256
  %v5_122fc = or i32 %v4_122fc, %v4_122f4
  store i32 %v5_122fc, i32* %r3.global-to-local, align 4
  %v2_12300 = add i32 %v5_122fc, %v0_122f4
  store i32 %v2_12300, i32* @r4, align 4
  %v1_12304.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12304

dec_label_pc_12304:                               ; preds = %dec_label_pc_12304.preheader, %dec_label_pc_122a8
  %v1_12304 = phi i32 [ %v7_1229c, %dec_label_pc_12304.preheader ], [ %v1_12304.pre, %dec_label_pc_122a8 ]
  %v2_122b8 = phi i32 [ %v5_1229c, %dec_label_pc_12304.preheader ], [ %v2_12300, %dec_label_pc_122a8 ]
  %v3_12304 = icmp ult i32 %v2_122b8, %v1_12304
  %v1_12308 = add i32 %v2_122b8, 8
  store i32 %v1_12308, i32* @r5, align 4
  %v1_1230c = add i32 %v2_122b8, 19
  store i32 %v1_1230c, i32* @r1, align 4
  %v1_12310 = add i32 %v2_122b8, 11
  store i32 %v1_12310, i32* @r0, align 4
  br i1 %v3_12304, label %dec_label_pc_122a8, label %dec_label_pc_12318.loopexit

dec_label_pc_12318.loopexit:                      ; preds = %dec_label_pc_12304
  %v0_12318.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12318

dec_label_pc_12318:                               ; preds = %dec_label_pc_1228c, %dec_label_pc_12318.loopexit
  %v0_12318 = phi i32 [ %v0_12318.pre, %dec_label_pc_12318.loopexit ], [ %v0_12294, %dec_label_pc_1228c ]
  store i32 %v6_1228c, i32* @r5, align 4
  ret i32 %v0_12318

; uselistorder directives
  uselistorder i32 %v1_12310, { 1, 0 }
  uselistorder i32 %v1_1230c, { 1, 0 }
  uselistorder i32 %v1_12308, { 2, 1, 0 }
  uselistorder i32 %v2_122b8, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_122dc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_122a8, { 1, 0, 2 }
  uselistorder i32 %v5_1229c, { 1, 0 }
  uselistorder i32 %v0_12294, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_10fc0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12318, { 1, 0 }
  uselistorder label %dec_label_pc_12304, { 1, 0 }
}

define i32 @function_12320() local_unnamed_addr {
dec_label_pc_12320:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_12324 = load i32, i32* @r4, align 4
  %v9_12324 = load i32, i32* @r6, align 4
  %v0_12328 = load i32, i32* @r2, align 4
  %v1_12328 = add i32 %v0_12328, 6
  %v2_12330 = ptrtoint i32* %stack_var_-60 to i32
  %v1_12334 = and i32 %v1_12328, -4
  store i32 %v1_12334, i32* %r3.global-to-local, align 4
  %v2_12338 = sub i32 %v2_12330, %v1_12334
  %v0_1233c = load i32, i32* @r1, align 4
  store i32 %v0_1233c, i32* %r8.global-to-local, align 4
  store i32 %v0_12328, i32* %stack_var_-60, align 4
  store i32 %v2_12338, i32* %sl.global-to-local, align 4
  %v0_12348 = load i32, i32* @r0, align 4
  %v1_1234c = inttoptr i32 %v2_12338 to %linux_dirent64*
  store i32 %v2_12338, i32* %r1.global-to-local, align 4
  %v5_12350 = call i32 @getdents64(i32 %v0_12348, %linux_dirent64* %v1_1234c, i32 %v0_12328)
  store i32 %v5_12350, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_12350, -4095
  br i1 %tmp, label %dec_label_pc_12374, label %dec_label_pc_12360

dec_label_pc_12360:                               ; preds = %dec_label_pc_12320
  %v0_12360 = call i32 @function_10f64()
  %v0_12364 = load i32, i32* @r6, align 4
  %v1_12364 = sub i32 0, %v0_12364
  store i32 %v1_12364, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_1236c = inttoptr i32 %v0_12360 to i32*
  store i32 %v1_12364, i32* %v2_1236c, align 4
  %v0_1237c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1237c

dec_label_pc_12374:                               ; preds = %dec_label_pc_12320
  br i1 false, label %dec_label_pc_1237c, label %dec_label_pc_12384

dec_label_pc_1237c:                               ; preds = %dec_label_pc_12374, %dec_label_pc_12360
  %v0_1237c = phi i32 [ -1, %dec_label_pc_12374 ], [ %v0_1237c.pre, %dec_label_pc_12360 ]
  store i32 %v0_1237c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12478

dec_label_pc_12384:                               ; preds = %dec_label_pc_12374
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_1238c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1238c, i32* @r5, align 4
  %v0_12390 = load i32, i32* @sp, align 4
  store i32 %v0_12390, i32* @r4, align 4
  br label %dec_label_pc_12454

dec_label_pc_123a0:                               ; preds = %dec_label_pc_12454
  %v2_1246c = add i32 %v3_12458, %v0_1246c
  %v1_123a0 = add i32 %v0_123a4, 17
  %v2_123a0 = inttoptr i32 %v1_123a0 to i8*
  %v3_123a0 = load i8, i8* %v2_123a0, align 1
  %v4_123a0 = zext i8 %v3_123a0 to i32
  %v2_123a4 = inttoptr i32 %v1_12460 to i8*
  %v3_123a4 = load i8, i8* %v2_123a4, align 1
  %v4_123a4 = zext i8 %v3_123a4 to i32
  %v4_123a8 = mul nuw nsw i32 %v4_123a0, 256
  %v5_123a8 = or i32 %v4_123a4, %v4_123a8
  %v1_123ac = add nuw nsw i32 %v5_123a8, 3
  %v1_123b0 = and i32 %v1_123ac, 131068
  store i32 %v1_123b0, i32* %r3.global-to-local, align 4
  %v2_123b4 = add i32 %v1_123b0, %v2_123f4
  store i32 %v2_123b4, i32* %sb.global-to-local, align 4
  %v9_123b8 = icmp eq i32 %v2_123b4, %v2_1246c
  %v1_123bc = and i32 %v1_123ac, 128
  %v2_123c0 = icmp eq i32 %v1_123bc, 0
  %v3_123c0 = or i1 %v9_123b8, %v2_123c0
  br i1 %v3_123c0, label %dec_label_pc_123f4, label %dec_label_pc_123c4

dec_label_pc_123c4:                               ; preds = %dec_label_pc_123a0
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_123d4 = call i32 @function_12534(i32 %v0_12348, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_123d8 = load i32, i32* @r5, align 4
  %v1_123d8 = load i32, i32* %r8.global-to-local, align 4
  %v9_123d8 = icmp eq i32 %v0_123d8, %v1_123d8
  br i1 %v9_123d8, label %dec_label_pc_123e0, label %dec_label_pc_12474

dec_label_pc_123e0:                               ; preds = %dec_label_pc_123c4
  %v0_123e0 = call i32 @function_10f64()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_123ec = inttoptr i32 %v0_123e0 to i32*
  store i32 22, i32* %v2_123ec, align 4
  %v0_12478.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12478

dec_label_pc_123f4:                               ; preds = %dec_label_pc_123a0
  %v3_123bc11 = udiv i32 %v1_123ac, 256
  %v1_123f4 = trunc i32 %v3_123bc11 to i8
  %v3_123f4 = add i32 %v2_123f4, 17
  %v4_123f4 = inttoptr i32 %v3_123f4 to i8*
  store i8 %v1_123f4, i8* %v4_123f4, align 1
  %v0_123f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_123f8 = trunc i32 %v0_123f8 to i8
  %v2_123f8 = load i32, i32* @r5, align 4
  %v3_123f8 = add i32 %v2_123f8, 16
  %v4_123f8 = inttoptr i32 %v3_123f8 to i8*
  store i8 %v1_123f8, i8* %v4_123f8, align 1
  %v0_123fc = load i32, i32* @r4, align 4
  %v1_123fc = add i32 %v0_123fc, 8
  %v1_12400 = inttoptr i32 %v1_123fc to i32*
  %v2_12400 = load i32, i32* %v1_12400, align 4
  %v3_12400 = add i32 %v0_123fc, 12
  %v4_12400 = inttoptr i32 %v3_12400 to i32*
  %v5_12400 = load i32, i32* %v4_12400, align 4
  store i32 %v5_12400, i32* %r3.global-to-local, align 4
  %v1_1240c = inttoptr i32 %v0_123fc to i32*
  %v2_1240c = load i32, i32* %v1_1240c, align 4
  %v3_1240c = add i32 %v0_123fc, 4
  %v4_1240c = inttoptr i32 %v3_1240c to i32*
  %v5_1240c = load i32, i32* %v4_1240c, align 4
  store i32 %v5_1240c, i32* %r3.global-to-local, align 4
  %v0_12410 = load i32, i32* @r5, align 4
  %v1_12410 = inttoptr i32 %v0_12410 to i32*
  store i32 %v2_1240c, i32* %v1_12410, align 4
  %v3_12410 = add i32 %v0_12410, 4
  %v4_12410 = inttoptr i32 %v3_12410 to i32*
  %v5_12410 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_12410, i32* %v4_12410, align 4
  %v0_12414 = load i32, i32* @r4, align 4
  %v1_12414 = add i32 %v0_12414, 8
  %v1_12418 = inttoptr i32 %v1_12414 to i32*
  %v2_12418 = load i32, i32* %v1_12418, align 4
  %v3_12418 = add i32 %v0_12414, 12
  %v4_12418 = inttoptr i32 %v3_12418 to i32*
  %v5_12418 = load i32, i32* %v4_12418, align 4
  store i32 %v5_12418, i32* %r3.global-to-local, align 4
  %v1_1241c = load i32, i32* @r5, align 4
  %v2_1241c = add i32 %v1_1241c, 8
  %v3_1241c = inttoptr i32 %v2_1241c to i32*
  store i32 %v2_12418, i32* %v3_1241c, align 4
  %v0_12420 = load i32, i32* %r3.global-to-local, align 4
  %v1_12420 = load i32, i32* @r5, align 4
  %v2_12420 = add i32 %v1_12420, 12
  %v3_12420 = inttoptr i32 %v2_12420 to i32*
  store i32 %v0_12420, i32* %v3_12420, align 4
  %v0_12424 = load i32, i32* @r4, align 4
  %v1_12424 = add i32 %v0_12424, 18
  %v2_12424 = inttoptr i32 %v1_12424 to i8*
  %v3_12424 = load i8, i8* %v2_12424, align 1
  %v4_12424 = zext i8 %v3_12424 to i32
  store i32 %v4_12424, i32* %r3.global-to-local, align 4
  %v2_12428 = load i32, i32* @r5, align 4
  %v3_12428 = add i32 %v2_12428, 18
  %v4_12428 = inttoptr i32 %v3_12428 to i8*
  store i8 %v3_12424, i8* %v4_12428, align 1
  %v0_1242c = load i32, i32* @r4, align 4
  %v1_1242c = add i32 %v0_1242c, 16
  %v2_1242c = inttoptr i32 %v1_1242c to i8*
  %v3_1242c = load i8, i8* %v2_1242c, align 1
  %v4_1242c = zext i8 %v3_1242c to i32
  %v0_12430 = load i32, i32* %r7.global-to-local, align 4
  %v1_12430 = add i32 %v0_12430, 1
  %v2_12430 = inttoptr i32 %v1_12430 to i8*
  %v3_12430 = load i8, i8* %v2_12430, align 1
  %v4_12430 = zext i8 %v3_12430 to i32
  store i32 %v4_12430, i32* %r3.global-to-local, align 4
  %v4_12434 = mul nuw nsw i32 %v4_12430, 256
  %v5_12434 = or i32 %v4_12434, %v4_1242c
  %v1_12438 = add nsw i32 %v5_12434, -19
  store i32 %v1_12438, i32* @r2, align 4
  %v3_1243c = call i32 @function_10fb0(i32 %v1_12464, i32 %v1_12468, i32 %v1_12438)
  %v0_12440 = load i32, i32* @r4, align 4
  %v1_12440 = add i32 %v0_12440, 16
  %v2_12440 = inttoptr i32 %v1_12440 to i8*
  %v3_12440 = load i8, i8* %v2_12440, align 1
  %v4_12440 = zext i8 %v3_12440 to i32
  store i32 %v4_12440, i32* %r3.global-to-local, align 4
  %v0_12444 = load i32, i32* %r7.global-to-local, align 4
  %v1_12444 = add i32 %v0_12444, 1
  %v2_12444 = inttoptr i32 %v1_12444 to i8*
  %v3_12444 = load i8, i8* %v2_12444, align 1
  %v4_12444 = zext i8 %v3_12444 to i32
  %v4_12448 = mul nuw nsw i32 %v4_12444, 256
  %v5_12448 = or i32 %v4_12448, %v4_12440
  store i32 %v5_12448, i32* %r3.global-to-local, align 4
  %v2_1244c = add i32 %v5_12448, %v0_12440
  store i32 %v2_1244c, i32* @r4, align 4
  %v0_12450 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12450, i32* @r5, align 4
  %v1_12454.pre = load i32, i32* @r6, align 4
  %v0_1246c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12454

dec_label_pc_12454:                               ; preds = %dec_label_pc_12384, %dec_label_pc_123f4
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_12384 ], [ %v2_12400, %dec_label_pc_123f4 ]
  %v0_1246c = phi i32 [ %v0_1238c, %dec_label_pc_12384 ], [ %v0_1246c.pre, %dec_label_pc_123f4 ]
  %v2_123f4 = phi i32 [ %v0_1238c, %dec_label_pc_12384 ], [ %v0_12450, %dec_label_pc_123f4 ]
  %v0_123a4 = phi i32 [ %v0_12390, %dec_label_pc_12384 ], [ %v2_1244c, %dec_label_pc_123f4 ]
  %v1_12454 = phi i32 [ %v5_12350, %dec_label_pc_12384 ], [ %v1_12454.pre, %dec_label_pc_123f4 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_12384 ], [ %v5_12400, %dec_label_pc_123f4 ]
  %v0_12454 = load i32, i32* %sl.global-to-local, align 4
  %v2_12454 = add i32 %v0_12454, %v1_12454
  store i32 %v2_12454, i32* %r3.global-to-local, align 4
  %v3_12458 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_12458, i32* @r2, align 4
  %v3_1245c = icmp ult i32 %v0_123a4, %v2_12454
  %v1_12460 = add i32 %v0_123a4, 16
  store i32 %v1_12460, i32* %r7.global-to-local, align 4
  %v1_12464 = add i32 %v2_123f4, 19
  store i32 %v1_12464, i32* @r0, align 4
  %v1_12468 = add i32 %v0_123a4, 19
  store i32 %v1_12468, i32* @r1, align 4
  br i1 %v3_1245c, label %dec_label_pc_123a0, label %dec_label_pc_12474

dec_label_pc_12474:                               ; preds = %dec_label_pc_12454, %dec_label_pc_123c4
  %v1_12474 = phi i32 [ %v0_123d8, %dec_label_pc_123c4 ], [ %v2_123f4, %dec_label_pc_12454 ]
  %v0_12474 = phi i32 [ %v1_123d8, %dec_label_pc_123c4 ], [ %v0_1246c, %dec_label_pc_12454 ]
  %v2_12474 = sub i32 %v1_12474, %v0_12474
  store i32 %v2_12474, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12478

dec_label_pc_12478:                               ; preds = %dec_label_pc_123e0, %dec_label_pc_1237c, %dec_label_pc_12474
  %v0_12478 = phi i32 [ %v0_12478.pre, %dec_label_pc_123e0 ], [ %v0_1237c, %dec_label_pc_1237c ], [ %v2_12474, %dec_label_pc_12474 ]
  store i32 %v3_12324, i32* @r4, align 4
  store i32 %v9_12324, i32* %r6.global-to-local, align 4
  ret i32 %v0_12478

; uselistorder directives
  uselistorder i32 %v1_12468, { 1, 0 }
  uselistorder i32 %v1_12464, { 1, 0 }
  uselistorder i32 %v1_12460, { 1, 0 }
  uselistorder i32 %v3_12458, { 1, 0 }
  uselistorder i32 %v0_123a4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_123f4, { 0, 3, 1, 2 }
  uselistorder i32 %v0_123fc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1238c, { 1, 0, 2 }
  uselistorder i32 %v5_12350, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_10fb0, { 4, 1, 0, 3, 6, 5, 2 }
  uselistorder i32 128, { 4, 5, 25, 6, 26, 18, 9, 10, 11, 19, 0, 20, 12, 13, 14, 15, 16, 17, 1, 21, 2, 22, 3, 7, 8, 23, 24 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, {}
  uselistorder label %dec_label_pc_12478, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12454, { 1, 0 }
}

define i32 @function_12484() local_unnamed_addr {
dec_label_pc_12484:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12484 = load i32, i32* @r4, align 4
  store i32 %v3_12484, i32* %stack_var_-8, align 4
  %v0_1248c = load i32, i32* @r0, align 4
  store i32 %v0_1248c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1248c, -4095
  br i1 %tmp, label %dec_label_pc_124a8, label %dec_label_pc_12498

dec_label_pc_12498:                               ; preds = %dec_label_pc_12484
  %v0_12498 = call i32 @function_10f64()
  %v0_1249c = load i32, i32* %r4.global-to-local, align 4
  %v1_1249c = sub i32 0, %v0_1249c
  %v2_124a0 = inttoptr i32 %v0_12498 to i32*
  store i32 %v1_1249c, i32* %v2_124a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_124ac.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_124a8

dec_label_pc_124a8:                               ; preds = %dec_label_pc_12484, %dec_label_pc_12498
  %v2_124ac = phi i32 [ %v3_12484, %dec_label_pc_12484 ], [ %v2_124ac.pre, %dec_label_pc_12498 ]
  %v0_124a8 = phi i32 [ %v0_1248c, %dec_label_pc_12484 ], [ -1, %dec_label_pc_12498 ]
  store i32 %v2_124ac, i32* @r4, align 4
  ret i32 %v0_124a8

; uselistorder directives
  uselistorder i32 %v0_1248c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124a8, { 1, 0 }
}

define i32 @function_124b0() local_unnamed_addr {
dec_label_pc_124b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_124b0 = load i32, i32* @r4, align 4
  store i32 %v3_124b0, i32* %stack_var_-8, align 4
  %v0_124b8 = load i32, i32* @r0, align 4
  store i32 %v0_124b8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_124b8, -4095
  br i1 %tmp, label %dec_label_pc_124d4, label %dec_label_pc_124c4

dec_label_pc_124c4:                               ; preds = %dec_label_pc_124b0
  %v0_124c4 = call i32 @function_10f64()
  %v0_124c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_124c8 = sub i32 0, %v0_124c8
  %v2_124cc = inttoptr i32 %v0_124c4 to i32*
  store i32 %v1_124c8, i32* %v2_124cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_124d8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_124d4

dec_label_pc_124d4:                               ; preds = %dec_label_pc_124b0, %dec_label_pc_124c4
  %v2_124d8 = phi i32 [ %v3_124b0, %dec_label_pc_124b0 ], [ %v2_124d8.pre, %dec_label_pc_124c4 ]
  %v0_124d4 = phi i32 [ %v0_124b8, %dec_label_pc_124b0 ], [ -1, %dec_label_pc_124c4 ]
  store i32 %v2_124d8, i32* @r4, align 4
  ret i32 %v0_124d4

; uselistorder directives
  uselistorder i32 %v0_124b8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124d4, { 1, 0 }
}

define i32 @function_124dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_124dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_124dc = load i32, i32* @r4, align 4
  store i32 %v3_124dc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12500, label %dec_label_pc_124f0

dec_label_pc_124f0:                               ; preds = %dec_label_pc_124dc
  %v0_124f0 = call i32 @function_10f64()
  %v0_124f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_124f4 = sub i32 0, %v0_124f4
  %v2_124f8 = inttoptr i32 %v0_124f0 to i32*
  store i32 %v1_124f4, i32* %v2_124f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12504.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12500

dec_label_pc_12500:                               ; preds = %dec_label_pc_124dc, %dec_label_pc_124f0
  %v2_12504 = phi i32 [ %v3_124dc, %dec_label_pc_124dc ], [ %v2_12504.pre, %dec_label_pc_124f0 ]
  %v0_12500 = phi i32 [ %arg1, %dec_label_pc_124dc ], [ -1, %dec_label_pc_124f0 ]
  store i32 %v2_12504, i32* %r4.global-to-local, align 4
  ret i32 %v0_12500

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12500, { 1, 0 }
}

define i32 @function_12508() local_unnamed_addr {
dec_label_pc_12508:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12508 = load i32, i32* @r4, align 4
  store i32 %v3_12508, i32* %stack_var_-8, align 4
  %v0_12510 = load i32, i32* @r0, align 4
  store i32 %v0_12510, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12510, -4095
  br i1 %tmp, label %dec_label_pc_1252c, label %dec_label_pc_1251c

dec_label_pc_1251c:                               ; preds = %dec_label_pc_12508
  %v0_1251c = call i32 @function_10f64()
  %v0_12520 = load i32, i32* %r4.global-to-local, align 4
  %v1_12520 = sub i32 0, %v0_12520
  %v2_12524 = inttoptr i32 %v0_1251c to i32*
  store i32 %v1_12520, i32* %v2_12524, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12530.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1252c

dec_label_pc_1252c:                               ; preds = %dec_label_pc_12508, %dec_label_pc_1251c
  %v2_12530 = phi i32 [ %v3_12508, %dec_label_pc_12508 ], [ %v2_12530.pre, %dec_label_pc_1251c ]
  %v0_1252c = phi i32 [ %v0_12510, %dec_label_pc_12508 ], [ -1, %dec_label_pc_1251c ]
  store i32 %v2_12530, i32* %r4.global-to-local, align 4
  ret i32 %v0_1252c

; uselistorder directives
  uselistorder i32 %v0_12510, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1252c, { 1, 0 }
}

define i32 @function_12534(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12534:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12578, label %dec_label_pc_12564

dec_label_pc_12564:                               ; preds = %dec_label_pc_12534
  %v0_12564 = call i32 @function_10f64()
  %v0_12568 = load i32, i32* %r4.global-to-local, align 4
  %v1_12568 = sub i32 0, %v0_12568
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12570 = inttoptr i32 %v0_12564 to i32*
  store i32 %v1_12568, i32* %v2_12570, align 4
  %v0_12580.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12580

dec_label_pc_12578:                               ; preds = %dec_label_pc_12534
  %v2_12578 = icmp eq i32 %arg1, 0
  br i1 %v2_12578, label %dec_label_pc_1258c, label %dec_label_pc_12580

dec_label_pc_12580:                               ; preds = %dec_label_pc_12578, %dec_label_pc_12564
  %v0_12580 = phi i32 [ %arg1, %dec_label_pc_12578 ], [ %v0_12580.pre, %dec_label_pc_12564 ]
  br label %dec_label_pc_12590

dec_label_pc_1258c:                               ; preds = %dec_label_pc_12578
  br label %dec_label_pc_12590

dec_label_pc_12590:                               ; preds = %dec_label_pc_12580, %dec_label_pc_1258c
  %v14_12594 = phi i32 [ %v0_12580, %dec_label_pc_12580 ], [ %tmp9, %dec_label_pc_1258c ]
  ret i32 %v14_12594

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_12590, { 1, 0 }
}

define i32 @function_12598(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12598:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_12598 = load i32, i32* @r4, align 4
  store i32 %v3_12598, i32* %stack_var_-8, align 4
  %v6_1259c = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_1259c, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_1259c, -4095
  br i1 %tmp6, label %dec_label_pc_125bc, label %dec_label_pc_125ac

dec_label_pc_125ac:                               ; preds = %dec_label_pc_12598
  %v0_125ac = call i32 @function_10f64()
  %v0_125b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_125b0 = sub i32 0, %v0_125b0
  %v2_125b4 = inttoptr i32 %v0_125ac to i32*
  store i32 %v1_125b0, i32* %v2_125b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125bc

dec_label_pc_125bc:                               ; preds = %dec_label_pc_12598, %dec_label_pc_125ac
  %v0_125bc = phi i32 [ %v6_1259c, %dec_label_pc_12598 ], [ -1, %dec_label_pc_125ac ]
  %v2_125c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_125c0, i32* %r4.global-to-local, align 4
  ret i32 %v0_125bc

; uselistorder directives
  uselistorder i32 %v6_1259c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125bc, { 1, 0 }
}

define i32 @function_125c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_125c4:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_125c4 = load i32, i32* @r4, align 4
  store i32 %v3_125c4, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1b85c.467 to i32), i32* %r4.global-to-local, align 4
  %v2_125cc = load i32, i32* @global_var_1b85c.467, align 4
  %v2_125d0 = icmp eq i32 %v2_125cc, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_125d0, label %dec_label_pc_125e0, label %dec_label_pc_125ec

dec_label_pc_125e0:                               ; preds = %dec_label_pc_125c4
  %v2_125e0 = call i32 @function_12fe8(i32* null)
  %v1_125e4 = icmp slt i32 %v2_125e0, 0
  br i1 %v1_125e4, label %dec_label_pc_1260c, label %dec_label_pc_125ecthread-pre-split

dec_label_pc_125ecthread-pre-split:               ; preds = %dec_label_pc_125e0
  %v0_125f0.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_125ec.pre = load i32, i32* @global_var_1b85c.467, align 4
  br label %dec_label_pc_125ec

dec_label_pc_125ec:                               ; preds = %dec_label_pc_125ecthread-pre-split, %dec_label_pc_125c4
  %v2_125ec = phi i32 [ %v2_125ec.pre, %dec_label_pc_125ecthread-pre-split ], [ %v2_125cc, %dec_label_pc_125c4 ]
  %v1_125f8 = phi i32 [ %v0_125f0.pr, %dec_label_pc_125ecthread-pre-split ], [ %arg1, %dec_label_pc_125c4 ]
  %v2_125f0 = icmp eq i32 %v1_125f8, 0
  store i32 %v2_125ec, i32* %r4.global-to-local, align 4
  br i1 %v2_125f0, label %dec_label_pc_12610, label %dec_label_pc_12600

dec_label_pc_12600:                               ; preds = %dec_label_pc_125ec
  %v2_125f8 = add i32 %v1_125f8, %v2_125ec
  %v1_12600 = inttoptr i32 %v2_125f8 to i32*
  %v2_12600 = call i32 @function_12fe8(i32* %v1_12600)
  %v1_12604 = icmp slt i32 %v2_12600, 0
  br i1 %v1_12604, label %dec_label_pc_1260c, label %dec_label_pc_12600.dec_label_pc_12610_crit_edge

dec_label_pc_12600.dec_label_pc_12610_crit_edge:  ; preds = %dec_label_pc_12600
  %v0_12610.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12610

dec_label_pc_1260c:                               ; preds = %dec_label_pc_12600, %dec_label_pc_125e0
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12610

dec_label_pc_12610:                               ; preds = %dec_label_pc_12600.dec_label_pc_12610_crit_edge, %dec_label_pc_125ec, %dec_label_pc_1260c
  %v0_12610 = phi i32 [ %v0_12610.pre, %dec_label_pc_12600.dec_label_pc_12610_crit_edge ], [ %v2_125ec, %dec_label_pc_125ec ], [ -1, %dec_label_pc_1260c ]
  %v2_12614 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12614, i32* @r4, align 4
  ret i32 %v0_12610

; uselistorder directives
  uselistorder i32 %v2_125ec, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 5, 29, 30, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28 }
  uselistorder label %dec_label_pc_12610, { 2, 0, 1 }
}

define i32 @function_1261c(%tms* %arg1) local_unnamed_addr {
dec_label_pc_1261c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1261c = load i32, i32* @r4, align 4
  store i32 %v3_1261c, i32* %stack_var_-8, align 4
  %v3_12620 = call i32 @times(%tms* %arg1)
  store i32 %v3_12620, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_12620, -4095
  br i1 %tmp, label %dec_label_pc_12640, label %dec_label_pc_12630

dec_label_pc_12630:                               ; preds = %dec_label_pc_1261c
  %v0_12630 = call i32 @function_10f64()
  %v0_12634 = load i32, i32* %r4.global-to-local, align 4
  %v1_12634 = sub i32 0, %v0_12634
  %v2_12638 = inttoptr i32 %v0_12630 to i32*
  store i32 %v1_12634, i32* %v2_12638, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12640

dec_label_pc_12640:                               ; preds = %dec_label_pc_1261c, %dec_label_pc_12630
  %v0_12640 = phi i32 [ %v3_12620, %dec_label_pc_1261c ], [ -1, %dec_label_pc_12630 ]
  %v2_12644 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12644, i32* %r4.global-to-local, align 4
  ret i32 %v0_12640

; uselistorder directives
  uselistorder i32 %v3_12620, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12640, { 1, 0 }
}

define i32 @function_12648(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12648:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_12664 = inttoptr i32 %arg2 to i8*
  %v3_12664 = call i32 @function_10fd0(i8* %v2_12664, i32 0)
  %v1_12668 = add i32 %tmp, 1
  %v2_12668 = inttoptr i32 %v1_12668 to i8*
  %v3_12668 = load i8, i8* %v2_12668, align 1
  %v4_12668 = zext i8 %v3_12668 to i32
  %v1_1266c = add i32 %tmp, 5
  %v2_1266c = inttoptr i32 %v1_1266c to i8*
  %v3_1266c = load i8, i8* %v2_1266c, align 1
  %v4_1266c = zext i8 %v3_1266c to i32
  %v2_12670 = load i8, i8* %arg1, align 1
  %v3_12670 = zext i8 %v2_12670 to i32
  %v1_12674 = add i32 %tmp, 4
  %v2_12674 = inttoptr i32 %v1_12674 to i8*
  %v3_12674 = load i8, i8* %v2_12674, align 1
  %v4_12674 = zext i8 %v3_12674 to i32
  %v1_12678 = add i32 %tmp, 2
  %v2_12678 = inttoptr i32 %v1_12678 to i8*
  %v3_12678 = load i8, i8* %v2_12678, align 1
  %v4_12678 = zext i8 %v3_12678 to i32
  %v1_1267c = add i32 %tmp, 6
  %v2_1267c = inttoptr i32 %v1_1267c to i8*
  %v3_1267c = load i8, i8* %v2_1267c, align 1
  %v4_1267c = zext i8 %v3_1267c to i32
  %v1_12680 = add i32 %tmp, 3
  %v2_12680 = inttoptr i32 %v1_12680 to i8*
  %v3_12680 = load i8, i8* %v2_12680, align 1
  %v4_12680 = zext i8 %v3_12680 to i32
  %v4_12684 = mul nuw nsw i32 %v4_12668, 256
  %v5_12684 = or i32 %v3_12670, %v4_12684
  %v4_12688 = mul nuw nsw i32 %v4_1266c, 256
  %v5_12688 = or i32 %v4_12674, %v4_12688
  %v1_1268c = add i32 %tmp, 7
  %v2_1268c = inttoptr i32 %v1_1268c to i8*
  %v3_1268c = load i8, i8* %v2_1268c, align 1
  %v4_1268c = zext i8 %v3_1268c to i32
  %v4_12690 = mul nuw nsw i32 %v4_12678, 65536
  %v5_12690 = or i32 %v4_12690, %v5_12684
  %v4_12694 = mul nuw nsw i32 %v4_1267c, 65536
  %v5_12694 = or i32 %v4_12694, %v5_12688
  %v4_12698 = mul nuw i32 %v4_12680, 16777216
  %v5_12698 = or i32 %v4_12698, %v5_12690
  %v4_1269c = mul nuw i32 %v4_1268c, 16777216
  %v5_1269c = or i32 %v4_1269c, %v5_12694
  store i32 %v5_1269c, i32* %r3.global-to-local, align 4
  %v0_126a0 = load i32, i32* %r7.global-to-local, align 4
  %v1_126a0 = inttoptr i32 %v0_126a0 to i32*
  store i32 %v5_12698, i32* %v1_126a0, align 4
  %v3_126a0 = add i32 %v0_126a0, 4
  %v4_126a0 = inttoptr i32 %v3_126a0 to i32*
  %v5_126a0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_126a0, i32* %v4_126a0, align 4
  %v0_126a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_126a4 = add i32 %v0_126a4, 89
  %v2_126a4 = inttoptr i32 %v1_126a4 to i8*
  %v3_126a4 = load i8, i8* %v2_126a4, align 1
  %v4_126a4 = zext i8 %v3_126a4 to i32
  %v1_126a8 = add i32 %v0_126a4, 93
  %v2_126a8 = inttoptr i32 %v1_126a8 to i8*
  %v3_126a8 = load i8, i8* %v2_126a8, align 1
  %v4_126a8 = zext i8 %v3_126a8 to i32
  %v1_126ac = add i32 %v0_126a4, 88
  %v2_126ac = inttoptr i32 %v1_126ac to i8*
  %v3_126ac = load i8, i8* %v2_126ac, align 1
  %v4_126ac = zext i8 %v3_126ac to i32
  %v1_126b0 = add i32 %v0_126a4, 92
  %v2_126b0 = inttoptr i32 %v1_126b0 to i8*
  %v3_126b0 = load i8, i8* %v2_126b0, align 1
  %v4_126b0 = zext i8 %v3_126b0 to i32
  store i32 %v4_126b0, i32* %r3.global-to-local, align 4
  %v1_126b4 = add i32 %v0_126a4, 94
  %v2_126b4 = inttoptr i32 %v1_126b4 to i8*
  %v3_126b4 = load i8, i8* %v2_126b4, align 1
  %v4_126b4 = zext i8 %v3_126b4 to i32
  %v1_126b8 = add i32 %v0_126a4, 90
  %v2_126b8 = inttoptr i32 %v1_126b8 to i8*
  %v3_126b8 = load i8, i8* %v2_126b8, align 1
  %v4_126b8 = zext i8 %v3_126b8 to i32
  %v1_126bc = add i32 %v0_126a4, 91
  %v2_126bc = inttoptr i32 %v1_126bc to i8*
  %v3_126bc = load i8, i8* %v2_126bc, align 1
  %v4_126bc = zext i8 %v3_126bc to i32
  %v4_126c0 = mul nuw nsw i32 %v4_126a4, 256
  %v5_126c0 = or i32 %v4_126ac, %v4_126c0
  %v4_126c4 = mul nuw nsw i32 %v4_126a8, 256
  %v5_126c4 = or i32 %v4_126b0, %v4_126c4
  store i32 %v5_126c4, i32* %r3.global-to-local, align 4
  %v1_126c8 = add i32 %v0_126a4, 95
  %v2_126c8 = inttoptr i32 %v1_126c8 to i8*
  %v3_126c8 = load i8, i8* %v2_126c8, align 1
  %v4_126c8 = zext i8 %v3_126c8 to i32
  %v4_126cc = mul nuw nsw i32 %v4_126b4, 65536
  %v5_126cc = or i32 %v4_126cc, %v5_126c4
  store i32 %v5_126cc, i32* %r3.global-to-local, align 4
  %v4_126d0 = mul nuw nsw i32 %v4_126b8, 65536
  %v5_126d0 = or i32 %v4_126d0, %v5_126c0
  %v4_126d4 = mul nuw i32 %v4_126bc, 16777216
  %v5_126d4 = or i32 %v4_126d4, %v5_126d0
  %v4_126d8 = mul nuw i32 %v4_126c8, 16777216
  %v5_126d8 = or i32 %v4_126d8, %v5_126cc
  store i32 %v5_126d8, i32* %r6.global-to-local, align 4
  %v1_126dc = load i32, i32* %r7.global-to-local, align 4
  %v2_126dc = add i32 %v1_126dc, 88
  %v3_126dc = inttoptr i32 %v2_126dc to i32*
  store i32 %v5_126d4, i32* %v3_126dc, align 4
  %v0_126e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_126e0 = load i32, i32* %r7.global-to-local, align 4
  %v2_126e0 = add i32 %v1_126e0, 92
  %v3_126e0 = inttoptr i32 %v2_126e0 to i32*
  store i32 %v0_126e0, i32* %v3_126e0, align 4
  %v0_126e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_126e4 = add i32 %v0_126e4, 13
  %v2_126e4 = inttoptr i32 %v1_126e4 to i8*
  %v3_126e4 = load i8, i8* %v2_126e4, align 1
  %v4_126e4 = zext i8 %v3_126e4 to i32
  %v1_126e8 = add i32 %v0_126e4, 12
  %v2_126e8 = inttoptr i32 %v1_126e8 to i8*
  %v3_126e8 = load i8, i8* %v2_126e8, align 1
  %v4_126e8 = zext i8 %v3_126e8 to i32
  store i32 %v4_126e8, i32* %r3.global-to-local, align 4
  %v1_126ec = add i32 %v0_126e4, 14
  %v2_126ec = inttoptr i32 %v1_126ec to i8*
  %v3_126ec = load i8, i8* %v2_126ec, align 1
  %v4_126ec = zext i8 %v3_126ec to i32
  %v4_126f0 = mul nuw nsw i32 %v4_126e4, 256
  %v5_126f0 = or i32 %v4_126e8, %v4_126f0
  store i32 %v5_126f0, i32* %r3.global-to-local, align 4
  %v1_126f4 = add i32 %v0_126e4, 15
  %v2_126f4 = inttoptr i32 %v1_126f4 to i8*
  %v3_126f4 = load i8, i8* %v2_126f4, align 1
  %v4_126f4 = zext i8 %v3_126f4 to i32
  %v4_126f8 = mul nuw nsw i32 %v4_126ec, 65536
  %v5_126f8 = or i32 %v4_126f8, %v5_126f0
  %v4_126fc = mul nuw i32 %v4_126f4, 16777216
  %v5_126fc = or i32 %v5_126f8, %v4_126fc
  store i32 %v5_126fc, i32* %r3.global-to-local, align 4
  %v1_12700 = load i32, i32* %r7.global-to-local, align 4
  %v2_12700 = add i32 %v1_12700, 12
  %v3_12700 = inttoptr i32 %v2_12700 to i32*
  store i32 %v5_126fc, i32* %v3_12700, align 4
  %v0_12704 = load i32, i32* %r4.global-to-local, align 4
  %v1_12704 = add i32 %v0_12704, 17
  %v2_12704 = inttoptr i32 %v1_12704 to i8*
  %v3_12704 = load i8, i8* %v2_12704, align 1
  %v4_12704 = zext i8 %v3_12704 to i32
  %v1_12708 = add i32 %v0_12704, 16
  %v2_12708 = inttoptr i32 %v1_12708 to i8*
  %v3_12708 = load i8, i8* %v2_12708, align 1
  %v4_12708 = zext i8 %v3_12708 to i32
  store i32 %v4_12708, i32* %r3.global-to-local, align 4
  %v1_1270c = add i32 %v0_12704, 18
  %v2_1270c = inttoptr i32 %v1_1270c to i8*
  %v3_1270c = load i8, i8* %v2_1270c, align 1
  %v4_1270c = zext i8 %v3_1270c to i32
  %v4_12710 = mul nuw nsw i32 %v4_12704, 256
  %v5_12710 = or i32 %v4_12708, %v4_12710
  store i32 %v5_12710, i32* %r3.global-to-local, align 4
  %v1_12714 = add i32 %v0_12704, 19
  %v2_12714 = inttoptr i32 %v1_12714 to i8*
  %v3_12714 = load i8, i8* %v2_12714, align 1
  %v4_12714 = zext i8 %v3_12714 to i32
  %v4_12718 = mul nuw nsw i32 %v4_1270c, 65536
  %v5_12718 = or i32 %v4_12718, %v5_12710
  %v4_1271c = mul nuw i32 %v4_12714, 16777216
  %v5_1271c = or i32 %v5_12718, %v4_1271c
  store i32 %v5_1271c, i32* %r3.global-to-local, align 4
  %v1_12720 = load i32, i32* %r7.global-to-local, align 4
  %v2_12720 = add i32 %v1_12720, 16
  %v3_12720 = inttoptr i32 %v2_12720 to i32*
  store i32 %v5_1271c, i32* %v3_12720, align 4
  %v0_12724 = load i32, i32* %r4.global-to-local, align 4
  %v1_12724 = add i32 %v0_12724, 21
  %v2_12724 = inttoptr i32 %v1_12724 to i8*
  %v3_12724 = load i8, i8* %v2_12724, align 1
  %v4_12724 = zext i8 %v3_12724 to i32
  %v1_12728 = add i32 %v0_12724, 20
  %v2_12728 = inttoptr i32 %v1_12728 to i8*
  %v3_12728 = load i8, i8* %v2_12728, align 1
  %v4_12728 = zext i8 %v3_12728 to i32
  store i32 %v4_12728, i32* %r3.global-to-local, align 4
  %v1_1272c = add i32 %v0_12724, 22
  %v2_1272c = inttoptr i32 %v1_1272c to i8*
  %v3_1272c = load i8, i8* %v2_1272c, align 1
  %v4_1272c = zext i8 %v3_1272c to i32
  %v4_12730 = mul nuw nsw i32 %v4_12724, 256
  %v5_12730 = or i32 %v4_12728, %v4_12730
  store i32 %v5_12730, i32* %r3.global-to-local, align 4
  %v1_12734 = add i32 %v0_12724, 23
  %v2_12734 = inttoptr i32 %v1_12734 to i8*
  %v3_12734 = load i8, i8* %v2_12734, align 1
  %v4_12734 = zext i8 %v3_12734 to i32
  %v4_12738 = mul nuw nsw i32 %v4_1272c, 65536
  %v5_12738 = or i32 %v4_12738, %v5_12730
  %v4_1273c = mul nuw i32 %v4_12734, 16777216
  %v5_1273c = or i32 %v5_12738, %v4_1273c
  store i32 %v5_1273c, i32* %r3.global-to-local, align 4
  %v1_12740 = load i32, i32* %r7.global-to-local, align 4
  %v2_12740 = add i32 %v1_12740, 20
  %v3_12740 = inttoptr i32 %v2_12740 to i32*
  store i32 %v5_1273c, i32* %v3_12740, align 4
  %v0_12744 = load i32, i32* %r4.global-to-local, align 4
  %v1_12744 = add i32 %v0_12744, 25
  %v2_12744 = inttoptr i32 %v1_12744 to i8*
  %v3_12744 = load i8, i8* %v2_12744, align 1
  %v4_12744 = zext i8 %v3_12744 to i32
  %v1_12748 = add i32 %v0_12744, 24
  %v2_12748 = inttoptr i32 %v1_12748 to i8*
  %v3_12748 = load i8, i8* %v2_12748, align 1
  %v4_12748 = zext i8 %v3_12748 to i32
  store i32 %v4_12748, i32* %r3.global-to-local, align 4
  %v1_1274c = add i32 %v0_12744, 26
  %v2_1274c = inttoptr i32 %v1_1274c to i8*
  %v3_1274c = load i8, i8* %v2_1274c, align 1
  %v4_1274c = zext i8 %v3_1274c to i32
  %v4_12750 = mul nuw nsw i32 %v4_12744, 256
  %v5_12750 = or i32 %v4_12748, %v4_12750
  store i32 %v5_12750, i32* %r3.global-to-local, align 4
  %v1_12754 = add i32 %v0_12744, 27
  %v2_12754 = inttoptr i32 %v1_12754 to i8*
  %v3_12754 = load i8, i8* %v2_12754, align 1
  %v4_12754 = zext i8 %v3_12754 to i32
  %v4_12758 = mul nuw nsw i32 %v4_1274c, 65536
  %v5_12758 = or i32 %v4_12758, %v5_12750
  %v4_1275c = mul nuw i32 %v4_12754, 16777216
  %v5_1275c = or i32 %v5_12758, %v4_1275c
  store i32 %v5_1275c, i32* %r3.global-to-local, align 4
  %v1_12760 = load i32, i32* %r7.global-to-local, align 4
  %v2_12760 = add i32 %v1_12760, 24
  %v3_12760 = inttoptr i32 %v2_12760 to i32*
  store i32 %v5_1275c, i32* %v3_12760, align 4
  %v0_12764 = load i32, i32* %r4.global-to-local, align 4
  %v1_12764 = add i32 %v0_12764, 29
  %v2_12764 = inttoptr i32 %v1_12764 to i8*
  %v3_12764 = load i8, i8* %v2_12764, align 1
  %v4_12764 = zext i8 %v3_12764 to i32
  %v1_12768 = add i32 %v0_12764, 28
  %v2_12768 = inttoptr i32 %v1_12768 to i8*
  %v3_12768 = load i8, i8* %v2_12768, align 1
  %v4_12768 = zext i8 %v3_12768 to i32
  store i32 %v4_12768, i32* %r3.global-to-local, align 4
  %v1_1276c = add i32 %v0_12764, 30
  %v2_1276c = inttoptr i32 %v1_1276c to i8*
  %v3_1276c = load i8, i8* %v2_1276c, align 1
  %v4_1276c = zext i8 %v3_1276c to i32
  %v4_12770 = mul nuw nsw i32 %v4_12764, 256
  %v5_12770 = or i32 %v4_12768, %v4_12770
  store i32 %v5_12770, i32* %r3.global-to-local, align 4
  %v1_12774 = add i32 %v0_12764, 31
  %v2_12774 = inttoptr i32 %v1_12774 to i8*
  %v3_12774 = load i8, i8* %v2_12774, align 1
  %v4_12774 = zext i8 %v3_12774 to i32
  %v4_12778 = mul nuw nsw i32 %v4_1276c, 65536
  %v5_12778 = or i32 %v4_12778, %v5_12770
  %v4_1277c = mul nuw i32 %v4_12774, 16777216
  %v5_1277c = or i32 %v5_12778, %v4_1277c
  store i32 %v5_1277c, i32* %r3.global-to-local, align 4
  %v1_12780 = load i32, i32* %r7.global-to-local, align 4
  %v2_12780 = add i32 %v1_12780, 28
  %v3_12780 = inttoptr i32 %v2_12780 to i32*
  store i32 %v5_1277c, i32* %v3_12780, align 4
  %v0_12784 = load i32, i32* %r4.global-to-local, align 4
  %v1_12784 = add i32 %v0_12784, 33
  %v2_12784 = inttoptr i32 %v1_12784 to i8*
  %v3_12784 = load i8, i8* %v2_12784, align 1
  %v4_12784 = zext i8 %v3_12784 to i32
  %v1_12788 = add i32 %v0_12784, 37
  %v2_12788 = inttoptr i32 %v1_12788 to i8*
  %v3_12788 = load i8, i8* %v2_12788, align 1
  %v4_12788 = zext i8 %v3_12788 to i32
  %v1_1278c = add i32 %v0_12784, 32
  %v2_1278c = inttoptr i32 %v1_1278c to i8*
  %v3_1278c = load i8, i8* %v2_1278c, align 1
  %v4_1278c = zext i8 %v3_1278c to i32
  %v1_12790 = add i32 %v0_12784, 36
  %v2_12790 = inttoptr i32 %v1_12790 to i8*
  %v3_12790 = load i8, i8* %v2_12790, align 1
  %v4_12790 = zext i8 %v3_12790 to i32
  store i32 %v4_12790, i32* %r3.global-to-local, align 4
  %v1_12794 = add i32 %v0_12784, 34
  %v2_12794 = inttoptr i32 %v1_12794 to i8*
  %v3_12794 = load i8, i8* %v2_12794, align 1
  %v4_12794 = zext i8 %v3_12794 to i32
  %v1_12798 = add i32 %v0_12784, 38
  %v2_12798 = inttoptr i32 %v1_12798 to i8*
  %v3_12798 = load i8, i8* %v2_12798, align 1
  %v4_12798 = zext i8 %v3_12798 to i32
  %v1_1279c = add i32 %v0_12784, 35
  %v2_1279c = inttoptr i32 %v1_1279c to i8*
  %v3_1279c = load i8, i8* %v2_1279c, align 1
  %v4_1279c = zext i8 %v3_1279c to i32
  %v4_127a0 = mul nuw nsw i32 %v4_12784, 256
  %v5_127a0 = or i32 %v4_1278c, %v4_127a0
  %v4_127a4 = mul nuw nsw i32 %v4_12788, 256
  %v5_127a4 = or i32 %v4_12790, %v4_127a4
  store i32 %v5_127a4, i32* %r3.global-to-local, align 4
  %v1_127a8 = add i32 %v0_12784, 39
  %v2_127a8 = inttoptr i32 %v1_127a8 to i8*
  %v3_127a8 = load i8, i8* %v2_127a8, align 1
  %v4_127a8 = zext i8 %v3_127a8 to i32
  %v4_127ac = mul nuw nsw i32 %v4_12794, 65536
  %v5_127ac = or i32 %v4_127ac, %v5_127a0
  %v4_127b0 = mul nuw nsw i32 %v4_12798, 65536
  %v5_127b0 = or i32 %v4_127b0, %v5_127a4
  %v4_127b4 = mul nuw i32 %v4_1279c, 16777216
  %v5_127b4 = or i32 %v5_127ac, %v4_127b4
  %v4_127b8 = mul nuw i32 %v4_127a8, 16777216
  %v5_127b8 = or i32 %v5_127b0, %v4_127b8
  store i32 %v5_127b8, i32* %r3.global-to-local, align 4
  %v1_127cc = load i32, i32* %r7.global-to-local, align 4
  %v2_127cc = add i32 %v1_127cc, 32
  %v3_127cc = inttoptr i32 %v2_127cc to i32*
  store i32 %v5_127b4, i32* %v3_127cc, align 4
  %v0_127d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_127d0 = load i32, i32* %r7.global-to-local, align 4
  %v2_127d0 = add i32 %v1_127d0, 36
  %v3_127d0 = inttoptr i32 %v2_127d0 to i32*
  store i32 %v0_127d0, i32* %v3_127d0, align 4
  %v0_127d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_127d4 = add i32 %v0_127d4, 45
  %v2_127d4 = inttoptr i32 %v1_127d4 to i8*
  %v3_127d4 = load i8, i8* %v2_127d4, align 1
  %v4_127d4 = zext i8 %v3_127d4 to i32
  %v1_127d8 = add i32 %v0_127d4, 49
  %v2_127d8 = inttoptr i32 %v1_127d8 to i8*
  %v3_127d8 = load i8, i8* %v2_127d8, align 1
  %v4_127d8 = zext i8 %v3_127d8 to i32
  %v1_127dc = add i32 %v0_127d4, 44
  %v2_127dc = inttoptr i32 %v1_127dc to i8*
  %v3_127dc = load i8, i8* %v2_127dc, align 1
  %v4_127dc = zext i8 %v3_127dc to i32
  %v1_127e0 = add i32 %v0_127d4, 48
  %v2_127e0 = inttoptr i32 %v1_127e0 to i8*
  %v3_127e0 = load i8, i8* %v2_127e0, align 1
  %v4_127e0 = zext i8 %v3_127e0 to i32
  store i32 %v4_127e0, i32* %r3.global-to-local, align 4
  %v1_127e4 = add i32 %v0_127d4, 46
  %v2_127e4 = inttoptr i32 %v1_127e4 to i8*
  %v3_127e4 = load i8, i8* %v2_127e4, align 1
  %v4_127e4 = zext i8 %v3_127e4 to i32
  %v1_127e8 = add i32 %v0_127d4, 50
  %v2_127e8 = inttoptr i32 %v1_127e8 to i8*
  %v3_127e8 = load i8, i8* %v2_127e8, align 1
  %v4_127e8 = zext i8 %v3_127e8 to i32
  %v1_127ec = add i32 %v0_127d4, 47
  %v2_127ec = inttoptr i32 %v1_127ec to i8*
  %v3_127ec = load i8, i8* %v2_127ec, align 1
  %v4_127ec = zext i8 %v3_127ec to i32
  %v4_127f0 = mul nuw nsw i32 %v4_127d4, 256
  %v5_127f0 = or i32 %v4_127dc, %v4_127f0
  %v4_127f4 = mul nuw nsw i32 %v4_127d8, 256
  %v5_127f4 = or i32 %v4_127e0, %v4_127f4
  store i32 %v5_127f4, i32* %r3.global-to-local, align 4
  %v1_127f8 = add i32 %v0_127d4, 51
  %v2_127f8 = inttoptr i32 %v1_127f8 to i8*
  %v3_127f8 = load i8, i8* %v2_127f8, align 1
  %v4_127f8 = zext i8 %v3_127f8 to i32
  %v4_127fc = mul nuw nsw i32 %v4_127e4, 65536
  %v5_127fc = or i32 %v4_127fc, %v5_127f0
  %v4_12800 = mul nuw nsw i32 %v4_127e8, 65536
  %v5_12800 = or i32 %v4_12800, %v5_127f4
  %v4_12804 = mul nuw i32 %v4_127ec, 16777216
  %v5_12804 = or i32 %v5_127fc, %v4_12804
  %v4_12808 = mul nuw i32 %v4_127f8, 16777216
  %v5_12808 = or i32 %v5_12800, %v4_12808
  store i32 %v5_12808, i32* %r3.global-to-local, align 4
  %v1_1281c = load i32, i32* %r7.global-to-local, align 4
  %v2_1281c = add i32 %v1_1281c, 44
  %v3_1281c = inttoptr i32 %v2_1281c to i32*
  store i32 %v5_12804, i32* %v3_1281c, align 4
  %v0_12820 = load i32, i32* %r3.global-to-local, align 4
  %v1_12820 = load i32, i32* %r7.global-to-local, align 4
  %v2_12820 = add i32 %v1_12820, 48
  %v3_12820 = inttoptr i32 %v2_12820 to i32*
  store i32 %v0_12820, i32* %v3_12820, align 4
  %v0_12824 = load i32, i32* %r4.global-to-local, align 4
  %v1_12824 = add i32 %v0_12824, 53
  %v2_12824 = inttoptr i32 %v1_12824 to i8*
  %v3_12824 = load i8, i8* %v2_12824, align 1
  %v4_12824 = zext i8 %v3_12824 to i32
  %v1_12828 = add i32 %v0_12824, 52
  %v2_12828 = inttoptr i32 %v1_12828 to i8*
  %v3_12828 = load i8, i8* %v2_12828, align 1
  %v4_12828 = zext i8 %v3_12828 to i32
  store i32 %v4_12828, i32* %r3.global-to-local, align 4
  %v1_1282c = add i32 %v0_12824, 54
  %v2_1282c = inttoptr i32 %v1_1282c to i8*
  %v3_1282c = load i8, i8* %v2_1282c, align 1
  %v4_1282c = zext i8 %v3_1282c to i32
  %v4_12830 = mul nuw nsw i32 %v4_12824, 256
  %v5_12830 = or i32 %v4_12828, %v4_12830
  store i32 %v5_12830, i32* %r3.global-to-local, align 4
  %v1_12834 = add i32 %v0_12824, 55
  %v2_12834 = inttoptr i32 %v1_12834 to i8*
  %v3_12834 = load i8, i8* %v2_12834, align 1
  %v4_12834 = zext i8 %v3_12834 to i32
  %v4_12838 = mul nuw nsw i32 %v4_1282c, 65536
  %v5_12838 = or i32 %v4_12838, %v5_12830
  %v4_1283c = mul nuw i32 %v4_12834, 16777216
  %v5_1283c = or i32 %v5_12838, %v4_1283c
  store i32 %v5_1283c, i32* %r3.global-to-local, align 4
  %v1_12840 = load i32, i32* %r7.global-to-local, align 4
  %v2_12840 = add i32 %v1_12840, 52
  %v3_12840 = inttoptr i32 %v2_12840 to i32*
  store i32 %v5_1283c, i32* %v3_12840, align 4
  %v0_12844 = load i32, i32* %r4.global-to-local, align 4
  %v1_12844 = add i32 %v0_12844, 57
  %v2_12844 = inttoptr i32 %v1_12844 to i8*
  %v3_12844 = load i8, i8* %v2_12844, align 1
  %v4_12844 = zext i8 %v3_12844 to i32
  %v1_12848 = add i32 %v0_12844, 56
  %v2_12848 = inttoptr i32 %v1_12848 to i8*
  %v3_12848 = load i8, i8* %v2_12848, align 1
  %v4_12848 = zext i8 %v3_12848 to i32
  %v1_1284c = add i32 %v0_12844, 60
  %v2_1284c = inttoptr i32 %v1_1284c to i8*
  %v3_1284c = load i8, i8* %v2_1284c, align 1
  %v4_1284c = zext i8 %v3_1284c to i32
  store i32 %v4_1284c, i32* %r3.global-to-local, align 4
  %v1_12850 = add i32 %v0_12844, 61
  %v2_12850 = inttoptr i32 %v1_12850 to i8*
  %v3_12850 = load i8, i8* %v2_12850, align 1
  %v4_12850 = zext i8 %v3_12850 to i32
  %v1_12854 = add i32 %v0_12844, 58
  %v2_12854 = inttoptr i32 %v1_12854 to i8*
  %v3_12854 = load i8, i8* %v2_12854, align 1
  %v4_12854 = zext i8 %v3_12854 to i32
  %v1_12858 = add i32 %v0_12844, 62
  %v2_12858 = inttoptr i32 %v1_12858 to i8*
  %v3_12858 = load i8, i8* %v2_12858, align 1
  %v4_12858 = zext i8 %v3_12858 to i32
  %v1_1285c = add i32 %v0_12844, 59
  %v2_1285c = inttoptr i32 %v1_1285c to i8*
  %v3_1285c = load i8, i8* %v2_1285c, align 1
  %v4_1285c = zext i8 %v3_1285c to i32
  %v4_12860 = mul nuw nsw i32 %v4_12844, 256
  %v5_12860 = or i32 %v4_12848, %v4_12860
  %v4_12864 = mul nuw nsw i32 %v4_12850, 256
  %v5_12864 = or i32 %v4_12864, %v4_1284c
  store i32 %v5_12864, i32* %r3.global-to-local, align 4
  %v1_12868 = add i32 %v0_12844, 63
  %v2_12868 = inttoptr i32 %v1_12868 to i8*
  %v3_12868 = load i8, i8* %v2_12868, align 1
  %v4_12868 = zext i8 %v3_12868 to i32
  %v4_1286c = mul nuw nsw i32 %v4_12854, 65536
  %v5_1286c = or i32 %v4_1286c, %v5_12860
  %v4_12870 = mul nuw nsw i32 %v4_12858, 65536
  %v5_12870 = or i32 %v4_12870, %v5_12864
  %v4_12874 = mul nuw i32 %v4_12868, 16777216
  %v5_12874 = or i32 %v5_12870, %v4_12874
  %v4_12878 = mul nuw i32 %v4_1285c, 16777216
  %v5_12878 = or i32 %v5_1286c, %v4_12878
  store i32 %v5_12874, i32* %r3.global-to-local, align 4
  %v1_12888 = load i32, i32* %r7.global-to-local, align 4
  %v2_12888 = add i32 %v1_12888, 56
  %v3_12888 = inttoptr i32 %v2_12888 to i32*
  store i32 %v5_12878, i32* %v3_12888, align 4
  %v0_1288c = load i32, i32* %r3.global-to-local, align 4
  %v1_1288c = load i32, i32* %r7.global-to-local, align 4
  %v2_1288c = add i32 %v1_1288c, 60
  %v3_1288c = inttoptr i32 %v2_1288c to i32*
  store i32 %v0_1288c, i32* %v3_1288c, align 4
  %v0_12890 = load i32, i32* %r4.global-to-local, align 4
  %v1_12890 = add i32 %v0_12890, 65
  %v2_12890 = inttoptr i32 %v1_12890 to i8*
  %v3_12890 = load i8, i8* %v2_12890, align 1
  %v4_12890 = zext i8 %v3_12890 to i32
  %v1_12894 = add i32 %v0_12890, 64
  %v2_12894 = inttoptr i32 %v1_12894 to i8*
  %v3_12894 = load i8, i8* %v2_12894, align 1
  %v4_12894 = zext i8 %v3_12894 to i32
  store i32 %v4_12894, i32* %r3.global-to-local, align 4
  %v1_12898 = add i32 %v0_12890, 66
  %v2_12898 = inttoptr i32 %v1_12898 to i8*
  %v3_12898 = load i8, i8* %v2_12898, align 1
  %v4_12898 = zext i8 %v3_12898 to i32
  %v4_1289c = mul nuw nsw i32 %v4_12890, 256
  %v5_1289c = or i32 %v4_12894, %v4_1289c
  store i32 %v5_1289c, i32* %r3.global-to-local, align 4
  %v1_128a0 = add i32 %v0_12890, 67
  %v2_128a0 = inttoptr i32 %v1_128a0 to i8*
  %v3_128a0 = load i8, i8* %v2_128a0, align 1
  %v4_128a0 = zext i8 %v3_128a0 to i32
  %v4_128a4 = mul nuw nsw i32 %v4_12898, 65536
  %v5_128a4 = or i32 %v4_128a4, %v5_1289c
  %v4_128a8 = mul nuw i32 %v4_128a0, 16777216
  %v5_128a8 = or i32 %v5_128a4, %v4_128a8
  store i32 %v5_128a8, i32* %r3.global-to-local, align 4
  %v1_128ac = load i32, i32* %r7.global-to-local, align 4
  %v2_128ac = add i32 %v1_128ac, 64
  %v3_128ac = inttoptr i32 %v2_128ac to i32*
  store i32 %v5_128a8, i32* %v3_128ac, align 4
  %v0_128b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_128b0 = add i32 %v0_128b0, 73
  %v2_128b0 = inttoptr i32 %v1_128b0 to i8*
  %v3_128b0 = load i8, i8* %v2_128b0, align 1
  %v4_128b0 = zext i8 %v3_128b0 to i32
  %v1_128b4 = add i32 %v0_128b0, 72
  %v2_128b4 = inttoptr i32 %v1_128b4 to i8*
  %v3_128b4 = load i8, i8* %v2_128b4, align 1
  %v4_128b4 = zext i8 %v3_128b4 to i32
  store i32 %v4_128b4, i32* %r3.global-to-local, align 4
  %v1_128b8 = add i32 %v0_128b0, 74
  %v2_128b8 = inttoptr i32 %v1_128b8 to i8*
  %v3_128b8 = load i8, i8* %v2_128b8, align 1
  %v4_128b8 = zext i8 %v3_128b8 to i32
  %v4_128bc = mul nuw nsw i32 %v4_128b0, 256
  %v5_128bc = or i32 %v4_128b4, %v4_128bc
  store i32 %v5_128bc, i32* %r3.global-to-local, align 4
  %v1_128c0 = add i32 %v0_128b0, 75
  %v2_128c0 = inttoptr i32 %v1_128c0 to i8*
  %v3_128c0 = load i8, i8* %v2_128c0, align 1
  %v4_128c0 = zext i8 %v3_128c0 to i32
  %v4_128c4 = mul nuw nsw i32 %v4_128b8, 65536
  %v5_128c4 = or i32 %v4_128c4, %v5_128bc
  %v4_128c8 = mul nuw i32 %v4_128c0, 16777216
  %v5_128c8 = or i32 %v5_128c4, %v4_128c8
  store i32 %v5_128c8, i32* %r3.global-to-local, align 4
  %v1_128cc = load i32, i32* %r7.global-to-local, align 4
  %v2_128cc = add i32 %v1_128cc, 72
  %v3_128cc = inttoptr i32 %v2_128cc to i32*
  store i32 %v5_128c8, i32* %v3_128cc, align 4
  %v0_128d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_128d0 = add i32 %v0_128d0, 81
  %v2_128d0 = inttoptr i32 %v1_128d0 to i8*
  %v3_128d0 = load i8, i8* %v2_128d0, align 1
  %v4_128d0 = zext i8 %v3_128d0 to i32
  %v1_128d4 = add i32 %v0_128d0, 80
  %v2_128d4 = inttoptr i32 %v1_128d4 to i8*
  %v3_128d4 = load i8, i8* %v2_128d4, align 1
  %v4_128d4 = zext i8 %v3_128d4 to i32
  store i32 %v4_128d4, i32* %r3.global-to-local, align 4
  %v1_128d8 = add i32 %v0_128d0, 82
  %v2_128d8 = inttoptr i32 %v1_128d8 to i8*
  %v3_128d8 = load i8, i8* %v2_128d8, align 1
  %v4_128d8 = zext i8 %v3_128d8 to i32
  %v4_128dc = mul nuw nsw i32 %v4_128d0, 256
  %v5_128dc = or i32 %v4_128d4, %v4_128dc
  store i32 %v5_128dc, i32* %r3.global-to-local, align 4
  %v1_128e0 = add i32 %v0_128d0, 83
  %v2_128e0 = inttoptr i32 %v1_128e0 to i8*
  %v3_128e0 = load i8, i8* %v2_128e0, align 1
  %v4_128e0 = zext i8 %v3_128e0 to i32
  %v4_128e4 = mul nuw nsw i32 %v4_128d8, 65536
  %v5_128e4 = or i32 %v4_128e4, %v5_128dc
  %v4_128e8 = mul nuw i32 %v4_128e0, 16777216
  %v5_128e8 = or i32 %v5_128e4, %v4_128e8
  store i32 %v5_128e8, i32* %r3.global-to-local, align 4
  %v1_128ec = load i32, i32* %r7.global-to-local, align 4
  %v2_128ec = add i32 %v1_128ec, 80
  %v3_128ec = inttoptr i32 %v2_128ec to i32*
  store i32 %v5_128e8, i32* %v3_128ec, align 4
  %v0_128f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_128f0 = add i32 %v0_128f0, 69
  %v2_128f0 = inttoptr i32 %v1_128f0 to i8*
  %v3_128f0 = load i8, i8* %v2_128f0, align 1
  %v4_128f0 = zext i8 %v3_128f0 to i32
  %v1_128f4 = add i32 %v0_128f0, 68
  %v2_128f4 = inttoptr i32 %v1_128f4 to i8*
  %v3_128f4 = load i8, i8* %v2_128f4, align 1
  %v4_128f4 = zext i8 %v3_128f4 to i32
  store i32 %v4_128f4, i32* %r3.global-to-local, align 4
  %v1_128f8 = add i32 %v0_128f0, 70
  %v2_128f8 = inttoptr i32 %v1_128f8 to i8*
  %v3_128f8 = load i8, i8* %v2_128f8, align 1
  %v4_128f8 = zext i8 %v3_128f8 to i32
  %v4_128fc = mul nuw nsw i32 %v4_128f0, 256
  %v5_128fc = or i32 %v4_128f4, %v4_128fc
  store i32 %v5_128fc, i32* %r3.global-to-local, align 4
  %v1_12900 = add i32 %v0_128f0, 71
  %v2_12900 = inttoptr i32 %v1_12900 to i8*
  %v3_12900 = load i8, i8* %v2_12900, align 1
  %v4_12900 = zext i8 %v3_12900 to i32
  %v4_12904 = mul nuw nsw i32 %v4_128f8, 65536
  %v5_12904 = or i32 %v4_12904, %v5_128fc
  %v4_12908 = mul nuw i32 %v4_12900, 16777216
  %v5_12908 = or i32 %v5_12904, %v4_12908
  store i32 %v5_12908, i32* %r3.global-to-local, align 4
  %v1_1290c = load i32, i32* %r7.global-to-local, align 4
  %v2_1290c = add i32 %v1_1290c, 68
  %v3_1290c = inttoptr i32 %v2_1290c to i32*
  store i32 %v5_12908, i32* %v3_1290c, align 4
  %v0_12910 = load i32, i32* %r4.global-to-local, align 4
  %v1_12910 = add i32 %v0_12910, 77
  %v2_12910 = inttoptr i32 %v1_12910 to i8*
  %v3_12910 = load i8, i8* %v2_12910, align 1
  %v4_12910 = zext i8 %v3_12910 to i32
  %v1_12914 = add i32 %v0_12910, 76
  %v2_12914 = inttoptr i32 %v1_12914 to i8*
  %v3_12914 = load i8, i8* %v2_12914, align 1
  %v4_12914 = zext i8 %v3_12914 to i32
  store i32 %v4_12914, i32* %r3.global-to-local, align 4
  %v1_12918 = add i32 %v0_12910, 78
  %v2_12918 = inttoptr i32 %v1_12918 to i8*
  %v3_12918 = load i8, i8* %v2_12918, align 1
  %v4_12918 = zext i8 %v3_12918 to i32
  %v4_1291c = mul nuw nsw i32 %v4_12910, 256
  %v5_1291c = or i32 %v4_12914, %v4_1291c
  store i32 %v5_1291c, i32* %r3.global-to-local, align 4
  %v1_12920 = add i32 %v0_12910, 79
  %v2_12920 = inttoptr i32 %v1_12920 to i8*
  %v3_12920 = load i8, i8* %v2_12920, align 1
  %v4_12920 = zext i8 %v3_12920 to i32
  %v4_12924 = mul nuw nsw i32 %v4_12918, 65536
  %v5_12924 = or i32 %v4_12924, %v5_1291c
  %v4_12928 = mul nuw i32 %v4_12920, 16777216
  %v5_12928 = or i32 %v5_12924, %v4_12928
  store i32 %v5_12928, i32* %r3.global-to-local, align 4
  %v1_1292c = load i32, i32* %r7.global-to-local, align 4
  %v2_1292c = add i32 %v1_1292c, 76
  %v3_1292c = inttoptr i32 %v2_1292c to i32*
  store i32 %v5_12928, i32* %v3_1292c, align 4
  %v0_12930 = load i32, i32* %r4.global-to-local, align 4
  %v1_12930 = add i32 %v0_12930, 85
  %v2_12930 = inttoptr i32 %v1_12930 to i8*
  %v3_12930 = load i8, i8* %v2_12930, align 1
  %v4_12930 = zext i8 %v3_12930 to i32
  %v1_12934 = add i32 %v0_12930, 84
  %v2_12934 = inttoptr i32 %v1_12934 to i8*
  %v3_12934 = load i8, i8* %v2_12934, align 1
  %v4_12934 = zext i8 %v3_12934 to i32
  store i32 %v4_12934, i32* %r3.global-to-local, align 4
  %v1_12938 = add i32 %v0_12930, 86
  %v2_12938 = inttoptr i32 %v1_12938 to i8*
  %v3_12938 = load i8, i8* %v2_12938, align 1
  %v4_12938 = zext i8 %v3_12938 to i32
  %v4_1293c = mul nuw nsw i32 %v4_12930, 256
  %v5_1293c = or i32 %v4_12934, %v4_1293c
  store i32 %v5_1293c, i32* %r3.global-to-local, align 4
  %v1_12940 = add i32 %v0_12930, 87
  %v2_12940 = inttoptr i32 %v1_12940 to i8*
  %v3_12940 = load i8, i8* %v2_12940, align 1
  %v4_12940 = zext i8 %v3_12940 to i32
  %v4_12944 = mul nuw nsw i32 %v4_12938, 65536
  %v5_12944 = or i32 %v4_12944, %v5_1293c
  %v4_12948 = mul nuw i32 %v4_12940, 16777216
  %v5_12948 = or i32 %v5_12944, %v4_12948
  store i32 %v5_12948, i32* %r3.global-to-local, align 4
  %v1_1294c = load i32, i32* %r7.global-to-local, align 4
  %v2_1294c = add i32 %v1_1294c, 84
  %v3_1294c = inttoptr i32 %v2_1294c to i32*
  store i32 %v5_12948, i32* %v3_1294c, align 4
  ret i32 %v4_12850

; uselistorder directives
  uselistorder i32 %v4_12850, { 1, 0 }
  uselistorder i32 %v0_12844, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_127d4, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_12784, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_126a4, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 74, { 2, 0, 1 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 58, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 47, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 33, { 2, 3, 0, 1 }
  uselistorder i32 30, { 2, 0, 3, 1 }
  uselistorder i32 29, { 1, 2, 3, 0 }
  uselistorder i32 26, { 2, 0, 1, 3 }
  uselistorder i32 25, { 4, 8, 9, 1, 0, 3, 5, 6, 7, 2 }
  uselistorder i32 23, { 5, 0, 6, 1, 7, 2, 8, 9, 3, 11, 10, 4 }
  uselistorder i32 22, { 10, 1, 15, 2, 3, 4, 5, 0, 6, 11, 7, 12, 8, 13, 14, 9 }
  uselistorder i32 21, { 6, 1, 0, 7, 2, 8, 3, 9, 4, 10, 11, 12, 5 }
  uselistorder i32 19, { 11, 16, 17, 18, 4, 1, 5, 12, 6, 13, 7, 14, 0, 15, 2, 19, 20, 8, 21, 3, 22, 9, 23, 10, 24 }
  uselistorder i32 18, { 9, 13, 14, 15, 3, 0, 4, 10, 5, 11, 6, 12, 8, 16, 7, 17, 1, 18, 2, 19 }
  uselistorder i32 17, { 15, 22, 0, 3, 23, 24, 4, 25, 26, 5, 1, 6, 16, 7, 17, 8, 18, 21, 19, 20, 9, 27, 10, 28, 11, 29, 12, 30, 13, 31, 32, 2, 33, 34, 35, 14, 36, 37, 38, 39, 40 }
  uselistorder i32 6, { 27, 32, 14, 15, 73, 2, 30, 3, 16, 28, 0, 17, 31, 29, 4, 18, 19, 20, 5, 21, 33, 34, 35, 6, 36, 37, 38, 39, 7, 40, 41, 42, 43, 8, 44, 9, 45, 46, 22, 47, 10, 48, 49, 50, 23, 51, 11, 52, 53, 54, 24, 55, 56, 57, 58, 59, 25, 60, 12, 61, 66, 67, 68, 69, 70, 26, 71, 13, 72, 1, 62, 63, 64, 65 }
}

define i32 @function_12958(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12958:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12958 = load i32, i32* @r4, align 4
  store i32 %v3_12958, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_12970 = inttoptr i32 %arg2 to i8*
  %v3_12970 = call i32 @function_10fd0(i8* %v2_12970, i32 0)
  store i32 %v3_12970, i32* %r0.global-to-local, align 4
  %v0_12974 = load i32, i32* %r5.global-to-local, align 4
  %v1_12974 = inttoptr i32 %v0_12974 to i32*
  %v2_12974 = load i32, i32* %v1_12974, align 4
  store i32 %v2_12974, i32* %r3.global-to-local, align 4
  %v1_12978 = add i32 %v0_12974, 4
  %v2_12978 = inttoptr i32 %v1_12978 to i32*
  %v3_12978 = load i32, i32* %v2_12978, align 4
  store i32 %v3_12978, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_12980 = load i32, i32* %r6.global-to-local, align 4
  %v1_12980 = inttoptr i32 %v0_12980 to i32*
  store i32 %v2_12974, i32* %v1_12980, align 4
  %v3_12980 = add i32 %v0_12980, 4
  %v4_12980 = inttoptr i32 %v3_12980 to i32*
  %v5_12980 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12980, i32* %v4_12980, align 4
  %v0_12984 = load i32, i32* %r2.global-to-local, align 4
  %v1_12984 = load i32, i32* %r6.global-to-local, align 4
  %v2_12984 = add i32 %v1_12984, 12
  %v3_12984 = inttoptr i32 %v2_12984 to i32*
  store i32 %v0_12984, i32* %v3_12984, align 4
  %v0_12988 = load i32, i32* %r5.global-to-local, align 4
  %v1_12988 = add i32 %v0_12988, 9
  %v2_12988 = inttoptr i32 %v1_12988 to i8*
  %v3_12988 = load i8, i8* %v2_12988, align 1
  %v4_12988 = zext i8 %v3_12988 to i32
  store i32 %v4_12988, i32* %r2.global-to-local, align 4
  %v1_1298c = add i32 %v0_12988, 8
  %v2_1298c = inttoptr i32 %v1_1298c to i8*
  %v3_1298c = load i8, i8* %v2_1298c, align 1
  %v4_1298c = zext i8 %v3_1298c to i32
  %v4_12990 = mul nuw nsw i32 %v4_12988, 256
  %v5_12990 = or i32 %v4_1298c, %v4_12990
  store i32 %v5_12990, i32* %r3.global-to-local, align 4
  %v1_12994 = load i32, i32* %r6.global-to-local, align 4
  %v2_12994 = add i32 %v1_12994, 16
  %v3_12994 = inttoptr i32 %v2_12994 to i32*
  store i32 %v5_12990, i32* %v3_12994, align 4
  %v0_12998 = load i32, i32* %r5.global-to-local, align 4
  %v1_12998 = add i32 %v0_12998, 11
  %v2_12998 = inttoptr i32 %v1_12998 to i8*
  %v3_12998 = load i8, i8* %v2_12998, align 1
  %v4_12998 = zext i8 %v3_12998 to i32
  store i32 %v4_12998, i32* %r2.global-to-local, align 4
  %v1_1299c = add i32 %v0_12998, 10
  %v2_1299c = inttoptr i32 %v1_1299c to i8*
  %v3_1299c = load i8, i8* %v2_1299c, align 1
  %v4_1299c = zext i8 %v3_1299c to i32
  %v4_129a0 = mul nuw nsw i32 %v4_12998, 256
  %v5_129a0 = or i32 %v4_1299c, %v4_129a0
  store i32 %v5_129a0, i32* %r3.global-to-local, align 4
  %v1_129a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_129a4 = add i32 %v1_129a4, 20
  %v3_129a4 = inttoptr i32 %v2_129a4 to i32*
  store i32 %v5_129a0, i32* %v3_129a4, align 4
  %v0_129a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_129a8 = add i32 %v0_129a8, 13
  %v2_129a8 = inttoptr i32 %v1_129a8 to i8*
  %v3_129a8 = load i8, i8* %v2_129a8, align 1
  %v4_129a8 = zext i8 %v3_129a8 to i32
  store i32 %v4_129a8, i32* %r2.global-to-local, align 4
  %v1_129ac = add i32 %v0_129a8, 12
  %v2_129ac = inttoptr i32 %v1_129ac to i8*
  %v3_129ac = load i8, i8* %v2_129ac, align 1
  %v4_129ac = zext i8 %v3_129ac to i32
  %v4_129b0 = mul nuw nsw i32 %v4_129a8, 256
  %v5_129b0 = or i32 %v4_129ac, %v4_129b0
  store i32 %v5_129b0, i32* %r3.global-to-local, align 4
  %v1_129b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_129b4 = add i32 %v1_129b4, 24
  %v3_129b4 = inttoptr i32 %v2_129b4 to i32*
  store i32 %v5_129b0, i32* %v3_129b4, align 4
  %v0_129b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_129b8 = add i32 %v0_129b8, 20
  %v2_129b8 = inttoptr i32 %v1_129b8 to i32*
  %v3_129b8 = load i32, i32* %v2_129b8, align 4
  store i32 %v3_129b8, i32* %r3.global-to-local, align 4
  %v1_129bc = add i32 %v0_129b8, 14
  %v2_129bc = inttoptr i32 %v1_129bc to i8*
  %v3_129bc = load i8, i8* %v2_129bc, align 1
  %v4_129bc = zext i8 %v3_129bc to i32
  store i32 %v4_129bc, i32* %r0.global-to-local, align 4
  %v1_129c0 = add i32 %v0_129b8, 15
  %v2_129c0 = inttoptr i32 %v1_129c0 to i8*
  %v3_129c0 = load i8, i8* %v2_129c0, align 1
  %v4_129c0 = zext i8 %v3_129c0 to i32
  store i32 %v4_129c0, i32* %ip.global-to-local, align 4
  %v1_129c4 = add i32 %v0_129b8, 16
  %v2_129c4 = inttoptr i32 %v1_129c4 to i32*
  %v3_129c4 = load i32, i32* %v2_129c4, align 4
  store i32 %v3_129c4, i32* %r1.global-to-local, align 4
  %v1_129c8 = load i32, i32* %r6.global-to-local, align 4
  %v2_129c8 = add i32 %v1_129c8, 44
  %v3_129c8 = inttoptr i32 %v2_129c8 to i32*
  store i32 %v3_129b8, i32* %v3_129c8, align 4
  %v0_129cc = load i32, i32* %r5.global-to-local, align 4
  %v1_129cc = add i32 %v0_129cc, 24
  %v2_129cc = inttoptr i32 %v1_129cc to i32*
  %v3_129cc = load i32, i32* %v2_129cc, align 4
  store i32 %v3_129cc, i32* %r3.global-to-local, align 4
  %v1_129d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_129d0 = add i32 %v1_129d0, 48
  %v3_129d0 = inttoptr i32 %v2_129d0 to i32*
  store i32 %v3_129cc, i32* %v3_129d0, align 4
  %v0_129d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_129d4 = add i32 %v0_129d4, 28
  %v2_129d4 = inttoptr i32 %v1_129d4 to i32*
  %v3_129d4 = load i32, i32* %v2_129d4, align 4
  store i32 %v3_129d4, i32* %r3.global-to-local, align 4
  %v1_129d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_129d8 = add i32 %v1_129d8, 52
  %v3_129d8 = inttoptr i32 %v2_129d8 to i32*
  store i32 %v3_129d4, i32* %v3_129d8, align 4
  %v0_129dc = load i32, i32* %r5.global-to-local, align 4
  %v1_129dc = add i32 %v0_129dc, 32
  %v2_129dc = inttoptr i32 %v1_129dc to i32*
  %v3_129dc = load i32, i32* %v2_129dc, align 4
  store i32 %v3_129dc, i32* %r3.global-to-local, align 4
  %v1_129e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_129e0 = add i32 %v1_129e0, 56
  %v3_129e0 = inttoptr i32 %v2_129e0 to i32*
  store i32 %v3_129dc, i32* %v3_129e0, align 4
  %v0_129e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_129e4 = add i32 %v0_129e4, 40
  %v2_129e4 = inttoptr i32 %v1_129e4 to i32*
  %v3_129e4 = load i32, i32* %v2_129e4, align 4
  store i32 %v3_129e4, i32* %r3.global-to-local, align 4
  %v1_129e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_129e8 = add i32 %v1_129e8, 64
  %v3_129e8 = inttoptr i32 %v2_129e8 to i32*
  store i32 %v3_129e4, i32* %v3_129e8, align 4
  %v0_129ec = load i32, i32* %r5.global-to-local, align 4
  %v1_129ec = add i32 %v0_129ec, 48
  %v2_129ec = inttoptr i32 %v1_129ec to i32*
  %v3_129ec = load i32, i32* %v2_129ec, align 4
  store i32 %v3_129ec, i32* %r3.global-to-local, align 4
  %v1_129f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_129f0 = add i32 %v1_129f0, 72
  %v3_129f0 = inttoptr i32 %v2_129f0 to i32*
  store i32 %v3_129ec, i32* %v3_129f0, align 4
  %v0_129f4 = load i32, i32* %r5.global-to-local, align 4
  %v1_129f4 = add i32 %v0_129f4, 36
  %v2_129f4 = inttoptr i32 %v1_129f4 to i32*
  %v3_129f4 = load i32, i32* %v2_129f4, align 4
  store i32 %v3_129f4, i32* %r3.global-to-local, align 4
  %v1_129f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_129f8 = add i32 %v1_129f8, 60
  %v3_129f8 = inttoptr i32 %v2_129f8 to i32*
  store i32 %v3_129f4, i32* %v3_129f8, align 4
  %v0_129fc = load i32, i32* %r5.global-to-local, align 4
  %v1_129fc = add i32 %v0_129fc, 44
  %v2_129fc = inttoptr i32 %v1_129fc to i32*
  %v3_129fc = load i32, i32* %v2_129fc, align 4
  store i32 %v3_129fc, i32* %r3.global-to-local, align 4
  %v0_12a00 = load i32, i32* %r0.global-to-local, align 4
  %v1_12a00 = load i32, i32* %ip.global-to-local, align 4
  %v4_12a00 = mul i32 %v1_12a00, 256
  %v5_12a00 = or i32 %v4_12a00, %v0_12a00
  store i32 %v5_12a00, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_12a08 = load i32, i32* %r6.global-to-local, align 4
  %v2_12a08 = add i32 %v1_12a08, 28
  %v3_12a08 = inttoptr i32 %v2_12a08 to i32*
  store i32 %v5_12a00, i32* %v3_12a08, align 4
  %v0_12a0c = load i32, i32* %r1.global-to-local, align 4
  %v1_12a0c = load i32, i32* %r6.global-to-local, align 4
  %v2_12a0c = add i32 %v1_12a0c, 32
  %v3_12a0c = inttoptr i32 %v2_12a0c to i32*
  store i32 %v0_12a0c, i32* %v3_12a0c, align 4
  %v0_12a10 = load i32, i32* %r2.global-to-local, align 4
  %v1_12a10 = load i32, i32* %r6.global-to-local, align 4
  %v2_12a10 = add i32 %v1_12a10, 36
  %v3_12a10 = inttoptr i32 %v2_12a10 to i32*
  store i32 %v0_12a10, i32* %v3_12a10, align 4
  %v0_12a14 = load i32, i32* %r3.global-to-local, align 4
  %v1_12a14 = load i32, i32* %r6.global-to-local, align 4
  %v2_12a14 = add i32 %v1_12a14, 68
  %v3_12a14 = inttoptr i32 %v2_12a14 to i32*
  store i32 %v0_12a14, i32* %v3_12a14, align 4
  %v0_12a18 = load i32, i32* %r5.global-to-local, align 4
  %v1_12a18 = add i32 %v0_12a18, 52
  %v2_12a18 = inttoptr i32 %v1_12a18 to i32*
  %v3_12a18 = load i32, i32* %v2_12a18, align 4
  store i32 %v3_12a18, i32* %r3.global-to-local, align 4
  %v1_12a1c = load i32, i32* %r6.global-to-local, align 4
  %v2_12a1c = add i32 %v1_12a1c, 76
  %v3_12a1c = inttoptr i32 %v2_12a1c to i32*
  store i32 %v3_12a18, i32* %v3_12a1c, align 4
  %v2_12a20 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12a20, i32* %r4.global-to-local, align 4
  ret i32 %v5_12a00

; uselistorder directives
  uselistorder i32 %v0_129b8, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 14, 11, 12, 1, 5, 43, 13, 15, 16, 0, 6, 17, 18, 19, 7, 20, 21, 22, 8, 23, 24, 25, 9, 26, 27, 28, 10, 29, 30, 31, 2, 32, 33, 34, 35, 36, 3, 37, 38, 39, 40, 41, 4, 42 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 15, { 8, 6, 5, 7, 2, 3, 0, 9, 10, 4, 11, 12, 13, 14, 1, 15 }
  uselistorder i32 14, { 12, 10, 20, 0, 1, 9, 4, 11, 5, 6, 7, 8, 13, 14, 2, 15, 16, 17, 18, 3, 19 }
  uselistorder i32 13, { 18, 11, 10, 12, 13, 14, 15, 5, 16, 6, 17, 0, 1, 7, 8, 9, 19, 20, 21, 22, 23, 2, 24, 25, 26, 27, 28, 29, 30, 31, 3, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 4, 44, 45 }
  uselistorder i32 9, { 47, 48, 49, 7, 4, 50, 8, 5, 37, 30, 10, 34, 11, 33, 9, 3, 38, 31, 39, 2, 32, 12, 40, 13, 41, 14, 42, 15, 43, 16, 44, 17, 45, 46, 18, 35, 36, 19, 20, 21, 22, 23, 24, 25, 26, 0, 27, 1, 6, 28, 62, 51, 52, 29, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64 }
  uselistorder i32 (i8*, i32)* @function_10fd0, { 2, 0, 6, 7, 1, 3, 4, 5 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_12a30() local_unnamed_addr {
dec_label_pc_12a30:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_12a30 = load i32, i32* @r1, align 4
  %v1_12a30 = load i32, i32* @r0, align 4
  %v2_12a30 = sub i32 %v0_12a30, %v1_12a30
  %v3_12a30 = icmp ult i32 %v0_12a30, %v1_12a30
  %v4_12a30 = xor i32 %v1_12a30, %v0_12a30
  %v5_12a30 = xor i32 %v2_12a30, %v0_12a30
  %v6_12a30 = and i32 %v5_12a30, %v4_12a30
  %v7_12a30 = icmp slt i32 %v6_12a30, 0
  store i1 %v7_12a30, i1* %cpsr_v.global-to-local, align 1
  %v8_12a30 = icmp slt i32 %v2_12a30, 0
  store i1 %v8_12a30, i1* %cpsr_n.global-to-local, align 1
  %v9_12a30 = icmp eq i32 %v0_12a30, %v1_12a30
  store i1 %v9_12a30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12a30, label %dec_label_pc_12c7c, label %dec_label_pc_12a38

dec_label_pc_12a38:                               ; preds = %dec_label_pc_12a30
  br i1 %v9_12a30, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_12a38
  %merge = phi i32 [ %v0_12a30, %dec_label_pc_12a38 ], [ %v2_12d10, %bb141 ], [ %v11_12d2c, %bb144 ], [ %v7_12d2c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12a38
  store i32 %v1_12a30, i32* %stack_var_-8, align 4
  %v0_12a40 = load i32, i32* @r2, align 4
  %v2_12a40 = add i32 %v0_12a40, -4
  store i32 %v2_12a40, i32* %r2.global-to-local, align 4
  %v4_12a40 = sub i32 3, %v0_12a40
  %v5_12a40 = and i32 %v4_12a40, %v0_12a40
  %v6_12a40 = icmp slt i32 %v5_12a40, 0
  store i1 %v6_12a40, i1* %cpsr_v.global-to-local, align 1
  %v7_12a40 = icmp slt i32 %v2_12a40, 0
  store i1 %v7_12a40, i1* %cpsr_n.global-to-local, align 1
  %v8_12a40 = icmp eq i32 %v0_12a40, 4
  store i1 %v8_12a40, i1* %cpsr_z.global-to-local, align 1
  %v5_12a44 = icmp slt i32 %v0_12a40, 4
  br i1 %v5_12a44, label %bb131, label %dec_label_pc_12a48

dec_label_pc_12a48:                               ; preds = %bb
  %v1_12a48 = urem i32 %v1_12a30, 4
  store i32 %v1_12a48, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12a48 = icmp eq i32 %v1_12a48, 0
  store i1 %v2_12a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12a48, label %dec_label_pc_12a50, label %dec_label_pc_12af4

dec_label_pc_12a50:                               ; preds = %dec_label_pc_12a48
  %v1_12a50 = urem i32 %v0_12a30, 4
  store i32 %v1_12a50, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12a50 = icmp eq i32 %v1_12a50, 0
  store i1 %v2_12a50, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_12a30 to i2
  br i1 %v2_12a50, label %dec_label_pc_12a58, label %dec_label_pc_12b24

dec_label_pc_12a58:                               ; preds = %dec_label_pc_12a50, %dec_label_pc_12b1c
  %v0_12a7092 = phi i32 [ %v1_12a30, %dec_label_pc_12a50 ], [ %v0_12b6c75, %dec_label_pc_12b1c ]
  %v0_12a6c91 = phi i32 [ %v0_12a30, %dec_label_pc_12a50 ], [ %v0_12b1c, %dec_label_pc_12b1c ]
  %v0_12a58 = phi i32 [ %v2_12a40, %dec_label_pc_12a50 ], [ %v2_12b14, %dec_label_pc_12b1c ]
  %v2_12a58 = add i32 %v0_12a58, -8
  store i32 %v2_12a58, i32* %r2.global-to-local, align 4
  %v4_12a58 = sub i32 7, %v0_12a58
  %v5_12a58 = and i32 %v4_12a58, %v0_12a58
  %v6_12a58 = icmp slt i32 %v5_12a58, 0
  store i1 %v6_12a58, i1* %cpsr_v.global-to-local, align 1
  %v7_12a58 = icmp slt i32 %v2_12a58, 0
  store i1 %v7_12a58, i1* %cpsr_n.global-to-local, align 1
  %v8_12a58 = icmp eq i32 %v0_12a58, 8
  store i1 %v8_12a58, i1* %cpsr_z.global-to-local, align 1
  %v5_12a5c = icmp slt i32 %v0_12a58, 8
  br i1 %v5_12a5c, label %dec_label_pc_12aac, label %dec_label_pc_12a60

dec_label_pc_12a60:                               ; preds = %dec_label_pc_12a58
  %v2_12a60 = add i32 %v0_12a58, -28
  store i32 %v2_12a60, i32* %r2.global-to-local, align 4
  %v4_12a60 = sub i32 27, %v0_12a58
  %v5_12a60 = and i32 %v4_12a60, %v2_12a58
  %v6_12a60 = icmp slt i32 %v5_12a60, 0
  store i1 %v6_12a60, i1* %cpsr_v.global-to-local, align 1
  %v7_12a60 = icmp slt i32 %v2_12a60, 0
  store i1 %v7_12a60, i1* %cpsr_n.global-to-local, align 1
  %v8_12a60 = icmp eq i32 %v2_12a58, 20
  store i1 %v8_12a60, i1* %cpsr_z.global-to-local, align 1
  %v5_12a64 = icmp slt i32 %v2_12a58, 20
  br i1 %v5_12a64, label %dec_label_pc_12a98, label %dec_label_pc_12a68

dec_label_pc_12a68:                               ; preds = %dec_label_pc_12a60
  %v0_12a68 = load i32, i32* @r4, align 4
  store i32 %v0_12a68, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12a6c

dec_label_pc_12a6c:                               ; preds = %dec_label_pc_12a6c.dec_label_pc_12a6c_crit_edge, %dec_label_pc_12a68
  %v0_12a70 = phi i32 [ %v12_12a78, %dec_label_pc_12a6c.dec_label_pc_12a6c_crit_edge ], [ %v0_12a7092, %dec_label_pc_12a68 ]
  %v0_12a6c = phi i32 [ %v0_12a6c.pre, %dec_label_pc_12a6c.dec_label_pc_12a6c_crit_edge ], [ %v0_12a6c91, %dec_label_pc_12a68 ]
  %v1_12a6c = inttoptr i32 %v0_12a6c to i32*
  %v2_12a6c = load i32, i32* %v1_12a6c, align 4
  store i32 %v2_12a6c, i32* %r3.global-to-local, align 4
  %v3_12a6c = add i32 %v0_12a6c, 4
  %v4_12a6c = inttoptr i32 %v3_12a6c to i32*
  %v5_12a6c = load i32, i32* %v4_12a6c, align 4
  store i32 %v5_12a6c, i32* %r4.global-to-local, align 4
  %v6_12a6c = add i32 %v0_12a6c, 8
  %v7_12a6c = inttoptr i32 %v6_12a6c to i32*
  %v8_12a6c = load i32, i32* %v7_12a6c, align 4
  store i32 %v8_12a6c, i32* %ip.global-to-local, align 4
  %v9_12a6c = add i32 %v0_12a6c, 12
  %v10_12a6c = inttoptr i32 %v9_12a6c to i32*
  %v11_12a6c = load i32, i32* %v10_12a6c, align 4
  store i32 %v11_12a6c, i32* %lr.global-to-local, align 4
  %v12_12a6c = add i32 %v0_12a6c, 16
  store i32 %v12_12a6c, i32* %r1.global-to-local, align 4
  %v1_12a70 = inttoptr i32 %v0_12a70 to i32*
  store i32 %v2_12a6c, i32* %v1_12a70, align 4
  %v3_12a70 = add i32 %v0_12a70, 4
  %v4_12a70 = inttoptr i32 %v3_12a70 to i32*
  %v5_12a70 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12a70, i32* %v4_12a70, align 4
  %v6_12a70 = add i32 %v0_12a70, 8
  %v7_12a70 = inttoptr i32 %v6_12a70 to i32*
  %v8_12a70 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_12a70, i32* %v7_12a70, align 4
  %v9_12a70 = add i32 %v0_12a70, 12
  %v10_12a70 = inttoptr i32 %v9_12a70 to i32*
  %v11_12a70 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_12a70, i32* %v10_12a70, align 4
  %v12_12a70 = add i32 %v0_12a70, 16
  store i32 %v12_12a70, i32* %r0.global-to-local, align 4
  %v0_12a74 = load i32, i32* %r1.global-to-local, align 4
  %v1_12a74 = inttoptr i32 %v0_12a74 to i32*
  %v2_12a74 = load i32, i32* %v1_12a74, align 4
  store i32 %v2_12a74, i32* %r3.global-to-local, align 4
  %v3_12a74 = add i32 %v0_12a74, 4
  %v4_12a74 = inttoptr i32 %v3_12a74 to i32*
  %v5_12a74 = load i32, i32* %v4_12a74, align 4
  store i32 %v5_12a74, i32* %r4.global-to-local, align 4
  %v6_12a74 = add i32 %v0_12a74, 8
  %v7_12a74 = inttoptr i32 %v6_12a74 to i32*
  %v8_12a74 = load i32, i32* %v7_12a74, align 4
  store i32 %v8_12a74, i32* %ip.global-to-local, align 4
  %v9_12a74 = add i32 %v0_12a74, 12
  %v10_12a74 = inttoptr i32 %v9_12a74 to i32*
  %v11_12a74 = load i32, i32* %v10_12a74, align 4
  store i32 %v11_12a74, i32* @lr, align 4
  %v12_12a74 = add i32 %v0_12a74, 16
  store i32 %v12_12a74, i32* @r1, align 4
  %v1_12a78 = inttoptr i32 %v12_12a70 to i32*
  store i32 %v2_12a74, i32* %v1_12a78, align 4
  %v3_12a78 = add i32 %v0_12a70, 20
  %v4_12a78 = inttoptr i32 %v3_12a78 to i32*
  %v5_12a78 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12a78, i32* %v4_12a78, align 4
  %v6_12a78 = add i32 %v0_12a70, 24
  %v7_12a78 = inttoptr i32 %v6_12a78 to i32*
  %v8_12a78 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_12a78, i32* %v7_12a78, align 4
  %v9_12a78 = add i32 %v0_12a70, 28
  %v10_12a78 = inttoptr i32 %v9_12a78 to i32*
  %v11_12a78 = load i32, i32* @lr, align 4
  store i32 %v11_12a78, i32* %v10_12a78, align 4
  %v12_12a78 = add i32 %v0_12a70, 32
  store i32 %v12_12a78, i32* @r0, align 4
  %v0_12a7c = load i32, i32* %r2.global-to-local, align 4
  %v2_12a7c = add i32 %v0_12a7c, -32
  store i32 %v2_12a7c, i32* %r2.global-to-local, align 4
  %v6_12a80 = icmp slt i32 %v0_12a7c, 32
  br i1 %v6_12a80, label %dec_label_pc_12a84, label %dec_label_pc_12a6c.dec_label_pc_12a6c_crit_edge

dec_label_pc_12a6c.dec_label_pc_12a6c_crit_edge:  ; preds = %dec_label_pc_12a6c
  %v0_12a6c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_12a6c

dec_label_pc_12a84:                               ; preds = %dec_label_pc_12a6c
  %v4_12a84 = add i32 %v0_12a7c, -16
  %v6_12a84 = add i32 %v0_12a7c, 2147483616
  %v7_12a84 = and i32 %v4_12a84, %v6_12a84
  %v8_12a84 = icmp slt i32 %v7_12a84, 0
  store i1 %v8_12a84, i1* %cpsr_v.global-to-local, align 1
  %v9_12a84 = icmp slt i32 %v4_12a84, 0
  store i1 %v9_12a84, i1* %cpsr_n.global-to-local, align 1
  %v10_12a84 = icmp eq i32 %v4_12a84, 0
  store i1 %v10_12a84, i1* %cpsr_z.global-to-local, align 1
  %v5_12a88 = icmp slt i32 %v2_12a7c, -16
  br i1 %v5_12a88, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_12a84
  %v6_12a88 = load i32, i32* @r1, align 4
  %v7_12a88 = inttoptr i32 %v6_12a88 to i32*
  %v8_12a88 = load i32, i32* %v7_12a88, align 4
  store i32 %v8_12a88, i32* %r3.global-to-local, align 4
  %v9_12a88 = add i32 %v6_12a88, 4
  %v10_12a88 = inttoptr i32 %v9_12a88 to i32*
  %v11_12a88 = load i32, i32* %v10_12a88, align 4
  store i32 %v11_12a88, i32* %r4.global-to-local, align 4
  %v12_12a88 = add i32 %v6_12a88, 8
  %v13_12a88 = inttoptr i32 %v12_12a88 to i32*
  %v14_12a88 = load i32, i32* %v13_12a88, align 4
  store i32 %v14_12a88, i32* %ip.global-to-local, align 4
  %v15_12a88 = add i32 %v6_12a88, 12
  %v16_12a88 = inttoptr i32 %v15_12a88 to i32*
  %v17_12a88 = load i32, i32* %v16_12a88, align 4
  store i32 %v17_12a88, i32* @lr, align 4
  %v18_12a88 = add i32 %v6_12a88, 16
  store i32 %v18_12a88, i32* @r1, align 4
  %v7_12a8c = inttoptr i32 %v12_12a78 to i32*
  store i32 %v8_12a88, i32* %v7_12a8c, align 4
  %v9_12a8c = add i32 %v0_12a70, 36
  %v10_12a8c = inttoptr i32 %v9_12a8c to i32*
  %v11_12a8c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_12a8c, i32* %v10_12a8c, align 4
  %v12_12a8c = add i32 %v0_12a70, 40
  %v13_12a8c = inttoptr i32 %v12_12a8c to i32*
  %v14_12a8c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v14_12a8c, i32* %v13_12a8c, align 4
  %v15_12a8c = add i32 %v0_12a70, 44
  %v16_12a8c = inttoptr i32 %v15_12a8c to i32*
  %v17_12a8c = load i32, i32* @lr, align 4
  store i32 %v17_12a8c, i32* %v16_12a8c, align 4
  %v18_12a8c = add i32 %v0_12a70, 48
  store i32 %v18_12a8c, i32* @r0, align 4
  %v6_12a90 = load i32, i32* %r2.global-to-local, align 4
  %v7_12a90 = add i32 %v6_12a90, -16
  store i32 %v7_12a90, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12a84, %bb128
  %v3_12aa0101 = phi i32 [ %v12_12a78, %dec_label_pc_12a84 ], [ %v18_12a8c, %bb128 ]
  %v0_12a9895 = phi i32 [ %v2_12a7c, %dec_label_pc_12a84 ], [ %v7_12a90, %bb128 ]
  %v2_12a94 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12a94, i32* @r4, align 4
  br label %dec_label_pc_12a98

dec_label_pc_12a98:                               ; preds = %dec_label_pc_12a60, %.thread1
  %v3_12aa0100 = phi i32 [ %v0_12a7092, %dec_label_pc_12a60 ], [ %v3_12aa0101, %.thread1 ]
  %v0_12a98 = phi i32 [ %v2_12a60, %dec_label_pc_12a60 ], [ %v0_12a9895, %.thread1 ]
  %v1_12a98 = add i32 %v0_12a98, 20
  store i32 %v1_12a98, i32* %r2.global-to-local, align 4
  %v3_12a98 = sub i32 0, %v0_12a98
  %v4_12a98 = and i32 %v1_12a98, %v3_12a98
  %v5_12a98 = icmp slt i32 %v4_12a98, 0
  store i1 %v5_12a98, i1* %cpsr_v.global-to-local, align 1
  %v6_12a98 = icmp slt i32 %v1_12a98, 0
  store i1 %v6_12a98, i1* %cpsr_n.global-to-local, align 1
  %v7_12a98 = icmp eq i32 %v1_12a98, 0
  store i1 %v7_12a98, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12a9c

dec_label_pc_12a9c:                               ; preds = %.thread117, %dec_label_pc_12a98
  %v0_12aac.pre147 = phi i32 [ %v0_12aac.pre, %.thread117 ], [ %v1_12a98, %dec_label_pc_12a98 ]
  %v3_12aa0 = phi i32 [ %v3_12aa098118, %.thread117 ], [ %v3_12aa0100, %dec_label_pc_12a98 ]
  %v1_12aa4 = phi i1 [ %v1_12aa8, %.thread117 ], [ %v5_12a98, %dec_label_pc_12a98 ]
  %v0_12aa4 = phi i1 [ %v0_12aa8, %.thread117 ], [ %v6_12a98, %dec_label_pc_12a98 ]
  %v2_12a9c = xor i1 %v1_12aa4, %v0_12aa4
  br i1 %v2_12a9c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_12a9c
  %v3_12a9c = load i32, i32* @r1, align 4
  %v4_12a9c = inttoptr i32 %v3_12a9c to i32*
  %v5_12a9c = load i32, i32* %v4_12a9c, align 4
  store i32 %v5_12a9c, i32* %r3.global-to-local, align 4
  %v6_12a9c = add i32 %v3_12a9c, 4
  %v7_12a9c = inttoptr i32 %v6_12a9c to i32*
  %v8_12a9c = load i32, i32* %v7_12a9c, align 4
  store i32 %v8_12a9c, i32* %ip.global-to-local, align 4
  %v9_12a9c = add i32 %v3_12a9c, 8
  %v10_12a9c = inttoptr i32 %v9_12a9c to i32*
  %v11_12a9c = load i32, i32* %v10_12a9c, align 4
  store i32 %v11_12a9c, i32* @lr, align 4
  %v12_12a9c = add i32 %v3_12a9c, 12
  store i32 %v12_12a9c, i32* @r1, align 4
  %v4_12aa0 = inttoptr i32 %v3_12aa0 to i32*
  store i32 %v5_12a9c, i32* %v4_12aa0, align 4
  %v6_12aa0 = add i32 %v3_12aa0, 4
  %v7_12aa0 = inttoptr i32 %v6_12aa0 to i32*
  %v8_12aa0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_12aa0, i32* %v7_12aa0, align 4
  %v9_12aa0 = add i32 %v3_12aa0, 8
  %v10_12aa0 = inttoptr i32 %v9_12aa0 to i32*
  %v11_12aa0 = load i32, i32* @lr, align 4
  store i32 %v11_12aa0, i32* %v10_12aa0, align 4
  %v12_12aa0 = add i32 %v3_12aa0, 12
  store i32 %v12_12aa0, i32* @r0, align 4
  %v3_12aa4 = load i32, i32* %r2.global-to-local, align 4
  %v4_12aa4 = add i32 %v3_12aa4, -12
  store i32 %v4_12aa4, i32* %r2.global-to-local, align 4
  %v6_12aa4 = sub i32 11, %v3_12aa4
  %v7_12aa4 = and i32 %v6_12aa4, %v3_12aa4
  %v8_12aa4 = icmp slt i32 %v7_12aa4, 0
  store i1 %v8_12aa4, i1* %cpsr_v.global-to-local, align 1
  %v9_12aa4 = icmp slt i32 %v4_12aa4, 0
  store i1 %v9_12aa4, i1* %cpsr_n.global-to-local, align 1
  %v10_12aa4 = icmp eq i32 %v3_12aa4, 12
  store i1 %v10_12aa4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_12a9c, %bb129
  %v0_12aac.pre = phi i32 [ %v4_12aa4, %bb129 ], [ %v0_12aac.pre147, %dec_label_pc_12a9c ]
  %v3_12aa098118 = phi i32 [ %v12_12aa0, %bb129 ], [ %v3_12aa0, %dec_label_pc_12a9c ]
  %v1_12aa8 = phi i1 [ %v8_12aa4, %bb129 ], [ %v1_12aa4, %dec_label_pc_12a9c ]
  %v0_12aa8 = phi i1 [ %v9_12aa4, %bb129 ], [ %v0_12aa4, %dec_label_pc_12a9c ]
  %v2_12aa8 = xor i1 %v1_12aa8, %v0_12aa8
  br i1 %v2_12aa8, label %dec_label_pc_12aac, label %dec_label_pc_12a9c

dec_label_pc_12aac:                               ; preds = %.thread117, %dec_label_pc_12a58
  %v7_12abc = phi i32 [ %v0_12a7092, %dec_label_pc_12a58 ], [ %v3_12aa098118, %.thread117 ]
  %v0_12aac = phi i32 [ %v2_12a58, %dec_label_pc_12a58 ], [ %v0_12aac.pre, %.thread117 ]
  %v2_12aac = add i32 %v0_12aac, 8
  store i32 %v2_12aac, i32* %r2.global-to-local, align 4
  %v4_12aac = sub i32 0, %v0_12aac
  %v5_12aac = and i32 %v2_12aac, %v4_12aac
  %v6_12aac = icmp slt i32 %v5_12aac, 0
  store i1 %v6_12aac, i1* %cpsr_v.global-to-local, align 1
  %v7_12aac = icmp slt i32 %v2_12aac, 0
  store i1 %v7_12aac, i1* %cpsr_n.global-to-local, align 1
  %v8_12aac = icmp eq i32 %v2_12aac, 0
  store i1 %v8_12aac, i1* %cpsr_z.global-to-local, align 1
  %v5_12ab0 = icmp slt i32 %v0_12aac, -8
  br i1 %v5_12ab0, label %bb131, label %dec_label_pc_12ab4

dec_label_pc_12ab4:                               ; preds = %dec_label_pc_12aac
  %v6_12ab4 = add i32 %v0_12aac, 4
  store i32 %v6_12ab4, i32* %r2.global-to-local, align 4
  %v8_12ab4 = sub i32 -5, %v0_12aac
  %v9_12ab4 = and i32 %v8_12ab4, %v2_12aac
  %v10_12ab4 = icmp slt i32 %v9_12ab4, 0
  store i1 %v10_12ab4, i1* %cpsr_v.global-to-local, align 1
  %v11_12ab4 = icmp slt i32 %v6_12ab4, 0
  store i1 %v11_12ab4, i1* %cpsr_n.global-to-local, align 1
  %v12_12ab4 = icmp eq i32 %v2_12aac, 4
  store i1 %v12_12ab4, i1* %cpsr_z.global-to-local, align 1
  %v5_12ab8 = icmp slt i32 %v2_12aac, 4
  %v6_12ab8 = load i32, i32* @r1, align 4
  %v7_12ab8 = inttoptr i32 %v6_12ab8 to i32*
  %v8_12ab8 = load i32, i32* %v7_12ab8, align 4
  store i32 %v8_12ab8, i32* %r3.global-to-local, align 4
  %v10_12ab8 = add i32 %v6_12ab8, 4
  br i1 %v5_12ab8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_12ab4
  store i32 %v10_12ab8, i32* @r1, align 4
  %v8_12abc = inttoptr i32 %v7_12abc to i32*
  store i32 %v8_12ab8, i32* %v8_12abc, align 4
  %v9_12abc = load i32, i32* @r0, align 4
  %v10_12abc = add i32 %v9_12abc, 4
  store i32 %v10_12abc, i32* @r0, align 4
  %v0_12acc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_12ab4
  %v10_12ac0 = inttoptr i32 %v10_12ab8 to i32*
  %v11_12ac0 = load i32, i32* %v10_12ac0, align 4
  store i32 %v11_12ac0, i32* %ip.global-to-local, align 4
  %v12_12ac0 = add i32 %v6_12ab8, 8
  store i32 %v12_12ac0, i32* @r1, align 4
  %v7_12ac4 = inttoptr i32 %v7_12abc to i32*
  store i32 %v8_12ab8, i32* %v7_12ac4, align 4
  %v9_12ac4 = add i32 %v7_12abc, 4
  %v10_12ac4 = inttoptr i32 %v9_12ac4 to i32*
  %v11_12ac4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_12ac4, i32* %v10_12ac4, align 4
  %v12_12ac4 = add i32 %v7_12abc, 8
  store i32 %v12_12ac4, i32* @r0, align 4
  %v6_12ac8 = load i32, i32* %r2.global-to-local, align 4
  %v7_12ac8 = add i32 %v6_12ac8, -4
  store i32 %v7_12ac8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_12aac, %bb, %dec_label_pc_12c74, %dec_label_pc_12c08, %dec_label_pc_12b9c, %bb130
  %v2_12adc = phi i32 [ %v10_12abc, %.thread5 ], [ %v0_12b6c75, %.thread11 ], [ %v7_12abc, %dec_label_pc_12aac ], [ %v1_12a30, %bb ], [ %v2_12adc113, %dec_label_pc_12c74 ], [ %v2_12adc112, %dec_label_pc_12c08 ], [ %v2_12adc111, %dec_label_pc_12b9c ], [ %v12_12ac4, %bb130 ]
  %v0_12acc = phi i32 [ %v0_12acc.pre, %.thread5 ], [ %v2_12b14, %.thread11 ], [ %v2_12aac, %dec_label_pc_12aac ], [ %v2_12a40, %bb ], [ %v0_12acc109, %dec_label_pc_12c74 ], [ %v0_12acc108, %dec_label_pc_12c08 ], [ %v0_12acc107, %dec_label_pc_12b9c ], [ %v7_12ac8, %bb130 ]
  %v1_12acc = add i32 %v0_12acc, 4
  store i32 %v1_12acc, i32* %r2.global-to-local, align 4
  %v3_12acc = sub i32 0, %v0_12acc
  %v4_12acc = and i32 %v1_12acc, %v3_12acc
  %v5_12acc = icmp slt i32 %v4_12acc, 0
  store i1 %v5_12acc, i1* %cpsr_v.global-to-local, align 1
  %v6_12acc = icmp slt i32 %v1_12acc, 0
  store i1 %v6_12acc, i1* %cpsr_n.global-to-local, align 1
  %v7_12acc = icmp eq i32 %v1_12acc, 0
  store i1 %v7_12acc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12acc, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_12ad0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_12ad0, i32* %r0.global-to-local, align 4
  ret i32 %v3_12ad0

bb133:                                            ; preds = %bb131
  %v1_12ad4 = add i32 %v0_12acc, 2
  %v3_12ad4 = sub i32 -3, %v0_12acc
  %v4_12ad4 = and i32 %v3_12ad4, %v1_12acc
  %v5_12ad4 = icmp slt i32 %v4_12ad4, 0
  store i1 %v5_12ad4, i1* %cpsr_v.global-to-local, align 1
  %v6_12ad4 = icmp slt i32 %v1_12ad4, 0
  store i1 %v6_12ad4, i1* %cpsr_n.global-to-local, align 1
  %v7_12ad4 = icmp eq i32 %v1_12acc, 2
  store i1 %v7_12ad4, i1* %cpsr_z.global-to-local, align 1
  %v0_12ad8 = load i32, i32* @r1, align 4
  %v1_12ad8 = inttoptr i32 %v0_12ad8 to i8*
  %v2_12ad8 = load i8, i8* %v1_12ad8, align 1
  %v3_12ad8 = zext i8 %v2_12ad8 to i32
  store i32 %v3_12ad8, i32* %r3.global-to-local, align 4
  %v5_12ad8 = add i32 %v0_12ad8, 1
  store i32 %v5_12ad8, i32* %r1.global-to-local, align 4
  %v3_12adc = inttoptr i32 %v2_12adc to i8*
  store i8 %v2_12ad8, i8* %v3_12adc, align 1
  %v4_12adc = load i32, i32* @r0, align 4
  %v5_12adc = add i32 %v4_12adc, 1
  store i32 %v5_12adc, i32* %r0.global-to-local, align 4
  %v0_12ae0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_12ae0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_12ae0 = xor i1 %v0_12ae0, %v1_12ae0
  br i1 %v2_12ae0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_12ae0 = load i32, i32* %r1.global-to-local, align 4
  %v4_12ae0 = inttoptr i32 %v3_12ae0 to i8*
  %v5_12ae0 = load i8, i8* %v4_12ae0, align 1
  %v6_12ae0 = zext i8 %v5_12ae0 to i32
  store i32 %v6_12ae0, i32* %r3.global-to-local, align 4
  %v8_12ae0 = add i32 %v3_12ae0, 1
  store i32 %v8_12ae0, i32* %r1.global-to-local, align 4
  %v6_12ae4 = inttoptr i32 %v5_12adc to i8*
  store i8 %v5_12ae0, i8* %v6_12ae4, align 1
  %v7_12ae4 = load i32, i32* %r0.global-to-local, align 4
  %v8_12ae4 = add i32 %v7_12ae4, 1
  store i32 %v8_12ae4, i32* %r0.global-to-local, align 4
  %v1_12ae8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_12ae8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_12aec = phi i32 [ %v8_12ae4, %bb134 ], [ %v5_12adc, %bb133 ]
  %v2_12aec = phi i1 [ %v2_12ae8.pre, %bb134 ], [ %v1_12ae0, %bb133 ]
  %v1_12aec = phi i1 [ %v1_12ae8.pre, %bb134 ], [ %v0_12ae0, %bb133 ]
  %v0_12ae8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_12ae8 = xor i1 %v2_12aec, %v1_12aec
  %v4_12ae8 = or i1 %v0_12ae8, %v3_12ae8
  br i1 %v4_12ae8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_12ae8 = load i32, i32* %r1.global-to-local, align 4
  %v6_12ae8 = inttoptr i32 %v5_12ae8 to i8*
  %v7_12ae8 = load i8, i8* %v6_12ae8, align 1
  %v8_12ae8 = zext i8 %v7_12ae8 to i32
  store i32 %v8_12ae8, i32* %r3.global-to-local, align 4
  %v10_12ae8 = add i32 %v5_12ae8, 1
  store i32 %v10_12ae8, i32* %r1.global-to-local, align 4
  %v8_12aec = inttoptr i32 %v7_12aec to i8*
  store i8 %v7_12ae8, i8* %v8_12aec, align 1
  %v9_12aec = load i32, i32* %r0.global-to-local, align 4
  %v10_12aec = add i32 %v9_12aec, 1
  store i32 %v10_12aec, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_12af0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12af0, i32* %r0.global-to-local, align 4
  ret i32 %v2_12af0

dec_label_pc_12af4:                               ; preds = %dec_label_pc_12a48
  %v1_12af4 = sub nsw i32 4, %v1_12a48
  store i32 %v1_12af4, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_12af8 = icmp ult i32 %v1_12af4, 2
  store i1 %v8_12af8, i1* %cpsr_n.global-to-local, align 1
  %v9_12af8 = icmp eq i32 %v1_12af4, 2
  store i1 %v9_12af8, i1* %cpsr_z.global-to-local, align 1
  %v1_12afc = inttoptr i32 %v0_12a30 to i8*
  %v2_12afc = load i8, i8* %v1_12afc, align 1
  %v3_12afc = zext i8 %v2_12afc to i32
  store i32 %v3_12afc, i32* %r3.global-to-local, align 4
  %v5_12afc = add i32 %v0_12a30, 1
  store i32 %v5_12afc, i32* @r1, align 4
  %v3_12b00 = inttoptr i32 %v1_12a30 to i8*
  store i8 %v2_12afc, i8* %v3_12b00, align 1
  %v4_12b00 = load i32, i32* @r0, align 4
  %v5_12b00 = add i32 %v4_12b00, 1
  store i32 %v5_12b00, i32* @r0, align 4
  br i1 %v8_12af8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_12af4
  %v6_12b04 = load i32, i32* @r1, align 4
  %v7_12b04 = inttoptr i32 %v6_12b04 to i8*
  %v8_12b04 = load i8, i8* %v7_12b04, align 1
  %v9_12b04 = zext i8 %v8_12b04 to i32
  store i32 %v9_12b04, i32* %r3.global-to-local, align 4
  %v11_12b04 = add i32 %v6_12b04, 1
  store i32 %v11_12b04, i32* @r1, align 4
  %v9_12b08 = inttoptr i32 %v5_12b00 to i8*
  store i8 %v8_12b04, i8* %v9_12b08, align 1
  %v10_12b08 = load i32, i32* @r0, align 4
  %v11_12b08 = add i32 %v10_12b08, 1
  store i32 %v11_12b08, i32* @r0, align 4
  br i1 %v9_12af8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_12b0c = load i32, i32* @r1, align 4
  %v9_12b0c = inttoptr i32 %v8_12b0c to i8*
  %v10_12b0c = load i8, i8* %v9_12b0c, align 1
  %v11_12b0c = zext i8 %v10_12b0c to i32
  store i32 %v11_12b0c, i32* %r3.global-to-local, align 4
  %v13_12b0c = add i32 %v8_12b0c, 1
  store i32 %v13_12b0c, i32* @r1, align 4
  %v11_12b10 = inttoptr i32 %v11_12b08 to i8*
  store i8 %v10_12b0c, i8* %v11_12b10, align 1
  %v12_12b10 = load i32, i32* @r0, align 4
  %v13_12b10 = add i32 %v12_12b10, 1
  store i32 %v13_12b10, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_12af4, %bb137
  %v0_12b6c75 = phi i32 [ %v11_12b08, %bb136 ], [ %v5_12b00, %dec_label_pc_12af4 ], [ %v13_12b10, %bb137 ]
  %v0_12b14 = load i32, i32* %r2.global-to-local, align 4
  %v1_12b14 = load i32, i32* %ip.global-to-local, align 4
  %v2_12b14 = sub i32 %v0_12b14, %v1_12b14
  store i32 %v2_12b14, i32* %r2.global-to-local, align 4
  %v4_12b14 = xor i32 %v1_12b14, %v0_12b14
  %v5_12b14 = xor i32 %v2_12b14, %v0_12b14
  %v6_12b14 = and i32 %v5_12b14, %v4_12b14
  %v7_12b14 = icmp slt i32 %v6_12b14, 0
  store i1 %v7_12b14, i1* %cpsr_v.global-to-local, align 1
  %v8_12b14 = icmp slt i32 %v2_12b14, 0
  store i1 %v8_12b14, i1* %cpsr_n.global-to-local, align 1
  %v9_12b14 = icmp eq i32 %v0_12b14, %v1_12b14
  store i1 %v9_12b14, i1* %cpsr_z.global-to-local, align 1
  %v5_12b18 = icmp slt i32 %v0_12b14, %v1_12b14
  br i1 %v5_12b18, label %bb131, label %dec_label_pc_12b1c

dec_label_pc_12b1c:                               ; preds = %.thread11
  %v0_12b1c = load i32, i32* @r1, align 4
  %v1_12b1c = urem i32 %v0_12b1c, 4
  store i32 %v1_12b1c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12b1c = icmp eq i32 %v1_12b1c, 0
  store i1 %v2_12b1c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_12b1c to i2
  br i1 %v2_12b1c, label %dec_label_pc_12a58, label %dec_label_pc_12b24

dec_label_pc_12b24:                               ; preds = %dec_label_pc_12a50, %dec_label_pc_12b1c
  %v0_12b6c74 = phi i32 [ %v1_12a30, %dec_label_pc_12a50 ], [ %v0_12b6c75, %dec_label_pc_12b1c ]
  %v0_12c18 = phi i32 [ %v2_12a40, %dec_label_pc_12a50 ], [ %v2_12b14, %dec_label_pc_12b1c ]
  %v0_12b2c.off0 = phi i2 [ %extract.t, %dec_label_pc_12a50 ], [ %extract.t123, %dec_label_pc_12b1c ]
  %v0_12b24 = phi i32 [ %v0_12a30, %dec_label_pc_12a50 ], [ %v0_12b1c, %dec_label_pc_12b1c ]
  %v1_12b24 = and i32 %v0_12b24, -4
  store i32 %v1_12b24, i32* %r1.global-to-local, align 4
  %v1_12b28 = inttoptr i32 %v1_12b24 to i32*
  %v2_12b28 = load i32, i32* %v1_12b28, align 4
  store i32 %v2_12b28, i32* @lr, align 4
  %v4_12b28 = add i32 %v1_12b24, 4
  store i32 %v4_12b28, i32* %r1.global-to-local, align 4
  %v2_12c10 = add i32 %v0_12c18, -12
  %v4_12c10 = sub i32 11, %v0_12c18
  %v5_12c10 = and i32 %v4_12c10, %v0_12c18
  %v6_12c10 = icmp slt i32 %v5_12c10, 0
  store i1 %v6_12c10, i1* %cpsr_v.global-to-local, align 1
  %v7_12c10 = icmp slt i32 %v2_12c10, 0
  store i1 %v7_12c10, i1* %cpsr_n.global-to-local, align 1
  %v8_12c10 = icmp eq i32 %v0_12c18, 12
  store i1 %v8_12c10, i1* %cpsr_z.global-to-local, align 1
  %v5_12c14 = icmp slt i32 %v0_12c18, 12
  switch i2 %v0_12b2c.off0, label %dec_label_pc_12b38 [
    i2 -1, label %dec_label_pc_12c10
    i2 -2, label %dec_label_pc_12ba4
  ]

dec_label_pc_12b38:                               ; preds = %dec_label_pc_12b24
  br i1 %v5_12c14, label %dec_label_pc_12b84, label %dec_label_pc_12b40

dec_label_pc_12b40:                               ; preds = %dec_label_pc_12b38
  store i32 %v2_12c10, i32* %r2.global-to-local, align 4
  %v3_12b44 = load i32, i32* @r4, align 4
  store i32 %v3_12b44, i32* %stack_var_-16, align 4
  %v6_12b44 = load i32, i32* @r5, align 4
  store i32 %v6_12b44, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12b48

dec_label_pc_12b48:                               ; preds = %dec_label_pc_12b48.dec_label_pc_12b48_crit_edge, %dec_label_pc_12b40
  %v0_12b6c = phi i32 [ %v12_12b6c, %dec_label_pc_12b48.dec_label_pc_12b48_crit_edge ], [ %v0_12b6c74, %dec_label_pc_12b40 ]
  %v0_12b4c = phi i32 [ %v0_12b4c.pre, %dec_label_pc_12b48.dec_label_pc_12b48_crit_edge ], [ %v4_12b28, %dec_label_pc_12b40 ]
  %v0_12b48 = phi i32 [ %v0_12b48.pre, %dec_label_pc_12b48.dec_label_pc_12b48_crit_edge ], [ %v2_12b28, %dec_label_pc_12b40 ]
  %v3_12b48 = udiv i32 %v0_12b48, 256
  store i32 %v3_12b48, i32* %r3.global-to-local, align 4
  %v1_12b4c = inttoptr i32 %v0_12b4c to i32*
  %v2_12b4c = load i32, i32* %v1_12b4c, align 4
  store i32 %v2_12b4c, i32* %r4.global-to-local, align 4
  %v3_12b4c = add i32 %v0_12b4c, 4
  %v4_12b4c = inttoptr i32 %v3_12b4c to i32*
  %v5_12b4c = load i32, i32* %v4_12b4c, align 4
  store i32 %v5_12b4c, i32* %r5.global-to-local, align 4
  %v6_12b4c = add i32 %v0_12b4c, 8
  %v7_12b4c = inttoptr i32 %v6_12b4c to i32*
  %v8_12b4c = load i32, i32* %v7_12b4c, align 4
  store i32 %v8_12b4c, i32* %ip.global-to-local, align 4
  %v9_12b4c = add i32 %v0_12b4c, 12
  %v10_12b4c = inttoptr i32 %v9_12b4c to i32*
  %v11_12b4c = load i32, i32* %v10_12b4c, align 4
  store i32 %v11_12b4c, i32* @lr, align 4
  %v12_12b4c = add i32 %v0_12b4c, 16
  store i32 %v12_12b4c, i32* %r1.global-to-local, align 4
  %v4_12b50 = mul i32 %v2_12b4c, 16777216
  %v5_12b50 = or i32 %v4_12b50, %v3_12b48
  store i32 %v5_12b50, i32* %r3.global-to-local, align 4
  %v3_12b54 = udiv i32 %v2_12b4c, 256
  %v4_12b58 = mul i32 %v5_12b4c, 16777216
  %v5_12b58 = or i32 %v4_12b58, %v3_12b54
  store i32 %v5_12b58, i32* %r4.global-to-local, align 4
  %v3_12b5c = udiv i32 %v5_12b4c, 256
  %v4_12b60 = mul i32 %v8_12b4c, 16777216
  %v5_12b60 = or i32 %v4_12b60, %v3_12b5c
  store i32 %v5_12b60, i32* %r5.global-to-local, align 4
  %v3_12b64 = udiv i32 %v8_12b4c, 256
  %v4_12b68 = mul i32 %v11_12b4c, 16777216
  %v5_12b68 = or i32 %v4_12b68, %v3_12b64
  store i32 %v5_12b68, i32* %ip.global-to-local, align 4
  %v1_12b6c = inttoptr i32 %v0_12b6c to i32*
  store i32 %v5_12b50, i32* %v1_12b6c, align 4
  %v3_12b6c = add i32 %v0_12b6c, 4
  %v4_12b6c = inttoptr i32 %v3_12b6c to i32*
  %v5_12b6c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12b6c, i32* %v4_12b6c, align 4
  %v6_12b6c = add i32 %v0_12b6c, 8
  %v7_12b6c = inttoptr i32 %v6_12b6c to i32*
  %v8_12b6c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_12b6c, i32* %v7_12b6c, align 4
  %v9_12b6c = add i32 %v0_12b6c, 12
  %v10_12b6c = inttoptr i32 %v9_12b6c to i32*
  %v11_12b6c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_12b6c, i32* %v10_12b6c, align 4
  %v12_12b6c = add i32 %v0_12b6c, 16
  store i32 %v12_12b6c, i32* @r0, align 4
  %v0_12b70 = load i32, i32* %r2.global-to-local, align 4
  %v2_12b70 = add i32 %v0_12b70, -16
  store i32 %v2_12b70, i32* %r2.global-to-local, align 4
  %v6_12b74 = icmp slt i32 %v0_12b70, 16
  br i1 %v6_12b74, label %dec_label_pc_12b78, label %dec_label_pc_12b48.dec_label_pc_12b48_crit_edge

dec_label_pc_12b48.dec_label_pc_12b48_crit_edge:  ; preds = %dec_label_pc_12b48
  %v0_12b48.pre = load i32, i32* @lr, align 4
  %v0_12b4c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12b48

dec_label_pc_12b78:                               ; preds = %dec_label_pc_12b48
  %v2_12b78 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12b78, i32* @r4, align 4
  %v5_12b78 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_12b78, i32* @r5, align 4
  %v2_12b7c = add i32 %v0_12b70, -4
  store i32 %v2_12b7c, i32* %r2.global-to-local, align 4
  %v4_12b7c = add i32 %v0_12b70, 2147483632
  %v5_12b7c = and i32 %v2_12b7c, %v4_12b7c
  %v6_12b7c = icmp slt i32 %v5_12b7c, 0
  store i1 %v6_12b7c, i1* %cpsr_v.global-to-local, align 1
  %v7_12b7c = icmp slt i32 %v2_12b7c, 0
  store i1 %v7_12b7c, i1* %cpsr_n.global-to-local, align 1
  %v8_12b7c = icmp eq i32 %v2_12b7c, 0
  store i1 %v8_12b7c, i1* %cpsr_z.global-to-local, align 1
  %v5_12b80 = icmp slt i32 %v2_12b70, -12
  br i1 %v5_12b80, label %dec_label_pc_12b9c, label %dec_label_pc_12b84

dec_label_pc_12b84:                               ; preds = %dec_label_pc_12b78, %dec_label_pc_12b38, %dec_label_pc_12b84
  %v1_12b90 = phi i32 [ %v4_12b90, %dec_label_pc_12b84 ], [ %v12_12b6c, %dec_label_pc_12b78 ], [ %v0_12b6c74, %dec_label_pc_12b38 ]
  %v0_12b84 = load i32, i32* @lr, align 4
  %v3_12b84 = udiv i32 %v0_12b84, 256
  store i32 %v3_12b84, i32* %ip.global-to-local, align 4
  %v0_12b88 = load i32, i32* %r1.global-to-local, align 4
  %v1_12b88 = inttoptr i32 %v0_12b88 to i32*
  %v2_12b88 = load i32, i32* %v1_12b88, align 4
  store i32 %v2_12b88, i32* @lr, align 4
  %v4_12b88 = add i32 %v0_12b88, 4
  store i32 %v4_12b88, i32* %r1.global-to-local, align 4
  %v4_12b8c = mul i32 %v2_12b88, 16777216
  %v5_12b8c = or i32 %v4_12b8c, %v3_12b84
  store i32 %v5_12b8c, i32* %ip.global-to-local, align 4
  %v2_12b90 = inttoptr i32 %v1_12b90 to i32*
  store i32 %v5_12b8c, i32* %v2_12b90, align 4
  %v3_12b90 = load i32, i32* @r0, align 4
  %v4_12b90 = add i32 %v3_12b90, 4
  store i32 %v4_12b90, i32* @r0, align 4
  %v0_12b94 = load i32, i32* %r2.global-to-local, align 4
  %v2_12b94 = add i32 %v0_12b94, -4
  store i32 %v2_12b94, i32* %r2.global-to-local, align 4
  %v6_12b98 = icmp slt i32 %v0_12b94, 4
  br i1 %v6_12b98, label %dec_label_pc_12b9c.loopexit, label %dec_label_pc_12b84

dec_label_pc_12b9c.loopexit:                      ; preds = %dec_label_pc_12b84
  %v4_12b94 = sub i32 3, %v0_12b94
  %v5_12b94 = and i32 %v4_12b94, %v0_12b94
  %v6_12b94 = icmp slt i32 %v5_12b94, 0
  %v7_12b94 = icmp slt i32 %v2_12b94, 0
  store i1 %v6_12b94, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12b94, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12b9c

dec_label_pc_12b9c:                               ; preds = %dec_label_pc_12b9c.loopexit, %dec_label_pc_12b78
  %v2_12adc111 = phi i32 [ %v4_12b90, %dec_label_pc_12b9c.loopexit ], [ %v12_12b6c, %dec_label_pc_12b78 ]
  %v0_12acc107 = phi i32 [ %v2_12b94, %dec_label_pc_12b9c.loopexit ], [ %v2_12b7c, %dec_label_pc_12b78 ]
  %v0_12b9c = load i32, i32* %r1.global-to-local, align 4
  %v1_12b9c = add i32 %v0_12b9c, -3
  store i32 %v1_12b9c, i32* @r1, align 4
  br label %bb131

dec_label_pc_12ba4:                               ; preds = %dec_label_pc_12b24
  br i1 %v5_12c14, label %dec_label_pc_12bf0, label %dec_label_pc_12bac

dec_label_pc_12bac:                               ; preds = %dec_label_pc_12ba4
  store i32 %v2_12c10, i32* %r2.global-to-local, align 4
  %v3_12bb0 = load i32, i32* @r4, align 4
  store i32 %v3_12bb0, i32* %stack_var_-16, align 4
  %v6_12bb0 = load i32, i32* @r5, align 4
  store i32 %v6_12bb0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12bb4

dec_label_pc_12bb4:                               ; preds = %dec_label_pc_12bb4.dec_label_pc_12bb4_crit_edge, %dec_label_pc_12bac
  %v0_12bd8 = phi i32 [ %v12_12bd8, %dec_label_pc_12bb4.dec_label_pc_12bb4_crit_edge ], [ %v0_12b6c74, %dec_label_pc_12bac ]
  %v0_12bb8 = phi i32 [ %v0_12bb8.pre, %dec_label_pc_12bb4.dec_label_pc_12bb4_crit_edge ], [ %v4_12b28, %dec_label_pc_12bac ]
  %v0_12bb4 = phi i32 [ %v0_12bb4.pre, %dec_label_pc_12bb4.dec_label_pc_12bb4_crit_edge ], [ %v2_12b28, %dec_label_pc_12bac ]
  %v3_12bb4 = udiv i32 %v0_12bb4, 65536
  store i32 %v3_12bb4, i32* %r3.global-to-local, align 4
  %v1_12bb8 = inttoptr i32 %v0_12bb8 to i32*
  %v2_12bb8 = load i32, i32* %v1_12bb8, align 4
  store i32 %v2_12bb8, i32* %r4.global-to-local, align 4
  %v3_12bb8 = add i32 %v0_12bb8, 4
  %v4_12bb8 = inttoptr i32 %v3_12bb8 to i32*
  %v5_12bb8 = load i32, i32* %v4_12bb8, align 4
  store i32 %v5_12bb8, i32* %r5.global-to-local, align 4
  %v6_12bb8 = add i32 %v0_12bb8, 8
  %v7_12bb8 = inttoptr i32 %v6_12bb8 to i32*
  %v8_12bb8 = load i32, i32* %v7_12bb8, align 4
  store i32 %v8_12bb8, i32* %ip.global-to-local, align 4
  %v9_12bb8 = add i32 %v0_12bb8, 12
  %v10_12bb8 = inttoptr i32 %v9_12bb8 to i32*
  %v11_12bb8 = load i32, i32* %v10_12bb8, align 4
  store i32 %v11_12bb8, i32* @lr, align 4
  %v12_12bb8 = add i32 %v0_12bb8, 16
  store i32 %v12_12bb8, i32* %r1.global-to-local, align 4
  %v4_12bbc = mul i32 %v2_12bb8, 65536
  %v5_12bbc = or i32 %v4_12bbc, %v3_12bb4
  store i32 %v5_12bbc, i32* %r3.global-to-local, align 4
  %v3_12bc0 = udiv i32 %v2_12bb8, 65536
  %v4_12bc4 = mul i32 %v5_12bb8, 65536
  %v5_12bc4 = or i32 %v4_12bc4, %v3_12bc0
  store i32 %v5_12bc4, i32* %r4.global-to-local, align 4
  %v3_12bc8 = udiv i32 %v5_12bb8, 65536
  %v4_12bcc = mul i32 %v8_12bb8, 65536
  %v5_12bcc = or i32 %v4_12bcc, %v3_12bc8
  store i32 %v5_12bcc, i32* %r5.global-to-local, align 4
  %v3_12bd0 = udiv i32 %v8_12bb8, 65536
  %v4_12bd4 = mul i32 %v11_12bb8, 65536
  %v5_12bd4 = or i32 %v4_12bd4, %v3_12bd0
  store i32 %v5_12bd4, i32* %ip.global-to-local, align 4
  %v1_12bd8 = inttoptr i32 %v0_12bd8 to i32*
  store i32 %v5_12bbc, i32* %v1_12bd8, align 4
  %v3_12bd8 = add i32 %v0_12bd8, 4
  %v4_12bd8 = inttoptr i32 %v3_12bd8 to i32*
  %v5_12bd8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12bd8, i32* %v4_12bd8, align 4
  %v6_12bd8 = add i32 %v0_12bd8, 8
  %v7_12bd8 = inttoptr i32 %v6_12bd8 to i32*
  %v8_12bd8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_12bd8, i32* %v7_12bd8, align 4
  %v9_12bd8 = add i32 %v0_12bd8, 12
  %v10_12bd8 = inttoptr i32 %v9_12bd8 to i32*
  %v11_12bd8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_12bd8, i32* %v10_12bd8, align 4
  %v12_12bd8 = add i32 %v0_12bd8, 16
  store i32 %v12_12bd8, i32* @r0, align 4
  %v0_12bdc = load i32, i32* %r2.global-to-local, align 4
  %v2_12bdc = add i32 %v0_12bdc, -16
  store i32 %v2_12bdc, i32* %r2.global-to-local, align 4
  %v6_12be0 = icmp slt i32 %v0_12bdc, 16
  br i1 %v6_12be0, label %dec_label_pc_12be4, label %dec_label_pc_12bb4.dec_label_pc_12bb4_crit_edge

dec_label_pc_12bb4.dec_label_pc_12bb4_crit_edge:  ; preds = %dec_label_pc_12bb4
  %v0_12bb4.pre = load i32, i32* @lr, align 4
  %v0_12bb8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12bb4

dec_label_pc_12be4:                               ; preds = %dec_label_pc_12bb4
  %v2_12be4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12be4, i32* @r4, align 4
  %v5_12be4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_12be4, i32* @r5, align 4
  %v2_12be8 = add i32 %v0_12bdc, -4
  store i32 %v2_12be8, i32* %r2.global-to-local, align 4
  %v4_12be8 = add i32 %v0_12bdc, 2147483632
  %v5_12be8 = and i32 %v2_12be8, %v4_12be8
  %v6_12be8 = icmp slt i32 %v5_12be8, 0
  store i1 %v6_12be8, i1* %cpsr_v.global-to-local, align 1
  %v7_12be8 = icmp slt i32 %v2_12be8, 0
  store i1 %v7_12be8, i1* %cpsr_n.global-to-local, align 1
  %v8_12be8 = icmp eq i32 %v2_12be8, 0
  store i1 %v8_12be8, i1* %cpsr_z.global-to-local, align 1
  %v5_12bec = icmp slt i32 %v2_12bdc, -12
  br i1 %v5_12bec, label %dec_label_pc_12c08, label %dec_label_pc_12bf0

dec_label_pc_12bf0:                               ; preds = %dec_label_pc_12be4, %dec_label_pc_12ba4, %dec_label_pc_12bf0
  %v1_12bfc = phi i32 [ %v4_12bfc, %dec_label_pc_12bf0 ], [ %v12_12bd8, %dec_label_pc_12be4 ], [ %v0_12b6c74, %dec_label_pc_12ba4 ]
  %v0_12bf0 = load i32, i32* @lr, align 4
  %v3_12bf0 = udiv i32 %v0_12bf0, 65536
  store i32 %v3_12bf0, i32* %ip.global-to-local, align 4
  %v0_12bf4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12bf4 = inttoptr i32 %v0_12bf4 to i32*
  %v2_12bf4 = load i32, i32* %v1_12bf4, align 4
  store i32 %v2_12bf4, i32* @lr, align 4
  %v4_12bf4 = add i32 %v0_12bf4, 4
  store i32 %v4_12bf4, i32* %r1.global-to-local, align 4
  %v4_12bf8 = mul i32 %v2_12bf4, 65536
  %v5_12bf8 = or i32 %v4_12bf8, %v3_12bf0
  store i32 %v5_12bf8, i32* %ip.global-to-local, align 4
  %v2_12bfc = inttoptr i32 %v1_12bfc to i32*
  store i32 %v5_12bf8, i32* %v2_12bfc, align 4
  %v3_12bfc = load i32, i32* @r0, align 4
  %v4_12bfc = add i32 %v3_12bfc, 4
  store i32 %v4_12bfc, i32* @r0, align 4
  %v0_12c00 = load i32, i32* %r2.global-to-local, align 4
  %v2_12c00 = add i32 %v0_12c00, -4
  store i32 %v2_12c00, i32* %r2.global-to-local, align 4
  %v6_12c04 = icmp slt i32 %v0_12c00, 4
  br i1 %v6_12c04, label %dec_label_pc_12c08.loopexit, label %dec_label_pc_12bf0

dec_label_pc_12c08.loopexit:                      ; preds = %dec_label_pc_12bf0
  %v4_12c00 = sub i32 3, %v0_12c00
  %v5_12c00 = and i32 %v4_12c00, %v0_12c00
  %v6_12c00 = icmp slt i32 %v5_12c00, 0
  %v7_12c00 = icmp slt i32 %v2_12c00, 0
  store i1 %v6_12c00, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12c00, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12c08

dec_label_pc_12c08:                               ; preds = %dec_label_pc_12c08.loopexit, %dec_label_pc_12be4
  %v2_12adc112 = phi i32 [ %v4_12bfc, %dec_label_pc_12c08.loopexit ], [ %v12_12bd8, %dec_label_pc_12be4 ]
  %v0_12acc108 = phi i32 [ %v2_12c00, %dec_label_pc_12c08.loopexit ], [ %v2_12be8, %dec_label_pc_12be4 ]
  %v0_12c08 = load i32, i32* %r1.global-to-local, align 4
  %v1_12c08 = add i32 %v0_12c08, -2
  store i32 %v1_12c08, i32* @r1, align 4
  br label %bb131

dec_label_pc_12c10:                               ; preds = %dec_label_pc_12b24
  br i1 %v5_12c14, label %dec_label_pc_12c5c, label %dec_label_pc_12c18

dec_label_pc_12c18:                               ; preds = %dec_label_pc_12c10
  store i32 %v2_12c10, i32* %r2.global-to-local, align 4
  %v3_12c1c = load i32, i32* @r4, align 4
  store i32 %v3_12c1c, i32* %stack_var_-16, align 4
  %v6_12c1c = load i32, i32* @r5, align 4
  store i32 %v6_12c1c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12c20

dec_label_pc_12c20:                               ; preds = %dec_label_pc_12c20.dec_label_pc_12c20_crit_edge, %dec_label_pc_12c18
  %v0_12c44 = phi i32 [ %v12_12c44, %dec_label_pc_12c20.dec_label_pc_12c20_crit_edge ], [ %v0_12b6c74, %dec_label_pc_12c18 ]
  %v0_12c24 = phi i32 [ %v0_12c24.pre, %dec_label_pc_12c20.dec_label_pc_12c20_crit_edge ], [ %v4_12b28, %dec_label_pc_12c18 ]
  %v0_12c20 = phi i32 [ %v0_12c20.pre, %dec_label_pc_12c20.dec_label_pc_12c20_crit_edge ], [ %v2_12b28, %dec_label_pc_12c18 ]
  %v3_12c20 = udiv i32 %v0_12c20, 16777216
  store i32 %v3_12c20, i32* %r3.global-to-local, align 4
  %v1_12c24 = inttoptr i32 %v0_12c24 to i32*
  %v2_12c24 = load i32, i32* %v1_12c24, align 4
  store i32 %v2_12c24, i32* %r4.global-to-local, align 4
  %v3_12c24 = add i32 %v0_12c24, 4
  %v4_12c24 = inttoptr i32 %v3_12c24 to i32*
  %v5_12c24 = load i32, i32* %v4_12c24, align 4
  store i32 %v5_12c24, i32* %r5.global-to-local, align 4
  %v6_12c24 = add i32 %v0_12c24, 8
  %v7_12c24 = inttoptr i32 %v6_12c24 to i32*
  %v8_12c24 = load i32, i32* %v7_12c24, align 4
  store i32 %v8_12c24, i32* %ip.global-to-local, align 4
  %v9_12c24 = add i32 %v0_12c24, 12
  %v10_12c24 = inttoptr i32 %v9_12c24 to i32*
  %v11_12c24 = load i32, i32* %v10_12c24, align 4
  store i32 %v11_12c24, i32* @lr, align 4
  %v12_12c24 = add i32 %v0_12c24, 16
  store i32 %v12_12c24, i32* %r1.global-to-local, align 4
  %v4_12c28 = mul i32 %v2_12c24, 256
  %v5_12c28 = or i32 %v4_12c28, %v3_12c20
  store i32 %v5_12c28, i32* %r3.global-to-local, align 4
  %v3_12c2c = udiv i32 %v2_12c24, 16777216
  %v4_12c30 = mul i32 %v5_12c24, 256
  %v5_12c30 = or i32 %v4_12c30, %v3_12c2c
  store i32 %v5_12c30, i32* %r4.global-to-local, align 4
  %v3_12c34 = udiv i32 %v5_12c24, 16777216
  %v4_12c38 = mul i32 %v8_12c24, 256
  %v5_12c38 = or i32 %v4_12c38, %v3_12c34
  store i32 %v5_12c38, i32* %r5.global-to-local, align 4
  %v3_12c3c = udiv i32 %v8_12c24, 16777216
  %v4_12c40 = mul i32 %v11_12c24, 256
  %v5_12c40 = or i32 %v4_12c40, %v3_12c3c
  store i32 %v5_12c40, i32* %ip.global-to-local, align 4
  %v1_12c44 = inttoptr i32 %v0_12c44 to i32*
  store i32 %v5_12c28, i32* %v1_12c44, align 4
  %v3_12c44 = add i32 %v0_12c44, 4
  %v4_12c44 = inttoptr i32 %v3_12c44 to i32*
  %v5_12c44 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12c44, i32* %v4_12c44, align 4
  %v6_12c44 = add i32 %v0_12c44, 8
  %v7_12c44 = inttoptr i32 %v6_12c44 to i32*
  %v8_12c44 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_12c44, i32* %v7_12c44, align 4
  %v9_12c44 = add i32 %v0_12c44, 12
  %v10_12c44 = inttoptr i32 %v9_12c44 to i32*
  %v11_12c44 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_12c44, i32* %v10_12c44, align 4
  %v12_12c44 = add i32 %v0_12c44, 16
  store i32 %v12_12c44, i32* @r0, align 4
  %v0_12c48 = load i32, i32* %r2.global-to-local, align 4
  %v2_12c48 = add i32 %v0_12c48, -16
  store i32 %v2_12c48, i32* %r2.global-to-local, align 4
  %v6_12c4c = icmp slt i32 %v0_12c48, 16
  br i1 %v6_12c4c, label %dec_label_pc_12c50, label %dec_label_pc_12c20.dec_label_pc_12c20_crit_edge

dec_label_pc_12c20.dec_label_pc_12c20_crit_edge:  ; preds = %dec_label_pc_12c20
  %v0_12c20.pre = load i32, i32* @lr, align 4
  %v0_12c24.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12c20

dec_label_pc_12c50:                               ; preds = %dec_label_pc_12c20
  %v2_12c50 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12c50, i32* @r4, align 4
  %v5_12c50 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_12c50, i32* @r5, align 4
  %v2_12c54 = add i32 %v0_12c48, -4
  store i32 %v2_12c54, i32* %r2.global-to-local, align 4
  %v4_12c54 = add i32 %v0_12c48, 2147483632
  %v5_12c54 = and i32 %v2_12c54, %v4_12c54
  %v6_12c54 = icmp slt i32 %v5_12c54, 0
  store i1 %v6_12c54, i1* %cpsr_v.global-to-local, align 1
  %v7_12c54 = icmp slt i32 %v2_12c54, 0
  store i1 %v7_12c54, i1* %cpsr_n.global-to-local, align 1
  %v8_12c54 = icmp eq i32 %v2_12c54, 0
  store i1 %v8_12c54, i1* %cpsr_z.global-to-local, align 1
  %v5_12c58 = icmp slt i32 %v2_12c48, -12
  br i1 %v5_12c58, label %dec_label_pc_12c74, label %dec_label_pc_12c5c

dec_label_pc_12c5c:                               ; preds = %dec_label_pc_12c50, %dec_label_pc_12c10, %dec_label_pc_12c5c
  %v1_12c68 = phi i32 [ %v4_12c68, %dec_label_pc_12c5c ], [ %v12_12c44, %dec_label_pc_12c50 ], [ %v0_12b6c74, %dec_label_pc_12c10 ]
  %v0_12c5c = load i32, i32* @lr, align 4
  %v3_12c5c = udiv i32 %v0_12c5c, 16777216
  store i32 %v3_12c5c, i32* %ip.global-to-local, align 4
  %v0_12c60 = load i32, i32* %r1.global-to-local, align 4
  %v1_12c60 = inttoptr i32 %v0_12c60 to i32*
  %v2_12c60 = load i32, i32* %v1_12c60, align 4
  store i32 %v2_12c60, i32* @lr, align 4
  %v4_12c60 = add i32 %v0_12c60, 4
  store i32 %v4_12c60, i32* %r1.global-to-local, align 4
  %v4_12c64 = mul i32 %v2_12c60, 256
  %v5_12c64 = or i32 %v4_12c64, %v3_12c5c
  store i32 %v5_12c64, i32* %ip.global-to-local, align 4
  %v2_12c68 = inttoptr i32 %v1_12c68 to i32*
  store i32 %v5_12c64, i32* %v2_12c68, align 4
  %v3_12c68 = load i32, i32* @r0, align 4
  %v4_12c68 = add i32 %v3_12c68, 4
  store i32 %v4_12c68, i32* @r0, align 4
  %v0_12c6c = load i32, i32* %r2.global-to-local, align 4
  %v2_12c6c = add i32 %v0_12c6c, -4
  store i32 %v2_12c6c, i32* %r2.global-to-local, align 4
  %v6_12c70 = icmp slt i32 %v0_12c6c, 4
  br i1 %v6_12c70, label %dec_label_pc_12c74.loopexit, label %dec_label_pc_12c5c

dec_label_pc_12c74.loopexit:                      ; preds = %dec_label_pc_12c5c
  %v4_12c6c = sub i32 3, %v0_12c6c
  %v5_12c6c = and i32 %v4_12c6c, %v0_12c6c
  %v6_12c6c = icmp slt i32 %v5_12c6c, 0
  %v7_12c6c = icmp slt i32 %v2_12c6c, 0
  store i1 %v6_12c6c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12c6c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12c74

dec_label_pc_12c74:                               ; preds = %dec_label_pc_12c74.loopexit, %dec_label_pc_12c50
  %v2_12adc113 = phi i32 [ %v4_12c68, %dec_label_pc_12c74.loopexit ], [ %v12_12c44, %dec_label_pc_12c50 ]
  %v0_12acc109 = phi i32 [ %v2_12c6c, %dec_label_pc_12c74.loopexit ], [ %v2_12c54, %dec_label_pc_12c50 ]
  %v0_12c74 = load i32, i32* %r1.global-to-local, align 4
  %v1_12c74 = add i32 %v0_12c74, -1
  store i32 %v1_12c74, i32* @r1, align 4
  br label %bb131

dec_label_pc_12c7c:                               ; preds = %dec_label_pc_12a30
  %v1_12c7c = load i32, i32* @r2, align 4
  %v2_12c7c = add i32 %v1_12c7c, %v0_12a30
  store i32 %v2_12c7c, i32* %r1.global-to-local, align 4
  %v2_12c80 = add i32 %v1_12c7c, %v1_12a30
  store i32 %v2_12c80, i32* %r0.global-to-local, align 4
  %v2_12c84 = add i32 %v1_12c7c, -4
  store i32 %v2_12c84, i32* %r2.global-to-local, align 4
  %v4_12c84 = sub i32 3, %v1_12c7c
  %v5_12c84 = and i32 %v4_12c84, %v1_12c7c
  %v6_12c84 = icmp slt i32 %v5_12c84, 0
  store i1 %v6_12c84, i1* %cpsr_v.global-to-local, align 1
  %v7_12c84 = icmp slt i32 %v2_12c84, 0
  store i1 %v7_12c84, i1* %cpsr_n.global-to-local, align 1
  %v8_12c84 = icmp eq i32 %v1_12c7c, 4
  store i1 %v8_12c84, i1* %cpsr_z.global-to-local, align 1
  %v5_12c88 = icmp slt i32 %v1_12c7c, 4
  br i1 %v5_12c88, label %bb141, label %dec_label_pc_12c8c

dec_label_pc_12c8c:                               ; preds = %dec_label_pc_12c7c
  %v1_12c8c = urem i32 %v2_12c80, 4
  store i32 %v1_12c8c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12c8c = icmp eq i32 %v1_12c8c, 0
  store i1 %v2_12c8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12c8c, label %dec_label_pc_12c94, label %dec_label_pc_12d34

dec_label_pc_12c94:                               ; preds = %dec_label_pc_12c8c
  %v1_12c94 = urem i32 %v2_12c7c, 4
  store i32 %v1_12c94, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12c94 = icmp eq i32 %v1_12c94, 0
  store i1 %v2_12c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12c94, label %dec_label_pc_12c9c, label %dec_label_pc_12d60

dec_label_pc_12c9c:                               ; preds = %dec_label_pc_12c94, %dec_label_pc_12d58
  %v0_12cb448 = phi i32 [ %v2_12c80, %dec_label_pc_12c94 ], [ %v0_12da831, %dec_label_pc_12d58 ]
  %v0_12cb047 = phi i32 [ %v2_12c7c, %dec_label_pc_12c94 ], [ %v0_12d58, %dec_label_pc_12d58 ]
  %v0_12c9c = phi i32 [ %v2_12c84, %dec_label_pc_12c94 ], [ %v2_12d50, %dec_label_pc_12d58 ]
  %v2_12c9c = add i32 %v0_12c9c, -8
  store i32 %v2_12c9c, i32* %r2.global-to-local, align 4
  %v4_12c9c = sub i32 7, %v0_12c9c
  %v5_12c9c = and i32 %v4_12c9c, %v0_12c9c
  %v6_12c9c = icmp slt i32 %v5_12c9c, 0
  store i1 %v6_12c9c, i1* %cpsr_v.global-to-local, align 1
  %v7_12c9c = icmp slt i32 %v2_12c9c, 0
  store i1 %v7_12c9c, i1* %cpsr_n.global-to-local, align 1
  %v8_12c9c = icmp eq i32 %v0_12c9c, 8
  store i1 %v8_12c9c, i1* %cpsr_z.global-to-local, align 1
  %v5_12ca0 = icmp slt i32 %v0_12c9c, 8
  br i1 %v5_12ca0, label %dec_label_pc_12cec, label %dec_label_pc_12ca4

dec_label_pc_12ca4:                               ; preds = %dec_label_pc_12c9c
  %v3_12ca4 = load i32, i32* @r4, align 4
  store i32 %v3_12ca4, i32* %stack_var_-8, align 4
  %v6_12ca4 = load i32, i32* @lr, align 4
  %v2_12ca8 = add i32 %v0_12c9c, -28
  store i32 %v2_12ca8, i32* %r2.global-to-local, align 4
  %v4_12ca8 = sub i32 27, %v0_12c9c
  %v5_12ca8 = and i32 %v4_12ca8, %v2_12c9c
  %v6_12ca8 = icmp slt i32 %v5_12ca8, 0
  store i1 %v6_12ca8, i1* %cpsr_v.global-to-local, align 1
  %v7_12ca8 = icmp slt i32 %v2_12ca8, 0
  store i1 %v7_12ca8, i1* %cpsr_n.global-to-local, align 1
  %v8_12ca8 = icmp eq i32 %v2_12c9c, 20
  store i1 %v8_12ca8, i1* %cpsr_z.global-to-local, align 1
  %v5_12cac = icmp slt i32 %v2_12c9c, 20
  br i1 %v5_12cac, label %dec_label_pc_12cc8, label %dec_label_pc_12cb0

dec_label_pc_12cb0:                               ; preds = %dec_label_pc_12ca4, %dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge
  %v0_12cb4 = phi i32 [ %v1_12cbc, %dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge ], [ %v0_12cb448, %dec_label_pc_12ca4 ]
  %v0_12cb0 = phi i32 [ %v0_12cb0.pre, %dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge ], [ %v0_12cb047, %dec_label_pc_12ca4 ]
  %v1_12cb0 = add i32 %v0_12cb0, -4
  %v2_12cb0 = inttoptr i32 %v1_12cb0 to i32*
  %v3_12cb0 = load i32, i32* %v2_12cb0, align 4
  store i32 %v3_12cb0, i32* %r3.global-to-local, align 4
  %v4_12cb0 = add i32 %v0_12cb0, -8
  %v5_12cb0 = inttoptr i32 %v4_12cb0 to i32*
  %v6_12cb0 = load i32, i32* %v5_12cb0, align 4
  store i32 %v6_12cb0, i32* %r4.global-to-local, align 4
  %v7_12cb0 = add i32 %v0_12cb0, -12
  %v8_12cb0 = inttoptr i32 %v7_12cb0 to i32*
  %v9_12cb0 = load i32, i32* %v8_12cb0, align 4
  store i32 %v9_12cb0, i32* %ip.global-to-local, align 4
  %v10_12cb0 = add i32 %v0_12cb0, -16
  %v11_12cb0 = inttoptr i32 %v10_12cb0 to i32*
  %v12_12cb0 = load i32, i32* %v11_12cb0, align 4
  store i32 %v12_12cb0, i32* %lr.global-to-local, align 4
  store i32 %v10_12cb0, i32* %r1.global-to-local, align 4
  %v1_12cb4 = add i32 %v0_12cb4, -16
  %v2_12cb4 = inttoptr i32 %v1_12cb4 to i32*
  store i32 %v3_12cb0, i32* %v2_12cb4, align 4
  %v4_12cb4 = add i32 %v0_12cb4, -12
  %v5_12cb4 = inttoptr i32 %v4_12cb4 to i32*
  %v6_12cb4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_12cb4, i32* %v5_12cb4, align 4
  %v7_12cb4 = add i32 %v0_12cb4, -8
  %v8_12cb4 = inttoptr i32 %v7_12cb4 to i32*
  %v9_12cb4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12cb4, i32* %v8_12cb4, align 4
  %v10_12cb4 = add i32 %v0_12cb4, -4
  %v11_12cb4 = inttoptr i32 %v10_12cb4 to i32*
  %v12_12cb4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12cb4, i32* %v11_12cb4, align 4
  store i32 %v1_12cb4, i32* %r0.global-to-local, align 4
  %v0_12cb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12cb8 = add i32 %v0_12cb8, -4
  %v2_12cb8 = inttoptr i32 %v1_12cb8 to i32*
  %v3_12cb8 = load i32, i32* %v2_12cb8, align 4
  store i32 %v3_12cb8, i32* %r3.global-to-local, align 4
  %v4_12cb8 = add i32 %v0_12cb8, -8
  %v5_12cb8 = inttoptr i32 %v4_12cb8 to i32*
  %v6_12cb8 = load i32, i32* %v5_12cb8, align 4
  store i32 %v6_12cb8, i32* %r4.global-to-local, align 4
  %v7_12cb8 = add i32 %v0_12cb8, -12
  %v8_12cb8 = inttoptr i32 %v7_12cb8 to i32*
  %v9_12cb8 = load i32, i32* %v8_12cb8, align 4
  store i32 %v9_12cb8, i32* %ip.global-to-local, align 4
  %v10_12cb8 = add i32 %v0_12cb8, -16
  %v11_12cb8 = inttoptr i32 %v10_12cb8 to i32*
  %v12_12cb8 = load i32, i32* %v11_12cb8, align 4
  store i32 %v12_12cb8, i32* %lr.global-to-local, align 4
  store i32 %v10_12cb8, i32* %r1.global-to-local, align 4
  %v1_12cbc = add i32 %v0_12cb4, -32
  %v2_12cbc = inttoptr i32 %v1_12cbc to i32*
  store i32 %v3_12cb8, i32* %v2_12cbc, align 4
  %v4_12cbc = add i32 %v0_12cb4, -28
  %v5_12cbc = inttoptr i32 %v4_12cbc to i32*
  %v6_12cbc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_12cbc, i32* %v5_12cbc, align 4
  %v7_12cbc = add i32 %v0_12cb4, -24
  %v8_12cbc = inttoptr i32 %v7_12cbc to i32*
  %v9_12cbc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12cbc, i32* %v8_12cbc, align 4
  %v10_12cbc = add i32 %v0_12cb4, -20
  %v11_12cbc = inttoptr i32 %v10_12cbc to i32*
  %v12_12cbc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12cbc, i32* %v11_12cbc, align 4
  store i32 %v1_12cbc, i32* %r0.global-to-local, align 4
  %v0_12cc0 = load i32, i32* %r2.global-to-local, align 4
  %v2_12cc0 = add i32 %v0_12cc0, -32
  store i32 %v2_12cc0, i32* %r2.global-to-local, align 4
  %v6_12cc4 = icmp slt i32 %v0_12cc0, 32
  br i1 %v6_12cc4, label %dec_label_pc_12cc8.loopexit, label %dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge

dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge:  ; preds = %dec_label_pc_12cb0
  %v0_12cb0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12cb0

dec_label_pc_12cc8.loopexit:                      ; preds = %dec_label_pc_12cb0
  %v4_12cc0 = sub i32 31, %v0_12cc0
  %v5_12cc0 = and i32 %v4_12cc0, %v0_12cc0
  %v6_12cc0 = icmp slt i32 %v5_12cc0, 0
  %v7_12cc0 = icmp slt i32 %v2_12cc0, 0
  store i1 %v6_12cc0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12cc0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12cc8

dec_label_pc_12cc8:                               ; preds = %dec_label_pc_12cc8.loopexit, %dec_label_pc_12ca4
  %v6_12cd0 = phi i32 [ %v1_12cbc, %dec_label_pc_12cc8.loopexit ], [ %v0_12cb448, %dec_label_pc_12ca4 ]
  %v0_12cd8.pr = phi i32 [ %v2_12cc0, %dec_label_pc_12cc8.loopexit ], [ %v2_12ca8, %dec_label_pc_12ca4 ]
  %v4_12cc8 = add i32 %v0_12cd8.pr, 16
  %v6_12cc8 = sub i32 0, %v0_12cd8.pr
  %v7_12cc8 = and i32 %v4_12cc8, %v6_12cc8
  %v8_12cc8 = icmp slt i32 %v7_12cc8, 0
  store i1 %v8_12cc8, i1* %cpsr_v.global-to-local, align 1
  %v9_12cc8 = icmp slt i32 %v4_12cc8, 0
  store i1 %v9_12cc8, i1* %cpsr_n.global-to-local, align 1
  %v10_12cc8 = icmp eq i32 %v4_12cc8, 0
  store i1 %v10_12cc8, i1* %cpsr_z.global-to-local, align 1
  %v5_12ccc = icmp slt i32 %v0_12cd8.pr, -16
  br i1 %v5_12ccc, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_12cc8
  %v6_12ccc = load i32, i32* %r1.global-to-local, align 4
  %v7_12ccc = add i32 %v6_12ccc, -4
  %v8_12ccc = inttoptr i32 %v7_12ccc to i32*
  %v9_12ccc = load i32, i32* %v8_12ccc, align 4
  store i32 %v9_12ccc, i32* %r3.global-to-local, align 4
  %v10_12ccc = add i32 %v6_12ccc, -8
  %v11_12ccc = inttoptr i32 %v10_12ccc to i32*
  %v12_12ccc = load i32, i32* %v11_12ccc, align 4
  store i32 %v12_12ccc, i32* %r4.global-to-local, align 4
  %v13_12ccc = add i32 %v6_12ccc, -12
  %v14_12ccc = inttoptr i32 %v13_12ccc to i32*
  %v15_12ccc = load i32, i32* %v14_12ccc, align 4
  store i32 %v15_12ccc, i32* %ip.global-to-local, align 4
  %v16_12ccc = add i32 %v6_12ccc, -16
  %v17_12ccc = inttoptr i32 %v16_12ccc to i32*
  %v18_12ccc = load i32, i32* %v17_12ccc, align 4
  store i32 %v18_12ccc, i32* %lr.global-to-local, align 4
  store i32 %v16_12ccc, i32* %r1.global-to-local, align 4
  %v7_12cd0 = add i32 %v6_12cd0, -16
  %v8_12cd0 = inttoptr i32 %v7_12cd0 to i32*
  store i32 %v9_12ccc, i32* %v8_12cd0, align 4
  %v10_12cd0 = add i32 %v6_12cd0, -12
  %v11_12cd0 = inttoptr i32 %v10_12cd0 to i32*
  %v12_12cd0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_12cd0, i32* %v11_12cd0, align 4
  %v13_12cd0 = add i32 %v6_12cd0, -8
  %v14_12cd0 = inttoptr i32 %v13_12cd0 to i32*
  %v15_12cd0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v15_12cd0, i32* %v14_12cd0, align 4
  %v16_12cd0 = add i32 %v6_12cd0, -4
  %v17_12cd0 = inttoptr i32 %v16_12cd0 to i32*
  %v18_12cd0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_12cd0, i32* %v17_12cd0, align 4
  store i32 %v7_12cd0, i32* %r0.global-to-local, align 4
  %v6_12cd4 = load i32, i32* %r2.global-to-local, align 4
  %v7_12cd4 = add i32 %v6_12cd4, -16
  store i32 %v7_12cd4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_12cc8, %bb138
  %v6_12ce0 = phi i32 [ %v7_12cd0, %bb138 ], [ %v6_12cd0, %dec_label_pc_12cc8 ]
  %v0_12cd8 = phi i32 [ %v7_12cd4, %bb138 ], [ %v0_12cd8.pr, %dec_label_pc_12cc8 ]
  %v4_12cd8 = add i32 %v0_12cd8, 20
  store i32 %v4_12cd8, i32* %r2.global-to-local, align 4
  %v6_12cd8 = sub i32 0, %v0_12cd8
  %v7_12cd8 = and i32 %v4_12cd8, %v6_12cd8
  %v8_12cd8 = icmp slt i32 %v7_12cd8, 0
  store i1 %v8_12cd8, i1* %cpsr_v.global-to-local, align 1
  %v9_12cd8 = icmp slt i32 %v4_12cd8, 0
  store i1 %v9_12cd8, i1* %cpsr_n.global-to-local, align 1
  %v10_12cd8 = icmp eq i32 %v4_12cd8, 0
  store i1 %v10_12cd8, i1* %cpsr_z.global-to-local, align 1
  %v5_12cdc = icmp slt i32 %v0_12cd8, -20
  br i1 %v5_12cdc, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_12cdc = load i32, i32* %r1.global-to-local, align 4
  %v7_12cdc = add i32 %v6_12cdc, -4
  %v8_12cdc = inttoptr i32 %v7_12cdc to i32*
  %v9_12cdc = load i32, i32* %v8_12cdc, align 4
  store i32 %v9_12cdc, i32* %r3.global-to-local, align 4
  %v10_12cdc = add i32 %v6_12cdc, -8
  %v11_12cdc = inttoptr i32 %v10_12cdc to i32*
  %v12_12cdc = load i32, i32* %v11_12cdc, align 4
  store i32 %v12_12cdc, i32* %ip.global-to-local, align 4
  %v13_12cdc = add i32 %v6_12cdc, -12
  %v14_12cdc = inttoptr i32 %v13_12cdc to i32*
  %v15_12cdc = load i32, i32* %v14_12cdc, align 4
  store i32 %v15_12cdc, i32* %lr.global-to-local, align 4
  store i32 %v13_12cdc, i32* %r1.global-to-local, align 4
  %v7_12ce0 = add i32 %v6_12ce0, -12
  %v8_12ce0 = inttoptr i32 %v7_12ce0 to i32*
  store i32 %v9_12cdc, i32* %v8_12ce0, align 4
  %v10_12ce0 = add i32 %v6_12ce0, -8
  %v11_12ce0 = inttoptr i32 %v10_12ce0 to i32*
  %v12_12ce0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_12ce0, i32* %v11_12ce0, align 4
  %v13_12ce0 = add i32 %v6_12ce0, -4
  %v14_12ce0 = inttoptr i32 %v13_12ce0 to i32*
  %v15_12ce0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_12ce0, i32* %v14_12ce0, align 4
  store i32 %v7_12ce0, i32* %r0.global-to-local, align 4
  %v6_12ce4 = load i32, i32* %r2.global-to-local, align 4
  %v7_12ce4 = add i32 %v6_12ce4, -12
  store i32 %v7_12ce4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_12d0456 = phi i32 [ %v6_12ce0, %.thread13 ], [ %v7_12ce0, %bb139 ]
  %v0_12cec54 = phi i32 [ %v4_12cd8, %.thread13 ], [ %v7_12ce4, %bb139 ]
  %v2_12ce8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12ce8, i32* @r4, align 4
  store i32 %v6_12ca4, i32* @lr, align 4
  br label %dec_label_pc_12cec

dec_label_pc_12cec:                               ; preds = %dec_label_pc_12c9c, %.thread15
  %v7_12cfc = phi i32 [ %v0_12cb448, %dec_label_pc_12c9c ], [ %v6_12d0456, %.thread15 ]
  %v0_12cec = phi i32 [ %v2_12c9c, %dec_label_pc_12c9c ], [ %v0_12cec54, %.thread15 ]
  %v2_12cec = add i32 %v0_12cec, 8
  store i32 %v2_12cec, i32* %r2.global-to-local, align 4
  %v4_12cec = sub i32 0, %v0_12cec
  %v5_12cec = and i32 %v2_12cec, %v4_12cec
  %v6_12cec = icmp slt i32 %v5_12cec, 0
  store i1 %v6_12cec, i1* %cpsr_v.global-to-local, align 1
  %v7_12cec = icmp slt i32 %v2_12cec, 0
  store i1 %v7_12cec, i1* %cpsr_n.global-to-local, align 1
  %v8_12cec = icmp eq i32 %v2_12cec, 0
  store i1 %v8_12cec, i1* %cpsr_z.global-to-local, align 1
  %v5_12cf0 = icmp slt i32 %v0_12cec, -8
  br i1 %v5_12cf0, label %bb141, label %dec_label_pc_12cf4

dec_label_pc_12cf4:                               ; preds = %dec_label_pc_12cec
  %v6_12cf4 = add i32 %v0_12cec, 4
  store i32 %v6_12cf4, i32* %r2.global-to-local, align 4
  %v8_12cf4 = sub i32 -5, %v0_12cec
  %v9_12cf4 = and i32 %v8_12cf4, %v2_12cec
  %v10_12cf4 = icmp slt i32 %v9_12cf4, 0
  store i1 %v10_12cf4, i1* %cpsr_v.global-to-local, align 1
  %v11_12cf4 = icmp slt i32 %v6_12cf4, 0
  store i1 %v11_12cf4, i1* %cpsr_n.global-to-local, align 1
  %v12_12cf4 = icmp eq i32 %v2_12cec, 4
  store i1 %v12_12cf4, i1* %cpsr_z.global-to-local, align 1
  %v5_12cf8 = icmp slt i32 %v2_12cec, 4
  %v6_12cf8 = load i32, i32* %r1.global-to-local, align 4
  %v7_12cf8 = add i32 %v6_12cf8, -4
  %v8_12cf8 = inttoptr i32 %v7_12cf8 to i32*
  %v9_12cf8 = load i32, i32* %v8_12cf8, align 4
  store i32 %v9_12cf8, i32* %r3.global-to-local, align 4
  br i1 %v5_12cf8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_12cf4
  store i32 %v7_12cf8, i32* %r1.global-to-local, align 4
  %v8_12cfc = add i32 %v7_12cfc, -4
  %v9_12cfc = inttoptr i32 %v8_12cfc to i32*
  store i32 %v9_12cf8, i32* %v9_12cfc, align 4
  %v10_12cfc = load i32, i32* %r0.global-to-local, align 4
  %v11_12cfc = add i32 %v10_12cfc, -4
  store i32 %v11_12cfc, i32* %r0.global-to-local, align 4
  %v0_12d0c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_12cf4
  %v10_12d00 = add i32 %v6_12cf8, -8
  %v11_12d00 = inttoptr i32 %v10_12d00 to i32*
  %v12_12d00 = load i32, i32* %v11_12d00, align 4
  store i32 %v12_12d00, i32* %ip.global-to-local, align 4
  store i32 %v10_12d00, i32* %r1.global-to-local, align 4
  %v7_12d04 = add i32 %v7_12cfc, -8
  %v8_12d04 = inttoptr i32 %v7_12d04 to i32*
  store i32 %v9_12cf8, i32* %v8_12d04, align 4
  %v10_12d04 = add i32 %v7_12cfc, -4
  %v11_12d04 = inttoptr i32 %v10_12d04 to i32*
  %v12_12d04 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_12d04, i32* %v11_12d04, align 4
  store i32 %v7_12d04, i32* %r0.global-to-local, align 4
  %v6_12d08 = load i32, i32* %r2.global-to-local, align 4
  %v7_12d08 = add i32 %v6_12d08, -4
  store i32 %v7_12d08, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_12cec, %dec_label_pc_12c7c, %dec_label_pc_12eb0, %dec_label_pc_12e44, %dec_label_pc_12dd8, %bb140
  %v2_12d10 = phi i32 [ %v11_12cfc, %.thread19 ], [ %v0_12da831, %.thread25 ], [ %v7_12cfc, %dec_label_pc_12cec ], [ %v2_12c80, %dec_label_pc_12c7c ], [ %v2_12d1c64, %dec_label_pc_12eb0 ], [ %v2_12d1c63, %dec_label_pc_12e44 ], [ %v2_12d1c62, %dec_label_pc_12dd8 ], [ %v7_12d04, %bb140 ]
  %v0_12d0c = phi i32 [ %v0_12d0c.pre, %.thread19 ], [ %v2_12d50, %.thread25 ], [ %v2_12cec, %dec_label_pc_12cec ], [ %v2_12c84, %dec_label_pc_12c7c ], [ %v0_12d0c60, %dec_label_pc_12eb0 ], [ %v0_12d0c59, %dec_label_pc_12e44 ], [ %v0_12d0c58, %dec_label_pc_12dd8 ], [ %v7_12d08, %bb140 ]
  %v1_12d0c = add i32 %v0_12d0c, 4
  store i32 %v1_12d0c, i32* %r2.global-to-local, align 4
  %v3_12d0c = sub i32 0, %v0_12d0c
  %v4_12d0c = and i32 %v1_12d0c, %v3_12d0c
  %v5_12d0c = icmp slt i32 %v4_12d0c, 0
  store i1 %v5_12d0c, i1* %cpsr_v.global-to-local, align 1
  %v6_12d0c = icmp slt i32 %v1_12d0c, 0
  store i1 %v6_12d0c, i1* %cpsr_n.global-to-local, align 1
  %v7_12d0c = icmp eq i32 %v1_12d0c, 0
  store i1 %v7_12d0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12d0c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_12d14 = add i32 %v0_12d0c, 2
  %v3_12d14 = sub i32 -3, %v0_12d0c
  %v4_12d14 = and i32 %v3_12d14, %v1_12d0c
  %v5_12d14 = icmp slt i32 %v4_12d14, 0
  store i1 %v5_12d14, i1* %cpsr_v.global-to-local, align 1
  %v6_12d14 = icmp slt i32 %v1_12d14, 0
  store i1 %v6_12d14, i1* %cpsr_n.global-to-local, align 1
  %v7_12d14 = icmp eq i32 %v1_12d0c, 2
  store i1 %v7_12d14, i1* %cpsr_z.global-to-local, align 1
  %v0_12d18 = load i32, i32* %r1.global-to-local, align 4
  %v1_12d18 = add i32 %v0_12d18, -1
  %v2_12d18 = inttoptr i32 %v1_12d18 to i8*
  %v3_12d18 = load i8, i8* %v2_12d18, align 1
  %v4_12d18 = zext i8 %v3_12d18 to i32
  store i32 %v4_12d18, i32* %r3.global-to-local, align 4
  store i32 %v1_12d18, i32* %r1.global-to-local, align 4
  %v3_12d1c = add i32 %v2_12d10, -1
  %v4_12d1c = inttoptr i32 %v3_12d1c to i8*
  store i8 %v3_12d18, i8* %v4_12d1c, align 1
  %v5_12d1c = load i32, i32* %r0.global-to-local, align 4
  %v6_12d1c = add i32 %v5_12d1c, -1
  store i32 %v6_12d1c, i32* %r0.global-to-local, align 4
  %v0_12d20 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_12d20 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_12d20 = xor i1 %v0_12d20, %v1_12d20
  br i1 %v2_12d20, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_12d20 = load i32, i32* %r1.global-to-local, align 4
  %v4_12d20 = add i32 %v3_12d20, -1
  %v5_12d20 = inttoptr i32 %v4_12d20 to i8*
  %v6_12d20 = load i8, i8* %v5_12d20, align 1
  %v7_12d20 = zext i8 %v6_12d20 to i32
  store i32 %v7_12d20, i32* %r3.global-to-local, align 4
  store i32 %v4_12d20, i32* %r1.global-to-local, align 4
  %v6_12d24 = add i32 %v5_12d1c, -2
  %v7_12d24 = inttoptr i32 %v6_12d24 to i8*
  store i8 %v6_12d20, i8* %v7_12d24, align 1
  %v8_12d24 = load i32, i32* %r0.global-to-local, align 4
  %v9_12d24 = add i32 %v8_12d24, -1
  store i32 %v9_12d24, i32* %r0.global-to-local, align 4
  %v1_12d28.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_12d28.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_12d2c = phi i32 [ %v9_12d24, %bb143 ], [ %v6_12d1c, %bb142 ]
  %v2_12d2c = phi i1 [ %v2_12d28.pre, %bb143 ], [ %v1_12d20, %bb142 ]
  %v1_12d2c = phi i1 [ %v1_12d28.pre, %bb143 ], [ %v0_12d20, %bb142 ]
  %v0_12d28 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_12d28 = xor i1 %v2_12d2c, %v1_12d2c
  %v4_12d28 = or i1 %v0_12d28, %v3_12d28
  br i1 %v4_12d28, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_12d28 = load i32, i32* %r1.global-to-local, align 4
  %v6_12d28 = add i32 %v5_12d28, -1
  %v7_12d28 = inttoptr i32 %v6_12d28 to i8*
  %v8_12d28 = load i8, i8* %v7_12d28, align 1
  %v9_12d28 = zext i8 %v8_12d28 to i32
  store i32 %v9_12d28, i32* %r3.global-to-local, align 4
  store i32 %v6_12d28, i32* %r1.global-to-local, align 4
  %v8_12d2c = add i32 %v7_12d2c, -1
  %v9_12d2c = inttoptr i32 %v8_12d2c to i8*
  store i8 %v8_12d28, i8* %v9_12d2c, align 1
  %v10_12d2c = load i32, i32* %r0.global-to-local, align 4
  %v11_12d2c = add i32 %v10_12d2c, -1
  store i32 %v11_12d2c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_12d34:                               ; preds = %dec_label_pc_12c8c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_12d34 = icmp eq i32 %v1_12c8c, 1
  store i1 %v8_12d34, i1* %cpsr_n.global-to-local, align 1
  %v9_12d34 = icmp eq i32 %v1_12c8c, 2
  store i1 %v9_12d34, i1* %cpsr_z.global-to-local, align 1
  %v1_12d38 = add i32 %v2_12c7c, -1
  %v2_12d38 = inttoptr i32 %v1_12d38 to i8*
  %v3_12d38 = load i8, i8* %v2_12d38, align 1
  %v4_12d38 = zext i8 %v3_12d38 to i32
  store i32 %v4_12d38, i32* %r3.global-to-local, align 4
  store i32 %v1_12d38, i32* %r1.global-to-local, align 4
  %v3_12d3c = add i32 %v2_12c80, -1
  %v4_12d3c = inttoptr i32 %v3_12d3c to i8*
  store i8 %v3_12d38, i8* %v4_12d3c, align 1
  %v5_12d3c = load i32, i32* %r0.global-to-local, align 4
  %v6_12d3c = add i32 %v5_12d3c, -1
  store i32 %v6_12d3c, i32* %r0.global-to-local, align 4
  br i1 %v8_12d34, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_12d34
  %v6_12d40 = load i32, i32* %r1.global-to-local, align 4
  %v7_12d40 = add i32 %v6_12d40, -1
  %v8_12d40 = inttoptr i32 %v7_12d40 to i8*
  %v9_12d40 = load i8, i8* %v8_12d40, align 1
  %v10_12d40 = zext i8 %v9_12d40 to i32
  store i32 %v10_12d40, i32* %r3.global-to-local, align 4
  store i32 %v7_12d40, i32* %r1.global-to-local, align 4
  %v9_12d44 = add i32 %v5_12d3c, -2
  %v10_12d44 = inttoptr i32 %v9_12d44 to i8*
  store i8 %v9_12d40, i8* %v10_12d44, align 1
  %v11_12d44 = load i32, i32* %r0.global-to-local, align 4
  %v12_12d44 = add i32 %v11_12d44, -1
  store i32 %v12_12d44, i32* %r0.global-to-local, align 4
  br i1 %v9_12d34, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_12d48 = load i32, i32* %r1.global-to-local, align 4
  %v9_12d48 = add i32 %v8_12d48, -1
  %v10_12d48 = inttoptr i32 %v9_12d48 to i8*
  %v11_12d48 = load i8, i8* %v10_12d48, align 1
  %v12_12d48 = zext i8 %v11_12d48 to i32
  store i32 %v12_12d48, i32* %r3.global-to-local, align 4
  store i32 %v9_12d48, i32* %r1.global-to-local, align 4
  %v11_12d4c = add i32 %v11_12d44, -2
  %v12_12d4c = inttoptr i32 %v11_12d4c to i8*
  store i8 %v11_12d48, i8* %v12_12d4c, align 1
  %v13_12d4c = load i32, i32* %r0.global-to-local, align 4
  %v14_12d4c = add i32 %v13_12d4c, -1
  store i32 %v14_12d4c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_12d34, %bb146
  %v0_12da831 = phi i32 [ %v12_12d44, %bb145 ], [ %v6_12d3c, %dec_label_pc_12d34 ], [ %v14_12d4c, %bb146 ]
  %v0_12d50 = load i32, i32* %r2.global-to-local, align 4
  %v1_12d50 = load i32, i32* %ip.global-to-local, align 4
  %v2_12d50 = sub i32 %v0_12d50, %v1_12d50
  store i32 %v2_12d50, i32* %r2.global-to-local, align 4
  %v4_12d50 = xor i32 %v1_12d50, %v0_12d50
  %v5_12d50 = xor i32 %v2_12d50, %v0_12d50
  %v6_12d50 = and i32 %v5_12d50, %v4_12d50
  %v7_12d50 = icmp slt i32 %v6_12d50, 0
  store i1 %v7_12d50, i1* %cpsr_v.global-to-local, align 1
  %v8_12d50 = icmp slt i32 %v2_12d50, 0
  store i1 %v8_12d50, i1* %cpsr_n.global-to-local, align 1
  %v9_12d50 = icmp eq i32 %v0_12d50, %v1_12d50
  store i1 %v9_12d50, i1* %cpsr_z.global-to-local, align 1
  %v5_12d54 = icmp slt i32 %v0_12d50, %v1_12d50
  br i1 %v5_12d54, label %bb141, label %dec_label_pc_12d58

dec_label_pc_12d58:                               ; preds = %.thread25
  %v0_12d58 = load i32, i32* %r1.global-to-local, align 4
  %v1_12d58 = urem i32 %v0_12d58, 4
  store i32 %v1_12d58, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12d58 = icmp eq i32 %v1_12d58, 0
  store i1 %v2_12d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12d58, label %dec_label_pc_12c9c, label %dec_label_pc_12d60

dec_label_pc_12d60:                               ; preds = %dec_label_pc_12c94, %dec_label_pc_12d58
  %v0_12da830 = phi i32 [ %v2_12c80, %dec_label_pc_12c94 ], [ %v0_12da831, %dec_label_pc_12d58 ]
  %v0_12e54 = phi i32 [ %v2_12c84, %dec_label_pc_12c94 ], [ %v2_12d50, %dec_label_pc_12d58 ]
  %v0_12d60 = phi i32 [ %v2_12c7c, %dec_label_pc_12c94 ], [ %v0_12d58, %dec_label_pc_12d58 ]
  %v0_12d68 = phi i32 [ %v1_12c94, %dec_label_pc_12c94 ], [ %v1_12d58, %dec_label_pc_12d58 ]
  %v1_12d60 = and i32 %v0_12d60, -4
  store i32 %v1_12d60, i32* %r1.global-to-local, align 4
  %v1_12d64 = inttoptr i32 %v1_12d60 to i32*
  %v2_12d64 = load i32, i32* %v1_12d64, align 4
  store i32 %v2_12d64, i32* %r3.global-to-local, align 4
  %v7_12d68 = icmp ult i32 %v0_12d68, 2
  %v2_12e4c = add i32 %v0_12e54, -12
  %v4_12e4c = sub i32 11, %v0_12e54
  %v5_12e4c = and i32 %v4_12e4c, %v0_12e54
  %v6_12e4c = icmp slt i32 %v5_12e4c, 0
  store i1 %v6_12e4c, i1* %cpsr_v.global-to-local, align 1
  %v7_12e4c = icmp slt i32 %v2_12e4c, 0
  store i1 %v7_12e4c, i1* %cpsr_n.global-to-local, align 1
  %v8_12e4c = icmp eq i32 %v0_12e54, 12
  store i1 %v8_12e4c, i1* %cpsr_z.global-to-local, align 1
  %v5_12e50 = icmp slt i32 %v0_12e54, 12
  br i1 %v7_12d68, label %dec_label_pc_12e4c, label %dec_label_pc_12d70

dec_label_pc_12d70:                               ; preds = %dec_label_pc_12d60
  %v8_12d68 = icmp eq i32 %v0_12d68, 2
  br i1 %v8_12d68, label %dec_label_pc_12de0, label %dec_label_pc_12d74

dec_label_pc_12d74:                               ; preds = %dec_label_pc_12d70
  br i1 %v5_12e50, label %dec_label_pc_12dc0, label %dec_label_pc_12d7c

dec_label_pc_12d7c:                               ; preds = %dec_label_pc_12d74
  store i32 %v2_12e4c, i32* %r2.global-to-local, align 4
  %v3_12d80 = load i32, i32* @r4, align 4
  store i32 %v3_12d80, i32* %stack_var_-12, align 4
  %v6_12d80 = load i32, i32* @r5, align 4
  store i32 %v6_12d80, i32* %stack_var_-8, align 4
  %v9_12d80 = load i32, i32* @lr, align 4
  br label %dec_label_pc_12d84

dec_label_pc_12d84:                               ; preds = %dec_label_pc_12d84.dec_label_pc_12d84_crit_edge, %dec_label_pc_12d7c
  %v0_12da8 = phi i32 [ %v1_12da8, %dec_label_pc_12d84.dec_label_pc_12d84_crit_edge ], [ %v0_12da830, %dec_label_pc_12d7c ]
  %v0_12d88 = phi i32 [ %v0_12d88.pre, %dec_label_pc_12d84.dec_label_pc_12d84_crit_edge ], [ %v1_12d60, %dec_label_pc_12d7c ]
  %v0_12d84 = phi i32 [ %v0_12d84.pre, %dec_label_pc_12d84.dec_label_pc_12d84_crit_edge ], [ %v2_12d64, %dec_label_pc_12d7c ]
  %v3_12d84 = mul i32 %v0_12d84, 256
  store i32 %v3_12d84, i32* %lr.global-to-local, align 4
  %v1_12d88 = add i32 %v0_12d88, -4
  %v2_12d88 = inttoptr i32 %v1_12d88 to i32*
  %v3_12d88 = load i32, i32* %v2_12d88, align 4
  store i32 %v3_12d88, i32* %r3.global-to-local, align 4
  %v4_12d88 = add i32 %v0_12d88, -8
  %v5_12d88 = inttoptr i32 %v4_12d88 to i32*
  %v6_12d88 = load i32, i32* %v5_12d88, align 4
  store i32 %v6_12d88, i32* %r4.global-to-local, align 4
  %v7_12d88 = add i32 %v0_12d88, -12
  %v8_12d88 = inttoptr i32 %v7_12d88 to i32*
  %v9_12d88 = load i32, i32* %v8_12d88, align 4
  store i32 %v9_12d88, i32* %r5.global-to-local, align 4
  %v10_12d88 = add i32 %v0_12d88, -16
  %v11_12d88 = inttoptr i32 %v10_12d88 to i32*
  %v12_12d88 = load i32, i32* %v11_12d88, align 4
  store i32 %v10_12d88, i32* %r1.global-to-local, align 4
  %v4_12d8c = udiv i32 %v12_12d88, 16777216
  %v5_12d8c = or i32 %v4_12d8c, %v3_12d84
  store i32 %v5_12d8c, i32* %lr.global-to-local, align 4
  %v3_12d90 = mul i32 %v12_12d88, 256
  %v4_12d94 = udiv i32 %v9_12d88, 16777216
  %v5_12d94 = or i32 %v3_12d90, %v4_12d94
  store i32 %v5_12d94, i32* %ip.global-to-local, align 4
  %v3_12d98 = mul i32 %v9_12d88, 256
  %v4_12d9c = udiv i32 %v6_12d88, 16777216
  %v5_12d9c = or i32 %v3_12d98, %v4_12d9c
  store i32 %v5_12d9c, i32* %r5.global-to-local, align 4
  %v3_12da0 = mul i32 %v6_12d88, 256
  %v4_12da4 = udiv i32 %v3_12d88, 16777216
  %v5_12da4 = or i32 %v3_12da0, %v4_12da4
  store i32 %v5_12da4, i32* %r4.global-to-local, align 4
  %v1_12da8 = add i32 %v0_12da8, -16
  %v2_12da8 = inttoptr i32 %v1_12da8 to i32*
  store i32 %v5_12da4, i32* %v2_12da8, align 4
  %v4_12da8 = add i32 %v0_12da8, -12
  %v5_12da8 = inttoptr i32 %v4_12da8 to i32*
  %v6_12da8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_12da8, i32* %v5_12da8, align 4
  %v7_12da8 = add i32 %v0_12da8, -8
  %v8_12da8 = inttoptr i32 %v7_12da8 to i32*
  %v9_12da8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12da8, i32* %v8_12da8, align 4
  %v10_12da8 = add i32 %v0_12da8, -4
  %v11_12da8 = inttoptr i32 %v10_12da8 to i32*
  %v12_12da8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12da8, i32* %v11_12da8, align 4
  store i32 %v1_12da8, i32* %r0.global-to-local, align 4
  %v0_12dac = load i32, i32* %r2.global-to-local, align 4
  %v2_12dac = add i32 %v0_12dac, -16
  store i32 %v2_12dac, i32* %r2.global-to-local, align 4
  %v6_12db0 = icmp slt i32 %v0_12dac, 16
  br i1 %v6_12db0, label %dec_label_pc_12db4, label %dec_label_pc_12d84.dec_label_pc_12d84_crit_edge

dec_label_pc_12d84.dec_label_pc_12d84_crit_edge:  ; preds = %dec_label_pc_12d84
  %v0_12d84.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12d88.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d84

dec_label_pc_12db4:                               ; preds = %dec_label_pc_12d84
  %v2_12db4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12db4, i32* @r4, align 4
  %v5_12db4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_12db4, i32* @r5, align 4
  store i32 %v9_12d80, i32* @lr, align 4
  %v2_12db8 = add i32 %v0_12dac, -4
  store i32 %v2_12db8, i32* %r2.global-to-local, align 4
  %v4_12db8 = add i32 %v0_12dac, 2147483632
  %v5_12db8 = and i32 %v2_12db8, %v4_12db8
  %v6_12db8 = icmp slt i32 %v5_12db8, 0
  store i1 %v6_12db8, i1* %cpsr_v.global-to-local, align 1
  %v7_12db8 = icmp slt i32 %v2_12db8, 0
  store i1 %v7_12db8, i1* %cpsr_n.global-to-local, align 1
  %v8_12db8 = icmp eq i32 %v2_12db8, 0
  store i1 %v8_12db8, i1* %cpsr_z.global-to-local, align 1
  %v5_12dbc = icmp slt i32 %v2_12dac, -12
  br i1 %v5_12dbc, label %dec_label_pc_12dd8, label %dec_label_pc_12dc0

dec_label_pc_12dc0:                               ; preds = %dec_label_pc_12db4, %dec_label_pc_12d74, %dec_label_pc_12dc0
  %v1_12dcc = phi i32 [ %v5_12dcc, %dec_label_pc_12dc0 ], [ %v1_12da8, %dec_label_pc_12db4 ], [ %v0_12da830, %dec_label_pc_12d74 ]
  %v0_12dc0 = load i32, i32* %r3.global-to-local, align 4
  %v3_12dc0 = mul i32 %v0_12dc0, 256
  store i32 %v3_12dc0, i32* %ip.global-to-local, align 4
  %v0_12dc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12dc4 = add i32 %v0_12dc4, -4
  %v2_12dc4 = inttoptr i32 %v1_12dc4 to i32*
  %v3_12dc4 = load i32, i32* %v2_12dc4, align 4
  store i32 %v3_12dc4, i32* %r3.global-to-local, align 4
  store i32 %v1_12dc4, i32* %r1.global-to-local, align 4
  %v4_12dc8 = udiv i32 %v3_12dc4, 16777216
  %v5_12dc8 = or i32 %v4_12dc8, %v3_12dc0
  store i32 %v5_12dc8, i32* %ip.global-to-local, align 4
  %v2_12dcc = add i32 %v1_12dcc, -4
  %v3_12dcc = inttoptr i32 %v2_12dcc to i32*
  store i32 %v5_12dc8, i32* %v3_12dcc, align 4
  %v4_12dcc = load i32, i32* %r0.global-to-local, align 4
  %v5_12dcc = add i32 %v4_12dcc, -4
  store i32 %v5_12dcc, i32* %r0.global-to-local, align 4
  %v0_12dd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_12dd0 = add i32 %v0_12dd0, -4
  store i32 %v2_12dd0, i32* %r2.global-to-local, align 4
  %v6_12dd4 = icmp slt i32 %v0_12dd0, 4
  br i1 %v6_12dd4, label %dec_label_pc_12dd8.loopexit, label %dec_label_pc_12dc0

dec_label_pc_12dd8.loopexit:                      ; preds = %dec_label_pc_12dc0
  %v4_12dd0 = sub i32 3, %v0_12dd0
  %v5_12dd0 = and i32 %v4_12dd0, %v0_12dd0
  %v6_12dd0 = icmp slt i32 %v5_12dd0, 0
  %v7_12dd0 = icmp slt i32 %v2_12dd0, 0
  store i1 %v6_12dd0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12dd0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12dd8

dec_label_pc_12dd8:                               ; preds = %dec_label_pc_12dd8.loopexit, %dec_label_pc_12db4
  %v2_12d1c62 = phi i32 [ %v5_12dcc, %dec_label_pc_12dd8.loopexit ], [ %v1_12da8, %dec_label_pc_12db4 ]
  %v0_12d0c58 = phi i32 [ %v2_12dd0, %dec_label_pc_12dd8.loopexit ], [ %v2_12db8, %dec_label_pc_12db4 ]
  %v0_12dd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12dd8 = add i32 %v0_12dd8, 3
  store i32 %v1_12dd8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_12de0:                               ; preds = %dec_label_pc_12d70
  br i1 %v5_12e50, label %dec_label_pc_12e2c, label %dec_label_pc_12de8

dec_label_pc_12de8:                               ; preds = %dec_label_pc_12de0
  store i32 %v2_12e4c, i32* %r2.global-to-local, align 4
  %v3_12dec = load i32, i32* @r4, align 4
  store i32 %v3_12dec, i32* %stack_var_-12, align 4
  %v6_12dec = load i32, i32* @r5, align 4
  store i32 %v6_12dec, i32* %stack_var_-8, align 4
  %v9_12dec = load i32, i32* @lr, align 4
  br label %dec_label_pc_12df0

dec_label_pc_12df0:                               ; preds = %dec_label_pc_12df0.dec_label_pc_12df0_crit_edge, %dec_label_pc_12de8
  %v0_12e14 = phi i32 [ %v1_12e14, %dec_label_pc_12df0.dec_label_pc_12df0_crit_edge ], [ %v0_12da830, %dec_label_pc_12de8 ]
  %v0_12df4 = phi i32 [ %v0_12df4.pre, %dec_label_pc_12df0.dec_label_pc_12df0_crit_edge ], [ %v1_12d60, %dec_label_pc_12de8 ]
  %v0_12df0 = phi i32 [ %v0_12df0.pre, %dec_label_pc_12df0.dec_label_pc_12df0_crit_edge ], [ %v2_12d64, %dec_label_pc_12de8 ]
  %v3_12df0 = mul i32 %v0_12df0, 65536
  store i32 %v3_12df0, i32* %lr.global-to-local, align 4
  %v1_12df4 = add i32 %v0_12df4, -4
  %v2_12df4 = inttoptr i32 %v1_12df4 to i32*
  %v3_12df4 = load i32, i32* %v2_12df4, align 4
  store i32 %v3_12df4, i32* %r3.global-to-local, align 4
  %v4_12df4 = add i32 %v0_12df4, -8
  %v5_12df4 = inttoptr i32 %v4_12df4 to i32*
  %v6_12df4 = load i32, i32* %v5_12df4, align 4
  store i32 %v6_12df4, i32* %r4.global-to-local, align 4
  %v7_12df4 = add i32 %v0_12df4, -12
  %v8_12df4 = inttoptr i32 %v7_12df4 to i32*
  %v9_12df4 = load i32, i32* %v8_12df4, align 4
  store i32 %v9_12df4, i32* %r5.global-to-local, align 4
  %v10_12df4 = add i32 %v0_12df4, -16
  %v11_12df4 = inttoptr i32 %v10_12df4 to i32*
  %v12_12df4 = load i32, i32* %v11_12df4, align 4
  store i32 %v10_12df4, i32* %r1.global-to-local, align 4
  %v4_12df8 = udiv i32 %v12_12df4, 65536
  %v5_12df8 = or i32 %v4_12df8, %v3_12df0
  store i32 %v5_12df8, i32* %lr.global-to-local, align 4
  %v3_12dfc = mul i32 %v12_12df4, 65536
  %v4_12e00 = udiv i32 %v9_12df4, 65536
  %v5_12e00 = or i32 %v3_12dfc, %v4_12e00
  store i32 %v5_12e00, i32* %ip.global-to-local, align 4
  %v3_12e04 = mul i32 %v9_12df4, 65536
  %v4_12e08 = udiv i32 %v6_12df4, 65536
  %v5_12e08 = or i32 %v3_12e04, %v4_12e08
  store i32 %v5_12e08, i32* %r5.global-to-local, align 4
  %v3_12e0c = mul i32 %v6_12df4, 65536
  %v4_12e10 = udiv i32 %v3_12df4, 65536
  %v5_12e10 = or i32 %v3_12e0c, %v4_12e10
  store i32 %v5_12e10, i32* %r4.global-to-local, align 4
  %v1_12e14 = add i32 %v0_12e14, -16
  %v2_12e14 = inttoptr i32 %v1_12e14 to i32*
  store i32 %v5_12e10, i32* %v2_12e14, align 4
  %v4_12e14 = add i32 %v0_12e14, -12
  %v5_12e14 = inttoptr i32 %v4_12e14 to i32*
  %v6_12e14 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_12e14, i32* %v5_12e14, align 4
  %v7_12e14 = add i32 %v0_12e14, -8
  %v8_12e14 = inttoptr i32 %v7_12e14 to i32*
  %v9_12e14 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12e14, i32* %v8_12e14, align 4
  %v10_12e14 = add i32 %v0_12e14, -4
  %v11_12e14 = inttoptr i32 %v10_12e14 to i32*
  %v12_12e14 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12e14, i32* %v11_12e14, align 4
  store i32 %v1_12e14, i32* %r0.global-to-local, align 4
  %v0_12e18 = load i32, i32* %r2.global-to-local, align 4
  %v2_12e18 = add i32 %v0_12e18, -16
  store i32 %v2_12e18, i32* %r2.global-to-local, align 4
  %v6_12e1c = icmp slt i32 %v0_12e18, 16
  br i1 %v6_12e1c, label %dec_label_pc_12e20, label %dec_label_pc_12df0.dec_label_pc_12df0_crit_edge

dec_label_pc_12df0.dec_label_pc_12df0_crit_edge:  ; preds = %dec_label_pc_12df0
  %v0_12df0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12df4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12df0

dec_label_pc_12e20:                               ; preds = %dec_label_pc_12df0
  %v2_12e20 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12e20, i32* @r4, align 4
  %v5_12e20 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_12e20, i32* @r5, align 4
  store i32 %v9_12dec, i32* @lr, align 4
  %v2_12e24 = add i32 %v0_12e18, -4
  store i32 %v2_12e24, i32* %r2.global-to-local, align 4
  %v4_12e24 = add i32 %v0_12e18, 2147483632
  %v5_12e24 = and i32 %v2_12e24, %v4_12e24
  %v6_12e24 = icmp slt i32 %v5_12e24, 0
  store i1 %v6_12e24, i1* %cpsr_v.global-to-local, align 1
  %v7_12e24 = icmp slt i32 %v2_12e24, 0
  store i1 %v7_12e24, i1* %cpsr_n.global-to-local, align 1
  %v8_12e24 = icmp eq i32 %v2_12e24, 0
  store i1 %v8_12e24, i1* %cpsr_z.global-to-local, align 1
  %v5_12e28 = icmp slt i32 %v2_12e18, -12
  br i1 %v5_12e28, label %dec_label_pc_12e44, label %dec_label_pc_12e2c

dec_label_pc_12e2c:                               ; preds = %dec_label_pc_12e20, %dec_label_pc_12de0, %dec_label_pc_12e2c
  %v1_12e38 = phi i32 [ %v5_12e38, %dec_label_pc_12e2c ], [ %v1_12e14, %dec_label_pc_12e20 ], [ %v0_12da830, %dec_label_pc_12de0 ]
  %v0_12e2c = load i32, i32* %r3.global-to-local, align 4
  %v3_12e2c = mul i32 %v0_12e2c, 65536
  store i32 %v3_12e2c, i32* %ip.global-to-local, align 4
  %v0_12e30 = load i32, i32* %r1.global-to-local, align 4
  %v1_12e30 = add i32 %v0_12e30, -4
  %v2_12e30 = inttoptr i32 %v1_12e30 to i32*
  %v3_12e30 = load i32, i32* %v2_12e30, align 4
  store i32 %v3_12e30, i32* %r3.global-to-local, align 4
  store i32 %v1_12e30, i32* %r1.global-to-local, align 4
  %v4_12e34 = udiv i32 %v3_12e30, 65536
  %v5_12e34 = or i32 %v4_12e34, %v3_12e2c
  store i32 %v5_12e34, i32* %ip.global-to-local, align 4
  %v2_12e38 = add i32 %v1_12e38, -4
  %v3_12e38 = inttoptr i32 %v2_12e38 to i32*
  store i32 %v5_12e34, i32* %v3_12e38, align 4
  %v4_12e38 = load i32, i32* %r0.global-to-local, align 4
  %v5_12e38 = add i32 %v4_12e38, -4
  store i32 %v5_12e38, i32* %r0.global-to-local, align 4
  %v0_12e3c = load i32, i32* %r2.global-to-local, align 4
  %v2_12e3c = add i32 %v0_12e3c, -4
  store i32 %v2_12e3c, i32* %r2.global-to-local, align 4
  %v6_12e40 = icmp slt i32 %v0_12e3c, 4
  br i1 %v6_12e40, label %dec_label_pc_12e44.loopexit, label %dec_label_pc_12e2c

dec_label_pc_12e44.loopexit:                      ; preds = %dec_label_pc_12e2c
  %v4_12e3c = sub i32 3, %v0_12e3c
  %v5_12e3c = and i32 %v4_12e3c, %v0_12e3c
  %v6_12e3c = icmp slt i32 %v5_12e3c, 0
  %v7_12e3c = icmp slt i32 %v2_12e3c, 0
  store i1 %v6_12e3c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12e3c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12e44

dec_label_pc_12e44:                               ; preds = %dec_label_pc_12e44.loopexit, %dec_label_pc_12e20
  %v2_12d1c63 = phi i32 [ %v5_12e38, %dec_label_pc_12e44.loopexit ], [ %v1_12e14, %dec_label_pc_12e20 ]
  %v0_12d0c59 = phi i32 [ %v2_12e3c, %dec_label_pc_12e44.loopexit ], [ %v2_12e24, %dec_label_pc_12e20 ]
  %v0_12e44 = load i32, i32* %r1.global-to-local, align 4
  %v1_12e44 = add i32 %v0_12e44, 2
  store i32 %v1_12e44, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_12e4c:                               ; preds = %dec_label_pc_12d60
  br i1 %v5_12e50, label %dec_label_pc_12e98, label %dec_label_pc_12e54

dec_label_pc_12e54:                               ; preds = %dec_label_pc_12e4c
  store i32 %v2_12e4c, i32* %r2.global-to-local, align 4
  %v3_12e58 = load i32, i32* @r4, align 4
  store i32 %v3_12e58, i32* %stack_var_-12, align 4
  %v6_12e58 = load i32, i32* @r5, align 4
  store i32 %v6_12e58, i32* %stack_var_-8, align 4
  %v9_12e58 = load i32, i32* @lr, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12e5c:                               ; preds = %dec_label_pc_12e5c.dec_label_pc_12e5c_crit_edge, %dec_label_pc_12e54
  %v0_12e80 = phi i32 [ %v1_12e80, %dec_label_pc_12e5c.dec_label_pc_12e5c_crit_edge ], [ %v0_12da830, %dec_label_pc_12e54 ]
  %v0_12e60 = phi i32 [ %v0_12e60.pre, %dec_label_pc_12e5c.dec_label_pc_12e5c_crit_edge ], [ %v1_12d60, %dec_label_pc_12e54 ]
  %v0_12e5c = phi i32 [ %v0_12e5c.pre, %dec_label_pc_12e5c.dec_label_pc_12e5c_crit_edge ], [ %v2_12d64, %dec_label_pc_12e54 ]
  %v3_12e5c = mul i32 %v0_12e5c, 16777216
  store i32 %v3_12e5c, i32* %lr.global-to-local, align 4
  %v1_12e60 = add i32 %v0_12e60, -4
  %v2_12e60 = inttoptr i32 %v1_12e60 to i32*
  %v3_12e60 = load i32, i32* %v2_12e60, align 4
  store i32 %v3_12e60, i32* %r3.global-to-local, align 4
  %v4_12e60 = add i32 %v0_12e60, -8
  %v5_12e60 = inttoptr i32 %v4_12e60 to i32*
  %v6_12e60 = load i32, i32* %v5_12e60, align 4
  store i32 %v6_12e60, i32* %r4.global-to-local, align 4
  %v7_12e60 = add i32 %v0_12e60, -12
  %v8_12e60 = inttoptr i32 %v7_12e60 to i32*
  %v9_12e60 = load i32, i32* %v8_12e60, align 4
  store i32 %v9_12e60, i32* %r5.global-to-local, align 4
  %v10_12e60 = add i32 %v0_12e60, -16
  %v11_12e60 = inttoptr i32 %v10_12e60 to i32*
  %v12_12e60 = load i32, i32* %v11_12e60, align 4
  store i32 %v10_12e60, i32* %r1.global-to-local, align 4
  %v4_12e64 = udiv i32 %v12_12e60, 256
  %v5_12e64 = or i32 %v4_12e64, %v3_12e5c
  store i32 %v5_12e64, i32* %lr.global-to-local, align 4
  %v3_12e68 = mul i32 %v12_12e60, 16777216
  %v4_12e6c = udiv i32 %v9_12e60, 256
  %v5_12e6c = or i32 %v3_12e68, %v4_12e6c
  store i32 %v5_12e6c, i32* %ip.global-to-local, align 4
  %v3_12e70 = mul i32 %v9_12e60, 16777216
  %v4_12e74 = udiv i32 %v6_12e60, 256
  %v5_12e74 = or i32 %v3_12e70, %v4_12e74
  store i32 %v5_12e74, i32* %r5.global-to-local, align 4
  %v3_12e78 = mul i32 %v6_12e60, 16777216
  %v4_12e7c = udiv i32 %v3_12e60, 256
  %v5_12e7c = or i32 %v3_12e78, %v4_12e7c
  store i32 %v5_12e7c, i32* %r4.global-to-local, align 4
  %v1_12e80 = add i32 %v0_12e80, -16
  %v2_12e80 = inttoptr i32 %v1_12e80 to i32*
  store i32 %v5_12e7c, i32* %v2_12e80, align 4
  %v4_12e80 = add i32 %v0_12e80, -12
  %v5_12e80 = inttoptr i32 %v4_12e80 to i32*
  %v6_12e80 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_12e80, i32* %v5_12e80, align 4
  %v7_12e80 = add i32 %v0_12e80, -8
  %v8_12e80 = inttoptr i32 %v7_12e80 to i32*
  %v9_12e80 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12e80, i32* %v8_12e80, align 4
  %v10_12e80 = add i32 %v0_12e80, -4
  %v11_12e80 = inttoptr i32 %v10_12e80 to i32*
  %v12_12e80 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12e80, i32* %v11_12e80, align 4
  store i32 %v1_12e80, i32* %r0.global-to-local, align 4
  %v0_12e84 = load i32, i32* %r2.global-to-local, align 4
  %v2_12e84 = add i32 %v0_12e84, -16
  store i32 %v2_12e84, i32* %r2.global-to-local, align 4
  %v6_12e88 = icmp slt i32 %v0_12e84, 16
  br i1 %v6_12e88, label %dec_label_pc_12e8c, label %dec_label_pc_12e5c.dec_label_pc_12e5c_crit_edge

dec_label_pc_12e5c.dec_label_pc_12e5c_crit_edge:  ; preds = %dec_label_pc_12e5c
  %v0_12e5c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12e60.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12e8c:                               ; preds = %dec_label_pc_12e5c
  %v2_12e8c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12e8c, i32* @r4, align 4
  %v5_12e8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_12e8c, i32* @r5, align 4
  store i32 %v9_12e58, i32* @lr, align 4
  %v2_12e90 = add i32 %v0_12e84, -4
  store i32 %v2_12e90, i32* %r2.global-to-local, align 4
  %v4_12e90 = add i32 %v0_12e84, 2147483632
  %v5_12e90 = and i32 %v2_12e90, %v4_12e90
  %v6_12e90 = icmp slt i32 %v5_12e90, 0
  store i1 %v6_12e90, i1* %cpsr_v.global-to-local, align 1
  %v7_12e90 = icmp slt i32 %v2_12e90, 0
  store i1 %v7_12e90, i1* %cpsr_n.global-to-local, align 1
  %v8_12e90 = icmp eq i32 %v2_12e90, 0
  store i1 %v8_12e90, i1* %cpsr_z.global-to-local, align 1
  %v5_12e94 = icmp slt i32 %v2_12e84, -12
  br i1 %v5_12e94, label %dec_label_pc_12eb0, label %dec_label_pc_12e98

dec_label_pc_12e98:                               ; preds = %dec_label_pc_12e8c, %dec_label_pc_12e4c, %dec_label_pc_12e98
  %v1_12ea4 = phi i32 [ %v5_12ea4, %dec_label_pc_12e98 ], [ %v1_12e80, %dec_label_pc_12e8c ], [ %v0_12da830, %dec_label_pc_12e4c ]
  %v0_12e98 = load i32, i32* %r3.global-to-local, align 4
  %v3_12e98 = mul i32 %v0_12e98, 16777216
  store i32 %v3_12e98, i32* %ip.global-to-local, align 4
  %v0_12e9c = load i32, i32* %r1.global-to-local, align 4
  %v1_12e9c = add i32 %v0_12e9c, -4
  %v2_12e9c = inttoptr i32 %v1_12e9c to i32*
  %v3_12e9c = load i32, i32* %v2_12e9c, align 4
  store i32 %v3_12e9c, i32* %r3.global-to-local, align 4
  store i32 %v1_12e9c, i32* %r1.global-to-local, align 4
  %v4_12ea0 = udiv i32 %v3_12e9c, 256
  %v5_12ea0 = or i32 %v4_12ea0, %v3_12e98
  store i32 %v5_12ea0, i32* %ip.global-to-local, align 4
  %v2_12ea4 = add i32 %v1_12ea4, -4
  %v3_12ea4 = inttoptr i32 %v2_12ea4 to i32*
  store i32 %v5_12ea0, i32* %v3_12ea4, align 4
  %v4_12ea4 = load i32, i32* %r0.global-to-local, align 4
  %v5_12ea4 = add i32 %v4_12ea4, -4
  store i32 %v5_12ea4, i32* %r0.global-to-local, align 4
  %v0_12ea8 = load i32, i32* %r2.global-to-local, align 4
  %v2_12ea8 = add i32 %v0_12ea8, -4
  store i32 %v2_12ea8, i32* %r2.global-to-local, align 4
  %v6_12eac = icmp slt i32 %v0_12ea8, 4
  br i1 %v6_12eac, label %dec_label_pc_12eb0.loopexit, label %dec_label_pc_12e98

dec_label_pc_12eb0.loopexit:                      ; preds = %dec_label_pc_12e98
  %v4_12ea8 = sub i32 3, %v0_12ea8
  %v5_12ea8 = and i32 %v4_12ea8, %v0_12ea8
  %v6_12ea8 = icmp slt i32 %v5_12ea8, 0
  %v7_12ea8 = icmp slt i32 %v2_12ea8, 0
  store i1 %v6_12ea8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12ea8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12eb0

dec_label_pc_12eb0:                               ; preds = %dec_label_pc_12eb0.loopexit, %dec_label_pc_12e8c
  %v2_12d1c64 = phi i32 [ %v5_12ea4, %dec_label_pc_12eb0.loopexit ], [ %v1_12e80, %dec_label_pc_12e8c ]
  %v0_12d0c60 = phi i32 [ %v2_12ea8, %dec_label_pc_12eb0.loopexit ], [ %v2_12e90, %dec_label_pc_12e8c ]
  %v0_12eb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12eb0 = add i32 %v0_12eb0, 1
  store i32 %v1_12eb0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_12ea4, { 0, 2, 1 }
  uselistorder i32 %v3_12e98, { 1, 0 }
  uselistorder i32 %v2_12e90, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_12e80, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_12e60, { 1, 0 }
  uselistorder i32 %v3_12e5c, { 1, 0 }
  uselistorder i32 %v0_12e60, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12e80, { 3, 2, 1, 0 }
  uselistorder i32 %v5_12e38, { 0, 2, 1 }
  uselistorder i32 %v3_12e2c, { 1, 0 }
  uselistorder i32 %v2_12e24, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_12e14, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_12df4, { 1, 0 }
  uselistorder i32 %v3_12df0, { 1, 0 }
  uselistorder i32 %v0_12df4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12e14, { 3, 2, 1, 0 }
  uselistorder i32 %v5_12dcc, { 0, 2, 1 }
  uselistorder i32 %v3_12dc0, { 1, 0 }
  uselistorder i32 %v2_12db8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_12da8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_12d88, { 1, 0 }
  uselistorder i32 %v3_12d84, { 1, 0 }
  uselistorder i32 %v0_12d88, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12da8, { 3, 2, 1, 0 }
  uselistorder i1 %v5_12e50, { 2, 0, 1 }
  uselistorder i32 %v0_12d68, { 1, 0 }
  uselistorder i32 %v0_12e54, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_12da830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_12d58, { 2, 1, 0 }
  uselistorder i32 %v0_12d58, { 2, 0, 1 }
  uselistorder i32 %v2_12d50, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_12d50, { 1, 2, 0, 3 }
  uselistorder i32 %v0_12d50, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_12da831, { 2, 1, 0 }
  uselistorder i32 %v11_12d2c, { 1, 0 }
  uselistorder i32 %v7_12d2c, { 1, 0 }
  uselistorder i32 %v1_12d0c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_12d0c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_12d10, { 1, 0 }
  uselistorder i32 %v7_12d04, { 0, 2, 1 }
  uselistorder i32 %v10_12d00, { 1, 0 }
  uselistorder i32 %v9_12cf8, { 1, 0, 2 }
  uselistorder i32 %v6_12cf4, { 1, 0 }
  uselistorder i32 %v2_12cec, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_12cec, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_12cfc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_12ce0, { 0, 2, 1 }
  uselistorder i32 %v13_12cdc, { 1, 0 }
  uselistorder i32 %v4_12cd8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_12cd8, { 2, 0, 1 }
  uselistorder i32 %v6_12ce0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_12cd0, { 0, 2, 1 }
  uselistorder i32 %v16_12ccc, { 1, 0 }
  uselistorder i32 %v4_12cc8, { 1, 2, 0 }
  uselistorder i32 %v0_12cd8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_12cd0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_12cbc, { 0, 3, 2, 1 }
  uselistorder i32 %v10_12cb8, { 1, 0 }
  uselistorder i32 %v1_12cb4, { 1, 0 }
  uselistorder i32 %v10_12cb0, { 1, 0 }
  uselistorder i32 %v0_12cb0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12cb4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_12ca8, { 0, 2, 1 }
  uselistorder i32 %v2_12c9c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_12c9c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_12cb448, { 1, 2, 0 }
  uselistorder i32 %v1_12c94, { 2, 1, 0 }
  uselistorder i32 %v1_12c8c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_12c84, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_12c80, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_12c7c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_12c7c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_12c68, { 0, 2, 1 }
  uselistorder i32 %v3_12c5c, { 1, 0 }
  uselistorder i32 %v2_12c54, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_12c44, { 1, 0, 3, 2 }
  uselistorder i32 %v8_12c24, { 1, 0, 2 }
  uselistorder i32 %v5_12c24, { 1, 0, 2 }
  uselistorder i32 %v2_12c24, { 1, 0, 2 }
  uselistorder i32 %v3_12c20, { 1, 0 }
  uselistorder i32 %v0_12c24, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12c44, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_12bfc, { 0, 2, 1 }
  uselistorder i32 %v3_12bf0, { 1, 0 }
  uselistorder i32 %v2_12be8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_12bd8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_12bb8, { 1, 0, 2 }
  uselistorder i32 %v5_12bb8, { 1, 0, 2 }
  uselistorder i32 %v2_12bb8, { 1, 0, 2 }
  uselistorder i32 %v3_12bb4, { 1, 0 }
  uselistorder i32 %v0_12bb8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12bd8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_12b90, { 0, 2, 1 }
  uselistorder i32 %v3_12b84, { 1, 0 }
  uselistorder i32 %v2_12b7c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_12b6c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_12b4c, { 1, 0, 2 }
  uselistorder i32 %v5_12b4c, { 1, 0, 2 }
  uselistorder i32 %v2_12b4c, { 1, 0, 2 }
  uselistorder i32 %v3_12b48, { 1, 0 }
  uselistorder i32 %v0_12b4c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12b6c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_12c14, { 2, 0, 1 }
  uselistorder i32 %v0_12c18, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_12b6c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_12b1c, { 1, 0 }
  uselistorder i32 %v0_12b1c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_12b14, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_12b14, { 1, 2, 0, 3 }
  uselistorder i32 %v0_12b14, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_12b6c75, { 2, 1, 0 }
  uselistorder i32 %v1_12af4, { 1, 0, 2 }
  uselistorder i32 %v1_12acc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_12acc, { 1, 2, 0, 3 }
  uselistorder i32 %v8_12ab8, { 1, 0, 2 }
  uselistorder i32 %v6_12ab4, { 1, 0 }
  uselistorder i32 %v2_12aac, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_12aac, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_12abc, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_12aa4, { 0, 2, 1 }
  uselistorder i32 %v3_12aa4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_12aa4, { 1, 0 }
  uselistorder i1 %v1_12aa4, { 1, 0 }
  uselistorder i32 %v3_12aa0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_12a98, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_12a84, { 1, 2, 0 }
  uselistorder i32 %v12_12a78, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12a6c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12a70, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_12a60, { 0, 2, 1 }
  uselistorder i32 %v2_12a58, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_12a58, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_12a50, { 1, 0 }
  uselistorder i32 %v1_12a48, { 2, 1, 0 }
  uselistorder i32 %v2_12a40, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_12a40, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_12a30, { 1, 0 }
  uselistorder i32 %v1_12a30, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_12a30, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 7, 5, 13, 8, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 53, 54, 55, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 0, 24, 1, 26, 2, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 23, 24, 1, 0, 15, 17, 16, 18, 2, 20, 19, 25, 21, 8, 3, 9, 4, 22, 10, 5, 6, 11, 12, 7, 13, 14 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 18, 19, 20, 14 }
  uselistorder i32 65536, { 5, 4, 10, 6, 11, 7, 12, 8, 13, 9, 14, 15, 16, 20, 17, 21, 18, 22, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 60, 59, 61, 1, 62, 63, 2, 64, 0, 3, 65, 66, 67, 68, 69, 72, 70, 71, 73, 74, 75, 80, 81, 82, 83, 76, 77, 78, 79, 84, 87, 88, 85, 89, 86, 90, 91, 94, 95, 96, 92, 93, 97, 99, 98, 101, 102, 100, 103, 104, 105, 108, 109, 106, 110, 107, 111, 112, 115, 116, 117, 113, 114, 118, 138, 120, 119, 121, 123, 122, 125, 124, 126, 127, 129, 130, 131, 128, 132, 133, 135, 136, 137, 134 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 53, 50, 52, 51, 54, 56, 55, 58, 57, 60, 59, 62, 61, 63, 65, 64, 66, 72, 67, 73, 68, 74, 69, 75, 76, 70, 77, 71, 79, 78, 81, 80, 83, 82, 85, 84, 86, 87, 88, 92, 89, 93, 90, 94, 91, 95, 96, 97, 98, 101, 99, 102, 100, 103, 105, 104, 106, 107, 109, 108, 111, 110, 112, 114, 113, 115, 116, 117, 120, 118, 119, 122, 121, 123, 129, 124, 130, 125, 131, 126, 128, 132, 133, 134, 127, 135, 136, 142, 137, 143, 138, 144, 139, 141, 145, 146, 147, 140, 148 }
  uselistorder i32* @r5, { 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 186, 187, 188, 190, 568, 569, 570, 571, 572, 0, 573, 574, 191, 192, 193, 194, 195, 196, 453, 454, 455, 456, 457, 458, 459, 460, 490, 491, 492, 493, 494, 495, 504, 505, 506, 513, 514, 515, 516, 507, 508, 509, 510, 511, 512, 59, 60, 61, 197, 198, 4, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 13, 14, 109, 110, 111, 112, 113, 114, 15, 115, 42, 116, 117, 118, 3, 2, 119, 120, 16, 17, 18, 19, 20, 43, 10, 11, 12, 46, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 44, 45, 121, 122, 123, 124, 125, 51, 126, 127, 7, 128, 129, 130, 131, 140, 141, 142, 132, 133, 134, 135, 136, 137, 138, 139, 5, 52, 53, 54, 55, 56, 57, 58, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 1, 163, 164, 165, 166, 167, 168, 6, 169, 170, 171, 172, 173, 174, 175, 176, 210, 211, 212, 213, 214, 8, 215, 216, 217, 218, 219, 220, 221, 222, 9, 223, 224, 225, 226, 227, 228, 234, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 287, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 334, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 369, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 517, 518, 519, 520, 521, 522, 531, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 496, 499, 497, 498, 500, 501, 502, 503 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 12, 13, 14, 27, 28, 15, 16, 17, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23, 24, 0, 25, 26, 29, 30, 31, 32, 8, 33, 9, 34, 10, 35, 36, 37, 38, 39, 40, 41, 1, 42, 43, 44, 11, 45, 46, 47, 2, 48, 49, 50, 51, 52, 53, 54, 55, 56 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 4, 5, 2, 3, 1, 6, 7 }
  uselistorder i32 40, { 1, 7, 0, 4, 5, 6, 8, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2 }
  uselistorder i32 36, { 1, 5, 6, 3, 4, 0, 2 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2 }
  uselistorder i32 24, { 0, 69, 70, 33, 34, 1, 71, 72, 31, 32, 11, 37, 12, 38, 63, 39, 64, 40, 56, 35, 36, 59, 41, 13, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 55, 61, 57, 58, 65, 66, 67, 62, 68, 2, 73, 14, 15, 3, 74, 16, 17, 4, 75, 76, 77, 18, 19, 5, 20, 21, 22, 6, 23, 7, 8, 24, 78, 25, 9, 79, 80, 81, 26, 27, 84, 28, 10, 85, 29, 82, 30, 83 }
  uselistorder i32 16, { 31, 32, 33, 165, 34, 166, 167, 35, 168, 169, 36, 170, 171, 172, 173, 174, 175, 87, 88, 68, 69, 92, 89, 90, 91, 93, 23, 94, 95, 4, 5, 6, 7, 8, 22, 9, 10, 0, 11, 12, 46, 77, 47, 37, 51, 70, 71, 48, 72, 49, 73, 50, 74, 78, 80, 81, 82, 24, 67, 13, 14, 21, 65, 15, 83, 16, 52, 79, 53, 75, 76, 40, 39, 38, 84, 41, 85, 42, 54, 55, 86, 43, 56, 25, 96, 97, 98, 99, 26, 100, 101, 102, 103, 104, 105, 106, 29, 107, 108, 109, 58, 110, 44, 57, 111, 112, 59, 113, 114, 115, 17, 116, 117, 1, 60, 118, 119, 120, 61, 121, 122, 123, 124, 125, 2, 62, 126, 127, 18, 128, 66, 19, 129, 63, 130, 131, 132, 20, 30, 133, 64, 134, 135, 3, 45, 136, 137, 138, 139, 140, 141, 27, 142, 143, 144, 145, 147, 146, 148, 149, 151, 152, 153, 154, 155, 28, 156, 157, 158, 159, 160, 162, 161, 163, 164, 150 }
  uselistorder i32 20, { 101, 2, 102, 103, 0, 3, 104, 34, 35, 22, 23, 1, 36, 37, 38, 39, 16, 4, 24, 17, 25, 18, 26, 19, 27, 29, 5, 30, 6, 31, 21, 28, 32, 33, 40, 43, 41, 7, 42, 44, 45, 46, 47, 49, 50, 48, 8, 51, 52, 53, 54, 55, 56, 59, 60, 57, 9, 58, 61, 62, 63, 64, 65, 66, 69, 70, 67, 10, 68, 71, 72, 73, 74, 77, 78, 75, 11, 76, 79, 80, 81, 82, 83, 84, 87, 85, 20, 86, 88, 89, 90, 93, 13, 91, 12, 92, 94, 96, 99, 15, 97, 14, 98, 100, 95 }
  uselistorder i32 27, { 1, 0, 3, 2, 4 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 21, 22, 23, 54, 61, 7, 27, 2, 8, 25, 9, 24, 0, 10, 28, 11, 29, 12, 30, 26, 13, 14, 15, 31, 32, 33, 16, 34, 35, 36, 37, 3, 38, 39, 40, 41, 17, 42, 4, 43, 18, 44, 45, 5, 46, 47, 6, 48, 49, 50, 51, 52, 19, 53, 56, 57, 58, 59, 20, 60, 1, 55 }
  uselistorder i32 -8, { 15, 16, 17, 18, 19, 20, 14, 13, 6, 12, 11, 10, 9, 21, 22, 23, 24, 7, 25, 0, 28, 8, 26, 27, 5, 1, 3, 2, 4 }
  uselistorder i1 false, { 19, 20, 21, 30, 12, 18, 31, 32, 15, 16, 17, 33, 11, 34, 35, 0, 24, 23, 25, 22, 1, 3, 4, 27, 2, 10, 13, 29, 5, 6, 7, 26, 14, 8, 9, 28, 36, 37 }
  uselistorder i32 4, { 75, 66, 67, 5, 371, 68, 372, 51, 6, 7, 69, 373, 70, 374, 375, 376, 377, 71, 378, 379, 380, 381, 72, 382, 383, 384, 385, 386, 8, 387, 388, 389, 390, 391, 73, 392, 50, 393, 394, 395, 396, 397, 398, 9, 10, 74, 399, 231, 232, 167, 168, 233, 234, 235, 400, 401, 402, 403, 404, 117, 118, 119, 52, 120, 121, 345, 347, 346, 343, 344, 310, 311, 312, 313, 348, 349, 350, 351, 333, 334, 335, 352, 353, 122, 123, 124, 125, 126, 42, 11, 12, 236, 237, 238, 239, 240, 241, 13, 14, 58, 15, 16, 59, 354, 355, 165, 17, 18, 89, 76, 252, 242, 53, 171, 90, 172, 127, 173, 204, 205, 206, 189, 190, 49, 48, 207, 174, 175, 169, 170, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 91, 192, 193, 194, 191, 60, 208, 92, 195, 77, 93, 94, 19, 209, 20, 210, 211, 21, 22, 212, 213, 44, 214, 43, 219, 95, 221, 96, 222, 223, 220, 215, 97, 216, 217, 218, 196, 128, 198, 23, 199, 200, 197, 24, 201, 45, 98, 202, 203, 224, 56, 55, 54, 225, 99, 25, 26, 27, 28, 29, 30, 226, 46, 227, 47, 228, 229, 230, 0, 100, 101, 102, 103, 243, 129, 244, 245, 246, 247, 130, 131, 105, 248, 57, 31, 104, 250, 78, 251, 253, 132, 254, 255, 133, 134, 256, 106, 257, 79, 258, 259, 135, 136, 260, 137, 261, 262, 138, 139, 61, 263, 107, 264, 80, 265, 266, 267, 268, 269, 270, 108, 81, 271, 272, 140, 273, 274, 275, 276, 141, 142, 2, 277, 109, 278, 82, 279, 280, 281, 143, 282, 283, 144, 145, 3, 62, 284, 110, 286, 83, 287, 288, 289, 290, 146, 147, 291, 292, 293, 148, 294, 295, 111, 296, 4, 297, 84, 298, 112, 299, 300, 301, 149, 302, 303, 304, 305, 306, 150, 151, 113, 307, 63, 85, 308, 86, 309, 356, 357, 152, 358, 359, 360, 114, 361, 115, 362, 363, 364, 365, 153, 154, 116, 366, 64, 367, 87, 368, 88, 370, 155, 314, 315, 32, 156, 316, 317, 33, 157, 318, 319, 34, 158, 65, 320, 321, 35, 322, 159, 323, 324, 36, 160, 325, 326, 37, 161, 327, 328, 38, 162, 329, 330, 39, 163, 331, 332, 40, 336, 164, 337, 338, 339, 340, 41, 341, 342, 1, 369, 285, 249, 166 }
  uselistorder i32* @r2, { 86, 87, 27, 9, 28, 30, 29, 31, 32, 33, 34, 7, 88, 1, 89, 94, 95, 98, 90, 61, 65, 66, 69, 67, 68, 62, 63, 64, 49, 70, 17, 0, 96, 3, 97, 6, 35, 36, 37, 8, 10, 91, 92, 93, 71, 72, 73, 11, 74, 75, 76, 77, 2, 78, 79, 80, 81, 82, 83, 4, 38, 84, 44, 45, 42, 43, 46, 18, 12, 13, 14, 21, 22, 19, 20, 15, 16, 85, 23, 24, 25, 26, 39, 40, 41, 47, 48, 5, 51, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder label %dec_label_pc_12e98, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12e2c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12dc0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12d60, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_12cec, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_12cb0, { 1, 0 }
  uselistorder label %dec_label_pc_12c9c, { 1, 0 }
  uselistorder label %dec_label_pc_12c5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12bf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12b84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12b24, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_12a98, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12a58, { 1, 0 }
}

define i32 @function_12eb8(i32 %arg1) local_unnamed_addr {
dec_label_pc_12eb8:
  ret i32 %arg1
}

define i32 @function_12ec0() local_unnamed_addr {
dec_label_pc_12ec0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_12ec0 = load i32, i32* @r0, align 4
  %v2_12ec0 = icmp eq i32 %v0_12ec0, 0
  %v3_12ec4 = load i32, i32* @r4, align 4
  store i32 %v3_12ec4, i32* %stack_var_-20, align 4
  %v0_12ec8 = load i32, i32* @r1, align 4
  br i1 %v2_12ec0, label %dec_label_pc_12fa0, label %dec_label_pc_12edc.lr.ph

dec_label_pc_12edc:                               ; preds = %dec_label_pc_12edc.lr.ph, %dec_label_pc_12f60
  %v1_12f60 = phi i32 [ 0, %dec_label_pc_12edc.lr.ph ], [ %v5_12f60, %dec_label_pc_12f60 ]
  %v0_12f64 = phi i32 [ 1, %dec_label_pc_12edc.lr.ph ], [ %v1_12f64, %dec_label_pc_12f60 ]
  %v0_12ee4 = phi i32 [ %v0_12ec0, %dec_label_pc_12edc.lr.ph ], [ %v0_12ee425, %dec_label_pc_12f60 ]
  store i32 %v2_12ee0.pre, i32* @lr, align 4
  %v1_12ee4 = inttoptr i32 %v0_12ee4 to i8*
  %v2_12ee4 = load i8, i8* %v1_12ee4, align 1
  %v3_12ee4 = zext i8 %v2_12ee4 to i32
  %v3_12ee8 = mul nuw nsw i32 %v3_12ee4, 2
  %v4_12ee8 = add i32 %v3_12ee8, %v2_12ee0.pre
  %v5_12ee8 = inttoptr i32 %v4_12ee8 to i8*
  %v6_12ee8 = load i8, i8* %v5_12ee8, align 1
  %v1_12eec = and i8 %v6_12ee8, 8
  %v2_12eec = icmp eq i8 %v1_12eec, 0
  br i1 %v2_12eec, label %dec_label_pc_12fa0, label %dec_label_pc_12ef4

dec_label_pc_12ef4:                               ; preds = %dec_label_pc_12edc
  br label %dec_label_pc_12f14

dec_label_pc_12efc:                               ; preds = %dec_label_pc_12f14
  %v3_12f00 = mul i32 %v0_12f60, 10
  %v4_12f00 = add i32 %v3_12f14, %v3_12f00
  %v1_12f04 = add i32 %v4_12f00, -48
  %v8_12f0c = icmp sgt i32 %v1_12f04, 255
  br i1 %v8_12f0c, label %dec_label_pc_12fa0, label %dec_label_pc_12f10

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12efc
  %v1_12f10 = add i32 %v0_12f50, 1
  store i32 %v1_12f10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f14

dec_label_pc_12f14:                               ; preds = %dec_label_pc_12ef4, %dec_label_pc_12f10
  %v0_12f60 = phi i32 [ 0, %dec_label_pc_12ef4 ], [ %v1_12f04, %dec_label_pc_12f10 ]
  %v0_12f50 = phi i32 [ %v0_12ee4, %dec_label_pc_12ef4 ], [ %v1_12f10, %dec_label_pc_12f10 ]
  %v1_12f14 = inttoptr i32 %v0_12f50 to i8*
  %v2_12f14 = load i8, i8* %v1_12f14, align 1
  %v3_12f14 = zext i8 %v2_12f14 to i32
  %v2_12f18 = mul nuw nsw i32 %v3_12f14, 2
  %v2_12f1c = add i32 %v2_12f18, %v2_12ee0.pre
  %v3_12f20 = inttoptr i32 %v2_12f1c to i8*
  %v4_12f20 = load i8, i8* %v3_12f20, align 1
  %v6_12f20 = zext i8 %v4_12f20 to i32
  %v1_12f2c = and i32 %v6_12f20, 8
  %v2_12f2c = icmp eq i32 %v1_12f2c, 0
  br i1 %v2_12f2c, label %dec_label_pc_12f34, label %dec_label_pc_12efc

dec_label_pc_12f34:                               ; preds = %dec_label_pc_12f14
  %v8_12f38 = icmp sgt i32 %v0_12f64, 3
  br i1 %v8_12f38, label %dec_label_pc_12f4c, label %dec_label_pc_12f3c

dec_label_pc_12f3c:                               ; preds = %dec_label_pc_12f34
  %v7_12f3c = icmp eq i8 %v2_12f14, 46
  br i1 %v7_12f3c, label %dec_label_pc_12f44, label %dec_label_pc_12fa0

dec_label_pc_12f44:                               ; preds = %dec_label_pc_12f3c
  %v1_12f44 = add i32 %v0_12f50, 1
  store i32 %v1_12f44, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f60

dec_label_pc_12f4c:                               ; preds = %dec_label_pc_12f34
  %v2_12f4c = icmp eq i8 %v2_12f14, 0
  %v1_12f50 = add i32 %v0_12f50, 1
  store i32 %v1_12f50, i32* %r0.global-to-local, align 4
  br i1 %v2_12f4c, label %dec_label_pc_12f60, label %dec_label_pc_12f58

dec_label_pc_12f58:                               ; preds = %dec_label_pc_12f4c
  %v1_12f58 = and i32 %v6_12f20, 32
  %v2_12f58 = icmp eq i32 %v1_12f58, 0
  br i1 %v2_12f58, label %dec_label_pc_12fa0, label %dec_label_pc_12f60

dec_label_pc_12f60:                               ; preds = %dec_label_pc_12f58, %dec_label_pc_12f4c, %dec_label_pc_12f44
  %v0_12ee425 = phi i32 [ %v1_12f50, %dec_label_pc_12f58 ], [ %v1_12f50, %dec_label_pc_12f4c ], [ %v1_12f44, %dec_label_pc_12f44 ]
  %v4_12f60 = mul i32 %v1_12f60, 256
  %v5_12f60 = or i32 %v0_12f60, %v4_12f60
  %v1_12f64 = add nuw nsw i32 %v0_12f64, 1
  %v7_12f6c = icmp slt i32 %v1_12f64, 5
  br i1 %v7_12f6c, label %dec_label_pc_12edc, label %dec_label_pc_12f70

dec_label_pc_12edc.lr.ph:                         ; preds = %dec_label_pc_12ec0
  %v2_12ee0.pre = load i32, i32* bitcast (i32** @global_var_1b79c.469 to i32*), align 4
  br label %dec_label_pc_12edc

dec_label_pc_12f70:                               ; preds = %dec_label_pc_12f60
  %v2_12f70 = icmp eq i32 %v0_12ec8, 0
  br i1 %v2_12f70, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_12f70
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_12f70
  %v3_12f8c = call i32 @llvm.bswap.i32(i32 %v5_12f60)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_12f98 = inttoptr i32 %v0_12ec8 to i32*
  store i32 %v3_12f8c, i32* %v3_12f98, align 4
  %v2_12f9c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_12f9c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_12f9c = phi i32 [ 1, %bb ], [ %v17_12f9c.pre, %bb40 ]
  %v2_12f9c = phi i32 [ %v3_12ec4, %bb ], [ %v2_12f9c.pre, %bb40 ]
  store i32 %v2_12f9c, i32* @r4, align 4
  ret i32 %v17_12f9c

dec_label_pc_12fa0:                               ; preds = %dec_label_pc_12f3c, %dec_label_pc_12f58, %dec_label_pc_12edc, %dec_label_pc_12efc, %dec_label_pc_12ec0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_12ec4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_12ee0.pre, { 2, 1, 0 }
  uselistorder i32 %v1_12f64, { 1, 0 }
  uselistorder i32 %v0_12f50, { 0, 1, 3, 2 }
  uselistorder i32 %v3_12ec4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 16, 17, 20, 21, 22, 23, 24 }
  uselistorder i32 5, { 15, 25, 16, 6, 3, 18, 26, 4, 17, 27, 1, 19, 31, 20, 32, 0, 28, 29, 30, 21, 22, 23, 33, 34, 35, 36, 7, 37, 38, 39, 40, 8, 41, 42, 43, 44, 45, 46, 47, 48, 9, 49, 50, 24, 51, 10, 52, 53, 54, 11, 55, 56, 57, 58, 12, 59, 60, 61, 62, 63, 64, 65, 13, 66, 71, 72, 73, 74, 75, 76, 14, 77, 5, 67, 68, 2, 69, 70 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 60, 61, 65, 68, 69, 70, 66, 67, 71, 73, 72, 74, 75, 76, 423, 424, 77, 78, 79, 80, 81, 82, 83, 426, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 96, 101, 100, 99, 102, 419, 427, 107, 103, 106, 104, 105, 425, 108, 109, 110, 111, 421, 112, 113, 114, 115, 116, 422, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 129, 128, 131, 133, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 143, 145, 146, 147, 151, 157, 152, 148, 149, 153, 154, 155, 158, 150, 159, 160, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 172, 175, 177, 179, 178, 176, 180, 183, 182, 181, 190, 187, 184, 191, 188, 185, 186, 192, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 209, 211, 212, 213, 224, 219, 214, 225, 220, 226, 227, 221, 228, 222, 215, 216, 217, 229, 218, 230, 223, 231, 232, 233, 234, 235, 236, 237, 238, 240, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 255, 262, 259, 257, 263, 260, 258, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 279, 278, 281, 288, 284, 289, 290, 285, 282, 291, 286, 283, 292, 287, 293, 294, 295, 296, 297, 298, 299, 302, 303, 300, 304, 301, 306, 305, 307, 308, 309, 310, 311, 314, 315, 318, 316, 312, 319, 317, 313, 322, 321, 320, 418, 428, 323, 324, 330, 325, 331, 326, 327, 332, 328, 333, 334, 329, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 353, 355, 356, 360, 361, 368, 362, 363, 369, 364, 357, 358, 370, 365, 359, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 385, 387, 388, 392, 393, 400, 394, 395, 401, 396, 389, 390, 402, 397, 391, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420 }
  uselistorder i32 32, { 53, 39, 40, 37, 46, 47, 42, 43, 4, 3, 6, 5, 8, 7, 38, 36, 48, 49, 10, 9, 12, 11, 14, 13, 16, 15, 41, 18, 17, 20, 19, 21, 23, 22, 25, 24, 26, 27, 29, 28, 44, 45, 50, 51, 30, 52, 31, 32, 0, 33, 1, 2, 34, 35 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 3, { 34, 69, 70, 166, 71, 72, 73, 74, 75, 76, 80, 99, 167, 4, 152, 155, 156, 0, 77, 21, 78, 22, 157, 79, 35, 23, 25, 81, 38, 82, 2, 83, 84, 85, 86, 36, 19, 90, 91, 92, 93, 39, 94, 40, 95, 24, 96, 41, 97, 37, 98, 42, 87, 43, 88, 89, 44, 45, 46, 47, 48, 49, 50, 51, 1, 100, 52, 53, 54, 55, 56, 101, 57, 102, 103, 104, 105, 106, 107, 58, 108, 59, 109, 60, 26, 110, 111, 112, 113, 114, 6, 5, 61, 27, 115, 116, 117, 118, 119, 120, 121, 8, 7, 62, 122, 28, 123, 124, 125, 126, 127, 128, 129, 130, 10, 9, 63, 131, 29, 132, 133, 134, 135, 136, 12, 11, 64, 137, 30, 138, 139, 140, 141, 65, 142, 14, 13, 66, 143, 31, 144, 145, 146, 147, 148, 149, 16, 15, 67, 150, 32, 151, 158, 159, 160, 161, 162, 163, 18, 17, 68, 164, 33, 165, 20, 153, 3, 154 }
  uselistorder i32 8, { 91, 132, 24, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 25, 149, 69, 70, 71, 72, 76, 73, 74, 75, 150, 124, 123, 121, 122, 107, 108, 109, 125, 126, 127, 115, 116, 117, 6, 28, 29, 26, 27, 16, 17, 20, 21, 30, 151, 77, 78, 79, 80, 7, 8, 50, 18, 9, 10, 15, 11, 12, 13, 14, 51, 35, 52, 23, 56, 57, 58, 59, 61, 36, 62, 37, 63, 38, 64, 39, 65, 40, 66, 41, 67, 68, 60, 53, 54, 42, 55, 43, 44, 45, 81, 22, 49, 31, 82, 83, 84, 85, 86, 19, 87, 88, 89, 90, 3, 92, 93, 94, 4, 95, 96, 97, 98, 99, 100, 101, 5, 102, 103, 104, 105, 106, 128, 129, 130, 131, 110, 32, 111, 33, 112, 34, 113, 46, 114, 48, 118, 119, 47, 120, 0, 1, 2 }
  uselistorder i32 255, { 2, 6, 7, 3, 8, 4, 9, 5, 10, 0, 1 }
  uselistorder i32 10, { 9, 38, 39, 23, 24, 40, 0, 10, 3, 25, 29, 11, 28, 2, 31, 32, 26, 12, 33, 27, 34, 13, 35, 14, 36, 37, 30, 15, 1, 16, 17, 18, 4, 41, 42, 43, 44, 19, 20, 45, 46, 47, 48, 49, 5, 50, 51, 52, 6, 53, 54, 55, 21, 56, 7, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 62, 8, 68, 22 }
  uselistorder i8 0, { 4, 0, 17, 18, 1, 6, 19, 20, 21, 5, 22, 23, 24, 25, 26, 27, 2, 8, 7, 9, 30, 32, 29, 11, 31, 12, 33, 34, 28, 3, 35, 36, 37, 38, 39, 14, 40, 41, 44, 15, 42, 43, 13, 45, 46, 47, 48, 49, 50, 10, 51, 52, 53, 16, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 }
  uselistorder i32 2, { 4, 130, 242, 243, 55, 244, 245, 47, 246, 46, 247, 45, 133, 80, 81, 166, 82, 167, 83, 168, 248, 51, 84, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 131, 14, 15, 16, 17, 18, 86, 87, 85, 48, 49, 19, 62, 152, 88, 91, 135, 142, 63, 134, 90, 136, 64, 137, 65, 138, 66, 139, 67, 140, 68, 141, 69, 147, 143, 144, 145, 146, 57, 92, 153, 20, 21, 154, 155, 156, 93, 157, 52, 132, 158, 89, 159, 22, 94, 148, 149, 23, 95, 96, 97, 150, 151, 98, 102, 160, 100, 161, 101, 162, 99, 103, 163, 24, 25, 26, 104, 164, 58, 105, 106, 70, 107, 108, 59, 110, 111, 109, 71, 112, 113, 114, 165, 50, 54, 169, 170, 171, 230, 231, 172, 173, 174, 175, 176, 177, 178, 115, 179, 72, 180, 181, 182, 183, 184, 116, 73, 185, 186, 187, 188, 189, 190, 191, 117, 192, 74, 193, 194, 118, 195, 119, 120, 196, 197, 198, 199, 200, 201, 202, 203, 1, 27, 28, 29, 30, 31, 32, 121, 204, 75, 205, 206, 207, 208, 209, 2, 33, 34, 35, 36, 37, 38, 122, 76, 210, 211, 212, 213, 123, 214, 53, 215, 124, 216, 3, 39, 40, 41, 42, 43, 44, 125, 217, 77, 218, 219, 220, 221, 222, 223, 224, 225, 126, 226, 78, 227, 232, 233, 234, 127, 235, 128, 236, 237, 238, 239, 129, 240, 79, 241, 60, 228, 56, 61, 229 }
  uselistorder i32* @lr, { 79, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 128, 129, 130, 1, 131, 132, 133, 2, 134, 135, 136, 137, 138, 139, 140, 141, 33, 34, 142, 143, 144, 145, 146, 95, 96, 97, 98, 103, 104, 105, 106, 35, 36, 37, 38, 39, 19, 107, 4, 5, 108, 42, 43, 109, 6, 53, 54, 55, 56, 57, 44, 45, 46, 47, 48, 20, 21, 24, 25, 3, 28, 26, 27, 22, 23, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 110, 29, 30, 31, 32, 40, 41, 111, 112, 113, 49, 50, 51, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 114, 99, 100, 101, 102, 115, 116, 117, 82, 83, 84 }
  uselistorder i32* @r1, { 42, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 1, 82, 83, 21, 22, 24, 23, 6, 7, 84, 0, 85, 25, 26, 87, 48, 53, 54, 57, 55, 56, 49, 50, 51, 52, 47, 58, 86, 13, 5, 43, 27, 8, 59, 28, 3, 60, 29, 30, 35, 36, 14, 9, 10, 11, 16, 15, 12, 61, 17, 18, 19, 20, 31, 32, 33, 4, 34, 62, 63, 2, 37, 38, 39, 40, 41, 44, 45, 46, 64 }
  uselistorder label %dec_label_pc_12fa0, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_12f14, { 1, 0 }
}

define i32 @function_12fac(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fac:
  %v3_12fac = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12fb4 = call i32 @function_10a14()
  %v0_12fb8 = load i32, i32* @r4, align 4
  store i32 %v3_12fac, i32* @r4, align 4
  %v2_12fc0 = call i32 @function_10abc(i32 %v0_12fb4, i32 %v0_12fb8)
  ret i32 %v2_12fc0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_10abc, { 4, 6, 3, 2, 1, 0, 5 }
}

define i32 @function_12fc4(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fc4:
  %v1_12fc4 = add i32 %arg1, 28
  %v2_12fc4 = inttoptr i32 %v1_12fc4 to i32*
  %v3_12fc4 = load i32, i32* %v2_12fc4, align 4
  %v1_12fcc = add i32 %arg1, 44
  %v2_12fcc = inttoptr i32 %v1_12fcc to i32*
  %v3_12fcc = load i32, i32* %v2_12fcc, align 4
  store i32 %v3_12fc4, i32* @global_var_1b998.471, align 4
  store i32 %v3_12fcc, i32* @global_var_1b99c.473, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 26, 0, 16, 17, 5, 6, 25, 1, 7, 8, 9, 10, 11, 12, 13, 2, 4, 15, 14, 18, 19, 20, 21, 22, 23, 24, 3 }
}

define i32 @function_12fe8(i32* %arg1) local_unnamed_addr {
dec_label_pc_12fe8:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_12ff0 = call i32 @brk(i32* %arg1)
  %v3_12ff4 = icmp ult i32 %v2_12ff0, %tmp
  store i32 %v2_12ff0, i32* @global_var_1b85c.467, align 4
  br i1 %v3_12ff4, label %dec_label_pc_13008, label %dec_label_pc_13018

dec_label_pc_13008:                               ; preds = %dec_label_pc_12fe8
  %v0_13008 = call i32 @function_10f64()
  %v2_13010 = inttoptr i32 %v0_13008 to i32*
  store i32 12, i32* %v2_13010, align 4
  br label %dec_label_pc_13018

dec_label_pc_13018:                               ; preds = %dec_label_pc_12fe8, %dec_label_pc_13008
  %v0_13018 = phi i32 [ 0, %dec_label_pc_12fe8 ], [ -1, %dec_label_pc_13008 ]
  ret i32 %v0_13018

; uselistorder directives
  uselistorder i32 12, { 17, 11, 114, 115, 116, 118, 119, 120, 121, 12, 117, 122, 123, 124, 125, 126, 127, 128, 65, 66, 32, 33, 67, 18, 19, 104, 105, 106, 0, 101, 107, 8, 108, 9, 102, 4, 103, 20, 21, 6, 68, 69, 22, 70, 71, 23, 13, 35, 36, 48, 49, 50, 37, 34, 38, 39, 40, 41, 42, 43, 45, 46, 44, 51, 52, 53, 10, 54, 55, 57, 58, 59, 24, 60, 25, 61, 26, 62, 27, 63, 5, 64, 56, 7, 47, 109, 72, 28, 73, 29, 74, 30, 75, 31, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 14, 87, 88, 89, 90, 15, 91, 92, 93, 94, 95, 96, 16, 97, 98, 99, 100, 110, 111, 112, 113, 1, 2, 3 }
  uselistorder i32 ()* @function_10f64, { 19, 55, 37, 36, 9, 8, 7, 6, 35, 34, 33, 5, 56, 32, 31, 17, 18, 54, 53, 16, 15, 14, 26, 24, 52, 38, 51, 50, 23, 25, 49, 30, 29, 28, 48, 13, 4, 3, 47, 46, 27, 22, 45, 2, 11, 44, 43, 10, 21, 12, 1, 0, 42, 41, 40, 39, 20 }
  uselistorder i32* @global_var_1b85c.467, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13018, { 1, 0 }
}

define i32 @function_13024(i32 %arg1) local_unnamed_addr {
dec_label_pc_13024:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13028 = load i32, i32* @global_var_1b628.429, align 4
  %v7_1302c = icmp eq i32 %v3_13028, -1
  %v3_13030 = load i32, i32* @r4, align 4
  store i32 %v3_13030, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1b628.429 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1302c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_13024
  store i32 %v3_13030, i32* %r4.global-to-local, align 4
  %v9_13038 = load i32, i32* @r0, align 4
  ret i32 %v9_13038

.preheader:                                       ; preds = %dec_label_pc_13024, %.preheader
  %v0_13040 = phi i32 [ %v3_13044, %.preheader ], [ %v3_13028, %dec_label_pc_13024 ]
  call void @__pseudo_branch(i32 %v0_13040)
  %v0_13044 = load i32, i32* %r4.global-to-local, align 4
  %v1_13044 = add i32 %v0_13044, -4
  %v2_13044 = inttoptr i32 %v1_13044 to i32*
  %v3_13044 = load i32, i32* %v2_13044, align 4
  store i32 %v1_13044, i32* %r4.global-to-local, align 4
  %v3_13048 = icmp eq i32 %v3_13044, -1
  br i1 %v3_13048, label %dec_label_pc_13050, label %.preheader

dec_label_pc_13050:                               ; preds = %.preheader
  %v2_13050 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13050, i32* %r4.global-to-local, align 4
  %v8_13050 = load i32, i32* @r0, align 4
  ret i32 %v8_13050

; uselistorder directives
  uselistorder i32 %v3_13044, { 1, 0 }
  uselistorder i32 %v3_13028, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 44, 15, 45, 46, 47, 3, 16, 17, 18, 48, 49, 50, 4, 19, 20, 21, 51, 52, 53, 5, 22, 23, 54, 14, 13, 55, 56, 57, 12, 11, 10, 9, 24, 25, 26, 27, 28, 0, 29, 1, 30, 2, 58, 8, 31, 35, 36, 42, 37, 32, 33, 38, 39, 40, 41, 43, 7, 6, 34 }
  uselistorder i32 -1, { 150, 0, 91, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 151, 92, 228, 93, 265, 94, 250, 251, 95, 288, 96, 289, 97, 290, 98, 291, 139, 87, 252, 253, 99, 254, 255, 100, 292, 1, 152, 2, 101, 256, 257, 153, 154, 155, 140, 156, 3, 4, 86, 75, 76, 157, 158, 159, 84, 229, 160, 230, 5, 6, 102, 266, 103, 267, 104, 268, 105, 260, 106, 262, 107, 231, 108, 249, 109, 232, 110, 233, 111, 263, 112, 261, 113, 234, 114, 149, 115, 161, 116, 235, 117, 269, 118, 293, 294, 119, 236, 120, 237, 121, 258, 122, 259, 123, 238, 124, 295, 125, 271, 126, 239, 127, 240, 128, 272, 129, 264, 130, 270, 131, 296, 88, 297, 162, 163, 164, 165, 166, 167, 168, 169, 7, 8, 9, 132, 133, 10, 170, 15, 171, 241, 14, 172, 90, 89, 242, 11, 173, 222, 135, 223, 225, 226, 174, 175, 176, 134, 224, 16, 177, 79, 17, 178, 179, 18, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 227, 12, 200, 13, 201, 202, 19, 203, 204, 136, 243, 205, 20, 206, 244, 80, 77, 78, 21, 22, 207, 85, 23, 24, 25, 26, 27, 137, 208, 30, 141, 245, 29, 143, 246, 28, 142, 247, 31, 32, 144, 248, 33, 34, 35, 36, 37, 209, 38, 81, 39, 40, 42, 210, 138, 41, 82, 43, 44, 45, 46, 47, 48, 49, 211, 50, 145, 51, 52, 54, 212, 53, 55, 56, 57, 58, 213, 59, 60, 61, 214, 62, 63, 64, 215, 65, 66, 67, 68, 69, 216, 70, 71, 72, 217, 73, 74, 83, 218, 219, 220, 221, 146, 147, 148 }
  uselistorder i32* @global_var_1b628.429, { 1, 0 }
  uselistorder i32 1, { 481, 188, 321, 346, 823, 824, 825, 826, 827, 333, 482, 289, 892, 324, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 485, 484, 483, 275, 276, 279, 278, 274, 273, 277, 282, 280, 272, 281, 486, 225, 224, 220, 222, 221, 223, 226, 219, 642, 14, 11, 13, 12, 487, 15, 488, 133, 134, 489, 16, 214, 490, 269, 491, 121, 492, 268, 493, 294, 742, 743, 494, 299, 295, 300, 296, 297, 301, 298, 744, 745, 746, 382, 161, 162, 158, 160, 159, 495, 284, 496, 21, 0, 500, 499, 498, 497, 20, 19, 383, 501, 186, 187, 334, 384, 502, 264, 503, 747, 508, 507, 506, 505, 504, 140, 141, 143, 144, 142, 385, 509, 905, 335, 512, 511, 510, 292, 293, 513, 203, 204, 202, 205, 7, 8, 9, 10, 514, 138, 139, 137, 136, 515, 516, 266, 265, 517, 336, 870, 518, 179, 180, 386, 387, 320, 522, 521, 520, 519, 120, 119, 325, 523, 216, 524, 217, 525, 59, 526, 218, 527, 201, 528, 29, 529, 229, 530, 47, 531, 231, 532, 232, 533, 93, 534, 76, 535, 643, 644, 645, 646, 647, 648, 649, 906, 80, 81, 77, 78, 79, 536, 388, 389, 537, 166, 165, 167, 164, 352, 748, 538, 135, 353, 540, 539, 31, 30, 541, 228, 542, 100, 543, 94, 95, 544, 45, 545, 227, 546, 96, 547, 97, 548, 251, 46, 549, 230, 550, 234, 551, 283, 552, 285, 553, 302, 554, 233, 267, 261, 354, 704, 705, 355, 871, 872, 306, 873, 749, 750, 751, 316, 752, 557, 556, 555, 57, 54, 49, 50, 53, 51, 52, 48, 55, 56, 326, 768, 769, 327, 770, 559, 558, 291, 290, 753, 754, 755, 390, 560, 92, 91, 90, 89, 874, 337, 338, 1, 381, 875, 561, 248, 246, 249, 250, 247, 673, 675, 674, 391, 756, 271, 270, 876, 757, 758, 759, 98, 99, 877, 562, 263, 793, 794, 563, 184, 183, 182, 181, 185, 771, 772, 564, 200, 199, 198, 197, 392, 652, 393, 653, 356, 654, 655, 706, 656, 670, 401, 650, 651, 402, 657, 340, 403, 404, 399, 658, 659, 400, 660, 661, 398, 662, 663, 397, 664, 665, 396, 666, 667, 395, 668, 669, 394, 671, 672, 707, 405, 708, 406, 709, 711, 712, 710, 713, 407, 714, 641, 339, 717, 715, 408, 716, 719, 409, 720, 721, 722, 347, 723, 724, 341, 730, 731, 317, 410, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 237, 235, 239, 242, 244, 245, 243, 236, 238, 241, 240, 725, 726, 411, 727, 728, 412, 729, 579, 213, 212, 207, 211, 210, 209, 206, 208, 718, 413, 581, 580, 287, 288, 286, 676, 677, 678, 679, 680, 681, 682, 307, 315, 683, 684, 342, 308, 685, 686, 687, 688, 309, 314, 689, 690, 343, 310, 691, 414, 693, 694, 415, 695, 692, 696, 351, 697, 328, 700, 701, 698, 699, 312, 311, 313, 702, 416, 703, 588, 587, 476, 586, 585, 584, 475, 583, 582, 61, 62, 60, 66, 63, 69, 65, 70, 68, 64, 67, 589, 163, 878, 591, 590, 176, 177, 175, 174, 173, 172, 169, 171, 178, 170, 168, 592, 419, 357, 732, 733, 358, 734, 417, 418, 420, 735, 736, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 604, 603, 602, 601, 600, 599, 598, 597, 596, 480, 595, 594, 593, 71, 73, 72, 75, 74, 432, 318, 433, 605, 436, 435, 434, 737, 607, 606, 738, 608, 437, 438, 439, 739, 740, 440, 344, 741, 319, 441, 612, 611, 610, 609, 157, 156, 765, 3, 760, 442, 761, 2, 762, 348, 763, 322, 323, 764, 766, 349, 767, 617, 616, 615, 614, 477, 478, 613, 879, 359, 880, 360, 881, 4, 882, 5, 6, 773, 774, 775, 776, 777, 778, 779, 780, 350, 781, 782, 783, 784, 443, 785, 444, 786, 445, 787, 788, 789, 790, 791, 620, 619, 618, 123, 124, 125, 130, 131, 126, 132, 127, 128, 122, 129, 795, 796, 797, 798, 799, 446, 447, 622, 621, 255, 253, 252, 254, 258, 259, 260, 257, 256, 800, 801, 802, 448, 803, 804, 805, 806, 807, 808, 449, 809, 450, 362, 361, 451, 810, 623, 189, 191, 193, 194, 196, 195, 192, 190, 811, 812, 452, 813, 453, 454, 365, 363, 364, 479, 624, 17, 18, 814, 815, 329, 816, 817, 818, 819, 455, 820, 330, 456, 457, 821, 366, 822, 625, 147, 150, 145, 146, 151, 152, 155, 153, 149, 154, 148, 828, 829, 830, 831, 832, 458, 833, 459, 368, 367, 460, 835, 461, 836, 626, 103, 105, 107, 106, 104, 102, 101, 837, 838, 839, 840, 841, 842, 843, 462, 844, 463, 845, 464, 373, 372, 465, 846, 369, 847, 370, 848, 371, 849, 631, 630, 629, 628, 627, 24, 25, 27, 26, 22, 28, 23, 850, 851, 852, 853, 854, 855, 466, 376, 375, 467, 856, 374, 857, 632, 33, 34, 35, 39, 38, 40, 37, 32, 36, 883, 884, 885, 886, 887, 888, 468, 379, 378, 469, 889, 377, 890, 637, 636, 635, 634, 633, 111, 110, 109, 114, 115, 118, 116, 108, 113, 117, 112, 858, 380, 470, 638, 42, 43, 44, 41, 859, 860, 471, 345, 472, 863, 473, 474, 864, 861, 862, 865, 866, 867, 868, 331, 869, 332, 86, 83, 85, 84, 88, 82, 87, 891, 215, 834, 262, 792, 58, 639, 640, 305, 304, 303 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_13058() local_unnamed_addr {
dec_label_pc_13058:
  %v5_1305c = load i32, i32* @r0, align 4
  ret i32 %v5_1305c

; uselistorder directives
  uselistorder i32* @r0, { 7, 22, 23, 104, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 67, 68, 70, 69, 28, 152, 153, 33, 34, 35, 36, 20, 6, 9, 10, 71, 72, 29, 154, 155, 157, 18, 15, 115, 19, 114, 110, 31, 111, 21, 112, 116, 156, 44, 11, 73, 74, 75, 76, 30, 77, 78, 79, 80, 12, 158, 24, 17, 45, 8, 117, 16, 118, 119, 25, 81, 120, 13, 82, 14, 83, 84, 0, 37, 46, 47, 38, 39, 40, 48, 51, 52, 53, 54, 55, 1, 49, 50, 41, 42, 43, 121, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 85, 86, 87, 88, 89, 90, 91, 3, 92, 93, 94, 95, 96, 97, 98, 122, 123, 2, 99, 100, 101, 102, 103, 105, 107, 108, 109, 124, 125, 113, 106, 5, 4, 26, 27, 32 }
}

define i32 @function_13060() local_unnamed_addr {
entry:
  %v3_13064 = load i32, i32* @r4, align 4
  %v0_1306c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_13064)
  ret i32 %v0_1306c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 97, 0, 693, 694, 695, 696, 99, 98, 697, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 828, 829, 840, 841, 842, 843, 844, 845, 846, 847, 31, 848, 849, 850, 851, 852, 32, 853, 854, 855, 33, 856, 857, 858, 34, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 874, 875, 886, 887, 888, 889, 890, 891, 892, 893, 35, 894, 895, 896, 897, 898, 36, 899, 900, 901, 902, 903, 37, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 586, 587, 227, 588, 228, 491, 760, 761, 762, 763, 589, 590, 591, 917, 918, 919, 920, 229, 592, 1, 593, 594, 595, 921, 922, 923, 100, 924, 65, 925, 63, 64, 926, 927, 928, 230, 932, 231, 943, 945, 420, 185, 946, 232, 944, 233, 234, 2, 929, 930, 101, 596, 213, 597, 237, 215, 214, 598, 599, 600, 601, 236, 603, 604, 235, 605, 931, 239, 933, 240, 216, 934, 935, 937, 938, 238, 766, 768, 769, 41, 186, 770, 767, 764, 765, 3, 733, 736, 734, 735, 187, 4, 773, 771, 772, 188, 102, 737, 738, 739, 740, 742, 743, 241, 5, 744, 6, 780, 781, 103, 774, 775, 776, 777, 778, 779, 7, 8, 602, 492, 493, 494, 242, 9, 243, 782, 783, 416, 784, 417, 678, 709, 495, 578, 496, 497, 710, 679, 498, 698, 947, 948, 56, 606, 244, 607, 608, 609, 610, 245, 611, 612, 613, 614, 615, 616, 617, 499, 785, 936, 500, 501, 618, 645, 502, 418, 939, 68, 940, 821, 503, 504, 822, 745, 786, 941, 942, 10, 505, 84, 506, 507, 182, 181, 421, 69, 70, 71, 72, 432, 422, 43, 42, 85, 508, 509, 510, 511, 513, 512, 11, 787, 788, 184, 183, 423, 73, 74, 75, 76, 433, 424, 45, 44, 40, 52, 789, 434, 790, 791, 792, 77, 793, 794, 795, 796, 797, 104, 798, 425, 435, 426, 427, 799, 436, 92, 105, 619, 620, 621, 78, 622, 623, 624, 222, 46, 106, 246, 514, 66, 625, 626, 801, 800, 802, 803, 38, 107, 804, 110, 109, 108, 223, 224, 225, 112, 111, 113, 247, 627, 628, 114, 805, 806, 93, 115, 629, 116, 515, 117, 664, 665, 118, 646, 647, 648, 450, 428, 516, 86, 517, 518, 451, 452, 448, 437, 254, 449, 471, 472, 453, 454, 119, 120, 455, 456, 457, 458, 438, 252, 459, 460, 439, 253, 461, 462, 440, 251, 463, 464, 441, 250, 465, 466, 442, 249, 467, 474, 443, 248, 468, 473, 469, 60, 47, 94, 95, 470, 419, 519, 255, 520, 190, 521, 256, 522, 525, 526, 122, 189, 523, 524, 257, 258, 527, 528, 217, 529, 530, 444, 57, 259, 532, 533, 534, 535, 536, 537, 538, 198, 197, 539, 260, 540, 79, 541, 542, 96, 543, 431, 544, 545, 546, 430, 547, 548, 549, 121, 261, 262, 550, 553, 554, 555, 556, 557, 123, 551, 124, 552, 12, 125, 531, 199, 475, 476, 477, 62, 48, 478, 61, 49, 479, 480, 481, 482, 483, 484, 263, 485, 486, 488, 126, 487, 58, 489, 14, 13, 490, 807, 808, 558, 559, 264, 560, 562, 127, 563, 564, 565, 566, 567, 568, 569, 218, 265, 570, 59, 266, 571, 561, 15, 572, 200, 573, 267, 574, 575, 576, 577, 268, 429, 581, 445, 226, 129, 128, 192, 269, 579, 580, 191, 582, 583, 584, 50, 585, 130, 131, 270, 67, 630, 631, 632, 633, 195, 634, 635, 636, 194, 637, 638, 639, 640, 89, 641, 643, 642, 87, 88, 132, 193, 202, 204, 203, 201, 271, 644, 219, 220, 221, 90, 133, 809, 53, 134, 649, 650, 80, 81, 54, 135, 136, 137, 205, 651, 91, 652, 653, 654, 196, 655, 138, 656, 657, 272, 658, 659, 660, 139, 140, 661, 141, 663, 82, 83, 55, 142, 143, 206, 666, 667, 668, 669, 144, 670, 671, 672, 145, 147, 146, 207, 674, 673, 148, 675, 676, 149, 677, 680, 154, 274, 681, 152, 153, 150, 151, 682, 683, 155, 684, 275, 276, 685, 273, 686, 156, 158, 157, 159, 688, 689, 687, 690, 16, 17, 18, 19, 20, 691, 160, 692, 161, 162, 208, 700, 699, 701, 703, 704, 702, 21, 22, 23, 24, 25, 705, 163, 708, 711, 712, 713, 51, 164, 166, 165, 209, 715, 714, 277, 716, 718, 719, 720, 721, 278, 722, 26, 27, 28, 717, 29, 30, 723, 167, 724, 725, 168, 170, 169, 210, 728, 726, 727, 279, 730, 729, 731, 171, 732, 810, 172, 174, 173, 211, 813, 812, 811, 280, 815, 814, 816, 175, 819, 212, 741, 281, 746, 747, 176, 748, 749, 750, 751, 177, 752, 282, 753, 754, 39, 755, 756, 757, 758, 759, 817, 178, 818, 706, 179, 707, 180, 662, 820, 446, 447, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963 }
  uselistorder i32* @r4, { 34, 587, 591, 592, 595, 596, 395, 396, 397, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 188, 71, 531, 532, 189, 613, 614, 615, 616, 617, 618, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 619, 620, 6, 621, 622, 623, 624, 638, 639, 640, 641, 32, 642, 30, 633, 634, 635, 636, 637, 625, 626, 627, 208, 209, 210, 211, 212, 213, 214, 215, 628, 629, 632, 533, 534, 535, 492, 7, 493, 494, 495, 8, 496, 9, 497, 498, 511, 10, 11, 512, 513, 514, 515, 516, 517, 536, 537, 12, 545, 546, 538, 539, 540, 541, 542, 543, 544, 72, 73, 74, 75, 76, 77, 547, 548, 549, 550, 551, 552, 350, 351, 431, 432, 78, 79, 174, 175, 80, 81, 82, 83, 433, 434, 352, 353, 84, 85, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 86, 87, 553, 554, 630, 631, 5, 88, 89, 90, 91, 234, 235, 263, 264, 92, 93, 589, 590, 94, 95, 593, 594, 518, 519, 555, 556, 236, 237, 96, 97, 98, 99, 238, 239, 240, 241, 242, 557, 558, 559, 100, 101, 102, 302, 303, 304, 265, 266, 267, 35, 36, 13, 103, 104, 105, 37, 106, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 122, 123, 124, 131, 132, 133, 134, 135, 136, 1, 137, 125, 126, 127, 128, 129, 130, 114, 115, 116, 117, 118, 49, 50, 51, 52, 53, 54, 55, 56, 14, 57, 58, 59, 60, 61, 62, 63, 64, 0, 65, 66, 67, 68, 69, 70, 560, 561, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 15, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 31, 180, 181, 182, 183, 184, 185, 186, 2, 187, 243, 244, 245, 3, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 269, 270, 271, 272, 281, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 4, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 16, 329, 17, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 18, 368, 19, 369, 20, 370, 21, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 398, 399, 400, 22, 401, 23, 402, 24, 403, 25, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 453, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 26, 473, 27, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 562, 563, 564, 28, 565, 29, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 586, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 520, 524, 521, 522, 523, 525, 526, 527, 528, 529, 530, 581, 582, 583, 410, 411, 412, 33, 588 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
