source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1b00c.5 = global i32 0
@global_var_1b01c.6 = global i32* @global_var_1b00c.5
@global_var_1b17c.12 = global i32 0
@global_var_ca54.18 = constant i32 -382906384
@global_var_10f20.20 = constant i32 -481296384
@global_var_1b198.24 = global i32 0
@global_var_ff00.25 = constant i32 76272
@global_var_85dc.26 = constant i32 -352321555
@global_var_b9c0.32 = constant i32 -382906384
@global_var_bec0.34 = constant i32 -382906384
@global_var_affc.36 = constant i32 -382906384
@global_var_a880.38 = constant i32 -382906384
@global_var_a0c0.40 = constant i32 -382906384
@global_var_97b0.42 = constant i32 -382906384
@global_var_9078.44 = constant i32 -382906384
@global_var_88d0.46 = constant i32 -382906384
@global_var_1b230.48 = global i32 0
@global_var_c7b4.59 = constant i32 -382910448
@global_var_1b028.61 = global i32 65936
@global_var_1b238.65 = local_unnamed_addr global i32 0
@global_var_1b237.66 = local_unnamed_addr global i32 0
@global_var_1b236.67 = local_unnamed_addr global i32 0
@global_var_1b020.69 = global i32 -1
@global_var_1b19c.74 = global i32 0
@global_var_1b235.78 = local_unnamed_addr global i32 0
@global_var_123d4.82 = constant i32 10
@global_var_1b024.84 = global i32 -1
@global_var_10640.88 = constant i32 -382910448
@global_var_10190.89 = constant i32 -382910224
@global_var_123d8.92 = constant i32 16777216
@global_var_1b1a4.94 = global i32 0
@global_var_1b1b0.96 = global i32 0
@global_var_1b1a8.98 = global i32 0
@global_var_1b1ac.100 = global i32 0
@global_var_1b24c.110 = global i32 0
@global_var_1b1e8.112 = global i32 0
@global_var_1b1b4.114 = global i32 0
@global_var_1b1e0.116 = global i32 0
@global_var_1b244.124 = global i32 0
@global_var_1b248.126 = global i32 0
@global_var_1b1bb.129 = local_unnamed_addr global i32 0
@global_var_1b1ba.130 = local_unnamed_addr global i32 0
@global_var_1b1cc.132 = global i32 0
@global_var_1b1c0.134 = local_unnamed_addr global i32 0
@global_var_1b1bd.135 = local_unnamed_addr global i32 0
@global_var_1b1cd.136 = local_unnamed_addr global i32 0
@global_var_1b1cf.137 = local_unnamed_addr global i32 0
@global_var_1b1c1.138 = local_unnamed_addr global i32 0
@global_var_1b1bc.139 = local_unnamed_addr global i32 0
@global_var_1b1ce.140 = local_unnamed_addr global i32 0
@global_var_1b1db.142 = local_unnamed_addr global i32 0
@global_var_1b1da.143 = local_unnamed_addr global i32 0
@global_var_12754.145 = constant [5 x i8] c"PMMV\00"
@global_var_128b0.147 = constant i32 0
@global_var_128f8.149 = constant [6 x i8] c"CFOKL\00"
@global_var_123e0.151 = constant i32 387006810
@global_var_123e8.153 = constant [6 x i8] c"TKXZT\00"
@global_var_123f0.155 = constant i32 437918234
@global_var_123f8.157 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_12400.159 = constant [8 x i8] c"FGDCWNV\00"
@global_var_12408.161 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_12414.163 = constant i32 370216979
@global_var_1241c.165 = constant i32 269555223
@global_var_12424.167 = constant [8 x i8] c"QWRRMPV\00"
@global_var_12830.169 = constant i32 370216979
@global_var_1242c.171 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_12438.173 = constant i32 370216979
@global_var_12440.175 = constant [5 x i8] c"WQGP\00"
@global_var_12448.177 = constant [5 x i8] c"RCQQ\00"
@global_var_12450.179 = constant i32 1263486531
@global_var_125a4.181 = constant i32 320017171
@global_var_1245c.183 = constant [9 x i8] c"QOACFOKL\00"
@global_var_12468.185 = constant i32 336860180
@global_var_12470.187 = constant i32 324292169
@global_var_12478.189 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_12488.191 = constant [7 x i8] c"OGKLQO\00"
@global_var_12490.193 = constant [4 x i8] c"@WJ\00"
@global_var_12494.195 = constant [7 x i8] c"RW@NKA\00"
@global_var_1249c.197 = constant [8 x i8] c"QGPTKAG\00"
@global_var_124a4.199 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_124b0.201 = constant [6 x i8] c"EWGQV\00"
@global_var_124b8.203 = constant i32 1263486531
@global_var_124c0.205 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_124d0.207 = constant [5 x i8] c"W@LV\00"
@global_var_124d8.209 = constant i32 324292169
@global_var_124e0.211 = constant i32 390551160
@global_var_124e8.213 = constant i32 387009354
@global_var_124f0.215 = constant [6 x i8] c"HT@XF\00"
@global_var_124f8.217 = constant [5 x i8] c"CLIM\00"
@global_var_12500.219 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_12508.221 = constant [9 x i8] c"AJCLEGOG\00"
@global_var_12514.223 = constant i32 1867011861
@global_var_12524.225 = constant i32 1867011861
@global_var_12534.227 = constant [7 x i8] c"Q[QVGO\00"
@global_var_1253c.229 = constant [5 x i8] c"KIU@\00"
@global_var_12544.231 = constant [9 x i8] c"FPGCO@MZ\00"
@global_var_12550.233 = constant [8 x i8] c"PGCNVGI\00"
@global_var_12558.235 = constant i32 303174162
@global_var_12564.237 = constant i32 303174162
@global_var_1256c.239 = constant i32 320017171
@global_var_12574.241 = constant i32 1263486531
@global_var_1240c.243 = constant [5 x i8] c"VGAJ\00"
@global_var_12580.245 = constant i32 454761243
@global_var_1258c.247 = constant [6 x i8] c"oGKLQ\00"
@global_var_12594.249 = constant [4 x i8] c"hta\00"
@global_var_12598.251 = constant i32 319820054
@global_var_125a0.253 = constant i32 320017171
@global_var_125ac.255 = constant [7 x i8] c"WVQVCP\00"
@global_var_125b4.257 = constant [9 x i8] c"XMMOCFQN\00"
@global_var_125c0.259 = constant i32 1263486531
@global_var_125c8.261 = constant i32 303059531
@global_var_125d0.263 = constant i32 303125067
@global_var_125d8.265 = constant i32 303452747
@global_var_125e0.267 = constant [7 x i8] c"@KLVGA\00"
@global_var_125e8.269 = constant [8 x i8] c"VQWLCOK\00"
@global_var_125f0.271 = constant i32 323043395
@global_var_125f8.273 = constant i32 319951888
@global_var_12600.275 = constant [7 x i8] c"Q[LLGV\00"
@global_var_12608.277 = constant [9 x i8] c"@C[CLFQN\00"
@global_var_12614.279 = constant [6 x i8] c"SWQGP\00"
@global_var_1270c.281 = constant i32 1118227
@global_var_1261c.283 = constant i32 370216979
@global_var_12624.285 = constant [8 x i8] c"oCLCEGP\00"
@global_var_1262c.287 = constant [4 x i8] c"CFO\00"
@global_var_12630.289 = constant [8 x i8] c"OCLCEGP\00"
@global_var_12638.291 = constant [7 x i8] c"DPKGLF\00"
@global_var_12640.293 = constant [4 x i8] c"CRA\00"
@global_var_12644.295 = constant i32 1263421261
@global_var_12650.297 = constant [5 x i8] c"VKLK\00"
@global_var_12658.299 = constant [7 x i8] c"CQAGLF\00"
@global_var_12660.301 = constant i32 1265504102
@global_var_12668.303 = constant [6 x i8] c"FNKLI\00"
@global_var_12670.305 = constant [6 x i8] c"NMEKL\00"
@global_var_12678.307 = constant i32 1296912387
@global_var_12680.309 = constant [9 x i8] c"AC@NGAMO\00"
@global_var_1268c.311 = constant [7 x i8] c"PMWVGP\00"
@global_var_12694.313 = constant [8 x i8] c"LGVMRKC\00"
@global_var_1269c.315 = constant [7 x i8] c"Q[QCFO\00"
@global_var_126a4.317 = constant [8 x i8] c"CLKAWQV\00"
@global_var_126ac.319 = constant [6 x i8] c"FG@WE\00"
@global_var_126b4.321 = constant [10 x i8] c"F\0CG\0C@\0CW\0CE\00"
@global_var_126c0.323 = constant [5 x i8] c"GAJM\00"
@global_var_126c8.325 = constant [5 x i8] c"FKCE\00"
@global_var_126d0.327 = constant [7 x i8] c"QUKVAJ\00"
@global_var_126a0.329 = constant [3 x i8] c"FO\00"
@global_var_126d8.331 = constant [7 x i8] c"VGNLGV\00"
@global_var_126e0.333 = constant i32 370216979
@global_var_126ec.335 = constant [5 x i8] c"VMMP\00"
@global_var_126f4.337 = constant [7 x i8] c"ACNTKL\00"
@global_var_126fc.339 = constant i32 370216979
@global_var_12708.341 = constant i32 1447906640
@global_var_12710.343 = constant i32 1447512643
@global_var_1271c.345 = constant i32 454302484
@global_var_12724.347 = constant i32 387400530
@global_var_12730.349 = constant i32 319885331
@global_var_12738.351 = constant i32 1986882928
@global_var_12740.353 = constant [7 x i8] c"CNRKLG\00"
@global_var_12748.355 = constant i32 457659992
@global_var_12750.357 = constant i32 303043392
@global_var_1275c.359 = constant [9 x i8] c"rcqqumpf\00"
@global_var_12768.361 = constant [6 x i8] c"cfokl\00"
@global_var_12770.363 = constant [8 x i8] c"LGVEGCP\00"
@global_var_12778.365 = constant i32 303257172
@global_var_12780.367 = constant [4 x i8] c"K@O\00"
@global_var_12784.369 = constant [7 x i8] c"T[CVVC\00"
@global_var_1278c.371 = constant [6 x i8] c"cFOKL\00"
@global_var_12794.373 = constant i32 373380675
@global_var_1279c.375 = constant [7 x i8] c"OKAPMQ\00"
@global_var_127a4.377 = constant [6 x i8] c"QGVWR\00"
@global_var_127ac.379 = constant [8 x i8] c"AMOACQV\00"
@global_var_127b4.381 = constant [4 x i8] c"RMQ\00"
@global_var_127b8.383 = constant [4 x i8] c"UUU\00"
@global_var_127bc.385 = constant i32 303176208
@global_var_127c4.387 = constant [5 x i8] c"w`lv\00"
@global_var_127cc.389 = constant [7 x i8] c"LGVOCL\00"
@global_var_127d4.391 = constant [6 x i8] c"Cfokl\00"
@global_var_127dc.393 = constant [7 x i8] c"FCGOML\00"
@global_var_127e4.395 = constant [5 x i8] c"FGOM\00"
@global_var_127ec.397 = constant [6 x i8] c"CPPKQ\00"
@global_var_127f4.399 = constant [8 x i8] c"nKLIQ[Q\00"
@global_var_127fc.401 = constant [7 x i8] c"ANKGLV\00"
@global_var_12804.403 = constant [6 x i8] c"AKQAM\00"
@global_var_1280c.405 = constant [6 x i8] c"akqam\00"
@global_var_12814.407 = constant [6 x i8] c"QWRGP\00"
@global_var_1281c.409 = constant [5 x i8] c"QWPV\00"
@global_var_12824.411 = constant i32 370611221
@global_var_125b8.413 = constant [5 x i8] c"CFQN\00"
@global_var_1282c.415 = constant i32 1313949251
@global_var_12838.417 = constant [7 x i8] c"RCVPMN\00"
@global_var_12840.419 = constant i32 387007823
@global_var_12848.421 = constant [7 x i8] c"OGPNKL\00"
@global_var_12850.423 = constant [9 x i8] c"LGVCFOKL\00"
@global_var_1285c.425 = constant [9 x i8] c"JGUNRCAI\00"
@global_var_12868.427 = constant [7 x i8] c"lGVkaQ\00"
@global_var_12870.429 = constant i32 1179729984
@global_var_1287c.431 = constant [5 x i8] c"lwnn\00"
@global_var_12884.433 = constant [9 x i8] c"CFOKLVVF\00"
@global_var_12890.435 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_1289c.437 = constant [9 x i8] c"rNAOqRkR\00"
@global_var_128a8.439 = constant i32 269488144
@global_var_128b4.441 = constant [9 x i8] c"QGAWPKV[\00"
@global_var_128c0.443 = constant [9 x i8] c"OMWLVQ[Q\00"
@global_var_128cc.445 = constant [8 x i8] c"OGOMVGA\00"
@global_var_128d4.447 = constant i32 1464562030
@global_var_128e4.449 = constant i32 2003334929
@global_var_128f4.451 = constant [10 x i8] c"OWQGCFOKL\00"
@global_var_12900.453 = constant i32 1196513135
@global_var_1290c.455 = constant [10 x i8] c"QVMPUCVAJ\00"
@global_var_12918.457 = constant [11 x i8] c"QRGAKCNKQV\00"
@global_var_12924.459 = constant [10 x i8] c"CFOKLRNFV\00"
@global_var_12930.461 = constant [10 x i8] c"RNFVCFOKL\00"
@global_var_1293c.463 = constant i32 1279478337
@global_var_12948.465 = constant [13 x i8] c"VGNGAMOCFOKL\00"
@global_var_12958.467 = constant [13 x i8] c"CFOKLVGNGAMO\00"
@global_var_12968.469 = constant [7 x i8] c"EWGQV\22\00"
@global_var_12970.471 = constant i32 336675162
@global_var_12978.473 = constant [9 x i8] c"FGDCWNV\22\00"
@global_var_12984.475 = constant [8 x i8] c"CLVQNS\22\00"
@global_var_1298c.477 = constant [12 x i8] c"QWRGPTKQMP\22\00"
@global_var_12998.479 = constant i32 1178819416
@global_var_129a4.481 = constant [6 x i8] c"PMMV\22\00"
@global_var_1b1c4.482 = local_unnamed_addr global i32 0
@global_var_1b1c2.484 = local_unnamed_addr global i32 0
@global_var_1b1c3.485 = local_unnamed_addr global i32 0
@global_var_1b1dc.488 = local_unnamed_addr global i32 0
@global_var_1b1dd.489 = local_unnamed_addr global i32 0
@global_var_129ac.500 = constant [3 x i8] c"\0D\0A\00"
@global_var_129b8.502 = constant i32 2096127
@global_var_129af.504 = constant i32 2095871
@global_var_1b254.508 = global i32 0
@global_var_1b030.511 = global i32 1043935
@global_var_129bc.516 = constant i32 39228
@global_var_1b25c.517 = local_unnamed_addr global i32 0
@global_var_1b260.518 = local_unnamed_addr global i32 0
@global_var_1b261.519 = local_unnamed_addr global i32 0
@global_var_129c0.521 = constant i32 55430
@global_var_1b264.522 = local_unnamed_addr global i32 0
@global_var_1b268.523 = local_unnamed_addr global i32 0
@global_var_1b269.524 = local_unnamed_addr global i32 0
@global_var_129c4.526 = constant [20 x i8] c"jT^VXYsTZZXOnQ\5CDXO=\00"
@global_var_1b26c.527 = local_unnamed_addr global i32 0
@global_var_1b270.528 = local_unnamed_addr global i32 0
@global_var_1b271.529 = local_unnamed_addr global i32 0
@global_var_129d8.531 = constant [7 x i8] c"NUXQQ=\00"
@global_var_1b274.532 = local_unnamed_addr global i32 0
@global_var_1b278.533 = local_unnamed_addr global i32 0
@global_var_1b279.534 = local_unnamed_addr global i32 0
@global_var_129e0.536 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_1b27c.537 = local_unnamed_addr global i32 0
@global_var_1b280.538 = local_unnamed_addr global i32 0
@global_var_1b281.539 = local_unnamed_addr global i32 0
@global_var_129e8.541 = constant [8 x i8] c"NDNIXP=\00"
@global_var_1b284.542 = local_unnamed_addr global i32 0
@global_var_1b288.543 = local_unnamed_addr global i32 0
@global_var_1b289.544 = local_unnamed_addr global i32 0
@global_var_129f0.545 = constant [4 x i8] c"NU=\00"
@global_var_1b290.546 = local_unnamed_addr global i32 0
@global_var_1b28c.547 = local_unnamed_addr global i32 0
@global_var_1b291.548 = local_unnamed_addr global i32 0
@global_var_129f4.550 = constant i32 1398038290
@global_var_1b298.551 = local_unnamed_addr global i32 0
@global_var_1b294.552 = local_unnamed_addr global i32 0
@global_var_1b299.553 = local_unnamed_addr global i32 0
@global_var_12a10.555 = constant i32 1449022538
@global_var_1b2a0.556 = local_unnamed_addr global i32 0
@global_var_1b29c.557 = local_unnamed_addr global i32 0
@global_var_1b2a1.558 = local_unnamed_addr global i32 0
@global_var_12a30.560 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_1b2a8.561 = local_unnamed_addr global i32 0
@global_var_1b2a4.562 = local_unnamed_addr global i32 0
@global_var_1b2a9.563 = local_unnamed_addr global i32 0
@global_var_12a3c.565 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_1b2b0.566 = local_unnamed_addr global i32 0
@global_var_1b2ac.567 = local_unnamed_addr global i32 0
@global_var_1b2b1.568 = local_unnamed_addr global i32 0
@global_var_12a48.570 = constant [6 x i8] c"RZTS=\00"
@global_var_1b2b8.571 = local_unnamed_addr global i32 0
@global_var_1b2b4.572 = local_unnamed_addr global i32 0
@global_var_1b2b9.573 = local_unnamed_addr global i32 0
@global_var_12a50.575 = constant [7 x i8] c"XSIXO=\00"
@global_var_1b2bc.576 = local_unnamed_addr global i32 0
@global_var_1b2c0.577 = local_unnamed_addr global i32 0
@global_var_1b2c1.578 = local_unnamed_addr global i32 0
@global_var_12a58.580 = constant i32 1213361769
@global_var_1b2c4.581 = local_unnamed_addr global i32 0
@global_var_1b2c8.582 = local_unnamed_addr global i32 0
@global_var_1b2c9.583 = local_unnamed_addr global i32 0
@global_var_12a70.585 = constant i32 1581864978
@global_var_1b2d0.586 = local_unnamed_addr global i32 0
@global_var_1b2cc.587 = local_unnamed_addr global i32 0
@global_var_1b2d1.588 = local_unnamed_addr global i32 0
@global_var_12a84.590 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_1b2d4.591 = local_unnamed_addr global i32 0
@global_var_1b2d8.592 = local_unnamed_addr global i32 0
@global_var_1b2d9.593 = local_unnamed_addr global i32 0
@global_var_12a90.595 = constant i32 1264081170
@global_var_1b2dc.596 = local_unnamed_addr global i32 0
@global_var_1b2e0.597 = local_unnamed_addr global i32 0
@global_var_1b2e1.598 = local_unnamed_addr global i32 0
@global_var_12aa8.600 = constant i32 1264081170
@global_var_1b2e4.601 = local_unnamed_addr global i32 0
@global_var_1b2e8.602 = local_unnamed_addr global i32 0
@global_var_1b2e9.603 = local_unnamed_addr global i32 0
@global_var_12abc.605 = constant i32 1208552964
@global_var_1b2ec.606 = local_unnamed_addr global i32 0
@global_var_1b2f0.607 = local_unnamed_addr global i32 0
@global_var_1b2f1.608 = local_unnamed_addr global i32 0
@global_var_12ad4.610 = constant [12 x i8] c"YKOnI\5COIHM=\00"
@global_var_1b2f9.611 = local_unnamed_addr global i32 0
@global_var_1b2f4.612 = local_unnamed_addr global i32 0
@global_var_1b2f8.613 = local_unnamed_addr global i32 0
@global_var_1b224.616 = global i32 0
@global_var_1b2fc.619 = global i32 0
@global_var_1b1ec.621 = global i32 0
@global_var_1175c.623 = constant i32 -476053504
@global_var_1b130.625 = global i32 256
@global_var_1b034.626 = global i32* @global_var_1b130.625
@global_var_1b214.629 = global i32 0
@global_var_1b37c.631 = global i32 0
@global_var_11c64.632 = constant i32 -382910416
@global_var_12180.633 = constant i32 -509595648
@global_var_10fa0.640 = constant i32 -442564520
@global_var_1b13c.646 = global i32 0
@global_var_10890.648 = constant i32 -481230848
@global_var_1b204.650 = global i32 0
@global_var_11b60.652 = constant i32 -509587456
@global_var_1b154.655 = global i32 0
@global_var_1b208.659 = local_unnamed_addr global i32 0
@global_var_11514.661 = constant i32 -352321419
@global_var_1b000.665 = global i32 -1
@global_var_1b218.668 = global i32 0
@global_var_1b21c.670 = local_unnamed_addr global i32 0
@global_var_11748.671 = constant i32 -390234096
@global_var_12ae0.673 = constant [10 x i8] c"/dev/null\00"
@global_var_1b220.675 = global i32 0
@global_var_1b20c.680 = local_unnamed_addr global i32 0
@global_var_1b210.682 = global i32 0
@global_var_10980.684 = constant i32 -369097510
@global_var_1b16c = external local_unnamed_addr global i32
@global_var_12bec.690 = constant i32 33554944
@global_var_11a10.696 = constant i32 -335544664
@global_var_11b2c.699 = constant i32 -275775369
@global_var_1b22c.701 = global i32 0
@global_var_121fc.702 = constant i32 -456978431
@global_var_1b174.704 = global i32* @global_var_12bec.690
@global_var_1b394.706 = global i32 0
@global_var_1b398.708 = global i32 0
@global_var_1b004.711 = global i32 0
@global_var_1b178.3 = external global i8*
@global_var_1b194.22 = external global i8*
@global_var_1b195.30 = global i8 0
@global_var_1b234.63 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1b02c.71 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1b1a0.87 = external global i8*
@global_var_1b1e4.118 = external global i8*
@global_var_1b1e5.119 = local_unnamed_addr global i8 0
@global_var_1b1b8.128 = external global i8*
@global_var_1b1d8.133 = local_unnamed_addr global i8 0
@global_var_1b1d9.141 = local_unnamed_addr global i8 0
@global_var_1b1d0.487 = local_unnamed_addr global i8 0
@global_var_1b1c8.483 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_12384(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1b178.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1b178.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1b01c.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1b01c.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1b01c.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1b01c.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1b178.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1b01c.6, { 1, 0 }
  uselistorder i8** @global_var_1b178.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 110608 to i32*), align 16
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 110608

bb2:                                              ; preds = %.thread
  ret i32 110608

; uselistorder directives
  uselistorder i32 110608, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_117fc(i32 ptrtoint (i32* @global_var_ca54.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 74688, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_11370()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8230:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8230 = urem i32 %arg1, 256
  %v2_8234 = icmp eq i32 %v1_8230, 0
  %v3_8238 = load i32, i32* @r4, align 4
  br i1 %v2_8234, label %dec_label_pc_8280, label %dec_label_pc_8244

dec_label_pc_8244:                                ; preds = %dec_label_pc_8230
  %v0_8244 = load i32, i32* %r1.global-to-local, align 4
  %v1_8244 = add i32 %v0_8244, 4
  %v2_8244 = inttoptr i32 %v1_8244 to i8*
  %v3_8244 = load i8, i8* %v2_8244, align 1
  %v4_8244 = zext i8 %v3_8244 to i32
  %v1_8248 = urem i32 %arg3, 256
  %v9_824c = icmp eq i32 %v4_8244, %v1_8248
  br i1 %v9_824c, label %dec_label_pc_8288, label %dec_label_pc_8270.preheader

dec_label_pc_8270.preheader:                      ; preds = %dec_label_pc_8244
  br label %dec_label_pc_8270

dec_label_pc_8260:                                ; preds = %dec_label_pc_8270
  %v1_8260 = add i32 %v0_8268.in, 12
  %v2_8260 = inttoptr i32 %v1_8260 to i8*
  %v3_8260 = load i8, i8* %v2_8260, align 1
  %v4_8260 = zext i8 %v3_8260 to i32
  %v9_8264 = icmp eq i32 %v1_8248, %v4_8260
  br i1 %v9_8264, label %dec_label_pc_8288, label %dec_label_pc_8270

dec_label_pc_8270:                                ; preds = %dec_label_pc_8270.preheader, %dec_label_pc_8260
  %v0_8268.in = phi i32 [ %v0_8244, %dec_label_pc_8270.preheader ], [ %v0_8268, %dec_label_pc_8260 ]
  %v0_8270 = phi i32 [ 0, %dec_label_pc_8270.preheader ], [ %v1_8270, %dec_label_pc_8260 ]
  %v0_8268 = add i32 %v0_8268.in, 8
  %v1_8270 = add i32 %v0_8270, 1
  %v9_8274 = icmp eq i32 %v1_8230, %v1_8270
  store i32 %v0_8268, i32* %r1.global-to-local, align 4
  br i1 %v9_8274, label %dec_label_pc_8280, label %dec_label_pc_8260

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288, %dec_label_pc_8230
  store i32 %v3_8238, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8288:                                ; preds = %dec_label_pc_8260, %dec_label_pc_8244
  %v0_8288 = phi i32 [ %v0_8244, %dec_label_pc_8244 ], [ %v0_8268, %dec_label_pc_8260 ]
  %v1_8288 = inttoptr i32 %v0_8288 to i32*
  %v2_8288 = load i32, i32* %v1_8288, align 4
  store i32 %v2_8288, i32* @r0, align 4
  %v2_828c = icmp eq i32 %v2_8288, 0
  br i1 %v2_828c, label %dec_label_pc_8280, label %dec_label_pc_8294

dec_label_pc_8294:                                ; preds = %dec_label_pc_8288
  store i32 %v3_8238, i32* @r4, align 4
  %v1_8298 = call i32 @function_109bc(i32 %v2_8288)
  ret i32 %v1_8298

; uselistorder directives
  uselistorder i32 %v1_8270, { 1, 0 }
  uselistorder i32 %v0_8268, { 1, 0, 2 }
  uselistorder i32 %v0_8268.in, { 1, 0 }
  uselistorder i32 %v1_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 1, 0, 2 }
  uselistorder i32 %v3_8238, { 1, 0 }
  uselistorder i32 %v1_8230, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8280, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8270, { 1, 0 }
}

define i32 @function_829c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_829c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_829c = urem i32 %arg1, 256
  %v2_82a0 = icmp eq i32 %v1_829c, 0
  %v3_82a4 = load i32, i32* @r4, align 4
  %v6_82a4 = load i32, i32* @lr, align 4
  br i1 %v2_82a0, label %dec_label_pc_82ec, label %dec_label_pc_82b0

dec_label_pc_82b0:                                ; preds = %dec_label_pc_829c
  %v0_82b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_82b0 = add i32 %v0_82b0, 4
  %v2_82b0 = inttoptr i32 %v1_82b0 to i8*
  %v3_82b0 = load i8, i8* %v2_82b0, align 1
  %v4_82b0 = zext i8 %v3_82b0 to i32
  %v1_82b4 = urem i32 %arg3, 256
  %v9_82b8 = icmp eq i32 %v4_82b0, %v1_82b4
  br i1 %v9_82b8, label %dec_label_pc_82f4, label %dec_label_pc_82dc.preheader

dec_label_pc_82dc.preheader:                      ; preds = %dec_label_pc_82b0
  br label %dec_label_pc_82dc

dec_label_pc_82cc:                                ; preds = %dec_label_pc_82dc
  %v1_82cc = add i32 %v0_82d4.in, 12
  %v2_82cc = inttoptr i32 %v1_82cc to i8*
  %v3_82cc = load i8, i8* %v2_82cc, align 1
  %v4_82cc = zext i8 %v3_82cc to i32
  %v9_82d0 = icmp eq i32 %v1_82b4, %v4_82cc
  br i1 %v9_82d0, label %dec_label_pc_82f4, label %dec_label_pc_82dc

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82dc.preheader, %dec_label_pc_82cc
  %v0_82d4.in = phi i32 [ %v0_82b0, %dec_label_pc_82dc.preheader ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v0_82dc = phi i32 [ 0, %dec_label_pc_82dc.preheader ], [ %v1_82dc, %dec_label_pc_82cc ]
  %v0_82d4 = add i32 %v0_82d4.in, 8
  %v1_82dc = add i32 %v0_82dc, 1
  store i32 %v1_82dc, i32* @lr, align 4
  %v9_82e0 = icmp eq i32 %v1_829c, %v1_82dc
  store i32 %v0_82d4, i32* %r1.global-to-local, align 4
  br i1 %v9_82e0, label %dec_label_pc_82ec, label %dec_label_pc_82cc

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82f4, %dec_label_pc_829c
  store i32 %v3_82a4, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82cc, %dec_label_pc_82b0
  %v0_82f4 = phi i32 [ %v0_82b0, %dec_label_pc_82b0 ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v1_82f4 = inttoptr i32 %v0_82f4 to i32*
  %v2_82f4 = load i32, i32* %v1_82f4, align 4
  %v2_82f8 = icmp eq i32 %v2_82f4, 0
  br i1 %v2_82f8, label %dec_label_pc_82ec, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82f4
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_82a4, i32* @r4, align 4
  store i32 %v6_82a4, i32* @lr, align 4
  %v2_8308 = inttoptr i32 %v2_82f4 to i8*
  %v3_8308 = call i32 @function_10064(i8* %v2_8308, i32 10)
  ret i32 %v3_8308

; uselistorder directives
  uselistorder i32 %v1_82dc, { 1, 2, 0 }
  uselistorder i32 %v0_82d4, { 1, 0, 2 }
  uselistorder i32 %v0_82d4.in, { 1, 0 }
  uselistorder i32 %v1_82b4, { 1, 0 }
  uselistorder i32 %v0_82b0, { 1, 0, 2 }
  uselistorder i32 %v3_82a4, { 1, 0 }
  uselistorder i32 %v1_829c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_82dc, { 1, 0 }
}

define i32 @function_830c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_830c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_830c = load i32, i32* @r4, align 4
  %v6_830c = load i32, i32* @r5, align 4
  %v9_830c = load i32, i32* @r6, align 4
  %v12_830c = load i32, i32* @r7, align 4
  %v15_830c = load i32, i32* @r8, align 4
  %v18_830c = load i32, i32* @sb, align 4
  %v21_830c = load i32, i32* @sl, align 4
  %v24_830c = load i32, i32* @fp, align 4
  %v27_830c = load i32, i32* @lr, align 4
  %v7_8310 = icmp eq i32 %arg2, 3
  store i1 %v7_8310, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_831c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_831c, i32* @r4, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_8330, label %dec_label_pc_8324

dec_label_pc_8324:                                ; preds = %dec_label_pc_830c
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v1_8328 = inttoptr i32 %v0_831c to i32*
  %v2_8328 = load i32, i32* %v1_8328, align 4
  store i32 %v2_8328, i32* %sl.global-to-local, align 4
  br i1 %v7_8324, label %dec_label_pc_8330, label %dec_label_pc_8338

dec_label_pc_8330:                                ; preds = %dec_label_pc_8354, %.dec_label_pc_8330_crit_edge, %dec_label_pc_8324, %dec_label_pc_8348, %dec_label_pc_8338, %dec_label_pc_830c
  %v29_8334 = phi i32 [ %v29_8334.pre, %.dec_label_pc_8330_crit_edge ], [ %v0_831c, %dec_label_pc_8354 ], [ %v0_831c, %dec_label_pc_8324 ], [ %v0_831c, %dec_label_pc_8348 ], [ %v0_831c, %dec_label_pc_8338 ], [ %v0_831c, %dec_label_pc_830c ]
  store i32 %v3_830c, i32* %r4.global-to-local, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v18_830c, i32* @sb, align 4
  store i32 %v21_830c, i32* @sl, align 4
  store i32 %v24_830c, i32* @fp, align 4
  ret i32 %v29_8334

dec_label_pc_8338:                                ; preds = %dec_label_pc_8324
  %v7_8338 = icmp eq i32 %arg2, 5
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = add i32 %v0_831c, 4
  %v2_833c = inttoptr i32 %v1_833c to i8*
  %v3_833c = load i8, i8* %v2_833c, align 1
  %v4_833c = zext i8 %v3_833c to i32
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  br i1 %v7_8338, label %dec_label_pc_8330, label %dec_label_pc_8348

dec_label_pc_8348:                                ; preds = %dec_label_pc_8338
  %v1_8348 = add i32 %v0_831c, 5
  %v2_8348 = inttoptr i32 %v1_8348 to i8*
  %v3_8348 = load i8, i8* %v2_8348, align 1
  %v4_8348 = zext i8 %v3_8348 to i32
  store i32 %v4_8348, i32* @r8, align 4
  %v2_834c = icmp eq i8 %v3_8348, 0
  store i1 %v2_834c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_834c, label %dec_label_pc_8330, label %dec_label_pc_8354

dec_label_pc_8354:                                ; preds = %dec_label_pc_8348
  %v3_8354 = mul nuw nsw i32 %v4_8348, 4
  store i32 %v3_8354, i32* %sb.global-to-local, align 4
  %v1_8358 = add i32 %arg2, -6
  store i32 %v1_8358, i32* @r6, align 4
  %v2_835c = mul nuw nsw i32 %v4_8348, 5
  store i32 %v2_835c, i32* @r7, align 4
  %v3_8360 = icmp ult i32 %v1_8358, %v2_835c
  %v9_8360 = icmp eq i32 %v1_8358, %v2_835c
  store i1 %v9_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8360, label %dec_label_pc_8330, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_8354
  store i32 %v4_8348, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8370 = call i32 @function_10ec8(i32 %v4_8348, i32 24)
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  %v0_8374 = load i32, i32* @r8, align 4
  %v2_8374 = icmp eq i32 %v0_8374, 0
  store i1 %v2_8374, i1* %cpsr_z.global-to-local, align 1
  %v0_837c = load i32, i32* @r4, align 4
  %v1_837c = add i32 %v0_837c, 6
  store i32 %v1_837c, i32* %fp.global-to-local, align 4
  %tmp36 = icmp slt i32 %v0_8374, 1
  br i1 %tmp36, label %dec_label_pc_83d4thread-pre-split, label %dec_label_pc_8384

dec_label_pc_8384:                                ; preds = %dec_label_pc_8368
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v1_8388 = load i32, i32* @r7, align 4
  %v2_8388 = add i32 %v1_8388, %v0_837c
  store i32 %v2_8388, i32* @ip, align 4
  store i32 %v0_837c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_8398.dec_label_pc_8398_crit_edge, %dec_label_pc_8384
  %v2_83a8 = phi i32 [ %v1_83bc, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8370, %dec_label_pc_8384 ]
  %v0_83a4 = phi i32 [ %v0_83a4.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8388, %dec_label_pc_8384 ]
  %v0_83a0 = phi i32 [ %v0_8398.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v0_837c, %dec_label_pc_8384 ]
  %v1_8398 = add i32 %v0_83a0, 10
  %v2_8398 = inttoptr i32 %v1_8398 to i8*
  %v3_8398 = load i8, i8* %v2_8398, align 1
  %v1_839c = add i32 %v0_83a0, 6
  %v2_839c = inttoptr i32 %v1_839c to i32*
  %v3_839c = load i32, i32* %v2_839c, align 4
  store i32 %v3_839c, i32* @r2, align 4
  %v1_83a0 = add i32 %v0_83a0, 5
  store i32 %v1_83a0, i32* %r0.global-to-local, align 4
  %v9_83a4 = icmp eq i32 %v0_83a4, %v1_83a0
  store i1 %v9_83a4, i1* %cpsr_z.global-to-local, align 1
  %v3_83a8 = add i32 %v2_83a8, 20
  %v4_83a8 = inttoptr i32 %v3_83a8 to i8*
  store i8 %v3_8398, i8* %v4_83a8, align 1
  %v0_83ac = load i32, i32* @r2, align 4
  %v1_83ac = load i32, i32* %r1.global-to-local, align 4
  %v2_83ac = add i32 %v1_83ac, 4
  %v3_83ac = inttoptr i32 %v2_83ac to i32*
  store i32 %v0_83ac, i32* %v3_83ac, align 4
  %v0_83b0 = load i32, i32* @r2, align 4
  %v1_83b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83b0 = add i32 %v1_83b0, 16
  %v3_83b0 = inttoptr i32 %v2_83b0 to i32*
  store i32 %v0_83b0, i32* %v3_83b0, align 4
  %v0_83b4 = load i32, i32* @r4, align 4
  %v1_83b4 = trunc i32 %v0_83b4 to i8
  %v2_83b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b4 = inttoptr i32 %v2_83b4 to i8*
  store i8 %v1_83b4, i8* %v3_83b4, align 1
  %v0_83b8 = load i32, i32* @lr, align 4
  %v1_83b8 = trunc i32 %v0_83b8 to i8
  %v2_83b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b8 = add i32 %v2_83b8, 1
  %v4_83b8 = inttoptr i32 %v3_83b8 to i8*
  store i8 %v1_83b8, i8* %v4_83b8, align 1
  %v0_83bc = load i32, i32* %r1.global-to-local, align 4
  %v1_83bc = add i32 %v0_83bc, 24
  store i32 %v1_83bc, i32* %r1.global-to-local, align 4
  %v0_83c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83c0, label %dec_label_pc_83c4, label %dec_label_pc_8398.dec_label_pc_8398_crit_edge

dec_label_pc_8398.dec_label_pc_8398_crit_edge:    ; preds = %dec_label_pc_8398
  %v0_8398.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_83a4.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8398

dec_label_pc_83c4:                                ; preds = %dec_label_pc_8398
  %v0_83c4 = load i32, i32* %sb.global-to-local, align 4
  %v1_83c4 = load i32, i32* @r8, align 4
  %v1_83c8 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83c4, %v0_83c4
  %v2_83c8 = sub i32 %v1_83c8, %sum
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, 6
  store i32 %v1_83cc, i32* %fp.global-to-local, align 4
  %v1_83d0 = add i32 %v2_83c8, -6
  store i32 %v1_83d0, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4thread-pre-split:                ; preds = %dec_label_pc_8368
  %v0_83d4.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83d4thread-pre-split, %dec_label_pc_83c4
  %v0_83e0 = phi i32 [ %v1_837c, %dec_label_pc_83d4thread-pre-split ], [ %v1_83cc, %dec_label_pc_83c4 ]
  %v1_83d8 = phi i32 [ %v0_83d4.pr, %dec_label_pc_83d4thread-pre-split ], [ %v1_83d0, %dec_label_pc_83c4 ]
  %v2_83d4 = icmp eq i32 %v1_83d8, 0
  store i1 %v2_83d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83d4, label %dec_label_pc_84f4, label %dec_label_pc_83e0

dec_label_pc_83e0:                                ; preds = %dec_label_pc_83d4
  %v1_83e0 = inttoptr i32 %v0_83e0 to i8*
  %v2_83e0 = load i8, i8* %v1_83e0, align 1
  %v3_83e0 = zext i8 %v2_83e0 to i32
  store i32 %v3_83e0, i32* %sb.global-to-local, align 4
  %v2_83e4 = icmp eq i8 %v2_83e0, 0
  store i1 %v2_83e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e4, label %dec_label_pc_84c4, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e0
  store i32 %v3_83e0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83fc = call i32 @function_10ec8(i32 %v3_83e0, i32 8)
  store i32 %v2_83fc, i32* %r0.global-to-local, align 4
  %v0_8400 = load i32, i32* %sb.global-to-local, align 4
  %v2_8400 = icmp eq i32 %v0_8400, 0
  store i1 %v2_8400, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_8400, 1
  br i1 %tmp37, label %dec_label_pc_84c4, label %dec_label_pc_8410

dec_label_pc_8410:                                ; preds = %dec_label_pc_83f4
  %v0_8410 = load i32, i32* @r6, align 4
  %v1_8410 = add i32 %v0_8410, -1
  store i32 %v1_8410, i32* @r2, align 4
  %v7_8410 = icmp eq i32 %v0_8410, 1
  store i1 %v7_8410, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8410, label %dec_label_pc_84f4, label %dec_label_pc_8418

dec_label_pc_8418:                                ; preds = %dec_label_pc_8410
  %v0_8418 = load i32, i32* %fp.global-to-local, align 4
  %v1_8418 = add i32 %v0_8418, 1
  %v2_8418 = inttoptr i32 %v1_8418 to i8*
  %v3_8418 = load i8, i8* %v2_8418, align 1
  %v1_841c = add i32 %v0_8410, -2
  store i32 %v1_841c, i32* @r2, align 4
  %v7_841c = icmp eq i32 %v1_8410, 1
  store i1 %v7_841c, i1* %cpsr_z.global-to-local, align 1
  %v3_8420 = add i32 %v2_83fc, 4
  %v4_8420 = inttoptr i32 %v3_8420 to i8*
  store i8 %v3_8418, i8* %v4_8420, align 1
  %v0_8424 = load i32, i32* %fp.global-to-local, align 4
  %v1_8424 = add i32 %v0_8424, 1
  store i32 %v1_8424, i32* %r0.global-to-local, align 4
  %v0_8428 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8428, label %dec_label_pc_84f4, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8418
  %v1_842c = add i32 %v0_8424, 2
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v4_842c = zext i8 %v3_842c to i32
  store i32 %v4_842c, i32* @r4, align 4
  %v0_8430 = load i32, i32* @r2, align 4
  %v1_8430 = add i32 %v0_8430, -1
  store i32 %v1_8430, i32* @r7, align 4
  %v9_8434 = icmp eq i32 %v1_8430, %v4_842c
  store i1 %v9_8434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_842c, i32* %r0.global-to-local, align 4
  %v5_843c = icmp slt i32 %v1_8430, %v4_842c
  br i1 %v5_843c, label %dec_label_pc_84f4, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  store i32 %v2_83fc, i32* @r5, align 4
  %v1_8448 = add i32 %v2_83fc, 8
  %v1_844c = add i32 %v0_8424, 3
  store i32 %v1_844c, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_849c

dec_label_pc_845c:                                ; preds = %dec_label_pc_849c
  %v0_845c = load i32, i32* @r7, align 4
  %v1_845c = load i32, i32* @r4, align 4
  %v2_845c = sub i32 %v0_845c, %v1_845c
  store i32 %v2_845c, i32* @r2, align 4
  %v9_845c = icmp eq i32 %v0_845c, %v1_845c
  store i1 %v9_845c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_845c, label %dec_label_pc_84f4, label %dec_label_pc_8464

dec_label_pc_8464:                                ; preds = %dec_label_pc_845c
  %v1_8464 = load i32, i32* @r6, align 4
  %v2_8464 = add i32 %v1_8464, %v1_845c
  %v3_8464 = inttoptr i32 %v2_8464 to i8*
  %v4_8464 = load i8, i8* %v3_8464, align 1
  store i32 %stack_var_-44.0, i32* @r5, align 4
  %v1_846c = add i32 %v2_845c, -1
  store i32 %v1_846c, i32* @r2, align 4
  %v7_846c = icmp eq i32 %v2_845c, 1
  store i1 %v7_846c, i1* %cpsr_z.global-to-local, align 1
  %v3_8470 = add i32 %stack_var_-44.0, 4
  %v4_8470 = inttoptr i32 %v3_8470 to i8*
  store i8 %v4_8464, i8* %v4_8470, align 1
  %v0_8474 = load i32, i32* @r4, align 4
  %v1_8474 = load i32, i32* @r6, align 4
  %v2_8474 = add i32 %v1_8474, %v0_8474
  store i32 %v2_8474, i32* %r0.global-to-local, align 4
  %v0_8478 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8478, label %dec_label_pc_84f4, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8464
  %v1_847c = add i32 %v2_8474, 1
  %v2_847c = inttoptr i32 %v1_847c to i8*
  %v3_847c = load i8, i8* %v2_847c, align 1
  %v4_847c = zext i8 %v3_847c to i32
  store i32 %v4_847c, i32* @r4, align 4
  %v0_8480 = load i32, i32* @r2, align 4
  %v1_8480 = add i32 %v0_8480, -1
  store i32 %v1_8480, i32* @r7, align 4
  %v0_8484 = load i32, i32* @r5, align 4
  %v1_8484 = add i32 %v0_8484, 8
  store i32 %v1_8484, i32* %r1.global-to-local, align 4
  %v2_8488 = sub i32 %v1_8480, %v4_847c
  %tmp39 = sub i32 0, %v2_8488
  %v6_8488 = and i32 %v1_8480, %tmp39
  %v7_8488 = icmp slt i32 %v6_8488, 0
  %v8_8488 = icmp slt i32 %v2_8488, 0
  %v9_8488 = icmp eq i32 %v1_8480, %v4_847c
  store i1 %v9_8488, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_847c, i32* %r0.global-to-local, align 4
  %v2_8494 = xor i1 %v8_8488, %v7_8488
  br i1 %v2_8494, label %dec_label_pc_84f4, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_847c
  %v1_8498 = add i32 %v2_8474, 2
  store i32 %v1_8498, i32* @r6, align 4
  br label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %dec_label_pc_8440, %dec_label_pc_8498
  %v0_84a0 = phi i32 [ %v4_842c, %dec_label_pc_8440 ], [ %v4_847c, %dec_label_pc_8498 ]
  %stack_var_-44.0 = phi i32 [ %v1_8448, %dec_label_pc_8440 ], [ %v1_8484, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v2_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @function_10ec8(i32 %v2_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  %v0_84a8 = load i32, i32* %fp.global-to-local, align 4
  %v1_84a8 = add i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %fp.global-to-local, align 4
  %v1_84ac = load i32, i32* @r5, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  %v3_84b8 = call i32 @function_ffb4(i32 %v2_84a4, i32 %v0_84b0, i32 %v0_84b4)
  store i32 %v3_84b8, i32* %r0.global-to-local, align 4
  %v0_84bc = load i32, i32* %sb.global-to-local, align 4
  %v1_84bc = load i32, i32* %fp.global-to-local, align 4
  %v9_84bc = icmp eq i32 %v0_84bc, %v1_84bc
  store i1 %v9_84bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84bc, label %dec_label_pc_84c4, label %dec_label_pc_845c

dec_label_pc_84c4:                                ; preds = %dec_label_pc_849c, %dec_label_pc_83f4, %dec_label_pc_83e0
  %stack_var_-52.2 = phi i32 [ %v3_83e0, %dec_label_pc_83e0 ], [ %v2_83fc, %dec_label_pc_83f4 ], [ %v2_83fc, %dec_label_pc_849c ]
  %v0_84c4 = call i32 @function_1093c()
  store i32 %v0_84c4, i32* %r0.global-to-local, align 4
  %v2_84cc = inttoptr i32 %v0_84c4 to i32*
  store i32 0, i32* %v2_84cc, align 4
  %v0_84d0 = call i32 @function_1066c()
  store i32 %v0_84d0, i32* %r0.global-to-local, align 4
  %v7_84d4 = icmp eq i32 %v0_84d0, -1
  %v2_84e0 = icmp eq i32 %v0_84d0, 0
  store i1 %v2_84e0, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_84d0, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_84c4
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_84f4

bb42:                                             ; preds = %dec_label_pc_84c4
  %. = zext i1 %v7_84d4 to i32
  store i32 %., i32* @r2, align 4
  %v2_84ec = icmp eq i1 %v7_84d4, false
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ec, label %dec_label_pc_8548, label %dec_label_pc_84f4

dec_label_pc_84f4:                                ; preds = %dec_label_pc_847c, %dec_label_pc_8464, %dec_label_pc_845c, %.thread1, %bb42, %dec_label_pc_842c, %dec_label_pc_8418, %dec_label_pc_8410, %dec_label_pc_83d4
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83d4 ], [ %stack_var_-52.2, %bb42 ], [ %v2_83fc, %dec_label_pc_8410 ], [ %v2_83fc, %dec_label_pc_8418 ], [ %v2_83fc, %dec_label_pc_842c ], [ %stack_var_-52.2, %.thread1 ], [ %v2_83fc, %dec_label_pc_845c ], [ %v2_83fc, %dec_label_pc_8464 ], [ %v2_83fc, %dec_label_pc_847c ]
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v2_84f8 = icmp eq i32 %v2_8370, 0
  store i1 %v2_84f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84f8, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_84f4
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_84f4, %bb43
  %v1_8500 = xor i1 %v2_84f8, true
  call void @__pseudo_cond_branch(i1 %v1_8500, i32 ptrtoint (i32* @global_var_10f20.20 to i32))
  %v2_8508 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8508, label %.dec_label_pc_8330_crit_edge, label %dec_label_pc_8510

.dec_label_pc_8330_crit_edge:                     ; preds = %bb44
  %v29_8334.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8330

dec_label_pc_8510:                                ; preds = %bb44
  %v0_8510 = load i32, i32* %sb.global-to-local, align 4
  %v2_8510 = icmp eq i32 %v0_8510, 0
  store i1 %v2_8510, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_8510, 1
  br i1 %tmp45, label %dec_label_pc_8538, label %dec_label_pc_8518

dec_label_pc_8518:                                ; preds = %dec_label_pc_8510
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8518
  %v1_8520 = phi i32 [ %v1_852c, %dec_label_pc_851c ], [ 0, %dec_label_pc_8518 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_8520 = mul i32 %v1_8520, 8
  %v5_8520 = add i32 %v4_8520, %stack_var_-52.3
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_8528, i32 ptrtoint (i32* @global_var_10f20.20 to i32))
  %v0_852c = load i32, i32* %r4.global-to-local, align 4
  %v1_852c = add i32 %v0_852c, 1
  store i32 %v1_852c, i32* %r4.global-to-local, align 4
  %v0_8530 = load i32, i32* %sb.global-to-local, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_852c
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_8538:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8510
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_830c, i32* @r4, align 4
  store i32 %v6_830c, i32* @r5, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v15_830c, i32* @r8, align 4
  store i32 %v18_830c, i32* %sb.global-to-local, align 4
  store i32 %v21_830c, i32* %sl.global-to-local, align 4
  store i32 %v24_830c, i32* %fp.global-to-local, align 4
  store i32 %v27_830c, i32* @lr, align 4
  %v0_8544 = call i32 @function_10f20()
  store i32 %v0_8544, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %bb42, %dec_label_pc_8538
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_8538 ], [ %stack_var_-52.2, %bb42 ]
  %v2_854c = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_854c = zext i8 %v2_854c to i32
  %v2_8550 = icmp eq i8 %v2_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8550, label %dec_label_pc_8598, label %dec_label_pc_8558

dec_label_pc_8558:                                ; preds = %dec_label_pc_8548
  %v2_855c = load i32, i32* @global_var_1b198.24, align 4
  store i32 %v2_855c, i32* %r0.global-to-local, align 4
  %v1_8560 = inttoptr i32 %v2_855c to i32*
  %v2_8560 = load i32, i32* %v1_8560, align 4
  store i32 %v2_8560, i32* @ip, align 4
  store i32 %v4_833c, i32* %r4.global-to-local, align 4
  %v1_8568 = add i32 %v2_8560, 4
  %v2_8568 = inttoptr i32 %v1_8568 to i8*
  %v3_8568 = load i8, i8* %v2_8568, align 1
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  %v9_8570 = icmp eq i8 %v3_8568, %v3_833c
  store i1 %v9_8570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8570, label %dec_label_pc_85a0, label %dec_label_pc_858c.preheader

dec_label_pc_858c.preheader:                      ; preds = %dec_label_pc_8558
  %v0_858c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_858c

dec_label_pc_857c:                                ; preds = %dec_label_pc_858c
  %v4_857c = mul i32 %v1_858c, 4
  %v5_857c = add i32 %v4_857c, %v2_855c
  %v6_857c = inttoptr i32 %v5_857c to i32*
  %v7_857c = load i32, i32* %v6_857c, align 4
  store i32 %v7_857c, i32* @ip, align 4
  %v1_8580 = add i32 %v7_857c, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v9_8584 = icmp eq i8 %v3_8580, %v3_833c
  store i1 %v9_8584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8584, label %dec_label_pc_85a0, label %dec_label_pc_858c

dec_label_pc_858c:                                ; preds = %dec_label_pc_858c.preheader, %dec_label_pc_857c
  %v0_858c = phi i32 [ %v0_858c.pre, %dec_label_pc_858c.preheader ], [ %v1_858c, %dec_label_pc_857c ]
  %v1_858c = add i32 %v0_858c, 1
  %v9_8590 = icmp eq i32 %v1_858c, %v3_854c
  store i1 %v9_8590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8590, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_8598:                                ; preds = %dec_label_pc_858c, %dec_label_pc_8548, %dec_label_pc_85a0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_859c = call i32 @function_114b8(i32 0)
  store i32 %v1_859c, i32* %r0.global-to-local, align 4
  %v0_85d8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_85a0

dec_label_pc_85a0:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8558, %dec_label_pc_8598
  %v0_85d8 = phi i32 [ %v2_8560, %dec_label_pc_8558 ], [ %v0_85d8.pre, %dec_label_pc_8598 ], [ %v7_857c, %dec_label_pc_857c ]
  %v0_85a0 = load i32, i32* %sl.global-to-local, align 4
  %v1_85a4 = and i32 %v0_85a0, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_85ac = mul i32 %v0_85a0, 16777216
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v1_85a0 = udiv i32 %v0_85a0, 256
  %v3_85b4 = and i32 %v1_85a0, 65280
  %v4_85b8 = mul i32 %v1_85a4, 256
  %v4_85bc = udiv i32 %v0_85a0, 16777216
  %v5_85bc = or i32 %v4_85bc, %v3_85ac
  %v5_85b8 = or i32 %v5_85bc, %v4_85b8
  %v2_85c4 = or i32 %v5_85b8, %v3_85b4
  store i32 %v2_85c4, i32* %r0.global-to-local, align 4
  %v0_85cc = load i32, i32* @r8, align 4
  store i32 %v0_85cc, i32* %r1.global-to-local, align 4
  %v1_85d8 = inttoptr i32 %v0_85d8 to i32*
  %v2_85d8 = load i32, i32* %v1_85d8, align 4
  call void @__pseudo_branch(i32 %v2_85d8)
  br label %dec_label_pc_8598

; uselistorder directives
  uselistorder i32 %v0_85a0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_858c, { 2, 0, 1 }
  uselistorder i1 %v9_8584, { 1, 0 }
  uselistorder i1 %v9_8570, { 1, 0 }
  uselistorder i32 %v1_852c, { 1, 2, 0 }
  uselistorder i32 %stack_var_-52.3, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_84ec, { 1, 0 }
  uselistorder i1 %v7_84d4, { 1, 0 }
  uselistorder i32 %v0_84d0, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_8488, { 1, 0 }
  uselistorder i32 %v1_8480, { 2, 0, 1, 3 }
  uselistorder i32 %v4_847c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8410, { 0, 2, 1 }
  uselistorder i32 %v2_83fc, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_83e0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_83bc, { 1, 0 }
  uselistorder i32 %v0_83a0, { 0, 2, 1 }
  uselistorder i32 %v0_837c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8370, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_835c, { 2, 1, 0 }
  uselistorder i32 %v4_8348, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_831c, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_830c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 4, 5, 1, 2, 3, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 8, 4, 5, 24, 6, 25, 7, 2, 11, 12, 16, 13, 9, 10, 14, 15, 22, 17, 19, 18, 20, 21, 26, 23, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 2, 4, 0, 3, 5, 6 }
  uselistorder label %dec_label_pc_85a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8598, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 1, 0 }
  uselistorder label %dec_label_pc_8548, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_84f4, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8330, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_85e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e8:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e8 = load i32, i32* @r4, align 4
  store i32 %v3_85e8, i32* %stack_var_-24, align 4
  %v6_85e8 = load i32, i32* @r5, align 4
  %v9_85e8 = load i32, i32* @r6, align 4
  %v12_85e8 = load i32, i32* @r7, align 4
  %v15_85e8 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85f4 = call i32 @function_10ec8(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1b194.22 to i32), i32* @r4, align 4
  %v2_85fc = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_85fc = zext i8 %v2_85fc to i32
  store i32 ptrtoint (i32* @global_var_1b198.24 to i32), i32* @r6, align 4
  store i32 45848, i32* %r2.global-to-local, align 4
  store i32 %v2_85f4, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8610 = mul nuw nsw i32 %v3_85fc, 4
  store i32 %v3_8610, i32* %r1.global-to-local, align 4
  %v2_8614 = load i32, i32* @global_var_1b198.24, align 4
  %v2_8618 = inttoptr i32 %v2_85f4 to i32*
  store i32 45848, i32* %v2_8618, align 4
  %v3_861c = load i32, i32* @r5, align 4
  %v4_861c = add i32 %v3_861c, 4
  %v5_861c = inttoptr i32 %v4_861c to i8*
  store i8 0, i8* %v5_861c, align 1
  %v0_8620 = load i32, i32* %r1.global-to-local, align 4
  %v1_8620 = add i32 %v0_8620, 4
  store i32 %v1_8620, i32* %r1.global-to-local, align 4
  %v5_8624 = call i32 @function_11010(i32 %v2_8614, i32 %v1_8620, i32 45848, i32 0)
  %v2_8628 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8628 = zext i8 %v2_8628 to i32
  store i32 %v3_8628, i32* %r3.global-to-local, align 4
  store i32 %v5_8624, i32* %ip.global-to-local, align 4
  %v0_8630 = load i32, i32* @r5, align 4
  %v5_8630 = mul nuw nsw i32 %v3_8628, 4
  %v6_8630 = add i32 %v5_8630, %v5_8624
  %v7_8630 = inttoptr i32 %v6_8630 to i32*
  store i32 %v0_8630, i32* %v7_8630, align 4
  store i32 ptrtoint (i8* @global_var_1b195.30 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_8640 = load i32, i32* @r4, align 4
  %v4_8640 = inttoptr i32 %v3_8640 to i8*
  store i8 ptrtoint (i8* @global_var_1b195.30 to i8), i8* %v4_8640, align 1
  %v0_8644 = load i32, i32* %ip.global-to-local, align 4
  %v1_8644 = load i32, i32* @r6, align 4
  %v2_8644 = inttoptr i32 %v1_8644 to i32*
  store i32 %v0_8644, i32* %v2_8644, align 4
  %v2_8648 = call i32 @function_10ec8(i32 1, i32 8)
  %v2_864c = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_864c = zext i8 %v2_864c to i32
  store i32 ptrtoint (i32* @global_var_b9c0.32 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_8648, i32* @r5, align 4
  %v3_865c = mul nuw nsw i32 %v3_864c, 4
  store i32 %v3_865c, i32* %r1.global-to-local, align 4
  %v2_8660 = load i32, i32* @global_var_1b198.24, align 4
  %v2_8664 = inttoptr i32 %v2_8648 to i32*
  store i32 ptrtoint (i32* @global_var_b9c0.32 to i32), i32* %v2_8664, align 4
  %v0_8668 = load i32, i32* @r7, align 4
  %v1_8668 = trunc i32 %v0_8668 to i8
  %v2_8668 = load i32, i32* @r5, align 4
  %v3_8668 = add i32 %v2_8668, 4
  %v4_8668 = inttoptr i32 %v3_8668 to i8*
  store i8 %v1_8668, i8* %v4_8668, align 1
  %v0_866c = load i32, i32* %r1.global-to-local, align 4
  %v1_866c = add i32 %v0_866c, 4
  store i32 %v1_866c, i32* %r1.global-to-local, align 4
  %v5_8670 = call i32 @function_11010(i32 %v2_8660, i32 %v1_866c, i32 sext (i8 ptrtoint (i8* @global_var_1b195.30 to i8) to i32), i32 ptrtoint (i32* @global_var_b9c0.32 to i32))
  %v2_8674 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8674 = zext i8 %v2_8674 to i32
  store i32 %v3_8674, i32* %r3.global-to-local, align 4
  store i32 %v5_8670, i32* %ip.global-to-local, align 4
  %v0_867c = load i32, i32* @r5, align 4
  %v5_867c = mul nuw nsw i32 %v3_8674, 4
  %v6_867c = add i32 %v5_867c, %v5_8670
  %v7_867c = inttoptr i32 %v6_867c to i32*
  store i32 %v0_867c, i32* %v7_867c, align 4
  %v0_8680 = load i32, i32* %r3.global-to-local, align 4
  %v1_8680 = load i32, i32* @r7, align 4
  %v2_8680 = add i32 %v1_8680, %v0_8680
  store i32 %v2_8680, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_868c = load i32, i32* %ip.global-to-local, align 4
  %v1_868c = load i32, i32* @r6, align 4
  %v2_868c = inttoptr i32 %v1_868c to i32*
  store i32 %v0_868c, i32* %v2_868c, align 4
  %v0_8690 = load i32, i32* %r2.global-to-local, align 4
  %v1_8690 = trunc i32 %v0_8690 to i8
  %v2_8690 = load i32, i32* @r4, align 4
  %v3_8690 = inttoptr i32 %v2_8690 to i8*
  store i8 %v1_8690, i8* %v3_8690, align 1
  %v2_8694 = call i32 @function_10ec8(i32 %v1_8680, i32 8)
  %v2_8698 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8698 = zext i8 %v2_8698 to i32
  store i32 ptrtoint (i32* @global_var_bec0.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8694, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_86a8 = mul nuw nsw i32 %v3_8698, 4
  store i32 %v3_86a8, i32* %r1.global-to-local, align 4
  %v2_86ac = load i32, i32* @global_var_1b198.24, align 4
  %v2_86b0 = inttoptr i32 %v2_8694 to i32*
  store i32 ptrtoint (i32* @global_var_bec0.34 to i32), i32* %v2_86b0, align 4
  %v3_86b4 = load i32, i32* @r5, align 4
  %v4_86b4 = add i32 %v3_86b4, 4
  %v5_86b4 = inttoptr i32 %v4_86b4 to i8*
  store i8 2, i8* %v5_86b4, align 1
  %v0_86b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_86b8 = add i32 %v0_86b8, 4
  store i32 %v1_86b8, i32* %r1.global-to-local, align 4
  %v5_86bc = call i32 @function_11010(i32 %v2_86ac, i32 %v1_86b8, i32 ptrtoint (i32* @global_var_bec0.34 to i32), i32 2)
  %v2_86c0 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_86c0 = zext i8 %v2_86c0 to i32
  store i32 %v3_86c0, i32* %r3.global-to-local, align 4
  store i32 %v5_86bc, i32* %ip.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r7, align 4
  %v2_86c8 = add i32 %v1_86c8, %v3_86c0
  %v3_86c8 = trunc i32 %v2_86c8 to i8
  store i32 %v2_86c8, i32* %r2.global-to-local, align 4
  %v0_86cc = load i32, i32* @r5, align 4
  %v5_86cc = mul nuw nsw i32 %v3_86c0, 4
  %v6_86cc = add i32 %v5_86cc, %v5_86bc
  %v7_86cc = inttoptr i32 %v6_86cc to i32*
  store i32 %v0_86cc, i32* %v7_86cc, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r7, align 4
  %v3_86d8 = load i32, i32* @r4, align 4
  %v4_86d8 = inttoptr i32 %v3_86d8 to i8*
  store i8 %v3_86c8, i8* %v4_86d8, align 1
  %v0_86dc = load i32, i32* %ip.global-to-local, align 4
  %v1_86dc = load i32, i32* @r6, align 4
  %v2_86dc = inttoptr i32 %v1_86dc to i32*
  store i32 %v0_86dc, i32* %v2_86dc, align 4
  %v2_86e0 = call i32 @function_10ec8(i32 %v0_86d4, i32 8)
  %v2_86e4 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_86e4 = zext i8 %v2_86e4 to i32
  store i32 ptrtoint (i32* @global_var_affc.36 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r8, align 4
  store i32 %v2_86e0, i32* @r5, align 4
  %v3_86f4 = mul nuw nsw i32 %v3_86e4, 4
  store i32 %v3_86f4, i32* %r1.global-to-local, align 4
  %v2_86f8 = load i32, i32* @global_var_1b198.24, align 4
  %v2_86fc = inttoptr i32 %v2_86e0 to i32*
  store i32 ptrtoint (i32* @global_var_affc.36 to i32), i32* %v2_86fc, align 4
  %v0_8700 = load i32, i32* @r8, align 4
  %v1_8700 = trunc i32 %v0_8700 to i8
  %v2_8700 = load i32, i32* @r5, align 4
  %v3_8700 = add i32 %v2_8700, 4
  %v4_8700 = inttoptr i32 %v3_8700 to i8*
  store i8 %v1_8700, i8* %v4_8700, align 1
  %v0_8704 = load i32, i32* %r1.global-to-local, align 4
  %v1_8704 = add i32 %v0_8704, 4
  store i32 %v1_8704, i32* %r1.global-to-local, align 4
  %v5_8708 = call i32 @function_11010(i32 %v2_86f8, i32 %v1_8704, i32 %v2_86c8, i32 ptrtoint (i32* @global_var_affc.36 to i32))
  %v2_870c = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_870c = zext i8 %v2_870c to i32
  store i32 %v3_870c, i32* %r3.global-to-local, align 4
  store i32 %v5_8708, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* @r5, align 4
  %v5_8714 = mul nuw nsw i32 %v3_870c, 4
  %v6_8714 = add i32 %v5_8714, %v5_8708
  %v7_8714 = inttoptr i32 %v6_8714 to i32*
  store i32 %v0_8714, i32* %v7_8714, align 4
  %v0_8718 = load i32, i32* %r3.global-to-local, align 4
  %v1_8718 = load i32, i32* @r7, align 4
  %v2_8718 = add i32 %v1_8718, %v0_8718
  store i32 %v2_8718, i32* %r2.global-to-local, align 4
  %v0_871c = load i32, i32* @r8, align 4
  store i32 %v0_871c, i32* %r1.global-to-local, align 4
  %v0_8724 = load i32, i32* %ip.global-to-local, align 4
  %v1_8724 = load i32, i32* @r6, align 4
  %v2_8724 = inttoptr i32 %v1_8724 to i32*
  store i32 %v0_8724, i32* %v2_8724, align 4
  %v0_8728 = load i32, i32* %r2.global-to-local, align 4
  %v1_8728 = trunc i32 %v0_8728 to i8
  %v2_8728 = load i32, i32* @r4, align 4
  %v3_8728 = inttoptr i32 %v2_8728 to i8*
  store i8 %v1_8728, i8* %v3_8728, align 1
  %v2_872c = call i32 @function_10ec8(i32 %v1_8718, i32 %v0_871c)
  %v2_8730 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8730 = zext i8 %v2_8730 to i32
  store i32 ptrtoint (i32* @global_var_a880.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_872c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_8740 = mul nuw nsw i32 %v3_8730, 4
  store i32 %v3_8740, i32* %r1.global-to-local, align 4
  %v2_8744 = load i32, i32* @global_var_1b198.24, align 4
  %v2_8748 = inttoptr i32 %v2_872c to i32*
  store i32 ptrtoint (i32* @global_var_a880.38 to i32), i32* %v2_8748, align 4
  %v3_874c = load i32, i32* @r5, align 4
  %v4_874c = add i32 %v3_874c, 4
  %v5_874c = inttoptr i32 %v4_874c to i8*
  store i8 3, i8* %v5_874c, align 1
  %v0_8750 = load i32, i32* %r1.global-to-local, align 4
  %v1_8750 = add i32 %v0_8750, 4
  store i32 %v1_8750, i32* %r1.global-to-local, align 4
  %v5_8754 = call i32 @function_11010(i32 %v2_8744, i32 %v1_8750, i32 ptrtoint (i32* @global_var_a880.38 to i32), i32 3)
  %v2_8758 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8758 = zext i8 %v2_8758 to i32
  store i32 %v3_8758, i32* %r3.global-to-local, align 4
  store i32 %v5_8754, i32* %ip.global-to-local, align 4
  %v0_8760 = load i32, i32* @r5, align 4
  %v5_8760 = mul nuw nsw i32 %v3_8758, 4
  %v6_8760 = add i32 %v5_8760, %v5_8754
  %v7_8760 = inttoptr i32 %v6_8760 to i32*
  store i32 %v0_8760, i32* %v7_8760, align 4
  %v0_8764 = load i32, i32* %r3.global-to-local, align 4
  %v1_8764 = load i32, i32* @r7, align 4
  %v2_8764 = add i32 %v1_8764, %v0_8764
  store i32 %v2_8764, i32* %r2.global-to-local, align 4
  %v0_8768 = load i32, i32* @r8, align 4
  store i32 %v0_8768, i32* %r1.global-to-local, align 4
  %v0_8770 = load i32, i32* %ip.global-to-local, align 4
  %v1_8770 = load i32, i32* @r6, align 4
  %v2_8770 = inttoptr i32 %v1_8770 to i32*
  store i32 %v0_8770, i32* %v2_8770, align 4
  %v0_8774 = load i32, i32* %r2.global-to-local, align 4
  %v1_8774 = trunc i32 %v0_8774 to i8
  %v2_8774 = load i32, i32* @r4, align 4
  %v3_8774 = inttoptr i32 %v2_8774 to i8*
  store i8 %v1_8774, i8* %v3_8774, align 1
  %v2_8778 = call i32 @function_10ec8(i32 %v1_8764, i32 %v0_8768)
  %v2_877c = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_877c = zext i8 %v2_877c to i32
  store i32 ptrtoint (i32* @global_var_a0c0.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8778, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_878c = mul nuw nsw i32 %v3_877c, 4
  store i32 %v3_878c, i32* %r1.global-to-local, align 4
  %v2_8790 = load i32, i32* @global_var_1b198.24, align 4
  %v2_8794 = inttoptr i32 %v2_8778 to i32*
  store i32 ptrtoint (i32* @global_var_a0c0.40 to i32), i32* %v2_8794, align 4
  %v3_8798 = load i32, i32* @r5, align 4
  %v4_8798 = add i32 %v3_8798, 4
  %v5_8798 = inttoptr i32 %v4_8798 to i8*
  store i8 4, i8* %v5_8798, align 1
  %v0_879c = load i32, i32* %r1.global-to-local, align 4
  %v1_879c = add i32 %v0_879c, 4
  store i32 %v1_879c, i32* %r1.global-to-local, align 4
  %v5_87a0 = call i32 @function_11010(i32 %v2_8790, i32 %v1_879c, i32 ptrtoint (i32* @global_var_a0c0.40 to i32), i32 4)
  %v2_87a4 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_87a4 = zext i8 %v2_87a4 to i32
  store i32 %v3_87a4, i32* %r3.global-to-local, align 4
  store i32 %v5_87a0, i32* %ip.global-to-local, align 4
  %v0_87ac = load i32, i32* @r5, align 4
  %v5_87ac = mul nuw nsw i32 %v3_87a4, 4
  %v6_87ac = add i32 %v5_87ac, %v5_87a0
  %v7_87ac = inttoptr i32 %v6_87ac to i32*
  store i32 %v0_87ac, i32* %v7_87ac, align 4
  %v0_87b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87b0 = load i32, i32* @r7, align 4
  %v2_87b0 = add i32 %v1_87b0, %v0_87b0
  store i32 %v2_87b0, i32* %r2.global-to-local, align 4
  %v0_87b4 = load i32, i32* @r8, align 4
  store i32 %v0_87b4, i32* %r1.global-to-local, align 4
  %v0_87bc = load i32, i32* %ip.global-to-local, align 4
  %v1_87bc = load i32, i32* @r6, align 4
  %v2_87bc = inttoptr i32 %v1_87bc to i32*
  store i32 %v0_87bc, i32* %v2_87bc, align 4
  %v0_87c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_87c0 = trunc i32 %v0_87c0 to i8
  %v2_87c0 = load i32, i32* @r4, align 4
  %v3_87c0 = inttoptr i32 %v2_87c0 to i8*
  store i8 %v1_87c0, i8* %v3_87c0, align 1
  %v2_87c4 = call i32 @function_10ec8(i32 %v1_87b0, i32 %v0_87b4)
  %v2_87c8 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_87c8 = zext i8 %v2_87c8 to i32
  store i32 ptrtoint (i32* @global_var_97b0.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87c4, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_87d8 = mul nuw nsw i32 %v3_87c8, 4
  store i32 %v3_87d8, i32* %r1.global-to-local, align 4
  %v2_87dc = load i32, i32* @global_var_1b198.24, align 4
  %v2_87e0 = inttoptr i32 %v2_87c4 to i32*
  store i32 ptrtoint (i32* @global_var_97b0.42 to i32), i32* %v2_87e0, align 4
  %v3_87e4 = load i32, i32* @r5, align 4
  %v4_87e4 = add i32 %v3_87e4, 4
  %v5_87e4 = inttoptr i32 %v4_87e4 to i8*
  store i8 5, i8* %v5_87e4, align 1
  %v0_87e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87e8 = add i32 %v0_87e8, 4
  store i32 %v1_87e8, i32* %r1.global-to-local, align 4
  %v5_87ec = call i32 @function_11010(i32 %v2_87dc, i32 %v1_87e8, i32 ptrtoint (i32* @global_var_97b0.42 to i32), i32 5)
  %v2_87f0 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_87f0 = zext i8 %v2_87f0 to i32
  store i32 %v3_87f0, i32* %r3.global-to-local, align 4
  store i32 %v5_87ec, i32* %ip.global-to-local, align 4
  %v0_87f8 = load i32, i32* @r5, align 4
  %v5_87f8 = mul nuw nsw i32 %v3_87f0, 4
  %v6_87f8 = add i32 %v5_87f8, %v5_87ec
  %v7_87f8 = inttoptr i32 %v6_87f8 to i32*
  store i32 %v0_87f8, i32* %v7_87f8, align 4
  %v0_87fc = load i32, i32* %r3.global-to-local, align 4
  %v1_87fc = load i32, i32* @r7, align 4
  %v2_87fc = add i32 %v1_87fc, %v0_87fc
  store i32 %v2_87fc, i32* %r2.global-to-local, align 4
  %v0_8800 = load i32, i32* @r8, align 4
  store i32 %v0_8800, i32* %r1.global-to-local, align 4
  %v0_8808 = load i32, i32* %ip.global-to-local, align 4
  %v1_8808 = load i32, i32* @r6, align 4
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  store i32 %v0_8808, i32* %v2_8808, align 4
  %v0_880c = load i32, i32* %r2.global-to-local, align 4
  %v1_880c = trunc i32 %v0_880c to i8
  %v2_880c = load i32, i32* @r4, align 4
  %v3_880c = inttoptr i32 %v2_880c to i8*
  store i8 %v1_880c, i8* %v3_880c, align 1
  %v2_8810 = call i32 @function_10ec8(i32 %v1_87fc, i32 %v0_8800)
  %v2_8814 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8814 = zext i8 %v2_8814 to i32
  store i32 ptrtoint (i32* @global_var_9078.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8810, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_8824 = mul nuw nsw i32 %v3_8814, 4
  store i32 %v3_8824, i32* %r1.global-to-local, align 4
  %v2_8828 = load i32, i32* @global_var_1b198.24, align 4
  %v2_882c = inttoptr i32 %v2_8810 to i32*
  store i32 ptrtoint (i32* @global_var_9078.44 to i32), i32* %v2_882c, align 4
  %v3_8830 = load i32, i32* @r5, align 4
  %v4_8830 = add i32 %v3_8830, 4
  %v5_8830 = inttoptr i32 %v4_8830 to i8*
  store i8 6, i8* %v5_8830, align 1
  %v0_8834 = load i32, i32* %r1.global-to-local, align 4
  %v1_8834 = add i32 %v0_8834, 4
  store i32 %v1_8834, i32* %r1.global-to-local, align 4
  %v5_8838 = call i32 @function_11010(i32 %v2_8828, i32 %v1_8834, i32 ptrtoint (i32* @global_var_9078.44 to i32), i32 6)
  %v2_883c = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_883c = zext i8 %v2_883c to i32
  store i32 %v3_883c, i32* %r3.global-to-local, align 4
  store i32 %v5_8838, i32* %ip.global-to-local, align 4
  %v0_8844 = load i32, i32* @r5, align 4
  %v5_8844 = mul nuw nsw i32 %v3_883c, 4
  %v6_8844 = add i32 %v5_8844, %v5_8838
  %v7_8844 = inttoptr i32 %v6_8844 to i32*
  store i32 %v0_8844, i32* %v7_8844, align 4
  %v0_8848 = load i32, i32* %r3.global-to-local, align 4
  %v1_8848 = load i32, i32* @r7, align 4
  %v2_8848 = add i32 %v1_8848, %v0_8848
  store i32 %v2_8848, i32* %r2.global-to-local, align 4
  %v0_884c = load i32, i32* @r8, align 4
  store i32 %v0_884c, i32* %r1.global-to-local, align 4
  %v1_8854 = trunc i32 %v2_8848 to i8
  %v2_8854 = load i32, i32* @r4, align 4
  %v3_8854 = inttoptr i32 %v2_8854 to i8*
  store i8 %v1_8854, i8* %v3_8854, align 1
  %v0_8858 = load i32, i32* %ip.global-to-local, align 4
  %v1_8858 = load i32, i32* @r6, align 4
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  store i32 %v0_8858, i32* %v2_8858, align 4
  %v2_885c = call i32 @function_10ec8(i32 %v1_8848, i32 %v0_884c)
  %v2_8860 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8860 = zext i8 %v2_8860 to i32
  store i32 ptrtoint (i32* @global_var_88d0.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_885c, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8870 = mul nuw nsw i32 %v3_8860, 4
  store i32 %v3_8870, i32* %r1.global-to-local, align 4
  %v2_8874 = load i32, i32* @global_var_1b198.24, align 4
  %v2_8878 = inttoptr i32 %v2_885c to i32*
  store i32 ptrtoint (i32* @global_var_88d0.46 to i32), i32* %v2_8878, align 4
  %v3_887c = load i32, i32* @r5, align 4
  %v4_887c = add i32 %v3_887c, 4
  %v5_887c = inttoptr i32 %v4_887c to i8*
  store i8 7, i8* %v5_887c, align 1
  %v0_8880 = load i32, i32* %r1.global-to-local, align 4
  %v1_8880 = add i32 %v0_8880, 4
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v5_8884 = call i32 @function_11010(i32 %v2_8874, i32 %v1_8880, i32 ptrtoint (i32* @global_var_88d0.46 to i32), i32 7)
  %v2_8888 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8888 = zext i8 %v2_8888 to i32
  store i32 %v3_8888, i32* %r3.global-to-local, align 4
  %v1_888c = load i32, i32* @r6, align 4
  %v2_888c = inttoptr i32 %v1_888c to i32*
  store i32 %v5_8884, i32* %v2_888c, align 4
  %v0_8890 = load i32, i32* @r5, align 4
  %v2_8890 = load i32, i32* %r3.global-to-local, align 4
  %v5_8890 = mul i32 %v2_8890, 4
  %v6_8890 = add i32 %v5_8890, %v5_8884
  %v7_8890 = inttoptr i32 %v6_8890 to i32*
  store i32 %v0_8890, i32* %v7_8890, align 4
  %v0_8894 = load i32, i32* %r3.global-to-local, align 4
  %v1_8894 = load i32, i32* @r7, align 4
  %v2_8894 = add i32 %v1_8894, %v0_8894
  store i32 %v2_8894, i32* %r2.global-to-local, align 4
  %v1_889c = trunc i32 %v2_8894 to i8
  %v2_889c = load i32, i32* @r4, align 4
  %v3_889c = inttoptr i32 %v2_889c to i8*
  store i8 %v1_889c, i8* %v3_889c, align 1
  %v2_88a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_88a0, i32* @r4, align 4
  store i32 %v6_85e8, i32* @r5, align 4
  store i32 %v9_85e8, i32* @r6, align 4
  store i32 %v12_85e8, i32* @r7, align 4
  store i32 %v15_85e8, i32* @r8, align 4
  ret i32 %v1_8894

; uselistorder directives
  uselistorder i32 %v1_8894, { 1, 0 }
  uselistorder i32 %v1_8848, { 1, 0 }
  uselistorder i32 %v1_87fc, { 1, 0 }
  uselistorder i32 %v1_87b0, { 1, 0 }
  uselistorder i32 %v1_8764, { 1, 0 }
  uselistorder i32 %v1_8718, { 1, 0 }
  uselistorder i32 %v2_86c8, { 0, 2, 1 }
  uselistorder i32 %v3_86c0, { 1, 0, 2 }
  uselistorder i32 %v1_8680, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* @global_var_1b198.24, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i8* bitcast (i8** @global_var_1b194.22 to i8*), { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_88d0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_88d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_88d0 = load i32, i32* @r4, align 4
  %v15_88d0 = load i32, i32* @r8, align 4
  %v21_88d0 = load i32, i32* @sl, align 4
  %v24_88d0 = load i32, i32* @fp, align 4
  %v1_88d4 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_88d4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_88f0 = urem i32 %arg4, 256
  store i32 %v1_88f0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_8900 = call i32 @function_10ec8(i32 %v1_88d4, i32 4)
  %v0_8904 = load i32, i32* @r5, align 4
  store i32 %v0_8904, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8910 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8910, i32* %r3.global-to-local, align 4
  %v0_8914 = load i32, i32* @r4, align 4
  store i32 %v0_8914, i32* %r0.global-to-local, align 4
  %v5_8918 = inttoptr i32 %v0_8904 to i32*
  %v6_8918 = call i32 @function_829c(i32 %v0_8914, i32* %v5_8918, i32 2, i32 %v0_8910, i32 %v2_8900)
  %v1_8924 = urem i32 %v6_8918, 256
  store i32 %v1_8924, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8930 = load i32, i32* @r5, align 4
  store i32 %v0_8930, i32* %r1.global-to-local, align 4
  %v0_8934 = load i32, i32* @r4, align 4
  store i32 %v0_8934, i32* %r0.global-to-local, align 4
  %v5_8938 = trunc i32 %v6_8918 to i8
  %v6_893c = inttoptr i32 %v0_8930 to i32*
  %v7_893c = call i32 @function_829c(i32 %v0_8934, i32* %v6_893c, i32 3, i32 65535, i32 %v6_8918)
  %v0_8940 = load i32, i32* @r5, align 4
  store i32 %v0_8940, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_893c, i32* @r7, align 4
  %v0_8950 = load i32, i32* @r4, align 4
  store i32 %v0_8950, i32* %r0.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v0_8940 to i32*
  %v6_8954 = call i32 @function_829c(i32 %v0_8950, i32* %v5_8954, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_895c = urem i32 %v6_8954, 256
  store i32 %v1_895c, i32* %ip.global-to-local, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  store i32 %v0_8960, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_896c = load i32, i32* @r4, align 4
  store i32 %v0_896c, i32* %r0.global-to-local, align 4
  %v5_8970 = trunc i32 %v6_8954 to i8
  %v6_8974 = inttoptr i32 %v0_8960 to i32*
  %v7_8974 = call i32 @function_829c(i32 %v0_896c, i32* %v6_8974, i32 5, i32 1, i32 %v6_8954)
  %v1_8980 = urem i32 %v7_8974, 256
  store i32 %v1_8980, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_898c = load i32, i32* @r5, align 4
  store i32 %v0_898c, i32* %r1.global-to-local, align 4
  %v0_8990 = load i32, i32* @r4, align 4
  store i32 %v0_8990, i32* %r0.global-to-local, align 4
  %v5_8998 = inttoptr i32 %v0_898c to i32*
  %v6_8998 = call i32 @function_829c(i32 %v0_8990, i32* %v5_8998, i32 6, i32 65535, i32 %v1_8980)
  %v0_89a4 = load i32, i32* @r5, align 4
  store i32 %v0_89a4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_89b0 = load i32, i32* @r4, align 4
  store i32 %v0_89b0, i32* %r0.global-to-local, align 4
  %v5_89b4 = inttoptr i32 %v0_89a4 to i32*
  %v6_89b4 = call i32 @function_829c(i32 %v0_89b0, i32* %v5_89b4, i32 7, i32 65535, i32 %v6_8998)
  %v0_89b8 = load i32, i32* @r5, align 4
  store i32 %v0_89b8, i32* %r1.global-to-local, align 4
  %v0_89bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_89bc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_89b4, i32* @sl, align 4
  %v0_89c8 = load i32, i32* @r4, align 4
  store i32 %v0_89c8, i32* %r0.global-to-local, align 4
  %v5_89cc = inttoptr i32 %v0_89b8 to i32*
  %v6_89cc = call i32 @function_829c(i32 %v0_89c8, i32* %v5_89cc, i32 %v0_89bc, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_89dc = load i32, i32* @r5, align 4
  store i32 %v0_89dc, i32* %r1.global-to-local, align 4
  %v0_89e0 = load i32, i32* @r4, align 4
  store i32 %v0_89e0, i32* %r0.global-to-local, align 4
  %v5_89e4 = inttoptr i32 %v0_89dc to i32*
  %v6_89e4 = call i32 @function_829c(i32 %v0_89e0, i32* %v5_89e4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_89ec = urem i32 %v6_89e4, 256
  store i32 %v1_89ec, i32* %ip.global-to-local, align 4
  %v0_89f0 = load i32, i32* @r5, align 4
  store i32 %v0_89f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_89f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_89f8, i32* %r3.global-to-local, align 4
  %v0_89fc = load i32, i32* @r4, align 4
  store i32 %v0_89fc, i32* %r0.global-to-local, align 4
  %v5_8a04 = inttoptr i32 %v0_89f0 to i32*
  %v6_8a04 = call i32 @function_829c(i32 %v0_89fc, i32* %v5_8a04, i32 18, i32 %v0_89f8, i32 %v1_89ec)
  %v0_8a0c = load i32, i32* @r5, align 4
  store i32 %v0_8a0c, i32* %r1.global-to-local, align 4
  %v2_8a10 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_8a10, i32* %r3.global-to-local, align 4
  store i32 %v6_8a04, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8a1c = load i32, i32* @r4, align 4
  store i32 %v0_8a1c, i32* %r0.global-to-local, align 4
  %v5_8a20 = inttoptr i32 %v0_8a0c to i32*
  %v6_8a20 = call i32 @function_829c(i32 %v0_8a1c, i32* %v5_8a20, i32 24, i32 %v2_8a10, i32 ptrtoint (i32* @0 to i32))
  %v0_8a28 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a28, i32* %r0.global-to-local, align 4
  %v1_8a2c = inttoptr i32 %v0_8a28 to i32*
  %v2_8a2c = call i32 @function_108e4(i32* %v1_8a2c)
  %v1_8a30 = load i32, i32* @r6, align 4
  %v2_8a30 = add i32 %v1_8a30, %v2_8a2c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_8a44 = call i32 @function_10bdc(i32 2, i32 3, i32 6)
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v7_8a48 = icmp eq i32 %v3_8a44, -1
  store i1 %v7_8a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a48, label %dec_label_pc_9060, label %dec_label_pc_8a54

dec_label_pc_8a54:                                ; preds = %dec_label_pc_88d0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_8a5c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_8a5c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_8a64 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a64, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_8a70 = call i32 @function_10bac(i32 %v3_8a44, i32 %v0_8a64, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8a70, i32* %r0.global-to-local, align 4
  %v7_8a74 = icmp eq i32 %v6_8a70, -1
  store i1 %v7_8a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a74, label %dec_label_pc_9068, label %dec_label_pc_8a7c

dec_label_pc_8a7c:                                ; preds = %dec_label_pc_8a54
  %v0_8a88 = load i32, i32* @sl, align 4
  %v3_8a88 = mul i32 %v0_8a88, 65536
  store i32 %v3_8a88, i32* %sl.global-to-local, align 4
  %v0_8a8c = load i32, i32* @r7, align 4
  %v2_8a94 = icmp eq i32 %v1_88d4, 0
  store i1 %v2_8a94, i1* %cpsr_z.global-to-local, align 1
  %v0_8a98 = load i32, i32* @r8, align 4
  %v1_8a98 = urem i32 %v0_8a98, 256
  store i32 %v1_8a98, i32* %r8.global-to-local, align 4
  %v3_8a9c = urem i32 %v0_8a8c, 65536
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  %v3_8aa0 = urem i32 %v6_8998, 65536
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v3_8aa4 = urem i32 %v0_8a88, 65536
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v0_8ab0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ab0, i32* %stack_var_-40, align 4
  br i1 %v2_8a94, label %dec_label_pc_8d44.preheader, label %dec_label_pc_8ac4

dec_label_pc_8ac4:                                ; preds = %dec_label_pc_8a7c
  %v3_8acc = mul i32 %v6_89cc, 65536
  %v1_8ad4 = urem i32 %v6_8998, 256
  %v1_8adc = add i32 %v3_8acc, 524288
  %v1_8ae0 = add i32 %v3_8acc, 4325376
  %v1_8ae4 = urem i32 %v0_8a88, 256
  %v1_8ae8 = add i32 %v3_8acc, 1835008
  %v0_8a8c.not = or i32 %v0_8a8c, -65536
  %v1_8af0 = xor i32 %v0_8a8c.not, 65535
  %v3_8af4 = udiv i32 %v1_8ae8, 256
  %tmp82 = udiv i32 %v0_8a8c, 256
  %v1_8b08 = and i32 %v3_8af4, 65280
  store i32 %v1_8b08, i32* %r0.global-to-local, align 4
  %v3_8b2c = mul nuw nsw i32 %v1_8ad4, 256
  %tmp83 = udiv i32 %v6_8998, 256
  %v4_8b34 = urem i32 %tmp83, 256
  %v5_8b34 = or i32 %v4_8b34, %v3_8b2c
  store i32 %v5_8b34, i32* @lr, align 4
  %tmp84 = mul nsw i32 %v1_8af0, 256
  %v3_8b3c = mul nuw nsw i32 %v1_8ae4, 256
  %sext23 = mul i32 %tmp82, 16777216
  %v4_8b44 = sdiv i32 %sext23, 16777216
  %v4_8b0c = sdiv i32 %v1_8ae0, 16777216
  %tmp85 = udiv i32 %v0_8a88, 256
  %v4_8b4c = urem i32 %tmp85, 256
  %v5_8b4c = or i32 %v4_8b4c, %v3_8b3c
  store i32 %v5_8b4c, i32* @r7, align 4
  %v1_8b50 = and i32 %tmp84, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_8b50, i32* %ip.global-to-local, align 4
  %v4_8b54 = sdiv i32 %v1_8ae8, 16777216
  %v3_8b58 = udiv i32 %v1_8adc, 256
  %tmp86 = udiv i32 %v1_8af0, 256
  %v4_8b5c = urem i32 %tmp86, 256
  %v5_8b5c = or i32 %v4_8b5c, %v1_8b50
  store i32 %v5_8b5c, i32* @r6, align 4
  %v3_8b60 = ashr i32 %v1_8ae0, 31
  %v3_8b64 = ashr i32 %sext23, 31
  %v1_8b68 = and i32 %v3_8b58, 65280
  store i32 %v1_8b68, i32* @r5, align 4
  %v3_8b74 = ashr i32 %v1_8ae8, 31
  store i32 %v3_8b74, i32* %r2.global-to-local, align 4
  %v3_8b7832 = udiv i32 %v1_8b50, 256
  store i32 %v3_8b7832, i32* %r3.global-to-local, align 4
  store i32 %v1_8ad4, i32* %r1.global-to-local, align 4
  %v4_8b80 = udiv i32 %v1_8adc, 16777216
  %v5_8b80 = or i32 %v4_8b80, %v1_8b68
  store i32 %v5_8b80, i32* %r8.global-to-local, align 4
  %v5_8b84 = trunc i32 %tmp86 to i8
  store i32 %v0_8ab0, i32* @r4, align 4
  %v3_8b9c33 = udiv i32 %v1_8b68, 256
  store i32 %v3_8b9c33, i32* %sl.global-to-local, align 4
  store i32 %v1_8ae4, i32* %fp.global-to-local, align 4
  %sext15 = mul i32 %v1_8b50, 65536
  %v4_8cc0 = sdiv i32 %sext15, 16777216
  %v2_8cf0 = icmp eq i32 %v1_8a98, 0
  %sext16 = mul i32 %v6_8998, 16777216
  %v4_8d04 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp83, 16777216
  %v4_8d20 = sdiv i32 %sext17, 16777216
  %v1_8c08 = trunc i32 %v4_8b44 to i8
  br label %dec_label_pc_8ba4

dec_label_pc_8ba4:                                ; preds = %bb97, %dec_label_pc_8ac4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8bb0 = call i32 @function_10ec8(i32 1510, i32 4)
  store i32 %v2_8bb0, i32* %r0.global-to-local, align 4
  store i32 %v2_8900, i32* %r2.global-to-local, align 4
  %v3_8bb8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8bb8, i32* %r3.global-to-local, align 4
  %v2_8bbc = load i32, i32* @r4, align 4
  %v5_8bbc = mul i32 %v2_8bbc, 4
  %v6_8bbc = add i32 %v5_8bbc, %v2_8900
  %v7_8bbc = inttoptr i32 %v6_8bbc to i32*
  store i32 %v2_8bb0, i32* %v7_8bbc, align 4
  %v0_8bc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_8bc0 = load i32, i32* %r3.global-to-local, align 4
  %v4_8bc0 = mul i32 %v1_8bc0, 4
  %v5_8bc0 = add i32 %v4_8bc0, %v0_8bc0
  %v6_8bc0 = inttoptr i32 %v5_8bc0 to i32*
  %v7_8bc0 = load i32, i32* %v6_8bc0, align 4
  store i32 %v7_8bc0, i32* %r4.global-to-local, align 4
  %v1_8bc4 = inttoptr i32 %v7_8bc0 to i8*
  %v2_8bc4 = load i8, i8* %v1_8bc4, align 1
  %tmp = urem i8 %v2_8bc4, 16
  %v1_8bc8 = zext i8 %tmp to i32
  %v1_8bcc = or i32 %v1_8bc8, 64
  store i32 %v1_8bcc, i32* %r2.global-to-local, align 4
  %v1_8bd0 = trunc i32 %v1_8bcc to i8
  store i8 %v1_8bd0, i8* %v1_8bc4, align 1
  %v0_8bd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bd4 = inttoptr i32 %v0_8bd4 to i8*
  %v2_8bd4 = load i8, i8* %v1_8bd4, align 1
  %v1_8bd8 = and i8 %v2_8bd4, -16
  %v1_8bdc = or i8 %v1_8bd8, 5
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  store i8 %v1_8bdc, i8* %v1_8bd4, align 1
  %v2_8bec = load i32, i32* %r4.global-to-local, align 4
  %v3_8bec = add i32 %v2_8bec, 1
  %v4_8bec = inttoptr i32 %v3_8bec to i8*
  store i8 %v5_8938, i8* %v4_8bec, align 1
  %v2_8bf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8bf4 = add i32 %v2_8bf4, 8
  %v4_8bf4 = inttoptr i32 %v3_8bf4 to i8*
  store i8 %v5_8970, i8* %v4_8bf4, align 1
  store i32 %v4_8b44, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_8c00 = load i32, i32* %r1.global-to-local, align 4
  %v9_8c00 = icmp eq i32 %v0_8c00, 0
  store i1 %v9_8c00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8b60, i32* %r2.global-to-local, align 4
  %v2_8c08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c08 = add i32 %v2_8c08, 4
  %v4_8c08 = inttoptr i32 %v3_8c08 to i8*
  store i8 %v1_8c08, i8* %v4_8c08, align 1
  store i32 %v4_8b0c, i32* %r1.global-to-local, align 4
  %v0_8c10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c10, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_8ba4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_8c14 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c14 = add i32 %v3_8c14, 6
  %v5_8c14 = inttoptr i32 %v4_8c14 to i8*
  store i8 64, i8* %v5_8c14, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_8ba4, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_8c1c = load i32, i32* %r2.global-to-local, align 4
  %v1_8c1c = trunc i32 %v0_8c1c to i8
  %v2_8c1c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c1c = add i32 %v2_8c1c, 3
  %v4_8c1c = inttoptr i32 %v3_8c1c to i8*
  store i8 %v1_8c1c, i8* %v4_8c1c, align 1
  %v0_8c20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c20 = trunc i32 %v0_8c20 to i8
  %v2_8c20 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c20 = add i32 %v2_8c20, 2
  %v4_8c20 = inttoptr i32 %v3_8c20 to i8*
  store i8 %v1_8c20, i8* %v4_8c20, align 1
  %v0_8c24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c24, label %bb88, label %bb87

bb87:                                             ; preds = %.thread
  %v1_8c24 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_8c24, i32* %r2.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %.thread, %bb87
  store i32 %v3_8b64, i32* %r1.global-to-local, align 4
  %v0_8c2c = load i32, i32* %r3.global-to-local, align 4
  %v1_8c2c = trunc i32 %v0_8c2c to i8
  %v2_8c2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c2c = add i32 %v2_8c2c, 9
  %v4_8c2c = inttoptr i32 %v3_8c2c to i8*
  store i8 %v1_8c2c, i8* %v4_8c2c, align 1
  %v0_8c30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c30, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_8c30 = load i32, i32* %r2.global-to-local, align 4
  %v2_8c30 = trunc i32 %v1_8c30 to i8
  %v3_8c30 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c30 = add i32 %v3_8c30, 7
  %v5_8c30 = inttoptr i32 %v4_8c30 to i8*
  store i8 %v2_8c30, i8* %v5_8c30, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  %v3_8c34 = load i32, i32* %stack_var_-40, align 4
  %v5_8c3c = mul i32 %v3_8c34, 24
  store i32 %v5_8c3c, i32* %r3.global-to-local, align 4
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  %v1_8c44 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c44 = add i32 %v1_8c44, 12
  %v3_8c44 = inttoptr i32 %v2_8c44 to i32*
  store i32 %v6_8a20, i32* %v3_8c44, align 4
  %v0_8c48 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c48 = load i32, i32* @sb, align 4
  %v2_8c48 = add i32 %v1_8c48, %v0_8c48
  store i32 %v2_8c48, i32* %r3.global-to-local, align 4
  %v1_8c4c = add i32 %v2_8c48, 16
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v0_8c50 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c50 = trunc i32 %v0_8c50 to i8
  %v2_8c50 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c50 = add i32 %v2_8c50, 5
  %v4_8c50 = inttoptr i32 %v3_8c50 to i8*
  store i8 %v1_8c50, i8* %v4_8c50, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_8c58 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c58 = add i32 %v0_8c58, 20
  store i32 %v1_8c58, i32* %r1.global-to-local, align 4
  %v3_8c5c = add i32 %v0_8c58, 22
  %v4_8c5c = inttoptr i32 %v3_8c5c to i8*
  store i8 101, i8* %v4_8c5c, align 1
  %v0_8c60 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c60 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c60 = add i32 %v1_8c60, 16
  %v3_8c60 = inttoptr i32 %v2_8c60 to i32*
  store i32 %v0_8c60, i32* %v3_8c60, align 4
  %v0_8c64 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c64 = add i32 %v0_8c64, 24
  store i32 %v1_8c64, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_8c6c = load i32, i32* %r3.global-to-local, align 4
  %v1_8c6c = add i32 %v0_8c6c, -93
  store i32 %v1_8c6c, i32* %r3.global-to-local, align 4
  %v2_8c70 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c70 = add i32 %v2_8c70, 3
  %v4_8c70 = inttoptr i32 %v3_8c70 to i8*
  store i8 88, i8* %v4_8c70, align 1
  %v0_8c74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c74 = trunc i32 %v0_8c74 to i8
  %v2_8c74 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c74 = add i32 %v2_8c74, 12
  %v4_8c74 = inttoptr i32 %v3_8c74 to i8*
  store i8 %v1_8c74, i8* %v4_8c74, align 1
  %v0_8c78 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c78 = trunc i32 %v0_8c78 to i8
  %v2_8c78 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c78 = add i32 %v2_8c78, 13
  %v4_8c78 = inttoptr i32 %v3_8c78 to i8*
  store i8 %v1_8c78, i8* %v4_8c78, align 1
  %v0_8c7c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c7c = add i32 %v0_8c7c, 38
  %v2_8c7c = inttoptr i32 %v1_8c7c to i8*
  %v3_8c7c = load i8, i8* %v2_8c7c, align 1
  %tmp103 = urem i8 %v3_8c7c, 16
  %v1_8c80 = zext i8 %tmp103 to i32
  %v1_8c84 = or i32 %v1_8c80, 64
  store i32 %v1_8c84, i32* %r3.global-to-local, align 4
  %v1_8c88 = trunc i32 %v1_8c84 to i8
  store i8 %v1_8c88, i8* %v2_8c7c, align 1
  %v0_8c8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c8c = add i32 %v0_8c8c, 38
  %v2_8c8c = inttoptr i32 %v1_8c8c to i8*
  %v3_8c8c = load i8, i8* %v2_8c8c, align 1
  %v1_8c90 = and i8 %v3_8c8c, -16
  %v1_8c94 = or i8 %v1_8c90, 5
  store i8 %v1_8c94, i8* %v2_8c8c, align 1
  %v0_8ca0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ca0 = add i32 %v0_8ca0, 38
  store i32 %v1_8ca0, i32* @r5, align 4
  %v3_8ca4 = add i32 %v0_8ca0, 39
  %v4_8ca4 = inttoptr i32 %v3_8ca4 to i8*
  store i8 %v5_8938, i8* %v4_8ca4, align 1
  store i32 %v4_8b54, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_8b74, i32* %r2.global-to-local, align 4
  %v2_8cb4 = load i32, i32* @r5, align 4
  %v3_8cb4 = add i32 %v2_8cb4, 4
  %v4_8cb4 = inttoptr i32 %v3_8cb4 to i8*
  store i8 %v5_8b84, i8* %v4_8cb4, align 1
  %v0_8cb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cb8 = trunc i32 %v0_8cb8 to i8
  %v2_8cb8 = load i32, i32* @r5, align 4
  %v3_8cb8 = add i32 %v2_8cb8, 2
  %v4_8cb8 = inttoptr i32 %v3_8cb8 to i8*
  store i8 %v1_8cb8, i8* %v4_8cb8, align 1
  %v0_8cbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cbc, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  store i32 %v4_8cc0, i32* %r1.global-to-local, align 4
  %v0_8cc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cc4 = trunc i32 %v0_8cc4 to i8
  %v2_8cc4 = load i32, i32* @r5, align 4
  %v3_8cc4 = add i32 %v2_8cc4, 3
  %v4_8cc4 = inttoptr i32 %v3_8cc4 to i8*
  store i8 %v1_8cc4, i8* %v4_8cc4, align 1
  store i32 %v6_8954, i32* %r2.global-to-local, align 4
  %v0_8ccc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8ccc, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_8ccc = load i32, i32* %r3.global-to-local, align 4
  %v2_8ccc = trunc i32 %v1_8ccc to i8
  %v3_8ccc = load i32, i32* @r5, align 4
  %v4_8ccc = add i32 %v3_8ccc, 6
  %v5_8ccc = inttoptr i32 %v4_8ccc to i8*
  store i8 %v2_8ccc, i8* %v5_8ccc, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_8cd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cd4 = trunc i32 %v0_8cd4 to i8
  %v2_8cd4 = load i32, i32* @r5, align 4
  %v3_8cd4 = add i32 %v2_8cd4, 5
  %v4_8cd4 = inttoptr i32 %v3_8cd4 to i8*
  store i8 %v1_8cd4, i8* %v4_8cd4, align 1
  %v0_8cd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v0_8cd8 to i8
  %v2_8cd8 = load i32, i32* @r5, align 4
  %v3_8cd8 = add i32 %v2_8cd8, 8
  %v4_8cd8 = inttoptr i32 %v3_8cd8 to i8*
  store i8 %v1_8cd8, i8* %v4_8cd8, align 1
  %v0_8cdc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cdc, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_8cdc = load i32, i32* %ip.global-to-local, align 4
  %v2_8cdc = trunc i32 %v1_8cdc to i8
  %v3_8cdc = load i32, i32* @r5, align 4
  %v4_8cdc = add i32 %v3_8cdc, 7
  %v5_8cdc = inttoptr i32 %v4_8cdc to i8*
  store i8 %v2_8cdc, i8* %v5_8cdc, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_8ce0 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ce0 = trunc i32 %v0_8ce0 to i8
  %v2_8ce0 = load i32, i32* @r5, align 4
  %v3_8ce0 = add i32 %v2_8ce0, 9
  %v4_8ce0 = inttoptr i32 %v3_8ce0 to i8*
  store i8 %v1_8ce0, i8* %v4_8ce0, align 1
  %v0_8ce4 = call i32 @function_d208()
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  store i32 %v1_8a98, i32* %r1.global-to-local, align 4
  store i1 %v2_8cf0, i1* %cpsr_z.global-to-local, align 1
  %v1_8cf4 = sub i32 1023, %v0_8ce4
  store i32 %v1_8cf4, i32* %r3.global-to-local, align 4
  br i1 %v2_8cf0, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb96
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 16
  %v4_8cfc = inttoptr i32 %v3_8cfc to i32*
  store i32 %v1_8cf4, i32* %v4_8cfc, align 4
  br label %bb97

.thread19:                                        ; preds = %bb96
  %v1_8cf8 = load i32, i32* %r4.global-to-local, align 4
  %v2_8cf8 = add i32 %v1_8cf8, 16
  %v3_8cf8 = inttoptr i32 %v2_8cf8 to i32*
  %v4_8cf8 = load i32, i32* %v3_8cf8, align 4
  store i32 %v4_8cf8, i32* %r3.global-to-local, align 4
  %v2_8d00 = load i32, i32* @r5, align 4
  %v3_8d00 = add i32 %v2_8d00, 16
  %v4_8d00 = inttoptr i32 %v3_8d00 to i32*
  store i32 %v4_8cf8, i32* %v4_8d00, align 4
  br label %bb97

bb97:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_8d04, i32* %r3.global-to-local, align 4
  %v0_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d08 = add i32 %v0_8d08, 58
  store i32 %v1_8d08, i32* @r6, align 4
  %v1_8d0c = load i32, i32* @r5, align 4
  %v2_8d0c = add i32 %v1_8d0c, 12
  %v3_8d0c = inttoptr i32 %v2_8d0c to i32*
  store i32 %v0_8ce4, i32* %v3_8d0c, align 4
  %v0_8d10 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d10 = trunc i32 %v0_8d10 to i8
  %v2_8d10 = load i32, i32* @r6, align 4
  %v3_8d10 = add i32 %v2_8d10, 1
  %v4_8d10 = inttoptr i32 %v3_8d10 to i8*
  store i8 %v1_8d10, i8* %v4_8d10, align 1
  %v3_8d14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8d14, i32* %r3.global-to-local, align 4
  store i32 %v1_88d4, i32* %r1.global-to-local, align 4
  %v1_8d1c = add i32 %v3_8d14, 1
  store i32 %v1_8d1c, i32* @r4, align 4
  store i32 %v4_8d20, i32* %r2.global-to-local, align 4
  %v9_8d24 = icmp eq i32 %v1_8d1c, %v1_88d4
  store i1 %v9_8d24, i1* %cpsr_z.global-to-local, align 1
  %v0_8d28 = load i32, i32* %sl.global-to-local, align 4
  %v1_8d28 = trunc i32 %v0_8d28 to i8
  %v2_8d28 = load i32, i32* @r6, align 4
  %v3_8d28 = add i32 %v2_8d28, 5
  %v4_8d28 = inttoptr i32 %v3_8d28 to i8*
  store i8 %v1_8d28, i8* %v4_8d28, align 1
  %v0_8d2c = load i32, i32* %r2.global-to-local, align 4
  %v1_8d2c = trunc i32 %v0_8d2c to i8
  %v2_8d2c = load i32, i32* @r6, align 4
  %v3_8d2c = inttoptr i32 %v2_8d2c to i8*
  store i8 %v1_8d2c, i8* %v3_8d2c, align 1
  %v0_8d30 = load i32, i32* @r7, align 4
  %v1_8d30 = trunc i32 %v0_8d30 to i8
  %v2_8d30 = load i32, i32* @r6, align 4
  %v3_8d30 = add i32 %v2_8d30, 2
  %v4_8d30 = inttoptr i32 %v3_8d30 to i8*
  store i8 %v1_8d30, i8* %v4_8d30, align 1
  %v0_8d34 = load i32, i32* %fp.global-to-local, align 4
  %v1_8d34 = trunc i32 %v0_8d34 to i8
  %v2_8d34 = load i32, i32* @r6, align 4
  %v3_8d34 = add i32 %v2_8d34, 3
  %v4_8d34 = inttoptr i32 %v3_8d34 to i8*
  store i8 %v1_8d34, i8* %v4_8d34, align 1
  %v0_8d38 = load i32, i32* %r8.global-to-local, align 4
  %v1_8d38 = trunc i32 %v0_8d38 to i8
  %v2_8d38 = load i32, i32* @r6, align 4
  %v3_8d38 = add i32 %v2_8d38, 4
  %v4_8d38 = inttoptr i32 %v3_8d38 to i8*
  store i8 %v1_8d38, i8* %v4_8d38, align 1
  %v0_8d3c = load i32, i32* @r4, align 4
  store i32 %v0_8d3c, i32* %stack_var_-40, align 4
  %v5_8d40 = icmp slt i32 %v1_8d1c, %v1_88d4
  br i1 %v5_8d40, label %dec_label_pc_8ba4, label %dec_label_pc_8d44.preheader

dec_label_pc_8d44.preheader:                      ; preds = %bb97, %dec_label_pc_8a7c
  %v1_8d64 = add i32 %v6_89cc, 66
  %v1_8d68 = add i32 %v6_89cc, 8
  %v2_8d7c = icmp eq i32 %v6_8a20, -1
  %v7_8d7c = icmp eq i32 %v6_8a20, -1
  %v3_8fa0 = icmp eq i32 %v3_8a9c, 65535
  %v2_9010 = icmp eq i32 %v1_8a98, 0
  %v2_8dd8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8df0 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8e00 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e0c = ptrtoint i32* %stack_var_-50 to i32
  %v2_8e20 = icmp eq i32 %v1_89ec, 0
  br label %dec_label_pc_8d44

dec_label_pc_8d44:                                ; preds = %dec_label_pc_8d44.preheader, %dec_label_pc_904c
  store i32 %v1_88d4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_8a94, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_8a94, label %dec_label_pc_904c, label %dec_label_pc_8d58

dec_label_pc_8d58:                                ; preds = %dec_label_pc_8d44
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r1.global-to-local, align 4
  store i32 %v1_8d64, i32* @fp, align 4
  store i32 %v1_8d68, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_8efc

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8efc
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  store i1 %v7_8d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d7c, label %dec_label_pc_8f90, label %dec_label_pc_8d84

dec_label_pc_8d84:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8d78
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8fa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8fa0, label %dec_label_pc_8fac, label %dec_label_pc_8d98

dec_label_pc_8d98:                                ; preds = %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge, %dec_label_pc_8d84
  %v1_8d9c = phi i32 [ %v1_8d9c.pre, %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge ], [ 65535, %dec_label_pc_8d84 ]
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v9_8d9c = icmp eq i32 %v3_8aa0, %v1_8d9c
  store i1 %v9_8d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8d9c, label %dec_label_pc_8fe4, label %dec_label_pc_8da4

dec_label_pc_8da4:                                ; preds = %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge, %dec_label_pc_8d98
  %v1_8da8 = phi i32 [ %v1_8da8.pre, %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge ], [ %v1_8d9c, %dec_label_pc_8d98 ]
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v9_8da8 = icmp eq i32 %v3_8aa4, %v1_8da8
  store i1 %v9_8da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8da8, label %dec_label_pc_9000, label %dec_label_pc_8db0

dec_label_pc_8db0:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8da4
  store i32 %v1_8a98, i32* %r3.global-to-local, align 4
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9010, label %dec_label_pc_9024, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_8db0
  %v1_8db8 = load i32, i32* @r5, align 4
  %v2_8db8 = add i32 %v1_8db8, 16
  %v3_8db8 = inttoptr i32 %v2_8db8 to i32*
  %v4_8db8 = load i32, i32* %v3_8db8, align 4
  store i32 %v4_8db8, i32* %r3.global-to-local, align 4
  %v2_8dbc = load i32, i32* @r6, align 4
  %v3_8dbc = add i32 %v2_8dbc, 16
  %v4_8dbc = inttoptr i32 %v3_8dbc to i32*
  store i32 %v4_8db8, i32* %v4_8dbc, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_8dc4:                                ; preds = %bb102, %.thread20, %dec_label_pc_9024
  %v0_8dc4 = call i32 @function_d208()
  store i32 %v0_8dc4, i32* %r0.global-to-local, align 4
  store i32 %v0_8dc4, i32* %stack_var_-44, align 4
  %v0_8dcc = call i32 @function_d208()
  store i32 %v0_8dcc, i32* %r0.global-to-local, align 4
  store i32 %v0_8dcc, i32* %stack_var_-48, align 4
  %v0_8dd4 = call i32 @function_d208()
  store i32 %v2_8dd8, i32* %r1.global-to-local, align 4
  store i32 %v0_8dd4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  store i32 %v0_8de4, i32* %r0.global-to-local, align 4
  %v3_8de8 = call i32 @function_ffb4(i32 %v0_8de4, i32 %v2_8dd8, i32 4)
  %v0_8dec = load i32, i32* @r8, align 4
  %v1_8dec = add i32 %v0_8dec, 6
  store i32 %v1_8dec, i32* %r0.global-to-local, align 4
  store i32 %v2_8df0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8df8 = call i32 @function_ffb4(i32 %v1_8dec, i32 %v2_8df0, i32 4)
  %v0_8dfc = load i32, i32* @r8, align 4
  %v1_8dfc = add i32 %v0_8dfc, 4
  store i32 %v1_8dfc, i32* %r0.global-to-local, align 4
  store i32 %v2_8e00, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e08 = call i32 @function_ffb4(i32 %v1_8dfc, i32 %v2_8e00, i32 2)
  store i32 %v2_8e0c, i32* %r1.global-to-local, align 4
  %v0_8e10 = load i32, i32* @r8, align 4
  %v1_8e10 = add i32 %v0_8e10, 10
  store i32 %v1_8e10, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e18 = call i32 @function_ffb4(i32 %v1_8e10, i32 %v2_8e0c, i32 2)
  store i32 %v3_8e18, i32* %r0.global-to-local, align 4
  store i32 %v1_89ec, i32* %r1.global-to-local, align 4
  store i1 %v2_8e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e20, label %dec_label_pc_8e28, label %dec_label_pc_9030

dec_label_pc_8e28:                                ; preds = %dec_label_pc_8dc4, %dec_label_pc_9030
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e2c = load i32, i32* @sl, align 4
  %v1_8e2c = trunc i32 %v0_8e2c to i8
  %v2_8e2c = load i32, i32* @r5, align 4
  %v3_8e2c = add i32 %v2_8e2c, 10
  %v4_8e2c = inttoptr i32 %v3_8e2c to i8*
  store i8 %v1_8e2c, i8* %v4_8e2c, align 1
  %v0_8e30 = load i32, i32* @sl, align 4
  %v1_8e30 = trunc i32 %v0_8e30 to i8
  %v2_8e30 = load i32, i32* @r5, align 4
  %v3_8e30 = add i32 %v2_8e30, 11
  %v4_8e30 = inttoptr i32 %v3_8e30 to i8*
  store i8 %v1_8e30, i8* %v4_8e30, align 1
  %v0_8e34 = load i32, i32* @r5, align 4
  store i32 %v0_8e34, i32* @r0, align 4
  %v2_8e38 = call i32 @function_c690(i32 %v0_8e34, i32 20)
  %v3_8e38 = trunc i32 %v2_8e38 to i8
  %v4_8e3c = sdiv i32 %v2_8e38, 256
  store i32 %v4_8e3c, i32* %r3.global-to-local, align 4
  %v1_8e40 = trunc i32 %v4_8e3c to i8
  %v2_8e40 = load i32, i32* @r5, align 4
  %v3_8e40 = add i32 %v2_8e40, 11
  %v4_8e40 = inttoptr i32 %v3_8e40 to i8*
  store i8 %v1_8e40, i8* %v4_8e40, align 1
  %v3_8e44 = load i32, i32* @r5, align 4
  %v4_8e44 = add i32 %v3_8e44, 10
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 %v3_8e38, i8* %v5_8e44, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e4c = load i32, i32* @sl, align 4
  %v1_8e4c = trunc i32 %v0_8e4c to i8
  %v2_8e4c = load i32, i32* @r6, align 4
  %v3_8e4c = add i32 %v2_8e4c, 10
  %v4_8e4c = inttoptr i32 %v3_8e4c to i8*
  store i8 %v1_8e4c, i8* %v4_8e4c, align 1
  %v0_8e50 = load i32, i32* @sl, align 4
  %v1_8e50 = trunc i32 %v0_8e50 to i8
  %v2_8e50 = load i32, i32* @r6, align 4
  %v3_8e50 = add i32 %v2_8e50, 11
  %v4_8e50 = inttoptr i32 %v3_8e50 to i8*
  store i8 %v1_8e50, i8* %v4_8e50, align 1
  %v0_8e54 = load i32, i32* @r6, align 4
  store i32 %v0_8e54, i32* @r0, align 4
  %v2_8e58 = call i32 @function_c690(i32 %v0_8e54, i32 20)
  %v3_8e58 = trunc i32 %v2_8e58 to i8
  store i32 %v2_8e58, i32* %r0.global-to-local, align 4
  %v4_8e5c = sdiv i32 %v2_8e58, 256
  store i32 %v4_8e5c, i32* %r3.global-to-local, align 4
  %v3_8e60 = load i32, i32* @r6, align 4
  %v4_8e60 = add i32 %v3_8e60, 10
  %v5_8e60 = inttoptr i32 %v4_8e60 to i8*
  store i8 %v3_8e58, i8* %v5_8e60, align 1
  %v0_8e64 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e64 = trunc i32 %v0_8e64 to i8
  %v2_8e64 = load i32, i32* @r6, align 4
  %v3_8e64 = add i32 %v2_8e64, 11
  %v4_8e64 = inttoptr i32 %v3_8e64 to i8*
  store i8 %v1_8e64, i8* %v4_8e64, align 1
  %v0_8e68 = load i32, i32* @r7, align 4
  %v1_8e68 = add i32 %v0_8e68, 4
  %v2_8e68 = inttoptr i32 %v1_8e68 to i8*
  %v3_8e68 = load i8, i8* %v2_8e68, align 1
  %v4_8e68 = zext i8 %v3_8e68 to i32
  store i32 %v4_8e68, i32* %r3.global-to-local, align 4
  %v1_8e6c = add i32 %v0_8e68, 5
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  store i32 %v0_8e68, i32* @r1, align 4
  %v4_8e74 = mul nuw nsw i32 %v4_8e6c, 256
  %v5_8e74 = or i32 %v4_8e74, %v4_8e68
  store i32 %v5_8e74, i32* %r2.global-to-local, align 4
  %v0_8e78 = load i32, i32* @sl, align 4
  %v1_8e78 = trunc i32 %v0_8e78 to i8
  %v3_8e78 = add i32 %v0_8e68, 6
  %v4_8e78 = inttoptr i32 %v3_8e78 to i8*
  store i8 %v1_8e78, i8* %v4_8e78, align 1
  store i32 %v1_8d68, i32* %r3.global-to-local, align 4
  %v0_8e80 = load i32, i32* @sl, align 4
  %v1_8e80 = trunc i32 %v0_8e80 to i8
  %v2_8e80 = load i32, i32* @r7, align 4
  %v3_8e80 = add i32 %v2_8e80, 7
  %v4_8e80 = inttoptr i32 %v3_8e80 to i8*
  store i8 %v1_8e80, i8* %v4_8e80, align 1
  %v0_8e84 = load i32, i32* @r6, align 4
  store i32 %v0_8e84, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_c6ec(i32 %v0_8e84, i32 %v0_8e68, i32 %v5_8e74, i32 %v1_8d68)
  %v5_8e88 = trunc i32 %v4_8e88 to i8
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v3_8e8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8e8c, i32* %r3.global-to-local, align 4
  %v3_8e90 = mul i32 %v3_8e8c, 32
  store i32 %v3_8e90, i32* %r2.global-to-local, align 4
  %v0_8e94 = load i32, i32* @r5, align 4
  %v1_8e94 = add i32 %v0_8e94, 16
  %v2_8e94 = inttoptr i32 %v1_8e94 to i32*
  %v3_8e94 = load i32, i32* %v2_8e94, align 4
  store i32 %v3_8e94, i32* %r1.global-to-local, align 4
  %v5_8e98 = mul i32 %v3_8e8c, 24
  store i32 %v5_8e98, i32* %r2.global-to-local, align 4
  %v4_8e9c35 = udiv i32 %v4_8e88, 256
  %v1_8ea0 = trunc i32 %v4_8e9c35 to i8
  %v2_8ea0 = load i32, i32* @r7, align 4
  %v3_8ea0 = add i32 %v2_8ea0, 7
  %v4_8ea0 = inttoptr i32 %v3_8ea0 to i8*
  store i8 %v1_8ea0, i8* %v4_8ea0, align 1
  %v0_8ea4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8ea4 = load i32, i32* @sb, align 4
  %v2_8ea4 = add i32 %v1_8ea4, %v0_8ea4
  store i32 %v2_8ea4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8eac = load i32, i32* @r7, align 4
  %v4_8eac = add i32 %v3_8eac, 6
  %v5_8eac = inttoptr i32 %v4_8eac to i8*
  store i8 %v5_8e88, i8* %v5_8eac, align 1
  %v0_8eb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8eb0 = load i32, i32* %lr.global-to-local, align 4
  %v2_8eb0 = add i32 %v1_8eb0, 4
  %v3_8eb0 = inttoptr i32 %v2_8eb0 to i32*
  store i32 %v0_8eb0, i32* %v3_8eb0, align 4
  %v0_8eb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8eb4 = trunc i32 %v0_8eb4 to i8
  %v2_8eb4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8eb4 = load i32, i32* @sb, align 4
  %v4_8eb4 = add i32 %v3_8eb4, %v2_8eb4
  %v5_8eb4 = inttoptr i32 %v4_8eb4 to i8*
  store i8 %v1_8eb4, i8* %v5_8eb4, align 1
  %v0_8eb8 = load i32, i32* @sl, align 4
  %v1_8eb8 = trunc i32 %v0_8eb8 to i8
  %v2_8eb8 = load i32, i32* %lr.global-to-local, align 4
  %v3_8eb8 = add i32 %v2_8eb8, 2
  %v4_8eb8 = inttoptr i32 %v3_8eb8 to i8*
  store i8 %v1_8eb8, i8* %v4_8eb8, align 1
  %v0_8ebc = load i32, i32* @sl, align 4
  %v1_8ebc = trunc i32 %v0_8ebc to i8
  %v2_8ebc = load i32, i32* %lr.global-to-local, align 4
  %v3_8ebc = add i32 %v2_8ebc, 1
  %v4_8ebc = inttoptr i32 %v3_8ebc to i8*
  store i8 %v1_8ebc, i8* %v4_8ebc, align 1
  %v0_8ec0 = load i32, i32* @sl, align 4
  %v1_8ec0 = trunc i32 %v0_8ec0 to i8
  %v2_8ec0 = load i32, i32* %lr.global-to-local, align 4
  %v3_8ec0 = add i32 %v2_8ec0, 3
  %v4_8ec0 = inttoptr i32 %v3_8ec0 to i8*
  store i8 %v1_8ec0, i8* %v4_8ec0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ecc = load i32, i32* @r5, align 4
  store i32 %v0_8ecc, i32* %r1.global-to-local, align 4
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v0_8ed4 = load i32, i32* @fp, align 4
  store i32 %v0_8ed4, i32* %r2.global-to-local, align 4
  %v0_8ed8 = load i32, i32* %lr.global-to-local, align 4
  %v6_8ee0 = inttoptr i32 %v0_8ecc to i32*
  %v7_8ee0 = call i32 @function_10b78(i32 %v3_8a44, i32* %v6_8ee0, i32 %v0_8ed4, i32 16384, i32 %v0_8ed8, i32 16)
  %v3_8ee4 = load i32, i32* %stack_var_-40, align 4
  %v1_8ee8 = add i32 %v3_8ee4, 1
  store i32 %v1_8ee8, i32* %r0.global-to-local, align 4
  store i32 %v1_88d4, i32* %r3.global-to-local, align 4
  %v9_8ef0 = icmp eq i32 %v1_8ee8, %v1_88d4
  store i1 %v9_8ef0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ee8, i32* %stack_var_-40, align 4
  %v6_8ef8 = icmp slt i32 %v1_8ee8, %v1_88d4
  br i1 %v6_8ef8, label %dec_label_pc_8efc, label %dec_label_pc_904c

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8e28, %dec_label_pc_8d58
  %v1_8f10 = phi i32 [ %v1_8ee8, %dec_label_pc_8e28 ], [ 0, %dec_label_pc_8d58 ]
  %v5_8f00 = mul i32 %v1_8f10, 24
  %v1_8f04 = load i32, i32* @sb, align 4
  %v2_8f04 = add i32 %v1_8f04, %v5_8f00
  store i32 %v2_8f04, i32* %r3.global-to-local, align 4
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v1_8f0c = add i32 %v2_8f04, 20
  %v2_8f0c = inttoptr i32 %v1_8f0c to i8*
  %v3_8f0c = load i8, i8* %v2_8f0c, align 1
  %v4_8f0c = zext i8 %v3_8f0c to i32
  store i32 %v4_8f0c, i32* %r2.global-to-local, align 4
  %v4_8f10 = mul i32 %v1_8f10, 4
  %v5_8f10 = add i32 %v4_8f10, %v2_8900
  %v6_8f10 = inttoptr i32 %v5_8f10 to i32*
  %v7_8f10 = load i32, i32* %v6_8f10, align 4
  store i32 %v7_8f10, i32* @r5, align 4
  %v2_8f14 = icmp ugt i8 %v3_8f0c, 30
  %v7_8f14 = icmp eq i8 %v3_8f0c, 31
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  %v1_8f18 = add i32 %v7_8f10, 24
  store i32 %v1_8f18, i32* @r8, align 4
  %v1_8f1c = add i32 %v7_8f10, 38
  store i32 %v1_8f1c, i32* @r6, align 4
  %v1_8f20 = add i32 %v7_8f10, 58
  store i32 %v1_8f20, i32* @r7, align 4
  %v2_8f24 = xor i1 %v7_8f14, true
  %v3_8f24 = and i1 %v2_8f14, %v2_8f24
  br i1 %v3_8f24, label %dec_label_pc_8d78, label %dec_label_pc_8f28

dec_label_pc_8f28:                                ; preds = %dec_label_pc_8efc
  %v1_8f28 = add i32 %v2_8f04, 16
  %v2_8f28 = inttoptr i32 %v1_8f28 to i32*
  %v3_8f28 = load i32, i32* %v2_8f28, align 4
  store i32 %v3_8f28, i32* %r4.global-to-local, align 4
  %v0_8f2c = call i32 @function_d208()
  store i32 %v0_8f2c, i32* %r0.global-to-local, align 4
  %v3_8f30 = load i32, i32* %stack_var_-40, align 4
  %v5_8f38 = mul i32 %v3_8f30, 24
  %v0_8f3c = load i32, i32* %r4.global-to-local, align 4
  %v1_8f40 = load i32, i32* @sb, align 4
  %v2_8f40 = add i32 %v1_8f40, %v5_8f38
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_8f44 = and i32 %v0_8f3c, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_8f44, i32* %r3.global-to-local, align 4
  %v1_8f3c = udiv i32 %v0_8f3c, 256
  %v3_8f48 = and i32 %v1_8f3c, 65280
  store i32 %v3_8f48, i32* %r2.global-to-local, align 4
  %v3_8f4c = mul i32 %v0_8f3c, 16777216
  store i32 %v3_8f4c, i32* %ip.global-to-local, align 4
  %v1_8f50 = add i32 %v2_8f40, 20
  %v2_8f50 = inttoptr i32 %v1_8f50 to i8*
  %v3_8f50 = load i8, i8* %v2_8f50, align 1
  %v4_8f50 = zext i8 %v3_8f50 to i32
  store i32 %v4_8f50, i32* %lr.global-to-local, align 4
  %v4_8f54 = mul i32 %v1_8f44, 256
  %v5_8f54 = or i32 %v4_8f54, %v3_8f4c
  store i32 %v5_8f54, i32* %ip.global-to-local, align 4
  %v4_8f58 = udiv i32 %v0_8f3c, 16777216
  %v5_8f58 = or i32 %v3_8f48, %v4_8f58
  %v2_8f5c = or i32 %v5_8f58, %v5_8f54
  %v7_8f60 = lshr i32 %v0_8f2c, %v4_8f50
  %v8_8f60 = add i32 %v7_8f60, %v2_8f5c
  %v3_8f6c = mul i32 %v8_8f60, 16777216
  %v1_8f70 = and i32 %v8_8f60, 65280
  store i32 %v1_8f70, i32* %r0.global-to-local, align 4
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  %v4_8f7c = mul nuw nsw i32 %v1_8f70, 256
  %v5_8f7c = or i32 %v4_8f7c, %v3_8f6c
  store i32 %v5_8f7c, i32* %r1.global-to-local, align 4
  %v2_8f80 = call i32 @llvm.bswap.i32(i32 %v8_8f60)
  store i32 %v2_8f80, i32* %r3.global-to-local, align 4
  store i1 %v7_8d7c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f88 = load i32, i32* @r5, align 4
  %v2_8f88 = add i32 %v1_8f88, 16
  %v3_8f88 = inttoptr i32 %v2_8f88 to i32*
  store i32 %v2_8f80, i32* %v3_8f88, align 4
  br i1 %v2_8d7c, label %dec_label_pc_8f90, label %dec_label_pc_8d84

dec_label_pc_8f90:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8d78
  %v0_8f90 = call i32 @function_d208()
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8fa0, i1* %cpsr_z.global-to-local, align 1
  %v1_8fa4 = load i32, i32* @r5, align 4
  %v2_8fa4 = add i32 %v1_8fa4, 12
  %v3_8fa4 = inttoptr i32 %v2_8fa4 to i32*
  store i32 %v0_8f90, i32* %v3_8fa4, align 4
  br i1 %v3_8fa0, label %dec_label_pc_8fac, label %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge

dec_label_pc_8f90.dec_label_pc_8d98_crit_edge:    ; preds = %dec_label_pc_8f90
  %v1_8d9c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8d98

dec_label_pc_8fac:                                ; preds = %dec_label_pc_8f90, %dec_label_pc_8d84
  %v0_8fac = call i32 @function_d208()
  %v3_8fb4 = urem i32 %v0_8fac, 65536
  store i32 %v3_8fb4, i32* %r0.global-to-local, align 4
  %v1_8fbc = sub nsw i32 999, %v3_8fb4
  store i32 %v1_8fbc, i32* %r2.global-to-local, align 4
  %v3_8fc0 = sdiv i32 %v1_8fbc, 256
  store i32 %v3_8fc0, i32* %r1.global-to-local, align 4
  %v3_8fc434 = udiv i32 %v3_8fb4, 256
  store i32 %v3_8fc434, i32* %r3.global-to-local, align 4
  %v1_8fc8 = trunc i32 %v3_8fc434 to i8
  %v2_8fc8 = load i32, i32* @r5, align 4
  %v3_8fc8 = add i32 %v2_8fc8, 5
  %v4_8fc8 = inttoptr i32 %v3_8fc8 to i8*
  store i8 %v1_8fc8, i8* %v4_8fc8, align 1
  %v0_8fcc = load i32, i32* %r0.global-to-local, align 4
  %v1_8fcc = trunc i32 %v0_8fcc to i8
  %v2_8fcc = load i32, i32* @r5, align 4
  %v3_8fcc = add i32 %v2_8fcc, 4
  %v4_8fcc = inttoptr i32 %v3_8fcc to i8*
  store i8 %v1_8fcc, i8* %v4_8fcc, align 1
  %v0_8fd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8fd0 = trunc i32 %v0_8fd0 to i8
  %v2_8fd0 = load i32, i32* @r6, align 4
  %v3_8fd0 = add i32 %v2_8fd0, 5
  %v4_8fd0 = inttoptr i32 %v3_8fd0 to i8*
  store i8 %v1_8fd0, i8* %v4_8fd0, align 1
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v1_8fd8 = load i32, i32* @r4, align 4
  %v9_8fd8 = icmp eq i32 %v3_8aa0, %v1_8fd8
  store i1 %v9_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v0_8fdc = load i32, i32* %r2.global-to-local, align 4
  %v1_8fdc = trunc i32 %v0_8fdc to i8
  %v2_8fdc = load i32, i32* @r6, align 4
  %v3_8fdc = add i32 %v2_8fdc, 4
  %v4_8fdc = inttoptr i32 %v3_8fdc to i8*
  store i8 %v1_8fdc, i8* %v4_8fdc, align 1
  %v0_8fe0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8fe0, label %dec_label_pc_8fe4, label %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge

dec_label_pc_8fac.dec_label_pc_8da4_crit_edge:    ; preds = %dec_label_pc_8fac
  %v1_8da8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8da4

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8fac, %dec_label_pc_8d98
  %v0_8fe4 = call i32 @function_d208()
  %v1_8fe4 = trunc i32 %v0_8fe4 to i8
  store i32 %v0_8fe4, i32* %r0.global-to-local, align 4
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v4_8fec = sdiv i32 %v0_8fe4, 256
  store i32 %v4_8fec, i32* %r3.global-to-local, align 4
  %v1_8ff0 = load i32, i32* @r4, align 4
  %v9_8ff0 = icmp eq i32 %v3_8aa4, %v1_8ff0
  store i1 %v9_8ff0, i1* %cpsr_z.global-to-local, align 1
  %v3_8ff4 = load i32, i32* @r5, align 4
  %v4_8ff4 = add i32 %v3_8ff4, 58
  %v5_8ff4 = inttoptr i32 %v4_8ff4 to i8*
  store i8 %v1_8fe4, i8* %v5_8ff4, align 1
  %v0_8ff8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ff8 = trunc i32 %v0_8ff8 to i8
  %v2_8ff8 = load i32, i32* @r7, align 4
  %v3_8ff8 = add i32 %v2_8ff8, 1
  %v4_8ff8 = inttoptr i32 %v3_8ff8 to i8*
  store i8 %v1_8ff8, i8* %v4_8ff8, align 1
  %v0_8ffc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8ffc, label %dec_label_pc_9000, label %dec_label_pc_8db0

dec_label_pc_9000:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8da4
  %v0_9000 = call i32 @function_d208()
  %v1_9000 = trunc i32 %v0_9000 to i8
  store i32 %v0_9000, i32* %r0.global-to-local, align 4
  %v4_900436 = udiv i32 %v0_9000, 256
  %v1_9008 = trunc i32 %v4_900436 to i8
  %v2_9008 = load i32, i32* @r7, align 4
  %v3_9008 = add i32 %v2_9008, 3
  %v4_9008 = inttoptr i32 %v3_9008 to i8*
  store i8 %v1_9008, i8* %v4_9008, align 1
  store i32 %v1_8a98, i32* %r3.global-to-local, align 4
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9010, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9000
  %v1_9014 = load i32, i32* @r5, align 4
  %v2_9014 = add i32 %v1_9014, 16
  %v3_9014 = inttoptr i32 %v2_9014 to i32*
  %v4_9014 = load i32, i32* %v3_9014, align 4
  store i32 %v4_9014, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9000, %bb100
  %v3_9018 = load i32, i32* @r7, align 4
  %v4_9018 = add i32 %v3_9018, 2
  %v5_9018 = inttoptr i32 %v4_9018 to i8*
  store i8 %v1_9000, i8* %v5_9018, align 1
  %v0_901c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_901c, label %dec_label_pc_9024, label %bb102

bb102:                                            ; preds = %bb101
  %v1_901c = load i32, i32* %r3.global-to-local, align 4
  %v2_901c = load i32, i32* @r6, align 4
  %v3_901c = add i32 %v2_901c, 16
  %v4_901c = inttoptr i32 %v3_901c to i32*
  store i32 %v1_901c, i32* %v4_901c, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_9024:                                ; preds = %dec_label_pc_8db0, %bb101
  %v0_9024 = call i32 @function_d208()
  store i32 %v0_9024, i32* %r0.global-to-local, align 4
  %v1_9028 = load i32, i32* @r6, align 4
  %v2_9028 = add i32 %v1_9028, 16
  %v3_9028 = inttoptr i32 %v2_9028 to i32*
  store i32 %v0_9024, i32* %v3_9028, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_9030:                                ; preds = %dec_label_pc_8dc4
  %v0_9030 = load i32, i32* @r7, align 4
  %v1_9030 = add i32 %v0_9030, 8
  store i32 %v1_9030, i32* @r4, align 4
  store i32 %v1_9030, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r1.global-to-local, align 4
  %v2_903c = call i32 @function_d2bc(i32 %v1_9030, i32 %v6_89cc)
  store i32 %v2_903c, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r2.global-to-local, align 4
  %v0_9044 = load i32, i32* @sl, align 4
  %v1_9044 = trunc i32 %v0_9044 to i8
  %v2_9044 = load i32, i32* @r4, align 4
  %v4_9044 = add i32 %v2_9044, %v6_89cc
  %v5_9044 = inttoptr i32 %v4_9044 to i8*
  store i8 %v1_9044, i8* %v5_9044, align 1
  br label %dec_label_pc_8e28

dec_label_pc_904c:                                ; preds = %dec_label_pc_8e28, %dec_label_pc_8d44
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9050 = call i32 @function_108e4(i32* null)
  store i32 %v2_9050, i32* %r0.global-to-local, align 4
  store i32 %v2_8a30, i32* %r1.global-to-local, align 4
  %v9_9058 = icmp eq i32 %v2_8a30, %v2_9050
  store i1 %v9_9058, i1* %cpsr_z.global-to-local, align 1
  %v6_905c = icmp slt i32 %v2_8a30, %v2_9050
  br i1 %v6_905c, label %dec_label_pc_9060, label %dec_label_pc_8d44

dec_label_pc_9060:                                ; preds = %dec_label_pc_904c, %dec_label_pc_88d0, %dec_label_pc_9068
  %v29_9064 = phi i32 [ %v3_8a44, %dec_label_pc_88d0 ], [ %v1_906c, %dec_label_pc_9068 ], [ %v2_9050, %dec_label_pc_904c ]
  store i32 %v3_88d0, i32* %r4.global-to-local, align 4
  store i32 %v15_88d0, i32* %r8.global-to-local, align 4
  store i32 %v21_88d0, i32* %sl.global-to-local, align 4
  store i32 %v24_88d0, i32* %fp.global-to-local, align 4
  ret i32 %v29_9064

dec_label_pc_9068:                                ; preds = %dec_label_pc_8a54
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v1_906c = call i32 @function_10640(i32 %v3_8a44)
  store i32 %v1_906c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9060

; uselistorder directives
  uselistorder i32 %v1_906c, { 1, 0 }
  uselistorder i32 %v0_9000, { 0, 2, 1 }
  uselistorder i32 %v0_8fe4, { 0, 2, 1 }
  uselistorder i32 %v3_8fb4, { 0, 2, 1 }
  uselistorder i32 %v2_8f80, { 1, 0 }
  uselistorder i32 %v8_8f60, { 1, 2, 0 }
  uselistorder i32 %v3_8f4c, { 1, 0 }
  uselistorder i32 %v0_8f3c, { 1, 0, 2, 3 }
  uselistorder i32 %v7_8f10, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8ee8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_8e8c, { 1, 0, 2 }
  uselistorder i32 %v4_8e88, { 0, 2, 1 }
  uselistorder i32 %v0_8e68, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8e58, { 0, 2, 1 }
  uselistorder i32 %v4_8e3c, { 1, 0 }
  uselistorder i1 %v2_9010, { 2, 3, 1, 0 }
  uselistorder i1 %v3_8fa0, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8d7c, { 2, 1, 0 }
  uselistorder i32 %v1_8d68, { 1, 0, 2 }
  uselistorder i32 %v0_8ce4, { 1, 0, 2 }
  uselistorder i32 %v3_8b74, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0, 2 }
  uselistorder i32 %v1_8af0, { 1, 0 }
  uselistorder i32 %v1_8ae8, { 2, 1, 0 }
  uselistorder i32 %v1_8ae4, { 1, 0 }
  uselistorder i32 %v1_8ae0, { 1, 0 }
  uselistorder i32 %v1_8ad4, { 1, 0 }
  uselistorder i32 %v3_8acc, { 2, 0, 1 }
  uselistorder i32 %v3_8a9c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_8a98, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_8a94, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8a8c, { 0, 2, 1 }
  uselistorder i32 %v0_8a88, { 0, 1, 3, 2 }
  uselistorder i1 %v7_8a74, { 1, 0 }
  uselistorder i1 %v7_8a48, { 1, 0 }
  uselistorder i32 %v3_8a44, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_8a30, { 2, 1, 0 }
  uselistorder i32 %v6_8a20, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_89ec, { 1, 2, 3, 0 }
  uselistorder i32 %v6_89cc, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_8980, { 1, 2, 0 }
  uselistorder i32 %v6_8954, { 2, 1, 3, 0 }
  uselistorder i32 %v6_8918, { 1, 2, 0 }
  uselistorder i32 %v2_8900, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_88d4, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 48, 1, 3, 2, 47, 4, 5, 8, 9, 6, 7, 11, 10, 13, 12, 14, 16, 15, 17, 19, 18, 20, 21, 22, 23, 25, 24, 29, 26, 27, 28, 32, 30, 31, 49, 46, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_9060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9024, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_8e28, { 1, 0 }
  uselistorder label %dec_label_pc_8dc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d44, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_9078(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9078:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9078 = load i32, i32* @r4, align 4
  %v15_9078 = load i32, i32* @r8, align 4
  %v21_9078 = load i32, i32* @sl, align 4
  %v24_9078 = load i32, i32* @fp, align 4
  %v1_907c = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_907c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9098 = urem i32 %arg4, 256
  store i32 %v1_9098, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_90a8 = call i32 @function_10ec8(i32 %v1_907c, i32 4)
  %v0_90ac = load i32, i32* @r5, align 4
  store i32 %v0_90ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_90b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_90b8, i32* %r3.global-to-local, align 4
  %v0_90bc = load i32, i32* @r4, align 4
  store i32 %v0_90bc, i32* %r0.global-to-local, align 4
  %v5_90c0 = inttoptr i32 %v0_90ac to i32*
  %v6_90c0 = call i32 @function_829c(i32 %v0_90bc, i32* %v5_90c0, i32 2, i32 %v0_90b8, i32 %v2_90a8)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_90d8 = load i32, i32* @r5, align 4
  store i32 %v0_90d8, i32* %r1.global-to-local, align 4
  %v0_90dc = load i32, i32* @r4, align 4
  store i32 %v0_90dc, i32* %r0.global-to-local, align 4
  %v5_90e0 = trunc i32 %v6_90c0 to i8
  %v6_90e4 = inttoptr i32 %v0_90d8 to i32*
  %v7_90e4 = call i32 @function_829c(i32 %v0_90dc, i32* %v6_90e4, i32 3, i32 65535, i32 %v6_90c0)
  %v0_90e8 = load i32, i32* @r5, align 4
  store i32 %v0_90e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_90e4, i32* @r7, align 4
  %v0_90f8 = load i32, i32* @r4, align 4
  store i32 %v0_90f8, i32* %r0.global-to-local, align 4
  %v5_90fc = inttoptr i32 %v0_90e8 to i32*
  %v6_90fc = call i32 @function_829c(i32 %v0_90f8, i32* %v5_90fc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_9108 = load i32, i32* @r5, align 4
  store i32 %v0_9108, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9114 = load i32, i32* @r4, align 4
  store i32 %v0_9114, i32* %r0.global-to-local, align 4
  %v5_9118 = trunc i32 %v6_90fc to i8
  %v6_911c = inttoptr i32 %v0_9108 to i32*
  %v7_911c = call i32 @function_829c(i32 %v0_9114, i32* %v6_911c, i32 5, i32 1, i32 %v6_90fc)
  %v1_9128 = urem i32 %v7_911c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9134 = load i32, i32* @r5, align 4
  store i32 %v0_9134, i32* %r1.global-to-local, align 4
  %v0_9138 = load i32, i32* @r4, align 4
  store i32 %v0_9138, i32* %r0.global-to-local, align 4
  %v5_9140 = inttoptr i32 %v0_9134 to i32*
  %v6_9140 = call i32 @function_829c(i32 %v0_9138, i32* %v5_9140, i32 6, i32 65535, i32 %v1_9128)
  %v0_914c = load i32, i32* @r5, align 4
  store i32 %v0_914c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9158 = load i32, i32* @r4, align 4
  store i32 %v0_9158, i32* %r0.global-to-local, align 4
  %v5_915c = inttoptr i32 %v0_914c to i32*
  %v6_915c = call i32 @function_829c(i32 %v0_9158, i32* %v5_915c, i32 7, i32 65535, i32 %v6_9140)
  %v0_9160 = load i32, i32* @r5, align 4
  store i32 %v0_9160, i32* %r1.global-to-local, align 4
  %v0_9164 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9164, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_915c, i32* @sl, align 4
  %v0_9170 = load i32, i32* @r4, align 4
  store i32 %v0_9170, i32* %r0.global-to-local, align 4
  %v5_9174 = inttoptr i32 %v0_9160 to i32*
  %v6_9174 = call i32 @function_829c(i32 %v0_9170, i32* %v5_9174, i32 %v0_9164, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9184 = load i32, i32* @r5, align 4
  store i32 %v0_9184, i32* %r1.global-to-local, align 4
  %v0_9188 = load i32, i32* @r4, align 4
  store i32 %v0_9188, i32* %r0.global-to-local, align 4
  %v5_918c = inttoptr i32 %v0_9184 to i32*
  %v6_918c = call i32 @function_829c(i32 %v0_9188, i32* %v5_918c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9194 = urem i32 %v6_918c, 256
  %v0_9198 = load i32, i32* @r5, align 4
  store i32 %v0_9198, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_91a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91a0, i32* %r3.global-to-local, align 4
  %v0_91a4 = load i32, i32* @r4, align 4
  store i32 %v0_91a4, i32* %r0.global-to-local, align 4
  %v5_91ac = inttoptr i32 %v0_9198 to i32*
  %v6_91ac = call i32 @function_829c(i32 %v0_91a4, i32* %v5_91ac, i32 18, i32 %v0_91a0, i32 %v1_9194)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  %v2_91b8 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_91b8, i32* %r3.global-to-local, align 4
  store i32 %v6_91ac, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_91c4 = load i32, i32* @r4, align 4
  store i32 %v0_91c4, i32* %r0.global-to-local, align 4
  %v5_91c8 = inttoptr i32 %v0_91b4 to i32*
  %v6_91c8 = call i32 @function_829c(i32 %v0_91c4, i32* %v5_91c8, i32 24, i32 %v2_91b8, i32 ptrtoint (i32* @0 to i32))
  %v0_91d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91d0, i32* %r0.global-to-local, align 4
  %v1_91d4 = inttoptr i32 %v0_91d0 to i32*
  %v2_91d4 = call i32 @function_108e4(i32* %v1_91d4)
  %v1_91d8 = load i32, i32* @r6, align 4
  %v2_91d8 = add i32 %v1_91d8, %v2_91d4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_91ec = call i32 @function_10bdc(i32 2, i32 3, i32 6)
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v7_91f0 = icmp eq i32 %v3_91ec, -1
  store i1 %v7_91f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91f0, label %dec_label_pc_9798, label %dec_label_pc_91fc

dec_label_pc_91fc:                                ; preds = %dec_label_pc_9078
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9204 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9204, i32* %r3.global-to-local, align 4
  %v0_920c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_920c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9218 = call i32 @function_10bac(i32 %v3_91ec, i32 %v0_920c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9218, i32* %r0.global-to-local, align 4
  %v7_921c = icmp eq i32 %v6_9218, -1
  store i1 %v7_921c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_921c, label %dec_label_pc_97a0, label %dec_label_pc_9224

dec_label_pc_9224:                                ; preds = %dec_label_pc_91fc
  %v0_9230 = load i32, i32* @sl, align 4
  %v3_9230 = mul i32 %v0_9230, 65536
  store i32 %v3_9230, i32* %sl.global-to-local, align 4
  %v0_9234 = load i32, i32* @r7, align 4
  %v2_923c = icmp eq i32 %v1_907c, 0
  store i1 %v2_923c, i1* %cpsr_z.global-to-local, align 1
  %v0_9240 = load i32, i32* @r8, align 4
  %v1_9240 = urem i32 %v0_9240, 256
  store i32 %v1_9240, i32* %r8.global-to-local, align 4
  %v3_9244 = urem i32 %v0_9234, 65536
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  %v3_9248 = urem i32 %v6_9140, 65536
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v3_924c = urem i32 %v0_9230, 65536
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v0_9258 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9258, i32* %stack_var_-40, align 4
  br i1 %v2_923c, label %dec_label_pc_94d8.preheader, label %dec_label_pc_926c

dec_label_pc_926c:                                ; preds = %dec_label_pc_9224
  %v3_9274 = mul i32 %v6_9174, 65536
  %v1_927c = urem i32 %v6_9140, 256
  %v1_9284 = add i32 %v3_9274, 524288
  %v1_9288 = add i32 %v3_9274, 3407872
  %v1_928c = urem i32 %v0_9230, 256
  %v1_9290 = add i32 %v3_9274, 1835008
  %v0_9234.not = or i32 %v0_9234, -65536
  %v1_9298 = xor i32 %v0_9234.not, 65535
  %v3_929c = udiv i32 %v1_9290, 256
  %tmp77 = udiv i32 %v0_9234, 256
  %v1_92b0 = and i32 %v3_929c, 65280
  store i32 %v1_92b0, i32* %r0.global-to-local, align 4
  %v3_92d4 = mul nuw nsw i32 %v1_927c, 256
  %tmp78 = udiv i32 %v6_9140, 256
  %v4_92dc = urem i32 %tmp78, 256
  %v5_92dc = or i32 %v4_92dc, %v3_92d4
  store i32 %v5_92dc, i32* @lr, align 4
  %tmp79 = mul nsw i32 %v1_9298, 256
  %v3_92e4 = mul nuw nsw i32 %v1_928c, 256
  %sext23 = mul i32 %tmp77, 16777216
  %v4_92ec = sdiv i32 %sext23, 16777216
  %v4_92b4 = sdiv i32 %v1_9288, 16777216
  %tmp80 = udiv i32 %v0_9230, 256
  %v4_92f4 = urem i32 %tmp80, 256
  %v5_92f4 = or i32 %v4_92f4, %v3_92e4
  store i32 %v5_92f4, i32* @r7, align 4
  %v1_92f8 = and i32 %tmp79, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %v4_92fc = sdiv i32 %v1_9290, 16777216
  %v3_9300 = udiv i32 %v1_9284, 256
  %tmp81 = udiv i32 %v1_9298, 256
  %v4_9304 = urem i32 %tmp81, 256
  %v5_9304 = or i32 %v4_9304, %v1_92f8
  store i32 %v5_9304, i32* @r6, align 4
  %v3_9308 = ashr i32 %v1_9288, 31
  %v3_930c = ashr i32 %sext23, 31
  %v1_9310 = and i32 %v3_9300, 65280
  store i32 %v1_9310, i32* @r5, align 4
  %v3_931c = ashr i32 %v1_9290, 31
  store i32 %v3_931c, i32* %r2.global-to-local, align 4
  %v3_932032 = udiv i32 %v1_92f8, 256
  store i32 %v3_932032, i32* %r3.global-to-local, align 4
  store i32 %v1_927c, i32* %r1.global-to-local, align 4
  %v4_9328 = udiv i32 %v1_9284, 16777216
  %v5_9328 = or i32 %v4_9328, %v1_9310
  store i32 %v5_9328, i32* %r8.global-to-local, align 4
  %v5_932c = trunc i32 %tmp81 to i8
  store i32 %v0_9258, i32* @r4, align 4
  %v3_934433 = udiv i32 %v1_9310, 256
  store i32 %v3_934433, i32* %sl.global-to-local, align 4
  store i32 %v1_928c, i32* %fp.global-to-local, align 4
  %sext15 = mul i32 %v1_92f8, 65536
  %v4_9454 = sdiv i32 %sext15, 16777216
  %v2_9484 = icmp eq i32 %v1_9240, 0
  %sext16 = mul i32 %v6_9140, 16777216
  %v4_9498 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp78, 16777216
  %v4_94b4 = sdiv i32 %sext17, 16777216
  %v1_93b0 = trunc i32 %v4_92ec to i8
  br label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %bb92, %dec_label_pc_926c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9358 = call i32 @function_10ec8(i32 1510, i32 4)
  store i32 %v2_9358, i32* %r0.global-to-local, align 4
  store i32 %v2_90a8, i32* %r2.global-to-local, align 4
  %v3_9360 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9360, i32* %r3.global-to-local, align 4
  %v2_9364 = load i32, i32* @r4, align 4
  %v5_9364 = mul i32 %v2_9364, 4
  %v6_9364 = add i32 %v5_9364, %v2_90a8
  %v7_9364 = inttoptr i32 %v6_9364 to i32*
  store i32 %v2_9358, i32* %v7_9364, align 4
  %v0_9368 = load i32, i32* %r2.global-to-local, align 4
  %v1_9368 = load i32, i32* %r3.global-to-local, align 4
  %v4_9368 = mul i32 %v1_9368, 4
  %v5_9368 = add i32 %v4_9368, %v0_9368
  %v6_9368 = inttoptr i32 %v5_9368 to i32*
  %v7_9368 = load i32, i32* %v6_9368, align 4
  store i32 %v7_9368, i32* %r4.global-to-local, align 4
  %v1_936c = inttoptr i32 %v7_9368 to i8*
  %v2_936c = load i8, i8* %v1_936c, align 1
  %tmp = urem i8 %v2_936c, 16
  %v1_9370 = zext i8 %tmp to i32
  %v1_9374 = or i32 %v1_9370, 64
  store i32 %v1_9374, i32* %r2.global-to-local, align 4
  %v1_9378 = trunc i32 %v1_9374 to i8
  store i8 %v1_9378, i8* %v1_936c, align 1
  %v0_937c = load i32, i32* %r4.global-to-local, align 4
  %v1_937c = inttoptr i32 %v0_937c to i8*
  %v2_937c = load i8, i8* %v1_937c, align 1
  %v1_9380 = and i8 %v2_937c, -16
  %v1_9384 = or i8 %v1_9380, 5
  store i32 %v1_9128, i32* %r1.global-to-local, align 4
  store i8 %v1_9384, i8* %v1_937c, align 1
  %v2_9394 = load i32, i32* %r4.global-to-local, align 4
  %v3_9394 = add i32 %v2_9394, 1
  %v4_9394 = inttoptr i32 %v3_9394 to i8*
  store i8 %v5_90e0, i8* %v4_9394, align 1
  %v2_939c = load i32, i32* %r4.global-to-local, align 4
  %v3_939c = add i32 %v2_939c, 8
  %v4_939c = inttoptr i32 %v3_939c to i8*
  store i8 %v5_9118, i8* %v4_939c, align 1
  store i32 %v4_92ec, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_93a8 = load i32, i32* %r1.global-to-local, align 4
  %v9_93a8 = icmp eq i32 %v0_93a8, 0
  store i1 %v9_93a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9308, i32* %r2.global-to-local, align 4
  %v2_93b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_93b0 = add i32 %v2_93b0, 4
  %v4_93b0 = inttoptr i32 %v3_93b0 to i8*
  store i8 %v1_93b0, i8* %v4_93b0, align 1
  store i32 %v4_92b4, i32* %r1.global-to-local, align 4
  %v0_93b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93b8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_934c
  %v1_93b8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_93b8, i32* %r3.global-to-local, align 4
  %v2_93bc = trunc i32 %v1_93b8 to i8
  %v3_93bc = load i32, i32* %r4.global-to-local, align 4
  %v4_93bc = add i32 %v3_93bc, 7
  %v5_93bc = inttoptr i32 %v4_93bc to i8*
  store i8 %v2_93bc, i8* %v5_93bc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_934c, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_93c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93c4 = trunc i32 %v0_93c4 to i8
  %v2_93c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c4 = add i32 %v2_93c4, 3
  %v4_93c4 = inttoptr i32 %v3_93c4 to i8*
  store i8 %v1_93c4, i8* %v4_93c4, align 1
  %v0_93c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_93c8 = trunc i32 %v0_93c8 to i8
  %v2_93c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c8 = add i32 %v2_93c8, 2
  %v4_93c8 = inttoptr i32 %v3_93c8 to i8*
  store i8 %v1_93c8, i8* %v4_93c8, align 1
  %v0_93cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93cc, label %bb83, label %bb82

bb82:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %.thread, %bb82
  store i32 %v3_930c, i32* %r1.global-to-local, align 4
  %v0_93d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i8
  %v2_93d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93d4 = add i32 %v2_93d4, 9
  %v4_93d4 = inttoptr i32 %v3_93d4 to i8*
  store i8 %v1_93d4, i8* %v4_93d4, align 1
  %v0_93d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93d8, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_93d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_93d8 = trunc i32 %v1_93d8 to i8
  %v3_93d8 = load i32, i32* %r4.global-to-local, align 4
  %v4_93d8 = add i32 %v3_93d8, 6
  %v5_93d8 = inttoptr i32 %v4_93d8 to i8*
  store i8 %v2_93d8, i8* %v5_93d8, align 1
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  %v3_93dc = load i32, i32* %stack_var_-40, align 4
  %v5_93e4 = mul i32 %v3_93dc, 24
  store i32 %v5_93e4, i32* %r3.global-to-local, align 4
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v1_93ec = load i32, i32* %r4.global-to-local, align 4
  %v2_93ec = add i32 %v1_93ec, 12
  %v3_93ec = inttoptr i32 %v2_93ec to i32*
  store i32 %v6_91c8, i32* %v3_93ec, align 4
  %v0_93f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f0 = load i32, i32* @sb, align 4
  %v2_93f0 = add i32 %v1_93f0, %v0_93f0
  store i32 %v2_93f0, i32* %r3.global-to-local, align 4
  %v0_93f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_93f4 = trunc i32 %v0_93f4 to i8
  %v2_93f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93f4 = add i32 %v2_93f4, 5
  %v4_93f4 = inttoptr i32 %v3_93f4 to i8*
  store i8 %v1_93f4, i8* %v4_93f4, align 1
  %v0_93f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f8 = add i32 %v0_93f8, 16
  %v2_93f8 = inttoptr i32 %v1_93f8 to i32*
  %v3_93f8 = load i32, i32* %v2_93f8, align 4
  store i32 %v3_93f8, i32* %r2.global-to-local, align 4
  %v0_93fc = load i32, i32* %r4.global-to-local, align 4
  %v1_93fc = add i32 %v0_93fc, 20
  store i32 %v1_93fc, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9404 = load i32, i32* %r0.global-to-local, align 4
  %v1_9404 = trunc i32 %v0_9404 to i8
  %v3_9404 = add i32 %v0_93fc, 23
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 %v1_9404, i8* %v4_9404, align 1
  %v0_9408 = load i32, i32* %r3.global-to-local, align 4
  %v1_9408 = trunc i32 %v0_9408 to i8
  %v2_9408 = load i32, i32* %r1.global-to-local, align 4
  %v3_9408 = add i32 %v2_9408, 2
  %v4_9408 = inttoptr i32 %v3_9408 to i8*
  store i8 %v1_9408, i8* %v4_9408, align 1
  %v0_940c = load i32, i32* %r4.global-to-local, align 4
  %v1_940c = add i32 %v0_940c, 24
  %v2_940c = inttoptr i32 %v1_940c to i8*
  %v3_940c = load i8, i8* %v2_940c, align 1
  %tmp98 = urem i8 %v3_940c, 16
  %v1_9410 = zext i8 %tmp98 to i32
  %v1_9414 = or i32 %v1_9410, 64
  store i32 %v1_9414, i32* %r3.global-to-local, align 4
  %v1_9418 = trunc i32 %v1_9414 to i8
  store i8 %v1_9418, i8* %v2_940c, align 1
  %v0_941c = load i32, i32* %r2.global-to-local, align 4
  %v1_941c = load i32, i32* %r4.global-to-local, align 4
  %v2_941c = add i32 %v1_941c, 16
  %v3_941c = inttoptr i32 %v2_941c to i32*
  store i32 %v0_941c, i32* %v3_941c, align 4
  %v0_9420 = load i32, i32* %r4.global-to-local, align 4
  %v1_9420 = add i32 %v0_9420, 24
  %v2_9420 = inttoptr i32 %v1_9420 to i8*
  %v3_9420 = load i8, i8* %v2_9420, align 1
  %v1_9424 = and i8 %v3_9420, -16
  %v1_9428 = or i8 %v1_9424, 5
  store i8 %v1_9428, i8* %v2_9420, align 1
  %v0_9434 = load i32, i32* %r4.global-to-local, align 4
  %v1_9434 = add i32 %v0_9434, 24
  store i32 %v1_9434, i32* @r5, align 4
  %v3_9438 = add i32 %v0_9434, 25
  %v4_9438 = inttoptr i32 %v3_9438 to i8*
  store i8 %v5_90e0, i8* %v4_9438, align 1
  store i32 %v4_92fc, i32* %r1.global-to-local, align 4
  store i32 %tmp81, i32* %r3.global-to-local, align 4
  store i32 %v3_931c, i32* %r2.global-to-local, align 4
  %v2_9448 = load i32, i32* @r5, align 4
  %v3_9448 = add i32 %v2_9448, 4
  %v4_9448 = inttoptr i32 %v3_9448 to i8*
  store i8 %v5_932c, i8* %v4_9448, align 1
  %v0_944c = load i32, i32* %r1.global-to-local, align 4
  %v1_944c = trunc i32 %v0_944c to i8
  %v2_944c = load i32, i32* @r5, align 4
  %v3_944c = add i32 %v2_944c, 2
  %v4_944c = inttoptr i32 %v3_944c to i8*
  store i8 %v1_944c, i8* %v4_944c, align 1
  %v0_9450 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9450, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  store i32 %v4_9454, i32* %r1.global-to-local, align 4
  %v0_9458 = load i32, i32* %r2.global-to-local, align 4
  %v1_9458 = trunc i32 %v0_9458 to i8
  %v2_9458 = load i32, i32* @r5, align 4
  %v3_9458 = add i32 %v2_9458, 3
  %v4_9458 = inttoptr i32 %v3_9458 to i8*
  store i8 %v1_9458, i8* %v4_9458, align 1
  store i32 %v6_90fc, i32* %r2.global-to-local, align 4
  %v0_9460 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9460, label %bb89, label %bb88

bb88:                                             ; preds = %bb87
  %v1_9460 = load i32, i32* %r3.global-to-local, align 4
  %v2_9460 = trunc i32 %v1_9460 to i8
  %v3_9460 = load i32, i32* @r5, align 4
  %v4_9460 = add i32 %v3_9460, 6
  %v5_9460 = inttoptr i32 %v4_9460 to i8*
  store i8 %v2_9460, i8* %v5_9460, align 1
  br label %bb89

bb89:                                             ; preds = %bb87, %bb88
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9468 = load i32, i32* %r1.global-to-local, align 4
  %v1_9468 = trunc i32 %v0_9468 to i8
  %v2_9468 = load i32, i32* @r5, align 4
  %v3_9468 = add i32 %v2_9468, 5
  %v4_9468 = inttoptr i32 %v3_9468 to i8*
  store i8 %v1_9468, i8* %v4_9468, align 1
  %v0_946c = load i32, i32* %r2.global-to-local, align 4
  %v1_946c = trunc i32 %v0_946c to i8
  %v2_946c = load i32, i32* @r5, align 4
  %v3_946c = add i32 %v2_946c, 8
  %v4_946c = inttoptr i32 %v3_946c to i8*
  store i8 %v1_946c, i8* %v4_946c, align 1
  %v0_9470 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9470, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_9470 = load i32, i32* %r0.global-to-local, align 4
  %v2_9470 = trunc i32 %v1_9470 to i8
  %v3_9470 = load i32, i32* @r5, align 4
  %v4_9470 = add i32 %v3_9470, 7
  %v5_9470 = inttoptr i32 %v4_9470 to i8*
  store i8 %v2_9470, i8* %v5_9470, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_9474 = load i32, i32* %r3.global-to-local, align 4
  %v1_9474 = trunc i32 %v0_9474 to i8
  %v2_9474 = load i32, i32* @r5, align 4
  %v3_9474 = add i32 %v2_9474, 9
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  %v0_9478 = call i32 @function_d208()
  store i32 %v0_9478, i32* %r0.global-to-local, align 4
  store i32 %v1_9240, i32* %r1.global-to-local, align 4
  store i1 %v2_9484, i1* %cpsr_z.global-to-local, align 1
  %v1_9488 = sub i32 1023, %v0_9478
  store i32 %v1_9488, i32* %r3.global-to-local, align 4
  br i1 %v2_9484, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb91
  %v2_9490 = load i32, i32* @r5, align 4
  %v3_9490 = add i32 %v2_9490, 16
  %v4_9490 = inttoptr i32 %v3_9490 to i32*
  store i32 %v1_9488, i32* %v4_9490, align 4
  br label %bb92

.thread19:                                        ; preds = %bb91
  %v1_948c = load i32, i32* %r4.global-to-local, align 4
  %v2_948c = add i32 %v1_948c, 16
  %v3_948c = inttoptr i32 %v2_948c to i32*
  %v4_948c = load i32, i32* %v3_948c, align 4
  store i32 %v4_948c, i32* %r3.global-to-local, align 4
  %v2_9494 = load i32, i32* @r5, align 4
  %v3_9494 = add i32 %v2_9494, 16
  %v4_9494 = inttoptr i32 %v3_9494 to i32*
  store i32 %v4_948c, i32* %v4_9494, align 4
  br label %bb92

bb92:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_9498, i32* %r3.global-to-local, align 4
  %v0_949c = load i32, i32* %r4.global-to-local, align 4
  %v1_949c = add i32 %v0_949c, 44
  store i32 %v1_949c, i32* @r6, align 4
  %v1_94a0 = load i32, i32* @r5, align 4
  %v2_94a0 = add i32 %v1_94a0, 12
  %v3_94a0 = inttoptr i32 %v2_94a0 to i32*
  store i32 %v0_9478, i32* %v3_94a0, align 4
  %v0_94a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_94a4 = trunc i32 %v0_94a4 to i8
  %v2_94a4 = load i32, i32* @r6, align 4
  %v3_94a4 = add i32 %v2_94a4, 1
  %v4_94a4 = inttoptr i32 %v3_94a4 to i8*
  store i8 %v1_94a4, i8* %v4_94a4, align 1
  %v3_94a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_94a8, i32* %r3.global-to-local, align 4
  store i32 %v1_907c, i32* %r1.global-to-local, align 4
  %v1_94b0 = add i32 %v3_94a8, 1
  store i32 %v1_94b0, i32* @r4, align 4
  store i32 %v4_94b4, i32* %r2.global-to-local, align 4
  %v9_94b8 = icmp eq i32 %v1_94b0, %v1_907c
  store i1 %v9_94b8, i1* %cpsr_z.global-to-local, align 1
  %v0_94bc = load i32, i32* %sl.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* @r6, align 4
  %v3_94bc = add i32 %v2_94bc, 5
  %v4_94bc = inttoptr i32 %v3_94bc to i8*
  store i8 %v1_94bc, i8* %v4_94bc, align 1
  %v0_94c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_94c0 = trunc i32 %v0_94c0 to i8
  %v2_94c0 = load i32, i32* @r6, align 4
  %v3_94c0 = inttoptr i32 %v2_94c0 to i8*
  store i8 %v1_94c0, i8* %v3_94c0, align 1
  %v0_94c4 = load i32, i32* @r7, align 4
  %v1_94c4 = trunc i32 %v0_94c4 to i8
  %v2_94c4 = load i32, i32* @r6, align 4
  %v3_94c4 = add i32 %v2_94c4, 2
  %v4_94c4 = inttoptr i32 %v3_94c4 to i8*
  store i8 %v1_94c4, i8* %v4_94c4, align 1
  %v0_94c8 = load i32, i32* %fp.global-to-local, align 4
  %v1_94c8 = trunc i32 %v0_94c8 to i8
  %v2_94c8 = load i32, i32* @r6, align 4
  %v3_94c8 = add i32 %v2_94c8, 3
  %v4_94c8 = inttoptr i32 %v3_94c8 to i8*
  store i8 %v1_94c8, i8* %v4_94c8, align 1
  %v0_94cc = load i32, i32* %r8.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v2_94cc = load i32, i32* @r6, align 4
  %v3_94cc = add i32 %v2_94cc, 4
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* @r4, align 4
  store i32 %v0_94d0, i32* %stack_var_-40, align 4
  %v5_94d4 = icmp slt i32 %v1_94b0, %v1_907c
  br i1 %v5_94d4, label %dec_label_pc_934c, label %dec_label_pc_94d8.preheader

dec_label_pc_94d8.preheader:                      ; preds = %bb92, %dec_label_pc_9224
  %v1_94f8 = add i32 %v6_9174, 8
  %v1_94fc = add i32 %v6_9174, 52
  %v2_9508 = icmp eq i32 %v6_91c8, -1
  %v7_9508 = icmp eq i32 %v6_91c8, -1
  %v3_96d0 = icmp eq i32 %v3_9244, 65535
  %v2_9740 = icmp eq i32 %v1_9240, 0
  %v2_975c = icmp eq i32 %v1_9194, 0
  br label %dec_label_pc_94d8

dec_label_pc_94d8:                                ; preds = %dec_label_pc_94d8.preheader, %dec_label_pc_9784
  store i32 %v1_907c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_923c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_923c, label %dec_label_pc_9784, label %dec_label_pc_94ec

dec_label_pc_94ec:                                ; preds = %dec_label_pc_94d8
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_94f8, i32* @fp, align 4
  store i32 %v1_94fc, i32* @sl, align 4
  br label %dec_label_pc_9630

dec_label_pc_9504:                                ; preds = %dec_label_pc_9630
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  store i1 %v7_9508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9508, label %dec_label_pc_96c0, label %dec_label_pc_9510

dec_label_pc_9510:                                ; preds = %dec_label_pc_9658, %dec_label_pc_9504
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_96d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_96d0, label %dec_label_pc_96dc, label %dec_label_pc_9524

dec_label_pc_9524:                                ; preds = %dec_label_pc_96c0.dec_label_pc_9524_crit_edge, %dec_label_pc_9510
  %v1_9528 = phi i32 [ %v1_9528.pre, %dec_label_pc_96c0.dec_label_pc_9524_crit_edge ], [ 65535, %dec_label_pc_9510 ]
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v9_9528 = icmp eq i32 %v3_9248, %v1_9528
  store i1 %v9_9528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9528, label %dec_label_pc_9714, label %dec_label_pc_9530

dec_label_pc_9530:                                ; preds = %dec_label_pc_96dc.dec_label_pc_9530_crit_edge, %dec_label_pc_9524
  %v1_9534 = phi i32 [ %v1_9534.pre, %dec_label_pc_96dc.dec_label_pc_9530_crit_edge ], [ %v1_9528, %dec_label_pc_9524 ]
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v9_9534 = icmp eq i32 %v3_924c, %v1_9534
  store i1 %v9_9534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9534, label %dec_label_pc_9730, label %dec_label_pc_953c

dec_label_pc_953c:                                ; preds = %dec_label_pc_9714, %dec_label_pc_9530
  store i32 %v1_9240, i32* %r3.global-to-local, align 4
  store i1 %v2_9740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9740, label %dec_label_pc_9754, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_953c
  %v1_9544 = load i32, i32* @r5, align 4
  %v2_9544 = add i32 %v1_9544, 16
  %v3_9544 = inttoptr i32 %v2_9544 to i32*
  %v4_9544 = load i32, i32* %v3_9544, align 4
  store i32 %v4_9544, i32* %r3.global-to-local, align 4
  %v2_9548 = load i32, i32* @r6, align 4
  %v3_9548 = add i32 %v2_9548, 16
  %v4_9548 = inttoptr i32 %v3_9548 to i32*
  store i32 %v4_9544, i32* %v4_9548, align 4
  br label %dec_label_pc_9550

dec_label_pc_9550:                                ; preds = %bb97, %.thread20
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_975c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_975c, label %dec_label_pc_955c, label %dec_label_pc_9768

dec_label_pc_955c:                                ; preds = %dec_label_pc_9550, %dec_label_pc_9754, %dec_label_pc_9768
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9560 = load i32, i32* @r8, align 4
  %v1_9560 = trunc i32 %v0_9560 to i8
  %v2_9560 = load i32, i32* @r5, align 4
  %v3_9560 = add i32 %v2_9560, 10
  %v4_9560 = inttoptr i32 %v3_9560 to i8*
  store i8 %v1_9560, i8* %v4_9560, align 1
  %v0_9564 = load i32, i32* @r8, align 4
  %v1_9564 = trunc i32 %v0_9564 to i8
  %v2_9564 = load i32, i32* @r5, align 4
  %v3_9564 = add i32 %v2_9564, 11
  %v4_9564 = inttoptr i32 %v3_9564 to i8*
  store i8 %v1_9564, i8* %v4_9564, align 1
  %v0_9568 = load i32, i32* @r5, align 4
  store i32 %v0_9568, i32* @r0, align 4
  %v2_956c = call i32 @function_c690(i32 %v0_9568, i32 20)
  %v3_956c = trunc i32 %v2_956c to i8
  %v4_9570 = sdiv i32 %v2_956c, 256
  store i32 %v4_9570, i32* %r3.global-to-local, align 4
  %v1_9574 = trunc i32 %v4_9570 to i8
  %v2_9574 = load i32, i32* @r5, align 4
  %v3_9574 = add i32 %v2_9574, 11
  %v4_9574 = inttoptr i32 %v3_9574 to i8*
  store i8 %v1_9574, i8* %v4_9574, align 1
  %v3_9578 = load i32, i32* @r5, align 4
  %v4_9578 = add i32 %v3_9578, 10
  %v5_9578 = inttoptr i32 %v4_9578 to i8*
  store i8 %v3_956c, i8* %v5_9578, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9580 = load i32, i32* @r8, align 4
  %v1_9580 = trunc i32 %v0_9580 to i8
  %v2_9580 = load i32, i32* @r6, align 4
  %v3_9580 = add i32 %v2_9580, 10
  %v4_9580 = inttoptr i32 %v3_9580 to i8*
  store i8 %v1_9580, i8* %v4_9580, align 1
  %v0_9584 = load i32, i32* @r8, align 4
  %v1_9584 = trunc i32 %v0_9584 to i8
  %v2_9584 = load i32, i32* @r6, align 4
  %v3_9584 = add i32 %v2_9584, 11
  %v4_9584 = inttoptr i32 %v3_9584 to i8*
  store i8 %v1_9584, i8* %v4_9584, align 1
  %v0_9588 = load i32, i32* @r6, align 4
  store i32 %v0_9588, i32* @r0, align 4
  %v2_958c = call i32 @function_c690(i32 %v0_9588, i32 20)
  %v3_958c = trunc i32 %v2_958c to i8
  store i32 %v2_958c, i32* %r0.global-to-local, align 4
  %v4_9590 = sdiv i32 %v2_958c, 256
  store i32 %v4_9590, i32* %r3.global-to-local, align 4
  %v3_9594 = load i32, i32* @r6, align 4
  %v4_9594 = add i32 %v3_9594, 10
  %v5_9594 = inttoptr i32 %v4_9594 to i8*
  store i8 %v3_958c, i8* %v5_9594, align 1
  %v0_9598 = load i32, i32* %r3.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* @r6, align 4
  %v3_9598 = add i32 %v2_9598, 11
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* @r7, align 4
  %v1_959c = add i32 %v0_959c, 4
  %v2_959c = inttoptr i32 %v1_959c to i8*
  %v3_959c = load i8, i8* %v2_959c, align 1
  %v4_959c = zext i8 %v3_959c to i32
  store i32 %v4_959c, i32* %r3.global-to-local, align 4
  %v1_95a0 = add i32 %v0_959c, 5
  %v2_95a0 = inttoptr i32 %v1_95a0 to i8*
  %v3_95a0 = load i8, i8* %v2_95a0, align 1
  %v4_95a0 = zext i8 %v3_95a0 to i32
  store i32 %v0_959c, i32* @r1, align 4
  %v4_95a8 = mul nuw nsw i32 %v4_95a0, 256
  %v5_95a8 = or i32 %v4_95a8, %v4_959c
  store i32 %v5_95a8, i32* %r2.global-to-local, align 4
  %v0_95ac = load i32, i32* @r8, align 4
  %v1_95ac = trunc i32 %v0_95ac to i8
  %v3_95ac = add i32 %v0_959c, 6
  %v4_95ac = inttoptr i32 %v3_95ac to i8*
  store i8 %v1_95ac, i8* %v4_95ac, align 1
  %v0_95b0 = load i32, i32* @fp, align 4
  store i32 %v0_95b0, i32* %r3.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r8, align 4
  %v1_95b4 = trunc i32 %v0_95b4 to i8
  %v2_95b4 = load i32, i32* @r7, align 4
  %v3_95b4 = add i32 %v2_95b4, 7
  %v4_95b4 = inttoptr i32 %v3_95b4 to i8*
  store i8 %v1_95b4, i8* %v4_95b4, align 1
  %v0_95b8 = load i32, i32* @r6, align 4
  store i32 %v0_95b8, i32* %r0.global-to-local, align 4
  %v4_95bc = call i32 @function_c6ec(i32 %v0_95b8, i32 %v0_959c, i32 %v5_95a8, i32 %v0_95b0)
  %v5_95bc = trunc i32 %v4_95bc to i8
  store i32 %v4_95bc, i32* %r0.global-to-local, align 4
  %v3_95c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_95c0, i32* %r3.global-to-local, align 4
  %v3_95c4 = mul i32 %v3_95c0, 32
  store i32 %v3_95c4, i32* %r2.global-to-local, align 4
  %v0_95c8 = load i32, i32* @r5, align 4
  %v1_95c8 = add i32 %v0_95c8, 16
  %v2_95c8 = inttoptr i32 %v1_95c8 to i32*
  %v3_95c8 = load i32, i32* %v2_95c8, align 4
  store i32 %v3_95c8, i32* %r1.global-to-local, align 4
  %v5_95cc = mul i32 %v3_95c0, 24
  store i32 %v5_95cc, i32* %r2.global-to-local, align 4
  %v4_95d035 = udiv i32 %v4_95bc, 256
  %v1_95d4 = trunc i32 %v4_95d035 to i8
  %v2_95d4 = load i32, i32* @r7, align 4
  %v3_95d4 = add i32 %v2_95d4, 7
  %v4_95d4 = inttoptr i32 %v3_95d4 to i8*
  store i8 %v1_95d4, i8* %v4_95d4, align 1
  %v0_95d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_95d8 = load i32, i32* @sb, align 4
  %v2_95d8 = add i32 %v1_95d8, %v0_95d8
  store i32 %v2_95d8, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_95e0 = load i32, i32* @r7, align 4
  %v4_95e0 = add i32 %v3_95e0, 6
  %v5_95e0 = inttoptr i32 %v4_95e0 to i8*
  store i8 %v5_95bc, i8* %v5_95e0, align 1
  %v0_95e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95e4 = load i32, i32* %lr.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, 4
  %v3_95e4 = inttoptr i32 %v2_95e4 to i32*
  store i32 %v0_95e4, i32* %v3_95e4, align 4
  %v0_95e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v2_95e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_95e8 = load i32, i32* @sb, align 4
  %v4_95e8 = add i32 %v3_95e8, %v2_95e8
  %v5_95e8 = inttoptr i32 %v4_95e8 to i8*
  store i8 %v1_95e8, i8* %v5_95e8, align 1
  %v0_95ec = load i32, i32* @r8, align 4
  %v1_95ec = trunc i32 %v0_95ec to i8
  %v2_95ec = load i32, i32* %lr.global-to-local, align 4
  %v3_95ec = add i32 %v2_95ec, 2
  %v4_95ec = inttoptr i32 %v3_95ec to i8*
  store i8 %v1_95ec, i8* %v4_95ec, align 1
  %v0_95f0 = load i32, i32* @r8, align 4
  %v1_95f0 = trunc i32 %v0_95f0 to i8
  %v2_95f0 = load i32, i32* %lr.global-to-local, align 4
  %v3_95f0 = add i32 %v2_95f0, 1
  %v4_95f0 = inttoptr i32 %v3_95f0 to i8*
  store i8 %v1_95f0, i8* %v4_95f0, align 1
  %v0_95f4 = load i32, i32* @r8, align 4
  %v1_95f4 = trunc i32 %v0_95f4 to i8
  %v2_95f4 = load i32, i32* %lr.global-to-local, align 4
  %v3_95f4 = add i32 %v2_95f4, 3
  %v4_95f4 = inttoptr i32 %v3_95f4 to i8*
  store i8 %v1_95f4, i8* %v4_95f4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9600 = load i32, i32* @r5, align 4
  store i32 %v0_9600, i32* %r1.global-to-local, align 4
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v0_9608 = load i32, i32* @sl, align 4
  store i32 %v0_9608, i32* %r2.global-to-local, align 4
  %v0_960c = load i32, i32* %lr.global-to-local, align 4
  %v6_9614 = inttoptr i32 %v0_9600 to i32*
  %v7_9614 = call i32 @function_10b78(i32 %v3_91ec, i32* %v6_9614, i32 %v0_9608, i32 16384, i32 %v0_960c, i32 16)
  %v3_9618 = load i32, i32* %stack_var_-40, align 4
  %v1_961c = add i32 %v3_9618, 1
  store i32 %v1_961c, i32* %r0.global-to-local, align 4
  store i32 %v1_907c, i32* %r3.global-to-local, align 4
  %v9_9624 = icmp eq i32 %v1_961c, %v1_907c
  store i1 %v9_9624, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_961c, i32* %stack_var_-40, align 4
  %v6_962c = icmp slt i32 %v1_961c, %v1_907c
  br i1 %v6_962c, label %dec_label_pc_9630, label %dec_label_pc_9784

dec_label_pc_9630:                                ; preds = %dec_label_pc_955c, %dec_label_pc_94ec
  %v1_9644 = phi i32 [ %v1_961c, %dec_label_pc_955c ], [ 0, %dec_label_pc_94ec ]
  %v5_9634 = mul i32 %v1_9644, 24
  %v1_9638 = load i32, i32* @sb, align 4
  %v2_9638 = add i32 %v1_9638, %v5_9634
  store i32 %v2_9638, i32* %r3.global-to-local, align 4
  store i32 %v2_90a8, i32* %r1.global-to-local, align 4
  %v1_9640 = add i32 %v2_9638, 20
  %v2_9640 = inttoptr i32 %v1_9640 to i8*
  %v3_9640 = load i8, i8* %v2_9640, align 1
  %v4_9640 = zext i8 %v3_9640 to i32
  store i32 %v4_9640, i32* %r2.global-to-local, align 4
  %v4_9644 = mul i32 %v1_9644, 4
  %v5_9644 = add i32 %v4_9644, %v2_90a8
  %v6_9644 = inttoptr i32 %v5_9644 to i32*
  %v7_9644 = load i32, i32* %v6_9644, align 4
  store i32 %v7_9644, i32* @r5, align 4
  %v2_9648 = icmp ugt i8 %v3_9640, 30
  %v7_9648 = icmp eq i8 %v3_9640, 31
  store i1 %v7_9648, i1* %cpsr_z.global-to-local, align 1
  %v1_964c = add i32 %v7_9644, 24
  store i32 %v1_964c, i32* @r6, align 4
  %v1_9650 = add i32 %v7_9644, 44
  store i32 %v1_9650, i32* @r7, align 4
  %v2_9654 = xor i1 %v7_9648, true
  %v3_9654 = and i1 %v2_9648, %v2_9654
  br i1 %v3_9654, label %dec_label_pc_9504, label %dec_label_pc_9658

dec_label_pc_9658:                                ; preds = %dec_label_pc_9630
  %v1_9658 = add i32 %v2_9638, 16
  %v2_9658 = inttoptr i32 %v1_9658 to i32*
  %v3_9658 = load i32, i32* %v2_9658, align 4
  store i32 %v3_9658, i32* %r4.global-to-local, align 4
  %v0_965c = call i32 @function_d208()
  store i32 %v0_965c, i32* %r0.global-to-local, align 4
  %v3_9660 = load i32, i32* %stack_var_-40, align 4
  %v5_9668 = mul i32 %v3_9660, 24
  %v0_966c = load i32, i32* %r4.global-to-local, align 4
  %v1_9670 = load i32, i32* @sb, align 4
  %v2_9670 = add i32 %v1_9670, %v5_9668
  store i32 %v2_9670, i32* %r1.global-to-local, align 4
  %v1_9674 = and i32 %v0_966c, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9674, i32* %r3.global-to-local, align 4
  %v1_966c = udiv i32 %v0_966c, 256
  %v3_9678 = and i32 %v1_966c, 65280
  store i32 %v3_9678, i32* %r2.global-to-local, align 4
  %v3_967c = mul i32 %v0_966c, 16777216
  %v1_9680 = add i32 %v2_9670, 20
  %v2_9680 = inttoptr i32 %v1_9680 to i8*
  %v3_9680 = load i8, i8* %v2_9680, align 1
  %v4_9680 = zext i8 %v3_9680 to i32
  store i32 %v4_9680, i32* %lr.global-to-local, align 4
  %v4_9684 = mul i32 %v1_9674, 256
  %v5_9684 = or i32 %v4_9684, %v3_967c
  %v4_9688 = udiv i32 %v0_966c, 16777216
  %v5_9688 = or i32 %v3_9678, %v4_9688
  %v2_968c = or i32 %v5_9688, %v5_9684
  %v7_9690 = lshr i32 %v0_965c, %v4_9680
  %v8_9690 = add i32 %v7_9690, %v2_968c
  %v3_969c = mul i32 %v8_9690, 16777216
  %v1_96a0 = and i32 %v8_9690, 65280
  store i32 %v1_96a0, i32* %r0.global-to-local, align 4
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v4_96ac = mul nuw nsw i32 %v1_96a0, 256
  %v5_96ac = or i32 %v4_96ac, %v3_969c
  store i32 %v5_96ac, i32* %r1.global-to-local, align 4
  %v2_96b0 = call i32 @llvm.bswap.i32(i32 %v8_9690)
  store i32 %v2_96b0, i32* %r3.global-to-local, align 4
  store i1 %v7_9508, i1* %cpsr_z.global-to-local, align 1
  %v1_96b8 = load i32, i32* @r5, align 4
  %v2_96b8 = add i32 %v1_96b8, 16
  %v3_96b8 = inttoptr i32 %v2_96b8 to i32*
  store i32 %v2_96b0, i32* %v3_96b8, align 4
  br i1 %v2_9508, label %dec_label_pc_96c0, label %dec_label_pc_9510

dec_label_pc_96c0:                                ; preds = %dec_label_pc_9658, %dec_label_pc_9504
  %v0_96c0 = call i32 @function_d208()
  store i32 %v0_96c0, i32* %r0.global-to-local, align 4
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_96d0, i1* %cpsr_z.global-to-local, align 1
  %v1_96d4 = load i32, i32* @r5, align 4
  %v2_96d4 = add i32 %v1_96d4, 12
  %v3_96d4 = inttoptr i32 %v2_96d4 to i32*
  store i32 %v0_96c0, i32* %v3_96d4, align 4
  br i1 %v3_96d0, label %dec_label_pc_96dc, label %dec_label_pc_96c0.dec_label_pc_9524_crit_edge

dec_label_pc_96c0.dec_label_pc_9524_crit_edge:    ; preds = %dec_label_pc_96c0
  %v1_9528.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9524

dec_label_pc_96dc:                                ; preds = %dec_label_pc_96c0, %dec_label_pc_9510
  %v0_96dc = call i32 @function_d208()
  %v3_96e4 = urem i32 %v0_96dc, 65536
  store i32 %v3_96e4, i32* %r0.global-to-local, align 4
  %v1_96ec = sub nsw i32 999, %v3_96e4
  store i32 %v1_96ec, i32* %r2.global-to-local, align 4
  %v3_96f0 = sdiv i32 %v1_96ec, 256
  store i32 %v3_96f0, i32* %r1.global-to-local, align 4
  %v3_96f434 = udiv i32 %v3_96e4, 256
  store i32 %v3_96f434, i32* %r3.global-to-local, align 4
  %v1_96f8 = trunc i32 %v3_96f434 to i8
  %v2_96f8 = load i32, i32* @r5, align 4
  %v3_96f8 = add i32 %v2_96f8, 5
  %v4_96f8 = inttoptr i32 %v3_96f8 to i8*
  store i8 %v1_96f8, i8* %v4_96f8, align 1
  %v0_96fc = load i32, i32* %r0.global-to-local, align 4
  %v1_96fc = trunc i32 %v0_96fc to i8
  %v2_96fc = load i32, i32* @r5, align 4
  %v3_96fc = add i32 %v2_96fc, 4
  %v4_96fc = inttoptr i32 %v3_96fc to i8*
  store i8 %v1_96fc, i8* %v4_96fc, align 1
  %v0_9700 = load i32, i32* %r1.global-to-local, align 4
  %v1_9700 = trunc i32 %v0_9700 to i8
  %v2_9700 = load i32, i32* @r6, align 4
  %v3_9700 = add i32 %v2_9700, 5
  %v4_9700 = inttoptr i32 %v3_9700 to i8*
  store i8 %v1_9700, i8* %v4_9700, align 1
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v1_9708 = load i32, i32* @r4, align 4
  %v9_9708 = icmp eq i32 %v3_9248, %v1_9708
  store i1 %v9_9708, i1* %cpsr_z.global-to-local, align 1
  %v0_970c = load i32, i32* %r2.global-to-local, align 4
  %v1_970c = trunc i32 %v0_970c to i8
  %v2_970c = load i32, i32* @r6, align 4
  %v3_970c = add i32 %v2_970c, 4
  %v4_970c = inttoptr i32 %v3_970c to i8*
  store i8 %v1_970c, i8* %v4_970c, align 1
  %v0_9710 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9710, label %dec_label_pc_9714, label %dec_label_pc_96dc.dec_label_pc_9530_crit_edge

dec_label_pc_96dc.dec_label_pc_9530_crit_edge:    ; preds = %dec_label_pc_96dc
  %v1_9534.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9530

dec_label_pc_9714:                                ; preds = %dec_label_pc_96dc, %dec_label_pc_9524
  %v0_9714 = call i32 @function_d208()
  %v1_9714 = trunc i32 %v0_9714 to i8
  store i32 %v0_9714, i32* %r0.global-to-local, align 4
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v4_971c = sdiv i32 %v0_9714, 256
  store i32 %v4_971c, i32* %r3.global-to-local, align 4
  %v1_9720 = load i32, i32* @r4, align 4
  %v9_9720 = icmp eq i32 %v3_924c, %v1_9720
  store i1 %v9_9720, i1* %cpsr_z.global-to-local, align 1
  %v3_9724 = load i32, i32* @r5, align 4
  %v4_9724 = add i32 %v3_9724, 44
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 %v1_9714, i8* %v5_9724, align 1
  %v0_9728 = load i32, i32* %r3.global-to-local, align 4
  %v1_9728 = trunc i32 %v0_9728 to i8
  %v2_9728 = load i32, i32* @r7, align 4
  %v3_9728 = add i32 %v2_9728, 1
  %v4_9728 = inttoptr i32 %v3_9728 to i8*
  store i8 %v1_9728, i8* %v4_9728, align 1
  %v0_972c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_972c, label %dec_label_pc_9730, label %dec_label_pc_953c

dec_label_pc_9730:                                ; preds = %dec_label_pc_9714, %dec_label_pc_9530
  %v0_9730 = call i32 @function_d208()
  %v1_9730 = trunc i32 %v0_9730 to i8
  store i32 %v0_9730, i32* %r0.global-to-local, align 4
  %v4_973436 = udiv i32 %v0_9730, 256
  %v1_9738 = trunc i32 %v4_973436 to i8
  %v2_9738 = load i32, i32* @r7, align 4
  %v3_9738 = add i32 %v2_9738, 3
  %v4_9738 = inttoptr i32 %v3_9738 to i8*
  store i8 %v1_9738, i8* %v4_9738, align 1
  store i32 %v1_9240, i32* %r3.global-to-local, align 4
  store i1 %v2_9740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9740, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_9730
  %v1_9744 = load i32, i32* @r5, align 4
  %v2_9744 = add i32 %v1_9744, 16
  %v3_9744 = inttoptr i32 %v2_9744 to i32*
  %v4_9744 = load i32, i32* %v3_9744, align 4
  store i32 %v4_9744, i32* %r3.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_9730, %bb95
  %v3_9748 = load i32, i32* @r7, align 4
  %v4_9748 = add i32 %v3_9748, 2
  %v5_9748 = inttoptr i32 %v4_9748 to i8*
  store i8 %v1_9730, i8* %v5_9748, align 1
  %v0_974c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_974c, label %dec_label_pc_9754, label %bb97

bb97:                                             ; preds = %bb96
  %v1_974c = load i32, i32* %r3.global-to-local, align 4
  %v2_974c = load i32, i32* @r6, align 4
  %v3_974c = add i32 %v2_974c, 16
  %v4_974c = inttoptr i32 %v3_974c to i32*
  store i32 %v1_974c, i32* %v4_974c, align 4
  br label %dec_label_pc_9550

dec_label_pc_9754:                                ; preds = %dec_label_pc_953c, %bb96
  %v0_9754 = call i32 @function_d208()
  store i32 %v0_9754, i32* %r0.global-to-local, align 4
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_975c, i1* %cpsr_z.global-to-local, align 1
  %v1_9760 = load i32, i32* @r6, align 4
  %v2_9760 = add i32 %v1_9760, 16
  %v3_9760 = inttoptr i32 %v2_9760 to i32*
  store i32 %v0_9754, i32* %v3_9760, align 4
  br i1 %v2_975c, label %dec_label_pc_955c, label %dec_label_pc_9768

dec_label_pc_9768:                                ; preds = %dec_label_pc_9550, %dec_label_pc_9754
  %v0_9768 = load i32, i32* @r7, align 4
  %v1_9768 = add i32 %v0_9768, 8
  store i32 %v1_9768, i32* @r4, align 4
  store i32 %v1_9768, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r1.global-to-local, align 4
  %v2_9774 = call i32 @function_d2bc(i32 %v1_9768, i32 %v6_9174)
  store i32 %v2_9774, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r2.global-to-local, align 4
  %v0_977c = load i32, i32* @r8, align 4
  %v1_977c = trunc i32 %v0_977c to i8
  %v2_977c = load i32, i32* @r4, align 4
  %v4_977c = add i32 %v2_977c, %v6_9174
  %v5_977c = inttoptr i32 %v4_977c to i8*
  store i8 %v1_977c, i8* %v5_977c, align 1
  br label %dec_label_pc_955c

dec_label_pc_9784:                                ; preds = %dec_label_pc_955c, %dec_label_pc_94d8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9788 = call i32 @function_108e4(i32* null)
  store i32 %v2_9788, i32* %r0.global-to-local, align 4
  store i32 %v2_91d8, i32* %r1.global-to-local, align 4
  %v9_9790 = icmp eq i32 %v2_91d8, %v2_9788
  store i1 %v9_9790, i1* %cpsr_z.global-to-local, align 1
  %v6_9794 = icmp slt i32 %v2_91d8, %v2_9788
  br i1 %v6_9794, label %dec_label_pc_9798, label %dec_label_pc_94d8

dec_label_pc_9798:                                ; preds = %dec_label_pc_9784, %dec_label_pc_9078, %dec_label_pc_97a0
  %v29_979c = phi i32 [ %v3_91ec, %dec_label_pc_9078 ], [ %v1_97a4, %dec_label_pc_97a0 ], [ %v2_9788, %dec_label_pc_9784 ]
  store i32 %v3_9078, i32* %r4.global-to-local, align 4
  store i32 %v15_9078, i32* %r8.global-to-local, align 4
  store i32 %v21_9078, i32* %sl.global-to-local, align 4
  store i32 %v24_9078, i32* %fp.global-to-local, align 4
  ret i32 %v29_979c

dec_label_pc_97a0:                                ; preds = %dec_label_pc_91fc
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v1_97a4 = call i32 @function_10640(i32 %v3_91ec)
  store i32 %v1_97a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9798

; uselistorder directives
  uselistorder i32 %v1_97a4, { 1, 0 }
  uselistorder i32 %v0_9730, { 0, 2, 1 }
  uselistorder i32 %v0_9714, { 0, 2, 1 }
  uselistorder i32 %v3_96e4, { 0, 2, 1 }
  uselistorder i32 %v2_96b0, { 1, 0 }
  uselistorder i32 %v8_9690, { 1, 2, 0 }
  uselistorder i32 %v0_966c, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9644, { 1, 0, 2 }
  uselistorder i32 %v1_961c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_95c0, { 1, 0, 2 }
  uselistorder i32 %v4_95bc, { 0, 2, 1 }
  uselistorder i32 %v0_959c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_958c, { 0, 2, 1 }
  uselistorder i32 %v4_9570, { 1, 0 }
  uselistorder i1 %v2_975c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_9740, { 2, 3, 1, 0 }
  uselistorder i1 %v3_96d0, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9508, { 2, 1, 0 }
  uselistorder i32 %v0_9478, { 1, 0, 2 }
  uselistorder i32 %v3_931c, { 1, 0 }
  uselistorder i32 %tmp81, { 1, 0, 2 }
  uselistorder i32 %v1_9298, { 1, 0 }
  uselistorder i32 %v1_9290, { 2, 1, 0 }
  uselistorder i32 %v1_928c, { 1, 0 }
  uselistorder i32 %v1_9288, { 1, 0 }
  uselistorder i32 %v1_927c, { 1, 0 }
  uselistorder i32 %v3_9274, { 2, 0, 1 }
  uselistorder i32 %v3_9244, { 0, 1, 3, 2 }
  uselistorder i32 %v1_9240, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_923c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9234, { 0, 2, 1 }
  uselistorder i32 %v0_9230, { 0, 1, 3, 2 }
  uselistorder i1 %v7_921c, { 1, 0 }
  uselistorder i1 %v7_91f0, { 1, 0 }
  uselistorder i32 %v3_91ec, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_91d8, { 2, 1, 0 }
  uselistorder i32 %v6_91c8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_9194, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9174, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v6_90fc, { 1, 0, 2 }
  uselistorder i32 %v2_90a8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_907c, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 19, 20, 21, 16, 17, 0, 1, 2, 3, 15, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18 }
  uselistorder i32* %r3.global-to-local, { 29, 28, 30, 31, 32, 33, 34, 35, 36, 50, 37, 39, 40, 41, 42, 38, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r2.global-to-local, { 25, 26, 27, 28, 29, 30, 39, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 27, 28, 29, 30, 31, 32, 33, 34, 42, 35, 36, 37, 38, 40, 39, 41, 43, 44, 45, 46, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 24, 23, 26, 25, 0 }
  uselistorder i32* %r0.global-to-local, { 25, 24, 27, 26, 29, 28, 30, 33, 34, 31, 32, 36, 35, 38, 37, 40, 39, 41, 42, 43, 23, 3, 1, 2, 4, 7, 5, 6, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %fp.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 3, 4, 5, 0, 1, 2, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_9798, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9768, { 1, 0 }
  uselistorder label %dec_label_pc_9754, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_955c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_94d8, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_97b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_97b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i8 @__decompiler_undefined_function_1()
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_97b4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  %v1_97d0 = urem i32 %arg4, 256
  store i32 %v1_97d0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_97e0 = call i32 @function_10ec8(i32 %v1_97b4, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  %v2_97f0 = call i32 @function_10ec8(i32 %v1_97b4, i32 4)
  %v0_97f4 = load i32, i32* @r5, align 4
  store i32 %v0_97f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_9800 = load i32, i32* @r7, align 4
  store i32 %v0_9800, i32* %r3.global-to-local, align 4
  %v0_9804 = load i32, i32* @r4, align 4
  store i32 %v0_9804, i32* %r0.global-to-local, align 4
  %v5_9808 = inttoptr i32 %v0_97f4 to i32*
  %v6_9808 = call i32 @function_829c(i32 %v0_9804, i32* %v5_9808, i32 2, i32 %v0_9800, i32 %v2_97f0)
  %v1_9814 = urem i32 %v6_9808, 256
  store i32 %v1_9814, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9820 = load i32, i32* @r5, align 4
  store i32 %v0_9820, i32* %r1.global-to-local, align 4
  %v0_9824 = load i32, i32* @r4, align 4
  store i32 %v0_9824, i32* %r0.global-to-local, align 4
  %v5_9828 = trunc i32 %v6_9808 to i8
  %v6_982c = inttoptr i32 %v0_9820 to i32*
  %v7_982c = call i32 @function_829c(i32 %v0_9824, i32* %v6_982c, i32 3, i32 65535, i32 %v6_9808)
  %v0_9830 = load i32, i32* @r5, align 4
  store i32 %v0_9830, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_982c, i32* @sl, align 4
  %v0_9840 = load i32, i32* @r4, align 4
  store i32 %v0_9840, i32* %r0.global-to-local, align 4
  %v5_9844 = inttoptr i32 %v0_9830 to i32*
  %v6_9844 = call i32 @function_829c(i32 %v0_9840, i32* %v5_9844, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_984c = urem i32 %v6_9844, 256
  store i32 %v1_984c, i32* %ip.global-to-local, align 4
  %v0_9850 = load i32, i32* @r5, align 4
  store i32 %v0_9850, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_985c = load i32, i32* @r4, align 4
  store i32 %v0_985c, i32* %r0.global-to-local, align 4
  %sext8 = mul i32 %v6_9844, 16777216
  %v5_9864 = sdiv i32 %sext8, 16777216
  %v6_9864 = inttoptr i32 %v0_9850 to i32*
  %v7_9864 = call i32 @function_829c(i32 %v0_985c, i32* %v6_9864, i32 5, i32 1, i32 %v5_9864)
  %v1_9870 = urem i32 %v7_9864, 256
  store i32 %v1_9870, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9878 = load i32, i32* @r5, align 4
  store i32 %v0_9878, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9880 = load i32, i32* @r4, align 4
  store i32 %v0_9880, i32* %r0.global-to-local, align 4
  %v5_9888 = inttoptr i32 %v0_9878 to i32*
  %v6_9888 = call i32 @function_829c(i32 %v0_9880, i32* %v5_9888, i32 7, i32 65535, i32 %v1_9870)
  %v0_988c = load i32, i32* @r5, align 4
  store i32 %v0_988c, i32* %r1.global-to-local, align 4
  %v3_9890 = mul i32 %v6_9888, 65536
  store i32 %v3_9890, i32* @r8, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9898 = load i32, i32* @r7, align 4
  store i32 %v0_9898, i32* %r3.global-to-local, align 4
  %v0_989c = load i32, i32* @r4, align 4
  store i32 %v0_989c, i32* %r0.global-to-local, align 4
  %v5_98a0 = inttoptr i32 %v0_988c to i32*
  %v6_98a0 = call i32 @function_829c(i32 %v0_989c, i32* %v5_98a0, i32 10, i32 %v0_9898, i32 ptrtoint (i32* @0 to i32))
  %v1_98a8 = urem i32 %v6_98a0, 256
  store i32 %v1_98a8, i32* %ip.global-to-local, align 4
  %v0_98ac = load i32, i32* @r5, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_98b8 = load i32, i32* @r4, align 4
  store i32 %v0_98b8, i32* %r0.global-to-local, align 4
  %v5_98c0 = inttoptr i32 %v0_98ac to i32*
  %v6_98c0 = call i32 @function_829c(i32 %v0_98b8, i32* %v5_98c0, i32 11, i32 1, i32 %v1_98a8)
  %v1_98c8 = urem i32 %v6_98c0, 256
  store i32 %v1_98c8, i32* %ip.global-to-local, align 4
  %v0_98cc = load i32, i32* @r5, align 4
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_98d8 = load i32, i32* @r4, align 4
  store i32 %v0_98d8, i32* %r0.global-to-local, align 4
  %v5_98e0 = inttoptr i32 %v0_98cc to i32*
  %v6_98e0 = call i32 @function_829c(i32 %v0_98d8, i32* %v5_98e0, i32 12, i32 1, i32 %v1_98c8)
  %v1_98e8 = urem i32 %v6_98e0, 256
  store i32 %v1_98e8, i32* %ip.global-to-local, align 4
  %v0_98ec = load i32, i32* @r5, align 4
  store i32 %v0_98ec, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r7, align 4
  store i32 %v0_98f4, i32* %r3.global-to-local, align 4
  %v0_98f8 = load i32, i32* @r4, align 4
  store i32 %v0_98f8, i32* %r0.global-to-local, align 4
  %v5_9900 = inttoptr i32 %v0_98ec to i32*
  %v6_9900 = call i32 @function_829c(i32 %v0_98f8, i32* %v5_9900, i32 13, i32 %v0_98f4, i32 %v1_98e8)
  %v1_9908 = urem i32 %v6_9900, 256
  store i32 %v1_9908, i32* %ip.global-to-local, align 4
  %v0_990c = load i32, i32* @r5, align 4
  store i32 %v0_990c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_9914 = load i32, i32* @r7, align 4
  store i32 %v0_9914, i32* %r3.global-to-local, align 4
  %v0_9918 = load i32, i32* @r4, align 4
  store i32 %v0_9918, i32* %r0.global-to-local, align 4
  %v5_9920 = inttoptr i32 %v0_990c to i32*
  %v6_9920 = call i32 @function_829c(i32 %v0_9918, i32* %v5_9920, i32 14, i32 %v0_9914, i32 %v1_9908)
  %v1_9928 = urem i32 %v6_9920, 256
  store i32 %v1_9928, i32* %ip.global-to-local, align 4
  %v0_992c = load i32, i32* @r5, align 4
  store i32 %v0_992c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_9934 = load i32, i32* @r7, align 4
  store i32 %v0_9934, i32* %r3.global-to-local, align 4
  %v0_9938 = load i32, i32* @r4, align 4
  store i32 %v0_9938, i32* %r0.global-to-local, align 4
  %v5_9940 = inttoptr i32 %v0_992c to i32*
  %v6_9940 = call i32 @function_829c(i32 %v0_9938, i32* %v5_9940, i32 15, i32 %v0_9934, i32 %v1_9928)
  %v1_9948 = urem i32 %v6_9940, 256
  store i32 %v1_9948, i32* %ip.global-to-local, align 4
  %v0_994c = load i32, i32* @r7, align 4
  store i32 %v0_994c, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9954 = load i32, i32* @r5, align 4
  store i32 %v0_9954, i32* %r1.global-to-local, align 4
  %v0_9958 = load i32, i32* @r4, align 4
  store i32 %v0_9958, i32* %r0.global-to-local, align 4
  %v5_9960 = inttoptr i32 %v0_9954 to i32*
  %v6_9960 = call i32 @function_829c(i32 %v0_9958, i32* %v5_9960, i32 %v0_994c, i32 768, i32 %v1_9948)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_996c = load i32, i32* @r5, align 4
  store i32 %v0_996c, i32* %r1.global-to-local, align 4
  %v0_9974 = load i32, i32* @r4, align 4
  store i32 %v0_9974, i32* %r0.global-to-local, align 4
  %v5_9978 = inttoptr i32 %v0_996c to i32*
  %v6_9978 = call i32 @function_829c(i32 %v0_9974, i32* %v5_9978, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9980 = urem i32 %v6_9978, 256
  store i32 %v1_9980, i32* %r3.global-to-local, align 4
  %v0_9984 = load i32, i32* @r7, align 4
  store i32 %v0_9984, i32* %r0.global-to-local, align 4
  %v1_998c = inttoptr i32 %v0_9984 to i32*
  %v2_998c = call i32 @function_108e4(i32* %v1_998c)
  %v1_9990 = load i32, i32* @r6, align 4
  %v2_9990 = add i32 %v1_9990, %v2_998c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_99a4 = call i32 @function_10bdc(i32 2, i32 3, i32 6)
  store i32 %v3_99a4, i32* %r0.global-to-local, align 4
  %v0_99a8 = load i32, i32* @r8, align 4
  %v3_99a8 = udiv i32 %v0_99a8, 65536
  store i32 %v3_99a8, i32* %r1.global-to-local, align 4
  %v7_99ac = icmp eq i32 %v3_99a4, -1
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_99a4, i32* @sb, align 4
  br i1 %v7_99ac, label %dec_label_pc_9d60, label %dec_label_pc_99bc

dec_label_pc_99bc:                                ; preds = %dec_label_pc_97b0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_99c4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_99c4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_99cc = load i32, i32* @r7, align 4
  store i32 %v0_99cc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_99d8 = call i32 @function_10bac(i32 %v3_99a4, i32 %v0_99cc, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_99d8, i32* %r0.global-to-local, align 4
  %v7_99dc = icmp eq i32 %v6_99d8, -1
  store i1 %v7_99dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99dc, label %dec_label_pc_9d58, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99bc
  store i32 %v1_97b4, i32* %r2.global-to-local, align 4
  %v0_99e8 = load i32, i32* @sl, align 4
  %v3_99e8 = mul i32 %v0_99e8, 65536
  store i32 %v3_99e8, i32* %r0.global-to-local, align 4
  %v3_99ec = urem i32 %v0_99e8, 65536
  store i32 %v3_99ec, i32* %r3.global-to-local, align 4
  %v2_99f0 = icmp eq i32 %v1_97b4, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %v0_99f4 = load i32, i32* @r7, align 4
  store i32 %v0_99f4, i32* %stack_var_-40, align 4
  br i1 %v2_99f0, label %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge, label %dec_label_pc_9a00

dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge: ; preds = %dec_label_pc_99e4
  %.pre = add i32 %v6_9960, 40
  br label %dec_label_pc_9be0.preheader

dec_label_pc_9a00:                                ; preds = %dec_label_pc_99e4
  %v0_9a04 = load i32, i32* @r8, align 4
  %v3_9a04 = udiv i32 %v0_9a04, 16777216
  %tmp77 = udiv i32 %v0_99e8, 256
  %v3_9a08 = urem i32 %tmp77, 256
  store i32 %v3_9a08, i32* %r0.global-to-local, align 4
  %v1_9a0c = add i32 %v6_9960, 40
  store i32 %v1_9a0c, i32* %ip.global-to-local, align 4
  %v3_9dd4 = icmp ugt i32 %v0_99a8, -65537
  %v2_9ab8 = ptrtoint i32* %stack_var_-60 to i32
  %v3_9ac4 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_9adc = urem i32 %v1_9a0c, 256
  %tmp78 = udiv i32 %v1_9a0c, 256
  %v3_9ae0 = urem i32 %tmp78, 256
  %v2_9af0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_9af4 = ptrtoint i32* %stack_var_-332 to i32
  %v2_9af8 = ptrtoint i32* %stack_var_-44 to i32
  %v4_9b6c = zext i8 %tmp32 to i32
  %v4_9b70 = zext i8 %tmp31 to i32
  %v4_9b7c = mul nuw nsw i32 %v4_9b70, 256
  %v4_9b8c = zext i8 %tmp30 to i32
  %v1_9b90 = and i32 %v4_9b8c, 18
  %v2_9b94 = icmp eq i32 %v1_9b90, 18
  %v1_9fec = urem i32 %v6_98a0, 2
  %tmp101 = sub nsw i32 0, %v1_9fec
  %v4_9ff4 = and i32 %tmp101, 32
  %v1_a020 = urem i32 %v6_98e0, 2
  %tmp102 = sub nsw i32 0, %v1_a020
  %v4_a028 = and i32 %tmp102, 8
  %v1_a06c = urem i32 %v6_9940, 2
  %v4_9ae4 = mul nuw nsw i32 %v1_9adc, 256
  %v5_9ae4 = or i32 %v4_9ae4, %v3_9ae0
  %v5_9b7c = or i32 %v4_9b6c, %v4_9b7c
  %v1_9b9c = and i32 %v4_9b8c, 5
  %v2_9b9c = icmp eq i32 %v1_9b9c, 0
  %v1_9aa4 = urem i32 %v3_99a8, 256
  %v4_9aa8 = mul nuw nsw i32 %v1_9aa4, 256
  %v5_9aa8 = or i32 %v3_9a04, %v4_9aa8
  %v1_9ab0 = trunc i32 %v3_99a8 to i8
  %v1_9ab4 = trunc i32 %v3_9a04 to i8
  %v1_9edc = urem i32 %v0_99e8, 256
  %v4_9ee4 = mul nuw nsw i32 %v1_9edc, 256
  %v5_9ee4 = or i32 %v4_9ee4, %v3_9a08
  %sext = mul i32 %v1_9a0c, 16777216
  %v4_9f00 = sdiv i32 %sext, 16777216
  %v1_a004 = urem i32 %v6_98c0, 2
  %tmp103 = sub nsw i32 0, %v1_a004
  %v4_a00c = and i32 %tmp103, 16
  %v1_a038 = urem i32 %v6_9900, 2
  %tmp104 = sub nsw i32 0, %v1_a038
  %v4_a040 = and i32 %tmp104, 4
  %v1_a050 = urem i32 %v6_9920, 2
  %tmp105 = sub nsw i32 0, %v1_a050
  %v3_a058 = and i32 %tmp105, 2
  br label %dec_label_pc_9a1c.outer

dec_label_pc_9a1c.outer:                          ; preds = %bb93, %dec_label_pc_9a00
  %stack_var_-336.0.ph = phi i32 [ %v0_9f1c, %bb93 ], [ %tmp, %dec_label_pc_9a00 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_9e28, %bb93 ], [ %tmp38, %dec_label_pc_9a00 ]
  br label %dec_label_pc_9a1c

dec_label_pc_9a1c:                                ; preds = %dec_label_pc_9a1c.outer, %dec_label_pc_9bc8
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.5, %dec_label_pc_9bc8 ], [ %stack_var_-56.0.ph, %dec_label_pc_9a1c.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9a28 = call i32 @function_10bdc(i32 2, i32 1, i32 0)
  store i32 %v3_9a28, i32* %r0.global-to-local, align 4
  %v7_9a2c = icmp eq i32 %v3_9a28, -1
  store i1 %v7_9a2c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9a28, i32* @sl, align 4
  br i1 %v7_9a2c, label %dec_label_pc_9bc8, label %dec_label_pc_9a38

dec_label_pc_9a38:                                ; preds = %dec_label_pc_9a1c, %dec_label_pc_9ba4
  %v0_9a40 = phi i32 [ %v3_9bb8, %dec_label_pc_9ba4 ], [ %v3_9a28, %dec_label_pc_9a1c ]
  %stack_var_-56.1 = phi i32 [ %v0_9e28, %dec_label_pc_9ba4 ], [ %stack_var_-56.0, %dec_label_pc_9a1c ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9a40 = call i32 @function_1057c(i32 %v0_9a40, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9a48 = or i32 %v2_9a40, 2048
  store i32 %v1_9a48, i32* @r2, align 4
  %v0_9a4c = load i32, i32* @sl, align 4
  store i32 %v0_9a4c, i32* %r0.global-to-local, align 4
  %v2_9a50 = call i32 @function_1057c(i32 %v0_9a4c, i32 4)
  store i32 %v2_9a50, i32* %r0.global-to-local, align 4
  %v3_9a54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9a54, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %lr.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_9a70 = mul i32 %v3_9a54, 24
  store i32 %v5_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = add i32 %v5_9a70, %arg3
  store i32 %v2_9a74, i32* %r2.global-to-local, align 4
  %v1_9a78 = add i32 %v2_9a74, 20
  %v2_9a78 = inttoptr i32 %v1_9a78 to i8*
  %v3_9a78 = load i8, i8* %v2_9a78, align 1
  %v4_9a78 = zext i8 %v3_9a78 to i32
  store i32 %v4_9a78, i32* %r3.global-to-local, align 4
  %v2_9a7c = icmp ugt i8 %v3_9a78, 30
  %v7_9a7c = icmp eq i8 %v3_9a78, 31
  store i1 %v7_9a7c, i1* %cpsr_z.global-to-local, align 1
  %v2_9a80 = xor i1 %v7_9a7c, true
  %v3_9a80 = and i1 %v2_9a7c, %v2_9a80
  br i1 %v3_9a80, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_9a38
  %v5_9a80 = add i32 %v2_9a74, 16
  %v6_9a80 = inttoptr i32 %v5_9a80 to i32*
  %v7_9a80 = load i32, i32* %v6_9a80, align 4
  store i32 %v7_9a80, i32* %r3.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_9a38, %bb
  %v4_9a84 = phi i32 [ %v4_9a78, %dec_label_pc_9a38 ], [ %v7_9a80, %bb ]
  %v4_9a84.stack_var_-56.1 = select i1 %v3_9a80, i32 %v4_9a84, i32 %stack_var_-56.1
  %v2_9a88 = xor i1 %v2_9a7c, true
  %v3_9a88 = or i1 %v7_9a7c, %v2_9a88
  br i1 %v3_9a88, label %dec_label_pc_9d68, label %dec_label_pc_9a8c

dec_label_pc_9a8c:                                ; preds = %bb79
  store i32 %v3_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9dd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9dd4, label %dec_label_pc_9ddc, label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_9d68, %dec_label_pc_9a8c
  %stack_var_-56.3 = phi i32 [ %v2_9dc0, %dec_label_pc_9d68 ], [ %v4_9a84.stack_var_-56.1, %dec_label_pc_9a8c ]
  store i32 %v3_9a04, i32* %r0.global-to-local, align 4
  store i32 %v5_9aa8, i32* %r3.global-to-local, align 4
  store i32 %v1_9aa4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9ab8

dec_label_pc_9ab8:                                ; preds = %dec_label_pc_9ddc, %dec_label_pc_9aa0
  %stack_var_-57.0 = phi i8 [ %v1_9de4, %dec_label_pc_9ddc ], [ %v1_9ab0, %dec_label_pc_9aa0 ]
  %v0_9e28 = phi i32 [ %stack_var_-56.6, %dec_label_pc_9ddc ], [ %stack_var_-56.3, %dec_label_pc_9aa0 ]
  %storemerge = phi i8 [ %v1_9ddc, %dec_label_pc_9ddc ], [ %v1_9ab4, %dec_label_pc_9aa0 ]
  store i32 %v2_9ab8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9ac0 = load i32, i32* @sl, align 4
  store i32 %v0_9ac0, i32* %r0.global-to-local, align 4
  %v4_9ac4 = call i32 @function_10a38(i32 %v0_9ac0, %sockaddr* %v3_9ac4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9acc = call i32 @function_108e4(i32* null)
  store i32 %v2_9acc, i32* %r0.global-to-local, align 4
  store i32 %v1_9a0c, i32* %r1.global-to-local, align 4
  store i32 %v1_9adc, i32* %r3.global-to-local, align 4
  store i32 %v5_9ae4, i32* @fp, align 4
  store i32 %v1_9adc, i32* %r2.global-to-local, align 4
  store i32 %v2_9acc, i32* @r4, align 4
  store i32 %v2_9af4, i32* @r7, align 4
  store i32 %v2_9af8, i32* @r6, align 4
  %v9_9b50 = icmp eq i32 %tmp33, %v0_9e28
  %v4_9b74 = zext i8 %storemerge to i32
  %v4_9b78 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_9b50 to i32
  %v9_9b64 = icmp eq i1 %v9_9b50, false
  %v4_9b80 = mul nuw nsw i32 %v4_9b78, 256
  %v5_9b80 = or i32 %v4_9b74, %v4_9b80
  %v9_9b84 = icmp eq i32 %v5_9b80, %v5_9b7c
  br label %dec_label_pc_9b14

dec_label_pc_9b04:                                ; preds = %.thread25, %dec_label_pc_9b6c, %dec_label_pc_9b9c, %bb82
  %v2_9b04 = call i32 @function_108e4(i32* null)
  %v0_9b08 = load i32, i32* @r4, align 4
  %v2_9b08 = sub i32 %v2_9b04, %v0_9b08
  store i32 %v2_9b08, i32* %r0.global-to-local, align 4
  %v7_9b0c = icmp eq i32 %v2_9b08, 10
  store i1 %v7_9b0c, i1* %cpsr_z.global-to-local, align 1
  %v8_9b10 = icmp sgt i32 %v2_9b08, 10
  br i1 %v8_9b10, label %dec_label_pc_9ba4, label %dec_label_pc_9b14

dec_label_pc_9b14:                                ; preds = %dec_label_pc_9b04, %dec_label_pc_9ab8
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_9af4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9b24 = load i32, i32* @sb, align 4
  store i32 %v0_9b24, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v7_9b34 = call i32 @function_10b18(i32 %v0_9b24, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_9af0, i32 %v2_9af8)
  store i32 %v7_9b34, i32* %r2.global-to-local, align 4
  %v7_9b3c = icmp eq i32 %v7_9b34, -1
  store i1 %v7_9b3c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9b3c, label %dec_label_pc_9d60, label %dec_label_pc_9b48

dec_label_pc_9b48:                                ; preds = %dec_label_pc_9b14
  store i32 %tmp33, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9b5c = icmp eq i32 %v7_9b34, 40
  store i1 %v7_9b5c, i1* %cpsr_z.global-to-local, align 1
  %tmp106 = icmp ult i32 %v7_9b34, 41
  br i1 %tmp106, label %.thread25, label %bb82

.thread25:                                        ; preds = %dec_label_pc_9b48
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9b04

bb82:                                             ; preds = %dec_label_pc_9b48
  store i1 %v9_9b64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b64, label %dec_label_pc_9b04, label %dec_label_pc_9b6c

dec_label_pc_9b6c:                                ; preds = %bb82
  store i32 %v4_9b70, i32* %r1.global-to-local, align 4
  store i32 %v4_9b74, i32* %ip.global-to-local, align 4
  store i32 %v4_9b78, i32* %r2.global-to-local, align 4
  store i32 %v5_9b7c, i32* %r3.global-to-local, align 4
  store i32 %v5_9b80, i32* @r5, align 4
  store i1 %v9_9b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b84, label %dec_label_pc_9b8c, label %dec_label_pc_9b04

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9b6c
  store i32 %v4_9b8c, i32* %r2.global-to-local, align 4
  store i32 %v1_9b90, i32* %r3.global-to-local, align 4
  store i1 %v2_9b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b94, label %dec_label_pc_9e1c, label %dec_label_pc_9b9c

dec_label_pc_9b9c:                                ; preds = %dec_label_pc_9b8c
  store i1 %v2_9b9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b9c, label %dec_label_pc_9b04, label %dec_label_pc_9ba4

dec_label_pc_9ba4:                                ; preds = %dec_label_pc_9b9c, %dec_label_pc_9b04
  %v0_9ba4 = load i32, i32* @sl, align 4
  store i32 %v0_9ba4, i32* %r0.global-to-local, align 4
  %v1_9ba8 = call i32 @function_10640(i32 %v0_9ba4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9bb8 = call i32 @function_10bdc(i32 2, i32 1, i32 0)
  store i32 %v3_9bb8, i32* %r0.global-to-local, align 4
  %v3_9bbc = icmp eq i32 %v3_9bb8, -1
  %v8_9bbc = icmp eq i32 %v3_9bb8, -1
  store i1 %v8_9bbc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9bb8, i32* @sl, align 4
  br i1 %v3_9bbc, label %dec_label_pc_9bc8, label %dec_label_pc_9a38

dec_label_pc_9bc8:                                ; preds = %dec_label_pc_9ba4, %dec_label_pc_9a1c
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_9a1c ], [ %v0_9e28, %dec_label_pc_9ba4 ]
  %v3_9bc8 = load i32, i32* %stack_var_-40, align 4
  %v1_9bd0 = add i32 %v3_9bc8, 1
  store i32 %v1_9bd0, i32* %r3.global-to-local, align 4
  %v9_9bd4 = icmp eq i32 %v1_9bd0, %v1_97b4
  store i1 %v9_9bd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9bd0, i32* %stack_var_-40, align 4
  %v5_9bdc = icmp slt i32 %v1_9bd0, %v1_97b4
  br i1 %v5_9bdc, label %dec_label_pc_9a1c, label %dec_label_pc_9be0.preheader

dec_label_pc_9be0.preheader:                      ; preds = %bb93, %dec_label_pc_9bc8, %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge
  %v1_9c14.pre-phi = phi i32 [ %.pre, %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge ], [ %v1_9a0c, %dec_label_pc_9bc8 ], [ %v1_9a0c, %bb93 ]
  %v1_9bf8 = add i32 %v6_9960, 20
  %v3_9bfc = mul i32 %v1_9bf8, 65536
  %tmp84 = mul i32 %v1_9bf8, 256
  %v1_9c04 = and i32 %tmp84, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp85 = udiv i32 %v1_9bf8, 256
  %v4_9c08 = urem i32 %tmp85, 256
  %v5_9c08 = or i32 %v4_9c08, %v1_9c04
  %v2_9d38 = icmp eq i32 %v1_9980, 0
  %v3_9d24 = icmp eq i32 %v3_99ec, 65535
  br label %dec_label_pc_9be0

dec_label_pc_9be0:                                ; preds = %dec_label_pc_9be0.preheader, %dec_label_pc_9e04
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_99f0, label %dec_label_pc_9e04, label %dec_label_pc_9bf4

dec_label_pc_9bf4:                                ; preds = %dec_label_pc_9be0
  store i32 %v1_9bf8, i32* @r8, align 4
  store i32 %v3_9bfc, i32* %r2.global-to-local, align 4
  store i32 %v5_9c08, i32* @fp, align 4
  store i32 %v6_9960, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_9c14.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_9d10

dec_label_pc_9c20:                                ; preds = %dec_label_pc_9d34, %dec_label_pc_9d48
  %v0_9c20 = load i32, i32* @r7, align 4
  %v1_9c20 = trunc i32 %v0_9c20 to i8
  %v2_9c20 = load i32, i32* @r4, align 4
  %v3_9c20 = add i32 %v2_9c20, 10
  %v4_9c20 = inttoptr i32 %v3_9c20 to i8*
  store i8 %v1_9c20, i8* %v4_9c20, align 1
  %v0_9c24 = load i32, i32* @r7, align 4
  %v1_9c24 = trunc i32 %v0_9c24 to i8
  %v2_9c24 = load i32, i32* @r4, align 4
  %v3_9c24 = add i32 %v2_9c24, 11
  %v4_9c24 = inttoptr i32 %v3_9c24 to i8*
  store i8 %v1_9c24, i8* %v4_9c24, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9c2c = load i32, i32* @r4, align 4
  store i32 %v0_9c2c, i32* @r0, align 4
  %v2_9c30 = call i32 @function_c690(i32 %v0_9c2c, i32 20)
  %v3_9c30 = trunc i32 %v2_9c30 to i8
  store i32 %v2_9c30, i32* %r0.global-to-local, align 4
  %v3_9c34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_97e0, i32* %r2.global-to-local, align 4
  %v3_9c3c = mul i32 %v3_9c34, 16
  %v2_9c40 = add i32 %v3_9c3c, %v2_97e0
  store i32 %v2_9c40, i32* %r1.global-to-local, align 4
  %v1_9c44 = add i32 %v2_9c40, 4
  %v2_9c44 = inttoptr i32 %v1_9c44 to i32*
  %v3_9c44 = load i32, i32* %v2_9c44, align 4
  %v3_9c48 = mul i32 %v3_9c44, 65536
  store i32 %v3_9c48, i32* %ip.global-to-local, align 4
  %tmp86 = mul i32 %v3_9c44, 256
  %v1_9c50 = and i32 %tmp86, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp87 = udiv i32 %v3_9c44, 256
  %v4_9c54 = urem i32 %tmp87, 256
  %v5_9c54 = or i32 %v4_9c54, %v1_9c50
  store i32 %v5_9c54, i32* %r2.global-to-local, align 4
  %v1_9c58 = add i32 %v3_9c44, 1
  store i32 %v1_9c58, i32* %r3.global-to-local, align 4
  store i32 %v1_9c58, i32* %v2_9c44, align 4
  %v0_9c60 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c60 = load i32, i32* @r5, align 4
  %v2_9c60 = add i32 %v1_9c60, 4
  %v3_9c60 = inttoptr i32 %v2_9c60 to i32*
  store i32 %v0_9c60, i32* %v3_9c60, align 4
  %v0_9c64 = load i32, i32* %r1.global-to-local, align 4
  %v1_9c64 = add i32 %v0_9c64, 8
  %v2_9c64 = inttoptr i32 %v1_9c64 to i32*
  %v3_9c64 = load i32, i32* %v2_9c64, align 4
  %tmp88 = mul i32 %v3_9c64, 256
  %v1_9c70 = and i32 %tmp88, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp89 = udiv i32 %v3_9c64, 256
  %v4_9c74 = urem i32 %tmp89, 256
  %v5_9c74 = or i32 %v4_9c74, %v1_9c70
  store i32 %v5_9c74, i32* %r2.global-to-local, align 4
  %v4_9c7828 = udiv i32 %v2_9c30, 256
  %v1_9c7c = trunc i32 %v4_9c7828 to i8
  %v2_9c7c = load i32, i32* @r4, align 4
  %v3_9c7c = add i32 %v2_9c7c, 11
  %v4_9c7c = inttoptr i32 %v3_9c7c to i8*
  store i8 %v1_9c7c, i8* %v4_9c7c, align 1
  %v3_9c80 = load i32, i32* @r4, align 4
  %v4_9c80 = add i32 %v3_9c80, 10
  %v5_9c80 = inttoptr i32 %v4_9c80 to i8*
  store i8 %v3_9c30, i8* %v5_9c80, align 1
  %v0_9c84 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c84 = load i32, i32* @r5, align 4
  %v2_9c84 = add i32 %v1_9c84, 8
  %v3_9c84 = inttoptr i32 %v2_9c84 to i32*
  store i32 %v0_9c84, i32* %v3_9c84, align 4
  %v0_9c88 = load i32, i32* @r5, align 4
  store i32 %v0_9c88, i32* @r1, align 4
  %v0_9c8c = load i32, i32* @fp, align 4
  store i32 %v0_9c8c, i32* %r2.global-to-local, align 4
  %v0_9c90 = load i32, i32* @r8, align 4
  store i32 %v0_9c90, i32* %r3.global-to-local, align 4
  %v0_9c94 = load i32, i32* @r4, align 4
  store i32 %v0_9c94, i32* %r0.global-to-local, align 4
  %v0_9c98 = load i32, i32* @r7, align 4
  %v1_9c98 = trunc i32 %v0_9c98 to i8
  %v3_9c98 = add i32 %v0_9c88, 16
  %v4_9c98 = inttoptr i32 %v3_9c98 to i8*
  store i8 %v1_9c98, i8* %v4_9c98, align 1
  %v0_9c9c = load i32, i32* @r7, align 4
  %v1_9c9c = trunc i32 %v0_9c9c to i8
  %v2_9c9c = load i32, i32* @r5, align 4
  %v3_9c9c = add i32 %v2_9c9c, 17
  %v4_9c9c = inttoptr i32 %v3_9c9c to i8*
  store i8 %v1_9c9c, i8* %v4_9c9c, align 1
  %v4_9ca0 = call i32 @function_c6ec(i32 %v0_9c94, i32 %v0_9c88, i32 %v0_9c8c, i32 %v0_9c90)
  %v5_9ca0 = trunc i32 %v4_9ca0 to i8
  store i32 %v4_9ca0, i32* %r0.global-to-local, align 4
  %v4_9ca429 = udiv i32 %v4_9ca0, 256
  %v1_9ca8 = trunc i32 %v4_9ca429 to i8
  %v2_9ca8 = load i32, i32* @r5, align 4
  %v3_9ca8 = add i32 %v2_9ca8, 17
  %v4_9ca8 = inttoptr i32 %v3_9ca8 to i8*
  store i8 %v1_9ca8, i8* %v4_9ca8, align 1
  %v3_9cac = load i32, i32* @r5, align 4
  %v4_9cac = add i32 %v3_9cac, 16
  %v5_9cac = inttoptr i32 %v4_9cac to i8*
  store i8 %v5_9ca0, i8* %v5_9cac, align 1
  %v3_9cb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9cb0, i32* %r3.global-to-local, align 4
  %v0_9cb4 = load i32, i32* @r4, align 4
  %v1_9cb4 = add i32 %v0_9cb4, 20
  %v2_9cb4 = inttoptr i32 %v1_9cb4 to i32*
  %v3_9cb4 = load i32, i32* %v2_9cb4, align 4
  %v5_9cbc = mul i32 %v3_9cb0, 24
  %v3_9cc4 = udiv i32 %v3_9cb4, 65536
  store i32 %v3_9cc4, i32* %r2.global-to-local, align 4
  %v2_9cc8 = add i32 %v5_9cbc, %arg3
  store i32 %v2_9cc8, i32* %ip.global-to-local, align 4
  %v3_9ccc4 = udiv i32 %v3_9cb4, 16777216
  %v1_9cd0 = trunc i32 %v3_9ccc4 to i8
  %v3_9cd0 = add i32 %v2_9cc8, 3
  %v4_9cd0 = inttoptr i32 %v3_9cd0 to i8*
  store i8 %v1_9cd0, i8* %v4_9cd0, align 1
  %v0_9cd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cd4 = trunc i32 %v0_9cd4 to i8
  %v2_9cd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9cd4 = add i32 %v2_9cd4, 2
  %v4_9cd4 = inttoptr i32 %v3_9cd4 to i8*
  store i8 %v1_9cd4, i8* %v4_9cd4, align 1
  %v0_9cd8 = load i32, i32* @r4, align 4
  store i32 %v0_9cd8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9ce0 = load i32, i32* @sb, align 4
  store i32 %v0_9ce0, i32* %r0.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @sl, align 4
  store i32 %v0_9ce4, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_9cec = load i32, i32* %ip.global-to-local, align 4
  %v6_9cf4 = inttoptr i32 %v0_9cd8 to i32*
  %v7_9cf4 = call i32 @function_10b78(i32 %v0_9ce0, i32* %v6_9cf4, i32 %v0_9ce4, i32 16384, i32 %v0_9cec, i32 16)
  %v3_9cf8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9cf8, i32* %r3.global-to-local, align 4
  store i32 %v1_97b4, i32* %ip.global-to-local, align 4
  %v1_9d00 = add i32 %v3_9cf8, 1
  store i32 %v1_9d00, i32* %r0.global-to-local, align 4
  %v9_9d04 = icmp eq i32 %v1_9d00, %v1_97b4
  store i1 %v9_9d04, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9d00, i32* %stack_var_-40, align 4
  %v6_9d0c = icmp slt i32 %v1_9d00, %v1_97b4
  br i1 %v6_9d0c, label %dec_label_pc_9d10, label %dec_label_pc_9e04

dec_label_pc_9d10:                                ; preds = %dec_label_pc_9c20, %dec_label_pc_9bf4
  %v1_9d1c = phi i32 [ %v1_9d00, %dec_label_pc_9c20 ], [ 0, %dec_label_pc_9bf4 ]
  store i32 %v2_97f0, i32* %ip.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_99ec, i32* %lr.global-to-local, align 4
  %v4_9d1c = mul i32 %v1_9d1c, 4
  %v5_9d1c = add i32 %v4_9d1c, %v2_97f0
  %v6_9d1c = inttoptr i32 %v5_9d1c to i32*
  %v7_9d1c = load i32, i32* %v6_9d1c, align 4
  store i32 %v7_9d1c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9d24, i1* %cpsr_z.global-to-local, align 1
  %v1_9d28 = add i32 %v7_9d1c, 40
  store i32 %v1_9d28, i32* @r6, align 4
  %v1_9d2c = add i32 %v7_9d1c, 20
  store i32 %v1_9d2c, i32* @r5, align 4
  br i1 %v3_9d24, label %dec_label_pc_9df0, label %dec_label_pc_9d34

dec_label_pc_9d34:                                ; preds = %dec_label_pc_9d10, %dec_label_pc_9df0
  %v0_9d40 = phi i32 [ %v1_9d28, %dec_label_pc_9d10 ], [ %v0_9d40.pre, %dec_label_pc_9df0 ]
  store i1 %v2_9d38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  store i32 %v0_9d40, i32* %r0.global-to-local, align 4
  br i1 %v2_9d38, label %dec_label_pc_9c20, label %dec_label_pc_9d48

dec_label_pc_9d48:                                ; preds = %dec_label_pc_9d34
  %v2_9d48 = call i32 @function_d2bc(i32 %v0_9d40, i32 %v6_9960)
  store i32 %v2_9d48, i32* %r0.global-to-local, align 4
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  %v0_9d50 = load i32, i32* @r7, align 4
  %v1_9d50 = trunc i32 %v0_9d50 to i8
  %v2_9d50 = load i32, i32* @r6, align 4
  %v4_9d50 = add i32 %v2_9d50, %v6_9960
  %v5_9d50 = inttoptr i32 %v4_9d50 to i8*
  store i8 %v1_9d50, i8* %v5_9d50, align 1
  br label %dec_label_pc_9c20

dec_label_pc_9d58:                                ; preds = %dec_label_pc_99bc
  %v0_9d58 = load i32, i32* @sb, align 4
  store i32 %v0_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = call i32 @function_10640(i32 %v0_9d58)
  store i32 %v1_9d5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d60

dec_label_pc_9d60:                                ; preds = %dec_label_pc_9b14, %dec_label_pc_9e04, %dec_label_pc_97b0, %dec_label_pc_9d58
  %v29_9d64 = phi i32 [ %v3_99a4, %dec_label_pc_97b0 ], [ %v1_9d5c, %dec_label_pc_9d58 ], [ %v2_9e08, %dec_label_pc_9e04 ], [ 0, %dec_label_pc_9b14 ]
  ret i32 %v29_9d64

dec_label_pc_9d68:                                ; preds = %bb79
  %v1_9d68 = add i32 %v2_9a74, 16
  %v2_9d68 = inttoptr i32 %v1_9d68 to i32*
  %v3_9d68 = load i32, i32* %v2_9d68, align 4
  store i32 %v3_9d68, i32* @r4, align 4
  %v0_9d6c = call i32 @function_d208()
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  %v3_9d70 = load i32, i32* %stack_var_-40, align 4
  %v5_9d78 = mul i32 %v3_9d70, 24
  %v0_9d80 = load i32, i32* @r4, align 4
  %v2_9d84 = add i32 %v5_9d78, %arg3
  store i32 %v2_9d84, i32* %r1.global-to-local, align 4
  %v1_9d80 = udiv i32 %v0_9d80, 256
  %v3_9d88 = and i32 %v1_9d80, 65280
  store i32 %v3_9d88, i32* %r2.global-to-local, align 4
  %v1_9d8c = and i32 %v0_9d80, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9d8c, i32* %r3.global-to-local, align 4
  %v3_9d90 = mul i32 %v0_9d80, 16777216
  %v4_9d94 = mul i32 %v1_9d8c, 256
  %v5_9d94 = or i32 %v4_9d94, %v3_9d90
  store i32 %v5_9d94, i32* %ip.global-to-local, align 4
  %v1_9d98 = add i32 %v2_9d84, 20
  %v2_9d98 = inttoptr i32 %v1_9d98 to i8*
  %v3_9d98 = load i8, i8* %v2_9d98, align 1
  %v4_9d98 = zext i8 %v3_9d98 to i32
  store i32 %v4_9d98, i32* %lr.global-to-local, align 4
  %v4_9d9c = udiv i32 %v0_9d80, 16777216
  %v5_9d9c = or i32 %v3_9d88, %v4_9d9c
  %v2_9da0 = or i32 %v5_9d9c, %v5_9d94
  %v7_9da4 = lshr i32 %v0_9d6c, %v4_9d98
  %v8_9da4 = add i32 %v7_9da4, %v2_9da0
  store i32 %v8_9da4, i32* %r2.global-to-local, align 4
  %v3_9db0 = mul i32 %v8_9da4, 16777216
  %v1_9db4 = and i32 %v8_9da4, 65280
  store i32 %v1_9db4, i32* %r0.global-to-local, align 4
  %v4_9db8 = mul nuw nsw i32 %v1_9db4, 256
  %v5_9db8 = or i32 %v4_9db8, %v3_9db0
  store i32 %v5_9db8, i32* %r1.global-to-local, align 4
  %v2_9dc0 = call i32 @llvm.bswap.i32(i32 %v8_9da4)
  store i32 %v3_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9dd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9dd4, label %dec_label_pc_9ddc, label %dec_label_pc_9aa0

dec_label_pc_9ddc:                                ; preds = %dec_label_pc_9d68, %dec_label_pc_9a8c
  %stack_var_-56.6 = phi i32 [ %v2_9dc0, %dec_label_pc_9d68 ], [ %v4_9a84.stack_var_-56.1, %dec_label_pc_9a8c ]
  %v0_9ddc = call i32 @function_d208()
  %v1_9ddc = trunc i32 %v0_9ddc to i8
  store i32 %v0_9ddc, i32* %r0.global-to-local, align 4
  %v4_9de0 = sdiv i32 %v0_9ddc, 256
  store i32 %v4_9de0, i32* %r3.global-to-local, align 4
  %v1_9de4 = trunc i32 %v4_9de0 to i8
  br label %dec_label_pc_9ab8

dec_label_pc_9df0:                                ; preds = %dec_label_pc_9d10
  %v0_9df0 = call i32 @function_d208()
  %v1_9df0 = trunc i32 %v0_9df0 to i8
  store i32 %v0_9df0, i32* %r0.global-to-local, align 4
  %v4_9df4 = sdiv i32 %v0_9df0, 256
  store i32 %v4_9df4, i32* %r3.global-to-local, align 4
  %v1_9df8 = trunc i32 %v4_9df4 to i8
  %v2_9df8 = load i32, i32* @r4, align 4
  %v3_9df8 = add i32 %v2_9df8, 5
  %v4_9df8 = inttoptr i32 %v3_9df8 to i8*
  store i8 %v1_9df8, i8* %v4_9df8, align 1
  %v3_9dfc = load i32, i32* @r4, align 4
  %v4_9dfc = add i32 %v3_9dfc, 4
  %v5_9dfc = inttoptr i32 %v4_9dfc to i8*
  store i8 %v1_9df0, i8* %v5_9dfc, align 1
  %v0_9d40.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9d34

dec_label_pc_9e04:                                ; preds = %dec_label_pc_9c20, %dec_label_pc_9be0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9e08 = call i32 @function_108e4(i32* null)
  store i32 %v2_9e08, i32* %r0.global-to-local, align 4
  store i32 %v2_9990, i32* %lr.global-to-local, align 4
  %v9_9e10 = icmp eq i32 %v2_9990, %v2_9e08
  store i1 %v9_9e10, i1* %cpsr_z.global-to-local, align 1
  %v6_9e14 = icmp slt i32 %v2_9990, %v2_9e08
  br i1 %v6_9e14, label %dec_label_pc_9d60, label %dec_label_pc_9be0

dec_label_pc_9e1c:                                ; preds = %dec_label_pc_9b8c
  %v3_9e1c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9e1c, i32* @r4, align 4
  store i32 %v2_97e0, i32* %r0.global-to-local, align 4
  %v3_9e24 = mul i32 %v3_9e1c, 16
  store i32 %v3_9e24, i32* %ip.global-to-local, align 4
  %v3_9e28 = add i32 %v3_9e24, %v2_97e0
  %v4_9e28 = inttoptr i32 %v3_9e28 to i32*
  store i32 %v0_9e28, i32* %v4_9e28, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_9e30 = add i32 %stack_var_-336.0.ph, 4
  %v2_9e30 = inttoptr i32 %v1_9e30 to i32*
  %v3_9e30 = load i32, i32* %v2_9e30, align 4
  store i32 %v3_9e30, i32* %r0.global-to-local, align 4
  %v1_9e38 = and i32 %v3_9e30, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9e38, i32* %r1.global-to-local, align 4
  %v3_9e3c = mul i32 %v3_9e30, 16777216
  %v1_9e34 = udiv i32 %v3_9e30, 256
  %v3_9e40 = and i32 %v1_9e34, 65280
  %v4_9e44 = mul i32 %v1_9e38, 256
  %v4_9e48 = udiv i32 %v3_9e30, 16777216
  %v5_9e48 = or i32 %v4_9e48, %v3_9e3c
  %v5_9e44 = or i32 %v5_9e48, %v4_9e44
  %v2_9e4c = or i32 %v5_9e44, %v3_9e40
  store i32 %v2_97e0, i32* %r2.global-to-local, align 4
  %v1_9e54 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e54 = add i32 %v1_9e54, %v2_97e0
  store i32 %v2_9e54, i32* %ip.global-to-local, align 4
  %v2_9e58 = add i32 %v2_9e54, 4
  %v3_9e58 = inttoptr i32 %v2_9e58 to i32*
  store i32 %v2_9e4c, i32* %v3_9e58, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_9e60 = add i32 %stack_var_-336.0.ph, 8
  %v2_9e60 = inttoptr i32 %v1_9e60 to i32*
  %v3_9e60 = load i32, i32* %v2_9e60, align 4
  store i32 %v3_9e60, i32* %r0.global-to-local, align 4
  %v1_9e68 = and i32 %v3_9e60, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9e68, i32* %r1.global-to-local, align 4
  %v3_9e6c = mul i32 %v3_9e60, 16777216
  %v1_9e64 = udiv i32 %v3_9e60, 256
  %v3_9e70 = and i32 %v1_9e64, 65280
  %v4_9e74 = mul i32 %v1_9e68, 256
  %v5_9e74 = or i32 %v4_9e74, %v3_9e6c
  store i32 %v5_9e74, i32* %r2.global-to-local, align 4
  %v4_9e78 = udiv i32 %v3_9e60, 16777216
  %v5_9e78 = or i32 %v3_9e70, %v4_9e78
  %v2_9e7c = or i32 %v5_9e78, %v5_9e74
  store i32 %v2_9e7c, i32* %r3.global-to-local, align 4
  %v1_9e80 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e80 = add i32 %v1_9e80, 8
  %v3_9e80 = inttoptr i32 %v2_9e80 to i32*
  store i32 %v2_9e7c, i32* %v3_9e80, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_9e88 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_9e88 = load i32, i32* %v1_9e88, align 4
  %v3_9e8c = udiv i32 %v2_9e88, 65536
  store i32 %v3_9e8c, i32* %r2.global-to-local, align 4
  %v3_9e905 = udiv i32 %v2_9e88, 16777216
  store i32 %v3_9e905, i32* %r1.global-to-local, align 4
  %v0_9e94 = load i32, i32* @r5, align 4
  %v3_9e94 = sdiv i32 %v0_9e94, 256
  store i32 %v3_9e94, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v3_9e94 to i8
  %v2_9e98 = load i32, i32* %ip.global-to-local, align 4
  %v3_9e98 = add i32 %v2_9e98, 15
  %v4_9e98 = inttoptr i32 %v3_9e98 to i8*
  store i8 %v1_9e98, i8* %v4_9e98, align 1
  %v0_9e9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9e9c = trunc i32 %v0_9e9c to i8
  %v2_9e9c = load i32, i32* %ip.global-to-local, align 4
  %v3_9e9c = add i32 %v2_9e9c, 13
  %v4_9e9c = inttoptr i32 %v3_9e9c to i8*
  store i8 %v1_9e9c, i8* %v4_9e9c, align 1
  %v0_9ea0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9ea0 = trunc i32 %v0_9ea0 to i8
  %v2_9ea0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ea0 = add i32 %v2_9ea0, 12
  %v4_9ea0 = inttoptr i32 %v3_9ea0 to i8*
  store i8 %v1_9ea0, i8* %v4_9ea0, align 1
  %v0_9ea4 = load i32, i32* @r5, align 4
  %v1_9ea4 = trunc i32 %v0_9ea4 to i8
  %v2_9ea4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ea4 = add i32 %v2_9ea4, 14
  %v4_9ea4 = inttoptr i32 %v3_9ea4 to i8*
  store i8 %v1_9ea4, i8* %v4_9ea4, align 1
  store i32 %v1_9a0c, i32* %r0.global-to-local, align 4
  %v1_9eac = call i32 @function_10d74(i32 %v1_9a0c)
  store i32 %v1_9eac, i32* %r0.global-to-local, align 4
  store i32 %v2_97f0, i32* %r1.global-to-local, align 4
  %v3_9eb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9eb4, i32* %r2.global-to-local, align 4
  %v2_9eb8 = load i32, i32* @r4, align 4
  %v5_9eb8 = mul i32 %v2_9eb8, 4
  %v6_9eb8 = add i32 %v5_9eb8, %v2_97f0
  %v7_9eb8 = inttoptr i32 %v6_9eb8 to i32*
  store i32 %v1_9eac, i32* %v7_9eb8, align 4
  %v0_9ebc = load i32, i32* %r1.global-to-local, align 4
  %v1_9ebc = load i32, i32* %r2.global-to-local, align 4
  %v4_9ebc = mul i32 %v1_9ebc, 4
  %v5_9ebc = add i32 %v4_9ebc, %v0_9ebc
  %v6_9ebc = inttoptr i32 %v5_9ebc to i32*
  %v7_9ebc = load i32, i32* %v6_9ebc, align 4
  store i32 %v7_9ebc, i32* %r0.global-to-local, align 4
  %v1_9ec0 = inttoptr i32 %v7_9ebc to i8*
  %v2_9ec0 = load i8, i8* %v1_9ec0, align 1
  %tmp107 = urem i8 %v2_9ec0, 16
  %v1_9ec4 = zext i8 %tmp107 to i32
  %v1_9ec8 = or i32 %v1_9ec4, 64
  store i32 %v1_9ec8, i32* %r3.global-to-local, align 4
  %v1_9ecc = trunc i32 %v1_9ec8 to i8
  store i8 %v1_9ecc, i8* %v1_9ec0, align 1
  store i32 %v3_99ec, i32* %ip.global-to-local, align 4
  %v0_9ed4 = load i32, i32* %r0.global-to-local, align 4
  %v1_9ed4 = inttoptr i32 %v0_9ed4 to i8*
  %v2_9ed4 = load i8, i8* %v1_9ed4, align 1
  %v1_9ee0 = and i8 %v2_9ed4, -16
  store i32 %v5_9ee4, i32* %r3.global-to-local, align 4
  %v1_9ee8 = or i8 %v1_9ee0, 5
  store i32 %v1_9870, i32* %ip.global-to-local, align 4
  store i32 %v1_9edc, i32* %r1.global-to-local, align 4
  store i8 %v1_9ee8, i8* %v1_9ed4, align 1
  %v0_9ef8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ef8 = trunc i32 %v0_9ef8 to i8
  %v2_9ef8 = load i32, i32* %r0.global-to-local, align 4
  %v3_9ef8 = add i32 %v2_9ef8, 5
  %v4_9ef8 = inttoptr i32 %v3_9ef8 to i8*
  store i8 %v1_9ef8, i8* %v4_9ef8, align 1
  store i32 %v6_9808, i32* %r1.global-to-local, align 4
  store i32 %v4_9f00, i32* %lr.global-to-local, align 4
  %v2_9f04 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f04 = add i32 %v2_9f04, 1
  %v4_9f04 = inttoptr i32 %v3_9f04 to i8*
  store i8 %v5_9828, i8* %v4_9f04, align 1
  store i32 %v5_9864, i32* %r2.global-to-local, align 4
  %v0_9f0c = load i32, i32* %ip.global-to-local, align 4
  %v2_9f0c = icmp eq i32 %v0_9f0c, 0
  store i1 %v2_9f0c, i1* %cpsr_z.global-to-local, align 1
  %v0_9f10 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f10 = trunc i32 %v0_9f10 to i8
  %v2_9f10 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f10 = add i32 %v2_9f10, 4
  %v4_9f10 = inttoptr i32 %v3_9f10 to i8*
  store i8 %v1_9f10, i8* %v4_9f10, align 1
  %v0_9f14 = load i32, i32* %r0.global-to-local, align 4
  %v1_9f14 = add i32 %v0_9f14, 20
  store i32 %v1_9f14, i32* %r3.global-to-local, align 4
  %v0_9f18 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f18 = trunc i32 %v0_9f18 to i8
  %v3_9f18 = add i32 %v0_9f14, 8
  %v4_9f18 = inttoptr i32 %v3_9f18 to i8*
  store i8 %v1_9f18, i8* %v4_9f18, align 1
  %v0_9f1c = load i32, i32* %r3.global-to-local, align 4
  %v0_9f20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f20, label %.thread7, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_9e1c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9f24 = load i32, i32* %r0.global-to-local, align 4
  %v4_9f24 = add i32 %v3_9f24, 6
  %v5_9f24 = inttoptr i32 %v4_9f24 to i8*
  store i8 64, i8* %v5_9f24, align 1
  %v0_9f28.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f28.pr.pr, label %.thread7, label %bb91

bb91:                                             ; preds = %.thread6
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_9e1c, %.thread6, %bb91
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_9f30 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f30 = add i32 %v2_9f30, 9
  %v4_9f30 = inttoptr i32 %v3_9f30 to i8*
  store i8 6, i8* %v4_9f30, align 1
  %v0_9f34 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f34, label %bb93, label %bb92

bb92:                                             ; preds = %.thread7
  %v1_9f34 = load i32, i32* %r2.global-to-local, align 4
  %v2_9f34 = trunc i32 %v1_9f34 to i8
  %v3_9f34 = load i32, i32* %r0.global-to-local, align 4
  %v4_9f34 = add i32 %v3_9f34, 7
  %v5_9f34 = inttoptr i32 %v4_9f34 to i8*
  store i8 %v2_9f34, i8* %v5_9f34, align 1
  br label %bb93

bb93:                                             ; preds = %.thread7, %bb92
  %v2_9f3c = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_9f3c, i32* %r3.global-to-local, align 4
  %v1_9f40 = load i32, i32* %r0.global-to-local, align 4
  %v2_9f40 = add i32 %v1_9f40, 12
  %v3_9f40 = inttoptr i32 %v2_9f40 to i32*
  store i32 %v2_9f3c, i32* %v3_9f40, align 4
  %v3_9f44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f44, i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* %ip.global-to-local, align 4
  %v4_9f4c = mul i32 %v3_9f44, 16
  %v5_9f4c = add i32 %v4_9f4c, %v2_97e0
  %v6_9f4c = inttoptr i32 %v5_9f4c to i32*
  %v7_9f4c = load i32, i32* %v6_9f4c, align 4
  store i32 %v7_9f4c, i32* %r3.global-to-local, align 4
  %v0_9f50 = load i32, i32* %lr.global-to-local, align 4
  %v1_9f50 = trunc i32 %v0_9f50 to i8
  %v2_9f50 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f50 = add i32 %v2_9f50, 3
  %v4_9f50 = inttoptr i32 %v3_9f50 to i8*
  store i8 %v1_9f50, i8* %v4_9f50, align 1
  %v0_9f54 = load i32, i32* @fp, align 4
  %v1_9f54 = trunc i32 %v0_9f54 to i8
  %v2_9f54 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f54 = add i32 %v2_9f54, 2
  %v4_9f54 = inttoptr i32 %v3_9f54 to i8*
  store i8 %v1_9f54, i8* %v4_9f54, align 1
  %v0_9f58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f58 = load i32, i32* %r0.global-to-local, align 4
  %v2_9f58 = add i32 %v1_9f58, 16
  %v3_9f58 = inttoptr i32 %v2_9f58 to i32*
  store i32 %v0_9f58, i32* %v3_9f58, align 4
  %v0_9f5c = load i32, i32* %r2.global-to-local, align 4
  %v3_9f5c = mul i32 %v0_9f5c, 16
  %v1_9f60 = load i32, i32* %ip.global-to-local, align 4
  %v2_9f60 = add i32 %v1_9f60, %v3_9f5c
  store i32 %v2_9f60, i32* %r2.global-to-local, align 4
  %v1_9f64 = add i32 %v2_9f60, 13
  %v2_9f64 = inttoptr i32 %v1_9f64 to i8*
  %v3_9f64 = load i8, i8* %v2_9f64, align 1
  %v4_9f64 = zext i8 %v3_9f64 to i32
  store i32 %v4_9f64, i32* %r1.global-to-local, align 4
  %v1_9f68 = add i32 %v2_9f60, 12
  %v2_9f68 = inttoptr i32 %v1_9f68 to i8*
  %v3_9f68 = load i8, i8* %v2_9f68, align 1
  %v4_9f68 = zext i8 %v3_9f68 to i32
  store i32 %v0_9f1c, i32* %lr.global-to-local, align 4
  %v4_9f70 = mul nuw nsw i32 %v4_9f64, 256
  %v5_9f70 = or i32 %v4_9f68, %v4_9f70
  store i32 %v5_9f70, i32* %r3.global-to-local, align 4
  %v2_9f74 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f74 = add i32 %v2_9f74, 20
  %v4_9f74 = inttoptr i32 %v3_9f74 to i8*
  store i8 %v3_9f68, i8* %v4_9f74, align 1
  %v0_9f78 = load i32, i32* %r3.global-to-local, align 4
  %v3_9f78 = sdiv i32 %v0_9f78, 256
  store i32 %v3_9f78, i32* %r3.global-to-local, align 4
  %v1_9f7c = trunc i32 %v3_9f78 to i8
  %v2_9f7c = load i32, i32* %lr.global-to-local, align 4
  %v3_9f7c = add i32 %v2_9f7c, 1
  %v4_9f7c = inttoptr i32 %v3_9f7c to i8*
  store i8 %v1_9f7c, i8* %v4_9f7c, align 1
  %v0_9f80 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f80 = add i32 %v0_9f80, 8
  %v2_9f80 = inttoptr i32 %v1_9f80 to i32*
  %v3_9f80 = load i32, i32* %v2_9f80, align 4
  store i32 %v3_9f80, i32* %r1.global-to-local, align 4
  %v0_9f84 = load i32, i32* %lr.global-to-local, align 4
  %v1_9f84 = add i32 %v0_9f84, 13
  %v2_9f84 = inttoptr i32 %v1_9f84 to i8*
  %v3_9f84 = load i8, i8* %v2_9f84, align 1
  %v4_9f84 = zext i8 %v3_9f84 to i32
  store i32 %v4_9f84, i32* %r3.global-to-local, align 4
  %v1_9f88 = add i32 %v0_9f80, 15
  %v2_9f88 = inttoptr i32 %v1_9f88 to i8*
  %v3_9f88 = load i8, i8* %v2_9f88, align 1
  %v4_9f88 = zext i8 %v3_9f88 to i32
  store i32 %v4_9f88, i32* %ip.global-to-local, align 4
  %v0_9f8c = load i32, i32* %r0.global-to-local, align 4
  %v1_9f8c = add i32 %v0_9f8c, 40
  store i32 %v1_9f8c, i32* @r4, align 4
  %v1_9f90 = add i32 %v0_9f80, 14
  %v2_9f90 = inttoptr i32 %v1_9f90 to i8*
  %v3_9f90 = load i8, i8* %v2_9f90, align 1
  %v4_9f90 = zext i8 %v3_9f90 to i32
  store i32 %v4_9f90, i32* %r0.global-to-local, align 4
  %v2_9f94 = add i32 %v0_9f84, 4
  %v3_9f94 = inttoptr i32 %v2_9f94 to i32*
  store i32 %v3_9f80, i32* %v3_9f94, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  %v0_9f9c = load i32, i32* %r3.global-to-local, align 4
  %v1_9f9c = or i32 %v0_9f9c, 1
  store i32 %v1_9f9c, i32* %r3.global-to-local, align 4
  %v0_9fa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fa0 = add i32 %v0_9fa0, 4
  %v2_9fa0 = inttoptr i32 %v1_9fa0 to i32*
  %v3_9fa0 = load i32, i32* %v2_9fa0, align 4
  store i32 %v3_9fa0, i32* %lr.global-to-local, align 4
  %v1_9fa4 = trunc i32 %v1_9f9c to i8
  %v3_9fa4 = add i32 %v0_9f1c, 13
  %v4_9fa4 = inttoptr i32 %v3_9fa4 to i8*
  store i8 %v1_9fa4, i8* %v4_9fa4, align 1
  %v0_9fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fa8 = add i32 %v0_9fa8, 12
  %v2_9fa8 = inttoptr i32 %v1_9fa8 to i8*
  %v3_9fa8 = load i8, i8* %v2_9fa8, align 1
  %v4_9fa8 = zext i8 %v3_9fa8 to i32
  store i32 %v4_9fa8, i32* %r2.global-to-local, align 4
  %v1_9fac = add i32 %v0_9fa8, 13
  %v2_9fac = inttoptr i32 %v1_9fac to i8*
  %v3_9fac = load i8, i8* %v2_9fac, align 1
  %v4_9fac = zext i8 %v3_9fac to i32
  %v0_9fb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fb0 = load i32, i32* %ip.global-to-local, align 4
  %v4_9fb0 = mul i32 %v1_9fb0, 256
  %v5_9fb0 = or i32 %v4_9fb0, %v0_9fb0
  store i32 %v5_9fb0, i32* %r0.global-to-local, align 4
  %tmp108 = urem i8 %v3_9fa8, 16
  %v1_9fb4 = zext i8 %tmp108 to i32
  store i32 %v0_9f1c, i32* %ip.global-to-local, align 4
  %v3_9fbc = sdiv i32 %v5_9fb0, 256
  store i32 %v3_9fbc, i32* %r1.global-to-local, align 4
  %v1_9fc0 = or i32 %v1_9fb4, 128
  store i32 %v1_9fc0, i32* %r2.global-to-local, align 4
  %v1_9fc4 = or i32 %v4_9fac, 16
  store i32 %v1_9fc4, i32* %r3.global-to-local, align 4
  %v1_9fc8 = trunc i32 %v3_9fbc to i8
  %v3_9fc8 = add i32 %v0_9f1c, 3
  %v4_9fc8 = inttoptr i32 %v3_9fc8 to i8*
  store i8 %v1_9fc8, i8* %v4_9fc8, align 1
  %v0_9fcc = load i32, i32* %lr.global-to-local, align 4
  %v1_9fcc = load i32, i32* %ip.global-to-local, align 4
  %v2_9fcc = add i32 %v1_9fcc, 8
  %v3_9fcc = inttoptr i32 %v2_9fcc to i32*
  store i32 %v0_9fcc, i32* %v3_9fcc, align 4
  %v0_9fd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fd0 = trunc i32 %v0_9fd0 to i8
  %v2_9fd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd0 = add i32 %v2_9fd0, 12
  %v4_9fd0 = inttoptr i32 %v3_9fd0 to i8*
  store i8 %v1_9fd0, i8* %v4_9fd0, align 1
  %v0_9fd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fd4 = trunc i32 %v0_9fd4 to i8
  %v2_9fd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd4 = add i32 %v2_9fd4, 13
  %v4_9fd4 = inttoptr i32 %v3_9fd4 to i8*
  store i8 %v1_9fd4, i8* %v4_9fd4, align 1
  %v0_9fd8 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fd8 = trunc i32 %v0_9fd8 to i8
  %v2_9fd8 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd8 = add i32 %v2_9fd8, 2
  %v4_9fd8 = inttoptr i32 %v3_9fd8 to i8*
  store i8 %v1_9fd8, i8* %v4_9fd8, align 1
  %v0_9fdc = call i32 @function_d208()
  %v1_9fdc = trunc i32 %v0_9fdc to i8
  store i32 %v0_9fdc, i32* %r0.global-to-local, align 4
  store i32 %v0_9f1c, i32* %lr.global-to-local, align 4
  store i32 %v1_98a8, i32* %r1.global-to-local, align 4
  %v3_9fe8 = load i8, i8* %v4_9fa4, align 1
  %v4_9fe8 = zext i8 %v3_9fe8 to i32
  store i32 %v1_9fec, i32* %r2.global-to-local, align 4
  %v1_9ff0 = and i32 %v4_9fe8, 223
  %v5_9ff4 = or i32 %v1_9ff0, %v4_9ff4
  store i32 %v5_9ff4, i32* %r3.global-to-local, align 4
  %v1_9ff8 = trunc i32 %v5_9ff4 to i8
  store i8 %v1_9ff8, i8* %v4_9fa4, align 1
  store i32 %v1_98c8, i32* %ip.global-to-local, align 4
  %v0_a000 = load i32, i32* %lr.global-to-local, align 4
  %v1_a000 = add i32 %v0_a000, 13
  %v2_a000 = inttoptr i32 %v1_a000 to i8*
  %v3_a000 = load i8, i8* %v2_a000, align 1
  %v4_a000 = zext i8 %v3_a000 to i32
  store i32 %v1_a004, i32* %r3.global-to-local, align 4
  %v1_a008 = and i32 %v4_a000, 239
  %v5_a00c = or i32 %v1_a008, %v4_a00c
  store i32 %v5_a00c, i32* %r2.global-to-local, align 4
  %v1_a010 = trunc i32 %v5_a00c to i8
  store i8 %v1_a010, i8* %v2_a000, align 1
  %v0_a014 = load i32, i32* %lr.global-to-local, align 4
  %v1_a014 = add i32 %v0_a014, 13
  %v2_a014 = inttoptr i32 %v1_a014 to i8*
  %v3_a014 = load i8, i8* %v2_a014, align 1
  %v4_a014 = zext i8 %v3_a014 to i32
  store i32 %v1_98e8, i32* %lr.global-to-local, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  store i32 %v1_a020, i32* %r2.global-to-local, align 4
  %v1_a024 = and i32 %v4_a014, 247
  %v5_a028 = or i32 %v1_a024, %v4_a028
  store i32 %v5_a028, i32* %r3.global-to-local, align 4
  %v1_a02c = trunc i32 %v5_a028 to i8
  store i8 %v1_a02c, i8* %v4_9fa4, align 1
  store i32 %v1_9908, i32* %ip.global-to-local, align 4
  %v0_a034 = load i32, i32* %r1.global-to-local, align 4
  %v1_a034 = add i32 %v0_a034, 13
  %v2_a034 = inttoptr i32 %v1_a034 to i8*
  %v3_a034 = load i8, i8* %v2_a034, align 1
  %v4_a034 = zext i8 %v3_a034 to i32
  store i32 %v1_a038, i32* %r3.global-to-local, align 4
  %v1_a03c = and i32 %v4_a034, 251
  %v5_a040 = or i32 %v1_a03c, %v4_a040
  store i32 %v5_a040, i32* %r2.global-to-local, align 4
  %v1_a044 = trunc i32 %v5_a040 to i8
  store i8 %v1_a044, i8* %v2_a034, align 1
  store i32 %v1_9928, i32* %lr.global-to-local, align 4
  %v0_a04c = load i32, i32* %r1.global-to-local, align 4
  %v1_a04c = add i32 %v0_a04c, 13
  %v2_a04c = inttoptr i32 %v1_a04c to i8*
  %v3_a04c = load i8, i8* %v2_a04c, align 1
  %v4_a04c = zext i8 %v3_a04c to i32
  store i32 %v1_a050, i32* %r2.global-to-local, align 4
  %v1_a054 = and i32 %v4_a04c, 253
  %v4_a058 = or i32 %v1_a054, %v3_a058
  store i32 %v4_a058, i32* %r3.global-to-local, align 4
  %v1_a05c = trunc i32 %v4_a058 to i8
  store i8 %v1_a05c, i8* %v2_a04c, align 1
  %v0_a060 = load i32, i32* %r1.global-to-local, align 4
  %v1_a060 = add i32 %v0_a060, 13
  %v2_a060 = inttoptr i32 %v1_a060 to i8*
  %v3_a060 = load i8, i8* %v2_a060, align 1
  %v4_a060 = zext i8 %v3_a060 to i32
  %v1_a068 = and i32 %v4_a060, 254
  %v2_a070 = or i32 %v1_a068, %v1_a06c
  store i32 %v2_a070, i32* %r3.global-to-local, align 4
  store i32 %v0_9f1c, i32* %r2.global-to-local, align 4
  %v4_a078 = sdiv i32 %v0_9fdc, 256
  store i32 %v4_a078, i32* %r1.global-to-local, align 4
  %v1_a07c = trunc i32 %v2_a070 to i8
  store i8 %v1_a07c, i8* %v4_9fa4, align 1
  %v0_a080 = load i32, i32* %r1.global-to-local, align 4
  %v1_a080 = trunc i32 %v0_a080 to i8
  %v2_a080 = load i32, i32* %r2.global-to-local, align 4
  %v3_a080 = add i32 %v2_a080, 15
  %v4_a080 = inttoptr i32 %v3_a080 to i8*
  store i8 %v1_a080, i8* %v4_a080, align 1
  %v3_a084 = load i32, i32* %r2.global-to-local, align 4
  %v4_a084 = add i32 %v3_a084, 14
  %v5_a084 = inttoptr i32 %v4_a084 to i8*
  store i8 %v1_9fdc, i8* %v5_a084, align 1
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  %v0_a08c = load i32, i32* @r4, align 4
  store i32 %v0_a08c, i32* %r0.global-to-local, align 4
  %v2_a090 = call i32 @function_d2bc(i32 %v0_a08c, i32 %v6_9960)
  store i32 %v2_a090, i32* %r0.global-to-local, align 4
  store i32 %v6_9960, i32* %ip.global-to-local, align 4
  %v2_a09c = load i32, i32* @r4, align 4
  %v4_a09c = add i32 %v2_a09c, %v6_9960
  %v5_a09c = inttoptr i32 %v4_a09c to i8*
  store i8 0, i8* %v5_a09c, align 1
  %v3_a0a0 = load i32, i32* %stack_var_-40, align 4
  %v1_a0a8 = add i32 %v3_a0a0, 1
  store i32 %v1_a0a8, i32* %r3.global-to-local, align 4
  %v9_a0ac = icmp eq i32 %v1_a0a8, %v1_97b4
  store i1 %v9_a0ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a0a8, i32* %stack_var_-40, align 4
  %v5_a0b4 = icmp slt i32 %v1_a0a8, %v1_97b4
  br i1 %v5_a0b4, label %dec_label_pc_9a1c.outer, label %dec_label_pc_9be0.preheader

; uselistorder directives
  uselistorder i32 %v1_a0a8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9fdc, { 0, 2, 1 }
  uselistorder i32 %v3_9fbc, { 1, 0 }
  uselistorder i32 %v3_9f78, { 1, 0 }
  uselistorder i32 %v0_9f1c, { 3, 4, 5, 0, 6, 1, 7, 8, 2 }
  uselistorder i32 %v3_9e94, { 1, 0 }
  uselistorder i32 %v3_9e60, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_9e30, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_9e24, { 1, 0 }
  uselistorder i32 %v2_9e08, { 1, 2, 3, 0 }
  uselistorder i32 %v4_9df4, { 1, 0 }
  uselistorder i32 %v0_9df0, { 0, 2, 1 }
  uselistorder i32 %v4_9de0, { 1, 0 }
  uselistorder i32 %v0_9ddc, { 0, 2, 1 }
  uselistorder i32 %v8_9da4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_9d80, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9d40, { 1, 0 }
  uselistorder i32 %v7_9d1c, { 1, 0, 2 }
  uselistorder i32 %v1_9d00, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_9ca0, { 0, 2, 1 }
  uselistorder i32 %v0_9c88, { 1, 0, 2 }
  uselistorder i32 %v3_9c64, { 1, 0 }
  uselistorder i32 %v3_9c44, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9c30, { 0, 2, 1 }
  uselistorder i1 %v3_9d24, { 1, 0 }
  uselistorder i32 %v1_9bf8, { 3, 2, 0, 1 }
  uselistorder i32 %v1_9bd0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9bb8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9b3c, { 1, 0 }
  uselistorder i32 %v7_9b34, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9b80, { 1, 0 }
  uselistorder i1 %v9_9b64, { 1, 0 }
  uselistorder i32 %v4_9b78, { 1, 0 }
  uselistorder i32 %v4_9b74, { 1, 0 }
  uselistorder i32 %v0_9e28, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_9a7c, { 1, 0, 2 }
  uselistorder i1 %v7_9a2c, { 1, 0 }
  uselistorder i32 %v3_9a28, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_a050, { 1, 0 }
  uselistorder i32 %v1_a038, { 1, 0 }
  uselistorder i32 %v1_a004, { 1, 0 }
  uselistorder i32 %v1_9edc, { 1, 0 }
  uselistorder i32 %v1_9aa4, { 1, 0 }
  uselistorder i32 %v5_9b7c, { 1, 0 }
  uselistorder i32 %v1_a020, { 1, 0 }
  uselistorder i32 %v1_9fec, { 1, 0 }
  uselistorder i1 %v2_9b94, { 1, 0 }
  uselistorder i32 %v1_9b90, { 1, 0 }
  uselistorder i32 %v4_9b8c, { 2, 0, 1 }
  uselistorder i32 %v4_9b70, { 1, 0 }
  uselistorder i32 %v1_9adc, { 2, 1, 0 }
  uselistorder i1 %v3_9dd4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_9a0c, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_9a04, { 1, 0, 2 }
  uselistorder i1 %v2_99f0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_99ec, { 1, 2, 3, 0 }
  uselistorder i32 %v0_99e8, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99dc, { 1, 0 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v3_99a8, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_99a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_9990, { 2, 1, 0 }
  uselistorder i32 %v1_9980, { 1, 0 }
  uselistorder i32 %v6_9960, { 0, 6, 5, 4, 1, 7, 9, 8, 10, 11, 3, 2 }
  uselistorder i32 %v1_9948, { 1, 0 }
  uselistorder i32 %v1_9928, { 1, 2, 0 }
  uselistorder i32 %v1_9908, { 1, 2, 0 }
  uselistorder i32 %v1_98e8, { 1, 2, 0 }
  uselistorder i32 %v1_98c8, { 1, 2, 0 }
  uselistorder i32 %v1_98a8, { 1, 2, 0 }
  uselistorder i32 %v1_9870, { 1, 2, 0 }
  uselistorder i32 %v6_9808, { 2, 1, 3, 0 }
  uselistorder i32 %v2_97f0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_97e0, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_97b4, { 11, 12, 6, 7, 8, 5, 9, 10, 13, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 56, 55, 57, 59, 58, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 22, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 23, 24, 25, 26, 29, 28, 30, 32, 31, 33, 35, 34, 37, 41, 36, 38, 40, 39, 44, 42, 43, 45, 46, 47, 49, 50, 48, 51, 54, 52, 53, 56, 55, 60, 57, 58, 59, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 25, 26, 27, 28, 29, 31, 32, 47, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 9, 10, 8, 11, 12, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9d60, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_9d34, { 1, 0 }
  uselistorder label %dec_label_pc_9c20, { 1, 0 }
  uselistorder label %dec_label_pc_9be0, { 1, 0 }
  uselistorder label %dec_label_pc_9b04, { 2, 1, 3, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_9a38, { 1, 0 }
  uselistorder label %dec_label_pc_9a1c, { 1, 0 }
}

define i32 @function_a0c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a0c0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_a0c0 = load i32, i32* @sb, align 4
  %v24_a0c0 = load i32, i32* @fp, align 4
  %v1_a0c4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a0e0 = urem i32 %arg4, 256
  store i32 %v1_a0e0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a0f0 = call i32 @function_10ec8(i32 %v1_a0c4, i32 4)
  %v0_a0f4 = load i32, i32* @r5, align 4
  store i32 %v0_a0f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a100 = load i32, i32* @r7, align 4
  store i32 %v0_a100, i32* %r3.global-to-local, align 4
  %v0_a104 = load i32, i32* @r4, align 4
  %v5_a108 = inttoptr i32 %v0_a0f4 to i32*
  %v6_a108 = call i32 @function_829c(i32 %v0_a104, i32* %v5_a108, i32 2, i32 %v0_a100, i32 %v2_a0f0)
  %v1_a114 = urem i32 %v6_a108, 256
  store i32 %v1_a114, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a120 = load i32, i32* @r5, align 4
  store i32 %v0_a120, i32* %r1.global-to-local, align 4
  %v0_a124 = load i32, i32* @r4, align 4
  %v5_a128 = trunc i32 %v6_a108 to i8
  %v6_a12c = inttoptr i32 %v0_a120 to i32*
  %v7_a12c = call i32 @function_829c(i32 %v0_a124, i32* %v6_a12c, i32 3, i32 65535, i32 %v6_a108)
  %v0_a130 = load i32, i32* @r5, align 4
  store i32 %v0_a130, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a140 = load i32, i32* @r4, align 4
  %v5_a144 = inttoptr i32 %v0_a130 to i32*
  %v6_a144 = call i32 @function_829c(i32 %v0_a140, i32* %v5_a144, i32 4, i32 64, i32 %v7_a12c)
  %v1_a14c = urem i32 %v6_a144, 256
  store i32 %v1_a14c, i32* %ip.global-to-local, align 4
  %v0_a150 = load i32, i32* @r5, align 4
  store i32 %v0_a150, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_a158 = load i32, i32* @r7, align 4
  store i32 %v0_a158, i32* %r3.global-to-local, align 4
  %v0_a15c = load i32, i32* @r4, align 4
  %v5_a160 = trunc i32 %v6_a144 to i8
  %v6_a164 = inttoptr i32 %v0_a150 to i32*
  %v7_a164 = call i32 @function_829c(i32 %v0_a15c, i32* %v6_a164, i32 5, i32 %v0_a158, i32 %v6_a144)
  %v1_a170 = urem i32 %v7_a164, 256
  store i32 %v1_a170, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a17c = load i32, i32* @r5, align 4
  store i32 %v0_a17c, i32* %r1.global-to-local, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v5_a188 = inttoptr i32 %v0_a17c to i32*
  %v6_a188 = call i32 @function_829c(i32 %v0_a180, i32* %v5_a188, i32 6, i32 65535, i32 %v1_a170)
  %v0_a190 = load i32, i32* @r5, align 4
  store i32 %v0_a190, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a188, i32* %sb.global-to-local, align 4
  %v0_a1a0 = load i32, i32* @r4, align 4
  %v5_a1a4 = inttoptr i32 %v0_a190 to i32*
  %v6_a1a4 = call i32 @function_829c(i32 %v0_a1a0, i32* %v5_a1a4, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a1b0 = load i32, i32* @r5, align 4
  store i32 %v0_a1b0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r4, align 4
  %v5_a1c0 = inttoptr i32 %v0_a1b0 to i32*
  %v6_a1c0 = call i32 @function_829c(i32 %v0_a1bc, i32* %v5_a1c0, i32 16, i32 65535, i32 %v6_a1a4)
  %v0_a1cc = load i32, i32* @r5, align 4
  store i32 %v0_a1cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a1d8 = load i32, i32* @r4, align 4
  %v5_a1dc = inttoptr i32 %v0_a1cc to i32*
  %v6_a1dc = call i32 @function_829c(i32 %v0_a1d8, i32* %v5_a1dc, i32 17, i32 65535, i32 %v6_a1c0)
  %v0_a1e0 = load i32, i32* @r5, align 4
  store i32 %v0_a1e0, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a1ec = load i32, i32* @r7, align 4
  store i32 %v0_a1ec, i32* %r3.global-to-local, align 4
  %v0_a1f0 = load i32, i32* @r4, align 4
  %v5_a1f4 = inttoptr i32 %v0_a1e0 to i32*
  %v6_a1f4 = call i32 @function_829c(i32 %v0_a1f0, i32* %v5_a1f4, i32 10, i32 %v0_a1ec, i32 %v6_a1dc)
  %v0_a1f8 = load i32, i32* @r5, align 4
  store i32 %v0_a1f8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  %v5_a20c = inttoptr i32 %v0_a1f8 to i32*
  %v6_a20c = call i32 @function_829c(i32 %v0_a208, i32* %v5_a20c, i32 11, i32 1, i32 %v6_a1f4)
  %v0_a210 = load i32, i32* @r5, align 4
  store i32 %v0_a210, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a21c = load i32, i32* @r7, align 4
  store i32 %v0_a21c, i32* %r3.global-to-local, align 4
  %v0_a220 = load i32, i32* @r4, align 4
  %v5_a224 = inttoptr i32 %v0_a210 to i32*
  %v6_a224 = call i32 @function_829c(i32 %v0_a220, i32* %v5_a224, i32 12, i32 %v0_a21c, i32 %v6_a20c)
  %v0_a228 = load i32, i32* @r5, align 4
  store i32 %v0_a228, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_a234 = load i32, i32* @r7, align 4
  store i32 %v0_a234, i32* %r3.global-to-local, align 4
  %v0_a238 = load i32, i32* @r4, align 4
  %v5_a23c = inttoptr i32 %v0_a228 to i32*
  %v6_a23c = call i32 @function_829c(i32 %v0_a238, i32* %v5_a23c, i32 13, i32 %v0_a234, i32 %v6_a224)
  %v0_a240 = load i32, i32* @r5, align 4
  store i32 %v0_a240, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_a24c = load i32, i32* @r7, align 4
  store i32 %v0_a24c, i32* %r3.global-to-local, align 4
  %v0_a250 = load i32, i32* @r4, align 4
  %v5_a254 = inttoptr i32 %v0_a240 to i32*
  %v6_a254 = call i32 @function_829c(i32 %v0_a250, i32* %v5_a254, i32 14, i32 %v0_a24c, i32 %v6_a23c)
  %v0_a258 = load i32, i32* @r5, align 4
  store i32 %v0_a258, i32* %r1.global-to-local, align 4
  %v0_a260 = load i32, i32* @r7, align 4
  store i32 %v0_a260, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_a268 = load i32, i32* @r4, align 4
  %v5_a26c = inttoptr i32 %v0_a258 to i32*
  %v6_a26c = call i32 @function_829c(i32 %v0_a268, i32* %v5_a26c, i32 15, i32 %v0_a260, i32 %v6_a254)
  %v0_a270 = load i32, i32* @r5, align 4
  store i32 %v0_a270, i32* %r1.global-to-local, align 4
  %v0_a274 = load i32, i32* @r7, align 4
  store i32 %v0_a274, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a26c, i32* %fp.global-to-local, align 4
  %v0_a280 = load i32, i32* @r4, align 4
  %v5_a284 = inttoptr i32 %v0_a270 to i32*
  %v6_a284 = call i32 @function_829c(i32 %v0_a280, i32* %v5_a284, i32 %v0_a274, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a290 = load i32, i32* @r5, align 4
  store i32 %v0_a290, i32* %r1.global-to-local, align 4
  store i32 %v6_a284, i32* @sl, align 4
  %v0_a298 = load i32, i32* @r4, align 4
  %v5_a29c = inttoptr i32 %v0_a290 to i32*
  %v6_a29c = call i32 @function_829c(i32 %v0_a298, i32* %v5_a29c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_a2a8 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_a2a8, i32* %r3.global-to-local, align 4
  %v1_a2ac = urem i32 %v6_a29c, 256
  store i32 %v1_a2ac, i32* %ip.global-to-local, align 4
  %v0_a2b0 = load i32, i32* @r5, align 4
  store i32 %v0_a2b0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_a2b8 = load i32, i32* @r4, align 4
  %v5_a2c0 = inttoptr i32 %v0_a2b0 to i32*
  %v6_a2c0 = call i32 @function_8230(i32 %v0_a2b8, i32* %v5_a2c0, i32 24, i32 %v2_a2a8, i32 %v1_a2ac)
  %v0_a2c8 = load i32, i32* @r7, align 4
  %v1_a2cc = inttoptr i32 %v0_a2c8 to i32*
  %v2_a2cc = call i32 @function_108e4(i32* %v1_a2cc)
  %v1_a2d0 = load i32, i32* @r6, align 4
  %v2_a2d0 = add i32 %v1_a2d0, %v2_a2cc
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a2e4 = call i32 @function_10bdc(i32 2, i32 3, i32 6)
  %v7_a2e8 = icmp eq i32 %v3_a2e4, -1
  store i1 %v7_a2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2e8, label %dec_label_pc_a868, label %dec_label_pc_a2f4

dec_label_pc_a2f4:                                ; preds = %dec_label_pc_a0c0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a2fc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a2fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a304 = load i32, i32* @r7, align 4
  store i32 %v0_a304, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a310 = call i32 @function_10bac(i32 %v3_a2e4, i32 %v0_a304, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_a314 = icmp eq i32 %v6_a310, -1
  store i1 %v7_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a314, label %dec_label_pc_a870, label %dec_label_pc_a31c

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a2f4
  store i32 %v1_a0c4, i32* %r3.global-to-local, align 4
  %v3_a328 = mul i32 %v7_a12c, 65536
  store i32 %v3_a328, i32* @r4, align 4
  %v0_a32c = load i32, i32* %sb.global-to-local, align 4
  %v3_a32c = mul i32 %v0_a32c, 65536
  store i32 %v3_a32c, i32* %sb.global-to-local, align 4
  %v3_a334 = urem i32 %v7_a12c, 65536
  store i32 %v3_a334, i32* %ip.global-to-local, align 4
  %v3_a338 = urem i32 %v0_a32c, 65536
  store i32 %v3_a338, i32* %r1.global-to-local, align 4
  %v3_a33c = urem i32 %v6_a1a4, 65536
  store i32 %v3_a33c, i32* %r2.global-to-local, align 4
  %v2_a340 = icmp eq i32 %v1_a0c4, 0
  store i1 %v2_a340, i1* %cpsr_z.global-to-local, align 1
  %v0_a344 = load i32, i32* @r7, align 4
  store i32 %v0_a344, i32* %stack_var_-40, align 4
  br i1 %v2_a340, label %dec_label_pc_a5dc.preheader, label %dec_label_pc_a358

dec_label_pc_a358:                                ; preds = %dec_label_pc_a31c
  %v0_a368 = load i32, i32* @sl, align 4
  %v1_a370 = urem i32 %v0_a32c, 256
  %tmp73 = udiv i32 %v7_a12c, 256
  %v1_a388 = urem i32 %v6_a1a4, 256
  store i32 %v1_a388, i32* @lr, align 4
  %tmp74 = mul i32 %v6_a1c0, 256
  %v1_a398 = and i32 %tmp74, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp76 = udiv i32 %v6_a1c0, 256
  %v4_a39c = urem i32 %tmp76, 256
  %v5_a39c = or i32 %v4_a39c, %v1_a398
  %v1_a3b8 = urem i32 %v6_a1f4, 2
  %v1_a3bc = urem i32 %v6_a20c, 2
  %v1_a3c0 = urem i32 %v6_a224, 2
  %v1_a3c4 = urem i32 %v6_a23c, 2
  %v1_a368 = mul i32 %v0_a368, 65536
  %tmp93 = add i32 %v1_a368, 2621440
  %v3_a3e4 = sdiv i32 %tmp93, 16777216
  %sext12 = mul i32 %tmp73, 16777216
  %v7_a3e4 = sdiv i32 %sext12, 16777216
  %v3_a3e8 = mul nuw nsw i32 %v1_a370, 256
  %tmp77 = udiv i32 %v6_a1a4, 256
  %v3_a3ec = urem i32 %tmp77, 256
  %v1_a3f0 = urem i32 %v6_a254, 2
  store i32 %v1_a3f0, i32* %ip.global-to-local, align 4
  %v1_a3f4 = urem i32 %v6_a224, 256
  store i32 %v1_a3f4, i32* %r1.global-to-local, align 4
  %v3_a3f8 = ashr i32 %tmp93, 31
  store i32 %v3_a3f8, i32* %r2.global-to-local, align 4
  %v3_a3fc = ashr i32 %sext12, 31
  store i32 %v3_a3fc, i32* %r3.global-to-local, align 4
  %tmp94 = udiv i32 %v0_a32c, 256
  %v4_a400 = urem i32 %tmp94, 256
  %v5_a400 = or i32 %v4_a400, %v3_a3e8
  store i32 %v5_a400, i32* @r4, align 4
  %v0_a404 = load i32, i32* %fp.global-to-local, align 4
  %v1_a404 = urem i32 %v0_a404, 2
  %v4_a408 = mul nuw nsw i32 %v1_a388, 256
  %v5_a408 = or i32 %v4_a408, %v3_a3ec
  store i32 %v5_a408, i32* @r5, align 4
  %v5_a414 = trunc i32 %v3_a3f8 to i8
  store i32 %v0_a344, i32* @r6, align 4
  store i32 %v1_a370, i32* @fp, align 4
  store i32 %v1_a388, i32* @sb, align 4
  %tmp = sub nsw i32 0, %v1_a3b8
  %v4_a4f8 = and i32 %tmp, 32
  %tmp95 = sub nsw i32 0, %v1_a3bc
  %v4_a50c = and i32 %tmp95, 16
  %tmp96 = sub nsw i32 0, %v1_a3c0
  %v4_a520 = and i32 %tmp96, 8
  %tmp97 = sub nsw i32 0, %v1_a3c4
  %v4_a534 = and i32 %tmp97, 4
  %tmp98 = sub nsw i32 0, %v1_a3f0
  %v3_a548 = and i32 %tmp98, 2
  %v2_a598 = icmp eq i32 %v1_a3f4, 0
  br label %dec_label_pc_a430

dec_label_pc_a430:                                ; preds = %.thread11, %dec_label_pc_a358
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a43c = call i32 @function_10ec8(i32 1510, i32 1)
  store i32 %v2_a0f0, i32* %ip.global-to-local, align 4
  %v3_a444 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a444, i32* %r3.global-to-local, align 4
  %v2_a448 = load i32, i32* @r6, align 4
  %v5_a448 = mul i32 %v2_a448, 4
  %v6_a448 = add i32 %v5_a448, %v2_a0f0
  %v7_a448 = inttoptr i32 %v6_a448 to i32*
  store i32 %v2_a43c, i32* %v7_a448, align 4
  %v0_a44c = load i32, i32* %ip.global-to-local, align 4
  %v1_a44c = load i32, i32* %r3.global-to-local, align 4
  %v4_a44c = mul i32 %v1_a44c, 4
  %v5_a44c = add i32 %v4_a44c, %v0_a44c
  %v6_a44c = inttoptr i32 %v5_a44c to i32*
  %v7_a44c = load i32, i32* %v6_a44c, align 4
  store i32 %v7_a44c, i32* %r1.global-to-local, align 4
  %v1_a450 = inttoptr i32 %v7_a44c to i8*
  %v2_a450 = load i8, i8* %v1_a450, align 1
  %tmp99 = urem i8 %v2_a450, 16
  %v1_a454 = zext i8 %tmp99 to i32
  %v1_a458 = or i32 %v1_a454, 64
  store i32 %v1_a458, i32* %r2.global-to-local, align 4
  %v1_a45c = trunc i32 %v1_a458 to i8
  store i8 %v1_a45c, i8* %v1_a450, align 1
  %v0_a460 = load i32, i32* %r1.global-to-local, align 4
  %v1_a460 = inttoptr i32 %v0_a460 to i8*
  %v2_a460 = load i8, i8* %v1_a460, align 1
  %v1_a464 = and i8 %v2_a460, -16
  %v1_a468 = or i8 %v1_a464, 5
  store i32 %v1_a170, i32* %r2.global-to-local, align 4
  store i8 %v1_a468, i8* %v1_a460, align 1
  %v2_a478 = load i32, i32* %r1.global-to-local, align 4
  %v3_a478 = add i32 %v2_a478, 1
  %v4_a478 = inttoptr i32 %v3_a478 to i8*
  store i8 %v5_a128, i8* %v4_a478, align 1
  store i32 %v6_a144, i32* %ip.global-to-local, align 4
  %v2_a480 = load i32, i32* %r1.global-to-local, align 4
  %v3_a480 = add i32 %v2_a480, 8
  %v4_a480 = inttoptr i32 %v3_a480 to i8*
  store i8 %v5_a160, i8* %v4_a480, align 1
  %v0_a484 = load i32, i32* %r2.global-to-local, align 4
  %v2_a484 = icmp eq i32 %v0_a484, 0
  store i1 %v2_a484, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a3f8, i32* %r3.global-to-local, align 4
  store i32 %v3_a3e4, i32* %r2.global-to-local, align 4
  %v2_a490 = load i32, i32* %r1.global-to-local, align 4
  %v3_a490 = add i32 %v2_a490, 3
  %v4_a490 = inttoptr i32 %v3_a490 to i8*
  store i8 %v5_a414, i8* %v4_a490, align 1
  %v0_a494 = load i32, i32* %r2.global-to-local, align 4
  %v1_a494 = trunc i32 %v0_a494 to i8
  %v2_a494 = load i32, i32* %r1.global-to-local, align 4
  %v3_a494 = add i32 %v2_a494, 2
  %v4_a494 = inttoptr i32 %v3_a494 to i8*
  store i8 %v1_a494, i8* %v4_a494, align 1
  %v0_a498 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a498, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_a430
  store i32 %v3_a3fc, i32* %r2.global-to-local, align 4
  %extract.t91 = trunc i32 %v3_a3fc to i8
  br label %bb78

bb:                                               ; preds = %dec_label_pc_a430
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_a3fc, i32* %r2.global-to-local, align 4
  %v3_a4a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_a4a0 = add i32 %v3_a4a0, 6
  %v5_a4a0 = inttoptr i32 %v4_a4a0 to i8*
  store i8 64, i8* %v5_a4a0, align 1
  %v0_a4a8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t92 = trunc i32 %v0_a4a8.pre to i8
  br label %bb78

bb78:                                             ; preds = %.thread, %bb
  %v3_a3fc.sink.off0 = phi i8 [ %extract.t91, %.thread ], [ %extract.t92, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a4a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4a8 = add i32 %v2_a4a8, 5
  %v4_a4a8 = inttoptr i32 %v3_a4a8 to i8*
  store i8 %v3_a3fc.sink.off0, i8* %v4_a4a8, align 1
  store i32 %v7_a3e4, i32* %ip.global-to-local, align 4
  %v0_a4b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4b0, label %bb80, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %bb78, %bb79
  %v0_a4b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4b4 = trunc i32 %v0_a4b4 to i8
  %v2_a4b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4b4 = add i32 %v2_a4b4, 9
  %v4_a4b4 = inttoptr i32 %v3_a4b4 to i8*
  store i8 %v1_a4b4, i8* %v4_a4b4, align 1
  %v0_a4b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4b8, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a4b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a4b8 = trunc i32 %v1_a4b8 to i8
  %v3_a4b8 = load i32, i32* %r1.global-to-local, align 4
  %v4_a4b8 = add i32 %v3_a4b8, 7
  %v5_a4b8 = inttoptr i32 %v4_a4b8 to i8*
  store i8 %v2_a4b8, i8* %v5_a4b8, align 1
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  %v3_a4bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a4bc, i32* %r2.global-to-local, align 4
  %v0_a4c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a4c0 = trunc i32 %v0_a4c0 to i8
  %v2_a4c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4c0 = add i32 %v2_a4c0, 4
  %v4_a4c0 = inttoptr i32 %v3_a4c0 to i8*
  store i8 %v1_a4c0, i8* %v4_a4c0, align 1
  store i32 %v6_a2c0, i32* %ip.global-to-local, align 4
  %v0_a4c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a4c8 = mul i32 %v0_a4c8, 32
  store i32 %v3_a4c8, i32* %r3.global-to-local, align 4
  %v1_a4cc = load i32, i32* %r1.global-to-local, align 4
  %v2_a4cc = add i32 %v1_a4cc, 12
  %v3_a4cc = inttoptr i32 %v2_a4cc to i32*
  store i32 %v6_a2c0, i32* %v3_a4cc, align 4
  %v0_a4d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4d0 = load i32, i32* %r2.global-to-local, align 4
  %tmp100 = mul i32 %v1_a4d0, -8
  %v5_a4d0 = add i32 %v0_a4d0, %tmp100
  %v1_a4d4 = load i32, i32* @r8, align 4
  %v2_a4d4 = add i32 %v1_a4d4, %v5_a4d0
  store i32 %v2_a4d4, i32* %r3.global-to-local, align 4
  %v1_a4d8 = add i32 %v2_a4d4, 16
  %v2_a4d8 = inttoptr i32 %v1_a4d8 to i32*
  %v3_a4d8 = load i32, i32* %v2_a4d8, align 4
  store i32 %v3_a4d8, i32* %r2.global-to-local, align 4
  %v0_a4dc = load i32, i32* @r4, align 4
  %v1_a4dc = trunc i32 %v0_a4dc to i8
  %v2_a4dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a4dc = add i32 %v2_a4dc, 20
  %v4_a4dc = inttoptr i32 %v3_a4dc to i8*
  store i8 %v1_a4dc, i8* %v4_a4dc, align 1
  %v0_a4e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a4e0 = add i32 %v1_a4e0, 16
  %v3_a4e0 = inttoptr i32 %v2_a4e0 to i32*
  store i32 %v0_a4e0, i32* %v3_a4e0, align 4
  %v0_a4e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a4e4 = add i32 %v0_a4e4, 20
  store i32 %v1_a4e4, i32* @r6, align 4
  %v1_a4e8 = add i32 %v0_a4e4, 33
  %v2_a4e8 = inttoptr i32 %v1_a4e8 to i8*
  %v3_a4e8 = load i8, i8* %v2_a4e8, align 1
  %v4_a4e8 = zext i8 %v3_a4e8 to i32
  %v1_a4ec = add i32 %v0_a4e4, 40
  store i32 %v1_a4ec, i32* @r7, align 4
  store i32 %v1_a3b8, i32* %r1.global-to-local, align 4
  %v1_a4f4 = and i32 %v4_a4e8, 223
  %v5_a4f8 = or i32 %v1_a4f4, %v4_a4f8
  store i32 %v5_a4f8, i32* %r3.global-to-local, align 4
  %v1_a4fc = trunc i32 %v5_a4f8 to i8
  store i8 %v1_a4fc, i8* %v2_a4e8, align 1
  %v0_a500 = load i32, i32* @r6, align 4
  %v1_a500 = add i32 %v0_a500, 13
  %v2_a500 = inttoptr i32 %v1_a500 to i8*
  %v3_a500 = load i8, i8* %v2_a500, align 1
  %v4_a500 = zext i8 %v3_a500 to i32
  store i32 %v1_a3bc, i32* %r3.global-to-local, align 4
  %v1_a508 = and i32 %v4_a500, 239
  %v5_a50c = or i32 %v1_a508, %v4_a50c
  store i32 %v5_a50c, i32* %r2.global-to-local, align 4
  %v1_a510 = trunc i32 %v5_a50c to i8
  store i8 %v1_a510, i8* %v2_a500, align 1
  %v0_a514 = load i32, i32* @r6, align 4
  %v1_a514 = add i32 %v0_a514, 13
  %v2_a514 = inttoptr i32 %v1_a514 to i8*
  %v3_a514 = load i8, i8* %v2_a514, align 1
  %v4_a514 = zext i8 %v3_a514 to i32
  store i32 %v1_a3c0, i32* %ip.global-to-local, align 4
  %v1_a51c = and i32 %v4_a514, 247
  %v5_a520 = or i32 %v1_a51c, %v4_a520
  store i32 %v5_a520, i32* %r3.global-to-local, align 4
  %v1_a524 = trunc i32 %v5_a520 to i8
  store i8 %v1_a524, i8* %v2_a514, align 1
  %v0_a528 = load i32, i32* @r6, align 4
  %v1_a528 = add i32 %v0_a528, 13
  %v2_a528 = inttoptr i32 %v1_a528 to i8*
  %v3_a528 = load i8, i8* %v2_a528, align 1
  %v4_a528 = zext i8 %v3_a528 to i32
  store i32 %v1_a3c4, i32* %r1.global-to-local, align 4
  %v1_a530 = and i32 %v4_a528, 251
  %v5_a534 = or i32 %v1_a530, %v4_a534
  store i32 %v5_a534, i32* %r2.global-to-local, align 4
  %v1_a538 = trunc i32 %v5_a534 to i8
  store i8 %v1_a538, i8* %v2_a528, align 1
  %v0_a53c = load i32, i32* @r6, align 4
  %v1_a53c = add i32 %v0_a53c, 13
  %v2_a53c = inttoptr i32 %v1_a53c to i8*
  %v3_a53c = load i8, i8* %v2_a53c, align 1
  %v4_a53c = zext i8 %v3_a53c to i32
  store i32 %v1_a3f0, i32* %r2.global-to-local, align 4
  %v1_a544 = and i32 %v4_a53c, 253
  %v4_a548 = or i32 %v1_a544, %v3_a548
  store i32 %v4_a548, i32* %r3.global-to-local, align 4
  %v1_a54c = trunc i32 %v4_a548 to i8
  store i8 %v1_a54c, i8* %v2_a53c, align 1
  %v0_a550 = load i32, i32* @r6, align 4
  %v1_a550 = add i32 %v0_a550, 12
  %v2_a550 = inttoptr i32 %v1_a550 to i8*
  %v3_a550 = load i8, i8* %v2_a550, align 1
  %v4_a550 = zext i8 %v3_a550 to i32
  store i32 %v4_a550, i32* %r2.global-to-local, align 4
  %v1_a554 = add i32 %v0_a550, 13
  %v2_a554 = inttoptr i32 %v1_a554 to i8*
  %v3_a554 = load i8, i8* %v2_a554, align 1
  %v4_a554 = zext i8 %v3_a554 to i32
  store i32 %v1_a404, i32* %ip.global-to-local, align 4
  %tmp101 = urem i8 %v3_a550, 16
  %v1_a55c = zext i8 %tmp101 to i32
  %v1_a560 = and i32 %v4_a554, 254
  %v2_a564 = or i32 %v1_a560, %v1_a404
  store i32 %v2_a564, i32* %r3.global-to-local, align 4
  %v1_a568 = or i32 %v1_a55c, 80
  store i32 %v1_a568, i32* %r2.global-to-local, align 4
  %v1_a56c = trunc i32 %v1_a568 to i8
  store i8 %v1_a56c, i8* %v2_a550, align 1
  %v0_a570 = load i32, i32* %r3.global-to-local, align 4
  %v1_a570 = trunc i32 %v0_a570 to i8
  %v2_a570 = load i32, i32* @r6, align 4
  %v3_a570 = add i32 %v2_a570, 13
  %v4_a570 = inttoptr i32 %v3_a570 to i8*
  store i8 %v1_a570, i8* %v4_a570, align 1
  store i32 %v5_a39c, i32* %r1.global-to-local, align 4
  %v0_a578 = load i32, i32* @fp, align 4
  %v1_a578 = trunc i32 %v0_a578 to i8
  %v2_a578 = load i32, i32* @r6, align 4
  %v3_a578 = add i32 %v2_a578, 1
  %v4_a578 = inttoptr i32 %v3_a578 to i8*
  store i8 %v1_a578, i8* %v4_a578, align 1
  %v0_a57c = load i32, i32* %r1.global-to-local, align 4
  %v1_a57c = load i32, i32* @r6, align 4
  %v2_a57c = add i32 %v1_a57c, 4
  %v3_a57c = inttoptr i32 %v2_a57c to i32*
  store i32 %v0_a57c, i32* %v3_a57c, align 4
  %v0_a580 = load i32, i32* @r5, align 4
  %v1_a580 = trunc i32 %v0_a580 to i8
  %v2_a580 = load i32, i32* @r6, align 4
  %v3_a580 = add i32 %v2_a580, 2
  %v4_a580 = inttoptr i32 %v3_a580 to i8*
  store i8 %v1_a580, i8* %v4_a580, align 1
  %v0_a584 = load i32, i32* @sb, align 4
  %v1_a584 = trunc i32 %v0_a584 to i8
  %v2_a584 = load i32, i32* @r6, align 4
  %v3_a584 = add i32 %v2_a584, 3
  %v4_a584 = inttoptr i32 %v3_a584 to i8*
  store i8 %v1_a584, i8* %v4_a584, align 1
  %v0_a588 = call i32 @function_d208()
  store i32 %v1_a3f4, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_a588, 16777216
  %v1_a590 = sdiv i32 %sext, 16777216
  store i32 %v1_a590, i32* %r2.global-to-local, align 4
  %v3_a594 = ashr i32 %sext, 31
  store i32 %v3_a594, i32* %r3.global-to-local, align 4
  store i1 %v2_a598, i1* %cpsr_z.global-to-local, align 1
  %v1_a59c = trunc i32 %v3_a594 to i8
  %v2_a59c = load i32, i32* @r6, align 4
  %v3_a59c = add i32 %v2_a59c, 15
  %v4_a59c = inttoptr i32 %v3_a59c to i8*
  store i8 %v1_a59c, i8* %v4_a59c, align 1
  %v0_a5a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5a0, label %.thread11, label %bb83

bb83:                                             ; preds = %bb82
  %v1_a5a0 = load i32, i32* @r6, align 4
  %v2_a5a0 = add i32 %v1_a5a0, 13
  %v3_a5a0 = inttoptr i32 %v2_a5a0 to i8*
  %v4_a5a0 = load i8, i8* %v3_a5a0, align 1
  %v5_a5a0 = zext i8 %v4_a5a0 to i32
  %v2_a5a4 = or i32 %v5_a5a0, 8
  store i32 %v2_a5a4, i32* %r3.global-to-local, align 4
  %v2_a5a8 = trunc i32 %v2_a5a4 to i8
  store i8 %v2_a5a8, i8* %v3_a5a0, align 1
  br label %.thread11

.thread11:                                        ; preds = %bb82, %bb83
  %v0_a5ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a5ac = trunc i32 %v0_a5ac to i8
  %v2_a5ac = load i32, i32* @r6, align 4
  %v3_a5ac = add i32 %v2_a5ac, 14
  %v4_a5ac = inttoptr i32 %v3_a5ac to i8*
  store i8 %v1_a5ac, i8* %v4_a5ac, align 1
  %v0_a5b0 = load i32, i32* @sl, align 4
  store i32 %v0_a5b0, i32* %r1.global-to-local, align 4
  %v0_a5b4 = load i32, i32* @r7, align 4
  %v2_a5b8 = call i32 @function_d2bc(i32 %v0_a5b4, i32 %v0_a5b0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a5c0 = load i32, i32* @r7, align 4
  %v3_a5c0 = load i32, i32* @sl, align 4
  %v4_a5c0 = add i32 %v3_a5c0, %v2_a5c0
  %v5_a5c0 = inttoptr i32 %v4_a5c0 to i8*
  store i8 0, i8* %v5_a5c0, align 1
  %v3_a5c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a5c4, i32* %r2.global-to-local, align 4
  store i32 %v1_a0c4, i32* %r1.global-to-local, align 4
  %v1_a5cc = add i32 %v3_a5c4, 1
  store i32 %v1_a5cc, i32* @r6, align 4
  %v9_a5d0 = icmp eq i32 %v1_a0c4, %v1_a5cc
  store i1 %v9_a5d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a5cc, i32* %stack_var_-40, align 4
  %v8_a5d8 = icmp sgt i32 %v1_a0c4, %v1_a5cc
  br i1 %v8_a5d8, label %dec_label_pc_a430, label %dec_label_pc_a5dc.preheader

dec_label_pc_a5dc.preheader:                      ; preds = %.thread11, %dec_label_pc_a31c
  %v2_a61c = icmp eq i32 %v6_a2c0, -1
  %v7_a61c = icmp eq i32 %v6_a2c0, -1
  %v3_a7b4 = icmp eq i32 %v3_a334, 65535
  %v2_a830 = icmp eq i32 %v1_a2ac, 0
  br label %dec_label_pc_a5dc

dec_label_pc_a5dc:                                ; preds = %dec_label_pc_a5dc.preheader, %dec_label_pc_a854
  store i32 %v1_a0c4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_a340, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_a340, label %dec_label_pc_a854, label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_a5dc
  %v0_a5f0 = load i32, i32* @sl, align 4
  %v1_a5f0 = add i32 %v0_a5f0, 20
  store i32 %v1_a5f0, i32* @sb, align 4
  %tmp84 = mul i32 %v1_a5f0, 256
  %v1_a5fc = and i32 %tmp84, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_a5fc, i32* %r3.global-to-local, align 4
  %tmp85 = udiv i32 %v1_a5f0, 256
  %v4_a600 = urem i32 %tmp85, 256
  %v5_a600 = or i32 %v4_a600, %v1_a5fc
  store i32 %v5_a600, i32* %r2.global-to-local, align 4
  %v1_a608 = add i32 %v0_a5f0, 40
  store i32 %v1_a608, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_a718

dec_label_pc_a618:                                ; preds = %dec_label_pc_a718
  store i32 %v6_a2c0, i32* %r1.global-to-local, align 4
  store i1 %v7_a61c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a61c, label %dec_label_pc_a7a4, label %dec_label_pc_a624

dec_label_pc_a624:                                ; preds = %dec_label_pc_a73c, %dec_label_pc_a618
  store i32 %v3_a334, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a7b4, label %dec_label_pc_a7c0, label %dec_label_pc_a638

dec_label_pc_a638:                                ; preds = %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge, %dec_label_pc_a624
  %v1_a63c = phi i32 [ %v1_a63c.pre, %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge ], [ 65535, %dec_label_pc_a624 ]
  store i32 %v3_a338, i32* %r3.global-to-local, align 4
  %v9_a63c = icmp eq i32 %v3_a338, %v1_a63c
  store i1 %v9_a63c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a63c, label %dec_label_pc_a7dc, label %dec_label_pc_a644

dec_label_pc_a644:                                ; preds = %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge, %dec_label_pc_a638
  %v1_a648 = phi i32 [ %v1_a648.pre, %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge ], [ %v1_a63c, %dec_label_pc_a638 ]
  store i32 %v3_a33c, i32* %ip.global-to-local, align 4
  %v9_a648 = icmp eq i32 %v3_a33c, %v1_a648
  store i1 %v9_a648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a648, label %dec_label_pc_a7f8, label %dec_label_pc_a650

dec_label_pc_a650:                                ; preds = %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge, %dec_label_pc_a644
  %v1_a654 = phi i32 [ %v1_a654.pre, %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge ], [ %v1_a648, %dec_label_pc_a644 ]
  store i32 %v6_a1c0, i32* %r1.global-to-local, align 4
  %v9_a654 = icmp eq i32 %v6_a1c0, %v1_a654
  store i1 %v9_a654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a654, label %dec_label_pc_a814, label %dec_label_pc_a65c

dec_label_pc_a65c:                                ; preds = %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge, %dec_label_pc_a650
  %v1_a660 = phi i32 [ %v1_a660.pre, %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge ], [ %v1_a654, %dec_label_pc_a650 ]
  store i32 %v6_a1dc, i32* %r2.global-to-local, align 4
  %v9_a660 = icmp eq i32 %v6_a1dc, %v1_a660
  store i1 %v9_a660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a660, label %dec_label_pc_a828, label %dec_label_pc_a668

dec_label_pc_a668:                                ; preds = %dec_label_pc_a814, %dec_label_pc_a65c
  store i32 %v1_a2ac, i32* %r3.global-to-local, align 4
  store i1 %v2_a830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a830, label %dec_label_pc_a674, label %dec_label_pc_a83c

dec_label_pc_a674:                                ; preds = %dec_label_pc_a668, %dec_label_pc_a828, %dec_label_pc_a83c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a678 = load i32, i32* @r7, align 4
  %v1_a678 = trunc i32 %v0_a678 to i8
  %v2_a678 = load i32, i32* @r5, align 4
  %v3_a678 = add i32 %v2_a678, 10
  %v4_a678 = inttoptr i32 %v3_a678 to i8*
  store i8 %v1_a678, i8* %v4_a678, align 1
  %v0_a67c = load i32, i32* @r7, align 4
  %v1_a67c = trunc i32 %v0_a67c to i8
  %v2_a67c = load i32, i32* @r5, align 4
  %v3_a67c = add i32 %v2_a67c, 11
  %v4_a67c = inttoptr i32 %v3_a67c to i8*
  store i8 %v1_a67c, i8* %v4_a67c, align 1
  %v0_a680 = load i32, i32* @r5, align 4
  store i32 %v0_a680, i32* @r0, align 4
  %v2_a684 = call i32 @function_c690(i32 %v0_a680, i32 20)
  %v3_a684 = trunc i32 %v2_a684 to i8
  %v4_a68824 = udiv i32 %v2_a684, 256
  %v1_a68c = trunc i32 %v4_a68824 to i8
  %v2_a68c = load i32, i32* @r5, align 4
  %v3_a68c = add i32 %v2_a68c, 11
  %v4_a68c = inttoptr i32 %v3_a68c to i8*
  store i8 %v1_a68c, i8* %v4_a68c, align 1
  %v3_a690 = load i32, i32* @r5, align 4
  %v4_a690 = add i32 %v3_a690, 10
  %v5_a690 = inttoptr i32 %v4_a690 to i8*
  store i8 %v3_a684, i8* %v5_a690, align 1
  %v0_a694 = load i32, i32* @r6, align 4
  store i32 %v0_a694, i32* @r1, align 4
  store i32 %v5_a600, i32* %r2.global-to-local, align 4
  %v0_a69c = load i32, i32* @sb, align 4
  store i32 %v0_a69c, i32* %r3.global-to-local, align 4
  %v0_a6a0 = load i32, i32* @r7, align 4
  %v1_a6a0 = trunc i32 %v0_a6a0 to i8
  %v3_a6a0 = add i32 %v0_a694, 16
  %v4_a6a0 = inttoptr i32 %v3_a6a0 to i8*
  store i8 %v1_a6a0, i8* %v4_a6a0, align 1
  %v0_a6a4 = load i32, i32* @r7, align 4
  %v1_a6a4 = trunc i32 %v0_a6a4 to i8
  %v2_a6a4 = load i32, i32* @r6, align 4
  %v3_a6a4 = add i32 %v2_a6a4, 17
  %v4_a6a4 = inttoptr i32 %v3_a6a4 to i8*
  store i8 %v1_a6a4, i8* %v4_a6a4, align 1
  %v0_a6a8 = load i32, i32* @r5, align 4
  %v4_a6ac = call i32 @function_c6ec(i32 %v0_a6a8, i32 %v0_a694, i32 %v5_a600, i32 %v0_a69c)
  %v5_a6ac = trunc i32 %v4_a6ac to i8
  %v4_a6b025 = udiv i32 %v4_a6ac, 256
  %v1_a6b4 = trunc i32 %v4_a6b025 to i8
  %v2_a6b4 = load i32, i32* @r6, align 4
  %v3_a6b4 = add i32 %v2_a6b4, 17
  %v4_a6b4 = inttoptr i32 %v3_a6b4 to i8*
  store i8 %v1_a6b4, i8* %v4_a6b4, align 1
  %v3_a6b8 = load i32, i32* @r6, align 4
  %v4_a6b8 = add i32 %v3_a6b8, 16
  %v5_a6b8 = inttoptr i32 %v4_a6b8 to i8*
  store i8 %v5_a6ac, i8* %v5_a6b8, align 1
  %v3_a6bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a6bc, i32* %r3.global-to-local, align 4
  %v0_a6c0 = load i32, i32* @r5, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 20
  %v2_a6c0 = inttoptr i32 %v1_a6c0 to i32*
  %v3_a6c0 = load i32, i32* %v2_a6c0, align 4
  %v3_a6c8 = udiv i32 %v3_a6c0, 65536
  store i32 %v3_a6c8, i32* %r2.global-to-local, align 4
  %v5_a6cc = mul i32 %v3_a6bc, 24
  %v1_a6d0 = load i32, i32* @r8, align 4
  %v2_a6d0 = add i32 %v1_a6d0, %v5_a6cc
  store i32 %v2_a6d0, i32* %ip.global-to-local, align 4
  %v3_a6d421 = udiv i32 %v3_a6c0, 16777216
  %v1_a6d8 = trunc i32 %v3_a6d421 to i8
  %v3_a6d8 = add i32 %v2_a6d0, 3
  %v4_a6d8 = inttoptr i32 %v3_a6d8 to i8*
  store i8 %v1_a6d8, i8* %v4_a6d8, align 1
  %v0_a6dc = load i32, i32* %r2.global-to-local, align 4
  %v1_a6dc = trunc i32 %v0_a6dc to i8
  %v2_a6dc = load i32, i32* %ip.global-to-local, align 4
  %v3_a6dc = add i32 %v2_a6dc, 2
  %v4_a6dc = inttoptr i32 %v3_a6dc to i8*
  store i8 %v1_a6dc, i8* %v4_a6dc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a6e4 = load i32, i32* @r5, align 4
  store i32 %v0_a6e4, i32* %r1.global-to-local, align 4
  %v0_a6ec = load i32, i32* @fp, align 4
  store i32 %v0_a6ec, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a6f4 = load i32, i32* %ip.global-to-local, align 4
  %v6_a6fc = inttoptr i32 %v0_a6e4 to i32*
  %v7_a6fc = call i32 @function_10b78(i32 %v3_a2e4, i32* %v6_a6fc, i32 %v0_a6ec, i32 16384, i32 %v0_a6f4, i32 16)
  %v3_a700 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a700, i32* %r3.global-to-local, align 4
  store i32 %v1_a0c4, i32* %ip.global-to-local, align 4
  %v1_a708 = add i32 %v3_a700, 1
  %v9_a70c = icmp eq i32 %v1_a0c4, %v1_a708
  store i1 %v9_a70c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a708, i32* %stack_var_-40, align 4
  %v7_a714 = icmp sgt i32 %v1_a0c4, %v1_a708
  br i1 %v7_a714, label %dec_label_pc_a718, label %dec_label_pc_a854

dec_label_pc_a718:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a5f0
  %v1_a72c = phi i32 [ %v1_a708, %dec_label_pc_a674 ], [ 0, %dec_label_pc_a5f0 ]
  %v5_a71c = mul i32 %v1_a72c, 24
  %v1_a720 = load i32, i32* @r8, align 4
  %v2_a720 = add i32 %v1_a720, %v5_a71c
  store i32 %v2_a720, i32* %r3.global-to-local, align 4
  store i32 %v2_a0f0, i32* %ip.global-to-local, align 4
  %v1_a728 = add i32 %v2_a720, 20
  %v2_a728 = inttoptr i32 %v1_a728 to i8*
  %v3_a728 = load i8, i8* %v2_a728, align 1
  %v4_a728 = zext i8 %v3_a728 to i32
  store i32 %v4_a728, i32* %r2.global-to-local, align 4
  %v4_a72c = mul i32 %v1_a72c, 4
  %v5_a72c = add i32 %v4_a72c, %v2_a0f0
  %v6_a72c = inttoptr i32 %v5_a72c to i32*
  %v7_a72c = load i32, i32* %v6_a72c, align 4
  store i32 %v7_a72c, i32* @r5, align 4
  %v2_a730 = icmp ugt i8 %v3_a728, 30
  %v7_a730 = icmp eq i8 %v3_a728, 31
  store i1 %v7_a730, i1* %cpsr_z.global-to-local, align 1
  %v1_a734 = add i32 %v7_a72c, 20
  store i32 %v1_a734, i32* @r6, align 4
  %v2_a738 = xor i1 %v7_a730, true
  %v3_a738 = and i1 %v2_a730, %v2_a738
  br i1 %v3_a738, label %dec_label_pc_a618, label %dec_label_pc_a73c

dec_label_pc_a73c:                                ; preds = %dec_label_pc_a718
  %v1_a73c = add i32 %v2_a720, 16
  %v2_a73c = inttoptr i32 %v1_a73c to i32*
  %v3_a73c = load i32, i32* %v2_a73c, align 4
  %v0_a740 = call i32 @function_d208()
  %v3_a744 = load i32, i32* %stack_var_-40, align 4
  %v5_a74c = mul i32 %v3_a744, 24
  %v1_a754 = load i32, i32* @r8, align 4
  %v2_a754 = add i32 %v1_a754, %v5_a74c
  store i32 %v2_a754, i32* %r1.global-to-local, align 4
  %v1_a758 = and i32 %v3_a73c, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_a758, i32* %r3.global-to-local, align 4
  %v1_a750 = udiv i32 %v3_a73c, 256
  %v3_a75c = and i32 %v1_a750, 65280
  store i32 %v3_a75c, i32* %r2.global-to-local, align 4
  %v3_a760 = mul i32 %v3_a73c, 16777216
  store i32 %v3_a760, i32* %ip.global-to-local, align 4
  %v1_a764 = add i32 %v2_a754, 20
  %v2_a764 = inttoptr i32 %v1_a764 to i8*
  %v3_a764 = load i8, i8* %v2_a764, align 1
  %v4_a764 = zext i8 %v3_a764 to i32
  %v4_a768 = mul i32 %v1_a758, 256
  %v5_a768 = or i32 %v4_a768, %v3_a760
  store i32 %v5_a768, i32* %ip.global-to-local, align 4
  %v4_a76c = udiv i32 %v3_a73c, 16777216
  %v5_a76c = or i32 %v3_a75c, %v4_a76c
  %v2_a770 = or i32 %v5_a76c, %v5_a768
  %v7_a774 = lshr i32 %v0_a740, %v4_a764
  %v8_a774 = add i32 %v7_a774, %v2_a770
  store i32 %v8_a774, i32* %r2.global-to-local, align 4
  %v2_a790 = call i32 @llvm.bswap.i32(i32 %v8_a774)
  store i32 %v2_a790, i32* %r3.global-to-local, align 4
  store i32 %v6_a2c0, i32* %r1.global-to-local, align 4
  store i1 %v7_a61c, i1* %cpsr_z.global-to-local, align 1
  %v1_a79c = load i32, i32* @r5, align 4
  %v2_a79c = add i32 %v1_a79c, 16
  %v3_a79c = inttoptr i32 %v2_a79c to i32*
  store i32 %v2_a790, i32* %v3_a79c, align 4
  br i1 %v2_a61c, label %dec_label_pc_a7a4, label %dec_label_pc_a624

dec_label_pc_a7a4:                                ; preds = %dec_label_pc_a73c, %dec_label_pc_a618
  %v0_a7a4 = call i32 @function_d208()
  store i32 %v3_a334, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a7b4, i1* %cpsr_z.global-to-local, align 1
  %v1_a7b8 = load i32, i32* @r5, align 4
  %v2_a7b8 = add i32 %v1_a7b8, 12
  %v3_a7b8 = inttoptr i32 %v2_a7b8 to i32*
  store i32 %v0_a7a4, i32* %v3_a7b8, align 4
  br i1 %v3_a7b4, label %dec_label_pc_a7c0, label %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge

dec_label_pc_a7a4.dec_label_pc_a638_crit_edge:    ; preds = %dec_label_pc_a7a4
  %v1_a63c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a638

dec_label_pc_a7c0:                                ; preds = %dec_label_pc_a7a4, %dec_label_pc_a624
  %v0_a7c0 = call i32 @function_d208()
  %v1_a7c0 = trunc i32 %v0_a7c0 to i8
  %v4_a7c426 = udiv i32 %v0_a7c0, 256
  %v1_a7c8 = trunc i32 %v4_a7c426 to i8
  %v2_a7c8 = load i32, i32* @r5, align 4
  %v3_a7c8 = add i32 %v2_a7c8, 5
  %v4_a7c8 = inttoptr i32 %v3_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v4_a7c8, align 1
  store i32 %v3_a338, i32* %r3.global-to-local, align 4
  %v1_a7d0 = load i32, i32* @r4, align 4
  %v9_a7d0 = icmp eq i32 %v3_a338, %v1_a7d0
  store i1 %v9_a7d0, i1* %cpsr_z.global-to-local, align 1
  %v3_a7d4 = load i32, i32* @r5, align 4
  %v4_a7d4 = add i32 %v3_a7d4, 4
  %v5_a7d4 = inttoptr i32 %v4_a7d4 to i8*
  store i8 %v1_a7c0, i8* %v5_a7d4, align 1
  %v0_a7d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a7d8, label %dec_label_pc_a7dc, label %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge

dec_label_pc_a7c0.dec_label_pc_a644_crit_edge:    ; preds = %dec_label_pc_a7c0
  %v1_a648.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a644

dec_label_pc_a7dc:                                ; preds = %dec_label_pc_a7c0, %dec_label_pc_a638
  %v0_a7dc = call i32 @function_d208()
  %v1_a7dc = trunc i32 %v0_a7dc to i8
  store i32 %v3_a33c, i32* %ip.global-to-local, align 4
  %v4_a7e4 = sdiv i32 %v0_a7dc, 256
  store i32 %v4_a7e4, i32* %r3.global-to-local, align 4
  %v1_a7e8 = load i32, i32* @r4, align 4
  %v9_a7e8 = icmp eq i32 %v3_a33c, %v1_a7e8
  store i1 %v9_a7e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 20
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 %v1_a7dc, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7f0 = trunc i32 %v0_a7f0 to i8
  %v2_a7f0 = load i32, i32* @r6, align 4
  %v3_a7f0 = add i32 %v2_a7f0, 1
  %v4_a7f0 = inttoptr i32 %v3_a7f0 to i8*
  store i8 %v1_a7f0, i8* %v4_a7f0, align 1
  %v0_a7f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a7f4, label %dec_label_pc_a7f8, label %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge

dec_label_pc_a7dc.dec_label_pc_a650_crit_edge:    ; preds = %dec_label_pc_a7dc
  %v1_a654.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a650

dec_label_pc_a7f8:                                ; preds = %dec_label_pc_a7dc, %dec_label_pc_a644
  %v0_a7f8 = call i32 @function_d208()
  %v1_a7f8 = trunc i32 %v0_a7f8 to i8
  store i32 %v6_a1c0, i32* %r1.global-to-local, align 4
  %v4_a800 = sdiv i32 %v0_a7f8, 256
  store i32 %v4_a800, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r4, align 4
  %v9_a804 = icmp eq i32 %v6_a1c0, %v1_a804
  store i1 %v9_a804, i1* %cpsr_z.global-to-local, align 1
  %v1_a808 = trunc i32 %v4_a800 to i8
  %v2_a808 = load i32, i32* @r6, align 4
  %v3_a808 = add i32 %v2_a808, 3
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v3_a80c = load i32, i32* @r6, align 4
  %v4_a80c = add i32 %v3_a80c, 2
  %v5_a80c = inttoptr i32 %v4_a80c to i8*
  store i8 %v1_a7f8, i8* %v5_a80c, align 1
  %v0_a810 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a810, label %dec_label_pc_a814, label %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge

dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge:    ; preds = %dec_label_pc_a7f8
  %v1_a660.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a65c

dec_label_pc_a814:                                ; preds = %dec_label_pc_a7f8, %dec_label_pc_a650
  %v0_a814 = call i32 @function_d208()
  store i32 %v6_a1dc, i32* %r2.global-to-local, align 4
  %v1_a81c = load i32, i32* @r4, align 4
  %v9_a81c = icmp eq i32 %v6_a1dc, %v1_a81c
  store i1 %v9_a81c, i1* %cpsr_z.global-to-local, align 1
  %v1_a820 = load i32, i32* @r6, align 4
  %v2_a820 = add i32 %v1_a820, 4
  %v3_a820 = inttoptr i32 %v2_a820 to i32*
  store i32 %v0_a814, i32* %v3_a820, align 4
  br i1 %v9_a81c, label %dec_label_pc_a828, label %dec_label_pc_a668

dec_label_pc_a828:                                ; preds = %dec_label_pc_a814, %dec_label_pc_a65c
  %v0_a828 = call i32 @function_d208()
  store i32 %v1_a2ac, i32* %r3.global-to-local, align 4
  store i1 %v2_a830, i1* %cpsr_z.global-to-local, align 1
  %v1_a834 = load i32, i32* @r6, align 4
  %v2_a834 = add i32 %v1_a834, 8
  %v3_a834 = inttoptr i32 %v2_a834 to i32*
  store i32 %v0_a828, i32* %v3_a834, align 4
  br i1 %v2_a830, label %dec_label_pc_a674, label %dec_label_pc_a83c

dec_label_pc_a83c:                                ; preds = %dec_label_pc_a668, %dec_label_pc_a828
  %v0_a83c = load i32, i32* @r5, align 4
  %v1_a83c = add i32 %v0_a83c, 40
  store i32 %v1_a83c, i32* @r4, align 4
  %v0_a844 = load i32, i32* @sl, align 4
  store i32 %v0_a844, i32* %r1.global-to-local, align 4
  %v2_a848 = call i32 @function_d2bc(i32 %v1_a83c, i32 %v0_a844)
  %v0_a84c = load i32, i32* @r7, align 4
  %v1_a84c = trunc i32 %v0_a84c to i8
  %v2_a84c = load i32, i32* @r4, align 4
  %v3_a84c = load i32, i32* @sl, align 4
  %v4_a84c = add i32 %v3_a84c, %v2_a84c
  %v5_a84c = inttoptr i32 %v4_a84c to i8*
  store i8 %v1_a84c, i8* %v5_a84c, align 1
  br label %dec_label_pc_a674

dec_label_pc_a854:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a5dc
  %v2_a858 = call i32 @function_108e4(i32* null)
  store i32 %v2_a2d0, i32* %r1.global-to-local, align 4
  %v9_a860 = icmp eq i32 %v2_a2d0, %v2_a858
  store i1 %v9_a860, i1* %cpsr_z.global-to-local, align 1
  %v6_a864 = icmp slt i32 %v2_a2d0, %v2_a858
  br i1 %v6_a864, label %dec_label_pc_a868, label %dec_label_pc_a5dc

dec_label_pc_a868:                                ; preds = %dec_label_pc_a854, %dec_label_pc_a0c0, %dec_label_pc_a870
  %v29_a86c = phi i32 [ %v3_a2e4, %dec_label_pc_a0c0 ], [ %v1_a874, %dec_label_pc_a870 ], [ %v2_a858, %dec_label_pc_a854 ]
  store i32 %v18_a0c0, i32* %sb.global-to-local, align 4
  store i32 %v24_a0c0, i32* %fp.global-to-local, align 4
  ret i32 %v29_a86c

dec_label_pc_a870:                                ; preds = %dec_label_pc_a2f4
  %v1_a874 = call i32 @function_10640(i32 %v3_a2e4)
  br label %dec_label_pc_a868

; uselistorder directives
  uselistorder i32 %v4_a800, { 1, 0 }
  uselistorder i32 %v2_a790, { 1, 0 }
  uselistorder i32 %v3_a760, { 1, 0 }
  uselistorder i32 %v3_a73c, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a708, { 1, 2, 0, 3 }
  uselistorder i32 %v0_a694, { 1, 0, 2 }
  uselistorder i32 %v1_a5f0, { 1, 0, 2 }
  uselistorder i1 %v2_a830, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a7b4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a61c, { 2, 1, 0 }
  uselistorder i32 %v1_a5cc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a404, { 1, 0 }
  uselistorder i32 %v3_a3fc, { 2, 0, 1, 3 }
  uselistorder i32 %v3_a3f8, { 0, 2, 1 }
  uselistorder i32 %v1_a3f4, { 1, 2, 0 }
  uselistorder i32 %v1_a3f0, { 2, 0, 1 }
  uselistorder i32 %tmp93, { 1, 0 }
  uselistorder i32 %v1_a3c4, { 1, 0 }
  uselistorder i32 %v1_a3c0, { 1, 0 }
  uselistorder i32 %v1_a3bc, { 1, 0 }
  uselistorder i32 %v1_a3b8, { 1, 0 }
  uselistorder i32 %v1_a388, { 2, 0, 1 }
  uselistorder i32 %v1_a370, { 1, 0 }
  uselistorder i1 %v2_a340, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a334, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a32c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a314, { 1, 0 }
  uselistorder i1 %v7_a2e8, { 1, 0 }
  uselistorder i32 %v3_a2e4, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_a2d0, { 2, 1, 0 }
  uselistorder i32 %v6_a2c0, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_a2ac, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_a1dc, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a1c0, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_a170, { 1, 2, 0 }
  uselistorder i32 %v6_a144, { 2, 1, 3, 0 }
  uselistorder i32 %v7_a12c, { 0, 2, 1, 3 }
  uselistorder i32 %v6_a108, { 1, 2, 0 }
  uselistorder i32 %v2_a0f0, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_a0c4, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 18, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 28, 29, 31, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_a868, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a83c, { 1, 0 }
  uselistorder label %dec_label_pc_a674, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a5dc, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
}

define i32 @function_a880(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a880:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a880 = load i32, i32* @r4, align 4
  %v12_a880 = load i32, i32* @r7, align 4
  %v1_a884 = urem i32 %arg2, 256
  store i32 %v1_a884, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_a884, i32* %r0.global-to-local, align 4
  %v1_a89c = urem i32 %arg4, 256
  store i32 %v1_a89c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a8ac = call i32 @function_10ec8(i32 %v1_a884, i32 4)
  %v0_a8b0 = load i32, i32* @r5, align 4
  store i32 %v0_a8b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a8b8 = load i32, i32* @r7, align 4
  store i32 %v0_a8b8, i32* %r3.global-to-local, align 4
  store i32 %v2_a8ac, i32* %sb.global-to-local, align 4
  %v0_a8c0 = load i32, i32* @r4, align 4
  store i32 %v0_a8c0, i32* %r0.global-to-local, align 4
  %v5_a8c4 = inttoptr i32 %v0_a8b0 to i32*
  %v6_a8c4 = call i32 @function_829c(i32 %v0_a8c0, i32* %v5_a8c4, i32 2, i32 %v0_a8b8, i32 ptrtoint (i32* @0 to i32))
  %v1_a8d0 = urem i32 %v6_a8c4, 256
  store i32 %v1_a8d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8dc = load i32, i32* @r5, align 4
  store i32 %v0_a8dc, i32* %r1.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r4, align 4
  store i32 %v0_a8e0, i32* %r0.global-to-local, align 4
  %v5_a8e4 = trunc i32 %v6_a8c4 to i8
  %v6_a8e8 = inttoptr i32 %v0_a8dc to i32*
  %v7_a8e8 = call i32 @function_829c(i32 %v0_a8e0, i32* %v6_a8e8, i32 3, i32 65535, i32 %v6_a8c4)
  %v0_a8ec = load i32, i32* @r5, align 4
  store i32 %v0_a8ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a8fc = load i32, i32* @r4, align 4
  store i32 %v0_a8fc, i32* %r0.global-to-local, align 4
  %v5_a900 = inttoptr i32 %v0_a8ec to i32*
  %v6_a900 = call i32 @function_829c(i32 %v0_a8fc, i32* %v5_a900, i32 4, i32 64, i32 %v7_a8e8)
  %v1_a908 = urem i32 %v6_a900, 256
  store i32 %v1_a908, i32* %ip.global-to-local, align 4
  %v0_a90c = load i32, i32* @r5, align 4
  store i32 %v0_a90c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a918 = load i32, i32* @r4, align 4
  store i32 %v0_a918, i32* %r0.global-to-local, align 4
  %sext10 = mul i32 %v6_a900, 16777216
  %v5_a920 = sdiv i32 %sext10, 16777216
  %v6_a920 = inttoptr i32 %v0_a90c to i32*
  %v7_a920 = call i32 @function_829c(i32 %v0_a918, i32* %v6_a920, i32 5, i32 1, i32 %v5_a920)
  %v1_a92c = urem i32 %v7_a920, 256
  store i32 %v1_a92c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a938 = load i32, i32* @r5, align 4
  store i32 %v0_a938, i32* %r1.global-to-local, align 4
  %v0_a93c = load i32, i32* @r4, align 4
  store i32 %v0_a93c, i32* %r0.global-to-local, align 4
  %v5_a944 = inttoptr i32 %v0_a938 to i32*
  %v6_a944 = call i32 @function_829c(i32 %v0_a93c, i32* %v5_a944, i32 6, i32 65535, i32 %v1_a92c)
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a95c = load i32, i32* @r4, align 4
  store i32 %v0_a95c, i32* %r0.global-to-local, align 4
  %v5_a960 = inttoptr i32 %v0_a950 to i32*
  %v6_a960 = call i32 @function_829c(i32 %v0_a95c, i32* %v5_a960, i32 7, i32 65535, i32 %v6_a944)
  %v0_a96c = load i32, i32* @r5, align 4
  store i32 %v0_a96c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a978 = load i32, i32* @r4, align 4
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v5_a97c = inttoptr i32 %v0_a96c to i32*
  %v6_a97c = call i32 @function_829c(i32 %v0_a978, i32* %v5_a97c, i32 16, i32 65535, i32 %v6_a960)
  %v0_a980 = load i32, i32* @r5, align 4
  store i32 %v0_a980, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a98c = load i32, i32* @r7, align 4
  store i32 %v0_a98c, i32* %r3.global-to-local, align 4
  %v0_a990 = load i32, i32* @r4, align 4
  store i32 %v0_a990, i32* %r0.global-to-local, align 4
  %v5_a994 = inttoptr i32 %v0_a980 to i32*
  %v6_a994 = call i32 @function_829c(i32 %v0_a990, i32* %v5_a994, i32 17, i32 %v0_a98c, i32 %v6_a97c)
  %v0_a998 = load i32, i32* @r5, align 4
  store i32 %v0_a998, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a9a4 = load i32, i32* @r7, align 4
  store i32 %v0_a9a4, i32* %r3.global-to-local, align 4
  %v0_a9a8 = load i32, i32* @r4, align 4
  store i32 %v0_a9a8, i32* %r0.global-to-local, align 4
  %v5_a9ac = inttoptr i32 %v0_a998 to i32*
  %v6_a9ac = call i32 @function_829c(i32 %v0_a9a8, i32* %v5_a9ac, i32 10, i32 %v0_a9a4, i32 %v6_a994)
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r7, align 4
  store i32 %v0_a9bc, i32* %r3.global-to-local, align 4
  %v0_a9c0 = load i32, i32* @r4, align 4
  store i32 %v0_a9c0, i32* %r0.global-to-local, align 4
  %v5_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v6_a9c4 = call i32 @function_829c(i32 %v0_a9c0, i32* %v5_a9c4, i32 11, i32 %v0_a9bc, i32 %v6_a9ac)
  %v0_a9c8 = load i32, i32* @r5, align 4
  store i32 %v0_a9c8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a9d4 = load i32, i32* @r7, align 4
  store i32 %v0_a9d4, i32* %r3.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r4, align 4
  store i32 %v0_a9d8, i32* %r0.global-to-local, align 4
  %v5_a9dc = inttoptr i32 %v0_a9c8 to i32*
  %v6_a9dc = call i32 @function_829c(i32 %v0_a9d8, i32* %v5_a9dc, i32 12, i32 %v0_a9d4, i32 %v6_a9c4)
  %v0_a9e0 = load i32, i32* @r5, align 4
  store i32 %v0_a9e0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_a9ec = load i32, i32* @r7, align 4
  store i32 %v0_a9ec, i32* %r3.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r4, align 4
  store i32 %v0_a9f0, i32* %r0.global-to-local, align 4
  %v5_a9f4 = inttoptr i32 %v0_a9e0 to i32*
  %v6_a9f4 = call i32 @function_829c(i32 %v0_a9f0, i32* %v5_a9f4, i32 13, i32 %v0_a9ec, i32 %v6_a9dc)
  %v0_a9f8 = load i32, i32* @r5, align 4
  store i32 %v0_a9f8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v5_aa0c = inttoptr i32 %v0_a9f8 to i32*
  %v6_aa0c = call i32 @function_829c(i32 %v0_aa08, i32* %v5_aa0c, i32 14, i32 1, i32 %v6_a9f4)
  %v0_aa10 = load i32, i32* @r5, align 4
  store i32 %v0_aa10, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_aa1c = load i32, i32* @r7, align 4
  store i32 %v0_aa1c, i32* %r3.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r4, align 4
  store i32 %v0_aa20, i32* %r0.global-to-local, align 4
  %v5_aa24 = inttoptr i32 %v0_aa10 to i32*
  %v6_aa24 = call i32 @function_829c(i32 %v0_aa20, i32* %v5_aa24, i32 15, i32 %v0_aa1c, i32 %v6_aa0c)
  %v0_aa2c = load i32, i32* @r5, align 4
  store i32 %v0_aa2c, i32* %r1.global-to-local, align 4
  %v2_aa30 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_aa30, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_aa3c = load i32, i32* @r4, align 4
  store i32 %v0_aa3c, i32* %r0.global-to-local, align 4
  %v5_aa40 = inttoptr i32 %v0_aa2c to i32*
  %v6_aa40 = call i32 @function_8230(i32 %v0_aa3c, i32* %v5_aa40, i32 24, i32 %v2_aa30, i32 %v6_aa24)
  %v0_aa48 = load i32, i32* @r7, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v1_aa4c = inttoptr i32 %v0_aa48 to i32*
  %v2_aa4c = call i32 @function_108e4(i32* %v1_aa4c)
  %v1_aa50 = load i32, i32* @r6, align 4
  %v2_aa50 = add i32 %v1_aa50, %v2_aa4c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_aa64 = call i32 @function_10bdc(i32 2, i32 3, i32 6)
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v7_aa68 = icmp eq i32 %v3_aa64, -1
  store i1 %v7_aa68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aa64, i32* %sl.global-to-local, align 4
  br i1 %v7_aa68, label %dec_label_pc_afe4, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %dec_label_pc_a880
  store i32 1, i32* %stack_var_-40, align 4
  %v6_aa7c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_aa7c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_aa84 = load i32, i32* @r7, align 4
  store i32 %v0_aa84, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aa90 = call i32 @function_10bac(i32 %v3_aa64, i32 %v0_aa84, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_aa90, i32* %r0.global-to-local, align 4
  %v7_aa94 = icmp eq i32 %v6_aa90, -1
  store i1 %v7_aa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa94, label %dec_label_pc_afec, label %dec_label_pc_aa9c

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa74
  %v3_aab0 = mul i32 %v6_a944, 65536
  store i32 %v3_aab0, i32* @r4, align 4
  %v3_aab4 = urem i32 %v7_a8e8, 65536
  store i32 %v3_aab4, i32* %ip.global-to-local, align 4
  %v3_aab8 = urem i32 %v6_a944, 65536
  store i32 %v3_aab8, i32* %r0.global-to-local, align 4
  %v3_aabc = urem i32 %v6_a960, 65536
  store i32 %v3_aabc, i32* %r2.global-to-local, align 4
  %v1_aac0 = urem i32 %v6_a9ac, 256
  store i32 %v1_aac0, i32* %r3.global-to-local, align 4
  %v0_aac4 = load i32, i32* %fp.global-to-local, align 4
  %v2_aac4 = icmp eq i32 %v0_aac4, 0
  store i1 %v2_aac4, i1* %cpsr_z.global-to-local, align 1
  %v0_aac8 = load i32, i32* @r7, align 4
  store i32 %v0_aac8, i32* %stack_var_-40, align 4
  %tmp69 = icmp slt i32 %v0_aac4, 1
  br i1 %tmp69, label %dec_label_pc_ad84.preheader, label %dec_label_pc_aae0

dec_label_pc_aae0:                                ; preds = %dec_label_pc_aa9c
  %v1_aae8 = urem i32 %v7_a8e8, 256
  %v1_aafc = urem i32 %v6_a960, 256
  %tmp70 = mul i32 %v6_a97c, 256
  %v1_ab04 = and i32 %tmp70, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp71 = udiv i32 %v6_a97c, 256
  %v4_ab08 = urem i32 %tmp71, 256
  %v5_ab08 = or i32 %v4_ab08, %v1_ab04
  %v3_ab0c = mul nuw nsw i32 %v1_aafc, 256
  %tmp72 = udiv i32 %v6_a960, 256
  %v4_ab18 = urem i32 %tmp72, 256
  %v5_ab18 = or i32 %v4_ab18, %v3_ab0c
  store i32 %v5_ab18, i32* @r6, align 4
  %v1_aaf8 = mul i32 %v6_a944, 256
  %v3_ab1c = and i32 %v1_aaf8, 65280
  store i32 %v3_ab1c, i32* %r1.global-to-local, align 4
  %v3_ab28 = mul nuw nsw i32 %v1_aae8, 256
  %tmp73 = udiv i32 %v6_a944, 256
  %v1_ab30 = urem i32 %v6_a9ac, 2
  %tmp74 = udiv i32 %v7_a8e8, 256
  %v4_ab34 = urem i32 %tmp74, 256
  %v5_ab34 = or i32 %v4_ab34, %v3_ab28
  store i32 %v5_ab34, i32* @lr, align 4
  %v1_ab3c = urem i32 %v6_a9c4, 2
  %v1_ab40 = urem i32 %v6_a9f4, 2
  %sext11 = mul i32 %tmp73, 16777216
  %v4_ab5c = sdiv i32 %sext11, 16777216
  %v1_ab60 = urem i32 %v6_a9dc, 2
  %v1_ab64 = urem i32 %v6_aa0c, 2
  %v1_ab70 = urem i32 %v6_aa24, 2
  store i32 %v1_ab70, i32* %r0.global-to-local, align 4
  store i32 %v1_aae8, i32* %r2.global-to-local, align 4
  %v3_ab78 = ashr i32 %sext11, 31
  store i32 %v3_ab78, i32* %r3.global-to-local, align 4
  store i32 %v1_aafc, i32* %ip.global-to-local, align 4
  %v5_ab8c = trunc i32 %v3_ab78 to i8
  store i32 %v0_aac8, i32* @r4, align 4
  store i32 %v0_aac8, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %sext = mul i32 %v7_a8e8, 16777216
  %v4_abf4 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %tmp74, 16777216
  %v4_abf8 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_ab30
  %v4_ac54 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_ab3c
  %v4_ac68 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_ab60
  %v4_ac7c = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_ab40
  %v4_ac90 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_ab64
  %v3_aca4 = and i32 %tmp81, 2
  %sext9 = mul i32 %v6_a960, 16777216
  %v7_acd4 = sdiv i32 %sext9, 16777216
  br label %dec_label_pc_aba0

dec_label_pc_aba0:                                ; preds = %bb76, %dec_label_pc_aae0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_aba8 = call i32 @function_10ec8(i32 128, i32 1)
  store i32 %v2_aba8, i32* %r0.global-to-local, align 4
  %v3_abac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abac, i32* %r2.global-to-local, align 4
  %v1_abb0 = load i32, i32* %sb.global-to-local, align 4
  %v2_abb0 = load i32, i32* @r4, align 4
  %v5_abb0 = mul i32 %v2_abb0, 4
  %v6_abb0 = add i32 %v5_abb0, %v1_abb0
  %v7_abb0 = inttoptr i32 %v6_abb0 to i32*
  store i32 %v2_aba8, i32* %v7_abb0, align 4
  %v0_abb4 = load i32, i32* %sb.global-to-local, align 4
  %v1_abb4 = load i32, i32* %r2.global-to-local, align 4
  %v4_abb4 = mul i32 %v1_abb4, 4
  %v5_abb4 = add i32 %v4_abb4, %v0_abb4
  %v6_abb4 = inttoptr i32 %v5_abb4 to i32*
  %v7_abb4 = load i32, i32* %v6_abb4, align 4
  store i32 %v7_abb4, i32* %r4.global-to-local, align 4
  %v1_abb8 = inttoptr i32 %v7_abb4 to i8*
  %v2_abb8 = load i8, i8* %v1_abb8, align 1
  %tmp82 = urem i8 %v2_abb8, 16
  %v1_abbc = zext i8 %tmp82 to i32
  %v1_abc0 = or i32 %v1_abbc, 64
  store i32 %v1_abc0, i32* %r3.global-to-local, align 4
  %v1_abc4 = trunc i32 %v1_abc0 to i8
  store i8 %v1_abc4, i8* %v1_abb8, align 1
  %v0_abc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_abc8 = inttoptr i32 %v0_abc8 to i8*
  %v2_abc8 = load i8, i8* %v1_abc8, align 1
  %v1_abcc = and i8 %v2_abc8, -16
  %v1_abd0 = or i8 %v1_abcc, 5
  store i32 %v1_a92c, i32* %r0.global-to-local, align 4
  store i8 %v1_abd0, i8* %v1_abc8, align 1
  %v2_abe0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abe0 = add i32 %v2_abe0, 1
  %v4_abe0 = inttoptr i32 %v3_abe0 to i8*
  store i8 %v5_a8e4, i8* %v4_abe0, align 1
  %v0_abe4 = load i32, i32* %r0.global-to-local, align 4
  %v2_abe4 = icmp eq i32 %v0_abe4, 0
  store i1 %v2_abe4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a920, i32* %r0.global-to-local, align 4
  %v2_abf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abf0 = add i32 %v2_abf0, 3
  %v4_abf0 = inttoptr i32 %v3_abf0 to i8*
  store i8 60, i8* %v4_abf0, align 1
  store i32 %v4_abf4, i32* %ip.global-to-local, align 4
  store i32 %v4_abf8, i32* %r3.global-to-local, align 4
  %v0_abfc = load i32, i32* %r0.global-to-local, align 4
  %v1_abfc = trunc i32 %v0_abfc to i8
  %v2_abfc = load i32, i32* %r4.global-to-local, align 4
  %v3_abfc = add i32 %v2_abfc, 8
  %v4_abfc = inttoptr i32 %v3_abfc to i8*
  store i8 %v1_abfc, i8* %v4_abfc, align 1
  %v0_ac00 = load i32, i32* @r7, align 4
  %v1_ac00 = trunc i32 %v0_ac00 to i8
  %v2_ac00 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac00 = add i32 %v2_ac00, 9
  %v4_ac00 = inttoptr i32 %v3_ac00 to i8*
  store i8 %v1_ac00, i8* %v4_ac00, align 1
  %v3_ac04 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac04, i32* %r2.global-to-local, align 4
  %v0_ac08 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac08 = trunc i32 %v0_ac08 to i8
  %v2_ac08 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac08 = add i32 %v2_ac08, 4
  %v4_ac08 = inttoptr i32 %v3_ac08 to i8*
  store i8 %v1_ac08, i8* %v4_ac08, align 1
  %v0_ac0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac0c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_aba0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ac10 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac10 = add i32 %v3_ac10, 6
  %v5_ac10 = inttoptr i32 %v4_ac10 to i8*
  store i8 64, i8* %v5_ac10, align 1
  %v0_ac30.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_aba0, %bb
  %v0_ac30 = phi i1 [ true, %dec_label_pc_aba0 ], [ %v0_ac30.pre, %bb ]
  %v0_ac14 = load i32, i32* %r2.global-to-local, align 4
  %v5_ac18 = mul i32 %v0_ac14, 24
  store i32 %v5_ac18, i32* %r3.global-to-local, align 4
  store i32 %v6_aa40, i32* %r2.global-to-local, align 4
  %v1_ac20 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac20 = add i32 %v1_ac20, 12
  %v3_ac20 = inttoptr i32 %v2_ac20 to i32*
  store i32 %v6_aa40, i32* %v3_ac20, align 4
  %v0_ac24 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac24 = load i32, i32* @r8, align 4
  %v2_ac24 = add i32 %v1_ac24, %v0_ac24
  store i32 %v2_ac24, i32* %r3.global-to-local, align 4
  %v1_ac28 = add i32 %v2_ac24, 16
  %v2_ac28 = inttoptr i32 %v1_ac28 to i32*
  %v3_ac28 = load i32, i32* %v2_ac28, align 4
  store i32 %v3_ac28, i32* %r2.global-to-local, align 4
  store i32 %v4_ab5c, i32* %r3.global-to-local, align 4
  br i1 %v0_ac30, label %bb76, label %bb75

bb75:                                             ; preds = %.thread
  %v1_ac30 = load i32, i32* @r5, align 4
  %v2_ac30 = trunc i32 %v1_ac30 to i8
  %v3_ac30 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac30 = add i32 %v3_ac30, 7
  %v5_ac30 = inttoptr i32 %v4_ac30 to i8*
  store i8 %v2_ac30, i8* %v5_ac30, align 1
  br label %bb76

bb76:                                             ; preds = %.thread, %bb75
  %v0_ac34 = load i32, i32* %ip.global-to-local, align 4
  %v1_ac34 = trunc i32 %v0_ac34 to i8
  %v2_ac34 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac34 = add i32 %v2_ac34, 5
  %v4_ac34 = inttoptr i32 %v3_ac34 to i8*
  store i8 %v1_ac34, i8* %v4_ac34, align 1
  %v0_ac38 = load i32, i32* @r5, align 4
  %v1_ac38 = trunc i32 %v0_ac38 to i8
  %v2_ac38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac38 = add i32 %v2_ac38, 2
  %v4_ac38 = inttoptr i32 %v3_ac38 to i8*
  store i8 %v1_ac38, i8* %v4_ac38, align 1
  %v0_ac3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ac3c = load i32, i32* %r4.global-to-local, align 4
  %v2_ac3c = add i32 %v1_ac3c, 16
  %v3_ac3c = inttoptr i32 %v2_ac3c to i32*
  store i32 %v0_ac3c, i32* %v3_ac3c, align 4
  %v0_ac40 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac40 = trunc i32 %v0_ac40 to i8
  %v2_ac40 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac40 = add i32 %v2_ac40, 20
  %v4_ac40 = inttoptr i32 %v3_ac40 to i8*
  store i8 %v1_ac40, i8* %v4_ac40, align 1
  %v0_ac44 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac44 = add i32 %v0_ac44, 20
  store i32 %v1_ac44, i32* %r1.global-to-local, align 4
  %v1_ac48 = add i32 %v0_ac44, 33
  %v2_ac48 = inttoptr i32 %v1_ac48 to i8*
  %v3_ac48 = load i8, i8* %v2_ac48, align 1
  %v4_ac48 = zext i8 %v3_ac48 to i32
  store i32 %v1_ab30, i32* %ip.global-to-local, align 4
  %v1_ac50 = and i32 %v4_ac48, 223
  %v5_ac54 = or i32 %v1_ac50, %v4_ac54
  store i32 %v5_ac54, i32* %r3.global-to-local, align 4
  %v1_ac58 = trunc i32 %v5_ac54 to i8
  store i8 %v1_ac58, i8* %v2_ac48, align 1
  %v0_ac5c = load i32, i32* %r1.global-to-local, align 4
  %v1_ac5c = add i32 %v0_ac5c, 13
  %v2_ac5c = inttoptr i32 %v1_ac5c to i8*
  %v3_ac5c = load i8, i8* %v2_ac5c, align 1
  %v4_ac5c = zext i8 %v3_ac5c to i32
  store i32 %v1_ab3c, i32* %r0.global-to-local, align 4
  %v1_ac64 = and i32 %v4_ac5c, 239
  %v5_ac68 = or i32 %v1_ac64, %v4_ac68
  store i32 %v5_ac68, i32* %r2.global-to-local, align 4
  %v1_ac6c = trunc i32 %v5_ac68 to i8
  store i8 %v1_ac6c, i8* %v2_ac5c, align 1
  %v0_ac70 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac70 = add i32 %v0_ac70, 13
  %v2_ac70 = inttoptr i32 %v1_ac70 to i8*
  %v3_ac70 = load i8, i8* %v2_ac70, align 1
  %v4_ac70 = zext i8 %v3_ac70 to i32
  store i32 %v1_ab60, i32* %r2.global-to-local, align 4
  %v1_ac78 = and i32 %v4_ac70, 247
  %v5_ac7c = or i32 %v1_ac78, %v4_ac7c
  store i32 %v5_ac7c, i32* %r3.global-to-local, align 4
  %v1_ac80 = trunc i32 %v5_ac7c to i8
  store i8 %v1_ac80, i8* %v2_ac70, align 1
  %v0_ac84 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac84 = add i32 %v0_ac84, 13
  %v2_ac84 = inttoptr i32 %v1_ac84 to i8*
  %v3_ac84 = load i8, i8* %v2_ac84, align 1
  %v4_ac84 = zext i8 %v3_ac84 to i32
  store i32 %v1_ab40, i32* %r3.global-to-local, align 4
  %v1_ac8c = and i32 %v4_ac84, 251
  %v5_ac90 = or i32 %v1_ac8c, %v4_ac90
  store i32 %v5_ac90, i32* %r2.global-to-local, align 4
  %v1_ac94 = trunc i32 %v5_ac90 to i8
  store i8 %v1_ac94, i8* %v2_ac84, align 1
  %v0_ac98 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac98 = add i32 %v0_ac98, 13
  %v2_ac98 = inttoptr i32 %v1_ac98 to i8*
  %v3_ac98 = load i8, i8* %v2_ac98, align 1
  %v4_ac98 = zext i8 %v3_ac98 to i32
  store i32 %v1_ab64, i32* %ip.global-to-local, align 4
  %v1_aca0 = and i32 %v4_ac98, 253
  %v4_aca4 = or i32 %v1_aca0, %v3_aca4
  store i32 %v4_aca4, i32* %r3.global-to-local, align 4
  %v1_aca8 = trunc i32 %v4_aca4 to i8
  store i8 %v1_aca8, i8* %v2_ac98, align 1
  %v0_acac = load i32, i32* %r1.global-to-local, align 4
  %v1_acac = add i32 %v0_acac, 12
  %v2_acac = inttoptr i32 %v1_acac to i8*
  %v3_acac = load i8, i8* %v2_acac, align 1
  %v4_acac = zext i8 %v3_acac to i32
  store i32 %v4_acac, i32* %r2.global-to-local, align 4
  %v1_acb0 = add i32 %v0_acac, 13
  %v2_acb0 = inttoptr i32 %v1_acb0 to i8*
  %v3_acb0 = load i8, i8* %v2_acb0, align 1
  %v4_acb0 = zext i8 %v3_acb0 to i32
  %tmp83 = urem i8 %v3_acac, 16
  %v1_acb8 = zext i8 %tmp83 to i32
  %v1_acbc = and i32 %v4_acb0, 254
  %v2_acc0 = or i32 %v1_acbc, %v1_ab70
  %v1_acc4 = or i32 %v1_acb8, 160
  store i32 %v1_acc4, i32* %r2.global-to-local, align 4
  %v1_acc8 = trunc i32 %v2_acc0 to i8
  store i8 %v1_acc8, i8* %v2_acb0, align 1
  %v0_accc = load i32, i32* %r2.global-to-local, align 4
  %v1_accc = trunc i32 %v0_accc to i8
  %v2_accc = load i32, i32* %r1.global-to-local, align 4
  %v3_accc = add i32 %v2_accc, 12
  %v4_accc = inttoptr i32 %v3_accc to i8*
  store i8 %v1_accc, i8* %v4_accc, align 1
  store i32 %v7_acd4, i32* %r3.global-to-local, align 4
  store i32 %v5_ab08, i32* %ip.global-to-local, align 4
  %v2_acdc = load i32, i32* %r1.global-to-local, align 4
  %v3_acdc = add i32 %v2_acdc, 1
  %v4_acdc = inttoptr i32 %v3_acdc to i8*
  store i8 %v5_ab8c, i8* %v4_acdc, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ace8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ace8 = trunc i32 %v0_ace8 to i8
  %v2_ace8 = load i32, i32* %r1.global-to-local, align 4
  %v3_ace8 = add i32 %v2_ace8, 3
  %v4_ace8 = inttoptr i32 %v3_ace8 to i8*
  store i8 %v1_ace8, i8* %v4_ace8, align 1
  %v0_acec = load i32, i32* %ip.global-to-local, align 4
  %v1_acec = load i32, i32* %r1.global-to-local, align 4
  %v2_acec = add i32 %v1_acec, 4
  %v3_acec = inttoptr i32 %v2_acec to i32*
  store i32 %v0_acec, i32* %v3_acec, align 4
  %v0_acf0 = load i32, i32* @r6, align 4
  %v1_acf0 = trunc i32 %v0_acf0 to i8
  %v2_acf0 = load i32, i32* %r1.global-to-local, align 4
  %v3_acf0 = add i32 %v2_acf0, 2
  %v4_acf0 = inttoptr i32 %v3_acf0 to i8*
  store i8 %v1_acf0, i8* %v4_acf0, align 1
  %v0_acf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_acf4 = trunc i32 %v0_acf4 to i8
  %v2_acf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_acf4 = add i32 %v2_acf4, 41
  %v4_acf4 = inttoptr i32 %v3_acf4 to i8*
  store i8 %v1_acf4, i8* %v4_acf4, align 1
  %v0_acf8 = load i32, i32* %r0.global-to-local, align 4
  %v1_acf8 = trunc i32 %v0_acf8 to i8
  %v2_acf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_acf8 = add i32 %v2_acf8, 40
  %v4_acf8 = inttoptr i32 %v3_acf8 to i8*
  store i8 %v1_acf8, i8* %v4_acf8, align 1
  %v0_acfc = call i32 @function_d208()
  %v1_ad00 = urem i32 %v0_acfc, 16
  %v1_ad04 = or i32 %v1_ad00, 1392
  %v1_ad08 = add nuw nsw i32 %v1_ad04, 8
  %v3_ad0c = mul nuw nsw i32 %v1_ad08, 65536
  store i32 %v3_ad0c, i32* %r0.global-to-local, align 4
  %v3_ad10 = mul nuw nsw i32 %v1_ad08, 256
  %v1_ad14 = and i32 %v3_ad10, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v5_ad18 = or i32 %v1_ad14, 5
  store i32 %v5_ad18, i32* %r3.global-to-local, align 4
  %v2_ad1c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad1c = add i32 %v2_ad1c, 42
  %v4_ad1c = inttoptr i32 %v3_ad1c to i8*
  store i8 5, i8* %v4_ad1c, align 1
  %v0_ad20 = load i32, i32* %r3.global-to-local, align 4
  %v3_ad20 = sdiv i32 %v0_ad20, 256
  store i32 %v3_ad20, i32* %r1.global-to-local, align 4
  %v0_ad24 = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_ad2c = trunc i32 %v3_ad20 to i8
  %v3_ad2c = add i32 %v0_ad24, 43
  %v4_ad2c = inttoptr i32 %v3_ad2c to i8*
  store i8 %v1_ad2c, i8* %v4_ad2c, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_ad34 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad34 = trunc i32 %v0_ad34 to i8
  %v2_ad34 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad34 = add i32 %v2_ad34, 46
  %v4_ad34 = inttoptr i32 %v3_ad34 to i8*
  store i8 %v1_ad34, i8* %v4_ad34, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_ad40 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad40 = add i32 %v2_ad40, 47
  %v4_ad40 = inttoptr i32 %v3_ad40 to i8*
  store i8 10, i8* %v4_ad40, align 1
  %v0_ad44 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad44 = trunc i32 %v0_ad44 to i8
  %v2_ad44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad44 = add i32 %v2_ad44, 44
  %v4_ad44 = inttoptr i32 %v3_ad44 to i8*
  store i8 %v1_ad44, i8* %v4_ad44, align 1
  %v0_ad48 = load i32, i32* %ip.global-to-local, align 4
  %v1_ad48 = trunc i32 %v0_ad48 to i8
  %v2_ad48 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad48 = add i32 %v2_ad48, 45
  %v4_ad48 = inttoptr i32 %v3_ad48 to i8*
  store i8 %v1_ad48, i8* %v4_ad48, align 1
  %v0_ad4c = call i32 @function_d208()
  store i32 %v0_ad4c, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_ad58 = load i32, i32* %r4.global-to-local, align 4
  %v2_ad58 = add i32 %v1_ad58, 48
  %v3_ad58 = inttoptr i32 %v2_ad58 to i32*
  store i32 %v0_ad4c, i32* %v3_ad58, align 4
  %v0_ad5c = load i32, i32* %r3.global-to-local, align 4
  %v1_ad5c = trunc i32 %v0_ad5c to i8
  %v2_ad5c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad5c = add i32 %v2_ad5c, 56
  %v4_ad5c = inttoptr i32 %v3_ad5c to i8*
  store i8 %v1_ad5c, i8* %v4_ad5c, align 1
  %v0_ad60 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad60 = trunc i32 %v0_ad60 to i8
  %v2_ad60 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad60 = add i32 %v2_ad60, 58
  %v4_ad60 = inttoptr i32 %v3_ad60 to i8*
  store i8 %v1_ad60, i8* %v4_ad60, align 1
  %v0_ad64 = load i32, i32* @r7, align 4
  %v1_ad64 = trunc i32 %v0_ad64 to i8
  %v2_ad64 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad64 = add i32 %v2_ad64, 59
  %v4_ad64 = inttoptr i32 %v3_ad64 to i8*
  store i8 %v1_ad64, i8* %v4_ad64, align 1
  %v0_ad68 = load i32, i32* @r5, align 4
  %v1_ad68 = load i32, i32* %r4.global-to-local, align 4
  %v2_ad68 = add i32 %v1_ad68, 52
  %v3_ad68 = inttoptr i32 %v2_ad68 to i32*
  store i32 %v0_ad68, i32* %v3_ad68, align 4
  %v0_ad6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ad6c = trunc i32 %v0_ad6c to i8
  %v2_ad6c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad6c = add i32 %v2_ad6c, 57
  %v4_ad6c = inttoptr i32 %v3_ad6c to i8*
  store i8 %v1_ad6c, i8* %v4_ad6c, align 1
  %v3_ad70 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad70, i32* %r3.global-to-local, align 4
  %v1_ad74 = add i32 %v3_ad70, 1
  store i32 %v1_ad74, i32* @r4, align 4
  %v0_ad78 = load i32, i32* %fp.global-to-local, align 4
  %v9_ad78 = icmp eq i32 %v0_ad78, %v1_ad74
  store i1 %v9_ad78, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ad74, i32* %stack_var_-40, align 4
  %v8_ad80 = icmp sgt i32 %v0_ad78, %v1_ad74
  br i1 %v8_ad80, label %dec_label_pc_aba0, label %dec_label_pc_ad84.preheader

dec_label_pc_ad84.preheader:                      ; preds = %bb76, %dec_label_pc_aa9c
  %v0_ad8814 = phi i32 [ %v0_aac4, %dec_label_pc_aa9c ], [ %v0_ad78, %bb76 ]
  %v2_ada4 = icmp eq i32 %v6_aa40, -1
  %v7_ada4 = icmp eq i32 %v6_aa40, -1
  %v3_af34 = icmp eq i32 %v3_aab4, 65535
  %v2_afb0 = icmp eq i32 %v1_aac0, 0
  br label %dec_label_pc_ad84

dec_label_pc_ad84:                                ; preds = %dec_label_pc_afd0.dec_label_pc_ad84_crit_edge, %dec_label_pc_ad84.preheader
  %v0_ad88 = phi i32 [ %v0_ad88.pre, %dec_label_pc_afd0.dec_label_pc_ad84_crit_edge ], [ %v0_ad8814, %dec_label_pc_ad84.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ad88 = icmp eq i32 %v0_ad88, 0
  store i1 %v2_ad88, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp77 = icmp slt i32 %v0_ad88, 1
  br i1 %tmp77, label %dec_label_pc_afd0, label %dec_label_pc_ad94

dec_label_pc_ad94:                                ; preds = %dec_label_pc_ad84
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_ae9c

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ae9c
  store i32 %v6_aa40, i32* %r0.global-to-local, align 4
  store i1 %v7_ada4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ada4, label %dec_label_pc_af24, label %dec_label_pc_adac

dec_label_pc_adac:                                ; preds = %dec_label_pc_aebc, %dec_label_pc_ada0
  store i32 %v3_aab4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_af34, label %dec_label_pc_af40, label %dec_label_pc_adc0

dec_label_pc_adc0:                                ; preds = %dec_label_pc_af24.dec_label_pc_adc0_crit_edge, %dec_label_pc_adac
  %v1_adc4 = phi i32 [ %v1_adc4.pre, %dec_label_pc_af24.dec_label_pc_adc0_crit_edge ], [ 65535, %dec_label_pc_adac ]
  store i32 %v3_aab8, i32* %r3.global-to-local, align 4
  %v9_adc4 = icmp eq i32 %v3_aab8, %v1_adc4
  store i1 %v9_adc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_adc4, label %dec_label_pc_af5c, label %dec_label_pc_adcc

dec_label_pc_adcc:                                ; preds = %dec_label_pc_af40.dec_label_pc_adcc_crit_edge, %dec_label_pc_adc0
  %v1_add0 = phi i32 [ %v1_add0.pre, %dec_label_pc_af40.dec_label_pc_adcc_crit_edge ], [ %v1_adc4, %dec_label_pc_adc0 ]
  store i32 %v3_aabc, i32* %ip.global-to-local, align 4
  %v9_add0 = icmp eq i32 %v3_aabc, %v1_add0
  store i1 %v9_add0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_add0, label %dec_label_pc_af78, label %dec_label_pc_add8

dec_label_pc_add8:                                ; preds = %dec_label_pc_af5c.dec_label_pc_add8_crit_edge, %dec_label_pc_adcc
  %v1_addc = phi i32 [ %v1_addc.pre, %dec_label_pc_af5c.dec_label_pc_add8_crit_edge ], [ %v1_add0, %dec_label_pc_adcc ]
  store i32 %v6_a97c, i32* %r0.global-to-local, align 4
  %v9_addc = icmp eq i32 %v6_a97c, %v1_addc
  store i1 %v9_addc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_addc, label %dec_label_pc_af94, label %dec_label_pc_ade4

dec_label_pc_ade4:                                ; preds = %dec_label_pc_af78.dec_label_pc_ade4_crit_edge, %dec_label_pc_add8
  %v1_ade8 = phi i32 [ %v1_ade8.pre, %dec_label_pc_af78.dec_label_pc_ade4_crit_edge ], [ %v1_addc, %dec_label_pc_add8 ]
  store i32 %v6_a994, i32* %r2.global-to-local, align 4
  %v9_ade8 = icmp eq i32 %v6_a994, %v1_ade8
  store i1 %v9_ade8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ade8, label %dec_label_pc_afa8, label %dec_label_pc_adf0

dec_label_pc_adf0:                                ; preds = %dec_label_pc_af94, %dec_label_pc_ade4
  store i32 %v1_aac0, i32* %r3.global-to-local, align 4
  store i1 %v2_afb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afb0, label %dec_label_pc_adfc, label %dec_label_pc_afbc

dec_label_pc_adfc:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_afa8, %dec_label_pc_afbc
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae00 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae00 = trunc i32 %v0_ae00 to i8
  %v2_ae00 = load i32, i32* @r5, align 4
  %v3_ae00 = add i32 %v2_ae00, 10
  %v4_ae00 = inttoptr i32 %v3_ae00 to i8*
  store i8 %v1_ae00, i8* %v4_ae00, align 1
  %v0_ae04 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae04 = trunc i32 %v0_ae04 to i8
  %v2_ae04 = load i32, i32* @r5, align 4
  %v3_ae04 = add i32 %v2_ae04, 11
  %v4_ae04 = inttoptr i32 %v3_ae04 to i8*
  store i8 %v1_ae04, i8* %v4_ae04, align 1
  %v0_ae08 = load i32, i32* @r5, align 4
  store i32 %v0_ae08, i32* @r0, align 4
  %v2_ae0c = call i32 @function_c690(i32 %v0_ae08, i32 20)
  %v3_ae0c = trunc i32 %v2_ae0c to i8
  %v4_ae1022 = udiv i32 %v2_ae0c, 256
  %v1_ae14 = trunc i32 %v4_ae1022 to i8
  %v2_ae14 = load i32, i32* @r5, align 4
  %v3_ae14 = add i32 %v2_ae14, 11
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  %v3_ae18 = load i32, i32* @r5, align 4
  %v4_ae18 = add i32 %v3_ae18, 10
  %v5_ae18 = inttoptr i32 %v4_ae18 to i8*
  store i8 %v3_ae0c, i8* %v5_ae18, align 1
  %v0_ae1c = load i32, i32* @r6, align 4
  store i32 %v0_ae1c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_ae28 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae28 = trunc i32 %v0_ae28 to i8
  %v3_ae28 = add i32 %v0_ae1c, 16
  %v4_ae28 = inttoptr i32 %v3_ae28 to i8*
  store i8 %v1_ae28, i8* %v4_ae28, align 1
  %v0_ae2c = load i32, i32* %r7.global-to-local, align 4
  %v1_ae2c = trunc i32 %v0_ae2c to i8
  %v2_ae2c = load i32, i32* @r6, align 4
  %v3_ae2c = add i32 %v2_ae2c, 17
  %v4_ae2c = inttoptr i32 %v3_ae2c to i8*
  store i8 %v1_ae2c, i8* %v4_ae2c, align 1
  %v0_ae30 = load i32, i32* @r5, align 4
  store i32 %v0_ae30, i32* %r0.global-to-local, align 4
  %v4_ae34 = call i32 @function_c6ec(i32 %v0_ae30, i32 %v0_ae1c, i32 10240, i32 40)
  %v5_ae34 = trunc i32 %v4_ae34 to i8
  store i32 %v4_ae34, i32* %r0.global-to-local, align 4
  %v4_ae3823 = udiv i32 %v4_ae34, 256
  %v1_ae3c = trunc i32 %v4_ae3823 to i8
  %v2_ae3c = load i32, i32* @r6, align 4
  %v3_ae3c = add i32 %v2_ae3c, 17
  %v4_ae3c = inttoptr i32 %v3_ae3c to i8*
  store i8 %v1_ae3c, i8* %v4_ae3c, align 1
  %v3_ae40 = load i32, i32* @r6, align 4
  %v4_ae40 = add i32 %v3_ae40, 16
  %v5_ae40 = inttoptr i32 %v4_ae40 to i8*
  store i8 %v5_ae34, i8* %v5_ae40, align 1
  %v3_ae44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae44, i32* %r3.global-to-local, align 4
  %v0_ae48 = load i32, i32* @r5, align 4
  %v1_ae48 = add i32 %v0_ae48, 20
  %v2_ae48 = inttoptr i32 %v1_ae48 to i32*
  %v3_ae48 = load i32, i32* %v2_ae48, align 4
  %v3_ae50 = udiv i32 %v3_ae48, 65536
  store i32 %v3_ae50, i32* %r2.global-to-local, align 4
  %v5_ae54 = mul i32 %v3_ae44, 24
  %v1_ae58 = load i32, i32* @r8, align 4
  %v2_ae58 = add i32 %v1_ae58, %v5_ae54
  store i32 %v2_ae58, i32* %ip.global-to-local, align 4
  %v3_ae5c21 = udiv i32 %v3_ae48, 16777216
  %v1_ae60 = trunc i32 %v3_ae5c21 to i8
  %v3_ae60 = add i32 %v2_ae58, 3
  %v4_ae60 = inttoptr i32 %v3_ae60 to i8*
  store i8 %v1_ae60, i8* %v4_ae60, align 1
  %v0_ae64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae64 = trunc i32 %v0_ae64 to i8
  %v2_ae64 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae64 = add i32 %v2_ae64, 2
  %v4_ae64 = inttoptr i32 %v3_ae64 to i8*
  store i8 %v1_ae64, i8* %v4_ae64, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae6c = load i32, i32* @r5, align 4
  store i32 %v0_ae6c, i32* %r1.global-to-local, align 4
  %v0_ae70 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ae70, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ae7c = load i32, i32* %ip.global-to-local, align 4
  %v6_ae84 = inttoptr i32 %v0_ae6c to i32*
  %v7_ae84 = call i32 @function_10b78(i32 %v0_ae70, i32* %v6_ae84, i32 60, i32 16384, i32 %v0_ae7c, i32 16)
  %v3_ae88 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae88, i32* %r3.global-to-local, align 4
  %v1_ae8c = add i32 %v3_ae88, 1
  store i32 %v1_ae8c, i32* %r0.global-to-local, align 4
  %v0_ae90 = load i32, i32* %fp.global-to-local, align 4
  %v9_ae90 = icmp eq i32 %v0_ae90, %v1_ae8c
  store i1 %v9_ae90, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ae8c, i32* %stack_var_-40, align 4
  %v7_ae98 = icmp sgt i32 %v0_ae90, %v1_ae8c
  br i1 %v7_ae98, label %dec_label_pc_ae9c, label %dec_label_pc_afd0

dec_label_pc_ae9c:                                ; preds = %dec_label_pc_adfc, %dec_label_pc_ad94
  %v1_aeac = phi i32 [ %v1_ae8c, %dec_label_pc_adfc ], [ 0, %dec_label_pc_ad94 ]
  %v5_aea0 = mul i32 %v1_aeac, 24
  %v1_aea4 = load i32, i32* @r8, align 4
  %v2_aea4 = add i32 %v1_aea4, %v5_aea0
  store i32 %v2_aea4, i32* %r3.global-to-local, align 4
  %v1_aea8 = add i32 %v2_aea4, 20
  %v2_aea8 = inttoptr i32 %v1_aea8 to i8*
  %v3_aea8 = load i8, i8* %v2_aea8, align 1
  %v4_aea8 = zext i8 %v3_aea8 to i32
  store i32 %v4_aea8, i32* %r2.global-to-local, align 4
  %v0_aeac = load i32, i32* %sb.global-to-local, align 4
  %v4_aeac = mul i32 %v1_aeac, 4
  %v5_aeac = add i32 %v0_aeac, %v4_aeac
  %v6_aeac = inttoptr i32 %v5_aeac to i32*
  %v7_aeac = load i32, i32* %v6_aeac, align 4
  store i32 %v7_aeac, i32* @r5, align 4
  %v2_aeb0 = icmp ugt i8 %v3_aea8, 30
  %v7_aeb0 = icmp eq i8 %v3_aea8, 31
  store i1 %v7_aeb0, i1* %cpsr_z.global-to-local, align 1
  %v1_aeb4 = add i32 %v7_aeac, 20
  store i32 %v1_aeb4, i32* @r6, align 4
  %v2_aeb8 = xor i1 %v7_aeb0, true
  %v3_aeb8 = and i1 %v2_aeb0, %v2_aeb8
  br i1 %v3_aeb8, label %dec_label_pc_ada0, label %dec_label_pc_aebc

dec_label_pc_aebc:                                ; preds = %dec_label_pc_ae9c
  %v1_aebc = add i32 %v2_aea4, 16
  %v2_aebc = inttoptr i32 %v1_aebc to i32*
  %v3_aebc = load i32, i32* %v2_aebc, align 4
  store i32 %v3_aebc, i32* %r4.global-to-local, align 4
  %v0_aec0 = call i32 @function_d208()
  store i32 %v0_aec0, i32* %r0.global-to-local, align 4
  %v3_aec4 = load i32, i32* %stack_var_-40, align 4
  %v5_aecc = mul i32 %v3_aec4, 24
  %v0_aed0 = load i32, i32* %r4.global-to-local, align 4
  %v1_aed4 = load i32, i32* @r8, align 4
  %v2_aed4 = add i32 %v1_aed4, %v5_aecc
  store i32 %v2_aed4, i32* %r1.global-to-local, align 4
  %v1_aed8 = and i32 %v0_aed0, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_aed8, i32* %r3.global-to-local, align 4
  %v1_aed0 = udiv i32 %v0_aed0, 256
  %v3_aedc = and i32 %v1_aed0, 65280
  store i32 %v3_aedc, i32* %r2.global-to-local, align 4
  %v3_aee0 = mul i32 %v0_aed0, 16777216
  store i32 %v3_aee0, i32* %ip.global-to-local, align 4
  %v1_aee4 = add i32 %v2_aed4, 20
  %v2_aee4 = inttoptr i32 %v1_aee4 to i8*
  %v3_aee4 = load i8, i8* %v2_aee4, align 1
  %v4_aee4 = zext i8 %v3_aee4 to i32
  %v4_aee8 = mul i32 %v1_aed8, 256
  %v5_aee8 = or i32 %v4_aee8, %v3_aee0
  store i32 %v5_aee8, i32* %ip.global-to-local, align 4
  %v4_aeec = udiv i32 %v0_aed0, 16777216
  %v5_aeec = or i32 %v3_aedc, %v4_aeec
  %v2_aef0 = or i32 %v5_aeec, %v5_aee8
  %v7_aef4 = lshr i32 %v0_aec0, %v4_aee4
  %v8_aef4 = add i32 %v7_aef4, %v2_aef0
  store i32 %v8_aef4, i32* %r2.global-to-local, align 4
  %v3_af00 = mul i32 %v8_aef4, 16777216
  %v1_aef8 = mul i32 %v8_aef4, 256
  %v4_af04 = and i32 %v1_aef8, 16711680
  %v5_af04 = or i32 %v4_af04, %v3_af00
  store i32 %v5_af04, i32* %r1.global-to-local, align 4
  store i32 %v6_aa40, i32* %r0.global-to-local, align 4
  %v2_af14 = call i32 @llvm.bswap.i32(i32 %v8_aef4)
  store i32 %v2_af14, i32* %r3.global-to-local, align 4
  store i1 %v7_ada4, i1* %cpsr_z.global-to-local, align 1
  %v1_af1c = load i32, i32* @r5, align 4
  %v2_af1c = add i32 %v1_af1c, 16
  %v3_af1c = inttoptr i32 %v2_af1c to i32*
  store i32 %v2_af14, i32* %v3_af1c, align 4
  br i1 %v2_ada4, label %dec_label_pc_af24, label %dec_label_pc_adac

dec_label_pc_af24:                                ; preds = %dec_label_pc_aebc, %dec_label_pc_ada0
  %v0_af24 = call i32 @function_d208()
  store i32 %v0_af24, i32* %r0.global-to-local, align 4
  store i32 %v3_aab4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af34, i1* %cpsr_z.global-to-local, align 1
  %v1_af38 = load i32, i32* @r5, align 4
  %v2_af38 = add i32 %v1_af38, 12
  %v3_af38 = inttoptr i32 %v2_af38 to i32*
  store i32 %v0_af24, i32* %v3_af38, align 4
  br i1 %v3_af34, label %dec_label_pc_af40, label %dec_label_pc_af24.dec_label_pc_adc0_crit_edge

dec_label_pc_af24.dec_label_pc_adc0_crit_edge:    ; preds = %dec_label_pc_af24
  %v1_adc4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_adc0

dec_label_pc_af40:                                ; preds = %dec_label_pc_af24, %dec_label_pc_adac
  %v0_af40 = call i32 @function_d208()
  %v1_af40 = trunc i32 %v0_af40 to i8
  store i32 %v0_af40, i32* %r0.global-to-local, align 4
  %v4_af4424 = udiv i32 %v0_af40, 256
  %v1_af48 = trunc i32 %v4_af4424 to i8
  %v2_af48 = load i32, i32* @r5, align 4
  %v3_af48 = add i32 %v2_af48, 5
  %v4_af48 = inttoptr i32 %v3_af48 to i8*
  store i8 %v1_af48, i8* %v4_af48, align 1
  store i32 %v3_aab8, i32* %r3.global-to-local, align 4
  %v1_af50 = load i32, i32* @r4, align 4
  %v9_af50 = icmp eq i32 %v3_aab8, %v1_af50
  store i1 %v9_af50, i1* %cpsr_z.global-to-local, align 1
  %v3_af54 = load i32, i32* @r5, align 4
  %v4_af54 = add i32 %v3_af54, 4
  %v5_af54 = inttoptr i32 %v4_af54 to i8*
  store i8 %v1_af40, i8* %v5_af54, align 1
  %v0_af58 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af58, label %dec_label_pc_af5c, label %dec_label_pc_af40.dec_label_pc_adcc_crit_edge

dec_label_pc_af40.dec_label_pc_adcc_crit_edge:    ; preds = %dec_label_pc_af40
  %v1_add0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_adcc

dec_label_pc_af5c:                                ; preds = %dec_label_pc_af40, %dec_label_pc_adc0
  %v0_af5c = call i32 @function_d208()
  %v1_af5c = trunc i32 %v0_af5c to i8
  store i32 %v0_af5c, i32* %r0.global-to-local, align 4
  store i32 %v3_aabc, i32* %ip.global-to-local, align 4
  %v4_af64 = sdiv i32 %v0_af5c, 256
  store i32 %v4_af64, i32* %r3.global-to-local, align 4
  %v1_af68 = load i32, i32* @r4, align 4
  %v9_af68 = icmp eq i32 %v3_aabc, %v1_af68
  store i1 %v9_af68, i1* %cpsr_z.global-to-local, align 1
  %v3_af6c = load i32, i32* @r5, align 4
  %v4_af6c = add i32 %v3_af6c, 20
  %v5_af6c = inttoptr i32 %v4_af6c to i8*
  store i8 %v1_af5c, i8* %v5_af6c, align 1
  %v0_af70 = load i32, i32* %r3.global-to-local, align 4
  %v1_af70 = trunc i32 %v0_af70 to i8
  %v2_af70 = load i32, i32* @r6, align 4
  %v3_af70 = add i32 %v2_af70, 1
  %v4_af70 = inttoptr i32 %v3_af70 to i8*
  store i8 %v1_af70, i8* %v4_af70, align 1
  %v0_af74 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af74, label %dec_label_pc_af78, label %dec_label_pc_af5c.dec_label_pc_add8_crit_edge

dec_label_pc_af5c.dec_label_pc_add8_crit_edge:    ; preds = %dec_label_pc_af5c
  %v1_addc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_add8

dec_label_pc_af78:                                ; preds = %dec_label_pc_af5c, %dec_label_pc_adcc
  %v0_af78 = call i32 @function_d208()
  %v1_af78 = trunc i32 %v0_af78 to i8
  %v4_af7c = sdiv i32 %v0_af78, 256
  store i32 %v4_af7c, i32* %r3.global-to-local, align 4
  %v3_af80 = load i32, i32* @r6, align 4
  %v4_af80 = add i32 %v3_af80, 2
  %v5_af80 = inttoptr i32 %v4_af80 to i8*
  store i8 %v1_af78, i8* %v5_af80, align 1
  store i32 %v6_a97c, i32* %r0.global-to-local, align 4
  %v1_af88 = load i32, i32* @r4, align 4
  %v9_af88 = icmp eq i32 %v6_a97c, %v1_af88
  store i1 %v9_af88, i1* %cpsr_z.global-to-local, align 1
  %v0_af8c = load i32, i32* %r3.global-to-local, align 4
  %v1_af8c = trunc i32 %v0_af8c to i8
  %v2_af8c = load i32, i32* @r6, align 4
  %v3_af8c = add i32 %v2_af8c, 3
  %v4_af8c = inttoptr i32 %v3_af8c to i8*
  store i8 %v1_af8c, i8* %v4_af8c, align 1
  %v0_af90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af90, label %dec_label_pc_af94, label %dec_label_pc_af78.dec_label_pc_ade4_crit_edge

dec_label_pc_af78.dec_label_pc_ade4_crit_edge:    ; preds = %dec_label_pc_af78
  %v1_ade8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ade4

dec_label_pc_af94:                                ; preds = %dec_label_pc_af78, %dec_label_pc_add8
  %v0_af94 = call i32 @function_d208()
  store i32 %v0_af94, i32* %r0.global-to-local, align 4
  store i32 %v6_a994, i32* %r2.global-to-local, align 4
  %v1_af9c = load i32, i32* @r4, align 4
  %v9_af9c = icmp eq i32 %v6_a994, %v1_af9c
  store i1 %v9_af9c, i1* %cpsr_z.global-to-local, align 1
  %v1_afa0 = load i32, i32* @r6, align 4
  %v2_afa0 = add i32 %v1_afa0, 4
  %v3_afa0 = inttoptr i32 %v2_afa0 to i32*
  store i32 %v0_af94, i32* %v3_afa0, align 4
  br i1 %v9_af9c, label %dec_label_pc_afa8, label %dec_label_pc_adf0

dec_label_pc_afa8:                                ; preds = %dec_label_pc_af94, %dec_label_pc_ade4
  %v0_afa8 = call i32 @function_d208()
  store i32 %v0_afa8, i32* %r0.global-to-local, align 4
  store i32 %v1_aac0, i32* %r3.global-to-local, align 4
  store i1 %v2_afb0, i1* %cpsr_z.global-to-local, align 1
  %v1_afb4 = load i32, i32* @r6, align 4
  %v2_afb4 = add i32 %v1_afb4, 8
  %v3_afb4 = inttoptr i32 %v2_afb4 to i32*
  store i32 %v0_afa8, i32* %v3_afb4, align 4
  br i1 %v2_afb0, label %dec_label_pc_adfc, label %dec_label_pc_afbc

dec_label_pc_afbc:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_afa8
  %v0_afbc = call i32 @function_d208()
  %v1_afbc = trunc i32 %v0_afbc to i8
  store i32 %v0_afbc, i32* %r0.global-to-local, align 4
  %v4_afc0 = sdiv i32 %v0_afbc, 256
  store i32 %v4_afc0, i32* %r3.global-to-local, align 4
  %v1_afc4 = trunc i32 %v4_afc0 to i8
  %v2_afc4 = load i32, i32* @r6, align 4
  %v3_afc4 = add i32 %v2_afc4, 19
  %v4_afc4 = inttoptr i32 %v3_afc4 to i8*
  store i8 %v1_afc4, i8* %v4_afc4, align 1
  %v3_afc8 = load i32, i32* @r6, align 4
  %v4_afc8 = add i32 %v3_afc8, 18
  %v5_afc8 = inttoptr i32 %v4_afc8 to i8*
  store i8 %v1_afbc, i8* %v5_afc8, align 1
  br label %dec_label_pc_adfc

dec_label_pc_afd0:                                ; preds = %dec_label_pc_adfc, %dec_label_pc_ad84
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_afd4 = call i32 @function_108e4(i32* null)
  store i32 %v2_afd4, i32* %r0.global-to-local, align 4
  store i32 %v2_aa50, i32* %ip.global-to-local, align 4
  %v9_afdc = icmp eq i32 %v2_aa50, %v2_afd4
  store i1 %v9_afdc, i1* %cpsr_z.global-to-local, align 1
  %v6_afe0 = icmp slt i32 %v2_aa50, %v2_afd4
  br i1 %v6_afe0, label %dec_label_pc_afe4, label %dec_label_pc_afd0.dec_label_pc_ad84_crit_edge

dec_label_pc_afd0.dec_label_pc_ad84_crit_edge:    ; preds = %dec_label_pc_afd0
  %v0_ad88.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_ad84

dec_label_pc_afe4:                                ; preds = %dec_label_pc_afd0, %dec_label_pc_a880, %dec_label_pc_afec
  %v29_afe8 = phi i32 [ %v3_aa64, %dec_label_pc_a880 ], [ %v1_aff0, %dec_label_pc_afec ], [ %v2_afd4, %dec_label_pc_afd0 ]
  store i32 %v3_a880, i32* %r4.global-to-local, align 4
  store i32 %v12_a880, i32* %r7.global-to-local, align 4
  ret i32 %v29_afe8

dec_label_pc_afec:                                ; preds = %dec_label_pc_aa74
  %v0_afec = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_afec, i32* %r0.global-to-local, align 4
  %v1_aff0 = call i32 @function_10640(i32 %v0_afec)
  store i32 %v1_aff0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_afe4

; uselistorder directives
  uselistorder i32 %v1_aff0, { 1, 0 }
  uselistorder i32 %v4_afc0, { 1, 0 }
  uselistorder i32 %v0_afbc, { 0, 2, 1 }
  uselistorder i32 %v0_af5c, { 0, 2, 1 }
  uselistorder i32 %v0_af40, { 0, 2, 1 }
  uselistorder i32 %v2_af14, { 1, 0 }
  uselistorder i32 %v8_aef4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_aee0, { 1, 0 }
  uselistorder i32 %v0_aed0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_ae8c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_ae34, { 0, 2, 1 }
  uselistorder i32 %v0_ae1c, { 1, 0, 2 }
  uselistorder i1 %v2_afb0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_af34, { 1, 0, 2, 3 }
  uselistorder i1 %v7_ada4, { 2, 1, 0 }
  uselistorder i32 %v1_ad74, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ad20, { 1, 0 }
  uselistorder i32 %v3_ab78, { 1, 0 }
  uselistorder i32 %v1_ab70, { 1, 0 }
  uselistorder i32 %v1_ab64, { 1, 0 }
  uselistorder i32 %v1_ab60, { 1, 0 }
  uselistorder i32 %v1_ab40, { 1, 0 }
  uselistorder i32 %v1_ab3c, { 1, 0 }
  uselistorder i32 %v1_ab30, { 1, 0 }
  uselistorder i32 %v1_aafc, { 1, 0 }
  uselistorder i32 %v1_aae8, { 1, 0 }
  uselistorder i32 %v0_aac8, { 1, 0, 2 }
  uselistorder i32 %v1_aac0, { 2, 1, 3, 0 }
  uselistorder i32 %v3_aab8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v3_aab4, { 0, 1, 3, 2 }
  uselistorder i1 %v7_aa94, { 1, 0 }
  uselistorder i1 %v7_aa68, { 1, 0 }
  uselistorder i32 %v3_aa64, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_aa50, { 2, 1, 0 }
  uselistorder i32 %v6_aa40, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_a994, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a97c, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v6_a944, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_a92c, { 1, 2, 0 }
  uselistorder i32 %v6_a8c4, { 1, 2, 0 }
  uselistorder i32 %v1_a884, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_afe4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_afbc, { 1, 0 }
  uselistorder label %dec_label_pc_adfc, { 2, 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_affc(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_affc:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v1_b000 = urem i32 %arg2, 256
  store i32 %v1_b000, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_b000, i32* %r0.global-to-local, align 4
  %v1_b014 = urem i32 %arg4, 256
  store i32 %v1_b014, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_b020 = call i32 @function_10ec8(i32 %v1_b000, i32 4)
  %v0_b02c = load i32, i32* @sl, align 4
  store i32 %v0_b02c, i32* %r0.global-to-local, align 4
  %v2_b030 = call i32 @function_10ec8(i32 %v0_b02c, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_b03c = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_b030, i32* @sb, align 4
  %v0_b04c = load i32, i32* @r4, align 4
  store i32 %v0_b04c, i32* %r0.global-to-local, align 4
  %v5_b050 = inttoptr i32 %v0_b03c to i32*
  %v6_b050 = call i32 @function_829c(i32 %v0_b04c, i32* %v5_b050, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b054 = load i32, i32* @r5, align 4
  %v0_b060 = load i32, i32* @r6, align 4
  store i32 %v0_b060, i32* %r3.global-to-local, align 4
  %v0_b064 = load i32, i32* @r4, align 4
  store i32 %v0_b064, i32* %r0.global-to-local, align 4
  %v3_b068 = urem i32 %v6_b050, 65536
  store i32 %v3_b068, i32* @fp, align 4
  %v5_b06c = inttoptr i32 %v0_b054 to i32*
  %v6_b06c = call i32 @function_829c(i32 %v0_b064, i32* %v5_b06c, i32 6, i32 %v0_b060, i32 ptrtoint (i32* @0 to i32))
  %v0_b070 = load i32, i32* @r5, align 4
  %v3_b074 = mul i32 %v6_b06c, 65536
  store i32 %v3_b074, i32* @r8, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b080 = load i32, i32* @r4, align 4
  store i32 %v0_b080, i32* %r0.global-to-local, align 4
  %v5_b084 = inttoptr i32 %v0_b070 to i32*
  %v6_b084 = call i32 @function_829c(i32 %v0_b080, i32* %v5_b084, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_b094 = urem i32 %v6_b084, 65536
  %v0_b098 = load i32, i32* @r5, align 4
  %v0_b09c = load i32, i32* @r4, align 4
  store i32 %v0_b09c, i32* %r0.global-to-local, align 4
  %v5_b0a4 = inttoptr i32 %v0_b098 to i32*
  %v6_b0a4 = call i32 @function_829c(i32 %v0_b09c, i32* %v5_b0a4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b0b0 = urem i32 %v6_b0a4, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_b0cc = call i32 @function_108e4(i32* null)
  %v0_b0d0 = load i32, i32* @r8, align 4
  %v3_b0d0 = udiv i32 %v0_b0d0, 65536
  store i32 %v3_b0d0, i32* %r3.global-to-local, align 4
  %v1_b0d4 = load i32, i32* @r6, align 4
  %v9_b0d4 = icmp eq i32 %v3_b0d0, %v1_b0d4
  %v1_b0dc4 = load i32, i32* @r7, align 4
  %v2_b0dc5 = add i32 %v1_b0dc4, %v2_b0cc
  store i32 %v2_b0dc5, i32* %r0.global-to-local, align 4
  br i1 %v9_b0d4, label %dec_label_pc_b2b8, label %bb

bb:                                               ; preds = %dec_label_pc_affc
  %v2_b0d8 = mul nuw nsw i32 %v3_b0d0, 256
  %v4_b0e0 = and i32 %v2_b0d8, 65280
  store i32 %v4_b0e0, i32* %r3.global-to-local, align 4
  %v5_b0e8 = udiv i32 %v0_b0d0, 16777216
  %v6_b0e8 = or i32 %v4_b0e0, %v5_b0e8
  br label %dec_label_pc_b0f0

dec_label_pc_b0f0:                                ; preds = %bb, %dec_label_pc_b2b8
  %storemerge = phi i32 [ %v6_b0e8, %bb ], [ %v3_b2c0, %dec_label_pc_b2b8 ]
  store i32 %storemerge, i32* @r7, align 4
  %v0_b0f0 = load i32, i32* @sl, align 4
  %tmp47 = icmp slt i32 %v0_b0f0, 1
  br i1 %tmp47, label %dec_label_pc_b288, label %dec_label_pc_b0f8

dec_label_pc_b0f8:                                ; preds = %dec_label_pc_b0f0
  %v0_b0f8 = load i32, i32* @fp, align 4
  %v3_b0f8 = udiv i32 %v0_b0f8, 256
  %v1_b0fc = mul i32 %v0_b0f8, 256
  %v4_b100 = and i32 %v1_b0fc, 65280
  %v5_b100 = or i32 %v4_b100, %v3_b0f8
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* @r5, align 4
  %v5_b110 = trunc i32 %v3_b0f8 to i8
  %v3_b1183 = udiv i32 %v5_b100, 256
  store i32 %v3_b1183, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_b124 = trunc i32 %v3_b1183 to i8
  store i8 %v4_b124, i8* %stack_var_-84, align 1
  %v3_b1c8 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_b14c

dec_label_pc_b12c:                                ; preds = %dec_label_pc_b1b0
  %v0_b12c = load i32, i32* @r6, align 4
  %v1_b12c = load i32, i32* @sb, align 4
  %v2_b12c = add i32 %v1_b12c, %v0_b12c
  %v3_b12c = inttoptr i32 %v2_b12c to i32*
  %v4_b12c = load i32, i32* %v3_b12c, align 4
  store i32 %v4_b12c, i32* %r0.global-to-local, align 4
  %v3_b138 = inttoptr i32 %v0_b1cc to %sockaddr*
  %v4_b138 = call i32 @function_10a38(i32 %v4_b12c, %sockaddr* %v3_b138, i32 16)
  store i32 %v4_b138, i32* %r0.global-to-local, align 4
  %v0_b13c = load i32, i32* @r8, align 4
  %v1_b13c = load i32, i32* @sl, align 4
  %v9_b13c = icmp eq i32 %v0_b13c, %v1_b13c
  %v0_b140 = load i32, i32* @r6, align 4
  %v1_b140 = add i32 %v0_b140, 4
  store i32 %v1_b140, i32* @r6, align 4
  %v0_b144 = load i32, i32* @r5, align 4
  %v1_b144 = add i32 %v0_b144, 24
  store i32 %v1_b144, i32* @r5, align 4
  br i1 %v9_b13c, label %dec_label_pc_b244, label %dec_label_pc_b14c

dec_label_pc_b14c:                                ; preds = %dec_label_pc_b1d8, %dec_label_pc_b12c, %dec_label_pc_b0f8
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_b158 = call i32 @function_10ec8(i32 65535, i32 1)
  store i32 %v2_b158, i32* %r0.global-to-local, align 4
  store i32 %v2_b020, i32* %r3.global-to-local, align 4
  %v0_b164 = load i32, i32* @fp, align 4
  %v9_b164 = icmp eq i32 %v0_b164, 65535
  %v1_b168 = load i32, i32* @r6, align 4
  %v3_b168 = add i32 %v1_b168, %v2_b020
  %v4_b168 = inttoptr i32 %v3_b168 to i32*
  store i32 %v2_b158, i32* %v4_b168, align 4
  br i1 %v9_b164, label %dec_label_pc_b2a4, label %dec_label_pc_b170

dec_label_pc_b170:                                ; preds = %dec_label_pc_b14c
  %v2_b174 = load i8, i8* %stack_var_-84, align 1
  %v3_b174 = sext i8 %v2_b174 to i32
  store i32 %v3_b174, i32* %r3.global-to-local, align 4
  %v2_b178 = load i32, i32* @r5, align 4
  %v3_b178 = add i32 %v2_b178, 2
  %v4_b178 = inttoptr i32 %v3_b178 to i8*
  store i8 %v5_b110, i8* %v4_b178, align 1
  %v0_b17c = load i32, i32* %r3.global-to-local, align 4
  %v1_b17c = trunc i32 %v0_b17c to i8
  %v2_b17c = load i32, i32* @r5, align 4
  %v3_b17c = add i32 %v2_b17c, 3
  %v4_b17c = inttoptr i32 %v3_b17c to i8*
  store i8 %v1_b17c, i8* %v4_b17c, align 1
  br label %dec_label_pc_b180

dec_label_pc_b180:                                ; preds = %dec_label_pc_b2a4, %dec_label_pc_b170
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b18c = call i32 @function_10bdc(i32 2, i32 2, i32 17)
  store i32 %v3_b18c, i32* %r0.global-to-local, align 4
  %v7_b190 = icmp eq i32 %v3_b18c, -1
  %v0_b194 = load i32, i32* @r8, align 4
  %v1_b194 = add i32 %v0_b194, 1
  store i32 %v1_b194, i32* @r8, align 4
  store i32 0, i32* @lr, align 4
  %v1_b1a8 = load i32, i32* @r6, align 4
  %v2_b1a8 = load i32, i32* @sb, align 4
  %v3_b1a8 = add i32 %v2_b1a8, %v1_b1a8
  %v4_b1a8 = inttoptr i32 %v3_b1a8 to i32*
  store i32 %v3_b18c, i32* %v4_b1a8, align 4
  br i1 %v7_b190, label %dec_label_pc_b29c.loopexit, label %dec_label_pc_b1b0

dec_label_pc_b1b0:                                ; preds = %dec_label_pc_b180
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v0_b1c8 = load i32, i32* %r0.global-to-local, align 4
  %v4_b1c8 = call i32 @function_10a0c(i32 %v0_b1c8, %sockaddr* %v3_b1c8, i32 16)
  store i32 %v4_b1c8, i32* %r0.global-to-local, align 4
  %v0_b1cc = load i32, i32* @r5, align 4
  %v1_b1cc = add i32 %v0_b1cc, 20
  %v2_b1cc = inttoptr i32 %v1_b1cc to i8*
  %v3_b1cc = load i8, i8* %v2_b1cc, align 1
  %v4_b1cc = zext i8 %v3_b1cc to i32
  store i32 %v4_b1cc, i32* %r3.global-to-local, align 4
  %tmp51 = icmp ugt i8 %v3_b1cc, 31
  br i1 %tmp51, label %dec_label_pc_b12c, label %dec_label_pc_b1d8

dec_label_pc_b1d8:                                ; preds = %dec_label_pc_b1b0
  %v1_b1d8 = add i32 %v0_b1cc, 16
  %v2_b1d8 = inttoptr i32 %v1_b1d8 to i32*
  %v3_b1d8 = load i32, i32* %v2_b1d8, align 4
  store i32 %v3_b1d8, i32* @r4, align 4
  %v0_b1dc = call i32 @function_d208()
  store i32 %v0_b1dc, i32* %r0.global-to-local, align 4
  %v0_b1e0 = load i32, i32* @r4, align 4
  %v1_b1e4 = and i32 %v0_b1e0, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_b1e4, i32* %r3.global-to-local, align 4
  %v1_b1e0 = udiv i32 %v0_b1e0, 256
  %v3_b1e8 = and i32 %v1_b1e0, 65280
  %v3_b1ec = mul i32 %v0_b1e0, 16777216
  %v4_b1f0 = mul i32 %v1_b1e4, 256
  %v5_b1f0 = or i32 %v4_b1f0, %v3_b1ec
  %v0_b1f4 = load i32, i32* @r5, align 4
  %v1_b1f4 = add i32 %v0_b1f4, 20
  %v2_b1f4 = inttoptr i32 %v1_b1f4 to i8*
  %v3_b1f4 = load i8, i8* %v2_b1f4, align 1
  %v4_b1f4 = zext i8 %v3_b1f4 to i32
  %v4_b1f8 = udiv i32 %v0_b1e0, 16777216
  %v5_b1f8 = or i32 %v3_b1e8, %v4_b1f8
  %v2_b1fc = or i32 %v5_b1f8, %v5_b1f0
  %v7_b200 = lshr i32 %v0_b1dc, %v4_b1f4
  %v8_b200 = add i32 %v7_b200, %v2_b1fc
  %v1_b208 = and i32 %v8_b200, 65280
  store i32 %v1_b208, i32* %r0.global-to-local, align 4
  %v2_b21c = call i32 @llvm.bswap.i32(i32 %v8_b200)
  store i32 %v2_b21c, i32* %r3.global-to-local, align 4
  %v2_b220 = add i32 %v0_b1f4, 4
  %v3_b220 = inttoptr i32 %v2_b220 to i32*
  store i32 %v2_b21c, i32* %v3_b220, align 4
  %v0_b224 = load i32, i32* @r5, align 4
  %v0_b228 = load i32, i32* @r6, align 4
  %v1_b228 = load i32, i32* @sb, align 4
  %v2_b228 = add i32 %v1_b228, %v0_b228
  %v3_b228 = inttoptr i32 %v2_b228 to i32*
  %v4_b228 = load i32, i32* %v3_b228, align 4
  store i32 %v4_b228, i32* %r0.global-to-local, align 4
  %v3_b230 = inttoptr i32 %v0_b224 to %sockaddr*
  %v4_b230 = call i32 @function_10a38(i32 %v4_b228, %sockaddr* %v3_b230, i32 16)
  store i32 %v4_b230, i32* %r0.global-to-local, align 4
  %v0_b234 = load i32, i32* @r8, align 4
  %v1_b234 = load i32, i32* @sl, align 4
  %v9_b234 = icmp eq i32 %v0_b234, %v1_b234
  %v0_b238 = load i32, i32* @r6, align 4
  %v1_b238 = add i32 %v0_b238, 4
  store i32 %v1_b238, i32* @r6, align 4
  %v0_b23c = load i32, i32* @r5, align 4
  %v1_b23c = add i32 %v0_b23c, 24
  store i32 %v1_b23c, i32* @r5, align 4
  br i1 %v9_b234, label %dec_label_pc_b244, label %dec_label_pc_b14c

dec_label_pc_b244:                                ; preds = %dec_label_pc_b1d8, %dec_label_pc_b12c, %dec_label_pc_b288.dec_label_pc_b244_crit_edge
  %v0_b244 = phi i32 [ %v0_b244.pre, %dec_label_pc_b288.dec_label_pc_b244_crit_edge ], [ %v0_b234, %dec_label_pc_b1d8 ], [ %v0_b13c, %dec_label_pc_b12c ]
  %tmp48 = icmp slt i32 %v0_b244, 1
  br i1 %tmp48, label %dec_label_pc_b288, label %dec_label_pc_b24c

dec_label_pc_b24c:                                ; preds = %dec_label_pc_b244
  %v2_b250 = icmp eq i32 %v1_b0b0, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_b250, label %dec_label_pc_b258, label %dec_label_pc_b2c8

dec_label_pc_b258:                                ; preds = %dec_label_pc_b24c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_b260

dec_label_pc_b260:                                ; preds = %dec_label_pc_b260, %dec_label_pc_b258
  %v0_b26c = phi i32 [ %v1_b26c, %dec_label_pc_b260 ], [ 0, %dec_label_pc_b258 ]
  %v0_b264 = phi i32 [ %v1_b280, %dec_label_pc_b260 ], [ 0, %dec_label_pc_b258 ]
  store i32 %v2_b020, i32* %r3.global-to-local, align 4
  %v1_b264 = load i32, i32* @sb, align 4
  %v2_b264 = add i32 %v1_b264, %v0_b264
  %v3_b264 = inttoptr i32 %v2_b264 to i32*
  %v4_b264 = load i32, i32* %v3_b264, align 4
  store i32 %v4_b264, i32* %r0.global-to-local, align 4
  %v2_b268 = add i32 %v0_b264, %v2_b020
  %v3_b268 = inttoptr i32 %v2_b268 to i32*
  %v4_b268 = load i32, i32* %v3_b268, align 4
  %v1_b26c = add i32 %v0_b26c, 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b278 = inttoptr i32 %v4_b268 to i32*
  %v5_b278 = call i32 @function_10b4c(i32 %v4_b264, i32* %v4_b278, i32 %v3_b094, i32 16384)
  store i32 %v5_b278, i32* %r0.global-to-local, align 4
  %v1_b27c = load i32, i32* @sl, align 4
  %v9_b27c = icmp eq i32 %v1_b26c, %v1_b27c
  %v0_b280 = load i32, i32* @r4, align 4
  %v1_b280 = add i32 %v0_b280, 4
  store i32 %v1_b280, i32* @r4, align 4
  br i1 %v9_b27c, label %dec_label_pc_b288, label %dec_label_pc_b260

dec_label_pc_b288:                                ; preds = %dec_label_pc_b2d0, %dec_label_pc_b260, %dec_label_pc_b244, %dec_label_pc_b0f0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b28c = call i32 @function_108e4(i32* null)
  store i32 %v2_b28c, i32* %r0.global-to-local, align 4
  store i32 %v2_b0dc5, i32* %r3.global-to-local, align 4
  %v6_b298 = icmp slt i32 %v2_b0dc5, %v2_b28c
  br i1 %v6_b298, label %dec_label_pc_b29c, label %dec_label_pc_b288.dec_label_pc_b244_crit_edge

dec_label_pc_b288.dec_label_pc_b244_crit_edge:    ; preds = %dec_label_pc_b288
  %v0_b244.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_b244

dec_label_pc_b29c.loopexit:                       ; preds = %dec_label_pc_b180
  %v29_b2a0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b29c

dec_label_pc_b29c:                                ; preds = %dec_label_pc_b29c.loopexit, %dec_label_pc_b288
  %v29_b2a0 = phi i32 [ %v29_b2a0.pre, %dec_label_pc_b29c.loopexit ], [ %v2_b28c, %dec_label_pc_b288 ]
  ret i32 %v29_b2a0

dec_label_pc_b2a4:                                ; preds = %dec_label_pc_b14c
  %v0_b2a4 = call i32 @function_d208()
  %v1_b2a4 = trunc i32 %v0_b2a4 to i8
  store i32 %v0_b2a4, i32* %r0.global-to-local, align 4
  %v4_b2a8 = sdiv i32 %v0_b2a4, 256
  store i32 %v4_b2a8, i32* %r3.global-to-local, align 4
  %v1_b2ac = trunc i32 %v4_b2a8 to i8
  %v2_b2ac = load i32, i32* @r5, align 4
  %v3_b2ac = add i32 %v2_b2ac, 3
  %v4_b2ac = inttoptr i32 %v3_b2ac to i8*
  store i8 %v1_b2ac, i8* %v4_b2ac, align 1
  %v3_b2b0 = load i32, i32* @r5, align 4
  %v4_b2b0 = add i32 %v3_b2b0, 2
  %v5_b2b0 = inttoptr i32 %v4_b2b0 to i8*
  store i8 %v1_b2a4, i8* %v5_b2b0, align 1
  br label %dec_label_pc_b180

dec_label_pc_b2b8:                                ; preds = %dec_label_pc_affc
  %v0_b2b8 = call i32 @function_d208()
  %v3_b2bc = mul i32 %v0_b2b8, 65536
  store i32 %v3_b2bc, i32* %r0.global-to-local, align 4
  %v3_b2c0 = urem i32 %v0_b2b8, 65536
  br label %dec_label_pc_b0f0

dec_label_pc_b2c8:                                ; preds = %dec_label_pc_b24c
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_b2d0

dec_label_pc_b2d0:                                ; preds = %dec_label_pc_b2d0, %dec_label_pc_b2c8
  %v0_b2d4 = phi i32 [ %v1_b30c, %dec_label_pc_b2d0 ], [ 0, %dec_label_pc_b2c8 ]
  %v2_b2d4 = add i32 %v0_b2d4, %v2_b020
  %v3_b2d4 = inttoptr i32 %v2_b2d4 to i32*
  %v4_b2d4 = load i32, i32* %v3_b2d4, align 4
  store i32 %v4_b2d4, i32* @r4, align 4
  store i32 %v4_b2d4, i32* %r0.global-to-local, align 4
  %v2_b2e0 = call i32 @function_d2bc(i32 %v4_b2d4, i32 %v3_b094)
  store i32 %v2_b2e0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2ec = load i32, i32* @r4, align 4
  %v4_b2ec = add i32 %v2_b2ec, %v3_b094
  %v5_b2ec = inttoptr i32 %v4_b2ec to i8*
  store i8 0, i8* %v5_b2ec, align 1
  %v0_b2f0 = load i32, i32* @r4, align 4
  %v0_b2f4 = load i32, i32* @r6, align 4
  %v1_b2f4 = load i32, i32* @sb, align 4
  %v2_b2f4 = add i32 %v1_b2f4, %v0_b2f4
  %v3_b2f4 = inttoptr i32 %v2_b2f4 to i32*
  %v4_b2f4 = load i32, i32* %v3_b2f4, align 4
  store i32 %v4_b2f4, i32* %r0.global-to-local, align 4
  %v0_b2f8 = load i32, i32* @r5, align 4
  %v1_b2f8 = add i32 %v0_b2f8, 1
  store i32 %v1_b2f8, i32* @r5, align 4
  %v0_b300 = load i32, i32* %r3.global-to-local, align 4
  %v1_b300 = add i32 %v0_b300, 16384
  store i32 %v1_b300, i32* %r3.global-to-local, align 4
  %v4_b304 = inttoptr i32 %v0_b2f0 to i32*
  %v5_b304 = call i32 @function_10b4c(i32 %v4_b2f4, i32* %v4_b304, i32 %v3_b094, i32 %v1_b300)
  store i32 %v5_b304, i32* %r0.global-to-local, align 4
  %v0_b308 = load i32, i32* @r5, align 4
  %v1_b308 = load i32, i32* @sl, align 4
  %v9_b308 = icmp eq i32 %v0_b308, %v1_b308
  %v0_b30c = load i32, i32* @r6, align 4
  %v1_b30c = add i32 %v0_b30c, 4
  store i32 %v1_b30c, i32* @r6, align 4
  br i1 %v9_b308, label %dec_label_pc_b288, label %dec_label_pc_b2d0

; uselistorder directives
  uselistorder i32 %v1_b30c, { 1, 0 }
  uselistorder i32 %v0_b2b8, { 1, 0 }
  uselistorder i32 %v4_b2a8, { 1, 0 }
  uselistorder i32 %v0_b2a4, { 0, 2, 1 }
  uselistorder i32 %v1_b280, { 1, 0 }
  uselistorder i32 %v2_b21c, { 1, 0 }
  uselistorder i32 %v0_b1e0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b1cc, { 1, 2, 0 }
  uselistorder i32 %v3_b18c, { 1, 0, 2 }
  uselistorder i32 %v3_b0d0, { 0, 2, 1 }
  uselistorder i32 %v3_b094, { 2, 3, 1, 0 }
  uselistorder i32 %v2_b020, { 0, 1, 4, 2, 3 }
  uselistorder i32 %v1_b000, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 6, 4, 5, 7, 19, 9, 8, 30, 10, 13, 11, 12, 14, 31, 18, 20, 17, 22, 21, 16, 15, 1, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder label %dec_label_pc_b244, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b0f0, { 1, 0 }
}

define i32 @function_b318(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b318:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_b318 = load i32, i32* @sb, align 4
  %v21_b318 = load i32, i32* @sl, align 4
  %v1_b31c = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_b31c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b338 = urem i32 %arg4, 256
  store i32 %v1_b338, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b348 = call i32 @function_10ec8(i32 %v1_b31c, i32 4)
  %v0_b34c = load i32, i32* @r5, align 4
  store i32 %v0_b34c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b358 = load i32, i32* @r7, align 4
  store i32 %v0_b358, i32* %r3.global-to-local, align 4
  %v0_b35c = load i32, i32* @r4, align 4
  store i32 %v0_b35c, i32* %r0.global-to-local, align 4
  %v5_b360 = inttoptr i32 %v0_b34c to i32*
  %v6_b360 = call i32 @function_829c(i32 %v0_b35c, i32* %v5_b360, i32 2, i32 %v0_b358, i32 %v2_b348)
  %v1_b36c = urem i32 %v6_b360, 256
  store i32 %v1_b36c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b378 = load i32, i32* @r5, align 4
  store i32 %v0_b378, i32* %r1.global-to-local, align 4
  %v0_b37c = load i32, i32* @r4, align 4
  store i32 %v0_b37c, i32* %r0.global-to-local, align 4
  %v5_b380 = trunc i32 %v6_b360 to i8
  %v6_b384 = inttoptr i32 %v0_b378 to i32*
  %v7_b384 = call i32 @function_829c(i32 %v0_b37c, i32* %v6_b384, i32 3, i32 65535, i32 %v6_b360)
  %v0_b388 = load i32, i32* @r5, align 4
  store i32 %v0_b388, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b398 = load i32, i32* @r4, align 4
  store i32 %v0_b398, i32* %r0.global-to-local, align 4
  %v5_b39c = inttoptr i32 %v0_b388 to i32*
  %v6_b39c = call i32 @function_829c(i32 %v0_b398, i32* %v5_b39c, i32 4, i32 64, i32 %v7_b384)
  %v1_b3a4 = urem i32 %v6_b39c, 256
  store i32 %v1_b3a4, i32* %ip.global-to-local, align 4
  %v0_b3a8 = load i32, i32* @r5, align 4
  store i32 %v0_b3a8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b3b0 = load i32, i32* @r7, align 4
  store i32 %v0_b3b0, i32* %r3.global-to-local, align 4
  %v0_b3b4 = load i32, i32* @r4, align 4
  store i32 %v0_b3b4, i32* %r0.global-to-local, align 4
  %v5_b3b8 = trunc i32 %v6_b39c to i8
  %v6_b3bc = inttoptr i32 %v0_b3a8 to i32*
  %v7_b3bc = call i32 @function_829c(i32 %v0_b3b4, i32* %v6_b3bc, i32 5, i32 %v0_b3b0, i32 %v6_b39c)
  %v1_b3c8 = urem i32 %v7_b3bc, 256
  store i32 %v1_b3c8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b3d4 = load i32, i32* @r5, align 4
  store i32 %v0_b3d4, i32* %r1.global-to-local, align 4
  %v0_b3d8 = load i32, i32* @r4, align 4
  store i32 %v0_b3d8, i32* %r0.global-to-local, align 4
  %v5_b3e0 = inttoptr i32 %v0_b3d4 to i32*
  %v6_b3e0 = call i32 @function_829c(i32 %v0_b3d8, i32* %v5_b3e0, i32 6, i32 65535, i32 %v1_b3c8)
  %v0_b3ec = load i32, i32* @r5, align 4
  store i32 %v0_b3ec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3f8 = load i32, i32* @r4, align 4
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  %v5_b3fc = inttoptr i32 %v0_b3ec to i32*
  %v6_b3fc = call i32 @function_829c(i32 %v0_b3f8, i32* %v5_b3fc, i32 7, i32 65535, i32 %v6_b3e0)
  %v0_b400 = load i32, i32* @r5, align 4
  store i32 %v0_b400, i32* %r1.global-to-local, align 4
  %v0_b404 = load i32, i32* @r7, align 4
  store i32 %v0_b404, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b3fc, i32* %sb.global-to-local, align 4
  %v0_b410 = load i32, i32* @r4, align 4
  store i32 %v0_b410, i32* %r0.global-to-local, align 4
  %v5_b414 = inttoptr i32 %v0_b400 to i32*
  %v6_b414 = call i32 @function_829c(i32 %v0_b410, i32* %v5_b414, i32 %v0_b404, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b420 = load i32, i32* @r5, align 4
  store i32 %v0_b420, i32* %r1.global-to-local, align 4
  store i32 %v6_b414, i32* @sl, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v5_b42c = inttoptr i32 %v0_b420 to i32*
  %v6_b42c = call i32 @function_829c(i32 %v0_b428, i32* %v5_b42c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b438 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_b438, i32* %r3.global-to-local, align 4
  %v1_b43c = urem i32 %v6_b42c, 256
  store i32 %v1_b43c, i32* %ip.global-to-local, align 4
  %v0_b440 = load i32, i32* @r5, align 4
  store i32 %v0_b440, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_b448 = load i32, i32* @r4, align 4
  store i32 %v0_b448, i32* %r0.global-to-local, align 4
  %v5_b450 = inttoptr i32 %v0_b440 to i32*
  %v6_b450 = call i32 @function_829c(i32 %v0_b448, i32* %v5_b450, i32 24, i32 %v2_b438, i32 %v1_b43c)
  store i32 %v6_b450, i32* @fp, align 4
  %v0_b458 = load i32, i32* @r7, align 4
  store i32 %v0_b458, i32* %r0.global-to-local, align 4
  %v1_b45c = inttoptr i32 %v0_b458 to i32*
  %v2_b45c = call i32 @function_108e4(i32* %v1_b45c)
  %v1_b460 = load i32, i32* @r6, align 4
  %v2_b460 = add i32 %v1_b460, %v2_b45c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b474 = call i32 @function_10bdc(i32 2, i32 3, i32 17)
  store i32 %v3_b474, i32* %r0.global-to-local, align 4
  %v7_b478 = icmp eq i32 %v3_b474, -1
  store i1 %v7_b478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b478, label %dec_label_pc_b8a0, label %dec_label_pc_b484

dec_label_pc_b484:                                ; preds = %dec_label_pc_b318
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b48c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b48c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b494 = load i32, i32* @r7, align 4
  store i32 %v0_b494, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b4a0 = call i32 @function_10bac(i32 %v3_b474, i32 %v0_b494, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b4a0, i32* %r0.global-to-local, align 4
  %v7_b4a4 = icmp eq i32 %v6_b4a0, -1
  store i1 %v7_b4a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4a4, label %dec_label_pc_b8a8, label %dec_label_pc_b4ac

dec_label_pc_b4ac:                                ; preds = %dec_label_pc_b484
  %v0_b4ac = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_b4b8 = urem i32 %v0_b4ac, 65536
  store i32 %v3_b4b8, i32* %r2.global-to-local, align 4
  %v3_b4bc = icmp ugt i32 %v3_b4b8, 1459
  %v9_b4bc = icmp eq i32 %v3_b4b8, 1460
  store i1 %v9_b4bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4bc, label %bb, label %bb56

bb:                                               ; preds = %dec_label_pc_b4ac
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_b4ac, %bb
  %v0_b4c4 = phi i32 [ %v3_b4b8, %dec_label_pc_b4ac ], [ 1460, %bb ]
  store i32 %v7_b384, i32* %r1.global-to-local, align 4
  store i32 %v6_b3e0, i32* %r2.global-to-local, align 4
  store i32 %v1_b31c, i32* %r3.global-to-local, align 4
  %v0_b4d4 = load i32, i32* %sb.global-to-local, align 4
  %v3_b4d8 = mul i32 %v7_b384, 65536
  store i32 %v3_b4d8, i32* %r0.global-to-local, align 4
  %v3_b4dc = mul i32 %v6_b3e0, 65536
  store i32 %v3_b4dc, i32* %sl.global-to-local, align 4
  %v3_b4e0 = urem i32 %v7_b384, 65536
  store i32 %v3_b4e0, i32* @r4, align 4
  %v3_b4e4 = urem i32 %v6_b3e0, 65536
  store i32 %v3_b4e4, i32* %sb.global-to-local, align 4
  %v3_b4e8 = urem i32 %v0_b4d4, 65536
  store i32 %v3_b4e8, i32* %ip.global-to-local, align 4
  %v2_b4ec = icmp eq i32 %v1_b31c, 0
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  %v0_b4f0 = load i32, i32* @r7, align 4
  store i32 %v0_b4f0, i32* %stack_var_-40, align 4
  br i1 %v2_b4ec, label %.dec_label_pc_b660.preheader_crit_edge, label %dec_label_pc_b504

.dec_label_pc_b660.preheader_crit_edge:           ; preds = %bb56
  %.pre = add nuw nsw i32 %v0_b4c4, 8
  %.pre19 = add nuw nsw i32 %v0_b4c4, 28
  br label %dec_label_pc_b660.preheader

dec_label_pc_b504:                                ; preds = %bb56
  %v1_b508 = add nuw nsw i32 %v0_b4c4, 28
  %v1_b50c = add nuw nsw i32 %v0_b4c4, 8
  %v1_b510 = urem i32 %v6_b3e0, 256
  %tmp57 = udiv i32 %v7_b384, 256
  %v3_b51c = urem i32 %tmp57, 256
  %v3_b520 = mul i32 %v1_b50c, 65536
  store i32 %v3_b520, i32* @lr, align 4
  %tmp58 = mul nuw nsw i32 %v1_b508, 256
  %v1_b52c = urem i32 %v7_b384, 256
  %tmp59 = mul nuw nsw i32 %v1_b50c, 256
  %v1_b538 = and i32 %tmp58, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_b538, i32* %r3.global-to-local, align 4
  %v4_b53c = mul nuw nsw i32 %v1_b52c, 256
  %v5_b53c = or i32 %v4_b53c, %v3_b51c
  store i32 %v5_b53c, i32* %r0.global-to-local, align 4
  %v3_b540 = mul nuw nsw i32 %v1_b510, 256
  store i32 %v3_b540, i32* %r1.global-to-local, align 4
  %tmp60 = udiv i32 %v0_b4d4, 256
  %v3_b544 = urem i32 %tmp60, 256
  %v1_b548 = and i32 %tmp59, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_b548, i32* %ip.global-to-local, align 4
  %v2_b54c = icmp eq i32 %v1_b3c8, 0
  store i1 %v2_b54c, i1* %cpsr_z.global-to-local, align 1
  %tmp61 = udiv i32 %v1_b508, 256
  %v4_b550 = urem i32 %tmp61, 256
  %v5_b550 = or i32 %v4_b550, %v1_b538
  store i32 %v5_b550, i32* %r2.global-to-local, align 4
  %v1_b554 = urem i32 %v0_b4d4, 256
  %v5_b558 = trunc i32 %tmp61 to i8
  %v5_b55c = trunc i32 %tmp57 to i8
  %tmp62 = udiv i32 %v6_b3e0, 256
  %v4_b560 = urem i32 %tmp62, 256
  %v5_b560 = or i32 %v4_b560, %v3_b540
  store i32 %v5_b560, i32* @r5, align 4
  %v4_b564 = mul nuw nsw i32 %v1_b554, 256
  %v5_b564 = or i32 %v4_b564, %v3_b544
  store i32 %v5_b564, i32* @r6, align 4
  %tmp63 = udiv i32 %v1_b50c, 256
  %v4_b568 = urem i32 %tmp63, 256
  %v5_b568 = or i32 %v4_b568, %v1_b548
  store i32 %v5_b568, i32* %sb.global-to-local, align 4
  br i1 %v2_b54c, label %dec_label_pc_b570, label %dec_label_pc_b8b4

dec_label_pc_b570:                                ; preds = %dec_label_pc_b504
  %v3_b57022 = udiv i32 %v1_b538, 256
  store i32 %v3_b57022, i32* %ip.global-to-local, align 4
  store i32 %v1_b52c, i32* %r0.global-to-local, align 4
  store i32 %v1_b510, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v1_b554, i32* %sl.global-to-local, align 4
  %v3_b59023 = udiv i32 %v1_b548, 256
  store i32 %v3_b59023, i32* @r7, align 4
  %sext10 = mul i32 %v1_b538, 65536
  %v4_b618 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v7_b384, 16777216
  %v4_b624 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v6_b3e0, 16777216
  %v4_b628 = sdiv i32 %sext12, 16777216
  %v4_b630 = sext i8 %v5_b55c to i32
  %v4_b60c = sext i8 %v5_b558 to i32
  br label %dec_label_pc_b594

dec_label_pc_b594:                                ; preds = %dec_label_pc_b594, %dec_label_pc_b570
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b5a0 = call i32 @function_10ec8(i32 1510, i32 1)
  store i32 %v2_b5a0, i32* %r0.global-to-local, align 4
  store i32 %v2_b348, i32* %r3.global-to-local, align 4
  %v2_b5ac = load i32, i32* @r4, align 4
  %v5_b5ac = mul i32 %v2_b5ac, 4
  %v6_b5ac = add i32 %v5_b5ac, %v2_b348
  %v7_b5ac = inttoptr i32 %v6_b5ac to i32*
  store i32 %v2_b5a0, i32* %v7_b5ac, align 4
  %v3_b5b0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5b0, i32* %r2.global-to-local, align 4
  %v0_b5b4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b5b4 = mul i32 %v3_b5b0, 4
  %v5_b5b4 = add i32 %v0_b5b4, %v4_b5b4
  %v6_b5b4 = inttoptr i32 %v5_b5b4 to i32*
  %v7_b5b4 = load i32, i32* %v6_b5b4, align 4
  store i32 %v7_b5b4, i32* %r1.global-to-local, align 4
  %v1_b5b8 = inttoptr i32 %v7_b5b4 to i8*
  %v2_b5b8 = load i8, i8* %v1_b5b8, align 1
  %tmp = urem i8 %v2_b5b8, 16
  %v1_b5bc = zext i8 %tmp to i32
  %v1_b5c0 = or i32 %v1_b5bc, 64
  store i32 %v1_b5c0, i32* %r3.global-to-local, align 4
  %v1_b5c4 = trunc i32 %v1_b5c0 to i8
  store i8 %v1_b5c4, i8* %v1_b5b8, align 1
  %v0_b5c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b5c8 = inttoptr i32 %v0_b5c8 to i8*
  %v2_b5c8 = load i8, i8* %v1_b5c8, align 1
  %v3_b5c8 = zext i8 %v2_b5c8 to i32
  %v1_b5cc = and i32 %v3_b5c8, 240
  %v1_b5d0 = or i32 %v1_b5cc, 5
  store i32 %v1_b5d0, i32* %r2.global-to-local, align 4
  %v3_b5d8 = add i32 %v0_b5c8, 9
  %v4_b5d8 = inttoptr i32 %v3_b5d8 to i8*
  store i8 17, i8* %v4_b5d8, align 1
  %v0_b5dc = load i32, i32* %r2.global-to-local, align 4
  %v1_b5dc = trunc i32 %v0_b5dc to i8
  %v2_b5dc = load i32, i32* %r1.global-to-local, align 4
  %v3_b5dc = inttoptr i32 %v2_b5dc to i8*
  store i8 %v1_b5dc, i8* %v3_b5dc, align 1
  %v2_b5e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b5e4 = add i32 %v2_b5e4, 1
  %v4_b5e4 = inttoptr i32 %v3_b5e4 to i8*
  store i8 %v5_b380, i8* %v4_b5e4, align 1
  store i32 %v6_b39c, i32* %ip.global-to-local, align 4
  %v2_b5ec = load i32, i32* %r1.global-to-local, align 4
  %v3_b5ec = add i32 %v2_b5ec, 8
  %v4_b5ec = inttoptr i32 %v3_b5ec to i8*
  store i8 %v5_b3b8, i8* %v4_b5ec, align 1
  %v3_b5f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5f0, i32* %r2.global-to-local, align 4
  %v3_b5f4 = mul i32 %v3_b5f0, 32
  store i32 %v3_b5f4, i32* %r3.global-to-local, align 4
  %v0_b5f8 = load i32, i32* @fp, align 4
  %v1_b5f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b5f8 = add i32 %v1_b5f8, 12
  %v3_b5f8 = inttoptr i32 %v2_b5f8 to i32*
  store i32 %v0_b5f8, i32* %v3_b5f8, align 4
  %v0_b5fc = load i32, i32* %r3.global-to-local, align 4
  %v1_b5fc = load i32, i32* %r2.global-to-local, align 4
  %tmp66 = mul i32 %v1_b5fc, -8
  %v5_b5fc = add i32 %v0_b5fc, %tmp66
  %v1_b600 = load i32, i32* @r8, align 4
  %v2_b600 = add i32 %v5_b5fc, %v1_b600
  store i32 %v2_b600, i32* %r3.global-to-local, align 4
  %v1_b604 = add i32 %v2_b600, 16
  %v2_b604 = inttoptr i32 %v1_b604 to i32*
  %v3_b604 = load i32, i32* %v2_b604, align 4
  %v1_b608 = add i32 %v1_b5fc, 1
  store i32 %v1_b608, i32* @r4, align 4
  store i32 %v4_b60c, i32* %ip.global-to-local, align 4
  store i32 %v1_b31c, i32* %r2.global-to-local, align 4
  %v1_b614 = load i32, i32* %r1.global-to-local, align 4
  %v2_b614 = add i32 %v1_b614, 16
  %v3_b614 = inttoptr i32 %v2_b614 to i32*
  store i32 %v3_b604, i32* %v3_b614, align 4
  store i32 %v4_b618, i32* %r0.global-to-local, align 4
  %v0_b61c = load i32, i32* %ip.global-to-local, align 4
  %v1_b61c = trunc i32 %v0_b61c to i8
  %v2_b61c = load i32, i32* %r1.global-to-local, align 4
  %v3_b61c = add i32 %v2_b61c, 2
  %v4_b61c = inttoptr i32 %v3_b61c to i8*
  store i8 %v1_b61c, i8* %v4_b61c, align 1
  %v0_b620 = load i32, i32* %r0.global-to-local, align 4
  %v1_b620 = trunc i32 %v0_b620 to i8
  %v2_b620 = load i32, i32* %r1.global-to-local, align 4
  %v3_b620 = add i32 %v2_b620, 3
  %v4_b620 = inttoptr i32 %v3_b620 to i8*
  store i8 %v1_b620, i8* %v4_b620, align 1
  store i32 %v4_b624, i32* %ip.global-to-local, align 4
  store i32 %v4_b628, i32* %r0.global-to-local, align 4
  %v0_b62c = load i32, i32* @r4, align 4
  %v1_b62c = load i32, i32* %r2.global-to-local, align 4
  %v9_b62c = icmp eq i32 %v0_b62c, %v1_b62c
  store i1 %v9_b62c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b630, i32* %r2.global-to-local, align 4
  %v0_b634 = load i32, i32* %r1.global-to-local, align 4
  %v1_b634 = add i32 %v0_b634, 20
  store i32 %v1_b634, i32* %r3.global-to-local, align 4
  %v3_b638 = add i32 %v0_b634, 4
  %v4_b638 = inttoptr i32 %v3_b638 to i8*
  store i8 %v5_b55c, i8* %v4_b638, align 1
  %v0_b63c = load i32, i32* %ip.global-to-local, align 4
  %v1_b63c = trunc i32 %v0_b63c to i8
  %v2_b63c = load i32, i32* %r1.global-to-local, align 4
  %v3_b63c = add i32 %v2_b63c, 5
  %v4_b63c = inttoptr i32 %v3_b63c to i8*
  store i8 %v1_b63c, i8* %v4_b63c, align 1
  %v0_b640 = load i32, i32* @r5, align 4
  %v1_b640 = trunc i32 %v0_b640 to i8
  %v2_b640 = load i32, i32* %r1.global-to-local, align 4
  %v3_b640 = add i32 %v2_b640, 20
  %v4_b640 = inttoptr i32 %v3_b640 to i8*
  store i8 %v1_b640, i8* %v4_b640, align 1
  %v0_b644 = load i32, i32* @r7, align 4
  %v1_b644 = trunc i32 %v0_b644 to i8
  %v2_b644 = load i32, i32* %r3.global-to-local, align 4
  %v3_b644 = add i32 %v2_b644, 5
  %v4_b644 = inttoptr i32 %v3_b644 to i8*
  store i8 %v1_b644, i8* %v4_b644, align 1
  %v0_b648 = load i32, i32* %r0.global-to-local, align 4
  %v1_b648 = trunc i32 %v0_b648 to i8
  %v2_b648 = load i32, i32* %r3.global-to-local, align 4
  %v3_b648 = add i32 %v2_b648, 1
  %v4_b648 = inttoptr i32 %v3_b648 to i8*
  store i8 %v1_b648, i8* %v4_b648, align 1
  %v0_b64c = load i32, i32* @r6, align 4
  %v1_b64c = trunc i32 %v0_b64c to i8
  %v2_b64c = load i32, i32* %r3.global-to-local, align 4
  %v3_b64c = add i32 %v2_b64c, 2
  %v4_b64c = inttoptr i32 %v3_b64c to i8*
  store i8 %v1_b64c, i8* %v4_b64c, align 1
  %v0_b650 = load i32, i32* %sl.global-to-local, align 4
  %v1_b650 = trunc i32 %v0_b650 to i8
  %v2_b650 = load i32, i32* %r3.global-to-local, align 4
  %v3_b650 = add i32 %v2_b650, 3
  %v4_b650 = inttoptr i32 %v3_b650 to i8*
  store i8 %v1_b650, i8* %v4_b650, align 1
  %v0_b654 = load i32, i32* %sb.global-to-local, align 4
  %v1_b654 = trunc i32 %v0_b654 to i8
  %v2_b654 = load i32, i32* %r3.global-to-local, align 4
  %v3_b654 = add i32 %v2_b654, 4
  %v4_b654 = inttoptr i32 %v3_b654 to i8*
  store i8 %v1_b654, i8* %v4_b654, align 1
  %v0_b658 = load i32, i32* @r4, align 4
  store i32 %v0_b658, i32* %stack_var_-40, align 4
  %v5_b65c = icmp slt i32 %v0_b62c, %v1_b62c
  br i1 %v5_b65c, label %dec_label_pc_b594, label %dec_label_pc_b660.preheader

dec_label_pc_b660.preheader:                      ; preds = %dec_label_pc_b8e0, %dec_label_pc_b594, %.dec_label_pc_b660.preheader_crit_edge
  %v1_b684.pre-phi = phi i32 [ %.pre19, %.dec_label_pc_b660.preheader_crit_edge ], [ %v1_b508, %dec_label_pc_b594 ], [ %v1_b508, %dec_label_pc_b8e0 ]
  %v1_b680.pre-phi = phi i32 [ %.pre, %.dec_label_pc_b660.preheader_crit_edge ], [ %v1_b50c, %dec_label_pc_b594 ], [ %v1_b50c, %dec_label_pc_b8e0 ]
  %v3_b810 = icmp eq i32 %v3_b4e0, 65535
  %v2_b6c4 = icmp eq i32 %v1_b43c, 0
  br label %dec_label_pc_b660

dec_label_pc_b660:                                ; preds = %dec_label_pc_b660.preheader, %dec_label_pc_b88c
  store i32 %v1_b31c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b4ec, label %dec_label_pc_b88c, label %dec_label_pc_b674

dec_label_pc_b674:                                ; preds = %dec_label_pc_b660
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c4, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %v1_b680.pre-phi, i32* @sb, align 4
  store i32 %v1_b684.pre-phi, i32* @sl, align 4
  br label %dec_label_pc_b778

dec_label_pc_b68c:                                ; preds = %dec_label_pc_b778
  %v0_b68c = load i32, i32* @fp, align 4
  %v7_b68c = icmp eq i32 %v0_b68c, -1
  store i1 %v7_b68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b68c, label %dec_label_pc_b800, label %dec_label_pc_b694

dec_label_pc_b694:                                ; preds = %dec_label_pc_b79c, %dec_label_pc_b68c
  store i32 %v3_b4e0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b810, label %dec_label_pc_b81c, label %dec_label_pc_b6a8

dec_label_pc_b6a8:                                ; preds = %dec_label_pc_b800.dec_label_pc_b6a8_crit_edge, %dec_label_pc_b694
  %v1_b6ac = phi i32 [ %v1_b6ac.pre, %dec_label_pc_b800.dec_label_pc_b6a8_crit_edge ], [ 65535, %dec_label_pc_b694 ]
  store i32 %v3_b4e4, i32* %r0.global-to-local, align 4
  %v9_b6ac = icmp eq i32 %v3_b4e4, %v1_b6ac
  store i1 %v9_b6ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b6ac, label %dec_label_pc_b838, label %dec_label_pc_b6b4

dec_label_pc_b6b4:                                ; preds = %dec_label_pc_b81c.dec_label_pc_b6b4_crit_edge, %dec_label_pc_b6a8
  %v1_b6b8 = phi i32 [ %v1_b6b8.pre, %dec_label_pc_b81c.dec_label_pc_b6b4_crit_edge ], [ %v1_b6ac, %dec_label_pc_b6a8 ]
  store i32 %v3_b4e8, i32* %r1.global-to-local, align 4
  %v9_b6b8 = icmp eq i32 %v3_b4e8, %v1_b6b8
  store i1 %v9_b6b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b6b8, label %dec_label_pc_b854, label %dec_label_pc_b6c0

dec_label_pc_b6c0:                                ; preds = %dec_label_pc_b838, %dec_label_pc_b6b4
  store i32 %v1_b43c, i32* %r2.global-to-local, align 4
  store i1 %v2_b6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b6c4, label %dec_label_pc_b6cc, label %dec_label_pc_b870

dec_label_pc_b6cc:                                ; preds = %dec_label_pc_b6c0, %dec_label_pc_b854, %dec_label_pc_b870
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b6d0 = load i32, i32* @r7, align 4
  %v1_b6d0 = trunc i32 %v0_b6d0 to i8
  %v2_b6d0 = load i32, i32* @r5, align 4
  %v3_b6d0 = add i32 %v2_b6d0, 10
  %v4_b6d0 = inttoptr i32 %v3_b6d0 to i8*
  store i8 %v1_b6d0, i8* %v4_b6d0, align 1
  %v0_b6d4 = load i32, i32* @r7, align 4
  %v1_b6d4 = trunc i32 %v0_b6d4 to i8
  %v2_b6d4 = load i32, i32* @r5, align 4
  %v3_b6d4 = add i32 %v2_b6d4, 11
  %v4_b6d4 = inttoptr i32 %v3_b6d4 to i8*
  store i8 %v1_b6d4, i8* %v4_b6d4, align 1
  %v0_b6d8 = load i32, i32* @r5, align 4
  store i32 %v0_b6d8, i32* @r0, align 4
  %v2_b6dc = call i32 @function_c690(i32 %v0_b6d8, i32 20)
  %v3_b6dc = trunc i32 %v2_b6dc to i8
  store i32 %v2_b6dc, i32* %r0.global-to-local, align 4
  %v4_b6e0 = sdiv i32 %v2_b6dc, 256
  store i32 %v4_b6e0, i32* %r3.global-to-local, align 4
  %v1_b6e4 = trunc i32 %v4_b6e0 to i8
  %v2_b6e4 = load i32, i32* @r5, align 4
  %v3_b6e4 = add i32 %v2_b6e4, 11
  %v4_b6e4 = inttoptr i32 %v3_b6e4 to i8*
  store i8 %v1_b6e4, i8* %v4_b6e4, align 1
  %v3_b6e8 = load i32, i32* @r5, align 4
  %v4_b6e8 = add i32 %v3_b6e8, 10
  %v5_b6e8 = inttoptr i32 %v4_b6e8 to i8*
  store i8 %v3_b6dc, i8* %v5_b6e8, align 1
  %v0_b6ec = load i32, i32* @r7, align 4
  %v1_b6ec = trunc i32 %v0_b6ec to i8
  %v2_b6ec = load i32, i32* @r6, align 4
  %v3_b6ec = add i32 %v2_b6ec, 6
  %v4_b6ec = inttoptr i32 %v3_b6ec to i8*
  store i8 %v1_b6ec, i8* %v4_b6ec, align 1
  %v0_b6f0 = load i32, i32* @r7, align 4
  %v1_b6f0 = trunc i32 %v0_b6f0 to i8
  %v2_b6f0 = load i32, i32* @r6, align 4
  %v3_b6f0 = add i32 %v2_b6f0, 7
  %v4_b6f0 = inttoptr i32 %v3_b6f0 to i8*
  store i8 %v1_b6f0, i8* %v4_b6f0, align 1
  %v0_b6f4 = load i32, i32* @r5, align 4
  %v1_b6f4 = add i32 %v0_b6f4, 24
  %v2_b6f4 = inttoptr i32 %v1_b6f4 to i8*
  %v3_b6f4 = load i8, i8* %v2_b6f4, align 1
  %v4_b6f4 = zext i8 %v3_b6f4 to i32
  store i32 %v4_b6f4, i32* %r3.global-to-local, align 4
  %v1_b6f8 = add i32 %v0_b6f4, 25
  %v2_b6f8 = inttoptr i32 %v1_b6f8 to i8*
  %v3_b6f8 = load i8, i8* %v2_b6f8, align 1
  %v4_b6f8 = zext i8 %v3_b6f8 to i32
  %v0_b6fc = load i32, i32* @r6, align 4
  store i32 %v0_b6fc, i32* @r1, align 4
  %v4_b700 = mul nuw nsw i32 %v4_b6f8, 256
  %v5_b700 = or i32 %v4_b700, %v4_b6f4
  store i32 %v5_b700, i32* %r2.global-to-local, align 4
  store i32 %v0_b6f4, i32* %r0.global-to-local, align 4
  %v0_b708 = load i32, i32* @sb, align 4
  store i32 %v0_b708, i32* %r3.global-to-local, align 4
  %v4_b70c = call i32 @function_c6ec(i32 %v0_b6f4, i32 %v0_b6fc, i32 %v5_b700, i32 %v0_b708)
  %v5_b70c = trunc i32 %v4_b70c to i8
  store i32 %v4_b70c, i32* %r0.global-to-local, align 4
  %v4_b71024 = udiv i32 %v4_b70c, 256
  %v1_b714 = trunc i32 %v4_b71024 to i8
  %v2_b714 = load i32, i32* @r6, align 4
  %v3_b714 = add i32 %v2_b714, 7
  %v4_b714 = inttoptr i32 %v3_b714 to i8*
  store i8 %v1_b714, i8* %v4_b714, align 1
  %v3_b718 = load i32, i32* @r6, align 4
  %v4_b718 = add i32 %v3_b718, 6
  %v5_b718 = inttoptr i32 %v4_b718 to i8*
  store i8 %v5_b70c, i8* %v5_b718, align 1
  %v3_b71c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b71c, i32* %r3.global-to-local, align 4
  %v0_b720 = load i32, i32* @r5, align 4
  %v1_b720 = add i32 %v0_b720, 20
  %v2_b720 = inttoptr i32 %v1_b720 to i32*
  %v3_b720 = load i32, i32* %v2_b720, align 4
  %v3_b728 = udiv i32 %v3_b720, 65536
  store i32 %v3_b728, i32* %r2.global-to-local, align 4
  %v5_b72c = mul i32 %v3_b71c, 24
  %v1_b730 = load i32, i32* @r8, align 4
  %v2_b730 = add i32 %v1_b730, %v5_b72c
  store i32 %v2_b730, i32* %ip.global-to-local, align 4
  %v3_b73421 = udiv i32 %v3_b720, 16777216
  %v1_b738 = trunc i32 %v3_b73421 to i8
  %v3_b738 = add i32 %v2_b730, 3
  %v4_b738 = inttoptr i32 %v3_b738 to i8*
  store i8 %v1_b738, i8* %v4_b738, align 1
  %v0_b73c = load i32, i32* %r2.global-to-local, align 4
  %v1_b73c = trunc i32 %v0_b73c to i8
  %v2_b73c = load i32, i32* %ip.global-to-local, align 4
  %v3_b73c = add i32 %v2_b73c, 2
  %v4_b73c = inttoptr i32 %v3_b73c to i8*
  store i8 %v1_b73c, i8* %v4_b73c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b748 = load i32, i32* @r5, align 4
  store i32 %v0_b748, i32* %r1.global-to-local, align 4
  store i32 %v3_b474, i32* %r0.global-to-local, align 4
  %v0_b750 = load i32, i32* @sl, align 4
  store i32 %v0_b750, i32* %r2.global-to-local, align 4
  %v0_b758 = load i32, i32* %ip.global-to-local, align 4
  %v6_b75c = inttoptr i32 %v0_b748 to i32*
  %v7_b75c = call i32 @function_10b78(i32 %v3_b474, i32* %v6_b75c, i32 %v0_b750, i32 16384, i32 %v0_b758, i32 16)
  %v3_b760 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b760, i32* %r3.global-to-local, align 4
  store i32 %v1_b31c, i32* @r4, align 4
  %v1_b768 = add i32 %v3_b760, 1
  store i32 %v1_b768, i32* %r0.global-to-local, align 4
  %v9_b76c = icmp eq i32 %v1_b768, %v1_b31c
  store i1 %v9_b76c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b768, i32* %stack_var_-40, align 4
  %v6_b774 = icmp slt i32 %v1_b768, %v1_b31c
  br i1 %v6_b774, label %dec_label_pc_b778, label %dec_label_pc_b88c

dec_label_pc_b778:                                ; preds = %dec_label_pc_b6cc, %dec_label_pc_b674
  %v1_b78c = phi i32 [ %v1_b768, %dec_label_pc_b6cc ], [ 0, %dec_label_pc_b674 ]
  %v5_b77c = mul i32 %v1_b78c, 24
  %v1_b780 = load i32, i32* @r8, align 4
  %v2_b780 = add i32 %v1_b780, %v5_b77c
  store i32 %v2_b780, i32* %r3.global-to-local, align 4
  %v1_b788 = add i32 %v2_b780, 20
  %v2_b788 = inttoptr i32 %v1_b788 to i8*
  %v3_b788 = load i8, i8* %v2_b788, align 1
  %v4_b788 = zext i8 %v3_b788 to i32
  store i32 %v4_b788, i32* %r2.global-to-local, align 4
  %v4_b78c = mul i32 %v1_b78c, 4
  %v5_b78c = add i32 %v4_b78c, %v2_b348
  %v6_b78c = inttoptr i32 %v5_b78c to i32*
  %v7_b78c = load i32, i32* %v6_b78c, align 4
  store i32 %v7_b78c, i32* @r5, align 4
  %v2_b790 = icmp ugt i8 %v3_b788, 30
  %v7_b790 = icmp eq i8 %v3_b788, 31
  store i1 %v7_b790, i1* %cpsr_z.global-to-local, align 1
  %v1_b794 = add i32 %v7_b78c, 20
  store i32 %v1_b794, i32* @r6, align 4
  %v2_b798 = xor i1 %v7_b790, true
  %v3_b798 = and i1 %v2_b790, %v2_b798
  br i1 %v3_b798, label %dec_label_pc_b68c, label %dec_label_pc_b79c

dec_label_pc_b79c:                                ; preds = %dec_label_pc_b778
  %v1_b79c = add i32 %v2_b780, 16
  %v2_b79c = inttoptr i32 %v1_b79c to i32*
  %v3_b79c = load i32, i32* %v2_b79c, align 4
  %v0_b7a0 = call i32 @function_d208()
  store i32 %v0_b7a0, i32* %r0.global-to-local, align 4
  %v3_b7a4 = load i32, i32* %stack_var_-40, align 4
  %v5_b7ac = mul i32 %v3_b7a4, 24
  %v1_b7b4 = load i32, i32* @r8, align 4
  %v2_b7b4 = add i32 %v1_b7b4, %v5_b7ac
  store i32 %v2_b7b4, i32* %r1.global-to-local, align 4
  %v1_b7b8 = and i32 %v3_b79c, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_b7b8, i32* %r3.global-to-local, align 4
  %v1_b7b0 = udiv i32 %v3_b79c, 256
  %v3_b7bc = and i32 %v1_b7b0, 65280
  store i32 %v3_b7bc, i32* %r2.global-to-local, align 4
  %v3_b7c0 = mul i32 %v3_b79c, 16777216
  store i32 %v3_b7c0, i32* %ip.global-to-local, align 4
  %v1_b7c4 = add i32 %v2_b7b4, 20
  %v2_b7c4 = inttoptr i32 %v1_b7c4 to i8*
  %v3_b7c4 = load i8, i8* %v2_b7c4, align 1
  %v4_b7c4 = zext i8 %v3_b7c4 to i32
  %v4_b7c8 = mul i32 %v1_b7b8, 256
  %v5_b7c8 = or i32 %v4_b7c8, %v3_b7c0
  store i32 %v5_b7c8, i32* %ip.global-to-local, align 4
  %v4_b7cc = udiv i32 %v3_b79c, 16777216
  %v5_b7cc = or i32 %v3_b7bc, %v4_b7cc
  %v2_b7d0 = or i32 %v5_b7cc, %v5_b7c8
  %v7_b7d4 = lshr i32 %v0_b7a0, %v4_b7c4
  %v8_b7d4 = add i32 %v7_b7d4, %v2_b7d0
  store i32 %v8_b7d4, i32* %r2.global-to-local, align 4
  %v3_b7e0 = mul i32 %v8_b7d4, 16777216
  %v1_b7e4 = and i32 %v8_b7d4, 65280
  store i32 %v1_b7e4, i32* %r0.global-to-local, align 4
  %v4_b7e8 = mul nuw nsw i32 %v1_b7e4, 256
  %v5_b7e8 = or i32 %v4_b7e8, %v3_b7e0
  store i32 %v5_b7e8, i32* %r1.global-to-local, align 4
  %v2_b7f0 = call i32 @llvm.bswap.i32(i32 %v8_b7d4)
  store i32 %v2_b7f0, i32* %r3.global-to-local, align 4
  %v0_b7f4 = load i32, i32* @fp, align 4
  %v3_b7f4 = icmp eq i32 %v0_b7f4, -1
  %v8_b7f4 = icmp eq i32 %v0_b7f4, -1
  store i1 %v8_b7f4, i1* %cpsr_z.global-to-local, align 1
  %v1_b7f8 = load i32, i32* @r5, align 4
  %v2_b7f8 = add i32 %v1_b7f8, 16
  %v3_b7f8 = inttoptr i32 %v2_b7f8 to i32*
  store i32 %v2_b7f0, i32* %v3_b7f8, align 4
  br i1 %v3_b7f4, label %dec_label_pc_b800, label %dec_label_pc_b694

dec_label_pc_b800:                                ; preds = %dec_label_pc_b79c, %dec_label_pc_b68c
  %v0_b800 = call i32 @function_d208()
  store i32 %v0_b800, i32* %r0.global-to-local, align 4
  store i32 %v3_b4e0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b810, i1* %cpsr_z.global-to-local, align 1
  %v1_b814 = load i32, i32* @r5, align 4
  %v2_b814 = add i32 %v1_b814, 12
  %v3_b814 = inttoptr i32 %v2_b814 to i32*
  store i32 %v0_b800, i32* %v3_b814, align 4
  br i1 %v3_b810, label %dec_label_pc_b81c, label %dec_label_pc_b800.dec_label_pc_b6a8_crit_edge

dec_label_pc_b800.dec_label_pc_b6a8_crit_edge:    ; preds = %dec_label_pc_b800
  %v1_b6ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b6a8

dec_label_pc_b81c:                                ; preds = %dec_label_pc_b800, %dec_label_pc_b694
  %v0_b81c = call i32 @function_d208()
  %v1_b81c = trunc i32 %v0_b81c to i8
  %v4_b820 = sdiv i32 %v0_b81c, 256
  store i32 %v4_b820, i32* %r3.global-to-local, align 4
  %v3_b824 = load i32, i32* @r5, align 4
  %v4_b824 = add i32 %v3_b824, 4
  %v5_b824 = inttoptr i32 %v4_b824 to i8*
  store i8 %v1_b81c, i8* %v5_b824, align 1
  store i32 %v3_b4e4, i32* %r0.global-to-local, align 4
  %v1_b82c = load i32, i32* @r4, align 4
  %v9_b82c = icmp eq i32 %v3_b4e4, %v1_b82c
  store i1 %v9_b82c, i1* %cpsr_z.global-to-local, align 1
  %v0_b830 = load i32, i32* %r3.global-to-local, align 4
  %v1_b830 = trunc i32 %v0_b830 to i8
  %v2_b830 = load i32, i32* @r5, align 4
  %v3_b830 = add i32 %v2_b830, 5
  %v4_b830 = inttoptr i32 %v3_b830 to i8*
  store i8 %v1_b830, i8* %v4_b830, align 1
  %v0_b834 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b834, label %dec_label_pc_b838, label %dec_label_pc_b81c.dec_label_pc_b6b4_crit_edge

dec_label_pc_b81c.dec_label_pc_b6b4_crit_edge:    ; preds = %dec_label_pc_b81c
  %v1_b6b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b6b4

dec_label_pc_b838:                                ; preds = %dec_label_pc_b81c, %dec_label_pc_b6a8
  %v0_b838 = call i32 @function_d208()
  %v1_b838 = trunc i32 %v0_b838 to i8
  store i32 %v0_b838, i32* %r0.global-to-local, align 4
  store i32 %v3_b4e8, i32* %r1.global-to-local, align 4
  %v4_b840 = sdiv i32 %v0_b838, 256
  store i32 %v4_b840, i32* %r3.global-to-local, align 4
  %v1_b844 = load i32, i32* @r4, align 4
  %v9_b844 = icmp eq i32 %v3_b4e8, %v1_b844
  store i1 %v9_b844, i1* %cpsr_z.global-to-local, align 1
  %v3_b848 = load i32, i32* @r5, align 4
  %v4_b848 = add i32 %v3_b848, 20
  %v5_b848 = inttoptr i32 %v4_b848 to i8*
  store i8 %v1_b838, i8* %v5_b848, align 1
  %v0_b84c = load i32, i32* %r3.global-to-local, align 4
  %v1_b84c = trunc i32 %v0_b84c to i8
  %v2_b84c = load i32, i32* @r6, align 4
  %v3_b84c = add i32 %v2_b84c, 1
  %v4_b84c = inttoptr i32 %v3_b84c to i8*
  store i8 %v1_b84c, i8* %v4_b84c, align 1
  %v0_b850 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b850, label %dec_label_pc_b854, label %dec_label_pc_b6c0

dec_label_pc_b854:                                ; preds = %dec_label_pc_b838, %dec_label_pc_b6b4
  %v0_b854 = call i32 @function_d208()
  %v1_b854 = trunc i32 %v0_b854 to i8
  store i32 %v0_b854, i32* %r0.global-to-local, align 4
  store i32 %v1_b43c, i32* %r2.global-to-local, align 4
  %v4_b85c = sdiv i32 %v0_b854, 256
  store i32 %v4_b85c, i32* %r3.global-to-local, align 4
  store i1 %v2_b6c4, i1* %cpsr_z.global-to-local, align 1
  %v1_b864 = trunc i32 %v4_b85c to i8
  %v2_b864 = load i32, i32* @r6, align 4
  %v3_b864 = add i32 %v2_b864, 3
  %v4_b864 = inttoptr i32 %v3_b864 to i8*
  store i8 %v1_b864, i8* %v4_b864, align 1
  %v3_b868 = load i32, i32* @r6, align 4
  %v4_b868 = add i32 %v3_b868, 2
  %v5_b868 = inttoptr i32 %v4_b868 to i8*
  store i8 %v1_b854, i8* %v5_b868, align 1
  %v0_b86c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b86c, label %dec_label_pc_b6cc, label %dec_label_pc_b870

dec_label_pc_b870:                                ; preds = %dec_label_pc_b6c0, %dec_label_pc_b854
  %v0_b870 = load i32, i32* @r5, align 4
  %v1_b870 = add i32 %v0_b870, 28
  store i32 %v1_b870, i32* @r4, align 4
  store i32 %v1_b870, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c4, i32* %r1.global-to-local, align 4
  %v2_b87c = call i32 @function_d2bc(i32 %v1_b870, i32 %v0_b4c4)
  store i32 %v2_b87c, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c4, i32* %r3.global-to-local, align 4
  %v0_b884 = load i32, i32* @r7, align 4
  %v1_b884 = trunc i32 %v0_b884 to i8
  %v2_b884 = load i32, i32* @r4, align 4
  %v4_b884 = add i32 %v2_b884, %v0_b4c4
  %v5_b884 = inttoptr i32 %v4_b884 to i8*
  store i8 %v1_b884, i8* %v5_b884, align 1
  br label %dec_label_pc_b6cc

dec_label_pc_b88c:                                ; preds = %dec_label_pc_b6cc, %dec_label_pc_b660
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b890 = call i32 @function_108e4(i32* null)
  store i32 %v2_b890, i32* %r0.global-to-local, align 4
  store i32 %v2_b460, i32* %sb.global-to-local, align 4
  %v9_b898 = icmp eq i32 %v2_b460, %v2_b890
  store i1 %v9_b898, i1* %cpsr_z.global-to-local, align 1
  %v6_b89c = icmp slt i32 %v2_b460, %v2_b890
  br i1 %v6_b89c, label %dec_label_pc_b8a0, label %dec_label_pc_b660

dec_label_pc_b8a0:                                ; preds = %dec_label_pc_b88c, %dec_label_pc_b318, %dec_label_pc_b8a8
  %v29_b8a4 = phi i32 [ %v3_b474, %dec_label_pc_b318 ], [ %v1_b8ac, %dec_label_pc_b8a8 ], [ %v2_b890, %dec_label_pc_b88c ]
  store i32 %v18_b318, i32* %sb.global-to-local, align 4
  store i32 %v21_b318, i32* %sl.global-to-local, align 4
  ret i32 %v29_b8a4

dec_label_pc_b8a8:                                ; preds = %dec_label_pc_b484
  store i32 %v3_b474, i32* %r0.global-to-local, align 4
  %v1_b8ac = call i32 @function_10640(i32 %v3_b474)
  store i32 %v1_b8ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8a0

dec_label_pc_b8b4:                                ; preds = %dec_label_pc_b504
  %v3_b8b8 = sext i8 %v5_b558 to i32
  %v7_b8b8 = sext i8 %v5_b55c to i32
  %v3_b8bc = sdiv i32 %v3_b8b8, 256
  store i32 %v3_b8bc, i32* %r1.global-to-local, align 4
  %v3_b8c0 = sdiv i32 %v7_b8b8, 256
  store i32 %v3_b8c0, i32* %r2.global-to-local, align 4
  store i32 %v1_b510, i32* %r3.global-to-local, align 4
  store i32 %v0_b4f0, i32* @r4, align 4
  store i32 %v1_b554, i32* %sl.global-to-local, align 4
  %v3_b8dc20 = udiv i32 %v1_b548, 256
  store i32 %v3_b8dc20, i32* @r7, align 4
  %sext9 = mul i32 %v6_b3e0, 16777216
  %v4_b998 = sdiv i32 %sext9, 16777216
  %v1_b988 = trunc i32 %v3_b8bc to i8
  br label %dec_label_pc_b8e0

dec_label_pc_b8e0:                                ; preds = %dec_label_pc_b8e0, %dec_label_pc_b8b4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b8ec = call i32 @function_10ec8(i32 1510, i32 1)
  store i32 %v2_b8ec, i32* %r0.global-to-local, align 4
  store i32 %v2_b348, i32* %ip.global-to-local, align 4
  %v3_b8f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b8f4, i32* %r2.global-to-local, align 4
  %v2_b8f8 = load i32, i32* @r4, align 4
  %v5_b8f8 = mul i32 %v2_b8f8, 4
  %v6_b8f8 = add i32 %v5_b8f8, %v2_b348
  %v7_b8f8 = inttoptr i32 %v6_b8f8 to i32*
  store i32 %v2_b8ec, i32* %v7_b8f8, align 4
  %v0_b8fc = load i32, i32* %ip.global-to-local, align 4
  %v1_b8fc = load i32, i32* %r2.global-to-local, align 4
  %v4_b8fc = mul i32 %v1_b8fc, 4
  %v5_b8fc = add i32 %v4_b8fc, %v0_b8fc
  %v6_b8fc = inttoptr i32 %v5_b8fc to i32*
  %v7_b8fc = load i32, i32* %v6_b8fc, align 4
  store i32 %v7_b8fc, i32* %r1.global-to-local, align 4
  %v1_b900 = inttoptr i32 %v7_b8fc to i8*
  %v2_b900 = load i8, i8* %v1_b900, align 1
  %tmp67 = urem i8 %v2_b900, 16
  %v1_b904 = zext i8 %tmp67 to i32
  %v1_b908 = or i32 %v1_b904, 64
  store i32 %v1_b908, i32* %r3.global-to-local, align 4
  %v1_b90c = trunc i32 %v1_b908 to i8
  store i8 %v1_b90c, i8* %v1_b900, align 1
  %v0_b910 = load i32, i32* %r1.global-to-local, align 4
  %v1_b910 = inttoptr i32 %v0_b910 to i8*
  %v2_b910 = load i8, i8* %v1_b910, align 1
  %v3_b910 = zext i8 %v2_b910 to i32
  %v1_b914 = and i32 %v3_b910, 240
  %v1_b918 = or i32 %v1_b914, 5
  store i32 %v1_b918, i32* %r2.global-to-local, align 4
  %v3_b920 = add i32 %v0_b910, 9
  %v4_b920 = inttoptr i32 %v3_b920 to i8*
  store i8 17, i8* %v4_b920, align 1
  %v0_b924 = load i32, i32* %r2.global-to-local, align 4
  %v1_b924 = trunc i32 %v0_b924 to i8
  %v2_b924 = load i32, i32* %r1.global-to-local, align 4
  %v3_b924 = inttoptr i32 %v2_b924 to i8*
  store i8 %v1_b924, i8* %v3_b924, align 1
  store i32 %v6_b360, i32* %r0.global-to-local, align 4
  %v2_b92c = load i32, i32* %r1.global-to-local, align 4
  %v3_b92c = add i32 %v2_b92c, 1
  %v4_b92c = inttoptr i32 %v3_b92c to i8*
  store i8 %v5_b380, i8* %v4_b92c, align 1
  %v2_b934 = load i32, i32* %r1.global-to-local, align 4
  %v3_b934 = add i32 %v2_b934, 8
  %v4_b934 = inttoptr i32 %v3_b934 to i8*
  store i8 %v5_b3b8, i8* %v4_b934, align 1
  %v3_b938 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b938, i32* %r2.global-to-local, align 4
  %v3_b93c = mul i32 %v3_b938, 32
  store i32 %v3_b93c, i32* %r3.global-to-local, align 4
  %v0_b940 = load i32, i32* @fp, align 4
  %v1_b940 = load i32, i32* %r1.global-to-local, align 4
  %v2_b940 = add i32 %v1_b940, 12
  %v3_b940 = inttoptr i32 %v2_b940 to i32*
  store i32 %v0_b940, i32* %v3_b940, align 4
  %v0_b944 = load i32, i32* %r3.global-to-local, align 4
  %v1_b944 = load i32, i32* %r2.global-to-local, align 4
  %tmp68 = mul i32 %v1_b944, -8
  %v5_b944 = add i32 %v0_b944, %tmp68
  %v1_b948 = load i32, i32* @r8, align 4
  %v2_b948 = add i32 %v5_b944, %v1_b948
  store i32 %v2_b948, i32* %r3.global-to-local, align 4
  %v1_b94c = add i32 %v2_b948, 16
  %v2_b94c = inttoptr i32 %v1_b94c to i32*
  %v3_b94c = load i32, i32* %v2_b94c, align 4
  store i32 %v1_b31c, i32* %r3.global-to-local, align 4
  %v1_b954 = add i32 %v1_b944, 1
  store i32 %v1_b954, i32* @r4, align 4
  %v1_b958 = load i32, i32* %r1.global-to-local, align 4
  %v2_b958 = add i32 %v1_b958, 16
  %v3_b958 = inttoptr i32 %v2_b958 to i32*
  store i32 %v3_b94c, i32* %v3_b958, align 4
  store i32 %v3_b8b8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_b964 = load i32, i32* @r4, align 4
  %v1_b964 = load i32, i32* %r3.global-to-local, align 4
  %v9_b964 = icmp eq i32 %v0_b964, %v1_b964
  store i1 %v9_b964, i1* %cpsr_z.global-to-local, align 1
  %v2_b96c = load i32, i32* %r1.global-to-local, align 4
  %v3_b96c = add i32 %v2_b96c, 6
  %v4_b96c = inttoptr i32 %v3_b96c to i8*
  store i8 64, i8* %v4_b96c, align 1
  %v0_b970 = load i32, i32* %r2.global-to-local, align 4
  %v1_b970 = trunc i32 %v0_b970 to i8
  %v2_b970 = load i32, i32* %r1.global-to-local, align 4
  %v3_b970 = add i32 %v2_b970, 7
  %v4_b970 = inttoptr i32 %v3_b970 to i8*
  store i8 %v1_b970, i8* %v4_b970, align 1
  %v0_b974 = load i32, i32* %ip.global-to-local, align 4
  %v1_b974 = trunc i32 %v0_b974 to i8
  %v2_b974 = load i32, i32* %r1.global-to-local, align 4
  %v3_b974 = add i32 %v2_b974, 2
  %v4_b974 = inttoptr i32 %v3_b974 to i8*
  store i8 %v1_b974, i8* %v4_b974, align 1
  store i32 %v3_b8bc, i32* %r2.global-to-local, align 4
  store i32 %v7_b8b8, i32* %r3.global-to-local, align 4
  store i32 %v3_b8c0, i32* %ip.global-to-local, align 4
  %v0_b984 = load i32, i32* %r1.global-to-local, align 4
  %v1_b984 = add i32 %v0_b984, 20
  store i32 %v1_b984, i32* %r0.global-to-local, align 4
  %v3_b988 = add i32 %v0_b984, 3
  %v4_b988 = inttoptr i32 %v3_b988 to i8*
  store i8 %v1_b988, i8* %v4_b988, align 1
  %v0_b98c = load i32, i32* %r3.global-to-local, align 4
  %v1_b98c = trunc i32 %v0_b98c to i8
  %v2_b98c = load i32, i32* %r1.global-to-local, align 4
  %v3_b98c = add i32 %v2_b98c, 4
  %v4_b98c = inttoptr i32 %v3_b98c to i8*
  store i8 %v1_b98c, i8* %v4_b98c, align 1
  %v0_b990 = load i32, i32* %ip.global-to-local, align 4
  %v1_b990 = trunc i32 %v0_b990 to i8
  %v2_b990 = load i32, i32* %r1.global-to-local, align 4
  %v3_b990 = add i32 %v2_b990, 5
  %v4_b990 = inttoptr i32 %v3_b990 to i8*
  store i8 %v1_b990, i8* %v4_b990, align 1
  %v0_b994 = load i32, i32* @r5, align 4
  %v1_b994 = trunc i32 %v0_b994 to i8
  %v2_b994 = load i32, i32* %r1.global-to-local, align 4
  %v3_b994 = add i32 %v2_b994, 20
  %v4_b994 = inttoptr i32 %v3_b994 to i8*
  store i8 %v1_b994, i8* %v4_b994, align 1
  store i32 %v4_b998, i32* %r1.global-to-local, align 4
  %v0_b99c = load i32, i32* @r7, align 4
  %v1_b99c = trunc i32 %v0_b99c to i8
  %v2_b99c = load i32, i32* %r0.global-to-local, align 4
  %v3_b99c = add i32 %v2_b99c, 5
  %v4_b99c = inttoptr i32 %v3_b99c to i8*
  store i8 %v1_b99c, i8* %v4_b99c, align 1
  %v0_b9a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b9a0 = trunc i32 %v0_b9a0 to i8
  %v2_b9a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a0 = add i32 %v2_b9a0, 1
  %v4_b9a0 = inttoptr i32 %v3_b9a0 to i8*
  store i8 %v1_b9a0, i8* %v4_b9a0, align 1
  %v0_b9a4 = load i32, i32* @r6, align 4
  %v1_b9a4 = trunc i32 %v0_b9a4 to i8
  %v2_b9a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a4 = add i32 %v2_b9a4, 2
  %v4_b9a4 = inttoptr i32 %v3_b9a4 to i8*
  store i8 %v1_b9a4, i8* %v4_b9a4, align 1
  %v0_b9a8 = load i32, i32* %sl.global-to-local, align 4
  %v1_b9a8 = trunc i32 %v0_b9a8 to i8
  %v2_b9a8 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a8 = add i32 %v2_b9a8, 3
  %v4_b9a8 = inttoptr i32 %v3_b9a8 to i8*
  store i8 %v1_b9a8, i8* %v4_b9a8, align 1
  %v0_b9ac = load i32, i32* %sb.global-to-local, align 4
  %v1_b9ac = trunc i32 %v0_b9ac to i8
  %v2_b9ac = load i32, i32* %r0.global-to-local, align 4
  %v3_b9ac = add i32 %v2_b9ac, 4
  %v4_b9ac = inttoptr i32 %v3_b9ac to i8*
  store i8 %v1_b9ac, i8* %v4_b9ac, align 1
  %v0_b9b0 = load i32, i32* @r4, align 4
  store i32 %v0_b9b0, i32* %stack_var_-40, align 4
  %v5_b9b4 = icmp slt i32 %v0_b964, %v1_b964
  br i1 %v5_b9b4, label %dec_label_pc_b8e0, label %dec_label_pc_b660.preheader

; uselistorder directives
  uselistorder i32 %v1_b944, { 1, 0 }
  uselistorder i32 %v3_b8c0, { 1, 0 }
  uselistorder i32 %v3_b8bc, { 2, 1, 0 }
  uselistorder i32 %v7_b8b8, { 1, 0 }
  uselistorder i32 %v3_b8b8, { 1, 0 }
  uselistorder i32 %v1_b8ac, { 1, 0 }
  uselistorder i32 %v4_b85c, { 1, 0 }
  uselistorder i32 %v0_b854, { 0, 2, 1 }
  uselistorder i32 %v0_b838, { 0, 2, 1 }
  uselistorder i32 %v2_b7f0, { 1, 0 }
  uselistorder i32 %v8_b7d4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b7c0, { 1, 0 }
  uselistorder i32 %v3_b79c, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b768, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_b70c, { 0, 2, 1 }
  uselistorder i32 %v0_b6f4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_b6e0, { 1, 0 }
  uselistorder i32 %v2_b6dc, { 0, 2, 1 }
  uselistorder i1 %v7_b68c, { 1, 0 }
  uselistorder i1 %v3_b810, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b5fc, { 1, 0 }
  uselistorder i8 %v5_b55c, { 0, 2, 1 }
  uselistorder i8 %v5_b558, { 1, 0 }
  uselistorder i32 %v1_b554, { 1, 2, 0 }
  uselistorder i32 %v3_b540, { 1, 0 }
  uselistorder i32 %v1_b52c, { 1, 0 }
  uselistorder i32 %v1_b510, { 1, 2, 0 }
  uselistorder i32 %v1_b50c, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_b508, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b4ec, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b4e0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b4d4, { 1, 0, 2 }
  uselistorder i32 %v0_b4c4, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_b4b8, { 3, 1, 2, 0 }
  uselistorder i1 %v7_b4a4, { 1, 0 }
  uselistorder i1 %v7_b478, { 1, 0 }
  uselistorder i32 %v3_b474, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_b460, { 2, 1, 0 }
  uselistorder i32 %v1_b43c, { 3, 1, 2, 4, 0 }
  uselistorder i32 %v6_b3e0, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 %v1_b3c8, { 2, 1, 0 }
  uselistorder i32 %v6_b39c, { 2, 1, 3, 0 }
  uselistorder i32 %v7_b384, { 0, 2, 1, 4, 3, 5, 6 }
  uselistorder i32 %v6_b360, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b348, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v1_b31c, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 51, 50, 53, 52, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 11, 10, 13, 12, 15, 14, 17, 18, 16, 20, 19, 22, 21, 23, 25, 24, 32, 26, 27, 28, 29, 30, 31, 37, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 240, { 1, 0 }
  uselistorder i32 512, { 0, 5, 4, 6, 1, 7, 2, 8, 3, 9 }
  uselistorder label %dec_label_pc_b8a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b870, { 1, 0 }
  uselistorder label %dec_label_pc_b6cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b660, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
}

define i32 @function_b9c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b9c0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b9c0 = load i32, i32* @r4, align 4
  %v12_b9c0 = load i32, i32* @r7, align 4
  %v15_b9c0 = load i32, i32* @r8, align 4
  %v1_b9c4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_b9e0 = urem i32 %arg4, 256
  store i32 %v1_b9e0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b9f0 = call i32 @function_10ec8(i32 %v1_b9c4, i32 4)
  %v0_b9f4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b9fc = load i32, i32* @r7, align 4
  store i32 %v0_b9fc, i32* %r3.global-to-local, align 4
  store i32 %v2_b9f0, i32* %fp.global-to-local, align 4
  %v0_ba04 = load i32, i32* @r4, align 4
  %v5_ba08 = inttoptr i32 %v0_b9f4 to i32*
  %v6_ba08 = call i32 @function_829c(i32 %v0_ba04, i32* %v5_ba08, i32 2, i32 %v0_b9fc, i32 ptrtoint (i32* @0 to i32))
  %v1_ba14 = urem i32 %v6_ba08, 256
  store i32 %v1_ba14, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ba20 = load i32, i32* @r4, align 4
  %v0_ba24 = load i32, i32* @r5, align 4
  %v5_ba28 = trunc i32 %v6_ba08 to i8
  %v6_ba2c = inttoptr i32 %v0_ba24 to i32*
  %v7_ba2c = call i32 @function_829c(i32 %v0_ba20, i32* %v6_ba2c, i32 3, i32 65535, i32 %v6_ba08)
  %v0_ba30 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ba3c = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_ba44 = inttoptr i32 %v0_ba30 to i32*
  %v6_ba44 = call i32 @function_829c(i32 %v0_ba3c, i32* %v5_ba44, i32 4, i32 64, i32 %v7_ba2c)
  %v1_ba4c = urem i32 %v6_ba44, 256
  store i32 %v1_ba4c, i32* %ip.global-to-local, align 4
  %v0_ba50 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_ba58 = load i32, i32* @r7, align 4
  store i32 %v0_ba58, i32* %r3.global-to-local, align 4
  %v0_ba5c = load i32, i32* @r4, align 4
  %sext8 = mul i32 %v6_ba44, 16777216
  %v5_ba64 = sdiv i32 %sext8, 16777216
  %v6_ba64 = inttoptr i32 %v0_ba50 to i32*
  %v7_ba64 = call i32 @function_829c(i32 %v0_ba5c, i32* %v6_ba64, i32 5, i32 %v0_ba58, i32 %v5_ba64)
  %v1_ba70 = urem i32 %v7_ba64, 256
  store i32 %v1_ba70, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ba7c = load i32, i32* @r4, align 4
  %v0_ba80 = load i32, i32* @r5, align 4
  %v5_ba88 = inttoptr i32 %v0_ba80 to i32*
  %v6_ba88 = call i32 @function_829c(i32 %v0_ba7c, i32* %v5_ba88, i32 6, i32 65535, i32 %v1_ba70)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ba98 = load i32, i32* @r5, align 4
  store i32 %v6_ba88, i32* @r8, align 4
  %v0_baa0 = load i32, i32* @r4, align 4
  %v5_baa4 = inttoptr i32 %v0_ba98 to i32*
  %v6_baa4 = call i32 @function_829c(i32 %v0_baa0, i32* %v5_baa4, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_baa4, i32* @r4, align 4
  %v0_baac = load i32, i32* @r7, align 4
  store i32 %v0_baac, i32* %stack_var_-44, align 4
  %v1_bab4 = inttoptr i32 %v0_baac to i32*
  %v2_bab4 = call i32 @function_108e4(i32* %v1_bab4)
  %v1_bab8 = load i32, i32* @r6, align 4
  %v2_bab8 = add i32 %v1_bab8, %v2_bab4
  %v1_bac4 = call i32 @function_fb14(i32 14)
  %v3_bad0 = call i32 @function_fa30(i32 14, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_bae4 = call i32 @function_10bdc(i32 2, i32 3, i32 17)
  %v7_bae8 = icmp eq i32 %v3_bae4, -1
  store i1 %v7_bae8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bae4, i32* %sb.global-to-local, align 4
  br i1 %v7_bae8, label %dec_label_pc_bea8, label %dec_label_pc_baf4

dec_label_pc_baf4:                                ; preds = %dec_label_pc_b9c0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bafc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bafc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_bb04 = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bb10 = call i32 @function_10bac(i32 %v3_bae4, i32 %v0_bb04, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_bb14 = icmp eq i32 %v6_bb10, -1
  store i1 %v7_bb14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb14, label %dec_label_pc_beb0, label %dec_label_pc_bb1c

dec_label_pc_bb1c:                                ; preds = %dec_label_pc_baf4
  store i32 %v1_b9c4, i32* %r2.global-to-local, align 4
  %v0_bb28 = load i32, i32* @r4, align 4
  %v3_bb28 = mul i32 %v0_bb28, 65536
  store i32 %v3_bb28, i32* @lr, align 4
  %v0_bb2c = load i32, i32* @r8, align 4
  %v3_bb2c = mul i32 %v0_bb2c, 65536
  store i32 %v3_bb2c, i32* %ip.global-to-local, align 4
  %v3_bb30 = urem i32 %v7_ba2c, 65536
  store i32 %v3_bb30, i32* %r3.global-to-local, align 4
  %v3_bb34 = urem i32 %v0_bb2c, 65536
  store i32 %v3_bb34, i32* %r4.global-to-local, align 4
  %v3_bb38 = urem i32 %v0_bb28, 65536
  %v2_bb3c = icmp eq i32 %v1_b9c4, 0
  store i1 %v2_bb3c, i1* %cpsr_z.global-to-local, align 1
  %v0_bb40 = load i32, i32* @r7, align 4
  store i32 %v0_bb40, i32* %stack_var_-40, align 4
  br i1 %v2_bb3c, label %dec_label_pc_be94.critedge, label %dec_label_pc_bb54

dec_label_pc_bb54:                                ; preds = %dec_label_pc_bb1c
  %v1_bb58 = urem i32 %v7_ba2c, 256
  %v1_bb5c = urem i32 %v0_bb28, 256
  %tmp41 = udiv i32 %v7_ba2c, 256
  %v3_bb64 = urem i32 %tmp41, 256
  %v3_bb68 = mul nuw nsw i32 %v1_bb5c, 256
  store i32 %v3_bb68, i32* %r3.global-to-local, align 4
  %v1_bb6c = urem i32 %v0_bb2c, 256
  %v4_bb70 = mul nuw nsw i32 %v1_bb58, 256
  %v5_bb70 = or i32 %v4_bb70, %v3_bb64
  store i32 %v5_bb70, i32* %r8.global-to-local, align 4
  %tmp42 = udiv i32 %v0_bb2c, 256
  %v3_bb74 = urem i32 %tmp42, 256
  store i32 %v3_bb74, i32* %ip.global-to-local, align 4
  %tmp43 = udiv i32 %v0_bb28, 256
  %v4_bb78 = urem i32 %tmp43, 256
  %v5_bb78 = or i32 %v4_bb78, %v3_bb68
  store i32 %v5_bb78, i32* @r5, align 4
  %v4_bb7c = mul nuw nsw i32 %v1_bb6c, 256
  %v5_bb7c = or i32 %v4_bb7c, %v3_bb74
  store i32 %v5_bb7c, i32* @r6, align 4
  store i32 %v1_bb5c, i32* %r2.global-to-local, align 4
  store i32 %v0_bb40, i32* @r4, align 4
  store i32 %v1_bb6c, i32* @r7, align 4
  %sext = mul i32 %v7_ba2c, 16777216
  %v4_bc14 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v0_bb28, 16777216
  %v4_bc70 = sdiv i32 %sext5, 16777216
  %v2_bbfc = icmp eq i32 %v1_ba70, 0
  %v1_bc00 = trunc i32 %v5_ba64 to i8
  br label %dec_label_pc_bb98

dec_label_pc_bb98:                                ; preds = %bb47, %dec_label_pc_bb54
  %v2_bba0 = call i32 @function_10ec8(i32 128, i32 1)
  %v3_bba4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bba4, i32* %r3.global-to-local, align 4
  %v1_bba8 = load i32, i32* %fp.global-to-local, align 4
  %v2_bba8 = load i32, i32* @r4, align 4
  %v5_bba8 = mul i32 %v2_bba8, 4
  %v6_bba8 = add i32 %v5_bba8, %v1_bba8
  %v7_bba8 = inttoptr i32 %v6_bba8 to i32*
  store i32 %v2_bba0, i32* %v7_bba8, align 4
  %v0_bbac = load i32, i32* %fp.global-to-local, align 4
  %v1_bbac = load i32, i32* %r3.global-to-local, align 4
  %v4_bbac = mul i32 %v1_bbac, 4
  %v5_bbac = add i32 %v4_bbac, %v0_bbac
  %v6_bbac = inttoptr i32 %v5_bbac to i32*
  %v7_bbac = load i32, i32* %v6_bbac, align 4
  store i32 %v7_bbac, i32* @lr, align 4
  %v1_bbb0 = inttoptr i32 %v7_bbac to i8*
  %v2_bbb0 = load i8, i8* %v1_bbb0, align 1
  %tmp = urem i8 %v2_bbb0, 16
  %v1_bbb4 = zext i8 %tmp to i32
  %v1_bbb8 = or i32 %v1_bbb4, 64
  store i32 %v1_bbb8, i32* %r3.global-to-local, align 4
  %v1_bbc0 = trunc i32 %v1_bbb8 to i8
  store i8 %v1_bbc0, i8* %v1_bbb0, align 1
  %v0_bbc4 = load i32, i32* @lr, align 4
  %v1_bbc4 = inttoptr i32 %v0_bbc4 to i8*
  %v2_bbc4 = load i8, i8* %v1_bbc4, align 1
  %v1_bbc8 = and i8 %v2_bbc4, -16
  %v1_bbcc = or i8 %v1_bbc8, 5
  store i8 %v1_bbcc, i8* %v1_bbc4, align 1
  %v2_bbd8 = load i32, i32* @lr, align 4
  %v3_bbd8 = add i32 %v2_bbd8, 1
  %v4_bbd8 = inttoptr i32 %v3_bbd8 to i8*
  store i8 %v5_ba28, i8* %v4_bbd8, align 1
  %v3_bbdc = load i32, i32* %stack_var_-44, align 4
  %v1_bbe0 = add i32 %v3_bbdc, 32
  %tmp44 = mul i32 %v1_bbe0, 256
  store i32 %v1_ba70, i32* %r4.global-to-local, align 4
  %v1_bbf0 = and i32 %tmp44, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp45 = udiv i32 %v1_bbe0, 256
  %v4_bbf4 = urem i32 %tmp45, 256
  %v5_bbf4 = or i32 %v4_bbf4, %v1_bbf0
  store i32 %v5_bbf4, i32* %r2.global-to-local, align 4
  store i32 %v5_ba64, i32* %r3.global-to-local, align 4
  store i1 %v2_bbfc, i1* %cpsr_z.global-to-local, align 1
  %v2_bc00 = load i32, i32* @lr, align 4
  %v3_bc00 = add i32 %v2_bc00, 8
  %v4_bc00 = inttoptr i32 %v3_bc00 to i8*
  store i8 %v1_bc00, i8* %v4_bc00, align 1
  %v0_bc04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc04, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bb98
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bc08 = load i32, i32* @lr, align 4
  %v4_bc08 = add i32 %v3_bc08, 6
  %v5_bc08 = inttoptr i32 %v4_bc08 to i8*
  store i8 64, i8* %v5_bc08, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bb98, %bb
  %v0_bc10 = load i32, i32* %r2.global-to-local, align 4
  %v3_bc10 = sdiv i32 %v0_bc10, 256
  store i32 %v3_bc10, i32* %ip.global-to-local, align 4
  store i32 %v4_bc14, i32* %r4.global-to-local, align 4
  %v2_bc18 = load i32, i32* @lr, align 4
  %v3_bc18 = add i32 %v2_bc18, 9
  %v4_bc18 = inttoptr i32 %v3_bc18 to i8*
  store i8 17, i8* %v4_bc18, align 1
  store i32 ptrtoint (i32* @global_var_1b230.48 to i32), i32* %r3.global-to-local, align 4
  %v0_bc20 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc20 = trunc i32 %v0_bc20 to i8
  %v2_bc20 = load i32, i32* @lr, align 4
  %v3_bc20 = add i32 %v2_bc20, 2
  %v4_bc20 = inttoptr i32 %v3_bc20 to i8*
  store i8 %v1_bc20, i8* %v4_bc20, align 1
  %v0_bc24 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc24 = trunc i32 %v0_bc24 to i8
  %v2_bc24 = load i32, i32* @lr, align 4
  %v3_bc24 = add i32 %v2_bc24, 3
  %v4_bc24 = inttoptr i32 %v3_bc24 to i8*
  store i8 %v1_bc24, i8* %v4_bc24, align 1
  %v0_bc28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc28, label %.thread6, label %bb46

.thread6:                                         ; preds = %.thread
  %v3_bc2c7 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc2c7, i32* %ip.global-to-local, align 4
  br label %bb47

bb46:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_bc2c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc2c, i32* %ip.global-to-local, align 4
  %v3_bc30 = load i32, i32* @lr, align 4
  %v4_bc30 = add i32 %v3_bc30, 7
  %v5_bc30 = inttoptr i32 %v4_bc30 to i8*
  store i8 0, i8* %v5_bc30, align 1
  %v0_bc38.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %.thread6, %bb46
  %v0_bc38 = phi i32 [ %v3_bc2c7, %.thread6 ], [ %v0_bc38.pre, %bb46 ]
  %v2_bc34 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_bc34, i32* %r2.global-to-local, align 4
  %v3_bc38 = mul i32 %v0_bc38, 32
  store i32 %v3_bc38, i32* %r3.global-to-local, align 4
  %v1_bc3c = load i32, i32* @lr, align 4
  %v2_bc3c = add i32 %v1_bc3c, 12
  %v3_bc3c = inttoptr i32 %v2_bc3c to i32*
  store i32 %v2_bc34, i32* %v3_bc3c, align 4
  %v0_bc40 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc40 = load i32, i32* %ip.global-to-local, align 4
  %tmp52 = mul i32 %v1_bc40, -8
  %v5_bc40 = add i32 %v0_bc40, %tmp52
  %v1_bc44 = load i32, i32* @sl, align 4
  %v2_bc44 = add i32 %v5_bc40, %v1_bc44
  store i32 %v2_bc44, i32* %r3.global-to-local, align 4
  %v1_bc48 = add i32 %v2_bc44, 16
  %v2_bc48 = inttoptr i32 %v1_bc48 to i32*
  %v3_bc48 = load i32, i32* %v2_bc48, align 4
  %v1_bc4c = load i32, i32* @lr, align 4
  %v2_bc4c = add i32 %v1_bc4c, 16
  %v3_bc4c = inttoptr i32 %v2_bc4c to i32*
  store i32 %v3_bc48, i32* %v3_bc4c, align 4
  %v3_bc50 = load i32, i32* %stack_var_-44, align 4
  %v1_bc54 = add i32 %v3_bc50, 12
  %tmp48 = mul i32 %v1_bc54, 256
  %v1_bc64 = and i32 %tmp48, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp49 = udiv i32 %v1_bc54, 256
  %v4_bc68 = urem i32 %tmp49, 256
  %v5_bc68 = or i32 %v4_bc68, %v1_bc64
  store i32 %v5_bc68, i32* %ip.global-to-local, align 4
  %v1_bc6c = load i32, i32* @lr, align 4
  %v2_bc6c = add i32 %v1_bc6c, 28
  %v3_bc6c = inttoptr i32 %v2_bc6c to i32*
  store i32 -1, i32* %v3_bc6c, align 4
  store i32 %v4_bc70, i32* %r2.global-to-local, align 4
  %v0_bc74 = load i32, i32* %r4.global-to-local, align 4
  %v1_bc74 = trunc i32 %v0_bc74 to i8
  %v2_bc74 = load i32, i32* @lr, align 4
  %v3_bc74 = add i32 %v2_bc74, 5
  %v4_bc74 = inttoptr i32 %v3_bc74 to i8*
  store i8 %v1_bc74, i8* %v4_bc74, align 1
  %v0_bc78 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc78 = sdiv i32 %v0_bc78, 256
  store i32 %v3_bc78, i32* %r3.global-to-local, align 4
  %v0_bc7c = load i32, i32* @lr, align 4
  %v1_bc7c = add i32 %v0_bc7c, 20
  store i32 %v1_bc7c, i32* %r4.global-to-local, align 4
  %v0_bc80 = load i32, i32* %r8.global-to-local, align 4
  %v1_bc80 = trunc i32 %v0_bc80 to i8
  %v3_bc80 = add i32 %v0_bc7c, 4
  %v4_bc80 = inttoptr i32 %v3_bc80 to i8*
  store i8 %v1_bc80, i8* %v4_bc80, align 1
  %v0_bc84 = load i32, i32* @r6, align 4
  %v1_bc84 = trunc i32 %v0_bc84 to i8
  %v2_bc84 = load i32, i32* @lr, align 4
  %v3_bc84 = add i32 %v2_bc84, 20
  %v4_bc84 = inttoptr i32 %v3_bc84 to i8*
  store i8 %v1_bc84, i8* %v4_bc84, align 1
  %v0_bc88 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc88 = trunc i32 %v0_bc88 to i8
  %v2_bc88 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc88 = add i32 %v2_bc88, 5
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 %v1_bc88, i8* %v4_bc88, align 1
  %v0_bc8c = load i32, i32* @r5, align 4
  %v1_bc8c = trunc i32 %v0_bc8c to i8
  %v2_bc8c = load i32, i32* %r4.global-to-local, align 4
  %v3_bc8c = add i32 %v2_bc8c, 2
  %v4_bc8c = inttoptr i32 %v3_bc8c to i8*
  store i8 %v1_bc8c, i8* %v4_bc8c, align 1
  %v0_bc90 = load i32, i32* @r7, align 4
  %v1_bc90 = trunc i32 %v0_bc90 to i8
  %v2_bc90 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc90 = add i32 %v2_bc90, 1
  %v4_bc90 = inttoptr i32 %v3_bc90 to i8*
  store i8 %v1_bc90, i8* %v4_bc90, align 1
  %v0_bc94 = load i32, i32* @lr, align 4
  %v1_bc94 = add i32 %v0_bc94, 32
  %v0_bc98 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc98 = trunc i32 %v0_bc98 to i8
  %v2_bc98 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc98 = add i32 %v2_bc98, 3
  %v4_bc98 = inttoptr i32 %v3_bc98 to i8*
  store i8 %v1_bc98, i8* %v4_bc98, align 1
  %v0_bc9c = load i32, i32* %ip.global-to-local, align 4
  %v1_bc9c = trunc i32 %v0_bc9c to i8
  %v2_bc9c = load i32, i32* %r4.global-to-local, align 4
  %v3_bc9c = add i32 %v2_bc9c, 4
  %v4_bc9c = inttoptr i32 %v3_bc9c to i8*
  store i8 %v1_bc9c, i8* %v4_bc9c, align 1
  %v3_bca0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bca0, i32* %r2.global-to-local, align 4
  %v3_bca4 = call i32 @function_ffb4(i32 %v1_bc94, i32 %v3_bad0, i32 %v3_bca0)
  %v3_bca8 = load i32, i32* %stack_var_-40, align 4
  %v1_bcac = add i32 %v3_bca8, 1
  store i32 %v1_bcac, i32* @r4, align 4
  store i32 %v1_b9c4, i32* %r3.global-to-local, align 4
  %v9_bcb4 = icmp eq i32 %v1_bcac, %v1_b9c4
  store i1 %v9_bcb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bcac, i32* %stack_var_-40, align 4
  %v5_bcbc = icmp slt i32 %v1_bcac, %v1_b9c4
  br i1 %v5_bcbc, label %dec_label_pc_bb98, label %dec_label_pc_bcc0

dec_label_pc_bcc0:                                ; preds = %bb47, %dec_label_pc_be94
  store i32 %v1_b9c4, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_bb3c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_bb3c, label %dec_label_pc_be94, label %dec_label_pc_bcd4

dec_label_pc_bcd4:                                ; preds = %dec_label_pc_bcc0
  store i32 0, i32* %r8.global-to-local, align 4
  %v3_bce4 = icmp eq i32 %v3_bb30, 65535
  br label %dec_label_pc_bdb8

dec_label_pc_bce0:                                ; preds = %dec_label_pc_bdb8
  store i1 %v3_bce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bce4, label %dec_label_pc_be48, label %dec_label_pc_bcec

dec_label_pc_bcec:                                ; preds = %dec_label_pc_bde0.dec_label_pc_bcec_crit_edge, %dec_label_pc_bce0
  %v1_bcf0 = phi i32 [ %v1_bcf0.pre, %dec_label_pc_bde0.dec_label_pc_bcec_crit_edge ], [ 65535, %dec_label_pc_bce0 ]
  store i32 %v3_bb34, i32* %r2.global-to-local, align 4
  %v9_bcf0 = icmp eq i32 %v3_bb34, %v1_bcf0
  store i1 %v9_bcf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bcf0, label %dec_label_pc_be64, label %dec_label_pc_bcf8

dec_label_pc_bcf8:                                ; preds = %dec_label_pc_be48.dec_label_pc_bcf8_crit_edge, %dec_label_pc_bcec
  %v1_bcfc = phi i32 [ %v1_bcfc.pre, %dec_label_pc_be48.dec_label_pc_bcf8_crit_edge ], [ %v1_bcf0, %dec_label_pc_bcec ]
  store i32 %v3_bb38, i32* %r3.global-to-local, align 4
  %v9_bcfc = icmp eq i32 %v3_bb38, %v1_bcfc
  store i1 %v9_bcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bcfc, label %dec_label_pc_be80, label %dec_label_pc_bd04

dec_label_pc_bd04:                                ; preds = %dec_label_pc_be64, %dec_label_pc_bcf8, %dec_label_pc_be80
  %v0_bd08 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd08 = trunc i32 %v0_bd08 to i8
  %v2_bd08 = load i32, i32* @r5, align 4
  %v3_bd08 = add i32 %v2_bd08, 10
  %v4_bd08 = inttoptr i32 %v3_bd08 to i8*
  store i8 %v1_bd08, i8* %v4_bd08, align 1
  %v0_bd0c = load i32, i32* %r8.global-to-local, align 4
  %v1_bd0c = trunc i32 %v0_bd0c to i8
  %v2_bd0c = load i32, i32* @r5, align 4
  %v3_bd0c = add i32 %v2_bd0c, 11
  %v4_bd0c = inttoptr i32 %v3_bd0c to i8*
  store i8 %v1_bd0c, i8* %v4_bd0c, align 1
  %v0_bd10 = load i32, i32* @r5, align 4
  store i32 %v0_bd10, i32* @r0, align 4
  %v2_bd14 = call i32 @function_c690(i32 %v0_bd10, i32 20)
  %v3_bd14 = trunc i32 %v2_bd14 to i8
  %v4_bd18 = sdiv i32 %v2_bd14, 256
  store i32 %v4_bd18, i32* %r3.global-to-local, align 4
  %v1_bd1c = trunc i32 %v4_bd18 to i8
  %v2_bd1c = load i32, i32* @r5, align 4
  %v3_bd1c = add i32 %v2_bd1c, 11
  %v4_bd1c = inttoptr i32 %v3_bd1c to i8*
  store i8 %v1_bd1c, i8* %v4_bd1c, align 1
  %v3_bd20 = load i32, i32* @r5, align 4
  %v4_bd20 = add i32 %v3_bd20, 10
  %v5_bd20 = inttoptr i32 %v4_bd20 to i8*
  store i8 %v3_bd14, i8* %v5_bd20, align 1
  %v0_bd24 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd24 = trunc i32 %v0_bd24 to i8
  %v2_bd24 = load i32, i32* @r6, align 4
  %v3_bd24 = add i32 %v2_bd24, 6
  %v4_bd24 = inttoptr i32 %v3_bd24 to i8*
  store i8 %v1_bd24, i8* %v4_bd24, align 1
  %v0_bd28 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd28 = trunc i32 %v0_bd28 to i8
  %v2_bd28 = load i32, i32* @r6, align 4
  %v3_bd28 = add i32 %v2_bd28, 7
  %v4_bd28 = inttoptr i32 %v3_bd28 to i8*
  store i8 %v1_bd28, i8* %v4_bd28, align 1
  %v0_bd2c = load i32, i32* @r5, align 4
  %v1_bd2c = add i32 %v0_bd2c, 24
  %v2_bd2c = inttoptr i32 %v1_bd2c to i8*
  %v3_bd2c = load i8, i8* %v2_bd2c, align 1
  %v4_bd2c = zext i8 %v3_bd2c to i32
  store i32 %v4_bd2c, i32* %r3.global-to-local, align 4
  %v1_bd30 = add i32 %v0_bd2c, 25
  %v2_bd30 = inttoptr i32 %v1_bd30 to i8*
  %v3_bd30 = load i8, i8* %v2_bd30, align 1
  %v4_bd30 = zext i8 %v3_bd30 to i32
  %v4_bd34 = mul nuw nsw i32 %v4_bd30, 256
  %v5_bd34 = or i32 %v4_bd34, %v4_bd2c
  store i32 %v5_bd34, i32* %r2.global-to-local, align 4
  %v3_bd38 = load i32, i32* %stack_var_-44, align 4
  %v0_bd3c = load i32, i32* @r6, align 4
  store i32 %v0_bd3c, i32* @r1, align 4
  %v1_bd40 = add i32 %v3_bd38, 12
  store i32 %v1_bd40, i32* %r3.global-to-local, align 4
  %v4_bd48 = call i32 @function_c6ec(i32 %v0_bd2c, i32 %v0_bd3c, i32 %v5_bd34, i32 %v1_bd40)
  %v5_bd48 = trunc i32 %v4_bd48 to i8
  %v4_bd4c14 = udiv i32 %v4_bd48, 256
  %v1_bd50 = trunc i32 %v4_bd4c14 to i8
  %v2_bd50 = load i32, i32* @r6, align 4
  %v3_bd50 = add i32 %v2_bd50, 7
  %v4_bd50 = inttoptr i32 %v3_bd50 to i8*
  store i8 %v1_bd50, i8* %v4_bd50, align 1
  %v3_bd54 = load i32, i32* @r6, align 4
  %v4_bd54 = add i32 %v3_bd54, 6
  %v5_bd54 = inttoptr i32 %v4_bd54 to i8*
  store i8 %v5_bd48, i8* %v5_bd54, align 1
  %v3_bd58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd58, i32* %r3.global-to-local, align 4
  %v0_bd5c = load i32, i32* @r5, align 4
  %v1_bd5c = add i32 %v0_bd5c, 20
  %v2_bd5c = inttoptr i32 %v1_bd5c to i32*
  %v3_bd5c = load i32, i32* %v2_bd5c, align 4
  %v5_bd64 = mul i32 %v3_bd58, 24
  %v1_bd68 = load i32, i32* @sl, align 4
  %v2_bd68 = add i32 %v1_bd68, %v5_bd64
  store i32 %v2_bd68, i32* %ip.global-to-local, align 4
  %v3_bd6c = udiv i32 %v3_bd5c, 65536
  store i32 %v3_bd6c, i32* %r2.global-to-local, align 4
  %v1_bd70 = trunc i32 %v3_bd6c to i8
  %v3_bd70 = add i32 %v2_bd68, 2
  %v4_bd70 = inttoptr i32 %v3_bd70 to i8*
  store i8 %v1_bd70, i8* %v4_bd70, align 1
  %v0_bd74 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd7415 = udiv i32 %v0_bd74, 256
  %v3_bd78 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bd78, i32* %r2.global-to-local, align 4
  %v1_bd7c = trunc i32 %v3_bd7415 to i8
  %v2_bd7c = load i32, i32* %ip.global-to-local, align 4
  %v3_bd7c = add i32 %v2_bd7c, 3
  %v4_bd7c = inttoptr i32 %v3_bd7c to i8*
  store i8 %v1_bd7c, i8* %v4_bd7c, align 1
  store i32 16, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bd88 = load i32, i32* @r5, align 4
  %v0_bd8c = load i32, i32* %r2.global-to-local, align 4
  %v1_bd8c = add i32 %v0_bd8c, 32
  store i32 %v1_bd8c, i32* %r2.global-to-local, align 4
  %v0_bd90 = load i32, i32* %sb.global-to-local, align 4
  %v0_bd98 = load i32, i32* %ip.global-to-local, align 4
  %v6_bd9c = inttoptr i32 %v0_bd88 to i32*
  %v7_bd9c = call i32 @function_10b78(i32 %v0_bd90, i32* %v6_bd9c, i32 %v1_bd8c, i32 16384, i32 %v0_bd98, i32 16)
  %v3_bda0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bda0, i32* %r3.global-to-local, align 4
  store i32 %v1_b9c4, i32* @r4, align 4
  %v1_bda8 = add i32 %v3_bda0, 1
  %v9_bdac = icmp eq i32 %v1_bda8, %v1_b9c4
  store i1 %v9_bdac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bda8, i32* %stack_var_-40, align 4
  %v6_bdb4 = icmp slt i32 %v1_bda8, %v1_b9c4
  br i1 %v6_bdb4, label %dec_label_pc_bdb8, label %dec_label_pc_be94

dec_label_pc_bdb8:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bcd4
  %v1_bdc8 = phi i32 [ %v1_bda8, %dec_label_pc_bd04 ], [ 0, %dec_label_pc_bcd4 ]
  %v5_bdbc = mul i32 %v1_bdc8, 24
  %v1_bdc0 = load i32, i32* @sl, align 4
  %v2_bdc0 = add i32 %v1_bdc0, %v5_bdbc
  store i32 %v2_bdc0, i32* %r3.global-to-local, align 4
  %v1_bdc4 = add i32 %v2_bdc0, 20
  %v2_bdc4 = inttoptr i32 %v1_bdc4 to i8*
  %v3_bdc4 = load i8, i8* %v2_bdc4, align 1
  %v4_bdc4 = zext i8 %v3_bdc4 to i32
  store i32 %v4_bdc4, i32* %r2.global-to-local, align 4
  %v0_bdc8 = load i32, i32* %fp.global-to-local, align 4
  %v4_bdc8 = mul i32 %v1_bdc8, 4
  %v5_bdc8 = add i32 %v0_bdc8, %v4_bdc8
  %v6_bdc8 = inttoptr i32 %v5_bdc8 to i32*
  %v7_bdc8 = load i32, i32* %v6_bdc8, align 4
  store i32 %v7_bdc8, i32* @r5, align 4
  %v2_bdd0 = icmp ugt i8 %v3_bdc4, 30
  %v7_bdd0 = icmp eq i8 %v3_bdc4, 31
  store i1 %v7_bdd0, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_bdd8 = add i32 %v7_bdc8, 20
  store i32 %v1_bdd8, i32* @r6, align 4
  %v2_bddc = xor i1 %v7_bdd0, true
  %v3_bddc = and i1 %v2_bdd0, %v2_bddc
  br i1 %v3_bddc, label %dec_label_pc_bce0, label %dec_label_pc_bde0

dec_label_pc_bde0:                                ; preds = %dec_label_pc_bdb8
  %v1_bde0 = add i32 %v2_bdc0, 16
  %v2_bde0 = inttoptr i32 %v1_bde0 to i32*
  %v3_bde0 = load i32, i32* %v2_bde0, align 4
  store i32 %v3_bde0, i32* @r4, align 4
  %v0_bde4 = call i32 @function_d208()
  %v3_bde8 = load i32, i32* %stack_var_-40, align 4
  %v5_bdf0 = mul i32 %v3_bde8, 24
  %v0_bdf4 = load i32, i32* @r4, align 4
  %v1_bdf8 = and i32 %v0_bdf4, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_bdf8, i32* %r3.global-to-local, align 4
  %v1_bdf4 = udiv i32 %v0_bdf4, 256
  %v3_bdfc = and i32 %v1_bdf4, 65280
  store i32 %v3_bdfc, i32* %r2.global-to-local, align 4
  %v1_be00 = load i32, i32* @sl, align 4
  %v2_be00 = add i32 %v1_be00, %v5_bdf0
  store i32 %v2_be00, i32* %ip.global-to-local, align 4
  %v3_be04 = mul i32 %v0_bdf4, 16777216
  %v4_be08 = mul i32 %v1_bdf8, 256
  %v5_be08 = or i32 %v4_be08, %v3_be04
  %v1_be0c = add i32 %v2_be00, 20
  %v2_be0c = inttoptr i32 %v1_be0c to i8*
  %v3_be0c = load i8, i8* %v2_be0c, align 1
  %v4_be0c = zext i8 %v3_be0c to i32
  %v4_be10 = udiv i32 %v0_bdf4, 16777216
  %v5_be10 = or i32 %v3_bdfc, %v4_be10
  %v2_be14 = or i32 %v5_be10, %v5_be08
  %v7_be18 = lshr i32 %v0_bde4, %v4_be0c
  %v8_be18 = add i32 %v7_be18, %v2_be14
  store i32 %v8_be18, i32* %r2.global-to-local, align 4
  %v2_be34 = call i32 @llvm.bswap.i32(i32 %v8_be18)
  store i32 %v2_be34, i32* %r3.global-to-local, align 4
  %v1_be3c = load i32, i32* %r7.global-to-local, align 4
  %v9_be3c = icmp eq i32 %v3_bb30, %v1_be3c
  store i1 %v9_be3c, i1* %cpsr_z.global-to-local, align 1
  %v1_be40 = load i32, i32* @r5, align 4
  %v2_be40 = add i32 %v1_be40, 16
  %v3_be40 = inttoptr i32 %v2_be40 to i32*
  store i32 %v2_be34, i32* %v3_be40, align 4
  br i1 %v9_be3c, label %dec_label_pc_be48, label %dec_label_pc_bde0.dec_label_pc_bcec_crit_edge

dec_label_pc_bde0.dec_label_pc_bcec_crit_edge:    ; preds = %dec_label_pc_bde0
  %v1_bcf0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bcec

dec_label_pc_be48:                                ; preds = %dec_label_pc_bde0, %dec_label_pc_bce0
  %v0_be48 = call i32 @function_d208()
  %v1_be48 = trunc i32 %v0_be48 to i8
  store i32 %v3_bb34, i32* %r2.global-to-local, align 4
  %v4_be50 = sdiv i32 %v0_be48, 256
  store i32 %v4_be50, i32* %r3.global-to-local, align 4
  %v1_be54 = load i32, i32* %r7.global-to-local, align 4
  %v9_be54 = icmp eq i32 %v3_bb34, %v1_be54
  store i1 %v9_be54, i1* %cpsr_z.global-to-local, align 1
  %v1_be58 = trunc i32 %v4_be50 to i8
  %v2_be58 = load i32, i32* @r5, align 4
  %v3_be58 = add i32 %v2_be58, 5
  %v4_be58 = inttoptr i32 %v3_be58 to i8*
  store i8 %v1_be58, i8* %v4_be58, align 1
  %v3_be5c = load i32, i32* @r5, align 4
  %v4_be5c = add i32 %v3_be5c, 4
  %v5_be5c = inttoptr i32 %v4_be5c to i8*
  store i8 %v1_be48, i8* %v5_be5c, align 1
  %v0_be60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be60, label %dec_label_pc_be64, label %dec_label_pc_be48.dec_label_pc_bcf8_crit_edge

dec_label_pc_be48.dec_label_pc_bcf8_crit_edge:    ; preds = %dec_label_pc_be48
  %v1_bcfc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bcf8

dec_label_pc_be64:                                ; preds = %dec_label_pc_be48, %dec_label_pc_bcec
  %v0_be64 = call i32 @function_d208()
  %v1_be64 = trunc i32 %v0_be64 to i8
  %v4_be68 = sdiv i32 %v0_be64, 256
  store i32 %v4_be68, i32* %r3.global-to-local, align 4
  %v3_be6c = load i32, i32* @r5, align 4
  %v4_be6c = add i32 %v3_be6c, 20
  %v5_be6c = inttoptr i32 %v4_be6c to i8*
  store i8 %v1_be64, i8* %v5_be6c, align 1
  %v0_be70 = load i32, i32* %r3.global-to-local, align 4
  %v1_be70 = trunc i32 %v0_be70 to i8
  %v2_be70 = load i32, i32* @r6, align 4
  %v3_be70 = add i32 %v2_be70, 1
  %v4_be70 = inttoptr i32 %v3_be70 to i8*
  store i8 %v1_be70, i8* %v4_be70, align 1
  store i32 %v3_bb38, i32* %r3.global-to-local, align 4
  %v1_be78 = load i32, i32* %r7.global-to-local, align 4
  %v9_be78 = icmp eq i32 %v3_bb38, %v1_be78
  store i1 %v9_be78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_be78, label %dec_label_pc_be80, label %dec_label_pc_bd04

dec_label_pc_be80:                                ; preds = %dec_label_pc_be64, %dec_label_pc_bcf8
  %v0_be80 = call i32 @function_d208()
  %v1_be80 = trunc i32 %v0_be80 to i8
  %v4_be84 = sdiv i32 %v0_be80, 256
  store i32 %v4_be84, i32* %r3.global-to-local, align 4
  %v1_be88 = trunc i32 %v4_be84 to i8
  %v2_be88 = load i32, i32* @r6, align 4
  %v3_be88 = add i32 %v2_be88, 3
  %v4_be88 = inttoptr i32 %v3_be88 to i8*
  store i8 %v1_be88, i8* %v4_be88, align 1
  %v3_be8c = load i32, i32* @r6, align 4
  %v4_be8c = add i32 %v3_be8c, 2
  %v5_be8c = inttoptr i32 %v4_be8c to i8*
  store i8 %v1_be80, i8* %v5_be8c, align 1
  br label %dec_label_pc_bd04

dec_label_pc_be94.critedge:                       ; preds = %dec_label_pc_bb1c
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_be94

dec_label_pc_be94:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_be94.critedge, %dec_label_pc_bcc0
  %v2_be98 = call i32 @function_108e4(i32* null)
  %v9_bea0 = icmp eq i32 %v2_bab8, %v2_be98
  store i1 %v9_bea0, i1* %cpsr_z.global-to-local, align 1
  %v6_bea4 = icmp slt i32 %v2_bab8, %v2_be98
  br i1 %v6_bea4, label %dec_label_pc_bea8, label %dec_label_pc_bcc0

dec_label_pc_bea8:                                ; preds = %dec_label_pc_be94, %dec_label_pc_b9c0, %dec_label_pc_beb0
  %v29_beac = phi i32 [ %v3_bae4, %dec_label_pc_b9c0 ], [ %v1_beb4, %dec_label_pc_beb0 ], [ %v2_be98, %dec_label_pc_be94 ]
  store i32 %v3_b9c0, i32* %r4.global-to-local, align 4
  store i32 %v12_b9c0, i32* %r7.global-to-local, align 4
  store i32 %v15_b9c0, i32* %r8.global-to-local, align 4
  ret i32 %v29_beac

dec_label_pc_beb0:                                ; preds = %dec_label_pc_baf4
  %v0_beb0 = load i32, i32* %sb.global-to-local, align 4
  %v1_beb4 = call i32 @function_10640(i32 %v0_beb0)
  br label %dec_label_pc_bea8

; uselistorder directives
  uselistorder i32 %v4_be84, { 1, 0 }
  uselistorder i32 %v4_be50, { 1, 0 }
  uselistorder i32 %v2_be34, { 1, 0 }
  uselistorder i32 %v0_bdf4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_bda8, { 1, 2, 0, 3 }
  uselistorder i32 %v3_bd6c, { 1, 0 }
  uselistorder i32 %v4_bd18, { 1, 0 }
  uselistorder i1 %v3_bce4, { 1, 0 }
  uselistorder i32 %v1_bcac, { 1, 0, 2, 3 }
  uselistorder i32 %v1_bc54, { 1, 0 }
  uselistorder i32 %v1_bbe0, { 1, 0 }
  uselistorder i32 %v1_bb6c, { 1, 0 }
  uselistorder i32 %v3_bb68, { 1, 0 }
  uselistorder i32 %v1_bb5c, { 1, 0 }
  uselistorder i32 %v3_bb30, { 0, 2, 1 }
  uselistorder i32 %v0_bb2c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bb28, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_bb14, { 1, 0 }
  uselistorder i1 %v7_bae8, { 1, 0 }
  uselistorder i32 %v3_bae4, { 1, 2, 3, 0 }
  uselistorder i32 %v2_bab8, { 1, 0 }
  uselistorder i32 %v1_ba70, { 1, 3, 2, 0 }
  uselistorder i32 %v5_ba64, { 0, 2, 1 }
  uselistorder i32 %v6_ba08, { 1, 2, 0 }
  uselistorder i32 %v1_b9c4, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 11, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5, 10, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960), { 6, 7, 0, 1, 2, 8, 3, 9, 10, 11, 4, 5 }
  uselistorder label %dec_label_pc_bea8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_be94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bcc0, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bec0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bec0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_bec0 = load i32, i32* @r4, align 4
  %v15_bec0 = load i32, i32* @r8, align 4
  %v21_bec0 = load i32, i32* @sl, align 4
  %v24_bec0 = load i32, i32* @fp, align 4
  %v1_becc = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_becc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bee4 = urem i32 %arg4, 256
  store i32 %v1_bee4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_bef4 = call i32 @function_10ec8(i32 %v1_becc, i32 4)
  %v0_bef8 = load i32, i32* @r5, align 4
  store i32 %v0_bef8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bf04 = load i32, i32* @r4, align 4
  store i32 %v0_bf04, i32* %r0.global-to-local, align 4
  %v0_bf08 = load i32, i32* @r6, align 4
  store i32 %v0_bf08, i32* %r3.global-to-local, align 4
  %v5_bf0c = inttoptr i32 %v0_bef8 to i32*
  %v6_bf0c = call i32 @function_829c(i32 %v0_bf04, i32* %v5_bf0c, i32 2, i32 %v0_bf08, i32 %v2_bef4)
  %v1_bf18 = urem i32 %v6_bf0c, 256
  store i32 %v1_bf18, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bf24 = load i32, i32* @r4, align 4
  store i32 %v0_bf24, i32* %r0.global-to-local, align 4
  %v0_bf28 = load i32, i32* @r5, align 4
  store i32 %v0_bf28, i32* %r1.global-to-local, align 4
  %v5_bf2c = trunc i32 %v6_bf0c to i8
  %v6_bf30 = inttoptr i32 %v0_bf28 to i32*
  %v7_bf30 = call i32 @function_829c(i32 %v0_bf24, i32* %v6_bf30, i32 3, i32 65535, i32 %v6_bf0c)
  %v0_bf34 = load i32, i32* @r5, align 4
  store i32 %v0_bf34, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_bf40 = load i32, i32* @r4, align 4
  store i32 %v0_bf40, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_bf48 = inttoptr i32 %v0_bf34 to i32*
  %v6_bf48 = call i32 @function_829c(i32 %v0_bf40, i32* %v5_bf48, i32 4, i32 64, i32 %v7_bf30)
  %v1_bf50 = urem i32 %v6_bf48, 256
  store i32 %v1_bf50, i32* %ip.global-to-local, align 4
  %v0_bf54 = load i32, i32* @r5, align 4
  store i32 %v0_bf54, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bf5c = load i32, i32* @r6, align 4
  store i32 %v0_bf5c, i32* %r3.global-to-local, align 4
  %v0_bf60 = load i32, i32* @r4, align 4
  store i32 %v0_bf60, i32* %r0.global-to-local, align 4
  %sext38 = mul i32 %v6_bf48, 16777216
  %v5_bf68 = sdiv i32 %sext38, 16777216
  %v6_bf68 = inttoptr i32 %v0_bf54 to i32*
  %v7_bf68 = call i32 @function_829c(i32 %v0_bf60, i32* %v6_bf68, i32 5, i32 %v0_bf5c, i32 %v5_bf68)
  %v1_bf74 = urem i32 %v7_bf68, 256
  store i32 %v1_bf74, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bf80 = load i32, i32* @r4, align 4
  store i32 %v0_bf80, i32* %r0.global-to-local, align 4
  %v0_bf84 = load i32, i32* @r5, align 4
  store i32 %v0_bf84, i32* %r1.global-to-local, align 4
  %v5_bf8c = inttoptr i32 %v0_bf84 to i32*
  %v6_bf8c = call i32 @function_829c(i32 %v0_bf80, i32* %v5_bf8c, i32 6, i32 65535, i32 %v1_bf74)
  %v0_bf90 = load i32, i32* @r5, align 4
  store i32 %v0_bf90, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_bf9c = load i32, i32* @r4, align 4
  store i32 %v0_bf9c, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_bfa4 = inttoptr i32 %v0_bf90 to i32*
  %v6_bfa4 = call i32 @function_829c(i32 %v0_bf9c, i32* %v5_bfa4, i32 7, i32 53, i32 %v6_bf8c)
  %v0_bfb0 = load i32, i32* @r5, align 4
  store i32 %v0_bfb0, i32* %r1.global-to-local, align 4
  %v0_bfb4 = load i32, i32* @r4, align 4
  store i32 %v0_bfb4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_bfc0 = inttoptr i32 %v0_bfb0 to i32*
  %v6_bfc0 = call i32 @function_829c(i32 %v0_bfb4, i32* %v5_bfc0, i32 9, i32 65535, i32 %v6_bfa4)
  %v0_bfc4 = load i32, i32* @r5, align 4
  store i32 %v0_bfc4, i32* %r1.global-to-local, align 4
  %v0_bfcc = load i32, i32* @r6, align 4
  store i32 %v0_bfcc, i32* %r2.global-to-local, align 4
  %v0_bfd0 = load i32, i32* @r4, align 4
  store i32 %v0_bfd0, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_bfd8 = inttoptr i32 %v0_bfc4 to i32*
  %v6_bfd8 = call i32 @function_829c(i32 %v0_bfd0, i32* %v5_bfd8, i32 %v0_bfcc, i32 12, i32 %v6_bfc0)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_bfe0 = load i32, i32* @r6, align 4
  store i32 %v0_bfe0, i32* %r3.global-to-local, align 4
  %v0_bfe4 = load i32, i32* @r5, align 4
  store i32 %v0_bfe4, i32* %r1.global-to-local, align 4
  %v0_bfec = load i32, i32* @r4, align 4
  store i32 %v0_bfec, i32* %r0.global-to-local, align 4
  %v5_bff0 = inttoptr i32 %v0_bfe4 to i32*
  %v6_bff0 = call i32 @function_81cc(i32 %v0_bfec, i32* %v5_bff0, i32 8, i32 %v0_bfe0, i32 %v6_bfd8)
  store i32 %v6_bff0, i32* @r7, align 4
  store i32 15, i32* %r0.global-to-local, align 4
  %v1_bffc = call i32 @function_fb14(i32 15)
  %v0_c000 = load i32, i32* @r6, align 4
  store i32 %v0_c000, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r0.global-to-local, align 4
  %v2_c008 = inttoptr i32 %v0_c000 to i32*
  %v3_c008 = call i32 @function_fa30(i32 15, i32* %v2_c008)
  store i32 %v3_c008, i32* %r0.global-to-local, align 4
  %v0_c00c = load i32, i32* @r6, align 4
  store i32 %v0_c00c, i32* %r1.global-to-local, align 4
  %v2_c010 = inttoptr i32 %v3_c008 to i8*
  %v3_c010 = call i32 @function_1076c(i8* %v2_c010, i32 %v0_c00c)
  store i32 %v3_c010, i32* @r4, align 4
  store i32 15, i32* %r0.global-to-local, align 4
  %v1_c01c = call i32 @function_fa5c(i32 15)
  store i32 %v1_c01c, i32* %r0.global-to-local, align 4
  %v0_c020 = load i32, i32* @r4, align 4
  %v1_c020 = load i32, i32* @r6, align 4
  %v9_c020 = icmp eq i32 %v0_c020, %v1_c020
  store i1 %v9_c020, i1* %cpsr_z.global-to-local, align 1
  %v5_c024 = icmp slt i32 %v0_c020, %v1_c020
  br i1 %v5_c024, label %dec_label_pc_c0f8, label %dec_label_pc_c028

dec_label_pc_c028:                                ; preds = %dec_label_pc_bec0
  %v2_c02c = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_c02c, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_c02c, i32* %r1.global-to-local, align 4
  store i32 %v0_c020, i32* %r0.global-to-local, align 4
  %v4_c03c = call i32 @function_10808(i32 %v0_c020, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_c03c, i32* @r5, align 4
  %v0_c044 = load i32, i32* @r4, align 4
  store i32 %v0_c044, i32* %r0.global-to-local, align 4
  %v1_c048 = call i32 @function_10640(i32 %v0_c044)
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_c050 = call i32 @function_fb14(i32 16)
  %v0_c054 = load i32, i32* @r6, align 4
  store i32 %v0_c054, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v2_c05c = inttoptr i32 %v0_c054 to i32*
  %v3_c05c = call i32 @function_fa30(i32 16, i32* %v2_c05c)
  %v0_c060 = load i32, i32* @r5, align 4
  store i32 %v0_c060, i32* @r1, align 4
  store i32 %v3_c05c, i32* %r2.global-to-local, align 4
  store i32 %v2_c02c, i32* %r0.global-to-local, align 4
  %v3_c06c = bitcast i32* %stack_var_-2120 to i8*
  %v4_c06c = call i32 @function_1022c(i8* %v3_c06c, i32 %v0_c060, i32 %v3_c05c)
  store i32 %v4_c06c, i32* %r8.global-to-local, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_c078 = call i32 @function_fa5c(i32 16)
  store i32 %v1_c078, i32* %r0.global-to-local, align 4
  %v7_c07c = icmp eq i32 %v4_c06c, -1
  store i1 %v7_c07c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c07c, label %dec_label_pc_c0f8, label %dec_label_pc_c084

dec_label_pc_c084:                                ; preds = %dec_label_pc_c028
  %v0_c084 = load i32, i32* @r5, align 4
  %v9_c084 = icmp eq i32 %v0_c084, %v4_c06c
  store i1 %v9_c084, i1* %cpsr_z.global-to-local, align 1
  %v7_c088 = icmp sgt i32 %v0_c084, %v4_c06c
  br i1 %v7_c088, label %dec_label_pc_c08c, label %dec_label_pc_c0f8

dec_label_pc_c08c:                                ; preds = %dec_label_pc_c084
  %v2_c084 = sub i32 %v0_c084, %v4_c06c
  store i32 %v2_c084, i32* %r3.global-to-local, align 4
  %v2_c094 = ptrtoint i32* %stack_var_-72 to i32
  %v0_c098 = load i32, i32* @r6, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 %v4_c06c, i32* %r2.global-to-local, align 4
  %v0_c0a4 = load i32, i32* %sl.global-to-local, align 4
  %v2_c0a4 = add i32 %v0_c0a4, %v4_c06c
  store i32 %v2_c0a4, i32* %r0.global-to-local, align 4
  store i32 %v2_c094, i32* @r4, align 4
  %v1_c0b4 = add i32 %v0_c084, -1
  br label %dec_label_pc_c0ac

dec_label_pc_c0ac:                                ; preds = %dec_label_pc_c0e8, %dec_label_pc_c08c
  %v0_c0f0 = phi i32 [ %v1_c0f0, %dec_label_pc_c0e8 ], [ %v2_c094, %dec_label_pc_c08c ]
  %v0_c0e8 = phi i32 [ %v1_c0e8, %dec_label_pc_c0e8 ], [ %v4_c06c, %dec_label_pc_c08c ]
  %v0_c0d0 = phi i32 [ %v0_c0d046, %dec_label_pc_c0e8 ], [ %v0_c098, %dec_label_pc_c08c ]
  %v0_c0b0 = phi i32 [ %v0_c0b042, %dec_label_pc_c0e8 ], [ %v0_c098, %dec_label_pc_c08c ]
  %v0_c0b8 = phi i32 [ %v1_c0b8, %dec_label_pc_c0e8 ], [ %v2_c0a4, %dec_label_pc_c08c ]
  %v1_c0ac = inttoptr i32 %v0_c0b8 to i8*
  %v2_c0ac = load i8, i8* %v1_c0ac, align 1
  %v3_c0ac = zext i8 %v2_c0ac to i32
  store i32 %v3_c0ac, i32* %r3.global-to-local, align 4
  %v2_c0b0 = icmp eq i32 %v0_c0b0, 0
  store i1 %v2_c0b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0b4, i32* %lr.global-to-local, align 4
  %v1_c0b8 = add i32 %v0_c0b8, 1
  store i32 %v1_c0b8, i32* %r0.global-to-local, align 4
  %v1_c0bc = add nsw i32 %v3_c0ac, -48
  store i32 %v1_c0bc, i32* %ip.global-to-local, align 4
  br i1 %v2_c0b0, label %dec_label_pc_c0c4, label %dec_label_pc_c0d4

dec_label_pc_c0c4:                                ; preds = %dec_label_pc_c0ac
  %v7_c0c4 = icmp eq i8 %v2_c0ac, 9
  store i1 %v7_c0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0c4, label %dec_label_pc_c0e8, label %bb

bb:                                               ; preds = %dec_label_pc_c0c4
  %v8_c0c8 = icmp eq i8 %v2_c0ac, 32
  store i1 %v8_c0c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c0c8, label %dec_label_pc_c0e8, label %dec_label_pc_c0d0

dec_label_pc_c0d0:                                ; preds = %bb
  %v1_c0d0 = add i32 %v0_c0d0, 1
  store i32 %v1_c0d0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c0d4

dec_label_pc_c0d4:                                ; preds = %dec_label_pc_c0ac, %dec_label_pc_c0d0
  %v0_c0d047 = phi i32 [ %v0_c0d0, %dec_label_pc_c0ac ], [ %v1_c0d0, %dec_label_pc_c0d0 ]
  %v0_c0b043 = phi i32 [ %v0_c0b0, %dec_label_pc_c0ac ], [ %v1_c0d0, %dec_label_pc_c0d0 ]
  %v7_c0d4 = icmp eq i8 %v2_c0ac, 46
  store i1 %v7_c0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0d4, label %dec_label_pc_c0e0, label %bb129

bb129:                                            ; preds = %dec_label_pc_c0d4
  %v3_c0d8 = icmp ugt i32 %v1_c0bc, 8
  %v8_c0d8 = icmp eq i32 %v1_c0bc, 9
  store i1 %v8_c0d8, i1* %cpsr_z.global-to-local, align 1
  %v2_c0dc = xor i1 %v8_c0d8, true
  %v3_c0dc = and i1 %v3_c0d8, %v2_c0dc
  br i1 %v3_c0dc, label %dec_label_pc_c628, label %dec_label_pc_c0e0

dec_label_pc_c0e0:                                ; preds = %dec_label_pc_c0d4, %bb129
  %v9_c0e0 = icmp eq i32 %v0_c0e8, %v1_c0b4
  store i1 %v9_c0e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c0e0, label %dec_label_pc_c628, label %dec_label_pc_c0e8

dec_label_pc_c0e8:                                ; preds = %dec_label_pc_c0c4, %dec_label_pc_c0e0, %bb
  %v0_c0d046 = phi i32 [ %v0_c0d0, %dec_label_pc_c0c4 ], [ %v0_c0d047, %dec_label_pc_c0e0 ], [ %v0_c0d0, %bb ]
  %v0_c0b042 = phi i32 [ 0, %dec_label_pc_c0c4 ], [ %v0_c0b043, %dec_label_pc_c0e0 ], [ 0, %bb ]
  %v1_c0e8 = add i32 %v0_c0e8, 1
  store i32 %v1_c0e8, i32* %r2.global-to-local, align 4
  %v9_c0ec = icmp eq i32 %v0_c084, %v1_c0e8
  store i1 %v9_c0ec, i1* %cpsr_z.global-to-local, align 1
  %v1_c0f0 = add i32 %v0_c0f0, 1
  store i32 %v1_c0f0, i32* @r4, align 4
  br i1 %v9_c0ec, label %dec_label_pc_c0f8, label %dec_label_pc_c0ac

dec_label_pc_c0f8:                                ; preds = %dec_label_pc_c0e8, %dec_label_pc_c084, %dec_label_pc_c028, %dec_label_pc_bec0
  %v0_c0f8 = call i32 @function_d208()
  %v1_c0fc = urem i32 %v0_c0f8, 4
  store i32 %v1_c0fc, i32* %r0.global-to-local, align 4
  %v2_c100 = icmp eq i32 %v1_c0fc, 3
  store i1 %v2_c100, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c0f8 to i2
  switch i2 %trunc, label %dec_label_pc_c12424 [
    i2 0, label %dec_label_pc_c660
    i2 1, label %dec_label_pc_c11c
    i2 -2, label %dec_label_pc_c650
    i2 -1, label %dec_label_pc_c674
  ]

dec_label_pc_c11c:                                ; preds = %dec_label_pc_c0f8
  store i32 74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c124

dec_label_pc_c12424:                              ; preds = %dec_label_pc_c0f8
  unreachable

dec_label_pc_c124:                                ; preds = %dec_label_pc_c674, %dec_label_pc_c660, %dec_label_pc_c650, %dec_label_pc_c628, %dec_label_pc_c11c
  %stack_var_-2188.0 = phi i32 [ 4, %dec_label_pc_c674 ], [ 64, %dec_label_pc_c650 ], [ 74, %dec_label_pc_c11c ], [ 8, %dec_label_pc_c660 ], [ %phitmp, %dec_label_pc_c628 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c128 = call i32 @function_108e4(i32* null)
  %v0_c12c = load i32, i32* @r7, align 4
  %v2_c12c = icmp eq i32 %v0_c12c, 0
  store i1 %v2_c12c, i1* %cpsr_z.global-to-local, align 1
  %v1_c130 = load i32, i32* %fp.global-to-local, align 4
  %v2_c130 = add i32 %v1_c130, %v2_c128
  store i32 %v2_c130, i32* %r0.global-to-local, align 4
  br i1 %v2_c12c, label %dec_label_pc_c604, label %dec_label_pc_c13c

dec_label_pc_c13c:                                ; preds = %dec_label_pc_c124
  store i32 %v0_c12c, i32* %r0.global-to-local, align 4
  %v1_c140 = inttoptr i32 %v0_c12c to i8*
  %v2_c140 = call i32 @function_ff38(i8* %v1_c140)
  %v3_c140 = inttoptr i32 %v2_c140 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c154 = call i32 @function_10bdc(i32 2, i32 3, i32 17)
  store i32 %v3_c154, i32* %r0.global-to-local, align 4
  %v7_c158 = icmp eq i32 %v3_c154, -1
  store i1 %v7_c158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c158, label %dec_label_pc_c604, label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c13c
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c170 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c170, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c184 = call i32 @function_10bac(i32 %v3_c154, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_c184, i32* %r0.global-to-local, align 4
  %v7_c188 = icmp eq i32 %v6_c184, -1
  store i1 %v7_c188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c188, label %dec_label_pc_c5fc, label %dec_label_pc_c190

dec_label_pc_c190:                                ; preds = %dec_label_pc_c164
  %v3_c198 = mul i32 %v7_bf30, 65536
  store i32 %v3_c198, i32* %r8.global-to-local, align 4
  %v3_c1a4 = mul i32 %v6_bf8c, 65536
  store i32 %v3_c1a4, i32* %r0.global-to-local, align 4
  %v3_c1a8 = mul i32 %v6_bfa4, 65536
  store i32 %v3_c1a8, i32* %sl.global-to-local, align 4
  %v3_c1ac = mul i32 %v6_bfc0, 65536
  store i32 %v3_c1ac, i32* %fp.global-to-local, align 4
  %v2_c1b0 = icmp eq i32 %v1_becc, 0
  store i1 %v2_c1b0, i1* %cpsr_z.global-to-local, align 1
  %v1_c1b4 = urem i32 %v6_bfd8, 256
  store i32 %v1_c1b4, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c1bc = urem i32 %v7_bf30, 65536
  %v3_c1c0 = urem i32 %v6_bf8c, 65536
  store i32 %v3_c1c0, i32* %ip.global-to-local, align 4
  %v3_c1c4 = urem i32 %v6_bfa4, 65536
  store i32 %v3_c1c4, i32* %lr.global-to-local, align 4
  %v3_c1c8 = urem i32 %v6_bfc0, 65536
  store i32 %v3_c1c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c1b0, label %dec_label_pc_c610.critedge, label %dec_label_pc_c1e4

dec_label_pc_c1e4:                                ; preds = %dec_label_pc_c190
  %v2_c1ec = add i32 %v2_c140, %v1_c1b4
  %v3_c1f0 = mul i32 %v2_c1ec, 65536
  %v1_c1f4 = add i32 %v3_c1f0, 1769472
  %v1_c1f8 = add i32 %v3_c1f0, 3080192
  %v1_c214 = urem i32 %v6_bfc0, 256
  %tmp130 = udiv i32 %v6_bf8c, 256
  %v3_c218 = urem i32 %tmp130, 256
  %v1_c21c = urem i32 %v6_bf8c, 256
  %v1_c210 = mul i32 %v7_bf30, 256
  %v3_c224 = and i32 %v1_c210, 65280
  store i32 %v3_c224, i32* %r1.global-to-local, align 4
  %v1_c22c = urem i32 %v6_bfa4, 256
  %tmp131 = udiv i32 %v7_bf30, 256
  %v3_c234 = udiv i32 %v1_c1f4, 256
  %v1_c23c = and i32 %v3_c234, 65280
  %tmp132 = udiv i32 %v6_bfa4, 256
  %v4_c24c = udiv i32 %v1_c1f4, 16777216
  %v5_c24c = or i32 %v1_c23c, %v4_c24c
  store i32 %v5_c24c, i32* @r6, align 4
  %v3_c254 = sdiv i32 %v1_c1f8, 16777216
  %sext39 = mul i32 %tmp131, 16777216
  %v7_c254 = sdiv i32 %sext39, 16777216
  %v3_c258 = mul nuw nsw i32 %v1_c214, 256
  %v4_c260 = mul nuw nsw i32 %v1_c21c, 256
  %v5_c260 = or i32 %v4_c260, %v3_c218
  store i32 %v5_c260, i32* %r0.global-to-local, align 4
  %v3_c264 = ashr i32 %v1_c1f8, 31
  %tmp133 = udiv i32 %v6_bfc0, 256
  %v4_c268 = urem i32 %tmp133, 256
  %v5_c268 = or i32 %v4_c268, %v3_c258
  store i32 %v5_c268, i32* @r5, align 4
  %v3_c26c = ashr i32 %sext39, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_c274 = add i32 %v2_c140, 1
  store i32 %v2_c274, i32* %fp.global-to-local, align 4
  store i32 %v1_c22c, i32* %r3.global-to-local, align 4
  store i32 %v1_c21c, i32* %r2.global-to-local, align 4
  %v3_c28869 = udiv i32 %v1_c23c, 256
  store i32 %v3_c28869, i32* %ip.global-to-local, align 4
  store i32 %v1_c214, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  %v5_c294 = trunc i32 %tmp130 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext18 = mul i32 %v1_c1f4, 256
  %v4_c344 = sdiv i32 %sext18, 16777216
  %sext20 = mul i32 %v6_bfa4, 16777216
  %v4_c360 = sdiv i32 %sext20, 16777216
  %sext21 = mul nuw i32 %v4_c24c, 16777216
  %v4_c364 = sdiv i32 %sext21, 16777216
  %sext23 = mul i32 %v6_bfc0, 16777216
  %v4_c384 = sdiv i32 %sext23, 16777216
  %v1_c308 = trunc i32 %v3_c264 to i8
  %extract.t = trunc i32 %v3_c26c to i8
  %v1_c368 = trunc i32 %tmp132 to i8
  %v1_c390 = trunc i32 %v6_bf8c to i8
  br label %dec_label_pc_c2b4

dec_label_pc_c2b4:                                ; preds = %dec_label_pc_c414, %dec_label_pc_c1e4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c2bc = call i32 @function_10ec8(i32 600, i32 1)
  store i32 %v2_c2bc, i32* %r0.global-to-local, align 4
  store i32 %v2_bef4, i32* %r2.global-to-local, align 4
  %v3_c2c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2c4, i32* %r3.global-to-local, align 4
  %v2_c2c8 = load i32, i32* @r4, align 4
  %v5_c2c8 = mul i32 %v2_c2c8, 4
  %v6_c2c8 = add i32 %v5_c2c8, %v2_bef4
  %v7_c2c8 = inttoptr i32 %v6_c2c8 to i32*
  store i32 %v2_c2bc, i32* %v7_c2c8, align 4
  %v0_c2cc = load i32, i32* %r2.global-to-local, align 4
  %v1_c2cc = load i32, i32* %r3.global-to-local, align 4
  %v4_c2cc = mul i32 %v1_c2cc, 4
  %v5_c2cc = add i32 %v4_c2cc, %v0_c2cc
  %v6_c2cc = inttoptr i32 %v5_c2cc to i32*
  %v7_c2cc = load i32, i32* %v6_c2cc, align 4
  store i32 %v7_c2cc, i32* %r1.global-to-local, align 4
  %v1_c2d0 = inttoptr i32 %v7_c2cc to i8*
  %v2_c2d0 = load i8, i8* %v1_c2d0, align 1
  %tmp = urem i8 %v2_c2d0, 16
  %v1_c2d4 = zext i8 %tmp to i32
  %v1_c2d8 = or i32 %v1_c2d4, 64
  store i32 %v1_c2d8, i32* %r2.global-to-local, align 4
  %v1_c2dc = trunc i32 %v1_c2d8 to i8
  store i8 %v1_c2dc, i8* %v1_c2d0, align 1
  %v0_c2e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c2e0 = inttoptr i32 %v0_c2e0 to i8*
  %v2_c2e0 = load i8, i8* %v1_c2e0, align 1
  %v1_c2e4 = and i8 %v2_c2e0, -16
  %v1_c2e8 = or i8 %v1_c2e4, 5
  store i32 %v1_bf74, i32* %ip.global-to-local, align 4
  store i8 %v1_c2e8, i8* %v1_c2e0, align 1
  %v2_c2f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2f8 = add i32 %v2_c2f8, 1
  %v4_c2f8 = inttoptr i32 %v3_c2f8 to i8*
  store i8 %v5_bf2c, i8* %v4_c2f8, align 1
  store i32 %v3_c264, i32* %r3.global-to-local, align 4
  store i32 %v3_c254, i32* %r2.global-to-local, align 4
  %v0_c304 = load i32, i32* %ip.global-to-local, align 4
  %v2_c304 = icmp eq i32 %v0_c304, 0
  store i1 %v2_c304, i1* %cpsr_z.global-to-local, align 1
  %v2_c308 = load i32, i32* %r1.global-to-local, align 4
  %v3_c308 = add i32 %v2_c308, 3
  %v4_c308 = inttoptr i32 %v3_c308 to i8*
  store i8 %v1_c308, i8* %v4_c308, align 1
  %v0_c30c = load i32, i32* %r2.global-to-local, align 4
  %v1_c30c = trunc i32 %v0_c30c to i8
  %v2_c30c = load i32, i32* %r1.global-to-local, align 4
  %v3_c30c = add i32 %v2_c30c, 2
  %v4_c30c = inttoptr i32 %v3_c30c to i8*
  store i8 %v1_c30c, i8* %v4_c30c, align 1
  store i32 %v3_c26c, i32* %lr.global-to-local, align 4
  store i32 %v5_bf68, i32* %r2.global-to-local, align 4
  %v0_c318 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c318, label %.thread25, label %bb134

bb134:                                            ; preds = %dec_label_pc_c2b4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c31c = load i32, i32* %r1.global-to-local, align 4
  %v4_c31c = add i32 %v3_c31c, 6
  %v5_c31c = inttoptr i32 %v4_c31c to i8*
  store i8 64, i8* %v5_c31c, align 1
  %v0_c324.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t70 = trunc i32 %v0_c324.pre to i8
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_c2b4, %bb134
  %v0_c324.off0 = phi i8 [ %extract.t, %dec_label_pc_c2b4 ], [ %extract.t70, %bb134 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c324 = load i32, i32* %r1.global-to-local, align 4
  %v3_c324 = add i32 %v2_c324, 5
  %v4_c324 = inttoptr i32 %v3_c324 to i8*
  store i8 %v0_c324.off0, i8* %v4_c324, align 1
  store i32 %v7_c254, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b230.48 to i32), i32* %lr.global-to-local, align 4
  %v0_c330 = load i32, i32* %r2.global-to-local, align 4
  %v1_c330 = trunc i32 %v0_c330 to i8
  %v2_c330 = load i32, i32* %r1.global-to-local, align 4
  %v3_c330 = add i32 %v2_c330, 8
  %v4_c330 = inttoptr i32 %v3_c330 to i8*
  store i8 %v1_c330, i8* %v4_c330, align 1
  %v0_c334 = load i32, i32* %r3.global-to-local, align 4
  %v1_c334 = trunc i32 %v0_c334 to i8
  %v2_c334 = load i32, i32* %r1.global-to-local, align 4
  %v3_c334 = add i32 %v2_c334, 9
  %v4_c334 = inttoptr i32 %v3_c334 to i8*
  store i8 %v1_c334, i8* %v4_c334, align 1
  %v0_c338 = load i32, i32* %r1.global-to-local, align 4
  %v1_c338 = add i32 %v0_c338, 41
  %v2_c33c = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_c33c, i32* %r3.global-to-local, align 4
  %v0_c340 = load i32, i32* @sb, align 4
  %v2_c340 = add i32 %v1_c338, %v0_c340
  store i32 %v2_c340, i32* %r4.global-to-local, align 4
  store i32 %v4_c344, i32* %r2.global-to-local, align 4
  %v1_c348 = add i32 %v0_c338, 20
  store i32 %v1_c348, i32* %r0.global-to-local, align 4
  %v0_c34c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c34c, label %bb136, label %bb135

bb135:                                            ; preds = %.thread25
  %v1_c34c = load i32, i32* %sl.global-to-local, align 4
  %v2_c34c = trunc i32 %v1_c34c to i8
  %v4_c34c = add i32 %v0_c338, 7
  %v5_c34c = inttoptr i32 %v4_c34c to i8*
  store i8 %v2_c34c, i8* %v5_c34c, align 1
  %v2_c350.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb136

bb136:                                            ; preds = %.thread25, %bb135
  %v2_c350 = phi i32 [ %v0_c338, %.thread25 ], [ %v2_c350.pre, %bb135 ]
  %v0_c350 = load i32, i32* %ip.global-to-local, align 4
  %v1_c350 = trunc i32 %v0_c350 to i8
  %v3_c350 = add i32 %v2_c350, 4
  %v4_c350 = inttoptr i32 %v3_c350 to i8*
  store i8 %v1_c350, i8* %v4_c350, align 1
  %v0_c354 = load i32, i32* %r3.global-to-local, align 4
  %v1_c354 = load i32, i32* %r1.global-to-local, align 4
  %v2_c354 = add i32 %v1_c354, 12
  %v3_c354 = inttoptr i32 %v2_c354 to i32*
  store i32 %v0_c354, i32* %v3_c354, align 4
  %v0_c358 = load i32, i32* %r2.global-to-local, align 4
  %v1_c358 = trunc i32 %v0_c358 to i8
  %v2_c358 = load i32, i32* %r0.global-to-local, align 4
  %v3_c358 = add i32 %v2_c358, 5
  %v4_c358 = inttoptr i32 %v3_c358 to i8*
  store i8 %v1_c358, i8* %v4_c358, align 1
  store i32 %v4_c360, i32* %lr.global-to-local, align 4
  store i32 %v4_c364, i32* %r2.global-to-local, align 4
  %v2_c368 = load i32, i32* %r0.global-to-local, align 4
  %v3_c368 = add i32 %v2_c368, 2
  %v4_c368 = inttoptr i32 %v3_c368 to i8*
  store i8 %v1_c368, i8* %v4_c368, align 1
  %v0_c36c = load i32, i32* %lr.global-to-local, align 4
  %v1_c36c = trunc i32 %v0_c36c to i8
  %v2_c36c = load i32, i32* %r0.global-to-local, align 4
  %v3_c36c = add i32 %v2_c36c, 3
  %v4_c36c = inttoptr i32 %v3_c36c to i8*
  store i8 %v1_c36c, i8* %v4_c36c, align 1
  %v0_c370 = load i32, i32* %r2.global-to-local, align 4
  %v1_c370 = trunc i32 %v0_c370 to i8
  %v2_c370 = load i32, i32* %r0.global-to-local, align 4
  %v3_c370 = add i32 %v2_c370, 4
  %v4_c370 = inttoptr i32 %v3_c370 to i8*
  store i8 %v1_c370, i8* %v4_c370, align 1
  store i32 %stack_var_-2188.0, i32* %lr.global-to-local, align 4
  %v2_c37c = load i32, i32* %r1.global-to-local, align 4
  %v3_c37c = add i32 %v2_c37c, 20
  %v4_c37c = inttoptr i32 %v3_c37c to i8*
  store i8 %v5_c294, i8* %v4_c37c, align 1
  store i32 %v4_c384, i32* %r3.global-to-local, align 4
  %v0_c388 = load i32, i32* %r1.global-to-local, align 4
  %v1_c388 = add i32 %v0_c388, 28
  store i32 %v1_c388, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v2_c390 = load i32, i32* %r0.global-to-local, align 4
  %v3_c390 = add i32 %v2_c390, 1
  %v4_c390 = inttoptr i32 %v3_c390 to i8*
  store i8 %v1_c390, i8* %v4_c390, align 1
  %v0_c394 = load i32, i32* %lr.global-to-local, align 4
  %v1_c394 = load i32, i32* %r1.global-to-local, align 4
  %v2_c394 = add i32 %v1_c394, 16
  %v3_c394 = inttoptr i32 %v2_c394 to i32*
  store i32 %v0_c394, i32* %v3_c394, align 4
  %v0_c398 = load i32, i32* %r8.global-to-local, align 4
  %v1_c398 = trunc i32 %v0_c398 to i8
  %v2_c398 = load i32, i32* %ip.global-to-local, align 4
  %v3_c398 = add i32 %v2_c398, 5
  %v4_c398 = inttoptr i32 %v3_c398 to i8*
  store i8 %v1_c398, i8* %v4_c398, align 1
  %v0_c39c = load i32, i32* @r5, align 4
  %v1_c39c = trunc i32 %v0_c39c to i8
  %v2_c39c = load i32, i32* %r1.global-to-local, align 4
  %v3_c39c = add i32 %v2_c39c, 28
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 %v1_c39c, i8* %v4_c39c, align 1
  %v0_c3a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a0 = add i32 %v2_c3a0, 2
  %v4_c3a0 = inttoptr i32 %v3_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v4_c3a0, align 1
  %v0_c3a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3a4 = trunc i32 %v0_c3a4 to i8
  %v2_c3a4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a4 = add i32 %v2_c3a4, 1
  %v4_c3a4 = inttoptr i32 %v3_c3a4 to i8*
  store i8 %v1_c3a4, i8* %v4_c3a4, align 1
  %v0_c3a8 = load i32, i32* @r6, align 4
  %v1_c3a8 = trunc i32 %v0_c3a8 to i8
  %v2_c3a8 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a8 = add i32 %v2_c3a8, 3
  %v4_c3a8 = inttoptr i32 %v3_c3a8 to i8*
  store i8 %v1_c3a8, i8* %v4_c3a8, align 1
  %v0_c3ac = load i32, i32* @r6, align 4
  %v1_c3ac = trunc i32 %v0_c3ac to i8
  %v2_c3ac = load i32, i32* %ip.global-to-local, align 4
  %v3_c3ac = add i32 %v2_c3ac, 4
  %v4_c3ac = inttoptr i32 %v3_c3ac to i8*
  store i8 %v1_c3ac, i8* %v4_c3ac, align 1
  %v0_c3b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_c3b0 = add i32 %v0_c3b0, 1
  store i32 %v1_c3b0, i32* %r0.global-to-local, align 4
  %v0_c3b4 = load i32, i32* @sb, align 4
  %v1_c3b4 = trunc i32 %v0_c3b4 to i8
  %v2_c3b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3b4 = add i32 %v2_c3b4, 40
  %v4_c3b4 = inttoptr i32 %v3_c3b4 to i8*
  store i8 %v1_c3b4, i8* %v4_c3b4, align 1
  %v0_c3b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c3b8, i32* %r2.global-to-local, align 4
  %v0_c3bc = load i32, i32* @r7, align 4
  store i32 %v0_c3bc, i32* %r1.global-to-local, align 4
  %v3_c3c0 = call i32 @function_ffb4(i32 %v1_c3b0, i32 %v0_c3bc, i32 %v0_c3b8)
  store i32 %v3_c3c0, i32* %r0.global-to-local, align 4
  %v1_c3c8 = load i32, i32* @r6, align 4
  %v10_c3c8 = inttoptr i32 %v1_c3c8 to i8*
  %v15_c3c8 = icmp eq i32 %v2_c140, %v1_c3c8
  store i1 %v15_c3c8, i1* %cpsr_z.global-to-local, align 1
  %v9_c3cc = icmp sgt i8* %v3_c140, %v10_c3c8
  store i32 %v1_c3c8, i32* %lr.global-to-local, align 4
  %v0_c3dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c3dc, i32* %ip.global-to-local, align 4
  %extract.t72 = trunc i32 %v1_c3c8 to i8
  br i1 %v9_c3cc, label %dec_label_pc_c3d8, label %dec_label_pc_c414

dec_label_pc_c3d8:                                ; preds = %bb136
  store i32 %v1_c3c8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c3e4

dec_label_pc_c3e4:                                ; preds = %.thread37, %dec_label_pc_c3d8
  %v1_c3ec = phi i32 [ %v1_c3ec58, %.thread37 ], [ %v1_c3c8, %dec_label_pc_c3d8 ]
  %v0_c3e4 = phi i32 [ %v1_c400, %.thread37 ], [ %v1_c3c8, %dec_label_pc_c3d8 ]
  %v1_c3e4 = load i32, i32* @r7, align 4
  %v2_c3e4 = add i32 %v1_c3e4, %v0_c3e4
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i8*
  %v4_c3e4 = load i8, i8* %v3_c3e4, align 1
  %v6_c3e4 = zext i8 %v4_c3e4 to i32
  store i32 %v6_c3e4, i32* %r3.global-to-local, align 4
  %v7_c3e8 = icmp eq i8 %v4_c3e4, 46
  store i1 %v7_c3e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3e8, label %bb137, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_c3e4
  %v1_c3f035 = add i32 %v1_c3ec, 1
  store i32 %v1_c3f035, i32* %r2.global-to-local, align 4
  br label %bb138

bb137:                                            ; preds = %dec_label_pc_c3e4
  %v2_c3ec = trunc i32 %v1_c3ec to i8
  %v3_c3ec = load i32, i32* %ip.global-to-local, align 4
  %v4_c3ec = inttoptr i32 %v3_c3ec to i8*
  store i8 %v2_c3ec, i8* %v4_c3ec, align 1
  %v0_c3f4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_c3f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_c3f0 = add i32 %v0_c3f0, 1
  store i32 %v1_c3f0, i32* %r2.global-to-local, align 4
  br i1 %v0_c3f4.pr, label %bb139, label %bb138

bb138:                                            ; preds = %.thread33, %bb137
  %v1_c3f036 = phi i32 [ %v1_c3f035, %.thread33 ], [ %v1_c3f0, %bb137 ]
  %v2_c3f4 = urem i32 %v1_c3f036, 256
  store i32 %v2_c3f4, i32* %lr.global-to-local, align 4
  br label %bb139

bb139:                                            ; preds = %bb137, %bb138
  %v1_c3ec59 = phi i32 [ %v0_c3f0, %bb137 ], [ %v2_c3f4, %bb138 ]
  %v0_c408.pr = phi i1 [ true, %bb137 ], [ false, %bb138 ]
  store i32 %v2_c140, i32* %r2.global-to-local, align 4
  %v0_c3fc = load i32, i32* %r4.global-to-local, align 4
  %v1_c3fc = load i32, i32* %r1.global-to-local, align 4
  %v2_c3fc = add i32 %v1_c3fc, %v0_c3fc
  store i32 %v2_c3fc, i32* %r0.global-to-local, align 4
  %v1_c400 = add i32 %v1_c3fc, 1
  store i32 %v1_c400, i32* %r1.global-to-local, align 4
  br i1 %v0_c408.pr, label %bb140, label %.thread37

bb140:                                            ; preds = %bb139
  %v2_c404 = add i32 %v2_c3fc, 1
  store i32 %v2_c404, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread37

.thread37:                                        ; preds = %bb139, %bb140
  %v1_c3ec58 = phi i32 [ %v1_c3ec59, %bb139 ], [ 0, %bb140 ]
  %v9_c40c = icmp eq i32 %v2_c140, %v1_c400
  store i1 %v9_c40c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c40c, label %dec_label_pc_c414.loopexit, label %dec_label_pc_c3e4

dec_label_pc_c414.loopexit:                       ; preds = %.thread37
  %v2_c414.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_c3ec58 to i8
  br label %dec_label_pc_c414

dec_label_pc_c414:                                ; preds = %dec_label_pc_c414.loopexit, %bb136
  %v2_c414 = phi i32 [ %v2_c414.pre, %dec_label_pc_c414.loopexit ], [ %v0_c3dc, %bb136 ]
  %v0_c414.off0 = phi i8 [ %extract.t71, %dec_label_pc_c414.loopexit ], [ %extract.t72, %bb136 ]
  %v3_c414 = inttoptr i32 %v2_c414 to i8*
  store i8 %v0_c414.off0, i8* %v3_c414, align 1
  %v3_c418 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_c140, i32* %ip.global-to-local, align 4
  store i32 %v1_becc, i32* @lr, align 4
  %v0_c424 = load i32, i32* %r4.global-to-local, align 4
  %v2_c424 = add i32 %v0_c424, %v2_c140
  store i32 %v2_c424, i32* %r3.global-to-local, align 4
  %v1_c428 = add i32 %v3_c418, 1
  store i32 %v1_c428, i32* @r4, align 4
  %v9_c42c = icmp eq i32 %v1_becc, %v1_c428
  store i1 %v9_c42c, i1* %cpsr_z.global-to-local, align 1
  %v1_c430 = add i32 %v2_c424, 2
  store i32 %v1_c430, i32* %r2.global-to-local, align 4
  %v0_c434 = load i32, i32* %sl.global-to-local, align 4
  %v1_c434 = trunc i32 %v0_c434 to i8
  %v4_c434 = inttoptr i32 %v1_c430 to i8*
  store i8 %v1_c434, i8* %v4_c434, align 1
  %v0_c438 = load i32, i32* %r8.global-to-local, align 4
  %v1_c438 = trunc i32 %v0_c438 to i8
  %v2_c438 = load i32, i32* %r2.global-to-local, align 4
  %v3_c438 = add i32 %v2_c438, 3
  %v4_c438 = inttoptr i32 %v3_c438 to i8*
  store i8 %v1_c438, i8* %v4_c438, align 1
  %v0_c43c = load i32, i32* %r8.global-to-local, align 4
  %v1_c43c = trunc i32 %v0_c43c to i8
  %v2_c43c = load i32, i32* %r2.global-to-local, align 4
  %v3_c43c = add i32 %v2_c43c, 1
  %v4_c43c = inttoptr i32 %v3_c43c to i8*
  store i8 %v1_c43c, i8* %v4_c43c, align 1
  %v0_c440 = load i32, i32* %sl.global-to-local, align 4
  %v1_c440 = trunc i32 %v0_c440 to i8
  %v2_c440 = load i32, i32* %r2.global-to-local, align 4
  %v3_c440 = add i32 %v2_c440, 2
  %v4_c440 = inttoptr i32 %v3_c440 to i8*
  store i8 %v1_c440, i8* %v4_c440, align 1
  %v0_c444 = load i32, i32* @r4, align 4
  store i32 %v0_c444, i32* %stack_var_-40, align 4
  %v8_c448 = icmp sgt i32 %v1_becc, %v1_c428
  br i1 %v8_c448, label %dec_label_pc_c2b4, label %dec_label_pc_c44c

dec_label_pc_c44c:                                ; preds = %dec_label_pc_c414, %dec_label_pc_c610
  store i32 %v1_becc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_c1b0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c1b0, label %dec_label_pc_c610, label %dec_label_pc_c460

dec_label_pc_c460:                                ; preds = %dec_label_pc_c44c
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c46c = load i32, i32* @sb, align 4
  %v2_c46c = add i32 %v0_c46c, %v2_c140
  store i32 %v2_c46c, i32* %r3.global-to-local, align 4
  %v1_c470 = add i32 %v2_c46c, 47
  store i32 %v1_c470, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r8, align 4
  %v1_c478 = add i32 %v2_c46c, 27
  store i32 %v1_c478, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c574

dec_label_pc_c488:                                ; preds = %dec_label_pc_c574
  store i32 %v3_c1c0, i32* %r3.global-to-local, align 4
  %v9_c48c = icmp eq i32 %v3_c1c0, %v1_c48c
  store i1 %v9_c48c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c48c, label %dec_label_pc_c5b0, label %dec_label_pc_c494

dec_label_pc_c494:                                ; preds = %dec_label_pc_c594.dec_label_pc_c494_crit_edge, %dec_label_pc_c488
  %v1_c498 = phi i32 [ %v1_c498.pre, %dec_label_pc_c594.dec_label_pc_c494_crit_edge ], [ %v1_c48c, %dec_label_pc_c488 ]
  store i32 %v3_c1c4, i32* %ip.global-to-local, align 4
  %v9_c498 = icmp eq i32 %v3_c1c4, %v1_c498
  store i1 %v9_c498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c498, label %dec_label_pc_c5cc, label %dec_label_pc_c4a0

dec_label_pc_c4a0:                                ; preds = %dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge, %dec_label_pc_c494
  %v1_c4a4 = phi i32 [ %v1_c4a4.pre, %dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge ], [ %v1_c498, %dec_label_pc_c494 ]
  store i32 %v3_c1c8, i32* %lr.global-to-local, align 4
  %v9_c4a4 = icmp eq i32 %v3_c1c8, %v1_c4a4
  store i1 %v9_c4a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4a4, label %dec_label_pc_c5e8, label %dec_label_pc_c4ac

dec_label_pc_c4ac:                                ; preds = %dec_label_pc_c5cc, %dec_label_pc_c4a0, %dec_label_pc_c5e8
  %v0_c4ac = load i32, i32* @r6, align 4
  store i32 %v0_c4ac, i32* %r0.global-to-local, align 4
  %v0_c4b0 = load i32, i32* @sb, align 4
  store i32 %v0_c4b0, i32* %r1.global-to-local, align 4
  %v2_c4b4 = call i32 @function_d2bc(i32 %v0_c4ac, i32 %v0_c4b0)
  %v0_c4b8 = load i32, i32* @r7, align 4
  %v1_c4b8 = trunc i32 %v0_c4b8 to i8
  %v2_c4b8 = load i32, i32* @r6, align 4
  %v3_c4b8 = load i32, i32* @sb, align 4
  %v4_c4b8 = add i32 %v3_c4b8, %v2_c4b8
  %v5_c4b8 = inttoptr i32 %v4_c4b8 to i8*
  store i8 %v1_c4b8, i8* %v5_c4b8, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c4c0 = load i32, i32* @r7, align 4
  %v1_c4c0 = trunc i32 %v0_c4c0 to i8
  %v2_c4c0 = load i32, i32* @r4, align 4
  %v3_c4c0 = add i32 %v2_c4c0, 10
  %v4_c4c0 = inttoptr i32 %v3_c4c0 to i8*
  store i8 %v1_c4c0, i8* %v4_c4c0, align 1
  %v0_c4c4 = load i32, i32* @r7, align 4
  %v1_c4c4 = trunc i32 %v0_c4c4 to i8
  %v2_c4c4 = load i32, i32* @r4, align 4
  %v3_c4c4 = add i32 %v2_c4c4, 11
  %v4_c4c4 = inttoptr i32 %v3_c4c4 to i8*
  store i8 %v1_c4c4, i8* %v4_c4c4, align 1
  %v0_c4c8 = load i32, i32* @r4, align 4
  store i32 %v0_c4c8, i32* @r0, align 4
  %v2_c4cc = call i32 @function_c690(i32 %v0_c4c8, i32 20)
  %v3_c4cc = trunc i32 %v2_c4cc to i8
  store i32 %v2_c4cc, i32* %r0.global-to-local, align 4
  %v4_c4d0 = sdiv i32 %v2_c4cc, 256
  store i32 %v4_c4d0, i32* %r3.global-to-local, align 4
  %v1_c4d4 = trunc i32 %v4_c4d0 to i8
  %v2_c4d4 = load i32, i32* @r4, align 4
  %v3_c4d4 = add i32 %v2_c4d4, 11
  %v4_c4d4 = inttoptr i32 %v3_c4d4 to i8*
  store i8 %v1_c4d4, i8* %v4_c4d4, align 1
  %v3_c4d8 = load i32, i32* @r4, align 4
  %v4_c4d8 = add i32 %v3_c4d8, 10
  %v5_c4d8 = inttoptr i32 %v4_c4d8 to i8*
  store i8 %v3_c4cc, i8* %v5_c4d8, align 1
  %v0_c4dc = load i32, i32* @r7, align 4
  %v1_c4dc = trunc i32 %v0_c4dc to i8
  %v2_c4dc = load i32, i32* @r5, align 4
  %v3_c4dc = add i32 %v2_c4dc, 6
  %v4_c4dc = inttoptr i32 %v3_c4dc to i8*
  store i8 %v1_c4dc, i8* %v4_c4dc, align 1
  %v0_c4e0 = load i32, i32* @r7, align 4
  %v1_c4e0 = trunc i32 %v0_c4e0 to i8
  %v2_c4e0 = load i32, i32* @r5, align 4
  %v3_c4e0 = add i32 %v2_c4e0, 7
  %v4_c4e0 = inttoptr i32 %v3_c4e0 to i8*
  store i8 %v1_c4e0, i8* %v4_c4e0, align 1
  %v0_c4e4 = load i32, i32* @r4, align 4
  %v1_c4e4 = add i32 %v0_c4e4, 24
  %v2_c4e4 = inttoptr i32 %v1_c4e4 to i8*
  %v3_c4e4 = load i8, i8* %v2_c4e4, align 1
  %v4_c4e4 = zext i8 %v3_c4e4 to i32
  store i32 %v4_c4e4, i32* %r3.global-to-local, align 4
  %v1_c4e8 = add i32 %v0_c4e4, 25
  %v2_c4e8 = inttoptr i32 %v1_c4e8 to i8*
  %v3_c4e8 = load i8, i8* %v2_c4e8, align 1
  %v4_c4e8 = zext i8 %v3_c4e8 to i32
  %v0_c4ec = load i32, i32* @r5, align 4
  store i32 %v0_c4ec, i32* @r1, align 4
  %v4_c4f0 = mul nuw nsw i32 %v4_c4e8, 256
  %v5_c4f0 = or i32 %v4_c4f0, %v4_c4e4
  store i32 %v5_c4f0, i32* %r2.global-to-local, align 4
  store i32 %v0_c4e4, i32* %r0.global-to-local, align 4
  %v0_c4f8 = load i32, i32* @fp, align 4
  store i32 %v0_c4f8, i32* %r3.global-to-local, align 4
  %v4_c4fc = call i32 @function_c6ec(i32 %v0_c4e4, i32 %v0_c4ec, i32 %v5_c4f0, i32 %v0_c4f8)
  %v5_c4fc = trunc i32 %v4_c4fc to i8
  store i32 %v4_c4fc, i32* %r0.global-to-local, align 4
  %v3_c500 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_c50c = mul i32 %v3_c500, 24
  store i32 %v5_c50c, i32* %lr.global-to-local, align 4
  %v4_c51077 = udiv i32 %v4_c4fc, 256
  %v1_c514 = trunc i32 %v4_c51077 to i8
  %v2_c514 = load i32, i32* @r5, align 4
  %v3_c514 = add i32 %v2_c514, 7
  %v4_c514 = inttoptr i32 %v3_c514 to i8*
  store i8 %v1_c514, i8* %v4_c514, align 1
  store i32 %stack_var_-2188.0, i32* %r3.global-to-local, align 4
  %v0_c51c = load i32, i32* %lr.global-to-local, align 4
  %v1_c51c = load i32, i32* %r2.global-to-local, align 4
  %v2_c51c = add i32 %v1_c51c, %v0_c51c
  store i32 %v2_c51c, i32* %lr.global-to-local, align 4
  %v3_c520 = load i32, i32* @r5, align 4
  %v4_c520 = add i32 %v3_c520, 6
  %v5_c520 = inttoptr i32 %v4_c520 to i8*
  store i8 %v5_c4fc, i8* %v5_c520, align 1
  %v0_c524 = load i32, i32* %r3.global-to-local, align 4
  %v1_c524 = load i32, i32* %lr.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 4
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v0_c524, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* @r4, align 4
  %v1_c528 = add i32 %v0_c528, 20
  %v2_c528 = inttoptr i32 %v1_c528 to i32*
  %v3_c528 = load i32, i32* %v2_c528, align 4
  %v3_c52c = udiv i32 %v3_c528, 65536
  store i32 %v3_c52c, i32* %r3.global-to-local, align 4
  %v3_c53016 = udiv i32 %v3_c528, 16777216
  %v1_c534 = trunc i32 %v3_c53016 to i8
  %v2_c534 = load i32, i32* %lr.global-to-local, align 4
  %v3_c534 = add i32 %v2_c534, 3
  %v4_c534 = inttoptr i32 %v3_c534 to i8*
  store i8 %v1_c534, i8* %v4_c534, align 1
  %v0_c538 = load i32, i32* %r3.global-to-local, align 4
  %v1_c538 = trunc i32 %v0_c538 to i8
  %v2_c538 = load i32, i32* %lr.global-to-local, align 4
  %v3_c538 = add i32 %v2_c538, 2
  %v4_c538 = inttoptr i32 %v3_c538 to i8*
  store i8 %v1_c538, i8* %v4_c538, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c544 = load i32, i32* @r4, align 4
  store i32 %v0_c544, i32* %r1.global-to-local, align 4
  store i32 %v3_c154, i32* %r0.global-to-local, align 4
  store i32 %v1_c470, i32* %r2.global-to-local, align 4
  %v0_c550 = load i32, i32* %lr.global-to-local, align 4
  %v6_c558 = inttoptr i32 %v0_c544 to i32*
  %v7_c558 = call i32 @function_10b78(i32 %v3_c154, i32* %v6_c558, i32 %v1_c470, i32 16384, i32 %v0_c550, i32 16)
  %v3_c55c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c55c, i32* %r3.global-to-local, align 4
  %v1_c564 = add i32 %v3_c55c, 1
  store i32 %v1_c564, i32* %r0.global-to-local, align 4
  %v9_c568 = icmp eq i32 %v1_becc, %v1_c564
  store i1 %v9_c568, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c564, i32* %stack_var_-40, align 4
  %v7_c570 = icmp sgt i32 %v1_becc, %v1_c564
  br i1 %v7_c570, label %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge, label %dec_label_pc_c610

dec_label_pc_c4ac.dec_label_pc_c574_crit_edge:    ; preds = %dec_label_pc_c4ac
  %v1_c580.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c574

dec_label_pc_c574:                                ; preds = %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge, %dec_label_pc_c460
  %v1_c48c = phi i32 [ %v1_c580.pre, %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge ], [ 65535, %dec_label_pc_c460 ]
  %v1_c57c = phi i32 [ %v1_c564, %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge ], [ 0, %dec_label_pc_c460 ]
  store i32 %v2_bef4, i32* %lr.global-to-local, align 4
  store i32 %v3_c1bc, i32* %r2.global-to-local, align 4
  %v4_c57c = mul i32 %v1_c57c, 4
  %v5_c57c = add i32 %v4_c57c, %v2_bef4
  %v6_c57c = inttoptr i32 %v5_c57c to i32*
  %v7_c57c = load i32, i32* %v6_c57c, align 4
  store i32 %v7_c57c, i32* @r4, align 4
  %v9_c580 = icmp eq i32 %v3_c1bc, %v1_c48c
  store i1 %v9_c580, i1* %cpsr_z.global-to-local, align 1
  %v1_c584 = add i32 %v7_c57c, 20
  store i32 %v1_c584, i32* @r5, align 4
  %v1_c588 = add i32 %v7_c57c, 41
  store i32 %v1_c588, i32* @r6, align 4
  %v1_c58c = add i32 %v7_c57c, 28
  store i32 %v1_c58c, i32* @sl, align 4
  br i1 %v9_c580, label %dec_label_pc_c594, label %dec_label_pc_c488

dec_label_pc_c594:                                ; preds = %dec_label_pc_c574
  %v0_c594 = call i32 @function_d208()
  %v1_c594 = trunc i32 %v0_c594 to i8
  store i32 %v0_c594, i32* %r0.global-to-local, align 4
  %v4_c59878 = udiv i32 %v0_c594, 256
  %v1_c59c = trunc i32 %v4_c59878 to i8
  %v2_c59c = load i32, i32* @r4, align 4
  %v3_c59c = add i32 %v2_c59c, 5
  %v4_c59c = inttoptr i32 %v3_c59c to i8*
  store i8 %v1_c59c, i8* %v4_c59c, align 1
  store i32 %v3_c1c0, i32* %r3.global-to-local, align 4
  %v1_c5a4 = load i32, i32* @r8, align 4
  %v9_c5a4 = icmp eq i32 %v3_c1c0, %v1_c5a4
  store i1 %v9_c5a4, i1* %cpsr_z.global-to-local, align 1
  %v3_c5a8 = load i32, i32* @r4, align 4
  %v4_c5a8 = add i32 %v3_c5a8, 4
  %v5_c5a8 = inttoptr i32 %v4_c5a8 to i8*
  store i8 %v1_c594, i8* %v5_c5a8, align 1
  %v0_c5ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5ac, label %dec_label_pc_c5b0, label %dec_label_pc_c594.dec_label_pc_c494_crit_edge

dec_label_pc_c594.dec_label_pc_c494_crit_edge:    ; preds = %dec_label_pc_c594
  %v1_c498.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c494

dec_label_pc_c5b0:                                ; preds = %dec_label_pc_c594, %dec_label_pc_c488
  %v0_c5b0 = call i32 @function_d208()
  %v1_c5b0 = trunc i32 %v0_c5b0 to i8
  store i32 %v0_c5b0, i32* %r0.global-to-local, align 4
  store i32 %v3_c1c4, i32* %ip.global-to-local, align 4
  %v4_c5b8 = sdiv i32 %v0_c5b0, 256
  store i32 %v4_c5b8, i32* %r3.global-to-local, align 4
  %v1_c5bc = load i32, i32* @r8, align 4
  %v9_c5bc = icmp eq i32 %v3_c1c4, %v1_c5bc
  store i1 %v9_c5bc, i1* %cpsr_z.global-to-local, align 1
  %v3_c5c0 = load i32, i32* @r4, align 4
  %v4_c5c0 = add i32 %v3_c5c0, 20
  %v5_c5c0 = inttoptr i32 %v4_c5c0 to i8*
  store i8 %v1_c5b0, i8* %v5_c5c0, align 1
  %v0_c5c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5c4 = trunc i32 %v0_c5c4 to i8
  %v2_c5c4 = load i32, i32* @r5, align 4
  %v3_c5c4 = add i32 %v2_c5c4, 1
  %v4_c5c4 = inttoptr i32 %v3_c5c4 to i8*
  store i8 %v1_c5c4, i8* %v4_c5c4, align 1
  %v0_c5c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5c8, label %dec_label_pc_c5cc, label %dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge

dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge:    ; preds = %dec_label_pc_c5b0
  %v1_c4a4.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c4a0

dec_label_pc_c5cc:                                ; preds = %dec_label_pc_c5b0, %dec_label_pc_c494
  %v0_c5cc = call i32 @function_d208()
  %v1_c5cc = trunc i32 %v0_c5cc to i8
  store i32 %v0_c5cc, i32* %r0.global-to-local, align 4
  store i32 %v3_c1c8, i32* %lr.global-to-local, align 4
  %v4_c5d4 = sdiv i32 %v0_c5cc, 256
  store i32 %v4_c5d4, i32* %r3.global-to-local, align 4
  %v1_c5d8 = load i32, i32* @r8, align 4
  %v9_c5d8 = icmp eq i32 %v3_c1c8, %v1_c5d8
  store i1 %v9_c5d8, i1* %cpsr_z.global-to-local, align 1
  %v1_c5dc = trunc i32 %v4_c5d4 to i8
  %v2_c5dc = load i32, i32* @r5, align 4
  %v3_c5dc = add i32 %v2_c5dc, 3
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v3_c5e0 = load i32, i32* @r5, align 4
  %v4_c5e0 = add i32 %v3_c5e0, 2
  %v5_c5e0 = inttoptr i32 %v4_c5e0 to i8*
  store i8 %v1_c5cc, i8* %v5_c5e0, align 1
  %v0_c5e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5e4, label %dec_label_pc_c5e8, label %dec_label_pc_c4ac

dec_label_pc_c5e8:                                ; preds = %dec_label_pc_c5cc, %dec_label_pc_c4a0
  %v0_c5e8 = call i32 @function_d208()
  %v1_c5e8 = trunc i32 %v0_c5e8 to i8
  store i32 %v0_c5e8, i32* %r0.global-to-local, align 4
  %v4_c5ec = sdiv i32 %v0_c5e8, 256
  store i32 %v4_c5ec, i32* %r3.global-to-local, align 4
  %v3_c5f0 = load i32, i32* @r4, align 4
  %v4_c5f0 = add i32 %v3_c5f0, 28
  %v5_c5f0 = inttoptr i32 %v4_c5f0 to i8*
  store i8 %v1_c5e8, i8* %v5_c5f0, align 1
  %v0_c5f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f4 = trunc i32 %v0_c5f4 to i8
  %v2_c5f4 = load i32, i32* @sl, align 4
  %v3_c5f4 = add i32 %v2_c5f4, 1
  %v4_c5f4 = inttoptr i32 %v3_c5f4 to i8*
  store i8 %v1_c5f4, i8* %v4_c5f4, align 1
  br label %dec_label_pc_c4ac

dec_label_pc_c5fc:                                ; preds = %dec_label_pc_c164
  store i32 %v3_c154, i32* %r0.global-to-local, align 4
  %v1_c600 = call i32 @function_10640(i32 %v3_c154)
  store i32 %v1_c600, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c604

dec_label_pc_c604:                                ; preds = %dec_label_pc_c610, %dec_label_pc_c13c, %dec_label_pc_c124, %dec_label_pc_c5fc
  %v29_c60c = phi i32 [ %v3_c154, %dec_label_pc_c13c ], [ %v2_c130, %dec_label_pc_c124 ], [ %v1_c600, %dec_label_pc_c5fc ], [ %v2_c614, %dec_label_pc_c610 ]
  store i32 %v3_bec0, i32* %r4.global-to-local, align 4
  store i32 %v15_bec0, i32* %r8.global-to-local, align 4
  store i32 %v21_bec0, i32* %sl.global-to-local, align 4
  store i32 %v24_bec0, i32* %fp.global-to-local, align 4
  ret i32 %v29_c60c

dec_label_pc_c610.critedge:                       ; preds = %dec_label_pc_c190
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c610

dec_label_pc_c610:                                ; preds = %dec_label_pc_c4ac, %dec_label_pc_c610.critedge, %dec_label_pc_c44c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c614 = call i32 @function_108e4(i32* null)
  store i32 %v2_c614, i32* %r0.global-to-local, align 4
  store i32 %v2_c130, i32* %ip.global-to-local, align 4
  %v9_c61c = icmp eq i32 %v2_c130, %v2_c614
  store i1 %v9_c61c, i1* %cpsr_z.global-to-local, align 1
  %v6_c620 = icmp slt i32 %v2_c130, %v2_c614
  br i1 %v6_c620, label %dec_label_pc_c604, label %dec_label_pc_c44c

dec_label_pc_c628:                                ; preds = %dec_label_pc_c0e0, %bb129
  %v0_c0e8.lcssa = phi i32 [ %v1_c0b4, %dec_label_pc_c0e0 ], [ %v0_c0e8, %bb129 ]
  %v2_c628 = sub i32 %v0_c0e8.lcssa, %v4_c06c
  store i32 %v2_c628, i32* %r2.global-to-local, align 4
  store i32 %v2_c0a4, i32* %r1.global-to-local, align 4
  store i32 %v2_c094, i32* %r0.global-to-local, align 4
  %v3_c634 = call i32 @function_ffb4(i32 %v2_c094, i32 %v2_c0a4, i32 %v2_c628)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c094, i32* @r0, align 4
  %v2_c640 = load i32, i32* @r4, align 4
  %v3_c640 = inttoptr i32 %v2_c640 to i8*
  store i8 0, i8* %v3_c640, align 1
  %v1_c644 = call i32 @function_109bc(i32 %v2_c094)
  store i32 %v1_c644, i32* %r0.global-to-local, align 4
  %sext40 = mul i32 %v1_c644, 16777216
  %phitmp = sdiv i32 %sext40, 16777216
  br label %dec_label_pc_c124

dec_label_pc_c650:                                ; preds = %dec_label_pc_c0f8
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c124

dec_label_pc_c660:                                ; preds = %dec_label_pc_c0f8
  br label %dec_label_pc_c124

dec_label_pc_c674:                                ; preds = %dec_label_pc_c0f8
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c124

; uselistorder directives
  uselistorder i32 %v2_c614, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c5e8, { 0, 2, 1 }
  uselistorder i32 %v4_c5d4, { 1, 0 }
  uselistorder i32 %v0_c5cc, { 0, 2, 1 }
  uselistorder i32 %v0_c5b0, { 0, 2, 1 }
  uselistorder i32 %v0_c594, { 0, 2, 1 }
  uselistorder i32 %v7_c57c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c48c, { 2, 1, 0 }
  uselistorder i32 %v1_c564, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_c4fc, { 0, 2, 1 }
  uselistorder i32 %v0_c4e4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c4d0, { 1, 0 }
  uselistorder i32 %v2_c4cc, { 0, 2, 1 }
  uselistorder i32 %v1_c470, { 1, 0, 2 }
  uselistorder i32 %v1_c400, { 0, 2, 1 }
  uselistorder i32 %v1_c3fc, { 1, 0 }
  uselistorder i32 %v2_c3f4, { 1, 0 }
  uselistorder i32 %v1_c3c8, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_c26c, { 1, 0 }
  uselistorder i32 %v3_c264, { 1, 0 }
  uselistorder i32 %v1_c21c, { 1, 0 }
  uselistorder i32 %v1_c214, { 1, 0 }
  uselistorder i32 %v1_c1f8, { 1, 0 }
  uselistorder i32 %v3_c1f0, { 1, 0 }
  uselistorder i32 %v1_c1b4, { 1, 0 }
  uselistorder i1 %v7_c188, { 1, 0 }
  uselistorder i1 %v7_c158, { 1, 0 }
  uselistorder i32 %v3_c154, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_c140, { 0, 1, 6, 3, 5, 7, 4, 2, 8 }
  uselistorder i32 %v2_c130, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_c12c, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_c0fc, { 1, 0 }
  uselistorder i32 %v0_c0f8, { 1, 0 }
  uselistorder i32 %v1_c0f0, { 1, 0 }
  uselistorder i32 %v1_c0e8, { 1, 2, 0 }
  uselistorder i1 %v7_c0d4, { 1, 0 }
  uselistorder i32 %v1_c0d0, { 1, 0, 2 }
  uselistorder i1 %v8_c0c8, { 1, 0 }
  uselistorder i1 %v7_c0c4, { 1, 0 }
  uselistorder i32 %v1_c0b8, { 1, 0 }
  uselistorder i8 %v2_c0ac, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c0b0, { 1, 0 }
  uselistorder i32 %v0_c0d0, { 1, 2, 3, 0 }
  uselistorder i32 %v2_c0a4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c098, { 1, 0, 2 }
  uselistorder i32 %v2_c094, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_c084, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_c07c, { 1, 0 }
  uselistorder i32 %v4_c06c, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_c020, { 1, 0, 2, 3 }
  uselistorder i32 %v6_bfc0, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_bfa4, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_bf8c, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32 %v1_bf74, { 1, 2, 0 }
  uselistorder i32 %v7_bf30, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v6_bf0c, { 1, 2, 0 }
  uselistorder i32 %v2_bef4, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_becc, { 3, 4, 2, 6, 7, 5, 8, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 12, 10, 11 }
  uselistorder i32* %sl.global-to-local, { 7, 1, 2, 0, 3, 4, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 5, 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 2, 25, 1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 3, 30, 2, 35, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 1, 43, 44, 45, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %r1.global-to-local, { 38, 39, 40, 41, 42, 43, 44, 45, 12, 13, 14, 15, 16, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 32, 31, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 61, 42, 44, 43, 46, 45, 47, 48, 49, 51, 50, 52, 54, 53, 55, 56, 57, 58, 60, 59, 2, 3, 4, 5, 1, 6, 10, 7, 8, 9, 11, 13, 12, 15, 14, 16, 17, 18, 19, 21, 20, 22, 23, 25, 24, 26, 28, 27, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %lr.global-to-local, { 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %ip.global-to-local, { 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11 }
  uselistorder i32* %fp.global-to-local, { 5, 0, 1, 2, 3, 4 }
  uselistorder i1* %cpsr_z.global-to-local, { 18, 36, 19, 20, 21, 22, 23, 24, 29, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 41, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_c610, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c604, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_c4ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c44c, { 1, 0 }
  uselistorder label %.thread37, { 1, 0 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %bb136, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
  uselistorder label %dec_label_pc_c0e8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c0e0, { 1, 0 }
  uselistorder label %dec_label_pc_c0d4, { 1, 0 }
}

define i32 @function_c688(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_c688:
  call void @__pseudo_cond_branch(i1 false, i32 11145144)
  %v0_c68c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c68c, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_c688
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_c688, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_c690(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c690:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c6c0, label %dec_label_pc_c69c

dec_label_pc_c69c:                                ; preds = %dec_label_pc_c690
  %v0_c6a0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c6a0

dec_label_pc_c6a0:                                ; preds = %dec_label_pc_c6a0, %dec_label_pc_c69c
  %v0_c6b4 = phi i32 [ %v2_c6b4, %dec_label_pc_c6a0 ], [ 0, %dec_label_pc_c69c ]
  %v0_c6a8 = phi i32 [ %v1_c6a8, %dec_label_pc_c6a0 ], [ %arg1, %dec_label_pc_c69c ]
  %v0_c6b8 = phi i32 [ %v1_c6b8, %dec_label_pc_c6a0 ], [ %v0_c6a0.pre, %dec_label_pc_c69c ]
  %v1_c6a0 = inttoptr i32 %v0_c6b8 to i8*
  %v2_c6a0 = load i8, i8* %v1_c6a0, align 1
  %v3_c6a0 = zext i8 %v2_c6a0 to i32
  %v1_c6a4 = add i32 %v0_c6b8, 1
  %v2_c6a4 = inttoptr i32 %v1_c6a4 to i8*
  %v3_c6a4 = load i8, i8* %v2_c6a4, align 1
  %v4_c6a4 = zext i8 %v3_c6a4 to i32
  %v1_c6a8 = add i32 %v0_c6a8, -2
  %v4_c6ac = mul nuw nsw i32 %v4_c6a4, 256
  %v5_c6ac = or i32 %v4_c6ac, %v3_c6a0
  %v2_c6b4 = add i32 %v5_c6ac, %v0_c6b4
  %v1_c6b8 = add i32 %v0_c6b8, 2
  store i32 %v1_c6b8, i32* @r0, align 4
  %v1_c6a8.cmp = icmp ugt i32 %v1_c6a8, 1
  br i1 %v1_c6a8.cmp, label %dec_label_pc_c6a0, label %dec_label_pc_c6c0

dec_label_pc_c6c0:                                ; preds = %dec_label_pc_c6a0, %dec_label_pc_c690
  %v1_c6c8 = phi i32 [ 0, %dec_label_pc_c690 ], [ %v2_c6b4, %dec_label_pc_c6a0 ]
  %v0_c6c0 = phi i32 [ %arg1, %dec_label_pc_c690 ], [ %v1_c6a8, %dec_label_pc_c6a0 ]
  %v7_c6c0 = icmp eq i32 %v0_c6c0, 1
  br i1 %v7_c6c0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c6c0
  %v1_c6c4 = load i32, i32* @r0, align 4
  %v2_c6c4 = inttoptr i32 %v1_c6c4 to i8*
  %v3_c6c4 = load i8, i8* %v2_c6c4, align 1
  %v4_c6c4 = zext i8 %v3_c6c4 to i32
  %v3_c6c8 = add i32 %v1_c6c8, %v4_c6c4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c6c0, %bb
  %v0_c6cc = phi i32 [ %v1_c6c8, %dec_label_pc_c6c0 ], [ %v3_c6c8, %bb ]
  %v3_c6d0 = urem i32 %v0_c6cc, 65536
  %v4_c6d4 = udiv i32 %v0_c6cc, 65536
  %v5_c6d4 = add nuw nsw i32 %v4_c6d4, %v3_c6d0
  %v4_c6d8 = udiv i32 %v5_c6d4, 65536
  %v5_c6d8 = add nuw nsw i32 %v4_c6d8, %v5_c6d4
  %v1_c6dc = urem i32 %v5_c6d8, 65536
  %v3_c6e4 = xor i32 %v1_c6dc, 65535
  ret i32 %v3_c6e4

; uselistorder directives
  uselistorder i32 %v5_c6d4, { 1, 0 }
  uselistorder i32 %v1_c6b8, { 1, 0 }
  uselistorder i32 %v1_c6a8, { 1, 0, 2 }
  uselistorder i32 %v0_c6b8, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c6ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c6ec:
  %v3_c6fc = urem i32 %arg2, 65536
  %v1_c700 = add i32 %arg1, 12
  %v1_c704 = inttoptr i32 %v1_c700 to i32*
  %v2_c704 = load i32, i32* %v1_c704, align 4
  %v3_c704 = add i32 %arg1, 16
  %v4_c704 = inttoptr i32 %v3_c704 to i32*
  %v5_c704 = load i32, i32* %v4_c704, align 4
  %v7_c708 = icmp sgt i32 %arg3, 1
  br i1 %v7_c708, label %dec_label_pc_c714.preheader, label %dec_label_pc_c734

dec_label_pc_c714.preheader:                      ; preds = %dec_label_pc_c6ec
  %v0_c714.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c714

dec_label_pc_c714:                                ; preds = %dec_label_pc_c714.preheader, %dec_label_pc_c714
  %v0_c728 = phi i32 [ 0, %dec_label_pc_c714.preheader ], [ %v2_c728, %dec_label_pc_c714 ]
  %v0_c71c = phi i32 [ %arg3, %dec_label_pc_c714.preheader ], [ %v1_c71c, %dec_label_pc_c714 ]
  %v0_c72c = phi i32 [ %v0_c714.pre, %dec_label_pc_c714.preheader ], [ %v1_c72c, %dec_label_pc_c714 ]
  %v1_c714 = inttoptr i32 %v0_c72c to i8*
  %v2_c714 = load i8, i8* %v1_c714, align 1
  %v3_c714 = zext i8 %v2_c714 to i32
  %v1_c718 = add i32 %v0_c72c, 1
  %v2_c718 = inttoptr i32 %v1_c718 to i8*
  %v3_c718 = load i8, i8* %v2_c718, align 1
  %v4_c718 = zext i8 %v3_c718 to i32
  %v1_c71c = add nsw i32 %v0_c71c, -2
  %v4_c720 = mul nuw nsw i32 %v4_c718, 256
  %v5_c720 = or i32 %v4_c720, %v3_c714
  %v2_c728 = add i32 %v5_c720, %v0_c728
  %v1_c72c = add i32 %v0_c72c, 2
  store i32 %v1_c72c, i32* @r1, align 4
  %v8_c730 = icmp sgt i32 %v1_c71c, 1
  br i1 %v8_c730, label %dec_label_pc_c714, label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c714, %dec_label_pc_c6ec
  %v1_c73c = phi i32 [ 0, %dec_label_pc_c6ec ], [ %v2_c728, %dec_label_pc_c714 ]
  %v0_c734 = phi i32 [ %arg3, %dec_label_pc_c6ec ], [ %v1_c71c, %dec_label_pc_c714 ]
  %v7_c734 = icmp eq i32 %v0_c734, 1
  br i1 %v7_c734, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c734
  %v1_c738 = load i32, i32* @r1, align 4
  %v2_c738 = inttoptr i32 %v1_c738 to i8*
  %v3_c738 = load i8, i8* %v2_c738, align 1
  %v4_c738 = zext i8 %v3_c738 to i32
  %v3_c73c = add i32 %v4_c738, %v1_c73c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c734, %bb
  %v0_c760 = phi i32 [ %v1_c73c, %dec_label_pc_c734 ], [ %v3_c73c, %bb ]
  %v3_c744 = urem i32 %v2_c704, 65536
  %v1_c74c = add i32 %arg1, 9
  %v2_c74c = inttoptr i32 %v1_c74c to i8*
  %v3_c74c = load i8, i8* %v2_c74c, align 1
  %v4_c74c = zext i8 %v3_c74c to i32
  %v3_c750 = urem i32 %v5_c704, 65536
  %v4_c754 = udiv i32 %v2_c704, 65536
  %v3_c75c = mul nuw nsw i32 %v4_c74c, 256
  %v4_c760 = udiv i32 %v5_c704, 65536
  %v5_c760 = add i32 %v0_c760, %v4_c760
  %v2_c764 = add i32 %v5_c760, %v3_c75c
  %v5_c754 = add nuw nsw i32 %v3_c744, %v3_c6fc
  %v2_c758 = add nuw nsw i32 %v5_c754, %v4_c754
  %v2_c768 = add nuw nsw i32 %v2_c758, %v3_c750
  %v2_c76c = add i32 %v2_c764, %v2_c768
  %tmp = icmp ult i32 %v2_c76c, 65536
  br i1 %tmp, label %dec_label_pc_c78c, label %dec_label_pc_c778

dec_label_pc_c778:                                ; preds = %.thread, %dec_label_pc_c778
  %v2_c7801 = phi i32 [ %v2_c780, %dec_label_pc_c778 ], [ %v2_c76c, %.thread ]
  %v3_c7842.in = phi i32 [ %v2_c780, %dec_label_pc_c778 ], [ %v2_c76c, %.thread ]
  %v3_c7842 = udiv i32 %v3_c7842.in, 65536
  %v3_c77c = urem i32 %v2_c7801, 65536
  %v2_c780 = add nuw nsw i32 %v3_c77c, %v3_c7842
  %tmp14 = icmp ult i32 %v2_c780, 65536
  br i1 %tmp14, label %dec_label_pc_c78c.loopexit, label %dec_label_pc_c778

dec_label_pc_c78c.loopexit:                       ; preds = %dec_label_pc_c778
  br label %dec_label_pc_c78c

dec_label_pc_c78c:                                ; preds = %dec_label_pc_c78c.loopexit, %.thread
  %v0_c78c = phi i32 [ %v2_c780, %dec_label_pc_c78c.loopexit ], [ %v2_c76c, %.thread ]
  %v1_c78c = urem i32 %v0_c78c, 65536
  %v3_c794 = xor i32 %v1_c78c, 65535
  ret i32 %v3_c794

; uselistorder directives
  uselistorder i32 %v2_c780, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c76c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c73c, { 1, 0 }
  uselistorder i32 %v1_c72c, { 1, 0 }
  uselistorder i32 %v1_c71c, { 0, 2, 1 }
  uselistorder i32 %v0_c72c, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c778, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c714, { 1, 0 }
}

define i32 @function_c79c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c79c:
  store i32 ptrtoint (i32* @global_var_c7b4.59 to i32), i32* @global_var_1b028.61, align 4
  ret i32 %arg1
}

define i32 @function_c7b4() local_unnamed_addr {
dec_label_pc_c7b4:
  %stack_var_-8 = alloca i32, align 4
  %v3_c7b4 = load i32, i32* @r4, align 4
  store i32 %v3_c7b4, i32* %stack_var_-8, align 4
  %v1_c7bc = call i32 @function_fb14(i32 1)
  store i32 -1378207815, i32* @global_var_1b238.65, align 4
  %v3_c7d4 = call i32 @function_fa30(i32 1, i32* null)
  %v4_c7d4 = inttoptr i32 %v3_c7d4 to i8*
  %v2_c7d8 = add i32 %v3_c7d4, 1
  %v3_c7d8 = inttoptr i32 %v2_c7d8 to i8*
  %v4_c7d8 = load i8, i8* %v3_c7d8, align 1
  %v3_c7dc = load i8, i8* %v4_c7d4, align 1
  store i8 %v4_c7d8, i8* bitcast (i32* @global_var_1b237.66 to i8*), align 4
  store i8 %v3_c7dc, i8* bitcast (i32* @global_var_1b236.67 to i8*), align 4
  %v2_c7f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_c7f4, i32* @r4, align 4
  %v1_c7f8 = call i32 @function_fa5c(i32 1)
  %v0_c7fc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c7fc, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_c7b4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_c7b4, %bb
  ret i32 %v1_c7f8

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_c804(i32 %arg1) local_unnamed_addr {
dec_label_pc_c804:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_c804 = load i32, i32* @r4, align 4
  %v9_c804 = load i32, i32* @r6, align 4
  %v12_c804 = load i32, i32* @r7, align 4
  %v15_c804 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_c820 = call i32 @function_10bdc(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1b020.69 to i32), i32* @r6, align 4
  %v7_c828 = icmp eq i32 %v3_c820, -1
  store i32 %v3_c820, i32* @global_var_1b020.69, align 4
  br i1 %v7_c828, label %dec_label_pc_c8e8, label %dec_label_pc_c834

dec_label_pc_c834:                                ; preds = %dec_label_pc_c804
  %v0_c838 = load i32, i32* @r4, align 4
  %v6_c848 = call i32 @function_10bac(i32 %v3_c820, i32 %v0_c838, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_c84c = load i32, i32* @global_var_1b020.69, align 4
  store i32 %v2_c84c, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_c85c = call i32 @function_1057c(i32 %v2_c84c, i32 3)
  %v1_c864 = or i32 %v2_c85c, 2048
  store i32 %v1_c864, i32* @r2, align 4
  %v0_c868 = load i32, i32* @r4, align 4
  %v2_c86c = call i32 @function_1057c(i32 %v0_c868, i32 4)
  store i32 ptrtoint (i8** @global_var_1b02c.71 to i32), i32* @r8, align 4
  %v2_c874 = load i8, i8* bitcast (i8** @global_var_1b02c.71 to i8*), align 4
  %v2_c878 = icmp eq i8 %v2_c874, 0
  br i1 %v2_c878, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_c834
  br label %bb

.thread:                                          ; preds = %dec_label_pc_c834
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_c8b0 = call i32 @function_1093c()
  %v0_c8b4 = load i32, i32* @r5, align 4
  %v2_c8b4 = inttoptr i32 %v0_c8b0 to i32*
  store i32 %v0_c8b4, i32* %v2_c8b4, align 4
  %v2_c8b8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_c8b8, i32* @r7, align 4
  store i32 %v0_c8b0, i32* @r4, align 4
  %v2_c8c4 = load i32, i32* @global_var_1b020.69, align 4
  %v3_c8cc = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_c8cc = call i32 @function_10a0c(i32 %v2_c8c4, %sockaddr* %v3_c8cc, i32 16)
  %v7_c8d0 = icmp eq i32 %v4_c8cc, -1
  br i1 %v7_c8d0, label %dec_label_pc_c8f0, label %dec_label_pc_c8d8

dec_label_pc_c8d8:                                ; preds = %bb
  %v2_c8e0 = load i32, i32* @global_var_1b020.69, align 4
  %v2_c8e4 = call i32 @function_10ac0(i32 %v2_c8e0, i32 1)
  br label %dec_label_pc_c8e8

dec_label_pc_c8e8:                                ; preds = %dec_label_pc_c804, %dec_label_pc_c8fc, %dec_label_pc_c8d8
  %v20_c8ec = phi i32 [ %v3_c820, %dec_label_pc_c804 ], [ %v1_c940, %dec_label_pc_c8fc ], [ %v2_c8e4, %dec_label_pc_c8d8 ]
  store i32 %v3_c804, i32* @r4, align 4
  store i32 %v9_c804, i32* @r6, align 4
  store i32 %v12_c804, i32* @r7, align 4
  store i32 %v15_c804, i32* @r8, align 4
  ret i32 %v20_c8ec

dec_label_pc_c8f0:                                ; preds = %bb
  %v0_c8f0 = load i32, i32* @r4, align 4
  %v1_c8f0 = inttoptr i32 %v0_c8f0 to i32*
  %v2_c8f0 = load i32, i32* %v1_c8f0, align 4
  %v7_c8f4 = icmp eq i32 %v2_c8f0, 99
  br i1 %v7_c8f4, label %dec_label_pc_c948, label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c948, %bb21, %dec_label_pc_c8f0
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_c914 = load i32, i32* @global_var_1b020.69, align 4
  %v4_c92c = call i32 @function_10a38(i32 %v2_c914, %sockaddr* %v3_c8cc, i32 16)
  %v1_c934 = call i32 @function_1154c(i32 5)
  %v2_c938 = load i32, i32* @global_var_1b020.69, align 4
  %v1_c93c = call i32 @function_10640(i32 %v2_c938)
  %v1_c940 = call i32 @function_c804(i32 %v1_c93c)
  br label %dec_label_pc_c8e8

dec_label_pc_c948:                                ; preds = %dec_label_pc_c8f0
  %v2_c948 = load i8, i8* bitcast (i8** @global_var_1b02c.71 to i8*), align 4
  %v3_c948 = zext i8 %v2_c948 to i32
  %v1_c94c = load i32, i32* @r5, align 4
  %v9_c94c = icmp eq i32 %v3_c948, %v1_c94c
  br i1 %v9_c94c, label %dec_label_pc_c8fc, label %bb21

bb21:                                             ; preds = %dec_label_pc_c948
  %v2_c954 = trunc i32 %v1_c94c to i8
  store i8 %v2_c954, i8* bitcast (i8** @global_var_1b02c.71 to i8*), align 4
  br label %dec_label_pc_c8fc

; uselistorder directives
  uselistorder i32 %v3_c820, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i8* bitcast (i8** @global_var_1b02c.71 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1b02c.71, { 1, 0 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c8e8, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_c968(i32 %arg1) local_unnamed_addr {
dec_label_pc_c968:
  %stack_var_-16 = alloca i32, align 4
  %v3_c968 = load i32, i32* @r4, align 4
  %v6_c968 = load i32, i32* @r5, align 4
  %v2_c96c = ptrtoint i32* %stack_var_-16 to i32
  %v0_c970 = call i32 @function_1066c()
  %v7_c974 = icmp eq i32 %v0_c970, -1
  %. = zext i1 %v7_c974 to i32
  %tmp10 = icmp slt i32 %v0_c970, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_c990 = icmp eq i32 %storemerge4, 0
  store i32 %v0_c970, i32* @global_var_1b19c.74, align 4
  br i1 %v2_c990, label %dec_label_pc_c9a4, label %dec_label_pc_c99c

dec_label_pc_c99c:                                ; preds = %dec_label_pc_c968
  store i32 %v3_c968, i32* @r4, align 4
  store i32 %v6_c968, i32* @r5, align 4
  ret i32 %v0_c970

dec_label_pc_c9a4:                                ; preds = %dec_label_pc_c968
  store i32 1, i32* %stack_var_-16, align 4
  %v1_c9b0 = call i32 @function_fb14(i32 17)
  %v1_c9b8 = call i32 @function_fb14(i32 18)
  %v0_c9bc = load i32, i32* @r5, align 4
  %v2_c9c4 = inttoptr i32 %v0_c9bc to i32*
  %v3_c9c4 = call i32 @function_fa30(i32 17, i32* %v2_c9c4)
  %v2_c9cc = inttoptr i32 %v3_c9c4 to i8*
  %v3_c9cc = call i32 @function_1076c(i8* %v2_c9cc, i32 2)
  %v7_c9d0 = icmp eq i32 %v3_c9cc, -1
  store i32 %v3_c9cc, i32* @r4, align 4
  br i1 %v7_c9d0, label %dec_label_pc_ca18, label %dec_label_pc_c9dc

dec_label_pc_c9dc:                                ; preds = %dec_label_pc_ca18, %dec_label_pc_c9a4
  %v0_c9e8 = phi i32 [ %v3_ca28, %dec_label_pc_ca18 ], [ %v3_c9cc, %dec_label_pc_c9a4 ]
  %v3_c9f0 = call i32 @function_106f0(i32 %v0_c9e8, i32 -2147199228, i32 %v2_c96c)
  br label %dec_label_pc_c9f4

dec_label_pc_c9f4:                                ; preds = %dec_label_pc_c9f4, %dec_label_pc_c9dc
  %v0_ca00 = load i32, i32* @r4, align 4
  %v3_ca08 = call i32 @function_106f0(i32 %v0_ca00, i32 -2147199227, i32 0)
  %v1_ca10 = call i32 @function_1154c(i32 10)
  br label %dec_label_pc_c9f4

dec_label_pc_ca18:                                ; preds = %dec_label_pc_c9a4
  %v0_ca18 = load i32, i32* @r5, align 4
  %v2_ca20 = inttoptr i32 %v0_ca18 to i32*
  %v3_ca20 = call i32 @function_fa30(i32 18, i32* %v2_ca20)
  %v2_ca28 = inttoptr i32 %v3_ca20 to i8*
  %v3_ca28 = call i32 @function_1076c(i8* %v2_ca28, i32 2)
  %v3_ca2c = icmp eq i32 %v3_ca28, -1
  store i32 %v3_ca28, i32* @r4, align 4
  br i1 %v3_ca2c, label %dec_label_pc_ca38, label %dec_label_pc_c9dc

dec_label_pc_ca38:                                ; preds = %dec_label_pc_ca18
  %v1_ca3c = call i32 @function_fa5c(i32 17)
  %v1_ca44 = call i32 @function_fa5c(i32 18)
  %v0_ca48 = load i32, i32* @r5, align 4
  %v1_ca4c = call i32 @function_114b8(i32 %v0_ca48)
  %v0_ca50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ca50, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_ca38
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_ca38, %bb13
  ret i32 %v1_ca4c

; uselistorder directives
  uselistorder i32 %v3_ca28, { 1, 2, 0 }
  uselistorder i32 %v3_c9cc, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_c970, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_106f0, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_ca54(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_ca54:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ca54 = load i32, i32* @r4, align 4
  store i32 %v3_ca54, i32* %stack_var_-36, align 4
  %v6_ca54 = load i32, i32* @r5, align 4
  %v9_ca54 = load i32, i32* @r6, align 4
  %v15_ca54 = load i32, i32* @r8, align 4
  %v2_ca60 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_ca60, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_ca60, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_ca78 = call i32 @function_10c38(i32 %v2_ca60)
  store i32 %v2_ca60, i32* @r0, align 4
  %v2_ca84 = call i32 @function_10c08(i32 %v2_ca60, i32 2)
  %v0_ca88 = load i32, i32* @r5, align 4
  store i32 %v0_ca88, i32* %r2.global-to-local, align 4
  %v3_ca94 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_ca94 = call i32 @function_10890(i32 %v0_ca88, %_TYPEDEF_sigset_t* %v3_ca94, i32 %v0_ca88)
  %v2_caa0 = call i32 @function_10c50(i32 17, i32 1)
  %v2_caac = call i32 @function_10c50(i32 5, i32 51100)
  %v0_cab0 = call i32 @function_10190()
  store i8 -92, i8* bitcast (i32* @global_var_1b237.66 to i8*), align 4
  store i32 %v0_cab0, i32* @global_var_1b230.48, align 4
  store i32 -583215265, i32* %r2.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1b234.63 to i8*), align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 -583215265, i32* @global_var_1b238.65, align 4
  store i8 1, i8* bitcast (i32* @global_var_1b236.67 to i8*), align 4
  %v0_cae8 = load i32, i32* @r5, align 4
  %v1_cae8 = trunc i32 %v0_cae8 to i8
  store i8 %v1_cae8, i8* bitcast (i32* @global_var_1b235.78 to i8*), align 4
  %v6_caec = call i32 @function_fbcc(i32 %v0_cab0, i32 ptrtoint (i8** @global_var_1b234.63 to i32), i32 -583215265, i32 1)
  store i32 ptrtoint (i32* @global_var_c7b4.59 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_c7b4.59 to i32), i32* @global_var_1b028.61, align 4
  %v2_cb00 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_cb00, i32* @sb, align 4
  %v1_cb04 = call i32 @function_c804(i32 %v6_caec)
  %v1_cb08 = call i32 @function_d260(i32 %v1_cb04)
  %v2_cb14 = call i32 @function_ffd8(i32 %v2_cb00, i32 32)
  %v0_cb18 = load i32, i32* @r6, align 4
  %v7_cb18 = icmp eq i32 %v0_cb18, 2
  br i1 %v7_cb18, label %dec_label_pc_cc40, label %dec_label_pc_cb20

dec_label_pc_cb20:                                ; preds = %dec_label_pc_cc40, %dec_label_pc_ca54, %dec_label_pc_cc50
  %v0_cb20 = call i32 @function_d208()
  store i32 %v0_cb20, i32* %r6.global-to-local, align 4
  %v0_cb28 = load i32, i32* @r8, align 4
  %v1_cb28 = inttoptr i32 %v0_cb28 to i32*
  %v2_cb28 = load i32, i32* %v1_cb28, align 4
  %v1_cb2c = inttoptr i32 %v2_cb28 to i8*
  %v2_cb2c = call i32 @function_ff38(i8* %v1_cb2c)
  %v0_cb34 = load i32, i32* @r8, align 4
  %v1_cb34 = inttoptr i32 %v0_cb34 to i32*
  %v2_cb34 = load i32, i32* %v1_cb34, align 4
  %v1_cb38 = inttoptr i32 %v2_cb34 to i8*
  %v2_cb38 = call i32 @function_ff38(i8* %v1_cb38)
  %v1_cb3c = sub i32 20, %v2_cb2c
  store i32 %v2_cb38, i32* @r5, align 4
  %v0_cb44 = load i32, i32* %r6.global-to-local, align 4
  %v2_cb48 = call i32 @function_103c8(i32 %v0_cb44, i32 %v1_cb3c)
  %v1_cb50 = load i32, i32* @r5, align 4
  %v2_cb50 = add i32 %v1_cb50, %v2_cb48
  store i32 %v2_cb50, i32* @r4, align 4
  %v2_cb54 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_cb54, i32* @r6, align 4
  %v2_cb60 = call i32 @function_d2bc(i32 %v2_cb54, i32 %v2_cb50)
  %v2_cb64 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_cb64, i32* %r2.global-to-local, align 4
  %v1_cb68 = load i32, i32* @r4, align 4
  %v2_cb68 = add i32 %v1_cb68, %v2_cb64
  store i32 %v2_cb68, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_cb74 = load i32, i32* @r8, align 4
  %v1_cb74 = inttoptr i32 %v0_cb74 to i32*
  %v2_cb74 = load i32, i32* %v1_cb74, align 4
  store i32 %v2_cb74, i32* @r0, align 4
  %v3_cb78 = add i32 %v2_cb68, -72
  %v4_cb78 = inttoptr i32 %v3_cb78 to i8*
  store i8 0, i8* %v4_cb78, align 1
  %v2_cb7c = inttoptr i32 %v2_cb74 to i8*
  %v3_cb7c = call i32 @function_ff60(i8* %v2_cb7c, i32 %v2_cb54)
  %v2_cb88 = call i32 @function_ffd8(i32 %v2_cb54, i32 32)
  %v0_cb8c = call i32 @function_d208()
  store i32 %v0_cb8c, i32* @r7, align 4
  %v0_cb94 = load i32, i32* @r8, align 4
  %v1_cb94 = inttoptr i32 %v0_cb94 to i32*
  %v2_cb94 = load i32, i32* %v1_cb94, align 4
  %v1_cb98 = inttoptr i32 %v2_cb94 to i8*
  %v2_cb98 = call i32 @function_ff38(i8* %v1_cb98)
  %v0_cba0 = load i32, i32* @r8, align 4
  %v1_cba0 = inttoptr i32 %v0_cba0 to i32*
  %v2_cba0 = load i32, i32* %v1_cba0, align 4
  %v1_cba4 = inttoptr i32 %v2_cba0 to i8*
  %v2_cba4 = call i32 @function_ff38(i8* %v1_cba4)
  %v1_cba8 = sub i32 20, %v2_cb98
  store i32 %v2_cba4, i32* @r5, align 4
  %v0_cbb0 = load i32, i32* @r7, align 4
  %v2_cbb4 = call i32 @function_103c8(i32 %v0_cbb0, i32 %v1_cba8)
  %v1_cbb8 = load i32, i32* @r5, align 4
  %v2_cbb8 = add i32 %v1_cbb8, %v2_cbb4
  store i32 %v2_cbb8, i32* @r4, align 4
  %v2_cbc4 = call i32 @function_d2bc(i32 %v2_cb54, i32 %v2_cbb8)
  %v1_cbcc = load i32, i32* @r4, align 4
  %v2_cbcc = add i32 %v1_cbcc, %v2_cb64
  store i32 %v2_cbcc, i32* @r3, align 4
  %v0_cbd0 = load i32, i32* @sl, align 4
  %v1_cbd0 = trunc i32 %v0_cbd0 to i8
  %v3_cbd0 = add i32 %v2_cbcc, -72
  %v4_cbd0 = inttoptr i32 %v3_cbd0 to i8*
  store i8 %v1_cbd0, i8* %v4_cbd0, align 1
  %v2_cbdc = call i32 @function_107d8(i32 15, i32 %v2_cb54)
  %v1_cbe4 = call i32 @function_fb14(i32 3)
  %v3_cbf4 = call i32 @function_fa30(i32 3, i32* nonnull %stack_var_-44)
  %v3_cbf8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cbf8, i32* %r2.global-to-local, align 4
  %v3_cc04 = inttoptr i32 %v3_cbf4 to i32*
  %v4_cc04 = call i32 @function_10910(i32 1, i32* %v3_cc04, i32 %v3_cbf8)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_cc14 = call i32 @function_10910(i32 1, i32* nonnull @global_var_123d4.82, i32 1)
  %v1_cc1c = call i32 @function_fa5c(i32 3)
  %v1_cc20 = call i32 @function_85e8(i32 %v1_cc1c)
  %v1_cc24 = call i32 @function_c968(i32 %v1_cc20)
  %v0_cc28 = call i32 @function_1066c()
  %v1_cc2c = load i32, i32* @sl, align 4
  %v7_cc30 = icmp sgt i32 %v0_cc28, %v1_cc2c
  br i1 %v7_cc30, label %dec_label_pc_cc34, label %dec_label_pc_cc78

dec_label_pc_cc34:                                ; preds = %dec_label_pc_cb20
  store i32 %v6_ca54, i32* %r5.global-to-local, align 4
  store i32 %v9_ca54, i32* %r6.global-to-local, align 4
  store i32 %v15_ca54, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_cc40:                                ; preds = %dec_label_pc_ca54
  %v0_cc40 = load i32, i32* @r8, align 4
  %v1_cc40 = add i32 %v0_cc40, 4
  %v2_cc40 = inttoptr i32 %v1_cc40 to i32*
  %v3_cc40 = load i32, i32* %v2_cc40, align 4
  %v1_cc44 = inttoptr i32 %v3_cc40 to i8*
  %v2_cc44 = call i32 @function_ff38(i8* %v1_cc44)
  %v8_cc4c = icmp sgt i32 %v2_cc44, 31
  br i1 %v8_cc4c, label %dec_label_pc_cb20, label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc40
  %v0_cc50 = load i32, i32* @r8, align 4
  %v1_cc50 = add i32 %v0_cc50, 4
  %v2_cc50 = inttoptr i32 %v1_cc50 to i32*
  %v3_cc50 = load i32, i32* %v2_cc50, align 4
  store i32 %v2_cb00, i32* @r0, align 4
  %v2_cc58 = bitcast i32* %stack_var_-140 to i8*
  %v3_cc58 = call i32 @function_ff60(i8* %v2_cc58, i32 %v3_cc50)
  %v0_cc5c = load i32, i32* @r8, align 4
  %v1_cc5c = add i32 %v0_cc5c, 4
  %v2_cc5c = inttoptr i32 %v1_cc5c to i32*
  %v3_cc5c = load i32, i32* %v2_cc5c, align 4
  %v1_cc64 = inttoptr i32 %v3_cc5c to i8*
  %v2_cc64 = call i32 @function_ff38(i8* %v1_cc64)
  %v2_cc70 = call i32 @function_ffd8(i32 %v3_cc5c, i32 %v2_cc64)
  br label %dec_label_pc_cb20

dec_label_pc_cc78:                                ; preds = %dec_label_pc_cb20
  %v1_cc78 = call i32 @function_10864(i32 %v0_cc28)
  %v0_cc80 = load i32, i32* @sl, align 4
  %v1_cc84 = call i32 @function_10640(i32 %v0_cc80)
  %v1_cc8c = call i32 @function_10640(i32 1)
  %v1_cc94 = call i32 @function_10640(i32 2)
  %v1_cc98 = call i32 @function_85e8(i32 %v1_cc94)
  %v1_cc9c = call i32 @function_c968(i32 %v1_cc98)
  %v1_cca0 = call i32 @function_d624(i32 %v1_cc9c)
  store i32 ptrtoint (i32* @global_var_1b024.84 to i32), i32* @fp, align 4
  %v2_ccb0 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_ccb0, i32* @r6, align 4
  %v2_ccb4 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_ccb4, i32* @r7, align 4
  %v2_cd8c = ptrtoint i32* %stack_var_-60 to i32
  %v2_cfcc = ptrtoint i32* %stack_var_-52 to i32
  %v4_cfe0 = bitcast i8** %stack_var_-38 to i32*
  %v2_d138 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_cff0 = ptrtoint i32* %stack_var_-48 to i32
  %v1_d090 = bitcast i32* %stack_var_-140 to i8*
  %v5_d05c = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_d06c = sub i32 0, %v1_cc78
  br label %dec_label_pc_ccb8

dec_label_pc_ccb8:                                ; preds = %dec_label_pc_ccb8.backedge, %dec_label_pc_cc78
  %v2_ccc045 = phi i32 [ %v2_ccc045.pre, %dec_label_pc_ccb8.backedge ], [ %v2_ccb0, %dec_label_pc_cc78 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_ccc047 = inttoptr i32 %v2_ccc045 to i32*
  store i32 0, i32* %v4_ccc047, align 4
  %v0_ccc448 = load i32, i32* %r3.global-to-local, align 4
  %v1_ccc449 = add i32 %v0_ccc448, 4
  store i32 %v1_ccc449, i32* %r3.global-to-local, align 4
  %v7_ccc850 = icmp eq i32 %v1_ccc449, 128
  br i1 %v7_ccc850, label %dec_label_pc_ccd0, label %dec_label_pc_ccc0.dec_label_pc_ccc0_crit_edge

dec_label_pc_ccc0.dec_label_pc_ccc0_crit_edge:    ; preds = %dec_label_pc_ccb8, %dec_label_pc_ccc0.dec_label_pc_ccc0_crit_edge
  %v1_ccc451 = phi i32 [ %v1_ccc4, %dec_label_pc_ccc0.dec_label_pc_ccc0_crit_edge ], [ %v1_ccc449, %dec_label_pc_ccb8 ]
  %v0_ccc0.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_ccc0 = load i32, i32* @r6, align 4
  %v3_ccc0 = add i32 %v2_ccc0, %v1_ccc451
  %v4_ccc0 = inttoptr i32 %v3_ccc0 to i32*
  store i32 %v0_ccc0.pre, i32* %v4_ccc0, align 4
  %v0_ccc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_ccc4 = add i32 %v0_ccc4, 4
  store i32 %v1_ccc4, i32* %r3.global-to-local, align 4
  %v7_ccc8 = icmp eq i32 %v1_ccc4, 128
  br i1 %v7_ccc8, label %dec_label_pc_ccd0, label %dec_label_pc_ccc0.dec_label_pc_ccc0_crit_edge

dec_label_pc_ccd0:                                ; preds = %dec_label_pc_ccc0.dec_label_pc_ccc0_crit_edge, %dec_label_pc_ccb8
  %v0_ccd0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ccd0, i32* %r3.global-to-local, align 4
  store i32 %v0_ccd0, i32* @r4, align 4
  %v2_ccd852 = load i32, i32* @r7, align 4
  %v3_ccd853 = add i32 %v2_ccd852, %v0_ccd0
  %v4_ccd854 = inttoptr i32 %v3_ccd853 to i32*
  store i32 %v0_ccd0, i32* %v4_ccd854, align 4
  %v0_ccdc55 = load i32, i32* %r3.global-to-local, align 4
  %v1_ccdc56 = add i32 %v0_ccdc55, 4
  store i32 %v1_ccdc56, i32* %r3.global-to-local, align 4
  %v7_cce057 = icmp eq i32 %v1_ccdc56, 128
  br i1 %v7_cce057, label %dec_label_pc_cce8, label %dec_label_pc_ccd8.dec_label_pc_ccd8_crit_edge

dec_label_pc_ccd8.dec_label_pc_ccd8_crit_edge:    ; preds = %dec_label_pc_ccd0, %dec_label_pc_ccd8.dec_label_pc_ccd8_crit_edge
  %v1_ccdc58 = phi i32 [ %v1_ccdc, %dec_label_pc_ccd8.dec_label_pc_ccd8_crit_edge ], [ %v1_ccdc56, %dec_label_pc_ccd0 ]
  %v0_ccd8.pre = load i32, i32* @r4, align 4
  %v2_ccd8 = load i32, i32* @r7, align 4
  %v3_ccd8 = add i32 %v2_ccd8, %v1_ccdc58
  %v4_ccd8 = inttoptr i32 %v3_ccd8 to i32*
  store i32 %v0_ccd8.pre, i32* %v4_ccd8, align 4
  %v0_ccdc = load i32, i32* %r3.global-to-local, align 4
  %v1_ccdc = add i32 %v0_ccdc, 4
  store i32 %v1_ccdc, i32* %r3.global-to-local, align 4
  %v7_cce0 = icmp eq i32 %v1_ccdc, 128
  br i1 %v7_cce0, label %dec_label_pc_cce8, label %dec_label_pc_ccd8.dec_label_pc_ccd8_crit_edge

dec_label_pc_cce8:                                ; preds = %dec_label_pc_ccd8.dec_label_pc_ccd8_crit_edge, %dec_label_pc_ccd0
  store i32 ptrtoint (i32* @global_var_1b020.69 to i32), i32* %r2.global-to-local, align 4
  %v2_ccec = load i32, i32* @global_var_1b020.69, align 4
  %v7_ccf0 = icmp eq i32 %v2_ccec, -1
  br i1 %v7_ccf0, label %dec_label_pc_cd1c, label %dec_label_pc_ccf8

dec_label_pc_ccf8:                                ; preds = %dec_label_pc_cce8
  %v3_ccf8 = udiv i32 %v2_ccec, 32
  %v3_ccfc = mul nuw nsw i32 %v3_ccf8, 4
  %v2_cd04 = add i32 %v3_ccfc, %v2_cb64
  store i32 %v2_cd04, i32* %r3.global-to-local, align 4
  %v1_cd08 = add i32 %v2_cd04, -360
  %v2_cd08 = inttoptr i32 %v1_cd08 to i32*
  %v3_cd08 = load i32, i32* %v2_cd08, align 4
  %v1_cd0c = urem i32 %v2_ccec, 32
  %v7_cd14 = shl i32 1, %v1_cd0c
  %v8_cd14 = or i32 %v3_cd08, %v7_cd14
  store i32 %v8_cd14, i32* %r2.global-to-local, align 4
  store i32 %v8_cd14, i32* %v2_cd08, align 4
  br label %dec_label_pc_cd1c

dec_label_pc_cd1c:                                ; preds = %dec_label_pc_cce8, %dec_label_pc_ccf8
  %v2_cd1c = load i32, i32* @global_var_1b024.84, align 4
  store i32 %v2_cd1c, i32* %r3.global-to-local, align 4
  %v7_cd20 = icmp eq i32 %v2_cd1c, -1
  store i32 ptrtoint (i32* @global_var_1b024.84 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_cd20, label %dec_label_pc_cf58, label %dec_label_pc_cd2c

dec_label_pc_cd2c:                                ; preds = %dec_label_pc_cf58, %dec_label_pc_cd1c, %.thread
  store i32 ptrtoint (i8** @global_var_1b1a0.87 to i32), i32* %r2.global-to-local, align 4
  %v2_cd30 = load i8, i8* bitcast (i8** @global_var_1b1a0.87 to i8*), align 4
  %v2_cd34 = icmp eq i8 %v2_cd30, 0
  %v2_ce74 = load i32, i32* @global_var_1b024.84, align 4
  %v3_ce78 = udiv i32 %v2_ce74, 32
  store i32 %v3_ce78, i32* %r3.global-to-local, align 4
  br i1 %v2_cd34, label %dec_label_pc_ce74, label %dec_label_pc_cd3c

dec_label_pc_cd3c:                                ; preds = %dec_label_pc_cd2c
  %v3_cd44 = mul nuw nsw i32 %v3_ce78, 4
  %v2_cd4c = add i32 %v3_cd44, %v2_cb64
  store i32 %v2_cd4c, i32* %r3.global-to-local, align 4
  %v1_cd50 = add i32 %v2_cd4c, -488
  %v2_cd50 = inttoptr i32 %v1_cd50 to i32*
  %v3_cd50 = load i32, i32* %v2_cd50, align 4
  %v1_cd54 = urem i32 %v2_ce74, 32
  %v7_cd5c = shl i32 1, %v1_cd54
  %v8_cd5c = or i32 %v3_cd50, %v7_cd5c
  store i32 %v8_cd5c, i32* %r2.global-to-local, align 4
  store i32 %v8_cd5c, i32* %v2_cd50, align 4
  br label %dec_label_pc_cd64

dec_label_pc_cd64:                                ; preds = %dec_label_pc_ce74, %dec_label_pc_cd3c
  %v2_cd68 = load i32, i32* @global_var_1b020.69, align 4
  %v2_cd6c = load i32, i32* @global_var_1b024.84, align 4
  store i32 %v2_cd6c, i32* %r3.global-to-local, align 4
  %v5_cd78 = icmp slt i32 %v2_cd68, %v2_cd6c
  br i1 %v5_cd78, label %bb, label %bb42

bb:                                               ; preds = %dec_label_pc_cd64
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_cd64, %bb
  %v0_cd90 = phi i32 [ %v2_cd68, %dec_label_pc_cd64 ], [ %v2_cd6c, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_cd90 = add i32 %v0_cd90, 1
  store i32 %v2_ccb4, i32* %r2.global-to-local, align 4
  %v5_cda4 = call i32 @function_10834(i32 %v1_cd90, i32 %v2_ccb0, i32 %v2_ccb4, i32 0, i32 %v2_cd8c)
  %v8_cda8 = icmp eq i32 %v5_cda4, -1
  store i32 %v5_cda4, i32* %r3.global-to-local, align 4
  br i1 %v8_cda8, label %dec_label_pc_ccb8.backedge, label %dec_label_pc_cdb4

dec_label_pc_cdb4:                                ; preds = %bb42
  %v6_cda4 = trunc i32 %v5_cda4 to i8
  %v3_cdb4 = icmp eq i8 %v6_cda4, 0
  br i1 %v3_cdb4, label %dec_label_pc_cdbc, label %dec_label_pc_cddc

dec_label_pc_cdbc:                                ; preds = %dec_label_pc_cdb4
  %v0_cdbc = load i32, i32* @sl, align 4
  %v6_cdc8 = inttoptr i32 %v5_cda4 to i8*
  store i8* %v6_cdc8, i8** %stack_var_-38, align 4
  %v2_cdcc = call i32 @function_10494(i32 %v0_cdbc, i32 6)
  %v2_cdd0 = icmp eq i32 %v2_cdcc, 0
  %v0_cdd4 = load i32, i32* @sl, align 4
  %v1_cdd4 = add i32 %v0_cdd4, 1
  store i32 %v1_cdd4, i32* @sl, align 4
  br i1 %v2_cdd0, label %dec_label_pc_cfc8, label %dec_label_pc_cddc

dec_label_pc_cddc:                                ; preds = %dec_label_pc_cdb4, %dec_label_pc_cdbc, %dec_label_pc_cfc8
  store i32 ptrtoint (i32* @global_var_1b020.69 to i32), i32* %r2.global-to-local, align 4
  %v2_cde0 = load i32, i32* @global_var_1b020.69, align 4
  %v7_cde4 = icmp eq i32 %v2_cde0, -1
  br i1 %v7_cde4, label %dec_label_pc_ce10, label %dec_label_pc_cdec

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cddc
  %v3_cdec = udiv i32 %v2_cde0, 32
  %v3_cdf0 = mul nuw nsw i32 %v3_cdec, 4
  store i32 %v2_cb64, i32* @ip, align 4
  %v2_cdf8 = add i32 %v3_cdf0, %v2_cb64
  store i32 %v2_cdf8, i32* %r3.global-to-local, align 4
  %v1_cdfc = add i32 %v2_cdf8, -360
  %v2_cdfc = inttoptr i32 %v1_cdfc to i32*
  %v3_cdfc = load i32, i32* %v2_cdfc, align 4
  %v1_ce00 = urem i32 %v2_cde0, 32
  %v6_ce04 = lshr i32 %v3_cdfc, %v1_ce00
  store i32 %v6_ce04, i32* %r2.global-to-local, align 4
  %v1_ce08 = urem i32 %v6_ce04, 2
  %v2_ce08 = icmp eq i32 %v1_ce08, 0
  br i1 %v2_ce08, label %dec_label_pc_ce10, label %dec_label_pc_d044

dec_label_pc_ce10:                                ; preds = %dec_label_pc_cdec, %dec_label_pc_cddc
  store i32 ptrtoint (i8** @global_var_1b1a0.87 to i32), i32* %r3.global-to-local, align 4
  %v2_ce14 = load i8, i8* bitcast (i8** @global_var_1b1a0.87 to i8*), align 4
  %v3_ce14 = zext i8 %v2_ce14 to i32
  store i32 %v3_ce14, i32* @r4, align 4
  %v2_ce18 = icmp eq i8 %v2_ce14, 0
  %v2_cea0 = load i32, i32* @global_var_1b024.84, align 4
  br i1 %v2_ce18, label %dec_label_pc_cea0, label %dec_label_pc_ce20

dec_label_pc_ce20:                                ; preds = %dec_label_pc_ce10
  %v3_ce24 = udiv i32 %v2_cea0, 32
  %v3_ce2c = mul nuw nsw i32 %v3_ce24, 4
  %v2_ce30 = add i32 %v3_ce2c, %v2_cb64
  store i32 %v2_ce30, i32* %r3.global-to-local, align 4
  %v1_ce34 = add i32 %v2_ce30, -488
  %v2_ce34 = inttoptr i32 %v1_ce34 to i32*
  %v3_ce34 = load i32, i32* %v2_ce34, align 4
  %v1_ce38 = urem i32 %v2_cea0, 32
  %v6_ce3c = lshr i32 %v3_ce34, %v1_ce38
  store i32 %v6_ce3c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b1a0.87 to i32), i32* %r3.global-to-local, align 4
  %v1_ce48 = urem i32 %v6_ce3c, 2
  %v2_ce48 = icmp eq i32 %v1_ce48, 0
  store i8 0, i8* bitcast (i8** @global_var_1b1a0.87 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1b024.84 to i32), i32* @r5, align 4
  br i1 %v2_ce48, label %dec_label_pc_ce58, label %dec_label_pc_cfe8

dec_label_pc_ce58:                                ; preds = %dec_label_pc_ce20
  store i32 52832, i32* @lr, align 4
  %v1_ce5c = icmp ne i32 %v2_cea0, -1
  call void @__pseudo_cond_branch(i1 %v1_ce5c, i32 ptrtoint (i32* @global_var_10640.88 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ce64 = load i32, i32* @r5, align 4
  %v2_ce64 = inttoptr i32 %v1_ce64 to i32*
  store i32 -1, i32* %v2_ce64, align 4
  %v1_ce6c = call i32 @function_1154c(i32 1)
  br label %dec_label_pc_ccb8.backedge

dec_label_pc_ccb8.backedge:                       ; preds = %dec_label_pc_ce58, %dec_label_pc_cf44, %dec_label_pc_d01c, %dec_label_pc_d0dc, %dec_label_pc_d100, %dec_label_pc_d1b4, %dec_label_pc_d1c0, %bb42, %dec_label_pc_cea0, %dec_label_pc_ceb0, %dec_label_pc_d08c, %bb44, %dec_label_pc_d160, %dec_label_pc_d0f0
  %v2_ccc045.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ccb8

dec_label_pc_ce74:                                ; preds = %dec_label_pc_cd2c
  store i32 %v2_cb64, i32* %r2.global-to-local, align 4
  %v3_ce80 = mul nuw nsw i32 %v3_ce78, 4
  %v2_ce84 = add i32 %v3_ce80, %v2_cb64
  store i32 %v2_ce84, i32* %r3.global-to-local, align 4
  %v1_ce88 = add i32 %v2_ce84, -360
  %v2_ce88 = inttoptr i32 %v1_ce88 to i32*
  %v3_ce88 = load i32, i32* %v2_ce88, align 4
  %v1_ce8c = urem i32 %v2_ce74, 32
  %v7_ce94 = shl i32 1, %v1_ce8c
  %v8_ce94 = or i32 %v3_ce88, %v7_ce94
  store i32 %v8_ce94, i32* %r2.global-to-local, align 4
  store i32 %v8_ce94, i32* %v2_ce88, align 4
  br label %dec_label_pc_cd64

dec_label_pc_cea0:                                ; preds = %dec_label_pc_ce10
  %v7_cea4 = icmp eq i32 %v2_cea0, -1
  store i32 ptrtoint (i32* @global_var_1b024.84 to i32), i32* @r5, align 4
  br i1 %v7_cea4, label %dec_label_pc_ccb8.backedge, label %dec_label_pc_ceb0

dec_label_pc_ceb0:                                ; preds = %dec_label_pc_cea0
  %v3_ceb0 = udiv i32 %v2_cea0, 32
  %v3_ceb4 = mul nuw nsw i32 %v3_ceb0, 4
  %v2_cebc = add i32 %v3_ceb4, %v2_cb64
  store i32 %v2_cebc, i32* %r3.global-to-local, align 4
  %v1_cec0 = add i32 %v2_cebc, -360
  %v2_cec0 = inttoptr i32 %v1_cec0 to i32*
  %v3_cec0 = load i32, i32* %v2_cec0, align 4
  %v1_cec4 = urem i32 %v2_cea0, 32
  %v6_cec8 = lshr i32 %v3_cec0, %v1_cec4
  store i32 %v6_cec8, i32* %r2.global-to-local, align 4
  %v1_cecc = urem i32 %v6_cec8, 2
  %v2_cecc = icmp eq i32 %v1_cecc, 0
  br i1 %v2_cecc, label %dec_label_pc_ccb8.backedge, label %dec_label_pc_ced4

dec_label_pc_ced4:                                ; preds = %dec_label_pc_ceb0
  %v6_ced4 = inttoptr i32 %v3_ce14 to i8*
  store i8* %v6_ced4, i8** %stack_var_-38, align 4
  %v0_cedc = call i32 @function_1093c()
  %v0_cee0 = load i32, i32* @r4, align 4
  %v2_cee0 = inttoptr i32 %v0_cedc to i32*
  store i32 %v0_cee0, i32* %v2_cee0, align 4
  store i32 %v0_cedc, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_cef4 = load i32, i32* @global_var_1b024.84, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_cf00 = call i32 @function_10aec(i32 %v2_cef4, i32* %v4_cfe0, i32 2, i32 16386)
  %v7_cf04 = icmp eq i32 %v5_cf00, -1
  br i1 %v7_cf04, label %dec_label_pc_d0f0, label %dec_label_pc_cf0c

dec_label_pc_cf0c:                                ; preds = %dec_label_pc_ced4
  %v2_cf0c = icmp eq i32 %v5_cf00, 0
  br i1 %v2_cf0c, label %dec_label_pc_d100, label %dec_label_pc_cf14

dec_label_pc_cf14:                                ; preds = %dec_label_pc_cf0c
  %v3_cf14 = load i8*, i8** %stack_var_-38, align 4
  %v4_cf14 = ptrtoint i8* %v3_cf14 to i32
  store i32 %v3_ce14, i32* %r3.global-to-local, align 4
  %v4_cf1c = mul nuw nsw i32 %v3_ce14, 256
  %v5_cf1c = or i32 %v4_cf14, %v4_cf1c
  store i32 %v5_cf1c, i32* %r2.global-to-local, align 4
  %v7_cf1c = icmp eq i32 %v5_cf1c, 0
  br i1 %v7_cf1c, label %dec_label_pc_d1c0, label %dec_label_pc_cf24

dec_label_pc_cf24:                                ; preds = %dec_label_pc_cf14
  %v1_cf24 = mul i32 %v4_cf14, 256
  %v3_cf28 = and i32 %v1_cf24, 65280
  %v4_cf2c = udiv i32 %v5_cf1c, 256
  %v5_cf2c = or i32 %v3_cf28, %v4_cf2c
  %v6_cf2c = trunc i32 %v4_cf2c to i8
  store i32 %v5_cf2c, i32* %r2.global-to-local, align 4
  %v4_cf30 = udiv i32 %v5_cf1c, 65536
  store i32 %v4_cf30, i32* %r3.global-to-local, align 4
  %v3_cf34 = icmp slt i8 %v6_cf2c, 0
  %v7_cf3c = inttoptr i32 %v4_cf2c to i8*
  store i8* %v7_cf3c, i8** %stack_var_-38, align 4
  br i1 %v3_cf34, label %dec_label_pc_cf44, label %dec_label_pc_d130

dec_label_pc_cf44:                                ; preds = %dec_label_pc_cf24
  %v2_cf44 = load i32, i32* @global_var_1b024.84, align 4
  %v1_cf48 = call i32 @function_10640(i32 %v2_cf44)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_cf50 = load i32, i32* @r5, align 4
  %v2_cf50 = inttoptr i32 %v1_cf50 to i32*
  store i32 -1, i32* %v2_cf50, align 4
  br label %dec_label_pc_ccb8.backedge

dec_label_pc_cf58:                                ; preds = %dec_label_pc_cd1c
  %v0_cf60 = load i32, i32* @r4, align 4
  store i32 %v0_cf60, i32* %r2.global-to-local, align 4
  %v3_cf64 = call i32 @function_10bdc(i32 2, i32 1, i32 %v0_cf60)
  %v7_cf68 = icmp eq i32 %v3_cf64, -1
  store i32 %v3_cf64, i32* %r5.global-to-local, align 4
  %v1_cf70 = load i32, i32* %r8.global-to-local, align 4
  %v2_cf70 = inttoptr i32 %v1_cf70 to i32*
  store i32 %v3_cf64, i32* %v2_cf70, align 4
  br i1 %v7_cf68, label %dec_label_pc_cd2c, label %dec_label_pc_cf78

dec_label_pc_cf78:                                ; preds = %dec_label_pc_cf58
  %v0_cf78 = load i32, i32* @r4, align 4
  store i32 %v0_cf78, i32* @r2, align 4
  %v2_cf80 = call i32 @function_1057c(i32 %v3_cf64, i32 3)
  %v1_cf88 = or i32 %v2_cf80, 2048
  store i32 %v1_cf88, i32* @r2, align 4
  %v0_cf8c = load i32, i32* %r5.global-to-local, align 4
  %v2_cf90 = call i32 @function_1057c(i32 %v0_cf8c, i32 4)
  store i32 ptrtoint (i32* @global_var_1b028.61 to i32), i32* %r2.global-to-local, align 4
  %v2_cf98 = load i32, i32* @global_var_1b028.61, align 4
  store i32 %v2_cf98, i32* %r3.global-to-local, align 4
  %v2_cf9c = icmp eq i32 %v2_cf98, 0
  br i1 %v2_cf9c, label %.thread, label %bb43

bb43:                                             ; preds = %dec_label_pc_cf78
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_10190.89 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cf78, %bb43
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_cfb0 = load i32, i32* @global_var_1b024.84, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1b1a0.87 to i8*), align 4
  %v5_cfc0 = call i32 @function_10a38(i32 %v2_cfb0, %sockaddr* bitcast (i8** @global_var_1b234.63 to %sockaddr*), i32 16)
  br label %dec_label_pc_cd2c

dec_label_pc_cfc8:                                ; preds = %dec_label_pc_cdbc
  %v2_cfd0 = load i32, i32* @global_var_1b024.84, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_cfe0 = call i32 @function_10b4c(i32 %v2_cfd0, i32* nonnull %v4_cfe0, i32 2, i32 16384)
  br label %dec_label_pc_cddc

dec_label_pc_cfe8:                                ; preds = %dec_label_pc_ce20
  store i32 4, i32* @r4, align 4
  store i32 %v2_cff0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_d00c = call i32 @function_10a90(i32 %v2_cea0, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_cfcc)
  %v3_d010 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d010, i32* %r3.global-to-local, align 4
  %v2_d014 = icmp eq i32 %v3_d010, 0
  br i1 %v2_d014, label %dec_label_pc_d08c, label %dec_label_pc_d01c

dec_label_pc_d01c:                                ; preds = %dec_label_pc_cfe8
  %v2_d01c = load i32, i32* @global_var_1b024.84, align 4
  %v1_d020 = call i32 @function_10640(i32 %v2_d01c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d028 = load i32, i32* @r5, align 4
  %v2_d028 = inttoptr i32 %v1_d028 to i32*
  store i32 -1, i32* %v2_d028, align 4
  %v0_d02c = call i32 @function_d208()
  %v2_d034 = call i32 @function_103c8(i32 %v0_d02c, i32 10)
  %v1_d038 = add i32 %v2_d034, 1
  %v1_d03c = call i32 @function_1154c(i32 %v1_d038)
  br label %dec_label_pc_ccb8.backedge

dec_label_pc_d044:                                ; preds = %dec_label_pc_cdec
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_cff0, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_d05c = call i32 @function_109e0(i32 %v2_cde0, %sockaddr* %v5_d05c, i32 %v2_cff0, i32 16, i32 16)
  %v1_d060 = call i32 @function_d388(i32 %v6_d05c)
  store i32 %v1_cc78, i32* %r2.global-to-local, align 4
  %v2_d070 = call i32 @function_10740(i32 %v1_d06c, i32 9)
  store i32 ptrtoint (i32* @global_var_1b19c.74 to i32), i32* %r3.global-to-local, align 4
  %v2_d078 = load i32, i32* @global_var_1b19c.74, align 4
  %v2_d07c = icmp eq i32 %v2_d078, 0
  br i1 %v2_d07c, label %dec_label_pc_d084, label %dec_label_pc_d124

dec_label_pc_d084:                                ; preds = %dec_label_pc_d044, %dec_label_pc_d124
  %v1_d088 = call i32 @function_114b8(i32 0)
  br label %dec_label_pc_d08c

dec_label_pc_d08c:                                ; preds = %dec_label_pc_cfe8, %dec_label_pc_d084
  %v2_d090 = call i32 @function_ff38(i8* %v1_d090)
  %sext = mul i32 %v2_d090, 16777216
  %v1_d094 = sdiv i32 %sext, 16777216
  %v7_d094 = inttoptr i32 %v1_d094 to i8*
  store i8* %v7_d094, i8** %stack_var_-38, align 4
  %v0_d098 = call i32 @function_10190()
  store i32 %v0_d098, i32* @global_var_1b230.48, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d0ac = load i32, i32* @r4, align 4
  store i32 %v0_d0ac, i32* %r2.global-to-local, align 4
  %v0_d0b0 = load i32, i32* @r5, align 4
  %v1_d0b0 = inttoptr i32 %v0_d0b0 to i32*
  %v2_d0b0 = load i32, i32* %v1_d0b0, align 4
  %v5_d0b4 = call i32 @function_10b4c(i32 %v2_d0b0, i32* nonnull @global_var_123d8.92, i32 %v0_d0ac, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_d0c0 = load i32, i32* @r5, align 4
  %v1_d0c0 = inttoptr i32 %v0_d0c0 to i32*
  %v2_d0c0 = load i32, i32* %v1_d0c0, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d0cc = call i32 @function_10b4c(i32 %v2_d0c0, i32* %v4_cfe0, i32 1, i32 16384)
  %v3_d0d0 = load i8*, i8** %stack_var_-38, align 4
  %v4_d0d0 = ptrtoint i8* %v3_d0d0 to i32
  store i32 %v4_d0d0, i32* %r2.global-to-local, align 4
  %v3_d0d4 = icmp eq i8* %v3_d0d0, null
  br i1 %v3_d0d4, label %dec_label_pc_ccb8.backedge, label %dec_label_pc_d0dc

dec_label_pc_d0dc:                                ; preds = %dec_label_pc_d08c
  %v0_d0dc = load i32, i32* @r5, align 4
  %v1_d0dc = inttoptr i32 %v0_d0dc to i32*
  %v2_d0dc = load i32, i32* %v1_d0dc, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_d0e8 = call i32 @function_10b4c(i32 %v2_d0dc, i32* nonnull %stack_var_-140, i32 %v4_d0d0, i32 16384)
  br label %dec_label_pc_ccb8.backedge

dec_label_pc_d0f0:                                ; preds = %dec_label_pc_d130, %dec_label_pc_ced4
  %v0_d0f0 = load i32, i32* @r8, align 4
  %v1_d0f0 = inttoptr i32 %v0_d0f0 to i32*
  %v2_d0f0 = load i32, i32* %v1_d0f0, align 4
  store i32 %v2_d0f0, i32* %r3.global-to-local, align 4
  %v7_d0f4 = icmp eq i32 %v2_d0f0, 4
  br i1 %v7_d0f4, label %dec_label_pc_ccb8.backedge, label %bb44

bb44:                                             ; preds = %dec_label_pc_d0f0
  %v8_d0f8 = icmp eq i32 %v2_d0f0, 11
  br i1 %v8_d0f8, label %dec_label_pc_ccb8.backedge, label %dec_label_pc_d100

dec_label_pc_d100:                                ; preds = %dec_label_pc_d158, %bb44, %dec_label_pc_cf0c
  %v2_d100 = load i32, i32* @global_var_1b024.84, align 4
  store i32 53516, i32* @lr, align 4
  %v1_d108 = icmp ne i32 %v2_d100, -1
  call void @__pseudo_cond_branch(i1 %v1_d108, i32 ptrtoint (i32* @global_var_10640.88 to i32))
  store i32 ptrtoint (i32* @global_var_1b024.84 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1b024.84, align 4
  %v1_d11c = call i32 @function_1154c(i32 1)
  br label %dec_label_pc_ccb8.backedge

dec_label_pc_d124:                                ; preds = %dec_label_pc_d044
  %v2_d128 = call i32 @function_10740(i32 %v2_d078, i32 9)
  br label %dec_label_pc_d084

dec_label_pc_d130:                                ; preds = %dec_label_pc_cf24
  %v0_d130 = load i32, i32* @r4, align 4
  %v1_d130 = load i32, i32* @r8, align 4
  %v2_d130 = inttoptr i32 %v1_d130 to i32*
  store i32 %v0_d130, i32* %v2_d130, align 4
  store i32 %v2_d138, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_d144 = load i32, i32* @global_var_1b024.84, align 4
  %v9_d14c = call i32 @function_10aec(i32 %v2_d144, i32* nonnull %stack_var_-1548, i32 %v4_cf2c, i32 16386)
  %v7_d150 = icmp eq i32 %v9_d14c, -1
  br i1 %v7_d150, label %dec_label_pc_d0f0, label %dec_label_pc_d158

dec_label_pc_d158:                                ; preds = %dec_label_pc_d130
  %v2_d158 = icmp eq i32 %v9_d14c, 0
  br i1 %v2_d158, label %dec_label_pc_d100, label %dec_label_pc_d160

dec_label_pc_d160:                                ; preds = %dec_label_pc_d158
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_d170 = load i32, i32* @global_var_1b024.84, align 4
  %v5_d174 = call i32 @function_10aec(i32 %v2_d170, i32* nonnull %v4_cfe0, i32 2, i32 16384)
  %v3_d178 = load i8*, i8** %stack_var_-38, align 4
  %v4_d178 = ptrtoint i8* %v3_d178 to i32
  %v4_d17c = urem i32 %v4_cf30, 256
  %v4_d180 = mul i32 %v4_d178, 256
  %v5_d180 = or i32 %v4_d180, %v4_d17c
  store i32 %v5_d180, i32* @ip, align 4
  store i32 %v5_d180, i32* %r2.global-to-local, align 4
  %v3_d188 = sdiv i32 %v4_d180, 256
  store i32 %v3_d188, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_d194 = load i32, i32* @global_var_1b024.84, align 4
  %v6_d19c = inttoptr i32 %v5_d180 to i8*
  store i8* %v6_d19c, i8** %stack_var_-38, align 4
  %v8_d1a0 = call i32 @function_10aec(i32 %v2_d194, i32* nonnull %stack_var_-1548, i32 %v5_d180, i32 16384)
  %v3_d1a4 = load i8*, i8** %stack_var_-38, align 4
  %v4_d1a4 = ptrtoint i8* %v3_d1a4 to i32
  store i32 %v4_d1a4, i32* %r2.global-to-local, align 4
  %v4_d1a8 = urem i32 %v3_d188, 256
  store i32 %v4_d1a8, i32* %r3.global-to-local, align 4
  %v6_d1ac = mul nuw nsw i32 %v4_d1a8, 256
  %v7_d1ac = or i32 %v4_d1a4, %v6_d1ac
  %v9_d1ac = icmp eq i32 %v7_d1ac, 0
  br i1 %v9_d1ac, label %dec_label_pc_ccb8.backedge, label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d160
  %v7_d1b8 = call i32 @function_830c(i32* nonnull %stack_var_-1548, i32 %v7_d1ac, i32 %v4_d1a4, i32 %v4_d1a8)
  br label %dec_label_pc_ccb8.backedge

dec_label_pc_d1c0:                                ; preds = %dec_label_pc_cf14
  %v2_d1c4 = load i32, i32* @global_var_1b024.84, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d1d4 = call i32 @function_10aec(i32 %v2_d1c4, i32* nonnull %v4_cfe0, i32 2, i32 16384)
  br label %dec_label_pc_ccb8.backedge

; uselistorder directives
  uselistorder i32 %v4_d1a8, { 2, 0, 1 }
  uselistorder i32 %v4_d1a4, { 1, 0, 2 }
  uselistorder i32 %v3_d188, { 1, 0 }
  uselistorder i32 %v5_d180, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d180, { 1, 0 }
  uselistorder i32 %v9_d14c, { 1, 0 }
  uselistorder i32 %v3_cf64, { 3, 2, 1, 0 }
  uselistorder i32 %v4_cf2c, { 2, 3, 0, 1 }
  uselistorder i32 %v5_cf00, { 1, 0 }
  uselistorder i32 %v2_cea0, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_cde0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_cda4, { 2, 3, 1, 0 }
  uselistorder i32 %v2_ccec, { 2, 1, 0 }
  uselistorder i32 %v1_ccdc, { 1, 2, 0 }
  uselistorder i32 %v1_ccc4, { 1, 2, 0 }
  uselistorder i32 %v2_cff0, { 1, 0, 2 }
  uselistorder i32* %v4_cfe0, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_ccb4, { 1, 0, 2 }
  uselistorder i32 %v2_ccb0, { 1, 0, 2 }
  uselistorder i32 %v2_cb64, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_cb54, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_ca60, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @global_var_1b19c.74, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_1154c, { 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1b1a0.87 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1b1a0.87, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1b1a0.87 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1b020.69, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1b024.84, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_c968, { 1, 0 }
  uselistorder i32 (i32)* @function_85e8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d2bc, { 10, 9, 2, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32)* @function_c804, { 1, 0 }
  uselistorder i32* @global_var_1b028.61, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_c7b4.59 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_10c50, { 1, 0 }
  uselistorder label %dec_label_pc_d08c, { 1, 0 }
  uselistorder label %dec_label_pc_d084, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_ccb8.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_cddc, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_cd2c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cd1c, { 1, 0 }
  uselistorder label %dec_label_pc_ccd8.dec_label_pc_ccd8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ccc0.dec_label_pc_ccc0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_cb20, { 2, 0, 1 }
}

define i32 @function_d208() local_unnamed_addr {
dec_label_pc_d208:
  %v2_d214 = load i32, i32* @global_var_1b1a4.94, align 4
  %v2_d218 = load i32, i32* @global_var_1b1b0.96, align 4
  store i32 ptrtoint (i32* @global_var_1b1a8.98 to i32), i32* @lr, align 4
  %v4_d224 = mul i32 %v2_d214, 2048
  %v5_d224 = xor i32 %v4_d224, %v2_d214
  %v4_d228 = udiv i32 %v2_d218, 524288
  %v5_d228 = xor i32 %v4_d228, %v2_d218
  %v2_d22c = load i32, i32* @global_var_1b1a8.98, align 4
  %v2_d230 = load i32, i32* @global_var_1b1ac.100, align 4
  %v2_d234 = xor i32 %v5_d228, %v5_d224
  %v4_d238 = udiv i32 %v5_d224, 256
  %v5_d238 = xor i32 %v2_d234, %v4_d238
  store i32 %v2_d22c, i32* @global_var_1b1a4.94, align 4
  store i32 %v2_d230, i32* @global_var_1b1a8.98, align 4
  store i32 %v2_d218, i32* @global_var_1b1ac.100, align 4
  store i32 %v5_d238, i32* @global_var_1b1b0.96, align 4
  ret i32 %v5_d238

; uselistorder directives
  uselistorder i32 %v2_d218, { 2, 1, 0 }
  uselistorder i32 %v2_d214, { 1, 0 }
}

define i32 @function_d260(i32 %arg1) local_unnamed_addr {
dec_label_pc_d260:
  %stack_var_-12 = alloca i32, align 4
  %v3_d260 = load i32, i32* @r4, align 4
  store i32 %v3_d260, i32* %stack_var_-12, align 4
  %v2_d268 = call i32 @function_108e4(i32* null)
  store i32 %v2_d268, i32* @global_var_1b1a4.94, align 4
  %v0_d274 = call i32 @function_10698()
  store i32 %v0_d274, i32* @r4, align 4
  %v0_d27c = call i32 @function_106c4()
  %v0_d284 = load i32, i32* @r4, align 4
  %v2_d284 = xor i32 %v0_d284, %v0_d27c
  store i32 %v2_d284, i32* @r4, align 4
  store i32 %v2_d284, i32* @global_var_1b1a8.98, align 4
  %v1_d28c = call i32 @function_10948(i32 %v0_d27c)
  %v2_d290 = load i32, i32* @global_var_1b1a8.98, align 4
  %v2_d29c = xor i32 %v2_d290, %v1_d28c
  store i32 %v2_d29c, i32* @global_var_1b1b0.96, align 4
  store i32 %v1_d28c, i32* @global_var_1b1ac.100, align 4
  %v2_d2a8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_d2a8, i32* @r4, align 4
  ret i32 %v1_d28c

; uselistorder directives
  uselistorder i32 %v1_d28c, { 1, 2, 0 }
  uselistorder i32 %v0_d27c, { 1, 0 }
}

define i32 @function_d2bc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d2bc:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d2bc = load i32, i32* @r4, align 4
  store i32 %v3_d2bc, i32* %stack_var_-36, align 4
  %v6_d2bc = load i32, i32* @r5, align 4
  %v9_d2bc = load i32, i32* @r6, align 4
  %v12_d2bc = load i32, i32* @r7, align 4
  %v28_d2bc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_d2c4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_d2d0 = call i32 @function_fb14(i32 19)
  %v3_d2dc = call i32 @function_fa30(i32 19, i32* null)
  %v2_d2e8 = inttoptr i32 %v3_d2dc to i8*
  %v3_d2e8 = call i32 @function_109a0(i32 %v2_d2c4, i8* %v2_d2e8)
  %v2_d2ec = icmp eq i32 %arg2, 0
  br i1 %v2_d2ec, label %dec_label_pc_d368, label %dec_label_pc_d2f4

dec_label_pc_d2f4:                                ; preds = %dec_label_pc_d2bc
  store i32 ptrtoint (i32* @global_var_1b1a4.94 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1a8.98 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1ac.100 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1b1b0.96 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_d33c = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_d308

dec_label_pc_d308:                                ; preds = %dec_label_pc_d308.dec_label_pc_d308_crit_edge, %dec_label_pc_d2f4
  %v1_d32c = phi i32 [ %v1_d32c.pre, %dec_label_pc_d308.dec_label_pc_d308_crit_edge ], [ ptrtoint (i32* @global_var_1b1a4.94 to i32), %dec_label_pc_d2f4 ]
  %v2_d308 = load i32, i32* @global_var_1b1b0.96, align 4
  store i32 %v2_d308, i32* %r2.global-to-local, align 4
  %v2_d30c = load i32, i32* @global_var_1b1a4.94, align 4
  %v4_d310 = udiv i32 %v2_d308, 524288
  %v5_d310 = xor i32 %v4_d310, %v2_d308
  %v4_d314 = mul i32 %v2_d30c, 2048
  %v5_d314 = xor i32 %v4_d314, %v2_d30c
  %v2_d318 = xor i32 %v5_d310, %v5_d314
  %v2_d31c = load i32, i32* @global_var_1b1a8.98, align 4
  %v2_d320 = load i32, i32* @global_var_1b1ac.100, align 4
  store i32 %v2_d320, i32* %ip.global-to-local, align 4
  %v4_d324 = udiv i32 %v5_d314, 256
  %v5_d324 = xor i32 %v2_d318, %v4_d324
  store i32 %v5_d324, i32* @r4, align 4
  %v2_d32c = inttoptr i32 %v1_d32c to i32*
  store i32 %v2_d31c, i32* %v2_d32c, align 4
  %v0_d330 = load i32, i32* %ip.global-to-local, align 4
  %v1_d330 = load i32, i32* %r8.global-to-local, align 4
  %v2_d330 = inttoptr i32 %v1_d330 to i32*
  store i32 %v0_d330, i32* %v2_d330, align 4
  %v0_d334 = load i32, i32* %r2.global-to-local, align 4
  %v1_d334 = load i32, i32* @r7, align 4
  %v2_d334 = inttoptr i32 %v1_d334 to i32*
  store i32 %v0_d334, i32* %v2_d334, align 4
  %v0_d338 = load i32, i32* @r4, align 4
  %v1_d338 = load i32, i32* @r6, align 4
  %v2_d338 = inttoptr i32 %v1_d338 to i32*
  store i32 %v0_d338, i32* %v2_d338, align 4
  %v2_d33c = call i32 @function_ff38(i8* %v1_d33c)
  %v0_d344 = load i32, i32* @r4, align 4
  %v2_d348 = call i32 @function_103c8(i32 %v0_d344, i32 %v2_d33c)
  %v2_d350 = add i32 %v2_d348, %v28_d2bc
  %v1_d354 = add i32 %v2_d350, -32
  %v2_d354 = inttoptr i32 %v1_d354 to i8*
  %v3_d354 = load i8, i8* %v2_d354, align 1
  %v2_d358 = load i32, i32* @r5, align 4
  %v3_d358 = load i32, i32* %fp.global-to-local, align 4
  %v4_d358 = add i32 %v3_d358, %v2_d358
  %v5_d358 = inttoptr i32 %v4_d358 to i8*
  store i8 %v3_d354, i8* %v5_d358, align 1
  %v0_d35c = load i32, i32* @r5, align 4
  %v1_d35c = add i32 %v0_d35c, 1
  store i32 %v1_d35c, i32* @r5, align 4
  %v1_d360 = load i32, i32* %sb.global-to-local, align 4
  %v9_d360 = icmp eq i32 %v1_d35c, %v1_d360
  br i1 %v9_d360, label %dec_label_pc_d368, label %dec_label_pc_d308.dec_label_pc_d308_crit_edge

dec_label_pc_d308.dec_label_pc_d308_crit_edge:    ; preds = %dec_label_pc_d308
  %v1_d32c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_d308

dec_label_pc_d368:                                ; preds = %dec_label_pc_d308, %dec_label_pc_d2bc
  %v1_d36c = call i32 @function_fa5c(i32 19)
  %v2_d374 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d374, i32* @r4, align 4
  store i32 %v6_d2bc, i32* @r5, align 4
  store i32 %v9_d2bc, i32* @r6, align 4
  store i32 %v12_d2bc, i32* @r7, align 4
  ret i32 %v1_d36c

; uselistorder directives
  uselistorder i32 %v2_d30c, { 1, 0 }
  uselistorder i32 %v2_d308, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* @global_var_1b1b0.96, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1b1ac.100, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1b1a8.98, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1b1a4.94, { 2, 4, 1, 0, 3 }
}

define i32 @function_d388(i32 %arg1) local_unnamed_addr {
dec_label_pc_d388:
  %v2_d38c = load i32, i32* @global_var_1b24c.110, align 4
  %v2_d394 = call i32 @function_10740(i32 %v2_d38c, i32 9)
  %v0_d398 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d398, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_d388
  %v2_d398 = load i32, i32* @ip, align 4
  %v5_d3981 = udiv i32 %v2_d398, 16
  %v6_d398 = and i32 %v5_d3981, 9
  store i32 %v6_d398, i32* @fp, align 4
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_d388, %bb
  ret i32 %v2_d394

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_d39c() local_unnamed_addr {
dec_label_pc_d39c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_d39c = load i32, i32* @r4, align 4
  store i32 %v3_d39c, i32* %stack_var_-16, align 4
  %v0_d3a0 = load i32, i32* @r0, align 4
  store i32 %v0_d3a0, i32* %r5.global-to-local, align 4
  %v1_d3a4 = add i32 %v0_d3a0, 4
  %v2_d3a4 = inttoptr i32 %v1_d3a4 to i32*
  %v3_d3a4 = load i32, i32* %v2_d3a4, align 4
  store i32 %v3_d3a4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 54216, i32* @lr, align 4
  %v1_d3c4 = icmp ne i32 %v3_d3a4, -1
  call void @__pseudo_cond_branch(i1 %v1_d3c4, i32 ptrtoint (i32* @global_var_10640.88 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d3d4 = call i32 @function_10bdc(i32 2, i32 1, i32 0)
  store i32 %v3_d3d4, i32* %r3.global-to-local, align 4
  %v7_d3dc = icmp eq i32 %v3_d3d4, -1
  %v0_d3e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_d3e4 = add i32 %v0_d3e4, 28
  store i32 %v1_d3e4, i32* %r0.global-to-local, align 4
  %v2_d3e8 = add i32 %v0_d3e4, 4
  %v3_d3e8 = inttoptr i32 %v2_d3e8 to i32*
  store i32 %v3_d3d4, i32* %v3_d3e8, align 4
  br i1 %v7_d3dc, label %dec_label_pc_d39c.dec_label_pc_d464_crit_edge, label %dec_label_pc_d3f0

dec_label_pc_d39c.dec_label_pc_d464_crit_edge:    ; preds = %dec_label_pc_d39c
  %v14_d468.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d464

dec_label_pc_d3f0:                                ; preds = %dec_label_pc_d39c
  %v0_d3f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_d3f0 = load i32, i32* %r5.global-to-local, align 4
  %v2_d3f0 = add i32 %v1_d3f0, 24
  %v3_d3f0 = inttoptr i32 %v2_d3f0 to i32*
  store i32 %v0_d3f0, i32* %v3_d3f0, align 4
  %v0_d3f4 = load i32, i32* %r0.global-to-local, align 4
  %v2_d3f4 = call i32 @function_ffd8(i32 %v0_d3f4, i32 256)
  store i32 %v2_d3f4, i32* %r0.global-to-local, align 4
  %v0_d3f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_d3f8 = add i32 %v0_d3f8, 4
  %v2_d3f8 = inttoptr i32 %v1_d3f8 to i32*
  %v3_d3f8 = load i32, i32* %v2_d3f8, align 4
  store i32 %v3_d3f8, i32* @r4, align 4
  %v0_d400 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_d400, i32* @r2, align 4
  store i32 %v3_d3f8, i32* %r0.global-to-local, align 4
  %v2_d408 = call i32 @function_1057c(i32 %v3_d3f8, i32 3)
  %v1_d410 = or i32 %v2_d408, 2048
  store i32 %v1_d410, i32* @r2, align 4
  %v0_d414 = load i32, i32* @r4, align 4
  store i32 %v0_d414, i32* %r0.global-to-local, align 4
  %v2_d418 = call i32 @function_1057c(i32 %v0_d414, i32 4)
  store i32 %v2_d418, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %r3.global-to-local, align 4
  %v0_d420 = load i32, i32* %r5.global-to-local, align 4
  %v1_d420 = add i32 %v0_d420, 20
  %v2_d420 = inttoptr i32 %v1_d420 to i32*
  %v3_d420 = load i32, i32* %v2_d420, align 4
  store i32 %v3_d420, i32* @r4, align 4
  %v2_d424 = load i32, i32* @global_var_1b1e8.112, align 4
  %v1_d428 = add i32 %v0_d420, 16
  %v2_d428 = inttoptr i32 %v1_d428 to i32*
  %v3_d428 = load i32, i32* %v2_d428, align 4
  store i32 %v3_d428, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_d430 = add i32 %v0_d420, 8
  %v3_d430 = inttoptr i32 %v2_d430 to i32*
  store i32 %v2_d424, i32* %v3_d430, align 4
  %v0_d434 = load i32, i32* %r3.global-to-local, align 4
  %v1_d434 = load i32, i32* %r5.global-to-local, align 4
  %v2_d434 = add i32 %v1_d434, 12
  %v3_d434 = inttoptr i32 %v2_d434 to i32*
  store i32 %v0_d434, i32* %v3_d434, align 4
  %v0_d43c = load i32, i32* %r5.global-to-local, align 4
  %v1_d43c = add i32 %v0_d43c, 4
  %v2_d43c = inttoptr i32 %v1_d43c to i32*
  %v3_d43c = load i32, i32* %v2_d43c, align 4
  store i32 %v3_d43c, i32* %r0.global-to-local, align 4
  %v0_d440 = load i32, i32* %r3.global-to-local, align 4
  %v2_d440 = mul i32 %v0_d440, 2
  store i32 %v2_d440, i32* %r3.global-to-local, align 4
  store i32 %v2_d440, i32* %stack_var_-32, align 4
  %v3_d460 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_d460 = call i32 @function_10a38(i32 %v3_d43c, %sockaddr* %v3_d460, i32 16)
  store i32 %v4_d460, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d464

dec_label_pc_d464:                                ; preds = %dec_label_pc_d39c.dec_label_pc_d464_crit_edge, %dec_label_pc_d3f0
  %v14_d468 = phi i32 [ %v14_d468.pre, %dec_label_pc_d39c.dec_label_pc_d464_crit_edge ], [ %v4_d460, %dec_label_pc_d3f0 ]
  %v2_d468 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_d468, i32* @r4, align 4
  ret i32 %v14_d468

; uselistorder directives
  uselistorder i32 %v2_d440, { 1, 0 }
  uselistorder i32 %v3_d3d4, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_ffd8, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_d464, { 1, 0 }
}

define i32 @function_d470(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d470:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d470 = load i32, i32* @r4, align 4
  %v6_d470 = load i32, i32* @r5, align 4
  %v9_d470 = load i32, i32* @r6, align 4
  %v12_d470 = load i32, i32* @r7, align 4
  %v15_d470 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1b1b4.114 to i32), i32* @r8, align 4
  %v2_d478 = load i32, i32* @global_var_1b1b4.114, align 4
  store i32 ptrtoint (i32* @global_var_1b1e0.116 to i32), i32* %sb.global-to-local, align 4
  %v3_d484 = mul i32 %v2_d478, 16
  store i32 %v3_d484, i32* %r3.global-to-local, align 4
  %v3_d48c = urem i32 %arg3, 65536
  store i32 %v3_d48c, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_d498 = load i32, i32* @global_var_1b1e0.116, align 4
  %v1_d49c = add i32 %v3_d484, 16
  store i32 %v1_d49c, i32* %r1.global-to-local, align 4
  store i32 %v3_d48c, i32* %stack_var_-44, align 4
  %v15_d4a4 = call i32 @function_11010(i32 %v2_d498, i32 %v1_d49c, i32 %v3_d48c, i32 %v3_d484)
  store i32 %v15_d4a4, i32* %sl.global-to-local, align 4
  %v0_d4ac = load i32, i32* @r5, align 4
  %v1_d4b0 = load i32, i32* %sb.global-to-local, align 4
  %v2_d4b0 = inttoptr i32 %v1_d4b0 to i32*
  store i32 %v15_d4a4, i32* %v2_d4b0, align 4
  %v2_d4b4 = load i32, i32* @global_var_1b1b4.114, align 4
  store i32 %v2_d4b4, i32* %fp.global-to-local, align 4
  %v1_d4b8 = inttoptr i32 %v0_d4ac to i8*
  %v2_d4b8 = call i32 @function_ff38(i8* %v1_d4b8)
  %sext = mul i32 %v2_d4b8, 16777216
  %v1_d4bc = sdiv i32 %sext, 16777216
  %v2_d4bc = add nsw i32 %v1_d4bc, 1
  store i32 %v2_d4bc, i32* @r4, align 4
  store i32 %v1_d4bc, i32* @r7, align 4
  %v1_d4c8 = call i32 @function_10d74(i32 %v2_d4bc)
  %v0_d4cc = load i32, i32* @r5, align 4
  store i32 %v0_d4cc, i32* %r1.global-to-local, align 4
  %v0_d4d0 = load i32, i32* @r4, align 4
  store i32 %v0_d4d0, i32* %r2.global-to-local, align 4
  store i32 %v1_d4c8, i32* @r6, align 4
  %v3_d4d8 = call i32 @function_ffb4(i32 %v1_d4c8, i32 %v0_d4cc, i32 %v0_d4d0)
  %v0_d4dc = load i32, i32* @r7, align 4
  %tmp23 = icmp slt i32 %v0_d4dc, 1
  %extract.t8 = trunc i32 %v0_d4dc to i8
  br i1 %tmp23, label %dec_label_pc_d508, label %dec_label_pc_d4e4

dec_label_pc_d4e4:                                ; preds = %dec_label_pc_d470
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d4ec

dec_label_pc_d4ec:                                ; preds = %dec_label_pc_d4ec.dec_label_pc_d4ec_crit_edge, %dec_label_pc_d4e4
  %v1_d4f4 = phi i32 [ %v1_d4f4.pre, %dec_label_pc_d4ec.dec_label_pc_d4ec_crit_edge ], [ -81, %dec_label_pc_d4e4 ]
  %v2_d4f8 = phi i32 [ %v1_d4fc, %dec_label_pc_d4ec.dec_label_pc_d4ec_crit_edge ], [ 0, %dec_label_pc_d4e4 ]
  %v1_d4ec = load i32, i32* @r6, align 4
  %v2_d4ec = add i32 %v1_d4ec, %v2_d4f8
  %v3_d4ec = inttoptr i32 %v2_d4ec to i8*
  %v4_d4ec = load i8, i8* %v3_d4ec, align 1
  %v6_d4ec = zext i8 %v4_d4ec to i32
  %v1_d4f0 = sub i32 -1, %v1_d4f4
  %v2_d4f4 = xor i32 %v6_d4ec, %v1_d4f0
  store i32 %v2_d4f4, i32* %r3.global-to-local, align 4
  %v1_d4f8 = trunc i32 %v2_d4f4 to i8
  store i8 %v1_d4f8, i8* %v3_d4ec, align 1
  %v0_d4fc = load i32, i32* %r2.global-to-local, align 4
  %v1_d4fc = add i32 %v0_d4fc, 1
  store i32 %v1_d4fc, i32* %r2.global-to-local, align 4
  %v0_d500 = load i32, i32* @r7, align 4
  %v9_d500 = icmp eq i32 %v0_d500, %v1_d4fc
  br i1 %v9_d500, label %dec_label_pc_d508.loopexit, label %dec_label_pc_d4ec.dec_label_pc_d4ec_crit_edge

dec_label_pc_d4ec.dec_label_pc_d4ec_crit_edge:    ; preds = %dec_label_pc_d4ec
  %v1_d4f4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d4ec

dec_label_pc_d508.loopexit:                       ; preds = %dec_label_pc_d4ec
  %extract.t = trunc i32 %v1_d4fc to i8
  br label %dec_label_pc_d508

dec_label_pc_d508:                                ; preds = %dec_label_pc_d508.loopexit, %dec_label_pc_d470
  %v0_d518.off0 = phi i8 [ %extract.t, %dec_label_pc_d508.loopexit ], [ %extract.t8, %dec_label_pc_d470 ]
  %v2_d508 = load i32, i32* @global_var_1b1b4.114, align 4
  %v2_d50c = load i32, i32* @global_var_1b1e0.116, align 4
  store i32 %v2_d50c, i32* %r2.global-to-local, align 4
  %v3_d510 = mul i32 %v2_d508, 16
  %v2_d514 = add i32 %v2_d50c, %v3_d510
  store i32 %v2_d514, i32* %r3.global-to-local, align 4
  %v3_d518 = add i32 %v2_d514, 12
  %v4_d518 = inttoptr i32 %v3_d518 to i8*
  store i8 %v0_d518.off0, i8* %v4_d518, align 1
  %v0_d51c = load i32, i32* @r6, align 4
  %v1_d51c = load i32, i32* %sl.global-to-local, align 4
  %v2_d51c = load i32, i32* %fp.global-to-local, align 4
  %v5_d51c = mul i32 %v2_d51c, 16
  %v6_d51c = add i32 %v5_d51c, %v1_d51c
  %v7_d51c = inttoptr i32 %v6_d51c to i32*
  store i32 %v0_d51c, i32* %v7_d51c, align 4
  %v2_d524 = load i32, i32* @global_var_1b1b4.114, align 4
  store i32 %v2_d524, i32* @r7, align 4
  %v2_d528 = load i32, i32* @global_var_1b1e0.116, align 4
  store i32 %v2_d528, i32* %sl.global-to-local, align 4
  %v1_d52c = inttoptr i32 %arg2 to i8*
  %v2_d52c = call i32 @function_ff38(i8* %v1_d52c)
  %sext1 = mul i32 %v2_d52c, 16777216
  %v1_d530 = sdiv i32 %sext1, 16777216
  %v2_d530 = add nsw i32 %v1_d530, 1
  store i32 %v2_d530, i32* @r4, align 4
  store i32 %v1_d530, i32* @r5, align 4
  %v1_d53c = call i32 @function_10d74(i32 %v2_d530)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_d544 = load i32, i32* @r4, align 4
  store i32 %v0_d544, i32* %r2.global-to-local, align 4
  store i32 %v1_d53c, i32* %r6.global-to-local, align 4
  %v3_d54c = call i32 @function_ffb4(i32 %v1_d53c, i32 %arg2, i32 %v0_d544)
  %v0_d550 = load i32, i32* @r5, align 4
  %tmp24 = icmp slt i32 %v0_d550, 1
  %extract.t10 = trunc i32 %v0_d550 to i8
  br i1 %tmp24, label %dec_label_pc_d57c, label %dec_label_pc_d558

dec_label_pc_d558:                                ; preds = %dec_label_pc_d508
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d560

dec_label_pc_d560:                                ; preds = %dec_label_pc_d560.dec_label_pc_d560_crit_edge, %dec_label_pc_d558
  %v1_d568 = phi i32 [ %v1_d568.pre, %dec_label_pc_d560.dec_label_pc_d560_crit_edge ], [ -81, %dec_label_pc_d558 ]
  %v2_d56c = phi i32 [ %v1_d570, %dec_label_pc_d560.dec_label_pc_d560_crit_edge ], [ 0, %dec_label_pc_d558 ]
  %v1_d560 = load i32, i32* %r6.global-to-local, align 4
  %v2_d560 = add i32 %v1_d560, %v2_d56c
  %v3_d560 = inttoptr i32 %v2_d560 to i8*
  %v4_d560 = load i8, i8* %v3_d560, align 1
  %v6_d560 = zext i8 %v4_d560 to i32
  %v1_d564 = sub i32 -1, %v1_d568
  %v2_d568 = xor i32 %v6_d560, %v1_d564
  store i32 %v2_d568, i32* %r3.global-to-local, align 4
  %v1_d56c = trunc i32 %v2_d568 to i8
  store i8 %v1_d56c, i8* %v3_d560, align 1
  %v0_d570 = load i32, i32* %r2.global-to-local, align 4
  %v1_d570 = add i32 %v0_d570, 1
  store i32 %v1_d570, i32* %r2.global-to-local, align 4
  %v0_d574 = load i32, i32* @r5, align 4
  %v9_d574 = icmp eq i32 %v0_d574, %v1_d570
  br i1 %v9_d574, label %dec_label_pc_d57c.loopexit, label %dec_label_pc_d560.dec_label_pc_d560_crit_edge

dec_label_pc_d560.dec_label_pc_d560_crit_edge:    ; preds = %dec_label_pc_d560
  %v1_d568.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d560

dec_label_pc_d57c.loopexit:                       ; preds = %dec_label_pc_d560
  %extract.t9 = trunc i32 %v1_d570 to i8
  br label %dec_label_pc_d57c

dec_label_pc_d57c:                                ; preds = %dec_label_pc_d57c.loopexit, %dec_label_pc_d508
  %v0_d58c.off0 = phi i8 [ %extract.t9, %dec_label_pc_d57c.loopexit ], [ %extract.t10, %dec_label_pc_d508 ]
  %v2_d57c = load i32, i32* @global_var_1b1b4.114, align 4
  %v2_d580 = load i32, i32* @global_var_1b1e0.116, align 4
  %v3_d584 = mul i32 %v2_d57c, 16
  %v2_d588 = or i32 %v3_d584, 13
  %v3_d58c = add i32 %v2_d588, %v2_d580
  %v4_d58c = inttoptr i32 %v3_d58c to i8*
  store i8 %v0_d58c.off0, i8* %v4_d58c, align 1
  %v2_d594 = load i32, i32* @global_var_1b1b4.114, align 4
  store i32 %v2_d594, i32* %lr.global-to-local, align 4
  %v4_d598 = load i8, i8* @global_var_1b1e5.119, align 1
  %v5_d598 = zext i8 %v4_d598 to i32
  %v3_d59c = load i8, i8* bitcast (i8** @global_var_1b1e4.118 to i8*), align 4
  %v4_d59c = zext i8 %v3_d59c to i32
  %v2_d5a0 = load i32, i32* @global_var_1b1e0.116, align 4
  %v4_d5a4 = mul nuw nsw i32 %v5_d598, 256
  %v5_d5a4 = or i32 %v4_d59c, %v4_d5a4
  store i32 %v5_d5a4, i32* %r2.global-to-local, align 4
  %v3_d5a8 = mul i32 %v2_d594, 16
  %v2_d5ac = add i32 %v2_d5a0, %v3_d5a8
  store i32 %v2_d5ac, i32* %r1.global-to-local, align 4
  %v3_d5b4 = add i32 %v2_d5ac, 9
  %v4_d5b4 = inttoptr i32 %v3_d5b4 to i8*
  store i8 %v4_d598, i8* %v4_d5b4, align 1
  %v0_d5b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d5b8 = trunc i32 %v0_d5b8 to i8
  %v2_d5b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_d5b8 = add i32 %v2_d5b8, 8
  %v4_d5b8 = inttoptr i32 %v3_d5b8 to i8*
  store i8 %v1_d5b8, i8* %v4_d5b8, align 1
  %v4_d5bc = load i8, i8* @global_var_1b1e5.119, align 1
  %v5_d5bc = zext i8 %v4_d5bc to i32
  %v3_d5c0 = load i8, i8* bitcast (i8** @global_var_1b1e4.118 to i8*), align 4
  %v4_d5c0 = zext i8 %v3_d5c0 to i32
  %v4_d5c4 = mul nuw nsw i32 %v5_d5bc, 256
  %v5_d5c4 = or i32 %v4_d5c0, %v4_d5c4
  %v2_d5c8 = load i32, i32* %stack_var_-44, align 4
  %v2_d5cc = add i32 %v5_d5c4, %v2_d5c8
  store i32 %v2_d5cc, i32* %r3.global-to-local, align 4
  %v3_d5d011 = udiv i32 %v2_d5cc, 256
  %v1_d5d4 = trunc i32 %v3_d5d011 to i8
  %v2_d5d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d5d4 = add i32 %v2_d5d4, 11
  %v4_d5d4 = inttoptr i32 %v3_d5d4 to i8*
  store i8 %v1_d5d4, i8* %v4_d5d4, align 1
  %v0_d5d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d5d8 = trunc i32 %v0_d5d8 to i8
  %v2_d5d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_d5d8 = add i32 %v2_d5d8, 10
  %v4_d5d8 = inttoptr i32 %v3_d5d8 to i8*
  store i8 %v1_d5d8, i8* %v4_d5d8, align 1
  %v4_d5dc = load i8, i8* @global_var_1b1e5.119, align 1
  %v5_d5dc = zext i8 %v4_d5dc to i32
  %v3_d5e0 = load i8, i8* bitcast (i8** @global_var_1b1e4.118 to i8*), align 4
  %v4_d5e0 = zext i8 %v3_d5e0 to i32
  %v4_d5e4 = mul nuw nsw i32 %v5_d5dc, 256
  %v5_d5e4 = or i32 %v4_d5e0, %v4_d5e4
  %v2_d5e8 = load i32, i32* %stack_var_-44, align 4
  %v2_d5ec = add i32 %v5_d5e4, %v2_d5e8
  store i32 %v2_d5ec, i32* %r2.global-to-local, align 4
  %v0_d5f0 = load i32, i32* @r7, align 4
  %v3_d5f0 = mul i32 %v0_d5f0, 16
  %v1_d5f4 = load i32, i32* %sl.global-to-local, align 4
  %v2_d5f4 = add i32 %v1_d5f4, %v3_d5f0
  store i32 %v2_d5f4, i32* %r3.global-to-local, align 4
  %v0_d5f8 = load i32, i32* %lr.global-to-local, align 4
  %v1_d5f8 = add i32 %v0_d5f8, 1
  store i32 %v1_d5f8, i32* @lr, align 4
  %v3_d5fc = sdiv i32 %v2_d5ec, 256
  store i32 %v3_d5fc, i32* %r1.global-to-local, align 4
  %v0_d600 = load i32, i32* %r6.global-to-local, align 4
  %v2_d600 = add i32 %v2_d5f4, 4
  %v3_d600 = inttoptr i32 %v2_d600 to i32*
  store i32 %v0_d600, i32* %v3_d600, align 4
  %v0_d604 = load i32, i32* @lr, align 4
  %v1_d604 = load i32, i32* @r8, align 4
  %v2_d604 = inttoptr i32 %v1_d604 to i32*
  store i32 %v0_d604, i32* %v2_d604, align 4
  %v0_d608 = load i32, i32* %r1.global-to-local, align 4
  %v1_d608 = trunc i32 %v0_d608 to i8
  store i8 %v1_d608, i8* @global_var_1b1e5.119, align 1
  %v0_d60c = load i32, i32* %r2.global-to-local, align 4
  %v1_d60c = trunc i32 %v0_d60c to i8
  store i8 %v1_d60c, i8* bitcast (i8** @global_var_1b1e4.118 to i8*), align 4
  store i32 %v3_d470, i32* @r4, align 4
  store i32 %v6_d470, i32* @r5, align 4
  store i32 %v9_d470, i32* @r6, align 4
  store i32 %v12_d470, i32* @r7, align 4
  store i32 %v15_d470, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1b1e4.118 to i32)

; uselistorder directives
  uselistorder i32 %v1_d570, { 0, 2, 3, 1 }
  uselistorder i32 %v1_d53c, { 1, 0 }
  uselistorder i32 %v1_d4fc, { 0, 2, 3, 1 }
  uselistorder i32 %v1_d4c8, { 1, 0 }
  uselistorder i32 %v3_d48c, { 1, 2, 0 }
  uselistorder i32 %v3_d484, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32 -81, { 0, 2, 1, 3 }
  uselistorder i32 (i8*)* @function_ff38, { 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11010, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_d624(i32 %arg1) local_unnamed_addr {
dec_label_pc_d624:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp249 = call i32 @__decompiler_undefined_function_0()
  %tmp250 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %tmp278 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-36 = alloca i32, align 4
  %v3_d624 = load i32, i32* @r4, align 4
  store i32 %v3_d624, i32* %stack_var_-36, align 4
  %v6_d624 = load i32, i32* @r5, align 4
  %v15_d624 = load i32, i32* @r8, align 4
  %v18_d624 = load i32, i32* @sb, align 4
  %v21_d624 = load i32, i32* @sl, align 4
  %v0_d630 = call i32 @function_1066c()
  store i32 %v0_d630, i32* %r0.global-to-local, align 4
  %v7_d634 = icmp eq i32 %v0_d630, -1
  %. = zext i1 %v7_d634 to i32
  %tmp281 = icmp slt i32 %v0_d630, 1
  %storemerge240 = select i1 %tmp281, i32 %., i32 1
  store i32 %storemerge240, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1b24c.110 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_d650 = icmp eq i32 %storemerge240, 0
  store i1 %v2_d650, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_d630, i32* @global_var_1b24c.110, align 4
  br i1 %v2_d650, label %dec_label_pc_d928, label %dec_label_pc_d65c

dec_label_pc_d65c:                                ; preds = %dec_label_pc_d624
  store i32 %v3_d624, i32* %r4.global-to-local, align 4
  store i32 %v6_d624, i32* %r5.global-to-local, align 4
  store i32 %v15_d624, i32* %r8.global-to-local, align 4
  store i32 %v18_d624, i32* @sb, align 4
  store i32 %v21_d624, i32* @sl, align 4
  ret i32 %v0_d630

dec_label_pc_d928:                                ; preds = %dec_label_pc_d624
  %v0_d928 = call i32 @function_10190()
  store i32 %v0_d928, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b230.48 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d928, i32* @global_var_1b230.48, align 4
  %v1_d934 = call i32 @function_d260(i32 %v0_d928)
  %v0_d938 = load i32, i32* @r4, align 4
  store i32 %v0_d938, i32* %r0.global-to-local, align 4
  %v1_d93c = inttoptr i32 %v0_d938 to i32*
  %v2_d93c = call i32 @function_108e4(i32* %v1_d93c)
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_d93c, i32* @global_var_1b1e8.112, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_d950 = call i32 @function_10ec8(i32 256, i32 288)
  store i32 %v2_d950, i32* %lr.global-to-local, align 4
  %v0_d95c = load i32, i32* @r4, align 4
  store i32 %v0_d95c, i32* %stack_var_-48, align 4
  store i32 %v2_d950, i32* @global_var_1b244.124, align 4
  store i32 %v0_d95c, i32* %r3.global-to-local, align 4
  store i32 %v0_d95c, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_d95c, i32* %ip.global-to-local, align 4
  %v1_d974 = add i32 %v2_d950, 4
  store i32 %v1_d974, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d978

dec_label_pc_d978:                                ; preds = %dec_label_pc_d978.dec_label_pc_d978_crit_edge, %dec_label_pc_d928
  %v0_d990 = phi i32 [ %v0_d990.pre, %dec_label_pc_d978.dec_label_pc_d978_crit_edge ], [ %v0_d95c, %dec_label_pc_d928 ]
  %v0_d980 = phi i32 [ %v0_d998, %dec_label_pc_d978.dec_label_pc_d978_crit_edge ], [ %v0_d95c, %dec_label_pc_d928 ]
  %v1_d988 = phi i32 [ %v1_d988.pre, %dec_label_pc_d978.dec_label_pc_d978_crit_edge ], [ %v2_d950, %dec_label_pc_d928 ]
  %v3_d978 = mul i32 %v0_d980, 256
  store i32 %v3_d978, i32* %r2.global-to-local, align 4
  %v1_d980 = add i32 %v0_d980, 1
  store i32 %v1_d980, i32* %ip.global-to-local, align 4
  %v2_d984 = mul i32 %v0_d980, 288
  %v2_d988 = add i32 %v1_d988, 12
  %v2_d990 = add i32 %v2_d988, %v2_d984
  %v3_d990 = inttoptr i32 %v2_d990 to i32*
  store i32 %v0_d990, i32* %v3_d990, align 4
  %v0_d994 = load i32, i32* %r0.global-to-local, align 4
  %v1_d994 = load i32, i32* %r1.global-to-local, align 4
  %v2_d994 = inttoptr i32 %v1_d994 to i32*
  store i32 %v0_d994, i32* %v2_d994, align 4
  %v3_d994 = load i32, i32* %r1.global-to-local, align 4
  %v4_d994 = add i32 %v3_d994, 288
  store i32 %v4_d994, i32* %r1.global-to-local, align 4
  %v0_d998 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_d998, i32* %r3.global-to-local, align 4
  %v7_d99c = icmp sgt i32 %v1_d980, 255
  br i1 %v7_d99c, label %dec_label_pc_d9a0, label %dec_label_pc_d978.dec_label_pc_d978_crit_edge

dec_label_pc_d978.dec_label_pc_d978_crit_edge:    ; preds = %dec_label_pc_d978
  %v1_d988.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_d990.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_d978

dec_label_pc_d9a0:                                ; preds = %dec_label_pc_d978
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_d998, i32* %stack_var_-48, align 4
  %v3_d9b0 = call i32 @function_10bdc(i32 2, i32 3, i32 6)
  store i32 %v3_d9b0, i32* %r0.global-to-local, align 4
  %v2_d9b8 = icmp eq i32 %v3_d9b0, -1
  store i1 %v2_d9b8, i1* %cpsr_c.global-to-local, align 1
  %v7_d9b8 = icmp eq i32 %v3_d9b0, -1
  store i1 %v7_d9b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d9b0, i32* @r4, align 4
  store i32 %v3_d9b0, i32* @global_var_1b248.126, align 4
  br i1 %v7_d9b8, label %dec_label_pc_eb88, label %dec_label_pc_d9c8

dec_label_pc_d9c8:                                ; preds = %dec_label_pc_d9a0
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_d9cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_d9cc, i32* @r2, align 4
  %v2_d9d0 = call i32 @function_1057c(i32 %v3_d9b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_d9d8 = or i32 %v2_d9d0, 2048
  store i32 %v1_d9d8, i32* @r2, align 4
  %v0_d9dc = load i32, i32* @r4, align 4
  store i32 %v0_d9dc, i32* %r0.global-to-local, align 4
  %v2_d9e0 = call i32 @function_1057c(i32 %v0_d9dc, i32 4)
  %v2_d9ec = load i32, i32* @global_var_1b248.126, align 4
  store i32 %v2_d9ec, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_d9f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_d9f4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_d9fc = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_d9fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v6_da0c = call i32 @function_10bac(i32 %v2_d9ec, i32 %v0_d9f4, i32 3, i32* nonnull %stack_var_-48, i32 4)
  store i32 %v6_da0c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_da10 = icmp eq i32 %v6_da0c, 0
  store i1 %v2_da10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_da10, label %dec_label_pc_da18, label %dec_label_pc_eb7c

dec_label_pc_da18:                                ; preds = %dec_label_pc_d9c8, %dec_label_pc_da18
  %v0_da18 = call i32 @function_d208()
  %v3_da1c = mul i32 %v0_da18, 65536
  store i32 %v3_da1c, i32* %r0.global-to-local, align 4
  %v1_da28 = mul i32 %v0_da18, 256
  %v3_da2c = and i32 %v1_da28, 65280
  %tmp284 = udiv i32 %v0_da18, 256
  %v4_da30 = urem i32 %tmp284, 256
  %v5_da30 = or i32 %v4_da30, %v3_da2c
  store i32 %v5_da30, i32* %r3.global-to-local, align 4
  %v2_da34 = icmp ugt i32 %v5_da30, 1023
  store i1 %v2_da34, i1* %cpsr_c.global-to-local, align 1
  %v7_da34 = icmp eq i32 %v5_da30, 1024
  store i1 %v7_da34, i1* %cpsr_z.global-to-local, align 1
  %v3_da38 = icmp ult i32 %v5_da30, 1022
  br i1 %v3_da38, label %dec_label_pc_da18, label %dec_label_pc_da3c

dec_label_pc_da3c:                                ; preds = %dec_label_pc_da18
  %v5_da24.le = trunc i32 %v0_da18 to i8
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i8 69, i8* bitcast (i8** @global_var_1b1b8.128 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1b1bb.129 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1b1ba.130 to i8*), align 4
  %v0_da70 = call i32 @function_d208()
  %v1_da70 = trunc i32 %v0_da70 to i8
  store i32 %v0_da70, i32* %r0.global-to-local, align 4
  %v4_da78 = sext i8 %v5_da24.le to i32
  %v3_da7c = load i8, i8* @global_var_1b1d8.133, align 1
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %lr.global-to-local, align 4
  %v3_da84239 = udiv i32 %v4_da78, 256
  store i8 64, i8* bitcast (i32* @global_var_1b1c0.134 to i8*), align 4
  %v2_da90 = and i32 %v0_da70, 128
  %v3_da90 = icmp ne i32 %v2_da90, 0
  store i1 %v3_da90, i1* %cpsr_c.global-to-local, align 1
  %v4_da90238 = udiv i32 %v0_da70, 256
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_da7c, 16
  %v1_da98 = zext i8 %tmp to i32
  store i32 6, i32* @r4, align 4
  %v1_daa0 = trunc i32 %v4_da90238 to i8
  store i8 %v1_daa0, i8* bitcast (i32* @global_var_1b1bd.135 to i8*), align 4
  %v1_daa4 = or i32 %v1_da98, 80
  store i32 %v1_daa4, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v1_daac = trunc i32 %v1_daa4 to i8
  store i8 %v1_daac, i8* @global_var_1b1d8.133, align 1
  %v1_dab0 = trunc i32 %v3_da84239 to i8
  store i8 %v1_dab0, i8* bitcast (i32* @global_var_1b1cd.136 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1b1cf.137 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1b1c1.138 to i8*), align 4
  store i32 %v4_da78, i32* %ip.global-to-local, align 4
  store i8 %v1_da70, i8* bitcast (i32* @global_var_1b1bc.139 to i8*), align 4
  store i8 %v5_da24.le, i8* bitcast (i32* @global_var_1b1cc.132 to i8*), align 4
  %v0_dac8 = load i32, i32* @r6, align 4
  %v1_dac8 = trunc i32 %v0_dac8 to i8
  store i8 %v1_dac8, i8* bitcast (i32* @global_var_1b1ce.140 to i8*), align 4
  %v0_dacc = call i32 @function_d208()
  %v1_dacc = trunc i32 %v0_dacc to i8
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* @lr, align 4
  %v3_dad4 = load i8, i8* @global_var_1b1d9.141, align 1
  %v4_dad4 = zext i8 %v3_dad4 to i32
  %v2_dad8 = and i32 %v0_dacc, 128
  %v3_dad8 = icmp ne i32 %v2_dad8, 0
  store i1 %v3_dad8, i1* %cpsr_c.global-to-local, align 1
  %v4_dad8 = sdiv i32 %v0_dacc, 256
  store i32 %v4_dad8, i32* %ip.global-to-local, align 4
  %v1_dadc = or i32 %v4_dad4, 2
  store i32 %v1_dadc, i32* %r3.global-to-local, align 4
  store i32 %v0_dacc, i32* @r5, align 4
  %v1_dae4 = trunc i32 %v4_dad8 to i8
  store i8 %v1_dae4, i8* bitcast (i32* @global_var_1b1db.142 to i8*), align 4
  %v1_dae8 = trunc i32 %v1_dadc to i8
  store i8 %v1_dae8, i8* @global_var_1b1d9.141, align 1
  store i8 %v1_dacc, i8* bitcast (i32* @global_var_1b1da.143 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dafc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_db0c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_123e0.151 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_db1c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_123e0.151 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_123e8.153 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_db2c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([6 x i8]* @global_var_123e8.153 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_db3c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r1.global-to-local, align 4
  %v5_db4c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_123f0.155 to i32), i32* %r1.global-to-local, align 4
  %v0_db58 = load i32, i32* @r4, align 4
  store i32 %v0_db58, i32* %r2.global-to-local, align 4
  %v4_db5c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_123f0.155 to i32), i32 %v0_db58)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_123f8.157 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_db6c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([8 x i8]* @global_var_123f8.157 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_db7c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12408.161 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_db8c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_12408.161 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12414.163 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_db9c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12414.163 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1241c.165 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_dbac = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_1241c.165 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), i32* %r1.global-to-local, align 4
  %v5_dbbc = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dbcc = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32* %r1.global-to-local, align 4
  %v5_dbdc = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_dbec = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12830.169 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dbfc = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32 ptrtoint (i32* @global_var_12830.169 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12414.163 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dc0c = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32 ptrtoint (i32* @global_var_12414.163 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_dc1c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1242c.171 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_dc2c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_1242c.171 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r1.global-to-local, align 4
  %v5_dc3c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12438.173 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dc4c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12438.173 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dc5c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32* %r1.global-to-local, align 4
  %v5_dc6c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12414.163 to i32), i32* %r1.global-to-local, align 4
  %v0_dc78 = load i32, i32* @r4, align 4
  store i32 %v0_dc78, i32* %r2.global-to-local, align 4
  %v4_dc7c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32 ptrtoint (i32* @global_var_12414.163 to i32), i32 %v0_dc78)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12448.177 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_dc8c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_12448.177 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12450.179 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_dc9c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_12450.179 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125a4.181 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dcac = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_125a4.181 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1245c.183 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_dcbc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_1245c.183 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125a4.181 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dccc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_125a4.181 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12468.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dcdc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12468.185 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1242c.171 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_dcec = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_1242c.171 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12830.169 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dcfc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12830.169 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12470.187 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_dd0c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12470.187 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_12478.189 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_dd1c = call i32 @function_d470(i32 ptrtoint ([14 x i8]* @global_var_12478.189 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_12478.189 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12488.191 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_dd2c = call i32 @function_d470(i32 ptrtoint ([14 x i8]* @global_var_12478.189 to i32), i32 ptrtoint ([7 x i8]* @global_var_12488.191 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_12478.189 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_12490.193 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_dd3c = call i32 @function_d470(i32 ptrtoint ([14 x i8]* @global_var_12478.189 to i32), i32 ptrtoint ([4 x i8]* @global_var_12490.193 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_12478.189 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12494.195 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_dd4c = call i32 @function_d470(i32 ptrtoint ([14 x i8]* @global_var_12478.189 to i32), i32 ptrtoint ([7 x i8]* @global_var_12494.195 to i32), i32 13)
  store i32 ptrtoint ([8 x i8]* @global_var_1249c.197 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1249c.197 to i32), i32* %r1.global-to-local, align 4
  %v5_dd5c = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_1249c.197 to i32), i32 ptrtoint ([8 x i8]* @global_var_1249c.197 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1249c.197 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_dd6c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([8 x i8]* @global_var_1249c.197 to i32), i32 7)
  store i32 ptrtoint ([11 x i8]* @global_var_124a4.199 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_124a4.199 to i32), i32* %r1.global-to-local, align 4
  %v5_dd7c = call i32 @function_d470(i32 ptrtoint ([11 x i8]* @global_var_124a4.199 to i32), i32 ptrtoint ([11 x i8]* @global_var_124a4.199 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_dd8c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), i32* %r1.global-to-local, align 4
  %v5_dd9c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12438.173 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_ddac = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), i32 ptrtoint (i32* @global_var_12438.173 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12414.163 to i32), i32* %r1.global-to-local, align 4
  %v0_ddb8 = load i32, i32* @r4, align 4
  store i32 %v0_ddb8, i32* %r2.global-to-local, align 4
  %v4_ddbc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), i32 ptrtoint (i32* @global_var_12414.163 to i32), i32 %v0_ddb8)
  store i32 ptrtoint (i32* @global_var_124b8.203 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1242c.171 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_ddcc = call i32 @function_d470(i32 ptrtoint (i32* @global_var_124b8.203 to i32), i32 ptrtoint ([9 x i8]* @global_var_1242c.171 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_124c0.205 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12830.169 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_dddc = call i32 @function_d470(i32 ptrtoint ([14 x i8]* @global_var_124c0.205 to i32), i32 ptrtoint (i32* @global_var_12830.169 to i32), i32 13)
  store i32 ptrtoint (i32* @global_var_12468.185 to i32), i32* %r0.global-to-local, align 4
  %v0_dde4 = load i32, i32* @r4, align 4
  store i32 %v0_dde4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12468.185 to i32), i32* %r1.global-to-local, align 4
  %v3_ddec = call i32 @function_d470(i32 ptrtoint (i32* @global_var_12468.185 to i32), i32 ptrtoint (i32* @global_var_12468.185 to i32), i32 %v0_dde4)
  store i32 ptrtoint (i32* @global_var_123f0.155 to i32), i32* %r0.global-to-local, align 4
  %v0_ddf4 = load i32, i32* @r4, align 4
  store i32 %v0_ddf4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_123f0.155 to i32), i32* %r1.global-to-local, align 4
  %v3_ddfc = call i32 @function_d470(i32 ptrtoint (i32* @global_var_123f0.155 to i32), i32 ptrtoint (i32* @global_var_123f0.155 to i32), i32 %v0_ddf4)
  store i32 ptrtoint ([5 x i8]* @global_var_124d0.207 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_124d0.207 to i32), i32* %r1.global-to-local, align 4
  %v5_de0c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_124d0.207 to i32), i32 ptrtoint ([5 x i8]* @global_var_124d0.207 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_124d0.207 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_de1c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_124d0.207 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_124d8.209 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_de2c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_124d8.209 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_124e0.211 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_de3c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_124e0.211 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_124e8.213 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_de4c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_124e8.213 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_124f0.215 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_de5c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([6 x i8]* @global_var_124f0.215 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_124f8.217 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_de6c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_124f8.217 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12500.219 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_de7c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([6 x i8]* @global_var_12500.219 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12508.221 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_de8c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_12508.221 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12514.223 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_de9c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12514.223 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12524.225 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_deac = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12524.225 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12534.227 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_debc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([7 x i8]* @global_var_12534.227 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1253c.229 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_decc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_1253c.229 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12544.231 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_dedc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_12544.231 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_deec = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12550.233 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_defc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([8 x i8]* @global_var_12550.233 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12558.235 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_df0c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12558.235 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12564.237 to i32), i32* %r1.global-to-local, align 4
  %v0_df18 = load i32, i32* @r4, align 4
  store i32 %v0_df18, i32* %r2.global-to-local, align 4
  %v4_df1c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12564.237 to i32), i32 %v0_df18)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1256c.239 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df2c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_1256c.239 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12830.169 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_df3c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_12830.169 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12438.173 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df4c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_12438.173 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1241c.165 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df5c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_1241c.165 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12414.163 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df6c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_12414.163 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12524.225 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df7c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_12524.225 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12574.241 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_df8c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_12574.241 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12448.177 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_df9c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([5 x i8]* @global_var_12448.177 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12488.191 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_dfac = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_12488.191 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1240c.243 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_dfbc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([5 x i8]* @global_var_1240c.243 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12580.245 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_dfcc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_12580.245 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1258c.247 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_dfdc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_1258c.247 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_12594.249 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_dfec = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([4 x i8]* @global_var_12594.249 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12598.251 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_dffc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_12598.251 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125a0.253 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e00c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_125a0.253 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_125ac.255 to i32), i32* %r1.global-to-local, align 4
  %v0_e018 = load i32, i32* @r4, align 4
  store i32 %v0_e018, i32* %r2.global-to-local, align 4
  %v5_e01c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_125ac.255 to i32), i32 %v0_e018)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_125b4.257 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e02c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_125b4.257 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125c0.259 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e03c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_125c0.259 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125c8.261 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e04c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_125c8.261 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125d0.263 to i32), i32* %r1.global-to-local, align 4
  %v0_e058 = load i32, i32* @r4, align 4
  store i32 %v0_e058, i32* %r2.global-to-local, align 4
  %v4_e05c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_125d0.263 to i32), i32 %v0_e058)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125d8.265 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e06c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_125d8.265 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_125e0.267 to i32), i32* %r1.global-to-local, align 4
  %v0_e078 = load i32, i32* @r4, align 4
  store i32 %v0_e078, i32* %r2.global-to-local, align 4
  %v5_e07c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_125e0.267 to i32), i32 %v0_e078)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_125e8.269 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e08c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([8 x i8]* @global_var_125e8.269 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125f0.271 to i32), i32* %r1.global-to-local, align 4
  %v0_e098 = load i32, i32* @r4, align 4
  store i32 %v0_e098, i32* %r2.global-to-local, align 4
  %v4_e09c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_125f0.271 to i32), i32 %v0_e098)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12494.195 to i32), i32* %r1.global-to-local, align 4
  %v0_e0a8 = load i32, i32* @r4, align 4
  store i32 %v0_e0a8, i32* %r2.global-to-local, align 4
  %v5_e0ac = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_12494.195 to i32), i32 %v0_e0a8)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125f8.273 to i32), i32* %r1.global-to-local, align 4
  %v0_e0b8 = load i32, i32* @r4, align 4
  store i32 %v0_e0b8, i32* %r2.global-to-local, align 4
  %v4_e0bc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_125f8.273 to i32), i32 %v0_e0b8)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12600.275 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e0cc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_12600.275 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12608.277 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e0dc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_12608.277 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_12614.279 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12614.279 to i32), i32* %r1.global-to-local, align 4
  %v5_e0ec = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_12614.279 to i32), i32 ptrtoint ([6 x i8]* @global_var_12614.279 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_1240c.243 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1240c.243 to i32), i32* %r1.global-to-local, align 4
  %v5_e0fc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_1240c.243 to i32), i32 ptrtoint ([5 x i8]* @global_var_1240c.243 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_1240c.243 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e10c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_1240c.243 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1270c.281 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e11c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_1270c.281 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1261c.283 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e12c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_1261c.283 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12624.285 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e13c = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12624.285 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12624.285 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12624.285 to i32), i32* %r1.global-to-local, align 4
  %v5_e14c = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12624.285 to i32), i32 ptrtoint ([8 x i8]* @global_var_12624.285 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_1262c.287 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e15c = call i32 @function_d470(i32 ptrtoint ([4 x i8]* @global_var_1262c.287 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_12630.289 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12638.291 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e16c = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12630.289 to i32), i32 ptrtoint ([7 x i8]* @global_var_12638.291 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_12640.293 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_12640.293 to i32), i32* %r1.global-to-local, align 4
  %v5_e17c = call i32 @function_d470(i32 ptrtoint ([4 x i8]* @global_var_12640.293 to i32), i32 ptrtoint ([4 x i8]* @global_var_12640.293 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12644.295 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e18c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12644.295 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12650.297 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_e19c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_12650.297 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_12658.299 to i32), i32* %r0.global-to-local, align 4
  %v0_e1a4 = load i32, i32* @r4, align 4
  store i32 %v0_e1a4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12658.299 to i32), i32* %r1.global-to-local, align 4
  %v5_e1ac = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_12658.299 to i32), i32 ptrtoint ([7 x i8]* @global_var_12658.299 to i32), i32 %v0_e1a4)
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12658.299 to i32), i32* %r1.global-to-local, align 4
  %v0_e1b8 = load i32, i32* @r4, align 4
  store i32 %v0_e1b8, i32* %r2.global-to-local, align 4
  %v4_e1bc = call i32 @function_d470(i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 ptrtoint ([7 x i8]* @global_var_12658.299 to i32), i32 %v0_e1b8)
  store i32 ptrtoint (i32* @global_var_12660.301 to i32), i32* %r0.global-to-local, align 4
  %v0_e1c4 = load i32, i32* @r4, align 4
  store i32 %v0_e1c4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12660.301 to i32), i32* %r1.global-to-local, align 4
  %v3_e1cc = call i32 @function_d470(i32 ptrtoint (i32* @global_var_12660.301 to i32), i32 ptrtoint (i32* @global_var_12660.301 to i32), i32 %v0_e1c4)
  store i32 ptrtoint ([6 x i8]* @global_var_12668.303 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e1dc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_12668.303 to i32), i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_12670.305 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e1ec = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_12670.305 to i32), i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12670.305 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12448.177 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e1fc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_12670.305 to i32), i32 ptrtoint ([5 x i8]* @global_var_12448.177 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12670.305 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e20c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_12670.305 to i32), i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_12678.307 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v3_e21c = call i32 @function_d470(i32 ptrtoint (i32* @global_var_12678.307 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 5)
  store i32 ptrtoint ([9 x i8]* @global_var_12680.309 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1268c.311 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e22c = call i32 @function_d470(i32 ptrtoint ([9 x i8]* @global_var_12680.309 to i32), i32 ptrtoint ([7 x i8]* @global_var_1268c.311 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_12694.313 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12694.313 to i32), i32* %r1.global-to-local, align 4
  %v5_e23c = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12694.313 to i32), i32 ptrtoint ([8 x i8]* @global_var_12694.313 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_1269c.315 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1269c.315 to i32), i32* %r1.global-to-local, align 4
  %v5_e24c = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_1269c.315 to i32), i32 ptrtoint ([7 x i8]* @global_var_1269c.315 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_1269c.315 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_126a4.317 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e25c = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_1269c.315 to i32), i32 ptrtoint ([8 x i8]* @global_var_126a4.317 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_126ac.319 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([10 x i8]* @global_var_126b4.321 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e26c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_126ac.319 to i32), i32 ptrtoint ([10 x i8]* @global_var_126b4.321 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_126ac.319 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12600.275 to i32), i32* %r1.global-to-local, align 4
  %v0_e278 = load i32, i32* @r4, align 4
  store i32 %v0_e278, i32* %r2.global-to-local, align 4
  %v5_e27c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_126ac.319 to i32), i32 ptrtoint ([7 x i8]* @global_var_12600.275 to i32), i32 %v0_e278)
  store i32 ptrtoint ([5 x i8]* @global_var_126c0.323 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_126c0.323 to i32), i32* %r1.global-to-local, align 4
  %v5_e28c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_126c0.323 to i32), i32 ptrtoint ([5 x i8]* @global_var_126c0.323 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_126c8.325 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126d0.327 to i32), i32* %r1.global-to-local, align 4
  %v0_e298 = load i32, i32* @r4, align 4
  store i32 %v0_e298, i32* %r2.global-to-local, align 4
  %v5_e29c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_126c8.325 to i32), i32 ptrtoint ([7 x i8]* @global_var_126d0.327 to i32), i32 %v0_e298)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126d0.327 to i32), i32* %r1.global-to-local, align 4
  %v0_e2a8 = load i32, i32* @r4, align 4
  store i32 %v0_e2a8, i32* %r2.global-to-local, align 4
  %v5_e2ac = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_126d0.327 to i32), i32 %v0_e2a8)
  store i32 ptrtoint ([3 x i8]* @global_var_126a0.329 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126d8.331 to i32), i32* %r1.global-to-local, align 4
  %v0_e2b8 = load i32, i32* @r4, align 4
  store i32 %v0_e2b8, i32* %r2.global-to-local, align 4
  %v5_e2bc = call i32 @function_d470(i32 ptrtoint ([3 x i8]* @global_var_126a0.329 to i32), i32 ptrtoint ([7 x i8]* @global_var_126d8.331 to i32), i32 %v0_e2b8)
  store i32 ptrtoint ([7 x i8]* @global_var_126d8.331 to i32), i32* %r0.global-to-local, align 4
  %v0_e2c4 = load i32, i32* @r4, align 4
  store i32 %v0_e2c4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126d8.331 to i32), i32* %r1.global-to-local, align 4
  %v5_e2cc = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_126d8.331 to i32), i32 ptrtoint ([7 x i8]* @global_var_126d8.331 to i32), i32 %v0_e2c4)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_126e0.333 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e2dc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint (i32* @global_var_126e0.333 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_126e0.333 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e2ec = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_126e0.333 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_126ec.335 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_e2fc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_126ec.335 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126f4.337 to i32), i32* %r1.global-to-local, align 4
  %v0_e308 = load i32, i32* @r4, align 4
  store i32 %v0_e308, i32* %r2.global-to-local, align 4
  %v5_e30c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([7 x i8]* @global_var_126f4.337 to i32), i32 %v0_e308)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_126fc.339 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e31c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_126fc.339 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12708.341 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e32c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12708.341 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12710.343 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e33c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12710.343 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1271c.345 to i32), i32* %r1.global-to-local, align 4
  %v0_e348 = load i32, i32* @r4, align 4
  store i32 %v0_e348, i32* %r2.global-to-local, align 4
  %v4_e34c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_1271c.345 to i32), i32 %v0_e348)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12724.347 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e35c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12724.347 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12730.349 to i32), i32* %r1.global-to-local, align 4
  %v0_e368 = load i32, i32* @r4, align 4
  store i32 %v0_e368, i32* %r2.global-to-local, align 4
  %v4_e36c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12730.349 to i32), i32 %v0_e368)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12738.351 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e37c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12738.351 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12740.353 to i32), i32* %r1.global-to-local, align 4
  %v0_e388 = load i32, i32* @r4, align 4
  store i32 %v0_e388, i32* %r2.global-to-local, align 4
  %v5_e38c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([7 x i8]* @global_var_12740.353 to i32), i32 %v0_e388)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12748.355 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e39c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12748.355 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12750.357 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e3ac = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_12750.357 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1275c.359 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e3bc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_1275c.359 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12768.361 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e3cc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_12768.361 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12768.361 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12768.361 to i32), i32* %r1.global-to-local, align 4
  %v5_e3dc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_12768.361 to i32), i32 ptrtoint ([6 x i8]* @global_var_12768.361 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_12770.363 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12770.363 to i32), i32* %r1.global-to-local, align 4
  %v5_e3ec = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_12770.363 to i32), i32 ptrtoint ([8 x i8]* @global_var_12770.363 to i32), i32 7)
  store i32 ptrtoint (i32* @global_var_12778.365 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12494.195 to i32), i32* %r1.global-to-local, align 4
  %v0_e3f8 = load i32, i32* @r4, align 4
  store i32 %v0_e3f8, i32* %r2.global-to-local, align 4
  %v4_e3fc = call i32 @function_d470(i32 ptrtoint (i32* @global_var_12778.365 to i32), i32 ptrtoint ([7 x i8]* @global_var_12494.195 to i32), i32 %v0_e3f8)
  store i32 ptrtoint ([4 x i8]* @global_var_12780.367 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1242c.171 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e40c = call i32 @function_d470(i32 ptrtoint ([4 x i8]* @global_var_12780.367 to i32), i32 ptrtoint ([9 x i8]* @global_var_1242c.171 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_12784.369 to i32), i32* %r0.global-to-local, align 4
  %v0_e414 = load i32, i32* @r4, align 4
  store i32 %v0_e414, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12784.369 to i32), i32* %r1.global-to-local, align 4
  %v5_e41c = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_12784.369 to i32), i32 ptrtoint ([7 x i8]* @global_var_12784.369 to i32), i32 %v0_e414)
  store i32 ptrtoint ([6 x i8]* @global_var_1278c.371 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12794.373 to i32), i32* %r1.global-to-local, align 4
  %v0_e428 = load i32, i32* @r4, align 4
  store i32 %v0_e428, i32* %r2.global-to-local, align 4
  %v4_e42c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_1278c.371 to i32), i32 ptrtoint (i32* @global_var_12794.373 to i32), i32 %v0_e428)
  store i32 ptrtoint ([7 x i8]* @global_var_1279c.375 to i32), i32* %r0.global-to-local, align 4
  %v0_e434 = load i32, i32* @r4, align 4
  store i32 %v0_e434, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1279c.375 to i32), i32* %r1.global-to-local, align 4
  %v5_e43c = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_1279c.375 to i32), i32 ptrtoint ([7 x i8]* @global_var_1279c.375 to i32), i32 %v0_e434)
  store i32 ptrtoint ([6 x i8]* @global_var_127a4.377 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_127a4.377 to i32), i32* %r1.global-to-local, align 4
  %v5_e44c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_127a4.377 to i32), i32 ptrtoint ([6 x i8]* @global_var_127a4.377 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_127ac.379 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_127ac.379 to i32), i32* %r1.global-to-local, align 4
  %v5_e45c = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_127ac.379 to i32), i32 ptrtoint ([8 x i8]* @global_var_127ac.379 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_127b4.381 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_127b4.381 to i32), i32* %r1.global-to-local, align 4
  %v5_e46c = call i32 @function_d470(i32 ptrtoint ([4 x i8]* @global_var_127b4.381 to i32), i32 ptrtoint ([4 x i8]* @global_var_127b4.381 to i32), i32 3)
  store i32 ptrtoint ([4 x i8]* @global_var_127b8.383 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_127b8.383 to i32), i32* %r1.global-to-local, align 4
  %v5_e47c = call i32 @function_d470(i32 ptrtoint ([4 x i8]* @global_var_127b8.383 to i32), i32 ptrtoint ([4 x i8]* @global_var_127b8.383 to i32), i32 3)
  store i32 ptrtoint (i32* @global_var_127bc.385 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_127bc.385 to i32), i32* %r1.global-to-local, align 4
  %v3_e48c = call i32 @function_d470(i32 ptrtoint (i32* @global_var_127bc.385 to i32), i32 ptrtoint (i32* @global_var_127bc.385 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_127c4.387 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_127c4.387 to i32), i32* %r1.global-to-local, align 4
  %v5_e49c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_127c4.387 to i32), i32 ptrtoint ([5 x i8]* @global_var_127c4.387 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_127cc.389 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  %v0_e4a8 = load i32, i32* @r4, align 4
  store i32 %v0_e4a8, i32* %r2.global-to-local, align 4
  %v4_e4ac = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_127cc.389 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 %v0_e4a8)
  store i32 ptrtoint ([6 x i8]* @global_var_127d4.391 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125a4.181 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e4bc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_127d4.391 to i32), i32 ptrtoint (i32* @global_var_125a4.181 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_127d4.391 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12414.163 to i32), i32* %r1.global-to-local, align 4
  %v0_e4c8 = load i32, i32* @r4, align 4
  store i32 %v0_e4c8, i32* %r2.global-to-local, align 4
  %v4_e4cc = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_127d4.391 to i32), i32 ptrtoint (i32* @global_var_12414.163 to i32), i32 %v0_e4c8)
  store i32 ptrtoint ([7 x i8]* @global_var_127dc.393 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r1.global-to-local, align 4
  %v0_e4d8 = load i32, i32* @r4, align 4
  store i32 %v0_e4d8, i32* %r2.global-to-local, align 4
  %v4_e4dc = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_127dc.393 to i32), i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 %v0_e4d8)
  store i32 ptrtoint ([7 x i8]* @global_var_127dc.393 to i32), i32* %r0.global-to-local, align 4
  %v0_e4e4 = load i32, i32* @r4, align 4
  store i32 %v0_e4e4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_127dc.393 to i32), i32* %r1.global-to-local, align 4
  %v5_e4ec = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_127dc.393 to i32), i32 ptrtoint ([7 x i8]* @global_var_127dc.393 to i32), i32 %v0_e4e4)
  store i32 ptrtoint ([5 x i8]* @global_var_127e4.395 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_127e4.395 to i32), i32* %r1.global-to-local, align 4
  %v5_e4fc = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_127e4.395 to i32), i32 ptrtoint ([5 x i8]* @global_var_127e4.395 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_127ec.397 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e50c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_127ec.397 to i32), i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_127f4.399 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e51c = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_127f4.399 to i32), i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_127fc.401 to i32), i32* %r0.global-to-local, align 4
  %v0_e524 = load i32, i32* @r4, align 4
  store i32 %v0_e524, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_127fc.401 to i32), i32* %r1.global-to-local, align 4
  %v5_e52c = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_127fc.401 to i32), i32 ptrtoint ([7 x i8]* @global_var_127fc.401 to i32), i32 %v0_e524)
  store i32 ptrtoint ([6 x i8]* @global_var_12804.403 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1280c.405 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e53c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_12804.403 to i32), i32 ptrtoint ([6 x i8]* @global_var_1280c.405 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12814.407 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1281c.409 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e54c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_12814.407 to i32), i32 ptrtoint ([5 x i8]* @global_var_1281c.409 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_12824.411 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12824.411 to i32), i32* %r1.global-to-local, align 4
  %v3_e55c = call i32 @function_d470(i32 ptrtoint (i32* @global_var_12824.411 to i32), i32 ptrtoint (i32* @global_var_12824.411 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_125b8.413 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1282c.415 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e56c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_125b8.413 to i32), i32 ptrtoint (i32* @global_var_1282c.415 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_12838.417 to i32), i32* %r0.global-to-local, align 4
  %v0_e574 = load i32, i32* @r4, align 4
  store i32 %v0_e574, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12838.417 to i32), i32* %r1.global-to-local, align 4
  %v5_e57c = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_12838.417 to i32), i32 ptrtoint ([7 x i8]* @global_var_12838.417 to i32), i32 %v0_e574)
  store i32 ptrtoint (i32* @global_var_12840.419 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12848.421 to i32), i32* %r1.global-to-local, align 4
  %v0_e588 = load i32, i32* @r4, align 4
  store i32 %v0_e588, i32* %r2.global-to-local, align 4
  %v4_e58c = call i32 @function_d470(i32 ptrtoint (i32* @global_var_12840.419 to i32), i32 ptrtoint ([7 x i8]* @global_var_12848.421 to i32), i32 %v0_e588)
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12850.423 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e59c = call i32 @function_d470(i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 ptrtoint ([9 x i8]* @global_var_12850.423 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1285c.425 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e5ac = call i32 @function_d470(i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 ptrtoint ([9 x i8]* @global_var_1285c.425 to i32), i32 8)
  %v0_e5b0 = load i32, i32* @r4, align 4
  store i32 %v0_e5b0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12868.427 to i32), i32* %r1.global-to-local, align 4
  %v4_e5bc = call i32 @function_d470(i32 ptrtoint (i32* @global_var_128b0.147 to i32), i32 ptrtoint ([7 x i8]* @global_var_12868.427 to i32), i32 %v0_e5b0)
  store i32 ptrtoint (i32* @global_var_12870.429 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1287c.431 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_e5cc = call i32 @function_d470(i32 ptrtoint (i32* @global_var_12870.429 to i32), i32 ptrtoint ([5 x i8]* @global_var_1287c.431 to i32), i32 11)
  store i32 ptrtoint ([9 x i8]* @global_var_12884.433 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12884.433 to i32), i32* %r1.global-to-local, align 4
  %v5_e5dc = call i32 @function_d470(i32 ptrtoint ([9 x i8]* @global_var_12884.433 to i32), i32 ptrtoint ([9 x i8]* @global_var_12884.433 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_12890.435 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12890.435 to i32), i32* %r1.global-to-local, align 4
  %v5_e5ec = call i32 @function_d470(i32 ptrtoint ([9 x i8]* @global_var_12890.435 to i32), i32 ptrtoint ([9 x i8]* @global_var_12890.435 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_1289c.437 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1289c.437 to i32), i32* %r1.global-to-local, align 4
  %v5_e5fc = call i32 @function_d470(i32 ptrtoint ([9 x i8]* @global_var_1289c.437 to i32), i32 ptrtoint ([9 x i8]* @global_var_1289c.437 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_125a0.253 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125a0.253 to i32), i32* %r1.global-to-local, align 4
  %v3_e60c = call i32 @function_d470(i32 ptrtoint (i32* @global_var_125a0.253 to i32), i32 ptrtoint (i32* @global_var_125a0.253 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_128a8.439 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128a8.439 to i32), i32* %r1.global-to-local, align 4
  %v3_e61c = call i32 @function_d470(i32 ptrtoint (i32* @global_var_128a8.439 to i32), i32 ptrtoint (i32* @global_var_128a8.439 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_128b4.441 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_128b4.441 to i32), i32* %r1.global-to-local, align 4
  %v5_e62c = call i32 @function_d470(i32 ptrtoint ([9 x i8]* @global_var_128b4.441 to i32), i32 ptrtoint ([9 x i8]* @global_var_128b4.441 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_128c0.443 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_128c0.443 to i32), i32* %r1.global-to-local, align 4
  %v5_e63c = call i32 @function_d470(i32 ptrtoint ([9 x i8]* @global_var_128c0.443 to i32), i32 ptrtoint ([9 x i8]* @global_var_128c0.443 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_128cc.445 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_124a4.199 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_e64c = call i32 @function_d470(i32 ptrtoint ([8 x i8]* @global_var_128cc.445 to i32), i32 ptrtoint ([11 x i8]* @global_var_124a4.199 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d4.447 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_e65c = call i32 @function_d470(i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), i32 ptrtoint (i32* @global_var_128d4.447 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_1278c.371 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128e4.449 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_e66c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_1278c.371 to i32), i32 ptrtoint (i32* @global_var_128e4.449 to i32), i32 14)
  store i32 ptrtoint ([10 x i8]* @global_var_128f4.451 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12900.453 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e67c = call i32 @function_d470(i32 ptrtoint ([10 x i8]* @global_var_128f4.451 to i32), i32 ptrtoint (i32* @global_var_12900.453 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_1290c.455 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_12918.457 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_e68c = call i32 @function_d470(i32 ptrtoint ([10 x i8]* @global_var_1290c.455 to i32), i32 ptrtoint ([11 x i8]* @global_var_12918.457 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_12924.459 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_126e0.333 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e69c = call i32 @function_d470(i32 ptrtoint ([10 x i8]* @global_var_12924.459 to i32), i32 ptrtoint (i32* @global_var_126e0.333 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_12930.461 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_126e0.333 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e6ac = call i32 @function_d470(i32 ptrtoint ([10 x i8]* @global_var_12930.461 to i32), i32 ptrtoint (i32* @global_var_126e0.333 to i32), i32 10)
  store i32 ptrtoint (i32* @global_var_12870.429 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1293c.463 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v3_e6bc = call i32 @function_d470(i32 ptrtoint (i32* @global_var_12870.429 to i32), i32 ptrtoint (i32* @global_var_1293c.463 to i32), i32 11)
  store i32 ptrtoint ([13 x i8]* @global_var_12948.465 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([13 x i8]* @global_var_12958.467 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e6cc = call i32 @function_d470(i32 ptrtoint ([13 x i8]* @global_var_12948.465 to i32), i32 ptrtoint ([13 x i8]* @global_var_12958.467 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_12968.469 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12970.471 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_e6dc = call i32 @function_d470(i32 ptrtoint ([7 x i8]* @global_var_12968.469 to i32), i32 ptrtoint (i32* @global_var_12970.471 to i32), i32 13)
  store i32 ptrtoint ([9 x i8]* @global_var_12978.473 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12984.475 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_e6ec = call i32 @function_d470(i32 ptrtoint ([9 x i8]* @global_var_12978.473 to i32), i32 ptrtoint ([8 x i8]* @global_var_12984.475 to i32), i32 15)
  store i32 ptrtoint ([12 x i8]* @global_var_1298c.477 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12998.479 to i32), i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_e6fc = call i32 @function_d470(i32 ptrtoint ([12 x i8]* @global_var_1298c.477 to i32), i32 ptrtoint (i32* @global_var_12998.479 to i32), i32 20)
  store i32 ptrtoint ([6 x i8]* @global_var_129a4.481 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12998.479 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_e70c = call i32 @function_d470(i32 ptrtoint ([6 x i8]* @global_var_129a4.481 to i32), i32 ptrtoint (i32* @global_var_12998.479 to i32), i32 14)
  %v2_e714 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_e714, i32* %r0.global-to-local, align 4
  %v2_e718 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_e718, i32* %r1.global-to-local, align 4
  %tmp285 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_e724

dec_label_pc_e724:                                ; preds = %dec_label_pc_ed6c, %dec_label_pc_da3c
  %v0_ea44 = phi i32 [ %v2_e714, %dec_label_pc_da3c ], [ %stack_var_-1872.1, %dec_label_pc_ed6c ]
  %stack_var_-1868.0 = phi i8 [ %v5_da24.le, %dec_label_pc_da3c ], [ %stack_var_-1868.1, %dec_label_pc_ed6c ]
  %stack_var_-1876.0 = phi i8* [ %tmp285, %dec_label_pc_da3c ], [ %stack_var_-1876.1, %dec_label_pc_ed6c ]
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %r2.global-to-local, align 4
  %v2_e728 = load i32, i32* @global_var_1b1e8.112, align 4
  store i32 %v2_e728, i32* %r8.global-to-local, align 4
  %v0_e72c = load i32, i32* @fp, align 4
  %v3_e72c = icmp uge i32 %v0_e72c, %v2_e728
  store i1 %v3_e72c, i1* %cpsr_c.global-to-local, align 1
  %v9_e72c = icmp eq i32 %v0_e72c, %v2_e728
  store i1 %v9_e72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e72c, label %dec_label_pc_e9d4, label %dec_label_pc_e734

dec_label_pc_e734:                                ; preds = %dec_label_pc_e724
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_e9a8 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_e740

dec_label_pc_e740:                                ; preds = %.thread50.dec_label_pc_e740_crit_edge, %dec_label_pc_e734
  %v0_e740 = phi i32 [ %v0_e740.pre, %.thread50.dec_label_pc_e740_crit_edge ], [ 0, %dec_label_pc_e734 ]
  store i32 %v0_e740, i32* %stack_var_-92, align 4
  %v0_e750 = call i32 @function_d208()
  %v1_e750 = trunc i32 %v0_e750 to i8
  store i32 %v0_e750, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b230.48 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %lr.global-to-local, align 4
  %v2_e75c = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_e75c, i32* %r2.global-to-local, align 4
  %v2_e760 = and i32 %v0_e750, 128
  %v3_e760 = icmp ne i32 %v2_e760, 0
  store i1 %v3_e760, i1* %cpsr_c.global-to-local, align 1
  %v4_e760 = sdiv i32 %v0_e750, 256
  store i32 %v4_e760, i32* %r3.global-to-local, align 4
  %v1_e764 = trunc i32 %v4_e760 to i8
  store i8 %v1_e764, i8* bitcast (i32* @global_var_1b1bd.135 to i8*), align 4
  store i32 %v2_e75c, i32* @global_var_1b1c4.482, align 4
  store i8 %v1_e750, i8* bitcast (i32* @global_var_1b1bc.139 to i8*), align 4
  br label %dec_label_pc_e770

dec_label_pc_e770:                                ; preds = %dec_label_pc_e844, %dec_label_pc_e7a0, %dec_label_pc_e878, %dec_label_pc_e86c, %dec_label_pc_e860, %dec_label_pc_e854, %.thread35, %bb304, %bb303, %bb302, %bb301, %bb300, %dec_label_pc_e83c, %dec_label_pc_e834, %bb296, %dec_label_pc_e804, %dec_label_pc_e7e0, %bb289, %dec_label_pc_e7b0, %bb288, %dec_label_pc_e798, %bb287, %bb306, %dec_label_pc_e740
  %v0_e770 = call i32 @function_d208()
  store i32 %v0_e770, i32* %r0.global-to-local, align 4
  %v1_e774 = urem i32 %v0_e770, 256
  store i32 %v1_e774, i32* %r1.global-to-local, align 4
  %v3_e778 = udiv i32 %v0_e770, 256
  store i32 %v3_e778, i32* %r3.global-to-local, align 4
  %v3_e77c = udiv i32 %v0_e770, 65536
  store i32 %v3_e77c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e780 = icmp eq i32 %v1_e774, 0
  store i1 %v2_e780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e780, label %bb287, label %bb286

bb286:                                            ; preds = %dec_label_pc_e770
  %v3_e784 = icmp ugt i32 %v1_e774, 126
  store i1 %v3_e784, i1* %cpsr_c.global-to-local, align 1
  %v8_e784 = icmp eq i32 %v1_e774, 127
  store i1 %v8_e784, i1* %cpsr_z.global-to-local, align 1
  br label %bb287

bb287:                                            ; preds = %dec_label_pc_e770, %bb286
  %v0_e794 = phi i1 [ true, %dec_label_pc_e770 ], [ %v8_e784, %bb286 ]
  %v1_e788 = urem i32 %v3_e778, 256
  store i32 %v1_e788, i32* %ip.global-to-local, align 4
  %v1_e78c = urem i32 %v3_e77c, 256
  store i32 %v1_e78c, i32* %r2.global-to-local, align 4
  %v1_e790 = and i32 %v0_e770, 8388608
  %v2_e790 = icmp ne i32 %v1_e790, 0
  store i1 %v2_e790, i1* %cpsr_c.global-to-local, align 1
  %v3_e790 = udiv i32 %v0_e770, 16777216
  store i32 %v3_e790, i32* %r0.global-to-local, align 4
  br i1 %v0_e794, label %dec_label_pc_e770, label %dec_label_pc_e798

dec_label_pc_e798:                                ; preds = %bb287
  %v2_e798 = icmp ugt i32 %v1_e774, 2
  store i1 %v2_e798, i1* %cpsr_c.global-to-local, align 1
  %v7_e798 = icmp eq i32 %v1_e774, 3
  store i1 %v7_e798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e798, label %dec_label_pc_e770, label %dec_label_pc_e7a0

dec_label_pc_e7a0:                                ; preds = %dec_label_pc_e798
  %v1_e7a0 = add nsw i32 %v1_e774, -15
  store i32 %v1_e7a0, i32* %r3.global-to-local, align 4
  %v2_e7a4 = icmp ugt i32 %v1_e774, 55
  store i1 %v2_e7a4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7a4 = icmp eq i32 %v1_e774, 56
  store i1 %v7_e7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7a4, label %dec_label_pc_e770, label %bb288

bb288:                                            ; preds = %dec_label_pc_e7a0
  %v3_e7a8 = icmp ne i32 %v1_e7a0, 0
  store i1 %v3_e7a8, i1* %cpsr_c.global-to-local, align 1
  %v8_e7a8 = icmp eq i32 %v1_e7a0, 1
  store i1 %v8_e7a8, i1* %cpsr_z.global-to-local, align 1
  %v2_e7ac = xor i1 %v3_e7a8, true
  %v3_e7ac = or i1 %v8_e7a8, %v2_e7ac
  br i1 %v3_e7ac, label %dec_label_pc_e770, label %dec_label_pc_e7b0

dec_label_pc_e7b0:                                ; preds = %bb288
  %v2_e7b0 = icmp ugt i32 %v1_e774, 9
  store i1 %v2_e7b0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7b0 = icmp eq i32 %v1_e774, 10
  store i1 %v7_e7b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7b0, label %dec_label_pc_e770, label %dec_label_pc_e7b8

dec_label_pc_e7b8:                                ; preds = %dec_label_pc_e7b0
  %v2_e7b8 = icmp ugt i32 %v1_e774, 191
  store i1 %v2_e7b8, i1* %cpsr_c.global-to-local, align 1
  %v7_e7b8 = icmp eq i32 %v1_e774, 192
  store i1 %v7_e7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7b8, label %bb289, label %dec_label_pc_e7c4

bb289:                                            ; preds = %dec_label_pc_e7b8
  %v3_e7bc = icmp ugt i32 %v1_e788, 167
  store i1 %v3_e7bc, i1* %cpsr_c.global-to-local, align 1
  %v8_e7bc = icmp eq i32 %v1_e788, 168
  store i1 %v8_e7bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e7bc, label %dec_label_pc_e770, label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e7b8, %bb289
  %v7_e7c4 = icmp eq i32 %v1_e774, 172
  %.354 = zext i1 %v7_e7c4 to i32
  store i32 %.354, i32* %r3.global-to-local, align 4
  %v2_e7d0 = icmp ugt i32 %v1_e788, 14
  store i1 %v2_e7d0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7d0 = icmp eq i32 %v1_e788, 15
  store i1 %v7_e7d0, i1* %cpsr_z.global-to-local, align 1
  %v2_e7d4 = xor i1 %v2_e7d0, true
  %v3_e7d4 = or i1 %v7_e7d0, %v2_e7d4
  br i1 %v3_e7d4, label %.thread13, label %bb292

.thread13:                                        ; preds = %dec_label_pc_e7c4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e7e8

bb292:                                            ; preds = %dec_label_pc_e7c4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7d8 = icmp eq i1 %v7_e7c4, false
  store i1 %v2_e7d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7d8, label %dec_label_pc_e7e8, label %dec_label_pc_e7e0

dec_label_pc_e7e0:                                ; preds = %bb292
  %v2_e7e0 = icmp ugt i32 %v1_e788, 30
  store i1 %v2_e7e0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7e0 = icmp eq i32 %v1_e788, 31
  store i1 %v7_e7e0, i1* %cpsr_z.global-to-local, align 1
  %v2_e7e4 = xor i1 %v2_e7e0, true
  %v3_e7e4 = or i1 %v7_e7e0, %v2_e7e4
  br i1 %v3_e7e4, label %dec_label_pc_e770, label %dec_label_pc_e7e8

dec_label_pc_e7e8:                                ; preds = %.thread13, %dec_label_pc_e7e0, %bb292
  %v7_e7e8 = icmp eq i32 %v1_e774, 100
  %.355 = zext i1 %v7_e7e8 to i32
  store i32 %.355, i32* %r3.global-to-local, align 4
  %v2_e7f4 = icmp ugt i32 %v1_e788, 62
  store i1 %v2_e7f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7f4 = icmp eq i32 %v1_e788, 63
  store i1 %v7_e7f4, i1* %cpsr_z.global-to-local, align 1
  %v2_e7f8 = xor i1 %v2_e7f4, true
  %v3_e7f8 = or i1 %v7_e7f4, %v2_e7f8
  br i1 %v3_e7f8, label %.thread18, label %bb295

.thread18:                                        ; preds = %dec_label_pc_e7e8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e80c

bb295:                                            ; preds = %dec_label_pc_e7e8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7fc = icmp eq i1 %v7_e7e8, false
  store i1 %v2_e7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7fc, label %dec_label_pc_e80c, label %dec_label_pc_e804

dec_label_pc_e804:                                ; preds = %bb295
  %v2_e804 = icmp ugt i32 %v1_e788, 125
  store i1 %v2_e804, i1* %cpsr_c.global-to-local, align 1
  %v7_e804 = icmp eq i32 %v1_e788, 126
  store i1 %v7_e804, i1* %cpsr_z.global-to-local, align 1
  %v2_e808 = xor i1 %v2_e804, true
  %v3_e808 = or i1 %v7_e804, %v2_e808
  br i1 %v3_e808, label %dec_label_pc_e770, label %dec_label_pc_e80c

dec_label_pc_e80c:                                ; preds = %.thread18, %dec_label_pc_e804, %bb295
  %v2_e80c = icmp ugt i32 %v1_e774, 168
  store i1 %v2_e80c, i1* %cpsr_c.global-to-local, align 1
  %v7_e80c = icmp eq i32 %v1_e774, 169
  store i1 %v7_e80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e80c, label %bb296, label %dec_label_pc_e818

bb296:                                            ; preds = %dec_label_pc_e80c
  %v3_e810 = icmp eq i32 %v1_e788, 255
  store i1 %v3_e810, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e810, label %dec_label_pc_e770, label %dec_label_pc_e818

dec_label_pc_e818:                                ; preds = %dec_label_pc_e80c, %bb296
  %v7_e818 = icmp eq i32 %v1_e774, 198
  %.356 = zext i1 %v7_e818 to i32
  store i32 %.356, i32* %r3.global-to-local, align 4
  %v2_e824 = icmp ugt i32 %v1_e788, 16
  store i1 %v2_e824, i1* %cpsr_c.global-to-local, align 1
  %v7_e824 = icmp eq i32 %v1_e788, 17
  store i1 %v7_e824, i1* %cpsr_z.global-to-local, align 1
  %v2_e828 = xor i1 %v2_e824, true
  %v3_e828 = or i1 %v7_e824, %v2_e828
  br i1 %v3_e828, label %.thread24, label %bb299

.thread24:                                        ; preds = %dec_label_pc_e818
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e83c

bb299:                                            ; preds = %dec_label_pc_e818
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e82c = icmp eq i1 %v7_e818, false
  store i1 %v2_e82c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e82c, label %dec_label_pc_e83c, label %dec_label_pc_e834

dec_label_pc_e834:                                ; preds = %bb299
  %v2_e834 = icmp ugt i32 %v1_e788, 18
  store i1 %v2_e834, i1* %cpsr_c.global-to-local, align 1
  %v7_e834 = icmp eq i32 %v1_e788, 19
  store i1 %v7_e834, i1* %cpsr_z.global-to-local, align 1
  %v2_e838 = xor i1 %v2_e834, true
  %v3_e838 = or i1 %v7_e834, %v2_e838
  br i1 %v3_e838, label %dec_label_pc_e770, label %dec_label_pc_e83c

dec_label_pc_e83c:                                ; preds = %.thread24, %dec_label_pc_e834, %bb299
  %v2_e83c = icmp ugt i32 %v1_e774, 222
  store i1 %v2_e83c, i1* %cpsr_c.global-to-local, align 1
  %v7_e83c = icmp eq i32 %v1_e774, 223
  store i1 %v7_e83c, i1* %cpsr_z.global-to-local, align 1
  %v2_e840 = xor i1 %v7_e83c, true
  %v3_e840 = and i1 %v2_e83c, %v2_e840
  br i1 %v3_e840, label %dec_label_pc_e770, label %dec_label_pc_e844

dec_label_pc_e844:                                ; preds = %dec_label_pc_e83c
  %v1_e844 = add nsw i32 %v1_e774, -6
  store i32 %v1_e844, i32* %r3.global-to-local, align 4
  %v2_e848 = icmp ugt i32 %v1_e774, 10
  store i1 %v2_e848, i1* %cpsr_c.global-to-local, align 1
  %v7_e848 = icmp eq i32 %v1_e774, 11
  store i1 %v7_e848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e848, label %dec_label_pc_e770, label %bb300

bb300:                                            ; preds = %dec_label_pc_e844
  %v3_e84c = icmp ne i32 %v1_e844, 0
  store i1 %v3_e84c, i1* %cpsr_c.global-to-local, align 1
  %v8_e84c = icmp eq i32 %v1_e844, 1
  store i1 %v8_e84c, i1* %cpsr_z.global-to-local, align 1
  %v2_e850 = xor i1 %v3_e84c, true
  %v3_e850 = or i1 %v8_e84c, %v2_e850
  br i1 %v3_e850, label %dec_label_pc_e770, label %dec_label_pc_e854

dec_label_pc_e854:                                ; preds = %bb300
  %v2_e854 = icmp ugt i32 %v1_e774, 21
  store i1 %v2_e854, i1* %cpsr_c.global-to-local, align 1
  %v7_e854 = icmp eq i32 %v1_e774, 22
  store i1 %v7_e854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e854, label %dec_label_pc_e770, label %bb301

bb301:                                            ; preds = %dec_label_pc_e854
  %v3_e858 = icmp ugt i32 %v1_e774, 20
  store i1 %v3_e858, i1* %cpsr_c.global-to-local, align 1
  %v8_e858 = icmp eq i32 %v1_e774, 21
  store i1 %v8_e858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e858, label %dec_label_pc_e770, label %dec_label_pc_e860

dec_label_pc_e860:                                ; preds = %bb301
  %v2_e860 = icmp ugt i32 %v1_e774, 27
  store i1 %v2_e860, i1* %cpsr_c.global-to-local, align 1
  %v7_e860 = icmp eq i32 %v1_e774, 28
  store i1 %v7_e860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e860, label %dec_label_pc_e770, label %bb302

bb302:                                            ; preds = %dec_label_pc_e860
  %v3_e864 = icmp ugt i32 %v1_e774, 25
  store i1 %v3_e864, i1* %cpsr_c.global-to-local, align 1
  %v8_e864 = icmp eq i32 %v1_e774, 26
  store i1 %v8_e864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e864, label %dec_label_pc_e770, label %dec_label_pc_e86c

dec_label_pc_e86c:                                ; preds = %bb302
  %v2_e86c = icmp ugt i32 %v1_e774, 29
  store i1 %v2_e86c, i1* %cpsr_c.global-to-local, align 1
  %v7_e86c = icmp eq i32 %v1_e774, 30
  store i1 %v7_e86c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e86c, label %dec_label_pc_e770, label %bb303

bb303:                                            ; preds = %dec_label_pc_e86c
  %v3_e870 = icmp ugt i32 %v1_e774, 28
  store i1 %v3_e870, i1* %cpsr_c.global-to-local, align 1
  %v8_e870 = icmp eq i32 %v1_e774, 29
  store i1 %v8_e870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e870, label %dec_label_pc_e770, label %dec_label_pc_e878

dec_label_pc_e878:                                ; preds = %bb303
  %v2_e878 = icmp ugt i32 %v1_e774, 54
  store i1 %v2_e878, i1* %cpsr_c.global-to-local, align 1
  %v7_e878 = icmp eq i32 %v1_e774, 55
  store i1 %v7_e878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e878, label %dec_label_pc_e770, label %bb304

bb304:                                            ; preds = %dec_label_pc_e878
  %v3_e87c = icmp ugt i32 %v1_e774, 32
  store i1 %v3_e87c, i1* %cpsr_c.global-to-local, align 1
  %v8_e87c = icmp eq i32 %v1_e774, 33
  store i1 %v8_e87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e87c, label %dec_label_pc_e770, label %dec_label_pc_e884

dec_label_pc_e884:                                ; preds = %bb304
  %v2_e884 = icmp ugt i32 %v1_e774, 214
  store i1 %v2_e884, i1* %cpsr_c.global-to-local, align 1
  %v7_e884 = icmp eq i32 %v1_e774, 215
  store i1 %v7_e884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e884, label %.thread35, label %bb305

bb305:                                            ; preds = %dec_label_pc_e884
  %v3_e888 = icmp ugt i32 %v1_e774, 213
  store i1 %v3_e888, i1* %cpsr_c.global-to-local, align 1
  %v8_e888 = icmp eq i32 %v1_e774, 214
  store i1 %v8_e888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e888, label %bb306, label %dec_label_pc_e898

.thread35:                                        ; preds = %dec_label_pc_e884
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e770

bb306:                                            ; preds = %bb305
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e770

dec_label_pc_e898:                                ; preds = %bb305
  store i32 0, i32* @r4, align 4
  %v5_e8a4 = call i32 @llvm.bswap.i32(i32 %v0_e770)
  store i32 %v5_e8a4, i32* %r3.global-to-local, align 4
  %tmp307 = and i32 %v0_e770, 65280
  %tmp308 = call i32 @llvm.bswap.i32(i32 %tmp307)
  %v1_e8ac = and i32 %v5_e8a4, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_e8b0 = mul nuw i32 %v3_e790, 16777216
  %v3_e8b4 = udiv i32 %tmp308, 256
  %v4_e8b8 = mul i32 %v1_e8ac, 256
  %tmp309 = and i32 %v0_e770, 32768
  %v3_e8bc = icmp ne i32 %tmp309, 0
  store i1 %v3_e8bc, i1* %cpsr_c.global-to-local, align 1
  %v4_e8bc = udiv i32 %v5_e8a4, 16777216
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* @r0, align 4
  %v5_e8bc = or i32 %v4_e8bc, %v3_e8b0
  %v5_e8b8 = or i32 %v5_e8bc, %v4_e8b8
  %v2_e8c4 = or i32 %v5_e8b8, %v3_e8b4
  store i32 %v2_e8c4, i32* %r2.global-to-local, align 4
  %v5_e8c8 = trunc i32 %v4_e8bc to i8
  store i8 %v5_e8c8, i8* @global_var_1b1c8.483, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1b1c2.484 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1b1c3.485 to i8*), align 4
  %v3_e8d8 = call i32 @function_c690(i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %ip.global-to-local, align 4
  %sext9 = mul i32 %v3_e8d8, 16777216
  %v1_e8e0 = sdiv i32 %sext9, 16777216
  store i32 %v1_e8e0, i32* %r3.global-to-local, align 4
  %v2_e8e4 = and i32 %v1_e8e0, 128
  %v3_e8e4 = icmp ne i32 %v2_e8e4, 0
  store i1 %v3_e8e4, i1* %cpsr_c.global-to-local, align 1
  %v4_e8e4 = ashr i32 %sext9, 31
  store i32 %v4_e8e4, i32* %r2.global-to-local, align 4
  %v1_e8e8 = trunc i32 %v1_e8e0 to i8
  store i8 %v1_e8e8, i8* bitcast (i32* @global_var_1b1c2.484 to i8*), align 4
  %v1_e8ec = trunc i32 %v4_e8e4 to i8
  store i8 %v1_e8ec, i8* bitcast (i32* @global_var_1b1c3.485 to i8*), align 4
  %v3_e8f0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_e8f0, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_e8f8 = call i32 @function_10494(i32 %v3_e8f0, i32 10)
  store i32 %v4_e8f8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e8fc = icmp eq i32 %v4_e8f8, 0
  store i1 %v2_e8fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8fc, label %.thread217, label %bb310

.thread217:                                       ; preds = %dec_label_pc_e898
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* @lr, align 4
  br label %.thread45.thread88

bb310:                                            ; preds = %dec_label_pc_e898
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_e90c = load i32, i32* @r4, align 4
  %v2_e90c = trunc i32 %v1_e90c to i8
  store i8 %v2_e90c, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32 2) to i8*), align 2
  %v0_e910.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e910.pr.pre, label %.thread45.thread88, label %.thread42

.thread42:                                        ; preds = %bb310
  %v1_e910 = load i32, i32* %r3.global-to-local, align 4
  %v2_e910 = trunc i32 %v1_e910 to i8
  %v3_e910 = load i32, i32* %r0.global-to-local, align 4
  %v4_e910 = add i32 %v3_e910, 3
  %v5_e910 = inttoptr i32 %v4_e910 to i8*
  store i8 %v2_e910, i8* %v5_e910, align 1
  %v0_e918.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_e918.pr.pr, label %.thread48, label %.thread50

.thread45.thread88:                               ; preds = %bb310, %.thread217
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %r0.global-to-local, align 4
  br label %.thread48

.thread48:                                        ; preds = %.thread42, %.thread45.thread88
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_e920 = load i32, i32* @lr, align 4
  %v4_e920 = add i32 %v3_e920, 2
  %v5_e920 = inttoptr i32 %v4_e920 to i8*
  store i8 9, i8* %v5_e920, align 1
  %v0_e924.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e924.pr.pr, label %bb311, label %.thread50

bb311:                                            ; preds = %.thread48
  %v1_e924 = load i32, i32* %r2.global-to-local, align 4
  %v2_e924 = trunc i32 %v1_e924 to i8
  %v3_e924 = load i32, i32* @lr, align 4
  %v4_e924 = add i32 %v3_e924, 3
  %v5_e924 = inttoptr i32 %v4_e924 to i8*
  store i8 %v2_e924, i8* %v5_e924, align 1
  br label %.thread50

.thread50:                                        ; preds = %.thread42, %.thread48, %bb311
  %v4_e928 = load i8, i8* @global_var_1b1c8.483, align 1
  %v5_e928 = sext i8 %v4_e928 to i32
  store i32 %v5_e928, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* @r1, align 4
  store i8 %v4_e928, i8* @global_var_1b1d0.487, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_e940 = load i32, i32* %sl.global-to-local, align 4
  %v1_e940 = trunc i32 %v0_e940 to i8
  store i8 %v1_e940, i8* bitcast (i32* @global_var_1b1dc.488 to i8*), align 4
  store i8 %v1_e940, i8* bitcast (i32* @global_var_1b1dd.489 to i8*), align 4
  %v5_e948 = call i32 @function_c6ec(i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_e948, 16777216
  %v1_e950 = sdiv i32 %sext, 16777216
  %v3_e958 = ashr i32 %sext, 31
  %v2_e95c = load i32, i32* @global_var_1b1cc.132, align 4
  %v1_e964 = trunc i32 %v3_e958 to i8
  store i8 %v1_e964, i8* bitcast (i32* @global_var_1b1dd.489 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_e978 = load i8, i8* @global_var_1b1c8.483, align 1
  %v4_e978 = sext i8 %v3_e978 to i32
  store i32 %v4_e978, i32* @r4, align 4
  %v2_e97c = load i32, i32* @global_var_1b248.126, align 4
  store i32 %v2_e97c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* %ip.global-to-local, align 4
  %v1_e98c = and i32 %v2_e95c, 8388608
  %v2_e98c = icmp ne i32 %v1_e98c, 0
  store i1 %v2_e98c, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_e9a0 = trunc i32 %v1_e950 to i8
  store i8 %v1_e9a0, i8* bitcast (i32* @global_var_1b1dc.488 to i8*), align 4
  store i32 %v2_e9a8, i32* %lr.global-to-local, align 4
  %v8_e9b8 = call i32 @function_10b78(i32 %v2_e97c, i32* bitcast (i8** @global_var_1b1b8.128 to i32*), i32 40, i32 16384, i32 %v2_e9a8, i32 16)
  store i32 %v8_e9b8, i32* %r0.global-to-local, align 4
  %v3_e9bc = load i32, i32* %stack_var_-48, align 4
  %v1_e9c0 = add i32 %v3_e9bc, 1
  store i32 %v1_e9c0, i32* %r3.global-to-local, align 4
  %v3_e9c4 = icmp ugt i32 %v1_e9c0, 383
  store i1 %v3_e9c4, i1* %cpsr_c.global-to-local, align 1
  %v8_e9c4 = icmp eq i32 %v1_e9c0, 384
  store i1 %v8_e9c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e9c0, i32* %stack_var_-48, align 4
  %v5_e9cc = icmp slt i32 %v1_e9c0, 384
  br i1 %v5_e9cc, label %.thread50.dec_label_pc_e740_crit_edge, label %dec_label_pc_e9d0

.thread50.dec_label_pc_e740_crit_edge:            ; preds = %.thread50
  %v0_e740.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e740

dec_label_pc_e9d0:                                ; preds = %.thread50
  %v0_e9d0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_e9d0, i32* @fp, align 4
  br label %dec_label_pc_e9d4

dec_label_pc_e9d4:                                ; preds = %dec_label_pc_e724, %dec_label_pc_e9d0
  %v0_e9d4 = call i32 @function_1093c()
  store i32 %v0_e9d4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v0_e9d4, i32* @sb, align 4
  %v6_ea0c = inttoptr i32 %v0_ea44 to i32*
  %v1_ea34 = add i32 %v0_ea44, 16
  %v2_ea34 = inttoptr i32 %v1_ea34 to i32*
  %v4_ea50 = ptrtoint i8* %stack_var_-1876.0 to i32
  %v1_ea58 = add i32 %v4_ea50, 1
  %v2_ea58 = inttoptr i32 %v1_ea58 to i8*
  %v1_ea7c = add i32 %v4_ea50, 2
  %v2_ea7c = inttoptr i32 %v1_ea7c to i8*
  %v1_ea80 = add i32 %v4_ea50, 3
  %v2_ea80 = inttoptr i32 %v1_ea80 to i8*
  %v4_ea84 = sext i8 %stack_var_-1868.0 to i32
  %v1_ea98 = add i32 %v4_ea50, 13
  %v2_ea98 = inttoptr i32 %v1_ea98 to i8*
  %v1_eb64 = bitcast i8* %stack_var_-1876.0 to i32*
  %v1_ea44 = add i32 %v0_ea44, 9
  %v2_ea44 = inttoptr i32 %v1_ea44 to i8*
  %v1_eabc = add i32 %v4_ea50, 8
  %v2_eabc = inttoptr i32 %v1_eabc to i32*
  %v1_eafc = add i32 %v0_ea44, 12
  %v2_eafc = inttoptr i32 %v1_eafc to i32*
  br label %dec_label_pc_e9e0

dec_label_pc_e9e0:                                ; preds = %dec_label_pc_eabc, %dec_label_pc_eab4, %dec_label_pc_eaac, %dec_label_pc_ea78, %dec_label_pc_ea68, %dec_label_pc_ea44, %dec_label_pc_ea2c, %dec_label_pc_eaa4, %dec_label_pc_ea94, %dec_label_pc_ea24, %dec_label_pc_eb5c, %dec_label_pc_e9d4
  %v1_e9e4 = phi i32 [ %v0_e9d4, %dec_label_pc_e9d4 ], [ %v1_e9e4.pre.pre, %dec_label_pc_eb5c ], [ %v0_ea18, %dec_label_pc_ea24 ], [ %v0_ea18, %dec_label_pc_ea94 ], [ %v0_ea18, %dec_label_pc_eaa4 ], [ %v0_ea18, %dec_label_pc_ea2c ], [ %v0_ea18, %dec_label_pc_ea44 ], [ %v0_ea18, %dec_label_pc_ea68 ], [ %v0_ea18, %dec_label_pc_ea78 ], [ %v0_ea18, %dec_label_pc_eaac ], [ %v0_ea18, %dec_label_pc_eab4 ], [ %v0_ea18, %dec_label_pc_eabc ]
  %v2_e9e4 = inttoptr i32 %v1_e9e4 to i32*
  store i32 0, i32* %v2_e9e4, align 4
  %v2_e9f0 = load i32, i32* @global_var_1b248.126, align 4
  store i32 %v2_e9f0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_ea44, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_ea0c = call i32 @function_10b18(i32 %v2_e9f0, i32* %v6_ea0c, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_ea0c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea10 = icmp eq i32 %v7_ea0c, 0
  store i1 %v2_ea10, i1* %cpsr_z.global-to-local, align 1
  %tmp312 = icmp slt i32 %v7_ea0c, 1
  br i1 %tmp312, label %dec_label_pc_eb90, label %dec_label_pc_ea18

dec_label_pc_ea18:                                ; preds = %dec_label_pc_e9e0
  %v0_ea18 = load i32, i32* @sb, align 4
  %v1_ea18 = inttoptr i32 %v0_ea18 to i32*
  %v2_ea18 = load i32, i32* %v1_ea18, align 4
  store i32 %v2_ea18, i32* %r3.global-to-local, align 4
  %v2_ea1c = icmp ugt i32 %v2_ea18, 10
  store i1 %v2_ea1c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea1c = icmp eq i32 %v2_ea18, 11
  store i1 %v7_ea1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea1c, label %dec_label_pc_eb90, label %dec_label_pc_ea24

dec_label_pc_ea24:                                ; preds = %dec_label_pc_ea18
  %v2_ea24 = icmp ugt i32 %v7_ea0c, 38
  store i1 %v2_ea24, i1* %cpsr_c.global-to-local, align 1
  %v7_ea24 = icmp eq i32 %v7_ea0c, 39
  store i1 %v7_ea24, i1* %cpsr_z.global-to-local, align 1
  %v2_ea28 = xor i1 %v2_ea24, true
  %v3_ea28 = or i1 %v7_ea24, %v2_ea28
  br i1 %v3_ea28, label %dec_label_pc_e9e0, label %dec_label_pc_ea2c

dec_label_pc_ea2c:                                ; preds = %dec_label_pc_ea24
  store i32 %v0_ea44, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b230.48 to i32), i32* %r0.global-to-local, align 4
  %v3_ea34 = load i32, i32* %v2_ea34, align 4
  store i32 %v3_ea34, i32* %r2.global-to-local, align 4
  %v2_ea38 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_ea38, i32* %r3.global-to-local, align 4
  %v3_ea3c = icmp uge i32 %v3_ea34, %v2_ea38
  store i1 %v3_ea3c, i1* %cpsr_c.global-to-local, align 1
  %v9_ea3c = icmp eq i32 %v3_ea34, %v2_ea38
  store i1 %v9_ea3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea3c, label %dec_label_pc_ea44, label %dec_label_pc_e9e0

dec_label_pc_ea44:                                ; preds = %dec_label_pc_ea2c
  %v3_ea44 = load i8, i8* %v2_ea44, align 1
  %v4_ea44 = zext i8 %v3_ea44 to i32
  store i32 %v4_ea44, i32* %r3.global-to-local, align 4
  %v2_ea48 = icmp ugt i8 %v3_ea44, 5
  store i1 %v2_ea48, i1* %cpsr_c.global-to-local, align 1
  %v7_ea48 = icmp eq i8 %v3_ea44, 6
  store i1 %v7_ea48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea48, label %dec_label_pc_ea50, label %dec_label_pc_e9e0

dec_label_pc_ea50:                                ; preds = %dec_label_pc_ea44
  store i32 %v4_ea50, i32* %r1.global-to-local, align 4
  %v2_ea54 = load i8, i8* %stack_var_-1876.0, align 1
  %v3_ea54 = zext i8 %v2_ea54 to i32
  store i32 %v3_ea54, i32* %r2.global-to-local, align 4
  %v3_ea58 = load i8, i8* %v2_ea58, align 1
  %v4_ea58 = zext i8 %v3_ea58 to i32
  store i32 %v4_ea58, i32* %r3.global-to-local, align 4
  %v4_ea5c = mul nuw nsw i32 %v4_ea58, 256
  %v5_ea5c = or i32 %v4_ea5c, %v3_ea54
  store i32 %v5_ea5c, i32* %r2.global-to-local, align 4
  %v2_ea60 = icmp ugt i32 %v5_ea5c, 5887
  store i1 %v2_ea60, i1* %cpsr_c.global-to-local, align 1
  %v7_ea60 = icmp eq i32 %v5_ea5c, 5888
  store i1 %v7_ea60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea60, label %dec_label_pc_ea78, label %dec_label_pc_ea68

dec_label_pc_ea68:                                ; preds = %dec_label_pc_ea50
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ea70 = icmp ugt i32 %v5_ea5c, 4872
  store i1 %v3_ea70, i1* %cpsr_c.global-to-local, align 1
  %v9_ea70 = icmp eq i32 %v5_ea5c, 4873
  store i1 %v9_ea70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea70, label %dec_label_pc_ea78, label %dec_label_pc_e9e0

dec_label_pc_ea78:                                ; preds = %dec_label_pc_ea68, %dec_label_pc_ea50
  store i32 %v4_ea50, i32* %r2.global-to-local, align 4
  %v3_ea7c = load i8, i8* %v2_ea7c, align 1
  %v4_ea7c = zext i8 %v3_ea7c to i32
  store i32 %v4_ea7c, i32* %r3.global-to-local, align 4
  %v3_ea80 = load i8, i8* %v2_ea80, align 1
  %v4_ea80 = zext i8 %v3_ea80 to i32
  store i32 %v4_ea80, i32* %r2.global-to-local, align 4
  store i32 %v4_ea84, i32* %ip.global-to-local, align 4
  %v4_ea88 = mul nuw nsw i32 %v4_ea80, 256
  %v5_ea88 = or i32 %v4_ea88, %v4_ea7c
  store i32 %v5_ea88, i32* %r3.global-to-local, align 4
  %v3_ea8c = icmp uge i32 %v5_ea88, %v4_ea84
  store i1 %v3_ea8c, i1* %cpsr_c.global-to-local, align 1
  %v9_ea8c = icmp eq i32 %v5_ea88, %v4_ea84
  store i1 %v9_ea8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea8c, label %dec_label_pc_ea94, label %dec_label_pc_e9e0

dec_label_pc_ea94:                                ; preds = %dec_label_pc_ea78
  store i32 %v4_ea50, i32* %lr.global-to-local, align 4
  %v3_ea98 = load i8, i8* %v2_ea98, align 1
  %v4_ea98 = zext i8 %v3_ea98 to i32
  store i32 %v4_ea98, i32* %r3.global-to-local, align 4
  %v1_ea9c = and i32 %v4_ea98, 2
  %v2_ea9c = icmp eq i32 %v1_ea9c, 0
  store i1 %v2_ea9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea9c, label %dec_label_pc_e9e0, label %dec_label_pc_eaa4

dec_label_pc_eaa4:                                ; preds = %dec_label_pc_ea94
  %v1_eaa4 = and i32 %v4_ea98, 16
  %v2_eaa4 = icmp eq i32 %v1_eaa4, 0
  store i1 %v2_eaa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eaa4, label %dec_label_pc_e9e0, label %dec_label_pc_eaac

dec_label_pc_eaac:                                ; preds = %dec_label_pc_eaa4
  %v1_eaac = and i32 %v4_ea98, 4
  %v2_eaac = icmp eq i32 %v1_eaac, 0
  store i1 %v2_eaac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eaac, label %dec_label_pc_eab4, label %dec_label_pc_e9e0

dec_label_pc_eab4:                                ; preds = %dec_label_pc_eaac
  %tmp459 = urem i8 %v3_ea98, 2
  %v2_eab4 = icmp eq i8 %tmp459, 0
  store i1 %v2_eab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eab4, label %dec_label_pc_eabc, label %dec_label_pc_e9e0

dec_label_pc_eabc:                                ; preds = %dec_label_pc_eab4
  %v3_eabc = load i32, i32* %v2_eabc, align 4
  %v1_eac4 = and i32 %v3_eabc, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_eac8 = mul i32 %v3_eabc, 16777216
  %v1_eac0 = udiv i32 %v3_eabc, 256
  %v3_eacc = and i32 %v1_eac0, 65280
  %v4_ead0 = mul i32 %v1_eac4, 256
  %v4_ead4 = udiv i32 %v3_eabc, 16777216
  %v5_ead4 = or i32 %v4_ead4, %v3_eac8
  %v5_ead0 = or i32 %v5_ead4, %v4_ead0
  %v2_ead8 = or i32 %v5_ead0, %v3_eacc
  %v1_eadc = add i32 %v2_ead8, -1
  %v1_eae0 = udiv i32 %v1_eadc, 256
  %v3_eae4 = and i32 %v1_eae0, 65280
  %v1_eae8 = and i32 %v1_eadc, 65280
  store i32 %v1_eae8, i32* %r2.global-to-local, align 4
  %v3_eaec = mul i32 %v1_eadc, 16777216
  %v4_eaf0 = udiv i32 %v1_eadc, 16777216
  %v5_eaf0 = or i32 %v3_eae4, %v4_eaf0
  store i32 %v5_eaf0, i32* %r1.global-to-local, align 4
  store i32 %v0_ea44, i32* %r3.global-to-local, align 4
  %v4_eaf8 = mul nuw nsw i32 %v1_eae8, 256
  %v5_eaf8 = or i32 %v4_eaf8, %v3_eaec
  store i32 %v5_eaf8, i32* %r0.global-to-local, align 4
  %v3_eafc = load i32, i32* %v2_eafc, align 4
  store i32 %v3_eafc, i32* %r2.global-to-local, align 4
  %v2_eb00 = call i32 @llvm.bswap.i32(i32 %v1_eadc)
  store i32 %v2_eb00, i32* %ip.global-to-local, align 4
  %v3_eb04 = icmp uge i32 %v2_eb00, %v3_eafc
  store i1 %v3_eb04, i1* %cpsr_c.global-to-local, align 1
  %v9_eb04 = icmp eq i32 %v2_eb00, %v3_eafc
  store i1 %v9_eb04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_eb04, label %dec_label_pc_eb0c, label %dec_label_pc_e9e0

dec_label_pc_eb0c:                                ; preds = %dec_label_pc_eabc
  %v0_eb0c = load i32, i32* @r4, align 4
  %v2_eb0c = icmp ugt i32 %v0_eb0c, 254
  store i1 %v2_eb0c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb0c = icmp eq i32 %v0_eb0c, 255
  store i1 %v7_eb0c, i1* %cpsr_z.global-to-local, align 1
  %v8_eb10 = icmp sgt i32 %v0_eb0c, 255
  br i1 %v8_eb10, label %dec_label_pc_eb90, label %dec_label_pc_eb14

dec_label_pc_eb14:                                ; preds = %dec_label_pc_eb0c
  store i32 ptrtoint (i32* @global_var_1b244.124 to i32), i32* %lr.global-to-local, align 4
  %v3_eb18 = mul i32 %v0_eb0c, 256
  store i32 %v3_eb18, i32* %r2.global-to-local, align 4
  %v2_eb1c = load i32, i32* @global_var_1b244.124, align 4
  store i32 %v2_eb1c, i32* %r1.global-to-local, align 4
  %v2_eb24 = mul i32 %v0_eb0c, 288
  store i32 %v2_eb24, i32* %r3.global-to-local, align 4
  %v2_eb28 = add i32 %v2_eb1c, %v2_eb24
  store i32 %v2_eb28, i32* @r0, align 4
  %v1_eb2c = add i32 %v2_eb28, 12
  %v2_eb2c = inttoptr i32 %v1_eb2c to i32*
  %v3_eb2c = load i32, i32* %v2_eb2c, align 4
  store i32 %v3_eb2c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb30 = icmp eq i32 %v3_eb2c, 0
  store i1 %v2_eb30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb30, label %dec_label_pc_eb5c, label %dec_label_pc_eb3c.preheader

dec_label_pc_eb3c.preheader:                      ; preds = %dec_label_pc_eb14
  %v2_eb34 = add i32 %v2_eb28, 288
  store i32 %v2_eb34, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eb3c

dec_label_pc_eb3c:                                ; preds = %dec_label_pc_eb3c.preheader, %dec_label_pc_eb48
  %v0_eb48 = phi i32 [ %v2_eb34, %dec_label_pc_eb3c.preheader ], [ %v1_eb54, %dec_label_pc_eb48 ]
  %v0_eb3c = phi i32 [ %v0_eb0c, %dec_label_pc_eb3c.preheader ], [ %v1_eb3c, %dec_label_pc_eb48 ]
  %v1_eb3c = add i32 %v0_eb3c, 1
  store i32 %v1_eb3c, i32* @r4, align 4
  %v7_eb40 = icmp eq i32 %v1_eb3c, 256
  br i1 %v7_eb40, label %dec_label_pc_eb90.loopexit, label %dec_label_pc_eb48

dec_label_pc_eb48:                                ; preds = %dec_label_pc_eb3c
  store i32 %v0_eb48, i32* @r0, align 4
  %v1_eb4c = add i32 %v0_eb48, 12
  %v2_eb4c = inttoptr i32 %v1_eb4c to i32*
  %v3_eb4c = load i32, i32* %v2_eb4c, align 4
  %v2_eb50 = icmp eq i32 %v3_eb4c, 0
  %v1_eb54 = add i32 %v0_eb48, 288
  store i32 %v1_eb54, i32* %r3.global-to-local, align 4
  br i1 %v2_eb50, label %dec_label_pc_eb5c.loopexit, label %dec_label_pc_eb3c

dec_label_pc_eb5c.loopexit:                       ; preds = %dec_label_pc_eb48
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb5c

dec_label_pc_eb5c:                                ; preds = %dec_label_pc_eb5c.loopexit, %dec_label_pc_eb14
  %v1_eb5c = phi i32 [ %v0_eb48, %dec_label_pc_eb5c.loopexit ], [ %v2_eb28, %dec_label_pc_eb14 ]
  %v2_eb5c = add i32 %v1_eb5c, 16
  %v3_eb5c = inttoptr i32 %v2_eb5c to i32*
  store i32 %v3_eafc, i32* %v3_eb5c, align 4
  store i32 %v4_ea50, i32* %r1.global-to-local, align 4
  %v2_eb64 = load i32, i32* %v1_eb64, align 4
  store i32 %v2_eb64, i32* %r2.global-to-local, align 4
  %v1_eb68 = and i32 %v2_eb64, 128
  %v2_eb68 = icmp ne i32 %v1_eb68, 0
  store i1 %v2_eb68, i1* %cpsr_c.global-to-local, align 1
  %v3_eb68 = sdiv i32 %v2_eb64, 256
  store i32 %v3_eb68, i32* %r3.global-to-local, align 4
  %v1_eb6c = trunc i32 %v3_eb68 to i8
  %v2_eb6c = load i32, i32* @r0, align 4
  %v3_eb6c = add i32 %v2_eb6c, 21
  %v4_eb6c = inttoptr i32 %v3_eb6c to i8*
  store i8 %v1_eb6c, i8* %v4_eb6c, align 1
  %v0_eb70 = load i32, i32* %r2.global-to-local, align 4
  %v1_eb70 = trunc i32 %v0_eb70 to i8
  %v2_eb70 = load i32, i32* @r0, align 4
  %v3_eb70 = add i32 %v2_eb70, 20
  %v4_eb70 = inttoptr i32 %v3_eb70 to i8*
  store i8 %v1_eb70, i8* %v4_eb70, align 1
  %v0_eb74 = call i32 @function_d39c()
  store i32 %v0_eb74, i32* %r0.global-to-local, align 4
  %v1_e9e4.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_e9e0

dec_label_pc_eb7c:                                ; preds = %dec_label_pc_d9c8
  store i32 ptrtoint (i32* @global_var_1b248.126 to i32), i32* %r2.global-to-local, align 4
  %v2_eb80 = load i32, i32* @global_var_1b248.126, align 4
  store i32 %v2_eb80, i32* %r0.global-to-local, align 4
  %v1_eb84 = call i32 @function_10640(i32 %v2_eb80)
  store i32 %v1_eb84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb88

dec_label_pc_eb88:                                ; preds = %dec_label_pc_d9a0, %dec_label_pc_eb7c
  %v0_eb88 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_eb88, i32* %r0.global-to-local, align 4
  %v1_eb8c = call i32 @function_114b8(i32 %v0_eb88)
  store i32 %v1_eb8c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb90

dec_label_pc_eb90.loopexit:                       ; preds = %dec_label_pc_eb3c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb90

dec_label_pc_eb90:                                ; preds = %dec_label_pc_eb0c, %dec_label_pc_ea18, %dec_label_pc_e9e0, %dec_label_pc_eb90.loopexit, %dec_label_pc_eb88
  %stack_var_-1872.1 = phi i32 [ %tmp249, %dec_label_pc_eb88 ], [ %v0_ea44, %dec_label_pc_eb90.loopexit ], [ %v0_ea44, %dec_label_pc_e9e0 ], [ %v0_ea44, %dec_label_pc_ea18 ], [ %v0_ea44, %dec_label_pc_eb0c ]
  %stack_var_-1868.1 = phi i8 [ %tmp250, %dec_label_pc_eb88 ], [ %stack_var_-1868.0, %dec_label_pc_eb90.loopexit ], [ %stack_var_-1868.0, %dec_label_pc_e9e0 ], [ %stack_var_-1868.0, %dec_label_pc_ea18 ], [ %stack_var_-1868.0, %dec_label_pc_eb0c ]
  %stack_var_-1876.1 = phi i8* [ %tmp278, %dec_label_pc_eb88 ], [ %stack_var_-1876.0, %dec_label_pc_eb90.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_e9e0 ], [ %stack_var_-1876.0, %dec_label_pc_ea18 ], [ %stack_var_-1876.0, %dec_label_pc_eb0c ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_eba4412 = load i32, i32* @sp, align 4
  %v3_eba4413 = add i32 %v2_eba4412, 1664
  %v4_eba4414 = inttoptr i32 %v3_eba4413 to i32*
  store i32 0, i32* %v4_eba4414, align 4
  br label %dec_label_pc_eb98.dec_label_pc_eb98_crit_edge

dec_label_pc_eb98.dec_label_pc_eb98_crit_edge:    ; preds = %dec_label_pc_eb90, %dec_label_pc_eb98.dec_label_pc_eb98_crit_edge
  %v0_eb98.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_eba4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_eb98 = add i32 %v0_eb98.pre, 1664
  store i32 %v1_eb98, i32* %ip.global-to-local, align 4
  %v1_eb9c = add i32 %v0_eb98.pre, 4
  store i32 %v1_eb9c, i32* %r3.global-to-local, align 4
  %v7_eba0 = icmp eq i32 %v1_eb9c, 128
  %v2_eba4 = load i32, i32* @sp, align 4
  %v3_eba4 = add i32 %v2_eba4, %v1_eb98
  %v4_eba4 = inttoptr i32 %v3_eba4 to i32*
  store i32 %v0_eba4.pre, i32* %v4_eba4, align 4
  br i1 %v7_eba0, label %dec_label_pc_ebac, label %dec_label_pc_eb98.dec_label_pc_eb98_crit_edge

dec_label_pc_ebac:                                ; preds = %dec_label_pc_eb98.dec_label_pc_eb98_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ebac = load i32, i32* %r2.global-to-local, align 4
  %v1_ebb0406 = add i32 %v0_ebac, 1536
  store i32 %v1_ebb0406, i32* %lr.global-to-local, align 4
  %v1_ebb4407 = add i32 %v0_ebac, 4
  store i32 %v1_ebb4407, i32* %r3.global-to-local, align 4
  %v7_ebb8408 = icmp eq i32 %v1_ebb4407, 128
  %v2_ebbc409 = load i32, i32* @sp, align 4
  %v3_ebbc410 = add i32 %v2_ebbc409, %v1_ebb0406
  %v4_ebbc411 = inttoptr i32 %v3_ebbc410 to i32*
  store i32 %v0_ebac, i32* %v4_ebbc411, align 4
  br i1 %v7_ebb8408, label %dec_label_pc_ebc4, label %dec_label_pc_ebb0.dec_label_pc_ebb0_crit_edge

dec_label_pc_ebb0.dec_label_pc_ebb0_crit_edge:    ; preds = %dec_label_pc_ebac, %dec_label_pc_ebb0.dec_label_pc_ebb0_crit_edge
  %v0_ebb0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_ebbc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ebb0 = add i32 %v0_ebb0.pre, 1536
  store i32 %v1_ebb0, i32* %lr.global-to-local, align 4
  %v1_ebb4 = add i32 %v0_ebb0.pre, 4
  store i32 %v1_ebb4, i32* %r3.global-to-local, align 4
  %v7_ebb8 = icmp eq i32 %v1_ebb4, 128
  %v2_ebbc = load i32, i32* @sp, align 4
  %v3_ebbc = add i32 %v2_ebbc, %v1_ebb0
  %v4_ebbc = inttoptr i32 %v3_ebbc to i32*
  store i32 %v0_ebbc.pre, i32* %v4_ebbc, align 4
  br i1 %v7_ebb8, label %dec_label_pc_ebc4, label %dec_label_pc_ebb0.dec_label_pc_ebb0_crit_edge

dec_label_pc_ebc4:                                ; preds = %dec_label_pc_ebb0.dec_label_pc_ebb0_crit_edge, %dec_label_pc_ebac
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ebc4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ebc4, i32* @r6, align 4
  store i32 %v0_ebc4, i32* @r5, align 4
  store i32 %v0_ebc4, i32* @r7, align 4
  store i32 %v0_ebc4, i32* %stack_var_-48, align 4
  %v2_ec88 = ptrtoint i32* %stack_var_-36 to i32
  %v2_ed00 = ptrtoint i32* %stack_var_-76 to i32
  %v2_ed04 = ptrtoint i32* %stack_var_-348 to i32
  %v2_ed0c = ptrtoint i32* %stack_var_-64 to i32
  %v2_ed10 = ptrtoint i32* %stack_var_-220 to i32
  %v2_f618 = ptrtoint i32* %stack_var_-41 to i32
  %v2_f628 = ptrtoint i32* %stack_var_-73 to i32
  %v2_eeb8 = ptrtoint i8* %stack_var_-52 to i32
  %v2_eec0 = bitcast i8* %stack_var_-52 to i32*
  %v2_eecc = ptrtoint i32* %stack_var_-56 to i32
  %v2_f8ec = ptrtoint i32* %stack_var_-92 to i32
  %v3_f8f4 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_ec40

dec_label_pc_ebd8:                                ; preds = %dec_label_pc_ec68, %dec_label_pc_ec40
  %storemerge232 = phi i32 [ 30, %dec_label_pc_ec40 ], [ 5, %dec_label_pc_ec68 ]
  store i32 %storemerge232, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %r2.global-to-local, align 4
  %v2_ebdc = load i32, i32* @global_var_1b1e8.112, align 4
  store i32 %v2_ebdc, i32* %r3.global-to-local, align 4
  %v1_ebe0 = add i32 %v2_ec54, 8
  %v2_ebe0 = inttoptr i32 %v1_ebe0 to i32*
  %v3_ebe0 = load i32, i32* %v2_ebe0, align 4
  store i32 %v3_ebe0, i32* %r2.global-to-local, align 4
  %v2_ebe4 = sub i32 %v2_ebdc, %v3_ebe0
  store i32 %v2_ebe4, i32* %r3.global-to-local, align 4
  %v3_ebe8 = icmp uge i32 %v2_ebe4, %storemerge232
  store i1 %v3_ebe8, i1* %cpsr_c.global-to-local, align 1
  %v9_ebe8 = icmp eq i32 %v2_ebe4, %storemerge232
  store i1 %v9_ebe8, i1* %cpsr_z.global-to-local, align 1
  %v2_ebec = xor i1 %v9_ebe8, true
  %v3_ebec = and i1 %v3_ebe8, %v2_ebec
  br i1 %v3_ebec, label %dec_label_pc_ecac, label %dec_label_pc_ebf0

dec_label_pc_ebf0:                                ; preds = %dec_label_pc_ebd8
  store i1 %v2_ec5c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ec5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ec78 = add i32 %v2_ec54, 4
  %v2_ec78 = inttoptr i32 %v1_ec78 to i32*
  %v3_ec78 = load i32, i32* %v2_ec78, align 4
  br i1 %v7_ec5c, label %dec_label_pc_ec78, label %dec_label_pc_ebf8

dec_label_pc_ebf8:                                ; preds = %dec_label_pc_ebf0
  store i32 %v3_ec78, i32* %ip.global-to-local, align 4
  %v3_ec00 = udiv i32 %v3_ec78, 32
  store i32 %v2_ec88, i32* %r0.global-to-local, align 4
  %v3_ec08 = mul nuw nsw i32 %v3_ec00, 4
  %v2_ec0c = add i32 %v3_ec08, %v2_ec88
  store i32 %v2_ec0c, i32* %r3.global-to-local, align 4
  %v1_ec10 = add i32 %v2_ec0c, -184
  %v2_ec10 = inttoptr i32 %v1_ec10 to i32*
  %v3_ec10 = load i32, i32* %v2_ec10, align 4
  %v1_ec14 = urem i32 %v3_ec78, 32
  store i32 %v1_ec14, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_ec1c = shl i32 1, %v1_ec14
  %v8_ec1c = or i32 %v3_ec10, %v7_ec1c
  store i32 %v8_ec1c, i32* %r2.global-to-local, align 4
  store i32 %v8_ec1c, i32* %v2_ec10, align 4
  %v0_ec24 = load i32, i32* @r6, align 4
  %v1_ec24 = load i32, i32* %ip.global-to-local, align 4
  %v2_ec24 = sub i32 %v0_ec24, %v1_ec24
  %v3_ec24 = icmp uge i32 %v0_ec24, %v1_ec24
  store i1 %v3_ec24, i1* %cpsr_c.global-to-local, align 1
  %v4_ec24 = xor i32 %v1_ec24, %v0_ec24
  %v5_ec24 = xor i32 %v2_ec24, %v0_ec24
  %v6_ec24 = and i32 %v5_ec24, %v4_ec24
  %v7_ec24 = icmp slt i32 %v6_ec24, 0
  %v8_ec24 = icmp slt i32 %v2_ec24, 0
  %v9_ec24 = icmp eq i32 %v0_ec24, %v1_ec24
  store i1 %v9_ec24, i1* %cpsr_z.global-to-local, align 1
  %v2_ec28 = xor i1 %v8_ec24, %v7_ec24
  br i1 %v2_ec28, label %bb314, label %bb315

bb314:                                            ; preds = %dec_label_pc_ebf8
  store i32 %v1_ec24, i32* @r6, align 4
  br label %bb315

bb315:                                            ; preds = %dec_label_pc_ec68, %dec_label_pc_f910, %dec_label_pc_ece0, %bb317, %dec_label_pc_ebf8, %bb314
  %v3_ec2c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_ec2c, i32* %r3.global-to-local, align 4
  %v1_ec30 = add i32 %v3_ec2c, 1
  store i32 %v1_ec30, i32* %r2.global-to-local, align 4
  %v2_ec34 = icmp ugt i32 %v1_ec30, 254
  store i1 %v2_ec34, i1* %cpsr_c.global-to-local, align 1
  %v7_ec34 = icmp eq i32 %v1_ec30, 255
  store i1 %v7_ec34, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ec30, i32* %stack_var_-48, align 4
  %v8_ec3c = icmp sgt i32 %v1_ec30, 255
  br i1 %v8_ec3c, label %dec_label_pc_ecec, label %dec_label_pc_ec40

dec_label_pc_ec40:                                ; preds = %bb315, %dec_label_pc_ebc4
  %v0_ec4c = phi i32 [ %v1_ec30, %bb315 ], [ %v0_ebc4, %dec_label_pc_ebc4 ]
  store i32 ptrtoint (i32* @global_var_1b244.124 to i32), i32* %r0.global-to-local, align 4
  %v3_ec44 = mul i32 %v0_ec4c, 256
  store i32 %v3_ec44, i32* %r3.global-to-local, align 4
  %v2_ec48 = load i32, i32* @global_var_1b244.124, align 4
  store i32 %v2_ec48, i32* %r1.global-to-local, align 4
  %v2_ec50 = mul i32 %v0_ec4c, 288
  store i32 %v2_ec50, i32* %r2.global-to-local, align 4
  %v2_ec54 = add i32 %v2_ec48, %v2_ec50
  store i32 %v2_ec54, i32* @r4, align 4
  %v1_ec58 = add i32 %v2_ec54, 12
  %v2_ec58 = inttoptr i32 %v1_ec58 to i32*
  %v3_ec58 = load i32, i32* %v2_ec58, align 4
  store i32 %v3_ec58, i32* %ip.global-to-local, align 4
  %v2_ec5c = icmp ne i32 %v3_ec58, 0
  store i1 %v2_ec5c, i1* %cpsr_c.global-to-local, align 1
  %v7_ec5c = icmp eq i32 %v3_ec58, 1
  store i1 %v7_ec5c, i1* %cpsr_z.global-to-local, align 1
  %v2_ec60 = xor i1 %v7_ec5c, true
  %v3_ec60 = and i1 %v2_ec5c, %v2_ec60
  br i1 %v3_ec60, label %dec_label_pc_ebd8, label %dec_label_pc_ec68

dec_label_pc_ec68:                                ; preds = %dec_label_pc_ec40
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec68 = icmp eq i32 %v3_ec58, 0
  store i1 %v2_ec68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec68, label %bb315, label %dec_label_pc_ebd8

dec_label_pc_ec78:                                ; preds = %dec_label_pc_ebf0
  store i32 %v3_ec78, i32* %r0.global-to-local, align 4
  %v3_ec80 = udiv i32 %v3_ec78, 32
  %v3_ec84 = mul nuw nsw i32 %v3_ec80, 4
  store i32 %v2_ec88, i32* %lr.global-to-local, align 4
  %v2_ec8c = add i32 %v3_ec84, %v2_ec88
  store i32 %v2_ec8c, i32* %r3.global-to-local, align 4
  %v1_ec90 = add i32 %v2_ec8c, -312
  %v2_ec90 = inttoptr i32 %v1_ec90 to i32*
  %v3_ec90 = load i32, i32* %v2_ec90, align 4
  %v1_ec94 = urem i32 %v3_ec78, 32
  store i32 %v1_ec94, i32* %r1.global-to-local, align 4
  %v7_ec98 = shl i32 1, %v1_ec94
  %v8_ec98 = or i32 %v3_ec90, %v7_ec98
  store i32 %v8_ec98, i32* %r2.global-to-local, align 4
  %v0_ec9c = load i32, i32* @r5, align 4
  %v2_ec9c = sub i32 %v0_ec9c, %v3_ec78
  %v3_ec9c = icmp uge i32 %v0_ec9c, %v3_ec78
  store i1 %v3_ec9c, i1* %cpsr_c.global-to-local, align 1
  %v4_ec9c = xor i32 %v0_ec9c, %v3_ec78
  %v5_ec9c = xor i32 %v2_ec9c, %v0_ec9c
  %v6_ec9c = and i32 %v5_ec9c, %v4_ec9c
  %v7_ec9c = icmp slt i32 %v6_ec9c, 0
  %v8_ec9c = icmp slt i32 %v2_ec9c, 0
  %v9_ec9c = icmp eq i32 %v0_ec9c, %v3_ec78
  store i1 %v9_ec9c, i1* %cpsr_z.global-to-local, align 1
  %v2_eca0 = xor i1 %v8_ec9c, %v7_ec9c
  br i1 %v2_eca0, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_ec78
  store i32 %v3_ec78, i32* @r5, align 4
  br label %bb317

bb317:                                            ; preds = %dec_label_pc_ec78, %bb316
  store i32 %v8_ec98, i32* %v2_ec90, align 4
  br label %bb315

dec_label_pc_ecac:                                ; preds = %dec_label_pc_ebd8
  %v1_ecac = add i32 %v2_ec54, 4
  %v2_ecac = inttoptr i32 %v1_ecac to i32*
  %v3_ecac = load i32, i32* %v2_ecac, align 4
  store i32 %v3_ecac, i32* %r0.global-to-local, align 4
  %v1_ecb0 = call i32 @function_10640(i32 %v3_ecac)
  store i32 %v1_ecb0, i32* %r0.global-to-local, align 4
  %v0_ecb4 = load i32, i32* @r4, align 4
  %v1_ecb4 = add i32 %v0_ecb4, 12
  %v2_ecb4 = inttoptr i32 %v1_ecb4 to i32*
  %v3_ecb4 = load i32, i32* %v2_ecb4, align 4
  store i32 %v3_ecb4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ecbc = icmp ugt i32 %v3_ecb4, 1
  store i1 %v2_ecbc, i1* %cpsr_c.global-to-local, align 1
  %v7_ecbc = icmp eq i32 %v3_ecb4, 2
  store i1 %v7_ecbc, i1* %cpsr_z.global-to-local, align 1
  %v2_ecc0 = add i32 %v0_ecb4, 4
  %v3_ecc0 = inttoptr i32 %v2_ecc0 to i32*
  store i32 -1, i32* %v3_ecc0, align 4
  %v2_ecc4 = xor i1 %v2_ecbc, true
  %v3_ecc4 = or i1 %v7_ecbc, %v2_ecc4
  br i1 %v3_ecc4, label %dec_label_pc_f910, label %dec_label_pc_ecc8

dec_label_pc_ecc8:                                ; preds = %dec_label_pc_ecac
  %v0_ecc8 = load i32, i32* @r4, align 4
  %v1_ecc8 = add i32 %v0_ecc8, 284
  %v2_ecc8 = inttoptr i32 %v1_ecc8 to i8*
  %v3_ecc8 = load i8, i8* %v2_ecc8, align 1
  %v4_ecc8 = zext i8 %v3_ecc8 to i32
  %v1_eccc = add nuw nsw i32 %v4_ecc8, 1
  %v1_ecd0 = urem i32 %v1_eccc, 256
  store i32 %v1_ecd0, i32* %r3.global-to-local, align 4
  %v2_ecd4 = icmp ugt i32 %v1_ecd0, 9
  store i1 %v2_ecd4, i1* %cpsr_c.global-to-local, align 1
  %v7_ecd4 = icmp eq i32 %v1_ecd0, 10
  store i1 %v7_ecd4, i1* %cpsr_z.global-to-local, align 1
  %v1_ecd8 = trunc i32 %v1_eccc to i8
  store i8 %v1_ecd8, i8* %v2_ecc8, align 1
  %v0_ecdc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ecdc, label %dec_label_pc_f910, label %dec_label_pc_ece0

dec_label_pc_ece0:                                ; preds = %dec_label_pc_ecc8
  %v0_ece0 = load i32, i32* @r4, align 4
  store i32 %v0_ece0, i32* @r0, align 4
  %v0_ece4 = call i32 @function_d39c()
  store i32 %v0_ece4, i32* %r0.global-to-local, align 4
  br label %bb315

dec_label_pc_ecec:                                ; preds = %bb315
  store i32 1, i32* %stack_var_-64, align 4
  %v0_ecf4 = load i32, i32* @r6, align 4
  %v1_ecf4 = load i32, i32* @r5, align 4
  %v2_ecf4 = sub i32 %v0_ecf4, %v1_ecf4
  %v3_ecf4 = icmp uge i32 %v0_ecf4, %v1_ecf4
  store i1 %v3_ecf4, i1* %cpsr_c.global-to-local, align 1
  %v4_ecf4 = xor i32 %v1_ecf4, %v0_ecf4
  %v5_ecf4 = xor i32 %v2_ecf4, %v0_ecf4
  %v6_ecf4 = and i32 %v5_ecf4, %v4_ecf4
  %v7_ecf4 = icmp slt i32 %v6_ecf4, 0
  %v8_ecf4 = icmp slt i32 %v2_ecf4, 0
  %v9_ecf4 = icmp eq i32 %v0_ecf4, %v1_ecf4
  store i1 %v9_ecf4, i1* %cpsr_z.global-to-local, align 1
  %v2_ecf8 = xor i1 %v8_ecf4, %v7_ecf4
  %v1_ecf4.v0_ecf4 = select i1 %v2_ecf8, i32 %v1_ecf4, i32 %v0_ecf4
  store i32 %v2_ed04, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ed0c, i32* %ip.global-to-local, align 4
  store i32 %v2_ed10, i32* %r1.global-to-local, align 4
  %v1_ed14 = add i32 %v1_ecf4.v0_ecf4, 1
  store i32 %v1_ed14, i32* %r0.global-to-local, align 4
  %v5_ed20 = call i32 @function_10834(i32 %v1_ed14, i32 %v2_ed10, i32 %v2_ed04, i32 0, i32 %v2_ed0c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ed28 = call i32 @function_108e4(i32* null)
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_ed28, i32* @global_var_1b1e8.112, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  br label %dec_label_pc_ed80

dec_label_pc_ed44:                                ; preds = %dec_label_pc_eda4, %dec_label_pc_ee90
  %v0_ed5c = phi i32 [ %v3_ed98, %dec_label_pc_eda4 ], [ %v0_ed44.pre, %dec_label_pc_ee90 ]
  %v3_ed44 = udiv i32 %v0_ed5c, 32
  %v3_ed4c = mul nuw nsw i32 %v3_ed44, 4
  store i32 %v2_ec88, i32* @lr, align 4
  %v2_ed54 = add i32 %v3_ed4c, %v2_ec88
  store i32 %v2_ed54, i32* %r3.global-to-local, align 4
  %v1_ed58 = add i32 %v2_ed54, -184
  %v2_ed58 = inttoptr i32 %v1_ed58 to i32*
  %v3_ed58 = load i32, i32* %v2_ed58, align 4
  %v1_ed5c = urem i32 %v0_ed5c, 32
  store i32 %v1_ed5c, i32* %r1.global-to-local, align 4
  %v2_ed60 = add nsw i32 %v1_ed5c, -1
  %v3_ed60 = shl i32 1, %v2_ed60
  %v4_ed60 = and i32 %v3_ed60, %v3_ed58
  %v5_ed60 = icmp ne i32 %v4_ed60, 0
  store i1 %v5_ed60, i1* %cpsr_c.global-to-local, align 1
  %v6_ed60 = lshr i32 %v3_ed58, %v1_ed5c
  store i32 %v6_ed60, i32* %r2.global-to-local, align 4
  %v1_ed64 = urem i32 %v6_ed60, 2
  %v2_ed64 = icmp eq i32 %v1_ed64, 0
  store i1 %v2_ed64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed64, label %dec_label_pc_ed6c, label %dec_label_pc_ef1c.preheader

dec_label_pc_ef1c.preheader:                      ; preds = %dec_label_pc_ed44
  %v0_ef1c112 = load i32, i32* @r5, align 4
  %v1_ef1c113 = add i32 %v0_ef1c112, 12
  %v2_ef1c114 = inttoptr i32 %v1_ef1c113 to i32*
  %v3_ef1c115 = load i32, i32* %v2_ef1c114, align 4
  store i32 %v3_ef1c115, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef20111117 = icmp eq i32 %v3_ef1c115, 0
  store i1 %v2_ef20111117, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef20111117, label %dec_label_pc_ed6c, label %dec_label_pc_ef28.lr.ph

dec_label_pc_ed6c:                                ; preds = %dec_label_pc_ef1c.loopexit, %dec_label_pc_ef20.backedge, %dec_label_pc_ef1c.preheader, %dec_label_pc_ed44, %.thread228, %dec_label_pc_f78c, %dec_label_pc_ed80, %dec_label_pc_f95c, %dec_label_pc_f7cc
  %v3_ed6c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_ed6c, i32* %r3.global-to-local, align 4
  %v1_ed70 = add i32 %v3_ed6c, 1
  store i32 %v1_ed70, i32* %r2.global-to-local, align 4
  %v2_ed74 = icmp ugt i32 %v1_ed70, 254
  store i1 %v2_ed74, i1* %cpsr_c.global-to-local, align 1
  %v7_ed74 = icmp eq i32 %v1_ed70, 255
  store i1 %v7_ed74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ed70, i32* %stack_var_-48, align 4
  %v8_ed7c = icmp sgt i32 %v1_ed70, 255
  br i1 %v8_ed7c, label %dec_label_pc_e724, label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %dec_label_pc_ed6c, %dec_label_pc_ecec
  %v0_ed8c = phi i32 [ %v1_ed70, %dec_label_pc_ed6c ], [ 0, %dec_label_pc_ecec ]
  store i32 ptrtoint (i32* @global_var_1b244.124 to i32), i32* %ip.global-to-local, align 4
  %v3_ed84 = mul i32 %v0_ed8c, 256
  store i32 %v3_ed84, i32* %r3.global-to-local, align 4
  %v2_ed88 = load i32, i32* @global_var_1b244.124, align 4
  store i32 %v2_ed88, i32* %r1.global-to-local, align 4
  %v2_ed90 = mul i32 %v0_ed8c, 288
  store i32 %v2_ed90, i32* %r2.global-to-local, align 4
  %v2_ed94 = add i32 %v2_ed88, %v2_ed90
  store i32 %v2_ed94, i32* @r5, align 4
  %v1_ed98 = add i32 %v2_ed94, 4
  %v2_ed98 = inttoptr i32 %v1_ed98 to i32*
  %v3_ed98 = load i32, i32* %v2_ed98, align 4
  store i32 %v3_ed98, i32* @r4, align 4
  %v2_ed9c = icmp eq i32 %v3_ed98, -1
  store i1 %v2_ed9c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed9c = icmp eq i32 %v3_ed98, -1
  store i1 %v7_ed9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed9c, label %dec_label_pc_ed6c, label %dec_label_pc_eda4

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ed80
  %v3_eda4 = udiv i32 %v3_ed98, 32
  %v3_edac = mul nuw nsw i32 %v3_eda4, 4
  store i32 %v2_ec88, i32* %lr.global-to-local, align 4
  %v2_edb4 = add i32 %v3_edac, %v2_ec88
  store i32 %v2_edb4, i32* %r3.global-to-local, align 4
  %v1_edb8 = add i32 %v2_edb4, -312
  %v2_edb8 = inttoptr i32 %v1_edb8 to i32*
  %v3_edb8 = load i32, i32* %v2_edb8, align 4
  %v1_edbc = urem i32 %v3_ed98, 32
  store i32 %v1_edbc, i32* %r1.global-to-local, align 4
  %v2_edc0 = add nsw i32 %v1_edbc, -1
  %v3_edc0 = shl i32 1, %v2_edc0
  %v4_edc0 = and i32 %v3_edb8, %v3_edc0
  %v5_edc0 = icmp ne i32 %v4_edc0, 0
  store i1 %v5_edc0, i1* %cpsr_c.global-to-local, align 1
  %v6_edc0 = lshr i32 %v3_edb8, %v1_edbc
  store i32 %v6_edc0, i32* %r2.global-to-local, align 4
  %v1_edc4 = urem i32 %v6_edc0, 2
  %v2_edc4 = icmp eq i32 %v1_edc4, 0
  store i1 %v2_edc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edc4, label %dec_label_pc_ed44, label %dec_label_pc_edcc

dec_label_pc_edcc:                                ; preds = %dec_label_pc_eda4
  store i32 4, i32* %r2.global-to-local, align 4
  store i8 4, i8* %stack_var_-52, align 1
  store i32 %v2_eecc, i32* %r3.global-to-local, align 4
  store i32 %v2_eeb8, i32* %ip.global-to-local, align 4
  store i32 %v3_ed98, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v6_edfc = call i32 @function_10a90(i32 %v3_ed98, i32 1, i32 4, i32* nonnull %stack_var_-56, i32 %v2_eeb8)
  %v3_ee00 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_ee00, i32* %r3.global-to-local, align 4
  %v2_ee04 = or i32 %v3_ee00, %v6_edfc
  store i32 %v2_ee04, i32* %r0.global-to-local, align 4
  %v4_ee04 = icmp eq i32 %v2_ee04, 0
  store i1 %v4_ee04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_ee04, label %dec_label_pc_ee0c, label %dec_label_pc_f95c

dec_label_pc_ee0c:                                ; preds = %dec_label_pc_edcc
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_ee10 = load i32, i32* @r5, align 4
  %v2_ee10 = add i32 %v1_ee10, 12
  %v3_ee10 = inttoptr i32 %v2_ee10 to i32*
  store i32 2, i32* %v3_ee10, align 4
  %v0_ee14 = call i32 @function_d208()
  store i32 %v0_ee14, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b1e4.118 to i32), i32* %r3.global-to-local, align 4
  %v3_ee1c = load i8, i8* @global_var_1b1e5.119, align 1
  %v4_ee1c = zext i8 %v3_ee1c to i32
  store i32 %v4_ee1c, i32* %r2.global-to-local, align 4
  %v2_ee20 = load i8, i8* bitcast (i8** @global_var_1b1e4.118 to i8*), align 4
  %v3_ee20 = zext i8 %v2_ee20 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_ee24 = mul nuw nsw i32 %v4_ee1c, 256
  %v5_ee24 = or i32 %v3_ee20, %v4_ee24
  store i32 %v5_ee24, i32* %r1.global-to-local, align 4
  %v2_ee28 = call i32 @function_103c8(i32 %v0_ee14, i32 %v5_ee24)
  store i32 ptrtoint (i32* @global_var_1b1b4.114 to i32), i32* %r3.global-to-local, align 4
  %v2_ee30 = load i32, i32* @global_var_1b1b4.114, align 4
  store i32 %v2_ee30, i32* %lr.global-to-local, align 4
  %v1_ee38 = load i32, i32* @r6, align 4
  %v9_ee38 = icmp eq i32 %v2_ee30, %v1_ee38
  store i1 %v9_ee38, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_ee3c = urem i32 %v2_ee28, 65536
  store i32 %v3_ee3c, i32* %r0.global-to-local, align 4
  %v7_ee40 = icmp sgt i32 %v2_ee30, %v1_ee38
  br i1 %v7_ee40, label %dec_label_pc_ee44, label %dec_label_pc_f954

dec_label_pc_ee44:                                ; preds = %dec_label_pc_ee0c
  %v2_ee48 = load i32, i32* @global_var_1b1e0.116, align 4
  store i32 %v2_ee48, i32* %r3.global-to-local, align 4
  store i32 %v1_ee38, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ee64

dec_label_pc_ee54:                                ; preds = %dec_label_pc_ee7c, %dec_label_pc_ee64
  %v1_ee54 = add i32 %v0_ee54, 1
  store i32 %v1_ee54, i32* %ip.global-to-local, align 4
  %v3_ee58 = icmp uge i32 %v2_ee30, %v1_ee54
  store i1 %v3_ee58, i1* %cpsr_c.global-to-local, align 1
  %v9_ee58 = icmp eq i32 %v2_ee30, %v1_ee54
  store i1 %v9_ee58, i1* %cpsr_z.global-to-local, align 1
  %v1_ee5c = add i32 %v0_ee5c, 16
  store i32 %v1_ee5c, i32* %r3.global-to-local, align 4
  br i1 %v9_ee58, label %dec_label_pc_f954, label %dec_label_pc_ee64

dec_label_pc_ee64:                                ; preds = %dec_label_pc_ee54, %dec_label_pc_ee44
  %v0_ee54 = phi i32 [ %v1_ee54, %dec_label_pc_ee54 ], [ %v1_ee38, %dec_label_pc_ee44 ]
  %v0_ee5c = phi i32 [ %v1_ee5c, %dec_label_pc_ee54 ], [ %v2_ee48, %dec_label_pc_ee44 ]
  store i32 %v0_ee5c, i32* %r1.global-to-local, align 4
  %v1_ee68 = add i32 %v0_ee5c, 9
  %v2_ee68 = inttoptr i32 %v1_ee68 to i8*
  %v3_ee68 = load i8, i8* %v2_ee68, align 1
  %v4_ee68 = zext i8 %v3_ee68 to i32
  store i32 %v4_ee68, i32* %r2.global-to-local, align 4
  %v1_ee6c = add i32 %v0_ee5c, 8
  %v2_ee6c = inttoptr i32 %v1_ee6c to i8*
  %v3_ee6c = load i8, i8* %v2_ee6c, align 1
  %v4_ee6c = zext i8 %v3_ee6c to i32
  %v4_ee70 = mul nuw nsw i32 %v4_ee68, 256
  %v5_ee70 = or i32 %v4_ee6c, %v4_ee70
  store i32 %v5_ee70, i32* %r3.global-to-local, align 4
  %v3_ee74 = icmp uge i32 %v5_ee70, %v3_ee3c
  store i1 %v3_ee74, i1* %cpsr_c.global-to-local, align 1
  %v9_ee74 = icmp eq i32 %v5_ee70, %v3_ee3c
  store i1 %v9_ee74, i1* %cpsr_z.global-to-local, align 1
  %v2_ee78 = xor i1 %v9_ee74, true
  %v3_ee78 = and i1 %v3_ee74, %v2_ee78
  br i1 %v3_ee78, label %dec_label_pc_ee54, label %dec_label_pc_ee7c

dec_label_pc_ee7c:                                ; preds = %dec_label_pc_ee64
  %v1_ee7c = add i32 %v0_ee5c, 10
  %v2_ee7c = inttoptr i32 %v1_ee7c to i8*
  %v3_ee7c = load i8, i8* %v2_ee7c, align 1
  %v4_ee7c = zext i8 %v3_ee7c to i32
  store i32 %v4_ee7c, i32* %r3.global-to-local, align 4
  %v1_ee80 = add i32 %v0_ee5c, 11
  %v2_ee80 = inttoptr i32 %v1_ee80 to i8*
  %v3_ee80 = load i8, i8* %v2_ee80, align 1
  %v4_ee80 = zext i8 %v3_ee80 to i32
  store i32 %v4_ee80, i32* %r2.global-to-local, align 4
  %v4_ee84 = mul nuw nsw i32 %v4_ee80, 256
  %v5_ee84 = or i32 %v4_ee84, %v4_ee7c
  store i32 %v5_ee84, i32* %r3.global-to-local, align 4
  %v3_ee88 = icmp uge i32 %v5_ee84, %v3_ee3c
  store i1 %v3_ee88, i1* %cpsr_c.global-to-local, align 1
  %v9_ee88 = icmp eq i32 %v5_ee84, %v3_ee3c
  store i1 %v9_ee88, i1* %cpsr_z.global-to-local, align 1
  %v2_ee8c = xor i1 %v3_ee88, true
  %v3_ee8c = or i1 %v9_ee88, %v2_ee8c
  br i1 %v3_ee8c, label %dec_label_pc_ee54, label %dec_label_pc_ee90

dec_label_pc_ee90:                                ; preds = %dec_label_pc_ee7c, %dec_label_pc_f954
  %v0_ee98 = phi i32 [ 0, %dec_label_pc_f954 ], [ %v0_ee5c, %dec_label_pc_ee7c ]
  %v0_ee90 = load i32, i32* @r5, align 4
  %v1_ee90 = add i32 %v0_ee90, 4
  %v2_ee90 = inttoptr i32 %v1_ee90 to i32*
  %v3_ee90 = load i32, i32* %v2_ee90, align 4
  store i32 %v3_ee90, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_ee98 = inttoptr i32 %v0_ee90 to i32*
  store i32 %v0_ee98, i32* %v2_ee98, align 4
  %v0_ee9c = load i32, i32* %ip.global-to-local, align 4
  %v1_ee9c = load i32, i32* @r5, align 4
  %v2_ee9c = add i32 %v1_ee9c, 24
  %v3_ee9c = inttoptr i32 %v2_ee9c to i32*
  store i32 %v0_ee9c, i32* %v3_ee9c, align 4
  %v0_ed44.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ed44

dec_label_pc_eea4:                                ; preds = %dec_label_pc_f0e4, %dec_label_pc_f0b8, %dec_label_pc_f100
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_eea8 = call i32 @function_fb14(i32 12)
  store i32 13, i32* %r0.global-to-local, align 4
  %v1_eeb0 = call i32 @function_fb14(i32 13)
  store i32 %v2_eeb8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_eec0 = call i32 @function_fa30(i32 12, i32* %v2_eec0)
  store i32 %v3_eec0, i32* @r4, align 4
  store i32 %v2_eecc, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r0.global-to-local, align 4
  %v3_eed4 = call i32 @function_fa30(i32 13, i32* nonnull %stack_var_-56)
  %v3_eed8 = load i8, i8* %stack_var_-52, align 1
  %v4_eed8 = sext i8 %v3_eed8 to i32
  %sext7 = mul i32 %v3_eed4, 16777216
  %v1_eedc = sdiv i32 %sext7, 16777216
  store i32 %v1_eedc, i32* @r6, align 4
  %v0_eee0 = load i32, i32* @r4, align 4
  store i32 %v0_eee0, i32* %r2.global-to-local, align 4
  %v1_eee4 = add nsw i32 %v4_eed8, -1
  store i32 %v1_eee4, i32* %r3.global-to-local, align 4
  %v0_eee8 = load i32, i32* @sl, align 4
  store i32 %v0_eee8, i32* %r0.global-to-local, align 4
  %v0_eeec = load i32, i32* @r5, align 4
  %v1_eeec = add i32 %v0_eeec, 24
  %v2_eeec = inttoptr i32 %v1_eeec to i32*
  %v3_eeec = load i32, i32* %v2_eeec, align 4
  store i32 %v3_eeec, i32* %r1.global-to-local, align 4
  %v4_eef0 = call i32 @function_fffc(i32 %v0_eee8, i32 %v3_eeec, i32 %v0_eee0, i32 %v1_eee4)
  store i32 %v4_eef0, i32* %r0.global-to-local, align 4
  %v2_eef4 = icmp eq i32 %v4_eef0, -1
  store i1 %v2_eef4, i1* %cpsr_c.global-to-local, align 1
  %v7_eef4 = icmp eq i32 %v4_eef0, -1
  store i1 %v7_eef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eef4, label %dec_label_pc_f84c, label %dec_label_pc_ef04

dec_label_pc_ef04:                                ; preds = %dec_label_pc_f84c, %dec_label_pc_eea4
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_ef08 = call i32 @function_fa5c(i32 12)
  store i32 13, i32* %r0.global-to-local, align 4
  %v1_ef10 = call i32 @function_fa5c(i32 13)
  store i32 %v1_ef10, i32* %r0.global-to-local, align 4
  %v0_ef14 = load i32, i32* @r7, align 4
  %v3_ef14 = icmp eq i32 %v0_ef14, -1
  store i1 %v3_ef14, i1* %cpsr_c.global-to-local, align 1
  %v8_ef14 = icmp eq i32 %v0_ef14, -1
  store i1 %v8_ef14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ef14, label %dec_label_pc_ef1c.loopexit, label %dec_label_pc_f10c

dec_label_pc_ef1c.loopexit:                       ; preds = %dec_label_pc_f0a8, %dec_label_pc_f6c8, %dec_label_pc_ef9c, %dec_label_pc_ef04, %dec_label_pc_f6b4
  %v0_ef1c = load i32, i32* @r5, align 4
  %v1_ef1c = add i32 %v0_ef1c, 12
  %v2_ef1c = inttoptr i32 %v1_ef1c to i32*
  %v3_ef1c = load i32, i32* %v2_ef1c, align 4
  store i32 %v3_ef1c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef20111 = icmp eq i32 %v3_ef1c, 0
  store i1 %v2_ef20111, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef20111, label %dec_label_pc_ed6c, label %dec_label_pc_ef28.lr.ph

dec_label_pc_ef28.lr.ph:                          ; preds = %dec_label_pc_ef1c.preheader, %dec_label_pc_ef1c.loopexit
  %v0_ef28145 = phi i32 [ %v0_ef1c, %dec_label_pc_ef1c.loopexit ], [ %v0_ef1c112, %dec_label_pc_ef1c.preheader ]
  br label %dec_label_pc_ef28

dec_label_pc_ef28:                                ; preds = %dec_label_pc_ef20.backedge.thread, %dec_label_pc_ef20.backedge, %dec_label_pc_ef20.backedge.thread455, %dec_label_pc_ef28.lr.ph
  %v0_f804 = phi i32 [ %v0_ef28145, %dec_label_pc_ef28.lr.ph ], [ %v0_ef28142, %dec_label_pc_ef20.backedge ], [ %v0_ef9c, %dec_label_pc_ef20.backedge.thread ], [ %v0_ef9c, %dec_label_pc_ef20.backedge.thread455 ]
  %v1_ef28 = add i32 %v0_f804, 24
  %v2_ef28 = inttoptr i32 %v1_ef28 to i32*
  %v3_ef28 = load i32, i32* %v2_ef28, align 4
  store i32 %v3_ef28, i32* %r3.global-to-local, align 4
  %v2_ef2c = icmp ugt i32 %v3_ef28, 255
  store i1 %v2_ef2c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef2c = icmp eq i32 %v3_ef28, 256
  store i1 %v7_ef2c, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_f804, 28
  store i32 %.pre, i32* @sl, align 4
  br i1 %v7_ef2c, label %dec_label_pc_f804, label %dec_label_pc_ef38

dec_label_pc_ef38:                                ; preds = %dec_label_pc_ef28, %dec_label_pc_f804
  store i32 0, i32* @r6, align 4
  %v1_ef3c = load i32, i32* @sb, align 4
  %v2_ef3c = inttoptr i32 %v1_ef3c to i32*
  store i32 0, i32* %v2_ef3c, align 4
  %v0_ef40 = load i32, i32* @r5, align 4
  %v1_ef40 = add i32 %v0_ef40, 24
  %v2_ef40 = inttoptr i32 %v1_ef40 to i32*
  %v3_ef40 = load i32, i32* %v2_ef40, align 4
  store i32 %v3_ef40, i32* %r2.global-to-local, align 4
  %v0_ef44 = load i32, i32* @sl, align 4
  %v2_ef44 = add i32 %v0_ef44, %v3_ef40
  store i32 %v2_ef44, i32* @r4, align 4
  %v1_ef48 = add i32 %v0_ef40, 4
  %v2_ef48 = inttoptr i32 %v1_ef48 to i32*
  %v3_ef48 = load i32, i32* %v2_ef48, align 4
  store i32 %v3_ef48, i32* %r0.global-to-local, align 4
  %v1_ef4c = sub i32 256, %v3_ef40
  store i32 %v1_ef4c, i32* %r2.global-to-local, align 4
  store i32 %v2_ef44, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ef58 = inttoptr i32 %v2_ef44 to i32*
  %v5_ef58 = call i32 @function_10aec(i32 %v3_ef48, i32* %v4_ef58, i32 %v1_ef4c, i32 16384)
  store i32 %v5_ef58, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef5c = icmp eq i32 %v5_ef58, 0
  store i1 %v2_ef5c, i1* %cpsr_z.global-to-local, align 1
  %tmp320 = icmp slt i32 %v5_ef58, 1
  br i1 %tmp320, label %dec_label_pc_f780, label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %dec_label_pc_ef38
  %v0_ef64 = load i32, i32* @r6, align 4
  store i32 %v0_ef64, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef6c

dec_label_pc_ef6c:                                ; preds = %bb322, %dec_label_pc_ef64
  %v3_ef74 = phi i32 [ %v1_ef78, %bb322 ], [ %v0_ef64, %dec_label_pc_ef64 ]
  %v1_ef6c = load i32, i32* @r4, align 4
  %v2_ef6c = add i32 %v1_ef6c, %v3_ef74
  %v3_ef6c = inttoptr i32 %v2_ef6c to i8*
  %v4_ef6c = load i8, i8* %v3_ef6c, align 1
  %v6_ef6c = zext i8 %v4_ef6c to i32
  store i32 %v6_ef6c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef70 = icmp eq i8 %v4_ef6c, 0
  store i1 %v2_ef70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef70, label %bb321, label %bb322

bb321:                                            ; preds = %dec_label_pc_ef6c
  %v1_ef74 = load i32, i32* %r1.global-to-local, align 4
  %v2_ef74 = trunc i32 %v1_ef74 to i8
  store i8 %v2_ef74, i8* %v3_ef6c, align 1
  %v0_ef78.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb322

bb322:                                            ; preds = %dec_label_pc_ef6c, %bb321
  %v0_ef78 = phi i32 [ %v3_ef74, %dec_label_pc_ef6c ], [ %v0_ef78.pre, %bb321 ]
  %v1_ef78 = add i32 %v0_ef78, 1
  store i32 %v1_ef78, i32* %r2.global-to-local, align 4
  %v3_ef7c = icmp uge i32 %v5_ef58, %v1_ef78
  store i1 %v3_ef7c, i1* %cpsr_c.global-to-local, align 1
  %v9_ef7c = icmp eq i32 %v5_ef58, %v1_ef78
  store i1 %v9_ef7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef7c, label %dec_label_pc_ef84, label %dec_label_pc_ef6c

dec_label_pc_ef84:                                ; preds = %bb322, %dec_label_pc_f784
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %r1.global-to-local, align 4
  %v0_ef88 = load i32, i32* @r5, align 4
  %v1_ef88 = add i32 %v0_ef88, 24
  %v2_ef88 = inttoptr i32 %v1_ef88 to i32*
  %v3_ef88 = load i32, i32* %v2_ef88, align 4
  %v2_ef8c = load i32, i32* @global_var_1b1e8.112, align 4
  store i32 %v2_ef8c, i32* %r3.global-to-local, align 4
  %v2_ef90 = add i32 %v3_ef88, %v5_ef58
  store i32 %v2_ef90, i32* %ip.global-to-local, align 4
  store i32 %v2_ef90, i32* %v2_ef88, align 4
  %v0_ef98 = load i32, i32* %r3.global-to-local, align 4
  %v1_ef98 = load i32, i32* @r5, align 4
  %v2_ef98 = add i32 %v1_ef98, 8
  %v3_ef98 = inttoptr i32 %v2_ef98 to i32*
  store i32 %v0_ef98, i32* %v3_ef98, align 4
  br label %dec_label_pc_ef9c

dec_label_pc_ef9c:                                ; preds = %dec_label_pc_f534, %dec_label_pc_ef84
  %v0_ef9c = load i32, i32* @r5, align 4
  %v1_ef9c = add i32 %v0_ef9c, 12
  %v2_ef9c = inttoptr i32 %v1_ef9c to i32*
  %v3_ef9c = load i32, i32* %v2_ef9c, align 4
  store i32 %v3_ef9c, i32* %r2.global-to-local, align 4
  %v1_efa0 = add i32 %v3_ef9c, -2
  store i32 %v1_efa0, i32* %r3.global-to-local, align 4
  %v7_efa4 = icmp eq i32 %v1_efa0, 8
  store i1 %v7_efa4, i1* %cpsr_z.global-to-local, align 1
  %v5_efa8 = and i32 %v1_efa0, 1073741824
  %v6_efa8 = icmp ne i32 %v5_efa8, 0
  store i1 %v6_efa8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_ef9c, label %dec_label_pc_ef1c.loopexit [
    i32 2, label %dec_label_pc_efd4
    i32 3, label %dec_label_pc_f0b8
    i32 4, label %dec_label_pc_f150
    i32 5, label %dec_label_pc_f1e0
    i32 6, label %dec_label_pc_f294
    i32 7, label %dec_label_pc_f3fc
    i32 8, label %dec_label_pc_f348
    i32 9, label %dec_label_pc_f558
    i32 10, label %dec_label_pc_f4b0
  ]

dec_label_pc_efd4:                                ; preds = %dec_label_pc_ef9c
  %v1_efd4 = add i32 %v0_ef9c, 24
  %v2_efd4 = inttoptr i32 %v1_efd4 to i32*
  %v3_efd4 = load i32, i32* %v2_efd4, align 4
  store i32 %v3_efd4, i32* %ip.global-to-local, align 4
  %v0_efd8 = load i32, i32* @sl, align 4
  store i32 %v0_efd8, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_efe0 = add i32 %v0_ef9c, 29
  store i32 %v1_efe0, i32* @r4, align 4
  store i32 -3, i32* %r8.global-to-local, align 4
  %v3_efe8102 = icmp eq i32 %v3_efd4, 0
  store i1 %v3_efe8102, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_efe8102, i1* %cpsr_z.global-to-local, align 1
  %v6_efec109 = icmp sgt i32 %v3_efd4, 0
  br i1 %v6_efec109, label %dec_label_pc_eff0.preheader, label %dec_label_pc_f098

dec_label_pc_efe8.loopexit:                       ; preds = %dec_label_pc_f008
  %v2_f010 = add i32 %v1_f010, 2
  store i32 %v2_f010, i32* @r6, align 4
  %v2_f014 = add i32 %v1_f014, 2
  store i32 %v2_f014, i32* @r4, align 4
  %v2_f018 = add i32 %v1_f018, 2
  store i32 %v2_f018, i32* @r7, align 4
  %v3_efe8 = icmp uge i32 %v2_f018, %v1_efe8
  store i1 %v3_efe8, i1* %cpsr_c.global-to-local, align 1
  %v9_efe8 = icmp eq i32 %v2_f018, %v1_efe8
  store i1 %v9_efe8, i1* %cpsr_z.global-to-local, align 1
  %v6_efec = icmp slt i32 %v2_f018, %v1_efe8
  br i1 %v6_efec, label %dec_label_pc_eff0.preheader, label %dec_label_pc_f098

dec_label_pc_eff0.preheader:                      ; preds = %dec_label_pc_efd4, %dec_label_pc_efe8.loopexit
  %v6_f0a0184 = phi i32 [ %v6_f0a0185, %dec_label_pc_efe8.loopexit ], [ %v0_ef9c, %dec_label_pc_efd4 ]
  %v1_f018173 = phi i32 [ %v2_f018, %dec_label_pc_efe8.loopexit ], [ 0, %dec_label_pc_efd4 ]
  %v1_f010171 = phi i32 [ %v2_f010, %dec_label_pc_efe8.loopexit ], [ %v0_efd8, %dec_label_pc_efd4 ]
  %v1_effc169 = phi i32 [ %v1_efe8, %dec_label_pc_efe8.loopexit ], [ %v3_efd4, %dec_label_pc_efd4 ]
  %v0_eff0167 = phi i32 [ %v2_f014, %dec_label_pc_efe8.loopexit ], [ %v1_efe0, %dec_label_pc_efd4 ]
  br label %dec_label_pc_eff0

dec_label_pc_eff0:                                ; preds = %dec_label_pc_eff0.preheader, %dec_label_pc_f078
  %v6_f0a0185 = phi i32 [ %v6_f0a0184, %dec_label_pc_eff0.preheader ], [ %v0_f080, %dec_label_pc_f078 ]
  %v1_f018 = phi i32 [ %v1_f018173, %dec_label_pc_eff0.preheader ], [ %v1_f084, %dec_label_pc_f078 ]
  %v1_f010 = phi i32 [ %v1_f010171, %dec_label_pc_eff0.preheader ], [ %v1_f08c, %dec_label_pc_f078 ]
  %v1_efe8 = phi i32 [ %v1_effc169, %dec_label_pc_eff0.preheader ], [ %v3_f080, %dec_label_pc_f078 ]
  %v1_f014 = phi i32 [ %v0_eff0167, %dec_label_pc_eff0.preheader ], [ %v1_f090, %dec_label_pc_f078 ]
  %v1_eff0 = add i32 %v1_f014, -1
  %v2_eff0 = inttoptr i32 %v1_eff0 to i8*
  %v3_eff0 = load i8, i8* %v2_eff0, align 1
  %v4_eff0 = zext i8 %v3_eff0 to i32
  store i32 %v4_eff0, i32* %r3.global-to-local, align 4
  %v2_eff4 = icmp eq i8 %v3_eff0, -1
  store i1 %v2_eff4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_eff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eff4, label %dec_label_pc_effc, label %dec_label_pc_f098

dec_label_pc_effc:                                ; preds = %dec_label_pc_eff0
  %v0_effc = load i32, i32* @sl, align 4
  %v2_effc = add i32 %v0_effc, %v1_efe8
  store i32 %v2_effc, i32* %r2.global-to-local, align 4
  %v3_f000 = icmp uge i32 %v2_effc, %v1_f014
  store i1 %v3_f000, i1* %cpsr_c.global-to-local, align 1
  %v9_f000 = icmp eq i32 %v2_effc, %v1_f014
  store i1 %v9_f000, i1* %cpsr_z.global-to-local, align 1
  %v2_f004 = xor i1 %v3_f000, true
  %v3_f004 = or i1 %v9_f000, %v2_f004
  br i1 %v3_f004, label %dec_label_pc_f098, label %dec_label_pc_f008

dec_label_pc_f008:                                ; preds = %dec_label_pc_effc
  %v1_f008 = inttoptr i32 %v1_f014 to i8*
  %v2_f008 = load i8, i8* %v1_f008, align 1
  %v3_f008 = zext i8 %v2_f008 to i32
  store i32 %v3_f008, i32* %r3.global-to-local, align 4
  %v2_f00c = icmp eq i8 %v2_f008, -1
  store i1 %v2_f00c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f00c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f00c, label %dec_label_pc_efe8.loopexit, label %dec_label_pc_f020

dec_label_pc_f020:                                ; preds = %dec_label_pc_f008
  %v2_f020 = icmp ugt i8 %v2_f008, -4
  store i1 %v2_f020, i1* %cpsr_c.global-to-local, align 1
  %v7_f020 = icmp eq i8 %v2_f008, -3
  store i1 %v7_f020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f020, label %dec_label_pc_f60c, label %dec_label_pc_f028

dec_label_pc_f028:                                ; preds = %dec_label_pc_f020
  %v1_f028 = add i32 %v1_f010, 2
  store i32 %v1_f028, i32* %r3.global-to-local, align 4
  %v3_f02c = icmp uge i32 %v2_effc, %v1_f028
  store i1 %v3_f02c, i1* %cpsr_c.global-to-local, align 1
  %v9_f02c = icmp eq i32 %v2_effc, %v1_f028
  store i1 %v9_f02c, i1* %cpsr_z.global-to-local, align 1
  %v2_f030 = xor i1 %v3_f02c, true
  %v3_f030 = or i1 %v9_f02c, %v2_f030
  br i1 %v3_f030, label %dec_label_pc_f098, label %dec_label_pc_f034

dec_label_pc_f034:                                ; preds = %bb344, %dec_label_pc_f668, %.thread75, %dec_label_pc_f028
  %v0_f034 = load i32, i32* @r4, align 4
  %v1_f034 = inttoptr i32 %v0_f034 to i8*
  %v2_f034 = load i8, i8* %v1_f034, align 1
  %v3_f034 = zext i8 %v2_f034 to i32
  store i32 %v3_f034, i32* %r3.global-to-local, align 4
  %v2_f038 = icmp ugt i8 %v2_f034, -4
  store i1 %v2_f038, i1* %cpsr_c.global-to-local, align 1
  %v7_f038 = icmp eq i8 %v2_f034, -3
  store i1 %v7_f038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f038, label %.thread62, label %dec_label_pc_f048

.thread62:                                        ; preds = %dec_label_pc_f034
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f034, align 1
  %v0_f044.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f044.pr.pr, label %bb324, label %.thread62.dec_label_pc_f048thread-pre-split_crit_edge

.thread62.dec_label_pc_f048thread-pre-split_crit_edge: ; preds = %.thread62
  %v0_f048.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f048

dec_label_pc_f048:                                ; preds = %dec_label_pc_f034, %.thread62.dec_label_pc_f048thread-pre-split_crit_edge
  %v0_f048.pr = phi i32 [ %v0_f048.pr.pre, %.thread62.dec_label_pc_f048thread-pre-split_crit_edge ], [ %v3_f034, %dec_label_pc_f034 ]
  %v2_f048 = icmp ugt i32 %v0_f048.pr, 250
  store i1 %v2_f048, i1* %cpsr_c.global-to-local, align 1
  %v7_f048 = icmp eq i32 %v0_f048.pr, 251
  store i1 %v7_f048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f048, label %bb323, label %bb324

bb323:                                            ; preds = %dec_label_pc_f048
  %v1_f04c = load i32, i32* %r8.global-to-local, align 4
  %v2_f04c = trunc i32 %v1_f04c to i8
  %v3_f04c = load i32, i32* @r4, align 4
  %v4_f04c = inttoptr i32 %v3_f04c to i8*
  store i8 %v2_f04c, i8* %v4_f04c, align 1
  br label %bb324

bb324:                                            ; preds = %.thread62, %dec_label_pc_f048, %bb323
  %v0_f050 = load i32, i32* @r4, align 4
  %v1_f050 = add i32 %v0_f050, 1
  %v2_f050 = inttoptr i32 %v1_f050 to i8*
  %v3_f050 = load i8, i8* %v2_f050, align 1
  %v4_f050 = zext i8 %v3_f050 to i32
  store i32 %v4_f050, i32* %r3.global-to-local, align 4
  %v2_f054 = icmp ugt i8 %v3_f050, -4
  store i1 %v2_f054, i1* %cpsr_c.global-to-local, align 1
  %v7_f054 = icmp eq i8 %v3_f050, -3
  store i1 %v7_f054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f054, label %.thread65, label %dec_label_pc_f064

.thread65:                                        ; preds = %bb324
  store i32 -4, i32* %ip.global-to-local, align 4
  store i8 -4, i8* %v2_f050, align 1
  %v0_f060.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f060.pr.pr, label %bb326, label %.thread65.dec_label_pc_f064_crit_edge

.thread65.dec_label_pc_f064_crit_edge:            ; preds = %.thread65
  %v0_f064.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f064

dec_label_pc_f064:                                ; preds = %.thread65.dec_label_pc_f064_crit_edge, %bb324
  %v0_f064 = phi i32 [ %v0_f064.pre, %.thread65.dec_label_pc_f064_crit_edge ], [ %v4_f050, %bb324 ]
  %v2_f064 = icmp ugt i32 %v0_f064, 250
  store i1 %v2_f064, i1* %cpsr_c.global-to-local, align 1
  %v7_f064 = icmp eq i32 %v0_f064, 251
  store i1 %v7_f064, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f064, label %bb325, label %bb326

bb325:                                            ; preds = %dec_label_pc_f064
  %v1_f068 = load i32, i32* %r8.global-to-local, align 4
  %v2_f068 = trunc i32 %v1_f068 to i8
  %v3_f068 = load i32, i32* @r4, align 4
  %v4_f068 = add i32 %v3_f068, 1
  %v5_f068 = inttoptr i32 %v4_f068 to i8*
  store i8 %v2_f068, i8* %v5_f068, align 1
  br label %bb326

bb326:                                            ; preds = %.thread65, %dec_label_pc_f064, %bb325
  %v0_f06c = load i32, i32* @r5, align 4
  %v1_f06c = add i32 %v0_f06c, 4
  %v2_f06c = inttoptr i32 %v1_f06c to i32*
  %v3_f06c = load i32, i32* %v2_f06c, align 4
  store i32 %v3_f06c, i32* %r0.global-to-local, align 4
  %v0_f070 = load i32, i32* @r6, align 4
  br label %dec_label_pc_f078

dec_label_pc_f078:                                ; preds = %dec_label_pc_f7d8, %bb326
  %v0_f07c = phi i32 [ %v3_f7f4, %dec_label_pc_f7d8 ], [ %v3_f06c, %bb326 ]
  %storemerge8 = phi i32 [ %v2_f628, %dec_label_pc_f7d8 ], [ %v0_f070, %bb326 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_f7d8 ], [ 3, %bb326 ]
  store i32 %storemerge8, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f07c = inttoptr i32 %storemerge8 to i32*
  %v5_f07c = call i32 @function_10b4c(i32 %v0_f07c, i32* %v4_f07c, i32 %storemerge, i32 16384)
  store i32 %v5_f07c, i32* %r0.global-to-local, align 4
  %v0_f080 = load i32, i32* @r5, align 4
  %v1_f080 = add i32 %v0_f080, 24
  %v2_f080 = inttoptr i32 %v1_f080 to i32*
  %v3_f080 = load i32, i32* %v2_f080, align 4
  store i32 %v3_f080, i32* %ip.global-to-local, align 4
  %v0_f084 = load i32, i32* @r7, align 4
  %v1_f084 = add i32 %v0_f084, 3
  store i32 %v1_f084, i32* @r7, align 4
  %v3_f088 = icmp uge i32 %v1_f084, %v3_f080
  store i1 %v3_f088, i1* %cpsr_c.global-to-local, align 1
  %v9_f088 = icmp eq i32 %v1_f084, %v3_f080
  store i1 %v9_f088, i1* %cpsr_z.global-to-local, align 1
  %v0_f08c = load i32, i32* @r6, align 4
  %v1_f08c = add i32 %v0_f08c, 3
  store i32 %v1_f08c, i32* @r6, align 4
  %v0_f090 = load i32, i32* @r4, align 4
  %v1_f090 = add i32 %v0_f090, 3
  store i32 %v1_f090, i32* @r4, align 4
  %v5_f094 = icmp slt i32 %v1_f084, %v3_f080
  br i1 %v5_f094, label %dec_label_pc_eff0, label %dec_label_pc_f098

dec_label_pc_f098:                                ; preds = %dec_label_pc_efe8.loopexit, %dec_label_pc_eff0, %dec_label_pc_f078, %dec_label_pc_f028, %dec_label_pc_effc, %dec_label_pc_efd4, %dec_label_pc_f60c.dec_label_pc_f098.loopexit_crit_edge
  %v6_f0a0 = phi i32 [ %v0_f634, %dec_label_pc_f60c.dec_label_pc_f098.loopexit_crit_edge ], [ %v0_ef9c, %dec_label_pc_efd4 ], [ %v6_f0a0185, %dec_label_pc_eff0 ], [ %v0_f080, %dec_label_pc_f078 ], [ %v6_f0a0185, %dec_label_pc_f028 ], [ %v6_f0a0185, %dec_label_pc_effc ], [ %v6_f0a0185, %dec_label_pc_efe8.loopexit ]
  %v0_f0a8.pre = phi i32 [ %v0_f098.pre.pre, %dec_label_pc_f60c.dec_label_pc_f098.loopexit_crit_edge ], [ 0, %dec_label_pc_efd4 ], [ %v1_f018, %dec_label_pc_eff0 ], [ %v1_f084, %dec_label_pc_f078 ], [ %v1_f018, %dec_label_pc_f028 ], [ %v1_f018, %dec_label_pc_effc ], [ %v2_f018, %dec_label_pc_efe8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f098 = icmp eq i32 %v0_f0a8.pre, 0
  store i1 %v2_f098, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v0_f0a8.pre, 1
  br i1 %tmp327, label %dec_label_pc_f0a8, label %.thread223

.thread223:                                       ; preds = %dec_label_pc_f098
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_f0a0 = add i32 %v6_f0a0, 12
  %v8_f0a0 = inttoptr i32 %v7_f0a0 to i32*
  store i32 3, i32* %v8_f0a0, align 4
  br label %dec_label_pc_f534

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_f098, %dec_label_pc_f5ac, %dec_label_pc_f714, %dec_label_pc_f450, %dec_label_pc_f39c, %dec_label_pc_f2e8, %dec_label_pc_f234, %dec_label_pc_f19c, %dec_label_pc_f10c
  %v0_f0a8 = phi i32 [ %v1_f5a0, %dec_label_pc_f5ac ], [ %v0_f70c, %dec_label_pc_f714 ], [ %v1_f444, %dec_label_pc_f450 ], [ %v1_f390, %dec_label_pc_f39c ], [ %v1_f2dc, %dec_label_pc_f2e8 ], [ %v1_f228, %dec_label_pc_f234 ], [ %v0_f19c, %dec_label_pc_f19c ], [ %v0_f10c, %dec_label_pc_f10c ], [ %v0_f0a8.pre, %dec_label_pc_f098 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0a8 = icmp eq i32 %v0_f0a8, 0
  store i1 %v2_f0a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0a8, label %dec_label_pc_ef1c.loopexit, label %dec_label_pc_f0b0

dec_label_pc_f0b0:                                ; preds = %dec_label_pc_f0a8
  %v0_f0b0 = load i32, i32* @r5, align 4
  %v1_f0b0 = add i32 %v0_f0b0, 24
  %v2_f0b0 = inttoptr i32 %v1_f0b0 to i32*
  %v3_f0b0 = load i32, i32* %v2_f0b0, align 4
  store i32 %v3_f0b0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f534

dec_label_pc_f0b8:                                ; preds = %dec_label_pc_ef9c
  %v1_f0b8 = add i32 %v0_ef9c, 24
  %v2_f0b8 = inttoptr i32 %v1_f0b8 to i32*
  %v3_f0b8 = load i32, i32* %v2_f0b8, align 4
  store i32 %v3_f0b8, i32* %ip.global-to-local, align 4
  %v1_f0bc = add i32 %v3_f0b8, -1
  store i32 %v1_f0bc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0c0 = icmp eq i32 %v1_f0bc, 0
  store i1 %v2_f0c0, i1* %cpsr_z.global-to-local, align 1
  %v5_f0c4 = icmp sgt i32 %v1_f0bc, 0
  br i1 %v5_f0c4, label %dec_label_pc_f0ec, label %dec_label_pc_eea4

dec_label_pc_f0cc:                                ; preds = %bb328
  %v2_f0cc = icmp ugt i8 %v3_f0f0, 35
  store i1 %v2_f0cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0cc = icmp eq i8 %v3_f0f0, 36
  store i1 %v7_f0cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0cc, label %dec_label_pc_f100, label %dec_label_pc_f0d4

dec_label_pc_f0d4:                                ; preds = %dec_label_pc_f0cc
  %v2_f0d4 = icmp ugt i8 %v3_f0f0, 34
  store i1 %v2_f0d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0d4 = icmp eq i8 %v3_f0f0, 35
  store i1 %v7_f0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0d4, label %dec_label_pc_f100, label %dec_label_pc_f0dc

dec_label_pc_f0dc:                                ; preds = %dec_label_pc_f0d4
  %v2_f0dc = icmp ugt i8 %v3_f0f0, 36
  store i1 %v2_f0dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0dc = icmp eq i8 %v3_f0f0, 37
  store i1 %v7_f0dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0dc, label %dec_label_pc_f100, label %dec_label_pc_f0e4

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f0dc
  %v1_f0e4 = add i32 %v0_f100, -1
  store i32 %v1_f0e4, i32* %r0.global-to-local, align 4
  %v2_f0e4 = icmp ne i32 %v0_f100, 0
  store i1 %v2_f0e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0e4 = icmp eq i32 %v0_f100, 1
  store i1 %v7_f0e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0e4, label %dec_label_pc_eea4, label %dec_label_pc_f0ec

dec_label_pc_f0ec:                                ; preds = %dec_label_pc_f0b8, %dec_label_pc_f0e4
  %v0_f100 = phi i32 [ %v1_f0e4, %dec_label_pc_f0e4 ], [ %v1_f0bc, %dec_label_pc_f0b8 ]
  %v2_f0ec = add i32 %v0_f100, %v0_ef9c
  store i32 %v2_f0ec, i32* %r3.global-to-local, align 4
  %v1_f0f0 = add i32 %v2_f0ec, 28
  %v2_f0f0 = inttoptr i32 %v1_f0f0 to i8*
  %v3_f0f0 = load i8, i8* %v2_f0f0, align 1
  %v4_f0f0 = zext i8 %v3_f0f0 to i32
  store i32 %v4_f0f0, i32* %r3.global-to-local, align 4
  %v2_f0f4 = icmp ugt i8 %v3_f0f0, 61
  store i1 %v2_f0f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f4 = icmp eq i8 %v3_f0f0, 62
  store i1 %v7_f0f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0f4, label %dec_label_pc_f100, label %bb328

bb328:                                            ; preds = %dec_label_pc_f0ec
  %v3_f0f8 = icmp ugt i8 %v3_f0f0, 57
  store i1 %v3_f0f8, i1* %cpsr_c.global-to-local, align 1
  %v8_f0f8 = icmp eq i8 %v3_f0f0, 58
  store i1 %v8_f0f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0f8, label %dec_label_pc_f100, label %dec_label_pc_f0cc

dec_label_pc_f100:                                ; preds = %dec_label_pc_f0ec, %bb328, %dec_label_pc_f0dc, %dec_label_pc_f0d4, %dec_label_pc_f0cc
  %v1_f100 = add i32 %v0_f100, 1
  store i32 %v1_f100, i32* @r7, align 4
  %v2_f104 = icmp eq i32 %v1_f100, -1
  store i1 %v2_f104, i1* %cpsr_c.global-to-local, align 1
  %v7_f104 = icmp eq i32 %v0_f100, -2
  store i1 %v7_f104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f104, label %dec_label_pc_eea4, label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %dec_label_pc_ef04, %dec_label_pc_f100
  %v0_f10c = phi i32 [ %v0_ef14, %dec_label_pc_ef04 ], [ %v1_f100, %dec_label_pc_f100 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f10c = icmp eq i32 %v0_f10c, 0
  store i1 %v2_f10c, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v0_f10c, 1
  br i1 %tmp329, label %dec_label_pc_f0a8, label %dec_label_pc_f114

dec_label_pc_f114:                                ; preds = %dec_label_pc_f10c
  %v0_f114 = load i32, i32* @r5, align 4
  %v1_f114 = inttoptr i32 %v0_f114 to i32*
  %v2_f114 = load i32, i32* %v1_f114, align 4
  store i32 %v2_f114, i32* %r3.global-to-local, align 4
  %v1_f118 = add i32 %v0_f114, 4
  %v2_f118 = inttoptr i32 %v1_f118 to i32*
  %v3_f118 = load i32, i32* %v2_f118, align 4
  store i32 %v3_f118, i32* %r0.global-to-local, align 4
  %v1_f11c = add i32 %v2_f114, 12
  %v2_f11c = inttoptr i32 %v1_f11c to i8*
  %v3_f11c = load i8, i8* %v2_f11c, align 1
  %v4_f11c = zext i8 %v3_f11c to i32
  store i32 %v4_f11c, i32* %r2.global-to-local, align 4
  %v1_f120 = inttoptr i32 %v2_f114 to i32*
  %v2_f120 = load i32, i32* %v1_f120, align 4
  store i32 %v2_f120, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f128 = inttoptr i32 %v2_f120 to i32*
  %v5_f128 = call i32 @function_10b4c(i32 %v3_f118, i32* %v4_f128, i32 %v4_f11c, i32 16384)
  store i32 %v5_f128, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f130 = load i32, i32* @r5, align 4
  %v1_f130 = add i32 %v0_f130, 4
  %v2_f130 = inttoptr i32 %v1_f130 to i32*
  %v3_f130 = load i32, i32* %v2_f130, align 4
  store i32 %v3_f130, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129ac.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f13c = call i32 @function_10b4c(i32 %v3_f130, i32* bitcast ([3 x i8]* @global_var_129ac.500 to i32*), i32 2, i32 16384)
  store i32 %v5_f13c, i32* %r0.global-to-local, align 4
  %v0_f140 = load i32, i32* @r5, align 4
  %v1_f140 = add i32 %v0_f140, 24
  %v2_f140 = inttoptr i32 %v1_f140 to i32*
  %v3_f140 = load i32, i32* %v2_f140, align 4
  store i32 %v3_f140, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_f148 = add i32 %v0_f140, 12
  %v3_f148 = inttoptr i32 %v2_f148 to i32*
  store i32 4, i32* %v3_f148, align 4
  br label %dec_label_pc_f534

dec_label_pc_f150:                                ; preds = %dec_label_pc_ef9c
  %v1_f150 = add i32 %v0_ef9c, 24
  %v2_f150 = inttoptr i32 %v1_f150 to i32*
  %v3_f150 = load i32, i32* %v2_f150, align 4
  store i32 %v3_f150, i32* %ip.global-to-local, align 4
  %v1_f154 = add i32 %v3_f150, -1
  store i32 %v1_f154, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f158 = icmp eq i32 %v1_f154, 0
  store i1 %v2_f158, i1* %cpsr_z.global-to-local, align 1
  %v5_f15c = icmp sgt i32 %v1_f154, 0
  br i1 %v5_f15c, label %dec_label_pc_f17c, label %dec_label_pc_f674

dec_label_pc_f164:                                ; preds = %bb330
  %v2_f164 = icmp ugt i8 %v3_f180, 35
  store i1 %v2_f164, i1* %cpsr_c.global-to-local, align 1
  %v7_f164 = icmp eq i8 %v3_f180, 36
  store i1 %v7_f164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f164, label %dec_label_pc_f190, label %dec_label_pc_f16c

dec_label_pc_f16c:                                ; preds = %dec_label_pc_f164
  %v2_f16c = icmp ugt i8 %v3_f180, 34
  store i1 %v2_f16c, i1* %cpsr_c.global-to-local, align 1
  %v7_f16c = icmp eq i8 %v3_f180, 35
  store i1 %v7_f16c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f16c, label %dec_label_pc_f190, label %dec_label_pc_f174

dec_label_pc_f174:                                ; preds = %dec_label_pc_f16c
  %v1_f174 = add i32 %v0_f190, -1
  store i32 %v1_f174, i32* %r0.global-to-local, align 4
  %v2_f174 = icmp ne i32 %v0_f190, 0
  store i1 %v2_f174, i1* %cpsr_c.global-to-local, align 1
  %v7_f174 = icmp eq i32 %v0_f190, 1
  store i1 %v7_f174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f174, label %dec_label_pc_f674, label %dec_label_pc_f17c

dec_label_pc_f17c:                                ; preds = %dec_label_pc_f150, %dec_label_pc_f174
  %v0_f190 = phi i32 [ %v1_f174, %dec_label_pc_f174 ], [ %v1_f154, %dec_label_pc_f150 ]
  %v2_f17c = add i32 %v0_f190, %v0_ef9c
  store i32 %v2_f17c, i32* %r3.global-to-local, align 4
  %v1_f180 = add i32 %v2_f17c, 28
  %v2_f180 = inttoptr i32 %v1_f180 to i8*
  %v3_f180 = load i8, i8* %v2_f180, align 1
  %v4_f180 = zext i8 %v3_f180 to i32
  store i32 %v4_f180, i32* %r3.global-to-local, align 4
  %v2_f184 = icmp ugt i8 %v3_f180, 61
  store i1 %v2_f184, i1* %cpsr_c.global-to-local, align 1
  %v7_f184 = icmp eq i8 %v3_f180, 62
  store i1 %v7_f184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f184, label %dec_label_pc_f190, label %bb330

bb330:                                            ; preds = %dec_label_pc_f17c
  %v3_f188 = icmp ugt i8 %v3_f180, 57
  store i1 %v3_f188, i1* %cpsr_c.global-to-local, align 1
  %v8_f188 = icmp eq i8 %v3_f180, 58
  store i1 %v8_f188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f188, label %dec_label_pc_f190, label %dec_label_pc_f164

dec_label_pc_f190:                                ; preds = %dec_label_pc_f17c, %bb330, %dec_label_pc_f16c, %dec_label_pc_f164
  %v1_f190 = add i32 %v0_f190, 1
  store i32 %v1_f190, i32* @r7, align 4
  %v2_f194 = icmp eq i32 %v1_f190, -1
  store i1 %v2_f194, i1* %cpsr_c.global-to-local, align 1
  %v7_f194 = icmp eq i32 %v0_f190, -2
  store i1 %v7_f194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f194, label %dec_label_pc_f674, label %dec_label_pc_f19c

dec_label_pc_f19c:                                ; preds = %dec_label_pc_f6b4, %dec_label_pc_f190
  %v0_f19c = phi i32 [ %v0_f6bc, %dec_label_pc_f6b4 ], [ %v1_f190, %dec_label_pc_f190 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f19c = icmp eq i32 %v0_f19c, 0
  store i1 %v2_f19c, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v0_f19c, 1
  br i1 %tmp331, label %dec_label_pc_f0a8, label %dec_label_pc_f1a4

dec_label_pc_f1a4:                                ; preds = %dec_label_pc_f19c
  %v0_f1a4 = load i32, i32* @r5, align 4
  %v1_f1a4 = inttoptr i32 %v0_f1a4 to i32*
  %v2_f1a4 = load i32, i32* %v1_f1a4, align 4
  store i32 %v2_f1a4, i32* %r3.global-to-local, align 4
  %v1_f1a8 = add i32 %v0_f1a4, 4
  %v2_f1a8 = inttoptr i32 %v1_f1a8 to i32*
  %v3_f1a8 = load i32, i32* %v2_f1a8, align 4
  store i32 %v3_f1a8, i32* %r0.global-to-local, align 4
  %v1_f1ac = add i32 %v2_f1a4, 13
  %v2_f1ac = inttoptr i32 %v1_f1ac to i8*
  %v3_f1ac = load i8, i8* %v2_f1ac, align 1
  %v4_f1ac = zext i8 %v3_f1ac to i32
  store i32 %v4_f1ac, i32* %r2.global-to-local, align 4
  %v1_f1b0 = add i32 %v2_f1a4, 4
  %v2_f1b0 = inttoptr i32 %v1_f1b0 to i32*
  %v3_f1b0 = load i32, i32* %v2_f1b0, align 4
  store i32 %v3_f1b0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f1b8 = inttoptr i32 %v3_f1b0 to i32*
  %v5_f1b8 = call i32 @function_10b4c(i32 %v3_f1a8, i32* %v4_f1b8, i32 %v4_f1ac, i32 16384)
  store i32 %v5_f1b8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f1c0 = load i32, i32* @r5, align 4
  %v1_f1c0 = add i32 %v0_f1c0, 4
  %v2_f1c0 = inttoptr i32 %v1_f1c0 to i32*
  %v3_f1c0 = load i32, i32* %v2_f1c0, align 4
  store i32 %v3_f1c0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129ac.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f1cc = call i32 @function_10b4c(i32 %v3_f1c0, i32* bitcast ([3 x i8]* @global_var_129ac.500 to i32*), i32 2, i32 16384)
  store i32 %v5_f1cc, i32* %r0.global-to-local, align 4
  %v0_f1d0 = load i32, i32* @r5, align 4
  %v1_f1d0 = add i32 %v0_f1d0, 24
  %v2_f1d0 = inttoptr i32 %v1_f1d0 to i32*
  %v3_f1d0 = load i32, i32* %v2_f1d0, align 4
  store i32 %v3_f1d0, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_f1d8 = add i32 %v0_f1d0, 12
  %v3_f1d8 = inttoptr i32 %v2_f1d8 to i32*
  store i32 5, i32* %v3_f1d8, align 4
  br label %dec_label_pc_f534

dec_label_pc_f1e0:                                ; preds = %dec_label_pc_ef9c
  %v1_f1e0 = add i32 %v0_ef9c, 24
  %v2_f1e0 = inttoptr i32 %v1_f1e0 to i32*
  %v3_f1e0 = load i32, i32* %v2_f1e0, align 4
  store i32 %v3_f1e0, i32* %ip.global-to-local, align 4
  %v1_f1e4 = add i32 %v3_f1e0, -1
  store i32 %v1_f1e4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1e8 = icmp eq i32 %v1_f1e4, 0
  store i1 %v2_f1e8, i1* %cpsr_z.global-to-local, align 1
  %v5_f1ec = icmp sgt i32 %v1_f1e4, 0
  br i1 %v5_f1ec, label %dec_label_pc_f214, label %dec_label_pc_ef20.backedge.thread

dec_label_pc_f1f4:                                ; preds = %bb332
  %v2_f1f4 = icmp ugt i8 %v3_f218, 35
  store i1 %v2_f1f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1f4 = icmp eq i8 %v3_f218, 36
  store i1 %v7_f1f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1f4, label %dec_label_pc_f228, label %dec_label_pc_f1fc

dec_label_pc_f1fc:                                ; preds = %dec_label_pc_f1f4
  %v2_f1fc = icmp ugt i8 %v3_f218, 34
  store i1 %v2_f1fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f1fc = icmp eq i8 %v3_f218, 35
  store i1 %v7_f1fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1fc, label %dec_label_pc_f228, label %dec_label_pc_f204

dec_label_pc_f204:                                ; preds = %dec_label_pc_f1fc
  %v2_f204 = icmp ugt i8 %v3_f218, 36
  store i1 %v2_f204, i1* %cpsr_c.global-to-local, align 1
  %v7_f204 = icmp eq i8 %v3_f218, 37
  store i1 %v7_f204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f204, label %dec_label_pc_f228, label %dec_label_pc_f20c

dec_label_pc_f20c:                                ; preds = %dec_label_pc_f204
  %v1_f20c = add i32 %v0_f228, -1
  store i32 %v1_f20c, i32* %r0.global-to-local, align 4
  %v2_f20c = icmp ne i32 %v0_f228, 0
  store i1 %v2_f20c, i1* %cpsr_c.global-to-local, align 1
  %v7_f20c = icmp eq i32 %v0_f228, 1
  store i1 %v7_f20c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f20c, label %dec_label_pc_ef20.backedge.thread455, label %dec_label_pc_f214

dec_label_pc_f214:                                ; preds = %dec_label_pc_f1e0, %dec_label_pc_f20c
  %v0_f228 = phi i32 [ %v1_f20c, %dec_label_pc_f20c ], [ %v1_f1e4, %dec_label_pc_f1e0 ]
  %v2_f214 = add i32 %v0_f228, %v0_ef9c
  store i32 %v2_f214, i32* %r3.global-to-local, align 4
  %v1_f218 = add i32 %v2_f214, 28
  %v2_f218 = inttoptr i32 %v1_f218 to i8*
  %v3_f218 = load i8, i8* %v2_f218, align 1
  %v4_f218 = zext i8 %v3_f218 to i32
  store i32 %v4_f218, i32* %r3.global-to-local, align 4
  %v2_f21c = icmp ugt i8 %v3_f218, 61
  store i1 %v2_f21c, i1* %cpsr_c.global-to-local, align 1
  %v7_f21c = icmp eq i8 %v3_f218, 62
  store i1 %v7_f21c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f21c, label %dec_label_pc_f228, label %bb332

bb332:                                            ; preds = %dec_label_pc_f214
  %v3_f220 = icmp ugt i8 %v3_f218, 57
  store i1 %v3_f220, i1* %cpsr_c.global-to-local, align 1
  %v8_f220 = icmp eq i8 %v3_f218, 58
  store i1 %v8_f220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f220, label %dec_label_pc_f228, label %dec_label_pc_f1f4

dec_label_pc_f228:                                ; preds = %dec_label_pc_f214, %bb332, %dec_label_pc_f204, %dec_label_pc_f1fc, %dec_label_pc_f1f4
  %v1_f228 = add i32 %v0_f228, 1
  store i32 %v1_f228, i32* @r7, align 4
  %v2_f22c = icmp eq i32 %v1_f228, -1
  store i1 %v2_f22c, i1* %cpsr_c.global-to-local, align 1
  %v7_f22c = icmp eq i32 %v0_f228, -2
  store i1 %v7_f22c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f22c, label %dec_label_pc_ef20.backedge.thread455, label %dec_label_pc_f234

dec_label_pc_f234:                                ; preds = %dec_label_pc_f228
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f234 = icmp eq i32 %v1_f228, 0
  store i1 %v2_f234, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v1_f228, 1
  br i1 %tmp333, label %dec_label_pc_f0a8, label %dec_label_pc_f23c

dec_label_pc_f23c:                                ; preds = %dec_label_pc_f234
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f240 = call i32 @function_fb14(i32 5)
  store i32 %v2_eeb8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_f250 = call i32 @function_fa30(i32 5, i32* %v2_eec0)
  store i32 %v3_f250, i32* %r0.global-to-local, align 4
  %v3_f254 = load i8, i8* %stack_var_-52, align 1
  %v4_f254 = sext i8 %v3_f254 to i32
  store i32 %v4_f254, i32* %r2.global-to-local, align 4
  store i32 %v3_f250, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f260 = load i32, i32* @r5, align 4
  %v1_f260 = add i32 %v0_f260, 4
  %v2_f260 = inttoptr i32 %v1_f260 to i32*
  %v3_f260 = load i32, i32* %v2_f260, align 4
  store i32 %v3_f260, i32* %r0.global-to-local, align 4
  %v4_f264 = inttoptr i32 %v3_f250 to i32*
  %v5_f264 = call i32 @function_10b4c(i32 %v3_f260, i32* %v4_f264, i32 %v4_f254, i32 16384)
  store i32 %v5_f264, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129ac.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f274 = load i32, i32* @r5, align 4
  %v1_f274 = add i32 %v0_f274, 4
  %v2_f274 = inttoptr i32 %v1_f274 to i32*
  %v3_f274 = load i32, i32* %v2_f274, align 4
  store i32 %v3_f274, i32* %r0.global-to-local, align 4
  %v5_f278 = call i32 @function_10b4c(i32 %v3_f274, i32* bitcast ([3 x i8]* @global_var_129ac.500 to i32*), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f280 = call i32 @function_fa5c(i32 5)
  store i32 %v1_f280, i32* %r0.global-to-local, align 4
  %v0_f284 = load i32, i32* @r5, align 4
  %v1_f284 = add i32 %v0_f284, 24
  %v2_f284 = inttoptr i32 %v1_f284 to i32*
  %v3_f284 = load i32, i32* %v2_f284, align 4
  store i32 %v3_f284, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_f28c = add i32 %v0_f284, 12
  %v3_f28c = inttoptr i32 %v2_f28c to i32*
  store i32 6, i32* %v3_f28c, align 4
  br label %dec_label_pc_f534

dec_label_pc_f294:                                ; preds = %dec_label_pc_ef9c
  %v1_f294 = add i32 %v0_ef9c, 24
  %v2_f294 = inttoptr i32 %v1_f294 to i32*
  %v3_f294 = load i32, i32* %v2_f294, align 4
  store i32 %v3_f294, i32* %ip.global-to-local, align 4
  %v1_f298 = add i32 %v3_f294, -1
  store i32 %v1_f298, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f29c = icmp eq i32 %v1_f298, 0
  store i1 %v2_f29c, i1* %cpsr_z.global-to-local, align 1
  %v5_f2a0 = icmp sgt i32 %v1_f298, 0
  br i1 %v5_f2a0, label %dec_label_pc_f2c8, label %dec_label_pc_ef20.backedge.thread

dec_label_pc_f2a8:                                ; preds = %bb334
  %v2_f2a8 = icmp ugt i8 %v3_f2cc, 35
  store i1 %v2_f2a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2a8 = icmp eq i8 %v3_f2cc, 36
  store i1 %v7_f2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2a8, label %dec_label_pc_f2dc, label %dec_label_pc_f2b0

dec_label_pc_f2b0:                                ; preds = %dec_label_pc_f2a8
  %v2_f2b0 = icmp ugt i8 %v3_f2cc, 34
  store i1 %v2_f2b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2b0 = icmp eq i8 %v3_f2cc, 35
  store i1 %v7_f2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2b0, label %dec_label_pc_f2dc, label %dec_label_pc_f2b8

dec_label_pc_f2b8:                                ; preds = %dec_label_pc_f2b0
  %v2_f2b8 = icmp ugt i8 %v3_f2cc, 36
  store i1 %v2_f2b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2b8 = icmp eq i8 %v3_f2cc, 37
  store i1 %v7_f2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2b8, label %dec_label_pc_f2dc, label %dec_label_pc_f2c0

dec_label_pc_f2c0:                                ; preds = %dec_label_pc_f2b8
  %v1_f2c0 = add i32 %v0_f2dc, -1
  store i32 %v1_f2c0, i32* %r0.global-to-local, align 4
  %v2_f2c0 = icmp ne i32 %v0_f2dc, 0
  store i1 %v2_f2c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2c0 = icmp eq i32 %v0_f2dc, 1
  store i1 %v7_f2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2c0, label %dec_label_pc_ef20.backedge.thread455, label %dec_label_pc_f2c8

dec_label_pc_f2c8:                                ; preds = %dec_label_pc_f294, %dec_label_pc_f2c0
  %v0_f2dc = phi i32 [ %v1_f2c0, %dec_label_pc_f2c0 ], [ %v1_f298, %dec_label_pc_f294 ]
  %v2_f2c8 = add i32 %v0_f2dc, %v0_ef9c
  store i32 %v2_f2c8, i32* %r3.global-to-local, align 4
  %v1_f2cc = add i32 %v2_f2c8, 28
  %v2_f2cc = inttoptr i32 %v1_f2cc to i8*
  %v3_f2cc = load i8, i8* %v2_f2cc, align 1
  %v4_f2cc = zext i8 %v3_f2cc to i32
  store i32 %v4_f2cc, i32* %r3.global-to-local, align 4
  %v2_f2d0 = icmp ugt i8 %v3_f2cc, 61
  store i1 %v2_f2d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2d0 = icmp eq i8 %v3_f2cc, 62
  store i1 %v7_f2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2d0, label %dec_label_pc_f2dc, label %bb334

bb334:                                            ; preds = %dec_label_pc_f2c8
  %v3_f2d4 = icmp ugt i8 %v3_f2cc, 57
  store i1 %v3_f2d4, i1* %cpsr_c.global-to-local, align 1
  %v8_f2d4 = icmp eq i8 %v3_f2cc, 58
  store i1 %v8_f2d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2d4, label %dec_label_pc_f2dc, label %dec_label_pc_f2a8

dec_label_pc_f2dc:                                ; preds = %dec_label_pc_f2c8, %bb334, %dec_label_pc_f2b8, %dec_label_pc_f2b0, %dec_label_pc_f2a8
  %v1_f2dc = add i32 %v0_f2dc, 1
  store i32 %v1_f2dc, i32* @r7, align 4
  %v2_f2e0 = icmp eq i32 %v1_f2dc, -1
  store i1 %v2_f2e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2e0 = icmp eq i32 %v0_f2dc, -2
  store i1 %v7_f2e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2e0, label %dec_label_pc_ef20.backedge.thread455, label %dec_label_pc_f2e8

dec_label_pc_f2e8:                                ; preds = %dec_label_pc_f2dc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f2e8 = icmp eq i32 %v1_f2dc, 0
  store i1 %v2_f2e8, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v1_f2dc, 1
  br i1 %tmp335, label %dec_label_pc_f0a8, label %dec_label_pc_f2f0

dec_label_pc_f2f0:                                ; preds = %dec_label_pc_f2e8
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f2f4 = call i32 @function_fb14(i32 6)
  store i32 %v2_eecc, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f304 = call i32 @function_fa30(i32 6, i32* nonnull %stack_var_-56)
  store i32 %v3_f304, i32* %r0.global-to-local, align 4
  %v3_f308 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f308, i32* %r2.global-to-local, align 4
  store i32 %v3_f304, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f314 = load i32, i32* @r5, align 4
  %v1_f314 = add i32 %v0_f314, 4
  %v2_f314 = inttoptr i32 %v1_f314 to i32*
  %v3_f314 = load i32, i32* %v2_f314, align 4
  store i32 %v3_f314, i32* %r0.global-to-local, align 4
  %v4_f318 = inttoptr i32 %v3_f304 to i32*
  %v5_f318 = call i32 @function_10b4c(i32 %v3_f314, i32* %v4_f318, i32 %v3_f308, i32 16384)
  store i32 %v5_f318, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129ac.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f328 = load i32, i32* @r5, align 4
  %v1_f328 = add i32 %v0_f328, 4
  %v2_f328 = inttoptr i32 %v1_f328 to i32*
  %v3_f328 = load i32, i32* %v2_f328, align 4
  store i32 %v3_f328, i32* %r0.global-to-local, align 4
  %v5_f32c = call i32 @function_10b4c(i32 %v3_f328, i32* bitcast ([3 x i8]* @global_var_129ac.500 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f334 = call i32 @function_fa5c(i32 6)
  store i32 %v1_f334, i32* %r0.global-to-local, align 4
  %v0_f338 = load i32, i32* @r5, align 4
  %v1_f338 = add i32 %v0_f338, 24
  %v2_f338 = inttoptr i32 %v1_f338 to i32*
  %v3_f338 = load i32, i32* %v2_f338, align 4
  store i32 %v3_f338, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_f340 = add i32 %v0_f338, 12
  %v3_f340 = inttoptr i32 %v2_f340 to i32*
  store i32 7, i32* %v3_f340, align 4
  br label %dec_label_pc_f534

dec_label_pc_f348:                                ; preds = %dec_label_pc_ef9c
  %v1_f348 = add i32 %v0_ef9c, 24
  %v2_f348 = inttoptr i32 %v1_f348 to i32*
  %v3_f348 = load i32, i32* %v2_f348, align 4
  store i32 %v3_f348, i32* %ip.global-to-local, align 4
  %v1_f34c = add i32 %v3_f348, -1
  store i32 %v1_f34c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f350 = icmp eq i32 %v1_f34c, 0
  store i1 %v2_f350, i1* %cpsr_z.global-to-local, align 1
  %v5_f354 = icmp sgt i32 %v1_f34c, 0
  br i1 %v5_f354, label %dec_label_pc_f37c, label %dec_label_pc_ef20.backedge.thread

dec_label_pc_f35c:                                ; preds = %bb336
  %v2_f35c = icmp ugt i8 %v3_f380, 35
  store i1 %v2_f35c, i1* %cpsr_c.global-to-local, align 1
  %v7_f35c = icmp eq i8 %v3_f380, 36
  store i1 %v7_f35c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f35c, label %dec_label_pc_f390, label %dec_label_pc_f364

dec_label_pc_f364:                                ; preds = %dec_label_pc_f35c
  %v2_f364 = icmp ugt i8 %v3_f380, 34
  store i1 %v2_f364, i1* %cpsr_c.global-to-local, align 1
  %v7_f364 = icmp eq i8 %v3_f380, 35
  store i1 %v7_f364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f364, label %dec_label_pc_f390, label %dec_label_pc_f36c

dec_label_pc_f36c:                                ; preds = %dec_label_pc_f364
  %v2_f36c = icmp ugt i8 %v3_f380, 36
  store i1 %v2_f36c, i1* %cpsr_c.global-to-local, align 1
  %v7_f36c = icmp eq i8 %v3_f380, 37
  store i1 %v7_f36c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f36c, label %dec_label_pc_f390, label %dec_label_pc_f374

dec_label_pc_f374:                                ; preds = %dec_label_pc_f36c
  %v1_f374 = add i32 %v0_f390, -1
  store i32 %v1_f374, i32* %r0.global-to-local, align 4
  %v2_f374 = icmp ne i32 %v0_f390, 0
  store i1 %v2_f374, i1* %cpsr_c.global-to-local, align 1
  %v7_f374 = icmp eq i32 %v0_f390, 1
  store i1 %v7_f374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f374, label %dec_label_pc_ef20.backedge.thread455, label %dec_label_pc_f37c

dec_label_pc_f37c:                                ; preds = %dec_label_pc_f348, %dec_label_pc_f374
  %v0_f390 = phi i32 [ %v1_f374, %dec_label_pc_f374 ], [ %v1_f34c, %dec_label_pc_f348 ]
  %v2_f37c = add i32 %v0_f390, %v0_ef9c
  store i32 %v2_f37c, i32* %r3.global-to-local, align 4
  %v1_f380 = add i32 %v2_f37c, 28
  %v2_f380 = inttoptr i32 %v1_f380 to i8*
  %v3_f380 = load i8, i8* %v2_f380, align 1
  %v4_f380 = zext i8 %v3_f380 to i32
  store i32 %v4_f380, i32* %r3.global-to-local, align 4
  %v2_f384 = icmp ugt i8 %v3_f380, 61
  store i1 %v2_f384, i1* %cpsr_c.global-to-local, align 1
  %v7_f384 = icmp eq i8 %v3_f380, 62
  store i1 %v7_f384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f384, label %dec_label_pc_f390, label %bb336

bb336:                                            ; preds = %dec_label_pc_f37c
  %v3_f388 = icmp ugt i8 %v3_f380, 57
  store i1 %v3_f388, i1* %cpsr_c.global-to-local, align 1
  %v8_f388 = icmp eq i8 %v3_f380, 58
  store i1 %v8_f388, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f388, label %dec_label_pc_f390, label %dec_label_pc_f35c

dec_label_pc_f390:                                ; preds = %dec_label_pc_f37c, %bb336, %dec_label_pc_f36c, %dec_label_pc_f364, %dec_label_pc_f35c
  %v1_f390 = add i32 %v0_f390, 1
  store i32 %v1_f390, i32* @r7, align 4
  %v2_f394 = icmp eq i32 %v1_f390, -1
  store i1 %v2_f394, i1* %cpsr_c.global-to-local, align 1
  %v7_f394 = icmp eq i32 %v0_f390, -2
  store i1 %v7_f394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f394, label %dec_label_pc_ef20.backedge.thread455, label %dec_label_pc_f39c

dec_label_pc_f39c:                                ; preds = %dec_label_pc_f390
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f39c = icmp eq i32 %v1_f390, 0
  store i1 %v2_f39c, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v1_f390, 1
  br i1 %tmp337, label %dec_label_pc_f0a8, label %dec_label_pc_f3a4

dec_label_pc_f3a4:                                ; preds = %dec_label_pc_f39c
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f3a8 = call i32 @function_fb14(i32 7)
  store i32 %v2_eeb8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_f3b8 = call i32 @function_fa30(i32 7, i32* %v2_eec0)
  store i32 %v3_f3b8, i32* %r0.global-to-local, align 4
  %v3_f3bc = load i8, i8* %stack_var_-52, align 1
  %v4_f3bc = sext i8 %v3_f3bc to i32
  store i32 %v4_f3bc, i32* %r2.global-to-local, align 4
  store i32 %v3_f3b8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f3c8 = load i32, i32* @r5, align 4
  %v1_f3c8 = add i32 %v0_f3c8, 4
  %v2_f3c8 = inttoptr i32 %v1_f3c8 to i32*
  %v3_f3c8 = load i32, i32* %v2_f3c8, align 4
  store i32 %v3_f3c8, i32* %r0.global-to-local, align 4
  %v4_f3cc = inttoptr i32 %v3_f3b8 to i32*
  %v5_f3cc = call i32 @function_10b4c(i32 %v3_f3c8, i32* %v4_f3cc, i32 %v4_f3bc, i32 16384)
  store i32 %v5_f3cc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129ac.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f3dc = load i32, i32* @r5, align 4
  %v1_f3dc = add i32 %v0_f3dc, 4
  %v2_f3dc = inttoptr i32 %v1_f3dc to i32*
  %v3_f3dc = load i32, i32* %v2_f3dc, align 4
  store i32 %v3_f3dc, i32* %r0.global-to-local, align 4
  %v5_f3e0 = call i32 @function_10b4c(i32 %v3_f3dc, i32* bitcast ([3 x i8]* @global_var_129ac.500 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f3e8 = call i32 @function_fa5c(i32 7)
  store i32 %v1_f3e8, i32* %r0.global-to-local, align 4
  %v0_f3ec = load i32, i32* @r5, align 4
  %v1_f3ec = add i32 %v0_f3ec, 24
  %v2_f3ec = inttoptr i32 %v1_f3ec to i32*
  %v3_f3ec = load i32, i32* %v2_f3ec, align 4
  store i32 %v3_f3ec, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_f3f4 = add i32 %v0_f3ec, 12
  %v3_f3f4 = inttoptr i32 %v2_f3f4 to i32*
  store i32 9, i32* %v3_f3f4, align 4
  br label %dec_label_pc_f534

dec_label_pc_f3fc:                                ; preds = %dec_label_pc_ef9c
  %v1_f3fc = add i32 %v0_ef9c, 24
  %v2_f3fc = inttoptr i32 %v1_f3fc to i32*
  %v3_f3fc = load i32, i32* %v2_f3fc, align 4
  store i32 %v3_f3fc, i32* %ip.global-to-local, align 4
  %v1_f400 = add i32 %v3_f3fc, -1
  store i32 %v1_f400, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f404 = icmp eq i32 %v1_f400, 0
  store i1 %v2_f404, i1* %cpsr_z.global-to-local, align 1
  %v5_f408 = icmp sgt i32 %v1_f400, 0
  br i1 %v5_f408, label %dec_label_pc_f430, label %dec_label_pc_ef20.backedge.thread

dec_label_pc_f410:                                ; preds = %bb338
  %v2_f410 = icmp ugt i8 %v3_f434, 35
  store i1 %v2_f410, i1* %cpsr_c.global-to-local, align 1
  %v7_f410 = icmp eq i8 %v3_f434, 36
  store i1 %v7_f410, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f410, label %dec_label_pc_f444, label %dec_label_pc_f418

dec_label_pc_f418:                                ; preds = %dec_label_pc_f410
  %v2_f418 = icmp ugt i8 %v3_f434, 34
  store i1 %v2_f418, i1* %cpsr_c.global-to-local, align 1
  %v7_f418 = icmp eq i8 %v3_f434, 35
  store i1 %v7_f418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f418, label %dec_label_pc_f444, label %dec_label_pc_f420

dec_label_pc_f420:                                ; preds = %dec_label_pc_f418
  %v2_f420 = icmp ugt i8 %v3_f434, 36
  store i1 %v2_f420, i1* %cpsr_c.global-to-local, align 1
  %v7_f420 = icmp eq i8 %v3_f434, 37
  store i1 %v7_f420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f420, label %dec_label_pc_f444, label %dec_label_pc_f428

dec_label_pc_f428:                                ; preds = %dec_label_pc_f420
  %v1_f428 = add i32 %v0_f444, -1
  store i32 %v1_f428, i32* %r0.global-to-local, align 4
  %v2_f428 = icmp ne i32 %v0_f444, 0
  store i1 %v2_f428, i1* %cpsr_c.global-to-local, align 1
  %v7_f428 = icmp eq i32 %v0_f444, 1
  store i1 %v7_f428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f428, label %dec_label_pc_ef20.backedge.thread455, label %dec_label_pc_f430

dec_label_pc_f430:                                ; preds = %dec_label_pc_f3fc, %dec_label_pc_f428
  %v0_f444 = phi i32 [ %v1_f428, %dec_label_pc_f428 ], [ %v1_f400, %dec_label_pc_f3fc ]
  %v2_f430 = add i32 %v0_f444, %v0_ef9c
  store i32 %v2_f430, i32* %r3.global-to-local, align 4
  %v1_f434 = add i32 %v2_f430, 28
  %v2_f434 = inttoptr i32 %v1_f434 to i8*
  %v3_f434 = load i8, i8* %v2_f434, align 1
  %v4_f434 = zext i8 %v3_f434 to i32
  store i32 %v4_f434, i32* %r3.global-to-local, align 4
  %v2_f438 = icmp ugt i8 %v3_f434, 61
  store i1 %v2_f438, i1* %cpsr_c.global-to-local, align 1
  %v7_f438 = icmp eq i8 %v3_f434, 62
  store i1 %v7_f438, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f438, label %dec_label_pc_f444, label %bb338

bb338:                                            ; preds = %dec_label_pc_f430
  %v3_f43c = icmp ugt i8 %v3_f434, 57
  store i1 %v3_f43c, i1* %cpsr_c.global-to-local, align 1
  %v8_f43c = icmp eq i8 %v3_f434, 58
  store i1 %v8_f43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f43c, label %dec_label_pc_f444, label %dec_label_pc_f410

dec_label_pc_f444:                                ; preds = %dec_label_pc_f430, %bb338, %dec_label_pc_f420, %dec_label_pc_f418, %dec_label_pc_f410
  %v1_f444 = add i32 %v0_f444, 1
  store i32 %v1_f444, i32* @r7, align 4
  %v2_f448 = icmp eq i32 %v1_f444, -1
  store i1 %v2_f448, i1* %cpsr_c.global-to-local, align 1
  %v7_f448 = icmp eq i32 %v0_f444, -2
  store i1 %v7_f448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f448, label %dec_label_pc_ef20.backedge.thread455, label %dec_label_pc_f450

dec_label_pc_f450:                                ; preds = %dec_label_pc_f444
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f450 = icmp eq i32 %v1_f444, 0
  store i1 %v2_f450, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v1_f444, 1
  br i1 %tmp339, label %dec_label_pc_f0a8, label %dec_label_pc_f458

dec_label_pc_f458:                                ; preds = %dec_label_pc_f450
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f45c = call i32 @function_fb14(i32 4)
  store i32 %v2_eecc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_f46c = call i32 @function_fa30(i32 4, i32* nonnull %stack_var_-56)
  store i32 %v3_f46c, i32* %r0.global-to-local, align 4
  %v3_f470 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f470, i32* %r2.global-to-local, align 4
  store i32 %v3_f46c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f47c = load i32, i32* @r5, align 4
  %v1_f47c = add i32 %v0_f47c, 4
  %v2_f47c = inttoptr i32 %v1_f47c to i32*
  %v3_f47c = load i32, i32* %v2_f47c, align 4
  store i32 %v3_f47c, i32* %r0.global-to-local, align 4
  %v4_f480 = inttoptr i32 %v3_f46c to i32*
  %v5_f480 = call i32 @function_10b4c(i32 %v3_f47c, i32* %v4_f480, i32 %v3_f470, i32 16384)
  store i32 %v5_f480, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129ac.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f490 = load i32, i32* @r5, align 4
  %v1_f490 = add i32 %v0_f490, 4
  %v2_f490 = inttoptr i32 %v1_f490 to i32*
  %v3_f490 = load i32, i32* %v2_f490, align 4
  store i32 %v3_f490, i32* %r0.global-to-local, align 4
  %v5_f494 = call i32 @function_10b4c(i32 %v3_f490, i32* bitcast ([3 x i8]* @global_var_129ac.500 to i32*), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f49c = call i32 @function_fa5c(i32 4)
  store i32 %v1_f49c, i32* %r0.global-to-local, align 4
  %v0_f4a0 = load i32, i32* @r5, align 4
  %v1_f4a0 = add i32 %v0_f4a0, 24
  %v2_f4a0 = inttoptr i32 %v1_f4a0 to i32*
  %v3_f4a0 = load i32, i32* %v2_f4a0, align 4
  store i32 %v3_f4a0, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_f4a8 = add i32 %v0_f4a0, 12
  %v3_f4a8 = inttoptr i32 %v2_f4a8 to i32*
  store i32 8, i32* %v3_f4a8, align 4
  br label %dec_label_pc_f534

dec_label_pc_f4b0:                                ; preds = %dec_label_pc_ef9c
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f4b4 = call i32 @function_fb14(i32 10)
  store i32 %v2_eeb8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_f4c4 = call i32 @function_fa30(i32 10, i32* %v2_eec0)
  %v3_f4c8 = load i8, i8* %stack_var_-52, align 1
  %v4_f4c8 = sext i8 %v3_f4c8 to i32
  store i32 %v3_f4c4, i32* %r2.global-to-local, align 4
  %v1_f4d0 = add nsw i32 %v4_f4c8, -1
  store i32 %v1_f4d0, i32* %r3.global-to-local, align 4
  %v0_f4d4 = load i32, i32* @sl, align 4
  store i32 %v0_f4d4, i32* %r0.global-to-local, align 4
  %v0_f4d8 = load i32, i32* @r5, align 4
  %v1_f4d8 = add i32 %v0_f4d8, 24
  %v2_f4d8 = inttoptr i32 %v1_f4d8 to i32*
  %v3_f4d8 = load i32, i32* %v2_f4d8, align 4
  store i32 %v3_f4d8, i32* %r1.global-to-local, align 4
  %v4_f4dc = call i32 @function_fffc(i32 %v0_f4d4, i32 %v3_f4d8, i32 %v3_f4c4, i32 %v1_f4d0)
  %v2_f4e0 = icmp eq i32 %v4_f4dc, -1
  store i1 %v2_f4e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f4e0 = icmp eq i32 %v4_f4dc, -1
  store i1 %v7_f4e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_f4dc, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f6cc = call i32 @function_fa5c(i32 10)
  br i1 %v7_f4e0, label %dec_label_pc_f6c8, label %dec_label_pc_f4ec

dec_label_pc_f4ec:                                ; preds = %dec_label_pc_f4b0
  store i32 %v1_f6cc, i32* %r0.global-to-local, align 4
  %v0_f4f4 = load i32, i32* @r5, align 4
  %v1_f4f4 = add i32 %v0_f4f4, 4
  %v2_f4f4 = inttoptr i32 %v1_f4f4 to i32*
  %v3_f4f4 = load i32, i32* %v2_f4f4, align 4
  store i32 %v3_f4f4, i32* %r0.global-to-local, align 4
  %v1_f4f8 = call i32 @function_10640(i32 %v3_f4f4)
  store i32 %v1_f4f8, i32* %r0.global-to-local, align 4
  %v0_f4fc = load i32, i32* @r5, align 4
  %v1_f4fc = add i32 %v0_f4fc, 284
  %v2_f4fc = inttoptr i32 %v1_f4fc to i8*
  %v3_f4fc = load i8, i8* %v2_f4fc, align 1
  %v4_f4fc = zext i8 %v3_f4fc to i32
  %v1_f500 = add nuw nsw i32 %v4_f4fc, 1
  %v1_f504 = urem i32 %v1_f500, 256
  store i32 %v1_f504, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_f50c = icmp ugt i32 %v1_f504, 9
  store i1 %v2_f50c, i1* %cpsr_c.global-to-local, align 1
  %v7_f50c = icmp eq i32 %v1_f504, 10
  store i1 %v7_f50c, i1* %cpsr_z.global-to-local, align 1
  %v2_f510 = add i32 %v0_f4fc, 4
  %v3_f510 = inttoptr i32 %v2_f510 to i32*
  store i32 -1, i32* %v3_f510, align 4
  %v0_f514 = load i32, i32* %r3.global-to-local, align 4
  %v1_f514 = trunc i32 %v0_f514 to i8
  %v2_f514 = load i32, i32* @r5, align 4
  %v3_f514 = add i32 %v2_f514, 284
  %v4_f514 = inttoptr i32 %v3_f514 to i8*
  store i8 %v1_f514, i8* %v4_f514, align 1
  %v0_f518 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f518, label %dec_label_pc_f51c, label %dec_label_pc_f828

dec_label_pc_f51c:                                ; preds = %dec_label_pc_f4ec
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_f524 = load i32, i32* @r5, align 4
  %v1_f524 = add i32 %v0_f524, 24
  %v2_f524 = inttoptr i32 %v1_f524 to i32*
  %v3_f524 = load i32, i32* %v2_f524, align 4
  store i32 %v3_f524, i32* %ip.global-to-local, align 4
  %v3_f528 = add i32 %v0_f524, 284
  %v4_f528 = inttoptr i32 %v3_f528 to i8*
  store i8 0, i8* %v4_f528, align 1
  %v0_f52c = load i32, i32* %r0.global-to-local, align 4
  %v1_f52c = load i32, i32* @r5, align 4
  %v2_f52c = add i32 %v1_f52c, 12
  %v3_f52c = inttoptr i32 %v2_f52c to i32*
  store i32 %v0_f52c, i32* %v3_f52c, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_f534

dec_label_pc_f534:                                ; preds = %.thread223, %dec_label_pc_f5b4, %dec_label_pc_f828, %dec_label_pc_f764, %dec_label_pc_f458, %dec_label_pc_f3a4, %dec_label_pc_f2f0, %dec_label_pc_f23c, %dec_label_pc_f1a4, %dec_label_pc_f114, %dec_label_pc_f0b0, %dec_label_pc_f51c
  %v0_f534 = load i32, i32* %ip.global-to-local, align 4
  %v1_f534 = load i32, i32* @r7, align 4
  %v2_f534 = sub i32 %v0_f534, %v1_f534
  %v3_f534 = icmp uge i32 %v0_f534, %v1_f534
  store i1 %v3_f534, i1* %cpsr_c.global-to-local, align 1
  %v4_f534 = xor i32 %v1_f534, %v0_f534
  %v5_f534 = xor i32 %v2_f534, %v0_f534
  %v6_f534 = and i32 %v5_f534, %v4_f534
  %v7_f534 = icmp slt i32 %v6_f534, 0
  %v8_f534 = icmp slt i32 %v2_f534, 0
  %v9_f534 = icmp eq i32 %v0_f534, %v1_f534
  store i1 %v9_f534, i1* %cpsr_z.global-to-local, align 1
  %v2_f538 = xor i1 %v8_f534, %v7_f534
  %v0_f534.v1_f534 = select i1 %v2_f538, i32 %v0_f534, i32 %v1_f534
  store i32 %v0_f534.v1_f534, i32* %r1.global-to-local, align 4
  %v2_f540 = sub i32 %v0_f534, %v0_f534.v1_f534
  store i32 %v2_f540, i32* @r2, align 4
  %v1_f544 = load i32, i32* @r5, align 4
  %v2_f544 = add i32 %v1_f544, 24
  %v3_f544 = inttoptr i32 %v2_f544 to i32*
  store i32 %v2_f540, i32* %v3_f544, align 4
  %v0_f548 = load i32, i32* @sl, align 4
  %v1_f548 = load i32, i32* %r1.global-to-local, align 4
  %v2_f548 = add i32 %v1_f548, %v0_f548
  store i32 %v2_f548, i32* @r1, align 4
  store i32 %v0_f548, i32* @r0, align 4
  %v3_f550 = call i32 @function_10990(i32 %v0_f548, i32 %v2_f548, i32 %v2_f540)
  store i32 %v3_f550, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef9c

dec_label_pc_f558:                                ; preds = %dec_label_pc_ef9c
  %v1_f558 = add i32 %v0_ef9c, 24
  %v2_f558 = inttoptr i32 %v1_f558 to i32*
  %v3_f558 = load i32, i32* %v2_f558, align 4
  store i32 %v3_f558, i32* %ip.global-to-local, align 4
  %v1_f55c = add i32 %v3_f558, -1
  store i32 %v1_f55c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f560 = icmp eq i32 %v1_f55c, 0
  store i1 %v2_f560, i1* %cpsr_z.global-to-local, align 1
  %v5_f564 = icmp sgt i32 %v1_f55c, 0
  br i1 %v5_f564, label %dec_label_pc_f58c, label %dec_label_pc_ef20.backedge.thread

dec_label_pc_f56c:                                ; preds = %bb342
  %v2_f56c = icmp ugt i8 %v3_f590, 35
  store i1 %v2_f56c, i1* %cpsr_c.global-to-local, align 1
  %v7_f56c = icmp eq i8 %v3_f590, 36
  store i1 %v7_f56c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f56c, label %dec_label_pc_f5a0, label %dec_label_pc_f574

dec_label_pc_f574:                                ; preds = %dec_label_pc_f56c
  %v2_f574 = icmp ugt i8 %v3_f590, 34
  store i1 %v2_f574, i1* %cpsr_c.global-to-local, align 1
  %v7_f574 = icmp eq i8 %v3_f590, 35
  store i1 %v7_f574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f574, label %dec_label_pc_f5a0, label %dec_label_pc_f57c

dec_label_pc_f57c:                                ; preds = %dec_label_pc_f574
  %v2_f57c = icmp ugt i8 %v3_f590, 36
  store i1 %v2_f57c, i1* %cpsr_c.global-to-local, align 1
  %v7_f57c = icmp eq i8 %v3_f590, 37
  store i1 %v7_f57c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f57c, label %dec_label_pc_f5a0, label %dec_label_pc_f584

dec_label_pc_f584:                                ; preds = %dec_label_pc_f57c
  %v1_f584 = add i32 %v0_f5a0, -1
  store i32 %v1_f584, i32* %r0.global-to-local, align 4
  %v2_f584 = icmp ne i32 %v0_f5a0, 0
  store i1 %v2_f584, i1* %cpsr_c.global-to-local, align 1
  %v7_f584 = icmp eq i32 %v0_f5a0, 1
  store i1 %v7_f584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f584, label %dec_label_pc_ef20.backedge.thread455, label %dec_label_pc_f58c

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f558, %dec_label_pc_f584
  %v0_f5a0 = phi i32 [ %v1_f584, %dec_label_pc_f584 ], [ %v1_f55c, %dec_label_pc_f558 ]
  %v2_f58c = add i32 %v0_f5a0, %v0_ef9c
  store i32 %v2_f58c, i32* %r3.global-to-local, align 4
  %v1_f590 = add i32 %v2_f58c, 28
  %v2_f590 = inttoptr i32 %v1_f590 to i8*
  %v3_f590 = load i8, i8* %v2_f590, align 1
  %v4_f590 = zext i8 %v3_f590 to i32
  store i32 %v4_f590, i32* %r3.global-to-local, align 4
  %v2_f594 = icmp ugt i8 %v3_f590, 61
  store i1 %v2_f594, i1* %cpsr_c.global-to-local, align 1
  %v7_f594 = icmp eq i8 %v3_f590, 62
  store i1 %v7_f594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f594, label %dec_label_pc_f5a0, label %bb342

bb342:                                            ; preds = %dec_label_pc_f58c
  %v3_f598 = icmp ugt i8 %v3_f590, 57
  store i1 %v3_f598, i1* %cpsr_c.global-to-local, align 1
  %v8_f598 = icmp eq i8 %v3_f590, 58
  store i1 %v8_f598, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f598, label %dec_label_pc_f5a0, label %dec_label_pc_f56c

dec_label_pc_f5a0:                                ; preds = %dec_label_pc_f58c, %bb342, %dec_label_pc_f57c, %dec_label_pc_f574, %dec_label_pc_f56c
  %v1_f5a0 = add i32 %v0_f5a0, 1
  store i32 %v1_f5a0, i32* @r7, align 4
  %v2_f5a4 = icmp eq i32 %v1_f5a0, -1
  store i1 %v2_f5a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5a4 = icmp eq i32 %v0_f5a0, -2
  store i1 %v7_f5a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5a4, label %dec_label_pc_ef20.backedge.thread455, label %dec_label_pc_f5ac

dec_label_pc_f5ac:                                ; preds = %dec_label_pc_f5a0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5ac = icmp eq i32 %v1_f5a0, 0
  store i1 %v2_f5ac, i1* %cpsr_z.global-to-local, align 1
  %tmp343 = icmp slt i32 %v1_f5a0, 1
  br i1 %tmp343, label %dec_label_pc_f0a8, label %dec_label_pc_f5b4

dec_label_pc_f5b4:                                ; preds = %dec_label_pc_f5ac
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f5b8 = call i32 @function_fb14(i32 8)
  store i32 %v2_eeb8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_f5c8 = call i32 @function_fa30(i32 8, i32* %v2_eec0)
  store i32 %v3_f5c8, i32* %r0.global-to-local, align 4
  %v3_f5cc = load i8, i8* %stack_var_-52, align 1
  %v4_f5cc = sext i8 %v3_f5cc to i32
  store i32 %v4_f5cc, i32* %r2.global-to-local, align 4
  store i32 %v3_f5c8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f5d8 = load i32, i32* @r5, align 4
  %v1_f5d8 = add i32 %v0_f5d8, 4
  %v2_f5d8 = inttoptr i32 %v1_f5d8 to i32*
  %v3_f5d8 = load i32, i32* %v2_f5d8, align 4
  store i32 %v3_f5d8, i32* %r0.global-to-local, align 4
  %v4_f5dc = inttoptr i32 %v3_f5c8 to i32*
  %v5_f5dc = call i32 @function_10b4c(i32 %v3_f5d8, i32* %v4_f5dc, i32 %v4_f5cc, i32 16384)
  store i32 %v5_f5dc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129ac.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f5ec = load i32, i32* @r5, align 4
  %v1_f5ec = add i32 %v0_f5ec, 4
  %v2_f5ec = inttoptr i32 %v1_f5ec to i32*
  %v3_f5ec = load i32, i32* %v2_f5ec, align 4
  store i32 %v3_f5ec, i32* %r0.global-to-local, align 4
  %v5_f5f0 = call i32 @function_10b4c(i32 %v3_f5ec, i32* bitcast ([3 x i8]* @global_var_129ac.500 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f5f8 = call i32 @function_fa5c(i32 8)
  store i32 %v1_f5f8, i32* %r0.global-to-local, align 4
  %v0_f5fc = load i32, i32* @r5, align 4
  %v1_f5fc = add i32 %v0_f5fc, 24
  %v2_f5fc = inttoptr i32 %v1_f5fc to i32*
  %v3_f5fc = load i32, i32* %v2_f5fc, align 4
  store i32 %v3_f5fc, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_f604 = add i32 %v0_f5fc, 12
  %v3_f604 = inttoptr i32 %v2_f604 to i32*
  store i32 10, i32* %v3_f604, align 4
  br label %dec_label_pc_f534

dec_label_pc_f60c:                                ; preds = %dec_label_pc_f020
  store i32 ptrtoint (i32* @global_var_129b8.502 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f618, i32* @r0, align 4
  %v3_f61c = call i32 @function_10980(i32 %v2_f618, i32 ptrtoint (i32* @global_var_129b8.502 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_f628, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_129af.504 to i32), i32* @r1, align 4
  %v3_f630 = call i32 @function_10980(i32 %v2_f628, i32 ptrtoint (i32* @global_var_129af.504 to i32), i32 9)
  store i32 %v3_f630, i32* %r0.global-to-local, align 4
  %v0_f634 = load i32, i32* @r5, align 4
  %v1_f634 = add i32 %v0_f634, 24
  %v2_f634 = inttoptr i32 %v1_f634 to i32*
  %v3_f634 = load i32, i32* %v2_f634, align 4
  store i32 %v3_f634, i32* %ip.global-to-local, align 4
  %v0_f638 = load i32, i32* @r6, align 4
  %v1_f638 = add i32 %v0_f638, 2
  store i32 %v1_f638, i32* %r2.global-to-local, align 4
  %v0_f63c = load i32, i32* @sl, align 4
  %v2_f63c = add i32 %v0_f63c, %v3_f634
  store i32 %v2_f63c, i32* %r3.global-to-local, align 4
  %v3_f640 = icmp uge i32 %v2_f63c, %v1_f638
  store i1 %v3_f640, i1* %cpsr_c.global-to-local, align 1
  %v9_f640 = icmp eq i32 %v2_f63c, %v1_f638
  store i1 %v9_f640, i1* %cpsr_z.global-to-local, align 1
  %v2_f644 = xor i1 %v3_f640, true
  %v3_f644 = or i1 %v9_f640, %v2_f644
  br i1 %v3_f644, label %dec_label_pc_f60c.dec_label_pc_f098.loopexit_crit_edge, label %dec_label_pc_f648

dec_label_pc_f60c.dec_label_pc_f098.loopexit_crit_edge: ; preds = %dec_label_pc_f60c
  %v0_f098.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f098

dec_label_pc_f648:                                ; preds = %dec_label_pc_f60c
  %v0_f648 = load i32, i32* @r4, align 4
  %v1_f648 = add i32 %v0_f648, 1
  %v2_f648 = inttoptr i32 %v1_f648 to i8*
  %v3_f648 = load i8, i8* %v2_f648, align 1
  %v4_f648 = zext i8 %v3_f648 to i32
  store i32 %v4_f648, i32* %r3.global-to-local, align 4
  %v2_f64c = icmp ugt i8 %v3_f648, 30
  store i1 %v2_f64c, i1* %cpsr_c.global-to-local, align 1
  %v7_f64c = icmp eq i8 %v3_f648, 31
  store i1 %v7_f64c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f64c, label %dec_label_pc_f7d8, label %dec_label_pc_f654

dec_label_pc_f654:                                ; preds = %dec_label_pc_f648
  %v1_f654 = add i32 %v0_f648, -1
  %v2_f654 = inttoptr i32 %v1_f654 to i8*
  %v3_f654 = load i8, i8* %v2_f654, align 1
  %v4_f654 = zext i8 %v3_f654 to i32
  store i32 %v4_f654, i32* %r3.global-to-local, align 4
  %v2_f658 = icmp ugt i8 %v3_f654, -4
  store i1 %v2_f658, i1* %cpsr_c.global-to-local, align 1
  %v7_f658 = icmp eq i8 %v3_f654, -3
  store i1 %v7_f658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f658, label %.thread75, label %dec_label_pc_f668

.thread75:                                        ; preds = %dec_label_pc_f654
  store i32 -4, i32* %r2.global-to-local, align 4
  store i8 -4, i8* %v2_f654, align 1
  %v0_f664.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f664.pr.pr, label %dec_label_pc_f034, label %.thread75.dec_label_pc_f668_crit_edge

.thread75.dec_label_pc_f668_crit_edge:            ; preds = %.thread75
  %v0_f668.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f668

dec_label_pc_f668:                                ; preds = %.thread75.dec_label_pc_f668_crit_edge, %dec_label_pc_f654
  %v0_f668 = phi i32 [ %v0_f668.pre, %.thread75.dec_label_pc_f668_crit_edge ], [ %v4_f654, %dec_label_pc_f654 ]
  %v2_f668 = icmp ugt i32 %v0_f668, 250
  store i1 %v2_f668, i1* %cpsr_c.global-to-local, align 1
  %v7_f668 = icmp eq i32 %v0_f668, 251
  store i1 %v7_f668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f668, label %bb344, label %dec_label_pc_f034

bb344:                                            ; preds = %dec_label_pc_f668
  %v1_f66c = load i32, i32* %r8.global-to-local, align 4
  %v2_f66c = trunc i32 %v1_f66c to i8
  %v3_f66c = load i32, i32* @r4, align 4
  %v4_f66c = add i32 %v3_f66c, -1
  %v5_f66c = inttoptr i32 %v4_f66c to i8*
  store i8 %v2_f66c, i8* %v5_f66c, align 1
  br label %dec_label_pc_f034

dec_label_pc_f674:                                ; preds = %dec_label_pc_f174, %dec_label_pc_f150, %dec_label_pc_f190
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f678 = call i32 @function_fb14(i32 11)
  store i32 %v2_eeb8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_f688 = call i32 @function_fa30(i32 11, i32* %v2_eec0)
  %v3_f68c = load i8, i8* %stack_var_-52, align 1
  %v4_f68c = sext i8 %v3_f68c to i32
  store i32 %v3_f688, i32* %r2.global-to-local, align 4
  %v1_f694 = add nsw i32 %v4_f68c, -1
  store i32 %v1_f694, i32* %r3.global-to-local, align 4
  %v0_f698 = load i32, i32* @sl, align 4
  store i32 %v0_f698, i32* %r0.global-to-local, align 4
  %v0_f69c = load i32, i32* @r5, align 4
  %v1_f69c = add i32 %v0_f69c, 24
  %v2_f69c = inttoptr i32 %v1_f69c to i32*
  %v3_f69c = load i32, i32* %v2_f69c, align 4
  store i32 %v3_f69c, i32* %r1.global-to-local, align 4
  %v4_f6a0 = call i32 @function_fffc(i32 %v0_f698, i32 %v3_f69c, i32 %v3_f688, i32 %v1_f694)
  store i32 %v4_f6a0, i32* %r0.global-to-local, align 4
  %v1_f6a4 = add i32 %v4_f6a0, 1
  store i32 %v1_f6a4, i32* @r7, align 4
  %v2_f6a4 = icmp eq i32 %v4_f6a0, -1
  store i1 %v2_f6a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6a4 = icmp eq i32 %v1_f6a4, 0
  store i1 %v7_f6a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6a4, label %thread-pre-split78, label %bb345

bb345:                                            ; preds = %dec_label_pc_f674
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split78

thread-pre-split78:                               ; preds = %dec_label_pc_f674, %bb345
  %v0_f6ac = phi i1 [ false, %bb345 ], [ true, %dec_label_pc_f674 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f6ac, i1* %cpsr_z.global-to-local, align 1
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f840 = call i32 @function_fa5c(i32 11)
  store i32 %v1_f840, i32* %r0.global-to-local, align 4
  br i1 %v0_f6ac, label %dec_label_pc_f83c, label %dec_label_pc_f6b4

dec_label_pc_f6b4:                                ; preds = %thread-pre-split78
  %v0_f6bc = load i32, i32* @r7, align 4
  %v3_f6bc = icmp eq i32 %v0_f6bc, -1
  store i1 %v3_f6bc, i1* %cpsr_c.global-to-local, align 1
  %v8_f6bc = icmp eq i32 %v0_f6bc, -1
  store i1 %v8_f6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f6bc, label %dec_label_pc_ef1c.loopexit, label %dec_label_pc_f19c

dec_label_pc_f6c8:                                ; preds = %dec_label_pc_f4b0
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f6d4 = call i32 @function_fb14(i32 9)
  store i32 %v2_eeb8, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f6e4 = call i32 @function_fa30(i32 9, i32* nonnull %v2_eec0)
  store i32 %v3_f6e4, i32* %r0.global-to-local, align 4
  %v3_f6e8 = load i8, i8* %stack_var_-52, align 1
  %v4_f6e8 = sext i8 %v3_f6e8 to i32
  store i32 %v3_f6e4, i32* %r2.global-to-local, align 4
  %v1_f6f0 = add nsw i32 %v4_f6e8, -1
  store i32 %v1_f6f0, i32* %r3.global-to-local, align 4
  %v0_f6f4 = load i32, i32* @r5, align 4
  %v1_f6f4 = add i32 %v0_f6f4, 24
  %v2_f6f4 = inttoptr i32 %v1_f6f4 to i32*
  %v3_f6f4 = load i32, i32* %v2_f6f4, align 4
  store i32 %v3_f6f4, i32* %r1.global-to-local, align 4
  %v0_f6f8 = load i32, i32* @sl, align 4
  store i32 %v0_f6f8, i32* %r0.global-to-local, align 4
  %v4_f6fc = call i32 @function_fffc(i32 %v0_f6f8, i32 %v3_f6f4, i32 %v3_f6e4, i32 %v1_f6f0)
  %sext6 = mul i32 %v4_f6fc, 16777216
  %v1_f700 = sdiv i32 %sext6, 16777216
  store i32 %v1_f700, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f708 = call i32 @function_fa5c(i32 9)
  store i32 %v1_f708, i32* %r0.global-to-local, align 4
  %v0_f70c = load i32, i32* @r7, align 4
  %v2_f70c = icmp eq i32 %v0_f70c, -1
  store i1 %v2_f70c, i1* %cpsr_c.global-to-local, align 1
  %v7_f70c = icmp eq i32 %v0_f70c, -1
  store i1 %v7_f70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f70c, label %dec_label_pc_ef1c.loopexit, label %dec_label_pc_f714

dec_label_pc_f714:                                ; preds = %dec_label_pc_f6c8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f714 = icmp eq i32 %v0_f70c, 0
  store i1 %v2_f714, i1* %cpsr_z.global-to-local, align 1
  %tmp346 = icmp slt i32 %v0_f70c, 1
  br i1 %tmp346, label %dec_label_pc_f0a8, label %dec_label_pc_f71c

dec_label_pc_f71c:                                ; preds = %dec_label_pc_f714
  %v0_f71c = load i32, i32* @r5, align 4
  %v1_f71c = add i32 %v0_f71c, 21
  %v2_f71c = inttoptr i32 %v1_f71c to i8*
  %v3_f71c = load i8, i8* %v2_f71c, align 1
  %v4_f71c = zext i8 %v3_f71c to i32
  store i32 %v4_f71c, i32* %r3.global-to-local, align 4
  %v1_f720 = add i32 %v0_f71c, 20
  %v2_f720 = inttoptr i32 %v1_f720 to i8*
  %v3_f720 = load i8, i8* %v2_f720, align 1
  %v4_f720 = zext i8 %v3_f720 to i32
  store i32 %v4_f720, i32* %r2.global-to-local, align 4
  %v1_f724 = add i32 %v0_f71c, 16
  %v2_f724 = inttoptr i32 %v1_f724 to i32*
  %v3_f724 = load i32, i32* %v2_f724, align 4
  store i32 %v3_f724, i32* %r1.global-to-local, align 4
  %v4_f728 = mul nuw nsw i32 %v4_f71c, 256
  %v5_f728 = or i32 %v4_f720, %v4_f728
  store i32 %v5_f728, i32* %r2.global-to-local, align 4
  %v1_f72c = and i32 %v4_f720, 128
  %v2_f72c = icmp ne i32 %v1_f72c, 0
  store i1 %v2_f72c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_f71c, i32* %r3.global-to-local, align 4
  store i32 %v3_f724, i32* %stack_var_-56, align 4
  store i32 %v5_f728, i32* %stack_var_-38, align 4
  %v1_f73c = inttoptr i32 %v0_f71c to i32*
  %v2_f73c = load i32, i32* %v1_f73c, align 4
  store i32 %v2_f73c, i32* %r8.global-to-local, align 4
  %v0_f740 = call i32 @function_1066c()
  store i32 %v0_f740, i32* %r0.global-to-local, align 4
  %v7_f744 = icmp eq i32 %v0_f740, -1
  %.357 = zext i1 %v7_f744 to i32
  store i32 %.357, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f750 = icmp eq i32 %v0_f740, 0
  store i1 %v2_f750, i1* %cpsr_z.global-to-local, align 1
  %tmp349 = icmp slt i32 %v0_f740, 1
  br i1 %tmp349, label %bb350, label %.thread81

.thread81:                                        ; preds = %dec_label_pc_f71c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f764

bb350:                                            ; preds = %dec_label_pc_f71c
  store i32 %.357, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f75c = icmp eq i1 %v7_f744, false
  store i1 %v2_f75c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f75c, label %dec_label_pc_f88c, label %dec_label_pc_f764

dec_label_pc_f764:                                ; preds = %.thread81, %bb350
  %v0_f764 = load i32, i32* @r5, align 4
  %v1_f764 = add i32 %v0_f764, 4
  %v2_f764 = inttoptr i32 %v1_f764 to i32*
  %v3_f764 = load i32, i32* %v2_f764, align 4
  store i32 %v3_f764, i32* %r0.global-to-local, align 4
  %v1_f768 = call i32 @function_10640(i32 %v3_f764)
  store i32 %v1_f768, i32* %r0.global-to-local, align 4
  %v0_f76c = load i32, i32* @r5, align 4
  %v1_f76c = add i32 %v0_f76c, 24
  %v2_f76c = inttoptr i32 %v1_f76c to i32*
  %v3_f76c = load i32, i32* %v2_f76c, align 4
  store i32 %v3_f76c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_f774 = load i32, i32* @r4, align 4
  %v2_f774 = add i32 %v0_f76c, 4
  %v3_f774 = inttoptr i32 %v2_f774 to i32*
  store i32 %v0_f774, i32* %v3_f774, align 4
  %v0_f778 = load i32, i32* %r2.global-to-local, align 4
  %v1_f778 = load i32, i32* @r5, align 4
  %v2_f778 = add i32 %v1_f778, 12
  %v3_f778 = inttoptr i32 %v2_f778 to i32*
  store i32 %v0_f778, i32* %v3_f778, align 4
  br label %dec_label_pc_f534

dec_label_pc_f780:                                ; preds = %dec_label_pc_ef38
  br i1 %v2_ef5c, label %dec_label_pc_f978, label %dec_label_pc_f784

dec_label_pc_f784:                                ; preds = %dec_label_pc_f780
  %v3_f784 = icmp eq i32 %v5_ef58, -1
  store i1 %v3_f784, i1* %cpsr_c.global-to-local, align 1
  %v8_f784 = icmp eq i32 %v5_ef58, -1
  store i1 %v8_f784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f784, label %dec_label_pc_f78c, label %dec_label_pc_ef84

dec_label_pc_f78c:                                ; preds = %dec_label_pc_f784
  %v0_f78c = load i32, i32* @sb, align 4
  %v1_f78c = inttoptr i32 %v0_f78c to i32*
  %v2_f78c = load i32, i32* %v1_f78c, align 4
  store i32 %v2_f78c, i32* %r3.global-to-local, align 4
  %v2_f790 = icmp ugt i32 %v2_f78c, 10
  store i1 %v2_f790, i1* %cpsr_c.global-to-local, align 1
  %v7_f790 = icmp eq i32 %v2_f78c, 11
  store i1 %v7_f790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f790, label %dec_label_pc_ed6c, label %dec_label_pc_f798

dec_label_pc_f798:                                ; preds = %dec_label_pc_f78c, %dec_label_pc_f978
  %v0_f798 = load i32, i32* @r5, align 4
  %v1_f798 = add i32 %v0_f798, 4
  %v2_f798 = inttoptr i32 %v1_f798 to i32*
  %v3_f798 = load i32, i32* %v2_f798, align 4
  store i32 %v3_f798, i32* %r0.global-to-local, align 4
  %v1_f79c = call i32 @function_10640(i32 %v3_f798)
  store i32 %v1_f79c, i32* %r0.global-to-local, align 4
  %v0_f7a0 = load i32, i32* @r5, align 4
  %v1_f7a0 = add i32 %v0_f7a0, 284
  %v2_f7a0 = inttoptr i32 %v1_f7a0 to i8*
  %v3_f7a0 = load i8, i8* %v2_f7a0, align 1
  %v4_f7a0 = zext i8 %v3_f7a0 to i32
  %v1_f7a4 = add nuw nsw i32 %v4_f7a0, 1
  %v1_f7a8 = urem i32 %v1_f7a4, 256
  store i32 %v1_f7a8, i32* %r3.global-to-local, align 4
  %v2_f7ac = icmp ugt i32 %v1_f7a8, 8
  store i1 %v2_f7ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f7ac = icmp eq i32 %v1_f7a8, 9
  store i1 %v7_f7ac, i1* %cpsr_z.global-to-local, align 1
  %v2_f7b0 = xor i1 %v7_f7ac, true
  %v3_f7b0 = and i1 %v2_f7ac, %v2_f7b0
  br i1 %v3_f7b0, label %bb351, label %bb352

bb351:                                            ; preds = %dec_label_pc_f798
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb352

bb352:                                            ; preds = %dec_label_pc_f798, %bb351
  store i32 -1, i32* @r4, align 4
  %v1_f7b8 = trunc i32 %v1_f7a4 to i8
  store i8 %v1_f7b8, i8* %v2_f7a0, align 1
  %v0_f7bc = load i32, i32* @r4, align 4
  %v1_f7bc = load i32, i32* @r5, align 4
  %v2_f7bc = add i32 %v1_f7bc, 4
  %v3_f7bc = inttoptr i32 %v2_f7bc to i32*
  store i32 %v0_f7bc, i32* %v3_f7bc, align 4
  %v0_f7c0 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f7c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f7c0 = xor i1 %v1_f7c0, true
  %v3_f7c0 = and i1 %v0_f7c0, %v2_f7c0
  br i1 %v3_f7c0, label %bb353, label %.thread228

bb353:                                            ; preds = %bb352
  %v4_f7c0 = load i32, i32* %r0.global-to-local, align 4
  %v5_f7c0 = load i32, i32* @r5, align 4
  %v6_f7c0 = add i32 %v5_f7c0, 12
  %v7_f7c0 = inttoptr i32 %v6_f7c0 to i32*
  store i32 %v4_f7c0, i32* %v7_f7c0, align 4
  %v4_f7c4 = load i32, i32* %r0.global-to-local, align 4
  %v5_f7c4 = trunc i32 %v4_f7c4 to i8
  %v6_f7c4 = load i32, i32* @r5, align 4
  %v7_f7c4 = add i32 %v6_f7c4, 284
  %v8_f7c4 = inttoptr i32 %v7_f7c4 to i8*
  store i8 %v5_f7c4, i8* %v8_f7c4, align 1
  %v0_f7c8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f7c8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread228

.thread228:                                       ; preds = %bb352, %bb353
  %v1_f7c8 = phi i1 [ %v1_f7c8.pre, %bb353 ], [ %v1_f7c0, %bb352 ]
  %v0_f7c8 = phi i1 [ %v0_f7c8.pre, %bb353 ], [ %v0_f7c0, %bb352 ]
  %v2_f7c8 = xor i1 %v1_f7c8, true
  %v3_f7c8 = and i1 %v0_f7c8, %v2_f7c8
  br i1 %v3_f7c8, label %dec_label_pc_ed6c, label %dec_label_pc_f7cc

dec_label_pc_f7cc:                                ; preds = %.thread228
  %v0_f7cc = load i32, i32* @r5, align 4
  store i32 %v0_f7cc, i32* @r0, align 4
  %v0_f7d0 = call i32 @function_d39c()
  store i32 %v0_f7d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed6c

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f648
  store i32 %v2_f618, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f7e8 = add i32 %v0_f634, 4
  %v2_f7e8 = inttoptr i32 %v1_f7e8 to i32*
  %v3_f7e8 = load i32, i32* %v2_f7e8, align 4
  store i32 %v3_f7e8, i32* %r0.global-to-local, align 4
  %v5_f7ec = call i32 @function_10b4c(i32 %v3_f7e8, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_f7ec, i32* %r0.global-to-local, align 4
  store i32 %v2_ed00, i32* %r1.global-to-local, align 4
  %v0_f7f4 = load i32, i32* @r5, align 4
  %v1_f7f4 = add i32 %v0_f7f4, 4
  %v2_f7f4 = inttoptr i32 %v1_f7f4 to i32*
  %v3_f7f4 = load i32, i32* %v2_f7f4, align 4
  store i32 %v3_f7f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f078

dec_label_pc_f804:                                ; preds = %dec_label_pc_ef28
  store i32 %.pre, i32* @r0, align 4
  %v1_f80c = add i32 %v0_f804, 92
  store i32 %v1_f80c, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_f814 = call i32 @function_10990(i32 %.pre, i32 %v1_f80c, i32 192)
  store i32 %v3_f814, i32* %r0.global-to-local, align 4
  %v0_f818 = load i32, i32* @r5, align 4
  %v1_f818 = add i32 %v0_f818, 24
  %v2_f818 = inttoptr i32 %v1_f818 to i32*
  %v3_f818 = load i32, i32* %v2_f818, align 4
  store i32 %v3_f818, i32* %r3.global-to-local, align 4
  %v1_f81c = add i32 %v3_f818, -64
  store i32 %v1_f81c, i32* %ip.global-to-local, align 4
  store i32 %v1_f81c, i32* %v2_f818, align 4
  br label %dec_label_pc_ef38

dec_label_pc_f828:                                ; preds = %dec_label_pc_f4ec
  %v0_f828 = load i32, i32* @r5, align 4
  store i32 %v0_f828, i32* @r0, align 4
  %v0_f82c = call i32 @function_d39c()
  store i32 %v0_f82c, i32* %r0.global-to-local, align 4
  %v0_f830 = load i32, i32* @r5, align 4
  %v1_f830 = add i32 %v0_f830, 24
  %v2_f830 = inttoptr i32 %v1_f830 to i32*
  %v3_f830 = load i32, i32* %v2_f830, align 4
  store i32 %v3_f830, i32* %ip.global-to-local, align 4
  %v0_f834 = load i32, i32* @r4, align 4
  store i32 %v0_f834, i32* @r7, align 4
  br label %dec_label_pc_f534

dec_label_pc_f83c:                                ; preds = %thread-pre-split78
  %v0_f844 = load i32, i32* @r5, align 4
  %v1_f844 = add i32 %v0_f844, 12
  %v2_f844 = inttoptr i32 %v1_f844 to i32*
  %v3_f844 = load i32, i32* %v2_f844, align 4
  br label %dec_label_pc_ef20.backedge

dec_label_pc_f84c:                                ; preds = %dec_label_pc_eea4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f84c = load i32, i32* %stack_var_-56, align 4
  %v0_f850 = load i32, i32* @r6, align 4
  store i32 %v0_f850, i32* %r2.global-to-local, align 4
  %v1_f854 = add i32 %v3_f84c, -1
  store i32 %v1_f854, i32* %r3.global-to-local, align 4
  %v0_f858 = load i32, i32* @sl, align 4
  store i32 %v0_f858, i32* %r0.global-to-local, align 4
  %v0_f85c = load i32, i32* @r5, align 4
  %v1_f85c = add i32 %v0_f85c, 24
  %v2_f85c = inttoptr i32 %v1_f85c to i32*
  %v3_f85c = load i32, i32* %v2_f85c, align 4
  store i32 %v3_f85c, i32* %r1.global-to-local, align 4
  %v4_f860 = call i32 @function_fffc(i32 %v0_f858, i32 %v3_f85c, i32 %v0_f850, i32 %v1_f854)
  store i32 %v4_f860, i32* %r0.global-to-local, align 4
  %v2_f864 = icmp eq i32 %v4_f860, -1
  store i1 %v2_f864, i1* %cpsr_c.global-to-local, align 1
  %v7_f864 = icmp eq i32 %v4_f860, -1
  store i1 %v7_f864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f864, label %dec_label_pc_f874, label %dec_label_pc_ef04

dec_label_pc_f874:                                ; preds = %dec_label_pc_f84c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f878 = call i32 @function_fa5c(i32 12)
  store i32 13, i32* %r0.global-to-local, align 4
  %v1_f880 = call i32 @function_fa5c(i32 13)
  store i32 %v1_f880, i32* %r0.global-to-local, align 4
  %v0_f884 = load i32, i32* @r5, align 4
  %v1_f884 = add i32 %v0_f884, 12
  %v2_f884 = inttoptr i32 %v1_f884 to i32*
  %v3_f884 = load i32, i32* %v2_f884, align 4
  br label %dec_label_pc_ef20.backedge

dec_label_pc_ef20.backedge.thread:                ; preds = %dec_label_pc_f1e0, %dec_label_pc_f294, %dec_label_pc_f348, %dec_label_pc_f3fc, %dec_label_pc_f558
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef28

dec_label_pc_ef20.backedge.thread455:             ; preds = %dec_label_pc_f20c, %dec_label_pc_f2c0, %dec_label_pc_f428, %dec_label_pc_f374, %dec_label_pc_f584, %dec_label_pc_f228, %dec_label_pc_f2dc, %dec_label_pc_f390, %dec_label_pc_f444, %dec_label_pc_f5a0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef28

dec_label_pc_ef20.backedge:                       ; preds = %dec_label_pc_f874, %dec_label_pc_f83c
  %storemerge458 = phi i32 [ %v3_f844, %dec_label_pc_f83c ], [ %v3_f884, %dec_label_pc_f874 ]
  %v0_ef20.be = phi i32 [ %v3_f844, %dec_label_pc_f83c ], [ %v3_f884, %dec_label_pc_f874 ]
  %v0_ef28142 = phi i32 [ %v0_f844, %dec_label_pc_f83c ], [ %v0_f884, %dec_label_pc_f874 ]
  store i32 %storemerge458, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef20 = icmp eq i32 %v0_ef20.be, 0
  store i1 %v2_ef20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef20, label %dec_label_pc_ed6c, label %dec_label_pc_ef28

dec_label_pc_f88c:                                ; preds = %bb350
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f898 = call i32 @function_10bdc(i32 2, i32 1, i32 0)
  store i32 %v3_f898, i32* %r0.global-to-local, align 4
  %v2_f89c = icmp eq i32 %v3_f898, -1
  store i1 %v2_f89c, i1* %cpsr_c.global-to-local, align 1
  %v7_f89c = icmp eq i32 %v3_f898, -1
  store i1 %v7_f89c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f898, i32* @r4, align 4
  br i1 %v7_f89c, label %dec_label_pc_fa28, label %dec_label_pc_f8a8

dec_label_pc_f8a8:                                ; preds = %dec_label_pc_f88c
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f8ac = call i32 @function_fb14(i32 2)
  store i32 -1378207815, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b234.63 to i32), i32* %r3.global-to-local, align 4
  %v0_f8b8 = load i32, i32* @r6, align 4
  store i32 %v0_f8b8, i32* %r1.global-to-local, align 4
  store i32 -1378207815, i32* @global_var_1b238.65, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_f8c4 = inttoptr i32 %v0_f8b8 to i32*
  %v3_f8c4 = call i32 @function_fa30(i32 2, i32* %v2_f8c4)
  %v4_f8c4 = inttoptr i32 %v3_f8c4 to i8*
  store i32 %v3_f8c4, i32* %r0.global-to-local, align 4
  %v2_f8c8 = add i32 %v3_f8c4, 1
  %v3_f8c8 = inttoptr i32 %v2_f8c8 to i8*
  %v4_f8c8 = load i8, i8* %v3_f8c8, align 1
  %v5_f8c8 = zext i8 %v4_f8c8 to i32
  store i32 %v5_f8c8, i32* %r2.global-to-local, align 4
  %v3_f8cc = load i8, i8* %v4_f8c4, align 1
  %v4_f8cc = zext i8 %v3_f8cc to i32
  %v4_f8d0 = mul nuw nsw i32 %v5_f8c8, 256
  %v5_f8d0 = or i32 %v4_f8cc, %v4_f8d0
  store i32 %v5_f8d0, i32* %r3.global-to-local, align 4
  %v1_f8d4 = and i32 %v4_f8cc, 128
  %v2_f8d4 = icmp ne i32 %v1_f8d4, 0
  store i1 %v2_f8d4, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_f8c8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f8e4 = call i32 @function_fa5c(i32 2)
  %v0_f8e8 = load i32, i32* @r4, align 4
  store i32 %v0_f8e8, i32* %r0.global-to-local, align 4
  store i32 %v2_f8ec, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_f8f4 = call i32 @function_10a38(i32 %v0_f8e8, %sockaddr* %v3_f8f4, i32 16)
  store i32 %v4_f8f4, i32* %r0.global-to-local, align 4
  %v3_f8f8 = icmp eq i32 %v4_f8f4, -1
  store i1 %v3_f8f8, i1* %cpsr_c.global-to-local, align 1
  %v8_f8f8 = icmp eq i32 %v4_f8f4, -1
  store i1 %v8_f8f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f8f8, label %dec_label_pc_f900, label %dec_label_pc_f984

dec_label_pc_f900:                                ; preds = %dec_label_pc_f8a8
  %v0_f900 = load i32, i32* @r4, align 4
  store i32 %v0_f900, i32* %r0.global-to-local, align 4
  %v1_f904 = call i32 @function_10640(i32 %v0_f900)
  %v0_f908 = load i32, i32* @r6, align 4
  store i32 %v0_f908, i32* %r0.global-to-local, align 4
  %v1_f90c = call i32 @function_114b8(i32 %v0_f908)
  store i32 %v1_f90c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f910

dec_label_pc_f910:                                ; preds = %dec_label_pc_ecc8, %dec_label_pc_ecac, %dec_label_pc_f900
  %v0_f910 = load i32, i32* @r7, align 4
  %v1_f910 = load i32, i32* @r4, align 4
  %v2_f910 = add i32 %v1_f910, 12
  %v3_f910 = inttoptr i32 %v2_f910 to i32*
  store i32 %v0_f910, i32* %v3_f910, align 4
  %v0_f914 = load i32, i32* @r7, align 4
  %v1_f914 = trunc i32 %v0_f914 to i8
  %v2_f914 = load i32, i32* @r4, align 4
  %v3_f914 = add i32 %v2_f914, 284
  %v4_f914 = inttoptr i32 %v3_f914 to i8*
  store i8 %v1_f914, i8* %v4_f914, align 1
  br label %bb315

dec_label_pc_f954:                                ; preds = %dec_label_pc_ee54, %dec_label_pc_ee0c
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ee90

dec_label_pc_f95c:                                ; preds = %dec_label_pc_edcc
  %v0_f95c = load i32, i32* @r5, align 4
  %v1_f95c = add i32 %v0_f95c, 4
  %v2_f95c = inttoptr i32 %v1_f95c to i32*
  %v3_f95c = load i32, i32* %v2_f95c, align 4
  store i32 %v3_f95c, i32* %r0.global-to-local, align 4
  %v1_f960 = call i32 @function_10640(i32 %v3_f95c)
  store i32 %v1_f960, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_f968 = load i32, i32* @r6, align 4
  %v1_f968 = load i32, i32* @r5, align 4
  %v2_f968 = add i32 %v1_f968, 12
  %v3_f968 = inttoptr i32 %v2_f968 to i32*
  store i32 %v0_f968, i32* %v3_f968, align 4
  %v0_f96c = load i32, i32* %r4.global-to-local, align 4
  %v1_f96c = load i32, i32* @r5, align 4
  %v2_f96c = add i32 %v1_f96c, 4
  %v3_f96c = inttoptr i32 %v2_f96c to i32*
  store i32 %v0_f96c, i32* %v3_f96c, align 4
  %v0_f970 = load i32, i32* @r6, align 4
  %v1_f970 = trunc i32 %v0_f970 to i8
  %v2_f970 = load i32, i32* @r5, align 4
  %v3_f970 = add i32 %v2_f970, 284
  %v4_f970 = inttoptr i32 %v3_f970 to i8*
  store i8 %v1_f970, i8* %v4_f970, align 1
  br label %dec_label_pc_ed6c

dec_label_pc_f978:                                ; preds = %dec_label_pc_f780
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_f97c = load i32, i32* @sb, align 4
  %v2_f97c = inttoptr i32 %v1_f97c to i32*
  store i32 104, i32* %v2_f97c, align 4
  br label %dec_label_pc_f798

dec_label_pc_f984:                                ; preds = %dec_label_pc_f8a8
  store i32 %v2_eeb8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f994 = load i32, i32* @r4, align 4
  store i32 %v0_f994, i32* %r0.global-to-local, align 4
  %v0_f998 = load i32, i32* @r6, align 4
  %v6_f998 = trunc i32 %v0_f998 to i8
  store i8 %v6_f998, i8* %stack_var_-52, align 1
  %v7_f99c = call i32 @function_10b4c(i32 %v0_f994, i32* nonnull %v2_eec0, i32 1, i32 16384)
  store i32 %v2_eecc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f9b0 = load i32, i32* @r4, align 4
  store i32 %v0_f9b0, i32* %r0.global-to-local, align 4
  %v5_f9b4 = call i32 @function_10b4c(i32 %v0_f9b0, i32* nonnull %stack_var_-56, i32 4, i32 16384)
  %v2_f9bc = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_f9bc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f9c8 = load i32, i32* @r4, align 4
  store i32 %v0_f9c8, i32* %r0.global-to-local, align 4
  %v5_f9cc = call i32 @function_10b4c(i32 %v0_f9c8, i32* nonnull %stack_var_-38, i32 2, i32 16384)
  %v0_f9d0 = load i32, i32* %r8.global-to-local, align 4
  %v1_f9d0 = add i32 %v0_f9d0, 12
  store i32 %v1_f9d0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f9dc = load i32, i32* @r4, align 4
  store i32 %v0_f9dc, i32* %r0.global-to-local, align 4
  %v4_f9e0 = inttoptr i32 %v1_f9d0 to i32*
  %v5_f9e0 = call i32 @function_10b4c(i32 %v0_f9dc, i32* %v4_f9e0, i32 1, i32 16384)
  store i32 %v5_f9e0, i32* %r0.global-to-local, align 4
  %v0_f9e4 = load i32, i32* %r8.global-to-local, align 4
  %v1_f9e4 = inttoptr i32 %v0_f9e4 to i32*
  %v2_f9e4 = load i32, i32* %v1_f9e4, align 4
  store i32 %v2_f9e4, i32* %r1.global-to-local, align 4
  %v1_f9e8 = add i32 %v0_f9e4, 12
  %v2_f9e8 = inttoptr i32 %v1_f9e8 to i8*
  %v3_f9e8 = load i8, i8* %v2_f9e8, align 1
  %v4_f9e8 = zext i8 %v3_f9e8 to i32
  store i32 %v4_f9e8, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f9f0 = load i32, i32* @r4, align 4
  store i32 %v0_f9f0, i32* %r0.global-to-local, align 4
  %v4_f9f4 = inttoptr i32 %v2_f9e4 to i32*
  %v5_f9f4 = call i32 @function_10b4c(i32 %v0_f9f0, i32* %v4_f9f4, i32 %v4_f9e8, i32 16384)
  %v0_f9f8 = load i32, i32* %r8.global-to-local, align 4
  %v1_f9f8 = add i32 %v0_f9f8, 13
  store i32 %v1_f9f8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fa04 = load i32, i32* @r4, align 4
  store i32 %v0_fa04, i32* %r0.global-to-local, align 4
  %v4_fa08 = inttoptr i32 %v1_f9f8 to i32*
  %v5_fa08 = call i32 @function_10b4c(i32 %v0_fa04, i32* %v4_fa08, i32 1, i32 16384)
  %v0_fa0c = load i32, i32* @r4, align 4
  store i32 %v0_fa0c, i32* %r0.global-to-local, align 4
  %v0_fa10 = load i32, i32* %r8.global-to-local, align 4
  %v1_fa10 = add i32 %v0_fa10, 13
  %v2_fa10 = inttoptr i32 %v1_fa10 to i8*
  %v3_fa10 = load i8, i8* %v2_fa10, align 1
  %v4_fa10 = zext i8 %v3_fa10 to i32
  store i32 %v4_fa10, i32* %r2.global-to-local, align 4
  %v1_fa14 = add i32 %v0_fa10, 4
  %v2_fa14 = inttoptr i32 %v1_fa14 to i32*
  %v3_fa14 = load i32, i32* %v2_fa14, align 4
  store i32 %v3_fa14, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa1c = inttoptr i32 %v3_fa14 to i32*
  %v5_fa1c = call i32 @function_10b4c(i32 %v0_fa0c, i32* %v4_fa1c, i32 %v4_fa10, i32 16384)
  %v0_fa20 = load i32, i32* @r4, align 4
  store i32 %v0_fa20, i32* %r0.global-to-local, align 4
  %v1_fa24 = call i32 @function_10640(i32 %v0_fa20)
  store i32 %v1_fa24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fa28

dec_label_pc_fa28:                                ; preds = %dec_label_pc_f88c, %dec_label_pc_f984
  %v0_fa28 = load i32, i32* @r6, align 4
  store i32 %v0_fa28, i32* %r0.global-to-local, align 4
  %v1_fa2c = call i32 @function_114b8(i32 %v0_fa28)
  store i32 %v1_fa2c, i32* %r0.global-to-local, align 4
  ret i32 %v1_fa2c

; uselistorder directives
  uselistorder i32 %v4_f8cc, { 1, 0 }
  uselistorder i32 %v5_f8c8, { 1, 0, 2 }
  uselistorder i1 %v7_f89c, { 1, 0 }
  uselistorder i32 %v3_f898, { 1, 0, 2, 3 }
  uselistorder i32 %v3_f884, { 1, 0 }
  uselistorder i1 %v7_f864, { 1, 0 }
  uselistorder i32 %v3_f844, { 1, 0 }
  uselistorder i32 %v3_f7f4, { 1, 0 }
  uselistorder i1 %v1_f7c0, { 1, 0 }
  uselistorder i32 %v1_f7a8, { 2, 1, 0 }
  uselistorder i32 %v1_f7a4, { 1, 0 }
  uselistorder i1 %v2_f75c, { 1, 0 }
  uselistorder i32 %.357, { 1, 0 }
  uselistorder i1 %v7_f744, { 1, 0 }
  uselistorder i32 %v0_f740, { 2, 1, 0, 3 }
  uselistorder i32 %v4_f720, { 1, 0, 2 }
  uselistorder i32 %v4_f71c, { 1, 0, 2 }
  uselistorder i1 %v7_f70c, { 1, 0 }
  uselistorder i32 %v0_f70c, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_f6bc, { 0, 2, 1 }
  uselistorder i1 %v0_f6ac, { 1, 0 }
  uselistorder i32 %v4_f6a0, { 1, 0, 2 }
  uselistorder i32 %v0_f634, { 1, 2, 0 }
  uselistorder i1 %v7_f5a4, { 1, 0 }
  uselistorder i32 %v1_f5a0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f598, { 1, 0 }
  uselistorder i8 %v3_f590, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f5a0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f57c, { 1, 0 }
  uselistorder i1 %v7_f574, { 1, 0 }
  uselistorder i1 %v7_f56c, { 1, 0 }
  uselistorder i32 %v0_f548, { 1, 2, 0 }
  uselistorder i32 %v2_f534, { 1, 0 }
  uselistorder i32 %v1_f534, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_f534, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_f504, { 2, 1, 0 }
  uselistorder i1 %v7_f4e0, { 1, 0 }
  uselistorder i32 %v4_f4dc, { 1, 0, 2 }
  uselistorder i1 %v7_f448, { 1, 0 }
  uselistorder i32 %v1_f444, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f43c, { 1, 0 }
  uselistorder i8 %v3_f434, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f444, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f420, { 1, 0 }
  uselistorder i1 %v7_f418, { 1, 0 }
  uselistorder i1 %v7_f410, { 1, 0 }
  uselistorder i1 %v7_f394, { 1, 0 }
  uselistorder i32 %v1_f390, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f388, { 1, 0 }
  uselistorder i8 %v3_f380, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f390, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f36c, { 1, 0 }
  uselistorder i1 %v7_f364, { 1, 0 }
  uselistorder i1 %v7_f35c, { 1, 0 }
  uselistorder i1 %v7_f2e0, { 1, 0 }
  uselistorder i32 %v1_f2dc, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f2d4, { 1, 0 }
  uselistorder i8 %v3_f2cc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f2dc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f2b8, { 1, 0 }
  uselistorder i1 %v7_f2b0, { 1, 0 }
  uselistorder i1 %v7_f2a8, { 1, 0 }
  uselistorder i1 %v7_f22c, { 1, 0 }
  uselistorder i32 %v1_f228, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f220, { 1, 0 }
  uselistorder i8 %v3_f218, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f228, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f204, { 1, 0 }
  uselistorder i1 %v7_f1fc, { 1, 0 }
  uselistorder i1 %v7_f1f4, { 1, 0 }
  uselistorder i32 %v0_f19c, { 2, 1, 0 }
  uselistorder i1 %v7_f194, { 1, 0 }
  uselistorder i1 %v8_f188, { 1, 0 }
  uselistorder i8 %v3_f180, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_f190, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f16c, { 1, 0 }
  uselistorder i1 %v7_f164, { 1, 0 }
  uselistorder i32 %v0_f10c, { 2, 1, 0 }
  uselistorder i1 %v7_f104, { 1, 0 }
  uselistorder i1 %v8_f0f8, { 1, 0 }
  uselistorder i8 %v3_f0f0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f100, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f0dc, { 1, 0 }
  uselistorder i1 %v7_f0d4, { 1, 0 }
  uselistorder i1 %v7_f0cc, { 1, 0 }
  uselistorder i32 %v0_f0a8.pre, { 0, 2, 1 }
  uselistorder i32 %v1_f090, { 1, 0 }
  uselistorder i32 %v1_f08c, { 1, 0 }
  uselistorder i32 %v1_f084, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f080, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f080, { 0, 2, 1 }
  uselistorder i32 %v0_f048.pr, { 1, 0 }
  uselistorder i1 %v7_f020, { 1, 0 }
  uselistorder i1 %v2_f00c, { 1, 0, 2 }
  uselistorder i1 %v2_eff4, { 1, 0, 2 }
  uselistorder i32 %v1_f014, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_efe8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_f010, { 1, 0 }
  uselistorder i32 %v2_f018, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_efd4, { 0, 2, 1, 3 }
  uselistorder i32 %v0_ef9c, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_ef78, { 1, 2, 3, 0 }
  uselistorder i32 %v3_ef74, { 1, 0 }
  uselistorder i32 %v5_ef58, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_ef44, { 1, 0, 2 }
  uselistorder i32 %v3_ef40, { 1, 0, 2 }
  uselistorder i32 %v0_f804, { 1, 0, 2 }
  uselistorder i32 %v0_ef14, { 1, 0, 2 }
  uselistorder i1 %v7_eef4, { 1, 0 }
  uselistorder i32 %v0_ee5c, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_ee3c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_ee30, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_edbc, { 2, 1, 0 }
  uselistorder i32 %v3_edb8, { 1, 0 }
  uselistorder i1 %v7_ed9c, { 1, 0 }
  uselistorder i32 %v3_ed98, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_ed8c, { 1, 0 }
  uselistorder i32 %v1_ed70, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ed5c, { 2, 1, 0 }
  uselistorder i32 %v3_ed58, { 1, 0 }
  uselistorder i32 %v0_ed5c, { 1, 0 }
  uselistorder i32 %v2_ecf4, { 1, 0 }
  uselistorder i32 %v1_ecf4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_ecf4, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_ecd0, { 2, 1, 0 }
  uselistorder i32 %v1_eccc, { 1, 0 }
  uselistorder i32 %v2_ec9c, { 1, 0 }
  uselistorder i32 %v0_ec9c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_ec94, { 1, 0 }
  uselistorder i1 %v7_ec5c, { 0, 3, 1, 2 }
  uselistorder i1 %v2_ec5c, { 1, 2, 0 }
  uselistorder i32 %v2_ec54, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_ec4c, { 1, 0 }
  uselistorder i32 %v1_ec30, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v2_ec24, { 1, 0 }
  uselistorder i32 %v1_ec24, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_ec24, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_ec14, { 1, 0 }
  uselistorder i32 %v3_ec78, { 5, 7, 4, 8, 6, 1, 0, 10, 3, 2, 9 }
  uselistorder i32 %storemerge232, { 1, 0, 2 }
  uselistorder i32 %v2_eecc, { 0, 2, 3, 4, 1 }
  uselistorder i32* %v2_eec0, { 2, 1, 6, 3, 0, 4, 5, 7 }
  uselistorder i32 %v2_eeb8, { 4, 3, 8, 5, 2, 6, 7, 9, 1, 0 }
  uselistorder i32 %v2_f628, { 1, 2, 0 }
  uselistorder i32 %v2_ec88, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v3_eb68, { 1, 0 }
  uselistorder i32 %v1_eb54, { 1, 0 }
  uselistorder i32 %v1_eb3c, { 1, 2, 0 }
  uselistorder i32 %v0_eb48, { 0, 3, 2, 1 }
  uselistorder i32 %v0_eb0c, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_eb00, { 2, 1, 0 }
  uselistorder i32 %v1_eadc, { 3, 1, 0, 4, 2 }
  uselistorder i32 %v3_eabc, { 1, 2, 0, 3 }
  uselistorder i1 %v2_eab4, { 1, 0 }
  uselistorder i32 %v0_ea18, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_ea50, { 1, 2, 4, 8, 0, 3, 6, 5, 7 }
  uselistorder i32 %v1_e9c0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_e8e4, { 1, 0 }
  uselistorder i32 %v1_e8e0, { 2, 0, 1 }
  uselistorder i32 %v4_e8bc, { 1, 0 }
  uselistorder i32 %v5_e8a4, { 0, 2, 1 }
  uselistorder i1 %v2_e82c, { 1, 0 }
  uselistorder i1 %v3_e810, { 1, 0, 2 }
  uselistorder i1 %v2_e7fc, { 1, 0 }
  uselistorder i1 %v2_e7d8, { 1, 0 }
  uselistorder i32 %v1_e788, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e774, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e770, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v4_e760, { 1, 0 }
  uselistorder i32 %v0_e750, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e72c, { 1, 0 }
  uselistorder i8* %stack_var_-1876.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_ea44, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i32 %v4_dad8, { 1, 0 }
  uselistorder i32 %v0_dacc, { 2, 0, 1, 3 }
  uselistorder i32 %v4_da78, { 1, 0 }
  uselistorder i32 %v0_da70, { 0, 1, 3, 2 }
  uselistorder i32 %v0_da18, { 3, 2, 0, 1 }
  uselistorder i1 %v7_d9b8, { 1, 0 }
  uselistorder i32 %v3_d9b0, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_d998, { 0, 2, 1 }
  uselistorder i32 %v0_d980, { 2, 1, 0 }
  uselistorder i32 %v0_d95c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge240, { 1, 0 }
  uselistorder i32 %v0_d630, { 1, 3, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-56, { 1, 5, 6, 7, 4, 8, 3, 2, 9, 0, 10, 11 }
  uselistorder i8* %stack_var_-52, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 9 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 4, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 62, 11, 12, 57, 63, 43, 64, 65, 106, 13, 14, 15, 35, 44, 45, 46, 47, 0, 1, 2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 58, 59, 60, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 61, 72, 73, 75, 74, 76, 77, 78, 79, 80, 82, 84, 83, 81, 85, 86, 87, 88, 94, 89, 90, 91, 92, 95, 115, 116, 96, 117, 118, 97, 98, 99, 100, 101, 102, 103, 104, 119, 120, 121, 122, 123, 124, 125, 126, 127, 105, 128, 129, 130, 131, 132, 133, 135, 134, 137, 136, 93, 138, 139, 140, 141, 107, 108, 109, 110, 111, 112, 113, 114 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 43, 37, 14, 15, 17, 18, 19, 33, 38, 39, 0, 1, 2, 20, 21, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 34, 36, 35, 44, 46, 45, 40, 41, 42, 48, 49, 50, 51, 52, 53, 54, 47, 55, 56, 57, 58, 59, 61, 63, 62, 218, 60, 64, 65, 66, 67, 72, 68, 69, 70, 71, 75, 73, 76, 74, 77, 78, 79, 80, 81, 82, 83, 84, 87, 285, 286, 287, 288, 289, 290, 291, 85, 86, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 284, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 44, 11, 12, 13, 14, 38, 36, 37, 15, 16, 17, 32, 33, 1, 2, 3, 263, 264, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 39, 40, 0, 45, 46, 47, 48, 41, 42, 43, 49, 50, 51, 53, 54, 52, 55, 56, 58, 57, 262, 59, 60, 61, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 265, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 132, 131, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 112, 113, 114, 116, 115, 33, 133, 105, 108, 107, 135, 137, 138, 134, 139, 136, 35, 34, 36, 38, 37, 39, 41, 40, 42, 93, 92, 95, 94, 96, 97, 109, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 117, 44, 45, 47, 46, 48, 43, 49, 50, 51, 52, 54, 53, 56, 55, 58, 57, 59, 60, 61, 62, 64, 63, 66, 65, 68, 67, 69, 70, 71, 72, 74, 73, 76, 75, 78, 77, 79, 80, 81, 82, 84, 83, 86, 85, 88, 87, 89, 90, 91, 99, 98, 106, 100, 101, 102, 119, 118, 121, 120, 103, 104, 111, 110, 142, 140, 123, 122, 124, 126, 125, 127, 128, 129, 149, 141, 144, 143, 145, 146, 148, 147, 150, 156, 151, 152, 155, 153, 154, 157, 159, 160, 158, 162, 161, 367, 384, 368, 369, 371, 370, 198, 372, 373, 374, 130, 375, 376, 377, 379, 378, 380, 381, 382, 383, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 354, 357, 356, 358, 362, 361, 359, 360, 363, 364, 365, 366 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 10, 5, 6, 11, 12, 13, 14, 7, 8, 9 }
  uselistorder i32* %ip.global-to-local, { 2, 23, 3, 16, 0, 1, 21, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 20, 15, 22, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 45, 36, 37, 46, 47, 48, 49, 50, 51, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 10, 111, 202, 156, 93, 94, 99, 102, 101, 103, 104, 105, 11, 143, 13, 14, 15, 55, 56, 57, 74, 75, 76, 77, 78, 0, 1, 6, 7, 2, 3, 4, 5, 8, 95, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 97, 66, 71, 72, 67, 68, 69, 70, 73, 96, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 144, 106, 107, 108, 109, 110, 145, 98, 12, 100, 112, 114, 113, 115, 116, 118, 120, 119, 146, 117, 121, 122, 123, 124, 125, 126, 131, 127, 128, 129, 130, 149, 150, 147, 148, 132, 133, 134, 135, 136, 137, 138, 139, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 142, 184, 185, 186, 187, 188, 141, 189, 190, 191, 140, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 152, 153, 154, 151, 155 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 108, 200, 152, 90, 91, 96, 99, 98, 100, 101, 102, 12, 136, 13, 14, 15, 16, 55, 56, 57, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 92, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 94, 66, 71, 72, 67, 68, 69, 70, 73, 93, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 138, 103, 104, 105, 106, 107, 139, 95, 137, 97, 109, 111, 110, 112, 113, 115, 117, 116, 140, 114, 118, 119, 120, 121, 122, 127, 123, 124, 125, 126, 143, 144, 141, 128, 142, 129, 130, 131, 132, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 135, 180, 181, 182, 183, 184, 134, 185, 186, 187, 133, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 146, 147, 148, 149, 150, 145, 151 }
  uselistorder i8** @global_var_1b234.63, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1b234.63 to i32), { 1, 0 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_129ac.500 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_129ac.500, { 1, 0 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_10b4c, { 2, 3, 4, 5, 6, 7, 8, 19, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 20, 23, 24, 25, 26, 27, 28 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 (i32)* @function_fa5c, { 17, 9, 8, 16, 10, 18, 15, 14, 13, 12, 11, 7, 6, 0, 5, 4, 3, 19, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_fffc, { 1, 4, 2, 3, 0 }
  uselistorder i32 (i32, i32*)* @function_fa30, { 1, 2, 8, 0, 3, 4, 5, 6, 7, 9, 10, 18, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 (i32)* @function_fb14, { 17, 16, 10, 18, 15, 14, 13, 12, 11, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* bitcast (i8** @global_var_1b1e4.118 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1b1e5.119, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1b1e4.118 to i32), { 1, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10834, { 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32* @sp, { 2, 1, 3, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder i32 ()* @function_d39c, { 3, 2, 1, 0 }
  uselistorder i32 254, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_10b18, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_10b78, { 6, 5, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 16384, { 30, 45, 31, 46, 32, 47, 33, 48, 34, 49, 35, 50, 13, 51, 12, 62, 0, 43, 1, 44, 2, 52, 3, 53, 4, 54, 5, 55, 6, 56, 7, 57, 8, 58, 9, 59, 28, 60, 29, 61, 26, 64, 27, 65, 25, 63, 36, 66, 10, 67, 11, 68, 38, 69, 15, 70, 39, 71, 40, 72, 41, 73, 14, 74, 37, 75, 16, 76, 17, 77, 18, 78, 79, 42, 80, 19, 81, 20, 82, 22, 83, 21, 84, 23, 85, 24, 86 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c6ec, { 2, 3, 8, 7, 6, 5, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_c690, { 4, 5, 10, 9, 8, 7, 6, 1, 0, 3, 2 }
  uselistorder i8* @global_var_1b1c8.483, { 2, 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 33, { 2, 0, 1 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 18, { 6, 2, 3, 4, 7, 5, 8, 0, 9, 1, 10 }
  uselistorder i32 30, { 0, 2, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32* @fp, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 27, 28 }
  uselistorder i32 ptrtoint (i32* @global_var_12998.479 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_12870.429 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_12838.417 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_127fc.401 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_127dc.393 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_127d4.391 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_1279c.375 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_1278c.371 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_12784.369 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_12768.361 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_126e0.333 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_126d8.331 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_126d0.327 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_126ac.319 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_1269c.315 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_12670.305 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_12660.301 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_12658.299 to i32), { 1, 4, 2, 0, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_12624.285 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_12600.275 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_125a0.253 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_1240c.243 to i32), { 0, 5, 1, 2, 3, 6, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_12524.225 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_124d0.207 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_124b0.201 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint ([11 x i8]* @global_var_124a4.199 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_1249c.197 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_12494.195 to i32), { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_12488.191 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([14 x i8]* @global_var_12478.189 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_12468.185 to i32), { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_125a4.181 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_12448.177 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_12440.175 to i32), { 1, 7, 2, 8, 0, 9, 3, 4, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_12438.173 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_1242c.171 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_12830.169 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_12424.167 to i32), { 0, 7, 1, 8, 2, 9, 3, 10, 4, 5, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_1241c.165 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_12414.163 to i32), { 0, 6, 3, 7, 1, 8, 2, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_12400.159 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_123f0.155 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_128f8.149 to i32), { 7, 46, 8, 47, 9, 48, 10, 49, 0, 50, 11, 51, 12, 52, 13, 53, 1, 54, 2, 55, 3, 56, 14, 57, 4, 58, 15, 59, 5, 60, 16, 61, 17, 62, 18, 63, 6, 64, 19, 65, 20, 66, 21, 67, 22, 68, 23, 69, 24, 70, 25, 71, 26, 72, 27, 73, 28, 74, 29, 75, 30, 76, 31, 77, 32, 78, 33, 79, 34, 80, 35, 81, 36, 82, 37, 83, 38, 84, 39, 85, 40, 86, 41, 42, 43, 87, 44, 88, 45, 89 }
  uselistorder i32 (i32, i32, i32)* @function_d470, { 3, 2, 1, 0, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_128b0.147 to i32), { 3, 16, 4, 17, 5, 18, 0, 19, 1, 20, 6, 21, 2, 22, 7, 23, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_12754.145 to i32), { 6, 56, 7, 57, 8, 58, 9, 59, 0, 60, 10, 61, 1, 62, 11, 63, 2, 64, 12, 65, 13, 66, 14, 67, 3, 68, 15, 69, 16, 70, 17, 71, 18, 72, 19, 73, 20, 74, 4, 75, 21, 76, 22, 77, 23, 78, 24, 79, 25, 80, 26, 81, 27, 82, 28, 83, 29, 84, 30, 85, 31, 86, 32, 87, 33, 88, 34, 89, 35, 90, 36, 91, 37, 92, 38, 93, 39, 94, 40, 95, 41, 96, 42, 97, 43, 98, 44, 45, 46, 99, 47, 100, 48, 101, 49, 102, 50, 103, 51, 104, 5, 105, 52, 106, 53, 107, 54, 108, 55, 109 }
  uselistorder i8* @global_var_1b1d9.141, { 1, 0 }
  uselistorder i8 16, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1b1d8.133, { 1, 0 }
  uselistorder i8** @global_var_1b1b8.128, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_d208, { 64, 18, 17, 63, 62, 61, 60, 59, 58, 22, 21, 20, 19, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 16, 15, 14, 13, 12, 11, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32* @global_var_1b248.126, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1b244.124, { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32, i32)* @function_10ec8, { 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 2, 16, 15, 1, 0, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1b1e8.112, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_108e4, { 0, 1, 2, 18, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 19, 21, 22 }
  uselistorder i32 (i32)* @function_d260, { 1, 0 }
  uselistorder i32* @global_var_1b230.48, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_10190, { 2, 1, 0 }
  uselistorder i32* @global_var_1b24c.110, { 0, 2, 1 }
  uselistorder i32 ()* @function_1066c, { 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 7, 1, 3, 4, 8, 2, 5, 6, 11, 10, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 0, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 62, 63 }
  uselistorder i32* @sb, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 34, 35, 37, 38, 41, 44, 42, 43, 45, 46, 39, 40 }
  uselistorder label %dec_label_pc_fa28, { 1, 0 }
  uselistorder label %dec_label_pc_f910, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ef20.backedge.thread455, { 9, 4, 8, 2, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_ef20.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %.thread228, { 1, 0 }
  uselistorder label %bb352, { 1, 0 }
  uselistorder label %dec_label_pc_f798, { 1, 0 }
  uselistorder label %dec_label_pc_f764, { 1, 0 }
  uselistorder label %thread-pre-split78, { 1, 0 }
  uselistorder label %dec_label_pc_f674, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f5a0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f58c, { 1, 0 }
  uselistorder label %dec_label_pc_f534, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_f444, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f430, { 1, 0 }
  uselistorder label %dec_label_pc_f390, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f37c, { 1, 0 }
  uselistorder label %dec_label_pc_f2dc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f2c8, { 1, 0 }
  uselistorder label %dec_label_pc_f228, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f214, { 1, 0 }
  uselistorder label %dec_label_pc_f190, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f17c, { 1, 0 }
  uselistorder label %dec_label_pc_f10c, { 1, 0 }
  uselistorder label %dec_label_pc_f100, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f0ec, { 1, 0 }
  uselistorder label %dec_label_pc_f0a8, { 2, 1, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_f098, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb326, { 2, 1, 0 }
  uselistorder label %bb324, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f048, { 1, 0 }
  uselistorder label %dec_label_pc_eff0, { 1, 0 }
  uselistorder label %dec_label_pc_eff0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_ef84, { 1, 0 }
  uselistorder label %bb322, { 1, 0 }
  uselistorder label %dec_label_pc_ef38, { 1, 0 }
  uselistorder label %dec_label_pc_ef28, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ef28.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ef1c.loopexit, { 1, 4, 0, 2, 3 }
  uselistorder label %dec_label_pc_eea4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ee90, { 1, 0 }
  uselistorder label %dec_label_pc_ed6c, { 7, 1, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_ed44, { 1, 0 }
  uselistorder label %bb317, { 1, 0 }
  uselistorder label %bb315, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_ebb0.dec_label_pc_ebb0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_eb98.dec_label_pc_eb98_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_eb90, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_eb88, { 1, 0 }
  uselistorder label %dec_label_pc_eb3c, { 1, 0 }
  uselistorder label %dec_label_pc_e9e0, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_e9d4, { 1, 0 }
  uselistorder label %.thread50, { 2, 1, 0 }
  uselistorder label %.thread48, { 1, 0 }
  uselistorder label %dec_label_pc_e83c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e818, { 1, 0 }
  uselistorder label %dec_label_pc_e80c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e7e8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e7c4, { 1, 0 }
  uselistorder label %bb287, { 1, 0 }
  uselistorder label %dec_label_pc_e770, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_da18, { 1, 0 }
}

define i32 @function_fa30(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_fa30:
  store i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32* @ip, align 4
  %v3_fa34 = mul i32 %arg1, 8
  %v2_fa38 = add i32 %v3_fa34, ptrtoint (i32* @global_var_1b254.508 to i32)
  %v2_fa3c = icmp eq i32* %arg2, null
  br i1 %v2_fa3c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_fa30
  %v3_fa4811 = inttoptr i32 %v2_fa38 to i32*
  %v4_fa4812 = load i32, i32* %v3_fa4811, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_fa30
  %v2_fa40 = add i32 %v3_fa34, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 5)
  %v3_fa40 = inttoptr i32 %v2_fa40 to i8*
  %v4_fa40 = load i8, i8* %v3_fa40, align 1
  %v5_fa40 = zext i8 %v4_fa40 to i32
  store i32 %v5_fa40, i32* @r2, align 4
  %v2_fa44 = add i32 %v3_fa34, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 4)
  %v3_fa44 = inttoptr i32 %v2_fa44 to i8*
  %v4_fa44 = load i8, i8* %v3_fa44, align 4
  %v5_fa44 = zext i8 %v4_fa44 to i32
  %v3_fa48 = inttoptr i32 %v2_fa38 to i32*
  %v4_fa48 = load i32, i32* %v3_fa48, align 4
  %v5_fa4c = mul nuw nsw i32 %v5_fa40, 256
  %v6_fa4c = or i32 %v5_fa44, %v5_fa4c
  store i32 %v6_fa4c, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_fa48714 = phi i32 [ %v4_fa4812, %.thread ], [ %v4_fa48, %bb ]
  ret i32 %v4_fa48714

; uselistorder directives
  uselistorder i32 %v2_fa38, { 1, 0 }
  uselistorder i32 %v3_fa34, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_fa5c(i32 %arg1) local_unnamed_addr {
dec_label_pc_fa5c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_fa5c = mul i32 %arg1, 8
  %v3_fa60 = load i32, i32* @r4, align 4
  store i32 %v3_fa60, i32* %stack_var_-20, align 4
  %v3_fa70 = and i32 %v3_fa5c, 2040
  %v2_fa74 = add i32 %v3_fa70, ptrtoint (i32* @global_var_1b254.508 to i32)
  store i32 %v2_fa74, i32* @lr, align 4
  %v1_fa7c = add i32 %v3_fa70, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 4)
  store i32 %v1_fa7c, i32* %r7.global-to-local, align 4
  %v2_fa80 = load i32, i32* @global_var_1b030.511, align 4
  store i32 %v2_fa80, i32* @r2, align 4
  %v2_fa84 = inttoptr i32 %v1_fa7c to i8*
  %v3_fa84 = load i8, i8* %v2_fa84, align 4
  %v4_fa84 = zext i8 %v3_fa84 to i32
  store i32 %v4_fa84, i32* @r1, align 4
  %v1_fa88 = add i32 %v3_fa70, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 5)
  %v2_fa88 = inttoptr i32 %v1_fa88 to i8*
  %v3_fa88 = load i8, i8* %v2_fa88, align 1
  %v4_fa88 = zext i8 %v3_fa88 to i32
  %v3_fa8c = udiv i32 %v2_fa80, 256
  %v4_fa90 = mul nuw nsw i32 %v4_fa88, 256
  %v5_fa90 = or i32 %v4_fa90, %v4_fa84
  %v7_fa90 = icmp eq i32 %v5_fa90, 0
  store i1 %v7_fa90, i1* @cpsr_z, align 1
  %v3_fa94 = udiv i32 %v2_fa80, 65536
  %v1_fa98 = urem i32 %v3_fa8c, 256
  store i32 %v1_fa98, i32* %r6.global-to-local, align 4
  %v1_fa9c = urem i32 %v3_fa94, 256
  store i32 %v1_fa9c, i32* %r5.global-to-local, align 4
  %v3_faa0 = udiv i32 %v2_fa80, 16777216
  store i32 %v3_faa0, i32* %r4.global-to-local, align 4
  %v1_faa4 = urem i32 %v2_fa80, 256
  br i1 %v7_fa90, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_fa5c
  store i32 %v3_fa60, i32* @r4, align 4
  ret i32 %v1_faa4

bb8:                                              ; preds = %dec_label_pc_fa5c
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_fab0

dec_label_pc_fab0:                                ; preds = %dec_label_pc_fab0, %bb8
  %v2_fabc = phi i32 [ %v1_faf8, %dec_label_pc_fab0 ], [ 0, %bb8 ]
  %v0_fab0 = phi i32 [ %v0_faf0, %dec_label_pc_fab0 ], [ %v2_fa74, %bb8 ]
  %v1_fab0 = inttoptr i32 %v0_fab0 to i32*
  %v2_fab0 = load i32, i32* %v1_fab0, align 4
  %v2_fab4 = add i32 %v2_fab0, %v2_fabc
  %v3_fab4 = inttoptr i32 %v2_fab4 to i8*
  %v4_fab4 = load i8, i8* %v3_fab4, align 1
  %v6_fab4 = zext i8 %v4_fab4 to i32
  %v2_fab8 = xor i32 %v6_fab4, %v1_faa4
  %v1_fabc = trunc i32 %v2_fab8 to i8
  store i8 %v1_fabc, i8* %v3_fab4, align 1
  %v0_fac0 = load i32, i32* @lr, align 4
  %v1_fac0 = inttoptr i32 %v0_fac0 to i32*
  %v2_fac0 = load i32, i32* %v1_fac0, align 4
  %v0_fac4 = load i32, i32* @ip, align 4
  %v2_fac4 = add i32 %v0_fac4, %v2_fac0
  %v3_fac4 = inttoptr i32 %v2_fac4 to i8*
  %v4_fac4 = load i8, i8* %v3_fac4, align 1
  %v6_fac4 = zext i8 %v4_fac4 to i32
  %v0_fac8 = load i32, i32* %r6.global-to-local, align 4
  %v2_fac8 = xor i32 %v0_fac8, %v6_fac4
  %v1_facc = trunc i32 %v2_fac8 to i8
  store i8 %v1_facc, i8* %v3_fac4, align 1
  %v0_fad0 = load i32, i32* @lr, align 4
  %v1_fad0 = inttoptr i32 %v0_fad0 to i32*
  %v2_fad0 = load i32, i32* %v1_fad0, align 4
  %v0_fad4 = load i32, i32* @ip, align 4
  %v2_fad4 = add i32 %v0_fad4, %v2_fad0
  %v3_fad4 = inttoptr i32 %v2_fad4 to i8*
  %v4_fad4 = load i8, i8* %v3_fad4, align 1
  %v6_fad4 = zext i8 %v4_fad4 to i32
  %v0_fad8 = load i32, i32* %r5.global-to-local, align 4
  %v2_fad8 = xor i32 %v0_fad8, %v6_fad4
  %v1_fadc = trunc i32 %v2_fad8 to i8
  store i8 %v1_fadc, i8* %v3_fad4, align 1
  %v0_fae0 = load i32, i32* @lr, align 4
  %v1_fae0 = inttoptr i32 %v0_fae0 to i32*
  %v2_fae0 = load i32, i32* %v1_fae0, align 4
  store i32 %v2_fae0, i32* @r1, align 4
  %v0_fae4 = load i32, i32* @ip, align 4
  %v2_fae4 = add i32 %v0_fae4, %v2_fae0
  %v3_fae4 = inttoptr i32 %v2_fae4 to i8*
  %v4_fae4 = load i8, i8* %v3_fae4, align 1
  %v6_fae4 = zext i8 %v4_fae4 to i32
  %v0_fae8 = load i32, i32* %r4.global-to-local, align 4
  %v2_fae8 = xor i32 %v0_fae8, %v6_fae4
  %v1_faec = trunc i32 %v2_fae8 to i8
  store i8 %v1_faec, i8* %v3_fae4, align 1
  %v0_faf0 = load i32, i32* @lr, align 4
  %v1_faf0 = add i32 %v0_faf0, 4
  %v2_faf0 = inttoptr i32 %v1_faf0 to i8*
  %v3_faf0 = load i8, i8* %v2_faf0, align 1
  %v4_faf0 = zext i8 %v3_faf0 to i32
  %v0_faf4 = load i32, i32* %r7.global-to-local, align 4
  %v1_faf4 = add i32 %v0_faf4, 1
  %v2_faf4 = inttoptr i32 %v1_faf4 to i8*
  %v3_faf4 = load i8, i8* %v2_faf4, align 1
  %v4_faf4 = zext i8 %v3_faf4 to i32
  %v0_faf8 = load i32, i32* @ip, align 4
  %v1_faf8 = add i32 %v0_faf8, 1
  store i32 %v1_faf8, i32* @ip, align 4
  %v4_fafc = mul nuw nsw i32 %v4_faf4, 256
  %v5_fafc = or i32 %v4_fafc, %v4_faf0
  store i32 %v5_fafc, i32* @r2, align 4
  %v9_fb00 = icmp eq i32 %v5_fafc, %v1_faf8
  store i1 %v9_fb00, i1* @cpsr_z, align 1
  %v8_fb04 = icmp sgt i32 %v5_fafc, %v1_faf8
  br i1 %v8_fb04, label %dec_label_pc_fab0, label %dec_label_pc_fb08

dec_label_pc_fb08:                                ; preds = %dec_label_pc_fab0
  %v2_fb08 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_fb08, i32* @r4, align 4
  ret i32 %v1_faa4

; uselistorder directives
  uselistorder i32 %v1_faf8, { 1, 2, 3, 0 }
  uselistorder i32 %v0_faf0, { 1, 0 }
  uselistorder i32 %v1_faa4, { 0, 2, 1 }
  uselistorder i32 %v2_fa80, { 3, 0, 1, 2, 4 }
}

define i32 @function_fb14(i32 %arg1) local_unnamed_addr {
dec_label_pc_fb14:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_fb14 = mul i32 %arg1, 8
  %v3_fb18 = load i32, i32* @r4, align 4
  store i32 %v3_fb18, i32* %stack_var_-20, align 4
  %v3_fb28 = and i32 %v3_fb14, 2040
  %v2_fb2c = add i32 %v3_fb28, ptrtoint (i32* @global_var_1b254.508 to i32)
  store i32 %v2_fb2c, i32* @lr, align 4
  %v1_fb34 = add i32 %v3_fb28, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 4)
  store i32 %v1_fb34, i32* %r7.global-to-local, align 4
  %v2_fb38 = load i32, i32* @global_var_1b030.511, align 4
  store i32 %v2_fb38, i32* @r2, align 4
  %v2_fb3c = inttoptr i32 %v1_fb34 to i8*
  %v3_fb3c = load i8, i8* %v2_fb3c, align 4
  %v4_fb3c = zext i8 %v3_fb3c to i32
  %v1_fb40 = add i32 %v3_fb28, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 5)
  %v2_fb40 = inttoptr i32 %v1_fb40 to i8*
  %v3_fb40 = load i8, i8* %v2_fb40, align 1
  %v4_fb40 = zext i8 %v3_fb40 to i32
  %v3_fb44 = udiv i32 %v2_fb38, 256
  %v4_fb48 = mul nuw nsw i32 %v4_fb40, 256
  %v5_fb48 = or i32 %v4_fb48, %v4_fb3c
  %v7_fb48 = icmp eq i32 %v5_fb48, 0
  %v3_fb4c = udiv i32 %v2_fb38, 65536
  %v1_fb50 = urem i32 %v3_fb44, 256
  store i32 %v1_fb50, i32* %r6.global-to-local, align 4
  %v1_fb54 = urem i32 %v3_fb4c, 256
  store i32 %v1_fb54, i32* %r5.global-to-local, align 4
  %v3_fb58 = udiv i32 %v2_fb38, 16777216
  store i32 %v3_fb58, i32* %r4.global-to-local, align 4
  %v1_fb5c = urem i32 %v2_fb38, 256
  br i1 %v7_fb48, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_fb14
  store i32 %v3_fb18, i32* @r4, align 4
  ret i32 %v1_fb5c

bb8:                                              ; preds = %dec_label_pc_fb14
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fb68

dec_label_pc_fb68:                                ; preds = %dec_label_pc_fb68, %bb8
  %v2_fb74 = phi i32 [ %v1_fbb0, %dec_label_pc_fb68 ], [ 0, %bb8 ]
  %v0_fb68 = phi i32 [ %v0_fba8, %dec_label_pc_fb68 ], [ %v2_fb2c, %bb8 ]
  %v1_fb68 = inttoptr i32 %v0_fb68 to i32*
  %v2_fb68 = load i32, i32* %v1_fb68, align 4
  %v2_fb6c = add i32 %v2_fb68, %v2_fb74
  %v3_fb6c = inttoptr i32 %v2_fb6c to i8*
  %v4_fb6c = load i8, i8* %v3_fb6c, align 1
  %v6_fb6c = zext i8 %v4_fb6c to i32
  %v2_fb70 = xor i32 %v6_fb6c, %v1_fb5c
  %v1_fb74 = trunc i32 %v2_fb70 to i8
  store i8 %v1_fb74, i8* %v3_fb6c, align 1
  %v0_fb78 = load i32, i32* @lr, align 4
  %v1_fb78 = inttoptr i32 %v0_fb78 to i32*
  %v2_fb78 = load i32, i32* %v1_fb78, align 4
  %v0_fb7c = load i32, i32* %ip.global-to-local, align 4
  %v2_fb7c = add i32 %v0_fb7c, %v2_fb78
  %v3_fb7c = inttoptr i32 %v2_fb7c to i8*
  %v4_fb7c = load i8, i8* %v3_fb7c, align 1
  %v6_fb7c = zext i8 %v4_fb7c to i32
  %v0_fb80 = load i32, i32* %r6.global-to-local, align 4
  %v2_fb80 = xor i32 %v0_fb80, %v6_fb7c
  %v1_fb84 = trunc i32 %v2_fb80 to i8
  store i8 %v1_fb84, i8* %v3_fb7c, align 1
  %v0_fb88 = load i32, i32* @lr, align 4
  %v1_fb88 = inttoptr i32 %v0_fb88 to i32*
  %v2_fb88 = load i32, i32* %v1_fb88, align 4
  %v0_fb8c = load i32, i32* %ip.global-to-local, align 4
  %v2_fb8c = add i32 %v0_fb8c, %v2_fb88
  %v3_fb8c = inttoptr i32 %v2_fb8c to i8*
  %v4_fb8c = load i8, i8* %v3_fb8c, align 1
  %v6_fb8c = zext i8 %v4_fb8c to i32
  %v0_fb90 = load i32, i32* %r5.global-to-local, align 4
  %v2_fb90 = xor i32 %v0_fb90, %v6_fb8c
  %v1_fb94 = trunc i32 %v2_fb90 to i8
  store i8 %v1_fb94, i8* %v3_fb8c, align 1
  %v0_fb98 = load i32, i32* @lr, align 4
  %v1_fb98 = inttoptr i32 %v0_fb98 to i32*
  %v2_fb98 = load i32, i32* %v1_fb98, align 4
  %v0_fb9c = load i32, i32* %ip.global-to-local, align 4
  %v2_fb9c = add i32 %v0_fb9c, %v2_fb98
  %v3_fb9c = inttoptr i32 %v2_fb9c to i8*
  %v4_fb9c = load i8, i8* %v3_fb9c, align 1
  %v6_fb9c = zext i8 %v4_fb9c to i32
  %v0_fba0 = load i32, i32* %r4.global-to-local, align 4
  %v2_fba0 = xor i32 %v0_fba0, %v6_fb9c
  %v1_fba4 = trunc i32 %v2_fba0 to i8
  store i8 %v1_fba4, i8* %v3_fb9c, align 1
  %v0_fba8 = load i32, i32* @lr, align 4
  %v1_fba8 = add i32 %v0_fba8, 4
  %v2_fba8 = inttoptr i32 %v1_fba8 to i8*
  %v3_fba8 = load i8, i8* %v2_fba8, align 1
  %v4_fba8 = zext i8 %v3_fba8 to i32
  %v0_fbac = load i32, i32* %r7.global-to-local, align 4
  %v1_fbac = add i32 %v0_fbac, 1
  %v2_fbac = inttoptr i32 %v1_fbac to i8*
  %v3_fbac = load i8, i8* %v2_fbac, align 1
  %v4_fbac = zext i8 %v3_fbac to i32
  %v0_fbb0 = load i32, i32* %ip.global-to-local, align 4
  %v1_fbb0 = add i32 %v0_fbb0, 1
  store i32 %v1_fbb0, i32* %ip.global-to-local, align 4
  %v4_fbb4 = mul nuw nsw i32 %v4_fbac, 256
  %v5_fbb4 = or i32 %v4_fbb4, %v4_fba8
  store i32 %v5_fbb4, i32* @r2, align 4
  %v8_fbbc = icmp sgt i32 %v5_fbb4, %v1_fbb0
  br i1 %v8_fbbc, label %dec_label_pc_fb68, label %dec_label_pc_fbc0

dec_label_pc_fbc0:                                ; preds = %dec_label_pc_fb68
  %v2_fbc0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_fbc0, i32* @r4, align 4
  ret i32 %v1_fb5c

; uselistorder directives
  uselistorder i32 %v1_fbb0, { 1, 2, 0 }
  uselistorder i32 %v0_fba8, { 1, 0 }
  uselistorder i32 %v1_fb5c, { 0, 2, 1 }
  uselistorder i32 %v2_fb38, { 3, 0, 1, 2, 4 }
}

define i32 @function_fbcc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fbcc:
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_fbcc = load i32, i32* @r4, align 4
  store i32 %v3_fbcc, i32* %stack_var_-28, align 4
  %v6_fbcc = load i32, i32* @r5, align 4
  %v9_fbcc = load i32, i32* @r6, align 4
  %v12_fbcc = load i32, i32* @r7, align 4
  %v1_fbd4 = call i32 @function_10d74(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_fbd4, i32* @r7, align 4
  %v3_fbf0 = call i32 @function_ffb4(i32 %v1_fbd4, i32 ptrtoint (i32* @global_var_129bc.516 to i32), i32 2)
  %v0_fbf4 = load i32, i32* @r5, align 4
  %v0_fbf8 = load i32, i32* @r7, align 4
  store i32 %v0_fbf8, i32* @global_var_1b25c.517, align 4
  %v1_fbfc = trunc i32 %v0_fbf4 to i8
  store i8 %v1_fbfc, i8* bitcast (i32* @global_var_1b260.518 to i8*), align 4
  %v0_fc00 = load i32, i32* @r6, align 4
  %v1_fc00 = trunc i32 %v0_fc00 to i8
  store i8 %v1_fc00, i8* bitcast (i32* @global_var_1b261.519 to i8*), align 4
  %v1_fc04 = call i32 @function_10d74(i32 %v0_fbf4)
  %v0_fc08 = load i32, i32* @r5, align 4
  store i32 %v1_fc04, i32* @r7, align 4
  %v3_fc14 = call i32 @function_ffb4(i32 %v1_fc04, i32 ptrtoint (i32* @global_var_129c0.521 to i32), i32 %v0_fc08)
  %v0_fc1c = load i32, i32* @r7, align 4
  store i32 %v0_fc1c, i32* @global_var_1b264.522, align 4
  %v0_fc20 = load i32, i32* @r5, align 4
  %v1_fc20 = trunc i32 %v0_fc20 to i8
  store i8 %v1_fc20, i8* bitcast (i32* @global_var_1b268.523 to i8*), align 4
  %v0_fc24 = load i32, i32* @r6, align 4
  %v1_fc24 = trunc i32 %v0_fc24 to i8
  store i8 %v1_fc24, i8* bitcast (i32* @global_var_1b269.524 to i8*), align 4
  %v1_fc28 = call i32 @function_10d74(i32 19)
  store i32 %v1_fc28, i32* @r5, align 4
  store i32 19, i32* %sl.global-to-local, align 4
  %v4_fc3c = call i32 @function_ffb4(i32 %v1_fc28, i32 ptrtoint ([20 x i8]* @global_var_129c4.526 to i32), i32 19)
  %v0_fc44 = load i32, i32* @r5, align 4
  store i32 %v0_fc44, i32* @global_var_1b26c.527, align 4
  store i8 19, i8* bitcast (i32* @global_var_1b270.528 to i8*), align 4
  %v0_fc4c = load i32, i32* @r6, align 4
  %v1_fc4c = trunc i32 %v0_fc4c to i8
  store i8 %v1_fc4c, i8* bitcast (i32* @global_var_1b271.529 to i8*), align 4
  %v1_fc50 = call i32 @function_10d74(i32 6)
  store i32 6, i32* %r8.global-to-local, align 4
  store i32 %v1_fc50, i32* @r5, align 4
  %v4_fc64 = call i32 @function_ffb4(i32 %v1_fc50, i32 ptrtoint ([7 x i8]* @global_var_129d8.531 to i32), i32 6)
  %v0_fc6c = load i32, i32* @r5, align 4
  store i32 %v0_fc6c, i32* @global_var_1b274.532, align 4
  store i8 6, i8* bitcast (i32* @global_var_1b278.533 to i8*), align 4
  %v0_fc74 = load i32, i32* @r6, align 4
  %v1_fc74 = trunc i32 %v0_fc74 to i8
  store i8 %v1_fc74, i8* bitcast (i32* @global_var_1b279.534 to i8*), align 4
  %v1_fc78 = call i32 @function_10d74(i32 7)
  store i32 7, i32* @r5, align 4
  store i32 %v1_fc78, i32* @r7, align 4
  %v4_fc8c = call i32 @function_ffb4(i32 %v1_fc78, i32 ptrtoint ([8 x i8]* @global_var_129e0.536 to i32), i32 7)
  %v0_fc90 = load i32, i32* @r5, align 4
  %v0_fc94 = load i32, i32* @r7, align 4
  store i32 %v0_fc94, i32* @global_var_1b27c.537, align 4
  %v1_fc98 = trunc i32 %v0_fc90 to i8
  store i8 %v1_fc98, i8* bitcast (i32* @global_var_1b280.538 to i8*), align 4
  %v0_fc9c = load i32, i32* @r6, align 4
  %v1_fc9c = trunc i32 %v0_fc9c to i8
  store i8 %v1_fc9c, i8* bitcast (i32* @global_var_1b281.539 to i8*), align 4
  %v1_fca0 = call i32 @function_10d74(i32 %v0_fc90)
  %v0_fca4 = load i32, i32* @r5, align 4
  store i32 %v1_fca0, i32* @r7, align 4
  %v4_fcb0 = call i32 @function_ffb4(i32 %v1_fca0, i32 ptrtoint ([8 x i8]* @global_var_129e8.541 to i32), i32 %v0_fca4)
  %v0_fcb8 = load i32, i32* @r7, align 4
  store i32 %v0_fcb8, i32* @global_var_1b284.542, align 4
  %v0_fcbc = load i32, i32* @r5, align 4
  %v1_fcbc = trunc i32 %v0_fcbc to i8
  store i8 %v1_fcbc, i8* bitcast (i32* @global_var_1b288.543 to i8*), align 4
  %v0_fcc0 = load i32, i32* @r6, align 4
  %v1_fcc0 = trunc i32 %v0_fcc0 to i8
  store i8 %v1_fcc0, i8* bitcast (i32* @global_var_1b289.544 to i8*), align 4
  %v1_fcc4 = call i32 @function_10d74(i32 3)
  store i32 %v1_fcc4, i32* @r5, align 4
  %v4_fcd4 = call i32 @function_ffb4(i32 %v1_fcc4, i32 ptrtoint ([4 x i8]* @global_var_129f0.545 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1b290.546 to i8*), align 4
  %v0_fce4 = load i32, i32* @r5, align 4
  store i32 %v0_fce4, i32* @global_var_1b28c.547, align 4
  %v0_fce8 = load i32, i32* @r6, align 4
  %v1_fce8 = trunc i32 %v0_fce8 to i8
  store i8 %v1_fce8, i8* bitcast (i32* @global_var_1b291.548 to i8*), align 4
  %v1_fcec = call i32 @function_10d74(i32 24)
  store i32 %v1_fcec, i32* @r5, align 4
  %v3_fcfc = call i32 @function_ffb4(i32 %v1_fcec, i32 ptrtoint (i32* @global_var_129f4.550 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1b298.551 to i8*), align 4
  %v0_fd0c = load i32, i32* @r5, align 4
  store i32 %v0_fd0c, i32* @global_var_1b294.552, align 4
  %v0_fd10 = load i32, i32* @r6, align 4
  %v1_fd10 = trunc i32 %v0_fd10 to i8
  store i8 %v1_fd10, i8* bitcast (i32* @global_var_1b299.553 to i8*), align 4
  %v1_fd14 = call i32 @function_10d74(i32 29)
  store i32 %v1_fd14, i32* @r5, align 4
  %v3_fd24 = call i32 @function_ffb4(i32 %v1_fd14, i32 ptrtoint (i32* @global_var_12a10.555 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1b2a0.556 to i8*), align 4
  %v0_fd34 = load i32, i32* @r5, align 4
  store i32 %v0_fd34, i32* @global_var_1b29c.557, align 4
  %v0_fd38 = load i32, i32* @r6, align 4
  %v1_fd38 = trunc i32 %v0_fd38 to i8
  store i8 %v1_fd38, i8* bitcast (i32* @global_var_1b2a1.558 to i8*), align 4
  %v1_fd3c = call i32 @function_10d74(i32 9)
  store i32 %v1_fd3c, i32* @r5, align 4
  %v4_fd4c = call i32 @function_ffb4(i32 %v1_fd3c, i32 ptrtoint ([10 x i8]* @global_var_12a30.560 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1b2a8.561 to i8*), align 4
  %v0_fd5c = load i32, i32* @r5, align 4
  store i32 %v0_fd5c, i32* @global_var_1b2a4.562, align 4
  %v0_fd60 = load i32, i32* @r6, align 4
  %v1_fd60 = trunc i32 %v0_fd60 to i8
  store i8 %v1_fd60, i8* bitcast (i32* @global_var_1b2a9.563 to i8*), align 4
  %v1_fd64 = call i32 @function_10d74(i32 8)
  store i32 %v1_fd64, i32* @r5, align 4
  %v4_fd74 = call i32 @function_ffb4(i32 %v1_fd64, i32 ptrtoint ([9 x i8]* @global_var_12a3c.565 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1b2b0.566 to i8*), align 4
  %v0_fd84 = load i32, i32* @r5, align 4
  store i32 %v0_fd84, i32* @global_var_1b2ac.567, align 4
  %v0_fd88 = load i32, i32* @r6, align 4
  %v1_fd88 = trunc i32 %v0_fd88 to i8
  store i8 %v1_fd88, i8* bitcast (i32* @global_var_1b2b1.568 to i8*), align 4
  %v1_fd8c = call i32 @function_10d74(i32 5)
  store i32 %v1_fd8c, i32* @r5, align 4
  %v4_fd9c = call i32 @function_ffb4(i32 %v1_fd8c, i32 ptrtoint ([6 x i8]* @global_var_12a48.570 to i32), i32 5)
  %v0_fda4 = load i32, i32* %r8.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1b2b8.571 to i8*), align 4
  %v0_fdac = load i32, i32* @r5, align 4
  store i32 %v0_fdac, i32* @global_var_1b2b4.572, align 4
  %v0_fdb0 = load i32, i32* @r6, align 4
  %v1_fdb0 = trunc i32 %v0_fdb0 to i8
  store i8 %v1_fdb0, i8* bitcast (i32* @global_var_1b2b9.573 to i8*), align 4
  %v1_fdb4 = call i32 @function_10d74(i32 %v0_fda4)
  %v0_fdb8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_fdb4, i32* @r5, align 4
  %v4_fdc4 = call i32 @function_ffb4(i32 %v1_fdb4, i32 ptrtoint ([7 x i8]* @global_var_12a50.575 to i32), i32 %v0_fdb8)
  %v0_fdcc = load i32, i32* @r5, align 4
  store i32 %v0_fdcc, i32* @global_var_1b2bc.576, align 4
  %v1_fdd0 = trunc i32 %v0_fdb8 to i8
  store i8 %v1_fdd0, i8* bitcast (i32* @global_var_1b2c0.577 to i8*), align 4
  %v0_fdd4 = load i32, i32* @r6, align 4
  %v1_fdd4 = trunc i32 %v0_fdd4 to i8
  store i8 %v1_fdd4, i8* bitcast (i32* @global_var_1b2c1.578 to i8*), align 4
  %v1_fdd8 = call i32 @function_10d74(i32 21)
  store i32 %v1_fdd8, i32* @r5, align 4
  store i32 21, i32* @r7, align 4
  %v3_fdec = call i32 @function_ffb4(i32 %v1_fdd8, i32 ptrtoint (i32* @global_var_12a58.580 to i32), i32 21)
  %v0_fdf4 = load i32, i32* @r5, align 4
  store i32 %v0_fdf4, i32* @global_var_1b2c4.581, align 4
  %v0_fdf8 = load i32, i32* @r7, align 4
  %v1_fdf8 = trunc i32 %v0_fdf8 to i8
  store i8 %v1_fdf8, i8* bitcast (i32* @global_var_1b2c8.582 to i8*), align 4
  %v0_fdfc = load i32, i32* @r6, align 4
  %v1_fdfc = trunc i32 %v0_fdfc to i8
  store i8 %v1_fdfc, i8* bitcast (i32* @global_var_1b2c9.583 to i8*), align 4
  %v1_fe00 = call i32 @function_10d74(i32 17)
  store i32 %v1_fe00, i32* @r5, align 4
  %v3_fe10 = call i32 @function_ffb4(i32 %v1_fe00, i32 ptrtoint (i32* @global_var_12a70.585 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1b2d0.586 to i8*), align 4
  %v0_fe20 = load i32, i32* @r5, align 4
  store i32 %v0_fe20, i32* @global_var_1b2cc.587, align 4
  %v0_fe24 = load i32, i32* @r6, align 4
  %v1_fe24 = trunc i32 %v0_fe24 to i8
  store i8 %v1_fe24, i8* bitcast (i32* @global_var_1b2d1.588 to i8*), align 4
  %v1_fe28 = call i32 @function_10d74(i32 11)
  store i32 %v1_fe28, i32* @r5, align 4
  %v0_fe38 = load i32, i32* %r8.global-to-local, align 4
  %v1_fe38 = add i32 %v0_fe38, 5
  store i32 %v1_fe38, i32* %r8.global-to-local, align 4
  %v4_fe3c = call i32 @function_ffb4(i32 %v1_fe28, i32 ptrtoint ([12 x i8]* @global_var_12a84.590 to i32), i32 11)
  %v0_fe40 = load i32, i32* @r7, align 4
  %v0_fe44 = load i32, i32* @r5, align 4
  store i32 %v0_fe44, i32* @global_var_1b2d4.591, align 4
  %v1_fe48 = trunc i32 %v1_fe38 to i8
  store i8 %v1_fe48, i8* bitcast (i32* @global_var_1b2d8.592 to i8*), align 4
  %v0_fe4c = load i32, i32* @r6, align 4
  %v1_fe4c = trunc i32 %v0_fe4c to i8
  store i8 %v1_fe4c, i8* bitcast (i32* @global_var_1b2d9.593 to i8*), align 4
  %v1_fe50 = call i32 @function_10d74(i32 %v0_fe40)
  %v0_fe58 = load i32, i32* @r7, align 4
  store i32 %v1_fe50, i32* @r5, align 4
  %v3_fe60 = call i32 @function_ffb4(i32 %v1_fe50, i32 ptrtoint (i32* @global_var_12a90.595 to i32), i32 %v0_fe58)
  %v0_fe64 = load i32, i32* %sl.global-to-local, align 4
  %v0_fe68 = load i32, i32* @r5, align 4
  store i32 %v0_fe68, i32* @global_var_1b2dc.596, align 4
  %v0_fe6c = load i32, i32* @r7, align 4
  %v1_fe6c = trunc i32 %v0_fe6c to i8
  store i8 %v1_fe6c, i8* bitcast (i32* @global_var_1b2e0.597 to i8*), align 4
  %v0_fe70 = load i32, i32* @r6, align 4
  %v1_fe70 = trunc i32 %v0_fe70 to i8
  store i8 %v1_fe70, i8* bitcast (i32* @global_var_1b2e1.598 to i8*), align 4
  %v1_fe74 = call i32 @function_10d74(i32 %v0_fe64)
  %v0_fe7c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_fe74, i32* @r5, align 4
  %v3_fe84 = call i32 @function_ffb4(i32 %v1_fe74, i32 ptrtoint (i32* @global_var_12aa8.600 to i32), i32 %v0_fe7c)
  %v0_fe8c = load i32, i32* @r5, align 4
  store i32 %v0_fe8c, i32* @global_var_1b2e4.601, align 4
  %v1_fe90 = trunc i32 %v0_fe7c to i8
  store i8 %v1_fe90, i8* bitcast (i32* @global_var_1b2e8.602 to i8*), align 4
  %v0_fe94 = load i32, i32* @r6, align 4
  %v1_fe94 = trunc i32 %v0_fe94 to i8
  store i8 %v1_fe94, i8* bitcast (i32* @global_var_1b2e9.603 to i8*), align 4
  %v1_fe98 = call i32 @function_10d74(i32 23)
  store i32 %v1_fe98, i32* @r5, align 4
  %v3_fea8 = call i32 @function_ffb4(i32 %v1_fe98, i32 ptrtoint (i32* @global_var_12abc.605 to i32), i32 23)
  %v0_feb0 = load i32, i32* %r8.global-to-local, align 4
  %v0_feb4 = load i32, i32* @r5, align 4
  store i32 %v0_feb4, i32* @global_var_1b2ec.606, align 4
  store i8 23, i8* bitcast (i32* @global_var_1b2f0.607 to i8*), align 4
  %v0_febc = load i32, i32* @r6, align 4
  %v1_febc = trunc i32 %v0_febc to i8
  store i8 %v1_febc, i8* bitcast (i32* @global_var_1b2f1.608 to i8*), align 4
  %v1_fec0 = call i32 @function_10d74(i32 %v0_feb0)
  %v0_fec8 = load i32, i32* %r8.global-to-local, align 4
  %v4_fed0 = call i32 @function_ffb4(i32 %v1_fec0, i32 ptrtoint ([12 x i8]* @global_var_12ad4.610 to i32), i32 %v0_fec8)
  %v0_fed4 = load i32, i32* @r6, align 4
  %v1_fed4 = trunc i32 %v0_fed4 to i8
  store i8 %v1_fed4, i8* bitcast (i32* @global_var_1b2f9.611 to i8*), align 4
  store i32 %v1_fec0, i32* @global_var_1b2f4.612, align 4
  %v1_fedc = trunc i32 %v0_fec8 to i8
  store i8 %v1_fedc, i8* bitcast (i32* @global_var_1b2f8.613 to i8*), align 4
  %v2_fee0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_fee0, i32* @r4, align 4
  store i32 %v6_fbcc, i32* @r5, align 4
  store i32 %v9_fbcc, i32* @r6, align 4
  store i32 %v12_fbcc, i32* @r7, align 4
  ret i32 %v4_fed0

; uselistorder directives
  uselistorder i32 %v1_fe74, { 1, 0 }
  uselistorder i32 %v1_fe50, { 1, 0 }
  uselistorder i32 %v1_fdb4, { 1, 0 }
  uselistorder i32 %v1_fca0, { 1, 0 }
  uselistorder i32 %v1_fc78, { 1, 0 }
  uselistorder i32 %v1_fc50, { 1, 0 }
  uselistorder i32 %v1_fc04, { 1, 0 }
  uselistorder i32 %v1_fbd4, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 23, { 1, 0, 3, 4, 2 }
  uselistorder i8 17, { 1, 0, 2, 3 }
  uselistorder i32 21, { 1, 4, 0, 3, 5, 6, 2 }
  uselistorder i8 5, { 10, 11, 0, 1, 12, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 9, { 4, 2, 27, 8, 22, 9, 23, 10, 24, 6, 26, 19, 7, 25, 5, 1, 28, 20, 29, 0, 21, 11, 30, 12, 31, 13, 32, 14, 33, 34, 3, 15, 16, 17, 46, 35, 36, 18, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48 }
  uselistorder i32 29, { 1, 0, 3, 4, 2 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 0, 3, 1, 4, 2 }
  uselistorder i32 19, { 1, 6, 2, 0, 7, 3, 4, 5, 8 }
  uselistorder i32 (i32, i32, i32)* @function_ffb4, { 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 7, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1b254.508 to i32), { 5, 0, 1, 2, 3, 4, 6 }
}

define i32 @function_ff38(i8* %arg1) local_unnamed_addr {
dec_label_pc_ff38:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_ff3c = load i8, i8* %arg1, align 1
  %v4_ff3c = zext i8 %v3_ff3c to i32
  %v2_ff40 = icmp eq i8 %v3_ff3c, 0
  br i1 %v2_ff40, label %dec_label_pc_ff5c, label %bb

dec_label_pc_ff5c:                                ; preds = %dec_label_pc_ff4c, %dec_label_pc_ff38
  %merge = phi i32 [ %v4_ff3c, %dec_label_pc_ff38 ], [ %v1_ff4c, %dec_label_pc_ff4c ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_ff38
  br label %dec_label_pc_ff4c

dec_label_pc_ff4c:                                ; preds = %dec_label_pc_ff4c, %bb
  %v0_ff4c = phi i32 [ %v1_ff4c, %dec_label_pc_ff4c ], [ 0, %bb ]
  %v1_ff4c = add i32 %v0_ff4c, 1
  %v2_ff50 = add i32 %v1_ff4c, %tmp
  %v3_ff50 = inttoptr i32 %v2_ff50 to i8*
  %v4_ff50 = load i8, i8* %v3_ff50, align 1
  %v2_ff54 = icmp eq i8 %v4_ff50, 0
  br i1 %v2_ff54, label %dec_label_pc_ff5c, label %dec_label_pc_ff4c

; uselistorder directives
  uselistorder i32 %v1_ff4c, { 1, 0, 2 }
}

define i32 @function_ff60(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ff60:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_ff60 = load i8, i8* %arg1, align 1
  %v3_ff60 = zext i8 %v2_ff60 to i32
  %v2_ff64 = icmp eq i8 %v2_ff60, 0
  br i1 %v2_ff64, label %dec_label_pc_ffa8, label %dec_label_pc_ff6c

dec_label_pc_ff6c:                                ; preds = %dec_label_pc_ff60
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff70

dec_label_pc_ff70:                                ; preds = %dec_label_pc_ff70, %dec_label_pc_ff6c
  %v0_ff70 = phi i32 [ %v1_ff70, %dec_label_pc_ff70 ], [ 0, %dec_label_pc_ff6c ]
  %v1_ff70 = add i32 %v0_ff70, 1
  store i32 %v1_ff70, i32* %ip.global-to-local, align 4
  %v2_ff74 = add i32 %v1_ff70, %tmp
  %v3_ff74 = inttoptr i32 %v2_ff74 to i8*
  %v4_ff74 = load i8, i8* %v3_ff74, align 1
  %v2_ff78 = icmp eq i8 %v4_ff74, 0
  br i1 %v2_ff78, label %dec_label_pc_ff80, label %dec_label_pc_ff70

dec_label_pc_ff80:                                ; preds = %dec_label_pc_ff70
  %v7_ff80 = icmp eq i32 %v0_ff70, -2
  br i1 %v7_ff80, label %dec_label_pc_ffa0, label %dec_label_pc_ff8c.preheader

dec_label_pc_ff8c.preheader:                      ; preds = %dec_label_pc_ff80, %dec_label_pc_ffa8
  %storemerge = phi i32 [ %v3_ff60, %dec_label_pc_ffa8 ], [ %v1_ff70, %dec_label_pc_ff80 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_ff98.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ff8c.dec_label_pc_ff8c_crit_edge, %dec_label_pc_ff8c.preheader
  %v2_ff98 = phi i32 [ %v5_ff98, %dec_label_pc_ff8c.dec_label_pc_ff8c_crit_edge ], [ %v2_ff98.pre, %dec_label_pc_ff8c.preheader ]
  %v0_ff90 = phi i32 [ %v0_ff90.pre, %dec_label_pc_ff8c.dec_label_pc_ff8c_crit_edge ], [ %tmp, %dec_label_pc_ff8c.preheader ]
  %v0_ff8c = phi i32 [ %v0_ff8c.pre, %dec_label_pc_ff8c.dec_label_pc_ff8c_crit_edge ], [ %storemerge, %dec_label_pc_ff8c.preheader ]
  %v1_ff8c = add i32 %v0_ff8c, -1
  store i32 %v1_ff8c, i32* %r2.global-to-local, align 4
  %v1_ff90 = inttoptr i32 %v0_ff90 to i8*
  %v2_ff90 = load i8, i8* %v1_ff90, align 1
  %v5_ff90 = add i32 %v0_ff90, 1
  store i32 %v5_ff90, i32* %r1.global-to-local, align 4
  %v3_ff94 = icmp eq i32 %v0_ff8c, 0
  %v3_ff98 = inttoptr i32 %v2_ff98 to i8*
  store i8 %v2_ff90, i8* %v3_ff98, align 1
  %v4_ff98 = load i32, i32* @r0, align 4
  %v5_ff98 = add i32 %v4_ff98, 1
  store i32 %v5_ff98, i32* @r0, align 4
  br i1 %v3_ff94, label %dec_label_pc_ffa0.loopexit, label %dec_label_pc_ff8c.dec_label_pc_ff8c_crit_edge

dec_label_pc_ff8c.dec_label_pc_ff8c_crit_edge:    ; preds = %dec_label_pc_ff8c
  %v0_ff8c.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_ff90.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ff8c

dec_label_pc_ffa0.loopexit:                       ; preds = %dec_label_pc_ff8c
  %v0_ffa0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ffa0

dec_label_pc_ffa0:                                ; preds = %dec_label_pc_ffa0.loopexit, %dec_label_pc_ff80
  %v0_ffa0 = phi i32 [ %v0_ffa0.pre, %dec_label_pc_ffa0.loopexit ], [ %v1_ff70, %dec_label_pc_ff80 ]
  ret i32 %v0_ffa0

dec_label_pc_ffa8:                                ; preds = %dec_label_pc_ff60
  store i32 %v3_ff60, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff8c.preheader

; uselistorder directives
  uselistorder i32 %v5_ff98, { 1, 0 }
  uselistorder i32 %v0_ff90, { 1, 0 }
  uselistorder i32 %v1_ff70, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_ff60, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ff8c.preheader, { 1, 0 }
}

define i32 @function_ffb4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ffb4:
  %v2_ffb4 = icmp eq i32 %arg3, 0
  br i1 %v2_ffb4, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_ffc0, %dec_label_pc_ffb4
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_ffb4
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_ffc0

dec_label_pc_ffc0:                                ; preds = %dec_label_pc_ffc0, %bb
  %v0_ffc0 = phi i32 [ %v1_ffc8, %dec_label_pc_ffc0 ], [ 0, %bb ]
  %v2_ffc0 = add i32 %v0_ffc0, %arg2
  %v3_ffc0 = inttoptr i32 %v2_ffc0 to i8*
  %v4_ffc0 = load i8, i8* %v3_ffc0, align 1
  %v4_ffc4 = add i32 %v0_ffc0, %arg1
  %v5_ffc4 = inttoptr i32 %v4_ffc4 to i8*
  store i8 %v4_ffc0, i8* %v5_ffc4, align 1
  %v0_ffc8 = load i32, i32* @ip, align 4
  %v1_ffc8 = add i32 %v0_ffc8, 1
  store i32 %v1_ffc8, i32* @ip, align 4
  %v9_ffcc = icmp eq i32 %v1_ffc8, %arg3
  br i1 %v9_ffcc, label %.loopexit, label %dec_label_pc_ffc0

; uselistorder directives
  uselistorder i32 %v1_ffc8, { 1, 2, 0 }
}

define i32 @function_ffd8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ffd8:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_ffd8 = icmp eq i32 %arg2, 0
  br i1 %v2_ffd8, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_ffe8, %dec_label_pc_ffd8
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_ffd8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ffe8

dec_label_pc_ffe8:                                ; preds = %dec_label_pc_ffe8.dec_label_pc_ffe8_crit_edge, %bb
  %v2_ffe8 = phi i32 [ %v1_ffec, %dec_label_pc_ffe8.dec_label_pc_ffe8_crit_edge ], [ 0, %bb ]
  %v0_ffe8.off0 = phi i8 [ %extract.t, %dec_label_pc_ffe8.dec_label_pc_ffe8_crit_edge ], [ 0, %bb ]
  %v4_ffe8 = add i32 %v2_ffe8, %arg1
  %v5_ffe8 = inttoptr i32 %v4_ffe8 to i8*
  store i8 %v0_ffe8.off0, i8* %v5_ffe8, align 1
  %v0_ffec = load i32, i32* %r3.global-to-local, align 4
  %v1_ffec = add i32 %v0_ffec, 1
  store i32 %v1_ffec, i32* %r3.global-to-local, align 4
  %v9_fff0 = icmp eq i32 %v1_ffec, %arg2
  br i1 %v9_fff0, label %.loopexit, label %dec_label_pc_ffe8.dec_label_pc_ffe8_crit_edge

dec_label_pc_ffe8.dec_label_pc_ffe8_crit_edge:    ; preds = %dec_label_pc_ffe8
  %v0_ffe8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_ffe8.pre to i8
  br label %dec_label_pc_ffe8

; uselistorder directives
  uselistorder i32 %v1_ffec, { 1, 2, 0 }
}

define i32 @function_fffc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fffc:
  %v7_10010 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10010, label %dec_label_pc_10014, label %dec_label_pc_1001c

dec_label_pc_10014:                               ; preds = %dec_label_pc_10030, %dec_label_pc_fffc, %dec_label_pc_1001c
  ret i32 -1

dec_label_pc_1001c:                               ; preds = %dec_label_pc_fffc
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_10014, label %dec_label_pc_10024

dec_label_pc_10024:                               ; preds = %dec_label_pc_1001c
  br label %dec_label_pc_1003c

dec_label_pc_10030:                               ; preds = %dec_label_pc_10054, %dec_label_pc_1003c
  %v1_10030 = add i32 %v0_1005c, 1
  %v9_10034 = icmp eq i32 %v1_10030, %arg2
  br i1 %v9_10034, label %dec_label_pc_10014, label %dec_label_pc_1003c

dec_label_pc_1003c:                               ; preds = %dec_label_pc_10030, %dec_label_pc_10024
  %v0_1005c = phi i32 [ %v1_10030, %dec_label_pc_10030 ], [ 0, %dec_label_pc_10024 ]
  %v0_10048 = phi i32 [ %v1_10048., %dec_label_pc_10030 ], [ 0, %dec_label_pc_10024 ]
  %v2_1003c = add i32 %v0_10048, %arg3
  %v3_1003c = inttoptr i32 %v2_1003c to i8*
  %v4_1003c = load i8, i8* %v3_1003c, align 1
  %v2_10040 = add i32 %v0_1005c, %arg1
  %v3_10040 = inttoptr i32 %v2_10040 to i8*
  %v4_10040 = load i8, i8* %v3_10040, align 1
  %v9_10044 = icmp eq i8 %v4_10040, %v4_1003c
  %v1_10048 = add i32 %v0_10048, 1
  %v1_10048. = select i1 %v9_10044, i32 %v1_10048, i32 0
  br i1 %v9_10044, label %dec_label_pc_10054, label %dec_label_pc_10030

dec_label_pc_10054:                               ; preds = %dec_label_pc_1003c
  %v9_10054 = icmp eq i32 %v1_10048., %arg4
  br i1 %v9_10054, label %dec_label_pc_1005c, label %dec_label_pc_10030

dec_label_pc_1005c:                               ; preds = %dec_label_pc_10054
  %v1_1005c = add i32 %v0_1005c, 1
  ret i32 %v1_1005c

; uselistorder directives
  uselistorder i1 %v9_10044, { 1, 0 }
  uselistorder i32 %v0_10048, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10014, { 0, 2, 1 }
}

define i32 @function_10064(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10064:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_10064 = load i32, i32* @r4, align 4
  store i32 %v3_10064, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10070

dec_label_pc_10070:                               ; preds = %.thread, %dec_label_pc_10088, %bb, %dec_label_pc_10064
  %v0_10070 = phi i32 [ %tmp, %dec_label_pc_10064 ], [ %v5_10070, %bb ], [ %v5_10070, %dec_label_pc_10088 ], [ %v5_10070, %.thread ]
  %v1_10070 = inttoptr i32 %v0_10070 to i8*
  %v2_10070 = load i8, i8* %v1_10070, align 1
  %v3_10070 = zext i8 %v2_10070 to i32
  %v5_10070 = add i32 %v0_10070, 1
  store i32 %v5_10070, i32* %r5.global-to-local, align 4
  %v7_10078 = icmp eq i8 %v2_10070, 9
  br i1 %v7_10078, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10070
  store i32 %v3_10070, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10070

bb:                                               ; preds = %dec_label_pc_10070
  %v8_1007c = icmp eq i8 %v2_10070, 32
  store i32 %v3_10070, i32* %r4.global-to-local, align 4
  br i1 %v8_1007c, label %dec_label_pc_10070, label %dec_label_pc_10088

dec_label_pc_10088:                               ; preds = %bb
  %v7_10088 = icmp eq i8 %v2_10070, 10
  br i1 %v7_10088, label %dec_label_pc_10070, label %dec_label_pc_10090

dec_label_pc_10090:                               ; preds = %dec_label_pc_10088
  %v7_10090 = icmp eq i8 %v2_10070, 45
  br i1 %v7_10090, label %dec_label_pc_10170, label %dec_label_pc_10098

dec_label_pc_10098:                               ; preds = %dec_label_pc_10090
  %v7_10098 = icmp eq i8 %v2_10070, 43
  br i1 %v7_10098, label %bb48, label %dec_label_pc_100a8

bb48:                                             ; preds = %dec_label_pc_10098
  %v2_1009c = inttoptr i32 %v5_10070 to i8*
  %v3_1009c = load i8, i8* %v2_1009c, align 1
  %v4_1009c = zext i8 %v3_1009c to i32
  store i32 %v4_1009c, i32* %r4.global-to-local, align 4
  %v6_1009c = add i32 %v0_10070, 2
  store i32 %v6_1009c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_100a8

dec_label_pc_100a8:                               ; preds = %bb48, %dec_label_pc_10098, %dec_label_pc_10170
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10170 ], [ 2147483647, %dec_label_pc_10098 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10170 ], [ 0, %dec_label_pc_10098 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_100b0 = call i32 @function_103c8(i32 %storemerge1, i32 %arg2)
  %v0_100b4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_100b4, i32* @r1, align 4
  store i32 %v2_100b0, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_100c0 = call i32 @function_102b8()
  store i32 %v0_100c0, i32* @lr, align 4
  %v0_100d0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %.thread8, %dec_label_pc_100a8
  %v2_1014c11 = phi i32 [ %v1_1016826, %.thread8 ], [ 0, %dec_label_pc_100a8 ]
  %v1_10128 = phi i32 [ %v0_1015c24, %.thread8 ], [ 0, %dec_label_pc_100a8 ]
  %v1_10110 = phi i32 [ %v3_10154, %.thread8 ], [ %v0_100d0.pre, %dec_label_pc_100a8 ]
  %v1_100d0 = urem i32 %v1_10110, 256
  %v1_100d4 = add nsw i32 %v1_100d0, -48
  %v1_100dc = add nsw i32 %v1_100d0, -97
  %v1_100e0 = add i32 %v1_10110, -48
  %v1_100e4 = add nsw i32 %v1_100d0, -65
  %tmp71 = icmp ult i32 %v1_100d4, 10
  br i1 %tmp71, label %dec_label_pc_10114, label %dec_label_pc_100ec

dec_label_pc_100ec:                               ; preds = %dec_label_pc_100d0
  %v2_100ec = icmp ugt i32 %v1_100e4, 24
  %v7_100ec = icmp eq i32 %v1_100e4, 25
  %v2_100f0 = xor i1 %v7_100ec, true
  %v3_100f0 = and i1 %v2_100ec, %v2_100f0
  br i1 %v3_100f0, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_100ec
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_100ec, %bb49
  %v0_1010420 = phi i32 [ %v1_100e0, %dec_label_pc_100ec ], [ 0, %bb49 ]
  %v2_100f4 = xor i1 %v2_100ec, true
  %v3_100f4 = or i1 %v7_100ec, %v2_100f4
  br i1 %v3_100f4, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_10104 = phi i32 [ %v0_1010420, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_100f0, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_100fc = icmp ugt i32 %v1_100dc, 24
  %v11_100fc = icmp eq i32 %v1_100dc, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_10100 = phi i1 [ %v7_100ec, %bb52 ], [ %v11_100fc, %bb53 ]
  %v0_10100 = phi i1 [ %v2_100ec, %bb52 ], [ %v6_100fc, %bb53 ]
  %v2_10100 = xor i1 %v1_10100, true
  %v3_10100 = and i1 %v0_10100, %v2_10100
  br i1 %v3_10100, label %dec_label_pc_1015c, label %dec_label_pc_10104

dec_label_pc_10104:                               ; preds = %bb54
  %v2_10104 = icmp eq i32 %v0_10104, 0
  %. = select i1 %v2_10104, i32 87, i32 55
  %v2_10110 = sub i32 %v1_10110, %.
  br label %dec_label_pc_10114

dec_label_pc_10114:                               ; preds = %dec_label_pc_100d0, %dec_label_pc_10104
  %v0_1012834 = phi i32 [ %v1_100e4, %dec_label_pc_100d0 ], [ %., %dec_label_pc_10104 ]
  %v3_1014c12 = phi i32 [ %v1_100e0, %dec_label_pc_100d0 ], [ %v2_10110, %dec_label_pc_10104 ]
  %v1_10114 = load i32, i32* %r6.global-to-local, align 4
  %v6_10118 = icmp slt i32 %v3_1014c12, %v1_10114
  br i1 %v6_10118, label %dec_label_pc_1011c, label %dec_label_pc_1015c

dec_label_pc_1011c:                               ; preds = %dec_label_pc_10114
  %v3_1011c = icmp uge i32 %v2_1014c11, %v0_100c0
  %v9_1011c = icmp eq i32 %v2_1014c11, %v0_100c0
  %v2_10120 = xor i1 %v3_1011c, true
  %v3_10120 = or i1 %v9_1011c, %v2_10120
  br i1 %v3_10120, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_1011c
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_1011c, %bb57
  %v0_1012833 = phi i32 [ %v0_1012834, %dec_label_pc_1011c ], [ 0, %bb57 ]
  %v2_10124 = xor i1 %v9_1011c, true
  %v3_10124 = and i1 %v3_1011c, %v2_10124
  br i1 %v3_10124, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_10128 = phi i32 [ %v0_1012833, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_10128, 0
  %v4_10128 = zext i1 %tmp72 to i32
  %v5_10128 = or i32 %v0_10128, %v4_10128
  %v7_10128 = icmp eq i32 %v5_10128, 0
  br i1 %v7_10128, label %dec_label_pc_10134, label %.thread8

dec_label_pc_10134:                               ; preds = %bb60
  %v1_10140 = load i32, i32* %r8.global-to-local, align 4
  %v7_10144 = icmp sgt i32 %v3_1014c12, %v1_10140
  br i1 %v7_10144, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_10134
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_10134
  %v2_10148 = icmp eq i1 %v9_1011c, false
  br i1 %v2_10148, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_1014c13 = mul i32 %v1_10114, %v2_1014c11
  %v5_1014c14 = add i32 %v4_1014c13, %v3_1014c12
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1016826 = phi i32 [ %v2_1014c11, %bb63 ], [ %v2_1014c11, %bb60 ], [ %v5_1014c14, %bb64 ]
  %v0_1015c24 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_10154 = load i32, i32* %r5.global-to-local, align 4
  %v1_10154 = inttoptr i32 %v0_10154 to i8*
  %v2_10154 = load i8, i8* %v1_10154, align 1
  %v3_10154 = zext i8 %v2_10154 to i32
  store i32 %v3_10154, i32* %r4.global-to-local, align 4
  %v5_10154 = add i32 %v0_10154, 1
  store i32 %v5_10154, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_100d0

dec_label_pc_1015c:                               ; preds = %dec_label_pc_10114, %bb54
  %v1_1015c = icmp slt i32 %v1_10128, 0
  %v0_10180 = load i32, i32* %sl.global-to-local, align 4
  %v2_10180 = icmp eq i32 %v0_10180, 0
  br i1 %v1_1015c, label %dec_label_pc_10180, label %dec_label_pc_10164

dec_label_pc_10164:                               ; preds = %dec_label_pc_1015c
  br i1 %v2_10180, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_10164
  %v2_10168 = sub i32 0, %v2_1014c11
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_10164, %bb65
  %v23_1016c = phi i32 [ %v2_1014c11, %dec_label_pc_10164 ], [ %v2_10168, %bb65 ]
  %v2_1016c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1016c, i32* @r4, align 4
  ret i32 %v23_1016c

dec_label_pc_10170:                               ; preds = %dec_label_pc_10090
  %v1_10170 = inttoptr i32 %v5_10070 to i8*
  %v2_10170 = load i8, i8* %v1_10170, align 1
  %v3_10170 = zext i8 %v2_10170 to i32
  store i32 %v3_10170, i32* %r4.global-to-local, align 4
  %v5_10170 = add i32 %v0_10070, 2
  store i32 %v5_10170, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_100a8

dec_label_pc_10180:                               ; preds = %dec_label_pc_1015c
  %.70 = select i1 %v2_10180, i32 2147483647, i32 -2147483648
  %v2_1018c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1018c, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_10154, { 1, 0 }
  uselistorder i1 %v9_1011c, { 1, 0, 2 }
  uselistorder i1 %v3_1011c, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_100ec, { 1, 2, 0 }
  uselistorder i1 %v2_100ec, { 1, 0, 2 }
  uselistorder i32 %v1_100d0, { 1, 2, 0 }
  uselistorder i32 %v1_10110, { 1, 2, 0 }
  uselistorder i32 %v1_10128, { 1, 0 }
  uselistorder i32 %v2_1014c11, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_100c0, { 1, 0, 2 }
  uselistorder i32 %v5_10070, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_10070, { 1, 0 }
  uselistorder i32 %v0_10070, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32 55, { 0, 2, 1 }
  uselistorder i32 25, { 5, 6, 1, 2, 3, 4, 0 }
  uselistorder i32 (i32, i32)* @function_103c8, { 1, 5, 0, 4, 3, 2 }
  uselistorder i8 9, { 2, 3, 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_10114, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_100a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10070, { 1, 2, 0, 3 }
}

define i32 @function_10190() local_unnamed_addr {
dec_label_pc_10190:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_10190 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_101a0 = call i32 @function_1093c()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_101a8 = inttoptr i32 %v0_101a0 to i32*
  store i32 0, i32* %v2_101a8, align 4
  %v0_101b4 = load i32, i32* %r6.global-to-local, align 4
  %v3_101b8 = call i32 @function_10bdc(i32 2, i32 2, i32 %v0_101b4)
  %v7_101c4 = icmp eq i32 %v3_101b8, -1
  store i32 %v3_101b8, i32* %r5.global-to-local, align 4
  %v2_101d0 = load i32, i32* @r4, align 4
  br i1 %v7_101c4, label %dec_label_pc_10220, label %dec_label_pc_101e4

dec_label_pc_101e4:                               ; preds = %dec_label_pc_10190
  %v7_101d0 = shl i32 2056, %v2_101d0
  %v8_101d0 = or i32 %v7_101d0, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_10200 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_10200 = call i32 @function_10a38(i32 %v3_101b8, %sockaddr* %v3_10200, i32 %v2_101d0)
  %v2_10208 = ptrtoint i32* %stack_var_-24 to i32
  %v0_1020c = load i32, i32* %r5.global-to-local, align 4
  %v4_10210 = call i32 @function_10a64(i32 %v0_1020c, %sockaddr* %v3_10200, i32 %v2_10208)
  %v1_10218 = call i32 @function_10640(i32 %v0_1020c)
  br label %dec_label_pc_10220

dec_label_pc_10220:                               ; preds = %dec_label_pc_10190, %dec_label_pc_101e4
  %v0_10220 = phi i32 [ %v0_101b4, %dec_label_pc_10190 ], [ %v8_101d0, %dec_label_pc_101e4 ]
  store i32 %v3_10190, i32* @r4, align 4
  ret i32 %v0_10220

; uselistorder directives
  uselistorder i32 %v3_101b8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32)* @function_10640, { 20, 24, 19, 23, 18, 22, 21, 17, 16, 15, 14, 13, 12, 11, 10, 2, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_10a38, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10bdc, { 15, 16, 13, 14, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10220, { 1, 0 }
}

define i32 @function_1022c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1022c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_10230 = load i8, i8* %tmp, align 1
  %v2_10234 = icmp eq i8 %v3_10230, 0
  br i1 %v2_10234, label %bb, label %dec_label_pc_10248

bb:                                               ; preds = %dec_label_pc_1022c
  %v4_10230 = zext i8 %v3_10230 to i32
  br label %dec_label_pc_1025c

dec_label_pc_10248:                               ; preds = %dec_label_pc_1022c
  br label %dec_label_pc_1024c

dec_label_pc_1024c:                               ; preds = %dec_label_pc_1024c, %dec_label_pc_10248
  %v0_1024c = phi i32 [ %v1_1024c, %dec_label_pc_1024c ], [ 0, %dec_label_pc_10248 ]
  %v1_1024c = add i32 %v0_1024c, 1
  %v2_10250 = add i32 %v1_1024c, %arg2
  %v3_10250 = inttoptr i32 %v2_10250 to i8*
  %v4_10250 = load i8, i8* %v3_10250, align 1
  %v2_10254 = icmp eq i8 %v4_10250, 0
  br i1 %v2_10254, label %dec_label_pc_1025c, label %dec_label_pc_1024c

dec_label_pc_1025c:                               ; preds = %dec_label_pc_1024c, %bb
  %v0_102a018 = phi i32 [ %v4_10230, %bb ], [ %v1_1024c, %dec_label_pc_1024c ]
  %v0_102641 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_102641, 1
  br i1 %tmp27, label %dec_label_pc_102b0, label %dec_label_pc_10270

dec_label_pc_10270:                               ; preds = %dec_label_pc_1025c, %dec_label_pc_10264.backedge
  %v0_10268.in = phi i32 [ %v0_10268, %dec_label_pc_10264.backedge ], [ %v0_102641, %dec_label_pc_1025c ]
  %v0_10294 = phi i32 [ %v1_10294., %dec_label_pc_10264.backedge ], [ 0, %dec_label_pc_1025c ]
  %v0_10270 = phi i32 [ %v5_10270, %dec_label_pc_10264.backedge ], [ %tmp20, %dec_label_pc_1025c ]
  %v0_10268 = add i32 %v0_10268.in, -1
  %v1_10270 = inttoptr i32 %v0_10270 to i8*
  %v2_10270 = load i8, i8* %v1_10270, align 1
  %v3_10270 = zext i8 %v2_10270 to i32
  %v5_10270 = add i32 %v0_10270, 1
  %v2_10274 = add i32 %v0_10294, %arg2
  %v3_10274 = inttoptr i32 %v2_10274 to i8*
  %v4_10274 = load i8, i8* %v3_10274, align 1
  %v6_10274 = zext i8 %v4_10274 to i32
  %v1_10278 = add nsw i32 %v3_10270, -65
  %v1_1027c = add nsw i32 %v6_10274, -65
  %tmp35 = icmp ult i32 %v1_10278, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_10270
  %v5_10284 = or i32 %v3_10270, 96
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_10270, %bb28
  %v0_10290 = phi i32 [ %v3_10270, %dec_label_pc_10270 ], [ %v5_10284, %bb28 ]
  %tmp36 = icmp ult i32 %v1_1027c, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_1028c = or i32 %v6_10274, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_10290 = phi i32 [ %v6_10274, %bb29 ], [ %v5_1028c, %bb30 ]
  %v9_10290 = icmp eq i32 %v0_10290, %v1_10290
  %v1_10294 = add i32 %v0_10294, 1
  %v1_10294. = select i1 %v9_10290, i32 %v1_10294, i32 0
  br i1 %v9_10290, label %dec_label_pc_102a0, label %dec_label_pc_10264.backedge

dec_label_pc_10264.backedge:                      ; preds = %bb31, %dec_label_pc_102a0
  %tmp32 = icmp slt i32 %v0_10268, 1
  br i1 %tmp32, label %dec_label_pc_102b0, label %dec_label_pc_10270

dec_label_pc_102a0:                               ; preds = %bb31
  %v9_102a0 = icmp eq i32 %v0_102a018, %v1_10294.
  br i1 %v9_102a0, label %dec_label_pc_102a8, label %dec_label_pc_10264.backedge

dec_label_pc_102a8:                               ; preds = %dec_label_pc_102a0
  %v2_102a8 = sub i32 %v5_10270, %tmp20
  ret i32 %v2_102a8

dec_label_pc_102b0:                               ; preds = %dec_label_pc_10264.backedge, %dec_label_pc_1025c
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_10294., { 1, 0 }
  uselistorder i32 %v0_10270, { 1, 0 }
  uselistorder i32 %v0_10294, { 1, 0 }
  uselistorder i8 %v3_10230, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_10264.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_10270, { 1, 0 }
}

define i32 @function_102b8() local_unnamed_addr {
dec_label_pc_102b8:
  %v0_102b8 = load i32, i32* @r1, align 4
  %v1_102b8 = add i32 %v0_102b8, -1
  store i32 %v1_102b8, i32* @r2, align 4
  %v7_102b8 = icmp eq i32 %v0_102b8, 1
  br i1 %v7_102b8, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_102b8
  %v2_102bc = load i32, i32* @r0, align 4
  ret i32 %v2_102bc

bb82:                                             ; preds = %dec_label_pc_102b8
  %v2_102b8 = icmp eq i32 %v0_102b8, 0
  br i1 %v2_102b8, label %dec_label_pc_103a0, label %dec_label_pc_102c4

dec_label_pc_102c4:                               ; preds = %bb82
  %v0_102c4 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_102c4, %v0_102b8
  br i1 %tmp, label %dec_label_pc_102cc, label %dec_label_pc_10358

dec_label_pc_102cc:                               ; preds = %dec_label_pc_102c4
  %v2_102cc = and i32 %v1_102b8, %v0_102b8
  %v4_102cc = icmp eq i32 %v2_102cc, 0
  br i1 %v4_102cc, label %dec_label_pc_10364, label %dec_label_pc_102d4

dec_label_pc_102d4:                               ; preds = %dec_label_pc_102cc
  %v3_102d4 = icmp ult i32 %v0_102b8, 536870912
  br i1 %v3_102d4, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_102d4
  %v4_102d8 = mul i32 %v0_102b8, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_102d4, %.thread
  %v0_102f8.pr36.ph = phi i32 [ %v4_102d8, %.thread ], [ %v0_102b8, %dec_label_pc_102d4 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_102d4 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_102f8.pr36 = phi i32 [ %v4_102ec, %bb85 ], [ %v0_102f8.pr36.ph, %.preheader.preheader ]
  %v1_102f0 = phi i32 [ %v4_102f0, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_102e4 = icmp ugt i32 %v0_102f8.pr36, 268435455
  br i1 %v2_102e4, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_102f8thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_102e8 = icmp ult i32 %v0_102f8.pr36, %v0_102c4
  br i1 %v4_102e8, label %bb84, label %dec_label_pc_102f8thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_102ec = and i32 %v0_102f8.pr36, 268435456
  %v3_102ec = icmp eq i32 %v2_102ec, 0
  %v4_102ec = mul i32 %v0_102f8.pr36, 16
  br i1 %v3_102ec, label %bb85, label %dec_label_pc_102f8.loopexit

bb85:                                             ; preds = %bb84
  %v2_102f0 = and i32 %v1_102f0, 268435456
  %v3_102f0 = icmp eq i32 %v2_102f0, 0
  %v4_102f0 = mul i32 %v1_102f0, 16
  br i1 %v3_102f0, label %.preheader, label %dec_label_pc_102f8thread-pre-split.loopexit.loopexit

dec_label_pc_102f8thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1030448.ph = phi i32 [ %v1_102f0, %bb83 ], [ %v4_102f0, %bb85 ]
  %v0_102f8.pr38.ph = phi i32 [ %v0_102f8.pr36, %bb83 ], [ %v4_102ec, %bb85 ]
  br label %dec_label_pc_102f8thread-pre-split.loopexit

dec_label_pc_102f8thread-pre-split.loopexit:      ; preds = %dec_label_pc_102f8thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1030448 = phi i32 [ %v1_102f0, %.thread2 ], [ %v1_1030448.ph, %dec_label_pc_102f8thread-pre-split.loopexit.loopexit ]
  %v0_102f8.pr38 = phi i32 [ %v0_102f8.pr36, %.thread2 ], [ %v0_102f8.pr38.ph, %dec_label_pc_102f8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_102f8thread-pre-split

dec_label_pc_102f8thread-pre-split:               ; preds = %dec_label_pc_102f8thread-pre-split.loopexit, %bb87
  %v1_1030446 = phi i32 [ %v1_1030448, %dec_label_pc_102f8thread-pre-split.loopexit ], [ %v3_10304, %bb87 ]
  %v0_102f8.pr = phi i32 [ %v0_102f8.pr38, %dec_label_pc_102f8thread-pre-split.loopexit ], [ %v3_10300, %bb87 ]
  br label %dec_label_pc_102f8

dec_label_pc_102f8.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_102f8

dec_label_pc_102f8:                               ; preds = %dec_label_pc_102f8.loopexit, %dec_label_pc_102f8thread-pre-split
  %v1_10304 = phi i32 [ %v1_1030446, %dec_label_pc_102f8thread-pre-split ], [ %v1_102f0, %dec_label_pc_102f8.loopexit ]
  %v1_10300 = phi i32 [ %v0_102f8.pr, %dec_label_pc_102f8thread-pre-split ], [ %v4_102ec, %dec_label_pc_102f8.loopexit ]
  %v2_102f8 = icmp slt i32 %v1_10300, 0
  br i1 %v2_102f8, label %dec_label_pc_1030c, label %bb86

bb86:                                             ; preds = %dec_label_pc_102f8
  %v4_102fc = icmp ult i32 %v1_10300, %v0_102c4
  br i1 %v4_102fc, label %bb87, label %dec_label_pc_1030c

bb87:                                             ; preds = %bb86
  %v3_10300 = mul i32 %v1_10300, 2
  %v2_10304 = icmp slt i32 %v1_10304, 0
  %v3_10304 = mul i32 %v1_10304, 2
  br i1 %v2_10304, label %dec_label_pc_1030c, label %dec_label_pc_102f8thread-pre-split

dec_label_pc_1030c:                               ; preds = %bb86, %dec_label_pc_102f8, %bb87
  %v2_1031859 = phi i32 [ %v3_10304, %bb87 ], [ %v1_10304, %bb86 ], [ %v1_10304, %dec_label_pc_102f8 ]
  %v1_1031051 = phi i32 [ %v3_10300, %bb87 ], [ %v1_10300, %bb86 ], [ %v1_10300, %dec_label_pc_102f8 ]
  store i32 0, i32* @r2, align 4
  br label %dec_label_pc_10310

dec_label_pc_10310:                               ; preds = %.thread11, %dec_label_pc_1030c
  %v1_10344 = phi i32 [ %v4_10344, %.thread11 ], [ %v2_1031859, %dec_label_pc_1030c ]
  %v1_10318 = phi i32 [ %v0_10350, %.thread11 ], [ 0, %dec_label_pc_1030c ]
  %v1_10348 = phi i32 [ %v4_10348, %.thread11 ], [ %v1_1031051, %dec_label_pc_1030c ]
  %v1_10314 = phi i32 [ %v0_10340, %.thread11 ], [ %v0_102c4, %dec_label_pc_1030c ]
  %v3_10310 = icmp ult i32 %v1_10314, %v1_10348
  br i1 %v3_10310, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_10310
  %v3_10314 = sub i32 %v1_10314, %v1_10348
  %v3_10318 = or i32 %v1_10318, %v1_10344
  store i32 %v3_10318, i32* @r2, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10310, %bb88
  %v1_10320 = phi i32 [ %v1_10314, %dec_label_pc_10310 ], [ %v3_10314, %bb88 ]
  %v1_10324 = phi i32 [ %v1_10318, %dec_label_pc_10310 ], [ %v3_10318, %bb88 ]
  %v4_1031c = udiv i32 %v1_10348, 2
  %v6_1031c = icmp ult i32 %v1_10320, %v4_1031c
  br i1 %v6_1031c, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_10320 = urem i32 %v1_10348, 2
  %v4_10320 = icmp eq i32 %v3_10320, 0
  %v6_10320 = sub i32 %v1_10320, %v4_1031c
  br i1 %v4_10320, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10324 = udiv i32 %v1_10344, 2
  %v6_10324 = or i32 %v1_10324, %v5_10324
  store i32 %v6_10324, i32* @r2, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_1032c = phi i32 [ %v6_10320, %bb89 ], [ %v1_10320, %.thread7 ], [ %v6_10320, %bb90 ]
  %v1_10330 = phi i32 [ %v1_10324, %bb89 ], [ %v1_10324, %.thread7 ], [ %v6_10324, %bb90 ]
  %v4_10328 = udiv i32 %v1_10348, 4
  %v6_10328 = icmp ult i32 %v1_1032c, %v4_10328
  br i1 %v6_10328, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_1032c = and i32 %v1_10348, 2
  %v4_1032c = icmp eq i32 %v3_1032c, 0
  %v6_1032c = sub i32 %v1_1032c, %v4_10328
  br i1 %v4_1032c, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_10330 = udiv i32 %v1_10344, 4
  %v6_10330 = or i32 %v1_10330, %v5_10330
  store i32 %v6_10330, i32* @r2, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_10338 = phi i32 [ %v6_1032c, %bb91 ], [ %v1_1032c, %.thread8 ], [ %v6_1032c, %bb92 ]
  %v1_1033c = phi i32 [ %v1_10330, %bb91 ], [ %v1_10330, %.thread8 ], [ %v6_10330, %bb92 ]
  %v4_10334 = udiv i32 %v1_10348, 8
  %v6_10334 = icmp ult i32 %v1_10338, %v4_10334
  br i1 %v6_10334, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_10338 = and i32 %v1_10348, 4
  %v4_10338 = icmp eq i32 %v3_10338, 0
  %v6_10338 = sub i32 %v1_10338, %v4_10334
  br i1 %v4_10338, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_1033c = udiv i32 %v1_10344, 8
  %v6_1033c = or i32 %v1_1033c, %v5_1033c
  store i32 %v6_1033c, i32* @r2, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_10350 = phi i32 [ %v1_1033c, %bb93 ], [ %v1_1033c, %.thread9 ], [ %v6_1033c, %bb94 ]
  %v0_10340 = phi i32 [ %v6_10338, %bb93 ], [ %v1_10338, %.thread9 ], [ %v6_10338, %bb94 ]
  %v2_10340 = icmp eq i32 %v0_10340, 0
  br i1 %v2_10340, label %dec_label_pc_10350, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_10344, 16
  br i1 %tmp142, label %dec_label_pc_10350, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_10344 = udiv i32 %v1_10344, 16
  %v4_10348 = udiv i32 %v1_10348, 16
  br label %dec_label_pc_10310

dec_label_pc_10350:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_10350

dec_label_pc_10358:                               ; preds = %dec_label_pc_102c4
  %v9_102c4 = icmp eq i32 %v0_102c4, %v0_102b8
  %. = zext i1 %v9_102c4 to i32
  ret i32 %.

dec_label_pc_10364:                               ; preds = %dec_label_pc_102cc
  %v2_10364 = icmp ugt i32 %v0_102b8, 65535
  br i1 %v2_10364, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_10364
  %v2_10368 = and i32 %v0_102b8, 32768
  %v3_10368 = icmp eq i32 %v2_10368, 0
  %v4_10368 = udiv i32 %v0_102b8, 65536
  br i1 %v3_10368, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_10364
  %v0_1037465 = phi i32 [ %v0_102b8, %dec_label_pc_10364 ], [ %v4_10368, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_10378 = phi i32 [ %v0_1037465, %.thread16 ], [ %v4_10368, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  store i32 %storemerge, i32* @r2, align 4
  %v2_10374 = icmp ugt i32 %v1_10378, 255
  br i1 %v2_10374, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_10378 = and i32 %v1_10378, 128
  %v3_10378 = icmp eq i32 %v2_10378, 0
  %v4_10378 = udiv i32 %v1_10378, 256
  br i1 %v3_10378, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_1037c = or i32 %storemerge, 8
  store i32 %v2_1037c, i32* @r2, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_10388 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_1037c, %bb102 ]
  %v1_10384 = phi i32 [ %v1_10378, %bb100 ], [ %v4_10378, %bb101 ], [ %v4_10378, %bb102 ]
  %v2_10380 = icmp ugt i32 %v1_10384, 15
  br i1 %v2_10380, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_10384 = and i32 %v1_10384, 8
  %v3_10384 = icmp eq i32 %v2_10384, 0
  %v4_10384 = udiv i32 %v1_10384, 16
  br i1 %v3_10384, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_10388 = add nsw i32 %v1_10388, 4
  store i32 %v2_10388, i32* @r2, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_10390 = phi i32 [ %v1_10388, %.thread17 ], [ %v1_10388, %bb103 ], [ %v2_10388, %bb104 ]
  %v5_10394 = phi i32 [ %v1_10384, %.thread17 ], [ %v4_10384, %bb103 ], [ %v4_10384, %bb104 ]
  %v2_1038c = icmp ugt i32 %v5_10394, 3
  %v7_1038c = icmp eq i32 %v5_10394, 4
  %v2_10390 = xor i1 %v7_1038c, true
  %v3_10390 = and i1 %v2_1038c, %v2_10390
  br i1 %v3_10390, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_10390 = add nsw i32 %v4_10390, 3
  store i32 %v5_10390, i32* @r2, align 4
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_10394 = phi i32 [ %v4_10390, %.thread18 ], [ %v5_10390, %bb105 ]
  %v2_10394 = xor i1 %v2_1038c, true
  %v3_10394 = or i1 %v7_1038c, %v2_10394
  br i1 %v3_10394, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_10394 = udiv i32 %v5_10394, 2
  %v9_10394 = add i32 %v4_10394, %v8_10394
  store i32 %v9_10394, i32* @r2, align 4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_10398 = phi i32 [ %v4_10394, %bb106 ], [ %v9_10394, %bb107 ]
  %v6_10398 = lshr i32 %v0_102c4, %v1_10398
  ret i32 %v6_10398

dec_label_pc_103a0:                               ; preds = %bb82
  %v0_103a0 = load i32, i32* @lr, align 4
  %v0_103a4 = call i32 @function_10578()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_103a0)
  %v6_103b0 = load i32, i32* @r1, align 4
  %v9_103b0 = load i32, i32* @lr, align 4
  %v0_103b4 = call i32 @function_102b8()
  store i32 %v6_103b0, i32* @r2, align 4
  store i32 %v9_103b0, i32* @lr, align 4
  ret i32 %v0_103b4

; uselistorder directives
  uselistorder i32 %v4_10394, { 1, 0 }
  uselistorder i1 %v7_1038c, { 1, 0 }
  uselistorder i32 %v4_10384, { 1, 0 }
  uselistorder i32 %v1_10384, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1037c, { 1, 0 }
  uselistorder i32 %v4_10378, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10378, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10368, { 1, 0 }
  uselistorder i32 %v0_10340, { 1, 0 }
  uselistorder i32 %v4_10334, { 1, 0 }
  uselistorder i32 %v1_1033c, { 1, 2, 0 }
  uselistorder i32 %v4_10328, { 1, 0 }
  uselistorder i32 %v1_10330, { 1, 2, 0 }
  uselistorder i32 %v4_1031c, { 1, 0 }
  uselistorder i32 %v1_10324, { 1, 2, 0 }
  uselistorder i32 %v1_10348, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10318, { 1, 0 }
  uselistorder i32 %v1_10344, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10304, { 1, 0 }
  uselistorder i32 %v3_10300, { 1, 0 }
  uselistorder i32 %v1_10300, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10304, { 1, 2, 0, 3 }
  uselistorder i32 %v4_102f0, { 1, 0 }
  uselistorder i32 %v4_102ec, { 2, 1, 0 }
  uselistorder i32 %v1_102f0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_102f8.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_102c4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_102b8, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 15, { 8, 9, 2, 10, 3, 4, 11, 5, 12, 6, 13, 0, 14, 15, 7, 16, 17, 18, 19, 1, 20 }
  uselistorder i32 65535, { 89, 1, 2, 12, 41, 22, 21, 24, 42, 23, 43, 14, 13, 3, 26, 44, 25, 45, 47, 15, 46, 4, 48, 49, 27, 50, 28, 51, 0, 52, 53, 29, 54, 55, 57, 16, 56, 5, 58, 59, 60, 61, 31, 62, 30, 63, 65, 17, 64, 6, 66, 67, 68, 69, 32, 70, 33, 71, 34, 72, 73, 18, 7, 74, 35, 75, 36, 76, 78, 19, 77, 8, 9, 79, 80, 38, 81, 37, 82, 84, 20, 83, 10, 11, 85, 86, 40, 87, 39, 88 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_10350, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_1030c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_102f8thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_103c8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_103c8:
  store i32 %arg1, i32* @r0, align 4
  %v1_103c8 = add i32 %arg2, -1
  %v2_103c8 = icmp eq i32 %arg2, 0
  br i1 %v2_103c8, label %dec_label_pc_10484, label %dec_label_pc_103d0

dec_label_pc_103d0:                               ; preds = %dec_label_pc_103c8
  %v7_103c8 = icmp eq i32 %arg2, 1
  br i1 %v7_103c8, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_103d0
  %v1_103d0 = load i32, i32* @r0, align 4
  %v10_103d0 = icmp eq i32 %v1_103d0, %arg2
  br i1 %v10_103d0, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_103d0, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_103d0 = icmp ult i32 %v1_103d0, %arg2
  br i1 %v4_103d0, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_103d8 = and i32 %v1_103c8, %arg2
  %v8_103d8 = icmp eq i32 %v6_103d8, 0
  br i1 %v8_103d8, label %.thread67, label %dec_label_pc_103e8.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_103dc = phi i32 [ %v1_103d0, %bb75 ], [ 0, %.thread65 ]
  %v3_103dc = and i32 %v1_103dc, %v1_103c8
  br label %bb76

dec_label_pc_103e8.preheader:                     ; preds = %bb75
  %v2_103e899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_103e899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_10478, %bb74, %bb89, %bb84, %dec_label_pc_10448, %.thread67
  %v5_103e0 = phi i32 [ %v1_103d0, %bb74 ], [ %v3_103dc, %.thread67 ], [ %v1_10424.v6_10424.v6_1042c.v6_10434, %dec_label_pc_10448 ], [ 0, %bb84 ], [ %v1_1047c, %dec_label_pc_10478 ], [ %v2_10478, %bb89 ]
  ret i32 %v5_103e0

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_103e8.preheader
  %v0_103fc.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_103e8.preheader ], [ %v4_103f0, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_103e8.preheader ], [ %v2_103f411, %.thread1.thread9 ]
  br label %dec_label_pc_103fcthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_103e8.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_103f411, %.thread1.thread9 ], [ 0, %dec_label_pc_103e8.preheader ]
  %v0_103fc.pr33100 = phi i32 [ %v4_103f0, %.thread1.thread9 ], [ %arg2, %dec_label_pc_103e8.preheader ]
  %v4_103ec = icmp ult i32 %v0_103fc.pr33100, %v1_103d0
  br i1 %v4_103ec, label %bb78, label %dec_label_pc_103fcthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_103f0 = and i32 %v0_103fc.pr33100, 268435456
  %v3_103f0 = icmp eq i32 %v2_103f0, 0
  %v4_103f0 = mul i32 %v0_103fc.pr33100, 16
  br i1 %v3_103f0, label %.thread1.thread9, label %dec_label_pc_103fc.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_103f411 = add i32 %storemerge101, 4
  %v2_103e8 = icmp ugt i32 %v4_103f0, 268435455
  br i1 %v2_103e8, label %.thread, label %bb77

dec_label_pc_103fcthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_103fcthread-pre-split.loopexit

dec_label_pc_103fcthread-pre-split.loopexit:      ; preds = %dec_label_pc_103fcthread-pre-split.loopexit.loopexit, %.thread
  %v0_103fc.pr3398 = phi i32 [ %v0_103fc.pr33.lcssa, %.thread ], [ %v0_103fc.pr33100, %dec_label_pc_103fcthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_103fcthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_103fcthread-pre-split

dec_label_pc_103fcthread-pre-split:               ; preds = %.thread4, %dec_label_pc_103fcthread-pre-split.loopexit
  %v1_1040839 = phi i32 [ %storemerge95, %dec_label_pc_103fcthread-pre-split.loopexit ], [ %v2_10408, %.thread4 ]
  %v0_103fc.pr = phi i32 [ %v0_103fc.pr3398, %dec_label_pc_103fcthread-pre-split.loopexit ], [ %v3_10404, %.thread4 ]
  br label %dec_label_pc_103fc

dec_label_pc_103fc.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_103fc

dec_label_pc_103fc:                               ; preds = %dec_label_pc_103fc.loopexit, %dec_label_pc_103fcthread-pre-split
  %v0_10410.pr = phi i32 [ %v1_1040839, %dec_label_pc_103fcthread-pre-split ], [ %storemerge101, %dec_label_pc_103fc.loopexit ]
  %v1_10404 = phi i32 [ %v0_103fc.pr, %dec_label_pc_103fcthread-pre-split ], [ %v4_103f0, %dec_label_pc_103fc.loopexit ]
  %v2_103fc = icmp slt i32 %v1_10404, 0
  br i1 %v2_103fc, label %dec_label_pc_10410, label %bb79

bb79:                                             ; preds = %dec_label_pc_103fc
  %v4_10400 = icmp ult i32 %v1_10404, %v1_103d0
  br i1 %v4_10400, label %.thread4, label %dec_label_pc_10410

.thread4:                                         ; preds = %bb79
  %v3_10404 = mul i32 %v1_10404, 2
  %v2_10408 = add i32 %v0_10410.pr, 1
  br label %dec_label_pc_103fcthread-pre-split

dec_label_pc_10410:                               ; preds = %bb79, %dec_label_pc_103fc
  %v2_10410 = add i32 %v0_10410.pr, -3
  %v5_10414 = icmp slt i32 %v0_10410.pr, 3
  br i1 %v5_10414, label %dec_label_pc_10454, label %dec_label_pc_10418

dec_label_pc_10418:                               ; preds = %dec_label_pc_10410, %bb83
  %v6_10440 = phi i32 [ %v0_10448, %bb83 ], [ %v2_10410, %dec_label_pc_10410 ]
  %v1_1041c = phi i32 [ %v1_10424.v6_10424.v6_1042c.v6_10434, %bb83 ], [ %v1_103d0, %dec_label_pc_10410 ]
  %v3_1043c12 = phi i32 [ %v3_1043c, %bb83 ], [ %v1_10404, %dec_label_pc_10410 ]
  %v3_10418 = icmp ult i32 %v1_1041c, %v3_1043c12
  %v3_1041c = select i1 %v3_10418, i32 0, i32 %v3_1043c12
  %v1_10424 = sub i32 %v1_1041c, %v3_1041c
  %v4_10420 = udiv i32 %v3_1043c12, 2
  %v6_10420 = icmp ult i32 %v1_10424, %v4_10420
  %v6_10424 = select i1 %v6_10420, i32 0, i32 %v4_10420
  %v1_10424.v6_10424 = sub i32 %v1_10424, %v6_10424
  %.demorgan = and i1 %v3_10418, %v6_10420
  %v4_10428 = udiv i32 %v3_1043c12, 4
  %v6_10428 = icmp ult i32 %v1_10424.v6_10424, %v4_10428
  %v6_1042c = select i1 %v6_10428, i32 0, i32 %v4_10428
  %v1_10424.v6_10424.v6_1042c = sub i32 %v1_10424.v6_10424, %v6_1042c
  %.demorgan71 = and i1 %.demorgan, %v6_10428
  %v4_10430 = udiv i32 %v3_1043c12, 8
  %v6_10430 = icmp ult i32 %v1_10424.v6_10424.v6_1042c, %v4_10430
  %v6_10434 = select i1 %v6_10430, i32 0, i32 %v4_10430
  %v1_10424.v6_10424.v6_1042c.v6_10434 = sub i32 %v1_10424.v6_10424.v6_1042c, %v6_10434
  %.demorgan72 = and i1 %.demorgan71, %v6_10430
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_10418
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_10418, %bb80
  %v2_10438 = add i32 %v1_10424.v6_10424.v6_1042c.v6_10434, -1
  %v4_10438 = sub i32 0, %v1_10424.v6_10424.v6_1042c.v6_10434
  %v5_10438 = and i32 %v1_10424.v6_10424.v6_1042c.v6_10434, %v4_10438
  %v3_1043c = udiv i32 %v3_1043c12, 16
  %v5_10440 = icmp slt i32 %v1_10424.v6_10424.v6_1042c.v6_10434, 1
  br i1 %v5_10440, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_10440 = add i32 %v6_10440, -4
  %v9_10440 = sub i32 3, %v6_10440
  %v10_10440 = and i32 %v9_10440, %v6_10440
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_10448 = phi i32 [ %v6_10440, %bb81 ], [ %v7_10440, %bb82 ]
  %v0_1044415.in = phi i32 [ %v2_10438, %bb81 ], [ %v7_10440, %bb82 ]
  %v1_1044414.in = phi i32 [ %v5_10438, %bb81 ], [ %v10_10440, %bb82 ]
  %v1_1044414 = icmp slt i32 %v1_1044414.in, 0
  %v0_1044415 = icmp slt i32 %v0_1044415.in, 0
  %v2_10444 = xor i1 %v0_1044415, %v1_1044414
  br i1 %v2_10444, label %dec_label_pc_10448, label %dec_label_pc_10418

dec_label_pc_10448:                               ; preds = %bb83
  %v1_10448 = urem i32 %v0_10448, 4
  %v2_10448 = icmp eq i32 %v1_10448, 0
  br i1 %v2_10448, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_10448
  %v3_1044c = icmp eq i32 %v1_10424.v6_10424.v6_1042c.v6_10434, 0
  br i1 %v3_1044c, label %bb76, label %dec_label_pc_10454

dec_label_pc_10454:                               ; preds = %bb84, %dec_label_pc_10410
  %v0_10468 = phi i32 [ %v3_1043c, %bb84 ], [ %v1_10404, %dec_label_pc_10410 ]
  %v1_10464 = phi i32 [ %v1_10424.v6_10424.v6_1042c.v6_10434, %bb84 ], [ %v1_103d0, %dec_label_pc_10410 ]
  %v0_10454 = phi i32 [ %v0_10448, %bb84 ], [ %v2_10410, %dec_label_pc_10410 ]
  %v5_10458 = icmp slt i32 %v0_10454, -2
  br i1 %v5_10458, label %dec_label_pc_10478, label %dec_label_pc_1045c

dec_label_pc_1045c:                               ; preds = %dec_label_pc_10454
  %v8_10454 = icmp eq i32 %v0_10454, -2
  br i1 %v8_10454, label %dec_label_pc_1046c, label %dec_label_pc_10460

dec_label_pc_10460:                               ; preds = %dec_label_pc_1045c
  %v3_10460 = icmp ult i32 %v1_10464, %v0_10468
  br i1 %v3_10460, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_10460
  %v2_10460 = sub i32 %v1_10464, %v0_10468
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_10460, %bb85
  %v0_1046c52 = phi i32 [ %v1_10464, %dec_label_pc_10460 ], [ %v2_10460, %bb85 ]
  %v3_10468 = udiv i32 %v0_10468, 2
  br label %dec_label_pc_1046c

dec_label_pc_1046c:                               ; preds = %dec_label_pc_1045c, %bb86
  %v0_10474 = phi i32 [ %v0_10468, %dec_label_pc_1045c ], [ %v3_10468, %bb86 ]
  %v1_10470 = phi i32 [ %v1_10464, %dec_label_pc_1045c ], [ %v0_1046c52, %bb86 ]
  %v3_1046c = icmp ult i32 %v1_10470, %v0_10474
  br i1 %v3_1046c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_1046c
  %v2_1046c = sub i32 %v1_10470, %v0_10474
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_1046c, %bb87
  %v0_1047855 = phi i32 [ %v1_10470, %dec_label_pc_1046c ], [ %v2_1046c, %bb87 ]
  %v3_10474 = udiv i32 %v0_10474, 2
  br label %dec_label_pc_10478

dec_label_pc_10478:                               ; preds = %dec_label_pc_10454, %bb88
  %v2_1047c = phi i32 [ %v0_10468, %dec_label_pc_10454 ], [ %v3_10474, %bb88 ]
  %v1_1047c = phi i32 [ %v1_10464, %dec_label_pc_10454 ], [ %v0_1047855, %bb88 ]
  %v3_10478 = icmp ult i32 %v1_1047c, %v2_1047c
  br i1 %v3_10478, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_10478
  %v2_10478 = sub i32 %v1_1047c, %v2_1047c
  br label %bb76

dec_label_pc_10484:                               ; preds = %dec_label_pc_103c8
  %v0_10484 = load i32, i32* @lr, align 4
  %v0_10488 = call i32 @function_10578()
  call void @__pseudo_branch(i32 %v0_10484)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1047c, { 1, 2, 0 }
  uselistorder i32 %v0_10468, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10448, { 1, 0, 2 }
  uselistorder i32 %v7_10440, { 1, 0 }
  uselistorder i32 %v3_1043c, { 1, 0 }
  uselistorder i32 %v1_10424.v6_10424.v6_1042c.v6_10434, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_10430, { 1, 0 }
  uselistorder i32 %v4_10428, { 1, 0 }
  uselistorder i32 %v4_10420, { 1, 0 }
  uselistorder i32 %v6_10440, { 3, 0, 2, 1 }
  uselistorder i32 %v2_10410, { 1, 0 }
  uselistorder i32 %v1_10404, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_103f0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_103fc.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_103d0, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_10478, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_1046c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_10418, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_10494(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10494:
  store i32 %arg1, i32* @r0, align 4
  %v2_10494 = icmp eq i32 %arg2, 0
  br i1 %v2_10494, label %dec_label_pc_10568, label %dec_label_pc_1049c

dec_label_pc_1049c:                               ; preds = %dec_label_pc_10494
  %v1_10494 = icmp slt i32 %arg2, 0
  br i1 %v1_10494, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_1049c
  %v2_1049c = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_1049c, %bb
  %v4_104b4 = phi i32 [ %arg2, %dec_label_pc_1049c ], [ %v2_1049c, %bb ]
  %v0_104a0 = load i32, i32* @r0, align 4
  %v1_104a0 = icmp slt i32 %v0_104a0, 0
  br i1 %v1_104a0, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_104a4 = sub i32 0, %v0_104a0
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_104ac = phi i32 [ %v0_104a0, %bb79 ], [ %v2_104a4, %bb80 ]
  %v1_104a8 = add i32 %v4_104b4, -1
  %v7_104a8 = icmp eq i32 %v4_104b4, 1
  br i1 %v7_104a8, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_104ac = icmp eq i32 %v1_104ac, %v4_104b4
  br i1 %v10_104ac, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_104ac = icmp ult i32 %v1_104ac, %v4_104b4
  br i1 %v4_104ac, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_104b4 = and i32 %v1_104a8, %v4_104b4
  %v8_104b4 = icmp eq i32 %v6_104b4, 0
  br i1 %v8_104b4, label %.thread72, label %dec_label_pc_104c4.preheader

dec_label_pc_104c4.preheader:                     ; preds = %bb84
  %v2_104c4109 = icmp ugt i32 %v4_104b4, 268435455
  br i1 %v2_104c4109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_104b864 = phi i32 [ %v1_104ac, %bb84 ], [ 0, %.thread70 ]
  %v3_104b8 = and i32 %v1_104b864, %v1_104a8
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_104c4.preheader
  %v0_104d8.pr35.lcssa = phi i32 [ %v4_104b4, %dec_label_pc_104c4.preheader ], [ %v4_104cc, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_104c4.preheader ], [ %v2_104d09, %.thread2.thread7 ]
  br label %dec_label_pc_104d8thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_104c4.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_104d09, %.thread2.thread7 ], [ 0, %dec_label_pc_104c4.preheader ]
  %v0_104d8.pr35110 = phi i32 [ %v4_104cc, %.thread2.thread7 ], [ %v4_104b4, %dec_label_pc_104c4.preheader ]
  %v4_104c8 = icmp ult i32 %v0_104d8.pr35110, %v1_104ac
  br i1 %v4_104c8, label %bb86, label %dec_label_pc_104d8thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_104cc = and i32 %v0_104d8.pr35110, 268435456
  %v3_104cc = icmp eq i32 %v2_104cc, 0
  %v4_104cc = mul i32 %v0_104d8.pr35110, 16
  br i1 %v3_104cc, label %.thread2.thread7, label %dec_label_pc_104d8.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_104d09 = add i32 %storemerge111, 4
  %v2_104c4 = icmp ugt i32 %v4_104cc, 268435455
  br i1 %v2_104c4, label %.thread1, label %bb85

dec_label_pc_104d8thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_104d8thread-pre-split.loopexit

dec_label_pc_104d8thread-pre-split.loopexit:      ; preds = %dec_label_pc_104d8thread-pre-split.loopexit.loopexit, %.thread1
  %v0_104d8.pr35108 = phi i32 [ %v0_104d8.pr35.lcssa, %.thread1 ], [ %v0_104d8.pr35110, %dec_label_pc_104d8thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_104d8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_104d8thread-pre-split

dec_label_pc_104d8thread-pre-split:               ; preds = %.thread4, %dec_label_pc_104d8thread-pre-split.loopexit
  %v1_104e441 = phi i32 [ %storemerge105, %dec_label_pc_104d8thread-pre-split.loopexit ], [ %v2_104e4, %.thread4 ]
  %v2_104dc36 = phi i32 [ %v1_104ac, %dec_label_pc_104d8thread-pre-split.loopexit ], [ %v2_104dc, %.thread4 ]
  %v0_104d8.pr = phi i32 [ %v0_104d8.pr35108, %dec_label_pc_104d8thread-pre-split.loopexit ], [ %v3_104e0, %.thread4 ]
  br label %dec_label_pc_104d8

dec_label_pc_104d8.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_104d8

dec_label_pc_104d8:                               ; preds = %dec_label_pc_104d8.loopexit, %dec_label_pc_104d8thread-pre-split
  %v0_104ec.pr = phi i32 [ %v1_104e441, %dec_label_pc_104d8thread-pre-split ], [ %storemerge111, %dec_label_pc_104d8.loopexit ]
  %v2_104dc = phi i32 [ %v2_104dc36, %dec_label_pc_104d8thread-pre-split ], [ %v1_104ac, %dec_label_pc_104d8.loopexit ]
  %v1_104e0 = phi i32 [ %v0_104d8.pr, %dec_label_pc_104d8thread-pre-split ], [ %v4_104cc, %dec_label_pc_104d8.loopexit ]
  %v2_104d8 = icmp slt i32 %v1_104e0, 0
  br i1 %v2_104d8, label %dec_label_pc_104ec, label %bb87

bb87:                                             ; preds = %dec_label_pc_104d8
  %v4_104dc = icmp ult i32 %v1_104e0, %v2_104dc
  br i1 %v4_104dc, label %.thread4, label %dec_label_pc_104ec

.thread4:                                         ; preds = %bb87
  %v3_104e0 = mul i32 %v1_104e0, 2
  %v2_104e4 = add i32 %v0_104ec.pr, 1
  br label %dec_label_pc_104d8thread-pre-split

dec_label_pc_104ec:                               ; preds = %bb87, %dec_label_pc_104d8
  %v2_104ec = add i32 %v0_104ec.pr, -3
  %v5_104f0 = icmp slt i32 %v0_104ec.pr, 3
  br i1 %v5_104f0, label %dec_label_pc_10530, label %dec_label_pc_104f4

dec_label_pc_104f4:                               ; preds = %dec_label_pc_104ec, %bb91
  %v6_1051c = phi i32 [ %v0_10524, %bb91 ], [ %v2_104ec, %dec_label_pc_104ec ]
  %v1_104f8 = phi i32 [ %v1_10500.v6_10500.v6_10508.v6_10510, %bb91 ], [ %v2_104dc, %dec_label_pc_104ec ]
  %v3_1051810 = phi i32 [ %v3_10518, %bb91 ], [ %v1_104e0, %dec_label_pc_104ec ]
  %v3_104f4 = icmp ult i32 %v1_104f8, %v3_1051810
  %v3_104f8 = select i1 %v3_104f4, i32 0, i32 %v3_1051810
  %v1_10500 = sub i32 %v1_104f8, %v3_104f8
  %v4_104fc = udiv i32 %v3_1051810, 2
  %v6_104fc = icmp ult i32 %v1_10500, %v4_104fc
  %v6_10500 = select i1 %v6_104fc, i32 0, i32 %v4_104fc
  %v1_10500.v6_10500 = sub i32 %v1_10500, %v6_10500
  %.demorgan = and i1 %v3_104f4, %v6_104fc
  %v4_10504 = udiv i32 %v3_1051810, 4
  %v6_10504 = icmp ult i32 %v1_10500.v6_10500, %v4_10504
  %v6_10508 = select i1 %v6_10504, i32 0, i32 %v4_10504
  %v1_10500.v6_10500.v6_10508 = sub i32 %v1_10500.v6_10500, %v6_10508
  %.demorgan76 = and i1 %.demorgan, %v6_10504
  %v4_1050c = udiv i32 %v3_1051810, 8
  %v6_1050c = icmp ult i32 %v1_10500.v6_10500.v6_10508, %v4_1050c
  %v6_10510 = select i1 %v6_1050c, i32 0, i32 %v4_1050c
  %v1_10500.v6_10500.v6_10508.v6_10510 = sub i32 %v1_10500.v6_10500.v6_10508, %v6_10510
  %.demorgan77 = and i1 %.demorgan76, %v6_1050c
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_104f4
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_104f4, %bb88
  %v2_10514 = add i32 %v1_10500.v6_10500.v6_10508.v6_10510, -1
  %v4_10514 = sub i32 0, %v1_10500.v6_10500.v6_10508.v6_10510
  %v5_10514 = and i32 %v1_10500.v6_10500.v6_10508.v6_10510, %v4_10514
  %v3_10518 = udiv i32 %v3_1051810, 16
  %v5_1051c = icmp slt i32 %v1_10500.v6_10500.v6_10508.v6_10510, 1
  br i1 %v5_1051c, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_1051c = add i32 %v6_1051c, -4
  %v9_1051c = sub i32 3, %v6_1051c
  %v10_1051c = and i32 %v9_1051c, %v6_1051c
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_10524 = phi i32 [ %v6_1051c, %bb89 ], [ %v7_1051c, %bb90 ]
  %v0_1052013.in = phi i32 [ %v2_10514, %bb89 ], [ %v7_1051c, %bb90 ]
  %v1_1052012.in = phi i32 [ %v5_10514, %bb89 ], [ %v10_1051c, %bb90 ]
  %v1_1052012 = icmp slt i32 %v1_1052012.in, 0
  %v0_1052013 = icmp slt i32 %v0_1052013.in, 0
  %v2_10520 = xor i1 %v0_1052013, %v1_1052012
  br i1 %v2_10520, label %dec_label_pc_10524, label %dec_label_pc_104f4

dec_label_pc_10524:                               ; preds = %bb91
  %v1_10524 = urem i32 %v0_10524, 4
  %v2_10524 = icmp eq i32 %v1_10524, 0
  br i1 %v2_10524, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_10524
  %v3_10528 = icmp eq i32 %v1_10500.v6_10500.v6_10508.v6_10510, 0
  br i1 %v3_10528, label %.thread6, label %dec_label_pc_10530

dec_label_pc_10530:                               ; preds = %bb92, %dec_label_pc_104ec
  %v0_10544 = phi i32 [ %v3_10518, %bb92 ], [ %v1_104e0, %dec_label_pc_104ec ]
  %v1_10540 = phi i32 [ %v1_10500.v6_10500.v6_10508.v6_10510, %bb92 ], [ %v2_104dc, %dec_label_pc_104ec ]
  %v0_10530 = phi i32 [ %v0_10524, %bb92 ], [ %v2_104ec, %dec_label_pc_104ec ]
  %v5_10534 = icmp slt i32 %v0_10530, -2
  br i1 %v5_10534, label %dec_label_pc_10554, label %dec_label_pc_10538

dec_label_pc_10538:                               ; preds = %dec_label_pc_10530
  %v8_10530 = icmp eq i32 %v0_10530, -2
  br i1 %v8_10530, label %dec_label_pc_10548, label %dec_label_pc_1053c

dec_label_pc_1053c:                               ; preds = %dec_label_pc_10538
  %v3_1053c = icmp ult i32 %v1_10540, %v0_10544
  br i1 %v3_1053c, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_1053c
  %v2_1053c = sub i32 %v1_10540, %v0_10544
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_1053c, %bb93
  %v0_1054854 = phi i32 [ %v1_10540, %dec_label_pc_1053c ], [ %v2_1053c, %bb93 ]
  %v3_10544 = udiv i32 %v0_10544, 2
  br label %dec_label_pc_10548

dec_label_pc_10548:                               ; preds = %dec_label_pc_10538, %bb94
  %v0_10550 = phi i32 [ %v0_10544, %dec_label_pc_10538 ], [ %v3_10544, %bb94 ]
  %v1_1054c = phi i32 [ %v1_10540, %dec_label_pc_10538 ], [ %v0_1054854, %bb94 ]
  %v3_10548 = icmp ult i32 %v1_1054c, %v0_10550
  br i1 %v3_10548, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_10548
  %v2_10548 = sub i32 %v1_1054c, %v0_10550
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_10548, %bb95
  %v0_1055457 = phi i32 [ %v1_1054c, %dec_label_pc_10548 ], [ %v2_10548, %bb95 ]
  %v3_10550 = udiv i32 %v0_10550, 2
  br label %dec_label_pc_10554

dec_label_pc_10554:                               ; preds = %dec_label_pc_10530, %bb96
  %v2_10558 = phi i32 [ %v0_10544, %dec_label_pc_10530 ], [ %v3_10550, %bb96 ]
  %v1_10558 = phi i32 [ %v1_10540, %dec_label_pc_10530 ], [ %v0_1055457, %bb96 ]
  %v3_10554 = icmp ult i32 %v1_10558, %v2_10558
  br i1 %v3_10554, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_10554
  %v2_10554 = sub i32 %v1_10558, %v2_10558
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_10554, %bb83, %.thread72, %dec_label_pc_10524, %bb92, %bb97
  %v1_10560 = phi i32 [ %v1_10500.v6_10500.v6_10508.v6_10510, %dec_label_pc_10524 ], [ 0, %bb92 ], [ %v1_10558, %dec_label_pc_10554 ], [ %v2_10554, %bb97 ], [ %v3_104b8, %.thread72 ], [ %v1_104ac, %bb83 ]
  br i1 %v1_104a0, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_10560 = sub i32 0, %v1_10560
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_10564 = phi i32 [ %v1_10560, %.thread6 ], [ %v2_10560, %bb98 ]
  ret i32 %v1_10564

dec_label_pc_10568:                               ; preds = %dec_label_pc_10494
  %v0_10568 = load i32, i32* @lr, align 4
  %v0_1056c = call i32 @function_10578()
  call void @__pseudo_branch(i32 %v0_10568)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_10544, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10524, { 1, 0, 2 }
  uselistorder i32 %v7_1051c, { 1, 0 }
  uselistorder i32 %v3_10518, { 1, 0 }
  uselistorder i32 %v1_10500.v6_10500.v6_10508.v6_10510, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_1050c, { 1, 0 }
  uselistorder i32 %v4_10504, { 1, 0 }
  uselistorder i32 %v4_104fc, { 1, 0 }
  uselistorder i32 %v6_1051c, { 3, 0, 2, 1 }
  uselistorder i32 %v2_104ec, { 1, 0 }
  uselistorder i32 %v1_104e0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_104dc, { 1, 0, 3, 2 }
  uselistorder i32 %v4_104cc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_104d8.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_104ac, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_104b4, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_10578, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10554, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10548, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_104f4, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_10578() local_unnamed_addr {
dec_label_pc_10578:
  %v1_10578 = load i32, i32* @r0, align 4
  ret i32 %v1_10578
}

define i32 @function_1057c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1057c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_1057c = load i32, i32* @r2, align 4
  %v1_1058c = add i32 %arg2, -12
  store i32 %v6_1057c, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_1058c, 2
  br i1 %tmp, label %dec_label_pc_105b4, label %dec_label_pc_105ac

dec_label_pc_105ac:                               ; preds = %dec_label_pc_1057c
  %v0_105ac = call i32 @function_105f0()
  br label %dec_label_pc_105e0

dec_label_pc_105b4:                               ; preds = %dec_label_pc_1057c
  %v2_105bc = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_105bc, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_105bc, -4095
  br i1 %tmp8, label %dec_label_pc_105e0, label %dec_label_pc_105cc

dec_label_pc_105cc:                               ; preds = %dec_label_pc_105b4
  %v0_105cc = call i32 @function_1093c()
  %v0_105d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_105d0 = sub i32 0, %v0_105d0
  %v2_105d4 = inttoptr i32 %v0_105cc to i32*
  store i32 %v1_105d0, i32* %v2_105d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_105e0

dec_label_pc_105e0:                               ; preds = %dec_label_pc_105cc, %dec_label_pc_105b4, %dec_label_pc_105ac
  %storemerge = phi i32 [ %v0_105ac, %dec_label_pc_105ac ], [ %v2_105bc, %dec_label_pc_105b4 ], [ -1, %dec_label_pc_105cc ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_105bc, { 1, 0, 2 }
}

define i32 @function_105f0() local_unnamed_addr {
dec_label_pc_105f0:
  %r4.global-to-local = alloca i32, align 4
  %v0_10610 = load i32, i32* @r0, align 4
  store i32 %v0_10610, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10610, -4095
  br i1 %tmp, label %dec_label_pc_1062c, label %dec_label_pc_1061c

dec_label_pc_1061c:                               ; preds = %dec_label_pc_105f0
  %v0_1061c = call i32 @function_1093c()
  %v0_10620 = load i32, i32* %r4.global-to-local, align 4
  %v1_10620 = sub i32 0, %v0_10620
  %v2_10624 = inttoptr i32 %v0_1061c to i32*
  store i32 %v1_10620, i32* %v2_10624, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1062c

dec_label_pc_1062c:                               ; preds = %dec_label_pc_105f0, %dec_label_pc_1061c
  %v0_1062c = phi i32 [ %v0_10610, %dec_label_pc_105f0 ], [ -1, %dec_label_pc_1061c ]
  ret i32 %v0_1062c

; uselistorder directives
  uselistorder i32 %v0_10610, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1062c, { 1, 0 }
}

define i32 @function_10640(i32 %arg1) local_unnamed_addr {
dec_label_pc_10640:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10640 = load i32, i32* @r4, align 4
  store i32 %v3_10640, i32* %stack_var_-8, align 4
  %v1_10644 = call i32 @close(i32 %arg1)
  store i32 %v1_10644, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_10644, -4095
  br i1 %tmp, label %dec_label_pc_10664, label %dec_label_pc_10654

dec_label_pc_10654:                               ; preds = %dec_label_pc_10640
  %v0_10654 = call i32 @function_1093c()
  %v0_10658 = load i32, i32* %r4.global-to-local, align 4
  %v1_10658 = sub i32 0, %v0_10658
  %v2_1065c = inttoptr i32 %v0_10654 to i32*
  store i32 %v1_10658, i32* %v2_1065c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10664

dec_label_pc_10664:                               ; preds = %dec_label_pc_10640, %dec_label_pc_10654
  %v0_10664 = phi i32 [ %v1_10644, %dec_label_pc_10640 ], [ -1, %dec_label_pc_10654 ]
  %v2_10668 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10668, i32* @r4, align 4
  ret i32 %v0_10664

; uselistorder directives
  uselistorder i32 %v1_10644, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10664, { 1, 0 }
}

define i32 @function_1066c() local_unnamed_addr {
dec_label_pc_1066c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1066c = load i32, i32* @r4, align 4
  store i32 %v3_1066c, i32* %stack_var_-8, align 4
  %v0_10670 = call i32 @fork()
  store i32 %v0_10670, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10670, -4095
  br i1 %tmp, label %dec_label_pc_10690, label %dec_label_pc_10680

dec_label_pc_10680:                               ; preds = %dec_label_pc_1066c
  %v0_10680 = call i32 @function_1093c()
  %v0_10684 = load i32, i32* %r4.global-to-local, align 4
  %v1_10684 = sub i32 0, %v0_10684
  %v2_10688 = inttoptr i32 %v0_10680 to i32*
  store i32 %v1_10684, i32* %v2_10688, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10690

dec_label_pc_10690:                               ; preds = %dec_label_pc_1066c, %dec_label_pc_10680
  %v0_10690 = phi i32 [ %v0_10670, %dec_label_pc_1066c ], [ -1, %dec_label_pc_10680 ]
  %v2_10694 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10694, i32* @r4, align 4
  ret i32 %v0_10690

; uselistorder directives
  uselistorder i32 %v0_10670, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10690, { 1, 0 }
}

define i32 @function_10698() local_unnamed_addr {
dec_label_pc_10698:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10698 = load i32, i32* @r4, align 4
  store i32 %v3_10698, i32* %stack_var_-8, align 4
  %v0_1069c = call i32 @getpid()
  store i32 %v0_1069c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1069c, -4095
  br i1 %tmp, label %dec_label_pc_106bc, label %dec_label_pc_106ac

dec_label_pc_106ac:                               ; preds = %dec_label_pc_10698
  %v0_106ac = call i32 @function_1093c()
  %v0_106b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_106b0 = sub i32 0, %v0_106b0
  %v2_106b4 = inttoptr i32 %v0_106ac to i32*
  store i32 %v1_106b0, i32* %v2_106b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_106bc

dec_label_pc_106bc:                               ; preds = %dec_label_pc_10698, %dec_label_pc_106ac
  %v0_106bc = phi i32 [ %v0_1069c, %dec_label_pc_10698 ], [ -1, %dec_label_pc_106ac ]
  %v2_106c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_106c0, i32* @r4, align 4
  ret i32 %v0_106bc

; uselistorder directives
  uselistorder i32 %v0_1069c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_106bc, { 1, 0 }
}

define i32 @function_106c4() local_unnamed_addr {
dec_label_pc_106c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_106c4 = load i32, i32* @r4, align 4
  store i32 %v3_106c4, i32* %stack_var_-8, align 4
  %v0_106c8 = call i32 @getppid()
  store i32 %v0_106c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_106c8, -4095
  br i1 %tmp, label %dec_label_pc_106e8, label %dec_label_pc_106d8

dec_label_pc_106d8:                               ; preds = %dec_label_pc_106c4
  %v0_106d8 = call i32 @function_1093c()
  %v0_106dc = load i32, i32* %r4.global-to-local, align 4
  %v1_106dc = sub i32 0, %v0_106dc
  %v2_106e0 = inttoptr i32 %v0_106d8 to i32*
  store i32 %v1_106dc, i32* %v2_106e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_106e8

dec_label_pc_106e8:                               ; preds = %dec_label_pc_106c4, %dec_label_pc_106d8
  %v0_106e8 = phi i32 [ %v0_106c8, %dec_label_pc_106c4 ], [ -1, %dec_label_pc_106d8 ]
  %v2_106ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_106ec, i32* @r4, align 4
  ret i32 %v0_106e8

; uselistorder directives
  uselistorder i32 %v0_106c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_106e8, { 1, 0 }
}

define i32 @function_106f0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_106f0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_106f0 = load i32, i32* @r3, align 4
  store i32 %v9_106f0, i32* %stack_var_-4, align 4
  %v2_106fc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_106fc, i32* @r3, align 4
  %v2_1070c = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_1070c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_1070c, -4095
  br i1 %tmp, label %dec_label_pc_1072c, label %dec_label_pc_1071c

dec_label_pc_1071c:                               ; preds = %dec_label_pc_106f0
  %v0_1071c = call i32 @function_1093c()
  %v0_10720 = load i32, i32* %r4.global-to-local, align 4
  %v1_10720 = sub i32 0, %v0_10720
  store i32 %v1_10720, i32* @r3, align 4
  %v2_10724 = inttoptr i32 %v0_1071c to i32*
  store i32 %v1_10720, i32* %v2_10724, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1072c

dec_label_pc_1072c:                               ; preds = %dec_label_pc_106f0, %dec_label_pc_1071c
  %v0_1072c = phi i32 [ %v2_1070c, %dec_label_pc_106f0 ], [ -1, %dec_label_pc_1071c ]
  ret i32 %v0_1072c

; uselistorder directives
  uselistorder i32 %v2_1070c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_1072c, { 1, 0 }
}

define i32 @function_10740(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10740:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10740 = load i32, i32* @r4, align 4
  store i32 %v3_10740, i32* %stack_var_-8, align 4
  %v2_10744 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_10748 = icmp eq i32 %v2_10744, -4096
  store i1 %v7_10748, i1* @cpsr_z, align 1
  store i32 %v2_10744, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10744, -4095
  br i1 %tmp, label %dec_label_pc_10764, label %dec_label_pc_10754

dec_label_pc_10754:                               ; preds = %dec_label_pc_10740
  %v0_10754 = call i32 @function_1093c()
  %v0_10758 = load i32, i32* %r4.global-to-local, align 4
  %v1_10758 = sub i32 0, %v0_10758
  %v2_1075c = inttoptr i32 %v0_10754 to i32*
  store i32 %v1_10758, i32* %v2_1075c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10764

dec_label_pc_10764:                               ; preds = %dec_label_pc_10740, %dec_label_pc_10754
  %v0_10764 = phi i32 [ %v2_10744, %dec_label_pc_10740 ], [ -1, %dec_label_pc_10754 ]
  %v2_10768 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10768, i32* @r4, align 4
  ret i32 %v0_10764

; uselistorder directives
  uselistorder i32 %v2_10744, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_10764, { 1, 0 }
}

define i32 @function_1076c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1076c:
  %r4.global-to-local = alloca i32, align 4
  %v6_1076c = load i32, i32* @r2, align 4
  %v1_1077c = and i32 %arg2, 64
  store i32 %v1_1077c, i32* @r3, align 4
  %v2_1077c = icmp eq i32 %v1_1077c, 0
  br i1 %v2_1077c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_1076c
  store i32 %v6_1076c, i32* @r3, align 4
  %phitmp = urem i32 %v6_1076c, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1076c, %bb
  %v0_1078c = phi i32 [ 0, %dec_label_pc_1076c ], [ %phitmp, %bb ]
  store i32 %v0_1078c, i32* @r2, align 4
  %v4_10794 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_10798 = icmp eq i32 %v4_10794, -4096
  store i1 %v7_10798, i1* @cpsr_z, align 1
  store i32 %v4_10794, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10794, -4095
  br i1 %tmp, label %dec_label_pc_107b4, label %dec_label_pc_107a4

dec_label_pc_107a4:                               ; preds = %.thread1
  %v0_107a4 = call i32 @function_1093c()
  %v0_107a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_107a8 = sub i32 0, %v0_107a8
  store i32 %v1_107a8, i32* @r3, align 4
  %v2_107ac = inttoptr i32 %v0_107a4 to i32*
  store i32 %v1_107a8, i32* %v2_107ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_107b4

dec_label_pc_107b4:                               ; preds = %.thread1, %dec_label_pc_107a4
  %v0_107b4 = phi i32 [ %v4_10794, %.thread1 ], [ -1, %dec_label_pc_107a4 ]
  ret i32 %v0_107b4

; uselistorder directives
  uselistorder i32 %v4_10794, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_107b4, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_107c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_107c8:
  store i32 %arg1, i32* @r2, align 4
  %v0_107d0 = load i32, i32* @r0, align 4
  %v2_107d0 = inttoptr i32 %v0_107d0 to i8*
  %v3_107d0 = call i32 @function_1076c(i8* %v2_107d0, i32 577)
  %v0_107d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_107d4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_107c8
  %v6_107d4 = and i32 %v3_107d0, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_107c8, %bb
  %v7_107d4 = phi i32 [ %v3_107d0, %dec_label_pc_107c8 ], [ %v6_107d4, %bb ]
  ret i32 %v7_107d4

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_107d8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_107d8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_107d8 = load i32, i32* @r4, align 4
  store i32 %v3_107d8, i32* %stack_var_-8, align 4
  %v2_107e0 = load i32, i32* @r2, align 4
  %v3_107e0 = load i32, i32* @r3, align 4
  %v4_107e0 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_107e0, i32 %v3_107e0, i32 0)
  store i32 %v4_107e0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_107e0, -4095
  br i1 %tmp, label %dec_label_pc_10800, label %dec_label_pc_107f0

dec_label_pc_107f0:                               ; preds = %dec_label_pc_107d8
  %v0_107f0 = call i32 @function_1093c()
  %v0_107f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_107f4 = sub i32 0, %v0_107f4
  %v2_107f8 = inttoptr i32 %v0_107f0 to i32*
  store i32 %v1_107f4, i32* %v2_107f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10800

dec_label_pc_10800:                               ; preds = %dec_label_pc_107d8, %dec_label_pc_107f0
  %v0_10800 = phi i32 [ %v4_107e0, %dec_label_pc_107d8 ], [ -1, %dec_label_pc_107f0 ]
  %v2_10804 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10804, i32* @r4, align 4
  ret i32 %v0_10800

; uselistorder directives
  uselistorder i32 %v4_107e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10800, { 1, 0 }
}

define i32 @function_10808(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10808:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10808 = load i32, i32* @r4, align 4
  store i32 %v3_10808, i32* %stack_var_-8, align 4
  %v4_1080c = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_1080c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1080c, -4095
  br i1 %tmp, label %dec_label_pc_1082c, label %dec_label_pc_1081c

dec_label_pc_1081c:                               ; preds = %dec_label_pc_10808
  %v0_1081c = call i32 @function_1093c()
  %v0_10820 = load i32, i32* %r4.global-to-local, align 4
  %v1_10820 = sub i32 0, %v0_10820
  %v2_10824 = inttoptr i32 %v0_1081c to i32*
  store i32 %v1_10820, i32* %v2_10824, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1082c

dec_label_pc_1082c:                               ; preds = %dec_label_pc_10808, %dec_label_pc_1081c
  %v0_1082c = phi i32 [ %v4_1080c, %dec_label_pc_10808 ], [ -1, %dec_label_pc_1081c ]
  %v2_10830 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10830, i32* @r4, align 4
  ret i32 %v0_1082c

; uselistorder directives
  uselistorder i32 %v4_1080c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1082c, { 1, 0 }
}

define i32 @function_10834(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10834:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10834 = load i32, i32* @r4, align 4
  store i32 %v3_10834, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1085c, label %dec_label_pc_1084c

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10834
  %v0_1084c = call i32 @function_1093c()
  %v0_10850 = load i32, i32* %r4.global-to-local, align 4
  %v1_10850 = sub i32 0, %v0_10850
  %v2_10854 = inttoptr i32 %v0_1084c to i32*
  store i32 %v1_10850, i32* %v2_10854, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10860.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1085c

dec_label_pc_1085c:                               ; preds = %dec_label_pc_10834, %dec_label_pc_1084c
  %v2_10860 = phi i32 [ %v3_10834, %dec_label_pc_10834 ], [ %v2_10860.pre, %dec_label_pc_1084c ]
  %v0_1085c = phi i32 [ %arg1, %dec_label_pc_10834 ], [ -1, %dec_label_pc_1084c ]
  store i32 %v2_10860, i32* @r4, align 4
  ret i32 %v0_1085c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1085c, { 1, 0 }
}

define i32 @function_10864(i32 %arg1) local_unnamed_addr {
dec_label_pc_10864:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10864 = load i32, i32* @r4, align 4
  store i32 %v3_10864, i32* %stack_var_-8, align 4
  %v0_10868 = call i32 @setsid()
  store i32 %v0_10868, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10868, -4095
  br i1 %tmp, label %dec_label_pc_10888, label %dec_label_pc_10878

dec_label_pc_10878:                               ; preds = %dec_label_pc_10864
  %v0_10878 = call i32 @function_1093c()
  %v0_1087c = load i32, i32* %r4.global-to-local, align 4
  %v1_1087c = sub i32 0, %v0_1087c
  %v2_10880 = inttoptr i32 %v0_10878 to i32*
  store i32 %v1_1087c, i32* %v2_10880, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10888

dec_label_pc_10888:                               ; preds = %dec_label_pc_10864, %dec_label_pc_10878
  %v0_10888 = phi i32 [ %v0_10868, %dec_label_pc_10864 ], [ -1, %dec_label_pc_10878 ]
  %v2_1088c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1088c, i32* @r4, align 4
  ret i32 %v0_10888

; uselistorder directives
  uselistorder i32 %v0_10868, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10888, { 1, 0 }
}

define i32 @function_10890(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10890:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10890 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_10890, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10890
  %v3_108985 = load i32, i32* @r4, align 4
  store i32 %v3_108985, i32* %stack_var_-8, align 4
  br label %dec_label_pc_108b8

bb:                                               ; preds = %dec_label_pc_10890
  %v3_10898 = load i32, i32* @r4, align 4
  store i32 %v3_10898, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_108b8, label %dec_label_pc_108a4

dec_label_pc_108a4:                               ; preds = %bb
  %v0_108a4 = call i32 @function_1093c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_108b0 = inttoptr i32 %v0_108a4 to i32*
  store i32 22, i32* %v2_108b0, align 4
  %v0_108dc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_108dc

dec_label_pc_108b8:                               ; preds = %.thread, %bb
  %v7_108b8 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_108b8, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_108b8, -4095
  br i1 %tmp13, label %dec_label_pc_108d8, label %dec_label_pc_108c8

dec_label_pc_108c8:                               ; preds = %dec_label_pc_108b8
  %v0_108c8 = call i32 @function_1093c()
  %v0_108cc = load i32, i32* %r4.global-to-local, align 4
  %v1_108cc = sub i32 0, %v0_108cc
  %v2_108d0 = inttoptr i32 %v0_108c8 to i32*
  store i32 %v1_108cc, i32* %v2_108d0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_108d8

dec_label_pc_108d8:                               ; preds = %dec_label_pc_108b8, %dec_label_pc_108c8
  %v0_108d8 = phi i32 [ %v7_108b8, %dec_label_pc_108b8 ], [ -1, %dec_label_pc_108c8 ]
  store i32 %v0_108d8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_108dc

dec_label_pc_108dc:                               ; preds = %dec_label_pc_108a4, %dec_label_pc_108d8
  %v0_108dc = phi i32 [ %v0_108dc.pre, %dec_label_pc_108a4 ], [ %v0_108d8, %dec_label_pc_108d8 ]
  %v2_108e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_108e0, i32* @r4, align 4
  ret i32 %v0_108dc

; uselistorder directives
  uselistorder i32 %v7_108b8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_108dc, { 1, 0 }
  uselistorder label %dec_label_pc_108d8, { 1, 0 }
  uselistorder label %dec_label_pc_108b8, { 1, 0 }
}

define i32 @function_108e4(i32* %arg1) local_unnamed_addr {
dec_label_pc_108e4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_108e4 = load i32, i32* @r4, align 4
  store i32 %v3_108e4, i32* %stack_var_-8, align 4
  %v2_108e8 = call i32 @time(i32* %arg1)
  store i32 %v2_108e8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_108e8, -4095
  br i1 %tmp, label %dec_label_pc_10908, label %dec_label_pc_108f8

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108e4
  %v0_108f8 = call i32 @function_1093c()
  %v0_108fc = load i32, i32* %r4.global-to-local, align 4
  %v1_108fc = sub i32 0, %v0_108fc
  %v2_10900 = inttoptr i32 %v0_108f8 to i32*
  store i32 %v1_108fc, i32* %v2_10900, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10908

dec_label_pc_10908:                               ; preds = %dec_label_pc_108e4, %dec_label_pc_108f8
  %v0_10908 = phi i32 [ %v2_108e8, %dec_label_pc_108e4 ], [ -1, %dec_label_pc_108f8 ]
  %v2_1090c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1090c, i32* @r4, align 4
  ret i32 %v0_10908

; uselistorder directives
  uselistorder i32 %v2_108e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10908, { 1, 0 }
}

define i32 @function_10910(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10910:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10910 = load i32, i32* @r4, align 4
  store i32 %v3_10910, i32* %stack_var_-8, align 4
  %v4_10914 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_10914, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10914, -4095
  br i1 %tmp, label %dec_label_pc_10934, label %dec_label_pc_10924

dec_label_pc_10924:                               ; preds = %dec_label_pc_10910
  %v0_10924 = call i32 @function_1093c()
  %v0_10928 = load i32, i32* %r4.global-to-local, align 4
  %v1_10928 = sub i32 0, %v0_10928
  %v2_1092c = inttoptr i32 %v0_10924 to i32*
  store i32 %v1_10928, i32* %v2_1092c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10934

dec_label_pc_10934:                               ; preds = %dec_label_pc_10910, %dec_label_pc_10924
  %v0_10934 = phi i32 [ %v4_10914, %dec_label_pc_10910 ], [ -1, %dec_label_pc_10924 ]
  %v2_10938 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10938, i32* @r4, align 4
  ret i32 %v0_10934

; uselistorder directives
  uselistorder i32 %v4_10914, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10934, { 1, 0 }
}

define i32 @function_1093c() local_unnamed_addr {
dec_label_pc_1093c:
  ret i32 ptrtoint (i32* @global_var_1b224.616 to i32)
}

define i32 @function_10948(i32 %arg1) local_unnamed_addr {
dec_label_pc_10948:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_10954 = bitcast i32* %stack_var_-20 to %tms*
  %v2_10954 = call i32 @function_11cbc(%tms* %v1_10954)
  %v2_1095c = load i32, i32* %stack_var_-20, align 4
  %v2_10960 = add i32 %v2_1095c, %tmp
  %v2_10968 = mul i32 %v2_10960, 10000
  %v1_1096c = and i32 %v2_10968, 2147483632
  ret i32 %v1_1096c

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_10978(i32 %arg1) local_unnamed_addr {
dec_label_pc_10978:
  %v0_10978 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10978, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10978
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10978, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10980(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10980:
  %v0_10980 = call i32 @function_11cf0()
  ret i32 %v0_10980
}

define i32 @function_10990(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10990:
  %v0_10990 = call i32 @function_11cf0()
  ret i32 %v0_10990

; uselistorder directives
  uselistorder i32 ()* @function_11cf0, { 1, 0 }
}

define i32 @function_109a0(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_109a0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_109a0 = sub i32 %arg1, %tmp
  %v1_109a4 = add i32 %v2_109a0, -1
  store i32 %v1_109a4, i32* %r2.global-to-local, align 4
  %v2_109a84 = load i8, i8* %arg2, align 1
  %v5_109a86 = add i32 %tmp, 1
  store i32 %v5_109a86, i32* %r1.global-to-local, align 4
  %v2_109ac7 = icmp eq i8 %v2_109a84, 0
  store i1 %v2_109ac7, i1* %cpsr_z.global-to-local, align 1
  %v5_109b08 = inttoptr i32 %arg1 to i8*
  store i8 %v2_109a84, i8* %v5_109b08, align 1
  %v0_109b49 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_109b49, label %dec_label_pc_109b8, label %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge

dec_label_pc_109a8.dec_label_pc_109a8_crit_edge:  ; preds = %dec_label_pc_109a0, %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge
  %v0_109a8.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_109b0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_109a8 = inttoptr i32 %v0_109a8.pre to i8*
  %v2_109a8 = load i8, i8* %v1_109a8, align 1
  %v5_109a8 = add i32 %v0_109a8.pre, 1
  store i32 %v5_109a8, i32* %r1.global-to-local, align 4
  %v2_109ac = icmp eq i8 %v2_109a8, 0
  store i1 %v2_109ac, i1* %cpsr_z.global-to-local, align 1
  %v4_109b0 = add i32 %v5_109a8, %v3_109b0.pre
  %v5_109b0 = inttoptr i32 %v4_109b0 to i8*
  store i8 %v2_109a8, i8* %v5_109b0, align 1
  %v0_109b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_109b4, label %dec_label_pc_109b8, label %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge

dec_label_pc_109b8:                               ; preds = %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge, %dec_label_pc_109a0
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 2, 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge, { 1, 0 }
}

define i32 @function_109bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_109bc:
  %stack_var_-8 = alloca i32, align 4
  %v2_109c0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_109c0, i32* @r1, align 4
  %v0_109c8 = call i32 @function_12220()
  %v2_109cc = icmp eq i32 %v0_109c8, 0
  br i1 %v2_109cc, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_109bc
  %v3_109d4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_109bc, %bb
  %v5_109dc = phi i32 [ -1, %dec_label_pc_109bc ], [ %v3_109d4, %bb ]
  ret i32 %v5_109dc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_109e0(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_109e0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109e0 = load i32, i32* @r4, align 4
  store i32 %v3_109e0, i32* %stack_var_-8, align 4
  %v5_109e4 = inttoptr i32 %arg3 to i32*
  %v6_109e4 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_109e4)
  store i32 %v6_109e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_109e4, -4095
  br i1 %tmp, label %dec_label_pc_10a04, label %dec_label_pc_109f4

dec_label_pc_109f4:                               ; preds = %dec_label_pc_109e0
  %v0_109f4 = call i32 @function_1093c()
  %v0_109f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_109f8 = sub i32 0, %v0_109f8
  %v2_109fc = inttoptr i32 %v0_109f4 to i32*
  store i32 %v1_109f8, i32* %v2_109fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a04

dec_label_pc_10a04:                               ; preds = %dec_label_pc_109e0, %dec_label_pc_109f4
  %v0_10a04 = phi i32 [ %v6_109e4, %dec_label_pc_109e0 ], [ -1, %dec_label_pc_109f4 ]
  %v2_10a08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a08, i32* @r4, align 4
  ret i32 %v0_10a04

; uselistorder directives
  uselistorder i32 %v6_109e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a04, { 1, 0 }
}

define i32 @function_10a0c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a0c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a0c = load i32, i32* @r4, align 4
  store i32 %v3_10a0c, i32* %stack_var_-8, align 4
  %v5_10a10 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_10a10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10a10, -4095
  br i1 %tmp, label %dec_label_pc_10a30, label %dec_label_pc_10a20

dec_label_pc_10a20:                               ; preds = %dec_label_pc_10a0c
  %v0_10a20 = call i32 @function_1093c()
  %v0_10a24 = load i32, i32* %r4.global-to-local, align 4
  %v1_10a24 = sub i32 0, %v0_10a24
  %v2_10a28 = inttoptr i32 %v0_10a20 to i32*
  store i32 %v1_10a24, i32* %v2_10a28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a30

dec_label_pc_10a30:                               ; preds = %dec_label_pc_10a0c, %dec_label_pc_10a20
  %v0_10a30 = phi i32 [ %v5_10a10, %dec_label_pc_10a0c ], [ -1, %dec_label_pc_10a20 ]
  %v2_10a34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a34, i32* @r4, align 4
  ret i32 %v0_10a30

; uselistorder directives
  uselistorder i32 %v5_10a10, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a30, { 1, 0 }
}

define i32 @function_10a38(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a38:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a38 = load i32, i32* @r4, align 4
  store i32 %v3_10a38, i32* %stack_var_-8, align 4
  %v5_10a3c = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_10a3c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10a3c, -4095
  br i1 %tmp, label %dec_label_pc_10a5c, label %dec_label_pc_10a4c

dec_label_pc_10a4c:                               ; preds = %dec_label_pc_10a38
  %v0_10a4c = call i32 @function_1093c()
  %v0_10a50 = load i32, i32* %r4.global-to-local, align 4
  %v1_10a50 = sub i32 0, %v0_10a50
  %v2_10a54 = inttoptr i32 %v0_10a4c to i32*
  store i32 %v1_10a50, i32* %v2_10a54, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a5c

dec_label_pc_10a5c:                               ; preds = %dec_label_pc_10a38, %dec_label_pc_10a4c
  %v0_10a5c = phi i32 [ %v5_10a3c, %dec_label_pc_10a38 ], [ -1, %dec_label_pc_10a4c ]
  %v2_10a60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a60, i32* @r4, align 4
  ret i32 %v0_10a5c

; uselistorder directives
  uselistorder i32 %v5_10a3c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a5c, { 1, 0 }
}

define i32 @function_10a64(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a64:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a64 = load i32, i32* @r4, align 4
  store i32 %v3_10a64, i32* %stack_var_-8, align 4
  %v5_10a68 = inttoptr i32 %arg3 to i32*
  %v6_10a68 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_10a68)
  store i32 %v6_10a68, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_10a68, -4095
  br i1 %tmp, label %dec_label_pc_10a88, label %dec_label_pc_10a78

dec_label_pc_10a78:                               ; preds = %dec_label_pc_10a64
  %v0_10a78 = call i32 @function_1093c()
  %v0_10a7c = load i32, i32* %r4.global-to-local, align 4
  %v1_10a7c = sub i32 0, %v0_10a7c
  %v2_10a80 = inttoptr i32 %v0_10a78 to i32*
  store i32 %v1_10a7c, i32* %v2_10a80, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a88

dec_label_pc_10a88:                               ; preds = %dec_label_pc_10a64, %dec_label_pc_10a78
  %v0_10a88 = phi i32 [ %v6_10a68, %dec_label_pc_10a64 ], [ -1, %dec_label_pc_10a78 ]
  %v2_10a8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a8c, i32* @r4, align 4
  ret i32 %v0_10a88

; uselistorder directives
  uselistorder i32 %v6_10a68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a88, { 1, 0 }
}

define i32 @function_10a90(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10a90:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a90 = load i32, i32* @r4, align 4
  store i32 %v3_10a90, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_10a98 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_10a98, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10a98, -4095
  br i1 %tmp, label %dec_label_pc_10ab8, label %dec_label_pc_10aa8

dec_label_pc_10aa8:                               ; preds = %dec_label_pc_10a90
  %v0_10aa8 = call i32 @function_1093c()
  %v0_10aac = load i32, i32* %r4.global-to-local, align 4
  %v1_10aac = sub i32 0, %v0_10aac
  %v2_10ab0 = inttoptr i32 %v0_10aa8 to i32*
  store i32 %v1_10aac, i32* %v2_10ab0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ab8

dec_label_pc_10ab8:                               ; preds = %dec_label_pc_10a90, %dec_label_pc_10aa8
  %v0_10ab8 = phi i32 [ %v5_10a98, %dec_label_pc_10a90 ], [ -1, %dec_label_pc_10aa8 ]
  %v2_10abc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10abc, i32* @r4, align 4
  ret i32 %v0_10ab8

; uselistorder directives
  uselistorder i32 %v5_10a98, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ab8, { 1, 0 }
}

define i32 @function_10ac0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ac0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ac0 = load i32, i32* @r4, align 4
  store i32 %v3_10ac0, i32* %stack_var_-8, align 4
  %v2_10ac4 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_10ac4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10ac4, -4095
  br i1 %tmp, label %dec_label_pc_10ae4, label %dec_label_pc_10ad4

dec_label_pc_10ad4:                               ; preds = %dec_label_pc_10ac0
  %v0_10ad4 = call i32 @function_1093c()
  %v0_10ad8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10ad8 = sub i32 0, %v0_10ad8
  %v2_10adc = inttoptr i32 %v0_10ad4 to i32*
  store i32 %v1_10ad8, i32* %v2_10adc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ae4

dec_label_pc_10ae4:                               ; preds = %dec_label_pc_10ac0, %dec_label_pc_10ad4
  %v0_10ae4 = phi i32 [ %v2_10ac4, %dec_label_pc_10ac0 ], [ -1, %dec_label_pc_10ad4 ]
  %v2_10ae8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10ae8, i32* %r4.global-to-local, align 4
  ret i32 %v0_10ae4

; uselistorder directives
  uselistorder i32 %v2_10ac4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ae4, { 1, 0 }
}

define i32 @function_10aec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10aec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10aec = load i32, i32* @r4, align 4
  store i32 %v3_10aec, i32* %stack_var_-8, align 4
  %v5_10af0 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_10af0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10af0, -4095
  br i1 %tmp, label %dec_label_pc_10b10, label %dec_label_pc_10b00

dec_label_pc_10b00:                               ; preds = %dec_label_pc_10aec
  %v0_10b00 = call i32 @function_1093c()
  %v0_10b04 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b04 = sub i32 0, %v0_10b04
  %v2_10b08 = inttoptr i32 %v0_10b00 to i32*
  store i32 %v1_10b04, i32* %v2_10b08, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b10

dec_label_pc_10b10:                               ; preds = %dec_label_pc_10aec, %dec_label_pc_10b00
  %v0_10b10 = phi i32 [ %v5_10af0, %dec_label_pc_10aec ], [ -1, %dec_label_pc_10b00 ]
  %v2_10b14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10b14, i32* @r4, align 4
  ret i32 %v0_10b10

; uselistorder directives
  uselistorder i32 %v5_10af0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b10, { 1, 0 }
}

define i32 @function_10b18(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10b18:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10b18 = load i32, i32* @r4, align 4
  store i32 %v3_10b18, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_10b24 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_10b24, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10b24, -4095
  br i1 %tmp, label %dec_label_pc_10b44, label %dec_label_pc_10b34

dec_label_pc_10b34:                               ; preds = %dec_label_pc_10b18
  %v0_10b34 = call i32 @function_1093c()
  %v0_10b38 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b38 = sub i32 0, %v0_10b38
  %v2_10b3c = inttoptr i32 %v0_10b34 to i32*
  store i32 %v1_10b38, i32* %v2_10b3c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b44

dec_label_pc_10b44:                               ; preds = %dec_label_pc_10b18, %dec_label_pc_10b34
  %v0_10b44 = phi i32 [ %v5_10b24, %dec_label_pc_10b18 ], [ -1, %dec_label_pc_10b34 ]
  %v2_10b48 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10b48, i32* @r4, align 4
  ret i32 %v0_10b44

; uselistorder directives
  uselistorder i32 %v5_10b24, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b44, { 1, 0 }
}

define i32 @function_10b4c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10b4c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b4c = load i32, i32* @r4, align 4
  store i32 %v3_10b4c, i32* %stack_var_-8, align 4
  %v5_10b50 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_10b50, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10b50, -4095
  br i1 %tmp, label %dec_label_pc_10b70, label %dec_label_pc_10b60

dec_label_pc_10b60:                               ; preds = %dec_label_pc_10b4c
  %v0_10b60 = call i32 @function_1093c()
  %v0_10b64 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b64 = sub i32 0, %v0_10b64
  %v2_10b68 = inttoptr i32 %v0_10b60 to i32*
  store i32 %v1_10b64, i32* %v2_10b68, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b70

dec_label_pc_10b70:                               ; preds = %dec_label_pc_10b4c, %dec_label_pc_10b60
  %v0_10b70 = phi i32 [ %v5_10b50, %dec_label_pc_10b4c ], [ -1, %dec_label_pc_10b60 ]
  %v2_10b74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10b74, i32* @r4, align 4
  ret i32 %v0_10b70

; uselistorder directives
  uselistorder i32 %v5_10b50, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b70, { 1, 0 }
}

define i32 @function_10b78(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10b78:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10b78 = load i32, i32* @r4, align 4
  store i32 %v3_10b78, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_10b84 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_10b84, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10b84, -4095
  br i1 %tmp, label %dec_label_pc_10ba4, label %dec_label_pc_10b94

dec_label_pc_10b94:                               ; preds = %dec_label_pc_10b78
  %v0_10b94 = call i32 @function_1093c()
  %v0_10b98 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b98 = sub i32 0, %v0_10b98
  %v2_10b9c = inttoptr i32 %v0_10b94 to i32*
  store i32 %v1_10b98, i32* %v2_10b9c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ba4

dec_label_pc_10ba4:                               ; preds = %dec_label_pc_10b78, %dec_label_pc_10b94
  %v0_10ba4 = phi i32 [ %v5_10b84, %dec_label_pc_10b78 ], [ -1, %dec_label_pc_10b94 ]
  %v2_10ba8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10ba8, i32* @r4, align 4
  ret i32 %v0_10ba4

; uselistorder directives
  uselistorder i32 %v5_10b84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ba4, { 1, 0 }
}

define i32 @function_10bac(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10bac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10bac = load i32, i32* @r4, align 4
  store i32 %v3_10bac, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_10bb4 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_10bb4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10bb4, -4095
  br i1 %tmp, label %dec_label_pc_10bd4, label %dec_label_pc_10bc4

dec_label_pc_10bc4:                               ; preds = %dec_label_pc_10bac
  %v0_10bc4 = call i32 @function_1093c()
  %v0_10bc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10bc8 = sub i32 0, %v0_10bc8
  %v2_10bcc = inttoptr i32 %v0_10bc4 to i32*
  store i32 %v1_10bc8, i32* %v2_10bcc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10bd4

dec_label_pc_10bd4:                               ; preds = %dec_label_pc_10bac, %dec_label_pc_10bc4
  %v0_10bd4 = phi i32 [ %v5_10bb4, %dec_label_pc_10bac ], [ -1, %dec_label_pc_10bc4 ]
  %v2_10bd8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10bd8, i32* @r4, align 4
  ret i32 %v0_10bd4

; uselistorder directives
  uselistorder i32 %v5_10bb4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10bd4, { 1, 0 }
}

define i32 @function_10bdc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10bdc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10bdc = load i32, i32* @r4, align 4
  store i32 %v3_10bdc, i32* %stack_var_-8, align 4
  %v3_10be0 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_10be0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_10be0, -4095
  br i1 %tmp, label %dec_label_pc_10c00, label %dec_label_pc_10bf0

dec_label_pc_10bf0:                               ; preds = %dec_label_pc_10bdc
  %v0_10bf0 = call i32 @function_1093c()
  %v0_10bf4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10bf4 = sub i32 0, %v0_10bf4
  %v2_10bf8 = inttoptr i32 %v0_10bf0 to i32*
  store i32 %v1_10bf4, i32* %v2_10bf8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c00

dec_label_pc_10c00:                               ; preds = %dec_label_pc_10bdc, %dec_label_pc_10bf0
  %v0_10c00 = phi i32 [ %v3_10be0, %dec_label_pc_10bdc ], [ -1, %dec_label_pc_10bf0 ]
  %v2_10c04 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10c04, i32* @r4, align 4
  ret i32 %v0_10c00

; uselistorder directives
  uselistorder i32 %v3_10be0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c00, { 1, 0 }
}

define i32 @function_10c08(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c08:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_10c24, label %dec_label_pc_10c14

dec_label_pc_10c14:                               ; preds = %dec_label_pc_10c08
  %v8_10c18 = icmp sgt i32 %arg1, 64
  br i1 %v8_10c18, label %dec_label_pc_10c24, label %dec_label_pc_10c1c

dec_label_pc_10c1c:                               ; preds = %dec_label_pc_10c14
  %v0_10c20 = call i32 @function_10d2c()
  br label %dec_label_pc_10c24

dec_label_pc_10c24:                               ; preds = %dec_label_pc_10c14, %dec_label_pc_10c08, %dec_label_pc_10c1c
  %v0_10c24 = call i32 @function_1093c()
  %v2_10c2c = inttoptr i32 %v0_10c24 to i32*
  store i32 22, i32* %v2_10c2c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c24, { 2, 0, 1 }
}

define i32 @function_10c38(i32 %arg1) local_unnamed_addr {
dec_label_pc_10c38:
  store i32 128, i32* @r2, align 4
  %v0_10c44 = load i32, i32* @r0, align 4
  %v2_10c44 = inttoptr i32 %v0_10c44 to i8*
  %v3_10c44 = call i32 @function_12180(i8* %v2_10c44, i32 0)
  ret i32 0
}

define i32 @function_10c50(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c50:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10c50 = load i32, i32* @r4, align 4
  store i32 %v3_10c50, i32* %stack_var_-12, align 4
  %v6_10c50 = load i32, i32* @r5, align 4
  %v10_10c50 = ptrtoint i32* %stack_var_-12 to i32
  %v7_10c54 = icmp eq i32 %arg2, -1
  %v0_10c60.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_10c54, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10c50
  br label %dec_label_pc_10c78

bb:                                               ; preds = %dec_label_pc_10c50
  %v2_10c5c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_10c60.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_10c60.pre, 1
  br i1 %tmp19, label %dec_label_pc_10c78, label %dec_label_pc_10c68

dec_label_pc_10c68:                               ; preds = %bb
  %v7_10c6c = icmp sgt i32 %v0_10c60.pre, 64
  br i1 %v7_10c6c, label %dec_label_pc_10c78, label %bb20

bb20:                                             ; preds = %dec_label_pc_10c68
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_10c9c24 = add i32 %v10_10c50, 124
  store i32 %v5_10c9c24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10c8c

dec_label_pc_10c78:                               ; preds = %.thread, %dec_label_pc_10c68, %bb
  %v0_10c78 = call i32 @function_1093c()
  store i32 %v0_10c78, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10c84 = inttoptr i32 %v0_10c78 to i32*
  store i32 22, i32* %v2_10c84, align 4
  %v0_10cf8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10cf8

dec_label_pc_10c8c:                               ; preds = %bb20, %dec_label_pc_10c8c
  %v5_10c9c25 = phi i32 [ %v5_10c9c24, %bb20 ], [ %v5_10c9c, %dec_label_pc_10c8c ]
  %v2_10c90 = add i32 %v5_10c9c25, -136
  %v3_10c90 = inttoptr i32 %v2_10c90 to i32*
  store i32 0, i32* %v3_10c90, align 4
  %v0_10c94.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_10c94 = add i32 %v0_10c94.pre, -1
  store i32 %v1_10c94, i32* %r0.global-to-local, align 4
  %v6_10c94 = icmp slt i32 %v1_10c94, 0
  %v4_10c9c = mul i32 %v1_10c94, 4
  %v5_10c9c = add i32 %v4_10c9c, %v10_10c50
  store i32 %v5_10c9c, i32* %r2.global-to-local, align 4
  br i1 %v6_10c94, label %dec_label_pc_10ca4, label %dec_label_pc_10c8c

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10c8c
  %v2_10ca4 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_10ca4, i32* @r5, align 4
  %v2_10ca8 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_10ca8, i32* @r0, align 4
  %v0_10cac = load i32, i32* @r4, align 4
  store i32 %v0_10cac, i32* @r1, align 4
  %v0_10cb0 = call i32 @function_10d2c()
  store i32 %v0_10cb0, i32* %r0.global-to-local, align 4
  %v1_10cb4 = icmp slt i32 %v0_10cb0, 0
  br i1 %v1_10cb4, label %dec_label_pc_10cf4, label %dec_label_pc_10cbc

dec_label_pc_10cbc:                               ; preds = %dec_label_pc_10ca4
  %v0_10cbc = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1b2fc.619 to i32), i32* %r0.global-to-local, align 4
  %v2_10cc4 = call i32 @function_10d08(i32 ptrtoint (i32* @global_var_1b2fc.619 to i32), i32 %v0_10cbc)
  store i32 %v2_10c5c, i32* %r2.global-to-local, align 4
  %v0_10cdc = load i32, i32* @r4, align 4
  store i32 %v0_10cdc, i32* %r0.global-to-local, align 4
  %v4_10ce4 = call i32 @function_11a48(i32 %v0_10cdc, i32* nonnull %stack_var_-152, i32 %v2_10c5c)
  store i32 %v4_10ce4, i32* %r0.global-to-local, align 4
  %v1_10ce8 = icmp slt i32 %v4_10ce4, 0
  br i1 %v1_10ce8, label %dec_label_pc_10cf4, label %bb23

bb23:                                             ; preds = %dec_label_pc_10cbc
  %v5_10cec = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_10cec, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10cf8

dec_label_pc_10cf4:                               ; preds = %dec_label_pc_10cbc, %dec_label_pc_10ca4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10cf8

dec_label_pc_10cf8:                               ; preds = %bb23, %dec_label_pc_10c78, %dec_label_pc_10cf4
  %v0_10cf8 = phi i32 [ %v5_10cec, %bb23 ], [ %v0_10cf8.pre, %dec_label_pc_10c78 ], [ -1, %dec_label_pc_10cf4 ]
  store i32 %v0_10cf8, i32* %r0.global-to-local, align 4
  %v2_10d00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10d00, i32* @r4, align 4
  store i32 %v6_10c50, i32* @r5, align 4
  ret i32 %v0_10cf8

; uselistorder directives
  uselistorder i32 %v0_10cf8, { 1, 0 }
  uselistorder i32 %v5_10c9c, { 1, 0 }
  uselistorder i32 %v1_10c94, { 0, 2, 1 }
  uselistorder i32 %v2_10c5c, { 1, 0 }
  uselistorder i32 %v0_10c60.pre, { 1, 0, 2 }
  uselistorder i32 %v10_10c50, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 22, { 0, 1, 2, 4, 3 }
  uselistorder i32 64, { 1, 5, 39, 11, 12, 0, 6, 13, 14, 15, 7, 16, 17, 18, 8, 19, 20, 21, 9, 22, 23, 24, 10, 25, 26, 27, 2, 28, 29, 30, 31, 32, 3, 33, 34, 35, 36, 37, 4, 38 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_10cf8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c8c, { 1, 0 }
  uselistorder label %dec_label_pc_10c78, { 1, 2, 0 }
}

define i32 @function_10d08(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10d08:
  %v1_10d08 = add i32 %arg2, -1
  %v3_10d0c = udiv i32 %v1_10d08, 32
  %v4_10d10 = mul nuw nsw i32 %v3_10d0c, 4
  %v5_10d10 = add i32 %v4_10d10, %arg1
  %v6_10d10 = inttoptr i32 %v5_10d10 to i32*
  %v7_10d10 = load i32, i32* %v6_10d10, align 4
  %v1_10d14 = urem i32 %v1_10d08, 32
  %v7_10d1c = shl i32 1, %v1_10d14
  %v8_10d1c = and i32 %v7_10d10, %v7_10d1c
  %v10_10d1c = icmp ne i32 %v8_10d1c, 0
  %. = zext i1 %v10_10d1c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_10d08, { 1, 0 }
}

define i32 @function_10d2c() local_unnamed_addr {
dec_label_pc_10d2c:
  %v0_10d2c = load i32, i32* @r1, align 4
  %v1_10d2c = add i32 %v0_10d2c, -1
  %v3_10d30 = udiv i32 %v1_10d2c, 32
  %v0_10d34 = load i32, i32* @r0, align 4
  %v4_10d34 = mul nuw nsw i32 %v3_10d30, 4
  %v5_10d34 = add i32 %v0_10d34, %v4_10d34
  %v6_10d34 = inttoptr i32 %v5_10d34 to i32*
  %v7_10d34 = load i32, i32* %v6_10d34, align 4
  %v1_10d38 = urem i32 %v1_10d2c, 32
  %v7_10d40 = shl i32 1, %v1_10d38
  %v8_10d40 = or i32 %v7_10d34, %v7_10d40
  store i32 %v8_10d40, i32* %v6_10d34, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10d2c, { 1, 0 }
}

define i32 @function_10d50(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10d50:
  %v1_10d50 = add i32 %arg2, -1
  %v3_10d54 = udiv i32 %v1_10d50, 32
  %v4_10d58 = mul nuw nsw i32 %v3_10d54, 4
  %v5_10d58 = add i32 %v4_10d58, %arg1
  %v6_10d58 = inttoptr i32 %v5_10d58 to i32*
  %v7_10d58 = load i32, i32* %v6_10d58, align 4
  %v1_10d5c = urem i32 %v1_10d50, 32
  %tmp = shl i32 -1, %v1_10d5c
  %v8_10d64 = add i32 %tmp, -1
  %v9_10d64 = and i32 %v7_10d58, %v8_10d64
  store i32 %v9_10d64, i32* %v6_10d58, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10d50, { 1, 0 }
}

define i32 @function_10d74(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d74:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10d74 = load i32, i32* @r4, align 4
  %v6_10d74 = load i32, i32* @r5, align 4
  %v9_10d74 = load i32, i32* @r6, align 4
  %v0_10d78 = load i32, i32* %r0.global-to-local, align 4
  %v2_10d78 = icmp eq i32 %v0_10d78, 0
  %v2_10d7c = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_10d78, label %bb, label %dec_label_pc_10d88

bb:                                               ; preds = %dec_label_pc_10d74
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d90

dec_label_pc_10d88:                               ; preds = %dec_label_pc_10d74
  %tmp = icmp ugt i32 %v0_10d78, -8
  br i1 %tmp, label %dec_label_pc_10e94, label %dec_label_pc_10d90

dec_label_pc_10d90:                               ; preds = %bb, %dec_label_pc_10d88
  %v0_10d90 = phi i32 [ %v0_10d78, %dec_label_pc_10d88 ], [ 1, %bb ]
  %v1_10d90 = add i32 %v0_10d90, 4
  store i32 %v1_10d90, i32* %stack_var_-20, align 4
  store i32 %v2_10d7c, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1b1ec.621 to i32), i32* %r0.global-to-local, align 4
  %v1_10da8 = call i32 @function_1175c()
  store i32 ptrtoint (i32** @global_var_1b034.626 to i32), i32* %r0.global-to-local, align 4
  %v3_10db4 = call i32 @function_11128(i32* bitcast (i32** @global_var_1b034.626 to i32*), i32 %v2_10d7c)
  store i32 %v3_10db4, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1ec.621 to i32), i32* %r0.global-to-local, align 4
  store i32 69068, i32* @lr, align 4
  %v1_10dc8 = call i32 @function_1175c()
  store i32 %v1_10dc8, i32* %r0.global-to-local, align 4
  %v2_10dcc = icmp eq i32 %v3_10db4, 0
  br i1 %v2_10dcc, label %dec_label_pc_10dd4, label %dec_label_pc_10e84

dec_label_pc_10dd4:                               ; preds = %dec_label_pc_10d90
  %v2_10dd8 = load i32, i32* @global_var_1b214.629, align 4
  store i32 %v2_10dd8, i32* @r4, align 4
  %v2_10ddc = load i32, i32* %stack_var_-20, align 4
  %v3_10de0 = icmp ult i32 %v2_10ddc, %v2_10dd8
  br i1 %v3_10de0, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_10dd4
  %v3_10de4 = add i32 %v2_10dd8, -1
  %v2_10de8 = add i32 %v3_10de4, %v2_10ddc
  %v2_10dec = sub i32 0, %v2_10dd8
  %v3_10df0 = and i32 %v2_10de8, %v2_10dec
  store i32 %v3_10df0, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_10dd4, %bb14
  store i32 ptrtoint (i32* @global_var_1b37c.631 to i32), i32* %r0.global-to-local, align 4
  %v1_10dfc = call i32 @function_1175c()
  %v0_10e00 = load i32, i32* @r4, align 4
  store i32 %v0_10e00, i32* %r0.global-to-local, align 4
  %v1_10e04 = call i32 @function_11c64(i32 %v0_10e00)
  store i32 %v1_10e04, i32* %r0.global-to-local, align 4
  %v7_10e08 = icmp eq i32 %v1_10e04, -1
  br i1 %v7_10e08, label %bb15, label %dec_label_pc_10e14

bb15:                                             ; preds = %.thread3
  store i32 %v1_10e04, i32* @r5, align 4
  br label %dec_label_pc_10e28

dec_label_pc_10e14:                               ; preds = %.thread3
  %v1_10e14 = add i32 %v1_10e04, 3
  %v1_10e18 = and i32 %v1_10e14, -4
  store i32 %v1_10e18, i32* @r5, align 4
  %v9_10e1c = icmp eq i32 %v1_10e18, %v1_10e04
  br i1 %v9_10e1c, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_10e14
  %v3_10e20 = sub i32 %v1_10e18, %v1_10e04
  store i32 %v3_10e20, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_10e14, %bb16
  %v1_10e24 = xor i1 %v9_10e1c, true
  call void @__pseudo_cond_branch(i1 %v1_10e24, i32 ptrtoint (i32* @global_var_11c64.632 to i32))
  br label %dec_label_pc_10e28

dec_label_pc_10e28:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1b37c.631 to i32), i32* %r0.global-to-local, align 4
  store i32 69176, i32* @lr, align 4
  %v1_10e34 = call i32 @function_1175c()
  store i32 %v1_10e34, i32* %r0.global-to-local, align 4
  %v0_10e38 = load i32, i32* @r5, align 4
  %v7_10e38 = icmp eq i32 %v0_10e38, -1
  br i1 %v7_10e38, label %dec_label_pc_10e94, label %dec_label_pc_10e40

dec_label_pc_10e40:                               ; preds = %dec_label_pc_10e28
  store i32 ptrtoint (i32* @global_var_1b1ec.621 to i32), i32* %r0.global-to-local, align 4
  %v1_10e4c = call i32 @function_1175c()
  %v0_10e50 = load i32, i32* @r4, align 4
  %v0_10e54 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1b034.626 to i32), i32* %r0.global-to-local, align 4
  %v4_10e5c = call i32 @function_1127c(i32* bitcast (i32** @global_var_1b034.626 to i32*), i32 %v0_10e54, i32 %v0_10e50)
  store i32 ptrtoint (i32** @global_var_1b034.626 to i32), i32* %r0.global-to-local, align 4
  %v3_10e68 = call i32 @function_11128(i32* bitcast (i32** @global_var_1b034.626 to i32*), i32 %v2_10d7c)
  store i32 %v3_10e68, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1ec.621 to i32), i32* %r0.global-to-local, align 4
  store i32 69244, i32* @lr, align 4
  %v1_10e78 = call i32 @function_1175c()
  store i32 %v1_10e78, i32* %r0.global-to-local, align 4
  %v2_10e7c = icmp eq i32 %v3_10e68, 0
  br i1 %v2_10e7c, label %dec_label_pc_10e94, label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %dec_label_pc_10d90, %dec_label_pc_10e40
  %v1_10e88 = phi i32 [ %v3_10db4, %dec_label_pc_10d90 ], [ %v3_10e68, %dec_label_pc_10e40 ]
  %v2_10e84 = load i32, i32* %stack_var_-20, align 4
  %v2_10e88 = inttoptr i32 %v1_10e88 to i32*
  store i32 %v2_10e84, i32* %v2_10e88, align 4
  %v3_10e88 = load i32, i32* %r4.global-to-local, align 4
  %v4_10e88 = add i32 %v3_10e88, 4
  store i32 %v4_10e88, i32* %r4.global-to-local, align 4
  %v2_10e8c = icmp eq i32 %v4_10e88, 0
  br i1 %v2_10e8c, label %dec_label_pc_10e94, label %dec_label_pc_10ea4

dec_label_pc_10e94:                               ; preds = %dec_label_pc_10e84, %dec_label_pc_10e40, %dec_label_pc_10e28, %dec_label_pc_10d88
  %v0_10e94 = call i32 @function_1093c()
  store i32 %v0_10e94, i32* %r0.global-to-local, align 4
  %v2_10e9c = inttoptr i32 %v0_10e94 to i32*
  store i32 12, i32* %v2_10e9c, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %dec_label_pc_10e84, %dec_label_pc_10e94
  %v0_10ea4 = phi i32 [ %v4_10e88, %dec_label_pc_10e84 ], [ 0, %dec_label_pc_10e94 ]
  store i32 %v0_10ea4, i32* %r0.global-to-local, align 4
  store i32 %v3_10d74, i32* @r4, align 4
  store i32 %v6_10d74, i32* @r5, align 4
  store i32 %v9_10d74, i32* @r6, align 4
  ret i32 %v0_10ea4

; uselistorder directives
  uselistorder i32 %v0_10ea4, { 1, 0 }
  uselistorder i32 %v3_10e68, { 1, 0, 2 }
  uselistorder i32 %v1_10e18, { 1, 0, 2 }
  uselistorder i32 %v1_10e04, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_10db4, { 1, 0, 2 }
  uselistorder i32 %v0_10d78, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 5, 7, 4, 6, 8, 9, 10, 3, 12, 11, 19, 14, 13, 2, 15, 16, 17, 18, 0, 1 }
  uselistorder label %dec_label_pc_10ea4, { 1, 0 }
  uselistorder label %dec_label_pc_10e84, { 1, 0 }
  uselistorder label %dec_label_pc_10e28, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_10d90, { 1, 0 }
}

define i32 @function_10ec8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ec8:
  %stack_var_-12 = alloca i32, align 4
  %v3_10ec8 = load i32, i32* @r4, align 4
  store i32 %v3_10ec8, i32* %stack_var_-12, align 4
  %v6_10ec8 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_10ed0 = mul i32 %arg2, %arg1
  store i32 %v2_10ed0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_10ed4 = icmp eq i32 %arg1, 0
  store i32 %v2_10ed0, i32* @r0, align 4
  br i1 %v2_10ed4, label %dec_label_pc_10f00, label %dec_label_pc_10ee0

dec_label_pc_10ee0:                               ; preds = %dec_label_pc_10ec8
  %v0_10ee0 = call i32 @function_102b8()
  %v0_10ee4 = load i32, i32* @r5, align 4
  %v9_10ee4 = icmp eq i32 %v0_10ee4, %v0_10ee0
  store i32 0, i32* @r5, align 4
  br i1 %v9_10ee4, label %dec_label_pc_10ee0.dec_label_pc_10f00_crit_edge, label %dec_label_pc_10ef0

dec_label_pc_10ee0.dec_label_pc_10f00_crit_edge:  ; preds = %dec_label_pc_10ee0
  %v0_10f00.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10f00

dec_label_pc_10ef0:                               ; preds = %dec_label_pc_10ee0
  %v0_10ef0 = call i32 @function_1093c()
  %v2_10ef8 = inttoptr i32 %v0_10ef0 to i32*
  store i32 12, i32* %v2_10ef8, align 4
  br label %dec_label_pc_10f18

dec_label_pc_10f00:                               ; preds = %dec_label_pc_10ee0.dec_label_pc_10f00_crit_edge, %dec_label_pc_10ec8
  %v0_10f00 = phi i32 [ %v0_10f00.pre, %dec_label_pc_10ee0.dec_label_pc_10f00_crit_edge ], [ %v2_10ed0, %dec_label_pc_10ec8 ]
  %v1_10f04 = call i32 @function_10d74(i32 %v0_10f00)
  store i32 %v1_10f04, i32* @r5, align 4
  %v0_10f0c = load i32, i32* @r4, align 4
  store i32 %v0_10f0c, i32* @r2, align 4
  store i32 69400, i32* @lr, align 4
  %v1_10f14 = icmp ne i32 %v1_10f04, 0
  call void @__pseudo_cond_branch(i1 %v1_10f14, i32 ptrtoint (i32* @global_var_12180.633 to i32))
  br label %dec_label_pc_10f18

dec_label_pc_10f18:                               ; preds = %dec_label_pc_10ef0, %dec_label_pc_10f00
  %v0_10f18 = load i32, i32* @r5, align 4
  %v2_10f1c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10f1c, i32* @r4, align 4
  store i32 %v6_10ec8, i32* @r5, align 4
  ret i32 %v0_10f18

; uselistorder directives
  uselistorder i32 ()* @function_102b8, { 1, 2, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10f18, { 1, 0 }
}

define i32 @function_10f20() local_unnamed_addr {
dec_label_pc_10f20:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_10f20 = load i32, i32* @r0, align 4
  %v2_10f20 = icmp eq i32 %v0_10f20, 0
  %v3_10f24 = load i32, i32* @r4, align 4
  store i32 %v3_10f24, i32* %stack_var_-24, align 4
  %v6_10f24 = load i32, i32* @r5, align 4
  %v9_10f24 = load i32, i32* @r6, align 4
  %v15_10f24 = load i32, i32* @r8, align 4
  br i1 %v2_10f20, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_10f20
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_10f20
  %v1_10f2c = add i32 %v0_10f20, -4
  %v2_10f2c = inttoptr i32 %v1_10f2c to i32*
  %v3_10f2c = load i32, i32* %v2_10f2c, align 4
  store i32 %v3_10f2c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1b034.626 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_10f2c, i32* @r4, align 4
  %v1_10f44 = call i32 @function_1175c()
  %v0_10f48 = load i32, i32* @r4, align 4
  %v0_10f4c = load i32, i32* @r5, align 4
  %v4_10f54 = call i32 @function_1127c(i32* bitcast (i32** @global_var_1b034.626 to i32*), i32 %v0_10f48, i32 %v0_10f4c)
  %v1_10f5c = inttoptr i32 %v4_10f54 to i32*
  %v2_10f5c = load i32, i32* %v1_10f5c, align 4
  store i32 %v2_10f5c, i32* %r6.global-to-local, align 4
  %v2_10f60 = load i32, i32* @global_var_1b214.629, align 4
  %v4_10f64 = mul i32 %v2_10f60, 8
  %v6_10f64 = icmp ult i32 %v2_10f5c, %v4_10f64
  store i32 %v4_10f54, i32* @r4, align 4
  br i1 %v6_10f64, label %dec_label_pc_10fa4, label %dec_label_pc_10f70

dec_label_pc_10f70:                               ; preds = %bb11
  %v1_10f78 = call i32 @function_1175c()
  %v1_10f80 = call i32 @function_11c64(i32 0)
  %v0_10f84 = load i32, i32* @r4, align 4
  %v1_10f84 = add i32 %v0_10f84, 12
  store i32 %v1_10f84, i32* @r5, align 4
  %v9_10f88 = icmp eq i32 %v1_10f84, %v1_10f80
  br i1 %v9_10f88, label %dec_label_pc_10fac, label %dec_label_pc_10f90

dec_label_pc_10f90:                               ; preds = %dec_label_pc_10f70
  %v1_10f9c = call i32 @function_1175c()
  br label %dec_label_pc_10fa4

dec_label_pc_10fa4:                               ; preds = %bb11, %dec_label_pc_10f90, %bb14
  %v2_10fa4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10fa4, i32* @r4, align 4
  store i32 %v6_10f24, i32* @r5, align 4
  store i32 %v9_10f24, i32* %r6.global-to-local, align 4
  store i32 %v15_10f24, i32* %r8.global-to-local, align 4
  %v0_10fa8 = call i32 @function_1175c()
  %v0_10fac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10fac

dec_label_pc_10fac:                               ; preds = %dec_label_pc_10f70, %dec_label_pc_10fa4
  %v1_10fb4 = phi i32 [ %v0_10f84, %dec_label_pc_10f70 ], [ %v0_10fac.pre, %dec_label_pc_10fa4 ]
  %v1_10fac = add i32 %v1_10fb4, 4
  %v2_10fac = inttoptr i32 %v1_10fac to i32*
  %v3_10fac = load i32, i32* %v2_10fac, align 4
  %v2_10fb0 = icmp eq i32 %v3_10fac, 0
  br i1 %v2_10fb0, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_10fac
  %v2_10fb4 = add i32 %v1_10fb4, 8
  %v3_10fb4 = inttoptr i32 %v2_10fb4 to i32*
  %v4_10fb4 = load i32, i32* %v3_10fb4, align 4
  %v3_10fb8 = add i32 %v3_10fac, 8
  %v4_10fb8 = inttoptr i32 %v3_10fb8 to i32*
  store i32 %v4_10fb4, i32* %v4_10fb8, align 4
  %v0_10fbc.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10fac, %bb12
  %v0_10fbc = phi i32 [ %v1_10fb4, %dec_label_pc_10fac ], [ %v0_10fbc.pre, %bb12 ]
  %v1_10fbc = add i32 %v0_10fbc, 8
  %v2_10fbc = inttoptr i32 %v1_10fbc to i32*
  %v3_10fbc = load i32, i32* %v2_10fbc, align 4
  %v1_10fc0 = add i32 %v0_10fbc, 4
  %v2_10fc0 = inttoptr i32 %v1_10fc0 to i32*
  %v3_10fc0 = load i32, i32* %v2_10fc0, align 4
  %v2_10fc4 = icmp eq i32 %v3_10fbc, 0
  br i1 %v2_10fc4, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_10fc8 = add i32 %v3_10fbc, 4
  %v4_10fc8 = inttoptr i32 %v3_10fc8 to i32*
  store i32 %v3_10fc0, i32* %v4_10fc8, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_10fcc = load i32, i32* %r8.global-to-local, align 4
  %v3_10fcc = inttoptr i32 %v2_10fcc to i32*
  store i32 %v3_10fc0, i32* %v3_10fcc, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_10fdc = call i32 @function_1175c()
  %v0_10fe0 = load i32, i32* %r6.global-to-local, align 4
  %v1_10fe0 = load i32, i32* @r4, align 4
  %v0_10fe8 = load i32, i32* @r5, align 4
  %v2_10fe0 = sub i32 12, %v0_10fe0
  %v1_10fe4 = add i32 %v2_10fe0, %v1_10fe0
  %v2_10fe8 = sub i32 %v1_10fe4, %v0_10fe8
  %v1_10fec = call i32 @function_11c64(i32 %v2_10fe8)
  br label %dec_label_pc_10fa4

; uselistorder directives
  uselistorder i32 %v0_10fbc, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_11c64, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_10fac, { 1, 0 }
  uselistorder label %dec_label_pc_10fa4, { 2, 1, 0 }
}

define i32 @function_11010(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11010:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11010 = load i32, i32* @r4, align 4
  store i32 %v3_11010, i32* %stack_var_-24, align 4
  %v6_11010 = load i32, i32* @r5, align 4
  %v9_11010 = load i32, i32* @r6, align 4
  %v12_11010 = load i32, i32* @r7, align 4
  %v15_11010 = load i32, i32* @r8, align 4
  %v18_11010 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11014 = icmp eq i32 %arg2, 0
  %v0_11018 = load i32, i32* @r0, align 4
  store i32 %v0_11018, i32* @r7, align 4
  br i1 %v2_11014, label %dec_label_pc_11020, label %dec_label_pc_11028

dec_label_pc_11020:                               ; preds = %dec_label_pc_11010
  %v0_11020 = call i32 @function_10f20()
  %v0_11030.pre = load i32, i32* @r4, align 4
  %v2_11034.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_11030

dec_label_pc_11028:                               ; preds = %dec_label_pc_11010
  %v2_11028 = icmp eq i32 %v0_11018, 0
  br i1 %v2_11028, label %dec_label_pc_11030, label %dec_label_pc_1103c

dec_label_pc_11030:                               ; preds = %dec_label_pc_11028, %dec_label_pc_11020
  %v2_11034 = phi i32 [ %v3_11010, %dec_label_pc_11028 ], [ %v2_11034.pre, %dec_label_pc_11020 ]
  %v0_11030 = phi i32 [ %arg2, %dec_label_pc_11028 ], [ %v0_11030.pre, %dec_label_pc_11020 ]
  store i32 %v2_11034, i32* @r4, align 4
  store i32 %v6_11010, i32* @r5, align 4
  store i32 %v9_11010, i32* @r6, align 4
  store i32 %v12_11010, i32* @r7, align 4
  store i32 %v18_11010, i32* @lr, align 4
  %v1_11038 = call i32 @function_10d74(i32 %v0_11030)
  %v0_1103c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1103c

dec_label_pc_1103c:                               ; preds = %dec_label_pc_11028, %dec_label_pc_11030
  %v0_11054 = phi i32 [ %v0_11018, %dec_label_pc_11028 ], [ %v1_11038, %dec_label_pc_11030 ]
  %v0_1103c = phi i32 [ %arg2, %dec_label_pc_11028 ], [ %v0_1103c.pre, %dec_label_pc_11030 ]
  %v1_1103c = add i32 %v0_1103c, 7
  %v1_11040 = and i32 %v1_1103c, -4
  store i32 %v1_11040, i32* @r5, align 4
  %v2_11044 = icmp ugt i32 %v1_11040, 10
  %v1_11048 = add i32 %v0_11054, -4
  %v2_11048 = inttoptr i32 %v1_11048 to i32*
  %v3_11048 = load i32, i32* %v2_11048, align 4
  store i32 %v3_11048, i32* @r6, align 4
  br i1 %v2_11044, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_1103c
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_1103c, %bb
  %v0_110d0 = phi i32 [ %v1_11040, %dec_label_pc_1103c ], [ 12, %bb ]
  store i32 %v1_11048, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_110d0, %v3_11048
  br i1 %tmp, label %dec_label_pc_1105c, label %dec_label_pc_110d0

dec_label_pc_1105c:                               ; preds = %bb14
  %v2_11050 = sub i32 %v0_110d0, %v3_11048
  %v1_1106c = call i32 @function_1175c()
  %v0_11074 = load i32, i32* @r8, align 4
  %v1_11074 = load i32, i32* @r6, align 4
  %v2_11074 = add i32 %v1_11074, %v0_11074
  %v4_1107c = call i32 @function_111bc(i32* bitcast (i32** @global_var_1b034.626 to i32*), i32 %v2_11074, i32 %v2_11050)
  store i32 %v4_1107c, i32* @r4, align 4
  store i32 69780, i32* @lr, align 4
  %v1_11090 = call i32 @function_1175c()
  %v0_11094 = load i32, i32* @r4, align 4
  %v2_11094 = icmp eq i32 %v0_11094, 0
  br i1 %v2_11094, label %dec_label_pc_110a4, label %.thread

.thread:                                          ; preds = %dec_label_pc_1105c
  %v1_11098 = load i32, i32* @r6, align 4
  %v3_11098 = add i32 %v1_11098, %v0_11094
  %v2_1109c = load i32, i32* @r7, align 4
  %v3_1109c = add i32 %v2_1109c, -4
  %v4_1109c = inttoptr i32 %v3_1109c to i32*
  store i32 %v3_11098, i32* %v4_1109c, align 4
  br label %dec_label_pc_11110

dec_label_pc_110a4:                               ; preds = %dec_label_pc_1105c
  %v0_110a4 = load i32, i32* @r5, align 4
  %v1_110a4 = add i32 %v0_110a4, -4
  %v1_110a8 = call i32 @function_10d74(i32 %v1_110a4)
  store i32 %v1_110a8, i32* @r0, align 4
  store i32 %v1_110a8, i32* @r4, align 4
  %v2_110ac = icmp eq i32 %v1_110a8, 0
  br i1 %v2_110ac, label %dec_label_pc_110c8, label %dec_label_pc_110b4

dec_label_pc_110b4:                               ; preds = %dec_label_pc_110a4
  %v0_110b4 = load i32, i32* @r6, align 4
  %v1_110b4 = add i32 %v0_110b4, -4
  store i32 %v1_110b4, i32* @r2, align 4
  %v0_110b8 = load i32, i32* @r7, align 4
  store i32 %v0_110b8, i32* @r1, align 4
  %v3_110bc = call i32 @function_10980(i32 %v1_110a8, i32 %v0_110b8, i32 %v1_110b4)
  %v0_110c0 = load i32, i32* @r7, align 4
  store i32 %v0_110c0, i32* @r0, align 4
  %v0_110c4 = call i32 @function_10f20()
  %v0_110c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_110c8

dec_label_pc_110c8:                               ; preds = %dec_label_pc_110a4, %dec_label_pc_110b4
  %v0_110c8 = phi i32 [ 0, %dec_label_pc_110a4 ], [ %v0_110c8.pre, %dec_label_pc_110b4 ]
  store i32 %v0_110c8, i32* @r7, align 4
  br label %dec_label_pc_11110

dec_label_pc_110d0:                               ; preds = %bb14
  %v1_110d0 = add i32 %v0_110d0, 28
  %tmp15 = icmp ugt i32 %v1_110d0, %v3_11048
  br i1 %tmp15, label %dec_label_pc_11110, label %dec_label_pc_110dc

dec_label_pc_110dc:                               ; preds = %dec_label_pc_110d0
  %v1_110e8 = call i32 @function_1175c()
  %v0_110ec = load i32, i32* @r8, align 4
  %v1_110ec = load i32, i32* @r5, align 4
  %v2_110ec = add i32 %v1_110ec, %v0_110ec
  %v1_110f0 = load i32, i32* @r6, align 4
  %v2_110f0 = sub i32 %v1_110f0, %v1_110ec
  %v4_110f8 = call i32 @function_1127c(i32* bitcast (i32** @global_var_1b034.626 to i32*), i32 %v2_110ec, i32 %v2_110f0)
  store i32 69900, i32* @lr, align 4
  %v1_11108 = call i32 @function_1175c()
  %v0_1110c = load i32, i32* @r5, align 4
  %v1_1110c = load i32, i32* @r7, align 4
  %v2_1110c = add i32 %v1_1110c, -4
  %v3_1110c = inttoptr i32 %v2_1110c to i32*
  store i32 %v0_1110c, i32* %v3_1110c, align 4
  br label %dec_label_pc_11110

dec_label_pc_11110:                               ; preds = %.thread, %dec_label_pc_110d0, %dec_label_pc_110c8, %dec_label_pc_110dc
  %v0_11110 = load i32, i32* @r7, align 4
  %v2_11114 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11114, i32* @r4, align 4
  store i32 %v6_11010, i32* @r5, align 4
  store i32 %v9_11010, i32* @r6, align 4
  store i32 %v12_11010, i32* @r7, align 4
  store i32 %v15_11010, i32* @r8, align 4
  ret i32 %v0_11110

; uselistorder directives
  uselistorder i32 %v1_110ec, { 1, 0 }
  uselistorder i32 %v0_110d0, { 1, 2, 0 }
  uselistorder i32 %v3_11048, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1b034.626, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1b034.626 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_10d74, { 1, 25, 0, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 ()* @function_10f20, { 1, 0, 2 }
  uselistorder i32* @r8, { 74, 75, 76, 77, 78, 88, 7, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 1, 26, 2, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 41, 39, 42, 43, 44, 45, 47, 46, 48, 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 99, 95, 96, 97, 98, 100, 101, 102, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94 }
  uselistorder i32* @r7, { 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 6, 7, 8, 14, 15, 16, 3, 5, 23, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 24, 1, 42, 43, 44, 45, 46, 47, 48, 49, 191, 192, 193, 194, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 2, 4, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 151, 152, 153, 154, 156, 157, 158, 159, 195, 196, 197, 198, 203, 199, 200, 201, 202, 204, 205, 206, 207, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190 }
  uselistorder label %dec_label_pc_11110, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_110c8, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_1103c, { 1, 0 }
}

define i32 @function_11128(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11128:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_11128 = inttoptr i32 %arg2 to i32*
  %v2_11128 = load i32, i32* %v1_11128, align 4
  %v3_1112c = load i32, i32* @r4, align 4
  store i32 %v3_1112c, i32* %stack_var_-8, align 4
  %v1_11130 = add i32 %v2_11128, 3
  %v1_11134 = and i32 %v1_11130, -4
  store i32 %v1_11134, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_1113c = icmp ugt i32 %v1_11134, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11144 = load i32, i32* %arg1, align 4
  store i32 %v2_11144, i32* %r0.global-to-local, align 4
  br i1 %v2_1113c, label %dec_label_pc_111b0.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_11128
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_111b0.preheader

dec_label_pc_111b0.preheader:                     ; preds = %dec_label_pc_11128, %bb
  %v1_11164 = phi i32 [ %v1_11134, %dec_label_pc_11128 ], [ 12, %bb ]
  %v2_111b09 = icmp eq i32 %v2_11144, 0
  br i1 %v2_111b09, label %dec_label_pc_111b8, label %dec_label_pc_11150

dec_label_pc_11150:                               ; preds = %dec_label_pc_111b0.preheader, %dec_label_pc_111ac
  %v2_11168 = phi i32 [ %v3_111ac, %dec_label_pc_111ac ], [ %v2_11144, %dec_label_pc_111b0.preheader ]
  %v1_11150 = inttoptr i32 %v2_11168 to i32*
  %v2_11150 = load i32, i32* %v1_11150, align 4
  store i32 %v2_11150, i32* @ip, align 4
  %v3_11154 = icmp ult i32 %v2_11150, %v1_11164
  br i1 %v3_11154, label %dec_label_pc_111ac, label %dec_label_pc_1115c

dec_label_pc_1115c:                               ; preds = %dec_label_pc_11150
  %v1_1115c = add i32 %v1_11164, 44
  %v3_11160 = icmp ult i32 %v2_11150, %v1_1115c
  br i1 %v3_11160, label %dec_label_pc_11170, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_1115c
  %v2_11154.le = sub i32 %v2_11150, %v1_11164
  store i32 %v2_11154.le, i32* %v1_11150, align 4
  %v0_1119c.pre = load i32, i32* @ip, align 4
  %v0_111a4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_11170:                               ; preds = %dec_label_pc_1115c
  %v1_11170 = add i32 %v2_11168, 4
  %v2_11170 = inttoptr i32 %v1_11170 to i32*
  %v3_11170 = load i32, i32* %v2_11170, align 4
  store i32 %v3_11170, i32* %r2.global-to-local, align 4
  %v2_11174 = icmp eq i32 %v3_11170, 0
  br i1 %v2_11174, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_11170
  %v2_11178 = add i32 %v2_11168, 8
  %v3_11178 = inttoptr i32 %v2_11178 to i32*
  %v4_11178 = load i32, i32* %v3_11178, align 4
  %v3_1117c = add i32 %v3_11170, 8
  %v4_1117c = inttoptr i32 %v3_1117c to i32*
  store i32 %v4_11178, i32* %v4_1117c, align 4
  %v0_11180.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11170, %bb27
  %v0_11180 = phi i32 [ %v2_11168, %dec_label_pc_11170 ], [ %v0_11180.pre, %bb27 ]
  %v1_11180 = add i32 %v0_11180, 8
  %v2_11180 = inttoptr i32 %v1_11180 to i32*
  %v3_11180 = load i32, i32* %v2_11180, align 4
  %v1_11184 = add i32 %v0_11180, 4
  %v2_11184 = inttoptr i32 %v1_11184 to i32*
  %v3_11184 = load i32, i32* %v2_11184, align 4
  %v2_11188 = icmp eq i32 %v3_11180, 0
  br i1 %v2_11188, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_1118c = add i32 %v3_11180, 4
  %v4_1118c = inttoptr i32 %v3_1118c to i32*
  store i32 %v3_11184, i32* %v4_1118c, align 4
  %v1_11194 = load i32, i32* @ip, align 4
  store i32 %v1_11194, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_11190 = load i32, i32* %r1.global-to-local, align 4
  %v3_11190 = inttoptr i32 %v2_11190 to i32*
  store i32 %v3_11184, i32* %v3_11190, align 4
  %v1_11198.pre = load i32, i32* @ip, align 4
  store i32 %v1_11198.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_111a4 = phi i32 [ %v0_111a4.pre, %.thread._crit_edge ], [ %v1_11194, %bb28 ], [ %v1_11198.pre, %.thread5 ]
  %v0_1119c = phi i32 [ %v0_1119c.pre, %.thread._crit_edge ], [ %v1_11194, %bb28 ], [ %v1_11198.pre, %.thread5 ]
  %v1_1119c = load i32, i32* %r0.global-to-local, align 4
  %v2_1119c = sub i32 %v1_1119c, %v0_1119c
  %v1_111a0 = add i32 %v2_1119c, 12
  store i32 %v1_111a0, i32* %r0.global-to-local, align 4
  %v1_111a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_111a4 = inttoptr i32 %v1_111a4 to i32*
  store i32 %v0_111a4, i32* %v2_111a4, align 4
  %v2_111a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_111a8, i32* %r4.global-to-local, align 4
  ret i32 %v1_111a0

dec_label_pc_111ac:                               ; preds = %dec_label_pc_11150
  %v1_111ac = add i32 %v2_11168, 4
  %v2_111ac = inttoptr i32 %v1_111ac to i32*
  %v3_111ac = load i32, i32* %v2_111ac, align 4
  store i32 %v3_111ac, i32* %r0.global-to-local, align 4
  %v2_111b0 = icmp eq i32 %v3_111ac, 0
  br i1 %v2_111b0, label %dec_label_pc_111b0.dec_label_pc_111b8_crit_edge, label %dec_label_pc_11150

dec_label_pc_111b0.dec_label_pc_111b8_crit_edge:  ; preds = %dec_label_pc_111ac
  br label %dec_label_pc_111b8

dec_label_pc_111b8:                               ; preds = %dec_label_pc_111b0.dec_label_pc_111b8_crit_edge, %dec_label_pc_111b0.preheader
  store i32 %v3_1112c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_111ac, { 1, 2, 0 }
  uselistorder i32 %v0_11180, { 1, 0 }
  uselistorder i32 %v2_11150, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11168, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_11164, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_11150, { 1, 0 }
  uselistorder label %dec_label_pc_111b0.preheader, { 1, 0 }
}

define i32 @function_111bc(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_111bc:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_111c0 = load i32, i32* %arg1, align 4
  store i32 %v2_111c0, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_112386 = icmp eq i32 %v2_111c0, 0
  br i1 %v2_112386, label %dec_label_pc_11240, label %dec_label_pc_111cc

dec_label_pc_111cc:                               ; preds = %dec_label_pc_111bc, %dec_label_pc_11234
  %v0_1120c = phi i32 [ %v3_11234, %dec_label_pc_11234 ], [ %v2_111c0, %dec_label_pc_111bc ]
  %v1_111cc = inttoptr i32 %v0_1120c to i32*
  %v2_111cc = load i32, i32* %v1_111cc, align 4
  store i32 %v2_111cc, i32* %r0.global-to-local, align 4
  %v2_111d0 = sub i32 %v0_1120c, %v2_111cc
  %v1_111d4 = add i32 %v2_111d0, 12
  %v3_111d8 = icmp uge i32 %v1_111d4, %arg2
  %v9_111d8 = icmp eq i32 %v1_111d4, %arg2
  %v2_111dc = xor i1 %v9_111d8, true
  %v3_111dc = and i1 %v3_111d8, %v2_111dc
  br i1 %v3_111dc, label %dec_label_pc_11234, label %dec_label_pc_111e0

dec_label_pc_111e0:                               ; preds = %dec_label_pc_111cc
  br i1 %v9_111d8, label %dec_label_pc_111e4, label %dec_label_pc_11240

dec_label_pc_111e4:                               ; preds = %dec_label_pc_111e0
  %v1_111e4 = add i32 %arg3, 3
  %v1_111e8 = and i32 %v1_111e4, -4
  store i32 %v1_111e8, i32* %r2.global-to-local, align 4
  %v2_111ec = sub i32 %v2_111cc, %v1_111e8
  %v3_111ec = icmp ult i32 %v2_111cc, %v1_111e8
  br i1 %v3_111ec, label %dec_label_pc_11240, label %dec_label_pc_111f4

dec_label_pc_111f4:                               ; preds = %dec_label_pc_111e4
  %v1_111f4 = add i32 %v1_111e8, 44
  %v3_111f8 = icmp ult i32 %v2_111cc, %v1_111f4
  br i1 %v3_111f8, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_111f4
  store i32 %v2_111ec, i32* %v1_111cc, align 4
  %v1_11204 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_11204, i32* %r0.global-to-local, align 4
  ret i32 %v1_11204

.thread2:                                         ; preds = %dec_label_pc_111f4
  %v1_1120c = add i32 %v0_1120c, 4
  %v2_1120c = inttoptr i32 %v1_1120c to i32*
  %v3_1120c = load i32, i32* %v2_1120c, align 4
  store i32 %v3_1120c, i32* %r2.global-to-local, align 4
  %v2_11210 = icmp eq i32 %v3_1120c, 0
  br i1 %v2_11210, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_11214 = add i32 %v0_1120c, 8
  %v3_11214 = inttoptr i32 %v2_11214 to i32*
  %v4_11214 = load i32, i32* %v3_11214, align 4
  %v3_11218 = add i32 %v3_1120c, 8
  %v4_11218 = inttoptr i32 %v3_11218 to i32*
  store i32 %v4_11214, i32* %v4_11218, align 4
  %v0_1121c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_1121c = phi i32 [ %v0_1120c, %.thread2 ], [ %v0_1121c.pre, %bb17 ]
  %v1_1121c = add i32 %v0_1121c, 8
  %v2_1121c = inttoptr i32 %v1_1121c to i32*
  %v3_1121c = load i32, i32* %v2_1121c, align 4
  store i32 %v3_1121c, i32* %r2.global-to-local, align 4
  %v1_11220 = add i32 %v0_1121c, 4
  %v2_11220 = inttoptr i32 %v1_11220 to i32*
  %v3_11220 = load i32, i32* %v2_11220, align 4
  %v2_11224 = icmp eq i32 %v3_1121c, 0
  br i1 %v2_11224, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_11228 = add i32 %v3_1121c, 4
  %v4_11228 = inttoptr i32 %v3_11228 to i32*
  store i32 %v3_11220, i32* %v4_11228, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_1122c = load i32, i32* %lr.global-to-local, align 4
  %v3_1122c = inttoptr i32 %v2_1122c to i32*
  store i32 %v3_11220, i32* %v3_1122c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_11230 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_11230

dec_label_pc_11234:                               ; preds = %dec_label_pc_111cc
  %v1_11234 = add i32 %v0_1120c, 4
  %v2_11234 = inttoptr i32 %v1_11234 to i32*
  %v3_11234 = load i32, i32* %v2_11234, align 4
  store i32 %v3_11234, i32* %ip.global-to-local, align 4
  %v2_11238 = icmp eq i32 %v3_11234, 0
  br i1 %v2_11238, label %dec_label_pc_11238.dec_label_pc_11240.loopexit_crit_edge, label %dec_label_pc_111cc

dec_label_pc_11238.dec_label_pc_11240.loopexit_crit_edge: ; preds = %dec_label_pc_11234
  br label %dec_label_pc_11240

dec_label_pc_11240:                               ; preds = %dec_label_pc_111e4, %dec_label_pc_111bc, %dec_label_pc_11238.dec_label_pc_11240.loopexit_crit_edge, %dec_label_pc_111e0
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_11234, { 1, 2, 0 }
  uselistorder i32 %v0_1121c, { 1, 0 }
  uselistorder i32 %v1_111e8, { 0, 2, 1, 3 }
  uselistorder i1 %v9_111d8, { 1, 0 }
  uselistorder i32 %v2_111cc, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_1120c, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_11240, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_111cc, { 1, 0 }
}

define i32 @function_11248() local_unnamed_addr {
dec_label_pc_11248:
  %v0_11248 = load i32, i32* @r2, align 4
  %v2_11248 = icmp eq i32 %v0_11248, 0
  %v0_1124c = load i32, i32* @r3, align 4
  %v1_1124c = load i32, i32* @r1, align 4
  %v2_1124c = add i32 %v1_1124c, 4
  %v3_1124c = inttoptr i32 %v2_1124c to i32*
  store i32 %v0_1124c, i32* %v3_1124c, align 4
  %v0_11250 = load i32, i32* @r2, align 4
  %v1_11250 = load i32, i32* @r1, align 4
  %v2_11250 = add i32 %v1_11250, 8
  %v3_11250 = inttoptr i32 %v2_11250 to i32*
  store i32 %v0_11250, i32* %v3_11250, align 4
  %v1_11258 = load i32, i32* @r1, align 4
  br i1 %v2_11248, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_11248
  %v2_11254 = load i32, i32* @r2, align 4
  %v3_11254 = add i32 %v2_11254, 4
  %v4_11254 = inttoptr i32 %v3_11254 to i32*
  store i32 %v1_11258, i32* %v4_11254, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_11248
  %v2_11258 = load i32, i32* @r0, align 4
  %v3_11258 = inttoptr i32 %v2_11258 to i32*
  store i32 %v1_11258, i32* %v3_11258, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_1125c = load i32, i32* @r3, align 4
  %v2_1125c = icmp eq i32 %v0_1125c, 0
  br i1 %v2_1125c, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_11260 = load i32, i32* @r1, align 4
  %v3_11260 = add i32 %v0_1125c, 8
  %v4_11260 = inttoptr i32 %v3_11260 to i32*
  store i32 %v1_11260, i32* %v4_11260, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_11264 = load i32, i32* @r0, align 4
  ret i32 %v1_11264

; uselistorder directives
  uselistorder i32 %v1_11258, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11268() local_unnamed_addr {
dec_label_pc_11268:
  %v0_11268 = load i32, i32* @r2, align 4
  %v2_11268 = icmp eq i32 %v0_11268, 0
  %v1_1126c = load i32, i32* @r1, align 4
  br i1 %v2_11268, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11268
  %v2_1126c = load i32, i32* @r0, align 4
  %v3_1126c = inttoptr i32 %v2_1126c to i32*
  store i32 %v1_1126c, i32* %v3_1126c, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_11268
  %v3_11270 = add i32 %v0_11268, 4
  %v4_11270 = inttoptr i32 %v3_11270 to i32*
  store i32 %v1_1126c, i32* %v4_11270, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_11274 = load i32, i32* @r2, align 4
  %v1_11274 = load i32, i32* @r1, align 4
  %v2_11274 = add i32 %v1_11274, 8
  %v3_11274 = inttoptr i32 %v2_11274 to i32*
  store i32 %v0_11274, i32* %v3_11274, align 4
  %v1_11278 = load i32, i32* @r0, align 4
  ret i32 %v1_11278

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1127c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1127c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1127c = load i32, i32* @r4, align 4
  store i32 %v3_1127c, i32* %stack_var_-20, align 4
  %v2_11280 = load i32, i32* %arg1, align 4
  store i32 %v2_11280, i32* %r4.global-to-local, align 4
  %v2_11284 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_112a02 = icmp eq i32 %v2_11280, 0
  br i1 %v2_112a02, label %dec_label_pc_11350, label %dec_label_pc_11290

dec_label_pc_11290:                               ; preds = %dec_label_pc_1127c, %dec_label_pc_11298
  %v0_112e0 = phi i32 [ %v0_112e8, %dec_label_pc_11298 ], [ 0, %dec_label_pc_1127c ]
  %v0_112e8 = phi i32 [ %v3_1129c, %dec_label_pc_11298 ], [ %v2_11280, %dec_label_pc_1127c ]
  %v1_112a45.in = phi i32 [ %v3_1129c, %dec_label_pc_11298 ], [ %v2_11280, %dec_label_pc_1127c ]
  %v1_112a45 = add i32 %v1_112a45.in, 12
  %v3_11290 = icmp ult i32 %v1_112a45, %arg2
  br i1 %v3_11290, label %dec_label_pc_11298, label %dec_label_pc_112b0

dec_label_pc_11298:                               ; preds = %dec_label_pc_11290
  store i32 %v0_112e8, i32* %r6.global-to-local, align 4
  %v1_1129c = add i32 %v0_112e8, 4
  %v2_1129c = inttoptr i32 %v1_1129c to i32*
  %v3_1129c = load i32, i32* %v2_1129c, align 4
  store i32 %v3_1129c, i32* %r4.global-to-local, align 4
  %v2_112a0 = icmp eq i32 %v3_1129c, 0
  br i1 %v2_112a0, label %dec_label_pc_112a0.dec_label_pc_11350.loopexit_crit_edge, label %dec_label_pc_11290

dec_label_pc_112b0:                               ; preds = %dec_label_pc_11290
  %v1_112b0 = inttoptr i32 %v0_112e8 to i32*
  %v2_112b0 = load i32, i32* %v1_112b0, align 4
  store i32 %v2_112b0, i32* @ip, align 4
  %v2_112b4 = sub i32 %v0_112e8, %v2_112b0
  %v1_112b8 = add i32 %v2_112b4, 12
  %v3_112bc = icmp uge i32 %v1_112b8, %v2_11284
  %v9_112bc = icmp eq i32 %v1_112b8, %v2_11284
  %v2_112c0 = xor i1 %v9_112bc, true
  %v3_112c0 = and i1 %v3_112bc, %v2_112c0
  br i1 %v3_112c0, label %dec_label_pc_11350, label %dec_label_pc_112c4

dec_label_pc_112c4:                               ; preds = %dec_label_pc_112b0
  %v2_112c4 = add i32 %v2_112b0, %arg3
  store i32 %v2_112c4, i32* %r7.global-to-local, align 4
  br i1 %v9_112bc, label %dec_label_pc_112cc, label %dec_label_pc_112f8

dec_label_pc_112cc:                               ; preds = %dec_label_pc_112c4
  %v2_112cc = icmp eq i32 %v0_112e0, 0
  br i1 %v2_112cc, label %dec_label_pc_11344, label %dec_label_pc_112d4

dec_label_pc_112d4:                               ; preds = %dec_label_pc_112cc
  %v1_112d4 = add i32 %v0_112e0, 12
  %v9_112d8 = icmp eq i32 %v1_112d4, %arg2
  br i1 %v9_112d8, label %dec_label_pc_112e0, label %dec_label_pc_11344

dec_label_pc_112e0:                               ; preds = %dec_label_pc_112d4
  %v1_112e0 = inttoptr i32 %v0_112e0 to i32*
  %v2_112e0 = load i32, i32* %v1_112e0, align 4
  %v1_112e4 = add i32 %v0_112e0, 8
  %v2_112e4 = inttoptr i32 %v1_112e4 to i32*
  %v3_112e4 = load i32, i32* %v2_112e4, align 4
  store i32 %v3_112e4, i32* @r2, align 4
  store i32 %v0_112e8, i32* @r1, align 4
  %v2_112ec = add i32 %v2_112e0, %v2_112c4
  store i32 %v2_112ec, i32* %r7.global-to-local, align 4
  %v0_112f0 = call i32 @function_11268()
  br label %dec_label_pc_11344

dec_label_pc_112f8:                               ; preds = %dec_label_pc_112c4
  %v1_112f8 = add i32 %v0_112e8, 4
  %v2_112f8 = inttoptr i32 %v1_112f8 to i32*
  %v3_112f8 = load i32, i32* %v2_112f8, align 4
  store i32 %v3_112f8, i32* %r5.global-to-local, align 4
  %v2_112fc = icmp eq i32 %v3_112f8, 0
  br i1 %v2_112fc, label %dec_label_pc_11330, label %dec_label_pc_11304

dec_label_pc_11304:                               ; preds = %dec_label_pc_112f8
  %v1_11304 = inttoptr i32 %v3_112f8 to i32*
  %v2_11304 = load i32, i32* %v1_11304, align 4
  store i32 %v2_11304, i32* @ip, align 4
  %v2_11308 = sub i32 %v3_112f8, %v2_11304
  %v1_1130c = add i32 %v2_11308, 12
  %v9_11310 = icmp eq i32 %v2_11284, %v1_1130c
  br i1 %v9_11310, label %dec_label_pc_11318, label %dec_label_pc_11330

dec_label_pc_11318:                               ; preds = %dec_label_pc_11304
  store i32 %v0_112e0, i32* @r2, align 4
  store i32 %v3_112f8, i32* @r1, align 4
  %v2_11320 = add i32 %v2_11304, %v2_112c4
  store i32 %v2_11320, i32* %r7.global-to-local, align 4
  %v0_11324 = call i32 @function_11268()
  %v0_11328 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11328, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11344

dec_label_pc_11330:                               ; preds = %dec_label_pc_11304, %dec_label_pc_112f8
  %v2_11330 = add i32 %v0_112e8, %arg3
  store i32 %v2_11330, i32* %r4.global-to-local, align 4
  store i32 %v3_112f8, i32* @r3, align 4
  store i32 %v0_112e0, i32* @r2, align 4
  store i32 %v2_11330, i32* @r1, align 4
  %v0_11340 = call i32 @function_11248()
  br label %dec_label_pc_11344

dec_label_pc_11344:                               ; preds = %dec_label_pc_112d4, %dec_label_pc_112cc, %dec_label_pc_11318, %dec_label_pc_112e0, %dec_label_pc_11330
  %v0_11344 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11344, i32* %r5.global-to-local, align 4
  %v0_11348 = load i32, i32* %r7.global-to-local, align 4
  %v2_11348 = inttoptr i32 %v0_11344 to i32*
  store i32 %v0_11348, i32* %v2_11348, align 4
  br label %dec_label_pc_11368

dec_label_pc_112a0.dec_label_pc_11350.loopexit_crit_edge: ; preds = %dec_label_pc_11298
  br label %dec_label_pc_11350

dec_label_pc_11350:                               ; preds = %dec_label_pc_1127c, %dec_label_pc_112a0.dec_label_pc_11350.loopexit_crit_edge, %dec_label_pc_112b0
  %v1_11350 = add i32 %v2_11284, -12
  store i32 %v1_11350, i32* %r5.global-to-local, align 4
  %v3_11354 = inttoptr i32 %v1_11350 to i32*
  store i32 %arg3, i32* %v3_11354, align 4
  %v0_11358 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11358, i32* @r3, align 4
  %v0_1135c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1135c, i32* @r2, align 4
  %v0_11360 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11360, i32* @r1, align 4
  %v0_11364 = call i32 @function_11248()
  br label %dec_label_pc_11368

dec_label_pc_11368:                               ; preds = %dec_label_pc_11344, %dec_label_pc_11350
  %v0_11368 = load i32, i32* %r5.global-to-local, align 4
  %v2_1136c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1136c, i32* @r4, align 4
  ret i32 %v0_11368

; uselistorder directives
  uselistorder i32 %v3_112f8, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_112bc, { 1, 0 }
  uselistorder i32 %v3_1129c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_112e8, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_112e0, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_11248, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_11268, { 1, 0 }
  uselistorder i32* @ip, { 10, 11, 1, 12, 0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 4, 5, 6, 2, 7, 8, 3, 9 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11368, { 1, 0 }
  uselistorder label %dec_label_pc_11350, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11344, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_11290, { 1, 0 }
}

define i32 @function_11370() local_unnamed_addr {
dec_label_pc_1138c.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_11370 = ptrtoint i32* %stack_var_-268 to i32
  %v1_11380 = call i32 @function_1175c()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_1138c = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_1138c

dec_label_pc_1138c:                               ; preds = %dec_label_pc_1138c.lr.ph, %dec_label_pc_1138c
  %v1_11390 = phi i32 [ 31, %dec_label_pc_1138c.lr.ph ], [ %v1_1139c, %dec_label_pc_1138c ]
  %v4_11390 = mul i32 %v1_11390, 4
  %v5_11390 = add i32 %v4_11390, %v2_1138c
  %v2_11398 = add i32 %v5_11390, -128
  %v3_11398 = inttoptr i32 %v2_11398 to i32*
  store i32 0, i32* %v3_11398, align 4
  %v0_1139c = load i32, i32* %r1.global-to-local, align 4
  %v1_1139c = add i32 %v0_1139c, -1
  store i32 %v1_1139c, i32* %r1.global-to-local, align 4
  %v6_1139c = icmp slt i32 %v1_1139c, 0
  br i1 %v6_1139c, label %dec_label_pc_113a4, label %dec_label_pc_1138c

dec_label_pc_113a4:                               ; preds = %dec_label_pc_1138c
  %v2_113a4 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_113a4, i32* @r4, align 4
  store i32 %v2_113a4, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_113b0 = call i32 @function_10d2c()
  %v2_113b4 = icmp eq i32 %v0_113b0, 0
  br i1 %v2_113b4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_113a4
  store i32 %v2_113a4, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_113a4, %bb
  store i32 70600, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_113b4, i32 ptrtoint (i32* @global_var_10890.648 to i32))
  %v2_113cc = load i32, i32* @global_var_1b204.650, align 4
  %v2_113d0 = icmp eq i32 %v2_113cc, 0
  br i1 %v2_113d0, label %dec_label_pc_113d8, label %dec_label_pc_11408

dec_label_pc_113d8:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1b204.650, align 4
  br label %dec_label_pc_113e0

dec_label_pc_113e0:                               ; preds = %dec_label_pc_11458, %dec_label_pc_113d8
  %v1_113ec = call i32 @function_1175c()
  %v1_113f4 = call i32 @function_1230c(i32 6)
  store i32 70664, i32* @lr, align 4
  %v1_11404 = call i32 @function_1175c()
  %v2_1140c.pre = load i32, i32* @global_var_1b204.650, align 4
  br label %dec_label_pc_11408

dec_label_pc_11408:                               ; preds = %.thread1, %dec_label_pc_113e0
  %v0_1147c = phi i32 [ %v2_113cc, %.thread1 ], [ %v2_1140c.pre, %dec_label_pc_113e0 ]
  store i32 ptrtoint (i32* @global_var_1b204.650 to i32), i32* %ip.global-to-local, align 4
  %v7_11410 = icmp eq i32 %v0_1147c, 1
  br i1 %v7_11410, label %dec_label_pc_11440.lr.ph, label %dec_label_pc_11474

dec_label_pc_11440.lr.ph:                         ; preds = %dec_label_pc_11408
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1b204.650, align 4
  %v2_1142c = bitcast i32* %stack_var_-268 to i8*
  %v3_1142c = call i32 @function_12180(i8* %v2_1142c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11440

dec_label_pc_11440:                               ; preds = %dec_label_pc_11440.lr.ph, %dec_label_pc_11440
  %v1_11444 = phi i32 [ 31, %dec_label_pc_11440.lr.ph ], [ %v1_11450, %dec_label_pc_11440 ]
  %v4_11444 = mul i32 %v1_11444, 4
  %v5_11444 = add i32 %v4_11444, %v2_1138c
  %v2_1144c = add i32 %v5_11444, -264
  %v3_1144c = inttoptr i32 %v2_1144c to i32*
  store i32 -1, i32* %v3_1144c, align 4
  %v0_11450 = load i32, i32* %r1.global-to-local, align 4
  %v1_11450 = add i32 %v0_11450, -1
  store i32 %v1_11450, i32* %r1.global-to-local, align 4
  %v6_11450 = icmp slt i32 %v1_11450, 0
  br i1 %v6_11450, label %dec_label_pc_11458, label %dec_label_pc_11440

dec_label_pc_11458:                               ; preds = %dec_label_pc_11440
  store i32 %v2_11370, i32* %r1.global-to-local, align 4
  %v4_1146c = call i32 @function_11a48(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_113e0

dec_label_pc_11474:                               ; preds = %dec_label_pc_11408
  %v7_11474 = icmp eq i32 %v0_1147c, 2
  br i1 %v7_11474, label %dec_label_pc_1147c, label %dec_label_pc_11488

dec_label_pc_1147c:                               ; preds = %dec_label_pc_11474
  store i32 3, i32* @global_var_1b204.650, align 4
  %v0_11484 = call i32 @function_11370()
  %v2_11488.pre = load i32, i32* @global_var_1b204.650, align 4
  br label %dec_label_pc_11488

dec_label_pc_11488:                               ; preds = %dec_label_pc_11474, %dec_label_pc_1147c
  %v1_11490 = phi i32 [ %v0_1147c, %dec_label_pc_11474 ], [ %v2_11488.pre, %dec_label_pc_1147c ]
  %v7_1148c = icmp eq i32 %v1_11490, 3
  br i1 %v7_1148c, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_11488
  %v2_11498 = load i32, i32* %ip.global-to-local, align 4
  %v3_11498 = inttoptr i32 %v2_11498 to i32*
  store i32 4, i32* %v3_11498, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11488, %bb27
  call void @__pseudo_cond_branch(i1 %v7_1148c, i32 ptrtoint (i32* @global_var_11b60.652 to i32))
  br label %dec_label_pc_114a0

dec_label_pc_114a0:                               ; preds = %dec_label_pc_114a0, %.thread3
  %v0_114a0 = call i32 @function_11370()
  br label %dec_label_pc_114a0

; uselistorder directives
  uselistorder i32 %v1_11450, { 2, 1, 0 }
  uselistorder i32 %v1_1139c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 8, 3, 0, 1, 4, 5, 7, 6, 2 }
  uselistorder i32* @global_var_1b204.650, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder i32 6, { 13, 14, 72, 2, 29, 3, 16, 25, 17, 26, 18, 27, 15, 28, 0, 30, 19, 31, 4, 32, 33, 34, 5, 35, 36, 37, 38, 6, 39, 40, 41, 42, 7, 43, 8, 44, 45, 20, 46, 9, 47, 48, 49, 21, 50, 10, 51, 52, 53, 22, 54, 55, 56, 57, 58, 23, 59, 11, 60, 65, 66, 67, 68, 69, 24, 70, 12, 71, 1, 61, 62, 63, 64 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11488, { 1, 0 }
  uselistorder label %dec_label_pc_11440, { 1, 0 }
  uselistorder label %dec_label_pc_11408, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_1138c, { 1, 0 }
}

define i32 @function_114b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_114b8:
  %stack_var_-16 = alloca i32, align 4
  %v2_114b8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_114b8, i32* @r0, align 4
  %v5_114d4 = call i32 @function_11764(i32 %v2_114b8, i32 ptrtoint (i32* @global_var_1175c.623 to i32), i32 ptrtoint (i32* @global_var_1b154.655 to i32), i32 71524)
  %v1_114e4 = call i32 @function_1175c()
  %v2_114ec = load i32, i32* @global_var_1b208.659, align 4
  %v2_114f0 = icmp eq i32 %v2_114ec, 0
  br i1 %v2_114f0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_114b8
  call void @__pseudo_branch(i32 %v2_114ec)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_114b8, %bb
  store i32 %v2_114b8, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_11514.661 to i32), i32* @lr, align 4
  %v5_11510 = call i32 @function_11764(i32 %v2_114b8, i32 1, i32 ptrtoint (i32* @global_var_1b154.655 to i32), i32 71524)
  store i32 %v5_11510, i32* @r0, align 4
  %v1_11514 = call i32 @function_116f0(i32 %v5_11510)
  store i1 true, i1* @cpsr_z, align 1
  %v0_11528 = load i32, i32* @r4, align 4
  %v1_1152c = call i32 @function_11b60(i32 %v0_11528)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_114b8, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_1175c, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5 }
  uselistorder i32 71524, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1b154.655 to i32), { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_1154c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1154c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1154c = load i32, i32* @r4, align 4
  store i32 %v3_1154c, i32* %stack_var_-20, align 4
  %v6_1154c = load i32, i32* @r5, align 4
  %v9_1154c = load i32, i32* @r6, align 4
  %v16_1154c = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_11550 = icmp eq i32 %arg1, 0
  %v2_11554 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_11550, label %dec_label_pc_116d8, label %dec_label_pc_1156c.preheader

dec_label_pc_1156c.preheader:                     ; preds = %dec_label_pc_1154c
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1157417 = add i32 %v16_1154c, 124
  br label %dec_label_pc_11564

dec_label_pc_11564:                               ; preds = %dec_label_pc_1156c.preheader, %dec_label_pc_11564
  %v5_1157418 = phi i32 [ %v5_1157417, %dec_label_pc_1156c.preheader ], [ %v5_11574, %dec_label_pc_11564 ]
  %v2_11568 = add i32 %v5_1157418, -136
  %v3_11568 = inttoptr i32 %v2_11568 to i32*
  store i32 0, i32* %v3_11568, align 4
  %v0_1156c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_1156c = add i32 %v0_1156c.pre, -1
  store i32 %v1_1156c, i32* %r1.global-to-local, align 4
  %v6_1156c = icmp slt i32 %v1_1156c, 0
  %v4_11574 = mul i32 %v1_1156c, 4
  %v5_11574 = add i32 %v4_11574, %v16_1154c
  br i1 %v6_1156c, label %dec_label_pc_1157c, label %dec_label_pc_11564

dec_label_pc_1157c:                               ; preds = %dec_label_pc_11564
  %v2_1157c = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_1157c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_1158c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_1158c, i32* %stack_var_-28, align 4
  %v0_11594 = call i32 @function_10d2c()
  store i32 %v0_11594, i32* %r0.global-to-local, align 4
  %v1_11598 = load i32, i32* @r5, align 4
  %v5_1159c = icmp slt i32 %v0_11594, %v1_11598
  br i1 %v5_1159c, label %dec_label_pc_116e0, label %dec_label_pc_115a0

dec_label_pc_115a0:                               ; preds = %dec_label_pc_1157c
  %v2_115a0 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_115a0, i32* @r4, align 4
  store i32 %v1_11598, i32* %r0.global-to-local, align 4
  store i32 %v2_1157c, i32* %r1.global-to-local, align 4
  %v3_115b0 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_115b0 = call i32 @function_10890(i32 %v1_11598, %_TYPEDEF_sigset_t* %v3_115b0, i32 %v2_115a0)
  store i32 %v4_115b0, i32* %r0.global-to-local, align 4
  %v1_115b4 = load i32, i32* @r5, align 4
  %v9_115b4 = icmp eq i32 %v4_115b0, %v1_115b4
  br i1 %v9_115b4, label %dec_label_pc_115bc, label %dec_label_pc_116e0

dec_label_pc_115bc:                               ; preds = %dec_label_pc_115a0
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_115a0, i32* %r0.global-to-local, align 4
  %v2_115c4 = call i32 @function_10d08(i32 %v2_115a0, i32 17)
  store i32 %v2_115c4, i32* %r0.global-to-local, align 4
  %v1_115c8 = load i32, i32* @r5, align 4
  %v9_115c8 = icmp eq i32 %v2_115c4, %v1_115c8
  br i1 %v9_115c8, label %dec_label_pc_115e0.preheader, label %dec_label_pc_115bc.dec_label_pc_116a8_crit_edge

dec_label_pc_115bc.dec_label_pc_116a8_crit_edge:  ; preds = %dec_label_pc_115bc
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_116a8

dec_label_pc_115e0.preheader:                     ; preds = %dec_label_pc_115bc
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_115d8

dec_label_pc_115d8:                               ; preds = %dec_label_pc_115e0.preheader, %dec_label_pc_115d8
  %v5_115e816 = phi i32 [ %v5_1157417, %dec_label_pc_115e0.preheader ], [ %v5_115e8, %dec_label_pc_115d8 ]
  %v2_115dc = add i32 %v5_115e816, -136
  %v3_115dc = inttoptr i32 %v2_115dc to i32*
  store i32 0, i32* %v3_115dc, align 4
  %v0_115e0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_115e0 = add i32 %v0_115e0.pre, -1
  store i32 %v1_115e0, i32* %r1.global-to-local, align 4
  %v6_115e0 = icmp slt i32 %v1_115e0, 0
  %v4_115e8 = mul i32 %v1_115e0, 4
  %v5_115e8 = add i32 %v4_115e8, %v16_1154c
  br i1 %v6_115e0, label %dec_label_pc_115f0, label %dec_label_pc_115d8

dec_label_pc_115f0:                               ; preds = %dec_label_pc_115d8
  store i32 %v2_1157c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_115f8 = call i32 @function_10d2c()
  store i32 %v0_115f8, i32* %r0.global-to-local, align 4
  %v1_115fc = icmp slt i32 %v0_115f8, 0
  br i1 %v1_115fc, label %dec_label_pc_116e0, label %dec_label_pc_11604

dec_label_pc_11604:                               ; preds = %dec_label_pc_115f0
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_11610 = call i32 @function_11a48(i32 17, i32* null, i32 %v2_11554)
  store i32 %v4_11610, i32* %r0.global-to-local, align 4
  %v1_11614 = icmp slt i32 %v4_11610, 0
  br i1 %v1_11614, label %dec_label_pc_1161c, label %dec_label_pc_11644

dec_label_pc_1161c:                               ; preds = %dec_label_pc_11604
  %v0_1161c = call i32 @function_1093c()
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 %v0_1161c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11630 = inttoptr i32 %v0_1161c to i32*
  %v2_11630 = load i32, i32* %v1_11630, align 4
  store i32 %v2_11630, i32* @r4, align 4
  %v3_11634 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11634 = call i32 @function_10890(i32 2, %_TYPEDEF_sigset_t* %v3_11634, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_1163c = load i32, i32* @r4, align 4
  %v1_1163c = load i32, i32* %r5.global-to-local, align 4
  %v2_1163c = inttoptr i32 %v1_1163c to i32*
  store i32 %v0_1163c, i32* %v2_1163c, align 4
  %v17_116e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_116e4

dec_label_pc_11644:                               ; preds = %dec_label_pc_11604
  %v2_11644 = load i32, i32* %stack_var_-424, align 4
  %v7_11648 = icmp eq i32 %v2_11644, 1
  %v2_11650 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_11650, i32* @r4, align 4
  br i1 %v7_11648, label %dec_label_pc_11658, label %dec_label_pc_1168c

dec_label_pc_11658:                               ; preds = %dec_label_pc_11644
  store i32 %v2_11650, i32* %r1.global-to-local, align 4
  store i32 %v2_11650, i32* %r0.global-to-local, align 4
  %v2_11660 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_11660 = call i32 @function_11c38(%timespec* %v2_11660, i32 %v2_11650)
  store i32 %v3_11660, i32* %r0.global-to-local, align 4
  store i32 %v3_11660, i32* %r6.global-to-local, align 4
  %v0_11668 = call i32 @function_1093c()
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 %v0_11668, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_1167c = inttoptr i32 %v0_11668 to i32*
  %v2_1167c = load i32, i32* %v1_1167c, align 4
  store i32 %v2_1167c, i32* @r4, align 4
  %v3_11680 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11680 = call i32 @function_10890(i32 2, %_TYPEDEF_sigset_t* %v3_11680, i32 0)
  store i32 %v4_11680, i32* %r0.global-to-local, align 4
  %v0_11684 = load i32, i32* @r4, align 4
  %v1_11684 = load i32, i32* %r5.global-to-local, align 4
  %v2_11684 = inttoptr i32 %v1_11684 to i32*
  store i32 %v0_11684, i32* %v2_11684, align 4
  %v0_116b4.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_116b4

dec_label_pc_1168c:                               ; preds = %dec_label_pc_11644
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_11698 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11698 = call i32 @function_10890(i32 2, %_TYPEDEF_sigset_t* %v3_11698, i32 0)
  store i32 %v4_11698, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_116a8

dec_label_pc_116a8:                               ; preds = %dec_label_pc_115bc.dec_label_pc_116a8_crit_edge, %dec_label_pc_1168c
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_115bc.dec_label_pc_116a8_crit_edge ], [ %v2_11650, %dec_label_pc_1168c ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_116ac = bitcast i32* %stack_var_-28 to %timespec*
  %v3_116ac = call i32 @function_11c38(%timespec* %v2_116ac, i32 %storemerge.pre-phi)
  store i32 %v3_116ac, i32* %r0.global-to-local, align 4
  store i32 %v3_116ac, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_116b4

dec_label_pc_116b4:                               ; preds = %dec_label_pc_11658, %dec_label_pc_116a8
  %v0_116b4 = phi i32 [ %v0_116b4.pr, %dec_label_pc_11658 ], [ %v3_116ac, %dec_label_pc_116a8 ]
  %v2_116b4 = icmp eq i32 %v0_116b4, 0
  br i1 %v2_116b4, label %dec_label_pc_116d8, label %dec_label_pc_116bc

dec_label_pc_116bc:                               ; preds = %dec_label_pc_116b4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_116c4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_116c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_116e4

dec_label_pc_116d8:                               ; preds = %dec_label_pc_1154c, %dec_label_pc_116b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_116e4

dec_label_pc_116e0:                               ; preds = %dec_label_pc_115a0, %dec_label_pc_115f0, %dec_label_pc_1157c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_116e4

dec_label_pc_116e4:                               ; preds = %dec_label_pc_116bc, %dec_label_pc_116d8, %dec_label_pc_1161c, %dec_label_pc_116e0
  %v17_116e8 = phi i32 [ %v3_116c4, %dec_label_pc_116bc ], [ 0, %dec_label_pc_116d8 ], [ %v17_116e8.pre, %dec_label_pc_1161c ], [ -1, %dec_label_pc_116e0 ]
  %v2_116e8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_116e8, i32* @r4, align 4
  store i32 %v6_1154c, i32* @r5, align 4
  store i32 %v9_1154c, i32* @r6, align 4
  ret i32 %v17_116e8

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_11650, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_115e0, { 0, 2, 1 }
  uselistorder i32 %v2_115a0, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_11598, { 1, 0, 2 }
  uselistorder i32 %v1_1156c, { 0, 2, 1 }
  uselistorder i32 %v16_1154c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 11, 10, 13, 14, 12, 16, 15, 17, 19, 18, 22, 20, 21, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_11a48, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_10890, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_10d2c, { 2, 1, 0, 3, 4 }
  uselistorder i32 17, { 2, 15, 16, 3, 17, 18, 4, 0, 14, 5, 6, 7, 8, 19, 9, 20, 10, 21, 11, 22, 12, 23, 24, 1, 25, 26, 27, 13, 28, 29, 30, 31, 32 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder i32* @r6, { 62, 63, 200, 201, 202, 203, 204, 205, 206, 207, 220, 232, 233, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 3, 4, 39, 40, 5, 6, 14, 7, 8, 9, 10, 11, 12, 13, 41, 42, 15, 43, 44, 45, 46, 47, 48, 54, 55, 49, 50, 51, 52, 53, 234, 235, 236, 237, 0, 56, 57, 58, 59, 60, 61, 64, 65, 66, 69, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 107, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 1, 173, 174, 175, 176, 177, 178, 179, 180, 181, 189, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 238, 239, 240, 241, 249, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 225, 222, 223, 224, 226, 227, 2, 228, 229, 230, 231 }
  uselistorder label %dec_label_pc_116e4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_116e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_116d8, { 1, 0 }
  uselistorder label %dec_label_pc_116b4, { 1, 0 }
  uselistorder label %dec_label_pc_116a8, { 1, 0 }
  uselistorder label %dec_label_pc_115d8, { 1, 0 }
  uselistorder label %dec_label_pc_11564, { 1, 0 }
}

define i32 @function_116f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1171c:
  %stack_var_-8 = alloca i32, align 4
  %v3_116f0 = load i32, i32* @r4, align 4
  store i32 %v3_116f0, i32* %stack_var_-8, align 4
  %v2_11720 = load i32, i32* @global_var_1b218.668, align 4
  %v2_11724 = icmp eq i32 %v2_11720, 0
  br i1 %v2_11724, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1171c
  store i32 71472, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_11720)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1171c, %bb
  %v2_11734 = load i32, i32* @global_var_1b21c.670, align 4
  %v2_11738 = icmp eq i32 %v2_11734, 0
  br i1 %v2_11738, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_1173c = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_1173c, i32* @r4, align 4
  %v9_1173c = load i32, i32* @r0, align 4
  ret i32 %v9_1173c

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_11748.671 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_11734)
  %v2_11748 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11748, i32* @r4, align 4
  %v8_11748 = load i32, i32* @r0, align 4
  ret i32 %v8_11748

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1175c() local_unnamed_addr {
dec_label_pc_1175c:
  ret i32 0
}

define i32 @function_11764(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11764:
  %v1_11764 = load i32, i32* @r0, align 4
  ret i32 %v1_11764
}

define i32 @function_11768(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11768:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11768 = load i32, i32* @r4, align 4
  store i32 %v3_11768, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_11778 = call i32 @function_1057c(i32 %arg1, i32 1)
  %v7_1177c = icmp eq i32 %v2_11778, -1
  br i1 %v7_1177c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_11768
  %v3_11780 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_11780, i32* @r4, align 4
  ret i32 %v2_11778

bb4:                                              ; preds = %dec_label_pc_11768
  %v0_11784 = load i32, i32* @r4, align 4
  %v4_1178c = call i32 @function_1076c(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12ae0.673, i32 0, i32 0), i32 %v0_11784)
  %v1_11790 = load i32, i32* %r5.global-to-local, align 4
  %v9_11790 = icmp eq i32 %v4_1178c, %v1_11790
  br i1 %v9_11790, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_11794 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_11794, i32* @r4, align 4
  ret i32 %v4_1178c

bb6:                                              ; preds = %bb4
  %v0_11798 = call i32 @function_11370()
  %v0_1179c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1179c, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v3_1179c = udiv i32 %v0_11798, 2097152
  %v4_1179c = mul i32 %v0_11798, 2048
  %v5_1179c = or i32 %v3_1179c, %v4_1179c
  %v8_1179c = and i32 %v5_1179c, %v0_11784
  store i32 %v8_1179c, i32* @r2, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_11798

; uselistorder directives
  uselistorder i32 %v0_11798, { 2, 0, 1 }
  uselistorder i32 %v2_11778, { 1, 0 }
  uselistorder i32 2048, { 0, 5, 4, 1, 2, 6, 7, 3, 8, 9 }
  uselistorder i1* @cpsr_z, { 11, 10, 0, 1, 12, 9, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i32 ()* @function_11370, { 2, 1, 0, 3 }
  uselistorder i32 (i8*, i32)* @function_1076c, { 4, 0, 1, 2, 3 }
  uselistorder i32 (i32, i32)* @function_1057c, { 0, 8, 7, 10, 9, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_117a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_117a0:
  %v2_117a4 = load i32, i32* @global_var_1b220.675, align 4
  %v2_117a8 = icmp eq i32 %v2_117a4, 0
  br i1 %v2_117a8, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_117a0
  %v6_117b4 = load i32, i32* @r0, align 4
  ret i32 %v6_117b4

bb2:                                              ; preds = %dec_label_pc_117a0
  store i32 1, i32* @global_var_1b220.675, align 4
  store i32 4096, i32* @global_var_1b214.629, align 4
  ret i32 undef
}

define i32 @function_117fc(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_117fc:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_11800 = mul i32 %arg2, 4
  %v5_11800 = add i32 %tmp, %v4_11800
  %v2_11804 = load i32, i32* %arg3, align 4
  %v2_11808 = ptrtoint i32* %stack_var_-120 to i32
  %v1_1180c = add i32 %v5_11800, 4
  %v9_11810 = icmp eq i32 %v1_1180c, %v2_11804
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1b20c.680, align 4
  store i32 %v1_1180c, i32* @global_var_1b210.682, align 4
  store i32 %arg6, i32* @global_var_1b21c.670, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_11810, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_117fc
  store i32 %v5_11800, i32* @global_var_1b210.682, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_117fc, %bb
  %v2_11850 = bitcast i32* %stack_var_-120 to i8*
  %v3_11850 = call i32 @function_12180(i8* %v2_11850, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1b210.682, align 4
  br label %dec_label_pc_11860

dec_label_pc_11860:                               ; preds = %dec_label_pc_11860, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_11860, %dec_label_pc_11860 ]
  %v1_11860 = inttoptr i32 %storemerge to i32*
  %v2_11860 = load i32, i32* %v1_11860, align 4
  %v4_11860 = add i32 %storemerge, 4
  %v2_11864 = icmp eq i32 %v2_11860, 0
  br i1 %v2_11864, label %dec_label_pc_11870, label %dec_label_pc_11860

dec_label_pc_11870:                               ; preds = %dec_label_pc_11860
  store i32 %v4_11860, i32* @r4, align 4
  %v1_1189022 = inttoptr i32 %v4_11860 to i32*
  %v2_1189023 = load i32, i32* %v1_1189022, align 4
  %v2_1189425 = icmp eq i32 %v2_1189023, 0
  br i1 %v2_1189425, label %dec_label_pc_1189c, label %dec_label_pc_11878

dec_label_pc_11878:                               ; preds = %dec_label_pc_11870, %dec_label_pc_11890
  %v5_1187c = phi i32 [ %v2_11890, %dec_label_pc_11890 ], [ %v2_1189023, %dec_label_pc_11870 ]
  %v2_11878 = icmp ugt i32 %v5_1187c, 13
  %v7_11878 = icmp eq i32 %v5_1187c, 14
  %v2_1187c = xor i1 %v2_11878, true
  %v3_1187c = or i1 %v7_11878, %v2_1187c
  br i1 %v3_1187c, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_11878
  %v6_1187c = and i32 %v5_1187c, 536870912
  %v7_1187c = icmp ne i32 %v6_1187c, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_11878, %bb42
  %v1_11888 = phi i1 [ %v2_11878, %dec_label_pc_11878 ], [ %v7_1187c, %bb42 ]
  %v2_11880 = xor i1 %v1_11888, true
  %v3_11880 = or i1 %v7_11878, %v2_11880
  br i1 %v3_11880, label %bb44, label %dec_label_pc_11890

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_11890

dec_label_pc_11890:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_11880, i32 ptrtoint (i32* @global_var_10980.684 to i32))
  %v0_1188c = load i32, i32* @r4, align 4
  %v1_1188c = add i32 %v0_1188c, 8
  store i32 %v1_1188c, i32* @r4, align 4
  %v1_11890 = inttoptr i32 %v1_1188c to i32*
  %v2_11890 = load i32, i32* %v1_11890, align 4
  %v2_11894 = icmp eq i32 %v2_11890, 0
  br i1 %v2_11894, label %dec_label_pc_1189c, label %dec_label_pc_11878

dec_label_pc_1189c:                               ; preds = %dec_label_pc_11890, %dec_label_pc_11870
  %v1_118a0 = call i32 @function_12324(i32 %v2_11808)
  store i32 %v1_118a0, i32* @r0, align 4
  %v1_118a4 = call i32 @function_117a0(i32 %v1_118a0)
  store i32 %v1_118a4, i32* @r0, align 4
  %v2_118b0 = icmp eq i32 %tmp37, 0
  br i1 %v2_118b0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_1189c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_1189c, %bb45
  %v0_118c0 = phi i32 [ %tmp37, %dec_label_pc_1189c ], [ 4096, %bb45 ]
  %v3_118b8 = icmp eq i32 %tmp36, -1
  %v8_118b8 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1b214.629 to i32), i32* @r2, align 4
  store i32 %v0_118c0, i32* @global_var_1b214.629, align 4
  br i1 %v3_118b8, label %dec_label_pc_118c8, label %dec_label_pc_118f0

dec_label_pc_118c8:                               ; preds = %bb46
  %v0_118c8 = call i32 @function_11c0c()
  store i32 %v0_118c8, i32* @r0, align 4
  store i32 %v0_118c8, i32* @r4, align 4
  %v0_118d0 = call i32 @function_11bb4()
  %v0_118d4 = load i32, i32* @r4, align 4
  %v9_118d4 = icmp eq i32 %v0_118d4, %v0_118d0
  br i1 %v9_118d4, label %dec_label_pc_118dc, label %dec_label_pc_11918

dec_label_pc_118dc:                               ; preds = %dec_label_pc_118c8
  %v1_118dc = call i32 @function_11be0(i32 %v0_118d0)
  store i32 %v1_118dc, i32* @r0, align 4
  store i32 %v1_118dc, i32* @r4, align 4
  %v0_118e4 = call i32 @function_11b88()
  %v0_118e8 = load i32, i32* @r4, align 4
  %v9_118e8 = icmp eq i32 %v0_118e8, %v0_118e4
  br i1 %v9_118e8, label %dec_label_pc_118f0, label %dec_label_pc_11918

dec_label_pc_118f0:                               ; preds = %dec_label_pc_118dc, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_118b8, label %dec_label_pc_11984, label %dec_label_pc_118fc

dec_label_pc_118fc:                               ; preds = %dec_label_pc_118f0
  %v9_11900 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_11900, label %dec_label_pc_11908, label %dec_label_pc_11918

dec_label_pc_11908:                               ; preds = %dec_label_pc_118fc
  br label %dec_label_pc_11918

dec_label_pc_11918:                               ; preds = %dec_label_pc_11908, %dec_label_pc_118fc, %dec_label_pc_118dc, %dec_label_pc_118c8
  %v2_11920 = call i32 @function_11768(i32 0, i32 32768)
  %v2_1192c = call i32 @function_11768(i32 1, i32 32770)
  %v2_11938 = call i32 @function_11768(i32 2, i32 32770)
  br label %dec_label_pc_11984

dec_label_pc_11984:                               ; preds = %dec_label_pc_11918, %dec_label_pc_118f0
  %v0_11948 = load i32, i32* %r6.global-to-local, align 4
  %v1_11948 = inttoptr i32 %v0_11948 to i32*
  %v2_11948 = load i32, i32* %v1_11948, align 4
  store i32 %v2_11948, i32* @global_var_1b16c, align 4
  store i32 %arg5, i32* @global_var_1b218.668, align 4
  %v2_11984 = icmp eq i32 %arg4, 0
  br i1 %v2_11984, label %dec_label_pc_119c0, label %bb47

bb47:                                             ; preds = %dec_label_pc_11984
  br label %dec_label_pc_119c0

dec_label_pc_119c0:                               ; preds = %dec_label_pc_11984, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_119d0 = call i32 @function_1093c()
  %v2_119d8 = inttoptr i32 %v1_119d0 to i32*
  store i32 0, i32* %v2_119d8, align 4
  %v0_11a04 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_11a10 = call i32 @function_114b8(i32 %v0_11a04)
  ret i32 %v1_11a10

; uselistorder directives
  uselistorder i32 %v2_11890, { 1, 0 }
  uselistorder i32 %v1_1188c, { 1, 0 }
  uselistorder i1 %v2_11878, { 1, 0 }
  uselistorder i32 %v4_11860, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_114b8, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_11768, { 1, 0, 2 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1b214.629, { 1, 4, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 10, 8, 9, 6, 7, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 74, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 98, 44, 48, 54, 75, 55, 99, 15, 16, 17, 76, 67, 77, 78, 79, 49, 18, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 19, 20, 96, 97, 66, 47, 13, 14, 65, 12, 100, 32, 31, 56, 61, 57, 62, 52, 60, 53, 64, 101, 21, 102, 103, 22, 23, 24, 104, 68, 69, 25, 26, 105, 70, 71, 27, 28, 106, 72, 73, 29, 30, 51, 107, 108, 63, 109, 45, 58, 33, 46, 34, 35, 36, 59, 37, 50, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 14, { 17, 7, 2, 8, 3, 9, 4, 5, 6, 10, 11, 0, 12, 13, 14, 15, 1, 16 }
  uselistorder i32 13, { 15, 16, 17, 4, 19, 18, 5, 20, 6, 21, 7, 22, 23, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 0, 31, 32, 33, 34, 35, 1, 36, 37, 38, 39, 40, 41, 42, 43, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 3, 56, 57 }
  uselistorder i32 (i8*, i32)* @function_12180, { 2, 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_119c0, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_11890, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_11878, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_11a48(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11a48:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_11a48 = load i32, i32* @r4, align 4
  %v6_11a48 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_11a4c = icmp eq i32* %arg2, null
  %v2_11a50 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_11a4c, label %dec_label_pc_11abc, label %dec_label_pc_11a60

dec_label_pc_11a60:                               ; preds = %dec_label_pc_11a48
  %v2_11a64 = load i32, i32* %arg2, align 4
  %v4_11a64 = add i32 %tmp, 4
  store i32 %v4_11a64, i32* @r1, align 4
  %v2_11a68 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_11a68, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_11a64, i32* %stack_var_-156, align 4
  %v3_11a74 = call i32 @function_10980(i32 %v2_11a68, i32 %v4_11a64, i32 128)
  store i32 %v3_11a74, i32* %r0.global-to-local, align 4
  %v0_11a78 = load i32, i32* @r4, align 4
  %v1_11a78 = add i32 %v0_11a78, 132
  %v2_11a78 = inttoptr i32 %v1_11a78 to i32*
  %v3_11a78 = load i32, i32* %v2_11a78, align 4
  %v1_11a7c = and i32 %v3_11a78, 67108864
  %v2_11a7c = icmp eq i32 %v1_11a7c, 0
  br i1 %v2_11a7c, label %dec_label_pc_11a90, label %bb

bb:                                               ; preds = %dec_label_pc_11a60
  br label %dec_label_pc_11aac

dec_label_pc_11a90:                               ; preds = %dec_label_pc_11a60
  %v1_11a98 = and i32 %v3_11a78, 4
  %v2_11a98 = icmp eq i32 %v1_11a98, 0
  br i1 %v2_11a98, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_11a90
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_11a90, %bb20
  br label %dec_label_pc_11aac

dec_label_pc_11aac:                               ; preds = %bb, %bb21
  %v2_11aac = icmp eq i32 %v0_11a78, 0
  %v3_11ab0 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_11ab0 = select i1 %v2_11aac, i32 0, i32 %v3_11ab0
  %v0_11abc.pre = load i32, i32* @r5, align 4
  %v0_11acc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11abc

dec_label_pc_11abc:                               ; preds = %dec_label_pc_11aac, %dec_label_pc_11a48
  %v0_11acc = phi i32 [ %arg1, %dec_label_pc_11a48 ], [ %v0_11acc.pre, %dec_label_pc_11aac ]
  %v0_11abc = phi i32 [ %arg3, %dec_label_pc_11a48 ], [ %v0_11abc.pre, %dec_label_pc_11aac ]
  %storemerge = phi i32 [ 0, %dec_label_pc_11a48 ], [ %.v3_11ab0, %dec_label_pc_11aac ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_11abc = icmp eq i32 %v0_11abc, 0
  %.v2_11a50 = select i1 %v2_11abc, i32 0, i32 %v2_11a50
  store i32 %.v2_11a50, i32* @r2, align 4
  store i32 %v0_11acc, i32* %r0.global-to-local, align 4
  %v1_11ad0 = call i32 @function_11b34(i32 %v0_11acc)
  store i32 %v1_11ad0, i32* %r0.global-to-local, align 4
  %v0_11ad4 = load i32, i32* @r5, align 4
  %v2_11ad4 = icmp eq i32 %v0_11ad4, 0
  br i1 %v2_11ad4, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_11abc
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_11abc, %bb25
  %v0_11ae4.pr = phi i32 [ 0, %dec_label_pc_11abc ], [ 1, %bb25 ]
  %v1_11adc = icmp slt i32 %v1_11ad0, 0
  br i1 %v1_11adc, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_11b18

thread-pre-split:                                 ; preds = %bb26
  %v2_11ae4 = icmp eq i32 %v0_11ae4.pr, 0
  store i32 %v1_11ad0, i32* @r4, align 4
  br i1 %v2_11ae4, label %dec_label_pc_11b18, label %dec_label_pc_11af0

dec_label_pc_11af0:                               ; preds = %thread-pre-split
  %v2_11af0 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_11ad4, i32* %r0.global-to-local, align 4
  %v2_11af8 = inttoptr i32 %v0_11ad4 to i32*
  store i32 %v2_11af0, i32* %v2_11af8, align 4
  %v3_11af8 = load i32, i32* %r0.global-to-local, align 4
  %v4_11af8 = add i32 %v3_11af8, 4
  store i32 %v4_11af8, i32* @r0, align 4
  %v2_11afc = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_11afc, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_11b04 = call i32 @function_10980(i32 %v4_11af8, i32 %v2_11afc, i32 128)
  store i32 %v3_11b04, i32* %r0.global-to-local, align 4
  %v1_11b0c = load i32, i32* @r5, align 4
  %v2_11b0c = add i32 %v1_11b0c, 136
  %v3_11b0c = inttoptr i32 %v2_11b0c to i32*
  %v1_11b14 = load i32, i32* @r5, align 4
  %v2_11b14 = add i32 %v1_11b14, 132
  %v3_11b14 = inttoptr i32 %v2_11b14 to i32*
  %v0_11b18.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11b18

dec_label_pc_11b18:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_11af0
  %v0_11b18 = phi i32 [ %v1_11ad0, %thread-pre-split ], [ %v0_11b18.pre, %dec_label_pc_11af0 ], [ %v1_11ad0, %thread-pre-split.thread ]
  store i32 %v0_11b18, i32* %r0.global-to-local, align 4
  store i32 %v3_11a48, i32* @r4, align 4
  store i32 %v6_11a48, i32* @r5, align 4
  ret i32 %v0_11b18

; uselistorder directives
  uselistorder i32 %v0_11b18, { 1, 0 }
  uselistorder i32 %v0_11ad4, { 1, 0, 2 }
  uselistorder i32 %v0_11acc, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 7, 6, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10980, { 1, 0, 2, 4, 3 }
  uselistorder i32 128, { 3, 22, 4, 23, 15, 7, 8, 9, 16, 0, 17, 10, 11, 12, 13, 14, 18, 1, 19, 2, 5, 6, 20, 21 }
  uselistorder label %dec_label_pc_11b18, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_11aac, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_11b34(i32 %arg1) local_unnamed_addr {
dec_label_pc_11b34:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b34 = load i32, i32* @r4, align 4
  store i32 %v3_11b34, i32* %stack_var_-8, align 4
  %v1_11b38 = load i32, i32* @r1, align 4
  %v2_11b38 = inttoptr i32 %v1_11b38 to %sigaction*
  %v3_11b38 = load i32, i32* @r2, align 4
  %v4_11b38 = inttoptr i32 %v3_11b38 to %sigaction*
  %v5_11b38 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_11b38, %sigaction* %v4_11b38)
  store i32 %v5_11b38, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11b38, -4095
  br i1 %tmp, label %dec_label_pc_11b58, label %dec_label_pc_11b48

dec_label_pc_11b48:                               ; preds = %dec_label_pc_11b34
  %v0_11b48 = call i32 @function_1093c()
  %v0_11b4c = load i32, i32* %r4.global-to-local, align 4
  %v1_11b4c = sub i32 0, %v0_11b4c
  %v2_11b50 = inttoptr i32 %v0_11b48 to i32*
  store i32 %v1_11b4c, i32* %v2_11b50, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b58

dec_label_pc_11b58:                               ; preds = %dec_label_pc_11b34, %dec_label_pc_11b48
  %v0_11b58 = phi i32 [ %v5_11b38, %dec_label_pc_11b34 ], [ -1, %dec_label_pc_11b48 ]
  %v2_11b5c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b5c, i32* %r4.global-to-local, align 4
  ret i32 %v0_11b58

; uselistorder directives
  uselistorder i32 %v5_11b38, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b58, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_11b60(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_11b60:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_11b88() local_unnamed_addr {
dec_label_pc_11b88:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b88 = load i32, i32* @r4, align 4
  store i32 %v3_11b88, i32* %stack_var_-8, align 4
  %v0_11b90 = load i32, i32* @r0, align 4
  store i32 %v0_11b90, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11b90, -4095
  br i1 %tmp, label %dec_label_pc_11bac, label %dec_label_pc_11b9c

dec_label_pc_11b9c:                               ; preds = %dec_label_pc_11b88
  %v0_11b9c = call i32 @function_1093c()
  %v0_11ba0 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ba0 = sub i32 0, %v0_11ba0
  %v2_11ba4 = inttoptr i32 %v0_11b9c to i32*
  store i32 %v1_11ba0, i32* %v2_11ba4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11bb0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11bac

dec_label_pc_11bac:                               ; preds = %dec_label_pc_11b88, %dec_label_pc_11b9c
  %v2_11bb0 = phi i32 [ %v3_11b88, %dec_label_pc_11b88 ], [ %v2_11bb0.pre, %dec_label_pc_11b9c ]
  %v0_11bac = phi i32 [ %v0_11b90, %dec_label_pc_11b88 ], [ -1, %dec_label_pc_11b9c ]
  store i32 %v2_11bb0, i32* @r4, align 4
  ret i32 %v0_11bac

; uselistorder directives
  uselistorder i32 %v0_11b90, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11bac, { 1, 0 }
}

define i32 @function_11bb4() local_unnamed_addr {
dec_label_pc_11bb4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11bb4 = load i32, i32* @r4, align 4
  store i32 %v3_11bb4, i32* %stack_var_-8, align 4
  %v0_11bbc = load i32, i32* @r0, align 4
  store i32 %v0_11bbc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11bbc, -4095
  br i1 %tmp, label %dec_label_pc_11bd8, label %dec_label_pc_11bc8

dec_label_pc_11bc8:                               ; preds = %dec_label_pc_11bb4
  %v0_11bc8 = call i32 @function_1093c()
  %v0_11bcc = load i32, i32* %r4.global-to-local, align 4
  %v1_11bcc = sub i32 0, %v0_11bcc
  %v2_11bd0 = inttoptr i32 %v0_11bc8 to i32*
  store i32 %v1_11bcc, i32* %v2_11bd0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11bdc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11bd8

dec_label_pc_11bd8:                               ; preds = %dec_label_pc_11bb4, %dec_label_pc_11bc8
  %v2_11bdc = phi i32 [ %v3_11bb4, %dec_label_pc_11bb4 ], [ %v2_11bdc.pre, %dec_label_pc_11bc8 ]
  %v0_11bd8 = phi i32 [ %v0_11bbc, %dec_label_pc_11bb4 ], [ -1, %dec_label_pc_11bc8 ]
  store i32 %v2_11bdc, i32* @r4, align 4
  ret i32 %v0_11bd8

; uselistorder directives
  uselistorder i32 %v0_11bbc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11bd8, { 1, 0 }
}

define i32 @function_11be0(i32 %arg1) local_unnamed_addr {
dec_label_pc_11be0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11be0 = load i32, i32* @r4, align 4
  store i32 %v3_11be0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11c04, label %dec_label_pc_11bf4

dec_label_pc_11bf4:                               ; preds = %dec_label_pc_11be0
  %v0_11bf4 = call i32 @function_1093c()
  %v0_11bf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11bf8 = sub i32 0, %v0_11bf8
  %v2_11bfc = inttoptr i32 %v0_11bf4 to i32*
  store i32 %v1_11bf8, i32* %v2_11bfc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11c08.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11c04

dec_label_pc_11c04:                               ; preds = %dec_label_pc_11be0, %dec_label_pc_11bf4
  %v2_11c08 = phi i32 [ %v3_11be0, %dec_label_pc_11be0 ], [ %v2_11c08.pre, %dec_label_pc_11bf4 ]
  %v0_11c04 = phi i32 [ %arg1, %dec_label_pc_11be0 ], [ -1, %dec_label_pc_11bf4 ]
  store i32 %v2_11c08, i32* %r4.global-to-local, align 4
  ret i32 %v0_11c04

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c04, { 1, 0 }
}

define i32 @function_11c0c() local_unnamed_addr {
dec_label_pc_11c0c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11c0c = load i32, i32* @r4, align 4
  store i32 %v3_11c0c, i32* %stack_var_-8, align 4
  %v0_11c14 = load i32, i32* @r0, align 4
  store i32 %v0_11c14, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11c14, -4095
  br i1 %tmp, label %dec_label_pc_11c30, label %dec_label_pc_11c20

dec_label_pc_11c20:                               ; preds = %dec_label_pc_11c0c
  %v0_11c20 = call i32 @function_1093c()
  %v0_11c24 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c24 = sub i32 0, %v0_11c24
  %v2_11c28 = inttoptr i32 %v0_11c20 to i32*
  store i32 %v1_11c24, i32* %v2_11c28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11c34.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11c30

dec_label_pc_11c30:                               ; preds = %dec_label_pc_11c0c, %dec_label_pc_11c20
  %v2_11c34 = phi i32 [ %v3_11c0c, %dec_label_pc_11c0c ], [ %v2_11c34.pre, %dec_label_pc_11c20 ]
  %v0_11c30 = phi i32 [ %v0_11c14, %dec_label_pc_11c0c ], [ -1, %dec_label_pc_11c20 ]
  store i32 %v2_11c34, i32* %r4.global-to-local, align 4
  ret i32 %v0_11c30

; uselistorder directives
  uselistorder i32 %v0_11c14, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c30, { 1, 0 }
}

define i32 @function_11c38(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c38:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_11c38 = load i32, i32* @r4, align 4
  store i32 %v3_11c38, i32* %stack_var_-8, align 4
  %v6_11c3c = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_11c3c, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_11c3c, -4095
  br i1 %tmp6, label %dec_label_pc_11c5c, label %dec_label_pc_11c4c

dec_label_pc_11c4c:                               ; preds = %dec_label_pc_11c38
  %v0_11c4c = call i32 @function_1093c()
  %v0_11c50 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c50 = sub i32 0, %v0_11c50
  %v2_11c54 = inttoptr i32 %v0_11c4c to i32*
  store i32 %v1_11c50, i32* %v2_11c54, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11c5c

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c38, %dec_label_pc_11c4c
  %v0_11c5c = phi i32 [ %v6_11c3c, %dec_label_pc_11c38 ], [ -1, %dec_label_pc_11c4c ]
  %v2_11c60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11c60, i32* %r4.global-to-local, align 4
  ret i32 %v0_11c5c

; uselistorder directives
  uselistorder i32 %v6_11c3c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c5c, { 1, 0 }
}

define i32 @function_11c64(i32 %arg1) local_unnamed_addr {
dec_label_pc_11c64:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11c64 = load i32, i32* @r4, align 4
  store i32 %v3_11c64, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1b22c.701 to i32), i32* %r4.global-to-local, align 4
  %v2_11c6c = load i32, i32* @global_var_1b22c.701, align 4
  %v2_11c70 = icmp eq i32 %v2_11c6c, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_11c70, label %dec_label_pc_11c80, label %dec_label_pc_11c8c

dec_label_pc_11c80:                               ; preds = %dec_label_pc_11c64
  %v2_11c80 = call i32 @function_12348(i32* null)
  %v1_11c84 = icmp slt i32 %v2_11c80, 0
  br i1 %v1_11c84, label %dec_label_pc_11cac, label %dec_label_pc_11c8cthread-pre-split

dec_label_pc_11c8cthread-pre-split:               ; preds = %dec_label_pc_11c80
  %v0_11c90.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_11c8c.pre = load i32, i32* @global_var_1b22c.701, align 4
  br label %dec_label_pc_11c8c

dec_label_pc_11c8c:                               ; preds = %dec_label_pc_11c8cthread-pre-split, %dec_label_pc_11c64
  %v2_11c8c = phi i32 [ %v2_11c8c.pre, %dec_label_pc_11c8cthread-pre-split ], [ %v2_11c6c, %dec_label_pc_11c64 ]
  %v1_11c98 = phi i32 [ %v0_11c90.pr, %dec_label_pc_11c8cthread-pre-split ], [ %arg1, %dec_label_pc_11c64 ]
  %v2_11c90 = icmp eq i32 %v1_11c98, 0
  store i32 %v2_11c8c, i32* %r4.global-to-local, align 4
  br i1 %v2_11c90, label %dec_label_pc_11cb0, label %dec_label_pc_11ca0

dec_label_pc_11ca0:                               ; preds = %dec_label_pc_11c8c
  %v2_11c98 = add i32 %v1_11c98, %v2_11c8c
  %v1_11ca0 = inttoptr i32 %v2_11c98 to i32*
  %v2_11ca0 = call i32 @function_12348(i32* %v1_11ca0)
  %v1_11ca4 = icmp slt i32 %v2_11ca0, 0
  br i1 %v1_11ca4, label %dec_label_pc_11cac, label %dec_label_pc_11ca0.dec_label_pc_11cb0_crit_edge

dec_label_pc_11ca0.dec_label_pc_11cb0_crit_edge:  ; preds = %dec_label_pc_11ca0
  %v0_11cb0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cb0

dec_label_pc_11cac:                               ; preds = %dec_label_pc_11ca0, %dec_label_pc_11c80
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cb0

dec_label_pc_11cb0:                               ; preds = %dec_label_pc_11ca0.dec_label_pc_11cb0_crit_edge, %dec_label_pc_11c8c, %dec_label_pc_11cac
  %v0_11cb0 = phi i32 [ %v0_11cb0.pre, %dec_label_pc_11ca0.dec_label_pc_11cb0_crit_edge ], [ %v2_11c8c, %dec_label_pc_11c8c ], [ -1, %dec_label_pc_11cac ]
  %v2_11cb4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11cb4, i32* @r4, align 4
  ret i32 %v0_11cb0

; uselistorder directives
  uselistorder i32 %v2_11c8c, { 1, 0, 2 }
  uselistorder i32* null, { 0, 2, 4, 21, 22, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20 }
  uselistorder label %dec_label_pc_11cb0, { 2, 0, 1 }
}

define i32 @function_11cbc(%tms* %arg1) local_unnamed_addr {
dec_label_pc_11cbc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11cbc = load i32, i32* @r4, align 4
  store i32 %v3_11cbc, i32* %stack_var_-8, align 4
  %v3_11cc0 = call i32 @times(%tms* %arg1)
  store i32 %v3_11cc0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_11cc0, -4095
  br i1 %tmp, label %dec_label_pc_11ce0, label %dec_label_pc_11cd0

dec_label_pc_11cd0:                               ; preds = %dec_label_pc_11cbc
  %v0_11cd0 = call i32 @function_1093c()
  %v0_11cd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_11cd4 = sub i32 0, %v0_11cd4
  %v2_11cd8 = inttoptr i32 %v0_11cd0 to i32*
  store i32 %v1_11cd4, i32* %v2_11cd8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ce0

dec_label_pc_11ce0:                               ; preds = %dec_label_pc_11cbc, %dec_label_pc_11cd0
  %v0_11ce0 = phi i32 [ %v3_11cc0, %dec_label_pc_11cbc ], [ -1, %dec_label_pc_11cd0 ]
  %v2_11ce4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11ce4, i32* %r4.global-to-local, align 4
  ret i32 %v0_11ce0

; uselistorder directives
  uselistorder i32 %v3_11cc0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ce0, { 1, 0 }
}

define i32 @function_11ce8(i32 %arg1) local_unnamed_addr {
dec_label_pc_11ce8:
  ret i32 %arg1
}

define i32 @function_11cf0() local_unnamed_addr {
dec_label_pc_11cf0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_11cf0 = load i32, i32* @r1, align 4
  %v1_11cf0 = load i32, i32* @r0, align 4
  %v2_11cf0 = sub i32 %v0_11cf0, %v1_11cf0
  %v3_11cf0 = icmp ult i32 %v0_11cf0, %v1_11cf0
  %v4_11cf0 = xor i32 %v1_11cf0, %v0_11cf0
  %v5_11cf0 = xor i32 %v2_11cf0, %v0_11cf0
  %v6_11cf0 = and i32 %v5_11cf0, %v4_11cf0
  %v7_11cf0 = icmp slt i32 %v6_11cf0, 0
  store i1 %v7_11cf0, i1* %cpsr_v.global-to-local, align 1
  %v8_11cf0 = icmp slt i32 %v2_11cf0, 0
  store i1 %v8_11cf0, i1* %cpsr_n.global-to-local, align 1
  %v9_11cf0 = icmp eq i32 %v0_11cf0, %v1_11cf0
  store i1 %v9_11cf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11cf0, label %dec_label_pc_11f3c, label %dec_label_pc_11cf8

dec_label_pc_11cf8:                               ; preds = %dec_label_pc_11cf0
  br i1 %v9_11cf0, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_11cf8
  %merge = phi i32 [ %v0_11cf0, %dec_label_pc_11cf8 ], [ %v2_11fd0, %bb141 ], [ %v11_11fec, %bb144 ], [ %v7_11fec, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_11cf8
  store i32 %v1_11cf0, i32* %stack_var_-8, align 4
  %v0_11d00 = load i32, i32* @r2, align 4
  %v2_11d00 = add i32 %v0_11d00, -4
  store i32 %v2_11d00, i32* %r2.global-to-local, align 4
  %v4_11d00 = sub i32 3, %v0_11d00
  %v5_11d00 = and i32 %v4_11d00, %v0_11d00
  %v6_11d00 = icmp slt i32 %v5_11d00, 0
  store i1 %v6_11d00, i1* %cpsr_v.global-to-local, align 1
  %v7_11d00 = icmp slt i32 %v2_11d00, 0
  store i1 %v7_11d00, i1* %cpsr_n.global-to-local, align 1
  %v8_11d00 = icmp eq i32 %v0_11d00, 4
  store i1 %v8_11d00, i1* %cpsr_z.global-to-local, align 1
  %v5_11d04 = icmp slt i32 %v0_11d00, 4
  br i1 %v5_11d04, label %bb131, label %dec_label_pc_11d08

dec_label_pc_11d08:                               ; preds = %bb
  %v1_11d08 = urem i32 %v1_11cf0, 4
  store i32 %v1_11d08, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11d08 = icmp eq i32 %v1_11d08, 0
  store i1 %v2_11d08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11d08, label %dec_label_pc_11d10, label %dec_label_pc_11db4

dec_label_pc_11d10:                               ; preds = %dec_label_pc_11d08
  %v1_11d10 = urem i32 %v0_11cf0, 4
  store i32 %v1_11d10, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11d10 = icmp eq i32 %v1_11d10, 0
  store i1 %v2_11d10, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_11cf0 to i2
  br i1 %v2_11d10, label %dec_label_pc_11d18, label %dec_label_pc_11de4

dec_label_pc_11d18:                               ; preds = %dec_label_pc_11d10, %dec_label_pc_11ddc
  %v0_11d3092 = phi i32 [ %v1_11cf0, %dec_label_pc_11d10 ], [ %v0_11e2c75, %dec_label_pc_11ddc ]
  %v0_11d2c91 = phi i32 [ %v0_11cf0, %dec_label_pc_11d10 ], [ %v0_11ddc, %dec_label_pc_11ddc ]
  %v0_11d18 = phi i32 [ %v2_11d00, %dec_label_pc_11d10 ], [ %v2_11dd4, %dec_label_pc_11ddc ]
  %v2_11d18 = add i32 %v0_11d18, -8
  store i32 %v2_11d18, i32* %r2.global-to-local, align 4
  %v4_11d18 = sub i32 7, %v0_11d18
  %v5_11d18 = and i32 %v4_11d18, %v0_11d18
  %v6_11d18 = icmp slt i32 %v5_11d18, 0
  store i1 %v6_11d18, i1* %cpsr_v.global-to-local, align 1
  %v7_11d18 = icmp slt i32 %v2_11d18, 0
  store i1 %v7_11d18, i1* %cpsr_n.global-to-local, align 1
  %v8_11d18 = icmp eq i32 %v0_11d18, 8
  store i1 %v8_11d18, i1* %cpsr_z.global-to-local, align 1
  %v5_11d1c = icmp slt i32 %v0_11d18, 8
  br i1 %v5_11d1c, label %dec_label_pc_11d6c, label %dec_label_pc_11d20

dec_label_pc_11d20:                               ; preds = %dec_label_pc_11d18
  %v2_11d20 = add i32 %v0_11d18, -28
  store i32 %v2_11d20, i32* %r2.global-to-local, align 4
  %v4_11d20 = sub i32 27, %v0_11d18
  %v5_11d20 = and i32 %v4_11d20, %v2_11d18
  %v6_11d20 = icmp slt i32 %v5_11d20, 0
  store i1 %v6_11d20, i1* %cpsr_v.global-to-local, align 1
  %v7_11d20 = icmp slt i32 %v2_11d20, 0
  store i1 %v7_11d20, i1* %cpsr_n.global-to-local, align 1
  %v8_11d20 = icmp eq i32 %v2_11d18, 20
  store i1 %v8_11d20, i1* %cpsr_z.global-to-local, align 1
  %v5_11d24 = icmp slt i32 %v2_11d18, 20
  br i1 %v5_11d24, label %dec_label_pc_11d58, label %dec_label_pc_11d28

dec_label_pc_11d28:                               ; preds = %dec_label_pc_11d20
  %v0_11d28 = load i32, i32* @r4, align 4
  store i32 %v0_11d28, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11d2c

dec_label_pc_11d2c:                               ; preds = %dec_label_pc_11d2c.dec_label_pc_11d2c_crit_edge, %dec_label_pc_11d28
  %v0_11d30 = phi i32 [ %v12_11d38, %dec_label_pc_11d2c.dec_label_pc_11d2c_crit_edge ], [ %v0_11d3092, %dec_label_pc_11d28 ]
  %v0_11d2c = phi i32 [ %v0_11d2c.pre, %dec_label_pc_11d2c.dec_label_pc_11d2c_crit_edge ], [ %v0_11d2c91, %dec_label_pc_11d28 ]
  %v1_11d2c = inttoptr i32 %v0_11d2c to i32*
  %v2_11d2c = load i32, i32* %v1_11d2c, align 4
  store i32 %v2_11d2c, i32* %r3.global-to-local, align 4
  %v3_11d2c = add i32 %v0_11d2c, 4
  %v4_11d2c = inttoptr i32 %v3_11d2c to i32*
  %v5_11d2c = load i32, i32* %v4_11d2c, align 4
  store i32 %v5_11d2c, i32* %r4.global-to-local, align 4
  %v6_11d2c = add i32 %v0_11d2c, 8
  %v7_11d2c = inttoptr i32 %v6_11d2c to i32*
  %v8_11d2c = load i32, i32* %v7_11d2c, align 4
  store i32 %v8_11d2c, i32* %ip.global-to-local, align 4
  %v9_11d2c = add i32 %v0_11d2c, 12
  %v10_11d2c = inttoptr i32 %v9_11d2c to i32*
  %v11_11d2c = load i32, i32* %v10_11d2c, align 4
  store i32 %v11_11d2c, i32* %lr.global-to-local, align 4
  %v12_11d2c = add i32 %v0_11d2c, 16
  store i32 %v12_11d2c, i32* %r1.global-to-local, align 4
  %v1_11d30 = inttoptr i32 %v0_11d30 to i32*
  store i32 %v2_11d2c, i32* %v1_11d30, align 4
  %v3_11d30 = add i32 %v0_11d30, 4
  %v4_11d30 = inttoptr i32 %v3_11d30 to i32*
  %v5_11d30 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11d30, i32* %v4_11d30, align 4
  %v6_11d30 = add i32 %v0_11d30, 8
  %v7_11d30 = inttoptr i32 %v6_11d30 to i32*
  %v8_11d30 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_11d30, i32* %v7_11d30, align 4
  %v9_11d30 = add i32 %v0_11d30, 12
  %v10_11d30 = inttoptr i32 %v9_11d30 to i32*
  %v11_11d30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_11d30, i32* %v10_11d30, align 4
  %v12_11d30 = add i32 %v0_11d30, 16
  store i32 %v12_11d30, i32* %r0.global-to-local, align 4
  %v0_11d34 = load i32, i32* %r1.global-to-local, align 4
  %v1_11d34 = inttoptr i32 %v0_11d34 to i32*
  %v2_11d34 = load i32, i32* %v1_11d34, align 4
  store i32 %v2_11d34, i32* %r3.global-to-local, align 4
  %v3_11d34 = add i32 %v0_11d34, 4
  %v4_11d34 = inttoptr i32 %v3_11d34 to i32*
  %v5_11d34 = load i32, i32* %v4_11d34, align 4
  store i32 %v5_11d34, i32* %r4.global-to-local, align 4
  %v6_11d34 = add i32 %v0_11d34, 8
  %v7_11d34 = inttoptr i32 %v6_11d34 to i32*
  %v8_11d34 = load i32, i32* %v7_11d34, align 4
  store i32 %v8_11d34, i32* %ip.global-to-local, align 4
  %v9_11d34 = add i32 %v0_11d34, 12
  %v10_11d34 = inttoptr i32 %v9_11d34 to i32*
  %v11_11d34 = load i32, i32* %v10_11d34, align 4
  store i32 %v11_11d34, i32* @lr, align 4
  %v12_11d34 = add i32 %v0_11d34, 16
  store i32 %v12_11d34, i32* @r1, align 4
  %v1_11d38 = inttoptr i32 %v12_11d30 to i32*
  store i32 %v2_11d34, i32* %v1_11d38, align 4
  %v3_11d38 = add i32 %v0_11d30, 20
  %v4_11d38 = inttoptr i32 %v3_11d38 to i32*
  %v5_11d38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11d38, i32* %v4_11d38, align 4
  %v6_11d38 = add i32 %v0_11d30, 24
  %v7_11d38 = inttoptr i32 %v6_11d38 to i32*
  %v8_11d38 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_11d38, i32* %v7_11d38, align 4
  %v9_11d38 = add i32 %v0_11d30, 28
  %v10_11d38 = inttoptr i32 %v9_11d38 to i32*
  %v11_11d38 = load i32, i32* @lr, align 4
  store i32 %v11_11d38, i32* %v10_11d38, align 4
  %v12_11d38 = add i32 %v0_11d30, 32
  store i32 %v12_11d38, i32* @r0, align 4
  %v0_11d3c = load i32, i32* %r2.global-to-local, align 4
  %v2_11d3c = add i32 %v0_11d3c, -32
  store i32 %v2_11d3c, i32* %r2.global-to-local, align 4
  %v6_11d40 = icmp slt i32 %v0_11d3c, 32
  br i1 %v6_11d40, label %dec_label_pc_11d44, label %dec_label_pc_11d2c.dec_label_pc_11d2c_crit_edge

dec_label_pc_11d2c.dec_label_pc_11d2c_crit_edge:  ; preds = %dec_label_pc_11d2c
  %v0_11d2c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11d2c

dec_label_pc_11d44:                               ; preds = %dec_label_pc_11d2c
  %v4_11d44 = add i32 %v0_11d3c, -16
  %v6_11d44 = add i32 %v0_11d3c, 2147483616
  %v7_11d44 = and i32 %v4_11d44, %v6_11d44
  %v8_11d44 = icmp slt i32 %v7_11d44, 0
  store i1 %v8_11d44, i1* %cpsr_v.global-to-local, align 1
  %v9_11d44 = icmp slt i32 %v4_11d44, 0
  store i1 %v9_11d44, i1* %cpsr_n.global-to-local, align 1
  %v10_11d44 = icmp eq i32 %v4_11d44, 0
  store i1 %v10_11d44, i1* %cpsr_z.global-to-local, align 1
  %v5_11d48 = icmp slt i32 %v2_11d3c, -16
  br i1 %v5_11d48, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_11d44
  %v6_11d48 = load i32, i32* @r1, align 4
  %v7_11d48 = inttoptr i32 %v6_11d48 to i32*
  %v8_11d48 = load i32, i32* %v7_11d48, align 4
  store i32 %v8_11d48, i32* %r3.global-to-local, align 4
  %v9_11d48 = add i32 %v6_11d48, 4
  %v10_11d48 = inttoptr i32 %v9_11d48 to i32*
  %v11_11d48 = load i32, i32* %v10_11d48, align 4
  store i32 %v11_11d48, i32* %r4.global-to-local, align 4
  %v12_11d48 = add i32 %v6_11d48, 8
  %v13_11d48 = inttoptr i32 %v12_11d48 to i32*
  %v14_11d48 = load i32, i32* %v13_11d48, align 4
  store i32 %v14_11d48, i32* %ip.global-to-local, align 4
  %v15_11d48 = add i32 %v6_11d48, 12
  %v16_11d48 = inttoptr i32 %v15_11d48 to i32*
  %v17_11d48 = load i32, i32* %v16_11d48, align 4
  store i32 %v17_11d48, i32* @lr, align 4
  %v18_11d48 = add i32 %v6_11d48, 16
  store i32 %v18_11d48, i32* @r1, align 4
  %v7_11d4c = inttoptr i32 %v12_11d38 to i32*
  store i32 %v8_11d48, i32* %v7_11d4c, align 4
  %v9_11d4c = add i32 %v0_11d30, 36
  %v10_11d4c = inttoptr i32 %v9_11d4c to i32*
  %v11_11d4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_11d4c, i32* %v10_11d4c, align 4
  %v12_11d4c = add i32 %v0_11d30, 40
  %v13_11d4c = inttoptr i32 %v12_11d4c to i32*
  %v14_11d4c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v14_11d4c, i32* %v13_11d4c, align 4
  %v15_11d4c = add i32 %v0_11d30, 44
  %v16_11d4c = inttoptr i32 %v15_11d4c to i32*
  %v17_11d4c = load i32, i32* @lr, align 4
  store i32 %v17_11d4c, i32* %v16_11d4c, align 4
  %v18_11d4c = add i32 %v0_11d30, 48
  store i32 %v18_11d4c, i32* @r0, align 4
  %v6_11d50 = load i32, i32* %r2.global-to-local, align 4
  %v7_11d50 = add i32 %v6_11d50, -16
  store i32 %v7_11d50, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11d44, %bb128
  %v3_11d60101 = phi i32 [ %v12_11d38, %dec_label_pc_11d44 ], [ %v18_11d4c, %bb128 ]
  %v0_11d5895 = phi i32 [ %v2_11d3c, %dec_label_pc_11d44 ], [ %v7_11d50, %bb128 ]
  %v2_11d54 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11d54, i32* @r4, align 4
  br label %dec_label_pc_11d58

dec_label_pc_11d58:                               ; preds = %dec_label_pc_11d20, %.thread1
  %v3_11d60100 = phi i32 [ %v0_11d3092, %dec_label_pc_11d20 ], [ %v3_11d60101, %.thread1 ]
  %v0_11d58 = phi i32 [ %v2_11d20, %dec_label_pc_11d20 ], [ %v0_11d5895, %.thread1 ]
  %v1_11d58 = add i32 %v0_11d58, 20
  store i32 %v1_11d58, i32* %r2.global-to-local, align 4
  %v3_11d58 = sub i32 0, %v0_11d58
  %v4_11d58 = and i32 %v1_11d58, %v3_11d58
  %v5_11d58 = icmp slt i32 %v4_11d58, 0
  store i1 %v5_11d58, i1* %cpsr_v.global-to-local, align 1
  %v6_11d58 = icmp slt i32 %v1_11d58, 0
  store i1 %v6_11d58, i1* %cpsr_n.global-to-local, align 1
  %v7_11d58 = icmp eq i32 %v1_11d58, 0
  store i1 %v7_11d58, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11d5c

dec_label_pc_11d5c:                               ; preds = %.thread117, %dec_label_pc_11d58
  %v0_11d6c.pre147 = phi i32 [ %v0_11d6c.pre, %.thread117 ], [ %v1_11d58, %dec_label_pc_11d58 ]
  %v3_11d60 = phi i32 [ %v3_11d6098118, %.thread117 ], [ %v3_11d60100, %dec_label_pc_11d58 ]
  %v1_11d64 = phi i1 [ %v1_11d68, %.thread117 ], [ %v5_11d58, %dec_label_pc_11d58 ]
  %v0_11d64 = phi i1 [ %v0_11d68, %.thread117 ], [ %v6_11d58, %dec_label_pc_11d58 ]
  %v2_11d5c = xor i1 %v1_11d64, %v0_11d64
  br i1 %v2_11d5c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_11d5c
  %v3_11d5c = load i32, i32* @r1, align 4
  %v4_11d5c = inttoptr i32 %v3_11d5c to i32*
  %v5_11d5c = load i32, i32* %v4_11d5c, align 4
  store i32 %v5_11d5c, i32* %r3.global-to-local, align 4
  %v6_11d5c = add i32 %v3_11d5c, 4
  %v7_11d5c = inttoptr i32 %v6_11d5c to i32*
  %v8_11d5c = load i32, i32* %v7_11d5c, align 4
  store i32 %v8_11d5c, i32* %ip.global-to-local, align 4
  %v9_11d5c = add i32 %v3_11d5c, 8
  %v10_11d5c = inttoptr i32 %v9_11d5c to i32*
  %v11_11d5c = load i32, i32* %v10_11d5c, align 4
  store i32 %v11_11d5c, i32* @lr, align 4
  %v12_11d5c = add i32 %v3_11d5c, 12
  store i32 %v12_11d5c, i32* @r1, align 4
  %v4_11d60 = inttoptr i32 %v3_11d60 to i32*
  store i32 %v5_11d5c, i32* %v4_11d60, align 4
  %v6_11d60 = add i32 %v3_11d60, 4
  %v7_11d60 = inttoptr i32 %v6_11d60 to i32*
  %v8_11d60 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_11d60, i32* %v7_11d60, align 4
  %v9_11d60 = add i32 %v3_11d60, 8
  %v10_11d60 = inttoptr i32 %v9_11d60 to i32*
  %v11_11d60 = load i32, i32* @lr, align 4
  store i32 %v11_11d60, i32* %v10_11d60, align 4
  %v12_11d60 = add i32 %v3_11d60, 12
  store i32 %v12_11d60, i32* @r0, align 4
  %v3_11d64 = load i32, i32* %r2.global-to-local, align 4
  %v4_11d64 = add i32 %v3_11d64, -12
  store i32 %v4_11d64, i32* %r2.global-to-local, align 4
  %v6_11d64 = sub i32 11, %v3_11d64
  %v7_11d64 = and i32 %v6_11d64, %v3_11d64
  %v8_11d64 = icmp slt i32 %v7_11d64, 0
  store i1 %v8_11d64, i1* %cpsr_v.global-to-local, align 1
  %v9_11d64 = icmp slt i32 %v4_11d64, 0
  store i1 %v9_11d64, i1* %cpsr_n.global-to-local, align 1
  %v10_11d64 = icmp eq i32 %v3_11d64, 12
  store i1 %v10_11d64, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_11d5c, %bb129
  %v0_11d6c.pre = phi i32 [ %v4_11d64, %bb129 ], [ %v0_11d6c.pre147, %dec_label_pc_11d5c ]
  %v3_11d6098118 = phi i32 [ %v12_11d60, %bb129 ], [ %v3_11d60, %dec_label_pc_11d5c ]
  %v1_11d68 = phi i1 [ %v8_11d64, %bb129 ], [ %v1_11d64, %dec_label_pc_11d5c ]
  %v0_11d68 = phi i1 [ %v9_11d64, %bb129 ], [ %v0_11d64, %dec_label_pc_11d5c ]
  %v2_11d68 = xor i1 %v1_11d68, %v0_11d68
  br i1 %v2_11d68, label %dec_label_pc_11d6c, label %dec_label_pc_11d5c

dec_label_pc_11d6c:                               ; preds = %.thread117, %dec_label_pc_11d18
  %v7_11d7c = phi i32 [ %v0_11d3092, %dec_label_pc_11d18 ], [ %v3_11d6098118, %.thread117 ]
  %v0_11d6c = phi i32 [ %v2_11d18, %dec_label_pc_11d18 ], [ %v0_11d6c.pre, %.thread117 ]
  %v2_11d6c = add i32 %v0_11d6c, 8
  store i32 %v2_11d6c, i32* %r2.global-to-local, align 4
  %v4_11d6c = sub i32 0, %v0_11d6c
  %v5_11d6c = and i32 %v2_11d6c, %v4_11d6c
  %v6_11d6c = icmp slt i32 %v5_11d6c, 0
  store i1 %v6_11d6c, i1* %cpsr_v.global-to-local, align 1
  %v7_11d6c = icmp slt i32 %v2_11d6c, 0
  store i1 %v7_11d6c, i1* %cpsr_n.global-to-local, align 1
  %v8_11d6c = icmp eq i32 %v2_11d6c, 0
  store i1 %v8_11d6c, i1* %cpsr_z.global-to-local, align 1
  %v5_11d70 = icmp slt i32 %v0_11d6c, -8
  br i1 %v5_11d70, label %bb131, label %dec_label_pc_11d74

dec_label_pc_11d74:                               ; preds = %dec_label_pc_11d6c
  %v6_11d74 = add i32 %v0_11d6c, 4
  store i32 %v6_11d74, i32* %r2.global-to-local, align 4
  %v8_11d74 = sub i32 -5, %v0_11d6c
  %v9_11d74 = and i32 %v8_11d74, %v2_11d6c
  %v10_11d74 = icmp slt i32 %v9_11d74, 0
  store i1 %v10_11d74, i1* %cpsr_v.global-to-local, align 1
  %v11_11d74 = icmp slt i32 %v6_11d74, 0
  store i1 %v11_11d74, i1* %cpsr_n.global-to-local, align 1
  %v12_11d74 = icmp eq i32 %v2_11d6c, 4
  store i1 %v12_11d74, i1* %cpsr_z.global-to-local, align 1
  %v5_11d78 = icmp slt i32 %v2_11d6c, 4
  %v6_11d78 = load i32, i32* @r1, align 4
  %v7_11d78 = inttoptr i32 %v6_11d78 to i32*
  %v8_11d78 = load i32, i32* %v7_11d78, align 4
  store i32 %v8_11d78, i32* %r3.global-to-local, align 4
  %v10_11d78 = add i32 %v6_11d78, 4
  br i1 %v5_11d78, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_11d74
  store i32 %v10_11d78, i32* @r1, align 4
  %v8_11d7c = inttoptr i32 %v7_11d7c to i32*
  store i32 %v8_11d78, i32* %v8_11d7c, align 4
  %v9_11d7c = load i32, i32* @r0, align 4
  %v10_11d7c = add i32 %v9_11d7c, 4
  store i32 %v10_11d7c, i32* @r0, align 4
  %v0_11d8c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_11d74
  %v10_11d80 = inttoptr i32 %v10_11d78 to i32*
  %v11_11d80 = load i32, i32* %v10_11d80, align 4
  store i32 %v11_11d80, i32* %ip.global-to-local, align 4
  %v12_11d80 = add i32 %v6_11d78, 8
  store i32 %v12_11d80, i32* @r1, align 4
  %v7_11d84 = inttoptr i32 %v7_11d7c to i32*
  store i32 %v8_11d78, i32* %v7_11d84, align 4
  %v9_11d84 = add i32 %v7_11d7c, 4
  %v10_11d84 = inttoptr i32 %v9_11d84 to i32*
  %v11_11d84 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11d84, i32* %v10_11d84, align 4
  %v12_11d84 = add i32 %v7_11d7c, 8
  store i32 %v12_11d84, i32* @r0, align 4
  %v6_11d88 = load i32, i32* %r2.global-to-local, align 4
  %v7_11d88 = add i32 %v6_11d88, -4
  store i32 %v7_11d88, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_11d6c, %bb, %dec_label_pc_11f34, %dec_label_pc_11ec8, %dec_label_pc_11e5c, %bb130
  %v2_11d9c = phi i32 [ %v10_11d7c, %.thread5 ], [ %v0_11e2c75, %.thread11 ], [ %v7_11d7c, %dec_label_pc_11d6c ], [ %v1_11cf0, %bb ], [ %v2_11d9c113, %dec_label_pc_11f34 ], [ %v2_11d9c112, %dec_label_pc_11ec8 ], [ %v2_11d9c111, %dec_label_pc_11e5c ], [ %v12_11d84, %bb130 ]
  %v0_11d8c = phi i32 [ %v0_11d8c.pre, %.thread5 ], [ %v2_11dd4, %.thread11 ], [ %v2_11d6c, %dec_label_pc_11d6c ], [ %v2_11d00, %bb ], [ %v0_11d8c109, %dec_label_pc_11f34 ], [ %v0_11d8c108, %dec_label_pc_11ec8 ], [ %v0_11d8c107, %dec_label_pc_11e5c ], [ %v7_11d88, %bb130 ]
  %v1_11d8c = add i32 %v0_11d8c, 4
  store i32 %v1_11d8c, i32* %r2.global-to-local, align 4
  %v3_11d8c = sub i32 0, %v0_11d8c
  %v4_11d8c = and i32 %v1_11d8c, %v3_11d8c
  %v5_11d8c = icmp slt i32 %v4_11d8c, 0
  store i1 %v5_11d8c, i1* %cpsr_v.global-to-local, align 1
  %v6_11d8c = icmp slt i32 %v1_11d8c, 0
  store i1 %v6_11d8c, i1* %cpsr_n.global-to-local, align 1
  %v7_11d8c = icmp eq i32 %v1_11d8c, 0
  store i1 %v7_11d8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d8c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_11d90 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_11d90, i32* %r0.global-to-local, align 4
  ret i32 %v3_11d90

bb133:                                            ; preds = %bb131
  %v1_11d94 = add i32 %v0_11d8c, 2
  %v3_11d94 = sub i32 -3, %v0_11d8c
  %v4_11d94 = and i32 %v3_11d94, %v1_11d8c
  %v5_11d94 = icmp slt i32 %v4_11d94, 0
  store i1 %v5_11d94, i1* %cpsr_v.global-to-local, align 1
  %v6_11d94 = icmp slt i32 %v1_11d94, 0
  store i1 %v6_11d94, i1* %cpsr_n.global-to-local, align 1
  %v7_11d94 = icmp eq i32 %v1_11d8c, 2
  store i1 %v7_11d94, i1* %cpsr_z.global-to-local, align 1
  %v0_11d98 = load i32, i32* @r1, align 4
  %v1_11d98 = inttoptr i32 %v0_11d98 to i8*
  %v2_11d98 = load i8, i8* %v1_11d98, align 1
  %v3_11d98 = zext i8 %v2_11d98 to i32
  store i32 %v3_11d98, i32* %r3.global-to-local, align 4
  %v5_11d98 = add i32 %v0_11d98, 1
  store i32 %v5_11d98, i32* %r1.global-to-local, align 4
  %v3_11d9c = inttoptr i32 %v2_11d9c to i8*
  store i8 %v2_11d98, i8* %v3_11d9c, align 1
  %v4_11d9c = load i32, i32* @r0, align 4
  %v5_11d9c = add i32 %v4_11d9c, 1
  store i32 %v5_11d9c, i32* %r0.global-to-local, align 4
  %v0_11da0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_11da0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_11da0 = xor i1 %v0_11da0, %v1_11da0
  br i1 %v2_11da0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_11da0 = load i32, i32* %r1.global-to-local, align 4
  %v4_11da0 = inttoptr i32 %v3_11da0 to i8*
  %v5_11da0 = load i8, i8* %v4_11da0, align 1
  %v6_11da0 = zext i8 %v5_11da0 to i32
  store i32 %v6_11da0, i32* %r3.global-to-local, align 4
  %v8_11da0 = add i32 %v3_11da0, 1
  store i32 %v8_11da0, i32* %r1.global-to-local, align 4
  %v6_11da4 = inttoptr i32 %v5_11d9c to i8*
  store i8 %v5_11da0, i8* %v6_11da4, align 1
  %v7_11da4 = load i32, i32* %r0.global-to-local, align 4
  %v8_11da4 = add i32 %v7_11da4, 1
  store i32 %v8_11da4, i32* %r0.global-to-local, align 4
  %v1_11da8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_11da8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_11dac = phi i32 [ %v8_11da4, %bb134 ], [ %v5_11d9c, %bb133 ]
  %v2_11dac = phi i1 [ %v2_11da8.pre, %bb134 ], [ %v1_11da0, %bb133 ]
  %v1_11dac = phi i1 [ %v1_11da8.pre, %bb134 ], [ %v0_11da0, %bb133 ]
  %v0_11da8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_11da8 = xor i1 %v2_11dac, %v1_11dac
  %v4_11da8 = or i1 %v0_11da8, %v3_11da8
  br i1 %v4_11da8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_11da8 = load i32, i32* %r1.global-to-local, align 4
  %v6_11da8 = inttoptr i32 %v5_11da8 to i8*
  %v7_11da8 = load i8, i8* %v6_11da8, align 1
  %v8_11da8 = zext i8 %v7_11da8 to i32
  store i32 %v8_11da8, i32* %r3.global-to-local, align 4
  %v10_11da8 = add i32 %v5_11da8, 1
  store i32 %v10_11da8, i32* %r1.global-to-local, align 4
  %v8_11dac = inttoptr i32 %v7_11dac to i8*
  store i8 %v7_11da8, i8* %v8_11dac, align 1
  %v9_11dac = load i32, i32* %r0.global-to-local, align 4
  %v10_11dac = add i32 %v9_11dac, 1
  store i32 %v10_11dac, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_11db0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11db0, i32* %r0.global-to-local, align 4
  ret i32 %v2_11db0

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11d08
  %v1_11db4 = sub nsw i32 4, %v1_11d08
  store i32 %v1_11db4, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_11db8 = icmp ult i32 %v1_11db4, 2
  store i1 %v8_11db8, i1* %cpsr_n.global-to-local, align 1
  %v9_11db8 = icmp eq i32 %v1_11db4, 2
  store i1 %v9_11db8, i1* %cpsr_z.global-to-local, align 1
  %v1_11dbc = inttoptr i32 %v0_11cf0 to i8*
  %v2_11dbc = load i8, i8* %v1_11dbc, align 1
  %v3_11dbc = zext i8 %v2_11dbc to i32
  store i32 %v3_11dbc, i32* %r3.global-to-local, align 4
  %v5_11dbc = add i32 %v0_11cf0, 1
  store i32 %v5_11dbc, i32* @r1, align 4
  %v3_11dc0 = inttoptr i32 %v1_11cf0 to i8*
  store i8 %v2_11dbc, i8* %v3_11dc0, align 1
  %v4_11dc0 = load i32, i32* @r0, align 4
  %v5_11dc0 = add i32 %v4_11dc0, 1
  store i32 %v5_11dc0, i32* @r0, align 4
  br i1 %v8_11db8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_11db4
  %v6_11dc4 = load i32, i32* @r1, align 4
  %v7_11dc4 = inttoptr i32 %v6_11dc4 to i8*
  %v8_11dc4 = load i8, i8* %v7_11dc4, align 1
  %v9_11dc4 = zext i8 %v8_11dc4 to i32
  store i32 %v9_11dc4, i32* %r3.global-to-local, align 4
  %v11_11dc4 = add i32 %v6_11dc4, 1
  store i32 %v11_11dc4, i32* @r1, align 4
  %v9_11dc8 = inttoptr i32 %v5_11dc0 to i8*
  store i8 %v8_11dc4, i8* %v9_11dc8, align 1
  %v10_11dc8 = load i32, i32* @r0, align 4
  %v11_11dc8 = add i32 %v10_11dc8, 1
  store i32 %v11_11dc8, i32* @r0, align 4
  br i1 %v9_11db8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_11dcc = load i32, i32* @r1, align 4
  %v9_11dcc = inttoptr i32 %v8_11dcc to i8*
  %v10_11dcc = load i8, i8* %v9_11dcc, align 1
  %v11_11dcc = zext i8 %v10_11dcc to i32
  store i32 %v11_11dcc, i32* %r3.global-to-local, align 4
  %v13_11dcc = add i32 %v8_11dcc, 1
  store i32 %v13_11dcc, i32* @r1, align 4
  %v11_11dd0 = inttoptr i32 %v11_11dc8 to i8*
  store i8 %v10_11dcc, i8* %v11_11dd0, align 1
  %v12_11dd0 = load i32, i32* @r0, align 4
  %v13_11dd0 = add i32 %v12_11dd0, 1
  store i32 %v13_11dd0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_11db4, %bb137
  %v0_11e2c75 = phi i32 [ %v11_11dc8, %bb136 ], [ %v5_11dc0, %dec_label_pc_11db4 ], [ %v13_11dd0, %bb137 ]
  %v0_11dd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11dd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_11dd4 = sub i32 %v0_11dd4, %v1_11dd4
  store i32 %v2_11dd4, i32* %r2.global-to-local, align 4
  %v4_11dd4 = xor i32 %v1_11dd4, %v0_11dd4
  %v5_11dd4 = xor i32 %v2_11dd4, %v0_11dd4
  %v6_11dd4 = and i32 %v5_11dd4, %v4_11dd4
  %v7_11dd4 = icmp slt i32 %v6_11dd4, 0
  store i1 %v7_11dd4, i1* %cpsr_v.global-to-local, align 1
  %v8_11dd4 = icmp slt i32 %v2_11dd4, 0
  store i1 %v8_11dd4, i1* %cpsr_n.global-to-local, align 1
  %v9_11dd4 = icmp eq i32 %v0_11dd4, %v1_11dd4
  store i1 %v9_11dd4, i1* %cpsr_z.global-to-local, align 1
  %v5_11dd8 = icmp slt i32 %v0_11dd4, %v1_11dd4
  br i1 %v5_11dd8, label %bb131, label %dec_label_pc_11ddc

dec_label_pc_11ddc:                               ; preds = %.thread11
  %v0_11ddc = load i32, i32* @r1, align 4
  %v1_11ddc = urem i32 %v0_11ddc, 4
  store i32 %v1_11ddc, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11ddc = icmp eq i32 %v1_11ddc, 0
  store i1 %v2_11ddc, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_11ddc to i2
  br i1 %v2_11ddc, label %dec_label_pc_11d18, label %dec_label_pc_11de4

dec_label_pc_11de4:                               ; preds = %dec_label_pc_11d10, %dec_label_pc_11ddc
  %v0_11e2c74 = phi i32 [ %v1_11cf0, %dec_label_pc_11d10 ], [ %v0_11e2c75, %dec_label_pc_11ddc ]
  %v0_11ed8 = phi i32 [ %v2_11d00, %dec_label_pc_11d10 ], [ %v2_11dd4, %dec_label_pc_11ddc ]
  %v0_11dec.off0 = phi i2 [ %extract.t, %dec_label_pc_11d10 ], [ %extract.t123, %dec_label_pc_11ddc ]
  %v0_11de4 = phi i32 [ %v0_11cf0, %dec_label_pc_11d10 ], [ %v0_11ddc, %dec_label_pc_11ddc ]
  %v1_11de4 = and i32 %v0_11de4, -4
  store i32 %v1_11de4, i32* %r1.global-to-local, align 4
  %v1_11de8 = inttoptr i32 %v1_11de4 to i32*
  %v2_11de8 = load i32, i32* %v1_11de8, align 4
  store i32 %v2_11de8, i32* @lr, align 4
  %v4_11de8 = add i32 %v1_11de4, 4
  store i32 %v4_11de8, i32* %r1.global-to-local, align 4
  %v2_11ed0 = add i32 %v0_11ed8, -12
  %v4_11ed0 = sub i32 11, %v0_11ed8
  %v5_11ed0 = and i32 %v4_11ed0, %v0_11ed8
  %v6_11ed0 = icmp slt i32 %v5_11ed0, 0
  store i1 %v6_11ed0, i1* %cpsr_v.global-to-local, align 1
  %v7_11ed0 = icmp slt i32 %v2_11ed0, 0
  store i1 %v7_11ed0, i1* %cpsr_n.global-to-local, align 1
  %v8_11ed0 = icmp eq i32 %v0_11ed8, 12
  store i1 %v8_11ed0, i1* %cpsr_z.global-to-local, align 1
  %v5_11ed4 = icmp slt i32 %v0_11ed8, 12
  switch i2 %v0_11dec.off0, label %dec_label_pc_11df8 [
    i2 -1, label %dec_label_pc_11ed0
    i2 -2, label %dec_label_pc_11e64
  ]

dec_label_pc_11df8:                               ; preds = %dec_label_pc_11de4
  br i1 %v5_11ed4, label %dec_label_pc_11e44, label %dec_label_pc_11e00

dec_label_pc_11e00:                               ; preds = %dec_label_pc_11df8
  store i32 %v2_11ed0, i32* %r2.global-to-local, align 4
  %v3_11e04 = load i32, i32* @r4, align 4
  store i32 %v3_11e04, i32* %stack_var_-16, align 4
  %v6_11e04 = load i32, i32* @r5, align 4
  store i32 %v6_11e04, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11e08

dec_label_pc_11e08:                               ; preds = %dec_label_pc_11e08.dec_label_pc_11e08_crit_edge, %dec_label_pc_11e00
  %v0_11e2c = phi i32 [ %v12_11e2c, %dec_label_pc_11e08.dec_label_pc_11e08_crit_edge ], [ %v0_11e2c74, %dec_label_pc_11e00 ]
  %v0_11e0c = phi i32 [ %v0_11e0c.pre, %dec_label_pc_11e08.dec_label_pc_11e08_crit_edge ], [ %v4_11de8, %dec_label_pc_11e00 ]
  %v0_11e08 = phi i32 [ %v0_11e08.pre, %dec_label_pc_11e08.dec_label_pc_11e08_crit_edge ], [ %v2_11de8, %dec_label_pc_11e00 ]
  %v3_11e08 = udiv i32 %v0_11e08, 256
  store i32 %v3_11e08, i32* %r3.global-to-local, align 4
  %v1_11e0c = inttoptr i32 %v0_11e0c to i32*
  %v2_11e0c = load i32, i32* %v1_11e0c, align 4
  store i32 %v2_11e0c, i32* %r4.global-to-local, align 4
  %v3_11e0c = add i32 %v0_11e0c, 4
  %v4_11e0c = inttoptr i32 %v3_11e0c to i32*
  %v5_11e0c = load i32, i32* %v4_11e0c, align 4
  store i32 %v5_11e0c, i32* %r5.global-to-local, align 4
  %v6_11e0c = add i32 %v0_11e0c, 8
  %v7_11e0c = inttoptr i32 %v6_11e0c to i32*
  %v8_11e0c = load i32, i32* %v7_11e0c, align 4
  store i32 %v8_11e0c, i32* %ip.global-to-local, align 4
  %v9_11e0c = add i32 %v0_11e0c, 12
  %v10_11e0c = inttoptr i32 %v9_11e0c to i32*
  %v11_11e0c = load i32, i32* %v10_11e0c, align 4
  store i32 %v11_11e0c, i32* @lr, align 4
  %v12_11e0c = add i32 %v0_11e0c, 16
  store i32 %v12_11e0c, i32* %r1.global-to-local, align 4
  %v4_11e10 = mul i32 %v2_11e0c, 16777216
  %v5_11e10 = or i32 %v4_11e10, %v3_11e08
  store i32 %v5_11e10, i32* %r3.global-to-local, align 4
  %v3_11e14 = udiv i32 %v2_11e0c, 256
  %v4_11e18 = mul i32 %v5_11e0c, 16777216
  %v5_11e18 = or i32 %v4_11e18, %v3_11e14
  store i32 %v5_11e18, i32* %r4.global-to-local, align 4
  %v3_11e1c = udiv i32 %v5_11e0c, 256
  %v4_11e20 = mul i32 %v8_11e0c, 16777216
  %v5_11e20 = or i32 %v4_11e20, %v3_11e1c
  store i32 %v5_11e20, i32* %r5.global-to-local, align 4
  %v3_11e24 = udiv i32 %v8_11e0c, 256
  %v4_11e28 = mul i32 %v11_11e0c, 16777216
  %v5_11e28 = or i32 %v4_11e28, %v3_11e24
  store i32 %v5_11e28, i32* %ip.global-to-local, align 4
  %v1_11e2c = inttoptr i32 %v0_11e2c to i32*
  store i32 %v5_11e10, i32* %v1_11e2c, align 4
  %v3_11e2c = add i32 %v0_11e2c, 4
  %v4_11e2c = inttoptr i32 %v3_11e2c to i32*
  %v5_11e2c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11e2c, i32* %v4_11e2c, align 4
  %v6_11e2c = add i32 %v0_11e2c, 8
  %v7_11e2c = inttoptr i32 %v6_11e2c to i32*
  %v8_11e2c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_11e2c, i32* %v7_11e2c, align 4
  %v9_11e2c = add i32 %v0_11e2c, 12
  %v10_11e2c = inttoptr i32 %v9_11e2c to i32*
  %v11_11e2c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11e2c, i32* %v10_11e2c, align 4
  %v12_11e2c = add i32 %v0_11e2c, 16
  store i32 %v12_11e2c, i32* @r0, align 4
  %v0_11e30 = load i32, i32* %r2.global-to-local, align 4
  %v2_11e30 = add i32 %v0_11e30, -16
  store i32 %v2_11e30, i32* %r2.global-to-local, align 4
  %v6_11e34 = icmp slt i32 %v0_11e30, 16
  br i1 %v6_11e34, label %dec_label_pc_11e38, label %dec_label_pc_11e08.dec_label_pc_11e08_crit_edge

dec_label_pc_11e08.dec_label_pc_11e08_crit_edge:  ; preds = %dec_label_pc_11e08
  %v0_11e08.pre = load i32, i32* @lr, align 4
  %v0_11e0c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11e08

dec_label_pc_11e38:                               ; preds = %dec_label_pc_11e08
  %v2_11e38 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11e38, i32* @r4, align 4
  %v5_11e38 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_11e38, i32* @r5, align 4
  %v2_11e3c = add i32 %v0_11e30, -4
  store i32 %v2_11e3c, i32* %r2.global-to-local, align 4
  %v4_11e3c = add i32 %v0_11e30, 2147483632
  %v5_11e3c = and i32 %v2_11e3c, %v4_11e3c
  %v6_11e3c = icmp slt i32 %v5_11e3c, 0
  store i1 %v6_11e3c, i1* %cpsr_v.global-to-local, align 1
  %v7_11e3c = icmp slt i32 %v2_11e3c, 0
  store i1 %v7_11e3c, i1* %cpsr_n.global-to-local, align 1
  %v8_11e3c = icmp eq i32 %v2_11e3c, 0
  store i1 %v8_11e3c, i1* %cpsr_z.global-to-local, align 1
  %v5_11e40 = icmp slt i32 %v2_11e30, -12
  br i1 %v5_11e40, label %dec_label_pc_11e5c, label %dec_label_pc_11e44

dec_label_pc_11e44:                               ; preds = %dec_label_pc_11e38, %dec_label_pc_11df8, %dec_label_pc_11e44
  %v1_11e50 = phi i32 [ %v4_11e50, %dec_label_pc_11e44 ], [ %v12_11e2c, %dec_label_pc_11e38 ], [ %v0_11e2c74, %dec_label_pc_11df8 ]
  %v0_11e44 = load i32, i32* @lr, align 4
  %v3_11e44 = udiv i32 %v0_11e44, 256
  store i32 %v3_11e44, i32* %ip.global-to-local, align 4
  %v0_11e48 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e48 = inttoptr i32 %v0_11e48 to i32*
  %v2_11e48 = load i32, i32* %v1_11e48, align 4
  store i32 %v2_11e48, i32* @lr, align 4
  %v4_11e48 = add i32 %v0_11e48, 4
  store i32 %v4_11e48, i32* %r1.global-to-local, align 4
  %v4_11e4c = mul i32 %v2_11e48, 16777216
  %v5_11e4c = or i32 %v4_11e4c, %v3_11e44
  store i32 %v5_11e4c, i32* %ip.global-to-local, align 4
  %v2_11e50 = inttoptr i32 %v1_11e50 to i32*
  store i32 %v5_11e4c, i32* %v2_11e50, align 4
  %v3_11e50 = load i32, i32* @r0, align 4
  %v4_11e50 = add i32 %v3_11e50, 4
  store i32 %v4_11e50, i32* @r0, align 4
  %v0_11e54 = load i32, i32* %r2.global-to-local, align 4
  %v2_11e54 = add i32 %v0_11e54, -4
  store i32 %v2_11e54, i32* %r2.global-to-local, align 4
  %v6_11e58 = icmp slt i32 %v0_11e54, 4
  br i1 %v6_11e58, label %dec_label_pc_11e5c.loopexit, label %dec_label_pc_11e44

dec_label_pc_11e5c.loopexit:                      ; preds = %dec_label_pc_11e44
  %v4_11e54 = sub i32 3, %v0_11e54
  %v5_11e54 = and i32 %v4_11e54, %v0_11e54
  %v6_11e54 = icmp slt i32 %v5_11e54, 0
  %v7_11e54 = icmp slt i32 %v2_11e54, 0
  store i1 %v6_11e54, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11e54, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11e5c

dec_label_pc_11e5c:                               ; preds = %dec_label_pc_11e5c.loopexit, %dec_label_pc_11e38
  %v2_11d9c111 = phi i32 [ %v4_11e50, %dec_label_pc_11e5c.loopexit ], [ %v12_11e2c, %dec_label_pc_11e38 ]
  %v0_11d8c107 = phi i32 [ %v2_11e54, %dec_label_pc_11e5c.loopexit ], [ %v2_11e3c, %dec_label_pc_11e38 ]
  %v0_11e5c = load i32, i32* %r1.global-to-local, align 4
  %v1_11e5c = add i32 %v0_11e5c, -3
  store i32 %v1_11e5c, i32* @r1, align 4
  br label %bb131

dec_label_pc_11e64:                               ; preds = %dec_label_pc_11de4
  br i1 %v5_11ed4, label %dec_label_pc_11eb0, label %dec_label_pc_11e6c

dec_label_pc_11e6c:                               ; preds = %dec_label_pc_11e64
  store i32 %v2_11ed0, i32* %r2.global-to-local, align 4
  %v3_11e70 = load i32, i32* @r4, align 4
  store i32 %v3_11e70, i32* %stack_var_-16, align 4
  %v6_11e70 = load i32, i32* @r5, align 4
  store i32 %v6_11e70, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11e74

dec_label_pc_11e74:                               ; preds = %dec_label_pc_11e74.dec_label_pc_11e74_crit_edge, %dec_label_pc_11e6c
  %v0_11e98 = phi i32 [ %v12_11e98, %dec_label_pc_11e74.dec_label_pc_11e74_crit_edge ], [ %v0_11e2c74, %dec_label_pc_11e6c ]
  %v0_11e78 = phi i32 [ %v0_11e78.pre, %dec_label_pc_11e74.dec_label_pc_11e74_crit_edge ], [ %v4_11de8, %dec_label_pc_11e6c ]
  %v0_11e74 = phi i32 [ %v0_11e74.pre, %dec_label_pc_11e74.dec_label_pc_11e74_crit_edge ], [ %v2_11de8, %dec_label_pc_11e6c ]
  %v3_11e74 = udiv i32 %v0_11e74, 65536
  store i32 %v3_11e74, i32* %r3.global-to-local, align 4
  %v1_11e78 = inttoptr i32 %v0_11e78 to i32*
  %v2_11e78 = load i32, i32* %v1_11e78, align 4
  store i32 %v2_11e78, i32* %r4.global-to-local, align 4
  %v3_11e78 = add i32 %v0_11e78, 4
  %v4_11e78 = inttoptr i32 %v3_11e78 to i32*
  %v5_11e78 = load i32, i32* %v4_11e78, align 4
  store i32 %v5_11e78, i32* %r5.global-to-local, align 4
  %v6_11e78 = add i32 %v0_11e78, 8
  %v7_11e78 = inttoptr i32 %v6_11e78 to i32*
  %v8_11e78 = load i32, i32* %v7_11e78, align 4
  store i32 %v8_11e78, i32* %ip.global-to-local, align 4
  %v9_11e78 = add i32 %v0_11e78, 12
  %v10_11e78 = inttoptr i32 %v9_11e78 to i32*
  %v11_11e78 = load i32, i32* %v10_11e78, align 4
  store i32 %v11_11e78, i32* @lr, align 4
  %v12_11e78 = add i32 %v0_11e78, 16
  store i32 %v12_11e78, i32* %r1.global-to-local, align 4
  %v4_11e7c = mul i32 %v2_11e78, 65536
  %v5_11e7c = or i32 %v4_11e7c, %v3_11e74
  store i32 %v5_11e7c, i32* %r3.global-to-local, align 4
  %v3_11e80 = udiv i32 %v2_11e78, 65536
  %v4_11e84 = mul i32 %v5_11e78, 65536
  %v5_11e84 = or i32 %v4_11e84, %v3_11e80
  store i32 %v5_11e84, i32* %r4.global-to-local, align 4
  %v3_11e88 = udiv i32 %v5_11e78, 65536
  %v4_11e8c = mul i32 %v8_11e78, 65536
  %v5_11e8c = or i32 %v4_11e8c, %v3_11e88
  store i32 %v5_11e8c, i32* %r5.global-to-local, align 4
  %v3_11e90 = udiv i32 %v8_11e78, 65536
  %v4_11e94 = mul i32 %v11_11e78, 65536
  %v5_11e94 = or i32 %v4_11e94, %v3_11e90
  store i32 %v5_11e94, i32* %ip.global-to-local, align 4
  %v1_11e98 = inttoptr i32 %v0_11e98 to i32*
  store i32 %v5_11e7c, i32* %v1_11e98, align 4
  %v3_11e98 = add i32 %v0_11e98, 4
  %v4_11e98 = inttoptr i32 %v3_11e98 to i32*
  %v5_11e98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11e98, i32* %v4_11e98, align 4
  %v6_11e98 = add i32 %v0_11e98, 8
  %v7_11e98 = inttoptr i32 %v6_11e98 to i32*
  %v8_11e98 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_11e98, i32* %v7_11e98, align 4
  %v9_11e98 = add i32 %v0_11e98, 12
  %v10_11e98 = inttoptr i32 %v9_11e98 to i32*
  %v11_11e98 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11e98, i32* %v10_11e98, align 4
  %v12_11e98 = add i32 %v0_11e98, 16
  store i32 %v12_11e98, i32* @r0, align 4
  %v0_11e9c = load i32, i32* %r2.global-to-local, align 4
  %v2_11e9c = add i32 %v0_11e9c, -16
  store i32 %v2_11e9c, i32* %r2.global-to-local, align 4
  %v6_11ea0 = icmp slt i32 %v0_11e9c, 16
  br i1 %v6_11ea0, label %dec_label_pc_11ea4, label %dec_label_pc_11e74.dec_label_pc_11e74_crit_edge

dec_label_pc_11e74.dec_label_pc_11e74_crit_edge:  ; preds = %dec_label_pc_11e74
  %v0_11e74.pre = load i32, i32* @lr, align 4
  %v0_11e78.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11e74

dec_label_pc_11ea4:                               ; preds = %dec_label_pc_11e74
  %v2_11ea4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11ea4, i32* @r4, align 4
  %v5_11ea4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_11ea4, i32* @r5, align 4
  %v2_11ea8 = add i32 %v0_11e9c, -4
  store i32 %v2_11ea8, i32* %r2.global-to-local, align 4
  %v4_11ea8 = add i32 %v0_11e9c, 2147483632
  %v5_11ea8 = and i32 %v2_11ea8, %v4_11ea8
  %v6_11ea8 = icmp slt i32 %v5_11ea8, 0
  store i1 %v6_11ea8, i1* %cpsr_v.global-to-local, align 1
  %v7_11ea8 = icmp slt i32 %v2_11ea8, 0
  store i1 %v7_11ea8, i1* %cpsr_n.global-to-local, align 1
  %v8_11ea8 = icmp eq i32 %v2_11ea8, 0
  store i1 %v8_11ea8, i1* %cpsr_z.global-to-local, align 1
  %v5_11eac = icmp slt i32 %v2_11e9c, -12
  br i1 %v5_11eac, label %dec_label_pc_11ec8, label %dec_label_pc_11eb0

dec_label_pc_11eb0:                               ; preds = %dec_label_pc_11ea4, %dec_label_pc_11e64, %dec_label_pc_11eb0
  %v1_11ebc = phi i32 [ %v4_11ebc, %dec_label_pc_11eb0 ], [ %v12_11e98, %dec_label_pc_11ea4 ], [ %v0_11e2c74, %dec_label_pc_11e64 ]
  %v0_11eb0 = load i32, i32* @lr, align 4
  %v3_11eb0 = udiv i32 %v0_11eb0, 65536
  store i32 %v3_11eb0, i32* %ip.global-to-local, align 4
  %v0_11eb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_11eb4 = inttoptr i32 %v0_11eb4 to i32*
  %v2_11eb4 = load i32, i32* %v1_11eb4, align 4
  store i32 %v2_11eb4, i32* @lr, align 4
  %v4_11eb4 = add i32 %v0_11eb4, 4
  store i32 %v4_11eb4, i32* %r1.global-to-local, align 4
  %v4_11eb8 = mul i32 %v2_11eb4, 65536
  %v5_11eb8 = or i32 %v4_11eb8, %v3_11eb0
  store i32 %v5_11eb8, i32* %ip.global-to-local, align 4
  %v2_11ebc = inttoptr i32 %v1_11ebc to i32*
  store i32 %v5_11eb8, i32* %v2_11ebc, align 4
  %v3_11ebc = load i32, i32* @r0, align 4
  %v4_11ebc = add i32 %v3_11ebc, 4
  store i32 %v4_11ebc, i32* @r0, align 4
  %v0_11ec0 = load i32, i32* %r2.global-to-local, align 4
  %v2_11ec0 = add i32 %v0_11ec0, -4
  store i32 %v2_11ec0, i32* %r2.global-to-local, align 4
  %v6_11ec4 = icmp slt i32 %v0_11ec0, 4
  br i1 %v6_11ec4, label %dec_label_pc_11ec8.loopexit, label %dec_label_pc_11eb0

dec_label_pc_11ec8.loopexit:                      ; preds = %dec_label_pc_11eb0
  %v4_11ec0 = sub i32 3, %v0_11ec0
  %v5_11ec0 = and i32 %v4_11ec0, %v0_11ec0
  %v6_11ec0 = icmp slt i32 %v5_11ec0, 0
  %v7_11ec0 = icmp slt i32 %v2_11ec0, 0
  store i1 %v6_11ec0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11ec0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11ec8

dec_label_pc_11ec8:                               ; preds = %dec_label_pc_11ec8.loopexit, %dec_label_pc_11ea4
  %v2_11d9c112 = phi i32 [ %v4_11ebc, %dec_label_pc_11ec8.loopexit ], [ %v12_11e98, %dec_label_pc_11ea4 ]
  %v0_11d8c108 = phi i32 [ %v2_11ec0, %dec_label_pc_11ec8.loopexit ], [ %v2_11ea8, %dec_label_pc_11ea4 ]
  %v0_11ec8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ec8 = add i32 %v0_11ec8, -2
  store i32 %v1_11ec8, i32* @r1, align 4
  br label %bb131

dec_label_pc_11ed0:                               ; preds = %dec_label_pc_11de4
  br i1 %v5_11ed4, label %dec_label_pc_11f1c, label %dec_label_pc_11ed8

dec_label_pc_11ed8:                               ; preds = %dec_label_pc_11ed0
  store i32 %v2_11ed0, i32* %r2.global-to-local, align 4
  %v3_11edc = load i32, i32* @r4, align 4
  store i32 %v3_11edc, i32* %stack_var_-16, align 4
  %v6_11edc = load i32, i32* @r5, align 4
  store i32 %v6_11edc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_11ee0:                               ; preds = %dec_label_pc_11ee0.dec_label_pc_11ee0_crit_edge, %dec_label_pc_11ed8
  %v0_11f04 = phi i32 [ %v12_11f04, %dec_label_pc_11ee0.dec_label_pc_11ee0_crit_edge ], [ %v0_11e2c74, %dec_label_pc_11ed8 ]
  %v0_11ee4 = phi i32 [ %v0_11ee4.pre, %dec_label_pc_11ee0.dec_label_pc_11ee0_crit_edge ], [ %v4_11de8, %dec_label_pc_11ed8 ]
  %v0_11ee0 = phi i32 [ %v0_11ee0.pre, %dec_label_pc_11ee0.dec_label_pc_11ee0_crit_edge ], [ %v2_11de8, %dec_label_pc_11ed8 ]
  %v3_11ee0 = udiv i32 %v0_11ee0, 16777216
  store i32 %v3_11ee0, i32* %r3.global-to-local, align 4
  %v1_11ee4 = inttoptr i32 %v0_11ee4 to i32*
  %v2_11ee4 = load i32, i32* %v1_11ee4, align 4
  store i32 %v2_11ee4, i32* %r4.global-to-local, align 4
  %v3_11ee4 = add i32 %v0_11ee4, 4
  %v4_11ee4 = inttoptr i32 %v3_11ee4 to i32*
  %v5_11ee4 = load i32, i32* %v4_11ee4, align 4
  store i32 %v5_11ee4, i32* %r5.global-to-local, align 4
  %v6_11ee4 = add i32 %v0_11ee4, 8
  %v7_11ee4 = inttoptr i32 %v6_11ee4 to i32*
  %v8_11ee4 = load i32, i32* %v7_11ee4, align 4
  store i32 %v8_11ee4, i32* %ip.global-to-local, align 4
  %v9_11ee4 = add i32 %v0_11ee4, 12
  %v10_11ee4 = inttoptr i32 %v9_11ee4 to i32*
  %v11_11ee4 = load i32, i32* %v10_11ee4, align 4
  store i32 %v11_11ee4, i32* @lr, align 4
  %v12_11ee4 = add i32 %v0_11ee4, 16
  store i32 %v12_11ee4, i32* %r1.global-to-local, align 4
  %v4_11ee8 = mul i32 %v2_11ee4, 256
  %v5_11ee8 = or i32 %v4_11ee8, %v3_11ee0
  store i32 %v5_11ee8, i32* %r3.global-to-local, align 4
  %v3_11eec = udiv i32 %v2_11ee4, 16777216
  %v4_11ef0 = mul i32 %v5_11ee4, 256
  %v5_11ef0 = or i32 %v4_11ef0, %v3_11eec
  store i32 %v5_11ef0, i32* %r4.global-to-local, align 4
  %v3_11ef4 = udiv i32 %v5_11ee4, 16777216
  %v4_11ef8 = mul i32 %v8_11ee4, 256
  %v5_11ef8 = or i32 %v4_11ef8, %v3_11ef4
  store i32 %v5_11ef8, i32* %r5.global-to-local, align 4
  %v3_11efc = udiv i32 %v8_11ee4, 16777216
  %v4_11f00 = mul i32 %v11_11ee4, 256
  %v5_11f00 = or i32 %v4_11f00, %v3_11efc
  store i32 %v5_11f00, i32* %ip.global-to-local, align 4
  %v1_11f04 = inttoptr i32 %v0_11f04 to i32*
  store i32 %v5_11ee8, i32* %v1_11f04, align 4
  %v3_11f04 = add i32 %v0_11f04, 4
  %v4_11f04 = inttoptr i32 %v3_11f04 to i32*
  %v5_11f04 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11f04, i32* %v4_11f04, align 4
  %v6_11f04 = add i32 %v0_11f04, 8
  %v7_11f04 = inttoptr i32 %v6_11f04 to i32*
  %v8_11f04 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_11f04, i32* %v7_11f04, align 4
  %v9_11f04 = add i32 %v0_11f04, 12
  %v10_11f04 = inttoptr i32 %v9_11f04 to i32*
  %v11_11f04 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11f04, i32* %v10_11f04, align 4
  %v12_11f04 = add i32 %v0_11f04, 16
  store i32 %v12_11f04, i32* @r0, align 4
  %v0_11f08 = load i32, i32* %r2.global-to-local, align 4
  %v2_11f08 = add i32 %v0_11f08, -16
  store i32 %v2_11f08, i32* %r2.global-to-local, align 4
  %v6_11f0c = icmp slt i32 %v0_11f08, 16
  br i1 %v6_11f0c, label %dec_label_pc_11f10, label %dec_label_pc_11ee0.dec_label_pc_11ee0_crit_edge

dec_label_pc_11ee0.dec_label_pc_11ee0_crit_edge:  ; preds = %dec_label_pc_11ee0
  %v0_11ee0.pre = load i32, i32* @lr, align 4
  %v0_11ee4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_11f10:                               ; preds = %dec_label_pc_11ee0
  %v2_11f10 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11f10, i32* @r4, align 4
  %v5_11f10 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_11f10, i32* @r5, align 4
  %v2_11f14 = add i32 %v0_11f08, -4
  store i32 %v2_11f14, i32* %r2.global-to-local, align 4
  %v4_11f14 = add i32 %v0_11f08, 2147483632
  %v5_11f14 = and i32 %v2_11f14, %v4_11f14
  %v6_11f14 = icmp slt i32 %v5_11f14, 0
  store i1 %v6_11f14, i1* %cpsr_v.global-to-local, align 1
  %v7_11f14 = icmp slt i32 %v2_11f14, 0
  store i1 %v7_11f14, i1* %cpsr_n.global-to-local, align 1
  %v8_11f14 = icmp eq i32 %v2_11f14, 0
  store i1 %v8_11f14, i1* %cpsr_z.global-to-local, align 1
  %v5_11f18 = icmp slt i32 %v2_11f08, -12
  br i1 %v5_11f18, label %dec_label_pc_11f34, label %dec_label_pc_11f1c

dec_label_pc_11f1c:                               ; preds = %dec_label_pc_11f10, %dec_label_pc_11ed0, %dec_label_pc_11f1c
  %v1_11f28 = phi i32 [ %v4_11f28, %dec_label_pc_11f1c ], [ %v12_11f04, %dec_label_pc_11f10 ], [ %v0_11e2c74, %dec_label_pc_11ed0 ]
  %v0_11f1c = load i32, i32* @lr, align 4
  %v3_11f1c = udiv i32 %v0_11f1c, 16777216
  store i32 %v3_11f1c, i32* %ip.global-to-local, align 4
  %v0_11f20 = load i32, i32* %r1.global-to-local, align 4
  %v1_11f20 = inttoptr i32 %v0_11f20 to i32*
  %v2_11f20 = load i32, i32* %v1_11f20, align 4
  store i32 %v2_11f20, i32* @lr, align 4
  %v4_11f20 = add i32 %v0_11f20, 4
  store i32 %v4_11f20, i32* %r1.global-to-local, align 4
  %v4_11f24 = mul i32 %v2_11f20, 256
  %v5_11f24 = or i32 %v4_11f24, %v3_11f1c
  store i32 %v5_11f24, i32* %ip.global-to-local, align 4
  %v2_11f28 = inttoptr i32 %v1_11f28 to i32*
  store i32 %v5_11f24, i32* %v2_11f28, align 4
  %v3_11f28 = load i32, i32* @r0, align 4
  %v4_11f28 = add i32 %v3_11f28, 4
  store i32 %v4_11f28, i32* @r0, align 4
  %v0_11f2c = load i32, i32* %r2.global-to-local, align 4
  %v2_11f2c = add i32 %v0_11f2c, -4
  store i32 %v2_11f2c, i32* %r2.global-to-local, align 4
  %v6_11f30 = icmp slt i32 %v0_11f2c, 4
  br i1 %v6_11f30, label %dec_label_pc_11f34.loopexit, label %dec_label_pc_11f1c

dec_label_pc_11f34.loopexit:                      ; preds = %dec_label_pc_11f1c
  %v4_11f2c = sub i32 3, %v0_11f2c
  %v5_11f2c = and i32 %v4_11f2c, %v0_11f2c
  %v6_11f2c = icmp slt i32 %v5_11f2c, 0
  %v7_11f2c = icmp slt i32 %v2_11f2c, 0
  store i1 %v6_11f2c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11f2c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11f34

dec_label_pc_11f34:                               ; preds = %dec_label_pc_11f34.loopexit, %dec_label_pc_11f10
  %v2_11d9c113 = phi i32 [ %v4_11f28, %dec_label_pc_11f34.loopexit ], [ %v12_11f04, %dec_label_pc_11f10 ]
  %v0_11d8c109 = phi i32 [ %v2_11f2c, %dec_label_pc_11f34.loopexit ], [ %v2_11f14, %dec_label_pc_11f10 ]
  %v0_11f34 = load i32, i32* %r1.global-to-local, align 4
  %v1_11f34 = add i32 %v0_11f34, -1
  store i32 %v1_11f34, i32* @r1, align 4
  br label %bb131

dec_label_pc_11f3c:                               ; preds = %dec_label_pc_11cf0
  %v1_11f3c = load i32, i32* @r2, align 4
  %v2_11f3c = add i32 %v1_11f3c, %v0_11cf0
  store i32 %v2_11f3c, i32* %r1.global-to-local, align 4
  %v2_11f40 = add i32 %v1_11f3c, %v1_11cf0
  store i32 %v2_11f40, i32* %r0.global-to-local, align 4
  %v2_11f44 = add i32 %v1_11f3c, -4
  store i32 %v2_11f44, i32* %r2.global-to-local, align 4
  %v4_11f44 = sub i32 3, %v1_11f3c
  %v5_11f44 = and i32 %v4_11f44, %v1_11f3c
  %v6_11f44 = icmp slt i32 %v5_11f44, 0
  store i1 %v6_11f44, i1* %cpsr_v.global-to-local, align 1
  %v7_11f44 = icmp slt i32 %v2_11f44, 0
  store i1 %v7_11f44, i1* %cpsr_n.global-to-local, align 1
  %v8_11f44 = icmp eq i32 %v1_11f3c, 4
  store i1 %v8_11f44, i1* %cpsr_z.global-to-local, align 1
  %v5_11f48 = icmp slt i32 %v1_11f3c, 4
  br i1 %v5_11f48, label %bb141, label %dec_label_pc_11f4c

dec_label_pc_11f4c:                               ; preds = %dec_label_pc_11f3c
  %v1_11f4c = urem i32 %v2_11f40, 4
  store i32 %v1_11f4c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11f4c = icmp eq i32 %v1_11f4c, 0
  store i1 %v2_11f4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f4c, label %dec_label_pc_11f54, label %dec_label_pc_11ff4

dec_label_pc_11f54:                               ; preds = %dec_label_pc_11f4c
  %v1_11f54 = urem i32 %v2_11f3c, 4
  store i32 %v1_11f54, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11f54 = icmp eq i32 %v1_11f54, 0
  store i1 %v2_11f54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f54, label %dec_label_pc_11f5c, label %dec_label_pc_12020

dec_label_pc_11f5c:                               ; preds = %dec_label_pc_11f54, %dec_label_pc_12018
  %v0_11f7448 = phi i32 [ %v2_11f40, %dec_label_pc_11f54 ], [ %v0_1206831, %dec_label_pc_12018 ]
  %v0_11f7047 = phi i32 [ %v2_11f3c, %dec_label_pc_11f54 ], [ %v0_12018, %dec_label_pc_12018 ]
  %v0_11f5c = phi i32 [ %v2_11f44, %dec_label_pc_11f54 ], [ %v2_12010, %dec_label_pc_12018 ]
  %v2_11f5c = add i32 %v0_11f5c, -8
  store i32 %v2_11f5c, i32* %r2.global-to-local, align 4
  %v4_11f5c = sub i32 7, %v0_11f5c
  %v5_11f5c = and i32 %v4_11f5c, %v0_11f5c
  %v6_11f5c = icmp slt i32 %v5_11f5c, 0
  store i1 %v6_11f5c, i1* %cpsr_v.global-to-local, align 1
  %v7_11f5c = icmp slt i32 %v2_11f5c, 0
  store i1 %v7_11f5c, i1* %cpsr_n.global-to-local, align 1
  %v8_11f5c = icmp eq i32 %v0_11f5c, 8
  store i1 %v8_11f5c, i1* %cpsr_z.global-to-local, align 1
  %v5_11f60 = icmp slt i32 %v0_11f5c, 8
  br i1 %v5_11f60, label %dec_label_pc_11fac, label %dec_label_pc_11f64

dec_label_pc_11f64:                               ; preds = %dec_label_pc_11f5c
  %v3_11f64 = load i32, i32* @r4, align 4
  store i32 %v3_11f64, i32* %stack_var_-8, align 4
  %v6_11f64 = load i32, i32* @lr, align 4
  %v2_11f68 = add i32 %v0_11f5c, -28
  store i32 %v2_11f68, i32* %r2.global-to-local, align 4
  %v4_11f68 = sub i32 27, %v0_11f5c
  %v5_11f68 = and i32 %v4_11f68, %v2_11f5c
  %v6_11f68 = icmp slt i32 %v5_11f68, 0
  store i1 %v6_11f68, i1* %cpsr_v.global-to-local, align 1
  %v7_11f68 = icmp slt i32 %v2_11f68, 0
  store i1 %v7_11f68, i1* %cpsr_n.global-to-local, align 1
  %v8_11f68 = icmp eq i32 %v2_11f5c, 20
  store i1 %v8_11f68, i1* %cpsr_z.global-to-local, align 1
  %v5_11f6c = icmp slt i32 %v2_11f5c, 20
  br i1 %v5_11f6c, label %dec_label_pc_11f88, label %dec_label_pc_11f70

dec_label_pc_11f70:                               ; preds = %dec_label_pc_11f64, %dec_label_pc_11f70.dec_label_pc_11f70_crit_edge
  %v0_11f74 = phi i32 [ %v1_11f7c, %dec_label_pc_11f70.dec_label_pc_11f70_crit_edge ], [ %v0_11f7448, %dec_label_pc_11f64 ]
  %v0_11f70 = phi i32 [ %v0_11f70.pre, %dec_label_pc_11f70.dec_label_pc_11f70_crit_edge ], [ %v0_11f7047, %dec_label_pc_11f64 ]
  %v1_11f70 = add i32 %v0_11f70, -4
  %v2_11f70 = inttoptr i32 %v1_11f70 to i32*
  %v3_11f70 = load i32, i32* %v2_11f70, align 4
  store i32 %v3_11f70, i32* %r3.global-to-local, align 4
  %v4_11f70 = add i32 %v0_11f70, -8
  %v5_11f70 = inttoptr i32 %v4_11f70 to i32*
  %v6_11f70 = load i32, i32* %v5_11f70, align 4
  store i32 %v6_11f70, i32* %r4.global-to-local, align 4
  %v7_11f70 = add i32 %v0_11f70, -12
  %v8_11f70 = inttoptr i32 %v7_11f70 to i32*
  %v9_11f70 = load i32, i32* %v8_11f70, align 4
  store i32 %v9_11f70, i32* %ip.global-to-local, align 4
  %v10_11f70 = add i32 %v0_11f70, -16
  %v11_11f70 = inttoptr i32 %v10_11f70 to i32*
  %v12_11f70 = load i32, i32* %v11_11f70, align 4
  store i32 %v12_11f70, i32* %lr.global-to-local, align 4
  store i32 %v10_11f70, i32* %r1.global-to-local, align 4
  %v1_11f74 = add i32 %v0_11f74, -16
  %v2_11f74 = inttoptr i32 %v1_11f74 to i32*
  store i32 %v3_11f70, i32* %v2_11f74, align 4
  %v4_11f74 = add i32 %v0_11f74, -12
  %v5_11f74 = inttoptr i32 %v4_11f74 to i32*
  %v6_11f74 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_11f74, i32* %v5_11f74, align 4
  %v7_11f74 = add i32 %v0_11f74, -8
  %v8_11f74 = inttoptr i32 %v7_11f74 to i32*
  %v9_11f74 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_11f74, i32* %v8_11f74, align 4
  %v10_11f74 = add i32 %v0_11f74, -4
  %v11_11f74 = inttoptr i32 %v10_11f74 to i32*
  %v12_11f74 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_11f74, i32* %v11_11f74, align 4
  store i32 %v1_11f74, i32* %r0.global-to-local, align 4
  %v0_11f78 = load i32, i32* %r1.global-to-local, align 4
  %v1_11f78 = add i32 %v0_11f78, -4
  %v2_11f78 = inttoptr i32 %v1_11f78 to i32*
  %v3_11f78 = load i32, i32* %v2_11f78, align 4
  store i32 %v3_11f78, i32* %r3.global-to-local, align 4
  %v4_11f78 = add i32 %v0_11f78, -8
  %v5_11f78 = inttoptr i32 %v4_11f78 to i32*
  %v6_11f78 = load i32, i32* %v5_11f78, align 4
  store i32 %v6_11f78, i32* %r4.global-to-local, align 4
  %v7_11f78 = add i32 %v0_11f78, -12
  %v8_11f78 = inttoptr i32 %v7_11f78 to i32*
  %v9_11f78 = load i32, i32* %v8_11f78, align 4
  store i32 %v9_11f78, i32* %ip.global-to-local, align 4
  %v10_11f78 = add i32 %v0_11f78, -16
  %v11_11f78 = inttoptr i32 %v10_11f78 to i32*
  %v12_11f78 = load i32, i32* %v11_11f78, align 4
  store i32 %v12_11f78, i32* %lr.global-to-local, align 4
  store i32 %v10_11f78, i32* %r1.global-to-local, align 4
  %v1_11f7c = add i32 %v0_11f74, -32
  %v2_11f7c = inttoptr i32 %v1_11f7c to i32*
  store i32 %v3_11f78, i32* %v2_11f7c, align 4
  %v4_11f7c = add i32 %v0_11f74, -28
  %v5_11f7c = inttoptr i32 %v4_11f7c to i32*
  %v6_11f7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_11f7c, i32* %v5_11f7c, align 4
  %v7_11f7c = add i32 %v0_11f74, -24
  %v8_11f7c = inttoptr i32 %v7_11f7c to i32*
  %v9_11f7c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_11f7c, i32* %v8_11f7c, align 4
  %v10_11f7c = add i32 %v0_11f74, -20
  %v11_11f7c = inttoptr i32 %v10_11f7c to i32*
  %v12_11f7c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_11f7c, i32* %v11_11f7c, align 4
  store i32 %v1_11f7c, i32* %r0.global-to-local, align 4
  %v0_11f80 = load i32, i32* %r2.global-to-local, align 4
  %v2_11f80 = add i32 %v0_11f80, -32
  store i32 %v2_11f80, i32* %r2.global-to-local, align 4
  %v6_11f84 = icmp slt i32 %v0_11f80, 32
  br i1 %v6_11f84, label %dec_label_pc_11f88.loopexit, label %dec_label_pc_11f70.dec_label_pc_11f70_crit_edge

dec_label_pc_11f70.dec_label_pc_11f70_crit_edge:  ; preds = %dec_label_pc_11f70
  %v0_11f70.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f70

dec_label_pc_11f88.loopexit:                      ; preds = %dec_label_pc_11f70
  %v4_11f80 = sub i32 31, %v0_11f80
  %v5_11f80 = and i32 %v4_11f80, %v0_11f80
  %v6_11f80 = icmp slt i32 %v5_11f80, 0
  %v7_11f80 = icmp slt i32 %v2_11f80, 0
  store i1 %v6_11f80, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11f80, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11f88

dec_label_pc_11f88:                               ; preds = %dec_label_pc_11f88.loopexit, %dec_label_pc_11f64
  %v6_11f90 = phi i32 [ %v1_11f7c, %dec_label_pc_11f88.loopexit ], [ %v0_11f7448, %dec_label_pc_11f64 ]
  %v0_11f98.pr = phi i32 [ %v2_11f80, %dec_label_pc_11f88.loopexit ], [ %v2_11f68, %dec_label_pc_11f64 ]
  %v4_11f88 = add i32 %v0_11f98.pr, 16
  %v6_11f88 = sub i32 0, %v0_11f98.pr
  %v7_11f88 = and i32 %v4_11f88, %v6_11f88
  %v8_11f88 = icmp slt i32 %v7_11f88, 0
  store i1 %v8_11f88, i1* %cpsr_v.global-to-local, align 1
  %v9_11f88 = icmp slt i32 %v4_11f88, 0
  store i1 %v9_11f88, i1* %cpsr_n.global-to-local, align 1
  %v10_11f88 = icmp eq i32 %v4_11f88, 0
  store i1 %v10_11f88, i1* %cpsr_z.global-to-local, align 1
  %v5_11f8c = icmp slt i32 %v0_11f98.pr, -16
  br i1 %v5_11f8c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_11f88
  %v6_11f8c = load i32, i32* %r1.global-to-local, align 4
  %v7_11f8c = add i32 %v6_11f8c, -4
  %v8_11f8c = inttoptr i32 %v7_11f8c to i32*
  %v9_11f8c = load i32, i32* %v8_11f8c, align 4
  store i32 %v9_11f8c, i32* %r3.global-to-local, align 4
  %v10_11f8c = add i32 %v6_11f8c, -8
  %v11_11f8c = inttoptr i32 %v10_11f8c to i32*
  %v12_11f8c = load i32, i32* %v11_11f8c, align 4
  store i32 %v12_11f8c, i32* %r4.global-to-local, align 4
  %v13_11f8c = add i32 %v6_11f8c, -12
  %v14_11f8c = inttoptr i32 %v13_11f8c to i32*
  %v15_11f8c = load i32, i32* %v14_11f8c, align 4
  store i32 %v15_11f8c, i32* %ip.global-to-local, align 4
  %v16_11f8c = add i32 %v6_11f8c, -16
  %v17_11f8c = inttoptr i32 %v16_11f8c to i32*
  %v18_11f8c = load i32, i32* %v17_11f8c, align 4
  store i32 %v18_11f8c, i32* %lr.global-to-local, align 4
  store i32 %v16_11f8c, i32* %r1.global-to-local, align 4
  %v7_11f90 = add i32 %v6_11f90, -16
  %v8_11f90 = inttoptr i32 %v7_11f90 to i32*
  store i32 %v9_11f8c, i32* %v8_11f90, align 4
  %v10_11f90 = add i32 %v6_11f90, -12
  %v11_11f90 = inttoptr i32 %v10_11f90 to i32*
  %v12_11f90 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_11f90, i32* %v11_11f90, align 4
  %v13_11f90 = add i32 %v6_11f90, -8
  %v14_11f90 = inttoptr i32 %v13_11f90 to i32*
  %v15_11f90 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v15_11f90, i32* %v14_11f90, align 4
  %v16_11f90 = add i32 %v6_11f90, -4
  %v17_11f90 = inttoptr i32 %v16_11f90 to i32*
  %v18_11f90 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_11f90, i32* %v17_11f90, align 4
  store i32 %v7_11f90, i32* %r0.global-to-local, align 4
  %v6_11f94 = load i32, i32* %r2.global-to-local, align 4
  %v7_11f94 = add i32 %v6_11f94, -16
  store i32 %v7_11f94, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_11f88, %bb138
  %v6_11fa0 = phi i32 [ %v7_11f90, %bb138 ], [ %v6_11f90, %dec_label_pc_11f88 ]
  %v0_11f98 = phi i32 [ %v7_11f94, %bb138 ], [ %v0_11f98.pr, %dec_label_pc_11f88 ]
  %v4_11f98 = add i32 %v0_11f98, 20
  store i32 %v4_11f98, i32* %r2.global-to-local, align 4
  %v6_11f98 = sub i32 0, %v0_11f98
  %v7_11f98 = and i32 %v4_11f98, %v6_11f98
  %v8_11f98 = icmp slt i32 %v7_11f98, 0
  store i1 %v8_11f98, i1* %cpsr_v.global-to-local, align 1
  %v9_11f98 = icmp slt i32 %v4_11f98, 0
  store i1 %v9_11f98, i1* %cpsr_n.global-to-local, align 1
  %v10_11f98 = icmp eq i32 %v4_11f98, 0
  store i1 %v10_11f98, i1* %cpsr_z.global-to-local, align 1
  %v5_11f9c = icmp slt i32 %v0_11f98, -20
  br i1 %v5_11f9c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_11f9c = load i32, i32* %r1.global-to-local, align 4
  %v7_11f9c = add i32 %v6_11f9c, -4
  %v8_11f9c = inttoptr i32 %v7_11f9c to i32*
  %v9_11f9c = load i32, i32* %v8_11f9c, align 4
  store i32 %v9_11f9c, i32* %r3.global-to-local, align 4
  %v10_11f9c = add i32 %v6_11f9c, -8
  %v11_11f9c = inttoptr i32 %v10_11f9c to i32*
  %v12_11f9c = load i32, i32* %v11_11f9c, align 4
  store i32 %v12_11f9c, i32* %ip.global-to-local, align 4
  %v13_11f9c = add i32 %v6_11f9c, -12
  %v14_11f9c = inttoptr i32 %v13_11f9c to i32*
  %v15_11f9c = load i32, i32* %v14_11f9c, align 4
  store i32 %v15_11f9c, i32* %lr.global-to-local, align 4
  store i32 %v13_11f9c, i32* %r1.global-to-local, align 4
  %v7_11fa0 = add i32 %v6_11fa0, -12
  %v8_11fa0 = inttoptr i32 %v7_11fa0 to i32*
  store i32 %v9_11f9c, i32* %v8_11fa0, align 4
  %v10_11fa0 = add i32 %v6_11fa0, -8
  %v11_11fa0 = inttoptr i32 %v10_11fa0 to i32*
  %v12_11fa0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_11fa0, i32* %v11_11fa0, align 4
  %v13_11fa0 = add i32 %v6_11fa0, -4
  %v14_11fa0 = inttoptr i32 %v13_11fa0 to i32*
  %v15_11fa0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_11fa0, i32* %v14_11fa0, align 4
  store i32 %v7_11fa0, i32* %r0.global-to-local, align 4
  %v6_11fa4 = load i32, i32* %r2.global-to-local, align 4
  %v7_11fa4 = add i32 %v6_11fa4, -12
  store i32 %v7_11fa4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_11fc456 = phi i32 [ %v6_11fa0, %.thread13 ], [ %v7_11fa0, %bb139 ]
  %v0_11fac54 = phi i32 [ %v4_11f98, %.thread13 ], [ %v7_11fa4, %bb139 ]
  %v2_11fa8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11fa8, i32* @r4, align 4
  store i32 %v6_11f64, i32* @lr, align 4
  br label %dec_label_pc_11fac

dec_label_pc_11fac:                               ; preds = %dec_label_pc_11f5c, %.thread15
  %v7_11fbc = phi i32 [ %v0_11f7448, %dec_label_pc_11f5c ], [ %v6_11fc456, %.thread15 ]
  %v0_11fac = phi i32 [ %v2_11f5c, %dec_label_pc_11f5c ], [ %v0_11fac54, %.thread15 ]
  %v2_11fac = add i32 %v0_11fac, 8
  store i32 %v2_11fac, i32* %r2.global-to-local, align 4
  %v4_11fac = sub i32 0, %v0_11fac
  %v5_11fac = and i32 %v2_11fac, %v4_11fac
  %v6_11fac = icmp slt i32 %v5_11fac, 0
  store i1 %v6_11fac, i1* %cpsr_v.global-to-local, align 1
  %v7_11fac = icmp slt i32 %v2_11fac, 0
  store i1 %v7_11fac, i1* %cpsr_n.global-to-local, align 1
  %v8_11fac = icmp eq i32 %v2_11fac, 0
  store i1 %v8_11fac, i1* %cpsr_z.global-to-local, align 1
  %v5_11fb0 = icmp slt i32 %v0_11fac, -8
  br i1 %v5_11fb0, label %bb141, label %dec_label_pc_11fb4

dec_label_pc_11fb4:                               ; preds = %dec_label_pc_11fac
  %v6_11fb4 = add i32 %v0_11fac, 4
  store i32 %v6_11fb4, i32* %r2.global-to-local, align 4
  %v8_11fb4 = sub i32 -5, %v0_11fac
  %v9_11fb4 = and i32 %v8_11fb4, %v2_11fac
  %v10_11fb4 = icmp slt i32 %v9_11fb4, 0
  store i1 %v10_11fb4, i1* %cpsr_v.global-to-local, align 1
  %v11_11fb4 = icmp slt i32 %v6_11fb4, 0
  store i1 %v11_11fb4, i1* %cpsr_n.global-to-local, align 1
  %v12_11fb4 = icmp eq i32 %v2_11fac, 4
  store i1 %v12_11fb4, i1* %cpsr_z.global-to-local, align 1
  %v5_11fb8 = icmp slt i32 %v2_11fac, 4
  %v6_11fb8 = load i32, i32* %r1.global-to-local, align 4
  %v7_11fb8 = add i32 %v6_11fb8, -4
  %v8_11fb8 = inttoptr i32 %v7_11fb8 to i32*
  %v9_11fb8 = load i32, i32* %v8_11fb8, align 4
  store i32 %v9_11fb8, i32* %r3.global-to-local, align 4
  br i1 %v5_11fb8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_11fb4
  store i32 %v7_11fb8, i32* %r1.global-to-local, align 4
  %v8_11fbc = add i32 %v7_11fbc, -4
  %v9_11fbc = inttoptr i32 %v8_11fbc to i32*
  store i32 %v9_11fb8, i32* %v9_11fbc, align 4
  %v10_11fbc = load i32, i32* %r0.global-to-local, align 4
  %v11_11fbc = add i32 %v10_11fbc, -4
  store i32 %v11_11fbc, i32* %r0.global-to-local, align 4
  %v0_11fcc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_11fb4
  %v10_11fc0 = add i32 %v6_11fb8, -8
  %v11_11fc0 = inttoptr i32 %v10_11fc0 to i32*
  %v12_11fc0 = load i32, i32* %v11_11fc0, align 4
  store i32 %v12_11fc0, i32* %ip.global-to-local, align 4
  store i32 %v10_11fc0, i32* %r1.global-to-local, align 4
  %v7_11fc4 = add i32 %v7_11fbc, -8
  %v8_11fc4 = inttoptr i32 %v7_11fc4 to i32*
  store i32 %v9_11fb8, i32* %v8_11fc4, align 4
  %v10_11fc4 = add i32 %v7_11fbc, -4
  %v11_11fc4 = inttoptr i32 %v10_11fc4 to i32*
  %v12_11fc4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_11fc4, i32* %v11_11fc4, align 4
  store i32 %v7_11fc4, i32* %r0.global-to-local, align 4
  %v6_11fc8 = load i32, i32* %r2.global-to-local, align 4
  %v7_11fc8 = add i32 %v6_11fc8, -4
  store i32 %v7_11fc8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_11fac, %dec_label_pc_11f3c, %dec_label_pc_12170, %dec_label_pc_12104, %dec_label_pc_12098, %bb140
  %v2_11fd0 = phi i32 [ %v11_11fbc, %.thread19 ], [ %v0_1206831, %.thread25 ], [ %v7_11fbc, %dec_label_pc_11fac ], [ %v2_11f40, %dec_label_pc_11f3c ], [ %v2_11fdc64, %dec_label_pc_12170 ], [ %v2_11fdc63, %dec_label_pc_12104 ], [ %v2_11fdc62, %dec_label_pc_12098 ], [ %v7_11fc4, %bb140 ]
  %v0_11fcc = phi i32 [ %v0_11fcc.pre, %.thread19 ], [ %v2_12010, %.thread25 ], [ %v2_11fac, %dec_label_pc_11fac ], [ %v2_11f44, %dec_label_pc_11f3c ], [ %v0_11fcc60, %dec_label_pc_12170 ], [ %v0_11fcc59, %dec_label_pc_12104 ], [ %v0_11fcc58, %dec_label_pc_12098 ], [ %v7_11fc8, %bb140 ]
  %v1_11fcc = add i32 %v0_11fcc, 4
  store i32 %v1_11fcc, i32* %r2.global-to-local, align 4
  %v3_11fcc = sub i32 0, %v0_11fcc
  %v4_11fcc = and i32 %v1_11fcc, %v3_11fcc
  %v5_11fcc = icmp slt i32 %v4_11fcc, 0
  store i1 %v5_11fcc, i1* %cpsr_v.global-to-local, align 1
  %v6_11fcc = icmp slt i32 %v1_11fcc, 0
  store i1 %v6_11fcc, i1* %cpsr_n.global-to-local, align 1
  %v7_11fcc = icmp eq i32 %v1_11fcc, 0
  store i1 %v7_11fcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11fcc, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_11fd4 = add i32 %v0_11fcc, 2
  %v3_11fd4 = sub i32 -3, %v0_11fcc
  %v4_11fd4 = and i32 %v3_11fd4, %v1_11fcc
  %v5_11fd4 = icmp slt i32 %v4_11fd4, 0
  store i1 %v5_11fd4, i1* %cpsr_v.global-to-local, align 1
  %v6_11fd4 = icmp slt i32 %v1_11fd4, 0
  store i1 %v6_11fd4, i1* %cpsr_n.global-to-local, align 1
  %v7_11fd4 = icmp eq i32 %v1_11fcc, 2
  store i1 %v7_11fd4, i1* %cpsr_z.global-to-local, align 1
  %v0_11fd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11fd8 = add i32 %v0_11fd8, -1
  %v2_11fd8 = inttoptr i32 %v1_11fd8 to i8*
  %v3_11fd8 = load i8, i8* %v2_11fd8, align 1
  %v4_11fd8 = zext i8 %v3_11fd8 to i32
  store i32 %v4_11fd8, i32* %r3.global-to-local, align 4
  store i32 %v1_11fd8, i32* %r1.global-to-local, align 4
  %v3_11fdc = add i32 %v2_11fd0, -1
  %v4_11fdc = inttoptr i32 %v3_11fdc to i8*
  store i8 %v3_11fd8, i8* %v4_11fdc, align 1
  %v5_11fdc = load i32, i32* %r0.global-to-local, align 4
  %v6_11fdc = add i32 %v5_11fdc, -1
  store i32 %v6_11fdc, i32* %r0.global-to-local, align 4
  %v0_11fe0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_11fe0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_11fe0 = xor i1 %v0_11fe0, %v1_11fe0
  br i1 %v2_11fe0, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_11fe0 = load i32, i32* %r1.global-to-local, align 4
  %v4_11fe0 = add i32 %v3_11fe0, -1
  %v5_11fe0 = inttoptr i32 %v4_11fe0 to i8*
  %v6_11fe0 = load i8, i8* %v5_11fe0, align 1
  %v7_11fe0 = zext i8 %v6_11fe0 to i32
  store i32 %v7_11fe0, i32* %r3.global-to-local, align 4
  store i32 %v4_11fe0, i32* %r1.global-to-local, align 4
  %v6_11fe4 = add i32 %v5_11fdc, -2
  %v7_11fe4 = inttoptr i32 %v6_11fe4 to i8*
  store i8 %v6_11fe0, i8* %v7_11fe4, align 1
  %v8_11fe4 = load i32, i32* %r0.global-to-local, align 4
  %v9_11fe4 = add i32 %v8_11fe4, -1
  store i32 %v9_11fe4, i32* %r0.global-to-local, align 4
  %v1_11fe8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_11fe8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_11fec = phi i32 [ %v9_11fe4, %bb143 ], [ %v6_11fdc, %bb142 ]
  %v2_11fec = phi i1 [ %v2_11fe8.pre, %bb143 ], [ %v1_11fe0, %bb142 ]
  %v1_11fec = phi i1 [ %v1_11fe8.pre, %bb143 ], [ %v0_11fe0, %bb142 ]
  %v0_11fe8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_11fe8 = xor i1 %v2_11fec, %v1_11fec
  %v4_11fe8 = or i1 %v0_11fe8, %v3_11fe8
  br i1 %v4_11fe8, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_11fe8 = load i32, i32* %r1.global-to-local, align 4
  %v6_11fe8 = add i32 %v5_11fe8, -1
  %v7_11fe8 = inttoptr i32 %v6_11fe8 to i8*
  %v8_11fe8 = load i8, i8* %v7_11fe8, align 1
  %v9_11fe8 = zext i8 %v8_11fe8 to i32
  store i32 %v9_11fe8, i32* %r3.global-to-local, align 4
  store i32 %v6_11fe8, i32* %r1.global-to-local, align 4
  %v8_11fec = add i32 %v7_11fec, -1
  %v9_11fec = inttoptr i32 %v8_11fec to i8*
  store i8 %v8_11fe8, i8* %v9_11fec, align 1
  %v10_11fec = load i32, i32* %r0.global-to-local, align 4
  %v11_11fec = add i32 %v10_11fec, -1
  store i32 %v11_11fec, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_11ff4:                               ; preds = %dec_label_pc_11f4c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_11ff4 = icmp eq i32 %v1_11f4c, 1
  store i1 %v8_11ff4, i1* %cpsr_n.global-to-local, align 1
  %v9_11ff4 = icmp eq i32 %v1_11f4c, 2
  store i1 %v9_11ff4, i1* %cpsr_z.global-to-local, align 1
  %v1_11ff8 = add i32 %v2_11f3c, -1
  %v2_11ff8 = inttoptr i32 %v1_11ff8 to i8*
  %v3_11ff8 = load i8, i8* %v2_11ff8, align 1
  %v4_11ff8 = zext i8 %v3_11ff8 to i32
  store i32 %v4_11ff8, i32* %r3.global-to-local, align 4
  store i32 %v1_11ff8, i32* %r1.global-to-local, align 4
  %v3_11ffc = add i32 %v2_11f40, -1
  %v4_11ffc = inttoptr i32 %v3_11ffc to i8*
  store i8 %v3_11ff8, i8* %v4_11ffc, align 1
  %v5_11ffc = load i32, i32* %r0.global-to-local, align 4
  %v6_11ffc = add i32 %v5_11ffc, -1
  store i32 %v6_11ffc, i32* %r0.global-to-local, align 4
  br i1 %v8_11ff4, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_11ff4
  %v6_12000 = load i32, i32* %r1.global-to-local, align 4
  %v7_12000 = add i32 %v6_12000, -1
  %v8_12000 = inttoptr i32 %v7_12000 to i8*
  %v9_12000 = load i8, i8* %v8_12000, align 1
  %v10_12000 = zext i8 %v9_12000 to i32
  store i32 %v10_12000, i32* %r3.global-to-local, align 4
  store i32 %v7_12000, i32* %r1.global-to-local, align 4
  %v9_12004 = add i32 %v5_11ffc, -2
  %v10_12004 = inttoptr i32 %v9_12004 to i8*
  store i8 %v9_12000, i8* %v10_12004, align 1
  %v11_12004 = load i32, i32* %r0.global-to-local, align 4
  %v12_12004 = add i32 %v11_12004, -1
  store i32 %v12_12004, i32* %r0.global-to-local, align 4
  br i1 %v9_11ff4, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_12008 = load i32, i32* %r1.global-to-local, align 4
  %v9_12008 = add i32 %v8_12008, -1
  %v10_12008 = inttoptr i32 %v9_12008 to i8*
  %v11_12008 = load i8, i8* %v10_12008, align 1
  %v12_12008 = zext i8 %v11_12008 to i32
  store i32 %v12_12008, i32* %r3.global-to-local, align 4
  store i32 %v9_12008, i32* %r1.global-to-local, align 4
  %v11_1200c = add i32 %v11_12004, -2
  %v12_1200c = inttoptr i32 %v11_1200c to i8*
  store i8 %v11_12008, i8* %v12_1200c, align 1
  %v13_1200c = load i32, i32* %r0.global-to-local, align 4
  %v14_1200c = add i32 %v13_1200c, -1
  store i32 %v14_1200c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_11ff4, %bb146
  %v0_1206831 = phi i32 [ %v12_12004, %bb145 ], [ %v6_11ffc, %dec_label_pc_11ff4 ], [ %v14_1200c, %bb146 ]
  %v0_12010 = load i32, i32* %r2.global-to-local, align 4
  %v1_12010 = load i32, i32* %ip.global-to-local, align 4
  %v2_12010 = sub i32 %v0_12010, %v1_12010
  store i32 %v2_12010, i32* %r2.global-to-local, align 4
  %v4_12010 = xor i32 %v1_12010, %v0_12010
  %v5_12010 = xor i32 %v2_12010, %v0_12010
  %v6_12010 = and i32 %v5_12010, %v4_12010
  %v7_12010 = icmp slt i32 %v6_12010, 0
  store i1 %v7_12010, i1* %cpsr_v.global-to-local, align 1
  %v8_12010 = icmp slt i32 %v2_12010, 0
  store i1 %v8_12010, i1* %cpsr_n.global-to-local, align 1
  %v9_12010 = icmp eq i32 %v0_12010, %v1_12010
  store i1 %v9_12010, i1* %cpsr_z.global-to-local, align 1
  %v5_12014 = icmp slt i32 %v0_12010, %v1_12010
  br i1 %v5_12014, label %bb141, label %dec_label_pc_12018

dec_label_pc_12018:                               ; preds = %.thread25
  %v0_12018 = load i32, i32* %r1.global-to-local, align 4
  %v1_12018 = urem i32 %v0_12018, 4
  store i32 %v1_12018, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12018 = icmp eq i32 %v1_12018, 0
  store i1 %v2_12018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12018, label %dec_label_pc_11f5c, label %dec_label_pc_12020

dec_label_pc_12020:                               ; preds = %dec_label_pc_11f54, %dec_label_pc_12018
  %v0_1206830 = phi i32 [ %v2_11f40, %dec_label_pc_11f54 ], [ %v0_1206831, %dec_label_pc_12018 ]
  %v0_12114 = phi i32 [ %v2_11f44, %dec_label_pc_11f54 ], [ %v2_12010, %dec_label_pc_12018 ]
  %v0_12020 = phi i32 [ %v2_11f3c, %dec_label_pc_11f54 ], [ %v0_12018, %dec_label_pc_12018 ]
  %v0_12028 = phi i32 [ %v1_11f54, %dec_label_pc_11f54 ], [ %v1_12018, %dec_label_pc_12018 ]
  %v1_12020 = and i32 %v0_12020, -4
  store i32 %v1_12020, i32* %r1.global-to-local, align 4
  %v1_12024 = inttoptr i32 %v1_12020 to i32*
  %v2_12024 = load i32, i32* %v1_12024, align 4
  store i32 %v2_12024, i32* %r3.global-to-local, align 4
  %v7_12028 = icmp ult i32 %v0_12028, 2
  %v2_1210c = add i32 %v0_12114, -12
  %v4_1210c = sub i32 11, %v0_12114
  %v5_1210c = and i32 %v4_1210c, %v0_12114
  %v6_1210c = icmp slt i32 %v5_1210c, 0
  store i1 %v6_1210c, i1* %cpsr_v.global-to-local, align 1
  %v7_1210c = icmp slt i32 %v2_1210c, 0
  store i1 %v7_1210c, i1* %cpsr_n.global-to-local, align 1
  %v8_1210c = icmp eq i32 %v0_12114, 12
  store i1 %v8_1210c, i1* %cpsr_z.global-to-local, align 1
  %v5_12110 = icmp slt i32 %v0_12114, 12
  br i1 %v7_12028, label %dec_label_pc_1210c, label %dec_label_pc_12030

dec_label_pc_12030:                               ; preds = %dec_label_pc_12020
  %v8_12028 = icmp eq i32 %v0_12028, 2
  br i1 %v8_12028, label %dec_label_pc_120a0, label %dec_label_pc_12034

dec_label_pc_12034:                               ; preds = %dec_label_pc_12030
  br i1 %v5_12110, label %dec_label_pc_12080, label %dec_label_pc_1203c

dec_label_pc_1203c:                               ; preds = %dec_label_pc_12034
  store i32 %v2_1210c, i32* %r2.global-to-local, align 4
  %v3_12040 = load i32, i32* @r4, align 4
  store i32 %v3_12040, i32* %stack_var_-12, align 4
  %v6_12040 = load i32, i32* @r5, align 4
  store i32 %v6_12040, i32* %stack_var_-8, align 4
  %v9_12040 = load i32, i32* @lr, align 4
  br label %dec_label_pc_12044

dec_label_pc_12044:                               ; preds = %dec_label_pc_12044.dec_label_pc_12044_crit_edge, %dec_label_pc_1203c
  %v0_12068 = phi i32 [ %v1_12068, %dec_label_pc_12044.dec_label_pc_12044_crit_edge ], [ %v0_1206830, %dec_label_pc_1203c ]
  %v0_12048 = phi i32 [ %v0_12048.pre, %dec_label_pc_12044.dec_label_pc_12044_crit_edge ], [ %v1_12020, %dec_label_pc_1203c ]
  %v0_12044 = phi i32 [ %v0_12044.pre, %dec_label_pc_12044.dec_label_pc_12044_crit_edge ], [ %v2_12024, %dec_label_pc_1203c ]
  %v3_12044 = mul i32 %v0_12044, 256
  store i32 %v3_12044, i32* %lr.global-to-local, align 4
  %v1_12048 = add i32 %v0_12048, -4
  %v2_12048 = inttoptr i32 %v1_12048 to i32*
  %v3_12048 = load i32, i32* %v2_12048, align 4
  store i32 %v3_12048, i32* %r3.global-to-local, align 4
  %v4_12048 = add i32 %v0_12048, -8
  %v5_12048 = inttoptr i32 %v4_12048 to i32*
  %v6_12048 = load i32, i32* %v5_12048, align 4
  store i32 %v6_12048, i32* %r4.global-to-local, align 4
  %v7_12048 = add i32 %v0_12048, -12
  %v8_12048 = inttoptr i32 %v7_12048 to i32*
  %v9_12048 = load i32, i32* %v8_12048, align 4
  store i32 %v9_12048, i32* %r5.global-to-local, align 4
  %v10_12048 = add i32 %v0_12048, -16
  %v11_12048 = inttoptr i32 %v10_12048 to i32*
  %v12_12048 = load i32, i32* %v11_12048, align 4
  store i32 %v10_12048, i32* %r1.global-to-local, align 4
  %v4_1204c = udiv i32 %v12_12048, 16777216
  %v5_1204c = or i32 %v4_1204c, %v3_12044
  store i32 %v5_1204c, i32* %lr.global-to-local, align 4
  %v3_12050 = mul i32 %v12_12048, 256
  %v4_12054 = udiv i32 %v9_12048, 16777216
  %v5_12054 = or i32 %v3_12050, %v4_12054
  store i32 %v5_12054, i32* %ip.global-to-local, align 4
  %v3_12058 = mul i32 %v9_12048, 256
  %v4_1205c = udiv i32 %v6_12048, 16777216
  %v5_1205c = or i32 %v3_12058, %v4_1205c
  store i32 %v5_1205c, i32* %r5.global-to-local, align 4
  %v3_12060 = mul i32 %v6_12048, 256
  %v4_12064 = udiv i32 %v3_12048, 16777216
  %v5_12064 = or i32 %v3_12060, %v4_12064
  store i32 %v5_12064, i32* %r4.global-to-local, align 4
  %v1_12068 = add i32 %v0_12068, -16
  %v2_12068 = inttoptr i32 %v1_12068 to i32*
  store i32 %v5_12064, i32* %v2_12068, align 4
  %v4_12068 = add i32 %v0_12068, -12
  %v5_12068 = inttoptr i32 %v4_12068 to i32*
  %v6_12068 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_12068, i32* %v5_12068, align 4
  %v7_12068 = add i32 %v0_12068, -8
  %v8_12068 = inttoptr i32 %v7_12068 to i32*
  %v9_12068 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12068, i32* %v8_12068, align 4
  %v10_12068 = add i32 %v0_12068, -4
  %v11_12068 = inttoptr i32 %v10_12068 to i32*
  %v12_12068 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12068, i32* %v11_12068, align 4
  store i32 %v1_12068, i32* %r0.global-to-local, align 4
  %v0_1206c = load i32, i32* %r2.global-to-local, align 4
  %v2_1206c = add i32 %v0_1206c, -16
  store i32 %v2_1206c, i32* %r2.global-to-local, align 4
  %v6_12070 = icmp slt i32 %v0_1206c, 16
  br i1 %v6_12070, label %dec_label_pc_12074, label %dec_label_pc_12044.dec_label_pc_12044_crit_edge

dec_label_pc_12044.dec_label_pc_12044_crit_edge:  ; preds = %dec_label_pc_12044
  %v0_12044.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12048.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12044

dec_label_pc_12074:                               ; preds = %dec_label_pc_12044
  %v2_12074 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12074, i32* @r4, align 4
  %v5_12074 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_12074, i32* @r5, align 4
  store i32 %v9_12040, i32* @lr, align 4
  %v2_12078 = add i32 %v0_1206c, -4
  store i32 %v2_12078, i32* %r2.global-to-local, align 4
  %v4_12078 = add i32 %v0_1206c, 2147483632
  %v5_12078 = and i32 %v2_12078, %v4_12078
  %v6_12078 = icmp slt i32 %v5_12078, 0
  store i1 %v6_12078, i1* %cpsr_v.global-to-local, align 1
  %v7_12078 = icmp slt i32 %v2_12078, 0
  store i1 %v7_12078, i1* %cpsr_n.global-to-local, align 1
  %v8_12078 = icmp eq i32 %v2_12078, 0
  store i1 %v8_12078, i1* %cpsr_z.global-to-local, align 1
  %v5_1207c = icmp slt i32 %v2_1206c, -12
  br i1 %v5_1207c, label %dec_label_pc_12098, label %dec_label_pc_12080

dec_label_pc_12080:                               ; preds = %dec_label_pc_12074, %dec_label_pc_12034, %dec_label_pc_12080
  %v1_1208c = phi i32 [ %v5_1208c, %dec_label_pc_12080 ], [ %v1_12068, %dec_label_pc_12074 ], [ %v0_1206830, %dec_label_pc_12034 ]
  %v0_12080 = load i32, i32* %r3.global-to-local, align 4
  %v3_12080 = mul i32 %v0_12080, 256
  store i32 %v3_12080, i32* %ip.global-to-local, align 4
  %v0_12084 = load i32, i32* %r1.global-to-local, align 4
  %v1_12084 = add i32 %v0_12084, -4
  %v2_12084 = inttoptr i32 %v1_12084 to i32*
  %v3_12084 = load i32, i32* %v2_12084, align 4
  store i32 %v3_12084, i32* %r3.global-to-local, align 4
  store i32 %v1_12084, i32* %r1.global-to-local, align 4
  %v4_12088 = udiv i32 %v3_12084, 16777216
  %v5_12088 = or i32 %v4_12088, %v3_12080
  store i32 %v5_12088, i32* %ip.global-to-local, align 4
  %v2_1208c = add i32 %v1_1208c, -4
  %v3_1208c = inttoptr i32 %v2_1208c to i32*
  store i32 %v5_12088, i32* %v3_1208c, align 4
  %v4_1208c = load i32, i32* %r0.global-to-local, align 4
  %v5_1208c = add i32 %v4_1208c, -4
  store i32 %v5_1208c, i32* %r0.global-to-local, align 4
  %v0_12090 = load i32, i32* %r2.global-to-local, align 4
  %v2_12090 = add i32 %v0_12090, -4
  store i32 %v2_12090, i32* %r2.global-to-local, align 4
  %v6_12094 = icmp slt i32 %v0_12090, 4
  br i1 %v6_12094, label %dec_label_pc_12098.loopexit, label %dec_label_pc_12080

dec_label_pc_12098.loopexit:                      ; preds = %dec_label_pc_12080
  %v4_12090 = sub i32 3, %v0_12090
  %v5_12090 = and i32 %v4_12090, %v0_12090
  %v6_12090 = icmp slt i32 %v5_12090, 0
  %v7_12090 = icmp slt i32 %v2_12090, 0
  store i1 %v6_12090, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12090, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12098

dec_label_pc_12098:                               ; preds = %dec_label_pc_12098.loopexit, %dec_label_pc_12074
  %v2_11fdc62 = phi i32 [ %v5_1208c, %dec_label_pc_12098.loopexit ], [ %v1_12068, %dec_label_pc_12074 ]
  %v0_11fcc58 = phi i32 [ %v2_12090, %dec_label_pc_12098.loopexit ], [ %v2_12078, %dec_label_pc_12074 ]
  %v0_12098 = load i32, i32* %r1.global-to-local, align 4
  %v1_12098 = add i32 %v0_12098, 3
  store i32 %v1_12098, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_120a0:                               ; preds = %dec_label_pc_12030
  br i1 %v5_12110, label %dec_label_pc_120ec, label %dec_label_pc_120a8

dec_label_pc_120a8:                               ; preds = %dec_label_pc_120a0
  store i32 %v2_1210c, i32* %r2.global-to-local, align 4
  %v3_120ac = load i32, i32* @r4, align 4
  store i32 %v3_120ac, i32* %stack_var_-12, align 4
  %v6_120ac = load i32, i32* @r5, align 4
  store i32 %v6_120ac, i32* %stack_var_-8, align 4
  %v9_120ac = load i32, i32* @lr, align 4
  br label %dec_label_pc_120b0

dec_label_pc_120b0:                               ; preds = %dec_label_pc_120b0.dec_label_pc_120b0_crit_edge, %dec_label_pc_120a8
  %v0_120d4 = phi i32 [ %v1_120d4, %dec_label_pc_120b0.dec_label_pc_120b0_crit_edge ], [ %v0_1206830, %dec_label_pc_120a8 ]
  %v0_120b4 = phi i32 [ %v0_120b4.pre, %dec_label_pc_120b0.dec_label_pc_120b0_crit_edge ], [ %v1_12020, %dec_label_pc_120a8 ]
  %v0_120b0 = phi i32 [ %v0_120b0.pre, %dec_label_pc_120b0.dec_label_pc_120b0_crit_edge ], [ %v2_12024, %dec_label_pc_120a8 ]
  %v3_120b0 = mul i32 %v0_120b0, 65536
  store i32 %v3_120b0, i32* %lr.global-to-local, align 4
  %v1_120b4 = add i32 %v0_120b4, -4
  %v2_120b4 = inttoptr i32 %v1_120b4 to i32*
  %v3_120b4 = load i32, i32* %v2_120b4, align 4
  store i32 %v3_120b4, i32* %r3.global-to-local, align 4
  %v4_120b4 = add i32 %v0_120b4, -8
  %v5_120b4 = inttoptr i32 %v4_120b4 to i32*
  %v6_120b4 = load i32, i32* %v5_120b4, align 4
  store i32 %v6_120b4, i32* %r4.global-to-local, align 4
  %v7_120b4 = add i32 %v0_120b4, -12
  %v8_120b4 = inttoptr i32 %v7_120b4 to i32*
  %v9_120b4 = load i32, i32* %v8_120b4, align 4
  store i32 %v9_120b4, i32* %r5.global-to-local, align 4
  %v10_120b4 = add i32 %v0_120b4, -16
  %v11_120b4 = inttoptr i32 %v10_120b4 to i32*
  %v12_120b4 = load i32, i32* %v11_120b4, align 4
  store i32 %v10_120b4, i32* %r1.global-to-local, align 4
  %v4_120b8 = udiv i32 %v12_120b4, 65536
  %v5_120b8 = or i32 %v4_120b8, %v3_120b0
  store i32 %v5_120b8, i32* %lr.global-to-local, align 4
  %v3_120bc = mul i32 %v12_120b4, 65536
  %v4_120c0 = udiv i32 %v9_120b4, 65536
  %v5_120c0 = or i32 %v3_120bc, %v4_120c0
  store i32 %v5_120c0, i32* %ip.global-to-local, align 4
  %v3_120c4 = mul i32 %v9_120b4, 65536
  %v4_120c8 = udiv i32 %v6_120b4, 65536
  %v5_120c8 = or i32 %v3_120c4, %v4_120c8
  store i32 %v5_120c8, i32* %r5.global-to-local, align 4
  %v3_120cc = mul i32 %v6_120b4, 65536
  %v4_120d0 = udiv i32 %v3_120b4, 65536
  %v5_120d0 = or i32 %v3_120cc, %v4_120d0
  store i32 %v5_120d0, i32* %r4.global-to-local, align 4
  %v1_120d4 = add i32 %v0_120d4, -16
  %v2_120d4 = inttoptr i32 %v1_120d4 to i32*
  store i32 %v5_120d0, i32* %v2_120d4, align 4
  %v4_120d4 = add i32 %v0_120d4, -12
  %v5_120d4 = inttoptr i32 %v4_120d4 to i32*
  %v6_120d4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_120d4, i32* %v5_120d4, align 4
  %v7_120d4 = add i32 %v0_120d4, -8
  %v8_120d4 = inttoptr i32 %v7_120d4 to i32*
  %v9_120d4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_120d4, i32* %v8_120d4, align 4
  %v10_120d4 = add i32 %v0_120d4, -4
  %v11_120d4 = inttoptr i32 %v10_120d4 to i32*
  %v12_120d4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_120d4, i32* %v11_120d4, align 4
  store i32 %v1_120d4, i32* %r0.global-to-local, align 4
  %v0_120d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_120d8 = add i32 %v0_120d8, -16
  store i32 %v2_120d8, i32* %r2.global-to-local, align 4
  %v6_120dc = icmp slt i32 %v0_120d8, 16
  br i1 %v6_120dc, label %dec_label_pc_120e0, label %dec_label_pc_120b0.dec_label_pc_120b0_crit_edge

dec_label_pc_120b0.dec_label_pc_120b0_crit_edge:  ; preds = %dec_label_pc_120b0
  %v0_120b0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_120b4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_120b0

dec_label_pc_120e0:                               ; preds = %dec_label_pc_120b0
  %v2_120e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_120e0, i32* @r4, align 4
  %v5_120e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_120e0, i32* @r5, align 4
  store i32 %v9_120ac, i32* @lr, align 4
  %v2_120e4 = add i32 %v0_120d8, -4
  store i32 %v2_120e4, i32* %r2.global-to-local, align 4
  %v4_120e4 = add i32 %v0_120d8, 2147483632
  %v5_120e4 = and i32 %v2_120e4, %v4_120e4
  %v6_120e4 = icmp slt i32 %v5_120e4, 0
  store i1 %v6_120e4, i1* %cpsr_v.global-to-local, align 1
  %v7_120e4 = icmp slt i32 %v2_120e4, 0
  store i1 %v7_120e4, i1* %cpsr_n.global-to-local, align 1
  %v8_120e4 = icmp eq i32 %v2_120e4, 0
  store i1 %v8_120e4, i1* %cpsr_z.global-to-local, align 1
  %v5_120e8 = icmp slt i32 %v2_120d8, -12
  br i1 %v5_120e8, label %dec_label_pc_12104, label %dec_label_pc_120ec

dec_label_pc_120ec:                               ; preds = %dec_label_pc_120e0, %dec_label_pc_120a0, %dec_label_pc_120ec
  %v1_120f8 = phi i32 [ %v5_120f8, %dec_label_pc_120ec ], [ %v1_120d4, %dec_label_pc_120e0 ], [ %v0_1206830, %dec_label_pc_120a0 ]
  %v0_120ec = load i32, i32* %r3.global-to-local, align 4
  %v3_120ec = mul i32 %v0_120ec, 65536
  store i32 %v3_120ec, i32* %ip.global-to-local, align 4
  %v0_120f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_120f0 = add i32 %v0_120f0, -4
  %v2_120f0 = inttoptr i32 %v1_120f0 to i32*
  %v3_120f0 = load i32, i32* %v2_120f0, align 4
  store i32 %v3_120f0, i32* %r3.global-to-local, align 4
  store i32 %v1_120f0, i32* %r1.global-to-local, align 4
  %v4_120f4 = udiv i32 %v3_120f0, 65536
  %v5_120f4 = or i32 %v4_120f4, %v3_120ec
  store i32 %v5_120f4, i32* %ip.global-to-local, align 4
  %v2_120f8 = add i32 %v1_120f8, -4
  %v3_120f8 = inttoptr i32 %v2_120f8 to i32*
  store i32 %v5_120f4, i32* %v3_120f8, align 4
  %v4_120f8 = load i32, i32* %r0.global-to-local, align 4
  %v5_120f8 = add i32 %v4_120f8, -4
  store i32 %v5_120f8, i32* %r0.global-to-local, align 4
  %v0_120fc = load i32, i32* %r2.global-to-local, align 4
  %v2_120fc = add i32 %v0_120fc, -4
  store i32 %v2_120fc, i32* %r2.global-to-local, align 4
  %v6_12100 = icmp slt i32 %v0_120fc, 4
  br i1 %v6_12100, label %dec_label_pc_12104.loopexit, label %dec_label_pc_120ec

dec_label_pc_12104.loopexit:                      ; preds = %dec_label_pc_120ec
  %v4_120fc = sub i32 3, %v0_120fc
  %v5_120fc = and i32 %v4_120fc, %v0_120fc
  %v6_120fc = icmp slt i32 %v5_120fc, 0
  %v7_120fc = icmp slt i32 %v2_120fc, 0
  store i1 %v6_120fc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_120fc, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12104

dec_label_pc_12104:                               ; preds = %dec_label_pc_12104.loopexit, %dec_label_pc_120e0
  %v2_11fdc63 = phi i32 [ %v5_120f8, %dec_label_pc_12104.loopexit ], [ %v1_120d4, %dec_label_pc_120e0 ]
  %v0_11fcc59 = phi i32 [ %v2_120fc, %dec_label_pc_12104.loopexit ], [ %v2_120e4, %dec_label_pc_120e0 ]
  %v0_12104 = load i32, i32* %r1.global-to-local, align 4
  %v1_12104 = add i32 %v0_12104, 2
  store i32 %v1_12104, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1210c:                               ; preds = %dec_label_pc_12020
  br i1 %v5_12110, label %dec_label_pc_12158, label %dec_label_pc_12114

dec_label_pc_12114:                               ; preds = %dec_label_pc_1210c
  store i32 %v2_1210c, i32* %r2.global-to-local, align 4
  %v3_12118 = load i32, i32* @r4, align 4
  store i32 %v3_12118, i32* %stack_var_-12, align 4
  %v6_12118 = load i32, i32* @r5, align 4
  store i32 %v6_12118, i32* %stack_var_-8, align 4
  %v9_12118 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1211c

dec_label_pc_1211c:                               ; preds = %dec_label_pc_1211c.dec_label_pc_1211c_crit_edge, %dec_label_pc_12114
  %v0_12140 = phi i32 [ %v1_12140, %dec_label_pc_1211c.dec_label_pc_1211c_crit_edge ], [ %v0_1206830, %dec_label_pc_12114 ]
  %v0_12120 = phi i32 [ %v0_12120.pre, %dec_label_pc_1211c.dec_label_pc_1211c_crit_edge ], [ %v1_12020, %dec_label_pc_12114 ]
  %v0_1211c = phi i32 [ %v0_1211c.pre, %dec_label_pc_1211c.dec_label_pc_1211c_crit_edge ], [ %v2_12024, %dec_label_pc_12114 ]
  %v3_1211c = mul i32 %v0_1211c, 16777216
  store i32 %v3_1211c, i32* %lr.global-to-local, align 4
  %v1_12120 = add i32 %v0_12120, -4
  %v2_12120 = inttoptr i32 %v1_12120 to i32*
  %v3_12120 = load i32, i32* %v2_12120, align 4
  store i32 %v3_12120, i32* %r3.global-to-local, align 4
  %v4_12120 = add i32 %v0_12120, -8
  %v5_12120 = inttoptr i32 %v4_12120 to i32*
  %v6_12120 = load i32, i32* %v5_12120, align 4
  store i32 %v6_12120, i32* %r4.global-to-local, align 4
  %v7_12120 = add i32 %v0_12120, -12
  %v8_12120 = inttoptr i32 %v7_12120 to i32*
  %v9_12120 = load i32, i32* %v8_12120, align 4
  store i32 %v9_12120, i32* %r5.global-to-local, align 4
  %v10_12120 = add i32 %v0_12120, -16
  %v11_12120 = inttoptr i32 %v10_12120 to i32*
  %v12_12120 = load i32, i32* %v11_12120, align 4
  store i32 %v10_12120, i32* %r1.global-to-local, align 4
  %v4_12124 = udiv i32 %v12_12120, 256
  %v5_12124 = or i32 %v4_12124, %v3_1211c
  store i32 %v5_12124, i32* %lr.global-to-local, align 4
  %v3_12128 = mul i32 %v12_12120, 16777216
  %v4_1212c = udiv i32 %v9_12120, 256
  %v5_1212c = or i32 %v3_12128, %v4_1212c
  store i32 %v5_1212c, i32* %ip.global-to-local, align 4
  %v3_12130 = mul i32 %v9_12120, 16777216
  %v4_12134 = udiv i32 %v6_12120, 256
  %v5_12134 = or i32 %v3_12130, %v4_12134
  store i32 %v5_12134, i32* %r5.global-to-local, align 4
  %v3_12138 = mul i32 %v6_12120, 16777216
  %v4_1213c = udiv i32 %v3_12120, 256
  %v5_1213c = or i32 %v3_12138, %v4_1213c
  store i32 %v5_1213c, i32* %r4.global-to-local, align 4
  %v1_12140 = add i32 %v0_12140, -16
  %v2_12140 = inttoptr i32 %v1_12140 to i32*
  store i32 %v5_1213c, i32* %v2_12140, align 4
  %v4_12140 = add i32 %v0_12140, -12
  %v5_12140 = inttoptr i32 %v4_12140 to i32*
  %v6_12140 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_12140, i32* %v5_12140, align 4
  %v7_12140 = add i32 %v0_12140, -8
  %v8_12140 = inttoptr i32 %v7_12140 to i32*
  %v9_12140 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12140, i32* %v8_12140, align 4
  %v10_12140 = add i32 %v0_12140, -4
  %v11_12140 = inttoptr i32 %v10_12140 to i32*
  %v12_12140 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12140, i32* %v11_12140, align 4
  store i32 %v1_12140, i32* %r0.global-to-local, align 4
  %v0_12144 = load i32, i32* %r2.global-to-local, align 4
  %v2_12144 = add i32 %v0_12144, -16
  store i32 %v2_12144, i32* %r2.global-to-local, align 4
  %v6_12148 = icmp slt i32 %v0_12144, 16
  br i1 %v6_12148, label %dec_label_pc_1214c, label %dec_label_pc_1211c.dec_label_pc_1211c_crit_edge

dec_label_pc_1211c.dec_label_pc_1211c_crit_edge:  ; preds = %dec_label_pc_1211c
  %v0_1211c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12120.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1211c

dec_label_pc_1214c:                               ; preds = %dec_label_pc_1211c
  %v2_1214c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1214c, i32* @r4, align 4
  %v5_1214c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1214c, i32* @r5, align 4
  store i32 %v9_12118, i32* @lr, align 4
  %v2_12150 = add i32 %v0_12144, -4
  store i32 %v2_12150, i32* %r2.global-to-local, align 4
  %v4_12150 = add i32 %v0_12144, 2147483632
  %v5_12150 = and i32 %v2_12150, %v4_12150
  %v6_12150 = icmp slt i32 %v5_12150, 0
  store i1 %v6_12150, i1* %cpsr_v.global-to-local, align 1
  %v7_12150 = icmp slt i32 %v2_12150, 0
  store i1 %v7_12150, i1* %cpsr_n.global-to-local, align 1
  %v8_12150 = icmp eq i32 %v2_12150, 0
  store i1 %v8_12150, i1* %cpsr_z.global-to-local, align 1
  %v5_12154 = icmp slt i32 %v2_12144, -12
  br i1 %v5_12154, label %dec_label_pc_12170, label %dec_label_pc_12158

dec_label_pc_12158:                               ; preds = %dec_label_pc_1214c, %dec_label_pc_1210c, %dec_label_pc_12158
  %v1_12164 = phi i32 [ %v5_12164, %dec_label_pc_12158 ], [ %v1_12140, %dec_label_pc_1214c ], [ %v0_1206830, %dec_label_pc_1210c ]
  %v0_12158 = load i32, i32* %r3.global-to-local, align 4
  %v3_12158 = mul i32 %v0_12158, 16777216
  store i32 %v3_12158, i32* %ip.global-to-local, align 4
  %v0_1215c = load i32, i32* %r1.global-to-local, align 4
  %v1_1215c = add i32 %v0_1215c, -4
  %v2_1215c = inttoptr i32 %v1_1215c to i32*
  %v3_1215c = load i32, i32* %v2_1215c, align 4
  store i32 %v3_1215c, i32* %r3.global-to-local, align 4
  store i32 %v1_1215c, i32* %r1.global-to-local, align 4
  %v4_12160 = udiv i32 %v3_1215c, 256
  %v5_12160 = or i32 %v4_12160, %v3_12158
  store i32 %v5_12160, i32* %ip.global-to-local, align 4
  %v2_12164 = add i32 %v1_12164, -4
  %v3_12164 = inttoptr i32 %v2_12164 to i32*
  store i32 %v5_12160, i32* %v3_12164, align 4
  %v4_12164 = load i32, i32* %r0.global-to-local, align 4
  %v5_12164 = add i32 %v4_12164, -4
  store i32 %v5_12164, i32* %r0.global-to-local, align 4
  %v0_12168 = load i32, i32* %r2.global-to-local, align 4
  %v2_12168 = add i32 %v0_12168, -4
  store i32 %v2_12168, i32* %r2.global-to-local, align 4
  %v6_1216c = icmp slt i32 %v0_12168, 4
  br i1 %v6_1216c, label %dec_label_pc_12170.loopexit, label %dec_label_pc_12158

dec_label_pc_12170.loopexit:                      ; preds = %dec_label_pc_12158
  %v4_12168 = sub i32 3, %v0_12168
  %v5_12168 = and i32 %v4_12168, %v0_12168
  %v6_12168 = icmp slt i32 %v5_12168, 0
  %v7_12168 = icmp slt i32 %v2_12168, 0
  store i1 %v6_12168, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12168, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12170

dec_label_pc_12170:                               ; preds = %dec_label_pc_12170.loopexit, %dec_label_pc_1214c
  %v2_11fdc64 = phi i32 [ %v5_12164, %dec_label_pc_12170.loopexit ], [ %v1_12140, %dec_label_pc_1214c ]
  %v0_11fcc60 = phi i32 [ %v2_12168, %dec_label_pc_12170.loopexit ], [ %v2_12150, %dec_label_pc_1214c ]
  %v0_12170 = load i32, i32* %r1.global-to-local, align 4
  %v1_12170 = add i32 %v0_12170, 1
  store i32 %v1_12170, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_12164, { 0, 2, 1 }
  uselistorder i32 %v3_12158, { 1, 0 }
  uselistorder i32 %v2_12150, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_12140, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_12120, { 1, 0 }
  uselistorder i32 %v3_1211c, { 1, 0 }
  uselistorder i32 %v0_12120, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12140, { 3, 2, 1, 0 }
  uselistorder i32 %v5_120f8, { 0, 2, 1 }
  uselistorder i32 %v3_120ec, { 1, 0 }
  uselistorder i32 %v2_120e4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_120d4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_120b4, { 1, 0 }
  uselistorder i32 %v3_120b0, { 1, 0 }
  uselistorder i32 %v0_120b4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_120d4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_1208c, { 0, 2, 1 }
  uselistorder i32 %v3_12080, { 1, 0 }
  uselistorder i32 %v2_12078, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_12068, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_12048, { 1, 0 }
  uselistorder i32 %v3_12044, { 1, 0 }
  uselistorder i32 %v0_12048, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12068, { 3, 2, 1, 0 }
  uselistorder i1 %v5_12110, { 2, 0, 1 }
  uselistorder i32 %v0_12028, { 1, 0 }
  uselistorder i32 %v0_12114, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1206830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_12018, { 2, 1, 0 }
  uselistorder i32 %v0_12018, { 2, 0, 1 }
  uselistorder i32 %v2_12010, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_12010, { 1, 2, 0, 3 }
  uselistorder i32 %v0_12010, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1206831, { 2, 1, 0 }
  uselistorder i32 %v11_11fec, { 1, 0 }
  uselistorder i32 %v7_11fec, { 1, 0 }
  uselistorder i32 %v1_11fcc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_11fcc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_11fd0, { 1, 0 }
  uselistorder i32 %v7_11fc4, { 0, 2, 1 }
  uselistorder i32 %v10_11fc0, { 1, 0 }
  uselistorder i32 %v9_11fb8, { 1, 0, 2 }
  uselistorder i32 %v6_11fb4, { 1, 0 }
  uselistorder i32 %v2_11fac, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_11fac, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_11fbc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_11fa0, { 0, 2, 1 }
  uselistorder i32 %v13_11f9c, { 1, 0 }
  uselistorder i32 %v4_11f98, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_11f98, { 2, 0, 1 }
  uselistorder i32 %v6_11fa0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_11f90, { 0, 2, 1 }
  uselistorder i32 %v16_11f8c, { 1, 0 }
  uselistorder i32 %v4_11f88, { 1, 2, 0 }
  uselistorder i32 %v0_11f98.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_11f90, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_11f7c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_11f78, { 1, 0 }
  uselistorder i32 %v1_11f74, { 1, 0 }
  uselistorder i32 %v10_11f70, { 1, 0 }
  uselistorder i32 %v0_11f70, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11f74, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_11f68, { 0, 2, 1 }
  uselistorder i32 %v2_11f5c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_11f5c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_11f7448, { 1, 2, 0 }
  uselistorder i32 %v1_11f54, { 2, 1, 0 }
  uselistorder i32 %v1_11f4c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_11f44, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_11f40, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_11f3c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_11f3c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_11f28, { 0, 2, 1 }
  uselistorder i32 %v3_11f1c, { 1, 0 }
  uselistorder i32 %v2_11f14, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_11f04, { 1, 0, 3, 2 }
  uselistorder i32 %v8_11ee4, { 1, 0, 2 }
  uselistorder i32 %v5_11ee4, { 1, 0, 2 }
  uselistorder i32 %v2_11ee4, { 1, 0, 2 }
  uselistorder i32 %v3_11ee0, { 1, 0 }
  uselistorder i32 %v0_11ee4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11f04, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_11ebc, { 0, 2, 1 }
  uselistorder i32 %v3_11eb0, { 1, 0 }
  uselistorder i32 %v2_11ea8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_11e98, { 1, 0, 3, 2 }
  uselistorder i32 %v8_11e78, { 1, 0, 2 }
  uselistorder i32 %v5_11e78, { 1, 0, 2 }
  uselistorder i32 %v2_11e78, { 1, 0, 2 }
  uselistorder i32 %v3_11e74, { 1, 0 }
  uselistorder i32 %v0_11e78, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11e98, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_11e50, { 0, 2, 1 }
  uselistorder i32 %v3_11e44, { 1, 0 }
  uselistorder i32 %v2_11e3c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_11e2c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_11e0c, { 1, 0, 2 }
  uselistorder i32 %v5_11e0c, { 1, 0, 2 }
  uselistorder i32 %v2_11e0c, { 1, 0, 2 }
  uselistorder i32 %v3_11e08, { 1, 0 }
  uselistorder i32 %v0_11e0c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11e2c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_11ed4, { 2, 0, 1 }
  uselistorder i32 %v0_11ed8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_11e2c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_11ddc, { 1, 0 }
  uselistorder i32 %v0_11ddc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_11dd4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_11dd4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_11dd4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_11e2c75, { 2, 1, 0 }
  uselistorder i32 %v1_11db4, { 1, 0, 2 }
  uselistorder i32 %v1_11d8c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_11d8c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_11d78, { 1, 0, 2 }
  uselistorder i32 %v6_11d74, { 1, 0 }
  uselistorder i32 %v2_11d6c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_11d6c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_11d7c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_11d64, { 0, 2, 1 }
  uselistorder i32 %v3_11d64, { 3, 0, 1, 2 }
  uselistorder i1 %v0_11d64, { 1, 0 }
  uselistorder i1 %v1_11d64, { 1, 0 }
  uselistorder i32 %v3_11d60, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_11d58, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_11d44, { 1, 2, 0 }
  uselistorder i32 %v12_11d38, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11d2c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11d30, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_11d20, { 0, 2, 1 }
  uselistorder i32 %v2_11d18, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_11d18, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_11d10, { 1, 0 }
  uselistorder i32 %v1_11d08, { 2, 1, 0 }
  uselistorder i32 %v2_11d00, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_11d00, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_11cf0, { 1, 0 }
  uselistorder i32 %v1_11cf0, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_11cf0, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 15, 16, 17, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 25, 26, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 37, 39, 38, 40, 3, 7, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* %r2.global-to-local, { 0, 26, 1, 2, 3, 4, 5, 65, 66, 67, 68, 69, 71, 70, 6, 7, 8, 9, 10, 27, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 28, 29, 60, 30, 31, 32, 33, 34, 61, 35, 36, 37, 38, 39, 62, 40, 41, 42, 43, 44, 63, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 10, 2, 4, 62, 65, 60, 64, 63, 66, 6, 7, 5, 11, 8, 9, 12, 17, 13, 14, 15, 16, 18, 19, 21, 20, 22, 23, 61, 24, 25, 32, 26, 33, 27, 34, 28, 29, 30, 31, 35, 38, 36, 48, 37, 39, 42, 40, 49, 41, 43, 45, 44, 50, 46, 47, 51, 52, 53, 55, 54, 56, 57, 58, 59 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 34, 36, 3, 22, 4, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 16, 17, 18, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 53, 54, 55, 5, 6, 7, 8, 9, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 7, 3, 46, 4, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 24, 5, 25, 6, 27, 0, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 2, 7, 3, 42, 4, 9, 8, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 5, 23, 6, 25, 0, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 2, 7, 3, 48, 4, 9, 8, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 1, 21, 22, 23, 24, 25, 5, 26, 6, 28, 0, 29, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32 31, { 22, 1, 0, 14, 16, 15, 17, 2, 19, 18, 23, 20, 7, 3, 8, 21, 9, 4, 5, 10, 11, 6, 12, 13 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 11, 12, 10, 16, 0, 14, 1, 15, 2, 9, 7, 8, 6, 5, 4, 3, 17, 18, 19, 13 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32* @r5, { 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 0, 508, 509, 146, 147, 148, 149, 150, 151, 382, 383, 384, 385, 386, 387, 388, 389, 419, 420, 421, 422, 423, 424, 433, 434, 435, 442, 443, 444, 445, 436, 437, 438, 439, 440, 441, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 40, 41, 31, 6, 7, 95, 36, 96, 97, 98, 99, 100, 101, 8, 9, 10, 11, 12, 32, 37, 3, 4, 5, 42, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 43, 44, 45, 46, 38, 39, 102, 103, 104, 105, 106, 47, 107, 108, 109, 110, 2, 111, 112, 113, 114, 123, 124, 115, 116, 117, 118, 119, 120, 121, 122, 446, 447, 448, 449, 450, 451, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 1, 145, 152, 153, 154, 155, 156, 157, 163, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 191, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 216, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 263, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 298, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 327, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 357, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 452, 453, 454, 455, 456, 457, 466, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 425, 428, 426, 427, 429, 430, 431, 432 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 11, 12, 13, 0, 1, 17, 4, 14, 5, 15, 6, 16, 18, 19, 20, 7, 21, 8, 22, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 2, 34, 35, 36, 10, 37, 38, 39, 3, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32* @lr, { 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 0, 84, 85, 86, 1, 87, 88, 89, 2, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 44, 45, 46, 47, 52, 53, 54, 55, 7, 56, 4, 5, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 6, 8, 11, 12, 3, 15, 13, 14, 9, 10, 69, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 70, 48, 49, 50, 51, 71, 72, 73 }
  uselistorder i32 27, { 1, 0, 2, 3 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12158, { 2, 0, 1 }
  uselistorder label %dec_label_pc_120ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12080, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12020, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_11fac, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_11f70, { 1, 0 }
  uselistorder label %dec_label_pc_11f5c, { 1, 0 }
  uselistorder label %dec_label_pc_11f1c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11eb0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11e44, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11de4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_11d58, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_11d18, { 1, 0 }
}

define i32 @function_12178(i32 %arg1) local_unnamed_addr {
dec_label_pc_12178:
  ret i32 %arg1
}

define i32 @function_12180(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12180:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_12184 = load i32, i32* @r2, align 4
  %v8_12184 = icmp eq i32 %v0_12184, 8
  store i1 %v8_12184, i1* %cpsr_z.global-to-local, align 1
  %v5_12188 = icmp slt i32 %v0_12184, 8
  br i1 %v5_12188, label %dec_label_pc_121e8, label %dec_label_pc_1218c

dec_label_pc_1218c:                               ; preds = %dec_label_pc_12180
  %v4_1218c = mul i32 %arg2, 256
  %v5_1218c = or i32 %v4_1218c, %arg2
  %v4_12190 = mul i32 %v5_1218c, 65536
  %v5_12190 = or i32 %v4_12190, %v5_1218c
  store i32 %v5_12190, i32* %r1.global-to-local, align 4
  %v1_1219457 = urem i32 %tmp, 4
  %v2_1219458 = icmp eq i32 %v1_1219457, 0
  store i1 %v2_1219458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1219458, label %dec_label_pc_121a4, label %bb

bb:                                               ; preds = %dec_label_pc_1218c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1218c ]
  %v3_1219859 = phi i32 [ %v6_12198, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1218c ]
  %v4_12198 = inttoptr i32 %v3_1219859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_12198, align 1
  %v5_12198 = load i32, i32* %r3.global-to-local, align 4
  %v6_12198 = add i32 %v5_12198, 1
  store i32 %v6_12198, i32* %r3.global-to-local, align 4
  %v0_1219c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_121a8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1219c.pr, label %dec_label_pc_121a4, label %.thread

.thread:                                          ; preds = %bb
  %v2_1219c = add i32 %v0_121a8.pr.pre, -1
  store i32 %v2_1219c, i32* @r2, align 4
  %v1_12194 = urem i32 %v6_12198, 4
  %v2_12194 = icmp eq i32 %v1_12194, 0
  store i1 %v2_12194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12194, label %dec_label_pc_121a4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_12198.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_12198.pre to i8
  br label %bb

dec_label_pc_121a4:                               ; preds = %.thread, %bb, %dec_label_pc_1218c
  %v0_121b028 = phi i32 [ %tmp, %dec_label_pc_1218c ], [ %v6_12198, %bb ], [ %v6_12198, %.thread ]
  %v0_121a8.pr = phi i32 [ %v0_12184, %dec_label_pc_1218c ], [ %v0_121a8.pr.pre, %bb ], [ %v2_1219c, %.thread ]
  %v0_121a4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_121a4, i32* %ip.global-to-local, align 4
  %v8_121a810 = icmp eq i32 %v0_121a8.pr, 8
  store i1 %v8_121a810, i1* %cpsr_z.global-to-local, align 1
  %v5_121ac11 = icmp slt i32 %v0_121a8.pr, 8
  br i1 %v5_121ac11, label %dec_label_pc_121e8, label %dec_label_pc_121b0.preheader

dec_label_pc_121b0.preheader:                     ; preds = %dec_label_pc_121a4
  %v1_121b046 = inttoptr i32 %v0_121b028 to i32*
  store i32 %v0_121a4, i32* %v1_121b046, align 4
  %v3_121b047 = add i32 %v0_121b028, 4
  %v4_121b048 = inttoptr i32 %v3_121b047 to i32*
  %v5_121b049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_121b049, i32* %v4_121b048, align 4
  %v6_121b050 = add i32 %v0_121b028, 8
  store i32 %v6_121b050, i32* %r3.global-to-local, align 4
  %v0_121b451 = load i32, i32* @r2, align 4
  %v1_121b452 = add i32 %v0_121b451, -8
  store i32 %v1_121b452, i32* %r2.global-to-local, align 4
  %v5_121bc53 = icmp slt i32 %v1_121b452, 8
  br i1 %v5_121bc53, label %dec_label_pc_121b0.dec_label_pc_121e8.loopexit_crit_edge, label %dec_label_pc_121c0

dec_label_pc_121c0:                               ; preds = %dec_label_pc_121b0.preheader, %dec_label_pc_121a8.dec_label_pc_121b0_crit_edge
  %v6_121b055 = phi i32 [ %v6_121b0, %dec_label_pc_121a8.dec_label_pc_121b0_crit_edge ], [ %v6_121b050, %dec_label_pc_121b0.preheader ]
  %v0_121b054 = phi i32 [ %v12_121dc, %dec_label_pc_121a8.dec_label_pc_121b0_crit_edge ], [ %v0_121b028, %dec_label_pc_121b0.preheader ]
  %v1_121c0 = inttoptr i32 %v6_121b055 to i32*
  %v2_121c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_121c0, i32* %v1_121c0, align 4
  %v3_121c0 = add i32 %v0_121b054, 12
  %v4_121c0 = inttoptr i32 %v3_121c0 to i32*
  %v5_121c0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_121c0, i32* %v4_121c0, align 4
  %v6_121c0 = add i32 %v0_121b054, 16
  store i32 %v6_121c0, i32* %r3.global-to-local, align 4
  %v0_121c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_121c4 = add i32 %v0_121c4, -8
  store i32 %v1_121c4, i32* %r2.global-to-local, align 4
  %v5_121cc = icmp slt i32 %v1_121c4, 8
  br i1 %v5_121cc, label %dec_label_pc_121c0.dec_label_pc_121e8.loopexit_crit_edge, label %dec_label_pc_121d0

dec_label_pc_121d0:                               ; preds = %dec_label_pc_121c0
  %v1_121d0 = inttoptr i32 %v6_121c0 to i32*
  %v2_121d0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_121d0, i32* %v1_121d0, align 4
  %v3_121d0 = add i32 %v0_121b054, 20
  %v4_121d0 = inttoptr i32 %v3_121d0 to i32*
  %v5_121d0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_121d0, i32* %v4_121d0, align 4
  %v6_121d0 = add i32 %v0_121b054, 24
  store i32 %v6_121d0, i32* %r3.global-to-local, align 4
  %v0_121d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_121d4 = add i32 %v0_121d4, -8
  store i32 %v1_121d4, i32* %r2.global-to-local, align 4
  %v5_121dc = icmp slt i32 %v1_121d4, 8
  br i1 %v5_121dc, label %dec_label_pc_121d0.dec_label_pc_121e8.loopexit_crit_edge, label %dec_label_pc_121a8

dec_label_pc_121a8:                               ; preds = %dec_label_pc_121d0
  %v7_121dc = inttoptr i32 %v6_121d0 to i32*
  %v8_121dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_121dc, i32* %v7_121dc, align 4
  %v9_121dc = add i32 %v0_121b054, 28
  %v10_121dc = inttoptr i32 %v9_121dc to i32*
  %v11_121dc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_121dc, i32* %v10_121dc, align 4
  %v12_121dc = add i32 %v0_121b054, 32
  store i32 %v12_121dc, i32* %r3.global-to-local, align 4
  %v6_121e0 = load i32, i32* %r2.global-to-local, align 4
  %v7_121e0 = add i32 %v6_121e0, -8
  store i32 %v7_121e0, i32* %r2.global-to-local, align 4
  %v5_121ac = icmp slt i32 %v7_121e0, 8
  br i1 %v5_121ac, label %dec_label_pc_121a8.dec_label_pc_121e8.loopexit_crit_edge, label %dec_label_pc_121a8.dec_label_pc_121b0_crit_edge

dec_label_pc_121a8.dec_label_pc_121b0_crit_edge:  ; preds = %dec_label_pc_121a8
  %v2_121b0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_121b0 = inttoptr i32 %v12_121dc to i32*
  store i32 %v2_121b0.pre, i32* %v1_121b0, align 4
  %v3_121b0 = add i32 %v0_121b054, 36
  %v4_121b0 = inttoptr i32 %v3_121b0 to i32*
  %v5_121b0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_121b0, i32* %v4_121b0, align 4
  %v6_121b0 = add i32 %v0_121b054, 40
  store i32 %v6_121b0, i32* %r3.global-to-local, align 4
  %v0_121b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_121b4 = add i32 %v0_121b4, -8
  store i32 %v1_121b4, i32* %r2.global-to-local, align 4
  %v5_121bc = icmp slt i32 %v1_121b4, 8
  br i1 %v5_121bc, label %dec_label_pc_121b0.dec_label_pc_121e8.loopexit_crit_edge, label %dec_label_pc_121c0

dec_label_pc_121a8.dec_label_pc_121e8.loopexit_crit_edge: ; preds = %dec_label_pc_121a8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_121e8

dec_label_pc_121b0.dec_label_pc_121e8.loopexit_crit_edge: ; preds = %dec_label_pc_121a8.dec_label_pc_121b0_crit_edge, %dec_label_pc_121b0.preheader
  %v1_121b4.lcssa = phi i32 [ %v1_121b452, %dec_label_pc_121b0.preheader ], [ %v1_121b4, %dec_label_pc_121a8.dec_label_pc_121b0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_121e8

dec_label_pc_121c0.dec_label_pc_121e8.loopexit_crit_edge: ; preds = %dec_label_pc_121c0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_121e8

dec_label_pc_121d0.dec_label_pc_121e8.loopexit_crit_edge: ; preds = %dec_label_pc_121d0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_121e8

dec_label_pc_121e8:                               ; preds = %dec_label_pc_121a4, %dec_label_pc_121a8.dec_label_pc_121e8.loopexit_crit_edge, %dec_label_pc_121b0.dec_label_pc_121e8.loopexit_crit_edge, %dec_label_pc_121c0.dec_label_pc_121e8.loopexit_crit_edge, %dec_label_pc_121d0.dec_label_pc_121e8.loopexit_crit_edge, %dec_label_pc_12180
  %v0_121f0 = phi i32 [ %v0_12184, %dec_label_pc_12180 ], [ %v1_121d4, %dec_label_pc_121d0.dec_label_pc_121e8.loopexit_crit_edge ], [ %v1_121c4, %dec_label_pc_121c0.dec_label_pc_121e8.loopexit_crit_edge ], [ %v1_121b4.lcssa, %dec_label_pc_121b0.dec_label_pc_121e8.loopexit_crit_edge ], [ %v7_121e0, %dec_label_pc_121a8.dec_label_pc_121e8.loopexit_crit_edge ], [ %v0_121a8.pr, %dec_label_pc_121a4 ]
  %v2_121e8 = icmp eq i32 %v0_121f0, 0
  store i1 %v2_121e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_121e8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_121e8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_121e8
  %v1_121f0 = sub i32 7, %v0_121f0
  store i32 %v1_121f0, i32* %r2.global-to-local, align 4
  %v3_121f4 = mul i32 %v1_121f0, 4
  %v4_121f4 = add i32 %v3_121f4, ptrtoint (i32* @global_var_121fc.702 to i32)
  call void @__pseudo_branch(i32 %v4_121f4)
  %v0_121fc = load i32, i32* %r1.global-to-local, align 4
  %v1_121fc = trunc i32 %v0_121fc to i8
  %v2_121fc = load i32, i32* %r3.global-to-local, align 4
  %v3_121fc = inttoptr i32 %v2_121fc to i8*
  store i8 %v1_121fc, i8* %v3_121fc, align 1
  %v4_121fc = load i32, i32* %r3.global-to-local, align 4
  %v5_121fc = add i32 %v4_121fc, 1
  store i32 %v5_121fc, i32* %r3.global-to-local, align 4
  %v0_12200 = load i32, i32* %r1.global-to-local, align 4
  %v1_12200 = trunc i32 %v0_12200 to i8
  %v3_12200 = inttoptr i32 %v5_121fc to i8*
  store i8 %v1_12200, i8* %v3_12200, align 1
  %v4_12200 = load i32, i32* %r3.global-to-local, align 4
  %v5_12200 = add i32 %v4_12200, 1
  store i32 %v5_12200, i32* %r3.global-to-local, align 4
  %v0_12204 = load i32, i32* %r1.global-to-local, align 4
  %v1_12204 = trunc i32 %v0_12204 to i8
  %v3_12204 = inttoptr i32 %v5_12200 to i8*
  store i8 %v1_12204, i8* %v3_12204, align 1
  %v4_12204 = load i32, i32* %r3.global-to-local, align 4
  %v5_12204 = add i32 %v4_12204, 1
  store i32 %v5_12204, i32* %r3.global-to-local, align 4
  %v0_12208 = load i32, i32* %r1.global-to-local, align 4
  %v1_12208 = trunc i32 %v0_12208 to i8
  %v3_12208 = inttoptr i32 %v5_12204 to i8*
  store i8 %v1_12208, i8* %v3_12208, align 1
  %v4_12208 = load i32, i32* %r3.global-to-local, align 4
  %v5_12208 = add i32 %v4_12208, 1
  store i32 %v5_12208, i32* %r3.global-to-local, align 4
  %v0_1220c = load i32, i32* %r1.global-to-local, align 4
  %v1_1220c = trunc i32 %v0_1220c to i8
  %v3_1220c = inttoptr i32 %v5_12208 to i8*
  store i8 %v1_1220c, i8* %v3_1220c, align 1
  %v4_1220c = load i32, i32* %r3.global-to-local, align 4
  %v5_1220c = add i32 %v4_1220c, 1
  store i32 %v5_1220c, i32* %r3.global-to-local, align 4
  %v0_12210 = load i32, i32* %r1.global-to-local, align 4
  %v1_12210 = trunc i32 %v0_12210 to i8
  %v3_12210 = inttoptr i32 %v5_1220c to i8*
  store i8 %v1_12210, i8* %v3_12210, align 1
  %v4_12210 = load i32, i32* %r3.global-to-local, align 4
  %v5_12210 = add i32 %v4_12210, 1
  store i32 %v5_12210, i32* %r3.global-to-local, align 4
  %v0_12214 = load i32, i32* %r1.global-to-local, align 4
  %v1_12214 = trunc i32 %v0_12214 to i8
  %v3_12214 = inttoptr i32 %v5_12210 to i8*
  store i8 %v1_12214, i8* %v3_12214, align 1
  %v4_12214 = load i32, i32* %r3.global-to-local, align 4
  %v5_12214 = add i32 %v4_12214, 1
  store i32 %v5_12214, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_121b0, { 1, 0 }
  uselistorder i32 %v12_121dc, { 1, 2, 0 }
  uselistorder i32 %v0_121b054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_121a8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_12198, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1218c, { 1, 0 }
  uselistorder i32 %v0_12184, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 0, 8, 7, 5, 9 }
  uselistorder i32 7, { 106, 43, 44, 99, 7, 49, 2, 9, 45, 10, 46, 11, 47, 8, 48, 0, 12, 50, 13, 51, 14, 52, 15, 53, 16, 54, 17, 55, 18, 56, 19, 57, 20, 58, 21, 59, 22, 60, 23, 61, 24, 62, 25, 63, 26, 64, 27, 65, 28, 66, 29, 67, 30, 68, 31, 69, 32, 70, 33, 71, 34, 72, 35, 73, 36, 74, 37, 75, 76, 77, 78, 38, 79, 80, 81, 82, 3, 83, 84, 85, 86, 39, 87, 4, 88, 40, 89, 90, 5, 91, 92, 6, 93, 94, 95, 96, 97, 41, 98, 101, 102, 103, 104, 42, 105, 1, 100 }
  uselistorder i1 false, { 18, 17, 16, 19, 24, 25, 26, 31, 13, 23, 32, 33, 20, 21, 22, 34, 12, 35, 36, 2, 1, 10, 3, 28, 11, 9, 14, 30, 4, 5, 6, 27, 0, 15, 7, 8, 29, 37 }
  uselistorder i32 40, { 0, 1, 3, 5, 6, 7, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 2 }
  uselistorder i32 24, { 0, 1, 35, 36, 14, 11, 59, 39, 64, 40, 41, 52, 56, 37, 38, 60, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 61, 55, 62, 57, 58, 65, 66, 67, 63, 68, 69, 2, 70, 15, 16, 3, 71, 17, 18, 4, 72, 12, 73, 74, 75, 19, 20, 5, 21, 22, 76, 23, 24, 6, 13, 77, 25, 7, 8, 26, 78, 27, 9, 79, 80, 81, 28, 29, 82, 30, 85, 31, 10, 86, 32, 33, 87, 83, 34, 84 }
  uselistorder i32 20, { 0, 87, 2, 88, 89, 1, 3, 90, 18, 20, 4, 21, 5, 22, 17, 15, 23, 19, 24, 25, 26, 29, 27, 6, 28, 30, 31, 32, 33, 35, 36, 34, 7, 37, 38, 39, 40, 41, 42, 45, 46, 43, 8, 44, 47, 48, 49, 50, 51, 52, 55, 56, 53, 9, 54, 57, 58, 59, 60, 63, 64, 61, 10, 62, 65, 66, 67, 68, 69, 70, 73, 71, 16, 72, 74, 75, 76, 79, 12, 77, 11, 78, 80, 82, 85, 14, 83, 13, 84, 86, 81 }
  uselistorder i32 16, { 24, 32, 33, 34, 147, 35, 148, 149, 36, 150, 151, 37, 152, 153, 154, 155, 156, 157, 4, 5, 6, 7, 8, 23, 9, 10, 0, 11, 12, 45, 66, 46, 64, 65, 67, 69, 70, 71, 25, 63, 13, 14, 22, 61, 15, 72, 16, 47, 68, 17, 40, 39, 38, 73, 41, 74, 42, 48, 49, 26, 75, 76, 50, 77, 51, 78, 52, 79, 80, 81, 27, 82, 83, 84, 85, 86, 87, 88, 30, 89, 90, 91, 54, 92, 43, 53, 93, 94, 55, 95, 96, 97, 18, 98, 99, 1, 56, 100, 101, 102, 57, 103, 104, 105, 106, 107, 2, 58, 108, 109, 19, 110, 62, 20, 111, 59, 112, 113, 114, 21, 31, 115, 60, 116, 117, 3, 44, 118, 119, 120, 121, 122, 123, 28, 124, 125, 126, 127, 129, 128, 130, 131, 133, 134, 135, 136, 137, 29, 138, 139, 140, 141, 142, 144, 143, 145, 146, 132 }
  uselistorder i32 -8, { 17, 14, 15, 16, 5, 18, 19, 20, 21, 22, 23, 13, 12, 6, 11, 10, 9, 8, 24, 25, 26, 27, 7, 28, 0, 1, 3, 2, 4 }
  uselistorder i32 4, { 124, 40, 5, 6, 70, 61, 62, 7, 374, 63, 375, 46, 8, 9, 64, 376, 65, 377, 378, 379, 380, 66, 381, 382, 383, 384, 67, 385, 386, 387, 388, 389, 10, 390, 391, 392, 393, 394, 68, 395, 45, 396, 397, 398, 399, 400, 401, 11, 12, 69, 402, 403, 404, 405, 406, 407, 125, 126, 127, 47, 128, 129, 346, 348, 347, 344, 345, 311, 312, 313, 314, 349, 350, 351, 352, 334, 335, 336, 353, 354, 130, 131, 132, 133, 13, 14, 53, 15, 16, 54, 355, 356, 170, 17, 18, 357, 358, 48, 174, 83, 175, 200, 201, 194, 195, 202, 203, 176, 177, 172, 173, 178, 179, 85, 180, 181, 182, 86, 183, 87, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 84, 197, 198, 199, 196, 55, 204, 205, 71, 88, 19, 206, 20, 207, 208, 21, 22, 209, 210, 42, 211, 41, 216, 89, 217, 90, 218, 91, 219, 92, 220, 93, 221, 94, 222, 95, 223, 96, 224, 97, 225, 98, 226, 99, 227, 100, 228, 101, 229, 102, 230, 103, 231, 104, 232, 105, 234, 106, 235, 107, 236, 237, 233, 212, 108, 213, 214, 215, 238, 51, 50, 49, 239, 109, 23, 24, 25, 26, 27, 28, 240, 43, 241, 44, 242, 243, 244, 0, 110, 245, 134, 246, 247, 248, 249, 135, 136, 112, 250, 52, 29, 111, 252, 72, 253, 254, 137, 255, 256, 138, 139, 257, 113, 258, 73, 259, 260, 140, 141, 261, 142, 262, 263, 143, 144, 56, 264, 114, 265, 74, 266, 267, 268, 269, 270, 271, 115, 75, 272, 273, 145, 274, 275, 276, 277, 146, 147, 2, 278, 116, 279, 76, 280, 281, 282, 148, 283, 284, 149, 150, 3, 57, 285, 117, 287, 77, 288, 289, 290, 291, 151, 152, 292, 293, 294, 153, 295, 296, 118, 297, 4, 298, 78, 299, 119, 300, 301, 302, 154, 303, 304, 305, 306, 307, 155, 156, 120, 308, 58, 79, 309, 80, 310, 359, 360, 157, 361, 362, 363, 121, 364, 122, 365, 366, 367, 368, 158, 159, 123, 369, 59, 370, 81, 371, 82, 373, 160, 315, 316, 30, 161, 317, 318, 31, 162, 319, 320, 32, 163, 60, 321, 322, 33, 323, 164, 324, 325, 34, 165, 326, 327, 35, 166, 328, 329, 36, 167, 330, 331, 37, 168, 332, 333, 38, 337, 169, 338, 339, 340, 341, 39, 342, 343, 1, 372, 286, 251, 171 }
  uselistorder i32 65536, { 4, 6, 5, 11, 7, 12, 8, 13, 9, 14, 10, 15, 16, 17, 21, 18, 22, 19, 23, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1, 33, 2, 34, 0, 3, 35, 36, 37, 38, 39, 42, 40, 41, 43, 44, 45, 50, 51, 52, 53, 46, 47, 48, 49, 54, 57, 58, 59, 55, 56, 60, 61, 62, 65, 66, 67, 63, 64, 68, 70, 69, 72, 73, 71, 74, 75, 76, 78, 79, 80, 77, 81, 82, 85, 86, 87, 83, 84, 88, 110, 90, 89, 91, 93, 92, 95, 94, 96, 97, 98, 100, 101, 102, 99, 103, 104, 105, 107, 108, 109, 106 }
  uselistorder i32* @r2, { 0, 61, 3, 62, 63, 64, 5, 65, 1, 66, 72, 73, 74, 67, 68, 36, 40, 41, 44, 42, 43, 37, 38, 39, 24, 45, 12, 6, 7, 69, 70, 71, 8, 46, 47, 48, 49, 2, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 13, 9, 10, 11, 16, 17, 14, 15, 18, 19, 20, 21, 22, 23, 4, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_121e8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_121c0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_12220() local_unnamed_addr {
dec_label_pc_12220:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_12220 = load i32, i32* @r0, align 4
  %v2_12220 = icmp eq i32 %v0_12220, 0
  %v3_12224 = load i32, i32* @r4, align 4
  store i32 %v3_12224, i32* %stack_var_-20, align 4
  %v0_12228 = load i32, i32* @r1, align 4
  br i1 %v2_12220, label %dec_label_pc_12300, label %dec_label_pc_1223c.lr.ph

dec_label_pc_1223c:                               ; preds = %dec_label_pc_1223c.lr.ph, %dec_label_pc_122c0
  %v1_122c0 = phi i32 [ 0, %dec_label_pc_1223c.lr.ph ], [ %v5_122c0, %dec_label_pc_122c0 ]
  %v0_122c4 = phi i32 [ 1, %dec_label_pc_1223c.lr.ph ], [ %v1_122c4, %dec_label_pc_122c0 ]
  %v0_12244 = phi i32 [ %v0_12220, %dec_label_pc_1223c.lr.ph ], [ %v0_1224425, %dec_label_pc_122c0 ]
  %v1_12244 = inttoptr i32 %v0_12244 to i8*
  %v2_12244 = load i8, i8* %v1_12244, align 1
  %v3_12244 = zext i8 %v2_12244 to i32
  %v3_12248 = mul nuw nsw i32 %v3_12244, 2
  %v4_12248 = add i32 %v3_12248, %v2_12240.pre
  %v5_12248 = inttoptr i32 %v4_12248 to i8*
  %v6_12248 = load i8, i8* %v5_12248, align 1
  %v1_1224c = and i8 %v6_12248, 8
  %v2_1224c = icmp eq i8 %v1_1224c, 0
  br i1 %v2_1224c, label %dec_label_pc_12300, label %dec_label_pc_12254

dec_label_pc_12254:                               ; preds = %dec_label_pc_1223c
  br label %dec_label_pc_12274

dec_label_pc_1225c:                               ; preds = %dec_label_pc_12274
  %v3_12260 = mul i32 %v0_122c0, 10
  %v4_12260 = add i32 %v3_12274, %v3_12260
  %v1_12264 = add i32 %v4_12260, -48
  %v8_1226c = icmp sgt i32 %v1_12264, 255
  br i1 %v8_1226c, label %dec_label_pc_12300, label %dec_label_pc_12270

dec_label_pc_12270:                               ; preds = %dec_label_pc_1225c
  %v1_12270 = add i32 %v0_122b0, 1
  store i32 %v1_12270, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12274

dec_label_pc_12274:                               ; preds = %dec_label_pc_12254, %dec_label_pc_12270
  %v0_122c0 = phi i32 [ 0, %dec_label_pc_12254 ], [ %v1_12264, %dec_label_pc_12270 ]
  %v0_122b0 = phi i32 [ %v0_12244, %dec_label_pc_12254 ], [ %v1_12270, %dec_label_pc_12270 ]
  %v1_12274 = inttoptr i32 %v0_122b0 to i8*
  %v2_12274 = load i8, i8* %v1_12274, align 1
  %v3_12274 = zext i8 %v2_12274 to i32
  %v2_12278 = mul nuw nsw i32 %v3_12274, 2
  %v2_1227c = add i32 %v2_12278, %v2_12240.pre
  %v3_12280 = inttoptr i32 %v2_1227c to i8*
  %v4_12280 = load i8, i8* %v3_12280, align 1
  %v6_12280 = zext i8 %v4_12280 to i32
  %v1_1228c = and i32 %v6_12280, 8
  %v2_1228c = icmp eq i32 %v1_1228c, 0
  br i1 %v2_1228c, label %dec_label_pc_12294, label %dec_label_pc_1225c

dec_label_pc_12294:                               ; preds = %dec_label_pc_12274
  %v8_12298 = icmp sgt i32 %v0_122c4, 3
  br i1 %v8_12298, label %dec_label_pc_122ac, label %dec_label_pc_1229c

dec_label_pc_1229c:                               ; preds = %dec_label_pc_12294
  %v7_1229c = icmp eq i8 %v2_12274, 46
  br i1 %v7_1229c, label %dec_label_pc_122a4, label %dec_label_pc_12300

dec_label_pc_122a4:                               ; preds = %dec_label_pc_1229c
  %v1_122a4 = add i32 %v0_122b0, 1
  store i32 %v1_122a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_122c0

dec_label_pc_122ac:                               ; preds = %dec_label_pc_12294
  %v2_122ac = icmp eq i8 %v2_12274, 0
  %v1_122b0 = add i32 %v0_122b0, 1
  store i32 %v1_122b0, i32* %r0.global-to-local, align 4
  br i1 %v2_122ac, label %dec_label_pc_122c0, label %dec_label_pc_122b8

dec_label_pc_122b8:                               ; preds = %dec_label_pc_122ac
  %v1_122b8 = and i32 %v6_12280, 32
  %v2_122b8 = icmp eq i32 %v1_122b8, 0
  br i1 %v2_122b8, label %dec_label_pc_12300, label %dec_label_pc_122c0

dec_label_pc_122c0:                               ; preds = %dec_label_pc_122b8, %dec_label_pc_122ac, %dec_label_pc_122a4
  %v0_1224425 = phi i32 [ %v1_122b0, %dec_label_pc_122b8 ], [ %v1_122b0, %dec_label_pc_122ac ], [ %v1_122a4, %dec_label_pc_122a4 ]
  %v4_122c0 = mul i32 %v1_122c0, 256
  %v5_122c0 = or i32 %v0_122c0, %v4_122c0
  %v1_122c4 = add nuw nsw i32 %v0_122c4, 1
  %v7_122cc = icmp slt i32 %v1_122c4, 5
  br i1 %v7_122cc, label %dec_label_pc_1223c, label %dec_label_pc_122d0

dec_label_pc_1223c.lr.ph:                         ; preds = %dec_label_pc_12220
  %v2_12240.pre = load i32, i32* bitcast (i32** @global_var_1b174.704 to i32*), align 4
  br label %dec_label_pc_1223c

dec_label_pc_122d0:                               ; preds = %dec_label_pc_122c0
  %v2_122d0 = icmp eq i32 %v0_12228, 0
  br i1 %v2_122d0, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_122d0
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_122d0
  %v2_122d8 = and i32 %v5_122c0, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v2_122d4 = udiv i32 %v5_122c0, 256
  %v4_122dc = and i32 %v2_122d4, 65280
  %v4_122e0 = mul i32 %v2_122d8, 256
  %v5_122e4 = udiv i32 %v5_122c0, 16777216
  %v6_122e4 = or i32 %v4_122dc, %v5_122e4
  %v5_122e8 = mul i32 %v0_122c0, 16777216
  %v6_122e8 = or i32 %v4_122e0, %v5_122e8
  %v3_122ec = or i32 %v6_122e4, %v6_122e8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_122f8 = inttoptr i32 %v0_12228 to i32*
  store i32 %v3_122ec, i32* %v3_122f8, align 4
  %v2_122fc.pre = load i32, i32* %stack_var_-20, align 4
  %v17_122fc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_122fc = phi i32 [ 1, %bb ], [ %v17_122fc.pre, %bb40 ]
  %v2_122fc = phi i32 [ %v3_12224, %bb ], [ %v2_122fc.pre, %bb40 ]
  store i32 %v2_122fc, i32* @r4, align 4
  ret i32 %v17_122fc

dec_label_pc_12300:                               ; preds = %dec_label_pc_1229c, %dec_label_pc_122b8, %dec_label_pc_1223c, %dec_label_pc_1225c, %dec_label_pc_12220
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_12224, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_12240.pre, { 1, 0 }
  uselistorder i32 %v1_122c4, { 1, 0 }
  uselistorder i32 %v0_122b0, { 0, 1, 3, 2 }
  uselistorder i32 %v3_12224, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 27, 26, 30, 28, 31, 29, 33, 32, 37, 34, 36, 35, 38, 40, 39, 42, 41, 44, 43, 46, 45, 47, 53, 48, 54, 49, 55, 50, 56, 57, 51, 58, 52, 60, 59, 62, 61, 65, 63, 66, 64, 68, 67, 70, 69, 71, 73, 72, 74, 77, 75, 78, 76, 79, 81, 80, 82, 83, 85, 84, 86, 91, 87, 92, 88, 93, 89, 94, 90, 96, 95, 98, 97, 99, 101, 100, 103, 102, 104, 107, 108, 105, 109, 106, 110, 112, 111, 113, 116, 114, 115, 118, 117, 119, 121, 120, 126, 122, 127, 123, 128, 125, 129, 130, 131, 124, 132, 134, 133, 139, 135, 140, 136, 141, 138, 142, 143, 144, 137, 146, 145, 147 }
  uselistorder i32 65280, { 0, 21, 2, 3, 20, 1, 4, 22, 5, 6, 23, 7, 24, 8, 9, 10, 11, 12, 13, 15, 16, 25, 14, 26, 17, 27, 28, 29, 18, 30, 31, 19 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.25 to i32), { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15 }
  uselistorder i32 5, { 14, 56, 15, 5, 2, 17, 52, 18, 53, 19, 54, 16, 55, 3, 0, 20, 57, 21, 58, 22, 59, 23, 60, 24, 61, 25, 62, 26, 63, 27, 64, 28, 65, 29, 66, 30, 67, 31, 68, 32, 69, 33, 70, 34, 71, 35, 72, 36, 73, 37, 74, 38, 75, 39, 76, 40, 77, 41, 78, 42, 79, 43, 80, 44, 81, 45, 82, 46, 83, 47, 84, 48, 85, 49, 50, 86, 87, 88, 89, 6, 90, 91, 92, 93, 7, 94, 95, 96, 97, 98, 99, 100, 101, 8, 102, 103, 51, 104, 9, 105, 106, 107, 10, 108, 109, 110, 111, 11, 112, 113, 114, 115, 116, 117, 118, 12, 119, 124, 125, 126, 127, 128, 129, 13, 130, 4, 120, 121, 1, 122, 123 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 27, 28, 32, 35, 36, 37, 33, 34, 38, 39, 40, 41, 42, 387, 388, 43, 44, 45, 46, 47, 48, 49, 389, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 64, 65, 69, 68, 67, 70, 385, 390, 75, 71, 74, 72, 73, 383, 76, 77, 78, 81, 80, 79, 82, 84, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 93, 95, 96, 97, 101, 107, 102, 98, 99, 103, 104, 105, 108, 100, 109, 110, 106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 123, 126, 129, 130, 128, 127, 131, 134, 133, 132, 135, 141, 138, 142, 139, 136, 143, 137, 144, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 161, 163, 164, 165, 176, 171, 166, 177, 172, 178, 179, 173, 180, 174, 167, 168, 169, 181, 170, 182, 175, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 209, 219, 215, 216, 211, 212, 220, 217, 213, 221, 218, 214, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 238, 237, 240, 247, 243, 248, 249, 244, 241, 250, 245, 242, 251, 246, 252, 253, 254, 255, 256, 257, 258, 261, 262, 259, 263, 260, 268, 264, 266, 265, 267, 269, 270, 271, 272, 273, 276, 277, 280, 278, 274, 281, 279, 275, 284, 283, 282, 384, 391, 285, 286, 292, 287, 293, 288, 289, 294, 290, 295, 296, 291, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 316, 318, 319, 323, 324, 331, 325, 326, 332, 327, 320, 321, 333, 328, 322, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 348, 350, 351, 355, 356, 363, 357, 358, 364, 359, 352, 353, 365, 360, 354, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386 }
  uselistorder i32 32, { 44, 34, 36, 37, 35, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 40, 18, 17, 19, 21, 20, 23, 22, 24, 25, 27, 26, 38, 39, 41, 42, 28, 43, 29, 30, 0, 31, 1, 2, 32, 33 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 3, { 33, 62, 63, 156, 64, 65, 66, 67, 68, 69, 157, 3, 142, 145, 146, 0, 70, 20, 71, 21, 147, 72, 34, 22, 23, 73, 37, 74, 1, 75, 76, 77, 78, 35, 18, 79, 80, 81, 82, 38, 83, 39, 84, 40, 85, 41, 86, 42, 87, 43, 88, 24, 89, 44, 90, 36, 91, 45, 46, 47, 48, 49, 50, 92, 93, 94, 95, 96, 97, 51, 98, 52, 99, 53, 25, 100, 101, 102, 103, 104, 5, 4, 54, 26, 105, 106, 107, 108, 109, 110, 111, 7, 6, 55, 112, 27, 113, 114, 115, 116, 117, 118, 119, 120, 9, 8, 56, 121, 28, 122, 123, 124, 125, 126, 11, 10, 57, 127, 29, 128, 129, 130, 131, 58, 132, 13, 12, 59, 133, 30, 134, 135, 136, 137, 138, 139, 15, 14, 60, 140, 31, 141, 148, 149, 150, 151, 152, 153, 17, 16, 61, 154, 32, 155, 19, 143, 2, 144 }
  uselistorder i32 8, { 120, 26, 27, 24, 25, 16, 17, 20, 21, 28, 161, 162, 29, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 30, 179, 180, 153, 152, 150, 151, 136, 137, 138, 154, 155, 156, 144, 145, 146, 6, 7, 8, 71, 18, 9, 10, 15, 11, 36, 31, 12, 13, 14, 72, 38, 73, 39, 74, 40, 75, 37, 76, 23, 77, 78, 79, 80, 82, 41, 83, 42, 84, 43, 85, 44, 86, 45, 87, 46, 88, 47, 89, 48, 90, 49, 91, 50, 92, 51, 93, 52, 94, 53, 95, 54, 96, 55, 97, 56, 98, 57, 99, 58, 100, 59, 101, 60, 102, 61, 103, 62, 104, 63, 105, 64, 106, 65, 107, 66, 108, 109, 81, 110, 22, 70, 32, 111, 112, 113, 114, 115, 19, 116, 117, 118, 119, 3, 121, 122, 123, 4, 124, 125, 126, 127, 128, 129, 130, 5, 131, 132, 133, 134, 135, 157, 158, 159, 160, 139, 33, 140, 34, 141, 35, 142, 67, 143, 69, 147, 148, 68, 149, 0, 1, 2 }
  uselistorder i32 255, { 2, 6, 7, 3, 8, 4, 9, 5, 10, 0, 1 }
  uselistorder i32 10, { 7, 29, 30, 0, 31, 8, 34, 36, 9, 35, 10, 37, 11, 38, 2, 39, 40, 32, 12, 41, 33, 42, 13, 43, 14, 44, 15, 45, 16, 46, 17, 47, 18, 48, 19, 49, 20, 50, 21, 51, 22, 52, 23, 53, 24, 54, 55, 25, 1, 26, 56, 57, 58, 59, 60, 61, 62, 63, 64, 3, 65, 66, 67, 4, 68, 69, 70, 27, 71, 5, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 77, 6, 83, 28 }
  uselistorder i8 0, { 3, 0, 12, 2, 13, 14, 4, 15, 16, 17, 18, 7, 19, 1, 6, 5, 8, 20, 21, 22, 23, 24, 10, 25, 26, 9, 27, 28, 29, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32 2, { 4, 120, 230, 231, 51, 232, 233, 45, 234, 44, 235, 43, 72, 73, 157, 74, 158, 75, 159, 236, 48, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 121, 14, 15, 16, 17, 18, 77, 78, 76, 46, 47, 79, 140, 80, 82, 124, 84, 125, 85, 126, 86, 127, 83, 128, 134, 57, 123, 58, 129, 59, 130, 60, 131, 61, 132, 62, 133, 63, 139, 135, 136, 137, 138, 53, 87, 141, 19, 20, 142, 144, 145, 88, 146, 49, 122, 89, 147, 90, 148, 91, 149, 150, 81, 151, 21, 92, 143, 96, 152, 94, 153, 95, 154, 93, 97, 155, 22, 23, 24, 98, 156, 99, 100, 101, 54, 103, 104, 102, 218, 219, 160, 161, 162, 163, 164, 165, 166, 105, 167, 64, 168, 169, 170, 171, 172, 106, 65, 173, 174, 175, 176, 177, 178, 179, 107, 180, 66, 181, 182, 108, 183, 109, 110, 184, 185, 186, 187, 188, 189, 190, 191, 1, 25, 26, 27, 28, 29, 30, 111, 192, 67, 193, 194, 195, 196, 197, 2, 31, 32, 33, 34, 35, 36, 112, 68, 198, 199, 200, 201, 113, 202, 50, 203, 114, 204, 3, 37, 38, 39, 40, 41, 42, 115, 205, 69, 206, 207, 208, 209, 210, 211, 212, 213, 116, 214, 70, 215, 220, 221, 222, 117, 223, 118, 224, 225, 226, 227, 119, 228, 71, 229, 55, 216, 52, 56, 217 }
  uselistorder i32* @r1, { 20, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 1, 61, 62, 5, 63, 0, 64, 13, 14, 66, 26, 31, 32, 35, 33, 34, 27, 28, 29, 30, 25, 36, 65, 10, 4, 21, 6, 37, 3, 38, 39, 40, 11, 7, 8, 9, 12, 41, 42, 2, 15, 16, 17, 18, 19, 22, 23, 24, 43 }
  uselistorder label %dec_label_pc_12300, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_12274, { 1, 0 }
}

define i32 @function_1230c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1230c:
  %v3_1230c = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12314 = call i32 @function_10698()
  %v0_12318 = load i32, i32* @r4, align 4
  store i32 %v3_1230c, i32* @r4, align 4
  %v2_12320 = call i32 @function_10740(i32 %v0_12314, i32 %v0_12318)
  ret i32 %v2_12320

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_10740, { 2, 3, 1, 0 }
}

define i32 @function_12324(i32 %arg1) local_unnamed_addr {
dec_label_pc_12324:
  %v1_12324 = add i32 %arg1, 28
  %v2_12324 = inttoptr i32 %v1_12324 to i32*
  %v3_12324 = load i32, i32* %v2_12324, align 4
  %v1_1232c = add i32 %arg1, 44
  %v2_1232c = inttoptr i32 %v1_1232c to i32*
  %v3_1232c = load i32, i32* %v2_1232c, align 4
  store i32 %v3_12324, i32* @global_var_1b394.706, align 4
  store i32 %v3_1232c, i32* @global_var_1b398.708, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 7, 0, 5, 6, 1, 2, 3, 4 }
  uselistorder i32 28, { 22, 0, 1, 21, 5, 6, 7, 8, 9, 10, 11, 2, 4, 13, 12, 14, 15, 16, 17, 18, 19, 20, 3 }
}

define i32 @function_12348(i32* %arg1) local_unnamed_addr {
dec_label_pc_12348:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_12350 = call i32 @brk(i32* %arg1)
  %v3_12354 = icmp ult i32 %v2_12350, %tmp
  store i32 %v2_12350, i32* @global_var_1b22c.701, align 4
  br i1 %v3_12354, label %dec_label_pc_12368, label %dec_label_pc_12378

dec_label_pc_12368:                               ; preds = %dec_label_pc_12348
  %v0_12368 = call i32 @function_1093c()
  %v2_12370 = inttoptr i32 %v0_12368 to i32*
  store i32 12, i32* %v2_12370, align 4
  br label %dec_label_pc_12378

dec_label_pc_12378:                               ; preds = %dec_label_pc_12348, %dec_label_pc_12368
  %v0_12378 = phi i32 [ 0, %dec_label_pc_12348 ], [ -1, %dec_label_pc_12368 ]
  ret i32 %v0_12378

; uselistorder directives
  uselistorder i32 12, { 15, 6, 10, 98, 99, 100, 102, 103, 104, 105, 11, 101, 106, 107, 108, 109, 110, 111, 112, 88, 89, 90, 0, 85, 91, 7, 92, 8, 86, 4, 87, 16, 17, 26, 27, 44, 45, 37, 18, 38, 34, 46, 28, 25, 29, 30, 31, 32, 33, 35, 39, 40, 36, 47, 48, 19, 41, 20, 42, 21, 43, 49, 9, 50, 51, 53, 54, 55, 22, 56, 23, 57, 5, 58, 52, 93, 59, 24, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 12, 71, 72, 73, 74, 13, 75, 76, 77, 78, 79, 80, 14, 81, 82, 83, 84, 94, 95, 96, 97, 1, 2, 3 }
  uselistorder i32 ()* @function_1093c, { 19, 47, 32, 9, 8, 7, 6, 5, 48, 31, 30, 17, 18, 46, 45, 16, 15, 14, 26, 24, 44, 29, 43, 42, 23, 25, 41, 40, 13, 4, 3, 39, 38, 27, 37, 2, 11, 36, 35, 10, 21, 12, 1, 0, 34, 22, 33, 28, 20 }
  uselistorder i32* @global_var_1b22c.701, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12378, { 1, 0 }
}

define i32 @function_12384(i32 %arg1) local_unnamed_addr {
dec_label_pc_12384:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12388 = load i32, i32* @global_var_1b000.665, align 4
  %v7_1238c = icmp eq i32 %v3_12388, -1
  %v3_12390 = load i32, i32* @r4, align 4
  store i32 %v3_12390, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1b000.665 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1238c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_12384
  store i32 %v3_12390, i32* %r4.global-to-local, align 4
  %v9_12398 = load i32, i32* @r0, align 4
  ret i32 %v9_12398

.preheader:                                       ; preds = %dec_label_pc_12384, %.preheader
  %v0_123a0 = phi i32 [ %v3_123a4, %.preheader ], [ %v3_12388, %dec_label_pc_12384 ]
  call void @__pseudo_branch(i32 %v0_123a0)
  %v0_123a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_123a4 = add i32 %v0_123a4, -4
  %v2_123a4 = inttoptr i32 %v1_123a4 to i32*
  %v3_123a4 = load i32, i32* %v2_123a4, align 4
  store i32 %v1_123a4, i32* %r4.global-to-local, align 4
  %v3_123a8 = icmp eq i32 %v3_123a4, -1
  br i1 %v3_123a8, label %dec_label_pc_123b0, label %.preheader

dec_label_pc_123b0:                               ; preds = %.preheader
  %v2_123b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_123b0, i32* %r4.global-to-local, align 4
  %v8_123b0 = load i32, i32* @r0, align 4
  ret i32 %v8_123b0

; uselistorder directives
  uselistorder i32 %v3_123a4, { 1, 0 }
  uselistorder i32 %v3_12388, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 45, 15, 46, 47, 48, 3, 16, 17, 18, 49, 50, 51, 4, 19, 20, 21, 52, 53, 54, 5, 22, 23, 55, 14, 13, 56, 57, 58, 12, 11, 10, 9, 24, 25, 26, 27, 28, 0, 29, 1, 30, 2, 59, 8, 31, 37, 43, 38, 32, 33, 39, 40, 41, 42, 44, 7, 6, 34, 35, 36 }
  uselistorder i32 -1, { 127, 0, 75, 126, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 128, 76, 203, 77, 234, 78, 224, 79, 257, 80, 258, 81, 259, 82, 260, 83, 261, 1, 129, 2, 84, 225, 226, 130, 131, 132, 118, 133, 3, 4, 73, 64, 65, 134, 135, 136, 72, 204, 137, 205, 5, 6, 85, 235, 86, 236, 87, 237, 88, 229, 89, 231, 90, 206, 91, 227, 92, 207, 93, 208, 94, 232, 95, 230, 96, 209, 97, 138, 98, 210, 99, 238, 100, 262, 263, 101, 211, 102, 212, 103, 228, 104, 213, 105, 264, 106, 240, 107, 214, 108, 215, 109, 241, 110, 233, 111, 239, 112, 265, 74, 266, 139, 140, 141, 142, 143, 7, 8, 9, 113, 114, 10, 144, 216, 16, 145, 17, 146, 12, 147, 148, 217, 11, 149, 68, 18, 150, 151, 15, 152, 153, 154, 200, 201, 155, 156, 157, 198, 115, 199, 19, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 202, 13, 178, 14, 179, 180, 181, 20, 182, 183, 116, 218, 184, 21, 185, 219, 69, 66, 67, 22, 23, 26, 119, 220, 25, 121, 221, 24, 120, 222, 27, 28, 122, 223, 29, 30, 31, 32, 33, 186, 34, 70, 35, 36, 37, 38, 187, 39, 117, 40, 41, 43, 188, 42, 44, 45, 46, 47, 189, 48, 49, 50, 190, 51, 52, 53, 191, 54, 55, 56, 57, 58, 192, 59, 60, 61, 193, 62, 63, 71, 194, 195, 196, 197, 123, 124, 125 }
  uselistorder i32* @global_var_1b000.665, { 1, 0 }
  uselistorder i32 1, { 404, 50, 251, 269, 680, 681, 682, 683, 684, 260, 405, 231, 535, 536, 537, 538, 539, 540, 541, 754, 32, 28, 29, 30, 31, 755, 252, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 408, 407, 406, 219, 220, 221, 223, 218, 216, 222, 217, 213, 215, 214, 409, 33, 410, 134, 135, 411, 82, 412, 225, 413, 129, 414, 226, 415, 234, 416, 208, 0, 420, 419, 418, 417, 48, 49, 303, 421, 173, 174, 261, 304, 422, 61, 423, 626, 428, 427, 426, 425, 424, 113, 114, 116, 117, 115, 305, 429, 768, 262, 432, 431, 430, 228, 227, 433, 125, 126, 124, 127, 175, 176, 177, 178, 434, 97, 98, 96, 95, 435, 436, 230, 229, 437, 263, 727, 438, 46, 47, 306, 307, 249, 442, 441, 440, 439, 122, 121, 253, 443, 123, 444, 110, 445, 130, 446, 111, 447, 84, 448, 207, 449, 131, 450, 75, 451, 169, 452, 170, 453, 171, 454, 26, 455, 728, 246, 120, 119, 118, 456, 457, 27, 458, 85, 459, 13, 14, 460, 136, 461, 112, 462, 15, 463, 199, 5, 464, 172, 465, 62, 466, 232, 467, 233, 468, 235, 469, 128, 224, 83, 274, 570, 571, 275, 729, 730, 245, 731, 254, 629, 630, 255, 631, 471, 470, 237, 236, 732, 264, 265, 1, 302, 733, 472, 8, 6, 9, 10, 7, 567, 569, 568, 308, 572, 81, 80, 734, 573, 574, 575, 18, 16, 17, 735, 473, 133, 132, 736, 737, 474, 44, 43, 42, 41, 45, 738, 739, 475, 212, 211, 210, 209, 309, 544, 310, 545, 276, 546, 547, 319, 548, 576, 320, 321, 558, 559, 564, 318, 542, 543, 549, 316, 550, 551, 317, 552, 553, 315, 554, 555, 314, 556, 557, 313, 560, 561, 312, 562, 563, 311, 565, 566, 577, 322, 250, 578, 323, 579, 581, 582, 580, 583, 324, 584, 534, 266, 587, 585, 325, 586, 589, 326, 590, 591, 592, 270, 593, 594, 327, 595, 328, 596, 329, 597, 330, 598, 331, 599, 332, 600, 333, 601, 334, 602, 335, 603, 336, 604, 337, 605, 338, 606, 339, 607, 340, 608, 341, 609, 342, 610, 343, 611, 344, 612, 345, 613, 267, 619, 620, 247, 346, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 401, 478, 477, 476, 67, 68, 63, 64, 69, 70, 71, 72, 65, 66, 74, 73, 614, 615, 347, 616, 617, 348, 618, 489, 144, 143, 138, 142, 141, 140, 137, 139, 588, 349, 491, 490, 239, 241, 238, 240, 740, 493, 492, 160, 161, 159, 158, 157, 156, 494, 352, 277, 621, 622, 278, 623, 350, 351, 353, 624, 625, 354, 355, 356, 357, 358, 359, 360, 272, 273, 361, 506, 505, 504, 503, 502, 501, 500, 499, 498, 403, 497, 496, 495, 36, 38, 37, 40, 39, 362, 248, 363, 507, 366, 365, 364, 627, 509, 508, 279, 628, 367, 368, 510, 741, 280, 742, 281, 743, 2, 744, 3, 4, 632, 633, 634, 635, 636, 637, 638, 639, 271, 640, 641, 642, 643, 369, 644, 370, 645, 371, 646, 647, 648, 649, 650, 513, 512, 511, 100, 101, 102, 105, 106, 103, 108, 107, 104, 99, 109, 652, 653, 654, 655, 656, 372, 373, 515, 514, 89, 87, 86, 88, 93, 94, 91, 92, 90, 657, 658, 659, 374, 660, 661, 662, 663, 664, 665, 375, 666, 376, 283, 282, 377, 667, 516, 190, 192, 194, 195, 197, 196, 193, 191, 668, 669, 378, 670, 379, 380, 286, 284, 285, 402, 517, 34, 35, 671, 672, 256, 673, 674, 675, 676, 381, 677, 257, 382, 383, 678, 287, 679, 518, 181, 184, 179, 180, 185, 186, 189, 187, 183, 188, 182, 685, 686, 687, 688, 689, 384, 690, 385, 289, 288, 386, 692, 387, 693, 519, 164, 166, 167, 168, 165, 163, 162, 694, 695, 696, 697, 698, 699, 700, 388, 701, 389, 702, 390, 294, 293, 391, 703, 290, 704, 291, 705, 292, 706, 524, 523, 522, 521, 520, 202, 203, 206, 205, 200, 204, 201, 707, 708, 709, 710, 711, 712, 392, 297, 296, 393, 713, 295, 714, 525, 52, 53, 54, 59, 60, 58, 56, 55, 51, 57, 745, 746, 747, 748, 749, 750, 394, 300, 299, 395, 751, 298, 752, 530, 529, 528, 527, 526, 148, 147, 146, 151, 152, 154, 155, 145, 150, 153, 149, 715, 301, 396, 531, 77, 78, 79, 76, 716, 717, 397, 268, 398, 720, 399, 400, 721, 718, 719, 722, 723, 724, 725, 258, 726, 259, 23, 20, 22, 21, 25, 19, 24, 753, 11, 691, 198, 651, 12, 532, 533, 244, 243, 242 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_123b8() local_unnamed_addr {
dec_label_pc_123b8:
  %v5_123bc = load i32, i32* @r0, align 4
  ret i32 %v5_123bc

; uselistorder directives
  uselistorder i32* @r0, { 2, 10, 11, 59, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 27, 28, 29, 30, 16, 3, 17, 18, 52, 53, 24, 108, 109, 111, 13, 14, 70, 19, 69, 65, 25, 66, 21, 67, 71, 110, 35, 15, 12, 112, 7, 9, 36, 6, 72, 20, 73, 74, 8, 75, 37, 38, 0, 31, 39, 40, 32, 33, 34, 41, 43, 44, 45, 46, 47, 42, 48, 49, 50, 51, 76, 77, 1, 54, 55, 56, 57, 58, 60, 62, 63, 64, 78, 79, 68, 61, 5, 4, 22, 23, 26 }
}

define i32 @function_123c0() local_unnamed_addr {
entry:
  %v3_123c4 = load i32, i32* @r4, align 4
  %v0_123cc = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_123c4)
  ret i32 %v0_123cc

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 9, 13, 14, 10, 11, 12, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 79, 0, 563, 564, 565, 566, 81, 80, 567, 696, 697, 50, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 703, 704, 715, 716, 717, 718, 719, 720, 721, 722, 28, 723, 724, 725, 726, 727, 29, 728, 729, 730, 30, 731, 732, 733, 31, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 749, 750, 761, 762, 763, 764, 765, 766, 767, 768, 32, 769, 770, 771, 772, 773, 33, 774, 775, 776, 777, 778, 34, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 411, 630, 631, 632, 633, 505, 792, 793, 794, 795, 796, 797, 798, 82, 799, 56, 800, 54, 55, 801, 802, 803, 190, 807, 191, 818, 820, 359, 162, 821, 192, 819, 193, 194, 1, 804, 805, 83, 506, 180, 507, 197, 182, 181, 508, 509, 510, 511, 196, 513, 514, 195, 515, 806, 199, 808, 200, 183, 809, 810, 812, 813, 198, 636, 638, 639, 38, 163, 640, 637, 634, 635, 2, 603, 606, 604, 605, 164, 3, 643, 641, 642, 165, 84, 607, 608, 609, 610, 612, 613, 201, 4, 614, 5, 650, 651, 85, 644, 645, 646, 647, 648, 649, 6, 7, 512, 412, 413, 414, 202, 8, 203, 652, 653, 355, 654, 356, 548, 579, 415, 516, 416, 417, 580, 549, 418, 568, 419, 655, 811, 420, 421, 520, 422, 357, 814, 57, 815, 694, 423, 424, 695, 615, 656, 816, 817, 9, 425, 72, 426, 427, 157, 156, 360, 58, 59, 60, 61, 369, 361, 40, 39, 73, 428, 429, 430, 431, 433, 432, 10, 657, 658, 159, 158, 362, 62, 63, 64, 65, 370, 363, 42, 41, 37, 46, 659, 371, 660, 661, 662, 66, 663, 664, 665, 666, 667, 86, 668, 364, 372, 365, 366, 669, 373, 186, 43, 87, 204, 434, 671, 670, 672, 673, 35, 88, 674, 91, 90, 89, 187, 188, 189, 93, 92, 94, 205, 435, 436, 95, 675, 676, 77, 96, 437, 97, 438, 98, 677, 678, 99, 679, 680, 439, 386, 100, 101, 443, 440, 387, 388, 389, 390, 401, 384, 374, 212, 385, 407, 408, 391, 392, 393, 375, 210, 394, 395, 376, 211, 396, 397, 377, 209, 398, 399, 378, 208, 400, 402, 379, 207, 403, 410, 380, 206, 404, 409, 405, 53, 44, 160, 161, 406, 358, 441, 213, 442, 167, 444, 74, 445, 214, 446, 449, 450, 103, 166, 447, 448, 215, 216, 451, 452, 184, 453, 454, 455, 456, 457, 458, 381, 459, 460, 51, 217, 462, 463, 464, 465, 466, 467, 468, 170, 169, 469, 218, 470, 67, 471, 472, 78, 473, 368, 474, 475, 476, 367, 477, 478, 479, 102, 219, 220, 480, 483, 484, 485, 486, 487, 104, 481, 105, 482, 11, 106, 461, 681, 682, 488, 489, 221, 490, 492, 107, 493, 494, 495, 496, 497, 498, 499, 185, 222, 500, 52, 223, 501, 491, 12, 502, 171, 503, 224, 504, 517, 518, 519, 225, 75, 108, 47, 109, 521, 522, 68, 69, 48, 110, 111, 112, 172, 523, 76, 524, 525, 526, 168, 527, 113, 528, 529, 226, 530, 531, 532, 114, 115, 533, 116, 535, 70, 71, 49, 117, 118, 173, 536, 537, 538, 539, 119, 540, 541, 542, 120, 122, 121, 174, 544, 543, 123, 545, 546, 124, 547, 550, 129, 228, 551, 127, 128, 125, 126, 552, 553, 130, 554, 229, 230, 555, 227, 556, 131, 133, 132, 134, 558, 559, 557, 560, 13, 14, 15, 16, 17, 561, 135, 562, 136, 137, 175, 570, 569, 571, 573, 574, 572, 18, 19, 20, 21, 22, 575, 138, 578, 581, 582, 583, 45, 139, 141, 140, 176, 585, 584, 231, 586, 588, 589, 590, 591, 232, 592, 23, 24, 25, 587, 26, 27, 593, 142, 594, 595, 143, 145, 144, 177, 598, 596, 597, 233, 600, 599, 601, 146, 602, 683, 147, 149, 148, 178, 686, 685, 684, 234, 688, 687, 689, 150, 692, 179, 611, 235, 616, 617, 151, 618, 619, 620, 621, 152, 622, 236, 623, 624, 36, 625, 626, 627, 628, 629, 690, 153, 691, 576, 154, 577, 155, 534, 693, 382, 383, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836 }
  uselistorder i32* @r4, { 29, 536, 540, 541, 544, 545, 335, 336, 337, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 57, 471, 472, 186, 562, 563, 564, 565, 566, 567, 568, 569, 3, 570, 571, 572, 573, 587, 588, 589, 590, 27, 591, 26, 582, 583, 584, 585, 586, 574, 575, 576, 187, 188, 189, 190, 191, 192, 193, 194, 577, 578, 581, 473, 474, 475, 432, 4, 433, 434, 435, 5, 436, 6, 437, 438, 451, 7, 8, 452, 453, 454, 455, 456, 457, 476, 477, 9, 485, 486, 478, 479, 480, 481, 482, 483, 484, 58, 59, 60, 61, 62, 63, 487, 488, 489, 490, 491, 492, 290, 291, 371, 372, 64, 65, 195, 66, 67, 68, 69, 373, 374, 292, 293, 70, 71, 72, 73, 493, 494, 579, 580, 2, 74, 75, 76, 77, 207, 208, 78, 79, 538, 539, 80, 81, 542, 543, 458, 459, 495, 496, 82, 83, 84, 85, 497, 498, 499, 86, 87, 88, 500, 501, 502, 503, 504, 505, 30, 31, 32, 33, 34, 35, 36, 37, 89, 90, 38, 39, 40, 41, 91, 92, 42, 45, 46, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 93, 94, 55, 56, 10, 95, 96, 97, 98, 99, 100, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 154, 155, 156, 157, 158, 159, 0, 160, 148, 149, 150, 151, 152, 153, 101, 102, 103, 104, 105, 506, 507, 508, 509, 510, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 11, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 222, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 1, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 12, 269, 13, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 14, 308, 15, 309, 16, 310, 17, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 339, 340, 18, 341, 19, 342, 20, 343, 21, 344, 345, 346, 347, 348, 349, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 375, 376, 377, 378, 379, 380, 381, 382, 383, 393, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 22, 413, 23, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 511, 512, 513, 24, 514, 25, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 534, 535, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 460, 464, 461, 462, 463, 465, 466, 467, 468, 469, 470, 530, 531, 532, 350, 351, 352, 28, 537 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
