source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_cbdc.14 = constant i32 -382906384
@global_var_120e4.16 = constant i32 -382909968
@global_var_1e250.20 = global i32 0
@global_var_b428.26 = constant i32 -382906384
@global_var_b894.28 = constant i32 -382906384
@global_var_ab9c.30 = constant i32 -382906384
@global_var_a4c4.32 = constant i32 -382906384
@global_var_9da0.34 = constant i32 -382906384
@global_var_9574.36 = constant i32 -382906384
@global_var_8f14.38 = constant i32 -382906384
@global_var_884c.40 = constant i32 -382906384
@global_var_202dc.42 = global i32 0
@global_var_1e254.53 = global i32 0
@global_var_157bc.55 = constant i32 47
@global_var_202e0.58 = local_unnamed_addr global i32 0
@global_var_1e258.60 = global i32 0
@global_var_202e8.67 = local_unnamed_addr global i32 0
@global_var_202e6.68 = local_unnamed_addr global i32 0
@global_var_e600.72 = constant i32 -481296345
@global_var_1e25c.74 = global i32 0
@global_var_157c0.82 = constant i32 10
@global_var_10644.88 = constant i32 -382910336
@global_var_157c4.92 = constant i32 16777216
@global_var_1e264.94 = global i32 0
@global_var_1e270.96 = global i32 0
@global_var_1e268.98 = global i32 0
@global_var_1e26c.100 = global i32 0
@global_var_157cc.106 = constant [23 x i8] c"g1abc4dmo35hnp2lie0kjf\00"
@global_var_d96c.111 = constant i32 -509607925
@global_var_202fc.113 = global i32 0
@global_var_1e2a8.115 = global i32 0
@global_var_1e274.117 = global i32 0
@global_var_1e2a0.119 = global i32 0
@global_var_202f4.126 = global i32 0
@global_var_202f8.128 = global i32 0
@global_var_1e27a.131 = local_unnamed_addr global i32 0
@global_var_1e280.135 = local_unnamed_addr global i32 0
@global_var_1e27c.136 = local_unnamed_addr global i32 0
@global_var_1e281.137 = local_unnamed_addr global i32 0
@global_var_1e29a.140 = local_unnamed_addr global i32 0
@global_var_1596c.142 = constant i32 0
@global_var_157e4.144 = constant [5 x i8] c"PMMV\00"
@global_var_157ec.146 = constant i32 5396247
@global_var_157f0.148 = constant i32 1296912387
@global_var_15868.150 = constant i32 19
@global_var_157f8.152 = constant i32 320017171
@global_var_15800.154 = constant i32 4115
@global_var_15804.156 = constant i32 370216979
@global_var_1580c.158 = constant i32 370216979
@global_var_15814.160 = constant i32 370216979
@global_var_1581c.162 = constant [7 x i8] c"CLVQNS\00"
@global_var_15824.164 = constant i32 370216979
@global_var_15830.166 = constant i32 370216979
@global_var_1583c.168 = constant i32 303174162
@global_var_15844.170 = constant i32 303174162
@global_var_15850.172 = constant i32 370216979
@global_var_1585c.174 = constant [8 x i8] c"FGDCWNV\00"
@global_var_15864.176 = constant i32 269555223
@global_var_1586c.178 = constant [7 x i8] c"XNZZ\0C\22\00"
@global_var_15874.180 = constant [6 x i8] c"HT@XF\00"
@global_var_1587c.182 = constant [5 x i8] c"CLIM\00"
@global_var_15884.184 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_1588c.186 = constant i32 387006810
@global_var_15894.188 = constant [6 x i8] c"TKXZT\00"
@global_var_1589c.190 = constant [6 x i8] c"CFOKL\00"
@global_var_158a4.192 = constant [5 x i8] c"RCQQ\00"
@global_var_158ac.194 = constant [8 x i8] c"CLVQNS\22\00"
@global_var_158b4.196 = constant i32 320499557
@global_var_158bc.198 = constant i32 437918234
@global_var_158c4.200 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_158d0.202 = constant i32 319951379
@global_var_158dc.204 = constant i32 1447843658
@global_var_158e8.206 = constant i32 1867011861
@global_var_158f8.208 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_15904.210 = constant i32 1178819416
@global_var_15910.212 = constant i32 320017171
@global_var_15918.214 = constant i32 269488144
@global_var_15920.216 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_15930.218 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_15940.220 = constant [6 x i8] c"cFOKL\00"
@global_var_15948.222 = constant [4 x i8] c"CFO\00"
@global_var_1594c.224 = constant [9 x i8] c"QOACFOKL\00"
@global_var_15958.226 = constant i32 1263486531
@global_var_15964.228 = constant i32 1263486531
@global_var_15970.230 = constant i32 323043395
@global_var_15978.232 = constant i32 324420417
@global_var_15984.234 = constant i32 387007823
@global_var_1598c.236 = constant [7 x i8] c"OGPNKL\00"
@global_var_15994.238 = constant [8 x i8] c"QWRRMPV\00"
@global_var_1599c.240 = constant [5 x i8] c"WQGP\00"
@global_var_159a4.242 = constant [6 x i8] c"EWGQV\00"
@global_var_159ac.244 = constant [7 x i8] c"FCGOML\00"
@global_var_159b4.246 = constant [4 x i8] c"@KL\00"
@global_var_159b8.248 = constant [7 x i8] c"VGNLGV\00"
@global_var_159c0.250 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_1e284.251 = local_unnamed_addr global i32 0
@global_var_1e282.252 = local_unnamed_addr global i32 0
@global_var_1e288.253 = local_unnamed_addr global i32 0
@global_var_1e290.255 = local_unnamed_addr global i32 0
@global_var_1e29c.256 = local_unnamed_addr global i32 0
@global_var_da7c.258 = constant i32 -382910352
@global_var_159d4.260 = constant [3 x i8] c"\0D\0A\00"
@global_var_159d8.262 = constant [5 x i8] c"ogin\00"
@global_var_159e0.264 = constant [8 x i8] c"assword\00"
@global_var_159f1.266 = constant i32 1159724031
@global_var_159e8.268 = constant i32 2095871
@global_var_159cc.273 = constant [6 x i8] c"enter\00"
@global_var_20304.275 = global i32 0
@global_var_159f4.282 = constant [3 x i8] c"E:\00"
@global_var_20314.283 = local_unnamed_addr global i32 0
@global_var_20318.284 = local_unnamed_addr global i32 0
@global_var_159f8.286 = constant [18 x i8] c"<?<7$,+k!!+6k+ 1E\00"
@global_var_203bc.287 = local_unnamed_addr global i32 0
@global_var_203c0.288 = local_unnamed_addr global i32 0
@global_var_15a0c.290 = constant i32 41214
@global_var_203c4.291 = local_unnamed_addr global i32 0
@global_var_203c8.292 = local_unnamed_addr global i32 0
@global_var_15a10.294 = constant [59 x i8] c"\22*6-e1-$1e&-,+ 6 e#$(,)<e$1e1- e*1- 7e1$') e607 e$1 e$)*1E\00"
@global_var_20310.295 = local_unnamed_addr global i32 0
@global_var_2030c.296 = local_unnamed_addr global i32 0
@global_var_15a4c.298 = constant [7 x i8] c"6- ))E\00"
@global_var_20384.299 = local_unnamed_addr global i32 0
@global_var_20388.300 = local_unnamed_addr global i32 0
@global_var_15a54.302 = constant [8 x i8] c" +$') E\00"
@global_var_2038c.303 = local_unnamed_addr global i32 0
@global_var_20390.304 = local_unnamed_addr global i32 0
@global_var_15a5c.306 = constant [8 x i8] c"6<61 (E\00"
@global_var_20394.307 = local_unnamed_addr global i32 0
@global_var_20398.308 = local_unnamed_addr global i32 0
@global_var_15a64.310 = constant [4 x i8] c"6-E\00"
@global_var_203a8.311 = local_unnamed_addr global i32 0
@global_var_203a4.312 = local_unnamed_addr global i32 0
@global_var_15a68.314 = constant i32 724313962
@global_var_203a0.315 = local_unnamed_addr global i32 0
@global_var_2039c.316 = local_unnamed_addr global i32 0
@global_var_15a80.318 = constant i32 269878280
@global_var_203b0.319 = local_unnamed_addr global i32 0
@global_var_203ac.320 = local_unnamed_addr global i32 0
@global_var_15a9c.322 = constant [10 x i8] c"+&*77 &1E\00"
@global_var_203b8.323 = local_unnamed_addr global i32 0
@global_var_203b4.324 = local_unnamed_addr global i32 0
@global_var_15aa8.326 = constant [17 x i8] c"j',+j'06<'*=e56E\00"
@global_var_203d0.327 = local_unnamed_addr global i32 0
@global_var_203cc.328 = local_unnamed_addr global i32 0
@global_var_15abc.330 = constant [23 x i8] c"j',+j'06<'*=e.,))eh|jE\00"
@global_var_203d8.331 = local_unnamed_addr global i32 0
@global_var_203d4.332 = local_unnamed_addr global i32 0
@global_var_15ad4.334 = constant [8 x i8] c"j57*&jE\00"
@global_var_2031c.335 = local_unnamed_addr global i32 0
@global_var_20320.336 = local_unnamed_addr global i32 0
@global_var_15adc.338 = constant [6 x i8] c"j = E\00"
@global_var_20328.339 = local_unnamed_addr global i32 0
@global_var_20324.340 = local_unnamed_addr global i32 0
@global_var_15ae4.342 = constant [5 x i8] c"j#!E\00"
@global_var_20338.343 = local_unnamed_addr global i32 0
@global_var_20334.344 = local_unnamed_addr global i32 0
@global_var_15aec.346 = constant [7 x i8] c"j($56E\00"
@global_var_2033c.347 = local_unnamed_addr global i32 0
@global_var_20340.348 = local_unnamed_addr global i32 0
@global_var_15af4.350 = constant [15 x i8] c"j57*&j+ 1j1&5E\00"
@global_var_20344.351 = local_unnamed_addr global i32 0
@global_var_20348.352 = local_unnamed_addr global i32 0
@global_var_15b04.354 = constant [11 x i8] c"!37\0D )5 7E\00"
@global_var_20350.355 = local_unnamed_addr global i32 0
@global_var_2034c.356 = local_unnamed_addr global i32 0
@global_var_15b58.358 = constant i32 808064529
@global_var_20358.359 = local_unnamed_addr global i32 0
@global_var_20354.360 = local_unnamed_addr global i32 0
@global_var_15b10.362 = constant [18 x i8] c"j 1&j7 6*)3k&*+#E\00"
@global_var_2035c.363 = local_unnamed_addr global i32 0
@global_var_20360.364 = local_unnamed_addr global i32 0
@global_var_15b24.366 = constant [13 x i8] c"+$( 6 73 7eE\00"
@global_var_20368.367 = local_unnamed_addr global i32 0
@global_var_20364.368 = local_unnamed_addr global i32 0
@global_var_15b34.370 = constant [15 x i8] c"j! 3j2$1&-!*\22E\00"
@global_var_2036c.371 = local_unnamed_addr global i32 0
@global_var_20370.372 = local_unnamed_addr global i32 0
@global_var_15b44.374 = constant [20 x i8] c"j! 3j(,6&j2$1&-!*\22E\00"
@global_var_20374.375 = local_unnamed_addr global i32 0
@global_var_20378.376 = local_unnamed_addr global i32 0
@global_var_10708.382 = constant i32 -443088884
@global_var_f000.392 = constant i32 -481165250
@global_var_d594.399 = constant i32 -369098743
@global_var_1e2c8.401 = global i32 0
@global_var_10b3c.403 = constant i32 -456978431
@global_var_110d4.421 = constant i32 -478871519
@global_var_11b54.435 = constant i32 -478805983
@global_var_11f30.444 = constant i32 -382906384
@global_var_1e2ac.452 = local_unnamed_addr global i32 0
@global_var_137bc.454 = constant i32 -509591552
@global_var_1e2b0.461 = local_unnamed_addr global i32 0
@global_var_141f0.464 = constant i32 -382909968
@global_var_12594.465 = constant i32 -494075872
@global_var_1060c.466 = constant i32 -382910336
@global_var_15b88.470 = constant [11 x i8] c"/proc/stat\00"
@global_var_15b94.473 = constant i32 32
@global_var_15b98.476 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_15ba8.478 = constant [10 x i8] c"processor\00"
@global_var_15bcc.480 = constant i32 604672
@global_var_12754.483 = constant i32 -369098421
@global_var_1e2c0.496 = local_unnamed_addr global i32 0
@global_var_1e2c4.498 = local_unnamed_addr global i32 0
@global_var_15bd0.501 = constant [10 x i8] c"/dev/null\00"
@global_var_12360.502 = constant i32 -442543860
@global_var_14154.507 = constant i32 -382910352
@global_var_10b70.512 = constant i32 -369094754
@global_var_13120.525 = constant i32 -335545128
@global_var_135e8.531 = constant i32 -382909456
@global_var_202d8.534 = local_unnamed_addr global i32 0
@global_var_159d0.542 = constant i32 114
@global_var_a370.544 = constant i32 -1442840505
@global_var_14614.548 = constant i32 -382906384
@global_var_20003.557 = global i32 0
@global_var_20000.558 = global i32 0
@global_var_140f4.568 = constant i32 -509607926
@global_var_15edc.573 = constant i32 0
@global_var_155a8.574 = constant i32 -382909968
@global_var_14438.584 = constant i32 -509607928
@global_var_8c74.619 = constant i32 167772281
@global_var_1e230.2 = external global i8*
@global_var_1e24c.18 = external global i8*
@global_var_1e24d.24 = global i8 0
@global_var_202e4.65 = global i16* null
@1 = internal constant [4 x i8] c"\90\E0\01\00"
@global_var_1e260.86 = external global i8*
@global_var_1e2a4.121 = global i16* null
@global_var_1e278.130 = external global i8*
@global_var_1e28c.133 = global i16 0
@global_var_1e298.134 = local_unnamed_addr global i8 0
@global_var_1e28e.138 = local_unnamed_addr global i16 0
@global_var_1e299.139 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1e230.2 to i32), i32* %r4.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1e230.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  store i32 %v3_80d4, i32* @r0, align 4
  %v2_80dc = load i32, i32* %r4.global-to-local, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  %v2_80e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %v2_80e0 = phi i32 [ %v3_80b0, %entry ], [ %v2_80e0.pre, %dec_label_pc_80c4 ]
  store i32 %v2_80e0, i32* %r4.global-to-local, align 4
  %v1_80e4 = load i32, i32* @r0, align 4
  ret i32 %v1_80e4

; uselistorder directives
  uselistorder i8** @global_var_1e230.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %dec_label_pc_80ec._crit_edge

dec_label_pc_80ec._crit_edge:                     ; preds = %dec_label_pc_80ec
  br label %bb4

bb:                                               ; preds = %dec_label_pc_80ec
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_80ec._crit_edge, %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 122892 to i32*), align 4
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb4
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb4, %dec_label_pc_8124
  ret i32 122892

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_12e90(i32 ptrtoint (i32* @global_var_cbdc.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 87980, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_12360()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_81ec:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81ec = icmp eq i32 %arg1, 0
  %v6_81f0 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_81ec, label %dec_label_pc_8234, label %dec_label_pc_81fc

dec_label_pc_81fc:                                ; preds = %dec_label_pc_81ec
  %v0_81fc = load i32, i32* %r1.global-to-local, align 4
  %v1_81fc = add i32 %v0_81fc, 4
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %arg3
  br i1 %v9_8200, label %dec_label_pc_8240, label %dec_label_pc_8224.preheader

dec_label_pc_8224.preheader:                      ; preds = %dec_label_pc_81fc
  br label %dec_label_pc_8224

dec_label_pc_8214:                                ; preds = %dec_label_pc_8224
  %v1_8214 = add i32 %v0_821c.in, 12
  %v2_8214 = inttoptr i32 %v1_8214 to i8*
  %v3_8214 = load i8, i8* %v2_8214, align 1
  %v4_8214 = zext i8 %v3_8214 to i32
  %v9_8218 = icmp eq i32 %v4_8214, %arg3
  br i1 %v9_8218, label %dec_label_pc_8240, label %dec_label_pc_8224

dec_label_pc_8224:                                ; preds = %dec_label_pc_8224.preheader, %dec_label_pc_8214
  %v0_821c.in = phi i32 [ %v0_81fc, %dec_label_pc_8224.preheader ], [ %v0_821c, %dec_label_pc_8214 ]
  %v0_8224 = phi i32 [ 0, %dec_label_pc_8224.preheader ], [ %v1_8224, %dec_label_pc_8214 ]
  %v0_821c = add i32 %v0_821c.in, 8
  %v1_8224 = add i32 %v0_8224, 1
  %v9_8228 = icmp eq i32 %v1_8224, %arg1
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  br i1 %v9_8228, label %dec_label_pc_8234, label %dec_label_pc_8214

dec_label_pc_8234:                                ; preds = %dec_label_pc_8224, %dec_label_pc_8240, %dec_label_pc_81ec, %dec_label_pc_824c
  %v0_8234 = phi i32 [ %arg4, %dec_label_pc_8240 ], [ %arg4, %dec_label_pc_81ec ], [ %v1_824c, %dec_label_pc_824c ], [ %arg4, %dec_label_pc_8224 ]
  store i32 %v6_81f0, i32* @lr, align 4
  ret i32 %v0_8234

dec_label_pc_8240:                                ; preds = %dec_label_pc_8214, %dec_label_pc_81fc
  %v0_8240 = phi i32 [ %v0_81fc, %dec_label_pc_81fc ], [ %v0_821c, %dec_label_pc_8214 ]
  %v1_8240 = inttoptr i32 %v0_8240 to i32*
  %v2_8240 = load i32, i32* %v1_8240, align 4
  store i32 %v2_8240, i32* @r0, align 4
  %v2_8244 = icmp eq i32 %v2_8240, 0
  br i1 %v2_8244, label %dec_label_pc_8234, label %dec_label_pc_824c

dec_label_pc_824c:                                ; preds = %dec_label_pc_8240
  %v1_824c = call i32 @function_10b80(i32 %v2_8240)
  br label %dec_label_pc_8234

; uselistorder directives
  uselistorder i32 %v1_8224, { 1, 0 }
  uselistorder i32 %v0_821c, { 1, 0, 2 }
  uselistorder i32 %v0_821c.in, { 1, 0 }
  uselistorder i32 %v0_81fc, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8234, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8224, { 1, 0 }
}

define i32 @function_8258(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8258:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8258 = icmp eq i32 %arg1, 0
  %v3_825c = load i32, i32* @r4, align 4
  store i32 %v3_825c, i32* %stack_var_-8, align 4
  %v6_825c = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8258, label %dec_label_pc_82a0, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %dec_label_pc_8258
  %v0_8268 = load i32, i32* %r1.global-to-local, align 4
  %v1_8268 = add i32 %v0_8268, 4
  %v2_8268 = inttoptr i32 %v1_8268 to i8*
  %v3_8268 = load i8, i8* %v2_8268, align 1
  %v4_8268 = zext i8 %v3_8268 to i32
  %v9_826c = icmp eq i32 %v4_8268, %arg3
  br i1 %v9_826c, label %dec_label_pc_82ac, label %dec_label_pc_8290.preheader

dec_label_pc_8290.preheader:                      ; preds = %dec_label_pc_8268
  %v2_8270 = add i32 %v0_8268, 8
  store i32 %v2_8270, i32* @ip, align 4
  br label %dec_label_pc_8290

dec_label_pc_8280:                                ; preds = %dec_label_pc_8290
  %v1_8280 = add i32 %v0_8288, 4
  %v2_8280 = inttoptr i32 %v1_8280 to i8*
  %v3_8280 = load i8, i8* %v2_8280, align 1
  %v4_8280 = zext i8 %v3_8280 to i32
  %v9_8284 = icmp eq i32 %v4_8280, %arg3
  %v1_8288 = add i32 %v0_8288, 8
  store i32 %v1_8288, i32* @ip, align 4
  br i1 %v9_8284, label %dec_label_pc_82ac, label %dec_label_pc_8290

dec_label_pc_8290:                                ; preds = %dec_label_pc_8290.preheader, %dec_label_pc_8280
  %v0_8288 = phi i32 [ %v2_8270, %dec_label_pc_8290.preheader ], [ %v1_8288, %dec_label_pc_8280 ]
  %v0_8290 = phi i32 [ 0, %dec_label_pc_8290.preheader ], [ %v1_8290, %dec_label_pc_8280 ]
  %v1_8290 = add i32 %v0_8290, 1
  store i32 %v1_8290, i32* @lr, align 4
  %v9_8294 = icmp eq i32 %v1_8290, %arg1
  store i32 %v0_8288, i32* %r1.global-to-local, align 4
  br i1 %v9_8294, label %dec_label_pc_82a0, label %dec_label_pc_8280

dec_label_pc_82a0:                                ; preds = %dec_label_pc_8290, %dec_label_pc_82ac, %dec_label_pc_8258, %dec_label_pc_82b8
  %v2_82a4 = phi i32 [ %v3_825c, %dec_label_pc_82ac ], [ %v3_825c, %dec_label_pc_8258 ], [ %v2_82a4.pre, %dec_label_pc_82b8 ], [ %v3_825c, %dec_label_pc_8290 ]
  %v0_82a0 = phi i32 [ %arg4, %dec_label_pc_82ac ], [ %arg4, %dec_label_pc_8258 ], [ %v3_82bc, %dec_label_pc_82b8 ], [ %arg4, %dec_label_pc_8290 ]
  store i32 %v2_82a4, i32* @r4, align 4
  store i32 %v6_825c, i32* @lr, align 4
  ret i32 %v0_82a0

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_8268
  %v0_82ac = phi i32 [ %v0_8268, %dec_label_pc_8268 ], [ %v0_8288, %dec_label_pc_8280 ]
  %v1_82ac = inttoptr i32 %v0_82ac to i32*
  %v2_82ac = load i32, i32* %v1_82ac, align 4
  %v2_82b0 = icmp eq i32 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82a0, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_82bc = inttoptr i32 %v2_82ac to i8*
  %v3_82bc = call i32 @function_fd5c(i8* %v2_82bc, i32 10)
  %v2_82a4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_82a0

; uselistorder directives
  uselistorder i32 %v1_8290, { 1, 2, 0 }
  uselistorder i32 %v0_8288, { 0, 3, 2, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8290, { 1, 0 }
}

define i32 @function_82c8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_82c8 = load i32, i32* @r5, align 4
  %v9_82c8 = load i32, i32* @r6, align 4
  %v12_82c8 = load i32, i32* @r7, align 4
  %v18_82c8 = load i32, i32* @sb, align 4
  %v24_82c8 = load i32, i32* @fp, align 4
  %v2_82cc = icmp ugt i32 %arg2, 2
  %v7_82cc = icmp eq i32 %arg2, 3
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82d8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82d8, i32* @r5, align 4
  %v2_82dc = xor i1 %v7_82cc, true
  %v3_82dc = and i1 %v2_82cc, %v2_82dc
  br i1 %v3_82dc, label %dec_label_pc_82ec, label %dec_label_pc_82e0

dec_label_pc_82e0:                                ; preds = %dec_label_pc_8330, %.dec_label_pc_82e0_crit_edge, %dec_label_pc_8324, %dec_label_pc_8314, %dec_label_pc_82ec, %dec_label_pc_82c8, %dec_label_pc_84d8
  %v1_82e8 = phi i32 [ %v1_82e8.pre, %.dec_label_pc_82e0_crit_edge ], [ %v1_82f0, %dec_label_pc_8330 ], [ %v1_82f0, %dec_label_pc_8324 ], [ %v1_82f0, %dec_label_pc_8314 ], [ %v1_82f0, %dec_label_pc_82ec ], [ %v0_82d8, %dec_label_pc_82c8 ], [ %v0_84dc, %dec_label_pc_84d8 ]
  store i32 %v6_82c8, i32* @r5, align 4
  store i32 %v9_82c8, i32* @r6, align 4
  store i32 %v12_82c8, i32* @r7, align 4
  store i32 %v18_82c8, i32* @sb, align 4
  store i32 %v24_82c8, i32* @fp, align 4
  ret i32 %v1_82e8

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82c8
  %v1_82ec = inttoptr i32 %v0_82d8 to i32*
  %v2_82ec = load i32, i32* %v1_82ec, align 4
  %v1_82f0 = and i32 %v2_82ec, 16711680
  store i32 %v1_82f0, i32* %r0.global-to-local, align 4
  %v3_82f4 = udiv i32 %v2_82ec, 16777216
  %v1_82f8 = and i32 %v2_82ec, 65280
  %v4_82fc = udiv i32 %v1_82f0, 256
  %v5_82fc = or i32 %v4_82fc, %v3_82f4
  %v4_8300 = mul nuw nsw i32 %v1_82f8, 256
  %v5_8300 = or i32 %v5_82fc, %v4_8300
  store i32 %v5_8300, i32* %r3.global-to-local, align 4
  %v5_8304 = call i32 @llvm.bswap.i32(i32 %v2_82ec)
  %v7_8308 = icmp eq i32 %arg2, 4
  store i1 %v7_8308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8308, label %dec_label_pc_82e0, label %dec_label_pc_8314

dec_label_pc_8314:                                ; preds = %dec_label_pc_82ec
  %v1_8314 = add i32 %v0_82d8, 4
  %v2_8314 = inttoptr i32 %v1_8314 to i8*
  %v3_8314 = load i8, i8* %v2_8314, align 1
  %v4_8314 = zext i8 %v3_8314 to i32
  store i32 %v4_8314, i32* %r3.global-to-local, align 4
  %v7_8318 = icmp eq i32 %arg2, 5
  store i1 %v7_8318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8318, label %dec_label_pc_82e0, label %dec_label_pc_8324

dec_label_pc_8324:                                ; preds = %dec_label_pc_8314
  %v1_8324 = add i32 %v0_82d8, 5
  %v2_8324 = inttoptr i32 %v1_8324 to i8*
  %v3_8324 = load i8, i8* %v2_8324, align 1
  %v4_8324 = zext i8 %v3_8324 to i32
  store i32 %v4_8324, i32* @sb, align 4
  %v2_8328 = icmp eq i8 %v3_8324, 0
  store i1 %v2_8328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8328, label %dec_label_pc_82e0, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_8324
  %v2_8334 = mul nuw nsw i32 %v4_8324, 5
  store i32 %v2_8334, i32* @r7, align 4
  %v1_8338 = add i32 %arg2, -6
  store i32 %v1_8338, i32* %r3.global-to-local, align 4
  %v3_833c = icmp ult i32 %v1_8338, %v2_8334
  %v9_833c = icmp eq i32 %v1_8338, %v2_8334
  store i1 %v9_833c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_833c, label %dec_label_pc_82e0, label %dec_label_pc_8344

dec_label_pc_8344:                                ; preds = %dec_label_pc_8330
  store i32 %v4_8324, i32* %r0.global-to-local, align 4
  store i32 %v1_8338, i32* @r6, align 4
  %v2_8350 = call i32 @function_11998(i32 %v4_8324, i32 24)
  store i32 %v2_8350, i32* %ip.global-to-local, align 4
  %v0_835c = load i32, i32* @r7, align 4
  %v1_835c = load i32, i32* @r4, align 4
  %v2_835c = sub i32 %v1_835c, %v0_835c
  store i32 %v2_835c, i32* @r7, align 4
  %v0_8360 = load i32, i32* @r5, align 4
  %v1_8360 = add i32 %v0_8360, 11
  store i32 %v1_8360, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8364

dec_label_pc_8364:                                ; preds = %dec_label_pc_8364, %dec_label_pc_8344
  %v1_8368 = phi i32 [ %v1_8394, %dec_label_pc_8364 ], [ %v2_8350, %dec_label_pc_8344 ]
  %v0_8364 = phi i32 [ %v1_8390, %dec_label_pc_8364 ], [ %v1_8360, %dec_label_pc_8344 ]
  %v1_8364 = add i32 %v0_8364, -5
  %v2_8364 = inttoptr i32 %v1_8364 to i32*
  %v3_8364 = load i32, i32* %v2_8364, align 4
  store i32 %v3_8364, i32* @r1, align 4
  %v2_8368 = add i32 %v1_8368, 16
  %v3_8368 = inttoptr i32 %v2_8368 to i32*
  store i32 %v3_8364, i32* %v3_8368, align 4
  %v0_836c = load i32, i32* @r6, align 4
  %v1_836c = add i32 %v0_836c, -5
  store i32 %v1_836c, i32* @r6, align 4
  %v0_8370 = load i32, i32* %r0.global-to-local, align 4
  %v1_8370 = add i32 %v0_8370, -1
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v0_8374 = load i32, i32* @r7, align 4
  %v1_8374 = add i32 %v0_8374, -6
  store i32 %v1_8374, i32* %r3.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  %v9_837c = icmp eq i32 %v1_836c, %v1_8374
  store i1 %v9_837c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_8370, i32* @r4, align 4
  %v2_8384 = load i32, i32* %ip.global-to-local, align 4
  %v3_8384 = add i32 %v2_8384, 20
  %v4_8384 = inttoptr i32 %v3_8384 to i8*
  store i8 %v3_8370, i8* %v4_8384, align 1
  %v0_8388 = load i32, i32* @r1, align 4
  %v1_8388 = load i32, i32* %ip.global-to-local, align 4
  %v2_8388 = add i32 %v1_8388, 4
  %v3_8388 = inttoptr i32 %v2_8388 to i32*
  store i32 %v0_8388, i32* %v3_8388, align 4
  %v0_838c = load i32, i32* @lr, align 4
  %v1_838c = trunc i32 %v0_838c to i16
  %v2_838c = load i32, i32* %ip.global-to-local, align 4
  %v3_838c = inttoptr i32 %v2_838c to i16*
  store i16 %v1_838c, i16* %v3_838c, align 2
  %v0_8390 = load i32, i32* %r0.global-to-local, align 4
  %v1_8390 = add i32 %v0_8390, 5
  store i32 %v1_8390, i32* %r0.global-to-local, align 4
  %v0_8394 = load i32, i32* %ip.global-to-local, align 4
  %v1_8394 = add i32 %v0_8394, 24
  store i32 %v1_8394, i32* %ip.global-to-local, align 4
  %v0_8398 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8398, label %dec_label_pc_839c, label %dec_label_pc_8364

dec_label_pc_839c:                                ; preds = %dec_label_pc_8364
  %v0_839c = load i32, i32* @r6, align 4
  %v2_839c = icmp eq i32 %v0_839c, 0
  store i1 %v2_839c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_839c, label %dec_label_pc_849c, label %dec_label_pc_83a4

dec_label_pc_83a4:                                ; preds = %dec_label_pc_839c
  %v0_83a4 = load i32, i32* @r4, align 4
  %v1_83a4 = inttoptr i32 %v0_83a4 to i8*
  %v2_83a4 = load i8, i8* %v1_83a4, align 1
  %v3_83a4 = zext i8 %v2_83a4 to i32
  store i32 %v3_83a4, i32* @r5, align 4
  %v2_83a8 = icmp eq i8 %v2_83a4, 0
  store i1 %v2_83a8, i1* %cpsr_z.global-to-local, align 1
  %v0_83ac = load i32, i32* @r7, align 4
  %v1_83ac = add i32 %v0_83ac, -7
  store i32 %v1_83ac, i32* @r8, align 4
  br i1 %v2_83a8, label %bb, label %dec_label_pc_83b8

bb:                                               ; preds = %dec_label_pc_83a4
  store i32 %v3_83a4, i32* @r6, align 4
  br label %dec_label_pc_846c

dec_label_pc_83b8:                                ; preds = %dec_label_pc_83a4
  store i32 %v3_83a4, i32* %r0.global-to-local, align 4
  %v2_83c0 = call i32 @function_11998(i32 %v3_83a4, i32 8)
  store i32 %v2_83c0, i32* %r0.global-to-local, align 4
  %v0_83c4 = load i32, i32* @r8, align 4
  %v2_83c4 = icmp eq i32 %v0_83c4, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83c0, i32* @r6, align 4
  br i1 %v2_83c4, label %dec_label_pc_849c, label %dec_label_pc_83d0

dec_label_pc_83d0:                                ; preds = %dec_label_pc_83b8
  %v0_83d0 = load i32, i32* @r4, align 4
  %v1_83d0 = add i32 %v0_83d0, 1
  %v2_83d0 = inttoptr i32 %v1_83d0 to i8*
  %v3_83d0 = load i8, i8* %v2_83d0, align 1
  %v0_83d4 = load i32, i32* @r7, align 4
  %v7_83d4 = icmp eq i32 %v0_83d4, 8
  store i1 %v7_83d4, i1* %cpsr_z.global-to-local, align 1
  %v3_83d8 = add i32 %v2_83c0, 4
  %v4_83d8 = inttoptr i32 %v3_83d8 to i8*
  store i8 %v3_83d0, i8* %v4_83d8, align 1
  %v0_83dc = load i32, i32* @r4, align 4
  %v1_83dc = add i32 %v0_83dc, 1
  store i32 %v1_83dc, i32* %r3.global-to-local, align 4
  %v0_83e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83e0, label %dec_label_pc_849c, label %dec_label_pc_83e4

dec_label_pc_83e4:                                ; preds = %dec_label_pc_83d0
  %v1_83e4 = add i32 %v0_83dc, 2
  %v2_83e4 = inttoptr i32 %v1_83e4 to i8*
  %v3_83e4 = load i8, i8* %v2_83e4, align 1
  %v4_83e4 = zext i8 %v3_83e4 to i32
  store i32 %v4_83e4, i32* @r4, align 4
  %v0_83e8 = load i32, i32* @r7, align 4
  %v1_83e8 = add i32 %v0_83e8, -9
  store i32 %v1_83e8, i32* @r7, align 4
  %v9_83ec = icmp eq i32 %v1_83e8, %v4_83e4
  store i1 %v9_83ec, i1* %cpsr_z.global-to-local, align 1
  %v5_83f4 = icmp slt i32 %v1_83e8, %v4_83e4
  br i1 %v5_83f4, label %dec_label_pc_849c, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_83e4
  %v7_83f44711 = add i32 %v0_83dc, 3
  store i32 %v7_83f44711, i32* @r8, align 4
  %v6_83f8812 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_83f8812, i32* @sl, align 4
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8444

dec_label_pc_8408:                                ; preds = %dec_label_pc_8444
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = load i32, i32* @r4, align 4
  %v2_8408 = sub i32 %v0_8408, %v1_8408
  %v9_8408 = icmp eq i32 %v0_8408, %v1_8408
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8408, label %dec_label_pc_849c, label %dec_label_pc_8410

dec_label_pc_8410:                                ; preds = %dec_label_pc_8408
  %v3_8410 = mul i32 %v0_8464, 8
  store i32 %v3_8410, i32* %r3.global-to-local, align 4
  %v1_8414 = load i32, i32* @r8, align 4
  %v2_8414 = add i32 %v1_8414, %v1_8408
  %v3_8414 = inttoptr i32 %v2_8414 to i8*
  %v4_8414 = load i8, i8* %v3_8414, align 1
  %v0_8418 = load i32, i32* @r6, align 4
  %v2_8418 = add i32 %v0_8418, %v3_8410
  store i32 %v2_8418, i32* @sl, align 4
  %v1_841c = add i32 %v2_8408, -1
  store i32 %v1_841c, i32* %r3.global-to-local, align 4
  %v7_841c = icmp eq i32 %v2_8408, 1
  store i1 %v7_841c, i1* %cpsr_z.global-to-local, align 1
  %v3_8420 = add i32 %v2_8418, 4
  %v4_8420 = inttoptr i32 %v3_8420 to i8*
  store i8 %v4_8414, i8* %v4_8420, align 1
  %v0_8424 = load i32, i32* @r4, align 4
  %v1_8424 = load i32, i32* @r8, align 4
  %v2_8424 = add i32 %v1_8424, %v0_8424
  %v0_8428 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8428, label %dec_label_pc_849c, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8410
  %v1_842c = add i32 %v2_8424, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v4_842c = zext i8 %v3_842c to i32
  store i32 %v4_842c, i32* @r4, align 4
  %v0_8430 = load i32, i32* %r3.global-to-local, align 4
  %v1_8430 = add i32 %v0_8430, -1
  store i32 %v1_8430, i32* @r7, align 4
  %v2_8434 = sub i32 %v1_8430, %v4_842c
  %tmp46 = sub i32 0, %v2_8434
  %v6_8434 = and i32 %v1_8430, %tmp46
  %v7_8434 = icmp slt i32 %v6_8434, 0
  %v8_8434 = icmp slt i32 %v2_8434, 0
  %v9_8434 = icmp eq i32 %v1_8430, %v4_842c
  store i1 %v9_8434, i1* %cpsr_z.global-to-local, align 1
  %v2_843c = xor i1 %v8_8434, %v7_8434
  br i1 %v2_843c, label %dec_label_pc_849c, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v2_8424, 2
  store i32 %v1_8440, i32* @r8, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %.thread10, %dec_label_pc_8440
  %v0_8448 = phi i32 [ %v4_83e4, %.thread10 ], [ %v4_842c, %dec_label_pc_8440 ]
  %v2_8448 = add nuw nsw i32 %v0_8448, 1
  store i32 %v2_8448, i32* %r0.global-to-local, align 4
  %v2_844c = call i32 @function_11998(i32 %v2_8448, i32 1)
  store i32 %v2_844c, i32* %r0.global-to-local, align 4
  %v0_8450 = load i32, i32* @fp, align 4
  %v1_8450 = add i32 %v0_8450, 1
  store i32 %v1_8450, i32* @fp, align 4
  %v1_8454 = load i32, i32* @sl, align 4
  %v2_8454 = inttoptr i32 %v1_8454 to i32*
  store i32 %v2_844c, i32* %v2_8454, align 4
  %v0_8458 = load i32, i32* @r8, align 4
  %v0_845c = load i32, i32* @r4, align 4
  %v3_8460 = call i32 @function_fca8(i32 %v2_844c, i32 %v0_8458, i32 %v0_845c)
  store i32 %v3_8460, i32* %r0.global-to-local, align 4
  %v0_8464 = load i32, i32* @fp, align 4
  %v1_8464 = load i32, i32* @r5, align 4
  %v9_8464 = icmp eq i32 %v0_8464, %v1_8464
  store i1 %v9_8464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8464, label %dec_label_pc_846c, label %dec_label_pc_8408

dec_label_pc_846c:                                ; preds = %dec_label_pc_8444, %bb
  %v0_846c = call i32 @function_10a6c()
  store i32 %v0_846c, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8474 = inttoptr i32 %v0_846c to i32*
  store i32 0, i32* %v2_8474, align 4
  %v0_8478 = call i32 @function_10334()
  store i32 %v0_8478, i32* %r0.global-to-local, align 4
  %v7_847c = icmp eq i32 %v0_8478, -1
  %. = zext i1 %v7_847c to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_8488 = icmp eq i32 %v0_8478, 0
  store i1 %v2_8488, i1* %cpsr_z.global-to-local, align 1
  %tmp49 = icmp slt i32 %v0_8478, 1
  br i1 %tmp49, label %bb50, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_846c
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_849c

bb50:                                             ; preds = %dec_label_pc_846c
  %v2_8494 = icmp eq i1 %v7_847c, false
  store i1 %v2_8494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8494, label %dec_label_pc_84e4, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %dec_label_pc_842c, %dec_label_pc_8410, %dec_label_pc_8408, %dec_label_pc_83e4, %.thread14, %bb50, %dec_label_pc_83d0, %dec_label_pc_83b8, %dec_label_pc_839c
  store i32 %v2_8350, i32* %r3.global-to-local, align 4
  %v2_84a0 = icmp eq i32 %v2_8350, 0
  store i1 %v2_84a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84a0, label %bb52, label %bb51

bb51:                                             ; preds = %dec_label_pc_849c
  store i32 %v2_8350, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %dec_label_pc_849c, %bb51
  store i32 33964, i32* @lr, align 4
  %v1_84a8 = xor i1 %v2_84a0, true
  call void @__pseudo_cond_branch(i1 %v1_84a8, i32 ptrtoint (i32* @global_var_120e4.16 to i32))
  %v0_84ac = load i32, i32* @r6, align 4
  %v2_84ac = icmp eq i32 %v0_84ac, 0
  store i1 %v2_84ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ac, label %.dec_label_pc_82e0_crit_edge, label %dec_label_pc_84b4

.dec_label_pc_82e0_crit_edge:                     ; preds = %bb52
  %v1_82e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_82e0

dec_label_pc_84b4:                                ; preds = %bb52
  %v0_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = icmp eq i32 %v0_84b4, 0
  store i1 %v2_84b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84b4, label %dec_label_pc_84d8, label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_84b4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_84c0

dec_label_pc_84c0:                                ; preds = %dec_label_pc_84c0, %dec_label_pc_84bc
  %v1_84c0 = phi i32 [ 0, %dec_label_pc_84bc ], [ %v1_84cc, %dec_label_pc_84c0 ]
  %v0_84c0 = phi i32 [ %v0_84ac, %dec_label_pc_84bc ], [ %v0_84d8.pre, %dec_label_pc_84c0 ]
  %v4_84c0 = mul i32 %v1_84c0, 8
  %v5_84c0 = add i32 %v4_84c0, %v0_84c0
  %v6_84c0 = inttoptr i32 %v5_84c0 to i32*
  %v7_84c0 = load i32, i32* %v6_84c0, align 4
  store i32 %v7_84c0, i32* %r0.global-to-local, align 4
  %v2_84c4 = icmp eq i32 %v7_84c0, 0
  store i1 %v2_84c4, i1* %cpsr_z.global-to-local, align 1
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c4, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_120e4.16 to i32))
  %v0_84cc = load i32, i32* @r4, align 4
  %v1_84cc = add i32 %v0_84cc, 1
  store i32 %v1_84cc, i32* @r4, align 4
  %v0_84d0 = load i32, i32* @r5, align 4
  %v9_84d0 = icmp eq i32 %v0_84d0, %v1_84cc
  store i1 %v9_84d0, i1* %cpsr_z.global-to-local, align 1
  %v0_84d8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84d0, label %dec_label_pc_84d8, label %dec_label_pc_84c0

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84c0, %dec_label_pc_84b4
  %v0_84d8 = phi i32 [ %v0_84ac, %dec_label_pc_84b4 ], [ %v0_84d8.pre, %dec_label_pc_84c0 ]
  store i32 %v0_84d8, i32* @r0, align 4
  %v0_84dc = call i32 @function_120e4()
  store i32 %v0_84dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_82e0

dec_label_pc_84e4:                                ; preds = %bb50
  store i32 ptrtoint (i8** @global_var_1e24c.18 to i32), i32* %r3.global-to-local, align 4
  %v2_84e8 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_84e8 = zext i8 %v2_84e8 to i32
  store i32 %v3_84e8, i32* %r0.global-to-local, align 4
  %v2_84ec = icmp eq i8 %v2_84e8, 0
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ec, label %dec_label_pc_8550, label %dec_label_pc_84f4

dec_label_pc_84f4:                                ; preds = %dec_label_pc_84e4
  store i32 ptrtoint (i32* @global_var_1e250.20 to i32), i32* %r3.global-to-local, align 4
  %v2_84f8 = load i32, i32* @global_var_1e250.20, align 4
  store i32 %v2_84f8, i32* @r1, align 4
  %v1_84fc = inttoptr i32 %v2_84f8 to i32*
  %v2_84fc = load i32, i32* %v1_84fc, align 4
  store i32 %v2_84fc, i32* %ip.global-to-local, align 4
  %v1_8504 = add i32 %v2_84fc, 4
  %v2_8504 = inttoptr i32 %v1_8504 to i8*
  %v3_8504 = load i8, i8* %v2_8504, align 1
  %v4_8504 = zext i8 %v3_8504 to i32
  store i32 %v4_8504, i32* %r3.global-to-local, align 4
  %v9_8508 = icmp eq i8 %v3_8504, %v3_8314
  store i1 %v9_8508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8508, label %dec_label_pc_8530, label %dec_label_pc_8510

dec_label_pc_8510:                                ; preds = %dec_label_pc_84f4, %dec_label_pc_851c
  %v0_8510 = phi i32 [ %v1_8510, %dec_label_pc_851c ], [ 0, %dec_label_pc_84f4 ]
  %v1_8510 = add i32 %v0_8510, 1
  %v9_8514 = icmp eq i32 %v1_8510, %v3_84e8
  store i1 %v9_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8514, label %dec_label_pc_8550, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8510
  %v4_851c = mul i32 %v1_8510, 4
  %v5_851c = add i32 %v4_851c, %v2_84f8
  %v6_851c = inttoptr i32 %v5_851c to i32*
  %v7_851c = load i32, i32* %v6_851c, align 4
  store i32 %v7_851c, i32* %ip.global-to-local, align 4
  %v1_8524 = add i32 %v7_851c, 4
  %v2_8524 = inttoptr i32 %v1_8524 to i8*
  %v3_8524 = load i8, i8* %v2_8524, align 1
  %v4_8524 = zext i8 %v3_8524 to i32
  store i32 %v4_8524, i32* %r3.global-to-local, align 4
  %v9_8528 = icmp eq i8 %v3_8524, %v3_8314
  store i1 %v9_8528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8528, label %dec_label_pc_8530, label %dec_label_pc_8510

dec_label_pc_8530:                                ; preds = %dec_label_pc_851c, %dec_label_pc_84f4
  %v0_8544 = phi i32 [ %v2_84fc, %dec_label_pc_84f4 ], [ %v7_851c, %dec_label_pc_851c ]
  store i32 %v5_8304, i32* %r0.global-to-local, align 4
  %v0_8538 = load i32, i32* @sb, align 4
  store i32 %v0_8538, i32* @r1, align 4
  %v0_8540 = load i32, i32* @r5, align 4
  store i32 %v0_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = inttoptr i32 %v0_8544 to i32*
  %v2_8544 = load i32, i32* %v1_8544, align 4
  store i32 %v2_8544, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v2_8544)
  br label %dec_label_pc_8550

dec_label_pc_8550:                                ; preds = %dec_label_pc_8510, %dec_label_pc_84e4, %dec_label_pc_8530
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_8554 = call i32 @function_12488(i32 0)
  store i32 %v1_8554, i32* %r0.global-to-local, align 4
  %v0_8558 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8558, label %bb54, label %.thread17

bb54:                                             ; preds = %dec_label_pc_8550
  br label %.thread17

.thread17:                                        ; preds = %dec_label_pc_8550, %bb54
  ret i32 %v1_8554

; uselistorder directives
  uselistorder i1 %v9_8528, { 1, 0 }
  uselistorder i32 %v1_8510, { 1, 2, 0 }
  uselistorder i1 %v9_8508, { 1, 0 }
  uselistorder i32 %v0_84dc, { 1, 0 }
  uselistorder i32 %v1_84cc, { 1, 2, 0 }
  uselistorder i1 %v2_84a0, { 0, 2, 1 }
  uselistorder i1 %v2_8494, { 1, 0 }
  uselistorder i1 %v7_847c, { 1, 0 }
  uselistorder i32 %v0_8478, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8464, { 1, 0 }
  uselistorder i32 %v2_8434, { 1, 0 }
  uselistorder i32 %v1_8430, { 2, 0, 1, 3 }
  uselistorder i32 %v4_842c, { 0, 2, 1, 3 }
  uselistorder i32 %v3_8410, { 1, 0 }
  uselistorder i32 %v3_83a4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8394, { 1, 0 }
  uselistorder i32 %v1_8390, { 1, 0 }
  uselistorder i32 %v2_8350, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_8324, { 1, 0, 2, 3 }
  uselistorder i32 %v1_82f0, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_82ec, { 1, 2, 0, 3 }
  uselistorder i32 %v0_82d8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r0.global-to-local, { 5, 3, 2, 4, 8, 6, 18, 7, 9, 10, 12, 11, 19, 20, 13, 14, 15, 16, 17, 21, 22, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 0, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %dec_label_pc_8550, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8510, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %dec_label_pc_849c, { 5, 4, 0, 1, 2, 3, 6, 7, 8 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %dec_label_pc_82e0, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8560(i32 %arg1) local_unnamed_addr {
dec_label_pc_8560:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8560 = load i32, i32* @r4, align 4
  store i32 %v3_8560, i32* %stack_var_-24, align 4
  %v6_8560 = load i32, i32* @r5, align 4
  %v9_8560 = load i32, i32* @r6, align 4
  %v12_8560 = load i32, i32* @r7, align 4
  %v15_8560 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_856c = call i32 @function_11998(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1e24c.18 to i32), i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1e250.20 to i32), i32* @r6, align 4
  store i32 44636, i32* %r2.global-to-local, align 4
  store i32 %v2_856c, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e24d.24 to i32), i32* %r1.global-to-local, align 4
  %v2_858c = load i32, i32* @global_var_1e250.20, align 4
  %v2_8590 = inttoptr i32 %v2_856c to i32*
  store i32 44636, i32* %v2_8590, align 4
  %v3_8594 = load i32, i32* @r4, align 4
  %v4_8594 = add i32 %v3_8594, 4
  %v5_8594 = inttoptr i32 %v4_8594 to i8*
  store i8 0, i8* %v5_8594, align 1
  %v0_8598 = load i32, i32* %r1.global-to-local, align 4
  %v3_8598 = mul i32 %v0_8598, 4
  store i32 %v3_8598, i32* %r1.global-to-local, align 4
  %v5_859c = inttoptr i32 %v2_858c to i32*
  %v6_859c = call i32 @function_11acc(i32* %v5_859c, i32 %v3_8598, i32 44636, i32 0)
  %v2_85a0 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_85a0 = zext i8 %v2_85a0 to i32
  store i32 %v6_859c, i32* %r2.global-to-local, align 4
  %v0_85a8 = load i32, i32* @r4, align 4
  %v5_85a8 = mul nuw nsw i32 %v3_85a0, 4
  %v6_85a8 = add i32 %v5_85a8, %v6_859c
  %v7_85a8 = inttoptr i32 %v6_85a8 to i32*
  store i32 %v0_85a8, i32* %v7_85a8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e24d.24 to i32), i32* %r3.global-to-local, align 4
  %v1_85b8 = load i32, i32* @r6, align 4
  %v2_85b8 = inttoptr i32 %v1_85b8 to i32*
  store i32 %v6_859c, i32* %v2_85b8, align 4
  %v0_85bc = load i32, i32* %r3.global-to-local, align 4
  %v1_85bc = trunc i32 %v0_85bc to i8
  %v2_85bc = load i32, i32* @r5, align 4
  %v3_85bc = inttoptr i32 %v2_85bc to i8*
  store i8 %v1_85bc, i8* %v3_85bc, align 1
  %v2_85c0 = call i32 @function_11998(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_b428.26 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_85c0, i32* @r4, align 4
  store i32 ptrtoint (i8* @global_var_1e24d.24 to i32), i32* %r1.global-to-local, align 4
  %v2_85d8 = load i32, i32* @global_var_1e250.20, align 4
  %v2_85dc = inttoptr i32 %v2_85c0 to i32*
  store i32 ptrtoint (i32* @global_var_b428.26 to i32), i32* %v2_85dc, align 4
  %v0_85e0 = load i32, i32* @r7, align 4
  %v1_85e0 = trunc i32 %v0_85e0 to i8
  %v2_85e0 = load i32, i32* @r4, align 4
  %v3_85e0 = add i32 %v2_85e0, 4
  %v4_85e0 = inttoptr i32 %v3_85e0 to i8*
  store i8 %v1_85e0, i8* %v4_85e0, align 1
  %v0_85e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_85e4 = mul i32 %v0_85e4, 4
  store i32 %v3_85e4, i32* %r1.global-to-local, align 4
  %v4_85e8 = inttoptr i32 %v2_85d8 to i32*
  %v5_85e8 = call i32 @function_11acc(i32* %v4_85e8, i32 %v3_85e4, i32 %v6_859c, i32 ptrtoint (i32* @global_var_b428.26 to i32))
  %v2_85ec = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_85ec = zext i8 %v2_85ec to i32
  store i32 %v3_85ec, i32* %r3.global-to-local, align 4
  store i32 %v5_85e8, i32* %r2.global-to-local, align 4
  %v0_85f4 = load i32, i32* @r4, align 4
  %v5_85f4 = mul nuw nsw i32 %v3_85ec, 4
  %v6_85f4 = add i32 %v5_85f4, %v5_85e8
  %v7_85f4 = inttoptr i32 %v6_85f4 to i32*
  store i32 %v0_85f4, i32* %v7_85f4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_85fc = load i32, i32* %r3.global-to-local, align 4
  %v1_85fc = load i32, i32* @r7, align 4
  %v2_85fc = add i32 %v1_85fc, %v0_85fc
  store i32 %v2_85fc, i32* %r3.global-to-local, align 4
  %v1_8604 = trunc i32 %v2_85fc to i8
  %v2_8604 = load i32, i32* @r5, align 4
  %v3_8604 = inttoptr i32 %v2_8604 to i8*
  store i8 %v1_8604, i8* %v3_8604, align 1
  %v0_8608 = load i32, i32* %r2.global-to-local, align 4
  %v1_8608 = load i32, i32* @r6, align 4
  %v2_8608 = inttoptr i32 %v1_8608 to i32*
  store i32 %v0_8608, i32* %v2_8608, align 4
  %v2_860c = call i32 @function_11998(i32 %v1_85fc, i32 8)
  %v2_8610 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8610 = zext i8 %v2_8610 to i32
  store i32 ptrtoint (i32* @global_var_b894.28 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_860c, i32* @r4, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8620 = load i32, i32* @r7, align 4
  %v2_8620 = add i32 %v1_8620, %v3_8610
  store i32 %v2_8620, i32* %r1.global-to-local, align 4
  %v2_8624 = load i32, i32* @global_var_1e250.20, align 4
  %v2_8628 = inttoptr i32 %v2_860c to i32*
  store i32 ptrtoint (i32* @global_var_b894.28 to i32), i32* %v2_8628, align 4
  %v3_862c = load i32, i32* @r4, align 4
  %v4_862c = add i32 %v3_862c, 4
  %v5_862c = inttoptr i32 %v4_862c to i8*
  store i8 2, i8* %v5_862c, align 1
  %v0_8630 = load i32, i32* %r1.global-to-local, align 4
  %v3_8630 = mul i32 %v0_8630, 4
  store i32 %v3_8630, i32* %r1.global-to-local, align 4
  %v5_8634 = inttoptr i32 %v2_8624 to i32*
  %v6_8634 = call i32 @function_11acc(i32* %v5_8634, i32 %v3_8630, i32 ptrtoint (i32* @global_var_b894.28 to i32), i32 2)
  %v2_8638 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8638 = zext i8 %v2_8638 to i32
  store i32 %v3_8638, i32* %r3.global-to-local, align 4
  store i32 %v6_8634, i32* %r2.global-to-local, align 4
  %v0_8640 = load i32, i32* @r4, align 4
  %v5_8640 = mul nuw nsw i32 %v3_8638, 4
  %v6_8640 = add i32 %v5_8640, %v6_8634
  %v7_8640 = inttoptr i32 %v6_8640 to i32*
  store i32 %v0_8640, i32* %v7_8640, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8648 = load i32, i32* %r3.global-to-local, align 4
  %v1_8648 = load i32, i32* @r7, align 4
  %v2_8648 = add i32 %v1_8648, %v0_8648
  store i32 %v2_8648, i32* %r3.global-to-local, align 4
  %v1_8650 = load i32, i32* @r6, align 4
  %v2_8650 = inttoptr i32 %v1_8650 to i32*
  store i32 %v6_8634, i32* %v2_8650, align 4
  %v0_8654 = load i32, i32* %r3.global-to-local, align 4
  %v1_8654 = trunc i32 %v0_8654 to i8
  %v2_8654 = load i32, i32* @r5, align 4
  %v3_8654 = inttoptr i32 %v2_8654 to i8*
  store i8 %v1_8654, i8* %v3_8654, align 1
  %v2_8658 = call i32 @function_11998(i32 %v1_8648, i32 8)
  %v2_865c = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_865c = zext i8 %v2_865c to i32
  store i32 ptrtoint (i32* @global_var_ab9c.30 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r8, align 4
  store i32 %v2_8658, i32* @r4, align 4
  %v1_866c = load i32, i32* @r7, align 4
  %v2_866c = add i32 %v1_866c, %v3_865c
  store i32 %v2_866c, i32* %r1.global-to-local, align 4
  %v2_8670 = load i32, i32* @global_var_1e250.20, align 4
  %v2_8674 = inttoptr i32 %v2_8658 to i32*
  store i32 ptrtoint (i32* @global_var_ab9c.30 to i32), i32* %v2_8674, align 4
  %v0_8678 = load i32, i32* @r8, align 4
  %v1_8678 = trunc i32 %v0_8678 to i8
  %v2_8678 = load i32, i32* @r4, align 4
  %v3_8678 = add i32 %v2_8678, 4
  %v4_8678 = inttoptr i32 %v3_8678 to i8*
  store i8 %v1_8678, i8* %v4_8678, align 1
  %v0_867c = load i32, i32* %r1.global-to-local, align 4
  %v3_867c = mul i32 %v0_867c, 4
  store i32 %v3_867c, i32* %r1.global-to-local, align 4
  %v4_8680 = inttoptr i32 %v2_8670 to i32*
  %v5_8680 = call i32 @function_11acc(i32* %v4_8680, i32 %v3_867c, i32 %v6_8634, i32 ptrtoint (i32* @global_var_ab9c.30 to i32))
  %v2_8684 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8684 = zext i8 %v2_8684 to i32
  store i32 %v3_8684, i32* %r3.global-to-local, align 4
  store i32 %v5_8680, i32* %r2.global-to-local, align 4
  %v0_868c = load i32, i32* @r4, align 4
  %v5_868c = mul nuw nsw i32 %v3_8684, 4
  %v6_868c = add i32 %v5_868c, %v5_8680
  %v7_868c = inttoptr i32 %v6_868c to i32*
  store i32 %v0_868c, i32* %v7_868c, align 4
  %v0_8690 = load i32, i32* @r8, align 4
  store i32 %v0_8690, i32* %r1.global-to-local, align 4
  %v0_8694 = load i32, i32* %r3.global-to-local, align 4
  %v1_8694 = load i32, i32* @r7, align 4
  %v2_8694 = add i32 %v1_8694, %v0_8694
  store i32 %v2_8694, i32* %r3.global-to-local, align 4
  %v1_869c = trunc i32 %v2_8694 to i8
  %v2_869c = load i32, i32* @r5, align 4
  %v3_869c = inttoptr i32 %v2_869c to i8*
  store i8 %v1_869c, i8* %v3_869c, align 1
  %v0_86a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = inttoptr i32 %v1_86a0 to i32*
  store i32 %v0_86a0, i32* %v2_86a0, align 4
  %v2_86a4 = call i32 @function_11998(i32 %v1_8694, i32 %v0_8690)
  %v2_86a8 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_86a8 = zext i8 %v2_86a8 to i32
  store i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86a4, i32* @r4, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_86b8 = load i32, i32* @r7, align 4
  %v2_86b8 = add i32 %v1_86b8, %v3_86a8
  store i32 %v2_86b8, i32* %r1.global-to-local, align 4
  %v2_86bc = load i32, i32* @global_var_1e250.20, align 4
  %v2_86c0 = inttoptr i32 %v2_86a4 to i32*
  store i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32* %v2_86c0, align 4
  %v3_86c4 = load i32, i32* @r4, align 4
  %v4_86c4 = add i32 %v3_86c4, 4
  %v5_86c4 = inttoptr i32 %v4_86c4 to i8*
  store i8 3, i8* %v5_86c4, align 1
  %v0_86c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_86c8 = mul i32 %v0_86c8, 4
  store i32 %v3_86c8, i32* %r1.global-to-local, align 4
  %v5_86cc = inttoptr i32 %v2_86bc to i32*
  %v6_86cc = call i32 @function_11acc(i32* %v5_86cc, i32 %v3_86c8, i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32 3)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 %v3_86d0, i32* %r3.global-to-local, align 4
  store i32 %v6_86cc, i32* %r2.global-to-local, align 4
  %v0_86d8 = load i32, i32* @r4, align 4
  %v5_86d8 = mul nuw nsw i32 %v3_86d0, 4
  %v6_86d8 = add i32 %v5_86d8, %v6_86cc
  %v7_86d8 = inttoptr i32 %v6_86d8 to i32*
  store i32 %v0_86d8, i32* %v7_86d8, align 4
  %v0_86dc = load i32, i32* @r8, align 4
  store i32 %v0_86dc, i32* %r1.global-to-local, align 4
  %v0_86e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r7, align 4
  %v2_86e0 = add i32 %v1_86e0, %v0_86e0
  store i32 %v2_86e0, i32* %r3.global-to-local, align 4
  %v1_86e8 = trunc i32 %v2_86e0 to i8
  %v2_86e8 = load i32, i32* @r5, align 4
  %v3_86e8 = inttoptr i32 %v2_86e8 to i8*
  store i8 %v1_86e8, i8* %v3_86e8, align 1
  %v0_86ec = load i32, i32* %r2.global-to-local, align 4
  %v1_86ec = load i32, i32* @r6, align 4
  %v2_86ec = inttoptr i32 %v1_86ec to i32*
  store i32 %v0_86ec, i32* %v2_86ec, align 4
  %v2_86f0 = call i32 @function_11998(i32 %v1_86e0, i32 %v0_86dc)
  %v2_86f4 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_86f4 = zext i8 %v2_86f4 to i32
  store i32 ptrtoint (i32* @global_var_9da0.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86f0, i32* @r4, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8704 = load i32, i32* @r7, align 4
  %v2_8704 = add i32 %v1_8704, %v3_86f4
  store i32 %v2_8704, i32* %r1.global-to-local, align 4
  %v2_8708 = load i32, i32* @global_var_1e250.20, align 4
  %v2_870c = inttoptr i32 %v2_86f0 to i32*
  store i32 ptrtoint (i32* @global_var_9da0.34 to i32), i32* %v2_870c, align 4
  %v3_8710 = load i32, i32* @r4, align 4
  %v4_8710 = add i32 %v3_8710, 4
  %v5_8710 = inttoptr i32 %v4_8710 to i8*
  store i8 4, i8* %v5_8710, align 1
  %v0_8714 = load i32, i32* %r1.global-to-local, align 4
  %v3_8714 = mul i32 %v0_8714, 4
  store i32 %v3_8714, i32* %r1.global-to-local, align 4
  %v5_8718 = inttoptr i32 %v2_8708 to i32*
  %v6_8718 = call i32 @function_11acc(i32* %v5_8718, i32 %v3_8714, i32 ptrtoint (i32* @global_var_9da0.34 to i32), i32 4)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 %v3_871c, i32* %r3.global-to-local, align 4
  store i32 %v6_8718, i32* %r2.global-to-local, align 4
  %v0_8724 = load i32, i32* @r4, align 4
  %v5_8724 = mul nuw nsw i32 %v3_871c, 4
  %v6_8724 = add i32 %v5_8724, %v6_8718
  %v7_8724 = inttoptr i32 %v6_8724 to i32*
  store i32 %v0_8724, i32* %v7_8724, align 4
  %v0_8728 = load i32, i32* @r8, align 4
  store i32 %v0_8728, i32* %r1.global-to-local, align 4
  %v0_872c = load i32, i32* %r3.global-to-local, align 4
  %v1_872c = load i32, i32* @r7, align 4
  %v2_872c = add i32 %v1_872c, %v0_872c
  store i32 %v2_872c, i32* %r3.global-to-local, align 4
  %v1_8734 = trunc i32 %v2_872c to i8
  %v2_8734 = load i32, i32* @r5, align 4
  %v3_8734 = inttoptr i32 %v2_8734 to i8*
  store i8 %v1_8734, i8* %v3_8734, align 1
  %v0_8738 = load i32, i32* %r2.global-to-local, align 4
  %v1_8738 = load i32, i32* @r6, align 4
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  store i32 %v0_8738, i32* %v2_8738, align 4
  %v2_873c = call i32 @function_11998(i32 %v1_872c, i32 %v0_8728)
  %v2_8740 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8740 = zext i8 %v2_8740 to i32
  store i32 ptrtoint (i32* @global_var_9574.36 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_873c, i32* @r4, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8750 = load i32, i32* @r7, align 4
  %v2_8750 = add i32 %v1_8750, %v3_8740
  store i32 %v2_8750, i32* %r1.global-to-local, align 4
  %v2_8754 = load i32, i32* @global_var_1e250.20, align 4
  %v2_8758 = inttoptr i32 %v2_873c to i32*
  store i32 ptrtoint (i32* @global_var_9574.36 to i32), i32* %v2_8758, align 4
  %v3_875c = load i32, i32* @r4, align 4
  %v4_875c = add i32 %v3_875c, 4
  %v5_875c = inttoptr i32 %v4_875c to i8*
  store i8 5, i8* %v5_875c, align 1
  %v0_8760 = load i32, i32* %r1.global-to-local, align 4
  %v3_8760 = mul i32 %v0_8760, 4
  store i32 %v3_8760, i32* %r1.global-to-local, align 4
  %v5_8764 = inttoptr i32 %v2_8754 to i32*
  %v6_8764 = call i32 @function_11acc(i32* %v5_8764, i32 %v3_8760, i32 ptrtoint (i32* @global_var_9574.36 to i32), i32 5)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 %v3_8768, i32* %r3.global-to-local, align 4
  store i32 %v6_8764, i32* %r2.global-to-local, align 4
  %v0_8770 = load i32, i32* @r4, align 4
  %v5_8770 = mul nuw nsw i32 %v3_8768, 4
  %v6_8770 = add i32 %v5_8770, %v6_8764
  %v7_8770 = inttoptr i32 %v6_8770 to i32*
  store i32 %v0_8770, i32* %v7_8770, align 4
  %v0_8774 = load i32, i32* @r8, align 4
  store i32 %v0_8774, i32* %r1.global-to-local, align 4
  %v0_8778 = load i32, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r7, align 4
  %v2_8778 = add i32 %v1_8778, %v0_8778
  store i32 %v2_8778, i32* %r3.global-to-local, align 4
  %v1_8780 = trunc i32 %v2_8778 to i8
  %v2_8780 = load i32, i32* @r5, align 4
  %v3_8780 = inttoptr i32 %v2_8780 to i8*
  store i8 %v1_8780, i8* %v3_8780, align 1
  %v0_8784 = load i32, i32* %r2.global-to-local, align 4
  %v1_8784 = load i32, i32* @r6, align 4
  %v2_8784 = inttoptr i32 %v1_8784 to i32*
  store i32 %v0_8784, i32* %v2_8784, align 4
  %v2_8788 = call i32 @function_11998(i32 %v1_8778, i32 %v0_8774)
  %v2_878c = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_878c = zext i8 %v2_878c to i32
  store i32 ptrtoint (i32* @global_var_8f14.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8788, i32* @r4, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_879c = load i32, i32* @r7, align 4
  %v2_879c = add i32 %v1_879c, %v3_878c
  store i32 %v2_879c, i32* %r1.global-to-local, align 4
  %v2_87a0 = load i32, i32* @global_var_1e250.20, align 4
  %v2_87a4 = inttoptr i32 %v2_8788 to i32*
  store i32 ptrtoint (i32* @global_var_8f14.38 to i32), i32* %v2_87a4, align 4
  %v3_87a8 = load i32, i32* @r4, align 4
  %v4_87a8 = add i32 %v3_87a8, 4
  %v5_87a8 = inttoptr i32 %v4_87a8 to i8*
  store i8 6, i8* %v5_87a8, align 1
  %v0_87ac = load i32, i32* %r1.global-to-local, align 4
  %v3_87ac = mul i32 %v0_87ac, 4
  store i32 %v3_87ac, i32* %r1.global-to-local, align 4
  %v5_87b0 = inttoptr i32 %v2_87a0 to i32*
  %v6_87b0 = call i32 @function_11acc(i32* %v5_87b0, i32 %v3_87ac, i32 ptrtoint (i32* @global_var_8f14.38 to i32), i32 6)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 %v3_87b4, i32* %r3.global-to-local, align 4
  store i32 %v6_87b0, i32* %r2.global-to-local, align 4
  %v0_87bc = load i32, i32* @r4, align 4
  %v5_87bc = mul nuw nsw i32 %v3_87b4, 4
  %v6_87bc = add i32 %v5_87bc, %v6_87b0
  %v7_87bc = inttoptr i32 %v6_87bc to i32*
  store i32 %v0_87bc, i32* %v7_87bc, align 4
  %v0_87c0 = load i32, i32* @r8, align 4
  store i32 %v0_87c0, i32* %r1.global-to-local, align 4
  %v0_87c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r7, align 4
  %v2_87c4 = add i32 %v1_87c4, %v0_87c4
  store i32 %v2_87c4, i32* %r3.global-to-local, align 4
  %v1_87cc = trunc i32 %v2_87c4 to i8
  %v2_87cc = load i32, i32* @r5, align 4
  %v3_87cc = inttoptr i32 %v2_87cc to i8*
  store i8 %v1_87cc, i8* %v3_87cc, align 1
  %v0_87d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r6, align 4
  %v2_87d0 = inttoptr i32 %v1_87d0 to i32*
  store i32 %v0_87d0, i32* %v2_87d0, align 4
  %v2_87d4 = call i32 @function_11998(i32 %v1_87c4, i32 %v0_87c0)
  %v2_87d8 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_87d8 = zext i8 %v2_87d8 to i32
  store i32 ptrtoint (i32* @global_var_884c.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87d4, i32* @r4, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_87e8 = load i32, i32* @r7, align 4
  %v2_87e8 = add i32 %v1_87e8, %v3_87d8
  store i32 %v2_87e8, i32* %r1.global-to-local, align 4
  %v2_87ec = load i32, i32* @global_var_1e250.20, align 4
  %v2_87f0 = inttoptr i32 %v2_87d4 to i32*
  store i32 ptrtoint (i32* @global_var_884c.40 to i32), i32* %v2_87f0, align 4
  %v3_87f4 = load i32, i32* @r4, align 4
  %v4_87f4 = add i32 %v3_87f4, 4
  %v5_87f4 = inttoptr i32 %v4_87f4 to i8*
  store i8 7, i8* %v5_87f4, align 1
  %v0_87f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_87f8 = mul i32 %v0_87f8, 4
  store i32 %v3_87f8, i32* %r1.global-to-local, align 4
  %v5_87fc = inttoptr i32 %v2_87ec to i32*
  %v6_87fc = call i32 @function_11acc(i32* %v5_87fc, i32 %v3_87f8, i32 ptrtoint (i32* @global_var_884c.40 to i32), i32 7)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 %v3_8800, i32* %r3.global-to-local, align 4
  %v1_8804 = load i32, i32* @r6, align 4
  %v2_8804 = inttoptr i32 %v1_8804 to i32*
  store i32 %v6_87fc, i32* %v2_8804, align 4
  %v0_8808 = load i32, i32* @r4, align 4
  %v2_8808 = load i32, i32* %r3.global-to-local, align 4
  %v5_8808 = mul i32 %v2_8808, 4
  %v6_8808 = add i32 %v5_8808, %v6_87fc
  %v7_8808 = inttoptr i32 %v6_8808 to i32*
  store i32 %v0_8808, i32* %v7_8808, align 4
  %v0_880c = load i32, i32* %r3.global-to-local, align 4
  %v1_880c = load i32, i32* @r7, align 4
  %v2_880c = add i32 %v1_880c, %v0_880c
  store i32 %v2_880c, i32* %r2.global-to-local, align 4
  %v1_8814 = trunc i32 %v2_880c to i8
  %v2_8814 = load i32, i32* @r5, align 4
  %v3_8814 = inttoptr i32 %v2_8814 to i8*
  store i8 %v1_8814, i8* %v3_8814, align 1
  %v2_8818 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8818, i32* @r4, align 4
  store i32 %v6_8560, i32* @r5, align 4
  store i32 %v9_8560, i32* @r6, align 4
  store i32 %v12_8560, i32* @r7, align 4
  store i32 %v15_8560, i32* @r8, align 4
  ret i32 %v1_880c

; uselistorder directives
  uselistorder i32 %v1_880c, { 1, 0 }
  uselistorder i32 %v3_87f8, { 1, 0 }
  uselistorder i32 %v1_87c4, { 1, 0 }
  uselistorder i32 %v3_87ac, { 1, 0 }
  uselistorder i32 %v1_8778, { 1, 0 }
  uselistorder i32 %v3_8760, { 1, 0 }
  uselistorder i32 %v1_872c, { 1, 0 }
  uselistorder i32 %v3_8714, { 1, 0 }
  uselistorder i32 %v1_86e0, { 1, 0 }
  uselistorder i32 %v3_86c8, { 1, 0 }
  uselistorder i32 %v1_8694, { 1, 0 }
  uselistorder i32 %v3_867c, { 1, 0 }
  uselistorder i32 %v1_8648, { 1, 0 }
  uselistorder i32 %v6_8634, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8630, { 1, 0 }
  uselistorder i32 %v1_85fc, { 1, 0 }
  uselistorder i32 %v3_85e4, { 1, 0 }
  uselistorder i32 %v2_85c0, { 1, 0 }
  uselistorder i32 %v6_859c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8598, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 21 }
  uselistorder i32* %r1.global-to-local, { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i8* bitcast (i8** @global_var_1e24c.18 to i8*), { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1e24d.24 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_1e24c.18, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e24c.18 to i32), { 1, 0 }
}

define i32 @function_884c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_884c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_884c = load i32, i32* @r4, align 4
  %v24_884c = load i32, i32* @fp, align 4
  %v27_884c = load i32, i32* @lr, align 4
  store i32 0, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_8878 = call i32 @function_11998(i32 %arg2, i32 4)
  %v0_887c = load i32, i32* @r4, align 4
  store i32 %v0_887c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8888 = load i32, i32* @sb, align 4
  store i32 %v0_8888, i32* %r3.global-to-local, align 4
  %v0_888c = load i32, i32* @r5, align 4
  store i32 %v0_888c, i32* %r0.global-to-local, align 4
  %v5_8890 = inttoptr i32 %v0_887c to i32*
  %v6_8890 = call i32 @function_8258(i32 %v0_888c, i32* %v5_8890, i32 2, i32 %v0_8888, i32 %v2_8878)
  %v1_889c = urem i32 %v6_8890, 256
  store i32 %v1_889c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_88a8 = load i32, i32* @r4, align 4
  store i32 %v0_88a8, i32* %r1.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  store i32 %v0_88ac, i32* %r0.global-to-local, align 4
  %v5_88b0 = trunc i32 %v6_8890 to i8
  %v6_88b4 = inttoptr i32 %v0_88a8 to i32*
  %v7_88b4 = call i32 @function_8258(i32 %v0_88ac, i32* %v6_88b4, i32 3, i32 65535, i32 %v6_8890)
  %v0_88b8 = load i32, i32* @r4, align 4
  store i32 %v0_88b8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_88b4, i32* %fp.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  store i32 %v0_88c8, i32* %r0.global-to-local, align 4
  %v5_88cc = inttoptr i32 %v0_88b8 to i32*
  %v6_88cc = call i32 @function_8258(i32 %v0_88c8, i32* %v5_88cc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_88d4 = urem i32 %v6_88cc, 256
  store i32 %v1_88d4, i32* %ip.global-to-local, align 4
  %v0_88d8 = load i32, i32* @r4, align 4
  store i32 %v0_88d8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_88e4 = load i32, i32* @r5, align 4
  store i32 %v0_88e4, i32* %r0.global-to-local, align 4
  %v6_88ec = inttoptr i32 %v0_88d8 to i32*
  %v7_88ec = call i32 @function_8258(i32 %v0_88e4, i32* %v6_88ec, i32 5, i32 1, i32 %v1_88d4)
  %v1_88f8 = urem i32 %v7_88ec, 256
  store i32 %v1_88f8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8904 = load i32, i32* @r4, align 4
  store i32 %v0_8904, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* @r5, align 4
  store i32 %v0_8908, i32* %r0.global-to-local, align 4
  %v5_8910 = inttoptr i32 %v0_8904 to i32*
  %v6_8910 = call i32 @function_8258(i32 %v0_8908, i32* %v5_8910, i32 6, i32 65535, i32 %v1_88f8)
  %v0_891c = load i32, i32* @r4, align 4
  store i32 %v0_891c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_8928 = load i32, i32* @r5, align 4
  store i32 %v0_8928, i32* %r0.global-to-local, align 4
  %v5_892c = inttoptr i32 %v0_891c to i32*
  %v6_892c = call i32 @function_8258(i32 %v0_8928, i32* %v5_892c, i32 7, i32 65535, i32 %v6_8910)
  %v0_8930 = load i32, i32* @r4, align 4
  store i32 %v0_8930, i32* %r1.global-to-local, align 4
  %v0_8934 = load i32, i32* @sb, align 4
  store i32 %v0_8934, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_892c, i32* @r8, align 4
  %v0_8940 = load i32, i32* @r5, align 4
  store i32 %v0_8940, i32* %r0.global-to-local, align 4
  %v5_8944 = inttoptr i32 %v0_8930 to i32*
  %v6_8944 = call i32 @function_8258(i32 %v0_8940, i32* %v5_8944, i32 %v0_8934, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8954 = load i32, i32* @r4, align 4
  store i32 %v0_8954, i32* %r1.global-to-local, align 4
  %v0_8958 = load i32, i32* @r5, align 4
  store i32 %v0_8958, i32* %r0.global-to-local, align 4
  %v5_895c = inttoptr i32 %v0_8954 to i32*
  %v6_895c = call i32 @function_8258(i32 %v0_8958, i32* %v5_895c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8964 = urem i32 %v6_895c, 256
  store i32 %v1_8964, i32* %ip.global-to-local, align 4
  %v0_8968 = load i32, i32* @r4, align 4
  store i32 %v0_8968, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_8970 = load i32, i32* @sb, align 4
  store i32 %v0_8970, i32* %r3.global-to-local, align 4
  %v0_8974 = load i32, i32* @r5, align 4
  store i32 %v0_8974, i32* %r0.global-to-local, align 4
  %v5_897c = inttoptr i32 %v0_8968 to i32*
  %v6_897c = call i32 @function_8258(i32 %v0_8974, i32* %v5_897c, i32 18, i32 %v0_8970, i32 %v1_8964)
  %v0_8984 = load i32, i32* @r4, align 4
  store i32 %v0_8984, i32* %r1.global-to-local, align 4
  %v2_8988 = load i32, i32* @global_var_202dc.42, align 4
  store i32 %v2_8988, i32* %r3.global-to-local, align 4
  store i32 %v6_897c, i32* @r7, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_8994 = load i32, i32* @r5, align 4
  store i32 %v0_8994, i32* %r0.global-to-local, align 4
  %v5_8998 = inttoptr i32 %v0_8984 to i32*
  %v6_8998 = call i32 @function_8258(i32 %v0_8994, i32* %v5_8998, i32 19, i32 %v2_8988, i32 ptrtoint (i32* @0 to i32))
  %v0_89a0 = load i32, i32* @sb, align 4
  store i32 %v0_89a0, i32* %r0.global-to-local, align 4
  %v1_89a4 = inttoptr i32 %v0_89a0 to i32*
  %v2_89a4 = call i32 @function_102c4(i32* %v1_89a4)
  %v1_89a8 = load i32, i32* @r6, align 4
  %v2_89a8 = add i32 %v1_89a8, %v2_89a4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_89bc = call i32 @function_10e30(i32 2, i32 3, i32 6)
  store i32 %v3_89bc, i32* %r0.global-to-local, align 4
  %v7_89c0 = icmp eq i32 %v3_89bc, -1
  store i1 %v7_89c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_89c0, label %dec_label_pc_8ef8, label %dec_label_pc_89cc

dec_label_pc_89cc:                                ; preds = %dec_label_pc_884c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_89d4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_89d4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_89dc = load i32, i32* @sb, align 4
  store i32 %v0_89dc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_89e8 = call i32 @function_10dec(i32 %v3_89bc, i32 %v0_89dc, i32 3, i32 %v6_89d4, i32 4)
  store i32 %v5_89e8, i32* %r0.global-to-local, align 4
  %v7_89ec = icmp eq i32 %v5_89e8, -1
  store i1 %v7_89ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_89ec, label %dec_label_pc_8f04, label %dec_label_pc_89f4

dec_label_pc_89f4:                                ; preds = %dec_label_pc_89cc
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v3_89fc = mul i32 %v6_8910, 65536
  store i32 %v3_89fc, i32* %r1.global-to-local, align 4
  %v0_8a00 = load i32, i32* @r8, align 4
  %v0_8a04 = load i32, i32* %fp.global-to-local, align 4
  %v3_8a04 = mul i32 %v0_8a04, 65536
  store i32 %v3_8a04, i32* %fp.global-to-local, align 4
  %v0_8a08 = load i32, i32* @r7, align 4
  %v1_8a08 = urem i32 %v0_8a08, 256
  store i32 %v1_8a08, i32* @r7, align 4
  %v3_8a0c = urem i32 %v0_8a04, 65536
  store i32 %v3_8a0c, i32* %r3.global-to-local, align 4
  %v3_8a10 = urem i32 %v6_8910, 65536
  store i32 %v3_8a10, i32* %ip.global-to-local, align 4
  %v3_8a14 = urem i32 %v0_8a00, 65536
  %v2_8a18 = icmp eq i32 %arg2, 0
  store i1 %v2_8a18, i1* %cpsr_z.global-to-local, align 1
  %v0_8a28 = load i32, i32* @sb, align 4
  store i32 %v0_8a28, i32* %stack_var_-44, align 4
  br i1 %v2_8a18, label %dec_label_pc_8c30.preheader, label %dec_label_pc_8a3c

dec_label_pc_8a3c:                                ; preds = %dec_label_pc_89f4
  %v3_8a00 = mul i32 %v0_8a00, 65536
  %v3_8a40 = mul i32 %v6_8944, 65536
  %v1_8a44 = add i32 %v3_8a40, 4325376
  %v0_8a04.not = or i32 %v0_8a04, -65536
  %v1_8a48 = xor i32 %v0_8a04.not, 65535
  %v3_8a54 = mul i32 %v1_8a48, 65536
  store i32 %v3_8a54, i32* @r6, align 4
  %tmp68 = udiv i32 %v1_8a44, 256
  %v3_8a6c = and i32 %tmp68, 65280
  store i32 %v3_8a6c, i32* %r3.global-to-local, align 4
  %v1_8a70 = add i32 %v3_8a40, 524288
  %tmp69 = mul i32 %v0_8a04, 256
  %v3_8a74 = and i32 %tmp69, 65280
  %v1_8a78 = add i32 %v3_8a40, 1835008
  %tmp70 = mul nsw i32 %v1_8a48, 256
  %v3_8a7c = and i32 %tmp70, 65280
  %v4_8a80 = udiv i32 %v1_8a44, 16777216
  %v5_8a80 = or i32 %v4_8a80, %tmp68
  %v3_8a88 = udiv i32 %v1_8a78, 256
  %v5_8a8c = trunc i32 %v5_8a80 to i16
  %tmp71 = udiv i32 %v0_8a04, 256
  %v4_8a90 = urem i32 %tmp71, 256
  %v5_8a90 = or i32 %v4_8a90, %v3_8a74
  store i32 %v5_8a90, i32* @r7, align 4
  %tmp72 = udiv i32 %v1_8a48, 256
  %v4_8a94 = urem i32 %tmp72, 256
  %v5_8a94 = or i32 %v4_8a94, %v3_8a7c
  store i32 %v5_8a94, i32* @fp, align 4
  store i32 %v3_8a00, i32* %r2.global-to-local, align 4
  store i32 %v3_89fc, i32* %r1.global-to-local, align 4
  %v1_8aa0 = and i32 %v3_8a88, 65280
  %tmp73 = mul i32 %v6_8910, 256
  %v3_8aa4 = and i32 %tmp73, 65280
  %tmp74 = mul i32 %v0_8a00, 256
  %v3_8aa8 = and i32 %tmp74, 65280
  %v4_8ab0 = udiv i32 %v1_8a78, 16777216
  %v5_8ab0 = or i32 %v1_8aa0, %v4_8ab0
  store i32 %v5_8ab0, i32* @r5, align 4
  %tmp75 = udiv i32 %v6_8910, 256
  %v4_8ab4 = urem i32 %tmp75, 256
  %v5_8ab4 = or i32 %v4_8ab4, %v3_8aa4
  store i32 %v5_8ab4, i32* %r0.global-to-local, align 4
  %tmp76 = udiv i32 %v0_8a00, 256
  %v4_8ab8 = urem i32 %tmp76, 256
  %v5_8ab8 = or i32 %v4_8ab8, %v3_8aa8
  store i32 %v5_8ab8, i32* %ip.global-to-local, align 4
  %tmp77 = udiv i32 %v1_8a70, 256
  %v3_8abc = and i32 %tmp77, 65280
  store i32 %v3_8abc, i32* @lr, align 4
  %v5_8ac8 = trunc i32 %v5_8ab0 to i16
  %v4_8acc = udiv i32 %v1_8a70, 16777216
  %v5_8acc = or i32 %v3_8abc, %v4_8acc
  store i32 %v5_8acc, i32* @r8, align 4
  store i32 %v0_8a28, i32* @r4, align 4
  %v1_8b34 = trunc i32 %v6_88cc to i8
  %v2_8be8 = icmp eq i32 %v1_8a08, 0
  %sext = mul nuw i32 %v5_8ab4, 65536
  %v4_8c0c = sdiv i32 %sext, 65536
  %sext7 = mul nuw i32 %v5_8ab8, 65536
  %v4_8c14 = sdiv i32 %sext7, 65536
  br label %dec_label_pc_8ad4

dec_label_pc_8ad4:                                ; preds = %bb80, %dec_label_pc_8a3c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8ae0 = call i32 @function_11998(i32 1510, i32 4)
  store i32 %v2_8ae0, i32* %r0.global-to-local, align 4
  %v3_8ae8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8ae8, i32* %r2.global-to-local, align 4
  %v2_8aec = load i32, i32* @r4, align 4
  %v5_8aec = mul i32 %v2_8aec, 4
  %v6_8aec = add i32 %v5_8aec, %v2_8878
  %v7_8aec = inttoptr i32 %v6_8aec to i32*
  store i32 %v2_8ae0, i32* %v7_8aec, align 4
  store i32 %v2_8878, i32* %r1.global-to-local, align 4
  %v0_8af4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8af4 = mul i32 %v0_8af4, 32
  store i32 %v3_8af4, i32* %r3.global-to-local, align 4
  %v4_8af8 = mul i32 %v0_8af4, 4
  %v5_8af8 = add i32 %v4_8af8, %v2_8878
  %v6_8af8 = inttoptr i32 %v5_8af8 to i32*
  %v7_8af8 = load i32, i32* %v6_8af8, align 4
  store i32 %v7_8af8, i32* %r4.global-to-local, align 4
  %v5_8afc = mul i32 %v0_8af4, 24
  store i32 %v5_8afc, i32* %r3.global-to-local, align 4
  %v1_8b00 = load i32, i32* @sl, align 4
  %v2_8b00 = add i32 %v1_8b00, %v5_8afc
  store i32 %v2_8b00, i32* %lr.global-to-local, align 4
  %v1_8b04 = inttoptr i32 %v7_8af8 to i8*
  %v2_8b04 = load i8, i8* %v1_8b04, align 1
  %tmp = urem i8 %v2_8b04, 16
  %v1_8b08 = zext i8 %tmp to i32
  %v1_8b0c = or i32 %v1_8b08, 64
  store i32 %v1_8b0c, i32* %r3.global-to-local, align 4
  %v1_8b10 = trunc i32 %v1_8b0c to i8
  store i8 %v1_8b10, i8* %v1_8b04, align 1
  %v0_8b14 = load i32, i32* %r4.global-to-local, align 4
  %v1_8b14 = inttoptr i32 %v0_8b14 to i8*
  %v2_8b14 = load i8, i8* %v1_8b14, align 1
  %v1_8b18 = and i8 %v2_8b14, -16
  %v1_8b1c = or i8 %v1_8b18, 5
  store i32 %v1_88f8, i32* %r3.global-to-local, align 4
  store i8 %v1_8b1c, i8* %v1_8b14, align 1
  store i32 %v6_8890, i32* %r1.global-to-local, align 4
  %v2_8b2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8b2c = add i32 %v2_8b2c, 1
  %v4_8b2c = inttoptr i32 %v3_8b2c to i8*
  store i8 %v5_88b0, i8* %v4_8b2c, align 1
  store i32 %v1_88d4, i32* %r2.global-to-local, align 4
  %v2_8b34 = load i32, i32* %r4.global-to-local, align 4
  %v3_8b34 = add i32 %v2_8b34, 8
  %v4_8b34 = inttoptr i32 %v3_8b34 to i8*
  store i8 %v1_8b34, i8* %v4_8b34, align 1
  %v0_8b38 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b38 = icmp eq i32 %v0_8b38, 0
  store i1 %v2_8b38, i1* %cpsr_z.global-to-local, align 1
  %v2_8b40 = load i32, i32* %r4.global-to-local, align 4
  %v3_8b40 = add i32 %v2_8b40, 2
  %v4_8b40 = inttoptr i32 %v3_8b40 to i16*
  store i16 %v5_8a8c, i16* %v4_8b40, align 2
  %v2_8b48 = load i32, i32* %r4.global-to-local, align 4
  %v3_8b48 = add i32 %v2_8b48, 9
  %v4_8b48 = inttoptr i32 %v3_8b48 to i8*
  store i8 47, i8* %v4_8b48, align 1
  store i32 %v6_8998, i32* %r3.global-to-local, align 4
  %v1_8b50 = load i32, i32* %r4.global-to-local, align 4
  %v2_8b50 = add i32 %v1_8b50, 12
  %v3_8b50 = inttoptr i32 %v2_8b50 to i32*
  store i32 %v6_8998, i32* %v3_8b50, align 4
  %v0_8b54 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8b54, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_8ad4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_8b58 = load i32, i32* %r4.global-to-local, align 4
  %v4_8b58 = add i32 %v3_8b58, 6
  %v5_8b58 = inttoptr i32 %v4_8b58 to i16*
  store i16 64, i16* %v5_8b58, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_8ad4, %bb
  %v0_8b5c = load i32, i32* %lr.global-to-local, align 4
  %v1_8b5c = add i32 %v0_8b5c, 16
  %v2_8b5c = inttoptr i32 %v1_8b5c to i32*
  %v3_8b5c = load i32, i32* %v2_8b5c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_8b64 = load i32, i32* %r4.global-to-local, align 4
  %v2_8b64 = add i32 %v1_8b64, 16
  %v3_8b64 = inttoptr i32 %v2_8b64 to i32*
  store i32 %v3_8b5c, i32* %v3_8b64, align 4
  %v0_8b68 = load i32, i32* %r4.global-to-local, align 4
  %v1_8b68 = add i32 %v0_8b68, 24
  store i32 %v1_8b68, i32* %r0.global-to-local, align 4
  %v1_8b6c = add i32 %v0_8b68, 20
  store i32 %v1_8b6c, i32* %r1.global-to-local, align 4
  %v0_8b70 = load i32, i32* %ip.global-to-local, align 4
  %v1_8b70 = add i32 %v0_8b70, 101
  store i32 %v1_8b70, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_8b7c = load i32, i32* @r7, align 4
  %v1_8b7c = trunc i32 %v0_8b7c to i16
  %v3_8b7c = add i32 %v0_8b68, 4
  %v4_8b7c = inttoptr i32 %v3_8b7c to i16*
  store i16 %v1_8b7c, i16* %v4_8b7c, align 2
  %v0_8b80 = load i32, i32* %ip.global-to-local, align 4
  %v1_8b80 = trunc i32 %v0_8b80 to i16
  %v2_8b80 = load i32, i32* %r1.global-to-local, align 4
  %v3_8b80 = add i32 %v2_8b80, 2
  %v4_8b80 = inttoptr i32 %v3_8b80 to i16*
  store i16 %v1_8b80, i16* %v4_8b80, align 2
  %v0_8b84 = load i32, i32* %r3.global-to-local, align 4
  %v1_8b84 = trunc i32 %v0_8b84 to i8
  %v2_8b84 = load i32, i32* %r0.global-to-local, align 4
  %v3_8b84 = add i32 %v2_8b84, 13
  %v4_8b84 = inttoptr i32 %v3_8b84 to i8*
  store i8 %v1_8b84, i8* %v4_8b84, align 1
  %v0_8b88 = load i32, i32* %r2.global-to-local, align 4
  %v1_8b88 = trunc i32 %v0_8b88 to i8
  %v2_8b88 = load i32, i32* %r0.global-to-local, align 4
  %v3_8b88 = add i32 %v2_8b88, 12
  %v4_8b88 = inttoptr i32 %v3_8b88 to i8*
  store i8 %v1_8b88, i8* %v4_8b88, align 1
  %v0_8b8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8b8c = add i32 %v0_8b8c, 38
  %v2_8b8c = inttoptr i32 %v1_8b8c to i8*
  %v3_8b8c = load i8, i8* %v2_8b8c, align 1
  %tmp86 = urem i8 %v3_8b8c, 16
  %v1_8b90 = zext i8 %tmp86 to i32
  %v1_8b94 = or i32 %v1_8b90, 64
  store i32 %v1_8b94, i32* %r3.global-to-local, align 4
  %v1_8b98 = trunc i32 %v1_8b94 to i8
  store i8 %v1_8b98, i8* %v2_8b8c, align 1
  %v0_8b9c = load i32, i32* %r4.global-to-local, align 4
  %v1_8b9c = add i32 %v0_8b9c, 38
  %v2_8b9c = inttoptr i32 %v1_8b9c to i8*
  %v3_8b9c = load i8, i8* %v2_8b9c, align 1
  %v4_8b9c = zext i8 %v3_8b9c to i32
  %v1_8ba0 = and i32 %v4_8b9c, 240
  %v1_8ba4 = or i32 %v1_8ba0, 5
  store i32 %v1_8ba4, i32* %r2.global-to-local, align 4
  %v1_8ba8 = trunc i32 %v1_8ba4 to i8
  store i8 %v1_8ba8, i8* %v2_8b9c, align 1
  store i32 %v6_8890, i32* %ip.global-to-local, align 4
  %v0_8bb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bb0 = add i32 %v0_8bb0, 38
  store i32 %v1_8bb0, i32* @r5, align 4
  %v3_8bb4 = add i32 %v0_8bb0, 39
  %v4_8bb4 = inttoptr i32 %v3_8bb4 to i8*
  store i8 %v5_88b0, i8* %v4_8bb4, align 1
  store i32 %v5_8ab0, i32* %lr.global-to-local, align 4
  %v2_8bbc = load i32, i32* @r5, align 4
  %v3_8bbc = add i32 %v2_8bbc, 2
  %v4_8bbc = inttoptr i32 %v3_8bbc to i16*
  store i16 %v5_8ac8, i16* %v4_8bbc, align 2
  store i32 %v1_88d4, i32* %r1.global-to-local, align 4
  %v0_8bc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8bc4, label %.thread8, label %bb78

.thread8:                                         ; preds = %.thread
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb79

bb78:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v3_8bcc = load i32, i32* @r5, align 4
  %v4_8bcc = add i32 %v3_8bcc, 6
  %v5_8bcc = inttoptr i32 %v4_8bcc to i16*
  store i16 64, i16* %v5_8bcc, align 2
  %v0_8bd0.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t85 = trunc i32 %v0_8bd0.pre to i8
  br label %bb79

bb79:                                             ; preds = %.thread8, %bb78
  %v6_88cc.sink.off0 = phi i8 [ %v1_8b34, %.thread8 ], [ %extract.t85, %bb78 ]
  %v2_8bd0 = load i32, i32* @r5, align 4
  %v3_8bd0 = add i32 %v2_8bd0, 8
  %v4_8bd0 = inttoptr i32 %v3_8bd0 to i8*
  store i8 %v6_88cc.sink.off0, i8* %v4_8bd0, align 1
  %v0_8bd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8bd4 = trunc i32 %v0_8bd4 to i8
  %v2_8bd4 = load i32, i32* @r5, align 4
  %v3_8bd4 = add i32 %v2_8bd4, 9
  %v4_8bd4 = inttoptr i32 %v3_8bd4 to i8*
  store i8 %v1_8bd4, i8* %v4_8bd4, align 1
  %v0_8bd8 = load i32, i32* @fp, align 4
  %v1_8bd8 = trunc i32 %v0_8bd8 to i16
  %v2_8bd8 = load i32, i32* @r5, align 4
  %v3_8bd8 = add i32 %v2_8bd8, 4
  %v4_8bd8 = inttoptr i32 %v3_8bd8 to i16*
  store i16 %v1_8bd8, i16* %v4_8bd8, align 2
  %v0_8bdc = call i32 @function_d3a8()
  store i32 %v0_8bdc, i32* %r0.global-to-local, align 4
  store i32 %v1_8a08, i32* %ip.global-to-local, align 4
  store i1 %v2_8be8, i1* %cpsr_z.global-to-local, align 1
  %v1_8bec = sub i32 1023, %v0_8bdc
  store i32 %v1_8bec, i32* %r3.global-to-local, align 4
  br i1 %v2_8be8, label %.thread9, label %.thread10

.thread9:                                         ; preds = %bb79
  %v2_8bf4 = load i32, i32* @r5, align 4
  %v3_8bf4 = add i32 %v2_8bf4, 16
  %v4_8bf4 = inttoptr i32 %v3_8bf4 to i32*
  store i32 %v1_8bec, i32* %v4_8bf4, align 4
  br label %bb80

.thread10:                                        ; preds = %bb79
  %v1_8bf0 = load i32, i32* %r4.global-to-local, align 4
  %v2_8bf0 = add i32 %v1_8bf0, 16
  %v3_8bf0 = inttoptr i32 %v2_8bf0 to i32*
  %v4_8bf0 = load i32, i32* %v3_8bf0, align 4
  store i32 %v4_8bf0, i32* %r3.global-to-local, align 4
  %v2_8bf8 = load i32, i32* @r5, align 4
  %v3_8bf8 = add i32 %v2_8bf8, 16
  %v4_8bf8 = inttoptr i32 %v3_8bf8 to i32*
  store i32 %v4_8bf0, i32* %v4_8bf8, align 4
  br label %bb80

bb80:                                             ; preds = %.thread9, %.thread10
  %v1_8bfc = load i32, i32* @r5, align 4
  %v2_8bfc = add i32 %v1_8bfc, 12
  %v3_8bfc = inttoptr i32 %v2_8bfc to i32*
  store i32 %v0_8bdc, i32* %v3_8bfc, align 4
  %v3_8c00 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8c00, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v0_8c08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c08 = add i32 %v0_8c08, 58
  store i32 %v1_8c08, i32* @r6, align 4
  store i32 %v4_8c0c, i32* %r1.global-to-local, align 4
  %v1_8c10 = add i32 %v3_8c00, 1
  store i32 %v1_8c10, i32* @r4, align 4
  store i32 %v4_8c14, i32* %r2.global-to-local, align 4
  %v9_8c18 = icmp eq i32 %v1_8c10, %arg2
  store i1 %v9_8c18, i1* %cpsr_z.global-to-local, align 1
  %v0_8c1c = load i32, i32* @r8, align 4
  %v1_8c1c = trunc i32 %v0_8c1c to i16
  %v3_8c1c = add i32 %v0_8c08, 62
  %v4_8c1c = inttoptr i32 %v3_8c1c to i16*
  store i16 %v1_8c1c, i16* %v4_8c1c, align 2
  %v0_8c20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c20 = trunc i32 %v0_8c20 to i16
  %v2_8c20 = load i32, i32* @r6, align 4
  %v3_8c20 = inttoptr i32 %v2_8c20 to i16*
  store i16 %v1_8c20, i16* %v3_8c20, align 2
  %v0_8c24 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c24 = trunc i32 %v0_8c24 to i16
  %v2_8c24 = load i32, i32* @r6, align 4
  %v3_8c24 = add i32 %v2_8c24, 2
  %v4_8c24 = inttoptr i32 %v3_8c24 to i16*
  store i16 %v1_8c24, i16* %v4_8c24, align 2
  %v0_8c28 = load i32, i32* @r4, align 4
  store i32 %v0_8c28, i32* %stack_var_-44, align 4
  %v5_8c2c = icmp slt i32 %v1_8c10, %arg2
  br i1 %v5_8c2c, label %dec_label_pc_8ad4, label %dec_label_pc_8c30.preheader

dec_label_pc_8c30.preheader:                      ; preds = %bb80, %dec_label_pc_89f4
  %v1_8c4c = add i32 %v6_8944, 8
  %v1_8c50 = add i32 %v6_8944, 66
  %v2_8c5c = icmp eq i32 %v6_8998, -1
  %v7_8c5c = icmp eq i32 %v6_8998, -1
  %v3_8e54 = icmp eq i32 %v3_8a0c, 65535
  %v2_8ea4 = icmp eq i32 %v1_8a08, 0
  %v2_8cb8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8cd0 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8ce0 = ptrtoint i32* %stack_var_-56 to i32
  %v2_8cec = ptrtoint i32* %stack_var_-54 to i32
  %v2_8d00 = icmp eq i32 %v1_8964, 0
  br label %dec_label_pc_8c30

dec_label_pc_8c30:                                ; preds = %dec_label_pc_8c30.preheader, %dec_label_pc_8ee4
  store i1 %v2_8a18, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8a18, label %dec_label_pc_8ee4, label %dec_label_pc_8c44

dec_label_pc_8c44:                                ; preds = %dec_label_pc_8c30
  store i32 %v6_8944, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_8c4c, i32* @fp, align 4
  store i32 %v1_8c50, i32* @sb, align 4
  br label %dec_label_pc_8db8

dec_label_pc_8c58:                                ; preds = %dec_label_pc_8db8
  store i32 %v6_8998, i32* %r1.global-to-local, align 4
  store i1 %v7_8c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8c5c, label %dec_label_pc_8e44, label %dec_label_pc_8c64

dec_label_pc_8c64:                                ; preds = %dec_label_pc_8de4, %dec_label_pc_8c58
  store i32 %v3_8a0c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8e54, label %dec_label_pc_8e60, label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8e44.dec_label_pc_8c78_crit_edge, %dec_label_pc_8c64
  %v1_8c7c = phi i32 [ %v1_8c7c.pre, %dec_label_pc_8e44.dec_label_pc_8c78_crit_edge ], [ 65535, %dec_label_pc_8c64 ]
  store i32 %v3_8a10, i32* %r3.global-to-local, align 4
  %v9_8c7c = icmp eq i32 %v3_8a10, %v1_8c7c
  store i1 %v9_8c7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8c7c, label %dec_label_pc_8e88, label %dec_label_pc_8c84

dec_label_pc_8c84:                                ; preds = %dec_label_pc_8e60, %dec_label_pc_8c78
  %v1_8c88 = phi i32 [ %v1_8e80, %dec_label_pc_8e60 ], [ %v1_8c7c, %dec_label_pc_8c78 ]
  store i32 %v3_8a14, i32* %ip.global-to-local, align 4
  %v9_8c88 = icmp eq i32 %v3_8a14, %v1_8c88
  store i1 %v9_8c88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8c88, label %dec_label_pc_8e9c, label %dec_label_pc_8c90

dec_label_pc_8c90:                                ; preds = %dec_label_pc_8e88, %dec_label_pc_8c84
  store i32 %v1_8a08, i32* @lr, align 4
  store i1 %v2_8ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8ea4, label %dec_label_pc_8eb8, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_8c90
  %v1_8c98 = load i32, i32* @r5, align 4
  %v2_8c98 = add i32 %v1_8c98, 16
  %v3_8c98 = inttoptr i32 %v2_8c98 to i32*
  %v4_8c98 = load i32, i32* %v3_8c98, align 4
  store i32 %v4_8c98, i32* %r3.global-to-local, align 4
  %v2_8c9c = load i32, i32* @r6, align 4
  %v3_8c9c = add i32 %v2_8c9c, 16
  %v4_8c9c = inttoptr i32 %v3_8c9c to i32*
  store i32 %v4_8c98, i32* %v4_8c9c, align 4
  br label %dec_label_pc_8ca4

dec_label_pc_8ca4:                                ; preds = %bb81, %.thread11, %dec_label_pc_8eb8
  %v0_8ca4 = call i32 @function_d3a8()
  store i32 %v0_8ca4, i32* %r0.global-to-local, align 4
  store i32 %v0_8ca4, i32* %stack_var_-48, align 4
  %v0_8cac = call i32 @function_d3a8()
  store i32 %v0_8cac, i32* %r0.global-to-local, align 4
  store i32 %v0_8cac, i32* %stack_var_-52, align 4
  %v0_8cb4 = call i32 @function_d3a8()
  store i32 %v2_8cb8, i32* %r1.global-to-local, align 4
  store i32 %v0_8cb4, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8cc4 = load i32, i32* @r7, align 4
  store i32 %v0_8cc4, i32* %r0.global-to-local, align 4
  %v3_8cc8 = call i32 @function_fca8(i32 %v0_8cc4, i32 %v2_8cb8, i32 4)
  %v0_8ccc = load i32, i32* @r7, align 4
  %v1_8ccc = add i32 %v0_8ccc, 6
  store i32 %v1_8ccc, i32* %r0.global-to-local, align 4
  store i32 %v2_8cd0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8cd8 = call i32 @function_fca8(i32 %v1_8ccc, i32 %v2_8cd0, i32 4)
  %v0_8cdc = load i32, i32* @r7, align 4
  %v1_8cdc = add i32 %v0_8cdc, 4
  store i32 %v1_8cdc, i32* %r0.global-to-local, align 4
  store i32 %v2_8ce0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8ce8 = call i32 @function_fca8(i32 %v1_8cdc, i32 %v2_8ce0, i32 2)
  store i32 %v2_8cec, i32* %r1.global-to-local, align 4
  %v0_8cf0 = load i32, i32* @r7, align 4
  %v1_8cf0 = add i32 %v0_8cf0, 10
  store i32 %v1_8cf0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8cf8 = call i32 @function_fca8(i32 %v1_8cf0, i32 %v2_8cec, i32 2)
  store i32 %v3_8cf8, i32* %r0.global-to-local, align 4
  store i32 %v1_8964, i32* %r1.global-to-local, align 4
  store i1 %v2_8d00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8d00, label %dec_label_pc_8d08, label %dec_label_pc_8ec4

dec_label_pc_8d08:                                ; preds = %dec_label_pc_8ca4, %dec_label_pc_8ec4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d0c = load i32, i32* @r5, align 4
  %v3_8d0c = add i32 %v2_8d0c, 10
  %v4_8d0c = inttoptr i32 %v3_8d0c to i16*
  store i16 0, i16* %v4_8d0c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8d14 = load i32, i32* @r5, align 4
  store i32 %v0_8d14, i32* @r0, align 4
  %v2_8d18 = call i32 @function_bf78(i32 %v0_8d14, i32 20)
  %v3_8d18 = trunc i32 %v2_8d18 to i16
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_8d20 = load i32, i32* @r5, align 4
  %v4_8d20 = add i32 %v3_8d20, 10
  %v5_8d20 = inttoptr i32 %v4_8d20 to i16*
  store i16 %v3_8d18, i16* %v5_8d20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8d28 = load i32, i32* %ip.global-to-local, align 4
  %v1_8d28 = trunc i32 %v0_8d28 to i16
  %v2_8d28 = load i32, i32* @r6, align 4
  %v3_8d28 = add i32 %v2_8d28, 10
  %v4_8d28 = inttoptr i32 %v3_8d28 to i16*
  store i16 %v1_8d28, i16* %v4_8d28, align 2
  %v0_8d2c = load i32, i32* @r6, align 4
  store i32 %v0_8d2c, i32* @r0, align 4
  %v2_8d30 = call i32 @function_bf78(i32 %v0_8d2c, i32 20)
  %v3_8d30 = trunc i32 %v2_8d30 to i16
  store i32 %v2_8d30, i32* %r0.global-to-local, align 4
  %v3_8d34 = load i32, i32* @r6, align 4
  %v4_8d34 = add i32 %v3_8d34, 10
  %v5_8d34 = inttoptr i32 %v4_8d34 to i16*
  store i16 %v3_8d30, i16* %v5_8d34, align 2
  %v2_8d3c = load i32, i32* @r8, align 4
  %v3_8d3c = add i32 %v2_8d3c, 6
  %v4_8d3c = inttoptr i32 %v3_8d3c to i16*
  store i16 0, i16* %v4_8d3c, align 2
  %v0_8d40 = load i32, i32* @r8, align 4
  store i32 %v0_8d40, i32* @r1, align 4
  %v1_8d44 = add i32 %v0_8d40, 4
  %v2_8d44 = inttoptr i32 %v1_8d44 to i16*
  %v3_8d44 = load i16, i16* %v2_8d44, align 2
  %v4_8d44 = zext i16 %v3_8d44 to i32
  store i32 %v4_8d44, i32* %r2.global-to-local, align 4
  %v0_8d48 = load i32, i32* @fp, align 4
  store i32 %v0_8d48, i32* %r3.global-to-local, align 4
  %v0_8d4c = load i32, i32* @r6, align 4
  store i32 %v0_8d4c, i32* %r0.global-to-local, align 4
  %v4_8d50 = call i32 @function_bfc8(i32 %v0_8d4c, i32 %v0_8d40, i32 %v4_8d44, i32 %v0_8d48)
  %v5_8d50 = trunc i32 %v4_8d50 to i16
  store i32 %v4_8d50, i32* %r0.global-to-local, align 4
  %v3_8d54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8d54, i32* %r2.global-to-local, align 4
  %v3_8d58 = mul i32 %v3_8d54, 32
  store i32 %v3_8d58, i32* %r3.global-to-local, align 4
  %v0_8d5c = load i32, i32* @r5, align 4
  %v1_8d5c = add i32 %v0_8d5c, 16
  %v2_8d5c = inttoptr i32 %v1_8d5c to i32*
  %v3_8d5c = load i32, i32* %v2_8d5c, align 4
  %v5_8d60 = mul i32 %v3_8d54, 24
  store i32 %v5_8d60, i32* %r3.global-to-local, align 4
  %v1_8d64 = load i32, i32* @sl, align 4
  %v2_8d64 = add i32 %v1_8d64, %v5_8d60
  store i32 %v2_8d64, i32* @lr, align 4
  %v2_8d68 = add i32 %v2_8d64, 4
  %v3_8d68 = inttoptr i32 %v2_8d68 to i32*
  store i32 %v3_8d5c, i32* %v3_8d68, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8d74 = load i32, i32* @r8, align 4
  %v4_8d74 = add i32 %v3_8d74, 6
  %v5_8d74 = inttoptr i32 %v4_8d74 to i16*
  store i16 %v5_8d50, i16* %v5_8d74, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8d7c = load i32, i32* %r1.global-to-local, align 4
  %v1_8d7c = trunc i32 %v0_8d7c to i16
  %v2_8d7c = load i32, i32* %r3.global-to-local, align 4
  %v3_8d7c = load i32, i32* @sl, align 4
  %v4_8d7c = add i32 %v3_8d7c, %v2_8d7c
  %v5_8d7c = inttoptr i32 %v4_8d7c to i16*
  store i16 %v1_8d7c, i16* %v5_8d7c, align 2
  %v0_8d80 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d80 = trunc i32 %v0_8d80 to i16
  %v2_8d80 = load i32, i32* @lr, align 4
  %v3_8d80 = add i32 %v2_8d80, 2
  %v4_8d80 = inttoptr i32 %v3_8d80 to i16*
  store i16 %v1_8d80, i16* %v4_8d80, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8d88 = load i32, i32* @r5, align 4
  store i32 %v0_8d88, i32* %r1.global-to-local, align 4
  store i32 %v3_89bc, i32* %r0.global-to-local, align 4
  %v0_8d90 = load i32, i32* @sb, align 4
  store i32 %v0_8d90, i32* %r2.global-to-local, align 4
  %v0_8d94 = load i32, i32* @lr, align 4
  %v0_8d98 = load i32, i32* %ip.global-to-local, align 4
  %v6_8d9c = call i32 @function_10dac(i32 %v3_89bc, i32 %v0_8d88, i32 %v0_8d90, i32 16384, i32 %v0_8d94, i32 %v0_8d98)
  %v3_8da0 = load i32, i32* %stack_var_-44, align 4
  %v1_8da4 = add i32 %v3_8da0, 1
  store i32 %v1_8da4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_8dac = icmp eq i32 %v1_8da4, %arg2
  store i1 %v9_8dac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8da4, i32* %stack_var_-44, align 4
  %v6_8db4 = icmp slt i32 %v1_8da4, %arg2
  br i1 %v6_8db4, label %dec_label_pc_8db8, label %dec_label_pc_8ee4

dec_label_pc_8db8:                                ; preds = %dec_label_pc_8d08, %dec_label_pc_8c44
  %v1_8dcc = phi i32 [ %v1_8da4, %dec_label_pc_8d08 ], [ 0, %dec_label_pc_8c44 ]
  %v5_8dbc = mul i32 %v1_8dcc, 24
  %v1_8dc0 = load i32, i32* @sl, align 4
  %v2_8dc0 = add i32 %v1_8dc0, %v5_8dbc
  store i32 %v2_8dc0, i32* %r3.global-to-local, align 4
  store i32 %v2_8878, i32* %lr.global-to-local, align 4
  %v1_8dc8 = add i32 %v2_8dc0, 20
  %v2_8dc8 = inttoptr i32 %v1_8dc8 to i8*
  %v3_8dc8 = load i8, i8* %v2_8dc8, align 1
  %v4_8dc8 = zext i8 %v3_8dc8 to i32
  store i32 %v4_8dc8, i32* %r2.global-to-local, align 4
  %v4_8dcc = mul i32 %v1_8dcc, 4
  %v5_8dcc = add i32 %v4_8dcc, %v2_8878
  %v6_8dcc = inttoptr i32 %v5_8dcc to i32*
  %v7_8dcc = load i32, i32* %v6_8dcc, align 4
  store i32 %v7_8dcc, i32* @r5, align 4
  %v2_8dd0 = icmp ugt i8 %v3_8dc8, 30
  %v7_8dd0 = icmp eq i8 %v3_8dc8, 31
  store i1 %v7_8dd0, i1* %cpsr_z.global-to-local, align 1
  %v1_8dd4 = add i32 %v7_8dcc, 24
  store i32 %v1_8dd4, i32* @r7, align 4
  %v1_8dd8 = add i32 %v7_8dcc, 38
  store i32 %v1_8dd8, i32* @r6, align 4
  %v1_8ddc = add i32 %v7_8dcc, 58
  store i32 %v1_8ddc, i32* @r8, align 4
  %v2_8de0 = xor i1 %v7_8dd0, true
  %v3_8de0 = and i1 %v2_8dd0, %v2_8de0
  br i1 %v3_8de0, label %dec_label_pc_8c58, label %dec_label_pc_8de4

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8db8
  %v1_8de4 = add i32 %v2_8dc0, 16
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r4.global-to-local, align 4
  %v0_8de8 = call i32 @function_d3a8()
  store i32 %v0_8de8, i32* %r0.global-to-local, align 4
  %v3_8dec = load i32, i32* %stack_var_-44, align 4
  %v5_8df4 = mul i32 %v3_8dec, 24
  %v1_8df8 = and i32 %v3_8de4, 16711680
  store i32 %v1_8df8, i32* %ip.global-to-local, align 4
  %v3_8dfc = udiv i32 %v3_8de4, 16777216
  %v4_8e00 = udiv i32 %v1_8df8, 256
  %v5_8e00 = or i32 %v4_8e00, %v3_8dfc
  store i32 %v5_8e00, i32* %r2.global-to-local, align 4
  %v1_8e04 = load i32, i32* @sl, align 4
  %v2_8e04 = add i32 %v1_8e04, %v5_8df4
  store i32 %v2_8e04, i32* %r1.global-to-local, align 4
  %v1_8e08 = and i32 %v3_8de4, 65280
  store i32 %v1_8e08, i32* %r3.global-to-local, align 4
  %v1_8e0c = add i32 %v2_8e04, 20
  %v2_8e0c = inttoptr i32 %v1_8e0c to i8*
  %v3_8e0c = load i8, i8* %v2_8e0c, align 1
  %v4_8e0c = zext i8 %v3_8e0c to i32
  store i32 %v4_8e0c, i32* %ip.global-to-local, align 4
  %v5_8e14 = call i32 @llvm.bswap.i32(i32 %v3_8de4)
  %v7_8e18 = lshr i32 %v0_8de8, %v4_8e0c
  %v8_8e18 = add i32 %v7_8e18, %v5_8e14
  store i32 %v8_8e18, i32* %r2.global-to-local, align 4
  %v1_8e1c = and i32 %v8_8e18, 16711680
  store i32 %v1_8e1c, i32* %r0.global-to-local, align 4
  store i32 %v6_8998, i32* %r1.global-to-local, align 4
  %v5_8e34 = call i32 @llvm.bswap.i32(i32 %v8_8e18)
  store i32 %v5_8e34, i32* %r3.global-to-local, align 4
  store i1 %v7_8c5c, i1* %cpsr_z.global-to-local, align 1
  %v1_8e3c = load i32, i32* @r5, align 4
  %v2_8e3c = add i32 %v1_8e3c, 16
  %v3_8e3c = inttoptr i32 %v2_8e3c to i32*
  store i32 %v5_8e34, i32* %v3_8e3c, align 4
  br i1 %v2_8c5c, label %dec_label_pc_8e44, label %dec_label_pc_8c64

dec_label_pc_8e44:                                ; preds = %dec_label_pc_8de4, %dec_label_pc_8c58
  %v0_8e44 = call i32 @function_d3a8()
  store i32 %v0_8e44, i32* %r0.global-to-local, align 4
  store i32 %v3_8a0c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8e54, i1* %cpsr_z.global-to-local, align 1
  %v1_8e58 = load i32, i32* @r5, align 4
  %v2_8e58 = add i32 %v1_8e58, 12
  %v3_8e58 = inttoptr i32 %v2_8e58 to i32*
  store i32 %v0_8e44, i32* %v3_8e58, align 4
  br i1 %v3_8e54, label %dec_label_pc_8e60, label %dec_label_pc_8e44.dec_label_pc_8c78_crit_edge

dec_label_pc_8e44.dec_label_pc_8c78_crit_edge:    ; preds = %dec_label_pc_8e44
  %v1_8c7c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8e60:                                ; preds = %dec_label_pc_8e44, %dec_label_pc_8c64
  %v0_8e60 = call i32 @function_d3a8()
  %v3_8e68 = urem i32 %v0_8e60, 65536
  store i32 %v3_8e68, i32* %r0.global-to-local, align 4
  %v1_8e70 = sub nsw i32 999, %v3_8e68
  store i32 %v1_8e70, i32* %r3.global-to-local, align 4
  %v1_8e74 = trunc i32 %v0_8e60 to i16
  %v2_8e74 = load i32, i32* @r5, align 4
  %v3_8e74 = add i32 %v2_8e74, 4
  %v4_8e74 = inttoptr i32 %v3_8e74 to i16*
  store i16 %v1_8e74, i16* %v4_8e74, align 2
  %v0_8e78 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e78 = trunc i32 %v0_8e78 to i16
  %v2_8e78 = load i32, i32* @r6, align 4
  %v3_8e78 = add i32 %v2_8e78, 4
  %v4_8e78 = inttoptr i32 %v3_8e78 to i16*
  store i16 %v1_8e78, i16* %v4_8e78, align 2
  store i32 %v3_8a10, i32* %r3.global-to-local, align 4
  %v1_8e80 = load i32, i32* @r4, align 4
  %v9_8e80 = icmp eq i32 %v3_8a10, %v1_8e80
  store i1 %v9_8e80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8e80, label %dec_label_pc_8e88, label %dec_label_pc_8c84

dec_label_pc_8e88:                                ; preds = %dec_label_pc_8e60, %dec_label_pc_8c78
  %v0_8e88 = call i32 @function_d3a8()
  %v1_8e88 = trunc i32 %v0_8e88 to i16
  store i32 %v0_8e88, i32* %r0.global-to-local, align 4
  store i32 %v3_8a14, i32* %ip.global-to-local, align 4
  %v1_8e90 = load i32, i32* @r4, align 4
  %v9_8e90 = icmp eq i32 %v3_8a14, %v1_8e90
  store i1 %v9_8e90, i1* %cpsr_z.global-to-local, align 1
  %v3_8e94 = load i32, i32* @r5, align 4
  %v4_8e94 = add i32 %v3_8e94, 58
  %v5_8e94 = inttoptr i32 %v4_8e94 to i16*
  store i16 %v1_8e88, i16* %v5_8e94, align 2
  br i1 %v9_8e90, label %dec_label_pc_8e9c, label %dec_label_pc_8c90

dec_label_pc_8e9c:                                ; preds = %dec_label_pc_8e88, %dec_label_pc_8c84
  %v0_8e9c = call i32 @function_d3a8()
  %v1_8e9c = trunc i32 %v0_8e9c to i16
  store i32 %v0_8e9c, i32* %r0.global-to-local, align 4
  store i32 %v1_8a08, i32* @lr, align 4
  store i1 %v2_8ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8ea4, label %.thread24, label %bb81

.thread24:                                        ; preds = %dec_label_pc_8e9c
  %v3_8eac25 = load i32, i32* @r8, align 4
  %v4_8eac26 = add i32 %v3_8eac25, 2
  %v5_8eac27 = inttoptr i32 %v4_8eac26 to i16*
  store i16 %v1_8e9c, i16* %v5_8eac27, align 2
  br label %dec_label_pc_8eb8

bb81:                                             ; preds = %dec_label_pc_8e9c
  %v1_8ea8 = load i32, i32* @r5, align 4
  %v2_8ea8 = add i32 %v1_8ea8, 16
  %v3_8ea8 = inttoptr i32 %v2_8ea8 to i32*
  %v4_8ea8 = load i32, i32* %v3_8ea8, align 4
  store i32 %v4_8ea8, i32* %r3.global-to-local, align 4
  %v3_8eac = load i32, i32* @r8, align 4
  %v4_8eac = add i32 %v3_8eac, 2
  %v5_8eac = inttoptr i32 %v4_8eac to i16*
  store i16 %v1_8e9c, i16* %v5_8eac, align 2
  %v1_8eb0 = load i32, i32* %r3.global-to-local, align 4
  %v2_8eb0 = load i32, i32* @r6, align 4
  %v3_8eb0 = add i32 %v2_8eb0, 16
  %v4_8eb0 = inttoptr i32 %v3_8eb0 to i32*
  store i32 %v1_8eb0, i32* %v4_8eb0, align 4
  br label %dec_label_pc_8ca4

dec_label_pc_8eb8:                                ; preds = %.thread24, %dec_label_pc_8c90
  %v0_8eb8 = call i32 @function_d3a8()
  store i32 %v0_8eb8, i32* %r0.global-to-local, align 4
  %v1_8ebc = load i32, i32* @r6, align 4
  %v2_8ebc = add i32 %v1_8ebc, 16
  %v3_8ebc = inttoptr i32 %v2_8ebc to i32*
  store i32 %v0_8eb8, i32* %v3_8ebc, align 4
  br label %dec_label_pc_8ca4

dec_label_pc_8ec4:                                ; preds = %dec_label_pc_8ca4
  %v0_8ec4 = load i32, i32* @r8, align 4
  %v1_8ec4 = add i32 %v0_8ec4, 8
  store i32 %v1_8ec4, i32* @r4, align 4
  store i32 %v1_8ec4, i32* %r0.global-to-local, align 4
  store i32 %v6_8944, i32* %r1.global-to-local, align 4
  %v2_8ed0 = call i32 @function_d46c(i32 %v1_8ec4, i32 %v6_8944)
  store i32 %v2_8ed0, i32* %r0.global-to-local, align 4
  store i32 %v6_8944, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8edc = load i32, i32* @r4, align 4
  %v4_8edc = add i32 %v2_8edc, %v6_8944
  %v5_8edc = inttoptr i32 %v4_8edc to i8*
  store i8 0, i8* %v5_8edc, align 1
  br label %dec_label_pc_8d08

dec_label_pc_8ee4:                                ; preds = %dec_label_pc_8d08, %dec_label_pc_8c30
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_8ee8 = call i32 @function_102c4(i32* null)
  store i32 %v2_8ee8, i32* %r0.global-to-local, align 4
  store i32 %v2_89a8, i32* %ip.global-to-local, align 4
  %v9_8ef0 = icmp eq i32 %v2_89a8, %v2_8ee8
  store i1 %v9_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v6_8ef4 = icmp slt i32 %v2_89a8, %v2_8ee8
  br i1 %v6_8ef4, label %dec_label_pc_8ef8, label %dec_label_pc_8c30

dec_label_pc_8ef8:                                ; preds = %dec_label_pc_8ee4, %dec_label_pc_884c, %dec_label_pc_8f04
  %v1_8f00 = phi i32 [ %v3_89bc, %dec_label_pc_884c ], [ %v1_8f08, %dec_label_pc_8f04 ], [ %v2_8ee8, %dec_label_pc_8ee4 ]
  store i32 %v3_884c, i32* %r4.global-to-local, align 4
  store i32 %v24_884c, i32* %fp.global-to-local, align 4
  store i32 %v27_884c, i32* %lr.global-to-local, align 4
  ret i32 %v1_8f00

dec_label_pc_8f04:                                ; preds = %dec_label_pc_89cc
  store i32 %v3_89bc, i32* %r0.global-to-local, align 4
  %v1_8f08 = call i32 @function_10644(i32 %v3_89bc)
  store i32 %v1_8f08, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ef8

; uselistorder directives
  uselistorder i32 %v1_8f08, { 1, 0 }
  uselistorder i16 %v1_8e9c, { 1, 0 }
  uselistorder i32 %v0_8e9c, { 1, 0 }
  uselistorder i32 %v0_8e88, { 1, 0 }
  uselistorder i32 %v1_8e80, { 1, 0 }
  uselistorder i32 %v3_8e68, { 1, 0 }
  uselistorder i32 %v0_8e60, { 1, 0 }
  uselistorder i32 %v5_8e34, { 1, 0 }
  uselistorder i32 %v3_8de4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v7_8dcc, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8da4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_8d54, { 1, 0, 2 }
  uselistorder i32 %v4_8d50, { 1, 0 }
  uselistorder i32 %v2_8d30, { 1, 0 }
  uselistorder i1 %v2_8ea4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_8e54, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8c5c, { 2, 1, 0 }
  uselistorder i32 %v0_8bdc, { 1, 0, 2 }
  uselistorder i32 %v0_8af4, { 1, 2, 0 }
  uselistorder i32 %tmp68, { 1, 0 }
  uselistorder i32 %v1_8a48, { 2, 0, 1 }
  uselistorder i32 %v3_8a40, { 2, 1, 0 }
  uselistorder i1 %v2_8a18, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8a0c, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8a08, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v0_8a04, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_8a00, { 1, 0, 2, 3 }
  uselistorder i32 %v3_89fc, { 1, 0 }
  uselistorder i1 %v7_89ec, { 1, 0 }
  uselistorder i1 %v7_89c0, { 1, 0 }
  uselistorder i32 %v3_89bc, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_89a8, { 2, 1, 0 }
  uselistorder i32 %v6_8998, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_8964, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8944, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v6_8910, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_88f8, { 1, 2, 0 }
  uselistorder i32 %v1_88d4, { 3, 2, 1, 0 }
  uselistorder i32 %v6_88cc, { 1, 0 }
  uselistorder i32 %v6_8890, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_8878, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 19, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 15, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 7, 9, 8, 2, 10, 11, 13, 14, 12, 16, 15, 18, 17, 19, 1, 20, 21, 23, 22, 24, 25, 26, 27, 29, 28, 6, 30, 31, 32, 35, 33, 34, 5, 4, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 13, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 %arg2, { 6, 5, 4, 1, 0, 3, 2, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_8ef8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d08, { 1, 0 }
  uselistorder label %dec_label_pc_8ca4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8c30, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_8f14(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8f14:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_8f14 = load i32, i32* @r4, align 4
  %v24_8f14 = load i32, i32* @fp, align 4
  %v27_8f14 = load i32, i32* @lr, align 4
  store i32 0, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_8f40 = call i32 @function_11998(i32 %arg2, i32 4)
  %v0_8f44 = load i32, i32* @r4, align 4
  store i32 %v0_8f44, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8f50 = load i32, i32* @sb, align 4
  store i32 %v0_8f50, i32* %r3.global-to-local, align 4
  %v0_8f54 = load i32, i32* @r5, align 4
  %v5_8f58 = inttoptr i32 %v0_8f44 to i32*
  %v6_8f58 = call i32 @function_8258(i32 %v0_8f54, i32* %v5_8f58, i32 2, i32 %v0_8f50, i32 %v2_8f40)
  %v1_8f64 = urem i32 %v6_8f58, 256
  store i32 %v1_8f64, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8f70 = load i32, i32* @r4, align 4
  store i32 %v0_8f70, i32* %r1.global-to-local, align 4
  %v0_8f74 = load i32, i32* @r5, align 4
  %v5_8f78 = trunc i32 %v6_8f58 to i8
  %v6_8f7c = inttoptr i32 %v0_8f70 to i32*
  %v7_8f7c = call i32 @function_8258(i32 %v0_8f74, i32* %v6_8f7c, i32 3, i32 65535, i32 %v6_8f58)
  %v0_8f80 = load i32, i32* @r4, align 4
  store i32 %v0_8f80, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f90 = load i32, i32* @r5, align 4
  %v5_8f94 = inttoptr i32 %v0_8f80 to i32*
  %v6_8f94 = call i32 @function_8258(i32 %v0_8f90, i32* %v5_8f94, i32 4, i32 64, i32 %v7_8f7c)
  %v1_8f9c = urem i32 %v6_8f94, 256
  store i32 %v1_8f9c, i32* %ip.global-to-local, align 4
  %v0_8fa0 = load i32, i32* @r4, align 4
  store i32 %v0_8fa0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fac = load i32, i32* @r5, align 4
  %v6_8fb4 = inttoptr i32 %v0_8fa0 to i32*
  %v7_8fb4 = call i32 @function_8258(i32 %v0_8fac, i32* %v6_8fb4, i32 5, i32 1, i32 %v1_8f9c)
  %v1_8fc0 = urem i32 %v7_8fb4, 256
  store i32 %v1_8fc0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8fcc = load i32, i32* @r4, align 4
  store i32 %v0_8fcc, i32* %r1.global-to-local, align 4
  %v0_8fd0 = load i32, i32* @r5, align 4
  %v5_8fd8 = inttoptr i32 %v0_8fcc to i32*
  %v6_8fd8 = call i32 @function_8258(i32 %v0_8fd0, i32* %v5_8fd8, i32 6, i32 65535, i32 %v1_8fc0)
  %v0_8fe0 = load i32, i32* @r4, align 4
  store i32 %v0_8fe0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8fd8, i32* %fp.global-to-local, align 4
  %v0_8ff0 = load i32, i32* @r5, align 4
  %v5_8ff4 = inttoptr i32 %v0_8fe0 to i32*
  %v6_8ff4 = call i32 @function_8258(i32 %v0_8ff0, i32* %v5_8ff4, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8ff8 = load i32, i32* @r4, align 4
  store i32 %v0_8ff8, i32* %r1.global-to-local, align 4
  %v0_8ffc = load i32, i32* @sb, align 4
  store i32 %v0_8ffc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8ff4, i32* @r8, align 4
  %v0_9008 = load i32, i32* @r5, align 4
  %v5_900c = inttoptr i32 %v0_8ff8 to i32*
  %v6_900c = call i32 @function_8258(i32 %v0_9008, i32* %v5_900c, i32 %v0_8ffc, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_901c = load i32, i32* @r4, align 4
  store i32 %v0_901c, i32* %r1.global-to-local, align 4
  %v0_9020 = load i32, i32* @r5, align 4
  %v5_9024 = inttoptr i32 %v0_901c to i32*
  %v6_9024 = call i32 @function_8258(i32 %v0_9020, i32* %v5_9024, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_902c = urem i32 %v6_9024, 256
  store i32 %v1_902c, i32* %ip.global-to-local, align 4
  %v0_9030 = load i32, i32* @r4, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_9038 = load i32, i32* @sb, align 4
  store i32 %v0_9038, i32* %r3.global-to-local, align 4
  %v0_903c = load i32, i32* @r5, align 4
  %v5_9044 = inttoptr i32 %v0_9030 to i32*
  %v6_9044 = call i32 @function_8258(i32 %v0_903c, i32* %v5_9044, i32 18, i32 %v0_9038, i32 %v1_902c)
  %v0_904c = load i32, i32* @r4, align 4
  store i32 %v0_904c, i32* %r1.global-to-local, align 4
  %v2_9050 = load i32, i32* @global_var_202dc.42, align 4
  store i32 %v2_9050, i32* %r3.global-to-local, align 4
  store i32 %v6_9044, i32* @r7, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_905c = load i32, i32* @r5, align 4
  %v5_9060 = inttoptr i32 %v0_904c to i32*
  %v6_9060 = call i32 @function_8258(i32 %v0_905c, i32* %v5_9060, i32 19, i32 %v2_9050, i32 ptrtoint (i32* @0 to i32))
  %v0_9068 = load i32, i32* @sb, align 4
  %v1_906c = inttoptr i32 %v0_9068 to i32*
  %v2_906c = call i32 @function_102c4(i32* %v1_906c)
  %v1_9070 = load i32, i32* @r6, align 4
  %v2_9070 = add i32 %v1_9070, %v2_906c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9084 = call i32 @function_10e30(i32 2, i32 3, i32 6)
  %v7_9088 = icmp eq i32 %v3_9084, -1
  store i1 %v7_9088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9088, label %dec_label_pc_9558, label %dec_label_pc_9094

dec_label_pc_9094:                                ; preds = %dec_label_pc_8f14
  store i32 1, i32* %stack_var_-44, align 4
  %v6_909c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_909c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_90a4 = load i32, i32* @sb, align 4
  store i32 %v0_90a4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_90b0 = call i32 @function_10dec(i32 %v3_9084, i32 %v0_90a4, i32 3, i32 %v6_909c, i32 4)
  %v7_90b4 = icmp eq i32 %v5_90b0, -1
  store i1 %v7_90b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90b4, label %dec_label_pc_9564, label %dec_label_pc_90bc

dec_label_pc_90bc:                                ; preds = %dec_label_pc_9094
  %v0_90bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_90d0 = load i32, i32* @r8, align 4
  %v3_90d4 = mul i32 %v7_8f7c, 65536
  store i32 %v3_90d4, i32* %r1.global-to-local, align 4
  %v0_90d8 = load i32, i32* @r7, align 4
  %v1_90d8 = urem i32 %v0_90d8, 256
  store i32 %v1_90d8, i32* @r7, align 4
  %v3_90dc = urem i32 %v0_90bc, 65536
  store i32 %v3_90dc, i32* %r3.global-to-local, align 4
  %v3_90e0 = urem i32 %v0_90d0, 65536
  store i32 %v3_90e0, i32* %ip.global-to-local, align 4
  %v2_90e4 = icmp eq i32 %arg2, 0
  store i1 %v2_90e4, i1* %cpsr_z.global-to-local, align 1
  %v0_90f4 = load i32, i32* @sb, align 4
  store i32 %v0_90f4, i32* %stack_var_-44, align 4
  %v3_90f8 = urem i32 %v7_8f7c, 65536
  store i32 %v3_90f8, i32* @fp, align 4
  br i1 %v2_90e4, label %dec_label_pc_92ec.preheader, label %dec_label_pc_9108

dec_label_pc_9108:                                ; preds = %dec_label_pc_90bc
  %v3_90d0 = mul i32 %v0_90d0, 65536
  %v3_90bc = mul i32 %v0_90bc, 65536
  %v3_910c = mul i32 %v6_900c, 65536
  %v1_9110 = add i32 %v3_910c, 3407872
  %tmp68 = udiv i32 %v1_9110, 256
  %v3_911c = and i32 %tmp68, 65280
  %v7_8f7c.not = or i32 %v7_8f7c, -65536
  %v1_9120 = xor i32 %v7_8f7c.not, 65535
  %v4_9124 = udiv i32 %v1_9110, 16777216
  %v5_9124 = or i32 %v3_911c, %v4_9124
  store i32 %v3_90d4, i32* %r3.global-to-local, align 4
  %tmp69 = mul i32 %v7_8f7c, 256
  %v3_913c = and i32 %tmp69, 65280
  %tmp70 = mul nsw i32 %v1_9120, 256
  %v3_9140 = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v7_8f7c, 256
  %v4_9144 = urem i32 %tmp71, 256
  %v5_9144 = or i32 %v4_9144, %v3_913c
  %tmp72 = udiv i32 %v1_9120, 256
  %v4_914c = urem i32 %tmp72, 256
  %v5_914c = or i32 %v4_914c, %v3_9140
  store i32 %v5_914c, i32* @r6, align 4
  store i32 %v3_90bc, i32* %r1.global-to-local, align 4
  store i32 %v3_90d0, i32* %r2.global-to-local, align 4
  %v1_9160 = add i32 %v3_910c, 524288
  %tmp73 = mul i32 %v0_90bc, 256
  %v3_9164 = and i32 %tmp73, 65280
  %v1_9168 = add i32 %v3_910c, 1835008
  store i32 %v1_9168, i32* @r5, align 4
  %tmp74 = mul i32 %v0_90d0, 256
  %v3_916c = and i32 %tmp74, 65280
  %v3_9174 = udiv i32 %v1_9168, 256
  %tmp75 = udiv i32 %v0_90bc, 256
  %v4_9178 = urem i32 %tmp75, 256
  %v5_9178 = or i32 %v4_9178, %v3_9164
  %tmp76 = udiv i32 %v0_90d0, 256
  %v4_917c = urem i32 %tmp76, 256
  %v5_917c = or i32 %v4_917c, %v3_916c
  store i32 %v5_917c, i32* %ip.global-to-local, align 4
  %v1_9180 = and i32 %v3_9174, 65280
  %tmp77 = udiv i32 %v1_9160, 256
  %v3_9184 = and i32 %tmp77, 65280
  store i32 %v3_9184, i32* @lr, align 4
  %v4_9198 = udiv i32 %v1_9160, 16777216
  %v5_9198 = or i32 %v3_9184, %v4_9198
  store i32 %v5_9198, i32* @r7, align 4
  %v4_919c = udiv i32 %v1_9168, 16777216
  %v5_919c = or i32 %v1_9180, %v4_919c
  store i32 %v5_919c, i32* @r8, align 4
  store i32 %v0_90f4, i32* @r4, align 4
  %v1_9200 = trunc i32 %v6_8f94 to i8
  %sext = mul nuw i32 %v5_9124, 65536
  %v4_9208 = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_9144, 65536
  %v4_920c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_914c, 65536
  %v4_9274 = sdiv i32 %sext9, 65536
  %v2_92a4 = icmp eq i32 %v1_90d8, 0
  %sext10 = mul nuw i32 %v5_9178, 65536
  %v4_92c8 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_917c, 65536
  %v4_92d0 = sdiv i32 %sext11, 65536
  %extract.t = trunc i32 %v4_9208 to i16
  br label %dec_label_pc_91a4

dec_label_pc_91a4:                                ; preds = %bb82, %dec_label_pc_9108
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_91b0 = call i32 @function_11998(i32 1510, i32 4)
  store i32 %v2_8f40, i32* %ip.global-to-local, align 4
  %v2_91bc = load i32, i32* @r4, align 4
  %v5_91bc = mul i32 %v2_91bc, 4
  %v6_91bc = add i32 %v5_91bc, %v2_8f40
  %v7_91bc = inttoptr i32 %v6_91bc to i32*
  store i32 %v2_91b0, i32* %v7_91bc, align 4
  %v3_91c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_91c0, i32* %r3.global-to-local, align 4
  %v0_91c4 = load i32, i32* %ip.global-to-local, align 4
  %v4_91c4 = mul i32 %v3_91c0, 4
  %v5_91c4 = add i32 %v0_91c4, %v4_91c4
  %v6_91c4 = inttoptr i32 %v5_91c4 to i32*
  %v7_91c4 = load i32, i32* %v6_91c4, align 4
  store i32 %v7_91c4, i32* %r4.global-to-local, align 4
  %v1_91c8 = inttoptr i32 %v7_91c4 to i8*
  %v2_91c8 = load i8, i8* %v1_91c8, align 1
  %tmp = urem i8 %v2_91c8, 16
  %v1_91cc = zext i8 %tmp to i32
  %v1_91d0 = or i32 %v1_91cc, 64
  store i32 %v1_91d0, i32* %r2.global-to-local, align 4
  %v1_91d4 = trunc i32 %v1_91d0 to i8
  store i8 %v1_91d4, i8* %v1_91c8, align 1
  %v0_91d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_91dc = mul i32 %v0_91d8, 24
  store i32 %v5_91dc, i32* %r1.global-to-local, align 4
  %v0_91e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_91e0 = inttoptr i32 %v0_91e0 to i8*
  %v2_91e0 = load i8, i8* %v1_91e0, align 1
  %v1_91e4 = and i8 %v2_91e0, -16
  %v1_91e8 = or i8 %v1_91e4, 5
  store i32 %v1_8fc0, i32* %lr.global-to-local, align 4
  store i8 %v1_91e8, i8* %v1_91e0, align 1
  store i32 %v6_8f58, i32* %r2.global-to-local, align 4
  %v2_91f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_91f8 = add i32 %v2_91f8, 1
  %v4_91f8 = inttoptr i32 %v3_91f8 to i8*
  store i8 %v5_8f78, i8* %v4_91f8, align 1
  store i32 %v1_8f9c, i32* %r3.global-to-local, align 4
  %v2_9200 = load i32, i32* %r4.global-to-local, align 4
  %v3_9200 = add i32 %v2_9200, 8
  %v4_9200 = inttoptr i32 %v3_9200 to i8*
  store i8 %v1_9200, i8* %v4_9200, align 1
  %v0_9204 = load i32, i32* %lr.global-to-local, align 4
  %v2_9204 = icmp eq i32 %v0_9204, 0
  store i1 %v2_9204, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_9208, i32* %ip.global-to-local, align 4
  store i32 %v4_920c, i32* %lr.global-to-local, align 4
  br i1 %v2_9204, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_91a4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9214 = load i32, i32* %r4.global-to-local, align 4
  %v4_9214 = add i32 %v3_9214, 6
  %v5_9214 = inttoptr i32 %v4_9214 to i16*
  store i16 64, i16* %v5_9214, align 2
  %v0_9218.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t27 = trunc i32 %v0_9218.pre to i16
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_91a4, %bb
  %v0_9218.off0 = phi i16 [ %extract.t, %dec_label_pc_91a4 ], [ %extract.t27, %bb ]
  %v2_9218 = load i32, i32* %r4.global-to-local, align 4
  %v3_9218 = add i32 %v2_9218, 2
  %v4_9218 = inttoptr i32 %v3_9218 to i16*
  store i16 %v0_9218.off0, i16* %v4_9218, align 2
  %v0_921c = load i32, i32* %r4.global-to-local, align 4
  %v1_921c = add i32 %v0_921c, 20
  store i32 %v1_921c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v3_9228 = add i32 %v0_921c, 9
  %v4_9228 = inttoptr i32 %v3_9228 to i8*
  store i8 47, i8* %v4_9228, align 1
  %v0_922c = load i32, i32* %lr.global-to-local, align 4
  %v1_922c = trunc i32 %v0_922c to i16
  %v2_922c = load i32, i32* %r4.global-to-local, align 4
  %v3_922c = add i32 %v2_922c, 4
  %v4_922c = inttoptr i32 %v3_922c to i16*
  store i16 %v1_922c, i16* %v4_922c, align 2
  %v0_9230 = load i32, i32* %ip.global-to-local, align 4
  %v1_9230 = trunc i32 %v0_9230 to i16
  %v2_9230 = load i32, i32* %r2.global-to-local, align 4
  %v3_9230 = add i32 %v2_9230, 2
  %v4_9230 = inttoptr i32 %v3_9230 to i16*
  store i16 %v1_9230, i16* %v4_9230, align 2
  store i32 %v6_9060, i32* %lr.global-to-local, align 4
  %v0_9238 = load i32, i32* %r4.global-to-local, align 4
  %v1_9238 = add i32 %v0_9238, 24
  %v2_9238 = inttoptr i32 %v1_9238 to i8*
  %v3_9238 = load i8, i8* %v2_9238, align 1
  %v4_9238 = zext i8 %v3_9238 to i32
  store i32 %v4_9238, i32* %r2.global-to-local, align 4
  %v2_923c = add i32 %v0_9238, 12
  %v3_923c = inttoptr i32 %v2_923c to i32*
  store i32 %v6_9060, i32* %v3_923c, align 4
  %v0_9240 = load i32, i32* %r2.global-to-local, align 4
  %v1_9240 = and i32 %v0_9240, -241
  %v1_9244 = or i32 %v1_9240, 64
  store i32 %v1_9244, i32* %r2.global-to-local, align 4
  %v0_9248 = load i32, i32* %r1.global-to-local, align 4
  %v1_9248 = load i32, i32* @sl, align 4
  %v2_9248 = add i32 %v1_9248, %v0_9248
  store i32 %v2_9248, i32* %r1.global-to-local, align 4
  %v1_924c = add i32 %v2_9248, 16
  %v2_924c = inttoptr i32 %v1_924c to i32*
  %v3_924c = load i32, i32* %v2_924c, align 4
  store i32 %v3_924c, i32* %r1.global-to-local, align 4
  %v1_9250 = trunc i32 %v1_9244 to i8
  %v2_9250 = load i32, i32* %r4.global-to-local, align 4
  %v3_9250 = add i32 %v2_9250, 24
  %v4_9250 = inttoptr i32 %v3_9250 to i8*
  store i8 %v1_9250, i8* %v4_9250, align 1
  %v0_9254 = load i32, i32* %r4.global-to-local, align 4
  %v1_9254 = add i32 %v0_9254, 24
  %v2_9254 = inttoptr i32 %v1_9254 to i8*
  %v3_9254 = load i8, i8* %v2_9254, align 1
  %v1_9258 = and i8 %v3_9254, -16
  %v1_925c = or i8 %v1_9258, 5
  store i8 %v1_925c, i8* %v2_9254, align 1
  %v0_9264 = load i32, i32* %r1.global-to-local, align 4
  %v1_9264 = load i32, i32* %r4.global-to-local, align 4
  %v2_9264 = add i32 %v1_9264, 16
  %v3_9264 = inttoptr i32 %v2_9264 to i32*
  store i32 %v0_9264, i32* %v3_9264, align 4
  store i32 %v6_8f58, i32* %r1.global-to-local, align 4
  %v0_926c = load i32, i32* %r4.global-to-local, align 4
  %v1_926c = add i32 %v0_926c, 24
  store i32 %v1_926c, i32* @r5, align 4
  %v3_9270 = add i32 %v0_926c, 25
  %v4_9270 = inttoptr i32 %v3_9270 to i8*
  store i8 %v5_8f78, i8* %v4_9270, align 1
  store i32 %v4_9274, i32* %r2.global-to-local, align 4
  %v0_9278 = load i32, i32* @r8, align 4
  %v1_9278 = trunc i32 %v0_9278 to i16
  %v2_9278 = load i32, i32* @r5, align 4
  %v3_9278 = add i32 %v2_9278, 2
  %v4_9278 = inttoptr i32 %v3_9278 to i16*
  store i16 %v1_9278, i16* %v4_9278, align 2
  %v0_927c = load i32, i32* %r2.global-to-local, align 4
  %v1_927c = trunc i32 %v0_927c to i16
  %v2_927c = load i32, i32* @r5, align 4
  %v3_927c = add i32 %v2_927c, 4
  %v4_927c = inttoptr i32 %v3_927c to i16*
  store i16 %v1_927c, i16* %v4_927c, align 2
  store i32 %v1_8f9c, i32* %r3.global-to-local, align 4
  %v0_9284 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9284, label %bb79, label %bb78

bb78:                                             ; preds = %.thread
  store i32 64, i32* %ip.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %.thread, %bb78
  %v2_9288 = load i32, i32* @r5, align 4
  %v3_9288 = add i32 %v2_9288, 8
  %v4_9288 = inttoptr i32 %v3_9288 to i8*
  store i8 %v1_9200, i8* %v4_9288, align 1
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9290 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9290, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9290 = load i32, i32* %ip.global-to-local, align 4
  %v2_9290 = trunc i32 %v1_9290 to i16
  %v3_9290 = load i32, i32* @r5, align 4
  %v4_9290 = add i32 %v3_9290, 6
  %v5_9290 = inttoptr i32 %v4_9290 to i16*
  store i16 %v2_9290, i16* %v5_9290, align 2
  %v0_9294.pre = load i32, i32* %r3.global-to-local, align 4
  %extract.t28 = trunc i32 %v0_9294.pre to i8
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9294.off0 = phi i8 [ 17, %bb79 ], [ %extract.t28, %bb80 ]
  %v2_9294 = load i32, i32* @r5, align 4
  %v3_9294 = add i32 %v2_9294, 9
  %v4_9294 = inttoptr i32 %v3_9294 to i8*
  store i8 %v0_9294.off0, i8* %v4_9294, align 1
  %v0_9298 = call i32 @function_d3a8()
  store i32 %v1_90d8, i32* @lr, align 4
  store i1 %v2_92a4, i1* %cpsr_z.global-to-local, align 1
  %v1_92a8 = sub i32 1023, %v0_9298
  store i32 %v1_92a8, i32* %r3.global-to-local, align 4
  br i1 %v2_92a4, label %.thread12, label %.thread13

.thread12:                                        ; preds = %bb81
  %v2_92b0 = load i32, i32* @r5, align 4
  %v3_92b0 = add i32 %v2_92b0, 16
  %v4_92b0 = inttoptr i32 %v3_92b0 to i32*
  store i32 %v1_92a8, i32* %v4_92b0, align 4
  br label %bb82

.thread13:                                        ; preds = %bb81
  %v1_92ac = load i32, i32* %r4.global-to-local, align 4
  %v2_92ac = add i32 %v1_92ac, 16
  %v3_92ac = inttoptr i32 %v2_92ac to i32*
  %v4_92ac = load i32, i32* %v3_92ac, align 4
  store i32 %v4_92ac, i32* %r3.global-to-local, align 4
  %v2_92b4 = load i32, i32* @r5, align 4
  %v3_92b4 = add i32 %v2_92b4, 16
  %v4_92b4 = inttoptr i32 %v3_92b4 to i32*
  store i32 %v4_92ac, i32* %v4_92b4, align 4
  br label %bb82

bb82:                                             ; preds = %.thread12, %.thread13
  %v1_92b8 = load i32, i32* @r5, align 4
  %v2_92b8 = add i32 %v1_92b8, 12
  %v3_92b8 = inttoptr i32 %v2_92b8 to i32*
  store i32 %v0_9298, i32* %v3_92b8, align 4
  %v3_92bc = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_92c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_92c4 = add i32 %v0_92c4, 44
  store i32 %v1_92c4, i32* @r6, align 4
  store i32 %v4_92c8, i32* %r2.global-to-local, align 4
  %v1_92cc = add i32 %v3_92bc, 1
  store i32 %v1_92cc, i32* @r4, align 4
  store i32 %v4_92d0, i32* %r3.global-to-local, align 4
  %v9_92d4 = icmp eq i32 %v1_92cc, %arg2
  store i1 %v9_92d4, i1* %cpsr_z.global-to-local, align 1
  %v0_92d8 = load i32, i32* @r7, align 4
  %v1_92d8 = trunc i32 %v0_92d8 to i16
  %v3_92d8 = add i32 %v0_92c4, 48
  %v4_92d8 = inttoptr i32 %v3_92d8 to i16*
  store i16 %v1_92d8, i16* %v4_92d8, align 2
  %v0_92dc = load i32, i32* %r2.global-to-local, align 4
  %v1_92dc = trunc i32 %v0_92dc to i16
  %v2_92dc = load i32, i32* @r6, align 4
  %v3_92dc = inttoptr i32 %v2_92dc to i16*
  store i16 %v1_92dc, i16* %v3_92dc, align 2
  %v0_92e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_92e0 = trunc i32 %v0_92e0 to i16
  %v2_92e0 = load i32, i32* @r6, align 4
  %v3_92e0 = add i32 %v2_92e0, 2
  %v4_92e0 = inttoptr i32 %v3_92e0 to i16*
  store i16 %v1_92e0, i16* %v4_92e0, align 2
  %v0_92e4 = load i32, i32* @r4, align 4
  store i32 %v0_92e4, i32* %stack_var_-44, align 4
  %v5_92e8 = icmp slt i32 %v1_92cc, %arg2
  br i1 %v5_92e8, label %dec_label_pc_91a4, label %dec_label_pc_92ec.preheader

dec_label_pc_92ec.preheader:                      ; preds = %bb82, %dec_label_pc_90bc
  %v1_9308 = add i32 %v6_900c, 8
  %v1_930c = add i32 %v6_900c, 52
  %v2_9318 = icmp eq i32 %v6_9060, -1
  %v7_9318 = icmp eq i32 %v6_9060, -1
  %v2_94fc = icmp eq i32 %v1_90d8, 0
  %v2_9518 = icmp eq i32 %v1_902c, 0
  br label %dec_label_pc_92ec

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92ec.preheader, %dec_label_pc_9544
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_90e4, label %dec_label_pc_9544, label %dec_label_pc_9300

dec_label_pc_9300:                                ; preds = %dec_label_pc_92ec
  store i32 %v6_900c, i32* %lr.global-to-local, align 4
  store i32 %v1_9308, i32* @sb, align 4
  store i32 %v1_930c, i32* @r8, align 4
  br label %dec_label_pc_9418

dec_label_pc_9314:                                ; preds = %dec_label_pc_9418
  store i32 %v6_9060, i32* %r2.global-to-local, align 4
  store i1 %v7_9318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9318, label %dec_label_pc_94a0, label %dec_label_pc_9320

dec_label_pc_9320:                                ; preds = %dec_label_pc_9440, %dec_label_pc_9314
  store i32 65535, i32* @r4, align 4
  %v0_9328 = load i32, i32* @fp, align 4
  %v9_9328 = icmp eq i32 %v0_9328, 65535
  store i1 %v9_9328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9328, label %dec_label_pc_94b8, label %dec_label_pc_9330

dec_label_pc_9330:                                ; preds = %dec_label_pc_94a0.dec_label_pc_9330_crit_edge, %dec_label_pc_9320
  %v1_9334 = phi i32 [ %v1_9334.pre, %dec_label_pc_94a0.dec_label_pc_9330_crit_edge ], [ 65535, %dec_label_pc_9320 ]
  store i32 %v3_90dc, i32* %r3.global-to-local, align 4
  %v9_9334 = icmp eq i32 %v3_90dc, %v1_9334
  store i1 %v9_9334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9334, label %dec_label_pc_94e0, label %dec_label_pc_933c

dec_label_pc_933c:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_9330
  %v1_9340 = phi i32 [ %v1_94d8, %dec_label_pc_94b8 ], [ %v1_9334, %dec_label_pc_9330 ]
  store i32 %v3_90e0, i32* @ip, align 4
  %v9_9340 = icmp eq i32 %v3_90e0, %v1_9340
  store i1 %v9_9340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9340, label %dec_label_pc_94f4, label %dec_label_pc_9348

dec_label_pc_9348:                                ; preds = %dec_label_pc_94e0, %dec_label_pc_933c
  store i32 %v1_90d8, i32* @lr, align 4
  store i1 %v2_94fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94fc, label %dec_label_pc_9510, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_9348
  %v1_9350 = load i32, i32* @r5, align 4
  %v2_9350 = add i32 %v1_9350, 16
  %v3_9350 = inttoptr i32 %v2_9350 to i32*
  %v4_9350 = load i32, i32* %v3_9350, align 4
  store i32 %v4_9350, i32* @r3, align 4
  %v2_9354 = load i32, i32* @r6, align 4
  %v3_9354 = add i32 %v2_9354, 16
  %v4_9354 = inttoptr i32 %v3_9354 to i32*
  store i32 %v4_9350, i32* %v4_9354, align 4
  br label %dec_label_pc_935c

dec_label_pc_935c:                                ; preds = %bb85, %.thread14
  store i32 %v1_902c, i32* %r1.global-to-local, align 4
  store i1 %v2_9518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9518, label %dec_label_pc_9368, label %dec_label_pc_9524

dec_label_pc_9368:                                ; preds = %dec_label_pc_935c, %dec_label_pc_9510, %dec_label_pc_9524
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_936c = load i32, i32* @r5, align 4
  %v3_936c = add i32 %v2_936c, 10
  %v4_936c = inttoptr i32 %v3_936c to i16*
  store i16 0, i16* %v4_936c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9374 = load i32, i32* @r5, align 4
  store i32 %v0_9374, i32* @r0, align 4
  %v2_9378 = call i32 @function_bf78(i32 %v0_9374, i32 20)
  %v3_9378 = trunc i32 %v2_9378 to i16
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9380 = load i32, i32* @r5, align 4
  %v4_9380 = add i32 %v3_9380, 10
  %v5_9380 = inttoptr i32 %v4_9380 to i16*
  store i16 %v3_9378, i16* %v5_9380, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9388 = load i32, i32* %ip.global-to-local, align 4
  %v1_9388 = trunc i32 %v0_9388 to i16
  %v2_9388 = load i32, i32* @r6, align 4
  %v3_9388 = add i32 %v2_9388, 10
  %v4_9388 = inttoptr i32 %v3_9388 to i16*
  store i16 %v1_9388, i16* %v4_9388, align 2
  %v0_938c = load i32, i32* @r6, align 4
  store i32 %v0_938c, i32* @r0, align 4
  %v2_9390 = call i32 @function_bf78(i32 %v0_938c, i32 20)
  %v3_9390 = trunc i32 %v2_9390 to i16
  %v3_9394 = load i32, i32* @r6, align 4
  %v4_9394 = add i32 %v3_9394, 10
  %v5_9394 = inttoptr i32 %v4_9394 to i16*
  store i16 %v3_9390, i16* %v5_9394, align 2
  %v2_939c = load i32, i32* @r7, align 4
  %v3_939c = add i32 %v2_939c, 6
  %v4_939c = inttoptr i32 %v3_939c to i16*
  store i16 0, i16* %v4_939c, align 2
  %v0_93a0 = load i32, i32* @r7, align 4
  store i32 %v0_93a0, i32* @r1, align 4
  %v1_93a4 = add i32 %v0_93a0, 4
  %v2_93a4 = inttoptr i32 %v1_93a4 to i16*
  %v3_93a4 = load i16, i16* %v2_93a4, align 2
  %v4_93a4 = zext i16 %v3_93a4 to i32
  store i32 %v4_93a4, i32* %r2.global-to-local, align 4
  %v0_93a8 = load i32, i32* @sb, align 4
  store i32 %v0_93a8, i32* %r3.global-to-local, align 4
  %v0_93ac = load i32, i32* @r6, align 4
  %v4_93b0 = call i32 @function_bfc8(i32 %v0_93ac, i32 %v0_93a0, i32 %v4_93a4, i32 %v0_93a8)
  %v5_93b0 = trunc i32 %v4_93b0 to i16
  %v3_93b4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_93b4, i32* %r2.global-to-local, align 4
  %v3_93b8 = mul i32 %v3_93b4, 32
  store i32 %v3_93b8, i32* %r3.global-to-local, align 4
  %v0_93bc = load i32, i32* @r5, align 4
  %v1_93bc = add i32 %v0_93bc, 16
  %v2_93bc = inttoptr i32 %v1_93bc to i32*
  %v3_93bc = load i32, i32* %v2_93bc, align 4
  %v5_93c0 = mul i32 %v3_93b4, 24
  store i32 %v5_93c0, i32* %r3.global-to-local, align 4
  %v1_93c4 = load i32, i32* @sl, align 4
  %v2_93c4 = add i32 %v1_93c4, %v5_93c0
  store i32 %v2_93c4, i32* @lr, align 4
  %v2_93c8 = add i32 %v2_93c4, 4
  %v3_93c8 = inttoptr i32 %v2_93c8 to i32*
  store i32 %v3_93bc, i32* %v3_93c8, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_93d4 = load i32, i32* @r7, align 4
  %v4_93d4 = add i32 %v3_93d4, 6
  %v5_93d4 = inttoptr i32 %v4_93d4 to i16*
  store i16 %v5_93b0, i16* %v5_93d4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_93dc = load i32, i32* %r1.global-to-local, align 4
  %v1_93dc = trunc i32 %v0_93dc to i16
  %v2_93dc = load i32, i32* %r3.global-to-local, align 4
  %v3_93dc = load i32, i32* @sl, align 4
  %v4_93dc = add i32 %v3_93dc, %v2_93dc
  %v5_93dc = inttoptr i32 %v4_93dc to i16*
  store i16 %v1_93dc, i16* %v5_93dc, align 2
  %v0_93e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_93e0 = trunc i32 %v0_93e0 to i16
  %v2_93e0 = load i32, i32* @lr, align 4
  %v3_93e0 = add i32 %v2_93e0, 2
  %v4_93e0 = inttoptr i32 %v3_93e0 to i16*
  store i16 %v1_93e0, i16* %v4_93e0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_93e8 = load i32, i32* @r5, align 4
  store i32 %v0_93e8, i32* %r1.global-to-local, align 4
  %v0_93f0 = load i32, i32* @r8, align 4
  store i32 %v0_93f0, i32* %r2.global-to-local, align 4
  %v0_93f4 = load i32, i32* @lr, align 4
  %v0_93f8 = load i32, i32* %ip.global-to-local, align 4
  %v6_93fc = call i32 @function_10dac(i32 %v3_9084, i32 %v0_93e8, i32 %v0_93f0, i32 16384, i32 %v0_93f4, i32 %v0_93f8)
  %v3_9400 = load i32, i32* %stack_var_-44, align 4
  %v1_9404 = add i32 %v3_9400, 1
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_940c = icmp eq i32 %v1_9404, %arg2
  store i1 %v9_940c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9404, i32* %stack_var_-44, align 4
  %v6_9414 = icmp slt i32 %v1_9404, %arg2
  br i1 %v6_9414, label %dec_label_pc_9418, label %dec_label_pc_9544

dec_label_pc_9418:                                ; preds = %dec_label_pc_9368, %dec_label_pc_9300
  %v1_942c = phi i32 [ %v1_9404, %dec_label_pc_9368 ], [ 0, %dec_label_pc_9300 ]
  %v5_941c = mul i32 %v1_942c, 24
  %v1_9420 = load i32, i32* @sl, align 4
  %v2_9420 = add i32 %v1_9420, %v5_941c
  store i32 %v2_9420, i32* %r3.global-to-local, align 4
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_9428 = add i32 %v2_9420, 20
  %v2_9428 = inttoptr i32 %v1_9428 to i8*
  %v3_9428 = load i8, i8* %v2_9428, align 1
  %v4_9428 = zext i8 %v3_9428 to i32
  store i32 %v4_9428, i32* %r2.global-to-local, align 4
  %v4_942c = mul i32 %v1_942c, 4
  %v5_942c = add i32 %v4_942c, %v2_8f40
  %v6_942c = inttoptr i32 %v5_942c to i32*
  %v7_942c = load i32, i32* %v6_942c, align 4
  store i32 %v7_942c, i32* @r5, align 4
  %v2_9430 = icmp ugt i8 %v3_9428, 30
  %v7_9430 = icmp eq i8 %v3_9428, 31
  store i1 %v7_9430, i1* %cpsr_z.global-to-local, align 1
  %v1_9434 = add i32 %v7_942c, 24
  store i32 %v1_9434, i32* @r6, align 4
  %v1_9438 = add i32 %v7_942c, 44
  store i32 %v1_9438, i32* @r7, align 4
  %v2_943c = xor i1 %v7_9430, true
  %v3_943c = and i1 %v2_9430, %v2_943c
  br i1 %v3_943c, label %dec_label_pc_9314, label %dec_label_pc_9440

dec_label_pc_9440:                                ; preds = %dec_label_pc_9418
  %v1_9440 = add i32 %v2_9420, 16
  %v2_9440 = inttoptr i32 %v1_9440 to i32*
  %v3_9440 = load i32, i32* %v2_9440, align 4
  store i32 %v3_9440, i32* %r4.global-to-local, align 4
  %v0_9444 = call i32 @function_d3a8()
  %v3_9448 = load i32, i32* %stack_var_-44, align 4
  %v5_9450 = mul i32 %v3_9448, 24
  %v1_9454 = and i32 %v3_9440, 16711680
  store i32 %v1_9454, i32* %ip.global-to-local, align 4
  %v3_9458 = udiv i32 %v3_9440, 16777216
  %v4_945c = udiv i32 %v1_9454, 256
  %v5_945c = or i32 %v4_945c, %v3_9458
  store i32 %v5_945c, i32* %r2.global-to-local, align 4
  %v1_9460 = load i32, i32* @sl, align 4
  %v2_9460 = add i32 %v1_9460, %v5_9450
  store i32 %v2_9460, i32* %r1.global-to-local, align 4
  %v1_9464 = and i32 %v3_9440, 65280
  store i32 %v1_9464, i32* %r3.global-to-local, align 4
  %v1_9468 = add i32 %v2_9460, 20
  %v2_9468 = inttoptr i32 %v1_9468 to i8*
  %v3_9468 = load i8, i8* %v2_9468, align 1
  %v4_9468 = zext i8 %v3_9468 to i32
  store i32 %v4_9468, i32* %ip.global-to-local, align 4
  %v5_9470 = call i32 @llvm.bswap.i32(i32 %v3_9440)
  %v7_9474 = lshr i32 %v0_9444, %v4_9468
  %v8_9474 = add i32 %v7_9474, %v5_9470
  %v1_9480 = and i32 %v8_9474, 65280
  store i32 %v1_9480, i32* %r1.global-to-local, align 4
  %v5_948c = call i32 @llvm.bswap.i32(i32 %v8_9474)
  store i32 %v5_948c, i32* %r3.global-to-local, align 4
  store i32 %v6_9060, i32* %r2.global-to-local, align 4
  store i1 %v7_9318, i1* %cpsr_z.global-to-local, align 1
  %v1_9498 = load i32, i32* @r5, align 4
  %v2_9498 = add i32 %v1_9498, 16
  %v3_9498 = inttoptr i32 %v2_9498 to i32*
  store i32 %v5_948c, i32* %v3_9498, align 4
  br i1 %v2_9318, label %dec_label_pc_94a0, label %dec_label_pc_9320

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9440, %dec_label_pc_9314
  %v0_94a0 = call i32 @function_d3a8()
  store i32 65535, i32* @r4, align 4
  %v0_94ac = load i32, i32* @fp, align 4
  %v9_94ac = icmp eq i32 %v0_94ac, 65535
  store i1 %v9_94ac, i1* %cpsr_z.global-to-local, align 1
  %v1_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = add i32 %v1_94b0, 12
  %v3_94b0 = inttoptr i32 %v2_94b0 to i32*
  store i32 %v0_94a0, i32* %v3_94b0, align 4
  br i1 %v9_94ac, label %dec_label_pc_94b8, label %dec_label_pc_94a0.dec_label_pc_9330_crit_edge

dec_label_pc_94a0.dec_label_pc_9330_crit_edge:    ; preds = %dec_label_pc_94a0
  %v1_9334.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9330

dec_label_pc_94b8:                                ; preds = %dec_label_pc_94a0, %dec_label_pc_9320
  %v0_94b8 = call i32 @function_d3a8()
  %v3_94c0 = urem i32 %v0_94b8, 65536
  %v1_94c8 = sub nsw i32 999, %v3_94c0
  store i32 %v1_94c8, i32* %r3.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94b8 to i16
  %v2_94cc = load i32, i32* @r5, align 4
  %v3_94cc = add i32 %v2_94cc, 4
  %v4_94cc = inttoptr i32 %v3_94cc to i16*
  store i16 %v1_94cc, i16* %v4_94cc, align 2
  %v0_94d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94d0 = trunc i32 %v0_94d0 to i16
  %v2_94d0 = load i32, i32* @r6, align 4
  %v3_94d0 = add i32 %v2_94d0, 4
  %v4_94d0 = inttoptr i32 %v3_94d0 to i16*
  store i16 %v1_94d0, i16* %v4_94d0, align 2
  store i32 %v3_90dc, i32* %r3.global-to-local, align 4
  %v1_94d8 = load i32, i32* @r4, align 4
  %v9_94d8 = icmp eq i32 %v3_90dc, %v1_94d8
  store i1 %v9_94d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_94d8, label %dec_label_pc_94e0, label %dec_label_pc_933c

dec_label_pc_94e0:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_9330
  %v0_94e0 = call i32 @function_d3a8()
  %v1_94e0 = trunc i32 %v0_94e0 to i16
  store i32 %v3_90e0, i32* @ip, align 4
  %v1_94e8 = load i32, i32* @r4, align 4
  %v9_94e8 = icmp eq i32 %v3_90e0, %v1_94e8
  store i1 %v9_94e8, i1* %cpsr_z.global-to-local, align 1
  %v3_94ec = load i32, i32* @r5, align 4
  %v4_94ec = add i32 %v3_94ec, 44
  %v5_94ec = inttoptr i32 %v4_94ec to i16*
  store i16 %v1_94e0, i16* %v5_94ec, align 2
  br i1 %v9_94e8, label %dec_label_pc_94f4, label %dec_label_pc_9348

dec_label_pc_94f4:                                ; preds = %dec_label_pc_94e0, %dec_label_pc_933c
  %v0_94f4 = call i32 @function_d3a8()
  %v1_94f4 = trunc i32 %v0_94f4 to i16
  store i32 %v1_90d8, i32* @lr, align 4
  store i1 %v2_94fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94fc, label %.thread29, label %bb85

.thread29:                                        ; preds = %dec_label_pc_94f4
  %v3_950430 = load i32, i32* @r7, align 4
  %v4_950431 = add i32 %v3_950430, 2
  %v5_950432 = inttoptr i32 %v4_950431 to i16*
  store i16 %v1_94f4, i16* %v5_950432, align 2
  br label %dec_label_pc_9510

bb85:                                             ; preds = %dec_label_pc_94f4
  %v1_9500 = load i32, i32* @r5, align 4
  %v2_9500 = add i32 %v1_9500, 16
  %v3_9500 = inttoptr i32 %v2_9500 to i32*
  %v4_9500 = load i32, i32* %v3_9500, align 4
  store i32 %v4_9500, i32* @r3, align 4
  %v3_9504 = load i32, i32* @r7, align 4
  %v4_9504 = add i32 %v3_9504, 2
  %v5_9504 = inttoptr i32 %v4_9504 to i16*
  store i16 %v1_94f4, i16* %v5_9504, align 2
  %v1_9508 = load i32, i32* @r3, align 4
  %v2_9508 = load i32, i32* @r6, align 4
  %v3_9508 = add i32 %v2_9508, 16
  %v4_9508 = inttoptr i32 %v3_9508 to i32*
  store i32 %v1_9508, i32* %v4_9508, align 4
  br label %dec_label_pc_935c

dec_label_pc_9510:                                ; preds = %.thread29, %dec_label_pc_9348
  %v0_9510 = call i32 @function_d3a8()
  store i32 %v1_902c, i32* %r1.global-to-local, align 4
  store i1 %v2_9518, i1* %cpsr_z.global-to-local, align 1
  %v1_951c = load i32, i32* @r6, align 4
  %v2_951c = add i32 %v1_951c, 16
  %v3_951c = inttoptr i32 %v2_951c to i32*
  store i32 %v0_9510, i32* %v3_951c, align 4
  br i1 %v2_9518, label %dec_label_pc_9368, label %dec_label_pc_9524

dec_label_pc_9524:                                ; preds = %dec_label_pc_935c, %dec_label_pc_9510
  %v0_9524 = load i32, i32* @r7, align 4
  %v1_9524 = add i32 %v0_9524, 8
  store i32 %v1_9524, i32* @r4, align 4
  store i32 %v6_900c, i32* %r1.global-to-local, align 4
  %v2_9530 = call i32 @function_d46c(i32 %v1_9524, i32 %v6_900c)
  store i32 %v6_900c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_953c = load i32, i32* @r4, align 4
  %v4_953c = add i32 %v2_953c, %v6_900c
  %v5_953c = inttoptr i32 %v4_953c to i8*
  store i8 0, i8* %v5_953c, align 1
  br label %dec_label_pc_9368

dec_label_pc_9544:                                ; preds = %dec_label_pc_9368, %dec_label_pc_92ec
  %v2_9548 = call i32 @function_102c4(i32* null)
  store i32 %v2_9070, i32* %ip.global-to-local, align 4
  %v9_9550 = icmp eq i32 %v2_9070, %v2_9548
  store i1 %v9_9550, i1* %cpsr_z.global-to-local, align 1
  %v6_9554 = icmp slt i32 %v2_9070, %v2_9548
  br i1 %v6_9554, label %dec_label_pc_9558, label %dec_label_pc_92ec

dec_label_pc_9558:                                ; preds = %dec_label_pc_9544, %dec_label_pc_8f14, %dec_label_pc_9564
  %v1_9560 = phi i32 [ %v3_9084, %dec_label_pc_8f14 ], [ %v1_9568, %dec_label_pc_9564 ], [ %v2_9548, %dec_label_pc_9544 ]
  store i32 %v3_8f14, i32* %r4.global-to-local, align 4
  store i32 %v24_8f14, i32* %fp.global-to-local, align 4
  store i32 %v27_8f14, i32* %lr.global-to-local, align 4
  ret i32 %v1_9560

dec_label_pc_9564:                                ; preds = %dec_label_pc_9094
  %v1_9568 = call i32 @function_10644(i32 %v3_9084)
  br label %dec_label_pc_9558

; uselistorder directives
  uselistorder i16 %v1_94f4, { 1, 0 }
  uselistorder i32 %v1_94d8, { 1, 0 }
  uselistorder i32 %v0_94b8, { 1, 0 }
  uselistorder i32 %v5_948c, { 1, 0 }
  uselistorder i32 %v3_9440, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v7_942c, { 1, 0, 2 }
  uselistorder i32 %v1_9404, { 1, 2, 0, 3 }
  uselistorder i32 %v3_93b4, { 1, 0, 2 }
  uselistorder i1 %v2_9518, { 2, 3, 1, 0 }
  uselistorder i1 %v2_94fc, { 2, 3, 1, 0 }
  uselistorder i1 %v7_9318, { 2, 1, 0 }
  uselistorder i32 %v0_9298, { 1, 0 }
  uselistorder i32 %v1_9120, { 1, 0 }
  uselistorder i32 %v3_910c, { 2, 1, 0 }
  uselistorder i1 %v2_90e4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_90d8, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_90d4, { 1, 0 }
  uselistorder i32 %v0_90d0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_90bc, { 2, 0, 1, 3 }
  uselistorder i1 %v7_90b4, { 1, 0 }
  uselistorder i1 %v7_9088, { 1, 0 }
  uselistorder i32 %v3_9084, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_9070, { 2, 1, 0 }
  uselistorder i32 %v6_9060, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_902c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_900c, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_8fc0, { 1, 2, 0 }
  uselistorder i32 %v1_8f9c, { 3, 2, 1, 0 }
  uselistorder i32 %v6_8f94, { 1, 0 }
  uselistorder i32 %v7_8f7c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v6_8f58, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_8f40, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 10, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 32, 31, 34, 33, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 14, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 6, 5, 4, 7, 1, 0, 3, 2, 8, 9, 10 }
  uselistorder label %dec_label_pc_9558, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9524, { 1, 0 }
  uselistorder label %dec_label_pc_9368, { 2, 1, 0 }
  uselistorder label %dec_label_pc_92ec, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_9574(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9574:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp32 = call i8 @__decompiler_undefined_function_3()
  %tmp33 = call i16 @__decompiler_undefined_function_2()
  %tmp34 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp62 = call i16 @__decompiler_undefined_function_2()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9574 = load i32, i32* @r4, align 4
  %v27_9574 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @fp, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_95a0 = call i32 @function_11998(i32 %arg2, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_95b0 = call i32 @function_11998(i32 %arg2, i32 4)
  %v0_95b4 = load i32, i32* @r4, align 4
  store i32 %v0_95b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r7, align 4
  store i32 %v0_95c0, i32* %r3.global-to-local, align 4
  %v0_95c4 = load i32, i32* @r5, align 4
  store i32 %v0_95c4, i32* %r0.global-to-local, align 4
  %v5_95c8 = inttoptr i32 %v0_95b4 to i32*
  %v6_95c8 = call i32 @function_8258(i32 %v0_95c4, i32* %v5_95c8, i32 2, i32 %v0_95c0, i32 %v2_95b0)
  %v1_95d4 = urem i32 %v6_95c8, 256
  store i32 %v1_95d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_95e0 = load i32, i32* @r4, align 4
  store i32 %v0_95e0, i32* %r1.global-to-local, align 4
  %v0_95e4 = load i32, i32* @r5, align 4
  store i32 %v0_95e4, i32* %r0.global-to-local, align 4
  %v5_95e8 = trunc i32 %v6_95c8 to i8
  %v6_95ec = inttoptr i32 %v0_95e0 to i32*
  %v7_95ec = call i32 @function_8258(i32 %v0_95e4, i32* %v6_95ec, i32 3, i32 65535, i32 %v6_95c8)
  %v0_95f0 = load i32, i32* @r4, align 4
  store i32 %v0_95f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_95ec, i32* @r8, align 4
  %v0_9600 = load i32, i32* @r5, align 4
  store i32 %v0_9600, i32* %r0.global-to-local, align 4
  %v5_9604 = inttoptr i32 %v0_95f0 to i32*
  %v6_9604 = call i32 @function_8258(i32 %v0_9600, i32* %v5_9604, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_960c = urem i32 %v6_9604, 256
  store i32 %v1_960c, i32* %ip.global-to-local, align 4
  %v0_9610 = load i32, i32* @r4, align 4
  store i32 %v0_9610, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_961c = load i32, i32* @r5, align 4
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  %v5_9620 = trunc i32 %v6_9604 to i8
  %v6_9624 = inttoptr i32 %v0_9610 to i32*
  %v7_9624 = call i32 @function_8258(i32 %v0_961c, i32* %v6_9624, i32 5, i32 1, i32 %v6_9604)
  %v1_9630 = urem i32 %v7_9624, 256
  store i32 %v1_9630, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9638 = load i32, i32* @r4, align 4
  store i32 %v0_9638, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9640 = load i32, i32* @r5, align 4
  store i32 %v0_9640, i32* %r0.global-to-local, align 4
  %v5_9648 = inttoptr i32 %v0_9638 to i32*
  %v6_9648 = call i32 @function_8258(i32 %v0_9640, i32* %v5_9648, i32 7, i32 65535, i32 %v1_9630)
  %v0_964c = load i32, i32* @r4, align 4
  store i32 %v0_964c, i32* %r1.global-to-local, align 4
  %v3_9650 = mul i32 %v6_9648, 65536
  store i32 %v3_9650, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9658 = load i32, i32* @r7, align 4
  store i32 %v0_9658, i32* %r3.global-to-local, align 4
  %v0_965c = load i32, i32* @r5, align 4
  store i32 %v0_965c, i32* %r0.global-to-local, align 4
  %v3_9660 = urem i32 %v6_9648, 65536
  store i32 %v3_9660, i32* @sb, align 4
  %v5_9664 = inttoptr i32 %v0_964c to i32*
  %v6_9664 = call i32 @function_8258(i32 %v0_965c, i32* %v5_9664, i32 10, i32 %v0_9658, i32 ptrtoint (i32* @0 to i32))
  %v1_966c = urem i32 %v6_9664, 256
  store i32 %v1_966c, i32* %ip.global-to-local, align 4
  %v0_9670 = load i32, i32* @r4, align 4
  store i32 %v0_9670, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_967c = load i32, i32* @r5, align 4
  store i32 %v0_967c, i32* %r0.global-to-local, align 4
  %v5_9684 = inttoptr i32 %v0_9670 to i32*
  %v6_9684 = call i32 @function_8258(i32 %v0_967c, i32* %v5_9684, i32 11, i32 1, i32 %v1_966c)
  %v1_968c = urem i32 %v6_9684, 256
  store i32 %v1_968c, i32* %ip.global-to-local, align 4
  %v0_9690 = load i32, i32* @r4, align 4
  store i32 %v0_9690, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_969c = load i32, i32* @r5, align 4
  store i32 %v0_969c, i32* %r0.global-to-local, align 4
  %v5_96a4 = inttoptr i32 %v0_9690 to i32*
  %v6_96a4 = call i32 @function_8258(i32 %v0_969c, i32* %v5_96a4, i32 12, i32 1, i32 %v1_968c)
  %v1_96ac = urem i32 %v6_96a4, 256
  store i32 %v1_96ac, i32* %ip.global-to-local, align 4
  %v0_96b0 = load i32, i32* @r4, align 4
  store i32 %v0_96b0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_96b8 = load i32, i32* @r7, align 4
  store i32 %v0_96b8, i32* %r3.global-to-local, align 4
  %v0_96bc = load i32, i32* @r5, align 4
  store i32 %v0_96bc, i32* %r0.global-to-local, align 4
  %v5_96c4 = inttoptr i32 %v0_96b0 to i32*
  %v6_96c4 = call i32 @function_8258(i32 %v0_96bc, i32* %v5_96c4, i32 13, i32 %v0_96b8, i32 %v1_96ac)
  %v1_96cc = urem i32 %v6_96c4, 256
  store i32 %v1_96cc, i32* %ip.global-to-local, align 4
  %v0_96d0 = load i32, i32* @r4, align 4
  store i32 %v0_96d0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_96d8 = load i32, i32* @r7, align 4
  store i32 %v0_96d8, i32* %r3.global-to-local, align 4
  %v0_96dc = load i32, i32* @r5, align 4
  store i32 %v0_96dc, i32* %r0.global-to-local, align 4
  %v5_96e4 = inttoptr i32 %v0_96d0 to i32*
  %v6_96e4 = call i32 @function_8258(i32 %v0_96dc, i32* %v5_96e4, i32 14, i32 %v0_96d8, i32 %v1_96cc)
  %v1_96ec = urem i32 %v6_96e4, 256
  store i32 %v1_96ec, i32* %ip.global-to-local, align 4
  %v0_96f0 = load i32, i32* @r4, align 4
  store i32 %v0_96f0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_96f8 = load i32, i32* @r7, align 4
  store i32 %v0_96f8, i32* %r3.global-to-local, align 4
  %v0_96fc = load i32, i32* @r5, align 4
  store i32 %v0_96fc, i32* %r0.global-to-local, align 4
  %v5_9704 = inttoptr i32 %v0_96f0 to i32*
  %v6_9704 = call i32 @function_8258(i32 %v0_96fc, i32* %v5_9704, i32 15, i32 %v0_96f8, i32 %v1_96ec)
  %v1_970c = urem i32 %v6_9704, 256
  store i32 %v1_970c, i32* %ip.global-to-local, align 4
  %v0_9710 = load i32, i32* @r7, align 4
  store i32 %v0_9710, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9718 = load i32, i32* @r4, align 4
  store i32 %v0_9718, i32* %r1.global-to-local, align 4
  %v0_971c = load i32, i32* @r5, align 4
  store i32 %v0_971c, i32* %r0.global-to-local, align 4
  %v5_9724 = inttoptr i32 %v0_9718 to i32*
  %v6_9724 = call i32 @function_8258(i32 %v0_971c, i32* %v5_9724, i32 %v0_9710, i32 768, i32 %v1_970c)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9730 = load i32, i32* @r4, align 4
  store i32 %v0_9730, i32* %r1.global-to-local, align 4
  %v0_9738 = load i32, i32* @r5, align 4
  store i32 %v0_9738, i32* %r0.global-to-local, align 4
  %v5_973c = inttoptr i32 %v0_9730 to i32*
  %v6_973c = call i32 @function_8258(i32 %v0_9738, i32* %v5_973c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9744 = urem i32 %v6_973c, 256
  store i32 %v1_9744, i32* %r3.global-to-local, align 4
  %v0_9748 = load i32, i32* @r7, align 4
  store i32 %v0_9748, i32* %r0.global-to-local, align 4
  %v1_9750 = inttoptr i32 %v0_9748 to i32*
  %v2_9750 = call i32 @function_102c4(i32* %v1_9750)
  %v1_9754 = load i32, i32* @r6, align 4
  %v2_9754 = add i32 %v1_9754, %v2_9750
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9768 = call i32 @function_10e30(i32 2, i32 3, i32 6)
  store i32 %v3_9768, i32* %r0.global-to-local, align 4
  %v7_976c = icmp eq i32 %v3_9768, -1
  store i32 %v3_9768, i32* @sl, align 4
  br i1 %v7_976c, label %dec_label_pc_9aac, label %dec_label_pc_9778

dec_label_pc_9778:                                ; preds = %dec_label_pc_9574
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9780 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9780, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_9788 = load i32, i32* @r7, align 4
  store i32 %v0_9788, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9794 = call i32 @function_10dec(i32 %v3_9768, i32 %v0_9788, i32 3, i32 %v6_9780, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9794, i32* %r0.global-to-local, align 4
  %v7_9798 = icmp eq i32 %v5_9794, -1
  br i1 %v7_9798, label %dec_label_pc_9aa4, label %dec_label_pc_97a0

dec_label_pc_97a0:                                ; preds = %dec_label_pc_9778
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_97a4 = load i32, i32* @r8, align 4
  %v3_97a8 = urem i32 %v0_97a4, 65536
  store i32 %v3_97a8, i32* @r3, align 4
  %v2_97ac = icmp eq i32 %arg2, 0
  %v0_97b0 = load i32, i32* @r7, align 4
  store i32 %v0_97b0, i32* %stack_var_-44, align 4
  %v5_97b4 = trunc i32 %v0_97a4 to i16
  br i1 %v2_97ac, label %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge, label %dec_label_pc_97bc.preheader

dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge: ; preds = %dec_label_pc_97a0
  %.pre = sext i16 %v5_97b4 to i32
  %.pre94 = add i32 %v6_9724, 40
  br label %dec_label_pc_9948.preheader

dec_label_pc_97bc.preheader:                      ; preds = %dec_label_pc_97a0
  %v2_9800 = ptrtoint i32* %stack_var_-160 to i32
  %v2_9848 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9860 = ptrtoint i32* %stack_var_-80 to i32
  %v2_9868 = ptrtoint i32* %stack_var_-336 to i32
  %v2_986c = ptrtoint i32* %stack_var_-48 to i32
  %v4_98f4 = zext i8 %tmp32 to i32
  %v1_98f8 = and i32 %v4_98f4, 18
  %v2_98fc = icmp eq i32 %v1_98f8, 18
  %v1_9bac = add i32 %v6_9724, 40
  %v4_9bec = sext i16 %v5_97b4 to i32
  %v3_9bf8 = udiv i32 %v4_9bec, 256
  %v1_9cd4 = urem i32 %v6_9664, 2
  %tmp95 = sub nsw i32 0, %v1_9cd4
  %v4_9cdc = and i32 %tmp95, 32
  %v1_9d08 = urem i32 %v6_96a4, 2
  %tmp96 = sub nsw i32 0, %v1_9d08
  %v4_9d10 = and i32 %tmp96, 8
  %v1_9d54 = urem i32 %v6_9704, 2
  %v3_98e0 = sext i16 %tmp62 to i32
  %v1_9904 = and i32 %v4_98f4, 5
  %v2_9904 = icmp eq i32 %v1_9904, 0
  %v4_9840 = add i32 %v2_9800, 98
  %v5_9840 = inttoptr i32 %v4_9840 to i16*
  %v1_9bf4 = mul nsw i32 %v4_9bec, 256
  %v4_9c04 = and i32 %v1_9bf4, 65280
  %v5_9c04 = or i32 %v4_9c04, %v3_9bf8
  %v1_9cec = urem i32 %v6_9684, 2
  %tmp97 = sub nsw i32 0, %v1_9cec
  %v4_9cf4 = and i32 %tmp97, 16
  %v1_9d20 = urem i32 %v6_96c4, 2
  %tmp98 = sub nsw i32 0, %v1_9d20
  %v4_9d28 = and i32 %tmp98, 4
  %v1_9d38 = urem i32 %v6_96e4, 2
  %tmp99 = sub nsw i32 0, %v1_9d38
  %v3_9d40 = and i32 %tmp99, 2
  br label %dec_label_pc_97bc.outer

dec_label_pc_97bc.outer:                          ; preds = %dec_label_pc_97bc.preheader, %.thread10
  %stack_var_-340.0.ph = phi i32 [ %tmp, %dec_label_pc_97bc.preheader ], [ %v0_9c38, %.thread10 ]
  %stack_var_-62.0.ph = phi i16 [ %tmp33, %dec_label_pc_97bc.preheader ], [ %stack_var_-62.2, %.thread10 ]
  %stack_var_-60.0.ph = phi i32 [ %tmp36, %dec_label_pc_97bc.preheader ], [ %v0_9b50, %.thread10 ]
  br label %dec_label_pc_97bc

dec_label_pc_97bc:                                ; preds = %dec_label_pc_97bc.outer, %dec_label_pc_9930
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_9930 ], [ %stack_var_-62.0.ph, %dec_label_pc_97bc.outer ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_9930 ], [ %stack_var_-60.0.ph, %dec_label_pc_97bc.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_97c8 = call i32 @function_10e30(i32 2, i32 1, i32 0)
  store i32 %v3_97c8, i32* %r0.global-to-local, align 4
  %v7_97cc = icmp eq i32 %v3_97c8, -1
  store i32 %v3_97c8, i32* @r8, align 4
  br i1 %v7_97cc, label %dec_label_pc_9930, label %dec_label_pc_97d8

dec_label_pc_97d8:                                ; preds = %dec_label_pc_97bc, %dec_label_pc_990c
  %v0_97e0 = phi i32 [ %v3_9920, %dec_label_pc_990c ], [ %v3_97c8, %dec_label_pc_97bc ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_990c ], [ %stack_var_-62.0, %dec_label_pc_97bc ]
  %stack_var_-60.1 = phi i32 [ %v0_9b50, %dec_label_pc_990c ], [ %stack_var_-60.0, %dec_label_pc_97bc ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_97e0 = call i32 @function_10478(i32 %v0_97e0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_97e8 = or i32 %v2_97e0, 2048
  store i32 %v1_97e8, i32* %r2.global-to-local, align 4
  %v0_97ec = load i32, i32* @r8, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v2_97f0 = call i32 @function_10478(i32 %v0_97ec, i32 4)
  store i32 %v2_97f0, i32* %r0.global-to-local, align 4
  %v3_97f4 = load i32, i32* %stack_var_-44, align 4
  %v5_97fc = mul i32 %v3_97f4, 24
  store i32 %v2_9800, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v1_980c = load i32, i32* @fp, align 4
  %v2_980c = add i32 %v1_980c, %v5_97fc
  store i32 %v2_980c, i32* %r3.global-to-local, align 4
  %v1_9810 = add i32 %v2_980c, 20
  %v2_9810 = inttoptr i32 %v1_9810 to i8*
  %v3_9810 = load i8, i8* %v2_9810, align 1
  %v4_9810 = zext i8 %v3_9810 to i32
  store i32 %v4_9810, i32* %r2.global-to-local, align 4
  %v2_9814 = icmp ugt i8 %v3_9810, 30
  %v7_9814 = icmp eq i8 %v3_9810, 31
  %v2_9818 = xor i1 %v7_9814, true
  %v3_9818 = and i1 %v2_9814, %v2_9818
  br i1 %v3_9818, label %bb, label %bb72

bb:                                               ; preds = %dec_label_pc_97d8
  %v5_9818 = add i32 %v2_980c, 16
  %v6_9818 = inttoptr i32 %v5_9818 to i32*
  %v7_9818 = load i32, i32* %v6_9818, align 4
  store i32 %v7_9818, i32* %r3.global-to-local, align 4
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_97d8, %bb
  %v4_981c = phi i32 [ %v2_980c, %dec_label_pc_97d8 ], [ %v7_9818, %bb ]
  %v4_981c.stack_var_-60.1 = select i1 %v3_9818, i32 %v4_981c, i32 %stack_var_-60.1
  %v2_9820 = xor i1 %v2_9814, true
  %v3_9820 = or i1 %v7_9814, %v2_9820
  br i1 %v3_9820, label %dec_label_pc_9ab8, label %dec_label_pc_9824

dec_label_pc_9824:                                ; preds = %bb72, %dec_label_pc_9ab8
  %v0_9b50 = phi i32 [ %v5_9b04, %dec_label_pc_9ab8 ], [ %v4_981c.stack_var_-60.1, %bb72 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_982c = load i32, i32* @sb, align 4
  %v9_982c = icmp eq i32 %v0_982c, 65535
  br i1 %v9_982c, label %dec_label_pc_9b10, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_9824
  %v4_9830 = udiv i32 %v0_982c, 256
  %v2_9834 = urem i32 %v0_982c, 256
  store i32 %v2_9834, i32* %r2.global-to-local, align 4
  %v5_9838 = mul nuw nsw i32 %v2_9834, 256
  %v6_9838 = or i32 %v5_9838, %v4_9830
  store i32 %v6_9838, i32* %r3.global-to-local, align 4
  store i32 %v2_9800, i32* %ip.global-to-local, align 4
  %v2_9840 = trunc i32 %v6_9838 to i16
  store i16 %v2_9840, i16* %v5_9840, align 2
  br label %dec_label_pc_9848

dec_label_pc_9848:                                ; preds = %.thread7, %dec_label_pc_9b10
  %stack_var_-62.2 = phi i16 [ %v1_9b10, %dec_label_pc_9b10 ], [ %stack_var_-62.1, %.thread7 ]
  store i32 %v2_9848, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9850 = load i32, i32* @r8, align 4
  store i32 %v0_9850, i32* %r0.global-to-local, align 4
  %v3_9854 = call i32 @function_10c18(i32 %v0_9850, i32 %v2_9848, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_985c = call i32 @function_102c4(i32* null)
  store i32 %v2_985c, i32* %r0.global-to-local, align 4
  store i32 %v2_9860, i32* @r7, align 4
  store i32 %v2_985c, i32* @r4, align 4
  store i32 %v2_9868, i32* @r6, align 4
  %v9_98c0 = icmp eq i32 %tmp34, %v0_9b50
  %v4_98e8 = zext i16 %stack_var_-62.2 to i32
  %v9_98d4 = icmp eq i1 %v9_98c0, false
  %v9_98ec = icmp eq i32 %v3_98e0, %v4_98e8
  br label %dec_label_pc_9884

dec_label_pc_9874:                                ; preds = %.thread, %dec_label_pc_98dc, %dec_label_pc_9904, %bb76
  %v2_9874 = call i32 @function_102c4(i32* null)
  %v0_9878 = load i32, i32* @r4, align 4
  %v2_9878 = sub i32 %v2_9874, %v0_9878
  store i32 %v2_9878, i32* %r0.global-to-local, align 4
  %v8_9880 = icmp sgt i32 %v2_9878, 10
  br i1 %v8_9880, label %dec_label_pc_990c, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9874, %dec_label_pc_9848
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_9868, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9894 = load i32, i32* @sl, align 4
  store i32 %v0_9894, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_98a4 = call i32 @function_10d38(i32 %v0_9894, i32 %v2_9868, i32 256, i32 16384, i32 %v2_9860, i32 %v2_986c)
  store i32 %v6_98a4, i32* %r2.global-to-local, align 4
  %v7_98ac = icmp eq i32 %v6_98a4, -1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_98ac, label %dec_label_pc_9aac, label %dec_label_pc_98b8

dec_label_pc_98b8:                                ; preds = %dec_label_pc_9884
  store i32 %v0_9b50, i32* %r1.global-to-local, align 4
  store i32 %tmp34, i32* @r3, align 4
  %tmp100 = icmp ult i32 %v6_98a4, 41
  br i1 %tmp100, label %.thread, label %bb76

.thread:                                          ; preds = %dec_label_pc_98b8
  br label %dec_label_pc_9874

bb76:                                             ; preds = %dec_label_pc_98b8
  br i1 %v9_98d4, label %dec_label_pc_9874, label %dec_label_pc_98dc

dec_label_pc_98dc:                                ; preds = %bb76
  store i32 %v3_98e0, i32* @lr, align 4
  store i32 %v2_9800, i32* @r3, align 4
  store i32 %v4_98e8, i32* %r2.global-to-local, align 4
  br i1 %v9_98ec, label %dec_label_pc_98f4, label %dec_label_pc_9874

dec_label_pc_98f4:                                ; preds = %dec_label_pc_98dc
  store i32 %v4_98f4, i32* %r2.global-to-local, align 4
  store i32 %v1_98f8, i32* @r3, align 4
  br i1 %v2_98fc, label %dec_label_pc_9b44, label %dec_label_pc_9904

dec_label_pc_9904:                                ; preds = %dec_label_pc_98f4
  br i1 %v2_9904, label %dec_label_pc_9874, label %dec_label_pc_990c

dec_label_pc_990c:                                ; preds = %dec_label_pc_9904, %dec_label_pc_9874
  %v0_990c = load i32, i32* @r8, align 4
  store i32 %v0_990c, i32* %r0.global-to-local, align 4
  %v1_9910 = call i32 @function_10644(i32 %v0_990c)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9920 = call i32 @function_10e30(i32 2, i32 1, i32 0)
  store i32 %v3_9920, i32* %r0.global-to-local, align 4
  %v3_9924 = icmp eq i32 %v3_9920, -1
  store i32 %v3_9920, i32* @r8, align 4
  br i1 %v3_9924, label %dec_label_pc_9930, label %dec_label_pc_97d8

dec_label_pc_9930:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97bc
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_97bc ], [ %stack_var_-62.2, %dec_label_pc_990c ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_97bc ], [ %v0_9b50, %dec_label_pc_990c ]
  %v3_9930 = load i32, i32* %stack_var_-44, align 4
  %v1_9938 = add i32 %v3_9930, 1
  store i32 %v1_9938, i32* @r3, align 4
  store i32 %v1_9938, i32* %stack_var_-44, align 4
  %v5_9944 = icmp slt i32 %v1_9938, %arg2
  br i1 %v5_9944, label %dec_label_pc_97bc, label %dec_label_pc_9948.preheader

dec_label_pc_9948.preheader:                      ; preds = %.thread10, %dec_label_pc_9930, %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge
  %v1_9980.pre-phi = phi i32 [ %.pre94, %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge ], [ %v1_9bac, %dec_label_pc_9930 ], [ %v1_9bac, %.thread10 ]
  %v4_9a64.pre-phi = phi i32 [ %.pre, %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge ], [ %v4_9bec, %dec_label_pc_9930 ], [ %v4_9bec, %.thread10 ]
  %v3_9960 = mul i32 %v6_9724, 65536
  %v1_9964 = add i32 %v3_9960, 1310720
  %tmp78 = udiv i32 %v1_9964, 256
  %v3_9970 = and i32 %tmp78, 65280
  %v2_9a7c = icmp eq i32 %v1_9744, 0
  %v4_9974 = udiv i32 %v1_9964, 16777216
  %v5_9974 = or i32 %v3_9970, %v4_9974
  %v1_997c = add i32 %v6_9724, 20
  br label %dec_label_pc_9948

dec_label_pc_9948:                                ; preds = %dec_label_pc_9948.preheader, %dec_label_pc_9b2c
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_97ac, label %dec_label_pc_9b2c, label %dec_label_pc_995c

dec_label_pc_995c:                                ; preds = %dec_label_pc_9948
  store i32 %v1_9964, i32* %r2.global-to-local, align 4
  store i32 %v6_9724, i32* @ip, align 4
  store i32 %v3_9970, i32* %r3.global-to-local, align 4
  store i32 %v5_9974, i32* @sb, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_997c, i32* @r8, align 4
  store i32 %v1_9980.pre-phi, i32* @r7, align 4
  br label %dec_label_pc_9a78

dec_label_pc_9988:                                ; preds = %dec_label_pc_9a78, %dec_label_pc_9a84
  %v2_998c = phi i32 [ %v7_9a60, %dec_label_pc_9a78 ], [ %v2_998c.pre, %dec_label_pc_9a84 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_998c = add i32 %v2_998c, 10
  %v4_998c = inttoptr i32 %v3_998c to i16*
  store i16 0, i16* %v4_998c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9994 = load i32, i32* @r5, align 4
  store i32 %v0_9994, i32* @r0, align 4
  %v2_9998 = call i32 @function_bf78(i32 %v0_9994, i32 20)
  %v3_9998 = trunc i32 %v2_9998 to i16
  store i32 %v2_9998, i32* %r0.global-to-local, align 4
  %v3_999c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_95a0, i32* %ip.global-to-local, align 4
  %v3_99a4 = mul i32 %v3_999c, 16
  %v2_99a8 = add i32 %v3_99a4, %v2_95a0
  store i32 %v2_99a8, i32* %r1.global-to-local, align 4
  %v1_99ac = add i32 %v2_99a8, 4
  %v2_99ac = inttoptr i32 %v1_99ac to i32*
  %v3_99ac = load i32, i32* %v2_99ac, align 4
  %v3_99b0 = mul i32 %v3_99ac, 65536
  store i32 %v3_99b0, i32* %ip.global-to-local, align 4
  %tmp79 = mul i32 %v3_99ac, 256
  %v1_99b8 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v3_99ac, 256
  %v4_99bc = urem i32 %tmp80, 256
  %v5_99bc = or i32 %v4_99bc, %v1_99b8
  store i32 %v5_99bc, i32* %r3.global-to-local, align 4
  %v1_99c0 = add i32 %v3_99ac, 1
  store i32 %v1_99c0, i32* %r2.global-to-local, align 4
  store i32 %v1_99c0, i32* %v2_99ac, align 4
  %v0_99c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_99c8 = load i32, i32* @r6, align 4
  %v2_99c8 = add i32 %v1_99c8, 4
  %v3_99c8 = inttoptr i32 %v2_99c8 to i32*
  store i32 %v0_99c8, i32* %v3_99c8, align 4
  %v0_99cc = load i32, i32* %r1.global-to-local, align 4
  %v1_99cc = add i32 %v0_99cc, 8
  %v2_99cc = inttoptr i32 %v1_99cc to i32*
  %v3_99cc = load i32, i32* %v2_99cc, align 4
  %tmp81 = mul i32 %v3_99cc, 256
  %v1_99d8 = and i32 %tmp81, 65280
  %tmp82 = udiv i32 %v3_99cc, 256
  %v4_99dc = urem i32 %tmp82, 256
  %v5_99dc = or i32 %v4_99dc, %v1_99d8
  store i32 %v5_99dc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v3_99e4 = load i32, i32* @r5, align 4
  %v4_99e4 = add i32 %v3_99e4, 10
  %v5_99e4 = inttoptr i32 %v4_99e4 to i16*
  store i16 %v3_9998, i16* %v5_99e4, align 2
  %v0_99e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_99e8 = load i32, i32* @r6, align 4
  %v2_99e8 = add i32 %v1_99e8, 8
  %v3_99e8 = inttoptr i32 %v2_99e8 to i32*
  store i32 %v0_99e8, i32* %v3_99e8, align 4
  %v0_99ec = load i32, i32* @lr, align 4
  %v1_99ec = trunc i32 %v0_99ec to i16
  %v2_99ec = load i32, i32* @r6, align 4
  %v3_99ec = add i32 %v2_99ec, 16
  %v4_99ec = inttoptr i32 %v3_99ec to i16*
  store i16 %v1_99ec, i16* %v4_99ec, align 2
  %v0_99f0 = load i32, i32* @r6, align 4
  store i32 %v0_99f0, i32* @r1, align 4
  %v0_99f4 = load i32, i32* @sb, align 4
  store i32 %v0_99f4, i32* %r2.global-to-local, align 4
  %v0_99f8 = load i32, i32* @r8, align 4
  store i32 %v0_99f8, i32* %r3.global-to-local, align 4
  %v0_99fc = load i32, i32* @r5, align 4
  store i32 %v0_99fc, i32* %r0.global-to-local, align 4
  %v4_9a00 = call i32 @function_bfc8(i32 %v0_99fc, i32 %v0_99f0, i32 %v0_99f4, i32 %v0_99f8)
  %v5_9a00 = trunc i32 %v4_9a00 to i16
  store i32 %v4_9a00, i32* %r0.global-to-local, align 4
  %v3_9a04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9a04, i32* %r3.global-to-local, align 4
  %v3_9a08 = mul i32 %v3_9a04, 32
  store i32 %v3_9a08, i32* %lr.global-to-local, align 4
  %v3_9a0c = load i32, i32* @r6, align 4
  %v4_9a0c = add i32 %v3_9a0c, 16
  %v5_9a0c = inttoptr i32 %v4_9a0c to i16*
  store i16 %v5_9a00, i16* %v5_9a0c, align 2
  %v0_9a10 = load i32, i32* %lr.global-to-local, align 4
  %v1_9a10 = load i32, i32* %r3.global-to-local, align 4
  %tmp101 = mul i32 %v1_9a10, -8
  %v5_9a10 = add i32 %v0_9a10, %tmp101
  store i32 %v5_9a10, i32* %lr.global-to-local, align 4
  %v0_9a14 = load i32, i32* @r6, align 4
  %v1_9a14 = add i32 %v0_9a14, 2
  %v2_9a14 = inttoptr i32 %v1_9a14 to i16*
  %v3_9a14 = load i16, i16* %v2_9a14, align 2
  %v1_9a18 = load i32, i32* @fp, align 4
  %v2_9a18 = add i32 %v1_9a18, %v5_9a10
  store i32 %v2_9a18, i32* @lr, align 4
  %v3_9a1c = add i32 %v2_9a18, 2
  %v4_9a1c = inttoptr i32 %v3_9a1c to i16*
  store i16 %v3_9a14, i16* %v4_9a1c, align 2
  %v0_9a20 = load i32, i32* @r5, align 4
  store i32 %v0_9a20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* @ip, align 4
  %v0_9a2c = load i32, i32* @sl, align 4
  store i32 %v0_9a2c, i32* %r0.global-to-local, align 4
  %v0_9a30 = load i32, i32* @r7, align 4
  store i32 %v0_9a30, i32* %r2.global-to-local, align 4
  %v0_9a34 = load i32, i32* @lr, align 4
  %v6_9a3c = call i32 @function_10dac(i32 %v0_9a2c, i32 %v0_9a20, i32 %v0_9a30, i32 16384, i32 %v0_9a34, i32 16)
  %v3_9a40 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9a40, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_9a48 = add i32 %v3_9a40, 1
  store i32 %v1_9a48, i32* %r0.global-to-local, align 4
  store i32 %v1_9a48, i32* %stack_var_-44, align 4
  %v7_9a54 = icmp slt i32 %v1_9a48, %arg2
  br i1 %v7_9a54, label %dec_label_pc_9a78, label %dec_label_pc_9b2c

dec_label_pc_9a78:                                ; preds = %dec_label_pc_995c, %dec_label_pc_9988
  %v1_9a60 = phi i32 [ %v1_9a48, %dec_label_pc_9988 ], [ 0, %dec_label_pc_995c ]
  store i32 %v2_95b0, i32* @lr, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_9a60 = mul i32 %v1_9a60, 4
  %v5_9a60 = add i32 %v4_9a60, %v2_95b0
  %v6_9a60 = inttoptr i32 %v5_9a60 to i32*
  %v7_9a60 = load i32, i32* %v6_9a60, align 4
  store i32 %v7_9a60, i32* @r5, align 4
  store i32 %v4_9a64.pre-phi, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r3, align 4
  %v1_9a70 = add i32 %v7_9a60, 20
  store i32 %v1_9a70, i32* @r6, align 4
  store i32 %v1_9744, i32* %r1.global-to-local, align 4
  br i1 %v2_9a7c, label %dec_label_pc_9988, label %dec_label_pc_9a84

dec_label_pc_9a84:                                ; preds = %dec_label_pc_9a78
  %v1_9a84 = add i32 %v7_9a60, 40
  store i32 %v1_9a84, i32* @r4, align 4
  store i32 %v1_9a84, i32* %r0.global-to-local, align 4
  store i32 %v6_9724, i32* %r1.global-to-local, align 4
  %v2_9a90 = call i32 @function_d46c(i32 %v1_9a84, i32 %v6_9724)
  store i32 %v2_9a90, i32* %r0.global-to-local, align 4
  store i32 %v6_9724, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9a9c = load i32, i32* @r4, align 4
  %v4_9a9c = add i32 %v2_9a9c, %v6_9724
  %v5_9a9c = inttoptr i32 %v4_9a9c to i8*
  store i8 0, i8* %v5_9a9c, align 1
  %v2_998c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9988

dec_label_pc_9aa4:                                ; preds = %dec_label_pc_9778
  %v0_9aa4 = load i32, i32* @sl, align 4
  store i32 %v0_9aa4, i32* %r0.global-to-local, align 4
  %v1_9aa8 = call i32 @function_10644(i32 %v0_9aa4)
  store i32 %v1_9aa8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9aac

dec_label_pc_9aac:                                ; preds = %dec_label_pc_9884, %dec_label_pc_9b2c, %dec_label_pc_9574, %dec_label_pc_9aa4
  %v1_9ab4 = phi i32 [ %v3_9768, %dec_label_pc_9574 ], [ %v1_9aa8, %dec_label_pc_9aa4 ], [ %v2_9b30, %dec_label_pc_9b2c ], [ 0, %dec_label_pc_9884 ]
  store i32 %v3_9574, i32* %r4.global-to-local, align 4
  store i32 %v27_9574, i32* %lr.global-to-local, align 4
  ret i32 %v1_9ab4

dec_label_pc_9ab8:                                ; preds = %bb72
  %v1_9ab8 = add i32 %v4_981c, 16
  %v2_9ab8 = inttoptr i32 %v1_9ab8 to i32*
  %v3_9ab8 = load i32, i32* %v2_9ab8, align 4
  store i32 %v3_9ab8, i32* @r4, align 4
  %v0_9abc = call i32 @function_d3a8()
  store i32 %v0_9abc, i32* %r0.global-to-local, align 4
  %v3_9ac0 = load i32, i32* %stack_var_-44, align 4
  %v5_9ac8 = mul i32 %v3_9ac0, 24
  %v0_9acc = load i32, i32* @r4, align 4
  %v1_9acc = and i32 %v0_9acc, 16711680
  store i32 %v1_9acc, i32* %ip.global-to-local, align 4
  %v3_9ad0 = udiv i32 %v0_9acc, 16777216
  %v4_9ad4 = udiv i32 %v1_9acc, 256
  %v5_9ad4 = or i32 %v4_9ad4, %v3_9ad0
  store i32 %v5_9ad4, i32* %r2.global-to-local, align 4
  %v1_9ad8 = load i32, i32* @fp, align 4
  %v2_9ad8 = add i32 %v1_9ad8, %v5_9ac8
  store i32 %v2_9ad8, i32* %r1.global-to-local, align 4
  %v1_9adc = and i32 %v0_9acc, 65280
  store i32 %v1_9adc, i32* %r3.global-to-local, align 4
  %v1_9ae0 = add i32 %v2_9ad8, 20
  %v2_9ae0 = inttoptr i32 %v1_9ae0 to i8*
  %v3_9ae0 = load i8, i8* %v2_9ae0, align 1
  %v4_9ae0 = zext i8 %v3_9ae0 to i32
  store i32 %v4_9ae0, i32* %ip.global-to-local, align 4
  %v5_9ae8 = call i32 @llvm.bswap.i32(i32 %v0_9acc)
  %v7_9aec = lshr i32 %v0_9abc, %v4_9ae0
  %v8_9aec = add i32 %v7_9aec, %v5_9ae8
  store i32 %v8_9aec, i32* %r2.global-to-local, align 4
  %v1_9af0 = and i32 %v8_9aec, 16711680
  store i32 %v1_9af0, i32* %r0.global-to-local, align 4
  %v1_9afc = and i32 %v8_9aec, 65280
  store i32 %v1_9afc, i32* %r1.global-to-local, align 4
  %v5_9b04 = call i32 @llvm.bswap.i32(i32 %v8_9aec)
  store i32 %v5_9b04, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9824

dec_label_pc_9b10:                                ; preds = %dec_label_pc_9824
  %v0_9b10 = call i32 @function_d3a8()
  %v1_9b10 = trunc i32 %v0_9b10 to i16
  store i32 %v0_9b10, i32* %r0.global-to-local, align 4
  store i32 %v2_9800, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9848

dec_label_pc_9b2c:                                ; preds = %dec_label_pc_9988, %dec_label_pc_9948
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9b30 = call i32 @function_102c4(i32* null)
  store i32 %v2_9b30, i32* %r0.global-to-local, align 4
  store i32 %v2_9754, i32* %r2.global-to-local, align 4
  %v6_9b3c = icmp slt i32 %v2_9754, %v2_9b30
  br i1 %v6_9b3c, label %dec_label_pc_9aac, label %dec_label_pc_9948

dec_label_pc_9b44:                                ; preds = %dec_label_pc_98f4
  %v3_9b44 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9b44, i32* @r5, align 4
  store i32 %v2_95a0, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-340.0.ph, i32* %r0.global-to-local, align 4
  %v5_9b50 = mul i32 %v3_9b44, 16
  %v6_9b50 = add i32 %v5_9b50, %v2_95a0
  %v7_9b50 = inttoptr i32 %v6_9b50 to i32*
  store i32 %v0_9b50, i32* %v7_9b50, align 4
  %v0_9b54 = load i32, i32* %r0.global-to-local, align 4
  %v1_9b54 = add i32 %v0_9b54, 4
  %v2_9b54 = inttoptr i32 %v1_9b54 to i32*
  %v3_9b54 = load i32, i32* %v2_9b54, align 4
  %v1_9b58 = and i32 %v3_9b54, 16711680
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  %v5_9b6c = call i32 @llvm.bswap.i32(i32 %v3_9b54)
  store i32 %v5_9b6c, i32* %r3.global-to-local, align 4
  store i32 %v2_95a0, i32* %r1.global-to-local, align 4
  %v0_9b74 = load i32, i32* @r5, align 4
  %v3_9b74 = mul i32 %v0_9b74, 16
  %v2_9b78 = add i32 %v3_9b74, %v2_95a0
  store i32 %v2_9b78, i32* %ip.global-to-local, align 4
  %v2_9b7c = add i32 %v2_9b78, 4
  %v3_9b7c = inttoptr i32 %v2_9b7c to i32*
  store i32 %v5_9b6c, i32* %v3_9b7c, align 4
  store i32 %stack_var_-340.0.ph, i32* %r2.global-to-local, align 4
  %v1_9b84 = add i32 %stack_var_-340.0.ph, 8
  %v2_9b84 = inttoptr i32 %v1_9b84 to i32*
  %v3_9b84 = load i32, i32* %v2_9b84, align 4
  %v1_9b90 = and i32 %v3_9b84, 65280
  store i32 %v1_9b90, i32* %r2.global-to-local, align 4
  %v5_9b9c = call i32 @llvm.bswap.i32(i32 %v3_9b84)
  store i32 %v5_9b9c, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-340.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v6_9724, i32* %r0.global-to-local, align 4
  %v1_9ba8 = add i32 %stack_var_-340.0.ph, 2
  %v2_9ba8 = inttoptr i32 %v1_9ba8 to i16*
  %v3_9ba8 = load i16, i16* %v2_9ba8, align 2
  %v4_9ba8 = zext i16 %v3_9ba8 to i32
  store i32 %v4_9ba8, i32* %r1.global-to-local, align 4
  store i32 %v1_9bac, i32* @r4, align 4
  %v2_9bb0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9bb0 = add i32 %v2_9bb0, 12
  %v4_9bb0 = inttoptr i32 %v3_9bb0 to i16*
  store i16 %v3_9ba8, i16* %v4_9bb0, align 2
  %v0_9bb4 = load i32, i32* @lr, align 4
  %v1_9bb4 = trunc i32 %v0_9bb4 to i16
  %v2_9bb4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9bb4 = add i32 %v2_9bb4, 14
  %v4_9bb4 = inttoptr i32 %v3_9bb4 to i16*
  store i16 %v1_9bb4, i16* %v4_9bb4, align 2
  %v0_9bb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9bb8 = load i32, i32* %ip.global-to-local, align 4
  %v2_9bb8 = add i32 %v1_9bb8, 8
  %v3_9bb8 = inttoptr i32 %v2_9bb8 to i32*
  store i32 %v0_9bb8, i32* %v3_9bb8, align 4
  %v0_9bbc = load i32, i32* @r4, align 4
  store i32 %v0_9bbc, i32* @r0, align 4
  %v0_9bc0 = call i32 @function_11078()
  store i32 %v0_9bc0, i32* %r0.global-to-local, align 4
  store i32 %v2_95b0, i32* %r3.global-to-local, align 4
  %v2_9bcc = load i32, i32* @r5, align 4
  %v5_9bcc = mul i32 %v2_9bcc, 4
  %v6_9bcc = add i32 %v5_9bcc, %v2_95b0
  %v7_9bcc = inttoptr i32 %v6_9bcc to i32*
  store i32 %v0_9bc0, i32* %v7_9bcc, align 4
  %v3_9bd0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9bd0, i32* %r2.global-to-local, align 4
  %v0_9bd4 = load i32, i32* %r3.global-to-local, align 4
  %v4_9bd4 = mul i32 %v3_9bd0, 4
  %v5_9bd4 = add i32 %v0_9bd4, %v4_9bd4
  %v6_9bd4 = inttoptr i32 %v5_9bd4 to i32*
  %v7_9bd4 = load i32, i32* %v6_9bd4, align 4
  store i32 %v7_9bd4, i32* %ip.global-to-local, align 4
  %v1_9bd8 = inttoptr i32 %v7_9bd4 to i8*
  %v2_9bd8 = load i8, i8* %v1_9bd8, align 1
  %tmp102 = urem i8 %v2_9bd8, 16
  %v1_9bdc = zext i8 %tmp102 to i32
  %v1_9be0 = or i32 %v1_9bdc, 64
  store i32 %v1_9be0, i32* %r3.global-to-local, align 4
  %v1_9be4 = trunc i32 %v1_9be0 to i8
  store i8 %v1_9be4, i8* %v1_9bd8, align 1
  %v0_9be8 = load i32, i32* %ip.global-to-local, align 4
  %v1_9be8 = inttoptr i32 %v0_9be8 to i8*
  %v2_9be8 = load i8, i8* %v1_9be8, align 1
  store i32 %v4_9bec, i32* %lr.global-to-local, align 4
  %v1_9bf0 = and i8 %v2_9be8, -16
  %v1_9bfc = or i8 %v1_9bf0, 5
  %v0_9c00 = load i32, i32* @r4, align 4
  %v3_9c00 = mul i32 %v0_9c00, 65536
  store i32 %v3_9c00, i32* %r4.global-to-local, align 4
  store i32 %v5_9c04, i32* %r1.global-to-local, align 4
  store i32 %v1_9630, i32* %r0.global-to-local, align 4
  store i8 %v1_9bfc, i8* %v1_9be8, align 1
  %v0_9c10 = load i32, i32* %r1.global-to-local, align 4
  %v1_9c10 = trunc i32 %v0_9c10 to i16
  %v2_9c10 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c10 = add i32 %v2_9c10, 4
  %v4_9c10 = inttoptr i32 %v3_9c10 to i16*
  store i16 %v1_9c10, i16* %v4_9c10, align 2
  %v0_9c14 = load i32, i32* %r4.global-to-local, align 4
  %v3_9c14 = udiv i32 %v0_9c14, 256
  %v1_9c1c = and i32 %v3_9c14, 65280
  store i32 %v1_9c1c, i32* %r2.global-to-local, align 4
  %v2_9c20 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c20 = add i32 %v2_9c20, 1
  %v4_9c20 = inttoptr i32 %v3_9c20 to i8*
  store i8 %v5_95e8, i8* %v4_9c20, align 1
  %v0_9c24 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c24 = load i32, i32* %r4.global-to-local, align 4
  %v4_9c24 = udiv i32 %v1_9c24, 16777216
  %v5_9c24 = or i32 %v4_9c24, %v0_9c24
  %v1_9c28 = trunc i32 %v5_9c24 to i16
  %v2_9c28 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c28 = add i32 %v2_9c28, 2
  %v4_9c28 = inttoptr i32 %v3_9c28 to i16*
  store i16 %v1_9c28, i16* %v4_9c28, align 2
  %v0_9c30 = load i32, i32* %ip.global-to-local, align 4
  %v1_9c30 = add i32 %v0_9c30, 20
  store i32 %v1_9c30, i32* %r3.global-to-local, align 4
  %v3_9c34 = add i32 %v0_9c30, 8
  %v4_9c34 = inttoptr i32 %v3_9c34 to i8*
  store i8 %v5_9620, i8* %v4_9c34, align 1
  %v0_9c38 = load i32, i32* %r3.global-to-local, align 4
  %v2_9c40 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c40 = add i32 %v2_9c40, 9
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 6, i8* %v4_9c40, align 1
  store i32 ptrtoint (i32* @global_var_202dc.42 to i32), i32* %r2.global-to-local, align 4
  %v2_9c48 = load i32, i32* @global_var_202dc.42, align 4
  store i32 %v2_9c48, i32* %r1.global-to-local, align 4
  %v1_9c4c = load i32, i32* %ip.global-to-local, align 4
  %v2_9c4c = add i32 %v1_9c4c, 12
  %v3_9c4c = inttoptr i32 %v2_9c4c to i32*
  store i32 %v2_9c48, i32* %v3_9c4c, align 4
  %v0_9c50 = load i32, i32* %r0.global-to-local, align 4
  %v2_9c50 = icmp eq i32 %v0_9c50, 0
  %v3_9c54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9c54, i32* %r3.global-to-local, align 4
  store i32 %v2_95a0, i32* %r0.global-to-local, align 4
  br i1 %v2_9c50, label %.thread10, label %bb83

bb83:                                             ; preds = %dec_label_pc_9b44
  store i32 64, i32* %lr.global-to-local, align 4
  %v3_9c60 = load i32, i32* %ip.global-to-local, align 4
  %v4_9c60 = add i32 %v3_9c60, 6
  %v5_9c60 = inttoptr i32 %v4_9c60 to i16*
  store i16 64, i16* %v5_9c60, align 2
  %v0_9c64.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_9c64.pre = load i32, i32* %r3.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_9b44, %bb83
  %v0_9c68 = phi i32 [ %v3_9c54, %dec_label_pc_9b44 ], [ %v1_9c64.pre, %bb83 ]
  %v1_9c6c = phi i32 [ %v2_95a0, %dec_label_pc_9b44 ], [ %v0_9c64.pre, %bb83 ]
  %v4_9c64 = mul i32 %v0_9c68, 16
  %v5_9c64 = add i32 %v4_9c64, %v1_9c6c
  %v6_9c64 = inttoptr i32 %v5_9c64 to i32*
  %v7_9c64 = load i32, i32* %v6_9c64, align 4
  store i32 %v7_9c64, i32* %r2.global-to-local, align 4
  store i32 %v5_9c64, i32* %r3.global-to-local, align 4
  %v1_9c70 = load i32, i32* %ip.global-to-local, align 4
  %v2_9c70 = add i32 %v1_9c70, 16
  %v3_9c70 = inttoptr i32 %v2_9c70 to i32*
  store i32 %v7_9c64, i32* %v3_9c70, align 4
  %v0_9c74 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c74 = add i32 %v0_9c74, 12
  %v2_9c74 = inttoptr i32 %v1_9c74 to i16*
  %v3_9c74 = load i16, i16* %v2_9c74, align 2
  %v4_9c74 = zext i16 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r1.global-to-local, align 4
  %v0_9c78 = load i32, i32* %ip.global-to-local, align 4
  %v1_9c78 = add i32 %v0_9c78, 40
  store i32 %v1_9c78, i32* @r4, align 4
  %v3_9c7c = add i32 %v0_9c78, 20
  %v4_9c7c = inttoptr i32 %v3_9c7c to i16*
  store i16 %v3_9c74, i16* %v4_9c7c, align 2
  store i32 %v0_9c38, i32* %ip.global-to-local, align 4
  %v0_9c84 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c84 = add i32 %v0_9c84, 8
  %v2_9c84 = inttoptr i32 %v1_9c84 to i32*
  %v3_9c84 = load i32, i32* %v2_9c84, align 4
  store i32 %v3_9c84, i32* %r1.global-to-local, align 4
  %v2_9c88 = add i32 %v0_9c38, 4
  %v3_9c88 = inttoptr i32 %v2_9c88 to i32*
  store i32 %v3_9c84, i32* %v3_9c88, align 4
  %v0_9c8c = load i32, i32* %ip.global-to-local, align 4
  %v1_9c8c = add i32 %v0_9c8c, 13
  %v2_9c8c = inttoptr i32 %v1_9c8c to i8*
  %v3_9c8c = load i8, i8* %v2_9c8c, align 1
  %v4_9c8c = zext i8 %v3_9c8c to i32
  store i32 %v4_9c8c, i32* %r2.global-to-local, align 4
  %v0_9c90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c90 = add i32 %v0_9c90, 4
  %v2_9c90 = inttoptr i32 %v1_9c90 to i32*
  %v3_9c90 = load i32, i32* %v2_9c90, align 4
  store i32 %v3_9c90, i32* %r1.global-to-local, align 4
  %v1_9c94 = add i32 %v0_9c90, 14
  %v2_9c94 = inttoptr i32 %v1_9c94 to i16*
  %v3_9c94 = load i16, i16* %v2_9c94, align 2
  %v4_9c94 = zext i16 %v3_9c94 to i32
  store i32 %v4_9c94, i32* %r3.global-to-local, align 4
  %v1_9c98 = or i32 %v4_9c8c, 1
  store i32 %v1_9c98, i32* %r2.global-to-local, align 4
  %v3_9c9c = add i32 %v0_9c8c, 2
  %v4_9c9c = inttoptr i32 %v3_9c9c to i16*
  store i16 %v3_9c94, i16* %v4_9c9c, align 2
  %v0_9ca0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9ca0 = trunc i32 %v0_9ca0 to i8
  %v2_9ca0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ca0 = add i32 %v2_9ca0, 13
  %v4_9ca0 = inttoptr i32 %v3_9ca0 to i8*
  store i8 %v1_9ca0, i8* %v4_9ca0, align 1
  %v0_9ca4 = load i32, i32* %ip.global-to-local, align 4
  %v1_9ca4 = add i32 %v0_9ca4, 12
  %v2_9ca4 = inttoptr i32 %v1_9ca4 to i8*
  %v3_9ca4 = load i8, i8* %v2_9ca4, align 1
  %v4_9ca4 = zext i8 %v3_9ca4 to i32
  store i32 %v4_9ca4, i32* %r3.global-to-local, align 4
  %v1_9ca8 = add i32 %v0_9ca4, 13
  %v2_9ca8 = inttoptr i32 %v1_9ca8 to i8*
  %v3_9ca8 = load i8, i8* %v2_9ca8, align 1
  %v4_9ca8 = zext i8 %v3_9ca8 to i32
  %tmp103 = urem i8 %v3_9ca4, 16
  %v1_9cac = zext i8 %tmp103 to i32
  %v1_9cb0 = or i32 %v1_9cac, 128
  store i32 %v1_9cb0, i32* %r3.global-to-local, align 4
  %v1_9cb4 = or i32 %v4_9ca8, 16
  store i32 %v1_9cb4, i32* %r2.global-to-local, align 4
  %v0_9cb8 = load i32, i32* %r1.global-to-local, align 4
  %v2_9cb8 = add i32 %v0_9ca4, 8
  %v3_9cb8 = inttoptr i32 %v2_9cb8 to i32*
  store i32 %v0_9cb8, i32* %v3_9cb8, align 4
  %v0_9cbc = load i32, i32* %r3.global-to-local, align 4
  %v1_9cbc = trunc i32 %v0_9cbc to i8
  %v2_9cbc = load i32, i32* %ip.global-to-local, align 4
  %v3_9cbc = add i32 %v2_9cbc, 12
  %v4_9cbc = inttoptr i32 %v3_9cbc to i8*
  store i8 %v1_9cbc, i8* %v4_9cbc, align 1
  %v0_9cc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cc0 = trunc i32 %v0_9cc0 to i8
  %v2_9cc0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9cc0 = add i32 %v2_9cc0, 13
  %v4_9cc0 = inttoptr i32 %v3_9cc0 to i8*
  store i8 %v1_9cc0, i8* %v4_9cc0, align 1
  %v0_9cc4 = call i32 @function_d3a8()
  %v1_9cc4 = trunc i32 %v0_9cc4 to i16
  store i32 %v0_9cc4, i32* %r0.global-to-local, align 4
  store i32 %v0_9c38, i32* %lr.global-to-local, align 4
  store i32 %v1_966c, i32* %r1.global-to-local, align 4
  %v1_9cd0 = add i32 %v0_9c38, 13
  %v2_9cd0 = inttoptr i32 %v1_9cd0 to i8*
  %v3_9cd0 = load i8, i8* %v2_9cd0, align 1
  %v4_9cd0 = zext i8 %v3_9cd0 to i32
  store i32 %v1_9cd4, i32* %r2.global-to-local, align 4
  %v1_9cd8 = and i32 %v4_9cd0, 223
  %v5_9cdc = or i32 %v1_9cd8, %v4_9cdc
  store i32 %v5_9cdc, i32* %r3.global-to-local, align 4
  %v1_9ce0 = trunc i32 %v5_9cdc to i8
  store i8 %v1_9ce0, i8* %v2_9cd0, align 1
  store i32 %v1_968c, i32* %ip.global-to-local, align 4
  %v0_9ce8 = load i32, i32* %lr.global-to-local, align 4
  %v1_9ce8 = add i32 %v0_9ce8, 13
  %v2_9ce8 = inttoptr i32 %v1_9ce8 to i8*
  %v3_9ce8 = load i8, i8* %v2_9ce8, align 1
  %v4_9ce8 = zext i8 %v3_9ce8 to i32
  store i32 %v1_9cec, i32* %r3.global-to-local, align 4
  %v1_9cf0 = and i32 %v4_9ce8, 239
  %v5_9cf4 = or i32 %v1_9cf0, %v4_9cf4
  store i32 %v5_9cf4, i32* %r2.global-to-local, align 4
  %v1_9cf8 = trunc i32 %v5_9cf4 to i8
  store i8 %v1_9cf8, i8* %v2_9ce8, align 1
  %v0_9cfc = load i32, i32* %lr.global-to-local, align 4
  %v1_9cfc = add i32 %v0_9cfc, 13
  %v2_9cfc = inttoptr i32 %v1_9cfc to i8*
  %v3_9cfc = load i8, i8* %v2_9cfc, align 1
  %v4_9cfc = zext i8 %v3_9cfc to i32
  store i32 %v1_96ac, i32* %lr.global-to-local, align 4
  store i32 %v0_9c38, i32* %r1.global-to-local, align 4
  store i32 %v1_9d08, i32* %r2.global-to-local, align 4
  %v1_9d0c = and i32 %v4_9cfc, 247
  %v5_9d10 = or i32 %v1_9d0c, %v4_9d10
  store i32 %v5_9d10, i32* %r3.global-to-local, align 4
  %v1_9d14 = trunc i32 %v5_9d10 to i8
  store i8 %v1_9d14, i8* %v2_9cd0, align 1
  store i32 %v1_96cc, i32* @ip, align 4
  %v0_9d1c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d1c = add i32 %v0_9d1c, 13
  %v2_9d1c = inttoptr i32 %v1_9d1c to i8*
  %v3_9d1c = load i8, i8* %v2_9d1c, align 1
  %v4_9d1c = zext i8 %v3_9d1c to i32
  store i32 %v1_9d20, i32* %r3.global-to-local, align 4
  %v1_9d24 = and i32 %v4_9d1c, 251
  %v5_9d28 = or i32 %v1_9d24, %v4_9d28
  store i32 %v5_9d28, i32* %r2.global-to-local, align 4
  %v1_9d2c = trunc i32 %v5_9d28 to i8
  store i8 %v1_9d2c, i8* %v2_9d1c, align 1
  store i32 %v1_96ec, i32* @lr, align 4
  %v0_9d34 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d34 = add i32 %v0_9d34, 13
  %v2_9d34 = inttoptr i32 %v1_9d34 to i8*
  %v3_9d34 = load i8, i8* %v2_9d34, align 1
  %v4_9d34 = zext i8 %v3_9d34 to i32
  store i32 %v1_9d38, i32* %r2.global-to-local, align 4
  %v1_9d3c = and i32 %v4_9d34, 253
  %v4_9d40 = or i32 %v1_9d3c, %v3_9d40
  store i32 %v4_9d40, i32* %r3.global-to-local, align 4
  %v1_9d44 = trunc i32 %v4_9d40 to i8
  store i8 %v1_9d44, i8* %v2_9d34, align 1
  %v0_9d48 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d48 = add i32 %v0_9d48, 13
  %v2_9d48 = inttoptr i32 %v1_9d48 to i8*
  %v3_9d48 = load i8, i8* %v2_9d48, align 1
  %v4_9d48 = zext i8 %v3_9d48 to i32
  %v1_9d50 = and i32 %v4_9d48, 254
  %v2_9d58 = or i32 %v1_9d50, %v1_9d54
  store i32 %v2_9d58, i32* @r3, align 4
  store i32 %v0_9c38, i32* %r2.global-to-local, align 4
  %v1_9d60 = trunc i32 %v2_9d58 to i8
  store i8 %v1_9d60, i8* %v2_9cd0, align 1
  %v3_9d64 = load i32, i32* %r2.global-to-local, align 4
  %v4_9d64 = add i32 %v3_9d64, 14
  %v5_9d64 = inttoptr i32 %v4_9d64 to i16*
  store i16 %v1_9cc4, i16* %v5_9d64, align 2
  store i32 %v6_9724, i32* %r1.global-to-local, align 4
  %v0_9d6c = load i32, i32* @r4, align 4
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  %v2_9d70 = call i32 @function_d46c(i32 %v0_9d6c, i32 %v6_9724)
  store i32 %v2_9d70, i32* %r0.global-to-local, align 4
  store i32 %v6_9724, i32* %ip.global-to-local, align 4
  %v2_9d7c = load i32, i32* @r4, align 4
  %v4_9d7c = add i32 %v2_9d7c, %v6_9724
  %v5_9d7c = inttoptr i32 %v4_9d7c to i8*
  store i8 0, i8* %v5_9d7c, align 1
  %v3_9d80 = load i32, i32* %stack_var_-44, align 4
  %v1_9d88 = add i32 %v3_9d80, 1
  store i32 %v1_9d88, i32* @r3, align 4
  store i32 %v1_9d88, i32* %stack_var_-44, align 4
  %v5_9d94 = icmp slt i32 %v1_9d88, %arg2
  br i1 %v5_9d94, label %dec_label_pc_97bc.outer, label %dec_label_pc_9948.preheader

; uselistorder directives
  uselistorder i32 %v1_9d88, { 1, 0, 2 }
  uselistorder i8* %v2_9cd0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_9cc4, { 1, 0 }
  uselistorder i32 %v0_9c38, { 1, 2, 4, 3, 6, 5, 0 }
  uselistorder i32 %v5_9b6c, { 1, 0 }
  uselistorder i32 %v2_9b30, { 1, 2, 0 }
  uselistorder i32 %v0_9b10, { 1, 0 }
  uselistorder i32 %v0_9acc, { 1, 2, 0, 3 }
  uselistorder i32 %v7_9a60, { 0, 2, 3, 1 }
  uselistorder i32 %v1_9a48, { 1, 2, 0, 3 }
  uselistorder i32 %v5_9a10, { 1, 0 }
  uselistorder i32 %v4_9a00, { 1, 0 }
  uselistorder i32 %v3_99cc, { 1, 0 }
  uselistorder i32 %v3_99ac, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9998, { 1, 0 }
  uselistorder i32 %v3_9970, { 1, 0 }
  uselistorder i32 %v1_9964, { 2, 0, 1 }
  uselistorder i32 %v1_9938, { 1, 0, 2 }
  uselistorder i32 %v3_9920, { 0, 2, 3, 1 }
  uselistorder i32 %v4_98e8, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 3, 1, 2 }
  uselistorder i32 %v0_982c, { 1, 0, 2 }
  uselistorder i32 %v0_9b50, { 1, 0, 4, 5, 2, 3 }
  uselistorder i32 %v4_981c, { 1, 0 }
  uselistorder i1 %v7_9814, { 1, 0 }
  uselistorder i32 %v3_97c8, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %stack_var_-340.0.ph, { 3, 4, 1, 2, 0 }
  uselistorder i32 %v1_9d38, { 1, 0 }
  uselistorder i32 %v1_9d20, { 1, 0 }
  uselistorder i32 %v1_9cec, { 1, 0 }
  uselistorder i32 %v3_98e0, { 1, 0 }
  uselistorder i32 %v1_9d08, { 1, 0 }
  uselistorder i32 %v1_9cd4, { 1, 0 }
  uselistorder i32 %v4_9bec, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v1_9bac, { 2, 0, 1 }
  uselistorder i32 %v1_98f8, { 1, 0 }
  uselistorder i32 %v4_98f4, { 2, 0, 1 }
  uselistorder i32 %v2_9800, { 3, 2, 1, 4, 0 }
  uselistorder i16 %v5_97b4, { 1, 0 }
  uselistorder i32 %v0_97a4, { 1, 0 }
  uselistorder i32 %v3_9768, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_9754, { 1, 0 }
  uselistorder i32 %v1_9744, { 2, 1, 0 }
  uselistorder i32 %v6_9724, { 2, 7, 6, 5, 8, 3, 12, 11, 10, 13, 4, 0, 9, 1 }
  uselistorder i32 %v1_970c, { 1, 0 }
  uselistorder i32 %v1_96ec, { 1, 2, 0 }
  uselistorder i32 %v1_96cc, { 1, 2, 0 }
  uselistorder i32 %v1_96ac, { 1, 2, 0 }
  uselistorder i32 %v1_968c, { 1, 2, 0 }
  uselistorder i32 %v1_966c, { 1, 2, 0 }
  uselistorder i32 %v6_9648, { 1, 0 }
  uselistorder i32 %v1_9630, { 1, 2, 0 }
  uselistorder i32 %v6_9604, { 1, 2, 0 }
  uselistorder i32 %v6_95c8, { 1, 2, 0 }
  uselistorder i32 %v2_95b0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_95a0, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 38, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 7, 3, 4, 5, 6, 12, 8, 9, 10, 11, 14, 13, 16, 15, 17, 19, 18, 22, 20, 26, 21, 23, 25, 24, 29, 27, 28, 30, 31, 32, 34, 35, 33, 36, 38, 37, 40, 39, 43, 42, 41, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32 %arg2, { 2, 1, 4, 5, 3, 0, 6, 8, 7, 9, 10, 11 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %dec_label_pc_9aac, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_9a78, { 1, 0 }
  uselistorder label %dec_label_pc_9988, { 1, 0 }
  uselistorder label %dec_label_pc_9948, { 1, 0 }
  uselistorder label %dec_label_pc_9874, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9848, { 1, 0 }
  uselistorder label %dec_label_pc_9824, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_97d8, { 1, 0 }
  uselistorder label %dec_label_pc_97bc, { 1, 0 }
  uselistorder label %dec_label_pc_97bc.outer, { 1, 0 }
}

define i32 @function_9da0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9da0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_9da0 = load i32, i32* @sb, align 4
  %v24_9da0 = load i32, i32* @fp, align 4
  %v27_9da0 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_9dcc = call i32 @function_11998(i32 %arg2, i32 4)
  %v0_9dd0 = load i32, i32* @r4, align 4
  store i32 %v0_9dd0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_9ddc = load i32, i32* @sl, align 4
  store i32 %v0_9ddc, i32* %r3.global-to-local, align 4
  %v0_9de0 = load i32, i32* @r5, align 4
  store i32 %v0_9de0, i32* %r0.global-to-local, align 4
  %v5_9de4 = inttoptr i32 %v0_9dd0 to i32*
  %v6_9de4 = call i32 @function_8258(i32 %v0_9de0, i32* %v5_9de4, i32 2, i32 %v0_9ddc, i32 %v2_9dcc)
  %v1_9df0 = urem i32 %v6_9de4, 256
  store i32 %v1_9df0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9dfc = load i32, i32* @r4, align 4
  store i32 %v0_9dfc, i32* %r1.global-to-local, align 4
  %v0_9e00 = load i32, i32* @r5, align 4
  store i32 %v0_9e00, i32* %r0.global-to-local, align 4
  %v5_9e04 = trunc i32 %v6_9de4 to i8
  %v6_9e08 = inttoptr i32 %v0_9dfc to i32*
  %v7_9e08 = call i32 @function_8258(i32 %v0_9e00, i32* %v6_9e08, i32 3, i32 65535, i32 %v6_9de4)
  %v0_9e0c = load i32, i32* @r4, align 4
  store i32 %v0_9e0c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_9e1c = load i32, i32* @r5, align 4
  store i32 %v0_9e1c, i32* %r0.global-to-local, align 4
  %v5_9e20 = inttoptr i32 %v0_9e0c to i32*
  %v6_9e20 = call i32 @function_8258(i32 %v0_9e1c, i32* %v5_9e20, i32 4, i32 64, i32 %v7_9e08)
  %v1_9e28 = urem i32 %v6_9e20, 256
  store i32 %v1_9e28, i32* %ip.global-to-local, align 4
  %v0_9e2c = load i32, i32* @r4, align 4
  store i32 %v0_9e2c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_9e34 = load i32, i32* @sl, align 4
  store i32 %v0_9e34, i32* %r3.global-to-local, align 4
  %v0_9e38 = load i32, i32* @r5, align 4
  store i32 %v0_9e38, i32* %r0.global-to-local, align 4
  %v6_9e40 = inttoptr i32 %v0_9e2c to i32*
  %v7_9e40 = call i32 @function_8258(i32 %v0_9e38, i32* %v6_9e40, i32 5, i32 %v0_9e34, i32 %v1_9e28)
  %v1_9e4c = urem i32 %v7_9e40, 256
  store i32 %v1_9e4c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9e58 = load i32, i32* @r4, align 4
  store i32 %v0_9e58, i32* %r1.global-to-local, align 4
  %v0_9e5c = load i32, i32* @r5, align 4
  store i32 %v0_9e5c, i32* %r0.global-to-local, align 4
  %v5_9e64 = inttoptr i32 %v0_9e58 to i32*
  %v6_9e64 = call i32 @function_8258(i32 %v0_9e5c, i32* %v5_9e64, i32 6, i32 65535, i32 %v1_9e4c)
  %v0_9e6c = load i32, i32* @r4, align 4
  store i32 %v0_9e6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9e64, i32* %fp.global-to-local, align 4
  %v0_9e7c = load i32, i32* @r5, align 4
  store i32 %v0_9e7c, i32* %r0.global-to-local, align 4
  %v5_9e80 = inttoptr i32 %v0_9e6c to i32*
  %v6_9e80 = call i32 @function_8258(i32 %v0_9e7c, i32* %v5_9e80, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9e88 = load i32, i32* @r4, align 4
  store i32 %v0_9e88, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v6_9e80, i32* %sb.global-to-local, align 4
  %v0_9e98 = load i32, i32* @r5, align 4
  store i32 %v0_9e98, i32* %r0.global-to-local, align 4
  %v5_9e9c = inttoptr i32 %v0_9e88 to i32*
  %v6_9e9c = call i32 @function_8258(i32 %v0_9e98, i32* %v5_9e9c, i32 16, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9ea8 = load i32, i32* @r4, align 4
  store i32 %v0_9ea8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_9eb4 = load i32, i32* @r5, align 4
  store i32 %v0_9eb4, i32* %r0.global-to-local, align 4
  %v5_9eb8 = inttoptr i32 %v0_9ea8 to i32*
  %v6_9eb8 = call i32 @function_8258(i32 %v0_9eb4, i32* %v5_9eb8, i32 17, i32 65535, i32 %v6_9e9c)
  %v0_9ebc = load i32, i32* @r4, align 4
  store i32 %v0_9ebc, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9ec8 = load i32, i32* @sl, align 4
  store i32 %v0_9ec8, i32* %r3.global-to-local, align 4
  %v0_9ecc = load i32, i32* @r5, align 4
  store i32 %v0_9ecc, i32* %r0.global-to-local, align 4
  %v5_9ed0 = inttoptr i32 %v0_9ebc to i32*
  %v6_9ed0 = call i32 @function_8258(i32 %v0_9ecc, i32* %v5_9ed0, i32 10, i32 %v0_9ec8, i32 %v6_9eb8)
  %v0_9ed4 = load i32, i32* @r4, align 4
  store i32 %v0_9ed4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ee4 = load i32, i32* @r5, align 4
  store i32 %v0_9ee4, i32* %r0.global-to-local, align 4
  %v5_9ee8 = inttoptr i32 %v0_9ed4 to i32*
  %v6_9ee8 = call i32 @function_8258(i32 %v0_9ee4, i32* %v5_9ee8, i32 11, i32 1, i32 %v6_9ed0)
  %v0_9eec = load i32, i32* @r4, align 4
  store i32 %v0_9eec, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_9ef8 = load i32, i32* @sl, align 4
  store i32 %v0_9ef8, i32* %r3.global-to-local, align 4
  %v0_9efc = load i32, i32* @r5, align 4
  store i32 %v0_9efc, i32* %r0.global-to-local, align 4
  %v5_9f00 = inttoptr i32 %v0_9eec to i32*
  %v6_9f00 = call i32 @function_8258(i32 %v0_9efc, i32* %v5_9f00, i32 12, i32 %v0_9ef8, i32 %v6_9ee8)
  %v0_9f04 = load i32, i32* @r4, align 4
  store i32 %v0_9f04, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_9f10 = load i32, i32* @sl, align 4
  store i32 %v0_9f10, i32* %r3.global-to-local, align 4
  %v0_9f14 = load i32, i32* @r5, align 4
  store i32 %v0_9f14, i32* %r0.global-to-local, align 4
  %v5_9f18 = inttoptr i32 %v0_9f04 to i32*
  %v6_9f18 = call i32 @function_8258(i32 %v0_9f14, i32* %v5_9f18, i32 13, i32 %v0_9f10, i32 %v6_9f00)
  %v0_9f1c = load i32, i32* @r4, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_9f28 = load i32, i32* @sl, align 4
  store i32 %v0_9f28, i32* %r3.global-to-local, align 4
  %v0_9f2c = load i32, i32* @r5, align 4
  store i32 %v0_9f2c, i32* %r0.global-to-local, align 4
  %v5_9f30 = inttoptr i32 %v0_9f1c to i32*
  %v6_9f30 = call i32 @function_8258(i32 %v0_9f2c, i32* %v5_9f30, i32 14, i32 %v0_9f28, i32 %v6_9f18)
  %v0_9f34 = load i32, i32* @r4, align 4
  store i32 %v0_9f34, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @sl, align 4
  store i32 %v0_9f3c, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  store i32 %v0_9f44, i32* %r0.global-to-local, align 4
  %v5_9f48 = inttoptr i32 %v0_9f34 to i32*
  %v6_9f48 = call i32 @function_8258(i32 %v0_9f44, i32* %v5_9f48, i32 15, i32 %v0_9f3c, i32 %v6_9f30)
  %v0_9f4c = load i32, i32* @r4, align 4
  store i32 %v0_9f4c, i32* %r1.global-to-local, align 4
  %v0_9f54 = load i32, i32* @sl, align 4
  store i32 %v0_9f54, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_9f5c = load i32, i32* @r5, align 4
  store i32 %v0_9f5c, i32* %r0.global-to-local, align 4
  %v5_9f60 = inttoptr i32 %v0_9f4c to i32*
  %v6_9f60 = call i32 @function_8258(i32 %v0_9f5c, i32* %v5_9f60, i32 %v0_9f54, i32 512, i32 %v6_9f48)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9f6c = load i32, i32* @r4, align 4
  store i32 %v0_9f6c, i32* %r1.global-to-local, align 4
  store i32 %v6_9f60, i32* @r8, align 4
  %v0_9f74 = load i32, i32* @r5, align 4
  store i32 %v0_9f74, i32* %r0.global-to-local, align 4
  %v5_9f78 = inttoptr i32 %v0_9f6c to i32*
  %v6_9f78 = call i32 @function_8258(i32 %v0_9f74, i32* %v5_9f78, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_9f84 = load i32, i32* @global_var_202dc.42, align 4
  store i32 %v2_9f84, i32* %r3.global-to-local, align 4
  %v1_9f88 = urem i32 %v6_9f78, 256
  store i32 %v1_9f88, i32* %ip.global-to-local, align 4
  %v0_9f8c = load i32, i32* @r4, align 4
  store i32 %v0_9f8c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_9f94 = load i32, i32* @r5, align 4
  store i32 %v0_9f94, i32* %r0.global-to-local, align 4
  %v5_9f9c = inttoptr i32 %v0_9f8c to i32*
  %v6_9f9c = call i32 @function_81ec(i32 %v0_9f94, i32* %v5_9f9c, i32 19, i32 %v2_9f84, i32 %v1_9f88)
  %v0_9fa4 = load i32, i32* @sl, align 4
  store i32 %v0_9fa4, i32* %r0.global-to-local, align 4
  %v1_9fa8 = inttoptr i32 %v0_9fa4 to i32*
  %v2_9fa8 = call i32 @function_102c4(i32* %v1_9fa8)
  %v1_9fac = load i32, i32* @r6, align 4
  %v2_9fac = add i32 %v1_9fac, %v2_9fa8
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9fc0 = call i32 @function_10e30(i32 2, i32 3, i32 6)
  store i32 %v3_9fc0, i32* %r0.global-to-local, align 4
  %v7_9fc4 = icmp eq i32 %v3_9fc0, -1
  store i1 %v7_9fc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9fc4, label %dec_label_pc_a4a8, label %dec_label_pc_9fd0

dec_label_pc_9fd0:                                ; preds = %dec_label_pc_9da0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9fd8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9fd8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_9fe0 = load i32, i32* @sl, align 4
  store i32 %v0_9fe0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9fec = call i32 @function_10dec(i32 %v3_9fc0, i32 %v0_9fe0, i32 3, i32 %v6_9fd8, i32 4)
  store i32 %v5_9fec, i32* %r0.global-to-local, align 4
  %v7_9ff0 = icmp eq i32 %v5_9fec, -1
  store i1 %v7_9ff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ff0, label %dec_label_pc_a4b4, label %dec_label_pc_9ff8

dec_label_pc_9ff8:                                ; preds = %dec_label_pc_9fd0
  store i32 %v7_9e08, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_a004 = load i32, i32* %fp.global-to-local, align 4
  %v0_a008 = load i32, i32* %sb.global-to-local, align 4
  %v3_a008 = mul i32 %v0_a008, 65536
  store i32 %v3_a008, i32* %sb.global-to-local, align 4
  %v3_a00c = urem i32 %v7_9e08, 65536
  store i32 %v3_a00c, i32* %r2.global-to-local, align 4
  %v3_a010 = urem i32 %v0_a004, 65536
  store i32 %v3_a010, i32* %r3.global-to-local, align 4
  %v3_a014 = urem i32 %v0_a008, 65536
  store i32 %v3_a014, i32* %ip.global-to-local, align 4
  %v2_a018 = icmp eq i32 %arg2, 0
  store i1 %v2_a018, i1* %cpsr_z.global-to-local, align 1
  %v0_a01c = load i32, i32* @sl, align 4
  store i32 %v0_a01c, i32* %stack_var_-44, align 4
  br i1 %v2_a018, label %dec_label_pc_a258.preheader, label %dec_label_pc_a030

dec_label_pc_a030:                                ; preds = %dec_label_pc_9ff8
  %v0_a040 = load i32, i32* @r8, align 4
  %v3_a040 = mul i32 %v0_a040, 65536
  %v1_a048 = add i32 %v3_a040, 2621440
  %tmp59 = mul i32 %v0_a004, 256
  %v3_a054 = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_a008, 256
  %v3_a058 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_a004, 256
  %v4_a060 = urem i32 %tmp61, 256
  %v5_a060 = or i32 %v4_a060, %v3_a054
  %tmp62 = udiv i32 %v1_a048, 256
  %v3_a064 = and i32 %tmp62, 65280
  %tmp63 = mul i32 %v7_9e08, 256
  %v3_a068 = and i32 %tmp63, 65280
  %tmp64 = udiv i32 %v0_a008, 256
  %v4_a06c = urem i32 %tmp64, 256
  %v5_a06c = or i32 %v4_a06c, %v3_a058
  store i32 %v5_a06c, i32* @fp, align 4
  %v4_a07c = udiv i32 %v1_a048, 16777216
  %v5_a07c = or i32 %v3_a064, %v4_a07c
  store i32 %v5_a07c, i32* @lr, align 4
  %tmp65 = udiv i32 %v7_9e08, 256
  %v4_a080 = urem i32 %tmp65, 256
  %v5_a080 = or i32 %v4_a080, %v3_a068
  store i32 %v5_a080, i32* @r5, align 4
  %tmp66 = mul i32 %v6_9e9c, 256
  %v3_a08c = and i32 %tmp66, 65280
  %v1_a090 = urem i32 %v6_9ed0, 2
  %v1_a094 = urem i32 %v6_9ee8, 2
  %tmp67 = udiv i32 %v6_9e9c, 256
  %v4_a098 = urem i32 %tmp67, 256
  %v5_a098 = or i32 %v4_a098, %v3_a08c
  %v1_a0a4 = urem i32 %v6_9f00, 2
  store i32 %v1_a0a4, i32* %r2.global-to-local, align 4
  %v1_a0a8 = urem i32 %v6_9f18, 2
  store i32 %v1_a0a8, i32* %r3.global-to-local, align 4
  store i32 %v6_9f30, i32* %ip.global-to-local, align 4
  store i32 %v6_9f48, i32* %r0.global-to-local, align 4
  store i32 %v6_9f00, i32* %r1.global-to-local, align 4
  %v1_a0d0 = urem i32 %v6_9f30, 2
  store i32 %v1_a0d0, i32* @sb, align 4
  store i32 %v0_a01c, i32* @r4, align 4
  %v1_a0d8 = urem i32 %v6_9f00, 256
  store i32 %v1_a0d8, i32* @r6, align 4
  %v1_a0dc = urem i32 %v6_9f48, 2
  store i32 %v1_a0dc, i32* @sl, align 4
  %sext = mul nuw i32 %v5_a07c, 65536
  %v4_a150 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_a080, 65536
  %v4_a158 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_a060, 65536
  %v4_a174 = sdiv i32 %sext7, 65536
  %tmp = sub nsw i32 0, %v1_a094
  %v4_a1c4 = and i32 %tmp, 16
  %tmp70 = sub nsw i32 0, %v1_a0a4
  %v4_a1d8 = and i32 %tmp70, 8
  %tmp71 = sub nsw i32 0, %v1_a0a8
  %v4_a1ec = and i32 %tmp71, 4
  %v1_a144 = trunc i32 %v6_9e20 to i8
  br label %dec_label_pc_a0e0

dec_label_pc_a0e0:                                ; preds = %.thread9, %dec_label_pc_a030
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a0ec = call i32 @function_11998(i32 1510, i32 1)
  %v2_a0f4 = load i32, i32* @r4, align 4
  %v5_a0f4 = mul i32 %v2_a0f4, 4
  %v6_a0f4 = add i32 %v5_a0f4, %v2_9dcc
  %v7_a0f4 = inttoptr i32 %v6_a0f4 to i32*
  store i32 %v2_a0ec, i32* %v7_a0f4, align 4
  %v3_a0f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a0f8, i32* %r2.global-to-local, align 4
  %v5_a100 = mul i32 %v3_a0f8, 24
  %v1_a104 = load i32, i32* @r7, align 4
  %v2_a104 = add i32 %v1_a104, %v5_a100
  store i32 %v2_a104, i32* %r0.global-to-local, align 4
  store i32 %v2_9dcc, i32* %r3.global-to-local, align 4
  %v4_a10c = mul i32 %v3_a0f8, 4
  %v5_a10c = add i32 %v4_a10c, %v2_9dcc
  %v6_a10c = inttoptr i32 %v5_a10c to i32*
  %v7_a10c = load i32, i32* %v6_a10c, align 4
  store i32 %v7_a10c, i32* %r1.global-to-local, align 4
  %v1_a110 = inttoptr i32 %v7_a10c to i8*
  %v2_a110 = load i8, i8* %v1_a110, align 1
  %tmp72 = urem i8 %v2_a110, 16
  %v1_a114 = zext i8 %tmp72 to i32
  %v1_a118 = or i32 %v1_a114, 64
  store i32 %v1_a118, i32* %r3.global-to-local, align 4
  %v1_a11c = trunc i32 %v1_a118 to i8
  store i8 %v1_a11c, i8* %v1_a110, align 1
  %v0_a120 = load i32, i32* %r1.global-to-local, align 4
  %v1_a120 = inttoptr i32 %v0_a120 to i8*
  %v2_a120 = load i8, i8* %v1_a120, align 1
  %v1_a124 = and i8 %v2_a120, -16
  %v1_a128 = or i8 %v1_a124, 5
  store i32 %v1_9e4c, i32* %ip.global-to-local, align 4
  store i8 %v1_a128, i8* %v1_a120, align 1
  store i32 %v6_9de4, i32* %r2.global-to-local, align 4
  %v2_a138 = load i32, i32* %r1.global-to-local, align 4
  %v3_a138 = add i32 %v2_a138, 1
  %v4_a138 = inttoptr i32 %v3_a138 to i8*
  store i8 %v5_9e04, i8* %v4_a138, align 1
  store i32 %v1_9e28, i32* %r3.global-to-local, align 4
  %v0_a140 = load i32, i32* %ip.global-to-local, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v2_a144 = load i32, i32* %r1.global-to-local, align 4
  %v3_a144 = add i32 %v2_a144, 8
  %v4_a144 = inttoptr i32 %v3_a144 to i8*
  store i8 %v1_a144, i8* %v4_a144, align 1
  %v0_a148 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a148, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a0e0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a14c = load i32, i32* %r1.global-to-local, align 4
  %v4_a14c = add i32 %v3_a14c, 6
  %v5_a14c = inttoptr i32 %v4_a14c to i16*
  store i16 64, i16* %v5_a14c, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a0e0, %bb
  store i32 %v4_a150, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_a158, i32* %r2.global-to-local, align 4
  %v2_a15c = load i32, i32* %r1.global-to-local, align 4
  %v3_a15c = add i32 %v2_a15c, 9
  %v4_a15c = inttoptr i32 %v3_a15c to i8*
  store i8 6, i8* %v4_a15c, align 1
  %v0_a160 = load i32, i32* %ip.global-to-local, align 4
  %v1_a160 = trunc i32 %v0_a160 to i16
  %v2_a160 = load i32, i32* %r1.global-to-local, align 4
  %v3_a160 = add i32 %v2_a160, 2
  %v4_a160 = inttoptr i32 %v3_a160 to i16*
  store i16 %v1_a160, i16* %v4_a160, align 2
  store i32 %v6_9f9c, i32* %ip.global-to-local, align 4
  %v1_a168 = load i32, i32* %r1.global-to-local, align 4
  %v2_a168 = add i32 %v1_a168, 12
  %v3_a168 = inttoptr i32 %v2_a168 to i32*
  store i32 %v6_9f9c, i32* %v3_a168, align 4
  %v0_a16c = load i32, i32* %r2.global-to-local, align 4
  %v1_a16c = trunc i32 %v0_a16c to i16
  %v2_a16c = load i32, i32* %r1.global-to-local, align 4
  %v3_a16c = add i32 %v2_a16c, 4
  %v4_a16c = inttoptr i32 %v3_a16c to i16*
  store i16 %v1_a16c, i16* %v4_a16c, align 2
  %v0_a170 = load i32, i32* %r0.global-to-local, align 4
  %v1_a170 = add i32 %v0_a170, 16
  %v2_a170 = inttoptr i32 %v1_a170 to i32*
  %v3_a170 = load i32, i32* %v2_a170, align 4
  store i32 %v3_a170, i32* %r2.global-to-local, align 4
  store i32 %v4_a174, i32* %r0.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 16
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v3_a170, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r0.global-to-local, align 4
  %v1_a17c = trunc i32 %v0_a17c to i16
  %v2_a17c = load i32, i32* %r1.global-to-local, align 4
  %v3_a17c = add i32 %v2_a17c, 20
  %v4_a17c = inttoptr i32 %v3_a17c to i16*
  store i16 %v1_a17c, i16* %v4_a17c, align 2
  %v0_a180 = load i32, i32* %r1.global-to-local, align 4
  %v1_a180 = add i32 %v0_a180, 20
  store i32 %v1_a180, i32* @r4, align 4
  %v1_a184 = add i32 %v0_a180, 32
  %v2_a184 = inttoptr i32 %v1_a184 to i8*
  %v3_a184 = load i8, i8* %v2_a184, align 1
  %v4_a184 = zext i8 %v3_a184 to i32
  %v1_a188 = and i32 %v4_a184, 95
  store i32 %v1_a188, i32* %r3.global-to-local, align 4
  %v1_a18c = add i32 %v0_a180, 33
  %v2_a18c = inttoptr i32 %v1_a18c to i8*
  %v3_a18c = load i8, i8* %v2_a18c, align 1
  %v4_a18c = zext i8 %v3_a18c to i32
  store i32 %v4_a18c, i32* %r2.global-to-local, align 4
  %v1_a190 = or i32 %v1_a188, 80
  %v1_a194 = add i32 %v0_a180, 40
  store i32 %v1_a194, i32* @r5, align 4
  store i32 %v1_a090, i32* %r1.global-to-local, align 4
  %v1_a19c = trunc i32 %v1_a190 to i8
  store i8 %v1_a19c, i8* %v2_a184, align 1
  store i32 %v5_a098, i32* %r3.global-to-local, align 4
  %v0_a1a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1a4 = and i32 %v0_a1a4, -33
  %v1_a1a8 = load i32, i32* %r1.global-to-local, align 4
  %v4_a1a8 = mul i32 %v1_a1a8, 32
  %v5_a1a8 = or i32 %v4_a1a8, %v1_a1a4
  store i32 %v5_a1a8, i32* %r2.global-to-local, align 4
  %v1_a1ac = load i32, i32* @r4, align 4
  %v2_a1ac = add i32 %v1_a1ac, 4
  %v3_a1ac = inttoptr i32 %v2_a1ac to i32*
  store i32 %v5_a098, i32* %v3_a1ac, align 4
  %v0_a1b0 = load i32, i32* @fp, align 4
  %v1_a1b0 = trunc i32 %v0_a1b0 to i16
  %v2_a1b0 = load i32, i32* @r4, align 4
  %v3_a1b0 = add i32 %v2_a1b0, 2
  %v4_a1b0 = inttoptr i32 %v3_a1b0 to i16*
  store i16 %v1_a1b0, i16* %v4_a1b0, align 2
  %v0_a1b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1b4 = trunc i32 %v0_a1b4 to i8
  %v2_a1b4 = load i32, i32* @r4, align 4
  %v3_a1b4 = add i32 %v2_a1b4, 13
  %v4_a1b4 = inttoptr i32 %v3_a1b4 to i8*
  store i8 %v1_a1b4, i8* %v4_a1b4, align 1
  %v0_a1b8 = load i32, i32* @r4, align 4
  %v1_a1b8 = add i32 %v0_a1b8, 13
  %v2_a1b8 = inttoptr i32 %v1_a1b8 to i8*
  %v3_a1b8 = load i8, i8* %v2_a1b8, align 1
  %v4_a1b8 = zext i8 %v3_a1b8 to i32
  store i32 %v1_a094, i32* %ip.global-to-local, align 4
  %v1_a1c0 = and i32 %v4_a1b8, 239
  %v5_a1c4 = or i32 %v1_a1c0, %v4_a1c4
  store i32 %v5_a1c4, i32* %r3.global-to-local, align 4
  %v1_a1c8 = trunc i32 %v5_a1c4 to i8
  store i8 %v1_a1c8, i8* %v2_a1b8, align 1
  %v0_a1cc = load i32, i32* @r4, align 4
  %v1_a1cc = add i32 %v0_a1cc, 13
  %v2_a1cc = inttoptr i32 %v1_a1cc to i8*
  %v3_a1cc = load i8, i8* %v2_a1cc, align 1
  %v4_a1cc = zext i8 %v3_a1cc to i32
  store i32 %v1_a0a4, i32* %r0.global-to-local, align 4
  %v1_a1d4 = and i32 %v4_a1cc, 247
  %v5_a1d8 = or i32 %v1_a1d4, %v4_a1d8
  store i32 %v5_a1d8, i32* %r2.global-to-local, align 4
  %v1_a1dc = trunc i32 %v5_a1d8 to i8
  store i8 %v1_a1dc, i8* %v2_a1cc, align 1
  %v0_a1e0 = load i32, i32* @r4, align 4
  %v1_a1e0 = add i32 %v0_a1e0, 13
  %v2_a1e0 = inttoptr i32 %v1_a1e0 to i8*
  %v3_a1e0 = load i8, i8* %v2_a1e0, align 1
  %v4_a1e0 = zext i8 %v3_a1e0 to i32
  store i32 %v1_a0a8, i32* %r1.global-to-local, align 4
  %v1_a1e8 = and i32 %v4_a1e0, 251
  %v5_a1ec = or i32 %v1_a1e8, %v4_a1ec
  store i32 %v5_a1ec, i32* %r3.global-to-local, align 4
  %v1_a1f0 = trunc i32 %v5_a1ec to i8
  store i8 %v1_a1f0, i8* %v2_a1e0, align 1
  %v0_a1f4 = load i32, i32* @r4, align 4
  %v1_a1f4 = add i32 %v0_a1f4, 13
  %v2_a1f4 = inttoptr i32 %v1_a1f4 to i8*
  %v3_a1f4 = load i8, i8* %v2_a1f4, align 1
  %v4_a1f4 = zext i8 %v3_a1f4 to i32
  %v1_a1f8 = and i32 %v4_a1f4, 253
  %v1_a1fc = load i32, i32* @sb, align 4
  %v3_a1fc = mul i32 %v1_a1fc, 2
  %v4_a1fc = or i32 %v3_a1fc, %v1_a1f8
  store i32 %v4_a1fc, i32* %r2.global-to-local, align 4
  %v1_a200 = trunc i32 %v4_a1fc to i8
  store i8 %v1_a200, i8* %v2_a1f4, align 1
  %v0_a204 = load i32, i32* @r4, align 4
  %v1_a204 = add i32 %v0_a204, 13
  %v2_a204 = inttoptr i32 %v1_a204 to i8*
  %v3_a204 = load i8, i8* %v2_a204, align 1
  %v4_a204 = zext i8 %v3_a204 to i32
  %v1_a208 = and i32 %v4_a204, 254
  %v0_a20c = load i32, i32* @sl, align 4
  %v2_a20c = or i32 %v1_a208, %v0_a20c
  store i32 %v2_a20c, i32* %r3.global-to-local, align 4
  %v1_a210 = trunc i32 %v2_a20c to i8
  store i8 %v1_a210, i8* %v2_a204, align 1
  %v0_a214 = call i32 @function_d3a8()
  %v1_a214 = trunc i32 %v0_a214 to i16
  store i32 %v0_a214, i32* %r0.global-to-local, align 4
  %v0_a218 = load i32, i32* @r6, align 4
  %v2_a218 = icmp eq i32 %v0_a218, 0
  store i1 %v2_a218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a218, label %.thread9, label %bb68

bb68:                                             ; preds = %.thread
  %v1_a21c = load i32, i32* @r4, align 4
  %v2_a21c = add i32 %v1_a21c, 13
  %v3_a21c = inttoptr i32 %v2_a21c to i8*
  %v4_a21c = load i8, i8* %v3_a21c, align 1
  %v5_a21c = zext i8 %v4_a21c to i32
  %v2_a220 = or i32 %v5_a21c, 8
  store i32 %v2_a220, i32* @r3, align 4
  %v2_a224 = trunc i32 %v2_a220 to i8
  store i8 %v2_a224, i8* %v3_a21c, align 1
  br label %.thread9

.thread9:                                         ; preds = %.thread, %bb68
  %v3_a228 = load i32, i32* @r4, align 4
  %v4_a228 = add i32 %v3_a228, 14
  %v5_a228 = inttoptr i32 %v4_a228 to i16*
  store i16 %v1_a214, i16* %v5_a228, align 2
  %v0_a22c = load i32, i32* @r8, align 4
  store i32 %v0_a22c, i32* %r1.global-to-local, align 4
  %v0_a230 = load i32, i32* @r5, align 4
  store i32 %v0_a230, i32* %r0.global-to-local, align 4
  %v2_a234 = call i32 @function_d46c(i32 %v0_a230, i32 %v0_a22c)
  store i32 %v2_a234, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a23c = load i32, i32* @r5, align 4
  %v3_a23c = load i32, i32* @r8, align 4
  %v4_a23c = add i32 %v3_a23c, %v2_a23c
  %v5_a23c = inttoptr i32 %v4_a23c to i8*
  store i8 0, i8* %v5_a23c, align 1
  %v3_a240 = load i32, i32* %stack_var_-44, align 4
  %v1_a244 = add i32 %v3_a240, 1
  store i32 %v1_a244, i32* @r4, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v9_a24c = icmp eq i32 %v1_a244, %arg2
  store i1 %v9_a24c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a244, i32* %stack_var_-44, align 4
  %v5_a254 = icmp slt i32 %v1_a244, %arg2
  br i1 %v5_a254, label %dec_label_pc_a0e0, label %dec_label_pc_a258.preheader

dec_label_pc_a258.preheader:                      ; preds = %.thread9, %dec_label_pc_9ff8
  %v2_a294 = icmp eq i32 %v6_9f9c, -1
  %v7_a294 = icmp eq i32 %v6_9f9c, -1
  %v3_a408 = icmp eq i32 %v3_a00c, 65535
  %v2_a46c = icmp eq i32 %v1_9f88, 0
  br label %dec_label_pc_a258

dec_label_pc_a258:                                ; preds = %dec_label_pc_a258.preheader, %dec_label_pc_a494
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_a018, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a018, label %dec_label_pc_a494, label %dec_label_pc_a26c

dec_label_pc_a26c:                                ; preds = %dec_label_pc_a258
  %v0_a26c = load i32, i32* @r8, align 4
  %v3_a26c = mul i32 %v0_a26c, 65536
  %v1_a270 = add i32 %v3_a26c, 1310720
  store i32 %v1_a270, i32* %r2.global-to-local, align 4
  %tmp69 = udiv i32 %v1_a270, 256
  %v3_a278 = and i32 %tmp69, 65280
  store i32 %v3_a278, i32* %r3.global-to-local, align 4
  %v4_a27c = udiv i32 %v1_a270, 16777216
  %v5_a27c = or i32 %v3_a278, %v4_a27c
  store i32 %v5_a27c, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_a284 = add i32 %v0_a26c, 20
  store i32 %v1_a284, i32* @sb, align 4
  %v1_a288 = add i32 %v0_a26c, 40
  store i32 %v1_a288, i32* @sl, align 4
  br label %dec_label_pc_a374

dec_label_pc_a290:                                ; preds = %dec_label_pc_a374
  store i32 %v6_9f9c, i32* %r0.global-to-local, align 4
  store i1 %v7_a294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a294, label %dec_label_pc_a3f8, label %dec_label_pc_a29c

dec_label_pc_a29c:                                ; preds = %dec_label_pc_a398, %dec_label_pc_a290
  store i32 %v3_a00c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a408, label %dec_label_pc_a414, label %dec_label_pc_a2b0

dec_label_pc_a2b0:                                ; preds = %dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge, %dec_label_pc_a29c
  %v1_a2b4 = phi i32 [ %v1_a2b4.pre, %dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge ], [ 65535, %dec_label_pc_a29c ]
  store i32 %v3_a010, i32* %r2.global-to-local, align 4
  %v9_a2b4 = icmp eq i32 %v3_a010, %v1_a2b4
  store i1 %v9_a2b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2b4, label %dec_label_pc_a428, label %dec_label_pc_a2bc

dec_label_pc_a2bc:                                ; preds = %dec_label_pc_a414.dec_label_pc_a2bc_crit_edge, %dec_label_pc_a2b0
  %v1_a2c0 = phi i32 [ %v1_a2c0.pre, %dec_label_pc_a414.dec_label_pc_a2bc_crit_edge ], [ %v1_a2b4, %dec_label_pc_a2b0 ]
  store i32 %v3_a014, i32* @r3, align 4
  %v9_a2c0 = icmp eq i32 %v3_a014, %v1_a2c0
  store i1 %v9_a2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2c0, label %dec_label_pc_a43c, label %dec_label_pc_a2c8

dec_label_pc_a2c8:                                ; preds = %dec_label_pc_a428.dec_label_pc_a2c8_crit_edge, %dec_label_pc_a2bc
  %v1_a2cc = phi i32 [ %v1_a2cc.pre, %dec_label_pc_a428.dec_label_pc_a2c8_crit_edge ], [ %v1_a2c0, %dec_label_pc_a2bc ]
  store i32 %v6_9e9c, i32* @ip, align 4
  %v9_a2cc = icmp eq i32 %v6_9e9c, %v1_a2cc
  store i1 %v9_a2cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2cc, label %dec_label_pc_a450, label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge, %dec_label_pc_a2c8
  %v1_a2d8 = phi i32 [ %v1_a2d8.pre, %dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge ], [ %v1_a2cc, %dec_label_pc_a2c8 ]
  store i32 %v6_9eb8, i32* %r0.global-to-local, align 4
  %v9_a2d8 = icmp eq i32 %v6_9eb8, %v1_a2d8
  store i1 %v9_a2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2d8, label %dec_label_pc_a464, label %dec_label_pc_a2e0

dec_label_pc_a2e0:                                ; preds = %dec_label_pc_a450, %dec_label_pc_a2d4
  store i32 %v1_9f88, i32* %r1.global-to-local, align 4
  store i1 %v2_a46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a46c, label %dec_label_pc_a2ec, label %dec_label_pc_a478

dec_label_pc_a2ec:                                ; preds = %dec_label_pc_a2e0, %dec_label_pc_a464, %dec_label_pc_a478
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a2f0 = load i32, i32* @r5, align 4
  %v3_a2f0 = add i32 %v2_a2f0, 10
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i16*
  store i16 0, i16* %v4_a2f0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a2f8 = load i32, i32* @r5, align 4
  store i32 %v0_a2f8, i32* @r0, align 4
  %v2_a2fc = call i32 @function_bf78(i32 %v0_a2f8, i32 20)
  %v3_a2fc = trunc i32 %v2_a2fc to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a304 = load i32, i32* @r5, align 4
  %v4_a304 = add i32 %v3_a304, 10
  %v5_a304 = inttoptr i32 %v4_a304 to i16*
  store i16 %v3_a2fc, i16* %v5_a304, align 2
  %v0_a308 = load i32, i32* @r6, align 4
  store i32 %v0_a308, i32* @r1, align 4
  %v0_a30c = load i32, i32* %r3.global-to-local, align 4
  %v1_a30c = trunc i32 %v0_a30c to i16
  %v3_a30c = add i32 %v0_a308, 16
  %v4_a30c = inttoptr i32 %v3_a30c to i16*
  store i16 %v1_a30c, i16* %v4_a30c, align 2
  %v0_a310 = load i32, i32* @fp, align 4
  store i32 %v0_a310, i32* %r2.global-to-local, align 4
  %v0_a314 = load i32, i32* @sb, align 4
  store i32 %v0_a314, i32* %r3.global-to-local, align 4
  %v0_a318 = load i32, i32* @r5, align 4
  store i32 %v0_a318, i32* %r0.global-to-local, align 4
  %v4_a31c = call i32 @function_bfc8(i32 %v0_a318, i32 %v0_a308, i32 %v0_a310, i32 %v0_a314)
  %v5_a31c = trunc i32 %v4_a31c to i16
  store i32 %v4_a31c, i32* %r0.global-to-local, align 4
  %v3_a320 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a320, i32* %r3.global-to-local, align 4
  %v3_a324 = mul i32 %v3_a320, 32
  store i32 %v3_a324, i32* %lr.global-to-local, align 4
  %v3_a328 = load i32, i32* @r6, align 4
  %v4_a328 = add i32 %v3_a328, 16
  %v5_a328 = inttoptr i32 %v4_a328 to i16*
  store i16 %v5_a31c, i16* %v5_a328, align 2
  %v0_a32c = load i32, i32* %lr.global-to-local, align 4
  %v1_a32c = load i32, i32* %r3.global-to-local, align 4
  %tmp73 = mul i32 %v1_a32c, -8
  %v5_a32c = add i32 %v0_a32c, %tmp73
  store i32 %v5_a32c, i32* %lr.global-to-local, align 4
  %v0_a330 = load i32, i32* @r6, align 4
  %v1_a330 = add i32 %v0_a330, 2
  %v2_a330 = inttoptr i32 %v1_a330 to i16*
  %v3_a330 = load i16, i16* %v2_a330, align 2
  %v1_a334 = load i32, i32* @r7, align 4
  %v2_a334 = add i32 %v1_a334, %v5_a32c
  store i32 %v2_a334, i32* @lr, align 4
  %v3_a338 = add i32 %v2_a334, 2
  %v4_a338 = inttoptr i32 %v3_a338 to i16*
  store i16 %v3_a330, i16* %v4_a338, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a344 = load i32, i32* @r5, align 4
  store i32 %v0_a344, i32* %r1.global-to-local, align 4
  store i32 %v3_9fc0, i32* %r0.global-to-local, align 4
  %v0_a34c = load i32, i32* @sl, align 4
  store i32 %v0_a34c, i32* %r2.global-to-local, align 4
  %v0_a354 = load i32, i32* @lr, align 4
  %v6_a358 = call i32 @function_10dac(i32 %v3_9fc0, i32 %v0_a344, i32 %v0_a34c, i32 16384, i32 %v0_a354, i32 16)
  %v3_a35c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a35c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_a364 = add i32 %v3_a35c, 1
  store i32 %v1_a364, i32* %r0.global-to-local, align 4
  %v9_a368 = icmp eq i32 %v1_a364, %arg2
  store i1 %v9_a368, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a364, i32* %stack_var_-44, align 4
  %v6_a370 = icmp slt i32 %v1_a364, %arg2
  br i1 %v6_a370, label %dec_label_pc_a374, label %dec_label_pc_a494

dec_label_pc_a374:                                ; preds = %dec_label_pc_a2ec, %dec_label_pc_a26c
  %v1_a388 = phi i32 [ %v1_a364, %dec_label_pc_a2ec ], [ 0, %dec_label_pc_a26c ]
  %v5_a378 = mul i32 %v1_a388, 24
  %v1_a37c = load i32, i32* @r7, align 4
  %v2_a37c = add i32 %v1_a37c, %v5_a378
  store i32 %v2_a37c, i32* %r3.global-to-local, align 4
  store i32 %v2_9dcc, i32* %ip.global-to-local, align 4
  %v1_a384 = add i32 %v2_a37c, 20
  %v2_a384 = inttoptr i32 %v1_a384 to i8*
  %v3_a384 = load i8, i8* %v2_a384, align 1
  %v4_a384 = zext i8 %v3_a384 to i32
  store i32 %v4_a384, i32* %r2.global-to-local, align 4
  %v4_a388 = mul i32 %v1_a388, 4
  %v5_a388 = add i32 %v4_a388, %v2_9dcc
  %v6_a388 = inttoptr i32 %v5_a388 to i32*
  %v7_a388 = load i32, i32* %v6_a388, align 4
  store i32 %v7_a388, i32* @r5, align 4
  %v2_a38c = icmp ugt i8 %v3_a384, 30
  %v7_a38c = icmp eq i8 %v3_a384, 31
  store i1 %v7_a38c, i1* %cpsr_z.global-to-local, align 1
  %v1_a390 = add i32 %v7_a388, 20
  store i32 %v1_a390, i32* @r6, align 4
  %v2_a394 = xor i1 %v7_a38c, true
  %v3_a394 = and i1 %v2_a38c, %v2_a394
  br i1 %v3_a394, label %dec_label_pc_a290, label %dec_label_pc_a398

dec_label_pc_a398:                                ; preds = %dec_label_pc_a374
  %v1_a398 = add i32 %v2_a37c, 16
  %v2_a398 = inttoptr i32 %v1_a398 to i32*
  %v3_a398 = load i32, i32* %v2_a398, align 4
  %v0_a39c = call i32 @function_d3a8()
  store i32 %v0_a39c, i32* %r0.global-to-local, align 4
  %v3_a3a0 = load i32, i32* %stack_var_-44, align 4
  %v5_a3a8 = mul i32 %v3_a3a0, 24
  %v1_a3ac = and i32 %v3_a398, 16711680
  store i32 %v1_a3ac, i32* %ip.global-to-local, align 4
  %v3_a3b0 = udiv i32 %v3_a398, 16777216
  %v4_a3b4 = udiv i32 %v1_a3ac, 256
  %v5_a3b4 = or i32 %v4_a3b4, %v3_a3b0
  store i32 %v5_a3b4, i32* %r2.global-to-local, align 4
  %v1_a3b8 = load i32, i32* @r7, align 4
  %v2_a3b8 = add i32 %v1_a3b8, %v5_a3a8
  store i32 %v2_a3b8, i32* %r1.global-to-local, align 4
  %v1_a3bc = and i32 %v3_a398, 65280
  store i32 %v1_a3bc, i32* %r3.global-to-local, align 4
  %v1_a3c0 = add i32 %v2_a3b8, 20
  %v2_a3c0 = inttoptr i32 %v1_a3c0 to i8*
  %v3_a3c0 = load i8, i8* %v2_a3c0, align 1
  %v4_a3c0 = zext i8 %v3_a3c0 to i32
  store i32 %v4_a3c0, i32* %ip.global-to-local, align 4
  %v5_a3c8 = call i32 @llvm.bswap.i32(i32 %v3_a398)
  %v7_a3cc = lshr i32 %v0_a39c, %v4_a3c0
  %v8_a3cc = add i32 %v7_a3cc, %v5_a3c8
  store i32 %v8_a3cc, i32* %r2.global-to-local, align 4
  %v1_a3dc = and i32 %v8_a3cc, 65280
  store i32 %v1_a3dc, i32* %r1.global-to-local, align 4
  store i32 %v6_9f9c, i32* %r0.global-to-local, align 4
  %v5_a3e8 = call i32 @llvm.bswap.i32(i32 %v8_a3cc)
  store i32 %v5_a3e8, i32* %r3.global-to-local, align 4
  store i1 %v7_a294, i1* %cpsr_z.global-to-local, align 1
  %v1_a3f0 = load i32, i32* @r5, align 4
  %v2_a3f0 = add i32 %v1_a3f0, 16
  %v3_a3f0 = inttoptr i32 %v2_a3f0 to i32*
  store i32 %v5_a3e8, i32* %v3_a3f0, align 4
  br i1 %v2_a294, label %dec_label_pc_a3f8, label %dec_label_pc_a29c

dec_label_pc_a3f8:                                ; preds = %dec_label_pc_a398, %dec_label_pc_a290
  %v0_a3f8 = call i32 @function_d3a8()
  store i32 %v0_a3f8, i32* %r0.global-to-local, align 4
  store i32 %v3_a00c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a408, i1* %cpsr_z.global-to-local, align 1
  %v1_a40c = load i32, i32* @r5, align 4
  %v2_a40c = add i32 %v1_a40c, 12
  %v3_a40c = inttoptr i32 %v2_a40c to i32*
  store i32 %v0_a3f8, i32* %v3_a40c, align 4
  br i1 %v3_a408, label %dec_label_pc_a414, label %dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge

dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge:    ; preds = %dec_label_pc_a3f8
  %v1_a2b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2b0

dec_label_pc_a414:                                ; preds = %dec_label_pc_a3f8, %dec_label_pc_a29c
  %v0_a414 = call i32 @function_d3a8()
  %v1_a414 = trunc i32 %v0_a414 to i16
  store i32 %v0_a414, i32* %r0.global-to-local, align 4
  store i32 %v3_a010, i32* %r2.global-to-local, align 4
  %v1_a41c = load i32, i32* @r4, align 4
  %v9_a41c = icmp eq i32 %v3_a010, %v1_a41c
  store i1 %v9_a41c, i1* %cpsr_z.global-to-local, align 1
  %v3_a420 = load i32, i32* @r5, align 4
  %v4_a420 = add i32 %v3_a420, 4
  %v5_a420 = inttoptr i32 %v4_a420 to i16*
  store i16 %v1_a414, i16* %v5_a420, align 2
  br i1 %v9_a41c, label %dec_label_pc_a428, label %dec_label_pc_a414.dec_label_pc_a2bc_crit_edge

dec_label_pc_a414.dec_label_pc_a2bc_crit_edge:    ; preds = %dec_label_pc_a414
  %v1_a2c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2bc

dec_label_pc_a428:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a2b0
  %v0_a428 = call i32 @function_d3a8()
  %v1_a428 = trunc i32 %v0_a428 to i16
  store i32 %v0_a428, i32* %r0.global-to-local, align 4
  store i32 %v3_a014, i32* @r3, align 4
  %v1_a430 = load i32, i32* @r4, align 4
  %v9_a430 = icmp eq i32 %v3_a014, %v1_a430
  store i1 %v9_a430, i1* %cpsr_z.global-to-local, align 1
  %v3_a434 = load i32, i32* @r5, align 4
  %v4_a434 = add i32 %v3_a434, 20
  %v5_a434 = inttoptr i32 %v4_a434 to i16*
  store i16 %v1_a428, i16* %v5_a434, align 2
  br i1 %v9_a430, label %dec_label_pc_a43c, label %dec_label_pc_a428.dec_label_pc_a2c8_crit_edge

dec_label_pc_a428.dec_label_pc_a2c8_crit_edge:    ; preds = %dec_label_pc_a428
  %v1_a2cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2c8

dec_label_pc_a43c:                                ; preds = %dec_label_pc_a428, %dec_label_pc_a2bc
  %v0_a43c = call i32 @function_d3a8()
  %v1_a43c = trunc i32 %v0_a43c to i16
  store i32 %v0_a43c, i32* %r0.global-to-local, align 4
  store i32 %v6_9e9c, i32* @ip, align 4
  %v1_a444 = load i32, i32* @r4, align 4
  %v9_a444 = icmp eq i32 %v6_9e9c, %v1_a444
  store i1 %v9_a444, i1* %cpsr_z.global-to-local, align 1
  %v3_a448 = load i32, i32* @r6, align 4
  %v4_a448 = add i32 %v3_a448, 2
  %v5_a448 = inttoptr i32 %v4_a448 to i16*
  store i16 %v1_a43c, i16* %v5_a448, align 2
  br i1 %v9_a444, label %dec_label_pc_a450, label %dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge

dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge:    ; preds = %dec_label_pc_a43c
  %v1_a2d8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2d4

dec_label_pc_a450:                                ; preds = %dec_label_pc_a43c, %dec_label_pc_a2c8
  %v0_a450 = call i32 @function_d3a8()
  %v1_a454 = load i32, i32* @r6, align 4
  %v2_a454 = add i32 %v1_a454, 4
  %v3_a454 = inttoptr i32 %v2_a454 to i32*
  store i32 %v0_a450, i32* %v3_a454, align 4
  store i32 %v6_9eb8, i32* %r0.global-to-local, align 4
  %v1_a45c = load i32, i32* @r4, align 4
  %v9_a45c = icmp eq i32 %v6_9eb8, %v1_a45c
  store i1 %v9_a45c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a45c, label %dec_label_pc_a464, label %dec_label_pc_a2e0

dec_label_pc_a464:                                ; preds = %dec_label_pc_a450, %dec_label_pc_a2d4
  %v0_a464 = call i32 @function_d3a8()
  store i32 %v0_a464, i32* %r0.global-to-local, align 4
  store i32 %v1_9f88, i32* %r1.global-to-local, align 4
  store i1 %v2_a46c, i1* %cpsr_z.global-to-local, align 1
  %v1_a470 = load i32, i32* @r6, align 4
  %v2_a470 = add i32 %v1_a470, 8
  %v3_a470 = inttoptr i32 %v2_a470 to i32*
  store i32 %v0_a464, i32* %v3_a470, align 4
  br i1 %v2_a46c, label %dec_label_pc_a2ec, label %dec_label_pc_a478

dec_label_pc_a478:                                ; preds = %dec_label_pc_a2e0, %dec_label_pc_a464
  %v0_a478 = load i32, i32* @r5, align 4
  %v1_a478 = add i32 %v0_a478, 40
  store i32 %v1_a478, i32* @r4, align 4
  store i32 %v1_a478, i32* %r0.global-to-local, align 4
  %v0_a480 = load i32, i32* @r8, align 4
  store i32 %v0_a480, i32* %r1.global-to-local, align 4
  %v2_a484 = call i32 @function_d46c(i32 %v1_a478, i32 %v0_a480)
  store i32 %v2_a484, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a48c = load i32, i32* @r4, align 4
  %v3_a48c = load i32, i32* @r8, align 4
  %v4_a48c = add i32 %v3_a48c, %v2_a48c
  %v5_a48c = inttoptr i32 %v4_a48c to i8*
  store i8 0, i8* %v5_a48c, align 1
  br label %dec_label_pc_a2ec

dec_label_pc_a494:                                ; preds = %dec_label_pc_a2ec, %dec_label_pc_a258
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a498 = call i32 @function_102c4(i32* null)
  store i32 %v2_a498, i32* %r0.global-to-local, align 4
  store i32 %v2_9fac, i32* %r1.global-to-local, align 4
  %v9_a4a0 = icmp eq i32 %v2_9fac, %v2_a498
  store i1 %v9_a4a0, i1* %cpsr_z.global-to-local, align 1
  %v6_a4a4 = icmp slt i32 %v2_9fac, %v2_a498
  br i1 %v6_a4a4, label %dec_label_pc_a4a8, label %dec_label_pc_a258

dec_label_pc_a4a8:                                ; preds = %dec_label_pc_a494, %dec_label_pc_9da0, %dec_label_pc_a4b4
  %v1_a4b0 = phi i32 [ %v3_9fc0, %dec_label_pc_9da0 ], [ %v1_a4b8, %dec_label_pc_a4b4 ], [ %v2_a498, %dec_label_pc_a494 ]
  store i32 %v18_9da0, i32* %sb.global-to-local, align 4
  store i32 %v24_9da0, i32* %fp.global-to-local, align 4
  store i32 %v27_9da0, i32* %lr.global-to-local, align 4
  ret i32 %v1_a4b0

dec_label_pc_a4b4:                                ; preds = %dec_label_pc_9fd0
  store i32 %v3_9fc0, i32* %r0.global-to-local, align 4
  %v1_a4b8 = call i32 @function_10644(i32 %v3_9fc0)
  store i32 %v1_a4b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a4a8

; uselistorder directives
  uselistorder i32 %v1_a4b8, { 1, 0 }
  uselistorder i32 %v0_a43c, { 1, 0 }
  uselistorder i32 %v0_a428, { 1, 0 }
  uselistorder i32 %v0_a414, { 1, 0 }
  uselistorder i32 %v5_a3e8, { 1, 0 }
  uselistorder i32 %v3_a398, { 2, 1, 3, 0 }
  uselistorder i32 %v1_a364, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_a32c, { 1, 0 }
  uselistorder i32 %v4_a31c, { 1, 0 }
  uselistorder i32 %v0_a26c, { 2, 1, 0 }
  uselistorder i1 %v2_a46c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a408, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a294, { 2, 1, 0 }
  uselistorder i32 %v1_a244, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a214, { 1, 0 }
  uselistorder i32 %v0_a180, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a0a8, { 2, 0, 1 }
  uselistorder i32 %v1_a0a4, { 2, 0, 1 }
  uselistorder i32 %v1_a094, { 1, 0 }
  uselistorder i1 %v2_a018, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a00c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a008, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a004, { 1, 0, 2 }
  uselistorder i1 %v7_9ff0, { 1, 0 }
  uselistorder i1 %v7_9fc4, { 1, 0 }
  uselistorder i32 %v3_9fc0, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_9fac, { 2, 1, 0 }
  uselistorder i32 %v6_9f9c, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_9f88, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_9f00, { 0, 2, 1, 3 }
  uselistorder i32 %v6_9eb8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_9e9c, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_9e4c, { 1, 2, 0 }
  uselistorder i32 %v1_9e28, { 2, 1, 0 }
  uselistorder i32 %v6_9e20, { 1, 0 }
  uselistorder i32 %v7_9e08, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_9de4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_9dcc, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 11, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 7, 5, 8, 6, 9, 10, 11, 13, 12, 15, 14, 16, 18, 17, 19, 20, 21, 23, 22, 29, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 4, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 6, 5, 4, 7, 3, 2, 1, 0, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_a4a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a478, { 1, 0 }
  uselistorder label %dec_label_pc_a2ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a258, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a4c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a4c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a4c4 = load i32, i32* @r4, align 4
  %v24_a4c4 = load i32, i32* @fp, align 4
  %v27_a4c4 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_a4f0 = call i32 @function_11998(i32 %arg2, i32 4)
  %v0_a4f4 = load i32, i32* @r4, align 4
  store i32 %v0_a4f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a4f0, i32* @sl, align 4
  %v0_a504 = load i32, i32* @r5, align 4
  store i32 %v0_a504, i32* %r0.global-to-local, align 4
  %v5_a508 = inttoptr i32 %v0_a4f4 to i32*
  %v6_a508 = call i32 @function_8258(i32 %v0_a504, i32* %v5_a508, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a520 = load i32, i32* @r4, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  %v0_a524 = load i32, i32* @r5, align 4
  store i32 %v0_a524, i32* %r0.global-to-local, align 4
  %v5_a528 = trunc i32 %v6_a508 to i8
  %v6_a52c = inttoptr i32 %v0_a520 to i32*
  %v7_a52c = call i32 @function_8258(i32 %v0_a524, i32* %v6_a52c, i32 3, i32 65535, i32 %v6_a508)
  %v0_a530 = load i32, i32* @r4, align 4
  store i32 %v0_a530, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a540 = load i32, i32* @r5, align 4
  store i32 %v0_a540, i32* %r0.global-to-local, align 4
  %v5_a544 = inttoptr i32 %v0_a530 to i32*
  %v6_a544 = call i32 @function_8258(i32 %v0_a540, i32* %v5_a544, i32 4, i32 64, i32 %v7_a52c)
  %v1_a54c = urem i32 %v6_a544, 256
  %v0_a550 = load i32, i32* @r4, align 4
  store i32 %v0_a550, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r0.global-to-local, align 4
  %v6_a564 = inttoptr i32 %v0_a550 to i32*
  %v7_a564 = call i32 @function_8258(i32 %v0_a55c, i32* %v6_a564, i32 5, i32 1, i32 %v1_a54c)
  %v1_a570 = urem i32 %v7_a564, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a57c = load i32, i32* @r4, align 4
  store i32 %v0_a57c, i32* %r1.global-to-local, align 4
  %v0_a580 = load i32, i32* @r5, align 4
  store i32 %v0_a580, i32* %r0.global-to-local, align 4
  %v5_a588 = inttoptr i32 %v0_a57c to i32*
  %v6_a588 = call i32 @function_8258(i32 %v0_a580, i32* %v5_a588, i32 6, i32 65535, i32 %v1_a570)
  %v0_a594 = load i32, i32* @r4, align 4
  store i32 %v0_a594, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r5, align 4
  store i32 %v0_a5a0, i32* %r0.global-to-local, align 4
  %v5_a5a4 = inttoptr i32 %v0_a594 to i32*
  %v6_a5a4 = call i32 @function_8258(i32 %v0_a5a0, i32* %v5_a5a4, i32 7, i32 65535, i32 %v6_a588)
  %v0_a5ac = load i32, i32* @r4, align 4
  store i32 %v0_a5ac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v6_a5a4, i32* %fp.global-to-local, align 4
  %v0_a5bc = load i32, i32* @r5, align 4
  store i32 %v0_a5bc, i32* %r0.global-to-local, align 4
  %v5_a5c0 = inttoptr i32 %v0_a5ac to i32*
  %v6_a5c0 = call i32 @function_8258(i32 %v0_a5bc, i32* %v5_a5c0, i32 16, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a5c4 = load i32, i32* @r4, align 4
  store i32 %v0_a5c4, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a5d4 = load i32, i32* @r5, align 4
  store i32 %v0_a5d4, i32* %r0.global-to-local, align 4
  %v5_a5d8 = inttoptr i32 %v0_a5c4 to i32*
  %v6_a5d8 = call i32 @function_8258(i32 %v0_a5d4, i32* %v5_a5d8, i32 17, i32 0, i32 %v6_a5c0)
  %v0_a5dc = load i32, i32* @r4, align 4
  store i32 %v0_a5dc, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  store i32 %v0_a5ec, i32* %r0.global-to-local, align 4
  %v5_a5f0 = inttoptr i32 %v0_a5dc to i32*
  %v6_a5f0 = call i32 @function_8258(i32 %v0_a5ec, i32* %v5_a5f0, i32 10, i32 0, i32 %v6_a5d8)
  %v0_a5f4 = load i32, i32* @r4, align 4
  store i32 %v0_a5f4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a604 = load i32, i32* @r5, align 4
  store i32 %v0_a604, i32* %r0.global-to-local, align 4
  %v5_a608 = inttoptr i32 %v0_a5f4 to i32*
  %v6_a608 = call i32 @function_8258(i32 %v0_a604, i32* %v5_a608, i32 11, i32 0, i32 %v6_a5f0)
  %v0_a60c = load i32, i32* @r4, align 4
  store i32 %v0_a60c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a61c = load i32, i32* @r5, align 4
  store i32 %v0_a61c, i32* %r0.global-to-local, align 4
  %v5_a620 = inttoptr i32 %v0_a60c to i32*
  %v6_a620 = call i32 @function_8258(i32 %v0_a61c, i32* %v5_a620, i32 12, i32 0, i32 %v6_a608)
  %v0_a624 = load i32, i32* @r4, align 4
  store i32 %v0_a624, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a634 = load i32, i32* @r5, align 4
  store i32 %v0_a634, i32* %r0.global-to-local, align 4
  %v5_a638 = inttoptr i32 %v0_a624 to i32*
  %v6_a638 = call i32 @function_8258(i32 %v0_a634, i32* %v5_a638, i32 13, i32 0, i32 %v6_a620)
  %v0_a63c = load i32, i32* @r4, align 4
  store i32 %v0_a63c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a64c = load i32, i32* @r5, align 4
  store i32 %v0_a64c, i32* %r0.global-to-local, align 4
  %v5_a650 = inttoptr i32 %v0_a63c to i32*
  %v6_a650 = call i32 @function_8258(i32 %v0_a64c, i32* %v5_a650, i32 14, i32 1, i32 %v6_a638)
  %v0_a654 = load i32, i32* @r4, align 4
  store i32 %v0_a654, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a664 = load i32, i32* @r5, align 4
  store i32 %v0_a664, i32* %r0.global-to-local, align 4
  %v5_a668 = inttoptr i32 %v0_a654 to i32*
  %v6_a668 = call i32 @function_8258(i32 %v0_a664, i32* %v5_a668, i32 15, i32 0, i32 %v6_a650)
  %v0_a670 = load i32, i32* @r4, align 4
  store i32 %v0_a670, i32* %r1.global-to-local, align 4
  %v2_a674 = load i32, i32* @global_var_202dc.42, align 4
  store i32 %v2_a674, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_a680 = load i32, i32* @r5, align 4
  store i32 %v0_a680, i32* %r0.global-to-local, align 4
  %v5_a684 = inttoptr i32 %v0_a670 to i32*
  %v6_a684 = call i32 @function_81ec(i32 %v0_a680, i32* %v5_a684, i32 19, i32 %v2_a674, i32 %v6_a668)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a690 = call i32 @function_102c4(i32* null)
  %v1_a694 = load i32, i32* @r6, align 4
  %v2_a694 = add i32 %v1_a694, %v2_a690
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a6a8 = call i32 @function_10e30(i32 2, i32 3, i32 6)
  store i32 %v3_a6a8, i32* %r0.global-to-local, align 4
  %v7_a6ac = icmp eq i32 %v3_a6a8, -1
  store i1 %v7_a6ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a6a8, i32* @r8, align 4
  br i1 %v7_a6ac, label %dec_label_pc_ab80, label %dec_label_pc_a6b8

dec_label_pc_a6b8:                                ; preds = %dec_label_pc_a4c4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a6c0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a6c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a6d4 = call i32 @function_10dec(i32 %v3_a6a8, i32 0, i32 3, i32 %v6_a6c0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_a6d4, i32* %r0.global-to-local, align 4
  %v7_a6d8 = icmp eq i32 %v5_a6d4, -1
  store i1 %v7_a6d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6d8, label %dec_label_pc_ab8c, label %dec_label_pc_a6e0

dec_label_pc_a6e0:                                ; preds = %dec_label_pc_a6b8
  %v3_a6ec = mul i32 %v7_a52c, 65536
  store i32 %v3_a6ec, i32* %r0.global-to-local, align 4
  %v0_a6f4 = load i32, i32* %fp.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_a5f0, i32* %r1.global-to-local, align 4
  %v3_a700 = urem i32 %v7_a52c, 65536
  store i32 %v3_a700, i32* %r2.global-to-local, align 4
  %v3_a704 = urem i32 %v6_a588, 65536
  store i32 %v3_a704, i32* %r3.global-to-local, align 4
  %v3_a708 = urem i32 %v0_a6f4, 65536
  %v0_a70c = load i32, i32* @sb, align 4
  %v2_a70c = icmp eq i32 %v0_a70c, 0
  store i1 %v2_a70c, i1* %cpsr_z.global-to-local, align 1
  %v1_a71c = urem i32 %v6_a5f0, 256
  store i32 %v1_a71c, i32* @fp, align 4
  br i1 %v2_a70c, label %dec_label_pc_a970.preheader, label %dec_label_pc_a724

dec_label_pc_a724:                                ; preds = %dec_label_pc_a6e0
  %trunc = trunc i32 %v7_a52c to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp60 = mul nuw nsw i32 %v3_a704, 256
  %v3_a750 = and i32 %tmp60, 65280
  %tmp61 = mul i32 %v0_a6f4, 256
  %v3_a754 = and i32 %tmp61, 65280
  %tmp62 = mul i32 %v6_a5c0, 256
  %v3_a758 = and i32 %tmp62, 65280
  %v1_a75c = urem i32 %v6_a5f0, 2
  %tmp63 = udiv i32 %v6_a588, 256
  %v4_a760 = urem i32 %tmp63, 256
  %v5_a760 = or i32 %v3_a750, %v4_a760
  %tmp64 = udiv i32 %v0_a6f4, 256
  %v4_a764 = urem i32 %tmp64, 256
  %v5_a764 = or i32 %v4_a764, %v3_a754
  store i32 %v5_a764, i32* @r5, align 4
  %tmp65 = udiv i32 %v6_a5c0, 256
  %v4_a768 = urem i32 %tmp65, 256
  %v5_a768 = or i32 %v4_a768, %v3_a758
  store i32 %v5_a768, i32* @lr, align 4
  %v1_a77c = urem i32 %v6_a608, 2
  store i32 %v1_a77c, i32* %r1.global-to-local, align 4
  %v1_a780 = urem i32 %v6_a620, 2
  store i32 %v1_a780, i32* %r2.global-to-local, align 4
  %v1_a784 = urem i32 %v6_a638, 2
  store i32 %v1_a784, i32* %r3.global-to-local, align 4
  %v1_a788 = urem i32 %v6_a650, 2
  store i32 %v1_a788, i32* @r6, align 4
  %v1_a78c = urem i32 %v6_a668, 2
  store i32 %v1_a78c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_a808 = trunc i32 %v6_a544 to i8
  %sext6 = mul nuw i32 %v5_a760, 65536
  %v4_a834 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_a764, 65536
  %v6_a870 = sdiv i32 %sext7, 65536
  %tmp = sub nsw i32 0, %v1_a77c
  %v4_a888 = and i32 %tmp, 16
  %tmp66 = sub nsw i32 0, %v1_a780
  %v4_a8a0 = and i32 %tmp66, 8
  %tmp67 = sub nsw i32 0, %v1_a784
  %v4_a8b4 = and i32 %tmp67, 4
  %tmp68 = sub nsw i32 0, %v1_a788
  %v3_a8c8 = and i32 %tmp68, 2
  br label %dec_label_pc_a7b4

dec_label_pc_a7b4:                                ; preds = %.thread, %dec_label_pc_a724
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_a7bc = call i32 @function_11998(i32 128, i32 1)
  store i32 %v2_a7bc, i32* %r0.global-to-local, align 4
  %v3_a7c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7c0, i32* %r2.global-to-local, align 4
  %v1_a7c4 = load i32, i32* @sl, align 4
  %v2_a7c4 = load i32, i32* @r4, align 4
  %v5_a7c4 = mul i32 %v2_a7c4, 4
  %v6_a7c4 = add i32 %v5_a7c4, %v1_a7c4
  %v7_a7c4 = inttoptr i32 %v6_a7c4 to i32*
  store i32 %v2_a7bc, i32* %v7_a7c4, align 4
  %v0_a7c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a7c8 = mul i32 %v0_a7c8, 32
  store i32 %v3_a7c8, i32* %r3.global-to-local, align 4
  %v0_a7cc = load i32, i32* @sl, align 4
  %v4_a7cc = mul i32 %v0_a7c8, 4
  %v5_a7cc = add i32 %v0_a7cc, %v4_a7cc
  %v6_a7cc = inttoptr i32 %v5_a7cc to i32*
  %v7_a7cc = load i32, i32* %v6_a7cc, align 4
  store i32 %v7_a7cc, i32* %r4.global-to-local, align 4
  %v5_a7d0 = mul i32 %v0_a7c8, 24
  store i32 %v5_a7d0, i32* %r3.global-to-local, align 4
  %v1_a7d4 = load i32, i32* @r7, align 4
  %v2_a7d4 = add i32 %v1_a7d4, %v5_a7d0
  store i32 %v2_a7d4, i32* %r0.global-to-local, align 4
  %v1_a7d8 = inttoptr i32 %v7_a7cc to i8*
  %v2_a7d8 = load i8, i8* %v1_a7d8, align 1
  %tmp69 = urem i8 %v2_a7d8, 16
  %v1_a7dc = zext i8 %tmp69 to i32
  %v1_a7e0 = or i32 %v1_a7dc, 64
  store i32 %v1_a7e0, i32* %r3.global-to-local, align 4
  %v1_a7e4 = trunc i32 %v1_a7e0 to i8
  store i8 %v1_a7e4, i8* %v1_a7d8, align 1
  %v0_a7e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a7e8 = inttoptr i32 %v0_a7e8 to i8*
  %v2_a7e8 = load i8, i8* %v1_a7e8, align 1
  %v1_a7ec = and i8 %v2_a7e8, -16
  %v1_a7f0 = or i8 %v1_a7ec, 5
  store i32 %v1_a570, i32* %r1.global-to-local, align 4
  store i8 %v1_a7f0, i8* %v1_a7e8, align 1
  %v2_a800 = load i32, i32* %r4.global-to-local, align 4
  %v3_a800 = add i32 %v2_a800, 1
  %v4_a800 = inttoptr i32 %v3_a800 to i8*
  store i8 %v5_a528, i8* %v4_a800, align 1
  store i32 %v1_a54c, i32* %r3.global-to-local, align 4
  %v2_a808 = load i32, i32* %r4.global-to-local, align 4
  %v3_a808 = add i32 %v2_a808, 8
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v0_a810 = load i32, i32* %r1.global-to-local, align 4
  %v2_a810 = icmp eq i32 %v0_a810, 0
  store i1 %v2_a810, i1* %cpsr_z.global-to-local, align 1
  %v2_a814 = load i32, i32* %r4.global-to-local, align 4
  %v3_a814 = add i32 %v2_a814, 4
  %v4_a814 = inttoptr i32 %v3_a814 to i16*
  store i16 %rev, i16* %v4_a814, align 2
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_a81c = load i32, i32* %r4.global-to-local, align 4
  %v3_a81c = add i32 %v2_a81c, 9
  %v4_a81c = inttoptr i32 %v3_a81c to i8*
  store i8 6, i8* %v4_a81c, align 1
  %v0_a820 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a820, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a7b4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a824 = load i32, i32* %r4.global-to-local, align 4
  %v4_a824 = add i32 %v3_a824, 6
  %v5_a824 = inttoptr i32 %v4_a824 to i16*
  store i16 64, i16* %v5_a824, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a7b4, %bb
  store i32 %v6_a684, i32* %r3.global-to-local, align 4
  %v1_a82c = load i32, i32* %r4.global-to-local, align 4
  %v2_a82c = add i32 %v1_a82c, 12
  %v3_a82c = inttoptr i32 %v2_a82c to i32*
  store i32 %v6_a684, i32* %v3_a82c, align 4
  %v0_a830 = load i32, i32* %r0.global-to-local, align 4
  %v1_a830 = add i32 %v0_a830, 16
  %v2_a830 = inttoptr i32 %v1_a830 to i32*
  %v3_a830 = load i32, i32* %v2_a830, align 4
  store i32 %v3_a830, i32* %r3.global-to-local, align 4
  store i32 %v4_a834, i32* %r0.global-to-local, align 4
  %v2_a83c = load i32, i32* %r4.global-to-local, align 4
  %v3_a83c = add i32 %v2_a83c, 2
  %v4_a83c = inttoptr i32 %v3_a83c to i16*
  store i16 15360, i16* %v4_a83c, align 2
  %v0_a840 = load i32, i32* %r3.global-to-local, align 4
  %v1_a840 = load i32, i32* %r4.global-to-local, align 4
  %v2_a840 = add i32 %v1_a840, 16
  %v3_a840 = inttoptr i32 %v2_a840 to i32*
  store i32 %v0_a840, i32* %v3_a840, align 4
  %v0_a844 = load i32, i32* %r0.global-to-local, align 4
  %v1_a844 = trunc i32 %v0_a844 to i16
  %v2_a844 = load i32, i32* %r4.global-to-local, align 4
  %v3_a844 = add i32 %v2_a844, 20
  %v4_a844 = inttoptr i32 %v3_a844 to i16*
  store i16 %v1_a844, i16* %v4_a844, align 2
  %v0_a848 = load i32, i32* %r4.global-to-local, align 4
  %v1_a848 = add i32 %v0_a848, 20
  store i32 %v1_a848, i32* %r1.global-to-local, align 4
  %v1_a84c = add i32 %v0_a848, 32
  %v2_a84c = inttoptr i32 %v1_a84c to i8*
  %v3_a84c = load i8, i8* %v2_a84c, align 1
  %v4_a84c = zext i8 %v3_a84c to i32
  store i32 %v4_a84c, i32* %r3.global-to-local, align 4
  %v1_a850 = add i32 %v0_a848, 33
  %v2_a850 = inttoptr i32 %v1_a850 to i8*
  %v3_a850 = load i8, i8* %v2_a850, align 1
  %v4_a850 = zext i8 %v3_a850 to i32
  store i32 %v1_a75c, i32* %r0.global-to-local, align 4
  %v1_a858 = urem i8 %v3_a84c, 16
  %v1_a85c = or i8 %v1_a858, -96
  %v1_a860 = and i32 %v4_a850, 223
  store i32 %v1_a860, i32* %r2.global-to-local, align 4
  store i8 %v1_a85c, i8* %v2_a84c, align 1
  %v0_a868 = load i32, i32* %r2.global-to-local, align 4
  %v1_a868 = load i32, i32* %r0.global-to-local, align 4
  %v4_a868 = mul i32 %v1_a868, 32
  %v5_a868 = or i32 %v4_a868, %v0_a868
  store i32 %v5_a868, i32* %r2.global-to-local, align 4
  store i32 %v5_a768, i32* %r0.global-to-local, align 4
  store i32 %v6_a870, i32* %r3.global-to-local, align 4
  %v1_a874 = trunc i32 %v5_a868 to i8
  %v2_a874 = load i32, i32* %r1.global-to-local, align 4
  %v3_a874 = add i32 %v2_a874, 13
  %v4_a874 = inttoptr i32 %v3_a874 to i8*
  store i8 %v1_a874, i8* %v4_a874, align 1
  %v0_a878 = load i32, i32* %r3.global-to-local, align 4
  %v1_a878 = trunc i32 %v0_a878 to i16
  %v2_a878 = load i32, i32* %r1.global-to-local, align 4
  %v3_a878 = add i32 %v2_a878, 2
  %v4_a878 = inttoptr i32 %v3_a878 to i16*
  store i16 %v1_a878, i16* %v4_a878, align 2
  %v0_a87c = load i32, i32* %r1.global-to-local, align 4
  %v1_a87c = add i32 %v0_a87c, 13
  %v2_a87c = inttoptr i32 %v1_a87c to i8*
  %v3_a87c = load i8, i8* %v2_a87c, align 1
  %v4_a87c = zext i8 %v3_a87c to i32
  store i32 %v1_a77c, i32* %r2.global-to-local, align 4
  %v1_a884 = and i32 %v4_a87c, 239
  %v5_a888 = or i32 %v1_a884, %v4_a888
  store i32 %v5_a888, i32* %r3.global-to-local, align 4
  %v0_a88c = load i32, i32* %r0.global-to-local, align 4
  %v2_a88c = add i32 %v0_a87c, 4
  %v3_a88c = inttoptr i32 %v2_a88c to i32*
  store i32 %v0_a88c, i32* %v3_a88c, align 4
  %v0_a890 = load i32, i32* %r3.global-to-local, align 4
  %v1_a890 = trunc i32 %v0_a890 to i8
  %v2_a890 = load i32, i32* %r1.global-to-local, align 4
  %v3_a890 = add i32 %v2_a890, 13
  %v4_a890 = inttoptr i32 %v3_a890 to i8*
  store i8 %v1_a890, i8* %v4_a890, align 1
  %v0_a894 = load i32, i32* %r1.global-to-local, align 4
  %v1_a894 = add i32 %v0_a894, 13
  %v2_a894 = inttoptr i32 %v1_a894 to i8*
  %v3_a894 = load i8, i8* %v2_a894, align 1
  %v4_a894 = zext i8 %v3_a894 to i32
  store i32 %v1_a780, i32* %r3.global-to-local, align 4
  %v1_a89c = and i32 %v4_a894, 247
  %v5_a8a0 = or i32 %v1_a89c, %v4_a8a0
  store i32 %v5_a8a0, i32* %r2.global-to-local, align 4
  %v1_a8a4 = trunc i32 %v5_a8a0 to i8
  store i8 %v1_a8a4, i8* %v2_a894, align 1
  %v0_a8a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8a8 = add i32 %v0_a8a8, 13
  %v2_a8a8 = inttoptr i32 %v1_a8a8 to i8*
  %v3_a8a8 = load i8, i8* %v2_a8a8, align 1
  %v4_a8a8 = zext i8 %v3_a8a8 to i32
  store i32 %v1_a784, i32* %r0.global-to-local, align 4
  %v1_a8b0 = and i32 %v4_a8a8, 251
  %v5_a8b4 = or i32 %v1_a8b0, %v4_a8b4
  store i32 %v5_a8b4, i32* %r3.global-to-local, align 4
  %v1_a8b8 = trunc i32 %v5_a8b4 to i8
  store i8 %v1_a8b8, i8* %v2_a8a8, align 1
  %v0_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a8bc = add i32 %v0_a8bc, 13
  %v2_a8bc = inttoptr i32 %v1_a8bc to i8*
  %v3_a8bc = load i8, i8* %v2_a8bc, align 1
  %v4_a8bc = zext i8 %v3_a8bc to i32
  store i32 %v1_a788, i32* %r3.global-to-local, align 4
  %v1_a8c4 = and i32 %v4_a8bc, 253
  %v4_a8c8 = or i32 %v1_a8c4, %v3_a8c8
  store i32 %v4_a8c8, i32* %r2.global-to-local, align 4
  %v1_a8cc = trunc i32 %v4_a8c8 to i8
  store i8 %v1_a8cc, i8* %v2_a8bc, align 1
  %v0_a8d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8d0 = add i32 %v0_a8d0, 13
  %v2_a8d0 = inttoptr i32 %v1_a8d0 to i8*
  %v3_a8d0 = load i8, i8* %v2_a8d0, align 1
  %v4_a8d0 = zext i8 %v3_a8d0 to i32
  store i32 %v1_a78c, i32* %r0.global-to-local, align 4
  %v1_a8d8 = and i32 %v4_a8d0, 254
  %v2_a8dc = or i32 %v1_a8d8, %v1_a78c
  store i32 %v2_a8dc, i32* %r3.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  store i32 4, i32* @r6, align 4
  %v1_a8e8 = trunc i32 %v2_a8dc to i8
  store i8 %v1_a8e8, i8* %v2_a8d0, align 1
  %v0_a8ec = load i32, i32* @r5, align 4
  %v1_a8ec = trunc i32 %v0_a8ec to i8
  %v2_a8ec = load i32, i32* %r4.global-to-local, align 4
  %v3_a8ec = add i32 %v2_a8ec, 40
  %v4_a8ec = inttoptr i32 %v3_a8ec to i8*
  store i8 %v1_a8ec, i8* %v4_a8ec, align 1
  %v0_a8f0 = load i32, i32* @r6, align 4
  %v1_a8f0 = trunc i32 %v0_a8f0 to i8
  %v2_a8f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a8f0 = add i32 %v2_a8f0, 41
  %v4_a8f0 = inttoptr i32 %v3_a8f0 to i8*
  store i8 %v1_a8f0, i8* %v4_a8f0, align 1
  %v0_a8f4 = call i32 @function_d3a8()
  %v1_a8f8 = urem i32 %v0_a8f4, 16
  %v1_a8fc = or i32 %v1_a8f8, 1392
  %v1_a900 = add nuw nsw i32 %v1_a8fc, 8
  %v3_a904 = mul nuw nsw i32 %v1_a900, 65536
  store i32 %v3_a904, i32* %r0.global-to-local, align 4
  %v3_a908 = mul nuw nsw i32 %v1_a900, 256
  %v5_a910 = or i32 %v3_a908, 5
  %v1_a914 = trunc i32 %v5_a910 to i16
  %v2_a914 = load i32, i32* %r4.global-to-local, align 4
  %v3_a914 = add i32 %v2_a914, 42
  %v4_a914 = inttoptr i32 %v3_a914 to i16*
  store i16 %v1_a914, i16* %v4_a914, align 2
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_a920 = load i32, i32* %r4.global-to-local, align 4
  %v3_a920 = add i32 %v2_a920, 46
  %v4_a920 = inttoptr i32 %v3_a920 to i8*
  store i8 8, i8* %v4_a920, align 1
  %v0_a924 = load i32, i32* %r2.global-to-local, align 4
  %v1_a924 = trunc i32 %v0_a924 to i8
  %v2_a924 = load i32, i32* %r4.global-to-local, align 4
  %v3_a924 = add i32 %v2_a924, 47
  %v4_a924 = inttoptr i32 %v3_a924 to i8*
  store i8 %v1_a924, i8* %v4_a924, align 1
  %v0_a928 = load i32, i32* @r6, align 4
  %v1_a928 = trunc i32 %v0_a928 to i8
  %v2_a928 = load i32, i32* %r4.global-to-local, align 4
  %v3_a928 = add i32 %v2_a928, 44
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 %v1_a928, i8* %v4_a928, align 1
  %v0_a92c = load i32, i32* @r5, align 4
  %v1_a92c = trunc i32 %v0_a92c to i8
  %v2_a92c = load i32, i32* %r4.global-to-local, align 4
  %v3_a92c = add i32 %v2_a92c, 45
  %v4_a92c = inttoptr i32 %v3_a92c to i8*
  store i8 %v1_a92c, i8* %v4_a92c, align 1
  %v0_a930 = call i32 @function_d3a8()
  store i32 %v0_a930, i32* %r0.global-to-local, align 4
  %v2_a938 = load i32, i32* %r4.global-to-local, align 4
  %v3_a938 = add i32 %v2_a938, 59
  %v4_a938 = inttoptr i32 %v3_a938 to i8*
  store i8 6, i8* %v4_a938, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_a948 = load i32, i32* %r4.global-to-local, align 4
  %v2_a948 = add i32 %v1_a948, 48
  %v3_a948 = inttoptr i32 %v2_a948 to i32*
  store i32 %v0_a930, i32* %v3_a948, align 4
  %v0_a94c = load i32, i32* %r3.global-to-local, align 4
  %v1_a94c = load i32, i32* %r4.global-to-local, align 4
  %v2_a94c = add i32 %v1_a94c, 52
  %v3_a94c = inttoptr i32 %v2_a94c to i32*
  store i32 %v0_a94c, i32* %v3_a94c, align 4
  %v0_a950 = load i32, i32* %r2.global-to-local, align 4
  %v1_a950 = trunc i32 %v0_a950 to i8
  %v2_a950 = load i32, i32* %r4.global-to-local, align 4
  %v3_a950 = add i32 %v2_a950, 56
  %v4_a950 = inttoptr i32 %v3_a950 to i8*
  store i8 %v1_a950, i8* %v4_a950, align 1
  %v0_a954 = load i32, i32* %r1.global-to-local, align 4
  %v1_a954 = trunc i32 %v0_a954 to i8
  %v2_a954 = load i32, i32* %r4.global-to-local, align 4
  %v3_a954 = add i32 %v2_a954, 58
  %v4_a954 = inttoptr i32 %v3_a954 to i8*
  store i8 %v1_a954, i8* %v4_a954, align 1
  %v0_a958 = load i32, i32* %r1.global-to-local, align 4
  %v1_a958 = trunc i32 %v0_a958 to i8
  %v2_a958 = load i32, i32* %r4.global-to-local, align 4
  %v3_a958 = add i32 %v2_a958, 57
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v1_a958, i8* %v4_a958, align 1
  %v3_a95c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a95c, i32* %r3.global-to-local, align 4
  %v1_a960 = load i32, i32* %r2.global-to-local, align 4
  %v2_a960 = add i32 %v1_a960, %v3_a95c
  store i32 %v2_a960, i32* @r4, align 4
  %v1_a964 = load i32, i32* @sb, align 4
  %v9_a964 = icmp eq i32 %v2_a960, %v1_a964
  store i1 %v9_a964, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a960, i32* %stack_var_-44, align 4
  %v5_a96c = icmp slt i32 %v2_a960, %v1_a964
  br i1 %v5_a96c, label %dec_label_pc_a7b4, label %dec_label_pc_a970.preheader

dec_label_pc_a970.preheader:                      ; preds = %.thread, %dec_label_pc_a6e0
  %v0_a97410 = phi i32 [ 0, %dec_label_pc_a6e0 ], [ %v1_a964, %.thread ]
  %v2_a98c = icmp eq i32 %v6_a684, -1
  %v7_a98c = icmp eq i32 %v6_a684, -1
  %v3_a9a0 = icmp eq i32 %v3_a700, 65535
  br label %dec_label_pc_a970

dec_label_pc_a970:                                ; preds = %dec_label_pc_ab6c.dec_label_pc_a970_crit_edge, %dec_label_pc_a970.preheader
  %v0_a974 = phi i32 [ %v0_a974.pre, %dec_label_pc_ab6c.dec_label_pc_a970_crit_edge ], [ %v0_a97410, %dec_label_pc_a970.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a974 = icmp eq i32 %v0_a974, 0
  store i1 %v2_a974, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a974, label %dec_label_pc_ab6c, label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %dec_label_pc_a970
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa64

dec_label_pc_a988:                                ; preds = %dec_label_pc_aa64
  store i32 %v6_a684, i32* %r3.global-to-local, align 4
  store i1 %v7_a98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a98c, label %dec_label_pc_aae4, label %dec_label_pc_a994

dec_label_pc_a994:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_a988
  store i32 %v3_a700, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9a0, label %dec_label_pc_ab00, label %dec_label_pc_a9a8

dec_label_pc_a9a8:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_a994
  %v1_a9ac = phi i32 [ %v1_aaf4, %dec_label_pc_aae4 ], [ 65535, %dec_label_pc_a994 ]
  store i32 %v3_a704, i32* %r1.global-to-local, align 4
  %v9_a9ac = icmp eq i32 %v3_a704, %v1_a9ac
  store i1 %v9_a9ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9ac, label %dec_label_pc_ab14, label %dec_label_pc_a9b4

dec_label_pc_a9b4:                                ; preds = %dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge, %dec_label_pc_a9a8
  %v1_a9b8 = phi i32 [ %v1_a9b8.pre, %dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge ], [ %v1_a9ac, %dec_label_pc_a9a8 ]
  store i32 %v3_a708, i32* %r2.global-to-local, align 4
  %v9_a9b8 = icmp eq i32 %v3_a708, %v1_a9b8
  store i1 %v9_a9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9b8, label %dec_label_pc_ab28, label %dec_label_pc_a9c0

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge, %dec_label_pc_a9b4
  %v1_a9c4 = phi i32 [ %v1_a9c4.pre, %dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge ], [ %v1_a9b8, %dec_label_pc_a9b4 ]
  store i32 %v6_a5c0, i32* %r3.global-to-local, align 4
  %v9_a9c4 = icmp eq i32 %v6_a5c0, %v1_a9c4
  store i1 %v9_a9c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9c4, label %dec_label_pc_ab3c, label %dec_label_pc_a9cc

dec_label_pc_a9cc:                                ; preds = %dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge, %dec_label_pc_a9c0
  %v1_a9d0 = phi i32 [ %v1_a9d0.pre, %dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge ], [ %v1_a9c4, %dec_label_pc_a9c0 ]
  store i32 %v6_a5d8, i32* %r0.global-to-local, align 4
  %v9_a9d0 = icmp eq i32 %v6_a5d8, %v1_a9d0
  store i1 %v9_a9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9d0, label %dec_label_pc_ab50, label %dec_label_pc_a9d8

dec_label_pc_a9d8:                                ; preds = %dec_label_pc_ab3c, %dec_label_pc_a9cc
  %v0_a9d8 = load i32, i32* @fp, align 4
  %v2_a9d8 = icmp eq i32 %v0_a9d8, 0
  store i1 %v2_a9d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a9d8, label %dec_label_pc_a9e0, label %dec_label_pc_ab60

dec_label_pc_a9e0:                                ; preds = %dec_label_pc_a9d8, %dec_label_pc_ab50, %dec_label_pc_ab60
  %v2_a9e4 = load i32, i32* @r5, align 4
  %v3_a9e4 = add i32 %v2_a9e4, 10
  %v4_a9e4 = inttoptr i32 %v3_a9e4 to i16*
  store i16 0, i16* %v4_a9e4, align 2
  %v0_a9e8 = load i32, i32* @r5, align 4
  store i32 %v0_a9e8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_a9f0 = call i32 @function_bf78(i32 %v0_a9e8, i32 20)
  %v3_a9f0 = trunc i32 %v2_a9f0 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a9f8 = load i32, i32* @r5, align 4
  %v4_a9f8 = add i32 %v3_a9f8, 10
  %v5_a9f8 = inttoptr i32 %v4_a9f8 to i16*
  store i16 %v3_a9f0, i16* %v5_a9f8, align 2
  %v0_a9fc = load i32, i32* @r6, align 4
  store i32 %v0_a9fc, i32* @r1, align 4
  %v0_aa00 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa00 = trunc i32 %v0_aa00 to i16
  %v3_aa00 = add i32 %v0_a9fc, 16
  %v4_aa00 = inttoptr i32 %v3_aa00 to i16*
  store i16 %v1_aa00, i16* %v4_aa00, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_aa0c = load i32, i32* @r5, align 4
  store i32 %v0_aa0c, i32* %r0.global-to-local, align 4
  %v4_aa10 = call i32 @function_bfc8(i32 %v0_aa0c, i32 %v0_a9fc, i32 10240, i32 40)
  %v5_aa10 = trunc i32 %v4_aa10 to i16
  store i32 %v4_aa10, i32* %r0.global-to-local, align 4
  %v3_aa14 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa14, i32* %r3.global-to-local, align 4
  %v3_aa18 = mul i32 %v3_aa14, 32
  store i32 %v3_aa18, i32* %lr.global-to-local, align 4
  %v3_aa1c = load i32, i32* @r6, align 4
  %v4_aa1c = add i32 %v3_aa1c, 16
  %v5_aa1c = inttoptr i32 %v4_aa1c to i16*
  store i16 %v5_aa10, i16* %v5_aa1c, align 2
  %v0_aa20 = load i32, i32* %lr.global-to-local, align 4
  %v1_aa20 = load i32, i32* %r3.global-to-local, align 4
  %tmp70 = mul i32 %v1_aa20, -8
  %v5_aa20 = add i32 %v0_aa20, %tmp70
  store i32 %v5_aa20, i32* %lr.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r6, align 4
  %v1_aa24 = add i32 %v0_aa24, 2
  %v2_aa24 = inttoptr i32 %v1_aa24 to i16*
  %v3_aa24 = load i16, i16* %v2_aa24, align 2
  %v1_aa28 = load i32, i32* @r7, align 4
  %v2_aa28 = add i32 %v1_aa28, %v5_aa20
  store i32 %v2_aa28, i32* @lr, align 4
  %v3_aa2c = add i32 %v2_aa28, 2
  %v4_aa2c = inttoptr i32 %v3_aa2c to i16*
  store i16 %v3_aa24, i16* %v4_aa2c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_aa38 = load i32, i32* @r5, align 4
  store i32 %v0_aa38, i32* %r1.global-to-local, align 4
  %v0_aa3c = load i32, i32* @r8, align 4
  store i32 %v0_aa3c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_aa44 = load i32, i32* @lr, align 4
  %v6_aa4c = call i32 @function_10dac(i32 %v0_aa3c, i32 %v0_aa38, i32 60, i32 16384, i32 %v0_aa44, i32 16)
  %v3_aa50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa50, i32* %r3.global-to-local, align 4
  %v1_aa54 = add i32 %v3_aa50, 1
  store i32 %v1_aa54, i32* %r0.global-to-local, align 4
  %v1_aa58 = load i32, i32* @sb, align 4
  %v9_aa58 = icmp eq i32 %v1_aa54, %v1_aa58
  store i1 %v9_aa58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa54, i32* %stack_var_-44, align 4
  %v6_aa60 = icmp slt i32 %v1_aa54, %v1_aa58
  br i1 %v6_aa60, label %dec_label_pc_aa64, label %dec_label_pc_ab6c

dec_label_pc_aa64:                                ; preds = %dec_label_pc_a9e0, %dec_label_pc_a980
  %v1_aa74 = phi i32 [ %v1_aa54, %dec_label_pc_a9e0 ], [ 0, %dec_label_pc_a980 ]
  %v5_aa68 = mul i32 %v1_aa74, 24
  %v1_aa6c = load i32, i32* @r7, align 4
  %v2_aa6c = add i32 %v1_aa6c, %v5_aa68
  store i32 %v2_aa6c, i32* %r3.global-to-local, align 4
  %v1_aa70 = add i32 %v2_aa6c, 20
  %v2_aa70 = inttoptr i32 %v1_aa70 to i8*
  %v3_aa70 = load i8, i8* %v2_aa70, align 1
  %v4_aa70 = zext i8 %v3_aa70 to i32
  store i32 %v4_aa70, i32* %r2.global-to-local, align 4
  %v0_aa74 = load i32, i32* @sl, align 4
  %v4_aa74 = mul i32 %v1_aa74, 4
  %v5_aa74 = add i32 %v0_aa74, %v4_aa74
  %v6_aa74 = inttoptr i32 %v5_aa74 to i32*
  %v7_aa74 = load i32, i32* %v6_aa74, align 4
  store i32 %v7_aa74, i32* @r5, align 4
  %v2_aa78 = icmp ugt i8 %v3_aa70, 30
  %v7_aa78 = icmp eq i8 %v3_aa70, 31
  store i1 %v7_aa78, i1* %cpsr_z.global-to-local, align 1
  %v1_aa7c = add i32 %v7_aa74, 20
  store i32 %v1_aa7c, i32* @r6, align 4
  %v2_aa80 = xor i1 %v7_aa78, true
  %v3_aa80 = and i1 %v2_aa78, %v2_aa80
  br i1 %v3_aa80, label %dec_label_pc_a988, label %dec_label_pc_aa84

dec_label_pc_aa84:                                ; preds = %dec_label_pc_aa64
  %v1_aa84 = add i32 %v2_aa6c, 16
  %v2_aa84 = inttoptr i32 %v1_aa84 to i32*
  %v3_aa84 = load i32, i32* %v2_aa84, align 4
  store i32 %v3_aa84, i32* %r4.global-to-local, align 4
  %v0_aa88 = call i32 @function_d3a8()
  store i32 %v0_aa88, i32* %r0.global-to-local, align 4
  %v3_aa8c = load i32, i32* %stack_var_-44, align 4
  %v5_aa94 = mul i32 %v3_aa8c, 24
  %v0_aa98 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa98 = and i32 %v0_aa98, 16711680
  %v3_aa9c = udiv i32 %v0_aa98, 16777216
  %v4_aaa0 = udiv i32 %v1_aa98, 256
  %v5_aaa0 = or i32 %v4_aaa0, %v3_aa9c
  store i32 %v5_aaa0, i32* %r2.global-to-local, align 4
  %v1_aaa4 = load i32, i32* @r7, align 4
  %v2_aaa4 = add i32 %v1_aaa4, %v5_aa94
  store i32 %v2_aaa4, i32* %r1.global-to-local, align 4
  %v1_aaa8 = and i32 %v0_aa98, 65280
  store i32 %v1_aaa8, i32* %r3.global-to-local, align 4
  %v1_aaac = add i32 %v2_aaa4, 20
  %v2_aaac = inttoptr i32 %v1_aaac to i8*
  %v3_aaac = load i8, i8* %v2_aaac, align 1
  %v4_aaac = zext i8 %v3_aaac to i32
  %v5_aab4 = call i32 @llvm.bswap.i32(i32 %v0_aa98)
  %v7_aab8 = lshr i32 %v0_aa88, %v4_aaac
  %v8_aab8 = add i32 %v7_aab8, %v5_aab4
  store i32 %v8_aab8, i32* %r2.global-to-local, align 4
  %v1_aabc = and i32 %v8_aab8, 16711680
  store i32 %v1_aabc, i32* %r0.global-to-local, align 4
  %v1_aac8 = and i32 %v8_aab8, 65280
  store i32 %v1_aac8, i32* %r1.global-to-local, align 4
  %v5_aad0 = call i32 @llvm.bswap.i32(i32 %v8_aab8)
  %v1_aad4 = load i32, i32* @r5, align 4
  %v2_aad4 = add i32 %v1_aad4, 16
  %v3_aad4 = inttoptr i32 %v2_aad4 to i32*
  store i32 %v5_aad0, i32* %v3_aad4, align 4
  store i32 %v6_a684, i32* %r3.global-to-local, align 4
  store i1 %v7_a98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a98c, label %dec_label_pc_aae4, label %dec_label_pc_a994

dec_label_pc_aae4:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_a988
  %v0_aae4 = call i32 @function_d3a8()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_aaec = load i32, i32* @r5, align 4
  %v2_aaec = add i32 %v1_aaec, 12
  %v3_aaec = inttoptr i32 %v2_aaec to i32*
  store i32 %v0_aae4, i32* %v3_aaec, align 4
  store i32 %v3_a700, i32* %r0.global-to-local, align 4
  %v0_aaf4 = load i32, i32* %r4.global-to-local, align 4
  %v1_aaf4 = add i32 %v0_aaf4, -1
  store i32 %v1_aaf4, i32* @r4, align 4
  %v9_aaf8 = icmp eq i32 %v3_a700, %v1_aaf4
  store i1 %v9_aaf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aaf8, label %dec_label_pc_ab00, label %dec_label_pc_a9a8

dec_label_pc_ab00:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_a994
  %v0_ab00 = call i32 @function_d3a8()
  %v1_ab00 = trunc i32 %v0_ab00 to i16
  store i32 %v0_ab00, i32* %r0.global-to-local, align 4
  store i32 %v3_a704, i32* %r1.global-to-local, align 4
  %v1_ab08 = load i32, i32* @r4, align 4
  %v9_ab08 = icmp eq i32 %v3_a704, %v1_ab08
  store i1 %v9_ab08, i1* %cpsr_z.global-to-local, align 1
  %v3_ab0c = load i32, i32* @r5, align 4
  %v4_ab0c = add i32 %v3_ab0c, 4
  %v5_ab0c = inttoptr i32 %v4_ab0c to i16*
  store i16 %v1_ab00, i16* %v5_ab0c, align 2
  br i1 %v9_ab08, label %dec_label_pc_ab14, label %dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge

dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge:    ; preds = %dec_label_pc_ab00
  %v1_a9b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a9b4

dec_label_pc_ab14:                                ; preds = %dec_label_pc_ab00, %dec_label_pc_a9a8
  %v0_ab14 = call i32 @function_d3a8()
  %v1_ab14 = trunc i32 %v0_ab14 to i16
  store i32 %v0_ab14, i32* %r0.global-to-local, align 4
  store i32 %v3_a708, i32* %r2.global-to-local, align 4
  %v1_ab1c = load i32, i32* @r4, align 4
  %v9_ab1c = icmp eq i32 %v3_a708, %v1_ab1c
  store i1 %v9_ab1c, i1* %cpsr_z.global-to-local, align 1
  %v3_ab20 = load i32, i32* @r5, align 4
  %v4_ab20 = add i32 %v3_ab20, 20
  %v5_ab20 = inttoptr i32 %v4_ab20 to i16*
  store i16 %v1_ab14, i16* %v5_ab20, align 2
  br i1 %v9_ab1c, label %dec_label_pc_ab28, label %dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge

dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge:    ; preds = %dec_label_pc_ab14
  %v1_a9c4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a9c0

dec_label_pc_ab28:                                ; preds = %dec_label_pc_ab14, %dec_label_pc_a9b4
  %v0_ab28 = call i32 @function_d3a8()
  %v1_ab28 = trunc i32 %v0_ab28 to i16
  store i32 %v0_ab28, i32* %r0.global-to-local, align 4
  store i32 %v6_a5c0, i32* %r3.global-to-local, align 4
  %v1_ab30 = load i32, i32* @r4, align 4
  %v9_ab30 = icmp eq i32 %v6_a5c0, %v1_ab30
  store i1 %v9_ab30, i1* %cpsr_z.global-to-local, align 1
  %v3_ab34 = load i32, i32* @r6, align 4
  %v4_ab34 = add i32 %v3_ab34, 2
  %v5_ab34 = inttoptr i32 %v4_ab34 to i16*
  store i16 %v1_ab28, i16* %v5_ab34, align 2
  br i1 %v9_ab30, label %dec_label_pc_ab3c, label %dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge

dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge:    ; preds = %dec_label_pc_ab28
  %v1_a9d0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a9cc

dec_label_pc_ab3c:                                ; preds = %dec_label_pc_ab28, %dec_label_pc_a9c0
  %v0_ab3c = call i32 @function_d3a8()
  %v1_ab40 = load i32, i32* @r6, align 4
  %v2_ab40 = add i32 %v1_ab40, 4
  %v3_ab40 = inttoptr i32 %v2_ab40 to i32*
  store i32 %v0_ab3c, i32* %v3_ab40, align 4
  store i32 %v6_a5d8, i32* %r0.global-to-local, align 4
  %v1_ab48 = load i32, i32* @r4, align 4
  %v9_ab48 = icmp eq i32 %v6_a5d8, %v1_ab48
  store i1 %v9_ab48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ab48, label %dec_label_pc_ab50, label %dec_label_pc_a9d8

dec_label_pc_ab50:                                ; preds = %dec_label_pc_ab3c, %dec_label_pc_a9cc
  %v0_ab50 = call i32 @function_d3a8()
  store i32 %v0_ab50, i32* %r0.global-to-local, align 4
  %v0_ab54 = load i32, i32* @fp, align 4
  %v2_ab54 = icmp eq i32 %v0_ab54, 0
  store i1 %v2_ab54, i1* %cpsr_z.global-to-local, align 1
  %v1_ab58 = load i32, i32* @r6, align 4
  %v2_ab58 = add i32 %v1_ab58, 8
  %v3_ab58 = inttoptr i32 %v2_ab58 to i32*
  store i32 %v0_ab50, i32* %v3_ab58, align 4
  br i1 %v2_ab54, label %dec_label_pc_a9e0, label %dec_label_pc_ab60

dec_label_pc_ab60:                                ; preds = %dec_label_pc_a9d8, %dec_label_pc_ab50
  %v0_ab60 = call i32 @function_d3a8()
  %v1_ab60 = trunc i32 %v0_ab60 to i16
  store i32 %v0_ab60, i32* %r0.global-to-local, align 4
  %v3_ab64 = load i32, i32* @r6, align 4
  %v4_ab64 = add i32 %v3_ab64, 18
  %v5_ab64 = inttoptr i32 %v4_ab64 to i16*
  store i16 %v1_ab60, i16* %v5_ab64, align 2
  br label %dec_label_pc_a9e0

dec_label_pc_ab6c:                                ; preds = %dec_label_pc_a9e0, %dec_label_pc_a970
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ab70 = call i32 @function_102c4(i32* null)
  store i32 %v2_ab70, i32* %r0.global-to-local, align 4
  store i32 %v2_a694, i32* %r3.global-to-local, align 4
  %v9_ab78 = icmp eq i32 %v2_a694, %v2_ab70
  store i1 %v9_ab78, i1* %cpsr_z.global-to-local, align 1
  %v6_ab7c = icmp slt i32 %v2_a694, %v2_ab70
  br i1 %v6_ab7c, label %dec_label_pc_ab80, label %dec_label_pc_ab6c.dec_label_pc_a970_crit_edge

dec_label_pc_ab6c.dec_label_pc_a970_crit_edge:    ; preds = %dec_label_pc_ab6c
  %v0_a974.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_a970

dec_label_pc_ab80:                                ; preds = %dec_label_pc_ab6c, %dec_label_pc_a4c4, %dec_label_pc_ab8c
  %v1_ab88 = phi i32 [ %v3_a6a8, %dec_label_pc_a4c4 ], [ %v1_ab90, %dec_label_pc_ab8c ], [ %v2_ab70, %dec_label_pc_ab6c ]
  store i32 %v3_a4c4, i32* %r4.global-to-local, align 4
  store i32 %v24_a4c4, i32* %fp.global-to-local, align 4
  store i32 %v27_a4c4, i32* %lr.global-to-local, align 4
  ret i32 %v1_ab88

dec_label_pc_ab8c:                                ; preds = %dec_label_pc_a6b8
  %v0_ab8c = load i32, i32* @r8, align 4
  store i32 %v0_ab8c, i32* %r0.global-to-local, align 4
  %v1_ab90 = call i32 @function_10644(i32 %v0_ab8c)
  store i32 %v1_ab90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ab80

; uselistorder directives
  uselistorder i32 %v1_ab90, { 1, 0 }
  uselistorder i32 %v0_ab60, { 1, 0 }
  uselistorder i32 %v0_ab28, { 1, 0 }
  uselistorder i32 %v0_ab14, { 1, 0 }
  uselistorder i32 %v0_ab00, { 1, 0 }
  uselistorder i32 %v1_aaf4, { 1, 2, 0 }
  uselistorder i32 %v0_aa98, { 1, 2, 0, 3 }
  uselistorder i32 %v1_aa54, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_aa20, { 1, 0 }
  uselistorder i32 %v4_aa10, { 1, 0 }
  uselistorder i1 %v3_a9a0, { 1, 0 }
  uselistorder i1 %v7_a98c, { 2, 1, 0 }
  uselistorder i32 %v2_a960, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a7c8, { 1, 2, 0 }
  uselistorder i32 %v1_a78c, { 2, 1, 0 }
  uselistorder i32 %v1_a788, { 2, 0, 1 }
  uselistorder i32 %v1_a784, { 2, 0, 1 }
  uselistorder i32 %v1_a780, { 2, 0, 1 }
  uselistorder i32 %v1_a77c, { 2, 0, 1 }
  uselistorder i32 %v3_a704, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_a700, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_a6f4, { 1, 0, 2 }
  uselistorder i1 %v7_a6d8, { 1, 0 }
  uselistorder i1 %v7_a6ac, { 1, 0 }
  uselistorder i32 %v3_a6a8, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_a694, { 2, 1, 0 }
  uselistorder i32 %v6_a684, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_a5d8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a5c0, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_a54c, { 1, 0 }
  uselistorder i32 %v6_a544, { 1, 0 }
  uselistorder i32 %v7_a52c, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 12, 5, 6, 7, 8, 9, 10, 11, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 8, 10, 11, 9, 12, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 33, 34, 35, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ab80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab60, { 1, 0 }
  uselistorder label %dec_label_pc_a9e0, { 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ab9c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ab9c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* %stack_var_-80, align 4
  %v2_abc0 = call i32 @function_11998(i32 %arg2, i32 4)
  %v0_abcc = load i32, i32* @fp, align 4
  store i32 %v0_abcc, i32* %r0.global-to-local, align 4
  %v2_abd0 = call i32 @function_11998(i32 %v0_abcc, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_abdc = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_abd0, i32* @sb, align 4
  %v0_abec = load i32, i32* @r4, align 4
  store i32 %v0_abec, i32* %r0.global-to-local, align 4
  %v5_abf0 = inttoptr i32 %v0_abdc to i32*
  %v6_abf0 = call i32 @function_8258(i32 %v0_abec, i32* %v5_abf0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_abf4 = load i32, i32* @r5, align 4
  %v0_ac00 = load i32, i32* @r6, align 4
  store i32 %v0_ac00, i32* %r3.global-to-local, align 4
  %v0_ac04 = load i32, i32* @r4, align 4
  store i32 %v0_ac04, i32* %r0.global-to-local, align 4
  %v3_ac08 = urem i32 %v6_abf0, 65536
  store i32 %v3_ac08, i32* @r8, align 4
  %v5_ac0c = inttoptr i32 %v0_abf4 to i32*
  %v6_ac0c = call i32 @function_8258(i32 %v0_ac04, i32* %v5_ac0c, i32 6, i32 %v0_ac00, i32 ptrtoint (i32* @0 to i32))
  %v0_ac10 = load i32, i32* @r5, align 4
  %v3_ac14 = mul i32 %v6_ac0c, 65536
  store i32 %v3_ac14, i32* @sl, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ac20 = load i32, i32* @r4, align 4
  store i32 %v0_ac20, i32* %r0.global-to-local, align 4
  %v5_ac24 = inttoptr i32 %v0_ac10 to i32*
  %v6_ac24 = call i32 @function_8258(i32 %v0_ac20, i32* %v5_ac24, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_ac34 = urem i32 %v6_ac24, 65536
  store i32 %v3_ac34, i32* @ip, align 4
  %v0_ac38 = load i32, i32* @r5, align 4
  %v0_ac3c = load i32, i32* @r4, align 4
  store i32 %v0_ac3c, i32* %r0.global-to-local, align 4
  %v5_ac44 = inttoptr i32 %v0_ac38 to i32*
  %v6_ac44 = call i32 @function_8258(i32 %v0_ac3c, i32* %v5_ac44, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ac50 = urem i32 %v6_ac44, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v2_ac6c = call i32 @function_102c4(i32* null)
  store i32 %v2_ac6c, i32* %r0.global-to-local, align 4
  %v0_ac70 = load i32, i32* @sl, align 4
  %v3_ac70 = udiv i32 %v0_ac70, 65536
  %v1_ac74 = load i32, i32* @r6, align 4
  %v9_ac74 = icmp eq i32 %v3_ac70, %v1_ac74
  br i1 %v9_ac74, label %dec_label_pc_ae48, label %bb

bb:                                               ; preds = %dec_label_pc_ab9c
  %v4_ac7c = udiv i32 %v0_ac70, 16777216
  store i32 %v4_ac7c, i32* %r3.global-to-local, align 4
  %v1_ac80 = load i32, i32* @r7, align 4
  %v2_ac80 = add i32 %v1_ac80, %v2_ac6c
  store i32 %v2_ac80, i32* %r0.global-to-local, align 4
  %v2_ac78 = mul nuw nsw i32 %v3_ac70, 256
  %v6_ac84 = or i32 %v2_ac78, %v4_ac7c
  %extract.t58 = trunc i32 %v6_ac84 to i16
  br label %dec_label_pc_ac94

dec_label_pc_ac94:                                ; preds = %bb, %dec_label_pc_ae48
  %v6_ac84.sink.off0 = phi i16 [ %extract.t58, %bb ], [ %extract.t59, %dec_label_pc_ae48 ]
  %v0_ac8810 = phi i32 [ %v2_ac80, %bb ], [ %v2_ac8013, %dec_label_pc_ae48 ]
  %v0_ac94 = load i32, i32* @fp, align 4
  %v2_ac94 = icmp eq i32 %v0_ac94, 0
  br i1 %v2_ac94, label %dec_label_pc_adcc, label %dec_label_pc_ac9c

dec_label_pc_ac9c:                                ; preds = %dec_label_pc_ac94
  store i32 0, i32* @sl, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v2_acc8 = ptrtoint i32* %stack_var_-56 to i32
  %v4_ace8 = sext i16 %v6_ac84.sink.off0 to i32
  br label %dec_label_pc_ad1c

dec_label_pc_acac:                                ; preds = %.thread26, %dec_label_pc_ad58
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_acb8 = call i32 @function_10e30(i32 2, i32 2, i32 17)
  store i32 %v3_acb8, i32* %r0.global-to-local, align 4
  %v7_acbc = icmp eq i32 %v3_acb8, -1
  %v0_acc0 = load i32, i32* @sl, align 4
  %v1_acc0 = add i32 %v0_acc0, 1
  store i32 %v1_acc0, i32* @sl, align 4
  %v0_acc4 = load i32, i32* @r7, align 4
  %v1_acc4 = add i32 %v0_acc4, 24
  store i32 %v1_acc4, i32* @r7, align 4
  %v1_acd0 = load i32, i32* @r6, align 4
  %v2_acd0 = load i32, i32* @sb, align 4
  %v3_acd0 = add i32 %v2_acd0, %v1_acd0
  %v4_acd0 = inttoptr i32 %v3_acd0 to i32*
  store i32 %v3_acb8, i32* %v4_acd0, align 4
  br i1 %v7_acbc, label %dec_label_pc_adf0.loopexit14, label %dec_label_pc_acd8

dec_label_pc_acd8:                                ; preds = %dec_label_pc_acac
  store i32 2, i32* %stack_var_-56, align 4
  store i32 %v4_ace8, i32* %r3.global-to-local, align 4
  %v0_acf0 = load i32, i32* %r0.global-to-local, align 4
  %v3_acf0 = call i32 @function_10be0(i32 %v0_acf0, i32 %v2_acc8, i32 16)
  store i32 %v3_acf0, i32* %r0.global-to-local, align 4
  %v0_acf4 = load i32, i32* @r5, align 4
  %v1_acf4 = add i32 %v0_acf4, 20
  %v2_acf4 = inttoptr i32 %v1_acf4 to i8*
  %v3_acf4 = load i8, i8* %v2_acf4, align 1
  %v4_acf4 = zext i8 %v3_acf4 to i32
  store i32 %v4_acf4, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_acf4, 32
  br i1 %tmp, label %dec_label_pc_ad6c, label %dec_label_pc_ad00

dec_label_pc_ad00:                                ; preds = %dec_label_pc_acd8
  %v0_ad00 = load i32, i32* @r6, align 4
  %v1_ad00 = load i32, i32* @sb, align 4
  %v2_ad00 = add i32 %v1_ad00, %v0_ad00
  %v3_ad00 = inttoptr i32 %v2_ad00 to i32*
  %v4_ad00 = load i32, i32* %v3_ad00, align 4
  store i32 %v4_ad00, i32* %r0.global-to-local, align 4
  %v3_ad0c = call i32 @function_10c18(i32 %v4_ad00, i32 %v0_acf4, i32 16)
  store i32 %v3_ad0c, i32* %r0.global-to-local, align 4
  %v0_ad10 = load i32, i32* @sl, align 4
  %v1_ad10 = load i32, i32* @fp, align 4
  %v9_ad10 = icmp eq i32 %v0_ad10, %v1_ad10
  %v0_ad14 = load i32, i32* @r6, align 4
  %v1_ad14 = add i32 %v0_ad14, 4
  store i32 %v1_ad14, i32* @r6, align 4
  br i1 %v9_ad10, label %dec_label_pc_adcc, label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_ad6c, %dec_label_pc_ad00, %dec_label_pc_ac9c
  store i32 65535, i32* @r4, align 4
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_ad2c = call i32 @function_11998(i32 65535, i32 1)
  store i32 %v2_ad2c, i32* %r0.global-to-local, align 4
  %v0_ad30 = load i32, i32* @r8, align 4
  %v3_ad34 = udiv i32 %v0_ad30, 256
  %v1_ad30 = mul i32 %v0_ad30, 256
  %v4_ad38 = and i32 %v1_ad30, 65280
  %v5_ad38 = or i32 %v4_ad38, %v3_ad34
  store i32 %v5_ad38, i32* %r3.global-to-local, align 4
  %v2_ad3c = load i32, i32* %stack_var_-80, align 4
  %v1_ad40 = load i32, i32* @r7, align 4
  %v2_ad40 = add i32 %v1_ad40, %v2_ad3c
  store i32 %v2_ad40, i32* @r5, align 4
  %v1_ad48 = load i32, i32* @r4, align 4
  %v9_ad48 = icmp eq i32 %v0_ad30, %v1_ad48
  %v1_ad4c = load i32, i32* @r6, align 4
  %v3_ad4c = add i32 %v1_ad4c, %v2_abc0
  %v4_ad4c = inttoptr i32 %v3_ad4c to i32*
  store i32 %v2_ad2c, i32* %v4_ad4c, align 4
  br i1 %v9_ad48, label %dec_label_pc_ad58, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_ad1c
  %v1_ad5027 = load i32, i32* %r3.global-to-local, align 4
  %v2_ad5028 = trunc i32 %v1_ad5027 to i16
  %v3_ad5029 = load i32, i32* @r5, align 4
  %v4_ad5030 = add i32 %v3_ad5029, 2
  %v5_ad5031 = inttoptr i32 %v4_ad5030 to i16*
  store i16 %v2_ad5028, i16* %v5_ad5031, align 2
  br label %dec_label_pc_acac

dec_label_pc_ad58:                                ; preds = %dec_label_pc_ad1c
  %v0_ad58 = call i32 @function_d3a8()
  %v1_ad58 = trunc i32 %v0_ad58 to i16
  store i32 %v0_ad58, i32* %r0.global-to-local, align 4
  %v2_ad5c = load i32, i32* %stack_var_-80, align 4
  store i32 %v2_ad5c, i32* %r3.global-to-local, align 4
  %v1_ad60 = load i32, i32* @r7, align 4
  %v2_ad60 = add i32 %v1_ad60, %v2_ad5c
  store i32 %v2_ad60, i32* @r5, align 4
  %v4_ad64 = add i32 %v2_ad60, 2
  %v5_ad64 = inttoptr i32 %v4_ad64 to i16*
  store i16 %v1_ad58, i16* %v5_ad64, align 2
  br label %dec_label_pc_acac

dec_label_pc_ad6c:                                ; preds = %dec_label_pc_acd8
  %v1_ad6c = add i32 %v0_acf4, 16
  %v2_ad6c = inttoptr i32 %v1_ad6c to i32*
  %v3_ad6c = load i32, i32* %v2_ad6c, align 4
  store i32 %v3_ad6c, i32* @r4, align 4
  %v0_ad70 = call i32 @function_d3a8()
  store i32 %v0_ad70, i32* %r0.global-to-local, align 4
  %v0_ad74 = load i32, i32* @r4, align 4
  %v1_ad80 = and i32 %v0_ad74, 65280
  store i32 %v1_ad80, i32* %r3.global-to-local, align 4
  %v0_ad84 = load i32, i32* @r5, align 4
  %v1_ad84 = add i32 %v0_ad84, 20
  %v2_ad84 = inttoptr i32 %v1_ad84 to i8*
  %v3_ad84 = load i8, i8* %v2_ad84, align 1
  %v4_ad84 = zext i8 %v3_ad84 to i32
  %v5_ad8c = call i32 @llvm.bswap.i32(i32 %v0_ad74)
  %v7_ad90 = lshr i32 %v0_ad70, %v4_ad84
  %v8_ad90 = add i32 %v7_ad90, %v5_ad8c
  %v1_ad94 = and i32 %v8_ad90, 16711680
  store i32 %v1_ad94, i32* %r0.global-to-local, align 4
  %v5_ada8 = call i32 @llvm.bswap.i32(i32 %v8_ad90)
  store i32 %v5_ada8, i32* %r3.global-to-local, align 4
  %v2_adac = add i32 %v0_ad84, 4
  %v3_adac = inttoptr i32 %v2_adac to i32*
  store i32 %v5_ada8, i32* %v3_adac, align 4
  %v0_adb0 = load i32, i32* @r5, align 4
  %v0_adb4 = load i32, i32* @r6, align 4
  %v1_adb4 = load i32, i32* @sb, align 4
  %v2_adb4 = add i32 %v1_adb4, %v0_adb4
  %v3_adb4 = inttoptr i32 %v2_adb4 to i32*
  %v4_adb4 = load i32, i32* %v3_adb4, align 4
  store i32 %v4_adb4, i32* %r0.global-to-local, align 4
  %v3_adbc = call i32 @function_10c18(i32 %v4_adb4, i32 %v0_adb0, i32 16)
  store i32 %v3_adbc, i32* %r0.global-to-local, align 4
  %v0_adc0 = load i32, i32* @sl, align 4
  %v1_adc0 = load i32, i32* @fp, align 4
  %v9_adc0 = icmp eq i32 %v0_adc0, %v1_adc0
  %v0_adc4 = load i32, i32* @r6, align 4
  %v1_adc4 = add i32 %v0_adc4, 4
  store i32 %v1_adc4, i32* @r6, align 4
  br i1 %v9_adc0, label %dec_label_pc_adcc, label %dec_label_pc_ad1c

dec_label_pc_adcc:                                ; preds = %dec_label_pc_ad6c, %dec_label_pc_ad00, %dec_label_pc_ac94
  %v1_add021 = phi i32 [ 0, %dec_label_pc_ac94 ], [ %v0_adc0, %dec_label_pc_ad6c ], [ %v0_ad10, %dec_label_pc_ad00 ]
  store i32 0, i32* @r5, align 4
  %v2_ae04 = icmp eq i32 %v1_ac50, 0
  br label %dec_label_pc_add0

dec_label_pc_add0:                                ; preds = %dec_label_pc_add0.backedge, %dec_label_pc_adcc
  %v1_add0 = phi i32 [ %v1_add0.pre, %dec_label_pc_add0.backedge ], [ %v1_add021, %dec_label_pc_adcc ]
  %v1_ae08 = phi i32 [ %v0_add019, %dec_label_pc_add0.backedge ], [ 0, %dec_label_pc_adcc ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v5_add8 = icmp slt i32 %v1_ae08, %v1_add0
  br i1 %v5_add8, label %dec_label_pc_adfc, label %dec_label_pc_addc

dec_label_pc_addc:                                ; preds = %dec_label_pc_add0
  %v2_addc = call i32 @function_102c4(i32* null)
  store i32 %v2_addc, i32* %r0.global-to-local, align 4
  store i32 %v0_ac8810, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v6_adec = icmp slt i32 %v0_ac8810, %v2_addc
  br i1 %v6_adec, label %dec_label_pc_adf0, label %dec_label_pc_add0.backedge

dec_label_pc_adf0.loopexit14:                     ; preds = %dec_label_pc_acac
  %v1_adf8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_adf0:                                ; preds = %dec_label_pc_addc, %dec_label_pc_adf0.loopexit14
  %v1_adf8 = phi i32 [ %v1_adf8.pre, %dec_label_pc_adf0.loopexit14 ], [ %v2_addc, %dec_label_pc_addc ]
  ret i32 %v1_adf8

dec_label_pc_adfc:                                ; preds = %dec_label_pc_add0
  store i32 %v2_abc0, i32* @r3, align 4
  %v4_ae08 = mul i32 %v1_ae08, 4
  %v5_ae08 = add i32 %v4_ae08, %v2_abc0
  %v6_ae08 = inttoptr i32 %v5_ae08 to i32*
  %v7_ae08 = load i32, i32* %v6_ae08, align 4
  store i32 %v7_ae08, i32* @r4, align 4
  br i1 %v2_ae04, label %dec_label_pc_ae10, label %dec_label_pc_ae2c

dec_label_pc_ae10:                                ; preds = %dec_label_pc_adfc, %dec_label_pc_ae2c
  %v0_ae14 = phi i32 [ %v7_ae08, %dec_label_pc_adfc ], [ %v0_ae14.pre, %dec_label_pc_ae2c ]
  %v1_ae10 = phi i32 [ %v1_ae08, %dec_label_pc_adfc ], [ %v1_ae10.pre, %dec_label_pc_ae2c ]
  %v0_ae10 = load i32, i32* @sb, align 4
  %v4_ae10 = mul i32 %v1_ae10, 4
  %v5_ae10 = add i32 %v4_ae10, %v0_ae10
  %v6_ae10 = inttoptr i32 %v5_ae10 to i32*
  %v7_ae10 = load i32, i32* %v6_ae10, align 4
  store i32 %v7_ae10, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ae20 = call i32 @function_10d74(i32 %v7_ae10, i32 %v0_ae14, i32 %v3_ac34, i32 16384)
  store i32 %v4_ae20, i32* %r0.global-to-local, align 4
  %v0_ae24 = load i32, i32* @r5, align 4
  %v1_ae24 = add i32 %v0_ae24, 1
  store i32 %v1_ae24, i32* @r5, align 4
  br label %dec_label_pc_add0.backedge

dec_label_pc_add0.backedge:                       ; preds = %dec_label_pc_ae10, %dec_label_pc_addc
  %v0_add019 = phi i32 [ %v1_ae24, %dec_label_pc_ae10 ], [ 0, %dec_label_pc_addc ]
  %v1_add0.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_add0

dec_label_pc_ae2c:                                ; preds = %dec_label_pc_adfc
  store i32 %v7_ae08, i32* %r0.global-to-local, align 4
  %v2_ae34 = call i32 @function_d46c(i32 %v7_ae08, i32 %v3_ac34)
  store i32 %v2_ae34, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ae40 = load i32, i32* @r4, align 4
  %v4_ae40 = add i32 %v3_ae40, %v3_ac34
  %v5_ae40 = inttoptr i32 %v4_ae40 to i8*
  store i8 0, i8* %v5_ae40, align 1
  %v1_ae10.pre = load i32, i32* @r5, align 4
  %v0_ae14.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ae10

dec_label_pc_ae48:                                ; preds = %dec_label_pc_ab9c
  %v1_ac8012 = load i32, i32* @r7, align 4
  %v2_ac8013 = add i32 %v1_ac8012, %v2_ac6c
  store i32 %v2_ac8013, i32* %r0.global-to-local, align 4
  %v0_ae48 = call i32 @function_d3a8()
  %v3_ae50 = urem i32 %v0_ae48, 65536
  store i32 %v3_ae50, i32* %r0.global-to-local, align 4
  %extract.t59 = trunc i32 %v0_ae48 to i16
  br label %dec_label_pc_ac94

; uselistorder directives
  uselistorder i32 %v0_ae48, { 1, 0 }
  uselistorder i32 %v2_ac8013, { 1, 0 }
  uselistorder i32 %v7_ae08, { 2, 1, 0, 3 }
  uselistorder i32 %v5_ada8, { 1, 0 }
  uselistorder i32 %v0_ad58, { 1, 0 }
  uselistorder i32 %v0_ad30, { 2, 0, 1 }
  uselistorder i32 %v3_acb8, { 1, 0, 2 }
  uselistorder i32 %v0_ac8810, { 1, 0 }
  uselistorder i32 %v4_ac7c, { 1, 0 }
  uselistorder i32 %v3_ac34, { 3, 2, 1, 0 }
  uselistorder i32 %v2_abc0, { 0, 2, 1 }
  uselistorder i32* %stack_var_-56, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 9, 10, 7, 8, 11, 13, 12, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 1, 6, 18, 8, 7, 11, 9, 10, 12, 13, 23, 21, 15, 14, 16, 19, 20, 17, 22, 25, 24, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ae10, { 1, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_acac, { 1, 0 }
  uselistorder label %dec_label_pc_ac94, { 1, 0 }
}

define i32 @function_ae5c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ae5c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ae5c = load i32, i32* @lr, align 4
  store i32 0, i32* @r8, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_ae88 = call i32 @function_11998(i32 %arg2, i32 4)
  %v0_ae8c = load i32, i32* @r4, align 4
  store i32 %v0_ae8c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ae98 = load i32, i32* @r8, align 4
  store i32 %v0_ae98, i32* %r3.global-to-local, align 4
  %v0_ae9c = load i32, i32* @r5, align 4
  store i32 %v0_ae9c, i32* %r0.global-to-local, align 4
  %v5_aea0 = inttoptr i32 %v0_ae8c to i32*
  %v6_aea0 = call i32 @function_8258(i32 %v0_ae9c, i32* %v5_aea0, i32 2, i32 %v0_ae98, i32 %v2_ae88)
  %v1_aeac = urem i32 %v6_aea0, 256
  store i32 %v1_aeac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_aeb8 = load i32, i32* @r4, align 4
  store i32 %v0_aeb8, i32* %r1.global-to-local, align 4
  %v0_aebc = load i32, i32* @r5, align 4
  store i32 %v0_aebc, i32* %r0.global-to-local, align 4
  %v5_aec0 = trunc i32 %v6_aea0 to i8
  %v6_aec4 = inttoptr i32 %v0_aeb8 to i32*
  %v7_aec4 = call i32 @function_8258(i32 %v0_aebc, i32* %v6_aec4, i32 3, i32 65535, i32 %v6_aea0)
  %v0_aec8 = load i32, i32* @r4, align 4
  store i32 %v0_aec8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_aed8 = load i32, i32* @r5, align 4
  store i32 %v0_aed8, i32* %r0.global-to-local, align 4
  %v5_aedc = inttoptr i32 %v0_aec8 to i32*
  %v6_aedc = call i32 @function_8258(i32 %v0_aed8, i32* %v5_aedc, i32 4, i32 64, i32 %v7_aec4)
  %v1_aee4 = urem i32 %v6_aedc, 256
  store i32 %v1_aee4, i32* %ip.global-to-local, align 4
  %v0_aee8 = load i32, i32* @r4, align 4
  store i32 %v0_aee8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_aef0 = load i32, i32* @r8, align 4
  store i32 %v0_aef0, i32* %r3.global-to-local, align 4
  %v0_aef4 = load i32, i32* @r5, align 4
  store i32 %v0_aef4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_aedc, 16777216
  %v5_aefc = sdiv i32 %sext, 16777216
  %v6_aefc = inttoptr i32 %v0_aee8 to i32*
  %v7_aefc = call i32 @function_8258(i32 %v0_aef4, i32* %v6_aefc, i32 5, i32 %v0_aef0, i32 %v5_aefc)
  %v1_af08 = urem i32 %v7_aefc, 256
  store i32 %v1_af08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_af14 = load i32, i32* @r4, align 4
  store i32 %v0_af14, i32* %r1.global-to-local, align 4
  %v0_af18 = load i32, i32* @r5, align 4
  store i32 %v0_af18, i32* %r0.global-to-local, align 4
  %v5_af20 = inttoptr i32 %v0_af14 to i32*
  %v6_af20 = call i32 @function_8258(i32 %v0_af18, i32* %v5_af20, i32 6, i32 65535, i32 %v1_af08)
  %v0_af2c = load i32, i32* @r4, align 4
  store i32 %v0_af2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_af38 = load i32, i32* @r5, align 4
  store i32 %v0_af38, i32* %r0.global-to-local, align 4
  %v5_af3c = inttoptr i32 %v0_af2c to i32*
  %v6_af3c = call i32 @function_8258(i32 %v0_af38, i32* %v5_af3c, i32 7, i32 65535, i32 %v6_af20)
  %v0_af40 = load i32, i32* @r4, align 4
  store i32 %v0_af40, i32* %r1.global-to-local, align 4
  %v0_af48 = load i32, i32* @r8, align 4
  store i32 %v0_af48, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_af50 = load i32, i32* @r5, align 4
  store i32 %v0_af50, i32* %r0.global-to-local, align 4
  %v5_af54 = inttoptr i32 %v0_af40 to i32*
  %v6_af54 = call i32 @function_8258(i32 %v0_af50, i32* %v5_af54, i32 %v0_af48, i32 512, i32 %v6_af3c)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af60 = load i32, i32* @r4, align 4
  store i32 %v0_af60, i32* %r1.global-to-local, align 4
  store i32 %v6_af54, i32* @sl, align 4
  %v0_af68 = load i32, i32* @r5, align 4
  store i32 %v0_af68, i32* %r0.global-to-local, align 4
  %v5_af6c = inttoptr i32 %v0_af60 to i32*
  %v6_af6c = call i32 @function_8258(i32 %v0_af68, i32* %v5_af6c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_af78 = load i32, i32* @global_var_202dc.42, align 4
  store i32 %v2_af78, i32* %r3.global-to-local, align 4
  %v1_af7c = urem i32 %v6_af6c, 256
  store i32 %v1_af7c, i32* %ip.global-to-local, align 4
  %v0_af80 = load i32, i32* @r4, align 4
  store i32 %v0_af80, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_af88 = load i32, i32* @r5, align 4
  store i32 %v0_af88, i32* %r0.global-to-local, align 4
  %v5_af90 = inttoptr i32 %v0_af80 to i32*
  %v6_af90 = call i32 @function_8258(i32 %v0_af88, i32* %v5_af90, i32 19, i32 %v2_af78, i32 %v1_af7c)
  store i32 %v6_af90, i32* @sb, align 4
  %v0_af98 = load i32, i32* @r8, align 4
  store i32 %v0_af98, i32* %r0.global-to-local, align 4
  %v1_af9c = inttoptr i32 %v0_af98 to i32*
  %v2_af9c = call i32 @function_102c4(i32* %v1_af9c)
  %v1_afa0 = load i32, i32* @r6, align 4
  %v2_afa0 = add i32 %v1_afa0, %v2_af9c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_afb4 = call i32 @function_10e30(i32 2, i32 3, i32 17)
  store i32 %v3_afb4, i32* %r0.global-to-local, align 4
  %v7_afb8 = icmp eq i32 %v3_afb4, -1
  store i32 %v3_afb4, i32* @fp, align 4
  br i1 %v7_afb8, label %dec_label_pc_b40c, label %dec_label_pc_afc4

dec_label_pc_afc4:                                ; preds = %dec_label_pc_ae5c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_afcc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_afcc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_afd4 = load i32, i32* @r8, align 4
  store i32 %v0_afd4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_afe0 = call i32 @function_10dec(i32 %v3_afb4, i32 %v0_afd4, i32 3, i32 %v6_afcc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_afe0, i32* %r0.global-to-local, align 4
  %v7_afe4 = icmp eq i32 %v5_afe0, -1
  br i1 %v7_afe4, label %dec_label_pc_b418, label %dec_label_pc_afec

dec_label_pc_afec:                                ; preds = %dec_label_pc_afc4
  %v0_afec = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_aff8 = urem i32 %v0_afec, 65536
  %v3_affc = icmp ugt i32 %v3_aff8, 1459
  br i1 %v3_affc, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_afec
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_afec, %bb
  %storemerge = phi i32 [ 1460, %bb ], [ %v3_aff8, %dec_label_pc_afec ]
  %v0_b008 = phi i32 [ 1460, %bb ], [ %v3_aff8, %dec_label_pc_afec ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v6_af20, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v3_b01c = mul i32 %v6_af3c, 65536
  store i32 %v3_b01c, i32* %r2.global-to-local, align 4
  %v3_b024 = urem i32 %v7_aec4, 65536
  %v3_b028 = urem i32 %v6_af20, 65536
  store i32 %v3_b028, i32* %ip.global-to-local, align 4
  %v3_b02c = urem i32 %v6_af3c, 65536
  store i32 %v3_b02c, i32* %r0.global-to-local, align 4
  %v2_b030 = icmp eq i32 %arg2, 0
  %v0_b038 = load i32, i32* @r8, align 4
  store i32 %v0_b038, i32* %stack_var_-44, align 4
  br i1 %v2_b030, label %.dec_label_pc_b164.preheader_crit_edge, label %dec_label_pc_b04c

.dec_label_pc_b164.preheader_crit_edge:           ; preds = %bb41
  %.pre = add nuw nsw i32 %v0_b008, 8
  %.pre10 = add nuw nsw i32 %v0_b008, 28
  br label %dec_label_pc_b164.preheader

dec_label_pc_b04c:                                ; preds = %bb41
  %v1_b054 = add nuw nsw i32 %v0_b008, 28
  %v1_b058 = add nuw nsw i32 %v0_b008, 8
  %tmp42 = mul nuw nsw i32 %v3_b028, 256
  %v3_b068 = and i32 %tmp42, 65280
  %v3_b070 = mul i32 %v1_b054, 65536
  store i32 %v3_b070, i32* @lr, align 4
  %tmp43 = udiv i32 %v6_af20, 256
  %v4_b078 = urem i32 %tmp43, 256
  %v5_b078 = or i32 %v3_b068, %v4_b078
  store i32 %v5_b078, i32* @sl, align 4
  store i32 %v3_b01c, i32* %r1.global-to-local, align 4
  %tmp44 = mul i32 %v6_af3c, 256
  %v3_b090 = and i32 %tmp44, 65280
  %v2_b094 = icmp eq i32 %v1_af08, 0
  %tmp45 = mul nuw nsw i32 %v1_b054, 256
  %v3_b098 = and i32 %tmp45, 65280
  store i32 %v3_b098, i32* %r3.global-to-local, align 4
  %tmp46 = mul i32 %v7_aec4, 256
  %v3_b09c = and i32 %tmp46, 65280
  store i32 %v3_b09c, i32* %r2.global-to-local, align 4
  %tmp47 = mul nuw nsw i32 %v1_b058, 256
  %v3_b0a0 = and i32 %tmp47, 65280
  store i32 %v3_b0a0, i32* %ip.global-to-local, align 4
  %tmp48 = udiv i32 %v6_af3c, 256
  %v4_b0a4 = urem i32 %tmp48, 256
  %v5_b0a4 = or i32 %v4_b0a4, %v3_b090
  store i32 %v5_b0a4, i32* %r0.global-to-local, align 4
  %tmp49 = udiv i32 %v7_aec4, 256
  %v4_b0a8 = urem i32 %tmp49, 256
  %v5_b0a8 = or i32 %v4_b0a8, %v3_b09c
  store i32 %v5_b0a8, i32* @r8, align 4
  %tmp50 = udiv i32 %v1_b054, 256
  %v4_b0ac = urem i32 %tmp50, 256
  %v5_b0ac = or i32 %v4_b0ac, %v3_b098
  store i32 %v5_b0ac, i32* @r6, align 4
  %tmp51 = udiv i32 %v1_b058, 256
  %v4_b0b0 = urem i32 %tmp51, 256
  %v5_b0b0 = or i32 %v4_b0b0, %v3_b0a0
  store i32 %v5_b0b0, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %sext11 = mul nuw i32 %v5_b0a4, 65536
  %v4_b138 = sdiv i32 %sext11, 65536
  %v1_b11c = trunc i32 %v5_aefc to i8
  br i1 %v2_b094, label %dec_label_pc_b0c0, label %dec_label_pc_b34c

dec_label_pc_b0c0:                                ; preds = %dec_label_pc_b04c, %dec_label_pc_b0c0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b0cc = call i32 @function_11998(i32 1510, i32 1)
  store i32 %v2_b0cc, i32* %r0.global-to-local, align 4
  store i32 %v2_ae88, i32* %r2.global-to-local, align 4
  %v2_b0d8 = load i32, i32* @r4, align 4
  %v5_b0d8 = mul i32 %v2_b0d8, 4
  %v6_b0d8 = add i32 %v5_b0d8, %v2_ae88
  %v7_b0d8 = inttoptr i32 %v6_b0d8 to i32*
  store i32 %v2_b0cc, i32* %v7_b0d8, align 4
  %v3_b0dc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b0dc, i32* %r1.global-to-local, align 4
  %v0_b0e0 = load i32, i32* %r2.global-to-local, align 4
  %v4_b0e0 = mul i32 %v3_b0dc, 4
  %v5_b0e0 = add i32 %v0_b0e0, %v4_b0e0
  %v6_b0e0 = inttoptr i32 %v5_b0e0 to i32*
  %v7_b0e0 = load i32, i32* %v6_b0e0, align 4
  store i32 %v7_b0e0, i32* %r3.global-to-local, align 4
  %v1_b0e4 = inttoptr i32 %v7_b0e0 to i8*
  %v2_b0e4 = load i8, i8* %v1_b0e4, align 1
  %tmp = urem i8 %v2_b0e4, 16
  %v1_b0e8 = zext i8 %tmp to i32
  %v1_b0ec = or i32 %v1_b0e8, 64
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v1_b0f0 = trunc i32 %v1_b0ec to i8
  store i8 %v1_b0f0, i8* %v1_b0e4, align 1
  %v0_b0f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0f4 = inttoptr i32 %v0_b0f4 to i8*
  %v2_b0f4 = load i8, i8* %v1_b0f4, align 1
  %v1_b0f8 = and i8 %v2_b0f4, -16
  %v1_b0fc = or i8 %v1_b0f8, 5
  store i32 17, i32* %ip.global-to-local, align 4
  store i8 %v1_b0fc, i8* %v1_b0f4, align 1
  %v0_b108 = load i32, i32* %ip.global-to-local, align 4
  %v1_b108 = trunc i32 %v0_b108 to i8
  %v2_b108 = load i32, i32* %r3.global-to-local, align 4
  %v3_b108 = add i32 %v2_b108, 9
  %v4_b108 = inttoptr i32 %v3_b108 to i8*
  store i8 %v1_b108, i8* %v4_b108, align 1
  %v2_b110 = load i32, i32* %r3.global-to-local, align 4
  %v3_b110 = add i32 %v2_b110, 1
  %v4_b110 = inttoptr i32 %v3_b110 to i8*
  store i8 %v5_aec0, i8* %v4_b110, align 1
  %v0_b118 = load i32, i32* %r1.global-to-local, align 4
  %v3_b118 = mul i32 %v0_b118, 32
  store i32 %v3_b118, i32* %r0.global-to-local, align 4
  %v2_b11c = load i32, i32* %r3.global-to-local, align 4
  %v3_b11c = add i32 %v2_b11c, 8
  %v4_b11c = inttoptr i32 %v3_b11c to i8*
  store i8 %v1_b11c, i8* %v4_b11c, align 1
  %v0_b120 = load i32, i32* @sb, align 4
  %v1_b120 = load i32, i32* %r3.global-to-local, align 4
  %v2_b120 = add i32 %v1_b120, 12
  %v3_b120 = inttoptr i32 %v2_b120 to i32*
  store i32 %v0_b120, i32* %v3_b120, align 4
  %v0_b124 = load i32, i32* %r0.global-to-local, align 4
  %v1_b124 = load i32, i32* %r1.global-to-local, align 4
  %tmp53 = mul i32 %v1_b124, -8
  %v5_b124 = add i32 %v0_b124, %tmp53
  %v1_b128 = load i32, i32* @r7, align 4
  %v2_b128 = add i32 %v5_b124, %v1_b128
  store i32 %v2_b128, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_b130 = add i32 %v1_b124, 1
  store i32 %v1_b130, i32* @r4, align 4
  %v1_b134 = add i32 %v2_b128, 16
  %v2_b134 = inttoptr i32 %v1_b134 to i32*
  %v3_b134 = load i32, i32* %v2_b134, align 4
  store i32 %v3_b134, i32* %r2.global-to-local, align 4
  store i32 %v4_b138, i32* %r0.global-to-local, align 4
  %v0_b13c = load i32, i32* %r3.global-to-local, align 4
  %v1_b13c = add i32 %v0_b13c, 20
  store i32 %v1_b13c, i32* %r1.global-to-local, align 4
  %v0_b144 = load i32, i32* @r6, align 4
  %v1_b144 = trunc i32 %v0_b144 to i16
  %v3_b144 = add i32 %v0_b13c, 2
  %v4_b144 = inttoptr i32 %v3_b144 to i16*
  store i16 %v1_b144, i16* %v4_b144, align 2
  %v0_b148 = load i32, i32* @r8, align 4
  %v1_b148 = trunc i32 %v0_b148 to i16
  %v2_b148 = load i32, i32* %r3.global-to-local, align 4
  %v3_b148 = add i32 %v2_b148, 4
  %v4_b148 = inttoptr i32 %v3_b148 to i16*
  store i16 %v1_b148, i16* %v4_b148, align 2
  %v0_b14c = load i32, i32* %r2.global-to-local, align 4
  %v1_b14c = load i32, i32* %r3.global-to-local, align 4
  %v2_b14c = add i32 %v1_b14c, 16
  %v3_b14c = inttoptr i32 %v2_b14c to i32*
  store i32 %v0_b14c, i32* %v3_b14c, align 4
  %v0_b150 = load i32, i32* @sl, align 4
  %v1_b150 = trunc i32 %v0_b150 to i16
  %v2_b150 = load i32, i32* %r3.global-to-local, align 4
  %v3_b150 = add i32 %v2_b150, 20
  %v4_b150 = inttoptr i32 %v3_b150 to i16*
  store i16 %v1_b150, i16* %v4_b150, align 2
  %v0_b154 = load i32, i32* @r5, align 4
  %v1_b154 = trunc i32 %v0_b154 to i16
  %v2_b154 = load i32, i32* %r1.global-to-local, align 4
  %v3_b154 = add i32 %v2_b154, 4
  %v4_b154 = inttoptr i32 %v3_b154 to i16*
  store i16 %v1_b154, i16* %v4_b154, align 2
  %v0_b158 = load i32, i32* %r0.global-to-local, align 4
  %v1_b158 = trunc i32 %v0_b158 to i16
  %v2_b158 = load i32, i32* %r1.global-to-local, align 4
  %v3_b158 = add i32 %v2_b158, 2
  %v4_b158 = inttoptr i32 %v3_b158 to i16*
  store i16 %v1_b158, i16* %v4_b158, align 2
  %v0_b15c = load i32, i32* @r4, align 4
  store i32 %v0_b15c, i32* %stack_var_-44, align 4
  %v5_b160 = icmp slt i32 %v1_b130, %arg2
  br i1 %v5_b160, label %dec_label_pc_b0c0, label %dec_label_pc_b164.preheader

dec_label_pc_b164.preheader:                      ; preds = %dec_label_pc_b34c, %dec_label_pc_b0c0, %.dec_label_pc_b164.preheader_crit_edge
  %v1_b184.pre-phi = phi i32 [ %.pre10, %.dec_label_pc_b164.preheader_crit_edge ], [ %v1_b054, %dec_label_pc_b0c0 ], [ %v1_b054, %dec_label_pc_b34c ]
  %v1_b180.pre-phi = phi i32 [ %.pre, %.dec_label_pc_b164.preheader_crit_edge ], [ %v1_b058, %dec_label_pc_b0c0 ], [ %v1_b058, %dec_label_pc_b34c ]
  %v3_b2e4 = icmp eq i32 %v3_b024, 65535
  %v2_b320 = icmp eq i32 %v1_af7c, 0
  br label %dec_label_pc_b164

dec_label_pc_b164:                                ; preds = %dec_label_pc_b164.preheader, %dec_label_pc_b3f8
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b030, label %dec_label_pc_b3f8, label %dec_label_pc_b178

dec_label_pc_b178:                                ; preds = %dec_label_pc_b164
  store i32 %v0_b008, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_b180.pre-phi, i32* @sl, align 4
  store i32 %v1_b184.pre-phi, i32* @r8, align 4
  br label %dec_label_pc_b254

dec_label_pc_b18c:                                ; preds = %dec_label_pc_b254
  %v0_b18c = load i32, i32* @sb, align 4
  %v7_b18c = icmp eq i32 %v0_b18c, -1
  br i1 %v7_b18c, label %dec_label_pc_b2d4, label %dec_label_pc_b194

dec_label_pc_b194:                                ; preds = %dec_label_pc_b278, %dec_label_pc_b18c
  store i32 %v3_b024, i32* @ip, align 4
  store i32 65535, i32* @r4, align 4
  br i1 %v3_b2e4, label %dec_label_pc_b2f0, label %dec_label_pc_b1a8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge, %dec_label_pc_b194
  %v1_b1ac = phi i32 [ %v1_b1ac.pre, %dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge ], [ 65535, %dec_label_pc_b194 ]
  store i32 %v3_b028, i32* %r0.global-to-local, align 4
  %v9_b1ac = icmp eq i32 %v3_b028, %v1_b1ac
  br i1 %v9_b1ac, label %dec_label_pc_b304, label %dec_label_pc_b1b4

dec_label_pc_b1b4:                                ; preds = %dec_label_pc_b2f0, %dec_label_pc_b1a8
  %v1_b1b8 = phi i32 [ %v1_b2fc, %dec_label_pc_b2f0 ], [ %v1_b1ac, %dec_label_pc_b1a8 ]
  store i32 %v3_b02c, i32* %r1.global-to-local, align 4
  %v9_b1b8 = icmp eq i32 %v3_b02c, %v1_b1b8
  br i1 %v9_b1b8, label %dec_label_pc_b318, label %dec_label_pc_b1c0

dec_label_pc_b1c0:                                ; preds = %dec_label_pc_b304, %dec_label_pc_b1b4
  store i32 %v1_af7c, i32* %r2.global-to-local, align 4
  br i1 %v2_b320, label %dec_label_pc_b1cc, label %dec_label_pc_b32c

dec_label_pc_b1cc:                                ; preds = %dec_label_pc_b1c0, %dec_label_pc_b318, %dec_label_pc_b32c
  %v2_b1d0 = load i32, i32* @r5, align 4
  %v3_b1d0 = add i32 %v2_b1d0, 10
  %v4_b1d0 = inttoptr i32 %v3_b1d0 to i16*
  store i16 0, i16* %v4_b1d0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1d8 = load i32, i32* @r5, align 4
  store i32 %v0_b1d8, i32* @r0, align 4
  %v2_b1dc = call i32 @function_bf78(i32 %v0_b1d8, i32 20)
  %v3_b1dc = trunc i32 %v2_b1dc to i16
  store i32 %v2_b1dc, i32* %r0.global-to-local, align 4
  %v3_b1e0 = load i32, i32* @r5, align 4
  %v4_b1e0 = add i32 %v3_b1e0, 10
  %v5_b1e0 = inttoptr i32 %v4_b1e0 to i16*
  store i16 %v3_b1dc, i16* %v5_b1e0, align 2
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_b1e8 = load i32, i32* @r6, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 6
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i16*
  store i16 0, i16* %v4_b1e8, align 2
  %v0_b1ec = load i32, i32* @r6, align 4
  %v1_b1ec = add i32 %v0_b1ec, 4
  %v2_b1ec = inttoptr i32 %v1_b1ec to i16*
  %v3_b1ec = load i16, i16* %v2_b1ec, align 2
  %v4_b1ec = zext i16 %v3_b1ec to i32
  store i32 %v4_b1ec, i32* %r2.global-to-local, align 4
  store i32 %v0_b1ec, i32* @r1, align 4
  %v0_b1f4 = load i32, i32* @sl, align 4
  store i32 %v0_b1f4, i32* %r3.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r5, align 4
  store i32 %v0_b1f8, i32* %r0.global-to-local, align 4
  %v4_b1fc = call i32 @function_bfc8(i32 %v0_b1f8, i32 %v0_b1ec, i32 %v4_b1ec, i32 %v0_b1f4)
  %v5_b1fc = trunc i32 %v4_b1fc to i16
  store i32 %v4_b1fc, i32* %r0.global-to-local, align 4
  %v3_b200 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b200, i32* %r3.global-to-local, align 4
  %v3_b204 = mul i32 %v3_b200, 32
  store i32 %v3_b204, i32* %lr.global-to-local, align 4
  %v3_b208 = load i32, i32* @r6, align 4
  %v4_b208 = add i32 %v3_b208, 6
  %v5_b208 = inttoptr i32 %v4_b208 to i16*
  store i16 %v5_b1fc, i16* %v5_b208, align 2
  %v0_b20c = load i32, i32* %lr.global-to-local, align 4
  %v1_b20c = load i32, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v1_b20c, -8
  %v5_b20c = add i32 %v0_b20c, %tmp54
  store i32 %v5_b20c, i32* %lr.global-to-local, align 4
  %v0_b210 = load i32, i32* @r6, align 4
  %v1_b210 = add i32 %v0_b210, 2
  %v2_b210 = inttoptr i32 %v1_b210 to i16*
  %v3_b210 = load i16, i16* %v2_b210, align 2
  %v1_b214 = load i32, i32* @r7, align 4
  %v2_b214 = add i32 %v1_b214, %v5_b20c
  store i32 %v2_b214, i32* @lr, align 4
  %v3_b218 = add i32 %v2_b214, 2
  %v4_b218 = inttoptr i32 %v3_b218 to i16*
  store i16 %v3_b210, i16* %v4_b218, align 2
  %v0_b21c = load i32, i32* @r8, align 4
  store i32 %v0_b21c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b228 = load i32, i32* @r5, align 4
  store i32 %v0_b228, i32* %r1.global-to-local, align 4
  %v0_b22c = load i32, i32* @fp, align 4
  store i32 %v0_b22c, i32* %r0.global-to-local, align 4
  %v0_b230 = load i32, i32* @lr, align 4
  %v6_b238 = call i32 @function_10dac(i32 %v0_b22c, i32 %v0_b228, i32 %v0_b21c, i32 16384, i32 %v0_b230, i32 16)
  %v3_b23c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b23c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_b244 = add i32 %v3_b23c, 1
  store i32 %v1_b244, i32* %r0.global-to-local, align 4
  store i32 %v1_b244, i32* %stack_var_-44, align 4
  %v6_b250 = icmp slt i32 %v1_b244, %arg2
  br i1 %v6_b250, label %dec_label_pc_b254, label %dec_label_pc_b3f8

dec_label_pc_b254:                                ; preds = %dec_label_pc_b1cc, %dec_label_pc_b178
  %v1_b268 = phi i32 [ %v1_b244, %dec_label_pc_b1cc ], [ 0, %dec_label_pc_b178 ]
  %v5_b258 = mul i32 %v1_b268, 24
  %v1_b260 = load i32, i32* @r7, align 4
  %v2_b260 = add i32 %v1_b260, %v5_b258
  store i32 %v2_b260, i32* @r3, align 4
  %v1_b264 = add i32 %v2_b260, 20
  %v2_b264 = inttoptr i32 %v1_b264 to i8*
  %v3_b264 = load i8, i8* %v2_b264, align 1
  %v4_b264 = zext i8 %v3_b264 to i32
  store i32 %v4_b264, i32* %r2.global-to-local, align 4
  %v4_b268 = mul i32 %v1_b268, 4
  %v5_b268 = add i32 %v4_b268, %v2_ae88
  %v6_b268 = inttoptr i32 %v5_b268 to i32*
  %v7_b268 = load i32, i32* %v6_b268, align 4
  store i32 %v7_b268, i32* @r5, align 4
  %v1_b270 = add i32 %v7_b268, 20
  store i32 %v1_b270, i32* @r6, align 4
  %tmp55 = icmp ugt i8 %v3_b264, 31
  br i1 %tmp55, label %dec_label_pc_b18c, label %dec_label_pc_b278

dec_label_pc_b278:                                ; preds = %dec_label_pc_b254
  %v1_b278 = add i32 %v2_b260, 16
  %v2_b278 = inttoptr i32 %v1_b278 to i32*
  %v3_b278 = load i32, i32* %v2_b278, align 4
  %v0_b27c = call i32 @function_d3a8()
  store i32 %v0_b27c, i32* %r0.global-to-local, align 4
  %v3_b280 = load i32, i32* %stack_var_-44, align 4
  %v5_b288 = mul i32 %v3_b280, 24
  %v1_b28c = and i32 %v3_b278, 16711680
  store i32 %v1_b28c, i32* %ip.global-to-local, align 4
  %v3_b290 = udiv i32 %v3_b278, 16777216
  %v4_b294 = udiv i32 %v1_b28c, 256
  %v5_b294 = or i32 %v4_b294, %v3_b290
  store i32 %v5_b294, i32* %r2.global-to-local, align 4
  %v1_b298 = load i32, i32* @r7, align 4
  %v2_b298 = add i32 %v1_b298, %v5_b288
  store i32 %v2_b298, i32* %r1.global-to-local, align 4
  %v1_b29c = and i32 %v3_b278, 65280
  store i32 %v1_b29c, i32* %r3.global-to-local, align 4
  %v1_b2a0 = add i32 %v2_b298, 20
  %v2_b2a0 = inttoptr i32 %v1_b2a0 to i8*
  %v3_b2a0 = load i8, i8* %v2_b2a0, align 1
  %v4_b2a0 = zext i8 %v3_b2a0 to i32
  store i32 %v4_b2a0, i32* %ip.global-to-local, align 4
  %v5_b2a8 = call i32 @llvm.bswap.i32(i32 %v3_b278)
  %v7_b2ac = lshr i32 %v0_b27c, %v4_b2a0
  %v8_b2ac = add i32 %v7_b2ac, %v5_b2a8
  store i32 %v8_b2ac, i32* %r2.global-to-local, align 4
  %v1_b2b0 = and i32 %v8_b2ac, 16711680
  store i32 %v1_b2b0, i32* %r0.global-to-local, align 4
  %v1_b2bc = and i32 %v8_b2ac, 65280
  store i32 %v1_b2bc, i32* %r1.global-to-local, align 4
  %v5_b2c4 = call i32 @llvm.bswap.i32(i32 %v8_b2ac)
  store i32 %v5_b2c4, i32* @r3, align 4
  %v0_b2c8 = load i32, i32* @sb, align 4
  %v3_b2c8 = icmp eq i32 %v0_b2c8, -1
  %v1_b2cc = load i32, i32* @r5, align 4
  %v2_b2cc = add i32 %v1_b2cc, 16
  %v3_b2cc = inttoptr i32 %v2_b2cc to i32*
  store i32 %v5_b2c4, i32* %v3_b2cc, align 4
  br i1 %v3_b2c8, label %dec_label_pc_b2d4, label %dec_label_pc_b194

dec_label_pc_b2d4:                                ; preds = %dec_label_pc_b278, %dec_label_pc_b18c
  %v0_b2d4 = call i32 @function_d3a8()
  store i32 %v0_b2d4, i32* %r0.global-to-local, align 4
  store i32 %v3_b024, i32* @ip, align 4
  store i32 65535, i32* @r4, align 4
  %v1_b2e8 = load i32, i32* @r5, align 4
  %v2_b2e8 = add i32 %v1_b2e8, 12
  %v3_b2e8 = inttoptr i32 %v2_b2e8 to i32*
  store i32 %v0_b2d4, i32* %v3_b2e8, align 4
  br i1 %v3_b2e4, label %dec_label_pc_b2f0, label %dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge

dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge:    ; preds = %dec_label_pc_b2d4
  %v1_b1ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b1a8

dec_label_pc_b2f0:                                ; preds = %dec_label_pc_b2d4, %dec_label_pc_b194
  %v0_b2f0 = call i32 @function_d3a8()
  %v1_b2f0 = trunc i32 %v0_b2f0 to i16
  %v3_b2f4 = load i32, i32* @r5, align 4
  %v4_b2f4 = add i32 %v3_b2f4, 4
  %v5_b2f4 = inttoptr i32 %v4_b2f4 to i16*
  store i16 %v1_b2f0, i16* %v5_b2f4, align 2
  store i32 %v3_b028, i32* %r0.global-to-local, align 4
  %v1_b2fc = load i32, i32* @r4, align 4
  %v9_b2fc = icmp eq i32 %v3_b028, %v1_b2fc
  br i1 %v9_b2fc, label %dec_label_pc_b304, label %dec_label_pc_b1b4

dec_label_pc_b304:                                ; preds = %dec_label_pc_b2f0, %dec_label_pc_b1a8
  %v0_b304 = call i32 @function_d3a8()
  %v1_b304 = trunc i32 %v0_b304 to i16
  store i32 %v0_b304, i32* %r0.global-to-local, align 4
  store i32 %v3_b02c, i32* %r1.global-to-local, align 4
  %v1_b30c = load i32, i32* @r4, align 4
  %v9_b30c = icmp eq i32 %v3_b02c, %v1_b30c
  %v3_b310 = load i32, i32* @r5, align 4
  %v4_b310 = add i32 %v3_b310, 20
  %v5_b310 = inttoptr i32 %v4_b310 to i16*
  store i16 %v1_b304, i16* %v5_b310, align 2
  br i1 %v9_b30c, label %dec_label_pc_b318, label %dec_label_pc_b1c0

dec_label_pc_b318:                                ; preds = %dec_label_pc_b304, %dec_label_pc_b1b4
  %v0_b318 = call i32 @function_d3a8()
  %v1_b318 = trunc i32 %v0_b318 to i16
  store i32 %v0_b318, i32* %r0.global-to-local, align 4
  store i32 %v1_af7c, i32* %r2.global-to-local, align 4
  %v3_b324 = load i32, i32* @r6, align 4
  %v4_b324 = add i32 %v3_b324, 2
  %v5_b324 = inttoptr i32 %v4_b324 to i16*
  store i16 %v1_b318, i16* %v5_b324, align 2
  br i1 %v2_b320, label %dec_label_pc_b1cc, label %dec_label_pc_b32c

dec_label_pc_b32c:                                ; preds = %dec_label_pc_b1c0, %dec_label_pc_b318
  %v0_b32c = load i32, i32* @r5, align 4
  %v1_b32c = add i32 %v0_b32c, 28
  store i32 %v1_b32c, i32* @r4, align 4
  store i32 %v1_b32c, i32* %r0.global-to-local, align 4
  store i32 %v0_b008, i32* %r1.global-to-local, align 4
  %v2_b338 = call i32 @function_d46c(i32 %v1_b32c, i32 %v0_b008)
  store i32 %v2_b338, i32* %r0.global-to-local, align 4
  store i32 %v0_b008, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b344 = load i32, i32* @r4, align 4
  %v4_b344 = add i32 %v3_b344, %v0_b008
  %v5_b344 = inttoptr i32 %v4_b344 to i8*
  store i8 0, i8* %v5_b344, align 1
  br label %dec_label_pc_b1cc

dec_label_pc_b34c:                                ; preds = %dec_label_pc_b04c, %dec_label_pc_b34c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b358 = call i32 @function_11998(i32 1510, i32 1)
  store i32 %v2_b358, i32* %r0.global-to-local, align 4
  store i32 %v2_ae88, i32* %ip.global-to-local, align 4
  %v3_b360 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b360, i32* %r1.global-to-local, align 4
  %v2_b364 = load i32, i32* @r4, align 4
  %v5_b364 = mul i32 %v2_b364, 4
  %v6_b364 = add i32 %v5_b364, %v2_ae88
  %v7_b364 = inttoptr i32 %v6_b364 to i32*
  store i32 %v2_b358, i32* %v7_b364, align 4
  %v0_b368 = load i32, i32* %ip.global-to-local, align 4
  %v1_b368 = load i32, i32* %r1.global-to-local, align 4
  %v4_b368 = mul i32 %v1_b368, 4
  %v5_b368 = add i32 %v4_b368, %v0_b368
  %v6_b368 = inttoptr i32 %v5_b368 to i32*
  %v7_b368 = load i32, i32* %v6_b368, align 4
  store i32 %v7_b368, i32* %r3.global-to-local, align 4
  %v1_b36c = inttoptr i32 %v7_b368 to i8*
  %v2_b36c = load i8, i8* %v1_b36c, align 1
  %tmp56 = urem i8 %v2_b36c, 16
  %v1_b370 = zext i8 %tmp56 to i32
  %v1_b374 = or i32 %v1_b370, 64
  store i32 %v1_b374, i32* %r2.global-to-local, align 4
  %v1_b378 = trunc i32 %v1_b374 to i8
  store i8 %v1_b378, i8* %v1_b36c, align 1
  %v0_b37c = load i32, i32* %r3.global-to-local, align 4
  %v1_b37c = inttoptr i32 %v0_b37c to i8*
  %v2_b37c = load i8, i8* %v1_b37c, align 1
  %v1_b380 = and i8 %v2_b37c, -16
  %v1_b384 = or i8 %v1_b380, 5
  store i32 17, i32* %ip.global-to-local, align 4
  store i8 %v1_b384, i8* %v1_b37c, align 1
  %v0_b390 = load i32, i32* %ip.global-to-local, align 4
  %v1_b390 = trunc i32 %v0_b390 to i8
  %v2_b390 = load i32, i32* %r3.global-to-local, align 4
  %v3_b390 = add i32 %v2_b390, 9
  %v4_b390 = inttoptr i32 %v3_b390 to i8*
  store i8 %v1_b390, i8* %v4_b390, align 1
  %v2_b398 = load i32, i32* %r3.global-to-local, align 4
  %v3_b398 = add i32 %v2_b398, 1
  %v4_b398 = inttoptr i32 %v3_b398 to i8*
  store i8 %v5_aec0, i8* %v4_b398, align 1
  store i32 %v5_aefc, i32* %ip.global-to-local, align 4
  %v0_b3a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b3a0 = mul i32 %v0_b3a0, 32
  store i32 %v3_b3a0, i32* %r0.global-to-local, align 4
  %v2_b3a4 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3a4 = add i32 %v2_b3a4, 8
  %v4_b3a4 = inttoptr i32 %v3_b3a4 to i8*
  store i8 %v1_b11c, i8* %v4_b3a4, align 1
  %v0_b3a8 = load i32, i32* @sb, align 4
  %v1_b3a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b3a8 = add i32 %v1_b3a8, 12
  %v3_b3a8 = inttoptr i32 %v2_b3a8 to i32*
  store i32 %v0_b3a8, i32* %v3_b3a8, align 4
  %v0_b3ac = load i32, i32* %r0.global-to-local, align 4
  %v1_b3ac = load i32, i32* %r1.global-to-local, align 4
  %tmp57 = mul i32 %v1_b3ac, -8
  %v5_b3ac = add i32 %v0_b3ac, %tmp57
  %v1_b3b0 = load i32, i32* @r7, align 4
  %v2_b3b0 = add i32 %v5_b3ac, %v1_b3b0
  store i32 %v2_b3b0, i32* %r2.global-to-local, align 4
  %v1_b3b4 = add i32 %v2_b3b0, 16
  %v2_b3b4 = inttoptr i32 %v1_b3b4 to i32*
  %v3_b3b4 = load i32, i32* %v2_b3b4, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v1_b3bc = load i32, i32* %r3.global-to-local, align 4
  %v2_b3bc = add i32 %v1_b3bc, 16
  %v3_b3bc = inttoptr i32 %v2_b3bc to i32*
  store i32 %v3_b3b4, i32* %v3_b3bc, align 4
  store i32 64, i32* %r2.global-to-local, align 4
  %v0_b3c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3c4 = add i32 %v0_b3c4, 1
  store i32 %v1_b3c4, i32* @r4, align 4
  %v0_b3c8 = load i32, i32* @r6, align 4
  %v1_b3c8 = trunc i32 %v0_b3c8 to i16
  %v2_b3c8 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 2
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i16*
  store i16 %v1_b3c8, i16* %v4_b3c8, align 2
  %v0_b3cc = load i32, i32* %r3.global-to-local, align 4
  %v1_b3cc = add i32 %v0_b3cc, 20
  store i32 %v1_b3cc, i32* %r1.global-to-local, align 4
  %v0_b3d0 = load i32, i32* @r8, align 4
  %v1_b3d0 = trunc i32 %v0_b3d0 to i16
  %v3_b3d0 = add i32 %v0_b3cc, 4
  %v4_b3d0 = inttoptr i32 %v3_b3d0 to i16*
  store i16 %v1_b3d0, i16* %v4_b3d0, align 2
  %v0_b3d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3d4 = trunc i32 %v0_b3d4 to i16
  %v2_b3d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3d4 = add i32 %v2_b3d4, 6
  %v4_b3d4 = inttoptr i32 %v3_b3d4 to i16*
  store i16 %v1_b3d4, i16* %v4_b3d4, align 2
  %v0_b3d8 = load i32, i32* @sl, align 4
  %v1_b3d8 = trunc i32 %v0_b3d8 to i16
  %v2_b3d8 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3d8 = add i32 %v2_b3d8, 20
  %v4_b3d8 = inttoptr i32 %v3_b3d8 to i16*
  store i16 %v1_b3d8, i16* %v4_b3d8, align 2
  store i32 %v4_b138, i32* %r3.global-to-local, align 4
  %v0_b3e0 = load i32, i32* @r4, align 4
  %v1_b3e0 = load i32, i32* %r0.global-to-local, align 4
  %v0_b3e4 = load i32, i32* @r5, align 4
  %v1_b3e4 = trunc i32 %v0_b3e4 to i16
  %v2_b3e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b3e4 = add i32 %v2_b3e4, 4
  %v4_b3e4 = inttoptr i32 %v3_b3e4 to i16*
  store i16 %v1_b3e4, i16* %v4_b3e4, align 2
  %v0_b3e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3e8 = trunc i32 %v0_b3e8 to i16
  %v2_b3e8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b3e8 = add i32 %v2_b3e8, 2
  %v4_b3e8 = inttoptr i32 %v3_b3e8 to i16*
  store i16 %v1_b3e8, i16* %v4_b3e8, align 2
  %v0_b3ec = load i32, i32* @r4, align 4
  store i32 %v0_b3ec, i32* %stack_var_-44, align 4
  %v5_b3f0 = icmp slt i32 %v0_b3e0, %v1_b3e0
  br i1 %v5_b3f0, label %dec_label_pc_b34c, label %dec_label_pc_b164.preheader

dec_label_pc_b3f8:                                ; preds = %dec_label_pc_b1cc, %dec_label_pc_b164
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b3fc = call i32 @function_102c4(i32* null)
  store i32 %v2_b3fc, i32* %r0.global-to-local, align 4
  store i32 %v2_afa0, i32* %r3.global-to-local, align 4
  %v6_b408 = icmp slt i32 %v2_afa0, %v2_b3fc
  br i1 %v6_b408, label %dec_label_pc_b40c, label %dec_label_pc_b164

dec_label_pc_b40c:                                ; preds = %dec_label_pc_b3f8, %dec_label_pc_ae5c, %dec_label_pc_b418
  %v1_b414 = phi i32 [ %v3_afb4, %dec_label_pc_ae5c ], [ %v1_b41c, %dec_label_pc_b418 ], [ %v2_b3fc, %dec_label_pc_b3f8 ]
  store i32 %v27_ae5c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b414

dec_label_pc_b418:                                ; preds = %dec_label_pc_afc4
  %v0_b418 = load i32, i32* @fp, align 4
  store i32 %v0_b418, i32* %r0.global-to-local, align 4
  %v1_b41c = call i32 @function_10644(i32 %v0_b418)
  store i32 %v1_b41c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b40c

; uselistorder directives
  uselistorder i32 %v1_b41c, { 1, 0 }
  uselistorder i32 %v0_b318, { 1, 0 }
  uselistorder i32 %v0_b304, { 1, 0 }
  uselistorder i32 %v1_b2fc, { 1, 0 }
  uselistorder i32 %v5_b2c4, { 1, 0 }
  uselistorder i32 %v3_b278, { 2, 1, 3, 0 }
  uselistorder i32 %v1_b244, { 1, 2, 0, 3 }
  uselistorder i32 %v5_b20c, { 1, 0 }
  uselistorder i32 %v4_b1fc, { 1, 0 }
  uselistorder i32 %v0_b1ec, { 1, 0, 2 }
  uselistorder i32 %v2_b1dc, { 1, 0 }
  uselistorder i1 %v2_b320, { 1, 0 }
  uselistorder i32 %v1_b124, { 1, 0 }
  uselistorder i32 %v3_b0a0, { 1, 0 }
  uselistorder i32 %v3_b09c, { 1, 0 }
  uselistorder i32 %v3_b098, { 1, 0 }
  uselistorder i32 %v1_b058, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b054, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v3_b028, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_b01c, { 1, 0 }
  uselistorder i32 %v0_b008, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_afb4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_afa0, { 1, 0 }
  uselistorder i32 %v1_af7c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_af3c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_af08, { 2, 1, 0 }
  uselistorder i32 %v5_aefc, { 0, 2, 1 }
  uselistorder i32 %v7_aec4, { 1, 0, 2, 3 }
  uselistorder i32 %v6_aea0, { 1, 2, 0 }
  uselistorder i32 %v2_ae88, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 13, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 8, 3, 4, 5, 6, 7, 10, 9, 12, 11, 14, 15, 13, 17, 16, 19, 18, 20, 22, 21, 29, 23, 24, 25, 26, 27, 28, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32 %arg2, { 2, 5, 4, 6, 0, 3, 1, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_b40c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b34c, { 1, 0 }
  uselistorder label %dec_label_pc_b32c, { 1, 0 }
  uselistorder label %dec_label_pc_b1cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b164, { 1, 0 }
  uselistorder label %dec_label_pc_b0c0, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_b428(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b428:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_b428 = load i32, i32* @r4, align 4
  %v27_b428 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b454 = call i32 @function_11998(i32 %arg2, i32 4)
  %v0_b458 = load i32, i32* @r4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b460 = load i32, i32* @r7, align 4
  store i32 %v0_b460, i32* %r3.global-to-local, align 4
  store i32 %v2_b454, i32* @sb, align 4
  %v0_b468 = load i32, i32* @r5, align 4
  %v5_b46c = inttoptr i32 %v0_b458 to i32*
  %v6_b46c = call i32 @function_8258(i32 %v0_b468, i32* %v5_b46c, i32 2, i32 %v0_b460, i32 ptrtoint (i32* @0 to i32))
  %v1_b478 = urem i32 %v6_b46c, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b47c = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b488 = load i32, i32* @r5, align 4
  %v5_b48c = trunc i32 %v6_b46c to i8
  %v6_b490 = inttoptr i32 %v0_b47c to i32*
  %v7_b490 = call i32 @function_8258(i32 %v0_b488, i32* %v6_b490, i32 3, i32 65535, i32 %v6_b46c)
  %v0_b494 = load i32, i32* @r4, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r5, align 4
  %v5_b4a8 = inttoptr i32 %v0_b494 to i32*
  %v6_b4a8 = call i32 @function_8258(i32 %v0_b4a4, i32* %v5_b4a8, i32 4, i32 64, i32 %v7_b490)
  %v0_b4b0 = load i32, i32* @r4, align 4
  %v1_b4b4 = urem i32 %v6_b4a8, 256
  store i32 %v1_b4b4, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b4bc = load i32, i32* @r7, align 4
  store i32 %v0_b4bc, i32* %r3.global-to-local, align 4
  %v0_b4c0 = load i32, i32* @r5, align 4
  %sext5 = mul i32 %v6_b4a8, 16777216
  %v5_b4c8 = sdiv i32 %sext5, 16777216
  %v6_b4c8 = inttoptr i32 %v0_b4b0 to i32*
  %v7_b4c8 = call i32 @function_8258(i32 %v0_b4c0, i32* %v6_b4c8, i32 5, i32 %v0_b4bc, i32 %v5_b4c8)
  %v1_b4d4 = urem i32 %v7_b4c8, 256
  store i32 %v1_b4d4, i32* %ip.global-to-local, align 4
  %v0_b4d8 = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b4e4 = load i32, i32* @r5, align 4
  %v5_b4ec = inttoptr i32 %v0_b4d8 to i32*
  %v6_b4ec = call i32 @function_8258(i32 %v0_b4e4, i32* %v5_b4ec, i32 6, i32 65535, i32 %v1_b4d4)
  %v0_b4f4 = load i32, i32* @r4, align 4
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b504 = load i32, i32* @r5, align 4
  %v5_b508 = inttoptr i32 %v0_b4f4 to i32*
  %v6_b508 = call i32 @function_8258(i32 %v0_b504, i32* %v5_b508, i32 7, i32 27015, i32 %v6_b4ec)
  store i32 %v6_b508, i32* @r4, align 4
  %v0_b510 = load i32, i32* @r7, align 4
  store i32 %v0_b510, i32* %stack_var_-48, align 4
  %v1_b518 = inttoptr i32 %v0_b510 to i32*
  %v2_b518 = call i32 @function_102c4(i32* %v1_b518)
  %v1_b51c = load i32, i32* @r6, align 4
  %v2_b51c = add i32 %v1_b51c, %v2_b518
  %v1_b528 = call i32 @function_f7dc(i32 10)
  %v3_b534 = call i32 @function_f718(i32 10, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b548 = call i32 @function_10e30(i32 2, i32 3, i32 17)
  %v7_b54c = icmp eq i32 %v3_b548, -1
  store i32 %v3_b548, i32* @sl, align 4
  br i1 %v7_b54c, label %dec_label_pc_b878, label %dec_label_pc_b558

dec_label_pc_b558:                                ; preds = %dec_label_pc_b428
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b560 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b560, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b568 = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b574 = call i32 @function_10dec(i32 %v3_b548, i32 %v0_b568, i32 3, i32 %v6_b560, i32 ptrtoint (i32* @0 to i32))
  %v7_b578 = icmp eq i32 %v5_b574, -1
  br i1 %v7_b578, label %dec_label_pc_b884, label %dec_label_pc_b580

dec_label_pc_b580:                                ; preds = %dec_label_pc_b558
  store i32 %v6_b4ec, i32* %r2.global-to-local, align 4
  %v0_b58c = load i32, i32* @r4, align 4
  %v3_b590 = mul i32 %v6_b4ec, 65536
  store i32 %v3_b590, i32* %ip.global-to-local, align 4
  %v3_b594 = urem i32 %v7_b490, 65536
  store i32 %v3_b594, i32* %r3.global-to-local, align 4
  %v3_b598 = urem i32 %v6_b4ec, 65536
  %v3_b59c = urem i32 %v0_b58c, 65536
  %v0_b5a0 = load i32, i32* @fp, align 4
  %v2_b5a0 = icmp eq i32 %v0_b5a0, 0
  %v0_b5a4 = load i32, i32* @r7, align 4
  store i32 %v0_b5a4, i32* %stack_var_-44, align 4
  br i1 %v2_b5a0, label %dec_label_pc_b6e4.preheader, label %dec_label_pc_b5b8

dec_label_pc_b5b8:                                ; preds = %dec_label_pc_b580
  %tmp38 = mul i32 %v7_b490, 256
  %v3_b5c0 = and i32 %tmp38, 65280
  store i32 %v3_b5c0, i32* %r3.global-to-local, align 4
  %tmp39 = mul i32 %v0_b58c, 256
  %v3_b5c4 = and i32 %tmp39, 65280
  %tmp40 = udiv i32 %v7_b490, 256
  %v4_b5cc = urem i32 %tmp40, 256
  %v5_b5cc = or i32 %v4_b5cc, %tmp38
  %tmp41 = udiv i32 %v0_b58c, 256
  %v4_b5d0 = urem i32 %tmp41, 256
  %v5_b5d0 = or i32 %v4_b5d0, %v3_b5c4
  store i32 %v5_b5d0, i32* @lr, align 4
  %tmp42 = mul i32 %v6_b4ec, 256
  %v3_b5d4 = and i32 %tmp42, 65280
  store i32 %v3_b5d4, i32* %r2.global-to-local, align 4
  %v5_b5d8 = trunc i32 %v5_b5cc to i16
  %tmp43 = udiv i32 %v6_b4ec, 256
  %v4_b5e0 = urem i32 %tmp43, 256
  %v5_b5e0 = or i32 %v4_b5e0, %v3_b5d4
  store i32 %v5_b5e0, i32* @r6, align 4
  store i32 %v0_b5a4, i32* @r4, align 4
  %sext = mul nuw i32 %v5_b5d0, 65536
  %v4_b6b0 = sdiv i32 %sext, 65536
  %v1_b65c = trunc i32 %v5_b4c8 to i8
  br label %dec_label_pc_b5e8

dec_label_pc_b5e8:                                ; preds = %.thread, %dec_label_pc_b5b8
  %v2_b5f0 = call i32 @function_11998(i32 128, i32 1)
  %v3_b5f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b5f4, i32* %r2.global-to-local, align 4
  %v1_b5f8 = load i32, i32* @sb, align 4
  %v2_b5f8 = load i32, i32* @r4, align 4
  %v5_b5f8 = mul i32 %v2_b5f8, 4
  %v6_b5f8 = add i32 %v5_b5f8, %v1_b5f8
  %v7_b5f8 = inttoptr i32 %v6_b5f8 to i32*
  store i32 %v2_b5f0, i32* %v7_b5f8, align 4
  %v0_b5fc = load i32, i32* %r2.global-to-local, align 4
  %v3_b5fc = mul i32 %v0_b5fc, 32
  store i32 %v3_b5fc, i32* %r3.global-to-local, align 4
  %v0_b600 = load i32, i32* @sb, align 4
  %v4_b600 = mul i32 %v0_b5fc, 4
  %v5_b600 = add i32 %v0_b600, %v4_b600
  %v6_b600 = inttoptr i32 %v5_b600 to i32*
  %v7_b600 = load i32, i32* %v6_b600, align 4
  store i32 %v7_b600, i32* @lr, align 4
  %v5_b604 = mul i32 %v0_b5fc, 24
  store i32 %v5_b604, i32* %r3.global-to-local, align 4
  %v1_b608 = load i32, i32* @r8, align 4
  %v2_b608 = add i32 %v1_b608, %v5_b604
  store i32 %v2_b608, i32* @r5, align 4
  %v1_b60c = inttoptr i32 %v7_b600 to i8*
  %v2_b60c = load i8, i8* %v1_b60c, align 1
  %tmp = urem i8 %v2_b60c, 16
  %v1_b610 = zext i8 %tmp to i32
  %v1_b614 = or i32 %v1_b610, 64
  store i32 %v1_b614, i32* %r3.global-to-local, align 4
  %v1_b61c = trunc i32 %v1_b614 to i8
  store i8 %v1_b61c, i8* %v1_b60c, align 1
  %v0_b620 = load i32, i32* @lr, align 4
  %v1_b620 = inttoptr i32 %v0_b620 to i8*
  %v2_b620 = load i8, i8* %v1_b620, align 1
  %v1_b624 = and i8 %v2_b620, -16
  %v1_b628 = or i8 %v1_b624, 5
  store i8 %v1_b628, i8* %v1_b620, align 1
  %v2_b634 = load i32, i32* @lr, align 4
  %v3_b634 = add i32 %v2_b634, 1
  %v4_b634 = inttoptr i32 %v3_b634 to i8*
  store i8 %v5_b48c, i8* %v4_b634, align 1
  %v3_b638 = load i32, i32* %stack_var_-48, align 4
  %v3_b63c = mul i32 %v3_b638, 65536
  %v1_b640 = add i32 %v3_b63c, 2097152
  %v3_b644 = udiv i32 %v1_b640, 256
  %v1_b648 = and i32 %v3_b644, 65280
  %v4_b64c = udiv i32 %v1_b640, 16777216
  %v5_b64c = or i32 %v1_b648, %v4_b64c
  store i32 %v5_b64c, i32* %r3.global-to-local, align 4
  store i32 %v1_b4d4, i32* %r4.global-to-local, align 4
  %v3_b658 = urem i32 %v3_b638, 65536
  store i32 %v3_b658, i32* %r2.global-to-local, align 4
  %v2_b65c = load i32, i32* @lr, align 4
  %v3_b65c = add i32 %v2_b65c, 8
  %v4_b65c = inttoptr i32 %v3_b65c to i8*
  store i8 %v1_b65c, i8* %v4_b65c, align 1
  %v0_b660 = load i32, i32* %r3.global-to-local, align 4
  %v1_b660 = trunc i32 %v0_b660 to i16
  %v2_b660 = load i32, i32* @lr, align 4
  %v3_b660 = add i32 %v2_b660, 2
  %v4_b660 = inttoptr i32 %v3_b660 to i16*
  store i16 %v1_b660, i16* %v4_b660, align 2
  %v0_b664 = load i32, i32* %r2.global-to-local, align 4
  %v1_b664 = mul i32 %v0_b664, 65536
  %v3_b66c = add i32 %v1_b664, 786432
  store i32 %v3_b66c, i32* %r2.global-to-local, align 4
  %v2_b670 = load i32, i32* @lr, align 4
  %v3_b670 = add i32 %v2_b670, 4
  %v4_b670 = inttoptr i32 %v3_b670 to i16*
  store i16 %v5_b5d8, i16* %v4_b670, align 2
  %v0_b674 = load i32, i32* %r2.global-to-local, align 4
  %v3_b674 = udiv i32 %v0_b674, 256
  %v1_b678 = and i32 %v3_b674, 65280
  %v4_b67c = udiv i32 %v0_b674, 16777216
  %v5_b67c = or i32 %v1_b678, %v4_b67c
  store i32 %v5_b67c, i32* %ip.global-to-local, align 4
  %v2_b684 = load i32, i32* @lr, align 4
  %v3_b684 = add i32 %v2_b684, 9
  %v4_b684 = inttoptr i32 %v3_b684 to i8*
  store i8 17, i8* %v4_b684, align 1
  %v0_b688 = load i32, i32* %r4.global-to-local, align 4
  %v2_b688 = icmp eq i32 %v0_b688, 0
  store i32 ptrtoint (i32* @global_var_202dc.42 to i32), i32* %r3.global-to-local, align 4
  br i1 %v2_b688, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b5e8
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_b694 = load i32, i32* @lr, align 4
  %v4_b694 = add i32 %v3_b694, 6
  %v5_b694 = inttoptr i32 %v4_b694 to i16*
  store i16 64, i16* %v5_b694, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b5e8, %bb
  %v2_b698 = load i32, i32* @global_var_202dc.42, align 4
  store i32 %v2_b698, i32* %r2.global-to-local, align 4
  %v1_b69c = load i32, i32* @lr, align 4
  %v2_b69c = add i32 %v1_b69c, 12
  %v3_b69c = inttoptr i32 %v2_b69c to i32*
  store i32 %v2_b698, i32* %v3_b69c, align 4
  %v0_b6a0 = load i32, i32* @r5, align 4
  %v1_b6a0 = add i32 %v0_b6a0, 16
  %v2_b6a0 = inttoptr i32 %v1_b6a0 to i32*
  %v3_b6a0 = load i32, i32* %v2_b6a0, align 4
  store i32 %v3_b6a0, i32* %r3.global-to-local, align 4
  %v0_b6a4 = load i32, i32* @lr, align 4
  %v1_b6a4 = add i32 %v0_b6a4, 20
  store i32 %v1_b6a4, i32* %r4.global-to-local, align 4
  %v0_b6a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6a8 = trunc i32 %v0_b6a8 to i16
  %v3_b6a8 = add i32 %v0_b6a4, 24
  %v4_b6a8 = inttoptr i32 %v3_b6a8 to i16*
  store i16 %v1_b6a8, i16* %v4_b6a8, align 2
  %v0_b6ac = load i32, i32* %r3.global-to-local, align 4
  %v1_b6ac = load i32, i32* @lr, align 4
  %v2_b6ac = add i32 %v1_b6ac, 16
  %v3_b6ac = inttoptr i32 %v2_b6ac to i32*
  store i32 %v0_b6ac, i32* %v3_b6ac, align 4
  store i32 %v4_b6b0, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_b6b8 = load i32, i32* @lr, align 4
  %v2_b6b8 = add i32 %v1_b6b8, 28
  %v3_b6b8 = inttoptr i32 %v2_b6b8 to i32*
  store i32 -1, i32* %v3_b6b8, align 4
  %v0_b6bc = load i32, i32* %ip.global-to-local, align 4
  %v1_b6bc = trunc i32 %v0_b6bc to i16
  %v2_b6bc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6bc = add i32 %v2_b6bc, 2
  %v4_b6bc = inttoptr i32 %v3_b6bc to i16*
  store i16 %v1_b6bc, i16* %v4_b6bc, align 2
  %v0_b6c0 = load i32, i32* @lr, align 4
  %v1_b6c0 = add i32 %v0_b6c0, 32
  %v0_b6c4 = load i32, i32* @r6, align 4
  %v1_b6c4 = trunc i32 %v0_b6c4 to i16
  %v3_b6c4 = add i32 %v0_b6c0, 20
  %v4_b6c4 = inttoptr i32 %v3_b6c4 to i16*
  store i16 %v1_b6c4, i16* %v4_b6c4, align 2
  %v3_b6c8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b6c8, i32* %r2.global-to-local, align 4
  %v3_b6cc = call i32 @function_fca8(i32 %v1_b6c0, i32 %v3_b534, i32 %v3_b6c8)
  %v3_b6d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b6d0, i32* %r3.global-to-local, align 4
  %v1_b6d4 = add i32 %v3_b6d0, 1
  store i32 %v1_b6d4, i32* @r4, align 4
  %v1_b6d8 = load i32, i32* @fp, align 4
  store i32 %v1_b6d4, i32* %stack_var_-44, align 4
  %v5_b6e0 = icmp slt i32 %v1_b6d4, %v1_b6d8
  br i1 %v5_b6e0, label %dec_label_pc_b5e8, label %dec_label_pc_b6e4.preheader

dec_label_pc_b6e4.preheader:                      ; preds = %.thread, %dec_label_pc_b580
  %v0_b6e8.ph = phi i32 [ 0, %dec_label_pc_b580 ], [ %v1_b6d8, %.thread ]
  %v3_b700 = icmp eq i32 %v3_b594, 65535
  br label %dec_label_pc_b6e4

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b6e4.preheader, %dec_label_pc_b864.dec_label_pc_b6e4_crit_edge
  %v0_b6e8 = phi i32 [ %v0_b6e8.pre, %dec_label_pc_b864.dec_label_pc_b6e4_crit_edge ], [ %v0_b6e8.ph, %dec_label_pc_b6e4.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b6e8 = icmp eq i32 %v0_b6e8, 0
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b6e8, label %dec_label_pc_b864, label %dec_label_pc_b6f4

dec_label_pc_b6f4:                                ; preds = %dec_label_pc_b6e4
  br label %dec_label_pc_b7a8

dec_label_pc_b6fc:                                ; preds = %dec_label_pc_b7a8
  br i1 %v3_b700, label %dec_label_pc_b830, label %dec_label_pc_b708

dec_label_pc_b708:                                ; preds = %dec_label_pc_b7d0.dec_label_pc_b708_crit_edge, %dec_label_pc_b6fc
  %v1_b70c = phi i32 [ %v1_b70c.pre, %dec_label_pc_b7d0.dec_label_pc_b708_crit_edge ], [ 65535, %dec_label_pc_b6fc ]
  store i32 %v3_b598, i32* %r2.global-to-local, align 4
  %v9_b70c = icmp eq i32 %v3_b598, %v1_b70c
  br i1 %v9_b70c, label %dec_label_pc_b844, label %dec_label_pc_b714

dec_label_pc_b714:                                ; preds = %dec_label_pc_b830.dec_label_pc_b714_crit_edge, %dec_label_pc_b708
  %v1_b718 = phi i32 [ %v1_b718.pre, %dec_label_pc_b830.dec_label_pc_b714_crit_edge ], [ %v1_b70c, %dec_label_pc_b708 ]
  store i32 %v3_b59c, i32* %r3.global-to-local, align 4
  %v9_b718 = icmp eq i32 %v3_b59c, %v1_b718
  br i1 %v9_b718, label %dec_label_pc_b858, label %dec_label_pc_b720

dec_label_pc_b720:                                ; preds = %dec_label_pc_b844, %dec_label_pc_b714, %dec_label_pc_b858
  store i32 0, i32* @r4, align 4
  %v2_b728 = load i32, i32* @r5, align 4
  %v3_b728 = add i32 %v2_b728, 10
  %v4_b728 = inttoptr i32 %v3_b728 to i16*
  store i16 0, i16* %v4_b728, align 2
  %v0_b72c = load i32, i32* @r5, align 4
  store i32 %v0_b72c, i32* @r0, align 4
  %v2_b730 = call i32 @function_bf78(i32 %v0_b72c, i32 20)
  %v3_b730 = trunc i32 %v2_b730 to i16
  %v3_b734 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b734, i32* %r3.global-to-local, align 4
  %v3_b738 = load i32, i32* @r5, align 4
  %v4_b738 = add i32 %v3_b738, 10
  %v5_b738 = inttoptr i32 %v4_b738 to i16*
  store i16 %v3_b730, i16* %v5_b738, align 2
  %v0_b73c = load i32, i32* @r6, align 4
  store i32 %v0_b73c, i32* @r1, align 4
  %v1_b740 = add i32 %v0_b73c, 4
  %v2_b740 = inttoptr i32 %v1_b740 to i16*
  %v3_b740 = load i16, i16* %v2_b740, align 2
  %v4_b740 = zext i16 %v3_b740 to i32
  store i32 %v4_b740, i32* %r2.global-to-local, align 4
  %v0_b744 = load i32, i32* @r4, align 4
  %v1_b744 = trunc i32 %v0_b744 to i16
  %v3_b744 = add i32 %v0_b73c, 6
  %v4_b744 = inttoptr i32 %v3_b744 to i16*
  store i16 %v1_b744, i16* %v4_b744, align 2
  %v0_b748 = load i32, i32* %r3.global-to-local, align 4
  %v1_b748 = add i32 %v0_b748, 12
  store i32 %v1_b748, i32* %r3.global-to-local, align 4
  %v0_b74c = load i32, i32* @r5, align 4
  %v4_b750 = call i32 @function_bfc8(i32 %v0_b74c, i32 %v0_b73c, i32 %v4_b740, i32 %v1_b748)
  %v5_b750 = trunc i32 %v4_b750 to i16
  %v3_b754 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b754, i32* %r3.global-to-local, align 4
  %v3_b758 = mul i32 %v3_b754, 32
  store i32 %v3_b758, i32* %lr.global-to-local, align 4
  %v3_b75c = load i32, i32* @r6, align 4
  %v4_b75c = add i32 %v3_b75c, 6
  %v5_b75c = inttoptr i32 %v4_b75c to i16*
  store i16 %v5_b750, i16* %v5_b75c, align 2
  %v0_b760 = load i32, i32* %lr.global-to-local, align 4
  %v1_b760 = load i32, i32* %r3.global-to-local, align 4
  %tmp44 = mul i32 %v1_b760, -8
  %v5_b760 = add i32 %v0_b760, %tmp44
  store i32 %v5_b760, i32* %lr.global-to-local, align 4
  %v0_b764 = load i32, i32* @r6, align 4
  %v1_b764 = add i32 %v0_b764, 2
  %v2_b764 = inttoptr i32 %v1_b764 to i16*
  %v3_b764 = load i16, i16* %v2_b764, align 2
  %v3_b768 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b768, i32* %r2.global-to-local, align 4
  %v1_b76c = load i32, i32* @r8, align 4
  %v2_b76c = add i32 %v1_b76c, %v5_b760
  store i32 %v2_b76c, i32* @lr, align 4
  %v3_b770 = add i32 %v2_b76c, 2
  %v4_b770 = inttoptr i32 %v3_b770 to i16*
  store i16 %v3_b764, i16* %v4_b770, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b77c = load i32, i32* @r5, align 4
  %v0_b780 = load i32, i32* %r2.global-to-local, align 4
  %v1_b780 = add i32 %v0_b780, 32
  store i32 %v1_b780, i32* %r2.global-to-local, align 4
  %v0_b784 = load i32, i32* @sl, align 4
  %v0_b788 = load i32, i32* @lr, align 4
  %v6_b790 = call i32 @function_10dac(i32 %v0_b784, i32 %v0_b77c, i32 %v1_b780, i32 16384, i32 %v0_b788, i32 16)
  %v3_b794 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b794, i32* %r3.global-to-local, align 4
  %v1_b798 = add i32 %v3_b794, 1
  %v1_b79c = load i32, i32* @fp, align 4
  store i32 %v1_b798, i32* %stack_var_-44, align 4
  %v6_b7a4 = icmp slt i32 %v1_b798, %v1_b79c
  br i1 %v6_b7a4, label %dec_label_pc_b7a8, label %dec_label_pc_b864

dec_label_pc_b7a8:                                ; preds = %dec_label_pc_b720, %dec_label_pc_b6f4
  %v1_b7b8 = phi i32 [ %v1_b798, %dec_label_pc_b720 ], [ 0, %dec_label_pc_b6f4 ]
  %v5_b7ac = mul i32 %v1_b7b8, 24
  %v1_b7b0 = load i32, i32* @r8, align 4
  %v2_b7b0 = add i32 %v1_b7b0, %v5_b7ac
  store i32 %v2_b7b0, i32* %r3.global-to-local, align 4
  %v1_b7b4 = add i32 %v2_b7b0, 20
  %v2_b7b4 = inttoptr i32 %v1_b7b4 to i8*
  %v3_b7b4 = load i8, i8* %v2_b7b4, align 1
  %v4_b7b4 = zext i8 %v3_b7b4 to i32
  store i32 %v4_b7b4, i32* %r2.global-to-local, align 4
  %v0_b7b8 = load i32, i32* @sb, align 4
  %v4_b7b8 = mul i32 %v1_b7b8, 4
  %v5_b7b8 = add i32 %v0_b7b8, %v4_b7b8
  %v6_b7b8 = inttoptr i32 %v5_b7b8 to i32*
  %v7_b7b8 = load i32, i32* %v6_b7b8, align 4
  store i32 %v7_b7b8, i32* @r5, align 4
  store i32 65535, i32* @r7, align 4
  %v1_b7c8 = add i32 %v7_b7b8, 20
  store i32 %v1_b7c8, i32* @r6, align 4
  %tmp45 = icmp ugt i8 %v3_b7b4, 31
  br i1 %tmp45, label %dec_label_pc_b6fc, label %dec_label_pc_b7d0

dec_label_pc_b7d0:                                ; preds = %dec_label_pc_b7a8
  %v1_b7d0 = add i32 %v2_b7b0, 16
  %v2_b7d0 = inttoptr i32 %v1_b7d0 to i32*
  %v3_b7d0 = load i32, i32* %v2_b7d0, align 4
  store i32 %v3_b7d0, i32* %r4.global-to-local, align 4
  %v0_b7d4 = call i32 @function_d3a8()
  %v3_b7d8 = load i32, i32* %stack_var_-44, align 4
  %v5_b7e0 = mul i32 %v3_b7d8, 24
  %v1_b7e4 = and i32 %v3_b7d0, 16711680
  store i32 %v1_b7e4, i32* %ip.global-to-local, align 4
  %v3_b7e8 = udiv i32 %v3_b7d0, 16777216
  %v4_b7ec = udiv i32 %v1_b7e4, 256
  %v5_b7ec = or i32 %v4_b7ec, %v3_b7e8
  store i32 %v5_b7ec, i32* %r2.global-to-local, align 4
  %v1_b7f0 = load i32, i32* @r8, align 4
  %v2_b7f0 = add i32 %v1_b7f0, %v5_b7e0
  %v1_b7f4 = and i32 %v3_b7d0, 65280
  store i32 %v1_b7f4, i32* %r3.global-to-local, align 4
  %v1_b7f8 = add i32 %v2_b7f0, 20
  %v2_b7f8 = inttoptr i32 %v1_b7f8 to i8*
  %v3_b7f8 = load i8, i8* %v2_b7f8, align 1
  %v4_b7f8 = zext i8 %v3_b7f8 to i32
  store i32 %v4_b7f8, i32* %ip.global-to-local, align 4
  %v5_b800 = call i32 @llvm.bswap.i32(i32 %v3_b7d0)
  %v7_b804 = lshr i32 %v0_b7d4, %v4_b7f8
  %v8_b804 = add i32 %v7_b804, %v5_b800
  store i32 %v8_b804, i32* %r2.global-to-local, align 4
  %v5_b820 = call i32 @llvm.bswap.i32(i32 %v8_b804)
  store i32 %v5_b820, i32* %r3.global-to-local, align 4
  %v1_b824 = load i32, i32* @r7, align 4
  %v9_b824 = icmp eq i32 %v3_b594, %v1_b824
  %v1_b828 = load i32, i32* @r5, align 4
  %v2_b828 = add i32 %v1_b828, 16
  %v3_b828 = inttoptr i32 %v2_b828 to i32*
  store i32 %v5_b820, i32* %v3_b828, align 4
  br i1 %v9_b824, label %dec_label_pc_b830, label %dec_label_pc_b7d0.dec_label_pc_b708_crit_edge

dec_label_pc_b7d0.dec_label_pc_b708_crit_edge:    ; preds = %dec_label_pc_b7d0
  %v1_b70c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b708

dec_label_pc_b830:                                ; preds = %dec_label_pc_b7d0, %dec_label_pc_b6fc
  %v0_b830 = call i32 @function_d3a8()
  %v1_b830 = trunc i32 %v0_b830 to i16
  store i32 %v3_b598, i32* %r2.global-to-local, align 4
  %v1_b838 = load i32, i32* @r7, align 4
  %v9_b838 = icmp eq i32 %v3_b598, %v1_b838
  %v3_b83c = load i32, i32* @r5, align 4
  %v4_b83c = add i32 %v3_b83c, 4
  %v5_b83c = inttoptr i32 %v4_b83c to i16*
  store i16 %v1_b830, i16* %v5_b83c, align 2
  br i1 %v9_b838, label %dec_label_pc_b844, label %dec_label_pc_b830.dec_label_pc_b714_crit_edge

dec_label_pc_b830.dec_label_pc_b714_crit_edge:    ; preds = %dec_label_pc_b830
  %v1_b718.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b714

dec_label_pc_b844:                                ; preds = %dec_label_pc_b830, %dec_label_pc_b708
  %v0_b844 = call i32 @function_d3a8()
  %v1_b844 = trunc i32 %v0_b844 to i16
  store i32 %v3_b59c, i32* %r3.global-to-local, align 4
  %v1_b84c = load i32, i32* @r7, align 4
  %v9_b84c = icmp eq i32 %v3_b59c, %v1_b84c
  %v3_b850 = load i32, i32* @r5, align 4
  %v4_b850 = add i32 %v3_b850, 20
  %v5_b850 = inttoptr i32 %v4_b850 to i16*
  store i16 %v1_b844, i16* %v5_b850, align 2
  br i1 %v9_b84c, label %dec_label_pc_b858, label %dec_label_pc_b720

dec_label_pc_b858:                                ; preds = %dec_label_pc_b844, %dec_label_pc_b714
  %v0_b858 = call i32 @function_d3a8()
  %v1_b858 = trunc i32 %v0_b858 to i16
  %v3_b85c = load i32, i32* @r6, align 4
  %v4_b85c = add i32 %v3_b85c, 2
  %v5_b85c = inttoptr i32 %v4_b85c to i16*
  store i16 %v1_b858, i16* %v5_b85c, align 2
  br label %dec_label_pc_b720

dec_label_pc_b864:                                ; preds = %dec_label_pc_b720, %dec_label_pc_b6e4
  %v2_b868 = call i32 @function_102c4(i32* null)
  store i32 %v2_b51c, i32* %ip.global-to-local, align 4
  %v6_b874 = icmp slt i32 %v2_b51c, %v2_b868
  br i1 %v6_b874, label %dec_label_pc_b878, label %dec_label_pc_b864.dec_label_pc_b6e4_crit_edge

dec_label_pc_b864.dec_label_pc_b6e4_crit_edge:    ; preds = %dec_label_pc_b864
  %v0_b6e8.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b6e4

dec_label_pc_b878:                                ; preds = %dec_label_pc_b864, %dec_label_pc_b428, %dec_label_pc_b884
  %v1_b880 = phi i32 [ %v3_b548, %dec_label_pc_b428 ], [ %v1_b888, %dec_label_pc_b884 ], [ %v2_b868, %dec_label_pc_b864 ]
  store i32 %v3_b428, i32* %r4.global-to-local, align 4
  store i32 %v27_b428, i32* %lr.global-to-local, align 4
  ret i32 %v1_b880

dec_label_pc_b884:                                ; preds = %dec_label_pc_b558
  %v0_b884 = load i32, i32* @sl, align 4
  %v1_b888 = call i32 @function_10644(i32 %v0_b884)
  br label %dec_label_pc_b878

; uselistorder directives
  uselistorder i32 %v5_b820, { 1, 0 }
  uselistorder i32 %v3_b7d0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_b798, { 1, 2, 0 }
  uselistorder i32 %v5_b760, { 1, 0 }
  uselistorder i32 %v0_b73c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b6d4, { 1, 0, 2 }
  uselistorder i32 %v3_b638, { 1, 0 }
  uselistorder i32 %v0_b5fc, { 1, 2, 0 }
  uselistorder i32 %v3_b5d4, { 1, 0 }
  uselistorder i32 %v3_b594, { 0, 2, 1 }
  uselistorder i32 %v0_b58c, { 1, 0, 2 }
  uselistorder i32 %v3_b548, { 1, 2, 3, 0 }
  uselistorder i32 %v2_b51c, { 1, 0 }
  uselistorder i32 %v6_b4ec, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v1_b4d4, { 1, 2, 0 }
  uselistorder i32 %v5_b4c8, { 1, 0 }
  uselistorder i32 %v7_b490, { 1, 0, 2, 3 }
  uselistorder i32 %v6_b46c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r4.global-to-local, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 18, 19, 20, 29, 21, 22, 23, 24, 25, 26, 27, 28, 31, 30, 32, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r2.global-to-local, { 19, 20, 21, 27, 22, 23, 24, 25, 26, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %ip.global-to-local, { 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_b878, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b720, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b6e4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b894(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b894:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v9_b894 = load i32, i32* @r6, align 4
  %v18_b894 = load i32, i32* @sb, align 4
  %v27_b894 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @fp, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b8c4 = call i32 @function_11998(i32 %arg2, i32 4)
  %v0_b8c8 = load i32, i32* @r4, align 4
  store i32 %v0_b8c8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @sl, align 4
  store i32 %v0_b8d4, i32* %r3.global-to-local, align 4
  %v0_b8d8 = load i32, i32* @r5, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v5_b8dc = inttoptr i32 %v0_b8c8 to i32*
  %v6_b8dc = call i32 @function_8258(i32 %v0_b8d8, i32* %v5_b8dc, i32 2, i32 %v0_b8d4, i32 %v2_b8c4)
  %v1_b8e8 = urem i32 %v6_b8dc, 256
  store i32 %v1_b8e8, i32* %ip.global-to-local, align 4
  %v0_b8ec = load i32, i32* @r4, align 4
  store i32 %v0_b8ec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b8f8 = load i32, i32* @r5, align 4
  store i32 %v0_b8f8, i32* %r0.global-to-local, align 4
  %v6_b900 = inttoptr i32 %v0_b8ec to i32*
  %v7_b900 = call i32 @function_8258(i32 %v0_b8f8, i32* %v6_b900, i32 3, i32 65535, i32 %v1_b8e8)
  %v0_b904 = load i32, i32* @r4, align 4
  store i32 %v0_b904, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b914 = load i32, i32* @r5, align 4
  store i32 %v0_b914, i32* %r0.global-to-local, align 4
  %v5_b918 = inttoptr i32 %v0_b904 to i32*
  %v6_b918 = call i32 @function_8258(i32 %v0_b914, i32* %v5_b918, i32 4, i32 64, i32 %v7_b900)
  %v0_b920 = load i32, i32* @r4, align 4
  store i32 %v0_b920, i32* %r1.global-to-local, align 4
  %v1_b924 = urem i32 %v6_b918, 256
  store i32 %v1_b924, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b92c = load i32, i32* @sl, align 4
  store i32 %v0_b92c, i32* %r3.global-to-local, align 4
  %v0_b930 = load i32, i32* @r5, align 4
  store i32 %v0_b930, i32* %r0.global-to-local, align 4
  %sext21 = mul i32 %v6_b918, 16777216
  %v5_b938 = sdiv i32 %sext21, 16777216
  %v6_b938 = inttoptr i32 %v0_b920 to i32*
  %v7_b938 = call i32 @function_8258(i32 %v0_b930, i32* %v6_b938, i32 5, i32 %v0_b92c, i32 %v5_b938)
  %v1_b944 = urem i32 %v7_b938, 256
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  %v0_b948 = load i32, i32* @r4, align 4
  store i32 %v0_b948, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b954 = load i32, i32* @r5, align 4
  store i32 %v0_b954, i32* %r0.global-to-local, align 4
  %v5_b95c = inttoptr i32 %v0_b948 to i32*
  %v6_b95c = call i32 @function_8258(i32 %v0_b954, i32* %v5_b95c, i32 6, i32 65535, i32 %v1_b944)
  %v0_b960 = load i32, i32* @r4, align 4
  store i32 %v0_b960, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @r5, align 4
  store i32 %v0_b970, i32* %r0.global-to-local, align 4
  %v5_b974 = inttoptr i32 %v0_b960 to i32*
  %v6_b974 = call i32 @function_8258(i32 %v0_b970, i32* %v5_b974, i32 7, i32 53, i32 %v6_b95c)
  %v0_b97c = load i32, i32* @r4, align 4
  store i32 %v0_b97c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v0_b98c = load i32, i32* @r5, align 4
  store i32 %v0_b98c, i32* %r0.global-to-local, align 4
  %v5_b990 = inttoptr i32 %v0_b97c to i32*
  %v6_b990 = call i32 @function_8258(i32 %v0_b98c, i32* %v5_b990, i32 9, i32 65535, i32 %v6_b974)
  %v0_b994 = load i32, i32* @r4, align 4
  store i32 %v0_b994, i32* %r1.global-to-local, align 4
  %v0_b99c = load i32, i32* @sl, align 4
  store i32 %v0_b99c, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_b9a4 = load i32, i32* @r5, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v5_b9a8 = inttoptr i32 %v0_b994 to i32*
  %v6_b9a8 = call i32 @function_8258(i32 %v0_b9a4, i32* %v5_b9a8, i32 %v0_b99c, i32 12, i32 %v6_b990)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_b9b0 = load i32, i32* @sl, align 4
  store i32 %v0_b9b0, i32* %r3.global-to-local, align 4
  %v0_b9b4 = load i32, i32* @r4, align 4
  store i32 %v0_b9b4, i32* %r1.global-to-local, align 4
  %v0_b9bc = load i32, i32* @r5, align 4
  store i32 %v0_b9bc, i32* %r0.global-to-local, align 4
  %v5_b9c0 = inttoptr i32 %v0_b9b4 to i32*
  %v6_b9c0 = call i32 @function_8190(i32 %v0_b9bc, i32* %v5_b9c0, i32 8, i32 %v0_b9b0, i32 %v6_b9a8)
  store i32 %v6_b9c0, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_b9cc = call i32 @function_f7dc(i32 11)
  %v0_b9d0 = load i32, i32* @sl, align 4
  store i32 %v0_b9d0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v2_b9d8 = inttoptr i32 %v0_b9d0 to i32*
  %v3_b9d8 = call i32 @function_f718(i32 11, i32* %v2_b9d8)
  store i32 %v3_b9d8, i32* %r0.global-to-local, align 4
  %v0_b9dc = load i32, i32* @sl, align 4
  store i32 %v0_b9dc, i32* %r1.global-to-local, align 4
  %v2_b9e0 = call i32 @function_10250(i32 %v3_b9d8, i32 %v0_b9dc)
  store i32 %v2_b9e0, i32* @r4, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_b9ec = call i32 @function_f73c(i32 11)
  store i32 %v1_b9ec, i32* %r0.global-to-local, align 4
  %v0_b9f0 = load i32, i32* @r4, align 4
  %v1_b9f0 = load i32, i32* @sl, align 4
  %v9_b9f0 = icmp eq i32 %v0_b9f0, %v1_b9f0
  store i1 %v9_b9f0, i1* %cpsr_z.global-to-local, align 1
  %v5_b9f4 = icmp slt i32 %v0_b9f0, %v1_b9f0
  br i1 %v5_b9f4, label %dec_label_pc_bab0, label %dec_label_pc_b9f8

dec_label_pc_b9f8:                                ; preds = %dec_label_pc_b894
  %v2_b9fc = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_b9fc, i32* %sb.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_b9fc, i32* %r1.global-to-local, align 4
  store i32 %v0_b9f0, i32* %r0.global-to-local, align 4
  %v1_ba0c = call i32 @function_103dc(i32 %v0_b9f0)
  store i32 %v1_ba0c, i32* @r6, align 4
  %v0_ba14 = load i32, i32* @r4, align 4
  store i32 %v0_ba14, i32* %r0.global-to-local, align 4
  %v1_ba18 = call i32 @function_10644(i32 %v0_ba14)
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_ba20 = call i32 @function_f7dc(i32 12)
  %v0_ba24 = load i32, i32* @sl, align 4
  store i32 %v0_ba24, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v2_ba2c = inttoptr i32 %v0_ba24 to i32*
  %v3_ba2c = call i32 @function_f718(i32 12, i32* %v2_ba2c)
  %v0_ba30 = load i32, i32* @r6, align 4
  store i32 %v0_ba30, i32* @r1, align 4
  store i32 %v3_ba2c, i32* %r2.global-to-local, align 4
  store i32 %v2_b9fc, i32* %r0.global-to-local, align 4
  %v3_ba3c = bitcast i32* %stack_var_-2124 to i8*
  %v4_ba3c = call i32 @function_ff88(i8* %v3_ba3c, i32 %v0_ba30, i32 %v3_ba2c)
  store i32 %v4_ba3c, i32* @r8, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_ba48 = call i32 @function_f73c(i32 12)
  store i32 %v1_ba48, i32* %r0.global-to-local, align 4
  %v0_ba4c = load i32, i32* @r8, align 4
  %v7_ba4c = icmp eq i32 %v0_ba4c, -1
  store i1 %v7_ba4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba4c, label %dec_label_pc_bab0, label %dec_label_pc_ba54

dec_label_pc_ba54:                                ; preds = %dec_label_pc_b9f8
  %v0_ba54 = load i32, i32* @r6, align 4
  %v9_ba54 = icmp eq i32 %v0_ba54, %v0_ba4c
  store i1 %v9_ba54, i1* %cpsr_z.global-to-local, align 1
  %v7_ba58 = icmp sgt i32 %v0_ba54, %v0_ba4c
  br i1 %v7_ba58, label %dec_label_pc_ba5c, label %dec_label_pc_bab0

dec_label_pc_ba5c:                                ; preds = %dec_label_pc_ba54
  %v0_ba5c = load i32, i32* @sl, align 4
  store i32 %v0_ba5c, i32* %r1.global-to-local, align 4
  %v0_ba60 = load i32, i32* %sb.global-to-local, align 4
  %v2_ba60 = add i32 %v0_ba60, %v0_ba4c
  store i32 %v2_ba60, i32* %ip.global-to-local, align 4
  %v1_ba70 = add i32 %v0_ba54, -1
  br label %dec_label_pc_ba68

dec_label_pc_ba68:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_ba5c
  %v0_baa4 = phi i32 [ %v1_baa4, %dec_label_pc_baa4 ], [ %v0_ba4c, %dec_label_pc_ba5c ]
  %v0_ba8c = phi i32 [ %v0_ba8c27, %dec_label_pc_baa4 ], [ %v0_ba5c, %dec_label_pc_ba5c ]
  %v0_ba6c = phi i32 [ %v0_ba6c23, %dec_label_pc_baa4 ], [ %v0_ba5c, %dec_label_pc_ba5c ]
  %v0_ba74 = phi i32 [ %v1_ba74, %dec_label_pc_baa4 ], [ %v2_ba60, %dec_label_pc_ba5c ]
  %v1_ba68 = inttoptr i32 %v0_ba74 to i8*
  %v2_ba68 = load i8, i8* %v1_ba68, align 1
  %v3_ba68 = zext i8 %v2_ba68 to i32
  store i32 %v3_ba68, i32* %r0.global-to-local, align 4
  %v2_ba6c = icmp eq i32 %v0_ba6c, 0
  store i1 %v2_ba6c, i1* %cpsr_z.global-to-local, align 1
  %v1_ba74 = add i32 %v0_ba74, 1
  store i32 %v1_ba74, i32* %ip.global-to-local, align 4
  %v1_ba78 = add nsw i32 %v3_ba68, -48
  store i32 %v1_ba78, i32* @lr, align 4
  br i1 %v2_ba6c, label %dec_label_pc_ba80, label %dec_label_pc_ba90

dec_label_pc_ba80:                                ; preds = %dec_label_pc_ba68
  %v7_ba80 = icmp eq i8 %v2_ba68, 9
  store i1 %v7_ba80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba80, label %dec_label_pc_baa4, label %bb

bb:                                               ; preds = %dec_label_pc_ba80
  %v8_ba84 = icmp eq i8 %v2_ba68, 32
  store i1 %v8_ba84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ba84, label %dec_label_pc_baa4, label %dec_label_pc_ba8c

dec_label_pc_ba8c:                                ; preds = %bb
  %v1_ba8c = add i32 %v0_ba8c, 1
  store i32 %v1_ba8c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ba90

dec_label_pc_ba90:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_ba8c
  %v0_ba8c28 = phi i32 [ %v0_ba8c, %dec_label_pc_ba68 ], [ %v1_ba8c, %dec_label_pc_ba8c ]
  %v0_ba6c24 = phi i32 [ %v0_ba6c, %dec_label_pc_ba68 ], [ %v1_ba8c, %dec_label_pc_ba8c ]
  %v7_ba90 = icmp eq i8 %v2_ba68, 46
  store i1 %v7_ba90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba90, label %dec_label_pc_ba9c, label %bb113

bb113:                                            ; preds = %dec_label_pc_ba90
  %v3_ba94 = icmp ugt i32 %v1_ba78, 8
  %v8_ba94 = icmp eq i32 %v1_ba78, 9
  store i1 %v8_ba94, i1* %cpsr_z.global-to-local, align 1
  %v2_ba98 = xor i1 %v8_ba94, true
  %v3_ba98 = and i1 %v3_ba94, %v2_ba98
  br i1 %v3_ba98, label %dec_label_pc_bf04, label %dec_label_pc_ba9c

dec_label_pc_ba9c:                                ; preds = %dec_label_pc_ba90, %bb113
  %v9_ba9c = icmp eq i32 %v1_ba70, %v0_baa4
  store i1 %v9_ba9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ba9c, label %dec_label_pc_bf04, label %dec_label_pc_baa4

dec_label_pc_baa4:                                ; preds = %dec_label_pc_ba80, %dec_label_pc_ba9c, %bb
  %v0_ba8c27 = phi i32 [ %v0_ba8c, %dec_label_pc_ba80 ], [ %v0_ba8c28, %dec_label_pc_ba9c ], [ %v0_ba8c, %bb ]
  %v0_ba6c23 = phi i32 [ 0, %dec_label_pc_ba80 ], [ %v0_ba6c24, %dec_label_pc_ba9c ], [ 0, %bb ]
  %v1_baa4 = add i32 %v0_baa4, 1
  %v9_baa8 = icmp eq i32 %v1_baa4, %v0_ba54
  store i1 %v9_baa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_baa8, label %dec_label_pc_bab0, label %dec_label_pc_ba68

dec_label_pc_bab0:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_ba54, %dec_label_pc_b9f8, %dec_label_pc_b894
  %v0_bab0 = call i32 @function_d3a8()
  %v1_bab4 = urem i32 %v0_bab0, 4
  store i32 %v1_bab4, i32* %r0.global-to-local, align 4
  %v2_bab8 = icmp eq i32 %v1_bab4, 3
  store i1 %v2_bab8, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_bab0 to i2
  switch i2 %trunc, label %dec_label_pc_bae48 [
    i2 0, label %dec_label_pc_bf50
    i2 1, label %dec_label_pc_bf64
    i2 -2, label %dec_label_pc_bf40
    i2 -1, label %dec_label_pc_bad4
  ]

dec_label_pc_bad4:                                ; preds = %dec_label_pc_bab0
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bae48:                               ; preds = %dec_label_pc_bab0
  unreachable

dec_label_pc_bae4:                                ; preds = %dec_label_pc_bf64, %dec_label_pc_bf50, %dec_label_pc_bf40, %dec_label_pc_bf04, %dec_label_pc_bad4
  %stack_var_-2184.0 = phi i32 [ 33686020, %dec_label_pc_bad4 ], [ 104859200, %dec_label_pc_bf40 ], [ 707416650, %dec_label_pc_bf64 ], [ 134744072, %dec_label_pc_bf50 ], [ %v1_bf34, %dec_label_pc_bf04 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bae8 = call i32 @function_102c4(i32* null)
  %v0_baec = load i32, i32* @r7, align 4
  %v2_baec = icmp eq i32 %v0_baec, 0
  store i1 %v2_baec, i1* %cpsr_z.global-to-local, align 1
  %v1_baf0 = load i32, i32* @fp, align 4
  %v2_baf0 = add i32 %v1_baf0, %v2_bae8
  store i32 %v2_baf0, i32* %r0.global-to-local, align 4
  br i1 %v2_baec, label %dec_label_pc_bedc, label %dec_label_pc_bafc

dec_label_pc_bafc:                                ; preds = %dec_label_pc_bae4
  store i32 %v0_baec, i32* %r0.global-to-local, align 4
  %v1_bb00 = inttoptr i32 %v0_baec to i8*
  %v2_bb00 = call i32 @function_fc38(i8* %v1_bb00)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bb14 = call i32 @function_10e30(i32 2, i32 3, i32 17)
  store i32 %v3_bb14, i32* %r0.global-to-local, align 4
  %v7_bb18 = icmp eq i32 %v3_bb14, -1
  store i1 %v7_bb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb18, label %dec_label_pc_bedc, label %dec_label_pc_bb24

dec_label_pc_bb24:                                ; preds = %dec_label_pc_bafc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bb2c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bb2c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bb40 = call i32 @function_10dec(i32 %v3_bb14, i32 0, i32 3, i32 %v6_bb2c, i32 4)
  store i32 %v5_bb40, i32* %r0.global-to-local, align 4
  %v7_bb44 = icmp eq i32 %v5_bb40, -1
  store i1 %v7_bb44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb44, label %dec_label_pc_bed4, label %dec_label_pc_bb4c

dec_label_pc_bb4c:                                ; preds = %dec_label_pc_bb24
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v3_bb60 = mul i32 %v7_b900, 65536
  store i32 %v3_bb60, i32* %r6.global-to-local, align 4
  %v3_bb68 = mul i32 %v6_b974, 65536
  store i32 %v3_bb68, i32* %sb.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_bb78 = urem i32 %v7_b900, 65536
  %v3_bb7c = urem i32 %v6_b95c, 65536
  store i32 %v3_bb7c, i32* %r0.global-to-local, align 4
  %v3_bb80 = urem i32 %v6_b974, 65536
  store i32 %v3_bb80, i32* %r1.global-to-local, align 4
  %v3_bb84 = urem i32 %v6_b990, 65536
  store i32 %v3_bb84, i32* %r2.global-to-local, align 4
  %v2_bb88 = icmp eq i32 %arg2, 0
  store i1 %v2_bb88, i1* %cpsr_z.global-to-local, align 1
  %v1_bb8c = urem i32 %v6_b9a8, 256
  store i32 %v1_bb8c, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bb88, label %dec_label_pc_beec.critedge, label %dec_label_pc_bba8

dec_label_pc_bba8:                                ; preds = %dec_label_pc_bb4c
  %v3_bb5c = mul i32 %v6_b990, 65536
  %v2_bbb4 = add i32 %v2_bb00, %v1_bb8c
  %v3_bbb8 = mul i32 %v2_bbb4, 65536
  %v1_bbc4 = add i32 %v3_bbb8, 1769472
  %tmp114 = mul nuw nsw i32 %v3_bb80, 256
  %v3_bbc8 = and i32 %tmp114, 65280
  %v1_bbcc = add i32 %v3_bbb8, 3080192
  %tmp115 = udiv i32 %v6_b974, 256
  %v4_bbdc = urem i32 %tmp115, 256
  %v5_bbdc = or i32 %v3_bbc8, %v4_bbdc
  store i32 %v5_bbdc, i32* @sb, align 4
  store i32 %v3_bb5c, i32* %ip.global-to-local, align 4
  %tmp116 = udiv i32 %v1_bbc4, 256
  %v3_bbe4 = and i32 %tmp116, 65280
  %tmp117 = udiv i32 %v1_bbcc, 256
  %v3_bbe8 = and i32 %tmp117, 65280
  store i32 %v3_bbe8, i32* %r2.global-to-local, align 4
  %tmp118 = mul i32 %v6_b990, 256
  %v3_bbec = and i32 %tmp118, 65280
  %v4_bbf0 = udiv i32 %v1_bbc4, 16777216
  %v5_bbf0 = or i32 %v3_bbe4, %v4_bbf0
  store i32 %v5_bbf0, i32* @fp, align 4
  %tmp119 = mul i32 %v7_b900, 256
  %v3_bbf8 = and i32 %tmp119, 65280
  store i32 %v3_bbf8, i32* %r1.global-to-local, align 4
  %v4_bbfc = udiv i32 %v1_bbcc, 16777216
  %v5_bbfc = or i32 %v3_bbe8, %v4_bbfc
  store i32 %v5_bbfc, i32* %r3.global-to-local, align 4
  %tmp120 = udiv i32 %v6_b990, 256
  %v4_bc00 = urem i32 %tmp120, 256
  %v5_bc00 = or i32 %v4_bc00, %v3_bbec
  store i32 %v5_bc00, i32* @r4, align 4
  store i32 %v2_bb00, i32* @lr, align 4
  %tmp121 = udiv i32 %v7_b900, 256
  %v4_bc08 = urem i32 %tmp121, 256
  %v5_bc08 = or i32 %v4_bc08, %v3_bbf8
  %tmp122 = mul i32 %v6_b95c, 256
  %v3_bc0c = and i32 %tmp122, 65280
  store i32 %v3_bc0c, i32* %r0.global-to-local, align 4
  %tmp123 = udiv i32 %v6_b95c, 256
  %v4_bc1c = urem i32 %tmp123, 256
  %v5_bc1c = or i32 %v4_bc1c, %v3_bc0c
  store i32 %v5_bc1c, i32* @r8, align 4
  store i32 0, i32* @r5, align 4
  %v1_bc24 = add i32 %v2_bb00, 1
  store i32 %v1_bc24, i32* @r6, align 4
  %v1_bc6c = trunc i32 %v6_b8dc to i8
  %sext = mul nuw i32 %v5_bbfc, 65536
  %v4_bc78 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_bc08, 65536
  %v4_bc7c = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_bc00, 65536
  %v4_bcd8 = sdiv i32 %sext7, 65536
  %v2_bcfc = icmp eq i32 %v2_bb00, 0
  %tmp124 = icmp slt i32 %v2_bb00, 1
  %v1_bc84 = trunc i32 %v5_b938 to i8
  br label %dec_label_pc_bc28

dec_label_pc_bc28:                                ; preds = %dec_label_pc_bd48, %dec_label_pc_bba8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_bc30 = call i32 @function_11998(i32 600, i32 1)
  store i32 %v2_bc30, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r1.global-to-local, align 4
  %v3_bc38 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc38, i32* %r3.global-to-local, align 4
  %v2_bc3c = load i32, i32* @r5, align 4
  %v5_bc3c = mul i32 %v2_bc3c, 4
  %v6_bc3c = add i32 %v5_bc3c, %v2_b8c4
  %v7_bc3c = inttoptr i32 %v6_bc3c to i32*
  store i32 %v2_bc30, i32* %v7_bc3c, align 4
  %v0_bc40 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc40 = load i32, i32* %r3.global-to-local, align 4
  %v4_bc40 = mul i32 %v1_bc40, 4
  %v5_bc40 = add i32 %v4_bc40, %v0_bc40
  %v6_bc40 = inttoptr i32 %v5_bc40 to i32*
  %v7_bc40 = load i32, i32* %v6_bc40, align 4
  store i32 %v7_bc40, i32* %r1.global-to-local, align 4
  %v1_bc44 = inttoptr i32 %v7_bc40 to i8*
  %v2_bc44 = load i8, i8* %v1_bc44, align 1
  %tmp = urem i8 %v2_bc44, 16
  %v1_bc48 = zext i8 %tmp to i32
  %v1_bc4c = or i32 %v1_bc48, 64
  store i32 %v1_bc4c, i32* %r2.global-to-local, align 4
  %v1_bc50 = trunc i32 %v1_bc4c to i8
  store i8 %v1_bc50, i8* %v1_bc44, align 1
  %v0_bc54 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc54 = inttoptr i32 %v0_bc54 to i8*
  %v2_bc54 = load i8, i8* %v1_bc54, align 1
  %v1_bc58 = and i8 %v2_bc54, -16
  %v1_bc5c = or i8 %v1_bc58, 5
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  store i8 %v1_bc5c, i8* %v1_bc54, align 1
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  %v2_bc6c = load i32, i32* %r1.global-to-local, align 4
  %v3_bc6c = add i32 %v2_bc6c, 1
  %v4_bc6c = inttoptr i32 %v3_bc6c to i8*
  store i8 %v1_bc6c, i8* %v4_bc6c, align 1
  store i32 %v5_b938, i32* %r3.global-to-local, align 4
  %v0_bc74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc74 = icmp eq i32 %v0_bc74, 0
  store i1 %v2_bc74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_bc78, i32* %r0.global-to-local, align 4
  store i32 %v4_bc7c, i32* %r2.global-to-local, align 4
  br i1 %v2_bc74, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_bc28
  store i32 64, i32* %lr.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_bc28, %bb125
  %v2_bc84 = load i32, i32* %r1.global-to-local, align 4
  %v3_bc84 = add i32 %v2_bc84, 8
  %v4_bc84 = inttoptr i32 %v3_bc84 to i8*
  store i8 %v1_bc84, i8* %v4_bc84, align 1
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bc8c = load i32, i32* %r1.global-to-local, align 4
  %v3_bc8c = add i32 %v2_bc8c, 9
  %v4_bc8c = inttoptr i32 %v3_bc8c to i8*
  store i8 17, i8* %v4_bc8c, align 1
  %v0_bc90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc90, label %bb128, label %bb127

bb127:                                            ; preds = %bb126
  %v1_bc90 = load i32, i32* %lr.global-to-local, align 4
  %v2_bc90 = trunc i32 %v1_bc90 to i16
  %v3_bc90 = load i32, i32* %r1.global-to-local, align 4
  %v4_bc90 = add i32 %v3_bc90, 6
  %v5_bc90 = inttoptr i32 %v4_bc90 to i16*
  store i16 %v2_bc90, i16* %v5_bc90, align 2
  br label %bb128

bb128:                                            ; preds = %bb126, %bb127
  store i32 ptrtoint (i32* @global_var_202dc.42 to i32), i32* @lr, align 4
  %v0_bc98 = load i32, i32* %r0.global-to-local, align 4
  %v1_bc98 = trunc i32 %v0_bc98 to i16
  %v2_bc98 = load i32, i32* %r1.global-to-local, align 4
  %v3_bc98 = add i32 %v2_bc98, 2
  %v4_bc98 = inttoptr i32 %v3_bc98 to i16*
  store i16 %v1_bc98, i16* %v4_bc98, align 2
  %v0_bc9c = load i32, i32* %r2.global-to-local, align 4
  %v1_bc9c = trunc i32 %v0_bc9c to i16
  %v2_bc9c = load i32, i32* %r1.global-to-local, align 4
  %v3_bc9c = add i32 %v2_bc9c, 4
  %v4_bc9c = inttoptr i32 %v3_bc9c to i16*
  store i16 %v1_bc9c, i16* %v4_bc9c, align 2
  %v2_bca0 = load i32, i32* @global_var_202dc.42, align 4
  store i32 %v2_bca0, i32* %r3.global-to-local, align 4
  %v0_bca4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bca4 = add i32 %v0_bca4, 20
  store i32 %v1_bca4, i32* %r0.global-to-local, align 4
  %v1_bca8 = add i32 %v0_bca4, 41
  store i32 %v1_bca8, i32* %r2.global-to-local, align 4
  %v0_bcac = load i32, i32* @fp, align 4
  %v1_bcac = trunc i32 %v0_bcac to i16
  %v3_bcac = add i32 %v0_bca4, 24
  %v4_bcac = inttoptr i32 %v3_bcac to i16*
  store i16 %v1_bcac, i16* %v4_bcac, align 2
  %v0_bcb0 = load i32, i32* @sb, align 4
  %v1_bcb0 = trunc i32 %v0_bcb0 to i16
  %v2_bcb0 = load i32, i32* %r0.global-to-local, align 4
  %v3_bcb0 = add i32 %v2_bcb0, 2
  %v4_bcb0 = inttoptr i32 %v3_bcb0 to i16*
  store i16 %v1_bcb0, i16* %v4_bcb0, align 2
  %v0_bcb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bcb4 = add i32 %v0_bcb4, 28
  store i32 %v1_bcb4, i32* %ip.global-to-local, align 4
  %v0_bcb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcb8 = load i32, i32* @sl, align 4
  %v2_bcb8 = add i32 %v1_bcb8, %v0_bcb8
  store i32 %v2_bcb8, i32* @r4, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_bcc4 = load i32, i32* @r8, align 4
  %v1_bcc4 = trunc i32 %v0_bcc4 to i16
  %v3_bcc4 = add i32 %v0_bcb4, 20
  %v4_bcc4 = inttoptr i32 %v3_bcc4 to i16*
  store i16 %v1_bcc4, i16* %v4_bcc4, align 2
  %v0_bcc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_bcc8 = add i32 %v1_bcc8, 12
  %v3_bcc8 = inttoptr i32 %v2_bcc8 to i32*
  store i32 %v0_bcc8, i32* %v3_bcc8, align 4
  %v0_bccc = load i32, i32* %r0.global-to-local, align 4
  %v1_bccc = trunc i32 %v0_bccc to i16
  %v2_bccc = load i32, i32* %ip.global-to-local, align 4
  %v3_bccc = add i32 %v2_bccc, 4
  %v4_bccc = inttoptr i32 %v3_bccc to i16*
  store i16 %v1_bccc, i16* %v4_bccc, align 2
  %v0_bcd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcd0 = trunc i32 %v0_bcd0 to i16
  %v2_bcd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bcd0 = add i32 %v2_bcd0, 2
  %v4_bcd0 = inttoptr i32 %v3_bcd0 to i16*
  store i16 %v1_bcd0, i16* %v4_bcd0, align 2
  store i32 %stack_var_-2184.0, i32* %r3.global-to-local, align 4
  store i32 %v4_bcd8, i32* %ip.global-to-local, align 4
  %v1_bcdc = load i32, i32* %r1.global-to-local, align 4
  %v2_bcdc = add i32 %v1_bcdc, 16
  %v3_bcdc = inttoptr i32 %v2_bcdc to i32*
  store i32 %stack_var_-2184.0, i32* %v3_bcdc, align 4
  %v0_bce0 = load i32, i32* %ip.global-to-local, align 4
  %v1_bce0 = trunc i32 %v0_bce0 to i16
  %v2_bce0 = load i32, i32* %r1.global-to-local, align 4
  %v3_bce0 = add i32 %v2_bce0, 28
  %v4_bce0 = inttoptr i32 %v3_bce0 to i16*
  store i16 %v1_bce0, i16* %v4_bce0, align 2
  %v0_bce4 = load i32, i32* @sl, align 4
  %v1_bce4 = trunc i32 %v0_bce4 to i8
  %v2_bce4 = load i32, i32* %r1.global-to-local, align 4
  %v3_bce4 = add i32 %v2_bce4, 40
  %v4_bce4 = inttoptr i32 %v3_bce4 to i8*
  store i8 %v1_bce4, i8* %v4_bce4, align 1
  %v0_bce8 = load i32, i32* @r4, align 4
  %v1_bce8 = add i32 %v0_bce8, 1
  store i32 %v1_bce8, i32* %r0.global-to-local, align 4
  %v0_bcec = load i32, i32* @r7, align 4
  store i32 %v0_bcec, i32* %r1.global-to-local, align 4
  %v0_bcf0 = load i32, i32* @r6, align 4
  store i32 %v0_bcf0, i32* %r2.global-to-local, align 4
  %v3_bcf4 = call i32 @function_fca8(i32 %v1_bce8, i32 %v0_bcec, i32 %v0_bcf0)
  store i32 %v3_bcf4, i32* %r0.global-to-local, align 4
  store i32 %v2_bb00, i32* %lr.global-to-local, align 4
  store i1 %v2_bcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp124, label %.dec_label_pc_bd48_crit_edge, label %dec_label_pc_bd0c

.dec_label_pc_bd48_crit_edge:                     ; preds = %bb128
  %v5_bd00 = load i32, i32* @r4, align 4
  store i32 %v5_bd00, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bd48

dec_label_pc_bd0c:                                ; preds = %bb128
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_bd10 = load i32, i32* @r4, align 4
  store i32 %v0_bd10, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bd18

dec_label_pc_bd18:                                ; preds = %.thread19, %dec_label_pc_bd0c
  %v1_bd20 = phi i32 [ %v1_bd2035, %.thread19 ], [ 0, %dec_label_pc_bd0c ]
  %v0_bd3417 = phi i32 [ %v0_bd40, %.thread19 ], [ 0, %dec_label_pc_bd0c ]
  %v1_bd18 = load i32, i32* @r7, align 4
  %v2_bd18 = add i32 %v1_bd18, %v0_bd3417
  %v3_bd18 = inttoptr i32 %v2_bd18 to i8*
  %v4_bd18 = load i8, i8* %v3_bd18, align 1
  %v6_bd18 = zext i8 %v4_bd18 to i32
  store i32 %v6_bd18, i32* %r3.global-to-local, align 4
  %v7_bd1c = icmp eq i8 %v4_bd18, 46
  store i1 %v7_bd1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bd1c, label %bb129, label %bb131

bb129:                                            ; preds = %dec_label_pc_bd18
  %v2_bd20 = trunc i32 %v1_bd20 to i8
  %v3_bd20 = load i32, i32* %r0.global-to-local, align 4
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v2_bd20, i8* %v4_bd20, align 1
  %v0_bd28.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_bd24 = load i32, i32* %ip.global-to-local, align 4
  %v1_bd24 = add i32 %v0_bd24, 1
  store i32 %v1_bd24, i32* %r2.global-to-local, align 4
  br i1 %v0_bd28.pr, label %bb132, label %bb130

bb130:                                            ; preds = %bb129
  %v2_bd2815 = urem i32 %v1_bd24, 256
  store i32 %v2_bd2815, i32* %ip.global-to-local, align 4
  store i32 %v2_bb00, i32* %r2.global-to-local, align 4
  %v0_bd34.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_bd34 = add i32 %v0_bd34.pre, 1
  store i32 %v1_bd34, i32* %r1.global-to-local, align 4
  br label %.thread19

bb131:                                            ; preds = %dec_label_pc_bd18
  %v1_bd2411 = add nsw i32 %v1_bd20, 1
  %v2_bd28 = urem i32 %v1_bd2411, 256
  store i32 %v2_bd28, i32* %ip.global-to-local, align 4
  store i32 %v2_bb00, i32* %r2.global-to-local, align 4
  %v1_bd3418 = add i32 %v0_bd3417, 1
  store i32 %v1_bd3418, i32* %r1.global-to-local, align 4
  br label %.thread19

bb132:                                            ; preds = %bb129
  store i32 %v2_bb00, i32* %r2.global-to-local, align 4
  %v1_bd30.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_bd30 = load i32, i32* @r4, align 4
  %v3_bd30 = add i32 %v2_bd30, %v1_bd30.pre
  store i32 %v3_bd30, i32* %r3.global-to-local, align 4
  %v1_bd3465 = add i32 %v1_bd30.pre, 1
  store i32 %v1_bd3465, i32* %r1.global-to-local, align 4
  %v2_bd38 = add i32 %v3_bd30, 1
  store i32 %v2_bd38, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %.thread19

.thread19:                                        ; preds = %bb131, %bb130, %bb132
  %v0_bd40 = phi i32 [ %v1_bd34, %bb130 ], [ %v1_bd3418, %bb131 ], [ %v1_bd3465, %bb132 ]
  %v1_bd2035 = phi i32 [ %v2_bd2815, %bb130 ], [ %v2_bd28, %bb131 ], [ 0, %bb132 ]
  %v9_bd40 = icmp eq i32 %v0_bd40, %v2_bb00
  store i1 %v9_bd40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd40, label %dec_label_pc_bd48.loopexit, label %dec_label_pc_bd18

dec_label_pc_bd48.loopexit:                       ; preds = %.thread19
  %v2_bd48.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_bd2035 to i8
  br label %dec_label_pc_bd48

dec_label_pc_bd48:                                ; preds = %.dec_label_pc_bd48_crit_edge, %dec_label_pc_bd48.loopexit
  %v0_bd48.pre.sink.off0 = phi i8 [ 0, %.dec_label_pc_bd48_crit_edge ], [ %extract.t71, %dec_label_pc_bd48.loopexit ]
  %v2_bd48 = phi i32 [ %v5_bd00, %.dec_label_pc_bd48_crit_edge ], [ %v2_bd48.pre, %dec_label_pc_bd48.loopexit ]
  %v3_bd48 = inttoptr i32 %v2_bd48 to i8*
  store i8 %v0_bd48.pre.sink.off0, i8* %v3_bd48, align 1
  %v3_bd4c = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_bd54 = add i32 %v3_bd4c, 1
  store i32 %v1_bd54, i32* @r5, align 4
  store i32 %v2_bb00, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_bd60 = load i32, i32* @r4, align 4
  %v2_bd60 = add i32 %v0_bd60, %v2_bb00
  store i32 %v2_bd60, i32* %r2.global-to-local, align 4
  %v9_bd64 = icmp eq i32 %v1_bd54, %arg2
  store i1 %v9_bd64, i1* %cpsr_z.global-to-local, align 1
  %v3_bd68 = add i32 %v2_bd60, 4
  %v4_bd68 = inttoptr i32 %v3_bd68 to i16*
  store i16 256, i16* %v4_bd68, align 2
  %v0_bd6c = load i32, i32* @lr, align 4
  %v1_bd6c = trunc i32 %v0_bd6c to i16
  %v2_bd6c = load i32, i32* %r2.global-to-local, align 4
  %v3_bd6c = add i32 %v2_bd6c, 2
  %v4_bd6c = inttoptr i32 %v3_bd6c to i16*
  store i16 %v1_bd6c, i16* %v4_bd6c, align 2
  %v0_bd70 = load i32, i32* @r5, align 4
  store i32 %v0_bd70, i32* %stack_var_-44, align 4
  %v8_bd74 = icmp slt i32 %v1_bd54, %arg2
  br i1 %v8_bd74, label %dec_label_pc_bc28, label %dec_label_pc_bd78

dec_label_pc_bd78:                                ; preds = %dec_label_pc_bd48, %dec_label_pc_beec
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 %v2_bb88, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bb88, label %dec_label_pc_beec, label %dec_label_pc_bd8c

dec_label_pc_bd8c:                                ; preds = %dec_label_pc_bd78
  store i32 %v2_bb00, i32* %r1.global-to-local, align 4
  %v1_bd90 = load i32, i32* @sl, align 4
  %v2_bd90 = add i32 %v1_bd90, %v2_bb00
  store i32 %v2_bd90, i32* %r3.global-to-local, align 4
  %v1_bd94 = add i32 %v2_bd90, 47
  store i32 %v1_bd94, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_bd9c = add i32 %v2_bd90, 27
  store i32 %v1_bd9c, i32* @sb, align 4
  %v3_be78 = icmp eq i32 %v3_bb78, 65535
  %v3_bda8 = icmp eq i32 %v3_bb7c, 65535
  br label %dec_label_pc_be64

dec_label_pc_bda4:                                ; preds = %dec_label_pc_be64
  store i32 %v3_bb7c, i32* @ip, align 4
  store i1 %v3_bda8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bda8, label %dec_label_pc_bea0, label %dec_label_pc_bdb0

dec_label_pc_bdb0:                                ; preds = %dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge, %dec_label_pc_bda4
  %v1_bdb4 = phi i32 [ %v1_bdb4.pre, %dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge ], [ 65535, %dec_label_pc_bda4 ]
  store i32 %v3_bb80, i32* @lr, align 4
  %v9_bdb4 = icmp eq i32 %v3_bb80, %v1_bdb4
  store i1 %v9_bdb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bdb4, label %dec_label_pc_beb4, label %dec_label_pc_bdbc

dec_label_pc_bdbc:                                ; preds = %dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge, %dec_label_pc_bdb0
  %v1_bdc0 = phi i32 [ %v1_bdc0.pre, %dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge ], [ %v1_bdb4, %dec_label_pc_bdb0 ]
  store i32 %v3_bb84, i32* %r0.global-to-local, align 4
  %v9_bdc0 = icmp eq i32 %v3_bb84, %v1_bdc0
  store i1 %v9_bdc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bdc0, label %dec_label_pc_bec8, label %dec_label_pc_bdc8

dec_label_pc_bdc8:                                ; preds = %dec_label_pc_beb4, %dec_label_pc_bdbc, %dec_label_pc_bec8
  %v0_bdc8 = load i32, i32* @r7, align 4
  store i32 %v0_bdc8, i32* %r0.global-to-local, align 4
  %v0_bdcc = load i32, i32* @sl, align 4
  store i32 %v0_bdcc, i32* %r1.global-to-local, align 4
  %v2_bdd0 = call i32 @function_d46c(i32 %v0_bdc8, i32 %v0_bdcc)
  %v0_bdd4 = load i32, i32* @r8, align 4
  %v1_bdd4 = trunc i32 %v0_bdd4 to i8
  %v2_bdd4 = load i32, i32* @r7, align 4
  %v3_bdd4 = load i32, i32* @sl, align 4
  %v4_bdd4 = add i32 %v3_bdd4, %v2_bdd4
  %v5_bdd4 = inttoptr i32 %v4_bdd4 to i8*
  store i8 %v1_bdd4, i8* %v5_bdd4, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bddc = load i32, i32* @r8, align 4
  %v1_bddc = trunc i32 %v0_bddc to i16
  %v2_bddc = load i32, i32* @r4, align 4
  %v3_bddc = add i32 %v2_bddc, 10
  %v4_bddc = inttoptr i32 %v3_bddc to i16*
  store i16 %v1_bddc, i16* %v4_bddc, align 2
  %v0_bde0 = load i32, i32* @r4, align 4
  store i32 %v0_bde0, i32* @r0, align 4
  %v2_bde4 = call i32 @function_bf78(i32 %v0_bde0, i32 20)
  %v3_bde4 = trunc i32 %v2_bde4 to i16
  store i32 %v2_bde4, i32* %r0.global-to-local, align 4
  %v3_bde8 = load i32, i32* @r4, align 4
  %v4_bde8 = add i32 %v3_bde8, 10
  %v5_bde8 = inttoptr i32 %v4_bde8 to i16*
  store i16 %v3_bde4, i16* %v5_bde8, align 2
  %v0_bdec = load i32, i32* @r6, align 4
  store i32 %v0_bdec, i32* @r1, align 4
  %v1_bdf0 = add i32 %v0_bdec, 4
  %v2_bdf0 = inttoptr i32 %v1_bdf0 to i16*
  %v3_bdf0 = load i16, i16* %v2_bdf0, align 2
  %v4_bdf0 = zext i16 %v3_bdf0 to i32
  store i32 %v4_bdf0, i32* %r2.global-to-local, align 4
  %v0_bdf4 = load i32, i32* @r8, align 4
  %v1_bdf4 = trunc i32 %v0_bdf4 to i16
  %v3_bdf4 = add i32 %v0_bdec, 6
  %v4_bdf4 = inttoptr i32 %v3_bdf4 to i16*
  store i16 %v1_bdf4, i16* %v4_bdf4, align 2
  %v0_bdf8 = load i32, i32* @sb, align 4
  store i32 %v0_bdf8, i32* %r3.global-to-local, align 4
  %v0_bdfc = load i32, i32* @r4, align 4
  store i32 %v0_bdfc, i32* %r0.global-to-local, align 4
  %v4_be00 = call i32 @function_bfc8(i32 %v0_bdfc, i32 %v0_bdec, i32 %v4_bdf0, i32 %v0_bdf8)
  %v5_be00 = trunc i32 %v4_be00 to i16
  store i32 %v4_be00, i32* %r0.global-to-local, align 4
  %v3_be04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_be04, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v3_be0c = mul i32 %v3_be04, 32
  store i32 %v3_be0c, i32* %ip.global-to-local, align 4
  %v3_be10 = load i32, i32* @r6, align 4
  %v4_be10 = add i32 %v3_be10, 6
  %v5_be10 = inttoptr i32 %v4_be10 to i16*
  store i16 %v5_be00, i16* %v5_be10, align 2
  store i32 %stack_var_-2184.0, i32* %r2.global-to-local, align 4
  %v0_be18 = load i32, i32* @r6, align 4
  %v1_be18 = add i32 %v0_be18, 2
  %v2_be18 = inttoptr i32 %v1_be18 to i16*
  %v3_be18 = load i16, i16* %v2_be18, align 2
  %v4_be18 = zext i16 %v3_be18 to i32
  store i32 %v4_be18, i32* %r6.global-to-local, align 4
  %v0_be1c = load i32, i32* %ip.global-to-local, align 4
  %v1_be1c = load i32, i32* %r3.global-to-local, align 4
  %tmp135 = mul i32 %v1_be1c, -8
  %v5_be1c = add i32 %v0_be1c, %tmp135
  %v1_be20 = load i32, i32* %r1.global-to-local, align 4
  %v2_be20 = add i32 %v1_be20, %v5_be1c
  store i32 %v2_be20, i32* %ip.global-to-local, align 4
  %v2_be24 = add i32 %v2_be20, 4
  %v3_be24 = inttoptr i32 %v2_be24 to i32*
  store i32 %stack_var_-2184.0, i32* %v3_be24, align 4
  %v0_be28 = load i32, i32* %r6.global-to-local, align 4
  %v1_be28 = trunc i32 %v0_be28 to i16
  %v2_be28 = load i32, i32* %ip.global-to-local, align 4
  %v3_be28 = add i32 %v2_be28, 2
  %v4_be28 = inttoptr i32 %v3_be28 to i16*
  store i16 %v1_be28, i16* %v4_be28, align 2
  %v0_be2c = load i32, i32* @r4, align 4
  store i32 %v0_be2c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bb14, i32* %r0.global-to-local, align 4
  %v0_be38 = load i32, i32* @fp, align 4
  store i32 %v0_be38, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_be40 = load i32, i32* %ip.global-to-local, align 4
  %v6_be48 = call i32 @function_10dac(i32 %v3_bb14, i32 %v0_be2c, i32 %v0_be38, i32 16384, i32 %v0_be40, i32 16)
  %v3_be4c = load i32, i32* %stack_var_-44, align 4
  %v1_be50 = add i32 %v3_be4c, 1
  store i32 %v1_be50, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_be58 = icmp eq i32 %v1_be50, %arg2
  store i1 %v9_be58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_be50, i32* %stack_var_-44, align 4
  %v7_be60 = icmp slt i32 %v1_be50, %arg2
  br i1 %v7_be60, label %dec_label_pc_be64, label %dec_label_pc_beec

dec_label_pc_be64:                                ; preds = %dec_label_pc_bdc8, %dec_label_pc_bd8c
  %v1_be70 = phi i32 [ %v1_be50, %dec_label_pc_bdc8 ], [ 0, %dec_label_pc_bd8c ]
  store i32 %v2_b8c4, i32* %r2.global-to-local, align 4
  store i32 %v3_bb78, i32* @r3, align 4
  %v4_be70 = mul i32 %v1_be70, 4
  %v5_be70 = add i32 %v4_be70, %v2_b8c4
  %v6_be70 = inttoptr i32 %v5_be70 to i32*
  %v7_be70 = load i32, i32* %v6_be70, align 4
  store i32 %v7_be70, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_be78, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* @r8, align 4
  %v1_be80 = add i32 %v7_be70, 20
  store i32 %v1_be80, i32* @r6, align 4
  %v1_be84 = add i32 %v7_be70, 41
  store i32 %v1_be84, i32* @r7, align 4
  br i1 %v3_be78, label %dec_label_pc_be8c, label %dec_label_pc_bda4

dec_label_pc_be8c:                                ; preds = %dec_label_pc_be64
  %v0_be8c = call i32 @function_d3a8()
  %v1_be8c = trunc i32 %v0_be8c to i16
  store i32 %v0_be8c, i32* %r0.global-to-local, align 4
  store i32 %v3_bb7c, i32* @ip, align 4
  %v1_be94 = load i32, i32* @r5, align 4
  %v9_be94 = icmp eq i32 %v3_bb7c, %v1_be94
  store i1 %v9_be94, i1* %cpsr_z.global-to-local, align 1
  %v3_be98 = load i32, i32* @r4, align 4
  %v4_be98 = add i32 %v3_be98, 4
  %v5_be98 = inttoptr i32 %v4_be98 to i16*
  store i16 %v1_be8c, i16* %v5_be98, align 2
  br i1 %v9_be94, label %dec_label_pc_bea0, label %dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge

dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge:    ; preds = %dec_label_pc_be8c
  %v1_bdb4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bdb0

dec_label_pc_bea0:                                ; preds = %dec_label_pc_be8c, %dec_label_pc_bda4
  %v0_bea0 = call i32 @function_d3a8()
  %v1_bea0 = trunc i32 %v0_bea0 to i16
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  store i32 %v3_bb80, i32* @lr, align 4
  %v1_bea8 = load i32, i32* @r5, align 4
  %v9_bea8 = icmp eq i32 %v3_bb80, %v1_bea8
  store i1 %v9_bea8, i1* %cpsr_z.global-to-local, align 1
  %v3_beac = load i32, i32* @r4, align 4
  %v4_beac = add i32 %v3_beac, 20
  %v5_beac = inttoptr i32 %v4_beac to i16*
  store i16 %v1_bea0, i16* %v5_beac, align 2
  br i1 %v9_bea8, label %dec_label_pc_beb4, label %dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge

dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge:    ; preds = %dec_label_pc_bea0
  %v1_bdc0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bdbc

dec_label_pc_beb4:                                ; preds = %dec_label_pc_bea0, %dec_label_pc_bdb0
  %v0_beb4 = call i32 @function_d3a8()
  %v1_beb4 = trunc i32 %v0_beb4 to i16
  %v3_beb8 = load i32, i32* @r6, align 4
  %v4_beb8 = add i32 %v3_beb8, 2
  %v5_beb8 = inttoptr i32 %v4_beb8 to i16*
  store i16 %v1_beb4, i16* %v5_beb8, align 2
  store i32 %v3_bb84, i32* %r0.global-to-local, align 4
  %v1_bec0 = load i32, i32* @r5, align 4
  %v9_bec0 = icmp eq i32 %v3_bb84, %v1_bec0
  store i1 %v9_bec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bec0, label %dec_label_pc_bec8, label %dec_label_pc_bdc8

dec_label_pc_bec8:                                ; preds = %dec_label_pc_beb4, %dec_label_pc_bdbc
  %v0_bec8 = call i32 @function_d3a8()
  %v1_bec8 = trunc i32 %v0_bec8 to i16
  store i32 %v0_bec8, i32* %r0.global-to-local, align 4
  %v3_becc = load i32, i32* @r4, align 4
  %v4_becc = add i32 %v3_becc, 28
  %v5_becc = inttoptr i32 %v4_becc to i16*
  store i16 %v1_bec8, i16* %v5_becc, align 2
  br label %dec_label_pc_bdc8

dec_label_pc_bed4:                                ; preds = %dec_label_pc_bb24
  store i32 %v3_bb14, i32* %r0.global-to-local, align 4
  %v1_bed8 = call i32 @function_10644(i32 %v3_bb14)
  store i32 %v1_bed8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bedc

dec_label_pc_bedc:                                ; preds = %dec_label_pc_beec, %dec_label_pc_bafc, %dec_label_pc_bae4, %dec_label_pc_bed4
  %v1_bee8 = phi i32 [ %v3_bb14, %dec_label_pc_bafc ], [ %v2_baf0, %dec_label_pc_bae4 ], [ %v1_bed8, %dec_label_pc_bed4 ], [ %v2_bef0, %dec_label_pc_beec ]
  store i32 %v9_b894, i32* %r6.global-to-local, align 4
  store i32 %v18_b894, i32* %sb.global-to-local, align 4
  store i32 %v27_b894, i32* %lr.global-to-local, align 4
  ret i32 %v1_bee8

dec_label_pc_beec.critedge:                       ; preds = %dec_label_pc_bb4c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br label %dec_label_pc_beec

dec_label_pc_beec:                                ; preds = %dec_label_pc_bdc8, %dec_label_pc_beec.critedge, %dec_label_pc_bd78
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bef0 = call i32 @function_102c4(i32* null)
  store i32 %v2_bef0, i32* %r0.global-to-local, align 4
  %v9_bef8 = icmp eq i32 %v2_baf0, %v2_bef0
  store i1 %v9_bef8, i1* %cpsr_z.global-to-local, align 1
  %v6_befc = icmp slt i32 %v2_baf0, %v2_bef0
  br i1 %v6_befc, label %dec_label_pc_bedc, label %dec_label_pc_bd78

dec_label_pc_bf04:                                ; preds = %dec_label_pc_ba9c, %bb113
  %v0_baa4.lcssa = phi i32 [ %v1_ba70, %dec_label_pc_ba9c ], [ %v0_baa4, %bb113 ]
  %v2_bf08 = sub i32 %v0_baa4.lcssa, %v0_ba4c
  store i32 %v2_bf08, i32* @r4, align 4
  %v2_bf0c = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_ba60, i32* %r1.global-to-local, align 4
  store i32 %v2_bf0c, i32* %r0.global-to-local, align 4
  store i32 %v2_bf08, i32* %r2.global-to-local, align 4
  %v3_bf1c = call i32 @function_fca8(i32 %v2_bf0c, i32 %v2_ba60, i32 %v2_bf08)
  %v2_bf20 = ptrtoint i32* %stack_var_-40 to i32
  %v1_bf24 = load i32, i32* @r4, align 4
  %v2_bf24 = add i32 %v1_bf24, %v2_bf20
  store i32 %v2_bf24, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_bf0c, i32* @r0, align 4
  %v3_bf30 = add i32 %v2_bf24, -36
  %v4_bf30 = inttoptr i32 %v3_bf30 to i8*
  store i8 0, i8* %v4_bf30, align 1
  %v1_bf34 = call i32 @function_10b80(i32 %v2_bf0c)
  store i32 %v1_bf34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bf40:                                ; preds = %dec_label_pc_bab0
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bf50:                                ; preds = %dec_label_pc_bab0
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bf64:                                ; preds = %dec_label_pc_bab0
  store i32 707416650, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bae4

; uselistorder directives
  uselistorder i32 %v1_bf34, { 1, 0 }
  uselistorder i32 %v2_bf0c, { 0, 1, 3, 2 }
  uselistorder i32 %v2_bf08, { 1, 0, 2 }
  uselistorder i32 %v2_bef0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_bec8, { 1, 0 }
  uselistorder i32 %v0_bea0, { 1, 0 }
  uselistorder i32 %v0_be8c, { 1, 0 }
  uselistorder i32 %v7_be70, { 1, 0, 2 }
  uselistorder i32 %v1_be50, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_be00, { 1, 0 }
  uselistorder i32 %v0_bdec, { 1, 0, 2, 3 }
  uselistorder i32 %v2_bde4, { 1, 0 }
  uselistorder i1 %v3_bda8, { 1, 0 }
  uselistorder i1 %v3_be78, { 1, 0 }
  uselistorder i32 %v1_bd30.pre, { 1, 0 }
  uselistorder i32 %v2_bd28, { 1, 0 }
  uselistorder i32 %v2_bd2815, { 1, 0 }
  uselistorder i32 %v0_bd3417, { 1, 0 }
  uselistorder i32 %v1_bd20, { 1, 0 }
  uselistorder i32 %v3_bc0c, { 1, 0 }
  uselistorder i32 %v3_bbf8, { 1, 0 }
  uselistorder i32 %v3_bbb8, { 1, 0 }
  uselistorder i32 %v1_bb8c, { 1, 0 }
  uselistorder i32 %v3_bb80, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_bb7c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_bb44, { 1, 0 }
  uselistorder i1 %v7_bb18, { 1, 0 }
  uselistorder i32 %v3_bb14, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_bb00, { 0, 13, 1, 8, 3, 6, 7, 5, 9, 11, 10, 4, 12, 2 }
  uselistorder i32 %v2_baf0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_baec, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2184.0, { 0, 3, 2, 1 }
  uselistorder i32 %v1_bab4, { 1, 0 }
  uselistorder i32 %v0_bab0, { 1, 0 }
  uselistorder i32 %v1_baa4, { 1, 0 }
  uselistorder i1 %v7_ba90, { 1, 0 }
  uselistorder i32 %v1_ba8c, { 1, 0, 2 }
  uselistorder i1 %v8_ba84, { 1, 0 }
  uselistorder i1 %v7_ba80, { 1, 0 }
  uselistorder i32 %v1_ba74, { 1, 0 }
  uselistorder i8 %v2_ba68, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ba6c, { 1, 0 }
  uselistorder i32 %v0_ba8c, { 1, 2, 3, 0 }
  uselistorder i32 %v2_ba60, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ba5c, { 1, 0, 2 }
  uselistorder i32 %v0_ba54, { 1, 0, 2, 3 }
  uselistorder i1 %v7_ba4c, { 1, 0 }
  uselistorder i32 %v0_ba4c, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_b9f0, { 1, 0, 2, 3 }
  uselistorder i32 %v6_b990, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v6_b974, { 0, 2, 1, 3 }
  uselistorder i32 %v6_b95c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b944, { 1, 2, 0 }
  uselistorder i32 %v5_b938, { 0, 2, 1 }
  uselistorder i32 %v7_b900, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_b8e8, { 2, 1, 0 }
  uselistorder i32 %v6_b8dc, { 1, 0 }
  uselistorder i32 %v2_b8c4, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 5, 6, 3, 10, 7, 8, 9, 11, 12, 13, 1, 14, 2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 4, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 2, 12, 1, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 47, 46, 48, 50, 49, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 5, 4, 1, 8, 6, 9, 7, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 23, 21, 22, 24, 25, 33, 26, 27, 28, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 42, 41, 43, 44, 45, 47, 46, 48, 49, 51, 50, 52, 54, 53, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 (i32)* @function_10b80, { 1, 0 }
  uselistorder i32 41, { 1, 2, 3, 0 }
  uselistorder i8 17, { 1, 2, 0 }
  uselistorder i8 -16, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_8258, { 0, 1, 74, 75, 76, 77, 78, 79, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder i32 %arg2, { 3, 4, 6, 7, 0, 1, 5, 2, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_beec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bedc, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_bdc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bd78, { 1, 0 }
  uselistorder label %dec_label_pc_bd48, { 1, 0 }
  uselistorder label %.thread19, { 2, 0, 1 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %dec_label_pc_baa4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ba9c, { 1, 0 }
  uselistorder label %dec_label_pc_ba90, { 1, 0 }
}

define i32 @function_bf78(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_bf78:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_bf9c, label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_bf78
  %v0_bf8c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bf88

dec_label_pc_bf88:                                ; preds = %dec_label_pc_bf88, %dec_label_pc_bf84
  %v0_bf94 = phi i32 [ %v2_bf94, %dec_label_pc_bf88 ], [ 0, %dec_label_pc_bf84 ]
  %v0_bf8c = phi i32 [ %v5_bf8c, %dec_label_pc_bf88 ], [ %v0_bf8c.pre, %dec_label_pc_bf84 ]
  %v0_bf88 = phi i32 [ %v1_bf88, %dec_label_pc_bf88 ], [ %arg1, %dec_label_pc_bf84 ]
  %v1_bf88 = add i32 %v0_bf88, -2
  %v1_bf8c = inttoptr i32 %v0_bf8c to i16*
  %v2_bf8c = load i16, i16* %v1_bf8c, align 2
  %v3_bf8c = zext i16 %v2_bf8c to i32
  %v5_bf8c = add i32 %v0_bf8c, -2
  store i32 %v5_bf8c, i32* @r0, align 4
  %v2_bf94 = add i32 %v3_bf8c, %v0_bf94
  %v1_bf88.cmp = icmp ugt i32 %v1_bf88, 1
  br i1 %v1_bf88.cmp, label %dec_label_pc_bf88, label %dec_label_pc_bf9c.loopexit

dec_label_pc_bf9c.loopexit:                       ; preds = %dec_label_pc_bf88
  br label %dec_label_pc_bf9c

dec_label_pc_bf9c:                                ; preds = %dec_label_pc_bf78, %dec_label_pc_bf9c.loopexit
  %v1_bfa4 = phi i32 [ %v2_bf94, %dec_label_pc_bf9c.loopexit ], [ 0, %dec_label_pc_bf78 ]
  %v0_bf9c = phi i32 [ %v1_bf88, %dec_label_pc_bf9c.loopexit ], [ %arg1, %dec_label_pc_bf78 ]
  %v7_bf9c = icmp eq i32 %v0_bf9c, 1
  br i1 %v7_bf9c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_bf9c
  %v1_bfa0 = load i32, i32* @r0, align 4
  %v2_bfa0 = inttoptr i32 %v1_bfa0 to i8*
  %v3_bfa0 = load i8, i8* %v2_bfa0, align 1
  %v4_bfa0 = zext i8 %v3_bfa0 to i32
  %v3_bfa4 = add i32 %v1_bfa4, %v4_bfa0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bf9c, %bb
  %v0_bfa8 = phi i32 [ %v1_bfa4, %dec_label_pc_bf9c ], [ %v3_bfa4, %bb ]
  %v3_bfac = urem i32 %v0_bfa8, 65536
  %v4_bfb0 = udiv i32 %v0_bfa8, 65536
  %v5_bfb0 = add nuw nsw i32 %v4_bfb0, %v3_bfac
  %v4_bfb4 = udiv i32 %v5_bfb0, 65536
  %v5_bfb4 = add nuw nsw i32 %v4_bfb4, %v5_bfb0
  %v1_bfb8 = urem i32 %v5_bfb4, 65536
  %v3_bfc0 = xor i32 %v1_bfb8, 65535
  ret i32 %v3_bfc0

; uselistorder directives
  uselistorder i32 %v5_bfb0, { 1, 0 }
  uselistorder i32 %v5_bf8c, { 1, 0 }
  uselistorder i32 %v1_bf88, { 1, 0, 2 }
  uselistorder i32 %v0_bf8c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_bf9c, { 1, 0 }
}

define i32 @function_bfc8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bfc8:
  %v1_bfd8 = add i32 %arg1, 12
  %v2_bfd8 = inttoptr i32 %v1_bfd8 to i32*
  %v3_bfd8 = load i32, i32* %v2_bfd8, align 4
  %v1_bfdc = add i32 %arg1, 16
  %v2_bfdc = inttoptr i32 %v1_bfdc to i32*
  %v3_bfdc = load i32, i32* %v2_bfdc, align 4
  %v7_bfe0 = icmp sgt i32 %arg3, 1
  br i1 %v7_bfe0, label %dec_label_pc_bfec.preheader, label %dec_label_pc_c000

dec_label_pc_bfec.preheader:                      ; preds = %dec_label_pc_bfc8
  %v0_bff0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_bfec

dec_label_pc_bfec:                                ; preds = %dec_label_pc_bfec.preheader, %dec_label_pc_bfec
  %v0_bff8 = phi i32 [ 0, %dec_label_pc_bfec.preheader ], [ %v2_bff8, %dec_label_pc_bfec ]
  %v0_bff0 = phi i32 [ %v0_bff0.pre, %dec_label_pc_bfec.preheader ], [ %v5_bff0, %dec_label_pc_bfec ]
  %v0_bfec = phi i32 [ %arg3, %dec_label_pc_bfec.preheader ], [ %v1_bfec, %dec_label_pc_bfec ]
  %v1_bfec = add nsw i32 %v0_bfec, -2
  %v1_bff0 = inttoptr i32 %v0_bff0 to i16*
  %v2_bff0 = load i16, i16* %v1_bff0, align 2
  %v3_bff0 = zext i16 %v2_bff0 to i32
  %v5_bff0 = add i32 %v0_bff0, -2
  store i32 %v5_bff0, i32* @r1, align 4
  %v2_bff8 = add i32 %v3_bff0, %v0_bff8
  %v8_bffc = icmp sgt i32 %v1_bfec, 1
  br i1 %v8_bffc, label %dec_label_pc_bfec, label %dec_label_pc_c000.loopexit

dec_label_pc_c000.loopexit:                       ; preds = %dec_label_pc_bfec
  br label %dec_label_pc_c000

dec_label_pc_c000:                                ; preds = %dec_label_pc_c000.loopexit, %dec_label_pc_bfc8
  %v1_c00c = phi i32 [ %v2_bff8, %dec_label_pc_c000.loopexit ], [ 0, %dec_label_pc_bfc8 ]
  %v0_c000 = phi i32 [ %v1_bfec, %dec_label_pc_c000.loopexit ], [ %arg3, %dec_label_pc_bfc8 ]
  %v7_c000 = icmp eq i32 %v0_c000, 1
  br i1 %v7_c000, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c000
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c000
  %v1_c004 = load i32, i32* @r1, align 4
  %v2_c004 = inttoptr i32 %v1_c004 to i8*
  %v3_c004 = load i8, i8* %v2_c004, align 1
  %v4_c004 = zext i8 %v3_c004 to i32
  %v3_c00c = add i32 %v4_c004, %v1_c00c
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c034 = phi i32 [ %v1_c00c, %.thread ], [ %v3_c00c, %bb ]
  %v0_c014 = mul i32 %v3_bfd8, 65536
  %v3_c014 = udiv i32 %v0_c014, 65536
  %v3_c018 = urem i32 %v3_bfdc, 65536
  %v4_c020 = udiv i32 %v3_bfd8, 65536
  %v2_c01c = add nuw nsw i32 %v3_c018, %v4_c020
  %v5_c020 = add nuw nsw i32 %v2_c01c, %v3_c014
  %v1_c024 = add i32 %arg1, 9
  %v2_c024 = inttoptr i32 %v1_c024 to i8*
  %v3_c024 = load i8, i8* %v2_c024, align 1
  %v4_c024 = zext i8 %v3_c024 to i32
  %v4_c028 = udiv i32 %v3_bfdc, 65536
  %v3_c030 = mul nuw nsw i32 %v4_c024, 256
  %v5_c028 = add i32 %v4_c028, %arg2
  %v2_c02c = add i32 %v5_c028, %v1_c034
  %v2_c034 = add i32 %v2_c02c, %v5_c020
  %v2_c038 = add i32 %v2_c034, %v3_c030
  %tmp = icmp ult i32 %v2_c038, 65536
  br i1 %tmp, label %dec_label_pc_c058, label %dec_label_pc_c044

dec_label_pc_c044:                                ; preds = %bb19, %dec_label_pc_c044
  %v2_c04c5 = phi i32 [ %v2_c04c, %dec_label_pc_c044 ], [ %v2_c038, %bb19 ]
  %v3_c0506.in = phi i32 [ %v2_c04c, %dec_label_pc_c044 ], [ %v2_c038, %bb19 ]
  %v3_c0506 = udiv i32 %v3_c0506.in, 65536
  %v3_c048 = urem i32 %v2_c04c5, 65536
  %v2_c04c = add nuw nsw i32 %v3_c048, %v3_c0506
  %tmp20 = icmp ult i32 %v2_c04c, 65536
  br i1 %tmp20, label %dec_label_pc_c058.loopexit, label %dec_label_pc_c044

dec_label_pc_c058.loopexit:                       ; preds = %dec_label_pc_c044
  br label %dec_label_pc_c058

dec_label_pc_c058:                                ; preds = %dec_label_pc_c058.loopexit, %bb19
  %v0_c058 = phi i32 [ %v2_c04c, %dec_label_pc_c058.loopexit ], [ %v2_c038, %bb19 ]
  %v1_c058 = urem i32 %v0_c058, 65536
  %v3_c060 = xor i32 %v1_c058, 65535
  ret i32 %v3_c060

; uselistorder directives
  uselistorder i32 %v2_c04c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c038, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c00c, { 1, 0 }
  uselistorder i32 %v5_bff0, { 1, 0 }
  uselistorder i32 %v0_bff0, { 1, 0 }
  uselistorder i32 %v3_bfd8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c044, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_bfec, { 1, 0 }
}

define i32 @function_c06c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c06c:
  %v2_c078 = load i32, i32* @global_var_1e254.53, align 4
  %v2_c080 = call i32 @function_10410(i32 %v2_c078, i32 9)
  ret i32 %v2_c080
}

define i32 @function_c094(i32 %arg1) local_unnamed_addr {
dec_label_pc_c094:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c094 = load i32, i32* @r4, align 4
  %v6_c094 = load i32, i32* @r5, align 4
  %v9_c094 = load i32, i32* @r6, align 4
  %v12_c094 = load i32, i32* @r7, align 4
  %v15_c094 = load i32, i32* @r8, align 4
  %v18_c094 = load i32, i32* @sb, align 4
  %v21_c094 = load i32, i32* @sl, align 4
  %v24_c094 = load i32, i32* @fp, align 4
  %v27_c094 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c0b0 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c0b0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_c0dc = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c0dc, i32* @fp, align 4
  %v3_c0e8 = call i32 @function_10ac0(i8* nonnull %stack_var_-585, i32 0)
  %v2_c0ec = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c0ec, i32* @sl, align 4
  %v0_c0f0 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c0fc = bitcast i32* %stack_var_-8777 to i8*
  %v3_c0fc = call i32 @function_10ac0(i8* %v2_c0fc, i32 %v0_c0f0)
  %v0_c104 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c110 = bitcast i32* %stack_var_-4681 to i8*
  %v3_c110 = call i32 @function_10ac0(i8* %v2_c110, i32 %v0_c104)
  %v2_c114 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c114, i32* @sb, align 4
  %v0_c118 = load i32, i32* %r4.global-to-local, align 4
  %v3_c118 = udiv i32 %v0_c118, 256
  %v1_c11c = urem i32 %v0_c118, 256
  store i32 %v1_c11c, i32* @r4, align 4
  %v3_c12c = trunc i32 %v3_c118 to i8
  %v4_c12c = call i32 @function_10018(i8 %v3_c12c, i32 16, i32 %v2_c114)
  %v2_c134 = call i32 @function_fc38(i8* nonnull %stack_var_-72)
  %v7_c138 = icmp eq i32 %v2_c134, 2
  br i1 %v7_c138, label %dec_label_pc_c5e4, label %dec_label_pc_c140

dec_label_pc_c140:                                ; preds = %dec_label_pc_c094, %dec_label_pc_c5e4
  %v1_c144 = call i32 @function_f7dc(i32 3)
  %v1_c14c = call i32 @function_f7dc(i32 4)
  %v1_c154 = call i32 @function_f7dc(i32 6)
  %v1_c15c = call i32 @function_f7dc(i32 8)
  %v0_c160 = load i32, i32* @r5, align 4
  %v2_c168 = inttoptr i32 %v0_c160 to i32*
  %v3_c168 = call i32 @function_f718(i32 8, i32* %v2_c168)
  %v0_c16c = load i32, i32* @r5, align 4
  %v2_c170 = call i32 @function_10250(i32 %v3_c168, i32 %v0_c16c)
  %v7_c174 = icmp eq i32 %v2_c170, -1
  store i32 %v2_c170, i32* @r8, align 4
  br i1 %v7_c174, label %bb, label %dec_label_pc_c184.preheader

bb:                                               ; preds = %dec_label_pc_c140
  %v1_c17c = load i32, i32* @r5, align 4
  store i32 %v1_c17c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c5a4

dec_label_pc_c184.preheader:                      ; preds = %dec_label_pc_c140
  %v4_c19057 = call i32 @function_fe98(i8* nonnull %stack_var_-585, i32 512, i32 %v2_c170)
  %v2_c19459 = icmp eq i32 %v4_c19057, 0
  br i1 %v2_c19459, label %dec_label_pc_c31c.loopexit, label %dec_label_pc_c19c.lr.ph

dec_label_pc_c19c.lr.ph:                          ; preds = %dec_label_pc_c184.preheader
  %v2_c1e4 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_c19c

dec_label_pc_c19c:                                ; preds = %dec_label_pc_c19c.lr.ph, %dec_label_pc_c184.backedge
  %v3_c1a0 = load i8, i8* %stack_var_-585, align 1
  %v4_c1a0 = sext i8 %v3_c1a0 to i32
  %v2_c1a4 = icmp eq i8 %v3_c1a0, 0
  br i1 %v2_c1a4, label %bb130, label %bb129

bb129:                                            ; preds = %dec_label_pc_c19c
  %v8_c1a8 = icmp eq i8 %v3_c1a0, 58
  br i1 %v8_c1a8, label %.thread8, label %dec_label_pc_c1bc

.thread8:                                         ; preds = %bb129
  br label %dec_label_pc_c1d4

bb130:                                            ; preds = %dec_label_pc_c19c
  br label %dec_label_pc_c1d4

dec_label_pc_c1bc:                                ; preds = %bb129
  %v1_c1c4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c1c0

dec_label_pc_c1c0:                                ; preds = %bb131, %dec_label_pc_c1bc
  %v0_c1c0 = phi i32 [ %v1_c1c0, %bb131 ], [ 0, %dec_label_pc_c1bc ]
  %v1_c1c0 = add i32 %v0_c1c0, 1
  %v2_c1c4 = add i32 %v1_c1c0, %v1_c1c4.pre
  %v3_c1c4 = inttoptr i32 %v2_c1c4 to i8*
  %v4_c1c4 = load i8, i8* %v3_c1c4, align 1
  %v6_c1c4 = zext i8 %v4_c1c4 to i32
  %v2_c1c8 = icmp eq i8 %v4_c1c4, 0
  br i1 %v2_c1c8, label %dec_label_pc_c1d4, label %bb131

bb131:                                            ; preds = %dec_label_pc_c1c0
  %v8_c1cc = icmp eq i8 %v4_c1c4, 58
  br i1 %v8_c1cc, label %dec_label_pc_c1d4, label %dec_label_pc_c1c0

dec_label_pc_c1d4:                                ; preds = %dec_label_pc_c1c0, %bb131, %bb130, %.thread8
  %v1_c200 = phi i32 [ 0, %.thread8 ], [ 0, %bb130 ], [ %v1_c1c0, %bb131 ], [ %v1_c1c0, %dec_label_pc_c1c0 ]
  %v0_c1d4 = phi i32 [ %v4_c1a0, %.thread8 ], [ %v4_c1a0, %bb130 ], [ %v6_c1c4, %bb131 ], [ %v6_c1c4, %dec_label_pc_c1c0 ]
  %v2_c1d4 = icmp eq i32 %v0_c1d4, 0
  br i1 %v2_c1d4, label %dec_label_pc_c184.backedge, label %dec_label_pc_c1dc

dec_label_pc_c184.backedge:                       ; preds = %dec_label_pc_c1d4, %dec_label_pc_c2a4, %dec_label_pc_c2f0, %dec_label_pc_c220
  %v0_c18c = load i32, i32* @r8, align 4
  %v4_c190 = call i32 @function_fe98(i8* nonnull %stack_var_-585, i32 512, i32 %v0_c18c)
  %v2_c194 = icmp eq i32 %v4_c190, 0
  br i1 %v2_c194, label %dec_label_pc_c31c.loopexit, label %dec_label_pc_c19c

dec_label_pc_c1dc:                                ; preds = %dec_label_pc_c1d4
  %v1_c1e0 = add i32 %v1_c200, 2
  %v2_c1e8 = add i32 %v1_c1e0, %v2_c1e4
  %v1_c1ec = add i32 %v2_c1e8, -545
  %v2_c1ec = inttoptr i32 %v1_c1ec to i8*
  %v3_c1ec = load i8, i8* %v2_c1ec, align 1
  %v2_c1f0 = icmp eq i8 %v3_c1ec, 0
  br i1 %v2_c1f0, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_c1dc
  %v8_c1f4 = icmp eq i8 %v3_c1ec, 32
  br i1 %v8_c1f4, label %.thread13, label %dec_label_pc_c200

.thread13:                                        ; preds = %bb132
  store i32 %v1_c1e0, i32* @r5, align 4
  br label %dec_label_pc_c220

bb133:                                            ; preds = %dec_label_pc_c1dc
  store i32 %v1_c1e0, i32* @r5, align 4
  br label %dec_label_pc_c220

dec_label_pc_c200:                                ; preds = %bb132
  %v0_c200 = load i32, i32* @r6, align 4
  %v2_c200 = add i32 %v0_c200, %v1_c200
  br label %dec_label_pc_c208

dec_label_pc_c208:                                ; preds = %bb134, %dec_label_pc_c200
  %v0_c21416 = phi i32 [ %v1_c214, %bb134 ], [ %v1_c1e0, %dec_label_pc_c200 ]
  %v0_c21818 = phi i32 [ %v1_c218, %bb134 ], [ %v2_c200, %dec_label_pc_c200 ]
  %v1_c208 = add i32 %v0_c21818, 3
  %v2_c208 = inttoptr i32 %v1_c208 to i8*
  %v3_c208 = load i8, i8* %v2_c208, align 1
  %v2_c20c = icmp eq i8 %v3_c208, 0
  br i1 %v2_c20c, label %.thread15, label %bb134

.thread15:                                        ; preds = %dec_label_pc_c208
  %v1_c21417 = add i32 %v0_c21416, 1
  store i32 %v1_c21417, i32* @r5, align 4
  br label %dec_label_pc_c220

bb134:                                            ; preds = %dec_label_pc_c208
  %v8_c210 = icmp eq i8 %v3_c208, 32
  %v1_c214 = add i32 %v0_c21416, 1
  store i32 %v1_c214, i32* @r5, align 4
  %v1_c218 = add i32 %v0_c21818, 1
  br i1 %v8_c210, label %dec_label_pc_c220, label %dec_label_pc_c208

dec_label_pc_c220:                                ; preds = %bb134, %bb133, %.thread15, %.thread13
  %v1_c22c = phi i32 [ %v1_c21417, %.thread15 ], [ %v1_c1e0, %.thread13 ], [ %v1_c1e0, %bb133 ], [ %v1_c214, %bb134 ]
  %v0_c220 = load i32, i32* @r6, align 4
  %v2_c220 = add i32 %v0_c220, %v1_c1e0
  store i32 %v2_c220, i32* @r4, align 4
  %v2_c22c = add i32 %v1_c22c, %v2_c1e4
  store i32 0, i32* @r7, align 4
  %v3_c234 = add i32 %v2_c22c, -545
  %v4_c234 = inttoptr i32 %v3_c234 to i8*
  store i8 0, i8* %v4_c234, align 1
  %v0_c238 = load i32, i32* @r4, align 4
  %v1_c23c = inttoptr i32 %v0_c238 to i8*
  %v2_c23c = call i32 @function_fc38(i8* %v1_c23c)
  store i32 %v2_c23c, i32* @r1, align 4
  %v0_c248 = load i32, i32* @r4, align 4
  %v3_c24c = inttoptr i32 %v0_c248 to i8*
  %v4_c24c = call i32 @function_ff88(i8* %v3_c24c, i32 %v2_c23c, i32 %v2_c114)
  %v7_c250 = icmp eq i32 %v4_c24c, -1
  br i1 %v7_c250, label %dec_label_pc_c184.backedge, label %dec_label_pc_c26c.preheader

dec_label_pc_c26c.preheader:                      ; preds = %dec_label_pc_c220
  %v1_c254 = load i32, i32* @r7, align 4
  %v1_c258 = load i32, i32* @r6, align 4
  %v2_c258 = load i32, i32* @r5, align 4
  %v3_c258 = add i32 %v2_c258, %v1_c258
  store i32 %v1_c254, i32* @lr, align 4
  %v1_c26c49 = add i32 %v3_c258, 2
  %v2_c26c50 = inttoptr i32 %v1_c26c49 to i8*
  %v3_c26c51 = load i8, i8* %v2_c26c50, align 1
  %v2_c27053 = icmp eq i8 %v3_c26c51, 0
  %v1_c27455 = add i32 %v2_c258, 2
  br i1 %v2_c27053, label %dec_label_pc_c2a4, label %dec_label_pc_c27c

dec_label_pc_c27c:                                ; preds = %dec_label_pc_c26c.preheader, %dec_label_pc_c26c.backedge
  %v0_c2a484 = phi i32 [ %v0_c2a482, %dec_label_pc_c26c.backedge ], [ %v1_c254, %dec_label_pc_c26c.preheader ]
  %v0_c28c.pr = phi i32 [ %v0_c28c.pr71, %dec_label_pc_c26c.backedge ], [ %v1_c254, %dec_label_pc_c26c.preheader ]
  %v0_c5b8 = phi i32 [ %v0_c5b874, %dec_label_pc_c26c.backedge ], [ %v1_c254, %dec_label_pc_c26c.preheader ]
  %v0_c27479 = phi i32 [ %v1_c274, %dec_label_pc_c26c.backedge ], [ %v1_c27455, %dec_label_pc_c26c.preheader ]
  %v0_c29c = phi i32 [ %v0_c26c, %dec_label_pc_c26c.backedge ], [ %v3_c258, %dec_label_pc_c26c.preheader ]
  %v1_c280.in = phi i8 [ %v3_c26c, %dec_label_pc_c26c.backedge ], [ %v3_c26c51, %dec_label_pc_c26c.preheader ]
  %v7_c27c = icmp eq i8 %v1_c280.in, 9
  br i1 %v7_c27c, label %bb136, label %bb135

bb135:                                            ; preds = %dec_label_pc_c27c
  %v8_c280 = icmp eq i8 %v1_c280.in, 32
  br i1 %v8_c280, label %.thread27, label %dec_label_pc_c28c

.thread27:                                        ; preds = %bb135
  br label %dec_label_pc_c298

bb136:                                            ; preds = %dec_label_pc_c27c
  br label %dec_label_pc_c298

dec_label_pc_c28c:                                ; preds = %bb135
  %v7_c28c = icmp eq i32 %v0_c28c.pr, 1
  br i1 %v7_c28c, label %dec_label_pc_c5b8, label %dec_label_pc_c294

dec_label_pc_c294:                                ; preds = %dec_label_pc_c5b8, %dec_label_pc_c28c
  %v0_c29876 = phi i32 [ %v1_c5b8, %dec_label_pc_c5b8 ], [ %v0_c5b8, %dec_label_pc_c28c ]
  br label %dec_label_pc_c298

dec_label_pc_c298:                                ; preds = %bb136, %.thread27, %dec_label_pc_c294
  %v0_c298 = phi i32 [ %v0_c5b8, %.thread27 ], [ %v0_c5b8, %bb136 ], [ %v0_c29876, %dec_label_pc_c294 ]
  %v0_c28c.pr72 = phi i32 [ 1, %.thread27 ], [ 1, %bb136 ], [ 0, %dec_label_pc_c294 ]
  %v7_c2a0 = icmp sgt i32 %v0_c298, 6
  br i1 %v7_c2a0, label %dec_label_pc_c2a4, label %dec_label_pc_c26c.backedge

dec_label_pc_c2a4:                                ; preds = %dec_label_pc_c26c.backedge, %dec_label_pc_c298, %dec_label_pc_c26c.preheader
  %v1_c2f4 = phi i32 [ %v1_c27455, %dec_label_pc_c26c.preheader ], [ %v1_c274, %dec_label_pc_c26c.backedge ], [ %v0_c27479, %dec_label_pc_c298 ]
  %v0_c2a4 = phi i32 [ %v1_c254, %dec_label_pc_c26c.preheader ], [ %v0_c2a482, %dec_label_pc_c26c.backedge ], [ %v0_c2a484, %dec_label_pc_c298 ]
  %v2_c2a4 = icmp eq i32 %v0_c2a4, 0
  br i1 %v2_c2a4, label %dec_label_pc_c184.backedge, label %dec_label_pc_c2b0

dec_label_pc_c2b0:                                ; preds = %dec_label_pc_c2a4
  %v2_c2b8 = add i32 %v1_c2f4, %v2_c1e4
  %v1_c2bc = add i32 %v2_c2b8, -545
  %v2_c2bc = inttoptr i32 %v1_c2bc to i8*
  %v3_c2bc = load i8, i8* %v2_c2bc, align 1
  %v2_c2c0 = icmp eq i8 %v3_c2bc, 0
  br i1 %v2_c2c0, label %dec_label_pc_c2f0, label %bb137

bb137:                                            ; preds = %dec_label_pc_c2b0
  %v8_c2c4 = icmp eq i8 %v3_c2bc, 32
  br i1 %v8_c2c4, label %dec_label_pc_c2f0, label %dec_label_pc_c2cc

dec_label_pc_c2cc:                                ; preds = %bb137
  %v2_c2cc = add i32 %v1_c2f4, %v1_c258
  br label %dec_label_pc_c2d0

dec_label_pc_c2d0:                                ; preds = %bb138, %dec_label_pc_c2cc
  %v0_c2dc30 = phi i32 [ %v1_c2dc, %bb138 ], [ %v1_c2f4, %dec_label_pc_c2cc ]
  %v0_c2d0 = phi i32 [ %v1_c2d0, %bb138 ], [ %v2_c2cc, %dec_label_pc_c2cc ]
  %v1_c2d0 = add i32 %v0_c2d0, 1
  %v2_c2d0 = inttoptr i32 %v1_c2d0 to i8*
  %v3_c2d0 = load i8, i8* %v2_c2d0, align 1
  %v2_c2d4 = icmp eq i8 %v3_c2d0, 0
  br i1 %v2_c2d4, label %.thread29, label %bb138

.thread29:                                        ; preds = %dec_label_pc_c2d0
  %v1_c2dc31 = add i32 %v0_c2dc30, 1
  br label %dec_label_pc_c2e4

bb138:                                            ; preds = %dec_label_pc_c2d0
  %v8_c2d8 = icmp eq i8 %v3_c2d0, 32
  %v1_c2dc = add i32 %v0_c2dc30, 1
  br i1 %v8_c2d8, label %dec_label_pc_c2e4, label %dec_label_pc_c2d0

dec_label_pc_c2e4:                                ; preds = %bb138, %.thread29
  %v1_c2ec = phi i32 [ %v1_c2dc31, %.thread29 ], [ %v1_c2dc, %bb138 ]
  %v2_c2ec = add i32 %v1_c2ec, %v2_c1e4
  br label %dec_label_pc_c2f0

dec_label_pc_c2f0:                                ; preds = %dec_label_pc_c2b0, %bb137, %dec_label_pc_c2e4
  %v2_c2fc = phi i32 [ %v2_c2b8, %dec_label_pc_c2b0 ], [ %v2_c2b8, %bb137 ], [ %v2_c2ec, %dec_label_pc_c2e4 ]
  %v2_c2f4 = add i32 %v1_c2f4, %v1_c258
  store i32 %v2_c2f4, i32* @r4, align 4
  %v3_c2fc = add i32 %v2_c2fc, -545
  %v4_c2fc = inttoptr i32 %v3_c2fc to i8*
  store i8 0, i8* %v4_c2fc, align 1
  %v1_c300 = inttoptr i32 %v2_c2f4 to i8*
  %v2_c300 = call i32 @function_fc38(i8* %v1_c300)
  %v8_c308 = icmp sgt i32 %v2_c300, 15
  br i1 %v8_c308, label %dec_label_pc_c184.backedge, label %dec_label_pc_c30c

dec_label_pc_c30c:                                ; preds = %dec_label_pc_c2f0
  %v0_c310 = load i32, i32* @r4, align 4
  %v2_c314 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_c314, i32* @r0, align 4
  %v2_c318 = bitcast i32* %stack_var_-56 to i8*
  %v3_c318 = call i32 @function_fc60(i8* %v2_c318, i32 %v0_c310)
  br label %dec_label_pc_c31c

dec_label_pc_c31c.loopexit:                       ; preds = %dec_label_pc_c184.backedge, %dec_label_pc_c184.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre96 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_c31c

dec_label_pc_c31c:                                ; preds = %dec_label_pc_c31c.loopexit, %dec_label_pc_c30c
  %v1_c32c.pre-phi = phi i8* [ %.pre96, %dec_label_pc_c31c.loopexit ], [ %v2_c318, %dec_label_pc_c30c ]
  %v2_c328.pre-phi = phi i32 [ %.pre, %dec_label_pc_c31c.loopexit ], [ %v2_c314, %dec_label_pc_c30c ]
  %v0_c31c = load i32, i32* @r8, align 4
  %v1_c320 = call i32 @function_10644(i32 %v0_c31c)
  %v2_c32c = call i32 @function_fc38(i8* %v1_c32c.pre-phi)
  store i32 %v2_c32c, i32* @r4, align 4
  %v2_c330 = icmp eq i32 %v2_c32c, 0
  br i1 %v2_c330, label %dec_label_pc_c588, label %dec_label_pc_c33c

dec_label_pc_c33c:                                ; preds = %dec_label_pc_c31c
  %v3_c344 = call i32 @function_f718(i32 3, i32* null)
  %v1_c348 = call i32 @function_10840(i32 %v3_c344)
  store i32 %v1_c348, i32* @sb, align 4
  %v2_c34c = icmp eq i32 %v1_c348, 0
  br i1 %v2_c34c, label %dec_label_pc_c57c, label %dec_label_pc_c35c.preheader

dec_label_pc_c35c.preheader:                      ; preds = %dec_label_pc_c33c
  store i32 0, i32* @r5, align 4
  %v1_c36044 = inttoptr i32 %v1_c348 to i32*
  %v2_c36045 = call i32 @function_10984(i32* %v1_c36044)
  %v2_c36447 = icmp eq i32 %v2_c36045, 0
  br i1 %v2_c36447, label %dec_label_pc_c570, label %dec_label_pc_c36c.preheader

dec_label_pc_c35c.loopexit:                       ; preds = %dec_label_pc_c374, %dec_label_pc_c384, %dec_label_pc_c3f0
  %v0_c35c = load i32, i32* @sb, align 4
  %v1_c360 = inttoptr i32 %v0_c35c to i32*
  %v2_c360 = call i32 @function_10984(i32* %v1_c360)
  %v2_c364 = icmp eq i32 %v2_c360, 0
  br i1 %v2_c364, label %dec_label_pc_c570, label %dec_label_pc_c36c.preheader

dec_label_pc_c36c.preheader:                      ; preds = %dec_label_pc_c35c.preheader, %dec_label_pc_c35c.loopexit
  %v0_c37492 = phi i32 [ %v2_c360, %dec_label_pc_c35c.loopexit ], [ %v2_c36045, %dec_label_pc_c35c.preheader ]
  br label %dec_label_pc_c36c

dec_label_pc_c36c:                                ; preds = %dec_label_pc_c36c.preheader, %dec_label_pc_c558
  %v0_c38c = phi i32 [ %v0_c37492, %dec_label_pc_c36c.preheader ], [ %v2_c564, %dec_label_pc_c558 ]
  %v0_c36c = load i32, i32* @r5, align 4
  %v2_c36c = icmp eq i32 %v0_c36c, 0
  br i1 %v2_c36c, label %dec_label_pc_c374, label %dec_label_pc_c570

dec_label_pc_c374:                                ; preds = %dec_label_pc_c36c
  %v1_c374 = add i32 %v0_c38c, 11
  %v2_c374 = inttoptr i32 %v1_c374 to i8*
  %v3_c374 = load i8, i8* %v2_c374, align 1
  %v4_c374 = zext i8 %v3_c374 to i32
  %v1_c378 = add nsw i32 %v4_c374, -48
  %tmp = icmp ugt i32 %v1_c378, 9
  br i1 %tmp, label %dec_label_pc_c35c.loopexit, label %dec_label_pc_c384

dec_label_pc_c384:                                ; preds = %dec_label_pc_c374
  store i32 %v1_c374, i32* @r7, align 4
  %v3_c390 = call i32 @function_f718(i32 3, i32* null)
  store i32 %v2_c0ec, i32* @r0, align 4
  %v3_c39c = call i32 @function_fc60(i8* %v2_c110, i32 %v3_c390)
  %v2_c3a4 = call i32 @function_fc38(i8* %v2_c110)
  %v0_c3a8 = load i32, i32* @r7, align 4
  %v1_c3ac = load i32, i32* @sl, align 4
  %v2_c3ac = add i32 %v1_c3ac, %v2_c3a4
  store i32 %v2_c3ac, i32* @r0, align 4
  %v2_c3b0 = inttoptr i32 %v2_c3ac to i8*
  %v3_c3b0 = call i32 @function_fc60(i8* %v2_c3b0, i32 %v0_c3a8)
  %v2_c3b8 = call i32 @function_fc38(i8* %v2_c110)
  %v0_c3bc = load i32, i32* @r5, align 4
  store i32 %v2_c3b8, i32* @r4, align 4
  %v2_c3c8 = inttoptr i32 %v0_c3bc to i32*
  %v3_c3c8 = call i32 @function_f718(i32 4, i32* %v2_c3c8)
  %v0_c3d0 = load i32, i32* @r4, align 4
  %v1_c3d0 = load i32, i32* @sl, align 4
  %v2_c3d0 = add i32 %v1_c3d0, %v0_c3d0
  store i32 %v2_c3d0, i32* @r0, align 4
  %v2_c3d4 = inttoptr i32 %v2_c3d0 to i8*
  %v3_c3d4 = call i32 @function_fc60(i8* %v2_c3d4, i32 %v3_c3c8)
  %v3_c3e4 = call i32 @function_103a8(i32 %v2_c0ec, i32 %v2_c0dc, i32 4096)
  %v7_c3e8 = icmp eq i32 %v3_c3e4, -1
  br i1 %v7_c3e8, label %dec_label_pc_c35c.loopexit, label %dec_label_pc_c3f0

dec_label_pc_c3f0:                                ; preds = %dec_label_pc_c384
  %v0_c3f0 = load i32, i32* @r5, align 4
  %v2_c3f8 = inttoptr i32 %v0_c3f0 to i32*
  %v3_c3f8 = call i32 @function_f718(i32 3, i32* %v2_c3f8)
  store i32 %v2_c0ec, i32* @r0, align 4
  %v3_c404 = call i32 @function_fc60(i8* %v2_c110, i32 %v3_c3f8)
  %v2_c40c = call i32 @function_fc38(i8* %v2_c110)
  %v0_c410 = load i32, i32* @r7, align 4
  %v1_c414 = load i32, i32* @sl, align 4
  %v2_c414 = add i32 %v1_c414, %v2_c40c
  store i32 %v2_c414, i32* @r0, align 4
  %v2_c418 = inttoptr i32 %v2_c414 to i8*
  %v3_c418 = call i32 @function_fc60(i8* %v2_c418, i32 %v0_c410)
  %v2_c420 = call i32 @function_fc38(i8* %v2_c110)
  %v0_c424 = load i32, i32* @r5, align 4
  store i32 %v2_c420, i32* @r4, align 4
  %v2_c430 = inttoptr i32 %v0_c424 to i32*
  %v3_c430 = call i32 @function_f718(i32 6, i32* %v2_c430)
  %v0_c438 = load i32, i32* @r4, align 4
  %v1_c438 = load i32, i32* @sl, align 4
  %v2_c438 = add i32 %v1_c438, %v0_c438
  store i32 %v2_c438, i32* @r0, align 4
  %v2_c43c = inttoptr i32 %v2_c438 to i8*
  %v3_c43c = call i32 @function_fc60(i8* %v2_c43c, i32 %v3_c430)
  %v1_c444 = call i32 @function_10840(i32 %v2_c0ec)
  store i32 %v1_c444, i32* @r8, align 4
  %v2_c448 = icmp eq i32 %v1_c444, 0
  br i1 %v2_c448, label %dec_label_pc_c35c.loopexit, label %dec_label_pc_c450.preheader

dec_label_pc_c450.preheader:                      ; preds = %dec_label_pc_c3f0
  %v1_c45439 = inttoptr i32 %v1_c444 to i32*
  %v2_c45440 = call i32 @function_10984(i32* %v1_c45439)
  store i32 %v2_c45440, i32* @r6, align 4
  %v2_c45842 = icmp eq i32 %v2_c45440, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c0dc, i32* @r0, align 4
  br i1 %v2_c45842, label %dec_label_pc_c558, label %dec_label_pc_c468thread-pre-split

dec_label_pc_c450.loopexit:                       ; preds = %dec_label_pc_c470, %dec_label_pc_c508
  %v0_c450 = load i32, i32* @r8, align 4
  %v1_c454 = inttoptr i32 %v0_c450 to i32*
  %v2_c454 = call i32 @function_10984(i32* %v1_c454)
  store i32 %v2_c454, i32* @r6, align 4
  %v2_c458 = icmp eq i32 %v2_c454, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c0dc, i32* @r0, align 4
  br i1 %v2_c458, label %dec_label_pc_c558, label %dec_label_pc_c468thread-pre-split

dec_label_pc_c468thread-pre-split:                ; preds = %dec_label_pc_c450.preheader, %dec_label_pc_c450.loopexit
  %v0_c468.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_c468

dec_label_pc_c468:                                ; preds = %dec_label_pc_c468thread-pre-split, %dec_label_pc_c530
  %v0_c468 = phi i32 [ %v0_c468.pr, %dec_label_pc_c468thread-pre-split ], [ 1, %dec_label_pc_c530 ]
  %v2_c468 = icmp eq i32 %v0_c468, 0
  br i1 %v2_c468, label %dec_label_pc_c470, label %dec_label_pc_c558

dec_label_pc_c470:                                ; preds = %dec_label_pc_c468
  %v0_c470 = call i32 @function_fccc()
  %v0_c474 = load i32, i32* @r5, align 4
  %v2_c47c = inttoptr i32 %v0_c474 to i32*
  %v3_c47c = call i32 @function_f718(i32 3, i32* %v2_c47c)
  store i32 %v2_c0ec, i32* @r0, align 4
  %v3_c488 = call i32 @function_fc60(i8* %v2_c110, i32 %v3_c47c)
  %v2_c490 = call i32 @function_fc38(i8* %v2_c110)
  %v0_c494 = load i32, i32* @r7, align 4
  %v1_c498 = load i32, i32* @sl, align 4
  %v2_c498 = add i32 %v1_c498, %v2_c490
  store i32 %v2_c498, i32* @r0, align 4
  %v2_c49c = inttoptr i32 %v2_c498 to i8*
  %v3_c49c = call i32 @function_fc60(i8* %v2_c49c, i32 %v0_c494)
  %v2_c4a4 = call i32 @function_fc38(i8* %v2_c110)
  %v0_c4a8 = load i32, i32* @r5, align 4
  store i32 %v2_c4a4, i32* @r4, align 4
  %v2_c4b4 = inttoptr i32 %v0_c4a8 to i32*
  %v3_c4b4 = call i32 @function_f718(i32 6, i32* %v2_c4b4)
  %v0_c4bc = load i32, i32* @r4, align 4
  %v1_c4bc = load i32, i32* @sl, align 4
  %v2_c4bc = add i32 %v1_c4bc, %v0_c4bc
  store i32 %v2_c4bc, i32* @r0, align 4
  %v2_c4c0 = inttoptr i32 %v2_c4bc to i8*
  %v3_c4c0 = call i32 @function_fc60(i8* %v2_c4c0, i32 %v3_c4b4)
  %v2_c4c8 = call i32 @function_fc38(i8* %v2_c110)
  %v1_c4d0 = load i32, i32* @sl, align 4
  %v2_c4d0 = add i32 %v1_c4d0, %v2_c4c8
  store i32 %v2_c4d0, i32* @r0, align 4
  %v2_c4d4 = inttoptr i32 %v2_c4d0 to i8*
  %v3_c4d4 = call i32 @function_fc60(i8* %v2_c4d4, i32 ptrtoint (i32* @global_var_157bc.55 to i32))
  %v2_c4dc = call i32 @function_fc38(i8* %v2_c110)
  %v0_c4e0 = load i32, i32* @r6, align 4
  %v1_c4e0 = add i32 %v0_c4e0, 11
  %v1_c4e4 = load i32, i32* @sl, align 4
  %v2_c4e4 = add i32 %v1_c4e4, %v2_c4dc
  store i32 %v2_c4e4, i32* @r0, align 4
  %v2_c4e8 = inttoptr i32 %v2_c4e4 to i8*
  %v3_c4e8 = call i32 @function_fc60(i8* %v2_c4e8, i32 %v1_c4e0)
  %v3_c4f8 = call i32 @function_103a8(i32 %v2_c0ec, i32 %v2_c0dc, i32 4096)
  %v7_c4fc = icmp eq i32 %v3_c4f8, -1
  br i1 %v7_c4fc, label %dec_label_pc_c450.loopexit, label %dec_label_pc_c508

dec_label_pc_c508:                                ; preds = %dec_label_pc_c470
  %v2_c508 = call i32 @function_fc38(i8* %v2_c0fc)
  store i32 %v2_c508, i32* @r1, align 4
  %v4_c51c = call i32 @function_ff88(i8* %v2_c0fc, i32 %v2_c508, i32 %v2_c328.pre-phi)
  %v7_c520 = icmp eq i32 %v4_c51c, -1
  br i1 %v7_c520, label %dec_label_pc_c450.loopexit, label %dec_label_pc_c530

dec_label_pc_c530:                                ; preds = %dec_label_pc_c508
  %v0_c528 = load i32, i32* @r7, align 4
  %v2_c530 = inttoptr i32 %v0_c528 to i8*
  %v3_c530 = call i32 @function_fd5c(i8* %v2_c530, i32 10)
  %v2_c538 = call i32 @function_10410(i32 %v3_c530, i32 9)
  %v0_c53c = load i32, i32* @r8, align 4
  %v1_c540 = inttoptr i32 %v0_c53c to i32*
  %v2_c540 = call i32 @function_10984(i32* %v1_c540)
  store i32 %v2_c540, i32* @r6, align 4
  %v2_c544 = icmp eq i32 %v2_c540, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c0dc, i32* @r0, align 4
  br i1 %v2_c544, label %dec_label_pc_c558, label %dec_label_pc_c468

dec_label_pc_c558:                                ; preds = %dec_label_pc_c450.loopexit, %dec_label_pc_c530, %dec_label_pc_c468, %dec_label_pc_c450.preheader
  %v0_c558 = load i32, i32* @r8, align 4
  %v1_c55c = inttoptr i32 %v0_c558 to i32*
  %v2_c55c = call i32 @function_10678(i32* %v1_c55c)
  %v0_c560 = load i32, i32* @sb, align 4
  %v1_c564 = inttoptr i32 %v0_c560 to i32*
  %v2_c564 = call i32 @function_10984(i32* %v1_c564)
  %v2_c568 = icmp eq i32 %v2_c564, 0
  br i1 %v2_c568, label %dec_label_pc_c570, label %dec_label_pc_c36c

dec_label_pc_c570:                                ; preds = %dec_label_pc_c35c.loopexit, %dec_label_pc_c558, %dec_label_pc_c36c, %dec_label_pc_c35c.preheader
  %v0_c570 = load i32, i32* @sb, align 4
  %v1_c574 = inttoptr i32 %v0_c570 to i32*
  %v2_c574 = call i32 @function_10678(i32* %v1_c574)
  %v0_c578 = load i32, i32* @r5, align 4
  %v1_c578 = urem i32 %v0_c578, 256
  br label %dec_label_pc_c57c

dec_label_pc_c57c:                                ; preds = %dec_label_pc_c33c, %dec_label_pc_c570
  %storemerge = phi i32 [ %v1_c578, %dec_label_pc_c570 ], [ 0, %dec_label_pc_c33c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_c580 = call i32 @function_12540(i32 1)
  br label %dec_label_pc_c588

dec_label_pc_c588:                                ; preds = %dec_label_pc_c31c, %dec_label_pc_c57c
  %v1_c588 = call i32 @function_f73c(i32 3)
  %v1_c590 = call i32 @function_f73c(i32 4)
  %v1_c598 = call i32 @function_f73c(i32 6)
  %v1_c5a0 = call i32 @function_f73c(i32 8)
  %v0_c5a4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c5a4

dec_label_pc_c5a4:                                ; preds = %bb, %dec_label_pc_c588
  %v0_c5a4 = phi i32 [ %v1_c17c, %bb ], [ %v0_c5a4.pre, %dec_label_pc_c588 ]
  store i32 %v3_c094, i32* @r4, align 4
  store i32 %v6_c094, i32* @r5, align 4
  store i32 %v9_c094, i32* @r6, align 4
  store i32 %v12_c094, i32* @r7, align 4
  store i32 %v15_c094, i32* @r8, align 4
  store i32 %v18_c094, i32* @sb, align 4
  store i32 %v21_c094, i32* @sl, align 4
  store i32 %v24_c094, i32* @fp, align 4
  store i32 %v27_c094, i32* @lr, align 4
  ret i32 %v0_c5a4

dec_label_pc_c5b8:                                ; preds = %dec_label_pc_c28c
  %v1_c5b8 = add i32 %v0_c5b8, 1
  %v7_c5bc = icmp eq i32 %v0_c5b8, 0
  br i1 %v7_c5bc, label %dec_label_pc_c5c4, label %dec_label_pc_c294

dec_label_pc_c5c4:                                ; preds = %dec_label_pc_c5b8
  %v1_c5c4 = add i32 %v0_c29c, 3
  %v2_c5c4 = inttoptr i32 %v1_c5c4 to i8*
  %v3_c5c4 = load i8, i8* %v2_c5c4, align 1
  %v7_c5c8 = icmp eq i8 %v3_c5c4, 65
  br i1 %v7_c5c8, label %dec_label_pc_c5dc, label %dec_label_pc_c5d0

dec_label_pc_c5d0:                                ; preds = %dec_label_pc_c5c4, %dec_label_pc_c5dc
  %v0_c2a483 = phi i32 [ %v0_c2a484, %dec_label_pc_c5c4 ], [ 1, %dec_label_pc_c5dc ]
  br label %dec_label_pc_c26c.backedge

dec_label_pc_c26c.backedge:                       ; preds = %dec_label_pc_c5d0, %dec_label_pc_c298
  %v0_c2a482 = phi i32 [ %v0_c2a483, %dec_label_pc_c5d0 ], [ %v0_c2a484, %dec_label_pc_c298 ]
  %v0_c5b874 = phi i32 [ %v1_c5b8, %dec_label_pc_c5d0 ], [ %v0_c298, %dec_label_pc_c298 ]
  %v0_c28c.pr71 = phi i32 [ 0, %dec_label_pc_c5d0 ], [ %v0_c28c.pr72, %dec_label_pc_c298 ]
  %v0_c26c = add i32 %v0_c29c, 1
  %v1_c26c = add i32 %v0_c29c, 3
  %v2_c26c = inttoptr i32 %v1_c26c to i8*
  %v3_c26c = load i8, i8* %v2_c26c, align 1
  %v2_c270 = icmp eq i8 %v3_c26c, 0
  %v1_c274 = add i32 %v0_c27479, 1
  br i1 %v2_c270, label %dec_label_pc_c2a4, label %dec_label_pc_c27c

dec_label_pc_c5dc:                                ; preds = %dec_label_pc_c5c4
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_c5d0

dec_label_pc_c5e4:                                ; preds = %dec_label_pc_c094
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_c140

; uselistorder directives
  uselistorder i32 %v1_c274, { 1, 0 }
  uselistorder i8 %v3_c26c, { 1, 0 }
  uselistorder i32 %v0_c2a482, { 1, 0 }
  uselistorder i32 %v1_c5b8, { 1, 0 }
  uselistorder i32 %v2_c564, { 1, 0 }
  uselistorder i32 %v1_c2d0, { 1, 0 }
  uselistorder i32 %v0_c2dc30, { 1, 0 }
  uselistorder i32 %v1_c2f4, { 0, 3, 1, 2 }
  uselistorder i32 %v0_c298, { 1, 0 }
  uselistorder i32 %v0_c27479, { 1, 0 }
  uselistorder i32 %v0_c5b8, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_c2a484, { 1, 2, 0 }
  uselistorder i32 %v1_c27455, { 1, 0 }
  uselistorder i32 %v2_c258, { 1, 0 }
  uselistorder i32 %v1_c254, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_c214, { 0, 2, 1 }
  uselistorder i32 %v0_c21416, { 1, 0 }
  uselistorder i32 %v1_c1e0, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_c170, { 1, 2, 0 }
  uselistorder i32 %v0_c118, { 1, 0 }
  uselistorder i32 %v2_c114, { 1, 0, 2 }
  uselistorder i8* %v2_c0fc, { 1, 0, 2 }
  uselistorder i32 %v2_c0dc, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i32, i32, i32)* @function_103a8, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_fe98, { 1, 0 }
  uselistorder label %dec_label_pc_c5d0, { 1, 0 }
  uselistorder label %dec_label_pc_c5a4, { 1, 0 }
  uselistorder label %dec_label_pc_c588, { 1, 0 }
  uselistorder label %dec_label_pc_c57c, { 1, 0 }
  uselistorder label %dec_label_pc_c570, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c558, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c468, { 1, 0 }
  uselistorder label %dec_label_pc_c468thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_c450.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_c36c, { 1, 0 }
  uselistorder label %dec_label_pc_c36c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c35c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c2f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c298, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c27c, { 1, 0 }
  uselistorder label %dec_label_pc_c220, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_c184.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c1d4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_c19c, { 1, 0 }
  uselistorder label %dec_label_pc_c140, { 1, 0 }
}

define i32 @function_c610(i32 %arg1) local_unnamed_addr {
dec_label_pc_c610:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %v3_c610 = load i32, i32* @r4, align 4
  %v6_c610 = load i32, i32* @r5, align 4
  %v9_c610 = load i32, i32* @r6, align 4
  %v12_c610 = load i32, i32* @r7, align 4
  %v15_c610 = load i32, i32* @r8, align 4
  %v18_c610 = load i32, i32* @sb, align 4
  %v21_c610 = load i32, i32* @sl, align 4
  %v24_c610 = load i32, i32* @fp, align 4
  %v2_c61c = call i32 @function_102c4(i32* null)
  store i32 %v2_c61c, i32* @r0, align 4
  store i32 %v2_c61c, i32* @r5, align 4
  %v0_c624 = call i32 @function_10334()
  %v7_c628 = icmp eq i32 %v0_c624, -1
  %. = zext i1 %v7_c628 to i32
  %tmp69 = icmp slt i32 %v0_c624, 1
  %storemerge50 = select i1 %tmp69, i32 %., i32 1
  store i32 %storemerge50, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1e254.53 to i32), i32* %r3.global-to-local, align 4
  %v2_c644 = icmp eq i32 %storemerge50, 0
  store i32 %v0_c624, i32* @global_var_1e254.53, align 4
  br i1 %v2_c644, label %dec_label_pc_c65c, label %dec_label_pc_c650

dec_label_pc_c650:                                ; preds = %dec_label_pc_c6ac, %dec_label_pc_c610
  %v1_c658 = phi i32 [ %v0_c624, %dec_label_pc_c610 ], [ 0, %dec_label_pc_c6ac ]
  store i32 %v3_c610, i32* @r4, align 4
  store i32 %v6_c610, i32* @r5, align 4
  store i32 %v9_c610, i32* @r6, align 4
  store i32 %v12_c610, i32* @r7, align 4
  store i32 %v15_c610, i32* @r8, align 4
  store i32 %v18_c610, i32* @sb, align 4
  store i32 %v21_c610, i32* @sl, align 4
  store i32 %v24_c610, i32* @fp, align 4
  ret i32 %v1_c658

dec_label_pc_c65c:                                ; preds = %dec_label_pc_c610
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v1_c670 = call i32 @function_c094(i32 20736)
  %v2_c674 = icmp eq i32 %v1_c670, 0
  br i1 %v2_c674, label %dec_label_pc_c67c, label %dec_label_pc_c8d8

dec_label_pc_c67c:                                ; preds = %dec_label_pc_c65c, %dec_label_pc_c8d8, %dec_label_pc_c900
  %v1_c680 = call i32 @function_12540(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_c688 = call i32 @function_11078()
  %v1_c688 = inttoptr i32 %v0_c688 to i8*
  store i32 %v0_c688, i32* @global_var_202e0.58, align 4
  store i32 ptrtoint (i32* @global_var_1e258.60 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v1_c688, align 1
  %v0_c6a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6a0 = load i32, i32* %r3.global-to-local, align 4
  %v2_c6a0 = inttoptr i32 %v1_c6a0 to i32*
  store i32 %v0_c6a0, i32* %v2_c6a0, align 4
  %v0_c6a4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_c6a4, i32* @fp, align 4
  store i32 400, i32* @r6, align 4
  %v2_c7a0 = ptrtoint i32* %stack_var_-120 to i32
  %v2_c7ac = bitcast i32* %stack_var_-120 to i8*
  %v2_c80c = ptrtoint i32* %stack_var_-632 to i32
  br label %dec_label_pc_c6ac

dec_label_pc_c6ac:                                ; preds = %dec_label_pc_c76c, %dec_label_pc_c67c
  %v1_c6b0 = call i32 @function_f7dc(i32 3)
  %v3_c6bc = call i32 @function_f718(i32 3, i32* null)
  %v1_c6c0 = call i32 @function_10840(i32 %v3_c6bc)
  store i32 %v1_c6c0, i32* @sl, align 4
  %v2_c6c4 = icmp eq i32 %v1_c6c0, 0
  br i1 %v2_c6c4, label %dec_label_pc_c650, label %dec_label_pc_c6cc

dec_label_pc_c6cc:                                ; preds = %dec_label_pc_c6ac
  %v1_c6d0 = call i32 @function_f73c(i32 3)
  %v0_c6d431 = load i32, i32* @sl, align 4
  %v1_c6d832 = inttoptr i32 %v0_c6d431 to i32*
  %v2_c6d833 = call i32 @function_10984(i32* %v1_c6d832)
  %v2_c6dc35 = icmp eq i32 %v2_c6d833, 0
  br i1 %v2_c6dc35, label %dec_label_pc_c76c, label %dec_label_pc_c6e4.preheader

dec_label_pc_c6e4.preheader:                      ; preds = %dec_label_pc_c6cc, %dec_label_pc_c6d4.backedge
  %v0_c6e440 = phi i32 [ %v2_c6d8, %dec_label_pc_c6d4.backedge ], [ %v2_c6d833, %dec_label_pc_c6cc ]
  br label %dec_label_pc_c6e4

dec_label_pc_c6e4:                                ; preds = %dec_label_pc_c6e4.preheader, %dec_label_pc_c754
  %v0_c6f4 = phi i32 [ %v0_c6e440, %dec_label_pc_c6e4.preheader ], [ %v2_c760, %dec_label_pc_c754 ]
  %v1_c6e4 = add i32 %v0_c6f4, 11
  %v2_c6e4 = inttoptr i32 %v1_c6e4 to i8*
  %v3_c6e4 = load i8, i8* %v2_c6e4, align 1
  %v4_c6e4 = zext i8 %v3_c6e4 to i32
  %v1_c6e8 = add nsw i32 %v4_c6e4, -48
  store i32 %v1_c6e8, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_c6e8, 9
  br i1 %tmp, label %dec_label_pc_c6d4.backedge, label %dec_label_pc_c6f4

dec_label_pc_c6f4:                                ; preds = %dec_label_pc_c6e4
  store i32 %v1_c6e4, i32* @r4, align 4
  %v3_c700 = call i32 @function_fd5c(i8* %v2_c6e4, i32 10)
  %v0_c704 = load i32, i32* @r6, align 4
  store i32 %v3_c700, i32* @r8, align 4
  %v0_c70c = load i32, i32* @fp, align 4
  %v1_c70c = add i32 %v0_c70c, 1
  store i32 %v1_c70c, i32* @fp, align 4
  %v5_c710 = icmp slt i32 %v0_c704, %v3_c700
  %v2_c77c = call i32 @function_102c4(i32* null)
  br i1 %v5_c710, label %dec_label_pc_c778, label %dec_label_pc_c714

dec_label_pc_c714:                                ; preds = %dec_label_pc_c6f4
  %v0_c71c = load i32, i32* @r5, align 4
  %v2_c71c = sub i32 %v2_c77c, %v0_c71c
  %v7_c724 = icmp slt i32 %v2_c71c, 601
  br i1 %v7_c724, label %dec_label_pc_c72c, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_c714
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_c6d4.backedge

dec_label_pc_c72c:                                ; preds = %dec_label_pc_c714
  %v0_c72c = load i32, i32* @r8, align 4
  %v7_c730 = icmp slt i32 %v0_c72c, 401
  br i1 %v7_c730, label %dec_label_pc_c6d4.backedge, label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c72c
  %v2_c738 = load i32, i32* @fp, align 4
  %v3_c738 = zext i32 %v2_c738 to i64
  %v4_c738 = mul nuw i64 %v3_c738, 3435973837
  %v3_c73c1 = udiv i64 %v4_c738, 34359738368
  %v3_c7403 = mul nuw nsw i64 %v3_c73c1, 8
  %v3_c740 = trunc i64 %v3_c7403 to i32
  store i32 %v3_c740, i32* %r3.global-to-local, align 4
  %v2_c7445 = mul nuw nsw i64 %v3_c73c1, 2
  %v2_c744 = trunc i64 %v2_c7445 to i32
  %v2_c748 = add i32 %v3_c740, %v2_c744
  store i32 %v2_c748, i32* %r2.global-to-local, align 4
  %v9_c74c = icmp eq i32 %v2_c738, %v2_c748
  br i1 %v9_c74c, label %dec_label_pc_c754, label %dec_label_pc_c6d4.backedge

dec_label_pc_c754:                                ; preds = %dec_label_pc_c734
  %v1_c758 = call i32 @function_12540(i32 1)
  %v0_c75c = load i32, i32* @sl, align 4
  %v1_c760 = inttoptr i32 %v0_c75c to i32*
  %v2_c760 = call i32 @function_10984(i32* %v1_c760)
  %v2_c764 = icmp eq i32 %v2_c760, 0
  br i1 %v2_c764, label %dec_label_pc_c76c, label %dec_label_pc_c6e4

dec_label_pc_c76c:                                ; preds = %dec_label_pc_c6d4.backedge, %dec_label_pc_c754, %dec_label_pc_c6cc
  %v0_c76c = load i32, i32* @sl, align 4
  %v1_c770 = inttoptr i32 %v0_c76c to i32*
  %v2_c770 = call i32 @function_10678(i32* %v1_c770)
  br label %dec_label_pc_c6ac

dec_label_pc_c778:                                ; preds = %dec_label_pc_c6f4
  %v1_c788 = call i32 @function_f7dc(i32 3)
  %v1_c790 = call i32 @function_f7dc(i32 7)
  %v3_c79c = call i32 @function_f718(i32 3, i32* null)
  store i32 %v2_c7a0, i32* @sb, align 4
  store i32 %v2_c7a0, i32* @r0, align 4
  %v3_c7ac = call i32 @function_fc60(i8* %v2_c7ac, i32 %v3_c79c)
  %v1_c7b0 = load i32, i32* @sb, align 4
  %v2_c7b0 = add i32 %v1_c7b0, %v3_c7ac
  store i32 %v2_c7b0, i32* @r5, align 4
  %v0_c7b4 = load i32, i32* @r4, align 4
  store i32 %v2_c7b0, i32* @r0, align 4
  %v2_c7bc = inttoptr i32 %v2_c7b0 to i8*
  %v3_c7bc = call i32 @function_fc60(i8* %v2_c7bc, i32 %v0_c7b4)
  store i32 %v3_c7bc, i32* @r4, align 4
  %v3_c7cc = call i32 @function_f718(i32 7, i32* null)
  %v0_c7d4 = load i32, i32* @r4, align 4
  %v1_c7d4 = load i32, i32* @r5, align 4
  %v2_c7d4 = add i32 %v1_c7d4, %v0_c7d4
  store i32 %v2_c7d4, i32* @r0, align 4
  %v2_c7d8 = inttoptr i32 %v2_c7d4 to i8*
  %v3_c7d8 = call i32 @function_fc60(i8* %v2_c7d8, i32 %v3_c7cc)
  %v1_c7e0 = call i32 @function_f73c(i32 3)
  %v1_c7e8 = call i32 @function_f73c(i32 7)
  %v2_c7f4 = call i32 @function_10250(i32 %v2_c7a0, i32 0)
  %v7_c7f8 = icmp eq i32 %v2_c7f4, -1
  store i32 %v2_c7f4, i32* @r7, align 4
  br i1 %v7_c7f8, label %dec_label_pc_c8a4, label %dec_label_pc_c804

dec_label_pc_c804:                                ; preds = %dec_label_pc_c778
  %v1_c808 = call i32 @function_f7dc(i32 9)
  store i32 %v2_c80c, i32* @r6, align 4
  %v0_c81027 = load i32, i32* @r7, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v1_c81c28 = call i32 @function_103dc(i32 %v0_c81027)
  store i32 %v1_c81c28, i32* @r4, align 4
  %tmp72 = icmp slt i32 %v1_c81c28, 1
  br i1 %tmp72, label %dec_label_pc_c8c4, label %dec_label_pc_c828

dec_label_pc_c828:                                ; preds = %dec_label_pc_c804, %dec_label_pc_c810.backedge
  %v3_c830 = call i32 @function_f718(i32 9, i32* null)
  store i32 %v3_c830, i32* @r5, align 4
  %v3_c840 = call i32 @function_f718(i32 9, i32* null)
  %v1_c844 = inttoptr i32 %v3_c840 to i8*
  %v2_c844 = call i32 @function_fc38(i8* %v1_c844)
  %v0_c848 = load i32, i32* @r4, align 4
  %v5_c84c = icmp slt i32 %v0_c848, %v2_c844
  br i1 %v5_c84c, label %dec_label_pc_c810.backedge, label %.thread12

dec_label_pc_c810.backedge:                       ; preds = %dec_label_pc_c874, %.thread12, %dec_label_pc_c828
  %v0_c810 = load i32, i32* @r7, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v1_c81c = call i32 @function_103dc(i32 %v0_c810)
  store i32 %v1_c81c, i32* @r4, align 4
  %tmp73 = icmp slt i32 %v1_c81c, 1
  br i1 %tmp73, label %dec_label_pc_c8c4, label %dec_label_pc_c828

.thread12:                                        ; preds = %dec_label_pc_c828
  %v1_c85819 = add i32 %v0_c848, -1
  store i32 %v1_c85819, i32* @r4, align 4
  %v2_c85820 = icmp eq i32 %v0_c848, 0
  br i1 %v2_c85820, label %dec_label_pc_c810.backedge, label %dec_label_pc_c860.lr.ph

dec_label_pc_c860.lr.ph:                          ; preds = %.thread12
  %v0_c860.pre = load i32, i32* @r5, align 4
  %v1_c864.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c860

dec_label_pc_c860:                                ; preds = %dec_label_pc_c874, %dec_label_pc_c860.lr.ph
  %v0_c858 = phi i32 [ %v1_c85819, %dec_label_pc_c860.lr.ph ], [ %v1_c858, %dec_label_pc_c874 ]
  %v0_c874 = phi i32 [ 0, %dec_label_pc_c860.lr.ph ], [ %v1_c874, %dec_label_pc_c874 ]
  %v1_c860 = phi i32 [ 0, %dec_label_pc_c860.lr.ph ], [ %v1_c86043, %dec_label_pc_c874 ]
  %v2_c860 = add i32 %v1_c860, %v0_c860.pre
  %v3_c860 = inttoptr i32 %v2_c860 to i8*
  %v4_c860 = load i8, i8* %v3_c860, align 1
  %v6_c860 = zext i8 %v4_c860 to i32
  store i32 %v6_c860, i32* %r2.global-to-local, align 4
  %v2_c864 = add i32 %v0_c874, %v1_c864.pre
  %v3_c864 = inttoptr i32 %v2_c864 to i8*
  %v4_c864 = load i8, i8* %v3_c864, align 1
  %v6_c864 = zext i8 %v4_c864 to i32
  store i32 %v6_c864, i32* %r3.global-to-local, align 4
  %v9_c868 = icmp eq i8 %v4_c864, %v4_c860
  br i1 %v9_c868, label %dec_label_pc_c87c, label %bb74

bb74:                                             ; preds = %dec_label_pc_c860
  br label %dec_label_pc_c874

dec_label_pc_c874:                                ; preds = %bb74, %dec_label_pc_c87c
  %v1_c86043 = phi i32 [ %v1_c87c, %dec_label_pc_c87c ], [ 0, %bb74 ]
  %v1_c874 = add i32 %v0_c874, 1
  %v1_c858 = add i32 %v0_c858, -1
  store i32 %v1_c858, i32* @r4, align 4
  %v2_c858 = icmp eq i32 %v0_c858, 0
  br i1 %v2_c858, label %dec_label_pc_c810.backedge, label %dec_label_pc_c860

dec_label_pc_c87c:                                ; preds = %dec_label_pc_c860
  %v1_c87c = add i32 %v1_c860, 1
  %v9_c880 = icmp eq i32 %v2_c844, %v1_c87c
  br i1 %v9_c880, label %dec_label_pc_c888, label %dec_label_pc_c874

dec_label_pc_c888:                                ; preds = %dec_label_pc_c87c
  %v1_c88c = call i32 @function_f73c(i32 9)
  %v0_c890 = load i32, i32* @r7, align 4
  %v1_c894 = call i32 @function_10644(i32 %v0_c890)
  %v0_c898 = load i32, i32* @r8, align 4
  %v2_c8a0 = call i32 @function_10410(i32 %v0_c898, i32 9)
  br label %dec_label_pc_c8a4

dec_label_pc_c8a4:                                ; preds = %dec_label_pc_c778, %dec_label_pc_c8c4, %dec_label_pc_c888
  store i32 %v2_c7a0, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_c8ac = call i32 @function_fccc()
  %v1_c8b4 = call i32 @function_12540(i32 1)
  store i32 %v2_c77c, i32* @r5, align 4
  %v0_c8bc = load i32, i32* @r8, align 4
  store i32 %v0_c8bc, i32* @r6, align 4
  br label %dec_label_pc_c6d4.backedge

dec_label_pc_c6d4.backedge:                       ; preds = %dec_label_pc_c734, %dec_label_pc_c72c, %dec_label_pc_c6e4, %dec_label_pc_c8a4, %.thread7
  %v0_c6d4 = load i32, i32* @sl, align 4
  %v1_c6d8 = inttoptr i32 %v0_c6d4 to i32*
  %v2_c6d8 = call i32 @function_10984(i32* %v1_c6d8)
  %v2_c6dc = icmp eq i32 %v2_c6d8, 0
  br i1 %v2_c6dc, label %dec_label_pc_c76c, label %dec_label_pc_c6e4.preheader

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c810.backedge, %dec_label_pc_c804
  %v1_c8c8 = call i32 @function_f73c(i32 9)
  %v0_c8cc = load i32, i32* @r7, align 4
  %v1_c8d0 = call i32 @function_10644(i32 %v0_c8cc)
  br label %dec_label_pc_c8a4

dec_label_pc_c8d8:                                ; preds = %dec_label_pc_c65c
  %v2_c660 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_c660, i32* %r3.global-to-local, align 4
  %v0_c8e0 = load i32, i32* @r4, align 4
  store i32 %v0_c8e0, i32* %r2.global-to-local, align 4
  %v3_c8f0 = call i32 @function_10e30(i32 2, i32 1, i32 %v0_c8e0)
  %v7_c8f4 = icmp eq i32 %v3_c8f0, -1
  store i32 %v3_c8f0, i32* @r4, align 4
  br i1 %v7_c8f4, label %dec_label_pc_c67c, label %dec_label_pc_c900

dec_label_pc_c900:                                ; preds = %dec_label_pc_c8d8
  %v2_c900 = ptrtoint i32* %stack_var_-56 to i32
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_c908 = call i32 @function_10be0(i32 %v3_c8f0, i32 %v2_c900, i32 16)
  %v0_c90c = load i32, i32* @r4, align 4
  %v2_c914 = call i32 @function_10ccc(i32 %v0_c90c, i32 1)
  br label %dec_label_pc_c67c

; uselistorder directives
  uselistorder i32 %v3_c8f0, { 2, 1, 0 }
  uselistorder i32 %v2_c6d8, { 1, 0 }
  uselistorder i32 %v1_c87c, { 1, 0 }
  uselistorder i32 %v1_c858, { 1, 0 }
  uselistorder i32 %v1_c860, { 1, 0 }
  uselistorder i32 %v0_c874, { 1, 0 }
  uselistorder i32 %v0_c858, { 1, 0 }
  uselistorder i32 %v0_c848, { 1, 0, 2 }
  uselistorder i32 %v2_c844, { 1, 0 }
  uselistorder i32 %v2_c7f4, { 1, 0 }
  uselistorder i32 %v2_c760, { 1, 0 }
  uselistorder i32 %storemerge50, { 1, 0 }
  uselistorder i32 %v0_c624, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-56, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32*)* @function_10984, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_10840, { 2, 1, 0 }
  uselistorder i32* @global_var_1e254.53, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c6d4.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_c8a4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c874, { 1, 0 }
  uselistorder label %dec_label_pc_c828, { 1, 0 }
  uselistorder label %dec_label_pc_c6e4, { 1, 0 }
  uselistorder label %dec_label_pc_c6e4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c67c, { 2, 1, 0 }
}

define i32 @function_c92c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c92c:
  store i32 51524, i32* inttoptr (i32 123020 to i32*), align 4
  ret i32 %arg1
}

define i32 @function_c944(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_c944:
  %v1_c94c = call i32 @function_f7dc(i32 2)
  store i32 ptrtoint (i16** @global_var_202e4.65 to i32), i32* @r4, align 4
  store i32 -1340234311, i32* @global_var_202e8.67, align 4
  %v3_c964 = call i32 @function_f718(i32 2, i32* null)
  %v4_c964 = inttoptr i32 %v3_c964 to i16*
  %v3_c968 = load i16, i16* %v4_c964, align 2
  store i16 %v3_c968, i16* bitcast (i32* @global_var_202e6.68 to i16*), align 4
  %v1_c974 = call i32 @function_f73c(i32 2)
  ret i32 %v1_c974
}

define i32 @function_c988(i32 %arg1) local_unnamed_addr {
dec_label_pc_c988:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_c988 = load i32, i32* @r6, align 4
  %v12_c988 = load i32, i32* @r7, align 4
  %v15_c988 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_c9a4 = call i32 @function_10e30(i32 2, i32 1, i32 0)
  store i32 %v3_c9a4, i32* %r0.global-to-local, align 4
  store i32 123012, i32* @r6, align 4
  %v7_c9ac = icmp eq i32 %v3_c9a4, -1
  store i32 %v3_c9a4, i32* inttoptr (i32 123012 to i32*), align 4
  br i1 %v7_c9ac, label %dec_label_pc_c988.dec_label_pc_ca64_crit_edge, label %dec_label_pc_c9b8

dec_label_pc_c988.dec_label_pc_ca64_crit_edge:    ; preds = %dec_label_pc_c988
  %v1_ca6c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ca64

dec_label_pc_c9b8:                                ; preds = %dec_label_pc_c988
  %v2_c9b8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_c9b8, i32* @r3, align 4
  %v0_c9bc = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_c9cc = load i32, i32* %r0.global-to-local, align 4
  %v5_c9cc = call i32 @function_10dec(i32 %v0_c9cc, i32 %v0_c9bc, i32 2, i32 %v2_c9b8, i32 4)
  store i32 %v5_c9cc, i32* %r0.global-to-local, align 4
  %v0_c9d0 = load i32, i32* @r6, align 4
  %v1_c9d0 = inttoptr i32 %v0_c9d0 to i32*
  %v2_c9d0 = load i32, i32* %v1_c9d0, align 4
  store i32 %v2_c9d0, i32* %r0.global-to-local, align 4
  %v2_c9e0 = call i32 @function_10478(i32 %v2_c9d0, i32 3)
  %v0_c9e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_c9d0, i32* %r0.global-to-local, align 4
  %v2_c9f0 = call i32 @function_10478(i32 %v2_c9d0, i32 %v0_c9e4)
  store i32 %v2_c9f0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_ca20 = call i32 @function_10a6c()
  store i32 %v0_ca20, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_ca28 = inttoptr i32 %v0_ca20 to i32*
  store i32 0, i32* %v2_ca28, align 4
  %v2_ca2c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_ca2c, i32* @r5, align 4
  store i32 %v0_ca20, i32* @r4, align 4
  %v0_ca3c = load i32, i32* @r6, align 4
  %v1_ca3c = inttoptr i32 %v0_ca3c to i32*
  %v2_ca3c = load i32, i32* %v1_ca3c, align 4
  store i32 %v2_ca3c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_ca48 = call i32 @function_10be0(i32 %v2_ca3c, i32 %v2_ca2c, i32 16)
  store i32 %v3_ca48, i32* %r0.global-to-local, align 4
  %v7_ca4c = icmp eq i32 %v3_ca48, -1
  br i1 %v7_ca4c, label %dec_label_pc_ca70, label %dec_label_pc_ca54

dec_label_pc_ca54:                                ; preds = %dec_label_pc_c9b8
  %v2_ca5c = load i32, i32* inttoptr (i32 123012 to i32*), align 4
  store i32 %v2_ca5c, i32* %r0.global-to-local, align 4
  %v2_ca60 = call i32 @function_10ccc(i32 %v2_ca5c, i32 1)
  store i32 %v2_ca60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ca64

dec_label_pc_ca64:                                ; preds = %dec_label_pc_c988.dec_label_pc_ca64_crit_edge, %dec_label_pc_ca7c, %dec_label_pc_ca54
  %v1_ca6c = phi i32 [ %v1_ca6c.pre, %dec_label_pc_c988.dec_label_pc_ca64_crit_edge ], [ %v1_cac4, %dec_label_pc_ca7c ], [ %v2_ca60, %dec_label_pc_ca54 ]
  store i32 %v9_c988, i32* @r6, align 4
  store i32 %v12_c988, i32* @r7, align 4
  store i32 %v15_c988, i32* @r8, align 4
  ret i32 %v1_ca6c

dec_label_pc_ca70:                                ; preds = %dec_label_pc_c9b8
  %v0_ca70 = load i32, i32* @r4, align 4
  %v1_ca70 = inttoptr i32 %v0_ca70 to i32*
  %v2_ca70 = load i32, i32* %v1_ca70, align 4
  %v7_ca74 = icmp eq i32 %v2_ca70, 99
  br i1 %v7_ca74, label %dec_label_pc_cacc, label %dec_label_pc_ca7c

dec_label_pc_ca7c:                                ; preds = %dec_label_pc_cacc, %bb, %dec_label_pc_ca70
  %v0_ca94 = load i32, i32* @r6, align 4
  %v1_ca94 = inttoptr i32 %v0_ca94 to i32*
  %v2_ca94 = load i32, i32* %v1_ca94, align 4
  store i32 %v2_ca94, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_caa4 = call i32 @function_10c18(i32 %v2_ca94, i32 %v2_ca2c, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_caac = call i32 @function_12540(i32 5)
  store i32 %v1_caac, i32* %r0.global-to-local, align 4
  %v0_cab0 = load i32, i32* @r6, align 4
  %v1_cab0 = inttoptr i32 %v0_cab0 to i32*
  %v2_cab0 = load i32, i32* %v1_cab0, align 4
  store i32 %v2_cab0, i32* %r0.global-to-local, align 4
  %v1_cab4 = call i32 @function_10644(i32 %v2_cab0)
  store i32 add (i32 ptrtoint (i32* @global_var_e600.72 to i32), i32 -69), i32* %r0.global-to-local, align 4
  %v1_cac0 = call i32 @function_c094(i32 add (i32 ptrtoint (i32* @global_var_e600.72 to i32), i32 -69))
  store i32 %v1_cac0, i32* %r0.global-to-local, align 4
  %v1_cac4 = call i32 @function_c988(i32 %v1_cac0)
  store i32 %v1_cac4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ca64

dec_label_pc_cacc:                                ; preds = %dec_label_pc_ca70
  %v0_cacc = load i32, i32* @r8, align 4
  %v1_cacc = inttoptr i32 %v0_cacc to i8*
  %v2_cacc = load i8, i8* %v1_cacc, align 1
  %v3_cacc = zext i8 %v2_cacc to i32
  %v1_cad0 = load i32, i32* @r7, align 4
  %v9_cad0 = icmp eq i32 %v3_cacc, %v1_cad0
  br i1 %v9_cad0, label %dec_label_pc_ca7c, label %bb

bb:                                               ; preds = %dec_label_pc_cacc
  %v2_cad8 = trunc i32 %v1_cad0 to i8
  store i8 %v2_cad8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_ca7c

; uselistorder directives
  uselistorder i32 %v1_cac4, { 1, 0 }
  uselistorder i32 %v2_ca2c, { 1, 0, 2 }
  uselistorder i32 %v2_c9d0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c9a4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 9, 10, 2, 12, 11, 1, 13, 0, 14, 15, 17, 16, 18, 19, 6, 7, 8, 5 }
  uselistorder i32 (i32, i32, i32)* @function_10be0, { 0, 2, 1 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder label %dec_label_pc_ca7c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ca64, { 1, 2, 0 }
}

define i32 @function_cae0(i32 %arg1, i32 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_cae0:
  %v0_cae0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_cae0, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_cae0
  %v4_cae8 = load i64, i64* %arg3, align 4
  %v7_cae8 = udiv i64 %v4_cae8, 4294967296
  %v8_cae8 = trunc i64 %v7_cae8 to i32
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_cae0, %bb
  %v12_cae8 = phi i32 [ %arg1, %dec_label_pc_cae0 ], [ %v8_cae8, %bb ]
  ret i32 %v12_cae8

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_caec(i32 %arg1) local_unnamed_addr {
dec_label_pc_caec:
  %stack_var_-20 = alloca i32, align 4
  %v3_caec = load i32, i32* @r4, align 4
  %v6_caec = load i32, i32* @r5, align 4
  %v9_caec = load i32, i32* @lr, align 4
  %v0_caf4 = call i32 @function_10334()
  %v7_caf8 = icmp eq i32 %v0_caf4, -1
  %. = zext i1 %v7_caf8 to i32
  %tmp11 = icmp slt i32 %v0_caf4, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_cb14 = icmp eq i32 %storemerge4, 0
  store i32 %v0_caf4, i32* @global_var_1e25c.74, align 4
  br i1 %v2_cb14, label %dec_label_pc_cb2c, label %dec_label_pc_cb20

dec_label_pc_cb20:                                ; preds = %dec_label_pc_caec
  store i32 %v3_caec, i32* @r4, align 4
  store i32 %v6_caec, i32* @r5, align 4
  store i32 %v9_caec, i32* @lr, align 4
  ret i32 %v0_caf4

dec_label_pc_cb2c:                                ; preds = %dec_label_pc_caec
  store i32 1, i32* %stack_var_-20, align 4
  %v1_cb38 = call i32 @function_f7dc(i32 13)
  %v1_cb40 = call i32 @function_f7dc(i32 14)
  %v0_cb44 = load i32, i32* @r5, align 4
  %v2_cb4c = inttoptr i32 %v0_cb44 to i32*
  %v3_cb4c = call i32 @function_f718(i32 13, i32* %v2_cb4c)
  %v2_cb54 = call i32 @function_10250(i32 %v3_cb4c, i32 2)
  %v7_cb58 = icmp eq i32 %v2_cb54, -1
  store i32 %v2_cb54, i32* @r4, align 4
  br i1 %v7_cb58, label %dec_label_pc_cba0, label %dec_label_pc_cb64

dec_label_pc_cb64:                                ; preds = %dec_label_pc_cba0, %dec_label_pc_cb2c
  %v0_cb70 = phi i32 [ %v2_cbb0, %dec_label_pc_cba0 ], [ %v2_cb54, %dec_label_pc_cb2c ]
  %v2_cb74 = ptrtoint i32* %stack_var_-20 to i32
  %v3_cb78 = call i32 @function_105b8(i32 %v0_cb70, i32 -2147199228, i32 %v2_cb74)
  br label %dec_label_pc_cb7c

dec_label_pc_cb7c:                                ; preds = %dec_label_pc_cb7c, %dec_label_pc_cb64
  %v0_cb88 = load i32, i32* @r4, align 4
  %v3_cb90 = call i32 @function_105b8(i32 %v0_cb88, i32 -2147199227, i32 0)
  %v1_cb98 = call i32 @function_12540(i32 10)
  br label %dec_label_pc_cb7c

dec_label_pc_cba0:                                ; preds = %dec_label_pc_cb2c
  %v0_cba0 = load i32, i32* @r5, align 4
  %v2_cba8 = inttoptr i32 %v0_cba0 to i32*
  %v3_cba8 = call i32 @function_f718(i32 14, i32* %v2_cba8)
  %v2_cbb0 = call i32 @function_10250(i32 %v3_cba8, i32 2)
  %v3_cbb4 = icmp eq i32 %v2_cbb0, -1
  store i32 %v2_cbb0, i32* @r4, align 4
  br i1 %v3_cbb4, label %dec_label_pc_cbc0, label %dec_label_pc_cb64

dec_label_pc_cbc0:                                ; preds = %dec_label_pc_cba0
  %v1_cbc4 = call i32 @function_f73c(i32 13)
  %v1_cbcc = call i32 @function_f73c(i32 14)
  %v0_cbd0 = load i32, i32* @r5, align 4
  %v1_cbd4 = call i32 @function_12488(i32 %v0_cbd0)
  %v0_cbd8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_cbd8, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_cbc0
  %v2_cbd8 = load i32, i32* @ip, align 4
  %v8_cbd8 = ashr i32 %v2_cbd8, %arg1
  %v9_cbd8 = and i32 %v8_cbd8, 2
  store i32 %v9_cbd8, i32* @lr, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_cbc0, %bb14
  ret i32 %v1_cbd4

; uselistorder directives
  uselistorder i32 %v2_cbb0, { 1, 2, 0 }
  uselistorder i32 %v2_cb54, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_caf4, { 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_cbdc(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_cbdc:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v15_cbdc = load i32, i32* @r8, align 4
  %v2_cbec = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_cbec, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_cc04 = call i32 @function_10ec8(i32* nonnull %stack_var_-64)
  store i32 %v2_cbec, i32* @r0, align 4
  %v2_cc10 = call i32 @function_10e84(i32 %v2_cbec, i32 2)
  %v0_cc14 = load i32, i32* @r5, align 4
  store i32 %v0_cc14, i32* %r2.global-to-local, align 4
  %v3_cc20 = call i32 @function_1060c(i32 %v0_cc14, i32 %v2_cbec, i32 %v0_cc14)
  %v2_cc2c = call i32 @function_10edc(i32 17, i32 1)
  %v2_cc38 = call i32 @function_10edc(i32 5, i32 51500)
  %v0_cc3c = call i32 @function_fef4()
  store i32 ptrtoint (i16** @global_var_202e4.65 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_202e8.67, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_cc3c, i32* @global_var_202dc.42, align 4
  store i16 5888, i16* bitcast (i32* @global_var_202e6.68 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_202e4.65 to i16*), align 4
  %v6_cc64 = call i32 @function_f87c(i32 %v0_cc3c, i32 ptrtoint (i32* @global_var_202dc.42 to i32), i32 ptrtoint (i16** @global_var_202e4.65 to i32), i32 5888)
  store i32 51524, i32* %r3.global-to-local, align 4
  store i32 123020, i32* @lr, align 4
  %v2_cc70 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_cc70, i32* @sb, align 4
  store i32 51524, i32* inttoptr (i32 123020 to i32*), align 4
  %v1_cc78 = call i32 @function_c988(i32 %v6_cc64)
  %v1_cc7c = call i32 @function_d404(i32 %v1_cc78)
  store i32 %v2_cc70, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_cc88 = call i32 @function_fccc()
  %v0_cc8c = load i32, i32* @r6, align 4
  %v7_cc8c = icmp eq i32 %v0_cc8c, 2
  br i1 %v7_cc8c, label %dec_label_pc_cdbc, label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cdbc, %dec_label_pc_cbdc, %dec_label_pc_cdcc
  %v0_cc94 = call i32 @function_d3a8()
  store i32 %v0_cc94, i32* @r6, align 4
  %v0_cc9c = load i32, i32* @r8, align 4
  %v1_cc9c = inttoptr i32 %v0_cc9c to i32*
  %v2_cc9c = load i32, i32* %v1_cc9c, align 4
  %v1_cca0 = inttoptr i32 %v2_cc9c to i8*
  %v2_cca0 = call i32 @function_fc38(i8* %v1_cca0)
  %v0_cca8 = load i32, i32* @r8, align 4
  %v1_cca8 = inttoptr i32 %v0_cca8 to i32*
  %v2_cca8 = load i32, i32* %v1_cca8, align 4
  %v1_ccac = inttoptr i32 %v2_cca8 to i8*
  %v2_ccac = call i32 @function_fc38(i8* %v1_ccac)
  %v1_ccb0 = sub i32 20, %v2_cca0
  store i32 %v2_ccac, i32* @r4, align 4
  %v0_ccb8 = load i32, i32* @r6, align 4
  %v2_ccbc = call i32 @function_10210(i32 %v0_ccb8, i32 %v1_ccb0)
  %v2_ccc0 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_ccc0, i32* @r5, align 4
  %v0_ccc4 = load i32, i32* @r4, align 4
  %v2_ccc4 = add i32 %v0_ccc4, %v1_ccb0
  store i32 %v2_ccc4, i32* @r4, align 4
  %v2_ccd0 = call i32 @function_d46c(i32 %v2_ccc0, i32 %v2_ccc4)
  %v2_ccd4 = ptrtoint i32* %stack_var_-40 to i32
  %v1_ccd8 = load i32, i32* @r4, align 4
  %v2_ccd8 = add i32 %v1_ccd8, %v2_ccd4
  store i32 %v2_ccd8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_cce4 = load i32, i32* @r8, align 4
  %v1_cce4 = inttoptr i32 %v0_cce4 to i32*
  %v2_cce4 = load i32, i32* %v1_cce4, align 4
  store i32 %v2_cce4, i32* @r0, align 4
  %v3_cce8 = add i32 %v2_ccd8, -80
  %v4_cce8 = inttoptr i32 %v3_cce8 to i8*
  store i8 0, i8* %v4_cce8, align 1
  %v2_ccec = inttoptr i32 %v2_cce4 to i8*
  %v3_ccec = call i32 @function_fc60(i8* %v2_ccec, i32 %v2_ccc0)
  store i32 32, i32* @r1, align 4
  store i32 %v2_ccc0, i32* @r0, align 4
  %v0_ccf8 = call i32 @function_fccc()
  %v0_ccfc = call i32 @function_d3a8()
  store i32 %v0_ccfc, i32* @r7, align 4
  %v0_cd04 = load i32, i32* @r8, align 4
  %v1_cd04 = inttoptr i32 %v0_cd04 to i32*
  %v2_cd04 = load i32, i32* %v1_cd04, align 4
  %v1_cd08 = inttoptr i32 %v2_cd04 to i8*
  %v2_cd08 = call i32 @function_fc38(i8* %v1_cd08)
  store i32 %v2_cd08, i32* @r6, align 4
  %v0_cd10 = load i32, i32* @r8, align 4
  %v1_cd10 = inttoptr i32 %v0_cd10 to i32*
  %v2_cd10 = load i32, i32* %v1_cd10, align 4
  %v1_cd14 = inttoptr i32 %v2_cd10 to i8*
  %v2_cd14 = call i32 @function_fc38(i8* %v1_cd14)
  %v0_cd18 = load i32, i32* @r6, align 4
  %v1_cd18 = sub i32 20, %v0_cd18
  store i32 %v2_cd14, i32* @r4, align 4
  %v0_cd20 = load i32, i32* @r7, align 4
  %v2_cd24 = call i32 @function_10210(i32 %v0_cd20, i32 %v1_cd18)
  %v0_cd28 = load i32, i32* @r4, align 4
  %v2_cd28 = add i32 %v0_cd28, %v1_cd18
  store i32 %v2_cd28, i32* @r4, align 4
  %v2_cd34 = call i32 @function_d46c(i32 %v2_ccc0, i32 %v2_cd28)
  store i32 %v2_ccd4, i32* %r2.global-to-local, align 4
  %v1_cd3c = load i32, i32* @r4, align 4
  %v2_cd3c = add i32 %v1_cd3c, %v2_ccd4
  store i32 %v2_cd3c, i32* %r3.global-to-local, align 4
  %v0_cd40 = load i32, i32* @sl, align 4
  %v1_cd40 = trunc i32 %v0_cd40 to i8
  %v3_cd40 = add i32 %v2_cd3c, -80
  %v4_cd40 = inttoptr i32 %v3_cd40 to i8*
  store i8 %v1_cd40, i8* %v4_cd40, align 1
  %v4_cd4c = call i32 @function_102f4(i32 15, i32 %v2_ccc0, i32 %v2_ccd4, i32 %v2_cd3c)
  %v1_cd54 = call i32 @function_f7dc(i32 1)
  %v3_cd64 = call i32 @function_f718(i32 1, i32* nonnull %stack_var_-48)
  %v3_cd68 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_cd68, i32* %r2.global-to-local, align 4
  %v2_cd74 = call i32 @function_10550(i32 1, i32 %v3_cd64)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_cd84 = call i32 @function_10550(i32 1, i32 ptrtoint (i32* @global_var_157c0.82 to i32))
  %v1_cd8c = call i32 @function_f73c(i32 1)
  %v1_cd90 = call i32 @function_8560(i32 %v1_cd8c)
  %v1_cd94 = call i32 @function_c610(i32 %v1_cd90)
  store i32 %v1_cd94, i32* @r0, align 4
  %v1_cd98 = call i32 @function_caec(i32 %v1_cd94)
  store i32 %v1_cd98, i32* @r0, align 4
  %v0_cd9c = call i32 @function_10334()
  %v1_cda0 = load i32, i32* @sl, align 4
  %v7_cda4 = icmp sgt i32 %v0_cd9c, %v1_cda0
  br i1 %v7_cda4, label %dec_label_pc_cda8, label %dec_label_pc_cdf4

dec_label_pc_cda8:                                ; preds = %dec_label_pc_cc94
  store i32 %v15_cbdc, i32* %r8.global-to-local, align 4
  ret i32 %v1_cda0

dec_label_pc_cdbc:                                ; preds = %dec_label_pc_cbdc
  %v0_cdbc = load i32, i32* @r8, align 4
  %v1_cdbc = add i32 %v0_cdbc, 4
  %v2_cdbc = inttoptr i32 %v1_cdbc to i32*
  %v3_cdbc = load i32, i32* %v2_cdbc, align 4
  %v1_cdc0 = inttoptr i32 %v3_cdbc to i8*
  %v2_cdc0 = call i32 @function_fc38(i8* %v1_cdc0)
  %v8_cdc8 = icmp sgt i32 %v2_cdc0, 31
  br i1 %v8_cdc8, label %dec_label_pc_cc94, label %dec_label_pc_cdcc

dec_label_pc_cdcc:                                ; preds = %dec_label_pc_cdbc
  %v0_cdcc = load i32, i32* @r8, align 4
  %v1_cdcc = add i32 %v0_cdcc, 4
  %v2_cdcc = inttoptr i32 %v1_cdcc to i32*
  %v3_cdcc = load i32, i32* %v2_cdcc, align 4
  store i32 %v2_cc70, i32* @r0, align 4
  %v2_cdd4 = bitcast i32* %stack_var_-152 to i8*
  %v3_cdd4 = call i32 @function_fc60(i8* %v2_cdd4, i32 %v3_cdcc)
  %v0_cdd8 = load i32, i32* @r8, align 4
  %v1_cdd8 = add i32 %v0_cdd8, 4
  %v2_cdd8 = inttoptr i32 %v1_cdd8 to i32*
  %v3_cdd8 = load i32, i32* %v2_cdd8, align 4
  %v1_cde0 = inttoptr i32 %v3_cdd8 to i8*
  %v2_cde0 = call i32 @function_fc38(i8* %v1_cde0)
  store i32 %v2_cde0, i32* @r1, align 4
  store i32 %v3_cdd8, i32* @r0, align 4
  %v0_cdec = call i32 @function_fccc()
  br label %dec_label_pc_cc94

dec_label_pc_cdf4:                                ; preds = %dec_label_pc_cc94
  %v1_cdf4 = call i32 @function_10584(i32 %v0_cd9c)
  %v0_cdfc = load i32, i32* @sl, align 4
  %v1_ce00 = call i32 @function_10644(i32 %v0_cdfc)
  %v1_ce08 = call i32 @function_10644(i32 1)
  %v1_ce10 = call i32 @function_10644(i32 2)
  store i32 123016, i32* @fp, align 4
  %v1_ce18 = call i32 @function_8560(i32 %v1_ce10)
  %v1_ce1c = call i32 @function_c610(i32 %v1_ce18)
  store i32 %v1_ce1c, i32* @r0, align 4
  %v1_ce20 = call i32 @function_caec(i32 %v1_ce1c)
  store i32 %v1_ce20, i32* @r0, align 4
  %v1_ce24 = call i32 @function_dca4(i32 %v1_ce20)
  %v0_ce28 = load i32, i32* @sl, align 4
  %v2_ce2c = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_ce2c, i32* @r7, align 4
  %v2_ce30 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_ce30, i32* @r6, align 4
  %v2_cf10 = ptrtoint i32* %stack_var_-72 to i32
  %v2_cf60 = ptrtoint i32* %stack_var_-168 to i32
  %v2_d13c = ptrtoint i32* %stack_var_-56 to i32
  %v2_d144 = ptrtoint i8** %stack_var_-42 to i32
  %v2_d2ec = ptrtoint i32* %stack_var_-1432 to i32
  %v2_d160 = ptrtoint i32* %stack_var_-52 to i32
  %v1_d214 = bitcast i32* %stack_var_-152 to i8*
  %v2_d1d4 = ptrtoint i32* %stack_var_-88 to i32
  %v1_d1f0 = sub i32 0, %v1_cdf4
  br label %dec_label_pc_ce34

dec_label_pc_ce34:                                ; preds = %dec_label_pc_d274, %dec_label_pc_d310, %bb43, %dec_label_pc_d210, %dec_label_pc_d044, %dec_label_pc_d034, %bb40, %dec_label_pc_d364, %dec_label_pc_d2d0, %dec_label_pc_d284, %dec_label_pc_d260, %dec_label_pc_d18c, %dec_label_pc_d0b4, %dec_label_pc_cfec, %dec_label_pc_cdf4
  %stack_var_-1436.0 = phi i32 [ %v0_ce28, %dec_label_pc_cdf4 ], [ %stack_var_-1436.0, %bb40 ], [ %stack_var_-1436.1, %dec_label_pc_d034 ], [ %stack_var_-1436.1, %dec_label_pc_d044 ], [ %stack_var_-1436.1, %bb43 ], [ %stack_var_-1436.1, %dec_label_pc_d284 ], [ %stack_var_-1436.1, %dec_label_pc_d0b4 ], [ %stack_var_-1436.1, %dec_label_pc_d310 ], [ %stack_var_-1436.1, %dec_label_pc_d364 ], [ %stack_var_-1436.1, %dec_label_pc_d2d0 ], [ %stack_var_-1436.1, %dec_label_pc_cfec ], [ %stack_var_-1436.1, %dec_label_pc_d210 ], [ %stack_var_-1436.1, %dec_label_pc_d260 ], [ %stack_var_-1436.1, %dec_label_pc_d18c ], [ %stack_var_-1436.1, %dec_label_pc_d274 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %dec_label_pc_ce40, %dec_label_pc_ce34
  %v1_ce44 = phi i32 [ %v1_ce48, %dec_label_pc_ce40 ], [ 4, %dec_label_pc_ce34 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ce44 = load i32, i32* @r7, align 4
  %v3_ce44 = add i32 %v2_ce44, %v1_ce44
  %v4_ce44 = inttoptr i32 %v3_ce44 to i32*
  store i32 0, i32* %v4_ce44, align 4
  %v0_ce48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce48 = add i32 %v0_ce48, 4
  store i32 %v1_ce48, i32* %r3.global-to-local, align 4
  %v7_ce4c = icmp eq i32 %v1_ce48, 128
  br i1 %v7_ce4c, label %dec_label_pc_ce54, label %dec_label_pc_ce40

dec_label_pc_ce54:                                ; preds = %dec_label_pc_ce40
  %v0_ce54 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ce54, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ce5c

dec_label_pc_ce5c:                                ; preds = %dec_label_pc_ce5c, %dec_label_pc_ce54
  %v1_ce60 = phi i32 [ %v1_ce64, %dec_label_pc_ce5c ], [ 4, %dec_label_pc_ce54 ]
  store i32 0, i32* @r4, align 4
  %v2_ce60 = load i32, i32* @r6, align 4
  %v3_ce60 = add i32 %v2_ce60, %v1_ce60
  %v4_ce60 = inttoptr i32 %v3_ce60 to i32*
  store i32 0, i32* %v4_ce60, align 4
  %v0_ce64 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce64 = add i32 %v0_ce64, 4
  store i32 %v1_ce64, i32* %r3.global-to-local, align 4
  %v7_ce68 = icmp eq i32 %v1_ce64, 128
  br i1 %v7_ce68, label %dec_label_pc_ce70, label %dec_label_pc_ce5c

dec_label_pc_ce70:                                ; preds = %dec_label_pc_ce5c
  store i32 123012, i32* %r3.global-to-local, align 4
  %v2_ce74 = load i32, i32* inttoptr (i32 123012 to i32*), align 4
  %v7_ce78 = icmp eq i32 %v2_ce74, -1
  br i1 %v7_ce78, label %dec_label_pc_cea4, label %dec_label_pc_ce80

dec_label_pc_ce80:                                ; preds = %dec_label_pc_ce70
  %v3_ce80 = udiv i32 %v2_ce74, 32
  %v3_ce84 = mul nuw nsw i32 %v3_ce80, 4
  store i32 %v2_ccd4, i32* %ip.global-to-local, align 4
  %v2_ce8c = add i32 %v3_ce84, %v2_ccd4
  store i32 %v2_ce8c, i32* %r3.global-to-local, align 4
  %v1_ce90 = add i32 %v2_ce8c, -240
  %v2_ce90 = inttoptr i32 %v1_ce90 to i32*
  %v3_ce90 = load i32, i32* %v2_ce90, align 4
  %v1_ce94 = urem i32 %v2_ce74, 32
  %v7_ce9c = shl i32 1, %v1_ce94
  %v8_ce9c = or i32 %v3_ce90, %v7_ce9c
  store i32 %v8_ce9c, i32* %r2.global-to-local, align 4
  store i32 %v8_ce9c, i32* %v2_ce90, align 4
  br label %dec_label_pc_cea4

dec_label_pc_cea4:                                ; preds = %dec_label_pc_ce70, %dec_label_pc_ce80
  %v0_cea4 = load i32, i32* @fp, align 4
  %v1_cea4 = inttoptr i32 %v0_cea4 to i32*
  %v2_cea4 = load i32, i32* %v1_cea4, align 4
  store i32 %v2_cea4, i32* @r3, align 4
  %v7_cea8 = icmp eq i32 %v2_cea4, -1
  store i32 123016, i32* %r8.global-to-local, align 4
  br i1 %v7_cea8, label %dec_label_pc_d0cc, label %dec_label_pc_ceb4

dec_label_pc_ceb4:                                ; preds = %dec_label_pc_d0cc, %dec_label_pc_cea4, %bb42
  %v2_ceb8 = load i8, i8* bitcast (i8** @global_var_1e260.86 to i8*), align 4
  %v3_ceb8 = zext i8 %v2_ceb8 to i32
  store i32 %v3_ceb8, i32* %r3.global-to-local, align 4
  %v2_cebc = icmp eq i8 %v2_ceb8, 0
  %v0_d008 = load i32, i32* @fp, align 4
  %v1_d008 = inttoptr i32 %v0_d008 to i32*
  %v2_d008 = load i32, i32* %v1_d008, align 4
  store i32 %v2_d008, i32* %ip.global-to-local, align 4
  %v3_d00c = udiv i32 %v2_d008, 32
  store i32 %v3_d00c, i32* %r3.global-to-local, align 4
  br i1 %v2_cebc, label %dec_label_pc_d008, label %dec_label_pc_cec4

dec_label_pc_cec4:                                ; preds = %dec_label_pc_ceb4
  %v3_ced0 = mul nuw nsw i32 %v3_d00c, 4
  %v2_ced4 = add i32 %v3_ced0, %v2_ccd4
  store i32 %v2_ced4, i32* %r3.global-to-local, align 4
  %v1_ced8 = add i32 %v2_ced4, -368
  %v2_ced8 = inttoptr i32 %v1_ced8 to i32*
  %v3_ced8 = load i32, i32* %v2_ced8, align 4
  %v1_cedc = urem i32 %v2_d008, 32
  %v7_cee4 = shl i32 1, %v1_cedc
  %v8_cee4 = or i32 %v3_ced8, %v7_cee4
  store i32 %v8_cee4, i32* %r2.global-to-local, align 4
  store i32 %v8_cee4, i32* %v2_ced8, align 4
  br label %dec_label_pc_ceec

dec_label_pc_ceec:                                ; preds = %dec_label_pc_d008, %dec_label_pc_cec4
  store i32 123012, i32* %r3.global-to-local, align 4
  %v2_cef0 = load i32, i32* inttoptr (i32 123012 to i32*), align 4
  store i32 0, i32* @lr, align 4
  %v0_cef8 = load i32, i32* %ip.global-to-local, align 4
  %v5_cefc = icmp slt i32 %v0_cef8, %v2_cef0
  br i1 %v5_cefc, label %bb40, label %bb

bb:                                               ; preds = %dec_label_pc_ceec
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_ceec, %bb
  %v0_cf0c = phi i32 [ %v2_cef0, %dec_label_pc_ceec ], [ %v0_cef8, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_cf0c = add i32 %v0_cf0c, 1
  store i32 %v2_cf10, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ce30, i32* %r2.global-to-local, align 4
  %v5_cf28 = call i32 @function_10368(i32 %v1_cf0c, i32 %v2_ce2c, i32 %v2_ce30, i32 0, i32 %v2_cf10)
  %v8_cf2c = icmp eq i32 %v5_cf28, -1
  br i1 %v8_cf2c, label %dec_label_pc_ce34, label %dec_label_pc_cf34

dec_label_pc_cf34:                                ; preds = %bb40
  %v6_cf28 = trunc i32 %v5_cf28 to i16
  %v3_cf34 = icmp eq i16 %v6_cf28, 0
  br i1 %v3_cf34, label %dec_label_pc_cf3c, label %dec_label_pc_cf70

dec_label_pc_cf3c:                                ; preds = %dec_label_pc_cf34
  %v5_cf48 = srem i32 %stack_var_-1436.0, 6
  %v4_cf50 = sub i32 %stack_var_-1436.0, %v5_cf48
  store i32 %v4_cf50, i32* %r3.global-to-local, align 4
  %v2_cf58 = icmp eq i32 %v5_cf48, 0
  %v1_cf5c = add i32 %stack_var_-1436.0, 1
  store i32 %v1_cf5c, i32* @lr, align 4
  store i32 %v2_cf60, i32* %r2.global-to-local, align 4
  %v7_cf64 = inttoptr i32 %v5_cf28 to i8*
  store i8* %v7_cf64, i8** %stack_var_-42, align 4
  br i1 %v2_cf58, label %dec_label_pc_d13c, label %dec_label_pc_cf70

dec_label_pc_cf70:                                ; preds = %dec_label_pc_cf34, %dec_label_pc_cf3c, %dec_label_pc_d13c
  %stack_var_-1436.1 = phi i32 [ %v1_cf5c, %dec_label_pc_d13c ], [ %v1_cf5c, %dec_label_pc_cf3c ], [ %stack_var_-1436.0, %dec_label_pc_cf34 ]
  store i32 123012, i32* %r3.global-to-local, align 4
  %v2_cf74 = load i32, i32* inttoptr (i32 123012 to i32*), align 4
  %v7_cf78 = icmp eq i32 %v2_cf74, -1
  br i1 %v7_cf78, label %dec_label_pc_cfa4, label %dec_label_pc_cf80

dec_label_pc_cf80:                                ; preds = %dec_label_pc_cf70
  %v3_cf80 = udiv i32 %v2_cf74, 32
  %v3_cf84 = mul nuw nsw i32 %v3_cf80, 4
  store i32 %v2_ccd4, i32* %ip.global-to-local, align 4
  %v2_cf8c = add i32 %v3_cf84, %v2_ccd4
  store i32 %v2_cf8c, i32* %r3.global-to-local, align 4
  %v1_cf90 = add i32 %v2_cf8c, -240
  %v2_cf90 = inttoptr i32 %v1_cf90 to i32*
  %v3_cf90 = load i32, i32* %v2_cf90, align 4
  %v1_cf94 = urem i32 %v2_cf74, 32
  %v6_cf98 = lshr i32 %v3_cf90, %v1_cf94
  store i32 %v6_cf98, i32* %r2.global-to-local, align 4
  %v1_cf9c = urem i32 %v6_cf98, 2
  %v2_cf9c = icmp eq i32 %v1_cf9c, 0
  br i1 %v2_cf9c, label %dec_label_pc_cfa4, label %dec_label_pc_d1c8

dec_label_pc_cfa4:                                ; preds = %dec_label_pc_cf80, %dec_label_pc_cf70
  %v2_cfa8 = load i8, i8* bitcast (i8** @global_var_1e260.86 to i8*), align 4
  %v3_cfa8 = zext i8 %v2_cfa8 to i32
  store i32 %v3_cfa8, i32* @r4, align 4
  %v2_cfac = icmp eq i8 %v2_cfa8, 0
  %v0_d034 = load i32, i32* @fp, align 4
  %v1_d034 = inttoptr i32 %v0_d034 to i32*
  %v2_d034 = load i32, i32* %v1_d034, align 4
  br i1 %v2_cfac, label %dec_label_pc_d034, label %dec_label_pc_cfb4

dec_label_pc_cfb4:                                ; preds = %dec_label_pc_cfa4
  %v3_cfb8 = udiv i32 %v2_d034, 32
  store i32 %v2_ccd4, i32* %r2.global-to-local, align 4
  %v3_cfc0 = mul nuw nsw i32 %v3_cfb8, 4
  %v2_cfc4 = add i32 %v3_cfc0, %v2_ccd4
  store i32 %v2_cfc4, i32* %r3.global-to-local, align 4
  %v1_cfc8 = add i32 %v2_cfc4, -368
  %v2_cfc8 = inttoptr i32 %v1_cfc8 to i32*
  %v3_cfc8 = load i32, i32* %v2_cfc8, align 4
  %v1_cfcc = urem i32 %v2_d034, 32
  %v6_cfd0 = lshr i32 %v3_cfc8, %v1_cfcc
  store i32 %v6_cfd0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e260.86 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_cfdc = urem i32 %v6_cfd0, 2
  %v2_cfdc = icmp eq i32 %v1_cfdc, 0
  store i8 0, i8* bitcast (i8** @global_var_1e260.86 to i8*), align 4
  store i32 123016, i32* @r5, align 4
  br i1 %v2_cfdc, label %dec_label_pc_cfec, label %dec_label_pc_d158

dec_label_pc_cfec:                                ; preds = %dec_label_pc_cfb4
  store i32 53236, i32* @lr, align 4
  %v1_cff0 = icmp ne i32 %v2_d034, -1
  call void @__pseudo_cond_branch(i1 %v1_cff0, i32 ptrtoint (i32* @global_var_10644.88 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_cff8 = load i32, i32* @r5, align 4
  %v2_cff8 = inttoptr i32 %v1_cff8 to i32*
  store i32 -1, i32* %v2_cff8, align 4
  %v1_d000 = call i32 @function_12540(i32 1)
  br label %dec_label_pc_ce34

dec_label_pc_d008:                                ; preds = %dec_label_pc_ceb4
  store i32 %v2_ccd4, i32* %r2.global-to-local, align 4
  %v3_d014 = mul nuw nsw i32 %v3_d00c, 4
  %v2_d018 = add i32 %v3_d014, %v2_ccd4
  store i32 %v2_d018, i32* %r3.global-to-local, align 4
  %v1_d01c = add i32 %v2_d018, -240
  %v2_d01c = inttoptr i32 %v1_d01c to i32*
  %v3_d01c = load i32, i32* %v2_d01c, align 4
  %v1_d020 = urem i32 %v2_d008, 32
  %v7_d028 = shl i32 1, %v1_d020
  %v8_d028 = or i32 %v3_d01c, %v7_d028
  store i32 %v8_d028, i32* %r2.global-to-local, align 4
  store i32 %v8_d028, i32* %v2_d01c, align 4
  br label %dec_label_pc_ceec

dec_label_pc_d034:                                ; preds = %dec_label_pc_cfa4
  %v7_d038 = icmp eq i32 %v2_d034, -1
  store i32 123016, i32* @r8, align 4
  br i1 %v7_d038, label %dec_label_pc_ce34, label %dec_label_pc_d044

dec_label_pc_d044:                                ; preds = %dec_label_pc_d034
  %v3_d044 = udiv i32 %v2_d034, 32
  store i32 %v2_ccd4, i32* %r2.global-to-local, align 4
  %v3_d04c = mul nuw nsw i32 %v3_d044, 4
  %v2_d050 = add i32 %v3_d04c, %v2_ccd4
  store i32 %v2_d050, i32* %r3.global-to-local, align 4
  %v1_d054 = add i32 %v2_d050, -240
  %v2_d054 = inttoptr i32 %v1_d054 to i32*
  %v3_d054 = load i32, i32* %v2_d054, align 4
  %v1_d058 = urem i32 %v2_d034, 32
  %v6_d05c = lshr i32 %v3_d054, %v1_d058
  store i32 %v6_d05c, i32* %r2.global-to-local, align 4
  %v1_d060 = urem i32 %v6_d05c, 2
  %v2_d060 = icmp eq i32 %v1_d060, 0
  br i1 %v2_d060, label %dec_label_pc_ce34, label %dec_label_pc_d068

dec_label_pc_d068:                                ; preds = %dec_label_pc_d044
  %v6_d06c = inttoptr i32 %v3_cfa8 to i8*
  store i8* %v6_d06c, i8** %stack_var_-42, align 4
  store i32 %v2_d144, i32* @sl, align 4
  %v0_d070 = call i32 @function_10a6c()
  %v0_d074 = load i32, i32* @r4, align 4
  %v2_d074 = inttoptr i32 %v0_d070 to i32*
  store i32 %v0_d074, i32* %v2_d074, align 4
  store i32 %v0_d070, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_d084 = load i32, i32* @r8, align 4
  %v1_d084 = inttoptr i32 %v0_d084 to i32*
  %v2_d084 = load i32, i32* %v1_d084, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_d090 = call i32 @function_10d00(i32 %v2_d084, i32 %v2_d144, i32 2, i32 16386)
  %v7_d094 = icmp eq i32 %v4_d090, -1
  br i1 %v7_d094, label %dec_label_pc_d274, label %dec_label_pc_d09c

dec_label_pc_d09c:                                ; preds = %dec_label_pc_d068
  %v2_d09c = icmp eq i32 %v4_d090, 0
  br i1 %v2_d09c, label %dec_label_pc_d284, label %dec_label_pc_d0a4

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_d09c
  store i32 %v2_cf60, i32* %ip.global-to-local, align 4
  %v3_d0a8 = load i8*, i8** %stack_var_-42, align 4
  %v4_d0a8 = ptrtoint i8* %v3_d0a8 to i32
  store i32 %v4_d0a8, i32* %r3.global-to-local, align 4
  %v2_d0ac = icmp eq i8* %v3_d0a8, null
  br i1 %v2_d0ac, label %dec_label_pc_d0b4, label %dec_label_pc_d2b4

dec_label_pc_d0b4:                                ; preds = %dec_label_pc_d0a4
  %v0_d0b4 = load i32, i32* @r8, align 4
  %v1_d0b4 = inttoptr i32 %v0_d0b4 to i32*
  %v2_d0b4 = load i32, i32* %v1_d0b4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_d0c0 = add i32 %v4_d0a8, 16384
  store i32 %v1_d0c0, i32* %r3.global-to-local, align 4
  %v4_d0c4 = call i32 @function_10d00(i32 %v2_d0b4, i32 %v2_d144, i32 2, i32 %v1_d0c0)
  br label %dec_label_pc_ce34

dec_label_pc_d0cc:                                ; preds = %dec_label_pc_cea4
  %v0_d0d4 = load i32, i32* @r4, align 4
  store i32 %v0_d0d4, i32* %r2.global-to-local, align 4
  %v3_d0d8 = call i32 @function_10e30(i32 2, i32 1, i32 %v0_d0d4)
  %v7_d0dc = icmp eq i32 %v3_d0d8, -1
  store i32 %v3_d0d8, i32* @r5, align 4
  %v1_d0e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_d0e4 = inttoptr i32 %v1_d0e4 to i32*
  store i32 %v3_d0d8, i32* %v2_d0e4, align 4
  br i1 %v7_d0dc, label %dec_label_pc_ceb4, label %dec_label_pc_d0ec

dec_label_pc_d0ec:                                ; preds = %dec_label_pc_d0cc
  %v0_d0ec = load i32, i32* @r4, align 4
  store i32 %v0_d0ec, i32* %r2.global-to-local, align 4
  %v2_d0f4 = call i32 @function_10478(i32 %v3_d0d8, i32 3)
  %v1_d0fc = or i32 %v2_d0f4, 2048
  store i32 %v1_d0fc, i32* %r2.global-to-local, align 4
  %v0_d100 = load i32, i32* @r5, align 4
  %v2_d104 = call i32 @function_10478(i32 %v0_d100, i32 4)
  %v2_d10c = load i32, i32* inttoptr (i32 123020 to i32*), align 4
  store i32 %v2_d10c, i32* %r3.global-to-local, align 4
  %v2_d110 = icmp eq i32 %v2_d10c, 0
  br i1 %v2_d110, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_d0ec
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_d0ec, %bb41
  %v2_d118 = xor i1 %v2_d110, true
  call void @__pseudo_cond_branch(i1 %v2_d118, i32 %v2_d10c)
  store i32 ptrtoint (i8** @global_var_1e260.86 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d124 = load i32, i32* %r8.global-to-local, align 4
  %v1_d124 = inttoptr i32 %v0_d124 to i32*
  %v2_d124 = load i32, i32* %v1_d124, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1e260.86 to i8*), align 4
  %v4_d134 = call i32 @function_10c18(i32 %v2_d124, i32 ptrtoint (i16** @global_var_202e4.65 to i32), i32 16)
  br label %dec_label_pc_ceb4

dec_label_pc_d13c:                                ; preds = %dec_label_pc_cf3c
  %v0_d140 = load i32, i32* @fp, align 4
  %v1_d140 = inttoptr i32 %v0_d140 to i32*
  %v2_d140 = load i32, i32* %v1_d140, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d150 = call i32 @function_10d74(i32 %v2_d140, i32 %v2_d144, i32 2, i32 16384)
  br label %dec_label_pc_cf70

dec_label_pc_d158:                                ; preds = %dec_label_pc_cfb4
  store i32 4, i32* @r4, align 4
  store i32 %v2_d160, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_d13c, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_d17c = call i32 @function_10c88(i32 %v2_d034, i32 1, i32 4, i32 %v2_d160, i32 %v2_d13c)
  %v3_d180 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_d180, i32* %r3.global-to-local, align 4
  %v2_d184 = icmp eq i32 %v3_d180, 0
  br i1 %v2_d184, label %dec_label_pc_d210, label %dec_label_pc_d18c

dec_label_pc_d18c:                                ; preds = %dec_label_pc_d158
  %v0_d18c = load i32, i32* @r5, align 4
  %v1_d18c = inttoptr i32 %v0_d18c to i32*
  %v2_d18c = load i32, i32* %v1_d18c, align 4
  %v1_d190 = call i32 @function_10644(i32 %v2_d18c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d198 = load i32, i32* @r5, align 4
  %v2_d198 = inttoptr i32 %v1_d198 to i32*
  store i32 -1, i32* %v2_d198, align 4
  %v0_d19c = call i32 @function_d3a8()
  %v3_d1a4 = zext i32 %v0_d19c to i64
  %v4_d1a4 = mul nuw i64 %v3_d1a4, 3435973837
  %v7_d1a4 = trunc i64 %v4_d1a4 to i32
  store i32 %v7_d1a4, i32* %ip.global-to-local, align 4
  %v3_d1a81 = udiv i64 %v4_d1a4, 34359738368
  %v3_d1ac3 = mul nuw nsw i64 %v3_d1a81, 8
  %v3_d1ac = trunc i64 %v3_d1ac3 to i32
  store i32 %v3_d1ac, i32* %r2.global-to-local, align 4
  %v2_d1b05 = mul nuw nsw i64 %v3_d1a81, 2
  %v2_d1b0 = trunc i64 %v2_d1b05 to i32
  %v2_d1b4 = add i32 %v3_d1ac, %v2_d1b0
  store i32 %v2_d1b4, i32* %r3.global-to-local, align 4
  %v2_d1b8 = sub i32 %v0_d19c, %v2_d1b4
  %v1_d1bc = add i32 %v2_d1b8, 1
  %v1_d1c0 = call i32 @function_12540(i32 %v1_d1bc)
  br label %dec_label_pc_ce34

dec_label_pc_d1c8:                                ; preds = %dec_label_pc_cf80
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_d160, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_d1dc = call i32 @function_10ba8(i32 %v2_cf74, i32 %v2_d1d4, i32 %v2_d160, i32 16, i32 16)
  %v1_d1e0 = call i32 @function_da54(i32 %v5_d1dc)
  %v1_d1e4 = call i32 @function_c06c(i32 %v1_d1e0)
  store i32 %v1_cdf4, i32* @lr, align 4
  %v2_d1f4 = call i32 @function_10410(i32 %v1_d1f0, i32 9)
  store i32 ptrtoint (i32* @global_var_1e25c.74 to i32), i32* %r3.global-to-local, align 4
  %v2_d1fc = load i32, i32* @global_var_1e25c.74, align 4
  %v2_d200 = icmp eq i32 %v2_d1fc, 0
  br i1 %v2_d200, label %dec_label_pc_d208, label %dec_label_pc_d2a8

dec_label_pc_d208:                                ; preds = %dec_label_pc_d1c8, %dec_label_pc_d2a8
  %v1_d20c = call i32 @function_12488(i32 0)
  br label %dec_label_pc_d210

dec_label_pc_d210:                                ; preds = %dec_label_pc_d158, %dec_label_pc_d208
  %v2_d214 = call i32 @function_fc38(i8* %v1_d214)
  %sext = mul i32 %v2_d214, 16777216
  %v1_d218 = sdiv i32 %sext, 16777216
  %v7_d218 = inttoptr i32 %v1_d218 to i8*
  store i8* %v7_d218, i8** %stack_var_-42, align 4
  %v0_d21c = call i32 @function_fef4()
  %v0_d224 = load i32, i32* @r4, align 4
  store i32 %v0_d224, i32* %r2.global-to-local, align 4
  store i32 %v0_d21c, i32* @global_var_202dc.42, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d234 = load i32, i32* @r5, align 4
  %v1_d234 = inttoptr i32 %v0_d234 to i32*
  %v2_d234 = load i32, i32* %v1_d234, align 4
  %v4_d238 = call i32 @function_10d74(i32 %v2_d234, i32 ptrtoint (i32* @global_var_157c4.92 to i32), i32 %v0_d224, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_d244 = load i32, i32* @r5, align 4
  %v1_d244 = inttoptr i32 %v0_d244 to i32*
  %v2_d244 = load i32, i32* %v1_d244, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_d250 = call i32 @function_10d74(i32 %v2_d244, i32 %v2_d144, i32 1, i32 16384)
  %v3_d254 = load i8*, i8** %stack_var_-42, align 4
  %v4_d254 = ptrtoint i8* %v3_d254 to i32
  store i32 %v4_d254, i32* %r2.global-to-local, align 4
  %v3_d258 = icmp eq i8* %v3_d254, null
  br i1 %v3_d258, label %dec_label_pc_ce34, label %dec_label_pc_d260

dec_label_pc_d260:                                ; preds = %dec_label_pc_d210
  %v0_d260 = load i32, i32* @r5, align 4
  %v1_d260 = inttoptr i32 %v0_d260 to i32*
  %v2_d260 = load i32, i32* %v1_d260, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d26c = call i32 @function_10d74(i32 %v2_d260, i32 %v2_cc70, i32 %v4_d254, i32 16384)
  br label %dec_label_pc_ce34

dec_label_pc_d274:                                ; preds = %dec_label_pc_d2e4, %dec_label_pc_d068
  %v0_d274 = load i32, i32* @r5, align 4
  %v1_d274 = inttoptr i32 %v0_d274 to i32*
  %v2_d274 = load i32, i32* %v1_d274, align 4
  store i32 %v2_d274, i32* %r3.global-to-local, align 4
  %v7_d278 = icmp eq i32 %v2_d274, 4
  br i1 %v7_d278, label %dec_label_pc_ce34, label %bb43

bb43:                                             ; preds = %dec_label_pc_d274
  %v8_d27c = icmp eq i32 %v2_d274, 11
  br i1 %v8_d27c, label %dec_label_pc_ce34, label %dec_label_pc_d284

dec_label_pc_d284:                                ; preds = %dec_label_pc_d308, %bb43, %dec_label_pc_d09c
  %v0_d284 = load i32, i32* @fp, align 4
  %v1_d284 = inttoptr i32 %v0_d284 to i32*
  %v2_d284 = load i32, i32* %v1_d284, align 4
  store i32 53904, i32* @lr, align 4
  %v1_d28c = icmp ne i32 %v2_d284, -1
  call void @__pseudo_cond_branch(i1 %v1_d28c, i32 ptrtoint (i32* @global_var_10644.88 to i32))
  store i32 123016, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 123016 to i32*), align 8
  %v1_d2a0 = call i32 @function_12540(i32 1)
  br label %dec_label_pc_ce34

dec_label_pc_d2a8:                                ; preds = %dec_label_pc_d1c8
  %v2_d2ac = call i32 @function_10410(i32 %v2_d1fc, i32 9)
  br label %dec_label_pc_d208

dec_label_pc_d2b4:                                ; preds = %dec_label_pc_d0a4
  %v3_d2b4 = udiv i32 %v4_d0a8, 256
  %v1_d2b8 = urem i32 %v4_d0a8, 256
  store i32 %v1_d2b8, i32* %r3.global-to-local, align 4
  %v4_d2bc = mul nuw nsw i32 %v1_d2b8, 256
  %v5_d2bc = or i32 %v4_d2bc, %v3_d2b4
  %v6_d2bc = trunc i32 %v5_d2bc to i16
  store i32 %v5_d2bc, i32* %r2.global-to-local, align 4
  %v7_d2c8 = inttoptr i32 %v5_d2bc to i8*
  store i8* %v7_d2c8, i8** %stack_var_-42, align 4
  %tmp44 = icmp ult i16 %v6_d2bc, 1025
  br i1 %tmp44, label %dec_label_pc_d2e4, label %dec_label_pc_d2d0

dec_label_pc_d2d0:                                ; preds = %dec_label_pc_d2b4
  %v0_d2d0 = load i32, i32* @r8, align 4
  %v1_d2d0 = inttoptr i32 %v0_d2d0 to i32*
  %v2_d2d0 = load i32, i32* %v1_d2d0, align 4
  %v1_d2d4 = call i32 @function_10644(i32 %v2_d2d0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d2dc = load i32, i32* @r8, align 4
  %v2_d2dc = inttoptr i32 %v1_d2dc to i32*
  store i32 -1, i32* %v2_d2dc, align 4
  br label %dec_label_pc_ce34

dec_label_pc_d2e4:                                ; preds = %dec_label_pc_d2b4
  %v0_d2e4 = load i32, i32* @r4, align 4
  %v1_d2e4 = load i32, i32* @r5, align 4
  %v2_d2e4 = inttoptr i32 %v1_d2e4 to i32*
  store i32 %v0_d2e4, i32* %v2_d2e4, align 4
  store i32 %v2_d2ec, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_d2f4 = load i32, i32* @r8, align 4
  %v1_d2f4 = inttoptr i32 %v0_d2f4 to i32*
  %v2_d2f4 = load i32, i32* %v1_d2f4, align 4
  %v7_d2fc = call i32 @function_10d00(i32 %v2_d2f4, i32 %v2_d2ec, i32 %v5_d2bc, i32 16386)
  %v7_d300 = icmp eq i32 %v7_d2fc, -1
  br i1 %v7_d300, label %dec_label_pc_d274, label %dec_label_pc_d308

dec_label_pc_d308:                                ; preds = %dec_label_pc_d2e4
  %v2_d308 = icmp eq i32 %v7_d2fc, 0
  br i1 %v2_d308, label %dec_label_pc_d284, label %dec_label_pc_d310

dec_label_pc_d310:                                ; preds = %dec_label_pc_d308
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d31c = load i32, i32* @r8, align 4
  %v1_d31c = inttoptr i32 %v0_d31c to i32*
  %v2_d31c = load i32, i32* %v1_d31c, align 4
  %v4_d320 = call i32 @function_10d00(i32 %v2_d31c, i32 %v2_d144, i32 2, i32 16384)
  %v3_d328 = load i8*, i8** %stack_var_-42, align 4
  %v4_d328 = ptrtoint i8* %v3_d328 to i32
  %v3_d32c = udiv i32 %v4_d328, 256
  %v1_d330 = urem i32 %v4_d328, 256
  store i32 %v1_d330, i32* %r3.global-to-local, align 4
  %v4_d334 = mul nuw nsw i32 %v1_d330, 256
  %v5_d334 = or i32 %v4_d334, %v3_d32c
  store i32 %v5_d334, i32* %ip.global-to-local, align 4
  store i32 %v2_cf60, i32* @lr, align 4
  store i32 %v5_d334, i32* %r2.global-to-local, align 4
  %v0_d344 = load i32, i32* @r8, align 4
  %v1_d344 = inttoptr i32 %v0_d344 to i32*
  %v2_d344 = load i32, i32* %v1_d344, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_d34c = inttoptr i32 %v5_d334 to i8*
  store i8* %v6_d34c, i8** %stack_var_-42, align 4
  %v6_d350 = call i32 @function_10d00(i32 %v2_d344, i32 %v2_d2ec, i32 %v5_d334, i32 16384)
  store i32 %v2_cf60, i32* %r2.global-to-local, align 4
  %v3_d358 = load i8*, i8** %stack_var_-42, align 4
  %v3_d35c = icmp eq i8* %v3_d358, null
  br i1 %v3_d35c, label %dec_label_pc_ce34, label %dec_label_pc_d364

dec_label_pc_d364:                                ; preds = %dec_label_pc_d310
  %v4_d358 = ptrtoint i8* %v3_d358 to i32
  %v5_d368 = call i32 @function_82c8(i32* nonnull %stack_var_-1432, i32 %v4_d358, i32 %v2_cf60)
  br label %dec_label_pc_ce34

; uselistorder directives
  uselistorder i8* %v3_d358, { 1, 0 }
  uselistorder i32 %v5_d334, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d328, { 1, 0 }
  uselistorder i32 %v7_d2fc, { 1, 0 }
  uselistorder i32 %v5_d2bc, { 1, 0, 3, 2 }
  uselistorder i32 %v3_d0d8, { 3, 2, 1, 0 }
  uselistorder i32 %v4_d0a8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d090, { 1, 0 }
  uselistorder i32 %v2_d034, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_cf74, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_cf5c, { 1, 0, 2 }
  uselistorder i32 %v5_cf28, { 1, 2, 0 }
  uselistorder i32 %v2_ce74, { 2, 1, 0 }
  uselistorder i32 %v1_ce64, { 1, 2, 0 }
  uselistorder i32 %v1_ce48, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_d160, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d144, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_d13c, { 1, 0 }
  uselistorder i32 %v2_cf60, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_ce30, { 1, 0, 2 }
  uselistorder i32 %v2_ccd4, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7 }
  uselistorder i32 %v2_ccc0, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_cbec, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 30, 34, 32, 33, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_1e25c.74, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i8** @global_var_1e260.86 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e260.86 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* inttoptr (i32 123012 to i32*), { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32)* @function_caec, { 1, 0 }
  uselistorder i32 (i32)* @function_c610, { 1, 0 }
  uselistorder i32 (i32)* @function_8560, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_fc60, { 0, 16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32 (i32, i32)* @function_d46c, { 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 0 }
  uselistorder i32 (i32)* @function_c988, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_202e4.65 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @function_10edc, { 1, 0 }
  uselistorder label %dec_label_pc_d210, { 1, 0 }
  uselistorder label %dec_label_pc_d208, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_cf70, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_ceb4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cea4, { 1, 0 }
  uselistorder label %dec_label_pc_ce34, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_cc94, { 2, 0, 1 }
}

define i32 @function_d38c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d38c:
  %cpsr_c.global-to-local = alloca i1, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v0_d38c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d38c, label %bb, label %dec_label_pc_d38c..thread1_crit_edge

dec_label_pc_d38c..thread1_crit_edge:             ; preds = %dec_label_pc_d38c
  %v0_d398.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

bb:                                               ; preds = %dec_label_pc_d38c
  %v6_d394 = and i32 %arg1, 8
  %v7_d394 = icmp ne i32 %v6_d394, 0
  store i1 %v7_d394, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d38c..thread1_crit_edge, %bb
  %v0_d398 = phi i1 [ %v0_d398.pre, %dec_label_pc_d38c..thread1_crit_edge ], [ %v7_d394, %bb ]
  call void @__pseudo_cond_branch(i1 %v0_d398, i32 -22315444)
  %v0_d3a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d3a0, label %bb4, label %.thread2

bb4:                                              ; preds = %.thread1
  %v2_d3a4 = load i32, i32* @r4, align 4
  %v3_d3a4 = and i32 %v2_d3a4, 16384
  %v4_d3a4 = icmp ne i32 %v3_d3a4, 0
  store i1 %v4_d3a4, i1* %cpsr_c.global-to-local, align 1
  br label %.thread2

.thread2:                                         ; preds = %.thread1, %bb4
  ret i32 %arg1

; uselistorder directives
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_d3a8() local_unnamed_addr {
dec_label_pc_d3a8:
  %v2_d3b4 = load i32, i32* @global_var_1e264.94, align 4
  %v2_d3b8 = load i32, i32* @global_var_1e270.96, align 4
  %v4_d3c4 = mul i32 %v2_d3b4, 2048
  %v5_d3c4 = xor i32 %v4_d3c4, %v2_d3b4
  store i32 %v5_d3c4, i32* @r3, align 4
  %v4_d3c8 = udiv i32 %v2_d3b8, 524288
  %v5_d3c8 = xor i32 %v4_d3c8, %v2_d3b8
  %v2_d3cc = load i32, i32* @global_var_1e268.98, align 4
  %v2_d3d0 = load i32, i32* @global_var_1e26c.100, align 4
  store i32 %v2_d3d0, i32* @ip, align 4
  %v2_d3d4 = xor i32 %v5_d3c8, %v5_d3c4
  %v4_d3d8 = udiv i32 %v5_d3c4, 256
  %v5_d3d8 = xor i32 %v2_d3d4, %v4_d3d8
  store i32 %v2_d3cc, i32* @global_var_1e264.94, align 4
  store i32 %v2_d3d0, i32* @global_var_1e268.98, align 4
  store i32 %v2_d3b8, i32* @global_var_1e26c.100, align 4
  store i32 %v5_d3d8, i32* @global_var_1e270.96, align 4
  ret i32 %v5_d3d8

; uselistorder directives
  uselistorder i32 %v2_d3b8, { 2, 1, 0 }
  uselistorder i32 %v2_d3b4, { 1, 0 }
}

define i32 @function_d404(i32 %arg1) local_unnamed_addr {
dec_label_pc_d404:
  %v2_d410 = call i32 @function_102c4(i32* null)
  store i32 %v2_d410, i32* @r0, align 4
  store i32 %v2_d410, i32* @global_var_1e264.94, align 4
  %v0_d41c = call i32 @function_102b0()
  store i32 %v0_d41c, i32* @r0, align 4
  %v0_d424 = call i32 @function_1023c()
  %v2_d42c = xor i32 %v0_d41c, %v0_d424
  store i32 %v2_d42c, i32* @global_var_1e268.98, align 4
  %v1_d434 = call i32 @function_10a88(i32 %v2_d42c)
  %v2_d438 = load i32, i32* @global_var_1e268.98, align 4
  %v2_d444 = xor i32 %v2_d438, %v1_d434
  store i32 %v2_d444, i32* @global_var_1e270.96, align 4
  store i32 %v1_d434, i32* @global_var_1e26c.100, align 4
  ret i32 %v1_d434

; uselistorder directives
  uselistorder i32 %v1_d434, { 1, 2, 0 }
}

define i32 @function_d46c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d46c:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-63 = alloca i32, align 4
  %v3_d46c = load i32, i32* @r4, align 4
  %v12_d46c = load i32, i32* @r7, align 4
  store i32 %arg2, i32* %fp.global-to-local, align 4
  %v2_d470 = icmp eq i32 %arg2, 0
  %v0_d478 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d478, i32* %sb.global-to-local, align 4
  br i1 %v2_d470, label %dec_label_pc_d504, label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d46c
  %v2_d480 = ptrtoint i32* %stack_var_-63 to i32
  store i32 %v2_d480, i32* @r0, align 4
  store i32 ptrtoint ([23 x i8]* @global_var_157cc.106 to i32), i32* @r1, align 4
  store i32 23, i32* @r2, align 4
  %v0_d48c = call i32 @function_10b70()
  store i32 %v0_d48c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e264.94 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e268.98 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e26c.100 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1e270.96 to i32), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v1_d4d8 = bitcast i32* %stack_var_-63 to i8*
  %v2_d4e8 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_d4a4

dec_label_pc_d4a4:                                ; preds = %dec_label_pc_d4a4.dec_label_pc_d4a4_crit_edge, %dec_label_pc_d480
  %v1_d4c8 = phi i32 [ %v1_d4c8.pre, %dec_label_pc_d4a4.dec_label_pc_d4a4_crit_edge ], [ ptrtoint (i32* @global_var_1e264.94 to i32), %dec_label_pc_d480 ]
  %v2_d4a4 = load i32, i32* @global_var_1e270.96, align 4
  store i32 %v2_d4a4, i32* %r2.global-to-local, align 4
  %v2_d4a8 = load i32, i32* @global_var_1e264.94, align 4
  %v4_d4ac = udiv i32 %v2_d4a4, 524288
  %v5_d4ac = xor i32 %v4_d4ac, %v2_d4a4
  %v4_d4b0 = mul i32 %v2_d4a8, 2048
  %v5_d4b0 = xor i32 %v4_d4b0, %v2_d4a8
  %v2_d4b4 = xor i32 %v5_d4ac, %v5_d4b0
  %v2_d4b8 = load i32, i32* @global_var_1e268.98, align 4
  %v2_d4bc = load i32, i32* @global_var_1e26c.100, align 4
  store i32 %v2_d4bc, i32* @ip, align 4
  %v4_d4c0 = udiv i32 %v5_d4b0, 256
  %v5_d4c0 = xor i32 %v2_d4b4, %v4_d4c0
  store i32 %v5_d4c0, i32* @r4, align 4
  store i32 %v2_d480, i32* %r0.global-to-local, align 4
  %v2_d4c8 = inttoptr i32 %v1_d4c8 to i32*
  store i32 %v2_d4b8, i32* %v2_d4c8, align 4
  %v0_d4cc = load i32, i32* @ip, align 4
  %v1_d4cc = load i32, i32* %r8.global-to-local, align 4
  %v2_d4cc = inttoptr i32 %v1_d4cc to i32*
  store i32 %v0_d4cc, i32* %v2_d4cc, align 4
  %v0_d4d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d4d0 = load i32, i32* @r7, align 4
  %v2_d4d0 = inttoptr i32 %v1_d4d0 to i32*
  store i32 %v0_d4d0, i32* %v2_d4d0, align 4
  %v0_d4d4 = load i32, i32* @r4, align 4
  %v1_d4d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_d4d4 = inttoptr i32 %v1_d4d4 to i32*
  store i32 %v0_d4d4, i32* %v2_d4d4, align 4
  %v2_d4d8 = call i32 @function_fc38(i8* %v1_d4d8)
  %v0_d4e0 = load i32, i32* @r4, align 4
  store i32 %v0_d4e0, i32* %r0.global-to-local, align 4
  %v2_d4e4 = call i32 @function_10210(i32 %v0_d4e0, i32 %v2_d4d8)
  store i32 %v2_d4e4, i32* %r0.global-to-local, align 4
  %v2_d4ec = add i32 %v2_d4d8, %v2_d4e8
  %v1_d4f0 = add i32 %v2_d4ec, -23
  %v2_d4f0 = inttoptr i32 %v1_d4f0 to i8*
  %v3_d4f0 = load i8, i8* %v2_d4f0, align 1
  %v2_d4f4 = load i32, i32* %r5.global-to-local, align 4
  %v3_d4f4 = load i32, i32* %sb.global-to-local, align 4
  %v4_d4f4 = add i32 %v3_d4f4, %v2_d4f4
  %v5_d4f4 = inttoptr i32 %v4_d4f4 to i8*
  store i8 %v3_d4f0, i8* %v5_d4f4, align 1
  %v0_d4f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_d4f8 = add i32 %v0_d4f8, 1
  store i32 %v1_d4f8, i32* %r5.global-to-local, align 4
  %v1_d4fc = load i32, i32* %fp.global-to-local, align 4
  %v9_d4fc = icmp eq i32 %v1_d4f8, %v1_d4fc
  br i1 %v9_d4fc, label %dec_label_pc_d504.loopexit, label %dec_label_pc_d4a4.dec_label_pc_d4a4_crit_edge

dec_label_pc_d4a4.dec_label_pc_d4a4_crit_edge:    ; preds = %dec_label_pc_d4a4
  %v1_d4c8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_d4a4

dec_label_pc_d504.loopexit:                       ; preds = %dec_label_pc_d4a4
  %v1_d50c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d504

dec_label_pc_d504:                                ; preds = %dec_label_pc_d504.loopexit, %dec_label_pc_d46c
  %v1_d50c = phi i32 [ %v1_d50c.pre, %dec_label_pc_d504.loopexit ], [ %v0_d478, %dec_label_pc_d46c ]
  store i32 %v3_d46c, i32* @r4, align 4
  store i32 %v12_d46c, i32* @r7, align 4
  ret i32 %v1_d50c

; uselistorder directives
  uselistorder i32 %v2_d4a8, { 1, 0 }
  uselistorder i32 %v2_d4a4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 2, 5, 6, 0, 1 }
  uselistorder i32* @global_var_1e270.96, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1e26c.100, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1e268.98, { 2, 5, 3, 1, 0, 4 }
  uselistorder i32* @global_var_1e264.94, { 2, 4, 1, 0, 3 }
}

define i32 @function_d524(i32 %arg1) local_unnamed_addr {
dec_label_pc_d524:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d524 = load i32, i32* @r4, align 4
  store i32 %v3_d524, i32* %stack_var_-8, align 4
  %v6_d524 = load i32, i32* @lr, align 4
  %v0_d528 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d528, i32* @r4, align 4
  %v2_d528 = icmp eq i32 %v0_d528, 0
  br i1 %v2_d528, label %dec_label_pc_d544, label %dec_label_pc_d530

dec_label_pc_d530:                                ; preds = %dec_label_pc_d524
  %v1_d530 = add i32 %v0_d528, 4
  %v2_d530 = inttoptr i32 %v1_d530 to i32*
  %v3_d530 = load i32, i32* %v2_d530, align 4
  store i32 %v3_d530, i32* %r0.global-to-local, align 4
  store i32 54588, i32* @lr, align 4
  %v1_d538 = icmp ne i32 %v3_d530, 0
  call void @__pseudo_cond_branch(i1 %v1_d538, i32 ptrtoint (i32* @global_var_120e4.16 to i32))
  %v0_d53c = load i32, i32* @r4, align 4
  store i32 %v0_d53c, i32* @r0, align 4
  %v0_d540 = call i32 @function_120e4()
  store i32 %v0_d540, i32* %r0.global-to-local, align 4
  %v2_d544.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d544

dec_label_pc_d544:                                ; preds = %dec_label_pc_d524, %dec_label_pc_d530
  %v1_d548 = phi i32 [ 0, %dec_label_pc_d524 ], [ %v0_d540, %dec_label_pc_d530 ]
  %v2_d544 = phi i32 [ %v3_d524, %dec_label_pc_d524 ], [ %v2_d544.pre, %dec_label_pc_d530 ]
  store i32 %v2_d544, i32* @r4, align 4
  store i32 %v6_d524, i32* @lr, align 4
  ret i32 %v1_d548

; uselistorder directives
  uselistorder i32 %v0_d528, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_d544, { 1, 0 }
}

define i32 @function_d54c(i32 %arg1) local_unnamed_addr {
dec_label_pc_d54c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp79 = call i16 @__decompiler_undefined_function_2()
  %stack_var_-4280 = alloca i32, align 4
  %stack_var_-4292 = alloca i16, align 2
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2230 = alloca i32, align 4
  %stack_var_-2244 = alloca i16, align 2
  %stack_var_-2232 = alloca i32, align 4
  %v3_d54c = load i32, i32* @r4, align 4
  %v9_d54c = load i32, i32* @r6, align 4
  %v12_d54c = load i32, i32* @r7, align 4
  %v15_d54c = load i32, i32* @r8, align 4
  %v18_d54c = load i32, i32* @sb, align 4
  %v21_d54c = load i32, i32* @sl, align 4
  %v24_d54c = load i32, i32* @fp, align 4
  %v27_d54c = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_d564 = call i32 @function_11998(i32 1, i32 8)
  store i32 %v2_d564, i32* @fp, align 4
  %v0_d56c = load i32, i32* @r5, align 4
  store i32 %v0_d56c, i32* %r0.global-to-local, align 4
  %v1_d570 = inttoptr i32 %v0_d56c to i8*
  %v2_d570 = call i32 @function_fc38(i8* %v1_d570)
  %v2_d578 = ptrtoint i16* %stack_var_-2244 to i32
  store i32 %v2_d578, i32* @sl, align 4
  %v2_d57c = ptrtoint i32* %stack_var_-2232 to i32
  store i32 %v2_d57c, i32* @sb, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_d584 = add i32 %v2_d570, 1
  store i32 %v1_d584, i32* %r0.global-to-local, align 4
  %v2_d588 = ptrtoint i32* %stack_var_-2230 to i32
  store i32 %v2_d588, i32* %r2.global-to-local, align 4
  store i32 %v2_d57c, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_d584, i32* %r3.global-to-local, align 4
  %v2_d5c4146 = icmp eq i32 %v1_d584, 0
  store i1 %v2_d5c4146, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v1_d5cc147 = add i32 %v2_d588, -1
  store i32 %v1_d5cc147, i32* %r1.global-to-local, align 4
  %tmp116148 = icmp slt i32 %v1_d584, 1
  br i1 %tmp116148, label %dec_label_pc_d5d4, label %dec_label_pc_d598

dec_label_pc_d598:                                ; preds = %dec_label_pc_d54c, %bb115
  %v0_d598151 = phi i32 [ %v1_d5b8, %bb115 ], [ 0, %dec_label_pc_d54c ]
  %v1_d5a4150.off0 = phi i8 [ %extract.t152, %bb115 ], [ 0, %dec_label_pc_d54c ]
  %v2_d5d8149 = phi i32 [ %v1_d5bc, %bb115 ], [ %v2_d588, %dec_label_pc_d54c ]
  %v1_d598 = load i32, i32* @r5, align 4
  %v2_d598 = add i32 %v1_d598, %v0_d598151
  %v3_d598 = inttoptr i32 %v2_d598 to i8*
  %v4_d598 = load i8, i8* %v3_d598, align 1
  %v6_d598 = zext i8 %v4_d598 to i32
  store i32 %v6_d598, i32* %r3.global-to-local, align 4
  %v2_d59c = icmp eq i8 %v4_d598, 0
  store i1 %v2_d59c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d59c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d598
  %v8_d5a0 = icmp eq i8 %v4_d598, 46
  store i1 %v8_d5a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_d5a0, label %.thread, label %.thread7

.thread:                                          ; preds = %dec_label_pc_d598, %bb
  %v3_d5a4 = load i32, i32* %r6.global-to-local, align 4
  %v4_d5a4 = inttoptr i32 %v3_d5a4 to i8*
  store i8 %v1_d5a4150.off0, i8* %v4_d5a4, align 1
  %v0_d5a8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d5a8.pr, label %.thread9.thread13, label %.thread..thread7_crit_edge

.thread..thread7_crit_edge:                       ; preds = %.thread
  %v1_d5a8.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_d5a8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v1_d5a8.pre to i8
  br label %.thread7

.thread7:                                         ; preds = %.thread..thread7_crit_edge, %bb
  %v3_d5a8 = phi i32 [ %v3_d5a8.pre, %.thread..thread7_crit_edge ], [ %v2_d5d8149, %bb ]
  %v1_d5a8.off0 = phi i8 [ %extract.t, %.thread..thread7_crit_edge ], [ %v4_d598, %bb ]
  %v4_d5a8 = add i32 %v3_d5a8, -1
  %v5_d5a8 = inttoptr i32 %v4_d5a8 to i8*
  store i8 %v1_d5a8.off0, i8* %v5_d5a8, align 1
  %v0_d5ac.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d5ac.pr, label %.thread9, label %.thread12

.thread9.thread13:                                ; preds = %.thread
  %v1_d5ac = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_d5ac, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread9:                                         ; preds = %.thread7
  %v1_d5ac11 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_d5ac11, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread12:                                        ; preds = %.thread7
  %v1_d5b4 = load i32, i32* @lr, align 4
  %v2_d5b4 = urem i32 %v1_d5b4, 256
  store i32 %v2_d5b4, i32* %r4.global-to-local, align 4
  br label %bb115

bb115:                                            ; preds = %.thread9, %.thread9.thread13, %.thread12
  %v0_d5c833 = phi i32 [ 0, %.thread9.thread13 ], [ 0, %.thread9 ], [ %v2_d5b4, %.thread12 ]
  %v0_d5b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_d5b8 = add i32 %v0_d5b8, 1
  store i32 %v1_d5b8, i32* %ip.global-to-local, align 4
  %v0_d5bc = load i32, i32* %r2.global-to-local, align 4
  %v1_d5bc = add i32 %v0_d5bc, 1
  store i32 %v1_d5bc, i32* %r2.global-to-local, align 4
  %v1_d5c0.pre = load i32, i32* %r0.global-to-local, align 4
  %v2_d5c0 = sub i32 %v1_d5c0.pre, %v1_d5b8
  store i32 %v2_d5c0, i32* %r3.global-to-local, align 4
  %v2_d5c4 = icmp eq i32 %v2_d5c0, 0
  store i1 %v2_d5c4, i1* %cpsr_z.global-to-local, align 1
  %v1_d5c8 = add nuw nsw i32 %v0_d5c833, 1
  store i32 %v1_d5c8, i32* @lr, align 4
  store i32 %v0_d5bc, i32* %r1.global-to-local, align 4
  %tmp116 = icmp slt i32 %v2_d5c0, 1
  %extract.t152 = trunc i32 %v0_d5c833 to i8
  br i1 %tmp116, label %dec_label_pc_d5d4, label %dec_label_pc_d598

dec_label_pc_d5d4:                                ; preds = %bb115, %dec_label_pc_d54c
  %v1_d5cc.lcssa = phi i32 [ %v1_d5cc147, %dec_label_pc_d54c ], [ %v0_d5bc, %bb115 ]
  store i32 0, i32* @r4, align 4
  %v4_d5d8 = inttoptr i32 %v1_d5cc.lcssa to i8*
  store i8 0, i8* %v4_d5d8, align 1
  store i32 %v2_d57c, i32* %r0.global-to-local, align 4
  %v1_d5e0 = bitcast i32* %stack_var_-2232 to i8*
  %v2_d5e0 = call i32 @function_fc38(i8* %v1_d5e0)
  %v2_d5e4 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_d5e4, i32* %r1.global-to-local, align 4
  %v1_d5e8 = load i32, i32* @sb, align 4
  %v2_d5e8 = add i32 %v1_d5e8, %v2_d5e0
  store i32 %v2_d5e8, i32* @r5, align 4
  %v0_d5f0 = load i32, i32* @r4, align 4
  store i32 %v0_d5f0, i32* %stack_var_-68, align 4
  store i32 %v2_d57c, i32* %r0.global-to-local, align 4
  %v2_d600 = call i32 @function_fc38(i8* %v1_d5e0)
  %v1_d604 = add i32 %v2_d600, 17
  store i32 %v1_d604, i32* %r0.global-to-local, align 4
  %v0_d60c = call i32 @function_d3a8()
  %v1_d60c = sext i32 %v0_d60c to i64
  store i32 -2147450879, i32* %r3.global-to-local, align 4
  %v5_d618 = mul nuw nsw i64 %v1_d60c, 2147516417
  %v6_d618 = udiv i64 %v5_d618, 4294967296
  %v7_d618 = trunc i64 %v6_d618 to i32
  %v8_d618 = trunc i64 %v5_d618 to i32
  store i32 %v8_d618, i32* @lr, align 4
  store i32 %v7_d618, i32* %r2.global-to-local, align 4
  %v5_d61c4 = udiv i64 %v5_d618, 140737488355328
  %v5_d61c = trunc i64 %v5_d61c4 to i32
  %v6_d61c = add i32 %v5_d61c, %v0_d60c
  store i32 16, i32* @r1, align 4
  %v6_d628 = urem i32 %v6_d61c, 65536
  store i32 %v6_d628, i32* %ip.global-to-local, align 4
  %v2_d630 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d630, i32* @r0, align 4
  %v5_d634 = trunc i32 %v6_d61c to i16
  %v0_d638 = call i32 @function_fccc()
  store i32 %v0_d638, i32* %r0.global-to-local, align 4
  store i32 13568, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  %v0_d668 = load i32, i32* @r5, align 4
  %v1_d668 = add i32 %v0_d668, 1
  store i32 %v1_d668, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i16 %v5_d634, i16* %stack_var_-2244, align 2
  %v4_d67c = inttoptr i32 %v1_d668 to i16*
  store i16 256, i16* %v4_d67c, align 2
  %v0_d680 = load i32, i32* %r3.global-to-local, align 4
  %v1_d680 = trunc i32 %v0_d680 to i16
  %v2_d680 = load i32, i32* %r2.global-to-local, align 4
  %v3_d680 = add i32 %v2_d680, 2
  %v4_d680 = inttoptr i32 %v3_d680 to i16*
  store i16 %v1_d680, i16* %v4_d680, align 2
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_d718 = ptrtoint i32* %stack_var_-196 to i32
  %v2_d740 = ptrtoint i32* %stack_var_-40 to i32
  %v2_d76c = ptrtoint i32* %stack_var_-52 to i32
  %v2_d7b0 = ptrtoint i16* %stack_var_-4292 to i32
  %v2_d844 = ptrtoint i32* %stack_var_-4280 to i32
  %v1_d84c = bitcast i32* %stack_var_-4280 to i8*
  %v4_d870 = zext i16 %tmp79 to i32
  %v2_d874 = icmp eq i16 %tmp79, 0
  br label %dec_label_pc_d68c

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d7f8, %dec_label_pc_d5d4
  %v1_d690 = phi i32 [ -1, %dec_label_pc_d5d4 ], [ %v0_d68c.pre, %dec_label_pc_d7f8 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_d5d4 ], [ %v1_d7f8, %dec_label_pc_d7f8 ]
  store i32 %storemerge, i32* @r8, align 4
  %v7_d68c = icmp eq i32 %v1_d690, -1
  store i1 %v7_d68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d68c, label %bb118, label %bb117

bb117:                                            ; preds = %dec_label_pc_d68c
  store i32 %v1_d690, i32* %r0.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %dec_label_pc_d68c, %bb117
  store i32 54936, i32* @lr, align 4
  %v1_d694 = xor i1 %v7_d68c, true
  call void @__pseudo_cond_branch(i1 %v1_d694, i32 ptrtoint (i32* @global_var_10644.88 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d6a4 = call i32 @function_10e30(i32 2, i32 2, i32 0)
  store i32 %v3_d6a4, i32* %r0.global-to-local, align 4
  %v7_d6a8 = icmp eq i32 %v3_d6a4, -1
  store i1 %v7_d6a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d6a4, i32* @r6, align 4
  br i1 %v7_d6a8, label %dec_label_pc_d838, label %dec_label_pc_d6b4

dec_label_pc_d6b4:                                ; preds = %bb118
  store i32 %v2_d630, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d6c0 = call i32 @function_10c18(i32 %v3_d6a4, i32 %v2_d630, i32 16)
  store i32 %v3_d6c0, i32* %r0.global-to-local, align 4
  %v7_d6c4 = icmp eq i32 %v3_d6c0, -1
  store i1 %v7_d6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d6c4, label %dec_label_pc_d800, label %dec_label_pc_d6cc

dec_label_pc_d6cc:                                ; preds = %dec_label_pc_d6b4
  %v0_d6cc = load i32, i32* @r6, align 4
  store i32 %v0_d6cc, i32* %r0.global-to-local, align 4
  store i32 %v2_d578, i32* %r1.global-to-local, align 4
  store i32 %v1_d604, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_d6dc = call i32 @function_10d74(i32 %v0_d6cc, i32 %v2_d578, i32 %v1_d604, i32 16384)
  store i32 %v4_d6dc, i32* %r0.global-to-local, align 4
  %v7_d6e0 = icmp eq i32 %v4_d6dc, -1
  store i1 %v7_d6e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d6e0, label %dec_label_pc_d800, label %dec_label_pc_d6e8

dec_label_pc_d6e8:                                ; preds = %dec_label_pc_d6cc
  %v0_d6e8 = load i32, i32* @r6, align 4
  store i32 %v0_d6e8, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_d6f4 = call i32 @function_10478(i32 3, i32 %v0_d6e8)
  %v0_d6f8 = load i32, i32* @r6, align 4
  store i32 %v0_d6f8, i32* %r1.global-to-local, align 4
  %v1_d6fc = or i32 %v2_d6f4, 2048
  store i32 %v1_d6fc, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_d704 = call i32 @function_10478(i32 4, i32 %v0_d6f8)
  store i32 %v2_d704, i32* %r0.global-to-local, align 4
  store i32 %v2_d5e4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %v2_d718, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d720

dec_label_pc_d720:                                ; preds = %dec_label_pc_d720, %dec_label_pc_d6e8
  %v1_d724 = phi i32 [ %v1_d728, %dec_label_pc_d720 ], [ 4, %dec_label_pc_d6e8 ]
  store i32 0, i32* @r4, align 4
  %v3_d724 = add i32 %v1_d724, %v2_d718
  %v4_d724 = inttoptr i32 %v3_d724 to i32*
  store i32 0, i32* %v4_d724, align 4
  %v0_d728 = load i32, i32* %r3.global-to-local, align 4
  %v1_d728 = add i32 %v0_d728, 4
  store i32 %v1_d728, i32* %r3.global-to-local, align 4
  %v7_d72c = icmp eq i32 %v1_d728, 128
  br i1 %v7_d72c, label %dec_label_pc_d734, label %dec_label_pc_d720

dec_label_pc_d734:                                ; preds = %dec_label_pc_d720
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_d734 = load i32, i32* @r6, align 4
  %v3_d734 = udiv i32 %v0_d734, 32
  %v3_d73c = mul nuw nsw i32 %v3_d734, 4
  store i32 %v3_d73c, i32* %r3.global-to-local, align 4
  %v2_d744 = add i32 %v3_d73c, %v2_d740
  store i32 %v2_d744, i32* @r5, align 4
  %v1_d748 = add i32 %v2_d744, -156
  %v2_d748 = inttoptr i32 %v1_d748 to i32*
  %v3_d748 = load i32, i32* %v2_d748, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_d750 = urem i32 %v0_d734, 32
  store i32 %v1_d750, i32* @r7, align 4
  %v7_d754 = shl i32 1, %v1_d750
  %v8_d754 = or i32 %v3_d748, %v7_d754
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_d754, i32* %v2_d748, align 4
  %v0_d764 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_d764, i32* %stack_var_-52, align 4
  store i32 %v2_d76c, i32* @lr, align 4
  store i32 %v2_d5e4, i32* @ip, align 4
  %v0_d774 = load i32, i32* @r6, align 4
  %v1_d774 = load i32, i32* %r3.global-to-local, align 4
  %v2_d774 = add i32 %v1_d774, %v0_d774
  store i32 %v2_d774, i32* %r0.global-to-local, align 4
  %v0_d77c = load i32, i32* @r4, align 4
  store i32 %v0_d77c, i32* %r2.global-to-local, align 4
  store i32 %v0_d77c, i32* %r3.global-to-local, align 4
  %v5_d788 = call i32 @function_10368(i32 %v2_d774, i32 %v2_d718, i32 %v0_d77c, i32 %v0_d77c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_d788, i32* %r0.global-to-local, align 4
  %v7_d78c = icmp eq i32 %v5_d788, -1
  store i1 %v7_d78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d78c, label %dec_label_pc_d810, label %dec_label_pc_d794

dec_label_pc_d794:                                ; preds = %dec_label_pc_d734
  %v1_d794 = load i32, i32* @r4, align 4
  %v9_d794 = icmp eq i32 %v5_d788, %v1_d794
  store i1 %v9_d794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d794, label %dec_label_pc_d7f0, label %dec_label_pc_d79c

dec_label_pc_d79c:                                ; preds = %dec_label_pc_d794
  %v0_d79c = load i32, i32* @r5, align 4
  %v1_d79c = add i32 %v0_d79c, -156
  %v2_d79c = inttoptr i32 %v1_d79c to i32*
  %v3_d79c = load i32, i32* %v2_d79c, align 4
  %v1_d7a0 = load i32, i32* @r7, align 4
  %v6_d7a0 = ashr i32 %v3_d79c, %v1_d7a0
  store i32 %v6_d7a0, i32* %r3.global-to-local, align 4
  %v1_d7a4 = urem i32 %v6_d7a0, 2
  %v2_d7a4 = icmp eq i32 %v1_d7a4, 0
  store i1 %v2_d7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d7a4, label %dec_label_pc_d810, label %dec_label_pc_d7ac

dec_label_pc_d7ac:                                ; preds = %dec_label_pc_d79c
  store i32 %v2_d7b0, i32* @r5, align 4
  store i32 %v2_d7b0, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d7c0 = load i32, i32* @r6, align 4
  store i32 %v0_d7c0, i32* %r0.global-to-local, align 4
  %v6_d7cc = call i32 @function_10d38(i32 %v0_d7c0, i32 %v2_d7b0, i32 2048, i32 16384, i32 %v1_d794, i32 %v1_d794)
  store i32 %v6_d7cc, i32* %r4.global-to-local, align 4
  %v0_d7d4 = load i32, i32* @sb, align 4
  store i32 %v0_d7d4, i32* %r0.global-to-local, align 4
  %v1_d7d8 = inttoptr i32 %v0_d7d4 to i8*
  %v2_d7d8 = call i32 @function_fc38(i8* %v1_d7d8)
  %v1_d7dc = add i32 %v2_d7d8, 17
  store i32 %v1_d7dc, i32* %r0.global-to-local, align 4
  %v0_d7e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d7e0 = icmp ult i32 %v0_d7e0, %v1_d7dc
  %v9_d7e0 = icmp eq i32 %v0_d7e0, %v1_d7dc
  store i1 %v9_d7e0, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_d7e0, label %dec_label_pc_d7f0, label %dec_label_pc_d844

dec_label_pc_d7f0:                                ; preds = %dec_label_pc_d7ac, %dec_label_pc_d844, %dec_label_pc_d870, %dec_label_pc_d794, %dec_label_pc_d838
  %v0_d7f0 = load i32, i32* @r8, align 4
  %v7_d7f0 = icmp eq i32 %v0_d7f0, 5
  store i1 %v7_d7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d7f0, label %dec_label_pc_d810, label %dec_label_pc_d7f8

dec_label_pc_d7f8:                                ; preds = %dec_label_pc_d800, %dec_label_pc_d7f0
  %v0_d7f8 = phi i32 [ %v0_d808, %dec_label_pc_d800 ], [ %v0_d7f0, %dec_label_pc_d7f0 ]
  %v1_d7f8 = add i32 %v0_d7f8, 1
  %v0_d68c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d68c

dec_label_pc_d800:                                ; preds = %dec_label_pc_d6cc, %dec_label_pc_d6b4
  %v0_d800 = phi i32 [ %v4_d6dc, %dec_label_pc_d6cc ], [ %v3_d6c0, %dec_label_pc_d6b4 ]
  %v1_d800 = add i32 %v0_d800, 2
  store i32 %v1_d800, i32* %r0.global-to-local, align 4
  %v1_d804 = call i32 @function_12540(i32 %v1_d800)
  store i32 %v1_d804, i32* %r0.global-to-local, align 4
  %v0_d808 = load i32, i32* @r8, align 4
  %v7_d808 = icmp eq i32 %v0_d808, 5
  store i1 %v7_d808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d808, label %dec_label_pc_d810, label %dec_label_pc_d7f8

dec_label_pc_d810:                                ; preds = %dec_label_pc_d800, %dec_label_pc_d7f0, %dec_label_pc_d79c, %dec_label_pc_d734, %dec_label_pc_d87c, %dec_label_pc_d888.backedge
  %v0_d810 = load i32, i32* @r6, align 4
  store i32 %v0_d810, i32* %r0.global-to-local, align 4
  %v1_d814 = call i32 @function_10644(i32 %v0_d810)
  store i32 %v1_d814, i32* %r0.global-to-local, align 4
  %v0_d818 = load i32, i32* @fp, align 4
  %v1_d818 = inttoptr i32 %v0_d818 to i8*
  %v2_d818 = load i8, i8* %v1_d818, align 1
  %v3_d818 = zext i8 %v2_d818 to i32
  store i32 %v3_d818, i32* @r4, align 4
  %v2_d81c = icmp eq i8 %v2_d818, 0
  store i1 %v2_d81c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d81c, label %dec_label_pc_d960, label %dec_label_pc_d824

dec_label_pc_d824:                                ; preds = %dec_label_pc_d810, %dec_label_pc_d960
  %v0_d824 = phi i32 [ %v0_d818, %dec_label_pc_d810 ], [ %v0_d974, %dec_label_pc_d960 ]
  store i32 %v0_d824, i32* %r0.global-to-local, align 4
  store i32 %v3_d54c, i32* @r4, align 4
  store i32 %v9_d54c, i32* @r6, align 4
  store i32 %v12_d54c, i32* @r7, align 4
  store i32 %v15_d54c, i32* @r8, align 4
  store i32 %v18_d54c, i32* @sb, align 4
  store i32 %v21_d54c, i32* @sl, align 4
  store i32 %v24_d54c, i32* @fp, align 4
  store i32 %v27_d54c, i32* @lr, align 4
  ret i32 %v0_d824

dec_label_pc_d838:                                ; preds = %bb118
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_d83c = call i32 @function_12540(i32 1)
  store i32 %v1_d83c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d7f0

dec_label_pc_d844:                                ; preds = %dec_label_pc_d7ac
  store i32 %v2_d844, i32* @sb, align 4
  store i32 %v2_d844, i32* %r0.global-to-local, align 4
  %v2_d84c = call i32 @function_fc38(i8* %v1_d84c)
  %v4_d858 = load i16, i16* %stack_var_-4292, align 2
  %v5_d858 = sext i16 %v4_d858 to i32
  store i32 %v5_d858, i32* %r3.global-to-local, align 4
  store i32 %v6_d61c, i32* %r1.global-to-local, align 4
  %v1_d860 = load i32, i32* @sb, align 4
  %v9_d864 = icmp eq i16 %v4_d858, %v5_d634
  store i1 %v9_d864, i1* %cpsr_z.global-to-local, align 1
  %v2_d860 = add i32 %v2_d84c, 5
  %v1_d868 = add i32 %v2_d860, %v1_d860
  store i32 %v1_d868, i32* %r0.global-to-local, align 4
  br i1 %v9_d864, label %dec_label_pc_d870, label %dec_label_pc_d7f0

dec_label_pc_d870:                                ; preds = %dec_label_pc_d844
  store i32 %v4_d870, i32* %r3.global-to-local, align 4
  store i1 %v2_d874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d874, label %dec_label_pc_d7f0, label %dec_label_pc_d87c

dec_label_pc_d87c:                                ; preds = %dec_label_pc_d870
  %div = udiv i16 %tmp79, 256
  %v3_d87c = zext i16 %div to i32
  store i32 %v3_d87c, i32* %r2.global-to-local, align 4
  %v1_d880 = mul nuw nsw i32 %v4_d870, 256
  %v4_d884 = and i32 %v1_d880, 65280
  %v5_d884 = or i32 %v4_d884, %v3_d87c
  %v1_d888134 = add nsw i32 %v5_d884, -1
  %v3_d88c135 = mul i32 %v1_d888134, 65536
  store i32 %v3_d88c135, i32* %r3.global-to-local, align 4
  %v7_d890141 = icmp eq i32 %v3_d88c135, -65536
  store i1 %v7_d890141, i1* %cpsr_z.global-to-local, align 1
  %v3_d894142 = urem i32 %v1_d888134, 65536
  store i32 %v3_d894142, i32* @r8, align 4
  br i1 %v7_d890141, label %dec_label_pc_d810, label %dec_label_pc_d89c

dec_label_pc_d89c:                                ; preds = %dec_label_pc_d87c, %dec_label_pc_d888.backedge
  %v3_d894144 = phi i32 [ %v3_d894, %dec_label_pc_d888.backedge ], [ %v3_d894142, %dec_label_pc_d87c ]
  %v0_d8ec143 = phi i32 [ %storemerge29, %dec_label_pc_d888.backedge ], [ %v1_d868, %dec_label_pc_d87c ]
  store i32 %v0_d8ec143, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* @ip, align 4
  %v1_d8a818 = inttoptr i32 %v0_d8ec143 to i8*
  %v2_d8a819 = load i8, i8* %v1_d8a818, align 1
  %v3_d8a820 = zext i8 %v2_d8a819 to i32
  store i32 %v3_d8a820, i32* %r2.global-to-local, align 4
  %v2_d8ac21 = icmp eq i8 %v2_d8a819, 0
  store i1 %v2_d8ac21, i1* %cpsr_z.global-to-local, align 1
  %v3_d8b022 = mul nuw nsw i32 %v3_d8a820, 256
  store i32 %v3_d8b022, i32* %r1.global-to-local, align 4
  br i1 %v2_d8ac21, label %dec_label_pc_d8e4, label %dec_label_pc_d8b8.preheader

dec_label_pc_d8b8.preheader:                      ; preds = %dec_label_pc_d89c, %dec_label_pc_d8a8.backedge
  %v1_d984 = phi i32 [ %v1_d98450, %dec_label_pc_d8a8.backedge ], [ 1, %dec_label_pc_d89c ]
  %v0_d97c48 = phi i32 [ %v0_d97c, %dec_label_pc_d8a8.backedge ], [ 0, %dec_label_pc_d89c ]
  %v0_d8c446 = phi i32 [ %v3_d8b0, %dec_label_pc_d8a8.backedge ], [ %v3_d8b022, %dec_label_pc_d89c ]
  %v0_d8c044 = phi i32 [ %v1_d980, %dec_label_pc_d8a8.backedge ], [ %v0_d8ec143, %dec_label_pc_d89c ]
  %v0_d8b842 = phi i32 [ %v3_d8a8, %dec_label_pc_d8a8.backedge ], [ %v3_d8a820, %dec_label_pc_d89c ]
  br label %dec_label_pc_d8b8

dec_label_pc_d8b8:                                ; preds = %dec_label_pc_d8b8.preheader, %dec_label_pc_d8c0
  %v0_d97c = phi i32 [ %v0_d97c48, %dec_label_pc_d8b8.preheader ], [ 1, %dec_label_pc_d8c0 ]
  %v0_d8c4 = phi i32 [ %v0_d8c446, %dec_label_pc_d8b8.preheader ], [ %v3_d8dc, %dec_label_pc_d8c0 ]
  %v0_d980 = phi i32 [ %v0_d8c044, %dec_label_pc_d8b8.preheader ], [ %v2_d8cc, %dec_label_pc_d8c0 ]
  %v0_d8b8 = phi i32 [ %v0_d8b842, %dec_label_pc_d8b8.preheader ], [ %v3_d8d0, %dec_label_pc_d8c0 ]
  %v7_d8b8 = icmp eq i32 %v0_d8b8, 191
  store i1 %v7_d8b8, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v0_d8b8, 192
  br i1 %tmp, label %dec_label_pc_d97c, label %dec_label_pc_d8c0

dec_label_pc_d8c0:                                ; preds = %dec_label_pc_d8b8
  %v1_d8c0 = add i32 %v0_d980, 1
  %v2_d8c0 = inttoptr i32 %v1_d8c0 to i8*
  %v3_d8c0 = load i8, i8* %v2_d8c0, align 1
  %v4_d8c0 = zext i8 %v3_d8c0 to i32
  %v2_d8c4 = or i32 %v4_d8c0, -49152
  %v0_d8cc = load i32, i32* @r5, align 4
  %v1_d8c8 = add i32 %v0_d8cc, %v0_d8c4
  %v2_d8cc = add i32 %v1_d8c8, %v2_d8c4
  store i32 %v2_d8cc, i32* %r3.global-to-local, align 4
  %v1_d8d0 = inttoptr i32 %v2_d8cc to i8*
  %v2_d8d0 = load i8, i8* %v1_d8d0, align 1
  %v3_d8d0 = zext i8 %v2_d8d0 to i32
  store i32 %v3_d8d0, i32* %r2.global-to-local, align 4
  %v2_d8d4 = icmp eq i8 %v2_d8d0, 0
  store i1 %v2_d8d4, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_d8dc = mul nuw nsw i32 %v3_d8d0, 256
  store i32 %v3_d8dc, i32* %r1.global-to-local, align 4
  br i1 %v2_d8d4, label %dec_label_pc_d8e4, label %dec_label_pc_d8b8

dec_label_pc_d8e4:                                ; preds = %dec_label_pc_d8a8.backedge, %dec_label_pc_d8c0, %dec_label_pc_d89c
  %v1_d8e8 = phi i32 [ 1, %dec_label_pc_d89c ], [ %v1_d984, %dec_label_pc_d8c0 ], [ %v1_d98450, %dec_label_pc_d8a8.backedge ]
  %v0_d8e4 = phi i32 [ 0, %dec_label_pc_d89c ], [ 1, %dec_label_pc_d8c0 ], [ %v0_d97c, %dec_label_pc_d8a8.backedge ]
  %v7_d8e4 = icmp eq i32 %v0_d8e4, 1
  store i1 %v7_d8e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d8e4, label %bb119, label %bb120

bb119:                                            ; preds = %dec_label_pc_d8e4
  %v2_d8e8 = add i32 %v1_d8e8, 1
  store i32 %v2_d8e8, i32* @ip, align 4
  br label %bb120

bb120:                                            ; preds = %dec_label_pc_d8e4, %bb119
  %v1_d8ec = phi i32 [ %v1_d8e8, %dec_label_pc_d8e4 ], [ %v2_d8e8, %bb119 ]
  %v2_d8ec = add i32 %v1_d8ec, %v0_d8ec143
  store i32 %v2_d8ec, i32* @r4, align 4
  %v3_d8f0 = inttoptr i32 %v2_d8ec to i8*
  %v4_d8f0 = load i8, i8* %v3_d8f0, align 1
  %v6_d8f0 = zext i8 %v4_d8f0 to i32
  store i32 %v6_d8f0, i32* %r3.global-to-local, align 4
  %v1_d8f4 = add i32 %v2_d8ec, 1
  %v2_d8f4 = inttoptr i32 %v1_d8f4 to i8*
  %v3_d8f4 = load i8, i8* %v2_d8f4, align 1
  %v4_d8f4 = zext i8 %v3_d8f4 to i32
  store i32 %v4_d8f4, i32* %r2.global-to-local, align 4
  %v4_d8f8 = mul nuw nsw i32 %v4_d8f4, 256
  %v5_d8f8 = or i32 %v4_d8f8, %v6_d8f0
  store i32 %v5_d8f8, i32* %r3.global-to-local, align 4
  %v7_d8fc = icmp eq i32 %v5_d8f8, 256
  store i1 %v7_d8fc, i1* %cpsr_z.global-to-local, align 1
  %v1_d900 = add i32 %v2_d8ec, 10
  store i32 %v1_d900, i32* @r7, align 4
  br i1 %v7_d8fc, label %dec_label_pc_d99c, label %dec_label_pc_d908

dec_label_pc_d908:                                ; preds = %dec_label_pc_d99c, %bb120
  store i32 %v1_d900, i32* %r3.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_d91424 = inttoptr i32 %v1_d900 to i8*
  %v2_d91425 = load i8, i8* %v1_d91424, align 1
  %v3_d91426 = zext i8 %v2_d91425 to i32
  store i32 %v3_d91426, i32* %r2.global-to-local, align 4
  %v2_d91827 = icmp eq i8 %v2_d91425, 0
  store i1 %v2_d91827, i1* %cpsr_z.global-to-local, align 1
  %v3_d91c28 = mul nuw nsw i32 %v3_d91426, 256
  store i32 %v3_d91c28, i32* %r1.global-to-local, align 4
  br i1 %v2_d91827, label %dec_label_pc_d950, label %dec_label_pc_d924.preheader

dec_label_pc_d924.preheader:                      ; preds = %dec_label_pc_d908, %dec_label_pc_d914.backedge
  %v1_d994 = phi i32 [ %v1_d99465, %dec_label_pc_d914.backedge ], [ 1, %dec_label_pc_d908 ]
  %v0_d98c63 = phi i32 [ %v0_d98c, %dec_label_pc_d914.backedge ], [ 0, %dec_label_pc_d908 ]
  %v0_d93061 = phi i32 [ %v3_d91c, %dec_label_pc_d914.backedge ], [ %v3_d91c28, %dec_label_pc_d908 ]
  %v0_d92c59 = phi i32 [ %v1_d990, %dec_label_pc_d914.backedge ], [ %v1_d900, %dec_label_pc_d908 ]
  %v0_d92457 = phi i32 [ %v3_d914, %dec_label_pc_d914.backedge ], [ %v3_d91426, %dec_label_pc_d908 ]
  br label %dec_label_pc_d924

dec_label_pc_d924:                                ; preds = %dec_label_pc_d924.preheader, %dec_label_pc_d92c
  %v0_d98c = phi i32 [ %v0_d98c63, %dec_label_pc_d924.preheader ], [ 1, %dec_label_pc_d92c ]
  %v0_d930 = phi i32 [ %v0_d93061, %dec_label_pc_d924.preheader ], [ %v3_d948, %dec_label_pc_d92c ]
  %v0_d990 = phi i32 [ %v0_d92c59, %dec_label_pc_d924.preheader ], [ %v2_d938, %dec_label_pc_d92c ]
  %v0_d924 = phi i32 [ %v0_d92457, %dec_label_pc_d924.preheader ], [ %v3_d93c, %dec_label_pc_d92c ]
  %v7_d924 = icmp eq i32 %v0_d924, 191
  store i1 %v7_d924, i1* %cpsr_z.global-to-local, align 1
  %tmp159 = icmp ult i32 %v0_d924, 192
  br i1 %tmp159, label %dec_label_pc_d98c, label %dec_label_pc_d92c

dec_label_pc_d92c:                                ; preds = %dec_label_pc_d924
  %v1_d92c = add i32 %v0_d990, 1
  %v2_d92c = inttoptr i32 %v1_d92c to i8*
  %v3_d92c = load i8, i8* %v2_d92c, align 1
  %v4_d92c = zext i8 %v3_d92c to i32
  %v2_d930 = or i32 %v4_d92c, -49152
  %v0_d938 = load i32, i32* @r5, align 4
  %v1_d934 = add i32 %v0_d938, %v0_d930
  %v2_d938 = add i32 %v1_d934, %v2_d930
  store i32 %v2_d938, i32* %r3.global-to-local, align 4
  %v1_d93c = inttoptr i32 %v2_d938 to i8*
  %v2_d93c = load i8, i8* %v1_d93c, align 1
  %v3_d93c = zext i8 %v2_d93c to i32
  store i32 %v3_d93c, i32* %r2.global-to-local, align 4
  %v2_d940 = icmp eq i8 %v2_d93c, 0
  store i1 %v2_d940, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @ip, align 4
  %v3_d948 = mul nuw nsw i32 %v3_d93c, 256
  store i32 %v3_d948, i32* %r1.global-to-local, align 4
  br i1 %v2_d940, label %dec_label_pc_d950, label %dec_label_pc_d924

dec_label_pc_d950:                                ; preds = %dec_label_pc_d914.backedge, %dec_label_pc_d92c, %dec_label_pc_d908
  %v1_d954 = phi i32 [ 1, %dec_label_pc_d908 ], [ %v1_d994, %dec_label_pc_d92c ], [ %v1_d99465, %dec_label_pc_d914.backedge ]
  %v0_d950 = phi i32 [ 0, %dec_label_pc_d908 ], [ 1, %dec_label_pc_d92c ], [ %v0_d98c, %dec_label_pc_d914.backedge ]
  %v7_d950 = icmp eq i32 %v0_d950, 1
  store i1 %v7_d950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d950, label %bb121, label %bb122

bb121:                                            ; preds = %dec_label_pc_d950
  %v2_d954 = add i32 %v1_d954, 1
  store i32 %v2_d954, i32* %r0.global-to-local, align 4
  br label %bb122

bb122:                                            ; preds = %dec_label_pc_d9b0, %dec_label_pc_d950, %bb121
  %v1_d958 = phi i32 [ %v5_d9c8, %dec_label_pc_d9b0 ], [ %v1_d954, %dec_label_pc_d950 ], [ %v2_d954, %bb121 ]
  %v2_d958 = add i32 %v1_d958, %v1_d900
  br label %dec_label_pc_d888.backedge

dec_label_pc_d888.backedge:                       ; preds = %bb122, %dec_label_pc_d9d4
  %v0_d888.pre = phi i32 [ %v3_d894144, %bb122 ], [ %v0_d888.pre.pre, %dec_label_pc_d9d4 ]
  %storemerge29 = phi i32 [ %v2_d958, %bb122 ], [ %v2_da4c, %dec_label_pc_d9d4 ]
  store i32 %storemerge29, i32* %r0.global-to-local, align 4
  %v1_d888 = add i32 %v0_d888.pre, -1
  %v3_d88c = mul i32 %v1_d888, 65536
  store i32 %v3_d88c, i32* %r3.global-to-local, align 4
  %v7_d890 = icmp eq i32 %v3_d88c, -65536
  store i1 %v7_d890, i1* %cpsr_z.global-to-local, align 1
  %v3_d894 = urem i32 %v1_d888, 65536
  store i32 %v3_d894, i32* @r8, align 4
  br i1 %v7_d890, label %dec_label_pc_d810, label %dec_label_pc_d89c

dec_label_pc_d960:                                ; preds = %dec_label_pc_d810
  %v1_d960 = add i32 %v0_d818, 4
  %v2_d960 = inttoptr i32 %v1_d960 to i32*
  %v3_d960 = load i32, i32* %v2_d960, align 4
  store i32 %v3_d960, i32* %r0.global-to-local, align 4
  %v2_d964 = icmp eq i32 %v3_d960, 0
  store i1 %v2_d964, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_d96c.111 to i32), i32* @lr, align 4
  %v1_d968 = xor i1 %v2_d964, true
  call void @__pseudo_cond_branch(i1 %v1_d968, i32 ptrtoint (i32* @global_var_120e4.16 to i32))
  %v0_d96c = load i32, i32* @fp, align 4
  store i32 %v0_d96c, i32* @r0, align 4
  %v0_d970 = call i32 @function_120e4()
  store i32 %v0_d970, i32* %r0.global-to-local, align 4
  %v0_d974 = load i32, i32* @r4, align 4
  br label %dec_label_pc_d824

dec_label_pc_d97c:                                ; preds = %dec_label_pc_d8b8
  %v2_d97c = icmp eq i32 %v0_d97c, 0
  store i1 %v2_d97c, i1* %cpsr_z.global-to-local, align 1
  %v1_d980 = add i32 %v0_d980, 1
  store i32 %v1_d980, i32* %r3.global-to-local, align 4
  br i1 %v2_d97c, label %bb123, label %dec_label_pc_d8a8.backedge

dec_label_pc_d8a8.backedge:                       ; preds = %dec_label_pc_d97c, %bb123
  %v1_d98450 = phi i32 [ %v1_d984, %dec_label_pc_d97c ], [ %v2_d984, %bb123 ]
  %v1_d8a8 = inttoptr i32 %v1_d980 to i8*
  %v2_d8a8 = load i8, i8* %v1_d8a8, align 1
  %v3_d8a8 = zext i8 %v2_d8a8 to i32
  store i32 %v3_d8a8, i32* %r2.global-to-local, align 4
  %v2_d8ac = icmp eq i8 %v2_d8a8, 0
  store i1 %v2_d8ac, i1* %cpsr_z.global-to-local, align 1
  %v3_d8b0 = mul nuw nsw i32 %v3_d8a8, 256
  store i32 %v3_d8b0, i32* %r1.global-to-local, align 4
  br i1 %v2_d8ac, label %dec_label_pc_d8e4, label %dec_label_pc_d8b8.preheader

bb123:                                            ; preds = %dec_label_pc_d97c
  %v2_d984 = add i32 %v1_d984, 1
  store i32 %v2_d984, i32* @ip, align 4
  br label %dec_label_pc_d8a8.backedge

dec_label_pc_d98c:                                ; preds = %dec_label_pc_d924
  %v2_d98c = icmp eq i32 %v0_d98c, 0
  store i1 %v2_d98c, i1* %cpsr_z.global-to-local, align 1
  %v1_d990 = add i32 %v0_d990, 1
  store i32 %v1_d990, i32* %r3.global-to-local, align 4
  br i1 %v2_d98c, label %bb124, label %dec_label_pc_d914.backedge

dec_label_pc_d914.backedge:                       ; preds = %dec_label_pc_d98c, %bb124
  %v1_d99465 = phi i32 [ %v1_d994, %dec_label_pc_d98c ], [ %v2_d994, %bb124 ]
  %v1_d914 = inttoptr i32 %v1_d990 to i8*
  %v2_d914 = load i8, i8* %v1_d914, align 1
  %v3_d914 = zext i8 %v2_d914 to i32
  store i32 %v3_d914, i32* %r2.global-to-local, align 4
  %v2_d918 = icmp eq i8 %v2_d914, 0
  store i1 %v2_d918, i1* %cpsr_z.global-to-local, align 1
  %v3_d91c = mul nuw nsw i32 %v3_d914, 256
  store i32 %v3_d91c, i32* %r1.global-to-local, align 4
  br i1 %v2_d918, label %dec_label_pc_d950, label %dec_label_pc_d924.preheader

bb124:                                            ; preds = %dec_label_pc_d98c
  %v2_d994 = add i32 %v1_d994, 1
  store i32 %v2_d994, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d914.backedge

dec_label_pc_d99c:                                ; preds = %bb120
  %v1_d99c = add i32 %v2_d8ec, 2
  %v2_d99c = inttoptr i32 %v1_d99c to i8*
  %v3_d99c = load i8, i8* %v2_d99c, align 1
  %v4_d99c = zext i8 %v3_d99c to i32
  store i32 %v4_d99c, i32* %r3.global-to-local, align 4
  %v1_d9a0 = add i32 %v2_d8ec, 3
  %v2_d9a0 = inttoptr i32 %v1_d9a0 to i8*
  %v3_d9a0 = load i8, i8* %v2_d9a0, align 1
  %v4_d9a0 = zext i8 %v3_d9a0 to i32
  store i32 %v4_d9a0, i32* %r2.global-to-local, align 4
  %v4_d9a4 = mul nuw nsw i32 %v4_d9a0, 256
  %v5_d9a4 = or i32 %v4_d9a4, %v4_d99c
  store i32 %v5_d9a4, i32* %r3.global-to-local, align 4
  %v7_d9a8 = icmp eq i32 %v5_d9a4, 256
  store i1 %v7_d9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d9a8, label %dec_label_pc_d9b0, label %dec_label_pc_d908

dec_label_pc_d9b0:                                ; preds = %dec_label_pc_d99c
  %v1_d9b0 = add i32 %v2_d8ec, 9
  %v2_d9b0 = inttoptr i32 %v1_d9b0 to i8*
  %v3_d9b0 = load i8, i8* %v2_d9b0, align 1
  %v4_d9b0 = zext i8 %v3_d9b0 to i32
  store i32 %v4_d9b0, i32* %r2.global-to-local, align 4
  %v1_d9b4 = add i32 %v2_d8ec, 8
  %v2_d9b4 = inttoptr i32 %v1_d9b4 to i8*
  %v3_d9b4 = load i8, i8* %v2_d9b4, align 1
  %v4_d9b4 = zext i8 %v3_d9b4 to i32
  %v4_d9b8 = mul nuw nsw i32 %v4_d9b0, 256
  %v5_d9b8 = or i32 %v4_d9b4, %v4_d9b8
  %v3_d9bc = mul i32 %v5_d9b8, 65536
  store i32 %v3_d9bc, i32* %r3.global-to-local, align 4
  %v3_d9c0 = mul nuw nsw i32 %v4_d9b4, 256
  store i32 %v3_d9c0, i32* %r2.global-to-local, align 4
  %v5_d9c8 = or i32 %v3_d9c0, %v4_d9b0
  store i32 %v5_d9c8, i32* %r0.global-to-local, align 4
  %v7_d9cc = icmp eq i32 %v5_d9c8, 4
  store i1 %v7_d9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d9cc, label %dec_label_pc_d9d4, label %bb122

dec_label_pc_d9d4:                                ; preds = %dec_label_pc_d9b0
  %v2_d9d4 = inttoptr i32 %v1_d900 to i8*
  %v3_d9d4 = load i8, i8* %v2_d9d4, align 1
  %v4_d9d4 = zext i8 %v3_d9d4 to i32
  store i32 %v4_d9d4, i32* %r3.global-to-local, align 4
  store i32 %v2_d5e4, i32* %r2.global-to-local, align 4
  %v1_d9e0 = add i32 %v2_d8ec, 11
  %v2_d9e0 = inttoptr i32 %v1_d9e0 to i8*
  %v3_d9e0 = load i8, i8* %v2_d9e0, align 1
  %v4_d9e0 = zext i8 %v3_d9e0 to i32
  store i32 %v4_d9e0, i32* %r2.global-to-local, align 4
  store i32 %v2_d5e4, i32* %r3.global-to-local, align 4
  %v1_d9ec = add i32 %v2_d8ec, 12
  %v2_d9ec = inttoptr i32 %v1_d9ec to i8*
  %v3_d9ec = load i8, i8* %v2_d9ec, align 1
  %v4_d9ec = zext i8 %v3_d9ec to i32
  store i32 %v4_d9ec, i32* %r3.global-to-local, align 4
  store i32 %v2_d5e4, i32* @ip, align 4
  %v1_d9f8 = add i32 %v2_d8ec, 13
  %v2_d9f8 = inttoptr i32 %v1_d9f8 to i8*
  %v3_d9f8 = load i8, i8* %v2_d9f8, align 1
  %v4_d9f8 = zext i8 %v3_d9f8 to i32
  store i32 %v4_d9f8, i32* %r2.global-to-local, align 4
  %v0_da00 = load i32, i32* @fp, align 4
  %v1_da00 = inttoptr i32 %v0_da00 to i8*
  %v2_da00 = load i8, i8* %v1_da00, align 1
  %v3_da00 = zext i8 %v2_da00 to i32
  %v1_da04 = mul nuw nsw i32 %v3_da00, 4
  %v3_da08 = add nuw nsw i32 %v1_da04, 4
  store i32 %v3_da08, i32* %r1.global-to-local, align 4
  %v1_da0c = add i32 %v0_da00, 4
  %v2_da0c = inttoptr i32 %v1_da0c to i32*
  %v3_da0c = load i32, i32* %v2_da0c, align 4
  store i32 %v3_da0c, i32* %r0.global-to-local, align 4
  %v3_da10 = sext i8 %v3_d9f8 to i32
  %v5_da10 = sext i8 %v3_d9ec to i32
  %v10_da10 = inttoptr i32 %v3_da0c to i32*
  %v11_da10 = call i32 @function_11acc(i32* %v10_da10, i32 %v3_da08, i32 %v3_da10, i32 %v5_da10)
  store i32 %v11_da10, i32* %r0.global-to-local, align 4
  %v0_da14 = load i32, i32* @fp, align 4
  %v1_da14 = inttoptr i32 %v0_da14 to i8*
  %v2_da14 = load i8, i8* %v1_da14, align 1
  %v3_da14 = zext i8 %v2_da14 to i32
  store i32 %v3_da14, i32* %r2.global-to-local, align 4
  %v4_da1c = sext i8 %v3_d9d4 to i32
  store i32 %v4_da1c, i32* %r3.global-to-local, align 4
  %v1_da20 = add nuw nsw i32 %v3_da14, 1
  store i32 %v1_da20, i32* %r1.global-to-local, align 4
  %v5_da24 = mul nuw nsw i32 %v3_da14, 4
  %v6_da24 = add i32 %v5_da24, %v11_da10
  %v7_da24 = inttoptr i32 %v6_da24 to i32*
  store i32 %v4_da1c, i32* %v7_da24, align 4
  %v1_da28 = load i32, i32* @fp, align 4
  %v2_da28 = add i32 %v1_da28, 4
  %v3_da28 = inttoptr i32 %v2_da28 to i32*
  store i32 %v11_da10, i32* %v3_da28, align 4
  %v0_da2c = load i32, i32* %r1.global-to-local, align 4
  %v1_da2c = trunc i32 %v0_da2c to i8
  %v2_da2c = load i32, i32* @fp, align 4
  %v3_da2c = inttoptr i32 %v2_da2c to i8*
  store i8 %v1_da2c, i8* %v3_da2c, align 1
  %v0_da30 = load i32, i32* @r4, align 4
  %v1_da30 = add i32 %v0_da30, 9
  %v2_da30 = inttoptr i32 %v1_da30 to i8*
  %v3_da30 = load i8, i8* %v2_da30, align 1
  %v4_da30 = zext i8 %v3_da30 to i32
  store i32 %v4_da30, i32* %r3.global-to-local, align 4
  %v1_da34 = add i32 %v0_da30, 8
  %v2_da34 = inttoptr i32 %v1_da34 to i8*
  %v3_da34 = load i8, i8* %v2_da34, align 1
  %v4_da34 = zext i8 %v3_da34 to i32
  %v4_da38 = mul nuw nsw i32 %v4_da30, 256
  %v5_da38 = or i32 %v4_da34, %v4_da38
  %v3_da3c = mul i32 %v5_da38, 65536
  store i32 %v3_da3c, i32* %r2.global-to-local, align 4
  %v3_da40 = mul nuw nsw i32 %v4_da34, 256
  store i32 %v3_da40, i32* %r3.global-to-local, align 4
  %v5_da48 = or i32 %v3_da40, %v4_da30
  store i32 %v5_da48, i32* %r0.global-to-local, align 4
  %v0_da4c = load i32, i32* @r7, align 4
  %v2_da4c = add i32 %v0_da4c, %v5_da48
  %v0_d888.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d888.backedge

; uselistorder directives
  uselistorder i32 %v3_da40, { 1, 0 }
  uselistorder i32 %v4_da30, { 1, 0, 2 }
  uselistorder i32 %v11_da10, { 1, 0, 2 }
  uselistorder i32 %v3_da08, { 1, 0 }
  uselistorder i32 %v5_d9c8, { 1, 2, 0 }
  uselistorder i32 %v3_d9c0, { 1, 0 }
  uselistorder i32 %v4_d9b0, { 1, 0, 2 }
  uselistorder i32 %v2_d994, { 1, 0 }
  uselistorder i32 %v3_d914, { 0, 2, 1 }
  uselistorder i32 %v1_d99465, { 1, 0 }
  uselistorder i32 %v1_d990, { 1, 2, 0 }
  uselistorder i32 %v2_d984, { 1, 0 }
  uselistorder i32 %v3_d8a8, { 0, 2, 1 }
  uselistorder i32 %v1_d98450, { 1, 0 }
  uselistorder i32 %v1_d980, { 1, 2, 0 }
  uselistorder i1 %v7_d890, { 1, 0 }
  uselistorder i32 %v1_d888, { 1, 0 }
  uselistorder i32 %storemerge29, { 1, 0 }
  uselistorder i32 %v3_d93c, { 0, 2, 1 }
  uselistorder i32 %v2_d938, { 1, 2, 0 }
  uselistorder i32 %v0_d98c, { 2, 0, 1 }
  uselistorder i32 %v1_d994, { 1, 2, 0 }
  uselistorder i32 %v3_d91c28, { 1, 0 }
  uselistorder i32 %v3_d91426, { 1, 0, 2 }
  uselistorder i32 %v1_d900, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_d8ec, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_d8d0, { 0, 2, 1 }
  uselistorder i32 %v2_d8cc, { 1, 2, 0 }
  uselistorder i32 %v0_d97c, { 2, 0, 1 }
  uselistorder i32 %v1_d984, { 1, 2, 0 }
  uselistorder i32 %v3_d8b022, { 1, 0 }
  uselistorder i32 %v3_d8a820, { 1, 0, 2 }
  uselistorder i32 %v0_d8ec143, { 3, 0, 1, 2 }
  uselistorder i32 %v3_d894142, { 1, 0 }
  uselistorder i1 %v7_d890141, { 1, 0 }
  uselistorder i32 %v1_d888134, { 1, 0 }
  uselistorder i1 %v9_d864, { 1, 0 }
  uselistorder i32 %v0_d824, { 1, 0 }
  uselistorder i32 %v0_d818, { 1, 0, 2 }
  uselistorder i32 %v0_d808, { 1, 0 }
  uselistorder i32 %v0_d7e0, { 1, 0 }
  uselistorder i32 %v1_d794, { 1, 0, 2 }
  uselistorder i1 %v7_d78c, { 1, 0 }
  uselistorder i32 %v5_d788, { 1, 0, 2 }
  uselistorder i32 %v1_d750, { 1, 0 }
  uselistorder i32 %v3_d73c, { 1, 0 }
  uselistorder i32 %v0_d734, { 1, 0 }
  uselistorder i32 %v1_d728, { 1, 2, 0 }
  uselistorder i1 %v7_d6e0, { 1, 0 }
  uselistorder i32 %v4_d6dc, { 1, 0, 2 }
  uselistorder i1 %v7_d6c4, { 1, 0 }
  uselistorder i32 %v3_d6c0, { 1, 0, 2 }
  uselistorder i1 %v7_d6a8, { 1, 0 }
  uselistorder i32 %v3_d6a4, { 2, 1, 0, 3 }
  uselistorder i1 %v7_d68c, { 2, 1, 0 }
  uselistorder i32 %v1_d690, { 1, 0 }
  uselistorder i32 %v2_d718, { 1, 0, 2 }
  uselistorder i16 %v5_d634, { 1, 0 }
  uselistorder i32 %v2_d630, { 1, 0, 2 }
  uselistorder i32 %v6_d61c, { 1, 2, 0 }
  uselistorder i64 %v5_d618, { 0, 2, 1 }
  uselistorder i32 %v1_d604, { 1, 0, 2 }
  uselistorder i32 %v1_d5bc, { 1, 0 }
  uselistorder i32 %v1_d5b8, { 1, 2, 0 }
  uselistorder i32 %v2_d5b4, { 1, 0 }
  uselistorder i1 %v8_d5a0, { 1, 0 }
  uselistorder i32 %v2_d578, { 1, 0, 2 }
  uselistorder i16* %stack_var_-2244, { 1, 0 }
  uselistorder i32* %stack_var_-68, { 0, 2, 1 }
  uselistorder i16* %stack_var_-4292, { 1, 0 }
  uselistorder i16 %tmp79, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 11, 14, 12, 13, 15, 17, 35, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 36 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 8, 29, 10, 11, 28, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 6, 3, 20, 5, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 21, 23, 18 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 11, 6, 8, 7, 9, 10, 12, 15, 13, 14, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 33, 32, 31, 34, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 8, 2, 13, 3, 4, 14, 5, 6, 7, 34, 9, 10, 11, 12, 33, 36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 35, 24, 25, 26, 27, 32, 29, 30, 28, 31, 37 }
  uselistorder i32 (i32)* @function_12540, { 10, 9, 8, 7, 6, 1, 0, 5, 4, 3, 2 }
  uselistorder label %dec_label_pc_d914.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d8a8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d888.backedge, { 1, 0 }
  uselistorder label %bb122, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d924, { 1, 0 }
  uselistorder label %dec_label_pc_d924.preheader, { 1, 0 }
  uselistorder label %bb120, { 1, 0 }
  uselistorder label %dec_label_pc_d8b8, { 1, 0 }
  uselistorder label %dec_label_pc_d8b8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d89c, { 1, 0 }
  uselistorder label %dec_label_pc_d824, { 1, 0 }
  uselistorder label %dec_label_pc_d810, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_d7f0, { 2, 1, 4, 0, 3 }
  uselistorder label %bb118, { 1, 0 }
  uselistorder label %bb115, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d598, { 1, 0 }
}

define i32 @function_da54(i32 %arg1) local_unnamed_addr {
dec_label_pc_da54:
  %v2_da60 = load i32, i32* @global_var_202fc.113, align 4
  %v2_da68 = call i32 @function_10410(i32 %v2_da60, i32 9)
  ret i32 %v2_da68
}

define i32 @function_da7c() local_unnamed_addr {
dec_label_pc_da7c:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_da7c = load i32, i32* @r4, align 4
  store i32 %v3_da7c, i32* %stack_var_-16, align 4
  %v12_da7c = load i32, i32* @lr, align 4
  %v0_da80 = load i32, i32* @r0, align 4
  store i32 %v0_da80, i32* %r5.global-to-local, align 4
  %v1_da84 = add i32 %v0_da80, 4
  %v2_da84 = inttoptr i32 %v1_da84 to i32*
  %v3_da84 = load i32, i32* %v2_da84, align 4
  store i32 %v3_da84, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 55976, i32* @lr, align 4
  %v1_daa4 = icmp ne i32 %v3_da84, -1
  call void @__pseudo_cond_branch(i1 %v1_daa4, i32 ptrtoint (i32* @global_var_10644.88 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_dab4 = call i32 @function_10e30(i32 2, i32 1, i32 0)
  store i32 %v3_dab4, i32* %r0.global-to-local, align 4
  %v7_dab8 = icmp eq i32 %v3_dab4, -1
  %v1_dabc = load i32, i32* %r5.global-to-local, align 4
  %v2_dabc = add i32 %v1_dabc, 4
  %v3_dabc = inttoptr i32 %v2_dabc to i32*
  store i32 %v3_dab4, i32* %v3_dabc, align 4
  br i1 %v7_dab8, label %dec_label_pc_da7c.dec_label_pc_db34_crit_edge, label %dec_label_pc_dac4

dec_label_pc_da7c.dec_label_pc_db34_crit_edge:    ; preds = %dec_label_pc_da7c
  %v1_db3c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_db34

dec_label_pc_dac4:                                ; preds = %dec_label_pc_da7c
  %v2_da88 = ptrtoint i32* %stack_var_-32 to i32
  %v0_dac4 = load i32, i32* %r5.global-to-local, align 4
  %v1_dac4 = add i32 %v0_dac4, 28
  store i32 %v1_dac4, i32* @r0, align 4
  %v0_dac8 = load i32, i32* %r6.global-to-local, align 4
  %v2_dac8 = add i32 %v0_dac4, 24
  %v3_dac8 = inttoptr i32 %v2_dac8 to i32*
  store i32 %v0_dac8, i32* %v3_dac8, align 4
  store i32 256, i32* @r1, align 4
  %v0_dad0 = call i32 @function_fccc()
  store i32 %v0_dad0, i32* %r0.global-to-local, align 4
  %v0_dad4 = load i32, i32* %r5.global-to-local, align 4
  %v1_dad4 = add i32 %v0_dad4, 4
  %v2_dad4 = inttoptr i32 %v1_dad4 to i32*
  %v3_dad4 = load i32, i32* %v2_dad4, align 4
  store i32 %v3_dad4, i32* %r4.global-to-local, align 4
  %v0_dad8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_dad8, i32* %r2.global-to-local, align 4
  store i32 %v3_dad4, i32* %r0.global-to-local, align 4
  %v2_dae4 = call i32 @function_10478(i32 %v3_dad4, i32 3)
  %v1_daec = or i32 %v2_dae4, 2048
  store i32 %v1_daec, i32* %r2.global-to-local, align 4
  %v0_daf0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_daf0, i32* %r0.global-to-local, align 4
  %v2_daf4 = call i32 @function_10478(i32 %v0_daf0, i32 4)
  store i32 %v2_daf4, i32* %r0.global-to-local, align 4
  %v2_dafc = load i32, i32* @global_var_1e2a8.115, align 4
  store i32 %v2_dafc, i32* %r2.global-to-local, align 4
  %v1_db04 = load i32, i32* %r5.global-to-local, align 4
  %v2_db04 = add i32 %v1_db04, 12
  %v3_db04 = inttoptr i32 %v2_db04 to i32*
  store i32 1, i32* %v3_db04, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_db10 = load i32, i32* %r2.global-to-local, align 4
  %v1_db10 = load i32, i32* %r5.global-to-local, align 4
  %v2_db10 = add i32 %v1_db10, 8
  %v3_db10 = inttoptr i32 %v2_db10 to i32*
  store i32 %v0_db10, i32* %v3_db10, align 4
  %v0_db14 = load i32, i32* %r5.global-to-local, align 4
  %v1_db14 = add i32 %v0_db14, 16
  %v2_db14 = inttoptr i32 %v1_db14 to i32*
  %v3_db14 = load i32, i32* %v2_db14, align 4
  store i32 %v3_db14, i32* @ip, align 4
  %v1_db18 = add i32 %v0_db14, 4
  %v2_db18 = inttoptr i32 %v1_db18 to i32*
  %v3_db18 = load i32, i32* %v2_db18, align 4
  store i32 %v3_db18, i32* %r0.global-to-local, align 4
  %v1_db1c = add i32 %v0_db14, 20
  %v2_db1c = inttoptr i32 %v1_db1c to i16*
  %v3_db1c = load i16, i16* %v2_db1c, align 2
  %v4_db1c = zext i16 %v3_db1c to i32
  store i32 %v4_db1c, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_db30 = call i32 @function_10c18(i32 %v3_db18, i32 %v2_da88, i32 16)
  store i32 %v3_db30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_db34

dec_label_pc_db34:                                ; preds = %dec_label_pc_da7c.dec_label_pc_db34_crit_edge, %dec_label_pc_dac4
  %v1_db3c = phi i32 [ %v1_db3c.pre, %dec_label_pc_da7c.dec_label_pc_db34_crit_edge ], [ %v3_db30, %dec_label_pc_dac4 ]
  %v2_db38 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_db38, i32* @r4, align 4
  store i32 %v12_da7c, i32* @lr, align 4
  ret i32 %v1_db3c

; uselistorder directives
  uselistorder i32 %v3_dab4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_fccc, { 5, 6, 4, 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_db34, { 1, 0 }
}

define i32 @function_db44(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_db44:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_db44 = load i32, i32* @r4, align 4
  %v6_db44 = load i32, i32* @r5, align 4
  %v9_db44 = load i32, i32* @r6, align 4
  %v12_db44 = load i32, i32* @r7, align 4
  %v15_db44 = load i32, i32* @r8, align 4
  %v18_db44 = load i32, i32* @sb, align 4
  %v21_db44 = load i32, i32* @sl, align 4
  %v24_db44 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1e274.117 to i32), i32* @fp, align 4
  %v2_db4c = load i32, i32* @global_var_1e274.117, align 4
  store i32 ptrtoint (i32* @global_var_1e2a0.119 to i32), i32* @sl, align 4
  %v1_db58 = add i32 %v2_db4c, 1
  store i32 %v1_db58, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_db64 = load i32, i32* @global_var_1e2a0.119, align 4
  store i32 %v2_db64, i32* %r0.global-to-local, align 4
  %v3_db68 = mul i32 %v1_db58, 16
  store i32 %v3_db68, i32* %r1.global-to-local, align 4
  %v4_db70 = inttoptr i32 %v2_db64 to i32*
  %v5_db70 = call i32 @function_11acc(i32* %v4_db70, i32 %v3_db68, i32 %arg3, i32 %v1_db58)
  %v2_db74 = load i32, i32* @global_var_1e274.117, align 4
  store i32 %v2_db74, i32* %r2.global-to-local, align 4
  store i32 %v5_db70, i32* @r8, align 4
  %v0_db7c = load i32, i32* @r5, align 4
  store i32 %v0_db7c, i32* %r0.global-to-local, align 4
  %v1_db84 = load i32, i32* @sl, align 4
  %v2_db84 = inttoptr i32 %v1_db84 to i32*
  store i32 %v5_db70, i32* %v2_db84, align 4
  %v1_db88 = inttoptr i32 %v0_db7c to i8*
  %v2_db88 = call i32 @function_fc38(i8* %v1_db88)
  %sext = mul i32 %v2_db88, 16777216
  %v1_db8c = sdiv i32 %sext, 16777216
  %v2_db8c = add nsw i32 %v1_db8c, 1
  store i32 %v2_db8c, i32* @r4, align 4
  store i32 %v1_db8c, i32* @r7, align 4
  store i32 %v2_db8c, i32* @r0, align 4
  %v0_db98 = call i32 @function_11078()
  store i32 %v0_db98, i32* %r0.global-to-local, align 4
  %v0_db9c = load i32, i32* @r5, align 4
  store i32 %v0_db9c, i32* %r1.global-to-local, align 4
  %v0_dba0 = load i32, i32* @r4, align 4
  store i32 %v0_dba0, i32* %r2.global-to-local, align 4
  store i32 %v0_db98, i32* %r6.global-to-local, align 4
  %v3_dba8 = call i32 @function_fca8(i32 %v0_db98, i32 %v0_db9c, i32 %v0_dba0)
  store i32 %v3_dba8, i32* %r0.global-to-local, align 4
  %v0_dbac = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_dbac, 1
  %extract.t6 = trunc i32 %v0_dbac to i8
  br i1 %tmp22, label %dec_label_pc_dbd0, label %dec_label_pc_dbb4

dec_label_pc_dbb4:                                ; preds = %dec_label_pc_db44
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dbb8

dec_label_pc_dbb8:                                ; preds = %dec_label_pc_dbb8, %dec_label_pc_dbb4
  %v2_dbc0 = phi i32 [ %v1_dbc4, %dec_label_pc_dbb8 ], [ 0, %dec_label_pc_dbb4 ]
  %v1_dbb8 = load i32, i32* %r6.global-to-local, align 4
  %v2_dbb8 = add i32 %v1_dbb8, %v2_dbc0
  %v3_dbb8 = inttoptr i32 %v2_dbb8 to i8*
  %v4_dbb8 = load i8, i8* %v3_dbb8, align 1
  %v6_dbb8 = zext i8 %v4_dbb8 to i32
  %v1_dbbc = xor i32 %v6_dbb8, 69
  store i32 %v1_dbbc, i32* %r3.global-to-local, align 4
  %v1_dbc0 = trunc i32 %v1_dbbc to i8
  store i8 %v1_dbc0, i8* %v3_dbb8, align 1
  %v0_dbc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_dbc4 = add i32 %v0_dbc4, 1
  store i32 %v1_dbc4, i32* %r2.global-to-local, align 4
  %v1_dbc8 = load i32, i32* @r7, align 4
  %v9_dbc8 = icmp eq i32 %v1_dbc4, %v1_dbc8
  br i1 %v9_dbc8, label %dec_label_pc_dbd0.loopexit, label %dec_label_pc_dbb8

dec_label_pc_dbd0.loopexit:                       ; preds = %dec_label_pc_dbb8
  %extract.t = trunc i32 %v1_dbc4 to i8
  br label %dec_label_pc_dbd0

dec_label_pc_dbd0:                                ; preds = %dec_label_pc_dbd0.loopexit, %dec_label_pc_db44
  %v0_dbe0.off0 = phi i8 [ %extract.t, %dec_label_pc_dbd0.loopexit ], [ %extract.t6, %dec_label_pc_db44 ]
  %v2_dbd0 = load i32, i32* @global_var_1e274.117, align 4
  %v2_dbd4 = load i32, i32* @global_var_1e2a0.119, align 4
  %v3_dbd8 = mul i32 %v2_dbd0, 16
  store i32 %v3_dbd8, i32* @sb, align 4
  %v2_dbdc = add i32 %v2_dbd4, %v3_dbd8
  store i32 %v2_dbdc, i32* %r2.global-to-local, align 4
  %v3_dbe0 = add i32 %v2_dbdc, 12
  %v4_dbe0 = inttoptr i32 %v3_dbe0 to i8*
  store i8 %v0_dbe0.off0, i8* %v4_dbe0, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_db74, i32* %r3.global-to-local, align 4
  %v0_dbec = load i32, i32* %r6.global-to-local, align 4
  %v1_dbec = load i32, i32* @r8, align 4
  %v5_dbec = mul i32 %v2_db74, 16
  %v6_dbec = add i32 %v1_dbec, %v5_dbec
  %v7_dbec = inttoptr i32 %v6_dbec to i32*
  store i32 %v0_dbec, i32* %v7_dbec, align 4
  %v2_dbf0 = load i32, i32* @global_var_1e2a0.119, align 4
  store i32 %v2_dbf0, i32* @r7, align 4
  %v1_dbf4 = inttoptr i32 %arg2 to i8*
  %v2_dbf4 = call i32 @function_fc38(i8* %v1_dbf4)
  %sext1 = mul i32 %v2_dbf4, 16777216
  %v1_dbf8 = sdiv i32 %sext1, 16777216
  %v2_dbf8 = add nsw i32 %v1_dbf8, 1
  store i32 %v2_dbf8, i32* @r4, align 4
  store i32 %v1_dbf8, i32* @r6, align 4
  store i32 %v2_dbf8, i32* @r0, align 4
  %v0_dc04 = call i32 @function_11078()
  store i32 %v0_dc04, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_dc0c = load i32, i32* @r4, align 4
  store i32 %v0_dc0c, i32* %r2.global-to-local, align 4
  store i32 %v0_dc04, i32* %r5.global-to-local, align 4
  %v3_dc14 = call i32 @function_fca8(i32 %v0_dc04, i32 %arg2, i32 %v0_dc0c)
  store i32 %v3_dc14, i32* %r0.global-to-local, align 4
  %v0_dc18 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_dc18, 1
  %extract.t8 = trunc i32 %v0_dc18 to i8
  br i1 %tmp23, label %dec_label_pc_dc3c, label %dec_label_pc_dc20

dec_label_pc_dc20:                                ; preds = %dec_label_pc_dbd0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dc24

dec_label_pc_dc24:                                ; preds = %dec_label_pc_dc24, %dec_label_pc_dc20
  %v2_dc2c = phi i32 [ %v1_dc30, %dec_label_pc_dc24 ], [ 0, %dec_label_pc_dc20 ]
  %v1_dc24 = load i32, i32* %r5.global-to-local, align 4
  %v2_dc24 = add i32 %v1_dc24, %v2_dc2c
  %v3_dc24 = inttoptr i32 %v2_dc24 to i8*
  %v4_dc24 = load i8, i8* %v3_dc24, align 1
  %v6_dc24 = zext i8 %v4_dc24 to i32
  %v1_dc28 = xor i32 %v6_dc24, 69
  store i32 %v1_dc28, i32* %r3.global-to-local, align 4
  %v1_dc2c = trunc i32 %v1_dc28 to i8
  store i8 %v1_dc2c, i8* %v3_dc24, align 1
  %v0_dc30 = load i32, i32* %r2.global-to-local, align 4
  %v1_dc30 = add i32 %v0_dc30, 1
  store i32 %v1_dc30, i32* %r2.global-to-local, align 4
  %v1_dc34 = load i32, i32* @r6, align 4
  %v9_dc34 = icmp eq i32 %v1_dc30, %v1_dc34
  br i1 %v9_dc34, label %dec_label_pc_dc3c.loopexit, label %dec_label_pc_dc24

dec_label_pc_dc3c.loopexit:                       ; preds = %dec_label_pc_dc24
  %extract.t7 = trunc i32 %v1_dc30 to i8
  br label %dec_label_pc_dc3c

dec_label_pc_dc3c:                                ; preds = %dec_label_pc_dc3c.loopexit, %dec_label_pc_dbd0
  %v0_dc4c.off0 = phi i8 [ %extract.t7, %dec_label_pc_dc3c.loopexit ], [ %extract.t8, %dec_label_pc_dbd0 ]
  %v2_dc3c = load i32, i32* @global_var_1e274.117, align 4
  store i32 %v2_dc3c, i32* %r0.global-to-local, align 4
  %v2_dc40 = load i32, i32* @global_var_1e2a0.119, align 4
  %v3_dc44 = mul i32 %v2_dc3c, 16
  store i32 %v3_dc44, i32* %r1.global-to-local, align 4
  %v2_dc48 = or i32 %v3_dc44, 13
  %v3_dc4c = add i32 %v2_dc48, %v2_dc40
  %v4_dc4c = inttoptr i32 %v3_dc4c to i8*
  store i8 %v0_dc4c.off0, i8* %v4_dc4c, align 1
  store i32 ptrtoint (i16** @global_var_1e2a4.121 to i32), i32* %r4.global-to-local, align 4
  %v2_dc58 = load i16, i16* bitcast (i16** @global_var_1e2a4.121 to i16*), align 4
  %v3_dc58 = zext i16 %v2_dc58 to i32
  store i32 %v3_dc58, i32* %lr.global-to-local, align 4
  %v2_dc60 = load i32, i32* @global_var_1e2a0.119, align 4
  store i32 %v2_dc60, i32* %r2.global-to-local, align 4
  %v0_dc68 = load i32, i32* %r1.global-to-local, align 4
  %v2_dc68 = add i32 %v0_dc68, %v2_dc60
  store i32 %v2_dc68, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1e2a4.121 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_dc70 = load i32, i32* @sb, align 4
  %v1_dc70 = load i32, i32* @r7, align 4
  %v2_dc70 = add i32 %v1_dc70, %v0_dc70
  store i32 %v2_dc70, i32* %ip.global-to-local, align 4
  %v0_dc74 = load i32, i32* %r0.global-to-local, align 4
  %v1_dc74 = add i32 %v0_dc74, 1
  store i32 %v1_dc74, i32* %r0.global-to-local, align 4
  %v3_dc78 = add i32 %v2_dc68, 10
  %v4_dc78 = inttoptr i32 %v3_dc78 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1e2a4.121 to i32), i32 16), i32 16) to i16), i16* %v4_dc78, align 2
  %v0_dc7c = load i32, i32* %lr.global-to-local, align 4
  %v1_dc7c = trunc i32 %v0_dc7c to i16
  %v2_dc7c = load i32, i32* %r1.global-to-local, align 4
  %v3_dc7c = add i32 %v2_dc7c, 8
  %v4_dc7c = inttoptr i32 %v3_dc7c to i16*
  store i16 %v1_dc7c, i16* %v4_dc7c, align 2
  %v0_dc80 = load i32, i32* %r5.global-to-local, align 4
  %v1_dc80 = load i32, i32* %ip.global-to-local, align 4
  %v2_dc80 = add i32 %v1_dc80, 4
  %v3_dc80 = inttoptr i32 %v2_dc80 to i32*
  store i32 %v0_dc80, i32* %v3_dc80, align 4
  %v1_dc84 = load i32, i32* @fp, align 4
  %v2_dc84 = inttoptr i32 %v1_dc84 to i32*
  store i32 %v1_dc74, i32* %v2_dc84, align 4
  %v0_dc88 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc88 = trunc i32 %v0_dc88 to i16
  %v2_dc88 = load i32, i32* %r4.global-to-local, align 4
  %v3_dc88 = inttoptr i32 %v2_dc88 to i16*
  store i16 %v1_dc88, i16* %v3_dc88, align 2
  store i32 %v3_db44, i32* @r4, align 4
  store i32 %v6_db44, i32* @r5, align 4
  store i32 %v9_db44, i32* @r6, align 4
  store i32 %v12_db44, i32* @r7, align 4
  store i32 %v15_db44, i32* @r8, align 4
  store i32 %v18_db44, i32* @sb, align 4
  store i32 %v21_db44, i32* @sl, align 4
  store i32 %v24_db44, i32* @fp, align 4
  ret i32 %v1_dc74

; uselistorder directives
  uselistorder i32 %v3_dc44, { 1, 0 }
  uselistorder i32 %v1_dc30, { 0, 2, 3, 1 }
  uselistorder i32 %v0_dc04, { 1, 0, 2 }
  uselistorder i32 %v3_dbd8, { 1, 0 }
  uselistorder i32 %v1_dbc4, { 0, 2, 3, 1 }
  uselistorder i32 %v0_db98, { 1, 0, 2 }
  uselistorder i32 %v2_db74, { 1, 0, 2 }
  uselistorder i32 %v3_db68, { 1, 0 }
  uselistorder i32 %v1_db58, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_fc38, { 5, 6, 0, 1, 2, 3, 4, 29, 7, 8, 9, 25, 26, 27, 28, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_dca4(i32 %arg1) local_unnamed_addr {
dec_label_pc_dca4:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp296 = call i32 @__decompiler_undefined_function_0()
  %tmp300 = call i32 @__decompiler_undefined_function_0()
  %tmp301 = call i32 @__decompiler_undefined_function_0()
  %tmp302 = call i16 @__decompiler_undefined_function_2()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_dca4 = load i32, i32* @r4, align 4
  %v6_dca4 = load i32, i32* @r5, align 4
  %v18_dca4 = load i32, i32* @sb, align 4
  %v21_dca4 = load i32, i32* @sl, align 4
  %v24_dca4 = load i32, i32* @fp, align 4
  %v0_dcb0 = call i32 @function_10334()
  store i32 %v0_dcb0, i32* %r0.global-to-local, align 4
  %v7_dcb4 = icmp eq i32 %v0_dcb0, -1
  %. = zext i1 %v7_dcb4 to i32
  %tmp335 = icmp slt i32 %v0_dcb0, 1
  %storemerge294 = select i1 %tmp335, i32 %., i32 1
  store i32 %storemerge294, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_202fc.113 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dcd0 = icmp eq i32 %storemerge294, 0
  store i1 %v2_dcd0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_dcb0, i32* @global_var_202fc.113, align 4
  br i1 %v2_dcd0, label %dec_label_pc_dcec, label %dec_label_pc_dcdc

dec_label_pc_dcdc:                                ; preds = %dec_label_pc_dca4
  store i32 %v3_dca4, i32* %r4.global-to-local, align 4
  store i32 %v6_dca4, i32* @r5, align 4
  store i32 %v18_dca4, i32* @sb, align 4
  store i32 %v21_dca4, i32* @sl, align 4
  store i32 %v24_dca4, i32* @fp, align 4
  ret i32 %v0_dcb0

dec_label_pc_dcec:                                ; preds = %dec_label_pc_dca4
  %v0_dcec = call i32 @function_fef4()
  store i32 %v0_dcec, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_202dc.42 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_dcec, i32* @global_var_202dc.42, align 4
  %v1_dcf8 = call i32 @function_d404(i32 %v0_dcec)
  %v0_dcfc = load i32, i32* @r4, align 4
  store i32 %v0_dcfc, i32* %r0.global-to-local, align 4
  %v1_dd00 = inttoptr i32 %v0_dcfc to i32*
  %v2_dd00 = call i32 @function_102c4(i32* %v1_dd00)
  store i32 ptrtoint (i32* @global_var_1e2a8.115 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_dd00, i32* @global_var_1e2a8.115, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_dd14 = call i32 @function_11998(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_202f4.126 to i32), i32* %r3.global-to-local, align 4
  %v0_dd1c = load i32, i32* @r4, align 4
  store i32 %v0_dd1c, i32* %stack_var_-52, align 4
  store i32 %v2_dd14, i32* @global_var_202f4.126, align 4
  store i32 %v0_dd1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dd28

dec_label_pc_dd28:                                ; preds = %dec_label_pc_dd28.dec_label_pc_dd28_crit_edge, %dec_label_pc_dcec
  %v2_dd34 = phi i32 [ %v2_dd34.pre, %dec_label_pc_dd28.dec_label_pc_dd28_crit_edge ], [ %v2_dd14, %dec_label_pc_dcec ]
  %v0_dd3c = phi i32 [ %v0_dd6c, %dec_label_pc_dd28.dec_label_pc_dd28_crit_edge ], [ %v0_dd1c, %dec_label_pc_dcec ]
  %v3_dd30 = mul i32 %v0_dd3c, 256
  store i32 %v3_dd30, i32* %ip.global-to-local, align 4
  %v2_dd44 = mul i32 %v0_dd3c, 288
  %v1_dd4c = add i32 %v0_dd3c, 1
  store i32 %v1_dd4c, i32* %r0.global-to-local, align 4
  %v2_dd50 = add i32 %v2_dd44, %v2_dd34
  store i32 %v2_dd50, i32* %r2.global-to-local, align 4
  store i32 %v2_dd50, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_dd64 = add i32 %v2_dd50, 4
  %v3_dd64 = inttoptr i32 %v2_dd64 to i32*
  store i32 -1, i32* %v3_dd64, align 4
  %v0_dd68 = load i32, i32* @r5, align 4
  %v1_dd68 = load i32, i32* %r1.global-to-local, align 4
  %v2_dd68 = add i32 %v1_dd68, 12
  %v3_dd68 = inttoptr i32 %v2_dd68 to i32*
  store i32 %v0_dd68, i32* %v3_dd68, align 4
  %v0_dd6c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_dd6c, i32* %stack_var_-52, align 4
  %v7_dd70 = icmp sgt i32 %v1_dd4c, 255
  br i1 %v7_dd70, label %dec_label_pc_dd74, label %dec_label_pc_dd28.dec_label_pc_dd28_crit_edge

dec_label_pc_dd28.dec_label_pc_dd28_crit_edge:    ; preds = %dec_label_pc_dd28
  %v2_dd34.pre = load i32, i32* @global_var_202f4.126, align 4
  br label %dec_label_pc_dd28

dec_label_pc_dd74:                                ; preds = %dec_label_pc_dd28
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_dd80 = call i32 @function_10e30(i32 2, i32 3, i32 6)
  store i32 %v3_dd80, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_202f8.128 to i32), i32* %r2.global-to-local, align 4
  %v2_dd88 = icmp eq i32 %v3_dd80, -1
  store i1 %v2_dd88, i1* %cpsr_c.global-to-local, align 1
  %v7_dd88 = icmp eq i32 %v3_dd80, -1
  store i1 %v7_dd88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_dd80, i32* %r4.global-to-local, align 4
  store i32 %v3_dd80, i32* @global_var_202f8.128, align 4
  br i1 %v7_dd88, label %dec_label_pc_e750, label %dec_label_pc_dd98

dec_label_pc_dd98:                                ; preds = %dec_label_pc_dd74
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_dd9c = load i32, i32* @r5, align 4
  store i32 %v0_dd9c, i32* %r2.global-to-local, align 4
  %v2_dda0 = call i32 @function_10478(i32 %v3_dd80, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dda8 = or i32 %v2_dda0, 2048
  store i32 %v1_dda8, i32* %r2.global-to-local, align 4
  %v0_ddac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ddac, i32* %r0.global-to-local, align 4
  %v2_ddb0 = call i32 @function_10478(i32 %v0_ddac, i32 4)
  %v2_ddb8 = load i32, i32* @global_var_202f8.128, align 4
  store i32 %v2_ddb8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_ddc4 = load i32, i32* @r5, align 4
  store i32 %v0_ddc4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_ddcc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ddcc, i32* %r3.global-to-local, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_dddc = call i32 @function_10dec(i32 %v2_ddb8, i32 %v0_ddc4, i32 3, i32 %v2_ddcc, i32 4)
  store i32 %v5_dddc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dde0 = icmp eq i32 %v5_dddc, 0
  store i1 %v2_dde0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dde0, label %dec_label_pc_dde8, label %dec_label_pc_e744

dec_label_pc_dde8:                                ; preds = %dec_label_pc_dd98, %dec_label_pc_dde8
  %v0_dde8 = call i32 @function_d3a8()
  %v1_ddf4 = urem i32 %v0_dde8, 256
  store i32 %v1_ddf4, i32* %r3.global-to-local, align 4
  %tmp338 = udiv i32 %v0_dde8, 256
  %v3_ddf8 = urem i32 %tmp338, 256
  %v4_ddfc = mul nuw nsw i32 %v1_ddf4, 256
  %v5_ddfc = or i32 %v4_ddfc, %v3_ddf8
  store i32 %v5_ddfc, i32* %r0.global-to-local, align 4
  %v2_de00 = icmp ugt i32 %v5_ddfc, 1023
  store i1 %v2_de00, i1* %cpsr_c.global-to-local, align 1
  %v7_de00 = icmp eq i32 %v5_ddfc, 1024
  store i1 %v7_de00, i1* %cpsr_z.global-to-local, align 1
  %v3_de08 = icmp ult i32 %v5_ddfc, 1022
  br i1 %v3_de08, label %dec_label_pc_dde8, label %dec_label_pc_de0c

dec_label_pc_de0c:                                ; preds = %dec_label_pc_dde8
  %v5_de04.le = trunc i32 %v0_dde8 to i16
  store i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32* %r0.global-to-local, align 4
  %v2_de10 = load i8, i8* bitcast (i8** @global_var_1e278.130 to i8*), align 4
  %v3_de10 = zext i8 %v2_de10 to i32
  %v1_de14 = and i32 %v3_de10, 240
  %v1_de18 = or i32 %v1_de14, 5
  store i32 %v1_de18, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1e278.130 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1e27a.131 to i16*), align 4
  %v0_de38 = call i32 @function_d3a8()
  %v1_de38 = trunc i32 %v0_de38 to i16
  %v3_de40 = load i8, i8* @global_var_1e298.134, align 1
  store i32 ptrtoint (i16* @global_var_1e28c.133 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32* %ip.global-to-local, align 4
  %tmp = urem i8 %v3_de40, 16
  %v1_de4c = zext i8 %tmp to i32
  %v1_de50 = or i32 %v1_de4c, 80
  store i32 %v1_de50, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 6, i32* @r4, align 4
  store i8 64, i8* bitcast (i32* @global_var_1e280.135 to i8*), align 4
  store i16 %v1_de38, i16* bitcast (i32* @global_var_1e27c.136 to i16*), align 4
  %v1_de64 = trunc i32 %v1_de50 to i8
  store i8 %v1_de64, i8* @global_var_1e298.134, align 1
  store i8 6, i8* bitcast (i32* @global_var_1e281.137 to i8*), align 4
  %v4_de6c = sext i16 %v5_de04.le to i32
  store i32 %v4_de6c, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_1e28e.138, align 2
  store i16 %v5_de04.le, i16* @global_var_1e28c.133, align 2
  %v0_de7c = call i32 @function_d3a8()
  %v1_de7c = trunc i32 %v0_de7c to i16
  %v3_de84 = load i8, i8* @global_var_1e299.139, align 1
  %v4_de84 = zext i8 %v3_de84 to i32
  store i32 ptrtoint (i16* @global_var_1e28c.133 to i32), i32* %ip.global-to-local, align 4
  %v1_de8c = or i32 %v4_de84, 2
  store i32 %v1_de8c, i32* %r3.global-to-local, align 4
  store i16 %v1_de7c, i16* bitcast (i32* @global_var_1e29a.140 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32* %r1.global-to-local, align 4
  %v1_de98 = trunc i32 %v1_de8c to i8
  store i8 %v1_de98, i8* @global_var_1e299.139, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_dea4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_157ec.146 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_deb4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_157ec.146 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r1.global-to-local, align 4
  %v5_dec4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_157f0.148 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_ded4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_157f0.148 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15868.150 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_dee4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_15868.150 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_157f8.152 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_def4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_157f8.152 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15800.154 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_df04 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_15800.154 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_157ec.146 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_df14 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_157ec.146 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15804.156 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_df24 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_15804.156 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1580c.158 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_df34 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_1580c.158 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15814.160 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v4_df44 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_15814.160 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1581c.162 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_df54 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([7 x i8]* @global_var_1581c.162 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15824.164 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_df64 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_15824.164 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15830.166 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_df74 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_15830.166 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1583c.168 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df84 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_1583c.168 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15844.170 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df94 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_15844.170 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15850.172 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dfa4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_15850.172 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1585c.174 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_dfb4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([8 x i8]* @global_var_1585c.174 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15864.176 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dfc4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_15864.176 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1586c.178 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_dfd4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([7 x i8]* @global_var_1586c.178 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15874.180 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_dfe4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([6 x i8]* @global_var_15874.180 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1587c.182 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_dff4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([5 x i8]* @global_var_1587c.182 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15884.184 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e004 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([8 x i8]* @global_var_15884.184 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1588c.186 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e014 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_1588c.186 to i32), i32 15)
  %v0_e018 = load i32, i32* @r4, align 4
  store i32 %v0_e018, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15894.188 to i32), i32* %r1.global-to-local, align 4
  %v5_e024 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([6 x i8]* @global_var_15894.188 to i32), i32 %v0_e018)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e034 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_158a4.192 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_e044 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([5 x i8]* @global_var_158a4.192 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_158ac.194 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_e054 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([8 x i8]* @global_var_158ac.194 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158b4.196 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e064 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_158b4.196 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158bc.198 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_e074 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_158bc.198 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_158c4.200 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_e084 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint ([9 x i8]* @global_var_158c4.200 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158d0.202 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_e094 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_158d0.202 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158dc.204 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_e0a4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_158dc.204 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158e8.206 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e0b4 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), i32 ptrtoint (i32* @global_var_158e8.206 to i32), i32 7)
  store i32 ptrtoint ([11 x i8]* @global_var_158f8.208 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15904.210 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_e0c4 = call i32 @function_db44(i32 ptrtoint ([11 x i8]* @global_var_158f8.208 to i32), i32 ptrtoint (i32* @global_var_15904.210 to i32), i32 2)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_158a4.192 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e0d4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint ([5 x i8]* @global_var_158a4.192 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_157f8.152 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e0e4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_157f8.152 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15804.156 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e0f4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_15804.156 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1580c.158 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e104 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_1580c.158 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15814.160 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e114 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_15814.160 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15830.166 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e124 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_15830.166 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15910.212 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e134 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_15910.212 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_158c4.200 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_e144 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint ([9 x i8]* @global_var_158c4.200 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15918.214 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e154 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_15918.214 to i32), i32 5)
  store i32 ptrtoint ([14 x i8]* @global_var_15920.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e164 = call i32 @function_db44(i32 ptrtoint ([14 x i8]* @global_var_15920.216 to i32), i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32 5)
  store i32 ptrtoint ([14 x i8]* @global_var_15930.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15804.156 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e174 = call i32 @function_db44(i32 ptrtoint ([14 x i8]* @global_var_15930.218 to i32), i32 ptrtoint (i32* @global_var_15804.156 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15940.220 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15940.220 to i32), i32* %r1.global-to-local, align 4
  %v5_e184 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_15940.220 to i32), i32 ptrtoint ([6 x i8]* @global_var_15940.220 to i32), i32 3)
  store i32 ptrtoint ([4 x i8]* @global_var_15948.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e194 = call i32 @function_db44(i32 ptrtoint ([4 x i8]* @global_var_15948.222 to i32), i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r1.global-to-local, align 4
  %v5_e1a4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 15)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158e8.206 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e1b4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_158e8.206 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1594c.224 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_e1c4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint ([9 x i8]* @global_var_1594c.224 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15958.226 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e1d4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_15958.226 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15964.228 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e1e4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_15964.228 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15970.230 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e1f4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_15970.230 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15978.232 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e204 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), i32 ptrtoint (i32* @global_var_15978.232 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_15984.234 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1598c.236 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e214 = call i32 @function_db44(i32 ptrtoint (i32* @global_var_15984.234 to i32), i32 ptrtoint ([7 x i8]* @global_var_1598c.236 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_1585c.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e224 = call i32 @function_db44(i32 ptrtoint ([8 x i8]* @global_var_1585c.174 to i32), i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_15994.238 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15994.238 to i32), i32* %r1.global-to-local, align 4
  %v5_e234 = call i32 @function_db44(i32 ptrtoint ([8 x i8]* @global_var_15994.238 to i32), i32 ptrtoint ([8 x i8]* @global_var_15994.238 to i32), i32 10)
  store i32 ptrtoint ([8 x i8]* @global_var_15994.238 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15804.156 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e244 = call i32 @function_db44(i32 ptrtoint ([8 x i8]* @global_var_15994.238 to i32), i32 ptrtoint (i32* @global_var_15804.156 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15994.238 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15814.160 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e254 = call i32 @function_db44(i32 ptrtoint ([8 x i8]* @global_var_15994.238 to i32), i32 ptrtoint (i32* @global_var_15814.160 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_1599c.240 to i32), i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1599c.240 to i32), i32* %r1.global-to-local, align 4
  %v5_e264 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_1599c.240 to i32), i32 ptrtoint ([5 x i8]* @global_var_1599c.240 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_1599c.240 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15814.160 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e274 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_1599c.240 to i32), i32 ptrtoint (i32* @global_var_15814.160 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_157f8.152 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e284 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), i32 ptrtoint (i32* @global_var_157f8.152 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), i32* %r1.global-to-local, align 4
  %v5_e294 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1580c.158 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e2a4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), i32 ptrtoint (i32* @global_var_1580c.158 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15814.160 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e2b4 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), i32 ptrtoint (i32* @global_var_15814.160 to i32), i32 1)
  store i32 ptrtoint ([7 x i8]* @global_var_159ac.244 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e2c4 = call i32 @function_db44(i32 ptrtoint ([7 x i8]* @global_var_159ac.244 to i32), i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32 7)
  store i32 ptrtoint (i32* @global_var_15804.156 to i32), i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15804.156 to i32), i32* %r1.global-to-local, align 4
  %v3_e2d4 = call i32 @function_db44(i32 ptrtoint (i32* @global_var_15804.156 to i32), i32 ptrtoint (i32* @global_var_15804.156 to i32), i32 2)
  store i32 ptrtoint ([4 x i8]* @global_var_159b4.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e2e4 = call i32 @function_db44(i32 ptrtoint ([4 x i8]* @global_var_159b4.246 to i32), i32 ptrtoint (i32* @global_var_1596c.142 to i32), i32 10)
  store i32 ptrtoint ([7 x i8]* @global_var_159b8.248 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_159b8.248 to i32), i32* %r1.global-to-local, align 4
  %v5_e2f4 = call i32 @function_db44(i32 ptrtoint ([7 x i8]* @global_var_159b8.248 to i32), i32 ptrtoint ([7 x i8]* @global_var_159b8.248 to i32), i32 5)
  store i32 ptrtoint ([9 x i8]* @global_var_159c0.250 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_159c0.250 to i32), i32* %r1.global-to-local, align 4
  %v5_e304 = call i32 @function_db44(i32 ptrtoint ([9 x i8]* @global_var_159c0.250 to i32), i32 ptrtoint ([9 x i8]* @global_var_159c0.250 to i32), i32 1)
  store i32 %v5_e304, i32* %r0.global-to-local, align 4
  %v2_e30c = ptrtoint i32* %stack_var_-1866 to i32
  br label %dec_label_pc_e314

dec_label_pc_e314:                                ; preds = %dec_label_pc_ea68, %dec_label_pc_de0c
  %stack_var_-1880.0 = phi i32 [ %tmp300, %dec_label_pc_de0c ], [ %stack_var_-1880.2, %dec_label_pc_ea68 ]
  %v0_e620 = phi i32 [ %v2_e30c, %dec_label_pc_de0c ], [ %stack_var_-1888.1, %dec_label_pc_ea68 ]
  %stack_var_-1884.0 = phi i16 [ %v5_de04.le, %dec_label_pc_de0c ], [ %stack_var_-1884.1, %dec_label_pc_ea68 ]
  store i32 ptrtoint (i32* @global_var_1e2a8.115 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  %v2_e31c = load i32, i32* @global_var_1e2a8.115, align 4
  store i32 %v2_e31c, i32* @r4, align 4
  %v3_e320 = icmp uge i32 %stack_var_-1880.0, %v2_e31c
  store i1 %v3_e320, i1* %cpsr_c.global-to-local, align 1
  %v9_e320 = icmp eq i32 %stack_var_-1880.0, %v2_e31c
  store i1 %v9_e320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e320, label %dec_label_pc_e5a4, label %dec_label_pc_e328

dec_label_pc_e328:                                ; preds = %dec_label_pc_e314
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_e32c = ptrtoint i32* %stack_var_-104 to i32
  store i32 0, i32* %stack_var_-52, align 4
  %v2_e334 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e338

dec_label_pc_e338:                                ; preds = %bb366, %dec_label_pc_e328
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e34c = call i32 @function_d3a8()
  %v1_e34c = trunc i32 %v0_e34c to i16
  store i32 %v0_e34c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_202dc.42 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32* %ip.global-to-local, align 4
  %v2_e358 = load i32, i32* @global_var_202dc.42, align 4
  store i32 %v2_e358, i32* %r3.global-to-local, align 4
  store i16 %v1_e34c, i16* bitcast (i32* @global_var_1e27c.136 to i16*), align 4
  store i32 %v2_e358, i32* @global_var_1e284.251, align 4
  br label %dec_label_pc_e364

dec_label_pc_e364:                                ; preds = %dec_label_pc_e438, %dec_label_pc_e394, %dec_label_pc_e46c, %dec_label_pc_e460, %dec_label_pc_e454, %dec_label_pc_e448, %.thread28, %bb357, %bb356, %bb355, %bb354, %bb353, %dec_label_pc_e430, %dec_label_pc_e428, %bb349, %dec_label_pc_e3f8, %dec_label_pc_e3d4, %bb342, %dec_label_pc_e3a4, %bb341, %dec_label_pc_e38c, %bb340, %bb359, %dec_label_pc_e338
  %v0_e364 = call i32 @function_d3a8()
  store i32 %v0_e364, i32* %r0.global-to-local, align 4
  %v1_e368 = urem i32 %v0_e364, 256
  store i32 %v1_e368, i32* %r1.global-to-local, align 4
  %v3_e36c = udiv i32 %v0_e364, 256
  store i32 %v3_e36c, i32* %r3.global-to-local, align 4
  %v3_e370 = udiv i32 %v0_e364, 65536
  store i32 %v3_e370, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e374 = icmp eq i32 %v1_e368, 0
  store i1 %v2_e374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e374, label %bb340, label %bb339

bb339:                                            ; preds = %dec_label_pc_e364
  %v3_e378 = icmp ugt i32 %v1_e368, 126
  store i1 %v3_e378, i1* %cpsr_c.global-to-local, align 1
  %v8_e378 = icmp eq i32 %v1_e368, 127
  store i1 %v8_e378, i1* %cpsr_z.global-to-local, align 1
  br label %bb340

bb340:                                            ; preds = %dec_label_pc_e364, %bb339
  %v0_e388 = phi i1 [ true, %dec_label_pc_e364 ], [ %v8_e378, %bb339 ]
  %v1_e37c = urem i32 %v3_e36c, 256
  store i32 %v1_e37c, i32* %ip.global-to-local, align 4
  %v1_e380 = urem i32 %v3_e370, 256
  store i32 %v1_e380, i32* %r2.global-to-local, align 4
  %v1_e384 = and i32 %v0_e364, 8388608
  %v2_e384 = icmp ne i32 %v1_e384, 0
  store i1 %v2_e384, i1* %cpsr_c.global-to-local, align 1
  %v3_e384 = udiv i32 %v0_e364, 16777216
  store i32 %v3_e384, i32* %r0.global-to-local, align 4
  br i1 %v0_e388, label %dec_label_pc_e364, label %dec_label_pc_e38c

dec_label_pc_e38c:                                ; preds = %bb340
  %v2_e38c = icmp ugt i32 %v1_e368, 2
  store i1 %v2_e38c, i1* %cpsr_c.global-to-local, align 1
  %v7_e38c = icmp eq i32 %v1_e368, 3
  store i1 %v7_e38c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e38c, label %dec_label_pc_e364, label %dec_label_pc_e394

dec_label_pc_e394:                                ; preds = %dec_label_pc_e38c
  %v1_e394 = add nsw i32 %v1_e368, -15
  store i32 %v1_e394, i32* %r3.global-to-local, align 4
  %v2_e398 = icmp ugt i32 %v1_e368, 55
  store i1 %v2_e398, i1* %cpsr_c.global-to-local, align 1
  %v7_e398 = icmp eq i32 %v1_e368, 56
  store i1 %v7_e398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e398, label %dec_label_pc_e364, label %bb341

bb341:                                            ; preds = %dec_label_pc_e394
  %v3_e39c = icmp ne i32 %v1_e394, 0
  store i1 %v3_e39c, i1* %cpsr_c.global-to-local, align 1
  %v8_e39c = icmp eq i32 %v1_e394, 1
  store i1 %v8_e39c, i1* %cpsr_z.global-to-local, align 1
  %v2_e3a0 = xor i1 %v3_e39c, true
  %v3_e3a0 = or i1 %v8_e39c, %v2_e3a0
  br i1 %v3_e3a0, label %dec_label_pc_e364, label %dec_label_pc_e3a4

dec_label_pc_e3a4:                                ; preds = %bb341
  %v2_e3a4 = icmp ugt i32 %v1_e368, 9
  store i1 %v2_e3a4, i1* %cpsr_c.global-to-local, align 1
  %v7_e3a4 = icmp eq i32 %v1_e368, 10
  store i1 %v7_e3a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e3a4, label %dec_label_pc_e364, label %dec_label_pc_e3ac

dec_label_pc_e3ac:                                ; preds = %dec_label_pc_e3a4
  %v2_e3ac = icmp ugt i32 %v1_e368, 191
  store i1 %v2_e3ac, i1* %cpsr_c.global-to-local, align 1
  %v7_e3ac = icmp eq i32 %v1_e368, 192
  store i1 %v7_e3ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e3ac, label %bb342, label %dec_label_pc_e3b8

bb342:                                            ; preds = %dec_label_pc_e3ac
  %v3_e3b0 = icmp ugt i32 %v1_e37c, 167
  store i1 %v3_e3b0, i1* %cpsr_c.global-to-local, align 1
  %v8_e3b0 = icmp eq i32 %v1_e37c, 168
  store i1 %v8_e3b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e3b0, label %dec_label_pc_e364, label %dec_label_pc_e3b8

dec_label_pc_e3b8:                                ; preds = %dec_label_pc_e3ac, %bb342
  %v7_e3b8 = icmp eq i32 %v1_e368, 172
  %.419 = zext i1 %v7_e3b8 to i32
  store i32 %.419, i32* %r3.global-to-local, align 4
  %v2_e3c4 = icmp ugt i32 %v1_e37c, 14
  store i1 %v2_e3c4, i1* %cpsr_c.global-to-local, align 1
  %v7_e3c4 = icmp eq i32 %v1_e37c, 15
  store i1 %v7_e3c4, i1* %cpsr_z.global-to-local, align 1
  %v2_e3c8 = xor i1 %v2_e3c4, true
  %v3_e3c8 = or i1 %v7_e3c4, %v2_e3c8
  br i1 %v3_e3c8, label %.thread6, label %bb345

.thread6:                                         ; preds = %dec_label_pc_e3b8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e3dc

bb345:                                            ; preds = %dec_label_pc_e3b8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e3cc = icmp eq i1 %v7_e3b8, false
  store i1 %v2_e3cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e3cc, label %dec_label_pc_e3dc, label %dec_label_pc_e3d4

dec_label_pc_e3d4:                                ; preds = %bb345
  %v2_e3d4 = icmp ugt i32 %v1_e37c, 30
  store i1 %v2_e3d4, i1* %cpsr_c.global-to-local, align 1
  %v7_e3d4 = icmp eq i32 %v1_e37c, 31
  store i1 %v7_e3d4, i1* %cpsr_z.global-to-local, align 1
  %v2_e3d8 = xor i1 %v2_e3d4, true
  %v3_e3d8 = or i1 %v7_e3d4, %v2_e3d8
  br i1 %v3_e3d8, label %dec_label_pc_e364, label %dec_label_pc_e3dc

dec_label_pc_e3dc:                                ; preds = %.thread6, %dec_label_pc_e3d4, %bb345
  %v7_e3dc = icmp eq i32 %v1_e368, 100
  %.420 = zext i1 %v7_e3dc to i32
  store i32 %.420, i32* %r3.global-to-local, align 4
  %v2_e3e8 = icmp ugt i32 %v1_e37c, 62
  store i1 %v2_e3e8, i1* %cpsr_c.global-to-local, align 1
  %v7_e3e8 = icmp eq i32 %v1_e37c, 63
  store i1 %v7_e3e8, i1* %cpsr_z.global-to-local, align 1
  %v2_e3ec = xor i1 %v2_e3e8, true
  %v3_e3ec = or i1 %v7_e3e8, %v2_e3ec
  br i1 %v3_e3ec, label %.thread11, label %bb348

.thread11:                                        ; preds = %dec_label_pc_e3dc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e400

bb348:                                            ; preds = %dec_label_pc_e3dc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e3f0 = icmp eq i1 %v7_e3dc, false
  store i1 %v2_e3f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e3f0, label %dec_label_pc_e400, label %dec_label_pc_e3f8

dec_label_pc_e3f8:                                ; preds = %bb348
  %v2_e3f8 = icmp ugt i32 %v1_e37c, 125
  store i1 %v2_e3f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e3f8 = icmp eq i32 %v1_e37c, 126
  store i1 %v7_e3f8, i1* %cpsr_z.global-to-local, align 1
  %v2_e3fc = xor i1 %v2_e3f8, true
  %v3_e3fc = or i1 %v7_e3f8, %v2_e3fc
  br i1 %v3_e3fc, label %dec_label_pc_e364, label %dec_label_pc_e400

dec_label_pc_e400:                                ; preds = %.thread11, %dec_label_pc_e3f8, %bb348
  %v2_e400 = icmp ugt i32 %v1_e368, 168
  store i1 %v2_e400, i1* %cpsr_c.global-to-local, align 1
  %v7_e400 = icmp eq i32 %v1_e368, 169
  store i1 %v7_e400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e400, label %bb349, label %dec_label_pc_e40c

bb349:                                            ; preds = %dec_label_pc_e400
  %v3_e404 = icmp eq i32 %v1_e37c, 255
  store i1 %v3_e404, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e404, label %dec_label_pc_e364, label %dec_label_pc_e40c

dec_label_pc_e40c:                                ; preds = %dec_label_pc_e400, %bb349
  %v7_e40c = icmp eq i32 %v1_e368, 198
  %.421 = zext i1 %v7_e40c to i32
  store i32 %.421, i32* %r3.global-to-local, align 4
  %v2_e418 = icmp ugt i32 %v1_e37c, 16
  store i1 %v2_e418, i1* %cpsr_c.global-to-local, align 1
  %v7_e418 = icmp eq i32 %v1_e37c, 17
  store i1 %v7_e418, i1* %cpsr_z.global-to-local, align 1
  %v2_e41c = xor i1 %v2_e418, true
  %v3_e41c = or i1 %v7_e418, %v2_e41c
  br i1 %v3_e41c, label %.thread17, label %bb352

.thread17:                                        ; preds = %dec_label_pc_e40c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e430

bb352:                                            ; preds = %dec_label_pc_e40c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e420 = icmp eq i1 %v7_e40c, false
  store i1 %v2_e420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e420, label %dec_label_pc_e430, label %dec_label_pc_e428

dec_label_pc_e428:                                ; preds = %bb352
  %v2_e428 = icmp ugt i32 %v1_e37c, 18
  store i1 %v2_e428, i1* %cpsr_c.global-to-local, align 1
  %v7_e428 = icmp eq i32 %v1_e37c, 19
  store i1 %v7_e428, i1* %cpsr_z.global-to-local, align 1
  %v2_e42c = xor i1 %v2_e428, true
  %v3_e42c = or i1 %v7_e428, %v2_e42c
  br i1 %v3_e42c, label %dec_label_pc_e364, label %dec_label_pc_e430

dec_label_pc_e430:                                ; preds = %.thread17, %dec_label_pc_e428, %bb352
  %v2_e430 = icmp ugt i32 %v1_e368, 222
  store i1 %v2_e430, i1* %cpsr_c.global-to-local, align 1
  %v7_e430 = icmp eq i32 %v1_e368, 223
  store i1 %v7_e430, i1* %cpsr_z.global-to-local, align 1
  %v2_e434 = xor i1 %v7_e430, true
  %v3_e434 = and i1 %v2_e430, %v2_e434
  br i1 %v3_e434, label %dec_label_pc_e364, label %dec_label_pc_e438

dec_label_pc_e438:                                ; preds = %dec_label_pc_e430
  %v1_e438 = add nsw i32 %v1_e368, -6
  store i32 %v1_e438, i32* %r3.global-to-local, align 4
  %v2_e43c = icmp ugt i32 %v1_e368, 10
  store i1 %v2_e43c, i1* %cpsr_c.global-to-local, align 1
  %v7_e43c = icmp eq i32 %v1_e368, 11
  store i1 %v7_e43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e43c, label %dec_label_pc_e364, label %bb353

bb353:                                            ; preds = %dec_label_pc_e438
  %v3_e440 = icmp ne i32 %v1_e438, 0
  store i1 %v3_e440, i1* %cpsr_c.global-to-local, align 1
  %v8_e440 = icmp eq i32 %v1_e438, 1
  store i1 %v8_e440, i1* %cpsr_z.global-to-local, align 1
  %v2_e444 = xor i1 %v3_e440, true
  %v3_e444 = or i1 %v8_e440, %v2_e444
  br i1 %v3_e444, label %dec_label_pc_e364, label %dec_label_pc_e448

dec_label_pc_e448:                                ; preds = %bb353
  %v2_e448 = icmp ugt i32 %v1_e368, 21
  store i1 %v2_e448, i1* %cpsr_c.global-to-local, align 1
  %v7_e448 = icmp eq i32 %v1_e368, 22
  store i1 %v7_e448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e448, label %dec_label_pc_e364, label %bb354

bb354:                                            ; preds = %dec_label_pc_e448
  %v3_e44c = icmp ugt i32 %v1_e368, 20
  store i1 %v3_e44c, i1* %cpsr_c.global-to-local, align 1
  %v8_e44c = icmp eq i32 %v1_e368, 21
  store i1 %v8_e44c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e44c, label %dec_label_pc_e364, label %dec_label_pc_e454

dec_label_pc_e454:                                ; preds = %bb354
  %v2_e454 = icmp ugt i32 %v1_e368, 27
  store i1 %v2_e454, i1* %cpsr_c.global-to-local, align 1
  %v7_e454 = icmp eq i32 %v1_e368, 28
  store i1 %v7_e454, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e454, label %dec_label_pc_e364, label %bb355

bb355:                                            ; preds = %dec_label_pc_e454
  %v3_e458 = icmp ugt i32 %v1_e368, 25
  store i1 %v3_e458, i1* %cpsr_c.global-to-local, align 1
  %v8_e458 = icmp eq i32 %v1_e368, 26
  store i1 %v8_e458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e458, label %dec_label_pc_e364, label %dec_label_pc_e460

dec_label_pc_e460:                                ; preds = %bb355
  %v2_e460 = icmp ugt i32 %v1_e368, 29
  store i1 %v2_e460, i1* %cpsr_c.global-to-local, align 1
  %v7_e460 = icmp eq i32 %v1_e368, 30
  store i1 %v7_e460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e460, label %dec_label_pc_e364, label %bb356

bb356:                                            ; preds = %dec_label_pc_e460
  %v3_e464 = icmp ugt i32 %v1_e368, 28
  store i1 %v3_e464, i1* %cpsr_c.global-to-local, align 1
  %v8_e464 = icmp eq i32 %v1_e368, 29
  store i1 %v8_e464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e464, label %dec_label_pc_e364, label %dec_label_pc_e46c

dec_label_pc_e46c:                                ; preds = %bb356
  %v2_e46c = icmp ugt i32 %v1_e368, 54
  store i1 %v2_e46c, i1* %cpsr_c.global-to-local, align 1
  %v7_e46c = icmp eq i32 %v1_e368, 55
  store i1 %v7_e46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e46c, label %dec_label_pc_e364, label %bb357

bb357:                                            ; preds = %dec_label_pc_e46c
  %v3_e470 = icmp ugt i32 %v1_e368, 32
  store i1 %v3_e470, i1* %cpsr_c.global-to-local, align 1
  %v8_e470 = icmp eq i32 %v1_e368, 33
  store i1 %v8_e470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e470, label %dec_label_pc_e364, label %dec_label_pc_e478

dec_label_pc_e478:                                ; preds = %bb357
  %v2_e478 = icmp ugt i32 %v1_e368, 214
  store i1 %v2_e478, i1* %cpsr_c.global-to-local, align 1
  %v7_e478 = icmp eq i32 %v1_e368, 215
  store i1 %v7_e478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e478, label %.thread28, label %bb358

bb358:                                            ; preds = %dec_label_pc_e478
  %v3_e47c = icmp ugt i32 %v1_e368, 213
  store i1 %v3_e47c, i1* %cpsr_c.global-to-local, align 1
  %v8_e47c = icmp eq i32 %v1_e368, 214
  store i1 %v8_e47c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e47c, label %bb359, label %dec_label_pc_e48c

.thread28:                                        ; preds = %dec_label_pc_e478
  br label %dec_label_pc_e364

bb359:                                            ; preds = %bb358
  br label %dec_label_pc_e364

dec_label_pc_e48c:                                ; preds = %bb358
  %v5_e498 = call i32 @llvm.bswap.i32(i32 %v0_e364)
  store i32 %v5_e498, i32* %r3.global-to-local, align 4
  %tmp360 = and i32 %v0_e364, 65280
  %tmp361 = call i32 @llvm.bswap.i32(i32 %tmp360)
  %v3_e4a0 = udiv i32 %v5_e498, 16777216
  %tmp362 = and i32 %v0_e364, 16711680
  %tmp363 = call i32 @llvm.bswap.i32(i32 %tmp362)
  %v4_e4a8 = udiv i32 %tmp361, 256
  %v4_e4ac = mul nuw nsw i32 %tmp363, 256
  store i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32* @r0, align 4
  %tmp364 = and i32 %v0_e364, 65536
  %v3_e4b4 = icmp ne i32 %tmp364, 0
  store i1 %v3_e4b4, i1* %cpsr_c.global-to-local, align 1
  %v4_e4b4 = mul i32 %v5_e498, 16777216
  %v5_e4a8 = or i32 %v4_e4b4, %v3_e4a0
  %v5_e4ac = or i32 %v5_e4a8, %v4_e4a8
  %v5_e4b4 = or i32 %v5_e4ac, %v4_e4ac
  store i32 %v5_e4b4, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1e282.252 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_e4b4, i32* @global_var_1e288.253, align 4
  %v3_e4c4 = call i32 @function_bf78(i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32 20)
  %v4_e4c4 = trunc i32 %v3_e4c4 to i16
  store i32 %v3_e4c4, i32* %r0.global-to-local, align 4
  %v3_e4c8 = load i32, i32* %stack_var_-52, align 4
  %v5_e4d8 = sdiv i32 %v3_e4c8, 10
  %v3_e4dc = mul i32 %v5_e4d8, 8
  store i32 %v3_e4dc, i32* %r2.global-to-local, align 4
  %v2_e4e4 = mul i32 %v5_e4d8, 10
  store i32 %v2_e4e4, i32* %r3.global-to-local, align 4
  %v3_e4e8 = icmp uge i32 %v3_e4c8, %v2_e4e4
  store i1 %v3_e4e8, i1* %cpsr_c.global-to-local, align 1
  %v9_e4e8 = icmp eq i32 %v3_e4c8, %v2_e4e4
  store i1 %v9_e4e8, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_e4e8, label %bb365, label %.thread40

.thread40:                                        ; preds = %dec_label_pc_e48c
  store i32 ptrtoint (i16* @global_var_1e28c.133 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_e4c4, i16* bitcast (i32* @global_var_1e282.252 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e28c.133 to i32), i32 2) to i16*), align 2
  %v4_e508 = load i32, i32* @global_var_1e288.253, align 4
  store i32 %v4_e508, i32* @global_var_1e290.255, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb366

bb365:                                            ; preds = %dec_label_pc_e48c
  store i16 %v4_e4c4, i16* bitcast (i32* @global_var_1e282.252 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32* %r0.global-to-local, align 4
  %v4_e50834 = load i32, i32* @global_var_1e288.253, align 4
  store i32 ptrtoint (i16* @global_var_1e28c.133 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_e50834, i32* @global_var_1e290.255, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e28c.133 to i32), i32 2) to i16*), align 2
  br label %bb366

bb366:                                            ; preds = %.thread40, %bb365
  store i16 0, i16* bitcast (i32* @global_var_1e29c.256 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_1e28c.133 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_e534 = call i32 @function_bfc8(i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32 sext (i16 ptrtoint (i16* @global_var_1e28c.133 to i16) to i32), i32 5120, i32 20)
  %v7_e534 = trunc i32 %v6_e534 to i16
  store i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32* %r1.global-to-local, align 4
  %v2_e540 = load i32, i32* @global_var_202f8.128, align 4
  store i16 %v7_e534, i16* bitcast (i32* @global_var_1e29c.256 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_e32c, i32* %ip.global-to-local, align 4
  store i32 %v2_e540, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_e588 = call i32 @function_10dac(i32 %v2_e540, i32 ptrtoint (i8** @global_var_1e278.130 to i32), i32 40, i32 16384, i32 %v2_e334, i32 16)
  store i32 %v7_e588, i32* %r0.global-to-local, align 4
  %v3_e58c = load i32, i32* %stack_var_-52, align 4
  %v1_e590 = add i32 %v3_e58c, 1
  store i32 %v1_e590, i32* %r3.global-to-local, align 4
  %v3_e594 = icmp ugt i32 %v1_e590, 383
  store i1 %v3_e594, i1* %cpsr_c.global-to-local, align 1
  %v8_e594 = icmp eq i32 %v1_e590, 384
  store i1 %v8_e594, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e590, i32* %stack_var_-52, align 4
  %v5_e59c = icmp slt i32 %v1_e590, 384
  br i1 %v5_e59c, label %dec_label_pc_e338, label %dec_label_pc_e5a0

dec_label_pc_e5a0:                                ; preds = %bb366
  %v0_e5a0 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e5a4

dec_label_pc_e5a4:                                ; preds = %dec_label_pc_e314, %dec_label_pc_e5a0
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.0, %dec_label_pc_e314 ], [ %v0_e5a0, %dec_label_pc_e5a0 ]
  %v0_e5a4 = call i32 @function_10a6c()
  store i32 %v0_e620, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v1_e5b4 = add i32 %v0_e620, 20
  store i32 %v1_e5b4, i32* @r4, align 4
  %v2_e5c0 = inttoptr i32 %v0_e5a4 to i32*
  %v1_e610 = add i32 %v0_e620, 16
  %v2_e610 = inttoptr i32 %v1_e610 to i32*
  %v4_e64c = sext i16 %stack_var_-1884.0 to i32
  %v1_e620 = add i32 %v0_e620, 9
  %v2_e620 = inttoptr i32 %v1_e620 to i8*
  %v1_e6b4 = add i32 %v0_e620, 12
  %v2_e6b4 = inttoptr i32 %v1_e6b4 to i32*
  br label %dec_label_pc_e5b8

dec_label_pc_e5b8:                                ; preds = %dec_label_pc_e67c, %dec_label_pc_e674, %dec_label_pc_e66c, %dec_label_pc_e648, %dec_label_pc_e638, %dec_label_pc_e620, %dec_label_pc_e608, %dec_label_pc_e664, %dec_label_pc_e658, %dec_label_pc_e600, %dec_label_pc_e734, %dec_label_pc_e5a4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %v2_e5c0, align 4
  %v2_e5c8 = load i32, i32* @global_var_202f8.128, align 4
  store i32 %v2_e5c8, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_e620, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e5dc = load i32, i32* %ip.global-to-local, align 4
  %v6_e5e4 = call i32 @function_10d38(i32 %v2_e5c8, i32 %v0_e620, i32 1514, i32 16384, i32 %v0_e5dc, i32 %v0_e5dc)
  store i32 %v6_e5e4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5e8 = icmp eq i32 %v6_e5e4, 0
  store i1 %v2_e5e8, i1* %cpsr_z.global-to-local, align 1
  %tmp367 = icmp slt i32 %v6_e5e4, 1
  br i1 %tmp367, label %dec_label_pc_e758, label %dec_label_pc_e5f0

dec_label_pc_e5f0:                                ; preds = %dec_label_pc_e5b8
  store i32 %v0_e5a4, i32* %ip.global-to-local, align 4
  %v2_e5f4 = load i32, i32* %v2_e5c0, align 4
  store i32 %v2_e5f4, i32* %r3.global-to-local, align 4
  %v2_e5f8 = icmp ugt i32 %v2_e5f4, 10
  store i1 %v2_e5f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e5f8 = icmp eq i32 %v2_e5f4, 11
  store i1 %v7_e5f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5f8, label %dec_label_pc_e758, label %dec_label_pc_e600

dec_label_pc_e600:                                ; preds = %dec_label_pc_e5f0
  %v2_e600 = icmp ugt i32 %v6_e5e4, 38
  store i1 %v2_e600, i1* %cpsr_c.global-to-local, align 1
  %v7_e600 = icmp eq i32 %v6_e5e4, 39
  store i1 %v7_e600, i1* %cpsr_z.global-to-local, align 1
  %v2_e604 = xor i1 %v2_e600, true
  %v3_e604 = or i1 %v7_e600, %v2_e604
  br i1 %v3_e604, label %dec_label_pc_e5b8, label %dec_label_pc_e608

dec_label_pc_e608:                                ; preds = %dec_label_pc_e600
  store i32 ptrtoint (i32* @global_var_202dc.42 to i32), i32* %r0.global-to-local, align 4
  %v3_e610 = load i32, i32* %v2_e610, align 4
  store i32 %v3_e610, i32* %r2.global-to-local, align 4
  %v2_e614 = load i32, i32* @global_var_202dc.42, align 4
  store i32 %v2_e614, i32* %r3.global-to-local, align 4
  %v3_e618 = icmp uge i32 %v3_e610, %v2_e614
  store i1 %v3_e618, i1* %cpsr_c.global-to-local, align 1
  %v9_e618 = icmp eq i32 %v3_e610, %v2_e614
  store i1 %v9_e618, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e618, label %dec_label_pc_e620, label %dec_label_pc_e5b8

dec_label_pc_e620:                                ; preds = %dec_label_pc_e608
  %v3_e620 = load i8, i8* %v2_e620, align 1
  %v4_e620 = zext i8 %v3_e620 to i32
  store i32 %v4_e620, i32* %r3.global-to-local, align 4
  %v2_e624 = icmp ugt i8 %v3_e620, 5
  store i1 %v2_e624, i1* %cpsr_c.global-to-local, align 1
  %v7_e624 = icmp eq i8 %v3_e620, 6
  store i1 %v7_e624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e624, label %dec_label_pc_e62c, label %dec_label_pc_e5b8

dec_label_pc_e62c:                                ; preds = %dec_label_pc_e620
  %v0_e62c = load i32, i32* @r4, align 4
  %v1_e62c = inttoptr i32 %v0_e62c to i16*
  %v2_e62c = load i16, i16* %v1_e62c, align 2
  %v3_e62c = zext i16 %v2_e62c to i32
  store i32 %v3_e62c, i32* %ip.global-to-local, align 4
  %v2_e630 = icmp ugt i16 %v2_e62c, 5887
  store i1 %v2_e630, i1* %cpsr_c.global-to-local, align 1
  %v7_e630 = icmp eq i16 %v2_e62c, 5888
  store i1 %v7_e630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e630, label %dec_label_pc_e648, label %dec_label_pc_e638

dec_label_pc_e638:                                ; preds = %dec_label_pc_e62c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_e640 = icmp ugt i16 %v2_e62c, 4872
  store i1 %v3_e640, i1* %cpsr_c.global-to-local, align 1
  %v9_e640 = icmp eq i16 %v2_e62c, 4873
  store i1 %v9_e640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e640, label %dec_label_pc_e648, label %dec_label_pc_e5b8

dec_label_pc_e648:                                ; preds = %dec_label_pc_e638, %dec_label_pc_e62c
  %v1_e648 = add i32 %v0_e62c, 2
  %v2_e648 = inttoptr i32 %v1_e648 to i16*
  %v3_e648 = load i16, i16* %v2_e648, align 2
  %v4_e648 = zext i16 %v3_e648 to i32
  store i32 %v4_e648, i32* %r3.global-to-local, align 4
  store i32 %v4_e64c, i32* %r1.global-to-local, align 4
  %v3_e650 = icmp uge i32 %v4_e648, %v4_e64c
  store i1 %v3_e650, i1* %cpsr_c.global-to-local, align 1
  %v9_e650 = icmp eq i32 %v4_e648, %v4_e64c
  store i1 %v9_e650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e650, label %dec_label_pc_e658, label %dec_label_pc_e5b8

dec_label_pc_e658:                                ; preds = %dec_label_pc_e648
  %v1_e658 = add i32 %v0_e62c, 13
  %v2_e658 = inttoptr i32 %v1_e658 to i8*
  %v3_e658 = load i8, i8* %v2_e658, align 1
  %v4_e658 = zext i8 %v3_e658 to i32
  store i32 %v4_e658, i32* %r3.global-to-local, align 4
  %v1_e65c = and i32 %v4_e658, 2
  %v2_e65c = icmp eq i32 %v1_e65c, 0
  store i1 %v2_e65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e65c, label %dec_label_pc_e5b8, label %dec_label_pc_e664

dec_label_pc_e664:                                ; preds = %dec_label_pc_e658
  %v1_e664 = and i32 %v4_e658, 16
  %v2_e664 = icmp eq i32 %v1_e664, 0
  store i1 %v2_e664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e664, label %dec_label_pc_e5b8, label %dec_label_pc_e66c

dec_label_pc_e66c:                                ; preds = %dec_label_pc_e664
  %v1_e66c = and i32 %v4_e658, 4
  %v2_e66c = icmp eq i32 %v1_e66c, 0
  store i1 %v2_e66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e66c, label %dec_label_pc_e674, label %dec_label_pc_e5b8

dec_label_pc_e674:                                ; preds = %dec_label_pc_e66c
  %tmp515 = urem i8 %v3_e658, 2
  %v2_e674 = icmp eq i8 %tmp515, 0
  store i1 %v2_e674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e674, label %dec_label_pc_e67c, label %dec_label_pc_e5b8

dec_label_pc_e67c:                                ; preds = %dec_label_pc_e674
  %v1_e67c = add i32 %v0_e62c, 8
  %v2_e67c = inttoptr i32 %v1_e67c to i32*
  %v3_e67c = load i32, i32* %v2_e67c, align 4
  %v5_e694 = call i32 @llvm.bswap.i32(i32 %v3_e67c)
  %v1_e698 = add i32 %v5_e694, -1
  store i32 %v1_e698, i32* %r2.global-to-local, align 4
  %v3_e6a0 = udiv i32 %v1_e698, 16777216
  %v1_e69c = udiv i32 %v1_e698, 256
  %v4_e6a4 = and i32 %v1_e69c, 65280
  %v5_e6a4 = or i32 %v4_e6a4, %v3_e6a0
  store i32 %v0_e620, i32* %r0.global-to-local, align 4
  %v1_e6ac = and i32 %v1_e698, 65280
  store i32 %v1_e6ac, i32* %r1.global-to-local, align 4
  %v4_e6b0 = mul nuw nsw i32 %v1_e6ac, 256
  %v5_e6b0 = or i32 %v5_e6a4, %v4_e6b0
  store i32 %v5_e6b0, i32* %r3.global-to-local, align 4
  %v3_e6b4 = load i32, i32* %v2_e6b4, align 4
  store i32 %v3_e6b4, i32* @lr, align 4
  %v5_e6b8 = call i32 @llvm.bswap.i32(i32 %v1_e698)
  store i32 %v5_e6b8, i32* %r3.global-to-local, align 4
  %v3_e6bc = icmp uge i32 %v5_e6b8, %v3_e6b4
  store i1 %v3_e6bc, i1* %cpsr_c.global-to-local, align 1
  %v9_e6bc = icmp eq i32 %v5_e6b8, %v3_e6b4
  store i1 %v9_e6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e6bc, label %dec_label_pc_e6c4, label %dec_label_pc_e5b8

dec_label_pc_e6c4:                                ; preds = %dec_label_pc_e67c
  %v0_e6c4 = load i32, i32* @r5, align 4
  %v2_e6c4 = icmp ugt i32 %v0_e6c4, 254
  store i1 %v2_e6c4, i1* %cpsr_c.global-to-local, align 1
  %v7_e6c4 = icmp eq i32 %v0_e6c4, 255
  store i1 %v7_e6c4, i1* %cpsr_z.global-to-local, align 1
  %v8_e6c8 = icmp sgt i32 %v0_e6c4, 255
  br i1 %v8_e6c8, label %dec_label_pc_e758, label %dec_label_pc_e6cc

dec_label_pc_e6cc:                                ; preds = %dec_label_pc_e6c4
  %v2_e6d4 = load i32, i32* @global_var_202f4.126, align 4
  store i32 %v2_e6d4, i32* %r1.global-to-local, align 4
  %v3_e6d8 = mul i32 %v0_e6c4, 256
  store i32 %v3_e6d8, i32* %r2.global-to-local, align 4
  %v2_e6dc = mul i32 %v0_e6c4, 288
  store i32 %v2_e6dc, i32* %r3.global-to-local, align 4
  %v2_e6e0 = add i32 %v2_e6d4, %v2_e6dc
  store i32 %v2_e6e0, i32* @r0, align 4
  %v1_e6e4 = add i32 %v2_e6e0, 12
  %v2_e6e4 = inttoptr i32 %v1_e6e4 to i32*
  %v3_e6e4 = load i32, i32* %v2_e6e4, align 4
  store i32 %v3_e6e4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e6e8 = icmp eq i32 %v3_e6e4, 0
  store i1 %v2_e6e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e6e8, label %dec_label_pc_e72c, label %dec_label_pc_e708.preheader

dec_label_pc_e708.preheader:                      ; preds = %dec_label_pc_e6cc
  %v2_e6ec = add i32 %v0_e6c4, 1
  %v2_e6f4 = and i32 %v2_e6ec, 134217728
  %v3_e6f4 = icmp ne i32 %v2_e6f4, 0
  store i1 %v3_e6f4, i1* %cpsr_c.global-to-local, align 1
  %v3_e6f8 = mul i32 %v2_e6ec, 288
  %v3_e6fc = add i32 %v2_e6d4, %v3_e6f8
  store i32 %v3_e6fc, i32* %r3.global-to-local, align 4
  store i32 %v0_e6c4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e708

dec_label_pc_e708:                                ; preds = %dec_label_pc_e708.preheader, %dec_label_pc_e714
  %v0_e714 = phi i32 [ %v3_e6fc, %dec_label_pc_e708.preheader ], [ %v1_e720, %dec_label_pc_e714 ]
  %v0_e708 = phi i32 [ %v0_e6c4, %dec_label_pc_e708.preheader ], [ %v1_e708, %dec_label_pc_e714 ]
  %v1_e708 = add i32 %v0_e708, 1
  store i32 %v1_e708, i32* %r2.global-to-local, align 4
  %v7_e70c = icmp eq i32 %v1_e708, 256
  br i1 %v7_e70c, label %dec_label_pc_e758.loopexit, label %dec_label_pc_e714

dec_label_pc_e714:                                ; preds = %dec_label_pc_e708
  store i32 %v0_e714, i32* @r0, align 4
  %v1_e718 = add i32 %v0_e714, 12
  %v2_e718 = inttoptr i32 %v1_e718 to i32*
  %v3_e718 = load i32, i32* %v2_e718, align 4
  %v2_e71c = icmp eq i32 %v3_e718, 0
  %v1_e720 = add i32 %v0_e714, 288
  store i32 %v1_e720, i32* %r3.global-to-local, align 4
  br i1 %v2_e71c, label %dec_label_pc_e728, label %dec_label_pc_e708

dec_label_pc_e728:                                ; preds = %dec_label_pc_e714
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e708, i32* @r5, align 4
  br label %dec_label_pc_e72c

dec_label_pc_e72c:                                ; preds = %dec_label_pc_e6cc, %dec_label_pc_e728
  %v1_e734 = phi i32 [ %v2_e6e0, %dec_label_pc_e6cc ], [ %v0_e714, %dec_label_pc_e728 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e72c = icmp eq i32 %v1_e734, 0
  store i1 %v2_e72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e72c, label %dec_label_pc_e758, label %dec_label_pc_e734

dec_label_pc_e734:                                ; preds = %dec_label_pc_e72c
  %v2_e734 = add i32 %v1_e734, 16
  %v3_e734 = inttoptr i32 %v2_e734 to i32*
  store i32 %v3_e6b4, i32* %v3_e734, align 4
  %v0_e738 = load i32, i32* %ip.global-to-local, align 4
  %v1_e738 = trunc i32 %v0_e738 to i16
  %v2_e738 = load i32, i32* @r0, align 4
  %v3_e738 = add i32 %v2_e738, 20
  %v4_e738 = inttoptr i32 %v3_e738 to i16*
  store i16 %v1_e738, i16* %v4_e738, align 2
  %v0_e73c = call i32 @function_da7c()
  store i32 %v0_e73c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e5b8

dec_label_pc_e744:                                ; preds = %dec_label_pc_dd98
  store i32 ptrtoint (i32* @global_var_202f8.128 to i32), i32* %ip.global-to-local, align 4
  %v2_e748 = load i32, i32* @global_var_202f8.128, align 4
  store i32 %v2_e748, i32* %r0.global-to-local, align 4
  %v1_e74c = call i32 @function_10644(i32 %v2_e748)
  store i32 %v1_e74c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e750

dec_label_pc_e750:                                ; preds = %dec_label_pc_dd74, %dec_label_pc_e744
  %v0_e750 = load i32, i32* @r5, align 4
  store i32 %v0_e750, i32* %r0.global-to-local, align 4
  %v1_e754 = call i32 @function_12488(i32 %v0_e750)
  store i32 %v1_e754, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e758

dec_label_pc_e758.loopexit:                       ; preds = %dec_label_pc_e708
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e758

dec_label_pc_e758:                                ; preds = %dec_label_pc_e72c, %dec_label_pc_e6c4, %dec_label_pc_e5f0, %dec_label_pc_e5b8, %dec_label_pc_e758.loopexit, %dec_label_pc_e750
  %stack_var_-1876.0 = phi i32 [ %tmp296, %dec_label_pc_e750 ], [ %v0_e5a4, %dec_label_pc_e758.loopexit ], [ %v0_e5a4, %dec_label_pc_e5b8 ], [ %v0_e5a4, %dec_label_pc_e5f0 ], [ %v0_e5a4, %dec_label_pc_e6c4 ], [ %v0_e5a4, %dec_label_pc_e72c ]
  %stack_var_-1880.2 = phi i32 [ %tmp300, %dec_label_pc_e750 ], [ %stack_var_-1880.1, %dec_label_pc_e758.loopexit ], [ %stack_var_-1880.1, %dec_label_pc_e5b8 ], [ %stack_var_-1880.1, %dec_label_pc_e5f0 ], [ %stack_var_-1880.1, %dec_label_pc_e6c4 ], [ %stack_var_-1880.1, %dec_label_pc_e72c ]
  %stack_var_-1888.1 = phi i32 [ %tmp301, %dec_label_pc_e750 ], [ %v0_e620, %dec_label_pc_e758.loopexit ], [ %v0_e620, %dec_label_pc_e5b8 ], [ %v0_e620, %dec_label_pc_e5f0 ], [ %v0_e620, %dec_label_pc_e6c4 ], [ %v0_e620, %dec_label_pc_e72c ]
  %stack_var_-1884.1 = phi i16 [ %tmp302, %dec_label_pc_e750 ], [ %stack_var_-1884.0, %dec_label_pc_e758.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_e5b8 ], [ %stack_var_-1884.0, %dec_label_pc_e5f0 ], [ %stack_var_-1884.0, %dec_label_pc_e6c4 ], [ %stack_var_-1884.0, %dec_label_pc_e72c ]
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_e778473 = load i32, i32* @sp, align 4
  %v3_e778474 = add i32 %v2_e778473, 1676
  %v4_e778475 = inttoptr i32 %v3_e778474 to i32*
  store i32 0, i32* %v4_e778475, align 4
  br label %dec_label_pc_e764.dec_label_pc_e764_crit_edge

dec_label_pc_e764.dec_label_pc_e764_crit_edge:    ; preds = %dec_label_pc_e758, %dec_label_pc_e764.dec_label_pc_e764_crit_edge
  %v0_e764.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e768 = add i32 %v0_e764.pre, 4
  store i32 %v1_e768, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e770 = add i32 %v0_e764.pre, 1672
  store i32 %v1_e770, i32* %ip.global-to-local, align 4
  %v7_e774 = icmp eq i32 %v1_e768, 128
  %v2_e778 = load i32, i32* @sp, align 4
  %v3_e778 = add i32 %v2_e778, %v1_e770
  %v4_e778 = inttoptr i32 %v3_e778 to i32*
  store i32 0, i32* %v4_e778, align 4
  br i1 %v7_e774, label %dec_label_pc_e780, label %dec_label_pc_e764.dec_label_pc_e764_crit_edge

dec_label_pc_e780:                                ; preds = %dec_label_pc_e764.dec_label_pc_e764_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e780 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e780, i32* %stack_var_-352, align 4
  %v1_e78c467 = add i32 %v0_e780, 8
  store i32 %v1_e78c467, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_e794468 = add i32 %v0_e780, 1548
  store i32 %v1_e794468, i32* @lr, align 4
  %v7_e798469 = icmp eq i32 %v1_e78c467, 128
  %v2_e79c470 = load i32, i32* @sp, align 4
  %v3_e79c471 = add i32 %v2_e79c470, %v1_e794468
  %v4_e79c472 = inttoptr i32 %v3_e79c471 to i32*
  store i32 0, i32* %v4_e79c472, align 4
  br i1 %v7_e798469, label %dec_label_pc_e7a4, label %dec_label_pc_e788.dec_label_pc_e788_crit_edge

dec_label_pc_e788.dec_label_pc_e788_crit_edge:    ; preds = %dec_label_pc_e780, %dec_label_pc_e788.dec_label_pc_e788_crit_edge
  %v0_e788.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_e78c = add i32 %v0_e788.pre, 4
  store i32 %v1_e78c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_e794 = add i32 %v0_e788.pre, 1544
  store i32 %v1_e794, i32* @lr, align 4
  %v7_e798 = icmp eq i32 %v1_e78c, 128
  %v2_e79c = load i32, i32* @sp, align 4
  %v3_e79c = add i32 %v2_e79c, %v1_e794
  %v4_e79c = inttoptr i32 %v3_e79c to i32*
  store i32 0, i32* %v4_e79c, align 4
  br i1 %v7_e798, label %dec_label_pc_e7a4, label %dec_label_pc_e788.dec_label_pc_e788_crit_edge

dec_label_pc_e7a4:                                ; preds = %dec_label_pc_e788.dec_label_pc_e788_crit_edge, %dec_label_pc_e780
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e7a4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e7a4, i32* @r6, align 4
  store i32 %v0_e7a4, i32* @r5, align 4
  store i32 %v0_e7a4, i32* %stack_var_-52, align 4
  %v2_f6e4 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e800

dec_label_pc_e7b4:                                ; preds = %dec_label_pc_e830
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e81c, i1* %cpsr_z.global-to-local, align 1
  %v1_f6d8 = add i32 %v2_e814, 4
  %v2_f6d8 = inttoptr i32 %v1_f6d8 to i32*
  %v3_f6d8 = load i32, i32* %v2_f6d8, align 4
  br i1 %v7_e81c, label %dec_label_pc_f6d8, label %dec_label_pc_e7bc

dec_label_pc_e7bc:                                ; preds = %dec_label_pc_e7b4
  store i32 %v3_f6d8, i32* %ip.global-to-local, align 4
  %v3_e7c0 = udiv i32 %v3_f6d8, 32
  store i32 %v2_f6e4, i32* %r0.global-to-local, align 4
  %v3_e7c8 = mul nuw nsw i32 %v3_e7c0, 4
  %v2_e7cc = add i32 %v3_e7c8, %v2_f6e4
  store i32 %v2_e7cc, i32* %r3.global-to-local, align 4
  %v1_e7d0 = add i32 %v2_e7cc, -184
  %v2_e7d0 = inttoptr i32 %v1_e7d0 to i32*
  %v3_e7d0 = load i32, i32* %v2_e7d0, align 4
  %v1_e7d4 = urem i32 %v3_f6d8, 32
  store i32 %v1_e7d4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_e7dc = shl i32 1, %v1_e7d4
  %v8_e7dc = or i32 %v3_e7d0, %v7_e7dc
  store i32 %v8_e7dc, i32* %r2.global-to-local, align 4
  store i32 %v8_e7dc, i32* %v2_e7d0, align 4
  %v0_e7e4 = load i32, i32* @r6, align 4
  %v1_e7e4 = load i32, i32* %ip.global-to-local, align 4
  %v3_e7e4 = icmp uge i32 %v0_e7e4, %v1_e7e4
  store i1 %v3_e7e4, i1* %cpsr_c.global-to-local, align 1
  %v9_e7e4 = icmp eq i32 %v0_e7e4, %v1_e7e4
  store i1 %v9_e7e4, i1* %cpsr_z.global-to-local, align 1
  %v5_e7e8 = icmp slt i32 %v0_e7e4, %v1_e7e4
  br i1 %v5_e7e8, label %bb368, label %bb369

bb368:                                            ; preds = %dec_label_pc_e7bc
  store i32 %v1_e7e4, i32* @r6, align 4
  br label %bb369

bb369:                                            ; preds = %.thread55, %bb375, %bb373, %bb418, %dec_label_pc_e894, %dec_label_pc_e7bc, %bb368
  %v3_e7ec = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_e7ec, i32* %r3.global-to-local, align 4
  %v1_e7f0 = add i32 %v3_e7ec, 1
  store i32 %v1_e7f0, i32* %r2.global-to-local, align 4
  %v2_e7f4 = icmp ugt i32 %v1_e7f0, 254
  store i1 %v2_e7f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7f4 = icmp eq i32 %v1_e7f0, 255
  store i1 %v7_e7f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e7f0, i32* %stack_var_-52, align 4
  %v8_e7fc = icmp sgt i32 %v1_e7f0, 255
  br i1 %v8_e7fc, label %dec_label_pc_e8a0, label %dec_label_pc_e800

dec_label_pc_e800:                                ; preds = %bb369, %dec_label_pc_e7a4
  %v0_e80c = phi i32 [ %v1_e7f0, %bb369 ], [ %v0_e7a4, %dec_label_pc_e7a4 ]
  store i32 ptrtoint (i32* @global_var_202f4.126 to i32), i32* %r0.global-to-local, align 4
  %v3_e804 = mul i32 %v0_e80c, 256
  store i32 %v3_e804, i32* %r3.global-to-local, align 4
  %v2_e808 = load i32, i32* @global_var_202f4.126, align 4
  store i32 %v2_e808, i32* %r1.global-to-local, align 4
  %v2_e810 = mul i32 %v0_e80c, 288
  store i32 %v2_e810, i32* %r2.global-to-local, align 4
  %v2_e814 = add i32 %v2_e808, %v2_e810
  store i32 %v2_e814, i32* @r4, align 4
  %v1_e818 = add i32 %v2_e814, 12
  %v2_e818 = inttoptr i32 %v1_e818 to i32*
  %v3_e818 = load i32, i32* %v2_e818, align 4
  store i32 %v3_e818, i32* %ip.global-to-local, align 4
  %v2_e81c = icmp ne i32 %v3_e818, 0
  store i1 %v2_e81c, i1* %cpsr_c.global-to-local, align 1
  %v7_e81c = icmp eq i32 %v3_e818, 1
  store i1 %v7_e81c, i1* %cpsr_z.global-to-local, align 1
  %v2_e820 = xor i1 %v2_e81c, true
  %v3_e820 = or i1 %v7_e81c, %v2_e820
  br i1 %v3_e820, label %bb370, label %bb371

bb370:                                            ; preds = %dec_label_pc_e800
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb371

bb371:                                            ; preds = %dec_label_pc_e800, %bb370
  %v1_e840165 = phi i32 [ %v2_e808, %dec_label_pc_e800 ], [ 5, %bb370 ]
  %v2_e824 = xor i1 %v7_e81c, true
  %v3_e824 = and i1 %v2_e81c, %v2_e824
  br i1 %v3_e824, label %bb372, label %bb373

bb372:                                            ; preds = %bb371
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb373

bb373:                                            ; preds = %bb371, %bb372
  %v1_e840 = phi i32 [ %v1_e840165, %bb371 ], [ 30, %bb372 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e828 = icmp eq i32 %v3_e818, 0
  store i1 %v2_e828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e828, label %bb369, label %dec_label_pc_e830

dec_label_pc_e830:                                ; preds = %bb373
  store i32 ptrtoint (i32* @global_var_1e2a8.115 to i32), i32* %r2.global-to-local, align 4
  %v2_e834 = load i32, i32* @global_var_1e2a8.115, align 4
  store i32 %v2_e834, i32* %r3.global-to-local, align 4
  %v1_e838 = add i32 %v2_e814, 8
  %v2_e838 = inttoptr i32 %v1_e838 to i32*
  %v3_e838 = load i32, i32* %v2_e838, align 4
  store i32 %v3_e838, i32* %r2.global-to-local, align 4
  %v2_e83c = sub i32 %v2_e834, %v3_e838
  store i32 %v2_e83c, i32* %r3.global-to-local, align 4
  %v3_e840 = icmp uge i32 %v2_e83c, %v1_e840
  store i1 %v3_e840, i1* %cpsr_c.global-to-local, align 1
  %v9_e840 = icmp eq i32 %v2_e83c, %v1_e840
  store i1 %v9_e840, i1* %cpsr_z.global-to-local, align 1
  %v2_e844 = xor i1 %v3_e840, true
  %v3_e844 = or i1 %v9_e840, %v2_e844
  br i1 %v3_e844, label %dec_label_pc_e7b4, label %dec_label_pc_e848

dec_label_pc_e848:                                ; preds = %dec_label_pc_e830
  %v1_e848 = add i32 %v2_e814, 4
  %v2_e848 = inttoptr i32 %v1_e848 to i32*
  %v3_e848 = load i32, i32* %v2_e848, align 4
  store i32 %v3_e848, i32* %r0.global-to-local, align 4
  %v1_e84c = call i32 @function_10644(i32 %v3_e848)
  store i32 %v1_e84c, i32* %r0.global-to-local, align 4
  %v0_e850 = load i32, i32* @r4, align 4
  %v1_e850 = add i32 %v0_e850, 12
  %v2_e850 = inttoptr i32 %v1_e850 to i32*
  %v3_e850 = load i32, i32* %v2_e850, align 4
  store i32 %v3_e850, i32* %r3.global-to-local, align 4
  %v2_e854 = icmp ugt i32 %v3_e850, 1
  store i1 %v2_e854, i1* %cpsr_c.global-to-local, align 1
  %v7_e854 = icmp eq i32 %v3_e850, 2
  store i1 %v7_e854, i1* %cpsr_z.global-to-local, align 1
  %v2_e858 = xor i1 %v2_e854, true
  %v3_e858 = or i1 %v7_e854, %v2_e858
  br i1 %v3_e858, label %bb374, label %.thread267

.thread267:                                       ; preds = %dec_label_pc_e848
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_e860264268 = add i32 %v0_e850, 4
  %v3_e860265269 = inttoptr i32 %v2_e860264268 to i32*
  store i32 -1, i32* %v3_e860265269, align 4
  br label %bb375

bb374:                                            ; preds = %dec_label_pc_e848
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_e860261 = add i32 %v0_e850, 4
  %v3_e860262 = inttoptr i32 %v2_e860261 to i32*
  store i32 -1, i32* %v3_e860262, align 4
  %v4_e864 = load i32, i32* %r3.global-to-local, align 4
  %v5_e864 = load i32, i32* @r4, align 4
  %v6_e864 = add i32 %v5_e864, 12
  %v7_e864 = inttoptr i32 %v6_e864 to i32*
  store i32 %v4_e864, i32* %v7_e864, align 4
  %v4_e868 = load i32, i32* %r3.global-to-local, align 4
  %v5_e868 = trunc i32 %v4_e868 to i8
  %v6_e868 = load i32, i32* @r4, align 4
  %v7_e868 = add i32 %v6_e868, 284
  %v8_e868 = inttoptr i32 %v7_e868 to i8*
  store i8 %v5_e868, i8* %v8_e868, align 1
  %v0_e86c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_e86c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb375

bb375:                                            ; preds = %.thread267, %bb374
  %v1_e86c = phi i1 [ %v1_e86c.pre, %bb374 ], [ %v2_e854, %.thread267 ]
  %v0_e86c = phi i1 [ %v0_e86c.pre, %bb374 ], [ false, %.thread267 ]
  %v2_e86c = xor i1 %v1_e86c, true
  %v3_e86c = or i1 %v0_e86c, %v2_e86c
  br i1 %v3_e86c, label %bb369, label %dec_label_pc_e870

dec_label_pc_e870:                                ; preds = %bb375
  %v0_e870 = load i32, i32* @r4, align 4
  %v1_e870 = add i32 %v0_e870, 284
  %v2_e870 = inttoptr i32 %v1_e870 to i8*
  %v3_e870 = load i8, i8* %v2_e870, align 1
  %v4_e870 = zext i8 %v3_e870 to i32
  %v1_e874 = add nuw nsw i32 %v4_e870, 1
  %v1_e878 = urem i32 %v1_e874, 256
  store i32 %v1_e878, i32* %r3.global-to-local, align 4
  %v2_e87c = icmp ugt i32 %v1_e878, 9
  store i1 %v2_e87c, i1* %cpsr_c.global-to-local, align 1
  %v7_e87c = icmp eq i32 %v1_e878, 10
  store i1 %v7_e87c, i1* %cpsr_z.global-to-local, align 1
  %v1_e880 = trunc i32 %v1_e874 to i8
  store i8 %v1_e880, i8* %v2_e870, align 1
  %v0_e884 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e884, label %.thread55, label %dec_label_pc_e894

.thread55:                                        ; preds = %dec_label_pc_e870
  %v1_e884 = load i32, i32* %r3.global-to-local, align 4
  %v2_e884 = add i32 %v1_e884, -10
  store i32 %v2_e884, i32* %r3.global-to-local, align 4
  %v2_e888 = load i32, i32* @r4, align 4
  %v3_e888 = add i32 %v2_e888, 12
  %v4_e888 = inttoptr i32 %v3_e888 to i32*
  store i32 %v2_e884, i32* %v4_e888, align 4
  %v1_e88c = load i32, i32* %r3.global-to-local, align 4
  %v2_e88c = trunc i32 %v1_e88c to i8
  %v3_e88c = load i32, i32* @r4, align 4
  %v4_e88c = add i32 %v3_e88c, 284
  %v5_e88c = inttoptr i32 %v4_e88c to i8*
  store i8 %v2_e88c, i8* %v5_e88c, align 1
  %v0_e890.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e890.pr.pr, label %bb369, label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_e870, %.thread55
  %v0_e894 = load i32, i32* @r4, align 4
  store i32 %v0_e894, i32* @r0, align 4
  %v0_e898 = call i32 @function_da7c()
  store i32 %v0_e898, i32* %r0.global-to-local, align 4
  br label %bb369

dec_label_pc_e8a0:                                ; preds = %bb369
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_e8ac = load i32, i32* @r5, align 4
  %v1_e8ac = load i32, i32* @r6, align 4
  %v3_e8ac = icmp uge i32 %v0_e8ac, %v1_e8ac
  store i1 %v3_e8ac, i1* %cpsr_c.global-to-local, align 1
  %v9_e8ac = icmp eq i32 %v0_e8ac, %v1_e8ac
  store i1 %v9_e8ac, i1* %cpsr_z.global-to-local, align 1
  %v5_e8b0 = icmp slt i32 %v0_e8ac, %v1_e8ac
  %storemerge126 = select i1 %v5_e8b0, i32 %v1_e8ac, i32 %v0_e8ac
  %v2_e8c4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_e8c4, i32* %ip.global-to-local, align 4
  %v2_e8c8 = ptrtoint i32* %stack_var_-224 to i32
  store i32 %v2_e8c8, i32* %r1.global-to-local, align 4
  %v2_e8cc = ptrtoint i32* %stack_var_-352 to i32
  store i32 %v2_e8cc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e8d4 = add i32 %storemerge126, 1
  store i32 %v1_e8d4, i32* %r0.global-to-local, align 4
  %v5_e8e0 = call i32 @function_10368(i32 %v1_e8d4, i32 %v2_e8c8, i32 %v2_e8cc, i32 0, i32 %v2_e8c4)
  %v0_e8e4 = load i32, i32* @r4, align 4
  store i32 %v0_e8e4, i32* %r0.global-to-local, align 4
  %v1_e8e8 = inttoptr i32 %v0_e8e4 to i32*
  %v2_e8e8 = call i32 @function_102c4(i32* %v1_e8e8)
  store i32 %v2_e8e8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e2a8.115 to i32), i32* @lr, align 4
  %v0_e8f0 = load i32, i32* @r4, align 4
  store i32 %v0_e8f0, i32* %stack_var_-52, align 4
  store i32 %v2_e8e8, i32* @global_var_1e2a8.115, align 4
  %v2_e97c = inttoptr i32 %stack_var_-1876.0 to i32*
  %v2_f278 = ptrtoint i32* %stack_var_-45 to i32
  %v2_f28c = ptrtoint i32* %stack_var_-77 to i32
  %v2_f01c = ptrtoint i32* %stack_var_-60 to i32
  %v2_f3bc = ptrtoint i32* %stack_var_-104 to i32
  %v2_f5e8 = ptrtoint i32* %stack_var_-96 to i32
  %v2_f614 = ptrtoint i32* %stack_var_-56 to i32
  %v2_f640 = ptrtoint i32* %stack_var_-42 to i32
  br label %dec_label_pc_e8f8

dec_label_pc_e8f8:                                ; preds = %dec_label_pc_ea68, %dec_label_pc_e8a0
  %v0_e904 = phi i32 [ %v1_ea6c, %dec_label_pc_ea68 ], [ %v0_e8f0, %dec_label_pc_e8a0 ]
  store i32 ptrtoint (i32* @global_var_202f4.126 to i32), i32* %r0.global-to-local, align 4
  %v3_e8fc = mul i32 %v0_e904, 256
  store i32 %v3_e8fc, i32* %r3.global-to-local, align 4
  %v2_e900 = load i32, i32* @global_var_202f4.126, align 4
  store i32 %v2_e900, i32* %r1.global-to-local, align 4
  %v2_e908 = mul i32 %v0_e904, 288
  store i32 %v2_e908, i32* %r2.global-to-local, align 4
  %v2_e90c = add i32 %v2_e900, %v2_e908
  store i32 %v2_e90c, i32* @r6, align 4
  %v1_e910 = add i32 %v2_e90c, 4
  %v2_e910 = inttoptr i32 %v1_e910 to i32*
  %v3_e910 = load i32, i32* %v2_e910, align 4
  store i32 %v3_e910, i32* %r0.global-to-local, align 4
  %v2_e914 = icmp eq i32 %v3_e910, -1
  store i1 %v2_e914, i1* %cpsr_c.global-to-local, align 1
  %v7_e914 = icmp eq i32 %v3_e910, -1
  store i1 %v7_e914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e914, label %dec_label_pc_ea68, label %dec_label_pc_e91c

dec_label_pc_e91c:                                ; preds = %dec_label_pc_e8f8
  %v3_e91c = udiv i32 %v3_e910, 32
  store i32 %v2_f6e4, i32* %r1.global-to-local, align 4
  %v3_e924 = mul nuw nsw i32 %v3_e91c, 4
  store i32 %v3_e924, i32* @ip, align 4
  %v2_e928 = add i32 %v3_e924, %v2_f6e4
  store i32 %v2_e928, i32* %r2.global-to-local, align 4
  %v1_e92c = add i32 %v2_e928, -312
  %v2_e92c = inttoptr i32 %v1_e92c to i32*
  %v3_e92c = load i32, i32* %v2_e92c, align 4
  %v1_e930 = urem i32 %v3_e910, 32
  store i32 %v1_e930, i32* %r1.global-to-local, align 4
  %v2_e934 = add nsw i32 %v1_e930, -1
  %v3_e934 = shl i32 1, %v2_e934
  %v4_e934 = and i32 %v3_e92c, %v3_e934
  %v5_e934 = icmp ne i32 %v4_e934, 0
  store i1 %v5_e934, i1* %cpsr_c.global-to-local, align 1
  %v6_e934 = lshr i32 %v3_e92c, %v1_e930
  store i32 %v6_e934, i32* %r3.global-to-local, align 4
  %v1_e938 = urem i32 %v6_e934, 2
  %v2_e938 = icmp eq i32 %v1_e938, 0
  store i1 %v2_e938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e938, label %dec_label_pc_e940, label %dec_label_pc_f4a4

dec_label_pc_e940:                                ; preds = %dec_label_pc_e91c, %dec_label_pc_f550
  %v1_e94c = phi i32 [ %v1_e930, %dec_label_pc_e91c ], [ %v1_e94c.pre, %dec_label_pc_f550 ]
  %v0_e944 = phi i32 [ %v3_e924, %dec_label_pc_e91c ], [ %v0_e944.pre, %dec_label_pc_f550 ]
  store i32 %v2_f6e4, i32* @lr, align 4
  %v2_e944 = add i32 %v0_e944, %v2_f6e4
  store i32 %v2_e944, i32* %r2.global-to-local, align 4
  %v1_e948 = add i32 %v2_e944, -184
  %v2_e948 = inttoptr i32 %v1_e948 to i32*
  %v3_e948 = load i32, i32* %v2_e948, align 4
  %v2_e94c = add i32 %v1_e94c, -1
  %v3_e94c = shl i32 1, %v2_e94c
  %v4_e94c = and i32 %v3_e948, %v3_e94c
  %v5_e94c = icmp ne i32 %v4_e94c, 0
  store i1 %v5_e94c, i1* %cpsr_c.global-to-local, align 1
  %v6_e94c = lshr i32 %v3_e948, %v1_e94c
  store i32 %v6_e94c, i32* %r3.global-to-local, align 4
  %v1_e950 = urem i32 %v6_e94c, 2
  %v2_e950 = icmp eq i32 %v1_e950, 0
  store i1 %v2_e950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e950, label %dec_label_pc_ea68, label %dec_label_pc_e958.preheader

dec_label_pc_e958.preheader:                      ; preds = %dec_label_pc_e940
  %v0_e958149 = load i32, i32* @r6, align 4
  %v1_e958150 = add i32 %v0_e958149, 12
  %v2_e958151 = inttoptr i32 %v1_e958150 to i32*
  %v3_e958152 = load i32, i32* %v2_e958151, align 4
  store i32 %v3_e958152, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e95c148154 = icmp eq i32 %v3_e958152, 0
  store i1 %v2_e95c148154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e95c148154, label %dec_label_pc_ea68, label %dec_label_pc_e964.lr.ph

dec_label_pc_e958.loopexit:                       ; preds = %dec_label_pc_f360, %dec_label_pc_f17c, %dec_label_pc_f104, %dec_label_pc_f6b4
  %v0_e958 = load i32, i32* @r6, align 4
  %v1_e958 = add i32 %v0_e958, 12
  %v2_e958 = inttoptr i32 %v1_e958 to i32*
  %v3_e958 = load i32, i32* %v2_e958, align 4
  store i32 %v3_e958, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e95c148 = icmp eq i32 %v3_e958, 0
  store i1 %v2_e95c148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e95c148, label %dec_label_pc_ea68, label %dec_label_pc_e964.lr.ph

dec_label_pc_e964.lr.ph:                          ; preds = %dec_label_pc_e958.preheader, %dec_label_pc_e958.loopexit
  %v0_e964180 = phi i32 [ %v0_e958, %dec_label_pc_e958.loopexit ], [ %v0_e958149, %dec_label_pc_e958.preheader ]
  br label %dec_label_pc_e964

dec_label_pc_e95cthread-pre-split.thread:         ; preds = %dec_label_pc_eb20, %dec_label_pc_ebf4, %dec_label_pc_ede8, %dec_label_pc_eebc, %dec_label_pc_ef90
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e964

dec_label_pc_e95cthread-pre-split.thread512:      ; preds = %dec_label_pc_eff4, %dec_label_pc_ee4c, %dec_label_pc_ed78, %dec_label_pc_ef20, %dec_label_pc_eb84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e964

dec_label_pc_e95cthread-pre-split:                ; preds = %dec_label_pc_e9dc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e95c = icmp eq i32 %v3_e9dc, 0
  store i1 %v2_e95c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e95c, label %dec_label_pc_ea68, label %dec_label_pc_e964

dec_label_pc_e964:                                ; preds = %dec_label_pc_e95cthread-pre-split.thread, %dec_label_pc_e95cthread-pre-split, %dec_label_pc_e95cthread-pre-split.thread512, %dec_label_pc_e964.lr.ph
  %v0_f450 = phi i32 [ %v0_e964180, %dec_label_pc_e964.lr.ph ], [ %v0_e9dc, %dec_label_pc_e95cthread-pre-split.thread512 ], [ %v0_e9dc, %dec_label_pc_e95cthread-pre-split ], [ %v0_e9dc, %dec_label_pc_e95cthread-pre-split.thread ]
  %v1_e964 = add i32 %v0_f450, 24
  %v2_e964 = inttoptr i32 %v1_e964 to i32*
  %v3_e964 = load i32, i32* %v2_e964, align 4
  store i32 %v3_e964, i32* @r3, align 4
  %v2_e968 = icmp ugt i32 %v3_e964, 255
  store i1 %v2_e968, i1* %cpsr_c.global-to-local, align 1
  %v7_e968 = icmp eq i32 %v3_e964, 256
  store i1 %v7_e968, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_f450, 28
  store i32 %.pre, i32* @fp, align 4
  br i1 %v7_e968, label %dec_label_pc_f450, label %dec_label_pc_e974

dec_label_pc_e974:                                ; preds = %dec_label_pc_e964, %dec_label_pc_f450
  store i32 %stack_var_-1876.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_e97c, align 4
  %v0_e980 = load i32, i32* @r6, align 4
  %v1_e980 = add i32 %v0_e980, 24
  %v2_e980 = inttoptr i32 %v1_e980 to i32*
  %v3_e980 = load i32, i32* %v2_e980, align 4
  store i32 %v3_e980, i32* %r2.global-to-local, align 4
  %v0_e984 = load i32, i32* @fp, align 4
  %v2_e984 = add i32 %v0_e984, %v3_e980
  store i32 %v2_e984, i32* @r4, align 4
  %v1_e988 = add i32 %v0_e980, 4
  %v2_e988 = inttoptr i32 %v1_e988 to i32*
  %v3_e988 = load i32, i32* %v2_e988, align 4
  store i32 %v3_e988, i32* %r0.global-to-local, align 4
  %v1_e98c = sub i32 256, %v3_e980
  store i32 %v1_e98c, i32* %r2.global-to-local, align 4
  store i32 %v2_e984, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e998 = call i32 @function_10d00(i32 %v3_e988, i32 %v2_e984, i32 %v1_e98c, i32 16384)
  store i32 %v4_e998, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e99c = icmp eq i32 %v4_e998, 0
  store i1 %v2_e99c, i1* %cpsr_z.global-to-local, align 1
  %tmp376 = icmp slt i32 %v4_e998, 1
  br i1 %tmp376, label %dec_label_pc_ea14, label %dec_label_pc_e9a4

dec_label_pc_e9a4:                                ; preds = %dec_label_pc_e974
  %v0_e9a4 = load i32, i32* @r5, align 4
  store i32 %v0_e9a4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e9a8

dec_label_pc_e9a8:                                ; preds = %.thread62, %dec_label_pc_e9a4
  %v3_e9b4 = phi i32 [ %v1_e9b8, %.thread62 ], [ %v0_e9a4, %dec_label_pc_e9a4 ]
  %v1_e9a8 = load i32, i32* @r4, align 4
  %v2_e9a8 = add i32 %v1_e9a8, %v3_e9b4
  %v3_e9a8 = inttoptr i32 %v2_e9a8 to i8*
  %v4_e9a8 = load i8, i8* %v3_e9a8, align 1
  %v6_e9a8 = zext i8 %v4_e9a8 to i32
  store i32 %v6_e9a8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9ac = icmp eq i8 %v4_e9a8, 0
  store i1 %v2_e9ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9ac, label %bb377, label %.thread62

bb377:                                            ; preds = %dec_label_pc_e9a8
  %v2_e9b0 = add nuw nsw i32 %v6_e9a8, 65
  store i32 %v2_e9b0, i32* %r3.global-to-local, align 4
  %v2_e9b4 = trunc i32 %v2_e9b0 to i8
  store i8 %v2_e9b4, i8* %v3_e9a8, align 1
  %v0_e9b8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread62

.thread62:                                        ; preds = %dec_label_pc_e9a8, %bb377
  %v0_e9b8 = phi i32 [ %v3_e9b4, %dec_label_pc_e9a8 ], [ %v0_e9b8.pre, %bb377 ]
  %v1_e9b8 = add i32 %v0_e9b8, 1
  store i32 %v1_e9b8, i32* %r2.global-to-local, align 4
  %v3_e9bc = icmp uge i32 %v1_e9b8, %v4_e998
  store i1 %v3_e9bc, i1* %cpsr_c.global-to-local, align 1
  %v9_e9bc = icmp eq i32 %v1_e9b8, %v4_e998
  store i1 %v9_e9bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e9bc, label %dec_label_pc_e9c4, label %dec_label_pc_e9a8

dec_label_pc_e9c4:                                ; preds = %.thread62, %dec_label_pc_ea18
  store i32 ptrtoint (i32* @global_var_1e2a8.115 to i32), i32* @ip, align 4
  %v0_e9c8 = load i32, i32* @r6, align 4
  %v1_e9c8 = add i32 %v0_e9c8, 24
  %v2_e9c8 = inttoptr i32 %v1_e9c8 to i32*
  %v3_e9c8 = load i32, i32* %v2_e9c8, align 4
  %v2_e9cc = load i32, i32* @global_var_1e2a8.115, align 4
  store i32 %v2_e9cc, i32* %r2.global-to-local, align 4
  %v2_e9d0 = add i32 %v3_e9c8, %v4_e998
  store i32 %v2_e9d0, i32* %r3.global-to-local, align 4
  store i32 %v2_e9d0, i32* %v2_e9c8, align 4
  %v0_e9d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e9d8 = load i32, i32* @r6, align 4
  %v2_e9d8 = add i32 %v1_e9d8, 8
  %v3_e9d8 = inttoptr i32 %v2_e9d8 to i32*
  store i32 %v0_e9d8, i32* %v3_e9d8, align 4
  br label %dec_label_pc_e9dc

dec_label_pc_e9dc:                                ; preds = %dec_label_pc_eaf8, %dec_label_pc_e9c4
  %v0_e9dc = load i32, i32* @r6, align 4
  %v1_e9dc = add i32 %v0_e9dc, 12
  %v2_e9dc = inttoptr i32 %v1_e9dc to i32*
  %v3_e9dc = load i32, i32* %v2_e9dc, align 4
  store i32 %v3_e9dc, i32* %r0.global-to-local, align 4
  %v1_e9e0 = add i32 %v3_e9dc, -2
  store i32 %v1_e9e0, i32* @r3, align 4
  %v7_e9e4 = icmp eq i32 %v1_e9e0, 8
  store i1 %v7_e9e4, i1* %cpsr_z.global-to-local, align 1
  %v5_e9e8 = and i32 %v1_e9e0, 1073741824
  %v6_e9e8 = icmp ne i32 %v5_e9e8, 0
  store i1 %v6_e9e8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_e9dc, label %dec_label_pc_e95cthread-pre-split [
    i32 2, label %dec_label_pc_f1a4
    i32 3, label %dec_label_pc_f064
    i32 4, label %dec_label_pc_f110
    i32 5, label %dec_label_pc_ef90
    i32 6, label %dec_label_pc_ede8
    i32 7, label %dec_label_pc_ebf4
    i32 8, label %dec_label_pc_eebc
    i32 9, label %dec_label_pc_eb20
    i32 10, label %dec_label_pc_ea80
  ]

dec_label_pc_ea14:                                ; preds = %dec_label_pc_e974
  br i1 %v2_e99c, label %dec_label_pc_f708, label %dec_label_pc_ea18

dec_label_pc_ea18:                                ; preds = %dec_label_pc_ea14
  %v3_ea18 = icmp eq i32 %v4_e998, -1
  store i1 %v3_ea18, i1* %cpsr_c.global-to-local, align 1
  %v8_ea18 = icmp eq i32 %v4_e998, -1
  store i1 %v8_ea18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ea18, label %dec_label_pc_ea20, label %dec_label_pc_e9c4

dec_label_pc_ea20:                                ; preds = %dec_label_pc_ea18
  store i32 %stack_var_-1876.0, i32* %r2.global-to-local, align 4
  %v2_ea24 = load i32, i32* %v2_e97c, align 4
  store i32 %v2_ea24, i32* %r3.global-to-local, align 4
  %v2_ea28 = icmp ugt i32 %v2_ea24, 10
  store i1 %v2_ea28, i1* %cpsr_c.global-to-local, align 1
  %v7_ea28 = icmp eq i32 %v2_ea24, 11
  store i1 %v7_ea28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea28, label %dec_label_pc_ea68, label %dec_label_pc_ea30

dec_label_pc_ea30:                                ; preds = %dec_label_pc_ea20, %dec_label_pc_f708
  %v0_ea30 = load i32, i32* @r6, align 4
  %v1_ea30 = add i32 %v0_ea30, 4
  %v2_ea30 = inttoptr i32 %v1_ea30 to i32*
  %v3_ea30 = load i32, i32* %v2_ea30, align 4
  store i32 %v3_ea30, i32* %r0.global-to-local, align 4
  %v1_ea34 = call i32 @function_10644(i32 %v3_ea30)
  store i32 %v1_ea34, i32* %r0.global-to-local, align 4
  %v0_ea38 = load i32, i32* @r6, align 4
  %v1_ea38 = add i32 %v0_ea38, 284
  %v2_ea38 = inttoptr i32 %v1_ea38 to i8*
  %v3_ea38 = load i8, i8* %v2_ea38, align 1
  %v4_ea38 = zext i8 %v3_ea38 to i32
  %v1_ea3c = add nuw nsw i32 %v4_ea38, 1
  %v1_ea40 = urem i32 %v1_ea3c, 256
  store i32 %v1_ea40, i32* %r3.global-to-local, align 4
  %v2_ea44 = icmp ugt i32 %v1_ea40, 8
  store i1 %v2_ea44, i1* %cpsr_c.global-to-local, align 1
  %v7_ea44 = icmp eq i32 %v1_ea40, 9
  store i1 %v7_ea44, i1* %cpsr_z.global-to-local, align 1
  %v1_ea48 = trunc i32 %v1_ea3c to i8
  store i8 %v1_ea48, i8* %v2_ea38, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_ea50 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_ea50 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_ea50 = xor i1 %v1_ea50, true
  %v3_ea50 = and i1 %v0_ea50, %v2_ea50
  br i1 %v3_ea50, label %bb378, label %.thread281

.thread281:                                       ; preds = %dec_label_pc_ea30
  %v1_ea54277282 = load i32, i32* @r6, align 4
  %v2_ea54278283 = add i32 %v1_ea54277282, 4
  %v3_ea54279284 = inttoptr i32 %v2_ea54278283 to i32*
  store i32 -1, i32* %v3_ea54279284, align 4
  br label %bb379

bb378:                                            ; preds = %dec_label_pc_ea30
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ea54273 = load i32, i32* @r6, align 4
  %v2_ea54274 = add i32 %v1_ea54273, 4
  %v3_ea54275 = inttoptr i32 %v2_ea54274 to i32*
  store i32 -1, i32* %v3_ea54275, align 4
  %v4_ea58 = load i32, i32* %r3.global-to-local, align 4
  %v5_ea58 = load i32, i32* @r6, align 4
  %v6_ea58 = add i32 %v5_ea58, 12
  %v7_ea58 = inttoptr i32 %v6_ea58 to i32*
  store i32 %v4_ea58, i32* %v7_ea58, align 4
  %v4_ea5c = load i32, i32* %r3.global-to-local, align 4
  %v5_ea5c = trunc i32 %v4_ea5c to i8
  %v6_ea5c = load i32, i32* @r6, align 4
  %v7_ea5c = add i32 %v6_ea5c, 284
  %v8_ea5c = inttoptr i32 %v7_ea5c to i8*
  store i8 %v5_ea5c, i8* %v8_ea5c, align 1
  %v0_ea60.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ea60.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb379

bb379:                                            ; preds = %.thread281, %bb378
  %v1_ea64 = phi i1 [ %v1_ea60.pre, %bb378 ], [ %v0_ea50, %.thread281 ]
  %v0_ea64 = phi i1 [ %v0_ea60.pre, %bb378 ], [ %v1_ea50, %.thread281 ]
  %v2_ea60 = xor i1 %v1_ea64, true
  %v3_ea60 = or i1 %v0_ea64, %v2_ea60
  br i1 %v3_ea60, label %bb380, label %bb381

bb380:                                            ; preds = %bb379
  %v4_ea60 = load i32, i32* @r6, align 4
  store i32 %v4_ea60, i32* %r0.global-to-local, align 4
  br label %bb381

bb381:                                            ; preds = %bb379, %bb380
  store i32 60008, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_ea60, i32 ptrtoint (i32* @global_var_da7c.258 to i32))
  br label %dec_label_pc_ea68

dec_label_pc_ea68:                                ; preds = %dec_label_pc_e958.loopexit, %dec_label_pc_e95cthread-pre-split, %dec_label_pc_e958.preheader, %dec_label_pc_ea20, %dec_label_pc_e940, %dec_label_pc_e8f8, %dec_label_pc_f570, %bb381
  %v3_ea68 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ea68, i32* %r3.global-to-local, align 4
  %v1_ea6c = add i32 %v3_ea68, 1
  store i32 %v1_ea6c, i32* @r4, align 4
  %v2_ea70 = icmp ugt i32 %v1_ea6c, 254
  store i1 %v2_ea70, i1* %cpsr_c.global-to-local, align 1
  %v7_ea70 = icmp eq i32 %v1_ea6c, 255
  store i1 %v7_ea70, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ea6c, i32* %stack_var_-52, align 4
  %v7_ea78 = icmp slt i32 %v1_ea6c, 256
  br i1 %v7_ea78, label %dec_label_pc_e8f8, label %dec_label_pc_e314

dec_label_pc_ea80:                                ; preds = %dec_label_pc_e9dc
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_ea84 = call i32 @function_f7dc(i32 22)
  store i32 %v2_f01c, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_ea94 = call i32 @function_f718(i32 22, i32* nonnull %stack_var_-60)
  %v3_ea98 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ea94, i32* %r2.global-to-local, align 4
  %v1_eaa0 = add i32 %v3_ea98, -1
  store i32 %v1_eaa0, i32* %r3.global-to-local, align 4
  %v0_eaa4 = load i32, i32* @fp, align 4
  store i32 %v0_eaa4, i32* %r0.global-to-local, align 4
  %v0_eaa8 = load i32, i32* @r6, align 4
  %v1_eaa8 = add i32 %v0_eaa8, 24
  %v2_eaa8 = inttoptr i32 %v1_eaa8 to i32*
  %v3_eaa8 = load i32, i32* %v2_eaa8, align 4
  store i32 %v3_eaa8, i32* %r1.global-to-local, align 4
  %v4_eaac = call i32 @function_fcf0(i32 %v0_eaa4, i32 %v3_eaa8, i32 %v3_ea94, i32 %v1_eaa0)
  %v2_eab0 = icmp eq i32 %v4_eaac, -1
  store i1 %v2_eab0, i1* %cpsr_c.global-to-local, align 1
  %v7_eab0 = icmp eq i32 %v4_eaac, -1
  store i1 %v7_eab0, i1* %cpsr_z.global-to-local, align 1
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_f364 = call i32 @function_f73c(i32 22)
  br i1 %v7_eab0, label %dec_label_pc_f360, label %dec_label_pc_eab8

dec_label_pc_eab8:                                ; preds = %dec_label_pc_ea80
  store i32 %v1_f364, i32* %r0.global-to-local, align 4
  %v0_eac0 = load i32, i32* @r6, align 4
  %v1_eac0 = add i32 %v0_eac0, 4
  %v2_eac0 = inttoptr i32 %v1_eac0 to i32*
  %v3_eac0 = load i32, i32* %v2_eac0, align 4
  store i32 %v3_eac0, i32* %r0.global-to-local, align 4
  %v1_eac4 = call i32 @function_10644(i32 %v3_eac0)
  store i32 %v1_eac4, i32* %r0.global-to-local, align 4
  %v0_eac8 = load i32, i32* @r6, align 4
  %v1_eac8 = add i32 %v0_eac8, 284
  %v2_eac8 = inttoptr i32 %v1_eac8 to i8*
  %v3_eac8 = load i8, i8* %v2_eac8, align 1
  %v4_eac8 = zext i8 %v3_eac8 to i32
  %v1_eacc = add nuw nsw i32 %v4_eac8, 1
  %v1_ead0 = urem i32 %v1_eacc, 256
  store i32 %v1_ead0, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ead8 = icmp ugt i32 %v1_ead0, 9
  store i1 %v2_ead8, i1* %cpsr_c.global-to-local, align 1
  %v7_ead8 = icmp eq i32 %v1_ead0, 10
  store i1 %v7_ead8, i1* %cpsr_z.global-to-local, align 1
  %v2_eadc = add i32 %v0_eac8, 4
  %v3_eadc = inttoptr i32 %v2_eadc to i32*
  store i32 -1, i32* %v3_eadc, align 4
  %v0_eae0 = load i32, i32* @r3, align 4
  %v1_eae0 = trunc i32 %v0_eae0 to i8
  %v2_eae0 = load i32, i32* @r6, align 4
  %v3_eae0 = add i32 %v2_eae0, 284
  %v4_eae0 = inttoptr i32 %v3_eae0 to i8*
  store i8 %v1_eae0, i8* %v4_eae0, align 1
  %v0_eae4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eae4, label %dec_label_pc_eae8, label %dec_label_pc_f498

dec_label_pc_eae8:                                ; preds = %dec_label_pc_eab8
  store i32 0, i32* @r3, align 4
  %v1_eaec = load i32, i32* @r6, align 4
  %v2_eaec = add i32 %v1_eaec, 12
  %v3_eaec = inttoptr i32 %v2_eaec to i32*
  store i32 0, i32* %v3_eaec, align 4
  %v0_eaf0 = load i32, i32* @r3, align 4
  %v1_eaf0 = trunc i32 %v0_eaf0 to i8
  %v2_eaf0 = load i32, i32* @r6, align 4
  %v3_eaf0 = add i32 %v2_eaf0, 284
  %v4_eaf0 = inttoptr i32 %v3_eaf0 to i8*
  store i8 %v1_eaf0, i8* %v4_eaf0, align 1
  br label %dec_label_pc_eaf4

dec_label_pc_eaf4:                                ; preds = %dec_label_pc_f498, %dec_label_pc_eae8
  store i32 -1, i32* @r8, align 4
  br label %dec_label_pc_eaf8

dec_label_pc_eaf8:                                ; preds = %dec_label_pc_f104, %dec_label_pc_f00c, %dec_label_pc_ef38, %dec_label_pc_ee64, %dec_label_pc_ed90, %dec_label_pc_eb9c, %dec_label_pc_eaf4
  %v0_eaf8 = load i32, i32* @r6, align 4
  %v1_eaf8 = add i32 %v0_eaf8, 24
  %v2_eaf8 = inttoptr i32 %v1_eaf8 to i32*
  %v3_eaf8 = load i32, i32* %v2_eaf8, align 4
  %v0_eafc = load i32, i32* @r8, align 4
  %v2_eafc = sub i32 %v0_eafc, %v3_eaf8
  %v3_eafc = icmp uge i32 %v0_eafc, %v3_eaf8
  store i1 %v3_eafc, i1* %cpsr_c.global-to-local, align 1
  %v4_eafc = xor i32 %v0_eafc, %v3_eaf8
  %v5_eafc = xor i32 %v2_eafc, %v0_eafc
  %v6_eafc = and i32 %v5_eafc, %v4_eafc
  %v7_eafc = icmp slt i32 %v6_eafc, 0
  %v8_eafc = icmp slt i32 %v2_eafc, 0
  %v9_eafc = icmp eq i32 %v0_eafc, %v3_eaf8
  store i1 %v9_eafc, i1* %cpsr_z.global-to-local, align 1
  %v2_eb00 = xor i1 %v8_eafc, %v7_eafc
  %v0_eafc.v3_eaf8 = select i1 %v2_eb00, i32 %v0_eafc, i32 %v3_eaf8
  store i32 %v0_eafc.v3_eaf8, i32* %r1.global-to-local, align 4
  %v2_eb08 = sub i32 %v3_eaf8, %v0_eafc.v3_eaf8
  store i32 %v2_eb08, i32* @r2, align 4
  store i32 %v2_eb08, i32* %v2_eaf8, align 4
  %v0_eb10 = load i32, i32* @fp, align 4
  %v1_eb10 = load i32, i32* %r1.global-to-local, align 4
  %v2_eb10 = add i32 %v1_eb10, %v0_eb10
  store i32 %v2_eb10, i32* @r1, align 4
  store i32 %v0_eb10, i32* @r0, align 4
  %v3_eb18 = call i32 @function_10b60(i32 %v0_eb10, i32 %v2_eb10, i32 %v2_eb08)
  store i32 %v3_eb18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e9dc

dec_label_pc_eb20:                                ; preds = %dec_label_pc_e9dc
  %v1_eb20 = add i32 %v0_e9dc, 24
  %v2_eb20 = inttoptr i32 %v1_eb20 to i32*
  %v3_eb20 = load i32, i32* %v2_eb20, align 4
  store i32 %v3_eb20, i32* %r2.global-to-local, align 4
  %v1_eb24 = add i32 %v3_eb20, -1
  store i32 %v1_eb24, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb28 = icmp eq i32 %v1_eb24, 0
  store i1 %v2_eb28, i1* %cpsr_z.global-to-local, align 1
  %tmp384 = icmp slt i32 %v1_eb24, 1
  br i1 %tmp384, label %dec_label_pc_e95cthread-pre-split.thread, label %dec_label_pc_eb30

dec_label_pc_eb30:                                ; preds = %dec_label_pc_eb20
  %v2_eb30 = add i32 %v1_eb24, %v0_e9dc
  store i32 %v2_eb30, i32* %r3.global-to-local, align 4
  %v1_eb34 = add i32 %v2_eb30, 28
  %v2_eb34 = inttoptr i32 %v1_eb34 to i8*
  %v3_eb34 = load i8, i8* %v2_eb34, align 1
  %v4_eb34 = zext i8 %v3_eb34 to i32
  store i32 %v4_eb34, i32* %r3.global-to-local, align 4
  %v2_eb38 = icmp ugt i8 %v3_eb34, 61
  store i1 %v2_eb38, i1* %cpsr_c.global-to-local, align 1
  %v7_eb38 = icmp eq i8 %v3_eb34, 62
  store i1 %v7_eb38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb38, label %dec_label_pc_eb9c, label %bb385

bb385:                                            ; preds = %dec_label_pc_eb30
  %v3_eb3c = icmp ugt i8 %v3_eb34, 57
  store i1 %v3_eb3c, i1* %cpsr_c.global-to-local, align 1
  %v8_eb3c = icmp eq i8 %v3_eb34, 58
  store i1 %v8_eb3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eb3c, label %dec_label_pc_eb9c, label %dec_label_pc_eb44

dec_label_pc_eb44:                                ; preds = %bb385
  %v2_eb44 = icmp ugt i8 %v3_eb34, 35
  store i1 %v2_eb44, i1* %cpsr_c.global-to-local, align 1
  %v7_eb44 = icmp eq i8 %v3_eb34, 36
  store i1 %v7_eb44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb44, label %dec_label_pc_eb9c, label %dec_label_pc_eb4c

dec_label_pc_eb4c:                                ; preds = %dec_label_pc_eb44
  %v2_eb4c = icmp ugt i8 %v3_eb34, 34
  store i1 %v2_eb4c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb4c = icmp eq i8 %v3_eb34, 35
  store i1 %v7_eb4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb4c, label %dec_label_pc_eb9c, label %dec_label_pc_eb54

dec_label_pc_eb54:                                ; preds = %dec_label_pc_eb4c
  %v2_eb54 = icmp ugt i8 %v3_eb34, 36
  store i1 %v2_eb54, i1* %cpsr_c.global-to-local, align 1
  %v7_eb54 = icmp eq i8 %v3_eb34, 37
  store i1 %v7_eb54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb54, label %dec_label_pc_eb9c, label %dec_label_pc_eb84.preheader

dec_label_pc_eb84.preheader:                      ; preds = %dec_label_pc_eb54
  %v3_eb58 = add i32 %v0_e9dc, 28
  %v2_eb5c = add i32 %v3_eb58, %v3_eb20
  store i32 %v2_eb5c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eb84

dec_label_pc_eb68:                                ; preds = %bb386
  %v2_eb68 = icmp ugt i8 %v3_eb8c, 35
  store i1 %v2_eb68, i1* %cpsr_c.global-to-local, align 1
  %v7_eb68 = icmp eq i8 %v3_eb8c, 36
  store i1 %v7_eb68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb68, label %dec_label_pc_eb9c, label %dec_label_pc_eb70

dec_label_pc_eb70:                                ; preds = %dec_label_pc_eb68
  %v2_eb70 = icmp ugt i8 %v3_eb8c, 34
  store i1 %v2_eb70, i1* %cpsr_c.global-to-local, align 1
  %v7_eb70 = icmp eq i8 %v3_eb8c, 35
  store i1 %v7_eb70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb70, label %dec_label_pc_eb9c, label %dec_label_pc_eb78

dec_label_pc_eb78:                                ; preds = %dec_label_pc_eb70
  %v2_eb78 = icmp ugt i8 %v3_eb8c, 36
  store i1 %v2_eb78, i1* %cpsr_c.global-to-local, align 1
  %v7_eb78 = icmp eq i8 %v3_eb8c, 37
  store i1 %v7_eb78, i1* %cpsr_z.global-to-local, align 1
  %v1_eb7c = add i32 %v0_eb7c, -1
  store i32 %v1_eb7c, i32* %r3.global-to-local, align 4
  br i1 %v7_eb78, label %dec_label_pc_eb9c, label %dec_label_pc_eb84

dec_label_pc_eb84:                                ; preds = %dec_label_pc_eb84.preheader, %dec_label_pc_eb78
  %v0_eb7c = phi i32 [ %v2_eb5c, %dec_label_pc_eb84.preheader ], [ %v1_eb7c, %dec_label_pc_eb78 ]
  %v0_eb84 = phi i32 [ %v1_eb24, %dec_label_pc_eb84.preheader ], [ %v1_eb84, %dec_label_pc_eb78 ]
  %v1_eb84 = add i32 %v0_eb84, -1
  store i32 %v1_eb84, i32* %r1.global-to-local, align 4
  %v2_eb84 = icmp ne i32 %v0_eb84, 0
  store i1 %v2_eb84, i1* %cpsr_c.global-to-local, align 1
  %v7_eb84 = icmp eq i32 %v0_eb84, 1
  store i1 %v7_eb84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb84, label %dec_label_pc_e95cthread-pre-split.thread512, label %dec_label_pc_eb8c

dec_label_pc_eb8c:                                ; preds = %dec_label_pc_eb84
  %v1_eb8c = add i32 %v0_eb7c, -2
  %v2_eb8c = inttoptr i32 %v1_eb8c to i8*
  %v3_eb8c = load i8, i8* %v2_eb8c, align 1
  %v4_eb8c = zext i8 %v3_eb8c to i32
  store i32 %v4_eb8c, i32* %r2.global-to-local, align 4
  %v2_eb90 = icmp ugt i8 %v3_eb8c, 61
  store i1 %v2_eb90, i1* %cpsr_c.global-to-local, align 1
  %v7_eb90 = icmp eq i8 %v3_eb8c, 62
  store i1 %v7_eb90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb90, label %dec_label_pc_eb9c, label %bb386

bb386:                                            ; preds = %dec_label_pc_eb8c
  %v3_eb94 = icmp ugt i8 %v3_eb8c, 57
  store i1 %v3_eb94, i1* %cpsr_c.global-to-local, align 1
  %v8_eb94 = icmp eq i8 %v3_eb8c, 58
  store i1 %v8_eb94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eb94, label %dec_label_pc_eb9c, label %dec_label_pc_eb68

dec_label_pc_eb9c:                                ; preds = %dec_label_pc_eb8c, %bb386, %dec_label_pc_eb78, %dec_label_pc_eb70, %dec_label_pc_eb68, %dec_label_pc_eb54, %dec_label_pc_eb30, %dec_label_pc_eb4c, %dec_label_pc_eb44, %bb385
  %v0_eba0 = phi i32 [ %v1_eb24, %dec_label_pc_eb54 ], [ %v1_eb24, %dec_label_pc_eb30 ], [ %v1_eb24, %dec_label_pc_eb4c ], [ %v1_eb24, %dec_label_pc_eb44 ], [ %v1_eb24, %bb385 ], [ %v1_eb84, %dec_label_pc_eb68 ], [ %v1_eb84, %dec_label_pc_eb70 ], [ %v1_eb84, %dec_label_pc_eb78 ], [ %v1_eb84, %bb386 ], [ %v1_eb84, %dec_label_pc_eb8c ]
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_eba0 = add i32 %v0_eba0, 1
  store i32 %v1_eba0, i32* @r8, align 4
  %v1_eba4 = call i32 @function_f7dc(i32 19)
  store i32 %v2_f01c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v3_ebb4 = call i32 @function_f718(i32 19, i32* nonnull %stack_var_-60)
  store i32 %v3_ebb4, i32* %r0.global-to-local, align 4
  %v3_ebb8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ebb8, i32* %r2.global-to-local, align 4
  store i32 %v3_ebb4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ebc4 = load i32, i32* @r6, align 4
  %v1_ebc4 = add i32 %v0_ebc4, 4
  %v2_ebc4 = inttoptr i32 %v1_ebc4 to i32*
  %v3_ebc4 = load i32, i32* %v2_ebc4, align 4
  store i32 %v3_ebc4, i32* %r0.global-to-local, align 4
  %v4_ebc8 = call i32 @function_10d74(i32 %v3_ebc4, i32 %v3_ebb4, i32 %v3_ebb8, i32 16384)
  store i32 %v4_ebc8, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ebd8 = load i32, i32* @r6, align 4
  %v1_ebd8 = add i32 %v0_ebd8, 4
  %v2_ebd8 = inttoptr i32 %v1_ebd8 to i32*
  %v3_ebd8 = load i32, i32* %v2_ebd8, align 4
  store i32 %v3_ebd8, i32* %r0.global-to-local, align 4
  %v4_ebdc = call i32 @function_10d74(i32 %v3_ebd8, i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32 2, i32 16384)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_ebe4 = call i32 @function_f73c(i32 19)
  store i32 %v1_ebe4, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_ebec = load i32, i32* @r6, align 4
  %v2_ebec = add i32 %v1_ebec, 12
  %v3_ebec = inttoptr i32 %v2_ebec to i32*
  store i32 10, i32* %v3_ebec, align 4
  br label %dec_label_pc_eaf8

dec_label_pc_ebf4:                                ; preds = %dec_label_pc_e9dc
  %v1_ebf4 = add i32 %v0_e9dc, 24
  %v2_ebf4 = inttoptr i32 %v1_ebf4 to i32*
  %v3_ebf4 = load i32, i32* %v2_ebf4, align 4
  store i32 %v3_ebf4, i32* %r2.global-to-local, align 4
  %v1_ebf8 = add i32 %v3_ebf4, -1
  store i32 %v1_ebf8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebfc = icmp eq i32 %v1_ebf8, 0
  store i1 %v2_ebfc, i1* %cpsr_z.global-to-local, align 1
  %tmp387 = icmp slt i32 %v1_ebf8, 1
  br i1 %tmp387, label %dec_label_pc_e95cthread-pre-split.thread, label %dec_label_pc_ec04

dec_label_pc_ec04:                                ; preds = %dec_label_pc_ebf4
  %v2_ec04 = add i32 %v1_ebf8, %v0_e9dc
  store i32 %v2_ec04, i32* %r3.global-to-local, align 4
  %v1_ec08 = add i32 %v2_ec04, 28
  %v2_ec08 = inttoptr i32 %v1_ec08 to i8*
  %v3_ec08 = load i8, i8* %v2_ec08, align 1
  %v4_ec08 = zext i8 %v3_ec08 to i32
  store i32 %v4_ec08, i32* %r3.global-to-local, align 4
  %v2_ec0c = icmp ugt i8 %v3_ec08, 61
  store i1 %v2_ec0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ec0c = icmp eq i8 %v3_ec08, 62
  store i1 %v7_ec0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec0c, label %dec_label_pc_ed90, label %bb388

bb388:                                            ; preds = %dec_label_pc_ec04
  %v3_ec10 = icmp ugt i8 %v3_ec08, 57
  store i1 %v3_ec10, i1* %cpsr_c.global-to-local, align 1
  %v8_ec10 = icmp eq i8 %v3_ec08, 58
  store i1 %v8_ec10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ec10, label %dec_label_pc_ed90, label %dec_label_pc_ec18

dec_label_pc_ec18:                                ; preds = %bb388
  %v2_ec18 = icmp ugt i8 %v3_ec08, 35
  store i1 %v2_ec18, i1* %cpsr_c.global-to-local, align 1
  %v7_ec18 = icmp eq i8 %v3_ec08, 36
  store i1 %v7_ec18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec18, label %dec_label_pc_ed90, label %dec_label_pc_ec20

dec_label_pc_ec20:                                ; preds = %dec_label_pc_ec18
  %v2_ec20 = icmp ugt i8 %v3_ec08, 34
  store i1 %v2_ec20, i1* %cpsr_c.global-to-local, align 1
  %v7_ec20 = icmp eq i8 %v3_ec08, 35
  store i1 %v7_ec20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec20, label %dec_label_pc_ed90, label %dec_label_pc_ec28

dec_label_pc_ec28:                                ; preds = %dec_label_pc_ec20
  %v2_ec28 = icmp ugt i8 %v3_ec08, 36
  store i1 %v2_ec28, i1* %cpsr_c.global-to-local, align 1
  %v7_ec28 = icmp eq i8 %v3_ec08, 37
  store i1 %v7_ec28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec28, label %dec_label_pc_ed90, label %dec_label_pc_ed78.preheader

dec_label_pc_ed78.preheader:                      ; preds = %dec_label_pc_ec28
  %v3_ec2c = add i32 %v0_e9dc, 28
  %v2_ec30 = add i32 %v3_ec2c, %v3_ebf4
  store i32 %v2_ec30, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ed78

dec_label_pc_ed5c:                                ; preds = %bb389
  %v2_ed5c = icmp ugt i8 %v3_ed80, 35
  store i1 %v2_ed5c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed5c = icmp eq i8 %v3_ed80, 36
  store i1 %v7_ed5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed5c, label %dec_label_pc_ed90, label %dec_label_pc_ed64

dec_label_pc_ed64:                                ; preds = %dec_label_pc_ed5c
  %v2_ed64 = icmp ugt i8 %v3_ed80, 34
  store i1 %v2_ed64, i1* %cpsr_c.global-to-local, align 1
  %v7_ed64 = icmp eq i8 %v3_ed80, 35
  store i1 %v7_ed64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed64, label %dec_label_pc_ed90, label %dec_label_pc_ed6c

dec_label_pc_ed6c:                                ; preds = %dec_label_pc_ed64
  %v2_ed6c = icmp ugt i8 %v3_ed80, 36
  store i1 %v2_ed6c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed6c = icmp eq i8 %v3_ed80, 37
  store i1 %v7_ed6c, i1* %cpsr_z.global-to-local, align 1
  %v1_ed70 = add i32 %v0_ed70, -1
  store i32 %v1_ed70, i32* %r3.global-to-local, align 4
  br i1 %v7_ed6c, label %dec_label_pc_ed90, label %dec_label_pc_ed78

dec_label_pc_ed78:                                ; preds = %dec_label_pc_ed78.preheader, %dec_label_pc_ed6c
  %v0_ed70 = phi i32 [ %v2_ec30, %dec_label_pc_ed78.preheader ], [ %v1_ed70, %dec_label_pc_ed6c ]
  %v0_ed78 = phi i32 [ %v1_ebf8, %dec_label_pc_ed78.preheader ], [ %v1_ed78, %dec_label_pc_ed6c ]
  %v1_ed78 = add i32 %v0_ed78, -1
  store i32 %v1_ed78, i32* %r1.global-to-local, align 4
  %v2_ed78 = icmp ne i32 %v0_ed78, 0
  store i1 %v2_ed78, i1* %cpsr_c.global-to-local, align 1
  %v7_ed78 = icmp eq i32 %v0_ed78, 1
  store i1 %v7_ed78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed78, label %dec_label_pc_e95cthread-pre-split.thread512, label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %dec_label_pc_ed78
  %v1_ed80 = add i32 %v0_ed70, -2
  %v2_ed80 = inttoptr i32 %v1_ed80 to i8*
  %v3_ed80 = load i8, i8* %v2_ed80, align 1
  %v4_ed80 = zext i8 %v3_ed80 to i32
  store i32 %v4_ed80, i32* %r2.global-to-local, align 4
  %v2_ed84 = icmp ugt i8 %v3_ed80, 61
  store i1 %v2_ed84, i1* %cpsr_c.global-to-local, align 1
  %v7_ed84 = icmp eq i8 %v3_ed80, 62
  store i1 %v7_ed84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed84, label %dec_label_pc_ed90, label %bb389

bb389:                                            ; preds = %dec_label_pc_ed80
  %v3_ed88 = icmp ugt i8 %v3_ed80, 57
  store i1 %v3_ed88, i1* %cpsr_c.global-to-local, align 1
  %v8_ed88 = icmp eq i8 %v3_ed80, 58
  store i1 %v8_ed88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ed88, label %dec_label_pc_ed90, label %dec_label_pc_ed5c

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ed80, %bb389, %dec_label_pc_ed6c, %dec_label_pc_ed64, %dec_label_pc_ed5c, %dec_label_pc_ec28, %dec_label_pc_ec04, %dec_label_pc_ec20, %dec_label_pc_ec18, %bb388
  %v0_ed94 = phi i32 [ %v1_ebf8, %dec_label_pc_ec28 ], [ %v1_ebf8, %dec_label_pc_ec04 ], [ %v1_ebf8, %dec_label_pc_ec20 ], [ %v1_ebf8, %dec_label_pc_ec18 ], [ %v1_ebf8, %bb388 ], [ %v1_ed78, %dec_label_pc_ed5c ], [ %v1_ed78, %dec_label_pc_ed64 ], [ %v1_ed78, %dec_label_pc_ed6c ], [ %v1_ed78, %bb389 ], [ %v1_ed78, %dec_label_pc_ed80 ]
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_ed94 = add i32 %v0_ed94, 1
  store i32 %v1_ed94, i32* @r8, align 4
  %v1_ed98 = call i32 @function_f7dc(i32 16)
  store i32 %v2_f01c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v3_eda8 = call i32 @function_f718(i32 16, i32* nonnull %stack_var_-60)
  store i32 %v3_eda8, i32* %r0.global-to-local, align 4
  %v3_edac = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_edac, i32* %r2.global-to-local, align 4
  store i32 %v3_eda8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_edb8 = load i32, i32* @r6, align 4
  %v1_edb8 = add i32 %v0_edb8, 4
  %v2_edb8 = inttoptr i32 %v1_edb8 to i32*
  %v3_edb8 = load i32, i32* %v2_edb8, align 4
  store i32 %v3_edb8, i32* %r0.global-to-local, align 4
  %v4_edbc = call i32 @function_10d74(i32 %v3_edb8, i32 %v3_eda8, i32 %v3_edac, i32 16384)
  store i32 %v4_edbc, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_edcc = load i32, i32* @r6, align 4
  %v1_edcc = add i32 %v0_edcc, 4
  %v2_edcc = inttoptr i32 %v1_edcc to i32*
  %v3_edcc = load i32, i32* %v2_edcc, align 4
  store i32 %v3_edcc, i32* %r0.global-to-local, align 4
  %v4_edd0 = call i32 @function_10d74(i32 %v3_edcc, i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32 2, i32 16384)
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_edd8 = call i32 @function_f73c(i32 16)
  store i32 %v1_edd8, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_ede0 = load i32, i32* @r6, align 4
  %v2_ede0 = add i32 %v1_ede0, 12
  %v3_ede0 = inttoptr i32 %v2_ede0 to i32*
  store i32 8, i32* %v3_ede0, align 4
  br label %dec_label_pc_eaf8

dec_label_pc_ede8:                                ; preds = %dec_label_pc_e9dc
  %v1_ede8 = add i32 %v0_e9dc, 24
  %v2_ede8 = inttoptr i32 %v1_ede8 to i32*
  %v3_ede8 = load i32, i32* %v2_ede8, align 4
  store i32 %v3_ede8, i32* %r2.global-to-local, align 4
  %v1_edec = add i32 %v3_ede8, -1
  store i32 %v1_edec, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edf0 = icmp eq i32 %v1_edec, 0
  store i1 %v2_edf0, i1* %cpsr_z.global-to-local, align 1
  %tmp390 = icmp slt i32 %v1_edec, 1
  br i1 %tmp390, label %dec_label_pc_e95cthread-pre-split.thread, label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %dec_label_pc_ede8
  %v2_edf8 = add i32 %v1_edec, %v0_e9dc
  store i32 %v2_edf8, i32* %r3.global-to-local, align 4
  %v1_edfc = add i32 %v2_edf8, 28
  %v2_edfc = inttoptr i32 %v1_edfc to i8*
  %v3_edfc = load i8, i8* %v2_edfc, align 1
  %v4_edfc = zext i8 %v3_edfc to i32
  store i32 %v4_edfc, i32* %r3.global-to-local, align 4
  %v2_ee00 = icmp ugt i8 %v3_edfc, 61
  store i1 %v2_ee00, i1* %cpsr_c.global-to-local, align 1
  %v7_ee00 = icmp eq i8 %v3_edfc, 62
  store i1 %v7_ee00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee00, label %dec_label_pc_ee64, label %bb391

bb391:                                            ; preds = %dec_label_pc_edf8
  %v3_ee04 = icmp ugt i8 %v3_edfc, 57
  store i1 %v3_ee04, i1* %cpsr_c.global-to-local, align 1
  %v8_ee04 = icmp eq i8 %v3_edfc, 58
  store i1 %v8_ee04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee04, label %dec_label_pc_ee64, label %dec_label_pc_ee0c

dec_label_pc_ee0c:                                ; preds = %bb391
  %v2_ee0c = icmp ugt i8 %v3_edfc, 35
  store i1 %v2_ee0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee0c = icmp eq i8 %v3_edfc, 36
  store i1 %v7_ee0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee0c, label %dec_label_pc_ee64, label %dec_label_pc_ee14

dec_label_pc_ee14:                                ; preds = %dec_label_pc_ee0c
  %v2_ee14 = icmp ugt i8 %v3_edfc, 34
  store i1 %v2_ee14, i1* %cpsr_c.global-to-local, align 1
  %v7_ee14 = icmp eq i8 %v3_edfc, 35
  store i1 %v7_ee14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee14, label %dec_label_pc_ee64, label %dec_label_pc_ee1c

dec_label_pc_ee1c:                                ; preds = %dec_label_pc_ee14
  %v2_ee1c = icmp ugt i8 %v3_edfc, 36
  store i1 %v2_ee1c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee1c = icmp eq i8 %v3_edfc, 37
  store i1 %v7_ee1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee1c, label %dec_label_pc_ee64, label %dec_label_pc_ee4c.preheader

dec_label_pc_ee4c.preheader:                      ; preds = %dec_label_pc_ee1c
  %v3_ee20 = add i32 %v0_e9dc, 28
  %v2_ee24 = add i32 %v3_ee20, %v3_ede8
  store i32 %v2_ee24, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ee4c

dec_label_pc_ee30:                                ; preds = %bb392
  %v2_ee30 = icmp ugt i8 %v3_ee54, 35
  store i1 %v2_ee30, i1* %cpsr_c.global-to-local, align 1
  %v7_ee30 = icmp eq i8 %v3_ee54, 36
  store i1 %v7_ee30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee30, label %dec_label_pc_ee64, label %dec_label_pc_ee38

dec_label_pc_ee38:                                ; preds = %dec_label_pc_ee30
  %v2_ee38 = icmp ugt i8 %v3_ee54, 34
  store i1 %v2_ee38, i1* %cpsr_c.global-to-local, align 1
  %v7_ee38 = icmp eq i8 %v3_ee54, 35
  store i1 %v7_ee38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee38, label %dec_label_pc_ee64, label %dec_label_pc_ee40

dec_label_pc_ee40:                                ; preds = %dec_label_pc_ee38
  %v2_ee40 = icmp ugt i8 %v3_ee54, 36
  store i1 %v2_ee40, i1* %cpsr_c.global-to-local, align 1
  %v7_ee40 = icmp eq i8 %v3_ee54, 37
  store i1 %v7_ee40, i1* %cpsr_z.global-to-local, align 1
  %v1_ee44 = add i32 %v0_ee44, -1
  store i32 %v1_ee44, i32* %r3.global-to-local, align 4
  br i1 %v7_ee40, label %dec_label_pc_ee64, label %dec_label_pc_ee4c

dec_label_pc_ee4c:                                ; preds = %dec_label_pc_ee4c.preheader, %dec_label_pc_ee40
  %v0_ee44 = phi i32 [ %v2_ee24, %dec_label_pc_ee4c.preheader ], [ %v1_ee44, %dec_label_pc_ee40 ]
  %v0_ee4c = phi i32 [ %v1_edec, %dec_label_pc_ee4c.preheader ], [ %v1_ee4c, %dec_label_pc_ee40 ]
  %v1_ee4c = add i32 %v0_ee4c, -1
  store i32 %v1_ee4c, i32* %r1.global-to-local, align 4
  %v2_ee4c = icmp ne i32 %v0_ee4c, 0
  store i1 %v2_ee4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee4c = icmp eq i32 %v0_ee4c, 1
  store i1 %v7_ee4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee4c, label %dec_label_pc_e95cthread-pre-split.thread512, label %dec_label_pc_ee54

dec_label_pc_ee54:                                ; preds = %dec_label_pc_ee4c
  %v1_ee54 = add i32 %v0_ee44, -2
  %v2_ee54 = inttoptr i32 %v1_ee54 to i8*
  %v3_ee54 = load i8, i8* %v2_ee54, align 1
  %v4_ee54 = zext i8 %v3_ee54 to i32
  store i32 %v4_ee54, i32* %r2.global-to-local, align 4
  %v2_ee58 = icmp ugt i8 %v3_ee54, 61
  store i1 %v2_ee58, i1* %cpsr_c.global-to-local, align 1
  %v7_ee58 = icmp eq i8 %v3_ee54, 62
  store i1 %v7_ee58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee58, label %dec_label_pc_ee64, label %bb392

bb392:                                            ; preds = %dec_label_pc_ee54
  %v3_ee5c = icmp ugt i8 %v3_ee54, 57
  store i1 %v3_ee5c, i1* %cpsr_c.global-to-local, align 1
  %v8_ee5c = icmp eq i8 %v3_ee54, 58
  store i1 %v8_ee5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee5c, label %dec_label_pc_ee64, label %dec_label_pc_ee30

dec_label_pc_ee64:                                ; preds = %dec_label_pc_ee54, %bb392, %dec_label_pc_ee40, %dec_label_pc_ee38, %dec_label_pc_ee30, %dec_label_pc_ee1c, %dec_label_pc_edf8, %dec_label_pc_ee14, %dec_label_pc_ee0c, %bb391
  %v0_ee68 = phi i32 [ %v1_edec, %dec_label_pc_ee1c ], [ %v1_edec, %dec_label_pc_edf8 ], [ %v1_edec, %dec_label_pc_ee14 ], [ %v1_edec, %dec_label_pc_ee0c ], [ %v1_edec, %bb391 ], [ %v1_ee4c, %dec_label_pc_ee30 ], [ %v1_ee4c, %dec_label_pc_ee38 ], [ %v1_ee4c, %dec_label_pc_ee40 ], [ %v1_ee4c, %bb392 ], [ %v1_ee4c, %dec_label_pc_ee54 ]
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_ee68 = add i32 %v0_ee68, 1
  store i32 %v1_ee68, i32* @r8, align 4
  %v1_ee6c = call i32 @function_f7dc(i32 18)
  store i32 %v2_f01c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v3_ee7c = call i32 @function_f718(i32 18, i32* nonnull %stack_var_-60)
  store i32 %v3_ee7c, i32* %r0.global-to-local, align 4
  %v3_ee80 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ee80, i32* %r2.global-to-local, align 4
  store i32 %v3_ee7c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ee8c = load i32, i32* @r6, align 4
  %v1_ee8c = add i32 %v0_ee8c, 4
  %v2_ee8c = inttoptr i32 %v1_ee8c to i32*
  %v3_ee8c = load i32, i32* %v2_ee8c, align 4
  store i32 %v3_ee8c, i32* %r0.global-to-local, align 4
  %v4_ee90 = call i32 @function_10d74(i32 %v3_ee8c, i32 %v3_ee7c, i32 %v3_ee80, i32 16384)
  store i32 %v4_ee90, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_eea0 = load i32, i32* @r6, align 4
  %v1_eea0 = add i32 %v0_eea0, 4
  %v2_eea0 = inttoptr i32 %v1_eea0 to i32*
  %v3_eea0 = load i32, i32* %v2_eea0, align 4
  store i32 %v3_eea0, i32* %r0.global-to-local, align 4
  %v4_eea4 = call i32 @function_10d74(i32 %v3_eea0, i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32 2, i32 16384)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_eeac = call i32 @function_f73c(i32 18)
  store i32 %v1_eeac, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_eeb4 = load i32, i32* @r6, align 4
  %v2_eeb4 = add i32 %v1_eeb4, 12
  %v3_eeb4 = inttoptr i32 %v2_eeb4 to i32*
  store i32 7, i32* %v3_eeb4, align 4
  br label %dec_label_pc_eaf8

dec_label_pc_eebc:                                ; preds = %dec_label_pc_e9dc
  %v1_eebc = add i32 %v0_e9dc, 24
  %v2_eebc = inttoptr i32 %v1_eebc to i32*
  %v3_eebc = load i32, i32* %v2_eebc, align 4
  store i32 %v3_eebc, i32* %r2.global-to-local, align 4
  %v1_eec0 = add i32 %v3_eebc, -1
  store i32 %v1_eec0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eec4 = icmp eq i32 %v1_eec0, 0
  store i1 %v2_eec4, i1* %cpsr_z.global-to-local, align 1
  %tmp393 = icmp slt i32 %v1_eec0, 1
  br i1 %tmp393, label %dec_label_pc_e95cthread-pre-split.thread, label %dec_label_pc_eecc

dec_label_pc_eecc:                                ; preds = %dec_label_pc_eebc
  %v2_eecc = add i32 %v1_eec0, %v0_e9dc
  store i32 %v2_eecc, i32* %r3.global-to-local, align 4
  %v1_eed0 = add i32 %v2_eecc, 28
  %v2_eed0 = inttoptr i32 %v1_eed0 to i8*
  %v3_eed0 = load i8, i8* %v2_eed0, align 1
  %v4_eed0 = zext i8 %v3_eed0 to i32
  store i32 %v4_eed0, i32* %r3.global-to-local, align 4
  %v2_eed4 = icmp ugt i8 %v3_eed0, 61
  store i1 %v2_eed4, i1* %cpsr_c.global-to-local, align 1
  %v7_eed4 = icmp eq i8 %v3_eed0, 62
  store i1 %v7_eed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eed4, label %dec_label_pc_ef38, label %bb394

bb394:                                            ; preds = %dec_label_pc_eecc
  %v3_eed8 = icmp ugt i8 %v3_eed0, 57
  store i1 %v3_eed8, i1* %cpsr_c.global-to-local, align 1
  %v8_eed8 = icmp eq i8 %v3_eed0, 58
  store i1 %v8_eed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eed8, label %dec_label_pc_ef38, label %dec_label_pc_eee0

dec_label_pc_eee0:                                ; preds = %bb394
  %v2_eee0 = icmp ugt i8 %v3_eed0, 35
  store i1 %v2_eee0, i1* %cpsr_c.global-to-local, align 1
  %v7_eee0 = icmp eq i8 %v3_eed0, 36
  store i1 %v7_eee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eee0, label %dec_label_pc_ef38, label %dec_label_pc_eee8

dec_label_pc_eee8:                                ; preds = %dec_label_pc_eee0
  %v2_eee8 = icmp ugt i8 %v3_eed0, 34
  store i1 %v2_eee8, i1* %cpsr_c.global-to-local, align 1
  %v7_eee8 = icmp eq i8 %v3_eed0, 35
  store i1 %v7_eee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eee8, label %dec_label_pc_ef38, label %dec_label_pc_eef0

dec_label_pc_eef0:                                ; preds = %dec_label_pc_eee8
  %v2_eef0 = icmp ugt i8 %v3_eed0, 36
  store i1 %v2_eef0, i1* %cpsr_c.global-to-local, align 1
  %v7_eef0 = icmp eq i8 %v3_eed0, 37
  store i1 %v7_eef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eef0, label %dec_label_pc_ef38, label %dec_label_pc_ef20.preheader

dec_label_pc_ef20.preheader:                      ; preds = %dec_label_pc_eef0
  %v3_eef4 = add i32 %v0_e9dc, 28
  %v2_eef8 = add i32 %v3_eef4, %v3_eebc
  store i32 %v2_eef8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ef20

dec_label_pc_ef04:                                ; preds = %bb395
  %v2_ef04 = icmp ugt i8 %v3_ef28, 35
  store i1 %v2_ef04, i1* %cpsr_c.global-to-local, align 1
  %v7_ef04 = icmp eq i8 %v3_ef28, 36
  store i1 %v7_ef04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef04, label %dec_label_pc_ef38, label %dec_label_pc_ef0c

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_ef04
  %v2_ef0c = icmp ugt i8 %v3_ef28, 34
  store i1 %v2_ef0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef0c = icmp eq i8 %v3_ef28, 35
  store i1 %v7_ef0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef0c, label %dec_label_pc_ef38, label %dec_label_pc_ef14

dec_label_pc_ef14:                                ; preds = %dec_label_pc_ef0c
  %v2_ef14 = icmp ugt i8 %v3_ef28, 36
  store i1 %v2_ef14, i1* %cpsr_c.global-to-local, align 1
  %v7_ef14 = icmp eq i8 %v3_ef28, 37
  store i1 %v7_ef14, i1* %cpsr_z.global-to-local, align 1
  %v1_ef18 = add i32 %v0_ef18, -1
  store i32 %v1_ef18, i32* %r3.global-to-local, align 4
  br i1 %v7_ef14, label %dec_label_pc_ef38, label %dec_label_pc_ef20

dec_label_pc_ef20:                                ; preds = %dec_label_pc_ef20.preheader, %dec_label_pc_ef14
  %v0_ef18 = phi i32 [ %v2_eef8, %dec_label_pc_ef20.preheader ], [ %v1_ef18, %dec_label_pc_ef14 ]
  %v0_ef20 = phi i32 [ %v1_eec0, %dec_label_pc_ef20.preheader ], [ %v1_ef20, %dec_label_pc_ef14 ]
  %v1_ef20 = add i32 %v0_ef20, -1
  store i32 %v1_ef20, i32* %r1.global-to-local, align 4
  %v2_ef20 = icmp ne i32 %v0_ef20, 0
  store i1 %v2_ef20, i1* %cpsr_c.global-to-local, align 1
  %v7_ef20 = icmp eq i32 %v0_ef20, 1
  store i1 %v7_ef20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef20, label %dec_label_pc_e95cthread-pre-split.thread512, label %dec_label_pc_ef28

dec_label_pc_ef28:                                ; preds = %dec_label_pc_ef20
  %v1_ef28 = add i32 %v0_ef18, -2
  %v2_ef28 = inttoptr i32 %v1_ef28 to i8*
  %v3_ef28 = load i8, i8* %v2_ef28, align 1
  %v4_ef28 = zext i8 %v3_ef28 to i32
  store i32 %v4_ef28, i32* %r2.global-to-local, align 4
  %v2_ef2c = icmp ugt i8 %v3_ef28, 61
  store i1 %v2_ef2c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef2c = icmp eq i8 %v3_ef28, 62
  store i1 %v7_ef2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef2c, label %dec_label_pc_ef38, label %bb395

bb395:                                            ; preds = %dec_label_pc_ef28
  %v3_ef30 = icmp ugt i8 %v3_ef28, 57
  store i1 %v3_ef30, i1* %cpsr_c.global-to-local, align 1
  %v8_ef30 = icmp eq i8 %v3_ef28, 58
  store i1 %v8_ef30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef30, label %dec_label_pc_ef38, label %dec_label_pc_ef04

dec_label_pc_ef38:                                ; preds = %dec_label_pc_ef28, %bb395, %dec_label_pc_ef14, %dec_label_pc_ef0c, %dec_label_pc_ef04, %dec_label_pc_eef0, %dec_label_pc_eecc, %dec_label_pc_eee8, %dec_label_pc_eee0, %bb394
  %v0_ef3c = phi i32 [ %v1_eec0, %dec_label_pc_eef0 ], [ %v1_eec0, %dec_label_pc_eecc ], [ %v1_eec0, %dec_label_pc_eee8 ], [ %v1_eec0, %dec_label_pc_eee0 ], [ %v1_eec0, %bb394 ], [ %v1_ef20, %dec_label_pc_ef04 ], [ %v1_ef20, %dec_label_pc_ef0c ], [ %v1_ef20, %dec_label_pc_ef14 ], [ %v1_ef20, %bb395 ], [ %v1_ef20, %dec_label_pc_ef28 ]
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_ef3c = add i32 %v0_ef3c, 1
  store i32 %v1_ef3c, i32* @r8, align 4
  %v1_ef40 = call i32 @function_f7dc(i32 20)
  store i32 %v2_f01c, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_ef50 = call i32 @function_f718(i32 20, i32* nonnull %stack_var_-60)
  store i32 %v3_ef50, i32* %r0.global-to-local, align 4
  %v3_ef54 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ef54, i32* %r2.global-to-local, align 4
  store i32 %v3_ef50, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ef60 = load i32, i32* @r6, align 4
  %v1_ef60 = add i32 %v0_ef60, 4
  %v2_ef60 = inttoptr i32 %v1_ef60 to i32*
  %v3_ef60 = load i32, i32* %v2_ef60, align 4
  store i32 %v3_ef60, i32* %r0.global-to-local, align 4
  %v4_ef64 = call i32 @function_10d74(i32 %v3_ef60, i32 %v3_ef50, i32 %v3_ef54, i32 16384)
  store i32 %v4_ef64, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ef74 = load i32, i32* @r6, align 4
  %v1_ef74 = add i32 %v0_ef74, 4
  %v2_ef74 = inttoptr i32 %v1_ef74 to i32*
  %v3_ef74 = load i32, i32* %v2_ef74, align 4
  store i32 %v3_ef74, i32* %r0.global-to-local, align 4
  %v4_ef78 = call i32 @function_10d74(i32 %v3_ef74, i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_ef80 = call i32 @function_f73c(i32 20)
  store i32 %v1_ef80, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_ef88 = load i32, i32* @r6, align 4
  %v2_ef88 = add i32 %v1_ef88, 12
  %v3_ef88 = inttoptr i32 %v2_ef88 to i32*
  store i32 9, i32* %v3_ef88, align 4
  br label %dec_label_pc_eaf8

dec_label_pc_ef90:                                ; preds = %dec_label_pc_e9dc
  %v1_ef90 = add i32 %v0_e9dc, 24
  %v2_ef90 = inttoptr i32 %v1_ef90 to i32*
  %v3_ef90 = load i32, i32* %v2_ef90, align 4
  store i32 %v3_ef90, i32* %r2.global-to-local, align 4
  %v1_ef94 = add i32 %v3_ef90, -1
  store i32 %v1_ef94, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef98 = icmp eq i32 %v1_ef94, 0
  store i1 %v2_ef98, i1* %cpsr_z.global-to-local, align 1
  %tmp396 = icmp slt i32 %v1_ef94, 1
  br i1 %tmp396, label %dec_label_pc_e95cthread-pre-split.thread, label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %dec_label_pc_ef90
  %v2_efa0 = add i32 %v1_ef94, %v0_e9dc
  store i32 %v2_efa0, i32* %r3.global-to-local, align 4
  %v1_efa4 = add i32 %v2_efa0, 28
  %v2_efa4 = inttoptr i32 %v1_efa4 to i8*
  %v3_efa4 = load i8, i8* %v2_efa4, align 1
  %v4_efa4 = zext i8 %v3_efa4 to i32
  store i32 %v4_efa4, i32* %r3.global-to-local, align 4
  %v2_efa8 = icmp ugt i8 %v3_efa4, 61
  store i1 %v2_efa8, i1* %cpsr_c.global-to-local, align 1
  %v7_efa8 = icmp eq i8 %v3_efa4, 62
  store i1 %v7_efa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efa8, label %dec_label_pc_f00c, label %bb397

bb397:                                            ; preds = %dec_label_pc_efa0
  %v3_efac = icmp ugt i8 %v3_efa4, 57
  store i1 %v3_efac, i1* %cpsr_c.global-to-local, align 1
  %v8_efac = icmp eq i8 %v3_efa4, 58
  store i1 %v8_efac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_efac, label %dec_label_pc_f00c, label %dec_label_pc_efb4

dec_label_pc_efb4:                                ; preds = %bb397
  %v2_efb4 = icmp ugt i8 %v3_efa4, 35
  store i1 %v2_efb4, i1* %cpsr_c.global-to-local, align 1
  %v7_efb4 = icmp eq i8 %v3_efa4, 36
  store i1 %v7_efb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efb4, label %dec_label_pc_f00c, label %dec_label_pc_efbc

dec_label_pc_efbc:                                ; preds = %dec_label_pc_efb4
  %v2_efbc = icmp ugt i8 %v3_efa4, 34
  store i1 %v2_efbc, i1* %cpsr_c.global-to-local, align 1
  %v7_efbc = icmp eq i8 %v3_efa4, 35
  store i1 %v7_efbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efbc, label %dec_label_pc_f00c, label %dec_label_pc_efc4

dec_label_pc_efc4:                                ; preds = %dec_label_pc_efbc
  %v2_efc4 = icmp ugt i8 %v3_efa4, 36
  store i1 %v2_efc4, i1* %cpsr_c.global-to-local, align 1
  %v7_efc4 = icmp eq i8 %v3_efa4, 37
  store i1 %v7_efc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efc4, label %dec_label_pc_f00c, label %dec_label_pc_eff4.preheader

dec_label_pc_eff4.preheader:                      ; preds = %dec_label_pc_efc4
  %v3_efc8 = add i32 %v0_e9dc, 28
  %v2_efcc = add i32 %v3_efc8, %v3_ef90
  store i32 %v2_efcc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eff4

dec_label_pc_efd8:                                ; preds = %bb398
  %v2_efd8 = icmp ugt i8 %v3_effc, 35
  store i1 %v2_efd8, i1* %cpsr_c.global-to-local, align 1
  %v7_efd8 = icmp eq i8 %v3_effc, 36
  store i1 %v7_efd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efd8, label %dec_label_pc_f00c, label %dec_label_pc_efe0

dec_label_pc_efe0:                                ; preds = %dec_label_pc_efd8
  %v2_efe0 = icmp ugt i8 %v3_effc, 34
  store i1 %v2_efe0, i1* %cpsr_c.global-to-local, align 1
  %v7_efe0 = icmp eq i8 %v3_effc, 35
  store i1 %v7_efe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efe0, label %dec_label_pc_f00c, label %dec_label_pc_efe8

dec_label_pc_efe8:                                ; preds = %dec_label_pc_efe0
  %v2_efe8 = icmp ugt i8 %v3_effc, 36
  store i1 %v2_efe8, i1* %cpsr_c.global-to-local, align 1
  %v7_efe8 = icmp eq i8 %v3_effc, 37
  store i1 %v7_efe8, i1* %cpsr_z.global-to-local, align 1
  %v1_efec = add i32 %v0_efec, -1
  store i32 %v1_efec, i32* %r3.global-to-local, align 4
  br i1 %v7_efe8, label %dec_label_pc_f00c, label %dec_label_pc_eff4

dec_label_pc_eff4:                                ; preds = %dec_label_pc_eff4.preheader, %dec_label_pc_efe8
  %v0_efec = phi i32 [ %v2_efcc, %dec_label_pc_eff4.preheader ], [ %v1_efec, %dec_label_pc_efe8 ]
  %v0_eff4 = phi i32 [ %v1_ef94, %dec_label_pc_eff4.preheader ], [ %v1_eff4, %dec_label_pc_efe8 ]
  %v1_eff4 = add i32 %v0_eff4, -1
  store i32 %v1_eff4, i32* %r1.global-to-local, align 4
  %v2_eff4 = icmp ne i32 %v0_eff4, 0
  store i1 %v2_eff4, i1* %cpsr_c.global-to-local, align 1
  %v7_eff4 = icmp eq i32 %v0_eff4, 1
  store i1 %v7_eff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eff4, label %dec_label_pc_e95cthread-pre-split.thread512, label %dec_label_pc_effc

dec_label_pc_effc:                                ; preds = %dec_label_pc_eff4
  %v1_effc = add i32 %v0_efec, -2
  %v2_effc = inttoptr i32 %v1_effc to i8*
  %v3_effc = load i8, i8* %v2_effc, align 1
  %v4_effc = zext i8 %v3_effc to i32
  store i32 %v4_effc, i32* %r2.global-to-local, align 4
  %v2_f000 = icmp ugt i8 %v3_effc, 61
  store i1 %v2_f000, i1* %cpsr_c.global-to-local, align 1
  %v7_f000 = icmp eq i8 %v3_effc, 62
  store i1 %v7_f000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f000, label %dec_label_pc_f00c, label %bb398

bb398:                                            ; preds = %dec_label_pc_effc
  %v3_f004 = icmp ugt i8 %v3_effc, 57
  store i1 %v3_f004, i1* %cpsr_c.global-to-local, align 1
  %v8_f004 = icmp eq i8 %v3_effc, 58
  store i1 %v8_f004, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f004, label %dec_label_pc_f00c, label %dec_label_pc_efd8

dec_label_pc_f00c:                                ; preds = %dec_label_pc_effc, %bb398, %dec_label_pc_efe8, %dec_label_pc_efe0, %dec_label_pc_efd8, %dec_label_pc_efc4, %dec_label_pc_efa0, %dec_label_pc_efbc, %dec_label_pc_efb4, %bb397
  %v0_f010 = phi i32 [ %v1_ef94, %dec_label_pc_efc4 ], [ %v1_ef94, %dec_label_pc_efa0 ], [ %v1_ef94, %dec_label_pc_efbc ], [ %v1_ef94, %dec_label_pc_efb4 ], [ %v1_ef94, %bb397 ], [ %v1_eff4, %dec_label_pc_efd8 ], [ %v1_eff4, %dec_label_pc_efe0 ], [ %v1_eff4, %dec_label_pc_efe8 ], [ %v1_eff4, %bb398 ], [ %v1_eff4, %dec_label_pc_effc ]
  store i32 17, i32* %r0.global-to-local, align 4
  %v1_f010 = add i32 %v0_f010, 1
  store i32 %v1_f010, i32* @r8, align 4
  %v1_f014 = call i32 @function_f7dc(i32 17)
  store i32 %v2_f01c, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r0.global-to-local, align 4
  %v3_f024 = call i32 @function_f718(i32 17, i32* nonnull %stack_var_-60)
  store i32 %v3_f024, i32* %r0.global-to-local, align 4
  %v3_f028 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f028, i32* %r2.global-to-local, align 4
  store i32 %v3_f024, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f034 = load i32, i32* @r6, align 4
  %v1_f034 = add i32 %v0_f034, 4
  %v2_f034 = inttoptr i32 %v1_f034 to i32*
  %v3_f034 = load i32, i32* %v2_f034, align 4
  store i32 %v3_f034, i32* %r0.global-to-local, align 4
  %v4_f038 = call i32 @function_10d74(i32 %v3_f034, i32 %v3_f024, i32 %v3_f028, i32 16384)
  store i32 %v4_f038, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f048 = load i32, i32* @r6, align 4
  %v1_f048 = add i32 %v0_f048, 4
  %v2_f048 = inttoptr i32 %v1_f048 to i32*
  %v3_f048 = load i32, i32* %v2_f048, align 4
  store i32 %v3_f048, i32* %r0.global-to-local, align 4
  %v4_f04c = call i32 @function_10d74(i32 %v3_f048, i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32 2, i32 16384)
  store i32 17, i32* %r0.global-to-local, align 4
  %v1_f054 = call i32 @function_f73c(i32 17)
  store i32 %v1_f054, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f05c = load i32, i32* @r6, align 4
  %v2_f05c = add i32 %v1_f05c, 12
  %v3_f05c = inttoptr i32 %v2_f05c to i32*
  store i32 6, i32* %v3_f05c, align 4
  br label %dec_label_pc_eaf8

dec_label_pc_f064:                                ; preds = %dec_label_pc_e9dc
  %v1_f064 = add i32 %v0_e9dc, 24
  %v2_f064 = inttoptr i32 %v1_f064 to i32*
  %v3_f064 = load i32, i32* %v2_f064, align 4
  store i32 %v3_f064, i32* %r1.global-to-local, align 4
  %v1_f068 = add i32 %v3_f064, -1
  store i32 %v1_f068, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f06c = icmp eq i32 %v1_f068, 0
  store i1 %v2_f06c, i1* %cpsr_z.global-to-local, align 1
  %tmp399 = icmp slt i32 %v1_f068, 1
  br i1 %tmp399, label %dec_label_pc_f0e0, label %dec_label_pc_f074

dec_label_pc_f074:                                ; preds = %dec_label_pc_f064
  %v2_f074 = add i32 %v1_f068, %v0_e9dc
  store i32 %v2_f074, i32* %r3.global-to-local, align 4
  %v1_f078 = add i32 %v2_f074, 28
  %v2_f078 = inttoptr i32 %v1_f078 to i8*
  %v3_f078 = load i8, i8* %v2_f078, align 1
  %v4_f078 = zext i8 %v3_f078 to i32
  store i32 %v4_f078, i32* %r3.global-to-local, align 4
  %v2_f07c = icmp ugt i8 %v3_f078, 61
  store i1 %v2_f07c, i1* %cpsr_c.global-to-local, align 1
  %v7_f07c = icmp eq i8 %v3_f078, 62
  store i1 %v7_f07c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f07c, label %dec_label_pc_f2e8, label %bb400

bb400:                                            ; preds = %dec_label_pc_f074
  %v3_f080 = icmp ugt i8 %v3_f078, 57
  store i1 %v3_f080, i1* %cpsr_c.global-to-local, align 1
  %v8_f080 = icmp eq i8 %v3_f078, 58
  store i1 %v8_f080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f080, label %dec_label_pc_f2e8, label %dec_label_pc_f088

dec_label_pc_f088:                                ; preds = %bb400
  %v2_f088 = icmp ugt i8 %v3_f078, 35
  store i1 %v2_f088, i1* %cpsr_c.global-to-local, align 1
  %v7_f088 = icmp eq i8 %v3_f078, 36
  store i1 %v7_f088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f088, label %dec_label_pc_f2e8, label %dec_label_pc_f090

dec_label_pc_f090:                                ; preds = %dec_label_pc_f088
  %v2_f090 = icmp ugt i8 %v3_f078, 34
  store i1 %v2_f090, i1* %cpsr_c.global-to-local, align 1
  %v7_f090 = icmp eq i8 %v3_f078, 35
  store i1 %v7_f090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f090, label %dec_label_pc_f2e8, label %dec_label_pc_f098

dec_label_pc_f098:                                ; preds = %dec_label_pc_f090
  %v2_f098 = icmp ugt i8 %v3_f078, 36
  store i1 %v2_f098, i1* %cpsr_c.global-to-local, align 1
  %v7_f098 = icmp eq i8 %v3_f078, 37
  store i1 %v7_f098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f098, label %dec_label_pc_f2e8, label %dec_label_pc_f0d8.preheader

dec_label_pc_f0d8.preheader:                      ; preds = %dec_label_pc_f098
  %v3_f09c = add i32 %v0_e9dc, 28
  %v2_f0a0 = add i32 %v3_f09c, %v3_f064
  store i32 %v2_f0a0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f0d8

dec_label_pc_f0ac:                                ; preds = %dec_label_pc_f0d8
  %v1_f0ac = add i32 %v0_f0d0, -2
  %v2_f0ac = inttoptr i32 %v1_f0ac to i8*
  %v3_f0ac = load i8, i8* %v2_f0ac, align 1
  %v4_f0ac = zext i8 %v3_f0ac to i32
  store i32 %v4_f0ac, i32* %r2.global-to-local, align 4
  %v2_f0b0 = icmp ugt i8 %v3_f0ac, 61
  store i1 %v2_f0b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0b0 = icmp eq i8 %v3_f0ac, 62
  store i1 %v7_f0b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0b0, label %dec_label_pc_f2e8, label %bb401

bb401:                                            ; preds = %dec_label_pc_f0ac
  %v3_f0b4 = icmp ugt i8 %v3_f0ac, 57
  store i1 %v3_f0b4, i1* %cpsr_c.global-to-local, align 1
  %v8_f0b4 = icmp eq i8 %v3_f0ac, 58
  store i1 %v8_f0b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0b4, label %dec_label_pc_f2e8, label %dec_label_pc_f0bc

dec_label_pc_f0bc:                                ; preds = %bb401
  %v2_f0bc = icmp ugt i8 %v3_f0ac, 35
  store i1 %v2_f0bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0bc = icmp eq i8 %v3_f0ac, 36
  store i1 %v7_f0bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0bc, label %dec_label_pc_f2e8, label %dec_label_pc_f0c4

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f0bc
  %v2_f0c4 = icmp ugt i8 %v3_f0ac, 34
  store i1 %v2_f0c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0c4 = icmp eq i8 %v3_f0ac, 35
  store i1 %v7_f0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0c4, label %dec_label_pc_f2e8, label %dec_label_pc_f0cc

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f0c4
  %v2_f0cc = icmp ugt i8 %v3_f0ac, 36
  store i1 %v2_f0cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0cc = icmp eq i8 %v3_f0ac, 37
  store i1 %v7_f0cc, i1* %cpsr_z.global-to-local, align 1
  %v1_f0d0 = add i32 %v0_f0d0, -1
  store i32 %v1_f0d0, i32* %r3.global-to-local, align 4
  br i1 %v7_f0cc, label %dec_label_pc_f2e8, label %dec_label_pc_f0d8

dec_label_pc_f0d8:                                ; preds = %dec_label_pc_f0d8.preheader, %dec_label_pc_f0cc
  %v0_f0d0 = phi i32 [ %v2_f0a0, %dec_label_pc_f0d8.preheader ], [ %v1_f0d0, %dec_label_pc_f0cc ]
  %v0_f0d8 = phi i32 [ %v1_f068, %dec_label_pc_f0d8.preheader ], [ %v1_f0d8, %dec_label_pc_f0cc ]
  %v1_f0d8 = add i32 %v0_f0d8, -1
  store i32 %v1_f0d8, i32* %r0.global-to-local, align 4
  %v2_f0d8 = icmp ne i32 %v0_f0d8, 0
  store i1 %v2_f0d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0d8 = icmp eq i32 %v0_f0d8, 1
  store i1 %v7_f0d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0d8, label %dec_label_pc_f0e0, label %dec_label_pc_f0ac

dec_label_pc_f0e0:                                ; preds = %dec_label_pc_f0d8, %dec_label_pc_f064
  %v0_f0e0 = load i32, i32* @fp, align 4
  store i32 %v0_f0e0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_159d8.262 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_f0ec = call i32 @function_fcf0(i32 %v0_f0e0, i32 %v3_f064, i32 ptrtoint ([5 x i8]* @global_var_159d8.262 to i32), i32 4)
  store i32 %v5_f0ec, i32* %r0.global-to-local, align 4
  %v2_f0f0 = icmp eq i32 %v5_f0ec, -1
  store i1 %v2_f0f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f0 = icmp eq i32 %v5_f0ec, -1
  store i1 %v7_f0f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_f0ec, i32* @r8, align 4
  br i1 %v7_f0f0, label %dec_label_pc_f6b4, label %dec_label_pc_f0fc

dec_label_pc_f0fc:                                ; preds = %dec_label_pc_f6b4, %dec_label_pc_f0e0
  %v0_f0fc = phi i32 [ %v5_f6c4, %dec_label_pc_f6b4 ], [ %v5_f0ec, %dec_label_pc_f0e0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0fc = icmp eq i32 %v0_f0fc, 0
  store i1 %v2_f0fc, i1* %cpsr_z.global-to-local, align 1
  %v5_f100 = icmp sgt i32 %v0_f0fc, 0
  br i1 %v5_f100, label %dec_label_pc_f0fc.dec_label_pc_f2ec_crit_edge, label %dec_label_pc_f104

dec_label_pc_f0fc.dec_label_pc_f2ec_crit_edge:    ; preds = %dec_label_pc_f0fc
  %v0_f2ec.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f2ec

dec_label_pc_f104:                                ; preds = %dec_label_pc_f264, %bb409, %dec_label_pc_f198, %dec_label_pc_f0fc, %dec_label_pc_f3ac, %dec_label_pc_f328, %dec_label_pc_f2ec, %dec_label_pc_f434
  %v0_f104 = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f104 = icmp eq i32 %v0_f104, 0
  store i1 %v2_f104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f104, label %dec_label_pc_e958.loopexit, label %dec_label_pc_eaf8

dec_label_pc_f110:                                ; preds = %dec_label_pc_e9dc
  %v1_f110 = add i32 %v0_e9dc, 24
  %v2_f110 = inttoptr i32 %v1_f110 to i32*
  %v3_f110 = load i32, i32* %v2_f110, align 4
  store i32 %v3_f110, i32* %r1.global-to-local, align 4
  %v1_f114 = add i32 %v3_f110, -1
  store i32 %v1_f114, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f118 = icmp eq i32 %v1_f114, 0
  store i1 %v2_f118, i1* %cpsr_z.global-to-local, align 1
  %tmp402 = icmp slt i32 %v1_f114, 1
  br i1 %tmp402, label %dec_label_pc_f17c, label %dec_label_pc_f120

dec_label_pc_f120:                                ; preds = %dec_label_pc_f110
  %v2_f120 = add i32 %v1_f114, %v0_e9dc
  store i32 %v2_f120, i32* %r3.global-to-local, align 4
  %v1_f124 = add i32 %v2_f120, 28
  %v2_f124 = inttoptr i32 %v1_f124 to i8*
  %v3_f124 = load i8, i8* %v2_f124, align 1
  %v4_f124 = zext i8 %v3_f124 to i32
  store i32 %v4_f124, i32* %r3.global-to-local, align 4
  %v2_f128 = icmp ugt i8 %v3_f124, 61
  store i1 %v2_f128, i1* %cpsr_c.global-to-local, align 1
  %v7_f128 = icmp eq i8 %v3_f124, 62
  store i1 %v7_f128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f128, label %dec_label_pc_f324, label %bb403

bb403:                                            ; preds = %dec_label_pc_f120
  %v3_f12c = icmp ugt i8 %v3_f124, 57
  store i1 %v3_f12c, i1* %cpsr_c.global-to-local, align 1
  %v8_f12c = icmp eq i8 %v3_f124, 58
  store i1 %v8_f12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f12c, label %dec_label_pc_f324, label %dec_label_pc_f134

dec_label_pc_f134:                                ; preds = %bb403
  %v2_f134 = icmp ugt i8 %v3_f124, 35
  store i1 %v2_f134, i1* %cpsr_c.global-to-local, align 1
  %v7_f134 = icmp eq i8 %v3_f124, 36
  store i1 %v7_f134, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f134, label %dec_label_pc_f324, label %dec_label_pc_f13c

dec_label_pc_f13c:                                ; preds = %dec_label_pc_f134
  %v2_f13c = icmp ugt i8 %v3_f124, 34
  store i1 %v2_f13c, i1* %cpsr_c.global-to-local, align 1
  %v7_f13c = icmp eq i8 %v3_f124, 35
  store i1 %v7_f13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f13c, label %dec_label_pc_f324, label %dec_label_pc_f174.preheader

dec_label_pc_f174.preheader:                      ; preds = %dec_label_pc_f13c
  %v3_f140 = add i32 %v0_e9dc, 28
  %v2_f144 = add i32 %v3_f140, %v3_f110
  store i32 %v2_f144, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f174

dec_label_pc_f150:                                ; preds = %dec_label_pc_f174
  %v1_f150 = add i32 %v0_f16c, -2
  %v2_f150 = inttoptr i32 %v1_f150 to i8*
  %v3_f150 = load i8, i8* %v2_f150, align 1
  %v4_f150 = zext i8 %v3_f150 to i32
  store i32 %v4_f150, i32* %r2.global-to-local, align 4
  %v2_f154 = icmp ugt i8 %v3_f150, 61
  store i1 %v2_f154, i1* %cpsr_c.global-to-local, align 1
  %v7_f154 = icmp eq i8 %v3_f150, 62
  store i1 %v7_f154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f154, label %dec_label_pc_f324, label %bb404

bb404:                                            ; preds = %dec_label_pc_f150
  %v3_f158 = icmp ugt i8 %v3_f150, 57
  store i1 %v3_f158, i1* %cpsr_c.global-to-local, align 1
  %v8_f158 = icmp eq i8 %v3_f150, 58
  store i1 %v8_f158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f158, label %dec_label_pc_f324, label %dec_label_pc_f160

dec_label_pc_f160:                                ; preds = %bb404
  %v2_f160 = icmp ugt i8 %v3_f150, 35
  store i1 %v2_f160, i1* %cpsr_c.global-to-local, align 1
  %v7_f160 = icmp eq i8 %v3_f150, 36
  store i1 %v7_f160, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f160, label %dec_label_pc_f324, label %dec_label_pc_f168

dec_label_pc_f168:                                ; preds = %dec_label_pc_f160
  %v2_f168 = icmp ugt i8 %v3_f150, 34
  store i1 %v2_f168, i1* %cpsr_c.global-to-local, align 1
  %v7_f168 = icmp eq i8 %v3_f150, 35
  store i1 %v7_f168, i1* %cpsr_z.global-to-local, align 1
  %v1_f16c = add i32 %v0_f16c, -1
  store i32 %v1_f16c, i32* %r3.global-to-local, align 4
  br i1 %v7_f168, label %dec_label_pc_f324, label %dec_label_pc_f174

dec_label_pc_f174:                                ; preds = %dec_label_pc_f174.preheader, %dec_label_pc_f168
  %v0_f16c = phi i32 [ %v2_f144, %dec_label_pc_f174.preheader ], [ %v1_f16c, %dec_label_pc_f168 ]
  %v0_f174 = phi i32 [ %v1_f114, %dec_label_pc_f174.preheader ], [ %v1_f174, %dec_label_pc_f168 ]
  %v1_f174 = add i32 %v0_f174, -1
  store i32 %v1_f174, i32* %r0.global-to-local, align 4
  %v2_f174 = icmp ne i32 %v0_f174, 0
  store i1 %v2_f174, i1* %cpsr_c.global-to-local, align 1
  %v7_f174 = icmp eq i32 %v0_f174, 1
  store i1 %v7_f174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f174, label %dec_label_pc_f17c, label %dec_label_pc_f150

dec_label_pc_f17c:                                ; preds = %dec_label_pc_f174, %dec_label_pc_f110
  %v0_f17c = load i32, i32* @fp, align 4
  store i32 %v0_f17c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_159e0.264 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_f188 = call i32 @function_fcf0(i32 %v0_f17c, i32 %v3_f110, i32 ptrtoint ([8 x i8]* @global_var_159e0.264 to i32), i32 7)
  store i32 %v5_f188, i32* %r0.global-to-local, align 4
  %v2_f18c = icmp eq i32 %v5_f188, -1
  store i1 %v2_f18c, i1* %cpsr_c.global-to-local, align 1
  %v7_f18c = icmp eq i32 %v5_f188, -1
  store i1 %v7_f18c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_f188, i32* @r8, align 4
  br i1 %v7_f18c, label %dec_label_pc_e958.loopexit, label %dec_label_pc_f198

dec_label_pc_f198:                                ; preds = %dec_label_pc_f17c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f198 = icmp eq i32 %v5_f188, 0
  store i1 %v2_f198, i1* %cpsr_z.global-to-local, align 1
  %tmp405 = icmp slt i32 %v5_f188, 1
  br i1 %tmp405, label %dec_label_pc_f104, label %dec_label_pc_f198.dec_label_pc_f328_crit_edge

dec_label_pc_f198.dec_label_pc_f328_crit_edge:    ; preds = %dec_label_pc_f198
  %v0_f328.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f328

dec_label_pc_f1a4:                                ; preds = %dec_label_pc_e9dc
  %v1_f1a4 = add i32 %v0_e9dc, 24
  %v2_f1a4 = inttoptr i32 %v1_f1a4 to i32*
  %v3_f1a4 = load i32, i32* %v2_f1a4, align 4
  store i32 %v3_f1a4, i32* %r2.global-to-local, align 4
  %v0_f1a8 = load i32, i32* @fp, align 4
  store i32 %v0_f1a8, i32* @r4, align 4
  store i32 0, i32* @r8, align 4
  %v3_f1b0139 = icmp eq i32 %v3_f1a4, 0
  store i1 %v3_f1b0139, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f1b0139, i1* %cpsr_z.global-to-local, align 1
  %v6_f1b4146 = icmp sgt i32 %v3_f1a4, 0
  br i1 %v6_f1b4146, label %dec_label_pc_f1b8.preheader, label %dec_label_pc_f264

dec_label_pc_f1b0.loopexit:                       ; preds = %dec_label_pc_f1d4
  %v2_f1dc = add i32 %v1_f1dc, 2
  store i32 %v2_f1dc, i32* @r4, align 4
  %v2_f1e0 = add i32 %v1_f1e0, 2
  store i32 %v2_f1e0, i32* @r8, align 4
  %v3_f1b0 = icmp uge i32 %v2_f1e0, %v1_f1b0
  store i1 %v3_f1b0, i1* %cpsr_c.global-to-local, align 1
  %v9_f1b0 = icmp eq i32 %v2_f1e0, %v1_f1b0
  store i1 %v9_f1b0, i1* %cpsr_z.global-to-local, align 1
  %v6_f1b4 = icmp slt i32 %v2_f1e0, %v1_f1b0
  br i1 %v6_f1b4, label %dec_label_pc_f1b8.preheader, label %dec_label_pc_f264

dec_label_pc_f1b8.preheader:                      ; preds = %dec_label_pc_f1a4, %dec_label_pc_f1b0.loopexit
  %v6_f26c223 = phi i32 [ %v6_f26c224, %dec_label_pc_f1b0.loopexit ], [ %v0_e9dc, %dec_label_pc_f1a4 ]
  %v1_f1e0212 = phi i32 [ %v2_f1e0, %dec_label_pc_f1b0.loopexit ], [ 0, %dec_label_pc_f1a4 ]
  %v1_f1c4210 = phi i32 [ %v1_f1b0, %dec_label_pc_f1b0.loopexit ], [ %v3_f1a4, %dec_label_pc_f1a4 ]
  %v0_f1b8208 = phi i32 [ %v2_f1dc, %dec_label_pc_f1b0.loopexit ], [ %v0_f1a8, %dec_label_pc_f1a4 ]
  br label %dec_label_pc_f1b8

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_f1b8.preheader, %dec_label_pc_f248
  %v6_f26c224 = phi i32 [ %v6_f26c223, %dec_label_pc_f1b8.preheader ], [ %v0_f250, %dec_label_pc_f248 ]
  %v1_f1e0 = phi i32 [ %v1_f1e0212, %dec_label_pc_f1b8.preheader ], [ %v1_f254, %dec_label_pc_f248 ]
  %v1_f1b0 = phi i32 [ %v1_f1c4210, %dec_label_pc_f1b8.preheader ], [ %v3_f250, %dec_label_pc_f248 ]
  %v1_f1dc = phi i32 [ %v0_f1b8208, %dec_label_pc_f1b8.preheader ], [ %v1_f25c, %dec_label_pc_f248 ]
  %v1_f1b8 = inttoptr i32 %v1_f1dc to i8*
  %v2_f1b8 = load i8, i8* %v1_f1b8, align 1
  %v3_f1b8 = zext i8 %v2_f1b8 to i32
  store i32 %v3_f1b8, i32* @r3, align 4
  %v2_f1bc = icmp eq i8 %v2_f1b8, -1
  store i1 %v2_f1bc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f1bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f1bc, label %dec_label_pc_f1c4, label %dec_label_pc_f264

dec_label_pc_f1c4:                                ; preds = %dec_label_pc_f1b8
  %v0_f1c4 = load i32, i32* @fp, align 4
  %v2_f1c4 = add i32 %v0_f1c4, %v1_f1b0
  store i32 %v2_f1c4, i32* %r1.global-to-local, align 4
  %v1_f1c8 = add i32 %v1_f1dc, 1
  store i32 %v1_f1c8, i32* @r5, align 4
  %v3_f1cc = icmp uge i32 %v2_f1c4, %v1_f1c8
  store i1 %v3_f1cc, i1* %cpsr_c.global-to-local, align 1
  %v9_f1cc = icmp eq i32 %v2_f1c4, %v1_f1c8
  store i1 %v9_f1cc, i1* %cpsr_z.global-to-local, align 1
  %v2_f1d0 = xor i1 %v3_f1cc, true
  %v3_f1d0 = or i1 %v9_f1cc, %v2_f1d0
  br i1 %v3_f1d0, label %dec_label_pc_f264, label %dec_label_pc_f1d4

dec_label_pc_f1d4:                                ; preds = %dec_label_pc_f1c4
  %v2_f1d4 = inttoptr i32 %v1_f1c8 to i8*
  %v3_f1d4 = load i8, i8* %v2_f1d4, align 1
  %v4_f1d4 = zext i8 %v3_f1d4 to i32
  store i32 %v4_f1d4, i32* @r3, align 4
  %v2_f1d8 = icmp eq i8 %v3_f1d4, -1
  store i1 %v2_f1d8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f1d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f1d8, label %dec_label_pc_f1b0.loopexit, label %dec_label_pc_f1e8

dec_label_pc_f1e8:                                ; preds = %dec_label_pc_f1d4
  %v2_f1e8 = icmp ugt i8 %v3_f1d4, -4
  store i1 %v2_f1e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1e8 = icmp eq i8 %v3_f1d4, -3
  store i1 %v7_f1e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1e8, label %dec_label_pc_f274, label %dec_label_pc_f1f0

dec_label_pc_f1f0:                                ; preds = %dec_label_pc_f1e8
  %v1_f1f0 = add i32 %v1_f1dc, 2
  store i32 %v1_f1f0, i32* @r3, align 4
  %v3_f1f4 = icmp uge i32 %v2_f1c4, %v1_f1f0
  store i1 %v3_f1f4, i1* %cpsr_c.global-to-local, align 1
  %v9_f1f4 = icmp eq i32 %v2_f1c4, %v1_f1f0
  store i1 %v9_f1f4, i1* %cpsr_z.global-to-local, align 1
  %v2_f1f8 = xor i1 %v3_f1f4, true
  %v3_f1f8 = or i1 %v9_f1f4, %v2_f1f8
  br i1 %v3_f1f8, label %dec_label_pc_f264, label %dec_label_pc_f1fc

dec_label_pc_f1fc:                                ; preds = %dec_label_pc_f2d8, %bb410, %.thread109, %dec_label_pc_f1f0
  %v0_f1fc = load i32, i32* @r5, align 4
  %v1_f1fc = inttoptr i32 %v0_f1fc to i8*
  %v2_f1fc = load i8, i8* %v1_f1fc, align 1
  %v3_f1fc = zext i8 %v2_f1fc to i32
  store i32 %v3_f1fc, i32* %r3.global-to-local, align 4
  %v2_f200 = icmp ugt i8 %v2_f1fc, -4
  store i1 %v2_f200, i1* %cpsr_c.global-to-local, align 1
  %v7_f200 = icmp eq i8 %v2_f1fc, -3
  store i1 %v7_f200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f200, label %.thread101, label %dec_label_pc_f210

.thread101:                                       ; preds = %dec_label_pc_f1fc
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f1fc, align 1
  %v0_f20c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f20c.pr.pr, label %.thread104, label %.thread101.dec_label_pc_f210thread-pre-split_crit_edge

.thread101.dec_label_pc_f210thread-pre-split_crit_edge: ; preds = %.thread101
  %v0_f210.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f210

dec_label_pc_f210:                                ; preds = %dec_label_pc_f1fc, %.thread101.dec_label_pc_f210thread-pre-split_crit_edge
  %v0_f210.pr = phi i32 [ %v0_f210.pr.pre, %.thread101.dec_label_pc_f210thread-pre-split_crit_edge ], [ %v3_f1fc, %dec_label_pc_f1fc ]
  %v2_f210 = icmp ugt i32 %v0_f210.pr, 250
  store i1 %v2_f210, i1* %cpsr_c.global-to-local, align 1
  %v7_f210 = icmp eq i32 %v0_f210.pr, 251
  store i1 %v7_f210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f210, label %bb406, label %.thread104

bb406:                                            ; preds = %dec_label_pc_f210
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f218 = load i32, i32* @r5, align 4
  %v4_f218 = inttoptr i32 %v3_f218 to i8*
  store i8 -3, i8* %v4_f218, align 1
  br label %.thread104

.thread104:                                       ; preds = %dec_label_pc_f210, %.thread101, %bb406
  %v0_f21c = load i32, i32* @r4, align 4
  %v1_f21c = add i32 %v0_f21c, 2
  %v2_f21c = inttoptr i32 %v1_f21c to i8*
  %v3_f21c = load i8, i8* %v2_f21c, align 1
  %v4_f21c = zext i8 %v3_f21c to i32
  store i32 %v4_f21c, i32* %r3.global-to-local, align 4
  %v2_f220 = icmp ugt i8 %v3_f21c, -4
  store i1 %v2_f220, i1* %cpsr_c.global-to-local, align 1
  %v7_f220 = icmp eq i8 %v3_f21c, -3
  store i1 %v7_f220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f220, label %.thread105, label %dec_label_pc_f230

.thread105:                                       ; preds = %.thread104
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f21c, align 1
  %v0_f22c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f22c.pr.pr, label %.thread108, label %.thread105.dec_label_pc_f230thread-pre-split_crit_edge

.thread105.dec_label_pc_f230thread-pre-split_crit_edge: ; preds = %.thread105
  %v0_f230.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f230

dec_label_pc_f230:                                ; preds = %.thread104, %.thread105.dec_label_pc_f230thread-pre-split_crit_edge
  %v0_f230.pr = phi i32 [ %v0_f230.pr.pre, %.thread105.dec_label_pc_f230thread-pre-split_crit_edge ], [ %v4_f21c, %.thread104 ]
  %v2_f230 = icmp ugt i32 %v0_f230.pr, 250
  store i1 %v2_f230, i1* %cpsr_c.global-to-local, align 1
  %v7_f230 = icmp eq i32 %v0_f230.pr, 251
  store i1 %v7_f230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f230, label %bb407, label %.thread108

bb407:                                            ; preds = %dec_label_pc_f230
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f238 = load i32, i32* @r4, align 4
  %v4_f238 = add i32 %v3_f238, 2
  %v5_f238 = inttoptr i32 %v4_f238 to i8*
  store i8 -3, i8* %v5_f238, align 1
  br label %.thread108

.thread108:                                       ; preds = %dec_label_pc_f230, %.thread105, %bb407
  %v0_f23c = load i32, i32* @r6, align 4
  %v1_f23c = add i32 %v0_f23c, 4
  %v2_f23c = inttoptr i32 %v1_f23c to i32*
  %v3_f23c = load i32, i32* %v2_f23c, align 4
  store i32 %v3_f23c, i32* %r0.global-to-local, align 4
  %v0_f240 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f248

dec_label_pc_f248:                                ; preds = %dec_label_pc_f474, %.thread108
  %v0_f24c = phi i32 [ %v3_f488, %dec_label_pc_f474 ], [ %v3_f23c, %.thread108 ]
  %storemerge2 = phi i32 [ %v2_f28c, %dec_label_pc_f474 ], [ %v0_f240, %.thread108 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_f474 ], [ 3, %.thread108 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_f24c = call i32 @function_10d74(i32 %v0_f24c, i32 %storemerge2, i32 %storemerge, i32 16384)
  store i32 %v4_f24c, i32* %r0.global-to-local, align 4
  %v0_f250 = load i32, i32* @r6, align 4
  %v1_f250 = add i32 %v0_f250, 24
  %v2_f250 = inttoptr i32 %v1_f250 to i32*
  %v3_f250 = load i32, i32* %v2_f250, align 4
  store i32 %v3_f250, i32* %r2.global-to-local, align 4
  %v0_f254 = load i32, i32* @r8, align 4
  %v1_f254 = add i32 %v0_f254, 3
  store i32 %v1_f254, i32* @r8, align 4
  %v3_f258 = icmp uge i32 %v1_f254, %v3_f250
  store i1 %v3_f258, i1* %cpsr_c.global-to-local, align 1
  %v9_f258 = icmp eq i32 %v1_f254, %v3_f250
  store i1 %v9_f258, i1* %cpsr_z.global-to-local, align 1
  %v0_f25c = load i32, i32* @r4, align 4
  %v1_f25c = add i32 %v0_f25c, 3
  store i32 %v1_f25c, i32* @r4, align 4
  %v5_f260 = icmp slt i32 %v1_f254, %v3_f250
  br i1 %v5_f260, label %dec_label_pc_f1b8, label %dec_label_pc_f264

dec_label_pc_f264:                                ; preds = %dec_label_pc_f1b0.loopexit, %dec_label_pc_f1b8, %dec_label_pc_f248, %dec_label_pc_f1f0, %dec_label_pc_f1c4, %dec_label_pc_f1a4, %dec_label_pc_f274.dec_label_pc_f264.loopexit_crit_edge
  %v6_f26c = phi i32 [ %v0_f2a4, %dec_label_pc_f274.dec_label_pc_f264.loopexit_crit_edge ], [ %v0_e9dc, %dec_label_pc_f1a4 ], [ %v6_f26c224, %dec_label_pc_f1b8 ], [ %v0_f250, %dec_label_pc_f248 ], [ %v6_f26c224, %dec_label_pc_f1f0 ], [ %v6_f26c224, %dec_label_pc_f1c4 ], [ %v6_f26c224, %dec_label_pc_f1b0.loopexit ]
  %v0_f264 = phi i32 [ %v0_f264.pre.pre, %dec_label_pc_f274.dec_label_pc_f264.loopexit_crit_edge ], [ 0, %dec_label_pc_f1a4 ], [ %v1_f1e0, %dec_label_pc_f1b8 ], [ %v1_f254, %dec_label_pc_f248 ], [ %v1_f1e0, %dec_label_pc_f1f0 ], [ %v1_f1e0, %dec_label_pc_f1c4 ], [ %v2_f1e0, %dec_label_pc_f1b0.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f264 = icmp eq i32 %v0_f264, 0
  store i1 %v2_f264, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v0_f264, 1
  br i1 %tmp408, label %dec_label_pc_f104, label %bb409

bb409:                                            ; preds = %dec_label_pc_f264
  store i32 3, i32* @r3, align 4
  %v7_f26c = add i32 %v6_f26c, 12
  %v8_f26c = inttoptr i32 %v7_f26c to i32*
  store i32 3, i32* %v8_f26c, align 4
  br label %dec_label_pc_f104

dec_label_pc_f274:                                ; preds = %dec_label_pc_f1e8
  store i32 %v2_f278, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_159f1.266 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f278, i32* @r0, align 4
  %v0_f290 = call i32 @function_10b70()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f28c, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_159e8.268 to i32), i32* @r1, align 4
  %v0_f2a0 = call i32 @function_10b70()
  store i32 %v0_f2a0, i32* %r0.global-to-local, align 4
  %v0_f2a4 = load i32, i32* @r6, align 4
  %v1_f2a4 = add i32 %v0_f2a4, 24
  %v2_f2a4 = inttoptr i32 %v1_f2a4 to i32*
  %v3_f2a4 = load i32, i32* %v2_f2a4, align 4
  %v0_f2a8 = load i32, i32* @r4, align 4
  %v1_f2a8 = add i32 %v0_f2a8, 2
  store i32 %v1_f2a8, i32* %r2.global-to-local, align 4
  %v0_f2ac = load i32, i32* @fp, align 4
  %v2_f2ac = add i32 %v0_f2ac, %v3_f2a4
  store i32 %v2_f2ac, i32* @r3, align 4
  %v3_f2b0 = icmp uge i32 %v2_f2ac, %v1_f2a8
  store i1 %v3_f2b0, i1* %cpsr_c.global-to-local, align 1
  %v9_f2b0 = icmp eq i32 %v2_f2ac, %v1_f2a8
  store i1 %v9_f2b0, i1* %cpsr_z.global-to-local, align 1
  %v2_f2b4 = xor i1 %v3_f2b0, true
  %v3_f2b4 = or i1 %v9_f2b0, %v2_f2b4
  br i1 %v3_f2b4, label %dec_label_pc_f274.dec_label_pc_f264.loopexit_crit_edge, label %dec_label_pc_f2b8

dec_label_pc_f274.dec_label_pc_f264.loopexit_crit_edge: ; preds = %dec_label_pc_f274
  %v0_f264.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f264

dec_label_pc_f2b8:                                ; preds = %dec_label_pc_f274
  %v2_f2b8 = inttoptr i32 %v1_f2a8 to i8*
  %v3_f2b8 = load i8, i8* %v2_f2b8, align 1
  %v4_f2b8 = zext i8 %v3_f2b8 to i32
  store i32 %v4_f2b8, i32* %r3.global-to-local, align 4
  %v2_f2bc = icmp ugt i8 %v3_f2b8, 30
  store i1 %v2_f2bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f2bc = icmp eq i8 %v3_f2b8, 31
  store i1 %v7_f2bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2bc, label %dec_label_pc_f474, label %dec_label_pc_f2c4

dec_label_pc_f2c4:                                ; preds = %dec_label_pc_f2b8
  %v1_f2c4 = inttoptr i32 %v0_f2a8 to i8*
  %v2_f2c4 = load i8, i8* %v1_f2c4, align 1
  %v3_f2c4 = zext i8 %v2_f2c4 to i32
  store i32 %v3_f2c4, i32* %r3.global-to-local, align 4
  %v2_f2c8 = icmp ugt i8 %v2_f2c4, -4
  store i1 %v2_f2c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2c8 = icmp eq i8 %v2_f2c4, -3
  store i1 %v7_f2c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2c8, label %.thread109, label %dec_label_pc_f2d8

.thread109:                                       ; preds = %dec_label_pc_f2c4
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f2c4, align 1
  %v0_f2d4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f2d4.pr.pr, label %dec_label_pc_f1fc, label %.thread109.dec_label_pc_f2d8thread-pre-split_crit_edge

.thread109.dec_label_pc_f2d8thread-pre-split_crit_edge: ; preds = %.thread109
  %v0_f2d8.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f2d8

dec_label_pc_f2d8:                                ; preds = %dec_label_pc_f2c4, %.thread109.dec_label_pc_f2d8thread-pre-split_crit_edge
  %v0_f2d8.pr = phi i32 [ %v0_f2d8.pr.pre, %.thread109.dec_label_pc_f2d8thread-pre-split_crit_edge ], [ %v3_f2c4, %dec_label_pc_f2c4 ]
  %v2_f2d8 = icmp ugt i32 %v0_f2d8.pr, 250
  store i1 %v2_f2d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2d8 = icmp eq i32 %v0_f2d8.pr, 251
  store i1 %v7_f2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2d8, label %bb410, label %dec_label_pc_f1fc

bb410:                                            ; preds = %dec_label_pc_f2d8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f2e0 = load i32, i32* @r4, align 4
  %v4_f2e0 = inttoptr i32 %v3_f2e0 to i8*
  store i8 -3, i8* %v4_f2e0, align 1
  br label %dec_label_pc_f1fc

dec_label_pc_f2e8:                                ; preds = %dec_label_pc_f0ac, %dec_label_pc_f0cc, %dec_label_pc_f0c4, %dec_label_pc_f0bc, %bb401, %dec_label_pc_f098, %dec_label_pc_f074, %dec_label_pc_f090, %dec_label_pc_f088, %bb400
  %v0_f2e8 = phi i32 [ %v1_f068, %dec_label_pc_f098 ], [ %v1_f068, %dec_label_pc_f074 ], [ %v1_f068, %dec_label_pc_f090 ], [ %v1_f068, %dec_label_pc_f088 ], [ %v1_f068, %bb400 ], [ %v1_f0d8, %bb401 ], [ %v1_f0d8, %dec_label_pc_f0bc ], [ %v1_f0d8, %dec_label_pc_f0c4 ], [ %v1_f0d8, %dec_label_pc_f0cc ], [ %v1_f0d8, %dec_label_pc_f0ac ]
  %v1_f2e8 = add i32 %v0_f2e8, 1
  store i32 %v1_f2e8, i32* @r8, align 4
  br label %dec_label_pc_f2ec

dec_label_pc_f2ec:                                ; preds = %dec_label_pc_f0fc.dec_label_pc_f2ec_crit_edge, %dec_label_pc_f2e8
  %v0_f2ec = phi i32 [ %v0_f2ec.pre, %dec_label_pc_f0fc.dec_label_pc_f2ec_crit_edge ], [ %v0_e9dc, %dec_label_pc_f2e8 ]
  %v1_f2ec = inttoptr i32 %v0_f2ec to i32*
  %v2_f2ec = load i32, i32* %v1_f2ec, align 4
  store i32 %v2_f2ec, i32* %r3.global-to-local, align 4
  %v1_f2f0 = add i32 %v0_f2ec, 4
  %v2_f2f0 = inttoptr i32 %v1_f2f0 to i32*
  %v3_f2f0 = load i32, i32* %v2_f2f0, align 4
  store i32 %v3_f2f0, i32* %r0.global-to-local, align 4
  %v1_f2f4 = add i32 %v2_f2ec, 12
  %v2_f2f4 = inttoptr i32 %v1_f2f4 to i8*
  %v3_f2f4 = load i8, i8* %v2_f2f4, align 1
  %v4_f2f4 = zext i8 %v3_f2f4 to i32
  store i32 %v4_f2f4, i32* %r2.global-to-local, align 4
  %v1_f2f8 = inttoptr i32 %v2_f2ec to i32*
  %v2_f2f8 = load i32, i32* %v1_f2f8, align 4
  store i32 %v2_f2f8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f300 = call i32 @function_10d74(i32 %v3_f2f0, i32 %v2_f2f8, i32 %v4_f2f4, i32 16384)
  store i32 %v4_f300, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f308 = load i32, i32* @r6, align 4
  %v1_f308 = add i32 %v0_f308, 4
  %v2_f308 = inttoptr i32 %v1_f308 to i32*
  %v3_f308 = load i32, i32* %v2_f308, align 4
  store i32 %v3_f308, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f314 = call i32 @function_10d74(i32 %v3_f308, i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32 2, i32 16384)
  store i32 %v4_f314, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f31c = load i32, i32* @r6, align 4
  %v2_f31c = add i32 %v1_f31c, 12
  %v3_f31c = inttoptr i32 %v2_f31c to i32*
  store i32 4, i32* %v3_f31c, align 4
  br label %dec_label_pc_f104

dec_label_pc_f324:                                ; preds = %dec_label_pc_f150, %dec_label_pc_f168, %dec_label_pc_f160, %bb404, %dec_label_pc_f13c, %dec_label_pc_f120, %dec_label_pc_f134, %bb403
  %v0_f324 = phi i32 [ %v1_f114, %dec_label_pc_f13c ], [ %v1_f114, %dec_label_pc_f120 ], [ %v1_f114, %dec_label_pc_f134 ], [ %v1_f114, %bb403 ], [ %v1_f174, %bb404 ], [ %v1_f174, %dec_label_pc_f160 ], [ %v1_f174, %dec_label_pc_f168 ], [ %v1_f174, %dec_label_pc_f150 ]
  %v1_f324 = add i32 %v0_f324, 1
  store i32 %v1_f324, i32* @r8, align 4
  br label %dec_label_pc_f328

dec_label_pc_f328:                                ; preds = %dec_label_pc_f198.dec_label_pc_f328_crit_edge, %dec_label_pc_f324
  %v0_f328 = phi i32 [ %v0_f328.pre, %dec_label_pc_f198.dec_label_pc_f328_crit_edge ], [ %v0_e9dc, %dec_label_pc_f324 ]
  %v1_f328 = inttoptr i32 %v0_f328 to i32*
  %v2_f328 = load i32, i32* %v1_f328, align 4
  store i32 %v2_f328, i32* %r3.global-to-local, align 4
  %v1_f32c = add i32 %v0_f328, 4
  %v2_f32c = inttoptr i32 %v1_f32c to i32*
  %v3_f32c = load i32, i32* %v2_f32c, align 4
  store i32 %v3_f32c, i32* %r0.global-to-local, align 4
  %v1_f330 = add i32 %v2_f328, 13
  %v2_f330 = inttoptr i32 %v1_f330 to i8*
  %v3_f330 = load i8, i8* %v2_f330, align 1
  %v4_f330 = zext i8 %v3_f330 to i32
  store i32 %v4_f330, i32* %r2.global-to-local, align 4
  %v1_f334 = add i32 %v2_f328, 4
  %v2_f334 = inttoptr i32 %v1_f334 to i32*
  %v3_f334 = load i32, i32* %v2_f334, align 4
  store i32 %v3_f334, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f33c = call i32 @function_10d74(i32 %v3_f32c, i32 %v3_f334, i32 %v4_f330, i32 16384)
  store i32 %v4_f33c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f344 = load i32, i32* @r6, align 4
  %v1_f344 = add i32 %v0_f344, 4
  %v2_f344 = inttoptr i32 %v1_f344 to i32*
  %v3_f344 = load i32, i32* %v2_f344, align 4
  store i32 %v3_f344, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f350 = call i32 @function_10d74(i32 %v3_f344, i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), i32 2, i32 16384)
  store i32 %v4_f350, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f358 = load i32, i32* @r6, align 4
  %v2_f358 = add i32 %v1_f358, 12
  %v3_f358 = inttoptr i32 %v2_f358 to i32*
  store i32 5, i32* %v3_f358, align 4
  br label %dec_label_pc_f104

dec_label_pc_f360:                                ; preds = %dec_label_pc_ea80
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_f36c = call i32 @function_f7dc(i32 21)
  store i32 %v2_f01c, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_f37c = call i32 @function_f718(i32 21, i32* nonnull %stack_var_-60)
  store i32 %v3_f37c, i32* %r0.global-to-local, align 4
  %v3_f380 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f37c, i32* %r2.global-to-local, align 4
  %v1_f388 = add i32 %v3_f380, -1
  store i32 %v1_f388, i32* %r3.global-to-local, align 4
  %v0_f38c = load i32, i32* @r6, align 4
  %v1_f38c = add i32 %v0_f38c, 24
  %v2_f38c = inttoptr i32 %v1_f38c to i32*
  %v3_f38c = load i32, i32* %v2_f38c, align 4
  store i32 %v3_f38c, i32* %r1.global-to-local, align 4
  %v0_f390 = load i32, i32* @fp, align 4
  store i32 %v0_f390, i32* %r0.global-to-local, align 4
  %v4_f394 = call i32 @function_fcf0(i32 %v0_f390, i32 %v3_f38c, i32 %v3_f37c, i32 %v1_f388)
  store i32 %v4_f394, i32* @r8, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_f3a0 = call i32 @function_f73c(i32 21)
  store i32 %v1_f3a0, i32* @r0, align 4
  %v0_f3a4 = load i32, i32* @r8, align 4
  %v2_f3a4 = icmp eq i32 %v0_f3a4, -1
  store i1 %v2_f3a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3a4 = icmp eq i32 %v0_f3a4, -1
  store i1 %v7_f3a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3a4, label %dec_label_pc_e958.loopexit, label %dec_label_pc_f3ac

dec_label_pc_f3ac:                                ; preds = %dec_label_pc_f360
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3ac = icmp eq i32 %v0_f3a4, 0
  store i1 %v2_f3ac, i1* %cpsr_z.global-to-local, align 1
  %tmp411 = icmp slt i32 %v0_f3a4, 1
  br i1 %tmp411, label %dec_label_pc_f104, label %dec_label_pc_f3b4

dec_label_pc_f3b4:                                ; preds = %dec_label_pc_f3ac
  %v0_f3b4 = load i32, i32* @r6, align 4
  %v1_f3b4 = add i32 %v0_f3b4, 20
  %v2_f3b4 = inttoptr i32 %v1_f3b4 to i16*
  %v3_f3b4 = load i16, i16* %v2_f3b4, align 2
  %v4_f3b4 = zext i16 %v3_f3b4 to i32
  store i32 %v4_f3b4, i32* %r3.global-to-local, align 4
  %v1_f3b8 = add i32 %v0_f3b4, 16
  %v2_f3b8 = inttoptr i32 %v1_f3b8 to i32*
  %v3_f3b8 = load i32, i32* %v2_f3b8, align 4
  store i32 %v3_f3b8, i32* %r2.global-to-local, align 4
  store i32 %v2_f3bc, i32* @lr, align 4
  store i32 %v4_f3b4, i32* %stack_var_-42, align 4
  store i32 %v3_f3b8, i32* %stack_var_-60, align 4
  %v1_f3c8 = inttoptr i32 %v0_f3b4 to i32*
  %v2_f3c8 = load i32, i32* %v1_f3c8, align 4
  store i32 %v2_f3c8, i32* @sb, align 4
  %v0_f3cc = call i32 @function_10334()
  store i32 %v0_f3cc, i32* %r0.global-to-local, align 4
  %v7_f3d0 = icmp eq i32 %v0_f3cc, -1
  %.422 = zext i1 %v7_f3d0 to i32
  store i32 %.422, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3dc = icmp eq i32 %v0_f3cc, 0
  store i1 %v2_f3dc, i1* %cpsr_z.global-to-local, align 1
  %tmp414 = icmp slt i32 %v0_f3cc, 1
  br i1 %tmp414, label %bb415, label %.thread115

.thread115:                                       ; preds = %dec_label_pc_f3b4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f434

bb415:                                            ; preds = %dec_label_pc_f3b4
  store i32 %.422, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3e8 = icmp eq i1 %v7_f3d0, false
  store i1 %v2_f3e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3e8, label %dec_label_pc_f3f0, label %dec_label_pc_f434

dec_label_pc_f3f0:                                ; preds = %bb415
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f3fc = call i32 @function_10e30(i32 2, i32 1, i32 0)
  store i32 %v3_f3fc, i32* %r0.global-to-local, align 4
  %v2_f400 = icmp eq i32 %v3_f3fc, -1
  store i1 %v2_f400, i1* %cpsr_c.global-to-local, align 1
  %v7_f400 = icmp eq i32 %v3_f3fc, -1
  store i1 %v7_f400, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f3fc, i32* @r7, align 4
  br i1 %v7_f400, label %dec_label_pc_f6ac, label %dec_label_pc_f40c

dec_label_pc_f40c:                                ; preds = %dec_label_pc_f3f0
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_f410 = call i32 @function_f7dc(i32 23)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_f418 = call i32 @function_f7dc(i32 24)
  %v0_f41c = load i32, i32* @sl, align 4
  store i32 %v0_f41c, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v2_f424 = inttoptr i32 %v0_f41c to i32*
  %v3_f424 = call i32 @function_f718(i32 23, i32* %v2_f424)
  store i32 %v3_f424, i32* %r0.global-to-local, align 4
  %v1_f428 = call i32 @function_d54c(i32 %v3_f424)
  store i32 %v1_f428, i32* %r0.global-to-local, align 4
  store i32 %v1_f428, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_f42c = icmp eq i32 %v1_f428, 0
  store i1 %v3_f42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f42c, label %dec_label_pc_f434, label %dec_label_pc_f58c

dec_label_pc_f434:                                ; preds = %.thread115, %dec_label_pc_f40c, %bb415
  %v0_f434 = load i32, i32* @r6, align 4
  %v1_f434 = add i32 %v0_f434, 4
  %v2_f434 = inttoptr i32 %v1_f434 to i32*
  %v3_f434 = load i32, i32* %v2_f434, align 4
  store i32 %v3_f434, i32* %r0.global-to-local, align 4
  %v1_f438 = call i32 @function_10644(i32 %v3_f434)
  store i32 %v1_f438, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r3, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f444 = load i32, i32* @r6, align 4
  %v2_f444 = add i32 %v1_f444, 4
  %v3_f444 = inttoptr i32 %v2_f444 to i32*
  store i32 -1, i32* %v3_f444, align 4
  %v0_f448 = load i32, i32* %r2.global-to-local, align 4
  %v1_f448 = load i32, i32* @r6, align 4
  %v2_f448 = add i32 %v1_f448, 12
  %v3_f448 = inttoptr i32 %v2_f448 to i32*
  store i32 %v0_f448, i32* %v3_f448, align 4
  br label %dec_label_pc_f104

dec_label_pc_f450:                                ; preds = %dec_label_pc_e964
  store i32 %.pre, i32* @r0, align 4
  %v1_f458 = add i32 %v0_f450, 92
  store i32 %v1_f458, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_f460 = call i32 @function_10b60(i32 %.pre, i32 %v1_f458, i32 192)
  store i32 %v3_f460, i32* %r0.global-to-local, align 4
  %v0_f464 = load i32, i32* @r6, align 4
  %v1_f464 = add i32 %v0_f464, 24
  %v2_f464 = inttoptr i32 %v1_f464 to i32*
  %v3_f464 = load i32, i32* %v2_f464, align 4
  %v1_f468 = add i32 %v3_f464, -64
  store i32 %v1_f468, i32* %r3.global-to-local, align 4
  store i32 %v1_f468, i32* %v2_f464, align 4
  br label %dec_label_pc_e974

dec_label_pc_f474:                                ; preds = %dec_label_pc_f2b8
  store i32 %v2_f278, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f480 = add i32 %v0_f2a4, 4
  %v2_f480 = inttoptr i32 %v1_f480 to i32*
  %v3_f480 = load i32, i32* %v2_f480, align 4
  store i32 %v3_f480, i32* %r0.global-to-local, align 4
  %v4_f484 = call i32 @function_10d74(i32 %v3_f480, i32 %v2_f278, i32 3, i32 16384)
  store i32 %v4_f484, i32* %r0.global-to-local, align 4
  %v0_f488 = load i32, i32* @r6, align 4
  %v1_f488 = add i32 %v0_f488, 4
  %v2_f488 = inttoptr i32 %v1_f488 to i32*
  %v3_f488 = load i32, i32* %v2_f488, align 4
  store i32 %v3_f488, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f248

dec_label_pc_f498:                                ; preds = %dec_label_pc_eab8
  %v0_f498 = load i32, i32* @r6, align 4
  store i32 %v0_f498, i32* @r0, align 4
  %v0_f49c = call i32 @function_da7c()
  store i32 %v0_f49c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eaf4

dec_label_pc_f4a4:                                ; preds = %dec_label_pc_e91c
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_f614, i32* %r3.global-to-local, align 4
  store i32 %v2_f01c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v5_f4cc = call i32 @function_10c88(i32 %v3_e910, i32 1, i32 4, i32 %v2_f614, i32 %v2_f01c)
  %v3_f4d0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f4d0, i32* %r3.global-to-local, align 4
  %v2_f4d4 = or i32 %v3_f4d0, %v5_f4cc
  store i32 %v2_f4d4, i32* %r0.global-to-local, align 4
  %v4_f4d4 = icmp eq i32 %v2_f4d4, 0
  store i1 %v4_f4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f4d4, label %dec_label_pc_f4dc, label %dec_label_pc_f570

dec_label_pc_f4dc:                                ; preds = %dec_label_pc_f4a4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_f4e0 = load i32, i32* @r6, align 4
  %v2_f4e0 = add i32 %v1_f4e0, 12
  %v3_f4e0 = inttoptr i32 %v2_f4e0 to i32*
  store i32 2, i32* %v3_f4e0, align 4
  %v0_f4e4 = call i32 @function_d3a8()
  store i32 %v0_f4e4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_1e2a4.121 to i32), i32* %r3.global-to-local, align 4
  %v2_f4ec = load i16, i16* bitcast (i16** @global_var_1e2a4.121 to i16*), align 4
  %v3_f4ec = zext i16 %v2_f4ec to i32
  store i32 %v3_f4ec, i32* %r1.global-to-local, align 4
  %v3_f4f0 = call i32 @function_10210(i32 %v0_f4e4, i32 %v3_f4ec)
  store i32 %v3_f4f0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e274.117 to i32), i32* %r3.global-to-local, align 4
  %v2_f4f8 = load i32, i32* @global_var_1e274.117, align 4
  store i32 %v2_f4f8, i32* %ip.global-to-local, align 4
  %v1_f500 = load i32, i32* @r4, align 4
  %v9_f500 = icmp eq i32 %v2_f4f8, %v1_f500
  store i1 %v9_f500, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_f4ec, i32* %r1.global-to-local, align 4
  %v7_f508 = icmp sgt i32 %v2_f4f8, %v1_f500
  br i1 %v7_f508, label %dec_label_pc_f50c, label %dec_label_pc_f54c

dec_label_pc_f50c:                                ; preds = %dec_label_pc_f4dc
  %v2_f510 = load i32, i32* @global_var_1e2a0.119, align 4
  store i32 %v2_f510, i32* %r3.global-to-local, align 4
  store i32 %v1_f500, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f52c

dec_label_pc_f51c:                                ; preds = %dec_label_pc_f53c, %dec_label_pc_f52c
  %v1_f51c = add i32 %v0_f51c, 1
  store i32 %v1_f51c, i32* %r2.global-to-local, align 4
  %v9_f520 = icmp eq i32 %v1_f51c, %v2_f4f8
  %v1_f524 = add i32 %v0_f524, 16
  store i32 %v1_f524, i32* %r3.global-to-local, align 4
  br i1 %v9_f520, label %dec_label_pc_f54c.loopexit, label %dec_label_pc_f52c

dec_label_pc_f52c:                                ; preds = %dec_label_pc_f51c, %dec_label_pc_f50c
  %v0_f51c = phi i32 [ %v1_f51c, %dec_label_pc_f51c ], [ %v1_f500, %dec_label_pc_f50c ]
  %v0_f524 = phi i32 [ %v1_f524, %dec_label_pc_f51c ], [ %v2_f510, %dec_label_pc_f50c ]
  store i32 %v0_f524, i32* %r0.global-to-local, align 4
  %v1_f530 = add i32 %v0_f524, 8
  %v2_f530 = inttoptr i32 %v1_f530 to i16*
  %v3_f530 = load i16, i16* %v2_f530, align 2
  %v4_f530 = zext i16 %v3_f530 to i32
  store i32 %v4_f530, i32* %r3.global-to-local, align 4
  %tmp416 = icmp ugt i16 %v3_f530, %v2_f4ec
  br i1 %tmp416, label %dec_label_pc_f51c, label %dec_label_pc_f53c

dec_label_pc_f53c:                                ; preds = %dec_label_pc_f52c
  %v1_f53c = add i32 %v0_f524, 10
  %v2_f53c = inttoptr i32 %v1_f53c to i16*
  %v3_f53c = load i16, i16* %v2_f53c, align 2
  %v4_f53c = zext i16 %v3_f53c to i32
  store i32 %v4_f53c, i32* %r3.global-to-local, align 4
  %v3_f540 = icmp uge i16 %v3_f53c, %v2_f4ec
  %v9_f540 = icmp eq i16 %v3_f53c, %v2_f4ec
  %v2_f544 = xor i1 %v3_f540, true
  %v3_f544 = or i1 %v9_f540, %v2_f544
  br i1 %v3_f544, label %dec_label_pc_f51c, label %dec_label_pc_f550.loopexit

dec_label_pc_f54c.loopexit:                       ; preds = %dec_label_pc_f51c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f54c

dec_label_pc_f54c:                                ; preds = %dec_label_pc_f54c.loopexit, %dec_label_pc_f4dc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f550

dec_label_pc_f550.loopexit:                       ; preds = %dec_label_pc_f53c
  store i1 %v3_f540, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f550

dec_label_pc_f550:                                ; preds = %dec_label_pc_f550.loopexit, %dec_label_pc_f54c
  %v0_f564 = phi i32 [ %v0_f524, %dec_label_pc_f550.loopexit ], [ 0, %dec_label_pc_f54c ]
  %v0_f550 = load i32, i32* @r6, align 4
  %v1_f550 = add i32 %v0_f550, 4
  %v2_f550 = inttoptr i32 %v1_f550 to i32*
  %v3_f550 = load i32, i32* %v2_f550, align 4
  %v3_f554 = udiv i32 %v3_f550, 32
  store i32 %v3_f554, i32* %r2.global-to-local, align 4
  %v1_f558 = urem i32 %v3_f550, 32
  store i32 %v1_f558, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f55c = mul nuw nsw i32 %v3_f554, 4
  store i32 %v3_f55c, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f564 = inttoptr i32 %v0_f550 to i32*
  store i32 %v0_f564, i32* %v2_f564, align 4
  %v0_f568 = load i32, i32* %r3.global-to-local, align 4
  %v1_f568 = load i32, i32* @r6, align 4
  %v2_f568 = add i32 %v1_f568, 24
  %v3_f568 = inttoptr i32 %v2_f568 to i32*
  store i32 %v0_f568, i32* %v3_f568, align 4
  %v0_e944.pre = load i32, i32* @ip, align 4
  %v1_e94c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e940

dec_label_pc_f570:                                ; preds = %dec_label_pc_f4a4
  %v0_f570 = load i32, i32* @r6, align 4
  %v1_f570 = add i32 %v0_f570, 4
  %v2_f570 = inttoptr i32 %v1_f570 to i32*
  %v3_f570 = load i32, i32* %v2_f570, align 4
  store i32 %v3_f570, i32* %r0.global-to-local, align 4
  %v1_f574 = call i32 @function_10644(i32 %v3_f570)
  store i32 %v1_f574, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_f57c = load i32, i32* @r4, align 4
  %v1_f57c = load i32, i32* @r6, align 4
  %v2_f57c = add i32 %v1_f57c, 12
  %v3_f57c = inttoptr i32 %v2_f57c to i32*
  store i32 %v0_f57c, i32* %v3_f57c, align 4
  %v0_f580 = load i32, i32* %r3.global-to-local, align 4
  %v1_f580 = load i32, i32* @r6, align 4
  %v2_f580 = add i32 %v1_f580, 4
  %v3_f580 = inttoptr i32 %v2_f580 to i32*
  store i32 %v0_f580, i32* %v3_f580, align 4
  %v0_f584 = load i32, i32* @r4, align 4
  %v1_f584 = trunc i32 %v0_f584 to i8
  %v2_f584 = load i32, i32* @r6, align 4
  %v3_f584 = add i32 %v2_f584, 284
  %v4_f584 = inttoptr i32 %v3_f584 to i8*
  store i8 %v1_f584, i8* %v4_f584, align 1
  br label %dec_label_pc_ea68

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f40c
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v2_f3bc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v1_f598 = add i32 %v1_f428, 4
  %v2_f598 = inttoptr i32 %v1_f598 to i32*
  %v3_f598 = load i32, i32* %v2_f598, align 4
  store i32 %v3_f598, i32* @r4, align 4
  %v0_f59c = call i32 @function_d3a8()
  store i32 %v0_f59c, i32* %r0.global-to-local, align 4
  %v0_f5a0 = load i32, i32* @r5, align 4
  %v1_f5a0 = inttoptr i32 %v0_f5a0 to i8*
  %v2_f5a0 = load i8, i8* %v1_f5a0, align 1
  %v3_f5a0 = zext i8 %v2_f5a0 to i32
  store i32 %v3_f5a0, i32* %r1.global-to-local, align 4
  %v2_f5a4 = call i32 @function_10210(i32 %v0_f59c, i32 %v3_f5a0)
  store i32 %v2_f5a4, i32* %r0.global-to-local, align 4
  %v0_f5a8 = load i32, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_f5a8 = mul nuw nsw i32 %v3_f5a0, 4
  %v5_f5a8 = add i32 %v0_f5a8, %v4_f5a8
  %v6_f5a8 = inttoptr i32 %v5_f5a8 to i32*
  %v7_f5a8 = load i32, i32* %v6_f5a8, align 4
  store i32 %v7_f5a8, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v0_f5b0 = load i32, i32* @sl, align 4
  store i32 %v0_f5b0, i32* %r1.global-to-local, align 4
  %v2_f5b8 = inttoptr i32 %v0_f5b0 to i32*
  %v3_f5b8 = call i32 @function_f718(i32 24, i32* %v2_f5b8)
  store i32 %v2_f3bc, i32* %r2.global-to-local, align 4
  %v0_f5c8 = load i32, i32* @r5, align 4
  store i32 %v0_f5c8, i32* %r0.global-to-local, align 4
  %v1_f5cc = call i32 @function_d524(i32 %v0_f5c8)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_f5d4 = call i32 @function_f73c(i32 23)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_f5dc = call i32 @function_f73c(i32 24)
  %v0_f5e4 = load i32, i32* @r7, align 4
  store i32 %v0_f5e4, i32* %r0.global-to-local, align 4
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f5f0 = call i32 @function_10c18(i32 %v0_f5e4, i32 %v2_f5e8, i32 16)
  store i32 %v3_f5f0, i32* %r0.global-to-local, align 4
  %v3_f5f4 = icmp eq i32 %v3_f5f0, -1
  store i1 %v3_f5f4, i1* %cpsr_c.global-to-local, align 1
  %v8_f5f4 = icmp eq i32 %v3_f5f0, -1
  store i1 %v8_f5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f5f4, label %dec_label_pc_f5fc, label %dec_label_pc_f60c

dec_label_pc_f5fc:                                ; preds = %dec_label_pc_f58c
  %v0_f5fc = load i32, i32* @r7, align 4
  store i32 %v0_f5fc, i32* %r0.global-to-local, align 4
  %v1_f600 = call i32 @function_10644(i32 %v0_f5fc)
  %v0_f604 = load i32, i32* @sl, align 4
  store i32 %v0_f604, i32* %r0.global-to-local, align 4
  %v1_f608 = call i32 @function_12488(i32 %v0_f604)
  store i32 %v1_f608, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f60c

dec_label_pc_f60c:                                ; preds = %dec_label_pc_f58c, %dec_label_pc_f5fc
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_f614, i32* %r1.global-to-local, align 4
  %v0_f618 = load i32, i32* @r7, align 4
  store i32 %v0_f618, i32* %r0.global-to-local, align 4
  %v0_f61c = load i32, i32* @sl, align 4
  store i32 %v0_f61c, i32* %stack_var_-56, align 4
  %v5_f620 = call i32 @function_10d74(i32 %v0_f618, i32 %v2_f614, i32 1, i32 16384)
  store i32 %v2_f01c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f634 = load i32, i32* @r7, align 4
  store i32 %v0_f634, i32* %r0.global-to-local, align 4
  %v4_f638 = call i32 @function_10d74(i32 %v0_f634, i32 %v2_f01c, i32 4, i32 16384)
  store i32 %v2_f640, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f64c = load i32, i32* @r7, align 4
  store i32 %v0_f64c, i32* %r0.global-to-local, align 4
  %v4_f650 = call i32 @function_10d74(i32 %v0_f64c, i32 %v2_f640, i32 2, i32 16384)
  %v0_f654 = load i32, i32* @sb, align 4
  %v1_f654 = add i32 %v0_f654, 12
  store i32 %v1_f654, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f660 = load i32, i32* @r7, align 4
  store i32 %v0_f660, i32* %r0.global-to-local, align 4
  %v4_f664 = call i32 @function_10d74(i32 %v0_f660, i32 %v1_f654, i32 1, i32 16384)
  store i32 %v4_f664, i32* %r0.global-to-local, align 4
  %v0_f668 = load i32, i32* @sb, align 4
  %v1_f668 = inttoptr i32 %v0_f668 to i32*
  %v2_f668 = load i32, i32* %v1_f668, align 4
  store i32 %v2_f668, i32* %r1.global-to-local, align 4
  %v1_f66c = add i32 %v0_f668, 12
  %v2_f66c = inttoptr i32 %v1_f66c to i8*
  %v3_f66c = load i8, i8* %v2_f66c, align 1
  %v4_f66c = zext i8 %v3_f66c to i32
  store i32 %v4_f66c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f674 = load i32, i32* @r7, align 4
  store i32 %v0_f674, i32* %r0.global-to-local, align 4
  %v4_f678 = call i32 @function_10d74(i32 %v0_f674, i32 %v2_f668, i32 %v4_f66c, i32 16384)
  %v0_f67c = load i32, i32* @sb, align 4
  %v1_f67c = add i32 %v0_f67c, 13
  store i32 %v1_f67c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f688 = load i32, i32* @r7, align 4
  store i32 %v0_f688, i32* %r0.global-to-local, align 4
  %v4_f68c = call i32 @function_10d74(i32 %v0_f688, i32 %v1_f67c, i32 1, i32 16384)
  %v0_f690 = load i32, i32* @r7, align 4
  store i32 %v0_f690, i32* %r0.global-to-local, align 4
  %v0_f694 = load i32, i32* @sb, align 4
  %v1_f694 = add i32 %v0_f694, 13
  %v2_f694 = inttoptr i32 %v1_f694 to i8*
  %v3_f694 = load i8, i8* %v2_f694, align 1
  %v4_f694 = zext i8 %v3_f694 to i32
  store i32 %v4_f694, i32* %r2.global-to-local, align 4
  %v1_f698 = add i32 %v0_f694, 4
  %v2_f698 = inttoptr i32 %v1_f698 to i32*
  %v3_f698 = load i32, i32* %v2_f698, align 4
  store i32 %v3_f698, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f6a0 = call i32 @function_10d74(i32 %v0_f690, i32 %v3_f698, i32 %v4_f694, i32 16384)
  %v0_f6a4 = load i32, i32* @r7, align 4
  store i32 %v0_f6a4, i32* %r0.global-to-local, align 4
  %v1_f6a8 = call i32 @function_10644(i32 %v0_f6a4)
  store i32 %v1_f6a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6ac

dec_label_pc_f6ac:                                ; preds = %dec_label_pc_f3f0, %dec_label_pc_f60c
  %v0_f6ac = load i32, i32* @sl, align 4
  store i32 %v0_f6ac, i32* %r0.global-to-local, align 4
  %v1_f6b0 = call i32 @function_12488(i32 %v0_f6ac)
  store i32 %v1_f6b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6b4

dec_label_pc_f6b4:                                ; preds = %dec_label_pc_f0e0, %dec_label_pc_f6ac
  %v0_f6b4 = load i32, i32* @fp, align 4
  store i32 %v0_f6b4, i32* %r0.global-to-local, align 4
  %v0_f6b8 = load i32, i32* @r6, align 4
  %v1_f6b8 = add i32 %v0_f6b8, 24
  %v2_f6b8 = inttoptr i32 %v1_f6b8 to i32*
  %v3_f6b8 = load i32, i32* %v2_f6b8, align 4
  store i32 %v3_f6b8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_159cc.273 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_f6c4 = call i32 @function_fcf0(i32 %v0_f6b4, i32 %v3_f6b8, i32 ptrtoint ([6 x i8]* @global_var_159cc.273 to i32), i32 5)
  store i32 %v5_f6c4, i32* %r0.global-to-local, align 4
  %v3_f6c8 = icmp eq i32 %v5_f6c4, -1
  store i1 %v3_f6c8, i1* %cpsr_c.global-to-local, align 1
  %v8_f6c8 = icmp eq i32 %v5_f6c4, -1
  store i1 %v8_f6c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_f6c4, i32* @r8, align 4
  br i1 %v3_f6c8, label %dec_label_pc_e958.loopexit, label %dec_label_pc_f0fc

dec_label_pc_f6d8:                                ; preds = %dec_label_pc_e7b4
  store i32 %v3_f6d8, i32* %r0.global-to-local, align 4
  %v3_f6dc = udiv i32 %v3_f6d8, 32
  %v3_f6e0 = mul nuw nsw i32 %v3_f6dc, 4
  store i32 %v2_f6e4, i32* @lr, align 4
  %v2_f6e8 = add i32 %v3_f6e0, %v2_f6e4
  store i32 %v2_f6e8, i32* %r3.global-to-local, align 4
  %v1_f6ec = add i32 %v2_f6e8, -312
  %v2_f6ec = inttoptr i32 %v1_f6ec to i32*
  %v3_f6ec = load i32, i32* %v2_f6ec, align 4
  %v1_f6f0 = urem i32 %v3_f6d8, 32
  store i32 %v1_f6f0, i32* %r1.global-to-local, align 4
  %v7_f6f4 = shl i32 1, %v1_f6f0
  %v8_f6f4 = or i32 %v3_f6ec, %v7_f6f4
  store i32 %v8_f6f4, i32* %r2.global-to-local, align 4
  %v0_f6f8 = load i32, i32* @r5, align 4
  %v3_f6f8 = icmp uge i32 %v0_f6f8, %v3_f6d8
  store i1 %v3_f6f8, i1* %cpsr_c.global-to-local, align 1
  %v9_f6f8 = icmp eq i32 %v0_f6f8, %v3_f6d8
  store i1 %v9_f6f8, i1* %cpsr_z.global-to-local, align 1
  %v5_f6fc = icmp slt i32 %v0_f6f8, %v3_f6d8
  br i1 %v5_f6fc, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_f6d8
  store i32 %v3_f6d8, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_f6d8, %bb417
  store i32 %v8_f6f4, i32* %v2_f6ec, align 4
  br label %bb369

dec_label_pc_f708:                                ; preds = %dec_label_pc_ea14
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_e97c, align 4
  br label %dec_label_pc_ea30

; uselistorder directives
  uselistorder i32 %v0_f6f8, { 0, 2, 1 }
  uselistorder i32 %v1_f6f0, { 1, 0 }
  uselistorder i32 %v5_f6c4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_f550, { 1, 0 }
  uselistorder i1 %v3_f540, { 1, 0 }
  uselistorder i32 %v0_f524, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_f4f8, { 0, 2, 1, 3 }
  uselistorder i32 %v3_f488, { 1, 0 }
  uselistorder i1 %v7_f400, { 1, 0 }
  uselistorder i32 %v3_f3fc, { 1, 0, 2, 3 }
  uselistorder i1 %v2_f3e8, { 1, 0 }
  uselistorder i32 %.422, { 1, 0 }
  uselistorder i1 %v7_f3d0, { 1, 0 }
  uselistorder i32 %v0_f3cc, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f3a4, { 1, 0 }
  uselistorder i32 %v0_f3a4, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f328, { 1, 0 }
  uselistorder i32 %v0_f2ec, { 1, 0 }
  uselistorder i32 %v0_f2d8.pr, { 1, 0 }
  uselistorder i32 %v0_f2a4, { 1, 2, 0 }
  uselistorder i32 %v0_f264, { 1, 0 }
  uselistorder i32 %v1_f25c, { 1, 0 }
  uselistorder i32 %v1_f254, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f250, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f250, { 0, 2, 1 }
  uselistorder i32 %v0_f230.pr, { 1, 0 }
  uselistorder i32 %v0_f210.pr, { 1, 0 }
  uselistorder i1 %v7_f1e8, { 1, 0 }
  uselistorder i1 %v2_f1d8, { 1, 0, 2 }
  uselistorder i1 %v2_f1bc, { 1, 0, 2 }
  uselistorder i32 %v1_f1dc, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f1b0, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f1e0, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v7_f18c, { 1, 0 }
  uselistorder i32 %v5_f188, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32 %v1_f174, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f174, { 0, 2, 1 }
  uselistorder i32 %v0_f16c, { 1, 0 }
  uselistorder i1 %v7_f168, { 1, 0 }
  uselistorder i1 %v7_f160, { 1, 0 }
  uselistorder i1 %v8_f158, { 1, 0 }
  uselistorder i1 %v7_f13c, { 1, 0 }
  uselistorder i1 %v7_f134, { 1, 0 }
  uselistorder i1 %v8_f12c, { 1, 0 }
  uselistorder i32 %v1_f114, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i32 %v3_f110, { 1, 0, 2, 3 }
  uselistorder i32 %v0_f0fc, { 1, 0 }
  uselistorder i1 %v7_f0f0, { 1, 0 }
  uselistorder i32 %v5_f0ec, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_f0d8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f0d8, { 0, 2, 1 }
  uselistorder i32 %v0_f0d0, { 1, 0 }
  uselistorder i1 %v7_f0cc, { 1, 0 }
  uselistorder i1 %v7_f0c4, { 1, 0 }
  uselistorder i1 %v7_f0bc, { 1, 0 }
  uselistorder i1 %v8_f0b4, { 1, 0 }
  uselistorder i1 %v7_f098, { 1, 0 }
  uselistorder i1 %v7_f090, { 1, 0 }
  uselistorder i1 %v7_f088, { 1, 0 }
  uselistorder i1 %v8_f080, { 1, 0 }
  uselistorder i32 %v1_f068, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v3_f064, { 1, 0, 2, 3 }
  uselistorder i1 %v8_f004, { 1, 0 }
  uselistorder i8 %v3_effc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eff4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_eff4, { 0, 2, 1 }
  uselistorder i32 %v0_efec, { 1, 0 }
  uselistorder i1 %v7_efe8, { 1, 0 }
  uselistorder i1 %v7_efe0, { 1, 0 }
  uselistorder i1 %v7_efd8, { 1, 0 }
  uselistorder i1 %v7_efc4, { 1, 0 }
  uselistorder i1 %v7_efbc, { 1, 0 }
  uselistorder i1 %v7_efb4, { 1, 0 }
  uselistorder i1 %v8_efac, { 1, 0 }
  uselistorder i32 %v1_ef94, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_ef30, { 1, 0 }
  uselistorder i8 %v3_ef28, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ef20, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ef20, { 0, 2, 1 }
  uselistorder i32 %v0_ef18, { 1, 0 }
  uselistorder i1 %v7_ef14, { 1, 0 }
  uselistorder i1 %v7_ef0c, { 1, 0 }
  uselistorder i1 %v7_ef04, { 1, 0 }
  uselistorder i1 %v7_eef0, { 1, 0 }
  uselistorder i1 %v7_eee8, { 1, 0 }
  uselistorder i1 %v7_eee0, { 1, 0 }
  uselistorder i1 %v8_eed8, { 1, 0 }
  uselistorder i32 %v1_eec0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_ee5c, { 1, 0 }
  uselistorder i8 %v3_ee54, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ee4c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ee4c, { 0, 2, 1 }
  uselistorder i32 %v0_ee44, { 1, 0 }
  uselistorder i1 %v7_ee40, { 1, 0 }
  uselistorder i1 %v7_ee38, { 1, 0 }
  uselistorder i1 %v7_ee30, { 1, 0 }
  uselistorder i1 %v7_ee1c, { 1, 0 }
  uselistorder i1 %v7_ee14, { 1, 0 }
  uselistorder i1 %v7_ee0c, { 1, 0 }
  uselistorder i1 %v8_ee04, { 1, 0 }
  uselistorder i32 %v1_edec, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_ed88, { 1, 0 }
  uselistorder i8 %v3_ed80, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ed78, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ed78, { 0, 2, 1 }
  uselistorder i32 %v0_ed70, { 1, 0 }
  uselistorder i1 %v7_ed6c, { 1, 0 }
  uselistorder i1 %v7_ed64, { 1, 0 }
  uselistorder i1 %v7_ed5c, { 1, 0 }
  uselistorder i1 %v7_ec28, { 1, 0 }
  uselistorder i1 %v7_ec20, { 1, 0 }
  uselistorder i1 %v7_ec18, { 1, 0 }
  uselistorder i1 %v8_ec10, { 1, 0 }
  uselistorder i32 %v1_ebf8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_eb94, { 1, 0 }
  uselistorder i8 %v3_eb8c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eb84, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_eb84, { 0, 2, 1 }
  uselistorder i32 %v0_eb7c, { 1, 0 }
  uselistorder i1 %v7_eb78, { 1, 0 }
  uselistorder i1 %v7_eb70, { 1, 0 }
  uselistorder i1 %v7_eb68, { 1, 0 }
  uselistorder i1 %v7_eb54, { 1, 0 }
  uselistorder i1 %v7_eb4c, { 1, 0 }
  uselistorder i1 %v7_eb44, { 1, 0 }
  uselistorder i1 %v8_eb3c, { 1, 0 }
  uselistorder i32 %v1_eb24, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_eb10, { 1, 2, 0 }
  uselistorder i32 %v2_eafc, { 1, 0 }
  uselistorder i32 %v0_eafc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_eaf8, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_ead0, { 2, 1, 0 }
  uselistorder i1 %v7_eab0, { 1, 0 }
  uselistorder i32 %v1_ea6c, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_ea50, { 1, 0 }
  uselistorder i32 %v1_ea40, { 2, 1, 0 }
  uselistorder i32 %v1_ea3c, { 1, 0 }
  uselistorder i32 %v3_e9dc, { 1, 2, 3, 0 }
  uselistorder i32 %v0_e9dc, { 22, 20, 4, 0, 19, 5, 6, 23, 7, 8, 21, 9, 10, 24, 11, 12, 27, 13, 14, 25, 15, 16, 26, 17, 18, 28, 29, 3, 2, 1 }
  uselistorder i32 %v1_e9b8, { 1, 2, 3, 0 }
  uselistorder i32 %v3_e9b4, { 1, 0 }
  uselistorder i32 %v4_e998, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_e984, { 1, 0, 2 }
  uselistorder i32 %v3_e980, { 1, 0, 2 }
  uselistorder i32 %v0_f450, { 1, 0, 2 }
  uselistorder i32 %v3_e948, { 1, 0 }
  uselistorder i32 %v1_e930, { 3, 2, 1, 0 }
  uselistorder i32 %v3_e92c, { 1, 0 }
  uselistorder i32 %v3_e924, { 1, 2, 0 }
  uselistorder i1 %v7_e914, { 1, 0 }
  uselistorder i32 %v3_e910, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_e904, { 1, 0 }
  uselistorder i32 %v2_f614, { 2, 3, 1, 0 }
  uselistorder i32 %v2_f01c, { 4, 5, 1, 0, 3, 10, 7, 9, 8, 6, 2 }
  uselistorder i32 %v2_f28c, { 1, 0 }
  uselistorder i32 %v1_e8ac, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e8ac, { 0, 1, 3, 2 }
  uselistorder i32 %v1_e878, { 2, 1, 0 }
  uselistorder i32 %v1_e874, { 1, 0 }
  uselistorder i1 %v2_e854, { 1, 0, 2 }
  uselistorder i32 %v0_e850, { 1, 0, 2 }
  uselistorder i1 %v7_e81c, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_e81c, { 1, 0, 2 }
  uselistorder i32 %v2_e814, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_e808, { 1, 0, 2 }
  uselistorder i32 %v0_e80c, { 1, 0 }
  uselistorder i32 %v1_e7f0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_e7e4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e7e4, { 0, 2, 1 }
  uselistorder i32 %v1_e7d4, { 1, 0 }
  uselistorder i32 %v3_f6d8, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v2_f6e4, { 0, 7, 1, 5, 2, 4, 3, 6 }
  uselistorder i32 %stack_var_-1876.0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e720, { 1, 0 }
  uselistorder i32 %v1_e708, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e714, { 0, 3, 2, 1 }
  uselistorder i32 %v0_e6c4, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_e6b8, { 2, 1, 0 }
  uselistorder i32 %v1_e698, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_e674, { 1, 0 }
  uselistorder i1 %v9_e640, { 1, 0 }
  uselistorder i32 %v1_e590, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_e540, { 1, 0 }
  uselistorder i32 %v5_e4d8, { 1, 0 }
  uselistorder i32 %v3_e4c8, { 1, 2, 0 }
  uselistorder i16 %v4_e4c4, { 1, 0 }
  uselistorder i32 %v3_e4c4, { 1, 0 }
  uselistorder i1 %v2_e420, { 1, 0 }
  uselistorder i1 %v3_e404, { 1, 0, 2 }
  uselistorder i1 %v2_e3f0, { 1, 0 }
  uselistorder i1 %v2_e3cc, { 1, 0 }
  uselistorder i32 %v1_e37c, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e368, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e364, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_e34c, { 1, 0 }
  uselistorder i32 %v0_e620, { 0, 1, 2, 3, 6, 7, 10, 9, 4, 5, 8, 12, 11 }
  uselistorder i32 %stack_var_-1880.0, { 0, 3, 2, 1 }
  uselistorder i16 %v5_de04.le, { 0, 2, 1 }
  uselistorder i32 %v0_dde8, { 2, 0, 1 }
  uselistorder i1 %v7_dd88, { 1, 0 }
  uselistorder i32 %v3_dd80, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_dd6c, { 1, 0 }
  uselistorder i32 %v2_dd50, { 1, 0, 2 }
  uselistorder i32 %v0_dd3c, { 1, 2, 0 }
  uselistorder i32 %storemerge294, { 1, 0 }
  uselistorder i32 %v0_dcb0, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-96, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-68, { 1, 0 }
  uselistorder i32* %stack_var_-224, { 1, 0 }
  uselistorder i32* %stack_var_-352, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 7, 8, 9, 5, 10, 0, 11, 3, 12, 1, 13, 2, 14, 4, 15, 6, 16 }
  uselistorder i32 %tmp300, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 72, 73, 60, 61, 62, 63, 64, 65, 66, 67, 68, 74, 75, 76, 77, 78, 80, 79, 81, 82, 83, 85, 84, 86, 0, 87, 140, 69, 70, 14, 15, 16, 59, 57, 58, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56, 71, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 113, 110, 115, 157, 158, 116, 117, 159, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 156, 134, 135, 136, 137, 139, 138, 142, 141, 155, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154 }
  uselistorder i32* %r2.global-to-local, { 50, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 51, 52, 53, 54, 0, 43, 44, 45, 46, 47, 5, 6, 31, 32, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 169, 170, 70, 71, 73, 72, 69, 171, 74, 172, 75, 174, 175, 76, 77, 78, 79, 80, 81, 82, 83, 84, 64, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 173, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168 }
  uselistorder i32* %r1.global-to-local, { 52, 53, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 58, 1, 46, 47, 48, 49, 3, 4, 32, 33, 0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 157, 158, 50, 51, 59, 60, 61, 62, 63, 65, 66, 67, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 159, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156 }
  uselistorder i32* %r0.global-to-local, { 113, 64, 63, 66, 65, 68, 67, 70, 69, 71, 73, 72, 74, 75, 76, 77, 78, 79, 81, 80, 82, 84, 83, 85, 86, 88, 87, 117, 114, 115, 116, 118, 120, 119, 89, 0, 2, 1, 122, 91, 90, 92, 94, 93, 95, 96, 98, 97, 99, 100, 101, 103, 102, 104, 8, 7, 10, 9, 60, 59, 62, 61, 3, 6, 4, 14, 11, 12, 13, 18, 15, 16, 17, 19, 21, 20, 23, 22, 25, 24, 26, 27, 29, 28, 31, 30, 33, 32, 34, 35, 37, 36, 39, 38, 41, 40, 42, 43, 45, 44, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 106, 108, 107, 109, 105, 110, 111, 112, 121, 125, 123, 124, 131, 126, 127, 128, 152, 129, 130, 132, 134, 133, 135, 140, 136, 139, 137, 138, 141, 143, 144, 142, 246, 145, 146, 149, 147, 148, 151, 150, 5, 245, 154, 153, 155, 157, 156, 159, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 233, 235, 240, 236, 237, 238, 239, 241, 242, 243, 244 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 6, 4, 5, 7, 22, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21 }
  uselistorder i1* %cpsr_z.global-to-local, { 123, 110, 111, 209, 210, 124, 125, 112, 113, 114, 25, 115, 117, 118, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 186, 23, 24, 30, 26, 27, 28, 29, 31, 32, 33, 34, 35, 116, 109, 36, 42, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 49, 50, 51, 55, 56, 57, 58, 59, 60, 64, 65, 66, 61, 62, 63, 67, 68, 69, 70, 71, 72, 76, 77, 78, 73, 74, 75, 79, 80, 81, 82, 83, 84, 88, 89, 90, 85, 86, 87, 91, 92, 93, 94, 95, 96, 100, 101, 102, 97, 98, 99, 103, 104, 105, 106, 107, 108, 119, 120, 121, 122, 126, 128, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 0, 218, 194, 202, 138, 139, 140, 141, 143, 142, 144, 145, 146, 149, 151, 152, 150, 147, 148, 211, 212, 207, 153, 208, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 17, 187, 188, 189, 190, 191, 12, 192, 193, 195, 8, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 214, 215, 216, 213, 217 }
  uselistorder i1* %cpsr_c.global-to-local, { 120, 107, 108, 109, 121, 203, 204, 122, 110, 111, 112, 20, 113, 115, 116, 1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 170, 21, 22, 27, 23, 24, 25, 26, 28, 29, 30, 31, 32, 114, 106, 33, 39, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 49, 50, 51, 46, 47, 48, 52, 53, 54, 55, 56, 57, 61, 62, 63, 58, 59, 60, 64, 65, 66, 67, 68, 69, 73, 74, 75, 70, 71, 72, 76, 77, 78, 79, 80, 81, 85, 86, 87, 82, 83, 84, 88, 89, 90, 91, 92, 93, 97, 98, 99, 94, 95, 96, 100, 101, 102, 103, 104, 105, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 0, 212, 183, 190, 135, 136, 137, 138, 139, 140, 141, 144, 146, 147, 145, 142, 143, 205, 206, 201, 148, 202, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 11, 180, 181, 182, 184, 185, 8, 186, 187, 188, 6, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 208, 209, 210, 207, 211 }
  uselistorder i16* bitcast (i16** @global_var_1e2a4.121 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1e2a4.121, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1e2a4.121 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10c88, { 1, 0 }
  uselistorder i32 23, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 4, 5 }
  uselistorder i8 30, { 4, 0, 1, 5, 2, 3 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_159d4.260 to i32), { 5, 7, 6, 8, 0, 9, 3, 10, 1, 11, 2, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10d74, { 12, 11, 10, 9, 8, 7, 6, 28, 26, 25, 14, 13, 27, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11 }
  uselistorder i8 34, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 36, { 4, 5, 0, 1, 2, 3, 6, 7, 8, 9, 18, 19, 20, 21, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25 }
  uselistorder i8 35, { 4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 20, 21, 22, 23, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27 }
  uselistorder i8 58, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13, 14, 15 }
  uselistorder i8 57, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 62, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 61, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i32 (i32)* @function_f73c, { 18, 17, 16, 23, 22, 21, 20, 19, 15, 2, 1, 0, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_fcf0, { 2, 1, 4, 3, 0 }
  uselistorder i32 (i32, i32*)* @function_f718, { 5, 6, 7, 0, 1, 2, 3, 4, 8, 26, 27, 28, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 (i32)* @function_f7dc, { 18, 17, 16, 23, 22, 21, 20, 19, 15, 2, 1, 0, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10d00, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10368, { 1, 2, 0 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_da7c, { 2, 1, 0 }
  uselistorder i32 254, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 5, { 11, 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_10d38, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_10dac, { 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_bfc8, { 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_1e290.255, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e28c.133 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @function_bf78, { 10, 9, 2, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_1e282.252 to i16*), { 1, 0, 2 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 29, { 1, 0 }
  uselistorder i32 223, { 2, 0, 1 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_159a4.242 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_1599c.240 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15994.238 to i32), { 0, 5, 1, 6, 2, 3, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_158e8.206 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_158c4.200 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_158a4.192 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_1589c.190 to i32), { 0, 19, 1, 20, 2, 21, 3, 22, 4, 23, 5, 24, 6, 7, 8, 25, 9, 26, 10, 27, 11, 28, 12, 29, 13, 30, 14, 31, 15, 32, 16, 33, 17, 34, 18, 35 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_1585c.174 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15830.166 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15814.160 to i32), { 0, 5, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_1580c.158 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15804.156 to i32), { 0, 1, 2, 7, 3, 8, 4, 9, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_157f8.152 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_157ec.146 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32, i32)* @function_db44, { 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_157e4.144 to i32), { 0, 36, 1, 37, 2, 38, 3, 39, 4, 40, 5, 41, 6, 42, 7, 43, 8, 44, 9, 45, 10, 46, 11, 47, 12, 48, 13, 49, 14, 50, 15, 51, 16, 52, 17, 53, 18, 54, 19, 55, 20, 56, 21, 57, 22, 58, 23, 59, 24, 60, 25, 61, 26, 62, 27, 63, 28, 64, 29, 65, 30, 66, 31, 32, 33, 67, 34, 68, 35, 69 }
  uselistorder i32 ptrtoint (i32* @global_var_1596c.142 to i32), { 1, 6, 2, 7, 3, 8, 4, 9, 5, 10, 0, 11 }
  uselistorder i8* @global_var_1e299.139, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 1, 0, 2 }
  uselistorder i8 6, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i8 16, { 0, 1, 2, 4, 3, 12, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i16* @global_var_1e28c.133, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_1e28c.133 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_1e298.134, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_1e278.130, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e278.130 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_d3a8, { 65, 63, 62, 61, 60, 59, 58, 64, 57, 11, 10, 56, 55, 54, 53, 52, 15, 14, 13, 12, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10dec, { 9, 1, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 2048, { 6, 5, 2, 3, 4, 0, 1, 7, 8, 9 }
  uselistorder i32* @global_var_202f8.128, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_202f4.126, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 2, 3, 6, 0, 1, 4, 5, 7 }
  uselistorder i32* @global_var_1e2a8.115, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @function_102c4, { 0, 1, 2, 3, 4, 5, 6, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24 }
  uselistorder i32 (i32)* @function_d404, { 1, 0 }
  uselistorder i32* @global_var_202dc.42, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32 ptrtoint (i32* @global_var_202dc.42 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_fef4, { 2, 1, 0 }
  uselistorder i32* @global_var_202fc.113, { 0, 2, 1 }
  uselistorder i32 ()* @function_10334, { 5, 4, 1, 0, 3, 2 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_f6b4, { 1, 0 }
  uselistorder label %dec_label_pc_f6ac, { 1, 0 }
  uselistorder label %dec_label_pc_f60c, { 1, 0 }
  uselistorder label %dec_label_pc_f434, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f328, { 1, 0 }
  uselistorder label %dec_label_pc_f324, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f2ec, { 1, 0 }
  uselistorder label %dec_label_pc_f2e8, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f2d8, { 1, 0 }
  uselistorder label %dec_label_pc_f264, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread108, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f230, { 1, 0 }
  uselistorder label %.thread104, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f210, { 1, 0 }
  uselistorder label %dec_label_pc_f1fc, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f1b8, { 1, 0 }
  uselistorder label %dec_label_pc_f1b8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f174, { 1, 0 }
  uselistorder label %dec_label_pc_f104, { 7, 4, 5, 6, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f0d8, { 1, 0 }
  uselistorder label %dec_label_pc_f00c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_eff4, { 1, 0 }
  uselistorder label %dec_label_pc_ef38, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ef20, { 1, 0 }
  uselistorder label %dec_label_pc_ee64, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ee4c, { 1, 0 }
  uselistorder label %dec_label_pc_ed90, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ed78, { 1, 0 }
  uselistorder label %dec_label_pc_eb9c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_eb84, { 1, 0 }
  uselistorder label %dec_label_pc_ea68, { 6, 7, 3, 1, 0, 2, 4, 5 }
  uselistorder label %bb381, { 1, 0 }
  uselistorder label %bb379, { 1, 0 }
  uselistorder label %dec_label_pc_ea30, { 1, 0 }
  uselistorder label %dec_label_pc_e9c4, { 1, 0 }
  uselistorder label %.thread62, { 1, 0 }
  uselistorder label %dec_label_pc_e974, { 1, 0 }
  uselistorder label %dec_label_pc_e964, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e95cthread-pre-split.thread512, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_e95cthread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e964.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_e958.loopexit, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_e940, { 1, 0 }
  uselistorder label %dec_label_pc_e894, { 1, 0 }
  uselistorder label %bb375, { 1, 0 }
  uselistorder label %bb373, { 1, 0 }
  uselistorder label %bb371, { 1, 0 }
  uselistorder label %bb369, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_e788.dec_label_pc_e788_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e764.dec_label_pc_e764_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e758, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_e750, { 1, 0 }
  uselistorder label %dec_label_pc_e72c, { 1, 0 }
  uselistorder label %dec_label_pc_e708, { 1, 0 }
  uselistorder label %dec_label_pc_e5b8, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_e5a4, { 1, 0 }
  uselistorder label %bb366, { 1, 0 }
  uselistorder label %dec_label_pc_e430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e40c, { 1, 0 }
  uselistorder label %dec_label_pc_e400, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e3dc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e3b8, { 1, 0 }
  uselistorder label %bb340, { 1, 0 }
  uselistorder label %dec_label_pc_e364, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_dde8, { 1, 0 }
}

define i32 @function_f718(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f718:
  store i32 ptrtoint (i32* @global_var_20304.275 to i32), i32* @r2, align 4
  %v3_f71c = mul i32 %arg1, 8
  %v2_f720 = add i32 %v3_f71c, ptrtoint (i32* @global_var_20304.275 to i32)
  store i32 %v2_f720, i32* @r3, align 4
  %v2_f724 = icmp eq i32* %arg2, null
  br i1 %v2_f724, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_f718
  %v3_f72c4 = inttoptr i32 %v2_f720 to i32*
  %v4_f72c5 = load i32, i32* %v3_f72c4, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_f718
  %v2_f728 = add i32 %v3_f71c, add (i32 ptrtoint (i32* @global_var_20304.275 to i32), i32 4)
  %v3_f728 = inttoptr i32 %v2_f728 to i16*
  %v4_f728 = load i16, i16* %v3_f728, align 4
  %v5_f728 = zext i16 %v4_f728 to i32
  store i32 %v5_f728, i32* @r3, align 4
  %v3_f72c = inttoptr i32 %v2_f720 to i32*
  %v4_f72c = load i32, i32* %v3_f72c, align 4
  store i32 %v5_f728, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_f72c6 = phi i32 [ %v4_f72c5, %.thread ], [ %v4_f72c, %bb ]
  ret i32 %v4_f72c6

; uselistorder directives
  uselistorder i32 %v2_f720, { 1, 0, 2 }
  uselistorder i32 %v3_f71c, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_f73c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f73c:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f744 = mul i32 %arg1, 8
  %v2_f748 = add i32 %v3_f744, ptrtoint (i32* @global_var_20304.275 to i32)
  %v2_f74c = load i32, i32* inttoptr (i32 123028 to i32*), align 4
  %v1_f750 = add i32 %v3_f744, add (i32 ptrtoint (i32* @global_var_20304.275 to i32), i32 4)
  %v2_f750 = inttoptr i32 %v1_f750 to i16*
  %v3_f750 = load i16, i16* %v2_f750, align 4
  %v3_f754 = udiv i32 %v2_f74c, 256
  store i32 %v3_f754, i32* @r2, align 4
  %v2_f758 = icmp eq i16 %v3_f750, 0
  store i1 %v2_f758, i1* @cpsr_z, align 1
  %v3_f75c = udiv i32 %v2_f74c, 65536
  store i32 %v3_f75c, i32* @r3, align 4
  %v3_f760 = load i32, i32* @r4, align 4
  store i32 %v3_f760, i32* %stack_var_-16, align 4
  %v1_f764 = urem i32 %v3_f754, 256
  store i32 %v1_f764, i32* %r6.global-to-local, align 4
  %v1_f768 = urem i32 %v3_f75c, 256
  store i32 %v1_f768, i32* %r5.global-to-local, align 4
  %v3_f76c = udiv i32 %v2_f74c, 16777216
  store i32 %v3_f76c, i32* %r4.global-to-local, align 4
  %v1_f770 = urem i32 %v2_f74c, 256
  store i32 %v1_f770, i32* %lr.global-to-local, align 4
  br i1 %v2_f758, label %dec_label_pc_f7cc, label %dec_label_pc_f778

dec_label_pc_f778:                                ; preds = %dec_label_pc_f73c
  store i32 0, i32* @ip, align 4
  %v1_f77c = inttoptr i32 %v2_f748 to i32*
  br label %dec_label_pc_f77c

dec_label_pc_f77c:                                ; preds = %dec_label_pc_f77c.dec_label_pc_f77c_crit_edge, %dec_label_pc_f778
  %v0_f784 = phi i32 [ %v0_f784.pre, %dec_label_pc_f77c.dec_label_pc_f77c_crit_edge ], [ %v1_f770, %dec_label_pc_f778 ]
  %v2_f788 = phi i32 [ %v1_f7c0, %dec_label_pc_f77c.dec_label_pc_f77c_crit_edge ], [ 0, %dec_label_pc_f778 ]
  %v2_f77c = load i32, i32* %v1_f77c, align 4
  %v2_f780 = add i32 %v2_f77c, %v2_f788
  %v3_f780 = inttoptr i32 %v2_f780 to i8*
  %v4_f780 = load i8, i8* %v3_f780, align 1
  %v6_f780 = zext i8 %v4_f780 to i32
  %v2_f784 = xor i32 %v6_f780, %v0_f784
  %v1_f788 = trunc i32 %v2_f784 to i8
  store i8 %v1_f788, i8* %v3_f780, align 1
  %v2_f78c = load i32, i32* %v1_f77c, align 4
  %v0_f790 = load i32, i32* @ip, align 4
  %v2_f790 = add i32 %v0_f790, %v2_f78c
  %v3_f790 = inttoptr i32 %v2_f790 to i8*
  %v4_f790 = load i8, i8* %v3_f790, align 1
  %v6_f790 = zext i8 %v4_f790 to i32
  %v0_f794 = load i32, i32* %r6.global-to-local, align 4
  %v2_f794 = xor i32 %v0_f794, %v6_f790
  %v1_f798 = trunc i32 %v2_f794 to i8
  store i8 %v1_f798, i8* %v3_f790, align 1
  %v2_f79c = load i32, i32* %v1_f77c, align 4
  %v0_f7a0 = load i32, i32* @ip, align 4
  %v2_f7a0 = add i32 %v0_f7a0, %v2_f79c
  %v3_f7a0 = inttoptr i32 %v2_f7a0 to i8*
  %v4_f7a0 = load i8, i8* %v3_f7a0, align 1
  %v6_f7a0 = zext i8 %v4_f7a0 to i32
  %v0_f7a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_f7a4 = xor i32 %v0_f7a4, %v6_f7a0
  %v1_f7a8 = trunc i32 %v2_f7a4 to i8
  store i8 %v1_f7a8, i8* %v3_f7a0, align 1
  %v2_f7ac = load i32, i32* %v1_f77c, align 4
  %v0_f7b0 = load i32, i32* @ip, align 4
  %v2_f7b0 = add i32 %v0_f7b0, %v2_f7ac
  %v3_f7b0 = inttoptr i32 %v2_f7b0 to i8*
  %v4_f7b0 = load i8, i8* %v3_f7b0, align 1
  %v6_f7b0 = zext i8 %v4_f7b0 to i32
  %v0_f7b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_f7b4 = xor i32 %v0_f7b4, %v6_f7b0
  store i32 %v2_f7b4, i32* @r3, align 4
  %v1_f7b8 = trunc i32 %v2_f7b4 to i8
  store i8 %v1_f7b8, i8* %v3_f7b0, align 1
  %v3_f7bc = load i16, i16* %v2_f750, align 4
  %v4_f7bc = zext i16 %v3_f7bc to i32
  store i32 %v4_f7bc, i32* @r2, align 4
  %v0_f7c0 = load i32, i32* @ip, align 4
  %v1_f7c0 = add i32 %v0_f7c0, 1
  store i32 %v1_f7c0, i32* @ip, align 4
  %v9_f7c4 = icmp eq i32 %v4_f7bc, %v1_f7c0
  store i1 %v9_f7c4, i1* @cpsr_z, align 1
  %v8_f7c8 = icmp sgt i32 %v4_f7bc, %v1_f7c0
  br i1 %v8_f7c8, label %dec_label_pc_f77c.dec_label_pc_f77c_crit_edge, label %dec_label_pc_f7cc.loopexit

dec_label_pc_f77c.dec_label_pc_f77c_crit_edge:    ; preds = %dec_label_pc_f77c
  %v0_f784.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f77c

dec_label_pc_f7cc.loopexit:                       ; preds = %dec_label_pc_f77c
  %v2_f7cc.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_f7cc

dec_label_pc_f7cc:                                ; preds = %dec_label_pc_f7cc.loopexit, %dec_label_pc_f73c
  %v2_f7cc = phi i32 [ %v2_f7cc.pre, %dec_label_pc_f7cc.loopexit ], [ %v3_f760, %dec_label_pc_f73c ]
  store i32 %v2_f7cc, i32* @r4, align 4
  ret i32 %v2_f748

; uselistorder directives
  uselistorder i32 %v1_f7c0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f770, { 1, 0 }
  uselistorder i32 %v3_f75c, { 1, 0 }
  uselistorder i32 %v3_f754, { 1, 0 }
  uselistorder i32 %v2_f74c, { 3, 0, 1, 2 }
  uselistorder i32 %v2_f748, { 1, 0 }
  uselistorder i32 %v3_f744, { 1, 0 }
}

define i32 @function_f7dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_f7dc:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f7e4 = mul i32 %arg1, 8
  %v2_f7e8 = add i32 %v3_f7e4, ptrtoint (i32* @global_var_20304.275 to i32)
  %v2_f7ec = load i32, i32* inttoptr (i32 123028 to i32*), align 4
  %v1_f7f0 = add i32 %v3_f7e4, add (i32 ptrtoint (i32* @global_var_20304.275 to i32), i32 4)
  %v2_f7f0 = inttoptr i32 %v1_f7f0 to i16*
  %v3_f7f0 = load i16, i16* %v2_f7f0, align 4
  %v3_f7f4 = udiv i32 %v2_f7ec, 256
  %v2_f7f8 = icmp eq i16 %v3_f7f0, 0
  %v3_f7fc = udiv i32 %v2_f7ec, 65536
  %v3_f800 = load i32, i32* @r4, align 4
  store i32 %v3_f800, i32* %stack_var_-16, align 4
  %v1_f804 = urem i32 %v3_f7f4, 256
  store i32 %v1_f804, i32* %r6.global-to-local, align 4
  %v1_f808 = urem i32 %v3_f7fc, 256
  store i32 %v1_f808, i32* %r5.global-to-local, align 4
  %v3_f80c = udiv i32 %v2_f7ec, 16777216
  store i32 %v3_f80c, i32* %r4.global-to-local, align 4
  %v1_f810 = urem i32 %v2_f7ec, 256
  store i32 %v1_f810, i32* %lr.global-to-local, align 4
  br i1 %v2_f7f8, label %dec_label_pc_f86c, label %dec_label_pc_f818

dec_label_pc_f818:                                ; preds = %dec_label_pc_f7dc
  store i32 0, i32* @ip, align 4
  %v1_f81c = inttoptr i32 %v2_f7e8 to i32*
  br label %dec_label_pc_f81c

dec_label_pc_f81c:                                ; preds = %dec_label_pc_f81c.dec_label_pc_f81c_crit_edge, %dec_label_pc_f818
  %v0_f824 = phi i32 [ %v0_f824.pre, %dec_label_pc_f81c.dec_label_pc_f81c_crit_edge ], [ %v1_f810, %dec_label_pc_f818 ]
  %v2_f828 = phi i32 [ %v1_f860, %dec_label_pc_f81c.dec_label_pc_f81c_crit_edge ], [ 0, %dec_label_pc_f818 ]
  %v2_f81c = load i32, i32* %v1_f81c, align 4
  %v2_f820 = add i32 %v2_f81c, %v2_f828
  %v3_f820 = inttoptr i32 %v2_f820 to i8*
  %v4_f820 = load i8, i8* %v3_f820, align 1
  %v6_f820 = zext i8 %v4_f820 to i32
  %v2_f824 = xor i32 %v6_f820, %v0_f824
  %v1_f828 = trunc i32 %v2_f824 to i8
  store i8 %v1_f828, i8* %v3_f820, align 1
  %v2_f82c = load i32, i32* %v1_f81c, align 4
  %v0_f830 = load i32, i32* @ip, align 4
  %v2_f830 = add i32 %v0_f830, %v2_f82c
  %v3_f830 = inttoptr i32 %v2_f830 to i8*
  %v4_f830 = load i8, i8* %v3_f830, align 1
  %v6_f830 = zext i8 %v4_f830 to i32
  %v0_f834 = load i32, i32* %r6.global-to-local, align 4
  %v2_f834 = xor i32 %v0_f834, %v6_f830
  %v1_f838 = trunc i32 %v2_f834 to i8
  store i8 %v1_f838, i8* %v3_f830, align 1
  %v2_f83c = load i32, i32* %v1_f81c, align 4
  %v0_f840 = load i32, i32* @ip, align 4
  %v2_f840 = add i32 %v0_f840, %v2_f83c
  %v3_f840 = inttoptr i32 %v2_f840 to i8*
  %v4_f840 = load i8, i8* %v3_f840, align 1
  %v6_f840 = zext i8 %v4_f840 to i32
  %v0_f844 = load i32, i32* %r5.global-to-local, align 4
  %v2_f844 = xor i32 %v0_f844, %v6_f840
  %v1_f848 = trunc i32 %v2_f844 to i8
  store i8 %v1_f848, i8* %v3_f840, align 1
  %v2_f84c = load i32, i32* %v1_f81c, align 4
  %v0_f850 = load i32, i32* @ip, align 4
  %v2_f850 = add i32 %v0_f850, %v2_f84c
  %v3_f850 = inttoptr i32 %v2_f850 to i8*
  %v4_f850 = load i8, i8* %v3_f850, align 1
  %v6_f850 = zext i8 %v4_f850 to i32
  %v0_f854 = load i32, i32* %r4.global-to-local, align 4
  %v2_f854 = xor i32 %v0_f854, %v6_f850
  %v1_f858 = trunc i32 %v2_f854 to i8
  store i8 %v1_f858, i8* %v3_f850, align 1
  %v3_f85c = load i16, i16* %v2_f7f0, align 4
  %v4_f85c = zext i16 %v3_f85c to i32
  %v0_f860 = load i32, i32* @ip, align 4
  %v1_f860 = add i32 %v0_f860, 1
  store i32 %v1_f860, i32* @ip, align 4
  %v8_f868 = icmp sgt i32 %v4_f85c, %v1_f860
  br i1 %v8_f868, label %dec_label_pc_f81c.dec_label_pc_f81c_crit_edge, label %dec_label_pc_f86c.loopexit

dec_label_pc_f81c.dec_label_pc_f81c_crit_edge:    ; preds = %dec_label_pc_f81c
  %v0_f824.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f81c

dec_label_pc_f86c.loopexit:                       ; preds = %dec_label_pc_f81c
  %v2_f86c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_f86c

dec_label_pc_f86c:                                ; preds = %dec_label_pc_f86c.loopexit, %dec_label_pc_f7dc
  %v2_f86c = phi i32 [ %v2_f86c.pre, %dec_label_pc_f86c.loopexit ], [ %v3_f800, %dec_label_pc_f7dc ]
  store i32 %v2_f86c, i32* @r4, align 4
  ret i32 %v2_f7e8

; uselistorder directives
  uselistorder i32 %v1_f860, { 1, 2, 0 }
  uselistorder i32 %v1_f810, { 1, 0 }
  uselistorder i32 %v2_f7ec, { 3, 0, 1, 2 }
  uselistorder i32 %v2_f7e8, { 1, 0 }
  uselistorder i32 %v3_f7e4, { 1, 0 }
}

define i32 @function_f87c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f87c:
  %stack_var_-24 = alloca i32, align 4
  %v3_f87c = load i32, i32* @r4, align 4
  store i32 %v3_f87c, i32* %stack_var_-24, align 4
  %v6_f87c = load i32, i32* @r5, align 4
  %v9_f87c = load i32, i32* @r6, align 4
  %v12_f87c = load i32, i32* @r7, align 4
  %v15_f87c = load i32, i32* @r8, align 4
  store i32 2, i32* @r0, align 4
  %v0_f884 = call i32 @function_11078()
  store i32 ptrtoint (i32* @global_var_20304.275 to i32), i32* @r4, align 4
  store i32 2, i32* @r5, align 4
  store i32 %v0_f884, i32* @r6, align 4
  %v4_f89c = call i32 @function_fca8(i32 %v0_f884, i32 ptrtoint ([3 x i8]* @global_var_159f4.282 to i32), i32 2)
  store i32 17, i32* @r0, align 4
  %v0_f8a4 = load i32, i32* @r6, align 4
  store i32 %v0_f8a4, i32* @global_var_20314.283, align 4
  %v0_f8a8 = load i32, i32* @r5, align 4
  %v1_f8a8 = trunc i32 %v0_f8a8 to i16
  store i16 %v1_f8a8, i16* bitcast (i32* @global_var_20318.284 to i16*), align 4
  %v0_f8ac = call i32 @function_11078()
  store i32 %v0_f8ac, i32* @r6, align 4
  store i32 17, i32* @r8, align 4
  %v4_f8c0 = call i32 @function_fca8(i32 %v0_f8ac, i32 ptrtoint ([18 x i8]* @global_var_159f8.286 to i32), i32 17)
  %v0_f8c4 = load i32, i32* @r5, align 4
  store i32 %v0_f8c4, i32* @r0, align 4
  %v0_f8c8 = load i32, i32* @r6, align 4
  store i32 %v0_f8c8, i32* @global_var_203bc.287, align 4
  %v0_f8cc = load i32, i32* @r8, align 4
  %v1_f8cc = trunc i32 %v0_f8cc to i16
  store i16 %v1_f8cc, i16* bitcast (i32* @global_var_203c0.288 to i16*), align 4
  %v0_f8d0 = call i32 @function_11078()
  %v0_f8d4 = load i32, i32* @r5, align 4
  store i32 %v0_f8d0, i32* @r6, align 4
  %v3_f8e0 = call i32 @function_fca8(i32 %v0_f8d0, i32 ptrtoint (i32* @global_var_15a0c.290 to i32), i32 %v0_f8d4)
  store i32 58, i32* @r0, align 4
  %v0_f8e8 = load i32, i32* @r6, align 4
  store i32 %v0_f8e8, i32* @global_var_203c4.291, align 4
  %v0_f8ec = load i32, i32* @r5, align 4
  %v1_f8ec = trunc i32 %v0_f8ec to i16
  store i16 %v1_f8ec, i16* bitcast (i32* @global_var_203c8.292 to i16*), align 4
  %v0_f8f0 = call i32 @function_11078()
  store i32 %v0_f8f0, i32* @r5, align 4
  %v4_f900 = call i32 @function_fca8(i32 %v0_f8f0, i32 ptrtoint ([59 x i8]* @global_var_15a10.294 to i32), i32 58)
  store i32 6, i32* @r0, align 4
  store i16 58, i16* bitcast (i32* @global_var_20310.295 to i16*), align 4
  %v0_f910 = load i32, i32* @r5, align 4
  store i32 %v0_f910, i32* @global_var_2030c.296, align 4
  %v0_f914 = call i32 @function_11078()
  store i32 %v0_f914, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %v4_f928 = call i32 @function_fca8(i32 %v0_f914, i32 ptrtoint ([7 x i8]* @global_var_15a4c.298 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r6, align 4
  %v0_f934 = load i32, i32* @r5, align 4
  store i32 %v0_f934, i32* @global_var_20384.299, align 4
  %v0_f938 = load i32, i32* @r7, align 4
  %v1_f938 = trunc i32 %v0_f938 to i16
  store i16 %v1_f938, i16* bitcast (i32* @global_var_20388.300 to i16*), align 4
  %v0_f93c = call i32 @function_11078()
  %v0_f940 = load i32, i32* @r6, align 4
  store i32 %v0_f93c, i32* @r5, align 4
  %v4_f94c = call i32 @function_fca8(i32 %v0_f93c, i32 ptrtoint ([8 x i8]* @global_var_15a54.302 to i32), i32 %v0_f940)
  %v0_f950 = load i32, i32* @r6, align 4
  store i32 %v0_f950, i32* @r0, align 4
  %v0_f954 = load i32, i32* @r5, align 4
  store i32 %v0_f954, i32* @global_var_2038c.303, align 4
  %v1_f958 = trunc i32 %v0_f950 to i16
  store i16 %v1_f958, i16* bitcast (i32* @global_var_20390.304 to i16*), align 4
  %v0_f95c = call i32 @function_11078()
  %v0_f960 = load i32, i32* @r6, align 4
  store i32 %v0_f95c, i32* @r5, align 4
  %v4_f96c = call i32 @function_fca8(i32 %v0_f95c, i32 ptrtoint ([8 x i8]* @global_var_15a5c.306 to i32), i32 %v0_f960)
  store i32 3, i32* @r0, align 4
  %v0_f974 = load i32, i32* @r5, align 4
  store i32 %v0_f974, i32* @global_var_20394.307, align 4
  %v0_f978 = load i32, i32* @r6, align 4
  %v1_f978 = trunc i32 %v0_f978 to i16
  store i16 %v1_f978, i16* bitcast (i32* @global_var_20398.308 to i16*), align 4
  %v0_f97c = call i32 @function_11078()
  store i32 %v0_f97c, i32* @r5, align 4
  %v4_f98c = call i32 @function_fca8(i32 %v0_f97c, i32 ptrtoint ([4 x i8]* @global_var_15a64.310 to i32), i32 3)
  store i32 20, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_203a8.311 to i16*), align 4
  %v0_f99c = load i32, i32* @r5, align 4
  store i32 %v0_f99c, i32* @global_var_203a4.312, align 4
  %v0_f9a0 = call i32 @function_11078()
  store i32 %v0_f9a0, i32* @r5, align 4
  %v3_f9b0 = call i32 @function_fca8(i32 %v0_f9a0, i32 ptrtoint (i32* @global_var_15a68.314 to i32), i32 20)
  store i32 25, i32* @r0, align 4
  store i16 20, i16* bitcast (i32* @global_var_203a0.315 to i16*), align 4
  %v0_f9c0 = load i32, i32* @r5, align 4
  store i32 %v0_f9c0, i32* @global_var_2039c.316, align 4
  %v0_f9c4 = call i32 @function_11078()
  store i32 %v0_f9c4, i32* @r5, align 4
  %v3_f9d4 = call i32 @function_fca8(i32 %v0_f9c4, i32 ptrtoint (i32* @global_var_15a80.318 to i32), i32 25)
  store i32 9, i32* @r0, align 4
  store i16 25, i16* bitcast (i32* @global_var_203b0.319 to i16*), align 4
  %v0_f9e4 = load i32, i32* @r5, align 4
  store i32 %v0_f9e4, i32* @global_var_203ac.320, align 4
  %v0_f9e8 = call i32 @function_11078()
  store i32 %v0_f9e8, i32* @r5, align 4
  %v4_f9f8 = call i32 @function_fca8(i32 %v0_f9e8, i32 ptrtoint ([10 x i8]* @global_var_15a9c.322 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_203b8.323 to i16*), align 4
  %v0_fa08 = load i32, i32* @r5, align 4
  store i32 %v0_fa08, i32* @global_var_203b4.324, align 4
  %v0_fa0c = call i32 @function_11078()
  store i32 %v0_fa0c, i32* @r5, align 4
  %v4_fa1c = call i32 @function_fca8(i32 %v0_fa0c, i32 ptrtoint ([17 x i8]* @global_var_15aa8.326 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  store i16 16, i16* bitcast (i32* @global_var_203d0.327 to i16*), align 4
  %v0_fa2c = load i32, i32* @r5, align 4
  store i32 %v0_fa2c, i32* @global_var_203cc.328, align 4
  %v0_fa30 = call i32 @function_11078()
  store i32 %v0_fa30, i32* @r5, align 4
  %v4_fa40 = call i32 @function_fca8(i32 %v0_fa30, i32 ptrtoint ([23 x i8]* @global_var_15abc.330 to i32), i32 22)
  %v0_fa48 = load i32, i32* @r6, align 4
  store i32 %v0_fa48, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_203d8.331 to i16*), align 4
  %v0_fa50 = load i32, i32* @r5, align 4
  store i32 %v0_fa50, i32* @global_var_203d4.332, align 4
  %v0_fa54 = call i32 @function_11078()
  %v0_fa58 = load i32, i32* @r6, align 4
  store i32 %v0_fa54, i32* @r5, align 4
  %v4_fa64 = call i32 @function_fca8(i32 %v0_fa54, i32 ptrtoint ([8 x i8]* @global_var_15ad4.334 to i32), i32 %v0_fa58)
  store i32 5, i32* @r0, align 4
  %v0_fa6c = load i32, i32* @r5, align 4
  store i32 %v0_fa6c, i32* @global_var_2031c.335, align 4
  %v0_fa70 = load i32, i32* @r6, align 4
  %v1_fa70 = trunc i32 %v0_fa70 to i16
  store i16 %v1_fa70, i16* bitcast (i32* @global_var_20320.336 to i16*), align 4
  %v0_fa74 = call i32 @function_11078()
  store i32 %v0_fa74, i32* @r5, align 4
  %v4_fa84 = call i32 @function_fca8(i32 %v0_fa74, i32 ptrtoint ([6 x i8]* @global_var_15adc.338 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  store i16 5, i16* bitcast (i32* @global_var_20328.339 to i16*), align 4
  %v0_fa94 = load i32, i32* @r5, align 4
  store i32 %v0_fa94, i32* @global_var_20324.340, align 4
  %v0_fa98 = call i32 @function_11078()
  store i32 %v0_fa98, i32* @r5, align 4
  %v4_faa8 = call i32 @function_fca8(i32 %v0_fa98, i32 ptrtoint ([5 x i8]* @global_var_15ae4.342 to i32), i32 4)
  %v0_fab0 = load i32, i32* @r7, align 4
  store i32 %v0_fab0, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_20338.343 to i16*), align 4
  %v0_fab8 = load i32, i32* @r5, align 4
  store i32 %v0_fab8, i32* @global_var_20334.344, align 4
  %v0_fabc = call i32 @function_11078()
  %v0_fac4 = load i32, i32* @r7, align 4
  store i32 %v0_fabc, i32* @r5, align 4
  %v4_facc = call i32 @function_fca8(i32 %v0_fabc, i32 ptrtoint ([7 x i8]* @global_var_15aec.346 to i32), i32 %v0_fac4)
  store i32 14, i32* @r0, align 4
  %v0_fad4 = load i32, i32* @r5, align 4
  store i32 %v0_fad4, i32* @global_var_2033c.347, align 4
  %v0_fad8 = load i32, i32* @r7, align 4
  %v1_fad8 = trunc i32 %v0_fad8 to i16
  store i16 %v1_fad8, i16* bitcast (i32* @global_var_20340.348 to i16*), align 4
  %v0_fadc = call i32 @function_11078()
  store i32 %v0_fadc, i32* @r5, align 4
  %v0_faec = load i32, i32* @r6, align 4
  %v2_faec = mul i32 %v0_faec, 2
  store i32 %v2_faec, i32* @r6, align 4
  %v4_faf0 = call i32 @function_fca8(i32 %v0_fadc, i32 ptrtoint ([15 x i8]* @global_var_15af4.350 to i32), i32 14)
  store i32 10, i32* @r0, align 4
  %v0_faf8 = load i32, i32* @r5, align 4
  store i32 %v0_faf8, i32* @global_var_20344.351, align 4
  %v0_fafc = load i32, i32* @r6, align 4
  %v1_fafc = trunc i32 %v0_fafc to i16
  store i16 %v1_fafc, i16* bitcast (i32* @global_var_20348.352 to i16*), align 4
  %v0_fb00 = call i32 @function_11078()
  store i32 %v0_fb00, i32* @r5, align 4
  %v4_fb10 = call i32 @function_fca8(i32 %v0_fb00, i32 ptrtoint ([11 x i8]* @global_var_15b04.354 to i32), i32 10)
  store i32 21, i32* @r0, align 4
  store i16 10, i16* bitcast (i32* @global_var_20350.355 to i16*), align 4
  %v0_fb20 = load i32, i32* @r5, align 4
  store i32 %v0_fb20, i32* @global_var_2034c.356, align 4
  %v0_fb24 = call i32 @function_11078()
  store i32 %v0_fb24, i32* @r5, align 4
  %v3_fb34 = call i32 @function_fca8(i32 %v0_fb24, i32 ptrtoint (i32* @global_var_15b58.358 to i32), i32 21)
  %v0_fb3c = load i32, i32* @r8, align 4
  store i32 %v0_fb3c, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_20358.359 to i16*), align 4
  %v0_fb44 = load i32, i32* @r5, align 4
  store i32 %v0_fb44, i32* @global_var_20354.360, align 4
  %v0_fb48 = call i32 @function_11078()
  %v0_fb50 = load i32, i32* @r8, align 4
  store i32 %v0_fb48, i32* @r5, align 4
  %v4_fb58 = call i32 @function_fca8(i32 %v0_fb48, i32 ptrtoint ([18 x i8]* @global_var_15b10.362 to i32), i32 %v0_fb50)
  store i32 12, i32* @r0, align 4
  %v0_fb60 = load i32, i32* @r5, align 4
  store i32 %v0_fb60, i32* @global_var_2035c.363, align 4
  %v0_fb64 = load i32, i32* @r8, align 4
  %v1_fb64 = trunc i32 %v0_fb64 to i16
  store i16 %v1_fb64, i16* bitcast (i32* @global_var_20360.364 to i16*), align 4
  %v0_fb68 = call i32 @function_11078()
  store i32 %v0_fb68, i32* @r5, align 4
  %v4_fb78 = call i32 @function_fca8(i32 %v0_fb68, i32 ptrtoint ([13 x i8]* @global_var_15b24.366 to i32), i32 12)
  %v0_fb80 = load i32, i32* @r6, align 4
  store i32 %v0_fb80, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_20368.367 to i16*), align 4
  %v0_fb88 = load i32, i32* @r5, align 4
  store i32 %v0_fb88, i32* @global_var_20364.368, align 4
  %v0_fb8c = call i32 @function_11078()
  %v0_fb94 = load i32, i32* @r6, align 4
  store i32 %v0_fb8c, i32* @r5, align 4
  %v4_fb9c = call i32 @function_fca8(i32 %v0_fb8c, i32 ptrtoint ([15 x i8]* @global_var_15b34.370 to i32), i32 %v0_fb94)
  store i32 19, i32* @r0, align 4
  %v0_fba4 = load i32, i32* @r5, align 4
  store i32 %v0_fba4, i32* @global_var_2036c.371, align 4
  %v0_fba8 = load i32, i32* @r6, align 4
  %v1_fba8 = trunc i32 %v0_fba8 to i16
  store i16 %v1_fba8, i16* bitcast (i32* @global_var_20370.372 to i16*), align 4
  %v0_fbac = call i32 @function_11078()
  %v4_fbbc = call i32 @function_fca8(i32 %v0_fbac, i32 ptrtoint ([20 x i8]* @global_var_15b44.374 to i32), i32 19)
  store i32 %v0_fbac, i32* @global_var_20374.375, align 4
  store i16 19, i16* bitcast (i32* @global_var_20378.376 to i16*), align 4
  %v2_fbcc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_fbcc, i32* @r4, align 4
  store i32 %v6_f87c, i32* @r5, align 4
  store i32 %v9_f87c, i32* @r6, align 4
  store i32 %v12_f87c, i32* @r7, align 4
  store i32 %v15_f87c, i32* @r8, align 4
  ret i32 %v4_fbbc

; uselistorder directives
  uselistorder i32 %v0_fb8c, { 1, 0 }
  uselistorder i32 %v0_fb48, { 1, 0 }
  uselistorder i32 %v0_fabc, { 1, 0 }
  uselistorder i32 %v0_fa54, { 1, 0 }
  uselistorder i32 %v0_f95c, { 1, 0 }
  uselistorder i32 %v0_f93c, { 1, 0 }
  uselistorder i32 %v0_f8d0, { 1, 0 }
  uselistorder i32 %v0_f884, { 1, 0 }
  uselistorder i32 21, { 0, 8, 1, 5, 2, 6, 3, 7, 9, 4 }
  uselistorder i32 (i32, i32, i32)* @function_fca8, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_20304.275 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_fc38(i8* %arg1) local_unnamed_addr {
dec_label_pc_fc38:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_fc3c = load i8, i8* %arg1, align 1
  %v2_fc40 = icmp eq i8 %v3_fc3c, 0
  %v0_fc44 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_fc40, i32 %v0_fc44)
  br label %dec_label_pc_fc4c

dec_label_pc_fc4c:                                ; preds = %dec_label_pc_fc4c, %dec_label_pc_fc38
  %v0_fc4c = phi i32 [ %v1_fc4c, %dec_label_pc_fc4c ], [ 0, %dec_label_pc_fc38 ]
  %v1_fc4c = add i32 %v0_fc4c, 1
  %v2_fc50 = add i32 %v1_fc4c, %tmp
  %v3_fc50 = inttoptr i32 %v2_fc50 to i8*
  %v4_fc50 = load i8, i8* %v3_fc50, align 1
  %v2_fc54 = icmp eq i8 %v4_fc50, 0
  br i1 %v2_fc54, label %dec_label_pc_fc5c, label %dec_label_pc_fc4c

dec_label_pc_fc5c:                                ; preds = %dec_label_pc_fc4c
  ret i32 %v1_fc4c
}

define i32 @function_fc60(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fc60:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_fc60 = load i8, i8* %arg1, align 1
  %v3_fc60 = zext i8 %v2_fc60 to i32
  %v2_fc64 = icmp eq i8 %v2_fc60, 0
  br i1 %v2_fc64, label %bb, label %dec_label_pc_fc70

bb:                                               ; preds = %dec_label_pc_fc60
  store i32 %v3_fc60, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fc84

dec_label_pc_fc70:                                ; preds = %dec_label_pc_fc60
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fc74

dec_label_pc_fc74:                                ; preds = %dec_label_pc_fc74, %dec_label_pc_fc70
  %v0_fc74 = phi i32 [ %v1_fc74, %dec_label_pc_fc74 ], [ 0, %dec_label_pc_fc70 ]
  %v1_fc74 = add i32 %v0_fc74, 1
  store i32 %v1_fc74, i32* %ip.global-to-local, align 4
  %v2_fc78 = add i32 %v1_fc74, %tmp
  %v3_fc78 = inttoptr i32 %v2_fc78 to i8*
  %v4_fc78 = load i8, i8* %v3_fc78, align 1
  %v6_fc78 = zext i8 %v4_fc78 to i32
  store i32 %v6_fc78, i32* %r3.global-to-local, align 4
  %v2_fc7c = icmp eq i8 %v4_fc78, 0
  br i1 %v2_fc7c, label %dec_label_pc_fc84, label %dec_label_pc_fc74

dec_label_pc_fc84:                                ; preds = %dec_label_pc_fc74, %bb
  %v0_fc84 = phi i32 [ %v3_fc60, %bb ], [ %v1_fc74, %dec_label_pc_fc74 ]
  store i32 %v0_fc84, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fc90

dec_label_pc_fc8c:                                ; preds = %dec_label_pc_fc90
  %v0_fc8c = load i32, i32* %r1.global-to-local, align 4
  %v1_fc8c = add i32 %v0_fc8c, 1
  %v2_fc8c = inttoptr i32 %v1_fc8c to i8*
  %v3_fc8c = load i8, i8* %v2_fc8c, align 1
  store i32 %v1_fc8c, i32* %r1.global-to-local, align 4
  %v0_fc90.pr = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fc90

dec_label_pc_fc90:                                ; preds = %dec_label_pc_fc84, %dec_label_pc_fc8c
  %v0_fc98.off0 = phi i8 [ %v2_fc60, %dec_label_pc_fc84 ], [ %v3_fc8c, %dec_label_pc_fc8c ]
  %v0_fc90 = phi i32 [ %v0_fc84, %dec_label_pc_fc84 ], [ %v0_fc90.pr, %dec_label_pc_fc8c ]
  %v1_fc90 = add i32 %v0_fc90, -1
  store i32 %v1_fc90, i32* %r3.global-to-local, align 4
  %v3_fc94 = icmp eq i32 %v0_fc90, 0
  %v2_fc98 = load i32, i32* @r0, align 4
  %v3_fc98 = inttoptr i32 %v2_fc98 to i8*
  store i8 %v0_fc98.off0, i8* %v3_fc98, align 1
  %v4_fc98 = load i32, i32* @r0, align 4
  %v5_fc98 = add i32 %v4_fc98, 1
  store i32 %v5_fc98, i32* @r0, align 4
  br i1 %v3_fc94, label %dec_label_pc_fca0, label %dec_label_pc_fc8c

dec_label_pc_fca0:                                ; preds = %dec_label_pc_fc90
  %v0_fca0 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_fca0

; uselistorder directives
  uselistorder i32 %v0_fc90, { 1, 0 }
  uselistorder i32 %v0_fc84, { 1, 0 }
  uselistorder i32 %v1_fc74, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_fc90, { 1, 0 }
}

define i32 @function_fca8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fca8:
  store i32 %arg2, i32* @r1, align 4
  %v2_fca8 = icmp eq i32 %arg3, 0
  %v0_fcac = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_fca8, i32 %v0_fcac)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_fcb4

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_fcb4, %dec_label_pc_fca8
  %v0_fcb4 = phi i32 [ %v1_fcbc, %dec_label_pc_fcb4 ], [ 0, %dec_label_pc_fca8 ]
  %v2_fcb4 = add i32 %v0_fcb4, %arg2
  %v3_fcb4 = inttoptr i32 %v2_fcb4 to i8*
  %v4_fcb4 = load i8, i8* %v3_fcb4, align 1
  %v6_fcb4 = zext i8 %v4_fcb4 to i32
  store i32 %v6_fcb4, i32* @r3, align 4
  %v4_fcb8 = add i32 %v0_fcb4, %arg1
  %v5_fcb8 = inttoptr i32 %v4_fcb8 to i8*
  store i8 %v4_fcb4, i8* %v5_fcb8, align 1
  %v0_fcbc = load i32, i32* @ip, align 4
  %v1_fcbc = add i32 %v0_fcbc, 1
  store i32 %v1_fcbc, i32* @ip, align 4
  %v9_fcc0 = icmp eq i32 %v1_fcbc, %arg3
  br i1 %v9_fcc0, label %dec_label_pc_fcc8, label %dec_label_pc_fcb4

dec_label_pc_fcc8:                                ; preds = %dec_label_pc_fcb4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_fcbc, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_fccc() local_unnamed_addr {
dec_label_pc_fccc:
  %r2.global-to-local = alloca i32, align 4
  %v0_fccc = load i32, i32* @r1, align 4
  %v2_fccc = icmp eq i32 %v0_fccc, 0
  %v0_fcd0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_fccc, i32 %v0_fcd0)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fcd8

dec_label_pc_fcd8:                                ; preds = %dec_label_pc_fcd8, %dec_label_pc_fccc
  %v2_fcdc = phi i32 [ %v1_fce0, %dec_label_pc_fcd8 ], [ 0, %dec_label_pc_fccc ]
  store i32 0, i32* @r3, align 4
  %v3_fcdc = load i32, i32* @r0, align 4
  %v4_fcdc = add i32 %v3_fcdc, %v2_fcdc
  %v5_fcdc = inttoptr i32 %v4_fcdc to i8*
  store i8 0, i8* %v5_fcdc, align 1
  %v0_fce0 = load i32, i32* %r2.global-to-local, align 4
  %v1_fce0 = add i32 %v0_fce0, 1
  store i32 %v1_fce0, i32* %r2.global-to-local, align 4
  %v1_fce4 = load i32, i32* @r1, align 4
  %v9_fce4 = icmp eq i32 %v1_fce0, %v1_fce4
  br i1 %v9_fce4, label %dec_label_pc_fcec, label %dec_label_pc_fcd8

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fcd8
  %v1_fcec = load i32, i32* @r0, align 4
  ret i32 %v1_fcec

; uselistorder directives
  uselistorder i32 %v1_fce0, { 1, 2, 0 }
}

define i32 @function_fcf0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fcf0:
  store i32 %arg4, i32* @r3, align 4
  %v7_fd04 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_fd04, label %dec_label_pc_fd0c, label %dec_label_pc_fd14

dec_label_pc_fd0c:                                ; preds = %dec_label_pc_fd28, %dec_label_pc_fd14, %dec_label_pc_fcf0, %dec_label_pc_fd54
  %storemerge = phi i32 [ %v1_fd54, %dec_label_pc_fd54 ], [ -1, %dec_label_pc_fcf0 ], [ -1, %dec_label_pc_fd14 ], [ -1, %dec_label_pc_fd28 ]
  ret i32 %storemerge

dec_label_pc_fd14:                                ; preds = %dec_label_pc_fcf0
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_fd0c, label %dec_label_pc_fd1c

dec_label_pc_fd1c:                                ; preds = %dec_label_pc_fd14
  br label %dec_label_pc_fd34

dec_label_pc_fd28:                                ; preds = %bb, %dec_label_pc_fd48
  %v1_fd343 = phi i32 [ %v1_fd48, %dec_label_pc_fd48 ], [ 0, %bb ]
  %v1_fd28 = add i32 %v0_fd54, 1
  %v9_fd2c = icmp eq i32 %v1_fd28, %arg2
  br i1 %v9_fd2c, label %dec_label_pc_fd0c, label %dec_label_pc_fd34

dec_label_pc_fd34:                                ; preds = %dec_label_pc_fd28, %dec_label_pc_fd1c
  %v0_fd54 = phi i32 [ %v1_fd28, %dec_label_pc_fd28 ], [ 0, %dec_label_pc_fd1c ]
  %v1_fd34 = phi i32 [ %v1_fd343, %dec_label_pc_fd28 ], [ 0, %dec_label_pc_fd1c ]
  %v2_fd34 = add i32 %v1_fd34, %arg3
  %v3_fd34 = inttoptr i32 %v2_fd34 to i8*
  %v4_fd34 = load i8, i8* %v3_fd34, align 1
  %v2_fd38 = add i32 %v0_fd54, %arg1
  %v3_fd38 = inttoptr i32 %v2_fd38 to i8*
  %v4_fd38 = load i8, i8* %v3_fd38, align 1
  %v6_fd38 = zext i8 %v4_fd38 to i32
  store i32 %v6_fd38, i32* @r3, align 4
  %v9_fd3c = icmp eq i8 %v4_fd38, %v4_fd34
  br i1 %v9_fd3c, label %dec_label_pc_fd48, label %bb

bb:                                               ; preds = %dec_label_pc_fd34
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_fd28

dec_label_pc_fd48:                                ; preds = %dec_label_pc_fd34
  %v1_fd48 = add i32 %v1_fd34, 1
  store i32 %v1_fd48, i32* @ip, align 4
  %v9_fd4c = icmp eq i32 %v1_fd48, %arg4
  br i1 %v9_fd4c, label %dec_label_pc_fd54, label %dec_label_pc_fd28

dec_label_pc_fd54:                                ; preds = %dec_label_pc_fd48
  %v1_fd54 = add i32 %v0_fd54, 1
  br label %dec_label_pc_fd0c

; uselistorder directives
  uselistorder i32 %v1_fd48, { 1, 2, 0 }
  uselistorder i32 %v1_fd34, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fd28, { 1, 0 }
  uselistorder label %dec_label_pc_fd0c, { 3, 0, 1, 2 }
}

define i32 @function_fd5c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fd5c:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_fd5c = load i32, i32* @r4, align 4
  %v12_fd5c = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_fd6c

dec_label_pc_fd6c:                                ; preds = %.thread, %dec_label_pc_fd80, %bb, %dec_label_pc_fd5c
  %v0_fd6c = phi i32 [ %tmp, %dec_label_pc_fd5c ], [ %v5_fd6c, %bb ], [ %v5_fd6c, %dec_label_pc_fd80 ], [ %v5_fd6c, %.thread ]
  %v1_fd6c = inttoptr i32 %v0_fd6c to i8*
  %v2_fd6c = load i8, i8* %v1_fd6c, align 1
  %v5_fd6c = add i32 %v0_fd6c, 1
  store i32 %v5_fd6c, i32* %r5.global-to-local, align 4
  %v7_fd70 = icmp eq i8 %v2_fd6c, 9
  br i1 %v7_fd70, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_fd6c
  br label %dec_label_pc_fd6c

bb:                                               ; preds = %dec_label_pc_fd6c
  %v3_fd6c = zext i8 %v2_fd6c to i32
  %v8_fd74 = icmp eq i8 %v2_fd6c, 32
  store i32 %v3_fd6c, i32* @r4, align 4
  br i1 %v8_fd74, label %dec_label_pc_fd6c, label %dec_label_pc_fd80

dec_label_pc_fd80:                                ; preds = %bb
  %v7_fd80 = icmp eq i8 %v2_fd6c, 10
  br i1 %v7_fd80, label %dec_label_pc_fd6c, label %dec_label_pc_fd88

dec_label_pc_fd88:                                ; preds = %dec_label_pc_fd80
  %v7_fd88 = icmp eq i8 %v2_fd6c, 45
  br i1 %v7_fd88, label %dec_label_pc_fe78, label %dec_label_pc_fd90

dec_label_pc_fd90:                                ; preds = %dec_label_pc_fd88
  %v7_fd90 = icmp eq i8 %v2_fd6c, 43
  br i1 %v7_fd90, label %bb44, label %dec_label_pc_fda0

bb44:                                             ; preds = %dec_label_pc_fd90
  %v2_fd94 = inttoptr i32 %v5_fd6c to i8*
  %v3_fd94 = load i8, i8* %v2_fd94, align 1
  %v4_fd94 = zext i8 %v3_fd94 to i32
  store i32 %v4_fd94, i32* @r4, align 4
  %v6_fd94 = add i32 %v0_fd6c, 2
  store i32 %v6_fd94, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_fda0

dec_label_pc_fda0:                                ; preds = %bb44, %dec_label_pc_fd90, %dec_label_pc_fe78
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_fe78 ], [ 2147483647, %dec_label_pc_fd90 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_fe78 ], [ 0, %dec_label_pc_fd90 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_fda8 = call i32 @function_10210(i32 %storemerge1, i32 %arg2)
  %v0_fdac = load i32, i32* @r7, align 4
  store i32 %v0_fdac, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_fdb4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fdb4, i32* @r1, align 4
  %v0_fdb8 = call i32 @function_10114()
  store i32 0, i32* @ip, align 4
  %v0_fdc8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_fdc8.outer

dec_label_pc_fdc8.outer:                          ; preds = %.thread5, %dec_label_pc_fda0
  %v2_fe44.ph = phi i32 [ %v5_fe44, %.thread5 ], [ 0, %dec_label_pc_fda0 ]
  %v1_fe08.ph = phi i32 [ %v4_fe48, %.thread5 ], [ %v0_fdc8.pre, %dec_label_pc_fda0 ]
  %v1_fe20.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_fda0 ]
  %v3_fe14 = icmp uge i32 %v2_fe44.ph, %v0_fdb8
  %v9_fe14 = icmp eq i32 %v2_fe44.ph, %v0_fdb8
  %v2_fe18 = xor i1 %v3_fe14, true
  %v3_fe18 = or i1 %v9_fe14, %v2_fe18
  %v2_fe1c = xor i1 %v9_fe14, true
  %v3_fe1c = and i1 %v3_fe14, %v2_fe1c
  %v2_fe3c = icmp eq i1 %v9_fe14, false
  br label %dec_label_pc_fdc8

dec_label_pc_fdc8:                                ; preds = %dec_label_pc_fdc8.outer, %dec_label_pc_fe50
  %v1_fe20 = phi i32 [ -1, %dec_label_pc_fe50 ], [ %v1_fe20.ph, %dec_label_pc_fdc8.outer ]
  %v1_fe08 = phi i32 [ %v3_fe50, %dec_label_pc_fe50 ], [ %v1_fe08.ph, %dec_label_pc_fdc8.outer ]
  %v1_fdc8 = urem i32 %v1_fe08, 256
  %v1_fdcc = add nsw i32 %v1_fdc8, -48
  %v1_fdd4 = add nsw i32 %v1_fdc8, -97
  %v1_fdd8 = add i32 %v1_fe08, -48
  %v1_fddc = add nsw i32 %v1_fdc8, -65
  %tmp75 = icmp ult i32 %v1_fdcc, 10
  br i1 %tmp75, label %dec_label_pc_fe0c, label %dec_label_pc_fde4

dec_label_pc_fde4:                                ; preds = %dec_label_pc_fdc8
  %v2_fde4 = icmp ugt i32 %v1_fddc, 24
  %v7_fde4 = icmp eq i32 %v1_fddc, 25
  %v2_fde8 = xor i1 %v7_fde4, true
  %v3_fde8 = and i1 %v2_fde4, %v2_fde8
  br i1 %v3_fde8, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_fde4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_fde4, %bb45
  %v0_fdfc14 = phi i32 [ %v1_fdd8, %dec_label_pc_fde4 ], [ 0, %bb45 ]
  %v2_fdec = xor i1 %v2_fde4, true
  %v3_fdec = or i1 %v7_fde4, %v2_fdec
  br i1 %v3_fdec, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_fdfc = phi i32 [ %v0_fdfc14, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_fde8, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_fdf4 = icmp ugt i32 %v1_fdd4, 24
  %v11_fdf4 = icmp eq i32 %v1_fdd4, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_fdf8 = phi i1 [ %v7_fde4, %bb48 ], [ %v11_fdf4, %bb49 ]
  %v0_fdf8 = phi i1 [ %v2_fde4, %bb48 ], [ %v6_fdf4, %bb49 ]
  %v2_fdf8 = xor i1 %v1_fdf8, true
  %v3_fdf8 = and i1 %v0_fdf8, %v2_fdf8
  br i1 %v3_fdf8, label %dec_label_pc_fe5c, label %dec_label_pc_fdfc

dec_label_pc_fdfc:                                ; preds = %bb50
  %v2_fdfc = icmp eq i32 %v0_fdfc, 0
  %. = select i1 %v2_fdfc, i32 87, i32 55
  %v2_fe08 = sub i32 %v1_fe08, %.
  br label %dec_label_pc_fe0c

dec_label_pc_fe0c:                                ; preds = %dec_label_pc_fdc8, %dec_label_pc_fdfc
  %v0_fe2029 = phi i32 [ %v1_fddc, %dec_label_pc_fdc8 ], [ %., %dec_label_pc_fdfc ]
  %v3_fe44 = phi i32 [ %v1_fdd8, %dec_label_pc_fdc8 ], [ %v2_fe08, %dec_label_pc_fdfc ]
  %v1_fe0c = load i32, i32* %r6.global-to-local, align 4
  %v2_fe0c = sub i32 %v3_fe44, %v1_fe0c
  %v4_fe0c = xor i32 %v1_fe0c, %v3_fe44
  %v5_fe0c = xor i32 %v2_fe0c, %v3_fe44
  %v6_fe0c = and i32 %v5_fe0c, %v4_fe0c
  %v7_fe0c = icmp slt i32 %v6_fe0c, 0
  %v8_fe0c = icmp slt i32 %v2_fe0c, 0
  %v2_fe10 = xor i1 %v8_fe0c, %v7_fe0c
  br i1 %v2_fe10, label %dec_label_pc_fe14, label %dec_label_pc_fe5c

dec_label_pc_fe14:                                ; preds = %dec_label_pc_fe0c
  br i1 %v3_fe18, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_fe14
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_fe14, %bb53
  %v0_fe2028 = phi i32 [ %v0_fe2029, %dec_label_pc_fe14 ], [ 0, %bb53 ]
  br i1 %v3_fe1c, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_fe20 = phi i32 [ %v0_fe2028, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_fe20, 0
  %v4_fe20 = zext i1 %tmp76 to i32
  %v5_fe20 = or i32 %v0_fe20, %v4_fe20
  %v7_fe20 = icmp eq i32 %v5_fe20, 0
  br i1 %v7_fe20, label %dec_label_pc_fe28, label %dec_label_pc_fe50

dec_label_pc_fe28:                                ; preds = %bb56
  %v1_fe34 = load i32, i32* %r8.global-to-local, align 4
  %v2_fe34 = sub i32 %v3_fe44, %v1_fe34
  %v4_fe34 = xor i32 %v1_fe34, %v3_fe44
  %v5_fe34 = xor i32 %v2_fe34, %v3_fe44
  %v6_fe34 = and i32 %v5_fe34, %v4_fe34
  %v7_fe34 = icmp slt i32 %v6_fe34, 0
  %v8_fe34 = icmp slt i32 %v2_fe34, 0
  %v9_fe34 = icmp eq i32 %v3_fe44, %v1_fe34
  %v3_fe38 = xor i1 %v8_fe34, %v7_fe34
  %v4_fe38 = or i1 %v9_fe34, %v3_fe38
  br i1 %v4_fe38, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_fe28
  store i32 1, i32* @ip, align 4
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_fe28
  store i32 1, i32* @ip, align 4
  br i1 %v2_fe3c, label %.thread5, label %dec_label_pc_fe50

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_fe44 = mul i32 %v1_fe0c, %v2_fe44.ph
  %v5_fe44 = add i32 %v4_fe44, %v3_fe44
  %v1_fe48 = load i32, i32* %r5.global-to-local, align 4
  %v2_fe48 = inttoptr i32 %v1_fe48 to i8*
  %v3_fe48 = load i8, i8* %v2_fe48, align 1
  %v4_fe48 = zext i8 %v3_fe48 to i32
  %v6_fe48 = add i32 %v1_fe48, 1
  store i32 %v6_fe48, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_fdc8.outer

dec_label_pc_fe50:                                ; preds = %thread-pre-split, %bb56
  %v0_fe50 = load i32, i32* %r5.global-to-local, align 4
  %v1_fe50 = inttoptr i32 %v0_fe50 to i8*
  %v2_fe50 = load i8, i8* %v1_fe50, align 1
  %v3_fe50 = zext i8 %v2_fe50 to i32
  %v5_fe50 = add i32 %v0_fe50, 1
  store i32 %v5_fe50, i32* %r5.global-to-local, align 4
  store i32 -1, i32* @ip, align 4
  br label %dec_label_pc_fdc8

dec_label_pc_fe5c:                                ; preds = %dec_label_pc_fe0c, %bb50
  %v1_fe5c = icmp slt i32 %v1_fe20, 0
  %v0_fe88 = load i32, i32* %sl.global-to-local, align 4
  %v2_fe88 = icmp eq i32 %v0_fe88, 0
  br i1 %v1_fe5c, label %dec_label_pc_fe88, label %dec_label_pc_fe64

dec_label_pc_fe64:                                ; preds = %dec_label_pc_fe5c
  br i1 %v2_fe88, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_fe64
  %v2_fe68 = sub i32 0, %v2_fe44.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_fe64, %bb59
  %v1_fe74 = phi i32 [ -2147483648, %bb61 ], [ %v2_fe44.ph, %dec_label_pc_fe64 ], [ %v2_fe68, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_fd5c, i32* @r4, align 4
  store i32 %v12_fd5c, i32* @r7, align 4
  ret i32 %v1_fe74

dec_label_pc_fe78:                                ; preds = %dec_label_pc_fd88
  %v1_fe78 = inttoptr i32 %v5_fd6c to i8*
  %v2_fe78 = load i8, i8* %v1_fe78, align 1
  %v3_fe78 = zext i8 %v2_fe78 to i32
  store i32 %v3_fe78, i32* @r4, align 4
  %v5_fe78 = add i32 %v0_fd6c, 2
  store i32 %v5_fe78, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_fda0

dec_label_pc_fe88:                                ; preds = %dec_label_pc_fe5c
  br i1 %v2_fe88, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_fe88
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_fe88
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_fe88, { 1, 0 }
  uselistorder i32 %v2_fe34, { 1, 0 }
  uselistorder i32 %v1_fe34, { 1, 0, 2 }
  uselistorder i32 %v2_fe0c, { 1, 0 }
  uselistorder i32 %v3_fe44, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_fde4, { 1, 2, 0 }
  uselistorder i1 %v2_fde4, { 1, 0, 2 }
  uselistorder i32 %v1_fdc8, { 1, 2, 0 }
  uselistorder i32 %v1_fe08, { 1, 2, 0 }
  uselistorder i32 %v1_fe20, { 1, 0 }
  uselistorder i1 %v9_fe14, { 1, 0, 2 }
  uselistorder i1 %v3_fe14, { 1, 0 }
  uselistorder i32 %v2_fe44.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_fdb8, { 1, 0 }
  uselistorder i32 %v5_fd6c, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_fd6c, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_fd6c, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 4, 5, 0, 3, 2, 1 }
  uselistorder i8 32, { 2, 3, 4, 0, 5, 6, 7, 1 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_fe0c, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_fdc8, { 1, 0 }
  uselistorder label %dec_label_pc_fda0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fd6c, { 1, 2, 0, 3 }
}

define i32 @function_fe98(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fe98:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_fe98 = load i32, i32* @r4, align 4
  store i32 %v3_fe98, i32* %stack_var_-24, align 4
  %v12_fe98 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_feb0

dec_label_pc_feb0:                                ; preds = %dec_label_pc_fed4.dec_label_pc_feb0_crit_edge, %dec_label_pc_fe98
  %v0_feb4 = phi i32 [ %v0_feb4.pre, %dec_label_pc_fed4.dec_label_pc_feb0_crit_edge ], [ %arg3, %dec_label_pc_fe98 ]
  %v1_febc = call i32 @function_103dc(i32 %v0_feb4)
  %v7_fec0 = icmp eq i32 %v1_febc, 1
  %v0_fec8 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_fec0, label %dec_label_pc_fec8, label %dec_label_pc_fee0

dec_label_pc_fec8:                                ; preds = %dec_label_pc_feb0
  %v1_fec8 = add i32 %v0_fec8, 1
  store i32 %v1_fec8, i32* %r5.global-to-local, align 4
  %v1_fecc = load i32, i32* %r8.global-to-local, align 4
  %v6_fed0 = icmp slt i32 %v1_fec8, %v1_fecc
  br i1 %v6_fed0, label %dec_label_pc_fed4, label %.loopexit

dec_label_pc_fed4:                                ; preds = %dec_label_pc_fec8
  %v0_fed4 = load i32, i32* %r4.global-to-local, align 4
  %v1_fed4 = inttoptr i32 %v0_fed4 to i8*
  %v2_fed4 = load i8, i8* %v1_fed4, align 1
  %v5_fed4 = add i32 %v0_fed4, 1
  store i32 %v5_fed4, i32* %r4.global-to-local, align 4
  %v7_fed8 = icmp eq i8 %v2_fed4, 10
  br i1 %v7_fed8, label %dec_label_pc_fee0, label %dec_label_pc_fed4.dec_label_pc_feb0_crit_edge

dec_label_pc_fed4.dec_label_pc_feb0_crit_edge:    ; preds = %dec_label_pc_fed4
  %v0_feb4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_feb0

dec_label_pc_fee0:                                ; preds = %dec_label_pc_feb0, %dec_label_pc_fed4
  %v0_fee0 = phi i32 [ %v1_fec8, %dec_label_pc_fed4 ], [ %v0_fec8, %dec_label_pc_feb0 ]
  %v2_fee0 = icmp eq i32 %v0_fee0, 0
  br i1 %v2_fee0, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_fee0
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_fec8, %dec_label_pc_fee0, %bb
  %v0_fee8 = load i32, i32* @r7, align 4
  %v2_feec = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_feec, i32* @r4, align 4
  store i32 %v12_fe98, i32* @r7, align 4
  ret i32 %v0_fee8

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fee0, { 1, 0 }
}

define i32 @function_fef4() local_unnamed_addr {
dec_label_pc_fef4:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_ff04 = call i32 @function_10a6c()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_ff0c = inttoptr i32 %v0_ff04 to i32*
  store i32 0, i32* %v2_ff0c, align 4
  %v0_ff18 = load i32, i32* %r4.global-to-local, align 4
  %v3_ff1c = call i32 @function_10e30(i32 2, i32 2, i32 %v0_ff18)
  %v7_ff20 = icmp eq i32 %v3_ff1c, -1
  store i32 %v3_ff1c, i32* %r5.global-to-local, align 4
  br i1 %v7_ff20, label %bb, label %dec_label_pc_ff30

bb:                                               ; preds = %dec_label_pc_fef4
  %v1_ff28 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ff7c

dec_label_pc_ff30:                                ; preds = %dec_label_pc_fef4
  %v2_ff3c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_ff3c, i32* %r4.global-to-local, align 4
  %v0_ff48 = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_ff5c = call i32 @function_10c18(i32 %v3_ff1c, i32 %v2_ff3c, i32 %v0_ff48)
  %v2_ff64 = ptrtoint i32* %stack_var_-20 to i32
  %v0_ff68 = load i32, i32* %r5.global-to-local, align 4
  %v3_ff6c = call i32 @function_10c50(i32 %v0_ff68, i32 %v2_ff3c, i32 %v2_ff64)
  %v1_ff74 = call i32 @function_10644(i32 %v0_ff68)
  br label %dec_label_pc_ff7c

dec_label_pc_ff7c:                                ; preds = %bb, %dec_label_pc_ff30
  %storemerge = phi i32 [ 134744072, %dec_label_pc_ff30 ], [ %v1_ff28, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_ff1c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 134744072, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_10c18, { 6, 8, 5, 7, 4, 0, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_10e30, { 16, 18, 14, 15, 17, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_ff7c, { 1, 0 }
}

define i32 @function_ff88(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ff88:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_ff8c = load i8, i8* %tmp, align 1
  %v2_ff90 = icmp eq i8 %v3_ff8c, 0
  br i1 %v2_ff90, label %bb, label %dec_label_pc_ffa4

bb:                                               ; preds = %dec_label_pc_ff88
  %v4_ff8c = zext i8 %v3_ff8c to i32
  br label %dec_label_pc_ffb8

dec_label_pc_ffa4:                                ; preds = %dec_label_pc_ff88
  br label %dec_label_pc_ffa8

dec_label_pc_ffa8:                                ; preds = %dec_label_pc_ffa8, %dec_label_pc_ffa4
  %v0_ffa8 = phi i32 [ %v1_ffa8, %dec_label_pc_ffa8 ], [ 0, %dec_label_pc_ffa4 ]
  %v1_ffa8 = add i32 %v0_ffa8, 1
  %v2_ffac = add i32 %v1_ffa8, %arg2
  %v3_ffac = inttoptr i32 %v2_ffac to i8*
  %v4_ffac = load i8, i8* %v3_ffac, align 1
  %v2_ffb0 = icmp eq i8 %v4_ffac, 0
  br i1 %v2_ffb0, label %dec_label_pc_ffb8, label %dec_label_pc_ffa8

dec_label_pc_ffb8:                                ; preds = %dec_label_pc_ffa8, %bb
  %v0_fffc21 = phi i32 [ %v4_ff8c, %bb ], [ %v1_ffa8, %dec_label_pc_ffa8 ]
  %v0_ffc02 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_ffc02, 1
  br i1 %tmp29, label %dec_label_pc_10010, label %dec_label_pc_ffcc

dec_label_pc_ffcc:                                ; preds = %dec_label_pc_ffb8, %dec_label_pc_ffc0.backedge
  %v0_ffc4.in = phi i32 [ %v0_ffc4, %dec_label_pc_ffc0.backedge ], [ %v0_ffc02, %dec_label_pc_ffb8 ]
  %v1_ffd8 = phi i32 [ %v1_ffd815, %dec_label_pc_ffc0.backedge ], [ 0, %dec_label_pc_ffb8 ]
  %v0_ffcc = phi i32 [ %v5_ffcc, %dec_label_pc_ffc0.backedge ], [ %tmp23, %dec_label_pc_ffb8 ]
  %v0_ffc4 = add i32 %v0_ffc4.in, -1
  %v1_ffcc = inttoptr i32 %v0_ffcc to i8*
  %v2_ffcc = load i8, i8* %v1_ffcc, align 1
  %v3_ffcc = zext i8 %v2_ffcc to i32
  %v5_ffcc = add i32 %v0_ffcc, 1
  %v1_ffd0 = add nsw i32 %v3_ffcc, -65
  %v2_ffd8 = add i32 %v1_ffd8, %arg2
  %v3_ffd8 = inttoptr i32 %v2_ffd8 to i8*
  %v4_ffd8 = load i8, i8* %v3_ffd8, align 1
  %v6_ffd8 = zext i8 %v4_ffd8 to i32
  %v1_ffdc = add nsw i32 %v6_ffd8, -65
  %tmp38 = icmp ult i32 %v1_ffd0, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_ffcc
  %v5_ffe0 = or i32 %v3_ffcc, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_ffcc, %bb30
  %v0_ffec = phi i32 [ %v3_ffcc, %dec_label_pc_ffcc ], [ %v5_ffe0, %bb30 ]
  %tmp39 = icmp ult i32 %v1_ffdc, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_ffe8 = or i32 %v6_ffd8, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_ffec = phi i32 [ %v6_ffd8, %bb31 ], [ %v5_ffe8, %bb32 ]
  %v9_ffec = icmp eq i32 %v0_ffec, %v1_ffec
  br i1 %v9_ffec, label %dec_label_pc_fff8, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_ffc0.backedge

dec_label_pc_ffc0.backedge:                       ; preds = %bb34, %dec_label_pc_fff8
  %v1_ffd815 = phi i32 [ 0, %bb34 ], [ %v1_fff8, %dec_label_pc_fff8 ]
  %tmp35 = icmp slt i32 %v0_ffc4, 1
  br i1 %tmp35, label %dec_label_pc_10010, label %dec_label_pc_ffcc

dec_label_pc_fff8:                                ; preds = %bb33
  %v1_fff8 = add i32 %v1_ffd8, 1
  %v9_fffc = icmp eq i32 %v0_fffc21, %v1_fff8
  br i1 %v9_fffc, label %dec_label_pc_10004, label %dec_label_pc_ffc0.backedge

dec_label_pc_10004:                               ; preds = %dec_label_pc_fff8
  %v2_10004 = sub i32 %v5_ffcc, %tmp23
  br label %dec_label_pc_10010

dec_label_pc_10010:                               ; preds = %dec_label_pc_ffc0.backedge, %dec_label_pc_ffb8, %dec_label_pc_10004
  %storemerge = phi i32 [ %v2_10004, %dec_label_pc_10004 ], [ -1, %dec_label_pc_ffb8 ], [ -1, %dec_label_pc_ffc0.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_fff8, { 1, 0 }
  uselistorder i32 %v0_ffcc, { 1, 0 }
  uselistorder i32 %v1_ffd8, { 1, 0 }
  uselistorder i8 %v3_ff8c, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder label %dec_label_pc_10010, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ffc0.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_ffcc, { 1, 0 }
}

define i32 @function_10018(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10018:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_10018 = load i32, i32* @r4, align 4
  %v12_10018 = load i32, i32* @r7, align 4
  %v0_1001c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_1001c, i32* %r8.global-to-local, align 4
  %v2_1001c = icmp eq i32 %v0_1001c, 0
  store i1 %v2_1001c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_1001c, label %dec_label_pc_100fc, label %dec_label_pc_1002c

dec_label_pc_1002c:                               ; preds = %dec_label_pc_10018
  %v3_1002c = icmp eq i8 %arg1, 0
  store i1 %v3_1002c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1002c, label %.thread, label %dec_label_pc_10040

.thread:                                          ; preds = %dec_label_pc_1002c
  %v4_10034 = inttoptr i32 %v0_1001c to i8*
  store i8 48, i8* %v4_10034, align 1
  %v0_10038.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10038.pr.pr, label %.thread1, label %dec_label_pc_10040

.thread1:                                         ; preds = %.thread
  %v4_10038 = load i32, i32* %r8.global-to-local, align 4
  %v5_10038 = add i32 %v4_10038, 1
  %v6_10038 = inttoptr i32 %v5_10038 to i8*
  store i8 0, i8* %v6_10038, align 1
  %v0_1003c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1003c.pr.pr, label %dec_label_pc_100fc, label %dec_label_pc_10040

dec_label_pc_10040:                               ; preds = %dec_label_pc_1002c, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_10044 = icmp eq i32 %arg2, 10
  store i1 %v7_10044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10044, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_10040
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_10040
  %v4_10040 = zext i1 %tmp47 to i32
  store i32 %v4_10040, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_100648 = sub nsw i32 0, %tmp
  %tmp.v3_100648 = select i1 %phitmp, i32 %tmp, i32 %v3_100648
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_100648, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_10070 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_10070, i32* @r7, align 4
  br label %dec_label_pc_10074

dec_label_pc_10074:                               ; preds = %bb45, %.thread6
  %v0_10074 = phi i32 [ %v0_10098, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_10074, i32* %r0.global-to-local, align 4
  %v0_10078 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10078, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_10074, 16777216
  %v1_1007c = sdiv i32 %sext, 16777216
  %v3_1007c = call i32 @function_10210(i32 %v1_1007c, i32 %v0_10078)
  %v7_10080 = icmp eq i32 %v0_10078, 9
  store i1 %v7_10080, i1* %cpsr_z.global-to-local, align 1
  %v1_10084 = add i32 %v0_10078, 48
  %v0_10088 = load i32, i32* @r4, align 4
  store i32 %v0_10088, i32* @r0, align 4
  %v7_1008c = icmp sgt i32 %v0_10078, 9
  %extract.t = trunc i32 %v1_10084 to i8
  br i1 %v7_1008c, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_10074
  %v9_1008c = add i32 %v0_10078, 55
  %extract.t27 = trunc i32 %v9_1008c to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_10074, %bb44
  %v0_10094.off0 = phi i8 [ %extract.t, %dec_label_pc_10074 ], [ %extract.t27, %bb44 ]
  %v0_10090 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10090, i32* @r1, align 4
  %v2_10094 = load i32, i32* %r5.global-to-local, align 4
  %v3_10094 = load i32, i32* @r7, align 4
  %v4_10094 = add i32 %v3_10094, %v2_10094
  %v5_10094 = inttoptr i32 %v4_10094 to i8*
  store i8 %v0_10094.off0, i8* %v5_10094, align 1
  %v0_10098 = call i32 @function_10114()
  store i32 %v0_10098, i32* %r0.global-to-local, align 4
  store i32 %v0_10098, i32* @r4, align 4
  %v2_1009c = icmp eq i32 %v0_10098, 0
  store i1 %v2_1009c, i1* %cpsr_z.global-to-local, align 1
  %v0_100a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_100a0 = add i32 %v0_100a0, -1
  store i32 %v1_100a0, i32* %r5.global-to-local, align 4
  br i1 %v2_1009c, label %dec_label_pc_100a8, label %dec_label_pc_10074

dec_label_pc_100a8:                               ; preds = %bb45
  %v0_100a8 = load i32, i32* %sl.global-to-local, align 4
  %v2_100a8 = icmp eq i32 %v0_100a8, 0
  store i1 %v2_100a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_100a8, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_100a8
  %v3_100ac = ptrtoint i32* %stack_var_-32 to i32
  %v3_100b0 = add i32 %v1_100a0, %v3_100ac
  store i32 %v3_100b0, i32* %r2.global-to-local, align 4
  %v4_100b8 = add i32 %v3_100b0, -34
  %v5_100b8 = inttoptr i32 %v4_100b8 to i8*
  store i8 45, i8* %v5_100b8, align 1
  %v0_100bc.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_100bc.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_100bc.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_100a8
  %v1_100bc = phi i32 [ %v1_100a0, %dec_label_pc_100a8 ], [ %v1_100bc.pre, %.thread11 ]
  %v2_100bc = add i32 %v1_100bc, 1
  store i32 %v2_100bc, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_100c8 = phi i32 [ %v2_100bc, %.thread12 ], [ %v1_100bc.pre, %.thread11 ]
  %v0_100c0 = load i32, i32* @r7, align 4
  %v2_100c0 = add i32 %v0_100c0, %v1_100c8
  %v3_100c0 = inttoptr i32 %v2_100c0 to i8*
  %v4_100c0 = load i8, i8* %v3_100c0, align 1
  %v6_100c0 = zext i8 %v4_100c0 to i32
  %v2_100c4 = icmp eq i8 %v4_100c0, 0
  store i1 %v2_100c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_100c0, i32* %r2.global-to-local, align 4
  br i1 %v2_100c4, label %dec_label_pc_1010c, label %dec_label_pc_100d4.preheader

dec_label_pc_100d4.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_100d4

dec_label_pc_100d4:                               ; preds = %dec_label_pc_100d4.preheader, %dec_label_pc_100d4
  %v0_100d4 = phi i32 [ 0, %dec_label_pc_100d4.preheader ], [ %v1_100d4, %dec_label_pc_100d4 ]
  %v1_100d4 = add i32 %v0_100d4, 1
  store i32 %v1_100d4, i32* %r1.global-to-local, align 4
  %v2_100d8 = add i32 %v1_100d4, %v2_100c0
  %v3_100d8 = inttoptr i32 %v2_100d8 to i8*
  %v4_100d8 = load i8, i8* %v3_100d8, align 1
  %v2_100dc = icmp eq i8 %v4_100d8, 0
  store i1 %v2_100dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_100dc, label %dec_label_pc_100e4, label %dec_label_pc_100d4

dec_label_pc_100e4:                               ; preds = %dec_label_pc_100d4, %dec_label_pc_1010c
  %v0_100e824 = phi i32 [ %v6_100c0, %dec_label_pc_1010c ], [ %v1_100d4, %dec_label_pc_100d4 ]
  %v0_100e4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_100e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_100e8

dec_label_pc_100e8:                               ; preds = %dec_label_pc_100e8.dec_label_pc_100e8_crit_edge, %dec_label_pc_100e4
  %v2_100f4 = phi i32 [ %v5_100f4, %dec_label_pc_100e8.dec_label_pc_100e8_crit_edge ], [ %v0_100e4, %dec_label_pc_100e4 ]
  %v0_100ec = phi i32 [ %v0_100ec.pre, %dec_label_pc_100e8.dec_label_pc_100e8_crit_edge ], [ %v2_100c0, %dec_label_pc_100e4 ]
  %v0_100e8 = phi i32 [ %v0_100e8.pre, %dec_label_pc_100e8.dec_label_pc_100e8_crit_edge ], [ %v0_100e824, %dec_label_pc_100e4 ]
  %v1_100e8 = add i32 %v0_100e8, -1
  store i32 %v1_100e8, i32* %r1.global-to-local, align 4
  %v1_100ec = inttoptr i32 %v0_100ec to i8*
  %v2_100ec = load i8, i8* %v1_100ec, align 1
  %v5_100ec = add i32 %v0_100ec, 1
  store i32 %v5_100ec, i32* %r2.global-to-local, align 4
  %v3_100f0 = icmp eq i32 %v0_100e8, 0
  store i1 %v3_100f0, i1* %cpsr_z.global-to-local, align 1
  %v3_100f4 = inttoptr i32 %v2_100f4 to i8*
  store i8 %v2_100ec, i8* %v3_100f4, align 1
  %v4_100f4 = load i32, i32* %r0.global-to-local, align 4
  %v5_100f4 = add i32 %v4_100f4, 1
  store i32 %v5_100f4, i32* %r0.global-to-local, align 4
  br i1 %v3_100f0, label %dec_label_pc_100fc, label %dec_label_pc_100e8.dec_label_pc_100e8_crit_edge

dec_label_pc_100e8.dec_label_pc_100e8_crit_edge:  ; preds = %dec_label_pc_100e8
  %v0_100e8.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_100ec.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_100e8

dec_label_pc_100fc:                               ; preds = %dec_label_pc_100e8, %.thread1, %dec_label_pc_10018
  %v0_100fc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_100fc, i32* %r0.global-to-local, align 4
  store i32 %v3_10018, i32* @r4, align 4
  store i32 %v12_10018, i32* @r7, align 4
  ret i32 %v0_100fc

dec_label_pc_1010c:                               ; preds = %.thread11._crit_edge
  store i32 %v6_100c0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_100e4

; uselistorder directives
  uselistorder i32 %v5_100f4, { 1, 0 }
  uselistorder i1 %v3_100f0, { 1, 0 }
  uselistorder i32 %v0_100ec, { 1, 0 }
  uselistorder i32 %v1_100d4, { 0, 1, 3, 2 }
  uselistorder i32 %v6_100c0, { 1, 0 }
  uselistorder i32 %v2_100c0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_100bc.pre, { 1, 0 }
  uselistorder i32 %v1_100a0, { 1, 0, 2 }
  uselistorder i32 %v0_10098, { 1, 2, 3, 0 }
  uselistorder i32 %v0_10078, { 1, 0, 2, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_1001c, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 10, 9, 11, 12 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_10210, { 4, 0, 6, 5, 1, 3, 2 }
  uselistorder label %dec_label_pc_100e4, { 1, 0 }
  uselistorder label %dec_label_pc_100d4, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_10040, { 2, 1, 0 }
}

define i32 @function_10114() local_unnamed_addr {
dec_label_pc_10114:
  %r2.global-to-local = alloca i32, align 4
  %v0_10114 = load i32, i32* @r1, align 4
  %v1_10114 = add i32 %v0_10114, -1
  store i32 %v1_10114, i32* %r2.global-to-local, align 4
  %v2_10114 = icmp eq i32 %v0_10114, 0
  %v7_10114 = icmp eq i32 %v0_10114, 1
  %v0_10118 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_10114, i32 %v0_10118)
  br i1 %v2_10114, label %dec_label_pc_101fc, label %dec_label_pc_10120

dec_label_pc_10120:                               ; preds = %dec_label_pc_10114
  %v0_10120 = load i32, i32* @r0, align 4
  %v1_10120 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_10120, %v1_10120
  br i1 %tmp, label %dec_label_pc_10128, label %dec_label_pc_101b4

dec_label_pc_10128:                               ; preds = %dec_label_pc_10120
  %v1_10128 = load i32, i32* %r2.global-to-local, align 4
  %v2_10128 = and i32 %v1_10128, %v1_10120
  %v4_10128 = icmp eq i32 %v2_10128, 0
  br i1 %v4_10128, label %dec_label_pc_101c0, label %dec_label_pc_10130

dec_label_pc_10130:                               ; preds = %dec_label_pc_10128
  %v3_10130 = icmp ult i32 %v1_10120, 536870912
  br i1 %v3_10130, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10130
  %v4_10134 = mul i32 %v1_10120, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10130, %.thread
  %v0_10154.pr36.ph = phi i32 [ %v4_10134, %.thread ], [ %v1_10120, %dec_label_pc_10130 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10130 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_10154.pr36 = phi i32 [ %v4_10148, %bb81 ], [ %v0_10154.pr36.ph, %.preheader.preheader ]
  %v1_1014c = phi i32 [ %v4_1014c, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_10140 = icmp ugt i32 %v0_10154.pr36, 268435455
  br i1 %v2_10140, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10154thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_10144 = icmp ult i32 %v0_10154.pr36, %v0_10120
  br i1 %v4_10144, label %bb80, label %dec_label_pc_10154thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_10148 = and i32 %v0_10154.pr36, 268435456
  %v3_10148 = icmp eq i32 %v2_10148, 0
  %v4_10148 = mul i32 %v0_10154.pr36, 16
  br i1 %v3_10148, label %bb81, label %dec_label_pc_10154.loopexit

bb81:                                             ; preds = %bb80
  %v2_1014c = and i32 %v1_1014c, 268435456
  %v3_1014c = icmp eq i32 %v2_1014c, 0
  %v4_1014c = mul i32 %v1_1014c, 16
  br i1 %v3_1014c, label %.preheader, label %dec_label_pc_10154thread-pre-split.loopexit.loopexit

dec_label_pc_10154thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_1016048.ph = phi i32 [ %v1_1014c, %bb ], [ %v4_1014c, %bb81 ]
  %v0_10154.pr38.ph = phi i32 [ %v0_10154.pr36, %bb ], [ %v4_10148, %bb81 ]
  br label %dec_label_pc_10154thread-pre-split.loopexit

dec_label_pc_10154thread-pre-split.loopexit:      ; preds = %dec_label_pc_10154thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1016048 = phi i32 [ %v1_1014c, %.thread2 ], [ %v1_1016048.ph, %dec_label_pc_10154thread-pre-split.loopexit.loopexit ]
  %v0_10154.pr38 = phi i32 [ %v0_10154.pr36, %.thread2 ], [ %v0_10154.pr38.ph, %dec_label_pc_10154thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10154thread-pre-split

dec_label_pc_10154thread-pre-split:               ; preds = %dec_label_pc_10154thread-pre-split.loopexit, %bb83
  %v1_1016046 = phi i32 [ %v1_1016048, %dec_label_pc_10154thread-pre-split.loopexit ], [ %v3_10160, %bb83 ]
  %v0_10154.pr = phi i32 [ %v0_10154.pr38, %dec_label_pc_10154thread-pre-split.loopexit ], [ %v3_1015c, %bb83 ]
  br label %dec_label_pc_10154

dec_label_pc_10154.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_10154

dec_label_pc_10154:                               ; preds = %dec_label_pc_10154.loopexit, %dec_label_pc_10154thread-pre-split
  %v1_10160 = phi i32 [ %v1_1016046, %dec_label_pc_10154thread-pre-split ], [ %v1_1014c, %dec_label_pc_10154.loopexit ]
  %v1_1015c = phi i32 [ %v0_10154.pr, %dec_label_pc_10154thread-pre-split ], [ %v4_10148, %dec_label_pc_10154.loopexit ]
  %v2_10154 = icmp slt i32 %v1_1015c, 0
  br i1 %v2_10154, label %dec_label_pc_10168, label %bb82

bb82:                                             ; preds = %dec_label_pc_10154
  %v4_10158 = icmp ult i32 %v1_1015c, %v0_10120
  br i1 %v4_10158, label %bb83, label %dec_label_pc_10168

bb83:                                             ; preds = %bb82
  %v3_1015c = mul i32 %v1_1015c, 2
  %v2_10160 = icmp slt i32 %v1_10160, 0
  %v3_10160 = mul i32 %v1_10160, 2
  br i1 %v2_10160, label %dec_label_pc_10168, label %dec_label_pc_10154thread-pre-split

dec_label_pc_10168:                               ; preds = %bb82, %dec_label_pc_10154, %bb83
  %v2_1017459 = phi i32 [ %v3_10160, %bb83 ], [ %v1_10160, %bb82 ], [ %v1_10160, %dec_label_pc_10154 ]
  %v1_1016c51 = phi i32 [ %v3_1015c, %bb83 ], [ %v1_1015c, %bb82 ], [ %v1_1015c, %dec_label_pc_10154 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1016c

dec_label_pc_1016c:                               ; preds = %.thread11, %dec_label_pc_10168
  %v1_101a0 = phi i32 [ %v4_101a0, %.thread11 ], [ %v2_1017459, %dec_label_pc_10168 ]
  %v1_10174 = phi i32 [ %v0_101ac, %.thread11 ], [ 0, %dec_label_pc_10168 ]
  %v1_101a4 = phi i32 [ %v4_101a4, %.thread11 ], [ %v1_1016c51, %dec_label_pc_10168 ]
  %v1_10170 = phi i32 [ %v0_1019c, %.thread11 ], [ %v0_10120, %dec_label_pc_10168 ]
  %v3_1016c = icmp ult i32 %v1_10170, %v1_101a4
  br i1 %v3_1016c, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_1016c
  %v3_10170 = sub i32 %v1_10170, %v1_101a4
  %v3_10174 = or i32 %v1_10174, %v1_101a0
  store i32 %v3_10174, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_1016c, %bb84
  %v1_1017c = phi i32 [ %v1_10170, %dec_label_pc_1016c ], [ %v3_10170, %bb84 ]
  %v1_10180 = phi i32 [ %v1_10174, %dec_label_pc_1016c ], [ %v3_10174, %bb84 ]
  %v4_10178 = udiv i32 %v1_101a4, 2
  %v6_10178 = icmp ult i32 %v1_1017c, %v4_10178
  br i1 %v6_10178, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_1017c = urem i32 %v1_101a4, 2
  %v4_1017c = icmp eq i32 %v3_1017c, 0
  %v6_1017c = sub i32 %v1_1017c, %v4_10178
  br i1 %v4_1017c, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_10180 = udiv i32 %v1_101a0, 2
  %v6_10180 = or i32 %v1_10180, %v5_10180
  store i32 %v6_10180, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_10188 = phi i32 [ %v6_1017c, %bb85 ], [ %v1_1017c, %.thread7 ], [ %v6_1017c, %bb86 ]
  %v1_1018c = phi i32 [ %v1_10180, %bb85 ], [ %v1_10180, %.thread7 ], [ %v6_10180, %bb86 ]
  %v4_10184 = udiv i32 %v1_101a4, 4
  %v6_10184 = icmp ult i32 %v1_10188, %v4_10184
  br i1 %v6_10184, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_10188 = and i32 %v1_101a4, 2
  %v4_10188 = icmp eq i32 %v3_10188, 0
  %v6_10188 = sub i32 %v1_10188, %v4_10184
  br i1 %v4_10188, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_1018c = udiv i32 %v1_101a0, 4
  %v6_1018c = or i32 %v1_1018c, %v5_1018c
  store i32 %v6_1018c, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_10194 = phi i32 [ %v6_10188, %bb87 ], [ %v1_10188, %.thread8 ], [ %v6_10188, %bb88 ]
  %v1_10198 = phi i32 [ %v1_1018c, %bb87 ], [ %v1_1018c, %.thread8 ], [ %v6_1018c, %bb88 ]
  %v4_10190 = udiv i32 %v1_101a4, 8
  %v6_10190 = icmp ult i32 %v1_10194, %v4_10190
  br i1 %v6_10190, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_10194 = and i32 %v1_101a4, 4
  %v4_10194 = icmp eq i32 %v3_10194, 0
  %v6_10194 = sub i32 %v1_10194, %v4_10190
  br i1 %v4_10194, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10198 = udiv i32 %v1_101a0, 8
  %v6_10198 = or i32 %v1_10198, %v5_10198
  store i32 %v6_10198, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_101ac = phi i32 [ %v1_10198, %bb89 ], [ %v1_10198, %.thread9 ], [ %v6_10198, %bb90 ]
  %v0_1019c = phi i32 [ %v6_10194, %bb89 ], [ %v1_10194, %.thread9 ], [ %v6_10194, %bb90 ]
  %v2_1019c = icmp eq i32 %v0_1019c, 0
  br i1 %v2_1019c, label %dec_label_pc_101ac, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_101a0, 16
  br i1 %tmp138, label %dec_label_pc_101ac, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_101a0 = udiv i32 %v1_101a0, 16
  %v4_101a4 = udiv i32 %v1_101a4, 16
  br label %dec_label_pc_1016c

dec_label_pc_101ac:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_101ac

dec_label_pc_101b4:                               ; preds = %dec_label_pc_10120
  %v9_10120 = icmp eq i32 %v0_10120, %v1_10120
  %. = zext i1 %v9_10120 to i32
  ret i32 %.

dec_label_pc_101c0:                               ; preds = %dec_label_pc_10128
  %v2_101c0 = icmp ugt i32 %v1_10120, 65535
  br i1 %v2_101c0, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_101c0
  %v2_101c4 = and i32 %v1_10120, 32768
  %v3_101c4 = icmp eq i32 %v2_101c4, 0
  %v4_101c4 = udiv i32 %v1_10120, 65536
  br i1 %v3_101c4, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_101c0
  %v0_101d065 = phi i32 [ %v1_10120, %dec_label_pc_101c0 ], [ %v4_101c4, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_101d4 = phi i32 [ %v0_101d065, %.thread16 ], [ %v4_101c4, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_101d0 = icmp ugt i32 %v1_101d4, 255
  br i1 %v2_101d0, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_101d4 = and i32 %v1_101d4, 128
  %v3_101d4 = icmp eq i32 %v2_101d4, 0
  %v4_101d4 = udiv i32 %v1_101d4, 256
  br i1 %v3_101d4, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_101d8 = or i32 %storemerge, 8
  store i32 %v2_101d8, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_101e4 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_101d8, %bb98 ]
  %v1_101e0 = phi i32 [ %v1_101d4, %bb96 ], [ %v4_101d4, %bb97 ], [ %v4_101d4, %bb98 ]
  %v2_101dc = icmp ugt i32 %v1_101e0, 15
  br i1 %v2_101dc, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_101e0 = and i32 %v1_101e0, 8
  %v3_101e0 = icmp eq i32 %v2_101e0, 0
  %v4_101e0 = udiv i32 %v1_101e0, 16
  br i1 %v3_101e0, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_101e4 = add nsw i32 %v1_101e4, 4
  store i32 %v2_101e4, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_101ec = phi i32 [ %v1_101e4, %.thread17 ], [ %v1_101e4, %bb99 ], [ %v2_101e4, %bb100 ]
  %v5_101f0 = phi i32 [ %v1_101e0, %.thread17 ], [ %v4_101e0, %bb99 ], [ %v4_101e0, %bb100 ]
  %v2_101e8 = icmp ugt i32 %v5_101f0, 3
  %v7_101e8 = icmp eq i32 %v5_101f0, 4
  %v2_101ec = xor i1 %v7_101e8, true
  %v3_101ec = and i1 %v2_101e8, %v2_101ec
  br i1 %v3_101ec, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_101ec = add nsw i32 %v4_101ec, 3
  store i32 %v5_101ec, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_101f0 = phi i32 [ %v4_101ec, %.thread18 ], [ %v5_101ec, %bb101 ]
  %v2_101f0 = xor i1 %v2_101e8, true
  %v3_101f0 = or i1 %v7_101e8, %v2_101f0
  br i1 %v3_101f0, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_101f0 = udiv i32 %v5_101f0, 2
  %v9_101f0 = add i32 %v4_101f0, %v8_101f0
  store i32 %v9_101f0, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_101f4 = phi i32 [ %v4_101f0, %bb102 ], [ %v9_101f0, %bb103 ]
  %v6_101f4 = lshr i32 %v0_10120, %v1_101f4
  ret i32 %v6_101f4

dec_label_pc_101fc:                               ; preds = %dec_label_pc_10114
  %v0_101fc = load i32, i32* @lr, align 4
  %v0_10200 = call i32 @function_10228()
  store i32 %v0_101fc, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_101f0, { 1, 0 }
  uselistorder i1 %v7_101e8, { 1, 0 }
  uselistorder i32 %v4_101e0, { 1, 0 }
  uselistorder i32 %v1_101e0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_101d8, { 1, 0 }
  uselistorder i32 %v4_101d4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_101d4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_101c4, { 1, 0 }
  uselistorder i32 %v0_1019c, { 1, 0 }
  uselistorder i32 %v4_10190, { 1, 0 }
  uselistorder i32 %v1_10198, { 1, 2, 0 }
  uselistorder i32 %v4_10184, { 1, 0 }
  uselistorder i32 %v1_1018c, { 1, 2, 0 }
  uselistorder i32 %v4_10178, { 1, 0 }
  uselistorder i32 %v1_10180, { 1, 2, 0 }
  uselistorder i32 %v1_101a4, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10174, { 1, 0 }
  uselistorder i32 %v1_101a0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10160, { 1, 0 }
  uselistorder i32 %v3_1015c, { 1, 0 }
  uselistorder i32 %v1_1015c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10160, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1014c, { 1, 0 }
  uselistorder i32 %v4_10148, { 2, 1, 0 }
  uselistorder i32 %v1_1014c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10154.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_10120, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_10120, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10114, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_101ac, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10168, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10154thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10210(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10210:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_10214 = call i32 @function_10114()
  %v2_1021c = mul i32 %v0_10214, %arg2
  store i32 %v2_1021c, i32* @r3, align 4
  ret i32 %v0_10214

; uselistorder directives
  uselistorder i32 %v0_10214, { 1, 0 }
}

define i32 @function_10228() local_unnamed_addr {
dec_label_pc_10228:
  %v1_10230 = call i32 @function_10e68(i32 8)
  ret i32 %v1_10230
}

define i32 @function_1023c() local_unnamed_addr {
dec_label_pc_1023c:
  %v1_1024c = load i32, i32* @r0, align 4
  ret i32 %v1_1024c
}

define i32 @function_10250(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10250:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_10250 = load i32, i32* @r2, align 4
  %v9_10250 = load i32, i32* @r3, align 4
  store i32 %v9_10250, i32* %stack_var_-4, align 4
  %v1_10260 = and i32 %arg2, 64
  %v2_10260 = icmp eq i32 %v1_10260, 0
  br i1 %v2_10260, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_10250
  %v3_10268 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_10268, i32* @r3, align 4
  %phitmp = urem i32 %v6_10250, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10250, %bb
  %v0_1026c = phi i32 [ 0, %dec_label_pc_10250 ], [ %phitmp, %bb ]
  store i32 %v0_1026c, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1029c, label %dec_label_pc_1028c

dec_label_pc_1028c:                               ; preds = %.thread
  %v0_1028c = call i32 @function_10a6c()
  %v0_10290 = load i32, i32* %r7.global-to-local, align 4
  %v1_10290 = sub i32 0, %v0_10290
  store i32 %v1_10290, i32* @r3, align 4
  %v2_10294 = inttoptr i32 %v0_1028c to i32*
  store i32 %v1_10290, i32* %v2_10294, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1029c

dec_label_pc_1029c:                               ; preds = %.thread, %dec_label_pc_1028c
  %v0_1029c = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_1028c ]
  ret i32 %v0_1029c

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1029c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_102b0() local_unnamed_addr {
dec_label_pc_102b0:
  %v1_102c0 = load i32, i32* @r0, align 4
  ret i32 %v1_102c0
}

define i32 @function_102c4(i32* %arg1) local_unnamed_addr {
dec_label_pc_102c4:
  %stack_var_-16 = alloca i32, align 4
  %v2_102c8 = ptrtoint i32* %stack_var_-16 to i32
  %v2_102d8 = call i32 @function_10444(i32 %v2_102c8, i32 0)
  %v2_102dc = load i32, i32* %stack_var_-16, align 4
  %v2_102e0 = icmp eq i32* %arg1, null
  br i1 %v2_102e0, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_102c4
  store i32 %v2_102dc, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_102c4, %bb
  ret i32 %v2_102dc

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_102f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_102f4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10328, label %dec_label_pc_10318

dec_label_pc_10318:                               ; preds = %dec_label_pc_102f4
  %v0_10318 = call i32 @function_10a6c()
  %v0_1031c = load i32, i32* %r4.global-to-local, align 4
  %v1_1031c = sub i32 0, %v0_1031c
  %v2_10320 = inttoptr i32 %v0_10318 to i32*
  store i32 %v1_1031c, i32* %v2_10320, align 4
  br label %dec_label_pc_10328

dec_label_pc_10328:                               ; preds = %dec_label_pc_102f4, %dec_label_pc_10318
  %v1_10330 = phi i32 [ %arg1, %dec_label_pc_102f4 ], [ -1, %dec_label_pc_10318 ]
  ret i32 %v1_10330

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10328, { 1, 0 }
}

define i32 @function_10334() local_unnamed_addr {
dec_label_pc_10334:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10334 = load i32, i32* @r7, align 4
  store i32 %v3_10334, i32* %stack_var_-8, align 4
  %v0_10340 = load i32, i32* @r0, align 4
  store i32 %v0_10340, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10340, -4095
  br i1 %tmp, label %dec_label_pc_10360, label %dec_label_pc_10350

dec_label_pc_10350:                               ; preds = %dec_label_pc_10334
  %v0_10350 = call i32 @function_10a6c()
  %v0_10354 = load i32, i32* %r7.global-to-local, align 4
  %v1_10354 = sub i32 0, %v0_10354
  %v2_10358 = inttoptr i32 %v0_10350 to i32*
  store i32 %v1_10354, i32* %v2_10358, align 4
  %v2_10360.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10360

dec_label_pc_10360:                               ; preds = %dec_label_pc_10334, %dec_label_pc_10350
  %v1_10364 = phi i32 [ %v0_10340, %dec_label_pc_10334 ], [ -1, %dec_label_pc_10350 ]
  %v2_10360 = phi i32 [ %v3_10334, %dec_label_pc_10334 ], [ %v2_10360.pre, %dec_label_pc_10350 ]
  store i32 %v2_10360, i32* @r7, align 4
  ret i32 %v1_10364

; uselistorder directives
  uselistorder i32 %v0_10340, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10360, { 1, 0 }
}

define i32 @function_10368(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10368:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10398, label %dec_label_pc_10388

dec_label_pc_10388:                               ; preds = %dec_label_pc_10368
  %v0_10388 = call i32 @function_10a6c()
  %v0_1038c = load i32, i32* %r4.global-to-local, align 4
  %v1_1038c = sub i32 0, %v0_1038c
  %v2_10390 = inttoptr i32 %v0_10388 to i32*
  store i32 %v1_1038c, i32* %v2_10390, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10398

dec_label_pc_10398:                               ; preds = %dec_label_pc_10368, %dec_label_pc_10388
  %v0_10398 = phi i32 [ %arg1, %dec_label_pc_10368 ], [ -1, %dec_label_pc_10388 ]
  ret i32 %v0_10398

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10398, { 1, 0 }
}

define i32 @function_103a8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_103a8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_103a8 = load i32, i32* @r7, align 4
  store i32 %v3_103a8, i32* %stack_var_-8, align 4
  %v0_103b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_103b4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_103b4, -4095
  br i1 %tmp, label %dec_label_pc_103d4, label %dec_label_pc_103c4

dec_label_pc_103c4:                               ; preds = %dec_label_pc_103a8
  %v0_103c4 = call i32 @function_10a6c()
  %v0_103c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_103c8 = sub i32 0, %v0_103c8
  %v2_103cc = inttoptr i32 %v0_103c4 to i32*
  store i32 %v1_103c8, i32* %v2_103cc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_103d4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_103d4

dec_label_pc_103d4:                               ; preds = %dec_label_pc_103a8, %dec_label_pc_103c4
  %v1_103d8 = phi i32 [ %v0_103b4, %dec_label_pc_103a8 ], [ -1, %dec_label_pc_103c4 ]
  %v2_103d4 = phi i32 [ %v3_103a8, %dec_label_pc_103a8 ], [ %v2_103d4.pre, %dec_label_pc_103c4 ]
  store i32 %v2_103d4, i32* @r7, align 4
  ret i32 %v1_103d8

; uselistorder directives
  uselistorder i32 %v0_103b4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_103d4, { 1, 0 }
}

define i32 @function_103dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_103dc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_103dc = load i32, i32* @r7, align 4
  store i32 %v3_103dc, i32* %stack_var_-8, align 4
  %v0_103e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_103e8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_103e8, -4095
  br i1 %tmp, label %dec_label_pc_10408, label %dec_label_pc_103f8

dec_label_pc_103f8:                               ; preds = %dec_label_pc_103dc
  %v0_103f8 = call i32 @function_10a6c()
  %v0_103fc = load i32, i32* %r7.global-to-local, align 4
  %v1_103fc = sub i32 0, %v0_103fc
  %v2_10400 = inttoptr i32 %v0_103f8 to i32*
  store i32 %v1_103fc, i32* %v2_10400, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10408.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10408

dec_label_pc_10408:                               ; preds = %dec_label_pc_103dc, %dec_label_pc_103f8
  %v1_1040c = phi i32 [ %v0_103e8, %dec_label_pc_103dc ], [ -1, %dec_label_pc_103f8 ]
  %v2_10408 = phi i32 [ %v3_103dc, %dec_label_pc_103dc ], [ %v2_10408.pre, %dec_label_pc_103f8 ]
  store i32 %v2_10408, i32* @r7, align 4
  ret i32 %v1_1040c

; uselistorder directives
  uselistorder i32 %v0_103e8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10408, { 1, 0 }
}

define i32 @function_10410(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10410:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10410 = load i32, i32* @r7, align 4
  store i32 %v3_10410, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10438, label %dec_label_pc_10428

dec_label_pc_10428:                               ; preds = %dec_label_pc_10410
  %v0_10428 = call i32 @function_10a6c()
  %v0_1042c = load i32, i32* %r7.global-to-local, align 4
  %v1_1042c = sub i32 0, %v0_1042c
  %v2_10430 = inttoptr i32 %v0_10428 to i32*
  store i32 %v1_1042c, i32* %v2_10430, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_1043c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10438

dec_label_pc_10438:                               ; preds = %dec_label_pc_10410, %dec_label_pc_10428
  %v2_1043c = phi i32 [ %v3_10410, %dec_label_pc_10410 ], [ %v2_1043c.pre, %dec_label_pc_10428 ]
  %v0_10438 = phi i32 [ %arg1, %dec_label_pc_10410 ], [ -1, %dec_label_pc_10428 ]
  store i32 %v2_1043c, i32* @r7, align 4
  ret i32 %v0_10438

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10438, { 1, 0 }
}

define i32 @function_10444(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10444:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10444 = load i32, i32* @r7, align 4
  store i32 %v3_10444, i32* %stack_var_-8, align 4
  %v0_10450 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10450, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10450, -4095
  br i1 %tmp, label %dec_label_pc_10470, label %dec_label_pc_10460

dec_label_pc_10460:                               ; preds = %dec_label_pc_10444
  %v0_10460 = call i32 @function_10a6c()
  %v0_10464 = load i32, i32* %r7.global-to-local, align 4
  %v1_10464 = sub i32 0, %v0_10464
  store i32 %v1_10464, i32* @r3, align 4
  %v2_10468 = inttoptr i32 %v0_10460 to i32*
  store i32 %v1_10464, i32* %v2_10468, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10470.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10470

dec_label_pc_10470:                               ; preds = %dec_label_pc_10444, %dec_label_pc_10460
  %v1_10474 = phi i32 [ %v0_10450, %dec_label_pc_10444 ], [ -1, %dec_label_pc_10460 ]
  %v2_10470 = phi i32 [ %v3_10444, %dec_label_pc_10444 ], [ %v2_10470.pre, %dec_label_pc_10460 ]
  store i32 %v2_10470, i32* @r7, align 4
  ret i32 %v1_10474

; uselistorder directives
  uselistorder i32 %v0_10450, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10470, { 1, 0 }
}

define i32 @function_10478(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10478:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10478 = load i32, i32* @r3, align 4
  store i32 %v9_10478, i32* %stack_var_-4, align 4
  %v2_10490 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10490, i32* @r3, align 4
  %v0_104b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_104b4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_104b4, -4095
  br i1 %tmp, label %dec_label_pc_104d4, label %dec_label_pc_104c4

dec_label_pc_104c4:                               ; preds = %dec_label_pc_10478
  %v0_104c4 = call i32 @function_10a6c()
  %v0_104c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_104c8 = sub i32 0, %v0_104c8
  store i32 %v1_104c8, i32* @r3, align 4
  %v2_104cc = inttoptr i32 %v0_104c4 to i32*
  store i32 %v1_104c8, i32* %v2_104cc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_104d4

dec_label_pc_104d4:                               ; preds = %dec_label_pc_10478, %dec_label_pc_104c4
  %v1_104e0 = phi i32 [ %v0_104b4, %dec_label_pc_10478 ], [ -1, %dec_label_pc_104c4 ]
  ret i32 %v1_104e0

; uselistorder directives
  uselistorder i32 %v0_104b4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_104d4, { 1, 0 }
}

define i32 @function_104e4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_104e4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_10520 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10520, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10520, -4095
  br i1 %tmp, label %dec_label_pc_10540, label %dec_label_pc_10530

dec_label_pc_10530:                               ; preds = %dec_label_pc_104e4
  %v0_10530 = call i32 @function_10a6c()
  %v0_10534 = load i32, i32* %r7.global-to-local, align 4
  %v1_10534 = sub i32 0, %v0_10534
  %v2_10538 = inttoptr i32 %v0_10530 to i32*
  store i32 %v1_10534, i32* %v2_10538, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10540

dec_label_pc_10540:                               ; preds = %dec_label_pc_104e4, %dec_label_pc_10530
  %v1_1054c = phi i32 [ %v0_10520, %dec_label_pc_104e4 ], [ -1, %dec_label_pc_10530 ]
  ret i32 %v1_1054c

; uselistorder directives
  uselistorder i32 %v0_10520, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10540, { 1, 0 }
}

define i32 @function_10550(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10550:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10550 = load i32, i32* @r7, align 4
  store i32 %v3_10550, i32* %stack_var_-8, align 4
  %v0_1055c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1055c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1055c, -4095
  br i1 %tmp, label %dec_label_pc_1057c, label %dec_label_pc_1056c

dec_label_pc_1056c:                               ; preds = %dec_label_pc_10550
  %v0_1056c = call i32 @function_10a6c()
  %v0_10570 = load i32, i32* %r7.global-to-local, align 4
  %v1_10570 = sub i32 0, %v0_10570
  %v2_10574 = inttoptr i32 %v0_1056c to i32*
  store i32 %v1_10570, i32* %v2_10574, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1057c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1057c

dec_label_pc_1057c:                               ; preds = %dec_label_pc_10550, %dec_label_pc_1056c
  %v1_10580 = phi i32 [ %v0_1055c, %dec_label_pc_10550 ], [ -1, %dec_label_pc_1056c ]
  %v2_1057c = phi i32 [ %v3_10550, %dec_label_pc_10550 ], [ %v2_1057c.pre, %dec_label_pc_1056c ]
  store i32 %v2_1057c, i32* @r7, align 4
  ret i32 %v1_10580

; uselistorder directives
  uselistorder i32 %v0_1055c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1057c, { 1, 0 }
}

define i32 @function_10584(i32 %arg1) local_unnamed_addr {
dec_label_pc_10584:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10584 = load i32, i32* @r7, align 4
  store i32 %v3_10584, i32* %stack_var_-8, align 4
  %v0_10590 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10590, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10590, -4095
  br i1 %tmp, label %dec_label_pc_105b0, label %dec_label_pc_105a0

dec_label_pc_105a0:                               ; preds = %dec_label_pc_10584
  %v0_105a0 = call i32 @function_10a6c()
  %v0_105a4 = load i32, i32* %r7.global-to-local, align 4
  %v1_105a4 = sub i32 0, %v0_105a4
  %v2_105a8 = inttoptr i32 %v0_105a0 to i32*
  store i32 %v1_105a4, i32* %v2_105a8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_105b0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_105b0

dec_label_pc_105b0:                               ; preds = %dec_label_pc_10584, %dec_label_pc_105a0
  %v1_105b4 = phi i32 [ %v0_10590, %dec_label_pc_10584 ], [ -1, %dec_label_pc_105a0 ]
  %v2_105b0 = phi i32 [ %v3_10584, %dec_label_pc_10584 ], [ %v2_105b0.pre, %dec_label_pc_105a0 ]
  store i32 %v2_105b0, i32* @r7, align 4
  ret i32 %v1_105b4

; uselistorder directives
  uselistorder i32 %v0_10590, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_105b0, { 1, 0 }
}

define i32 @function_105b8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_105b8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_105b8 = load i32, i32* @r3, align 4
  store i32 %v9_105b8, i32* %stack_var_-4, align 4
  %v2_105c4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_105c4, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_105f8, label %dec_label_pc_105e8

dec_label_pc_105e8:                               ; preds = %dec_label_pc_105b8
  %v0_105e8 = call i32 @function_10a6c()
  %v0_105ec = load i32, i32* %r7.global-to-local, align 4
  %v1_105ec = sub i32 0, %v0_105ec
  store i32 %v1_105ec, i32* @r3, align 4
  %v2_105f0 = inttoptr i32 %v0_105e8 to i32*
  store i32 %v1_105ec, i32* %v2_105f0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_105f8

dec_label_pc_105f8:                               ; preds = %dec_label_pc_105b8, %dec_label_pc_105e8
  %v0_105f8 = phi i32 [ %arg1, %dec_label_pc_105b8 ], [ -1, %dec_label_pc_105e8 ]
  ret i32 %v0_105f8

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_105f8, { 1, 0 }
}

define i32 @function_1060c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1060c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1060c = load i32, i32* @r7, align 4
  store i32 %v3_1060c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10638, label %dec_label_pc_10628

dec_label_pc_10628:                               ; preds = %dec_label_pc_1060c
  %v0_10628 = call i32 @function_10a6c()
  %v0_1062c = load i32, i32* %r7.global-to-local, align 4
  %v1_1062c = sub i32 0, %v0_1062c
  %v2_10630 = inttoptr i32 %v0_10628 to i32*
  store i32 %v1_1062c, i32* %v2_10630, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_1063c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10638

dec_label_pc_10638:                               ; preds = %dec_label_pc_1060c, %dec_label_pc_10628
  %v2_1063c = phi i32 [ %v3_1060c, %dec_label_pc_1060c ], [ %v2_1063c.pre, %dec_label_pc_10628 ]
  %v0_10638 = phi i32 [ %arg1, %dec_label_pc_1060c ], [ -1, %dec_label_pc_10628 ]
  store i32 %v2_1063c, i32* @r7, align 4
  ret i32 %v0_10638

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10638, { 1, 0 }
}

define i32 @function_10644(i32 %arg1) local_unnamed_addr {
dec_label_pc_10644:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10644 = load i32, i32* @r7, align 4
  store i32 %v3_10644, i32* %stack_var_-8, align 4
  %v0_10650 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10650, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10650, -4095
  br i1 %tmp, label %dec_label_pc_10670, label %dec_label_pc_10660

dec_label_pc_10660:                               ; preds = %dec_label_pc_10644
  %v0_10660 = call i32 @function_10a6c()
  %v0_10664 = load i32, i32* %r7.global-to-local, align 4
  %v1_10664 = sub i32 0, %v0_10664
  store i32 %v1_10664, i32* @r3, align 4
  %v2_10668 = inttoptr i32 %v0_10660 to i32*
  store i32 %v1_10664, i32* %v2_10668, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10670.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10670

dec_label_pc_10670:                               ; preds = %dec_label_pc_10644, %dec_label_pc_10660
  %v1_10674 = phi i32 [ %v0_10650, %dec_label_pc_10644 ], [ -1, %dec_label_pc_10660 ]
  %v2_10670 = phi i32 [ %v3_10644, %dec_label_pc_10644 ], [ %v2_10670.pre, %dec_label_pc_10660 ]
  store i32 %v2_10670, i32* @r7, align 4
  ret i32 %v1_10674

; uselistorder directives
  uselistorder i32 %v0_10650, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10670, { 1, 0 }
}

define i32 @function_10678(i32* %arg1) local_unnamed_addr {
dec_label_pc_10678:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10678 = load i32, i32* @r4, align 4
  store i32 %v3_10678, i32* %stack_var_-24, align 4
  %v9_10678 = load i32, i32* @r6, align 4
  %v12_10678 = load i32, i32* @r7, align 4
  %v15_10678 = load i32, i32* @r8, align 4
  %v18_10678 = load i32, i32* @lr, align 4
  %v2_1067c = load i32, i32* %arg1, align 4
  store i32 %v2_1067c, i32* %r4.global-to-local, align 4
  %v3_10684 = icmp eq i32 %v2_1067c, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 122896, i32* @r6, align 4
  br i1 %v3_10684, label %dec_label_pc_10698, label %dec_label_pc_106ac

dec_label_pc_10698:                               ; preds = %dec_label_pc_10678
  %v0_10698 = call i32 @function_10a6c()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_106a0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_106a0, i32* %r2.global-to-local, align 4
  %v2_106a4 = inttoptr i32 %v0_10698 to i32*
  store i32 9, i32* %v2_106a4, align 4
  %v0_1074c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1074c

dec_label_pc_106ac:                               ; preds = %dec_label_pc_10678
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_106b0 = add i32 %tmp, 24
  store i32 %v1_106b0, i32* %r4.global-to-local, align 4
  store i32 %v1_106b0, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_106c4 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_106c4)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_106dc = load i32, i32* @r6, align 4
  %v2_106dc = add i32 %v0_106dc, 16
  %v3_106dc = inttoptr i32 %v2_106dc to i32*
  %v4_106dc = load i32, i32* %v3_106dc, align 4
  call void @__pseudo_branch(i32 %v4_106dc)
  %v0_106e8 = load i32, i32* @r7, align 4
  %v1_106e8 = inttoptr i32 %v0_106e8 to i32*
  %v2_106e8 = load i32, i32* %v1_106e8, align 4
  store i32 %v2_106e8, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_106f8 = load i32, i32* @r8, align 4
  store i32 %v0_106f8, i32* %v1_106e8, align 4
  %v0_106fc = load i32, i32* @r6, align 4
  %v1_106fc = load i32, i32* %r3.global-to-local, align 4
  %v2_106fc = add i32 %v1_106fc, %v0_106fc
  %v3_106fc = inttoptr i32 %v2_106fc to i32*
  %v4_106fc = load i32, i32* %v3_106fc, align 4
  store i32 %v4_106fc, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_10708.382 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_106fc)
  %v0_10708 = load i32, i32* @r7, align 4
  %v1_10708 = add i32 %v0_10708, 12
  %v2_10708 = inttoptr i32 %v1_10708 to i32*
  %v3_10708 = load i32, i32* %v2_10708, align 4
  store i32 %v3_10708, i32* @r0, align 4
  %v0_1070c = call i32 @function_120e4()
  %v0_10710 = load i32, i32* @r7, align 4
  store i32 %v0_10710, i32* @r0, align 4
  %v0_10714 = call i32 @function_120e4()
  %v0_1071c = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_1071c, -4095
  br i1 %tmp11, label %dec_label_pc_10748, label %dec_label_pc_10738

dec_label_pc_10738:                               ; preds = %dec_label_pc_106ac
  %v0_10738 = call i32 @function_10a6c()
  %v0_1073c = load i32, i32* @r4, align 4
  %v1_1073c = sub i32 0, %v0_1073c
  store i32 %v1_1073c, i32* %r3.global-to-local, align 4
  %v2_10740 = inttoptr i32 %v0_10738 to i32*
  store i32 %v1_1073c, i32* %v2_10740, align 4
  %v0_10744 = load i32, i32* @r8, align 4
  br label %dec_label_pc_10748

dec_label_pc_10748:                               ; preds = %dec_label_pc_106ac, %dec_label_pc_10738
  %v0_10748 = phi i32 [ %v0_1071c, %dec_label_pc_106ac ], [ %v0_10744, %dec_label_pc_10738 ]
  store i32 %v0_10748, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1074c

dec_label_pc_1074c:                               ; preds = %dec_label_pc_10698, %dec_label_pc_10748
  %v0_1074c = phi i32 [ %v0_1074c.pre, %dec_label_pc_10698 ], [ %v0_10748, %dec_label_pc_10748 ]
  %v2_10754 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10754, i32* @r4, align 4
  store i32 %v9_10678, i32* @r6, align 4
  store i32 %v12_10678, i32* @r7, align 4
  store i32 %v15_10678, i32* @r8, align 4
  store i32 %v18_10678, i32* @lr, align 4
  ret i32 %v0_1074c

; uselistorder directives
  uselistorder i32 %v0_1071c, { 1, 0 }
  uselistorder label %dec_label_pc_1074c, { 1, 0 }
  uselistorder label %dec_label_pc_10748, { 1, 0 }
}

define i32 @function_10760(i32 %arg1) local_unnamed_addr {
dec_label_pc_10760:
  %v0_10760 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10760, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10760
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10760, %bb
  %v10_1076c = phi i32 [ %arg1, %dec_label_pc_10760 ], [ 0, %bb ]
  ret i32 %v10_1076c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10770(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10770:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10770 = load i32, i32* @r5, align 4
  %v9_10770 = load i32, i32* @r6, align 4
  %v12_10770 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_10784 = call i32 @function_11078()
  %v2_1078c = icmp eq i32 %v0_10784, 0
  store i32 122896, i32* @r6, align 4
  br i1 %v2_1078c, label %bb, label %dec_label_pc_1079c

bb:                                               ; preds = %dec_label_pc_10770
  br label %dec_label_pc_10828

dec_label_pc_1079c:                               ; preds = %dec_label_pc_10770
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_107a0 = load i32, i32* @r4, align 4
  %v2_107a0 = icmp ugt i32 %v0_107a0, 511
  %v2_107a4 = add i32 %v0_10784, 4
  %v3_107a4 = inttoptr i32 %v2_107a4 to i32*
  store i32 0, i32* %v3_107a4, align 4
  %v0_107a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_107a8 = add i32 %v0_10784, 16
  %v3_107a8 = inttoptr i32 %v2_107a8 to i32*
  store i32 %v0_107a8, i32* %v3_107a8, align 4
  %v0_107ac = load i32, i32* %r3.global-to-local, align 4
  %v2_107ac = add i32 %v0_10784, 8
  %v3_107ac = inttoptr i32 %v2_107ac to i32*
  store i32 %v0_107ac, i32* %v3_107ac, align 4
  br i1 %v2_107a0, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_1079c
  %v0_107b42 = load i32, i32* @r4, align 4
  %v2_107b43 = add i32 %v0_10784, 20
  %v3_107b44 = inttoptr i32 %v2_107b43 to i32*
  store i32 %v0_107b42, i32* %v3_107b44, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_1079c
  %v1_107b0 = load i32, i32* %r3.global-to-local, align 4
  %v2_107b0 = add i32 %v1_107b0, 512
  store i32 %v2_107b0, i32* %r3.global-to-local, align 4
  %v0_107b4 = load i32, i32* @r4, align 4
  %v2_107b4 = add i32 %v0_10784, 20
  %v3_107b4 = inttoptr i32 %v2_107b4 to i32*
  store i32 %v0_107b4, i32* %v3_107b4, align 4
  %v1_107b8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_107b8, i32* %v3_107b4, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_10784, i32* @r5, align 4
  %v0_107c0 = load i32, i32* @r7, align 4
  %v2_107c0 = inttoptr i32 %v0_10784 to i32*
  store i32 %v0_107c0, i32* %v2_107c0, align 4
  %v0_107c4 = load i32, i32* @r5, align 4
  %v1_107c4 = add i32 %v0_107c4, 20
  %v2_107c4 = inttoptr i32 %v1_107c4 to i32*
  %v3_107c4 = load i32, i32* %v2_107c4, align 4
  store i32 %v3_107c4, i32* %r1.global-to-local, align 4
  %v2_107cc = call i32 @function_11998(i32 1, i32 %v3_107c4)
  %v2_107d0 = icmp eq i32 %v2_107cc, 0
  store i32 %v2_107cc, i32* @r4, align 4
  %v1_107d8 = load i32, i32* @r5, align 4
  %v2_107d8 = add i32 %v1_107d8, 12
  %v3_107d8 = inttoptr i32 %v2_107d8 to i32*
  store i32 %v2_107cc, i32* %v3_107d8, align 4
  br i1 %v2_107d0, label %dec_label_pc_107e0, label %dec_label_pc_107f0

dec_label_pc_107e0:                               ; preds = %bb17
  %v0_107e0 = load i32, i32* @r5, align 4
  store i32 %v0_107e0, i32* @r0, align 4
  %v0_107e4 = call i32 @function_120e4()
  %v0_107e8 = load i32, i32* @r4, align 4
  br label %dec_label_pc_10828

dec_label_pc_107f0:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_10818 = load i32, i32* @r5, align 4
  %v1_10818 = add i32 %v0_10818, 24
  %v1_1081c = inttoptr i32 %v1_10818 to i32*
  store i32 0, i32* %v1_1081c, align 4
  %v3_1081c = add i32 %v0_10818, 28
  %v4_1081c = inttoptr i32 %v3_1081c to i32*
  %v5_1081c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1081c, i32* %v4_1081c, align 4
  %v6_1081c = add i32 %v0_10818, 32
  %v7_1081c = inttoptr i32 %v6_1081c to i32*
  %v8_1081c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_1081c, i32* %v7_1081c, align 4
  %v9_1081c = add i32 %v0_10818, 36
  %v10_1081c = inttoptr i32 %v9_1081c to i32*
  %v11_1081c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_1081c, i32* %v10_1081c, align 4
  %v12_1081c = add i32 %v0_10818, 40
  store i32 %v12_1081c, i32* @ip, align 4
  %v2_10820 = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_10824 = inttoptr i32 %v12_1081c to i32*
  store i32 %v2_10820, i32* %v1_10824, align 4
  %v3_10824 = add i32 %v0_10818, 44
  %v4_10824 = inttoptr i32 %v3_10824 to i32*
  %v5_10824 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10824, i32* %v4_10824, align 4
  %v0_10828.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10828

dec_label_pc_10828:                               ; preds = %bb, %dec_label_pc_107e0, %dec_label_pc_107f0
  %v0_10828 = phi i32 [ 0, %bb ], [ %v0_107e8, %dec_label_pc_107e0 ], [ %v0_10828.pre, %dec_label_pc_107f0 ]
  store i32 %v6_10770, i32* @r5, align 4
  store i32 %v9_10770, i32* @r6, align 4
  store i32 %v12_10770, i32* @r7, align 4
  ret i32 %v0_10828

; uselistorder directives
  uselistorder i32 %v2_107cc, { 1, 0, 2 }
  uselistorder i32 %v0_10784, { 2, 1, 5, 0, 6, 4, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 9, 8, 0, 4, 1, 5, 10, 6, 11, 7, 12, 2, 13, 3, 14 }
  uselistorder label %dec_label_pc_10828, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_10840(i32 %arg1) local_unnamed_addr {
dec_label_pc_10840:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_10840 = load i32, i32* @r7, align 4
  %v2_10848 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_10870, label %dec_label_pc_10860

dec_label_pc_10860:                               ; preds = %dec_label_pc_10840
  %v0_10860 = call i32 @function_10a6c()
  %v0_10864 = load i32, i32* @r7, align 4
  %v1_10864 = sub i32 0, %v0_10864
  %v2_10868 = inttoptr i32 %v0_10860 to i32*
  store i32 %v1_10864, i32* %v2_10868, align 4
  br label %dec_label_pc_10894

dec_label_pc_10870:                               ; preds = %dec_label_pc_10840
  %v1_10870 = icmp slt i32 %arg1, 0
  br i1 %v1_10870, label %dec_label_pc_10894, label %dec_label_pc_10878

dec_label_pc_10878:                               ; preds = %dec_label_pc_10870
  store i32 %v2_10848, i32* @r1, align 4
  %v0_1087c = call i32 @function_13398()
  %v1_10880 = icmp slt i32 %v0_1087c, 0
  br i1 %v1_10880, label %dec_label_pc_10888, label %dec_label_pc_1089c

dec_label_pc_10888:                               ; preds = %dec_label_pc_10878
  br label %dec_label_pc_10894

dec_label_pc_10894:                               ; preds = %dec_label_pc_10888, %dec_label_pc_10870, %dec_label_pc_10860
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_108d8

dec_label_pc_1089c:                               ; preds = %dec_label_pc_10878
  %v0_108a4 = load i32, i32* @r7, align 4
  %v3_108a8 = call i32 @function_104e4(i32 %v0_108a4, i32 2, i32 1)
  %v0_108ac = load i32, i32* @r7, align 4
  %v2_108b4 = call i32 @function_10770(i32 %v0_108ac, i32 %tmp)
  store i32 %v2_108b4, i32* %r4.global-to-local, align 4
  %v2_108b8 = icmp eq i32 %v2_108b4, 0
  br i1 %v2_108b8, label %dec_label_pc_108c0, label %dec_label_pc_108d8

dec_label_pc_108c0:                               ; preds = %dec_label_pc_1089c
  %v0_108cc = call i32 @function_10a6c()
  %v2_108d4 = inttoptr i32 %v0_108cc to i32*
  store i32 12, i32* %v2_108d4, align 4
  %v0_108d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_108d8

dec_label_pc_108d8:                               ; preds = %dec_label_pc_1089c, %dec_label_pc_10894, %dec_label_pc_108c0
  %v0_108d8 = phi i32 [ %v2_108b4, %dec_label_pc_1089c ], [ 0, %dec_label_pc_10894 ], [ %v0_108d8.pre, %dec_label_pc_108c0 ]
  store i32 %v6_10840, i32* @r7, align 4
  ret i32 %v0_108d8

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_108d8, { 2, 0, 1 }
}

define i32 @function_108e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_108e8:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_108e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_108e8, label %bb, label %dec_label_pc_108e8._crit_edge

dec_label_pc_108e8._crit_edge:                    ; preds = %dec_label_pc_108e8
  br label %bb11

bb:                                               ; preds = %dec_label_pc_108e8
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_108e8._crit_edge, %bb
  %v2_108f0 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_108f0, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_108fc = call i32 @function_13398()
  store i32 %v0_108fc, i32* @r5, align 4
  %v2_10900 = icmp eq i32 %v0_108fc, 0
  br i1 %v2_10900, label %dec_label_pc_10908, label %dec_label_pc_10970

dec_label_pc_10908:                               ; preds = %bb11
  %v1_1090c = and i32 %tmp5, ptrtoint (i32* @global_var_f000.392 to i32)
  store i32 %v1_1090c, i32* @r3, align 4
  %v7_10910 = icmp eq i32 %v1_1090c, 16384
  br i1 %v7_10910, label %dec_label_pc_10928, label %dec_label_pc_10918

dec_label_pc_10918:                               ; preds = %dec_label_pc_10908
  %v0_10918 = call i32 @function_10a6c()
  br label %dec_label_pc_10954

dec_label_pc_10928:                               ; preds = %dec_label_pc_10908
  %v0_10928 = load i32, i32* @r4, align 4
  %v2_10930 = call i32 @function_10478(i32 %v0_10928, i32 3)
  %v7_10934 = icmp eq i32 %v2_10930, -1
  br i1 %v7_10934, label %dec_label_pc_10970, label %dec_label_pc_1093c

dec_label_pc_1093c:                               ; preds = %dec_label_pc_10928
  %v1_1093c = urem i32 %v2_10930, 4
  %v7_10940 = icmp eq i32 %v1_1093c, 1
  br i1 %v7_10940, label %dec_label_pc_10948, label %dec_label_pc_1095c

dec_label_pc_10948:                               ; preds = %dec_label_pc_1093c
  %v0_10948 = call i32 @function_10a6c()
  br label %dec_label_pc_10954

dec_label_pc_10954:                               ; preds = %dec_label_pc_10918, %dec_label_pc_10948
  %storemerge2 = phi i32 [ %v0_10918, %dec_label_pc_10918 ], [ %v0_10948, %dec_label_pc_10948 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_10918 ], [ 22, %dec_label_pc_10948 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_10954 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_10954, align 4
  %v0_10974.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10974

dec_label_pc_1095c:                               ; preds = %dec_label_pc_1093c
  %v0_1095c = load i32, i32* @r4, align 4
  %v2_10964 = call i32 @function_10770(i32 %v0_1095c, i32 %tmp)
  store i32 %v2_10964, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10974

dec_label_pc_10970:                               ; preds = %bb11, %dec_label_pc_10928
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10974

dec_label_pc_10974:                               ; preds = %dec_label_pc_1095c, %dec_label_pc_10954, %dec_label_pc_10970
  %v0_10974 = phi i32 [ %v2_10964, %dec_label_pc_1095c ], [ %v0_10974.pre, %dec_label_pc_10954 ], [ 0, %dec_label_pc_10970 ]
  ret i32 %v0_10974

; uselistorder directives
  uselistorder i32 %v2_10930, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10770, { 1, 0 }
  uselistorder i32 ()* @function_13398, { 1, 0 }
  uselistorder label %dec_label_pc_10974, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10970, { 1, 0 }
  uselistorder label %dec_label_pc_10954, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_10984(i32* %arg1) local_unnamed_addr {
dec_label_pc_10984:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_10984 = load i32, i32* @r4, align 4
  %v6_10984 = load i32, i32* @r5, align 4
  %v9_10984 = load i32, i32* @r6, align 4
  %v12_10984 = load i32, i32* @r7, align 4
  %v15_10984 = load i32, i32* @lr, align 4
  store i32 122896, i32* @r6, align 4
  %v1_10998 = add i32 %tmp, 24
  store i32 %v1_10998, i32* @r4, align 4
  %v4_1099c = load i32, i32* inttoptr (i32 122932 to i32*), align 4
  store i32 %v4_1099c, i32* %r1.global-to-local, align 4
  store i32 %v1_10998, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_109b0 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_109b0)
  %v0_109c4 = load i32, i32* @r6, align 4
  %v2_109c4 = add i32 %v0_109c4, 16
  %v3_109c4 = inttoptr i32 %v2_109c4 to i32*
  %v4_109c4 = load i32, i32* %v3_109c4, align 4
  store i32 %v4_109c4, i32* @ip, align 4
  store i32 68048, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_109c4)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_109d4

dec_label_pc_109d4:                               ; preds = %dec_label_pc_10a04, %dec_label_pc_10984
  %v0_109d4 = load i32, i32* @r5, align 4
  %v1_109d4 = add i32 %v0_109d4, 4
  %v2_109d4 = inttoptr i32 %v1_109d4 to i32*
  %v3_109d4 = load i32, i32* %v2_109d4, align 4
  store i32 %v3_109d4, i32* %r2.global-to-local, align 4
  %v4_109d4 = add i32 %v0_109d4, 8
  %v5_109d4 = inttoptr i32 %v4_109d4 to i32*
  %v6_109d4 = load i32, i32* %v5_109d4, align 4
  %tmp10 = icmp ugt i32 %v6_109d4, %v3_109d4
  br i1 %tmp10, label %dec_label_pc_10a04, label %dec_label_pc_109e0

dec_label_pc_109e0:                               ; preds = %dec_label_pc_109d4
  %v1_109e0 = inttoptr i32 %v0_109d4 to i32*
  %v2_109e0 = load i32, i32* %v1_109e0, align 4
  %v1_109e4 = add i32 %v0_109d4, 12
  %v2_109e4 = inttoptr i32 %v1_109e4 to i32*
  %v3_109e4 = load i32, i32* %v2_109e4, align 4
  store i32 %v3_109e4, i32* %r1.global-to-local, align 4
  %v1_109e8 = add i32 %v0_109d4, 20
  %v2_109e8 = inttoptr i32 %v1_109e8 to i32*
  %v3_109e8 = load i32, i32* %v2_109e8, align 4
  store i32 %v3_109e8, i32* %r2.global-to-local, align 4
  %v4_109ec = call i32 @function_13304(i32 %v2_109e0, i32 %v3_109e4, i32 %v3_109e8, i32 %v6_109d4)
  %tmp9 = icmp slt i32 %v4_109ec, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_109fc

.thread:                                          ; preds = %dec_label_pc_109e0
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_10a30

dec_label_pc_109fc:                               ; preds = %dec_label_pc_109e0
  %v1_109fc = load i32, i32* @r5, align 4
  %v2_109fc = add i32 %v1_109fc, 8
  %v3_109fc = inttoptr i32 %v2_109fc to i32*
  store i32 %v4_109ec, i32* %v3_109fc, align 4
  %v0_10a00 = load i32, i32* @r7, align 4
  %v1_10a00 = load i32, i32* @r5, align 4
  %v2_10a00 = add i32 %v1_10a00, 4
  %v3_10a00 = inttoptr i32 %v2_10a00 to i32*
  store i32 %v0_10a00, i32* %v3_10a00, align 4
  %v0_10a04.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10a04

dec_label_pc_10a04:                               ; preds = %dec_label_pc_109d4, %dec_label_pc_109fc
  %v1_10a14 = phi i32 [ %v0_109d4, %dec_label_pc_109d4 ], [ %v0_10a04.pre, %dec_label_pc_109fc ]
  %v1_10a04 = add i32 %v1_10a14, 4
  %v2_10a04 = inttoptr i32 %v1_10a04 to i32*
  %v3_10a04 = load i32, i32* %v2_10a04, align 4
  store i32 %v3_10a04, i32* %r2.global-to-local, align 4
  %v1_10a08 = add i32 %v1_10a14, 12
  %v2_10a08 = inttoptr i32 %v1_10a08 to i32*
  %v3_10a08 = load i32, i32* %v2_10a08, align 4
  store i32 %v3_10a08, i32* %r1.global-to-local, align 4
  %v2_10a0c = add i32 %v3_10a08, %v3_10a04
  store i32 %v2_10a0c, i32* @r4, align 4
  %v1_10a10 = add i32 %v2_10a0c, 4
  %v2_10a10 = inttoptr i32 %v1_10a10 to i32*
  %v3_10a10 = load i32, i32* %v2_10a10, align 4
  %v2_10a14 = add i32 %v1_10a14, 16
  %v3_10a14 = inttoptr i32 %v2_10a14 to i32*
  store i32 %v3_10a10, i32* %v3_10a14, align 4
  %v0_10a18 = load i32, i32* @r4, align 4
  %v1_10a18 = add i32 %v0_10a18, 8
  %v2_10a18 = inttoptr i32 %v1_10a18 to i16*
  %v3_10a18 = load i16, i16* %v2_10a18, align 2
  %v4_10a18 = zext i16 %v3_10a18 to i32
  %v0_10a1c = load i32, i32* %r2.global-to-local, align 4
  %v1_10a1c = load i32, i32* %r1.global-to-local, align 4
  %v2_10a1c = add i32 %v1_10a1c, %v0_10a1c
  %v3_10a1c = inttoptr i32 %v2_10a1c to i32*
  %v4_10a1c = load i32, i32* %v3_10a1c, align 4
  store i32 %v4_10a1c, i32* %r1.global-to-local, align 4
  %v2_10a20 = add i32 %v0_10a1c, %v4_10a18
  %v2_10a24 = icmp eq i32 %v4_10a1c, 0
  %v1_10a28 = load i32, i32* @r5, align 4
  %v2_10a28 = add i32 %v1_10a28, 4
  %v3_10a28 = inttoptr i32 %v2_10a28 to i32*
  store i32 %v2_10a20, i32* %v3_10a28, align 4
  br i1 %v2_10a24, label %dec_label_pc_109d4, label %dec_label_pc_10a30

dec_label_pc_10a30:                               ; preds = %dec_label_pc_10a04, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_10a3c = load i32, i32* @r6, align 4
  %v2_10a3c = add i32 %v0_10a3c, 24
  %v3_10a3c = inttoptr i32 %v2_10a3c to i32*
  %v4_10a3c = load i32, i32* %v3_10a3c, align 4
  store i32 %v4_10a3c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_10a3c)
  %v0_10a48 = load i32, i32* @r4, align 4
  store i32 %v3_10984, i32* @r4, align 4
  store i32 %v6_10984, i32* @r5, align 4
  store i32 %v9_10984, i32* @r6, align 4
  store i32 %v12_10984, i32* @r7, align 4
  store i32 %v15_10984, i32* @lr, align 4
  ret i32 %v0_10a48

; uselistorder directives
  uselistorder i32 %v1_10a14, { 0, 2, 1 }
  uselistorder i32 %v6_109d4, { 1, 0 }
  uselistorder i32 %v0_109d4, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_10a04, { 1, 0 }
}

define i32 @function_10a5c(i32 %arg1) local_unnamed_addr {
dec_label_pc_10a5c:
  %v0_10a5c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10a5c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10a5c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10a5c, %bb
  %v10_10a68 = phi i32 [ %arg1, %dec_label_pc_10a5c ], [ 0, %bb ]
  ret i32 %v10_10a68

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10a6c() local_unnamed_addr {
dec_label_pc_10a6c:
  store i32 add (i32 ptrtoint (i32* @global_var_d594.399 to i32), i32 68220), i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1e2c8.401 to i32)
}

define i32 @function_10a88(i32 %arg1) local_unnamed_addr {
dec_label_pc_10a88:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_10a8c = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10a8c, i32* @r0, align 4
  %v1_10a94 = call i32 @function_13774(i32 %v2_10a8c)
  %v2_10a98 = load i32, i32* %stack_var_-24, align 4
  %v2_10a9c = add i32 %v2_10a98, %tmp
  %v2_10aa4 = mul i32 %v2_10a9c, 10000
  %v1_10aa8 = and i32 %v2_10aa4, 2147483632
  ret i32 %v1_10aa8

; uselistorder directives
  uselistorder i32 %v2_10a8c, { 1, 0 }
}

define i32 @function_10ab8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ab8:
  %v0_10ab8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10ab8, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10ab8
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10ab8, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10ac0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ac0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_10ac4 = load i32, i32* @r2, align 4
  %v8_10ac4 = icmp eq i32 %v0_10ac4, 8
  store i1 %v8_10ac4, i1* %cpsr_z.global-to-local, align 1
  %v5_10ac8 = icmp slt i32 %v0_10ac4, 8
  br i1 %v5_10ac8, label %dec_label_pc_10b28, label %dec_label_pc_10acc

dec_label_pc_10acc:                               ; preds = %dec_label_pc_10ac0
  %v4_10acc = mul i32 %arg2, 256
  %v5_10acc = or i32 %v4_10acc, %arg2
  %v4_10ad0 = mul i32 %v5_10acc, 65536
  %v5_10ad0 = or i32 %v4_10ad0, %v5_10acc
  store i32 %v5_10ad0, i32* %r1.global-to-local, align 4
  %v1_10ad457 = urem i32 %tmp, 4
  %v2_10ad458 = icmp eq i32 %v1_10ad457, 0
  store i1 %v2_10ad458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_10ad458, label %dec_label_pc_10ae4, label %bb

bb:                                               ; preds = %dec_label_pc_10acc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_10acc ]
  %v3_10ad859 = phi i32 [ %v6_10ad8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_10acc ]
  %v4_10ad8 = inttoptr i32 %v3_10ad859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_10ad8, align 1
  %v5_10ad8 = load i32, i32* @r3, align 4
  %v6_10ad8 = add i32 %v5_10ad8, 1
  store i32 %v6_10ad8, i32* @r3, align 4
  %v0_10adc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10ae8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_10adc.pr, label %dec_label_pc_10ae4, label %.thread

.thread:                                          ; preds = %bb
  %v2_10adc = add i32 %v0_10ae8.pr.pre, -1
  store i32 %v2_10adc, i32* @r2, align 4
  %v1_10ad4 = urem i32 %v6_10ad8, 4
  %v2_10ad4 = icmp eq i32 %v1_10ad4, 0
  store i1 %v2_10ad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ad4, label %dec_label_pc_10ae4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_10ad8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_10ad8.pre to i8
  br label %bb

dec_label_pc_10ae4:                               ; preds = %.thread, %bb, %dec_label_pc_10acc
  %v0_10af028 = phi i32 [ %tmp, %dec_label_pc_10acc ], [ %v6_10ad8, %bb ], [ %v6_10ad8, %.thread ]
  %v0_10ae8.pr = phi i32 [ %v0_10ac4, %dec_label_pc_10acc ], [ %v0_10ae8.pr.pre, %bb ], [ %v2_10adc, %.thread ]
  %v0_10ae4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_10ae4, i32* @ip, align 4
  %v8_10ae810 = icmp eq i32 %v0_10ae8.pr, 8
  store i1 %v8_10ae810, i1* %cpsr_z.global-to-local, align 1
  %v5_10aec11 = icmp slt i32 %v0_10ae8.pr, 8
  br i1 %v5_10aec11, label %dec_label_pc_10b28, label %dec_label_pc_10af0.preheader

dec_label_pc_10af0.preheader:                     ; preds = %dec_label_pc_10ae4
  %v1_10af046 = inttoptr i32 %v0_10af028 to i32*
  store i32 %v0_10ae4, i32* %v1_10af046, align 4
  %v3_10af047 = add i32 %v0_10af028, 4
  %v4_10af048 = inttoptr i32 %v3_10af047 to i32*
  %v5_10af049 = load i32, i32* @ip, align 4
  store i32 %v5_10af049, i32* %v4_10af048, align 4
  %v6_10af050 = add i32 %v0_10af028, 8
  store i32 %v6_10af050, i32* @r3, align 4
  %v0_10af451 = load i32, i32* @r2, align 4
  %v1_10af452 = add i32 %v0_10af451, -8
  store i32 %v1_10af452, i32* %r2.global-to-local, align 4
  %v5_10afc53 = icmp slt i32 %v1_10af452, 8
  br i1 %v5_10afc53, label %dec_label_pc_10af0.dec_label_pc_10b28.loopexit_crit_edge, label %dec_label_pc_10b00

dec_label_pc_10b00:                               ; preds = %dec_label_pc_10af0.preheader, %dec_label_pc_10ae8.dec_label_pc_10af0_crit_edge
  %v6_10af055 = phi i32 [ %v6_10af0, %dec_label_pc_10ae8.dec_label_pc_10af0_crit_edge ], [ %v6_10af050, %dec_label_pc_10af0.preheader ]
  %v0_10af054 = phi i32 [ %v12_10b1c, %dec_label_pc_10ae8.dec_label_pc_10af0_crit_edge ], [ %v0_10af028, %dec_label_pc_10af0.preheader ]
  %v1_10b00 = inttoptr i32 %v6_10af055 to i32*
  %v2_10b00 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_10b00, i32* %v1_10b00, align 4
  %v3_10b00 = add i32 %v0_10af054, 12
  %v4_10b00 = inttoptr i32 %v3_10b00 to i32*
  %v5_10b00 = load i32, i32* @ip, align 4
  store i32 %v5_10b00, i32* %v4_10b00, align 4
  %v6_10b00 = add i32 %v0_10af054, 16
  store i32 %v6_10b00, i32* @r3, align 4
  %v0_10b04 = load i32, i32* %r2.global-to-local, align 4
  %v1_10b04 = add i32 %v0_10b04, -8
  store i32 %v1_10b04, i32* %r2.global-to-local, align 4
  %v5_10b0c = icmp slt i32 %v1_10b04, 8
  br i1 %v5_10b0c, label %dec_label_pc_10b00.dec_label_pc_10b28.loopexit_crit_edge, label %dec_label_pc_10b10

dec_label_pc_10b10:                               ; preds = %dec_label_pc_10b00
  %v1_10b10 = inttoptr i32 %v6_10b00 to i32*
  %v2_10b10 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_10b10, i32* %v1_10b10, align 4
  %v3_10b10 = add i32 %v0_10af054, 20
  %v4_10b10 = inttoptr i32 %v3_10b10 to i32*
  %v5_10b10 = load i32, i32* @ip, align 4
  store i32 %v5_10b10, i32* %v4_10b10, align 4
  %v6_10b10 = add i32 %v0_10af054, 24
  store i32 %v6_10b10, i32* @r3, align 4
  %v0_10b14 = load i32, i32* %r2.global-to-local, align 4
  %v1_10b14 = add i32 %v0_10b14, -8
  store i32 %v1_10b14, i32* %r2.global-to-local, align 4
  %v5_10b1c = icmp slt i32 %v1_10b14, 8
  br i1 %v5_10b1c, label %dec_label_pc_10b10.dec_label_pc_10b28.loopexit_crit_edge, label %dec_label_pc_10ae8

dec_label_pc_10ae8:                               ; preds = %dec_label_pc_10b10
  %v7_10b1c = inttoptr i32 %v6_10b10 to i32*
  %v8_10b1c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_10b1c, i32* %v7_10b1c, align 4
  %v9_10b1c = add i32 %v0_10af054, 28
  %v10_10b1c = inttoptr i32 %v9_10b1c to i32*
  %v11_10b1c = load i32, i32* @ip, align 4
  store i32 %v11_10b1c, i32* %v10_10b1c, align 4
  %v12_10b1c = add i32 %v0_10af054, 32
  store i32 %v12_10b1c, i32* @r3, align 4
  %v6_10b20 = load i32, i32* %r2.global-to-local, align 4
  %v7_10b20 = add i32 %v6_10b20, -8
  store i32 %v7_10b20, i32* %r2.global-to-local, align 4
  %v5_10aec = icmp slt i32 %v7_10b20, 8
  br i1 %v5_10aec, label %dec_label_pc_10ae8.dec_label_pc_10b28.loopexit_crit_edge, label %dec_label_pc_10ae8.dec_label_pc_10af0_crit_edge

dec_label_pc_10ae8.dec_label_pc_10af0_crit_edge:  ; preds = %dec_label_pc_10ae8
  %v2_10af0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_10af0 = inttoptr i32 %v12_10b1c to i32*
  store i32 %v2_10af0.pre, i32* %v1_10af0, align 4
  %v3_10af0 = add i32 %v0_10af054, 36
  %v4_10af0 = inttoptr i32 %v3_10af0 to i32*
  %v5_10af0 = load i32, i32* @ip, align 4
  store i32 %v5_10af0, i32* %v4_10af0, align 4
  %v6_10af0 = add i32 %v0_10af054, 40
  store i32 %v6_10af0, i32* @r3, align 4
  %v0_10af4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10af4 = add i32 %v0_10af4, -8
  store i32 %v1_10af4, i32* %r2.global-to-local, align 4
  %v5_10afc = icmp slt i32 %v1_10af4, 8
  br i1 %v5_10afc, label %dec_label_pc_10af0.dec_label_pc_10b28.loopexit_crit_edge, label %dec_label_pc_10b00

dec_label_pc_10ae8.dec_label_pc_10b28.loopexit_crit_edge: ; preds = %dec_label_pc_10ae8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10b28

dec_label_pc_10af0.dec_label_pc_10b28.loopexit_crit_edge: ; preds = %dec_label_pc_10ae8.dec_label_pc_10af0_crit_edge, %dec_label_pc_10af0.preheader
  %v1_10af4.lcssa = phi i32 [ %v1_10af452, %dec_label_pc_10af0.preheader ], [ %v1_10af4, %dec_label_pc_10ae8.dec_label_pc_10af0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10b28

dec_label_pc_10b00.dec_label_pc_10b28.loopexit_crit_edge: ; preds = %dec_label_pc_10b00
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10b28

dec_label_pc_10b10.dec_label_pc_10b28.loopexit_crit_edge: ; preds = %dec_label_pc_10b10
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10b28

dec_label_pc_10b28:                               ; preds = %dec_label_pc_10ae4, %dec_label_pc_10ae8.dec_label_pc_10b28.loopexit_crit_edge, %dec_label_pc_10af0.dec_label_pc_10b28.loopexit_crit_edge, %dec_label_pc_10b00.dec_label_pc_10b28.loopexit_crit_edge, %dec_label_pc_10b10.dec_label_pc_10b28.loopexit_crit_edge, %dec_label_pc_10ac0
  %v0_10b30 = phi i32 [ %v0_10ac4, %dec_label_pc_10ac0 ], [ %v1_10b14, %dec_label_pc_10b10.dec_label_pc_10b28.loopexit_crit_edge ], [ %v1_10b04, %dec_label_pc_10b00.dec_label_pc_10b28.loopexit_crit_edge ], [ %v1_10af4.lcssa, %dec_label_pc_10af0.dec_label_pc_10b28.loopexit_crit_edge ], [ %v7_10b20, %dec_label_pc_10ae8.dec_label_pc_10b28.loopexit_crit_edge ], [ %v0_10ae8.pr, %dec_label_pc_10ae4 ]
  %v2_10b28 = icmp eq i32 %v0_10b30, 0
  store i1 %v2_10b28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10b28, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_10b28
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_10b28
  %v1_10b30 = sub i32 7, %v0_10b30
  store i32 %v1_10b30, i32* %r2.global-to-local, align 4
  %v3_10b34 = mul i32 %v1_10b30, 4
  %v4_10b34 = add i32 %v3_10b34, ptrtoint (i32* @global_var_10b3c.403 to i32)
  call void @__pseudo_branch(i32 %v4_10b34)
  %v0_10b3c = load i32, i32* %r1.global-to-local, align 4
  %v1_10b3c = trunc i32 %v0_10b3c to i8
  %v2_10b3c = load i32, i32* @r3, align 4
  %v3_10b3c = inttoptr i32 %v2_10b3c to i8*
  store i8 %v1_10b3c, i8* %v3_10b3c, align 1
  %v4_10b3c = load i32, i32* @r3, align 4
  %v5_10b3c = add i32 %v4_10b3c, 1
  store i32 %v5_10b3c, i32* %r3.global-to-local, align 4
  %v0_10b40 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b40 = trunc i32 %v0_10b40 to i8
  %v3_10b40 = inttoptr i32 %v5_10b3c to i8*
  store i8 %v1_10b40, i8* %v3_10b40, align 1
  %v4_10b40 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b40 = add i32 %v4_10b40, 1
  store i32 %v5_10b40, i32* %r3.global-to-local, align 4
  %v0_10b44 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b44 = trunc i32 %v0_10b44 to i8
  %v3_10b44 = inttoptr i32 %v5_10b40 to i8*
  store i8 %v1_10b44, i8* %v3_10b44, align 1
  %v4_10b44 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b44 = add i32 %v4_10b44, 1
  store i32 %v5_10b44, i32* %r3.global-to-local, align 4
  %v0_10b48 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b48 = trunc i32 %v0_10b48 to i8
  %v3_10b48 = inttoptr i32 %v5_10b44 to i8*
  store i8 %v1_10b48, i8* %v3_10b48, align 1
  %v4_10b48 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b48 = add i32 %v4_10b48, 1
  store i32 %v5_10b48, i32* %r3.global-to-local, align 4
  %v0_10b4c = load i32, i32* %r1.global-to-local, align 4
  %v1_10b4c = trunc i32 %v0_10b4c to i8
  %v3_10b4c = inttoptr i32 %v5_10b48 to i8*
  store i8 %v1_10b4c, i8* %v3_10b4c, align 1
  %v4_10b4c = load i32, i32* %r3.global-to-local, align 4
  %v5_10b4c = add i32 %v4_10b4c, 1
  store i32 %v5_10b4c, i32* %r3.global-to-local, align 4
  %v0_10b50 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b50 = trunc i32 %v0_10b50 to i8
  %v3_10b50 = inttoptr i32 %v5_10b4c to i8*
  store i8 %v1_10b50, i8* %v3_10b50, align 1
  %v4_10b50 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b50 = add i32 %v4_10b50, 1
  store i32 %v5_10b50, i32* %r3.global-to-local, align 4
  %v0_10b54 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b54 = trunc i32 %v0_10b54 to i8
  %v3_10b54 = inttoptr i32 %v5_10b50 to i8*
  store i8 %v1_10b54, i8* %v3_10b54, align 1
  %v4_10b54 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b54 = add i32 %v4_10b54, 1
  store i32 %v5_10b54, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_10af0, { 1, 0 }
  uselistorder i32 %v12_10b1c, { 1, 2, 0 }
  uselistorder i32 %v0_10af054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_10ae8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_10ad8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_10acc, { 1, 0 }
  uselistorder i32 %v0_10ac4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_10b28, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_10b00, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_10b60(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b60:
  %v0_10b60 = call i32 @function_149f0()
  ret i32 %v0_10b60
}

define i32 @function_10b70() local_unnamed_addr {
dec_label_pc_10b70:
  %v0_10b70 = call i32 @function_149f0()
  ret i32 %v0_10b70
}

define i32 @function_10b80(i32 %arg1) local_unnamed_addr {
dec_label_pc_10b80:
  %stack_var_-12 = alloca i32, align 4
  %v2_10b88 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_10b88, i32* @r1, align 4
  %v0_10b8c = call i32 @function_1525c()
  %v2_10b90 = icmp eq i32 %v0_10b8c, 0
  %v4_10b94 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_10b90, i32 -1, i32 %v4_10b94
  ret i32 %storemerge
}

define i32 @function_10ba8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10ba8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ba8 = load i32, i32* @r7, align 4
  store i32 %v3_10ba8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10bd0, label %dec_label_pc_10bc0

dec_label_pc_10bc0:                               ; preds = %dec_label_pc_10ba8
  %v0_10bc0 = call i32 @function_10a6c()
  %v0_10bc4 = load i32, i32* %r7.global-to-local, align 4
  %v1_10bc4 = sub i32 0, %v0_10bc4
  %v2_10bc8 = inttoptr i32 %v0_10bc0 to i32*
  store i32 %v1_10bc4, i32* %v2_10bc8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10bd4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10bd0

dec_label_pc_10bd0:                               ; preds = %dec_label_pc_10ba8, %dec_label_pc_10bc0
  %v2_10bd4 = phi i32 [ %v3_10ba8, %dec_label_pc_10ba8 ], [ %v2_10bd4.pre, %dec_label_pc_10bc0 ]
  %v0_10bd0 = phi i32 [ %arg1, %dec_label_pc_10ba8 ], [ -1, %dec_label_pc_10bc0 ]
  store i32 %v2_10bd4, i32* @r7, align 4
  ret i32 %v0_10bd0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10bd0, { 1, 0 }
}

define i32 @function_10be0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10be0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10be0 = load i32, i32* @r7, align 4
  store i32 %v3_10be0, i32* %stack_var_-8, align 4
  %v0_10bec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10bec, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10bec, -4095
  br i1 %tmp, label %dec_label_pc_10c0c, label %dec_label_pc_10bfc

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10be0
  %v0_10bfc = call i32 @function_10a6c()
  %v0_10c00 = load i32, i32* %r7.global-to-local, align 4
  %v1_10c00 = sub i32 0, %v0_10c00
  %v2_10c04 = inttoptr i32 %v0_10bfc to i32*
  store i32 %v1_10c00, i32* %v2_10c04, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10c0c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c0c

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_10be0, %dec_label_pc_10bfc
  %v1_10c10 = phi i32 [ %v0_10bec, %dec_label_pc_10be0 ], [ -1, %dec_label_pc_10bfc ]
  %v2_10c0c = phi i32 [ %v3_10be0, %dec_label_pc_10be0 ], [ %v2_10c0c.pre, %dec_label_pc_10bfc ]
  store i32 %v2_10c0c, i32* @r7, align 4
  ret i32 %v1_10c10

; uselistorder directives
  uselistorder i32 %v0_10bec, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c0c, { 1, 0 }
}

define i32 @function_10c18(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10c18:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c18 = load i32, i32* @r7, align 4
  store i32 %v3_10c18, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10c40, label %dec_label_pc_10c30

dec_label_pc_10c30:                               ; preds = %dec_label_pc_10c18
  %v0_10c30 = call i32 @function_10a6c()
  %v0_10c34 = load i32, i32* %r7.global-to-local, align 4
  %v1_10c34 = sub i32 0, %v0_10c34
  store i32 %v1_10c34, i32* @r3, align 4
  %v2_10c38 = inttoptr i32 %v0_10c30 to i32*
  store i32 %v1_10c34, i32* %v2_10c38, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10c44.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c40

dec_label_pc_10c40:                               ; preds = %dec_label_pc_10c18, %dec_label_pc_10c30
  %v2_10c44 = phi i32 [ %v3_10c18, %dec_label_pc_10c18 ], [ %v2_10c44.pre, %dec_label_pc_10c30 ]
  %v0_10c40 = phi i32 [ %arg1, %dec_label_pc_10c18 ], [ -1, %dec_label_pc_10c30 ]
  store i32 %v2_10c44, i32* @r7, align 4
  ret i32 %v0_10c40

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c40, { 1, 0 }
}

define i32 @function_10c50(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10c50:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c50 = load i32, i32* @r7, align 4
  store i32 %v3_10c50, i32* %stack_var_-8, align 4
  %v0_10c5c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10c5c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10c5c, -4095
  br i1 %tmp, label %dec_label_pc_10c7c, label %dec_label_pc_10c6c

dec_label_pc_10c6c:                               ; preds = %dec_label_pc_10c50
  %v0_10c6c = call i32 @function_10a6c()
  %v0_10c70 = load i32, i32* %r7.global-to-local, align 4
  %v1_10c70 = sub i32 0, %v0_10c70
  %v2_10c74 = inttoptr i32 %v0_10c6c to i32*
  store i32 %v1_10c70, i32* %v2_10c74, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10c7c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c7c

dec_label_pc_10c7c:                               ; preds = %dec_label_pc_10c50, %dec_label_pc_10c6c
  %v1_10c80 = phi i32 [ %v0_10c5c, %dec_label_pc_10c50 ], [ -1, %dec_label_pc_10c6c ]
  %v2_10c7c = phi i32 [ %v3_10c50, %dec_label_pc_10c50 ], [ %v2_10c7c.pre, %dec_label_pc_10c6c ]
  store i32 %v2_10c7c, i32* @r7, align 4
  ret i32 %v1_10c80

; uselistorder directives
  uselistorder i32 %v0_10c5c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c7c, { 1, 0 }
}

define i32 @function_10c88(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10c88:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10cbc, label %dec_label_pc_10cac

dec_label_pc_10cac:                               ; preds = %dec_label_pc_10c88
  %v0_10cac = call i32 @function_10a6c()
  %v0_10cb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_10cb0 = sub i32 0, %v0_10cb0
  %v2_10cb4 = inttoptr i32 %v0_10cac to i32*
  store i32 %v1_10cb0, i32* %v2_10cb4, align 4
  br label %dec_label_pc_10cbc

dec_label_pc_10cbc:                               ; preds = %dec_label_pc_10c88, %dec_label_pc_10cac
  %v1_10cc4 = phi i32 [ %arg1, %dec_label_pc_10c88 ], [ -1, %dec_label_pc_10cac ]
  ret i32 %v1_10cc4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cbc, { 1, 0 }
}

define i32 @function_10ccc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ccc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ccc = load i32, i32* @r7, align 4
  store i32 %v3_10ccc, i32* %stack_var_-8, align 4
  %v0_10cd8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10cd8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10cd8, -4095
  br i1 %tmp, label %dec_label_pc_10cf8, label %dec_label_pc_10ce8

dec_label_pc_10ce8:                               ; preds = %dec_label_pc_10ccc
  %v0_10ce8 = call i32 @function_10a6c()
  %v0_10cec = load i32, i32* %r7.global-to-local, align 4
  %v1_10cec = sub i32 0, %v0_10cec
  %v2_10cf0 = inttoptr i32 %v0_10ce8 to i32*
  store i32 %v1_10cec, i32* %v2_10cf0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10cf8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10cf8

dec_label_pc_10cf8:                               ; preds = %dec_label_pc_10ccc, %dec_label_pc_10ce8
  %v1_10cfc = phi i32 [ %v0_10cd8, %dec_label_pc_10ccc ], [ -1, %dec_label_pc_10ce8 ]
  %v2_10cf8 = phi i32 [ %v3_10ccc, %dec_label_pc_10ccc ], [ %v2_10cf8.pre, %dec_label_pc_10ce8 ]
  store i32 %v2_10cf8, i32* @r7, align 4
  ret i32 %v1_10cfc

; uselistorder directives
  uselistorder i32 %v0_10cd8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cf8, { 1, 0 }
}

define i32 @function_10d00(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10d00:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10d00 = load i32, i32* @r7, align 4
  store i32 %v3_10d00, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10d28, label %dec_label_pc_10d18

dec_label_pc_10d18:                               ; preds = %dec_label_pc_10d00
  %v0_10d18 = call i32 @function_10a6c()
  %v0_10d1c = load i32, i32* %r7.global-to-local, align 4
  %v1_10d1c = sub i32 0, %v0_10d1c
  %v2_10d20 = inttoptr i32 %v0_10d18 to i32*
  store i32 %v1_10d1c, i32* %v2_10d20, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10d2c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10d28

dec_label_pc_10d28:                               ; preds = %dec_label_pc_10d00, %dec_label_pc_10d18
  %v2_10d2c = phi i32 [ %v3_10d00, %dec_label_pc_10d00 ], [ %v2_10d2c.pre, %dec_label_pc_10d18 ]
  %v0_10d28 = phi i32 [ %arg1, %dec_label_pc_10d00 ], [ -1, %dec_label_pc_10d18 ]
  store i32 %v2_10d2c, i32* @r7, align 4
  ret i32 %v0_10d28

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d28, { 1, 0 }
}

define i32 @function_10d38(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10d38:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10d38 = load i32, i32* @r4, align 4
  store i32 %v3_10d38, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10d68, label %dec_label_pc_10d58

dec_label_pc_10d58:                               ; preds = %dec_label_pc_10d38
  %v0_10d58 = call i32 @function_10a6c()
  %v0_10d5c = load i32, i32* %r4.global-to-local, align 4
  %v1_10d5c = sub i32 0, %v0_10d5c
  %v2_10d60 = inttoptr i32 %v0_10d58 to i32*
  store i32 %v1_10d5c, i32* %v2_10d60, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10d6c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10d68

dec_label_pc_10d68:                               ; preds = %dec_label_pc_10d38, %dec_label_pc_10d58
  %v2_10d6c = phi i32 [ %v3_10d38, %dec_label_pc_10d38 ], [ %v2_10d6c.pre, %dec_label_pc_10d58 ]
  %v0_10d68 = phi i32 [ %arg1, %dec_label_pc_10d38 ], [ -1, %dec_label_pc_10d58 ]
  store i32 %v2_10d6c, i32* @r4, align 4
  ret i32 %v0_10d68

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d68, { 1, 0 }
}

define i32 @function_10d74(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10d74:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10d74 = load i32, i32* @r7, align 4
  store i32 %v3_10d74, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10d9c, label %dec_label_pc_10d8c

dec_label_pc_10d8c:                               ; preds = %dec_label_pc_10d74
  %v0_10d8c = call i32 @function_10a6c()
  %v0_10d90 = load i32, i32* %r7.global-to-local, align 4
  %v1_10d90 = sub i32 0, %v0_10d90
  store i32 %v1_10d90, i32* @r3, align 4
  %v2_10d94 = inttoptr i32 %v0_10d8c to i32*
  store i32 %v1_10d90, i32* %v2_10d94, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10da0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10d9c

dec_label_pc_10d9c:                               ; preds = %dec_label_pc_10d74, %dec_label_pc_10d8c
  %v2_10da0 = phi i32 [ %v3_10d74, %dec_label_pc_10d74 ], [ %v2_10da0.pre, %dec_label_pc_10d8c ]
  %v0_10d9c = phi i32 [ %arg1, %dec_label_pc_10d74 ], [ -1, %dec_label_pc_10d8c ]
  store i32 %v2_10da0, i32* @r7, align 4
  ret i32 %v0_10d9c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d9c, { 1, 0 }
}

define i32 @function_10dac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10dac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10dac = load i32, i32* @r4, align 4
  store i32 %v3_10dac, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10ddc, label %dec_label_pc_10dcc

dec_label_pc_10dcc:                               ; preds = %dec_label_pc_10dac
  %v0_10dcc = call i32 @function_10a6c()
  %v0_10dd0 = load i32, i32* %r4.global-to-local, align 4
  %v1_10dd0 = sub i32 0, %v0_10dd0
  %v2_10dd4 = inttoptr i32 %v0_10dcc to i32*
  store i32 %v1_10dd0, i32* %v2_10dd4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10de0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10ddc

dec_label_pc_10ddc:                               ; preds = %dec_label_pc_10dac, %dec_label_pc_10dcc
  %v2_10de0 = phi i32 [ %v3_10dac, %dec_label_pc_10dac ], [ %v2_10de0.pre, %dec_label_pc_10dcc ]
  %v0_10ddc = phi i32 [ %arg1, %dec_label_pc_10dac ], [ -1, %dec_label_pc_10dcc ]
  store i32 %v2_10de0, i32* @r4, align 4
  ret i32 %v0_10ddc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ddc, { 1, 0 }
}

define i32 @function_10dec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10dec:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10e20, label %dec_label_pc_10e10

dec_label_pc_10e10:                               ; preds = %dec_label_pc_10dec
  %v0_10e10 = call i32 @function_10a6c()
  %v0_10e14 = load i32, i32* %r4.global-to-local, align 4
  %v1_10e14 = sub i32 0, %v0_10e14
  store i32 %v1_10e14, i32* @r3, align 4
  %v2_10e18 = inttoptr i32 %v0_10e10 to i32*
  store i32 %v1_10e14, i32* %v2_10e18, align 4
  br label %dec_label_pc_10e20

dec_label_pc_10e20:                               ; preds = %dec_label_pc_10dec, %dec_label_pc_10e10
  %v1_10e28 = phi i32 [ %arg1, %dec_label_pc_10dec ], [ -1, %dec_label_pc_10e10 ]
  ret i32 %v1_10e28

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e20, { 1, 0 }
}

define i32 @function_10e30(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10e30:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10e30 = load i32, i32* @r7, align 4
  store i32 %v3_10e30, i32* %stack_var_-8, align 4
  %v0_10e3c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10e3c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10e3c, -4095
  br i1 %tmp, label %dec_label_pc_10e5c, label %dec_label_pc_10e4c

dec_label_pc_10e4c:                               ; preds = %dec_label_pc_10e30
  %v0_10e4c = call i32 @function_10a6c()
  %v0_10e50 = load i32, i32* %r7.global-to-local, align 4
  %v1_10e50 = sub i32 0, %v0_10e50
  store i32 %v1_10e50, i32* @r3, align 4
  %v2_10e54 = inttoptr i32 %v0_10e4c to i32*
  store i32 %v1_10e50, i32* %v2_10e54, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10e5c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10e5c

dec_label_pc_10e5c:                               ; preds = %dec_label_pc_10e30, %dec_label_pc_10e4c
  %v1_10e60 = phi i32 [ %v0_10e3c, %dec_label_pc_10e30 ], [ -1, %dec_label_pc_10e4c ]
  %v2_10e5c = phi i32 [ %v3_10e30, %dec_label_pc_10e30 ], [ %v2_10e5c.pre, %dec_label_pc_10e4c ]
  store i32 %v2_10e5c, i32* @r7, align 4
  ret i32 %v1_10e60

; uselistorder directives
  uselistorder i32 %v0_10e3c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e5c, { 1, 0 }
}

define i32 @function_10e68(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e68:
  store i32 %arg1, i32* @r0, align 4
  %v3_10e68 = load i32, i32* @r4, align 4
  %v0_10e70 = call i32 @function_102b0()
  %v2_10e78 = call i32 @function_10410(i32 %v0_10e70, i32 %arg1)
  store i32 %v3_10e68, i32* @r4, align 4
  ret i32 %v2_10e78

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_10410, { 0, 6, 5, 4, 3, 2, 1 }
}

define i32 @function_10e84(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10e84:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_10e9c, label %dec_label_pc_10e94

dec_label_pc_10e94:                               ; preds = %dec_label_pc_10e84
  %v7_10e98 = icmp slt i32 %arg1, 65
  br i1 %v7_10e98, label %dec_label_pc_10eb0, label %dec_label_pc_10e9c

dec_label_pc_10e9c:                               ; preds = %dec_label_pc_10e94, %dec_label_pc_10e84
  %v0_10e9c = call i32 @function_10a6c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10ea8 = inttoptr i32 %v0_10e9c to i32*
  store i32 22, i32* %v2_10ea8, align 4
  %v0_10eb8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10eb8

dec_label_pc_10eb0:                               ; preds = %dec_label_pc_10e94
  %v0_10eb0 = call i32 @function_10fb8()
  store i32 %v0_10eb0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10eb8

dec_label_pc_10eb8:                               ; preds = %dec_label_pc_10e9c, %dec_label_pc_10eb0
  %v0_10eb8 = phi i32 [ %v0_10eb8.pre, %dec_label_pc_10e9c ], [ %v0_10eb0, %dec_label_pc_10eb0 ]
  ret i32 %v0_10eb8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10eb8, { 1, 0 }
}

define i32 @function_10ec8(i32* %arg1) local_unnamed_addr {
dec_label_pc_10ec8:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_10ed0 = add i32 %tmp, 4
  %v3_10ed0 = inttoptr i32 %v2_10ed0 to i32*
  store i32 0, i32* %v3_10ed0, align 4
  %v1_10ed4 = load i32, i32* %r3.global-to-local, align 4
  %v2_10ed4 = inttoptr i32 %v1_10ed4 to i32*
  store i32 0, i32* %v2_10ed4, align 4
  ret i32 0
}

define i32 @function_10edc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10edc:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10edc = load i32, i32* @r4, align 4
  store i32 %v3_10edc, i32* %stack_var_-16, align 4
  %v6_10edc = load i32, i32* @r5, align 4
  %v9_10edc = load i32, i32* @r6, align 4
  %v7_10ee4 = icmp eq i32 %arg2, -1
  br i1 %v7_10ee4, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_10edc
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_10edc
  %v2_10eec = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_10f08

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10f10

dec_label_pc_10f08:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 122896, i32* @r6, align 4
  %v7_10f0c = icmp slt i32 %arg1, 65
  br i1 %v7_10f0c, label %dec_label_pc_10f24, label %dec_label_pc_10f10

dec_label_pc_10f10:                               ; preds = %.thread16, %dec_label_pc_10f08
  %v0_10f10 = call i32 @function_10a6c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10f1c = inttoptr i32 %v0_10f10 to i32*
  store i32 22, i32* %v2_10f1c, align 4
  %v0_10f7c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_10f24:                               ; preds = %dec_label_pc_10f08
  %v2_10f24 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10f24, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_10f2c = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10f2c, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_10f3c = call i32 @function_10fb8()
  %v0_10f44 = load i32, i32* @r5, align 4
  %v0_10f48 = load i32, i32* @r6, align 4
  %v2_10f48 = add i32 %v0_10f48, 9068
  %v2_10f4c = call i32 @function_10f94(i32 %v2_10f48, i32 %v0_10f44)
  store i32 %v2_10eec, i32* %r2.global-to-local, align 4
  %v0_10f64 = load i32, i32* @r5, align 4
  %v3_10f6c = call i32 @function_131cc(i32 %v0_10f64, i32 %v2_10f24, i32 %v2_10eec)
  %v1_10f70 = icmp slt i32 %v3_10f6c, 0
  br i1 %v1_10f70, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_10f24
  %v5_10f74 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_10f74, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_10f24
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_10f10, %bb32
  %v0_10f7c = phi i32 [ %v5_10f74, %bb31 ], [ %v0_10f7c.pre, %dec_label_pc_10f10 ], [ -1, %bb32 ]
  %v2_10f84 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10f84, i32* @r4, align 4
  store i32 %v6_10edc, i32* @r5, align 4
  store i32 %v9_10edc, i32* @r6, align 4
  ret i32 %v0_10f7c

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 ()* @function_10fb8, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10f10, { 1, 0 }
}

define i32 @function_10f94(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f94:
  %v1_10f94 = add i32 %arg2, -1
  %v3_10f98 = udiv i32 %v1_10f94, 32
  %v4_10f9c = mul nuw nsw i32 %v3_10f98, 4
  %v5_10f9c = add i32 %v4_10f9c, %arg1
  %v6_10f9c = inttoptr i32 %v5_10f9c to i32*
  %v7_10f9c = load i32, i32* %v6_10f9c, align 4
  %v1_10fa0 = urem i32 %v1_10f94, 32
  %v7_10fa8 = shl i32 1, %v1_10fa0
  %v8_10fa8 = and i32 %v7_10f9c, %v7_10fa8
  %v10_10fa8 = icmp ne i32 %v8_10fa8, 0
  %. = zext i1 %v10_10fa8 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_10f94, { 1, 0 }
}

define i32 @function_10fb8() local_unnamed_addr {
dec_label_pc_10fb8:
  %v0_10fb8 = load i32, i32* @r1, align 4
  %v1_10fb8 = add i32 %v0_10fb8, -1
  %v3_10fbc = udiv i32 %v1_10fb8, 32
  %v0_10fc0 = load i32, i32* @r0, align 4
  %v4_10fc0 = mul nuw nsw i32 %v3_10fbc, 4
  %v5_10fc0 = add i32 %v0_10fc0, %v4_10fc0
  %v6_10fc0 = inttoptr i32 %v5_10fc0 to i32*
  %v7_10fc0 = load i32, i32* %v6_10fc0, align 4
  %v1_10fc4 = urem i32 %v1_10fb8, 32
  %v7_10fcc = shl i32 1, %v1_10fc4
  %v8_10fcc = or i32 %v7_10fc0, %v7_10fcc
  store i32 %v8_10fcc, i32* %v6_10fc0, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10fb8, { 1, 0 }
}

define i32 @function_10fdc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10fdc:
  %v1_10fdc = add i32 %arg2, -1
  %v3_10fe0 = udiv i32 %v1_10fdc, 32
  %v4_10fe4 = mul nuw nsw i32 %v3_10fe0, 4
  %v5_10fe4 = add i32 %v4_10fe4, %arg1
  %v6_10fe4 = inttoptr i32 %v5_10fe4 to i32*
  %v7_10fe4 = load i32, i32* %v6_10fe4, align 4
  %v1_10fe8 = urem i32 %v1_10fdc, 32
  %tmp = shl i32 -1, %v1_10fe8
  %v8_10ff0 = add i32 %tmp, -1
  %v9_10ff0 = and i32 %v7_10fe4, %v8_10ff0
  store i32 %v9_10ff0, i32* %v6_10fe4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10fdc, { 1, 0 }
}

define i32 @function_11000(i32 %arg1) local_unnamed_addr {
dec_label_pc_11000:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_11000 = udiv i32 %arg1, 256
  store i32 %v3_11000, i32* %r1.global-to-local, align 4
  %v2_11004 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_11004, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11000
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11000, %bb
  %v0_11010 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11004, i32 %v0_11010)
  %v0_11014 = load i32, i32* %r1.global-to-local, align 4
  %v1_11014 = add i32 %v0_11014, 1048320
  %v3_11018 = udiv i32 %v1_11014, 65536
  %v1_1101c = and i32 %v3_11018, 8
  %v6_11020 = shl i32 %v0_11014, %v1_1101c
  %v1_11024 = add i32 %v6_11020, 520192
  %v3_11028 = udiv i32 %v1_11024, 65536
  %v1_1102c = and i32 %v3_11028, 4
  %v6_11030 = shl i32 %v6_11020, %v1_1102c
  %v1_11034 = add i32 %v6_11030, 245760
  %v3_11038 = udiv i32 %v1_11034, 65536
  %v1_1103c = and i32 %v3_11038, 2
  %v6_11040 = shl i32 %v6_11030, %v1_1103c
  store i32 %v6_11040, i32* %r1.global-to-local, align 4
  %v1_11044 = sub nsw i32 13, %v1_1101c
  %v2_11048 = sub nsw i32 %v1_11044, %v1_1102c
  %v3_1104c = udiv i32 %v6_11040, 32768
  %v4_1104c = sub nuw nsw i32 -1, %v3_1104c
  %v4_11050 = udiv i32 %v6_11040, 16384
  %v5_11050 = and i32 %v4_11050, %v4_1104c
  %v2_11054 = sub nsw i32 %v2_11048, %v1_1103c
  %v2_11058 = add nsw i32 %v2_11054, %v5_11050
  %v1_1105c = add nsw i32 %v2_11058, 6
  %v0_11060 = load i32, i32* %ip.global-to-local, align 4
  %v6_11060 = lshr i32 %v0_11060, %v1_1105c
  %v3_11064 = mul nsw i32 %v2_11058, 4
  %v1_11068 = add nsw i32 %v3_11064, 32
  %v1_1106c = urem i32 %v6_11060, 4
  %v2_11070 = or i32 %v1_1106c, %v1_11068
  ret i32 %v2_11070

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11078() local_unnamed_addr {
dec_label_pc_11078:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11078 = load i32, i32* @r4, align 4
  %v6_11078 = load i32, i32* @r5, align 4
  %v9_11078 = load i32, i32* @r6, align 4
  %v12_11078 = load i32, i32* @r7, align 4
  %v15_11078 = load i32, i32* @r8, align 4
  %v18_11078 = load i32, i32* @sb, align 4
  %v21_11078 = load i32, i32* @sl, align 4
  %v24_11078 = load i32, i32* @fp, align 4
  %v27_11078 = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_1108c = load i32, i32* inttoptr (i32 122964 to i32*), align 4
  store i32 %v4_1108c, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_11098 = load i32, i32* inttoptr (i32 122932 to i32*), align 4
  store i32 %v4_11098, i32* %r1.global-to-local, align 4
  %v0_1109c = load i32, i32* @r0, align 4
  store i32 %v0_1109c, i32* @r5, align 4
  store i32 %v4_1108c, i32* %r2.global-to-local, align 4
  %v2_110a4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_110a4, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %ip.global-to-local, align 4
  %v4_110b0 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  store i32 %v4_110b0, i32* %ip.global-to-local, align 4
  store i32 69820, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_110b0)
  %v0_110bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_110bc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_110c8 = load i32, i32* inttoptr (i32 122912 to i32*), align 32
  store i32 %v4_110c8, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_110d4.421 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_110c8)
  %v0_110d4 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_110d4, -32
  br i1 %tmp, label %dec_label_pc_110f0, label %dec_label_pc_110dc

dec_label_pc_110dc:                               ; preds = %dec_label_pc_11078
  %v0_110dc = call i32 @function_10a6c()
  store i32 %v0_110dc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_110e8 = inttoptr i32 %v0_110dc to i32*
  store i32 12, i32* %v2_110e8, align 4
  br label %dec_label_pc_1196c

dec_label_pc_110f0:                               ; preds = %dec_label_pc_11078
  %v1_110f0 = add i32 %v0_110d4, 11
  store i32 %v1_110f0, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v2_110fc = icmp ugt i32 %v1_110f0, 14
  %v7_110fc = icmp eq i32 %v1_110f0, 15
  %v2_11100 = xor i1 %v7_110fc, true
  %v3_11100 = and i1 %v2_110fc, %v2_11100
  br i1 %v3_11100, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_110f0
  %v5_11100 = and i32 %v1_110f0, -8
  store i32 %v5_11100, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_110f0, %bb
  %v4_11104 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_11104, i32* @r0, align 4
  %v1_11108 = inttoptr i32 %v4_11104 to i32*
  %v2_11108 = load i32, i32* %v1_11108, align 4
  store i32 %v2_11108, i32* @r4, align 4
  %v2_1110c = xor i1 %v2_110fc, true
  %v3_1110c = or i1 %v7_110fc, %v2_1110c
  br i1 %v3_1110c, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_11110 = urem i32 %v2_11108, 2
  %v2_11110 = icmp eq i32 %v1_11110, 0
  br i1 %v2_11110, label %dec_label_pc_11118, label %dec_label_pc_11128

dec_label_pc_11118:                               ; preds = %bb140
  %v2_11118 = icmp eq i32 %v2_11108, 0
  br i1 %v2_11118, label %dec_label_pc_11120, label %dec_label_pc_11504

dec_label_pc_11120:                               ; preds = %dec_label_pc_11118
  %v0_11120 = call i32 @function_11f30()
  store i32 %v0_11120, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11504

dec_label_pc_11128:                               ; preds = %bb140
  %v0_11128 = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_11128, %v2_11108
  br i1 %tmp201, label %dec_label_pc_11150, label %dec_label_pc_11130

dec_label_pc_11130:                               ; preds = %dec_label_pc_11128
  %v1_11130 = add i32 %v4_11104, -4
  store i32 %v1_11130, i32* %r1.global-to-local, align 4
  %v3_11134 = udiv i32 %v0_11128, 8
  store i32 %v3_11134, i32* %r2.global-to-local, align 4
  %v4_11138 = mul nuw i32 %v3_11134, 4
  %v5_11138 = add i32 %v4_11138, %v1_11130
  %v6_11138 = inttoptr i32 %v5_11138 to i32*
  %v7_11138 = load i32, i32* %v6_11138, align 4
  store i32 %v7_11138, i32* %r0.global-to-local, align 4
  %v2_1113c = icmp eq i32 %v7_11138, 0
  br i1 %v2_1113c, label %dec_label_pc_11150, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11130
  %v2_11140 = add i32 %v7_11138, 8
  %v3_11140 = inttoptr i32 %v2_11140 to i32*
  %v4_11140 = load i32, i32* %v3_11140, align 4
  store i32 %v4_11140, i32* %r3.global-to-local, align 4
  store i32 %v2_11140, i32* %r0.global-to-local, align 4
  store i32 %v2_11140, i32* %r4.global-to-local, align 4
  store i32 %v4_11140, i32* %v6_11138, align 4
  br label %dec_label_pc_11950

dec_label_pc_11150:                               ; preds = %dec_label_pc_11130, %dec_label_pc_11128
  %tmp202 = icmp ugt i32 %v0_11128, 255
  br i1 %tmp202, label %dec_label_pc_111a0, label %dec_label_pc_11158

dec_label_pc_11158:                               ; preds = %dec_label_pc_11150
  store i32 122896, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11160 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  %v3_11164 = udiv i32 %v0_11128, 8
  store i32 %v3_11164, i32* @r7, align 4
  %v4_11168 = mul nuw i32 %v3_11164, 8
  %v5_11168 = add i32 %v4_11160, %v4_11168
  store i32 %v5_11168, i32* %r3.global-to-local, align 4
  %v1_1116c = add i32 %v5_11168, 44
  store i32 %v1_1116c, i32* %ip.global-to-local, align 4
  %v1_11170 = add i32 %v5_11168, 56
  %v2_11170 = inttoptr i32 %v1_11170 to i32*
  %v3_11170 = load i32, i32* %v2_11170, align 4
  store i32 %v3_11170, i32* %r0.global-to-local, align 4
  %v9_11174 = icmp eq i32 %v3_11170, %v1_1116c
  br i1 %v9_11174, label %dec_label_pc_11300, label %dec_label_pc_1117c

dec_label_pc_1117c:                               ; preds = %dec_label_pc_11158
  %v2_1117c = add i32 %v3_11170, %v0_11128
  store i32 %v2_1117c, i32* %r3.global-to-local, align 4
  %v1_11180 = add i32 %v2_1117c, 4
  %v2_11180 = inttoptr i32 %v1_11180 to i32*
  %v3_11180 = load i32, i32* %v2_11180, align 4
  store i32 %v3_11180, i32* %r2.global-to-local, align 4
  %v1_11184 = add i32 %v3_11170, 12
  %v2_11184 = inttoptr i32 %v1_11184 to i32*
  %v3_11184 = load i32, i32* %v2_11184, align 4
  store i32 %v3_11184, i32* %r1.global-to-local, align 4
  %v1_11188 = or i32 %v3_11180, 1
  store i32 %v1_11188, i32* %r2.global-to-local, align 4
  %v1_1118c = add i32 %v3_11170, 8
  store i32 %v1_1118c, i32* %r4.global-to-local, align 4
  store i32 %v1_11188, i32* %v2_11180, align 4
  %v0_11194 = load i32, i32* %ip.global-to-local, align 4
  %v1_11194 = load i32, i32* %r1.global-to-local, align 4
  %v2_11194 = add i32 %v1_11194, 8
  %v3_11194 = inttoptr i32 %v2_11194 to i32*
  store i32 %v0_11194, i32* %v3_11194, align 4
  %v0_11198 = load i32, i32* %r1.global-to-local, align 4
  %v1_11198 = load i32, i32* %ip.global-to-local, align 4
  %v2_11198 = add i32 %v1_11198, 12
  %v3_11198 = inttoptr i32 %v2_11198 to i32*
  store i32 %v0_11198, i32* %v3_11198, align 4
  br label %dec_label_pc_11950

dec_label_pc_111a0:                               ; preds = %dec_label_pc_11150
  store i32 %v0_11128, i32* %r0.global-to-local, align 4
  %v1_111a4 = call i32 @function_11000(i32 %v0_11128)
  store i32 %v1_111a4, i32* %r0.global-to-local, align 4
  %v0_111a8 = load i32, i32* @r4, align 4
  %v1_111a8 = and i32 %v0_111a8, 2
  %v2_111a8 = icmp eq i32 %v1_111a8, 0
  store i32 %v1_111a4, i32* @r7, align 4
  br i1 %v2_111a8, label %dec_label_pc_11300, label %dec_label_pc_111b4

dec_label_pc_111b4:                               ; preds = %dec_label_pc_111a0
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_111bc = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_111bc, i32* @r0, align 4
  %v0_111c0 = call i32 @function_11f30()
  store i32 %v0_111c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11300

dec_label_pc_111c8:                               ; preds = %dec_label_pc_11314
  %v1_111c8 = add i32 %v3_11314, 4
  %v2_111c8 = inttoptr i32 %v1_111c8 to i32*
  %v3_111c8 = load i32, i32* %v2_111c8, align 4
  store i32 %v3_111c8, i32* %r3.global-to-local, align 4
  %v0_111cc = load i32, i32* @sl, align 4
  %v1_111d0 = and i32 %v3_111c8, -4
  store i32 %v1_111d0, i32* %r4.global-to-local, align 4
  %v1_111d4 = add i32 %v3_11314, 12
  %v2_111d4 = inttoptr i32 %v1_111d4 to i32*
  %v3_111d4 = load i32, i32* %v2_111d4, align 4
  store i32 %v3_111d4, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_111cc, 255
  br i1 %tmp203, label %dec_label_pc_11230, label %dec_label_pc_111dc

dec_label_pc_111dc:                               ; preds = %dec_label_pc_111c8
  %v9_111dc = icmp eq i32 %v3_111d4, %v0_11234
  br i1 %v9_111dc, label %dec_label_pc_111e4, label %dec_label_pc_11230

dec_label_pc_111e4:                               ; preds = %dec_label_pc_111dc
  %v0_111e4 = load i32, i32* @sb, align 4
  %v1_111e4 = add i32 %v0_111e4, 48
  %v2_111e4 = inttoptr i32 %v1_111e4 to i32*
  %v3_111e4 = load i32, i32* %v2_111e4, align 4
  store i32 %v3_111e4, i32* %r3.global-to-local, align 4
  %v9_111e8 = icmp eq i32 %v3_11314, %v3_111e4
  br i1 %v9_111e8, label %dec_label_pc_111f0, label %dec_label_pc_11230

dec_label_pc_111f0:                               ; preds = %dec_label_pc_111e4
  %v1_111f0 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_111d0, %v1_111f0
  br i1 %tmp204, label %dec_label_pc_111f8, label %dec_label_pc_11230

dec_label_pc_111f8:                               ; preds = %dec_label_pc_111f0
  %v2_111f8 = sub i32 %v1_111d0, %v0_111cc
  store i32 %v2_111f8, i32* %r2.global-to-local, align 4
  %v2_111fc = add i32 %v0_111cc, %v3_11314
  store i32 %v2_111fc, i32* %r3.global-to-local, align 4
  %v1_11200 = or i32 %v0_111cc, 1
  store i32 %v1_11200, i32* %r0.global-to-local, align 4
  %v1_11204 = or i32 %v2_111f8, 1
  store i32 %v1_11204, i32* %r1.global-to-local, align 4
  %v1_11208 = add i32 %v3_11314, 8
  store i32 %v1_11208, i32* %r4.global-to-local, align 4
  %v2_1120c = add i32 %v0_11234, 8
  %v3_1120c = inttoptr i32 %v2_1120c to i32*
  store i32 %v2_111fc, i32* %v3_1120c, align 4
  %v0_11210 = load i32, i32* %r3.global-to-local, align 4
  %v1_11210 = load i32, i32* %ip.global-to-local, align 4
  %v2_11210 = add i32 %v1_11210, 12
  %v3_11210 = inttoptr i32 %v2_11210 to i32*
  store i32 %v0_11210, i32* %v3_11210, align 4
  %v0_11214 = load i32, i32* %r0.global-to-local, align 4
  %v1_11214 = load i32, i32* @r6, align 4
  %v2_11214 = add i32 %v1_11214, 4
  %v3_11214 = inttoptr i32 %v2_11214 to i32*
  store i32 %v0_11214, i32* %v3_11214, align 4
  %v0_11218 = load i32, i32* %r3.global-to-local, align 4
  %v1_11218 = load i32, i32* @sb, align 4
  %v2_11218 = add i32 %v1_11218, 48
  %v3_11218 = inttoptr i32 %v2_11218 to i32*
  store i32 %v0_11218, i32* %v3_11218, align 4
  %v0_1121c = load i32, i32* %r2.global-to-local, align 4
  %v1_1121c = load i32, i32* %r3.global-to-local, align 4
  %v3_1121c = add i32 %v1_1121c, %v0_1121c
  %v4_1121c = inttoptr i32 %v3_1121c to i32*
  store i32 %v0_1121c, i32* %v4_1121c, align 4
  %v0_11220 = load i32, i32* %r1.global-to-local, align 4
  %v1_11220 = load i32, i32* %r3.global-to-local, align 4
  %v2_11220 = add i32 %v1_11220, 4
  %v3_11220 = inttoptr i32 %v2_11220 to i32*
  store i32 %v0_11220, i32* %v3_11220, align 4
  %v0_11224 = load i32, i32* %ip.global-to-local, align 4
  %v1_11224 = load i32, i32* %r3.global-to-local, align 4
  %v2_11224 = add i32 %v1_11224, 12
  %v3_11224 = inttoptr i32 %v2_11224 to i32*
  store i32 %v0_11224, i32* %v3_11224, align 4
  %v0_11228 = load i32, i32* %ip.global-to-local, align 4
  %v1_11228 = load i32, i32* %r3.global-to-local, align 4
  %v2_11228 = add i32 %v1_11228, 8
  %v3_11228 = inttoptr i32 %v2_11228 to i32*
  store i32 %v0_11228, i32* %v3_11228, align 4
  br label %dec_label_pc_11950

dec_label_pc_11230:                               ; preds = %dec_label_pc_111f0, %dec_label_pc_111e4, %dec_label_pc_111dc, %dec_label_pc_111c8
  %v9_11230 = icmp eq i32 %v1_111d0, %v0_111cc
  %v2_11234 = add i32 %v3_111d4, 8
  %v3_11234 = inttoptr i32 %v2_11234 to i32*
  store i32 %v0_11234, i32* %v3_11234, align 4
  %v0_11238 = load i32, i32* %ip.global-to-local, align 4
  %v1_11238 = load i32, i32* %r5.global-to-local, align 4
  %v2_11238 = add i32 %v1_11238, 12
  %v3_11238 = inttoptr i32 %v2_11238 to i32*
  store i32 %v0_11238, i32* %v3_11238, align 4
  br i1 %v9_11230, label %dec_label_pc_11390.loopexit, label %dec_label_pc_1124c

dec_label_pc_1124c:                               ; preds = %dec_label_pc_11230
  %v0_1124c = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_1124c, 255
  br i1 %tmp205, label %dec_label_pc_11270, label %dec_label_pc_11254

dec_label_pc_11254:                               ; preds = %dec_label_pc_1124c
  store i32 122896, i32* %r2.global-to-local, align 4
  %v1_11258 = load i32, i32* %r8.global-to-local, align 4
  %v2_11258 = add i32 %v1_11258, 122896
  %v3_11258 = inttoptr i32 %v2_11258 to i32*
  %v4_11258 = load i32, i32* %v3_11258, align 4
  %v3_1125c = udiv i32 %v0_1124c, 8
  store i32 %v3_1125c, i32* %r0.global-to-local, align 4
  %v4_11260 = mul nuw i32 %v3_1125c, 8
  %v5_11260 = add i32 %v4_11258, %v4_11260
  store i32 %v5_11260, i32* %r3.global-to-local, align 4
  %v1_11264 = add i32 %v5_11260, 44
  store i32 %v1_11264, i32* %ip.global-to-local, align 4
  %v1_11268 = add i32 %v5_11260, 52
  %v2_11268 = inttoptr i32 %v1_11268 to i32*
  %v3_11268 = load i32, i32* %v2_11268, align 4
  store i32 %v3_11268, i32* @lr, align 4
  br label %dec_label_pc_112c8

dec_label_pc_11270:                               ; preds = %dec_label_pc_1124c
  store i32 %v0_1124c, i32* %r0.global-to-local, align 4
  %v1_11274 = call i32 @function_11000(i32 %v0_1124c)
  store i32 %v1_11274, i32* %r0.global-to-local, align 4
  store i32 122896, i32* %ip.global-to-local, align 4
  %v1_1127c = load i32, i32* %r8.global-to-local, align 4
  %v2_1127c = add i32 %v1_1127c, 122896
  %v3_1127c = inttoptr i32 %v2_1127c to i32*
  %v4_1127c = load i32, i32* %v3_1127c, align 4
  %v4_11280 = mul i32 %v1_11274, 8
  %v5_11280 = add i32 %v4_1127c, %v4_11280
  store i32 %v5_11280, i32* %r3.global-to-local, align 4
  %v1_11284 = add i32 %v5_11280, 44
  store i32 %v1_11284, i32* %ip.global-to-local, align 4
  %v1_11288 = add i32 %v5_11280, 52
  %v2_11288 = inttoptr i32 %v1_11288 to i32*
  %v3_11288 = load i32, i32* %v2_11288, align 4
  store i32 %v3_11288, i32* @lr, align 4
  %v9_1128c = icmp eq i32 %v3_11288, %v1_11284
  br i1 %v9_1128c, label %dec_label_pc_112c8, label %dec_label_pc_11294

dec_label_pc_11294:                               ; preds = %dec_label_pc_11270
  %v1_11294 = add i32 %v5_11280, 56
  %v2_11294 = inttoptr i32 %v1_11294 to i32*
  %v3_11294 = load i32, i32* %v2_11294, align 4
  store i32 %v3_11294, i32* %r1.global-to-local, align 4
  %v1_11298 = add i32 %v3_11294, 4
  %v2_11298 = inttoptr i32 %v1_11298 to i32*
  %v3_11298 = load i32, i32* %v2_11298, align 4
  store i32 %v3_11298, i32* %r3.global-to-local, align 4
  %v0_1129c = load i32, i32* %r4.global-to-local, align 4
  %v3_1129c = icmp ult i32 %v0_1129c, %v3_11298
  br i1 %v3_1129c, label %.thread, label %dec_label_pc_112b8.preheader

.thread:                                          ; preds = %dec_label_pc_11294
  store i32 %v1_11284, i32* @lr, align 4
  store i32 %v3_11294, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_112c8

dec_label_pc_112b8.preheader:                     ; preds = %dec_label_pc_11294
  %v2_112a4 = or i32 %v0_1129c, 1
  store i32 %v2_112a4, i32* %r2.global-to-local, align 4
  %v1_112b8179 = add i32 %v3_11288, 4
  %v2_112b8180 = inttoptr i32 %v1_112b8179 to i32*
  %v3_112b8181 = load i32, i32* %v2_112b8180, align 4
  store i32 %v3_112b8181, i32* %r3.global-to-local, align 4
  %v3_112bc183 = icmp ult i32 %v2_112a4, %v3_112b8181
  br i1 %v3_112bc183, label %dec_label_pc_112b4, label %dec_label_pc_112c4

dec_label_pc_112b4:                               ; preds = %dec_label_pc_112b8.preheader, %dec_label_pc_112b4
  %v0_112c4184 = phi i32 [ %v3_112b4, %dec_label_pc_112b4 ], [ %v3_11288, %dec_label_pc_112b8.preheader ]
  %v1_112b4 = add i32 %v0_112c4184, 8
  %v2_112b4 = inttoptr i32 %v1_112b4 to i32*
  %v3_112b4 = load i32, i32* %v2_112b4, align 4
  store i32 %v3_112b4, i32* @lr, align 4
  %v1_112b8 = add i32 %v3_112b4, 4
  %v2_112b8 = inttoptr i32 %v1_112b8 to i32*
  %v3_112b8 = load i32, i32* %v2_112b8, align 4
  store i32 %v3_112b8, i32* %r3.global-to-local, align 4
  %v3_112bc = icmp ult i32 %v2_112a4, %v3_112b8
  br i1 %v3_112bc, label %dec_label_pc_112b4, label %dec_label_pc_112c4

dec_label_pc_112c4:                               ; preds = %dec_label_pc_112b4, %dec_label_pc_112b8.preheader
  %v0_112c4.lcssa = phi i32 [ %v3_11288, %dec_label_pc_112b8.preheader ], [ %v3_112b4, %dec_label_pc_112b4 ]
  %v1_112c4 = add i32 %v0_112c4.lcssa, 12
  %v2_112c4 = inttoptr i32 %v1_112c4 to i32*
  %v3_112c4 = load i32, i32* %v2_112c4, align 4
  store i32 %v3_112c4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_112c8

dec_label_pc_112c8:                               ; preds = %.thread, %dec_label_pc_11270, %dec_label_pc_11254, %dec_label_pc_112c4
  %v0_112e8 = phi i32 [ %v1_11284, %dec_label_pc_11270 ], [ %v1_11264, %dec_label_pc_11254 ], [ %v3_112c4, %dec_label_pc_112c4 ], [ %v3_11294, %.thread ]
  %v0_112dc = phi i32 [ %v1_11274, %dec_label_pc_11270 ], [ %v3_1125c, %dec_label_pc_11254 ], [ %v1_11274, %dec_label_pc_112c4 ], [ %v1_11274, %.thread ]
  %v1_112cc = phi i32 [ %v1_1127c, %dec_label_pc_11270 ], [ %v1_11258, %dec_label_pc_11254 ], [ %v1_1127c, %dec_label_pc_112c4 ], [ %v1_1127c, %.thread ]
  store i32 122896, i32* %r2.global-to-local, align 4
  %v2_112cc = add i32 %v1_112cc, 122896
  %v3_112cc = inttoptr i32 %v2_112cc to i32*
  %v4_112cc = load i32, i32* %v3_112cc, align 4
  %v3_112d0 = sdiv i32 %v0_112dc, 32
  store i32 %v3_112d0, i32* %r3.global-to-local, align 4
  %v4_112d4 = mul nsw i32 %v3_112d0, 4
  %v5_112d4 = add i32 %v4_112cc, %v4_112d4
  store i32 %v5_112d4, i32* %r1.global-to-local, align 4
  %v1_112d8 = add i32 %v5_112d4, 820
  %v2_112d8 = inttoptr i32 %v1_112d8 to i32*
  %v3_112d8 = load i32, i32* %v2_112d8, align 4
  %v1_112dc = urem i32 %v0_112dc, 32
  store i32 %v1_112dc, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_112e4 = shl i32 1, %v1_112dc
  %v8_112e4 = or i32 %v3_112d8, %v7_112e4
  store i32 %v8_112e4, i32* %r3.global-to-local, align 4
  %v1_112e8 = load i32, i32* @r6, align 4
  %v2_112e8 = add i32 %v1_112e8, 12
  %v3_112e8 = inttoptr i32 %v2_112e8 to i32*
  store i32 %v0_112e8, i32* %v3_112e8, align 4
  %v0_112ec = load i32, i32* @lr, align 4
  %v1_112ec = load i32, i32* @r6, align 4
  %v2_112ec = add i32 %v1_112ec, 8
  %v3_112ec = inttoptr i32 %v2_112ec to i32*
  store i32 %v0_112ec, i32* %v3_112ec, align 4
  %v0_112f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_112f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_112f0 = add i32 %v1_112f0, 820
  %v3_112f0 = inttoptr i32 %v2_112f0 to i32*
  store i32 %v0_112f0, i32* %v3_112f0, align 4
  %v0_112f4 = load i32, i32* @r6, align 4
  %v1_112f4 = load i32, i32* @lr, align 4
  %v2_112f4 = add i32 %v1_112f4, 12
  %v3_112f4 = inttoptr i32 %v2_112f4 to i32*
  store i32 %v0_112f4, i32* %v3_112f4, align 4
  %v0_112f8 = load i32, i32* @r6, align 4
  %v1_112f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_112f8 = add i32 %v1_112f8, 8
  %v3_112f8 = inttoptr i32 %v2_112f8 to i32*
  store i32 %v0_112f8, i32* %v3_112f8, align 4
  %v0_11314.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11314

dec_label_pc_11300:                               ; preds = %dec_label_pc_111a0, %dec_label_pc_11158, %dec_label_pc_111b4
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_11308 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_11308, i32* @sb, align 4
  %v0_1130c = load i32, i32* @sl, align 4
  %v1_1130c = add i32 %v0_1130c, 16
  store i32 %v1_1130c, i32* @fp, align 4
  %v1_11310 = add i32 %v4_11308, 52
  store i32 %v1_11310, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11314

dec_label_pc_11314:                               ; preds = %dec_label_pc_112c8, %dec_label_pc_11300
  %v0_11234 = phi i32 [ %v0_11314.pre, %dec_label_pc_112c8 ], [ %v1_11310, %dec_label_pc_11300 ]
  %v1_11314 = add i32 %v0_11234, 12
  %v2_11314 = inttoptr i32 %v1_11314 to i32*
  %v3_11314 = load i32, i32* %v2_11314, align 4
  store i32 %v3_11314, i32* @r6, align 4
  %v9_11318 = icmp eq i32 %v3_11314, %v0_11234
  br i1 %v9_11318, label %dec_label_pc_11320, label %dec_label_pc_111c8

dec_label_pc_11320:                               ; preds = %dec_label_pc_11314
  %v0_11320 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_11320, 256
  %v0_113d8.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_11320.dec_label_pc_113d8_crit_edge, label %dec_label_pc_11328

dec_label_pc_11320.dec_label_pc_113d8_crit_edge:  ; preds = %dec_label_pc_11320
  %.pre200 = mul i32 %v0_113d8.pre, 8
  br label %dec_label_pc_113d8

dec_label_pc_11328:                               ; preds = %dec_label_pc_11320
  %v4_11328 = mul i32 %v0_113d8.pre, 8
  %v5_11328 = add i32 %v4_11328, %v0_11234
  store i32 %v5_11328, i32* %r3.global-to-local, align 4
  %v1_1132c = add i32 %v5_11328, -8
  store i32 %v1_1132c, i32* %r1.global-to-local, align 4
  %v1_11330 = add i32 %v5_11328, 4
  %v2_11330 = inttoptr i32 %v1_11330 to i32*
  %storemerge.pre = load i32, i32* %v2_11330, align 4
  br label %dec_label_pc_113d0

dec_label_pc_11338:                               ; preds = %dec_label_pc_113d0
  %v1_11338 = add i32 %v1_11360, 4
  %v2_11338 = inttoptr i32 %v1_11338 to i32*
  %v3_11338 = load i32, i32* %v2_11338, align 4
  store i32 %v3_11338, i32* %r3.global-to-local, align 4
  %v1_1133c = and i32 %v3_11338, -4
  store i32 %v1_1133c, i32* %r2.global-to-local, align 4
  %v3_11340 = icmp ult i32 %v1_1133c, %v0_11320
  %v1_11344 = add i32 %v1_11360, 12
  %v2_11344 = inttoptr i32 %v1_11344 to i32*
  %v3_11344 = load i32, i32* %v2_11344, align 4
  store i32 %v3_11344, i32* %r0.global-to-local, align 4
  br i1 %v3_11340, label %dec_label_pc_113d0, label %dec_label_pc_1134c

dec_label_pc_1134c:                               ; preds = %dec_label_pc_11338
  %v1_1134c = add i32 %v1_11360, 8
  %v2_1134c = inttoptr i32 %v1_1134c to i32*
  %v3_1134c = load i32, i32* %v2_1134c, align 4
  store i32 %v3_1134c, i32* %r1.global-to-local, align 4
  %v1_11350 = add i32 %v3_1134c, 12
  %v2_11350 = inttoptr i32 %v1_11350 to i32*
  %v3_11350 = load i32, i32* %v2_11350, align 4
  store i32 %v3_11350, i32* %r3.global-to-local, align 4
  %v9_11354 = icmp eq i32 %v3_11350, %v1_11360
  br i1 %v9_11354, label %dec_label_pc_1135c, label %dec_label_pc_11368

dec_label_pc_1135c:                               ; preds = %dec_label_pc_1134c
  %v1_1135c = add i32 %v3_11344, 8
  %v2_1135c = inttoptr i32 %v1_1135c to i32*
  %v3_1135c = load i32, i32* %v2_1135c, align 4
  store i32 %v3_1135c, i32* %r3.global-to-local, align 4
  %v9_11360 = icmp eq i32 %v3_1135c, %v1_11360
  br i1 %v9_11360, label %dec_label_pc_1136c, label %dec_label_pc_11368

dec_label_pc_11368:                               ; preds = %dec_label_pc_1134c, %dec_label_pc_1135c
  %v0_11368 = call i32 @function_12360()
  store i32 %v0_11368, i32* %r0.global-to-local, align 4
  %v0_1136c.pre = load i32, i32* @sl, align 4
  %v1_1136c.pre = load i32, i32* @r2, align 4
  %v0_11374.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1136c

dec_label_pc_1136c:                               ; preds = %dec_label_pc_1135c, %dec_label_pc_11368
  %v1_11374 = phi i32 [ %v3_11344, %dec_label_pc_1135c ], [ %v0_11368, %dec_label_pc_11368 ]
  %v0_11374 = phi i32 [ %v3_1134c, %dec_label_pc_1135c ], [ %v0_11374.pre, %dec_label_pc_11368 ]
  %v1_1136c = phi i32 [ %v1_1133c, %dec_label_pc_1135c ], [ %v1_1136c.pre, %dec_label_pc_11368 ]
  %v0_1136c = phi i32 [ %v0_11320, %dec_label_pc_1135c ], [ %v0_1136c.pre, %dec_label_pc_11368 ]
  %v2_1136c = sub i32 %v1_1136c, %v0_1136c
  store i32 %v2_1136c, i32* %lr.global-to-local, align 4
  %v2_11374 = add i32 %v1_11374, 8
  %v3_11374 = inttoptr i32 %v2_11374 to i32*
  store i32 %v0_11374, i32* %v3_11374, align 4
  %v0_11378 = load i32, i32* %r0.global-to-local, align 4
  %v1_11378 = load i32, i32* %r1.global-to-local, align 4
  %v2_11378 = add i32 %v1_11378, 12
  %v3_11378 = inttoptr i32 %v2_11378 to i32*
  store i32 %v0_11378, i32* %v3_11378, align 4
  %v0_1137c = load i32, i32* %ip.global-to-local, align 4
  %v1_1137c = add i32 %v0_1137c, 8
  store i32 %v1_1137c, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_1136c, 15
  br i1 %tmp207, label %dec_label_pc_1139c, label %dec_label_pc_11384

dec_label_pc_11384:                               ; preds = %dec_label_pc_1136c
  %v1_11384 = load i32, i32* %r2.global-to-local, align 4
  %v2_11384 = add i32 %v1_11384, %v0_1137c
  store i32 %v2_11384, i32* %r2.global-to-local, align 4
  %v1_11388 = add i32 %v2_11384, 4
  %v2_11388 = inttoptr i32 %v1_11388 to i32*
  %v3_11388 = load i32, i32* %v2_11388, align 4
  store i32 %v3_11388, i32* %r3.global-to-local, align 4
  store i32 %v1_1137c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11390

dec_label_pc_11390.loopexit:                      ; preds = %dec_label_pc_11230
  %v1_1123c = load i32, i32* @r6, align 4
  %v2_1123c = load i32, i32* @sl, align 4
  %v3_1123c = add i32 %v2_1123c, %v1_1123c
  store i32 %v3_1123c, i32* %r2.global-to-local, align 4
  %v2_11240 = add i32 %v3_1123c, 4
  %v3_11240 = inttoptr i32 %v2_11240 to i32*
  %v4_11240 = load i32, i32* %v3_11240, align 4
  store i32 %v4_11240, i32* %r3.global-to-local, align 4
  %v2_11244 = add i32 %v1_1123c, 8
  store i32 %v2_11244, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11390

dec_label_pc_11390:                               ; preds = %.dec_label_pc_11390_crit_edge, %dec_label_pc_11390.loopexit, %dec_label_pc_11384
  %v1_11394 = phi i32 [ %v4_114b8, %.dec_label_pc_11390_crit_edge ], [ %v3_1123c, %dec_label_pc_11390.loopexit ], [ %v2_11384, %dec_label_pc_11384 ]
  %v0_11390 = phi i32 [ %v7_114b8, %.dec_label_pc_11390_crit_edge ], [ %v4_11240, %dec_label_pc_11390.loopexit ], [ %v3_11388, %dec_label_pc_11384 ]
  %v1_11390 = or i32 %v0_11390, 1
  store i32 %v1_11390, i32* %r3.global-to-local, align 4
  %v2_11394 = add i32 %v1_11394, 4
  %v3_11394 = inttoptr i32 %v2_11394 to i32*
  store i32 %v1_11390, i32* %v3_11394, align 4
  br label %dec_label_pc_11950

dec_label_pc_1139c:                               ; preds = %dec_label_pc_1136c
  %v1_1139c = load i32, i32* @sl, align 4
  %v2_1139c = add i32 %v1_1139c, %v0_1137c
  store i32 %v2_1139c, i32* %r2.global-to-local, align 4
  %v1_113a0 = or i32 %v1_1139c, 1
  store i32 %v1_113a0, i32* %r3.global-to-local, align 4
  %v0_113a4 = load i32, i32* %lr.global-to-local, align 4
  %v1_113a4 = or i32 %v0_113a4, 1
  store i32 %v1_113a4, i32* %r1.global-to-local, align 4
  store i32 %v1_1137c, i32* %r4.global-to-local, align 4
  %v2_113ac = add i32 %v0_1137c, 4
  %v3_113ac = inttoptr i32 %v2_113ac to i32*
  store i32 %v1_113a0, i32* %v3_113ac, align 4
  %v0_113b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_113b0 = load i32, i32* @r6, align 4
  %v2_113b0 = add i32 %v1_113b0, 8
  %v3_113b0 = inttoptr i32 %v2_113b0 to i32*
  store i32 %v0_113b0, i32* %v3_113b0, align 4
  %v0_113b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_113b4 = load i32, i32* @r6, align 4
  %v2_113b4 = add i32 %v1_113b4, 12
  %v3_113b4 = inttoptr i32 %v2_113b4 to i32*
  store i32 %v0_113b4, i32* %v3_113b4, align 4
  %v0_113b8 = load i32, i32* %lr.global-to-local, align 4
  %v1_113b8 = load i32, i32* %r2.global-to-local, align 4
  %v3_113b8 = add i32 %v1_113b8, %v0_113b8
  %v4_113b8 = inttoptr i32 %v3_113b8 to i32*
  store i32 %v0_113b8, i32* %v4_113b8, align 4
  %v0_113bc = load i32, i32* %r1.global-to-local, align 4
  %v1_113bc = load i32, i32* %r2.global-to-local, align 4
  %v2_113bc = add i32 %v1_113bc, 4
  %v3_113bc = inttoptr i32 %v2_113bc to i32*
  store i32 %v0_113bc, i32* %v3_113bc, align 4
  %v0_113c0 = load i32, i32* @r6, align 4
  %v1_113c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_113c0 = add i32 %v1_113c0, 12
  %v3_113c0 = inttoptr i32 %v2_113c0 to i32*
  store i32 %v0_113c0, i32* %v3_113c0, align 4
  %v0_113c4 = load i32, i32* @r6, align 4
  %v1_113c4 = load i32, i32* %r2.global-to-local, align 4
  %v2_113c4 = add i32 %v1_113c4, 8
  %v3_113c4 = inttoptr i32 %v2_113c4 to i32*
  store i32 %v0_113c4, i32* %v3_113c4, align 4
  br label %dec_label_pc_11950

dec_label_pc_113d0:                               ; preds = %dec_label_pc_11338, %dec_label_pc_11328
  %v1_11360 = phi i32 [ %storemerge.pre, %dec_label_pc_11328 ], [ %v3_11344, %dec_label_pc_11338 ]
  store i32 %v1_11360, i32* %ip.global-to-local, align 4
  %v9_113d0 = icmp eq i32 %v1_11360, %v1_1132c
  br i1 %v9_113d0, label %dec_label_pc_113d8.loopexit, label %dec_label_pc_11338

dec_label_pc_113d8.loopexit:                      ; preds = %dec_label_pc_113d0
  br label %dec_label_pc_113d8

dec_label_pc_113d8:                               ; preds = %dec_label_pc_11320.dec_label_pc_113d8_crit_edge, %dec_label_pc_113d8.loopexit
  %v4_11408.pre-phi = phi i32 [ %.pre200, %dec_label_pc_11320.dec_label_pc_113d8_crit_edge ], [ %v4_11328, %dec_label_pc_113d8.loopexit ]
  %v1_113d8 = add i32 %v0_113d8.pre, 1
  store i32 %v1_113d8, i32* %r2.global-to-local, align 4
  %v1_113dc = urem i32 %v1_113d8, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 122896, i32* %r0.global-to-local, align 4
  %v6_113e8 = shl i32 1, %v1_113dc
  store i32 %v6_113e8, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_113f0 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_113f0, i32* %r3.global-to-local, align 4
  %v3_113f4 = udiv i32 %v1_113d8, 32
  store i32 %v3_113f4, i32* @r5, align 4
  %v4_113f8 = mul nuw nsw i32 %v3_113f4, 4
  %v5_113f8 = add i32 %v4_113f0, %v4_113f8
  store i32 %v5_113f8, i32* %r2.global-to-local, align 4
  %v1_113fc = add i32 %v5_113f8, 820
  %v2_113fc = inttoptr i32 %v1_113fc to i32*
  %v3_113fc = load i32, i32* %v2_113fc, align 4
  store i32 %v3_113fc, i32* @r4, align 4
  %v1_11400 = add i32 %v4_113f0, 52
  store i32 %v1_11400, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_11408 = add i32 %v1_11400, %v4_11408.pre-phi
  store i32 %v5_11408, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1140c

dec_label_pc_1140c:                               ; preds = %dec_label_pc_11474, %dec_label_pc_113d8
  %v1_11414 = phi i32 [ %v1_11414.pre, %dec_label_pc_11474 ], [ %v3_113fc, %dec_label_pc_113d8 ]
  %v0_11414 = phi i32 [ %v0_1140c.pre, %dec_label_pc_11474 ], [ %v6_113e8, %dec_label_pc_113d8 ]
  %v1_1140c = sub i32 1, %v0_11414
  %v2_1140c = icmp ult i32 %v0_11414, 2
  %v1_1140c. = select i1 %v2_1140c, i32 %v1_1140c, i32 0
  store i32 %v1_1140c., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_11414, %v1_11414
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_1140c
  %v5_11418 = or i32 %v1_1140c., 1
  store i32 %v5_11418, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11424.preheader

bb142:                                            ; preds = %dec_label_pc_1140c
  %v2_1141c = icmp eq i32 %v1_1140c., 0
  br i1 %v2_1141c, label %.dec_label_pc_11460.preheader_crit_edge, label %dec_label_pc_11424.preheader

.dec_label_pc_11460.preheader_crit_edge:          ; preds = %bb142
  %v0_1145854.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11460.preheader

dec_label_pc_11424.preheader:                     ; preds = %bb142, %.thread12
  %v0_11424.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11424

dec_label_pc_11424:                               ; preds = %dec_label_pc_11424.preheader, %dec_label_pc_11430
  %v0_11424 = phi i32 [ %v0_11424.pre, %dec_label_pc_11424.preheader ], [ %v1_11424, %dec_label_pc_11430 ]
  %v1_11424 = add i32 %v0_11424, 1
  store i32 %v1_11424, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_11424, 2
  br i1 %tmp208, label %dec_label_pc_11504.loopexit, label %dec_label_pc_11430

dec_label_pc_11430:                               ; preds = %dec_label_pc_11424
  store i32 122896, i32* %r3.global-to-local, align 4
  %v1_11434 = load i32, i32* @r8, align 4
  %v2_11434 = add i32 %v1_11434, 122896
  %v3_11434 = inttoptr i32 %v2_11434 to i32*
  %v4_11434 = load i32, i32* %v3_11434, align 4
  store i32 %v4_11434, i32* %r2.global-to-local, align 4
  %v4_11438 = mul i32 %v1_11424, 4
  %v5_11438 = add i32 %v4_11434, %v4_11438
  store i32 %v5_11438, i32* %r3.global-to-local, align 4
  %v1_1143c = add i32 %v5_11438, 820
  %v2_1143c = inttoptr i32 %v1_1143c to i32*
  %v3_1143c = load i32, i32* %v2_1143c, align 4
  store i32 %v3_1143c, i32* @r4, align 4
  %v2_11440 = icmp eq i32 %v3_1143c, 0
  br i1 %v2_11440, label %dec_label_pc_11424, label %dec_label_pc_11448

dec_label_pc_11448:                               ; preds = %dec_label_pc_11430
  %v4_11448 = mul i32 %v1_11424, 256
  %v5_11448 = add i32 %v4_11434, %v4_11448
  store i32 %v5_11448, i32* %r3.global-to-local, align 4
  %v1_1144c = add i32 %v5_11448, 44
  store i32 %v1_1144c, i32* %r0.global-to-local, align 4
  %v0_11450 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11450, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11460.preheader

dec_label_pc_11460.preheader:                     ; preds = %.dec_label_pc_11460.preheader_crit_edge, %dec_label_pc_11448
  %v0_1145854 = phi i32 [ %v1_1144c, %dec_label_pc_11448 ], [ %v0_1145854.pre, %.dec_label_pc_11460.preheader_crit_edge ]
  %v0_1147c = phi i32 [ %v3_1143c, %dec_label_pc_11448 ], [ %v1_11414, %.dec_label_pc_11460.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_11450, %dec_label_pc_11448 ], [ %v0_11414, %.dec_label_pc_11460.preheader_crit_edge ]
  %v2_1146051 = and i32 %ip.promoted, %v0_1147c
  %v4_1146053 = icmp eq i32 %v2_1146051, 0
  br i1 %v4_1146053, label %dec_label_pc_11458, label %dec_label_pc_11468

dec_label_pc_11458:                               ; preds = %dec_label_pc_11460.preheader, %dec_label_pc_11458
  %v2_1145c56 = phi i32 [ %v2_1145c, %dec_label_pc_11458 ], [ %ip.promoted, %dec_label_pc_11460.preheader ]
  %v0_1145855 = phi i32 [ %v1_11458, %dec_label_pc_11458 ], [ %v0_1145854, %dec_label_pc_11460.preheader ]
  %v1_11458 = add i32 %v0_1145855, 8
  %v2_1145c = mul i32 %v2_1145c56, 2
  %v2_11460 = and i32 %v2_1145c, %v0_1147c
  %v4_11460 = icmp eq i32 %v2_11460, 0
  br i1 %v4_11460, label %dec_label_pc_11458, label %dec_label_pc_11460.dec_label_pc_11468_crit_edge

dec_label_pc_11460.dec_label_pc_11468_crit_edge:  ; preds = %dec_label_pc_11458
  store i32 %v1_11458, i32* %r0.global-to-local, align 4
  store i32 %v2_1145c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11468

dec_label_pc_11468:                               ; preds = %dec_label_pc_11460.dec_label_pc_11468_crit_edge, %dec_label_pc_11460.preheader
  %v0_11488 = phi i32 [ %v2_1145c, %dec_label_pc_11460.dec_label_pc_11468_crit_edge ], [ %ip.promoted, %dec_label_pc_11460.preheader ]
  %v0_114ac = phi i32 [ %v1_11458, %dec_label_pc_11460.dec_label_pc_11468_crit_edge ], [ %v0_1145854, %dec_label_pc_11460.preheader ]
  %v1_11468 = add i32 %v0_114ac, 12
  %v2_11468 = inttoptr i32 %v1_11468 to i32*
  %v3_11468 = load i32, i32* %v2_11468, align 4
  store i32 %v3_11468, i32* @lr, align 4
  %v9_1146c = icmp eq i32 %v3_11468, %v0_114ac
  br i1 %v9_1146c, label %dec_label_pc_11474, label %dec_label_pc_11494

dec_label_pc_11474:                               ; preds = %dec_label_pc_11468
  store i32 122896, i32* %r0.global-to-local, align 4
  %v1_11478 = load i32, i32* @r8, align 4
  %v2_11478 = add i32 %v1_11478, 122896
  %v3_11478 = inttoptr i32 %v2_11478 to i32*
  %v4_11478 = load i32, i32* %v3_11478, align 4
  %v2_1147c = sub i32 -1, %v0_11488
  %v3_1147c = and i32 %v0_1147c, %v2_1147c
  store i32 %v3_1147c, i32* @r4, align 4
  %v1_11480 = load i32, i32* @r5, align 4
  %v4_11480 = mul i32 %v1_11480, 4
  %v5_11480 = add i32 %v4_11480, %v4_11478
  store i32 %v5_11480, i32* %r3.global-to-local, align 4
  %v1_11484 = add i32 %v0_114ac, 8
  store i32 %v1_11484, i32* %r0.global-to-local, align 4
  %v2_11488 = mul i32 %v0_11488, 2
  store i32 %v2_11488, i32* %ip.global-to-local, align 4
  %v2_1148c = add i32 %v5_11480, 820
  %v3_1148c = inttoptr i32 %v2_1148c to i32*
  store i32 %v3_1147c, i32* %v3_1148c, align 4
  %v0_1140c.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_11414.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1140c

dec_label_pc_11494:                               ; preds = %dec_label_pc_11468
  %v1_11494 = add i32 %v3_11468, 4
  %v2_11494 = inttoptr i32 %v1_11494 to i32*
  %v3_11494 = load i32, i32* %v2_11494, align 4
  store i32 %v3_11494, i32* %r3.global-to-local, align 4
  %v1_11498 = and i32 %v3_11494, -4
  store i32 %v1_11498, i32* %r2.global-to-local, align 4
  %v0_1149c = load i32, i32* @sl, align 4
  %v2_1149c = sub i32 %v1_11498, %v0_1149c
  store i32 %v2_1149c, i32* %ip.global-to-local, align 4
  %v1_114a0 = add i32 %v3_11468, 12
  %v2_114a0 = inttoptr i32 %v1_114a0 to i32*
  %v3_114a0 = load i32, i32* %v2_114a0, align 4
  store i32 %v3_114a0, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_1149c, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_11494
  %v6_114a8 = add i32 %v1_11498, %v3_11468
  store i32 %v6_114a8, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_11494, %bb143
  %v2_114ac = add i32 %v3_114a0, 8
  %v3_114ac = inttoptr i32 %v2_114ac to i32*
  store i32 %v0_114ac, i32* %v3_114ac, align 4
  %v0_114b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_114b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_114b0 = add i32 %v1_114b0, 12
  %v3_114b0 = inttoptr i32 %v2_114b0 to i32*
  store i32 %v0_114b0, i32* %v3_114b0, align 4
  %v4_114b4 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_11390_crit_edge, label %dec_label_pc_114c0

.dec_label_pc_11390_crit_edge:                    ; preds = %bb144
  %v5_114b4 = add i32 %v4_114b4, 8
  store i32 %v5_114b4, i32* %r4.global-to-local, align 4
  %v4_114b8 = load i32, i32* %r2.global-to-local, align 4
  %v5_114b8 = add i32 %v4_114b8, 4
  %v6_114b8 = inttoptr i32 %v5_114b8 to i32*
  %v7_114b8 = load i32, i32* %v6_114b8, align 4
  store i32 %v7_114b8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11390

dec_label_pc_114c0:                               ; preds = %bb144
  %v1_114c0 = load i32, i32* @sl, align 4
  %v2_114c0 = add i32 %v1_114c0, %v4_114b4
  store i32 %v2_114c0, i32* %r1.global-to-local, align 4
  %v1_114c8 = load i32, i32* @r6, align 4
  %v2_114c8 = add i32 %v1_114c8, 8
  %v3_114c8 = inttoptr i32 %v2_114c8 to i32*
  store i32 %v2_114c0, i32* %v3_114c8, align 4
  %v0_114cc = load i32, i32* %r1.global-to-local, align 4
  %v1_114cc = load i32, i32* @r6, align 4
  %v2_114cc = add i32 %v1_114cc, 12
  %v3_114cc = inttoptr i32 %v2_114cc to i32*
  store i32 %v0_114cc, i32* %v3_114cc, align 4
  %v0_114d0 = load i32, i32* @r6, align 4
  %v1_114d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_114d0 = add i32 %v1_114d0, 8
  %v3_114d0 = inttoptr i32 %v2_114d0 to i32*
  store i32 %v0_114d0, i32* %v3_114d0, align 4
  %v0_114d4 = load i32, i32* @r6, align 4
  %v1_114d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_114d4 = add i32 %v1_114d4, 12
  %v3_114d4 = inttoptr i32 %v2_114d4 to i32*
  store i32 %v0_114d4, i32* %v3_114d4, align 4
  %tmp210 = icmp ult i32 %v1_114c0, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_114c0
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v8_114e0 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v8_114e0, i32* %r3.global-to-local, align 4
  %v4_114e4 = load i32, i32* %r1.global-to-local, align 4
  %v6_114e4 = add i32 %v8_114e0, 48
  %v7_114e4 = inttoptr i32 %v6_114e4 to i32*
  store i32 %v4_114e4, i32* %v7_114e4, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_114c0, %bb145
  %v0_114e8 = load i32, i32* @sl, align 4
  %v1_114e8 = or i32 %v0_114e8, 1
  store i32 %v1_114e8, i32* %r2.global-to-local, align 4
  %v0_114ec = load i32, i32* %ip.global-to-local, align 4
  %v1_114ec = or i32 %v0_114ec, 1
  store i32 %v1_114ec, i32* %r3.global-to-local, align 4
  %v0_114f0 = load i32, i32* @lr, align 4
  %v1_114f0 = add i32 %v0_114f0, 8
  store i32 %v1_114f0, i32* %r4.global-to-local, align 4
  %v2_114f4 = add i32 %v0_114f0, 4
  %v3_114f4 = inttoptr i32 %v2_114f4 to i32*
  store i32 %v1_114e8, i32* %v3_114f4, align 4
  %v0_114f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_114f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_114f8 = add i32 %v1_114f8, %v0_114f8
  %v4_114f8 = inttoptr i32 %v3_114f8 to i32*
  store i32 %v0_114f8, i32* %v4_114f8, align 4
  %v0_114fc = load i32, i32* %r3.global-to-local, align 4
  %v1_114fc = load i32, i32* %r1.global-to-local, align 4
  %v2_114fc = add i32 %v1_114fc, 4
  %v3_114fc = inttoptr i32 %v2_114fc to i32*
  store i32 %v0_114fc, i32* %v3_114fc, align 4
  br label %dec_label_pc_11950

dec_label_pc_11504.loopexit:                      ; preds = %dec_label_pc_11424
  br label %dec_label_pc_11504

dec_label_pc_11504:                               ; preds = %dec_label_pc_11504.loopexit, %dec_label_pc_11118, %dec_label_pc_11120
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %ip.global-to-local, align 4
  %v4_1150c = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_1150c, i32* @r0, align 4
  %v1_11510 = add i32 %v4_1150c, 44
  %v2_11510 = inttoptr i32 %v1_11510 to i32*
  %v3_11510 = load i32, i32* %v2_11510, align 4
  store i32 %v3_11510, i32* %ip.global-to-local, align 4
  %v1_11514 = add i32 %v3_11510, 4
  %v2_11514 = inttoptr i32 %v1_11514 to i32*
  %v3_11514 = load i32, i32* %v2_11514, align 4
  %v0_11518 = load i32, i32* @sl, align 4
  %v1_11518 = add i32 %v0_11518, 16
  store i32 %v1_11518, i32* %r1.global-to-local, align 4
  %v1_1151c = and i32 %v3_11514, -4
  store i32 %v1_1151c, i32* %r3.global-to-local, align 4
  %v3_11520 = icmp ult i32 %v1_1151c, %v1_11518
  br i1 %v3_11520, label %dec_label_pc_11550, label %dec_label_pc_1152c

dec_label_pc_1152c:                               ; preds = %dec_label_pc_11504
  %v2_1152c = sub i32 %v1_1151c, %v0_11518
  %v2_11530 = add i32 %v0_11518, %v3_11510
  store i32 %v2_11530, i32* %r1.global-to-local, align 4
  %v1_11534 = or i32 %v2_1152c, 1
  store i32 %v1_11534, i32* %r3.global-to-local, align 4
  %v1_11538 = or i32 %v0_11518, 1
  store i32 %v1_11538, i32* %r2.global-to-local, align 4
  %v1_1153c = add i32 %v3_11510, 8
  store i32 %v1_1153c, i32* %r4.global-to-local, align 4
  store i32 %v1_11538, i32* %v2_11514, align 4
  %v0_11544 = load i32, i32* %r1.global-to-local, align 4
  %v1_11544 = load i32, i32* @r0, align 4
  %v2_11544 = add i32 %v1_11544, 44
  %v3_11544 = inttoptr i32 %v2_11544 to i32*
  store i32 %v0_11544, i32* %v3_11544, align 4
  %v0_11548 = load i32, i32* %r3.global-to-local, align 4
  %v1_11548 = load i32, i32* %r1.global-to-local, align 4
  %v2_11548 = add i32 %v1_11548, 4
  %v3_11548 = inttoptr i32 %v2_11548 to i32*
  store i32 %v0_11548, i32* %v3_11548, align 4
  br label %dec_label_pc_11950

dec_label_pc_11550:                               ; preds = %dec_label_pc_11504
  %v1_11550 = inttoptr i32 %v4_1150c to i32*
  %v2_11550 = load i32, i32* %v1_11550, align 4
  store i32 %v2_11550, i32* %r3.global-to-local, align 4
  %v1_11554 = and i32 %v2_11550, 2
  store i32 %v1_11554, i32* %ip.global-to-local, align 4
  %v2_11554 = icmp eq i32 %v1_11554, 0
  %v1_11558 = add i32 %v4_1150c, 860
  %v2_11558 = inttoptr i32 %v1_11558 to i32*
  %v3_11558 = load i32, i32* %v2_11558, align 4
  store i32 %v3_11558, i32* %r1.global-to-local, align 4
  br i1 %v2_11554, label %dec_label_pc_11570, label %dec_label_pc_11560

dec_label_pc_11560:                               ; preds = %dec_label_pc_11550
  %v0_11560 = call i32 @function_11f30()
  %v0_11564 = load i32, i32* @sl, align 4
  %v1_11564 = add i32 %v0_11564, -7
  store i32 %v1_11564, i32* @r0, align 4
  %v0_11568 = call i32 @function_11078()
  store i32 %v0_11568, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1194c

dec_label_pc_11570:                               ; preds = %dec_label_pc_11550
  %v1_11570 = add i32 %v4_1150c, 844
  %v2_11570 = inttoptr i32 %v1_11570 to i32*
  %v3_11570 = load i32, i32* %v2_11570, align 4
  store i32 %v3_11570, i32* %r3.global-to-local, align 4
  %v3_11574 = icmp ult i32 %v0_11518, %v3_11570
  %v1_11578 = add i32 %v3_11558, -1
  store i32 %v1_11578, i32* %sb.global-to-local, align 4
  br i1 %v3_11574, label %dec_label_pc_1164c, label %dec_label_pc_11580

dec_label_pc_11580:                               ; preds = %dec_label_pc_11570
  %v1_11580 = add i32 %v4_1150c, 852
  %v2_11580 = inttoptr i32 %v1_11580 to i32*
  %v3_11580 = load i32, i32* %v2_11580, align 4
  store i32 %v3_11580, i32* %r2.global-to-local, align 4
  %v1_11584 = add i32 %v4_1150c, 848
  %v2_11584 = inttoptr i32 %v1_11584 to i32*
  %v3_11584 = load i32, i32* %v2_11584, align 4
  store i32 %v3_11584, i32* %r3.global-to-local, align 4
  %v6_1158c = icmp slt i32 %v3_11584, %v3_11580
  br i1 %v6_1158c, label %dec_label_pc_11590, label %dec_label_pc_1164c

dec_label_pc_11590:                               ; preds = %dec_label_pc_11580
  %v1_11590 = add i32 %v0_11518, 10
  %v2_11594 = add i32 %v1_11590, %v3_11558
  store i32 %v2_11594, i32* %r3.global-to-local, align 4
  %v2_11598 = sub i32 0, %v3_11558
  %v3_11598 = and i32 %v2_11594, %v2_11598
  store i32 %v3_11598, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_11598, %v0_11518
  br i1 %tmp211, label %dec_label_pc_115a4, label %dec_label_pc_1164c

dec_label_pc_115a4:                               ; preds = %dec_label_pc_11590
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_11598, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_115bc = call i32 @function_13164(i32 0, i32 %v3_11598, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_115bc, i32* %r0.global-to-local, align 4
  %v7_115c0 = icmp eq i32 %v6_115bc, -1
  br i1 %v7_115c0, label %dec_label_pc_115a4.dec_label_pc_1164c_crit_edge, label %dec_label_pc_115c8

dec_label_pc_115a4.dec_label_pc_1164c_crit_edge:  ; preds = %dec_label_pc_115a4
  %v1_11670.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_1164c

dec_label_pc_115c8:                               ; preds = %dec_label_pc_115a4
  %v1_115c8 = urem i32 %v6_115bc, 8
  store i32 %v1_115c8, i32* %r2.global-to-local, align 4
  %v2_115c8 = icmp eq i32 %v1_115c8, 0
  br i1 %v2_115c8, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_115c8
  %v2_115cc = sub nsw i32 8, %v1_115c8
  store i32 %v2_115cc, i32* %r3.global-to-local, align 4
  %v2_115d0 = load i32, i32* @r4, align 4
  %v3_115d0 = sub i32 %v2_115d0, %v2_115cc
  %v3_115d4 = add i32 %v2_115cc, %v6_115bc
  store i32 %v3_115d4, i32* %lr.global-to-local, align 4
  %v2_115dc = or i32 %v3_115d0, 2
  store i32 %v2_115dc, i32* %r2.global-to-local, align 4
  %v5_115e4 = inttoptr i32 %v3_115d4 to i32*
  store i32 %v2_115cc, i32* %v5_115e4, align 4
  %v1_115e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_115e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_115e8 = add i32 %v2_115e8, 4
  %v4_115e8 = inttoptr i32 %v3_115e8 to i32*
  store i32 %v1_115e8, i32* %v4_115e8, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_115c8
  store i32 %v6_115bc, i32* %lr.global-to-local, align 4
  %v1_115e047 = load i32, i32* @r4, align 4
  %v2_115e048 = or i32 %v1_115e047, 2
  store i32 %v2_115e048, i32* %r3.global-to-local, align 4
  %v3_115ec = inttoptr i32 %v6_115bc to i32*
  store i32 0, i32* %v3_115ec, align 4
  %v1_115f0 = load i32, i32* %r3.global-to-local, align 4
  %v2_115f0 = load i32, i32* %lr.global-to-local, align 4
  %v3_115f0 = add i32 %v2_115f0, 4
  %v4_115f0 = inttoptr i32 %v3_115f0 to i32*
  store i32 %v1_115f0, i32* %v4_115f0, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 122896, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_115fc = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_115fc, i32* %ip.global-to-local, align 4
  %v1_11600 = add i32 %v4_115fc, 848
  %v2_11600 = inttoptr i32 %v1_11600 to i32*
  %v3_11600 = load i32, i32* %v2_11600, align 4
  store i32 %v3_11600, i32* %r3.global-to-local, align 4
  %v1_11604 = add i32 %v4_115fc, 856
  %v2_11604 = inttoptr i32 %v1_11604 to i32*
  %v3_11604 = load i32, i32* %v2_11604, align 4
  store i32 %v3_11604, i32* %r2.global-to-local, align 4
  %v1_11608 = add i32 %v3_11600, 1
  store i32 %v1_11608, i32* %r3.global-to-local, align 4
  %v7_11610 = icmp sgt i32 %v1_11608, %v3_11604
  br i1 %v7_11610, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_11608, i32* %v2_11604, align 4
  %v0_11614.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11614.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_11614 = phi i32 [ %v4_115fc, %.thread27 ], [ %v1_11614.pre, %bb147 ]
  %v0_11614 = phi i32 [ %v1_11608, %.thread27 ], [ %v0_11614.pre, %bb147 ]
  %v2_11614 = add i32 %v1_11614, 848
  %v3_11614 = inttoptr i32 %v2_11614 to i32*
  store i32 %v0_11614, i32* %v3_11614, align 4
  %v0_11618 = load i32, i32* %ip.global-to-local, align 4
  %v1_11618 = add i32 %v0_11618, 868
  %v2_11618 = inttoptr i32 %v1_11618 to i32*
  %v3_11618 = load i32, i32* %v2_11618, align 4
  store i32 %v3_11618, i32* %r3.global-to-local, align 4
  %v1_1161c = add i32 %v0_11618, 880
  %v2_1161c = inttoptr i32 %v1_1161c to i32*
  %v3_1161c = load i32, i32* %v2_1161c, align 4
  store i32 %v3_1161c, i32* %r2.global-to-local, align 4
  %v0_11620 = load i32, i32* @r4, align 4
  %v2_11620 = add i32 %v0_11620, %v3_11618
  store i32 %v2_11620, i32* %r1.global-to-local, align 4
  %v1_11624 = add i32 %v0_11618, 872
  %v2_11624 = inttoptr i32 %v1_11624 to i32*
  %v3_11624 = load i32, i32* %v2_11624, align 4
  store i32 %v3_11624, i32* %r3.global-to-local, align 4
  %v1_1162c = add i32 %v0_11618, 884
  %v2_1162c = inttoptr i32 %v1_1162c to i32*
  %v3_1162c = load i32, i32* %v2_1162c, align 4
  store i32 %v3_1162c, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_11620, %v3_1161c
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_11620, i32* %v2_1161c, align 4
  %v0_11634.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11634.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_11634 = phi i32 [ %v0_11618, %bb148 ], [ %v1_11634.pre, %bb149 ]
  %v0_11634 = phi i32 [ %v2_11620, %bb148 ], [ %v0_11634.pre, %bb149 ]
  %v2_11634 = add i32 %v1_11634, 868
  %v3_11634 = inttoptr i32 %v2_11634 to i32*
  store i32 %v0_11634, i32* %v3_11634, align 4
  %v0_11638 = load i32, i32* %r1.global-to-local, align 4
  %v1_11638 = load i32, i32* %r3.global-to-local, align 4
  %v2_11638 = add i32 %v1_11638, %v0_11638
  store i32 %v2_11638, i32* %r1.global-to-local, align 4
  %v1_1163c = load i32, i32* %r2.global-to-local, align 4
  %v0_11640 = load i32, i32* %lr.global-to-local, align 4
  %v1_11640 = add i32 %v0_11640, 8
  store i32 %v1_11640, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_11638, %v1_1163c
  br i1 %tmp213, label %bb151, label %dec_label_pc_1194c

bb151:                                            ; preds = %bb150
  %v5_11644 = load i32, i32* %ip.global-to-local, align 4
  %v6_11644 = add i32 %v5_11644, 884
  %v7_11644 = inttoptr i32 %v6_11644 to i32*
  store i32 %v2_11638, i32* %v7_11644, align 4
  br label %dec_label_pc_1194c

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11590, %dec_label_pc_11570, %dec_label_pc_115a4.dec_label_pc_1164c_crit_edge, %dec_label_pc_11580
  %v1_11670 = phi i32 [ %v1_11670.pre, %dec_label_pc_115a4.dec_label_pc_1164c_crit_edge ], [ %v0_11518, %dec_label_pc_11580 ], [ %v0_11518, %dec_label_pc_11570 ], [ %v0_11518, %dec_label_pc_11590 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %ip.global-to-local, align 4
  %v4_11654 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_11654, i32* %r3.global-to-local, align 4
  %v1_11658 = add i32 %v4_11654, 44
  %v2_11658 = inttoptr i32 %v1_11658 to i32*
  %v3_11658 = load i32, i32* %v2_11658, align 4
  store i32 %v3_11658, i32* %r0.global-to-local, align 4
  %v1_1165c = add i32 %v4_11654, 864
  %v2_1165c = inttoptr i32 %v1_1165c to i32*
  %v3_1165c = load i32, i32* %v2_1165c, align 4
  store i32 %v3_1165c, i32* %r2.global-to-local, align 4
  %v1_11660 = add i32 %v4_11654, 840
  %v2_11660 = inttoptr i32 %v1_11660 to i32*
  %v3_11660 = load i32, i32* %v2_11660, align 4
  store i32 %v3_11660, i32* %r3.global-to-local, align 4
  %v1_11664 = add i32 %v3_11658, 4
  %v2_11664 = inttoptr i32 %v1_11664 to i32*
  %v3_11664 = load i32, i32* %v2_11664, align 4
  store i32 %v3_11664, i32* %r1.global-to-local, align 4
  %v1_1166c = urem i32 %v3_1165c, 2
  %v2_1166c = icmp eq i32 %v1_1166c, 0
  %v1_11668 = add i32 %v1_11670, 16
  %v2_11670 = add i32 %v1_11668, %v3_11660
  store i32 %v2_11670, i32* %r3.global-to-local, align 4
  %v1_11674 = and i32 %v3_11664, -4
  store i32 %v1_11674, i32* @r8, align 4
  br i1 %v2_1166c, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_1164c
  %v3_11678 = sub i32 %v2_11670, %v1_11674
  store i32 %v3_11678, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_1164c, %bb152
  %v0_1167c = phi i32 [ %v2_11670, %dec_label_pc_1164c ], [ %v3_11678, %bb152 ]
  %v1_1167c = load i32, i32* %sb.global-to-local, align 4
  %v2_1167c = add i32 %v1_1167c, %v0_1167c
  store i32 %v2_1167c, i32* %r3.global-to-local, align 4
  %v1_11680 = sub i32 -1, %v1_1167c
  store i32 %v1_11680, i32* %fp.global-to-local, align 4
  %v2_11684 = and i32 %v2_1167c, %v1_11680
  store i32 %v2_11684, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_11684, 1
  br i1 %tmp154, label %dec_label_pc_116a8, label %dec_label_pc_11694

dec_label_pc_11694:                               ; preds = %bb153
  store i32 %v2_11684, i32* %r0.global-to-local, align 4
  %v1_11698 = call i32 @function_133f0(i32 %v2_11684)
  store i32 %v1_11698, i32* %r0.global-to-local, align 4
  %v3_1169c = icmp eq i32 %v1_11698, -1
  store i32 %v1_11698, i32* @r4, align 4
  br i1 %v3_1169c, label %dec_label_pc_116a8, label %dec_label_pc_11714

dec_label_pc_116a8:                               ; preds = %dec_label_pc_11694, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_116b0 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_116b0, i32* %r6.global-to-local, align 4
  %v1_116b4 = add i32 %v4_116b0, 864
  %v2_116b4 = inttoptr i32 %v1_116b4 to i32*
  %v3_116b4 = load i32, i32* %v2_116b4, align 4
  store i32 %v3_116b4, i32* %r3.global-to-local, align 4
  %v1_116b8 = urem i32 %v3_116b4, 2
  %v2_116b8 = icmp eq i32 %v1_116b8, 0
  br i1 %v2_116b8, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_116a8
  %v1_116bc = load i32, i32* @r8, align 4
  %v2_116bc = load i32, i32* %sb.global-to-local, align 4
  %v3_116bc = add i32 %v2_116bc, %v1_116bc
  %v2_116c0 = load i32, i32* @r5, align 4
  %v3_116c0 = add i32 %v3_116bc, %v2_116c0
  store i32 %v3_116c0, i32* %r3.global-to-local, align 4
  %v2_116c4 = load i32, i32* %fp.global-to-local, align 4
  %v3_116c4 = and i32 %v2_116c4, %v3_116c0
  store i32 %v3_116c4, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_116a8
  %v0_116c8.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_116c8 = phi i32 [ %v0_116c8.pr, %.thread29thread-pre-split ], [ %v3_116c4, %bb155 ]
  %v2_116c8 = icmp ugt i32 %v0_116c8, 1048575
  br i1 %v2_116c8, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_116e0 = phi i32 [ %v0_116c8, %.thread29 ], [ 1048576, %bb156 ]
  %v1_116d0 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_116e0, %v1_116d0
  br i1 %tmp214, label %dec_label_pc_116d8, label %dec_label_pc_1193c

dec_label_pc_116d8:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_116e0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_116f4 = call i32 @function_13164(i32 0, i32 %v0_116e0, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_116f4, i32* %r0.global-to-local, align 4
  %v3_116f8 = icmp eq i32 %v6_116f4, -1
  %v8_116f8 = icmp eq i32 %v6_116f4, -1
  store i32 %v6_116f4, i32* @r4, align 4
  br i1 %v8_116f8, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_116d8
  %v1_11700 = load i32, i32* %r6.global-to-local, align 4
  %v2_11700 = add i32 %v1_11700, 864
  %v3_11700 = inttoptr i32 %v2_11700 to i32*
  %v4_11700 = load i32, i32* %v3_11700, align 4
  %v2_11704 = load i32, i32* @r5, align 4
  %v3_11704 = add i32 %v2_11704, %v6_116f4
  store i32 %v3_11704, i32* %r0.global-to-local, align 4
  %v2_11708 = and i32 %v4_11700, -2
  store i32 %v2_11708, i32* %r3.global-to-local, align 4
  store i32 %v2_11708, i32* %v3_11700, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_116d8, %bb158
  br i1 %v3_116f8, label %dec_label_pc_11714, label %dec_label_pc_11718

dec_label_pc_11714:                               ; preds = %.thread32, %dec_label_pc_11694
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11718

dec_label_pc_11718:                               ; preds = %.thread32, %dec_label_pc_11714
  %v0_11718 = load i32, i32* @r4, align 4
  %v7_11718 = icmp eq i32 %v0_11718, -1
  br i1 %v7_11718, label %dec_label_pc_1193c, label %dec_label_pc_11720

dec_label_pc_11720:                               ; preds = %dec_label_pc_11718
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v4_11728 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_11728, i32* %ip.global-to-local, align 4
  store i32 %v3_11658, i32* %r2.global-to-local, align 4
  %v1_11730 = add i32 %v4_11728, 872
  %v2_11730 = inttoptr i32 %v1_11730 to i32*
  %v3_11730 = load i32, i32* %v2_11730, align 4
  %v1_11734 = load i32, i32* @r8, align 4
  %v2_11734 = add i32 %v1_11734, %v3_11658
  store i32 %v2_11734, i32* %r1.global-to-local, align 4
  %v0_11738 = load i32, i32* @r5, align 4
  %v2_11738 = add i32 %v0_11738, %v3_11730
  store i32 %v2_11738, i32* %r3.global-to-local, align 4
  %v9_1173c = icmp eq i32 %v0_11718, %v2_11734
  br i1 %v9_1173c, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_11720
  store i32 %v2_11738, i32* %v2_11730, align 4
  br label %dec_label_pc_11758

bb159:                                            ; preds = %dec_label_pc_11720
  %v1_11740 = load i32, i32* %r0.global-to-local, align 4
  %v8_11740 = icmp eq i32 %v1_11740, -1
  store i32 %v2_11738, i32* %v2_11730, align 4
  br i1 %v8_11740, label %.thread34, label %dec_label_pc_11758

.thread34:                                        ; preds = %bb159
  %v1_11748 = load i32, i32* @r5, align 4
  %v2_11748 = load i32, i32* @r8, align 4
  %v3_11748 = add i32 %v2_11748, %v1_11748
  %v2_1174c = or i32 %v3_11748, 1
  store i32 %v2_1174c, i32* %r3.global-to-local, align 4
  %v2_11750 = load i32, i32* %r2.global-to-local, align 4
  %v3_11750 = add i32 %v2_11750, 4
  %v4_11750 = inttoptr i32 %v3_11750 to i32*
  store i32 %v2_1174c, i32* %v4_11750, align 4
  br label %dec_label_pc_118d0

dec_label_pc_11758:                               ; preds = %bb159, %.thread122
  %v0_1175c.pr = load i32, i32* @r8, align 4
  %v0_11758 = load i32, i32* %ip.global-to-local, align 4
  %v1_11758 = add i32 %v0_11758, 864
  %v2_11758 = inttoptr i32 %v1_11758 to i32*
  %v3_11758 = load i32, i32* %v2_11758, align 4
  store i32 %v3_11758, i32* %r2.global-to-local, align 4
  %v2_1175c = icmp eq i32 %v0_1175c.pr, 0
  br i1 %v2_1175c, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_11758
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_11758
  %v2_11764 = urem i32 %v3_11758, 2
  store i32 %v2_11764, i32* %r3.global-to-local, align 4
  %v2_11768 = icmp eq i32 %v2_11764, 0
  br i1 %v2_11768, label %.thread40, label %dec_label_pc_11770

dec_label_pc_11770:                               ; preds = %.thread36
  %v0_11770 = load i32, i32* @r4, align 4
  %v1_11770 = load i32, i32* %r1.global-to-local, align 4
  %v3_11770 = icmp ult i32 %v0_11770, %v1_11770
  br i1 %v3_11770, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_11770
  %v2_11774 = and i32 %v3_11758, -2
  store i32 %v2_11774, i32* %r3.global-to-local, align 4
  store i32 %v2_11774, i32* %v2_11758, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_11770, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %ip.global-to-local, align 4
  %v4_11784 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_11784, i32* @r7, align 4
  %v1_11788 = add i32 %v4_11784, 864
  %v2_11788 = inttoptr i32 %v1_11788 to i32*
  %v3_11788 = load i32, i32* %v2_11788, align 4
  store i32 %v3_11788, i32* %r3.global-to-local, align 4
  %v1_1178c = urem i32 %v3_11788, 2
  store i32 %v1_1178c, i32* @r6, align 4
  %v2_1178c = icmp eq i32 %v1_1178c, 0
  br i1 %v2_1178c, label %dec_label_pc_11820, label %dec_label_pc_11794

dec_label_pc_11794:                               ; preds = %.thread40
  %v0_11794 = load i32, i32* @r8, align 4
  %v2_11794 = icmp eq i32 %v0_11794, 0
  br i1 %v2_11794, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_11794
  %v2_11798 = add i32 %v4_11784, 872
  %v3_11798 = inttoptr i32 %v2_11798 to i32*
  %v4_11798 = load i32, i32* %v3_11798, align 4
  store i32 %v4_11798, i32* %r2.global-to-local, align 4
  %v1_1179c = load i32, i32* %r1.global-to-local, align 4
  %v2_1179c = load i32, i32* @r4, align 4
  %v3_1179c = sub i32 %v2_1179c, %v1_1179c
  %v3_117a0 = add i32 %v3_1179c, %v4_11798
  store i32 %v3_117a0, i32* %r3.global-to-local, align 4
  store i32 %v3_117a0, i32* %v3_11798, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_11794, %bb161
  %v0_117a8 = load i32, i32* @r4, align 4
  %v1_117a8 = urem i32 %v0_117a8, 8
  store i32 %v1_117a8, i32* %r3.global-to-local, align 4
  %v2_117a8 = icmp eq i32 %v1_117a8, 0
  br i1 %v2_117a8, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_117ac = sub nsw i32 8, %v1_117a8
  store i32 %v2_117ac, i32* %r3.global-to-local, align 4
  %v3_117b0 = add i32 %v2_117ac, %v0_117a8
  store i32 %v3_117b0, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_117b8 = phi i32 [ 0, %.thread43 ], [ %v2_117ac, %bb162 ]
  %v1_117b4 = load i32, i32* @r5, align 4
  %v2_117b4 = add i32 %v1_117b4, %v0_117a8
  store i32 %v2_117b4, i32* @r6, align 4
  %v1_117b8 = load i32, i32* @r8, align 4
  %v2_117b8 = add i32 %v2_117b4, %v0_117b8
  %v2_117bc = add i32 %v2_117b8, %v1_117b8
  store i32 %v2_117bc, i32* %r1.global-to-local, align 4
  %v1_117c0 = load i32, i32* %sb.global-to-local, align 4
  %v2_117c0 = add i32 %v1_117c0, %v2_117bc
  %v1_117c4 = load i32, i32* %fp.global-to-local, align 4
  %v2_117c4 = and i32 %v1_117c4, %v2_117c0
  store i32 %v2_117c4, i32* %r2.global-to-local, align 4
  %v2_117c8 = sub i32 0, %v2_117b4
  store i32 %v2_117c8, i32* %r3.global-to-local, align 4
  %v2_117cc = sub i32 %v2_117c4, %v2_117b4
  store i32 %v2_117cc, i32* @r5, align 4
  store i32 %v2_117cc, i32* %r0.global-to-local, align 4
  br i1 %v2_117a8, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_117a8, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_117d8 = call i32 @function_133f0(i32 %v2_117cc)
  store i32 %v1_117d8, i32* %r0.global-to-local, align 4
  %v3_117dc = icmp eq i32 %v1_117d8, -1
  br i1 %v3_117dc, label %dec_label_pc_117e4, label %dec_label_pc_117f4

dec_label_pc_117e4:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_117e8 = call i32 @function_133f0(i32 0)
  store i32 %v1_117e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_1184c

dec_label_pc_117f4:                               ; preds = %bb164
  %v1_117f4 = load i32, i32* @r4, align 4
  %v3_117f4 = icmp ult i32 %v1_117d8, %v1_117f4
  br i1 %v3_117f4, label %dec_label_pc_117fc, label %dec_label_pc_1184c

dec_label_pc_117fc:                               ; preds = %dec_label_pc_117f4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r0.global-to-local, align 4
  %v4_11804 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_11804, i32* %r2.global-to-local, align 4
  %v1_11808 = add i32 %v4_11804, 864
  %v2_11808 = inttoptr i32 %v1_11808 to i32*
  %v3_11808 = load i32, i32* %v2_11808, align 4
  %v0_1180c = load i32, i32* @r6, align 4
  store i32 %v0_1180c, i32* %r0.global-to-local, align 4
  %v1_11810 = and i32 %v3_11808, -2
  store i32 %v1_11810, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_11810, i32* %v2_11808, align 4
  br label %dec_label_pc_1184c

dec_label_pc_11820:                               ; preds = %.thread40
  %v0_11820 = load i32, i32* %r0.global-to-local, align 4
  %v3_11820 = icmp eq i32 %v0_11820, -1
  br i1 %v3_11820, label %dec_label_pc_11828, label %dec_label_pc_11844

dec_label_pc_11828:                               ; preds = %dec_label_pc_11820
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_1182c = call i32 @function_133f0(i32 0)
  store i32 %v1_1182c, i32* %r0.global-to-local, align 4
  %v0_11830 = load i32, i32* @r7, align 4
  %v1_11830 = add i32 %v0_11830, 872
  %v2_11830 = inttoptr i32 %v1_11830 to i32*
  %v3_11830 = load i32, i32* %v2_11830, align 4
  store i32 %v3_11830, i32* %r2.global-to-local, align 4
  %v0_11834 = load i32, i32* @r4, align 4
  %v0_11838 = load i32, i32* @r5, align 4
  %v2_11834 = add i32 %v3_11830, %v1_1182c
  %v2_11838 = sub i32 %v2_11834, %v0_11834
  %v2_1183c = sub i32 %v2_11838, %v0_11838
  store i32 %v2_1183c, i32* %r3.global-to-local, align 4
  store i32 %v2_1183c, i32* %v2_11830, align 4
  %v0_11848.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_11844

dec_label_pc_11844:                               ; preds = %dec_label_pc_11820, %dec_label_pc_11828
  %v0_11848 = phi i32 [ 0, %dec_label_pc_11820 ], [ %v0_11848.pre, %dec_label_pc_11828 ]
  %v0_11844 = load i32, i32* @r4, align 4
  store i32 %v0_11844, i32* @r7, align 4
  store i32 %v0_11848, i32* @r5, align 4
  br label %dec_label_pc_1184c

dec_label_pc_1184c:                               ; preds = %dec_label_pc_117f4, %dec_label_pc_117fc, %dec_label_pc_117e4, %dec_label_pc_11844
  %v0_1184c = load i32, i32* %r0.global-to-local, align 4
  %v7_1184c = icmp eq i32 %v0_1184c, -1
  br i1 %v7_1184c, label %dec_label_pc_118d0, label %dec_label_pc_11854

dec_label_pc_11854:                               ; preds = %dec_label_pc_1184c
  %v1_11854 = load i32, i32* @r5, align 4
  %v2_11854 = add i32 %v1_11854, %v0_1184c
  %v0_11858 = load i32, i32* @r7, align 4
  %v2_11858 = sub i32 %v2_11854, %v0_11858
  %v1_1185c = or i32 %v2_11858, 1
  %v2_11860 = add i32 %v0_11858, 4
  %v3_11860 = inttoptr i32 %v2_11860 to i32*
  store i32 %v1_1185c, i32* %v3_11860, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_1186c = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_1186c, i32* @r6, align 4
  %v1_11870 = add i32 %v4_1186c, 872
  %v2_11870 = inttoptr i32 %v1_11870 to i32*
  %v3_11870 = load i32, i32* %v2_11870, align 4
  %v0_11874 = load i32, i32* @r8, align 4
  %v2_11874 = icmp eq i32 %v0_11874, 0
  %v0_11878 = load i32, i32* @r5, align 4
  %v2_11878 = add i32 %v0_11878, %v3_11870
  store i32 %v2_11878, i32* %r3.global-to-local, align 4
  store i32 %v2_11878, i32* %v2_11870, align 4
  %v0_11880 = load i32, i32* @r7, align 4
  %v1_11880 = load i32, i32* @r6, align 4
  %v2_11880 = add i32 %v1_11880, 44
  %v3_11880 = inttoptr i32 %v2_11880 to i32*
  store i32 %v0_11880, i32* %v3_11880, align 4
  br i1 %v2_11874, label %dec_label_pc_118d0, label %dec_label_pc_11888

dec_label_pc_11888:                               ; preds = %dec_label_pc_11854
  %v0_1188c = load i32, i32* @r8, align 4
  %v1_1188c = add i32 %v0_1188c, -12
  %v1_11890 = and i32 %v1_1188c, -8
  store i32 %v3_11658, i32* %ip.global-to-local, align 4
  %v2_11898 = add i32 %v1_11890, %v3_11658
  store i32 %v2_11898, i32* %r1.global-to-local, align 4
  %v2_1189c = icmp ugt i32 %v1_11890, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_118a4 = or i32 %v1_11890, 1
  store i32 %v1_118a4, i32* %r3.global-to-local, align 4
  store i32 %v1_118a4, i32* %v2_11664, align 4
  %v0_118ac = load i32, i32* %r2.global-to-local, align 4
  %v1_118ac = load i32, i32* %r1.global-to-local, align 4
  %v2_118ac = add i32 %v1_118ac, 8
  %v3_118ac = inttoptr i32 %v2_118ac to i32*
  store i32 %v0_118ac, i32* %v3_118ac, align 4
  %v0_118b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_118b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_118b0 = add i32 %v1_118b0, 4
  %v3_118b0 = inttoptr i32 %v2_118b0 to i32*
  store i32 %v0_118b0, i32* %v3_118b0, align 4
  br i1 %v2_1189c, label %dec_label_pc_118b8, label %dec_label_pc_118d0

dec_label_pc_118b8:                               ; preds = %dec_label_pc_11888
  %v0_118b8 = load i32, i32* @r6, align 4
  %v1_118b8 = add i32 %v0_118b8, 836
  %v2_118b8 = inttoptr i32 %v1_118b8 to i32*
  %v3_118b8 = load i32, i32* %v2_118b8, align 4
  store i32 %v3_118b8, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_118c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_118c0 = add i32 %v0_118c0, 8
  store i32 %v1_118c0, i32* @r0, align 4
  store i32 -1, i32* %v2_118b8, align 4
  %v0_118c8 = call i32 @function_120e4()
  store i32 %v0_118c8, i32* %r0.global-to-local, align 4
  %v0_118cc = load i32, i32* @r4, align 4
  %v1_118cc = load i32, i32* @r6, align 4
  %v2_118cc = add i32 %v1_118cc, 836
  %v3_118cc = inttoptr i32 %v2_118cc to i32*
  store i32 %v0_118cc, i32* %v3_118cc, align 4
  br label %dec_label_pc_118d0

dec_label_pc_118d0:                               ; preds = %.thread34, %dec_label_pc_11888, %dec_label_pc_11854, %dec_label_pc_1184c, %dec_label_pc_118b8
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r0.global-to-local, align 4
  %v4_118d8 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_118d8, i32* %lr.global-to-local, align 4
  %v1_118dc = add i32 %v4_118d8, 872
  store i32 %v1_118dc, i32* %r1.global-to-local, align 4
  %v1_118e0 = inttoptr i32 %v1_118dc to i32*
  %v2_118e0 = load i32, i32* %v1_118e0, align 4
  store i32 %v2_118e0, i32* %r1.global-to-local, align 4
  %v3_118e0 = add i32 %v4_118d8, 876
  %v4_118e0 = inttoptr i32 %v3_118e0 to i32*
  %v5_118e0 = load i32, i32* %v4_118e0, align 4
  store i32 %v5_118e0, i32* %r3.global-to-local, align 4
  %v1_118e8 = add i32 %v4_118d8, 868
  %v2_118e8 = inttoptr i32 %v1_118e8 to i32*
  %v3_118e8 = load i32, i32* %v2_118e8, align 4
  store i32 %v3_118e8, i32* %r3.global-to-local, align 4
  %v1_118ec = add i32 %v4_118d8, 884
  %v2_118ec = inttoptr i32 %v1_118ec to i32*
  %v3_118ec = load i32, i32* %v2_118ec, align 4
  store i32 %v3_118ec, i32* %r2.global-to-local, align 4
  %v2_118f0 = add i32 %v3_118e8, %v2_118e0
  store i32 %v2_118f0, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_118e0, %v5_118e0
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_118d0
  store i32 %v2_118e0, i32* %v4_118e0, align 4
  %v0_118f8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_118f8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_118d0, %bb165
  %v1_118f8 = phi i32 [ %v3_118ec, %dec_label_pc_118d0 ], [ %v1_118f8.pre, %bb165 ]
  %v4_118fc = phi i32 [ %v2_118f0, %dec_label_pc_118d0 ], [ %v0_118f8.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_118fc, %v1_118f8
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_118fc = load i32, i32* %lr.global-to-local, align 4
  %v6_118fc = add i32 %v5_118fc, 884
  %v7_118fc = inttoptr i32 %v6_118fc to i32*
  store i32 %v4_118fc, i32* %v7_118fc, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_11900 = load i32, i32* %lr.global-to-local, align 4
  %v1_11900 = add i32 %v0_11900, 44
  %v2_11900 = inttoptr i32 %v1_11900 to i32*
  %v3_11900 = load i32, i32* %v2_11900, align 4
  store i32 %v3_11900, i32* %ip.global-to-local, align 4
  %v1_11904 = add i32 %v3_11900, 4
  %v2_11904 = inttoptr i32 %v1_11904 to i32*
  %v3_11904 = load i32, i32* %v2_11904, align 4
  store i32 %v1_11518, i32* %r1.global-to-local, align 4
  %v1_1190c = and i32 %v3_11904, -4
  store i32 %v1_1190c, i32* %r3.global-to-local, align 4
  %v3_11910 = icmp ult i32 %v1_1190c, %v1_11518
  br i1 %v3_11910, label %dec_label_pc_1193c, label %dec_label_pc_11918

dec_label_pc_11918:                               ; preds = %bb168
  %v0_11918 = load i32, i32* @sl, align 4
  %v2_11918 = sub i32 %v1_1190c, %v0_11918
  %v2_1191c = add i32 %v0_11918, %v3_11900
  store i32 %v2_1191c, i32* %r1.global-to-local, align 4
  %v1_11920 = or i32 %v2_11918, 1
  store i32 %v1_11920, i32* %r3.global-to-local, align 4
  %v1_11924 = or i32 %v0_11918, 1
  store i32 %v1_11924, i32* %r2.global-to-local, align 4
  %v1_11928 = add i32 %v3_11900, 8
  store i32 %v1_11928, i32* %r0.global-to-local, align 4
  store i32 %v1_11924, i32* %v2_11904, align 4
  %v0_11930 = load i32, i32* %r1.global-to-local, align 4
  %v1_11930 = load i32, i32* %lr.global-to-local, align 4
  %v2_11930 = add i32 %v1_11930, 44
  %v3_11930 = inttoptr i32 %v2_11930 to i32*
  store i32 %v0_11930, i32* %v3_11930, align 4
  %v0_11934 = load i32, i32* %r3.global-to-local, align 4
  %v1_11934 = load i32, i32* %r1.global-to-local, align 4
  %v2_11934 = add i32 %v1_11934, 4
  %v3_11934 = inttoptr i32 %v2_11934 to i32*
  store i32 %v0_11934, i32* %v3_11934, align 4
  br label %dec_label_pc_1194c

dec_label_pc_1193c:                               ; preds = %bb157, %bb168, %dec_label_pc_11718
  %v0_1193c = call i32 @function_10a6c()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_11944 = inttoptr i32 %v0_1193c to i32*
  store i32 12, i32* %v2_11944, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1194c

dec_label_pc_1194c:                               ; preds = %bb151, %bb150, %dec_label_pc_11560, %dec_label_pc_11918, %dec_label_pc_1193c
  %v0_1194c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1194c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11950

dec_label_pc_11950:                               ; preds = %.thread1, %dec_label_pc_1152c, %.thread121, %dec_label_pc_1139c, %dec_label_pc_11390, %dec_label_pc_111f8, %dec_label_pc_1117c, %dec_label_pc_1194c
  store i32 %v2_110a4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v4_11960 = load i32, i32* inttoptr (i32 122920 to i32*), align 8
  store i32 %v4_11960, i32* @ip, align 4
  store i32 72044, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11960)
  br label %dec_label_pc_1196c

dec_label_pc_1196c:                               ; preds = %dec_label_pc_110dc, %dec_label_pc_11950
  %v0_1196c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1196c, i32* %r0.global-to-local, align 4
  store i32 %v3_11078, i32* @r4, align 4
  store i32 %v6_11078, i32* @r5, align 4
  store i32 %v9_11078, i32* @r6, align 4
  store i32 %v12_11078, i32* @r7, align 4
  store i32 %v15_11078, i32* @r8, align 4
  store i32 %v18_11078, i32* @sb, align 4
  store i32 %v21_11078, i32* @sl, align 4
  store i32 %v24_11078, i32* @fp, align 4
  store i32 %v27_11078, i32* @lr, align 4
  ret i32 %v0_1196c

; uselistorder directives
  uselistorder i32 %v0_11918, { 1, 0, 2 }
  uselistorder i32 %v3_11900, { 1, 0, 2, 3 }
  uselistorder i32 %v4_118fc, { 1, 0 }
  uselistorder i32 %v2_118e0, { 2, 0, 1, 3 }
  uselistorder i32 %v4_118d8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_11890, { 1, 2, 0 }
  uselistorder i32 %v0_11858, { 1, 0 }
  uselistorder i32 %v0_1184c, { 1, 0 }
  uselistorder i32 %v2_1183c, { 1, 0 }
  uselistorder i32 %v2_117cc, { 2, 1, 0 }
  uselistorder i32 %v2_117b4, { 1, 2, 0, 3 }
  uselistorder i32 %v2_117ac, { 1, 0, 2 }
  uselistorder i32 %v1_117a8, { 2, 1, 0 }
  uselistorder i32 %v0_117a8, { 3, 1, 2, 0 }
  uselistorder i32 %v1_1178c, { 1, 0 }
  uselistorder i32 %v2_11764, { 1, 0 }
  uselistorder i32 %v3_11758, { 1, 0, 2 }
  uselistorder i32 %v2_11738, { 1, 0, 2 }
  uselistorder i32* %v2_11730, { 1, 0, 2 }
  uselistorder i32 %v0_11718, { 1, 0 }
  uselistorder i32 %v6_116f4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_116e0, { 2, 1, 0 }
  uselistorder i32 %v0_116c8, { 1, 0 }
  uselistorder i32 %v2_11684, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11680, { 1, 0 }
  uselistorder i32 %v3_11658, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_11638, { 1, 0, 2 }
  uselistorder i32 %v2_11620, { 1, 2, 0, 3 }
  uselistorder i32 %v1_115c8, { 2, 1, 0 }
  uselistorder i32 %v6_115bc, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_11598, { 2, 1, 0, 3 }
  uselistorder i32 %v3_11558, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11518, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_11510, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1150c, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_114f8, { 1, 0 }
  uselistorder i32 %v7_114b8, { 1, 0 }
  uselistorder i32 %v4_114b8, { 1, 0 }
  uselistorder i32 %v0_11488, { 1, 0 }
  uselistorder i32 %v2_1145c, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_1145854, { 1, 0 }
  uselistorder i32 %v1_11424, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_1140c., { 1, 2, 0 }
  uselistorder i32 %v0_11414, { 0, 1, 3, 2 }
  uselistorder i32 %v1_11414, { 1, 0 }
  uselistorder i32 %v3_113f4, { 1, 0 }
  uselistorder i32 %v4_113f0, { 1, 0, 2 }
  uselistorder i32 %v1_11360, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_113b8, { 1, 0 }
  uselistorder i32 %v1_1139c, { 1, 0 }
  uselistorder i32 %v1_1123c, { 1, 0 }
  uselistorder i32 %v0_1137c, { 2, 0, 1, 3 }
  uselistorder i32 %v3_11344, { 2, 0, 1, 3 }
  uselistorder i32 %v0_113d8.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11320, { 2, 1, 0 }
  uselistorder i32 %v3_11314, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_11234, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_112dc, { 1, 0 }
  uselistorder i32 %v3_112d0, { 1, 0 }
  uselistorder i32 %v0_112dc, { 1, 0 }
  uselistorder i32 %v3_112b4, { 0, 2, 3, 1 }
  uselistorder i32 %v2_112a4, { 1, 0, 2 }
  uselistorder i32 %v3_1125c, { 2, 1, 0 }
  uselistorder i32 %v0_1124c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1121c, { 1, 0 }
  uselistorder i32 %v1_111d0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_111cc, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_11170, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_11164, { 1, 0 }
  uselistorder i32 %v3_11134, { 1, 0 }
  uselistorder i32 %v0_11128, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_11108, { 0, 2, 1, 3 }
  uselistorder i1 %v7_110fc, { 1, 0 }
  uselistorder i32 %v0_110d4, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 15, 16, 0, 1, 2, 3, 5, 4, 7, 8, 6, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 106, 107, 108, 109, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 36, 37, 38, 40, 41, 42, 43, 0, 1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 85, 72, 73, 74, 75, 76, 78, 79, 80, 81, 105, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104 }
  uselistorder i32* %r2.global-to-local, { 56, 57, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32* %r1.global-to-local, { 51, 52, 53, 54, 55, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 42, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* %r0.global-to-local, { 55, 53, 56, 54, 57, 6, 3, 18, 10, 7, 19, 8, 9, 12, 11, 16, 13, 20, 15, 14, 21, 17, 4, 23, 22, 24, 2, 25, 26, 31, 27, 28, 5, 29, 30, 32, 33, 34, 37, 38, 35, 36, 43, 40, 39, 41, 42, 44, 1, 45, 46, 47, 48, 0, 49, 52, 51, 50 }
  uselistorder i32* %lr.global-to-local, { 13, 0, 1, 2, 3, 6, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %ip.global-to-local, { 42, 2, 3, 4, 5, 6, 7, 8, 11, 10, 12, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0, 22, 23, 35, 34, 27, 24, 1, 25, 26, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_13164, { 1, 0 }
  uselistorder i32 34, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_11000, { 1, 0 }
  uselistorder label %dec_label_pc_1196c, { 1, 0 }
  uselistorder label %dec_label_pc_11950, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_1194c, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1193c, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_118d0, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_1184c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_11844, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_11718, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_1164c, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_11504, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_11458, { 1, 0 }
  uselistorder label %dec_label_pc_11460.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11424, { 1, 0 }
  uselistorder label %dec_label_pc_113d8, { 1, 0 }
  uselistorder label %dec_label_pc_1136c, { 1, 0 }
  uselistorder label %dec_label_pc_11368, { 1, 0 }
  uselistorder label %dec_label_pc_11314, { 1, 0 }
  uselistorder label %dec_label_pc_11300, { 2, 0, 1 }
  uselistorder label %dec_label_pc_112c8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_112b4, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_11980(i32 %arg1) local_unnamed_addr {
dec_label_pc_11980:
  %v0_11980 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11980, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_11980
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11980, %bb
  %v10_11994 = phi i32 [ %arg1, %dec_label_pc_11980 ], [ 0, %bb ]
  ret i32 %v10_11994

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_11998(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11998:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_11998 = load i32, i32* @r4, align 4
  %v6_11998 = load i32, i32* @r5, align 4
  %v9_11998 = load i32, i32* @r6, align 4
  %v12_11998 = load i32, i32* @lr, align 4
  %v2_119a0 = icmp eq i32 %arg1, 0
  store i32 122896, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_119b0 = mul i32 %arg2, %arg1
  store i32 %v2_119b0, i32* @r6, align 4
  br i1 %v2_119a0, label %dec_label_pc_119e0, label %dec_label_pc_119b8

dec_label_pc_119b8:                               ; preds = %dec_label_pc_11998
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_119b0, i32* @r0, align 4
  %v0_119c0 = call i32 @function_10114()
  %v0_119c4 = load i32, i32* @r4, align 4
  %v9_119c4 = icmp eq i32 %v0_119c4, %v0_119c0
  br i1 %v9_119c4, label %dec_label_pc_119b8.dec_label_pc_119e0_crit_edge, label %dec_label_pc_119cc

dec_label_pc_119b8.dec_label_pc_119e0_crit_edge:  ; preds = %dec_label_pc_119b8
  %v0_119e4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_119e0

dec_label_pc_119cc:                               ; preds = %dec_label_pc_119b8
  %v0_119cc = call i32 @function_10a6c()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_119d8 = inttoptr i32 %v0_119cc to i32*
  store i32 12, i32* %v2_119d8, align 4
  br label %dec_label_pc_11aa4

dec_label_pc_119e0:                               ; preds = %dec_label_pc_119b8.dec_label_pc_119e0_crit_edge, %dec_label_pc_11998
  %v0_119fc = phi i32 [ %v0_119e4.pre, %dec_label_pc_119b8.dec_label_pc_119e0_crit_edge ], [ 122896, %dec_label_pc_11998 ]
  %v2_119e4 = add i32 %v0_119fc, 68
  %v3_119e4 = inttoptr i32 %v2_119e4 to i32*
  %v4_119e4 = load i32, i32* %v3_119e4, align 4
  store i32 %v4_119e4, i32* @r4, align 4
  %v2_119fc = add i32 %v0_119fc, 72
  %v3_119fc = inttoptr i32 %v2_119fc to i32*
  %v4_119fc = load i32, i32* %v3_119fc, align 4
  store i32 %v4_119fc, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_119fc)
  %v0_11a10 = load i32, i32* @r5, align 4
  %v2_11a10 = add i32 %v0_11a10, 16
  %v3_11a10 = inttoptr i32 %v2_11a10 to i32*
  %v4_11a10 = load i32, i32* %v3_11a10, align 4
  store i32 %v4_11a10, i32* %ip.global-to-local, align 4
  store i32 72220, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11a10)
  %v0_11a1c = load i32, i32* @r6, align 4
  store i32 %v0_11a1c, i32* @r0, align 4
  %v0_11a20 = call i32 @function_11078()
  store i32 %v0_11a20, i32* %r4.global-to-local, align 4
  %v2_11a24 = icmp eq i32 %v0_11a20, 0
  br i1 %v2_11a24, label %.thread, label %dec_label_pc_11a2c

dec_label_pc_11a2c:                               ; preds = %dec_label_pc_119e0
  %v1_11a2c = add i32 %v0_11a20, -4
  %v2_11a2c = inttoptr i32 %v1_11a2c to i32*
  %v3_11a2c = load i32, i32* %v2_11a2c, align 4
  %v1_11a30 = and i32 %v3_11a2c, 2
  %v2_11a30 = icmp eq i32 %v1_11a30, 0
  br i1 %v2_11a30, label %dec_label_pc_11a38, label %.thread

dec_label_pc_11a38:                               ; preds = %dec_label_pc_11a2c
  %v1_11a387 = add i32 %v3_11a2c, -4
  %v1_11a3c = and i32 %v1_11a387, -4
  store i32 %v1_11a3c, i32* @r2, align 4
  %v3_11a40 = udiv i32 %v1_11a3c, 4
  store i32 %v3_11a40, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_11a3c, 36
  %v2_11a48 = icmp ult i32 %v1_11a3c, 33
  %v3_11a48 = or i1 %tmp, %v2_11a48
  br i1 %v3_11a48, label %dec_label_pc_11a54, label %dec_label_pc_11a4c

dec_label_pc_11a4c:                               ; preds = %dec_label_pc_11a38
  %v2_11a4c = inttoptr i32 %v0_11a20 to i8*
  %v3_11a4c = call i32 @function_10ac0(i8* %v2_11a4c, i32 0)
  br label %.thread

dec_label_pc_11a54:                               ; preds = %dec_label_pc_11a38
  %tmp8 = icmp eq i32 %v1_11a3c, 16
  %v2_11a58 = inttoptr i32 %v0_11a20 to i32*
  store i32 0, i32* %v2_11a58, align 4
  %v1_11a5c = load i32, i32* %r4.global-to-local, align 4
  %v2_11a5c = add i32 %v1_11a5c, 4
  %v3_11a5c = inttoptr i32 %v2_11a5c to i32*
  store i32 0, i32* %v3_11a5c, align 4
  %v1_11a60 = load i32, i32* %r4.global-to-local, align 4
  %v2_11a60 = add i32 %v1_11a60, 8
  %v3_11a60 = inttoptr i32 %v2_11a60 to i32*
  store i32 0, i32* %v3_11a60, align 4
  %v2_11a64 = icmp ult i32 %v1_11a3c, 13
  %v3_11a64 = or i1 %tmp8, %v2_11a64
  br i1 %v3_11a64, label %.thread, label %dec_label_pc_11a68

dec_label_pc_11a68:                               ; preds = %dec_label_pc_11a54
  %v0_11a68 = load i32, i32* %ip.global-to-local, align 4
  %v1_11a6c = load i32, i32* %r4.global-to-local, align 4
  %v2_11a6c = add i32 %v1_11a6c, 12
  %v3_11a6c = inttoptr i32 %v2_11a6c to i32*
  store i32 0, i32* %v3_11a6c, align 4
  %v1_11a70 = load i32, i32* %r4.global-to-local, align 4
  %v2_11a70 = add i32 %v1_11a70, 16
  %v3_11a70 = inttoptr i32 %v2_11a70 to i32*
  store i32 0, i32* %v3_11a70, align 4
  %tmp9 = icmp ult i32 %v0_11a68, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_11a78

dec_label_pc_11a78:                               ; preds = %dec_label_pc_11a68
  %v0_11a78 = load i32, i32* %ip.global-to-local, align 4
  %v7_11a78 = icmp eq i32 %v0_11a78, 9
  %v1_11a7c = load i32, i32* %r4.global-to-local, align 4
  %v2_11a7c = add i32 %v1_11a7c, 20
  %v3_11a7c = inttoptr i32 %v2_11a7c to i32*
  store i32 0, i32* %v3_11a7c, align 4
  %v1_11a80 = load i32, i32* %r4.global-to-local, align 4
  %v2_11a80 = add i32 %v1_11a80, 24
  %v3_11a80 = inttoptr i32 %v2_11a80 to i32*
  store i32 0, i32* %v3_11a80, align 4
  br i1 %v7_11a78, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11a78
  %v2_11a84 = load i32, i32* %r4.global-to-local, align 4
  %v3_11a84 = add i32 %v2_11a84, 32
  %v4_11a84 = inttoptr i32 %v3_11a84 to i32*
  store i32 0, i32* %v4_11a84, align 4
  %v2_11a88 = load i32, i32* %r4.global-to-local, align 4
  %v3_11a88 = add i32 %v2_11a88, 28
  %v4_11a88 = inttoptr i32 %v3_11a88 to i32*
  store i32 0, i32* %v4_11a88, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11a78, %dec_label_pc_11a2c, %dec_label_pc_11a68, %dec_label_pc_11a54, %dec_label_pc_119e0, %dec_label_pc_11a4c, %bb
  %v0_11a98 = load i32, i32* @r5, align 4
  %v2_11a98 = add i32 %v0_11a98, 24
  %v3_11a98 = inttoptr i32 %v2_11a98 to i32*
  %v4_11a98 = load i32, i32* %v3_11a98, align 4
  store i32 %v4_11a98, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_11a98)
  br label %dec_label_pc_11aa4

dec_label_pc_11aa4:                               ; preds = %dec_label_pc_119cc, %.thread
  %v0_11aa4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_11998, i32* @r4, align 4
  store i32 %v6_11998, i32* @r5, align 4
  store i32 %v9_11998, i32* @r6, align 4
  store i32 %v12_11998, i32* @lr, align 4
  ret i32 %v0_11aa4

; uselistorder directives
  uselistorder i32 %v1_11a3c, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_11a20, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 0, 1 }
  uselistorder i32 33, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11aa4, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_11ab8(i32 %arg1) local_unnamed_addr {
dec_label_pc_11ab8:
  %v0_11ab8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11ab8, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_11ab8
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11ab8, %bb
  %v10_11ac8 = phi i32 [ %arg1, %dec_label_pc_11ab8 ], [ 0, %bb ]
  ret i32 %v10_11ac8

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_11acc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11acc:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11acc = load i32, i32* @r4, align 4
  %v6_11acc = load i32, i32* @r5, align 4
  %v9_11acc = load i32, i32* @r6, align 4
  %v12_11acc = load i32, i32* @r7, align 4
  %v15_11acc = load i32, i32* @r8, align 4
  %v18_11acc = load i32, i32* @sb, align 4
  %v21_11acc = load i32, i32* @sl, align 4
  %v24_11acc = load i32, i32* @fp, align 4
  %v27_11acc = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11ad8 = icmp eq i32* %arg1, null
  store i32 122896, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_11ad8, label %dec_label_pc_11aec, label %dec_label_pc_11afc

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11acc
  store i32 %arg2, i32* @r0, align 4
  %v0_11af0 = call i32 @function_11078()
  store i32 %v0_11af0, i32* %r0.global-to-local, align 4
  store i32 %v0_11af0, i32* @r4, align 4
  br label %dec_label_pc_11e54

dec_label_pc_11afc:                               ; preds = %dec_label_pc_11acc
  %v2_11afc = icmp eq i32 %arg2, 0
  br i1 %v2_11afc, label %dec_label_pc_11b04, label %dec_label_pc_11b10

dec_label_pc_11b04:                               ; preds = %dec_label_pc_11afc
  %v0_11b04 = call i32 @function_120e4()
  store i32 %v0_11b04, i32* %r0.global-to-local, align 4
  %v0_11b08 = load i32, i32* @r6, align 4
  store i32 %v0_11b08, i32* @r4, align 4
  br label %dec_label_pc_11e54

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11afc
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_11b18 = load i32, i32* inttoptr (i32 122964 to i32*), align 4
  store i32 %v4_11b18, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_11b18, i32* %r2.global-to-local, align 4
  %v4_11b24 = load i32, i32* inttoptr (i32 122932 to i32*), align 4
  store i32 %v4_11b24, i32* %r1.global-to-local, align 4
  %v2_11b28 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11b28, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_11b30 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_11b30)
  %v0_11b3c = load i32, i32* @r4, align 4
  store i32 %v0_11b3c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_11b48 = load i32, i32* inttoptr (i32 122912 to i32*), align 32
  store i32 %v4_11b48, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11b54.435 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11b48)
  %v0_11b54 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_11b54, -32
  br i1 %tmp36, label %dec_label_pc_11b70, label %dec_label_pc_11b5c

dec_label_pc_11b5c:                               ; preds = %dec_label_pc_11b10
  %v0_11b5c = call i32 @function_10a6c()
  store i32 %v0_11b5c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_11b68 = inttoptr i32 %v0_11b5c to i32*
  store i32 12, i32* %v2_11b68, align 4
  br label %dec_label_pc_11e54

dec_label_pc_11b70:                               ; preds = %dec_label_pc_11b10
  %v1_11b70 = add i32 %v0_11b54, 11
  store i32 %v1_11b70, i32* %r0.global-to-local, align 4
  %v0_11b74 = load i32, i32* @r5, align 4
  %v1_11b74 = add i32 %v0_11b74, -4
  %v2_11b74 = inttoptr i32 %v1_11b74 to i32*
  %v3_11b74 = load i32, i32* %v2_11b74, align 4
  store i32 %v3_11b74, i32* %r2.global-to-local, align 4
  %v2_11b78 = icmp ugt i32 %v1_11b70, 14
  %v7_11b78 = icmp eq i32 %v1_11b70, 15
  %v2_11b7c = xor i1 %v2_11b78, true
  %v3_11b7c = or i1 %v7_11b78, %v2_11b7c
  br i1 %v3_11b7c, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_11b70
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_11b70, %bb
  %v2_11b80 = xor i1 %v7_11b78, true
  %v3_11b80 = and i1 %v2_11b78, %v2_11b80
  br i1 %v3_11b80, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_11b80 = and i32 %v1_11b70, -8
  store i32 %v5_11b80, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_11b84 = and i32 %v3_11b74, 2
  %v2_11b84 = icmp eq i32 %v1_11b84, 0
  %v1_11b88 = add i32 %v0_11b74, -8
  store i32 %v1_11b88, i32* @sl, align 4
  %v1_11b8c = and i32 %v3_11b74, -4
  store i32 %v1_11b8c, i32* @r6, align 4
  br i1 %v2_11b84, label %dec_label_pc_11b94, label %dec_label_pc_11d6c

dec_label_pc_11b94:                               ; preds = %bb29
  %v1_11b94 = load i32, i32* @sb, align 4
  %v3_11b94 = icmp ult i32 %v1_11b8c, %v1_11b94
  br i1 %v3_11b94, label %dec_label_pc_11ba0, label %bb30

bb30:                                             ; preds = %dec_label_pc_11b94
  store i32 %v1_11b8c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d04

dec_label_pc_11ba0:                               ; preds = %dec_label_pc_11b94
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11ba8 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_11ba8, i32* %r0.global-to-local, align 4
  %v1_11bac = add i32 %v4_11ba8, 44
  %v2_11bac = inttoptr i32 %v1_11bac to i32*
  %v3_11bac = load i32, i32* %v2_11bac, align 4
  store i32 %v3_11bac, i32* %r3.global-to-local, align 4
  %v2_11bb0 = add i32 %v1_11b8c, %v1_11b88
  store i32 %v2_11bb0, i32* @r4, align 4
  %v9_11bb4 = icmp eq i32 %v2_11bb0, %v3_11bac
  %v1_11bb8 = add i32 %v2_11bb0, 4
  %v2_11bb8 = inttoptr i32 %v1_11bb8 to i32*
  %v3_11bb8 = load i32, i32* %v2_11bb8, align 4
  store i32 %v3_11bb8, i32* %r1.global-to-local, align 4
  br i1 %v9_11bb4, label %dec_label_pc_11bc0, label %dec_label_pc_11bfc

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11ba0
  %v1_11bc0 = and i32 %v3_11bb8, -4
  %v2_11bc4 = add i32 %v1_11bc0, %v1_11b8c
  store i32 %v2_11bc4, i32* %r1.global-to-local, align 4
  %v1_11bc8 = add i32 %v1_11b94, 16
  store i32 %v1_11bc8, i32* %r3.global-to-local, align 4
  %v3_11bcc = icmp ult i32 %v2_11bc4, %v1_11bc8
  br i1 %v3_11bcc, label %dec_label_pc_11c50, label %dec_label_pc_11bd4

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_11bc0
  %v2_11bd4 = sub i32 %v2_11bc4, %v1_11b94
  %v1_11bd8 = urem i32 %v3_11b74, 2
  %v2_11bdc = add i32 %v1_11b94, %v1_11b88
  store i32 %v2_11bdc, i32* %r1.global-to-local, align 4
  %v2_11be0 = or i32 %v1_11b94, %v1_11bd8
  store i32 %v2_11be0, i32* %r2.global-to-local, align 4
  %v1_11be4 = or i32 %v2_11bd4, 1
  store i32 %v1_11be4, i32* %r3.global-to-local, align 4
  store i32 %v0_11b74, i32* @r4, align 4
  store i32 %v2_11be0, i32* %v2_11b74, align 4
  %v0_11bf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11bf0 = load i32, i32* %r0.global-to-local, align 4
  %v2_11bf0 = add i32 %v1_11bf0, 44
  %v3_11bf0 = inttoptr i32 %v2_11bf0 to i32*
  store i32 %v0_11bf0, i32* %v3_11bf0, align 4
  %v0_11bf4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11bf4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11bf4 = add i32 %v1_11bf4, 4
  %v3_11bf4 = inttoptr i32 %v2_11bf4 to i32*
  store i32 %v0_11bf4, i32* %v3_11bf4, align 4
  br label %dec_label_pc_11e38

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11ba0
  %v1_11bfc = and i32 %v3_11bb8, -2
  %v2_11c00 = add i32 %v1_11bfc, %v2_11bb0
  store i32 %v2_11c00, i32* %r3.global-to-local, align 4
  %v1_11c04 = add i32 %v2_11c00, 4
  %v2_11c04 = inttoptr i32 %v1_11c04 to i32*
  %v3_11c04 = load i32, i32* %v2_11c04, align 4
  store i32 %v3_11c04, i32* %r3.global-to-local, align 4
  %v1_11c08 = urem i32 %v3_11c04, 2
  %v2_11c08 = icmp eq i32 %v1_11c08, 0
  br i1 %v2_11c08, label %dec_label_pc_11c10, label %dec_label_pc_11c50

dec_label_pc_11c10:                               ; preds = %dec_label_pc_11bfc
  %v1_11c10 = and i32 %v3_11bb8, -4
  store i32 %v1_11c10, i32* %r3.global-to-local, align 4
  %v2_11c14 = add i32 %v1_11c10, %v1_11b8c
  store i32 %v2_11c14, i32* %r0.global-to-local, align 4
  %v3_11c18 = icmp ult i32 %v2_11c14, %v1_11b94
  br i1 %v3_11c18, label %dec_label_pc_11c50, label %dec_label_pc_11c20

dec_label_pc_11c20:                               ; preds = %dec_label_pc_11c10
  %v1_11c20 = add i32 %v1_11b8c, %v0_11b74
  %v2_11c20 = inttoptr i32 %v1_11c20 to i32*
  %v3_11c20 = load i32, i32* %v2_11c20, align 4
  store i32 %v3_11c20, i32* %r1.global-to-local, align 4
  %v1_11c24 = add i32 %v3_11c20, 12
  %v2_11c24 = inttoptr i32 %v1_11c24 to i32*
  %v3_11c24 = load i32, i32* %v2_11c24, align 4
  store i32 %v3_11c24, i32* %r3.global-to-local, align 4
  %v9_11c28 = icmp eq i32 %v3_11c24, %v2_11bb0
  %v1_11c2c = add i32 %v2_11bb0, 12
  %v2_11c2c = inttoptr i32 %v1_11c2c to i32*
  %v3_11c2c = load i32, i32* %v2_11c2c, align 4
  store i32 %v3_11c2c, i32* %r2.global-to-local, align 4
  br i1 %v9_11c28, label %dec_label_pc_11c34, label %dec_label_pc_11c40

dec_label_pc_11c34:                               ; preds = %dec_label_pc_11c20
  %v1_11c34 = add i32 %v3_11c2c, 8
  %v2_11c34 = inttoptr i32 %v1_11c34 to i32*
  %v3_11c34 = load i32, i32* %v2_11c34, align 4
  store i32 %v3_11c34, i32* %r3.global-to-local, align 4
  %v9_11c38 = icmp eq i32 %v3_11c34, %v2_11bb0
  br i1 %v9_11c38, label %dec_label_pc_11c44, label %dec_label_pc_11c40

dec_label_pc_11c40:                               ; preds = %dec_label_pc_11c20, %dec_label_pc_11c34
  %v0_11c40 = call i32 @function_12360()
  store i32 %v0_11c40, i32* %r0.global-to-local, align 4
  %v0_11c44.pre = load i32, i32* @r1, align 4
  %v1_11c44.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_11c44

dec_label_pc_11c44:                               ; preds = %dec_label_pc_11c34, %dec_label_pc_11c40
  %v1_11c44 = phi i32 [ %v3_11c2c, %dec_label_pc_11c34 ], [ %v1_11c44.pre, %dec_label_pc_11c40 ]
  %v0_11c44 = phi i32 [ %v3_11c20, %dec_label_pc_11c34 ], [ %v0_11c44.pre, %dec_label_pc_11c40 ]
  %v2_11c44 = add i32 %v1_11c44, 8
  %v3_11c44 = inttoptr i32 %v2_11c44 to i32*
  store i32 %v0_11c44, i32* %v3_11c44, align 4
  %v0_11c48 = load i32, i32* %r2.global-to-local, align 4
  %v1_11c48 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c48 = add i32 %v1_11c48, 12
  %v3_11c48 = inttoptr i32 %v2_11c48 to i32*
  store i32 %v0_11c48, i32* %v3_11c48, align 4
  %v1_11d04.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d04

dec_label_pc_11c50:                               ; preds = %dec_label_pc_11bc0, %dec_label_pc_11c10, %dec_label_pc_11bfc
  %v1_11c50 = add i32 %v1_11b94, -7
  store i32 %v1_11c50, i32* @r0, align 4
  %v0_11c54 = call i32 @function_11078()
  store i32 %v0_11c54, i32* @r0, align 4
  store i32 %v0_11c54, i32* %r1.global-to-local, align 4
  %v2_11c58 = icmp eq i32 %v0_11c54, 0
  br i1 %v2_11c58, label %bb31, label %dec_label_pc_11c64

bb31:                                             ; preds = %dec_label_pc_11c50
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11e38

dec_label_pc_11c64:                               ; preds = %dec_label_pc_11c50
  %v1_11c6c.pre = load i32, i32* @r4, align 4
  %v1_11c64 = add i32 %v0_11c54, -4
  %v2_11c64 = inttoptr i32 %v1_11c64 to i32*
  %v3_11c64 = load i32, i32* %v2_11c64, align 4
  store i32 %v3_11c64, i32* @r3, align 4
  %v1_11c68 = add i32 %v0_11c54, -8
  store i32 %v1_11c68, i32* @r7, align 4
  %v9_11c6c = icmp eq i32 %v1_11c68, %v1_11c6c.pre
  br i1 %v9_11c6c, label %.thread2, label %dec_label_pc_11c7c

.thread2:                                         ; preds = %dec_label_pc_11c64
  %v2_11c70 = and i32 %v3_11c64, -4
  store i32 %v2_11c70, i32* %r3.global-to-local, align 4
  %v2_11c74 = load i32, i32* @r6, align 4
  %v3_11c74 = add i32 %v2_11c74, %v2_11c70
  store i32 %v3_11c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d04

dec_label_pc_11c7c:                               ; preds = %dec_label_pc_11c64
  %v0_11c7c = load i32, i32* @r6, align 4
  %v1_11c7c = add i32 %v0_11c7c, -4
  store i32 %v1_11c7c, i32* @r2, align 4
  %v3_11c80 = udiv i32 %v1_11c7c, 4
  store i32 %v3_11c80, i32* @ip, align 4
  %tmp37 = and i32 %v1_11c7c, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_11c88 = icmp ult i32 %v1_11c7c, 36
  %v3_11c88 = or i1 %tmp38, %v2_11c88
  %v0_11c98 = load i32, i32* @r5, align 4
  br i1 %v3_11c88, label %dec_label_pc_11c98, label %dec_label_pc_11c8c

dec_label_pc_11c8c:                               ; preds = %dec_label_pc_11c7c
  store i32 %v0_11c98, i32* @r1, align 4
  %v0_11c90 = call i32 @function_10b70()
  store i32 %v0_11c90, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_11c98:                               ; preds = %dec_label_pc_11c7c
  %v1_11c98 = inttoptr i32 %v0_11c98 to i32*
  %v2_11c98 = load i32, i32* %v1_11c98, align 4
  store i32 %v2_11c98, i32* %r3.global-to-local, align 4
  %v2_11c9c = inttoptr i32 %v0_11c54 to i32*
  store i32 %v2_11c98, i32* %v2_11c9c, align 4
  %v0_11ca0 = load i32, i32* @r5, align 4
  %v1_11ca0 = add i32 %v0_11ca0, 4
  %v2_11ca0 = inttoptr i32 %v1_11ca0 to i32*
  %v3_11ca0 = load i32, i32* %v2_11ca0, align 4
  store i32 %v3_11ca0, i32* %r3.global-to-local, align 4
  %v1_11ca4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ca4 = add i32 %v1_11ca4, 4
  %v3_11ca4 = inttoptr i32 %v2_11ca4 to i32*
  store i32 %v3_11ca0, i32* %v3_11ca4, align 4
  %v0_11ca8 = load i32, i32* @r5, align 4
  %v1_11ca8 = add i32 %v0_11ca8, 8
  %v2_11ca8 = inttoptr i32 %v1_11ca8 to i32*
  %v3_11ca8 = load i32, i32* %v2_11ca8, align 4
  store i32 %v3_11ca8, i32* %r3.global-to-local, align 4
  %v0_11cac = load i32, i32* @ip, align 4
  %v1_11cb0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11cb0 = add i32 %v1_11cb0, 8
  %v3_11cb0 = inttoptr i32 %v2_11cb0 to i32*
  store i32 %v3_11ca8, i32* %v3_11cb0, align 4
  %tmp39 = icmp ult i32 %v0_11cac, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_11cb8

dec_label_pc_11cb8:                               ; preds = %dec_label_pc_11c98
  %v0_11cb8 = load i32, i32* @r5, align 4
  %v1_11cb8 = add i32 %v0_11cb8, 12
  %v2_11cb8 = inttoptr i32 %v1_11cb8 to i32*
  %v3_11cb8 = load i32, i32* %v2_11cb8, align 4
  store i32 %v3_11cb8, i32* %r3.global-to-local, align 4
  %v1_11cbc = load i32, i32* %r1.global-to-local, align 4
  %v2_11cbc = add i32 %v1_11cbc, 12
  %v3_11cbc = inttoptr i32 %v2_11cbc to i32*
  store i32 %v3_11cb8, i32* %v3_11cbc, align 4
  %v0_11cc0 = load i32, i32* @r5, align 4
  %v1_11cc0 = add i32 %v0_11cc0, 16
  %v2_11cc0 = inttoptr i32 %v1_11cc0 to i32*
  %v3_11cc0 = load i32, i32* %v2_11cc0, align 4
  store i32 %v3_11cc0, i32* %r3.global-to-local, align 4
  %v0_11cc4 = load i32, i32* @ip, align 4
  %v1_11cc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11cc8 = add i32 %v1_11cc8, 16
  %v3_11cc8 = inttoptr i32 %v2_11cc8 to i32*
  store i32 %v3_11cc0, i32* %v3_11cc8, align 4
  %tmp40 = icmp ult i32 %v0_11cc4, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_11cd0

dec_label_pc_11cd0:                               ; preds = %dec_label_pc_11cb8
  %v0_11cd0 = load i32, i32* @r5, align 4
  %v1_11cd0 = add i32 %v0_11cd0, 20
  %v2_11cd0 = inttoptr i32 %v1_11cd0 to i32*
  %v3_11cd0 = load i32, i32* %v2_11cd0, align 4
  store i32 %v3_11cd0, i32* %r3.global-to-local, align 4
  %v1_11cd4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11cd4 = add i32 %v1_11cd4, 20
  %v3_11cd4 = inttoptr i32 %v2_11cd4 to i32*
  store i32 %v3_11cd0, i32* %v3_11cd4, align 4
  %v0_11cd8 = load i32, i32* @r5, align 4
  %v1_11cd8 = add i32 %v0_11cd8, 24
  %v2_11cd8 = inttoptr i32 %v1_11cd8 to i32*
  %v3_11cd8 = load i32, i32* %v2_11cd8, align 4
  store i32 %v3_11cd8, i32* %r3.global-to-local, align 4
  %v1_11cdc = load i32, i32* %r1.global-to-local, align 4
  %v2_11cdc = add i32 %v1_11cdc, 24
  %v3_11cdc = inttoptr i32 %v2_11cdc to i32*
  store i32 %v3_11cd8, i32* %v3_11cdc, align 4
  %v0_11ce0 = load i32, i32* @ip, align 4
  %v7_11ce0 = icmp eq i32 %v0_11ce0, 9
  br i1 %v7_11ce0, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_11cd0
  %v1_11ce4 = load i32, i32* @r5, align 4
  %v2_11ce4 = add i32 %v1_11ce4, 28
  %v3_11ce4 = inttoptr i32 %v2_11ce4 to i32*
  %v4_11ce4 = load i32, i32* %v3_11ce4, align 4
  store i32 %v4_11ce4, i32* %r3.global-to-local, align 4
  %v2_11ce8 = load i32, i32* %r1.global-to-local, align 4
  %v3_11ce8 = add i32 %v2_11ce8, 28
  %v4_11ce8 = inttoptr i32 %v3_11ce8 to i32*
  store i32 %v4_11ce4, i32* %v4_11ce8, align 4
  %v1_11cec = load i32, i32* @r5, align 4
  %v2_11cec = add i32 %v1_11cec, 32
  %v3_11cec = inttoptr i32 %v2_11cec to i32*
  %v4_11cec = load i32, i32* %v3_11cec, align 4
  store i32 %v4_11cec, i32* %r3.global-to-local, align 4
  %v2_11cf0 = load i32, i32* %r1.global-to-local, align 4
  %v3_11cf0 = add i32 %v2_11cf0, 32
  %v4_11cf0 = inttoptr i32 %v3_11cf0 to i32*
  store i32 %v4_11cec, i32* %v4_11cf0, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11cd0, %dec_label_pc_11cb8, %dec_label_pc_11c98, %dec_label_pc_11c8c, %bb32
  %v0_11cf4 = load i32, i32* @r5, align 4
  store i32 %v0_11cf4, i32* @r0, align 4
  %v0_11cf8 = call i32 @function_120e4()
  store i32 %v0_11cf8, i32* %r0.global-to-local, align 4
  %v0_11cfc = load i32, i32* @r7, align 4
  %v1_11cfc = add i32 %v0_11cfc, 8
  store i32 %v1_11cfc, i32* @r4, align 4
  br label %dec_label_pc_11e38

dec_label_pc_11d04:                               ; preds = %bb30, %.thread2, %dec_label_pc_11c44
  %v0_11d18 = phi i32 [ %v3_11c74, %.thread2 ], [ %v1_11b8c, %bb30 ], [ %v1_11d04.pre, %dec_label_pc_11c44 ]
  %v0_11d04 = load i32, i32* @sb, align 4
  %v2_11d04 = sub i32 %v0_11d18, %v0_11d04
  store i32 %v2_11d04, i32* %r1.global-to-local, align 4
  %v0_11d0c = load i32, i32* @sl, align 4
  %v1_11d0c = add i32 %v0_11d0c, 4
  %v2_11d0c = inttoptr i32 %v1_11d0c to i32*
  %v3_11d0c = load i32, i32* %v2_11d0c, align 4
  %tmp41 = icmp ugt i32 %v2_11d04, 15
  %v1_11d34 = urem i32 %v3_11d0c, 2
  store i32 %v1_11d34, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_11d34, label %dec_label_pc_11d14

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11d04
  %v2_11d18 = or i32 %v1_11d34, %v0_11d18
  store i32 %v2_11d18, i32* %r3.global-to-local, align 4
  store i32 %v2_11d18, i32* %v2_11d0c, align 4
  %v0_11d20 = load i32, i32* @sl, align 4
  %v1_11d20 = load i32, i32* %r0.global-to-local, align 4
  %v2_11d20 = add i32 %v1_11d20, %v0_11d20
  store i32 %v2_11d20, i32* %r2.global-to-local, align 4
  %v1_11d24 = add i32 %v2_11d20, 4
  %v2_11d24 = inttoptr i32 %v1_11d24 to i32*
  %v3_11d24 = load i32, i32* %v2_11d24, align 4
  %v1_11d28 = or i32 %v3_11d24, 1
  store i32 %v1_11d28, i32* %r3.global-to-local, align 4
  store i32 %v1_11d28, i32* %v2_11d24, align 4
  br label %dec_label_pc_11d64

dec_label_pc_11d34:                               ; preds = %dec_label_pc_11d04
  %v2_11d38 = add i32 %v0_11d0c, %v0_11d04
  store i32 %v2_11d38, i32* %r0.global-to-local, align 4
  %v2_11d3c = or i32 %v1_11d34, %v0_11d04
  store i32 %v2_11d3c, i32* %r3.global-to-local, align 4
  %v1_11d40 = or i32 %v2_11d04, 1
  store i32 %v1_11d40, i32* %r2.global-to-local, align 4
  store i32 %v2_11d3c, i32* %v2_11d0c, align 4
  %v0_11d48 = load i32, i32* %r2.global-to-local, align 4
  %v1_11d48 = load i32, i32* %r0.global-to-local, align 4
  %v2_11d48 = add i32 %v1_11d48, 4
  %v3_11d48 = inttoptr i32 %v2_11d48 to i32*
  store i32 %v0_11d48, i32* %v3_11d48, align 4
  %v0_11d4c = load i32, i32* %r0.global-to-local, align 4
  %v1_11d4c = load i32, i32* %r1.global-to-local, align 4
  %v2_11d4c = add i32 %v1_11d4c, %v0_11d4c
  store i32 %v2_11d4c, i32* %r2.global-to-local, align 4
  %v1_11d50 = add i32 %v2_11d4c, 4
  %v2_11d50 = inttoptr i32 %v1_11d50 to i32*
  %v3_11d50 = load i32, i32* %v2_11d50, align 4
  %v1_11d54 = or i32 %v3_11d50, 1
  store i32 %v1_11d54, i32* %r3.global-to-local, align 4
  store i32 %v1_11d54, i32* %v2_11d50, align 4
  %v0_11d5c = load i32, i32* %r0.global-to-local, align 4
  %v1_11d5c = add i32 %v0_11d5c, 8
  store i32 %v1_11d5c, i32* @r0, align 4
  %v0_11d60 = call i32 @function_120e4()
  store i32 %v0_11d60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d64

dec_label_pc_11d64:                               ; preds = %dec_label_pc_11d14, %dec_label_pc_11d34
  %v0_11d64 = load i32, i32* @sl, align 4
  %v1_11d64 = add i32 %v0_11d64, 8
  store i32 %v1_11d64, i32* @r4, align 4
  br label %dec_label_pc_11e38

dec_label_pc_11d6c:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_11d74 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_11d74, i32* @r8, align 4
  %v2_11d78 = inttoptr i32 %v1_11b88 to i32*
  %v3_11d78 = load i32, i32* %v2_11d78, align 4
  store i32 %v3_11d78, i32* @r4, align 4
  %v1_11d7c = add i32 %v4_11d74, 860
  %v2_11d7c = inttoptr i32 %v1_11d7c to i32*
  %v3_11d7c = load i32, i32* %v2_11d7c, align 4
  %v1_11d80 = add i32 %v3_11d78, 4
  %v1_11d84 = add i32 %v3_11d7c, -1
  store i32 %v1_11d84, i32* %r2.global-to-local, align 4
  %v2_11d88 = add i32 %v1_11d80, %v1_11d84
  %v1_11d8c = load i32, i32* @sb, align 4
  %v2_11d8c = add i32 %v2_11d88, %v1_11d8c
  store i32 %v2_11d8c, i32* %r3.global-to-local, align 4
  %v2_11d90 = sub i32 0, %v3_11d7c
  %v3_11d90 = and i32 %v2_11d8c, %v2_11d90
  store i32 %v3_11d90, i32* @r7, align 4
  %v2_11d94 = sub i32 %v3_11d90, %v3_11d78
  store i32 %v2_11d94, i32* @fp, align 4
  %v9_11d98 = icmp eq i32 %v1_11b8c, %v2_11d94
  br i1 %v9_11d98, label %dec_label_pc_11e0c, label %dec_label_pc_11da0

dec_label_pc_11da0:                               ; preds = %dec_label_pc_11d6c
  %v2_11da0 = sub i32 %v1_11b88, %v3_11d78
  store i32 %v2_11da0, i32* %r0.global-to-local, align 4
  %v2_11da4 = add i32 %v3_11d78, %v1_11b8c
  store i32 %v2_11da4, i32* %r1.global-to-local, align 4
  store i32 %v3_11d90, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_11db0 = call i32 @function_13734(i32 %v2_11da0, i32 %v2_11da4, i32 %v3_11d90, i32 1)
  store i32 %v4_11db0, i32* %r0.global-to-local, align 4
  %v7_11db4 = icmp eq i32 %v4_11db0, -1
  br i1 %v7_11db4, label %dec_label_pc_11e00, label %dec_label_pc_11dbc

dec_label_pc_11dbc:                               ; preds = %dec_label_pc_11da0
  %v1_11dbc = load i32, i32* @r4, align 4
  %v2_11dbc = add i32 %v1_11dbc, %v4_11db0
  store i32 %v2_11dbc, i32* %r0.global-to-local, align 4
  %v0_11dc0 = load i32, i32* @fp, align 4
  %v1_11dc0 = or i32 %v0_11dc0, 2
  store i32 %v1_11dc0, i32* %r3.global-to-local, align 4
  %v2_11dc4 = add i32 %v2_11dbc, 4
  %v3_11dc4 = inttoptr i32 %v2_11dc4 to i32*
  store i32 %v1_11dc0, i32* %v3_11dc4, align 4
  %v0_11dc8 = load i32, i32* @r8, align 4
  %v1_11dc8 = add i32 %v0_11dc8, 868
  %v2_11dc8 = inttoptr i32 %v1_11dc8 to i32*
  %v3_11dc8 = load i32, i32* %v2_11dc8, align 4
  store i32 %v3_11dc8, i32* %r3.global-to-local, align 4
  %v1_11dcc = add i32 %v0_11dc8, 880
  %v2_11dcc = inttoptr i32 %v1_11dcc to i32*
  %v3_11dcc = load i32, i32* %v2_11dcc, align 4
  store i32 %v3_11dcc, i32* %r2.global-to-local, align 4
  %v0_11dd0 = load i32, i32* @r6, align 4
  %v2_11dd0 = sub i32 %v3_11dc8, %v0_11dd0
  store i32 %v2_11dd0, i32* %r3.global-to-local, align 4
  %v1_11dd4 = load i32, i32* @r7, align 4
  %v2_11dd4 = add i32 %v1_11dd4, %v2_11dd0
  store i32 %v2_11dd4, i32* %r1.global-to-local, align 4
  %v1_11dd8 = add i32 %v0_11dc8, 872
  %v2_11dd8 = inttoptr i32 %v1_11dd8 to i32*
  %v3_11dd8 = load i32, i32* %v2_11dd8, align 4
  store i32 %v3_11dd8, i32* %r3.global-to-local, align 4
  %v1_11de0 = add i32 %v0_11dc8, 884
  %v2_11de0 = inttoptr i32 %v1_11de0 to i32*
  %v3_11de0 = load i32, i32* %v2_11de0, align 4
  store i32 %v3_11de0, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_11dd4, %v3_11dcc
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_11dbc
  store i32 %v2_11dd4, i32* %v2_11dcc, align 4
  %v0_11de8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11de8.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_11dbc, %bb33
  %v1_11de8 = phi i32 [ %v0_11dc8, %dec_label_pc_11dbc ], [ %v1_11de8.pre, %bb33 ]
  %v0_11de8 = phi i32 [ %v2_11dd4, %dec_label_pc_11dbc ], [ %v0_11de8.pre, %bb33 ]
  %v2_11de8 = add i32 %v1_11de8, 868
  %v3_11de8 = inttoptr i32 %v2_11de8 to i32*
  store i32 %v0_11de8, i32* %v3_11de8, align 4
  %v0_11dec = load i32, i32* %r1.global-to-local, align 4
  %v1_11dec = load i32, i32* %r3.global-to-local, align 4
  %v2_11dec = add i32 %v1_11dec, %v0_11dec
  store i32 %v2_11dec, i32* %r1.global-to-local, align 4
  %v1_11df0 = load i32, i32* %r2.global-to-local, align 4
  %v0_11df4 = load i32, i32* %r0.global-to-local, align 4
  %v1_11df4 = add i32 %v0_11df4, 8
  store i32 %v1_11df4, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_11dec, %v1_11df0
  br i1 %tmp43, label %bb35, label %dec_label_pc_11e38

bb35:                                             ; preds = %bb34
  %v5_11df8 = load i32, i32* @r8, align 4
  %v6_11df8 = add i32 %v5_11df8, 884
  %v7_11df8 = inttoptr i32 %v6_11df8 to i32*
  store i32 %v2_11dec, i32* %v7_11df8, align 4
  br label %dec_label_pc_11e38

dec_label_pc_11e00:                               ; preds = %dec_label_pc_11da0
  %v0_11e00 = load i32, i32* @sb, align 4
  %v1_11e00 = add i32 %v0_11e00, 4
  store i32 %v1_11e00, i32* %r3.global-to-local, align 4
  %v0_11e04 = load i32, i32* @r6, align 4
  %v3_11e04 = icmp ult i32 %v0_11e04, %v1_11e00
  br i1 %v3_11e04, label %dec_label_pc_11e14, label %dec_label_pc_11e00.dec_label_pc_11e0c_crit_edge

dec_label_pc_11e00.dec_label_pc_11e0c_crit_edge:  ; preds = %dec_label_pc_11e00
  %v0_11e0c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11e0c

dec_label_pc_11e0c:                               ; preds = %dec_label_pc_11e00.dec_label_pc_11e0c_crit_edge, %dec_label_pc_11d6c
  %v0_11e0c = phi i32 [ %v0_11e0c.pre, %dec_label_pc_11e00.dec_label_pc_11e0c_crit_edge ], [ %v0_11b74, %dec_label_pc_11d6c ]
  store i32 %v0_11e0c, i32* @r4, align 4
  br label %dec_label_pc_11e38

dec_label_pc_11e14:                               ; preds = %dec_label_pc_11e00
  %v1_11e14 = add i32 %v0_11e00, -7
  store i32 %v1_11e14, i32* @r0, align 4
  %v0_11e18 = call i32 @function_11078()
  store i32 %v0_11e18, i32* @r0, align 4
  store i32 %v0_11e18, i32* @r4, align 4
  %v2_11e1c = icmp eq i32 %v0_11e18, 0
  br i1 %v2_11e1c, label %dec_label_pc_11e38, label %dec_label_pc_11e24

dec_label_pc_11e24:                               ; preds = %dec_label_pc_11e14
  %v0_11e24 = load i32, i32* @r6, align 4
  %v1_11e24 = add i32 %v0_11e24, -8
  store i32 %v1_11e24, i32* @r2, align 4
  %v0_11e28 = load i32, i32* @r5, align 4
  store i32 %v0_11e28, i32* @r1, align 4
  %v0_11e2c = call i32 @function_10b70()
  %v0_11e30 = load i32, i32* @r5, align 4
  store i32 %v0_11e30, i32* @r0, align 4
  %v0_11e34 = call i32 @function_120e4()
  store i32 %v0_11e34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e38

dec_label_pc_11e38:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_11e14, %dec_label_pc_11e0c, %dec_label_pc_11d64, %.thread6, %dec_label_pc_11bd4, %dec_label_pc_11e24
  store i32 %v2_11b28, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v4_11e48 = load i32, i32* inttoptr (i32 122920 to i32*), align 8
  store i32 %v4_11e48, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_11e48)
  br label %dec_label_pc_11e54

dec_label_pc_11e54:                               ; preds = %dec_label_pc_11b5c, %dec_label_pc_11b04, %dec_label_pc_11aec, %dec_label_pc_11e38
  %v0_11e54 = load i32, i32* @r4, align 4
  store i32 %v0_11e54, i32* %r0.global-to-local, align 4
  store i32 %v3_11acc, i32* @r4, align 4
  store i32 %v6_11acc, i32* @r5, align 4
  store i32 %v9_11acc, i32* @r6, align 4
  store i32 %v12_11acc, i32* @r7, align 4
  store i32 %v15_11acc, i32* @r8, align 4
  store i32 %v18_11acc, i32* @sb, align 4
  store i32 %v21_11acc, i32* @sl, align 4
  store i32 %v24_11acc, i32* @fp, align 4
  store i32 %v27_11acc, i32* @lr, align 4
  ret i32 %v0_11e54

; uselistorder directives
  uselistorder i32 %v2_11dec, { 1, 0, 2 }
  uselistorder i32 %v2_11dd4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11db0, { 1, 0, 2 }
  uselistorder i32 %v3_11d90, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11d34, { 2, 1, 0 }
  uselistorder i32 %v2_11d04, { 1, 0, 2 }
  uselistorder i32 %v0_11c98, { 1, 0 }
  uselistorder i32 %v0_11c54, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_11bb8, { 0, 2, 1, 3 }
  uselistorder i32 %v2_11bb0, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_11b94, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_11b8c, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_11b88, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_11b78, { 1, 0 }
  uselistorder i32 %v0_11b74, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_11b54, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 27, 5, 10, 6, 7, 8, 9, 20, 11, 13, 12, 19, 21, 14, 15, 16, 17, 18, 24, 23, 22, 25, 26 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_11e54, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11e38, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_11d64, { 1, 0 }
  uselistorder label %dec_label_pc_11d04, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_11c50, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11c44, { 1, 0 }
  uselistorder label %dec_label_pc_11c40, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_11e68(i32 %arg1) local_unnamed_addr {
dec_label_pc_11e68:
  %v0_11e68 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11e68, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_11e68
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11e68, %bb
  %v10_11e7c = phi i32 [ %arg1, %dec_label_pc_11e68 ], [ 0, %bb ]
  ret i32 %v10_11e7c

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_11e80(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11e80:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_11e80 = add i32 %arg2, 44
  %v2_11e80 = inttoptr i32 %v1_11e80 to i32*
  %v3_11e80 = load i32, i32* %v2_11e80, align 4
  %v1_11e88 = add i32 %v3_11e80, 4
  %v2_11e88 = inttoptr i32 %v1_11e88 to i32*
  %v3_11e88 = load i32, i32* %v2_11e88, align 4
  %v1_11e8c = add i32 %arg2, 860
  %v2_11e8c = inttoptr i32 %v1_11e8c to i32*
  %v3_11e8c = load i32, i32* %v2_11e8c, align 4
  store i32 %v3_11e8c, i32* @r4, align 4
  %v1_11e90 = and i32 %v3_11e88, -4
  store i32 %v1_11e90, i32* @r6, align 4
  %v1_11e94 = add i32 %v1_11e90, -17
  %v2_11e98 = add i32 %v1_11e94, %v3_11e8c
  store i32 %arg2, i32* @r5, align 4
  %v2_11ea4 = sub i32 %v2_11e98, %arg1
  store i32 %v2_11ea4, i32* @r0, align 4
  store i32 %v3_11e8c, i32* @r1, align 4
  %v0_11eac = call i32 @function_10114()
  %v1_11eb0 = add i32 %v0_11eac, -1
  store i32 %v1_11eb0, i32* %r0.global-to-local, align 4
  %v0_11eb4 = load i32, i32* @r4, align 4
  %v2_11eb4 = mul i32 %v0_11eb4, %v1_11eb0
  store i32 %v2_11eb4, i32* %r7.global-to-local, align 4
  %v2_11eb8 = icmp eq i32 %v2_11eb4, 0
  store i1 %v2_11eb8, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_11eb4, 1
  br i1 %tmp8, label %dec_label_pc_11f20, label %dec_label_pc_11ec0

dec_label_pc_11ec0:                               ; preds = %dec_label_pc_11e80
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11ec4 = call i32 @function_133f0(i32 0)
  store i32 %v1_11ec4, i32* %r0.global-to-local, align 4
  %v0_11ec8 = load i32, i32* @r5, align 4
  %v1_11ec8 = add i32 %v0_11ec8, 44
  %v2_11ec8 = inttoptr i32 %v1_11ec8 to i32*
  %v3_11ec8 = load i32, i32* %v2_11ec8, align 4
  %v0_11ecc = load i32, i32* @r6, align 4
  %v2_11ecc = add i32 %v0_11ecc, %v3_11ec8
  %v9_11ed0 = icmp eq i32 %v1_11ec4, %v2_11ecc
  store i1 %v9_11ed0, i1* @cpsr_z, align 1
  store i32 %v1_11ec4, i32* @r4, align 4
  br i1 %v9_11ed0, label %dec_label_pc_11edc, label %dec_label_pc_11f20

dec_label_pc_11edc:                               ; preds = %dec_label_pc_11ec0
  %v0_11edc = load i32, i32* %r7.global-to-local, align 4
  %v1_11edc = sub i32 0, %v0_11edc
  store i32 %v1_11edc, i32* %r0.global-to-local, align 4
  %v1_11ee0 = call i32 @function_133f0(i32 %v1_11edc)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11ee8 = call i32 @function_133f0(i32 0)
  store i32 %v1_11ee8, i32* %r0.global-to-local, align 4
  %v7_11eec = icmp eq i32 %v1_11ee8, -1
  store i1 %v7_11eec, i1* @cpsr_z, align 1
  br i1 %v7_11eec, label %dec_label_pc_11f20, label %dec_label_pc_11ef4

dec_label_pc_11ef4:                               ; preds = %dec_label_pc_11edc
  %v0_11ef4 = load i32, i32* @r4, align 4
  %v2_11ef4 = sub i32 %v0_11ef4, %v1_11ee8
  store i32 %v2_11ef4, i32* %r0.global-to-local, align 4
  %v9_11ef4 = icmp eq i32 %v0_11ef4, %v1_11ee8
  store i1 %v9_11ef4, i1* @cpsr_z, align 1
  br i1 %v9_11ef4, label %dec_label_pc_11f20, label %dec_label_pc_11efc

dec_label_pc_11efc:                               ; preds = %dec_label_pc_11ef4
  %v0_11efc = load i32, i32* @r5, align 4
  %v1_11efc = add i32 %v0_11efc, 872
  %v2_11efc = inttoptr i32 %v1_11efc to i32*
  %v3_11efc = load i32, i32* %v2_11efc, align 4
  %v1_11f00 = load i32, i32* @r6, align 4
  %v2_11f00 = sub i32 %v1_11f00, %v2_11ef4
  store i32 %v2_11f00, i32* %r2.global-to-local, align 4
  %v1_11f04 = add i32 %v0_11efc, 44
  %v2_11f04 = inttoptr i32 %v1_11f04 to i32*
  %v3_11f04 = load i32, i32* %v2_11f04, align 4
  store i32 %v3_11f04, i32* %r1.global-to-local, align 4
  %v2_11f08 = sub i32 %v3_11efc, %v2_11ef4
  %v1_11f0c = or i32 %v2_11f00, 1
  store i32 %v1_11f0c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_11f08, i32* %v2_11efc, align 4
  %v0_11f18 = load i32, i32* %r2.global-to-local, align 4
  %v1_11f18 = load i32, i32* %r1.global-to-local, align 4
  %v2_11f18 = add i32 %v1_11f18, 4
  %v3_11f18 = inttoptr i32 %v2_11f18 to i32*
  store i32 %v0_11f18, i32* %v3_11f18, align 4
  %v1_11f2c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f24

dec_label_pc_11f20:                               ; preds = %dec_label_pc_11ec0, %dec_label_pc_11ef4, %dec_label_pc_11edc, %dec_label_pc_11e80
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f24

dec_label_pc_11f24:                               ; preds = %dec_label_pc_11efc, %dec_label_pc_11f20
  %v1_11f2c = phi i32 [ %v1_11f2c.pre, %dec_label_pc_11efc ], [ 0, %dec_label_pc_11f20 ]
  ret i32 %v1_11f2c

; uselistorder directives
  uselistorder i1 %v7_11eec, { 1, 0 }
  uselistorder i32 %v1_11ee8, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_133f0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_10114, { 3, 2, 1, 4, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_11f24, { 1, 0 }
  uselistorder label %dec_label_pc_11f20, { 1, 2, 0, 3 }
}

define i32 @function_11f30() local_unnamed_addr {
dec_label_pc_11f30:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11f30 = load i32, i32* @r4, align 4
  store i32 %v3_11f30, i32* %stack_var_-36, align 4
  %v0_11f34 = load i32, i32* @r0, align 4
  %v1_11f34 = inttoptr i32 %v0_11f34 to i32*
  %v2_11f34 = load i32, i32* %v1_11f34, align 4
  store i32 %v2_11f34, i32* %r3.global-to-local, align 4
  %v2_11f38 = icmp eq i32 %v2_11f34, 0
  store i32 %v0_11f34, i32* @r4, align 4
  br i1 %v2_11f38, label %dec_label_pc_12070.preheader, label %dec_label_pc_11f4c

dec_label_pc_12070.preheader:                     ; preds = %dec_label_pc_11f30
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1207825 = add i32 %v0_11f34, 52
  store i32 %v1_1207825, i32* %r3.global-to-local, align 4
  %v2_1208026 = add i32 %v0_11f34, 60
  %v3_1208027 = inttoptr i32 %v2_1208026 to i32*
  store i32 %v1_1207825, i32* %v3_1208027, align 4
  %v0_1208428 = load i32, i32* %r3.global-to-local, align 4
  %v2_1208429 = add i32 %v0_1208428, 12
  %v3_1208430 = inttoptr i32 %v2_1208429 to i32*
  store i32 %v0_1208428, i32* %v3_1208430, align 4
  br label %dec_label_pc_12070.dec_label_pc_12070_crit_edge

dec_label_pc_11f4c:                               ; preds = %dec_label_pc_11f30
  %v1_11f4c = and i32 %v2_11f34, -3
  %v3_11f50 = udiv i32 %v2_11f34, 8
  store i32 %v3_11f50, i32* %r2.global-to-local, align 4
  store i32 %v1_11f4c, i32* %v1_11f34, align 4
  %v0_11f58 = load i32, i32* @r0, align 4
  %v1_11f58 = add i32 %v0_11f58, -4
  store i32 %v1_11f58, i32* %r3.global-to-local, align 4
  %v1_11f5c = load i32, i32* %r2.global-to-local, align 4
  %v4_11f5c = mul i32 %v1_11f5c, 4
  %v5_11f5c = add i32 %v4_11f5c, %v1_11f58
  store i32 %v5_11f5c, i32* %sb.global-to-local, align 4
  %v1_11f60 = add i32 %v0_11f58, 52
  store i32 %v1_11f60, i32* %r7.global-to-local, align 4
  %v1_11f64 = add i32 %v0_11f58, 4
  store i32 %v1_11f64, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_11f6c

dec_label_pc_11f6c:                               ; preds = %dec_label_pc_12068, %dec_label_pc_11f4c
  %v1_1206010 = phi i32 [ %v1_12060, %dec_label_pc_12068 ], [ %v5_11f5c, %dec_label_pc_11f4c ]
  %v1_11f78 = phi i32 [ %v1_12068, %dec_label_pc_12068 ], [ %v1_11f64, %dec_label_pc_11f4c ]
  %v1_11f6c = inttoptr i32 %v1_11f78 to i32*
  %v2_11f6c = load i32, i32* %v1_11f6c, align 4
  store i32 %v2_11f6c, i32* %r1.global-to-local, align 4
  %v2_11f70 = icmp eq i32 %v2_11f6c, 0
  br i1 %v2_11f70, label %dec_label_pc_12060, label %dec_label_pc_11f78

dec_label_pc_11f78:                               ; preds = %dec_label_pc_11f6c
  %v0_11f78 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_11f78, i32* %v1_11f6c, align 4
  %v0_11f7c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f7c

dec_label_pc_11f7c:                               ; preds = %dec_label_pc_12054, %dec_label_pc_11f78
  %v0_11f98 = phi i32 [ %v0_12054, %dec_label_pc_12054 ], [ %v0_11f7c.pre, %dec_label_pc_11f78 ]
  %v1_11f7c = add i32 %v0_11f98, 4
  %v2_11f7c = inttoptr i32 %v1_11f7c to i32*
  %v3_11f7c = load i32, i32* %v2_11f7c, align 4
  store i32 %v3_11f7c, i32* %r3.global-to-local, align 4
  %v1_11f80 = and i32 %v3_11f7c, -2
  store i32 %v1_11f80, i32* %lr.global-to-local, align 4
  %v2_11f84 = add i32 %v1_11f80, %v0_11f98
  store i32 %v2_11f84, i32* @r0, align 4
  %v1_11f88 = urem i32 %v3_11f7c, 2
  %v2_11f88 = icmp eq i32 %v1_11f88, 0
  %v1_11f8c = add i32 %v0_11f98, 8
  %v2_11f8c = inttoptr i32 %v1_11f8c to i32*
  %v3_11f8c = load i32, i32* %v2_11f8c, align 4
  store i32 %v3_11f8c, i32* %sl.global-to-local, align 4
  %v1_11f90 = add i32 %v2_11f84, 4
  %v2_11f90 = inttoptr i32 %v1_11f90 to i32*
  %v3_11f90 = load i32, i32* %v2_11f90, align 4
  store i32 %v3_11f90, i32* %r8.global-to-local, align 4
  br i1 %v2_11f88, label %dec_label_pc_11f98, label %dec_label_pc_11fcc

dec_label_pc_11f98:                               ; preds = %dec_label_pc_11f7c
  %v1_11f98 = inttoptr i32 %v0_11f98 to i32*
  %v2_11f98 = load i32, i32* %v1_11f98, align 4
  store i32 %v2_11f98, i32* %r5.global-to-local, align 4
  %v2_11f9c = sub i32 %v0_11f98, %v2_11f98
  store i32 %v2_11f9c, i32* %r3.global-to-local, align 4
  %v1_11fa0 = add i32 %v2_11f9c, 8
  %v2_11fa0 = inttoptr i32 %v1_11fa0 to i32*
  %v3_11fa0 = load i32, i32* %v2_11fa0, align 4
  store i32 %v3_11fa0, i32* @ip, align 4
  %v1_11fa4 = add i32 %v3_11fa0, 12
  %v2_11fa4 = inttoptr i32 %v1_11fa4 to i32*
  %v3_11fa4 = load i32, i32* %v2_11fa4, align 4
  store i32 %v3_11fa4, i32* %r1.global-to-local, align 4
  %v9_11fa8 = icmp eq i32 %v3_11fa4, %v2_11f9c
  %v1_11fac = add i32 %v2_11f9c, 12
  %v2_11fac = inttoptr i32 %v1_11fac to i32*
  %v3_11fac = load i32, i32* %v2_11fac, align 4
  store i32 %v3_11fac, i32* %r2.global-to-local, align 4
  br i1 %v9_11fa8, label %dec_label_pc_11fb4, label %dec_label_pc_12010

dec_label_pc_11fb4:                               ; preds = %dec_label_pc_11f98
  %v1_11fb4 = add i32 %v3_11fac, 8
  %v2_11fb4 = inttoptr i32 %v1_11fb4 to i32*
  %v3_11fb4 = load i32, i32* %v2_11fb4, align 4
  store i32 %v3_11fb4, i32* %r3.global-to-local, align 4
  %v9_11fb8 = icmp eq i32 %v3_11fb4, %v2_11f9c
  br i1 %v9_11fb8, label %dec_label_pc_11fc0, label %dec_label_pc_12010

dec_label_pc_11fc0:                               ; preds = %dec_label_pc_11fb4
  store i32 %v3_11fa0, i32* %v2_11fb4, align 4
  %v0_11fc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11fc4 = load i32, i32* @ip, align 4
  %v2_11fc4 = add i32 %v1_11fc4, 12
  %v3_11fc4 = inttoptr i32 %v2_11fc4 to i32*
  store i32 %v0_11fc4, i32* %v3_11fc4, align 4
  %v0_11fc8 = load i32, i32* %lr.global-to-local, align 4
  %v1_11fc8 = load i32, i32* %r5.global-to-local, align 4
  %v2_11fc8 = add i32 %v1_11fc8, %v0_11fc8
  store i32 %v2_11fc8, i32* %lr.global-to-local, align 4
  %v0_11fd0.pre = load i32, i32* @r0, align 4
  %v0_11fd4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_11fcc

dec_label_pc_11fcc:                               ; preds = %dec_label_pc_11f7c, %dec_label_pc_11fc0
  %v0_12044 = phi i32 [ %v1_11f80, %dec_label_pc_11f7c ], [ %v2_11fc8, %dec_label_pc_11fc0 ]
  %v0_11fd4 = phi i32 [ %v3_11f90, %dec_label_pc_11f7c ], [ %v0_11fd4.pre, %dec_label_pc_11fc0 ]
  %v1_11fe8 = phi i32 [ %v2_11f84, %dec_label_pc_11f7c ], [ %v0_11fd0.pre, %dec_label_pc_11fc0 ]
  %v0_11fcc = load i32, i32* @r4, align 4
  %v1_11fcc = add i32 %v0_11fcc, 44
  %v2_11fcc = inttoptr i32 %v1_11fcc to i32*
  %v3_11fcc = load i32, i32* %v2_11fcc, align 4
  store i32 %v3_11fcc, i32* %r3.global-to-local, align 4
  %v9_11fd0 = icmp eq i32 %v1_11fe8, %v3_11fcc
  %v1_11fd4 = and i32 %v0_11fd4, -4
  store i32 %v1_11fd4, i32* %r5.global-to-local, align 4
  br i1 %v9_11fd0, label %dec_label_pc_12044, label %dec_label_pc_11fdc

dec_label_pc_11fdc:                               ; preds = %dec_label_pc_11fcc
  %v2_11fdc = add i32 %v1_11fe8, %v1_11fd4
  store i32 %v2_11fdc, i32* %r3.global-to-local, align 4
  %v1_11fe0 = add i32 %v2_11fdc, 4
  %v2_11fe0 = inttoptr i32 %v1_11fe0 to i32*
  %v3_11fe0 = load i32, i32* %v2_11fe0, align 4
  store i32 %v3_11fe0, i32* %r3.global-to-local, align 4
  %v1_11fe4 = urem i32 %v3_11fe0, 2
  %v2_11fe4 = icmp eq i32 %v1_11fe4, 0
  %v2_11fe8 = add i32 %v1_11fe8, 4
  %v3_11fe8 = inttoptr i32 %v2_11fe8 to i32*
  store i32 %v1_11fd4, i32* %v3_11fe8, align 4
  br i1 %v2_11fe4, label %dec_label_pc_11ff0, label %dec_label_pc_11fdc.dec_label_pc_12020_crit_edge

dec_label_pc_11fdc.dec_label_pc_12020_crit_edge:  ; preds = %dec_label_pc_11fdc
  %v0_12024.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12020

dec_label_pc_11ff0:                               ; preds = %dec_label_pc_11fdc
  %v0_11ff0 = load i32, i32* @r0, align 4
  %v1_11ff0 = add i32 %v0_11ff0, 8
  %v2_11ff0 = inttoptr i32 %v1_11ff0 to i32*
  %v3_11ff0 = load i32, i32* %v2_11ff0, align 4
  store i32 %v3_11ff0, i32* @ip, align 4
  %v1_11ff4 = add i32 %v3_11ff0, 12
  %v2_11ff4 = inttoptr i32 %v1_11ff4 to i32*
  %v3_11ff4 = load i32, i32* %v2_11ff4, align 4
  store i32 %v3_11ff4, i32* %r3.global-to-local, align 4
  %v9_11ff8 = icmp eq i32 %v3_11ff4, %v0_11ff0
  %v1_11ffc = add i32 %v0_11ff0, 12
  %v2_11ffc = inttoptr i32 %v1_11ffc to i32*
  %v3_11ffc = load i32, i32* %v2_11ffc, align 4
  store i32 %v3_11ffc, i32* %r2.global-to-local, align 4
  br i1 %v9_11ff8, label %dec_label_pc_12004, label %dec_label_pc_12010

dec_label_pc_12004:                               ; preds = %dec_label_pc_11ff0
  %v1_12004 = add i32 %v3_11ffc, 8
  %v2_12004 = inttoptr i32 %v1_12004 to i32*
  %v3_12004 = load i32, i32* %v2_12004, align 4
  store i32 %v3_12004, i32* %r3.global-to-local, align 4
  %v9_12008 = icmp eq i32 %v3_12004, %v0_11ff0
  br i1 %v9_12008, label %dec_label_pc_12014, label %dec_label_pc_12010

dec_label_pc_12010:                               ; preds = %dec_label_pc_11ff0, %dec_label_pc_11fb4, %dec_label_pc_11f98, %dec_label_pc_12004
  %v0_12010 = call i32 @function_12360()
  store i32 %v0_12010, i32* @r0, align 4
  %v0_12014.pre = load i32, i32* @ip, align 4
  %v1_12014.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12014

dec_label_pc_12014:                               ; preds = %dec_label_pc_12004, %dec_label_pc_12010
  %v1_12014 = phi i32 [ %v3_11ffc, %dec_label_pc_12004 ], [ %v1_12014.pre, %dec_label_pc_12010 ]
  %v0_12014 = phi i32 [ %v3_11ff0, %dec_label_pc_12004 ], [ %v0_12014.pre, %dec_label_pc_12010 ]
  %v2_12014 = add i32 %v1_12014, 8
  %v3_12014 = inttoptr i32 %v2_12014 to i32*
  store i32 %v0_12014, i32* %v3_12014, align 4
  %v0_12018 = load i32, i32* %r2.global-to-local, align 4
  %v1_12018 = load i32, i32* @ip, align 4
  %v2_12018 = add i32 %v1_12018, 12
  %v3_12018 = inttoptr i32 %v2_12018 to i32*
  store i32 %v0_12018, i32* %v3_12018, align 4
  %v0_1201c = load i32, i32* %lr.global-to-local, align 4
  %v1_1201c = load i32, i32* %r5.global-to-local, align 4
  %v2_1201c = add i32 %v1_1201c, %v0_1201c
  store i32 %v2_1201c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12020

dec_label_pc_12020:                               ; preds = %dec_label_pc_11fdc.dec_label_pc_12020_crit_edge, %dec_label_pc_12014
  %v0_12024 = phi i32 [ %v0_12024.pre, %dec_label_pc_11fdc.dec_label_pc_12020_crit_edge ], [ %v2_1201c, %dec_label_pc_12014 ]
  %v0_12020 = load i32, i32* %r7.global-to-local, align 4
  %v1_12020 = add i32 %v0_12020, 8
  %v2_12020 = inttoptr i32 %v1_12020 to i32*
  %v3_12020 = load i32, i32* %v2_12020, align 4
  store i32 %v3_12020, i32* %r2.global-to-local, align 4
  %v1_12024 = or i32 %v0_12024, 1
  store i32 %v1_12024, i32* %r3.global-to-local, align 4
  %v0_12028 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12028, i32* %v2_12020, align 4
  %v0_1202c = load i32, i32* %r1.global-to-local, align 4
  %v1_1202c = load i32, i32* %r2.global-to-local, align 4
  %v2_1202c = add i32 %v1_1202c, 12
  %v3_1202c = inttoptr i32 %v2_1202c to i32*
  store i32 %v0_1202c, i32* %v3_1202c, align 4
  %v0_12030 = load i32, i32* %lr.global-to-local, align 4
  %v1_12030 = load i32, i32* %r1.global-to-local, align 4
  %v3_12030 = add i32 %v1_12030, %v0_12030
  %v4_12030 = inttoptr i32 %v3_12030 to i32*
  store i32 %v0_12030, i32* %v4_12030, align 4
  %v0_12034 = load i32, i32* %r3.global-to-local, align 4
  %v1_12034 = load i32, i32* %r1.global-to-local, align 4
  %v2_12034 = add i32 %v1_12034, 4
  %v3_12034 = inttoptr i32 %v2_12034 to i32*
  store i32 %v0_12034, i32* %v3_12034, align 4
  %v0_12038 = load i32, i32* %r2.global-to-local, align 4
  %v1_12038 = load i32, i32* %r1.global-to-local, align 4
  %v2_12038 = add i32 %v1_12038, 8
  %v3_12038 = inttoptr i32 %v2_12038 to i32*
  store i32 %v0_12038, i32* %v3_12038, align 4
  %v0_1203c = load i32, i32* %r7.global-to-local, align 4
  %v1_1203c = load i32, i32* %r1.global-to-local, align 4
  %v2_1203c = add i32 %v1_1203c, 12
  %v3_1203c = inttoptr i32 %v2_1203c to i32*
  store i32 %v0_1203c, i32* %v3_1203c, align 4
  br label %dec_label_pc_12054

dec_label_pc_12044:                               ; preds = %dec_label_pc_11fcc
  %v2_12044 = add i32 %v1_11fd4, %v0_12044
  %v1_12048 = or i32 %v2_12044, 1
  store i32 %v1_12048, i32* %r3.global-to-local, align 4
  %v1_1204c = load i32, i32* %r1.global-to-local, align 4
  %v2_1204c = add i32 %v1_1204c, 4
  %v3_1204c = inttoptr i32 %v2_1204c to i32*
  store i32 %v1_12048, i32* %v3_1204c, align 4
  %v0_12050 = load i32, i32* %r1.global-to-local, align 4
  %v1_12050 = load i32, i32* @r4, align 4
  %v2_12050 = add i32 %v1_12050, 44
  %v3_12050 = inttoptr i32 %v2_12050 to i32*
  store i32 %v0_12050, i32* %v3_12050, align 4
  br label %dec_label_pc_12054

dec_label_pc_12054:                               ; preds = %dec_label_pc_12020, %dec_label_pc_12044
  %v0_12054 = load i32, i32* %sl.global-to-local, align 4
  %v2_12054 = icmp eq i32 %v0_12054, 0
  store i32 %v0_12054, i32* %r1.global-to-local, align 4
  br i1 %v2_12054, label %dec_label_pc_12060.loopexit, label %dec_label_pc_11f7c

dec_label_pc_12060.loopexit:                      ; preds = %dec_label_pc_12054
  %v0_12060.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_12060.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12060

dec_label_pc_12060:                               ; preds = %dec_label_pc_12060.loopexit, %dec_label_pc_11f6c
  %v1_12060 = phi i32 [ %v1_12060.pre, %dec_label_pc_12060.loopexit ], [ %v1_1206010, %dec_label_pc_11f6c ]
  %v0_12068 = phi i32 [ %v0_12060.pre, %dec_label_pc_12060.loopexit ], [ %v1_11f78, %dec_label_pc_11f6c ]
  %v9_12060 = icmp eq i32 %v0_12068, %v1_12060
  br i1 %v9_12060, label %dec_label_pc_120d8, label %dec_label_pc_12068

dec_label_pc_12068:                               ; preds = %dec_label_pc_12060
  %v1_12068 = add i32 %v0_12068, 4
  store i32 %v1_12068, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11f6c

dec_label_pc_12070.dec_label_pc_12070_crit_edge:  ; preds = %dec_label_pc_12070.preheader, %dec_label_pc_12070.dec_label_pc_12070_crit_edge
  %v0_12070.pre = load i32, i32* @r4, align 4
  %v1_12070.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_12070 = mul i32 %v1_12070.pre, 8
  %v5_12070 = add i32 %v4_12070, %v0_12070.pre
  %v1_12074 = add i32 %v1_12070.pre, 1
  store i32 %v1_12074, i32* %r2.global-to-local, align 4
  %v1_12078 = add i32 %v5_12070, 44
  store i32 %v1_12078, i32* %r3.global-to-local, align 4
  %v2_12080 = add i32 %v5_12070, 52
  %v3_12080 = inttoptr i32 %v2_12080 to i32*
  store i32 %v1_12078, i32* %v3_12080, align 4
  %v0_12084 = load i32, i32* %r3.global-to-local, align 4
  %v2_12084 = add i32 %v0_12084, 12
  %v3_12084 = inttoptr i32 %v2_12084 to i32*
  store i32 %v0_12084, i32* %v3_12084, align 4
  %v7_12088 = icmp sgt i32 %v1_12074, 95
  br i1 %v7_12088, label %dec_label_pc_1208c, label %dec_label_pc_12070.dec_label_pc_12070_crit_edge

dec_label_pc_1208c:                               ; preds = %dec_label_pc_12070.dec_label_pc_12070_crit_edge
  %v0_1208c = load i32, i32* @r4, align 4
  %v1_1208c = inttoptr i32 %v0_1208c to i32*
  %v2_1208c = load i32, i32* %v1_1208c, align 4
  store i32 %v2_1208c, i32* %r2.global-to-local, align 4
  %v1_12090 = add i32 %v0_1208c, 864
  %v2_12090 = inttoptr i32 %v1_12090 to i32*
  %v3_12090 = load i32, i32* %v2_12090, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12098 = urem i32 %v2_1208c, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_120a0 = or i32 %v3_12090, 1
  store i32 %v1_120a0, i32* %r1.global-to-local, align 4
  %v1_120a4 = or i32 %v1_12098, 72
  store i32 %v1_120a4, i32* %r2.global-to-local, align 4
  %v1_120a8 = add i32 %v0_1208c, 52
  store i32 %v1_120a8, i32* @ip, align 4
  %v2_120ac = add i32 %v0_1208c, 840
  %v3_120ac = inttoptr i32 %v2_120ac to i32*
  store i32 0, i32* %v3_120ac, align 4
  %v0_120b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_120b0 = add i32 %v0_120b0, 65536
  store i32 %v1_120b0, i32* %r3.global-to-local, align 4
  %v0_120b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_120b4 = load i32, i32* @r4, align 4
  %v2_120b4 = add i32 %v1_120b4, 836
  %v3_120b4 = inttoptr i32 %v2_120b4 to i32*
  store i32 %v0_120b4, i32* %v3_120b4, align 4
  %v0_120b8 = load i32, i32* %r0.global-to-local, align 4
  %v1_120b8 = load i32, i32* @r4, align 4
  %v2_120b8 = add i32 %v1_120b8, 844
  %v3_120b8 = inttoptr i32 %v2_120b8 to i32*
  store i32 %v0_120b8, i32* %v3_120b8, align 4
  %v1_120bc = load i32, i32* @r4, align 4
  %v2_120bc = add i32 %v1_120bc, 852
  %v3_120bc = inttoptr i32 %v2_120bc to i32*
  store i32 %v1_120b0, i32* %v3_120bc, align 4
  %v1_120c0 = load i32, i32* @r4, align 4
  %v2_120c0 = add i32 %v1_120c0, 864
  %v3_120c0 = inttoptr i32 %v2_120c0 to i32*
  store i32 %v1_120a0, i32* %v3_120c0, align 4
  %v1_120c4 = load i32, i32* @r4, align 4
  %v2_120c4 = inttoptr i32 %v1_120c4 to i32*
  store i32 %v1_120a4, i32* %v2_120c4, align 4
  %v0_120c8 = load i32, i32* @ip, align 4
  %v1_120c8 = load i32, i32* @r4, align 4
  %v2_120c8 = add i32 %v1_120c8, 44
  %v3_120c8 = inttoptr i32 %v2_120c8 to i32*
  store i32 %v0_120c8, i32* %v3_120c8, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_120d0 = call i32 @function_12738(i32 30, i32 %v1_120a0, i32 %v1_120a4, i32 %v1_120b0)
  store i32 %v4_120d0, i32* @r0, align 4
  %v1_120d4 = load i32, i32* @r4, align 4
  %v2_120d4 = add i32 %v1_120d4, 860
  %v3_120d4 = inttoptr i32 %v2_120d4 to i32*
  store i32 %v4_120d0, i32* %v3_120d4, align 4
  br label %dec_label_pc_120d8

dec_label_pc_120d8:                               ; preds = %dec_label_pc_12060, %dec_label_pc_1208c
  %v2_120dc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_120dc, i32* @r4, align 4
  %v1_120e0 = load i32, i32* @r0, align 4
  ret i32 %v1_120e0

; uselistorder directives
  uselistorder i32 %v0_1208c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12084, { 1, 0 }
  uselistorder i32 %v1_12068, { 1, 0 }
  uselistorder i32 %v0_12054, { 0, 2, 1 }
  uselistorder i32 %v0_12030, { 1, 0 }
  uselistorder i32 %v1_11f80, { 1, 0, 2 }
  uselistorder i32 %v0_11f98, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11f58, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 10, 12, 13, 14, 15, 16, 17, 18, 8, 9, 19 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 8, 9, 10, 11, 12, 13, 7 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 5, 0, 3, 4, 2 }
  uselistorder label %dec_label_pc_120d8, { 1, 0 }
  uselistorder label %dec_label_pc_12070.dec_label_pc_12070_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12054, { 1, 0 }
  uselistorder label %dec_label_pc_12020, { 1, 0 }
  uselistorder label %dec_label_pc_12014, { 1, 0 }
  uselistorder label %dec_label_pc_12010, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11fcc, { 1, 0 }
}

define i32 @function_120e4() local_unnamed_addr {
dec_label_pc_120e4:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_120e4 = load i32, i32* @r4, align 4
  %v6_120e4 = load i32, i32* @r5, align 4
  %v9_120e4 = load i32, i32* @r6, align 4
  %v12_120e4 = load i32, i32* @r7, align 4
  %v18_120e4 = load i32, i32* @lr, align 4
  %v0_120ec = load i32, i32* @r0, align 4
  store i32 %v0_120ec, i32* @r6, align 4
  %v2_120ec = icmp eq i32 %v0_120ec, 0
  %v2_120f0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 122896, i32* @r7, align 4
  br i1 %v2_120ec, label %dec_label_pc_122f8, label %dec_label_pc_120fc

dec_label_pc_120fc:                               ; preds = %dec_label_pc_120e4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_12100 = load i32, i32* inttoptr (i32 122964 to i32*), align 4
  store i32 %v4_12100, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_12100, i32* %r2.global-to-local, align 4
  %v4_1210c = load i32, i32* inttoptr (i32 122932 to i32*), align 4
  store i32 %v4_1210c, i32* %r1.global-to-local, align 4
  store i32 %v2_120f0, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_12118 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  store i32 %v4_12118, i32* %ip.global-to-local, align 4
  store i32 74020, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12118)
  %v0_12124 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12124, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_1212c = load i32, i32* @r7, align 4
  %v2_1212c = add i32 %v0_1212c, 16
  %v3_1212c = inttoptr i32 %v2_1212c to i32*
  %v4_1212c = load i32, i32* %v3_1212c, align 4
  store i32 %v4_1212c, i32* %ip.global-to-local, align 4
  store i32 74040, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1212c)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_1213c = load i32, i32* @r7, align 4
  %v2_1213c = add i32 %v0_1213c, 32
  %v3_1213c = inttoptr i32 %v2_1213c to i32*
  %v4_1213c = load i32, i32* %v3_1213c, align 4
  store i32 %v4_1213c, i32* @lr, align 4
  %v0_12140 = load i32, i32* @r6, align 4
  %v1_12140 = add i32 %v0_12140, -4
  %v2_12140 = inttoptr i32 %v1_12140 to i32*
  %v3_12140 = load i32, i32* %v2_12140, align 4
  store i32 %v3_12140, i32* %r2.global-to-local, align 4
  %v1_12144 = inttoptr i32 %v4_1213c to i32*
  %v2_12144 = load i32, i32* %v1_12144, align 4
  store i32 %v2_12144, i32* %r3.global-to-local, align 4
  %v1_12148 = and i32 %v3_12140, -4
  store i32 %v1_12148, i32* %ip.global-to-local, align 4
  %v1_1214c = add i32 %v0_12140, -8
  store i32 %v1_1214c, i32* @r5, align 4
  store i32 %v1_1214c, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_12148, %v2_12144
  br i1 %tmp, label %dec_label_pc_1217c, label %dec_label_pc_1215c

dec_label_pc_1215c:                               ; preds = %dec_label_pc_120fc
  %v1_1215c = or i32 %v2_12144, 3
  store i32 %v1_1215c, i32* %r3.global-to-local, align 4
  store i32 %v1_1215c, i32* %v1_12144, align 4
  %v3_12160 = load i32, i32* @lr, align 4
  %v4_12160 = add i32 %v3_12160, -8
  store i32 %v4_12160, i32* %lr.global-to-local, align 4
  %v0_12164 = load i32, i32* %ip.global-to-local, align 4
  %v3_12164 = udiv i32 %v0_12164, 8
  store i32 %v3_12164, i32* %r1.global-to-local, align 4
  %v1_12168 = add i32 %v3_12160, -4
  store i32 %v1_12168, i32* %r2.global-to-local, align 4
  %v4_1216c = mul nuw i32 %v3_12164, 4
  %v5_1216c = add i32 %v4_1216c, %v1_12168
  %v6_1216c = inttoptr i32 %v5_1216c to i32*
  %v7_1216c = load i32, i32* %v6_1216c, align 4
  store i32 %v7_1216c, i32* %r3.global-to-local, align 4
  %v1_12170 = load i32, i32* @r5, align 4
  %v2_12170 = add i32 %v1_12170, 8
  %v3_12170 = inttoptr i32 %v2_12170 to i32*
  store i32 %v7_1216c, i32* %v3_12170, align 4
  %v0_12174 = load i32, i32* @r5, align 4
  %v1_12174 = load i32, i32* %r2.global-to-local, align 4
  %v2_12174 = load i32, i32* %r1.global-to-local, align 4
  %v5_12174 = mul i32 %v2_12174, 4
  %v6_12174 = add i32 %v5_12174, %v1_12174
  %v7_12174 = inttoptr i32 %v6_12174 to i32*
  store i32 %v0_12174, i32* %v7_12174, align 4
  br label %dec_label_pc_122e0

dec_label_pc_1217c:                               ; preds = %dec_label_pc_120fc
  %v1_1217c = and i32 %v3_12140, 2
  %v2_1217c = icmp eq i32 %v1_1217c, 0
  br i1 %v2_1217c, label %dec_label_pc_12184, label %dec_label_pc_122b8

dec_label_pc_12184:                               ; preds = %dec_label_pc_1217c
  %v1_12184 = or i32 %v2_12144, 1
  store i32 %v1_12184, i32* %r3.global-to-local, align 4
  store i32 %v1_12184, i32* %v1_12144, align 4
  %v0_1218c = load i32, i32* @r6, align 4
  %v1_1218c = add i32 %v0_1218c, -4
  %v2_1218c = inttoptr i32 %v1_1218c to i32*
  %v3_1218c = load i32, i32* %v2_1218c, align 4
  store i32 %v3_1218c, i32* %r3.global-to-local, align 4
  %v0_12190 = load i32, i32* @r5, align 4
  %v1_12190 = load i32, i32* %ip.global-to-local, align 4
  %v2_12190 = add i32 %v1_12190, %v0_12190
  store i32 %v2_12190, i32* %lr.global-to-local, align 4
  %v1_12194 = urem i32 %v3_1218c, 2
  %v2_12194 = icmp eq i32 %v1_12194, 0
  %v1_12198 = add i32 %v2_12190, 4
  %v2_12198 = inttoptr i32 %v1_12198 to i32*
  %v3_12198 = load i32, i32* %v2_12198, align 4
  store i32 %v3_12198, i32* %r8.global-to-local, align 4
  br i1 %v2_12194, label %dec_label_pc_121a0, label %dec_label_pc_121d4

dec_label_pc_121a0:                               ; preds = %dec_label_pc_12184
  %v1_121a0 = add i32 %v0_1218c, -8
  %v2_121a0 = inttoptr i32 %v1_121a0 to i32*
  %v3_121a0 = load i32, i32* %v2_121a0, align 4
  store i32 %v3_121a0, i32* %r1.global-to-local, align 4
  %v2_121a4 = sub i32 %v0_12190, %v3_121a0
  store i32 %v2_121a4, i32* %r3.global-to-local, align 4
  %v1_121a8 = add i32 %v2_121a4, 8
  %v2_121a8 = inttoptr i32 %v1_121a8 to i32*
  %v3_121a8 = load i32, i32* %v2_121a8, align 4
  store i32 %v3_121a8, i32* %r2.global-to-local, align 4
  %v1_121ac = add i32 %v3_121a8, 12
  %v2_121ac = inttoptr i32 %v1_121ac to i32*
  %v3_121ac = load i32, i32* %v2_121ac, align 4
  store i32 %v3_121ac, i32* %r4.global-to-local, align 4
  %v9_121b0 = icmp eq i32 %v3_121ac, %v2_121a4
  %v1_121b4 = add i32 %v2_121a4, 12
  %v2_121b4 = inttoptr i32 %v1_121b4 to i32*
  %v3_121b4 = load i32, i32* %v2_121b4, align 4
  store i32 %v3_121b4, i32* %r0.global-to-local, align 4
  br i1 %v9_121b0, label %dec_label_pc_121bc, label %dec_label_pc_12220

dec_label_pc_121bc:                               ; preds = %dec_label_pc_121a0
  %v1_121bc = add i32 %v3_121b4, 8
  %v2_121bc = inttoptr i32 %v1_121bc to i32*
  %v3_121bc = load i32, i32* %v2_121bc, align 4
  store i32 %v3_121bc, i32* %r3.global-to-local, align 4
  %v9_121c0 = icmp eq i32 %v3_121bc, %v2_121a4
  br i1 %v9_121c0, label %dec_label_pc_121c8, label %dec_label_pc_12220

dec_label_pc_121c8:                               ; preds = %dec_label_pc_121bc
  store i32 %v3_121a8, i32* %v2_121bc, align 4
  %v0_121cc = load i32, i32* %r0.global-to-local, align 4
  %v1_121cc = load i32, i32* %r2.global-to-local, align 4
  %v2_121cc = add i32 %v1_121cc, 12
  %v3_121cc = inttoptr i32 %v2_121cc to i32*
  store i32 %v0_121cc, i32* %v3_121cc, align 4
  %v0_121d0 = load i32, i32* %ip.global-to-local, align 4
  %v1_121d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_121d0 = add i32 %v1_121d0, %v0_121d0
  store i32 %v2_121d0, i32* %ip.global-to-local, align 4
  %v0_121e0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_121e4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_121d4

dec_label_pc_121d4:                               ; preds = %dec_label_pc_12184, %dec_label_pc_121c8
  %v0_12260 = phi i32 [ %v1_12190, %dec_label_pc_12184 ], [ %v2_121d0, %dec_label_pc_121c8 ]
  %v0_121e4 = phi i32 [ %v3_12198, %dec_label_pc_12184 ], [ %v0_121e4.pre, %dec_label_pc_121c8 ]
  %v1_121f8 = phi i32 [ %v2_12190, %dec_label_pc_12184 ], [ %v0_121e0.pre, %dec_label_pc_121c8 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_121d8 = load i32, i32* @r7, align 4
  %v2_121d8 = add i32 %v0_121d8, 32
  %v3_121d8 = inttoptr i32 %v2_121d8 to i32*
  %v4_121d8 = load i32, i32* %v3_121d8, align 4
  store i32 %v4_121d8, i32* %r2.global-to-local, align 4
  %v1_121dc = add i32 %v4_121d8, 44
  %v2_121dc = inttoptr i32 %v1_121dc to i32*
  %v3_121dc = load i32, i32* %v2_121dc, align 4
  store i32 %v3_121dc, i32* %r3.global-to-local, align 4
  %v9_121e0 = icmp eq i32 %v1_121f8, %v3_121dc
  %v1_121e4 = and i32 %v0_121e4, -4
  store i32 %v1_121e4, i32* %r0.global-to-local, align 4
  br i1 %v9_121e0, label %dec_label_pc_12260, label %dec_label_pc_121ec

dec_label_pc_121ec:                               ; preds = %dec_label_pc_121d4
  %v2_121ec = add i32 %v1_121f8, %v1_121e4
  store i32 %v2_121ec, i32* %r3.global-to-local, align 4
  %v1_121f0 = add i32 %v2_121ec, 4
  %v2_121f0 = inttoptr i32 %v1_121f0 to i32*
  %v3_121f0 = load i32, i32* %v2_121f0, align 4
  store i32 %v3_121f0, i32* %r3.global-to-local, align 4
  %v1_121f4 = urem i32 %v3_121f0, 2
  %v2_121f4 = icmp eq i32 %v1_121f4, 0
  %v2_121f8 = add i32 %v1_121f8, 4
  %v3_121f8 = inttoptr i32 %v2_121f8 to i32*
  store i32 %v1_121e4, i32* %v3_121f8, align 4
  br i1 %v2_121f4, label %dec_label_pc_12200, label %dec_label_pc_121ec.dec_label_pc_12230_crit_edge

dec_label_pc_121ec.dec_label_pc_12230_crit_edge:  ; preds = %dec_label_pc_121ec
  %v0_12240.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12230

dec_label_pc_12200:                               ; preds = %dec_label_pc_121ec
  %v0_12200 = load i32, i32* %lr.global-to-local, align 4
  %v1_12200 = add i32 %v0_12200, 8
  %v2_12200 = inttoptr i32 %v1_12200 to i32*
  %v3_12200 = load i32, i32* %v2_12200, align 4
  store i32 %v3_12200, i32* %r1.global-to-local, align 4
  %v1_12204 = add i32 %v3_12200, 12
  %v2_12204 = inttoptr i32 %v1_12204 to i32*
  %v3_12204 = load i32, i32* %v2_12204, align 4
  store i32 %v3_12204, i32* %r3.global-to-local, align 4
  %v9_12208 = icmp eq i32 %v3_12204, %v0_12200
  %v1_1220c = add i32 %v0_12200, 12
  %v2_1220c = inttoptr i32 %v1_1220c to i32*
  %v3_1220c = load i32, i32* %v2_1220c, align 4
  store i32 %v3_1220c, i32* %r2.global-to-local, align 4
  br i1 %v9_12208, label %dec_label_pc_12214, label %dec_label_pc_12220

dec_label_pc_12214:                               ; preds = %dec_label_pc_12200
  %v1_12214 = add i32 %v3_1220c, 8
  %v2_12214 = inttoptr i32 %v1_12214 to i32*
  %v3_12214 = load i32, i32* %v2_12214, align 4
  store i32 %v3_12214, i32* %r3.global-to-local, align 4
  %v9_12218 = icmp eq i32 %v3_12214, %v0_12200
  br i1 %v9_12218, label %dec_label_pc_12224, label %dec_label_pc_12220

dec_label_pc_12220:                               ; preds = %dec_label_pc_12200, %dec_label_pc_121bc, %dec_label_pc_121a0, %dec_label_pc_12214
  %v0_12220 = call i32 @function_12360()
  store i32 %v0_12220, i32* %r0.global-to-local, align 4
  %v0_12224.pre = load i32, i32* @r1, align 4
  %v1_12224.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12224

dec_label_pc_12224:                               ; preds = %dec_label_pc_12214, %dec_label_pc_12220
  %v1_12224 = phi i32 [ %v3_1220c, %dec_label_pc_12214 ], [ %v1_12224.pre, %dec_label_pc_12220 ]
  %v0_12224 = phi i32 [ %v3_12200, %dec_label_pc_12214 ], [ %v0_12224.pre, %dec_label_pc_12220 ]
  %v2_12224 = add i32 %v1_12224, 8
  %v3_12224 = inttoptr i32 %v2_12224 to i32*
  store i32 %v0_12224, i32* %v3_12224, align 4
  %v0_12228 = load i32, i32* %r2.global-to-local, align 4
  %v1_12228 = load i32, i32* %r1.global-to-local, align 4
  %v2_12228 = add i32 %v1_12228, 12
  %v3_12228 = inttoptr i32 %v2_12228 to i32*
  store i32 %v0_12228, i32* %v3_12228, align 4
  %v0_1222c = load i32, i32* %ip.global-to-local, align 4
  %v1_1222c = load i32, i32* %r0.global-to-local, align 4
  %v2_1222c = add i32 %v1_1222c, %v0_1222c
  store i32 %v2_1222c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12230

dec_label_pc_12230:                               ; preds = %dec_label_pc_121ec.dec_label_pc_12230_crit_edge, %dec_label_pc_12224
  %v0_12240 = phi i32 [ %v0_12240.pre, %dec_label_pc_121ec.dec_label_pc_12230_crit_edge ], [ %v2_1222c, %dec_label_pc_12224 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12234 = load i32, i32* @r7, align 4
  %v2_12234 = add i32 %v0_12234, 32
  %v3_12234 = inttoptr i32 %v2_12234 to i32*
  %v4_12234 = load i32, i32* %v3_12234, align 4
  %v1_12238 = add i32 %v4_12234, 52
  store i32 %v1_12238, i32* %r3.global-to-local, align 4
  %v1_1223c = add i32 %v4_12234, 60
  %v2_1223c = inttoptr i32 %v1_1223c to i32*
  %v3_1223c = load i32, i32* %v2_1223c, align 4
  store i32 %v3_1223c, i32* %r1.global-to-local, align 4
  %v1_12240 = or i32 %v0_12240, 1
  store i32 %v1_12240, i32* %r2.global-to-local, align 4
  %v1_12244 = load i32, i32* %r4.global-to-local, align 4
  %v2_12244 = add i32 %v1_12244, 12
  %v3_12244 = inttoptr i32 %v2_12244 to i32*
  store i32 %v1_12238, i32* %v3_12244, align 4
  %v0_12248 = load i32, i32* %r1.global-to-local, align 4
  %v1_12248 = load i32, i32* %r4.global-to-local, align 4
  %v2_12248 = add i32 %v1_12248, 8
  %v3_12248 = inttoptr i32 %v2_12248 to i32*
  store i32 %v0_12248, i32* %v3_12248, align 4
  %v0_1224c = load i32, i32* %r2.global-to-local, align 4
  %v1_1224c = load i32, i32* %r4.global-to-local, align 4
  %v2_1224c = add i32 %v1_1224c, 4
  %v3_1224c = inttoptr i32 %v2_1224c to i32*
  store i32 %v0_1224c, i32* %v3_1224c, align 4
  %v0_12250 = load i32, i32* %ip.global-to-local, align 4
  %v1_12250 = load i32, i32* %r4.global-to-local, align 4
  %v3_12250 = add i32 %v1_12250, %v0_12250
  %v4_12250 = inttoptr i32 %v3_12250 to i32*
  store i32 %v0_12250, i32* %v4_12250, align 4
  %v0_12254 = load i32, i32* %r4.global-to-local, align 4
  %v1_12254 = load i32, i32* %r1.global-to-local, align 4
  %v2_12254 = add i32 %v1_12254, 12
  %v3_12254 = inttoptr i32 %v2_12254 to i32*
  store i32 %v0_12254, i32* %v3_12254, align 4
  %v0_12258 = load i32, i32* %r4.global-to-local, align 4
  %v1_12258 = load i32, i32* %r3.global-to-local, align 4
  %v2_12258 = add i32 %v1_12258, 8
  %v3_12258 = inttoptr i32 %v2_12258 to i32*
  store i32 %v0_12258, i32* %v3_12258, align 4
  br label %dec_label_pc_12270

dec_label_pc_12260:                               ; preds = %dec_label_pc_121d4
  %v2_12260 = add i32 %v1_121e4, %v0_12260
  store i32 %v2_12260, i32* %ip.global-to-local, align 4
  %v1_12264 = or i32 %v2_12260, 1
  store i32 %v1_12264, i32* %r3.global-to-local, align 4
  %v0_12268 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12268, i32* %v2_121dc, align 4
  %v0_1226c = load i32, i32* %r3.global-to-local, align 4
  %v1_1226c = load i32, i32* %r4.global-to-local, align 4
  %v2_1226c = add i32 %v1_1226c, 4
  %v3_1226c = inttoptr i32 %v2_1226c to i32*
  store i32 %v0_1226c, i32* %v3_1226c, align 4
  br label %dec_label_pc_12270

dec_label_pc_12270:                               ; preds = %dec_label_pc_12230, %dec_label_pc_12260
  %v0_12270 = load i32, i32* %ip.global-to-local, align 4
  %v3_12274 = icmp ult i32 %v0_12270, 131070
  br i1 %v3_12274, label %dec_label_pc_122e0, label %dec_label_pc_12278

dec_label_pc_12278:                               ; preds = %dec_label_pc_12270
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_1227c = load i32, i32* @r7, align 4
  %v2_1227c = add i32 %v0_1227c, 32
  %v3_1227c = inttoptr i32 %v2_1227c to i32*
  %v4_1227c = load i32, i32* %v3_1227c, align 4
  store i32 %v4_1227c, i32* @r4, align 4
  %v1_12280 = inttoptr i32 %v4_1227c to i32*
  %v2_12280 = load i32, i32* %v1_12280, align 4
  store i32 %v2_12280, i32* %r3.global-to-local, align 4
  %v1_12284 = and i32 %v2_12280, 2
  %v2_12284 = icmp eq i32 %v1_12284, 0
  br i1 %v2_12284, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_12278
  store i32 %v4_1227c, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_12278, %bb
  store i32 74384, i32* @lr, align 4
  %v1_1228c = xor i1 %v2_12284, true
  call void @__pseudo_cond_branch(i1 %v1_1228c, i32 ptrtoint (i32* @global_var_11f30.444 to i32))
  %v0_12290 = load i32, i32* @r4, align 4
  %v1_12290 = add i32 %v0_12290, 44
  %v2_12290 = inttoptr i32 %v1_12290 to i32*
  %v3_12290 = load i32, i32* %v2_12290, align 4
  store i32 %v3_12290, i32* %r3.global-to-local, align 4
  %v1_12294 = add i32 %v3_12290, 4
  %v2_12294 = inttoptr i32 %v1_12294 to i32*
  %v3_12294 = load i32, i32* %v2_12294, align 4
  store i32 %v3_12294, i32* %r3.global-to-local, align 4
  %v1_12298 = add i32 %v0_12290, 836
  %v2_12298 = inttoptr i32 %v1_12298 to i32*
  %v3_12298 = load i32, i32* %v2_12298, align 4
  store i32 %v3_12298, i32* %r2.global-to-local, align 4
  %v1_1229c = and i32 %v3_12294, -4
  store i32 %v1_1229c, i32* %r3.global-to-local, align 4
  %v3_122a0 = icmp ult i32 %v1_1229c, %v3_12298
  br i1 %v3_122a0, label %dec_label_pc_122e0, label %dec_label_pc_122a8

dec_label_pc_122a8:                               ; preds = %bb15
  store i32 %v0_12290, i32* %r1.global-to-local, align 4
  %v1_122ac = add i32 %v0_12290, 840
  %v2_122ac = inttoptr i32 %v1_122ac to i32*
  %v3_122ac = load i32, i32* %v2_122ac, align 4
  store i32 %v3_122ac, i32* %r0.global-to-local, align 4
  %v2_122b0 = call i32 @function_11e80(i32 %v3_122ac, i32 %v0_12290)
  store i32 %v2_122b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_122e0

dec_label_pc_122b8:                               ; preds = %dec_label_pc_1217c
  %v2_122b8 = inttoptr i32 %v1_1214c to i32*
  %v3_122b8 = load i32, i32* %v2_122b8, align 4
  store i32 %v3_122b8, i32* %r0.global-to-local, align 4
  %v1_122bc = add i32 %v4_1213c, 848
  %v2_122bc = inttoptr i32 %v1_122bc to i32*
  %v3_122bc = load i32, i32* %v2_122bc, align 4
  store i32 %v3_122bc, i32* %r2.global-to-local, align 4
  %v1_122c0 = add i32 %v4_1213c, 868
  %v2_122c0 = inttoptr i32 %v1_122c0 to i32*
  %v3_122c0 = load i32, i32* %v2_122c0, align 4
  %v2_122c4 = add i32 %v3_122b8, %v1_12148
  store i32 %v2_122c4, i32* %r1.global-to-local, align 4
  %v1_122c8 = add i32 %v3_122bc, -1
  store i32 %v1_122c8, i32* %r2.global-to-local, align 4
  %v2_122cc = sub i32 %v3_122c0, %v2_122c4
  store i32 %v2_122cc, i32* %r3.global-to-local, align 4
  store i32 %v2_122cc, i32* %v2_122c0, align 4
  %v1_122d4 = load i32, i32* @lr, align 4
  %v2_122d4 = add i32 %v1_122d4, 848
  %v3_122d4 = inttoptr i32 %v2_122d4 to i32*
  store i32 %v1_122c8, i32* %v3_122d4, align 4
  %v0_122d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_122d8 = load i32, i32* @r5, align 4
  %v2_122d8 = sub i32 %v1_122d8, %v0_122d8
  store i32 %v2_122d8, i32* %r0.global-to-local, align 4
  %v4_122dc = call i32 @function_136cc(i32 %v2_122d8, i32 %v2_122c4, i32 %v1_122c8, i32 %v2_122cc)
  store i32 %v4_122dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_122e0

dec_label_pc_122e0:                               ; preds = %bb15, %dec_label_pc_12270, %dec_label_pc_122a8, %dec_label_pc_1215c, %dec_label_pc_122b8
  store i32 %v2_120f0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_122ec = load i32, i32* @r7, align 4
  %v2_122ec = add i32 %v0_122ec, 24
  %v3_122ec = inttoptr i32 %v2_122ec to i32*
  %v4_122ec = load i32, i32* %v3_122ec, align 4
  store i32 %v4_122ec, i32* @ip, align 4
  store i32 74488, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_122ec)
  br label %dec_label_pc_122f8

dec_label_pc_122f8:                               ; preds = %dec_label_pc_120e4, %dec_label_pc_122e0
  store i32 %v3_120e4, i32* @r4, align 4
  store i32 %v6_120e4, i32* @r5, align 4
  store i32 %v9_120e4, i32* @r6, align 4
  store i32 %v12_120e4, i32* @r7, align 4
  store i32 %v18_120e4, i32* @lr, align 4
  ret i32 %v2_120f0

; uselistorder directives
  uselistorder i32 %v0_12290, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_12250, { 1, 0 }
  uselistorder i32 %v1_12190, { 1, 0 }
  uselistorder i32 %v0_12190, { 1, 0 }
  uselistorder i32 %v3_12164, { 1, 0 }
  uselistorder i32 %v1_12148, { 1, 0, 2 }
  uselistorder i32 %v2_12144, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1213c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_120ec, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 4, 14, 1, 2, 3, 0, 5, 6, 12, 13, 7, 8, 9, 11, 10 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_122f8, { 1, 0 }
  uselistorder label %dec_label_pc_122e0, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_12270, { 1, 0 }
  uselistorder label %dec_label_pc_12230, { 1, 0 }
  uselistorder label %dec_label_pc_12224, { 1, 0 }
  uselistorder label %dec_label_pc_12220, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_121d4, { 1, 0 }
}

define i32 @function_12308(i32 %arg1) local_unnamed_addr {
dec_label_pc_12308:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_12308 = load i1, i1* @cpsr_z, align 1
  %v2_12308 = load i32, i32* @r4, align 4
  br i1 %v0_12308, label %bb, label %dec_label_pc_12308..thread4_crit_edge

dec_label_pc_12308..thread4_crit_edge:            ; preds = %dec_label_pc_12308
  %v0_12334.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_12308
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12308..thread4_crit_edge, %bb
  %v0_12334 = phi i32 [ %v0_12334.pre, %dec_label_pc_12308..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_12308, i32* %stack_var_-12, align 4
  %v6_12320 = load i32, i32* @r5, align 4
  %v9_12320 = load i32, i32* @lr, align 4
  %v4_12330 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_12330, i32* @r5, align 4
  store i32 %v0_12334, i32* @r4, align 4
  store i32 %v4_12330, i32* @r0, align 4
  %v0_12340 = call i32 @function_11f30()
  %v0_12344 = load i32, i32* @r4, align 4
  store i32 %v0_12344, i32* %r0.global-to-local, align 4
  %v0_12348 = load i32, i32* @r5, align 4
  %v2_12350 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12350, i32* @r4, align 4
  store i32 %v6_12320, i32* @r5, align 4
  store i32 %v9_12320, i32* @lr, align 4
  %v2_12354 = call i32 @function_11e80(i32 %v0_12344, i32 %v0_12348)
  store i32 %v2_12354, i32* %r0.global-to-local, align 4
  %v0_12358 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12358, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_1235c = phi i32 [ %v2_12354, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_1235c

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_11e80, { 1, 0 }
  uselistorder i32 ()* @function_11f30, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 122928 to i32*), { 17, 2, 1, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 3 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_12360() local_unnamed_addr {
dec_label_pc_12360:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 122896, i32* @r5, align 4
  %v4_12378 = load i32, i32* inttoptr (i32 122912 to i32*), align 32
  store i32 74628, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12378)
  %v2_12394 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_123a0 = call i32 @function_1060c(i32 1, i32 %v2_12394, i32 0)
  %v4_123a8 = load i32, i32* @global_var_1e2ac.452, align 4
  %v2_123ac = icmp eq i32 %v4_123a8, 0
  br i1 %v2_123ac, label %dec_label_pc_123b4, label %dec_label_pc_123f4

dec_label_pc_123b4:                               ; preds = %dec_label_pc_12360
  store i32 1, i32* @global_var_1e2ac.452, align 4
  br label %dec_label_pc_123bc

dec_label_pc_123bc:                               ; preds = %dec_label_pc_12404, %dec_label_pc_123b4
  %v0_123c0 = load i32, i32* @r5, align 4
  %v2_123c0 = add i32 %v0_123c0, 160
  store i32 %v2_123c0, i32* @r4, align 4
  %v2_123cc = add i32 %v0_123c0, 36
  %v3_123cc = inttoptr i32 %v2_123cc to i32*
  %v4_123cc = load i32, i32* %v3_123cc, align 4
  call void @__pseudo_branch(i32 %v4_123cc)
  %v1_123dc = call i32 @function_10e68(i32 6)
  %v0_123e8 = load i32, i32* @r5, align 4
  %v2_123e8 = add i32 %v0_123e8, 16
  %v3_123e8 = inttoptr i32 %v2_123e8 to i32*
  %v4_123e8 = load i32, i32* %v3_123e8, align 4
  store i32 74740, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_123e8)
  %v4_123f8.pre = load i32, i32* @global_var_1e2ac.452, align 4
  br label %dec_label_pc_123f4

dec_label_pc_123f4:                               ; preds = %dec_label_pc_12360, %dec_label_pc_123bc
  %v0_12408 = phi i32 [ %v4_123a8, %dec_label_pc_12360 ], [ %v4_123f8.pre, %dec_label_pc_123bc ]
  %v7_123fc = icmp eq i32 %v0_12408, 1
  br i1 %v7_123fc, label %dec_label_pc_12404, label %dec_label_pc_12440

dec_label_pc_12404:                               ; preds = %dec_label_pc_123f4
  %v2_12404 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12404, i32* @r4, align 4
  store i32 2, i32* @global_var_1e2ac.452, align 4
  store i32 20, i32* @r2, align 4
  %v2_1241c = bitcast i32* %stack_var_-28 to i8*
  %v3_1241c = call i32 @function_10ac0(i8* %v2_1241c, i32 0)
  %v3_12438 = call i32 @function_131cc(i32 6, i32 %v2_12404, i32 0)
  br label %dec_label_pc_123bc

dec_label_pc_12440:                               ; preds = %dec_label_pc_123f4
  %v7_12440 = icmp eq i32 %v0_12408, 2
  br i1 %v7_12440, label %dec_label_pc_12448, label %dec_label_pc_12454

dec_label_pc_12448:                               ; preds = %dec_label_pc_12440
  store i32 3, i32* @global_var_1e2ac.452, align 4
  %v0_12450 = call i32 @function_12360()
  %v4_12454.pre = load i32, i32* @global_var_1e2ac.452, align 4
  br label %dec_label_pc_12454

dec_label_pc_12454:                               ; preds = %dec_label_pc_12440, %dec_label_pc_12448
  %v1_1245c = phi i32 [ %v0_12408, %dec_label_pc_12440 ], [ %v4_12454.pre, %dec_label_pc_12448 ]
  %v7_12458 = icmp eq i32 %v1_1245c, 3
  br i1 %v7_12458, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12454
  store i32 4, i32* @global_var_1e2ac.452, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12454, %bb
  call void @__pseudo_cond_branch(i1 %v7_12458, i32 ptrtoint (i32* @global_var_137bc.454 to i32))
  br label %dec_label_pc_1246c

dec_label_pc_1246c:                               ; preds = %dec_label_pc_1246c, %.thread1
  %v0_1246c = call i32 @function_12360()
  br label %dec_label_pc_1246c

; uselistorder directives
  uselistorder i32 ()* @function_12360, { 1, 0, 5, 4, 6, 3, 2 }
  uselistorder i32 6, { 13, 14, 60, 3, 27, 28, 15, 26, 1, 29, 16, 30, 0, 17, 18, 19, 4, 20, 31, 32, 33, 5, 34, 35, 36, 37, 6, 38, 39, 40, 41, 7, 42, 8, 43, 44, 21, 45, 9, 46, 47, 48, 22, 49, 10, 50, 51, 23, 52, 53, 54, 55, 56, 24, 57, 11, 58, 61, 62, 63, 64, 65, 25, 66, 12, 67, 2, 59 }
  uselistorder i32* @global_var_1e2ac.452, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 122912 to i32*), { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12454, { 1, 0 }
  uselistorder label %dec_label_pc_123f4, { 1, 0 }
}

define i32 @function_12478(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12478:
  %v0_12478 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12478, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12478
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12478, %bb
  %v4_12484 = phi i32 [ %arg1, %dec_label_pc_12478 ], [ 0, %bb ]
  ret i32 %v4_12484

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12488(i32 %arg1) local_unnamed_addr {
dec_label_pc_12488:
  %stack_var_-16 = alloca i32, align 4
  store i32 122896, i32* @r5, align 4
  %v4_12494 = load i32, i32* inttoptr (i32 122984 to i32*), align 8
  store i32 %v4_12494, i32* @r4, align 4
  %v2_1249c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_124b4 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_124b4)
  %v0_124c8 = load i32, i32* @r5, align 4
  %v2_124c8 = add i32 %v0_124c8, 16
  %v3_124c8 = inttoptr i32 %v2_124c8 to i32*
  %v4_124c8 = load i32, i32* %v3_124c8, align 4
  call void @__pseudo_branch(i32 %v4_124c8)
  %v4_124d8 = load i32, i32* @global_var_1e2b0.461, align 4
  %v2_124dc = icmp eq i32 %v4_124d8, 0
  br i1 %v2_124dc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12488
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12488, %bb
  %v2_124e8 = xor i1 %v2_124dc, true
  call void @__pseudo_cond_branch(i1 %v2_124e8, i32 %v4_124d8)
  store i32 %v2_1249c, i32* @r0, align 4
  %v0_124f8 = load i32, i32* @r5, align 4
  %v2_124f8 = add i32 %v0_124f8, 24
  %v3_124f8 = inttoptr i32 %v2_124f8 to i32*
  %v4_124f8 = load i32, i32* %v3_124f8, align 4
  call void @__pseudo_branch(i32 %v4_124f8)
  %v0_12504 = call i32 @function_12d54()
  %v0_1250c = load i32, i32* @r5, align 4
  %v9_1250c = icmp eq i32 %v0_1250c, 40480
  br i1 %v9_1250c, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_12514 = xor i1 %v9_1250c, true
  call void @__pseudo_cond_branch(i1 %v2_12514, i32 ptrtoint (i32* @global_var_141f0.464 to i32))
  %v0_12518 = load i32, i32* @r6, align 4
  %v1_1251c = call i32 @function_137bc(i32 %v0_12518)
  %v0_12520 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12520, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v2_12520 = load i32, i32* @r8, align 4
  %v3_12520 = load i32, i32* @fp, align 4
  %v4_12520 = lshr i32 %v2_12520, %v3_12520
  %v5_12520 = sub i32 32, %v3_12520
  %v6_12520 = shl i32 %v2_12520, %v5_12520
  %v7_12520 = or i32 %v6_12520, %v4_12520
  %v9_12520 = and i32 %v7_12520, %v1_1251c
  store i32 %v9_12520, i32* @fp, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_12538 = phi i32 [ %v1_1251c, %bb9 ], [ 0, %bb10 ]
  ret i32 %v10_12538

; uselistorder directives
  uselistorder i32 %v1_1251c, { 1, 0 }
  uselistorder i1 %v9_1250c, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12540(i32 %arg1) local_unnamed_addr {
dec_label_pc_12540:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_12540 = load i32, i32* @r4, align 4
  %v6_12540 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_12544 = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_12544, label %dec_label_pc_125d8, label %dec_label_pc_12554

dec_label_pc_12554:                               ; preds = %dec_label_pc_12540
  %v2_12564 = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_12578 = call i32 @function_131cc(i32 17, i32 0, i32 %v2_12564)
  %v3_1257c = load i32, i32* %stack_var_-44, align 4
  %v7_12580 = icmp eq i32 %v3_1257c, 1
  br i1 %v7_12580, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12554
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12554, %bb
  call void @__pseudo_cond_branch(i1 %v7_12580, i32 ptrtoint (i32* @global_var_1060c.466 to i32))
  %v2_12594 = ptrtoint i32* %stack_var_-16 to i32
  %v2_1259c = call i32 @function_13700(i32 %v2_12594, i32 %v2_12594)
  %v2_125a0 = icmp eq i32 %v2_1259c, 0
  br i1 %v2_125a0, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_125b4 = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_125b4, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_125c4 = load i32, i32* %stack_var_-24, align 4
  %v1_125c8 = and i32 %v3_125c4, 65536
  %v2_125c8 = icmp eq i32 %v1_125c8, 0
  br i1 %v2_125c8, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_125c8, i32 ptrtoint (i32* @global_var_1060c.466 to i32))
  %v0_125d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125d8

dec_label_pc_125d8:                               ; preds = %dec_label_pc_12540, %.thread6
  %v0_125d8 = phi i32 [ %v0_125d8.pre, %.thread6 ], [ 0, %dec_label_pc_12540 ]
  store i32 %v3_12540, i32* @r4, align 4
  store i32 %v6_12540, i32* @lr, align 4
  ret i32 %v0_125d8

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_131cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125d8, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_125ec() local_unnamed_addr {
dec_label_pc_125ec:
  %stack_var_-36 = alloca i32, align 4
  store i32 122896, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15b88.470 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_1260c = call i32 @function_13c30(i32 ptrtoint ([11 x i8]* @global_var_15b88.470 to i32))
  store i32 %v2_1260c, i32* @r6, align 4
  %v2_12610 = icmp eq i32 %v2_1260c, 0
  br i1 %v2_12610, label %dec_label_pc_12690, label %dec_label_pc_12618

dec_label_pc_12618:                               ; preds = %dec_label_pc_125ec
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_15b94.473 to i32), i32* @r8, align 4
  %v2_12624 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12624, i32* @r7, align 4
  br label %bb18

dec_label_pc_1262c:                               ; preds = %bb18
  %v3_1262c = load i32, i32* %stack_var_-36, align 4
  %v1_12630 = inttoptr i32 %v3_1262c to i32*
  %v2_12630 = load i32, i32* %v1_12630, align 4
  %v1_12634 = inttoptr i32 %v2_12630 to i8*
  %v2_12634 = load i8, i8* %v1_12634, align 1
  %v7_12638 = icmp eq i8 %v2_12634, 99
  br i1 %v7_12638, label %dec_label_pc_12640, label %.backedge3

dec_label_pc_12640:                               ; preds = %dec_label_pc_1262c
  %v1_12640 = add i32 %v2_12630, 1
  %v2_12640 = inttoptr i32 %v1_12640 to i8*
  %v3_12640 = load i8, i8* %v2_12640, align 1
  %v7_12644 = icmp eq i8 %v3_12640, 112
  br i1 %v7_12644, label %dec_label_pc_1264c, label %.backedge3

dec_label_pc_1264c:                               ; preds = %dec_label_pc_12640
  %v1_1264c = add i32 %v2_12630, 2
  %v2_1264c = inttoptr i32 %v1_1264c to i8*
  %v3_1264c = load i8, i8* %v2_1264c, align 1
  %v7_12650 = icmp eq i8 %v3_1264c, 117
  br i1 %v7_12650, label %dec_label_pc_12658, label %.backedge3

dec_label_pc_12658:                               ; preds = %dec_label_pc_1264c
  %v1_12658 = add i32 %v2_12630, 3
  %v2_12658 = inttoptr i32 %v1_12658 to i8*
  %v3_12658 = load i8, i8* %v2_12658, align 1
  %v4_12658 = zext i8 %v3_12658 to i32
  %v0_1265c = load i32, i32* @r4, align 4
  %v1_1265c = load i32, i32* @sl, align 4
  %v2_1265c = add i32 %v1_1265c, %v0_1265c
  %v3_1265c = inttoptr i32 %v2_1265c to i32*
  %v4_1265c = load i32, i32* %v3_1265c, align 4
  %v2_12660 = mul nuw nsw i32 %v4_12658, 2
  %v2_12664 = add i32 %v4_1265c, %v2_12660
  %v3_12664 = inttoptr i32 %v2_12664 to i16*
  %v4_12664 = load i16, i16* %v3_12664, align 2
  %v1_12668 = and i16 %v4_12664, 8
  %v2_12668 = icmp eq i16 %v1_12668, 0
  br i1 %v2_12668, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_12658
  %v1_1266c = load i32, i32* @r5, align 4
  %v2_1266c = add i32 %v1_1266c, 1
  store i32 %v2_1266c, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_12658, %dec_label_pc_1262c, %dec_label_pc_12640, %dec_label_pc_1264c
  %v0_12670.pre = load i32, i32* @r6, align 4
  %v0_1267c.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_12618
  %v0_1267c = phi i32 [ %v0_1267c.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_15b94.473 to i32), %dec_label_pc_12618 ]
  %v0_12670 = phi i32 [ %v0_12670.pre, %.backedge3 ], [ %v2_1260c, %dec_label_pc_12618 ]
  %v4_12680 = inttoptr i32 %v0_12670 to i32*
  %v5_12680 = call i32 @function_138d4(i32* %v4_12680, i32 %v2_12624, i32 258, i32 %v0_1267c)
  %v2_12684 = icmp eq i32 %v5_12680, 0
  br i1 %v2_12684, label %dec_label_pc_126f4, label %dec_label_pc_1262c

dec_label_pc_12690:                               ; preds = %dec_label_pc_125ec
  store i32 ptrtoint ([14 x i8]* @global_var_15b98.476 to i32), i32* @r0, align 4
  %v2_12698 = call i32 @function_13c30(i32 ptrtoint ([14 x i8]* @global_var_15b98.476 to i32))
  store i32 %v2_12698, i32* @r6, align 4
  %v2_1269c = icmp eq i32 %v2_12698, 0
  br i1 %v2_1269c, label %bb19, label %dec_label_pc_126a8

bb19:                                             ; preds = %dec_label_pc_12690
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_126f4

dec_label_pc_126a8:                               ; preds = %dec_label_pc_12690
  store i32 ptrtoint ([10 x i8]* @global_var_15ba8.478 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_15bcc.480 to i32), i32* @r7, align 4
  %v2_126b8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_126b8, i32* @r4, align 4
  br label %bb21

dec_label_pc_126c0:                               ; preds = %bb21
  %v0_126ec = load i32, i32* @r8, align 4
  %v1_126ec = inttoptr i32 %v0_126ec to i8*
  %v3_126c0 = load i32, i32* %stack_var_-36, align 4
  %v1_126c4 = inttoptr i32 %v3_126c0 to i32*
  %v2_126c4 = load i32, i32* %v1_126c4, align 4
  store i32 %v2_126c4, i32* @r1, align 4
  %v4_126c8 = call i32 @function_14ee0(i8* %v1_126ec, i32 %v2_126c4)
  %v2_126cc = icmp eq i32 %v4_126c8, 0
  br i1 %v2_126cc, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_126c0
  %v1_126d0 = load i32, i32* @r5, align 4
  %v2_126d0 = add i32 %v1_126d0, 1
  store i32 %v2_126d0, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_126c0
  %v0_126dc.pre = load i32, i32* @r7, align 4
  %v0_126e0.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_126a8
  %v0_126e0 = phi i32 [ %v0_126e0.pre, %.backedge ], [ %v2_12698, %dec_label_pc_126a8 ]
  %v0_126dc = phi i32 [ %v0_126dc.pre, %.backedge ], [ ptrtoint (i32* @global_var_15bcc.480 to i32), %dec_label_pc_126a8 ]
  %v4_126e4 = inttoptr i32 %v0_126e0 to i32*
  %v5_126e4 = call i32 @function_138d4(i32* %v4_126e4, i32 %v2_126b8, i32 459266, i32 %v0_126dc)
  %v2_126e8 = icmp eq i32 %v5_126e4, 0
  br i1 %v2_126e8, label %dec_label_pc_126f4, label %dec_label_pc_126c0

dec_label_pc_126f4:                               ; preds = %bb18, %bb21, %bb19
  %v0_126f4 = load i32, i32* @r6, align 4
  %v1_126f8 = inttoptr i32 %v0_126f4 to i32*
  %v2_126f8 = call i32 @function_13bfc(i32* %v1_126f8)
  %v0_126fc = load i32, i32* @r5, align 4
  %v2_126fc = icmp eq i32 %v0_126fc, 0
  %.v0_126fc = select i1 %v2_126fc, i32 1, i32 %v0_126fc
  ret i32 %.v0_126fc

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_13c30, { 1, 0 }
  uselistorder label %dec_label_pc_126f4, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_12738(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12738:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_12b20

bb:                                               ; preds = %dec_label_pc_12738
  %v7_1274c = mul i32 %arg1, 4
  %v8_1274c = add i32 %v7_1274c, ptrtoint (i32* @global_var_12754.483 to i32)
  call void @__pseudo_branch(i32 %v8_1274c)
  br label %dec_label_pc_12b20

dec_label_pc_12b20:                               ; preds = %bb, %dec_label_pc_12738
  %v0_12b20 = call i32 @function_10a6c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12b2c = inttoptr i32 %v0_12b20 to i32*
  store i32 22, i32* %v2_12b2c, align 4
  %v0_12cdc = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_12cdc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_12d54() local_unnamed_addr {
dec_label_pc_12d78.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12d54 = load i32, i32* @r4, align 4
  store i32 %v3_12d54, i32* %stack_var_-16, align 4
  store i32 122888, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d78

dec_label_pc_12d78:                               ; preds = %dec_label_pc_12d78.dec_label_pc_12d78_crit_edge, %dec_label_pc_12d78.lr.ph
  %v1_12d78 = phi i32 [ %v1_12d84, %dec_label_pc_12d78.dec_label_pc_12d78_crit_edge ], [ 0, %dec_label_pc_12d78.lr.ph ]
  %v0_12d78 = phi i32 [ %v0_12d78.pre, %dec_label_pc_12d78.dec_label_pc_12d78_crit_edge ], [ 122888, %dec_label_pc_12d78.lr.ph ]
  %v4_12d78 = mul i32 %v1_12d78, 4
  %v5_12d78 = add i32 %v4_12d78, %v0_12d78
  %v6_12d78 = inttoptr i32 %v5_12d78 to i32*
  %v7_12d78 = load i32, i32* %v6_12d78, align 4
  call void @__pseudo_branch(i32 %v7_12d78)
  %v0_12d84 = load i32, i32* %r4.global-to-local, align 4
  %v1_12d84 = add i32 %v0_12d84, -1
  store i32 %v1_12d84, i32* %r4.global-to-local, align 4
  %v2_12d84 = icmp eq i32 %v0_12d84, 0
  br i1 %v2_12d84, label %dec_label_pc_12d8c, label %dec_label_pc_12d78.dec_label_pc_12d78_crit_edge

dec_label_pc_12d78.dec_label_pc_12d78_crit_edge:  ; preds = %dec_label_pc_12d78
  %v0_12d78.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d78

dec_label_pc_12d8c:                               ; preds = %dec_label_pc_12d78
  %v4_12d90 = load i32, i32* @global_var_1e2c0.496, align 4
  %v2_12d94 = icmp eq i32 %v4_12d90, 0
  br i1 %v2_12d94, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_12d8c
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_12d8c, %bb
  %v2_12d9c = xor i1 %v2_12d94, true
  call void @__pseudo_cond_branch(i1 %v2_12d9c, i32 %v4_12d90)
  %v4_12da4 = load i32, i32* @global_var_1e2c4.498, align 4
  %v2_12da8 = icmp eq i32 %v4_12da4, 0
  br i1 %v2_12da8, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_12db0 = xor i1 %v2_12da8, true
  call void @__pseudo_cond_branch(i1 %v2_12db0, i32 %v4_12da4)
  %v2_12db4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12db4, i32* %r4.global-to-local, align 4
  %v1_12db8 = load i32, i32* @r0, align 4
  ret i32 %v1_12db8

; uselistorder directives
  uselistorder i32 %v1_12d84, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_12dd0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12dd0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_12de4 = call i32 @function_10478(i32 %arg1, i32 1)
  %v3_12dec = icmp eq i32 %v2_12de4, -1
  store i32 122896, i32* @r3, align 4
  br i1 %v3_12dec, label %dec_label_pc_12df8, label %dec_label_pc_12e10

dec_label_pc_12df8:                               ; preds = %dec_label_pc_12dd0
  %v0_12dfc = load i32, i32* %r5.global-to-local, align 4
  %v3_12e04 = call i32 @function_10250(i32 ptrtoint ([10 x i8]* @global_var_15bd0.501 to i32), i32 %v0_12dfc)
  %v1_12e08 = load i32, i32* %r4.global-to-local, align 4
  %v1_12e0c = icmp ne i32 %v3_12e04, %v1_12e08
  call void @__pseudo_cond_branch(i1 %v1_12e0c, i32 ptrtoint (i32* @global_var_12360.502 to i32))
  br label %dec_label_pc_12e10

dec_label_pc_12e10:                               ; preds = %dec_label_pc_12dd0, %dec_label_pc_12df8
  %v1_12e18 = phi i32 [ %v2_12de4, %dec_label_pc_12dd0 ], [ %v3_12e04, %dec_label_pc_12df8 ]
  ret i32 %v1_12e18

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_12e10, { 1, 0 }
}

define i32 @function_12e24(i32 %arg1) local_unnamed_addr {
dec_label_pc_12e24:
  %r4.global-to-local = alloca i32, align 4
  store i32 122896, i32* %r4.global-to-local, align 4
  %v4_12e34 = load i32, i32* inttoptr (i32 122988 to i32*), align 4
  %v1_12e38 = inttoptr i32 %v4_12e34 to i32*
  %v2_12e38 = load i32, i32* %v1_12e38, align 4
  %v2_12e3c = icmp eq i32 %v2_12e38, 0
  br i1 %v2_12e3c, label %dec_label_pc_12e44, label %dec_label_pc_12e78

dec_label_pc_12e44:                               ; preds = %dec_label_pc_12e24
  %v4_12e48 = load i32, i32* inttoptr (i32 122948 to i32*), align 4
  %v2_12e50 = icmp eq i32 %v4_12e48, 0
  store i32 4096, i32* %v1_12e38, align 4
  br i1 %v2_12e50, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_12e44
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_12e44, %bb
  %v2_12e5c = xor i1 %v2_12e50, true
  call void @__pseudo_cond_branch(i1 %v2_12e5c, i32 %v4_12e48)
  %v0_12e64 = load i32, i32* %r4.global-to-local, align 4
  %v2_12e6c = icmp eq i32 %v0_12e64, 40636
  br i1 %v2_12e6c, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_12e74 = xor i1 %v2_12e6c, true
  call void @__pseudo_cond_branch(i1 %v2_12e74, i32 ptrtoint (i32* @global_var_14154.507 to i32))
  br label %dec_label_pc_12e78

dec_label_pc_12e78:                               ; preds = %dec_label_pc_12e24, %bb6
  %v1_12e7c = load i32, i32* @r0, align 4
  ret i32 %v1_12e7c

; uselistorder directives
  uselistorder i1 %v2_12e6c, { 1, 0 }
  uselistorder label %dec_label_pc_12e78, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_12e90(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_12e90:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_12e98 = add i32 %tmp, 4
  store i32 %v1_12e98, i32* %ip.global-to-local, align 4
  %v2_12e9c = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 122896, i32* @r6, align 4
  %v3_12ea8 = mul i32 %arg2, 4
  store i32 %v3_12ea8, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_12eb0 = load i32, i32* inttoptr (i32 122916 to i32*), align 4
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_12eb8 = ptrtoint i32* %stack_var_-120 to i32
  %v4_12ebc = load i32, i32* inttoptr (i32 122924 to i32*), align 4
  store i32 %v4_12ebc, i32* %r4.global-to-local, align 4
  %v2_12ec4 = add i32 %v1_12e98, %v3_12ea8
  store i32 %v2_12ec4, i32* %ip.global-to-local, align 4
  %v9_12ec8 = icmp eq i32 %v2_12ec4, %v2_12e9c
  store i1 %v9_12ec8, i1* %cpsr_z.global-to-local, align 1
  %v2_12ecc = inttoptr i32 %v4_12eb0 to i32*
  store i32 %arg7, i32* %v2_12ecc, align 4
  store i32 692, i32* %r2.global-to-local, align 4
  %v0_12ed8 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_12ec8, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_12e90
  %v1_12edc = load i32, i32* @r7, align 4
  %v2_12edc = load i32, i32* %r5.global-to-local, align 4
  %v3_12edc = add i32 %v2_12edc, %v1_12edc
  store i32 %v3_12edc, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1e2c4.498, align 4
  %v0_12ee4 = load i32, i32* %ip.global-to-local, align 4
  %v1_12ee4 = load i32, i32* %r4.global-to-local, align 4
  %v2_12ee4 = inttoptr i32 %v1_12ee4 to i32*
  store i32 %v0_12ee4, i32* %v2_12ee4, align 4
  store i32 120, i32* @r2, align 4
  %v1_12ef0 = load i32, i32* %r3.global-to-local, align 4
  %v2_12ef0 = load i32, i32* %r4.global-to-local, align 4
  %v3_12ef0 = inttoptr i32 %v2_12ef0 to i32*
  store i32 %v1_12ef0, i32* %v3_12ef0, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_12e90
  store i32 %arg6, i32* @global_var_1e2c4.498, align 4
  %v0_12ee4.c = load i32, i32* %ip.global-to-local, align 4
  %v1_12ee4.c = load i32, i32* %r4.global-to-local, align 4
  %v2_12ee4.c = inttoptr i32 %v1_12ee4.c to i32*
  store i32 %v0_12ee4.c, i32* %v2_12ee4.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  store i32 %v2_12eb8, i32* %r0.global-to-local, align 4
  %v2_12efc = bitcast i32* %stack_var_-120 to i8*
  %v3_12efc = call i32 @function_10ac0(i8* %v2_12efc, i32 0)
  store i32 %v3_12efc, i32* %r0.global-to-local, align 4
  %v0_12f00 = load i32, i32* %r4.global-to-local, align 4
  %v1_12f00 = inttoptr i32 %v0_12f00 to i32*
  %storemerge.pre = load i32, i32* %v1_12f00, align 4
  br label %dec_label_pc_12f0c

dec_label_pc_12f0c:                               ; preds = %dec_label_pc_12f0c, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_12f0c, %dec_label_pc_12f0c ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_12f0c = inttoptr i32 %storemerge to i32*
  %v2_12f0c = load i32, i32* %v1_12f0c, align 4
  store i32 %v2_12f0c, i32* %r3.global-to-local, align 4
  %v4_12f0c = add i32 %storemerge, 4
  store i32 %v4_12f0c, i32* %r2.global-to-local, align 4
  %v2_12f10 = icmp eq i32 %v2_12f0c, 0
  br i1 %v2_12f10, label %dec_label_pc_12f1c, label %dec_label_pc_12f0c

dec_label_pc_12f1c:                               ; preds = %dec_label_pc_12f0c
  store i32 %v4_12f0c, i32* @r4, align 4
  store i32 %v2_12eb8, i32* @r5, align 4
  %v1_12f4029 = inttoptr i32 %v4_12f0c to i32*
  %v2_12f4030 = load i32, i32* %v1_12f4029, align 4
  store i32 %v2_12f4030, i32* %r3.global-to-local, align 4
  %v2_12f4432 = icmp eq i32 %v2_12f4030, 0
  store i1 %v2_12f4432, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12f4432, label %dec_label_pc_12f4c, label %dec_label_pc_12f28

dec_label_pc_12f28:                               ; preds = %dec_label_pc_12f1c, %dec_label_pc_12f40
  %v5_12f2c = phi i32 [ %v2_12f40, %dec_label_pc_12f40 ], [ %v2_12f4030, %dec_label_pc_12f1c ]
  %v2_12f28 = icmp ugt i32 %v5_12f2c, 13
  %v7_12f28 = icmp eq i32 %v5_12f2c, 14
  store i1 %v7_12f28, i1* %cpsr_z.global-to-local, align 1
  %v2_12f2c = xor i1 %v2_12f28, true
  %v3_12f2c = or i1 %v7_12f28, %v2_12f2c
  br i1 %v3_12f2c, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_12f28
  %v4_12f2c = load i32, i32* @r5, align 4
  %v6_12f2c = and i32 %v5_12f2c, 536870912
  %v7_12f2c = icmp ne i32 %v6_12f2c, 0
  %v8_12f2c = mul i32 %v5_12f2c, 8
  %v9_12f2c = add i32 %v4_12f2c, %v8_12f2c
  store i32 %v9_12f2c, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_12f28, %bb58
  %v1_12f38 = phi i1 [ %v2_12f28, %dec_label_pc_12f28 ], [ %v7_12f2c, %bb58 ]
  %v2_12f30 = xor i1 %v1_12f38, true
  %v3_12f30 = or i1 %v7_12f28, %v2_12f30
  br i1 %v3_12f30, label %bb60, label %dec_label_pc_12f40

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12f40

dec_label_pc_12f40:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_12f30, i32 ptrtoint (i32* @global_var_10b70.512 to i32))
  %v0_12f3c = load i32, i32* @r4, align 4
  %v1_12f3c = add i32 %v0_12f3c, 8
  store i32 %v1_12f3c, i32* @r4, align 4
  %v1_12f40 = inttoptr i32 %v1_12f3c to i32*
  %v2_12f40 = load i32, i32* %v1_12f40, align 4
  store i32 %v2_12f40, i32* %r3.global-to-local, align 4
  %v2_12f44 = icmp eq i32 %v2_12f40, 0
  store i1 %v2_12f44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12f44, label %dec_label_pc_12f4c, label %dec_label_pc_12f28

dec_label_pc_12f4c:                               ; preds = %dec_label_pc_12f40, %dec_label_pc_12f1c
  store i32 %v2_12eb8, i32* %r0.global-to-local, align 4
  %v1_12f50 = call i32 @function_15354(i32 %v2_12eb8)
  store i32 %v1_12f50, i32* @r0, align 4
  %v1_12f54 = call i32 @function_12e24(i32 %v1_12f50)
  store i32 %v1_12f54, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_12f60 = load i32, i32* @r6, align 4
  %v2_12f60 = add i32 %v0_12f60, 92
  %v3_12f60 = inttoptr i32 %v2_12f60 to i32*
  %v4_12f60 = load i32, i32* %v3_12f60, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_12f68 = icmp eq i32 %tmp53, 0
  store i1 %v2_12f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12f68, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_12f4c
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_12f4c, %bb61
  %v0_12f74 = phi i32 [ %tmp53, %dec_label_pc_12f4c ], [ 4096, %bb61 ]
  %v3_12f70 = icmp eq i32 %tmp52, -1
  %v8_12f70 = icmp eq i32 %tmp52, -1
  store i1 %v8_12f70, i1* %cpsr_z.global-to-local, align 1
  %v2_12f74 = inttoptr i32 %v4_12f60 to i32*
  store i32 %v0_12f74, i32* %v2_12f74, align 4
  br i1 %v3_12f70, label %dec_label_pc_12f7c, label %dec_label_pc_12fa4

dec_label_pc_12f7c:                               ; preds = %bb62
  %v0_12f7c = call i32 @function_13294()
  store i32 %v0_12f7c, i32* @r0, align 4
  store i32 %v0_12f7c, i32* @r4, align 4
  %v0_12f84 = call i32 @function_132f0()
  store i32 %v0_12f84, i32* @r0, align 4
  %v0_12f88 = load i32, i32* @r4, align 4
  %v9_12f88 = icmp eq i32 %v0_12f88, %v0_12f84
  store i1 %v9_12f88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12f88, label %dec_label_pc_12f90, label %dec_label_pc_12fcc

dec_label_pc_12f90:                               ; preds = %dec_label_pc_12f7c
  %v1_12f90 = call i32 @function_1345c(i32 %v0_12f84)
  store i32 %v1_12f90, i32* @r0, align 4
  store i32 %v1_12f90, i32* @r4, align 4
  %v0_12f98 = call i32 @function_132dc()
  store i32 %v0_12f98, i32* @r0, align 4
  %v0_12f9c = load i32, i32* @r4, align 4
  %v9_12f9c = icmp eq i32 %v0_12f9c, %v0_12f98
  store i1 %v9_12f9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12f9c, label %dec_label_pc_12fa4, label %dec_label_pc_12fcc

dec_label_pc_12fa4:                               ; preds = %dec_label_pc_12f90, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_12f70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12f70, label %dec_label_pc_12ff0, label %dec_label_pc_12fb0

dec_label_pc_12fb0:                               ; preds = %dec_label_pc_12fa4
  store i32 %tmp51, i32* @r3, align 4
  %v9_12fb4 = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_12fb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12fb4, label %dec_label_pc_12fbc, label %dec_label_pc_12fcc

dec_label_pc_12fbc:                               ; preds = %dec_label_pc_12fb0
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_12fc4 = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_12fc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12fc4, label %dec_label_pc_12ff0, label %dec_label_pc_12fcc

dec_label_pc_12fcc:                               ; preds = %dec_label_pc_12fb0, %dec_label_pc_12f90, %dec_label_pc_12f7c, %dec_label_pc_12fbc
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_12fd4 = call i32 @function_12dd0(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_12fe0 = call i32 @function_12dd0(i32 1, i32 32770)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_12fec = call i32 @function_12dd0(i32 2, i32 32770)
  store i32 %v2_12fec, i32* @r0, align 4
  br label %dec_label_pc_12ff0

dec_label_pc_12ff0:                               ; preds = %dec_label_pc_12fbc, %dec_label_pc_12fa4, %dec_label_pc_12fcc
  %v0_12ff0 = load i32, i32* @r7, align 4
  %v1_12ff0 = inttoptr i32 %v0_12ff0 to i32*
  %v2_12ff0 = load i32, i32* %v1_12ff0, align 4
  store i32 %v2_12ff0, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_12ff8 = load i32, i32* @r6, align 4
  %v3_12ff8 = add i32 %v1_12ff8, 208
  %v4_12ff8 = inttoptr i32 %v3_12ff8 to i32*
  store i32 %v2_12ff0, i32* %v4_12ff8, align 4
  %v0_12ffc = load i32, i32* @r7, align 4
  %v1_12ffc = inttoptr i32 %v0_12ffc to i32*
  %v2_12ffc = load i32, i32* %v1_12ffc, align 4
  store i32 %v2_12ffc, i32* @r4, align 4
  %v2_13000 = icmp eq i32 %v2_12ffc, 0
  store i1 %v2_13000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13000, label %dec_label_pc_130a4.lr.ph, label %dec_label_pc_13008

dec_label_pc_13008:                               ; preds = %dec_label_pc_12ff0
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_1300c = load i32, i32* @r6, align 4
  %v2_1300c = add i32 %v0_1300c, 112
  %v3_1300c = inttoptr i32 %v2_1300c to i32*
  %v4_1300c = load i32, i32* %v3_1300c, align 4
  store i32 %v4_1300c, i32* %r3.global-to-local, align 4
  %v2_13010 = inttoptr i32 %v4_1300c to i32*
  store i32 %v2_12ffc, i32* %v2_13010, align 4
  %v0_13018 = load i32, i32* @r7, align 4
  %v1_13018 = inttoptr i32 %v0_13018 to i32*
  %v2_13018 = load i32, i32* %v1_13018, align 4
  store i32 %v2_13018, i32* %r0.global-to-local, align 4
  %v4_1301c = call i32 @function_14f90(i32 %v2_13018, i32 47, i32 %v2_12ff0, i32 %v4_1300c)
  store i32 %v4_1301c, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_13024 = icmp eq i32 %v4_1301c, 0
  store i1 %v2_13024, i1* %cpsr_z.global-to-local, align 1
  %v0_13028 = load i32, i32* @r6, align 4
  %v2_13028 = add i32 %v0_13028, 60
  %v3_13028 = inttoptr i32 %v2_13028 to i32*
  %v4_13028 = load i32, i32* %v3_13028, align 4
  store i32 %v4_13028, i32* %r2.global-to-local, align 4
  br i1 %v2_13024, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_13008
  %v2_1303047 = inttoptr i32 %v4_13028 to i32*
  store i32 0, i32* %v2_1303047, align 4
  br label %dec_label_pc_130a4.lr.ph

bb63:                                             ; preds = %dec_label_pc_13008
  %v2_1302c = add i32 %v4_1301c, 1
  store i32 %v2_1302c, i32* %r3.global-to-local, align 4
  %v2_13030 = inttoptr i32 %v4_13028 to i32*
  store i32 %v4_1301c, i32* %v2_13030, align 4
  %v1_13034 = load i32, i32* %r3.global-to-local, align 4
  %v2_13034 = load i32, i32* %r2.global-to-local, align 4
  %v3_13034 = inttoptr i32 %v2_13034 to i32*
  store i32 %v1_13034, i32* %v3_13034, align 4
  br label %dec_label_pc_130a4.lr.ph

dec_label_pc_130a4.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_12ff0
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_1304c = load i32, i32* @r6, align 4
  %v2_1304c = add i32 %v0_1304c, -12
  store i32 %v2_1304c, i32* %r8.global-to-local, align 4
  store i32 688, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1e2c0.496, align 4
  %v2_1307c = icmp eq i32 %v0_12ed8, 0
  store i1 %v2_1307c, i1* %cpsr_z.global-to-local, align 1
  %v2_13084 = xor i1 %v2_1307c, true
  call void @__pseudo_cond_branch(i1 %v2_13084, i32 %v0_12ed8)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_13098 = load i32, i32* @r6, align 4
  %v2_13098 = add i32 %v0_13098, -12
  store i32 %v2_13098, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_130a4

dec_label_pc_130a4:                               ; preds = %dec_label_pc_130a4.dec_label_pc_130a4_crit_edge, %dec_label_pc_130a4.lr.ph
  %v1_130a4 = phi i32 [ %v1_130b0, %dec_label_pc_130a4.dec_label_pc_130a4_crit_edge ], [ 0, %dec_label_pc_130a4.lr.ph ]
  %v0_130a4 = phi i32 [ %v0_130a4.pre, %dec_label_pc_130a4.dec_label_pc_130a4_crit_edge ], [ %v2_13098, %dec_label_pc_130a4.lr.ph ]
  %v4_130a4 = mul i32 %v1_130a4, 4
  %v5_130a4 = add i32 %v4_130a4, %v0_130a4
  %v6_130a4 = inttoptr i32 %v5_130a4 to i32*
  %v7_130a4 = load i32, i32* %v6_130a4, align 4
  store i32 %v7_130a4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_130a4)
  %v0_130b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_130b0 = add i32 %v0_130b0, 1
  store i32 %v1_130b0, i32* %r4.global-to-local, align 4
  %v1_130b4 = load i32, i32* %r5.global-to-local, align 4
  %v3_130b4 = icmp ult i32 %v1_130b0, %v1_130b4
  %v9_130b4 = icmp eq i32 %v1_130b0, %v1_130b4
  store i1 %v9_130b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_130b4, label %dec_label_pc_130a4.dec_label_pc_130a4_crit_edge, label %dec_label_pc_130bc

dec_label_pc_130a4.dec_label_pc_130a4_crit_edge:  ; preds = %dec_label_pc_130a4
  %v0_130a4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_130a4

dec_label_pc_130bc:                               ; preds = %dec_label_pc_130a4
  %v0_130c0.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_130c0 = add i32 %v0_130c0.pre, 104
  %v3_130c0 = inttoptr i32 %v2_130c0 to i32*
  %v4_130c0 = load i32, i32* %v3_130c0, align 4
  store i32 %v4_130c0, i32* %r2.global-to-local, align 4
  store i32 %v4_130c0, i32* %r3.global-to-local, align 4
  %v2_130c8 = icmp eq i32 %v4_130c0, 0
  store i1 %v2_130c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_130c8, label %dec_label_pc_130e0, label %dec_label_pc_130d0

dec_label_pc_130d0:                               ; preds = %dec_label_pc_130bc
  call void @__pseudo_branch(i32 %v4_130c0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_130dc = load i32, i32* @r0, align 4
  %v2_130dc = inttoptr i32 %v1_130dc to i32*
  store i32 0, i32* %v2_130dc, align 4
  %v0_130e4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_130e0

dec_label_pc_130e0:                               ; preds = %dec_label_pc_130bc, %dec_label_pc_130d0
  %v0_130e4 = phi i32 [ %v0_130c0.pre, %dec_label_pc_130bc ], [ %v0_130e4.pre, %dec_label_pc_130d0 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_130e4 = add i32 %v0_130e4, 80
  %v3_130e4 = inttoptr i32 %v2_130e4 to i32*
  %v4_130e4 = load i32, i32* %v3_130e4, align 4
  store i32 %v4_130e4, i32* %r2.global-to-local, align 4
  store i32 %v4_130e4, i32* %r3.global-to-local, align 4
  %v2_130ec = icmp eq i32 %v4_130e4, 0
  store i1 %v2_130ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_130ec, label %dec_label_pc_13104, label %dec_label_pc_130f4

dec_label_pc_130f4:                               ; preds = %dec_label_pc_130e0
  call void @__pseudo_branch(i32 %v4_130e4)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13100 = load i32, i32* @r0, align 4
  %v2_13100 = inttoptr i32 %v1_13100 to i32*
  store i32 0, i32* %v2_13100, align 4
  %v0_13108.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13104

dec_label_pc_13104:                               ; preds = %dec_label_pc_130e0, %dec_label_pc_130f4
  %v0_13108 = phi i32 [ %v0_130e4, %dec_label_pc_130e0 ], [ %v0_13108.pre, %dec_label_pc_130f4 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_13108 = add i32 %v0_13108, 28
  %v3_13108 = inttoptr i32 %v2_13108 to i32*
  %v4_13108 = load i32, i32* %v3_13108, align 4
  store i32 %v4_13108, i32* %r3.global-to-local, align 4
  %v1_13110 = inttoptr i32 %v4_13108 to i32*
  %v2_13110 = load i32, i32* %v1_13110, align 4
  store i32 %v2_13110, i32* %r2.global-to-local, align 4
  %v0_13114 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_13114, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_13120 = call i32 @function_12488(i32 %v0_13114)
  store i32 %v1_13120, i32* %r0.global-to-local, align 4
  %v0_13124 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13124, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_13104
  %v2_13124 = load i32, i32* %r4.global-to-local, align 4
  %v8_13128 = shl i32 %v2_13124, %v1_13120
  %v9_13128 = and i32 %v8_13128, %v1_13120
  %v2_1312c = load i32, i32* %ip.global-to-local, align 4
  %v8_1312c = shl i32 %v2_1312c, %v9_13128
  %v9_1312c = and i32 %v8_1312c, %v9_13128
  store i32 %v9_1312c, i32* %r0.global-to-local, align 4
  %v2_13130 = trunc i32 %v9_1312c to i16
  %v4_13130 = inttoptr i32 %v9_1312c to i16*
  store i16 %v2_13130, i16* %v4_13130, align 2
  %v5_13130 = load i32, i32* %r4.global-to-local, align 4
  %v6_13130 = load i32, i32* %r0.global-to-local, align 4
  %v7_13130 = sub i32 %v6_13130, %v5_13130
  %v2_13134 = load i32, i32* %ip.global-to-local, align 4
  %v8_13134 = ashr i32 %v2_13134, %v7_13130
  %v9_13134 = and i32 %v8_13134, %v7_13130
  %v2_13138 = load i32, i32* %r2.global-to-local, align 4
  %v3_13138 = and i32 %v9_13134, %v2_13138
  store i32 %v3_13138, i32* %r8.global-to-local, align 4
  %v2_1313c = inttoptr i32 %v9_13134 to i64*
  %v3_1313c = load i64, i64* %v2_1313c, align 4
  %v6_1313c = udiv i64 %v3_1313c, 4294967296
  %v7_1313c = trunc i64 %v6_1313c to i32
  %v9_1313c = sub i32 %v7_1313c, %v9_13134
  %v5_13140 = sub i32 32, %v9_1313c
  %v6_13140 = shl i32 %v9_1313c, %v5_13140
  %v9_13140 = and i32 %v6_13140, %v9_1313c
  %v8_13144 = lshr i32 %v2_13134, %v9_13140
  %v9_13144 = and i32 %v8_13144, %v9_13140
  store i32 %v9_13144, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13104, %bb64
  %v10_13144 = phi i32 [ %v1_13120, %dec_label_pc_13104 ], [ %v9_13144, %bb64 ]
  ret i32 %v10_13144

; uselistorder directives
  uselistorder i32 %v9_13134, { 2, 1, 0 }
  uselistorder i32 %v9_1312c, { 1, 0, 2 }
  uselistorder i32 %v1_13120, { 1, 0, 2, 3 }
  uselistorder i32 %v0_130c0.pre, { 1, 0 }
  uselistorder i32 %v1_130b4, { 1, 0 }
  uselistorder i32 %v1_130b0, { 3, 2, 1, 0 }
  uselistorder i32 %v4_13028, { 1, 0, 2 }
  uselistorder i1 %v8_12f70, { 1, 2, 0 }
  uselistorder i32 %v2_12f40, { 1, 2, 0 }
  uselistorder i1 %v2_12f28, { 1, 0 }
  uselistorder i32 %v5_12f2c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12f0c, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_12ed8, { 1, 0 }
  uselistorder i32 %v2_12eb8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_12ea8, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 0, 5, 7, 6, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 1, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 1, 6, 7, 8, 9, 10, 11, 12, 2, 13, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 1, 18 }
  uselistorder i32 (i32)* @function_12488, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 47, { 0, 2, 3, 4, 1 }
  uselistorder i32 (i32, i32)* @function_12dd0, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_13104, { 1, 0 }
  uselistorder label %dec_label_pc_130e0, { 1, 0 }
  uselistorder label %dec_label_pc_130a4.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ff0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12fcc, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_12f40, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_12f28, { 1, 0 }
}

define i32 @function_13164(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13164:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13164 = load i32, i32* @r4, align 4
  store i32 %v3_13164, i32* %stack_var_-16, align 4
  %v3_13170 = urem i32 %arg3, 4096
  %v2_13174 = icmp eq i32 %v3_13170, 0
  br i1 %v2_13174, label %dec_label_pc_13190, label %dec_label_pc_1317c

dec_label_pc_1317c:                               ; preds = %dec_label_pc_13164
  %v0_1317c = call i32 @function_10a6c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13188 = inttoptr i32 %v0_1317c to i32*
  store i32 22, i32* %v2_13188, align 4
  %v0_131c0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_131c0

dec_label_pc_13190:                               ; preds = %dec_label_pc_13164
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_131bc, label %dec_label_pc_131ac

dec_label_pc_131ac:                               ; preds = %dec_label_pc_13190
  %v0_131ac = call i32 @function_10a6c()
  %v0_131b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131b0 = sub i32 0, %v0_131b0
  %v2_131b4 = inttoptr i32 %v0_131ac to i32*
  store i32 %v1_131b0, i32* %v2_131b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131bc

dec_label_pc_131bc:                               ; preds = %dec_label_pc_13190, %dec_label_pc_131ac
  %v0_131bc = phi i32 [ %arg1, %dec_label_pc_13190 ], [ -1, %dec_label_pc_131ac ]
  store i32 %v0_131bc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_131c0

dec_label_pc_131c0:                               ; preds = %dec_label_pc_1317c, %dec_label_pc_131bc
  %v0_131c0 = phi i32 [ %v0_131c0.pre, %dec_label_pc_1317c ], [ %v0_131bc, %dec_label_pc_131bc ]
  %v2_131c4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_131c4, i32* @r4, align 4
  ret i32 %v0_131c0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_131c0, { 1, 0 }
  uselistorder label %dec_label_pc_131bc, { 1, 0 }
}

define i32 @function_131cc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_131cc:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_131cc = load i32, i32* @r4, align 4
  %v6_131cc = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_131d4 = icmp eq i32 %arg2, 0
  store i32 122896, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_131d4, label %dec_label_pc_13228, label %dec_label_pc_131ec

dec_label_pc_131ec:                               ; preds = %dec_label_pc_131cc
  %v1_131ec = add i32 %arg2, 4
  %v2_131ec = inttoptr i32 %v1_131ec to i32*
  %v3_131ec = load i32, i32* %v2_131ec, align 4
  store i32 %v3_131ec, i32* @r3, align 4
  %v1_131f0 = and i32 %v3_131ec, 67108864
  %v2_131f0 = icmp eq i32 %v1_131f0, 0
  br i1 %v2_131f0, label %dec_label_pc_131f8, label %dec_label_pc_13228

dec_label_pc_131f8:                               ; preds = %dec_label_pc_131ec
  store i32 20, i32* @r2, align 4
  %v2_131fc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_131fc, i32* @r0, align 4
  %v0_13200 = call i32 @function_10b70()
  store i32 %v2_131fc, i32* @ip, align 4
  %v0_13228.pre = load i32, i32* @r5, align 4
  %v0_13230.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13228

dec_label_pc_13228:                               ; preds = %dec_label_pc_131ec, %dec_label_pc_131cc, %dec_label_pc_131f8
  %v0_13230 = phi i32 [ %arg3, %dec_label_pc_131ec ], [ %arg3, %dec_label_pc_131cc ], [ %v0_13230.pre, %dec_label_pc_131f8 ]
  %v0_1322c = phi i32 [ %arg2, %dec_label_pc_131ec ], [ 0, %dec_label_pc_131cc ], [ %v2_131fc, %dec_label_pc_131f8 ]
  %v0_13228 = phi i32 [ %arg1, %dec_label_pc_131ec ], [ %arg1, %dec_label_pc_131cc ], [ %v0_13228.pre, %dec_label_pc_131f8 ]
  %v4_13238 = call i32 @function_13788(i32 %v0_13228, i32 %v0_1322c, i32 %v0_13230, i32 8)
  store i32 %v3_131cc, i32* @r4, align 4
  store i32 %v6_131cc, i32* @r5, align 4
  ret i32 %v4_13238

; uselistorder directives
  uselistorder label %dec_label_pc_13228, { 2, 0, 1 }
}

define i32 @function_1324c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1324c:
  %v0_1324c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1324c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1324c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1324c, %bb
  %v0_13260 = phi i32 [ %arg1, %dec_label_pc_1324c ], [ 0, %bb ]
  ret i32 %v0_13260

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1326c() local_unnamed_addr {
dec_label_pc_1326c:
  %v4_13278 = load i32, i32* inttoptr (i32 122988 to i32*), align 4
  %v1_1327c = inttoptr i32 %v4_13278 to i32*
  %v2_1327c = load i32, i32* %v1_1327c, align 4
  %v2_13280 = icmp eq i32 %v2_1327c, 0
  br i1 %v2_13280, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_1326c
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_1326c, %bb
  %v1_13288 = phi i32 [ %v2_1327c, %dec_label_pc_1326c ], [ 4096, %bb ]
  ret i32 %v1_13288

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13294() local_unnamed_addr {
dec_label_pc_13294:
  %v1_132a4 = load i32, i32* @r0, align 4
  ret i32 %v1_132a4
}

define i32 @function_132a8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_132a8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_132a8 = load i32, i32* @r7, align 4
  store i32 %v3_132a8, i32* %stack_var_-8, align 4
  %v0_132b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_132b4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_132b4, -4095
  br i1 %tmp, label %dec_label_pc_132d4, label %dec_label_pc_132c4

dec_label_pc_132c4:                               ; preds = %dec_label_pc_132a8
  %v0_132c4 = call i32 @function_10a6c()
  %v0_132c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_132c8 = sub i32 0, %v0_132c8
  %v2_132cc = inttoptr i32 %v0_132c4 to i32*
  store i32 %v1_132c8, i32* %v2_132cc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_132d4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_132d4

dec_label_pc_132d4:                               ; preds = %dec_label_pc_132a8, %dec_label_pc_132c4
  %v1_132d8 = phi i32 [ %v0_132b4, %dec_label_pc_132a8 ], [ -1, %dec_label_pc_132c4 ]
  %v2_132d4 = phi i32 [ %v3_132a8, %dec_label_pc_132a8 ], [ %v2_132d4.pre, %dec_label_pc_132c4 ]
  store i32 %v2_132d4, i32* %r7.global-to-local, align 4
  ret i32 %v1_132d8

; uselistorder directives
  uselistorder i32 %v0_132b4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_132d4, { 1, 0 }
}

define i32 @function_132dc() local_unnamed_addr {
dec_label_pc_132dc:
  %v1_132ec = load i32, i32* @r0, align 4
  ret i32 %v1_132ec
}

define i32 @function_132f0() local_unnamed_addr {
dec_label_pc_132f0:
  %v1_13300 = load i32, i32* @r0, align 4
  ret i32 %v1_13300
}

define i32 @function_13304(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13304:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_13304 = load i32, i32* @r5, align 4
  %v18_13304 = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13334, label %dec_label_pc_13320

dec_label_pc_13320:                               ; preds = %dec_label_pc_13304
  %v0_13320 = call i32 @function_10a6c()
  %v0_13324 = load i32, i32* @r5, align 4
  %v1_13324 = sub i32 0, %v0_13324
  store i32 %v1_13324, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_1332c = inttoptr i32 %v0_13320 to i32*
  store i32 %v1_13324, i32* %v2_1332c, align 4
  br label %dec_label_pc_13388

dec_label_pc_13334:                               ; preds = %dec_label_pc_13304
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13334
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_1333c = add i32 %arg2, %arg1
  store i32 %v3_1333c, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13334, %bb
  %v1_133784 = phi i32 [ %v18_13304, %dec_label_pc_13334 ], [ %v3_1333c, %bb ]
  %v0_133742 = phi i32 [ 141, %dec_label_pc_13334 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_13388, label %dec_label_pc_13374

dec_label_pc_13348:                               ; preds = %dec_label_pc_13374
  %v1_13348 = add i32 %v0_13348, 8
  %v2_13348 = inttoptr i32 %v1_13348 to i16*
  %v3_13348 = load i16, i16* %v2_13348, align 2
  %v4_13348 = zext i16 %v3_13348 to i32
  %v2_1334c = add i32 %v4_13348, %v0_13348
  store i32 %v2_1334c, i32* %r3.global-to-local, align 4
  %v1_13350 = add i32 %v2_1334c, -1
  %v2_13350 = inttoptr i32 %v1_13350 to i8*
  %v3_13350 = load i8, i8* %v2_13350, align 1
  %v4_13350 = zext i8 %v3_13350 to i32
  store i32 %v4_13350, i32* @r4, align 4
  %v1_13354 = call i32 @function_14e80(i32 %v1_13374)
  %v0_13358 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13358, i32* @r1, align 4
  %v1_1335c = add i32 %v1_13354, 1
  store i32 %v1_1335c, i32* @r2, align 4
  %v0_13360 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13360, i32* @r0, align 4
  %v3_13364 = call i32 @function_10b60(i32 %v0_13360, i32 %v0_13358, i32 %v1_1335c)
  %v0_13368 = load i32, i32* %r7.global-to-local, align 4
  %v1_13368 = add i32 %v0_13368, 8
  %v2_13368 = inttoptr i32 %v1_13368 to i16*
  %v3_13368 = load i16, i16* %v2_13368, align 2
  %v4_13368 = zext i16 %v3_13368 to i32
  store i32 %v4_13368, i32* %r3.global-to-local, align 4
  %v0_1336c = load i32, i32* @r4, align 4
  %v1_1336c = trunc i32 %v0_1336c to i8
  %v3_1336c = add i32 %v0_13368, 10
  %v4_1336c = inttoptr i32 %v3_1336c to i8*
  store i8 %v1_1336c, i8* %v4_1336c, align 1
  %v0_13370 = load i32, i32* %r7.global-to-local, align 4
  %v1_13370 = load i32, i32* %r3.global-to-local, align 4
  %v2_13370 = add i32 %v1_13370, %v0_13370
  store i32 %v2_13370, i32* %r7.global-to-local, align 4
  %v1_13378.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_13374

dec_label_pc_13374:                               ; preds = %.thread, %dec_label_pc_13348
  %v1_13378 = phi i32 [ %v1_13378.pre, %dec_label_pc_13348 ], [ %v1_133784, %.thread ]
  %v0_13348 = phi i32 [ %v2_13370, %dec_label_pc_13348 ], [ %v0_133742, %.thread ]
  %v1_13374 = add i32 %v0_13348, 10
  store i32 %v1_13374, i32* %r6.global-to-local, align 4
  %v3_13378 = icmp ult i32 %v0_13348, %v1_13378
  %v1_13380 = add i32 %v0_13348, 11
  store i32 %v1_13380, i32* %r8.global-to-local, align 4
  br i1 %v3_13378, label %dec_label_pc_13348, label %dec_label_pc_13388

dec_label_pc_13388:                               ; preds = %dec_label_pc_13374, %.thread, %dec_label_pc_13320
  %v0_13388 = load i32, i32* @r5, align 4
  store i32 %v6_13304, i32* @r5, align 4
  store i32 %v18_13304, i32* @sl, align 4
  ret i32 %v0_13388

; uselistorder directives
  uselistorder i32 %v1_13374, { 1, 0 }
  uselistorder i32 %v0_13348, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_13304, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13374, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13398() local_unnamed_addr {
dec_label_pc_13398:
  %r7.global-to-local = alloca i32, align 4
  %v0_133a0 = load i32, i32* @r1, align 4
  store i32 %v0_133a0, i32* @r3, align 4
  %v0_133b0 = load i32, i32* @r0, align 4
  store i32 %v0_133b0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_133b0, -4095
  br i1 %tmp, label %dec_label_pc_133d0, label %dec_label_pc_133bc

dec_label_pc_133bc:                               ; preds = %dec_label_pc_13398
  %v0_133bc = call i32 @function_10a6c()
  %v0_133c0 = load i32, i32* %r7.global-to-local, align 4
  %v1_133c0 = sub i32 0, %v0_133c0
  store i32 %v1_133c0, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_133c8 = inttoptr i32 %v0_133bc to i32*
  store i32 %v1_133c0, i32* %v2_133c8, align 4
  br label %dec_label_pc_133e0

dec_label_pc_133d0:                               ; preds = %dec_label_pc_13398
  %v2_133d0 = icmp eq i32 %v0_133b0, 0
  br i1 %v2_133d0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_133d0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_133d0, %bb
  call void @__pseudo_cond_branch(i1 %v2_133d0, i32 ptrtoint (i32* @global_var_135e8.531 to i32))
  br label %dec_label_pc_133e0

dec_label_pc_133e0:                               ; preds = %dec_label_pc_133bc, %.thread
  %v0_133e0 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_133e0

; uselistorder directives
  uselistorder i32 %v0_133b0, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_133e0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_133f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_133f0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_133f0 = load i32, i32* @r4, align 4
  store i32 %v3_133f0, i32* %stack_var_-16, align 4
  store i32 122896, i32* %r4.global-to-local, align 4
  %v4_13400 = load i32, i32* @global_var_202d8.534, align 4
  %v2_13404 = icmp eq i32 %v4_13400, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13404, label %dec_label_pc_13410, label %dec_label_pc_13420

dec_label_pc_13410:                               ; preds = %dec_label_pc_133f0
  %v1_13414 = call i32 @function_1538c(i32 0)
  %v1_13418 = icmp slt i32 %v1_13414, 0
  br i1 %v1_13418, label %dec_label_pc_13444, label %dec_label_pc_13420thread-pre-split

dec_label_pc_13420thread-pre-split:               ; preds = %dec_label_pc_13410
  %v0_13424.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_13420.pre = load i32, i32* @global_var_202d8.534, align 4
  br label %dec_label_pc_13420

dec_label_pc_13420:                               ; preds = %dec_label_pc_13420thread-pre-split, %dec_label_pc_133f0
  %v0_13430 = phi i32 [ %v4_13420.pre, %dec_label_pc_13420thread-pre-split ], [ %v4_13400, %dec_label_pc_133f0 ]
  %v1_13434 = phi i32 [ %v0_13424.pr, %dec_label_pc_13420thread-pre-split ], [ %arg1, %dec_label_pc_133f0 ]
  %v2_13424 = icmp eq i32 %v1_13434, 0
  store i32 %v0_13430, i32* %r4.global-to-local, align 4
  br i1 %v2_13424, label %dec_label_pc_13448, label %dec_label_pc_13430

dec_label_pc_13430:                               ; preds = %dec_label_pc_13420
  %v2_13434 = add i32 %v1_13434, %v0_13430
  %v1_13438 = call i32 @function_1538c(i32 %v2_13434)
  %v1_1343c = icmp slt i32 %v1_13438, 0
  br i1 %v1_1343c, label %dec_label_pc_13444, label %dec_label_pc_13430.dec_label_pc_13448_crit_edge

dec_label_pc_13430.dec_label_pc_13448_crit_edge:  ; preds = %dec_label_pc_13430
  %v0_13448.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13448

dec_label_pc_13444:                               ; preds = %dec_label_pc_13430, %dec_label_pc_13410
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13448

dec_label_pc_13448:                               ; preds = %dec_label_pc_13420, %dec_label_pc_13430.dec_label_pc_13448_crit_edge, %dec_label_pc_13444
  %v0_13448 = phi i32 [ %v0_13448.pre, %dec_label_pc_13430.dec_label_pc_13448_crit_edge ], [ -1, %dec_label_pc_13444 ], [ %v0_13430, %dec_label_pc_13420 ]
  %v2_1344c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1344c, i32* @r4, align 4
  ret i32 %v0_13448

; uselistorder directives
  uselistorder i32 %v0_13430, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_1538c, { 1, 0 }
  uselistorder label %dec_label_pc_13448, { 2, 1, 0 }
}

define i32 @function_1345c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1345c:
  %v1_1346c = load i32, i32* @r0, align 4
  ret i32 %v1_1346c
}

define i32 @function_13470(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13470:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_13470 = load i32, i32* @r4, align 4
  store i32 %v3_13470, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_13488 = inttoptr i32 %arg2 to i8*
  %v3_13488 = call i32 @function_10ac0(i8* %v2_13488, i32 0)
  %v2_1348c = load i32, i32* %arg1, align 4
  store i32 %v2_1348c, i32* %r3.global-to-local, align 4
  %v3_1348c = add i32 %tmp, 4
  %v4_1348c = inttoptr i32 %v3_1348c to i32*
  %v5_1348c = load i32, i32* %v4_1348c, align 4
  store i32 %v5_1348c, i32* %r4.global-to-local, align 4
  %v0_13490 = load i32, i32* %r5.global-to-local, align 4
  %v1_13490 = inttoptr i32 %v0_13490 to i32*
  store i32 %v2_1348c, i32* %v1_13490, align 4
  %v3_13490 = add i32 %v0_13490, 4
  %v4_13490 = inttoptr i32 %v3_13490 to i32*
  %v5_13490 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13490, i32* %v4_13490, align 4
  %v0_13494 = load i32, i32* %r6.global-to-local, align 4
  %v1_13494 = add i32 %v0_13494, 12
  %v2_13494 = inttoptr i32 %v1_13494 to i32*
  %v3_13494 = load i32, i32* %v2_13494, align 4
  %v1_13498 = load i32, i32* %r5.global-to-local, align 4
  %v2_13498 = add i32 %v1_13498, 12
  %v3_13498 = inttoptr i32 %v2_13498 to i32*
  store i32 %v3_13494, i32* %v3_13498, align 4
  %v0_1349c = load i32, i32* %r6.global-to-local, align 4
  %v1_1349c = add i32 %v0_1349c, 96
  store i32 %v1_1349c, i32* %r3.global-to-local, align 4
  %v1_134a0 = inttoptr i32 %v1_1349c to i32*
  %v2_134a0 = load i32, i32* %v1_134a0, align 4
  store i32 %v2_134a0, i32* %r3.global-to-local, align 4
  %v3_134a0 = add i32 %v0_1349c, 100
  %v4_134a0 = inttoptr i32 %v3_134a0 to i32*
  %v5_134a0 = load i32, i32* %v4_134a0, align 4
  store i32 %v5_134a0, i32* %r4.global-to-local, align 4
  %v1_134a4 = add i32 %v0_1349c, 56
  %v2_134a4 = inttoptr i32 %v1_134a4 to i32*
  %v3_134a4 = load i32, i32* %v2_134a4, align 4
  store i32 %v3_134a4, i32* %r2.global-to-local, align 4
  %v1_134a8 = load i32, i32* %r5.global-to-local, align 4
  %v2_134a8 = add i32 %v1_134a8, 96
  %v3_134a8 = inttoptr i32 %v2_134a8 to i32*
  store i32 %v2_134a0, i32* %v3_134a8, align 4
  %v0_134ac = load i32, i32* %r4.global-to-local, align 4
  %v1_134ac = load i32, i32* %r5.global-to-local, align 4
  %v2_134ac = add i32 %v1_134ac, 100
  %v3_134ac = inttoptr i32 %v2_134ac to i32*
  store i32 %v0_134ac, i32* %v3_134ac, align 4
  %v0_134b0 = load i32, i32* %r6.global-to-local, align 4
  %v1_134b0 = add i32 %v0_134b0, 24
  store i32 %v1_134b0, i32* %ip.global-to-local, align 4
  %v1_134b4 = inttoptr i32 %v1_134b0 to i32*
  %v2_134b4 = load i32, i32* %v1_134b4, align 4
  store i32 %v2_134b4, i32* %ip.global-to-local, align 4
  %v3_134b4 = add i32 %v0_134b0, 28
  %v4_134b4 = inttoptr i32 %v3_134b4 to i32*
  %v5_134b4 = load i32, i32* %v4_134b4, align 4
  store i32 %v5_134b4, i32* %lr.global-to-local, align 4
  %v0_134b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_134b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_134b8 = add i32 %v1_134b8, 56
  %v3_134b8 = inttoptr i32 %v2_134b8 to i32*
  store i32 %v0_134b8, i32* %v3_134b8, align 4
  %v0_134bc = load i32, i32* %r6.global-to-local, align 4
  %v1_134bc = add i32 %v0_134bc, 72
  store i32 %v1_134bc, i32* %r3.global-to-local, align 4
  %v1_134c0 = add i32 %v0_134bc, 32
  store i32 %v1_134c0, i32* %r7.global-to-local, align 4
  %v1_134c4 = inttoptr i32 %v1_134c0 to i32*
  %v2_134c4 = load i32, i32* %v1_134c4, align 4
  store i32 %v2_134c4, i32* %r7.global-to-local, align 4
  %v3_134c4 = add i32 %v0_134bc, 36
  %v4_134c4 = inttoptr i32 %v3_134c4 to i32*
  %v5_134c4 = load i32, i32* %v4_134c4, align 4
  store i32 %v5_134c4, i32* %r8.global-to-local, align 4
  %v1_134c8 = inttoptr i32 %v1_134bc to i32*
  %v2_134c8 = load i32, i32* %v1_134c8, align 4
  %v3_134c8 = add i32 %v0_134bc, 76
  %v4_134c8 = inttoptr i32 %v3_134c8 to i32*
  %v5_134c8 = load i32, i32* %v4_134c8, align 4
  store i32 %v5_134c8, i32* %r1.global-to-local, align 4
  %v0_134cc = load i32, i32* %r5.global-to-local, align 4
  %v1_134cc = add i32 %v0_134cc, 72
  %v1_134d0 = inttoptr i32 %v1_134cc to i32*
  store i32 %v2_134c8, i32* %v1_134d0, align 4
  %v3_134d0 = add i32 %v0_134cc, 76
  %v4_134d0 = inttoptr i32 %v3_134d0 to i32*
  %v5_134d0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_134d0, i32* %v4_134d0, align 4
  %v0_134d4 = load i32, i32* %r7.global-to-local, align 4
  %v1_134d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_134d4 = add i32 %v1_134d4, 32
  %v3_134d4 = inttoptr i32 %v2_134d4 to i32*
  store i32 %v0_134d4, i32* %v3_134d4, align 4
  %v0_134d8 = load i32, i32* %r8.global-to-local, align 4
  %v1_134d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_134d8 = add i32 %v1_134d8, 36
  %v3_134d8 = inttoptr i32 %v2_134d8 to i32*
  store i32 %v0_134d8, i32* %v3_134d8, align 4
  %v0_134dc = load i32, i32* %r6.global-to-local, align 4
  %v1_134dc = add i32 %v0_134dc, 80
  store i32 %v1_134dc, i32* %r3.global-to-local, align 4
  %v1_134e0 = add i32 %v0_134dc, 48
  store i32 %v1_134e0, i32* %r7.global-to-local, align 4
  %v1_134e4 = inttoptr i32 %v1_134e0 to i32*
  %v2_134e4 = load i32, i32* %v1_134e4, align 4
  store i32 %v2_134e4, i32* %r7.global-to-local, align 4
  %v3_134e4 = add i32 %v0_134dc, 52
  %v4_134e4 = inttoptr i32 %v3_134e4 to i32*
  %v5_134e4 = load i32, i32* %v4_134e4, align 4
  store i32 %v5_134e4, i32* %r8.global-to-local, align 4
  %v1_134e8 = inttoptr i32 %v1_134dc to i32*
  %v2_134e8 = load i32, i32* %v1_134e8, align 4
  %v3_134e8 = add i32 %v0_134dc, 84
  %v4_134e8 = inttoptr i32 %v3_134e8 to i32*
  %v5_134e8 = load i32, i32* %v4_134e8, align 4
  store i32 %v5_134e8, i32* %r1.global-to-local, align 4
  %v1_134ec = add i32 %v0_134dc, 16
  %v2_134ec = inttoptr i32 %v1_134ec to i32*
  %v3_134ec = load i32, i32* %v2_134ec, align 4
  store i32 %v3_134ec, i32* %r2.global-to-local, align 4
  %v0_134f0 = load i32, i32* %r5.global-to-local, align 4
  %v1_134f0 = add i32 %v0_134f0, 80
  %v1_134f4 = inttoptr i32 %v1_134f0 to i32*
  store i32 %v2_134e8, i32* %v1_134f4, align 4
  %v3_134f4 = add i32 %v0_134f0, 84
  %v4_134f4 = inttoptr i32 %v3_134f4 to i32*
  %v5_134f4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_134f4, i32* %v4_134f4, align 4
  %v0_134f8 = load i32, i32* %r7.global-to-local, align 4
  %v1_134f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_134f8 = add i32 %v1_134f8, 48
  %v3_134f8 = inttoptr i32 %v2_134f8 to i32*
  store i32 %v0_134f8, i32* %v3_134f8, align 4
  %v0_134fc = load i32, i32* %r8.global-to-local, align 4
  %v1_134fc = load i32, i32* %r5.global-to-local, align 4
  %v2_134fc = add i32 %v1_134fc, 52
  %v3_134fc = inttoptr i32 %v2_134fc to i32*
  store i32 %v0_134fc, i32* %v3_134fc, align 4
  %v0_13500 = load i32, i32* %r2.global-to-local, align 4
  %v1_13500 = load i32, i32* %r5.global-to-local, align 4
  %v2_13500 = add i32 %v1_13500, 16
  %v3_13500 = inttoptr i32 %v2_13500 to i32*
  store i32 %v0_13500, i32* %v3_13500, align 4
  %v0_13504 = load i32, i32* %r6.global-to-local, align 4
  %v1_13504 = add i32 %v0_13504, 88
  store i32 %v1_13504, i32* %r3.global-to-local, align 4
  %v1_13508 = add i32 %v0_13504, 20
  %v2_13508 = inttoptr i32 %v1_13508 to i32*
  %v3_13508 = load i32, i32* %v2_13508, align 4
  store i32 %v3_13508, i32* %r2.global-to-local, align 4
  %v1_1350c = inttoptr i32 %v1_13504 to i32*
  %v2_1350c = load i32, i32* %v1_1350c, align 4
  %v3_1350c = add i32 %v0_13504, 92
  %v4_1350c = inttoptr i32 %v3_1350c to i32*
  %v5_1350c = load i32, i32* %v4_1350c, align 4
  store i32 %v5_1350c, i32* %r1.global-to-local, align 4
  %v1_13510 = add i32 %v0_13504, 64
  store i32 %v1_13510, i32* %r6.global-to-local, align 4
  %v1_13514 = inttoptr i32 %v1_13510 to i32*
  %v2_13514 = load i32, i32* %v1_13514, align 4
  store i32 %v2_13514, i32* %r6.global-to-local, align 4
  %v3_13514 = add i32 %v0_13504, 68
  %v4_13514 = inttoptr i32 %v3_13514 to i32*
  %v5_13514 = load i32, i32* %v4_13514, align 4
  store i32 %v5_13514, i32* %r7.global-to-local, align 4
  %v0_13518 = load i32, i32* %r5.global-to-local, align 4
  %v1_13518 = add i32 %v0_13518, 88
  store i32 %v1_13518, i32* %r3.global-to-local, align 4
  %v2_1351c = add i32 %v0_13518, 20
  %v3_1351c = inttoptr i32 %v2_1351c to i32*
  store i32 %v3_13508, i32* %v3_1351c, align 4
  %v0_13520 = load i32, i32* %ip.global-to-local, align 4
  %v1_13520 = load i32, i32* %r5.global-to-local, align 4
  %v2_13520 = add i32 %v1_13520, 24
  %v3_13520 = inttoptr i32 %v2_13520 to i32*
  store i32 %v0_13520, i32* %v3_13520, align 4
  %v0_13524 = load i32, i32* %lr.global-to-local, align 4
  %v1_13524 = load i32, i32* %r5.global-to-local, align 4
  %v2_13524 = add i32 %v1_13524, 28
  %v3_13524 = inttoptr i32 %v2_13524 to i32*
  store i32 %v0_13524, i32* %v3_13524, align 4
  %v0_13528 = load i32, i32* %r6.global-to-local, align 4
  %v1_13528 = load i32, i32* %r5.global-to-local, align 4
  %v2_13528 = add i32 %v1_13528, 64
  %v3_13528 = inttoptr i32 %v2_13528 to i32*
  store i32 %v0_13528, i32* %v3_13528, align 4
  %v0_1352c = load i32, i32* %r7.global-to-local, align 4
  %v1_1352c = load i32, i32* %r5.global-to-local, align 4
  %v2_1352c = add i32 %v1_1352c, 68
  %v3_1352c = inttoptr i32 %v2_1352c to i32*
  store i32 %v0_1352c, i32* %v3_1352c, align 4
  %v0_13530 = load i32, i32* %r3.global-to-local, align 4
  %v1_13530 = inttoptr i32 %v0_13530 to i32*
  store i32 %v2_1350c, i32* %v1_13530, align 4
  %v3_13530 = add i32 %v0_13530, 4
  %v4_13530 = inttoptr i32 %v3_13530 to i32*
  %v5_13530 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13530, i32* %v4_13530, align 4
  %v2_13534 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13534, i32* %r4.global-to-local, align 4
  ret i32 %v2_1350c

; uselistorder directives
  uselistorder i32 %v0_13504, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_134dc, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_1353c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1353c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_1353c = load i32, i32* @r4, align 4
  store i32 %v3_1353c, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13554 = inttoptr i32 %arg2 to i8*
  %v3_13554 = call i32 @function_10ac0(i8* %v2_13554, i32 0)
  %v2_13558 = load i32, i32* %arg1, align 4
  %v3_13558 = add i32 %tmp, 4
  %v4_13558 = inttoptr i32 %v3_13558 to i32*
  %v5_13558 = load i32, i32* %v4_13558, align 4
  store i32 %v5_13558, i32* %r4.global-to-local, align 4
  %v0_1355c = load i32, i32* %r6.global-to-local, align 4
  %v1_1355c = inttoptr i32 %v0_1355c to i32*
  store i32 %v2_13558, i32* %v1_1355c, align 4
  %v3_1355c = add i32 %v0_1355c, 4
  %v4_1355c = inttoptr i32 %v3_1355c to i32*
  %v5_1355c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1355c, i32* %v4_1355c, align 4
  %v0_13560 = load i32, i32* %r5.global-to-local, align 4
  %v1_13560 = add i32 %v0_13560, 32
  %v1_13564 = inttoptr i32 %v1_13560 to i32*
  %v2_13564 = load i32, i32* %v1_13564, align 4
  %v3_13564 = add i32 %v0_13560, 36
  %v4_13564 = inttoptr i32 %v3_13564 to i32*
  %v5_13564 = load i32, i32* %v4_13564, align 4
  store i32 %v5_13564, i32* %r4.global-to-local, align 4
  %v1_13568 = add i32 %v0_13560, 96
  %v2_13568 = inttoptr i32 %v1_13568 to i32*
  %v3_13568 = load i32, i32* %v2_13568, align 4
  store i32 %v3_13568, i32* %r2.global-to-local, align 4
  %v1_1356c = load i32, i32* %r6.global-to-local, align 4
  %v2_1356c = add i32 %v1_1356c, 32
  %v3_1356c = inttoptr i32 %v2_1356c to i32*
  store i32 %v2_13564, i32* %v3_1356c, align 4
  %v0_13570 = load i32, i32* %r4.global-to-local, align 4
  %v1_13570 = load i32, i32* %r6.global-to-local, align 4
  %v2_13570 = add i32 %v1_13570, 36
  %v3_13570 = inttoptr i32 %v2_13570 to i32*
  store i32 %v0_13570, i32* %v3_13570, align 4
  %v0_13574 = load i32, i32* %r2.global-to-local, align 4
  %v1_13574 = load i32, i32* %r6.global-to-local, align 4
  %v2_13574 = add i32 %v1_13574, 12
  %v3_13574 = inttoptr i32 %v2_13574 to i32*
  store i32 %v0_13574, i32* %v3_13574, align 4
  %v0_13578 = load i32, i32* %r5.global-to-local, align 4
  %v1_13578 = add i32 %v0_13578, 48
  %v2_13578 = inttoptr i32 %v1_13578 to i32*
  %v3_13578 = load i32, i32* %v2_13578, align 4
  %v1_1357c = add i32 %v0_13578, 24
  store i32 %v1_1357c, i32* %ip.global-to-local, align 4
  %v1_13580 = inttoptr i32 %v1_1357c to i32*
  %v2_13580 = load i32, i32* %v1_13580, align 4
  store i32 %v2_13580, i32* %ip.global-to-local, align 4
  %v3_13580 = add i32 %v0_13578, 28
  %v4_13580 = inttoptr i32 %v3_13580 to i32*
  %v5_13580 = load i32, i32* %v4_13580, align 4
  store i32 %v5_13580, i32* %lr.global-to-local, align 4
  %v1_13584 = load i32, i32* %r6.global-to-local, align 4
  %v2_13584 = add i32 %v1_13584, 44
  %v3_13584 = inttoptr i32 %v2_13584 to i32*
  store i32 %v3_13578, i32* %v3_13584, align 4
  %v0_13588 = load i32, i32* %r5.global-to-local, align 4
  %v1_13588 = add i32 %v0_13588, 64
  %v2_13588 = inttoptr i32 %v1_13588 to i32*
  %v3_13588 = load i32, i32* %v2_13588, align 4
  %v1_1358c = add i32 %v0_13588, 56
  %v2_1358c = inttoptr i32 %v1_1358c to i32*
  %v3_1358c = load i32, i32* %v2_1358c, align 4
  store i32 %v3_1358c, i32* %r2.global-to-local, align 4
  %v1_13590 = load i32, i32* %r6.global-to-local, align 4
  %v2_13590 = add i32 %v1_13590, 52
  %v3_13590 = inttoptr i32 %v2_13590 to i32*
  store i32 %v3_13588, i32* %v3_13590, align 4
  %v0_13594 = load i32, i32* %r2.global-to-local, align 4
  %v1_13594 = load i32, i32* %r6.global-to-local, align 4
  %v2_13594 = add i32 %v1_13594, 48
  %v3_13594 = inttoptr i32 %v2_13594 to i32*
  store i32 %v0_13594, i32* %v3_13594, align 4
  %v0_13598 = load i32, i32* %r5.global-to-local, align 4
  %v1_13598 = add i32 %v0_13598, 72
  %v1_1359c = inttoptr i32 %v1_13598 to i32*
  %v2_1359c = load i32, i32* %v1_1359c, align 4
  %v3_1359c = add i32 %v0_13598, 76
  %v4_1359c = inttoptr i32 %v3_1359c to i32*
  %v5_1359c = load i32, i32* %v4_1359c, align 4
  store i32 %v5_1359c, i32* %r1.global-to-local, align 4
  %v0_135a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_135a0 = add i32 %v0_135a0, 56
  %v1_135a4 = inttoptr i32 %v1_135a0 to i32*
  store i32 %v2_1359c, i32* %v1_135a4, align 4
  %v3_135a4 = add i32 %v0_135a0, 60
  %v4_135a4 = inttoptr i32 %v3_135a4 to i32*
  %v5_135a4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_135a4, i32* %v4_135a4, align 4
  %v0_135a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_135a8 = add i32 %v0_135a8, 80
  %v1_135ac = inttoptr i32 %v1_135a8 to i32*
  %v2_135ac = load i32, i32* %v1_135ac, align 4
  %v3_135ac = add i32 %v0_135a8, 84
  %v4_135ac = inttoptr i32 %v3_135ac to i32*
  %v5_135ac = load i32, i32* %v4_135ac, align 4
  store i32 %v5_135ac, i32* %r1.global-to-local, align 4
  %v0_135b0 = load i32, i32* %r6.global-to-local, align 4
  %v1_135b0 = add i32 %v0_135b0, 64
  %v1_135b4 = inttoptr i32 %v1_135b0 to i32*
  store i32 %v2_135ac, i32* %v1_135b4, align 4
  %v3_135b4 = add i32 %v0_135b0, 68
  %v4_135b4 = inttoptr i32 %v3_135b4 to i32*
  %v5_135b4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_135b4, i32* %v4_135b4, align 4
  %v0_135b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_135b8 = add i32 %v0_135b8, 16
  %v2_135b8 = inttoptr i32 %v1_135b8 to i32*
  %v3_135b8 = load i32, i32* %v2_135b8, align 4
  %v1_135bc = load i32, i32* %r6.global-to-local, align 4
  %v2_135bc = add i32 %v1_135bc, 16
  %v3_135bc = inttoptr i32 %v2_135bc to i32*
  store i32 %v3_135b8, i32* %v3_135bc, align 4
  %v0_135c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_135c0 = add i32 %v0_135c0, 88
  %v1_135c4 = add i32 %v0_135c0, 20
  %v2_135c4 = inttoptr i32 %v1_135c4 to i32*
  %v3_135c4 = load i32, i32* %v2_135c4, align 4
  store i32 %v3_135c4, i32* %r2.global-to-local, align 4
  %v1_135c8 = inttoptr i32 %v1_135c0 to i32*
  %v2_135c8 = load i32, i32* %v1_135c8, align 4
  %v3_135c8 = add i32 %v0_135c0, 92
  %v4_135c8 = inttoptr i32 %v3_135c8 to i32*
  %v5_135c8 = load i32, i32* %v4_135c8, align 4
  store i32 %v5_135c8, i32* %r1.global-to-local, align 4
  %v0_135cc = load i32, i32* %r6.global-to-local, align 4
  %v1_135cc = add i32 %v0_135cc, 72
  %v1_135d0 = inttoptr i32 %v1_135cc to i32*
  store i32 %v2_135c8, i32* %v1_135d0, align 4
  %v3_135d0 = add i32 %v0_135cc, 76
  %v4_135d0 = inttoptr i32 %v3_135d0 to i32*
  %v5_135d0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_135d0, i32* %v4_135d0, align 4
  %v0_135d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_135d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_135d4 = add i32 %v1_135d4, 20
  %v3_135d4 = inttoptr i32 %v2_135d4 to i32*
  store i32 %v0_135d4, i32* %v3_135d4, align 4
  %v0_135d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_135d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_135d8 = add i32 %v1_135d8, 24
  %v3_135d8 = inttoptr i32 %v2_135d8 to i32*
  store i32 %v0_135d8, i32* %v3_135d8, align 4
  %v0_135dc = load i32, i32* %lr.global-to-local, align 4
  %v1_135dc = load i32, i32* %r6.global-to-local, align 4
  %v2_135dc = add i32 %v1_135dc, 28
  %v3_135dc = inttoptr i32 %v2_135dc to i32*
  store i32 %v0_135dc, i32* %v3_135dc, align 4
  %v2_135e0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_135e0, i32* %r4.global-to-local, align 4
  ret i32 %v2_135c8

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_135e8(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_135e8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13604 = inttoptr i32 %arg2 to i8*
  %v3_13604 = call i32 @function_10ac0(i8* %v2_13604, i32 0)
  %v1_13608 = add i32 %tmp, 4
  %v2_13608 = inttoptr i32 %v1_13608 to i32*
  %v3_13608 = load i32, i32* %v2_13608, align 4
  %v2_1360c = load i32, i32* %arg1, align 4
  store i32 %v2_1360c, i32* %r8.global-to-local, align 4
  %v1_13610 = load i32, i32* %r5.global-to-local, align 4
  %v2_13610 = add i32 %v1_13610, 12
  %v3_13610 = inttoptr i32 %v2_13610 to i32*
  store i32 %v3_13608, i32* %v3_13610, align 4
  %v0_13614 = load i32, i32* %r4.global-to-local, align 4
  %v1_13614 = add i32 %v0_13614, 20
  %v2_13614 = inttoptr i32 %v1_13614 to i32*
  %v3_13614 = load i32, i32* %v2_13614, align 4
  %v1_13618 = add i32 %v0_13614, 16
  %v2_13618 = inttoptr i32 %v1_13618 to i32*
  %v3_13618 = load i32, i32* %v2_13618, align 4
  store i32 %v3_13618, i32* %r6.global-to-local, align 4
  %v1_1361c = load i32, i32* %r5.global-to-local, align 4
  %v2_1361c = add i32 %v1_1361c, 44
  %v3_1361c = inttoptr i32 %v2_1361c to i32*
  store i32 %v3_13614, i32* %v3_1361c, align 4
  %v0_13620 = load i32, i32* %r4.global-to-local, align 4
  %v1_13620 = add i32 %v0_13620, 24
  %v2_13620 = inttoptr i32 %v1_13620 to i32*
  %v3_13620 = load i32, i32* %v2_13620, align 4
  %v1_13624 = load i32, i32* %r5.global-to-local, align 4
  %v2_13624 = add i32 %v1_13624, 48
  %v3_13624 = inttoptr i32 %v2_13624 to i32*
  store i32 %v3_13620, i32* %v3_13624, align 4
  %v0_13628 = load i32, i32* %r4.global-to-local, align 4
  %v1_13628 = add i32 %v0_13628, 28
  %v2_13628 = inttoptr i32 %v1_13628 to i32*
  %v3_13628 = load i32, i32* %v2_13628, align 4
  %v1_1362c = load i32, i32* %r5.global-to-local, align 4
  %v2_1362c = add i32 %v1_1362c, 52
  %v3_1362c = inttoptr i32 %v2_1362c to i32*
  store i32 %v3_13628, i32* %v3_1362c, align 4
  %v0_13630 = load i32, i32* %r4.global-to-local, align 4
  %v1_13630 = add i32 %v0_13630, 32
  %v1_13634 = inttoptr i32 %v1_13630 to i32*
  %v2_13634 = load i32, i32* %v1_13634, align 4
  %v3_13634 = add i32 %v0_13630, 36
  %v4_13634 = inttoptr i32 %v3_13634 to i32*
  %v5_13634 = load i32, i32* %v4_13634, align 4
  store i32 %v5_13634, i32* %r1.global-to-local, align 4
  %v0_13638 = load i32, i32* %r5.global-to-local, align 4
  %v1_13638 = add i32 %v0_13638, 56
  %v1_1363c = inttoptr i32 %v1_13638 to i32*
  store i32 %v2_13634, i32* %v1_1363c, align 4
  %v3_1363c = add i32 %v0_13638, 60
  %v4_1363c = inttoptr i32 %v3_1363c to i32*
  %v5_1363c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1363c, i32* %v4_1363c, align 4
  %v0_13640 = load i32, i32* %r4.global-to-local, align 4
  %v1_13640 = add i32 %v0_13640, 40
  %v1_13644 = inttoptr i32 %v1_13640 to i32*
  %v2_13644 = load i32, i32* %v1_13644, align 4
  %v3_13644 = add i32 %v0_13640, 44
  %v4_13644 = inttoptr i32 %v3_13644 to i32*
  %v5_13644 = load i32, i32* %v4_13644, align 4
  store i32 %v5_13644, i32* %r1.global-to-local, align 4
  %v0_13648 = load i32, i32* %r5.global-to-local, align 4
  %v1_13648 = add i32 %v0_13648, 64
  %v1_1364c = inttoptr i32 %v1_13648 to i32*
  store i32 %v2_13644, i32* %v1_1364c, align 4
  %v3_1364c = add i32 %v0_13648, 68
  %v4_1364c = inttoptr i32 %v3_1364c to i32*
  %v5_1364c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1364c, i32* %v4_1364c, align 4
  %v0_13650 = load i32, i32* %r4.global-to-local, align 4
  %v1_13650 = add i32 %v0_13650, 48
  %v1_13654 = inttoptr i32 %v1_13650 to i32*
  %v2_13654 = load i32, i32* %v1_13654, align 4
  %v3_13654 = add i32 %v0_13650, 52
  %v4_13654 = inttoptr i32 %v3_13654 to i32*
  %v5_13654 = load i32, i32* %v4_13654, align 4
  store i32 %v5_13654, i32* %r1.global-to-local, align 4
  %v1_13658 = add i32 %v0_13650, 8
  %v2_13658 = inttoptr i32 %v1_13658 to i16*
  %v3_13658 = load i16, i16* %v2_13658, align 2
  %v4_13658 = zext i16 %v3_13658 to i32
  store i32 %v4_13658, i32* %r2.global-to-local, align 4
  %v1_1365c = add i32 %v0_13650, 10
  %v2_1365c = inttoptr i32 %v1_1365c to i16*
  %v3_1365c = load i16, i16* %v2_1365c, align 2
  %v4_1365c = zext i16 %v3_1365c to i32
  store i32 %v4_1365c, i32* %ip.global-to-local, align 4
  %v1_13660 = add i32 %v0_13650, 12
  %v2_13660 = inttoptr i32 %v1_13660 to i16*
  %v3_13660 = load i16, i16* %v2_13660, align 2
  %v4_13660 = zext i16 %v3_13660 to i32
  store i32 %v4_13660, i32* %lr.global-to-local, align 4
  %v1_13664 = add i32 %v0_13650, 14
  %v2_13664 = inttoptr i32 %v1_13664 to i16*
  %v3_13664 = load i16, i16* %v2_13664, align 2
  %v4_13664 = zext i16 %v3_13664 to i32
  store i32 %v4_13664, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_13670 = load i32, i32* %r5.global-to-local, align 4
  %v1_13670 = add i32 %v0_13670, 72
  %v1_13674 = inttoptr i32 %v1_13670 to i32*
  store i32 %v2_13654, i32* %v1_13674, align 4
  %v3_13674 = add i32 %v0_13670, 76
  %v4_13674 = inttoptr i32 %v3_13674 to i32*
  %v5_13674 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13674, i32* %v4_13674, align 4
  %v0_13678 = load i32, i32* %r5.global-to-local, align 4
  %v1_13678 = inttoptr i32 %v0_13678 to i32*
  %v2_13678 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_13678, i32* %v1_13678, align 4
  %v3_13678 = add i32 %v0_13678, 4
  %v4_13678 = inttoptr i32 %v3_13678 to i32*
  %v5_13678 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_13678, i32* %v4_13678, align 4
  %v0_1367c = load i32, i32* %r6.global-to-local, align 4
  %v1_1367c = load i32, i32* %r5.global-to-local, align 4
  %v2_1367c = add i32 %v1_1367c, 32
  %v3_1367c = inttoptr i32 %v2_1367c to i32*
  store i32 %v0_1367c, i32* %v3_1367c, align 4
  %v0_13680 = load i32, i32* %r7.global-to-local, align 4
  %v1_13680 = load i32, i32* %r5.global-to-local, align 4
  %v2_13680 = add i32 %v1_13680, 36
  %v3_13680 = inttoptr i32 %v2_13680 to i32*
  store i32 %v0_13680, i32* %v3_13680, align 4
  %v0_13684 = load i32, i32* %r2.global-to-local, align 4
  %v1_13684 = load i32, i32* %r5.global-to-local, align 4
  %v2_13684 = add i32 %v1_13684, 16
  %v3_13684 = inttoptr i32 %v2_13684 to i32*
  store i32 %v0_13684, i32* %v3_13684, align 4
  %v0_13688 = load i32, i32* %ip.global-to-local, align 4
  %v1_13688 = load i32, i32* %r5.global-to-local, align 4
  %v2_13688 = add i32 %v1_13688, 20
  %v3_13688 = inttoptr i32 %v2_13688 to i32*
  store i32 %v0_13688, i32* %v3_13688, align 4
  %v0_1368c = load i32, i32* %lr.global-to-local, align 4
  %v1_1368c = load i32, i32* %r5.global-to-local, align 4
  %v2_1368c = add i32 %v1_1368c, 24
  %v3_1368c = inttoptr i32 %v2_1368c to i32*
  store i32 %v0_1368c, i32* %v3_1368c, align 4
  %v0_13690 = load i32, i32* %r4.global-to-local, align 4
  %v1_13690 = load i32, i32* %r5.global-to-local, align 4
  %v2_13690 = add i32 %v1_13690, 28
  %v3_13690 = inttoptr i32 %v2_13690 to i32*
  store i32 %v0_13690, i32* %v3_13690, align 4
  ret i32 %v2_13654

; uselistorder directives
  uselistorder i32 %v0_13650, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 2, 7 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_136a0() local_unnamed_addr {
dec_label_pc_136a0:
  %stack_var_-16 = alloca i32, align 4
  %v2_136a4 = ptrtoint i32* %stack_var_-16 to i32
  %v2_136b0 = call i32 @function_153d8(i32 7, i32 %v2_136a4)
  %v1_136b4 = icmp slt i32 %v2_136b0, 0
  %v5_136b8 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_136b4, i32 256, i32 %v5_136b8
  ret i32 %storemerge
}

define i32 @function_136cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_136cc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136cc = load i32, i32* @r7, align 4
  store i32 %v3_136cc, i32* %stack_var_-8, align 4
  %v0_136d8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_136d8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_136d8, -4095
  br i1 %tmp, label %dec_label_pc_136f8, label %dec_label_pc_136e8

dec_label_pc_136e8:                               ; preds = %dec_label_pc_136cc
  %v0_136e8 = call i32 @function_10a6c()
  %v0_136ec = load i32, i32* %r7.global-to-local, align 4
  %v1_136ec = sub i32 0, %v0_136ec
  %v2_136f0 = inttoptr i32 %v0_136e8 to i32*
  store i32 %v1_136ec, i32* %v2_136f0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_136f8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_136f8

dec_label_pc_136f8:                               ; preds = %dec_label_pc_136cc, %dec_label_pc_136e8
  %v1_136fc = phi i32 [ %v0_136d8, %dec_label_pc_136cc ], [ -1, %dec_label_pc_136e8 ]
  %v2_136f8 = phi i32 [ %v3_136cc, %dec_label_pc_136cc ], [ %v2_136f8.pre, %dec_label_pc_136e8 ]
  store i32 %v2_136f8, i32* @r7, align 4
  ret i32 %v1_136fc

; uselistorder directives
  uselistorder i32 %v0_136d8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_136f8, { 1, 0 }
}

define i32 @function_13700(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13700:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13700 = load i32, i32* @r7, align 4
  store i32 %v3_13700, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13728, label %dec_label_pc_13718

dec_label_pc_13718:                               ; preds = %dec_label_pc_13700
  %v0_13718 = call i32 @function_10a6c()
  %v0_1371c = load i32, i32* %r7.global-to-local, align 4
  %v1_1371c = sub i32 0, %v0_1371c
  %v2_13720 = inttoptr i32 %v0_13718 to i32*
  store i32 %v1_1371c, i32* %v2_13720, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_1372c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13728

dec_label_pc_13728:                               ; preds = %dec_label_pc_13700, %dec_label_pc_13718
  %v2_1372c = phi i32 [ %v3_13700, %dec_label_pc_13700 ], [ %v2_1372c.pre, %dec_label_pc_13718 ]
  %v0_13728 = phi i32 [ %arg1, %dec_label_pc_13700 ], [ -1, %dec_label_pc_13718 ]
  store i32 %v2_1372c, i32* @r7, align 4
  ret i32 %v0_13728

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13728, { 1, 0 }
}

define i32 @function_13734(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13734:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13768, label %dec_label_pc_13758

dec_label_pc_13758:                               ; preds = %dec_label_pc_13734
  %v0_13758 = call i32 @function_10a6c()
  %v0_1375c = load i32, i32* %r4.global-to-local, align 4
  %v1_1375c = sub i32 0, %v0_1375c
  %v2_13760 = inttoptr i32 %v0_13758 to i32*
  store i32 %v1_1375c, i32* %v2_13760, align 4
  br label %dec_label_pc_13768

dec_label_pc_13768:                               ; preds = %dec_label_pc_13734, %dec_label_pc_13758
  %v1_13770 = phi i32 [ %arg1, %dec_label_pc_13734 ], [ -1, %dec_label_pc_13758 ]
  ret i32 %v1_13770

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13768, { 1, 0 }
}

define i32 @function_13774(i32 %arg1) local_unnamed_addr {
dec_label_pc_13774:
  %v1_13784 = load i32, i32* @r0, align 4
  ret i32 %v1_13784
}

define i32 @function_13788(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13788:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13788 = load i32, i32* @r7, align 4
  store i32 %v3_13788, i32* %stack_var_-8, align 4
  %v0_13794 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13794, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13794, -4095
  br i1 %tmp, label %dec_label_pc_137b4, label %dec_label_pc_137a4

dec_label_pc_137a4:                               ; preds = %dec_label_pc_13788
  %v0_137a4 = call i32 @function_10a6c()
  %v0_137a8 = load i32, i32* %r7.global-to-local, align 4
  %v1_137a8 = sub i32 0, %v0_137a8
  %v2_137ac = inttoptr i32 %v0_137a4 to i32*
  store i32 %v1_137a8, i32* %v2_137ac, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_137b4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_137b4

dec_label_pc_137b4:                               ; preds = %dec_label_pc_13788, %dec_label_pc_137a4
  %v1_137b8 = phi i32 [ %v0_13794, %dec_label_pc_13788 ], [ -1, %dec_label_pc_137a4 ]
  %v2_137b4 = phi i32 [ %v3_13788, %dec_label_pc_13788 ], [ %v2_137b4.pre, %dec_label_pc_137a4 ]
  store i32 %v2_137b4, i32* @r7, align 4
  ret i32 %v1_137b8

; uselistorder directives
  uselistorder i32 %v0_13794, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_137b4, { 1, 0 }
}

define i32 @function_137bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_137bc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137c0.outer

dec_label_pc_137c0.outer:                         ; preds = %dec_label_pc_137d8, %dec_label_pc_137bc
  %v0_137c0.ph = phi i32 [ %v0_137c0.pre.pre, %dec_label_pc_137d8 ], [ %arg1, %dec_label_pc_137bc ]
  %tmp = icmp ult i32 %v0_137c0.ph, -4095
  br label %dec_label_pc_137c0

dec_label_pc_137c0:                               ; preds = %dec_label_pc_137c0.outer, %dec_label_pc_137c0
  br i1 %tmp, label %dec_label_pc_137c0, label %dec_label_pc_137d8

dec_label_pc_137d8:                               ; preds = %dec_label_pc_137c0
  %v0_137d8 = call i32 @function_10a6c()
  %v1_137dc = sub i32 0, %v0_137c0.ph
  %v2_137e0 = inttoptr i32 %v0_137d8 to i32*
  store i32 %v1_137dc, i32* %v2_137e0, align 4
  %v0_137c0.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137c0.outer

; uselistorder directives
  uselistorder i32 %v0_137c0.ph, { 1, 0 }
  uselistorder label %dec_label_pc_137c0, { 1, 0 }
}

define i32 @function_137e8(i32* %arg1) local_unnamed_addr {
dec_label_pc_137e8:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 122896, i32* @r6, align 4
  %v1_137fc = add i32 %tmp, 24
  store i32 %v1_137fc, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_13814 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  store i32 %v4_13814, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13814)
  %v0_13828 = load i32, i32* @r6, align 4
  %v2_13828 = add i32 %v0_13828, 16
  %v3_13828 = inttoptr i32 %v2_13828 to i32*
  %v4_13828 = load i32, i32* %v3_13828, align 4
  store i32 %v4_13828, i32* %ip.global-to-local, align 4
  store i32 79924, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13828)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_13838

dec_label_pc_13838:                               ; preds = %dec_label_pc_13868, %dec_label_pc_137e8
  %v0_13838 = load i32, i32* @r5, align 4
  %v1_13838 = add i32 %v0_13838, 4
  %v2_13838 = inttoptr i32 %v1_13838 to i32*
  %v3_13838 = load i32, i32* %v2_13838, align 4
  %v4_13838 = add i32 %v0_13838, 8
  %v5_13838 = inttoptr i32 %v4_13838 to i32*
  %v6_13838 = load i32, i32* %v5_13838, align 4
  %tmp10 = icmp ugt i32 %v6_13838, %v3_13838
  br i1 %tmp10, label %dec_label_pc_13868, label %dec_label_pc_13844

dec_label_pc_13844:                               ; preds = %dec_label_pc_13838
  %v1_13844 = inttoptr i32 %v0_13838 to i32*
  %v2_13844 = load i32, i32* %v1_13844, align 4
  %v1_13848 = add i32 %v0_13838, 12
  %v2_13848 = inttoptr i32 %v1_13848 to i32*
  %v3_13848 = load i32, i32* %v2_13848, align 4
  %v1_1384c = add i32 %v0_13838, 20
  %v2_1384c = inttoptr i32 %v1_1384c to i32*
  %v3_1384c = load i32, i32* %v2_1384c, align 4
  %v4_13850 = inttoptr i32 %v3_13848 to i32*
  %v5_13850 = call i32 @function_1540c(i32 %v2_13844, i32* %v4_13850, i32 %v3_1384c, i32 %v6_13838)
  %tmp9 = icmp slt i32 %v5_13850, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_13860

.thread:                                          ; preds = %dec_label_pc_13844
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13898

dec_label_pc_13860:                               ; preds = %dec_label_pc_13844
  %v1_13860 = load i32, i32* @r5, align 4
  %v2_13860 = add i32 %v1_13860, 8
  %v3_13860 = inttoptr i32 %v2_13860 to i32*
  store i32 %v5_13850, i32* %v3_13860, align 4
  %v0_13864 = load i32, i32* @r7, align 4
  %v1_13864 = load i32, i32* @r5, align 4
  %v2_13864 = add i32 %v1_13864, 4
  %v3_13864 = inttoptr i32 %v2_13864 to i32*
  store i32 %v0_13864, i32* %v3_13864, align 4
  %v0_13868.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13868

dec_label_pc_13868:                               ; preds = %dec_label_pc_13838, %dec_label_pc_13860
  %v1_1388c = phi i32 [ %v0_13838, %dec_label_pc_13838 ], [ %v0_13868.pre, %dec_label_pc_13860 ]
  %v1_13868 = add i32 %v1_1388c, 4
  %v2_13868 = inttoptr i32 %v1_13868 to i32*
  %v3_13868 = load i32, i32* %v2_13868, align 4
  %v1_1386c = add i32 %v1_1388c, 12
  %v2_1386c = inttoptr i32 %v1_1386c to i32*
  %v3_1386c = load i32, i32* %v2_1386c, align 4
  %v2_13870 = add i32 %v3_1386c, %v3_13868
  store i32 %v2_13870, i32* @r4, align 4
  %v3_13874 = inttoptr i32 %v2_13870 to i32*
  %v4_13874 = load i32, i32* %v3_13874, align 4
  %v1_13878 = add i32 %v2_13870, 4
  %v2_13878 = inttoptr i32 %v1_13878 to i32*
  %v3_13878 = load i32, i32* %v2_13878, align 4
  %v1_1387c = add i32 %v2_13870, 16
  %v2_1387c = inttoptr i32 %v1_1387c to i16*
  %v3_1387c = load i16, i16* %v2_1387c, align 2
  %v4_1387c = zext i16 %v3_1387c to i32
  %v1_13880 = add i32 %v2_13870, 8
  %v2_13880 = inttoptr i32 %v1_13880 to i32*
  %v3_13880 = load i32, i32* %v2_13880, align 4
  store i32 %v3_13880, i32* %ip.global-to-local, align 4
  %v2_13884 = add i32 %v4_1387c, %v3_13868
  %v2_13888 = or i32 %v3_13878, %v4_13874
  %v4_13888 = icmp eq i32 %v2_13888, 0
  store i32 %v2_13884, i32* %v2_13868, align 4
  %v0_13890 = load i32, i32* %ip.global-to-local, align 4
  %v1_13890 = load i32, i32* @r5, align 4
  %v2_13890 = add i32 %v1_13890, 16
  %v3_13890 = inttoptr i32 %v2_13890 to i32*
  store i32 %v0_13890, i32* %v3_13890, align 4
  br i1 %v4_13888, label %dec_label_pc_13838, label %dec_label_pc_13898

dec_label_pc_13898:                               ; preds = %dec_label_pc_13868, %.thread
  %v0_138a4 = load i32, i32* @r6, align 4
  %v2_138a4 = add i32 %v0_138a4, 24
  %v3_138a4 = inttoptr i32 %v2_138a4 to i32*
  %v4_138a4 = load i32, i32* %v3_138a4, align 4
  store i32 %v4_138a4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_138a4)
  %v0_138b0 = load i32, i32* @r4, align 4
  ret i32 %v0_138b0

; uselistorder directives
  uselistorder i32 %v2_13870, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_1388c, { 1, 0 }
  uselistorder i32 %v6_13838, { 1, 0 }
  uselistorder i32 %v0_13838, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_13868, { 1, 0 }
}

define i32 @function_138c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_138c4:
  %v0_138c4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_138c4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_138c4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_138c4, %bb
  %v10_138d0 = phi i32 [ %arg1, %dec_label_pc_138c4 ], [ 0, %bb ]
  ret i32 %v10_138d0

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_138d4(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_138d4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_138d4 = load i32, i32* @r4, align 4
  %v6_138d4 = load i32, i32* @r5, align 4
  %v9_138d4 = load i32, i32* @r6, align 4
  %v12_138d4 = load i32, i32* @r7, align 4
  %v15_138d4 = load i32, i32* @r8, align 4
  %v18_138d4 = load i32, i32* @sb, align 4
  %v21_138d4 = load i32, i32* @sl, align 4
  %v24_138d4 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_138d8 = icmp eq i32* %arg1, null
  store i1 %v2_138d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_138d8, label %dec_label_pc_13be8, label %dec_label_pc_138f0

dec_label_pc_138f0:                               ; preds = %dec_label_pc_138d4
  %v1_138f0 = urem i32 %arg3, 256
  store i32 %v1_138f0, i32* @sb, align 4
  %v1_138f4 = udiv i32 %arg3, 256
  %v3_138f8 = urem i32 %v1_138f4, 256
  %v3_138fc = mul nuw nsw i32 %v1_138f0, 4
  %v1_13904 = or i32 %v3_138fc, 1
  %v1_13910 = and i32 %arg3, 131072
  %v1_13914 = add nsw i32 %v1_138f0, -1
  %v1_13920 = and i32 %arg3, 262144
  store i32 %v1_13920, i32* %r2.global-to-local, align 4
  %v1_13924 = and i32 %arg3, 65536
  store i32 %v1_13924, i32* %r3.global-to-local, align 4
  store i32 %v1_13924, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_13934 = add i32 %arg4, 1
  store i32 %v1_13934, i32* @sl, align 4
  %v2_13ab4 = inttoptr i32 %arg2 to i32*
  %v2_13ac4 = icmp eq i32 %v1_13910, 0
  %v2_13b1c = icmp eq i32 %v1_13920, 0
  br label %dec_label_pc_13938

dec_label_pc_13938:                               ; preds = %dec_label_pc_13938.backedge, %dec_label_pc_138f0
  %v2_13954 = phi i32 [ %v0_13938.pre, %dec_label_pc_13938.backedge ], [ %tmp, %dec_label_pc_138f0 ]
  %v1_13938 = add i32 %v2_13954, 4
  %v2_13938 = inttoptr i32 %v1_13938 to i32*
  %v3_13938 = load i32, i32* %v2_13938, align 4
  store i32 %v3_13938, i32* %r3.global-to-local, align 4
  %v2_1393c = icmp eq i32 %v3_13938, 0
  store i1 %v2_1393c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1393c, label %dec_label_pc_13944, label %dec_label_pc_1398c

dec_label_pc_13944:                               ; preds = %dec_label_pc_13938
  %v1_13944 = add i32 %v2_13954, 16
  %v2_13944 = inttoptr i32 %v1_13944 to i32*
  %v3_13944 = load i32, i32* %v2_13944, align 4
  store i32 %v3_13944, i32* %r3.global-to-local, align 4
  %v2_13948 = icmp eq i32 %v3_13944, 0
  store i1 %v2_13948, i1* %cpsr_z.global-to-local, align 1
  %v1_1394c = add i32 %v2_13954, 8
  %v2_1394c = inttoptr i32 %v1_1394c to i32*
  %v3_1394c = load i32, i32* %v2_1394c, align 4
  store i32 %v3_1394c, i32* %r3.global-to-local, align 4
  br i1 %v2_13948, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_13944
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_13944, align 4
  %v0_13958.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_13944, %bb
  %v0_13958 = phi i32 [ %v0_13958.pre, %bb ], [ %v3_1394c, %dec_label_pc_13944 ]
  %v2_13958 = icmp eq i32 %v0_13958, 0
  store i1 %v2_13958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13958, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_13904, i32* %r3.global-to-local, align 4
  %v2_13960 = load i32, i32* @r5, align 4
  %v3_13960 = add i32 %v2_13960, 8
  %v4_13960 = inttoptr i32 %v3_13960 to i32*
  store i32 %v1_13904, i32* %v4_13960, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_13964 = load i32, i32* @r5, align 4
  %v1_13964 = add i32 %v0_13964, 16
  %v2_13964 = inttoptr i32 %v1_13964 to i32*
  %v3_13964 = load i32, i32* %v2_13964, align 4
  store i32 %v3_13964, i32* %r0.global-to-local, align 4
  %v1_13968 = add i32 %v0_13964, 8
  %v2_13968 = inttoptr i32 %v1_13968 to i32*
  %v3_13968 = load i32, i32* %v2_13968, align 4
  store i32 %v3_13968, i32* %r3.global-to-local, align 4
  %v2_1396c = add i32 %v3_13968, %v3_13964
  store i32 %v2_1396c, i32* @r0, align 4
  %v0_13970 = call i32 @function_11078()
  store i32 %v0_13970, i32* %r0.global-to-local, align 4
  %v2_13974 = icmp eq i32 %v0_13970, 0
  store i1 %v2_13974, i1* %cpsr_z.global-to-local, align 1
  %v1_13978 = load i32, i32* @r5, align 4
  %v2_13978 = add i32 %v1_13978, 4
  %v3_13978 = inttoptr i32 %v2_13978 to i32*
  store i32 %v0_13970, i32* %v3_13978, align 4
  br i1 %v2_13974, label %dec_label_pc_13be8, label %dec_label_pc_13980

dec_label_pc_13980:                               ; preds = %.thread
  %v0_13980 = load i32, i32* @r5, align 4
  %v1_13980 = add i32 %v0_13980, 20
  %v2_13980 = inttoptr i32 %v1_13980 to i32*
  %v3_13980 = load i32, i32* %v2_13980, align 4
  %v1_13984 = or i32 %v3_13980, 1
  store i32 %v1_13984, i32* %r3.global-to-local, align 4
  store i32 %v1_13984, i32* %v2_13980, align 4
  %v0_1398c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1398c

dec_label_pc_1398c:                               ; preds = %dec_label_pc_13938, %dec_label_pc_13980
  %v1_13994 = phi i32 [ %v2_13954, %dec_label_pc_13938 ], [ %v0_1398c.pre, %dec_label_pc_13980 ]
  %v1_1398c = add i32 %v1_13994, 4
  %v2_1398c = inttoptr i32 %v1_1398c to i32*
  %v3_1398c = load i32, i32* %v2_1398c, align 4
  store i32 %v3_1398c, i32* %r2.global-to-local, align 4
  %v4_1398c = add i32 %v1_13994, 8
  %v5_1398c = inttoptr i32 %v4_1398c to i32*
  %v6_1398c = load i32, i32* %v5_1398c, align 4
  %v2_13990 = add i32 %v6_1398c, %v3_1398c
  store i32 %v2_13990, i32* %r3.global-to-local, align 4
  %v2_13994 = add i32 %v1_13994, 12
  %v3_13994 = inttoptr i32 %v2_13994 to i32*
  store i32 %v2_13990, i32* %v3_13994, align 4
  %v0_13998 = load i32, i32* @fp, align 4
  store i32 %v0_13998, i32* @r6, align 4
  br label %dec_label_pc_1399c

dec_label_pc_1399c:                               ; preds = %dec_label_pc_13a28, %dec_label_pc_13a14, %dec_label_pc_1398c
  %v0_139a4 = phi i32 [ %v0_13998, %dec_label_pc_1398c ], [ %v1_13a14, %dec_label_pc_13a14 ], [ %v0_139a4.pre.pre, %dec_label_pc_13a28 ]
  %v0_1399c = load i32, i32* @r5, align 4
  %v1_1399c = add i32 %v0_1399c, 12
  store i32 %v1_1399c, i32* %r0.global-to-local, align 4
  %v1_139a0 = inttoptr i32 %v1_1399c to i32*
  %v2_139a0 = load i32, i32* %v1_139a0, align 4
  store i32 %v2_139a0, i32* %r0.global-to-local, align 4
  %v3_139a0 = add i32 %v0_1399c, 16
  %v4_139a0 = inttoptr i32 %v3_139a0 to i32*
  %v5_139a0 = load i32, i32* %v4_139a0, align 4
  %v2_139a4 = add i32 %v2_139a0, %v0_139a4
  store i32 %v2_139a4, i32* %r0.global-to-local, align 4
  %v2_139a8 = sub i32 %v5_139a0, %v0_139a4
  %v1_139ac = inttoptr i32 %v0_1399c to i32*
  %v2_139ac = load i32, i32* %v1_139ac, align 4
  store i32 %v2_139ac, i32* %r2.global-to-local, align 4
  %v3_139b0 = call i32 @function_143d0(i32 %v2_139a4, i32 %v2_139a8, i32 %v2_139ac)
  store i32 %v3_139b0, i32* %r0.global-to-local, align 4
  store i32 %v3_139b0, i32* %r4.global-to-local, align 4
  %v2_139b4 = icmp eq i32 %v3_139b0, 0
  store i1 %v2_139b4, i1* %cpsr_z.global-to-local, align 1
  %v0_139bc = load i32, i32* @r5, align 4
  %v1_139bc = add i32 %v0_139bc, 12
  br i1 %v2_139b4, label %dec_label_pc_139bc, label %dec_label_pc_139d4

dec_label_pc_139bc:                               ; preds = %dec_label_pc_1399c
  store i32 %v1_139bc, i32* %r0.global-to-local, align 4
  %v1_139c0 = inttoptr i32 %v1_139bc to i32*
  %v2_139c0 = load i32, i32* %v1_139c0, align 4
  store i32 %v2_139c0, i32* %r0.global-to-local, align 4
  %v3_139c0 = add i32 %v0_139bc, 16
  %v4_139c0 = inttoptr i32 %v3_139c0 to i32*
  %v5_139c0 = load i32, i32* %v4_139c0, align 4
  store i32 %v5_139c0, i32* @r2, align 4
  %v2_139c8 = inttoptr i32 %v2_139c0 to i8*
  %v3_139c8 = call i32 @function_10ac0(i8* %v2_139c8, i32 0)
  store i32 %v3_139c8, i32* %r0.global-to-local, align 4
  %v0_139cc = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13bec

dec_label_pc_139d4:                               ; preds = %dec_label_pc_1399c
  %v2_139d4 = inttoptr i32 %v1_139bc to i32*
  %v3_139d4 = load i32, i32* %v2_139d4, align 4
  store i32 %v3_139d4, i32* @r4, align 4
  %v1_139d8 = load i32, i32* @r6, align 4
  %v2_139d8 = add i32 %v1_139d8, %v3_139d4
  store i32 %v2_139d8, i32* %r0.global-to-local, align 4
  %v1_139dc = call i32 @function_14e80(i32 %v2_139d8)
  %v0_139e4 = load i32, i32* @r6, align 4
  %v2_139e4 = add i32 %v0_139e4, %v1_139dc
  store i32 %v2_139e4, i32* @r6, align 4
  %v0_139e8 = load i32, i32* @r4, align 4
  store i32 %v0_139e8, i32* @r0, align 4
  %v2_139ec = call i32 @function_150cc(i32 %v0_139e8, i32 10)
  store i32 %v2_139ec, i32* %r0.global-to-local, align 4
  %v2_139f0 = icmp eq i32 %v2_139ec, 0
  store i1 %v2_139f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_139f0, label %dec_label_pc_13a1c, label %dec_label_pc_139f8

dec_label_pc_139f8:                               ; preds = %dec_label_pc_139d4
  %v1_139f8 = inttoptr i32 %v2_139ec to i8*
  %v2_139f8 = load i8, i8* %v1_139f8, align 1
  %v3_139f8 = zext i8 %v2_139f8 to i32
  %v1_139fc = add nuw nsw i32 %v3_139f8, 255
  %v1_13a00 = urem i32 %v1_139fc, 256
  store i32 %v1_13a00, i32* %r3.global-to-local, align 4
  %v7_13a04 = icmp eq i32 %v1_13a00, 92
  store i1 %v7_13a04, i1* %cpsr_z.global-to-local, align 1
  %v1_13a08 = trunc i32 %v1_139fc to i8
  store i8 %v1_13a08, i8* %v1_139f8, align 1
  %v0_13a0c = load i32, i32* @r6, align 4
  %v1_13a0c = add i32 %v0_13a0c, -1
  store i32 %v1_13a0c, i32* @r6, align 4
  %v0_13a10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13a10, label %dec_label_pc_13a14, label %dec_label_pc_13aa0

dec_label_pc_13a14:                               ; preds = %dec_label_pc_139f8
  %v1_13a14 = add i32 %v0_13a0c, -2
  store i32 %v1_13a14, i32* @r6, align 4
  br label %dec_label_pc_1399c

dec_label_pc_13a1c:                               ; preds = %dec_label_pc_139d4
  %v0_13a1c = load i32, i32* @r5, align 4
  %v1_13a1c = add i32 %v0_13a1c, 20
  %v2_13a1c = inttoptr i32 %v1_13a1c to i32*
  %v3_13a1c = load i32, i32* %v2_13a1c, align 4
  store i32 %v3_13a1c, i32* %r3.global-to-local, align 4
  %v2_13a20 = icmp eq i32 %v3_13a1c, 0
  store i1 %v2_13a20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a20, label %dec_label_pc_13a58, label %dec_label_pc_13a28

dec_label_pc_13a28:                               ; preds = %dec_label_pc_13a1c
  %v1_13a28 = add i32 %v0_13a1c, 16
  %v2_13a28 = inttoptr i32 %v1_13a28 to i32*
  %v3_13a28 = load i32, i32* %v2_13a28, align 4
  store i32 %v3_13a28, i32* %r3.global-to-local, align 4
  %v1_13a2c = add i32 %v0_13a1c, 8
  %v2_13a2c = inttoptr i32 %v1_13a2c to i32*
  %v3_13a2c = load i32, i32* %v2_13a2c, align 4
  %v1_13a30 = add i32 %v3_13a28, 4096
  store i32 %v1_13a30, i32* %r3.global-to-local, align 4
  %v2_13a34 = add i32 %v3_13a2c, %v1_13a30
  store i32 %v1_13a30, i32* %v2_13a28, align 4
  %v0_13a3c = load i32, i32* @r5, align 4
  %v1_13a3c = add i32 %v0_13a3c, 4
  %v2_13a3c = inttoptr i32 %v1_13a3c to i32*
  %v3_13a3c = load i32, i32* %v2_13a3c, align 4
  store i32 %v3_13a3c, i32* %r0.global-to-local, align 4
  %v4_13a40 = inttoptr i32 %v3_13a3c to i32*
  %v5_13a40 = call i32 @function_11acc(i32* %v4_13a40, i32 %v2_13a34, i32 %v2_139ac, i32 %v1_13a30)
  store i32 %v5_13a40, i32* %r0.global-to-local, align 4
  %v0_13a44 = load i32, i32* @r5, align 4
  %v1_13a44 = add i32 %v0_13a44, 8
  %v2_13a44 = inttoptr i32 %v1_13a44 to i32*
  %v3_13a44 = load i32, i32* %v2_13a44, align 4
  %v2_13a48 = add i32 %v3_13a44, %v5_13a40
  store i32 %v2_13a48, i32* %r3.global-to-local, align 4
  %v2_13a4c = add i32 %v0_13a44, 12
  %v3_13a4c = inttoptr i32 %v2_13a4c to i32*
  store i32 %v2_13a48, i32* %v3_13a4c, align 4
  %v1_13a50 = load i32, i32* @r5, align 4
  %v2_13a50 = add i32 %v1_13a50, 4
  %v3_13a50 = inttoptr i32 %v2_13a50 to i32*
  store i32 %v5_13a40, i32* %v3_13a50, align 4
  %v0_139a4.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1399c

dec_label_pc_13a58:                               ; preds = %dec_label_pc_13a1c, %.dec_label_pc_13a58_crit_edge
  %v0_13a58 = phi i32 [ %v0_13a58.pre, %.dec_label_pc_13a58_crit_edge ], [ %v0_13a1c, %dec_label_pc_13a1c ]
  %v1_13a58 = inttoptr i32 %v0_13a58 to i32*
  %v2_13a58 = load i32, i32* %v1_13a58, align 4
  %v1_13a5c = add i32 %v2_13a58, 52
  %v2_13a5c = inttoptr i32 %v1_13a5c to i32*
  %v3_13a5c = load i32, i32* %v2_13a5c, align 4
  store i32 %v3_13a5c, i32* %r3.global-to-local, align 4
  %v2_13a60 = icmp eq i32 %v3_13a5c, 0
  store i1 %v2_13a60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a60, label %dec_label_pc_13a8c, label %dec_label_pc_13a68

dec_label_pc_13a68:                               ; preds = %dec_label_pc_13a58
  %v1_13a68 = add i32 %v2_13a58, 16
  %v2_13a68 = inttoptr i32 %v1_13a68 to i32*
  %v3_13a68 = load i32, i32* %v2_13a68, align 4
  store i32 %v3_13a68, i32* %r2.global-to-local, align 4
  %v1_13a6c = add i32 %v2_13a58, 24
  %v2_13a6c = inttoptr i32 %v1_13a6c to i32*
  %v3_13a6c = load i32, i32* %v2_13a6c, align 4
  store i32 %v3_13a6c, i32* %r3.global-to-local, align 4
  %v3_13a70 = icmp ult i32 %v3_13a68, %v3_13a6c
  %v9_13a70 = icmp eq i32 %v3_13a68, %v3_13a6c
  store i1 %v9_13a70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13a70, label %dec_label_pc_13a94thread-pre-split, label %dec_label_pc_13a80

dec_label_pc_13a80:                               ; preds = %dec_label_pc_13a68
  store i32 %v2_13a58, i32* %r0.global-to-local, align 4
  %v1_13a84 = inttoptr i32 %v2_13a58 to i16*
  %v2_13a84 = call i32 @function_14820(i16* %v1_13a84)
  store i32 %v2_13a84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13a94

dec_label_pc_13a8c:                               ; preds = %dec_label_pc_13a58
  store i32 %v2_13a58, i32* %r0.global-to-local, align 4
  %v1_13a90 = call i32 @function_142f4(i32 %v2_13a58)
  store i32 %v1_13a90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13a94

dec_label_pc_13a94thread-pre-split:               ; preds = %dec_label_pc_13a68
  %v2_13a74 = inttoptr i32 %v3_13a68 to i8*
  %v3_13a74 = load i8, i8* %v2_13a74, align 1
  %v4_13a74 = zext i8 %v3_13a74 to i32
  store i32 %v4_13a74, i32* %r0.global-to-local, align 4
  %v6_13a74 = add i32 %v3_13a68, 1
  store i32 %v6_13a74, i32* %r2.global-to-local, align 4
  store i32 %v6_13a74, i32* %v2_13a68, align 4
  %v0_13a94.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13a94

dec_label_pc_13a94:                               ; preds = %dec_label_pc_13a94thread-pre-split, %dec_label_pc_13a80, %dec_label_pc_13a8c
  %v1_13a98 = phi i32 [ %v0_13a94.pr, %dec_label_pc_13a94thread-pre-split ], [ %v2_13a84, %dec_label_pc_13a80 ], [ %v1_13a90, %dec_label_pc_13a8c ]
  %v7_13a94 = icmp eq i32 %v1_13a98, 10
  store i1 %v7_13a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13a94, label %dec_label_pc_13aa0.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_13a94
  %v8_13a98 = icmp eq i32 %v1_13a98, -1
  store i1 %v8_13a98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_13a98, label %dec_label_pc_13aa0.loopexit, label %.dec_label_pc_13a58_crit_edge

.dec_label_pc_13a58_crit_edge:                    ; preds = %bb68
  %v0_13a58.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13a58

dec_label_pc_13aa0.loopexit:                      ; preds = %bb68, %dec_label_pc_13a94
  %v0_13aa0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13aa0

dec_label_pc_13aa0:                               ; preds = %dec_label_pc_139f8, %dec_label_pc_13aa0.loopexit
  %v0_13aa0 = phi i32 [ %v0_13aa0.pre, %dec_label_pc_13aa0.loopexit ], [ %v1_13a0c, %dec_label_pc_139f8 ]
  %v7_13aa0 = icmp eq i32 %v0_13aa0, -1
  store i1 %v7_13aa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13aa0, label %dec_label_pc_13be8, label %dec_label_pc_13aa8

dec_label_pc_13aa8:                               ; preds = %dec_label_pc_13aa0
  %v0_13aa8 = load i32, i32* @r5, align 4
  %v1_13aa8 = add i32 %v0_13aa8, 4
  %v2_13aa8 = inttoptr i32 %v1_13aa8 to i32*
  %v3_13aa8 = load i32, i32* %v2_13aa8, align 4
  store i32 %v3_13aa8, i32* %r0.global-to-local, align 4
  store i32 %v3_138fc, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_13aa8, i32* %v2_13ab4, align 4
  %v0_13ab8 = load i32, i32* @fp, align 4
  %v2_13abc = inttoptr i32 %v3_13aa8 to i8*
  %v3_13abc = call i32 @function_10ac0(i8* %v2_13abc, i32 %v0_13ab8)
  store i32 %v3_13abc, i32* %r0.global-to-local, align 4
  store i32 %v1_13910, i32* %r2.global-to-local, align 4
  store i1 %v2_13ac4, i1* %cpsr_z.global-to-local, align 1
  %v0_13ac8 = load i32, i32* @r5, align 4
  %v1_13ac8 = add i32 %v0_13ac8, 12
  %v2_13ac8 = inttoptr i32 %v1_13ac8 to i32*
  %v3_13ac8 = load i32, i32* %v2_13ac8, align 4
  store i32 %v3_13ac8, i32* @r4, align 4
  br i1 %v2_13ac4, label %dec_label_pc_13ae0, label %dec_label_pc_13ad0

dec_label_pc_13ad0:                               ; preds = %dec_label_pc_13aa8
  store i32 %v3_13ac8, i32* @r0, align 4
  %v0_13ad4 = load i32, i32* @sl, align 4
  %v2_13ad8 = inttoptr i32 %v3_13ac8 to i8*
  %v3_13ad8 = call i32 @function_14f44(i8* %v2_13ad8, i32 %v0_13ad4)
  store i32 %v3_13ad8, i32* %r0.global-to-local, align 4
  %v0_13adc = load i32, i32* @r4, align 4
  %v2_13adc = add i32 %v0_13adc, %v3_13ad8
  store i32 %v2_13adc, i32* @r4, align 4
  br label %dec_label_pc_13ae0

dec_label_pc_13ae0:                               ; preds = %dec_label_pc_13aa8, %dec_label_pc_13ad0
  %v0_13bb813 = phi i32 [ %v3_13ac8, %dec_label_pc_13aa8 ], [ %v2_13adc, %dec_label_pc_13ad0 ]
  %v1_13ae0 = inttoptr i32 %v0_13bb813 to i8*
  %v2_13ae0 = load i8, i8* %v1_13ae0, align 1
  %v3_13ae0 = zext i8 %v2_13ae0 to i32
  store i32 %v3_13ae0, i32* %r2.global-to-local, align 4
  %v2_13ae4 = icmp eq i8 %v2_13ae0, 0
  store i1 %v2_13ae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13ae4, label %dec_label_pc_13938.backedge, label %dec_label_pc_13aec

dec_label_pc_13938.backedge:                      ; preds = %dec_label_pc_13ae0, %dec_label_pc_13be0, %dec_label_pc_13aec
  %v0_13938.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13938

dec_label_pc_13aec:                               ; preds = %dec_label_pc_13ae0
  %v0_13aec = load i32, i32* @r7, align 4
  %v1_13aec = inttoptr i32 %v0_13aec to i8*
  %v2_13aec = load i8, i8* %v1_13aec, align 1
  %v3_13aec = zext i8 %v2_13aec to i32
  store i32 %v3_13aec, i32* %r3.global-to-local, align 4
  %v9_13af0 = icmp eq i8 %v2_13aec, %v2_13ae0
  store i1 %v9_13af0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13af0, label %dec_label_pc_13938.backedge, label %dec_label_pc_13bb8.preheader

dec_label_pc_13bb8.preheader:                     ; preds = %dec_label_pc_13aec
  %v1_13af4 = load i32, i32* @fp, align 4
  store i32 %v1_13af4, i32* @r6, align 4
  %v2_13bb815 = load i8, i8* %v1_13ae0, align 1
  %v3_13bb816 = zext i8 %v2_13bb815 to i32
  store i32 %v3_13bb816, i32* %r2.global-to-local, align 4
  %v2_13bbc17 = icmp eq i8 %v2_13bb815, 0
  store i1 %v2_13bbc17, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13bbc17, label %dec_label_pc_13bd4, label %dec_label_pc_13bc4.preheader

dec_label_pc_13bc4.preheader:                     ; preds = %dec_label_pc_13bb8.preheader
  %v2_13bc482 = load i8, i8* %v1_13aec, align 1
  %v3_13bc483 = zext i8 %v2_13bc482 to i32
  store i32 %v3_13bc483, i32* %r3.global-to-local, align 4
  %v9_13bc886 = icmp eq i8 %v2_13bc482, %v2_13bb815
  store i1 %v9_13bc886, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13bc886, label %dec_label_pc_13bd4, label %bb74

dec_label_pc_13b00:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_13b04 = load i32, i32* %v2_13ab4, align 4
  store i32 %v2_13b04, i32* %r3.global-to-local, align 4
  store i32 %v1_13914, i32* %r2.global-to-local, align 4
  %v9_13b0c = icmp eq i32 %v2_13b1088, %v1_13914
  store i1 %v9_13b0c, i1* %cpsr_z.global-to-local, align 1
  %v5_13b10 = mul i32 %v2_13b1088, 4
  %v6_13b10 = add i32 %v2_13b04, %v5_13b10
  %v7_13b10 = inttoptr i32 %v6_13b10 to i32*
  store i32 %v0_13b1087, i32* %v7_13b10, align 4
  br i1 %v9_13b0c, label %dec_label_pc_13b18, label %dec_label_pc_13b24

dec_label_pc_13b18:                               ; preds = %dec_label_pc_13b00
  store i32 %v1_13920, i32* %r3.global-to-local, align 4
  store i1 %v2_13b1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13b1c, label %dec_label_pc_13b24, label %dec_label_pc_13b44

dec_label_pc_13b24:                               ; preds = %dec_label_pc_13b18, %dec_label_pc_13b00
  %v0_13b24 = load i32, i32* @r7, align 4
  %v1_13b24 = inttoptr i32 %v0_13b24 to i8*
  %v2_13b24 = load i8, i8* %v1_13b24, align 1
  %v3_13b24 = zext i8 %v2_13b24 to i32
  store i32 %v3_13b24, i32* %r3.global-to-local, align 4
  %v2_13b28 = icmp eq i8 %v2_13b24, 0
  store i1 %v2_13b28, i1* %cpsr_z.global-to-local, align 1
  %v0_13b2c = load i32, i32* @r4, align 4
  store i32 %v0_13b2c, i32* @r0, align 4
  %v1_13b30 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_13b28, i32 %v1_13b30, i32 %v0_13b24
  store i32 %storemerge, i32* @r1, align 4
  %v0_13b38 = call i32 @function_14f00()
  store i32 %v0_13b38, i32* %r0.global-to-local, align 4
  %v0_13b3c = load i32, i32* @r4, align 4
  %v2_13b3c = add i32 %v0_13b3c, %v0_13b38
  store i32 %v2_13b3c, i32* @r4, align 4
  br label %dec_label_pc_13b7c

dec_label_pc_13b44:                               ; preds = %dec_label_pc_13b18
  %v0_13b44 = load i32, i32* @r4, align 4
  store i32 %v0_13b44, i32* @r0, align 4
  %v0_13b48 = load i32, i32* @r7, align 4
  %v1_13b48 = inttoptr i32 %v0_13b48 to i8*
  %v2_13b48 = load i8, i8* %v1_13b48, align 1
  %v3_13b48 = zext i8 %v2_13b48 to i32
  %v5_13b4c = call i32 @function_14fe0(i32 %v0_13b44, i32 %v3_13b48, i32 %v1_13914, i32 %v1_13920)
  store i32 %v5_13b4c, i32* %r0.global-to-local, align 4
  store i32 %v1_13910, i32* %r2.global-to-local, align 4
  store i1 %v2_13ac4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_13b4c, i32* @r4, align 4
  br i1 %v2_13ac4, label %dec_label_pc_13b7c, label %dec_label_pc_13b68

dec_label_pc_13b64:                               ; preds = %dec_label_pc_13b68
  %v1_13b64 = add i32 %v0_13b7c.pre, -1
  store i32 %v1_13b64, i32* @r4, align 4
  br label %dec_label_pc_13b68

dec_label_pc_13b68:                               ; preds = %dec_label_pc_13b44, %dec_label_pc_13b64
  %v0_13b68 = phi i32 [ %v1_13b64, %dec_label_pc_13b64 ], [ %v5_13b4c, %dec_label_pc_13b44 ]
  %v1_13b68 = add i32 %v0_13b68, -1
  %v2_13b68 = inttoptr i32 %v1_13b68 to i8*
  %v3_13b68 = load i8, i8* %v2_13b68, align 1
  %v4_13b68 = zext i8 %v3_13b68 to i32
  %v0_13b6c = load i32, i32* @sl, align 4
  store i32 %v0_13b6c, i32* @r0, align 4
  %v2_13b70 = call i32 @function_150cc(i32 %v0_13b6c, i32 %v4_13b68)
  store i32 %v2_13b70, i32* %r0.global-to-local, align 4
  %v2_13b74 = icmp eq i32 %v2_13b70, 0
  store i1 %v2_13b74, i1* %cpsr_z.global-to-local, align 1
  %v0_13b7c.pre = load i32, i32* @r4, align 4
  br i1 %v2_13b74, label %dec_label_pc_13b7c, label %dec_label_pc_13b64

dec_label_pc_13b7c:                               ; preds = %dec_label_pc_13b68, %dec_label_pc_13b44, %dec_label_pc_13b24
  %v3_13b88 = phi i32 [ %v5_13b4c, %dec_label_pc_13b44 ], [ %v2_13b3c, %dec_label_pc_13b24 ], [ %v0_13b7c.pre, %dec_label_pc_13b68 ]
  %v1_13b7c = inttoptr i32 %v3_13b88 to i8*
  %v2_13b7c = load i8, i8* %v1_13b7c, align 1
  %v3_13b7c = zext i8 %v2_13b7c to i32
  store i32 %v3_13b7c, i32* %r2.global-to-local, align 4
  %v0_13b80 = load i32, i32* @r7, align 4
  %v1_13b80 = inttoptr i32 %v0_13b80 to i8*
  %v2_13b80 = load i8, i8* %v1_13b80, align 1
  %v3_13b80 = zext i8 %v2_13b80 to i32
  store i32 %v3_13b80, i32* %r3.global-to-local, align 4
  %v9_13b84 = icmp eq i8 %v2_13b80, %v2_13b7c
  store i1 %v9_13b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13b84, label %bb71, label %dec_label_pc_13b90

bb71:                                             ; preds = %dec_label_pc_13b7c
  %v1_13b88 = load i32, i32* @fp, align 4
  %v2_13b88 = trunc i32 %v1_13b88 to i8
  store i8 %v2_13b88, i8* %v1_13b7c, align 1
  %v0_13b8c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13b8c.pr, label %bb73, label %.dec_label_pc_13b90_crit_edge

.dec_label_pc_13b90_crit_edge:                    ; preds = %bb71
  %v0_13b90.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13b90

dec_label_pc_13b90:                               ; preds = %.dec_label_pc_13b90_crit_edge, %dec_label_pc_13b7c
  %v0_13b90 = phi i32 [ %v0_13b90.pre, %.dec_label_pc_13b90_crit_edge ], [ %v3_13b7c, %dec_label_pc_13b7c ]
  %v2_13b90 = icmp eq i32 %v0_13b90, 0
  store i1 %v2_13b90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13b90, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_13b90
  %v1_13b94 = load i32, i32* @fp, align 4
  %v2_13b94 = trunc i32 %v1_13b94 to i8
  %v3_13b94 = load i32, i32* @r4, align 4
  %v4_13b94 = inttoptr i32 %v3_13b94 to i8*
  store i8 %v2_13b94, i8* %v4_13b94, align 1
  %v5_13b94 = load i32, i32* @r4, align 4
  %v6_13b94 = add i32 %v5_13b94, 1
  store i32 %v6_13b94, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_13b90, %bb72
  %v2_13b98 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_13b98, i32* %r3.global-to-local, align 4
  %v2_13b9c = icmp eq i32 %v2_13b98, 0
  store i1 %v2_13b9c, i1* %cpsr_z.global-to-local, align 1
  %v0_13bb8.pre = load i32, i32* @r4, align 4
  br i1 %v2_13b9c, label %dec_label_pc_13bb4, label %dec_label_pc_13ba4

dec_label_pc_13ba4:                               ; preds = %bb73
  store i32 %v0_13bb8.pre, i32* @r0, align 4
  %v0_13ba8 = load i32, i32* @sl, align 4
  %v2_13bac = inttoptr i32 %v0_13bb8.pre to i8*
  %v3_13bac = call i32 @function_14f44(i8* %v2_13bac, i32 %v0_13ba8)
  store i32 %v3_13bac, i32* %r0.global-to-local, align 4
  %v0_13bb0 = load i32, i32* @r4, align 4
  %v2_13bb0 = add i32 %v0_13bb0, %v3_13bac
  store i32 %v2_13bb0, i32* @r4, align 4
  br label %dec_label_pc_13bb4

dec_label_pc_13bb4:                               ; preds = %bb73, %dec_label_pc_13ba4
  %v0_13bb8 = phi i32 [ %v2_13bb0, %dec_label_pc_13ba4 ], [ %v0_13bb8.pre, %bb73 ]
  %v0_13bb4 = load i32, i32* @r6, align 4
  %v1_13bb4 = add i32 %v0_13bb4, 1
  store i32 %v1_13bb4, i32* @r6, align 4
  %v1_13bb8 = inttoptr i32 %v0_13bb8 to i8*
  %v2_13bb8 = load i8, i8* %v1_13bb8, align 1
  %v3_13bb8 = zext i8 %v2_13bb8 to i32
  store i32 %v3_13bb8, i32* %r2.global-to-local, align 4
  %v2_13bbc = icmp eq i8 %v2_13bb8, 0
  store i1 %v2_13bbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13bbc, label %dec_label_pc_13bd4, label %dec_label_pc_13bb4.dec_label_pc_13bc4_crit_edge

dec_label_pc_13bb4.dec_label_pc_13bc4_crit_edge:  ; preds = %dec_label_pc_13bb4
  %v0_13bc4.pre = load i32, i32* @r7, align 4
  %v1_13bc4 = inttoptr i32 %v0_13bc4.pre to i8*
  %v2_13bc4 = load i8, i8* %v1_13bc4, align 1
  %v3_13bc4 = zext i8 %v2_13bc4 to i32
  store i32 %v3_13bc4, i32* %r3.global-to-local, align 4
  %v9_13bc8 = icmp eq i8 %v2_13bc4, %v2_13bb8
  store i1 %v9_13bc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13bc8, label %dec_label_pc_13bd4, label %bb74

bb74:                                             ; preds = %dec_label_pc_13bc4.preheader, %dec_label_pc_13bb4.dec_label_pc_13bc4_crit_edge
  %v2_13b1088 = phi i32 [ %v1_13bb4, %dec_label_pc_13bb4.dec_label_pc_13bc4_crit_edge ], [ %v1_13af4, %dec_label_pc_13bc4.preheader ]
  %v0_13b1087 = phi i32 [ %v0_13bb8, %dec_label_pc_13bb4.dec_label_pc_13bc4_crit_edge ], [ %v0_13bb813, %dec_label_pc_13bc4.preheader ]
  %v2_13bcc = load i32, i32* @sb, align 4
  %v3_13bcc = sub i32 %v2_13b1088, %v2_13bcc
  %v5_13bcc = xor i32 %v2_13bcc, %v2_13b1088
  %v6_13bcc = xor i32 %v3_13bcc, %v2_13b1088
  %v7_13bcc = and i32 %v6_13bcc, %v5_13bcc
  %v8_13bcc = icmp slt i32 %v7_13bcc, 0
  %v9_13bcc = icmp slt i32 %v3_13bcc, 0
  %v10_13bcc = icmp eq i32 %v2_13b1088, %v2_13bcc
  store i1 %v10_13bcc, i1* %cpsr_z.global-to-local, align 1
  %v2_13bd0 = xor i1 %v9_13bcc, %v8_13bcc
  br i1 %v2_13bd0, label %dec_label_pc_13b00, label %dec_label_pc_13bd4

dec_label_pc_13bd4:                               ; preds = %dec_label_pc_13bc4.preheader, %bb74, %dec_label_pc_13bb4, %dec_label_pc_13bb4.dec_label_pc_13bc4_crit_edge, %dec_label_pc_13bb8.preheader
  %v0_13bd8 = phi i32 [ %v1_13af4, %dec_label_pc_13bb8.preheader ], [ %v1_13af4, %dec_label_pc_13bc4.preheader ], [ %v2_13b1088, %bb74 ], [ %v1_13bb4, %dec_label_pc_13bb4 ], [ %v1_13bb4, %dec_label_pc_13bb4.dec_label_pc_13bc4_crit_edge ]
  store i32 %v3_138f8, i32* %r2.global-to-local, align 4
  %v9_13bd8 = icmp eq i32 %v0_13bd8, %v3_138f8
  store i1 %v9_13bd8, i1* %cpsr_z.global-to-local, align 1
  %v6_13bdc = icmp slt i32 %v0_13bd8, %v3_138f8
  br i1 %v6_13bdc, label %dec_label_pc_13be0, label %dec_label_pc_13bec

dec_label_pc_13be0:                               ; preds = %dec_label_pc_13bd4
  %v0_13be0 = load i32, i32* @r8, align 4
  %v1_13be0 = and i32 %v0_13be0, 1048576
  %v2_13be0 = icmp eq i32 %v1_13be0, 0
  store i1 %v2_13be0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13be0, label %dec_label_pc_13938.backedge, label %dec_label_pc_13be8

dec_label_pc_13be8:                               ; preds = %dec_label_pc_13be0, %dec_label_pc_13aa0, %.thread, %dec_label_pc_138d4
  br label %dec_label_pc_13bec

dec_label_pc_13bec:                               ; preds = %dec_label_pc_13bd4, %dec_label_pc_139bc, %dec_label_pc_13be8
  %v0_13bec = phi i32 [ %v0_139cc, %dec_label_pc_139bc ], [ 0, %dec_label_pc_13be8 ], [ %v0_13bd8, %dec_label_pc_13bd4 ]
  store i32 %v0_13bec, i32* %r0.global-to-local, align 4
  store i32 %v3_138d4, i32* @r4, align 4
  store i32 %v6_138d4, i32* @r5, align 4
  store i32 %v9_138d4, i32* @r6, align 4
  store i32 %v12_138d4, i32* @r7, align 4
  store i32 %v15_138d4, i32* @r8, align 4
  store i32 %v18_138d4, i32* @sb, align 4
  store i32 %v21_138d4, i32* @sl, align 4
  store i32 %v24_138d4, i32* @fp, align 4
  ret i32 %v0_13bec

; uselistorder directives
  uselistorder i32 %v0_13bec, { 1, 0 }
  uselistorder i32 %v0_13bd8, { 0, 2, 1 }
  uselistorder i32 %v3_13bcc, { 1, 0 }
  uselistorder i32 %v2_13bcc, { 1, 0, 2 }
  uselistorder i32 %v2_13b1088, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_13bc8, { 1, 0 }
  uselistorder i32 %v0_13bb8.pre, { 0, 2, 1 }
  uselistorder i32 %v5_13b4c, { 1, 0, 2, 3 }
  uselistorder i1 %v9_13bc886, { 1, 0 }
  uselistorder i1 %v9_13af0, { 1, 0 }
  uselistorder i32 %v3_13ac8, { 0, 2, 1, 3 }
  uselistorder i1 %v7_13aa0, { 1, 0 }
  uselistorder i1 %v8_13a98, { 1, 0 }
  uselistorder i32 %v3_13a68, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_13a58, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_13a40, { 1, 0, 2 }
  uselistorder i32 %v1_13a30, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13a1c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_13a14, { 1, 0 }
  uselistorder i32 %v1_13a00, { 1, 0 }
  uselistorder i32 %v1_139fc, { 1, 0 }
  uselistorder i32 %v1_139bc, { 2, 0, 1 }
  uselistorder i32 %v0_139a4, { 1, 0 }
  uselistorder i32 %v1_13994, { 0, 2, 1 }
  uselistorder i1 %v2_13ac4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13920, { 2, 0, 1, 3 }
  uselistorder i32 %v1_13914, { 2, 1, 0 }
  uselistorder i32 %v3_138fc, { 1, 0 }
  uselistorder i32 %v3_138f8, { 2, 1, 0 }
  uselistorder i32 %v1_138f0, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 33, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i32*, i32, i32, i32)* @function_11acc, { 0, 2, 1, 5, 6, 7, 8, 9, 10, 11, 3, 4 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 (i32)* @function_14e80, { 1, 0 }
  uselistorder i32* @sl, { 5, 6, 7, 8, 9, 10, 11, 41, 0, 42, 43, 12, 13, 118, 119, 120, 121, 122, 123, 126, 127, 128, 1, 129, 130, 131, 132, 133, 134, 136, 2, 135, 138, 137, 139, 140, 141, 142, 14, 15, 16, 17, 18, 19, 27, 28, 23, 24, 25, 26, 20, 21, 22, 29, 30, 31, 32, 33, 34, 37, 35, 36, 3, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 113, 114, 116, 117, 143, 146, 144, 145, 147, 148, 125, 124, 4 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_13bec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13bd4, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_13bb4, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13b68, { 1, 0 }
  uselistorder label %dec_label_pc_13938.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13ae0, { 1, 0 }
  uselistorder label %dec_label_pc_13aa0, { 1, 0 }
  uselistorder label %dec_label_pc_13a94, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13a58, { 1, 0 }
  uselistorder label %dec_label_pc_1398c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_13bfc(i32* %arg1) local_unnamed_addr {
dec_label_pc_13bfc:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_13c00 = icmp eq i32* %arg1, null
  br i1 %v2_13c00, label %dec_label_pc_13c28, label %dec_label_pc_13c08

dec_label_pc_13c08:                               ; preds = %dec_label_pc_13bfc
  %v2_13c08 = load i32, i32* %arg1, align 4
  %v1_13c0c = inttoptr i32 %v2_13c08 to i16*
  %v2_13c0c = call i32 @function_13c78(i16* %v1_13c0c)
  %v0_13c10 = load i32, i32* @r4, align 4
  %v1_13c10 = add i32 %v0_13c10, 20
  %v2_13c10 = inttoptr i32 %v1_13c10 to i32*
  %v3_13c10 = load i32, i32* %v2_13c10, align 4
  %v2_13c14 = icmp eq i32 %v3_13c10, 0
  br i1 %v2_13c14, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_13c08
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_13c08, %bb
  store i32 80928, i32* @lr, align 4
  %v1_13c1c = xor i1 %v2_13c14, true
  call void @__pseudo_cond_branch(i1 %v1_13c1c, i32 ptrtoint (i32* @global_var_120e4.16 to i32))
  %v0_13c20 = load i32, i32* @r4, align 4
  store i32 %v0_13c20, i32* @r0, align 4
  %v0_13c24 = call i32 @function_120e4()
  br label %dec_label_pc_13c28

dec_label_pc_13c28:                               ; preds = %dec_label_pc_13bfc, %bb6
  %v1_13c2c = phi i32 [ 0, %dec_label_pc_13bfc ], [ %v0_13c24, %bb6 ]
  ret i32 %v1_13c2c

; uselistorder directives
  uselistorder i32* null, { 0, 4, 5, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 2, 17, 18, 19, 20, 21, 7, 22, 23, 24, 25, 26, 3, 27, 28, 29 }
  uselistorder label %dec_label_pc_13c28, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_13c30(i32 %arg1) local_unnamed_addr {
dec_label_pc_13c30:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c3c = load i32, i32* @r4, align 4
  store i32 %v3_13c3c, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_159d0.542 to i32), i32* @r1, align 4
  %v0_13c44 = call i32 @function_13e2c()
  store i32 %v0_13c44, i32* %r0.global-to-local, align 4
  store i32 %v0_13c44, i32* @r4, align 4
  %v2_13c48 = icmp eq i32 %v0_13c44, 0
  br i1 %v2_13c48, label %bb, label %dec_label_pc_13c54

bb:                                               ; preds = %dec_label_pc_13c30
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_13c54:                               ; preds = %dec_label_pc_13c30
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_13c5c = call i32 @function_11998(i32 1, i32 24)
  store i32 %v2_13c5c, i32* %r0.global-to-local, align 4
  %v2_13c60 = icmp eq i32 %v2_13c5c, 0
  br i1 %v2_13c60, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_13c54
  %v1_13c64 = load i32, i32* @r4, align 4
  %v3_13c64 = inttoptr i32 %v2_13c5c to i32*
  store i32 %v1_13c64, i32* %v3_13c64, align 4
  %v1_13c6c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_13c54, %bb4
  %v1_13c6c = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_13c54 ], [ %v1_13c6c.pre, %bb4 ]
  %v2_13c68 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c68, i32* @r4, align 4
  ret i32 %v1_13c6c

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_11998, { 35, 32, 33, 34, 31, 14, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 1, 0, 7, 6, 5, 4, 3, 2, 13, 12, 11, 10, 9, 8 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_13c78(i16* %arg1) local_unnamed_addr {
dec_label_pc_13c78:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13c78 = load i32, i32* @r4, align 4
  store i32 %v3_13c78, i32* %stack_var_-36, align 4
  %v6_13c78 = load i32, i32* @r5, align 4
  %v9_13c78 = load i32, i32* @r6, align 4
  %v12_13c78 = load i32, i32* @r7, align 4
  %v2_13c7c = add i32 %tmp, 52
  %v3_13c7c = inttoptr i32 %v2_13c7c to i32*
  %v4_13c7c = load i32, i32* %v3_13c7c, align 4
  %v1_13c84 = sub i32 1, %v4_13c7c
  %v2_13c84 = icmp ult i32 %v4_13c7c, 2
  br i1 %v2_13c84, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_13c78
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_13c78, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_13c84, %dec_label_pc_13c78 ]
  %v0_13c8c = phi i32 [ 0, %bb ], [ %v1_13c84, %dec_label_pc_13c78 ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_13c8c = icmp eq i32 %v0_13c8c, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_a370.544 to i32), i32 81056), i32* @r6, align 4
  br i1 %v2_13c8c, label %dec_label_pc_13cd8, label %dec_label_pc_13ca0

dec_label_pc_13ca0:                               ; preds = %bb18
  %v4_13cb8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_a370.544 to i32), i32 81128) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_13cb8)
  %v0_13ccc = load i32, i32* @r6, align 4
  %v2_13ccc = add i32 %v0_13ccc, 16
  %v3_13ccc = inttoptr i32 %v2_13ccc to i32*
  %v4_13ccc = load i32, i32* %v3_13ccc, align 4
  call void @__pseudo_branch(i32 %v4_13ccc)
  %v0_13cd8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13cd8

dec_label_pc_13cd8:                               ; preds = %bb18, %dec_label_pc_13ca0
  %v1_13ce0 = phi i32 [ %tmp, %bb18 ], [ %v0_13cd8.pre, %dec_label_pc_13ca0 ]
  %v1_13cd8 = inttoptr i32 %v1_13ce0 to i16*
  %v2_13cd8 = load i16, i16* %v1_13cd8, align 2
  %v3_13cd8 = zext i16 %v2_13cd8 to i32
  %v1_13cdc = and i32 %v3_13cd8, 64
  %v2_13cdc = icmp eq i32 %v1_13cdc, 0
  br i1 %v2_13cdc, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_13cd8
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_13cd8, %bb19
  %storemerge26 = phi i32 [ %v1_13ce0, %bb19 ], [ %v1_13cdc, %dec_label_pc_13cd8 ]
  %v1_13ce4 = xor i1 %v2_13cdc, true
  call void @__pseudo_cond_branch(i1 %v1_13ce4, i32 ptrtoint (i32* @global_var_14614.548 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_13cec = load i32, i32* @r5, align 4
  %v1_13cec = add i32 %v0_13cec, 4
  %v2_13cec = inttoptr i32 %v1_13cec to i32*
  %v3_13cec = load i32, i32* %v2_13cec, align 4
  %v1_13cf0 = call i32 @function_10644(i32 %v3_13cec)
  %v0_13cf8 = load i32, i32* @r6, align 4
  %v2_13d04 = add i32 %v0_13cf8, 108
  %v3_13d04 = inttoptr i32 %v2_13d04 to i32*
  %v4_13d04 = load i32, i32* %v3_13d04, align 4
  store i32 %v4_13d04, i32* @r7, align 4
  %v1_13d0c = load i32, i32* @r5, align 4
  %v2_13d0c = add i32 %v1_13d0c, 4
  %v3_13d0c = inttoptr i32 %v2_13d0c to i32*
  store i32 -1, i32* %v3_13d0c, align 4
  %v0_13d14 = load i32, i32* @r6, align 4
  %v2_13d14 = add i32 %v0_13d14, 72
  %v3_13d14 = inttoptr i32 %v2_13d14 to i32*
  %v4_13d14 = load i32, i32* %v3_13d14, align 4
  %v1_13d1c = icmp slt i32 %v1_13cf0, 0
  store i32 %v4_13d14, i32* %stack_var_-80, align 4
  br i1 %v1_13d1c, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_13d14)
  %v0_13d44 = load i32, i32* @r6, align 4
  %v2_13d44 = add i32 %v0_13d44, 16
  %v3_13d44 = inttoptr i32 %v2_13d44 to i32*
  %v4_13d44 = load i32, i32* %v3_13d44, align 4
  call void @__pseudo_branch(i32 %v4_13d44)
  %v0_13d54 = load i32, i32* @r6, align 4
  %v2_13d54 = add i32 %v0_13d54, 12
  %v3_13d54 = inttoptr i32 %v2_13d54 to i32*
  %v4_13d54 = load i32, i32* %v3_13d54, align 4
  %v1_13d58 = inttoptr i32 %v4_13d54 to i32*
  %v2_13d58 = load i32, i32* %v1_13d58, align 4
  %v1_13d60 = add i32 %v2_13d58, 1
  %v2_13d64 = add i32 %v0_13d54, 24
  %v3_13d64 = inttoptr i32 %v2_13d64 to i32*
  %v4_13d64 = load i32, i32* %v3_13d64, align 4
  store i32 %v4_13d64, i32* @r4, align 4
  store i32 %v1_13d60, i32* %v1_13d58, align 4
  call void @__pseudo_branch(i32 %v4_13d64)
  %v0_13d7c = load i32, i32* @r5, align 4
  %v1_13d7c = inttoptr i32 %v0_13d7c to i16*
  %v2_13d7c = load i16, i16* %v1_13d7c, align 2
  %v1_13d80 = and i16 %v2_13d7c, 24576
  %v1_13d84 = or i16 %v1_13d80, 48
  %v0_13d88 = load i32, i32* %sb.global-to-local, align 4
  %v2_13d88 = icmp eq i32 %v0_13d88, 0
  store i16 %v1_13d84, i16* %v1_13d7c, align 2
  br i1 %v2_13d88, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_13d9c = xor i1 %v2_13d88, true
  call void @__pseudo_cond_branch(i1 %v2_13d9c, i32 %v4_13d64)
  %v0_13da0 = load i32, i32* @r5, align 4
  %v1_13da0 = inttoptr i32 %v0_13da0 to i16*
  %v2_13da0 = load i16, i16* %v1_13da0, align 2
  %v1_13da4 = and i16 %v2_13da0, 16384
  %v2_13da4 = icmp eq i16 %v1_13da4, 0
  br i1 %v2_13da4, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_13dac = xor i1 %v2_13da4, true
  call void @__pseudo_cond_branch(i1 %v1_13dac, i32 ptrtoint (i32* @global_var_120e4.16 to i32))
  %v2_13db8 = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_13db8)
  call void @__pseudo_branch(i32 %v4_13d44)
  %v0_13dd8 = load i32, i32* @r6, align 4
  %v2_13dd8 = add i32 %v0_13dd8, 48
  %v3_13dd8 = inttoptr i32 %v2_13dd8 to i32*
  %v4_13dd8 = load i32, i32* %v3_13dd8, align 4
  %v1_13ddc = inttoptr i32 %v4_13dd8 to i32*
  %v2_13ddc = load i32, i32* %v1_13ddc, align 4
  %v1_13de0 = add i32 %v2_13ddc, 1
  store i32 %v1_13de0, i32* %v1_13ddc, align 4
  call void @__pseudo_branch(i32 %v4_13d64)
  %v0_13df8 = call i32 @function_1448c()
  %v0_13dfc = load i32, i32* %sl.global-to-local, align 4
  %v2_13e04 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13e04, i32* @r4, align 4
  store i32 %v6_13c78, i32* @r5, align 4
  store i32 %v9_13c78, i32* @r6, align 4
  store i32 %v12_13c78, i32* @r7, align 4
  ret i32 %v0_13dfc

; uselistorder directives
  uselistorder i1 %v2_13da4, { 1, 0 }
  uselistorder i32 %v4_13d64, { 0, 2, 1, 3 }
  uselistorder i32 %v4_13c7c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_10644, { 29, 23, 28, 27, 22, 26, 25, 21, 20, 19, 24, 18, 17, 16, 15, 14, 1, 13, 12, 11, 10, 9, 2, 8, 7, 6, 5, 4, 3, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_13cd8, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_13e10(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e10:
  %v0_13e10 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13e10, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_13e10
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_13e10, %bb
  %v10_13e28 = phi i32 [ %arg1, %dec_label_pc_13e10 ], [ 0, %bb ]
  ret i32 %v10_13e28

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_13e2c() local_unnamed_addr {
dec_label_pc_13e2c:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_13e3c = call i32 @function_13e4c()
  ret i32 %v0_13e3c
}

define i32 @function_13e4c() local_unnamed_addr {
dec_label_pc_13e4c:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13e4c = load i32, i32* @r4, align 4
  store i32 %v3_13e4c, i32* %stack_var_-36, align 4
  %v6_13e4c = load i32, i32* @r5, align 4
  %v9_13e4c = load i32, i32* @r6, align 4
  %v18_13e4c = load i32, i32* @sb, align 4
  %v24_13e4c = load i32, i32* @fp, align 4
  %v0_13e50 = load i32, i32* @r1, align 4
  %v1_13e50 = inttoptr i32 %v0_13e50 to i8*
  %v2_13e50 = load i8, i8* %v1_13e50, align 1
  %v3_13e50 = zext i8 %v2_13e50 to i32
  store i32 %v3_13e50, i32* @ip, align 4
  %v7_13e58 = icmp eq i8 %v2_13e50, 114
  store i32 122896, i32* @fp, align 4
  %v2_13e60 = ptrtoint i32* %stack_var_-72 to i32
  %v0_13e64 = load i32, i32* @r0, align 4
  store i32 %v0_13e64, i32* @r6, align 4
  %v0_13e68 = load i32, i32* @r2, align 4
  store i32 %v0_13e68, i32* @sb, align 4
  %v0_13e6c = load i32, i32* @r3, align 4
  store i32 %v0_13e6c, i32* @r5, align 4
  br i1 %v7_13e58, label %dec_label_pc_13eb8, label %dec_label_pc_13e74

dec_label_pc_13e74:                               ; preds = %dec_label_pc_13e4c
  %v7_13e74 = icmp eq i8 %v2_13e50, 119
  br i1 %v7_13e74, label %bb, label %dec_label_pc_13e80

bb:                                               ; preds = %dec_label_pc_13e74
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_13ebc

dec_label_pc_13e80:                               ; preds = %dec_label_pc_13e74
  %v7_13e80 = icmp eq i8 %v2_13e50, 97
  br i1 %v7_13e80, label %bb32, label %dec_label_pc_13e8c

bb32:                                             ; preds = %dec_label_pc_13e80
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_13ebc

dec_label_pc_13e8c:                               ; preds = %dec_label_pc_13e80, %dec_label_pc_13f40, %dec_label_pc_13f14
  %v0_13e8c = call i32 @function_10a6c()
  store i32 %v0_13e8c, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_13e94 = load i32, i32* @sb, align 4
  %v2_13e94 = icmp eq i32 %v0_13e94, 0
  %v2_13e98 = inttoptr i32 %v0_13e8c to i32*
  store i32 22, i32* %v2_13e98, align 4
  br i1 %v2_13e94, label %dec_label_pc_1410c, label %dec_label_pc_13ea0

dec_label_pc_13ea0:                               ; preds = %dec_label_pc_13f64._crit_edge, %dec_label_pc_13e8c
  %v0_13ea0 = load i32, i32* @sb, align 4
  %v1_13ea0 = inttoptr i32 %v0_13ea0 to i16*
  %v2_13ea0 = load i16, i16* %v1_13ea0, align 2
  %v3_13ea0 = zext i16 %v2_13ea0 to i32
  store i32 %v3_13ea0, i32* %r3.global-to-local, align 4
  %v1_13ea4 = and i32 %v3_13ea0, 8192
  %v2_13ea4 = icmp eq i32 %v1_13ea4, 0
  br i1 %v2_13ea4, label %dec_label_pc_1410c, label %dec_label_pc_13eac

dec_label_pc_13eac:                               ; preds = %dec_label_pc_13ea0
  store i32 %v0_13ea0, i32* @r0, align 4
  %v0_13eb0 = call i32 @function_120e4()
  store i32 %v0_13eb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1410c

dec_label_pc_13eb8:                               ; preds = %dec_label_pc_13e4c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13ebc

dec_label_pc_13ebc:                               ; preds = %bb, %bb32, %dec_label_pc_13eb8
  %v1_13ed4 = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_13eb8 ]
  %v1_13ebc = add i32 %v0_13e50, 1
  %v2_13ebc = inttoptr i32 %v1_13ebc to i8*
  %v3_13ebc = load i8, i8* %v2_13ebc, align 1
  %v7_13ec0 = icmp eq i8 %v3_13ebc, 98
  %v1_13ebc.v0_13e50 = select i1 %v7_13ec0, i32 %v1_13ebc, i32 %v0_13e50
  store i32 %v1_13ebc.v0_13e50, i32* %r3.global-to-local, align 4
  %v1_13ecc = add i32 %v1_13ebc.v0_13e50, 1
  %v2_13ecc = inttoptr i32 %v1_13ecc to i8*
  %v3_13ecc = load i8, i8* %v2_13ecc, align 1
  %v4_13ecc = zext i8 %v3_13ecc to i32
  store i32 %v4_13ecc, i32* @r3, align 4
  %v7_13ed0 = icmp eq i8 %v3_13ecc, 43
  br i1 %v7_13ed0, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_13ebc
  store i32 %v1_13ed4, i32* @r3, align 4
  %v2_13ed8 = add nuw nsw i32 %v1_13ed4, 1
  store i32 %v2_13ed8, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_13ebc, %bb35
  %v2_13edc = icmp eq i32 %v0_13e68, 0
  br i1 %v2_13edc, label %dec_label_pc_13ee4, label %dec_label_pc_13f0c

dec_label_pc_13ee4:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_13ee8 = call i32 @function_11078()
  store i32 %v0_13ee8, i32* %r0.global-to-local, align 4
  store i32 %v0_13ee8, i32* @sb, align 4
  %v3_13eec = icmp eq i32 %v0_13ee8, 0
  br i1 %v3_13eec, label %dec_label_pc_14110, label %dec_label_pc_13ef4

dec_label_pc_13ef4:                               ; preds = %dec_label_pc_13ee4
  %v2_13ef8 = add i32 %v0_13ee8, 8
  %v3_13ef8 = inttoptr i32 %v2_13ef8 to i32*
  store i32 0, i32* %v3_13ef8, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_13f00 = load i32, i32* @sb, align 4
  %v3_13f00 = inttoptr i32 %v2_13f00 to i16*
  store i16 8192, i16* %v3_13f00, align 2
  %v0_13f04 = load i32, i32* @sb, align 4
  %v1_13f04 = add i32 %v0_13f04, 56
  store i32 %v1_13f04, i32* @r0, align 4
  %v1_13f08 = call i32 @function_141bc(i32 %v1_13f04)
  store i32 %v1_13f08, i32* %r0.global-to-local, align 4
  %v0_13f0c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13f0c

dec_label_pc_13f0c:                               ; preds = %.thread3, %dec_label_pc_13ef4
  %v0_13f64 = phi i32 [ %v0_13e6c, %.thread3 ], [ %v0_13f0c.pre, %dec_label_pc_13ef4 ]
  %v1_13f0c = icmp slt i32 %v0_13f64, 0
  br i1 %v1_13f0c, label %dec_label_pc_13f64, label %dec_label_pc_13f14

dec_label_pc_13f14:                               ; preds = %dec_label_pc_13f0c
  %v0_13f18 = load i32, i32* @r4, align 4
  %v2_13f18 = and i32 %v0_13f18, ptrtoint (i32* @global_var_20003.557 to i32)
  %v1_13f1c = or i32 %v2_13f18, 1
  store i32 %v1_13f1c, i32* %r2.global-to-local, align 4
  %v0_13f20 = load i32, i32* @r6, align 4
  %v1_13f20 = add i32 %v0_13f20, 1
  %v2_13f24 = and i32 %v1_13f20, %v1_13f1c
  store i32 %v2_13f24, i32* %r3.global-to-local, align 4
  %v9_13f28 = icmp eq i32 %v2_13f24, %v1_13f1c
  %v1_13f2c = load i32, i32* @sb, align 4
  %v2_13f2c = add i32 %v1_13f2c, 4
  %v3_13f2c = inttoptr i32 %v2_13f2c to i32*
  store i32 %v0_13f64, i32* %v3_13f2c, align 4
  br i1 %v9_13f28, label %dec_label_pc_13f34, label %dec_label_pc_13e8c

dec_label_pc_13f34:                               ; preds = %dec_label_pc_13f14
  %v0_13f34 = load i32, i32* @r4, align 4
  %v1_13f34 = load i32, i32* @r6, align 4
  %v2_13f34 = sub i32 -1, %v1_13f34
  %v3_13f34 = and i32 %v0_13f34, %v2_13f34
  store i32 %v3_13f34, i32* @r3, align 4
  %v1_13f38 = and i32 %v3_13f34, 1024
  %v2_13f38 = icmp eq i32 %v1_13f38, 0
  br i1 %v2_13f38, label %dec_label_pc_13f58, label %dec_label_pc_13f40

dec_label_pc_13f40:                               ; preds = %dec_label_pc_13f34
  %v0_13f40 = load i32, i32* @r5, align 4
  store i32 %v0_13f40, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_13f4c = call i32 @function_10478(i32 %v0_13f40, i32 4)
  store i32 %v2_13f4c, i32* %r0.global-to-local, align 4
  %v2_13f50 = icmp eq i32 %v2_13f4c, 0
  br i1 %v2_13f50, label %dec_label_pc_13f40.dec_label_pc_13f58_crit_edge, label %dec_label_pc_13e8c

dec_label_pc_13f40.dec_label_pc_13f58_crit_edge:  ; preds = %dec_label_pc_13f40
  %v0_13f58.pre = load i32, i32* @r6, align 4
  %v0_13f5c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13f58

dec_label_pc_13f58:                               ; preds = %dec_label_pc_13f40.dec_label_pc_13f58_crit_edge, %dec_label_pc_13f34
  %v0_13f5c = phi i32 [ %v0_13f5c.pre, %dec_label_pc_13f40.dec_label_pc_13f58_crit_edge ], [ %v0_13f34, %dec_label_pc_13f34 ]
  %v0_13f58 = phi i32 [ %v0_13f58.pre, %dec_label_pc_13f40.dec_label_pc_13f58_crit_edge ], [ %v1_13f34, %dec_label_pc_13f34 ]
  %v1_13f58 = and i32 %v0_13f58, 131072
  store i32 %v1_13f58, i32* %r3.global-to-local, align 4
  %v2_13f5c = or i32 %v1_13f58, %v0_13f5c
  store i32 %v2_13f5c, i32* @r4, align 4
  br label %dec_label_pc_13f88

dec_label_pc_13f64:                               ; preds = %dec_label_pc_13f0c
  %v7_13f64 = icmp eq i32 %v0_13f64, -1
  %v0_13f70.pre = load i32, i32* @r4, align 4
  br i1 %v7_13f64, label %dec_label_pc_13f64._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_13f64
  %v2_13f68 = or i32 %v0_13f70.pre, ptrtoint (i32* @global_var_20000.558 to i32)
  store i32 %v2_13f68, i32* @r4, align 4
  br label %dec_label_pc_13f64._crit_edge

dec_label_pc_13f64._crit_edge:                    ; preds = %dec_label_pc_13f64, %bb36
  %v0_13f70 = phi i32 [ %v2_13f68, %bb36 ], [ %v0_13f70.pre, %dec_label_pc_13f64 ]
  %v0_13f6c = load i32, i32* @r6, align 4
  store i32 %v0_13f6c, i32* %r0.global-to-local, align 4
  store i32 %v0_13f70, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_13f78 = call i32 @function_10250(i32 %v0_13f6c, i32 %v0_13f70)
  store i32 %v2_13f78, i32* %r0.global-to-local, align 4
  %v1_13f7c = icmp slt i32 %v2_13f78, 0
  %v1_13f80 = load i32, i32* @sb, align 4
  %v2_13f80 = add i32 %v1_13f80, 4
  %v3_13f80 = inttoptr i32 %v2_13f80 to i32*
  store i32 %v2_13f78, i32* %v3_13f80, align 4
  br i1 %v1_13f7c, label %dec_label_pc_13ea0, label %.dec_label_pc_13f88_crit_edge

.dec_label_pc_13f88_crit_edge:                    ; preds = %dec_label_pc_13f64._crit_edge
  %v0_13f8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13f88

dec_label_pc_13f88:                               ; preds = %.dec_label_pc_13f88_crit_edge, %dec_label_pc_13f58
  %v0_13fa4 = phi i32 [ %v0_13f8c.pre, %.dec_label_pc_13f88_crit_edge ], [ %v2_13f5c, %dec_label_pc_13f58 ]
  %v0_13f88 = load i32, i32* @sb, align 4
  %v1_13f88 = inttoptr i32 %v0_13f88 to i16*
  %v2_13f88 = load i16, i16* %v1_13f88, align 2
  %v3_13f88 = zext i16 %v2_13f88 to i32
  %v1_13f8c = urem i32 %v0_13fa4, 4
  %v1_13f90 = and i32 %v0_13fa4, 1024
  %v1_13f94 = and i32 %v3_13f88, 8192
  %v1_13f98 = add nuw nsw i32 %v1_13f8c, 1
  %v2_13f9c = or i32 %v1_13f94, %v1_13f90
  store i32 %v2_13f9c, i32* %r3.global-to-local, align 4
  %v1_13fa0 = xor i32 %v1_13f98, 3
  store i32 %v1_13fa0, i32* %r1.global-to-local, align 4
  %v1_13fa4 = and i32 %v0_13fa4, ptrtoint (i32* @global_var_20000.558 to i32)
  store i32 %v1_13fa4, i32* %r2.global-to-local, align 4
  %v2_13fa4 = icmp eq i32 %v1_13fa4, 0
  %v1_13fa8 = add i32 %v0_13f88, 4
  %v2_13fa8 = inttoptr i32 %v1_13fa8 to i32*
  %v3_13fa8 = load i32, i32* %v2_13fa8, align 4
  store i32 %v3_13fa8, i32* @r5, align 4
  br i1 %v2_13fa4, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_13f88
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_13f88, %bb37
  %v0_13fb4 = phi i32 [ 0, %dec_label_pc_13f88 ], [ 32768, %bb37 ]
  %v4_13fb0 = mul nuw nsw i32 %v1_13fa0, 16
  %v5_13fb0 = or i32 %v2_13f9c, %v4_13fb0
  store i32 %v5_13fb0, i32* %r3.global-to-local, align 4
  %v2_13fb4 = or i32 %v0_13fb4, %v5_13fb0
  store i32 %v2_13fb4, i32* %r2.global-to-local, align 4
  %v8_13fb8 = icmp eq i32 %v3_13fa8, 2147483647
  %v1_13fbc = trunc i32 %v2_13fb4 to i16
  store i16 %v1_13fbc, i16* %v1_13f88, align 2
  br i1 %v8_13fb8, label %dec_label_pc_13fec, label %dec_label_pc_13fc4

dec_label_pc_13fc4:                               ; preds = %bb38
  %v0_13fc4 = call i32 @function_10a6c()
  store i32 %v0_13fc4, i32* @r4, align 4
  %v0_13fcc = load i32, i32* @r5, align 4
  store i32 %v0_13fcc, i32* @r0, align 4
  %v1_13fd0 = inttoptr i32 %v0_13fc4 to i32*
  %v2_13fd0 = load i32, i32* %v1_13fd0, align 4
  store i32 %v2_13fd0, i32* @r5, align 4
  %v1_13fd4 = call i32 @function_151bc(i32 %v0_13fcc)
  store i32 %v1_13fd4, i32* %r0.global-to-local, align 4
  %v2_13fd8 = icmp eq i32 %v1_13fd4, 0
  br i1 %v2_13fd8, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_13fc4
  %v1_13fdc = load i32, i32* @sb, align 4
  %v2_13fdc = inttoptr i32 %v1_13fdc to i16*
  %v3_13fdc = load i16, i16* %v2_13fdc, align 2
  %v4_13fdc = zext i16 %v3_13fdc to i32
  %v2_13fe0 = or i32 %v4_13fdc, 256
  store i32 %v2_13fe0, i32* %r3.global-to-local, align 4
  %v2_13fe4 = trunc i32 %v2_13fe0 to i16
  store i16 %v2_13fe4, i16* %v2_13fdc, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_13fc4, %bb39
  %v0_13fe8 = load i32, i32* @r5, align 4
  %v1_13fe8 = load i32, i32* @r4, align 4
  %v2_13fe8 = inttoptr i32 %v1_13fe8 to i32*
  store i32 %v0_13fe8, i32* %v2_13fe8, align 4
  br label %dec_label_pc_13fec

dec_label_pc_13fec:                               ; preds = %bb38, %.thread5
  %v0_13fec = load i32, i32* @sb, align 4
  %v1_13fec = add i32 %v0_13fec, 8
  %v2_13fec = inttoptr i32 %v1_13fec to i32*
  %v3_13fec = load i32, i32* %v2_13fec, align 4
  store i32 %v3_13fec, i32* %r3.global-to-local, align 4
  %v2_13ff0 = icmp eq i32 %v3_13fec, 0
  br i1 %v2_13ff0, label %dec_label_pc_13ff8, label %bb40

dec_label_pc_13ff8:                               ; preds = %dec_label_pc_13fec
  store i32 4096, i32* @r0, align 4
  %v0_13ffc = call i32 @function_11078()
  store i32 %v0_13ffc, i32* %r0.global-to-local, align 4
  %v2_14000 = icmp eq i32 %v0_13ffc, 0
  %v1_14010.pre = load i32, i32* @sb, align 4
  br i1 %v2_14000, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13ff8
  %v2_14004 = inttoptr i32 %v1_14010.pre to i16*
  %v3_14004 = load i16, i16* %v2_14004, align 2
  %v4_14004 = zext i16 %v3_14004 to i32
  %v2_14008 = add i32 %v0_13ffc, 4096
  store i32 %v2_14008, i32* %r2.global-to-local, align 4
  %v2_1400c = or i32 %v4_14004, 16384
  store i32 %v2_1400c, i32* %r3.global-to-local, align 4
  %v2_14010 = add i32 %v1_14010.pre, 8
  %v3_14010 = inttoptr i32 %v2_14010 to i32*
  store i32 %v0_13ffc, i32* %v3_14010, align 4
  %v1_14014 = load i32, i32* %r2.global-to-local, align 4
  %v2_14014 = load i32, i32* @sb, align 4
  %v3_14014 = add i32 %v2_14014, 12
  %v4_14014 = inttoptr i32 %v3_14014 to i32*
  store i32 %v1_14014, i32* %v4_14014, align 4
  %v1_14018 = load i32, i32* %r3.global-to-local, align 4
  %v2_14018 = trunc i32 %v1_14018 to i16
  %v3_14018 = load i32, i32* @sb, align 4
  %v4_14018 = inttoptr i32 %v3_14018 to i16*
  store i16 %v2_14018, i16* %v4_14018, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_13ff8
  %v2_1401019 = add i32 %v1_14010.pre, 8
  %v3_1401020 = inttoptr i32 %v2_1401019 to i32*
  store i32 0, i32* %v3_1401020, align 4
  %v2_1401c = load i32, i32* @sb, align 4
  %v3_1401c = add i32 %v2_1401c, 12
  %v4_1401c = inttoptr i32 %v3_1401c to i32*
  store i32 0, i32* %v4_1401c, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_13fec, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_14028 = load i32, i32* @fp, align 4
  %v2_14028 = add i32 %v0_14028, 56
  %v3_14028 = inttoptr i32 %v2_14028 to i32*
  %v4_14028 = load i32, i32* %v3_14028, align 4
  store i32 %v4_14028, i32* %r3.global-to-local, align 4
  %v2_1402c = load i32, i32* @sb, align 4
  %v3_1402c = add i32 %v2_1402c, 2
  %v4_1402c = inttoptr i32 %v3_1402c to i8*
  store i8 0, i8* %v4_1402c, align 1
  %v0_14030 = load i32, i32* @sb, align 4
  %v1_14030 = inttoptr i32 %v0_14030 to i16*
  %v2_14030 = load i16, i16* %v1_14030, align 2
  %v3_14030 = zext i16 %v2_14030 to i32
  store i32 %v3_14030, i32* %r2.global-to-local, align 4
  %v0_14034 = load i32, i32* %r3.global-to-local, align 4
  %v1_14034 = inttoptr i32 %v0_14034 to i32*
  %v2_14034 = load i32, i32* %v1_14034, align 4
  store i32 %v2_14034, i32* %r1.global-to-local, align 4
  %v1_14038 = add i32 %v0_14030, 8
  %v2_14038 = inttoptr i32 %v1_14038 to i32*
  %v3_14038 = load i32, i32* %v2_14038, align 4
  store i32 %v3_14038, i32* %r3.global-to-local, align 4
  %v1_1403c = and i32 %v3_14030, 8192
  %v2_1403c = icmp eq i32 %v1_1403c, 0
  %v2_14040 = add i32 %v0_14030, 20
  %v3_14040 = inttoptr i32 %v2_14040 to i32*
  store i32 %v3_14038, i32* %v3_14040, align 4
  %v0_14044 = load i32, i32* %r0.global-to-local, align 4
  %v1_14044 = load i32, i32* @sb, align 4
  %v2_14044 = add i32 %v1_14044, 44
  %v3_14044 = inttoptr i32 %v2_14044 to i32*
  store i32 %v0_14044, i32* %v3_14044, align 4
  %v0_14048 = load i32, i32* %r1.global-to-local, align 4
  %v1_14048 = load i32, i32* @sb, align 4
  %v2_14048 = add i32 %v1_14048, 52
  %v3_14048 = inttoptr i32 %v2_14048 to i32*
  store i32 %v0_14048, i32* %v3_14048, align 4
  %v0_1404c = load i32, i32* %r3.global-to-local, align 4
  %v1_1404c = load i32, i32* @sb, align 4
  %v2_1404c = add i32 %v1_1404c, 24
  %v3_1404c = inttoptr i32 %v2_1404c to i32*
  store i32 %v0_1404c, i32* %v3_1404c, align 4
  %v0_14050 = load i32, i32* %r3.global-to-local, align 4
  %v1_14050 = load i32, i32* @sb, align 4
  %v2_14050 = add i32 %v1_14050, 28
  %v3_14050 = inttoptr i32 %v2_14050 to i32*
  store i32 %v0_14050, i32* %v3_14050, align 4
  %v0_14054 = load i32, i32* %r3.global-to-local, align 4
  %v1_14054 = load i32, i32* @sb, align 4
  %v2_14054 = add i32 %v1_14054, 16
  %v3_14054 = inttoptr i32 %v2_14054 to i32*
  store i32 %v0_14054, i32* %v3_14054, align 4
  br i1 %v2_1403c, label %dec_label_pc_14110, label %dec_label_pc_1405c

dec_label_pc_1405c:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_14060 = load i32, i32* @fp, align 4
  %v2_14060 = add i32 %v0_14060, 36
  %v3_14060 = inttoptr i32 %v2_14060 to i32*
  %v4_14060 = load i32, i32* %v3_14060, align 4
  store i32 %v4_14060, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_14068 = add i32 %v0_14060, 108
  %v3_14068 = inttoptr i32 %v2_14068 to i32*
  %v4_14068 = load i32, i32* %v3_14068, align 4
  store i32 %v4_14068, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_14070 = ptrtoint i32* %stack_var_-56 to i32
  %v2_14074 = add i32 %v0_14060, 72
  %v3_14074 = inttoptr i32 %v2_14074 to i32*
  %v4_14074 = load i32, i32* %v3_14074, align 4
  store i32 %v4_14060, i32* %r1.global-to-local, align 4
  store i32 %v4_14068, i32* %r2.global-to-local, align 4
  store i32 %v2_14070, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14074)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14090 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14090, i32* %r0.global-to-local, align 4
  %v0_14094 = load i32, i32* @fp, align 4
  %v2_14094 = add i32 %v0_14094, 16
  %v3_14094 = inttoptr i32 %v2_14094 to i32*
  %v4_14094 = load i32, i32* %v3_14094, align 4
  call void @__pseudo_branch(i32 %v4_14094)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_140a4 = load i32, i32* @fp, align 4
  %v2_140a4 = add i32 %v0_140a4, 96
  %v3_140a4 = inttoptr i32 %v2_140a4 to i32*
  %v4_140a4 = load i32, i32* %v3_140a4, align 4
  store i32 %v4_140a4, i32* %r4.global-to-local, align 4
  %v0_140a8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_140a8, i32* %r1.global-to-local, align 4
  store i32 %v4_140a4, i32* %r2.global-to-local, align 4
  store i32 %v2_13e60, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14074)
  store i32 %v4_140a4, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14094)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_140cc = load i32, i32* @fp, align 4
  %v2_140cc = add i32 %v0_140cc, 44
  %v3_140cc = inttoptr i32 %v2_140cc to i32*
  %v4_140cc = load i32, i32* %v3_140cc, align 4
  store i32 %v4_140cc, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_140d4 = inttoptr i32 %v4_140cc to i32*
  %v2_140d4 = load i32, i32* %v1_140d4, align 4
  store i32 %v2_140d4, i32* %r2.global-to-local, align 4
  store i32 %v2_13e60, i32* %r0.global-to-local, align 4
  %v1_140dc = load i32, i32* @sb, align 4
  %v2_140dc = add i32 %v1_140dc, 32
  %v3_140dc = inttoptr i32 %v2_140dc to i32*
  store i32 %v2_140d4, i32* %v3_140dc, align 4
  %v0_140e0 = load i32, i32* @fp, align 4
  %v1_140e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_140e0 = add i32 %v1_140e0, %v0_140e0
  %v3_140e0 = inttoptr i32 %v2_140e0 to i32*
  %v4_140e0 = load i32, i32* %v3_140e0, align 4
  store i32 %v4_140e0, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_140e8 = load i32, i32* @sb, align 4
  %v1_140e8 = load i32, i32* @ip, align 4
  %v2_140e8 = inttoptr i32 %v1_140e8 to i32*
  store i32 %v0_140e8, i32* %v2_140e8, align 4
  call void @__pseudo_branch(i32 %v4_140e0)
  store i32 %v2_14070, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_140e0)
  br label %dec_label_pc_14110

dec_label_pc_1410c:                               ; preds = %dec_label_pc_13ea0, %dec_label_pc_13e8c, %dec_label_pc_13eac
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_14110

dec_label_pc_14110:                               ; preds = %bb40, %dec_label_pc_13ee4, %dec_label_pc_1405c, %dec_label_pc_1410c
  %v0_14110 = load i32, i32* @sb, align 4
  store i32 %v0_14110, i32* %r0.global-to-local, align 4
  %v2_14118 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14118, i32* %r4.global-to-local, align 4
  store i32 %v6_13e4c, i32* @r5, align 4
  store i32 %v9_13e4c, i32* @r6, align 4
  store i32 %v18_13e4c, i32* @sb, align 4
  store i32 %v24_13e4c, i32* @fp, align 4
  ret i32 %v0_14110

; uselistorder directives
  uselistorder i32 %v1_14010.pre, { 2, 1, 0 }
  uselistorder i32 %v0_13fa4, { 1, 2, 0 }
  uselistorder i32 %v0_13f70, { 1, 0 }
  uselistorder i32 %v1_13f34, { 1, 0 }
  uselistorder i32 %v0_13f34, { 1, 0 }
  uselistorder i32 %v1_13f1c, { 1, 0, 2 }
  uselistorder i32 %v1_13ed4, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 4, 3, 5, 6, 7, 8, 9, 10, 12, 11, 14, 13, 15, 16, 17, 18 }
  uselistorder i32 16384, { 46, 0, 47, 33, 64, 34, 65, 35, 66, 36, 67, 37, 68, 38, 69, 16, 70, 15, 48, 1, 50, 31, 51, 2, 62, 32, 63, 30, 49, 3, 52, 4, 53, 5, 54, 6, 55, 7, 56, 8, 57, 9, 58, 10, 59, 11, 60, 12, 61, 39, 73, 13, 74, 14, 75, 17, 71, 40, 72, 45, 20, 76, 19, 77, 42, 78, 43, 79, 18, 80, 41, 81, 82, 21, 83, 22, 84, 23, 85, 44, 86, 24, 87, 25, 88, 27, 89, 26, 90, 28, 91, 29, 92 }
  uselistorder i32 4096, { 7, 8, 9, 1, 0, 2, 15, 3, 10, 11, 5, 12, 4, 6, 13, 14 }
  uselistorder i32 32768, { 1, 4, 2, 0, 3 }
  uselistorder i32 (i32, i32)* @function_10250, { 6, 0, 2, 1, 5, 4, 3 }
  uselistorder i32 (i32, i32)* @function_10478, { 14, 0, 13, 8, 7, 10, 9, 12, 11, 6, 5, 2, 1, 4, 3 }
  uselistorder i32 ()* @function_11078, { 36, 35, 34, 4, 3, 2, 0, 1, 6, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5 }
  uselistorder i32 80, { 5, 2, 3, 4, 0, 1, 6, 7 }
  uselistorder i8 43, { 1, 0 }
  uselistorder i32 ()* @function_120e4, { 12, 11, 5, 4, 3, 2, 0, 8, 7, 6, 10, 9, 1 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 114, 115, 96, 97, 98, 99, 105, 107, 106, 108, 25, 26, 20, 21, 22, 23, 24, 27, 28, 39, 38, 44, 45, 40, 41, 42, 43, 29, 30, 31, 32, 33, 34, 35, 36, 37, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0, 67, 68, 69, 70, 71, 72, 73, 1, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 109, 110, 111, 112, 113, 100, 101, 102, 2, 103, 104 }
  uselistorder i32* @sb, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 104, 105, 106, 107, 108, 109, 110, 111, 116, 119, 117, 118, 120, 33, 34, 35, 36, 37, 49, 50, 45, 46, 47, 48, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 1, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 121, 122, 123, 124, 125, 126, 127, 128, 129, 112, 113, 114, 115 }
  uselistorder label %dec_label_pc_14110, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_1410c, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13fec, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_13f64._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13f0c, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13ebc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13e8c, { 1, 2, 0 }
}

define i32 @function_14124(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14124:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_14124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14124, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_14124
  %v1_1412c = load i32, i32* %r2.global-to-local, align 4
  %v2_1412c = load i32, i32* %r3.global-to-local, align 4
  %v3_1412c = and i32 %v2_1412c, %v1_1412c
  %v2_14130 = trunc i32 %v3_1412c to i16
  %v4_14130 = inttoptr i32 %v3_1412c to i16*
  store i16 %v2_14130, i16* %v4_14130, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_14124, %bb
  %v0_14158 = call i32 @function_10a6c()
  store i32 %v0_14158, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_14164 = inttoptr i32 %v0_14158 to i32*
  %v2_14164 = load i32, i32* %v1_14164, align 4
  store i32 %v2_14164, i32* @r6, align 4
  %v1_14168 = call i32 @function_151bc(i32 0)
  %v2_14170 = icmp eq i32 %v1_14168, 0
  store i32 122896, i32* @r4, align 4
  br i1 %v2_14170, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_1417c = load i16, i16* inttoptr (i32 123200 to i16*), align 64
  %v7_1417c = zext i16 %v5_1417c to i32
  %v2_14180 = xor i32 %v7_1417c, 256
  store i32 %v2_14180, i32* @r3, align 4
  %v2_14184 = trunc i32 %v2_14180 to i16
  store i16 %v2_14184, i16* inttoptr (i32 123200 to i16*), align 64
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_1418c = call i32 @function_151bc(i32 1)
  %v2_14190 = icmp eq i32 %v1_1418c, 0
  br i1 %v2_14190, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_14198 = load i32, i32* @r4, align 4
  %v3_14198 = add i32 %v1_14198, 304
  store i32 %v3_14198, i32* %r2.global-to-local, align 4
  %v2_1419c = add i32 %v1_14198, 384
  %v3_1419c = inttoptr i32 %v2_1419c to i16*
  %v4_1419c = load i16, i16* %v3_1419c, align 2
  %v5_1419c = zext i16 %v4_1419c to i32
  %v2_141a0 = xor i32 %v5_1419c, 256
  store i32 %v2_141a0, i32* %r3.global-to-local, align 4
  %v2_141a4 = trunc i32 %v2_141a0 to i16
  store i16 %v2_141a4, i16* %v3_1419c, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_141a8 = load i32, i32* @r6, align 4
  %v1_141a8 = load i32, i32* @r5, align 4
  %v2_141a8 = inttoptr i32 %v1_141a8 to i32*
  store i32 %v0_141a8, i32* %v2_141a8, align 4
  ret i32 %v1_1418c

; uselistorder directives
  uselistorder i32 %v3_1412c, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_151bc, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_141bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_141bc:
  store i32 122896, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_15edc.573 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_141d8 = call i32 @function_10b70()
  ret i32 %v0_141d8
}

define i32 @function_142c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_142c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_142c4 = load i32, i32* @r4, align 4
  store i32 %v3_142c4, i32* %stack_var_-8, align 4
  %v1_142c8 = add i32 %arg1, 8
  %v2_142c8 = inttoptr i32 %v1_142c8 to i32*
  %v3_142c8 = load i32, i32* %v2_142c8, align 4
  %v1_142cc = add i32 %arg1, 16
  %v2_142cc = inttoptr i32 %v1_142cc to i32*
  %v3_142cc = load i32, i32* %v2_142cc, align 4
  %v9_142d0 = icmp eq i32 %v3_142cc, %v3_142c8
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_142d0, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_142c4
  store i32 %v3_142c8, i32* %v2_142cc, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_142c4, %bb
  %v1_142dc = xor i1 %v9_142d0, true
  call void @__pseudo_cond_branch(i1 %v1_142dc, i32 ptrtoint (i32* @global_var_155a8.574 to i32))
  %v0_142e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_142e0 = add i32 %v0_142e0, 8
  %v2_142e0 = inttoptr i32 %v1_142e0 to i32*
  %v3_142e0 = load i32, i32* %v2_142e0, align 4
  %v1_142e4 = add i32 %v0_142e0, 16
  %v2_142e4 = inttoptr i32 %v1_142e4 to i32*
  %v3_142e4 = load i32, i32* %v2_142e4, align 4
  %v2_142e8 = sub i32 %v3_142e4, %v3_142e0
  %v2_142ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_142ec, i32* @r4, align 4
  ret i32 %v2_142e8

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_142f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_142f4:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_142f4 = load i32, i32* @r4, align 4
  store i32 %v3_142f4, i32* %stack_var_-16, align 4
  %v6_142f4 = load i32, i32* @r5, align 4
  %v12_142f4 = load i32, i32* @lr, align 4
  %v1_142f8 = add i32 %arg1, 52
  %v2_142f8 = inttoptr i32 %v1_142f8 to i32*
  %v3_142f8 = load i32, i32* %v2_142f8, align 4
  %v2_14300 = icmp eq i32 %v3_142f8, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 122896, i32* %r6.global-to-local, align 4
  br i1 %v2_14300, label %dec_label_pc_14338, label %dec_label_pc_14314

dec_label_pc_14314:                               ; preds = %dec_label_pc_142f4
  %v1_14314 = add i32 %arg1, 16
  %v2_14314 = inttoptr i32 %v1_14314 to i32*
  %v3_14314 = load i32, i32* %v2_14314, align 4
  %v1_14318 = add i32 %arg1, 24
  %v2_14318 = inttoptr i32 %v1_14318 to i32*
  %v3_14318 = load i32, i32* %v2_14318, align 4
  %v3_1431c = icmp ult i32 %v3_14314, %v3_14318
  br i1 %v3_1431c, label %.thread, label %dec_label_pc_1432c

.thread:                                          ; preds = %dec_label_pc_14314
  %v2_14320 = inttoptr i32 %v3_14314 to i8*
  %v3_14320 = load i8, i8* %v2_14320, align 1
  %v4_14320 = zext i8 %v3_14320 to i32
  store i32 %v4_14320, i32* %r4.global-to-local, align 4
  %v6_14320 = add i32 %v3_14314, 1
  store i32 %v6_14320, i32* %v2_14314, align 4
  br label %dec_label_pc_143ac

dec_label_pc_1432c:                               ; preds = %dec_label_pc_14314
  %v1_1432c = inttoptr i32 %arg1 to i16*
  %v2_1432c = call i32 @function_14820(i16* %v1_1432c)
  store i32 %v2_1432c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_143ac

dec_label_pc_14338:                               ; preds = %dec_label_pc_142f4
  %v1_1433c = add i32 %arg1, 56
  store i32 %v1_1433c, i32* @r4, align 4
  %v4_14350 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_14350)
  %v0_14364 = load i32, i32* %r6.global-to-local, align 4
  %v2_14364 = add i32 %v0_14364, 16
  %v3_14364 = inttoptr i32 %v2_14364 to i32*
  %v4_14364 = load i32, i32* %v3_14364, align 4
  store i32 82800, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14364)
  %v0_14370 = load i32, i32* @r5, align 4
  %v1_14370 = add i32 %v0_14370, 16
  %v2_14370 = inttoptr i32 %v1_14370 to i32*
  %v3_14370 = load i32, i32* %v2_14370, align 4
  %v1_14374 = add i32 %v0_14370, 24
  %v2_14374 = inttoptr i32 %v1_14374 to i32*
  %v3_14374 = load i32, i32* %v2_14374, align 4
  %v3_14378 = icmp ult i32 %v3_14370, %v3_14374
  br i1 %v3_14378, label %.thread2, label %dec_label_pc_14388

.thread2:                                         ; preds = %dec_label_pc_14338
  %v2_1437c = inttoptr i32 %v3_14370 to i8*
  %v3_1437c = load i8, i8* %v2_1437c, align 1
  %v4_1437c = zext i8 %v3_1437c to i32
  store i32 %v4_1437c, i32* %r4.global-to-local, align 4
  %v6_1437c = add i32 %v3_14370, 1
  store i32 %v6_1437c, i32* %v2_14370, align 4
  br label %dec_label_pc_14394

dec_label_pc_14388:                               ; preds = %dec_label_pc_14338
  %v1_1438c = inttoptr i32 %v0_14370 to i16*
  %v2_1438c = call i32 @function_14820(i16* %v1_1438c)
  store i32 %v2_1438c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14394

dec_label_pc_14394:                               ; preds = %.thread2, %dec_label_pc_14388
  %v0_143a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_143a0 = add i32 %v0_143a0, 24
  %v3_143a0 = inttoptr i32 %v2_143a0 to i32*
  %v4_143a0 = load i32, i32* %v3_143a0, align 4
  store i32 %v4_143a0, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_143a0)
  br label %dec_label_pc_143ac

dec_label_pc_143ac:                               ; preds = %.thread, %dec_label_pc_1432c, %dec_label_pc_14394
  %v0_143ac = load i32, i32* %r4.global-to-local, align 4
  %v2_143b4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_143b4, i32* @r4, align 4
  store i32 %v6_142f4, i32* @r5, align 4
  store i32 %v12_142f4, i32* @lr, align 4
  ret i32 %v0_143ac

; uselistorder directives
  uselistorder i32 %v3_14370, { 1, 0, 2 }
  uselistorder i32 %v3_14314, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 3, 5, 2, 1, 4, 0 }
  uselistorder label %dec_label_pc_143ac, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14394, { 1, 0 }
}

define i32 @function_143c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_143c0:
  %v0_143c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_143c0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_143c0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_143c0, %bb
  %v10_143cc = phi i32 [ %arg1, %dec_label_pc_143c0 ], [ 0, %bb ]
  ret i32 %v10_143cc

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_143d0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_143d0:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_143d0 = load i32, i32* @r4, align 4
  store i32 %v3_143d0, i32* %stack_var_-28, align 4
  %v6_143d0 = load i32, i32* @r5, align 4
  %v9_143d0 = load i32, i32* @r6, align 4
  %v12_143d0 = load i32, i32* @r7, align 4
  %v21_143d0 = load i32, i32* @lr, align 4
  %v1_143d4 = add i32 %arg3, 52
  %v2_143d4 = inttoptr i32 %v1_143d4 to i32*
  %v3_143d4 = load i32, i32* %v2_143d4, align 4
  %v1_143dc = sub i32 1, %v3_143d4
  %v2_143dc = icmp ult i32 %v3_143d4, 2
  br i1 %v2_143dc, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_143d0
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_143d0, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_143dc, %dec_label_pc_143d0 ]
  %v0_143e4 = phi i32 [ 0, %bb ], [ %v1_143dc, %dec_label_pc_143d0 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_143e4 = icmp eq i32 %v0_143e4, 0
  store i32 122896, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_143e4, label %dec_label_pc_14438, label %dec_label_pc_14400

dec_label_pc_14400:                               ; preds = %bb16
  %v1_14404 = add i32 %arg3, 56
  store i32 %v1_14404, i32* @r4, align 4
  %v4_14418 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_14418)
  %v0_1442c = load i32, i32* @r5, align 4
  %v2_1442c = add i32 %v0_1442c, 16
  %v3_1442c = inttoptr i32 %v2_1442c to i32*
  %v4_1442c = load i32, i32* %v3_1442c, align 4
  store i32 %v4_1442c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_14438.584 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1442c)
  %v0_14438.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_1443c.pre = load i32, i32* @r7, align 4
  %v0_14440.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14438

dec_label_pc_14438:                               ; preds = %bb16, %dec_label_pc_14400
  %v0_14440 = phi i32 [ %arg3, %bb16 ], [ %v0_14440.pre, %dec_label_pc_14400 ]
  %v0_1443c = phi i32 [ %arg2, %bb16 ], [ %v0_1443c.pre, %dec_label_pc_14400 ]
  %v0_14438 = phi i32 [ %arg1, %bb16 ], [ %v0_14438.pre, %dec_label_pc_14400 ]
  %v3_14444 = inttoptr i32 %v0_14438 to i8*
  %v4_14444 = call i32 @function_1494c(i8* %v3_14444, i32 %v0_1443c, i32 %v0_14440)
  %v0_14448 = load i32, i32* %sl.global-to-local, align 4
  %v2_14448 = icmp eq i32 %v0_14448, 0
  store i32 %v4_14444, i32* %r4.global-to-local, align 4
  br i1 %v2_14448, label %dec_label_pc_14438..thread3_crit_edge, label %bb17

dec_label_pc_14438..thread3_crit_edge:            ; preds = %dec_label_pc_14438
  %v0_14464.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_14438
  %v1_1445c = load i32, i32* @r5, align 4
  %v3_1445c = add i32 %v1_1445c, 24
  %v4_1445c = inttoptr i32 %v3_1445c to i32*
  %v5_1445c = load i32, i32* %v4_1445c, align 4
  store i32 %v5_1445c, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14438..thread3_crit_edge, %bb17
  %v0_14464 = phi i32 [ %v0_14464.pre, %dec_label_pc_14438..thread3_crit_edge ], [ %v5_1445c, %bb17 ]
  %v2_14464 = xor i1 %v2_14448, true
  call void @__pseudo_cond_branch(i1 %v2_14464, i32 %v0_14464)
  %v0_14468 = load i32, i32* %r4.global-to-local, align 4
  %v2_14470 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_14470, i32* %r4.global-to-local, align 4
  store i32 %v6_143d0, i32* @r5, align 4
  store i32 %v9_143d0, i32* @r6, align 4
  store i32 %v12_143d0, i32* @r7, align 4
  store i32 %v21_143d0, i32* @lr, align 4
  ret i32 %v0_14468

; uselistorder directives
  uselistorder i32 %v3_143d4, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 8, 9, 10, 11, 12, 2, 13, 6, 7, 3, 16, 17, 1, 18, 0, 19, 20, 4, 5, 14, 15 }
  uselistorder i32 %arg3, { 0, 3, 1, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14438, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_1447c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1447c:
  %v0_1447c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1447c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1447c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1447c, %bb
  %v10_14488 = phi i32 [ %arg1, %dec_label_pc_1447c ], [ 0, %bb ]
  ret i32 %v10_14488

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1448c() local_unnamed_addr {
dec_label_pc_1448c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_1448c = load i32, i32* @r4, align 4
  store i32 %v3_1448c, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r6.global-to-local, align 4
  %v4_1449c = load i32, i32* inttoptr (i32 122932 to i32*), align 4
  store i32 %v4_1449c, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_144a4 = load i32, i32* inttoptr (i32 123004 to i32*), align 4
  store i32 %v4_144a4, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_144b0 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  store i32 %v4_144b0, i32* %r7.global-to-local, align 4
  %v2_144bc = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_144b0)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_144d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_144d0 = add i32 %v0_144d0, 16
  %v3_144d0 = inttoptr i32 %v2_144d0 to i32*
  %v4_144d0 = load i32, i32* %v3_144d0, align 4
  store i32 %v4_144d0, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_144d0)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_144e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_144e0 = add i32 %v0_144e0, 12
  %v3_144e0 = inttoptr i32 %v2_144e0 to i32*
  %v4_144e0 = load i32, i32* %v3_144e0, align 4
  store i32 %v4_144e0, i32* %r3.global-to-local, align 4
  %v1_144e4 = inttoptr i32 %v4_144e0 to i32*
  %v2_144e4 = load i32, i32* %v1_144e4, align 4
  store i32 %v2_144e4, i32* %r3.global-to-local, align 4
  %v7_144e8 = icmp eq i32 %v2_144e4, 1
  br i1 %v7_144e8, label %dec_label_pc_144f0, label %dec_label_pc_145b0

dec_label_pc_144f0:                               ; preds = %dec_label_pc_1448c
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_144f4 = add i32 %v0_144e0, 48
  %v3_144f4 = inttoptr i32 %v2_144f4 to i32*
  %v4_144f4 = load i32, i32* %v3_144f4, align 4
  store i32 %v4_144f4, i32* %r3.global-to-local, align 4
  %v1_144f8 = inttoptr i32 %v4_144f4 to i32*
  %v2_144f8 = load i32, i32* %v1_144f8, align 4
  store i32 %v2_144f8, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_144f8, 1
  br i1 %tmp30, label %dec_label_pc_145b0, label %dec_label_pc_14504

dec_label_pc_14504:                               ; preds = %dec_label_pc_144f0
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_14508 = add i32 %v0_144e0, 96
  %v3_14508 = inttoptr i32 %v2_14508 to i32*
  %v4_14508 = load i32, i32* %v3_14508, align 4
  store i32 %v4_14508, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_144b0)
  call void @__pseudo_branch(i32 %v4_144d0)
  %v0_14530 = load i32, i32* %r6.global-to-local, align 4
  %v2_14530 = add i32 %v0_14530, 44
  %v3_14530 = inttoptr i32 %v2_14530 to i32*
  %v4_14530 = load i32, i32* %v3_14530, align 4
  store i32 %v4_14530, i32* %r3.global-to-local, align 4
  %v1_14534 = inttoptr i32 %v4_14530 to i32*
  %v2_14534 = load i32, i32* %v1_14534, align 4
  store i32 %v2_14534, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1458011 = icmp eq i32 %v2_14534, 0
  br i1 %v2_1458011, label %dec_label_pc_1458c, label %dec_label_pc_14544

dec_label_pc_14544:                               ; preds = %dec_label_pc_14504, %dec_label_pc_1457c
  %v0_145682 = phi i32 [ %v0_1457c, %dec_label_pc_1457c ], [ %v2_14534, %dec_label_pc_14504 ]
  %v1_14544 = inttoptr i32 %v0_145682 to i16*
  %v2_14544 = load i16, i16* %v1_14544, align 2
  %v3_14544 = zext i16 %v2_14544 to i32
  store i32 %v3_14544, i32* %r3.global-to-local, align 4
  %v2_14548 = and i32 %v3_14544, 32816
  %v7_1454c = icmp eq i32 %v2_14548, 48
  %v1_14550 = add i32 %v0_145682, 32
  %v2_14550 = inttoptr i32 %v1_14550 to i32*
  %v3_14550 = load i32, i32* %v2_14550, align 4
  store i32 %v3_14550, i32* %r5.global-to-local, align 4
  br i1 %v7_1454c, label %dec_label_pc_1455c, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_14544
  store i32 %v0_145682, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1457c

dec_label_pc_1455c:                               ; preds = %dec_label_pc_14544
  %v0_1455c = load i32, i32* %r7.global-to-local, align 4
  %v2_1455c = icmp eq i32 %v0_1455c, 0
  br i1 %v2_1455c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1455c
  %v1_14560 = load i32, i32* %r6.global-to-local, align 4
  %v2_14560 = load i32, i32* %r8.global-to-local, align 4
  %v3_14560 = add i32 %v2_14560, %v1_14560
  %v4_14560 = inttoptr i32 %v3_14560 to i32*
  %v5_14560 = load i32, i32* %v4_14560, align 4
  store i32 %v5_14560, i32* %r3.global-to-local, align 4
  %v3_14564 = inttoptr i32 %v5_14560 to i32*
  store i32 %v3_14550, i32* %v3_14564, align 4
  %v0_14568 = load i32, i32* %r4.global-to-local, align 4
  %v1_14568 = inttoptr i32 %v0_14568 to i16*
  %v2_14568 = load i16, i16* %v1_14568, align 2
  %v3_14568 = zext i16 %v2_14568 to i32
  store i32 %v3_14568, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_1455c
  %v2_145688 = load i16, i16* %v1_14544, align 2
  %v3_145689 = zext i16 %v2_145688 to i32
  store i32 %v3_145689, i32* %r3.global-to-local, align 4
  %v3_1456c = add i32 %v0_1455c, 32
  %v4_1456c = inttoptr i32 %v3_1456c to i32*
  store i32 %v3_14550, i32* %v4_1456c, align 4
  %v0_14570.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_14570 = phi i32 [ %v3_14568, %.thread ], [ %v0_14570.pre, %bb ]
  %v1_14570 = and i32 %v0_14570, 8192
  %v2_14570 = icmp eq i32 %v1_14570, 0
  br i1 %v2_14570, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_14578 = xor i1 %v2_14570, true
  call void @__pseudo_cond_branch(i1 %v1_14578, i32 ptrtoint (i32* @global_var_120e4.16 to i32))
  %v0_1457c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1457c

dec_label_pc_1457c:                               ; preds = %.thread21, %bb33
  %v0_1457c = phi i32 [ %v0_1457c.pre, %bb33 ], [ %v3_14550, %.thread21 ]
  store i32 %v0_1457c, i32* %r4.global-to-local, align 4
  %v2_14580 = icmp eq i32 %v0_1457c, 0
  br i1 %v2_14580, label %dec_label_pc_14580.dec_label_pc_1458c_crit_edge, label %dec_label_pc_14544

dec_label_pc_14580.dec_label_pc_1458c_crit_edge:  ; preds = %dec_label_pc_1457c
  %v0_14598.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1458c

dec_label_pc_1458c:                               ; preds = %dec_label_pc_14580.dec_label_pc_1458c_crit_edge, %dec_label_pc_14504
  %v0_14598 = phi i32 [ %v0_14598.pre, %dec_label_pc_14580.dec_label_pc_1458c_crit_edge ], [ %v0_14530, %dec_label_pc_14504 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_14598 = add i32 %v0_14598, 24
  %v3_14598 = inttoptr i32 %v2_14598 to i32*
  %v4_14598 = load i32, i32* %v3_14598, align 4
  call void @__pseudo_branch(i32 %v4_14598)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_145a8 = load i32, i32* %r6.global-to-local, align 4
  %v2_145a8 = add i32 %v0_145a8, 48
  %v3_145a8 = inttoptr i32 %v2_145a8 to i32*
  %v4_145a8 = load i32, i32* %v3_145a8, align 4
  store i32 %v4_145a8, i32* %r3.global-to-local, align 4
  %v0_145ac = load i32, i32* %r4.global-to-local, align 4
  %v2_145ac = inttoptr i32 %v4_145a8 to i32*
  store i32 %v0_145ac, i32* %v2_145ac, align 4
  %v0_145b4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_145b0

dec_label_pc_145b0:                               ; preds = %dec_label_pc_1448c, %dec_label_pc_144f0, %dec_label_pc_1458c
  %v0_145b4 = phi i32 [ %v0_144e0, %dec_label_pc_1448c ], [ %v0_144e0, %dec_label_pc_144f0 ], [ %v0_145b4.pre, %dec_label_pc_1458c ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_145b4 = add i32 %v0_145b4, 12
  %v3_145b4 = inttoptr i32 %v2_145b4 to i32*
  %v4_145b4 = load i32, i32* %v3_145b4, align 4
  %v1_145b8 = inttoptr i32 %v4_145b4 to i32*
  %v2_145b8 = load i32, i32* %v1_145b8, align 4
  %v1_145bc = add i32 %v2_145b8, -1
  store i32 %v1_145bc, i32* %v1_145b8, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_145d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_145d0 = add i32 %v0_145d0, 24
  %v3_145d0 = inttoptr i32 %v2_145d0 to i32*
  %v4_145d0 = load i32, i32* %v3_145d0, align 4
  call void @__pseudo_branch(i32 %v4_145d0)
  %v2_145e0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_145e0, i32* %r4.global-to-local, align 4
  ret i32 %v2_144bc

; uselistorder directives
  uselistorder i32 %v0_1457c, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 20, 21, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* inttoptr (i32 122932 to i32*), { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_145b0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1457c, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_14544, { 1, 0 }
}

define i32 @function_145ec(i16* %arg1) local_unnamed_addr {
dec_label_pc_145ec:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_145ec = load i1, i1* @cpsr_z, align 1
  %v2_145ec = load i32, i32* @r4, align 4
  br i1 %v0_145ec, label %bb, label %dec_label_pc_145ec..thread8_crit_edge

dec_label_pc_145ec..thread8_crit_edge:            ; preds = %dec_label_pc_145ec
  %v0_14628.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_145ec
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_145ec..thread8_crit_edge, %bb
  %v0_147c8 = phi i32 [ %v0_14628.pre, %dec_label_pc_145ec..thread8_crit_edge ], [ 0, %bb ]
  store i32 %v2_145ec, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %sb.global-to-local, align 4
  %v4_14624 = load i32, i32* inttoptr (i32 122940 to i32*), align 4
  store i32 %v4_14624, i32* %r3.global-to-local, align 4
  %v9_14628 = icmp eq i32 %v0_147c8, %v4_14624
  store i32 %v0_147c8, i32* %fp.global-to-local, align 4
  br i1 %v9_14628, label %bb49, label %dec_label_pc_14640

bb49:                                             ; preds = %.thread8
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_14650

dec_label_pc_14640:                               ; preds = %.thread8
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_14644 = icmp eq i32 %v0_147c8, 0
  br i1 %v2_14644, label %dec_label_pc_14650, label %dec_label_pc_147b8

dec_label_pc_14650:                               ; preds = %bb49, %dec_label_pc_14640
  %stack_var_-60.1.in = phi i32 [ 0, %bb49 ], [ 256, %dec_label_pc_14640 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_14664 = load i32, i32* inttoptr (i32 123004 to i32*), align 4
  store i32 %v4_14664, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_1466c = ptrtoint i32* %stack_var_-56 to i32
  %v4_14670 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_1466c, i32* %r0.global-to-local, align 4
  store i32 %v4_14664, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14670)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14690 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14690, i32* %r0.global-to-local, align 4
  %v0_14694 = load i32, i32* %sb.global-to-local, align 4
  %v2_14694 = add i32 %v0_14694, 16
  %v3_14694 = inttoptr i32 %v2_14694 to i32*
  %v4_14694 = load i32, i32* %v3_14694, align 4
  call void @__pseudo_branch(i32 %v4_14694)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_146a4 = add i32 %v0_14694, 12
  %v3_146a4 = inttoptr i32 %v2_146a4 to i32*
  %v4_146a4 = load i32, i32* %v3_146a4, align 4
  store i32 %v4_146a4, i32* %r2.global-to-local, align 4
  %v1_146a8 = inttoptr i32 %v4_146a4 to i32*
  %v2_146a8 = load i32, i32* %v1_146a8, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_146b0 = add i32 %v2_146a8, 1
  store i32 %v1_146b0, i32* %r3.global-to-local, align 4
  %v2_146b4 = add i32 %v0_14694, 24
  %v3_146b4 = inttoptr i32 %v2_146b4 to i32*
  %v4_146b4 = load i32, i32* %v3_146b4, align 4
  store i32 %v1_146b0, i32* %v1_146a8, align 4
  store i32 %v2_1466c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_146b4)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_146d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_146d0 = add i32 %v0_146d0, 96
  %v3_146d0 = inttoptr i32 %v2_146d0 to i32*
  %v4_146d0 = load i32, i32* %v3_146d0, align 4
  store i32 %v4_146d0, i32* @r4, align 4
  store i32 %v4_146d0, i32* %r2.global-to-local, align 4
  store i32 %v2_1466c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14670)
  %v0_146e8 = load i32, i32* @r4, align 4
  store i32 %v0_146e8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14694)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_146f8 = load i32, i32* %sb.global-to-local, align 4
  %v2_146f8 = add i32 %v0_146f8, 44
  %v3_146f8 = inttoptr i32 %v2_146f8 to i32*
  %v4_146f8 = load i32, i32* %v3_146f8, align 4
  store i32 %v4_146f8, i32* %r3.global-to-local, align 4
  store i32 %v2_1466c, i32* %r0.global-to-local, align 4
  %v1_14704 = inttoptr i32 %v4_146f8 to i32*
  %v2_14704 = load i32, i32* %v1_14704, align 4
  store i32 %v2_14704, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_146b4)
  %v0_14710 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_14710, i32* @r6, align 4
  %v2_14714 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_14714, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_147a8.pr = load i32, i32* @r7, align 4
  %v2_147a828 = icmp eq i32 %v0_147a8.pr, 0
  br i1 %v2_147a828, label %dec_label_pc_147b0, label %dec_label_pc_1471c

dec_label_pc_1471c:                               ; preds = %dec_label_pc_14650, %dec_label_pc_147a4
  %v0_14728 = phi i32 [ %v3_147a4, %dec_label_pc_147a4 ], [ %v0_147a8.pr, %dec_label_pc_14650 ]
  %v1_1471c = inttoptr i32 %v0_14728 to i16*
  %v2_1471c = load i16, i16* %v1_1471c, align 2
  %v3_1471c = zext i16 %v2_1471c to i32
  store i32 %v3_1471c, i32* %r3.global-to-local, align 4
  %v1_14720 = and i32 %v3_1471c, 64
  %v2_14720 = icmp eq i32 %v1_14720, 0
  br i1 %v2_14720, label %dec_label_pc_147a4, label %dec_label_pc_14728

dec_label_pc_14728:                               ; preds = %dec_label_pc_1471c
  %v1_14728 = add i32 %v0_14728, 56
  store i32 %v1_14728, i32* @r4, align 4
  store i32 %v1_14728, i32* %r2.global-to-local, align 4
  store i32 %v2_1466c, i32* %r0.global-to-local, align 4
  %v0_14738 = load i32, i32* %sb.global-to-local, align 4
  %v1_14738 = load i32, i32* %fp.global-to-local, align 4
  %v2_14738 = add i32 %v1_14738, %v0_14738
  %v3_14738 = inttoptr i32 %v2_14738 to i32*
  %v4_14738 = load i32, i32* %v3_14738, align 4
  call void @__pseudo_branch(i32 %v4_14738)
  %v0_14744 = load i32, i32* @r4, align 4
  store i32 %v0_14744, i32* %r0.global-to-local, align 4
  %v0_14748 = load i32, i32* %sb.global-to-local, align 4
  %v1_14748 = load i32, i32* @r8, align 4
  %v2_14748 = add i32 %v1_14748, %v0_14748
  %v3_14748 = inttoptr i32 %v2_14748 to i32*
  %v4_14748 = load i32, i32* %v3_14748, align 4
  call void @__pseudo_branch(i32 %v4_14748)
  %v0_14754 = load i32, i32* @r7, align 4
  %v1_14754 = inttoptr i32 %v0_14754 to i16*
  %v2_14754 = load i16, i16* %v1_14754, align 2
  %v3_14754 = zext i16 %v2_14754 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_1475c = or i32 %v3_14754, %stack_var_-60.1.in
  %v1_14760 = xor i32 %v2_1475c, 320
  store i32 %v1_14760, i32* %r3.global-to-local, align 4
  %v1_14764 = and i32 %v1_14760, 832
  %v2_14764 = icmp eq i32 %v1_14764, 0
  br i1 %v2_14764, label %dec_label_pc_1476c, label %bb50

dec_label_pc_1476c:                               ; preds = %dec_label_pc_14728
  store i32 %v0_14754, i32* %r0.global-to-local, align 4
  %v1_14770 = call i32 @function_142c4(i32 %v0_14754)
  store i32 %v1_14770, i32* %r0.global-to-local, align 4
  %v2_14774 = icmp eq i32 %v1_14770, 0
  br i1 %v2_14774, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_1476c
  %v1_14778 = load i32, i32* @r7, align 4
  %v2_14778 = inttoptr i32 %v1_14778 to i16*
  %v3_14778 = load i16, i16* %v2_14778, align 2
  %v4_14778 = zext i16 %v3_14778 to i32
  store i32 %v4_14778, i32* %r3.global-to-local, align 4
  %v2_1477c = add i32 %v1_14778, 8
  %v3_1477c = inttoptr i32 %v2_1477c to i32*
  %v4_1477c = load i32, i32* %v3_1477c, align 4
  store i32 %v4_1477c, i32* %r2.global-to-local, align 4
  %v2_14780 = and i32 %v4_14778, 65471
  store i32 %v2_14780, i32* %r3.global-to-local, align 4
  %v3_14784 = add i32 %v1_14778, 28
  %v4_14784 = inttoptr i32 %v3_14784 to i32*
  store i32 %v4_1477c, i32* %v4_14784, align 4
  %v1_14788 = load i32, i32* %r3.global-to-local, align 4
  %v2_14788 = trunc i32 %v1_14788 to i16
  %v3_14788 = load i32, i32* @r7, align 4
  %v4_14788 = inttoptr i32 %v3_14788 to i16*
  store i16 %v2_14788, i16* %v4_14788, align 2
  br label %bb50

.thread17:                                        ; preds = %dec_label_pc_1476c
  store i32 -1, i32* @r6, align 4
  br label %bb50

bb50:                                             ; preds = %.thread16, %dec_label_pc_14728, %.thread17
  store i32 %v2_1466c, i32* %r0.global-to-local, align 4
  %v0_14798 = load i32, i32* %sb.global-to-local, align 4
  %v1_14798 = load i32, i32* %sl.global-to-local, align 4
  %v2_14798 = add i32 %v1_14798, %v0_14798
  %v3_14798 = inttoptr i32 %v2_14798 to i32*
  %v4_14798 = load i32, i32* %v3_14798, align 4
  call void @__pseudo_branch(i32 %v4_14798)
  %v0_147a4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_147a4

dec_label_pc_147a4:                               ; preds = %dec_label_pc_1471c, %bb50
  %v0_147a4 = phi i32 [ %v0_14728, %dec_label_pc_1471c ], [ %v0_147a4.pre, %bb50 ]
  %v1_147a4 = add i32 %v0_147a4, 32
  %v2_147a4 = inttoptr i32 %v1_147a4 to i32*
  %v3_147a4 = load i32, i32* %v2_147a4, align 4
  store i32 %v3_147a4, i32* @r7, align 4
  %v2_147a8 = icmp eq i32 %v3_147a4, 0
  br i1 %v2_147a8, label %dec_label_pc_147b0, label %dec_label_pc_1471c

dec_label_pc_147b0:                               ; preds = %dec_label_pc_147a4, %dec_label_pc_14650
  %v0_147b0 = call i32 @function_1448c()
  store i32 %v0_147b0, i32* %r0.global-to-local, align 4
  %v0_147ec.pre = load i32, i32* @r6, align 4
  br label %bb52

dec_label_pc_147b8:                               ; preds = %dec_label_pc_14640
  %v1_147b8 = inttoptr i32 %v0_147c8 to i16*
  %v2_147b8 = load i16, i16* %v1_147b8, align 2
  %v3_147b8 = zext i16 %v2_147b8 to i32
  %v1_147bc = and i32 %v3_147b8, 64
  store i32 %v1_147bc, i32* %r3.global-to-local, align 4
  %v2_147bc = icmp eq i32 %v1_147bc, 0
  br i1 %v2_147bc, label %bb51, label %dec_label_pc_147c8

bb51:                                             ; preds = %dec_label_pc_147b8
  br label %bb52

dec_label_pc_147c8:                               ; preds = %dec_label_pc_147b8
  %v1_147c8 = call i32 @function_142c4(i32 %v0_147c8)
  store i32 %v1_147c8, i32* %r0.global-to-local, align 4
  %v2_147cc = icmp eq i32 %v1_147c8, 0
  br i1 %v2_147cc, label %.thread24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_147c8
  br label %bb52

.thread24:                                        ; preds = %dec_label_pc_147c8
  %v1_147d0 = load i32, i32* %fp.global-to-local, align 4
  %v2_147d0 = inttoptr i32 %v1_147d0 to i16*
  %v3_147d0 = load i16, i16* %v2_147d0, align 2
  %v4_147d0 = zext i16 %v3_147d0 to i32
  store i32 %v4_147d0, i32* %r3.global-to-local, align 4
  %v2_147d4 = add i32 %v1_147d0, 8
  %v3_147d4 = inttoptr i32 %v2_147d4 to i32*
  %v4_147d4 = load i32, i32* %v3_147d4, align 4
  store i32 %v4_147d4, i32* %r2.global-to-local, align 4
  %v2_147d8 = and i32 %v4_147d0, 65471
  store i32 %v2_147d8, i32* %r3.global-to-local, align 4
  %v2_147dc = trunc i32 %v2_147d8 to i16
  store i16 %v2_147dc, i16* %v2_147d0, align 2
  %v1_147e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_147e0 = load i32, i32* %fp.global-to-local, align 4
  %v3_147e0 = add i32 %v2_147e0, 28
  %v4_147e0 = inttoptr i32 %v3_147e0 to i32*
  store i32 %v1_147e0, i32* %v4_147e0, align 4
  br label %bb52

bb52:                                             ; preds = %bb51, %.thread26, %dec_label_pc_147b0, %.thread24
  %v0_147ec = phi i32 [ -1, %.thread26 ], [ 0, %bb51 ], [ %v0_147ec.pre, %dec_label_pc_147b0 ], [ 0, %.thread24 ]
  store i32 %v0_147ec, i32* %r0.global-to-local, align 4
  %v2_147f4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_147f4, i32* %r4.global-to-local, align 4
  ret i32 %v0_147ec

; uselistorder directives
  uselistorder i32 %v0_147ec, { 1, 0 }
  uselistorder i32 %v3_147a4, { 1, 2, 0 }
  uselistorder i32 %v0_14754, { 1, 0, 2 }
  uselistorder i32 %v0_14694, { 1, 0, 2 }
  uselistorder i32 %v0_147c8, { 2, 1, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 12, 13, 14, 15, 16, 17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r2.global-to-local, { 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r0.global-to-local, { 15, 14, 13, 16, 12, 3, 5, 4, 6, 8, 7, 9, 10, 11, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 4, 5, 0, 1, 3, 2, 6 }
  uselistorder i32 56, { 8, 9, 10, 1, 2, 11, 13, 4, 5, 6, 7, 0, 3, 12, 14 }
  uselistorder i32* @r8, { 9, 10, 11, 12, 13, 14, 15, 16, 2, 17, 190, 147, 148, 3, 149, 150, 151, 167, 168, 169, 170, 171, 6, 172, 173, 174, 175, 176, 177, 178, 179, 81, 82, 83, 84, 85, 42, 43, 44, 45, 46, 47, 48, 31, 33, 34, 22, 24, 4, 18, 19, 20, 21, 23, 32, 25, 26, 27, 28, 29, 30, 35, 36, 49, 50, 51, 52, 5, 37, 0, 38, 39, 40, 8, 41, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 95, 96, 97, 99, 100, 101, 102, 103, 105, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 180, 181, 1, 185, 182, 183, 184, 186, 187, 188, 189, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 161, 162, 163, 7, 165, 166 }
  uselistorder i32* inttoptr (i32 122968 to i32*), { 0, 1, 2, 3, 4, 5, 6, 7, 10, 8, 9 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb52, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_147a4, { 1, 0 }
  uselistorder label %bb50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1471c, { 1, 0 }
  uselistorder label %dec_label_pc_14650, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_14800(i32 %arg1) local_unnamed_addr {
dec_label_pc_14800:
  %v0_14800 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14800, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_14800
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_14800, %bb
  %v5_1481c = phi i32 [ %arg1, %dec_label_pc_14800 ], [ 0, %bb ]
  ret i32 %v5_1481c

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_14820(i16* %arg1) local_unnamed_addr {
dec_label_pc_14820:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_14820 = load i32, i32* @r4, align 4
  store i32 %v3_14820, i32* %stack_var_-12, align 4
  %v6_14820 = load i32, i32* @r5, align 4
  %v9_14820 = load i32, i32* @lr, align 4
  %v0_14824 = load i32, i32* @r0, align 4
  %v1_14824 = add i32 %v0_14824, 16
  %v2_14824 = inttoptr i32 %v1_14824 to i32*
  %v3_14824 = load i32, i32* %v2_14824, align 4
  store i32 %v3_14824, i32* %r2.global-to-local, align 4
  %v1_14828 = add i32 %v0_14824, 24
  %v2_14828 = inttoptr i32 %v1_14828 to i32*
  %v3_14828 = load i32, i32* %v2_14828, align 4
  %v3_1482c = icmp ult i32 %v3_14824, %v3_14828
  store i32 %v0_14824, i32* @r4, align 4
  br i1 %v3_1482c, label %bb, label %dec_label_pc_1484c

bb:                                               ; preds = %dec_label_pc_14820
  %v2_14838 = inttoptr i32 %v3_14824 to i8*
  %v3_14838 = load i8, i8* %v2_14838, align 1
  %v4_14838 = zext i8 %v3_14838 to i32
  store i32 %v4_14838, i32* %r0.global-to-local, align 4
  %v6_14838 = add i32 %v3_14824, 1
  store i32 %v6_14838, i32* %r2.global-to-local, align 4
  store i32 %v6_14838, i32* %v2_14824, align 4
  br label %dec_label_pc_14938

dec_label_pc_1484c:                               ; preds = %dec_label_pc_14820
  store i32 122896, i32* @r5, align 4
  %v1_1484c = inttoptr i32 %v0_14824 to i16*
  %v2_1484c = load i16, i16* %v1_1484c, align 2
  %v3_1484c = zext i16 %v2_1484c to i32
  %v1_14850 = and i32 %v3_1484c, 131
  %tmp24 = icmp ugt i32 %v1_14850, 128
  br i1 %tmp24, label %dec_label_pc_1486c, label %dec_label_pc_1485c

dec_label_pc_1485c:                               ; preds = %dec_label_pc_1484c
  store i32 128, i32* @r1, align 4
  %v0_14860 = call i32 @function_1568c()
  store i32 %v0_14860, i32* %r0.global-to-local, align 4
  %v2_14864 = icmp eq i32 %v0_14860, 0
  br i1 %v2_14864, label %dec_label_pc_1485c.dec_label_pc_1486c_crit_edge, label %dec_label_pc_14934

dec_label_pc_1485c.dec_label_pc_1486c_crit_edge:  ; preds = %dec_label_pc_1485c
  %v0_1486c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1486c

dec_label_pc_1486c:                               ; preds = %dec_label_pc_1485c.dec_label_pc_1486c_crit_edge, %dec_label_pc_1484c
  %v2_148ac = phi i32 [ %v0_1486c.pre, %dec_label_pc_1485c.dec_label_pc_1486c_crit_edge ], [ %v0_14824, %dec_label_pc_1484c ]
  %v1_1486c = inttoptr i32 %v2_148ac to i16*
  %v2_1486c = load i16, i16* %v1_1486c, align 2
  %v3_1486c = zext i16 %v2_1486c to i32
  store i32 %v3_1486c, i32* %r2.global-to-local, align 4
  %v1_14870 = and i32 %v3_1486c, 2
  %v2_14870 = icmp eq i32 %v1_14870, 0
  br i1 %v2_14870, label %dec_label_pc_1489c, label %dec_label_pc_14878

dec_label_pc_14878:                               ; preds = %dec_label_pc_1486c
  %tmp25 = urem i16 %v2_1486c, 2
  %v1_14878 = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_14878
  %v4_1487c = and i32 %tmp21, 4
  %v5_1487c = add i32 %v4_1487c, %v2_148ac
  %v1_14880 = add i32 %v5_1487c, 36
  %v2_14880 = inttoptr i32 %v1_14880 to i8*
  %v3_14880 = load i8, i8* %v2_14880, align 1
  %v4_14880 = zext i8 %v3_14880 to i32
  %v1_14884 = add nsw i32 %v3_1486c, -1
  store i32 %v1_14884, i32* %r2.global-to-local, align 4
  store i32 %v4_14880, i32* %r0.global-to-local, align 4
  %v2_14890 = add i32 %v2_148ac, 40
  %v3_14890 = inttoptr i32 %v2_14890 to i32*
  store i32 0, i32* %v3_14890, align 4
  %v0_14894 = load i32, i32* %r2.global-to-local, align 4
  %v1_14894 = trunc i32 %v0_14894 to i16
  %v2_14894 = load i32, i32* @r4, align 4
  %v3_14894 = inttoptr i32 %v2_14894 to i16*
  store i16 %v1_14894, i16* %v3_14894, align 2
  br label %dec_label_pc_14938

dec_label_pc_1489c:                               ; preds = %dec_label_pc_1486c
  %v1_1489c = add i32 %v2_148ac, 16
  %v1_148a0 = inttoptr i32 %v1_1489c to i32*
  %v2_148a0 = load i32, i32* %v1_148a0, align 4
  %v3_148a0 = add i32 %v2_148ac, 20
  %v4_148a0 = inttoptr i32 %v3_148a0 to i32*
  %v5_148a0 = load i32, i32* %v4_148a0, align 4
  %v9_148a4 = icmp eq i32 %v5_148a0, %v2_148a0
  br i1 %v9_148a4, label %dec_label_pc_148b4, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_1489c
  %v2_148a8 = inttoptr i32 %v2_148a0 to i8*
  %v3_148a8 = load i8, i8* %v2_148a8, align 1
  %v4_148a8 = zext i8 %v3_148a8 to i32
  store i32 %v4_148a8, i32* %r0.global-to-local, align 4
  %v6_148a8 = add i32 %v2_148a0, 1
  store i32 %v6_148a8, i32* %v1_148a0, align 4
  br label %dec_label_pc_14938

dec_label_pc_148b4:                               ; preds = %dec_label_pc_1489c
  %v1_148b4 = add i32 %v2_148ac, 4
  %v2_148b4 = inttoptr i32 %v1_148b4 to i32*
  %v3_148b4 = load i32, i32* %v2_148b4, align 4
  %v7_148b8 = icmp eq i32 %v3_148b4, -2
  br i1 %v7_148b8, label %.thread8, label %dec_label_pc_148cc

.thread8:                                         ; preds = %dec_label_pc_148b4
  %v2_148bc = or i16 %v2_1486c, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_148bc, i16* %v1_1486c, align 2
  br label %dec_label_pc_14938

dec_label_pc_148cc:                               ; preds = %dec_label_pc_148b4
  %v1_148cc = and i32 %v3_1486c, 768
  %v2_148cc = icmp eq i32 %v1_148cc, 0
  br i1 %v2_148cc, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_148cc
  %v1_148d4 = load i32, i32* @r5, align 4
  %v3_148d4 = add i32 %v1_148d4, 44
  %v4_148d4 = inttoptr i32 %v3_148d4 to i32*
  %v5_148d4 = load i32, i32* %v4_148d4, align 4
  store i32 %v5_148d4, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_148cc, %bb22
  %v1_148d8 = xor i1 %v2_148cc, true
  call void @__pseudo_cond_branch(i1 %v1_148d8, i32 ptrtoint (i32* @global_var_14614.548 to i32))
  %v0_148dc = load i32, i32* @r4, align 4
  %v1_148dc = add i32 %v0_148dc, 8
  store i32 %v1_148dc, i32* %r2.global-to-local, align 4
  %v1_148e0 = inttoptr i32 %v1_148dc to i32*
  %v2_148e0 = load i32, i32* %v1_148e0, align 4
  store i32 %v2_148e0, i32* %r2.global-to-local, align 4
  %v3_148e0 = add i32 %v0_148dc, 12
  %v4_148e0 = inttoptr i32 %v3_148e0 to i32*
  %v5_148e0 = load i32, i32* %v4_148e0, align 4
  %v9_148e4 = icmp eq i32 %v5_148e0, %v2_148e0
  br i1 %v9_148e4, label %dec_label_pc_14918, label %dec_label_pc_148ec

dec_label_pc_148ec:                               ; preds = %.thread10
  %v2_148ec = add i32 %v0_148dc, 24
  %v3_148ec = inttoptr i32 %v2_148ec to i32*
  store i32 %v2_148e0, i32* %v3_148ec, align 4
  %v0_148f0 = load i32, i32* @r4, align 4
  store i32 %v0_148f0, i32* %r0.global-to-local, align 4
  %v2_148f4 = call i32 @function_1565c(i32 %v0_148f0)
  store i32 %v2_148f4, i32* %r0.global-to-local, align 4
  %v2_148f8 = icmp eq i32 %v2_148f4, 0
  br i1 %v2_148f8, label %dec_label_pc_14934, label %dec_label_pc_14900

dec_label_pc_14900:                               ; preds = %dec_label_pc_148ec
  %v0_14900 = load i32, i32* @r4, align 4
  %v1_14900 = add i32 %v0_14900, 20
  %v2_14900 = inttoptr i32 %v1_14900 to i32*
  %v3_14900 = load i32, i32* %v2_14900, align 4
  %v2_14904 = add i32 %v0_14900, 24
  %v3_14904 = inttoptr i32 %v2_14904 to i32*
  store i32 %v3_14900, i32* %v3_14904, align 4
  %v0_14908 = load i32, i32* @r4, align 4
  %v1_14908 = add i32 %v0_14908, 16
  %v2_14908 = inttoptr i32 %v1_14908 to i32*
  %v3_14908 = load i32, i32* %v2_14908, align 4
  %v1_1490c = inttoptr i32 %v3_14908 to i8*
  %v2_1490c = load i8, i8* %v1_1490c, align 1
  %v3_1490c = zext i8 %v2_1490c to i32
  store i32 %v3_1490c, i32* %r0.global-to-local, align 4
  %v5_1490c = add i32 %v3_14908, 1
  store i32 %v5_1490c, i32* %v2_14908, align 4
  br label %dec_label_pc_14938

dec_label_pc_14918:                               ; preds = %.thread10
  %v1_14918 = inttoptr i32 %v0_148dc to i16*
  store i32 %v0_148dc, i32* %r0.global-to-local, align 4
  %v2_1491c = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_14924 = call i32 @function_15550(i16* %v1_14918, i32 %v2_1491c, i32 1)
  store i32 %v5_14924, i32* %r0.global-to-local, align 4
  %v2_14928 = icmp eq i32 %v5_14924, 0
  br i1 %v2_14928, label %dec_label_pc_14934, label %bb23

bb23:                                             ; preds = %dec_label_pc_14918
  %v4_1492c = load i8, i8* %stack_var_-17, align 1
  %v5_1492c = sext i8 %v4_1492c to i32
  store i32 %v5_1492c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14938

dec_label_pc_14934:                               ; preds = %dec_label_pc_14918, %dec_label_pc_1485c, %dec_label_pc_148ec
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14938

dec_label_pc_14938:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_14900, %dec_label_pc_14878, %dec_label_pc_14934
  %v2_1493c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1493c, i32* @r4, align 4
  store i32 %v6_14820, i32* @r5, align 4
  store i32 %v9_14820, i32* @lr, align 4
  %v1_14940 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_14940

; uselistorder directives
  uselistorder i32 %v2_148a0, { 1, 0, 2 }
  uselistorder i32 %v2_148ac, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_14824, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14824, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 9, 1, 0, 13, 3, 2, 12, 4, 5, 6, 7, 8, 11, 10 }
  uselistorder i32 768, { 1, 0, 2 }
  uselistorder i32 128, { 5, 0, 4, 7, 1, 8, 6, 9, 10, 2, 3, 11, 12 }
  uselistorder label %dec_label_pc_14938, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_14934, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_1494c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1494c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_1494c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14950 = icmp eq i32 %arg2, 0
  store i1 %v2_14950, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_149d8, label %dec_label_pc_149c0.preheader

dec_label_pc_149c0.preheader:                     ; preds = %dec_label_pc_1494c
  store i32 %tmp, i32* @r5, align 4
  %v1_149c02 = add i32 %arg2, -1
  store i32 %v1_149c02, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_149c08 = icmp eq i32 %arg2, 1
  store i1 %v7_149c08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_149c08, label %dec_label_pc_149c8, label %dec_label_pc_1496c

dec_label_pc_1496c:                               ; preds = %dec_label_pc_149c0.preheader, %dec_label_pc_149c0.backedge.dec_label_pc_1496c_crit_edge
  %v0_14990 = phi i32 [ %v0_1496c.pre, %dec_label_pc_149c0.backedge.dec_label_pc_1496c_crit_edge ], [ %arg3, %dec_label_pc_149c0.preheader ]
  %v1_1496c = add i32 %v0_14990, 16
  %v2_1496c = inttoptr i32 %v1_1496c to i32*
  %v3_1496c = load i32, i32* %v2_1496c, align 4
  store i32 %v3_1496c, i32* %r2.global-to-local, align 4
  %v1_14970 = add i32 %v0_14990, 24
  %v2_14970 = inttoptr i32 %v1_14970 to i32*
  %v3_14970 = load i32, i32* %v2_14970, align 4
  store i32 %v3_14970, i32* %r3.global-to-local, align 4
  %v3_14974 = icmp uge i32 %v3_1496c, %v3_14970
  store i1 %v3_14974, i1* %cpsr_c.global-to-local, align 1
  %v9_14974 = icmp eq i32 %v3_1496c, %v3_14970
  store i1 %v9_14974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14974, label %dec_label_pc_14990, label %dec_label_pc_1497c

dec_label_pc_1497c:                               ; preds = %dec_label_pc_1496c
  %v1_1497c = inttoptr i32 %v3_1496c to i8*
  %v2_1497c = load i8, i8* %v1_1497c, align 1
  %v3_1497c = zext i8 %v2_1497c to i32
  store i32 %v3_1497c, i32* %r3.global-to-local, align 4
  %v5_1497c = add i32 %v3_1496c, 1
  store i32 %v5_1497c, i32* %r2.global-to-local, align 4
  %v2_14980 = load i32, i32* @r5, align 4
  %v3_14980 = inttoptr i32 %v2_14980 to i8*
  store i8 %v2_1497c, i8* %v3_14980, align 1
  %v4_14980 = load i32, i32* @r5, align 4
  %v5_14980 = add i32 %v4_14980, 1
  store i32 %v5_14980, i32* @r5, align 4
  %v0_14984 = load i32, i32* %r3.global-to-local, align 4
  %v2_14984 = icmp ugt i32 %v0_14984, 9
  store i1 %v2_14984, i1* %cpsr_c.global-to-local, align 1
  %v7_14984 = icmp eq i32 %v0_14984, 10
  store i1 %v7_14984, i1* %cpsr_z.global-to-local, align 1
  %v0_14988 = load i32, i32* %r2.global-to-local, align 4
  %v1_14988 = load i32, i32* @r4, align 4
  %v2_14988 = add i32 %v1_14988, 16
  %v3_14988 = inttoptr i32 %v2_14988 to i32*
  store i32 %v0_14988, i32* %v3_14988, align 4
  br i1 %v7_14984, label %dec_label_pc_149c8, label %dec_label_pc_149c0.backedge

dec_label_pc_14990:                               ; preds = %dec_label_pc_1496c
  %v1_14990 = inttoptr i32 %v0_14990 to i16*
  %v3_14994 = call i32 @function_14820(i16* %v1_14990)
  %v3_14998 = icmp eq i32 %v3_14994, -1
  store i1 %v3_14998, i1* %cpsr_c.global-to-local, align 1
  %v8_14998 = icmp eq i32 %v3_14994, -1
  store i1 %v8_14998, i1* %cpsr_z.global-to-local, align 1
  %v1_1499c = urem i32 %v3_14994, 256
  store i32 %v1_1499c, i32* %r3.global-to-local, align 4
  br i1 %v3_14998, label %dec_label_pc_149a4, label %dec_label_pc_149bc

dec_label_pc_149a4:                               ; preds = %dec_label_pc_14990
  %v0_149a4 = load i32, i32* @r4, align 4
  %v1_149a4 = inttoptr i32 %v0_149a4 to i16*
  %v2_149a4 = load i16, i16* %v1_149a4, align 2
  %v3_149a4 = zext i16 %v2_149a4 to i32
  store i32 %v3_149a4, i32* %r3.global-to-local, align 4
  %v1_149a8 = and i32 %v3_149a4, 8
  %v2_149a8 = icmp eq i32 %v1_149a8, 0
  store i1 %v2_149a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_149a8, label %dec_label_pc_149c8, label %dec_label_pc_149d8

dec_label_pc_149bc:                               ; preds = %dec_label_pc_14990
  %v1_149b4 = trunc i32 %v3_14994 to i8
  %v2_149b4 = load i32, i32* @r5, align 4
  %v3_149b4 = inttoptr i32 %v2_149b4 to i8*
  store i8 %v1_149b4, i8* %v3_149b4, align 1
  %v4_149b4 = load i32, i32* @r5, align 4
  %v5_149b4 = add i32 %v4_149b4, 1
  store i32 %v5_149b4, i32* @r5, align 4
  %v0_149b8 = load i32, i32* %r3.global-to-local, align 4
  %v2_149b8 = icmp ugt i32 %v0_149b8, 9
  store i1 %v2_149b8, i1* %cpsr_c.global-to-local, align 1
  %v7_149b8 = icmp eq i32 %v0_149b8, 10
  store i1 %v7_149b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_149b8, label %dec_label_pc_149c8, label %dec_label_pc_149c0.backedge

dec_label_pc_149c0.backedge:                      ; preds = %dec_label_pc_149bc, %dec_label_pc_1497c
  %v0_149c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_149c0 = add i32 %v0_149c0, -1
  store i32 %v1_149c0, i32* %r6.global-to-local, align 4
  %v2_149c0 = icmp ne i32 %v0_149c0, 0
  store i1 %v2_149c0, i1* %cpsr_c.global-to-local, align 1
  %v7_149c0 = icmp eq i32 %v0_149c0, 1
  store i1 %v7_149c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_149c0, label %dec_label_pc_149c8, label %dec_label_pc_149c0.backedge.dec_label_pc_1496c_crit_edge

dec_label_pc_149c0.backedge.dec_label_pc_1496c_crit_edge: ; preds = %dec_label_pc_149c0.backedge
  %v0_1496c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1496c

dec_label_pc_149c8:                               ; preds = %dec_label_pc_149bc, %dec_label_pc_149c0.backedge, %dec_label_pc_1497c, %dec_label_pc_149c0.preheader, %dec_label_pc_149a4
  %v0_149c8 = load i32, i32* @r5, align 4
  %v1_149c8 = load i32, i32* @r7, align 4
  %v3_149c8 = icmp uge i32 %v0_149c8, %v1_149c8
  store i1 %v3_149c8, i1* %cpsr_c.global-to-local, align 1
  %v9_149c8 = icmp eq i32 %v0_149c8, %v1_149c8
  store i1 %v9_149c8, i1* %cpsr_z.global-to-local, align 1
  %v2_149cc = xor i1 %v9_149c8, true
  %v3_149cc = and i1 %v3_149c8, %v2_149cc
  br i1 %v3_149cc, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_149c8
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_149d0 = inttoptr i32 %v0_149c8 to i8*
  store i8 0, i8* %v7_149d0, align 1
  %v0_149d4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_149d4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_149c8, %bb
  %v1_149d4 = phi i1 [ %v1_149d4.pre, %bb ], [ %v9_149c8, %dec_label_pc_149c8 ]
  %v0_149d4 = phi i1 [ %v0_149d4.pre, %bb ], [ %v3_149c8, %dec_label_pc_149c8 ]
  %v2_149d4 = xor i1 %v1_149d4, true
  %v3_149d4 = and i1 %v0_149d4, %v2_149d4
  br i1 %v3_149d4, label %.dec_label_pc_149dc_crit_edge, label %dec_label_pc_149d8

.dec_label_pc_149dc_crit_edge:                    ; preds = %.thread14
  %v0_149dc.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_149dc

dec_label_pc_149d8:                               ; preds = %dec_label_pc_1494c, %dec_label_pc_149a4, %.thread14
  br label %dec_label_pc_149dc

dec_label_pc_149dc:                               ; preds = %.dec_label_pc_149dc_crit_edge, %dec_label_pc_149d8
  %v0_149dc = phi i32 [ %v0_149dc.pre, %.dec_label_pc_149dc_crit_edge ], [ 0, %dec_label_pc_149d8 ]
  store i32 %v6_1494c, i32* @r5, align 4
  ret i32 %v0_149dc

; uselistorder directives
  uselistorder i1 %v9_149c8, { 1, 0, 2 }
  uselistorder i32 %v1_149c8, { 1, 0 }
  uselistorder i32 %v0_149c8, { 0, 2, 1 }
  uselistorder i32 %v0_149c0, { 2, 0, 1 }
  uselistorder i32 %v0_149b8, { 1, 0 }
  uselistorder i32 %v3_14994, { 2, 1, 0, 3 }
  uselistorder i32 %v0_14984, { 1, 0 }
  uselistorder i32 %v3_1496c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_14990, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 0, 9 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 7, 3, 4, 5, 6, 0, 8 }
  uselistorder i32 (i16*)* @function_14820, { 3, 0, 1, 2 }
  uselistorder i1 true, { 0, 1, 69, 94, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 67, 26, 27, 28, 29, 30, 74, 73, 31, 95, 96, 86, 97, 98, 34, 99, 35, 36, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 32, 33, 110, 111, 112, 65, 68, 85, 84, 47, 48, 49, 113, 50, 51, 75, 76, 80, 77, 81, 71, 79, 114, 72, 83, 115, 37, 116, 38, 39, 40, 117, 87, 88, 41, 42, 118, 89, 90, 43, 44, 119, 91, 92, 45, 46, 70, 120, 121, 82, 122, 52, 78, 53, 54, 66, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 93 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_149dc, { 1, 0 }
  uselistorder label %dec_label_pc_149d8, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_149c8, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_1496c, { 1, 0 }
}

define i32 @function_149f0() local_unnamed_addr {
dec_label_pc_149f0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_149f0 = load i32, i32* @r1, align 4
  %v1_149f0 = load i32, i32* @r0, align 4
  %v2_149f0 = sub i32 %v0_149f0, %v1_149f0
  %v3_149f0 = icmp ult i32 %v0_149f0, %v1_149f0
  %v4_149f0 = xor i32 %v1_149f0, %v0_149f0
  %v5_149f0 = xor i32 %v2_149f0, %v0_149f0
  %v6_149f0 = and i32 %v5_149f0, %v4_149f0
  %v7_149f0 = icmp slt i32 %v6_149f0, 0
  store i1 %v7_149f0, i1* %cpsr_v.global-to-local, align 1
  %v8_149f0 = icmp slt i32 %v2_149f0, 0
  store i1 %v8_149f0, i1* %cpsr_n.global-to-local, align 1
  %v9_149f0 = icmp eq i32 %v0_149f0, %v1_149f0
  store i1 %v9_149f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_149f0, label %dec_label_pc_14c44, label %dec_label_pc_149f8

dec_label_pc_149f8:                               ; preds = %dec_label_pc_149f0
  br i1 %v9_149f0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_149f8
  %merge = phi i32 [ %v0_149f0, %dec_label_pc_149f8 ], [ %v2_14cd8, %bb150 ], [ %v11_14cf4, %bb153 ], [ %v7_14cf4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_149f8
  %v5_149fc = inttoptr i32 %v1_149f0 to i8*
  store i8* %v5_149fc, i8** %stack_var_-8, align 4
  %v8_149fc = load i32, i32* @lr, align 4
  %v0_14a00 = load i32, i32* @r2, align 4
  %v2_14a00 = add i32 %v0_14a00, -4
  store i32 %v2_14a00, i32* %r2.global-to-local, align 4
  %v4_14a00 = sub i32 3, %v0_14a00
  %v5_14a00 = and i32 %v4_14a00, %v0_14a00
  %v6_14a00 = icmp slt i32 %v5_14a00, 0
  store i1 %v6_14a00, i1* %cpsr_v.global-to-local, align 1
  %v7_14a00 = icmp slt i32 %v2_14a00, 0
  store i1 %v7_14a00, i1* %cpsr_n.global-to-local, align 1
  %v8_14a00 = icmp eq i32 %v0_14a00, 4
  store i1 %v8_14a00, i1* %cpsr_z.global-to-local, align 1
  %v5_14a04 = icmp slt i32 %v0_14a00, 4
  br i1 %v5_14a04, label %bb140, label %dec_label_pc_14a08

dec_label_pc_14a08:                               ; preds = %bb
  %v1_14a08 = urem i32 %v1_149f0, 4
  store i32 %v1_14a08, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14a08 = icmp eq i32 %v1_14a08, 0
  store i1 %v2_14a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14a08, label %dec_label_pc_14a10, label %dec_label_pc_14abc

dec_label_pc_14a10:                               ; preds = %dec_label_pc_14a08
  %v1_14a10 = urem i32 %v0_149f0, 4
  store i32 %v1_14a10, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14a10 = icmp eq i32 %v1_14a10, 0
  store i1 %v2_14a10, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_149f0 to i2
  br i1 %v2_14a10, label %dec_label_pc_14a18, label %dec_label_pc_14aec

dec_label_pc_14a18:                               ; preds = %dec_label_pc_14a10, %dec_label_pc_14ae4
  %v0_14a3094 = phi i32 [ %v1_149f0, %dec_label_pc_14a10 ], [ %v0_14c0c77, %dec_label_pc_14ae4 ]
  %v0_14a2c93 = phi i32 [ %v0_149f0, %dec_label_pc_14a10 ], [ %v0_14ae4, %dec_label_pc_14ae4 ]
  %v0_14a18 = phi i32 [ %v2_14a00, %dec_label_pc_14a10 ], [ %v2_14adc, %dec_label_pc_14ae4 ]
  %v1_14a18 = add i32 %v0_14a18, -8
  store i32 %v1_14a18, i32* %r2.global-to-local, align 4
  %v3_14a18 = sub i32 7, %v0_14a18
  %v4_14a18 = and i32 %v3_14a18, %v0_14a18
  %v5_14a18 = icmp slt i32 %v4_14a18, 0
  store i1 %v5_14a18, i1* %cpsr_v.global-to-local, align 1
  %v6_14a18 = icmp slt i32 %v1_14a18, 0
  store i1 %v6_14a18, i1* %cpsr_n.global-to-local, align 1
  %v7_14a18 = icmp eq i32 %v0_14a18, 8
  store i1 %v7_14a18, i1* %cpsr_z.global-to-local, align 1
  %v2_14a1c = xor i1 %v6_14a18, %v5_14a18
  br i1 %v2_14a1c, label %dec_label_pc_14a6c, label %dec_label_pc_14a20

dec_label_pc_14a20:                               ; preds = %dec_label_pc_14a18
  %v1_14a20 = add i32 %v0_14a18, -28
  store i32 %v1_14a20, i32* %r2.global-to-local, align 4
  %v3_14a20 = sub i32 27, %v0_14a18
  %v4_14a20 = and i32 %v3_14a20, %v1_14a18
  %v5_14a20 = icmp slt i32 %v4_14a20, 0
  store i1 %v5_14a20, i1* %cpsr_v.global-to-local, align 1
  %v6_14a20 = icmp slt i32 %v1_14a20, 0
  store i1 %v6_14a20, i1* %cpsr_n.global-to-local, align 1
  %v7_14a20 = icmp eq i32 %v1_14a18, 20
  store i1 %v7_14a20, i1* %cpsr_z.global-to-local, align 1
  %v2_14a24 = xor i1 %v6_14a20, %v5_14a20
  br i1 %v2_14a24, label %dec_label_pc_14a58, label %dec_label_pc_14a28

dec_label_pc_14a28:                               ; preds = %dec_label_pc_14a20
  %v0_14a28 = load i32, i32* @r4, align 4
  store i32 %v0_14a28, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14a2c

dec_label_pc_14a2c:                               ; preds = %dec_label_pc_14a2c.dec_label_pc_14a2c_crit_edge, %dec_label_pc_14a28
  %v0_14a30 = phi i32 [ %v12_14a38, %dec_label_pc_14a2c.dec_label_pc_14a2c_crit_edge ], [ %v0_14a3094, %dec_label_pc_14a28 ]
  %v0_14a2c = phi i32 [ %v0_14a2c.pre, %dec_label_pc_14a2c.dec_label_pc_14a2c_crit_edge ], [ %v0_14a2c93, %dec_label_pc_14a28 ]
  %v1_14a2c = inttoptr i32 %v0_14a2c to i32*
  %v2_14a2c = load i32, i32* %v1_14a2c, align 4
  %v3_14a2c = add i32 %v0_14a2c, 4
  %v4_14a2c = inttoptr i32 %v3_14a2c to i32*
  %v5_14a2c = load i32, i32* %v4_14a2c, align 4
  store i32 %v5_14a2c, i32* %r4.global-to-local, align 4
  %v6_14a2c = add i32 %v0_14a2c, 8
  %v7_14a2c = inttoptr i32 %v6_14a2c to i32*
  %v8_14a2c = load i32, i32* %v7_14a2c, align 4
  store i32 %v8_14a2c, i32* %ip.global-to-local, align 4
  %v9_14a2c = add i32 %v0_14a2c, 12
  %v10_14a2c = inttoptr i32 %v9_14a2c to i32*
  %v11_14a2c = load i32, i32* %v10_14a2c, align 4
  store i32 %v11_14a2c, i32* %lr.global-to-local, align 4
  %v12_14a2c = add i32 %v0_14a2c, 16
  store i32 %v12_14a2c, i32* %r1.global-to-local, align 4
  %v1_14a30 = inttoptr i32 %v0_14a30 to i32*
  store i32 %v2_14a2c, i32* %v1_14a30, align 4
  %v3_14a30 = add i32 %v0_14a30, 4
  %v4_14a30 = inttoptr i32 %v3_14a30 to i32*
  %v5_14a30 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14a30, i32* %v4_14a30, align 4
  %v6_14a30 = add i32 %v0_14a30, 8
  %v7_14a30 = inttoptr i32 %v6_14a30 to i32*
  %v8_14a30 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14a30, i32* %v7_14a30, align 4
  %v9_14a30 = add i32 %v0_14a30, 12
  %v10_14a30 = inttoptr i32 %v9_14a30 to i32*
  %v11_14a30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14a30, i32* %v10_14a30, align 4
  %v12_14a30 = add i32 %v0_14a30, 16
  store i32 %v12_14a30, i32* %r0.global-to-local, align 4
  %v0_14a34 = load i32, i32* %r1.global-to-local, align 4
  %v1_14a34 = inttoptr i32 %v0_14a34 to i32*
  %v2_14a34 = load i32, i32* %v1_14a34, align 4
  store i32 %v2_14a34, i32* @r3, align 4
  %v3_14a34 = add i32 %v0_14a34, 4
  %v4_14a34 = inttoptr i32 %v3_14a34 to i32*
  %v5_14a34 = load i32, i32* %v4_14a34, align 4
  store i32 %v5_14a34, i32* %r4.global-to-local, align 4
  %v6_14a34 = add i32 %v0_14a34, 8
  %v7_14a34 = inttoptr i32 %v6_14a34 to i32*
  %v8_14a34 = load i32, i32* %v7_14a34, align 4
  store i32 %v8_14a34, i32* @ip, align 4
  %v9_14a34 = add i32 %v0_14a34, 12
  %v10_14a34 = inttoptr i32 %v9_14a34 to i32*
  %v11_14a34 = load i32, i32* %v10_14a34, align 4
  store i32 %v11_14a34, i32* %lr.global-to-local, align 4
  %v12_14a34 = add i32 %v0_14a34, 16
  store i32 %v12_14a34, i32* @r1, align 4
  %v1_14a38 = inttoptr i32 %v12_14a30 to i32*
  store i32 %v2_14a34, i32* %v1_14a38, align 4
  %v3_14a38 = add i32 %v0_14a30, 20
  %v4_14a38 = inttoptr i32 %v3_14a38 to i32*
  %v5_14a38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14a38, i32* %v4_14a38, align 4
  %v6_14a38 = add i32 %v0_14a30, 24
  %v7_14a38 = inttoptr i32 %v6_14a38 to i32*
  %v8_14a38 = load i32, i32* @ip, align 4
  store i32 %v8_14a38, i32* %v7_14a38, align 4
  %v9_14a38 = add i32 %v0_14a30, 28
  %v10_14a38 = inttoptr i32 %v9_14a38 to i32*
  %v11_14a38 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14a38, i32* %v10_14a38, align 4
  %v12_14a38 = add i32 %v0_14a30, 32
  store i32 %v12_14a38, i32* @r0, align 4
  %v0_14a3c = load i32, i32* %r2.global-to-local, align 4
  %v1_14a3c = add i32 %v0_14a3c, -32
  store i32 %v1_14a3c, i32* %r2.global-to-local, align 4
  %v3_14a3c = sub i32 31, %v0_14a3c
  %v4_14a3c = and i32 %v3_14a3c, %v0_14a3c
  %v5_14a3c = icmp slt i32 %v4_14a3c, 0
  %v6_14a3c = icmp slt i32 %v1_14a3c, 0
  %v2_14a40 = xor i1 %v6_14a3c, %v5_14a3c
  br i1 %v2_14a40, label %dec_label_pc_14a44, label %dec_label_pc_14a2c.dec_label_pc_14a2c_crit_edge

dec_label_pc_14a2c.dec_label_pc_14a2c_crit_edge:  ; preds = %dec_label_pc_14a2c
  %v0_14a2c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_14a2c

dec_label_pc_14a44:                               ; preds = %dec_label_pc_14a2c
  %v1_14a44 = add i32 %v0_14a3c, -16
  %v3_14a44 = add i32 %v0_14a3c, 2147483616
  %v4_14a44 = and i32 %v1_14a44, %v3_14a44
  %v5_14a44 = icmp slt i32 %v4_14a44, 0
  store i1 %v5_14a44, i1* %cpsr_v.global-to-local, align 1
  %v6_14a44 = icmp slt i32 %v1_14a44, 0
  store i1 %v6_14a44, i1* %cpsr_n.global-to-local, align 1
  %v7_14a44 = icmp eq i32 %v1_14a44, 0
  store i1 %v7_14a44, i1* %cpsr_z.global-to-local, align 1
  %v2_14a48 = xor i1 %v6_14a44, %v5_14a44
  br i1 %v2_14a48, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_14a44
  %v3_14a48 = load i32, i32* @r1, align 4
  %v4_14a48 = inttoptr i32 %v3_14a48 to i32*
  %v5_14a48 = load i32, i32* %v4_14a48, align 4
  store i32 %v5_14a48, i32* @r3, align 4
  %v6_14a48 = add i32 %v3_14a48, 4
  %v7_14a48 = inttoptr i32 %v6_14a48 to i32*
  %v8_14a48 = load i32, i32* %v7_14a48, align 4
  store i32 %v8_14a48, i32* %r4.global-to-local, align 4
  %v9_14a48 = add i32 %v3_14a48, 8
  %v10_14a48 = inttoptr i32 %v9_14a48 to i32*
  %v11_14a48 = load i32, i32* %v10_14a48, align 4
  store i32 %v11_14a48, i32* @ip, align 4
  %v12_14a48 = add i32 %v3_14a48, 12
  %v13_14a48 = inttoptr i32 %v12_14a48 to i32*
  %v14_14a48 = load i32, i32* %v13_14a48, align 4
  store i32 %v14_14a48, i32* %lr.global-to-local, align 4
  %v15_14a48 = add i32 %v3_14a48, 16
  store i32 %v15_14a48, i32* @r1, align 4
  %v4_14a4c = inttoptr i32 %v12_14a38 to i32*
  store i32 %v5_14a48, i32* %v4_14a4c, align 4
  %v6_14a4c = add i32 %v0_14a30, 36
  %v7_14a4c = inttoptr i32 %v6_14a4c to i32*
  %v8_14a4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_14a4c, i32* %v7_14a4c, align 4
  %v9_14a4c = add i32 %v0_14a30, 40
  %v10_14a4c = inttoptr i32 %v9_14a4c to i32*
  %v11_14a4c = load i32, i32* @ip, align 4
  store i32 %v11_14a4c, i32* %v10_14a4c, align 4
  %v12_14a4c = add i32 %v0_14a30, 44
  %v13_14a4c = inttoptr i32 %v12_14a4c to i32*
  %v14_14a4c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_14a4c, i32* %v13_14a4c, align 4
  %v15_14a4c = add i32 %v0_14a30, 48
  store i32 %v15_14a4c, i32* @r0, align 4
  %v3_14a50 = load i32, i32* %r2.global-to-local, align 4
  %v4_14a50 = add i32 %v3_14a50, -16
  store i32 %v4_14a50, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_14a44, %bb136
  %v3_14a60102111 = phi i32 [ %v15_14a4c, %bb136 ], [ %v12_14a38, %dec_label_pc_14a44 ]
  %v0_14a58.pre = phi i32 [ %v4_14a50, %bb136 ], [ %v1_14a3c, %dec_label_pc_14a44 ]
  %v2_14a54 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14a54, i32* @r4, align 4
  br label %dec_label_pc_14a58

dec_label_pc_14a58:                               ; preds = %dec_label_pc_14a20, %bb137
  %v3_14a60101 = phi i32 [ %v0_14a3094, %dec_label_pc_14a20 ], [ %v3_14a60102111, %bb137 ]
  %v0_14a58 = phi i32 [ %v1_14a20, %dec_label_pc_14a20 ], [ %v0_14a58.pre, %bb137 ]
  %v1_14a58 = add i32 %v0_14a58, 20
  store i32 %v1_14a58, i32* %r2.global-to-local, align 4
  %v3_14a58 = sub i32 0, %v0_14a58
  %v4_14a58 = and i32 %v1_14a58, %v3_14a58
  %v5_14a58 = icmp slt i32 %v4_14a58, 0
  store i1 %v5_14a58, i1* %cpsr_v.global-to-local, align 1
  %v6_14a58 = icmp slt i32 %v1_14a58, 0
  store i1 %v6_14a58, i1* %cpsr_n.global-to-local, align 1
  %v7_14a58 = icmp eq i32 %v1_14a58, 0
  store i1 %v7_14a58, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14a5c

dec_label_pc_14a5c:                               ; preds = %.thread115, %dec_label_pc_14a58
  %v0_14a6c.pre157 = phi i32 [ %v0_14a6c.pre, %.thread115 ], [ %v1_14a58, %dec_label_pc_14a58 ]
  %v3_14a60 = phi i32 [ %v3_14a6099116, %.thread115 ], [ %v3_14a60101, %dec_label_pc_14a58 ]
  %v1_14a64 = phi i1 [ %v1_14a68, %.thread115 ], [ %v5_14a58, %dec_label_pc_14a58 ]
  %v0_14a64 = phi i1 [ %v0_14a68, %.thread115 ], [ %v6_14a58, %dec_label_pc_14a58 ]
  %v2_14a5c = xor i1 %v1_14a64, %v0_14a64
  br i1 %v2_14a5c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_14a5c
  %v3_14a5c = load i32, i32* @r1, align 4
  %v4_14a5c = inttoptr i32 %v3_14a5c to i32*
  %v5_14a5c = load i32, i32* %v4_14a5c, align 4
  store i32 %v5_14a5c, i32* @r3, align 4
  %v6_14a5c = add i32 %v3_14a5c, 4
  %v7_14a5c = inttoptr i32 %v6_14a5c to i32*
  %v8_14a5c = load i32, i32* %v7_14a5c, align 4
  store i32 %v8_14a5c, i32* @ip, align 4
  %v9_14a5c = add i32 %v3_14a5c, 8
  %v10_14a5c = inttoptr i32 %v9_14a5c to i32*
  %v11_14a5c = load i32, i32* %v10_14a5c, align 4
  store i32 %v11_14a5c, i32* %lr.global-to-local, align 4
  %v12_14a5c = add i32 %v3_14a5c, 12
  store i32 %v12_14a5c, i32* @r1, align 4
  %v4_14a60 = inttoptr i32 %v3_14a60 to i32*
  store i32 %v5_14a5c, i32* %v4_14a60, align 4
  %v6_14a60 = add i32 %v3_14a60, 4
  %v7_14a60 = inttoptr i32 %v6_14a60 to i32*
  %v8_14a60 = load i32, i32* @ip, align 4
  store i32 %v8_14a60, i32* %v7_14a60, align 4
  %v9_14a60 = add i32 %v3_14a60, 8
  %v10_14a60 = inttoptr i32 %v9_14a60 to i32*
  %v11_14a60 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14a60, i32* %v10_14a60, align 4
  %v12_14a60 = add i32 %v3_14a60, 12
  store i32 %v12_14a60, i32* @r0, align 4
  %v3_14a64 = load i32, i32* %r2.global-to-local, align 4
  %v4_14a64 = add i32 %v3_14a64, -12
  store i32 %v4_14a64, i32* %r2.global-to-local, align 4
  %v6_14a64 = sub i32 11, %v3_14a64
  %v7_14a64 = and i32 %v6_14a64, %v3_14a64
  %v8_14a64 = icmp slt i32 %v7_14a64, 0
  store i1 %v8_14a64, i1* %cpsr_v.global-to-local, align 1
  %v9_14a64 = icmp slt i32 %v4_14a64, 0
  store i1 %v9_14a64, i1* %cpsr_n.global-to-local, align 1
  %v10_14a64 = icmp eq i32 %v3_14a64, 12
  store i1 %v10_14a64, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_14a5c, %bb138
  %v0_14a6c.pre = phi i32 [ %v4_14a64, %bb138 ], [ %v0_14a6c.pre157, %dec_label_pc_14a5c ]
  %v3_14a6099116 = phi i32 [ %v12_14a60, %bb138 ], [ %v3_14a60, %dec_label_pc_14a5c ]
  %v1_14a68 = phi i1 [ %v8_14a64, %bb138 ], [ %v1_14a64, %dec_label_pc_14a5c ]
  %v0_14a68 = phi i1 [ %v9_14a64, %bb138 ], [ %v0_14a64, %dec_label_pc_14a5c ]
  %v2_14a68 = xor i1 %v1_14a68, %v0_14a68
  br i1 %v2_14a68, label %dec_label_pc_14a6c, label %dec_label_pc_14a5c

dec_label_pc_14a6c:                               ; preds = %.thread115, %dec_label_pc_14a18
  %v4_14a7c = phi i32 [ %v0_14a3094, %dec_label_pc_14a18 ], [ %v3_14a6099116, %.thread115 ]
  %v0_14a6c = phi i32 [ %v1_14a18, %dec_label_pc_14a18 ], [ %v0_14a6c.pre, %.thread115 ]
  %v1_14a6c = add i32 %v0_14a6c, 8
  store i32 %v1_14a6c, i32* %r2.global-to-local, align 4
  %v3_14a6c = sub i32 0, %v0_14a6c
  %v4_14a6c = and i32 %v1_14a6c, %v3_14a6c
  %v5_14a6c = icmp slt i32 %v4_14a6c, 0
  store i1 %v5_14a6c, i1* %cpsr_v.global-to-local, align 1
  %v6_14a6c = icmp slt i32 %v1_14a6c, 0
  store i1 %v6_14a6c, i1* %cpsr_n.global-to-local, align 1
  %v7_14a6c = icmp eq i32 %v1_14a6c, 0
  store i1 %v7_14a6c, i1* %cpsr_z.global-to-local, align 1
  %v2_14a70 = xor i1 %v6_14a6c, %v5_14a6c
  br i1 %v2_14a70, label %bb140, label %dec_label_pc_14a74

dec_label_pc_14a74:                               ; preds = %dec_label_pc_14a6c
  %v1_14a74 = add i32 %v0_14a6c, 4
  store i32 %v1_14a74, i32* %r2.global-to-local, align 4
  %v3_14a74 = sub i32 -5, %v0_14a6c
  %v4_14a74 = and i32 %v3_14a74, %v1_14a6c
  %v5_14a74 = icmp slt i32 %v4_14a74, 0
  store i1 %v5_14a74, i1* %cpsr_v.global-to-local, align 1
  %v6_14a74 = icmp slt i32 %v1_14a74, 0
  store i1 %v6_14a74, i1* %cpsr_n.global-to-local, align 1
  %v7_14a74 = icmp eq i32 %v1_14a6c, 4
  store i1 %v7_14a74, i1* %cpsr_z.global-to-local, align 1
  %v2_14a78 = xor i1 %v6_14a74, %v5_14a74
  %v3_14a78 = load i32, i32* @r1, align 4
  %v4_14a78 = inttoptr i32 %v3_14a78 to i32*
  %v5_14a78 = load i32, i32* %v4_14a78, align 4
  store i32 %v5_14a78, i32* @r3, align 4
  %v7_14a78 = add i32 %v3_14a78, 4
  br i1 %v2_14a78, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_14a74
  store i32 %v7_14a78, i32* @r1, align 4
  %v5_14a7c = inttoptr i32 %v4_14a7c to i32*
  store i32 %v5_14a78, i32* %v5_14a7c, align 4
  %v6_14a7c = load i32, i32* @r0, align 4
  %v7_14a7c = add i32 %v6_14a7c, 4
  store i32 %v7_14a7c, i32* @r0, align 4
  %v0_14a8c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_14a74
  %v7_14a80 = inttoptr i32 %v7_14a78 to i32*
  %v8_14a80 = load i32, i32* %v7_14a80, align 4
  store i32 %v8_14a80, i32* @ip, align 4
  %v9_14a80 = add i32 %v3_14a78, 8
  store i32 %v9_14a80, i32* @r1, align 4
  %v4_14a84 = inttoptr i32 %v4_14a7c to i32*
  store i32 %v5_14a78, i32* %v4_14a84, align 4
  %v6_14a84 = add i32 %v4_14a7c, 4
  %v7_14a84 = inttoptr i32 %v6_14a84 to i32*
  %v8_14a84 = load i32, i32* @ip, align 4
  store i32 %v8_14a84, i32* %v7_14a84, align 4
  %v9_14a84 = add i32 %v4_14a7c, 8
  store i32 %v9_14a84, i32* @r0, align 4
  %v3_14a88 = load i32, i32* %r2.global-to-local, align 4
  %v4_14a88 = add i32 %v3_14a88, -4
  store i32 %v4_14a88, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_14a6c, %bb, %dec_label_pc_14c3c, %dec_label_pc_14bd0, %dec_label_pc_14b64, %bb139
  %v0_14a8c = phi i32 [ %v0_14a8c.pre, %.thread122 ], [ %v2_14adc, %.thread128 ], [ %v1_14a6c, %dec_label_pc_14a6c ], [ %v2_14a00, %bb ], [ %v0_14a8c61, %dec_label_pc_14c3c ], [ %v0_14a8c60, %dec_label_pc_14bd0 ], [ %v0_14a8c59, %dec_label_pc_14b64 ], [ %v4_14a88, %bb139 ]
  %v1_14a8c = add i32 %v0_14a8c, 4
  store i32 %v1_14a8c, i32* %r2.global-to-local, align 4
  %v3_14a8c = sub i32 0, %v0_14a8c
  %v4_14a8c = and i32 %v1_14a8c, %v3_14a8c
  %v5_14a8c = icmp slt i32 %v4_14a8c, 0
  store i1 %v5_14a8c, i1* %cpsr_v.global-to-local, align 1
  %v6_14a8c = icmp slt i32 %v1_14a8c, 0
  store i1 %v6_14a8c, i1* %cpsr_n.global-to-local, align 1
  %v7_14a8c = icmp eq i32 %v1_14a8c, 0
  store i1 %v7_14a8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14a8c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_14a94.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_14a90 = load i8*, i8** %stack_var_-8, align 4
  %v4_14a90 = ptrtoint i8* %v3_14a90 to i32
  store i32 %v4_14a90, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_14a94 = phi i32 [ %v0_14a94.pre, %bb140.bb142_crit_edge ], [ %v8_149fc, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_14a8c, i32 %v0_14a94)
  %v0_14a98 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a98 = add i32 %v0_14a98, -2
  %v3_14a98 = sub i32 1, %v0_14a98
  %v4_14a98 = and i32 %v3_14a98, %v0_14a98
  %v5_14a98 = icmp slt i32 %v4_14a98, 0
  store i1 %v5_14a98, i1* %cpsr_v.global-to-local, align 1
  %v6_14a98 = icmp slt i32 %v1_14a98, 0
  store i1 %v6_14a98, i1* %cpsr_n.global-to-local, align 1
  %v7_14a98 = icmp eq i32 %v0_14a98, 2
  store i1 %v7_14a98, i1* %cpsr_z.global-to-local, align 1
  %v0_14a9c = load i32, i32* @r1, align 4
  %v1_14a9c = inttoptr i32 %v0_14a9c to i8*
  %v2_14a9c = load i8, i8* %v1_14a9c, align 1
  %v5_14a9c = add i32 %v0_14a9c, 1
  store i32 %v5_14a9c, i32* %r1.global-to-local, align 4
  %v2_14aa0 = load i32, i32* @r0, align 4
  %v3_14aa0 = inttoptr i32 %v2_14aa0 to i8*
  store i8 %v2_14a9c, i8* %v3_14aa0, align 1
  %v4_14aa0 = load i32, i32* @r0, align 4
  %v5_14aa0 = add i32 %v4_14aa0, 1
  store i32 %v5_14aa0, i32* %r0.global-to-local, align 4
  %v0_14aa4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14aa4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14aa4 = xor i1 %v0_14aa4, %v1_14aa4
  br i1 %v2_14aa4, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_14aa4 = load i32, i32* %r1.global-to-local, align 4
  %v4_14aa4 = inttoptr i32 %v3_14aa4 to i8*
  %v5_14aa4 = load i8, i8* %v4_14aa4, align 1
  %v8_14aa4 = add i32 %v3_14aa4, 1
  store i32 %v8_14aa4, i32* %r1.global-to-local, align 4
  %v6_14aa8 = inttoptr i32 %v5_14aa0 to i8*
  store i8 %v5_14aa4, i8* %v6_14aa8, align 1
  %v7_14aa8 = load i32, i32* %r0.global-to-local, align 4
  %v8_14aa8 = add i32 %v7_14aa8, 1
  store i32 %v8_14aa8, i32* %r0.global-to-local, align 4
  %v1_14aac.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14aac.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_14ab0 = phi i32 [ %v8_14aa8, %bb143 ], [ %v5_14aa0, %bb142 ]
  %v2_14ab0 = phi i1 [ %v2_14aac.pre, %bb143 ], [ %v1_14aa4, %bb142 ]
  %v1_14ab0 = phi i1 [ %v1_14aac.pre, %bb143 ], [ %v0_14aa4, %bb142 ]
  %v0_14aac = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14aac = xor i1 %v2_14ab0, %v1_14ab0
  %v4_14aac = or i1 %v0_14aac, %v3_14aac
  br i1 %v4_14aac, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_14aac = load i32, i32* %r1.global-to-local, align 4
  %v6_14aac = inttoptr i32 %v5_14aac to i8*
  %v7_14aac = load i8, i8* %v6_14aac, align 1
  %v10_14aac = add i32 %v5_14aac, 1
  store i32 %v10_14aac, i32* %r1.global-to-local, align 4
  %v8_14ab0 = inttoptr i32 %v7_14ab0 to i8*
  store i8 %v7_14aac, i8* %v8_14ab0, align 1
  %v9_14ab0 = load i32, i32* %r0.global-to-local, align 4
  %v10_14ab0 = add i32 %v9_14ab0, 1
  store i32 %v10_14ab0, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_14ab4 = load i8*, i8** %stack_var_-8, align 4
  %v3_14ab4 = ptrtoint i8* %v2_14ab4 to i32
  store i32 %v3_14ab4, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_149fc)
  %v0_14abc.pre = load i32, i32* @ip, align 4
  %v0_14ac4.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_14ac8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_14abc

dec_label_pc_14abc:                               ; preds = %dec_label_pc_14a08, %.thread126
  %v2_14ac8 = phi i32 [ %v1_149f0, %dec_label_pc_14a08 ], [ %v2_14ac8.pre, %.thread126 ]
  %v0_14ac4 = phi i32 [ %v0_149f0, %dec_label_pc_14a08 ], [ %v0_14ac4.pre, %.thread126 ]
  %v0_14abc = phi i32 [ %v1_14a08, %dec_label_pc_14a08 ], [ %v0_14abc.pre, %.thread126 ]
  %v1_14abc = sub i32 4, %v0_14abc
  store i32 %v1_14abc, i32* @ip, align 4
  %v1_14ac0 = add i32 %v1_14abc, -2
  %v3_14ac0 = sub i32 1, %v1_14abc
  %v4_14ac0 = and i32 %v3_14ac0, %v1_14abc
  %v5_14ac0 = icmp slt i32 %v4_14ac0, 0
  store i1 %v5_14ac0, i1* %cpsr_v.global-to-local, align 1
  %v6_14ac0 = icmp slt i32 %v1_14ac0, 0
  store i1 %v6_14ac0, i1* %cpsr_n.global-to-local, align 1
  %v7_14ac0 = icmp eq i32 %v1_14abc, 2
  store i1 %v7_14ac0, i1* %cpsr_z.global-to-local, align 1
  %v1_14ac4 = inttoptr i32 %v0_14ac4 to i8*
  %v2_14ac4 = load i8, i8* %v1_14ac4, align 1
  %v3_14ac4 = zext i8 %v2_14ac4 to i32
  store i32 %v3_14ac4, i32* @r3, align 4
  %v5_14ac4 = add i32 %v0_14ac4, 1
  store i32 %v5_14ac4, i32* @r1, align 4
  %v3_14ac8 = inttoptr i32 %v2_14ac8 to i8*
  store i8 %v2_14ac4, i8* %v3_14ac8, align 1
  %v4_14ac8 = load i32, i32* @r0, align 4
  %v5_14ac8 = add i32 %v4_14ac8, 1
  store i32 %v5_14ac8, i32* @r0, align 4
  %v0_14acc = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14acc = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14acc = xor i1 %v0_14acc, %v1_14acc
  br i1 %v2_14acc, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_14abc
  %v3_14acc = load i32, i32* @r1, align 4
  %v4_14acc = inttoptr i32 %v3_14acc to i8*
  %v5_14acc = load i8, i8* %v4_14acc, align 1
  %v6_14acc = zext i8 %v5_14acc to i32
  store i32 %v6_14acc, i32* @r3, align 4
  %v8_14acc = add i32 %v3_14acc, 1
  store i32 %v8_14acc, i32* @r1, align 4
  %v6_14ad0 = inttoptr i32 %v5_14ac8 to i8*
  store i8 %v5_14acc, i8* %v6_14ad0, align 1
  %v7_14ad0 = load i32, i32* @r0, align 4
  %v8_14ad0 = add i32 %v7_14ad0, 1
  store i32 %v8_14ad0, i32* @r0, align 4
  %v1_14ad4.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14ad4.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_14abc, %bb145
  %v7_14ad8 = phi i32 [ %v8_14ad0, %bb145 ], [ %v5_14ac8, %dec_label_pc_14abc ]
  %v2_14ad8 = phi i1 [ %v2_14ad4.pre, %bb145 ], [ %v1_14acc, %dec_label_pc_14abc ]
  %v1_14ad8 = phi i1 [ %v1_14ad4.pre, %bb145 ], [ %v0_14acc, %dec_label_pc_14abc ]
  %v0_14ad4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14ad4 = xor i1 %v2_14ad8, %v1_14ad8
  %v4_14ad4 = or i1 %v0_14ad4, %v3_14ad4
  br i1 %v4_14ad4, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_14ad4 = load i32, i32* @r1, align 4
  %v6_14ad4 = inttoptr i32 %v5_14ad4 to i8*
  %v7_14ad4 = load i8, i8* %v6_14ad4, align 1
  %v8_14ad4 = zext i8 %v7_14ad4 to i32
  store i32 %v8_14ad4, i32* @r3, align 4
  %v10_14ad4 = add i32 %v5_14ad4, 1
  store i32 %v10_14ad4, i32* @r1, align 4
  %v8_14ad8 = inttoptr i32 %v7_14ad8 to i8*
  store i8 %v7_14ad4, i8* %v8_14ad8, align 1
  %v9_14ad8 = load i32, i32* @r0, align 4
  %v10_14ad8 = add i32 %v9_14ad8, 1
  store i32 %v10_14ad8, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_14c0c77 = phi i32 [ %v10_14ad8, %bb146 ], [ %v7_14ad8, %.thread127 ]
  %v0_14adc = load i32, i32* %r2.global-to-local, align 4
  %v1_14adc = load i32, i32* @ip, align 4
  %v2_14adc = sub i32 %v0_14adc, %v1_14adc
  store i32 %v2_14adc, i32* %r2.global-to-local, align 4
  %v4_14adc = xor i32 %v1_14adc, %v0_14adc
  %v5_14adc = xor i32 %v2_14adc, %v0_14adc
  %v6_14adc = and i32 %v5_14adc, %v4_14adc
  %v7_14adc = icmp slt i32 %v6_14adc, 0
  store i1 %v7_14adc, i1* %cpsr_v.global-to-local, align 1
  %v8_14adc = icmp slt i32 %v2_14adc, 0
  store i1 %v8_14adc, i1* %cpsr_n.global-to-local, align 1
  %v9_14adc = icmp eq i32 %v0_14adc, %v1_14adc
  store i1 %v9_14adc, i1* %cpsr_z.global-to-local, align 1
  %v2_14ae0 = xor i1 %v8_14adc, %v7_14adc
  br i1 %v2_14ae0, label %bb140, label %dec_label_pc_14ae4

dec_label_pc_14ae4:                               ; preds = %.thread128
  %v0_14ae4 = load i32, i32* @r1, align 4
  %v1_14ae4 = urem i32 %v0_14ae4, 4
  store i32 %v1_14ae4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14ae4 = icmp eq i32 %v1_14ae4, 0
  store i1 %v2_14ae4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_14ae4 to i2
  br i1 %v2_14ae4, label %dec_label_pc_14a18, label %dec_label_pc_14aec

dec_label_pc_14aec:                               ; preds = %dec_label_pc_14a10, %dec_label_pc_14ae4
  %v0_14c0c76 = phi i32 [ %v1_149f0, %dec_label_pc_14a10 ], [ %v0_14c0c77, %dec_label_pc_14ae4 ]
  %v0_14b74 = phi i32 [ %v2_14a00, %dec_label_pc_14a10 ], [ %v2_14adc, %dec_label_pc_14ae4 ]
  %v0_14af4.off0 = phi i2 [ %extract.t, %dec_label_pc_14a10 ], [ %extract.t131, %dec_label_pc_14ae4 ]
  %v0_14aec = phi i32 [ %v0_149f0, %dec_label_pc_14a10 ], [ %v0_14ae4, %dec_label_pc_14ae4 ]
  %v1_14aec = and i32 %v0_14aec, -4
  store i32 %v1_14aec, i32* %r1.global-to-local, align 4
  %v1_14af0 = inttoptr i32 %v1_14aec to i32*
  %v2_14af0 = load i32, i32* %v1_14af0, align 4
  store i32 %v2_14af0, i32* %lr.global-to-local, align 4
  %v4_14af0 = add i32 %v1_14aec, 4
  store i32 %v4_14af0, i32* %r1.global-to-local, align 4
  %v1_14b6c = add i32 %v0_14b74, -12
  %v3_14b6c = sub i32 11, %v0_14b74
  %v4_14b6c = and i32 %v3_14b6c, %v0_14b74
  %v5_14b6c = icmp slt i32 %v4_14b6c, 0
  store i1 %v5_14b6c, i1* %cpsr_v.global-to-local, align 1
  %v6_14b6c = icmp slt i32 %v1_14b6c, 0
  store i1 %v6_14b6c, i1* %cpsr_n.global-to-local, align 1
  %v7_14b6c = icmp eq i32 %v0_14b74, 12
  store i1 %v7_14b6c, i1* %cpsr_z.global-to-local, align 1
  %v2_14b70 = xor i1 %v6_14b6c, %v5_14b6c
  switch i2 %v0_14af4.off0, label %dec_label_pc_14b00 [
    i2 -1, label %dec_label_pc_14bd8
    i2 -2, label %dec_label_pc_14b6c
  ]

dec_label_pc_14b00:                               ; preds = %dec_label_pc_14aec
  br i1 %v2_14b70, label %dec_label_pc_14b4c, label %dec_label_pc_14b08

dec_label_pc_14b08:                               ; preds = %dec_label_pc_14b00
  store i32 %v1_14b6c, i32* %r2.global-to-local, align 4
  %v3_14b0c = load i32, i32* @r4, align 4
  store i32 %v3_14b0c, i32* %stack_var_-16, align 4
  %v6_14b0c = load i32, i32* @r5, align 4
  store i32 %v6_14b0c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14b10

dec_label_pc_14b10:                               ; preds = %dec_label_pc_14b10.dec_label_pc_14b10_crit_edge, %dec_label_pc_14b08
  %v0_14b34 = phi i32 [ %v12_14b34, %dec_label_pc_14b10.dec_label_pc_14b10_crit_edge ], [ %v0_14c0c76, %dec_label_pc_14b08 ]
  %v0_14b14 = phi i32 [ %v0_14b14.pre, %dec_label_pc_14b10.dec_label_pc_14b10_crit_edge ], [ %v4_14af0, %dec_label_pc_14b08 ]
  %v0_14b10 = phi i32 [ %v0_14b10.pre, %dec_label_pc_14b10.dec_label_pc_14b10_crit_edge ], [ %v2_14af0, %dec_label_pc_14b08 ]
  %v3_14b10 = udiv i32 %v0_14b10, 256
  %v1_14b14 = inttoptr i32 %v0_14b14 to i32*
  %v2_14b14 = load i32, i32* %v1_14b14, align 4
  store i32 %v2_14b14, i32* %r4.global-to-local, align 4
  %v3_14b14 = add i32 %v0_14b14, 4
  %v4_14b14 = inttoptr i32 %v3_14b14 to i32*
  %v5_14b14 = load i32, i32* %v4_14b14, align 4
  store i32 %v5_14b14, i32* %r5.global-to-local, align 4
  %v6_14b14 = add i32 %v0_14b14, 8
  %v7_14b14 = inttoptr i32 %v6_14b14 to i32*
  %v8_14b14 = load i32, i32* %v7_14b14, align 4
  store i32 %v8_14b14, i32* %ip.global-to-local, align 4
  %v9_14b14 = add i32 %v0_14b14, 12
  %v10_14b14 = inttoptr i32 %v9_14b14 to i32*
  %v11_14b14 = load i32, i32* %v10_14b14, align 4
  store i32 %v11_14b14, i32* %lr.global-to-local, align 4
  %v12_14b14 = add i32 %v0_14b14, 16
  store i32 %v12_14b14, i32* %r1.global-to-local, align 4
  %v4_14b18 = mul i32 %v2_14b14, 16777216
  %v5_14b18 = or i32 %v4_14b18, %v3_14b10
  store i32 %v5_14b18, i32* @r3, align 4
  %v3_14b1c = udiv i32 %v2_14b14, 256
  %v4_14b20 = mul i32 %v5_14b14, 16777216
  %v5_14b20 = or i32 %v4_14b20, %v3_14b1c
  store i32 %v5_14b20, i32* %r4.global-to-local, align 4
  %v3_14b24 = udiv i32 %v5_14b14, 256
  %v4_14b28 = mul i32 %v8_14b14, 16777216
  %v5_14b28 = or i32 %v4_14b28, %v3_14b24
  store i32 %v5_14b28, i32* %r5.global-to-local, align 4
  %v3_14b2c = udiv i32 %v8_14b14, 256
  %v4_14b30 = mul i32 %v11_14b14, 16777216
  %v5_14b30 = or i32 %v4_14b30, %v3_14b2c
  store i32 %v5_14b30, i32* @ip, align 4
  %v1_14b34 = inttoptr i32 %v0_14b34 to i32*
  store i32 %v5_14b18, i32* %v1_14b34, align 4
  %v3_14b34 = add i32 %v0_14b34, 4
  %v4_14b34 = inttoptr i32 %v3_14b34 to i32*
  %v5_14b34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14b34, i32* %v4_14b34, align 4
  %v6_14b34 = add i32 %v0_14b34, 8
  %v7_14b34 = inttoptr i32 %v6_14b34 to i32*
  %v8_14b34 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14b34, i32* %v7_14b34, align 4
  %v9_14b34 = add i32 %v0_14b34, 12
  %v10_14b34 = inttoptr i32 %v9_14b34 to i32*
  %v11_14b34 = load i32, i32* @ip, align 4
  store i32 %v11_14b34, i32* %v10_14b34, align 4
  %v12_14b34 = add i32 %v0_14b34, 16
  store i32 %v12_14b34, i32* @r0, align 4
  %v0_14b38 = load i32, i32* %r2.global-to-local, align 4
  %v1_14b38 = add i32 %v0_14b38, -16
  store i32 %v1_14b38, i32* %r2.global-to-local, align 4
  %v3_14b38 = sub i32 15, %v0_14b38
  %v4_14b38 = and i32 %v3_14b38, %v0_14b38
  %v5_14b38 = icmp slt i32 %v4_14b38, 0
  %v6_14b38 = icmp slt i32 %v1_14b38, 0
  %v2_14b3c = xor i1 %v6_14b38, %v5_14b38
  br i1 %v2_14b3c, label %dec_label_pc_14b40, label %dec_label_pc_14b10.dec_label_pc_14b10_crit_edge

dec_label_pc_14b10.dec_label_pc_14b10_crit_edge:  ; preds = %dec_label_pc_14b10
  %v0_14b10.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_14b14.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b10

dec_label_pc_14b40:                               ; preds = %dec_label_pc_14b10
  %v2_14b40 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14b40, i32* @r4, align 4
  %v5_14b40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14b40, i32* @r5, align 4
  %v1_14b44 = add i32 %v0_14b38, -4
  store i32 %v1_14b44, i32* %r2.global-to-local, align 4
  %v3_14b44 = add i32 %v0_14b38, 2147483632
  %v4_14b44 = and i32 %v1_14b44, %v3_14b44
  %v5_14b44 = icmp slt i32 %v4_14b44, 0
  store i1 %v5_14b44, i1* %cpsr_v.global-to-local, align 1
  %v6_14b44 = icmp slt i32 %v1_14b44, 0
  store i1 %v6_14b44, i1* %cpsr_n.global-to-local, align 1
  %v7_14b44 = icmp eq i32 %v1_14b44, 0
  store i1 %v7_14b44, i1* %cpsr_z.global-to-local, align 1
  %v2_14b48 = xor i1 %v6_14b44, %v5_14b44
  br i1 %v2_14b48, label %dec_label_pc_14b64, label %dec_label_pc_14b4c

dec_label_pc_14b4c:                               ; preds = %dec_label_pc_14b40, %dec_label_pc_14b00, %dec_label_pc_14b4c
  %v1_14b58 = phi i32 [ %v4_14b58, %dec_label_pc_14b4c ], [ %v12_14b34, %dec_label_pc_14b40 ], [ %v0_14c0c76, %dec_label_pc_14b00 ]
  %v0_14b4c = load i32, i32* %lr.global-to-local, align 4
  %v3_14b4c = udiv i32 %v0_14b4c, 256
  store i32 %v3_14b4c, i32* %ip.global-to-local, align 4
  %v0_14b50 = load i32, i32* %r1.global-to-local, align 4
  %v1_14b50 = inttoptr i32 %v0_14b50 to i32*
  %v2_14b50 = load i32, i32* %v1_14b50, align 4
  store i32 %v2_14b50, i32* %lr.global-to-local, align 4
  %v4_14b50 = add i32 %v0_14b50, 4
  store i32 %v4_14b50, i32* %r1.global-to-local, align 4
  %v4_14b54 = mul i32 %v2_14b50, 16777216
  %v5_14b54 = or i32 %v4_14b54, %v3_14b4c
  store i32 %v5_14b54, i32* @ip, align 4
  %v2_14b58 = inttoptr i32 %v1_14b58 to i32*
  store i32 %v5_14b54, i32* %v2_14b58, align 4
  %v3_14b58 = load i32, i32* @r0, align 4
  %v4_14b58 = add i32 %v3_14b58, 4
  store i32 %v4_14b58, i32* @r0, align 4
  %v0_14b5c = load i32, i32* %r2.global-to-local, align 4
  %v1_14b5c = add i32 %v0_14b5c, -4
  store i32 %v1_14b5c, i32* %r2.global-to-local, align 4
  %v3_14b5c = sub i32 3, %v0_14b5c
  %v4_14b5c = and i32 %v3_14b5c, %v0_14b5c
  %v5_14b5c = icmp slt i32 %v4_14b5c, 0
  %v6_14b5c = icmp slt i32 %v1_14b5c, 0
  %v2_14b60 = xor i1 %v6_14b5c, %v5_14b5c
  br i1 %v2_14b60, label %dec_label_pc_14b64.loopexit, label %dec_label_pc_14b4c

dec_label_pc_14b64.loopexit:                      ; preds = %dec_label_pc_14b4c
  %v7_14b5c = icmp eq i32 %v0_14b5c, 4
  store i1 %v5_14b5c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_14b5c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_14b5c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14b64

dec_label_pc_14b64:                               ; preds = %dec_label_pc_14b64.loopexit, %dec_label_pc_14b40
  %v0_14a8c59 = phi i32 [ %v1_14b5c, %dec_label_pc_14b64.loopexit ], [ %v1_14b44, %dec_label_pc_14b40 ]
  %v0_14b64 = load i32, i32* %r1.global-to-local, align 4
  %v1_14b64 = add i32 %v0_14b64, -3
  store i32 %v1_14b64, i32* @r1, align 4
  br label %bb140

dec_label_pc_14b6c:                               ; preds = %dec_label_pc_14aec
  br i1 %v2_14b70, label %dec_label_pc_14bb8, label %dec_label_pc_14b74

dec_label_pc_14b74:                               ; preds = %dec_label_pc_14b6c
  store i32 %v1_14b6c, i32* %r2.global-to-local, align 4
  %v3_14b78 = load i32, i32* @r4, align 4
  store i32 %v3_14b78, i32* %stack_var_-16, align 4
  %v6_14b78 = load i32, i32* @r5, align 4
  store i32 %v6_14b78, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14b7c

dec_label_pc_14b7c:                               ; preds = %dec_label_pc_14b7c.dec_label_pc_14b7c_crit_edge, %dec_label_pc_14b74
  %v0_14ba0 = phi i32 [ %v12_14ba0, %dec_label_pc_14b7c.dec_label_pc_14b7c_crit_edge ], [ %v0_14c0c76, %dec_label_pc_14b74 ]
  %v0_14b80 = phi i32 [ %v0_14b80.pre, %dec_label_pc_14b7c.dec_label_pc_14b7c_crit_edge ], [ %v4_14af0, %dec_label_pc_14b74 ]
  %v0_14b7c = phi i32 [ %v0_14b7c.pre, %dec_label_pc_14b7c.dec_label_pc_14b7c_crit_edge ], [ %v2_14af0, %dec_label_pc_14b74 ]
  %v3_14b7c = udiv i32 %v0_14b7c, 65536
  %v1_14b80 = inttoptr i32 %v0_14b80 to i32*
  %v2_14b80 = load i32, i32* %v1_14b80, align 4
  store i32 %v2_14b80, i32* %r4.global-to-local, align 4
  %v3_14b80 = add i32 %v0_14b80, 4
  %v4_14b80 = inttoptr i32 %v3_14b80 to i32*
  %v5_14b80 = load i32, i32* %v4_14b80, align 4
  store i32 %v5_14b80, i32* %r5.global-to-local, align 4
  %v6_14b80 = add i32 %v0_14b80, 8
  %v7_14b80 = inttoptr i32 %v6_14b80 to i32*
  %v8_14b80 = load i32, i32* %v7_14b80, align 4
  store i32 %v8_14b80, i32* %ip.global-to-local, align 4
  %v9_14b80 = add i32 %v0_14b80, 12
  %v10_14b80 = inttoptr i32 %v9_14b80 to i32*
  %v11_14b80 = load i32, i32* %v10_14b80, align 4
  store i32 %v11_14b80, i32* %lr.global-to-local, align 4
  %v12_14b80 = add i32 %v0_14b80, 16
  store i32 %v12_14b80, i32* %r1.global-to-local, align 4
  %v4_14b84 = mul i32 %v2_14b80, 65536
  %v5_14b84 = or i32 %v4_14b84, %v3_14b7c
  store i32 %v5_14b84, i32* @r3, align 4
  %v3_14b88 = udiv i32 %v2_14b80, 65536
  %v4_14b8c = mul i32 %v5_14b80, 65536
  %v5_14b8c = or i32 %v4_14b8c, %v3_14b88
  store i32 %v5_14b8c, i32* %r4.global-to-local, align 4
  %v3_14b90 = udiv i32 %v5_14b80, 65536
  %v4_14b94 = mul i32 %v8_14b80, 65536
  %v5_14b94 = or i32 %v4_14b94, %v3_14b90
  store i32 %v5_14b94, i32* %r5.global-to-local, align 4
  %v3_14b98 = udiv i32 %v8_14b80, 65536
  %v4_14b9c = mul i32 %v11_14b80, 65536
  %v5_14b9c = or i32 %v4_14b9c, %v3_14b98
  store i32 %v5_14b9c, i32* @ip, align 4
  %v1_14ba0 = inttoptr i32 %v0_14ba0 to i32*
  store i32 %v5_14b84, i32* %v1_14ba0, align 4
  %v3_14ba0 = add i32 %v0_14ba0, 4
  %v4_14ba0 = inttoptr i32 %v3_14ba0 to i32*
  %v5_14ba0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14ba0, i32* %v4_14ba0, align 4
  %v6_14ba0 = add i32 %v0_14ba0, 8
  %v7_14ba0 = inttoptr i32 %v6_14ba0 to i32*
  %v8_14ba0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14ba0, i32* %v7_14ba0, align 4
  %v9_14ba0 = add i32 %v0_14ba0, 12
  %v10_14ba0 = inttoptr i32 %v9_14ba0 to i32*
  %v11_14ba0 = load i32, i32* @ip, align 4
  store i32 %v11_14ba0, i32* %v10_14ba0, align 4
  %v12_14ba0 = add i32 %v0_14ba0, 16
  store i32 %v12_14ba0, i32* @r0, align 4
  %v0_14ba4 = load i32, i32* %r2.global-to-local, align 4
  %v1_14ba4 = add i32 %v0_14ba4, -16
  store i32 %v1_14ba4, i32* %r2.global-to-local, align 4
  %v3_14ba4 = sub i32 15, %v0_14ba4
  %v4_14ba4 = and i32 %v3_14ba4, %v0_14ba4
  %v5_14ba4 = icmp slt i32 %v4_14ba4, 0
  %v6_14ba4 = icmp slt i32 %v1_14ba4, 0
  %v2_14ba8 = xor i1 %v6_14ba4, %v5_14ba4
  br i1 %v2_14ba8, label %dec_label_pc_14bac, label %dec_label_pc_14b7c.dec_label_pc_14b7c_crit_edge

dec_label_pc_14b7c.dec_label_pc_14b7c_crit_edge:  ; preds = %dec_label_pc_14b7c
  %v0_14b7c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_14b80.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b7c

dec_label_pc_14bac:                               ; preds = %dec_label_pc_14b7c
  %v2_14bac = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14bac, i32* @r4, align 4
  %v5_14bac = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14bac, i32* @r5, align 4
  %v1_14bb0 = add i32 %v0_14ba4, -4
  store i32 %v1_14bb0, i32* %r2.global-to-local, align 4
  %v3_14bb0 = add i32 %v0_14ba4, 2147483632
  %v4_14bb0 = and i32 %v1_14bb0, %v3_14bb0
  %v5_14bb0 = icmp slt i32 %v4_14bb0, 0
  store i1 %v5_14bb0, i1* %cpsr_v.global-to-local, align 1
  %v6_14bb0 = icmp slt i32 %v1_14bb0, 0
  store i1 %v6_14bb0, i1* %cpsr_n.global-to-local, align 1
  %v7_14bb0 = icmp eq i32 %v1_14bb0, 0
  store i1 %v7_14bb0, i1* %cpsr_z.global-to-local, align 1
  %v2_14bb4 = xor i1 %v6_14bb0, %v5_14bb0
  br i1 %v2_14bb4, label %dec_label_pc_14bd0, label %dec_label_pc_14bb8

dec_label_pc_14bb8:                               ; preds = %dec_label_pc_14bac, %dec_label_pc_14b6c, %dec_label_pc_14bb8
  %v1_14bc4 = phi i32 [ %v4_14bc4, %dec_label_pc_14bb8 ], [ %v12_14ba0, %dec_label_pc_14bac ], [ %v0_14c0c76, %dec_label_pc_14b6c ]
  %v0_14bb8 = load i32, i32* %lr.global-to-local, align 4
  %v3_14bb8 = udiv i32 %v0_14bb8, 65536
  store i32 %v3_14bb8, i32* %ip.global-to-local, align 4
  %v0_14bbc = load i32, i32* %r1.global-to-local, align 4
  %v1_14bbc = inttoptr i32 %v0_14bbc to i32*
  %v2_14bbc = load i32, i32* %v1_14bbc, align 4
  store i32 %v2_14bbc, i32* %lr.global-to-local, align 4
  %v4_14bbc = add i32 %v0_14bbc, 4
  store i32 %v4_14bbc, i32* %r1.global-to-local, align 4
  %v4_14bc0 = mul i32 %v2_14bbc, 65536
  %v5_14bc0 = or i32 %v4_14bc0, %v3_14bb8
  store i32 %v5_14bc0, i32* @ip, align 4
  %v2_14bc4 = inttoptr i32 %v1_14bc4 to i32*
  store i32 %v5_14bc0, i32* %v2_14bc4, align 4
  %v3_14bc4 = load i32, i32* @r0, align 4
  %v4_14bc4 = add i32 %v3_14bc4, 4
  store i32 %v4_14bc4, i32* @r0, align 4
  %v0_14bc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_14bc8 = add i32 %v0_14bc8, -4
  store i32 %v1_14bc8, i32* %r2.global-to-local, align 4
  %v3_14bc8 = sub i32 3, %v0_14bc8
  %v4_14bc8 = and i32 %v3_14bc8, %v0_14bc8
  %v5_14bc8 = icmp slt i32 %v4_14bc8, 0
  %v6_14bc8 = icmp slt i32 %v1_14bc8, 0
  %v2_14bcc = xor i1 %v6_14bc8, %v5_14bc8
  br i1 %v2_14bcc, label %dec_label_pc_14bd0.loopexit, label %dec_label_pc_14bb8

dec_label_pc_14bd0.loopexit:                      ; preds = %dec_label_pc_14bb8
  %v7_14bc8 = icmp eq i32 %v0_14bc8, 4
  store i1 %v5_14bc8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_14bc8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_14bc8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14bd0

dec_label_pc_14bd0:                               ; preds = %dec_label_pc_14bd0.loopexit, %dec_label_pc_14bac
  %v0_14a8c60 = phi i32 [ %v1_14bc8, %dec_label_pc_14bd0.loopexit ], [ %v1_14bb0, %dec_label_pc_14bac ]
  %v0_14bd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_14bd0 = add i32 %v0_14bd0, -2
  store i32 %v1_14bd0, i32* @r1, align 4
  br label %bb140

dec_label_pc_14bd8:                               ; preds = %dec_label_pc_14aec
  br i1 %v2_14b70, label %dec_label_pc_14c24, label %dec_label_pc_14be0

dec_label_pc_14be0:                               ; preds = %dec_label_pc_14bd8
  store i32 %v1_14b6c, i32* %r2.global-to-local, align 4
  %v3_14be4 = load i32, i32* @r4, align 4
  store i32 %v3_14be4, i32* %stack_var_-16, align 4
  %v6_14be4 = load i32, i32* @r5, align 4
  store i32 %v6_14be4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14be8

dec_label_pc_14be8:                               ; preds = %dec_label_pc_14be8.dec_label_pc_14be8_crit_edge, %dec_label_pc_14be0
  %v0_14c0c = phi i32 [ %v12_14c0c, %dec_label_pc_14be8.dec_label_pc_14be8_crit_edge ], [ %v0_14c0c76, %dec_label_pc_14be0 ]
  %v0_14bec = phi i32 [ %v0_14bec.pre, %dec_label_pc_14be8.dec_label_pc_14be8_crit_edge ], [ %v4_14af0, %dec_label_pc_14be0 ]
  %v0_14be8 = phi i32 [ %v0_14be8.pre, %dec_label_pc_14be8.dec_label_pc_14be8_crit_edge ], [ %v2_14af0, %dec_label_pc_14be0 ]
  %v3_14be8 = udiv i32 %v0_14be8, 16777216
  %v1_14bec = inttoptr i32 %v0_14bec to i32*
  %v2_14bec = load i32, i32* %v1_14bec, align 4
  store i32 %v2_14bec, i32* %r4.global-to-local, align 4
  %v3_14bec = add i32 %v0_14bec, 4
  %v4_14bec = inttoptr i32 %v3_14bec to i32*
  %v5_14bec = load i32, i32* %v4_14bec, align 4
  store i32 %v5_14bec, i32* %r5.global-to-local, align 4
  %v6_14bec = add i32 %v0_14bec, 8
  %v7_14bec = inttoptr i32 %v6_14bec to i32*
  %v8_14bec = load i32, i32* %v7_14bec, align 4
  store i32 %v8_14bec, i32* %ip.global-to-local, align 4
  %v9_14bec = add i32 %v0_14bec, 12
  %v10_14bec = inttoptr i32 %v9_14bec to i32*
  %v11_14bec = load i32, i32* %v10_14bec, align 4
  store i32 %v11_14bec, i32* %lr.global-to-local, align 4
  %v12_14bec = add i32 %v0_14bec, 16
  store i32 %v12_14bec, i32* %r1.global-to-local, align 4
  %v4_14bf0 = mul i32 %v2_14bec, 256
  %v5_14bf0 = or i32 %v4_14bf0, %v3_14be8
  store i32 %v5_14bf0, i32* @r3, align 4
  %v3_14bf4 = udiv i32 %v2_14bec, 16777216
  %v4_14bf8 = mul i32 %v5_14bec, 256
  %v5_14bf8 = or i32 %v4_14bf8, %v3_14bf4
  store i32 %v5_14bf8, i32* %r4.global-to-local, align 4
  %v3_14bfc = udiv i32 %v5_14bec, 16777216
  %v4_14c00 = mul i32 %v8_14bec, 256
  %v5_14c00 = or i32 %v4_14c00, %v3_14bfc
  store i32 %v5_14c00, i32* %r5.global-to-local, align 4
  %v3_14c04 = udiv i32 %v8_14bec, 16777216
  %v4_14c08 = mul i32 %v11_14bec, 256
  %v5_14c08 = or i32 %v4_14c08, %v3_14c04
  store i32 %v5_14c08, i32* @ip, align 4
  %v1_14c0c = inttoptr i32 %v0_14c0c to i32*
  store i32 %v5_14bf0, i32* %v1_14c0c, align 4
  %v3_14c0c = add i32 %v0_14c0c, 4
  %v4_14c0c = inttoptr i32 %v3_14c0c to i32*
  %v5_14c0c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14c0c, i32* %v4_14c0c, align 4
  %v6_14c0c = add i32 %v0_14c0c, 8
  %v7_14c0c = inttoptr i32 %v6_14c0c to i32*
  %v8_14c0c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14c0c, i32* %v7_14c0c, align 4
  %v9_14c0c = add i32 %v0_14c0c, 12
  %v10_14c0c = inttoptr i32 %v9_14c0c to i32*
  %v11_14c0c = load i32, i32* @ip, align 4
  store i32 %v11_14c0c, i32* %v10_14c0c, align 4
  %v12_14c0c = add i32 %v0_14c0c, 16
  store i32 %v12_14c0c, i32* @r0, align 4
  %v0_14c10 = load i32, i32* %r2.global-to-local, align 4
  %v1_14c10 = add i32 %v0_14c10, -16
  store i32 %v1_14c10, i32* %r2.global-to-local, align 4
  %v3_14c10 = sub i32 15, %v0_14c10
  %v4_14c10 = and i32 %v3_14c10, %v0_14c10
  %v5_14c10 = icmp slt i32 %v4_14c10, 0
  %v6_14c10 = icmp slt i32 %v1_14c10, 0
  %v2_14c14 = xor i1 %v6_14c10, %v5_14c10
  br i1 %v2_14c14, label %dec_label_pc_14c18, label %dec_label_pc_14be8.dec_label_pc_14be8_crit_edge

dec_label_pc_14be8.dec_label_pc_14be8_crit_edge:  ; preds = %dec_label_pc_14be8
  %v0_14be8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_14bec.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14be8

dec_label_pc_14c18:                               ; preds = %dec_label_pc_14be8
  %v2_14c18 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14c18, i32* @r4, align 4
  %v5_14c18 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14c18, i32* @r5, align 4
  %v1_14c1c = add i32 %v0_14c10, -4
  store i32 %v1_14c1c, i32* %r2.global-to-local, align 4
  %v3_14c1c = add i32 %v0_14c10, 2147483632
  %v4_14c1c = and i32 %v1_14c1c, %v3_14c1c
  %v5_14c1c = icmp slt i32 %v4_14c1c, 0
  store i1 %v5_14c1c, i1* %cpsr_v.global-to-local, align 1
  %v6_14c1c = icmp slt i32 %v1_14c1c, 0
  store i1 %v6_14c1c, i1* %cpsr_n.global-to-local, align 1
  %v7_14c1c = icmp eq i32 %v1_14c1c, 0
  store i1 %v7_14c1c, i1* %cpsr_z.global-to-local, align 1
  %v2_14c20 = xor i1 %v6_14c1c, %v5_14c1c
  br i1 %v2_14c20, label %dec_label_pc_14c3c, label %dec_label_pc_14c24

dec_label_pc_14c24:                               ; preds = %dec_label_pc_14c18, %dec_label_pc_14bd8, %dec_label_pc_14c24
  %v1_14c30 = phi i32 [ %v4_14c30, %dec_label_pc_14c24 ], [ %v12_14c0c, %dec_label_pc_14c18 ], [ %v0_14c0c76, %dec_label_pc_14bd8 ]
  %v0_14c24 = load i32, i32* %lr.global-to-local, align 4
  %v3_14c24 = udiv i32 %v0_14c24, 16777216
  store i32 %v3_14c24, i32* %ip.global-to-local, align 4
  %v0_14c28 = load i32, i32* %r1.global-to-local, align 4
  %v1_14c28 = inttoptr i32 %v0_14c28 to i32*
  %v2_14c28 = load i32, i32* %v1_14c28, align 4
  store i32 %v2_14c28, i32* %lr.global-to-local, align 4
  %v4_14c28 = add i32 %v0_14c28, 4
  store i32 %v4_14c28, i32* %r1.global-to-local, align 4
  %v4_14c2c = mul i32 %v2_14c28, 256
  %v5_14c2c = or i32 %v4_14c2c, %v3_14c24
  store i32 %v5_14c2c, i32* @ip, align 4
  %v2_14c30 = inttoptr i32 %v1_14c30 to i32*
  store i32 %v5_14c2c, i32* %v2_14c30, align 4
  %v3_14c30 = load i32, i32* @r0, align 4
  %v4_14c30 = add i32 %v3_14c30, 4
  store i32 %v4_14c30, i32* @r0, align 4
  %v0_14c34 = load i32, i32* %r2.global-to-local, align 4
  %v1_14c34 = add i32 %v0_14c34, -4
  store i32 %v1_14c34, i32* %r2.global-to-local, align 4
  %v3_14c34 = sub i32 3, %v0_14c34
  %v4_14c34 = and i32 %v3_14c34, %v0_14c34
  %v5_14c34 = icmp slt i32 %v4_14c34, 0
  %v6_14c34 = icmp slt i32 %v1_14c34, 0
  %v2_14c38 = xor i1 %v6_14c34, %v5_14c34
  br i1 %v2_14c38, label %dec_label_pc_14c3c.loopexit, label %dec_label_pc_14c24

dec_label_pc_14c3c.loopexit:                      ; preds = %dec_label_pc_14c24
  %v7_14c34 = icmp eq i32 %v0_14c34, 4
  store i1 %v5_14c34, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_14c34, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_14c34, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14c3c

dec_label_pc_14c3c:                               ; preds = %dec_label_pc_14c3c.loopexit, %dec_label_pc_14c18
  %v0_14a8c61 = phi i32 [ %v1_14c34, %dec_label_pc_14c3c.loopexit ], [ %v1_14c1c, %dec_label_pc_14c18 ]
  %v0_14c3c = load i32, i32* %r1.global-to-local, align 4
  %v1_14c3c = add i32 %v0_14c3c, -1
  store i32 %v1_14c3c, i32* @r1, align 4
  br label %bb140

dec_label_pc_14c44:                               ; preds = %dec_label_pc_149f0
  %v1_14c44 = load i32, i32* @r2, align 4
  %v2_14c44 = add i32 %v1_14c44, %v0_149f0
  store i32 %v2_14c44, i32* %r1.global-to-local, align 4
  %v2_14c48 = add i32 %v1_14c44, %v1_149f0
  store i32 %v2_14c48, i32* %r0.global-to-local, align 4
  %v2_14c4c = add i32 %v1_14c44, -4
  store i32 %v2_14c4c, i32* %r2.global-to-local, align 4
  %v4_14c4c = sub i32 3, %v1_14c44
  %v5_14c4c = and i32 %v4_14c4c, %v1_14c44
  %v6_14c4c = icmp slt i32 %v5_14c4c, 0
  store i1 %v6_14c4c, i1* %cpsr_v.global-to-local, align 1
  %v7_14c4c = icmp slt i32 %v2_14c4c, 0
  store i1 %v7_14c4c, i1* %cpsr_n.global-to-local, align 1
  %v8_14c4c = icmp eq i32 %v1_14c44, 4
  store i1 %v8_14c4c, i1* %cpsr_z.global-to-local, align 1
  %v5_14c50 = icmp slt i32 %v1_14c44, 4
  br i1 %v5_14c50, label %bb150, label %dec_label_pc_14c54

dec_label_pc_14c54:                               ; preds = %dec_label_pc_14c44
  %v1_14c54 = urem i32 %v2_14c48, 4
  store i32 %v1_14c54, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14c54 = icmp eq i32 %v1_14c54, 0
  store i1 %v2_14c54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14c54, label %dec_label_pc_14c5c, label %dec_label_pc_14cfc

dec_label_pc_14c5c:                               ; preds = %dec_label_pc_14c54
  %v1_14c5c = urem i32 %v2_14c44, 4
  store i32 %v1_14c5c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14c5c = icmp eq i32 %v1_14c5c, 0
  store i1 %v2_14c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14c5c, label %dec_label_pc_14c64, label %dec_label_pc_14d28

dec_label_pc_14c64:                               ; preds = %dec_label_pc_14c5c, %dec_label_pc_14d20
  %v0_14c7c37 = phi i32 [ %v2_14c48, %dec_label_pc_14c5c ], [ %v0_14d7020, %dec_label_pc_14d20 ]
  %v0_14c7836 = phi i32 [ %v2_14c44, %dec_label_pc_14c5c ], [ %v0_14d20, %dec_label_pc_14d20 ]
  %v0_14c64 = phi i32 [ %v2_14c4c, %dec_label_pc_14c5c ], [ %v2_14d18, %dec_label_pc_14d20 ]
  %v2_14c64 = add i32 %v0_14c64, -8
  store i32 %v2_14c64, i32* %r2.global-to-local, align 4
  %v4_14c64 = sub i32 7, %v0_14c64
  %v5_14c64 = and i32 %v4_14c64, %v0_14c64
  %v6_14c64 = icmp slt i32 %v5_14c64, 0
  store i1 %v6_14c64, i1* %cpsr_v.global-to-local, align 1
  %v7_14c64 = icmp slt i32 %v2_14c64, 0
  store i1 %v7_14c64, i1* %cpsr_n.global-to-local, align 1
  %v8_14c64 = icmp eq i32 %v0_14c64, 8
  store i1 %v8_14c64, i1* %cpsr_z.global-to-local, align 1
  %v5_14c68 = icmp slt i32 %v0_14c64, 8
  br i1 %v5_14c68, label %dec_label_pc_14cb4, label %dec_label_pc_14c6c

dec_label_pc_14c6c:                               ; preds = %dec_label_pc_14c64
  %v3_14c6c = load i32, i32* @r4, align 4
  %v5_14c6c = inttoptr i32 %v3_14c6c to i8*
  store i8* %v5_14c6c, i8** %stack_var_-8, align 4
  %v8_14c6c = load i32, i32* @lr, align 4
  %v2_14c70 = add i32 %v0_14c64, -28
  store i32 %v2_14c70, i32* %r2.global-to-local, align 4
  %v4_14c70 = sub i32 27, %v0_14c64
  %v5_14c70 = and i32 %v4_14c70, %v2_14c64
  %v6_14c70 = icmp slt i32 %v5_14c70, 0
  store i1 %v6_14c70, i1* %cpsr_v.global-to-local, align 1
  %v7_14c70 = icmp slt i32 %v2_14c70, 0
  store i1 %v7_14c70, i1* %cpsr_n.global-to-local, align 1
  %v8_14c70 = icmp eq i32 %v2_14c64, 20
  store i1 %v8_14c70, i1* %cpsr_z.global-to-local, align 1
  %v5_14c74 = icmp slt i32 %v2_14c64, 20
  br i1 %v5_14c74, label %dec_label_pc_14c90, label %dec_label_pc_14c78

dec_label_pc_14c78:                               ; preds = %dec_label_pc_14c6c, %dec_label_pc_14c78.dec_label_pc_14c78_crit_edge
  %v0_14c7c = phi i32 [ %v1_14c84, %dec_label_pc_14c78.dec_label_pc_14c78_crit_edge ], [ %v0_14c7c37, %dec_label_pc_14c6c ]
  %v0_14c78 = phi i32 [ %v0_14c78.pre, %dec_label_pc_14c78.dec_label_pc_14c78_crit_edge ], [ %v0_14c7836, %dec_label_pc_14c6c ]
  %v1_14c78 = add i32 %v0_14c78, -4
  %v2_14c78 = inttoptr i32 %v1_14c78 to i32*
  %v3_14c78 = load i32, i32* %v2_14c78, align 4
  %v4_14c78 = add i32 %v0_14c78, -8
  %v5_14c78 = inttoptr i32 %v4_14c78 to i32*
  %v6_14c78 = load i32, i32* %v5_14c78, align 4
  store i32 %v6_14c78, i32* %r4.global-to-local, align 4
  %v7_14c78 = add i32 %v0_14c78, -12
  %v8_14c78 = inttoptr i32 %v7_14c78 to i32*
  %v9_14c78 = load i32, i32* %v8_14c78, align 4
  store i32 %v9_14c78, i32* %ip.global-to-local, align 4
  %v10_14c78 = add i32 %v0_14c78, -16
  %v11_14c78 = inttoptr i32 %v10_14c78 to i32*
  %v12_14c78 = load i32, i32* %v11_14c78, align 4
  store i32 %v12_14c78, i32* %lr.global-to-local, align 4
  store i32 %v10_14c78, i32* %r1.global-to-local, align 4
  %v1_14c7c = add i32 %v0_14c7c, -16
  %v2_14c7c = inttoptr i32 %v1_14c7c to i32*
  store i32 %v3_14c78, i32* %v2_14c7c, align 4
  %v4_14c7c = add i32 %v0_14c7c, -12
  %v5_14c7c = inttoptr i32 %v4_14c7c to i32*
  %v6_14c7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_14c7c, i32* %v5_14c7c, align 4
  %v7_14c7c = add i32 %v0_14c7c, -8
  %v8_14c7c = inttoptr i32 %v7_14c7c to i32*
  %v9_14c7c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14c7c, i32* %v8_14c7c, align 4
  %v10_14c7c = add i32 %v0_14c7c, -4
  %v11_14c7c = inttoptr i32 %v10_14c7c to i32*
  %v12_14c7c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14c7c, i32* %v11_14c7c, align 4
  store i32 %v1_14c7c, i32* %r0.global-to-local, align 4
  %v0_14c80 = load i32, i32* %r1.global-to-local, align 4
  %v1_14c80 = add i32 %v0_14c80, -4
  %v2_14c80 = inttoptr i32 %v1_14c80 to i32*
  %v3_14c80 = load i32, i32* %v2_14c80, align 4
  store i32 %v3_14c80, i32* @r3, align 4
  %v4_14c80 = add i32 %v0_14c80, -8
  %v5_14c80 = inttoptr i32 %v4_14c80 to i32*
  %v6_14c80 = load i32, i32* %v5_14c80, align 4
  store i32 %v6_14c80, i32* %r4.global-to-local, align 4
  %v7_14c80 = add i32 %v0_14c80, -12
  %v8_14c80 = inttoptr i32 %v7_14c80 to i32*
  %v9_14c80 = load i32, i32* %v8_14c80, align 4
  store i32 %v9_14c80, i32* @ip, align 4
  %v10_14c80 = add i32 %v0_14c80, -16
  %v11_14c80 = inttoptr i32 %v10_14c80 to i32*
  %v12_14c80 = load i32, i32* %v11_14c80, align 4
  store i32 %v12_14c80, i32* %lr.global-to-local, align 4
  store i32 %v10_14c80, i32* %r1.global-to-local, align 4
  %v1_14c84 = add i32 %v0_14c7c, -32
  %v2_14c84 = inttoptr i32 %v1_14c84 to i32*
  store i32 %v3_14c80, i32* %v2_14c84, align 4
  %v4_14c84 = add i32 %v0_14c7c, -28
  %v5_14c84 = inttoptr i32 %v4_14c84 to i32*
  %v6_14c84 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_14c84, i32* %v5_14c84, align 4
  %v7_14c84 = add i32 %v0_14c7c, -24
  %v8_14c84 = inttoptr i32 %v7_14c84 to i32*
  %v9_14c84 = load i32, i32* @ip, align 4
  store i32 %v9_14c84, i32* %v8_14c84, align 4
  %v10_14c84 = add i32 %v0_14c7c, -20
  %v11_14c84 = inttoptr i32 %v10_14c84 to i32*
  %v12_14c84 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14c84, i32* %v11_14c84, align 4
  store i32 %v1_14c84, i32* %r0.global-to-local, align 4
  %v0_14c88 = load i32, i32* %r2.global-to-local, align 4
  %v2_14c88 = add i32 %v0_14c88, -32
  store i32 %v2_14c88, i32* %r2.global-to-local, align 4
  %v6_14c8c = icmp slt i32 %v0_14c88, 32
  br i1 %v6_14c8c, label %dec_label_pc_14c90.loopexit, label %dec_label_pc_14c78.dec_label_pc_14c78_crit_edge

dec_label_pc_14c78.dec_label_pc_14c78_crit_edge:  ; preds = %dec_label_pc_14c78
  %v0_14c78.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14c78

dec_label_pc_14c90.loopexit:                      ; preds = %dec_label_pc_14c78
  %v4_14c88 = sub i32 31, %v0_14c88
  %v5_14c88 = and i32 %v4_14c88, %v0_14c88
  %v6_14c88 = icmp slt i32 %v5_14c88, 0
  %v7_14c88 = icmp slt i32 %v2_14c88, 0
  store i1 %v6_14c88, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14c88, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14c90

dec_label_pc_14c90:                               ; preds = %dec_label_pc_14c90.loopexit, %dec_label_pc_14c6c
  %v6_14c98 = phi i32 [ %v1_14c84, %dec_label_pc_14c90.loopexit ], [ %v0_14c7c37, %dec_label_pc_14c6c ]
  %v0_14ca0.pr = phi i32 [ %v2_14c88, %dec_label_pc_14c90.loopexit ], [ %v2_14c70, %dec_label_pc_14c6c ]
  %v4_14c90 = add i32 %v0_14ca0.pr, 16
  %v6_14c90 = sub i32 0, %v0_14ca0.pr
  %v7_14c90 = and i32 %v4_14c90, %v6_14c90
  %v8_14c90 = icmp slt i32 %v7_14c90, 0
  store i1 %v8_14c90, i1* %cpsr_v.global-to-local, align 1
  %v9_14c90 = icmp slt i32 %v4_14c90, 0
  store i1 %v9_14c90, i1* %cpsr_n.global-to-local, align 1
  %v10_14c90 = icmp eq i32 %v4_14c90, 0
  store i1 %v10_14c90, i1* %cpsr_z.global-to-local, align 1
  %v5_14c94 = icmp slt i32 %v0_14ca0.pr, -16
  br i1 %v5_14c94, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_14c90
  %v6_14c94 = load i32, i32* %r1.global-to-local, align 4
  %v7_14c94 = add i32 %v6_14c94, -4
  %v8_14c94 = inttoptr i32 %v7_14c94 to i32*
  %v9_14c94 = load i32, i32* %v8_14c94, align 4
  store i32 %v9_14c94, i32* @r3, align 4
  %v10_14c94 = add i32 %v6_14c94, -8
  %v11_14c94 = inttoptr i32 %v10_14c94 to i32*
  %v12_14c94 = load i32, i32* %v11_14c94, align 4
  store i32 %v12_14c94, i32* %r4.global-to-local, align 4
  %v13_14c94 = add i32 %v6_14c94, -12
  %v14_14c94 = inttoptr i32 %v13_14c94 to i32*
  %v15_14c94 = load i32, i32* %v14_14c94, align 4
  store i32 %v15_14c94, i32* @ip, align 4
  %v16_14c94 = add i32 %v6_14c94, -16
  %v17_14c94 = inttoptr i32 %v16_14c94 to i32*
  %v18_14c94 = load i32, i32* %v17_14c94, align 4
  store i32 %v18_14c94, i32* %lr.global-to-local, align 4
  store i32 %v16_14c94, i32* %r1.global-to-local, align 4
  %v7_14c98 = add i32 %v6_14c98, -16
  %v8_14c98 = inttoptr i32 %v7_14c98 to i32*
  store i32 %v9_14c94, i32* %v8_14c98, align 4
  %v10_14c98 = add i32 %v6_14c98, -12
  %v11_14c98 = inttoptr i32 %v10_14c98 to i32*
  %v12_14c98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_14c98, i32* %v11_14c98, align 4
  %v13_14c98 = add i32 %v6_14c98, -8
  %v14_14c98 = inttoptr i32 %v13_14c98 to i32*
  %v15_14c98 = load i32, i32* @ip, align 4
  store i32 %v15_14c98, i32* %v14_14c98, align 4
  %v16_14c98 = add i32 %v6_14c98, -4
  %v17_14c98 = inttoptr i32 %v16_14c98 to i32*
  %v18_14c98 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_14c98, i32* %v17_14c98, align 4
  store i32 %v7_14c98, i32* %r0.global-to-local, align 4
  %v6_14c9c = load i32, i32* %r2.global-to-local, align 4
  %v7_14c9c = add i32 %v6_14c9c, -16
  store i32 %v7_14c9c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14c90, %bb147
  %v6_14ca8 = phi i32 [ %v7_14c98, %bb147 ], [ %v6_14c98, %dec_label_pc_14c90 ]
  %v0_14ca0 = phi i32 [ %v7_14c9c, %bb147 ], [ %v0_14ca0.pr, %dec_label_pc_14c90 ]
  %v4_14ca0 = add i32 %v0_14ca0, 20
  store i32 %v4_14ca0, i32* %r2.global-to-local, align 4
  %v6_14ca0 = sub i32 0, %v0_14ca0
  %v7_14ca0 = and i32 %v4_14ca0, %v6_14ca0
  %v8_14ca0 = icmp slt i32 %v7_14ca0, 0
  store i1 %v8_14ca0, i1* %cpsr_v.global-to-local, align 1
  %v9_14ca0 = icmp slt i32 %v4_14ca0, 0
  store i1 %v9_14ca0, i1* %cpsr_n.global-to-local, align 1
  %v10_14ca0 = icmp eq i32 %v4_14ca0, 0
  store i1 %v10_14ca0, i1* %cpsr_z.global-to-local, align 1
  %v5_14ca4 = icmp slt i32 %v0_14ca0, -20
  br i1 %v5_14ca4, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_14ca4 = load i32, i32* %r1.global-to-local, align 4
  %v7_14ca4 = add i32 %v6_14ca4, -4
  %v8_14ca4 = inttoptr i32 %v7_14ca4 to i32*
  %v9_14ca4 = load i32, i32* %v8_14ca4, align 4
  store i32 %v9_14ca4, i32* @r3, align 4
  %v10_14ca4 = add i32 %v6_14ca4, -8
  %v11_14ca4 = inttoptr i32 %v10_14ca4 to i32*
  %v12_14ca4 = load i32, i32* %v11_14ca4, align 4
  store i32 %v12_14ca4, i32* @ip, align 4
  %v13_14ca4 = add i32 %v6_14ca4, -12
  %v14_14ca4 = inttoptr i32 %v13_14ca4 to i32*
  %v15_14ca4 = load i32, i32* %v14_14ca4, align 4
  store i32 %v15_14ca4, i32* %lr.global-to-local, align 4
  store i32 %v13_14ca4, i32* %r1.global-to-local, align 4
  %v7_14ca8 = add i32 %v6_14ca8, -12
  %v8_14ca8 = inttoptr i32 %v7_14ca8 to i32*
  store i32 %v9_14ca4, i32* %v8_14ca8, align 4
  %v10_14ca8 = add i32 %v6_14ca8, -8
  %v11_14ca8 = inttoptr i32 %v10_14ca8 to i32*
  %v12_14ca8 = load i32, i32* @ip, align 4
  store i32 %v12_14ca8, i32* %v11_14ca8, align 4
  %v13_14ca8 = add i32 %v6_14ca8, -4
  %v14_14ca8 = inttoptr i32 %v13_14ca8 to i32*
  %v15_14ca8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_14ca8, i32* %v14_14ca8, align 4
  store i32 %v7_14ca8, i32* %r0.global-to-local, align 4
  %v6_14cac = load i32, i32* %r2.global-to-local, align 4
  %v7_14cac = add i32 %v6_14cac, -12
  store i32 %v7_14cac, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_14ccc45 = phi i32 [ %v6_14ca8, %.thread2 ], [ %v7_14ca8, %bb148 ]
  %v0_14cb443 = phi i32 [ %v4_14ca0, %.thread2 ], [ %v7_14cac, %bb148 ]
  %v2_14cb0 = load i8*, i8** %stack_var_-8, align 4
  %v3_14cb0 = ptrtoint i8* %v2_14cb0 to i32
  store i32 %v3_14cb0, i32* @r4, align 4
  store i32 %v8_14c6c, i32* @lr, align 4
  br label %dec_label_pc_14cb4

dec_label_pc_14cb4:                               ; preds = %dec_label_pc_14c64, %.thread4
  %v7_14cc4 = phi i32 [ %v0_14c7c37, %dec_label_pc_14c64 ], [ %v6_14ccc45, %.thread4 ]
  %v0_14cb4 = phi i32 [ %v2_14c64, %dec_label_pc_14c64 ], [ %v0_14cb443, %.thread4 ]
  %v2_14cb4 = add i32 %v0_14cb4, 8
  store i32 %v2_14cb4, i32* %r2.global-to-local, align 4
  %v4_14cb4 = sub i32 0, %v0_14cb4
  %v5_14cb4 = and i32 %v2_14cb4, %v4_14cb4
  %v6_14cb4 = icmp slt i32 %v5_14cb4, 0
  store i1 %v6_14cb4, i1* %cpsr_v.global-to-local, align 1
  %v7_14cb4 = icmp slt i32 %v2_14cb4, 0
  store i1 %v7_14cb4, i1* %cpsr_n.global-to-local, align 1
  %v8_14cb4 = icmp eq i32 %v2_14cb4, 0
  store i1 %v8_14cb4, i1* %cpsr_z.global-to-local, align 1
  %v5_14cb8 = icmp slt i32 %v0_14cb4, -8
  br i1 %v5_14cb8, label %bb150, label %dec_label_pc_14cbc

dec_label_pc_14cbc:                               ; preds = %dec_label_pc_14cb4
  %v6_14cbc = add i32 %v0_14cb4, 4
  store i32 %v6_14cbc, i32* %r2.global-to-local, align 4
  %v8_14cbc = sub i32 -5, %v0_14cb4
  %v9_14cbc = and i32 %v8_14cbc, %v2_14cb4
  %v10_14cbc = icmp slt i32 %v9_14cbc, 0
  store i1 %v10_14cbc, i1* %cpsr_v.global-to-local, align 1
  %v11_14cbc = icmp slt i32 %v6_14cbc, 0
  store i1 %v11_14cbc, i1* %cpsr_n.global-to-local, align 1
  %v12_14cbc = icmp eq i32 %v2_14cb4, 4
  store i1 %v12_14cbc, i1* %cpsr_z.global-to-local, align 1
  %v5_14cc0 = icmp slt i32 %v2_14cb4, 4
  %v6_14cc0 = load i32, i32* %r1.global-to-local, align 4
  %v7_14cc0 = add i32 %v6_14cc0, -4
  %v8_14cc0 = inttoptr i32 %v7_14cc0 to i32*
  %v9_14cc0 = load i32, i32* %v8_14cc0, align 4
  store i32 %v9_14cc0, i32* @r3, align 4
  br i1 %v5_14cc0, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_14cbc
  store i32 %v7_14cc0, i32* %r1.global-to-local, align 4
  %v8_14cc4 = add i32 %v7_14cc4, -4
  %v9_14cc4 = inttoptr i32 %v8_14cc4 to i32*
  store i32 %v9_14cc0, i32* %v9_14cc4, align 4
  %v10_14cc4 = load i32, i32* %r0.global-to-local, align 4
  %v11_14cc4 = add i32 %v10_14cc4, -4
  store i32 %v11_14cc4, i32* %r0.global-to-local, align 4
  %v0_14cd4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_14cbc
  %v10_14cc8 = add i32 %v6_14cc0, -8
  %v11_14cc8 = inttoptr i32 %v10_14cc8 to i32*
  %v12_14cc8 = load i32, i32* %v11_14cc8, align 4
  store i32 %v12_14cc8, i32* @ip, align 4
  store i32 %v10_14cc8, i32* %r1.global-to-local, align 4
  %v7_14ccc = add i32 %v7_14cc4, -8
  %v8_14ccc = inttoptr i32 %v7_14ccc to i32*
  store i32 %v9_14cc0, i32* %v8_14ccc, align 4
  %v10_14ccc = add i32 %v7_14cc4, -4
  %v11_14ccc = inttoptr i32 %v10_14ccc to i32*
  %v12_14ccc = load i32, i32* @ip, align 4
  store i32 %v12_14ccc, i32* %v11_14ccc, align 4
  store i32 %v7_14ccc, i32* %r0.global-to-local, align 4
  %v6_14cd0 = load i32, i32* %r2.global-to-local, align 4
  %v7_14cd0 = add i32 %v6_14cd0, -4
  store i32 %v7_14cd0, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_14cb4, %dec_label_pc_14c44, %.thread14, %dec_label_pc_14e78, %dec_label_pc_14e0c, %dec_label_pc_14da0, %bb149
  %v2_14cd8 = phi i32 [ %v11_14cc4, %.thread8 ], [ %v7_14cc4, %dec_label_pc_14cb4 ], [ %v2_14c48, %dec_label_pc_14c44 ], [ %v0_14d7020, %.thread14 ], [ %v2_14ce453, %dec_label_pc_14e78 ], [ %v2_14ce452, %dec_label_pc_14e0c ], [ %v2_14ce451, %dec_label_pc_14da0 ], [ %v7_14ccc, %bb149 ]
  %v0_14cd4 = phi i32 [ %v0_14cd4.pre, %.thread8 ], [ %v2_14cb4, %dec_label_pc_14cb4 ], [ %v2_14c4c, %dec_label_pc_14c44 ], [ %v2_14d18, %.thread14 ], [ %v0_14cd449, %dec_label_pc_14e78 ], [ %v0_14cd448, %dec_label_pc_14e0c ], [ %v0_14cd447, %dec_label_pc_14da0 ], [ %v7_14cd0, %bb149 ]
  %v1_14cd4 = add i32 %v0_14cd4, 4
  store i32 %v1_14cd4, i32* %r2.global-to-local, align 4
  %v3_14cd4 = sub i32 0, %v0_14cd4
  %v4_14cd4 = and i32 %v1_14cd4, %v3_14cd4
  %v5_14cd4 = icmp slt i32 %v4_14cd4, 0
  store i1 %v5_14cd4, i1* %cpsr_v.global-to-local, align 1
  %v6_14cd4 = icmp slt i32 %v1_14cd4, 0
  store i1 %v6_14cd4, i1* %cpsr_n.global-to-local, align 1
  %v7_14cd4 = icmp eq i32 %v1_14cd4, 0
  store i1 %v7_14cd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14cd4, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_14cdc = add i32 %v0_14cd4, 2
  %v3_14cdc = sub i32 -3, %v0_14cd4
  %v4_14cdc = and i32 %v3_14cdc, %v1_14cd4
  %v5_14cdc = icmp slt i32 %v4_14cdc, 0
  store i1 %v5_14cdc, i1* %cpsr_v.global-to-local, align 1
  %v6_14cdc = icmp slt i32 %v1_14cdc, 0
  store i1 %v6_14cdc, i1* %cpsr_n.global-to-local, align 1
  %v7_14cdc = icmp eq i32 %v1_14cd4, 2
  store i1 %v7_14cdc, i1* %cpsr_z.global-to-local, align 1
  %v0_14ce0 = load i32, i32* %r1.global-to-local, align 4
  %v1_14ce0 = add i32 %v0_14ce0, -1
  %v2_14ce0 = inttoptr i32 %v1_14ce0 to i8*
  %v3_14ce0 = load i8, i8* %v2_14ce0, align 1
  %v4_14ce0 = zext i8 %v3_14ce0 to i32
  store i32 %v4_14ce0, i32* @r3, align 4
  store i32 %v1_14ce0, i32* %r1.global-to-local, align 4
  %v3_14ce4 = add i32 %v2_14cd8, -1
  %v4_14ce4 = inttoptr i32 %v3_14ce4 to i8*
  store i8 %v3_14ce0, i8* %v4_14ce4, align 1
  %v5_14ce4 = load i32, i32* %r0.global-to-local, align 4
  %v6_14ce4 = add i32 %v5_14ce4, -1
  store i32 %v6_14ce4, i32* %r0.global-to-local, align 4
  %v0_14ce8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14ce8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14ce8 = xor i1 %v0_14ce8, %v1_14ce8
  br i1 %v2_14ce8, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_14ce8 = load i32, i32* %r1.global-to-local, align 4
  %v4_14ce8 = add i32 %v3_14ce8, -1
  %v5_14ce8 = inttoptr i32 %v4_14ce8 to i8*
  %v6_14ce8 = load i8, i8* %v5_14ce8, align 1
  %v7_14ce8 = zext i8 %v6_14ce8 to i32
  store i32 %v7_14ce8, i32* @r3, align 4
  store i32 %v4_14ce8, i32* %r1.global-to-local, align 4
  %v6_14cec = add i32 %v5_14ce4, -2
  %v7_14cec = inttoptr i32 %v6_14cec to i8*
  store i8 %v6_14ce8, i8* %v7_14cec, align 1
  %v8_14cec = load i32, i32* %r0.global-to-local, align 4
  %v9_14cec = add i32 %v8_14cec, -1
  store i32 %v9_14cec, i32* %r0.global-to-local, align 4
  %v1_14cf0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14cf0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_14cf4 = phi i32 [ %v9_14cec, %bb152 ], [ %v6_14ce4, %bb151 ]
  %v2_14cf4 = phi i1 [ %v2_14cf0.pre, %bb152 ], [ %v1_14ce8, %bb151 ]
  %v1_14cf4 = phi i1 [ %v1_14cf0.pre, %bb152 ], [ %v0_14ce8, %bb151 ]
  %v0_14cf0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14cf0 = xor i1 %v2_14cf4, %v1_14cf4
  %v4_14cf0 = or i1 %v0_14cf0, %v3_14cf0
  br i1 %v4_14cf0, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_14cf0 = load i32, i32* %r1.global-to-local, align 4
  %v6_14cf0 = add i32 %v5_14cf0, -1
  %v7_14cf0 = inttoptr i32 %v6_14cf0 to i8*
  %v8_14cf0 = load i8, i8* %v7_14cf0, align 1
  %v9_14cf0 = zext i8 %v8_14cf0 to i32
  store i32 %v9_14cf0, i32* @r3, align 4
  store i32 %v6_14cf0, i32* %r1.global-to-local, align 4
  %v8_14cf4 = add i32 %v7_14cf4, -1
  %v9_14cf4 = inttoptr i32 %v8_14cf4 to i8*
  store i8 %v8_14cf0, i8* %v9_14cf4, align 1
  %v10_14cf4 = load i32, i32* %r0.global-to-local, align 4
  %v11_14cf4 = add i32 %v10_14cf4, -1
  store i32 %v11_14cf4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_14cfc:                               ; preds = %dec_label_pc_14c54
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14cfc = icmp eq i32 %v1_14c54, 1
  store i1 %v8_14cfc, i1* %cpsr_n.global-to-local, align 1
  %v9_14cfc = icmp eq i32 %v1_14c54, 2
  store i1 %v9_14cfc, i1* %cpsr_z.global-to-local, align 1
  %v1_14d00 = add i32 %v2_14c44, -1
  %v2_14d00 = inttoptr i32 %v1_14d00 to i8*
  %v3_14d00 = load i8, i8* %v2_14d00, align 1
  %v4_14d00 = zext i8 %v3_14d00 to i32
  store i32 %v4_14d00, i32* @r3, align 4
  store i32 %v1_14d00, i32* %r1.global-to-local, align 4
  %v3_14d04 = add i32 %v2_14c48, -1
  %v4_14d04 = inttoptr i32 %v3_14d04 to i8*
  store i8 %v3_14d00, i8* %v4_14d04, align 1
  %v5_14d04 = load i32, i32* %r0.global-to-local, align 4
  %v6_14d04 = add i32 %v5_14d04, -1
  store i32 %v6_14d04, i32* %r0.global-to-local, align 4
  br i1 %v8_14cfc, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_14cfc
  %v6_14d08 = load i32, i32* %r1.global-to-local, align 4
  %v7_14d08 = add i32 %v6_14d08, -1
  %v8_14d08 = inttoptr i32 %v7_14d08 to i8*
  %v9_14d08 = load i8, i8* %v8_14d08, align 1
  %v10_14d08 = zext i8 %v9_14d08 to i32
  store i32 %v10_14d08, i32* @r3, align 4
  store i32 %v7_14d08, i32* %r1.global-to-local, align 4
  %v9_14d0c = add i32 %v5_14d04, -2
  %v10_14d0c = inttoptr i32 %v9_14d0c to i8*
  store i8 %v9_14d08, i8* %v10_14d0c, align 1
  %v11_14d0c = load i32, i32* %r0.global-to-local, align 4
  %v12_14d0c = add i32 %v11_14d0c, -1
  store i32 %v12_14d0c, i32* %r0.global-to-local, align 4
  br i1 %v9_14cfc, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_14d10 = load i32, i32* %r1.global-to-local, align 4
  %v9_14d10 = add i32 %v8_14d10, -1
  %v10_14d10 = inttoptr i32 %v9_14d10 to i8*
  %v11_14d10 = load i8, i8* %v10_14d10, align 1
  %v12_14d10 = zext i8 %v11_14d10 to i32
  store i32 %v12_14d10, i32* @r3, align 4
  store i32 %v9_14d10, i32* %r1.global-to-local, align 4
  %v11_14d14 = add i32 %v11_14d0c, -2
  %v12_14d14 = inttoptr i32 %v11_14d14 to i8*
  store i8 %v11_14d10, i8* %v12_14d14, align 1
  %v13_14d14 = load i32, i32* %r0.global-to-local, align 4
  %v14_14d14 = add i32 %v13_14d14, -1
  store i32 %v14_14d14, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_14cfc, %bb155
  %v0_14d7020 = phi i32 [ %v12_14d0c, %bb154 ], [ %v6_14d04, %dec_label_pc_14cfc ], [ %v14_14d14, %bb155 ]
  %v0_14d18 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d18 = load i32, i32* @ip, align 4
  %v2_14d18 = sub i32 %v0_14d18, %v1_14d18
  store i32 %v2_14d18, i32* %r2.global-to-local, align 4
  %v4_14d18 = xor i32 %v1_14d18, %v0_14d18
  %v5_14d18 = xor i32 %v2_14d18, %v0_14d18
  %v6_14d18 = and i32 %v5_14d18, %v4_14d18
  %v7_14d18 = icmp slt i32 %v6_14d18, 0
  store i1 %v7_14d18, i1* %cpsr_v.global-to-local, align 1
  %v8_14d18 = icmp slt i32 %v2_14d18, 0
  store i1 %v8_14d18, i1* %cpsr_n.global-to-local, align 1
  %v9_14d18 = icmp eq i32 %v0_14d18, %v1_14d18
  store i1 %v9_14d18, i1* %cpsr_z.global-to-local, align 1
  %v5_14d1c = icmp slt i32 %v0_14d18, %v1_14d18
  br i1 %v5_14d1c, label %bb150, label %dec_label_pc_14d20

dec_label_pc_14d20:                               ; preds = %.thread14
  %v0_14d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_14d20 = urem i32 %v0_14d20, 4
  store i32 %v1_14d20, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14d20 = icmp eq i32 %v1_14d20, 0
  store i1 %v2_14d20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14d20, label %dec_label_pc_14c64, label %dec_label_pc_14d28

dec_label_pc_14d28:                               ; preds = %dec_label_pc_14c5c, %dec_label_pc_14d20
  %v0_14d7019 = phi i32 [ %v2_14c48, %dec_label_pc_14c5c ], [ %v0_14d7020, %dec_label_pc_14d20 ]
  %v0_14e1c = phi i32 [ %v2_14c4c, %dec_label_pc_14c5c ], [ %v2_14d18, %dec_label_pc_14d20 ]
  %v0_14d28 = phi i32 [ %v2_14c44, %dec_label_pc_14c5c ], [ %v0_14d20, %dec_label_pc_14d20 ]
  %v0_14d30 = phi i32 [ %v1_14c5c, %dec_label_pc_14c5c ], [ %v1_14d20, %dec_label_pc_14d20 ]
  %v1_14d28 = and i32 %v0_14d28, -4
  store i32 %v1_14d28, i32* %r1.global-to-local, align 4
  %v1_14d2c = inttoptr i32 %v1_14d28 to i32*
  %v2_14d2c = load i32, i32* %v1_14d2c, align 4
  store i32 %v2_14d2c, i32* @r3, align 4
  %v7_14d30 = icmp ult i32 %v0_14d30, 2
  %v2_14e14 = add i32 %v0_14e1c, -12
  %v4_14e14 = sub i32 11, %v0_14e1c
  %v5_14e14 = and i32 %v4_14e14, %v0_14e1c
  %v6_14e14 = icmp slt i32 %v5_14e14, 0
  store i1 %v6_14e14, i1* %cpsr_v.global-to-local, align 1
  %v7_14e14 = icmp slt i32 %v2_14e14, 0
  store i1 %v7_14e14, i1* %cpsr_n.global-to-local, align 1
  %v8_14e14 = icmp eq i32 %v0_14e1c, 12
  store i1 %v8_14e14, i1* %cpsr_z.global-to-local, align 1
  %v5_14e18 = icmp slt i32 %v0_14e1c, 12
  br i1 %v7_14d30, label %dec_label_pc_14e14, label %dec_label_pc_14d38

dec_label_pc_14d38:                               ; preds = %dec_label_pc_14d28
  %v8_14d30 = icmp eq i32 %v0_14d30, 2
  br i1 %v8_14d30, label %dec_label_pc_14da8, label %dec_label_pc_14d3c

dec_label_pc_14d3c:                               ; preds = %dec_label_pc_14d38
  br i1 %v5_14e18, label %dec_label_pc_14d88, label %dec_label_pc_14d44

dec_label_pc_14d44:                               ; preds = %dec_label_pc_14d3c
  store i32 %v2_14e14, i32* %r2.global-to-local, align 4
  %v3_14d48 = load i32, i32* @r4, align 4
  store i32 %v3_14d48, i32* %stack_var_-12, align 4
  %v6_14d48 = load i32, i32* @r5, align 4
  %v8_14d48 = inttoptr i32 %v6_14d48 to i8*
  store i8* %v8_14d48, i8** %stack_var_-8, align 4
  %v11_14d48 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14d4c

dec_label_pc_14d4c:                               ; preds = %dec_label_pc_14d4c.dec_label_pc_14d4c_crit_edge, %dec_label_pc_14d44
  %v0_14d70 = phi i32 [ %v1_14d70, %dec_label_pc_14d4c.dec_label_pc_14d4c_crit_edge ], [ %v0_14d7019, %dec_label_pc_14d44 ]
  %v0_14d50 = phi i32 [ %v0_14d50.pre, %dec_label_pc_14d4c.dec_label_pc_14d4c_crit_edge ], [ %v1_14d28, %dec_label_pc_14d44 ]
  %v0_14d4c = phi i32 [ %v0_14d4c.pre, %dec_label_pc_14d4c.dec_label_pc_14d4c_crit_edge ], [ %v2_14d2c, %dec_label_pc_14d44 ]
  %v3_14d4c = mul i32 %v0_14d4c, 256
  store i32 %v3_14d4c, i32* %lr.global-to-local, align 4
  %v1_14d50 = add i32 %v0_14d50, -4
  %v2_14d50 = inttoptr i32 %v1_14d50 to i32*
  %v3_14d50 = load i32, i32* %v2_14d50, align 4
  store i32 %v3_14d50, i32* @r3, align 4
  %v4_14d50 = add i32 %v0_14d50, -8
  %v5_14d50 = inttoptr i32 %v4_14d50 to i32*
  %v6_14d50 = load i32, i32* %v5_14d50, align 4
  store i32 %v6_14d50, i32* %r4.global-to-local, align 4
  %v7_14d50 = add i32 %v0_14d50, -12
  %v8_14d50 = inttoptr i32 %v7_14d50 to i32*
  %v9_14d50 = load i32, i32* %v8_14d50, align 4
  store i32 %v9_14d50, i32* %r5.global-to-local, align 4
  %v10_14d50 = add i32 %v0_14d50, -16
  %v11_14d50 = inttoptr i32 %v10_14d50 to i32*
  %v12_14d50 = load i32, i32* %v11_14d50, align 4
  store i32 %v10_14d50, i32* %r1.global-to-local, align 4
  %v4_14d54 = udiv i32 %v12_14d50, 16777216
  %v5_14d54 = or i32 %v4_14d54, %v3_14d4c
  store i32 %v5_14d54, i32* %lr.global-to-local, align 4
  %v3_14d58 = mul i32 %v12_14d50, 256
  %v4_14d5c = udiv i32 %v9_14d50, 16777216
  %v5_14d5c = or i32 %v3_14d58, %v4_14d5c
  store i32 %v5_14d5c, i32* @ip, align 4
  %v3_14d60 = mul i32 %v9_14d50, 256
  %v4_14d64 = udiv i32 %v6_14d50, 16777216
  %v5_14d64 = or i32 %v3_14d60, %v4_14d64
  store i32 %v5_14d64, i32* %r5.global-to-local, align 4
  %v3_14d68 = mul i32 %v6_14d50, 256
  %v4_14d6c = udiv i32 %v3_14d50, 16777216
  %v5_14d6c = or i32 %v3_14d68, %v4_14d6c
  store i32 %v5_14d6c, i32* %r4.global-to-local, align 4
  %v1_14d70 = add i32 %v0_14d70, -16
  %v2_14d70 = inttoptr i32 %v1_14d70 to i32*
  store i32 %v5_14d6c, i32* %v2_14d70, align 4
  %v4_14d70 = add i32 %v0_14d70, -12
  %v5_14d70 = inttoptr i32 %v4_14d70 to i32*
  %v6_14d70 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14d70, i32* %v5_14d70, align 4
  %v7_14d70 = add i32 %v0_14d70, -8
  %v8_14d70 = inttoptr i32 %v7_14d70 to i32*
  %v9_14d70 = load i32, i32* @ip, align 4
  store i32 %v9_14d70, i32* %v8_14d70, align 4
  %v10_14d70 = add i32 %v0_14d70, -4
  %v11_14d70 = inttoptr i32 %v10_14d70 to i32*
  %v12_14d70 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14d70, i32* %v11_14d70, align 4
  store i32 %v1_14d70, i32* %r0.global-to-local, align 4
  %v0_14d74 = load i32, i32* %r2.global-to-local, align 4
  %v2_14d74 = add i32 %v0_14d74, -16
  store i32 %v2_14d74, i32* %r2.global-to-local, align 4
  %v6_14d78 = icmp slt i32 %v0_14d74, 16
  br i1 %v6_14d78, label %dec_label_pc_14d7c, label %dec_label_pc_14d4c.dec_label_pc_14d4c_crit_edge

dec_label_pc_14d4c.dec_label_pc_14d4c_crit_edge:  ; preds = %dec_label_pc_14d4c
  %v0_14d4c.pre = load i32, i32* @r3, align 4
  %v0_14d50.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14d4c

dec_label_pc_14d7c:                               ; preds = %dec_label_pc_14d4c
  %v2_14d7c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14d7c, i32* @r4, align 4
  %v5_14d7c = load i8*, i8** %stack_var_-8, align 4
  %v6_14d7c = ptrtoint i8* %v5_14d7c to i32
  store i32 %v6_14d7c, i32* @r5, align 4
  store i32 %v11_14d48, i32* @lr, align 4
  %v2_14d80 = add i32 %v0_14d74, -4
  store i32 %v2_14d80, i32* %r2.global-to-local, align 4
  %v4_14d80 = add i32 %v0_14d74, 2147483632
  %v5_14d80 = and i32 %v2_14d80, %v4_14d80
  %v6_14d80 = icmp slt i32 %v5_14d80, 0
  store i1 %v6_14d80, i1* %cpsr_v.global-to-local, align 1
  %v7_14d80 = icmp slt i32 %v2_14d80, 0
  store i1 %v7_14d80, i1* %cpsr_n.global-to-local, align 1
  %v8_14d80 = icmp eq i32 %v2_14d80, 0
  store i1 %v8_14d80, i1* %cpsr_z.global-to-local, align 1
  %v5_14d84 = icmp slt i32 %v2_14d74, -12
  br i1 %v5_14d84, label %dec_label_pc_14da0, label %dec_label_pc_14d88

dec_label_pc_14d88:                               ; preds = %dec_label_pc_14d7c, %dec_label_pc_14d3c, %dec_label_pc_14d88
  %v1_14d94 = phi i32 [ %v5_14d94, %dec_label_pc_14d88 ], [ %v1_14d70, %dec_label_pc_14d7c ], [ %v0_14d7019, %dec_label_pc_14d3c ]
  %v0_14d88 = load i32, i32* @r3, align 4
  %v3_14d88 = mul i32 %v0_14d88, 256
  store i32 %v3_14d88, i32* %ip.global-to-local, align 4
  %v0_14d8c = load i32, i32* %r1.global-to-local, align 4
  %v1_14d8c = add i32 %v0_14d8c, -4
  %v2_14d8c = inttoptr i32 %v1_14d8c to i32*
  %v3_14d8c = load i32, i32* %v2_14d8c, align 4
  store i32 %v3_14d8c, i32* @r3, align 4
  store i32 %v1_14d8c, i32* %r1.global-to-local, align 4
  %v4_14d90 = udiv i32 %v3_14d8c, 16777216
  %v5_14d90 = or i32 %v4_14d90, %v3_14d88
  store i32 %v5_14d90, i32* @ip, align 4
  %v2_14d94 = add i32 %v1_14d94, -4
  %v3_14d94 = inttoptr i32 %v2_14d94 to i32*
  store i32 %v5_14d90, i32* %v3_14d94, align 4
  %v4_14d94 = load i32, i32* %r0.global-to-local, align 4
  %v5_14d94 = add i32 %v4_14d94, -4
  store i32 %v5_14d94, i32* %r0.global-to-local, align 4
  %v0_14d98 = load i32, i32* %r2.global-to-local, align 4
  %v2_14d98 = add i32 %v0_14d98, -4
  store i32 %v2_14d98, i32* %r2.global-to-local, align 4
  %v6_14d9c = icmp slt i32 %v0_14d98, 4
  br i1 %v6_14d9c, label %dec_label_pc_14da0.loopexit, label %dec_label_pc_14d88

dec_label_pc_14da0.loopexit:                      ; preds = %dec_label_pc_14d88
  %v4_14d98 = sub i32 3, %v0_14d98
  %v5_14d98 = and i32 %v4_14d98, %v0_14d98
  %v6_14d98 = icmp slt i32 %v5_14d98, 0
  %v7_14d98 = icmp slt i32 %v2_14d98, 0
  store i1 %v6_14d98, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14d98, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14da0

dec_label_pc_14da0:                               ; preds = %dec_label_pc_14da0.loopexit, %dec_label_pc_14d7c
  %v2_14ce451 = phi i32 [ %v5_14d94, %dec_label_pc_14da0.loopexit ], [ %v1_14d70, %dec_label_pc_14d7c ]
  %v0_14cd447 = phi i32 [ %v2_14d98, %dec_label_pc_14da0.loopexit ], [ %v2_14d80, %dec_label_pc_14d7c ]
  %v0_14da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_14da0 = add i32 %v0_14da0, 3
  store i32 %v1_14da0, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_14da8:                               ; preds = %dec_label_pc_14d38
  br i1 %v5_14e18, label %dec_label_pc_14df4, label %dec_label_pc_14db0

dec_label_pc_14db0:                               ; preds = %dec_label_pc_14da8
  store i32 %v2_14e14, i32* %r2.global-to-local, align 4
  %v3_14db4 = load i32, i32* @r4, align 4
  store i32 %v3_14db4, i32* %stack_var_-12, align 4
  %v6_14db4 = load i32, i32* @r5, align 4
  %v8_14db4 = inttoptr i32 %v6_14db4 to i8*
  store i8* %v8_14db4, i8** %stack_var_-8, align 4
  %v11_14db4 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14db8

dec_label_pc_14db8:                               ; preds = %dec_label_pc_14db8.dec_label_pc_14db8_crit_edge, %dec_label_pc_14db0
  %v0_14ddc = phi i32 [ %v1_14ddc, %dec_label_pc_14db8.dec_label_pc_14db8_crit_edge ], [ %v0_14d7019, %dec_label_pc_14db0 ]
  %v0_14dbc = phi i32 [ %v0_14dbc.pre, %dec_label_pc_14db8.dec_label_pc_14db8_crit_edge ], [ %v1_14d28, %dec_label_pc_14db0 ]
  %v0_14db8 = phi i32 [ %v0_14db8.pre, %dec_label_pc_14db8.dec_label_pc_14db8_crit_edge ], [ %v2_14d2c, %dec_label_pc_14db0 ]
  %v3_14db8 = mul i32 %v0_14db8, 65536
  store i32 %v3_14db8, i32* %lr.global-to-local, align 4
  %v1_14dbc = add i32 %v0_14dbc, -4
  %v2_14dbc = inttoptr i32 %v1_14dbc to i32*
  %v3_14dbc = load i32, i32* %v2_14dbc, align 4
  store i32 %v3_14dbc, i32* @r3, align 4
  %v4_14dbc = add i32 %v0_14dbc, -8
  %v5_14dbc = inttoptr i32 %v4_14dbc to i32*
  %v6_14dbc = load i32, i32* %v5_14dbc, align 4
  store i32 %v6_14dbc, i32* %r4.global-to-local, align 4
  %v7_14dbc = add i32 %v0_14dbc, -12
  %v8_14dbc = inttoptr i32 %v7_14dbc to i32*
  %v9_14dbc = load i32, i32* %v8_14dbc, align 4
  store i32 %v9_14dbc, i32* %r5.global-to-local, align 4
  %v10_14dbc = add i32 %v0_14dbc, -16
  %v11_14dbc = inttoptr i32 %v10_14dbc to i32*
  %v12_14dbc = load i32, i32* %v11_14dbc, align 4
  store i32 %v10_14dbc, i32* %r1.global-to-local, align 4
  %v4_14dc0 = udiv i32 %v12_14dbc, 65536
  %v5_14dc0 = or i32 %v4_14dc0, %v3_14db8
  store i32 %v5_14dc0, i32* %lr.global-to-local, align 4
  %v3_14dc4 = mul i32 %v12_14dbc, 65536
  %v4_14dc8 = udiv i32 %v9_14dbc, 65536
  %v5_14dc8 = or i32 %v3_14dc4, %v4_14dc8
  store i32 %v5_14dc8, i32* @ip, align 4
  %v3_14dcc = mul i32 %v9_14dbc, 65536
  %v4_14dd0 = udiv i32 %v6_14dbc, 65536
  %v5_14dd0 = or i32 %v3_14dcc, %v4_14dd0
  store i32 %v5_14dd0, i32* %r5.global-to-local, align 4
  %v3_14dd4 = mul i32 %v6_14dbc, 65536
  %v4_14dd8 = udiv i32 %v3_14dbc, 65536
  %v5_14dd8 = or i32 %v3_14dd4, %v4_14dd8
  store i32 %v5_14dd8, i32* %r4.global-to-local, align 4
  %v1_14ddc = add i32 %v0_14ddc, -16
  %v2_14ddc = inttoptr i32 %v1_14ddc to i32*
  store i32 %v5_14dd8, i32* %v2_14ddc, align 4
  %v4_14ddc = add i32 %v0_14ddc, -12
  %v5_14ddc = inttoptr i32 %v4_14ddc to i32*
  %v6_14ddc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14ddc, i32* %v5_14ddc, align 4
  %v7_14ddc = add i32 %v0_14ddc, -8
  %v8_14ddc = inttoptr i32 %v7_14ddc to i32*
  %v9_14ddc = load i32, i32* @ip, align 4
  store i32 %v9_14ddc, i32* %v8_14ddc, align 4
  %v10_14ddc = add i32 %v0_14ddc, -4
  %v11_14ddc = inttoptr i32 %v10_14ddc to i32*
  %v12_14ddc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14ddc, i32* %v11_14ddc, align 4
  store i32 %v1_14ddc, i32* %r0.global-to-local, align 4
  %v0_14de0 = load i32, i32* %r2.global-to-local, align 4
  %v2_14de0 = add i32 %v0_14de0, -16
  store i32 %v2_14de0, i32* %r2.global-to-local, align 4
  %v6_14de4 = icmp slt i32 %v0_14de0, 16
  br i1 %v6_14de4, label %dec_label_pc_14de8, label %dec_label_pc_14db8.dec_label_pc_14db8_crit_edge

dec_label_pc_14db8.dec_label_pc_14db8_crit_edge:  ; preds = %dec_label_pc_14db8
  %v0_14db8.pre = load i32, i32* @r3, align 4
  %v0_14dbc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14db8

dec_label_pc_14de8:                               ; preds = %dec_label_pc_14db8
  %v2_14de8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14de8, i32* @r4, align 4
  %v5_14de8 = load i8*, i8** %stack_var_-8, align 4
  %v6_14de8 = ptrtoint i8* %v5_14de8 to i32
  store i32 %v6_14de8, i32* @r5, align 4
  store i32 %v11_14db4, i32* @lr, align 4
  %v2_14dec = add i32 %v0_14de0, -4
  store i32 %v2_14dec, i32* %r2.global-to-local, align 4
  %v4_14dec = add i32 %v0_14de0, 2147483632
  %v5_14dec = and i32 %v2_14dec, %v4_14dec
  %v6_14dec = icmp slt i32 %v5_14dec, 0
  store i1 %v6_14dec, i1* %cpsr_v.global-to-local, align 1
  %v7_14dec = icmp slt i32 %v2_14dec, 0
  store i1 %v7_14dec, i1* %cpsr_n.global-to-local, align 1
  %v8_14dec = icmp eq i32 %v2_14dec, 0
  store i1 %v8_14dec, i1* %cpsr_z.global-to-local, align 1
  %v5_14df0 = icmp slt i32 %v2_14de0, -12
  br i1 %v5_14df0, label %dec_label_pc_14e0c, label %dec_label_pc_14df4

dec_label_pc_14df4:                               ; preds = %dec_label_pc_14de8, %dec_label_pc_14da8, %dec_label_pc_14df4
  %v1_14e00 = phi i32 [ %v5_14e00, %dec_label_pc_14df4 ], [ %v1_14ddc, %dec_label_pc_14de8 ], [ %v0_14d7019, %dec_label_pc_14da8 ]
  %v0_14df4 = load i32, i32* @r3, align 4
  %v3_14df4 = mul i32 %v0_14df4, 65536
  store i32 %v3_14df4, i32* %ip.global-to-local, align 4
  %v0_14df8 = load i32, i32* %r1.global-to-local, align 4
  %v1_14df8 = add i32 %v0_14df8, -4
  %v2_14df8 = inttoptr i32 %v1_14df8 to i32*
  %v3_14df8 = load i32, i32* %v2_14df8, align 4
  store i32 %v3_14df8, i32* @r3, align 4
  store i32 %v1_14df8, i32* %r1.global-to-local, align 4
  %v4_14dfc = udiv i32 %v3_14df8, 65536
  %v5_14dfc = or i32 %v4_14dfc, %v3_14df4
  store i32 %v5_14dfc, i32* @ip, align 4
  %v2_14e00 = add i32 %v1_14e00, -4
  %v3_14e00 = inttoptr i32 %v2_14e00 to i32*
  store i32 %v5_14dfc, i32* %v3_14e00, align 4
  %v4_14e00 = load i32, i32* %r0.global-to-local, align 4
  %v5_14e00 = add i32 %v4_14e00, -4
  store i32 %v5_14e00, i32* %r0.global-to-local, align 4
  %v0_14e04 = load i32, i32* %r2.global-to-local, align 4
  %v2_14e04 = add i32 %v0_14e04, -4
  store i32 %v2_14e04, i32* %r2.global-to-local, align 4
  %v6_14e08 = icmp slt i32 %v0_14e04, 4
  br i1 %v6_14e08, label %dec_label_pc_14e0c.loopexit, label %dec_label_pc_14df4

dec_label_pc_14e0c.loopexit:                      ; preds = %dec_label_pc_14df4
  %v4_14e04 = sub i32 3, %v0_14e04
  %v5_14e04 = and i32 %v4_14e04, %v0_14e04
  %v6_14e04 = icmp slt i32 %v5_14e04, 0
  %v7_14e04 = icmp slt i32 %v2_14e04, 0
  store i1 %v6_14e04, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14e04, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14e0c

dec_label_pc_14e0c:                               ; preds = %dec_label_pc_14e0c.loopexit, %dec_label_pc_14de8
  %v2_14ce452 = phi i32 [ %v5_14e00, %dec_label_pc_14e0c.loopexit ], [ %v1_14ddc, %dec_label_pc_14de8 ]
  %v0_14cd448 = phi i32 [ %v2_14e04, %dec_label_pc_14e0c.loopexit ], [ %v2_14dec, %dec_label_pc_14de8 ]
  %v0_14e0c = load i32, i32* %r1.global-to-local, align 4
  %v1_14e0c = add i32 %v0_14e0c, 2
  store i32 %v1_14e0c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_14e14:                               ; preds = %dec_label_pc_14d28
  br i1 %v5_14e18, label %dec_label_pc_14e60, label %dec_label_pc_14e1c

dec_label_pc_14e1c:                               ; preds = %dec_label_pc_14e14
  store i32 %v2_14e14, i32* %r2.global-to-local, align 4
  %v3_14e20 = load i32, i32* @r4, align 4
  store i32 %v3_14e20, i32* %stack_var_-12, align 4
  %v6_14e20 = load i32, i32* @r5, align 4
  %v8_14e20 = inttoptr i32 %v6_14e20 to i8*
  store i8* %v8_14e20, i8** %stack_var_-8, align 4
  %v11_14e20 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14e24

dec_label_pc_14e24:                               ; preds = %dec_label_pc_14e24.dec_label_pc_14e24_crit_edge, %dec_label_pc_14e1c
  %v0_14e48 = phi i32 [ %v1_14e48, %dec_label_pc_14e24.dec_label_pc_14e24_crit_edge ], [ %v0_14d7019, %dec_label_pc_14e1c ]
  %v0_14e28 = phi i32 [ %v0_14e28.pre, %dec_label_pc_14e24.dec_label_pc_14e24_crit_edge ], [ %v1_14d28, %dec_label_pc_14e1c ]
  %v0_14e24 = phi i32 [ %v0_14e24.pre, %dec_label_pc_14e24.dec_label_pc_14e24_crit_edge ], [ %v2_14d2c, %dec_label_pc_14e1c ]
  %v3_14e24 = mul i32 %v0_14e24, 16777216
  store i32 %v3_14e24, i32* %lr.global-to-local, align 4
  %v1_14e28 = add i32 %v0_14e28, -4
  %v2_14e28 = inttoptr i32 %v1_14e28 to i32*
  %v3_14e28 = load i32, i32* %v2_14e28, align 4
  store i32 %v3_14e28, i32* @r3, align 4
  %v4_14e28 = add i32 %v0_14e28, -8
  %v5_14e28 = inttoptr i32 %v4_14e28 to i32*
  %v6_14e28 = load i32, i32* %v5_14e28, align 4
  store i32 %v6_14e28, i32* %r4.global-to-local, align 4
  %v7_14e28 = add i32 %v0_14e28, -12
  %v8_14e28 = inttoptr i32 %v7_14e28 to i32*
  %v9_14e28 = load i32, i32* %v8_14e28, align 4
  store i32 %v9_14e28, i32* %r5.global-to-local, align 4
  %v10_14e28 = add i32 %v0_14e28, -16
  %v11_14e28 = inttoptr i32 %v10_14e28 to i32*
  %v12_14e28 = load i32, i32* %v11_14e28, align 4
  store i32 %v10_14e28, i32* %r1.global-to-local, align 4
  %v4_14e2c = udiv i32 %v12_14e28, 256
  %v5_14e2c = or i32 %v4_14e2c, %v3_14e24
  store i32 %v5_14e2c, i32* %lr.global-to-local, align 4
  %v3_14e30 = mul i32 %v12_14e28, 16777216
  %v4_14e34 = udiv i32 %v9_14e28, 256
  %v5_14e34 = or i32 %v3_14e30, %v4_14e34
  store i32 %v5_14e34, i32* @ip, align 4
  %v3_14e38 = mul i32 %v9_14e28, 16777216
  %v4_14e3c = udiv i32 %v6_14e28, 256
  %v5_14e3c = or i32 %v3_14e38, %v4_14e3c
  store i32 %v5_14e3c, i32* %r5.global-to-local, align 4
  %v3_14e40 = mul i32 %v6_14e28, 16777216
  %v4_14e44 = udiv i32 %v3_14e28, 256
  %v5_14e44 = or i32 %v3_14e40, %v4_14e44
  store i32 %v5_14e44, i32* %r4.global-to-local, align 4
  %v1_14e48 = add i32 %v0_14e48, -16
  %v2_14e48 = inttoptr i32 %v1_14e48 to i32*
  store i32 %v5_14e44, i32* %v2_14e48, align 4
  %v4_14e48 = add i32 %v0_14e48, -12
  %v5_14e48 = inttoptr i32 %v4_14e48 to i32*
  %v6_14e48 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14e48, i32* %v5_14e48, align 4
  %v7_14e48 = add i32 %v0_14e48, -8
  %v8_14e48 = inttoptr i32 %v7_14e48 to i32*
  %v9_14e48 = load i32, i32* @ip, align 4
  store i32 %v9_14e48, i32* %v8_14e48, align 4
  %v10_14e48 = add i32 %v0_14e48, -4
  %v11_14e48 = inttoptr i32 %v10_14e48 to i32*
  %v12_14e48 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14e48, i32* %v11_14e48, align 4
  store i32 %v1_14e48, i32* %r0.global-to-local, align 4
  %v0_14e4c = load i32, i32* %r2.global-to-local, align 4
  %v2_14e4c = add i32 %v0_14e4c, -16
  store i32 %v2_14e4c, i32* %r2.global-to-local, align 4
  %v6_14e50 = icmp slt i32 %v0_14e4c, 16
  br i1 %v6_14e50, label %dec_label_pc_14e54, label %dec_label_pc_14e24.dec_label_pc_14e24_crit_edge

dec_label_pc_14e24.dec_label_pc_14e24_crit_edge:  ; preds = %dec_label_pc_14e24
  %v0_14e24.pre = load i32, i32* @r3, align 4
  %v0_14e28.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14e24

dec_label_pc_14e54:                               ; preds = %dec_label_pc_14e24
  %v2_14e54 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14e54, i32* @r4, align 4
  %v5_14e54 = load i8*, i8** %stack_var_-8, align 4
  %v6_14e54 = ptrtoint i8* %v5_14e54 to i32
  store i32 %v6_14e54, i32* @r5, align 4
  store i32 %v11_14e20, i32* @lr, align 4
  %v2_14e58 = add i32 %v0_14e4c, -4
  store i32 %v2_14e58, i32* %r2.global-to-local, align 4
  %v4_14e58 = add i32 %v0_14e4c, 2147483632
  %v5_14e58 = and i32 %v2_14e58, %v4_14e58
  %v6_14e58 = icmp slt i32 %v5_14e58, 0
  store i1 %v6_14e58, i1* %cpsr_v.global-to-local, align 1
  %v7_14e58 = icmp slt i32 %v2_14e58, 0
  store i1 %v7_14e58, i1* %cpsr_n.global-to-local, align 1
  %v8_14e58 = icmp eq i32 %v2_14e58, 0
  store i1 %v8_14e58, i1* %cpsr_z.global-to-local, align 1
  %v5_14e5c = icmp slt i32 %v2_14e4c, -12
  br i1 %v5_14e5c, label %dec_label_pc_14e78, label %dec_label_pc_14e60

dec_label_pc_14e60:                               ; preds = %dec_label_pc_14e54, %dec_label_pc_14e14, %dec_label_pc_14e60
  %v1_14e6c = phi i32 [ %v5_14e6c, %dec_label_pc_14e60 ], [ %v1_14e48, %dec_label_pc_14e54 ], [ %v0_14d7019, %dec_label_pc_14e14 ]
  %v0_14e60 = load i32, i32* @r3, align 4
  %v3_14e60 = mul i32 %v0_14e60, 16777216
  store i32 %v3_14e60, i32* %ip.global-to-local, align 4
  %v0_14e64 = load i32, i32* %r1.global-to-local, align 4
  %v1_14e64 = add i32 %v0_14e64, -4
  %v2_14e64 = inttoptr i32 %v1_14e64 to i32*
  %v3_14e64 = load i32, i32* %v2_14e64, align 4
  store i32 %v3_14e64, i32* @r3, align 4
  store i32 %v1_14e64, i32* %r1.global-to-local, align 4
  %v4_14e68 = udiv i32 %v3_14e64, 256
  %v5_14e68 = or i32 %v4_14e68, %v3_14e60
  store i32 %v5_14e68, i32* @ip, align 4
  %v2_14e6c = add i32 %v1_14e6c, -4
  %v3_14e6c = inttoptr i32 %v2_14e6c to i32*
  store i32 %v5_14e68, i32* %v3_14e6c, align 4
  %v4_14e6c = load i32, i32* %r0.global-to-local, align 4
  %v5_14e6c = add i32 %v4_14e6c, -4
  store i32 %v5_14e6c, i32* %r0.global-to-local, align 4
  %v0_14e70 = load i32, i32* %r2.global-to-local, align 4
  %v2_14e70 = add i32 %v0_14e70, -4
  store i32 %v2_14e70, i32* %r2.global-to-local, align 4
  %v6_14e74 = icmp slt i32 %v0_14e70, 4
  br i1 %v6_14e74, label %dec_label_pc_14e78.loopexit, label %dec_label_pc_14e60

dec_label_pc_14e78.loopexit:                      ; preds = %dec_label_pc_14e60
  %v4_14e70 = sub i32 3, %v0_14e70
  %v5_14e70 = and i32 %v4_14e70, %v0_14e70
  %v6_14e70 = icmp slt i32 %v5_14e70, 0
  %v7_14e70 = icmp slt i32 %v2_14e70, 0
  store i1 %v6_14e70, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14e70, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14e78

dec_label_pc_14e78:                               ; preds = %dec_label_pc_14e78.loopexit, %dec_label_pc_14e54
  %v2_14ce453 = phi i32 [ %v5_14e6c, %dec_label_pc_14e78.loopexit ], [ %v1_14e48, %dec_label_pc_14e54 ]
  %v0_14cd449 = phi i32 [ %v2_14e70, %dec_label_pc_14e78.loopexit ], [ %v2_14e58, %dec_label_pc_14e54 ]
  %v0_14e78 = load i32, i32* %r1.global-to-local, align 4
  %v1_14e78 = add i32 %v0_14e78, 1
  store i32 %v1_14e78, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_14e6c, { 0, 2, 1 }
  uselistorder i32 %v3_14e60, { 1, 0 }
  uselistorder i32 %v2_14e58, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14e48, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14e28, { 1, 0 }
  uselistorder i32 %v3_14e24, { 1, 0 }
  uselistorder i32 %v0_14e28, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14e48, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14e00, { 0, 2, 1 }
  uselistorder i32 %v3_14df4, { 1, 0 }
  uselistorder i32 %v2_14dec, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14ddc, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14dbc, { 1, 0 }
  uselistorder i32 %v3_14db8, { 1, 0 }
  uselistorder i32 %v0_14dbc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14ddc, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14d94, { 0, 2, 1 }
  uselistorder i32 %v3_14d88, { 1, 0 }
  uselistorder i32 %v2_14d80, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14d70, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14d50, { 1, 0 }
  uselistorder i32 %v3_14d4c, { 1, 0 }
  uselistorder i32 %v0_14d50, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14d70, { 3, 2, 1, 0 }
  uselistorder i1 %v5_14e18, { 2, 0, 1 }
  uselistorder i32 %v0_14d30, { 1, 0 }
  uselistorder i32 %v0_14e1c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_14d7019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14d20, { 2, 1, 0 }
  uselistorder i32 %v0_14d20, { 2, 0, 1 }
  uselistorder i32 %v2_14d18, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14d18, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14d18, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_14d7020, { 2, 1, 0 }
  uselistorder i32 %v11_14cf4, { 1, 0 }
  uselistorder i32 %v7_14cf4, { 1, 0 }
  uselistorder i32 %v1_14cd4, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_14cd4, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14cd8, { 1, 0 }
  uselistorder i32 %v7_14ccc, { 0, 2, 1 }
  uselistorder i32 %v10_14cc8, { 1, 0 }
  uselistorder i32 %v9_14cc0, { 1, 0, 2 }
  uselistorder i32 %v6_14cbc, { 1, 0 }
  uselistorder i32 %v2_14cb4, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_14cb4, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_14cc4, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14ca8, { 0, 2, 1 }
  uselistorder i32 %v13_14ca4, { 1, 0 }
  uselistorder i32 %v4_14ca0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_14ca0, { 2, 0, 1 }
  uselistorder i32 %v6_14ca8, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14c98, { 0, 2, 1 }
  uselistorder i32 %v16_14c94, { 1, 0 }
  uselistorder i32 %v4_14c90, { 1, 2, 0 }
  uselistorder i32 %v0_14ca0.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_14c98, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14c84, { 0, 3, 2, 1 }
  uselistorder i32 %v10_14c80, { 1, 0 }
  uselistorder i32 %v1_14c7c, { 1, 0 }
  uselistorder i32 %v10_14c78, { 1, 0 }
  uselistorder i32 %v0_14c78, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14c7c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_14c70, { 0, 2, 1 }
  uselistorder i32 %v2_14c64, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_14c64, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_14c7c37, { 1, 2, 0 }
  uselistorder i32 %v1_14c5c, { 2, 1, 0 }
  uselistorder i32 %v1_14c54, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14c4c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_14c48, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_14c44, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_14c44, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_14c34, { 0, 2, 1 }
  uselistorder i32 %v4_14c30, { 1, 0 }
  uselistorder i32 %v3_14c24, { 1, 0 }
  uselistorder i32 %v1_14c1c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14c10, { 1, 0 }
  uselistorder i32 %v12_14c0c, { 0, 2, 1 }
  uselistorder i32 %v8_14bec, { 1, 0, 2 }
  uselistorder i32 %v5_14bec, { 1, 0, 2 }
  uselistorder i32 %v2_14bec, { 1, 0, 2 }
  uselistorder i32 %v0_14bec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14c0c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_14bc8, { 0, 2, 1 }
  uselistorder i32 %v4_14bc4, { 1, 0 }
  uselistorder i32 %v3_14bb8, { 1, 0 }
  uselistorder i32 %v1_14bb0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14ba4, { 1, 0 }
  uselistorder i32 %v12_14ba0, { 0, 2, 1 }
  uselistorder i32 %v8_14b80, { 1, 0, 2 }
  uselistorder i32 %v5_14b80, { 1, 0, 2 }
  uselistorder i32 %v2_14b80, { 1, 0, 2 }
  uselistorder i32 %v0_14b80, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14ba0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_14b5c, { 0, 2, 1 }
  uselistorder i32 %v4_14b58, { 1, 0 }
  uselistorder i32 %v3_14b4c, { 1, 0 }
  uselistorder i32 %v1_14b44, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14b38, { 1, 0 }
  uselistorder i32 %v12_14b34, { 0, 2, 1 }
  uselistorder i32 %v8_14b14, { 1, 0, 2 }
  uselistorder i32 %v5_14b14, { 1, 0, 2 }
  uselistorder i32 %v2_14b14, { 1, 0, 2 }
  uselistorder i32 %v0_14b14, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14b34, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_14b70, { 0, 2, 1 }
  uselistorder i32 %v1_14b6c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_14af0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_14af0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_14b74, { 1, 0, 3, 2 }
  uselistorder i32 %v0_14c0c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_14ae4, { 1, 0 }
  uselistorder i32 %v0_14ae4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_14adc, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_14adc, { 1, 0, 2 }
  uselistorder i32 %v0_14adc, { 2, 0, 1, 3 }
  uselistorder i32 %v0_14c0c77, { 1, 0 }
  uselistorder i32 %v1_14abc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_14ac4, { 1, 0 }
  uselistorder i32 %v0_14a98, { 3, 0, 1, 2 }
  uselistorder i32 %v1_14a8c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_14a78, { 1, 0, 2 }
  uselistorder i32 %v1_14a74, { 1, 0 }
  uselistorder i32 %v1_14a6c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_14a6c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_14a64, { 0, 2, 1 }
  uselistorder i32 %v3_14a64, { 3, 0, 1, 2 }
  uselistorder i1 %v0_14a64, { 1, 0 }
  uselistorder i1 %v1_14a64, { 1, 0 }
  uselistorder i32 %v3_14a60, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14a58, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14a44, { 1, 2, 0 }
  uselistorder i32 %v1_14a3c, { 0, 2, 1 }
  uselistorder i32 %v12_14a38, { 0, 1, 3, 2 }
  uselistorder i32 %v0_14a2c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14a30, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_14a20, { 0, 2, 1 }
  uselistorder i32 %v1_14a18, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_14a18, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_14a10, { 1, 0 }
  uselistorder i32 %v1_14a08, { 2, 1, 0 }
  uselistorder i32 %v2_14a00, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_14a00, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_149fc, { 1, 0 }
  uselistorder i32 %v2_149f0, { 1, 0 }
  uselistorder i32 %v1_149f0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_149f0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 33, 32, 41, 34, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 5, 7, 6, 9, 0, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 4, 19, 20, 21, 22, 23, 3, 24, 1, 25, 2, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 5, 7, 6, 9, 0, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 4, 20, 21, 22, 23, 24, 3, 25, 1, 26, 2, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 12, 13, 14, 0, 25, 1, 26, 15, 16, 3, 17, 4, 18, 5, 19, 6, 20, 7, 21, 8, 9, 10, 22, 11, 23, 2, 24 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 30, 2, 4, 5, 3, 6, 7, 8, 9, 19, 35, 40, 38, 39, 37, 31, 32, 20, 21, 33, 34, 36, 25, 26, 27, 22, 28, 29, 14, 15, 10, 11, 12, 13, 16, 17, 18, 23, 24, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 7, 8, 9, 15, 24, 26, 10, 11, 12, 0, 13, 14, 16, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 1, 23, 25 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 2, 4, 11, 3, 5, 6, 12, 13, 7, 8, 9, 10, 17, 18, 19, 14, 15, 16, 1 }
  uselistorder i32 40, { 2, 6, 8, 1, 4, 3, 7, 9, 5, 10, 11, 12, 13, 14, 15, 17, 16, 0 }
  uselistorder i32 36, { 4, 19, 5, 6, 7, 20, 8, 17, 9, 18, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 1, 2, 3, 0 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1 }
  uselistorder i32 24, { 0, 56, 57, 58, 59, 8, 9, 10, 12, 11, 13, 1, 14, 60, 61, 62, 15, 63, 16, 17, 64, 18, 55, 88, 89, 51, 52, 53, 54, 19, 20, 21, 22, 99, 100, 23, 102, 24, 2, 25, 90, 91, 26, 92, 49, 50, 75, 27, 76, 28, 77, 82, 83, 29, 78, 79, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 81, 84, 85, 86, 87, 30, 31, 32, 33, 3, 34, 35, 93, 36, 37, 4, 38, 39, 40, 41, 42, 43, 94, 44, 5, 95, 96, 97, 98, 45, 46, 103, 47, 6, 104, 7, 101, 48 }
  uselistorder i32 27, { 1, 0, 2, 3 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 162, 163, 164, 165, 166, 167, 168, 169, 170, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3, 49, 50, 171, 172, 13, 14, 125, 126, 127, 128, 129, 130, 118, 119, 120, 131, 144, 145, 132, 133, 134, 135, 136, 137, 138, 2, 139, 140, 142, 143, 141, 51, 52, 53, 54, 55, 56, 146, 147, 148, 57, 149, 150, 29, 15, 30, 31, 32, 33, 0, 37, 38, 34, 35, 36, 16, 17, 18, 19, 20, 21, 22, 24, 23, 1, 25, 26, 27, 28, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 107, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 151, 152, 153, 154, 155, 156, 157, 161, 121, 122, 123, 124, 158, 159, 160, 98, 99 }
  uselistorder label %dec_label_pc_14e60, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14df4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14d88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14d28, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_14cb4, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_14c78, { 1, 0 }
  uselistorder label %dec_label_pc_14c64, { 1, 0 }
  uselistorder label %dec_label_pc_14c24, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14bb8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14b4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14aec, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_14abc, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_14a58, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_14a18, { 1, 0 }
}

define i32 @function_14e80(i32 %arg1) local_unnamed_addr {
dec_label_pc_14e80:
  %v1_14e80 = and i32 %arg1, -4
  %v1_14e84 = inttoptr i32 %v1_14e80 to i32*
  %v2_14e84 = load i32, i32* %v1_14e84, align 4
  %v1_14e88 = urem i32 %arg1, 4
  store i32 %v1_14e88, i32* @r3, align 4
  %v2_14e88 = icmp eq i32 %v1_14e88, 0
  %v1_14e8c = sub nsw i32 0, %v1_14e88
  br i1 %v2_14e88, label %.preheader.preheader, label %dec_label_pc_14e94

dec_label_pc_14e94:                               ; preds = %dec_label_pc_14e80
  %v1_14e94 = or i32 %v2_14e84, 255
  %v7_14e98 = icmp eq i32 %v1_14e88, 1
  br i1 %v7_14e98, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_14e94
  %v9_14e9c = or i32 %v2_14e84, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_14e94, %bb
  %v8_14ea4 = phi i32 [ %v1_14e94, %dec_label_pc_14e94 ], [ %v9_14e9c, %bb ]
  %v1_14ea0 = add nsw i32 %v1_14e88, -2
  store i32 %v1_14ea0, i32* @r3, align 4
  %v7_14ea4 = icmp eq i32 %v1_14e88, 3
  br i1 %v7_14ea4, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_14ea4 = or i32 %v8_14ea4, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_14e80
  %v1_14eb4.ph = phi i32 [ %v2_14e84, %dec_label_pc_14e80 ], [ %v9_14ea4, %bb34 ], [ %v8_14ea4, %bb33 ]
  %v1_14ea838 = urem i32 %v1_14eb4.ph, 256
  %v2_14ea839 = icmp eq i32 %v1_14ea838, 0
  %v2_14eac40 = and i32 %v1_14eb4.ph, 65280
  %v3_14eac41 = icmp eq i32 %v2_14eac40, 0
  %or.cond42 = or i1 %v2_14ea839, %v3_14eac41
  %v2_14eb043 = and i32 %v1_14eb4.ph, 16711680
  %v3_14eb044 = icmp eq i32 %v2_14eb043, 0
  %or.cond3145 = or i1 %v3_14eb044, %or.cond42
  %v4_14eb446 = icmp ult i32 %v1_14eb4.ph, 16777216
  %or.cond3247 = or i1 %v4_14eb446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_14ec4, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_14eb81349 = phi i32 [ %v2_14eb814, %.thread4 ], [ %v1_14e8c, %.preheader.preheader ]
  %v1_14ebc48.in = phi i32 [ %v1_14ebc48, %.thread4 ], [ %v1_14e80, %.preheader.preheader ]
  %v1_14ebc48 = add i32 %v1_14ebc48.in, 4
  %v2_14eb814 = add i32 %v1_14eb81349, 4
  %v2_14ebc = inttoptr i32 %v1_14ebc48 to i32*
  %v3_14ebc = load i32, i32* %v2_14ebc, align 4
  %v1_14ea8 = urem i32 %v3_14ebc, 256
  %v2_14ea8 = icmp eq i32 %v1_14ea8, 0
  %v2_14eac = and i32 %v3_14ebc, 65280
  %v3_14eac = icmp eq i32 %v2_14eac, 0
  %or.cond = or i1 %v2_14ea8, %v3_14eac
  %v2_14eb0 = and i32 %v3_14ebc, 16711680
  %v3_14eb0 = icmp eq i32 %v2_14eb0, 0
  %or.cond31 = or i1 %v3_14eb0, %or.cond
  %v4_14eb4 = icmp ult i32 %v3_14ebc, 16777216
  %or.cond32 = or i1 %v4_14eb4, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_14ec4, label %.thread4

dec_label_pc_14ec4:                               ; preds = %.thread4, %.preheader.preheader
  %v1_14eb813.lcssa = phi i32 [ %v1_14e8c, %.preheader.preheader ], [ %v2_14eb814, %.thread4 ]
  %v2_14ea8.lcssa = phi i1 [ %v2_14ea839, %.preheader.preheader ], [ %v2_14ea8, %.thread4 ]
  %v3_14eac.lcssa = phi i1 [ %v3_14eac41, %.preheader.preheader ], [ %v3_14eac, %.thread4 ]
  %v3_14eb0.lcssa = phi i1 [ %v3_14eb044, %.preheader.preheader ], [ %v3_14eb0, %.thread4 ]
  br i1 %v2_14ea8.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_14ec4
  %v2_14ec8 = add i32 %v1_14eb813.lcssa, 1
  br i1 %v3_14eac.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_14ed017 = add i32 %v1_14eb813.lcssa, 2
  br i1 %v3_14eb0.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_14ed8 = add i32 %v1_14eb813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_14ec4, %bb35, %bb36, %bb37
  %v1_14edc = phi i32 [ %v2_14ec8, %bb35 ], [ %v2_14ed017, %bb36 ], [ %v2_14ed8, %bb37 ], [ %v1_14eb813.lcssa, %dec_label_pc_14ec4 ]
  ret i32 %v1_14edc

; uselistorder directives
  uselistorder i32 %v1_14eb813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_14ebc, { 3, 2, 1, 0 }
  uselistorder i32 %v1_14eb4.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_14e88, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 15 }
  uselistorder i32 -2, { 1, 3, 4, 2, 6, 7, 8, 0, 5, 22, 21, 23, 24, 25, 14, 15, 16, 17, 18, 19, 20, 9, 10, 11, 12, 13 }
  uselistorder i32 65535, { 2, 91, 0, 1, 13, 12, 3, 4, 43, 44, 23, 45, 22, 46, 15, 14, 5, 25, 47, 24, 48, 50, 16, 49, 6, 51, 52, 27, 53, 26, 54, 55, 56, 57, 28, 58, 59, 17, 60, 7, 31, 61, 62, 63, 30, 64, 29, 65, 67, 18, 66, 8, 68, 69, 35, 70, 32, 71, 33, 72, 34, 73, 19, 74, 75, 36, 76, 37, 77, 80, 81, 20, 78, 79, 9, 40, 82, 38, 83, 39, 84, 86, 21, 85, 10, 11, 87, 88, 42, 89, 41, 90 }
  uselistorder i32 -4, { 40, 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 37, 38, 39 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_14ee0(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_14ee4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_14ee0

dec_label_pc_14ee0:                               ; preds = %bb3, %bb
  %v0_14ee4 = phi i32 [ %v0_14ee4.pre, %bb ], [ %v5_14ee4, %bb3 ]
  %v0_14ee0 = phi i32 [ %tmp, %bb ], [ %v5_14ee0, %bb3 ]
  %v1_14ee0 = inttoptr i32 %v0_14ee0 to i8*
  %v2_14ee0 = load i8, i8* %v1_14ee0, align 1
  %v1_14ee4 = inttoptr i32 %v0_14ee4 to i8*
  %v2_14ee4 = load i8, i8* %v1_14ee4, align 1
  %v3_14ee4 = zext i8 %v2_14ee4 to i32
  %v2_14ee8 = icmp eq i8 %v2_14ee0, 0
  br i1 %v2_14ee8, label %.dec_label_pc_14ef4_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_14ee0
  %v5_14ee4 = add i32 %v0_14ee4, 1
  %v5_14ee0 = add i32 %v0_14ee0, 1
  %v3_14ee0 = zext i8 %v2_14ee0 to i32
  %v10_14eec = icmp eq i8 %v2_14ee0, %v2_14ee4
  br i1 %v10_14eec, label %dec_label_pc_14ee0, label %dec_label_pc_14ef4

.dec_label_pc_14ef4_crit_edge:                    ; preds = %dec_label_pc_14ee0
  br label %dec_label_pc_14ef4

dec_label_pc_14ef4:                               ; preds = %bb3, %.dec_label_pc_14ef4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_14ef4_crit_edge ], [ %v3_14ee0, %bb3 ]
  %v2_14ef4.pre-phi = sub nsw i32 %.pn, %v3_14ee4
  ret i32 %v2_14ef4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_14ee0, { 0, 2, 1 }
  uselistorder i32 %v0_14ee0, { 1, 0 }
  uselistorder i32 %v0_14ee4, { 1, 0 }
  uselistorder label %dec_label_pc_14ef4, { 1, 0 }
}

define i32 @function_14f00() local_unnamed_addr {
dec_label_pc_14f00:
  %stack_var_-16 = alloca i32, align 4
  %v3_14f00 = load i32, i32* @r4, align 4
  store i32 %v3_14f00, i32* %stack_var_-16, align 4
  %v6_14f00 = load i32, i32* @r5, align 4
  %v9_14f00 = load i32, i32* @r6, align 4
  %v0_14f04 = load i32, i32* @r0, align 4
  %v0_14f08 = load i32, i32* @r1, align 4
  store i32 %v0_14f08, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_14f248 = inttoptr i32 %v0_14f04 to i8*
  %v2_14f249 = load i8, i8* %v1_14f248, align 1
  %v2_14f2811 = icmp eq i8 %v2_14f249, 0
  store i32 %v0_14f08, i32* @r0, align 4
  %v1_14f3012 = add i32 %v0_14f04, 1
  store i32 %v1_14f3012, i32* @r4, align 4
  br i1 %v2_14f2811, label %dec_label_pc_14f38, label %dec_label_pc_14f14

dec_label_pc_14f14:                               ; preds = %dec_label_pc_14f00, %dec_label_pc_14f20
  %v3_14f2414.in = phi i8 [ %v2_14f24, %dec_label_pc_14f20 ], [ %v2_14f249, %dec_label_pc_14f00 ]
  %v0_14f2c13 = phi i32 [ %v0_14f2c.pre, %dec_label_pc_14f20 ], [ %v0_14f08, %dec_label_pc_14f00 ]
  %v3_14f2414 = zext i8 %v3_14f2414.in to i32
  %v2_14f14 = call i32 @function_150cc(i32 %v0_14f2c13, i32 %v3_14f2414)
  %v2_14f18 = icmp eq i32 %v2_14f14, 0
  %v0_14f20 = load i32, i32* @r5, align 4
  br i1 %v2_14f18, label %dec_label_pc_14f20, label %dec_label_pc_14f38

dec_label_pc_14f20:                               ; preds = %dec_label_pc_14f14
  %v1_14f20 = add i32 %v0_14f20, 1
  %v0_14f24.pre = load i32, i32* @r4, align 4
  %v0_14f2c.pre = load i32, i32* @r6, align 4
  store i32 %v1_14f20, i32* @r5, align 4
  %v1_14f24 = inttoptr i32 %v0_14f24.pre to i8*
  %v2_14f24 = load i8, i8* %v1_14f24, align 1
  %v2_14f28 = icmp eq i8 %v2_14f24, 0
  store i32 %v0_14f2c.pre, i32* @r0, align 4
  %v1_14f30 = add i32 %v0_14f24.pre, 1
  store i32 %v1_14f30, i32* @r4, align 4
  br i1 %v2_14f28, label %dec_label_pc_14f38, label %dec_label_pc_14f14

dec_label_pc_14f38:                               ; preds = %dec_label_pc_14f20, %dec_label_pc_14f14, %dec_label_pc_14f00
  %v0_14f38 = phi i32 [ 0, %dec_label_pc_14f00 ], [ %v0_14f20, %dec_label_pc_14f14 ], [ %v1_14f20, %dec_label_pc_14f20 ]
  %v2_14f3c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14f3c, i32* @r4, align 4
  store i32 %v6_14f00, i32* @r5, align 4
  store i32 %v9_14f00, i32* @r6, align 4
  ret i32 %v0_14f38

; uselistorder directives
  uselistorder i8 %v2_14f24, { 1, 0 }
  uselistorder i32 %v0_14f2c.pre, { 1, 0 }
  uselistorder i32 %v0_14f24.pre, { 1, 0 }
  uselistorder i32* @r6, { 28, 3, 29, 30, 4, 31, 32, 33, 5, 34, 35, 23, 24, 36, 37, 6, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 7, 8, 55, 56, 57, 58, 59, 60, 61, 62, 25, 26, 27, 9, 10, 11, 389, 390, 391, 392, 393, 394, 395, 63, 12, 64, 13, 65, 387, 388, 336, 340, 341, 342, 343, 337, 338, 339, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 344, 369, 370, 371, 345, 346, 347, 348, 349, 14, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 365, 367, 361, 362, 363, 364, 366, 368, 113, 114, 0, 115, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 89, 138, 139, 140, 141, 142, 143, 144, 90, 66, 145, 91, 92, 93, 94, 95, 70, 71, 87, 88, 67, 68, 69, 16, 15, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 96, 97, 98, 99, 100, 101, 102, 146, 147, 148, 2, 1, 149, 150, 151, 152, 153, 154, 155, 21, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 103, 104, 17, 105, 106, 107, 108, 109, 110, 111, 112, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 18, 182, 183, 184, 185, 186, 187, 201, 202, 203, 204, 22, 205, 206, 207, 19, 208, 209, 210, 214, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 225, 222, 223, 224, 226, 227, 228, 229, 230, 231, 236, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 248, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 260, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 270, 271, 272, 274, 275, 276, 277, 284, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 296, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 372, 373, 374, 380, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 20, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335 }
  uselistorder label %dec_label_pc_14f14, { 1, 0 }
}

define i32 @function_14f44(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14f44:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_14f742 = load i32, i32* @r0, align 4
  %v1_14f743 = inttoptr i32 %v0_14f742 to i8*
  %v2_14f744 = load i8, i8* %v1_14f743, align 1
  %v3_14f745 = zext i8 %v2_14f744 to i32
  store i32 %v3_14f745, i32* @ip, align 4
  %v2_14f786 = icmp eq i8 %v2_14f744, 0
  br i1 %v2_14f786, label %dec_label_pc_14f84, label %dec_label_pc_14f58.preheader

dec_label_pc_14f50:                               ; preds = %dec_label_pc_14f58
  %v3_14f58 = zext i8 %v2_14f58 to i32
  %v1_14f60 = add i32 %v0_14f60, 1
  %v9_14f50 = icmp eq i32 %v0_14f5010, %v3_14f58
  br i1 %v9_14f50, label %dec_label_pc_14f6c, label %dec_label_pc_14f58

dec_label_pc_14f58:                               ; preds = %dec_label_pc_14f58.preheader, %dec_label_pc_14f50
  %v0_14f60 = phi i32 [ %tmp, %dec_label_pc_14f58.preheader ], [ %v1_14f60, %dec_label_pc_14f50 ]
  %v1_14f58 = inttoptr i32 %v0_14f60 to i8*
  %v2_14f58 = load i8, i8* %v1_14f58, align 1
  %v2_14f5c = icmp eq i8 %v2_14f58, 0
  br i1 %v2_14f5c, label %dec_label_pc_14f84, label %dec_label_pc_14f50

dec_label_pc_14f6c:                               ; preds = %dec_label_pc_14f50
  %v1_14f6c = add i32 %v0_14f6c, 1
  %v1_14f70 = add i32 %v0_14f70, 1
  %v1_14f74 = inttoptr i32 %v1_14f70 to i8*
  %v2_14f74 = load i8, i8* %v1_14f74, align 1
  %v3_14f74 = zext i8 %v2_14f74 to i32
  store i32 %v3_14f74, i32* @ip, align 4
  %v2_14f78 = icmp eq i8 %v2_14f74, 0
  br i1 %v2_14f78, label %dec_label_pc_14f84, label %dec_label_pc_14f58.preheader

dec_label_pc_14f58.preheader:                     ; preds = %dec_label_pc_14f44, %dec_label_pc_14f6c
  %v0_14f70 = phi i32 [ %v1_14f70, %dec_label_pc_14f6c ], [ %v0_14f742, %dec_label_pc_14f44 ]
  %v0_14f6c = phi i32 [ %v1_14f6c, %dec_label_pc_14f6c ], [ 0, %dec_label_pc_14f44 ]
  %v0_14f5010 = phi i32 [ %v3_14f74, %dec_label_pc_14f6c ], [ %v3_14f745, %dec_label_pc_14f44 ]
  br label %dec_label_pc_14f58

dec_label_pc_14f84:                               ; preds = %dec_label_pc_14f6c, %dec_label_pc_14f58, %dec_label_pc_14f44
  %v0_14f84 = phi i32 [ 0, %dec_label_pc_14f44 ], [ %v0_14f6c, %dec_label_pc_14f58 ], [ %v1_14f6c, %dec_label_pc_14f6c ]
  ret i32 %v0_14f84

; uselistorder directives
  uselistorder i32 %v0_14f60, { 1, 0 }
  uselistorder label %dec_label_pc_14f58.preheader, { 1, 0 }
}

define i32 @function_14f90(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14f90:
  store i32 %arg1, i32* @r0, align 4
  %v1_14f94 = urem i32 %arg2, 256
  store i32 %v1_14f94, i32* @r4, align 4
  %v2_14f94 = icmp eq i32 %v1_14f94, 0
  br i1 %v2_14f94, label %dec_label_pc_14fa8, label %dec_label_pc_14fbc.preheader

dec_label_pc_14fbc.preheader:                     ; preds = %dec_label_pc_14f90
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_14fc43 = call i32 @function_150cc(i32 %arg1, i32 %v1_14f94)
  %v2_14fc85 = icmp eq i32 %v2_14fc43, 0
  br i1 %v2_14fc85, label %dec_label_pc_14fd0, label %dec_label_pc_14fb4

dec_label_pc_14fa8:                               ; preds = %dec_label_pc_14f90
  %v2_14fac = call i32 @function_150cc(i32 %arg1, i32 0)
  br label %dec_label_pc_14fd4

dec_label_pc_14fb4:                               ; preds = %dec_label_pc_14fbc.preheader, %dec_label_pc_14fb4
  %v2_14fc46 = phi i32 [ %v2_14fc4, %dec_label_pc_14fb4 ], [ %v2_14fc43, %dec_label_pc_14fbc.preheader ]
  store i32 %v2_14fc46, i32* @r5, align 4
  %v1_14fb8 = add i32 %v2_14fc46, 1
  store i32 %v1_14fb8, i32* @r0, align 4
  %v0_14fc0 = load i32, i32* @r4, align 4
  %v2_14fc4 = call i32 @function_150cc(i32 %v1_14fb8, i32 %v0_14fc0)
  %v2_14fc8 = icmp eq i32 %v2_14fc4, 0
  br i1 %v2_14fc8, label %dec_label_pc_14fd0, label %dec_label_pc_14fb4

dec_label_pc_14fd0:                               ; preds = %dec_label_pc_14fb4, %dec_label_pc_14fbc.preheader
  %v0_14fd0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_14fd4

dec_label_pc_14fd4:                               ; preds = %dec_label_pc_14fa8, %dec_label_pc_14fd0
  %storemerge = phi i32 [ %v2_14fac, %dec_label_pc_14fa8 ], [ %v0_14fd0, %dec_label_pc_14fd0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_14fc4, { 1, 0 }
  uselistorder i32 %v1_14fb8, { 1, 0 }
  uselistorder i32 %v1_14f94, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_150cc, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_14fd4, { 1, 0 }
  uselistorder label %dec_label_pc_14fb4, { 1, 0 }
}

define i32 @function_14fe0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14fe0:
  %v1_14fe4 = urem i32 %arg1, 256
  %v0_150042 = load i32, i32* @r0, align 4
  %v1_150043 = urem i32 %v0_150042, 4
  %v2_150044 = icmp eq i32 %v1_150043, 0
  br i1 %v2_150044, label %dec_label_pc_1500c, label %dec_label_pc_14fec

dec_label_pc_14fec:                               ; preds = %dec_label_pc_14fe0, %dec_label_pc_15000
  %v0_15000 = phi i32 [ %v1_15000, %dec_label_pc_15000 ], [ %v0_150042, %dec_label_pc_14fe0 ]
  %v1_14fec = inttoptr i32 %v0_15000 to i8*
  %v2_14fec = load i8, i8* %v1_14fec, align 1
  %v3_14fec = zext i8 %v2_14fec to i32
  %v9_14ff0 = icmp eq i32 %v3_14fec, %v1_14fe4
  br i1 %v9_14ff0, label %dec_label_pc_150bc, label %dec_label_pc_14ff8

dec_label_pc_14ff8:                               ; preds = %dec_label_pc_14fec
  %v2_14ff8 = icmp eq i8 %v2_14fec, 0
  br i1 %v2_14ff8, label %dec_label_pc_150bc, label %dec_label_pc_15000

dec_label_pc_15000:                               ; preds = %dec_label_pc_14ff8
  %v1_15000 = add i32 %v0_15000, 1
  %v1_15004 = urem i32 %v1_15000, 4
  %v2_15004 = icmp eq i32 %v1_15004, 0
  br i1 %v2_15004, label %dec_label_pc_1500c, label %dec_label_pc_14fec

dec_label_pc_1500c:                               ; preds = %dec_label_pc_15000, %dec_label_pc_14fe0
  %v0_15010 = phi i32 [ %v0_150042, %dec_label_pc_14fe0 ], [ %v1_15000, %dec_label_pc_15000 ]
  %v4_1500c = mul nuw nsw i32 %v1_14fe4, 256
  %v5_1500c = or i32 %v4_1500c, %v1_14fe4
  %v4_15014 = mul i32 %v5_1500c, 65536
  %v5_15014 = or i32 %v4_15014, %v5_1500c
  br label %dec_label_pc_15018

dec_label_pc_15018:                               ; preds = %dec_label_pc_150b4, %dec_label_pc_15054, %dec_label_pc_1500c
  %v0_1507c = phi i32 [ %v0_15010, %dec_label_pc_1500c ], [ %v4_15018, %dec_label_pc_15054 ], [ %v4_15018, %dec_label_pc_150b4 ]
  %v1_15018 = inttoptr i32 %v0_1507c to i32*
  %v2_15018 = load i32, i32* %v1_15018, align 4
  %v4_15018 = add i32 %v0_1507c, 4
  %v2_15020 = xor i32 %v2_15018, %v5_15014
  %v2_15024 = add i32 %v2_15020, 2130640639
  store i32 %v2_15024, i32* @ip, align 4
  %v2_1502c = add i32 %v2_15018, 2130640639
  %v1_15030 = sub i32 -1, %v2_15018
  %v2_15034 = xor i32 %v2_1502c, %v1_15030
  %v2_15040 = and i32 %v2_15034, -2130640640
  %v2_15048 = icmp eq i32 %v2_15040, 0
  br i1 %v2_15048, label %dec_label_pc_15054, label %dec_label_pc_1505c

dec_label_pc_15054:                               ; preds = %dec_label_pc_15018
  %v1_1503c = sub i32 -1, %v2_15020
  %v2_15044 = xor i32 %v2_15024, %v1_1503c
  %v2_1504c = and i32 %v2_15044, -2130640640
  %v2_15054 = icmp eq i32 %v2_1504c, 0
  br i1 %v2_15054, label %dec_label_pc_15018, label %dec_label_pc_1505c

dec_label_pc_1505c:                               ; preds = %dec_label_pc_15018, %dec_label_pc_15054
  %v2_1505c = inttoptr i32 %v0_1507c to i8*
  %v3_1505c = load i8, i8* %v2_1505c, align 1
  %v4_1505c = zext i8 %v3_1505c to i32
  %v9_15060 = icmp eq i32 %v4_1505c, %v1_14fe4
  br i1 %v9_15060, label %dec_label_pc_150bc, label %dec_label_pc_1506c

dec_label_pc_1506c:                               ; preds = %dec_label_pc_1505c
  %v2_1506c = icmp eq i8 %v3_1505c, 0
  br i1 %v2_1506c, label %dec_label_pc_150bc, label %dec_label_pc_15074

dec_label_pc_15074:                               ; preds = %dec_label_pc_1506c
  %v1_15074 = add i32 %v0_1507c, 1
  %v2_15074 = inttoptr i32 %v1_15074 to i8*
  %v3_15074 = load i8, i8* %v2_15074, align 1
  %v4_15074 = zext i8 %v3_15074 to i32
  %v9_15078 = icmp eq i32 %v4_15074, %v1_14fe4
  br i1 %v9_15078, label %dec_label_pc_150bc, label %dec_label_pc_15084

dec_label_pc_15084:                               ; preds = %dec_label_pc_15074
  %v2_15084 = icmp eq i8 %v3_15074, 0
  br i1 %v2_15084, label %dec_label_pc_150bc, label %dec_label_pc_1508c

dec_label_pc_1508c:                               ; preds = %dec_label_pc_15084
  %v1_1508c = add i32 %v0_1507c, 2
  %v2_1508c = inttoptr i32 %v1_1508c to i8*
  %v3_1508c = load i8, i8* %v2_1508c, align 1
  %v4_1508c = zext i8 %v3_1508c to i32
  %v9_15090 = icmp eq i32 %v4_1508c, %v1_14fe4
  br i1 %v9_15090, label %dec_label_pc_150bc, label %dec_label_pc_1509c

dec_label_pc_1509c:                               ; preds = %dec_label_pc_1508c
  %v2_1509c = icmp eq i8 %v3_1508c, 0
  br i1 %v2_1509c, label %dec_label_pc_150bc, label %dec_label_pc_150a4

dec_label_pc_150a4:                               ; preds = %dec_label_pc_1509c
  %v1_150a4 = add i32 %v0_1507c, 3
  %v2_150a4 = inttoptr i32 %v1_150a4 to i8*
  %v3_150a4 = load i8, i8* %v2_150a4, align 1
  %v4_150a4 = zext i8 %v3_150a4 to i32
  %v9_150a8 = icmp eq i32 %v4_150a4, %v1_14fe4
  br i1 %v9_150a8, label %dec_label_pc_150bc, label %dec_label_pc_150b4

dec_label_pc_150b4:                               ; preds = %dec_label_pc_150a4
  %v2_150b4 = icmp eq i8 %v3_150a4, 0
  br i1 %v2_150b4, label %dec_label_pc_150bc, label %dec_label_pc_15018

dec_label_pc_150bc:                               ; preds = %dec_label_pc_14ff8, %dec_label_pc_14fec, %dec_label_pc_150b4, %dec_label_pc_150a4, %dec_label_pc_1509c, %dec_label_pc_1508c, %dec_label_pc_15084, %dec_label_pc_15074, %dec_label_pc_1506c, %dec_label_pc_1505c
  %v1_150c0 = phi i32 [ %v1_150a4, %dec_label_pc_150b4 ], [ %v1_150a4, %dec_label_pc_150a4 ], [ %v1_1508c, %dec_label_pc_1509c ], [ %v1_1508c, %dec_label_pc_1508c ], [ %v1_15074, %dec_label_pc_15084 ], [ %v1_15074, %dec_label_pc_15074 ], [ %v0_1507c, %dec_label_pc_1506c ], [ %v0_1507c, %dec_label_pc_1505c ], [ %v0_15000, %dec_label_pc_14fec ], [ %v0_15000, %dec_label_pc_14ff8 ]
  ret i32 %v1_150c0

; uselistorder directives
  uselistorder i32 %v4_15018, { 1, 0 }
  uselistorder i32 %v2_15018, { 0, 2, 1 }
  uselistorder i32 %v0_1507c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_1500c, { 1, 0 }
  uselistorder i32 %v1_15000, { 1, 0, 2 }
  uselistorder i32 %v0_150042, { 2, 1, 0 }
  uselistorder i32 %v1_14fe4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_150bc, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_1505c, { 1, 0 }
  uselistorder label %dec_label_pc_14fec, { 1, 0 }
}

define i32 @function_150cc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_150cc:
  %v1_150d0 = urem i32 %arg1, 256
  %v0_150f03 = load i32, i32* @r0, align 4
  %v1_150f04 = urem i32 %v0_150f03, 4
  %v2_150f05 = icmp eq i32 %v1_150f04, 0
  br i1 %v2_150f05, label %dec_label_pc_150f8, label %dec_label_pc_150d8

dec_label_pc_150d8:                               ; preds = %dec_label_pc_150cc, %dec_label_pc_150ec
  %v0_150ec = phi i32 [ %v1_150ec, %dec_label_pc_150ec ], [ %v0_150f03, %dec_label_pc_150cc ]
  %v1_150d8 = inttoptr i32 %v0_150ec to i8*
  %v2_150d8 = load i8, i8* %v1_150d8, align 1
  %v3_150d8 = zext i8 %v2_150d8 to i32
  %v9_150dc = icmp eq i32 %v3_150d8, %v1_150d0
  br i1 %v9_150dc, label %dec_label_pc_151ac, label %dec_label_pc_150e4

dec_label_pc_150e4:                               ; preds = %dec_label_pc_150d8
  %v2_150e4 = icmp eq i8 %v2_150d8, 0
  br i1 %v2_150e4, label %dec_label_pc_151a8, label %dec_label_pc_150ec

dec_label_pc_150ec:                               ; preds = %dec_label_pc_150e4
  %v1_150ec = add i32 %v0_150ec, 1
  %v1_150f0 = urem i32 %v1_150ec, 4
  %v2_150f0 = icmp eq i32 %v1_150f0, 0
  br i1 %v2_150f0, label %dec_label_pc_150f8, label %dec_label_pc_150d8

dec_label_pc_150f8:                               ; preds = %dec_label_pc_150ec, %dec_label_pc_150cc
  %v0_150fc = phi i32 [ %v0_150f03, %dec_label_pc_150cc ], [ %v1_150ec, %dec_label_pc_150ec ]
  %v4_150f8 = mul nuw nsw i32 %v1_150d0, 256
  %v5_150f8 = or i32 %v4_150f8, %v1_150d0
  %v4_15100 = mul i32 %v5_150f8, 65536
  %v5_15100 = or i32 %v4_15100, %v5_150f8
  br label %dec_label_pc_15104

dec_label_pc_15104:                               ; preds = %dec_label_pc_151a0, %dec_label_pc_15140, %dec_label_pc_150f8
  %v0_15168 = phi i32 [ %v0_150fc, %dec_label_pc_150f8 ], [ %v4_15104, %dec_label_pc_15140 ], [ %v4_15104, %dec_label_pc_151a0 ]
  %v1_15104 = inttoptr i32 %v0_15168 to i32*
  %v2_15104 = load i32, i32* %v1_15104, align 4
  %v4_15104 = add i32 %v0_15168, 4
  %v2_1510c = xor i32 %v2_15104, %v5_15100
  %v2_15110 = add i32 %v2_1510c, 2130640639
  store i32 %v2_15110, i32* @ip, align 4
  %v2_15118 = add i32 %v2_15104, 2130640639
  %v1_1511c = sub i32 -1, %v2_15104
  %v2_15120 = xor i32 %v2_15118, %v1_1511c
  %v2_1512c = and i32 %v2_15120, -2130640640
  %v2_15134 = icmp eq i32 %v2_1512c, 0
  br i1 %v2_15134, label %dec_label_pc_15140, label %dec_label_pc_15148

dec_label_pc_15140:                               ; preds = %dec_label_pc_15104
  %v1_15128 = sub i32 -1, %v2_1510c
  %v2_15130 = xor i32 %v2_15110, %v1_15128
  %v2_15138 = and i32 %v2_15130, -2130640640
  %v2_15140 = icmp eq i32 %v2_15138, 0
  br i1 %v2_15140, label %dec_label_pc_15104, label %dec_label_pc_15148

dec_label_pc_15148:                               ; preds = %dec_label_pc_15104, %dec_label_pc_15140
  %v2_15148 = inttoptr i32 %v0_15168 to i8*
  %v3_15148 = load i8, i8* %v2_15148, align 1
  %v4_15148 = zext i8 %v3_15148 to i32
  %v9_1514c = icmp eq i32 %v4_15148, %v1_150d0
  br i1 %v9_1514c, label %dec_label_pc_151ac, label %dec_label_pc_15158

dec_label_pc_15158:                               ; preds = %dec_label_pc_15148
  %v2_15158 = icmp eq i8 %v3_15148, 0
  br i1 %v2_15158, label %dec_label_pc_151a8, label %dec_label_pc_15160

dec_label_pc_15160:                               ; preds = %dec_label_pc_15158
  %v1_15160 = add i32 %v0_15168, 1
  %v2_15160 = inttoptr i32 %v1_15160 to i8*
  %v3_15160 = load i8, i8* %v2_15160, align 1
  %v4_15160 = zext i8 %v3_15160 to i32
  %v9_15164 = icmp eq i32 %v4_15160, %v1_150d0
  br i1 %v9_15164, label %dec_label_pc_151ac, label %dec_label_pc_15170

dec_label_pc_15170:                               ; preds = %dec_label_pc_15160
  %v2_15170 = icmp eq i8 %v3_15160, 0
  br i1 %v2_15170, label %dec_label_pc_151a8, label %dec_label_pc_15178

dec_label_pc_15178:                               ; preds = %dec_label_pc_15170
  %v1_15178 = add i32 %v0_15168, 2
  %v2_15178 = inttoptr i32 %v1_15178 to i8*
  %v3_15178 = load i8, i8* %v2_15178, align 1
  %v4_15178 = zext i8 %v3_15178 to i32
  %v9_1517c = icmp eq i32 %v4_15178, %v1_150d0
  br i1 %v9_1517c, label %dec_label_pc_151ac, label %dec_label_pc_15188

dec_label_pc_15188:                               ; preds = %dec_label_pc_15178
  %v2_15188 = icmp eq i8 %v3_15178, 0
  br i1 %v2_15188, label %dec_label_pc_151a8, label %dec_label_pc_15190

dec_label_pc_15190:                               ; preds = %dec_label_pc_15188
  %v1_15190 = add i32 %v0_15168, 3
  %v2_15190 = inttoptr i32 %v1_15190 to i8*
  %v3_15190 = load i8, i8* %v2_15190, align 1
  %v4_15190 = zext i8 %v3_15190 to i32
  %v9_15194 = icmp eq i32 %v4_15190, %v1_150d0
  br i1 %v9_15194, label %dec_label_pc_151ac, label %dec_label_pc_151a0

dec_label_pc_151a0:                               ; preds = %dec_label_pc_15190
  %v2_151a0 = icmp eq i8 %v3_15190, 0
  br i1 %v2_151a0, label %dec_label_pc_151a8, label %dec_label_pc_15104

dec_label_pc_151a8:                               ; preds = %dec_label_pc_150e4, %dec_label_pc_151a0, %dec_label_pc_15188, %dec_label_pc_15170, %dec_label_pc_15158
  br label %dec_label_pc_151ac

dec_label_pc_151ac:                               ; preds = %dec_label_pc_150d8, %dec_label_pc_15190, %dec_label_pc_15178, %dec_label_pc_15160, %dec_label_pc_15148, %dec_label_pc_151a8
  %v1_151b0 = phi i32 [ 0, %dec_label_pc_151a8 ], [ %v1_15190, %dec_label_pc_15190 ], [ %v1_15178, %dec_label_pc_15178 ], [ %v1_15160, %dec_label_pc_15160 ], [ %v0_15168, %dec_label_pc_15148 ], [ %v0_150ec, %dec_label_pc_150d8 ]
  ret i32 %v1_151b0

; uselistorder directives
  uselistorder i32 %v4_15104, { 1, 0 }
  uselistorder i32 %v2_15104, { 0, 2, 1 }
  uselistorder i32 %v0_15168, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_150f8, { 1, 0 }
  uselistorder i32 %v1_150ec, { 1, 0, 2 }
  uselistorder i32 %v0_150f03, { 2, 1, 0 }
  uselistorder i32 %v1_150d0, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 79, 80, 137, 81, 82, 83, 84, 85, 86, 88, 89, 138, 7, 131, 28, 132, 27, 133, 39, 134, 87, 40, 97, 29, 90, 91, 2, 92, 93, 94, 41, 21, 98, 42, 99, 43, 100, 44, 101, 45, 102, 46, 103, 47, 104, 48, 105, 49, 106, 50, 107, 51, 108, 30, 109, 52, 110, 53, 111, 54, 95, 55, 96, 56, 57, 58, 59, 60, 61, 62, 63, 0, 112, 8, 64, 65, 66, 67, 113, 68, 23, 22, 69, 114, 70, 31, 115, 10, 9, 71, 32, 116, 12, 11, 72, 117, 33, 118, 119, 25, 24, 73, 120, 34, 121, 14, 13, 74, 122, 35, 123, 75, 124, 16, 15, 76, 125, 36, 126, 18, 17, 77, 127, 37, 128, 20, 19, 78, 135, 38, 136, 26, 129, 6, 130 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 148, 149, 147, 152, 26, 27, 28, 29, 30, 31, 32, 33, 146, 34, 35, 36, 38, 37, 40, 39, 41, 42, 2, 43, 0, 3, 44, 45, 47, 46, 1, 50, 48, 49, 51, 57, 52, 58, 53, 59, 54, 55, 56, 62, 63, 64, 65, 60, 61, 145, 67, 66, 69, 68, 71, 72, 73, 70, 76, 74, 75, 78, 79, 80, 77, 81, 82, 84, 85, 83, 86, 150, 87, 90, 88, 91, 89, 93, 94, 95, 92, 96, 101, 97, 102, 98, 103, 99, 100, 105, 106, 107, 104, 108, 151, 109, 110, 111, 113, 112, 114, 122, 115, 123, 116, 124, 117, 125, 118, 126, 119, 120, 121, 128, 129, 130, 131, 127, 132, 137, 133, 138, 134, 135, 136, 140, 142, 143, 144, 139, 141 }
  uselistorder label %dec_label_pc_151ac, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_151a8, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_15148, { 1, 0 }
  uselistorder label %dec_label_pc_150d8, { 1, 0 }
}

define i32 @function_151bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_151bc:
  %stack_var_-68 = alloca i32, align 4
  %v2_151c4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_151c4, i32* @r1, align 4
  %v0_151c8 = call i32 @function_151e0()
  %v1_151cc = sub i32 1, %v0_151c8
  %v2_151cc = icmp ult i32 %v0_151c8, 2
  br i1 %v2_151cc, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_151bc
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_151bc, %bb
  %v1_151dc = phi i32 [ %v1_151cc, %dec_label_pc_151bc ], [ 0, %bb ]
  ret i32 %v1_151dc

; uselistorder directives
  uselistorder i32 %v0_151c8, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_151e0() local_unnamed_addr {
dec_label_pc_151e0:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_3()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_151e0 = load i32, i32* @r4, align 4
  %v6_151e0 = load i32, i32* @r5, align 4
  %v2_151e8 = ptrtoint i32* %stack_var_-52 to i32
  %v0_151ec = load i32, i32* @r1, align 4
  store i32 %v0_151ec, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_151f8 = load i32, i32* @r0, align 4
  %v3_151f8 = call i32 @function_105b8(i32 %v0_151f8, i32 21505, i32 %v2_151e8)
  store i32 %v3_151f8, i32* %r0.global-to-local, align 4
  store i32 %v3_151f8, i32* @r5, align 4
  %v2_151fc = icmp eq i32 %v3_151f8, 0
  br i1 %v2_151fc, label %dec_label_pc_15204, label %dec_label_pc_15248

dec_label_pc_15204:                               ; preds = %dec_label_pc_151e0
  %v4_15210 = zext i8 %tmp to i32
  store i32 %v4_15210, i32* @ip, align 4
  %v3_15214 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_15214, i32* @r3, align 4
  %v1_15218 = load i32, i32* @r4, align 4
  %v2_15218 = add i32 %v1_15218, 4
  %v3_15218 = inttoptr i32 %v2_15218 to i32*
  %v0_1521c = load i32, i32* %r1.global-to-local, align 4
  %v1_1521c = load i32, i32* @r4, align 4
  %v2_1521c = add i32 %v1_1521c, 8
  %v3_1521c = inttoptr i32 %v2_1521c to i32*
  store i32 %v0_1521c, i32* %v3_1521c, align 4
  %v0_15220 = load i32, i32* %r0.global-to-local, align 4
  %v1_15220 = load i32, i32* @r4, align 4
  %v2_15220 = add i32 %v1_15220, 12
  %v3_15220 = inttoptr i32 %v2_15220 to i32*
  store i32 %v0_15220, i32* %v3_15220, align 4
  %v2_15224 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_15224, i32* @r1, align 4
  %v1_1522c = load i32, i32* @r4, align 4
  %v2_1522c = inttoptr i32 %v1_1522c to i32*
  store i32 %v3_15214, i32* %v2_1522c, align 4
  %v0_15230 = load i32, i32* @ip, align 4
  %v1_15230 = trunc i32 %v0_15230 to i8
  %v2_15230 = load i32, i32* @r4, align 4
  %v3_15230 = add i32 %v2_15230, 16
  %v4_15230 = inttoptr i32 %v3_15230 to i8*
  store i8 %v1_15230, i8* %v4_15230, align 1
  %v0_15234 = load i32, i32* @r4, align 4
  %v1_15234 = add i32 %v0_15234, 17
  store i32 %v1_15234, i32* %r0.global-to-local, align 4
  %v4_15238 = call i32 @function_15724(i32 %v1_15234, i32 %v2_15224, i32 19, i32 %v3_15214)
  store i32 %v4_15238, i32* %r0.global-to-local, align 4
  %v0_1523c = load i32, i32* @r5, align 4
  store i32 %v0_1523c, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_15244 = inttoptr i32 %v4_15238 to i8*
  %v3_15244 = call i32 @function_10ac0(i8* %v2_15244, i32 %v0_1523c)
  store i32 %v3_15244, i32* %r0.global-to-local, align 4
  %v0_15248.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15248

dec_label_pc_15248:                               ; preds = %dec_label_pc_151e0, %dec_label_pc_15204
  %v0_15248 = phi i32 [ %v3_151f8, %dec_label_pc_151e0 ], [ %v0_15248.pre, %dec_label_pc_15204 ]
  store i32 %v0_15248, i32* %r0.global-to-local, align 4
  store i32 %v3_151e0, i32* @r4, align 4
  store i32 %v6_151e0, i32* @r5, align 4
  ret i32 %v0_15248

; uselistorder directives
  uselistorder i32 %v0_15248, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 5, 2, 3, 4 }
  uselistorder i32 (i8*, i32)* @function_10ac0, { 8, 2, 3, 4, 0, 1, 11, 9, 10, 5, 6, 7 }
  uselistorder i32 13, { 11, 10, 0, 1, 13, 14, 12, 15, 2, 3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 9, 23, 24, 25, 26, 27, 28, 29, 30, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 5, 42, 43 }
  uselistorder i32 17, { 13, 1, 2, 19, 20, 3, 14, 4, 15, 5, 16, 21, 17, 18, 6, 22, 7, 23, 8, 24, 25, 26, 9, 27, 10, 11, 28, 12, 29, 30, 31, 0 }
  uselistorder i32 (i32, i32, i32)* @function_105b8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15248, { 1, 0 }
}

define i32 @function_1525c() local_unnamed_addr {
dec_label_pc_1525c:
  %r0.global-to-local = alloca i32, align 4
  %v0_15264 = load i32, i32* @r0, align 4
  %v2_15264 = icmp eq i32 %v0_15264, 0
  %v0_1526c = load i32, i32* @r1, align 4
  br i1 %v2_15264, label %dec_label_pc_15340, label %dec_label_pc_15274

dec_label_pc_15274:                               ; preds = %dec_label_pc_1525c
  br label %dec_label_pc_1528c

dec_label_pc_1528c:                               ; preds = %dec_label_pc_15274, %dec_label_pc_15304
  %v1_15304 = phi i32 [ 0, %dec_label_pc_15274 ], [ %v5_15304, %dec_label_pc_15304 ]
  %v0_15308 = phi i32 [ 1, %dec_label_pc_15274 ], [ %v1_15308, %dec_label_pc_15304 ]
  %v0_1528c = phi i32 [ %v0_15264, %dec_label_pc_15274 ], [ %v0_1528c12, %dec_label_pc_15304 ]
  %v1_1528c = inttoptr i32 %v0_1528c to i8*
  %v2_1528c = load i8, i8* %v1_1528c, align 1
  %v3_1528c = zext i8 %v2_1528c to i32
  %v4_15290 = load i32, i32* inttoptr (i32 123120 to i32*), align 16
  %v2_15294 = mul nuw nsw i32 %v3_1528c, 2
  %v2_15298 = add i32 %v2_15294, %v4_15290
  %v3_15298 = inttoptr i32 %v2_15298 to i16*
  %v4_15298 = load i16, i16* %v3_15298, align 2
  %v1_1529c = and i16 %v4_15298, 8
  %v2_1529c = icmp eq i16 %v1_1529c, 0
  br i1 %v2_1529c, label %dec_label_pc_15340, label %dec_label_pc_152a4

dec_label_pc_152a4:                               ; preds = %dec_label_pc_1528c
  br label %dec_label_pc_152c4

dec_label_pc_152ac:                               ; preds = %dec_label_pc_152c4
  %v2_152ac = mul i32 %v0_15304, 10
  %v1_152b0 = add i32 %v2_152ac, -48
  %v2_152b4 = add i32 %v3_152c4, %v1_152b0
  %v8_152bc = icmp sgt i32 %v2_152b4, 255
  br i1 %v8_152bc, label %dec_label_pc_15340, label %dec_label_pc_152c0

dec_label_pc_152c0:                               ; preds = %dec_label_pc_152ac
  %v1_152c0 = add i32 %v0_152f4, 1
  store i32 %v1_152c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_152c4

dec_label_pc_152c4:                               ; preds = %dec_label_pc_152a4, %dec_label_pc_152c0
  %v0_15304 = phi i32 [ 0, %dec_label_pc_152a4 ], [ %v2_152b4, %dec_label_pc_152c0 ]
  %v0_152f4 = phi i32 [ %v0_1528c, %dec_label_pc_152a4 ], [ %v1_152c0, %dec_label_pc_152c0 ]
  %v1_152c4 = inttoptr i32 %v0_152f4 to i8*
  %v2_152c4 = load i8, i8* %v1_152c4, align 1
  %v3_152c4 = zext i8 %v2_152c4 to i32
  %v2_152c8 = mul nuw nsw i32 %v3_152c4, 2
  %v2_152cc = add i32 %v2_152c8, %v4_15290
  %v3_152cc = inttoptr i32 %v2_152cc to i16*
  %v4_152cc = load i16, i16* %v3_152cc, align 2
  %v6_152cc = zext i16 %v4_152cc to i32
  %v1_152d0 = and i32 %v6_152cc, 8
  %v2_152d0 = icmp eq i32 %v1_152d0, 0
  br i1 %v2_152d0, label %dec_label_pc_152d8, label %dec_label_pc_152ac

dec_label_pc_152d8:                               ; preds = %dec_label_pc_152c4
  %v7_152d8 = icmp eq i32 %v0_15308, 4
  br i1 %v7_152d8, label %dec_label_pc_152f0, label %dec_label_pc_152e0

dec_label_pc_152e0:                               ; preds = %dec_label_pc_152d8
  %v7_152e0 = icmp eq i8 %v2_152c4, 46
  br i1 %v7_152e0, label %dec_label_pc_152e8, label %dec_label_pc_15340

dec_label_pc_152e8:                               ; preds = %dec_label_pc_152e0
  %v1_152e8 = add i32 %v0_152f4, 1
  store i32 %v1_152e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15304

dec_label_pc_152f0:                               ; preds = %dec_label_pc_152d8
  %v2_152f0 = icmp eq i8 %v2_152c4, 0
  %v1_152f4 = add i32 %v0_152f4, 1
  store i32 %v1_152f4, i32* %r0.global-to-local, align 4
  br i1 %v2_152f0, label %dec_label_pc_15304, label %dec_label_pc_152fc

dec_label_pc_152fc:                               ; preds = %dec_label_pc_152f0
  %v1_152fc = and i32 %v6_152cc, 32
  %v2_152fc = icmp eq i32 %v1_152fc, 0
  br i1 %v2_152fc, label %dec_label_pc_15340, label %dec_label_pc_15304

dec_label_pc_15304:                               ; preds = %dec_label_pc_152fc, %dec_label_pc_152f0, %dec_label_pc_152e8
  %v0_1528c12 = phi i32 [ %v1_152f4, %dec_label_pc_152fc ], [ %v1_152f4, %dec_label_pc_152f0 ], [ %v1_152e8, %dec_label_pc_152e8 ]
  %v4_15304 = mul i32 %v1_15304, 256
  %v5_15304 = or i32 %v0_15304, %v4_15304
  %v1_15308 = add nuw nsw i32 %v0_15308, 1
  %v7_15310 = icmp slt i32 %v1_15308, 5
  br i1 %v7_15310, label %dec_label_pc_1528c, label %dec_label_pc_15314

dec_label_pc_15314:                               ; preds = %dec_label_pc_15304
  %v2_15314 = icmp eq i32 %v0_1526c, 0
  br i1 %v2_15314, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_15314
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15344

bb:                                               ; preds = %dec_label_pc_15314
  %v4_15318 = udiv i32 %v5_15304, 16777216
  %v2_1531c = udiv i32 %v5_15304, 256
  %v5_15320 = and i32 %v2_1531c, 65280
  %v2_15324 = and i32 %v5_15304, 65280
  %v5_15328 = mul nuw nsw i32 %v2_15324, 256
  %v5_1532c = mul i32 %v0_15304, 16777216
  %v6_15320 = or i32 %v4_15318, %v5_1532c
  %v6_15328 = or i32 %v6_15320, %v5_15320
  %v6_1532c = or i32 %v6_15328, %v5_15328
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15338 = inttoptr i32 %v0_1526c to i32*
  store i32 %v6_1532c, i32* %v3_15338, align 4
  %v1_15348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15344

dec_label_pc_15340:                               ; preds = %dec_label_pc_152e0, %dec_label_pc_152fc, %dec_label_pc_1528c, %dec_label_pc_152ac, %dec_label_pc_1525c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15344

dec_label_pc_15344:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_15340
  %v1_15348 = phi i32 [ %v1_15348.pre, %bb ], [ 0, %dec_label_pc_15340 ], [ 1, %.thread7.thread ]
  ret i32 %v1_15348

; uselistorder directives
  uselistorder i32 %v1_15308, { 1, 0 }
  uselistorder i32 %v5_15304, { 2, 0, 1, 3 }
  uselistorder i32 %v0_152f4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 55, 2, 6, 1, 46, 3, 7, 0, 8, 9, 10, 11, 12, 38, 47, 48, 49, 13, 14, 15, 50, 51, 16, 17, 18, 19, 39, 52, 4, 53, 54, 20, 21, 40, 56, 57, 41, 22, 23, 24, 25, 26, 58, 59, 60, 61, 42, 43, 44, 5, 62, 63, 27, 64, 28, 29, 30, 31, 45, 66, 32, 33, 34, 67, 35, 36, 37, 65 }
  uselistorder i32 16777216, { 0, 1, 66, 65, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 31, 30, 33, 32, 35, 34, 36, 37, 39, 38, 40, 41, 42, 44, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67 }
  uselistorder i32 5, { 13, 0, 69, 14, 40, 16, 36, 15, 35, 3, 2, 41, 17, 42, 18, 43, 19, 44, 20, 45, 21, 46, 22, 47, 23, 48, 24, 49, 25, 50, 26, 51, 27, 52, 28, 53, 29, 54, 55, 1, 37, 38, 39, 30, 31, 56, 32, 5, 57, 6, 58, 7, 59, 33, 8, 60, 9, 61, 62, 10, 63, 11, 64, 70, 12, 71, 4, 65, 66, 34, 67, 68 }
  uselistorder i32 32, { 97, 49, 47, 86, 87, 88, 89, 92, 93, 82, 83, 84, 85, 102, 103, 50, 51, 55, 52, 56, 53, 57, 54, 58, 59, 98, 99, 60, 100, 68, 69, 67, 70, 71, 72, 73, 74, 75, 62, 63, 1, 64, 2, 65, 4, 3, 61, 66, 76, 101, 6, 5, 8, 7, 10, 9, 48, 77, 94, 12, 11, 14, 13, 16, 15, 18, 17, 81, 20, 19, 22, 21, 23, 25, 24, 27, 26, 28, 29, 31, 30, 90, 91, 32, 95, 33, 96, 34, 35, 36, 37, 38, 39, 78, 40, 41, 42, 79, 43, 0, 44, 45, 46, 80 }
  uselistorder i8 0, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 28, 27, 19, 29, 3, 17, 4, 30, 32, 31, 20, 33, 34, 35, 0, 18, 36, 37, 38, 39, 40, 41, 42, 43, 44, 1, 47, 49, 46, 21, 48, 22, 50, 51, 45, 2, 52, 53, 54, 24, 55, 58, 25, 56, 57, 23, 59, 60, 61, 62, 63, 64, 5, 65, 66, 67, 68, 69, 70, 71, 72, 26, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 255, { 5, 14, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i32 10, { 2, 28, 29, 30, 4, 44, 46, 45, 68, 47, 0, 8, 34, 35, 9, 31, 32, 25, 3, 36, 26, 10, 1, 27, 37, 11, 38, 12, 39, 13, 40, 14, 41, 15, 42, 43, 33, 16, 17, 18, 5, 48, 49, 50, 51, 19, 20, 52, 53, 54, 55, 56, 21, 57, 58, 59, 6, 60, 61, 62, 22, 7, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 23, 74, 24 }
  uselistorder i16 0, { 0, 1, 2, 5, 6, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 2, { 3, 4, 148, 57, 58, 53, 285, 286, 67, 287, 288, 59, 289, 290, 154, 149, 155, 150, 90, 291, 5, 156, 292, 63, 267, 6, 7, 268, 8, 9, 52, 263, 10, 11, 12, 264, 269, 13, 14, 15, 16, 68, 270, 271, 17, 18, 0, 151, 272, 19, 273, 91, 20, 147, 21, 22, 23, 24, 25, 92, 94, 93, 60, 61, 26, 73, 177, 178, 95, 170, 100, 171, 97, 179, 96, 172, 98, 163, 99, 169, 157, 158, 159, 160, 161, 162, 74, 164, 75, 165, 76, 166, 77, 167, 78, 168, 69, 27, 28, 180, 183, 184, 101, 64, 152, 102, 185, 103, 186, 104, 187, 105, 188, 106, 189, 107, 190, 108, 191, 192, 109, 193, 111, 181, 110, 182, 173, 174, 29, 112, 113, 114, 175, 176, 115, 80, 194, 117, 195, 116, 79, 196, 118, 197, 30, 31, 32, 119, 198, 199, 120, 81, 121, 122, 124, 65, 125, 123, 200, 126, 127, 128, 129, 130, 201, 62, 66, 202, 203, 204, 205, 206, 207, 208, 209, 210, 131, 211, 82, 212, 213, 214, 215, 216, 217, 132, 83, 218, 219, 220, 221, 222, 223, 224, 225, 133, 226, 84, 227, 228, 54, 134, 135, 136, 229, 230, 231, 232, 233, 234, 235, 1, 33, 34, 35, 36, 37, 38, 137, 236, 85, 237, 238, 239, 240, 39, 241, 242, 40, 41, 42, 43, 44, 45, 138, 243, 86, 244, 245, 246, 247, 248, 249, 139, 250, 140, 251, 141, 252, 2, 46, 47, 48, 49, 50, 51, 142, 253, 87, 254, 255, 55, 256, 257, 258, 259, 260, 261, 143, 88, 262, 274, 56, 275, 276, 144, 277, 145, 278, 279, 280, 281, 282, 146, 283, 89, 284, 70, 265, 71, 72, 266, 153 }
  uselistorder label %dec_label_pc_15344, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15340, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_152c4, { 1, 0 }
  uselistorder label %dec_label_pc_1528c, { 1, 0 }
}

define i32 @function_15354(i32 %arg1) local_unnamed_addr {
dec_label_pc_15354:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v4_15360 = load i32, i32* inttoptr (i32 122996 to i32*), align 4
  %v4_15368 = load i32, i32* inttoptr (i32 122960 to i32*), align 16
  store i32 %v4_15368, i32* %r1.global-to-local, align 4
  %v1_1536c = add i32 %arg1, 44
  %v2_1536c = inttoptr i32 %v1_1536c to i32*
  %v3_1536c = load i32, i32* %v2_1536c, align 4
  %v1_15370 = add i32 %arg1, 28
  %v2_15370 = inttoptr i32 %v1_15370 to i32*
  %v3_15370 = load i32, i32* %v2_15370, align 4
  store i32 %v3_15370, i32* %r2.global-to-local, align 4
  %v2_15374 = inttoptr i32 %v4_15360 to i32*
  store i32 %v3_1536c, i32* %v2_15374, align 4
  %v0_15378 = load i32, i32* %r2.global-to-local, align 4
  %v1_15378 = load i32, i32* %r1.global-to-local, align 4
  %v2_15378 = inttoptr i32 %v1_15378 to i32*
  store i32 %v0_15378, i32* %v2_15378, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 39, 0, 1, 3, 4, 5, 2, 6, 7, 8, 12, 9, 13, 11, 23, 24, 25, 26, 27, 28, 20, 21, 22, 18, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 10, 14, 15, 16, 17 }
  uselistorder i32 122896, { 46, 1, 47, 48, 2, 3, 49, 4, 5, 50, 51, 6, 7, 52, 8, 53, 54, 55, 9, 12, 13, 11, 10, 14, 15, 41, 37, 35, 34, 36, 38, 39, 40, 33, 42, 28, 30, 29, 27, 26, 31, 32, 23, 22, 25, 24, 21, 20, 19, 18, 43, 44, 45, 56, 0, 57, 16, 17 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_15384(i32 %arg1) local_unnamed_addr {
dec_label_pc_15384:
  %v0_15384 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15384, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15384
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15384, %bb
  %v4_15388 = phi i32 [ %arg1, %dec_label_pc_15384 ], [ 0, %bb ]
  ret i32 %v4_15388

; uselistorder directives
  uselistorder i1* @cpsr_z, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 31, 11, 12, 13, 27, 28, 29, 30, 14, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1538c(i32 %arg1) local_unnamed_addr {
dec_label_pc_153c8:
  store i32 %arg1, i32* @global_var_202d8.534, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_202d8.534, { 1, 0, 2 }
}

define i32 @function_153d8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_153d8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_153d8 = load i32, i32* @r7, align 4
  store i32 %v3_153d8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15400, label %dec_label_pc_153f0

dec_label_pc_153f0:                               ; preds = %dec_label_pc_153d8
  %v0_153f0 = call i32 @function_10a6c()
  %v0_153f4 = load i32, i32* %r7.global-to-local, align 4
  %v1_153f4 = sub i32 0, %v0_153f4
  %v2_153f8 = inttoptr i32 %v0_153f0 to i32*
  store i32 %v1_153f4, i32* %v2_153f8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_15404.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15400

dec_label_pc_15400:                               ; preds = %dec_label_pc_153d8, %dec_label_pc_153f0
  %v2_15404 = phi i32 [ %v3_153d8, %dec_label_pc_153d8 ], [ %v2_15404.pre, %dec_label_pc_153f0 ]
  %v0_15400 = phi i32 [ %arg1, %dec_label_pc_153d8 ], [ -1, %dec_label_pc_153f0 ]
  store i32 %v2_15404, i32* %r7.global-to-local, align 4
  ret i32 %v0_15400

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15400, { 1, 0 }
}

define i32 @function_1540c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1540c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15410 = load i32, i32* @r4, align 4
  %v6_15410 = load i32, i32* @r5, align 4
  %v12_15410 = load i32, i32* @r7, align 4
  %v1_15414 = add i32 %arg3, 14
  %v2_1541c = ptrtoint i32* %stack_var_-72 to i32
  %v1_15420 = and i32 %v1_15414, -8
  %v2_15424 = sub i32 %v2_1541c, %v1_15420
  %v1_15428 = add i32 %v2_15424, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_15428, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_15464, label %dec_label_pc_15450

dec_label_pc_15450:                               ; preds = %dec_label_pc_1540c
  %v0_15450 = call i32 @function_10a6c()
  %v0_15454 = load i32, i32* %r4.global-to-local, align 4
  %v1_15454 = sub i32 0, %v0_15454
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1545c = inttoptr i32 %v0_15450 to i32*
  store i32 %v1_15454, i32* %v2_1545c, align 4
  %v0_1546c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1546c

dec_label_pc_15464:                               ; preds = %dec_label_pc_1540c
  br i1 false, label %dec_label_pc_1546c, label %dec_label_pc_15474

dec_label_pc_1546c:                               ; preds = %dec_label_pc_15464, %dec_label_pc_15450
  %v0_1546c = phi i32 [ -1, %dec_label_pc_15464 ], [ %v0_1546c.pre, %dec_label_pc_15450 ]
  store i32 %v0_1546c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15540

dec_label_pc_15474:                               ; preds = %dec_label_pc_15464
  %v2_15474 = add i32 %v1_15428, %arg1
  %v2_15478 = add i32 %tmp, %arg3
  store i32 %v2_15478, i32* @ip, align 4
  store i32 %v1_15428, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_15528

dec_label_pc_15494:                               ; preds = %dec_label_pc_15528
  %v1_15494 = add i32 %v0_154e8, 16
  %v2_15494 = inttoptr i32 %v1_15494 to i16*
  %v3_15494 = load i16, i16* %v2_15494, align 2
  %v4_15494 = zext i16 %v3_15494 to i32
  %v1_15498 = add nuw nsw i32 %v4_15494, 7
  %v1_1549c = and i32 %v1_15498, 131064
  store i32 %v1_1549c, i32* %r2.global-to-local, align 4
  %v2_154a4 = add i32 %v1_1549c, %v0_154f0
  store i32 %v2_154a4, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_154a4, %v2_15478
  br i1 %tmp26, label %dec_label_pc_154b0, label %dec_label_pc_154e4

dec_label_pc_154b0:                               ; preds = %dec_label_pc_15494
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_154b8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_154b8, i32* %r2.global-to-local, align 4
  %v0_154bc = load i32, i32* %sl.global-to-local, align 4
  %v1_154c0 = load i32, i32* @sp, align 4
  %v2_154c0 = inttoptr i32 %v1_154c0 to i32*
  store i32 0, i32* %v2_154c0, align 4
  %v4_154c4 = call i32 @function_15748(i32 %arg1, i32 0, i32 %v0_154b8, i32 %v0_154bc)
  %v0_154c8 = load i32, i32* @r5, align 4
  %v1_154c8 = load i32, i32* %r6.global-to-local, align 4
  %v9_154c8 = icmp eq i32 %v0_154c8, %v1_154c8
  br i1 %v9_154c8, label %dec_label_pc_154d0, label %dec_label_pc_1553c

dec_label_pc_154d0:                               ; preds = %dec_label_pc_154b0
  %v0_154d0 = call i32 @function_10a6c()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_154dc = inttoptr i32 %v0_154d0 to i32*
  store i32 22, i32* %v2_154dc, align 4
  %v0_15540.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15540

dec_label_pc_154e4:                               ; preds = %dec_label_pc_15494
  %v1_154e4 = inttoptr i32 %v0_154e8 to i32*
  %v2_154e4 = load i32, i32* %v1_154e4, align 4
  %v3_154e4 = add i32 %v0_154e8, 4
  %v4_154e4 = inttoptr i32 %v3_154e4 to i32*
  %v5_154e4 = load i32, i32* %v4_154e4, align 4
  store i32 %v5_154e4, i32* %r4.global-to-local, align 4
  %v1_154e8 = add i32 %v0_154e8, 8
  store i32 %v1_154e8, i32* %sb.global-to-local, align 4
  %v1_154ec = inttoptr i32 %v1_154e8 to i32*
  %v2_154ec = load i32, i32* %v1_154ec, align 4
  store i32 %v2_154ec, i32* %sb.global-to-local, align 4
  %v3_154ec = add i32 %v0_154e8, 12
  %v4_154ec = inttoptr i32 %v3_154ec to i32*
  %v5_154ec = load i32, i32* %v4_154ec, align 4
  store i32 %v5_154ec, i32* %sl.global-to-local, align 4
  %v1_154f0 = inttoptr i32 %v0_154f0 to i32*
  store i32 %v2_154e4, i32* %v1_154f0, align 4
  %v3_154f0 = add i32 %v0_154f0, 4
  %v4_154f0 = inttoptr i32 %v3_154f0 to i32*
  %v5_154f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_154f0, i32* %v4_154f0, align 4
  %v0_154f4 = load i32, i32* @r7, align 4
  %v1_154f4 = add i32 %v0_154f4, 8
  %v1_154f8 = inttoptr i32 %v1_154f4 to i32*
  %v2_154f8 = load i32, i32* %v1_154f8, align 4
  %v3_154f8 = add i32 %v0_154f4, 12
  %v4_154f8 = inttoptr i32 %v3_154f8 to i32*
  %v5_154f8 = load i32, i32* %v4_154f8, align 4
  store i32 %v5_154f8, i32* @r4, align 4
  %v1_154fc = load i32, i32* @r5, align 4
  %v2_154fc = add i32 %v1_154fc, 8
  %v3_154fc = inttoptr i32 %v2_154fc to i32*
  store i32 %v2_154f8, i32* %v3_154fc, align 4
  %v0_15500 = load i32, i32* @r4, align 4
  %v1_15500 = load i32, i32* @r5, align 4
  %v2_15500 = add i32 %v1_15500, 12
  %v3_15500 = inttoptr i32 %v2_15500 to i32*
  store i32 %v0_15500, i32* %v3_15500, align 4
  %v0_15504 = load i32, i32* %r2.global-to-local, align 4
  %v1_15504 = trunc i32 %v0_15504 to i16
  %v2_15504 = load i32, i32* @r5, align 4
  %v3_15504 = add i32 %v2_15504, 16
  %v4_15504 = inttoptr i32 %v3_15504 to i16*
  store i16 %v1_15504, i16* %v4_15504, align 2
  %v0_15508 = load i32, i32* @r7, align 4
  %v1_15508 = add i32 %v0_15508, 18
  %v2_15508 = inttoptr i32 %v1_15508 to i8*
  %v3_15508 = load i8, i8* %v2_15508, align 1
  %v4_15508 = zext i8 %v3_15508 to i32
  store i32 %v4_15508, i32* @r3, align 4
  %v2_1550c = load i32, i32* @r5, align 4
  %v3_1550c = add i32 %v2_1550c, 18
  %v4_1550c = inttoptr i32 %v3_1550c to i8*
  store i8 %v3_15508, i8* %v4_1550c, align 1
  %v0_15510 = load i32, i32* @r7, align 4
  %v1_15510 = add i32 %v0_15510, 16
  %v2_15510 = inttoptr i32 %v1_15510 to i16*
  %v3_15510 = load i16, i16* %v2_15510, align 2
  %v4_15510 = zext i16 %v3_15510 to i32
  %v1_15514 = add nsw i32 %v4_15510, -19
  store i32 %v1_15514, i32* @r2, align 4
  %v0_15518 = call i32 @function_10b70()
  %v0_1551c = load i32, i32* @r7, align 4
  %v1_1551c = add i32 %v0_1551c, 16
  %v2_1551c = inttoptr i32 %v1_1551c to i16*
  %v3_1551c = load i16, i16* %v2_1551c, align 2
  %v4_1551c = zext i16 %v3_1551c to i32
  %v0_15520 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15520, i32* @r5, align 4
  %v2_15524 = add i32 %v4_1551c, %v0_1551c
  store i32 %v2_15524, i32* @r7, align 4
  br label %dec_label_pc_15528

dec_label_pc_15528:                               ; preds = %dec_label_pc_15474, %dec_label_pc_154e4
  %v0_154f0 = phi i32 [ %tmp, %dec_label_pc_15474 ], [ %v0_15520, %dec_label_pc_154e4 ]
  %v0_154e8 = phi i32 [ %v1_15428, %dec_label_pc_15474 ], [ %v2_15524, %dec_label_pc_154e4 ]
  %v3_1552c = icmp ult i32 %v0_154e8, %v2_15474
  %v1_15530 = add i32 %v0_154f0, 19
  store i32 %v1_15530, i32* @r0, align 4
  %v1_15534 = add i32 %v0_154e8, 19
  store i32 %v1_15534, i32* @r1, align 4
  br i1 %v3_1552c, label %dec_label_pc_15494, label %dec_label_pc_1553c.loopexit

dec_label_pc_1553c.loopexit:                      ; preds = %dec_label_pc_15528
  %v0_1553c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1553c

dec_label_pc_1553c:                               ; preds = %dec_label_pc_1553c.loopexit, %dec_label_pc_154b0
  %v1_1553c = phi i32 [ %v0_154f0, %dec_label_pc_1553c.loopexit ], [ %v0_154c8, %dec_label_pc_154b0 ]
  %v0_1553c = phi i32 [ %v0_1553c.pre, %dec_label_pc_1553c.loopexit ], [ %v1_154c8, %dec_label_pc_154b0 ]
  %v2_1553c = sub i32 %v1_1553c, %v0_1553c
  store i32 %v2_1553c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15540

dec_label_pc_15540:                               ; preds = %dec_label_pc_154d0, %dec_label_pc_1546c, %dec_label_pc_1553c
  %v0_15540 = phi i32 [ %v0_15540.pre, %dec_label_pc_154d0 ], [ %v0_1546c, %dec_label_pc_1546c ], [ %v2_1553c, %dec_label_pc_1553c ]
  store i32 %v3_15410, i32* %r4.global-to-local, align 4
  store i32 %v6_15410, i32* @r5, align 4
  store i32 %v12_15410, i32* @r7, align 4
  ret i32 %v0_15540

; uselistorder directives
  uselistorder i32 %v0_154e8, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_154f0, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_15428, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 11, 12, 0, 3, 16, 4, 13, 5, 14, 6, 15, 17, 1, 18, 7, 19, 2, 20, 8, 21, 9, 22, 10 }
  uselistorder i32* @r3, { 7, 8, 48, 49, 87, 88, 2, 89, 90, 91, 3, 92, 93, 94, 4, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 0, 113, 114, 115, 116, 9, 6, 10, 11, 12, 13, 14, 50, 51, 117, 126, 127, 128, 121, 77, 78, 79, 80, 81, 60, 65, 15, 16, 17, 132, 129, 130, 131, 1, 133, 134, 135, 122, 18, 82, 39, 40, 41, 123, 124, 125, 83, 118, 119, 120, 84, 31, 5, 52, 85, 53, 54, 56, 57, 33, 25, 32, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 45, 44, 38, 86, 46, 47, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76 }
  uselistorder i32 18, { 7, 8, 2, 9, 3, 10, 4, 11, 6, 12, 5, 13, 0, 14, 1, 15 }
  uselistorder i32 22, { 1, 0, 11, 2, 3, 4, 5, 6, 7, 15, 8, 12, 9, 13, 10, 14, 16 }
  uselistorder i32* @sp, { 2, 3, 1, 4, 0 }
  uselistorder i32 7, { 33, 31, 32, 9, 0, 1, 57, 10, 36, 11, 34, 12, 35, 2, 13, 37, 14, 38, 15, 39, 16, 40, 17, 41, 18, 42, 19, 43, 20, 44, 21, 45, 22, 46, 23, 47, 24, 25, 26, 27, 48, 4, 49, 28, 50, 5, 29, 51, 6, 52, 7, 53, 8, 54, 30, 56, 3, 55 }
  uselistorder i32* @ip, { 7, 8, 9, 88, 10, 11, 6, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 3, 122, 123, 124, 125, 126, 127, 128, 129, 130, 12, 0, 13, 14, 15, 16, 17, 131, 132, 32, 67, 68, 69, 70, 4, 71, 72, 73, 61, 62, 63, 64, 65, 66, 74, 75, 76, 136, 133, 134, 135, 1, 137, 33, 34, 35, 36, 77, 78, 2, 79, 18, 19, 80, 81, 82, 45, 46, 47, 48, 49, 50, 37, 38, 39, 40, 41, 42, 5, 27, 28, 29, 30, 20, 21, 22, 23, 24, 25, 26, 83, 84, 85, 31, 43, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 86, 87 }
  uselistorder i1 false, { 0, 19, 20, 21, 34, 15, 18, 35, 36, 37, 38, 39, 2, 1, 22, 25, 24, 23, 26, 4, 6, 33, 32, 16, 17, 7, 29, 5, 13, 14, 8, 9, 10, 27, 3, 11, 12, 30, 31, 28, 40 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 4, 3, 2, 5, 6, 7 }
  uselistorder i32 14, { 11, 13, 21, 7, 8, 9, 0, 12, 10, 3, 4, 5, 6, 14, 15, 1, 16, 17, 18, 19, 2, 20 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15540, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15528, { 1, 0 }
}

define i32 @function_15550(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15550:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15550 = load i32, i32* @r4, align 4
  store i32 %v3_15550, i32* %stack_var_-12, align 4
  %v0_15554 = load i32, i32* %r0.global-to-local, align 4
  %v1_15554 = inttoptr i32 %v0_15554 to i16*
  %v2_15554 = load i16, i16* %v1_15554, align 2
  %v3_15554 = zext i16 %v2_15554 to i32
  %v1_15558 = and i32 %v3_15554, 4
  store i32 %v1_15558, i32* %r5.global-to-local, align 4
  %v2_15558 = icmp eq i32 %v1_15558, 0
  store i32 %v0_15554, i32* %r4.global-to-local, align 4
  br i1 %v2_15558, label %dec_label_pc_1556c, label %bb

bb:                                               ; preds = %dec_label_pc_15550
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_1556c:                               ; preds = %dec_label_pc_15550
  %v1_1556c = icmp slt i32 %arg2, 0
  br i1 %v1_1556c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_1556c
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_1556c, %bb18
  %v1_15574 = add i32 %v0_15554, 4
  %v2_15574 = inttoptr i32 %v1_15574 to i32*
  %v3_15574 = load i32, i32* %v2_15574, align 4
  store i32 %v3_15574, i32* %r0.global-to-local, align 4
  %v1_15578 = call i32 @function_103dc(i32 %v3_15574)
  store i32 %v1_15578, i32* %r0.global-to-local, align 4
  %v5_15580 = icmp sgt i32 %v1_15578, 0
  br i1 %v5_15580, label %.thread7, label %dec_label_pc_15584

dec_label_pc_15584:                               ; preds = %bb19
  %v2_1557c = icmp eq i32 %v1_15578, 0
  %v0_15584 = load i32, i32* %r4.global-to-local, align 4
  %v1_15584 = inttoptr i32 %v0_15584 to i16*
  %v2_15584 = load i16, i16* %v1_15584, align 2
  br i1 %v2_1557c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_15584
  %v2_15588 = or i16 %v2_15584, 4
  store i16 %v2_15588, i16* %v1_15584, align 2
  %v1_155a4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_15584
  %v2_1558c = or i16 %v2_15584, 8
  store i16 %v2_1558c, i16* %v1_15584, align 2
  %v1_15598 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_15598, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_155a4 = phi i32 [ %v1_155a4.pre, %bb20 ], [ 0, %bb ], [ %v1_15578, %bb19 ], [ %v1_15598, %bb21 ]
  %v2_155a0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_155a0, i32* @r4, align 4
  ret i32 %v1_155a4

; uselistorder directives
  uselistorder i16 %v2_15584, { 1, 0 }
  uselistorder i32 %v1_15578, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_103dc, { 1, 3, 4, 0, 2 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_155a8(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_155a8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_155a8 = load i32, i32* @r4, align 4
  store i32 %v3_155a8, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_155c02 = icmp eq i32 %arg3, 0
  store i1 %v2_155c02, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_155c02, label %dec_label_pc_15650, label %dec_label_pc_155c8

dec_label_pc_155c0thread-pre-split:               ; preds = %dec_label_pc_155c8
  %v3_155e0 = load i32, i32* %r6.global-to-local, align 4
  %v5_155e0 = add i32 %v3_155e0, %v3_155d8
  store i32 %v5_155e0, i32* %r6.global-to-local, align 4
  %v4_155e4 = load i32, i32* %r5.global-to-local, align 4
  %v5_155e4 = sub i32 %v4_155e4, %v3_155d8
  store i32 %v5_155e4, i32* %r5.global-to-local, align 4
  %v2_155c0 = icmp eq i32 %v5_155e4, 0
  store i1 %v2_155c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_155c0, label %dec_label_pc_155c0.dec_label_pc_15650.loopexit_crit_edge, label %dec_label_pc_155c0thread-pre-split.dec_label_pc_155c8_crit_edge

dec_label_pc_155c0thread-pre-split.dec_label_pc_155c8_crit_edge: ; preds = %dec_label_pc_155c0thread-pre-split
  %v3_155c8.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_155d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_155c8

dec_label_pc_155c8:                               ; preds = %dec_label_pc_155a8, %dec_label_pc_155c0thread-pre-split.dec_label_pc_155c8_crit_edge
  %v0_155d4 = phi i32 [ %v0_155d4.pre, %dec_label_pc_155c0thread-pre-split.dec_label_pc_155c8_crit_edge ], [ %tmp, %dec_label_pc_155a8 ]
  %v0_155d0 = phi i32 [ %v5_155e0, %dec_label_pc_155c0thread-pre-split.dec_label_pc_155c8_crit_edge ], [ %arg2, %dec_label_pc_155a8 ]
  %v3_155c8 = phi i32 [ %v3_155c8.pre, %dec_label_pc_155c0thread-pre-split.dec_label_pc_155c8_crit_edge ], [ 2147483647, %dec_label_pc_155a8 ]
  %v0_155cc.in = phi i32 [ %v5_155e4, %dec_label_pc_155c0thread-pre-split.dec_label_pc_155c8_crit_edge ], [ %arg3, %dec_label_pc_155a8 ]
  %v3_155cc = phi i32 [ %v5_155e4, %dec_label_pc_155c0thread-pre-split.dec_label_pc_155c8_crit_edge ], [ %arg3, %dec_label_pc_155a8 ]
  %v0_155cc = icmp slt i32 %v0_155cc.in, 0
  %storemerge = select i1 %v0_155cc, i32 %v3_155c8, i32 %v3_155cc
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_155d0, i32* %r1.global-to-local, align 4
  %v1_155d4 = add i32 %v0_155d4, 4
  %v2_155d4 = inttoptr i32 %v1_155d4 to i32*
  %v3_155d4 = load i32, i32* %v2_155d4, align 4
  %v3_155d8 = call i32 @function_10550(i32 %v3_155d4, i32 %v0_155d0)
  %v1_155dc = icmp slt i32 %v3_155d8, 0
  %v2_155dc = icmp eq i32 %v3_155d8, 0
  store i1 %v2_155dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_155dc, label %dec_label_pc_155ec, label %dec_label_pc_155c0thread-pre-split

dec_label_pc_155ec:                               ; preds = %dec_label_pc_155c8
  %v0_155ec = load i32, i32* %r4.global-to-local, align 4
  %v1_155ec = inttoptr i32 %v0_155ec to i16*
  %v2_155ec = load i16, i16* %v1_155ec, align 2
  %v3_155ec = zext i16 %v2_155ec to i32
  store i32 %v3_155ec, i32* %r3.global-to-local, align 4
  %v1_155f0 = add i32 %v0_155ec, 8
  store i32 %v1_155f0, i32* %r1.global-to-local, align 4
  %v1_155f4 = inttoptr i32 %v1_155f0 to i32*
  %v2_155f4 = load i32, i32* %v1_155f4, align 4
  store i32 %v2_155f4, i32* %r1.global-to-local, align 4
  %v3_155f4 = add i32 %v0_155ec, 12
  %v4_155f4 = inttoptr i32 %v3_155f4 to i32*
  %v5_155f4 = load i32, i32* %v4_155f4, align 4
  %v1_155f8 = or i32 %v3_155ec, 8
  store i32 %v1_155f8, i32* %r3.global-to-local, align 4
  %v2_155fc = sub i32 %v5_155f4, %v2_155f4
  store i32 %v2_155fc, i32* %r2.global-to-local, align 4
  %v9_155fc = icmp eq i32 %v5_155f4, %v2_155f4
  store i1 %v9_155fc, i1* %cpsr_z.global-to-local, align 1
  %v1_15600 = trunc i32 %v1_155f8 to i16
  store i16 %v1_15600, i16* %v1_155ec, align 2
  br i1 %v9_155fc, label %dec_label_pc_155ec.dec_label_pc_1564c_crit_edge, label %dec_label_pc_15608

dec_label_pc_155ec.dec_label_pc_1564c_crit_edge:  ; preds = %dec_label_pc_155ec
  %v0_1564c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1564c

dec_label_pc_15608:                               ; preds = %dec_label_pc_155ec
  %v0_15608 = load i32, i32* %r2.global-to-local, align 4
  %v1_15608 = load i32, i32* %r5.global-to-local, align 4
  %v3_15608 = icmp ult i32 %v0_15608, %v1_15608
  %v9_15608 = icmp eq i32 %v0_15608, %v1_15608
  store i1 %v9_15608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15608, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_15608
  store i32 %v1_15608, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_15608, %bb23
  %v2_1561c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_15630
  %v2_1561c = phi i32 [ %v2_1561c.pre, %.preheader ], [ %v1_15634, %dec_label_pc_15630 ]
  %v0_15610 = load i32, i32* %r6.global-to-local, align 4
  %v1_15610 = inttoptr i32 %v0_15610 to i8*
  %v2_15610 = load i8, i8* %v1_15610, align 1
  %v3_15610 = zext i8 %v2_15610 to i32
  store i32 %v3_15610, i32* %r3.global-to-local, align 4
  %v7_15614 = icmp eq i8 %v2_15610, 10
  store i1 %v7_15614, i1* %cpsr_z.global-to-local, align 1
  %v1_15618 = add i32 %v0_15610, 1
  store i32 %v1_15618, i32* %r6.global-to-local, align 4
  %v3_1561c = inttoptr i32 %v2_1561c to i8*
  store i8 %v2_15610, i8* %v3_1561c, align 1
  %v0_15620 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15620, label %dec_label_pc_15624, label %dec_label_pc_15630

dec_label_pc_15624:                               ; preds = %bb24
  %v0_15624 = load i32, i32* %r4.global-to-local, align 4
  %v1_15624 = inttoptr i32 %v0_15624 to i16*
  %v2_15624 = load i16, i16* %v1_15624, align 2
  %v3_15624 = zext i16 %v2_15624 to i32
  store i32 %v3_15624, i32* %r3.global-to-local, align 4
  %v1_15628 = and i32 %v3_15624, 256
  %v2_15628 = icmp eq i32 %v1_15628, 0
  store i1 %v2_15628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15628, label %dec_label_pc_15630, label %dec_label_pc_15624.dec_label_pc_1563c_crit_edge

dec_label_pc_15624.dec_label_pc_1563c_crit_edge:  ; preds = %dec_label_pc_15624
  %v0_15640.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1563c

dec_label_pc_15630:                               ; preds = %dec_label_pc_15624, %bb24
  %v0_15630 = load i32, i32* %r2.global-to-local, align 4
  %v1_15630 = add i32 %v0_15630, -1
  store i32 %v1_15630, i32* %r2.global-to-local, align 4
  %v7_15630 = icmp eq i32 %v0_15630, 1
  store i1 %v7_15630, i1* %cpsr_z.global-to-local, align 1
  %v0_15634 = load i32, i32* %r1.global-to-local, align 4
  %v1_15634 = add i32 %v0_15634, 1
  store i32 %v1_15634, i32* %r1.global-to-local, align 4
  br i1 %v7_15630, label %dec_label_pc_15630.dec_label_pc_1563c_crit_edge, label %bb24

dec_label_pc_15630.dec_label_pc_1563c_crit_edge:  ; preds = %dec_label_pc_15630
  %v0_1563c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1563c

dec_label_pc_1563c:                               ; preds = %dec_label_pc_15624.dec_label_pc_1563c_crit_edge, %dec_label_pc_15630.dec_label_pc_1563c_crit_edge
  %v0_15640 = phi i32 [ %v1_15634, %dec_label_pc_15630.dec_label_pc_1563c_crit_edge ], [ %v0_15640.pre, %dec_label_pc_15624.dec_label_pc_1563c_crit_edge ]
  %v0_1563c = phi i32 [ %v0_1563c.pre, %dec_label_pc_15630.dec_label_pc_1563c_crit_edge ], [ %v0_15624, %dec_label_pc_15624.dec_label_pc_1563c_crit_edge ]
  %v1_1563c = add i32 %v0_1563c, 8
  %v2_1563c = inttoptr i32 %v1_1563c to i32*
  %v3_1563c = load i32, i32* %v2_1563c, align 4
  store i32 %v3_1563c, i32* %r3.global-to-local, align 4
  %v2_15640 = add i32 %v0_1563c, 16
  %v3_15640 = inttoptr i32 %v2_15640 to i32*
  store i32 %v0_15640, i32* %v3_15640, align 4
  %v0_15644 = load i32, i32* %r3.global-to-local, align 4
  %v1_15644 = load i32, i32* %r1.global-to-local, align 4
  %v2_15644 = sub i32 %v1_15644, %v0_15644
  store i32 %v2_15644, i32* %r3.global-to-local, align 4
  %v1_15648 = load i32, i32* %r5.global-to-local, align 4
  %v2_15648 = sub i32 %v1_15648, %v2_15644
  store i32 %v2_15648, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1564c

dec_label_pc_1564c:                               ; preds = %dec_label_pc_155ec.dec_label_pc_1564c_crit_edge, %dec_label_pc_1563c
  %v0_1564c = phi i32 [ %v0_1564c.pre, %dec_label_pc_155ec.dec_label_pc_1564c_crit_edge ], [ %v2_15648, %dec_label_pc_1563c ]
  %v1_1564c = load i32, i32* @r7, align 4
  %v2_1564c = sub i32 %v1_1564c, %v0_1564c
  br label %dec_label_pc_15650

dec_label_pc_155c0.dec_label_pc_15650.loopexit_crit_edge: ; preds = %dec_label_pc_155c0thread-pre-split
  %v0_15650.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15650

dec_label_pc_15650:                               ; preds = %dec_label_pc_155a8, %dec_label_pc_155c0.dec_label_pc_15650.loopexit_crit_edge, %dec_label_pc_1564c
  %v0_15650 = phi i32 [ %v2_1564c, %dec_label_pc_1564c ], [ %v0_15650.pre.pre, %dec_label_pc_155c0.dec_label_pc_15650.loopexit_crit_edge ], [ 0, %dec_label_pc_155a8 ]
  %v2_15654 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15654, i32* %r4.global-to-local, align 4
  ret i32 %v0_15650

; uselistorder directives
  uselistorder i32 %v0_1563c, { 1, 0 }
  uselistorder i32 %v1_15634, { 0, 2, 1 }
  uselistorder i32 %v0_15630, { 1, 0 }
  uselistorder i32 %v1_15608, { 0, 2, 1 }
  uselistorder i32 %v0_15608, { 1, 0 }
  uselistorder i32 %v5_155f4, { 1, 0 }
  uselistorder i32 %v2_155f4, { 1, 0, 2 }
  uselistorder i32 %v3_155d8, { 2, 3, 0, 1 }
  uselistorder i32 %v0_155d0, { 1, 0 }
  uselistorder i32 %v5_155e4, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r2.global-to-local, { 2, 4, 3, 5, 6, 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 5, 4, 6, 7, 8, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32 256, { 263, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 256, 264, 261, 262, 265, 33, 35, 34, 36, 255, 0, 260, 1, 37, 38, 39, 40, 42, 43, 44, 41, 46, 47, 48, 45, 49, 258, 50, 269, 270, 51, 52, 53, 272, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 64, 66, 67, 259, 273, 271, 68, 69, 70, 71, 266, 72, 73, 74, 75, 76, 267, 77, 78, 79, 80, 268, 81, 82, 83, 84, 86, 85, 87, 89, 88, 90, 92, 91, 93, 274, 94, 95, 275, 106, 100, 96, 107, 101, 108, 102, 97, 98, 103, 104, 109, 105, 99, 110, 111, 112, 113, 114, 115, 116, 123, 120, 117, 124, 121, 125, 122, 118, 119, 126, 127, 128, 129, 140, 135, 141, 136, 142, 137, 143, 138, 130, 131, 132, 133, 144, 139, 134, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 158, 162, 159, 163, 160, 155, 156, 157, 164, 165, 166, 167, 168, 178, 179, 173, 169, 180, 174, 181, 175, 170, 176, 182, 177, 171, 172, 183, 184, 185, 186, 187, 188, 193, 191, 189, 194, 192, 190, 195, 257, 276, 196, 198, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 216, 223, 217, 224, 218, 219, 212, 213, 225, 220, 226, 221, 214, 215, 222, 227, 228, 229, 230, 231, 232, 237, 244, 238, 245, 239, 233, 234, 246, 240, 247, 241, 242, 235, 236, 243, 248, 249, 250, 251, 252, 253, 254 }
  uselistorder i8 10, { 1, 2, 0 }
  uselistorder i32 (i32, i32)* @function_10550, { 2, 1, 0 }
  uselistorder i32 4, { 198, 199, 200, 192, 193, 324, 201, 444, 4, 5, 202, 6, 7, 68, 0, 8, 80, 75, 76, 9, 445, 77, 446, 58, 10, 11, 78, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 12, 464, 465, 466, 467, 468, 469, 57, 470, 471, 472, 473, 474, 475, 13, 14, 79, 476, 203, 92, 204, 15, 205, 93, 206, 207, 208, 209, 130, 210, 211, 212, 213, 214, 215, 16, 194, 195, 196, 197, 282, 283, 187, 188, 189, 190, 191, 477, 131, 94, 478, 17, 479, 132, 133, 59, 385, 386, 387, 388, 389, 390, 134, 135, 18, 391, 392, 393, 394, 395, 396, 397, 398, 136, 383, 384, 354, 355, 356, 357, 358, 359, 360, 361, 362, 19, 363, 364, 365, 399, 20, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 137, 138, 139, 414, 415, 418, 421, 416, 417, 95, 140, 419, 50, 420, 422, 423, 424, 426, 141, 22, 21, 425, 142, 143, 144, 250, 145, 51, 23, 24, 284, 285, 286, 287, 288, 25, 289, 427, 428, 186, 26, 27, 96, 251, 60, 28, 236, 97, 237, 146, 238, 253, 254, 29, 255, 81, 98, 99, 216, 217, 239, 240, 219, 220, 221, 101, 233, 234, 235, 218, 100, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 241, 242, 54, 53, 256, 69, 257, 30, 258, 56, 55, 259, 31, 252, 260, 261, 266, 102, 267, 103, 268, 104, 269, 105, 270, 106, 107, 272, 273, 271, 262, 108, 263, 264, 265, 243, 147, 244, 52, 32, 245, 246, 33, 247, 61, 70, 109, 248, 249, 274, 67, 66, 65, 275, 110, 34, 35, 36, 37, 38, 39, 276, 63, 62, 277, 64, 111, 278, 279, 280, 112, 281, 113, 114, 115, 290, 148, 291, 292, 293, 294, 295, 149, 150, 116, 296, 40, 117, 298, 82, 299, 300, 151, 301, 302, 152, 153, 303, 118, 304, 83, 305, 306, 154, 155, 307, 156, 308, 309, 310, 157, 158, 311, 119, 312, 84, 313, 159, 160, 314, 315, 316, 120, 85, 317, 318, 161, 319, 320, 321, 162, 163, 1, 121, 322, 86, 323, 325, 326, 164, 327, 328, 165, 166, 2, 71, 329, 122, 331, 87, 332, 333, 334, 335, 167, 168, 336, 337, 169, 338, 339, 123, 340, 3, 341, 88, 342, 124, 343, 344, 345, 170, 346, 347, 348, 349, 171, 172, 126, 350, 72, 351, 125, 352, 89, 353, 429, 430, 173, 431, 432, 433, 127, 434, 128, 435, 436, 437, 174, 175, 129, 438, 73, 439, 90, 440, 91, 443, 176, 41, 366, 177, 42, 367, 178, 43, 368, 179, 74, 44, 369, 370, 180, 45, 371, 181, 46, 372, 182, 47, 373, 183, 48, 374, 184, 49, 375, 376, 185, 377, 378, 379, 380, 381, 382, 441, 442, 330, 297 }
  uselistorder i32 2147483647, { 1, 5, 0, 2, 3, 4 }
  uselistorder i32* @r7, {}
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_15650, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1564c, { 1, 0 }
  uselistorder label %dec_label_pc_1563c, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_155c8, { 1, 0 }
}

define i32 @function_1565c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1565c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1565c = load i32, i32* @r4, align 4
  store i32 %v3_1565c, i32* %stack_var_-8, align 4
  %v1_15660 = add i32 %arg1, 8
  %v1_15664 = inttoptr i32 %v1_15660 to i32*
  %v2_15664 = load i32, i32* %v1_15664, align 4
  %v3_15664 = add i32 %arg1, 12
  %v4_15664 = inttoptr i32 %v3_15664 to i32*
  %v5_15664 = load i32, i32* %v4_15664, align 4
  %v2_15668 = sub i32 %v5_15664, %v2_15664
  store i32 %v2_15668, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_15670 = inttoptr i32 %arg1 to i16*
  %v4_15670 = call i32 @function_15550(i16* %v3_15670, i32 %v2_15664, i32 %v2_15668)
  %v0_15674 = load i32, i32* @r4, align 4
  %v1_15674 = add i32 %v0_15674, 8
  %v2_15674 = inttoptr i32 %v1_15674 to i32*
  %v3_15674 = load i32, i32* %v2_15674, align 4
  store i32 %v3_15674, i32* %r2.global-to-local, align 4
  %v2_15678 = add i32 %v3_15674, %v4_15670
  %v2_1567c = add i32 %v0_15674, 20
  %v3_1567c = inttoptr i32 %v2_1567c to i32*
  store i32 %v2_15678, i32* %v3_1567c, align 4
  %v0_15680 = load i32, i32* %r2.global-to-local, align 4
  %v1_15680 = load i32, i32* @r4, align 4
  %v2_15680 = add i32 %v1_15680, 16
  %v3_15680 = inttoptr i32 %v2_15680 to i32*
  store i32 %v0_15680, i32* %v3_15680, align 4
  %v2_15684 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15684, i32* @r4, align 4
  ret i32 %v4_15670

; uselistorder directives
  uselistorder i32 %v4_15670, { 1, 0 }
  uselistorder i32 20, { 29, 110, 3, 111, 112, 1, 113, 30, 9, 31, 32, 33, 34, 28, 47, 48, 24, 25, 26, 27, 114, 10, 115, 101, 102, 104, 2, 49, 11, 50, 51, 0, 12, 39, 38, 13, 35, 14, 36, 15, 37, 41, 42, 4, 43, 16, 44, 23, 40, 45, 46, 52, 54, 5, 53, 55, 56, 57, 58, 59, 60, 6, 61, 62, 63, 64, 65, 66, 68, 69, 17, 67, 70, 71, 72, 73, 74, 75, 77, 78, 18, 76, 79, 80, 81, 82, 84, 85, 19, 83, 86, 87, 88, 89, 90, 91, 93, 20, 92, 94, 95, 96, 99, 7, 97, 21, 98, 100, 105, 108, 8, 106, 22, 107, 109, 103 }
  uselistorder i32 12, { 9, 10, 36, 11, 12, 39, 6, 159, 160, 161, 162, 163, 165, 166, 164, 167, 168, 169, 170, 171, 172, 173, 13, 14, 15, 16, 18, 17, 19, 40, 41, 20, 42, 43, 44, 45, 46, 37, 38, 77, 78, 33, 34, 35, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 2, 108, 109, 110, 111, 112, 21, 113, 131, 22, 23, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 150, 143, 144, 145, 146, 147, 148, 149, 151, 152, 24, 153, 3, 79, 80, 25, 81, 82, 26, 60, 56, 57, 61, 62, 58, 48, 54, 55, 47, 49, 50, 51, 52, 53, 59, 63, 64, 65, 5, 66, 67, 68, 69, 71, 72, 73, 27, 74, 76, 75, 70, 4, 154, 83, 28, 84, 29, 85, 30, 86, 31, 87, 88, 89, 90, 91, 92, 93, 94, 32, 95, 96, 97, 7, 98, 99, 100, 101, 102, 103, 8, 104, 105, 106, 107, 155, 156, 157, 158, 0, 1 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_1568c() local_unnamed_addr {
dec_label_pc_1568c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1568c = load i32, i32* @r4, align 4
  store i32 %v3_1568c, i32* %stack_var_-12, align 4
  %v0_15690 = load i32, i32* @r0, align 4
  %v1_15690 = inttoptr i32 %v0_15690 to i16*
  %v2_15690 = load i16, i16* %v1_15690, align 2
  %v3_15690 = zext i16 %v2_15690 to i32
  store i32 %v3_15690, i32* %r3.global-to-local, align 4
  %v0_15694 = load i32, i32* @r1, align 4
  %v2_15694 = and i32 %v0_15694, %v3_15690
  %v4_15694 = icmp eq i32 %v2_15694, 0
  store i32 %v0_15690, i32* @r4, align 4
  br i1 %v4_15694, label %dec_label_pc_156a4, label %dec_label_pc_156b4

dec_label_pc_156a4:                               ; preds = %dec_label_pc_1568c
  %v1_156a4 = and i32 %v3_15690, 2176
  %v2_156a4 = icmp eq i32 %v1_156a4, 0
  br i1 %v2_156a4, label %dec_label_pc_156ac, label %dec_label_pc_156c0

dec_label_pc_156ac:                               ; preds = %dec_label_pc_156a4
  %v2_156ac = or i32 %v0_15694, %v3_15690
  store i32 %v2_156ac, i32* %r3.global-to-local, align 4
  %v1_156b0 = trunc i32 %v2_156ac to i16
  store i16 %v1_156b0, i16* %v1_15690, align 2
  %v0_156b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_156b4

dec_label_pc_156b4:                               ; preds = %dec_label_pc_1568c, %dec_label_pc_156ac
  %v0_156b4 = phi i32 [ %v0_15690, %dec_label_pc_1568c ], [ %v0_156b4.pre, %dec_label_pc_156ac ]
  %v1_156b4 = inttoptr i32 %v0_156b4 to i16*
  %v2_156b4 = load i16, i16* %v1_156b4, align 2
  %v3_156b4 = zext i16 %v2_156b4 to i32
  store i32 %v3_156b4, i32* %r3.global-to-local, align 4
  %v1_156b8 = and i32 %v3_156b4, 16
  store i32 %v1_156b8, i32* %r5.global-to-local, align 4
  %v2_156b8 = icmp eq i32 %v1_156b8, 0
  br i1 %v2_156b8, label %dec_label_pc_156e0, label %dec_label_pc_156c0

dec_label_pc_156c0:                               ; preds = %dec_label_pc_156a4, %dec_label_pc_156b4
  %v0_156c0 = call i32 @function_10a6c()
  store i32 %v0_156c0, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_156c8 = inttoptr i32 %v0_156c0 to i32*
  store i32 9, i32* %v2_156c8, align 4
  br label %dec_label_pc_156cc

dec_label_pc_156cc:                               ; preds = %dec_label_pc_156e8, %dec_label_pc_156c0
  %v0_156cc = load i32, i32* @r4, align 4
  %v1_156cc = inttoptr i32 %v0_156cc to i16*
  %v2_156cc = load i16, i16* %v1_156cc, align 2
  %v3_156cc = zext i16 %v2_156cc to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_156d4 = or i32 %v3_156cc, 8
  store i32 %v1_156d4, i32* %r3.global-to-local, align 4
  %v1_156d8 = trunc i32 %v1_156d4 to i16
  store i16 %v1_156d8, i16* %v1_156cc, align 2
  %v1_15720.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15718

dec_label_pc_156e0:                               ; preds = %dec_label_pc_156b4
  %v1_156e0 = and i32 %v3_156b4, 64
  %v2_156e0 = icmp eq i32 %v1_156e0, 0
  br i1 %v2_156e0, label %dec_label_pc_15708, label %dec_label_pc_156e8

dec_label_pc_156e8:                               ; preds = %dec_label_pc_156e0
  %v0_156e8 = load i32, i32* @r0, align 4
  %v1_156e8 = call i32 @function_142c4(i32 %v0_156e8)
  store i32 %v1_156e8, i32* %r0.global-to-local, align 4
  %v2_156ec = icmp eq i32 %v1_156e8, 0
  br i1 %v2_156ec, label %dec_label_pc_156f4, label %dec_label_pc_156cc

dec_label_pc_156f4:                               ; preds = %dec_label_pc_156e8
  %v0_156f4 = load i32, i32* @r4, align 4
  %v1_156f4 = inttoptr i32 %v0_156f4 to i16*
  %v2_156f4 = load i16, i16* %v1_156f4, align 2
  %v3_156f4 = zext i16 %v2_156f4 to i32
  store i32 %v3_156f4, i32* %r3.global-to-local, align 4
  %v1_156f8 = add i32 %v0_156f4, 8
  %v2_156f8 = inttoptr i32 %v1_156f8 to i32*
  %v3_156f8 = load i32, i32* %v2_156f8, align 4
  %v1_156fc = and i32 %v3_156f4, 65471
  store i32 %v1_156fc, i32* %r3.global-to-local, align 4
  %v2_15700 = add i32 %v0_156f4, 28
  %v3_15700 = inttoptr i32 %v2_15700 to i32*
  store i32 %v3_156f8, i32* %v3_15700, align 4
  %v0_15704 = load i32, i32* %r3.global-to-local, align 4
  %v1_15704 = trunc i32 %v0_15704 to i16
  %v2_15704 = load i32, i32* @r4, align 4
  %v3_15704 = inttoptr i32 %v2_15704 to i16*
  store i16 %v1_15704, i16* %v3_15704, align 2
  %v0_15708.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15708

dec_label_pc_15708:                               ; preds = %dec_label_pc_156e0, %dec_label_pc_156f4
  %v2_15710 = phi i32 [ %v0_156b4, %dec_label_pc_156e0 ], [ %v0_15708.pre, %dec_label_pc_156f4 ]
  %v1_15708 = inttoptr i32 %v2_15710 to i16*
  %v2_15708 = load i16, i16* %v1_15708, align 2
  %v3_15708 = zext i16 %v2_15708 to i32
  %v1_1570c = or i32 %v3_15708, 1
  store i32 %v1_1570c, i32* %r3.global-to-local, align 4
  %v1_15710 = trunc i32 %v1_1570c to i16
  store i16 %v1_15710, i16* %v1_15708, align 2
  %v0_15714 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_15714, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15718

dec_label_pc_15718:                               ; preds = %dec_label_pc_156cc, %dec_label_pc_15708
  %v1_15720 = phi i32 [ %v1_15720.pre, %dec_label_pc_156cc ], [ %v0_15714, %dec_label_pc_15708 ]
  %v2_1571c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1571c, i32* @r4, align 4
  ret i32 %v1_15720

; uselistorder directives
  uselistorder i32 %v3_15690, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 20, 44, 7, 21, 22, 23, 33, 34, 18, 11, 19, 12, 13, 14, 15, 41, 42, 43, 8, 16, 0, 24, 1, 25, 2, 26, 3, 27, 4, 28, 5, 29, 6, 30, 9, 17, 32, 31, 35, 36, 37, 38, 39, 40, 10 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_142c4, { 1, 0, 2 }
  uselistorder i32 64, { 12, 13, 14, 15, 18, 8, 9, 10, 11, 48, 16, 17, 19, 20, 2, 21, 22, 23, 3, 24, 25, 26, 27, 4, 28, 29, 30, 5, 31, 32, 33, 6, 34, 35, 36, 0, 37, 38, 39, 40, 41, 7, 42, 43, 44, 45, 46, 1, 47 }
  uselistorder i32 8, { 70, 71, 72, 73, 74, 75, 76, 63, 64, 65, 66, 123, 77, 209, 32, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 78, 79, 80, 81, 82, 83, 84, 26, 85, 86, 87, 88, 89, 90, 91, 92, 93, 67, 68, 69, 106, 107, 108, 42, 227, 228, 52, 153, 154, 155, 156, 157, 158, 159, 160, 5, 53, 161, 162, 163, 164, 165, 166, 167, 168, 6, 139, 140, 141, 142, 143, 144, 145, 146, 169, 170, 171, 172, 173, 7, 174, 175, 8, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 193, 186, 187, 188, 189, 54, 21, 190, 191, 192, 55, 56, 9, 194, 195, 196, 197, 199, 200, 57, 10, 201, 11, 198, 35, 36, 33, 34, 23, 24, 29, 30, 37, 229, 109, 110, 111, 112, 43, 61, 27, 12, 13, 20, 14, 15, 16, 17, 98, 44, 94, 62, 31, 99, 100, 101, 22, 25, 103, 18, 45, 104, 105, 102, 95, 96, 46, 97, 60, 47, 48, 49, 113, 59, 38, 114, 115, 116, 117, 118, 28, 119, 120, 121, 122, 2, 124, 125, 126, 3, 127, 128, 129, 130, 131, 132, 133, 4, 134, 135, 136, 137, 138, 202, 203, 204, 205, 206, 147, 39, 148, 40, 149, 41, 150, 50, 151, 58, 19, 152, 51, 207, 208, 0, 1 }
  uselistorder i32 9, { 4, 26, 21, 22, 47, 48, 5, 34, 3, 35, 6, 31, 27, 7, 8, 28, 23, 32, 2, 24, 33, 25, 9, 29, 30, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 1, 19, 49, 36, 37, 20, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51 }
  uselistorder i32 16, { 95, 96, 97, 89, 90, 91, 92, 98, 29, 30, 31, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 99, 100, 101, 102, 103, 2, 1, 22, 43, 44, 45, 46, 106, 47, 107, 104, 105, 48, 49, 108, 8, 50, 51, 109, 110, 52, 53, 111, 112, 93, 94, 54, 131, 132, 85, 86, 87, 88, 55, 56, 57, 58, 189, 190, 191, 192, 59, 194, 3, 60, 195, 196, 0, 197, 198, 61, 21, 133, 62, 134, 63, 64, 9, 20, 10, 11, 4, 12, 13, 65, 120, 66, 121, 70, 116, 122, 117, 67, 113, 68, 114, 69, 115, 125, 126, 127, 32, 84, 71, 72, 14, 81, 15, 16, 73, 123, 124, 74, 118, 119, 35, 34, 33, 128, 36, 129, 37, 75, 76, 130, 38, 199, 77, 135, 136, 137, 138, 23, 139, 140, 141, 142, 143, 144, 145, 24, 146, 147, 148, 78, 149, 79, 39, 150, 151, 25, 152, 153, 17, 154, 155, 5, 40, 156, 157, 158, 26, 159, 160, 161, 162, 163, 6, 41, 164, 165, 166, 82, 18, 83, 167, 27, 168, 169, 170, 19, 28, 171, 80, 172, 173, 7, 42, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 185, 187, 188, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 210, 212, 213, 193 }
  uselistorder i32* @r1, { 15, 14, 54, 16, 17, 18, 19, 1, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 2, 91, 92, 20, 21, 22, 23, 0, 39, 40, 10, 24, 3, 65, 59, 60, 4, 66, 5, 30, 31, 9, 55, 25, 41, 12, 67, 68, 42, 7, 69, 43, 44, 11, 32, 26, 27, 28, 34, 33, 29, 70, 35, 36, 37, 38, 45, 46, 47, 8, 48, 71, 72, 6, 49, 50, 51, 52, 53, 56, 57, 58, 73, 61, 62, 63, 64, 13 }
  uselistorder label %dec_label_pc_15718, { 1, 0 }
  uselistorder label %dec_label_pc_15708, { 1, 0 }
  uselistorder label %dec_label_pc_156c0, { 1, 0 }
  uselistorder label %dec_label_pc_156b4, { 1, 0 }
}

define i32 @function_15724(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15724:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_15724 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_15734 = call i32 @function_10b70()
  %v0_15738 = load i32, i32* @r5, align 4
  %v1_15738 = load i32, i32* @r4, align 4
  %v2_15738 = add i32 %v1_15738, %v0_15738
  store i32 %v6_15724, i32* @r5, align 4
  ret i32 %v2_15738

; uselistorder directives
  uselistorder i32 ()* @function_10b70, { 4, 8, 7, 0, 3, 2, 6, 5, 1 }
  uselistorder i32* @r5, { 44, 45, 46, 47, 30, 31, 32, 33, 34, 35, 36, 37, 38, 48, 4, 49, 50, 51, 576, 577, 578, 52, 26, 53, 0, 54, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 22, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 28, 29, 77, 78, 79, 80, 81, 82, 5, 83, 84, 85, 86, 87, 88, 89, 6, 90, 91, 92, 9, 93, 94, 7, 95, 96, 97, 98, 99, 100, 8, 101, 102, 103, 104, 105, 106, 39, 10, 40, 41, 42, 43, 237, 238, 239, 240, 241, 242, 591, 11, 592, 593, 601, 602, 107, 108, 109, 110, 111, 112, 113, 594, 595, 596, 597, 598, 599, 600, 114, 115, 116, 117, 506, 507, 511, 512, 513, 514, 515, 508, 509, 510, 469, 470, 471, 12, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 516, 517, 540, 13, 541, 542, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 2, 531, 532, 533, 534, 535, 14, 536, 537, 538, 539, 135, 136, 137, 138, 139, 243, 244, 15, 245, 246, 247, 248, 249, 27, 118, 250, 16, 251, 252, 253, 254, 255, 256, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 122, 123, 124, 119, 120, 121, 189, 190, 191, 192, 193, 194, 195, 196, 202, 203, 204, 205, 206, 207, 197, 198, 199, 200, 201, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 1, 227, 228, 229, 17, 230, 231, 232, 233, 234, 235, 236, 257, 258, 259, 260, 261, 23, 262, 263, 264, 265, 266, 267, 268, 24, 269, 25, 270, 271, 272, 273, 274, 275, 276, 277, 18, 278, 19, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 303, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 324, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 20, 337, 338, 339, 340, 341, 342, 343, 3, 345, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 21, 421, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 447, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 543, 544, 545, 546, 547, 554, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505 }
  uselistorder i32* @r2, { 7, 10, 11, 34, 35, 12, 13, 14, 15, 16, 17, 22, 8, 9, 23, 36, 40, 41, 42, 43, 1, 46, 37, 2, 3, 30, 31, 4, 32, 5, 0, 44, 6, 45, 38, 39, 27, 28, 29, 21, 18, 19, 20, 33, 24, 25, 26 }
}

define i32 @function_15748(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15748:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15788, label %dec_label_pc_15774

dec_label_pc_15774:                               ; preds = %dec_label_pc_15748
  %v0_15774 = call i32 @function_10a6c()
  %v0_15778 = load i32, i32* %r4.global-to-local, align 4
  %v1_15778 = sub i32 0, %v0_15778
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_15780 = inttoptr i32 %v0_15774 to i32*
  store i32 %v1_15778, i32* %v2_15780, align 4
  %v0_15790.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15790

dec_label_pc_15788:                               ; preds = %dec_label_pc_15748
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_15788 = icmp eq i32 %arg1, 0
  br i1 %v2_15788, label %dec_label_pc_1579c, label %dec_label_pc_15790

dec_label_pc_15790:                               ; preds = %dec_label_pc_15788, %dec_label_pc_15774
  %v0_15790 = phi i32 [ %arg1, %dec_label_pc_15788 ], [ %v0_15790.pre, %dec_label_pc_15774 ]
  br label %dec_label_pc_157a0

dec_label_pc_1579c:                               ; preds = %dec_label_pc_15788
  br label %dec_label_pc_157a0

dec_label_pc_157a0:                               ; preds = %dec_label_pc_15790, %dec_label_pc_1579c
  %v1_157a8 = phi i32 [ %v0_15790, %dec_label_pc_15790 ], [ %tmp8, %dec_label_pc_1579c ]
  ret i32 %v1_157a8

; uselistorder directives
  uselistorder i32 -1, {}
  uselistorder i32 ()* @function_10a6c, { 60, 27, 59, 58, 57, 62, 56, 55, 6, 5, 22, 37, 18, 36, 35, 61, 17, 16, 15, 21, 12, 0, 13, 52, 51, 11, 10, 9, 26, 24, 50, 38, 49, 48, 23, 25, 47, 54, 53, 34, 32, 31, 30, 8, 3, 46, 45, 44, 33, 1, 7, 4, 28, 29, 43, 20, 42, 2, 41, 40, 39, 14, 19 }
  uselistorder i32 1, { 327, 326, 780, 606, 388, 389, 390, 607, 299, 781, 782, 783, 608, 312, 314, 313, 315, 309, 308, 310, 311, 609, 144, 143, 145, 610, 97, 98, 95, 101, 99, 96, 100, 611, 22, 133, 132, 424, 449, 425, 995, 996, 997, 998, 437, 345, 613, 612, 365, 366, 784, 614, 428, 1087, 429, 785, 1088, 786, 787, 788, 790, 789, 412, 615, 792, 791, 930, 931, 1089, 430, 1090, 1091, 1092, 1093, 1094, 1095, 776, 1096, 1097, 1098, 1099, 1100, 1101, 777, 599, 617, 616, 398, 399, 404, 406, 405, 400, 397, 401, 403, 402, 796, 793, 794, 795, 447, 431, 186, 182, 183, 184, 185, 482, 797, 798, 799, 800, 618, 600, 69, 70, 801, 621, 620, 619, 71, 73, 74, 77, 76, 75, 72, 483, 802, 623, 622, 348, 351, 349, 346, 347, 350, 803, 624, 136, 135, 134, 804, 805, 625, 248, 247, 626, 332, 484, 779, 8, 9, 806, 807, 808, 809, 485, 810, 811, 812, 432, 629, 628, 627, 340, 339, 344, 342, 341, 343, 813, 814, 815, 631, 630, 6, 7, 486, 816, 632, 303, 817, 818, 819, 820, 821, 487, 633, 26, 29, 28, 27, 30, 488, 31, 112, 634, 256, 255, 172, 635, 194, 636, 235, 234, 637, 116, 121, 115, 120, 124, 123, 119, 122, 117, 118, 638, 131, 130, 128, 127, 129, 125, 126, 639, 10, 11, 18, 19, 15, 16, 14, 17, 12, 13, 640, 300, 301, 338, 932, 277, 280, 278, 279, 641, 204, 203, 642, 113, 643, 257, 258, 1102, 489, 1103, 490, 1104, 644, 64, 59, 65, 63, 61, 66, 60, 67, 62, 213, 491, 237, 236, 645, 336, 337, 168, 419, 822, 823, 824, 646, 933, 649, 648, 647, 274, 650, 1105, 438, 492, 652, 651, 653, 25, 1037, 1040, 1041, 1042, 654, 367, 372, 373, 371, 370, 374, 368, 369, 1043, 1044, 1045, 1046, 655, 356, 362, 355, 361, 360, 354, 364, 363, 358, 353, 357, 359, 1038, 1039, 493, 251, 250, 249, 252, 1023, 494, 1024, 1025, 1026, 1027, 1028, 656, 188, 189, 187, 190, 149, 148, 1047, 1048, 1049, 1050, 1051, 1052, 454, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 496, 1061, 1062, 1063, 1064, 1065, 495, 1066, 1067, 1068, 1069, 1070, 657, 377, 379, 375, 378, 381, 384, 383, 385, 382, 380, 386, 376, 276, 275, 497, 498, 882, 423, 661, 660, 659, 658, 254, 191, 433, 90, 662, 24, 23, 137, 663, 142, 664, 181, 665, 212, 666, 114, 667, 330, 329, 316, 668, 147, 146, 669, 169, 670, 294, 293, 671, 284, 672, 825, 826, 827, 828, 829, 830, 831, 1106, 51, 52, 53, 54, 673, 934, 499, 46, 47, 832, 674, 33, 500, 675, 141, 455, 501, 676, 140, 138, 139, 677, 50, 49, 48, 678, 270, 269, 679, 273, 680, 331, 681, 44, 43, 682, 21, 20, 111, 110, 683, 171, 170, 684, 230, 229, 685, 91, 686, 167, 166, 687, 272, 271, 302, 688, 396, 68, 689, 690, 328, 407, 1071, 387, 935, 936, 937, 938, 418, 939, 692, 691, 165, 163, 162, 160, 161, 158, 159, 164, 957, 434, 958, 435, 959, 694, 693, 334, 333, 335, 940, 941, 942, 695, 109, 108, 106, 107, 1072, 1073, 1074, 426, 439, 0, 415, 481, 1075, 103, 102, 104, 105, 848, 849, 850, 502, 943, 352, 1076, 945, 944, 946, 93, 92, 94, 1077, 696, 975, 697, 325, 324, 323, 322, 960, 698, 89, 88, 87, 86, 440, 503, 851, 504, 852, 456, 853, 883, 506, 884, 516, 854, 517, 518, 834, 836, 507, 833, 509, 835, 510, 837, 508, 838, 839, 511, 840, 841, 514, 842, 843, 512, 844, 845, 513, 846, 847, 515, 855, 885, 886, 887, 519, 888, 889, 890, 520, 891, 778, 894, 893, 505, 892, 895, 896, 521, 897, 898, 899, 522, 900, 523, 901, 524, 902, 525, 903, 526, 904, 527, 905, 528, 906, 529, 907, 530, 908, 531, 909, 532, 910, 533, 911, 534, 918, 441, 919, 920, 420, 535, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 173, 179, 178, 176, 177, 180, 175, 174, 912, 913, 536, 914, 915, 537, 916, 917, 38, 37, 36, 42, 39, 40, 41, 35, 34, 538, 539, 713, 712, 393, 394, 391, 392, 395, 856, 857, 858, 859, 860, 861, 862, 408, 417, 863, 864, 442, 409, 865, 866, 867, 868, 410, 416, 869, 870, 443, 411, 871, 540, 872, 873, 541, 874, 542, 875, 876, 436, 879, 877, 878, 413, 414, 880, 543, 881, 721, 602, 720, 719, 718, 717, 716, 715, 601, 714, 79, 78, 83, 82, 85, 81, 80, 84, 722, 259, 1078, 724, 723, 199, 200, 198, 197, 196, 195, 202, 201, 32, 546, 457, 921, 922, 458, 923, 544, 545, 547, 924, 925, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 605, 727, 726, 725, 55, 56, 58, 57, 558, 421, 559, 738, 562, 561, 560, 926, 740, 739, 192, 193, 563, 564, 565, 927, 928, 566, 448, 567, 929, 422, 568, 744, 743, 742, 741, 297, 296, 947, 953, 2, 444, 948, 569, 949, 1, 950, 450, 951, 445, 446, 952, 954, 955, 451, 956, 603, 748, 747, 604, 746, 745, 45, 1079, 459, 460, 1080, 3, 4, 5, 961, 962, 963, 427, 452, 453, 964, 965, 966, 967, 968, 571, 969, 570, 970, 572, 971, 972, 973, 752, 751, 750, 749, 222, 221, 225, 226, 228, 227, 220, 224, 223, 976, 977, 978, 573, 574, 754, 753, 317, 320, 319, 318, 321, 979, 980, 575, 981, 982, 983, 984, 576, 985, 577, 462, 461, 578, 986, 755, 216, 217, 219, 218, 214, 215, 987, 579, 988, 465, 463, 464, 757, 756, 282, 283, 989, 990, 991, 580, 992, 581, 582, 993, 466, 994, 758, 286, 289, 290, 292, 291, 285, 288, 287, 999, 1000, 1001, 583, 1002, 584, 468, 467, 585, 1004, 586, 1005, 759, 262, 265, 266, 268, 267, 260, 264, 263, 261, 1006, 1007, 1008, 1009, 1010, 1011, 587, 1012, 588, 1013, 589, 473, 472, 590, 1014, 469, 1015, 470, 1016, 471, 1017, 765, 764, 763, 762, 761, 760, 205, 208, 209, 211, 210, 206, 207, 1018, 1019, 1020, 591, 476, 475, 592, 1021, 474, 1022, 766, 151, 155, 156, 157, 150, 154, 153, 152, 1081, 1082, 1083, 593, 479, 478, 594, 1084, 477, 1085, 771, 770, 769, 768, 767, 239, 243, 244, 246, 245, 238, 242, 241, 240, 1029, 480, 595, 772, 231, 233, 232, 1030, 1031, 596, 1034, 597, 598, 1032, 1033, 1035, 1036, 305, 306, 304, 307, 1086, 773, 298, 1003, 253, 974, 295, 774, 775, 281 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_157a0, { 1, 0 }
}

define i32 @function_157ac() local_unnamed_addr {
entry:
  %v3_157b0 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_157b0)
  %v31_157b8 = load i32, i32* @r0, align 4
  ret i32 %v31_157b8

; uselistorder directives
  uselistorder i32* @r0, { 30, 26, 21, 59, 58, 165, 28, 4, 5, 202, 6, 15, 7, 60, 0, 61, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 1, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 62, 24, 56, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 19, 10, 135, 136, 11, 14, 13, 229, 231, 232, 48, 49, 50, 51, 52, 53, 54, 55, 29, 17, 77, 78, 230, 79, 181, 25, 44, 45, 182, 2, 183, 184, 185, 180, 172, 41, 173, 174, 175, 42, 176, 177, 20, 193, 194, 186, 187, 188, 189, 190, 191, 192, 87, 88, 23, 89, 9, 12, 137, 138, 139, 140, 178, 18, 16, 27, 195, 141, 196, 22, 142, 143, 144, 145, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 82, 114, 35, 80, 81, 83, 115, 118, 119, 120, 121, 122, 123, 116, 117, 84, 85, 86, 197, 36, 37, 38, 39, 124, 125, 46, 47, 126, 127, 128, 129, 130, 131, 132, 133, 134, 40, 146, 147, 148, 149, 150, 151, 152, 8, 153, 154, 155, 156, 157, 158, 159, 198, 199, 3, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 200, 201, 179, 43, 167, 32, 34, 31, 33 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 59, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 64, 65, 66, 67, 60, 48, 61, 62, 63, 68, 69, 70, 49, 50, 51, 44, 45, 46, 52, 56, 57, 53, 54, 55, 71, 38, 39, 40, 41, 42, 43, 47, 58 }
  uselistorder i32 0, { 472, 473, 482, 483, 484, 485, 486, 83, 487, 488, 489, 0, 490, 247, 45, 491, 289, 492, 493, 494, 276, 277, 474, 475, 480, 1, 84, 85, 805, 806, 807, 808, 115, 116, 809, 495, 117, 86, 965, 966, 967, 248, 496, 497, 498, 249, 968, 46, 250, 969, 970, 64, 35, 36, 499, 54, 2, 76, 77, 685, 55, 56, 57, 686, 687, 971, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 976, 977, 988, 989, 990, 991, 992, 993, 994, 995, 26, 996, 997, 998, 999, 1000, 27, 1001, 1002, 1003, 28, 1004, 1005, 1006, 29, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1031, 1032, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 30, 1050, 1051, 1052, 1053, 1054, 31, 1055, 1056, 1057, 1058, 1059, 32, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 118, 500, 452, 501, 502, 503, 504, 505, 290, 291, 506, 507, 87, 88, 89, 508, 509, 513, 510, 511, 512, 251, 263, 514, 515, 90, 119, 518, 516, 517, 252, 519, 91, 520, 521, 3, 4, 92, 522, 466, 467, 292, 468, 523, 524, 525, 47, 48, 526, 527, 528, 120, 529, 530, 531, 532, 533, 293, 534, 535, 536, 537, 538, 539, 93, 540, 541, 542, 543, 5, 6, 121, 123, 544, 122, 545, 124, 546, 94, 547, 552, 553, 548, 549, 550, 555, 556, 557, 125, 558, 559, 560, 561, 562, 551, 554, 563, 95, 476, 477, 478, 1075, 1076, 852, 688, 872, 481, 689, 690, 278, 691, 294, 469, 295, 470, 873, 874, 875, 126, 876, 692, 693, 694, 471, 479, 96, 127, 1077, 1078, 877, 878, 296, 1082, 1083, 297, 1084, 1085, 128, 254, 1086, 1087, 298, 49, 1088, 1089, 299, 1096, 1097, 1100, 443, 253, 1101, 300, 1098, 1099, 1079, 1080, 453, 129, 237, 564, 566, 565, 130, 567, 568, 569, 301, 570, 78, 695, 71, 696, 132, 131, 697, 97, 1081, 98, 303, 304, 1091, 302, 99, 451, 100, 133, 884, 885, 886, 887, 888, 134, 889, 890, 891, 892, 893, 894, 895, 135, 879, 305, 880, 881, 306, 882, 883, 101, 853, 307, 136, 854, 855, 856, 857, 858, 102, 144, 141, 137, 138, 139, 140, 146, 145, 143, 142, 896, 897, 921, 922, 103, 898, 899, 150, 148, 149, 900, 901, 156, 155, 112, 147, 902, 903, 904, 905, 906, 907, 269, 268, 279, 308, 908, 909, 910, 50, 911, 152, 151, 153, 154, 111, 912, 913, 255, 914, 915, 79, 916, 917, 918, 919, 920, 7, 8, 608, 609, 51, 104, 9, 280, 309, 923, 924, 925, 775, 824, 610, 678, 611, 612, 825, 776, 613, 810, 1102, 1103, 58, 105, 698, 699, 700, 157, 571, 572, 158, 701, 706, 707, 708, 709, 159, 281, 160, 270, 271, 310, 702, 161, 703, 704, 106, 710, 926, 1092, 614, 615, 616, 705, 1095, 927, 1090, 739, 711, 617, 859, 618, 311, 1093, 74, 1094, 10, 928, 929, 75, 930, 931, 932, 933, 934, 162, 935, 444, 454, 445, 446, 936, 455, 113, 163, 712, 713, 714, 72, 264, 715, 716, 164, 37, 165, 312, 619, 717, 718, 719, 938, 937, 939, 940, 941, 942, 33, 166, 943, 944, 945, 167, 65, 66, 313, 287, 288, 583, 169, 168, 170, 720, 171, 721, 722, 172, 946, 947, 314, 173, 723, 174, 175, 759, 176, 740, 620, 179, 621, 622, 315, 623, 585, 586, 177, 178, 587, 589, 573, 67, 38, 240, 241, 574, 575, 456, 576, 588, 316, 584, 457, 577, 458, 578, 459, 579, 460, 580, 461, 581, 462, 582, 590, 591, 317, 592, 624, 442, 625, 318, 626, 627, 257, 256, 628, 629, 630, 631, 181, 180, 632, 633, 634, 463, 238, 635, 61, 62, 239, 636, 59, 60, 319, 638, 639, 447, 640, 641, 642, 643, 644, 320, 645, 646, 647, 265, 114, 450, 648, 649, 650, 449, 651, 652, 321, 653, 322, 654, 657, 658, 659, 182, 655, 183, 656, 12, 11, 184, 637, 593, 594, 595, 69, 39, 596, 68, 40, 597, 598, 323, 599, 324, 600, 325, 601, 602, 604, 185, 186, 603, 266, 41, 63, 272, 605, 187, 13, 606, 948, 949, 607, 448, 660, 326, 661, 663, 188, 664, 665, 666, 667, 668, 669, 670, 190, 189, 671, 327, 672, 328, 673, 329, 662, 674, 273, 675, 330, 676, 353, 354, 331, 677, 332, 680, 464, 193, 192, 191, 259, 333, 679, 258, 681, 682, 683, 42, 684, 194, 334, 73, 724, 725, 726, 727, 262, 728, 729, 730, 261, 731, 732, 733, 734, 195, 735, 737, 736, 107, 108, 196, 260, 198, 197, 738, 199, 200, 52, 201, 741, 742, 80, 81, 53, 743, 202, 203, 242, 744, 205, 745, 206, 204, 335, 746, 747, 749, 748, 750, 207, 751, 752, 282, 753, 754, 755, 208, 209, 756, 210, 758, 211, 760, 212, 761, 762, 70, 763, 764, 213, 765, 766, 767, 214, 769, 215, 243, 770, 768, 771, 772, 773, 216, 774, 777, 218, 779, 780, 217, 778, 781, 109, 337, 338, 782, 783, 339, 340, 784, 336, 785, 786, 219, 787, 788, 220, 221, 789, 790, 110, 791, 792, 14, 15, 16, 17, 793, 794, 222, 284, 795, 796, 341, 797, 342, 798, 343, 799, 344, 800, 345, 801, 346, 802, 283, 803, 347, 804, 811, 812, 223, 814, 815, 224, 244, 816, 813, 817, 818, 819, 18, 19, 20, 820, 225, 823, 826, 827, 43, 828, 226, 829, 830, 227, 245, 832, 831, 348, 833, 835, 836, 837, 349, 838, 21, 22, 23, 834, 24, 25, 839, 228, 840, 841, 229, 844, 845, 846, 246, 847, 842, 843, 849, 848, 850, 230, 851, 950, 951, 231, 953, 954, 955, 232, 350, 957, 956, 952, 959, 960, 958, 961, 233, 964, 274, 860, 351, 861, 44, 862, 82, 863, 864, 865, 275, 866, 352, 867, 868, 869, 34, 267, 870, 871, 962, 234, 963, 821, 235, 822, 236, 757, 285, 465, 286, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118 }
  uselistorder i32* @r4, { 36, 49, 50, 51, 7, 52, 53, 54, 8, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 42, 43, 44, 65, 66, 67, 68, 69, 70, 71, 72, 73, 655, 656, 74, 75, 9, 1, 76, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 10, 77, 78, 79, 80, 81, 82, 83, 84, 85, 11, 86, 87, 90, 91, 92, 93, 37, 94, 95, 96, 97, 98, 99, 88, 89, 38, 39, 100, 101, 12, 102, 13, 103, 14, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 15, 124, 125, 126, 16, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 45, 46, 47, 48, 40, 41, 566, 567, 258, 259, 673, 674, 675, 568, 569, 678, 683, 684, 685, 686, 687, 688, 689, 676, 139, 140, 141, 260, 261, 262, 677, 679, 682, 142, 143, 144, 145, 570, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 17, 587, 588, 589, 590, 571, 572, 573, 574, 505, 506, 507, 508, 509, 510, 511, 512, 513, 18, 514, 515, 516, 517, 518, 519, 520, 521, 522, 591, 613, 614, 615, 616, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 34, 605, 606, 0, 607, 608, 609, 610, 611, 612, 177, 178, 179, 680, 681, 617, 618, 454, 455, 263, 264, 265, 266, 267, 268, 269, 146, 147, 148, 270, 271, 272, 6, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 2, 283, 284, 285, 619, 620, 19, 621, 622, 623, 180, 181, 182, 335, 336, 301, 302, 158, 159, 183, 184, 185, 186, 149, 150, 151, 152, 153, 154, 155, 156, 157, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 214, 215, 216, 3, 217, 208, 209, 210, 211, 212, 213, 201, 202, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 624, 625, 626, 627, 628, 176, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 33, 251, 250, 32, 252, 253, 254, 255, 256, 4, 257, 286, 20, 5, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 314, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 21, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 22, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 23, 388, 24, 389, 25, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 26, 416, 27, 417, 28, 418, 29, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 30, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 629, 630, 631, 632, 31, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 648, 649, 650, 435, 35, 654 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16* @__decompiler_undefined_function_1() local_unnamed_addr

declare i16 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
