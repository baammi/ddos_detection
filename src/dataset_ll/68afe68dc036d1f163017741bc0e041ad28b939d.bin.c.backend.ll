source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_d5b4.14 = constant i32 -382906384
@global_var_1e518.19 = global i32 0
@global_var_82dc.20 = constant i32 -352321547
@global_var_ff00.21 = constant i32 -509599744
@global_var_1241c.22 = constant i32 -382909968
@global_var_a048.28 = constant i32 -382906384
@global_var_a480.30 = constant i32 -382906384
@global_var_896c.32 = constant i32 -382906384
@global_var_c19c.34 = constant i32 -382906384
@global_var_baa4.36 = constant i32 -382906384
@global_var_b2f0.38 = constant i32 -382906384
@global_var_9a2c.41 = constant i32 -382906384
@global_var_9398.43 = constant i32 -382906384
@global_var_205a0.46 = global i32 0
@global_var_15cec.58 = constant i32 47
@global_var_205a8.60 = global i32 0
@global_var_1e51c.62 = global i32 0
@global_var_205a4.64 = global i32 0
@global_var_1078c.66 = constant i32 -382910336
@global_var_d2d4.67 = constant i32 -509607932
@global_var_15cf0.71 = constant [14 x i8] c"185.33.144.69\00"
@global_var_205b0.74 = local_unnamed_addr global i32 0
@global_var_205ae.75 = local_unnamed_addr global i32 0
@global_var_1e520.77 = global i32 0
@global_var_15d00.85 = constant i32 10
@global_var_109c0.91 = constant i32 -382910336
@global_var_15d04.94 = constant i32 16777216
@global_var_1e528.96 = global i32 0
@global_var_1e534.98 = global i32 0
@global_var_1e52c.100 = global i32 0
@global_var_1e530.102 = global i32 0
@global_var_1e56c.116 = global i32 0
@global_var_1e538.118 = global i32 0
@global_var_1e564.120 = global i32 0
@global_var_205c4.124 = global i32 0
@global_var_205bc.128 = global i32 0
@global_var_205c0.130 = global i32 0
@global_var_1e53e.133 = local_unnamed_addr global i32 0
@global_var_1e540.137 = local_unnamed_addr global i32 0
@global_var_1e544.138 = local_unnamed_addr global i32 0
@global_var_1e545.139 = local_unnamed_addr global i32 0
@global_var_1e55e.142 = local_unnamed_addr global i32 0
@global_var_15d10.144 = constant i32 0
@global_var_15d0c.146 = constant [5 x i8] c"&;; \00"
@global_var_15d14.148 = constant [5 x i8] c"5:?;\00"
@global_var_15d1c.150 = constant [9 x i8] c"<!: acam\00"
@global_var_15d28.152 = constant [7 x i8] c" 18:1 \00"
@global_var_15d30.154 = constant [8 x i8] c"0125!8 \00"
@global_var_15d38.156 = constant [9 x i8] c"$5''#;&0\00"
@global_var_15d44.158 = constant [6 x i8] c"509=:\00"
@global_var_15d4c.160 = constant [6 x i8] c"\22=.,\22\00"
@global_var_15d54.162 = constant [8 x i8] c"'!$$;& \00"
@global_var_15d5c.164 = constant i32 423502179
@global_var_15d6c.166 = constant [6 x i8] c"efg`a\00"
@global_var_15d74.168 = constant [5 x i8] c"!'1&\00"
@global_var_15d7c.170 = constant i32 943467547
@global_var_15d88.172 = constant i32 322070023
@global_var_1e548.173 = local_unnamed_addr global i32 0
@global_var_1e546.174 = local_unnamed_addr global i32 0
@global_var_1e54c.175 = local_unnamed_addr global i32 0
@global_var_1e554.177 = local_unnamed_addr global i32 0
@global_var_1e560.178 = local_unnamed_addr global i32 0
@global_var_df84.180 = constant i32 -382910352
@global_var_15d94.182 = constant [3 x i8] c"\0D\0A\00"
@global_var_15da0.184 = constant i32 2096127
@global_var_15d97.186 = constant i32 2095871
@global_var_205cc.192 = global i32 0
@global_var_15da4.199 = constant i32 61015
@global_var_205d4.200 = local_unnamed_addr global i32 0
@global_var_205d8.201 = local_unnamed_addr global i32 0
@global_var_15da8.203 = constant i32 59987
@global_var_205dc.204 = local_unnamed_addr global i32 0
@global_var_205e0.205 = local_unnamed_addr global i32 0
@global_var_15f10.207 = constant i32 808465680
@global_var_205e8.208 = local_unnamed_addr global i32 0
@global_var_205e4.209 = local_unnamed_addr global i32 0
@global_var_15dac.211 = constant [7 x i8] c"'<188T\00"
@global_var_205ec.212 = local_unnamed_addr global i32 0
@global_var_205f0.213 = local_unnamed_addr global i32 0
@global_var_15db4.215 = constant [8 x i8] c"1:5681T\00"
@global_var_205f4.216 = local_unnamed_addr global i32 0
@global_var_205f8.217 = local_unnamed_addr global i32 0
@global_var_15dbc.219 = constant [8 x i8] c"'-' 19T\00"
@global_var_205fc.220 = local_unnamed_addr global i32 0
@global_var_20600.221 = local_unnamed_addr global i32 0
@global_var_15dc4.223 = constant [4 x i8] c"'<T\00"
@global_var_20608.224 = local_unnamed_addr global i32 0
@global_var_20604.225 = local_unnamed_addr global i32 0
@global_var_15dc8.227 = constant i32 977090171
@global_var_20610.228 = local_unnamed_addr global i32 0
@global_var_2060c.229 = local_unnamed_addr global i32 0
@global_var_15ddc.231 = constant i32 470227742
@global_var_20618.232 = local_unnamed_addr global i32 0
@global_var_20614.233 = local_unnamed_addr global i32 0
@global_var_15df8.235 = constant [10 x i8] c":7;&&17 T\00"
@global_var_20620.236 = local_unnamed_addr global i32 0
@global_var_2061c.237 = local_unnamed_addr global i32 0
@global_var_15e04.239 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_20624.240 = local_unnamed_addr global i32 0
@global_var_20628.241 = local_unnamed_addr global i32 0
@global_var_15e18.243 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_20630.244 = local_unnamed_addr global i32 0
@global_var_2062c.245 = local_unnamed_addr global i32 0
@global_var_15e30.247 = constant [8 x i8] c"{$&;7{T\00"
@global_var_20634.248 = local_unnamed_addr global i32 0
@global_var_20638.249 = local_unnamed_addr global i32 0
@global_var_15e38.251 = constant [6 x i8] c"{1,1T\00"
@global_var_2063c.252 = local_unnamed_addr global i32 0
@global_var_20640.253 = local_unnamed_addr global i32 0
@global_var_15e40.255 = constant [5 x i8] c"{20T\00"
@global_var_20648.256 = local_unnamed_addr global i32 0
@global_var_20644.257 = local_unnamed_addr global i32 0
@global_var_15e48.259 = constant [7 x i8] c"{95$'T\00"
@global_var_2064c.260 = local_unnamed_addr global i32 0
@global_var_20650.261 = local_unnamed_addr global i32 0
@global_var_15e50.263 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_20654.264 = local_unnamed_addr global i32 0
@global_var_20658.265 = local_unnamed_addr global i32 0
@global_var_15e60.267 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_206b4.268 = local_unnamed_addr global i32 0
@global_var_206b8.269 = local_unnamed_addr global i32 0
@global_var_15e6c.271 = constant [8 x i8] c"z5:=91T\00"
@global_var_206bc.272 = local_unnamed_addr global i32 0
@global_var_206c0.273 = local_unnamed_addr global i32 0
@global_var_15e74.275 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_2065c.276 = local_unnamed_addr global i32 0
@global_var_20660.277 = local_unnamed_addr global i32 0
@global_var_15e88.279 = constant [9 x i8] c"5''#;&0T\00"
@global_var_20664.280 = local_unnamed_addr global i32 0
@global_var_20668.281 = local_unnamed_addr global i32 0
@global_var_15f30.283 = constant i32 557516544
@global_var_20670.284 = local_unnamed_addr global i32 0
@global_var_2066c.285 = local_unnamed_addr global i32 0
@global_var_15e94.287 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_20678.288 = local_unnamed_addr global i32 0
@global_var_20674.289 = local_unnamed_addr global i32 0
@global_var_15ea8.291 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_20680.292 = local_unnamed_addr global i32 0
@global_var_2067c.293 = local_unnamed_addr global i32 0
@global_var_15eb8.295 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_20684.296 = local_unnamed_addr global i32 0
@global_var_20688.297 = local_unnamed_addr global i32 0
@global_var_15ec8.299 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_20690.300 = local_unnamed_addr global i32 0
@global_var_2068c.301 = local_unnamed_addr global i32 0
@global_var_15edc.303 = constant [9 x i8] c"$662*7!E\00"
@global_var_20694.304 = local_unnamed_addr global i32 0
@global_var_20698.305 = local_unnamed_addr global i32 0
@global_var_15ee8.307 = constant [6 x i8] c";3=:T\00"
@global_var_2069c.308 = local_unnamed_addr global i32 0
@global_var_206a0.309 = local_unnamed_addr global i32 0
@global_var_15ef0.311 = constant [7 x i8] c"1: 1&T\00"
@global_var_206a4.312 = local_unnamed_addr global i32 0
@global_var_206a8.313 = local_unnamed_addr global i32 0
@global_var_15ef8.315 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_206ac.316 = local_unnamed_addr global i32 0
@global_var_206b0.317 = local_unnamed_addr global i32 0
@global_var_10a84.323 = constant i32 -443088884
@global_var_f000.333 = constant i32 -481099739
@global_var_1e58c.341 = global i32 0
@global_var_10ebc.343 = constant i32 -456978431
@global_var_d09c.354 = constant i32 167772195
@global_var_206c4.356 = global i32 0
@global_var_1140c.362 = constant i32 -478871519
@global_var_11e8c.376 = constant i32 -478805983
@global_var_12268.385 = constant i32 -382906384
@global_var_1e570.393 = local_unnamed_addr global i32 0
@global_var_13cf0.395 = constant i32 -509591552
@global_var_bac8.397 = constant i32 -443744220
@global_var_1e574.405 = local_unnamed_addr global i32 0
@global_var_14724.408 = constant i32 -382909968
@global_var_12ac8.409 = constant i32 -494075872
@global_var_10988.410 = constant i32 -382910336
@global_var_15f60.414 = constant [11 x i8] c"/proc/stat\00"
@global_var_15f6c.417 = constant i32 32
@global_var_15f70.420 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_15f80.422 = constant [10 x i8] c"processor\00"
@global_var_15fa4.424 = constant i32 604672
@global_var_12c88.427 = constant i32 -369098421
@global_var_1e584.440 = local_unnamed_addr global i32 0
@global_var_1e588.442 = local_unnamed_addr global i32 0
@global_var_15fa8.445 = constant [10 x i8] c"/dev/null\00"
@global_var_12698.446 = constant i32 -442543860
@global_var_14688.451 = constant i32 -382910352
@global_var_aefc.453 = constant i32 -509607927
@global_var_10ef0.457 = constant i32 -369094646
@global_var_13654.470 = constant i32 -335545128
@global_var_13b1c.476 = constant i32 -382909456
@global_var_2059c.479 = local_unnamed_addr global i32 0
@global_var_15f88.487 = constant i32 114
@global_var_14b48.492 = constant i32 -382906384
@global_var_20003.501 = global i32 0
@global_var_20000.502 = global i32 0
@global_var_14628.512 = constant i32 -509607926
@global_var_162b4.517 = constant i32 0
@global_var_15ad8.518 = constant i32 -382909968
@global_var_1496c.528 = constant i32 -509607928
@global_var_1e4f8.2 = external global i8*
@global_var_1e514.17 = external global i8*
@global_var_1e515.26 = global i8 0
@global_var_205ac.73 = global i16* null
@global_var_1e524.88 = external global i8*
@global_var_1e568.122 = global i16* null
@global_var_1e53c.132 = external global i8*
@global_var_1e550.135 = global i16 0
@global_var_1e55c.136 = local_unnamed_addr global i8 0
@global_var_1e552.140 = local_unnamed_addr global i16 0
@global_var_1e55d.141 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1e4f8.2 to i32), i32* %r4.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1e4f8.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  %v2_80dc = load i32, i32* %r4.global-to-local, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  %v2_80e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %v2_80e0 = phi i32 [ %v2_80e0.pre, %dec_label_pc_80c4 ], [ %v3_80b0, %entry ]
  %.0 = phi i32 [ %v3_80d4, %dec_label_pc_80c4 ], [ undef, %entry ]
  store i32 %v2_80e0, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i8** @global_var_1e4f8.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %dec_label_pc_80ec._crit_edge

dec_label_pc_80ec._crit_edge:                     ; preds = %dec_label_pc_80ec
  br label %bb4

bb:                                               ; preds = %dec_label_pc_80ec
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_80ec._crit_edge, %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 123608 to i32*), align 8
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb4
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb4, %dec_label_pc_8124
  ret i32 123608

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_133c4(i32 ptrtoint (i32* @global_var_d5b4.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 89308, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_12698()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_81ec:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_81ec = load i32, i32* @r4, align 4
  store i32 %v3_81ec, i32* %stack_var_-32, align 4
  %v6_81ec = load i32, i32* @r5, align 4
  %v9_81ec = load i32, i32* @r6, align 4
  %v12_81ec = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  %v0_8204 = call i32 @function_106b0()
  store i32 %v0_8204, i32* @r0, align 4
  %v7_8208 = icmp eq i32 %v0_8204, -1
  %tmp23 = icmp slt i32 %v0_8204, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_81ec
  br label %dec_label_pc_8228

bb24:                                             ; preds = %dec_label_pc_81ec
  %. = zext i1 %v7_8208 to i32
  store i32 %., i32* @r5, align 4
  %v2_8220 = icmp eq i1 %v7_8208, false
  br i1 %v2_8220, label %dec_label_pc_8230, label %dec_label_pc_8228

dec_label_pc_8228:                                ; preds = %.thread2, %bb24
  %v2_8228 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8228, i32* @r4, align 4
  store i32 %v6_81ec, i32* @r5, align 4
  store i32 %v9_81ec, i32* @r6, align 4
  store i32 %v12_81ec, i32* @r7, align 4
  ret i32 %v0_8204

dec_label_pc_8230:                                ; preds = %bb24
  %v0_8230 = call i32 @function_106b0()
  %v7_8234 = icmp eq i32 %v0_8230, -1
  store i32 %v0_8230, i32* @r4, align 4
  br i1 %v7_8234, label %dec_label_pc_8264, label %dec_label_pc_8240

dec_label_pc_8240:                                ; preds = %dec_label_pc_8230
  %v2_8240 = icmp eq i32 %v0_8230, 0
  br i1 %v2_8240, label %dec_label_pc_8248, label %dec_label_pc_826c

dec_label_pc_8248:                                ; preds = %dec_label_pc_8240
  %v0_8248 = load i32, i32* @r6, align 4
  %v1_824c = call i32 @function_12a74(i32 %v0_8248)
  store i32 %v1_824c, i32* @r0, align 4
  %v0_8250 = call i32 @function_10584()
  %v2_8258 = call i32 @function_1078c(i32 %v0_8250, i32 9)
  %v0_825c = load i32, i32* @r4, align 4
  %v1_8260 = call i32 @function_129bc(i32 %v0_825c)
  br label %dec_label_pc_8264

dec_label_pc_8264:                                ; preds = %dec_label_pc_8230, %dec_label_pc_8248
  %v0_8264 = load i32, i32* @r5, align 4
  %v1_8268 = call i32 @function_129bc(i32 %v0_8264)
  br label %dec_label_pc_826c

dec_label_pc_826c:                                ; preds = %dec_label_pc_8240, %dec_label_pc_8264
  %v2_8270 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8270 = zext i8 %v2_8270 to i32
  %v2_8274 = icmp eq i8 %v2_8270, 0
  br i1 %v2_8274, label %dec_label_pc_82b8, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %dec_label_pc_826c
  %v2_8280 = load i32, i32* @global_var_1e518.19, align 4
  %v1_8284 = inttoptr i32 %v2_8280 to i32*
  %v2_8284 = load i32, i32* %v1_8284, align 4
  store i32 %v2_8284, i32* @ip, align 4
  %v1_8288 = add i32 %v2_8284, 4
  %v2_8288 = inttoptr i32 %v1_8288 to i8*
  %v3_8288 = load i8, i8* %v2_8288, align 1
  %v4_8288 = zext i8 %v3_8288 to i32
  %v1_828c = load i32, i32* @r7, align 4
  %v9_828c = icmp eq i32 %v4_8288, %v1_828c
  br i1 %v9_828c, label %dec_label_pc_82c0, label %dec_label_pc_82ac.preheader

dec_label_pc_82ac.preheader:                      ; preds = %dec_label_pc_827c
  %v1_8290 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ac

dec_label_pc_829c:                                ; preds = %dec_label_pc_82ac
  %v4_829c = mul i32 %v1_82ac, 4
  %v5_829c = add i32 %v4_829c, %v2_8280
  %v6_829c = inttoptr i32 %v5_829c to i32*
  %v7_829c = load i32, i32* %v6_829c, align 4
  store i32 %v7_829c, i32* @ip, align 4
  %v1_82a0 = add i32 %v7_829c, 4
  %v2_82a0 = inttoptr i32 %v1_82a0 to i8*
  %v3_82a0 = load i8, i8* %v2_82a0, align 1
  %v4_82a0 = zext i8 %v3_82a0 to i32
  %v9_82a4 = icmp eq i32 %v4_82a0, %v1_828c
  br i1 %v9_82a4, label %dec_label_pc_82c0, label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_82ac.preheader, %dec_label_pc_829c
  %v0_82ac = phi i32 [ %v1_8290, %dec_label_pc_82ac.preheader ], [ %v1_82ac, %dec_label_pc_829c ]
  %v1_82ac = add i32 %v0_82ac, 1
  %v9_82b0 = icmp eq i32 %v1_82ac, %v3_8270
  br i1 %v9_82b0, label %dec_label_pc_82b8, label %dec_label_pc_829c

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac, %dec_label_pc_826c, %dec_label_pc_82c0
  %v1_82bc = call i32 @function_129bc(i32 0)
  %v0_82d0.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82c0

dec_label_pc_82c0:                                ; preds = %dec_label_pc_829c, %dec_label_pc_827c, %dec_label_pc_82b8
  %v0_82d0 = phi i32 [ %v2_8284, %dec_label_pc_827c ], [ %v0_82d0.pre, %dec_label_pc_82b8 ], [ %v7_829c, %dec_label_pc_829c ]
  %v1_82d0 = inttoptr i32 %v0_82d0 to i32*
  %v2_82d0 = load i32, i32* %v1_82d0, align 4
  store i32 %v2_82d0, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_82d0)
  br label %dec_label_pc_82b8

; uselistorder directives
  uselistorder i32 %v1_82ac, { 2, 0, 1 }
  uselistorder i32 %v0_8230, { 1, 2, 0 }
  uselistorder i1 %v7_8208, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_82c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_826c, { 1, 0 }
  uselistorder label %dec_label_pc_8264, { 1, 0 }
  uselistorder label %dec_label_pc_8228, { 1, 0 }
}

define i32 @function_82e8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82e8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_82e8 = load i32, i32* @r5, align 4
  %v9_82e8 = load i32, i32* @r6, align 4
  %v12_82e8 = load i32, i32* @r7, align 4
  %v18_82e8 = load i32, i32* @sb, align 4
  %v21_82e8 = load i32, i32* @sl, align 4
  %v24_82e8 = load i32, i32* @fp, align 4
  %v2_82ec = icmp ugt i32 %arg2, 2
  %v7_82ec = icmp eq i32 %arg2, 3
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82f8, i32* @r5, align 4
  %v2_82fc = xor i1 %v7_82ec, true
  %v3_82fc = and i1 %v2_82ec, %v2_82fc
  br i1 %v3_82fc, label %dec_label_pc_830c, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_834c, %.dec_label_pc_8300_crit_edge, %dec_label_pc_8340, %dec_label_pc_8330, %dec_label_pc_830c, %dec_label_pc_82e8, %dec_label_pc_84f8
  %v1_8308 = phi i32 [ %v1_8308.pre, %.dec_label_pc_8300_crit_edge ], [ %v1_8310, %dec_label_pc_834c ], [ %v1_8310, %dec_label_pc_8340 ], [ %v1_8310, %dec_label_pc_8330 ], [ %v1_8310, %dec_label_pc_830c ], [ %v0_82f8, %dec_label_pc_82e8 ], [ %v0_84fc, %dec_label_pc_84f8 ]
  store i32 %v6_82e8, i32* @r5, align 4
  store i32 %v9_82e8, i32* @r6, align 4
  store i32 %v12_82e8, i32* @r7, align 4
  store i32 %v18_82e8, i32* @sb, align 4
  store i32 %v21_82e8, i32* @sl, align 4
  store i32 %v24_82e8, i32* @fp, align 4
  ret i32 %v1_8308

dec_label_pc_830c:                                ; preds = %dec_label_pc_82e8
  %v1_830c = inttoptr i32 %v0_82f8 to i32*
  %v2_830c = load i32, i32* %v1_830c, align 4
  store i32 %v2_830c, i32* %r1.global-to-local, align 4
  %v1_8310 = and i32 %v2_830c, 16711680
  store i32 %v1_8310, i32* %r0.global-to-local, align 4
  %v3_8314 = udiv i32 %v2_830c, 16777216
  %v4_8318 = udiv i32 %v1_8310, 256
  %v5_8318 = or i32 %v4_8318, %v3_8314
  %v1_831c = and i32 %v2_830c, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_831c, i32* %r2.global-to-local, align 4
  %v4_8320 = mul i32 %v1_831c, 256
  %v5_8320 = or i32 %v5_8318, %v4_8320
  store i32 %v5_8320, i32* %r3.global-to-local, align 4
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v4_8328 = mul i32 %v2_830c, 16777216
  %v5_8328 = or i32 %v5_8320, %v4_8328
  store i32 %v5_8328, i32* @fp, align 4
  br i1 %v7_8324, label %dec_label_pc_8300, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_830c
  %v1_8330 = add i32 %v0_82f8, 4
  %v2_8330 = inttoptr i32 %v1_8330 to i8*
  %v3_8330 = load i8, i8* %v2_8330, align 1
  %v4_8330 = zext i8 %v3_8330 to i32
  store i32 %v4_8330, i32* %r2.global-to-local, align 4
  %v7_8334 = icmp eq i32 %arg2, 5
  store i1 %v7_8334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8334, label %dec_label_pc_8300, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_8330
  %v1_8340 = add i32 %v0_82f8, 5
  %v2_8340 = inttoptr i32 %v1_8340 to i8*
  %v3_8340 = load i8, i8* %v2_8340, align 1
  %v4_8340 = zext i8 %v3_8340 to i32
  store i32 %v4_8340, i32* @sb, align 4
  %v2_8344 = icmp eq i8 %v3_8340, 0
  store i1 %v2_8344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8344, label %dec_label_pc_8300, label %dec_label_pc_834c

dec_label_pc_834c:                                ; preds = %dec_label_pc_8340
  %v2_8350 = mul nuw nsw i32 %v4_8340, 5
  store i32 %v2_8350, i32* @r7, align 4
  %v1_8354 = add i32 %arg2, -6
  store i32 %v1_8354, i32* %r3.global-to-local, align 4
  %v3_8358 = icmp ult i32 %v1_8354, %v2_8350
  %v9_8358 = icmp eq i32 %v1_8354, %v2_8350
  store i1 %v9_8358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8358, label %dec_label_pc_8300, label %dec_label_pc_8360

dec_label_pc_8360:                                ; preds = %dec_label_pc_834c
  store i32 %v4_8340, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8354, i32* @r6, align 4
  %v2_836c = call i32 @function_11cd0(i32 %v4_8340, i32 24)
  store i32 %v2_836c, i32* @ip, align 4
  %v0_8378 = load i32, i32* @r7, align 4
  %v1_8378 = load i32, i32* @r4, align 4
  %v2_8378 = sub i32 %v1_8378, %v0_8378
  store i32 %v2_8378, i32* @r7, align 4
  %v0_837c = load i32, i32* @r5, align 4
  %v1_837c = add i32 %v0_837c, 11
  store i32 %v1_837c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8380, %dec_label_pc_8360
  %v1_8384 = phi i32 [ %v1_83b0, %dec_label_pc_8380 ], [ %v2_836c, %dec_label_pc_8360 ]
  %v0_8380 = phi i32 [ %v1_83ac, %dec_label_pc_8380 ], [ %v1_837c, %dec_label_pc_8360 ]
  %v1_8380 = add i32 %v0_8380, -5
  %v2_8380 = inttoptr i32 %v1_8380 to i32*
  %v3_8380 = load i32, i32* %v2_8380, align 4
  store i32 %v3_8380, i32* %r1.global-to-local, align 4
  %v2_8384 = add i32 %v1_8384, 16
  %v3_8384 = inttoptr i32 %v2_8384 to i32*
  store i32 %v3_8380, i32* %v3_8384, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v1_8388 = add i32 %v0_8388, -6
  store i32 %v1_8388, i32* %r3.global-to-local, align 4
  %v0_838c = load i32, i32* %r0.global-to-local, align 4
  %v1_838c = add i32 %v0_838c, -1
  %v2_838c = inttoptr i32 %v1_838c to i8*
  %v3_838c = load i8, i8* %v2_838c, align 1
  %v4_838c = zext i8 %v3_838c to i32
  store i32 %v4_838c, i32* %r2.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v1_8390 = add i32 %v0_8390, -5
  store i32 %v1_8390, i32* @r6, align 4
  %v9_8394 = icmp eq i32 %v1_8390, %v1_8388
  store i1 %v9_8394, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_838c, i32* @r4, align 4
  %v2_83a0 = load i32, i32* @ip, align 4
  %v3_83a0 = add i32 %v2_83a0, 20
  %v4_83a0 = inttoptr i32 %v3_83a0 to i8*
  store i8 %v3_838c, i8* %v4_83a0, align 1
  %v0_83a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83a4 = load i32, i32* @ip, align 4
  %v2_83a4 = add i32 %v1_83a4, 4
  %v3_83a4 = inttoptr i32 %v2_83a4 to i32*
  store i32 %v0_83a4, i32* %v3_83a4, align 4
  %v0_83a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83a8 = trunc i32 %v0_83a8 to i16
  %v2_83a8 = load i32, i32* @ip, align 4
  %v3_83a8 = inttoptr i32 %v2_83a8 to i16*
  store i16 %v1_83a8, i16* %v3_83a8, align 2
  %v0_83ac = load i32, i32* %r0.global-to-local, align 4
  %v1_83ac = add i32 %v0_83ac, 5
  store i32 %v1_83ac, i32* %r0.global-to-local, align 4
  %v0_83b0 = load i32, i32* @ip, align 4
  %v1_83b0 = add i32 %v0_83b0, 24
  store i32 %v1_83b0, i32* @ip, align 4
  %v0_83b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83b4, label %dec_label_pc_83b8, label %dec_label_pc_8380

dec_label_pc_83b8:                                ; preds = %dec_label_pc_8380
  %v0_83b8 = load i32, i32* @r6, align 4
  %v2_83b8 = icmp eq i32 %v0_83b8, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83b8, label %dec_label_pc_84bc, label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83b8
  %v0_83c0 = load i32, i32* @r4, align 4
  %v1_83c0 = inttoptr i32 %v0_83c0 to i8*
  %v2_83c0 = load i8, i8* %v1_83c0, align 1
  %v3_83c0 = zext i8 %v2_83c0 to i32
  store i32 %v3_83c0, i32* @r5, align 4
  %v2_83c4 = icmp eq i8 %v2_83c0, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -7
  store i32 %v1_83c8, i32* @r8, align 4
  br i1 %v2_83c4, label %bb, label %dec_label_pc_83d4

bb:                                               ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* @r6, align 4
  br label %dec_label_pc_8498

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83dc = call i32 @function_11cd0(i32 %v3_83c0, i32 8)
  store i32 %v2_83dc, i32* %r0.global-to-local, align 4
  %v0_83e0 = load i32, i32* @r8, align 4
  %v2_83e0 = icmp eq i32 %v0_83e0, 0
  store i1 %v2_83e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83dc, i32* @r6, align 4
  br i1 %v2_83e0, label %dec_label_pc_84bc, label %dec_label_pc_83ec

dec_label_pc_83ec:                                ; preds = %dec_label_pc_83d4
  %v0_83ec = load i32, i32* @r4, align 4
  %v1_83ec = add i32 %v0_83ec, 1
  %v2_83ec = inttoptr i32 %v1_83ec to i8*
  %v3_83ec = load i8, i8* %v2_83ec, align 1
  %v0_83f0 = load i32, i32* @r7, align 4
  %v7_83f0 = icmp eq i32 %v0_83f0, 8
  store i1 %v7_83f0, i1* %cpsr_z.global-to-local, align 1
  %v3_83f4 = add i32 %v2_83dc, 4
  %v4_83f4 = inttoptr i32 %v3_83f4 to i8*
  store i8 %v3_83ec, i8* %v4_83f4, align 1
  %v0_83f8 = load i32, i32* @r4, align 4
  %v1_83f8 = add i32 %v0_83f8, 1
  store i32 %v1_83f8, i32* %r3.global-to-local, align 4
  %v0_83fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83fc, label %dec_label_pc_84bc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83ec
  %v1_8400 = add i32 %v0_83f8, 2
  %v2_8400 = inttoptr i32 %v1_8400 to i8*
  %v3_8400 = load i8, i8* %v2_8400, align 1
  %v4_8400 = zext i8 %v3_8400 to i32
  store i32 %v4_8400, i32* @r4, align 4
  %v0_8404 = load i32, i32* @r7, align 4
  %v1_8404 = add i32 %v0_8404, -9
  store i32 %v1_8404, i32* @r8, align 4
  %v9_8408 = icmp eq i32 %v1_8404, %v4_8400
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8400, i32* %r1.global-to-local, align 4
  %v5_8410 = icmp slt i32 %v1_8404, %v4_8400
  br i1 %v5_8410, label %dec_label_pc_84bc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8400
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84147 = add i32 %v0_83f8, 3
  store i32 %v7_84147, i32* @r7, align 4
  %v6_8418 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8418, i32* @sl, align 4
  br label %dec_label_pc_845c

dec_label_pc_8428:                                ; preds = %dec_label_pc_845c
  %v0_8428 = load i32, i32* @r8, align 4
  %v1_8428 = load i32, i32* @r4, align 4
  %v2_8428 = sub i32 %v0_8428, %v1_8428
  store i32 %v2_8428, i32* %r2.global-to-local, align 4
  %v9_8428 = icmp eq i32 %v0_8428, %v1_8428
  store i1 %v9_8428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8428, label %dec_label_pc_84bc, label %dec_label_pc_8430

dec_label_pc_8430:                                ; preds = %dec_label_pc_8428
  %v1_8430 = load i32, i32* @r7, align 4
  %v2_8430 = add i32 %v1_8430, %v1_8428
  %v3_8430 = inttoptr i32 %v2_8430 to i8*
  %v4_8430 = load i8, i8* %v3_8430, align 1
  store i32 %v2_8430, i32* %r0.global-to-local, align 4
  %v1_8438 = add i32 %v2_8428, -1
  store i32 %v1_8438, i32* %r2.global-to-local, align 4
  %v7_8438 = icmp eq i32 %v2_8428, 1
  store i1 %v7_8438, i1* %cpsr_z.global-to-local, align 1
  %v3_843c = add i32 %v2_8490, 4
  %v4_843c = inttoptr i32 %v3_843c to i8*
  store i8 %v4_8430, i8* %v4_843c, align 1
  %v0_8440 = load i32, i32* %r0.global-to-local, align 4
  %v1_8440 = add i32 %v0_8440, 1
  store i32 %v1_8440, i32* %r3.global-to-local, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v1_8448 = add i32 %v0_8440, 2
  store i32 %v1_8448, i32* @r7, align 4
  %v0_844c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_844c, label %dec_label_pc_84bc, label %dec_label_pc_8450

dec_label_pc_8450:                                ; preds = %dec_label_pc_8430
  %v2_8450 = inttoptr i32 %v1_8440 to i8*
  %v3_8450 = load i8, i8* %v2_8450, align 1
  %v4_8450 = zext i8 %v3_8450 to i32
  store i32 %v4_8450, i32* @r4, align 4
  %v2_8454 = sub i32 %v1_8444, %v4_8450
  %tmp36 = sub i32 0, %v2_8454
  %v6_8454 = and i32 %v1_8444, %tmp36
  %v7_8454 = icmp slt i32 %v6_8454, 0
  %v8_8454 = icmp slt i32 %v2_8454, 0
  %v9_8454 = icmp eq i32 %v1_8444, %v4_8450
  store i1 %v9_8454, i1* %cpsr_z.global-to-local, align 1
  %v2_8458 = xor i1 %v8_8454, %v7_8454
  br i1 %v2_8458, label %dec_label_pc_84bc, label %dec_label_pc_845c

dec_label_pc_845c:                                ; preds = %bb35, %dec_label_pc_8450
  %v0_8460 = phi i32 [ %v4_8400, %bb35 ], [ %v4_8450, %dec_label_pc_8450 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_8470, %dec_label_pc_8450 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_8460 = add nuw nsw i32 %v0_8460, 1
  store i32 %v1_8460, i32* %r0.global-to-local, align 4
  %v2_8464 = call i32 @function_11cd0(i32 %v1_8460, i32 1)
  store i32 %v2_8464, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_846c = load i32, i32* @sl, align 4
  %v2_846c = inttoptr i32 %v1_846c to i32*
  store i32 %v2_8464, i32* %v2_846c, align 4
  %v0_8470 = load i32, i32* %r3.global-to-local, align 4
  %v1_8470 = add i32 %v0_8470, 1
  store i32 %v1_8470, i32* %r3.global-to-local, align 4
  %v0_8474 = load i32, i32* @r4, align 4
  store i32 %v0_8474, i32* %r2.global-to-local, align 4
  %v0_8478 = load i32, i32* @r7, align 4
  store i32 %v0_8478, i32* %r1.global-to-local, align 4
  %v3_8480 = call i32 @function_ff70(i32 %v2_8464, i32 %v0_8478, i32 %v0_8474)
  store i32 %v3_8480, i32* %r0.global-to-local, align 4
  store i32 %v1_8470, i32* %r2.global-to-local, align 4
  %v3_8488 = mul i32 %v1_8470, 8
  store i32 %v3_8488, i32* %r3.global-to-local, align 4
  %v1_848c = load i32, i32* @r5, align 4
  %v9_848c = icmp eq i32 %v1_8470, %v1_848c
  store i1 %v9_848c, i1* %cpsr_z.global-to-local, align 1
  %v0_8490 = load i32, i32* @r6, align 4
  %v2_8490 = add i32 %v0_8490, %v3_8488
  store i32 %v2_8490, i32* @sl, align 4
  br i1 %v9_848c, label %dec_label_pc_8498, label %dec_label_pc_8428

dec_label_pc_8498:                                ; preds = %dec_label_pc_845c, %bb
  %v0_8498 = call i32 @function_10de8()
  %v2_84a0 = inttoptr i32 %v0_8498 to i32*
  store i32 0, i32* %v2_84a0, align 4
  store i32 %v4_8330, i32* %r1.global-to-local, align 4
  %v0_84a8 = load i32, i32* @fp, align 4
  store i32 %v0_84a8, i32* %r0.global-to-local, align 4
  %v0_84ac = load i32, i32* @sb, align 4
  store i32 %v0_84ac, i32* %r2.global-to-local, align 4
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84b4 = load i32, i32* @r5, align 4
  %v5_84b4 = load i32, i32* @r6, align 4
  %v6_84b8 = trunc i32 %v2_84b4 to i8
  %v7_84b8 = call i32 @function_81ec(i32 %v0_84a8, i32 %v4_8330, i32 %v0_84ac, i32 %v2_836c, i8 %v6_84b8, i32 %v5_84b4)
  store i32 %v7_84b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_8450, %dec_label_pc_8430, %dec_label_pc_8428, %dec_label_pc_8400, %dec_label_pc_83ec, %dec_label_pc_83d4, %dec_label_pc_83b8, %dec_label_pc_8498
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84c0 = icmp eq i32 %v2_836c, 0
  store i1 %v2_84c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84c0, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84bc
  store i32 %v2_836c, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84bc, %bb37
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c0, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_1241c.22 to i32))
  %v0_84cc = load i32, i32* @r6, align 4
  %v2_84cc = icmp eq i32 %v0_84cc, 0
  store i1 %v2_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84cc, label %.dec_label_pc_8300_crit_edge, label %dec_label_pc_84d4

.dec_label_pc_8300_crit_edge:                     ; preds = %bb38
  %v1_8308.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

dec_label_pc_84d4:                                ; preds = %bb38
  %v0_84d4 = load i32, i32* @r5, align 4
  %v2_84d4 = icmp eq i32 %v0_84d4, 0
  store i1 %v2_84d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84d4, label %dec_label_pc_84f8, label %dec_label_pc_84dc

dec_label_pc_84dc:                                ; preds = %dec_label_pc_84d4
  br label %dec_label_pc_84e0

dec_label_pc_84e0:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84dc
  %v0_84e8 = phi i32 [ 0, %dec_label_pc_84dc ], [ %v1_84f0, %dec_label_pc_84e0 ]
  %v0_84e0 = phi i32 [ %v0_84cc, %dec_label_pc_84dc ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  %v4_84e0 = mul i32 %v0_84e8, 8
  %v5_84e0 = add i32 %v4_84e0, %v0_84e0
  %v6_84e0 = inttoptr i32 %v5_84e0 to i32*
  %v7_84e0 = load i32, i32* %v6_84e0, align 4
  store i32 %v7_84e0, i32* %r0.global-to-local, align 4
  %v2_84e4 = icmp eq i32 %v7_84e0, 0
  store i1 %v2_84e4, i1* %cpsr_z.global-to-local, align 1
  %v1_84e8 = add i32 %v0_84e8, 1
  store i32 %v1_84e8, i32* @r4, align 4
  store i32 34032, i32* @lr, align 4
  %v1_84ec = xor i1 %v2_84e4, true
  call void @__pseudo_cond_branch(i1 %v1_84ec, i32 ptrtoint (i32* @global_var_1241c.22 to i32))
  %v0_84f0 = load i32, i32* @r5, align 4
  %v1_84f0 = load i32, i32* @r4, align 4
  %v9_84f0 = icmp eq i32 %v0_84f0, %v1_84f0
  store i1 %v9_84f0, i1* %cpsr_z.global-to-local, align 1
  %v0_84f8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84f0, label %dec_label_pc_84f8, label %dec_label_pc_84e0

dec_label_pc_84f8:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84d4
  %v0_84f8 = phi i32 [ %v0_84cc, %dec_label_pc_84d4 ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  store i32 %v0_84f8, i32* @r0, align 4
  %v0_84fc = call i32 @function_1241c()
  store i32 %v0_84fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

; uselistorder directives
  uselistorder i32 %v0_84fc, { 1, 0 }
  uselistorder i32 %v1_84f0, { 1, 0 }
  uselistorder i1 %v2_84c0, { 0, 2, 1 }
  uselistorder i32 %v2_8490, { 1, 0 }
  uselistorder i32 %v3_8488, { 1, 0 }
  uselistorder i32 %v1_8470, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8454, { 1, 0 }
  uselistorder i32 %v4_8450, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8444, { 2, 0, 1, 3 }
  uselistorder i32 %v3_83c0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83b0, { 1, 0 }
  uselistorder i32 %v1_83ac, { 1, 0 }
  uselistorder i32 %v2_836c, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8340, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8310, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_830c, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_82f8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 3, 18, 4, 2, 6, 9, 11, 10, 7, 8, 17, 19, 12, 13, 14, 15, 16, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84bc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_845c, { 1, 0 }
  uselistorder label %dec_label_pc_8300, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8504(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8504:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8504 = icmp eq i32 %arg1, 0
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8504, label %dec_label_pc_854c, label %dec_label_pc_8514

dec_label_pc_8514:                                ; preds = %dec_label_pc_8504
  %v0_8514 = load i32, i32* %r1.global-to-local, align 4
  %v1_8514 = add i32 %v0_8514, 4
  %v2_8514 = inttoptr i32 %v1_8514 to i8*
  %v3_8514 = load i8, i8* %v2_8514, align 1
  %v4_8514 = zext i8 %v3_8514 to i32
  %v9_8518 = icmp eq i32 %v4_8514, %arg3
  br i1 %v9_8518, label %dec_label_pc_8558, label %dec_label_pc_853c.preheader

dec_label_pc_853c.preheader:                      ; preds = %dec_label_pc_8514
  br label %dec_label_pc_853c

dec_label_pc_852c:                                ; preds = %dec_label_pc_853c
  %v1_852c = add i32 %v0_8534.in, 12
  %v2_852c = inttoptr i32 %v1_852c to i8*
  %v3_852c = load i8, i8* %v2_852c, align 1
  %v4_852c = zext i8 %v3_852c to i32
  %v9_8530 = icmp eq i32 %v4_852c, %arg3
  br i1 %v9_8530, label %dec_label_pc_8558, label %dec_label_pc_853c

dec_label_pc_853c:                                ; preds = %dec_label_pc_853c.preheader, %dec_label_pc_852c
  %v0_8534.in = phi i32 [ %v0_8514, %dec_label_pc_853c.preheader ], [ %v0_8534, %dec_label_pc_852c ]
  %v0_853c = phi i32 [ 0, %dec_label_pc_853c.preheader ], [ %v1_853c, %dec_label_pc_852c ]
  %v0_8534 = add i32 %v0_8534.in, 8
  %v1_853c = add i32 %v0_853c, 1
  %v9_8540 = icmp eq i32 %v1_853c, %arg1
  store i32 %v0_8534, i32* %r1.global-to-local, align 4
  br i1 %v9_8540, label %dec_label_pc_854c, label %dec_label_pc_852c

dec_label_pc_854c:                                ; preds = %dec_label_pc_853c, %dec_label_pc_8558, %dec_label_pc_8504, %dec_label_pc_8564
  %v0_854c = phi i32 [ %arg4, %dec_label_pc_8558 ], [ %arg4, %dec_label_pc_8504 ], [ %v1_8564, %dec_label_pc_8564 ], [ %arg4, %dec_label_pc_853c ]
  ret i32 %v0_854c

dec_label_pc_8558:                                ; preds = %dec_label_pc_852c, %dec_label_pc_8514
  %v0_8558 = phi i32 [ %v0_8514, %dec_label_pc_8514 ], [ %v0_8534, %dec_label_pc_852c ]
  %v1_8558 = inttoptr i32 %v0_8558 to i32*
  %v2_8558 = load i32, i32* %v1_8558, align 4
  store i32 %v2_8558, i32* @r0, align 4
  %v2_855c = icmp eq i32 %v2_8558, 0
  br i1 %v2_855c, label %dec_label_pc_854c, label %dec_label_pc_8564

dec_label_pc_8564:                                ; preds = %dec_label_pc_8558
  %v1_8564 = call i32 @function_10f24(i32 %v2_8558)
  br label %dec_label_pc_854c

; uselistorder directives
  uselistorder i32 %v1_853c, { 1, 0 }
  uselistorder i32 %v0_8534, { 1, 0, 2 }
  uselistorder i32 %v0_8534.in, { 1, 0 }
  uselistorder i32 %v0_8514, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_854c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_853c, { 1, 0 }
}

define i32 @function_8570(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8570:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8570 = icmp eq i32 %arg1, 0
  %v3_8574 = load i32, i32* @r4, align 4
  store i32 %v3_8574, i32* %stack_var_-8, align 4
  %v6_8574 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8570, label %dec_label_pc_85b8, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8570
  %v0_8580 = load i32, i32* %r1.global-to-local, align 4
  %v1_8580 = add i32 %v0_8580, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v4_8580 = zext i8 %v3_8580 to i32
  %v9_8584 = icmp eq i32 %v4_8580, %arg3
  br i1 %v9_8584, label %dec_label_pc_85c4, label %dec_label_pc_85a8.preheader

dec_label_pc_85a8.preheader:                      ; preds = %dec_label_pc_8580
  br label %dec_label_pc_85a8

dec_label_pc_8598:                                ; preds = %dec_label_pc_85a8
  %v1_8598 = add i32 %v0_85a0.in, 12
  %v2_8598 = inttoptr i32 %v1_8598 to i8*
  %v3_8598 = load i8, i8* %v2_8598, align 1
  %v4_8598 = zext i8 %v3_8598 to i32
  %v9_859c = icmp eq i32 %v4_8598, %arg3
  br i1 %v9_859c, label %dec_label_pc_85c4, label %dec_label_pc_85a8

dec_label_pc_85a8:                                ; preds = %dec_label_pc_85a8.preheader, %dec_label_pc_8598
  %v0_85a0.in = phi i32 [ %v0_8580, %dec_label_pc_85a8.preheader ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v0_85a8 = phi i32 [ 0, %dec_label_pc_85a8.preheader ], [ %v1_85a8, %dec_label_pc_8598 ]
  %v0_85a0 = add i32 %v0_85a0.in, 8
  %v1_85a8 = add i32 %v0_85a8, 1
  store i32 %v1_85a8, i32* @lr, align 4
  %v9_85ac = icmp eq i32 %v1_85a8, %arg1
  store i32 %v0_85a0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ac, label %dec_label_pc_85b8, label %dec_label_pc_8598

dec_label_pc_85b8:                                ; preds = %dec_label_pc_85a8, %dec_label_pc_85c4, %dec_label_pc_8570, %dec_label_pc_85d0
  %v2_85bc = phi i32 [ %v3_8574, %dec_label_pc_85c4 ], [ %v3_8574, %dec_label_pc_8570 ], [ %v2_85bc.pre, %dec_label_pc_85d0 ], [ %v3_8574, %dec_label_pc_85a8 ]
  %v0_85b8 = phi i32 [ %arg4, %dec_label_pc_85c4 ], [ %arg4, %dec_label_pc_8570 ], [ %v3_85d4, %dec_label_pc_85d0 ], [ %arg4, %dec_label_pc_85a8 ]
  store i32 %v2_85bc, i32* @r4, align 4
  store i32 %v6_8574, i32* @lr, align 4
  ret i32 %v0_85b8

dec_label_pc_85c4:                                ; preds = %dec_label_pc_8598, %dec_label_pc_8580
  %v0_85c4 = phi i32 [ %v0_8580, %dec_label_pc_8580 ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v1_85c4 = inttoptr i32 %v0_85c4 to i32*
  %v2_85c4 = load i32, i32* %v1_85c4, align 4
  %v2_85c8 = icmp eq i32 %v2_85c4, 0
  br i1 %v2_85c8, label %dec_label_pc_85b8, label %dec_label_pc_85d0

dec_label_pc_85d0:                                ; preds = %dec_label_pc_85c4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_85d4 = inttoptr i32 %v2_85c4 to i8*
  %v3_85d4 = call i32 @function_10024(i8* %v2_85d4, i32 10)
  %v2_85bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85b8

; uselistorder directives
  uselistorder i32 %v1_85a8, { 1, 2, 0 }
  uselistorder i32 %v0_85a0, { 1, 0, 2 }
  uselistorder i32 %v0_85a0.in, { 1, 0 }
  uselistorder i32 %v0_8580, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85b8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85a8, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e0 = load i32, i32* @r4, align 4
  store i32 %v3_85e0, i32* %stack_var_-24, align 4
  %v6_85e0 = load i32, i32* @r5, align 4
  %v9_85e0 = load i32, i32* @r6, align 4
  %v12_85e0 = load i32, i32* @r7, align 4
  %v15_85e0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85ec = call i32 @function_11cd0(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1e514.17 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1e518.19 to i32), i32* @r6, align 4
  store i32 36524, i32* %r2.global-to-local, align 4
  store i32 %v2_85ec, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e515.26 to i32), i32* %r1.global-to-local, align 4
  %v2_860c = load i32, i32* @global_var_1e518.19, align 4
  %v2_8610 = inttoptr i32 %v2_85ec to i32*
  store i32 36524, i32* %v2_8610, align 4
  %v3_8614 = load i32, i32* @r5, align 4
  %v4_8614 = add i32 %v3_8614, 4
  %v5_8614 = inttoptr i32 %v4_8614 to i8*
  store i8 0, i8* %v5_8614, align 1
  %v0_8618 = load i32, i32* %r1.global-to-local, align 4
  %v3_8618 = mul i32 %v0_8618, 4
  store i32 %v3_8618, i32* %r1.global-to-local, align 4
  %v5_861c = inttoptr i32 %v2_860c to i32*
  %v6_861c = call i32 @function_11e04(i32* %v5_861c, i32 %v3_8618, i32 36524, i32 0)
  %v2_8620 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8620 = zext i8 %v2_8620 to i32
  store i32 %v6_861c, i32* %r2.global-to-local, align 4
  %v0_8628 = load i32, i32* @r5, align 4
  %v5_8628 = mul nuw nsw i32 %v3_8620, 4
  %v6_8628 = add i32 %v5_8628, %v6_861c
  %v7_8628 = inttoptr i32 %v6_8628 to i32*
  store i32 %v0_8628, i32* %v7_8628, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e515.26 to i32), i32* %r3.global-to-local, align 4
  %v1_8638 = load i32, i32* @r6, align 4
  %v2_8638 = inttoptr i32 %v1_8638 to i32*
  store i32 %v6_861c, i32* %v2_8638, align 4
  %v0_863c = load i32, i32* %r3.global-to-local, align 4
  %v1_863c = trunc i32 %v0_863c to i8
  %v2_863c = load i32, i32* @r4, align 4
  %v3_863c = inttoptr i32 %v2_863c to i8*
  store i8 %v1_863c, i8* %v3_863c, align 1
  %v2_8640 = call i32 @function_11cd0(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_a048.28 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8640, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_1e515.26 to i32), i32* %r1.global-to-local, align 4
  %v2_8658 = load i32, i32* @global_var_1e518.19, align 4
  %v2_865c = inttoptr i32 %v2_8640 to i32*
  store i32 ptrtoint (i32* @global_var_a048.28 to i32), i32* %v2_865c, align 4
  %v0_8660 = load i32, i32* @r8, align 4
  %v1_8660 = trunc i32 %v0_8660 to i8
  %v2_8660 = load i32, i32* @r5, align 4
  %v3_8660 = add i32 %v2_8660, 4
  %v4_8660 = inttoptr i32 %v3_8660 to i8*
  store i8 %v1_8660, i8* %v4_8660, align 1
  %v0_8664 = load i32, i32* %r1.global-to-local, align 4
  %v3_8664 = mul i32 %v0_8664, 4
  store i32 %v3_8664, i32* %r1.global-to-local, align 4
  %v4_8668 = inttoptr i32 %v2_8658 to i32*
  %v5_8668 = call i32 @function_11e04(i32* %v4_8668, i32 %v3_8664, i32 %v6_861c, i32 ptrtoint (i32* @global_var_a048.28 to i32))
  %v2_866c = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_866c = zext i8 %v2_866c to i32
  store i32 %v3_866c, i32* %r3.global-to-local, align 4
  store i32 %v5_8668, i32* %r2.global-to-local, align 4
  %v0_8674 = load i32, i32* @r5, align 4
  %v5_8674 = mul nuw nsw i32 %v3_866c, 4
  %v6_8674 = add i32 %v5_8674, %v5_8668
  %v7_8674 = inttoptr i32 %v6_8674 to i32*
  store i32 %v0_8674, i32* %v7_8674, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = load i32, i32* @r8, align 4
  %v2_867c = add i32 %v1_867c, %v0_867c
  store i32 %v2_867c, i32* %r3.global-to-local, align 4
  %v1_8684 = trunc i32 %v2_867c to i8
  %v2_8684 = load i32, i32* @r4, align 4
  %v3_8684 = inttoptr i32 %v2_8684 to i8*
  store i8 %v1_8684, i8* %v3_8684, align 1
  %v0_8688 = load i32, i32* %r2.global-to-local, align 4
  %v1_8688 = load i32, i32* @r6, align 4
  %v2_8688 = inttoptr i32 %v1_8688 to i32*
  store i32 %v0_8688, i32* %v2_8688, align 4
  %v2_868c = call i32 @function_11cd0(i32 %v1_867c, i32 8)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 ptrtoint (i32* @global_var_a480.30 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_868c, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r8, align 4
  %v2_86a0 = add i32 %v1_86a0, %v3_8690
  store i32 %v2_86a0, i32* %r1.global-to-local, align 4
  %v2_86a4 = load i32, i32* @global_var_1e518.19, align 4
  %v2_86a8 = inttoptr i32 %v2_868c to i32*
  store i32 ptrtoint (i32* @global_var_a480.30 to i32), i32* %v2_86a8, align 4
  %v3_86ac = load i32, i32* @r5, align 4
  %v4_86ac = add i32 %v3_86ac, 4
  %v5_86ac = inttoptr i32 %v4_86ac to i8*
  store i8 2, i8* %v5_86ac, align 1
  %v0_86b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86b0 = mul i32 %v0_86b0, 4
  store i32 %v3_86b0, i32* %r1.global-to-local, align 4
  %v5_86b4 = inttoptr i32 %v2_86a4 to i32*
  %v6_86b4 = call i32 @function_11e04(i32* %v5_86b4, i32 %v3_86b0, i32 ptrtoint (i32* @global_var_a480.30 to i32), i32 2)
  %v2_86b8 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_86b8 = zext i8 %v2_86b8 to i32
  store i32 %v3_86b8, i32* %r3.global-to-local, align 4
  store i32 %v6_86b4, i32* %r2.global-to-local, align 4
  %v0_86c0 = load i32, i32* @r5, align 4
  %v5_86c0 = mul nuw nsw i32 %v3_86b8, 4
  %v6_86c0 = add i32 %v5_86c0, %v6_86b4
  %v7_86c0 = inttoptr i32 %v6_86c0 to i32*
  store i32 %v0_86c0, i32* %v7_86c0, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r8, align 4
  %v2_86c8 = add i32 %v1_86c8, %v0_86c8
  store i32 %v2_86c8, i32* %r3.global-to-local, align 4
  %v1_86d0 = load i32, i32* @r6, align 4
  %v2_86d0 = inttoptr i32 %v1_86d0 to i32*
  store i32 %v6_86b4, i32* %v2_86d0, align 4
  %v0_86d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_86d4 = trunc i32 %v0_86d4 to i8
  %v2_86d4 = load i32, i32* @r4, align 4
  %v3_86d4 = inttoptr i32 %v2_86d4 to i8*
  store i8 %v1_86d4, i8* %v3_86d4, align 1
  %v2_86d8 = call i32 @function_11cd0(i32 %v1_86c8, i32 8)
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 ptrtoint (i32* @global_var_896c.32 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_86d8, i32* @r5, align 4
  %v1_86ec = load i32, i32* @r8, align 4
  %v2_86ec = add i32 %v1_86ec, %v3_86dc
  store i32 %v2_86ec, i32* %r1.global-to-local, align 4
  %v2_86f0 = load i32, i32* @global_var_1e518.19, align 4
  %v2_86f4 = inttoptr i32 %v2_86d8 to i32*
  store i32 ptrtoint (i32* @global_var_896c.32 to i32), i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* @r7, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r5, align 4
  %v3_86f8 = add i32 %v2_86f8, 4
  %v4_86f8 = inttoptr i32 %v3_86f8 to i8*
  store i8 %v1_86f8, i8* %v4_86f8, align 1
  %v0_86fc = load i32, i32* %r1.global-to-local, align 4
  %v3_86fc = mul i32 %v0_86fc, 4
  store i32 %v3_86fc, i32* %r1.global-to-local, align 4
  %v4_8700 = inttoptr i32 %v2_86f0 to i32*
  %v5_8700 = call i32 @function_11e04(i32* %v4_8700, i32 %v3_86fc, i32 %v6_86b4, i32 ptrtoint (i32* @global_var_896c.32 to i32))
  %v2_8704 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8704 = zext i8 %v2_8704 to i32
  store i32 %v3_8704, i32* %r3.global-to-local, align 4
  store i32 %v5_8700, i32* %r2.global-to-local, align 4
  %v0_870c = load i32, i32* @r5, align 4
  %v5_870c = mul nuw nsw i32 %v3_8704, 4
  %v6_870c = add i32 %v5_870c, %v5_8700
  %v7_870c = inttoptr i32 %v6_870c to i32*
  store i32 %v0_870c, i32* %v7_870c, align 4
  %v0_8710 = load i32, i32* @r7, align 4
  store i32 %v0_8710, i32* %r1.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = load i32, i32* @r8, align 4
  %v2_8714 = add i32 %v1_8714, %v0_8714
  store i32 %v2_8714, i32* %r3.global-to-local, align 4
  %v1_871c = trunc i32 %v2_8714 to i8
  %v2_871c = load i32, i32* @r4, align 4
  %v3_871c = inttoptr i32 %v2_871c to i8*
  store i8 %v1_871c, i8* %v3_871c, align 1
  %v0_8720 = load i32, i32* %r2.global-to-local, align 4
  %v1_8720 = load i32, i32* @r6, align 4
  %v2_8720 = inttoptr i32 %v1_8720 to i32*
  store i32 %v0_8720, i32* %v2_8720, align 4
  %v2_8724 = call i32 @function_11cd0(i32 %v1_8714, i32 %v0_8710)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 ptrtoint (i32* @global_var_c19c.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8724, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8738 = load i32, i32* @r8, align 4
  %v2_8738 = add i32 %v1_8738, %v3_8728
  store i32 %v2_8738, i32* %r1.global-to-local, align 4
  %v2_873c = load i32, i32* @global_var_1e518.19, align 4
  %v2_8740 = inttoptr i32 %v2_8724 to i32*
  store i32 ptrtoint (i32* @global_var_c19c.34 to i32), i32* %v2_8740, align 4
  %v3_8744 = load i32, i32* @r5, align 4
  %v4_8744 = add i32 %v3_8744, 4
  %v5_8744 = inttoptr i32 %v4_8744 to i8*
  store i8 3, i8* %v5_8744, align 1
  %v0_8748 = load i32, i32* %r1.global-to-local, align 4
  %v3_8748 = mul i32 %v0_8748, 4
  store i32 %v3_8748, i32* %r1.global-to-local, align 4
  %v5_874c = inttoptr i32 %v2_873c to i32*
  %v6_874c = call i32 @function_11e04(i32* %v5_874c, i32 %v3_8748, i32 ptrtoint (i32* @global_var_c19c.34 to i32), i32 3)
  %v2_8750 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8750 = zext i8 %v2_8750 to i32
  store i32 %v3_8750, i32* %r3.global-to-local, align 4
  store i32 %v6_874c, i32* %r2.global-to-local, align 4
  %v0_8758 = load i32, i32* @r5, align 4
  %v5_8758 = mul nuw nsw i32 %v3_8750, 4
  %v6_8758 = add i32 %v5_8758, %v6_874c
  %v7_8758 = inttoptr i32 %v6_8758 to i32*
  store i32 %v0_8758, i32* %v7_8758, align 4
  %v0_875c = load i32, i32* @r7, align 4
  store i32 %v0_875c, i32* %r1.global-to-local, align 4
  %v0_8760 = load i32, i32* %r3.global-to-local, align 4
  %v1_8760 = load i32, i32* @r8, align 4
  %v2_8760 = add i32 %v1_8760, %v0_8760
  store i32 %v2_8760, i32* %r3.global-to-local, align 4
  %v1_8768 = trunc i32 %v2_8760 to i8
  %v2_8768 = load i32, i32* @r4, align 4
  %v3_8768 = inttoptr i32 %v2_8768 to i8*
  store i8 %v1_8768, i8* %v3_8768, align 1
  %v0_876c = load i32, i32* %r2.global-to-local, align 4
  %v1_876c = load i32, i32* @r6, align 4
  %v2_876c = inttoptr i32 %v1_876c to i32*
  store i32 %v0_876c, i32* %v2_876c, align 4
  %v2_8770 = call i32 @function_11cd0(i32 %v1_8760, i32 %v0_875c)
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 ptrtoint (i32* @global_var_baa4.36 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8770, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8784 = load i32, i32* @r8, align 4
  %v2_8784 = add i32 %v1_8784, %v3_8774
  store i32 %v2_8784, i32* %r1.global-to-local, align 4
  %v2_8788 = load i32, i32* @global_var_1e518.19, align 4
  %v2_878c = inttoptr i32 %v2_8770 to i32*
  store i32 ptrtoint (i32* @global_var_baa4.36 to i32), i32* %v2_878c, align 4
  %v3_8790 = load i32, i32* @r5, align 4
  %v4_8790 = add i32 %v3_8790, 4
  %v5_8790 = inttoptr i32 %v4_8790 to i8*
  store i8 4, i8* %v5_8790, align 1
  %v0_8794 = load i32, i32* %r1.global-to-local, align 4
  %v3_8794 = mul i32 %v0_8794, 4
  store i32 %v3_8794, i32* %r1.global-to-local, align 4
  %v5_8798 = inttoptr i32 %v2_8788 to i32*
  %v6_8798 = call i32 @function_11e04(i32* %v5_8798, i32 %v3_8794, i32 ptrtoint (i32* @global_var_baa4.36 to i32), i32 4)
  %v2_879c = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_879c = zext i8 %v2_879c to i32
  store i32 %v3_879c, i32* %r3.global-to-local, align 4
  store i32 %v6_8798, i32* %r2.global-to-local, align 4
  %v0_87a4 = load i32, i32* @r5, align 4
  %v5_87a4 = mul nuw nsw i32 %v3_879c, 4
  %v6_87a4 = add i32 %v5_87a4, %v6_8798
  %v7_87a4 = inttoptr i32 %v6_87a4 to i32*
  store i32 %v0_87a4, i32* %v7_87a4, align 4
  %v0_87a8 = load i32, i32* @r7, align 4
  store i32 %v0_87a8, i32* %r1.global-to-local, align 4
  %v0_87ac = load i32, i32* %r3.global-to-local, align 4
  %v1_87ac = load i32, i32* @r8, align 4
  %v2_87ac = add i32 %v1_87ac, %v0_87ac
  store i32 %v2_87ac, i32* %r3.global-to-local, align 4
  %v1_87b4 = trunc i32 %v2_87ac to i8
  %v2_87b4 = load i32, i32* @r4, align 4
  %v3_87b4 = inttoptr i32 %v2_87b4 to i8*
  store i8 %v1_87b4, i8* %v3_87b4, align 1
  %v0_87b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87b8 = load i32, i32* @r6, align 4
  %v2_87b8 = inttoptr i32 %v1_87b8 to i32*
  store i32 %v0_87b8, i32* %v2_87b8, align 4
  %v2_87bc = call i32 @function_11cd0(i32 %v1_87ac, i32 %v0_87a8)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 ptrtoint (i32* @global_var_b2f0.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87bc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r8, align 4
  %v2_87d0 = add i32 %v1_87d0, %v3_87c0
  store i32 %v2_87d0, i32* %r1.global-to-local, align 4
  %v2_87d4 = load i32, i32* @global_var_1e518.19, align 4
  %v2_87d8 = inttoptr i32 %v2_87bc to i32*
  store i32 ptrtoint (i32* @global_var_b2f0.38 to i32), i32* %v2_87d8, align 4
  %v3_87dc = load i32, i32* @r5, align 4
  %v4_87dc = add i32 %v3_87dc, 4
  %v5_87dc = inttoptr i32 %v4_87dc to i8*
  store i8 5, i8* %v5_87dc, align 1
  %v0_87e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_87e0 = mul i32 %v0_87e0, 4
  store i32 %v3_87e0, i32* %r1.global-to-local, align 4
  %v5_87e4 = inttoptr i32 %v2_87d4 to i32*
  %v6_87e4 = call i32 @function_11e04(i32* %v5_87e4, i32 %v3_87e0, i32 ptrtoint (i32* @global_var_b2f0.38 to i32), i32 5)
  %v2_87e8 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_87e8 = zext i8 %v2_87e8 to i32
  store i32 %v3_87e8, i32* %r3.global-to-local, align 4
  store i32 %v6_87e4, i32* %r2.global-to-local, align 4
  %v0_87f0 = load i32, i32* @r5, align 4
  %v5_87f0 = mul nuw nsw i32 %v3_87e8, 4
  %v6_87f0 = add i32 %v5_87f0, %v6_87e4
  %v7_87f0 = inttoptr i32 %v6_87f0 to i32*
  store i32 %v0_87f0, i32* %v7_87f0, align 4
  %v0_87f4 = load i32, i32* @r7, align 4
  store i32 %v0_87f4, i32* %r1.global-to-local, align 4
  %v0_87f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r8, align 4
  %v2_87f8 = add i32 %v1_87f8, %v0_87f8
  store i32 %v2_87f8, i32* %r3.global-to-local, align 4
  %v1_8800 = trunc i32 %v2_87f8 to i8
  %v2_8800 = load i32, i32* @r4, align 4
  %v3_8800 = inttoptr i32 %v2_8800 to i8*
  store i8 %v1_8800, i8* %v3_8800, align 1
  %v0_8804 = load i32, i32* %r2.global-to-local, align 4
  %v1_8804 = load i32, i32* @r6, align 4
  %v2_8804 = inttoptr i32 %v1_8804 to i32*
  store i32 %v0_8804, i32* %v2_8804, align 4
  %v2_8808 = call i32 @function_11cd0(i32 %v1_87f8, i32 %v0_87f4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 43836, i32* %r2.global-to-local, align 4
  store i32 %v2_8808, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_881c = load i32, i32* @r8, align 4
  %v2_881c = add i32 %v1_881c, %v3_880c
  store i32 %v2_881c, i32* %r1.global-to-local, align 4
  %v2_8820 = load i32, i32* @global_var_1e518.19, align 4
  %v2_8824 = inttoptr i32 %v2_8808 to i32*
  store i32 43836, i32* %v2_8824, align 4
  %v3_8828 = load i32, i32* @r5, align 4
  %v4_8828 = add i32 %v3_8828, 4
  %v5_8828 = inttoptr i32 %v4_8828 to i8*
  store i8 10, i8* %v5_8828, align 1
  %v0_882c = load i32, i32* %r1.global-to-local, align 4
  %v3_882c = mul i32 %v0_882c, 4
  store i32 %v3_882c, i32* %r1.global-to-local, align 4
  %v5_8830 = inttoptr i32 %v2_8820 to i32*
  %v6_8830 = call i32 @function_11e04(i32* %v5_8830, i32 %v3_882c, i32 43836, i32 10)
  %v2_8834 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8834 = zext i8 %v2_8834 to i32
  store i32 %v3_8834, i32* %r3.global-to-local, align 4
  store i32 %v6_8830, i32* %r2.global-to-local, align 4
  %v0_883c = load i32, i32* @r5, align 4
  %v5_883c = mul nuw nsw i32 %v3_8834, 4
  %v6_883c = add i32 %v5_883c, %v6_8830
  %v7_883c = inttoptr i32 %v6_883c to i32*
  store i32 %v0_883c, i32* %v7_883c, align 4
  %v0_8840 = load i32, i32* @r7, align 4
  store i32 %v0_8840, i32* %r1.global-to-local, align 4
  %v0_8844 = load i32, i32* %r3.global-to-local, align 4
  %v1_8844 = load i32, i32* @r8, align 4
  %v2_8844 = add i32 %v1_8844, %v0_8844
  store i32 %v2_8844, i32* %r3.global-to-local, align 4
  %v1_884c = trunc i32 %v2_8844 to i8
  %v2_884c = load i32, i32* @r4, align 4
  %v3_884c = inttoptr i32 %v2_884c to i8*
  store i8 %v1_884c, i8* %v3_884c, align 1
  %v0_8850 = load i32, i32* %r2.global-to-local, align 4
  %v1_8850 = load i32, i32* @r6, align 4
  %v2_8850 = inttoptr i32 %v1_8850 to i32*
  store i32 %v0_8850, i32* %v2_8850, align 4
  %v2_8854 = call i32 @function_11cd0(i32 %v1_8844, i32 %v0_8840)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 ptrtoint (i32* @global_var_9a2c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8854, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_8868 = load i32, i32* @r8, align 4
  %v2_8868 = add i32 %v1_8868, %v3_8858
  store i32 %v2_8868, i32* %r1.global-to-local, align 4
  %v2_886c = load i32, i32* @global_var_1e518.19, align 4
  %v2_8870 = inttoptr i32 %v2_8854 to i32*
  store i32 ptrtoint (i32* @global_var_9a2c.41 to i32), i32* %v2_8870, align 4
  %v3_8874 = load i32, i32* @r5, align 4
  %v4_8874 = add i32 %v3_8874, 4
  %v5_8874 = inttoptr i32 %v4_8874 to i8*
  store i8 6, i8* %v5_8874, align 1
  %v0_8878 = load i32, i32* %r1.global-to-local, align 4
  %v3_8878 = mul i32 %v0_8878, 4
  store i32 %v3_8878, i32* %r1.global-to-local, align 4
  %v5_887c = inttoptr i32 %v2_886c to i32*
  %v6_887c = call i32 @function_11e04(i32* %v5_887c, i32 %v3_8878, i32 ptrtoint (i32* @global_var_9a2c.41 to i32), i32 6)
  %v2_8880 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8880 = zext i8 %v2_8880 to i32
  store i32 %v3_8880, i32* %r3.global-to-local, align 4
  store i32 %v6_887c, i32* %r2.global-to-local, align 4
  %v0_8888 = load i32, i32* @r5, align 4
  %v5_8888 = mul nuw nsw i32 %v3_8880, 4
  %v6_8888 = add i32 %v5_8888, %v6_887c
  %v7_8888 = inttoptr i32 %v6_8888 to i32*
  store i32 %v0_8888, i32* %v7_8888, align 4
  %v0_888c = load i32, i32* @r7, align 4
  store i32 %v0_888c, i32* %r1.global-to-local, align 4
  %v0_8890 = load i32, i32* %r3.global-to-local, align 4
  %v1_8890 = load i32, i32* @r8, align 4
  %v2_8890 = add i32 %v1_8890, %v0_8890
  store i32 %v2_8890, i32* %r3.global-to-local, align 4
  %v1_8898 = trunc i32 %v2_8890 to i8
  %v2_8898 = load i32, i32* @r4, align 4
  %v3_8898 = inttoptr i32 %v2_8898 to i8*
  store i8 %v1_8898, i8* %v3_8898, align 1
  %v0_889c = load i32, i32* %r2.global-to-local, align 4
  %v1_889c = load i32, i32* @r6, align 4
  %v2_889c = inttoptr i32 %v1_889c to i32*
  store i32 %v0_889c, i32* %v2_889c, align 4
  %v2_88a0 = call i32 @function_11cd0(i32 %v1_8890, i32 %v0_888c)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 ptrtoint (i32* @global_var_9398.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88a0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88b4 = load i32, i32* @r8, align 4
  %v2_88b4 = add i32 %v1_88b4, %v3_88a4
  store i32 %v2_88b4, i32* %r1.global-to-local, align 4
  %v2_88b8 = load i32, i32* @global_var_1e518.19, align 4
  %v2_88bc = inttoptr i32 %v2_88a0 to i32*
  store i32 ptrtoint (i32* @global_var_9398.43 to i32), i32* %v2_88bc, align 4
  %v3_88c0 = load i32, i32* @r5, align 4
  %v4_88c0 = add i32 %v3_88c0, 4
  %v5_88c0 = inttoptr i32 %v4_88c0 to i8*
  store i8 7, i8* %v5_88c0, align 1
  %v0_88c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_88c4 = mul i32 %v0_88c4, 4
  store i32 %v3_88c4, i32* %r1.global-to-local, align 4
  %v5_88c8 = inttoptr i32 %v2_88b8 to i32*
  %v6_88c8 = call i32 @function_11e04(i32* %v5_88c8, i32 %v3_88c4, i32 ptrtoint (i32* @global_var_9398.43 to i32), i32 7)
  %v2_88cc = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_88cc = zext i8 %v2_88cc to i32
  store i32 %v3_88cc, i32* %r3.global-to-local, align 4
  store i32 %v6_88c8, i32* %r2.global-to-local, align 4
  %v0_88d4 = load i32, i32* @r5, align 4
  %v5_88d4 = mul nuw nsw i32 %v3_88cc, 4
  %v6_88d4 = add i32 %v5_88d4, %v6_88c8
  %v7_88d4 = inttoptr i32 %v6_88d4 to i32*
  store i32 %v0_88d4, i32* %v7_88d4, align 4
  %v0_88d8 = load i32, i32* @r7, align 4
  store i32 %v0_88d8, i32* %r1.global-to-local, align 4
  %v0_88dc = load i32, i32* %r3.global-to-local, align 4
  %v1_88dc = load i32, i32* @r8, align 4
  %v2_88dc = add i32 %v1_88dc, %v0_88dc
  store i32 %v2_88dc, i32* %r3.global-to-local, align 4
  %v1_88e4 = trunc i32 %v2_88dc to i8
  %v2_88e4 = load i32, i32* @r4, align 4
  %v3_88e4 = inttoptr i32 %v2_88e4 to i8*
  store i8 %v1_88e4, i8* %v3_88e4, align 1
  %v0_88e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r6, align 4
  %v2_88e8 = inttoptr i32 %v1_88e8 to i32*
  store i32 %v0_88e8, i32* %v2_88e8, align 4
  %v2_88ec = call i32 @function_11cd0(i32 %v1_88dc, i32 %v0_88d8)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 35852, i32* %r2.global-to-local, align 4
  store i32 %v2_88ec, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8900 = load i32, i32* @r8, align 4
  %v2_8900 = add i32 %v1_8900, %v3_88f0
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v2_8904 = load i32, i32* @global_var_1e518.19, align 4
  %v2_8908 = inttoptr i32 %v2_88ec to i32*
  store i32 35852, i32* %v2_8908, align 4
  %v3_890c = load i32, i32* @r5, align 4
  %v4_890c = add i32 %v3_890c, 4
  %v5_890c = inttoptr i32 %v4_890c to i8*
  store i8 9, i8* %v5_890c, align 1
  %v0_8910 = load i32, i32* %r1.global-to-local, align 4
  %v3_8910 = mul i32 %v0_8910, 4
  store i32 %v3_8910, i32* %r1.global-to-local, align 4
  %v5_8914 = inttoptr i32 %v2_8904 to i32*
  %v6_8914 = call i32 @function_11e04(i32* %v5_8914, i32 %v3_8910, i32 35852, i32 9)
  %v2_8918 = load i8, i8* bitcast (i8** @global_var_1e514.17 to i8*), align 4
  %v3_8918 = zext i8 %v2_8918 to i32
  store i32 %v3_8918, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r6, align 4
  %v2_891c = inttoptr i32 %v1_891c to i32*
  store i32 %v6_8914, i32* %v2_891c, align 4
  %v0_8920 = load i32, i32* @r5, align 4
  %v2_8920 = load i32, i32* %r3.global-to-local, align 4
  %v5_8920 = mul i32 %v2_8920, 4
  %v6_8920 = add i32 %v5_8920, %v6_8914
  %v7_8920 = inttoptr i32 %v6_8920 to i32*
  store i32 %v0_8920, i32* %v7_8920, align 4
  %v0_8924 = load i32, i32* %r3.global-to-local, align 4
  %v1_8924 = load i32, i32* @r8, align 4
  %v2_8924 = add i32 %v1_8924, %v0_8924
  store i32 %v2_8924, i32* %r2.global-to-local, align 4
  %v1_892c = trunc i32 %v2_8924 to i8
  %v2_892c = load i32, i32* @r4, align 4
  %v3_892c = inttoptr i32 %v2_892c to i8*
  store i8 %v1_892c, i8* %v3_892c, align 1
  %v2_8930 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8930, i32* @r4, align 4
  store i32 %v6_85e0, i32* @r5, align 4
  store i32 %v9_85e0, i32* @r6, align 4
  store i32 %v12_85e0, i32* @r7, align 4
  store i32 %v15_85e0, i32* @r8, align 4
  ret i32 %v1_8924

; uselistorder directives
  uselistorder i32 %v1_8924, { 1, 0 }
  uselistorder i32 %v3_8910, { 1, 0 }
  uselistorder i32 %v1_88dc, { 1, 0 }
  uselistorder i32 %v3_88c4, { 1, 0 }
  uselistorder i32 %v1_8890, { 1, 0 }
  uselistorder i32 %v3_8878, { 1, 0 }
  uselistorder i32 %v1_8844, { 1, 0 }
  uselistorder i32 %v3_882c, { 1, 0 }
  uselistorder i32 %v1_87f8, { 1, 0 }
  uselistorder i32 %v3_87e0, { 1, 0 }
  uselistorder i32 %v1_87ac, { 1, 0 }
  uselistorder i32 %v3_8794, { 1, 0 }
  uselistorder i32 %v1_8760, { 1, 0 }
  uselistorder i32 %v3_8748, { 1, 0 }
  uselistorder i32 %v1_8714, { 1, 0 }
  uselistorder i32 %v3_86fc, { 1, 0 }
  uselistorder i32 %v1_86c8, { 1, 0 }
  uselistorder i32 %v6_86b4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86b0, { 1, 0 }
  uselistorder i32 %v1_867c, { 1, 0 }
  uselistorder i32 %v3_8664, { 1, 0 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v6_861c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8618, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 15, 35, 36, 37, 38, 39, 40, 41, 42, 43, 12, 13, 14 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 12, 13, 14, 15, 16, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e514.17 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1e515.26 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1e518.19, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
}

define i32 @function_896c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_896c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i16, align 2
  %v3_896c = load i32, i32* @r4, align 4
  %v18_896c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8988 = call i32 @function_11cd0(i32 %arg1, i32 4)
  store i32 %v2_8988, i32* @sl, align 4
  %v0_8994 = load i32, i32* @r7, align 4
  %v2_8998 = call i32 @function_11cd0(i32 %v0_8994, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_89a4 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8998, i32* @r8, align 4
  %v0_89b4 = load i32, i32* @r5, align 4
  %v4_89b8 = inttoptr i32 %v0_89a4 to i32*
  %v5_89b8 = call i32 @function_8570(i32 %v0_89b4, i32* %v4_89b8, i32 7, i32 65535)
  %v3_89c0 = urem i32 %v5_89b8, 65536
  %v0_89c4 = load i32, i32* @r6, align 4
  %v0_89cc = load i32, i32* @r4, align 4
  store i32 %v0_89cc, i32* %r3.global-to-local, align 4
  %v0_89d0 = load i32, i32* @r5, align 4
  %v5_89d8 = inttoptr i32 %v0_89c4 to i32*
  %v6_89d8 = call i32 @function_8570(i32 %v0_89d0, i32* %v5_89d8, i32 6, i32 %v0_89cc)
  %v0_89dc = load i32, i32* @r6, align 4
  %v3_89e0 = mul i32 %v6_89d8, 65536
  store i32 %v3_89e0, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_89ec = load i32, i32* @r5, align 4
  %v4_89f0 = inttoptr i32 %v0_89dc to i32*
  %v5_89f0 = call i32 @function_8570(i32 %v0_89ec, i32* %v4_89f0, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a00 = load i32, i32* @r6, align 4
  %v0_8a04 = load i32, i32* @r5, align 4
  %v3_8a08 = urem i32 %v5_89f0, 65536
  store i32 %v3_8a08, i32* @r5, align 4
  %v4_8a0c = inttoptr i32 %v0_8a00 to i32*
  %v5_8a0c = call i32 @function_8570(i32 %v0_8a04, i32* %v4_8a0c, i32 1, i32 1)
  %v0_8a10 = load i32, i32* %sb.global-to-local, align 4
  %v3_8a10 = udiv i32 %v0_8a10, 65536
  store i32 %v3_8a10, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8a18 = load i32, i32* @r4, align 4
  %v9_8a18 = icmp eq i32 %v3_8a10, %v1_8a18
  br i1 %v9_8a18, label %dec_label_pc_8a48, label %bb

bb:                                               ; preds = %dec_label_pc_896c
  store i16 0, i16* %stack_var_-56, align 2
  %v4_8a30 = udiv i32 %v0_8a10, 16777216
  store i32 %v4_8a30, i32* %r3.global-to-local, align 4
  %v2_8a1c = mul nuw nsw i32 %v3_8a10, 256
  %v6_8a38 = or i32 %v2_8a1c, %v4_8a30
  %extract.t61 = trunc i32 %v6_8a38 to i16
  br label %dec_label_pc_8a58

dec_label_pc_8a48:                                ; preds = %dec_label_pc_896c
  store i16 0, i16* %stack_var_-56, align 2
  %v0_8a48 = call i32 @function_dd14()
  %extract.t62 = trunc i32 %v0_8a48 to i16
  br label %dec_label_pc_8a58

dec_label_pc_8a58:                                ; preds = %bb, %dec_label_pc_8a48
  %v6_8a38.sink.off0 = phi i16 [ %extract.t61, %bb ], [ %extract.t62, %dec_label_pc_8a48 ]
  %v0_8a3c12 = urem i32 %v5_8a0c, 256
  %v0_8a58 = load i32, i32* @r7, align 4
  %v2_8a58 = icmp eq i32 %v0_8a58, 0
  br i1 %v2_8a58, label %dec_label_pc_8b98, label %dec_label_pc_8a60

dec_label_pc_8a60:                                ; preds = %dec_label_pc_8a58
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8b0c = udiv i32 %v3_89c0, 256
  %v1_8b08 = mul i32 %v5_89b8, 256
  %v4_8b10 = and i32 %v1_8b08, 65280
  %v5_8b10 = or i32 %v4_8b10, %v3_8b0c
  %v2_8a90 = ptrtoint i16* %stack_var_-56 to i32
  %v4_8aa4 = sext i16 %v6_8a38.sink.off0 to i32
  br label %dec_label_pc_8af0

dec_label_pc_8a70:                                ; preds = %bb53, %dec_label_pc_8b30
  %v3_8a7c = call i32 @function_11168(i32 2, i32 2, i32 17)
  %v7_8a84 = icmp eq i32 %v3_8a7c, -1
  %v0_8a88 = load i32, i32* @sb, align 4
  %v1_8a88 = add i32 %v0_8a88, 1
  store i32 %v1_8a88, i32* @sb, align 4
  %v0_8a8c = load i32, i32* @fp, align 4
  %v1_8a8c = add i32 %v0_8a8c, 24
  store i32 %v1_8a8c, i32* @fp, align 4
  %v2_8a98 = load i32, i32* @r8, align 4
  %v3_8a98 = add i32 %v2_8a98, %stack_var_-60.0
  %v4_8a98 = inttoptr i32 %v3_8a98 to i32*
  store i32 %v3_8a7c, i32* %v4_8a98, align 4
  br i1 %v7_8a84, label %dec_label_pc_8b8c, label %dec_label_pc_8aa0

dec_label_pc_8aa0:                                ; preds = %dec_label_pc_8a70
  store i32 2, i32* %r3.global-to-local, align 4
  store i16 2, i16* %stack_var_-56, align 2
  %v10_8ab8 = call i32 @function_10f4c(i32 %v3_8a7c, i32 %v2_8a90, i32 16, i32 2, i32 2, i32 %v4_8aa4, i32 0)
  %v0_8abc = load i32, i32* @r6, align 4
  %v1_8abc = add i32 %v0_8abc, 20
  %v2_8abc = inttoptr i32 %v1_8abc to i8*
  %v3_8abc = load i8, i8* %v2_8abc, align 1
  %v4_8abc = zext i8 %v3_8abc to i32
  store i32 %v4_8abc, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8abc, 32
  br i1 %tmp, label %dec_label_pc_8b44, label %dec_label_pc_8ac8

dec_label_pc_8ac8:                                ; preds = %dec_label_pc_8aa0, %dec_label_pc_8b44
  %v0_8acc = phi i32 [ %v0_8abc, %dec_label_pc_8aa0 ], [ %v0_8acc.pre, %dec_label_pc_8b44 ]
  %v1_8ad0 = load i32, i32* @r8, align 4
  %v2_8ad0 = add i32 %v1_8ad0, %stack_var_-60.0
  %v3_8ad0 = inttoptr i32 %v2_8ad0 to i32*
  %v4_8ad0 = load i32, i32* %v3_8ad0, align 4
  %v3_8ad8 = call i32 @function_10f84(i32 %v4_8ad0, i32 %v0_8acc, i32 16)
  %v0_8ae0 = load i32, i32* @sb, align 4
  %v1_8ae0 = load i32, i32* @r7, align 4
  %v9_8ae0 = icmp eq i32 %v0_8ae0, %v1_8ae0
  %v1_8ae4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8ae4, i32* %r3.global-to-local, align 4
  br i1 %v9_8ae0, label %dec_label_pc_8b98, label %dec_label_pc_8af0

dec_label_pc_8af0:                                ; preds = %dec_label_pc_8ac8, %dec_label_pc_8a60
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8a60 ], [ %v1_8ae4, %dec_label_pc_8ac8 ]
  store i32 65535, i32* @r4, align 4
  %v2_8b00 = call i32 @function_11cd0(i32 65535, i32 1)
  store i32 %v5_8b10, i32* %r3.global-to-local, align 4
  %v1_8b1c = load i32, i32* @r4, align 4
  %v9_8b1c = icmp eq i32 %v3_89c0, %v1_8b1c
  %v1_8b20 = load i32, i32* @fp, align 4
  %v2_8b20 = add i32 %v1_8b20, %arg2
  store i32 %v2_8b20, i32* @r6, align 4
  %v2_8b24 = load i32, i32* @sl, align 4
  %v3_8b24 = add i32 %v2_8b24, %stack_var_-60.0
  %v4_8b24 = inttoptr i32 %v3_8b24 to i32*
  store i32 %v2_8b00, i32* %v4_8b24, align 4
  br i1 %v9_8b1c, label %dec_label_pc_8b30, label %bb53

bb53:                                             ; preds = %dec_label_pc_8af0
  %v1_8b28 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b28 = trunc i32 %v1_8b28 to i16
  %v3_8b28 = load i32, i32* @r6, align 4
  %v4_8b28 = add i32 %v3_8b28, 2
  %v5_8b28 = inttoptr i32 %v4_8b28 to i16*
  store i16 %v2_8b28, i16* %v5_8b28, align 2
  br label %dec_label_pc_8a70

dec_label_pc_8b30:                                ; preds = %dec_label_pc_8af0
  %v0_8b30 = call i32 @function_dd14()
  %v1_8b30 = trunc i32 %v0_8b30 to i16
  %v0_8b38 = load i32, i32* @fp, align 4
  %v2_8b38 = add i32 %v0_8b38, %arg2
  store i32 %v2_8b38, i32* @r6, align 4
  %v4_8b3c = add i32 %v2_8b38, 2
  %v5_8b3c = inttoptr i32 %v4_8b3c to i16*
  store i16 %v1_8b30, i16* %v5_8b3c, align 2
  br label %dec_label_pc_8a70

dec_label_pc_8b44:                                ; preds = %dec_label_pc_8aa0
  %v1_8b44 = add i32 %v0_8abc, 16
  %v2_8b44 = inttoptr i32 %v1_8b44 to i32*
  %v3_8b44 = load i32, i32* %v2_8b44, align 4
  store i32 %v3_8b44, i32* %r4.global-to-local, align 4
  %v0_8b48 = call i32 @function_dd14()
  %v1_8b4c = and i32 %v3_8b44, 16711680
  %v3_8b50 = udiv i32 %v3_8b44, 16777216
  %v4_8b54 = udiv i32 %v1_8b4c, 256
  %v5_8b54 = or i32 %v4_8b54, %v3_8b50
  %v1_8b58 = and i32 %v3_8b44, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_8b58, i32* %r3.global-to-local, align 4
  %v4_8b5c = mul i32 %v1_8b58, 256
  %v5_8b5c = or i32 %v5_8b54, %v4_8b5c
  %v0_8b60 = load i32, i32* @r6, align 4
  %v1_8b60 = add i32 %v0_8b60, 20
  %v2_8b60 = inttoptr i32 %v1_8b60 to i8*
  %v3_8b60 = load i8, i8* %v2_8b60, align 1
  %v4_8b60 = zext i8 %v3_8b60 to i32
  %v4_8b64 = mul i32 %v3_8b44, 16777216
  %v5_8b64 = or i32 %v5_8b5c, %v4_8b64
  %v7_8b68 = lshr i32 %v0_8b48, %v4_8b60
  %v8_8b68 = add i32 %v7_8b68, %v5_8b64
  %v5_8b80 = call i32 @llvm.bswap.i32(i32 %v8_8b68)
  store i32 %v5_8b80, i32* %r3.global-to-local, align 4
  %v2_8b84 = add i32 %v0_8b60, 4
  %v3_8b84 = inttoptr i32 %v2_8b84 to i32*
  store i32 %v5_8b80, i32* %v3_8b84, align 4
  %v0_8acc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8ac8

dec_label_pc_8b8c:                                ; preds = %dec_label_pc_8a70
  store i32 %v3_896c, i32* %r4.global-to-local, align 4
  store i32 %v18_896c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8a7c

dec_label_pc_8b98:                                ; preds = %dec_label_pc_8ac8, %dec_label_pc_8a58
  %v1_8bd824 = phi i32 [ 0, %dec_label_pc_8a58 ], [ %v0_8ae0, %dec_label_pc_8ac8 ]
  %v2_8b9c = icmp eq i32 %v0_8a3c12, 0
  br i1 %v2_8b9c, label %dec_label_pc_8bbc.outer, label %dec_label_pc_8bd4

dec_label_pc_8bac:                                ; preds = %dec_label_pc_8bbc
  store i32 %v1_8bb0, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8bac = load i32, i32* @r8, align 4
  %v4_8bac = mul i32 %v1_8bb0, 4
  %v5_8bac = add i32 %v0_8bac, %v4_8bac
  %v6_8bac = inttoptr i32 %v5_8bac to i32*
  %v7_8bac = load i32, i32* %v6_8bac, align 4
  %v0_8bb0 = load i32, i32* @sl, align 4
  %v5_8bb0 = add i32 %v0_8bb0, %v4_8bac
  %v6_8bb0 = inttoptr i32 %v5_8bb0 to i32*
  %v7_8bb0 = load i32, i32* %v6_8bb0, align 4
  %v4_8bb4 = call i32 @function_110ac(i32 %v7_8bac, i32 %v7_8bb0, i32 %v0_8bc0, i32 16384)
  %v0_8bb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bb8 = add i32 %v0_8bb8, 1
  %v0_8bbc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bbc.outer

dec_label_pc_8bbc.outer:                          ; preds = %dec_label_pc_8b98, %dec_label_pc_8bac
  %v0_8bbc.ph = phi i32 [ %v0_8bbc.pre.pre, %dec_label_pc_8bac ], [ %v1_8bd824, %dec_label_pc_8b98 ]
  %v1_8bb0.ph = phi i32 [ %v1_8bb8, %dec_label_pc_8bac ], [ 0, %dec_label_pc_8b98 ]
  %v0_8bc0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bbc

dec_label_pc_8bbc:                                ; preds = %dec_label_pc_8bbc.outer, %dec_label_pc_8bbc
  %v1_8bb0 = phi i32 [ 0, %dec_label_pc_8bbc ], [ %v1_8bb0.ph, %dec_label_pc_8bbc.outer ]
  %v8_8bc8 = icmp sgt i32 %v0_8bbc.ph, %v1_8bb0
  br i1 %v8_8bc8, label %dec_label_pc_8bac, label %dec_label_pc_8bbc

dec_label_pc_8bd4:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8b98
  %v1_8bd823 = phi i32 [ %v1_8bd824, %dec_label_pc_8b98 ], [ %v1_8bd8, %dec_label_pc_8bd8 ]
  br label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8be4, %dec_label_pc_8bd4
  %v1_8bd8 = phi i32 [ %v1_8bd823, %dec_label_pc_8bd4 ], [ %v1_8bd8.pre, %dec_label_pc_8be4 ]
  %v1_8be4 = phi i32 [ 0, %dec_label_pc_8bd4 ], [ %v1_8c04, %dec_label_pc_8be4 ]
  store i32 %v1_8be4, i32* @r6, align 4
  %v6_8be0 = icmp slt i32 %v1_8be4, %v1_8bd8
  br i1 %v6_8be0, label %dec_label_pc_8be4, label %dec_label_pc_8bd4

dec_label_pc_8be4:                                ; preds = %dec_label_pc_8bd8
  %v0_8bdc = load i32, i32* @r5, align 4
  %v0_8be4 = load i32, i32* @sl, align 4
  %v4_8be4 = mul i32 %v1_8be4, 4
  %v5_8be4 = add i32 %v0_8be4, %v4_8be4
  %v6_8be4 = inttoptr i32 %v5_8be4 to i32*
  %v7_8be4 = load i32, i32* %v6_8be4, align 4
  store i32 %v7_8be4, i32* @r4, align 4
  %v2_8bec = inttoptr i32 %v7_8be4 to i16*
  %v3_8bec = call i32 @function_dea8(i16* %v2_8bec, i32 %v0_8bdc)
  %v0_8bf0 = load i32, i32* @r8, align 4
  %v1_8bf0 = load i32, i32* @r6, align 4
  %v4_8bf0 = mul i32 %v1_8bf0, 4
  %v5_8bf0 = add i32 %v4_8bf0, %v0_8bf0
  %v6_8bf0 = inttoptr i32 %v5_8bf0 to i32*
  %v7_8bf0 = load i32, i32* %v6_8bf0, align 4
  %v0_8bf4 = load i32, i32* @r4, align 4
  %v0_8bf8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8c00 = call i32 @function_110ac(i32 %v7_8bf0, i32 %v0_8bf4, i32 %v0_8bf8, i32 16384)
  %v0_8c04 = load i32, i32* @r6, align 4
  %v1_8c04 = add i32 %v0_8c04, 1
  %v1_8bd8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bd8

; uselistorder directives
  uselistorder i32 %v1_8bd8, { 1, 0 }
  uselistorder i32 %v1_8bb0, { 2, 1, 0 }
  uselistorder i32 %v5_8b80, { 1, 0 }
  uselistorder i32 %v3_8b44, { 3, 1, 2, 0, 4 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8abc, { 1, 0, 2 }
  uselistorder i32 %v3_8a7c, { 1, 3, 2, 0 }
  uselistorder i32 %v4_8a30, { 1, 0 }
  uselistorder i32 %v3_8a10, { 0, 2, 1 }
  uselistorder i32 %v3_89c0, { 1, 0 }
  uselistorder i16* %stack_var_-56, { 3, 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8bbc, { 1, 0 }
  uselistorder label %dec_label_pc_8bbc.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8ac8, { 1, 0 }
  uselistorder label %dec_label_pc_8a70, { 1, 0 }
  uselistorder label %dec_label_pc_8a58, { 1, 0 }
}

define i32 @function_8c0c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8c0c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i16, align 2
  %v3_8c0c = load i32, i32* @r4, align 4
  %v18_8c0c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8c28 = call i32 @function_11cd0(i32 %arg1, i32 4)
  store i32 %v2_8c28, i32* @sl, align 4
  %v0_8c34 = load i32, i32* @r7, align 4
  %v2_8c38 = call i32 @function_11cd0(i32 %v0_8c34, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_8c44 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8c38, i32* @r8, align 4
  %v0_8c54 = load i32, i32* @r5, align 4
  %v4_8c58 = inttoptr i32 %v0_8c44 to i32*
  %v5_8c58 = call i32 @function_8570(i32 %v0_8c54, i32* %v4_8c58, i32 7, i32 65535)
  %v3_8c60 = urem i32 %v5_8c58, 65536
  %v0_8c64 = load i32, i32* @r6, align 4
  %v0_8c6c = load i32, i32* @r4, align 4
  store i32 %v0_8c6c, i32* %r3.global-to-local, align 4
  %v0_8c70 = load i32, i32* @r5, align 4
  %v5_8c78 = inttoptr i32 %v0_8c64 to i32*
  %v6_8c78 = call i32 @function_8570(i32 %v0_8c70, i32* %v5_8c78, i32 6, i32 %v0_8c6c)
  %v0_8c7c = load i32, i32* @r6, align 4
  %v3_8c80 = mul i32 %v6_8c78, 65536
  store i32 %v3_8c80, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_8c8c = load i32, i32* @r5, align 4
  %v4_8c90 = inttoptr i32 %v0_8c7c to i32*
  %v5_8c90 = call i32 @function_8570(i32 %v0_8c8c, i32* %v4_8c90, i32 0, i32 1024)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ca0 = load i32, i32* @r6, align 4
  %v0_8ca4 = load i32, i32* @r5, align 4
  %v3_8ca8 = urem i32 %v5_8c90, 65536
  store i32 %v3_8ca8, i32* @r5, align 4
  %v4_8cac = inttoptr i32 %v0_8ca0 to i32*
  %v5_8cac = call i32 @function_8570(i32 %v0_8ca4, i32* %v4_8cac, i32 1, i32 1)
  %v0_8cb0 = load i32, i32* %sb.global-to-local, align 4
  %v3_8cb0 = udiv i32 %v0_8cb0, 65536
  store i32 %v3_8cb0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8cb8 = load i32, i32* @r4, align 4
  %v9_8cb8 = icmp eq i32 %v3_8cb0, %v1_8cb8
  br i1 %v9_8cb8, label %dec_label_pc_8ce8, label %bb

bb:                                               ; preds = %dec_label_pc_8c0c
  store i16 0, i16* %stack_var_-56, align 2
  %v4_8cd0 = udiv i32 %v0_8cb0, 16777216
  store i32 %v4_8cd0, i32* %r3.global-to-local, align 4
  %v2_8cbc = mul nuw nsw i32 %v3_8cb0, 256
  %v6_8cd8 = or i32 %v2_8cbc, %v4_8cd0
  %extract.t61 = trunc i32 %v6_8cd8 to i16
  br label %dec_label_pc_8cf8

dec_label_pc_8ce8:                                ; preds = %dec_label_pc_8c0c
  store i16 0, i16* %stack_var_-56, align 2
  %v0_8ce8 = call i32 @function_dd14()
  %extract.t62 = trunc i32 %v0_8ce8 to i16
  br label %dec_label_pc_8cf8

dec_label_pc_8cf8:                                ; preds = %bb, %dec_label_pc_8ce8
  %v6_8cd8.sink.off0 = phi i16 [ %extract.t61, %bb ], [ %extract.t62, %dec_label_pc_8ce8 ]
  %v0_8cdc12 = urem i32 %v5_8cac, 256
  %v0_8cf8 = load i32, i32* @r7, align 4
  %v2_8cf8 = icmp eq i32 %v0_8cf8, 0
  br i1 %v2_8cf8, label %dec_label_pc_8e38, label %dec_label_pc_8d00

dec_label_pc_8d00:                                ; preds = %dec_label_pc_8cf8
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8dac = udiv i32 %v3_8c60, 256
  %v1_8da8 = mul i32 %v5_8c58, 256
  %v4_8db0 = and i32 %v1_8da8, 65280
  %v5_8db0 = or i32 %v4_8db0, %v3_8dac
  %v2_8d30 = ptrtoint i16* %stack_var_-56 to i32
  %v4_8d44 = sext i16 %v6_8cd8.sink.off0 to i32
  br label %dec_label_pc_8d90

dec_label_pc_8d10:                                ; preds = %bb53, %dec_label_pc_8dd0
  %v3_8d1c = call i32 @function_11168(i32 2, i32 2, i32 0)
  %v7_8d24 = icmp eq i32 %v3_8d1c, -1
  %v0_8d28 = load i32, i32* @sb, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sb, align 4
  %v0_8d2c = load i32, i32* @fp, align 4
  %v1_8d2c = add i32 %v0_8d2c, 24
  store i32 %v1_8d2c, i32* @fp, align 4
  %v2_8d38 = load i32, i32* @r8, align 4
  %v3_8d38 = add i32 %v2_8d38, %stack_var_-60.0
  %v4_8d38 = inttoptr i32 %v3_8d38 to i32*
  store i32 %v3_8d1c, i32* %v4_8d38, align 4
  br i1 %v7_8d24, label %dec_label_pc_8e2c, label %dec_label_pc_8d40

dec_label_pc_8d40:                                ; preds = %dec_label_pc_8d10
  store i32 2, i32* %r3.global-to-local, align 4
  store i16 2, i16* %stack_var_-56, align 2
  %v10_8d58 = call i32 @function_10f4c(i32 %v3_8d1c, i32 %v2_8d30, i32 16, i32 2, i32 2, i32 %v4_8d44, i32 0)
  %v0_8d5c = load i32, i32* @r6, align 4
  %v1_8d5c = add i32 %v0_8d5c, 20
  %v2_8d5c = inttoptr i32 %v1_8d5c to i8*
  %v3_8d5c = load i8, i8* %v2_8d5c, align 1
  %v4_8d5c = zext i8 %v3_8d5c to i32
  store i32 %v4_8d5c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8d5c, 32
  br i1 %tmp, label %dec_label_pc_8de4, label %dec_label_pc_8d68

dec_label_pc_8d68:                                ; preds = %dec_label_pc_8d40, %dec_label_pc_8de4
  %v0_8d6c = phi i32 [ %v0_8d5c, %dec_label_pc_8d40 ], [ %v0_8d6c.pre, %dec_label_pc_8de4 ]
  %v1_8d70 = load i32, i32* @r8, align 4
  %v2_8d70 = add i32 %v1_8d70, %stack_var_-60.0
  %v3_8d70 = inttoptr i32 %v2_8d70 to i32*
  %v4_8d70 = load i32, i32* %v3_8d70, align 4
  %v3_8d78 = call i32 @function_10f84(i32 %v4_8d70, i32 %v0_8d6c, i32 16)
  %v0_8d80 = load i32, i32* @sb, align 4
  %v1_8d80 = load i32, i32* @r7, align 4
  %v9_8d80 = icmp eq i32 %v0_8d80, %v1_8d80
  %v1_8d84 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8d84, i32* %r3.global-to-local, align 4
  br i1 %v9_8d80, label %dec_label_pc_8e38, label %dec_label_pc_8d90

dec_label_pc_8d90:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8d00
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8d00 ], [ %v1_8d84, %dec_label_pc_8d68 ]
  store i32 65535, i32* @r4, align 4
  %v2_8da0 = call i32 @function_11cd0(i32 65535, i32 1)
  store i32 %v5_8db0, i32* %r3.global-to-local, align 4
  %v1_8dbc = load i32, i32* @r4, align 4
  %v9_8dbc = icmp eq i32 %v3_8c60, %v1_8dbc
  %v1_8dc0 = load i32, i32* @fp, align 4
  %v2_8dc0 = add i32 %v1_8dc0, %arg2
  store i32 %v2_8dc0, i32* @r6, align 4
  %v2_8dc4 = load i32, i32* @sl, align 4
  %v3_8dc4 = add i32 %v2_8dc4, %stack_var_-60.0
  %v4_8dc4 = inttoptr i32 %v3_8dc4 to i32*
  store i32 %v2_8da0, i32* %v4_8dc4, align 4
  br i1 %v9_8dbc, label %dec_label_pc_8dd0, label %bb53

bb53:                                             ; preds = %dec_label_pc_8d90
  %v1_8dc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8dc8 = trunc i32 %v1_8dc8 to i16
  %v3_8dc8 = load i32, i32* @r6, align 4
  %v4_8dc8 = add i32 %v3_8dc8, 2
  %v5_8dc8 = inttoptr i32 %v4_8dc8 to i16*
  store i16 %v2_8dc8, i16* %v5_8dc8, align 2
  br label %dec_label_pc_8d10

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8d90
  %v0_8dd0 = call i32 @function_dd14()
  %v1_8dd0 = trunc i32 %v0_8dd0 to i16
  %v0_8dd8 = load i32, i32* @fp, align 4
  %v2_8dd8 = add i32 %v0_8dd8, %arg2
  store i32 %v2_8dd8, i32* @r6, align 4
  %v4_8ddc = add i32 %v2_8dd8, 2
  %v5_8ddc = inttoptr i32 %v4_8ddc to i16*
  store i16 %v1_8dd0, i16* %v5_8ddc, align 2
  br label %dec_label_pc_8d10

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8d40
  %v1_8de4 = add i32 %v0_8d5c, 16
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r4.global-to-local, align 4
  %v0_8de8 = call i32 @function_dd14()
  %v1_8dec = and i32 %v3_8de4, 16711680
  %v3_8df0 = udiv i32 %v3_8de4, 16777216
  %v4_8df4 = udiv i32 %v1_8dec, 256
  %v5_8df4 = or i32 %v4_8df4, %v3_8df0
  %v1_8df8 = and i32 %v3_8de4, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_8df8, i32* %r3.global-to-local, align 4
  %v4_8dfc = mul i32 %v1_8df8, 256
  %v5_8dfc = or i32 %v5_8df4, %v4_8dfc
  %v0_8e00 = load i32, i32* @r6, align 4
  %v1_8e00 = add i32 %v0_8e00, 20
  %v2_8e00 = inttoptr i32 %v1_8e00 to i8*
  %v3_8e00 = load i8, i8* %v2_8e00, align 1
  %v4_8e00 = zext i8 %v3_8e00 to i32
  %v4_8e04 = mul i32 %v3_8de4, 16777216
  %v5_8e04 = or i32 %v5_8dfc, %v4_8e04
  %v7_8e08 = lshr i32 %v0_8de8, %v4_8e00
  %v8_8e08 = add i32 %v7_8e08, %v5_8e04
  %v5_8e20 = call i32 @llvm.bswap.i32(i32 %v8_8e08)
  store i32 %v5_8e20, i32* %r3.global-to-local, align 4
  %v2_8e24 = add i32 %v0_8e00, 4
  %v3_8e24 = inttoptr i32 %v2_8e24 to i32*
  store i32 %v5_8e20, i32* %v3_8e24, align 4
  %v0_8d6c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8d68

dec_label_pc_8e2c:                                ; preds = %dec_label_pc_8d10
  store i32 %v3_8c0c, i32* %r4.global-to-local, align 4
  store i32 %v18_8c0c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8d1c

dec_label_pc_8e38:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8cf8
  %v1_8e7824 = phi i32 [ 0, %dec_label_pc_8cf8 ], [ %v0_8d80, %dec_label_pc_8d68 ]
  %v2_8e3c = icmp eq i32 %v0_8cdc12, 0
  br i1 %v2_8e3c, label %dec_label_pc_8e5c.outer, label %dec_label_pc_8e74

dec_label_pc_8e4c:                                ; preds = %dec_label_pc_8e5c
  store i32 %v1_8e50, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8e4c = load i32, i32* @r8, align 4
  %v4_8e4c = mul i32 %v1_8e50, 4
  %v5_8e4c = add i32 %v0_8e4c, %v4_8e4c
  %v6_8e4c = inttoptr i32 %v5_8e4c to i32*
  %v7_8e4c = load i32, i32* %v6_8e4c, align 4
  %v0_8e50 = load i32, i32* @sl, align 4
  %v5_8e50 = add i32 %v0_8e50, %v4_8e4c
  %v6_8e50 = inttoptr i32 %v5_8e50 to i32*
  %v7_8e50 = load i32, i32* %v6_8e50, align 4
  %v4_8e54 = call i32 @function_110ac(i32 %v7_8e4c, i32 %v7_8e50, i32 %v0_8e60, i32 16384)
  %v0_8e58 = load i32, i32* %r4.global-to-local, align 4
  %v1_8e58 = add i32 %v0_8e58, 1
  %v0_8e5c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e5c.outer

dec_label_pc_8e5c.outer:                          ; preds = %dec_label_pc_8e38, %dec_label_pc_8e4c
  %v0_8e5c.ph = phi i32 [ %v0_8e5c.pre.pre, %dec_label_pc_8e4c ], [ %v1_8e7824, %dec_label_pc_8e38 ]
  %v1_8e50.ph = phi i32 [ %v1_8e58, %dec_label_pc_8e4c ], [ 0, %dec_label_pc_8e38 ]
  %v0_8e60 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8e5c

dec_label_pc_8e5c:                                ; preds = %dec_label_pc_8e5c.outer, %dec_label_pc_8e5c
  %v1_8e50 = phi i32 [ 0, %dec_label_pc_8e5c ], [ %v1_8e50.ph, %dec_label_pc_8e5c.outer ]
  %v8_8e68 = icmp sgt i32 %v0_8e5c.ph, %v1_8e50
  br i1 %v8_8e68, label %dec_label_pc_8e4c, label %dec_label_pc_8e5c

dec_label_pc_8e74:                                ; preds = %dec_label_pc_8e78, %dec_label_pc_8e38
  %v1_8e7823 = phi i32 [ %v1_8e7824, %dec_label_pc_8e38 ], [ %v1_8e78, %dec_label_pc_8e78 ]
  br label %dec_label_pc_8e78

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8e84, %dec_label_pc_8e74
  %v1_8e78 = phi i32 [ %v1_8e7823, %dec_label_pc_8e74 ], [ %v1_8e78.pre, %dec_label_pc_8e84 ]
  %v1_8e84 = phi i32 [ 0, %dec_label_pc_8e74 ], [ %v1_8ea4, %dec_label_pc_8e84 ]
  store i32 %v1_8e84, i32* @r6, align 4
  %v6_8e80 = icmp slt i32 %v1_8e84, %v1_8e78
  br i1 %v6_8e80, label %dec_label_pc_8e84, label %dec_label_pc_8e74

dec_label_pc_8e84:                                ; preds = %dec_label_pc_8e78
  %v0_8e7c = load i32, i32* @r5, align 4
  %v0_8e84 = load i32, i32* @sl, align 4
  %v4_8e84 = mul i32 %v1_8e84, 4
  %v5_8e84 = add i32 %v0_8e84, %v4_8e84
  %v6_8e84 = inttoptr i32 %v5_8e84 to i32*
  %v7_8e84 = load i32, i32* %v6_8e84, align 4
  store i32 %v7_8e84, i32* @r4, align 4
  %v2_8e8c = inttoptr i32 %v7_8e84 to i16*
  %v3_8e8c = call i32 @function_dea8(i16* %v2_8e8c, i32 %v0_8e7c)
  %v0_8e90 = load i32, i32* @r8, align 4
  %v1_8e90 = load i32, i32* @r6, align 4
  %v4_8e90 = mul i32 %v1_8e90, 4
  %v5_8e90 = add i32 %v4_8e90, %v0_8e90
  %v6_8e90 = inttoptr i32 %v5_8e90 to i32*
  %v7_8e90 = load i32, i32* %v6_8e90, align 4
  %v0_8e94 = load i32, i32* @r4, align 4
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8ea0 = call i32 @function_110ac(i32 %v7_8e90, i32 %v0_8e94, i32 %v0_8e98, i32 16384)
  %v0_8ea4 = load i32, i32* @r6, align 4
  %v1_8ea4 = add i32 %v0_8ea4, 1
  %v1_8e78.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e78

; uselistorder directives
  uselistorder i32 %v1_8e78, { 1, 0 }
  uselistorder i32 %v1_8e50, { 2, 1, 0 }
  uselistorder i32 %v5_8e20, { 1, 0 }
  uselistorder i32 %v3_8de4, { 3, 1, 2, 0, 4 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8d5c, { 1, 0, 2 }
  uselistorder i32 %v3_8d1c, { 1, 3, 2, 0 }
  uselistorder i32 %v4_8cd0, { 1, 0 }
  uselistorder i32 %v3_8cb0, { 0, 2, 1 }
  uselistorder i32 %v3_8c60, { 1, 0 }
  uselistorder i16* %stack_var_-56, { 3, 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r3.global-to-local, { 13, 6, 14, 15, 4, 5, 1, 2, 3, 7, 8, 9, 10, 11, 12, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_10f4c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8e5c, { 1, 0 }
  uselistorder label %dec_label_pc_8e5c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8d68, { 1, 0 }
  uselistorder label %dec_label_pc_8d10, { 1, 0 }
  uselistorder label %dec_label_pc_8cf8, { 1, 0 }
}

define i32 @function_8eac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8eac:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_8eac = load i32, i32* @sb, align 4
  %v27_8eac = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8ec8 = call i32 @function_11cd0(i32 %arg1, i32 4)
  %v0_8ecc = load i32, i32* @r5, align 4
  store i32 %v0_8ecc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8edc = load i32, i32* @r4, align 4
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  %v5_8ee0 = inttoptr i32 %v0_8ecc to i32*
  %v6_8ee0 = call i32 @function_8570(i32 %v0_8edc, i32* %v5_8ee0, i32 2, i32 0)
  %v1_8eec = urem i32 %v6_8ee0, 256
  store i32 %v1_8eec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8ef8 = load i32, i32* @r5, align 4
  store i32 %v0_8ef8, i32* %r1.global-to-local, align 4
  %v0_8efc = load i32, i32* @r4, align 4
  store i32 %v0_8efc, i32* %r0.global-to-local, align 4
  %v5_8f00 = trunc i32 %v6_8ee0 to i8
  %v6_8f04 = inttoptr i32 %v0_8ef8 to i32*
  %v7_8f04 = call i32 @function_8570(i32 %v0_8efc, i32* %v6_8f04, i32 3, i32 65535)
  %v0_8f08 = load i32, i32* @r5, align 4
  store i32 %v0_8f08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f18 = load i32, i32* @r4, align 4
  store i32 %v0_8f18, i32* %r0.global-to-local, align 4
  %v5_8f1c = inttoptr i32 %v0_8f08 to i32*
  %v6_8f1c = call i32 @function_8570(i32 %v0_8f18, i32* %v5_8f1c, i32 4, i32 64)
  %v1_8f24 = urem i32 %v6_8f1c, 256
  store i32 %v1_8f24, i32* %ip.global-to-local, align 4
  %v0_8f28 = load i32, i32* @r5, align 4
  store i32 %v0_8f28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f34 = load i32, i32* @r4, align 4
  store i32 %v0_8f34, i32* %r0.global-to-local, align 4
  %v6_8f3c = inttoptr i32 %v0_8f28 to i32*
  %v7_8f3c = call i32 @function_8570(i32 %v0_8f34, i32* %v6_8f3c, i32 5, i32 0)
  %v1_8f48 = urem i32 %v7_8f3c, 256
  store i32 %v1_8f48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8f54 = load i32, i32* @r5, align 4
  store i32 %v0_8f54, i32* %r1.global-to-local, align 4
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* %r0.global-to-local, align 4
  %v5_8f60 = inttoptr i32 %v0_8f54 to i32*
  %v6_8f60 = call i32 @function_8570(i32 %v0_8f58, i32* %v5_8f60, i32 6, i32 65535)
  %v0_8f68 = load i32, i32* @r5, align 4
  store i32 %v0_8f68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8f60, i32* %sb.global-to-local, align 4
  %v0_8f78 = load i32, i32* @r4, align 4
  store i32 %v0_8f78, i32* %r0.global-to-local, align 4
  %v4_8f7c = inttoptr i32 %v0_8f68 to i32*
  %v5_8f7c = call i32 @function_8570(i32 %v0_8f78, i32* %v4_8f7c, i32 7, i32 65535)
  %v0_8f80 = load i32, i32* @r5, align 4
  store i32 %v0_8f80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_8f7c, i32* @sl, align 4
  %v0_8f90 = load i32, i32* @r4, align 4
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  %v4_8f94 = inttoptr i32 %v0_8f80 to i32*
  %v5_8f94 = call i32 @function_8570(i32 %v0_8f90, i32* %v4_8f94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fa0 = load i32, i32* @r5, align 4
  store i32 %v0_8fa0, i32* %r1.global-to-local, align 4
  store i32 %v5_8f94, i32* @r6, align 4
  %v0_8fa8 = load i32, i32* @r4, align 4
  store i32 %v0_8fa8, i32* %r0.global-to-local, align 4
  %v4_8fac = inttoptr i32 %v0_8fa0 to i32*
  %v5_8fac = call i32 @function_8570(i32 %v0_8fa8, i32* %v4_8fac, i32 1, i32 1)
  %v2_8fb8 = load i32, i32* @global_var_205a0.46, align 4
  store i32 %v2_8fb8, i32* %r3.global-to-local, align 4
  %v1_8fbc = urem i32 %v5_8fac, 256
  store i32 %v1_8fbc, i32* %ip.global-to-local, align 4
  %v0_8fc0 = load i32, i32* @r5, align 4
  store i32 %v0_8fc0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8fc8 = load i32, i32* @r4, align 4
  store i32 %v0_8fc8, i32* %r0.global-to-local, align 4
  %v5_8fd0 = inttoptr i32 %v0_8fc0 to i32*
  %v6_8fd0 = call i32 @function_8570(i32 %v0_8fc8, i32* %v5_8fd0, i32 25, i32 %v2_8fb8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8fe4 = call i32 @function_11168(i32 2, i32 3, i32 17)
  store i32 %v3_8fe4, i32* %r0.global-to-local, align 4
  %v7_8fe8 = icmp eq i32 %v3_8fe4, -1
  store i1 %v7_8fe8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8fe4, i32* @fp, align 4
  br i1 %v7_8fe8, label %dec_label_pc_9388, label %dec_label_pc_8ff4

dec_label_pc_8ff4:                                ; preds = %dec_label_pc_8eac
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8ffc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8ffc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9010 = call i32 @function_11124(i32 %v3_8fe4, i32 0, i32 3, i32 %v6_8ffc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9010, i32* %r0.global-to-local, align 4
  %v7_9014 = icmp eq i32 %v5_9010, -1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9014, label %dec_label_pc_9380, label %dec_label_pc_901c

dec_label_pc_901c:                                ; preds = %dec_label_pc_8ff4
  %v0_901c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9028 = urem i32 %v0_901c, 65536
  store i32 %v3_9028, i32* %r2.global-to-local, align 4
  %v3_902c = icmp ugt i32 %v3_9028, 1459
  %v9_902c = icmp eq i32 %v3_9028, 1460
  store i1 %v9_902c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_902c, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_901c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_901c, %bb
  %v0_9088 = phi i32 [ %v3_9028, %dec_label_pc_901c ], [ 1460, %bb ]
  store i32 %v7_8f04, i32* %r0.global-to-local, align 4
  %v0_9038 = load i32, i32* %sb.global-to-local, align 4
  %v3_9040 = urem i32 %v0_9038, 65536
  store i32 %v3_9040, i32* %ip.global-to-local, align 4
  %v0_9044 = load i32, i32* @r7, align 4
  %v2_9044 = icmp eq i32 %v0_9044, 0
  store i1 %v2_9044, i1* %cpsr_z.global-to-local, align 1
  %v0_9048 = load i32, i32* @sl, align 4
  %v3_9048 = mul i32 %v0_9048, 65536
  br i1 %v2_9044, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_9088, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_9078 = phi i32 [ %v3_9040, %bb48 ], [ %v0_9088, %bb49 ]
  %v3_9058 = urem i32 %v0_9048, 65536
  store i32 %v3_9058, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9060 = urem i32 %v7_8f04, 65536
  store i32 %v3_9060, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9044, label %.thread, label %dec_label_pc_9080

.thread:                                          ; preds = %bb50
  %v2_9074 = add nsw i32 %v1_9078, 28
  store i32 %v2_9074, i32* @sb, align 4
  %v2_9078 = add nsw i32 %v1_9078, 8
  store i32 %v2_9078, i32* @sl, align 4
  br label %dec_label_pc_91a4.preheader

dec_label_pc_9080:                                ; preds = %bb50
  %v1_9088 = add nuw nsw i32 %v0_9088, 28
  store i32 %v1_9088, i32* @sb, align 4
  %v1_908c = add nuw nsw i32 %v0_9088, 8
  store i32 %v1_908c, i32* @sl, align 4
  %tmp51 = mul i32 %v0_9038, 256
  %v3_90a0 = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_9038, 256
  %v4_90b0 = urem i32 %tmp52, 256
  %v5_90b0 = or i32 %v4_90b0, %v3_90a0
  store i32 %v5_90b0, i32* @r6, align 4
  store i32 %v3_9048, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_9088, 256
  %v3_90bc = and i32 %tmp53, 65280
  store i32 %v3_90bc, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_9048, 256
  %v3_90c0 = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_908c, 256
  %v3_90c4 = and i32 %tmp55, 65280
  store i32 %v3_90c4, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_9088, 256
  %v4_90c8 = urem i32 %tmp56, 256
  %v5_90c8 = or i32 %v4_90c8, %v3_90bc
  store i32 %v5_90c8, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_9048, 256
  %v4_90cc = urem i32 %tmp57, 256
  %v5_90cc = or i32 %v4_90cc, %v3_90c0
  store i32 %v5_90cc, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_908c to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_8f04, 256
  %v3_90d4 = and i32 %tmp58, 65280
  store i32 %v3_90d4, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_8f04, 256
  %v4_90e4 = urem i32 %tmp59, 256
  %v5_90e4 = or i32 %v4_90e4, %v3_90d4
  store i32 %v5_90e4, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %v4_913c = sext i8 %v5_8f00 to i32
  %sext6 = mul nuw i32 %v5_90c8, 65536
  %v4_9158 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_90cc, 65536
  %v7_918c = sdiv i32 %sext7, 65536
  %v1_914c = trunc i32 %v6_8f1c to i8
  %v3_918c = sext i16 %rev to i32
  br label %dec_label_pc_90ec

dec_label_pc_90ec:                                ; preds = %.thread9, %dec_label_pc_9080
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_90f8 = call i32 @function_11cd0(i32 1510, i32 1)
  store i32 %v2_90f8, i32* %r0.global-to-local, align 4
  store i32 %v2_8ec8, i32* %r3.global-to-local, align 4
  %v3_9100 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9100, i32* %r1.global-to-local, align 4
  %v2_9104 = load i32, i32* @r4, align 4
  %v5_9104 = mul i32 %v2_9104, 4
  %v6_9104 = add i32 %v5_9104, %v2_8ec8
  %v7_9104 = inttoptr i32 %v6_9104 to i32*
  store i32 %v2_90f8, i32* %v7_9104, align 4
  %v0_9108 = load i32, i32* %r3.global-to-local, align 4
  %v1_9108 = load i32, i32* %r1.global-to-local, align 4
  %v4_9108 = mul i32 %v1_9108, 4
  %v5_9108 = add i32 %v4_9108, %v0_9108
  %v6_9108 = inttoptr i32 %v5_9108 to i32*
  %v7_9108 = load i32, i32* %v6_9108, align 4
  store i32 %v7_9108, i32* %r0.global-to-local, align 4
  %v1_910c = inttoptr i32 %v7_9108 to i8*
  %v2_910c = load i8, i8* %v1_910c, align 1
  %tmp = urem i8 %v2_910c, 16
  %v1_9110 = zext i8 %tmp to i32
  %v1_9114 = or i32 %v1_9110, 64
  store i32 %v1_9114, i32* %r3.global-to-local, align 4
  %v1_9118 = trunc i32 %v1_9114 to i8
  store i8 %v1_9118, i8* %v1_910c, align 1
  %v0_911c = load i32, i32* %r0.global-to-local, align 4
  %v1_911c = inttoptr i32 %v0_911c to i8*
  %v2_911c = load i8, i8* %v1_911c, align 1
  %v1_9120 = and i8 %v2_911c, -16
  %v1_9124 = or i8 %v1_9120, 5
  store i32 %v1_8f48, i32* %ip.global-to-local, align 4
  %v0_912c = load i32, i32* %r1.global-to-local, align 4
  %v3_912c = mul i32 %v0_912c, 32
  store i32 %v3_912c, i32* %r2.global-to-local, align 4
  store i8 %v1_9124, i8* %v1_911c, align 1
  %v0_9134 = load i32, i32* %r1.global-to-local, align 4
  %v1_9134 = add i32 %v0_9134, 1
  store i32 %v1_9134, i32* @r4, align 4
  %v0_9138 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_9134, -8
  %v5_9138 = add i32 %v0_9138, %tmp61
  store i32 %v5_9138, i32* %r2.global-to-local, align 4
  store i32 %v4_913c, i32* %r1.global-to-local, align 4
  %v2_9140 = load i32, i32* %r0.global-to-local, align 4
  %v3_9140 = add i32 %v2_9140, 1
  %v4_9140 = inttoptr i32 %v3_9140 to i8*
  store i8 %v5_8f00, i8* %v4_9140, align 1
  store i32 %v1_8f24, i32* %r3.global-to-local, align 4
  %v0_9148 = load i32, i32* %ip.global-to-local, align 4
  %v2_9148 = icmp eq i32 %v0_9148, 0
  store i1 %v2_9148, i1* %cpsr_z.global-to-local, align 1
  %v2_914c = load i32, i32* %r0.global-to-local, align 4
  %v3_914c = add i32 %v2_914c, 8
  %v4_914c = inttoptr i32 %v3_914c to i8*
  store i8 %v1_914c, i8* %v4_914c, align 1
  %v0_9150 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9150, label %.thread9, label %bb60

bb60:                                             ; preds = %dec_label_pc_90ec
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9154 = load i32, i32* %r0.global-to-local, align 4
  %v4_9154 = add i32 %v3_9154, 6
  %v5_9154 = inttoptr i32 %v4_9154 to i16*
  store i16 64, i16* %v5_9154, align 2
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_90ec, %bb60
  store i32 %v4_9158, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_9160 = load i32, i32* %r0.global-to-local, align 4
  %v3_9160 = add i32 %v2_9160, 9
  %v4_9160 = inttoptr i32 %v3_9160 to i8*
  store i8 17, i8* %v4_9160, align 1
  %v0_9164 = load i32, i32* %ip.global-to-local, align 4
  %v1_9164 = trunc i32 %v0_9164 to i16
  %v2_9164 = load i32, i32* %r0.global-to-local, align 4
  %v3_9164 = add i32 %v2_9164, 2
  %v4_9164 = inttoptr i32 %v3_9164 to i16*
  store i16 %v1_9164, i16* %v4_9164, align 2
  store i32 %v6_8fd0, i32* %ip.global-to-local, align 4
  %v1_916c = load i32, i32* %r0.global-to-local, align 4
  %v2_916c = add i32 %v1_916c, 12
  %v3_916c = inttoptr i32 %v2_916c to i32*
  store i32 %v6_8fd0, i32* %v3_916c, align 4
  %v0_9170 = load i32, i32* %r2.global-to-local, align 4
  %v1_9170 = load i32, i32* @r8, align 4
  %v2_9170 = add i32 %v1_9170, %v0_9170
  store i32 %v2_9170, i32* %r2.global-to-local, align 4
  %v1_9174 = add i32 %v2_9170, 16
  %v2_9174 = inttoptr i32 %v1_9174 to i32*
  %v3_9174 = load i32, i32* %v2_9174, align 4
  store i32 %v3_9174, i32* %r3.global-to-local, align 4
  %v0_9178 = load i32, i32* @r5, align 4
  %v1_9178 = trunc i32 %v0_9178 to i16
  %v2_9178 = load i32, i32* %r0.global-to-local, align 4
  %v3_9178 = add i32 %v2_9178, 4
  %v4_9178 = inttoptr i32 %v3_9178 to i16*
  store i16 %v1_9178, i16* %v4_9178, align 2
  %v0_917c = load i32, i32* %r0.global-to-local, align 4
  %v1_917c = add i32 %v0_917c, 20
  store i32 %v1_917c, i32* %r1.global-to-local, align 4
  %v0_9180 = load i32, i32* %r3.global-to-local, align 4
  %v2_9180 = add i32 %v0_917c, 16
  %v3_9180 = inttoptr i32 %v2_9180 to i32*
  store i32 %v0_9180, i32* %v3_9180, align 4
  %v0_9184 = load i32, i32* @r6, align 4
  %v1_9184 = trunc i32 %v0_9184 to i16
  %v2_9184 = load i32, i32* %r0.global-to-local, align 4
  %v3_9184 = add i32 %v2_9184, 20
  %v4_9184 = inttoptr i32 %v3_9184 to i16*
  store i16 %v1_9184, i16* %v4_9184, align 2
  store i32 %v3_918c, i32* %r0.global-to-local, align 4
  store i32 %v7_918c, i32* %r3.global-to-local, align 4
  %v0_9190 = load i32, i32* @r4, align 4
  %v1_9190 = load i32, i32* @r7, align 4
  %v9_9190 = icmp eq i32 %v0_9190, %v1_9190
  store i1 %v9_9190, i1* %cpsr_z.global-to-local, align 1
  %v2_9194 = load i32, i32* %r1.global-to-local, align 4
  %v3_9194 = add i32 %v2_9194, 4
  %v4_9194 = inttoptr i32 %v3_9194 to i16*
  store i16 %rev, i16* %v4_9194, align 2
  %v0_9198 = load i32, i32* %r3.global-to-local, align 4
  %v1_9198 = trunc i32 %v0_9198 to i16
  %v2_9198 = load i32, i32* %r1.global-to-local, align 4
  %v3_9198 = add i32 %v2_9198, 2
  %v4_9198 = inttoptr i32 %v3_9198 to i16*
  store i16 %v1_9198, i16* %v4_9198, align 2
  %v0_919c = load i32, i32* @r4, align 4
  store i32 %v0_919c, i32* %stack_var_-44, align 4
  %v5_91a0 = icmp slt i32 %v0_9190, %v1_9190
  br i1 %v5_91a0, label %dec_label_pc_90ec, label %dec_label_pc_91a4.preheader.loopexit

dec_label_pc_91a4.preheader.loopexit:             ; preds = %.thread9
  %v0_91a8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_91a4.preheader

dec_label_pc_91a4.preheader:                      ; preds = %.thread, %dec_label_pc_91a4.preheader.loopexit
  %v0_91a8.pre = phi i32 [ %v0_91a8.pre.pre, %dec_label_pc_91a4.preheader.loopexit ], [ 0, %.thread ]
  %v3_9310 = icmp eq i32 %v6_8fd0, -1
  %v8_9310 = icmp eq i32 %v6_8fd0, -1
  %v3_9328 = icmp eq i32 %v3_9060, 65535
  %v2_9364 = icmp eq i32 %v1_8fbc, 0
  br label %dec_label_pc_91a4

dec_label_pc_91a4:                                ; preds = %dec_label_pc_91a4, %dec_label_pc_92a4, %dec_label_pc_91a4.preheader
  %v0_91a8 = phi i32 [ %v0_91a8.pre, %dec_label_pc_91a4.preheader ], [ 0, %dec_label_pc_92a4 ], [ 0, %dec_label_pc_91a4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_91a8 = icmp eq i32 %v0_91a8, 0
  store i1 %v2_91a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_91a8, label %dec_label_pc_91a4, label %dec_label_pc_91b4

dec_label_pc_91b4:                                ; preds = %dec_label_pc_91a4, %dec_label_pc_92a4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_91b8

dec_label_pc_91b8:                                ; preds = %dec_label_pc_9220, %dec_label_pc_91b4
  %v1_91cc = phi i32 [ %v1_9294, %dec_label_pc_9220 ], [ 0, %dec_label_pc_91b4 ]
  %v5_91bc = mul i32 %v1_91cc, 24
  %v1_91c0 = load i32, i32* @r8, align 4
  %v2_91c0 = add i32 %v1_91c0, %v5_91bc
  store i32 %v2_91c0, i32* %r3.global-to-local, align 4
  store i32 %v2_8ec8, i32* %r1.global-to-local, align 4
  %v1_91c8 = add i32 %v2_91c0, 20
  %v2_91c8 = inttoptr i32 %v1_91c8 to i8*
  %v3_91c8 = load i8, i8* %v2_91c8, align 1
  %v4_91c8 = zext i8 %v3_91c8 to i32
  store i32 %v4_91c8, i32* %r2.global-to-local, align 4
  %v4_91cc = mul i32 %v1_91cc, 4
  %v5_91cc = add i32 %v4_91cc, %v2_8ec8
  %v6_91cc = inttoptr i32 %v5_91cc to i32*
  %v7_91cc = load i32, i32* %v6_91cc, align 4
  store i32 %v7_91cc, i32* @r5, align 4
  %v7_91d0 = icmp eq i8 %v3_91c8, 31
  store i1 %v7_91d0, i1* %cpsr_z.global-to-local, align 1
  %v1_91d4 = add i32 %v7_91cc, 20
  store i32 %v1_91d4, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_91c8, 32
  br i1 %tmp62, label %dec_label_pc_92b8, label %dec_label_pc_91dc

dec_label_pc_91dc:                                ; preds = %dec_label_pc_91b8
  store i32 %v6_8fd0, i32* %r3.global-to-local, align 4
  store i1 %v8_9310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9310, label %dec_label_pc_9318, label %dec_label_pc_91e8

dec_label_pc_91e8:                                ; preds = %dec_label_pc_92b8, %dec_label_pc_91dc
  store i32 %v3_9060, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9328, label %dec_label_pc_9334, label %dec_label_pc_91fc

dec_label_pc_91fc:                                ; preds = %dec_label_pc_9318.dec_label_pc_91fc_crit_edge, %dec_label_pc_91e8
  %v1_9200 = phi i32 [ %v1_9200.pre, %dec_label_pc_9318.dec_label_pc_91fc_crit_edge ], [ 65535, %dec_label_pc_91e8 ]
  store i32 %v3_9040, i32* %r0.global-to-local, align 4
  %v9_9200 = icmp eq i32 %v3_9040, %v1_9200
  store i1 %v9_9200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9200, label %dec_label_pc_9348, label %dec_label_pc_9208

dec_label_pc_9208:                                ; preds = %dec_label_pc_9334, %dec_label_pc_91fc
  %v1_920c = phi i32 [ %v1_9340, %dec_label_pc_9334 ], [ %v1_9200, %dec_label_pc_91fc ]
  store i32 %v3_9058, i32* %r1.global-to-local, align 4
  %v9_920c = icmp eq i32 %v3_9058, %v1_920c
  store i1 %v9_920c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_920c, label %dec_label_pc_935c, label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %dec_label_pc_9348, %dec_label_pc_9208
  store i32 %v1_8fbc, i32* %r3.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9364, label %dec_label_pc_9220, label %dec_label_pc_9370

dec_label_pc_9220:                                ; preds = %dec_label_pc_9214, %dec_label_pc_935c, %dec_label_pc_9370
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9224 = load i32, i32* @r5, align 4
  %v3_9224 = add i32 %v2_9224, 10
  %v4_9224 = inttoptr i32 %v3_9224 to i16*
  store i16 0, i16* %v4_9224, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_922c = load i32, i32* @r5, align 4
  store i32 %v0_922c, i32* @r0, align 4
  %v2_9230 = call i32 @function_c848(i32 %v0_922c, i32 20)
  %v3_9230 = trunc i32 %v2_9230 to i16
  %v3_9234 = load i32, i32* @r5, align 4
  %v4_9234 = add i32 %v3_9234, 10
  %v5_9234 = inttoptr i32 %v4_9234 to i16*
  store i16 %v3_9230, i16* %v5_9234, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_923c = load i32, i32* @r6, align 4
  %v3_923c = add i32 %v2_923c, 6
  %v4_923c = inttoptr i32 %v3_923c to i16*
  store i16 0, i16* %v4_923c, align 2
  %v0_9240 = load i32, i32* @r6, align 4
  store i32 %v0_9240, i32* @r1, align 4
  %v1_9244 = add i32 %v0_9240, 4
  %v2_9244 = inttoptr i32 %v1_9244 to i16*
  %v3_9244 = load i16, i16* %v2_9244, align 2
  %v4_9244 = zext i16 %v3_9244 to i32
  store i32 %v4_9244, i32* %r2.global-to-local, align 4
  %v0_9248 = load i32, i32* @sl, align 4
  store i32 %v0_9248, i32* %r3.global-to-local, align 4
  %v0_924c = load i32, i32* @r5, align 4
  store i32 %v0_924c, i32* %r0.global-to-local, align 4
  %v4_9250 = call i32 @function_c898(i32 %v0_924c, i32 %v0_9240, i32 %v4_9244, i32 %v0_9248)
  %v5_9250 = trunc i32 %v4_9250 to i16
  store i32 %v4_9250, i32* %r0.global-to-local, align 4
  %v3_9254 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9254, i32* %r3.global-to-local, align 4
  %v3_9258 = mul i32 %v3_9254, 32
  store i32 %v3_9258, i32* %lr.global-to-local, align 4
  %v3_925c = load i32, i32* @r6, align 4
  %v4_925c = add i32 %v3_925c, 6
  %v5_925c = inttoptr i32 %v4_925c to i16*
  store i16 %v5_9250, i16* %v5_925c, align 2
  %v0_9260 = load i32, i32* %lr.global-to-local, align 4
  %v1_9260 = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_9260, -8
  %v5_9260 = add i32 %v0_9260, %tmp63
  store i32 %v5_9260, i32* %lr.global-to-local, align 4
  %v0_9264 = load i32, i32* @r6, align 4
  %v1_9264 = add i32 %v0_9264, 2
  %v2_9264 = inttoptr i32 %v1_9264 to i16*
  %v3_9264 = load i16, i16* %v2_9264, align 2
  %v1_9268 = load i32, i32* @r8, align 4
  %v2_9268 = add i32 %v1_9268, %v5_9260
  store i32 %v2_9268, i32* @lr, align 4
  %v3_926c = add i32 %v2_9268, 2
  %v4_926c = inttoptr i32 %v3_926c to i16*
  store i16 %v3_9264, i16* %v4_926c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9278 = load i32, i32* @r5, align 4
  store i32 %v0_9278, i32* %r1.global-to-local, align 4
  %v0_927c = load i32, i32* @fp, align 4
  store i32 %v0_927c, i32* %r0.global-to-local, align 4
  %v0_9280 = load i32, i32* @sb, align 4
  store i32 %v0_9280, i32* %r2.global-to-local, align 4
  %v0_9284 = load i32, i32* @lr, align 4
  %v6_928c = call i32 @function_110e4(i32 %v0_927c, i32 %v0_9278, i32 %v0_9280, i32 16384, i32 %v0_9284, i32 16)
  %v3_9290 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9290, i32* %r3.global-to-local, align 4
  %v1_9294 = add i32 %v3_9290, 1
  store i32 %v1_9294, i32* %r0.global-to-local, align 4
  %v1_9298 = load i32, i32* @r7, align 4
  %v9_9298 = icmp eq i32 %v1_9294, %v1_9298
  store i1 %v9_9298, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9294, i32* %stack_var_-44, align 4
  %v5_92a0 = icmp slt i32 %v1_9294, %v1_9298
  br i1 %v5_92a0, label %dec_label_pc_91b8, label %dec_label_pc_92a4

dec_label_pc_92a4:                                ; preds = %dec_label_pc_9220
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_92a8 = icmp eq i32 %v1_9298, 0
  store i1 %v2_92a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_92a8, label %dec_label_pc_91a4, label %dec_label_pc_91b4

dec_label_pc_92b8:                                ; preds = %dec_label_pc_91b8
  %v1_92b8 = add i32 %v2_91c0, 16
  %v2_92b8 = inttoptr i32 %v1_92b8 to i32*
  %v3_92b8 = load i32, i32* %v2_92b8, align 4
  %v0_92bc = call i32 @function_dd14()
  store i32 %v0_92bc, i32* %r0.global-to-local, align 4
  %v3_92c0 = load i32, i32* %stack_var_-44, align 4
  %v5_92c8 = mul i32 %v3_92c0, 24
  %v1_92cc = and i32 %v3_92b8, 16711680
  store i32 %v1_92cc, i32* %ip.global-to-local, align 4
  %v3_92d0 = udiv i32 %v3_92b8, 16777216
  %v4_92d4 = udiv i32 %v1_92cc, 256
  %v5_92d4 = or i32 %v4_92d4, %v3_92d0
  store i32 %v5_92d4, i32* %r2.global-to-local, align 4
  %v1_92d8 = load i32, i32* @r8, align 4
  %v2_92d8 = add i32 %v1_92d8, %v5_92c8
  store i32 %v2_92d8, i32* %r1.global-to-local, align 4
  %v1_92dc = and i32 %v3_92b8, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_92dc, i32* %r3.global-to-local, align 4
  %v1_92e0 = add i32 %v2_92d8, 20
  %v2_92e0 = inttoptr i32 %v1_92e0 to i8*
  %v3_92e0 = load i8, i8* %v2_92e0, align 1
  %v4_92e0 = zext i8 %v3_92e0 to i32
  store i32 %v4_92e0, i32* %ip.global-to-local, align 4
  %v4_92e4 = mul i32 %v1_92dc, 256
  %v4_92e8 = mul i32 %v3_92b8, 16777216
  %v5_92e4 = or i32 %v4_92e4, %v4_92e8
  %v5_92e8 = or i32 %v5_92e4, %v5_92d4
  %v7_92ec = lshr i32 %v0_92bc, %v4_92e0
  %v8_92ec = add i32 %v7_92ec, %v5_92e8
  store i32 %v8_92ec, i32* %r2.global-to-local, align 4
  %v1_92f0 = and i32 %v8_92ec, 16711680
  store i32 %v1_92f0, i32* %r0.global-to-local, align 4
  %v1_92fc = and i32 %v8_92ec, 65280
  store i32 %v1_92fc, i32* %r1.global-to-local, align 4
  %v5_9304 = call i32 @llvm.bswap.i32(i32 %v8_92ec)
  %v1_9308 = load i32, i32* @r5, align 4
  %v2_9308 = add i32 %v1_9308, 16
  %v3_9308 = inttoptr i32 %v2_9308 to i32*
  store i32 %v5_9304, i32* %v3_9308, align 4
  store i32 %v6_8fd0, i32* %r3.global-to-local, align 4
  store i1 %v8_9310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9310, label %dec_label_pc_9318, label %dec_label_pc_91e8

dec_label_pc_9318:                                ; preds = %dec_label_pc_92b8, %dec_label_pc_91dc
  %v0_9318 = call i32 @function_dd14()
  store i32 %v0_9318, i32* %r0.global-to-local, align 4
  store i32 %v3_9060, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9328, i1* %cpsr_z.global-to-local, align 1
  %v1_932c = load i32, i32* @r5, align 4
  %v2_932c = add i32 %v1_932c, 12
  %v3_932c = inttoptr i32 %v2_932c to i32*
  store i32 %v0_9318, i32* %v3_932c, align 4
  br i1 %v3_9328, label %dec_label_pc_9334, label %dec_label_pc_9318.dec_label_pc_91fc_crit_edge

dec_label_pc_9318.dec_label_pc_91fc_crit_edge:    ; preds = %dec_label_pc_9318
  %v1_9200.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_91fc

dec_label_pc_9334:                                ; preds = %dec_label_pc_9318, %dec_label_pc_91e8
  %v0_9334 = call i32 @function_dd14()
  %v1_9334 = trunc i32 %v0_9334 to i16
  %v3_9338 = load i32, i32* @r5, align 4
  %v4_9338 = add i32 %v3_9338, 4
  %v5_9338 = inttoptr i32 %v4_9338 to i16*
  store i16 %v1_9334, i16* %v5_9338, align 2
  store i32 %v3_9040, i32* %r0.global-to-local, align 4
  %v1_9340 = load i32, i32* @r4, align 4
  %v9_9340 = icmp eq i32 %v3_9040, %v1_9340
  store i1 %v9_9340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9340, label %dec_label_pc_9348, label %dec_label_pc_9208

dec_label_pc_9348:                                ; preds = %dec_label_pc_9334, %dec_label_pc_91fc
  %v0_9348 = call i32 @function_dd14()
  %v1_9348 = trunc i32 %v0_9348 to i16
  store i32 %v0_9348, i32* %r0.global-to-local, align 4
  store i32 %v3_9058, i32* %r1.global-to-local, align 4
  %v1_9350 = load i32, i32* @r4, align 4
  %v9_9350 = icmp eq i32 %v3_9058, %v1_9350
  store i1 %v9_9350, i1* %cpsr_z.global-to-local, align 1
  %v3_9354 = load i32, i32* @r5, align 4
  %v4_9354 = add i32 %v3_9354, 20
  %v5_9354 = inttoptr i32 %v4_9354 to i16*
  store i16 %v1_9348, i16* %v5_9354, align 2
  br i1 %v9_9350, label %dec_label_pc_935c, label %dec_label_pc_9214

dec_label_pc_935c:                                ; preds = %dec_label_pc_9348, %dec_label_pc_9208
  %v0_935c = call i32 @function_dd14()
  %v1_935c = trunc i32 %v0_935c to i16
  store i32 %v0_935c, i32* %r0.global-to-local, align 4
  store i32 %v1_8fbc, i32* %r3.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  %v3_9368 = load i32, i32* @r6, align 4
  %v4_9368 = add i32 %v3_9368, 2
  %v5_9368 = inttoptr i32 %v4_9368 to i16*
  store i16 %v1_935c, i16* %v5_9368, align 2
  br i1 %v2_9364, label %dec_label_pc_9220, label %dec_label_pc_9370

dec_label_pc_9370:                                ; preds = %dec_label_pc_9214, %dec_label_pc_935c
  %v0_9370 = load i32, i32* @r5, align 4
  %v1_9370 = add i32 %v0_9370, 28
  store i32 %v1_9370, i32* %r0.global-to-local, align 4
  store i32 %v0_9088, i32* %r1.global-to-local, align 4
  %v2_9378 = inttoptr i32 %v1_9370 to i16*
  %v3_9378 = call i32 @function_dea8(i16* %v2_9378, i32 %v0_9088)
  store i32 %v3_9378, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9220

dec_label_pc_9380:                                ; preds = %dec_label_pc_8ff4
  %v0_9380 = load i32, i32* @fp, align 4
  store i32 %v0_9380, i32* %r0.global-to-local, align 4
  %v1_9384 = call i32 @function_109c0(i32 %v0_9380)
  store i32 %v1_9384, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9388

dec_label_pc_9388:                                ; preds = %dec_label_pc_8eac, %dec_label_pc_9380
  %v1_9390 = phi i32 [ %v3_8fe4, %dec_label_pc_8eac ], [ %v1_9384, %dec_label_pc_9380 ]
  store i32 %v18_8eac, i32* %sb.global-to-local, align 4
  store i32 %v27_8eac, i32* %lr.global-to-local, align 4
  ret i32 %v1_9390

; uselistorder directives
  uselistorder i32 %v0_935c, { 1, 0 }
  uselistorder i32 %v0_9348, { 1, 0 }
  uselistorder i32 %v1_9340, { 1, 0 }
  uselistorder i32 %v3_92b8, { 3, 1, 2, 0 }
  uselistorder i32 %v1_9294, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_9260, { 1, 0 }
  uselistorder i32 %v4_9250, { 1, 0 }
  uselistorder i1 %v2_9364, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9328, { 3, 2, 0, 1 }
  uselistorder i32 %v3_90d4, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_90bc, { 1, 0 }
  uselistorder i32 %v1_908c, { 1, 0, 2 }
  uselistorder i32 %v1_9088, { 1, 0, 2 }
  uselistorder i32 %v3_9060, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9048, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9040, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_9038, { 1, 0, 2 }
  uselistorder i32 %v0_9088, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_9028, { 3, 1, 2, 0 }
  uselistorder i1 %v7_9014, { 1, 0 }
  uselistorder i1 %v7_8fe8, { 1, 0 }
  uselistorder i32 %v3_8fe4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_8fd0, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_8fbc, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8f48, { 1, 0 }
  uselistorder i32 %v1_8f24, { 1, 0 }
  uselistorder i32 %v6_8f1c, { 1, 0 }
  uselistorder i32 %v7_8f04, { 1, 0, 2, 3 }
  uselistorder i8 %v5_8f00, { 1, 0 }
  uselistorder i32 %v6_8ee0, { 1, 0 }
  uselistorder i32 %v2_8ec8, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 31, 30, 0 }
  uselistorder i32* %r0.global-to-local, { 38, 1, 3, 2, 5, 6, 4, 8, 7, 10, 9, 11, 37, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 28, 29, 30, 31, 33, 35, 34, 36, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9388, { 1, 0 }
  uselistorder label %dec_label_pc_9370, { 1, 0 }
  uselistorder label %dec_label_pc_9220, { 2, 1, 0 }
  uselistorder label %dec_label_pc_91b4, { 1, 0 }
  uselistorder label %dec_label_pc_91a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_91a4.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @function_9398(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9398:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9398 = load i32, i32* @r4, align 4
  %v6_9398 = load i32, i32* @r5, align 4
  %v24_9398 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_93b4 = call i32 @function_11cd0(i32 %arg1, i32 4)
  %v0_93b8 = load i32, i32* @r5, align 4
  store i32 %v0_93b8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_93c8 = load i32, i32* @r4, align 4
  store i32 %v0_93c8, i32* %r0.global-to-local, align 4
  %v5_93cc = inttoptr i32 %v0_93b8 to i32*
  %v6_93cc = call i32 @function_8570(i32 %v0_93c8, i32* %v5_93cc, i32 2, i32 0)
  %v1_93d8 = urem i32 %v6_93cc, 256
  store i32 %v1_93d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_93e4 = load i32, i32* @r5, align 4
  store i32 %v0_93e4, i32* %r1.global-to-local, align 4
  %v0_93e8 = load i32, i32* @r4, align 4
  store i32 %v0_93e8, i32* %r0.global-to-local, align 4
  %v5_93ec = trunc i32 %v6_93cc to i8
  %v6_93f0 = inttoptr i32 %v0_93e4 to i32*
  %v7_93f0 = call i32 @function_8570(i32 %v0_93e8, i32* %v6_93f0, i32 3, i32 65535)
  %v0_93f4 = load i32, i32* @r5, align 4
  store i32 %v0_93f4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_93f0, i32* %fp.global-to-local, align 4
  %v0_9404 = load i32, i32* @r4, align 4
  store i32 %v0_9404, i32* %r0.global-to-local, align 4
  %v4_9408 = inttoptr i32 %v0_93f4 to i32*
  %v5_9408 = call i32 @function_8570(i32 %v0_9404, i32* %v4_9408, i32 4, i32 64)
  %v1_9410 = urem i32 %v5_9408, 256
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v0_9414 = load i32, i32* @r5, align 4
  store i32 %v0_9414, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9420 = load i32, i32* @r4, align 4
  store i32 %v0_9420, i32* %r0.global-to-local, align 4
  %v6_9428 = inttoptr i32 %v0_9414 to i32*
  %v7_9428 = call i32 @function_8570(i32 %v0_9420, i32* %v6_9428, i32 5, i32 1)
  %v1_9434 = urem i32 %v7_9428, 256
  store i32 %v1_9434, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9440 = load i32, i32* @r5, align 4
  store i32 %v0_9440, i32* %r1.global-to-local, align 4
  %v0_9444 = load i32, i32* @r4, align 4
  store i32 %v0_9444, i32* %r0.global-to-local, align 4
  %v5_944c = inttoptr i32 %v0_9440 to i32*
  %v6_944c = call i32 @function_8570(i32 %v0_9444, i32* %v5_944c, i32 6, i32 65535)
  %v0_9454 = load i32, i32* @r5, align 4
  store i32 %v0_9454, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_944c, i32* @r8, align 4
  %v0_9464 = load i32, i32* @r4, align 4
  store i32 %v0_9464, i32* %r0.global-to-local, align 4
  %v4_9468 = inttoptr i32 %v0_9454 to i32*
  %v5_9468 = call i32 @function_8570(i32 %v0_9464, i32* %v4_9468, i32 7, i32 65535)
  %v0_946c = load i32, i32* @r5, align 4
  store i32 %v0_946c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9468, i32* @r7, align 4
  %v0_947c = load i32, i32* @r4, align 4
  store i32 %v0_947c, i32* %r0.global-to-local, align 4
  %v4_9480 = inttoptr i32 %v0_946c to i32*
  %v5_9480 = call i32 @function_8570(i32 %v0_947c, i32* %v4_9480, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9490 = load i32, i32* @r5, align 4
  store i32 %v0_9490, i32* %r1.global-to-local, align 4
  %v0_9494 = load i32, i32* @r4, align 4
  store i32 %v0_9494, i32* %r0.global-to-local, align 4
  %v4_9498 = inttoptr i32 %v0_9490 to i32*
  %v5_9498 = call i32 @function_8570(i32 %v0_9494, i32* %v4_9498, i32 1, i32 1)
  %v1_94a0 = urem i32 %v5_9498, 256
  store i32 %v1_94a0, i32* %ip.global-to-local, align 4
  %v0_94a4 = load i32, i32* @r5, align 4
  store i32 %v0_94a4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_94b0 = load i32, i32* @r4, align 4
  store i32 %v0_94b0, i32* %r0.global-to-local, align 4
  %v5_94b8 = inttoptr i32 %v0_94a4 to i32*
  %v6_94b8 = call i32 @function_8570(i32 %v0_94b0, i32* %v5_94b8, i32 19, i32 0)
  %v0_94c0 = load i32, i32* @r5, align 4
  store i32 %v0_94c0, i32* %r1.global-to-local, align 4
  %v2_94c4 = load i32, i32* @global_var_205a0.46, align 4
  store i32 %v2_94c4, i32* %r3.global-to-local, align 4
  store i32 %v6_94b8, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r4, align 4
  store i32 %v0_94d0, i32* %r0.global-to-local, align 4
  %v4_94d4 = inttoptr i32 %v0_94c0 to i32*
  %v5_94d4 = call i32 @function_8570(i32 %v0_94d0, i32* %v4_94d4, i32 25, i32 %v2_94c4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_94e8 = call i32 @function_11168(i32 2, i32 3, i32 6)
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  %v7_94ec = icmp eq i32 %v3_94e8, -1
  store i1 %v7_94ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94ec, label %dec_label_pc_9a00, label %dec_label_pc_94f8

dec_label_pc_94f8:                                ; preds = %dec_label_pc_9398
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9500 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9500, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9514 = call i32 @function_11124(i32 %v3_94e8, i32 0, i32 3, i32 %v6_9500, i32 4)
  store i32 %v5_9514, i32* %r0.global-to-local, align 4
  %v7_9518 = icmp eq i32 %v5_9514, -1
  store i1 %v7_9518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9518, label %dec_label_pc_99f8, label %dec_label_pc_9520

dec_label_pc_9520:                                ; preds = %dec_label_pc_94f8
  %v0_9520 = load i32, i32* @r8, align 4
  %v0_9524 = load i32, i32* @r7, align 4
  %v0_9528 = load i32, i32* %fp.global-to-local, align 4
  %v0_952c = load i32, i32* @r6, align 4
  %v1_952c = urem i32 %v0_952c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9534 = urem i32 %v0_9520, 65536
  store i32 %v3_9534, i32* %r3.global-to-local, align 4
  %v3_9538 = urem i32 %v0_9524, 65536
  store i32 %v3_9538, i32* %r4.global-to-local, align 4
  %v0_953c = load i32, i32* @sl, align 4
  %v2_953c = icmp eq i32 %v0_953c, 0
  store i1 %v2_953c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9554 = urem i32 %v0_9528, 65536
  store i32 %v3_9554, i32* @fp, align 4
  br i1 %v2_953c, label %dec_label_pc_9a0c, label %dec_label_pc_9564

dec_label_pc_9564:                                ; preds = %dec_label_pc_9520
  %v3_9524 = mul i32 %v0_9524, 65536
  %v3_9520 = mul i32 %v0_9520, 65536
  %v0_9528.not = or i32 %v0_9528, -65536
  %v1_9568 = xor i32 %v0_9528.not, 65535
  %v3_956c = mul i32 %v5_9480, 65536
  %v1_9570 = add i32 %v3_956c, 4325376
  %tmp73 = udiv i32 %v1_9570, 256
  %v3_9584 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_9568, 256
  %v3_9588 = and i32 %tmp74, 65280
  store i32 %v3_9588, i32* %ip.global-to-local, align 4
  %v1_958c = add i32 %v3_956c, 524288
  %v1_9594 = add i32 %v3_956c, 1835008
  %tmp75 = udiv i32 %v1_9568, 256
  %v4_9598 = urem i32 %tmp75, 256
  %v5_9598 = or i32 %v4_9598, %v3_9588
  %v4_95a0 = udiv i32 %v1_9570, 16777216
  %v5_95a0 = or i32 %v3_9584, %v4_95a0
  store i32 %v5_95a0, i32* @r8, align 4
  %v3_95ac = udiv i32 %v1_9594, 256
  %tmp76 = mul i32 %v0_9528, 256
  %v3_95b0 = and i32 %tmp76, 65280
  store i32 %v3_9520, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_9528, 256
  %v4_95c0 = urem i32 %tmp77, 256
  %v5_95c0 = or i32 %v4_95c0, %v3_95b0
  store i32 %v5_95c0, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_9520, 256
  %v3_95c4 = and i32 %tmp78, 65280
  %v1_95c8 = and i32 %v3_95ac, 65280
  store i32 %v1_95c8, i32* @r6, align 4
  store i32 %v3_9524, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_9524, 256
  %v3_95d4 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_9520, 256
  %v4_95d8 = urem i32 %tmp80, 256
  %v5_95d8 = or i32 %v4_95d8, %v3_95c4
  store i32 %v5_95d8, i32* @lr, align 4
  %v4_95dc = udiv i32 %v1_9594, 16777216
  %v5_95dc = or i32 %v1_95c8, %v4_95dc
  store i32 %v5_95dc, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_9524, 256
  %v4_95e0 = urem i32 %tmp81, 256
  %v5_95e0 = or i32 %v4_95e0, %v3_95d4
  %tmp82 = udiv i32 %v1_958c, 256
  %v3_95e4 = and i32 %tmp82, 65280
  store i32 %v3_95e4, i32* @r5, align 4
  %v5_95e8 = trunc i32 %v5_95c0 to i16
  %v5_95f0 = trunc i32 %v5_95dc to i16
  %v4_95f8 = udiv i32 %v1_958c, 16777216
  %v5_95f8 = or i32 %v3_95e4, %v4_95f8
  store i32 %v5_95f8, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9654 = sext i8 %v5_93ec to i32
  %v1_9660 = trunc i32 %v5_9408 to i8
  %sext = mul nuw i32 %v5_9598, 65536
  %v4_96ec = sdiv i32 %sext, 65536
  %v2_9718 = icmp eq i32 %v1_952c, 0
  %sext8 = mul nuw i32 %v5_95d8, 65536
  %v4_9738 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_95e0, 65536
  %v4_9740 = sdiv i32 %sext9, 65536
  %v1_96f827 = trunc i32 %v4_96ec to i16
  br label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %bb85, %dec_label_pc_9564
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_960c = call i32 @function_11cd0(i32 1510, i32 4)
  store i32 %v2_960c, i32* %r0.global-to-local, align 4
  %v2_9614 = load i32, i32* @r4, align 4
  %v5_9614 = mul i32 %v2_9614, 4
  %v6_9614 = add i32 %v5_9614, %v2_93b4
  %v7_9614 = inttoptr i32 %v6_9614 to i32*
  store i32 %v2_960c, i32* %v7_9614, align 4
  %v3_9618 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9618, i32* %r2.global-to-local, align 4
  %v5_9620 = mul i32 %v3_9618, 24
  %v1_9624 = load i32, i32* @sb, align 4
  %v2_9624 = add i32 %v1_9624, %v5_9620
  store i32 %v2_9624, i32* @lr, align 4
  store i32 %v2_93b4, i32* %r3.global-to-local, align 4
  %v4_962c = mul i32 %v3_9618, 4
  %v5_962c = add i32 %v4_962c, %v2_93b4
  %v6_962c = inttoptr i32 %v5_962c to i32*
  %v7_962c = load i32, i32* %v6_962c, align 4
  store i32 %v7_962c, i32* %r4.global-to-local, align 4
  %v1_9630 = inttoptr i32 %v7_962c to i8*
  %v2_9630 = load i8, i8* %v1_9630, align 1
  %tmp = urem i8 %v2_9630, 16
  %v1_9634 = zext i8 %tmp to i32
  %v1_9638 = or i32 %v1_9634, 64
  store i32 %v1_9638, i32* %r3.global-to-local, align 4
  %v1_963c = trunc i32 %v1_9638 to i8
  store i8 %v1_963c, i8* %v1_9630, align 1
  %v0_9640 = load i32, i32* %r4.global-to-local, align 4
  %v1_9640 = inttoptr i32 %v0_9640 to i8*
  %v2_9640 = load i8, i8* %v1_9640, align 1
  %v1_9644 = and i8 %v2_9640, -16
  %v1_9648 = or i8 %v1_9644, 5
  store i32 %v1_9434, i32* %r5.global-to-local, align 4
  store i8 %v1_9648, i8* %v1_9640, align 1
  store i32 %v4_9654, i32* %r1.global-to-local, align 4
  %v2_9658 = load i32, i32* %r4.global-to-local, align 4
  %v3_9658 = add i32 %v2_9658, 1
  %v4_9658 = inttoptr i32 %v3_9658 to i8*
  store i8 %v5_93ec, i8* %v4_9658, align 1
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v2_9660 = load i32, i32* %r4.global-to-local, align 4
  %v3_9660 = add i32 %v2_9660, 8
  %v4_9660 = inttoptr i32 %v3_9660 to i8*
  store i8 %v1_9660, i8* %v4_9660, align 1
  %v2_9668 = load i32, i32* %r4.global-to-local, align 4
  %v3_9668 = add i32 %v2_9668, 4
  %v4_9668 = inttoptr i32 %v3_9668 to i16*
  store i16 %v5_95e8, i16* %v4_9668, align 2
  %v2_9670 = load i32, i32* %r4.global-to-local, align 4
  %v3_9670 = add i32 %v2_9670, 9
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 47, i8* %v4_9670, align 1
  store i32 %v5_94d4, i32* %r3.global-to-local, align 4
  %v0_9678 = load i32, i32* %r5.global-to-local, align 4
  %v2_9678 = icmp eq i32 %v0_9678, 0
  store i1 %v2_9678, i1* %cpsr_z.global-to-local, align 1
  %v1_967c = load i32, i32* %r4.global-to-local, align 4
  %v2_967c = add i32 %v1_967c, 12
  %v3_967c = inttoptr i32 %v2_967c to i32*
  store i32 %v5_94d4, i32* %v3_967c, align 4
  br i1 %v2_9678, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_9600
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_9684 = load i32, i32* %r4.global-to-local, align 4
  %v4_9684 = add i32 %v3_9684, 6
  %v5_9684 = inttoptr i32 %v4_9684 to i16*
  store i16 64, i16* %v5_9684, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_9600, %bb
  %v0_9688 = load i32, i32* @lr, align 4
  %v1_9688 = add i32 %v0_9688, 16
  %v2_9688 = inttoptr i32 %v1_9688 to i32*
  %v3_9688 = load i32, i32* %v2_9688, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_9690 = load i32, i32* %r4.global-to-local, align 4
  %v2_9690 = add i32 %v1_9690, 16
  %v3_9690 = inttoptr i32 %v2_9690 to i32*
  store i32 %v3_9688, i32* %v3_9690, align 4
  %v0_9694 = load i32, i32* %r4.global-to-local, align 4
  %v1_9694 = add i32 %v0_9694, 24
  store i32 %v1_9694, i32* %r1.global-to-local, align 4
  %v1_9698 = add i32 %v0_9694, 20
  store i32 %v1_9698, i32* %r0.global-to-local, align 4
  %v0_969c = load i32, i32* %ip.global-to-local, align 4
  %v1_969c = add i32 %v0_969c, 101
  store i32 %v1_969c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r8, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i16
  %v3_96a8 = add i32 %v0_9694, 2
  %v4_96a8 = inttoptr i32 %v3_96a8 to i16*
  store i16 %v1_96a8, i16* %v4_96a8, align 2
  %v0_96ac = load i32, i32* %ip.global-to-local, align 4
  %v1_96ac = trunc i32 %v0_96ac to i16
  %v2_96ac = load i32, i32* %r0.global-to-local, align 4
  %v3_96ac = add i32 %v2_96ac, 2
  %v4_96ac = inttoptr i32 %v3_96ac to i16*
  store i16 %v1_96ac, i16* %v4_96ac, align 2
  %v0_96b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_96b0 = trunc i32 %v0_96b0 to i8
  %v2_96b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_96b0 = add i32 %v2_96b0, 13
  %v4_96b0 = inttoptr i32 %v3_96b0 to i8*
  store i8 %v1_96b0, i8* %v4_96b0, align 1
  %v0_96b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_96b4 = trunc i32 %v0_96b4 to i8
  %v2_96b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_96b4 = add i32 %v2_96b4, 12
  %v4_96b4 = inttoptr i32 %v3_96b4 to i8*
  store i8 %v1_96b4, i8* %v4_96b4, align 1
  %v0_96b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96b8 = add i32 %v0_96b8, 38
  %v2_96b8 = inttoptr i32 %v1_96b8 to i8*
  %v3_96b8 = load i8, i8* %v2_96b8, align 1
  %tmp89 = urem i8 %v3_96b8, 16
  %v1_96bc = zext i8 %tmp89 to i32
  %v1_96c0 = or i32 %v1_96bc, 64
  store i32 %v1_96c0, i32* %r3.global-to-local, align 4
  %v1_96c4 = trunc i32 %v1_96c0 to i8
  store i8 %v1_96c4, i8* %v2_96b8, align 1
  %v0_96c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96c8 = add i32 %v0_96c8, 38
  %v2_96c8 = inttoptr i32 %v1_96c8 to i8*
  %v3_96c8 = load i8, i8* %v2_96c8, align 1
  %v1_96cc = and i8 %v3_96c8, -16
  %v1_96d0 = or i8 %v1_96cc, 5
  store i8 %v1_96d0, i8* %v2_96c8, align 1
  %v0_96dc = load i32, i32* %r4.global-to-local, align 4
  %v1_96dc = add i32 %v0_96dc, 38
  store i32 %v1_96dc, i32* @r5, align 4
  %v3_96e0 = add i32 %v0_96dc, 39
  %v4_96e0 = inttoptr i32 %v3_96e0 to i8*
  store i8 %v5_93ec, i8* %v4_96e0, align 1
  store i32 %v5_95dc, i32* %r2.global-to-local, align 4
  %v2_96e8 = load i32, i32* @r5, align 4
  %v3_96e8 = add i32 %v2_96e8, 2
  %v4_96e8 = inttoptr i32 %v3_96e8 to i16*
  store i16 %v5_95f0, i16* %v4_96e8, align 2
  store i32 %v4_96ec, i32* %r3.global-to-local, align 4
  store i32 %v1_9410, i32* %r1.global-to-local, align 4
  %v0_96f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_96f4, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_96f828 = load i32, i32* @r5, align 4
  %v3_96f829 = add i32 %v2_96f828, 4
  %v4_96f830 = inttoptr i32 %v3_96f829 to i16*
  store i16 %v1_96f827, i16* %v4_96f830, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_96f8 = load i32, i32* @r5, align 4
  %v3_96f8 = add i32 %v2_96f8, 4
  %v4_96f8 = inttoptr i32 %v3_96f8 to i16*
  store i16 %v1_96f827, i16* %v4_96f8, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_9700 = load i32, i32* %r2.global-to-local, align 4
  %v2_9700 = trunc i32 %v1_9700 to i16
  %v3_9700 = load i32, i32* @r5, align 4
  %v4_9700 = add i32 %v3_9700, 6
  %v5_9700 = inttoptr i32 %v4_9700 to i16*
  store i16 %v2_9700, i16* %v5_9700, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_9704 = load i32, i32* %r1.global-to-local, align 4
  %v1_9704 = trunc i32 %v0_9704 to i8
  %v2_9704 = load i32, i32* @r5, align 4
  %v3_9704 = add i32 %v2_9704, 8
  %v4_9704 = inttoptr i32 %v3_9704 to i8*
  store i8 %v1_9704, i8* %v4_9704, align 1
  %v0_9708 = load i32, i32* %r3.global-to-local, align 4
  %v1_9708 = trunc i32 %v0_9708 to i8
  %v2_9708 = load i32, i32* @r5, align 4
  %v3_9708 = add i32 %v2_9708, 9
  %v4_9708 = inttoptr i32 %v3_9708 to i8*
  store i8 %v1_9708, i8* %v4_9708, align 1
  %v0_970c = call i32 @function_dd14()
  store i32 %v0_970c, i32* %r0.global-to-local, align 4
  store i32 %v1_952c, i32* %r1.global-to-local, align 4
  store i1 %v2_9718, i1* %cpsr_z.global-to-local, align 1
  %v1_971c = sub i32 1023, %v0_970c
  store i32 %v1_971c, i32* %r3.global-to-local, align 4
  br i1 %v2_9718, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_9724 = load i32, i32* @r5, align 4
  %v3_9724 = add i32 %v2_9724, 16
  %v4_9724 = inttoptr i32 %v3_9724 to i32*
  store i32 %v1_971c, i32* %v4_9724, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_9720 = load i32, i32* %r4.global-to-local, align 4
  %v2_9720 = add i32 %v1_9720, 16
  %v3_9720 = inttoptr i32 %v2_9720 to i32*
  %v4_9720 = load i32, i32* %v3_9720, align 4
  store i32 %v4_9720, i32* %r3.global-to-local, align 4
  %v2_9728 = load i32, i32* @r5, align 4
  %v3_9728 = add i32 %v2_9728, 16
  %v4_9728 = inttoptr i32 %v3_9728 to i32*
  store i32 %v4_9720, i32* %v4_9728, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_972c = load i32, i32* @r5, align 4
  %v2_972c = add i32 %v1_972c, 12
  %v3_972c = inttoptr i32 %v2_972c to i32*
  store i32 %v0_970c, i32* %v3_972c, align 4
  %v3_9730 = load i32, i32* %stack_var_-44, align 4
  %v0_9734 = load i32, i32* %r4.global-to-local, align 4
  %v1_9734 = add i32 %v0_9734, 58
  store i32 %v1_9734, i32* @r6, align 4
  store i32 %v4_9738, i32* %r2.global-to-local, align 4
  %v1_973c = add i32 %v3_9730, 1
  store i32 %v1_973c, i32* @r4, align 4
  store i32 %v4_9740, i32* %r3.global-to-local, align 4
  %v1_9744 = load i32, i32* @sl, align 4
  %v9_9744 = icmp eq i32 %v1_973c, %v1_9744
  store i1 %v9_9744, i1* %cpsr_z.global-to-local, align 1
  %v0_9748 = load i32, i32* @r7, align 4
  %v1_9748 = trunc i32 %v0_9748 to i16
  %v3_9748 = add i32 %v0_9734, 62
  %v4_9748 = inttoptr i32 %v3_9748 to i16*
  store i16 %v1_9748, i16* %v4_9748, align 2
  %v0_974c = load i32, i32* %r2.global-to-local, align 4
  %v1_974c = trunc i32 %v0_974c to i16
  %v2_974c = load i32, i32* @r6, align 4
  %v3_974c = inttoptr i32 %v2_974c to i16*
  store i16 %v1_974c, i16* %v3_974c, align 2
  %v0_9750 = load i32, i32* %r3.global-to-local, align 4
  %v1_9750 = trunc i32 %v0_9750 to i16
  %v2_9750 = load i32, i32* @r6, align 4
  %v3_9750 = add i32 %v2_9750, 2
  %v4_9750 = inttoptr i32 %v3_9750 to i16*
  store i16 %v1_9750, i16* %v4_9750, align 2
  %v0_9754 = load i32, i32* @r4, align 4
  store i32 %v0_9754, i32* %stack_var_-44, align 4
  %v5_9758 = icmp slt i32 %v1_973c, %v1_9744
  br i1 %v5_9758, label %dec_label_pc_9600, label %dec_label_pc_975c

dec_label_pc_975c:                                ; preds = %bb85
  %v1_9764 = add i32 %v5_9480, 8
  store i32 %v1_9764, i32* %r4.global-to-local, align 4
  %v1_9768 = add i32 %v5_9480, 66
  store i32 %v1_9768, i32* %r5.global-to-local, align 4
  %v0_9778.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9774.preheader

dec_label_pc_9774.preheader:                      ; preds = %dec_label_pc_975c, %dec_label_pc_9a0c
  %v0_9778.pre = phi i32 [ %v0_9778.pre.pre, %dec_label_pc_975c ], [ 0, %dec_label_pc_9a0c ]
  %stack_var_-132.0.ph = phi i32 [ %v1_9768, %dec_label_pc_975c ], [ %v1_9a18, %dec_label_pc_9a0c ]
  %stack_var_-136.0.ph = phi i32 [ %v1_9764, %dec_label_pc_975c ], [ %v1_9a14, %dec_label_pc_9a0c ]
  %v2_99c8 = icmp eq i32 %v1_952c, 0
  %v2_9810 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9828 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9838 = ptrtoint i32* %stack_var_-56 to i32
  %v2_9844 = ptrtoint i32* %stack_var_-54 to i32
  %v2_9858 = icmp eq i32 %v1_94a0, 0
  %v2_97b8 = icmp eq i32 %v5_94d4, -1
  %v7_97b8 = icmp eq i32 %v5_94d4, -1
  br label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9774, %dec_label_pc_9860, %dec_label_pc_9774.preheader
  %v0_9778 = phi i32 [ %v0_9778.pre, %dec_label_pc_9774.preheader ], [ 0, %dec_label_pc_9774 ], [ %v1_98fc, %dec_label_pc_9860 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9778 = icmp eq i32 %v0_9778, 0
  store i1 %v2_9778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9778, label %dec_label_pc_9774, label %dec_label_pc_9784

dec_label_pc_9784:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9788

dec_label_pc_9788:                                ; preds = %dec_label_pc_9860, %dec_label_pc_9784
  %v1_979c = phi i32 [ %v1_98f8, %dec_label_pc_9860 ], [ 0, %dec_label_pc_9784 ]
  %v5_978c = mul i32 %v1_979c, 24
  %v1_9790 = load i32, i32* @sb, align 4
  %v2_9790 = add i32 %v1_9790, %v5_978c
  store i32 %v2_9790, i32* %r3.global-to-local, align 4
  store i32 %v2_93b4, i32* %r4.global-to-local, align 4
  %v1_9798 = add i32 %v2_9790, 20
  %v2_9798 = inttoptr i32 %v1_9798 to i8*
  %v3_9798 = load i8, i8* %v2_9798, align 1
  %v4_9798 = zext i8 %v3_9798 to i32
  store i32 %v4_9798, i32* %r2.global-to-local, align 4
  %v4_979c = mul i32 %v1_979c, 4
  %v5_979c = add i32 %v4_979c, %v2_93b4
  %v6_979c = inttoptr i32 %v5_979c to i32*
  %v7_979c = load i32, i32* %v6_979c, align 4
  store i32 %v7_979c, i32* @r5, align 4
  %v7_97a0 = icmp eq i8 %v3_9798, 31
  store i1 %v7_97a0, i1* %cpsr_z.global-to-local, align 1
  %v1_97a4 = add i32 %v7_979c, 24
  store i32 %v1_97a4, i32* @r7, align 4
  %v1_97a8 = add i32 %v7_979c, 38
  store i32 %v1_97a8, i32* @r6, align 4
  %v1_97ac = add i32 %v7_979c, 58
  store i32 %v1_97ac, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_9798, 32
  br i1 %tmp90, label %dec_label_pc_990c, label %dec_label_pc_97b4

dec_label_pc_97b4:                                ; preds = %dec_label_pc_9788
  store i32 %v5_94d4, i32* %r1.global-to-local, align 4
  store i1 %v7_97b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97b8, label %dec_label_pc_996c, label %dec_label_pc_97c0

dec_label_pc_97c0:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97b4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_97c8 = load i32, i32* @fp, align 4
  %v9_97c8 = icmp eq i32 %v0_97c8, 65535
  store i1 %v9_97c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97c8, label %dec_label_pc_9984, label %dec_label_pc_97d0

dec_label_pc_97d0:                                ; preds = %dec_label_pc_996c.dec_label_pc_97d0_crit_edge, %dec_label_pc_97c0
  %v1_97d4 = phi i32 [ %v1_97d4.pre, %dec_label_pc_996c.dec_label_pc_97d0_crit_edge ], [ 65535, %dec_label_pc_97c0 ]
  store i32 %v3_9534, i32* %r2.global-to-local, align 4
  %v9_97d4 = icmp eq i32 %v3_9534, %v1_97d4
  store i1 %v9_97d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97d4, label %dec_label_pc_99ac, label %dec_label_pc_97dc

dec_label_pc_97dc:                                ; preds = %dec_label_pc_9984.dec_label_pc_97dc_crit_edge, %dec_label_pc_97d0
  %v1_97e0 = phi i32 [ %v1_97e0.pre, %dec_label_pc_9984.dec_label_pc_97dc_crit_edge ], [ %v1_97d4, %dec_label_pc_97d0 ]
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v9_97e0 = icmp eq i32 %v3_9538, %v1_97e0
  store i1 %v9_97e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97e0, label %dec_label_pc_99c0, label %dec_label_pc_97e8

dec_label_pc_97e8:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_97dc
  store i32 %v1_952c, i32* @r4, align 4
  store i1 %v2_99c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99c8, label %dec_label_pc_99dc, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_97e8
  %v1_97f0 = load i32, i32* @r5, align 4
  %v2_97f0 = add i32 %v1_97f0, 16
  %v3_97f0 = inttoptr i32 %v2_97f0 to i32*
  %v4_97f0 = load i32, i32* %v3_97f0, align 4
  store i32 %v4_97f0, i32* %r3.global-to-local, align 4
  %v2_97f4 = load i32, i32* @r6, align 4
  %v3_97f4 = add i32 %v2_97f4, 16
  %v4_97f4 = inttoptr i32 %v3_97f4 to i32*
  store i32 %v4_97f0, i32* %v4_97f4, align 4
  br label %dec_label_pc_97fc

dec_label_pc_97fc:                                ; preds = %bb88, %.thread11, %dec_label_pc_99dc
  %v0_97fc = call i32 @function_dd14()
  store i32 %v0_97fc, i32* %r0.global-to-local, align 4
  store i32 %v0_97fc, i32* %stack_var_-48, align 4
  %v0_9804 = call i32 @function_dd14()
  store i32 %v0_9804, i32* %r0.global-to-local, align 4
  store i32 %v0_9804, i32* %stack_var_-52, align 4
  %v0_980c = call i32 @function_dd14()
  store i32 %v2_9810, i32* %r1.global-to-local, align 4
  store i32 %v0_980c, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_981c = load i32, i32* @r7, align 4
  store i32 %v0_981c, i32* %r0.global-to-local, align 4
  %v3_9820 = call i32 @function_ff70(i32 %v0_981c, i32 %v2_9810, i32 4)
  %v0_9824 = load i32, i32* @r7, align 4
  %v1_9824 = add i32 %v0_9824, 6
  store i32 %v1_9824, i32* %r0.global-to-local, align 4
  store i32 %v2_9828, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9830 = call i32 @function_ff70(i32 %v1_9824, i32 %v2_9828, i32 4)
  %v0_9834 = load i32, i32* @r7, align 4
  %v1_9834 = add i32 %v0_9834, 4
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  store i32 %v2_9838, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9840 = call i32 @function_ff70(i32 %v1_9834, i32 %v2_9838, i32 2)
  store i32 %v2_9844, i32* %r1.global-to-local, align 4
  %v0_9848 = load i32, i32* @r7, align 4
  %v1_9848 = add i32 %v0_9848, 10
  store i32 %v1_9848, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9850 = call i32 @function_ff70(i32 %v1_9848, i32 %v2_9844, i32 2)
  store i32 %v3_9850, i32* %r0.global-to-local, align 4
  store i32 %v1_94a0, i32* %r1.global-to-local, align 4
  store i1 %v2_9858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9858, label %dec_label_pc_9860, label %dec_label_pc_99e8

dec_label_pc_9860:                                ; preds = %dec_label_pc_97fc, %dec_label_pc_99e8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9864 = load i32, i32* @r5, align 4
  %v3_9864 = add i32 %v2_9864, 10
  %v4_9864 = inttoptr i32 %v3_9864 to i16*
  store i16 0, i16* %v4_9864, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_986c = load i32, i32* @r5, align 4
  store i32 %v0_986c, i32* @r0, align 4
  %v2_9870 = call i32 @function_c848(i32 %v0_986c, i32 20)
  %v3_9870 = trunc i32 %v2_9870 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9878 = load i32, i32* @r5, align 4
  %v4_9878 = add i32 %v3_9878, 10
  %v5_9878 = inttoptr i32 %v4_9878 to i16*
  store i16 %v3_9870, i16* %v5_9878, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9880 = load i32, i32* %r3.global-to-local, align 4
  %v1_9880 = trunc i32 %v0_9880 to i16
  %v2_9880 = load i32, i32* @r6, align 4
  %v3_9880 = add i32 %v2_9880, 10
  %v4_9880 = inttoptr i32 %v3_9880 to i16*
  store i16 %v1_9880, i16* %v4_9880, align 2
  %v0_9884 = load i32, i32* @r6, align 4
  store i32 %v0_9884, i32* @r0, align 4
  %v2_9888 = call i32 @function_c848(i32 %v0_9884, i32 20)
  %v3_9888 = trunc i32 %v2_9888 to i16
  store i32 %v2_9888, i32* %r0.global-to-local, align 4
  %v3_988c = load i32, i32* @r6, align 4
  %v4_988c = add i32 %v3_988c, 10
  %v5_988c = inttoptr i32 %v4_988c to i16*
  store i16 %v3_9888, i16* %v5_988c, align 2
  store i32 0, i32* @r4, align 4
  %v0_9894 = load i32, i32* @r8, align 4
  store i32 %v0_9894, i32* @r1, align 4
  %v1_9898 = add i32 %v0_9894, 4
  %v2_9898 = inttoptr i32 %v1_9898 to i16*
  %v3_9898 = load i16, i16* %v2_9898, align 2
  %v4_9898 = zext i16 %v3_9898 to i32
  store i32 %v4_9898, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_98a0 = add i32 %v0_9894, 6
  %v4_98a0 = inttoptr i32 %v3_98a0 to i16*
  store i16 0, i16* %v4_98a0, align 2
  %v0_98a4 = load i32, i32* @r6, align 4
  store i32 %v0_98a4, i32* %r0.global-to-local, align 4
  %v4_98a8 = call i32 @function_c898(i32 %v0_98a4, i32 %v0_9894, i32 %v4_9898, i32 %stack_var_-136.0.ph)
  %v5_98a8 = trunc i32 %v4_98a8 to i16
  store i32 %v4_98a8, i32* %r0.global-to-local, align 4
  %v3_98ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98ac, i32* %r2.global-to-local, align 4
  %v3_98b0 = mul i32 %v3_98ac, 32
  store i32 %v3_98b0, i32* %r3.global-to-local, align 4
  %v0_98b4 = load i32, i32* @r5, align 4
  %v1_98b4 = add i32 %v0_98b4, 16
  %v2_98b4 = inttoptr i32 %v1_98b4 to i32*
  %v3_98b4 = load i32, i32* %v2_98b4, align 4
  %v5_98b8 = mul i32 %v3_98ac, 24
  store i32 %v5_98b8, i32* %r3.global-to-local, align 4
  %v1_98bc = load i32, i32* @sb, align 4
  %v2_98bc = add i32 %v1_98bc, %v5_98b8
  store i32 %v2_98bc, i32* @lr, align 4
  %v2_98c0 = add i32 %v2_98bc, 4
  %v3_98c0 = inttoptr i32 %v2_98c0 to i32*
  store i32 %v3_98b4, i32* %v3_98c0, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_98c8 = load i32, i32* @r8, align 4
  %v4_98c8 = add i32 %v3_98c8, 6
  %v5_98c8 = inttoptr i32 %v4_98c8 to i16*
  store i16 %v5_98a8, i16* %v5_98c8, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_98d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_98d0 = trunc i32 %v0_98d0 to i16
  %v2_98d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_98d0 = load i32, i32* @sb, align 4
  %v4_98d0 = add i32 %v3_98d0, %v2_98d0
  %v5_98d0 = inttoptr i32 %v4_98d0 to i16*
  store i16 %v1_98d0, i16* %v5_98d0, align 2
  %v0_98d4 = load i32, i32* @r4, align 4
  %v1_98d4 = trunc i32 %v0_98d4 to i16
  %v2_98d4 = load i32, i32* @lr, align 4
  %v3_98d4 = add i32 %v2_98d4, 2
  %v4_98d4 = inttoptr i32 %v3_98d4 to i16*
  store i16 %v1_98d4, i16* %v4_98d4, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_98dc = load i32, i32* @r5, align 4
  store i32 %v0_98dc, i32* %r1.global-to-local, align 4
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_98e8 = load i32, i32* @lr, align 4
  %v0_98ec = load i32, i32* %ip.global-to-local, align 4
  %v6_98f0 = call i32 @function_110e4(i32 %v3_94e8, i32 %v0_98dc, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_98e8, i32 %v0_98ec)
  %v3_98f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98f4, i32* %r3.global-to-local, align 4
  %v1_98f8 = add i32 %v3_98f4, 1
  store i32 %v1_98f8, i32* %r0.global-to-local, align 4
  %v1_98fc = load i32, i32* @sl, align 4
  %v9_98fc = icmp eq i32 %v1_98f8, %v1_98fc
  store i1 %v9_98fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_98f8, i32* %stack_var_-44, align 4
  %v6_9904 = icmp slt i32 %v1_98f8, %v1_98fc
  br i1 %v6_9904, label %dec_label_pc_9788, label %dec_label_pc_9774

dec_label_pc_990c:                                ; preds = %dec_label_pc_9788
  %v1_990c = add i32 %v2_9790, 16
  %v2_990c = inttoptr i32 %v1_990c to i32*
  %v3_990c = load i32, i32* %v2_990c, align 4
  store i32 %v3_990c, i32* %r4.global-to-local, align 4
  %v0_9910 = call i32 @function_dd14()
  store i32 %v0_9910, i32* %r0.global-to-local, align 4
  %v3_9914 = load i32, i32* %stack_var_-44, align 4
  %v5_991c = mul i32 %v3_9914, 24
  %v0_9920 = load i32, i32* %r4.global-to-local, align 4
  %v1_9920 = and i32 %v0_9920, 16711680
  store i32 %v1_9920, i32* %ip.global-to-local, align 4
  %v3_9924 = udiv i32 %v0_9920, 16777216
  %v4_9928 = udiv i32 %v1_9920, 256
  %v5_9928 = or i32 %v4_9928, %v3_9924
  store i32 %v5_9928, i32* %r2.global-to-local, align 4
  %v1_992c = load i32, i32* @sb, align 4
  %v2_992c = add i32 %v1_992c, %v5_991c
  store i32 %v2_992c, i32* %r1.global-to-local, align 4
  %v1_9930 = and i32 %v0_9920, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_9930, i32* %r3.global-to-local, align 4
  %v1_9934 = add i32 %v2_992c, 20
  %v2_9934 = inttoptr i32 %v1_9934 to i8*
  %v3_9934 = load i8, i8* %v2_9934, align 1
  %v4_9934 = zext i8 %v3_9934 to i32
  store i32 %v4_9934, i32* %ip.global-to-local, align 4
  %v4_9938 = mul i32 %v1_9930, 256
  %v4_993c = mul i32 %v0_9920, 16777216
  %v5_9938 = or i32 %v4_9938, %v4_993c
  %v5_993c = or i32 %v5_9938, %v5_9928
  %v7_9940 = lshr i32 %v0_9910, %v4_9934
  %v8_9940 = add i32 %v7_9940, %v5_993c
  store i32 %v8_9940, i32* %r2.global-to-local, align 4
  %v1_9944 = and i32 %v8_9940, 16711680
  store i32 %v1_9944, i32* %r0.global-to-local, align 4
  store i32 %v5_94d4, i32* %r1.global-to-local, align 4
  %v5_995c = call i32 @llvm.bswap.i32(i32 %v8_9940)
  store i32 %v5_995c, i32* %r3.global-to-local, align 4
  store i1 %v7_97b8, i1* %cpsr_z.global-to-local, align 1
  %v1_9964 = load i32, i32* @r5, align 4
  %v2_9964 = add i32 %v1_9964, 16
  %v3_9964 = inttoptr i32 %v2_9964 to i32*
  store i32 %v5_995c, i32* %v3_9964, align 4
  br i1 %v2_97b8, label %dec_label_pc_996c, label %dec_label_pc_97c0

dec_label_pc_996c:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97b4
  %v0_996c = call i32 @function_dd14()
  store i32 %v0_996c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9978 = load i32, i32* @fp, align 4
  %v9_9978 = icmp eq i32 %v0_9978, 65535
  store i1 %v9_9978, i1* %cpsr_z.global-to-local, align 1
  %v1_997c = load i32, i32* @r5, align 4
  %v2_997c = add i32 %v1_997c, 12
  %v3_997c = inttoptr i32 %v2_997c to i32*
  store i32 %v0_996c, i32* %v3_997c, align 4
  br i1 %v9_9978, label %dec_label_pc_9984, label %dec_label_pc_996c.dec_label_pc_97d0_crit_edge

dec_label_pc_996c.dec_label_pc_97d0_crit_edge:    ; preds = %dec_label_pc_996c
  %v1_97d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_97d0

dec_label_pc_9984:                                ; preds = %dec_label_pc_996c, %dec_label_pc_97c0
  %v0_9984 = call i32 @function_dd14()
  %v3_998c = urem i32 %v0_9984, 65536
  store i32 %v3_998c, i32* %r0.global-to-local, align 4
  store i32 %v3_9534, i32* %r2.global-to-local, align 4
  %v1_9998 = sub nsw i32 999, %v3_998c
  store i32 %v1_9998, i32* %r3.global-to-local, align 4
  %v1_999c = load i32, i32* %r4.global-to-local, align 4
  %v9_999c = icmp eq i32 %v3_9534, %v1_999c
  store i1 %v9_999c, i1* %cpsr_z.global-to-local, align 1
  %v1_99a0 = trunc i32 %v0_9984 to i16
  %v2_99a0 = load i32, i32* @r5, align 4
  %v3_99a0 = add i32 %v2_99a0, 4
  %v4_99a0 = inttoptr i32 %v3_99a0 to i16*
  store i16 %v1_99a0, i16* %v4_99a0, align 2
  %v0_99a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_99a4 = trunc i32 %v0_99a4 to i16
  %v2_99a4 = load i32, i32* @r6, align 4
  %v3_99a4 = add i32 %v2_99a4, 4
  %v4_99a4 = inttoptr i32 %v3_99a4 to i16*
  store i16 %v1_99a4, i16* %v4_99a4, align 2
  br i1 %v9_999c, label %dec_label_pc_99ac, label %dec_label_pc_9984.dec_label_pc_97dc_crit_edge

dec_label_pc_9984.dec_label_pc_97dc_crit_edge:    ; preds = %dec_label_pc_9984
  %v1_97e0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_97dc

dec_label_pc_99ac:                                ; preds = %dec_label_pc_9984, %dec_label_pc_97d0
  %v0_99ac = call i32 @function_dd14()
  %v1_99ac = trunc i32 %v0_99ac to i16
  store i32 %v0_99ac, i32* %r0.global-to-local, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_99b4 = load i32, i32* %r4.global-to-local, align 4
  %v9_99b4 = icmp eq i32 %v3_9538, %v1_99b4
  store i1 %v9_99b4, i1* %cpsr_z.global-to-local, align 1
  %v3_99b8 = load i32, i32* @r5, align 4
  %v4_99b8 = add i32 %v3_99b8, 58
  %v5_99b8 = inttoptr i32 %v4_99b8 to i16*
  store i16 %v1_99ac, i16* %v5_99b8, align 2
  br i1 %v9_99b4, label %dec_label_pc_99c0, label %dec_label_pc_97e8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_97dc
  %v0_99c0 = call i32 @function_dd14()
  %v1_99c0 = trunc i32 %v0_99c0 to i16
  store i32 %v0_99c0, i32* %r0.global-to-local, align 4
  store i32 %v1_952c, i32* @r4, align 4
  store i1 %v2_99c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99c8, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_99c0
  %v3_99d032 = load i32, i32* @r8, align 4
  %v4_99d033 = add i32 %v3_99d032, 2
  %v5_99d034 = inttoptr i32 %v4_99d033 to i16*
  store i16 %v1_99c0, i16* %v5_99d034, align 2
  br label %dec_label_pc_99dc

bb88:                                             ; preds = %dec_label_pc_99c0
  %v1_99cc = load i32, i32* @r5, align 4
  %v2_99cc = add i32 %v1_99cc, 16
  %v3_99cc = inttoptr i32 %v2_99cc to i32*
  %v4_99cc = load i32, i32* %v3_99cc, align 4
  store i32 %v4_99cc, i32* %r3.global-to-local, align 4
  %v3_99d0 = load i32, i32* @r8, align 4
  %v4_99d0 = add i32 %v3_99d0, 2
  %v5_99d0 = inttoptr i32 %v4_99d0 to i16*
  store i16 %v1_99c0, i16* %v5_99d0, align 2
  %v1_99d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_99d4 = load i32, i32* @r6, align 4
  %v3_99d4 = add i32 %v2_99d4, 16
  %v4_99d4 = inttoptr i32 %v3_99d4 to i32*
  store i32 %v1_99d4, i32* %v4_99d4, align 4
  br label %dec_label_pc_97fc

dec_label_pc_99dc:                                ; preds = %.thread31, %dec_label_pc_97e8
  %v0_99dc = call i32 @function_dd14()
  store i32 %v0_99dc, i32* %r0.global-to-local, align 4
  %v1_99e0 = load i32, i32* @r6, align 4
  %v2_99e0 = add i32 %v1_99e0, 16
  %v3_99e0 = inttoptr i32 %v2_99e0 to i32*
  store i32 %v0_99dc, i32* %v3_99e0, align 4
  br label %dec_label_pc_97fc

dec_label_pc_99e8:                                ; preds = %dec_label_pc_97fc
  %v0_99e8 = load i32, i32* @r8, align 4
  %v1_99e8 = add i32 %v0_99e8, 8
  store i32 %v1_99e8, i32* %r0.global-to-local, align 4
  store i32 %v5_9480, i32* %r1.global-to-local, align 4
  %v2_99f0 = inttoptr i32 %v1_99e8 to i16*
  %v3_99f0 = call i32 @function_dea8(i16* %v2_99f0, i32 %v5_9480)
  store i32 %v3_99f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9860

dec_label_pc_99f8:                                ; preds = %dec_label_pc_94f8
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  %v1_99fc = call i32 @function_109c0(i32 %v3_94e8)
  store i32 %v1_99fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a00

dec_label_pc_9a00:                                ; preds = %dec_label_pc_9398, %dec_label_pc_99f8
  %v1_9a08 = phi i32 [ %v3_94e8, %dec_label_pc_9398 ], [ %v1_99fc, %dec_label_pc_99f8 ]
  store i32 %v3_9398, i32* %r4.global-to-local, align 4
  store i32 %v6_9398, i32* %r5.global-to-local, align 4
  store i32 %v24_9398, i32* %fp.global-to-local, align 4
  ret i32 %v1_9a08

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_9520
  %v1_9a14 = add i32 %v5_9480, 8
  store i32 %v1_9a14, i32* %r1.global-to-local, align 4
  %v1_9a18 = add i32 %v5_9480, 66
  store i32 %v1_9a18, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9774.preheader

; uselistorder directives
  uselistorder i32 %v1_9a18, { 1, 0 }
  uselistorder i32 %v1_9a14, { 1, 0 }
  uselistorder i16 %v1_99c0, { 1, 0 }
  uselistorder i32 %v0_99c0, { 1, 0 }
  uselistorder i32 %v0_99ac, { 1, 0 }
  uselistorder i32 %v3_998c, { 1, 0 }
  uselistorder i32 %v0_9984, { 1, 0 }
  uselistorder i32 %v5_995c, { 1, 0 }
  uselistorder i32 %v0_9920, { 0, 2, 1, 3 }
  uselistorder i32 %v1_98fc, { 1, 2, 0 }
  uselistorder i32 %v1_98f8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_98ac, { 1, 0, 2 }
  uselistorder i32 %v4_98a8, { 1, 0 }
  uselistorder i32 %v0_9894, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9888, { 1, 0 }
  uselistorder i32 %v7_979c, { 2, 1, 0, 3 }
  uselistorder i1 %v7_97b8, { 2, 1, 0 }
  uselistorder i1 %v2_99c8, { 2, 3, 1, 0 }
  uselistorder i32 %v0_970c, { 1, 0, 2 }
  uselistorder i32 %v3_9588, { 1, 0 }
  uselistorder i32 %v3_956c, { 1, 2, 0 }
  uselistorder i32 %v1_9568, { 1, 0 }
  uselistorder i32 %v1_952c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9528, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9524, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9520, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9518, { 1, 0 }
  uselistorder i1 %v7_94ec, { 1, 0 }
  uselistorder i32 %v3_94e8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_94d4, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_94a0, { 1, 2, 0 }
  uselistorder i32 %v5_9480, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_9434, { 1, 0 }
  uselistorder i32 %v1_9410, { 2, 1, 0 }
  uselistorder i32 %v5_9408, { 1, 0 }
  uselistorder i8 %v5_93ec, { 0, 2, 1 }
  uselistorder i32 %v6_93cc, { 1, 0 }
  uselistorder i32 %v2_93b4, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 28, 27, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 21, 22, 24, 23, 27, 25, 26, 30, 28, 29, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9a00, { 1, 0 }
  uselistorder label %dec_label_pc_9860, { 1, 0 }
  uselistorder label %dec_label_pc_97fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9774, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9774.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @function_9a2c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9a2c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9a2c = load i32, i32* @r4, align 4
  %v6_9a2c = load i32, i32* @r5, align 4
  %v24_9a2c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_9a48 = call i32 @function_11cd0(i32 %arg1, i32 4)
  %v0_9a4c = load i32, i32* @r5, align 4
  store i32 %v0_9a4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9a5c = load i32, i32* @r4, align 4
  %v5_9a60 = inttoptr i32 %v0_9a4c to i32*
  %v6_9a60 = call i32 @function_8570(i32 %v0_9a5c, i32* %v5_9a60, i32 2, i32 0)
  %v1_9a6c = urem i32 %v6_9a60, 256
  store i32 %v1_9a6c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9a78 = load i32, i32* @r5, align 4
  store i32 %v0_9a78, i32* %r1.global-to-local, align 4
  %v0_9a7c = load i32, i32* @r4, align 4
  %v5_9a80 = trunc i32 %v6_9a60 to i8
  %v6_9a84 = inttoptr i32 %v0_9a78 to i32*
  %v7_9a84 = call i32 @function_8570(i32 %v0_9a7c, i32* %v6_9a84, i32 3, i32 65535)
  %v0_9a88 = load i32, i32* @r5, align 4
  store i32 %v0_9a88, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9a84, i32* %fp.global-to-local, align 4
  %v0_9a98 = load i32, i32* @r4, align 4
  %v4_9a9c = inttoptr i32 %v0_9a88 to i32*
  %v5_9a9c = call i32 @function_8570(i32 %v0_9a98, i32* %v4_9a9c, i32 4, i32 64)
  %v1_9aa4 = urem i32 %v5_9a9c, 256
  store i32 %v1_9aa4, i32* %ip.global-to-local, align 4
  %v0_9aa8 = load i32, i32* @r5, align 4
  store i32 %v0_9aa8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ab4 = load i32, i32* @r4, align 4
  %v6_9abc = inttoptr i32 %v0_9aa8 to i32*
  %v7_9abc = call i32 @function_8570(i32 %v0_9ab4, i32* %v6_9abc, i32 5, i32 1)
  %v1_9ac8 = urem i32 %v7_9abc, 256
  store i32 %v1_9ac8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9ad4 = load i32, i32* @r5, align 4
  store i32 %v0_9ad4, i32* %r1.global-to-local, align 4
  %v0_9ad8 = load i32, i32* @r4, align 4
  %v5_9ae0 = inttoptr i32 %v0_9ad4 to i32*
  %v6_9ae0 = call i32 @function_8570(i32 %v0_9ad8, i32* %v5_9ae0, i32 6, i32 65535)
  %v0_9ae8 = load i32, i32* @r5, align 4
  store i32 %v0_9ae8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9ae0, i32* @r8, align 4
  %v0_9af8 = load i32, i32* @r4, align 4
  %v4_9afc = inttoptr i32 %v0_9ae8 to i32*
  %v5_9afc = call i32 @function_8570(i32 %v0_9af8, i32* %v4_9afc, i32 7, i32 65535)
  %v0_9b00 = load i32, i32* @r5, align 4
  store i32 %v0_9b00, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9afc, i32* @r7, align 4
  %v0_9b10 = load i32, i32* @r4, align 4
  %v4_9b14 = inttoptr i32 %v0_9b00 to i32*
  %v5_9b14 = call i32 @function_8570(i32 %v0_9b10, i32* %v4_9b14, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9b24 = load i32, i32* @r5, align 4
  store i32 %v0_9b24, i32* %r1.global-to-local, align 4
  %v0_9b28 = load i32, i32* @r4, align 4
  %v4_9b2c = inttoptr i32 %v0_9b24 to i32*
  %v5_9b2c = call i32 @function_8570(i32 %v0_9b28, i32* %v4_9b2c, i32 1, i32 1)
  %v1_9b34 = urem i32 %v5_9b2c, 256
  store i32 %v1_9b34, i32* %ip.global-to-local, align 4
  %v0_9b38 = load i32, i32* @r5, align 4
  store i32 %v0_9b38, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b44 = load i32, i32* @r4, align 4
  %v5_9b4c = inttoptr i32 %v0_9b38 to i32*
  %v6_9b4c = call i32 @function_8570(i32 %v0_9b44, i32* %v5_9b4c, i32 19, i32 0)
  %v0_9b54 = load i32, i32* @r5, align 4
  store i32 %v0_9b54, i32* %r1.global-to-local, align 4
  %v2_9b58 = load i32, i32* @global_var_205a0.46, align 4
  store i32 %v2_9b58, i32* %r3.global-to-local, align 4
  store i32 %v6_9b4c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9b64 = load i32, i32* @r4, align 4
  %v4_9b68 = inttoptr i32 %v0_9b54 to i32*
  %v5_9b68 = call i32 @function_8570(i32 %v0_9b64, i32* %v4_9b68, i32 25, i32 %v2_9b58)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9b7c = call i32 @function_11168(i32 2, i32 3, i32 6)
  %v7_9b80 = icmp eq i32 %v3_9b7c, -1
  store i1 %v7_9b80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b80, label %dec_label_pc_a020, label %dec_label_pc_9b8c

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9a2c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9b94 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9b94, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9ba8 = call i32 @function_11124(i32 %v3_9b7c, i32 0, i32 3, i32 %v6_9b94, i32 4)
  %v7_9bac = icmp eq i32 %v5_9ba8, -1
  store i1 %v7_9bac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bac, label %dec_label_pc_a018, label %dec_label_pc_9bb4

dec_label_pc_9bb4:                                ; preds = %dec_label_pc_9b8c
  %v0_9bb4 = load i32, i32* @r8, align 4
  %v0_9bb8 = load i32, i32* @r7, align 4
  %v0_9bbc = load i32, i32* %fp.global-to-local, align 4
  %v0_9bc0 = load i32, i32* @r6, align 4
  %v1_9bc0 = urem i32 %v0_9bc0, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9bc8 = urem i32 %v0_9bb4, 65536
  store i32 %v3_9bc8, i32* %r3.global-to-local, align 4
  %v3_9bcc = urem i32 %v0_9bb8, 65536
  store i32 %v3_9bcc, i32* %r4.global-to-local, align 4
  %v0_9bd0 = load i32, i32* @sl, align 4
  %v2_9bd0 = icmp eq i32 %v0_9bd0, 0
  store i1 %v2_9bd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9be8 = urem i32 %v0_9bbc, 65536
  store i32 %v3_9be8, i32* @fp, align 4
  br i1 %v2_9bd0, label %dec_label_pc_a02c, label %dec_label_pc_9bf8

dec_label_pc_9bf8:                                ; preds = %dec_label_pc_9bb4
  %v3_9bb8 = mul i32 %v0_9bb8, 65536
  %v3_9bb4 = mul i32 %v0_9bb4, 65536
  %v0_9bbc.not = or i32 %v0_9bbc, -65536
  %v1_9bfc = xor i32 %v0_9bbc.not, 65535
  %v3_9c00 = mul i32 %v5_9b14, 65536
  %v1_9c04 = add i32 %v3_9c00, 3407872
  %tmp67 = udiv i32 %v1_9c04, 256
  %v3_9c18 = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9bfc, 256
  %v3_9c1c = and i32 %tmp68, 65280
  store i32 %v3_9c1c, i32* %ip.global-to-local, align 4
  %v1_9c20 = add i32 %v3_9c00, 524288
  %v1_9c28 = add i32 %v3_9c00, 1835008
  %tmp69 = udiv i32 %v1_9bfc, 256
  %v4_9c2c = urem i32 %tmp69, 256
  %v5_9c2c = or i32 %v4_9c2c, %v3_9c1c
  %v4_9c34 = udiv i32 %v1_9c04, 16777216
  %v5_9c34 = or i32 %v3_9c18, %v4_9c34
  store i32 %v5_9c34, i32* @r8, align 4
  %v3_9c40 = udiv i32 %v1_9c28, 256
  %tmp70 = mul i32 %v0_9bbc, 256
  %v3_9c44 = and i32 %tmp70, 65280
  store i32 %v3_9bb4, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9bbc, 256
  %v4_9c54 = urem i32 %tmp71, 256
  %v5_9c54 = or i32 %v4_9c54, %v3_9c44
  %tmp72 = mul i32 %v0_9bb4, 256
  %v3_9c58 = and i32 %tmp72, 65280
  %v1_9c5c = and i32 %v3_9c40, 65280
  store i32 %v1_9c5c, i32* @r6, align 4
  store i32 %v3_9bb8, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_9bb8, 256
  %v3_9c68 = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9bb4, 256
  %v4_9c6c = urem i32 %tmp74, 256
  %v5_9c6c = or i32 %v4_9c6c, %v3_9c58
  store i32 %v5_9c6c, i32* @lr, align 4
  %v4_9c70 = udiv i32 %v1_9c28, 16777216
  %v5_9c70 = or i32 %v1_9c5c, %v4_9c70
  store i32 %v5_9c70, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_9bb8, 256
  %v4_9c74 = urem i32 %tmp75, 256
  %v5_9c74 = or i32 %v4_9c74, %v3_9c68
  %tmp76 = udiv i32 %v1_9c20, 256
  %v3_9c78 = and i32 %tmp76, 65280
  store i32 %v3_9c78, i32* @r5, align 4
  %v4_9c8c = udiv i32 %v1_9c20, 16777216
  %v5_9c8c = or i32 %v3_9c78, %v4_9c8c
  store i32 %v5_9c8c, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9ce0 = sext i8 %v5_9a80 to i32
  %sext12 = mul nuw i32 %v5_9c54, 65536
  %v4_9cf813 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9c70, 65536
  %v4_9d5c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9c2c, 65536
  %v4_9d60 = sdiv i32 %sext9, 65536
  %v1_9d68 = trunc i32 %v4_9d5c to i16
  %v2_9d90 = icmp eq i32 %v1_9bc0, 0
  %sext10 = mul nuw i32 %v5_9c6c, 65536
  %v4_9db0 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9c74, 65536
  %v4_9db8 = sdiv i32 %sext11, 65536
  %v1_9cf0 = trunc i32 %v5_9a9c to i8
  br label %dec_label_pc_9c94

dec_label_pc_9c94:                                ; preds = %bb82, %dec_label_pc_9bf8
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9ca0 = call i32 @function_11cd0(i32 1510, i32 4)
  store i32 %v2_9a48, i32* %r2.global-to-local, align 4
  %v3_9ca8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ca8, i32* %r3.global-to-local, align 4
  %v2_9cac = load i32, i32* @r4, align 4
  %v5_9cac = mul i32 %v2_9cac, 4
  %v6_9cac = add i32 %v5_9cac, %v2_9a48
  %v7_9cac = inttoptr i32 %v6_9cac to i32*
  store i32 %v2_9ca0, i32* %v7_9cac, align 4
  %v0_9cb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cb0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9cb0 = mul i32 %v1_9cb0, 4
  %v5_9cb0 = add i32 %v4_9cb0, %v0_9cb0
  %v6_9cb0 = inttoptr i32 %v5_9cb0 to i32*
  %v7_9cb0 = load i32, i32* %v6_9cb0, align 4
  store i32 %v7_9cb0, i32* %r4.global-to-local, align 4
  %v1_9cb4 = inttoptr i32 %v7_9cb0 to i8*
  %v2_9cb4 = load i8, i8* %v1_9cb4, align 1
  %tmp = urem i8 %v2_9cb4, 16
  %v1_9cb8 = zext i8 %tmp to i32
  %v1_9cbc = or i32 %v1_9cb8, 64
  store i32 %v1_9cbc, i32* %r2.global-to-local, align 4
  %v1_9cc0 = trunc i32 %v1_9cbc to i8
  store i8 %v1_9cc0, i8* %v1_9cb4, align 1
  %v0_9cc4 = load i32, i32* %r3.global-to-local, align 4
  %v5_9cc8 = mul i32 %v0_9cc4, 24
  store i32 %v5_9cc8, i32* %r1.global-to-local, align 4
  %v0_9ccc = load i32, i32* %r4.global-to-local, align 4
  %v1_9ccc = inttoptr i32 %v0_9ccc to i8*
  %v2_9ccc = load i8, i8* %v1_9ccc, align 1
  %v1_9cd0 = and i8 %v2_9ccc, -16
  %v1_9cd4 = or i8 %v1_9cd0, 5
  store i32 %v1_9ac8, i32* %r5.global-to-local, align 4
  store i8 %v1_9cd4, i8* %v1_9ccc, align 1
  store i32 %v4_9ce0, i32* %r2.global-to-local, align 4
  %v2_9ce4 = load i32, i32* %r4.global-to-local, align 4
  %v3_9ce4 = add i32 %v2_9ce4, 1
  %v4_9ce4 = inttoptr i32 %v3_9ce4 to i8*
  store i8 %v5_9a80, i8* %v4_9ce4, align 1
  store i32 %v1_9aa4, i32* %r3.global-to-local, align 4
  %v0_9cec = load i32, i32* %r5.global-to-local, align 4
  %v2_9cec = icmp eq i32 %v0_9cec, 0
  store i1 %v2_9cec, i1* %cpsr_z.global-to-local, align 1
  %v2_9cf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_9cf0 = add i32 %v2_9cf0, 8
  %v4_9cf0 = inttoptr i32 %v3_9cf0 to i8*
  store i8 %v1_9cf0, i8* %v4_9cf0, align 1
  %v0_9cf4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9cf4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9c94
  store i32 %v4_9cf813, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9c94
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_9cf813, i32* %r5.global-to-local, align 4
  %v3_9cfc = load i32, i32* %r4.global-to-local, align 4
  %v4_9cfc = add i32 %v3_9cfc, 6
  %v5_9cfc = inttoptr i32 %v4_9cfc to i16*
  store i16 64, i16* %v5_9cfc, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9d04 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d04 = add i32 %v2_9d04, 9
  %v4_9d04 = inttoptr i32 %v3_9d04 to i8*
  store i8 47, i8* %v4_9d04, align 1
  %v0_9d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d08 = add i32 %v0_9d08, 20
  store i32 %v1_9d08, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9d10 = load i32, i32* %r5.global-to-local, align 4
  %v1_9d10 = trunc i32 %v0_9d10 to i16
  %v3_9d10 = add i32 %v0_9d08, 4
  %v4_9d10 = inttoptr i32 %v3_9d10 to i16*
  store i16 %v1_9d10, i16* %v4_9d10, align 2
  %v0_9d14 = load i32, i32* @r8, align 4
  %v1_9d14 = trunc i32 %v0_9d14 to i16
  %v2_9d14 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d14 = add i32 %v2_9d14, 2
  %v4_9d14 = inttoptr i32 %v3_9d14 to i16*
  store i16 %v1_9d14, i16* %v4_9d14, align 2
  %v0_9d18 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d18 = trunc i32 %v0_9d18 to i16
  %v2_9d18 = load i32, i32* %r2.global-to-local, align 4
  %v3_9d18 = add i32 %v2_9d18, 2
  %v4_9d18 = inttoptr i32 %v3_9d18 to i16*
  store i16 %v1_9d18, i16* %v4_9d18, align 2
  store i32 %v5_9b68, i32* %r3.global-to-local, align 4
  %v0_9d20 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d20 = add i32 %v0_9d20, 24
  %v2_9d20 = inttoptr i32 %v1_9d20 to i8*
  %v3_9d20 = load i8, i8* %v2_9d20, align 1
  %v4_9d20 = zext i8 %v3_9d20 to i32
  store i32 %v4_9d20, i32* %r2.global-to-local, align 4
  %v2_9d24 = add i32 %v0_9d20, 12
  %v3_9d24 = inttoptr i32 %v2_9d24 to i32*
  store i32 %v5_9b68, i32* %v3_9d24, align 4
  %v0_9d28 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d28 = and i32 %v0_9d28, -241
  %v1_9d2c = or i32 %v1_9d28, 64
  store i32 %v1_9d2c, i32* %r2.global-to-local, align 4
  %v0_9d30 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d30 = load i32, i32* @sb, align 4
  %v2_9d30 = add i32 %v1_9d30, %v0_9d30
  store i32 %v2_9d30, i32* %r1.global-to-local, align 4
  %v1_9d34 = add i32 %v2_9d30, 16
  %v2_9d34 = inttoptr i32 %v1_9d34 to i32*
  %v3_9d34 = load i32, i32* %v2_9d34, align 4
  store i32 %v3_9d34, i32* %r1.global-to-local, align 4
  %v1_9d38 = trunc i32 %v1_9d2c to i8
  %v2_9d38 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d38 = add i32 %v2_9d38, 24
  %v4_9d38 = inttoptr i32 %v3_9d38 to i8*
  store i8 %v1_9d38, i8* %v4_9d38, align 1
  %v0_9d3c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d3c, 24
  %v2_9d3c = inttoptr i32 %v1_9d3c to i8*
  %v3_9d3c = load i8, i8* %v2_9d3c, align 1
  %v1_9d40 = and i8 %v3_9d3c, -16
  %v1_9d44 = or i8 %v1_9d40, 5
  store i8 %v1_9d44, i8* %v2_9d3c, align 1
  %v0_9d4c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d4c = load i32, i32* %r4.global-to-local, align 4
  %v2_9d4c = add i32 %v1_9d4c, 16
  %v3_9d4c = inttoptr i32 %v2_9d4c to i32*
  store i32 %v0_9d4c, i32* %v3_9d4c, align 4
  %v0_9d54 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d54 = add i32 %v0_9d54, 24
  store i32 %v1_9d54, i32* @r5, align 4
  %v3_9d58 = add i32 %v0_9d54, 25
  %v4_9d58 = inttoptr i32 %v3_9d58 to i8*
  store i8 %v5_9a80, i8* %v4_9d58, align 1
  store i32 %v4_9d5c, i32* %r2.global-to-local, align 4
  store i32 %v4_9d60, i32* %r3.global-to-local, align 4
  store i32 %v1_9aa4, i32* %r1.global-to-local, align 4
  %v2_9d68 = load i32, i32* @r5, align 4
  %v3_9d68 = add i32 %v2_9d68, 2
  %v4_9d68 = inttoptr i32 %v3_9d68 to i16*
  store i16 %v1_9d68, i16* %v4_9d68, align 2
  %v0_9d6c = load i32, i32* %r3.global-to-local, align 4
  %v1_9d6c = trunc i32 %v0_9d6c to i16
  %v2_9d6c = load i32, i32* @r5, align 4
  %v3_9d6c = add i32 %v2_9d6c, 4
  %v4_9d6c = inttoptr i32 %v3_9d6c to i16*
  store i16 %v1_9d6c, i16* %v4_9d6c, align 2
  %v0_9d70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d70, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9d78 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d78 = trunc i32 %v0_9d78 to i8
  %v2_9d78 = load i32, i32* @r5, align 4
  %v3_9d78 = add i32 %v2_9d78, 8
  %v4_9d78 = inttoptr i32 %v3_9d78 to i8*
  store i8 %v1_9d78, i8* %v4_9d78, align 1
  %v0_9d7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d7c, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9d7c = load i32, i32* %r2.global-to-local, align 4
  %v2_9d7c = trunc i32 %v1_9d7c to i16
  %v3_9d7c = load i32, i32* @r5, align 4
  %v4_9d7c = add i32 %v3_9d7c, 6
  %v5_9d7c = inttoptr i32 %v4_9d7c to i16*
  store i16 %v2_9d7c, i16* %v5_9d7c, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9d80 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d80 = trunc i32 %v0_9d80 to i8
  %v2_9d80 = load i32, i32* @r5, align 4
  %v3_9d80 = add i32 %v2_9d80, 9
  %v4_9d80 = inttoptr i32 %v3_9d80 to i8*
  store i8 %v1_9d80, i8* %v4_9d80, align 1
  %v0_9d84 = call i32 @function_dd14()
  store i32 %v1_9bc0, i32* %r1.global-to-local, align 4
  store i1 %v2_9d90, i1* %cpsr_z.global-to-local, align 1
  %v1_9d94 = sub i32 1023, %v0_9d84
  store i32 %v1_9d94, i32* %r3.global-to-local, align 4
  br i1 %v2_9d90, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9d9c = load i32, i32* @r5, align 4
  %v3_9d9c = add i32 %v2_9d9c, 16
  %v4_9d9c = inttoptr i32 %v3_9d9c to i32*
  store i32 %v1_9d94, i32* %v4_9d9c, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_9d98 = load i32, i32* %r4.global-to-local, align 4
  %v2_9d98 = add i32 %v1_9d98, 16
  %v3_9d98 = inttoptr i32 %v2_9d98 to i32*
  %v4_9d98 = load i32, i32* %v3_9d98, align 4
  store i32 %v4_9d98, i32* %r3.global-to-local, align 4
  %v2_9da0 = load i32, i32* @r5, align 4
  %v3_9da0 = add i32 %v2_9da0, 16
  %v4_9da0 = inttoptr i32 %v3_9da0 to i32*
  store i32 %v4_9d98, i32* %v4_9da0, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9da4 = load i32, i32* @r5, align 4
  %v2_9da4 = add i32 %v1_9da4, 12
  %v3_9da4 = inttoptr i32 %v2_9da4 to i32*
  store i32 %v0_9d84, i32* %v3_9da4, align 4
  %v3_9da8 = load i32, i32* %stack_var_-44, align 4
  %v0_9dac = load i32, i32* %r4.global-to-local, align 4
  %v1_9dac = add i32 %v0_9dac, 44
  store i32 %v1_9dac, i32* @r6, align 4
  store i32 %v4_9db0, i32* %r2.global-to-local, align 4
  %v1_9db4 = add i32 %v3_9da8, 1
  store i32 %v1_9db4, i32* @r4, align 4
  store i32 %v4_9db8, i32* %r3.global-to-local, align 4
  %v1_9dbc = load i32, i32* @sl, align 4
  %v9_9dbc = icmp eq i32 %v1_9db4, %v1_9dbc
  store i1 %v9_9dbc, i1* %cpsr_z.global-to-local, align 1
  %v0_9dc0 = load i32, i32* @r7, align 4
  %v1_9dc0 = trunc i32 %v0_9dc0 to i16
  %v3_9dc0 = add i32 %v0_9dac, 48
  %v4_9dc0 = inttoptr i32 %v3_9dc0 to i16*
  store i16 %v1_9dc0, i16* %v4_9dc0, align 2
  %v0_9dc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_9dc4 = trunc i32 %v0_9dc4 to i16
  %v2_9dc4 = load i32, i32* @r6, align 4
  %v3_9dc4 = inttoptr i32 %v2_9dc4 to i16*
  store i16 %v1_9dc4, i16* %v3_9dc4, align 2
  %v0_9dc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9dc8 = trunc i32 %v0_9dc8 to i16
  %v2_9dc8 = load i32, i32* @r6, align 4
  %v3_9dc8 = add i32 %v2_9dc8, 2
  %v4_9dc8 = inttoptr i32 %v3_9dc8 to i16*
  store i16 %v1_9dc8, i16* %v4_9dc8, align 2
  %v0_9dcc = load i32, i32* @r4, align 4
  store i32 %v0_9dcc, i32* %stack_var_-44, align 4
  %v5_9dd0 = icmp slt i32 %v1_9db4, %v1_9dbc
  br i1 %v5_9dd0, label %dec_label_pc_9c94, label %dec_label_pc_9dd4

dec_label_pc_9dd4:                                ; preds = %bb82
  store i32 %v5_9b14, i32* %r5.global-to-local, align 4
  %v1_9ddc = add i32 %v5_9b14, 8
  store i32 %v1_9ddc, i32* %r4.global-to-local, align 4
  %v0_9dec.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9de8.preheader

dec_label_pc_9de8.preheader:                      ; preds = %dec_label_pc_9dd4, %dec_label_pc_a02c
  %v0_9dec.pre = phi i32 [ %v0_9dec.pre.pre, %dec_label_pc_9dd4 ], [ 0, %dec_label_pc_a02c ]
  %stack_var_-124.0.ph = phi i32 [ %v1_9ddc, %dec_label_pc_9dd4 ], [ %v1_a034, %dec_label_pc_a02c ]
  %storemerge = add i32 %v5_9b14, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_9fe0 = icmp eq i32 %v1_9bc0, 0
  %v2_9ffc = icmp eq i32 %v1_9b34, 0
  %v2_9e28 = icmp eq i32 %v5_9b68, -1
  %v7_9e28 = icmp eq i32 %v5_9b68, -1
  br label %dec_label_pc_9de8

dec_label_pc_9de8:                                ; preds = %dec_label_pc_9de8, %dec_label_pc_9e78, %dec_label_pc_9de8.preheader
  %v0_9dec = phi i32 [ %v0_9dec.pre, %dec_label_pc_9de8.preheader ], [ 0, %dec_label_pc_9de8 ], [ %v1_9f14, %dec_label_pc_9e78 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9dec = icmp eq i32 %v0_9dec, 0
  store i1 %v2_9dec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9dec, label %dec_label_pc_9de8, label %dec_label_pc_9df8

dec_label_pc_9df8:                                ; preds = %dec_label_pc_9de8
  br label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9e78, %dec_label_pc_9df8
  %v1_9e10 = phi i32 [ %v1_9f10, %dec_label_pc_9e78 ], [ 0, %dec_label_pc_9df8 ]
  %v5_9e00 = mul i32 %v1_9e10, 24
  %v1_9e04 = load i32, i32* @sb, align 4
  %v2_9e04 = add i32 %v1_9e04, %v5_9e00
  store i32 %v2_9e04, i32* %r3.global-to-local, align 4
  store i32 %v2_9a48, i32* %r4.global-to-local, align 4
  %v1_9e0c = add i32 %v2_9e04, 20
  %v2_9e0c = inttoptr i32 %v1_9e0c to i8*
  %v3_9e0c = load i8, i8* %v2_9e0c, align 1
  %v4_9e0c = zext i8 %v3_9e0c to i32
  store i32 %v4_9e0c, i32* %r2.global-to-local, align 4
  %v4_9e10 = mul i32 %v1_9e10, 4
  %v5_9e10 = add i32 %v4_9e10, %v2_9a48
  %v6_9e10 = inttoptr i32 %v5_9e10 to i32*
  %v7_9e10 = load i32, i32* %v6_9e10, align 4
  store i32 %v7_9e10, i32* @r5, align 4
  %v7_9e14 = icmp eq i8 %v3_9e0c, 31
  store i1 %v7_9e14, i1* %cpsr_z.global-to-local, align 1
  %v1_9e18 = add i32 %v7_9e10, 24
  store i32 %v1_9e18, i32* @r6, align 4
  %v1_9e1c = add i32 %v7_9e10, 44
  store i32 %v1_9e1c, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9e0c, 32
  br i1 %tmp86, label %dec_label_pc_9f24, label %dec_label_pc_9e24

dec_label_pc_9e24:                                ; preds = %dec_label_pc_9dfc
  store i32 %v5_9b68, i32* %r1.global-to-local, align 4
  store i1 %v7_9e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9e28, label %dec_label_pc_9f84, label %dec_label_pc_9e30

dec_label_pc_9e30:                                ; preds = %dec_label_pc_9f24, %dec_label_pc_9e24
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9e38 = load i32, i32* @fp, align 4
  %v9_9e38 = icmp eq i32 %v0_9e38, 65535
  store i1 %v9_9e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e38, label %dec_label_pc_9f9c, label %dec_label_pc_9e40

dec_label_pc_9e40:                                ; preds = %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge, %dec_label_pc_9e30
  %v1_9e44 = phi i32 [ %v1_9e44.pre, %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge ], [ 65535, %dec_label_pc_9e30 ]
  store i32 %v3_9bc8, i32* %r2.global-to-local, align 4
  %v9_9e44 = icmp eq i32 %v3_9bc8, %v1_9e44
  store i1 %v9_9e44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e44, label %dec_label_pc_9fc4, label %dec_label_pc_9e4c

dec_label_pc_9e4c:                                ; preds = %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge, %dec_label_pc_9e40
  %v1_9e50 = phi i32 [ %v1_9e50.pre, %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge ], [ %v1_9e44, %dec_label_pc_9e40 ]
  store i32 %v3_9bcc, i32* %r3.global-to-local, align 4
  %v9_9e50 = icmp eq i32 %v3_9bcc, %v1_9e50
  store i1 %v9_9e50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e50, label %dec_label_pc_9fd8, label %dec_label_pc_9e58

dec_label_pc_9e58:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e4c
  store i32 %v1_9bc0, i32* @r4, align 4
  store i1 %v2_9fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fe0, label %dec_label_pc_9ff4, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_9e58
  %v1_9e60 = load i32, i32* @r5, align 4
  %v2_9e60 = add i32 %v1_9e60, 16
  %v3_9e60 = inttoptr i32 %v2_9e60 to i32*
  %v4_9e60 = load i32, i32* %v3_9e60, align 4
  store i32 %v4_9e60, i32* %r3.global-to-local, align 4
  %v2_9e64 = load i32, i32* @r6, align 4
  %v3_9e64 = add i32 %v2_9e64, 16
  %v4_9e64 = inttoptr i32 %v3_9e64 to i32*
  store i32 %v4_9e60, i32* %v4_9e64, align 4
  br label %dec_label_pc_9e6c

dec_label_pc_9e6c:                                ; preds = %bb85, %.thread16
  store i32 %v1_9b34, i32* %r1.global-to-local, align 4
  store i1 %v2_9ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ffc, label %dec_label_pc_9e78, label %dec_label_pc_a008

dec_label_pc_9e78:                                ; preds = %dec_label_pc_9e6c, %dec_label_pc_9ff4, %dec_label_pc_a008
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9e7c = load i32, i32* @r5, align 4
  %v3_9e7c = add i32 %v2_9e7c, 10
  %v4_9e7c = inttoptr i32 %v3_9e7c to i16*
  store i16 0, i16* %v4_9e7c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  store i32 %v0_9e84, i32* @r0, align 4
  %v2_9e88 = call i32 @function_c848(i32 %v0_9e84, i32 20)
  %v3_9e88 = trunc i32 %v2_9e88 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9e90 = load i32, i32* @r5, align 4
  %v4_9e90 = add i32 %v3_9e90, 10
  %v5_9e90 = inttoptr i32 %v4_9e90 to i16*
  store i16 %v3_9e88, i16* %v5_9e90, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9e98 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v0_9e98 to i16
  %v2_9e98 = load i32, i32* @r6, align 4
  %v3_9e98 = add i32 %v2_9e98, 10
  %v4_9e98 = inttoptr i32 %v3_9e98 to i16*
  store i16 %v1_9e98, i16* %v4_9e98, align 2
  %v0_9e9c = load i32, i32* @r6, align 4
  store i32 %v0_9e9c, i32* @r0, align 4
  %v2_9ea0 = call i32 @function_c848(i32 %v0_9e9c, i32 20)
  %v3_9ea0 = trunc i32 %v2_9ea0 to i16
  %v3_9ea4 = load i32, i32* @r6, align 4
  %v4_9ea4 = add i32 %v3_9ea4, 10
  %v5_9ea4 = inttoptr i32 %v4_9ea4 to i16*
  store i16 %v3_9ea0, i16* %v5_9ea4, align 2
  store i32 0, i32* @r4, align 4
  %v0_9eac = load i32, i32* @r7, align 4
  store i32 %v0_9eac, i32* @r1, align 4
  %v1_9eb0 = add i32 %v0_9eac, 4
  %v2_9eb0 = inttoptr i32 %v1_9eb0 to i16*
  %v3_9eb0 = load i16, i16* %v2_9eb0, align 2
  %v4_9eb0 = zext i16 %v3_9eb0 to i32
  store i32 %v4_9eb0, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_9eb8 = add i32 %v0_9eac, 6
  %v4_9eb8 = inttoptr i32 %v3_9eb8 to i16*
  store i16 0, i16* %v4_9eb8, align 2
  %v0_9ebc = load i32, i32* @r6, align 4
  %v4_9ec0 = call i32 @function_c898(i32 %v0_9ebc, i32 %v0_9eac, i32 %v4_9eb0, i32 %stack_var_-124.0.ph)
  %v5_9ec0 = trunc i32 %v4_9ec0 to i16
  %v3_9ec4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ec4, i32* %r2.global-to-local, align 4
  %v3_9ec8 = mul i32 %v3_9ec4, 32
  store i32 %v3_9ec8, i32* %r3.global-to-local, align 4
  %v0_9ecc = load i32, i32* @r5, align 4
  %v1_9ecc = add i32 %v0_9ecc, 16
  %v2_9ecc = inttoptr i32 %v1_9ecc to i32*
  %v3_9ecc = load i32, i32* %v2_9ecc, align 4
  %v5_9ed0 = mul i32 %v3_9ec4, 24
  store i32 %v5_9ed0, i32* %r3.global-to-local, align 4
  %v1_9ed4 = load i32, i32* @sb, align 4
  %v2_9ed4 = add i32 %v1_9ed4, %v5_9ed0
  store i32 %v2_9ed4, i32* @lr, align 4
  %v2_9ed8 = add i32 %v2_9ed4, 4
  %v3_9ed8 = inttoptr i32 %v2_9ed8 to i32*
  store i32 %v3_9ecc, i32* %v3_9ed8, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9ee0 = load i32, i32* @r7, align 4
  %v4_9ee0 = add i32 %v3_9ee0, 6
  %v5_9ee0 = inttoptr i32 %v4_9ee0 to i16*
  store i16 %v5_9ec0, i16* %v5_9ee0, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9ee8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ee8 = trunc i32 %v0_9ee8 to i16
  %v2_9ee8 = load i32, i32* %r3.global-to-local, align 4
  %v3_9ee8 = load i32, i32* @sb, align 4
  %v4_9ee8 = add i32 %v3_9ee8, %v2_9ee8
  %v5_9ee8 = inttoptr i32 %v4_9ee8 to i16*
  store i16 %v1_9ee8, i16* %v5_9ee8, align 2
  %v0_9eec = load i32, i32* @r4, align 4
  %v1_9eec = trunc i32 %v0_9eec to i16
  %v2_9eec = load i32, i32* @lr, align 4
  %v3_9eec = add i32 %v2_9eec, 2
  %v4_9eec = inttoptr i32 %v3_9eec to i16*
  store i16 %v1_9eec, i16* %v4_9eec, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9ef4 = load i32, i32* @r5, align 4
  store i32 %v0_9ef4, i32* %r1.global-to-local, align 4
  %v0_9efc = load i32, i32* @r8, align 4
  store i32 %v0_9efc, i32* %r2.global-to-local, align 4
  %v0_9f00 = load i32, i32* @lr, align 4
  %v0_9f04 = load i32, i32* %ip.global-to-local, align 4
  %v6_9f08 = call i32 @function_110e4(i32 %v3_9b7c, i32 %v0_9ef4, i32 %v0_9efc, i32 16384, i32 %v0_9f00, i32 %v0_9f04)
  %v3_9f0c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f0c, i32* %r3.global-to-local, align 4
  %v1_9f10 = add i32 %v3_9f0c, 1
  %v1_9f14 = load i32, i32* @sl, align 4
  %v9_9f14 = icmp eq i32 %v1_9f10, %v1_9f14
  store i1 %v9_9f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9f10, i32* %stack_var_-44, align 4
  %v6_9f1c = icmp slt i32 %v1_9f10, %v1_9f14
  br i1 %v6_9f1c, label %dec_label_pc_9dfc, label %dec_label_pc_9de8

dec_label_pc_9f24:                                ; preds = %dec_label_pc_9dfc
  %v1_9f24 = add i32 %v2_9e04, 16
  %v2_9f24 = inttoptr i32 %v1_9f24 to i32*
  %v3_9f24 = load i32, i32* %v2_9f24, align 4
  store i32 %v3_9f24, i32* %r4.global-to-local, align 4
  %v0_9f28 = call i32 @function_dd14()
  %v3_9f2c = load i32, i32* %stack_var_-44, align 4
  %v5_9f34 = mul i32 %v3_9f2c, 24
  %v0_9f38 = load i32, i32* %r4.global-to-local, align 4
  %v1_9f38 = and i32 %v0_9f38, 16711680
  store i32 %v1_9f38, i32* %ip.global-to-local, align 4
  %v3_9f3c = udiv i32 %v0_9f38, 16777216
  %v4_9f40 = udiv i32 %v1_9f38, 256
  %v5_9f40 = or i32 %v4_9f40, %v3_9f3c
  store i32 %v5_9f40, i32* %r2.global-to-local, align 4
  %v1_9f44 = load i32, i32* @sb, align 4
  %v2_9f44 = add i32 %v1_9f44, %v5_9f34
  store i32 %v2_9f44, i32* %r1.global-to-local, align 4
  %v1_9f48 = and i32 %v0_9f38, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_9f48, i32* %r3.global-to-local, align 4
  %v1_9f4c = add i32 %v2_9f44, 20
  %v2_9f4c = inttoptr i32 %v1_9f4c to i8*
  %v3_9f4c = load i8, i8* %v2_9f4c, align 1
  %v4_9f4c = zext i8 %v3_9f4c to i32
  store i32 %v4_9f4c, i32* %ip.global-to-local, align 4
  %v4_9f50 = mul i32 %v1_9f48, 256
  %v4_9f54 = mul i32 %v0_9f38, 16777216
  %v5_9f50 = or i32 %v4_9f50, %v4_9f54
  %v5_9f54 = or i32 %v5_9f50, %v5_9f40
  %v7_9f58 = lshr i32 %v0_9f28, %v4_9f4c
  %v8_9f58 = add i32 %v7_9f58, %v5_9f54
  store i32 %v8_9f58, i32* %r2.global-to-local, align 4
  store i32 %v5_9b68, i32* %r1.global-to-local, align 4
  %v5_9f74 = call i32 @llvm.bswap.i32(i32 %v8_9f58)
  store i32 %v5_9f74, i32* %r3.global-to-local, align 4
  store i1 %v7_9e28, i1* %cpsr_z.global-to-local, align 1
  %v1_9f7c = load i32, i32* @r5, align 4
  %v2_9f7c = add i32 %v1_9f7c, 16
  %v3_9f7c = inttoptr i32 %v2_9f7c to i32*
  store i32 %v5_9f74, i32* %v3_9f7c, align 4
  br i1 %v2_9e28, label %dec_label_pc_9f84, label %dec_label_pc_9e30

dec_label_pc_9f84:                                ; preds = %dec_label_pc_9f24, %dec_label_pc_9e24
  %v0_9f84 = call i32 @function_dd14()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9f90 = load i32, i32* @fp, align 4
  %v9_9f90 = icmp eq i32 %v0_9f90, 65535
  store i1 %v9_9f90, i1* %cpsr_z.global-to-local, align 1
  %v1_9f94 = load i32, i32* @r5, align 4
  %v2_9f94 = add i32 %v1_9f94, 12
  %v3_9f94 = inttoptr i32 %v2_9f94 to i32*
  store i32 %v0_9f84, i32* %v3_9f94, align 4
  br i1 %v9_9f90, label %dec_label_pc_9f9c, label %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge

dec_label_pc_9f84.dec_label_pc_9e40_crit_edge:    ; preds = %dec_label_pc_9f84
  %v1_9e44.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e40

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84, %dec_label_pc_9e30
  %v0_9f9c = call i32 @function_dd14()
  %v3_9fa4 = urem i32 %v0_9f9c, 65536
  store i32 %v3_9bc8, i32* %r2.global-to-local, align 4
  %v1_9fb0 = sub nsw i32 999, %v3_9fa4
  store i32 %v1_9fb0, i32* %r3.global-to-local, align 4
  %v1_9fb4 = load i32, i32* %r4.global-to-local, align 4
  %v9_9fb4 = icmp eq i32 %v3_9bc8, %v1_9fb4
  store i1 %v9_9fb4, i1* %cpsr_z.global-to-local, align 1
  %v1_9fb8 = trunc i32 %v0_9f9c to i16
  %v2_9fb8 = load i32, i32* @r5, align 4
  %v3_9fb8 = add i32 %v2_9fb8, 4
  %v4_9fb8 = inttoptr i32 %v3_9fb8 to i16*
  store i16 %v1_9fb8, i16* %v4_9fb8, align 2
  %v0_9fbc = load i32, i32* %r3.global-to-local, align 4
  %v1_9fbc = trunc i32 %v0_9fbc to i16
  %v2_9fbc = load i32, i32* @r6, align 4
  %v3_9fbc = add i32 %v2_9fbc, 4
  %v4_9fbc = inttoptr i32 %v3_9fbc to i16*
  store i16 %v1_9fbc, i16* %v4_9fbc, align 2
  br i1 %v9_9fb4, label %dec_label_pc_9fc4, label %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge

dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge:    ; preds = %dec_label_pc_9f9c
  %v1_9e50.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e4c

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9f9c, %dec_label_pc_9e40
  %v0_9fc4 = call i32 @function_dd14()
  %v1_9fc4 = trunc i32 %v0_9fc4 to i16
  store i32 %v3_9bcc, i32* %r3.global-to-local, align 4
  %v1_9fcc = load i32, i32* %r4.global-to-local, align 4
  %v9_9fcc = icmp eq i32 %v3_9bcc, %v1_9fcc
  store i1 %v9_9fcc, i1* %cpsr_z.global-to-local, align 1
  %v3_9fd0 = load i32, i32* @r5, align 4
  %v4_9fd0 = add i32 %v3_9fd0, 44
  %v5_9fd0 = inttoptr i32 %v4_9fd0 to i16*
  store i16 %v1_9fc4, i16* %v5_9fd0, align 2
  br i1 %v9_9fcc, label %dec_label_pc_9fd8, label %dec_label_pc_9e58

dec_label_pc_9fd8:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e4c
  %v0_9fd8 = call i32 @function_dd14()
  %v1_9fd8 = trunc i32 %v0_9fd8 to i16
  store i32 %v1_9bc0, i32* @r4, align 4
  store i1 %v2_9fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fe0, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_9fd8
  %v3_9fe831 = load i32, i32* @r7, align 4
  %v4_9fe832 = add i32 %v3_9fe831, 2
  %v5_9fe833 = inttoptr i32 %v4_9fe832 to i16*
  store i16 %v1_9fd8, i16* %v5_9fe833, align 2
  br label %dec_label_pc_9ff4

bb85:                                             ; preds = %dec_label_pc_9fd8
  %v1_9fe4 = load i32, i32* @r5, align 4
  %v2_9fe4 = add i32 %v1_9fe4, 16
  %v3_9fe4 = inttoptr i32 %v2_9fe4 to i32*
  %v4_9fe4 = load i32, i32* %v3_9fe4, align 4
  store i32 %v4_9fe4, i32* %r3.global-to-local, align 4
  %v3_9fe8 = load i32, i32* @r7, align 4
  %v4_9fe8 = add i32 %v3_9fe8, 2
  %v5_9fe8 = inttoptr i32 %v4_9fe8 to i16*
  store i16 %v1_9fd8, i16* %v5_9fe8, align 2
  %v1_9fec = load i32, i32* %r3.global-to-local, align 4
  %v2_9fec = load i32, i32* @r6, align 4
  %v3_9fec = add i32 %v2_9fec, 16
  %v4_9fec = inttoptr i32 %v3_9fec to i32*
  store i32 %v1_9fec, i32* %v4_9fec, align 4
  br label %dec_label_pc_9e6c

dec_label_pc_9ff4:                                ; preds = %.thread30, %dec_label_pc_9e58
  %v0_9ff4 = call i32 @function_dd14()
  store i32 %v1_9b34, i32* %r1.global-to-local, align 4
  store i1 %v2_9ffc, i1* %cpsr_z.global-to-local, align 1
  %v1_a000 = load i32, i32* @r6, align 4
  %v2_a000 = add i32 %v1_a000, 16
  %v3_a000 = inttoptr i32 %v2_a000 to i32*
  store i32 %v0_9ff4, i32* %v3_a000, align 4
  br i1 %v2_9ffc, label %dec_label_pc_9e78, label %dec_label_pc_a008

dec_label_pc_a008:                                ; preds = %dec_label_pc_9e6c, %dec_label_pc_9ff4
  %v0_a008 = load i32, i32* @r7, align 4
  %v1_a008 = add i32 %v0_a008, 8
  store i32 %v5_9b14, i32* %r1.global-to-local, align 4
  %v2_a010 = inttoptr i32 %v1_a008 to i16*
  %v3_a010 = call i32 @function_dea8(i16* %v2_a010, i32 %v5_9b14)
  br label %dec_label_pc_9e78

dec_label_pc_a018:                                ; preds = %dec_label_pc_9b8c
  %v1_a01c = call i32 @function_109c0(i32 %v3_9b7c)
  br label %dec_label_pc_a020

dec_label_pc_a020:                                ; preds = %dec_label_pc_9a2c, %dec_label_pc_a018
  %v1_a028 = phi i32 [ %v3_9b7c, %dec_label_pc_9a2c ], [ %v1_a01c, %dec_label_pc_a018 ]
  store i32 %v3_9a2c, i32* %r4.global-to-local, align 4
  store i32 %v6_9a2c, i32* %r5.global-to-local, align 4
  store i32 %v24_9a2c, i32* %fp.global-to-local, align 4
  ret i32 %v1_a028

dec_label_pc_a02c:                                ; preds = %dec_label_pc_9bb4
  store i32 %v5_9b14, i32* %r2.global-to-local, align 4
  %v1_a034 = add i32 %v5_9b14, 8
  store i32 %v1_a034, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9de8.preheader

; uselistorder directives
  uselistorder i32 %v1_a034, { 1, 0 }
  uselistorder i16 %v1_9fd8, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0 }
  uselistorder i32 %v5_9f74, { 1, 0 }
  uselistorder i32 %v0_9f38, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9f14, { 1, 2, 0 }
  uselistorder i32 %v1_9f10, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9ec4, { 1, 0, 2 }
  uselistorder i32 %v0_9eac, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9e10, { 1, 0, 2 }
  uselistorder i1 %v7_9e28, { 2, 1, 0 }
  uselistorder i1 %v2_9ffc, { 2, 3, 1, 0 }
  uselistorder i1 %v2_9fe0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9d84, { 1, 0 }
  uselistorder i32 %v4_9cf813, { 1, 0 }
  uselistorder i32 %v3_9c1c, { 1, 0 }
  uselistorder i32 %v3_9c00, { 1, 2, 0 }
  uselistorder i32 %v1_9bfc, { 1, 0 }
  uselistorder i32 %v1_9bc0, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9bbc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9bb8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9bb4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9bac, { 1, 0 }
  uselistorder i1 %v7_9b80, { 1, 0 }
  uselistorder i32 %v3_9b7c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v5_9b68, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9b34, { 2, 1, 3, 0 }
  uselistorder i32 %v5_9b14, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_9ac8, { 1, 0 }
  uselistorder i32 %v1_9aa4, { 2, 1, 0 }
  uselistorder i32 %v5_9a9c, { 1, 0 }
  uselistorder i8 %v5_9a80, { 0, 2, 1 }
  uselistorder i32 %v6_9a60, { 1, 0 }
  uselistorder i32 %v2_9a48, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 7, 6, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a020, { 1, 0 }
  uselistorder label %dec_label_pc_a008, { 1, 0 }
  uselistorder label %dec_label_pc_9e78, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9de8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9de8.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @function_a048(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a048:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_a048 = load i32, i32* @r4, align 4
  %v27_a048 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a064 = call i32 @function_11cd0(i32 %arg1, i32 4)
  %v0_a068 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a064, i32* @fp, align 4
  %v0_a078 = load i32, i32* @r4, align 4
  %v4_a07c = inttoptr i32 %v0_a068 to i32*
  %v5_a07c = call i32 @function_8570(i32 %v0_a078, i32* %v4_a07c, i32 2, i32 0)
  %v1_a088 = urem i32 %v5_a07c, 256
  store i32 %v1_a088, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a094 = load i32, i32* @r4, align 4
  %v0_a098 = load i32, i32* @r5, align 4
  %v5_a09c = trunc i32 %v5_a07c to i8
  %v6_a0a0 = inttoptr i32 %v0_a098 to i32*
  %v7_a0a0 = call i32 @function_8570(i32 %v0_a094, i32* %v6_a0a0, i32 3, i32 65535)
  %v0_a0a4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0a0, i32* @r7, align 4
  %v0_a0b4 = load i32, i32* @r4, align 4
  %v4_a0b8 = inttoptr i32 %v0_a0a4 to i32*
  %v5_a0b8 = call i32 @function_8570(i32 %v0_a0b4, i32* %v4_a0b8, i32 4, i32 64)
  %v1_a0c0 = urem i32 %v5_a0b8, 256
  store i32 %v1_a0c0, i32* %ip.global-to-local, align 4
  %v0_a0c4 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0d0 = load i32, i32* @r4, align 4
  %v6_a0d8 = inttoptr i32 %v0_a0c4 to i32*
  %v7_a0d8 = call i32 @function_8570(i32 %v0_a0d0, i32* %v6_a0d8, i32 5, i32 0)
  %v1_a0e4 = urem i32 %v7_a0d8, 256
  store i32 %v1_a0e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a0f0 = load i32, i32* @r4, align 4
  %v0_a0f4 = load i32, i32* @r5, align 4
  %v5_a0fc = inttoptr i32 %v0_a0f4 to i32*
  %v6_a0fc = call i32 @function_8570(i32 %v0_a0f0, i32* %v5_a0fc, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a10c = load i32, i32* @r5, align 4
  store i32 %v6_a0fc, i32* @r6, align 4
  %v0_a114 = load i32, i32* @r4, align 4
  %v4_a118 = inttoptr i32 %v0_a10c to i32*
  %v5_a118 = call i32 @function_8570(i32 %v0_a114, i32* %v4_a118, i32 7, i32 27015)
  store i32 %v5_a118, i32* @r4, align 4
  %v1_a124 = call i32 @function_f9c0(i32 20)
  %v3_a130 = call i32 @function_f8fc(i32 20, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a144 = call i32 @function_11168(i32 2, i32 3, i32 17)
  %v7_a148 = icmp eq i32 %v3_a144, -1
  store i1 %v7_a148, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a144, i32* @sb, align 4
  br i1 %v7_a148, label %dec_label_pc_a470, label %dec_label_pc_a154

dec_label_pc_a154:                                ; preds = %dec_label_pc_a048
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a15c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a15c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a170 = call i32 @function_11124(i32 %v3_a144, i32 0, i32 3, i32 %v6_a15c, i32 ptrtoint (i32* @0 to i32))
  %v7_a174 = icmp eq i32 %v5_a170, -1
  store i1 %v7_a174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a174, label %dec_label_pc_a468, label %dec_label_pc_a17c

dec_label_pc_a17c:                                ; preds = %dec_label_pc_a154
  %v0_a17c = load i32, i32* @r4, align 4
  %v3_a17c = mul i32 %v0_a17c, 65536
  store i32 %v3_a17c, i32* @lr, align 4
  %v0_a180 = load i32, i32* @r7, align 4
  %v0_a184 = load i32, i32* @r6, align 4
  %v3_a184 = mul i32 %v0_a184, 65536
  store i32 %v3_a184, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a18c = urem i32 %v0_a180, 65536
  %v3_a190 = urem i32 %v0_a184, 65536
  store i32 %v3_a190, i32* %r2.global-to-local, align 4
  %v3_a194 = urem i32 %v0_a17c, 65536
  store i32 %v3_a194, i32* %r3.global-to-local, align 4
  %v0_a198 = load i32, i32* @r8, align 4
  %v2_a198 = icmp eq i32 %v0_a198, 0
  store i1 %v2_a198, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a198, label %dec_label_pc_a2d4.preheader, label %dec_label_pc_a1b0

dec_label_pc_a1b0:                                ; preds = %dec_label_pc_a17c
  %tmp34 = mul i32 %v0_a180, 256
  %v3_a1c0 = and i32 %tmp34, 65280
  store i32 %v3_a1c0, i32* %r3.global-to-local, align 4
  %tmp35 = mul i32 %v0_a184, 256
  %v3_a1c4 = and i32 %tmp35, 65280
  store i32 %v3_a1c4, i32* %r2.global-to-local, align 4
  %tmp36 = mul i32 %v0_a17c, 256
  %v3_a1c8 = and i32 %tmp36, 65280
  %tmp37 = udiv i32 %v0_a180, 256
  %v4_a1cc = urem i32 %tmp37, 256
  %v5_a1cc = or i32 %v4_a1cc, %v3_a1c0
  store i32 %v5_a1cc, i32* @r5, align 4
  %tmp38 = udiv i32 %v0_a184, 256
  %v4_a1d0 = urem i32 %tmp38, 256
  %v5_a1d0 = or i32 %v4_a1d0, %v3_a1c4
  store i32 %v5_a1d0, i32* @r6, align 4
  %tmp39 = udiv i32 %v0_a17c, 256
  %v4_a1d4 = urem i32 %tmp39, 256
  %v5_a1d4 = or i32 %v4_a1d4, %v3_a1c8
  store i32 %v5_a1d4, i32* @r7, align 4
  %v1_a25c = trunc i32 %v5_a0b8 to i8
  br label %dec_label_pc_a1d8

dec_label_pc_a1d8:                                ; preds = %.thread, %dec_label_pc_a1b0
  %v2_a1e0 = call i32 @function_11cd0(i32 128, i32 1)
  %v3_a1e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a1e4, i32* %r2.global-to-local, align 4
  %v5_a1ec = mul i32 %v3_a1e4, 24
  store i32 %v5_a1ec, i32* %r3.global-to-local, align 4
  %v1_a1f0 = load i32, i32* @fp, align 4
  %v2_a1f0 = load i32, i32* @r4, align 4
  %v5_a1f0 = mul i32 %v2_a1f0, 4
  %v6_a1f0 = add i32 %v5_a1f0, %v1_a1f0
  %v7_a1f0 = inttoptr i32 %v6_a1f0 to i32*
  store i32 %v2_a1e0, i32* %v7_a1f0, align 4
  %v0_a1f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1f4 = load i32, i32* @sl, align 4
  %v2_a1f4 = add i32 %v1_a1f4, %v0_a1f4
  store i32 %v2_a1f4, i32* %r3.global-to-local, align 4
  %v0_a1f8 = load i32, i32* @fp, align 4
  %v1_a1f8 = load i32, i32* %r2.global-to-local, align 4
  %v4_a1f8 = mul i32 %v1_a1f8, 4
  %v5_a1f8 = add i32 %v4_a1f8, %v0_a1f8
  %v6_a1f8 = inttoptr i32 %v5_a1f8 to i32*
  %v7_a1f8 = load i32, i32* %v6_a1f8, align 4
  store i32 %v7_a1f8, i32* @lr, align 4
  %v1_a200 = inttoptr i32 %v7_a1f8 to i8*
  %v2_a200 = load i8, i8* %v1_a200, align 1
  %tmp = urem i8 %v2_a200, 16
  %v1_a204 = zext i8 %tmp to i32
  %v1_a208 = or i32 %v1_a204, 64
  store i32 %v1_a208, i32* %r3.global-to-local, align 4
  %v1_a210 = trunc i32 %v1_a208 to i8
  store i8 %v1_a210, i8* %v1_a200, align 1
  %v0_a214 = load i32, i32* @lr, align 4
  %v1_a214 = inttoptr i32 %v0_a214 to i8*
  %v2_a214 = load i8, i8* %v1_a214, align 1
  %v1_a218 = and i8 %v2_a214, -16
  %v1_a21c = or i8 %v1_a218, 5
  store i8 %v1_a21c, i8* %v1_a214, align 1
  %v2_a228 = load i32, i32* @lr, align 4
  %v3_a228 = add i32 %v2_a228, 1
  %v4_a228 = inttoptr i32 %v3_a228 to i8*
  store i8 %v5_a09c, i8* %v4_a228, align 1
  %v3_a22c = load i32, i32* %stack_var_-48, align 4
  %v3_a230 = mul i32 %v3_a22c, 65536
  %v1_a234 = add i32 %v3_a230, 2097152
  %v3_a238 = udiv i32 %v1_a234, 256
  %v4_a240 = udiv i32 %v1_a234, 16777216
  %v5_a240 = or i32 %v3_a238, %v4_a240
  %v3_a244 = urem i32 %v3_a22c, 65536
  store i32 %v3_a244, i32* %r2.global-to-local, align 4
  %v1_a248 = trunc i32 %v5_a240 to i16
  %v2_a248 = load i32, i32* @lr, align 4
  %v3_a248 = add i32 %v2_a248, 2
  %v4_a248 = inttoptr i32 %v3_a248 to i16*
  store i16 %v1_a248, i16* %v4_a248, align 2
  %v0_a24c = load i32, i32* %r2.global-to-local, align 4
  %v1_a24c = mul i32 %v0_a24c, 65536
  %v3_a254 = add i32 %v1_a24c, 786432
  store i32 %v3_a254, i32* %r2.global-to-local, align 4
  store i32 %v1_a0e4, i32* %ip.global-to-local, align 4
  %v2_a25c = load i32, i32* @lr, align 4
  %v3_a25c = add i32 %v2_a25c, 8
  %v4_a25c = inttoptr i32 %v3_a25c to i8*
  store i8 %v1_a25c, i8* %v4_a25c, align 1
  %v0_a260 = load i32, i32* %r2.global-to-local, align 4
  %v3_a260 = udiv i32 %v0_a260, 256
  %v1_a264 = and i32 %v3_a260, ptrtoint (i32* @global_var_ff00.21 to i32)
  %v0_a268 = load i32, i32* %ip.global-to-local, align 4
  %v2_a268 = icmp eq i32 %v0_a268, 0
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v4_a26c = udiv i32 %v0_a260, 16777216
  %v5_a26c = or i32 %v1_a264, %v4_a26c
  store i32 %v5_a26c, i32* %ip.global-to-local, align 4
  %v2_a274 = load i32, i32* @lr, align 4
  %v3_a274 = add i32 %v2_a274, 9
  %v4_a274 = inttoptr i32 %v3_a274 to i8*
  store i8 17, i8* %v4_a274, align 1
  store i32 ptrtoint (i32* @global_var_205a0.46 to i32), i32* %r3.global-to-local, align 4
  %v0_a27c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a27c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a1d8
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a280 = load i32, i32* @lr, align 4
  %v4_a280 = add i32 %v3_a280, 6
  %v5_a280 = inttoptr i32 %v4_a280 to i16*
  store i16 64, i16* %v5_a280, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a1d8, %bb
  %v2_a284 = load i32, i32* @global_var_205a0.46, align 4
  %v1_a288 = load i32, i32* @lr, align 4
  %v2_a288 = add i32 %v1_a288, 12
  %v3_a288 = inttoptr i32 %v2_a288 to i32*
  store i32 %v2_a284, i32* %v3_a288, align 4
  store i32 %v2_a1f4, i32* %r2.global-to-local, align 4
  %v1_a290 = add i32 %v2_a1f4, 16
  %v2_a290 = inttoptr i32 %v1_a290 to i32*
  %v3_a290 = load i32, i32* %v2_a290, align 4
  %v1_a294 = load i32, i32* @lr, align 4
  %v2_a294 = add i32 %v1_a294, 16
  %v3_a294 = inttoptr i32 %v2_a294 to i32*
  store i32 %v3_a290, i32* %v3_a294, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_a29c = load i32, i32* @lr, align 4
  %v1_a29c = add i32 %v0_a29c, 20
  store i32 %v1_a29c, i32* %r4.global-to-local, align 4
  %v2_a2a0 = add i32 %v0_a29c, 28
  %v3_a2a0 = inttoptr i32 %v2_a2a0 to i32*
  store i32 -1, i32* %v3_a2a0, align 4
  %v0_a2a4 = load i32, i32* @r5, align 4
  %v1_a2a4 = trunc i32 %v0_a2a4 to i16
  %v2_a2a4 = load i32, i32* @lr, align 4
  %v3_a2a4 = add i32 %v2_a2a4, 4
  %v4_a2a4 = inttoptr i32 %v3_a2a4 to i16*
  store i16 %v1_a2a4, i16* %v4_a2a4, align 2
  %v0_a2a8 = load i32, i32* @lr, align 4
  %v1_a2a8 = add i32 %v0_a2a8, 32
  %v0_a2ac = load i32, i32* %ip.global-to-local, align 4
  %v1_a2ac = trunc i32 %v0_a2ac to i16
  %v2_a2ac = load i32, i32* %r4.global-to-local, align 4
  %v3_a2ac = add i32 %v2_a2ac, 4
  %v4_a2ac = inttoptr i32 %v3_a2ac to i16*
  store i16 %v1_a2ac, i16* %v4_a2ac, align 2
  %v0_a2b0 = load i32, i32* @r7, align 4
  %v1_a2b0 = trunc i32 %v0_a2b0 to i16
  %v2_a2b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a2b0 = add i32 %v2_a2b0, 2
  %v4_a2b0 = inttoptr i32 %v3_a2b0 to i16*
  store i16 %v1_a2b0, i16* %v4_a2b0, align 2
  %v0_a2b4 = load i32, i32* @r6, align 4
  %v1_a2b4 = trunc i32 %v0_a2b4 to i16
  %v2_a2b4 = load i32, i32* @lr, align 4
  %v3_a2b4 = add i32 %v2_a2b4, 20
  %v4_a2b4 = inttoptr i32 %v3_a2b4 to i16*
  store i16 %v1_a2b4, i16* %v4_a2b4, align 2
  %v3_a2b8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a2b8, i32* %r2.global-to-local, align 4
  %v3_a2bc = call i32 @function_ff70(i32 %v1_a2a8, i32 %v3_a130, i32 %v3_a2b8)
  %v3_a2c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a2c0, i32* %r3.global-to-local, align 4
  %v1_a2c4 = add i32 %v3_a2c0, 1
  store i32 %v1_a2c4, i32* @r4, align 4
  %v1_a2c8 = load i32, i32* @r8, align 4
  %v9_a2c8 = icmp eq i32 %v1_a2c4, %v1_a2c8
  store i1 %v9_a2c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a2c4, i32* %stack_var_-44, align 4
  %v5_a2d0 = icmp slt i32 %v1_a2c4, %v1_a2c8
  br i1 %v5_a2d0, label %dec_label_pc_a1d8, label %dec_label_pc_a2d4.preheader

dec_label_pc_a2d4.preheader:                      ; preds = %.thread, %dec_label_pc_a17c
  %v0_a2d8.ph = phi i32 [ 0, %dec_label_pc_a17c ], [ %v1_a2c8, %.thread ]
  %v3_a314 = icmp eq i32 %v3_a18c, 65535
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a3c0, %dec_label_pc_a2d4.preheader
  %v0_a2d8 = phi i32 [ %v0_a2d8.ph, %dec_label_pc_a2d4.preheader ], [ 0, %dec_label_pc_a3c0 ], [ 0, %dec_label_pc_a2d4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a2d8 = icmp eq i32 %v0_a2d8, 0
  store i1 %v2_a2d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a2d8, label %dec_label_pc_a2d4, label %dec_label_pc_a2e4

dec_label_pc_a2e4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a3c0
  br label %dec_label_pc_a2e8

dec_label_pc_a2e8:                                ; preds = %dec_label_pc_a334, %dec_label_pc_a2e4
  %v1_a2f8 = phi i32 [ %v1_a3b0, %dec_label_pc_a334 ], [ 0, %dec_label_pc_a2e4 ]
  %v5_a2ec = mul i32 %v1_a2f8, 24
  %v1_a2f0 = load i32, i32* @sl, align 4
  %v2_a2f0 = add i32 %v1_a2f0, %v5_a2ec
  store i32 %v2_a2f0, i32* %r3.global-to-local, align 4
  %v1_a2f4 = add i32 %v2_a2f0, 20
  %v2_a2f4 = inttoptr i32 %v1_a2f4 to i8*
  %v3_a2f4 = load i8, i8* %v2_a2f4, align 1
  %v4_a2f4 = zext i8 %v3_a2f4 to i32
  store i32 %v4_a2f4, i32* %r2.global-to-local, align 4
  %v0_a2f8 = load i32, i32* @fp, align 4
  %v4_a2f8 = mul i32 %v1_a2f8, 4
  %v5_a2f8 = add i32 %v0_a2f8, %v4_a2f8
  %v6_a2f8 = inttoptr i32 %v5_a2f8 to i32*
  %v7_a2f8 = load i32, i32* %v6_a2f8, align 4
  store i32 %v7_a2f8, i32* @r5, align 4
  %v7_a300 = icmp eq i8 %v3_a2f4, 31
  store i1 %v7_a300, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_a308 = add i32 %v7_a2f8, 20
  store i32 %v1_a308, i32* @r6, align 4
  %tmp40 = icmp ult i8 %v3_a2f4, 32
  br i1 %tmp40, label %dec_label_pc_a3d4, label %dec_label_pc_a310

dec_label_pc_a310:                                ; preds = %dec_label_pc_a2e8
  store i32 %v3_a18c, i32* %r3.global-to-local, align 4
  store i1 %v3_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a314, label %dec_label_pc_a434, label %dec_label_pc_a31c

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a3d4, %dec_label_pc_a310
  %v1_a320 = phi i32 [ %v1_a42c, %dec_label_pc_a3d4 ], [ 65535, %dec_label_pc_a310 ]
  store i32 %v3_a190, i32* %ip.global-to-local, align 4
  %v9_a320 = icmp eq i32 %v3_a190, %v1_a320
  store i1 %v9_a320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a320, label %dec_label_pc_a448, label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a434.dec_label_pc_a328_crit_edge, %dec_label_pc_a31c
  %v1_a32c = phi i32 [ %v1_a32c.pre, %dec_label_pc_a434.dec_label_pc_a328_crit_edge ], [ %v1_a320, %dec_label_pc_a31c ]
  %v9_a32c = icmp eq i32 %v3_a194, %v1_a32c
  store i1 %v9_a32c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a32c, label %dec_label_pc_a45c, label %dec_label_pc_a334

dec_label_pc_a334:                                ; preds = %dec_label_pc_a448, %dec_label_pc_a328, %dec_label_pc_a45c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a338 = load i32, i32* @r5, align 4
  %v3_a338 = add i32 %v2_a338, 10
  %v4_a338 = inttoptr i32 %v3_a338 to i16*
  store i16 0, i16* %v4_a338, align 2
  %v0_a340 = load i32, i32* @r5, align 4
  store i32 %v0_a340, i32* @r0, align 4
  %v2_a344 = call i32 @function_c848(i32 %v0_a340, i32 20)
  %v3_a344 = trunc i32 %v2_a344 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a34c = load i32, i32* @r5, align 4
  %v4_a34c = add i32 %v3_a34c, 10
  %v5_a34c = inttoptr i32 %v4_a34c to i16*
  store i16 %v3_a344, i16* %v5_a34c, align 2
  %v0_a350 = load i32, i32* %r3.global-to-local, align 4
  %v1_a350 = trunc i32 %v0_a350 to i16
  %v2_a350 = load i32, i32* @r6, align 4
  %v3_a350 = add i32 %v2_a350, 6
  %v4_a350 = inttoptr i32 %v3_a350 to i16*
  store i16 %v1_a350, i16* %v4_a350, align 2
  %v3_a354 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a354, i32* %r3.global-to-local, align 4
  %v0_a358 = load i32, i32* @r6, align 4
  store i32 %v0_a358, i32* @r1, align 4
  %v1_a35c = add i32 %v0_a358, 4
  %v2_a35c = inttoptr i32 %v1_a35c to i16*
  %v3_a35c = load i16, i16* %v2_a35c, align 2
  %v4_a35c = zext i16 %v3_a35c to i32
  store i32 %v4_a35c, i32* %r2.global-to-local, align 4
  %v1_a360 = add i32 %v3_a354, 12
  store i32 %v1_a360, i32* %r3.global-to-local, align 4
  %v0_a364 = load i32, i32* @r5, align 4
  %v4_a368 = call i32 @function_c898(i32 %v0_a364, i32 %v0_a358, i32 %v4_a35c, i32 %v1_a360)
  %v5_a368 = trunc i32 %v4_a368 to i16
  %v3_a36c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a36c, i32* %r3.global-to-local, align 4
  %v3_a370 = mul i32 %v3_a36c, 32
  store i32 %v3_a370, i32* %lr.global-to-local, align 4
  %v3_a374 = load i32, i32* @r6, align 4
  %v4_a374 = add i32 %v3_a374, 6
  %v5_a374 = inttoptr i32 %v4_a374 to i16*
  store i16 %v5_a368, i16* %v5_a374, align 2
  %v0_a378 = load i32, i32* %lr.global-to-local, align 4
  %v1_a378 = load i32, i32* %r3.global-to-local, align 4
  %tmp41 = mul i32 %v1_a378, -8
  %v5_a378 = add i32 %v0_a378, %tmp41
  store i32 %v5_a378, i32* %lr.global-to-local, align 4
  %v0_a37c = load i32, i32* @r6, align 4
  %v1_a37c = add i32 %v0_a37c, 2
  %v2_a37c = inttoptr i32 %v1_a37c to i16*
  %v3_a37c = load i16, i16* %v2_a37c, align 2
  %v3_a380 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a380, i32* %r2.global-to-local, align 4
  %v1_a384 = load i32, i32* @sl, align 4
  %v2_a384 = add i32 %v1_a384, %v5_a378
  store i32 %v2_a384, i32* @lr, align 4
  %v3_a388 = add i32 %v2_a384, 2
  %v4_a388 = inttoptr i32 %v3_a388 to i16*
  store i16 %v3_a37c, i16* %v4_a388, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a394 = load i32, i32* @r5, align 4
  %v0_a398 = load i32, i32* %r2.global-to-local, align 4
  %v1_a398 = add i32 %v0_a398, 32
  store i32 %v1_a398, i32* %r2.global-to-local, align 4
  %v0_a39c = load i32, i32* @sb, align 4
  %v0_a3a0 = load i32, i32* @lr, align 4
  %v6_a3a8 = call i32 @function_110e4(i32 %v0_a39c, i32 %v0_a394, i32 %v1_a398, i32 16384, i32 %v0_a3a0, i32 16)
  %v3_a3ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ac, i32* %r3.global-to-local, align 4
  %v1_a3b0 = add i32 %v3_a3ac, 1
  %v1_a3b4 = load i32, i32* @r8, align 4
  %v9_a3b4 = icmp eq i32 %v1_a3b0, %v1_a3b4
  store i1 %v9_a3b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a3b0, i32* %stack_var_-44, align 4
  %v5_a3bc = icmp slt i32 %v1_a3b0, %v1_a3b4
  br i1 %v5_a3bc, label %dec_label_pc_a2e8, label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a334
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a3c4 = icmp eq i32 %v1_a3b4, 0
  store i1 %v2_a3c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a3c4, label %dec_label_pc_a2d4, label %dec_label_pc_a2e4

dec_label_pc_a3d4:                                ; preds = %dec_label_pc_a2e8
  %v1_a3d4 = add i32 %v2_a2f0, 16
  %v2_a3d4 = inttoptr i32 %v1_a3d4 to i32*
  %v3_a3d4 = load i32, i32* %v2_a3d4, align 4
  store i32 %v3_a3d4, i32* @r4, align 4
  %v0_a3d8 = call i32 @function_dd14()
  %v3_a3dc = load i32, i32* %stack_var_-44, align 4
  %v5_a3e4 = mul i32 %v3_a3dc, 24
  %v0_a3e8 = load i32, i32* @r4, align 4
  %v1_a3e8 = and i32 %v0_a3e8, 16711680
  store i32 %v1_a3e8, i32* %ip.global-to-local, align 4
  %v3_a3ec = udiv i32 %v0_a3e8, 16777216
  %v4_a3f0 = udiv i32 %v1_a3e8, 256
  %v5_a3f0 = or i32 %v4_a3f0, %v3_a3ec
  store i32 %v5_a3f0, i32* %r2.global-to-local, align 4
  %v1_a3f4 = load i32, i32* @sl, align 4
  %v2_a3f4 = add i32 %v1_a3f4, %v5_a3e4
  %v1_a3f8 = and i32 %v0_a3e8, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_a3f8, i32* %r3.global-to-local, align 4
  %v1_a3fc = add i32 %v2_a3f4, 20
  %v2_a3fc = inttoptr i32 %v1_a3fc to i8*
  %v3_a3fc = load i8, i8* %v2_a3fc, align 1
  %v4_a3fc = zext i8 %v3_a3fc to i32
  store i32 %v4_a3fc, i32* %ip.global-to-local, align 4
  %v4_a400 = mul i32 %v1_a3f8, 256
  %v4_a404 = mul i32 %v0_a3e8, 16777216
  %v5_a400 = or i32 %v4_a400, %v4_a404
  %v5_a404 = or i32 %v5_a400, %v5_a3f0
  %v7_a408 = lshr i32 %v0_a3d8, %v4_a3fc
  %v8_a408 = add i32 %v7_a408, %v5_a404
  store i32 %v8_a408, i32* %r2.global-to-local, align 4
  %v5_a420 = call i32 @llvm.bswap.i32(i32 %v8_a408)
  %v1_a424 = load i32, i32* @r5, align 4
  %v2_a424 = add i32 %v1_a424, 16
  %v3_a424 = inttoptr i32 %v2_a424 to i32*
  store i32 %v5_a420, i32* %v3_a424, align 4
  store i32 %v3_a18c, i32* %r3.global-to-local, align 4
  %v1_a42c = load i32, i32* @r7, align 4
  %v9_a42c = icmp eq i32 %v3_a18c, %v1_a42c
  store i1 %v9_a42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a42c, label %dec_label_pc_a434, label %dec_label_pc_a31c

dec_label_pc_a434:                                ; preds = %dec_label_pc_a3d4, %dec_label_pc_a310
  %v0_a434 = call i32 @function_dd14()
  %v1_a434 = trunc i32 %v0_a434 to i16
  store i32 %v3_a190, i32* %ip.global-to-local, align 4
  %v1_a43c = load i32, i32* @r7, align 4
  %v9_a43c = icmp eq i32 %v3_a190, %v1_a43c
  store i1 %v9_a43c, i1* %cpsr_z.global-to-local, align 1
  %v3_a440 = load i32, i32* @r5, align 4
  %v4_a440 = add i32 %v3_a440, 4
  %v5_a440 = inttoptr i32 %v4_a440 to i16*
  store i16 %v1_a434, i16* %v5_a440, align 2
  br i1 %v9_a43c, label %dec_label_pc_a448, label %dec_label_pc_a434.dec_label_pc_a328_crit_edge

dec_label_pc_a434.dec_label_pc_a328_crit_edge:    ; preds = %dec_label_pc_a434
  %v1_a32c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a328

dec_label_pc_a448:                                ; preds = %dec_label_pc_a434, %dec_label_pc_a31c
  %v0_a448 = call i32 @function_dd14()
  %v1_a448 = trunc i32 %v0_a448 to i16
  %v1_a450 = load i32, i32* @r7, align 4
  %v9_a450 = icmp eq i32 %v3_a194, %v1_a450
  store i1 %v9_a450, i1* %cpsr_z.global-to-local, align 1
  %v3_a454 = load i32, i32* @r5, align 4
  %v4_a454 = add i32 %v3_a454, 20
  %v5_a454 = inttoptr i32 %v4_a454 to i16*
  store i16 %v1_a448, i16* %v5_a454, align 2
  br i1 %v9_a450, label %dec_label_pc_a45c, label %dec_label_pc_a334

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a448, %dec_label_pc_a328
  %v0_a45c = call i32 @function_dd14()
  %v1_a45c = trunc i32 %v0_a45c to i16
  %v3_a460 = load i32, i32* @r6, align 4
  %v4_a460 = add i32 %v3_a460, 2
  %v5_a460 = inttoptr i32 %v4_a460 to i16*
  store i16 %v1_a45c, i16* %v5_a460, align 2
  br label %dec_label_pc_a334

dec_label_pc_a468:                                ; preds = %dec_label_pc_a154
  %v0_a468 = load i32, i32* @sb, align 4
  %v1_a46c = call i32 @function_109c0(i32 %v0_a468)
  br label %dec_label_pc_a470

dec_label_pc_a470:                                ; preds = %dec_label_pc_a048, %dec_label_pc_a468
  %v1_a478 = phi i32 [ %v3_a144, %dec_label_pc_a048 ], [ %v1_a46c, %dec_label_pc_a468 ]
  store i32 %v3_a048, i32* %r4.global-to-local, align 4
  store i32 %v27_a048, i32* %lr.global-to-local, align 4
  ret i32 %v1_a478

; uselistorder directives
  uselistorder i32 %v1_a42c, { 1, 0 }
  uselistorder i32 %v0_a3e8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a3b0, { 2, 0, 3, 1 }
  uselistorder i32 %v5_a378, { 1, 0 }
  uselistorder i1 %v3_a314, { 1, 0 }
  uselistorder i32 %v1_a2c4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a22c, { 1, 0 }
  uselistorder i32 %v3_a1c4, { 1, 0 }
  uselistorder i32 %v3_a1c0, { 1, 0 }
  uselistorder i32 %v0_a184, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a180, { 1, 0, 2 }
  uselistorder i32 %v0_a17c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a174, { 1, 0 }
  uselistorder i1 %v7_a148, { 1, 0 }
  uselistorder i32 %v3_a144, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a0e4, { 1, 0 }
  uselistorder i32 %v5_a0b8, { 1, 0 }
  uselistorder i32 %v5_a07c, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a470, { 1, 0 }
  uselistorder label %dec_label_pc_a334, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a2e4, { 1, 0 }
  uselistorder label %dec_label_pc_a2d4, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a480(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a480:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_a480 = load i32, i32* @sb, align 4
  %v27_a480 = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a4a0 = call i32 @function_11cd0(i32 %arg1, i32 4)
  %v0_a4a4 = load i32, i32* @r5, align 4
  store i32 %v0_a4a4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4b0 = load i32, i32* @r4, align 4
  store i32 %v0_a4b0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4b8 = inttoptr i32 %v0_a4a4 to i32*
  %v6_a4b8 = call i32 @function_8570(i32 %v0_a4b0, i32* %v5_a4b8, i32 2, i32 0)
  %v1_a4c4 = urem i32 %v6_a4b8, 256
  store i32 %v1_a4c4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a4d0 = load i32, i32* @r4, align 4
  store i32 %v0_a4d0, i32* %r0.global-to-local, align 4
  %v0_a4d4 = load i32, i32* @r5, align 4
  store i32 %v0_a4d4, i32* %r1.global-to-local, align 4
  %v6_a4dc = inttoptr i32 %v0_a4d4 to i32*
  %v7_a4dc = call i32 @function_8570(i32 %v0_a4d0, i32* %v6_a4dc, i32 3, i32 65535)
  %v0_a4e0 = load i32, i32* @r5, align 4
  store i32 %v0_a4e0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r4, align 4
  store i32 %v0_a4ec, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_a4f4 = inttoptr i32 %v0_a4e0 to i32*
  %v6_a4f4 = call i32 @function_8570(i32 %v0_a4ec, i32* %v5_a4f4, i32 4, i32 64)
  %v1_a4fc = urem i32 %v6_a4f4, 256
  store i32 %v1_a4fc, i32* %ip.global-to-local, align 4
  %v0_a500 = load i32, i32* @r5, align 4
  store i32 %v0_a500, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a50c = load i32, i32* @r4, align 4
  store i32 %v0_a50c, i32* %r0.global-to-local, align 4
  %v6_a514 = inttoptr i32 %v0_a500 to i32*
  %v7_a514 = call i32 @function_8570(i32 %v0_a50c, i32* %v6_a514, i32 5, i32 0)
  %v1_a520 = urem i32 %v7_a514, 256
  store i32 %v1_a520, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  %v0_a530 = load i32, i32* @r5, align 4
  store i32 %v0_a530, i32* %r1.global-to-local, align 4
  %v5_a538 = inttoptr i32 %v0_a530 to i32*
  %v6_a538 = call i32 @function_8570(i32 %v0_a52c, i32* %v5_a538, i32 6, i32 65535)
  %v0_a53c = load i32, i32* @r5, align 4
  store i32 %v0_a53c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a548 = load i32, i32* @r4, align 4
  store i32 %v0_a548, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_a550 = inttoptr i32 %v0_a53c to i32*
  %v6_a550 = call i32 @function_8570(i32 %v0_a548, i32* %v5_a550, i32 7, i32 53)
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r1.global-to-local, align 4
  %v0_a560 = load i32, i32* @r4, align 4
  store i32 %v0_a560, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_a56c = inttoptr i32 %v0_a55c to i32*
  %v6_a56c = call i32 @function_8570(i32 %v0_a560, i32* %v5_a56c, i32 9, i32 65535)
  %v0_a570 = load i32, i32* @r5, align 4
  store i32 %v0_a570, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_a57c = load i32, i32* @r4, align 4
  store i32 %v0_a57c, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_a584 = inttoptr i32 %v0_a570 to i32*
  %v6_a584 = call i32 @function_8570(i32 %v0_a57c, i32* %v5_a584, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a590 = load i32, i32* @r5, align 4
  store i32 %v0_a590, i32* %r1.global-to-local, align 4
  store i32 %v6_a584, i32* %sb.global-to-local, align 4
  %v0_a598 = load i32, i32* @r4, align 4
  store i32 %v0_a598, i32* %r0.global-to-local, align 4
  %v4_a59c = inttoptr i32 %v0_a590 to i32*
  %v5_a59c = call i32 @function_8190(i32 %v0_a598, i32* %v4_a59c, i32 8, i32 0)
  store i32 %v5_a59c, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5a8 = call i32 @function_f9c0(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_a5b4 = call i32 @function_f8fc(i32 21, i32* null)
  store i32 %v3_a5b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_a5bc = call i32 @function_105cc(i32 %v3_a5b4, i32 0)
  store i32 %v2_a5bc, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5c8 = call i32 @function_f920(i32 21)
  store i32 %v1_a5c8, i32* %r0.global-to-local, align 4
  %v0_a5cc = load i32, i32* @r4, align 4
  %v1_a5cc = icmp slt i32 %v0_a5cc, 0
  %v2_a5cc = icmp eq i32 %v0_a5cc, 0
  store i1 %v2_a5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_a5cc, label %dec_label_pc_aac4, label %dec_label_pc_a5d4

dec_label_pc_a5d4:                                ; preds = %dec_label_pc_a480
  %v2_a5d8 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_a5d8, i32* @sl, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_a5d8, i32* %r1.global-to-local, align 4
  store i32 %v0_a5cc, i32* %r0.global-to-local, align 4
  %v1_a5e8 = call i32 @function_10758(i32 %v0_a5cc)
  store i32 %v1_a5e8, i32* @r5, align 4
  %v0_a5f0 = load i32, i32* @r4, align 4
  store i32 %v0_a5f0, i32* %r0.global-to-local, align 4
  %v1_a5f4 = call i32 @function_109c0(i32 %v0_a5f0)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a5fc = call i32 @function_f9c0(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_a608 = call i32 @function_f8fc(i32 22, i32* null)
  %v0_a60c = load i32, i32* @r5, align 4
  store i32 %v0_a60c, i32* @r1, align 4
  store i32 %v3_a608, i32* %r2.global-to-local, align 4
  store i32 %v2_a5d8, i32* %r0.global-to-local, align 4
  %v3_a618 = bitcast i32* %stack_var_-2124 to i8*
  %v4_a618 = call i32 @function_10250(i8* %v3_a618, i32 %v0_a60c, i32 %v3_a608)
  store i32 %v4_a618, i32* @r6, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a624 = call i32 @function_f920(i32 22)
  store i32 %v1_a624, i32* %r0.global-to-local, align 4
  %v0_a628 = load i32, i32* @r6, align 4
  %v7_a628 = icmp eq i32 %v0_a628, -1
  store i1 %v7_a628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a628, label %dec_label_pc_aac4, label %dec_label_pc_a630

dec_label_pc_a630:                                ; preds = %dec_label_pc_a5d4
  %v0_a630 = load i32, i32* @r5, align 4
  %v9_a630 = icmp eq i32 %v0_a630, %v0_a628
  store i1 %v9_a630, i1* %cpsr_z.global-to-local, align 1
  %v7_a634 = icmp sgt i32 %v0_a630, %v0_a628
  br i1 %v7_a634, label %dec_label_pc_a638, label %dec_label_pc_aac4

dec_label_pc_a638:                                ; preds = %dec_label_pc_a630
  %v0_a638 = load i32, i32* @sl, align 4
  %v2_a638 = add i32 %v0_a638, %v0_a628
  store i32 %v2_a638, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a664 = add i32 %v0_a630, -1
  br label %dec_label_pc_a65c

dec_label_pc_a648:                                ; preds = %dec_label_pc_a684, %bb103
  %v9_a648 = icmp eq i32 %v1_a664, %v0_a650
  store i1 %v9_a648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a648, label %dec_label_pc_a690, label %dec_label_pc_a650

dec_label_pc_a650:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a648, %bb
  %v0_a68029 = phi i32 [ %v0_a680, %dec_label_pc_a674 ], [ %v0_a68030, %dec_label_pc_a648 ], [ %v0_a680, %bb ]
  %v0_a66025 = phi i32 [ 0, %dec_label_pc_a674 ], [ %v0_a66026, %dec_label_pc_a648 ], [ 0, %bb ]
  %v1_a650 = add i32 %v0_a650, 1
  %v9_a654 = icmp eq i32 %v1_a650, %v0_a630
  store i1 %v9_a654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a654, label %dec_label_pc_aac4, label %dec_label_pc_a65c

dec_label_pc_a65c:                                ; preds = %dec_label_pc_a650, %dec_label_pc_a638
  %v0_a650 = phi i32 [ %v1_a650, %dec_label_pc_a650 ], [ %v0_a628, %dec_label_pc_a638 ]
  %v0_a680 = phi i32 [ %v0_a68029, %dec_label_pc_a650 ], [ 0, %dec_label_pc_a638 ]
  %v0_a660 = phi i32 [ %v0_a66025, %dec_label_pc_a650 ], [ 0, %dec_label_pc_a638 ]
  %v0_a668 = phi i32 [ %v1_a668, %dec_label_pc_a650 ], [ %v2_a638, %dec_label_pc_a638 ]
  %v1_a65c = inttoptr i32 %v0_a668 to i8*
  %v2_a65c = load i8, i8* %v1_a65c, align 1
  %v3_a65c = zext i8 %v2_a65c to i32
  store i32 %v3_a65c, i32* %r3.global-to-local, align 4
  %v2_a660 = icmp eq i32 %v0_a660, 0
  store i1 %v2_a660, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a664, i32* %r0.global-to-local, align 4
  %v1_a668 = add i32 %v0_a668, 1
  store i32 %v1_a668, i32* %r2.global-to-local, align 4
  %v1_a66c = add nsw i32 %v3_a65c, -48
  store i32 %v1_a66c, i32* %r1.global-to-local, align 4
  br i1 %v2_a660, label %dec_label_pc_a674, label %dec_label_pc_a684

dec_label_pc_a674:                                ; preds = %dec_label_pc_a65c
  %v7_a674 = icmp eq i8 %v2_a65c, 9
  store i1 %v7_a674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a674, label %dec_label_pc_a650, label %bb

bb:                                               ; preds = %dec_label_pc_a674
  %v8_a678 = icmp eq i8 %v2_a65c, 32
  store i1 %v8_a678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_a678, label %dec_label_pc_a650, label %dec_label_pc_a680

dec_label_pc_a680:                                ; preds = %bb
  %v1_a680 = add i32 %v0_a680, 1
  store i32 %v1_a680, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a684

dec_label_pc_a684:                                ; preds = %dec_label_pc_a65c, %dec_label_pc_a680
  %v0_a68030 = phi i32 [ %v0_a680, %dec_label_pc_a65c ], [ %v1_a680, %dec_label_pc_a680 ]
  %v0_a66026 = phi i32 [ %v0_a660, %dec_label_pc_a65c ], [ %v1_a680, %dec_label_pc_a680 ]
  %v7_a684 = icmp eq i8 %v2_a65c, 46
  store i1 %v7_a684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a684, label %dec_label_pc_a648, label %bb103

bb103:                                            ; preds = %dec_label_pc_a684
  %v8_a688 = icmp eq i32 %v1_a66c, 9
  store i1 %v8_a688, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_a66c, 10
  br i1 %tmp, label %dec_label_pc_a648, label %dec_label_pc_a690

dec_label_pc_a690:                                ; preds = %dec_label_pc_a648, %bb103
  %v0_a650.lcssa = phi i32 [ %v1_a664, %dec_label_pc_a648 ], [ %v0_a650, %bb103 ]
  %v2_a694 = sub i32 %v0_a650.lcssa, %v0_a628
  store i32 %v2_a694, i32* @r4, align 4
  %v2_a698 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_a638, i32* %r1.global-to-local, align 4
  store i32 %v2_a698, i32* %r0.global-to-local, align 4
  store i32 %v2_a694, i32* %r2.global-to-local, align 4
  %v3_a6a8 = call i32 @function_ff70(i32 %v2_a698, i32 %v2_a638, i32 %v2_a694)
  %v2_a6ac = ptrtoint i32* %stack_var_-40 to i32
  %v1_a6b0 = load i32, i32* @r4, align 4
  %v2_a6b0 = add i32 %v1_a6b0, %v2_a6ac
  store i32 %v2_a6b0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a698, i32* @r0, align 4
  %v3_a6bc = add i32 %v2_a6b0, -36
  %v4_a6bc = inttoptr i32 %v3_a6bc to i8*
  store i8 0, i8* %v4_a6bc, align 1
  %v1_a6c0 = call i32 @function_10f24(i32 %v2_a698)
  store i32 %v1_a6c0, i32* %r0.global-to-local, align 4
  store i32 %v1_a6c0, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_a6c811:                              ; preds = %dec_label_pc_aac4
  unreachable

dec_label_pc_a6c8:                                ; preds = %dec_label_pc_ab2c, %dec_label_pc_ab20, %dec_label_pc_ab10, %dec_label_pc_ab00, %dec_label_pc_a690
  %v1_aafc49 = phi i32 [ %v1_aac8, %dec_label_pc_ab2c ], [ %v1_aac8, %dec_label_pc_ab20 ], [ %v1_aac8, %dec_label_pc_ab10 ], [ %v1_aac8, %dec_label_pc_ab00 ], [ %v1_a6c0, %dec_label_pc_a690 ]
  %v0_a6c8 = load i32, i32* @r7, align 4
  %v2_a6c8 = icmp eq i32 %v0_a6c8, 0
  store i1 %v2_a6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a6c8, label %dec_label_pc_aaf0, label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a6c8
  store i32 %v0_a6c8, i32* %r0.global-to-local, align 4
  %v1_a6d4 = inttoptr i32 %v0_a6c8 to i8*
  %v2_a6d4 = call i32 @function_ff00(i8* %v1_a6d4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_a6d4, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a6e8 = call i32 @function_11168(i32 2, i32 3, i32 17)
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v7_a6ec = icmp eq i32 %v3_a6e8, -1
  store i1 %v7_a6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6ec, label %dec_label_pc_aaf0, label %dec_label_pc_a6f8

dec_label_pc_a6f8:                                ; preds = %dec_label_pc_a6d0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a700 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a700, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a714 = call i32 @function_11124(i32 %v3_a6e8, i32 0, i32 3, i32 %v6_a700, i32 4)
  store i32 %v5_a714, i32* %r0.global-to-local, align 4
  %v7_a718 = icmp eq i32 %v5_a714, -1
  store i1 %v7_a718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a718, label %dec_label_pc_aae8, label %dec_label_pc_a720

dec_label_pc_a720:                                ; preds = %dec_label_pc_a6f8
  %v0_a728 = load i32, i32* %sb.global-to-local, align 4
  %v1_a728 = urem i32 %v0_a728, 256
  store i32 %v1_a728, i32* %sb.global-to-local, align 4
  %v3_a730 = mul i32 %v6_a538, 65536
  store i32 %v3_a730, i32* %r3.global-to-local, align 4
  %v5_a73c = trunc i32 %v0_a728 to i8
  %v0_a740 = load i32, i32* @r8, align 4
  %v2_a740 = icmp eq i32 %v0_a740, 0
  store i1 %v2_a740, i1* %cpsr_z.global-to-local, align 1
  %v3_a744 = urem i32 %v7_a4dc, 65536
  store i32 %v3_a744, i32* %r0.global-to-local, align 4
  %v3_a74c = urem i32 %v6_a538, 65536
  store i32 %v3_a74c, i32* %r2.global-to-local, align 4
  %v3_a750 = mul i32 %v6_a550, 65536
  %v3_a754 = mul i32 %v6_a56c, 65536
  store i32 %v3_a754, i32* %ip.global-to-local, align 4
  br i1 %v2_a740, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_a720
  %v5_a75c = sext i8 %v5_a73c to i32
  store i32 %v5_a75c, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_a720, %bb104
  %v2_a788 = phi i32 [ %v3_a74c, %dec_label_pc_a720 ], [ %v5_a75c, %bb104 ]
  %v3_a768 = urem i32 %v6_a550, 65536
  store i32 %v3_a768, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_a770 = urem i32 %v6_a56c, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_a788 = load i32, i32* @r6, align 4
  br i1 %v2_a740, label %.dec_label_pc_a970.preheader_crit_edge, label %dec_label_pc_a790

.dec_label_pc_a970.preheader_crit_edge:           ; preds = %bb105
  %v3_a788 = add i32 %v1_a788, %v2_a788
  store i32 %v3_a788, i32* @r7, align 4
  %.pre = sext i8 %v5_a73c to i32
  br label %dec_label_pc_a970.preheader

dec_label_pc_a790:                                ; preds = %bb105
  %v2_a790 = add i32 %v1_a788, %v1_a728
  %v3_a794 = mul i32 %v2_a790, 65536
  %v1_a79c = add i32 %v3_a794, 1769472
  %v1_a7a0 = add i32 %v3_a794, 3080192
  %tmp106 = udiv i32 %v1_a7a0, 256
  %v3_a7b4 = and i32 %tmp106, 65280
  %v4_a7c4 = udiv i32 %v1_a7a0, 16777216
  %v5_a7c4 = or i32 %v3_a7b4, %v4_a7c4
  store i32 %v5_a7c4, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_a538 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_a4dc, 256
  %v3_a7d8 = and i32 %tmp107, 65280
  store i32 %v3_a7d8, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_a4dc, 256
  %v4_a7dc = urem i32 %tmp108, 256
  %v5_a7dc = or i32 %v4_a7dc, %v3_a7d8
  store i32 %v5_a7dc, i32* @sb, align 4
  store i32 %v3_a754, i32* %r2.global-to-local, align 4
  store i32 %v3_a750, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_a550, 256
  %v3_a7f0 = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_a56c, 256
  %v3_a7f4 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_a79c, 256
  %v3_a7f8 = and i32 %tmp111, 65280
  store i32 %v3_a7f8, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_a550, 256
  %v4_a7fc = urem i32 %tmp112, 256
  %v5_a7fc = or i32 %v4_a7fc, %v3_a7f0
  store i32 %v5_a7fc, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_a56c, 256
  %v4_a800 = urem i32 %tmp113, 256
  %v5_a800 = or i32 %v4_a800, %v3_a7f4
  store i32 %v5_a800, i32* @r4, align 4
  %v1_a804 = add i32 %v1_a788, 1
  store i32 %v1_a804, i32* %r3.global-to-local, align 4
  %v4_a808 = udiv i32 %v1_a79c, 16777216
  %v5_a808 = or i32 %v4_a808, %tmp111
  store i32 0, i32* @r5, align 4
  %sext = mul i32 %v6_a4b8, 16777216
  %v4_a860 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v6_a4f4, 16777216
  %v4_a86c = sdiv i32 %sext8, 16777216
  %v4_a88c = sext i8 %v5_a73c to i32
  %sext9 = mul nuw i32 %v5_a7fc, 65536
  %v7_a8a0 = sdiv i32 %sext9, 65536
  %sext10 = mul nuw i32 %v5_a800, 65536
  %v4_a8c8 = sdiv i32 %sext10, 65536
  %v1_a868 = trunc i32 %v4_a860 to i8
  %extract.t = trunc i32 %v4_a86c to i8
  %v1_a890 = add nsw i32 %v4_a88c, 41
  %sext120 = mul i32 %v5_a808, 65536
  %v3_a8a0 = sdiv i32 %sext120, 65536
  br label %dec_label_pc_a820

dec_label_pc_a820:                                ; preds = %dec_label_pc_a940, %dec_label_pc_a790
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_a828 = call i32 @function_11cd0(i32 600, i32 1)
  store i32 %v2_a828, i32* %r0.global-to-local, align 4
  store i32 %v2_a4a0, i32* %ip.global-to-local, align 4
  %v3_a830 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a830, i32* %r3.global-to-local, align 4
  %v2_a834 = load i32, i32* @r5, align 4
  %v5_a834 = mul i32 %v2_a834, 4
  %v6_a834 = add i32 %v5_a834, %v2_a4a0
  %v7_a834 = inttoptr i32 %v6_a834 to i32*
  store i32 %v2_a828, i32* %v7_a834, align 4
  %v0_a838 = load i32, i32* %ip.global-to-local, align 4
  %v1_a838 = load i32, i32* %r3.global-to-local, align 4
  %v4_a838 = mul i32 %v1_a838, 4
  %v5_a838 = add i32 %v4_a838, %v0_a838
  %v6_a838 = inttoptr i32 %v5_a838 to i32*
  %v7_a838 = load i32, i32* %v6_a838, align 4
  store i32 %v7_a838, i32* %r1.global-to-local, align 4
  %v1_a83c = inttoptr i32 %v7_a838 to i8*
  %v2_a83c = load i8, i8* %v1_a83c, align 1
  %tmp127 = urem i8 %v2_a83c, 16
  %v1_a840 = zext i8 %tmp127 to i32
  %v1_a844 = or i32 %v1_a840, 64
  store i32 %v1_a844, i32* %r2.global-to-local, align 4
  %v1_a848 = trunc i32 %v1_a844 to i8
  store i8 %v1_a848, i8* %v1_a83c, align 1
  %v0_a84c = load i32, i32* %r1.global-to-local, align 4
  %v1_a84c = inttoptr i32 %v0_a84c to i8*
  %v2_a84c = load i8, i8* %v1_a84c, align 1
  %v3_a84c = zext i8 %v2_a84c to i32
  %v1_a850 = and i32 %v3_a84c, 240
  %v1_a854 = or i32 %v1_a850, 5
  store i32 %v1_a854, i32* %r3.global-to-local, align 4
  store i32 %v1_a520, i32* %lr.global-to-local, align 4
  %v1_a85c = trunc i32 %v1_a854 to i8
  store i8 %v1_a85c, i8* %v1_a84c, align 1
  store i32 %v4_a860, i32* %r0.global-to-local, align 4
  %v0_a864 = load i32, i32* %lr.global-to-local, align 4
  %v2_a864 = icmp eq i32 %v0_a864, 0
  store i1 %v2_a864, i1* %cpsr_z.global-to-local, align 1
  %v2_a868 = load i32, i32* %r1.global-to-local, align 4
  %v3_a868 = add i32 %v2_a868, 1
  %v4_a868 = inttoptr i32 %v3_a868 to i8*
  store i8 %v1_a868, i8* %v4_a868, align 1
  store i32 %v4_a86c, i32* %r2.global-to-local, align 4
  %v0_a870 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a870, label %.thread13, label %bb114

bb114:                                            ; preds = %dec_label_pc_a820
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a874 = load i32, i32* %r1.global-to-local, align 4
  %v4_a874 = add i32 %v3_a874, 6
  %v5_a874 = inttoptr i32 %v4_a874 to i16*
  store i16 64, i16* %v5_a874, align 2
  %v0_a87c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_a87c.pre to i8
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_a820, %bb114
  %v0_a87c.off0 = phi i8 [ %extract.t, %dec_label_pc_a820 ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_a87c = load i32, i32* %r1.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 8
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v0_a87c.off0, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* %r3.global-to-local, align 4
  %v1_a880 = trunc i32 %v0_a880 to i8
  %v2_a880 = load i32, i32* %r1.global-to-local, align 4
  %v3_a880 = add i32 %v2_a880, 9
  %v4_a880 = inttoptr i32 %v3_a880 to i8*
  store i8 %v1_a880, i8* %v4_a880, align 1
  %v2_a888 = load i32, i32* @global_var_205a0.46, align 4
  %v0_a890 = load i32, i32* %r1.global-to-local, align 4
  %v2_a894 = add i32 %v1_a890, %v0_a890
  store i32 %v2_a894, i32* @r4, align 4
  %v2_a898 = add i32 %v0_a890, 12
  %v3_a898 = inttoptr i32 %v2_a898 to i32*
  store i32 %v2_a888, i32* %v3_a898, align 4
  store i32 %v3_a8a0, i32* %r2.global-to-local, align 4
  store i32 %v7_a8a0, i32* %r3.global-to-local, align 4
  %v0_a8a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8a4 = add i32 %v0_a8a4, 20
  store i32 %v1_a8a4, i32* %ip.global-to-local, align 4
  %v0_a8a8 = load i32, i32* @sl, align 4
  %v1_a8a8 = trunc i32 %v0_a8a8 to i16
  %v3_a8a8 = add i32 %v0_a8a4, 2
  %v4_a8a8 = inttoptr i32 %v3_a8a8 to i16*
  store i16 %v1_a8a8, i16* %v4_a8a8, align 2
  %v0_a8ac = load i32, i32* @sb, align 4
  %v1_a8ac = trunc i32 %v0_a8ac to i16
  %v2_a8ac = load i32, i32* %r1.global-to-local, align 4
  %v3_a8ac = add i32 %v2_a8ac, 4
  %v4_a8ac = inttoptr i32 %v3_a8ac to i16*
  store i16 %v1_a8ac, i16* %v4_a8ac, align 2
  %v0_a8b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8b0 = trunc i32 %v0_a8b0 to i16
  %v2_a8b0 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8b0 = add i32 %v2_a8b0, 4
  %v4_a8b0 = inttoptr i32 %v3_a8b0 to i16*
  store i16 %v1_a8b0, i16* %v4_a8b0, align 2
  %v0_a8b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8b4 = trunc i32 %v0_a8b4 to i16
  %v2_a8b4 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8b4 = add i32 %v2_a8b4, 2
  %v4_a8b4 = inttoptr i32 %v3_a8b4 to i16*
  store i16 %v1_a8b4, i16* %v4_a8b4, align 2
  %v2_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8bc = add i32 %v2_a8bc, 20
  %v4_a8bc = inttoptr i32 %v3_a8bc to i16*
  store i16 %rev, i16* %v4_a8bc, align 2
  store i32 %v4_a88c, i32* %ip.global-to-local, align 4
  %v0_a8c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8c4 = add i32 %v0_a8c4, 28
  store i32 %v1_a8c4, i32* %r0.global-to-local, align 4
  store i32 %v4_a8c8, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_a8d4 = add i32 %v0_a8c4, 30
  %v4_a8d4 = inttoptr i32 %v3_a8d4 to i16*
  store i16 1, i16* %v4_a8d4, align 2
  %v0_a8d8 = load i32, i32* @lr, align 4
  %v1_a8d8 = trunc i32 %v0_a8d8 to i16
  %v2_a8d8 = load i32, i32* %r0.global-to-local, align 4
  %v3_a8d8 = add i32 %v2_a8d8, 4
  %v4_a8d8 = inttoptr i32 %v3_a8d8 to i16*
  store i16 %v1_a8d8, i16* %v4_a8d8, align 2
  %v0_a8dc = load i32, i32* %ip.global-to-local, align 4
  %v1_a8dc = trunc i32 %v0_a8dc to i8
  %v2_a8dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8dc = add i32 %v2_a8dc, 40
  %v4_a8dc = inttoptr i32 %v3_a8dc to i8*
  store i8 %v1_a8dc, i8* %v4_a8dc, align 1
  %v0_a8e0 = load i32, i32* @fp, align 4
  %v1_a8e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a8e0 = add i32 %v1_a8e0, 16
  %v3_a8e0 = inttoptr i32 %v2_a8e0 to i32*
  store i32 %v0_a8e0, i32* %v3_a8e0, align 4
  %v0_a8e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8e4 = trunc i32 %v0_a8e4 to i16
  %v2_a8e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8e4 = add i32 %v2_a8e4, 28
  %v4_a8e4 = inttoptr i32 %v3_a8e4 to i16*
  store i16 %v1_a8e4, i16* %v4_a8e4, align 2
  %v0_a8e8 = load i32, i32* @r4, align 4
  %v1_a8e8 = add i32 %v0_a8e8, 1
  store i32 %v1_a8e8, i32* %r0.global-to-local, align 4
  %v0_a8ec = load i32, i32* @r7, align 4
  store i32 %v0_a8ec, i32* %r1.global-to-local, align 4
  store i32 %v1_a804, i32* %r2.global-to-local, align 4
  %v3_a8f4 = call i32 @function_ff70(i32 %v1_a8e8, i32 %v0_a8ec, i32 %v1_a804)
  store i32 %v3_a8f4, i32* %r0.global-to-local, align 4
  %v0_a8f8 = load i32, i32* @r6, align 4
  %v2_a8f8 = icmp eq i32 %v0_a8f8, 0
  store i1 %v2_a8f8, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_a8f8, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_a908

bb116:                                            ; preds = %.thread13
  %v5_a8fc = load i32, i32* @r4, align 4
  store i32 %v5_a8fc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a940

dec_label_pc_a908:                                ; preds = %.thread13
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a90c = load i32, i32* @r4, align 4
  store i32 %v0_a90c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a914

dec_label_pc_a914:                                ; preds = %.thread20, %dec_label_pc_a908
  %v0_a920 = phi i32 [ %storemerge, %.thread20 ], [ 0, %dec_label_pc_a908 ]
  %v0_a924 = phi i32 [ %v0_a938, %.thread20 ], [ 0, %dec_label_pc_a908 ]
  %v1_a914 = load i32, i32* @r7, align 4
  %v2_a914 = add i32 %v1_a914, %v0_a924
  %v3_a914 = inttoptr i32 %v2_a914 to i8*
  %v4_a914 = load i8, i8* %v3_a914, align 1
  %v6_a914 = zext i8 %v4_a914 to i32
  store i32 %v6_a914, i32* %r3.global-to-local, align 4
  %v7_a918 = icmp eq i8 %v4_a914, 46
  store i1 %v7_a918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a918, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_a914
  %v1_a92016 = add nsw i32 %v0_a920, 1
  store i32 %v1_a92016, i32* %r2.global-to-local, align 4
  %v1_a92418 = add i32 %v0_a924, 1
  store i32 %v1_a92418, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_a914
  %v2_a91c = load i32, i32* @r4, align 4
  %v3_a91c = add i32 %v2_a91c, %v0_a924
  store i32 %v3_a91c, i32* %r3.global-to-local, align 4
  %v1_a920 = add nsw i32 %v0_a920, 1
  store i32 %v1_a920, i32* %r2.global-to-local, align 4
  %v1_a924 = add i32 %v0_a924, 1
  store i32 %v1_a924, i32* %r1.global-to-local, align 4
  %v2_a928 = trunc i32 %v0_a920 to i8
  %v3_a928 = load i32, i32* %r0.global-to-local, align 4
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 %v2_a928, i8* %v4_a928, align 1
  %v0_a92c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a92c.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_a92c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_a92c = phi i32 [ %v1_a92c.pre, %bb117.bb118_crit_edge ], [ %v1_a92016, %.thread59 ]
  %v2_a92c = urem i32 %v1_a92c, 256
  br label %.thread20

bb119:                                            ; preds = %bb117
  %v1_a930 = load i32, i32* %r3.global-to-local, align 4
  %v2_a930 = add i32 %v1_a930, 1
  store i32 %v2_a930, i32* %r0.global-to-local, align 4
  br label %.thread20

.thread20:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_a92c, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_a938 = load i32, i32* %r1.global-to-local, align 4
  %v1_a938 = load i32, i32* @r6, align 4
  %v9_a938 = icmp eq i32 %v0_a938, %v1_a938
  store i1 %v9_a938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a938, label %dec_label_pc_a940.loopexit, label %dec_label_pc_a914

dec_label_pc_a940.loopexit:                       ; preds = %.thread20
  %v2_a940.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_a940

dec_label_pc_a940:                                ; preds = %bb116, %dec_label_pc_a940.loopexit
  %v0_a940.off0 = phi i8 [ %extract.t126, %dec_label_pc_a940.loopexit ], [ 0, %bb116 ]
  %v2_a940 = phi i32 [ %v2_a940.pre, %dec_label_pc_a940.loopexit ], [ %v5_a8fc, %bb116 ]
  %v3_a940 = inttoptr i32 %v2_a940 to i8*
  store i8 %v0_a940.off0, i8* %v3_a940, align 1
  %v3_a944 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a944, i32* %r3.global-to-local, align 4
  %v1_a948 = add i32 %v3_a944, 1
  store i32 %v1_a948, i32* @r5, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  %v1_a94c = load i32, i32* @r6, align 4
  %v2_a94c = add i32 %v1_a94c, %v0_a94c
  store i32 %v2_a94c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_a954 = load i32, i32* @r8, align 4
  %v9_a954 = icmp eq i32 %v0_a954, %v1_a948
  store i1 %v9_a954, i1* %cpsr_z.global-to-local, align 1
  %v3_a958 = add i32 %v2_a94c, 4
  %v4_a958 = inttoptr i32 %v3_a958 to i16*
  store i16 256, i16* %v4_a958, align 2
  %v0_a95c = load i32, i32* @lr, align 4
  %v1_a95c = trunc i32 %v0_a95c to i16
  %v2_a95c = load i32, i32* %r2.global-to-local, align 4
  %v3_a95c = add i32 %v2_a95c, 2
  %v4_a95c = inttoptr i32 %v3_a95c to i16*
  store i16 %v1_a95c, i16* %v4_a95c, align 2
  %v0_a960 = load i32, i32* @r5, align 4
  store i32 %v0_a960, i32* %stack_var_-44, align 4
  %v8_a964 = icmp sgt i32 %v0_a954, %v1_a948
  br i1 %v8_a964, label %dec_label_pc_a820, label %dec_label_pc_a968

dec_label_pc_a968:                                ; preds = %dec_label_pc_a940
  store i32 %v4_a88c, i32* %r0.global-to-local, align 4
  %v0_a96c = load i32, i32* @r6, align 4
  %v2_a96c = add i32 %v0_a96c, %v4_a88c
  store i32 %v2_a96c, i32* @r7, align 4
  %v0_a974.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a970.preheader

dec_label_pc_a970.preheader:                      ; preds = %.dec_label_pc_a970.preheader_crit_edge, %dec_label_pc_a968
  %v4_a9d4.pre-phi = phi i32 [ %.pre, %.dec_label_pc_a970.preheader_crit_edge ], [ %v4_a88c, %dec_label_pc_a968 ]
  %v0_a974.pre = phi i32 [ 0, %.dec_label_pc_a970.preheader_crit_edge ], [ %v0_a974.pre.pre, %dec_label_pc_a968 ]
  %v3_a9a0 = icmp eq i32 %v3_a744, 65535
  %v3_a9b0 = icmp eq i32 %v3_a74c, 65535
  br label %dec_label_pc_a970

dec_label_pc_a970:                                ; preds = %dec_label_pc_a970, %dec_label_pc_aa68, %dec_label_pc_a970.preheader
  %v0_a974 = phi i32 [ %v0_a974.pre, %dec_label_pc_a970.preheader ], [ 0, %dec_label_pc_aa68 ], [ 0, %dec_label_pc_a970 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a974 = icmp eq i32 %v0_a974, 0
  store i1 %v2_a974, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a974, label %dec_label_pc_a970, label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %dec_label_pc_a970, %dec_label_pc_aa68
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a984 = load i32, i32* @r7, align 4
  %v1_a984 = add i32 %v0_a984, 27
  store i32 %v1_a984, i32* @sb, align 4
  %v1_a988 = add i32 %v0_a984, 47
  store i32 %v1_a988, i32* @sl, align 4
  br label %dec_label_pc_a98c

dec_label_pc_a98c:                                ; preds = %dec_label_pc_a9d0, %dec_label_pc_a980
  %v1_a998 = phi i32 [ %v1_aa58, %dec_label_pc_a9d0 ], [ 0, %dec_label_pc_a980 ]
  store i32 %v2_a4a0, i32* %r3.global-to-local, align 4
  store i32 %v3_a744, i32* %ip.global-to-local, align 4
  %v4_a998 = mul i32 %v1_a998, 4
  %v5_a998 = add i32 %v4_a998, %v2_a4a0
  %v6_a998 = inttoptr i32 %v5_a998 to i32*
  %v7_a998 = load i32, i32* %v6_a998, align 4
  store i32 %v7_a998, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_a9a0, i1* %cpsr_z.global-to-local, align 1
  %v1_a9a4 = add i32 %v7_a998, 20
  store i32 %v1_a9a4, i32* @r6, align 4
  br i1 %v3_a9a0, label %dec_label_pc_aa7c, label %dec_label_pc_a9ac

dec_label_pc_a9ac:                                ; preds = %dec_label_pc_a98c
  store i32 %v3_a74c, i32* @lr, align 4
  store i1 %v3_a9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9b0, label %dec_label_pc_aa90, label %dec_label_pc_a9b8

dec_label_pc_a9b8:                                ; preds = %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge, %dec_label_pc_a9ac
  %v1_a9bc = phi i32 [ %v1_a9bc.pre, %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge ], [ 65535, %dec_label_pc_a9ac ]
  store i32 %v3_a768, i32* %r0.global-to-local, align 4
  %v9_a9bc = icmp eq i32 %v3_a768, %v1_a9bc
  store i1 %v9_a9bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9bc, label %dec_label_pc_aaa4, label %dec_label_pc_a9c4

dec_label_pc_a9c4:                                ; preds = %dec_label_pc_aa90, %dec_label_pc_a9b8
  %v1_a9c8 = phi i32 [ %v1_aa9c, %dec_label_pc_aa90 ], [ %v1_a9bc, %dec_label_pc_a9b8 ]
  store i32 %v3_a770, i32* %r2.global-to-local, align 4
  %v9_a9c8 = icmp eq i32 %v3_a770, %v1_a9c8
  store i1 %v9_a9c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9c8, label %dec_label_pc_aab8, label %dec_label_pc_a9d0

dec_label_pc_a9d0:                                ; preds = %dec_label_pc_aaa4, %dec_label_pc_a9c4, %dec_label_pc_aab8
  %v0_a9d0 = load i32, i32* @r4, align 4
  %v1_a9d0 = add i32 %v0_a9d0, 41
  store i32 %v1_a9d0, i32* %r0.global-to-local, align 4
  store i32 %v4_a9d4.pre-phi, i32* %r1.global-to-local, align 4
  %v2_a9d8 = call i32 @function_ddd8(i32 %v1_a9d0, i32 %v4_a9d4.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a9e0 = load i32, i32* @r4, align 4
  %v3_a9e0 = add i32 %v2_a9e0, 10
  %v4_a9e0 = inttoptr i32 %v3_a9e0 to i16*
  store i16 0, i16* %v4_a9e0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a9e8 = load i32, i32* @r4, align 4
  store i32 %v0_a9e8, i32* @r0, align 4
  %v2_a9ec = call i32 @function_c848(i32 %v0_a9e8, i32 20)
  %v3_a9ec = trunc i32 %v2_a9ec to i16
  store i32 %v2_a9ec, i32* %r0.global-to-local, align 4
  %v3_a9f0 = load i32, i32* @r4, align 4
  %v4_a9f0 = add i32 %v3_a9f0, 10
  %v5_a9f0 = inttoptr i32 %v4_a9f0 to i16*
  store i16 %v3_a9ec, i16* %v5_a9f0, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a9f8 = load i32, i32* @r6, align 4
  %v3_a9f8 = add i32 %v2_a9f8, 6
  %v4_a9f8 = inttoptr i32 %v3_a9f8 to i16*
  store i16 0, i16* %v4_a9f8, align 2
  %v0_a9fc = load i32, i32* @r6, align 4
  store i32 %v0_a9fc, i32* @r1, align 4
  %v1_aa00 = add i32 %v0_a9fc, 4
  %v2_aa00 = inttoptr i32 %v1_aa00 to i16*
  %v3_aa00 = load i16, i16* %v2_aa00, align 2
  %v4_aa00 = zext i16 %v3_aa00 to i32
  store i32 %v4_aa00, i32* %r2.global-to-local, align 4
  %v0_aa04 = load i32, i32* @sb, align 4
  store i32 %v0_aa04, i32* %r3.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v4_aa0c = call i32 @function_c898(i32 %v0_aa08, i32 %v0_a9fc, i32 %v4_aa00, i32 %v0_aa04)
  %v5_aa0c = trunc i32 %v4_aa0c to i16
  store i32 %v4_aa0c, i32* %r0.global-to-local, align 4
  %v3_aa10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa10, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_aa18 = mul i32 %v3_aa10, 32
  store i32 %v3_aa18, i32* %ip.global-to-local, align 4
  %v3_aa1c = load i32, i32* @r6, align 4
  %v4_aa1c = add i32 %v3_aa1c, 6
  %v5_aa1c = inttoptr i32 %v4_aa1c to i16*
  store i16 %v5_aa0c, i16* %v5_aa1c, align 2
  %v0_aa20 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa20 = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_aa20, -8
  %v5_aa20 = add i32 %v0_aa20, %tmp128
  store i32 %v5_aa20, i32* %ip.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r6, align 4
  %v1_aa24 = add i32 %v0_aa24, 2
  %v2_aa24 = inttoptr i32 %v1_aa24 to i16*
  %v3_aa24 = load i16, i16* %v2_aa24, align 2
  %v1_aa28 = load i32, i32* @lr, align 4
  %v2_aa28 = add i32 %v1_aa28, %v5_aa20
  store i32 %v2_aa28, i32* %ip.global-to-local, align 4
  %v3_aa2c = add i32 %v2_aa28, 2
  %v4_aa2c = inttoptr i32 %v3_aa2c to i16*
  store i16 %v3_aa24, i16* %v4_aa2c, align 2
  %v0_aa30 = load i32, i32* @fp, align 4
  %v1_aa30 = load i32, i32* %ip.global-to-local, align 4
  %v2_aa30 = add i32 %v1_aa30, 4
  %v3_aa30 = inttoptr i32 %v2_aa30 to i32*
  store i32 %v0_aa30, i32* %v3_aa30, align 4
  %v0_aa34 = load i32, i32* @r4, align 4
  store i32 %v0_aa34, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v0_aa40 = load i32, i32* @sl, align 4
  store i32 %v0_aa40, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aa48 = load i32, i32* %ip.global-to-local, align 4
  %v6_aa50 = call i32 @function_110e4(i32 %v3_a6e8, i32 %v0_aa34, i32 %v0_aa40, i32 16384, i32 %v0_aa48, i32 16)
  %v3_aa54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa54, i32* %r3.global-to-local, align 4
  %v1_aa58 = add i32 %v3_aa54, 1
  store i32 %v1_aa58, i32* %r0.global-to-local, align 4
  %v0_aa5c = load i32, i32* @r8, align 4
  %v9_aa5c = icmp eq i32 %v0_aa5c, %v1_aa58
  store i1 %v9_aa5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa58, i32* %stack_var_-44, align 4
  %v8_aa64 = icmp sgt i32 %v0_aa5c, %v1_aa58
  br i1 %v8_aa64, label %dec_label_pc_a98c, label %dec_label_pc_aa68

dec_label_pc_aa68:                                ; preds = %dec_label_pc_a9d0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aa6c = icmp eq i32 %v0_aa5c, 0
  store i1 %v2_aa6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aa6c, label %dec_label_pc_a970, label %dec_label_pc_a980

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_a98c
  %v0_aa7c = call i32 @function_dd14()
  %v1_aa7c = trunc i32 %v0_aa7c to i16
  store i32 %v0_aa7c, i32* %r0.global-to-local, align 4
  store i32 %v3_a74c, i32* @lr, align 4
  %v1_aa84 = load i32, i32* @r5, align 4
  %v9_aa84 = icmp eq i32 %v3_a74c, %v1_aa84
  store i1 %v9_aa84, i1* %cpsr_z.global-to-local, align 1
  %v3_aa88 = load i32, i32* @r4, align 4
  %v4_aa88 = add i32 %v3_aa88, 4
  %v5_aa88 = inttoptr i32 %v4_aa88 to i16*
  store i16 %v1_aa7c, i16* %v5_aa88, align 2
  br i1 %v9_aa84, label %dec_label_pc_aa90, label %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge

dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge:    ; preds = %dec_label_pc_aa7c
  %v1_a9bc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a9b8

dec_label_pc_aa90:                                ; preds = %dec_label_pc_aa7c, %dec_label_pc_a9ac
  %v0_aa90 = call i32 @function_dd14()
  %v1_aa90 = trunc i32 %v0_aa90 to i16
  %v3_aa94 = load i32, i32* @r4, align 4
  %v4_aa94 = add i32 %v3_aa94, 20
  %v5_aa94 = inttoptr i32 %v4_aa94 to i16*
  store i16 %v1_aa90, i16* %v5_aa94, align 2
  store i32 %v3_a768, i32* %r0.global-to-local, align 4
  %v1_aa9c = load i32, i32* @r5, align 4
  %v9_aa9c = icmp eq i32 %v3_a768, %v1_aa9c
  store i1 %v9_aa9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa9c, label %dec_label_pc_aaa4, label %dec_label_pc_a9c4

dec_label_pc_aaa4:                                ; preds = %dec_label_pc_aa90, %dec_label_pc_a9b8
  %v0_aaa4 = call i32 @function_dd14()
  %v1_aaa4 = trunc i32 %v0_aaa4 to i16
  store i32 %v0_aaa4, i32* %r0.global-to-local, align 4
  store i32 %v3_a770, i32* %r2.global-to-local, align 4
  %v1_aaac = load i32, i32* @r5, align 4
  %v9_aaac = icmp eq i32 %v3_a770, %v1_aaac
  store i1 %v9_aaac, i1* %cpsr_z.global-to-local, align 1
  %v3_aab0 = load i32, i32* @r6, align 4
  %v4_aab0 = add i32 %v3_aab0, 2
  %v5_aab0 = inttoptr i32 %v4_aab0 to i16*
  store i16 %v1_aaa4, i16* %v5_aab0, align 2
  br i1 %v9_aaac, label %dec_label_pc_aab8, label %dec_label_pc_a9d0

dec_label_pc_aab8:                                ; preds = %dec_label_pc_aaa4, %dec_label_pc_a9c4
  %v0_aab8 = call i32 @function_dd14()
  %v1_aab8 = trunc i32 %v0_aab8 to i16
  store i32 %v0_aab8, i32* %r0.global-to-local, align 4
  %v3_aabc = load i32, i32* @r4, align 4
  %v4_aabc = add i32 %v3_aabc, 28
  %v5_aabc = inttoptr i32 %v4_aabc to i16*
  store i16 %v1_aab8, i16* %v5_aabc, align 2
  br label %dec_label_pc_a9d0

dec_label_pc_aac4:                                ; preds = %dec_label_pc_a650, %dec_label_pc_a630, %dec_label_pc_a5d4, %dec_label_pc_a480
  %v0_aac4 = call i32 @function_dd14()
  %v1_aac8 = urem i32 %v0_aac4, 4
  store i32 %v1_aac8, i32* %r0.global-to-local, align 4
  %v2_aacc = icmp eq i32 %v1_aac8, 3
  store i1 %v2_aacc, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_aac4 to i2
  switch i2 %trunc, label %dec_label_pc_a6c811 [
    i2 0, label %dec_label_pc_ab00
    i2 1, label %dec_label_pc_ab2c
    i2 -2, label %dec_label_pc_ab20
    i2 -1, label %dec_label_pc_ab10
  ]

dec_label_pc_aae8:                                ; preds = %dec_label_pc_a6f8
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v1_aaec = call i32 @function_109c0(i32 %v3_a6e8)
  store i32 %v1_aaec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aaf0

dec_label_pc_aaf0:                                ; preds = %dec_label_pc_a6d0, %dec_label_pc_a6c8, %dec_label_pc_aae8
  %v1_aafc = phi i32 [ %v3_a6e8, %dec_label_pc_a6d0 ], [ %v1_aafc49, %dec_label_pc_a6c8 ], [ %v1_aaec, %dec_label_pc_aae8 ]
  store i32 %v18_a480, i32* %sb.global-to-local, align 4
  store i32 %v27_a480, i32* %lr.global-to-local, align 4
  ret i32 %v1_aafc

dec_label_pc_ab00:                                ; preds = %dec_label_pc_aac4
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab10:                                ; preds = %dec_label_pc_aac4
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab20:                                ; preds = %dec_label_pc_aac4
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab2c:                                ; preds = %dec_label_pc_aac4
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_a6c8

; uselistorder directives
  uselistorder i32 %v1_aac8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_aac4, { 1, 0 }
  uselistorder i32 %v0_aab8, { 1, 0 }
  uselistorder i32 %v0_aaa4, { 1, 0 }
  uselistorder i32 %v1_aa9c, { 1, 0 }
  uselistorder i32 %v0_aa7c, { 1, 0 }
  uselistorder i32 %v1_aa58, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_aa20, { 1, 0 }
  uselistorder i32 %v4_aa0c, { 1, 0 }
  uselistorder i32 %v2_a9ec, { 1, 0 }
  uselistorder i1 %v3_a9b0, { 1, 0 }
  uselistorder i1 %v3_a9a0, { 1, 0 }
  uselistorder i32 %v4_a9d4.pre-phi, { 1, 0 }
  uselistorder i32 %v1_a948, { 1, 0, 2 }
  uselistorder i32 %v0_a938, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_a924, { 2, 0, 3, 1 }
  uselistorder i32 %v0_a920, { 1, 0, 2 }
  uselistorder i32 %v0_a890, { 1, 0 }
  uselistorder i32 %v4_a88c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_a7d8, { 1, 0 }
  uselistorder i32 %v3_a794, { 1, 0 }
  uselistorder i32 %v1_a788, { 2, 0, 1 }
  uselistorder i32 %v3_a754, { 1, 0 }
  uselistorder i32 %v3_a74c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_a744, { 0, 2, 1 }
  uselistorder i8 %v5_a73c, { 1, 0, 2 }
  uselistorder i32 %v1_a728, { 1, 0 }
  uselistorder i32 %v0_a728, { 1, 0 }
  uselistorder i1 %v7_a718, { 1, 0 }
  uselistorder i1 %v7_a6ec, { 1, 0 }
  uselistorder i32 %v3_a6e8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_a6c8, { 1, 0, 2 }
  uselistorder i32 %v2_a698, { 0, 1, 3, 2 }
  uselistorder i32 %v2_a694, { 1, 0, 2 }
  uselistorder i1 %v7_a684, { 1, 0 }
  uselistorder i32 %v1_a680, { 1, 0, 2 }
  uselistorder i1 %v8_a678, { 1, 0 }
  uselistorder i1 %v7_a674, { 1, 0 }
  uselistorder i32 %v1_a668, { 1, 0 }
  uselistorder i8 %v2_a65c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a660, { 1, 0 }
  uselistorder i32 %v0_a680, { 3, 0, 2, 1 }
  uselistorder i32 %v0_a650, { 0, 2, 1 }
  uselistorder i32 %v1_a664, { 0, 2, 1 }
  uselistorder i32 %v2_a638, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a630, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a628, { 1, 0 }
  uselistorder i32 %v0_a628, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_a5cc, { 1, 0, 3, 2 }
  uselistorder i32 %v6_a56c, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a550, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a538, { 2, 1, 0 }
  uselistorder i32 %v1_a520, { 1, 0 }
  uselistorder i32 %v7_a4dc, { 1, 0, 2 }
  uselistorder i32 %v2_a4a0, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 37, 36, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 7, 6, 9, 8, 10, 12, 11, 13, 14, 15, 17, 16, 20, 18, 19, 21, 22, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 1, 36, 37, 39, 38, 40, 41, 43, 42, 44, 58, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aaf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a980, { 1, 0 }
  uselistorder label %dec_label_pc_a970, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a970.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_a940, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_a690, { 1, 0 }
  uselistorder label %dec_label_pc_a684, { 1, 0 }
  uselistorder label %dec_label_pc_a650, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a648, { 1, 0 }
}

define i32 @function_ab3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ab3c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ab3c = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_ab58 = call i32 @function_11cd0(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_ab64 = load i32, i32* @r6, align 4
  store i32 %v0_ab64, i32* %r0.global-to-local, align 4
  %v2_ab68 = call i32 @function_11cd0(i32 %v0_ab64, i32 4)
  %v0_ab6c = load i32, i32* @r5, align 4
  store i32 %v0_ab6c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ab7c = load i32, i32* @r4, align 4
  store i32 %v0_ab7c, i32* %r0.global-to-local, align 4
  %v5_ab80 = inttoptr i32 %v0_ab6c to i32*
  %v6_ab80 = call i32 @function_8570(i32 %v0_ab7c, i32* %v5_ab80, i32 2, i32 0)
  %v1_ab8c = urem i32 %v6_ab80, 256
  store i32 %v1_ab8c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ab98 = load i32, i32* @r5, align 4
  store i32 %v0_ab98, i32* %r1.global-to-local, align 4
  %v0_ab9c = load i32, i32* @r4, align 4
  store i32 %v0_ab9c, i32* %r0.global-to-local, align 4
  %v5_aba0 = trunc i32 %v6_ab80 to i8
  %v6_aba4 = inttoptr i32 %v0_ab98 to i32*
  %v7_aba4 = call i32 @function_8570(i32 %v0_ab9c, i32* %v6_aba4, i32 3, i32 65535)
  %v0_aba8 = load i32, i32* @r5, align 4
  store i32 %v0_aba8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_aba4, i32* @r7, align 4
  %v0_abb8 = load i32, i32* @r4, align 4
  store i32 %v0_abb8, i32* %r0.global-to-local, align 4
  %v4_abbc = inttoptr i32 %v0_aba8 to i32*
  %v5_abbc = call i32 @function_8570(i32 %v0_abb8, i32* %v4_abbc, i32 4, i32 64)
  %v1_abc4 = urem i32 %v5_abbc, 256
  store i32 %v1_abc4, i32* %ip.global-to-local, align 4
  %v0_abc8 = load i32, i32* @r5, align 4
  store i32 %v0_abc8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_abd4 = load i32, i32* @r4, align 4
  store i32 %v0_abd4, i32* %r0.global-to-local, align 4
  %v6_abdc = inttoptr i32 %v0_abc8 to i32*
  %v7_abdc = call i32 @function_8570(i32 %v0_abd4, i32* %v6_abdc, i32 5, i32 1)
  %v1_abe8 = urem i32 %v7_abdc, 256
  store i32 %v1_abe8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_abf0 = load i32, i32* @r5, align 4
  store i32 %v0_abf0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_abf8 = load i32, i32* @r4, align 4
  store i32 %v0_abf8, i32* %r0.global-to-local, align 4
  %v5_ac00 = inttoptr i32 %v0_abf0 to i32*
  %v6_ac00 = call i32 @function_8570(i32 %v0_abf8, i32* %v5_ac00, i32 7, i32 65535)
  %v0_ac04 = load i32, i32* @r5, align 4
  store i32 %v0_ac04, i32* %r1.global-to-local, align 4
  %v3_ac08 = mul i32 %v6_ac00, 65536
  store i32 %v3_ac08, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* @r4, align 4
  store i32 %v0_ac14, i32* %r0.global-to-local, align 4
  %v3_ac18 = urem i32 %v6_ac00, 65536
  store i32 %v3_ac18, i32* @sl, align 4
  %v4_ac1c = inttoptr i32 %v0_ac04 to i32*
  %v5_ac1c = call i32 @function_8570(i32 %v0_ac14, i32* %v4_ac1c, i32 11, i32 1)
  %v1_ac24 = urem i32 %v5_ac1c, 256
  store i32 %v1_ac24, i32* %ip.global-to-local, align 4
  %v0_ac28 = load i32, i32* @r5, align 4
  store i32 %v0_ac28, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac34 = load i32, i32* @r4, align 4
  store i32 %v0_ac34, i32* %r0.global-to-local, align 4
  %v5_ac3c = inttoptr i32 %v0_ac28 to i32*
  %v6_ac3c = call i32 @function_8570(i32 %v0_ac34, i32* %v5_ac3c, i32 12, i32 1)
  %v1_ac44 = urem i32 %v6_ac3c, 256
  store i32 %v1_ac44, i32* %ip.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r5, align 4
  store i32 %v0_ac48, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* @r4, align 4
  store i32 %v0_ac54, i32* %r0.global-to-local, align 4
  %v5_ac5c = inttoptr i32 %v0_ac48 to i32*
  %v6_ac5c = call i32 @function_8570(i32 %v0_ac54, i32* %v5_ac5c, i32 13, i32 1)
  %v1_ac64 = urem i32 %v6_ac5c, 256
  store i32 %v1_ac64, i32* %ip.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r5, align 4
  store i32 %v0_ac68, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* @r4, align 4
  store i32 %v0_ac74, i32* %r0.global-to-local, align 4
  %v5_ac7c = inttoptr i32 %v0_ac68 to i32*
  %v6_ac7c = call i32 @function_8570(i32 %v0_ac74, i32* %v5_ac7c, i32 14, i32 1)
  %v1_ac84 = urem i32 %v6_ac7c, 256
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_ac88 = load i32, i32* @r5, align 4
  store i32 %v0_ac88, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r4, align 4
  store i32 %v0_ac94, i32* %r0.global-to-local, align 4
  %v5_ac9c = inttoptr i32 %v0_ac88 to i32*
  %v6_ac9c = call i32 @function_8570(i32 %v0_ac94, i32* %v5_ac9c, i32 15, i32 1)
  %v1_aca4 = urem i32 %v6_ac9c, 256
  store i32 %v1_aca4, i32* %ip.global-to-local, align 4
  %v0_aca8 = load i32, i32* @r5, align 4
  store i32 %v0_aca8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acb4 = load i32, i32* @r4, align 4
  store i32 %v0_acb4, i32* %r0.global-to-local, align 4
  %v5_acbc = inttoptr i32 %v0_aca8 to i32*
  %v6_acbc = call i32 @function_8570(i32 %v0_acb4, i32* %v5_acbc, i32 16, i32 1)
  %v1_acc4 = urem i32 %v6_acbc, 256
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_acd0 = load i32, i32* @r5, align 4
  store i32 %v0_acd0, i32* %r1.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r4, align 4
  store i32 %v0_acd4, i32* %r0.global-to-local, align 4
  %v5_acdc = inttoptr i32 %v0_acd0 to i32*
  %v6_acdc = call i32 @function_8570(i32 %v0_acd4, i32* %v5_acdc, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acec = load i32, i32* @r5, align 4
  store i32 %v0_acec, i32* %r1.global-to-local, align 4
  %v0_acf0 = load i32, i32* @r4, align 4
  store i32 %v0_acf0, i32* %r0.global-to-local, align 4
  %v4_acf4 = inttoptr i32 %v0_acec to i32*
  %v5_acf4 = call i32 @function_8570(i32 %v0_acf0, i32* %v4_acf4, i32 1, i32 1)
  %v1_acfc = urem i32 %v5_acf4, 256
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ad10 = call i32 @function_11168(i32 2, i32 3, i32 6)
  store i32 %v3_ad10, i32* %r0.global-to-local, align 4
  %v7_ad14 = icmp eq i32 %v3_ad10, -1
  store i1 %v7_ad14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad10, i32* @sb, align 4
  br i1 %v7_ad14, label %dec_label_pc_af04, label %dec_label_pc_ad20

dec_label_pc_ad20:                                ; preds = %dec_label_pc_ab3c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ad28 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ad28, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ad3c = call i32 @function_11124(i32 %v3_ad10, i32 0, i32 3, i32 %v6_ad28, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ad3c, i32* %r0.global-to-local, align 4
  %v7_ad40 = icmp eq i32 %v5_ad3c, -1
  store i1 %v7_ad40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad40, label %dec_label_pc_aefc, label %dec_label_pc_ad48

dec_label_pc_ad48:                                ; preds = %dec_label_pc_ad20
  %v0_ad48 = load i32, i32* @r7, align 4
  %v3_ad48 = mul i32 %v0_ad48, 65536
  store i32 %v3_ad48, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_ad50 = load i32, i32* @r6, align 4
  %v2_ad50 = icmp eq i32 %v0_ad50, 0
  store i1 %v2_ad50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ad58 = urem i32 %v0_ad48, 65536
  store i32 %v3_ad58, i32* @fp, align 4
  br i1 %v2_ad50, label %dec_label_pc_b188, label %dec_label_pc_ad60.preheader

dec_label_pc_ad60.preheader:                      ; preds = %dec_label_pc_ad48
  %v2_adac = ptrtoint i32* %stack_var_-144 to i32
  %v2_adf0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_ae28 = ptrtoint i32* %stack_var_-80 to i32
  %v2_ae34 = ptrtoint i32* %stack_var_-336 to i32
  %v2_ae38 = ptrtoint i32* %stack_var_-48 to i32
  %v4_ae98 = zext i8 %tmp to i32
  %v1_ae9c = and i32 %v4_ae98, 18
  %v2_aea0 = icmp eq i32 %v1_ae9c, 18
  %v4_b044 = sext i8 %v5_aba0 to i32
  %sext = mul i32 %v5_abbc, 16777216
  %v4_b054 = sdiv i32 %sext, 16777216
  %v3_ae84 = sext i16 %tmp61 to i32
  %v1_aea8 = and i32 %v4_ae98, 5
  %v2_aea8 = icmp eq i32 %v1_aea8, 0
  %v4_ade8 = add i32 %v2_adac, 82
  %v5_ade8 = inttoptr i32 %v4_ade8 to i16*
  %v1_afd8 = add i32 %v6_acdc, 40
  %v1_b0ec = urem i32 %v5_ac1c, 2
  %tmp97 = sub nsw i32 0, %v1_b0ec
  %v4_b0f4 = and i32 %tmp97, 32
  %v1_b104 = urem i32 %v6_ac3c, 2
  %tmp98 = sub nsw i32 0, %v1_b104
  %v4_b10c = and i32 %tmp98, 16
  %v1_b11c = urem i32 %v6_ac5c, 2
  %tmp99 = sub nsw i32 0, %v1_b11c
  %v4_b124 = and i32 %tmp99, 8
  %v1_b134 = urem i32 %v6_ac7c, 2
  %tmp100 = sub nsw i32 0, %v1_b134
  %v4_b13c = and i32 %tmp100, 4
  %v1_b14c = urem i32 %v6_ac9c, 2
  %tmp101 = sub nsw i32 0, %v1_b14c
  %v3_b154 = and i32 %tmp101, 2
  %v1_b164 = urem i32 %v6_acbc, 2
  br label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %dec_label_pc_ad60.preheader, %dec_label_pc_aed4
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_aed4 ], [ %tmp34, %dec_label_pc_ad60.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_aed4 ], [ %tmp37, %dec_label_pc_ad60.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ad6c = call i32 @function_11168(i32 2, i32 1, i32 0)
  store i32 %v3_ad6c, i32* %r0.global-to-local, align 4
  %v7_ad70 = icmp eq i32 %v3_ad6c, -1
  store i1 %v7_ad70, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad6c, i32* @r5, align 4
  br i1 %v7_ad70, label %dec_label_pc_aed4, label %dec_label_pc_ad7c

dec_label_pc_ad7c:                                ; preds = %dec_label_pc_ad60, %dec_label_pc_aeb0
  %v0_ad84 = phi i32 [ %v3_aec4, %dec_label_pc_aeb0 ], [ %v3_ad6c, %dec_label_pc_ad60 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_aeb0 ], [ %stack_var_-62.0, %dec_label_pc_ad60 ]
  %stack_var_-60.1 = phi i32 [ %v0_af84, %dec_label_pc_aeb0 ], [ %stack_var_-60.0, %dec_label_pc_ad60 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ad84 = call i32 @function_107f4(i32 %v0_ad84, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ad8c = or i32 %v2_ad84, 2048
  store i32 %v1_ad8c, i32* %r2.global-to-local, align 4
  %v0_ad90 = load i32, i32* @r5, align 4
  store i32 %v0_ad90, i32* %r0.global-to-local, align 4
  %v2_ad94 = call i32 @function_107f4(i32 %v0_ad90, i32 4)
  %v3_ad98 = load i32, i32* %stack_var_-44, align 4
  %v5_ada0 = mul i32 %v3_ad98, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_adac, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_adb4 = add i32 %v5_ada0, %arg2
  store i32 %v2_adb4, i32* %r3.global-to-local, align 4
  %v1_adb8 = add i32 %v2_adb4, 20
  %v2_adb8 = inttoptr i32 %v1_adb8 to i8*
  %v3_adb8 = load i8, i8* %v2_adb8, align 1
  %v4_adb8 = zext i8 %v3_adb8 to i32
  store i32 %v4_adb8, i32* %r2.global-to-local, align 4
  %v2_adbc = icmp ugt i8 %v3_adb8, 30
  %v7_adbc = icmp eq i8 %v3_adb8, 31
  store i1 %v7_adbc, i1* %cpsr_z.global-to-local, align 1
  %v2_adc0 = xor i1 %v7_adbc, true
  %v3_adc0 = and i1 %v2_adbc, %v2_adc0
  br i1 %v3_adc0, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_ad7c
  %v5_adc0 = add i32 %v2_adb4, 16
  %v6_adc0 = inttoptr i32 %v5_adc0 to i32*
  %v7_adc0 = load i32, i32* %v6_adc0, align 4
  store i32 %v7_adc0, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_ad7c, %bb
  %v4_adc4 = phi i32 [ %v2_adb4, %dec_label_pc_ad7c ], [ %v7_adc0, %bb ]
  %v4_adc4.stack_var_-60.1 = select i1 %v3_adc0, i32 %v4_adc4, i32 %stack_var_-60.1
  %v2_adc8 = xor i1 %v2_adbc, true
  %v3_adc8 = or i1 %v7_adbc, %v2_adc8
  br i1 %v3_adc8, label %dec_label_pc_af10, label %dec_label_pc_adcc

dec_label_pc_adcc:                                ; preds = %bb71, %dec_label_pc_af10
  %v0_af84 = phi i32 [ %v5_af60, %dec_label_pc_af10 ], [ %v4_adc4.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_add4 = load i32, i32* @sl, align 4
  %v9_add4 = icmp eq i32 %v0_add4, 65535
  store i1 %v9_add4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_add4, label %dec_label_pc_af6c, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_adcc
  %v4_add8 = udiv i32 %v0_add4, 256
  %v2_addc = urem i32 %v0_add4, 256
  store i32 %v2_addc, i32* %r2.global-to-local, align 4
  %v5_ade0 = mul nuw nsw i32 %v2_addc, 256
  %v6_ade0 = or i32 %v5_ade0, %v4_add8
  store i32 %v6_ade0, i32* %r3.global-to-local, align 4
  store i32 %v2_adac, i32* %r0.global-to-local, align 4
  %v2_ade8 = trunc i32 %v6_ade0 to i16
  store i16 %v2_ade8, i16* %v5_ade8, align 2
  br label %dec_label_pc_adf0

dec_label_pc_adf0:                                ; preds = %.thread9, %dec_label_pc_af6c
  %stack_var_-62.2 = phi i16 [ %v1_af6c, %dec_label_pc_af6c ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_adf0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_adf8 = load i32, i32* @r5, align 4
  store i32 %v0_adf8, i32* %r0.global-to-local, align 4
  %v3_adfc = call i32 @function_10f84(i32 %v0_adf8, i32 %v2_adf0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae04 = call i32 @function_10640(i32* null)
  store i32 %v2_ae04, i32* %r0.global-to-local, align 4
  store i32 %v2_ae04, i32* @r4, align 4
  %v9_ae64 = icmp eq i32 %tmp35, %v0_af84
  %v4_ae8c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_ae64 to i32
  %v9_ae78 = icmp eq i1 %v9_ae64, false
  %v9_ae90 = icmp eq i32 %v3_ae84, %v4_ae8c
  br label %dec_label_pc_ae20

dec_label_pc_ae10:                                ; preds = %.thread, %dec_label_pc_ae80, %dec_label_pc_aea8, %bb75
  %v2_ae10 = call i32 @function_10640(i32* null)
  %v0_ae14 = load i32, i32* @r4, align 4
  %v2_ae14 = sub i32 %v2_ae10, %v0_ae14
  store i32 %v2_ae14, i32* %r0.global-to-local, align 4
  %v7_ae18 = icmp eq i32 %v2_ae14, 10
  store i1 %v7_ae18, i1* %cpsr_z.global-to-local, align 1
  %v8_ae1c = icmp sgt i32 %v2_ae14, 10
  br i1 %v8_ae1c, label %dec_label_pc_aeb0, label %dec_label_pc_ae20

dec_label_pc_ae20:                                ; preds = %dec_label_pc_ae10, %dec_label_pc_adf0
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ae34, i32* %r1.global-to-local, align 4
  store i32 %v2_ae38, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae40 = load i32, i32* @sb, align 4
  store i32 %v0_ae40, i32* %r0.global-to-local, align 4
  %v6_ae48 = call i32 @function_11070(i32 %v0_ae40, i32 %v2_ae34, i32 256, i32 16384, i32 %v2_ae28, i32 %v2_ae38)
  store i32 %v6_ae48, i32* %r2.global-to-local, align 4
  %v7_ae50 = icmp eq i32 %v6_ae48, -1
  store i1 %v7_ae50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_ae50, label %dec_label_pc_af04, label %dec_label_pc_ae5c

dec_label_pc_ae5c:                                ; preds = %dec_label_pc_ae20
  store i32 %v0_af84, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_ae70 = icmp eq i32 %v6_ae48, 40
  store i1 %v7_ae70, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_ae48, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_ae5c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ae10

bb75:                                             ; preds = %dec_label_pc_ae5c
  store i1 %v9_ae78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae78, label %dec_label_pc_ae10, label %dec_label_pc_ae80

dec_label_pc_ae80:                                ; preds = %bb75
  store i32 %v3_ae84, i32* @lr, align 4
  store i32 %v2_adac, i32* @r3, align 4
  store i32 %v4_ae8c, i32* %r2.global-to-local, align 4
  store i1 %v9_ae90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae90, label %dec_label_pc_ae98, label %dec_label_pc_ae10

dec_label_pc_ae98:                                ; preds = %dec_label_pc_ae80
  store i32 %v4_ae98, i32* %r2.global-to-local, align 4
  store i32 %v1_ae9c, i32* @r3, align 4
  store i1 %v2_aea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aea0, label %dec_label_pc_af7c, label %dec_label_pc_aea8

dec_label_pc_aea8:                                ; preds = %dec_label_pc_ae98
  store i1 %v2_aea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aea8, label %dec_label_pc_ae10, label %dec_label_pc_aeb0

dec_label_pc_aeb0:                                ; preds = %dec_label_pc_aea8, %dec_label_pc_ae10
  %v0_aeb0 = load i32, i32* @r5, align 4
  store i32 %v0_aeb0, i32* %r0.global-to-local, align 4
  %v1_aeb4 = call i32 @function_109c0(i32 %v0_aeb0)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_aec4 = call i32 @function_11168(i32 2, i32 1, i32 0)
  store i32 %v3_aec4, i32* %r0.global-to-local, align 4
  %v3_aec8 = icmp eq i32 %v3_aec4, -1
  %v8_aec8 = icmp eq i32 %v3_aec4, -1
  store i1 %v8_aec8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aec4, i32* @r5, align 4
  br i1 %v3_aec8, label %dec_label_pc_aed4, label %dec_label_pc_ad7c

dec_label_pc_aed4:                                ; preds = %dec_label_pc_aeb0, %dec_label_pc_ad60, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_ad60 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_aeb0 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_ad60 ], [ %v0_af84, %bb82 ], [ %v0_af84, %dec_label_pc_aeb0 ]
  %v3_aed4 = load i32, i32* %stack_var_-44, align 4
  %v1_aed8 = add i32 %v3_aed4, 1
  store i32 %v1_aed8, i32* @r3, align 4
  %v1_aedc = load i32, i32* @r6, align 4
  %v9_aedc = icmp eq i32 %v1_aed8, %v1_aedc
  store i1 %v9_aedc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aed8, i32* %stack_var_-44, align 4
  %v5_aee4 = icmp slt i32 %v1_aed8, %v1_aedc
  br i1 %v5_aee4, label %dec_label_pc_ad60, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aed4
  store i32 %v6_acdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b198

dec_label_pc_aefc:                                ; preds = %dec_label_pc_ad20
  %v0_aefc = load i32, i32* @sb, align 4
  store i32 %v0_aefc, i32* %r0.global-to-local, align 4
  %v1_af00 = call i32 @function_109c0(i32 %v0_aefc)
  store i32 %v1_af00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af04

dec_label_pc_af04:                                ; preds = %dec_label_pc_ae20, %dec_label_pc_ab3c, %dec_label_pc_aefc
  %v1_af0c = phi i32 [ %v3_ad10, %dec_label_pc_ab3c ], [ %v1_af00, %dec_label_pc_aefc ], [ 0, %dec_label_pc_ae20 ]
  store i32 %v27_ab3c, i32* %lr.global-to-local, align 4
  ret i32 %v1_af0c

dec_label_pc_af10:                                ; preds = %bb71
  %v1_af10 = add i32 %v4_adc4, 16
  %v2_af10 = inttoptr i32 %v1_af10 to i32*
  %v3_af10 = load i32, i32* %v2_af10, align 4
  store i32 %v3_af10, i32* @r4, align 4
  %v0_af14 = call i32 @function_dd14()
  store i32 %v0_af14, i32* %r0.global-to-local, align 4
  %v3_af18 = load i32, i32* %stack_var_-44, align 4
  %v5_af20 = mul i32 %v3_af18, 24
  %v0_af28 = load i32, i32* @r4, align 4
  %v1_af28 = and i32 %v0_af28, 16711680
  store i32 %v1_af28, i32* %ip.global-to-local, align 4
  %v3_af2c = udiv i32 %v0_af28, 16777216
  %v2_af30 = add i32 %v5_af20, %arg2
  store i32 %v2_af30, i32* %r1.global-to-local, align 4
  %v4_af34 = udiv i32 %v1_af28, 256
  %v5_af34 = or i32 %v4_af34, %v3_af2c
  store i32 %v5_af34, i32* %r2.global-to-local, align 4
  %v1_af38 = and i32 %v0_af28, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_af38, i32* %r3.global-to-local, align 4
  %v1_af3c = add i32 %v2_af30, 20
  %v2_af3c = inttoptr i32 %v1_af3c to i8*
  %v3_af3c = load i8, i8* %v2_af3c, align 1
  %v4_af3c = zext i8 %v3_af3c to i32
  store i32 %v4_af3c, i32* %ip.global-to-local, align 4
  %v4_af40 = mul i32 %v1_af38, 256
  %v4_af44 = mul i32 %v0_af28, 16777216
  %v5_af40 = or i32 %v4_af40, %v4_af44
  %v5_af44 = or i32 %v5_af40, %v5_af34
  %v7_af48 = lshr i32 %v0_af14, %v4_af3c
  %v8_af48 = add i32 %v7_af48, %v5_af44
  store i32 %v8_af48, i32* %r2.global-to-local, align 4
  %v1_af4c = and i32 %v8_af48, 16711680
  store i32 %v1_af4c, i32* %r0.global-to-local, align 4
  %v1_af58 = and i32 %v8_af48, 65280
  store i32 %v1_af58, i32* %r1.global-to-local, align 4
  %v5_af60 = call i32 @llvm.bswap.i32(i32 %v8_af48)
  store i32 %v5_af60, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_adcc

dec_label_pc_af6c:                                ; preds = %dec_label_pc_adcc
  %v0_af6c = call i32 @function_dd14()
  %v1_af6c = trunc i32 %v0_af6c to i16
  store i32 %v0_af6c, i32* %r0.global-to-local, align 4
  store i32 %v2_adac, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_af7c:                                ; preds = %dec_label_pc_ae98
  %v3_af7c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_af7c, i32* @r4, align 4
  store i32 %v2_ab58, i32* %ip.global-to-local, align 4
  %v5_af84 = mul i32 %v3_af7c, 16
  %v6_af84 = add i32 %v5_af84, %v2_ab58
  %v7_af84 = inttoptr i32 %v6_af84 to i32*
  store i32 %v0_af84, i32* %v7_af84, align 4
  %v0_af88 = load i32, i32* @r8, align 4
  %v1_af88 = add i32 %v0_af88, 4
  %v2_af88 = inttoptr i32 %v1_af88 to i32*
  %v3_af88 = load i32, i32* %v2_af88, align 4
  store i32 %v3_af88, i32* %r1.global-to-local, align 4
  %v3_af90 = udiv i32 %v3_af88, 16777216
  %v1_af94 = and i32 %v3_af88, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_af94, i32* %r2.global-to-local, align 4
  %v1_af8c = udiv i32 %v3_af88, 256
  %v4_af98 = and i32 %v1_af8c, 65280
  store i32 %v2_ab58, i32* %r0.global-to-local, align 4
  %v4_afa0 = mul i32 %v1_af94, 256
  %v0_afa4 = load i32, i32* @r4, align 4
  %v3_afa4 = mul i32 %v0_afa4, 16
  %v2_afa8 = add i32 %v3_afa4, %v2_ab58
  store i32 %v2_afa8, i32* %ip.global-to-local, align 4
  %v4_afac = mul i32 %v3_af88, 16777216
  %v5_af98 = or i32 %v4_afac, %v3_af90
  %v5_afa0 = or i32 %v5_af98, %v4_af98
  %v5_afac = or i32 %v5_afa0, %v4_afa0
  store i32 %v5_afac, i32* %r3.global-to-local, align 4
  %v2_afb0 = add i32 %v2_afa8, 4
  %v3_afb0 = inttoptr i32 %v2_afb0 to i32*
  store i32 %v5_afac, i32* %v3_afb0, align 4
  %v0_afb4 = load i32, i32* @r8, align 4
  %v1_afb4 = add i32 %v0_afb4, 8
  %v2_afb4 = inttoptr i32 %v1_afb4 to i32*
  %v3_afb4 = load i32, i32* %v2_afb4, align 4
  store i32 %v3_afb4, i32* %r1.global-to-local, align 4
  %v1_afb8 = and i32 %v3_afb4, 16711680
  store i32 %v1_afb8, i32* %r0.global-to-local, align 4
  %v3_afbc = udiv i32 %v3_afb4, 16777216
  %v1_afc0 = and i32 %v3_afb4, ptrtoint (i32* @global_var_ff00.21 to i32)
  %v4_afc4 = udiv i32 %v1_afb8, 256
  %v4_afc8 = mul i32 %v1_afc0, 256
  store i32 %v6_acdc, i32* %r2.global-to-local, align 4
  %v4_afd0 = mul i32 %v3_afb4, 16777216
  %v5_afc4 = or i32 %v4_afd0, %v3_afbc
  %v5_afc8 = or i32 %v5_afc4, %v4_afc4
  %v5_afd0 = or i32 %v5_afc8, %v4_afc8
  store i32 %v5_afd0, i32* %r3.global-to-local, align 4
  %v1_afd4 = add i32 %v0_afb4, 2
  %v2_afd4 = inttoptr i32 %v1_afd4 to i16*
  %v3_afd4 = load i16, i16* %v2_afd4, align 2
  %v4_afd4 = zext i16 %v3_afd4 to i32
  store i32 %v4_afd4, i32* %r1.global-to-local, align 4
  store i32 %v1_afd8, i32* @r7, align 4
  %v0_afdc = load i32, i32* @lr, align 4
  %v1_afdc = trunc i32 %v0_afdc to i16
  %v2_afdc = load i32, i32* %ip.global-to-local, align 4
  %v3_afdc = add i32 %v2_afdc, 14
  %v4_afdc = inttoptr i32 %v3_afdc to i16*
  store i16 %v1_afdc, i16* %v4_afdc, align 2
  %v0_afe0 = load i32, i32* %r1.global-to-local, align 4
  %v1_afe0 = trunc i32 %v0_afe0 to i16
  %v2_afe0 = load i32, i32* %ip.global-to-local, align 4
  %v3_afe0 = add i32 %v2_afe0, 12
  %v4_afe0 = inttoptr i32 %v3_afe0 to i16*
  store i16 %v1_afe0, i16* %v4_afe0, align 2
  %v0_afe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afe4 = load i32, i32* %ip.global-to-local, align 4
  %v2_afe4 = add i32 %v1_afe4, 8
  %v3_afe4 = inttoptr i32 %v2_afe4 to i32*
  store i32 %v0_afe4, i32* %v3_afe4, align 4
  %v0_afe8 = load i32, i32* @r7, align 4
  store i32 %v0_afe8, i32* @r0, align 4
  %v0_afec = call i32 @function_113b0()
  store i32 %v0_afec, i32* %r0.global-to-local, align 4
  store i32 %v2_ab68, i32* %r3.global-to-local, align 4
  %v2_aff8 = load i32, i32* @r4, align 4
  %v5_aff8 = mul i32 %v2_aff8, 4
  %v6_aff8 = add i32 %v5_aff8, %v2_ab68
  %v7_aff8 = inttoptr i32 %v6_aff8 to i32*
  store i32 %v0_afec, i32* %v7_aff8, align 4
  %v3_affc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_affc, i32* %r2.global-to-local, align 4
  %v0_b000 = load i32, i32* %r3.global-to-local, align 4
  %v4_b000 = mul i32 %v3_affc, 4
  %v5_b000 = add i32 %v0_b000, %v4_b000
  %v6_b000 = inttoptr i32 %v5_b000 to i32*
  %v7_b000 = load i32, i32* %v6_b000, align 4
  store i32 %v7_b000, i32* @r4, align 4
  %v1_b004 = inttoptr i32 %v7_b000 to i8*
  %v2_b004 = load i8, i8* %v1_b004, align 1
  %tmp103 = urem i8 %v2_b004, 16
  %v1_b008 = zext i8 %tmp103 to i32
  %v1_b00c = or i32 %v1_b008, 64
  store i32 %v1_b00c, i32* %r3.global-to-local, align 4
  %v1_b010 = trunc i32 %v1_b00c to i8
  store i8 %v1_b010, i8* %v1_b004, align 1
  %v0_b014 = load i32, i32* @r4, align 4
  %v1_b014 = inttoptr i32 %v0_b014 to i8*
  %v2_b014 = load i8, i8* %v1_b014, align 1
  %v0_b018 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b018, 256
  %v1_b020 = and i8 %v2_b014, -16
  %v1_b024 = or i8 %v1_b020, 5
  %v1_b028 = and i32 %tmp77, and (i32 ptrtoint (i32* @global_var_ff00.21 to i32), i32 16776960)
  %tmp78 = udiv i32 %v0_b018, 256
  %v4_b02c = urem i32 %tmp78, 256
  %v5_b02c = or i32 %v4_b02c, %v1_b028
  store i32 %v5_b02c, i32* %r2.global-to-local, align 4
  %v0_b030 = load i32, i32* @fp, align 4
  %v1_b030 = urem i32 %v0_b030, 256
  store i32 %v1_b030, i32* %r0.global-to-local, align 4
  store i32 %v1_abe8, i32* %ip.global-to-local, align 4
  %v3_b038 = udiv i32 %v0_b030, 256
  store i32 %v3_b038, i32* %r1.global-to-local, align 4
  store i8 %v1_b024, i8* %v1_b014, align 1
  %v0_b040 = load i32, i32* %r1.global-to-local, align 4
  %v1_b040 = load i32, i32* %r0.global-to-local, align 4
  %v4_b040 = mul i32 %v1_b040, 256
  %v5_b040 = or i32 %v4_b040, %v0_b040
  store i32 %v5_b040, i32* %r1.global-to-local, align 4
  store i32 %v4_b044, i32* %r0.global-to-local, align 4
  %v2_b048 = load i32, i32* @r4, align 4
  %v3_b048 = add i32 %v2_b048, 1
  %v4_b048 = inttoptr i32 %v3_b048 to i8*
  store i8 %v5_aba0, i8* %v4_b048, align 1
  %v0_b04c = load i32, i32* %r1.global-to-local, align 4
  %v1_b04c = trunc i32 %v0_b04c to i16
  %v2_b04c = load i32, i32* @r4, align 4
  %v3_b04c = add i32 %v2_b04c, 4
  %v4_b04c = inttoptr i32 %v3_b04c to i16*
  store i16 %v1_b04c, i16* %v4_b04c, align 2
  %v0_b050 = load i32, i32* %ip.global-to-local, align 4
  %v2_b050 = icmp eq i32 %v0_b050, 0
  store i1 %v2_b050, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b054, i32* %r1.global-to-local, align 4
  %v0_b058 = load i32, i32* %r2.global-to-local, align 4
  %v1_b058 = trunc i32 %v0_b058 to i16
  %v2_b058 = load i32, i32* @r4, align 4
  %v3_b058 = add i32 %v2_b058, 2
  %v4_b058 = inttoptr i32 %v3_b058 to i16*
  store i16 %v1_b058, i16* %v4_b058, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b050, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_af7c
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_af7c, %bb79
  %v0_b064 = load i32, i32* %r1.global-to-local, align 4
  %v1_b064 = trunc i32 %v0_b064 to i8
  %v2_b064 = load i32, i32* @r4, align 4
  %v3_b064 = add i32 %v2_b064, 8
  %v4_b064 = inttoptr i32 %v3_b064 to i8*
  store i8 %v1_b064, i8* %v4_b064, align 1
  %v0_b068 = load i32, i32* %r3.global-to-local, align 4
  %v1_b068 = trunc i32 %v0_b068 to i8
  %v2_b068 = load i32, i32* @r4, align 4
  %v3_b068 = add i32 %v2_b068, 9
  %v4_b068 = inttoptr i32 %v3_b068 to i8*
  store i8 %v1_b068, i8* %v4_b068, align 1
  %v0_b06c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b06c, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b06c = load i32, i32* %r2.global-to-local, align 4
  %v2_b06c = trunc i32 %v1_b06c to i16
  %v3_b06c = load i32, i32* @r4, align 4
  %v4_b06c = add i32 %v3_b06c, 6
  %v5_b06c = inttoptr i32 %v4_b06c to i16*
  store i16 %v2_b06c, i16* %v5_b06c, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_205a0.46 to i32), i32* %r2.global-to-local, align 4
  %v2_b074 = load i32, i32* @global_var_205a0.46, align 4
  store i32 %v2_b074, i32* %r1.global-to-local, align 4
  %v1_b078 = load i32, i32* @r4, align 4
  %v2_b078 = add i32 %v1_b078, 12
  %v3_b078 = inttoptr i32 %v2_b078 to i32*
  store i32 %v2_b074, i32* %v3_b078, align 4
  %v3_b07c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b07c, i32* %r3.global-to-local, align 4
  store i32 %v2_ab58, i32* %ip.global-to-local, align 4
  %v4_b084 = mul i32 %v3_b07c, 16
  %v5_b084 = add i32 %v4_b084, %v2_ab58
  %v6_b084 = inttoptr i32 %v5_b084 to i32*
  %v7_b084 = load i32, i32* %v6_b084, align 4
  store i32 %v7_b084, i32* %r2.global-to-local, align 4
  store i32 %v5_b084, i32* %r3.global-to-local, align 4
  %v1_b090 = load i32, i32* @r4, align 4
  %v2_b090 = add i32 %v1_b090, 16
  %v3_b090 = inttoptr i32 %v2_b090 to i32*
  store i32 %v7_b084, i32* %v3_b090, align 4
  %v0_b094 = load i32, i32* %r3.global-to-local, align 4
  %v1_b094 = add i32 %v0_b094, 12
  %v2_b094 = inttoptr i32 %v1_b094 to i16*
  %v3_b094 = load i16, i16* %v2_b094, align 2
  %v4_b094 = zext i16 %v3_b094 to i32
  store i32 %v4_b094, i32* %r0.global-to-local, align 4
  %v1_b098 = add i32 %v0_b094, 8
  %v2_b098 = inttoptr i32 %v1_b098 to i32*
  %v3_b098 = load i32, i32* %v2_b098, align 4
  store i32 %v3_b098, i32* %r1.global-to-local, align 4
  %v2_b09c = load i32, i32* @r4, align 4
  %v3_b09c = add i32 %v2_b09c, 20
  %v4_b09c = inttoptr i32 %v3_b09c to i16*
  store i16 %v3_b094, i16* %v4_b09c, align 2
  %v0_b0a0 = load i32, i32* @r4, align 4
  %v1_b0a0 = add i32 %v0_b0a0, 20
  store i32 %v1_b0a0, i32* @r8, align 4
  %v1_b0a4 = add i32 %v0_b0a0, 33
  %v2_b0a4 = inttoptr i32 %v1_b0a4 to i8*
  %v3_b0a4 = load i8, i8* %v2_b0a4, align 1
  %v4_b0a4 = zext i8 %v3_b0a4 to i32
  store i32 %v4_b0a4, i32* %r2.global-to-local, align 4
  %v0_b0a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0a8 = add i32 %v0_b0a0, 24
  %v3_b0a8 = inttoptr i32 %v2_b0a8 to i32*
  store i32 %v0_b0a8, i32* %v3_b0a8, align 4
  %v0_b0ac = load i32, i32* %r2.global-to-local, align 4
  %v1_b0ac = or i32 %v0_b0ac, 1
  store i32 %v1_b0ac, i32* %r2.global-to-local, align 4
  %v0_b0b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0b0 = add i32 %v0_b0b0, 4
  %v2_b0b0 = inttoptr i32 %v1_b0b0 to i32*
  %v3_b0b0 = load i32, i32* %v2_b0b0, align 4
  store i32 %v3_b0b0, i32* %r1.global-to-local, align 4
  %v1_b0b4 = add i32 %v0_b0b0, 14
  %v2_b0b4 = inttoptr i32 %v1_b0b4 to i16*
  %v3_b0b4 = load i16, i16* %v2_b0b4, align 2
  %v4_b0b4 = zext i16 %v3_b0b4 to i32
  store i32 %v4_b0b4, i32* %r3.global-to-local, align 4
  %v1_b0b8 = trunc i32 %v1_b0ac to i8
  %v2_b0b8 = load i32, i32* @r8, align 4
  %v3_b0b8 = add i32 %v2_b0b8, 13
  %v4_b0b8 = inttoptr i32 %v3_b0b8 to i8*
  store i8 %v1_b0b8, i8* %v4_b0b8, align 1
  %v0_b0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_b0bc = trunc i32 %v0_b0bc to i16
  %v2_b0bc = load i32, i32* @r8, align 4
  %v3_b0bc = add i32 %v2_b0bc, 2
  %v4_b0bc = inttoptr i32 %v3_b0bc to i16*
  store i16 %v1_b0bc, i16* %v4_b0bc, align 2
  %v0_b0c0 = load i32, i32* @r8, align 4
  %v1_b0c0 = add i32 %v0_b0c0, 12
  %v2_b0c0 = inttoptr i32 %v1_b0c0 to i8*
  %v3_b0c0 = load i8, i8* %v2_b0c0, align 1
  %v4_b0c0 = zext i8 %v3_b0c0 to i32
  store i32 %v4_b0c0, i32* %r3.global-to-local, align 4
  %v1_b0c4 = add i32 %v0_b0c0, 13
  %v2_b0c4 = inttoptr i32 %v1_b0c4 to i8*
  %v3_b0c4 = load i8, i8* %v2_b0c4, align 1
  %v4_b0c4 = zext i8 %v3_b0c4 to i32
  %tmp104 = urem i8 %v3_b0c0, 16
  %v1_b0c8 = zext i8 %tmp104 to i32
  %v1_b0cc = or i32 %v1_b0c8, 128
  store i32 %v1_b0cc, i32* %r3.global-to-local, align 4
  %v1_b0d0 = or i32 %v4_b0c4, 16
  store i32 %v1_b0d0, i32* %r2.global-to-local, align 4
  %v0_b0d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0d4 = add i32 %v0_b0c0, 8
  %v3_b0d4 = inttoptr i32 %v2_b0d4 to i32*
  store i32 %v0_b0d4, i32* %v3_b0d4, align 4
  %v0_b0d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0d8 = trunc i32 %v0_b0d8 to i8
  %v2_b0d8 = load i32, i32* @r8, align 4
  %v3_b0d8 = add i32 %v2_b0d8, 12
  %v4_b0d8 = inttoptr i32 %v3_b0d8 to i8*
  store i8 %v1_b0d8, i8* %v4_b0d8, align 1
  %v0_b0dc = load i32, i32* %r2.global-to-local, align 4
  %v1_b0dc = trunc i32 %v0_b0dc to i8
  %v2_b0dc = load i32, i32* @r8, align 4
  %v3_b0dc = add i32 %v2_b0dc, 13
  %v4_b0dc = inttoptr i32 %v3_b0dc to i8*
  store i8 %v1_b0dc, i8* %v4_b0dc, align 1
  %v0_b0e0 = call i32 @function_dd14()
  %v1_b0e0 = trunc i32 %v0_b0e0 to i16
  store i32 %v0_b0e0, i32* %r0.global-to-local, align 4
  store i32 %v1_ac24, i32* %r1.global-to-local, align 4
  %v0_b0e8 = load i32, i32* @r8, align 4
  %v1_b0e8 = add i32 %v0_b0e8, 13
  %v2_b0e8 = inttoptr i32 %v1_b0e8 to i8*
  %v3_b0e8 = load i8, i8* %v2_b0e8, align 1
  %v4_b0e8 = zext i8 %v3_b0e8 to i32
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v1_b0f0 = and i32 %v4_b0e8, 223
  %v5_b0f4 = or i32 %v1_b0f0, %v4_b0f4
  store i32 %v5_b0f4, i32* %r3.global-to-local, align 4
  %v1_b0f8 = trunc i32 %v5_b0f4 to i8
  store i8 %v1_b0f8, i8* %v2_b0e8, align 1
  store i32 %v1_ac44, i32* %ip.global-to-local, align 4
  %v0_b100 = load i32, i32* @r8, align 4
  %v1_b100 = add i32 %v0_b100, 13
  %v2_b100 = inttoptr i32 %v1_b100 to i8*
  %v3_b100 = load i8, i8* %v2_b100, align 1
  %v4_b100 = zext i8 %v3_b100 to i32
  store i32 %v1_b104, i32* %r3.global-to-local, align 4
  %v1_b108 = and i32 %v4_b100, 239
  %v5_b10c = or i32 %v1_b108, %v4_b10c
  store i32 %v5_b10c, i32* %r2.global-to-local, align 4
  %v1_b110 = trunc i32 %v5_b10c to i8
  store i8 %v1_b110, i8* %v2_b100, align 1
  store i32 %v1_ac64, i32* %r1.global-to-local, align 4
  %v0_b118 = load i32, i32* @r8, align 4
  %v1_b118 = add i32 %v0_b118, 13
  %v2_b118 = inttoptr i32 %v1_b118 to i8*
  %v3_b118 = load i8, i8* %v2_b118, align 1
  %v4_b118 = zext i8 %v3_b118 to i32
  store i32 %v1_b11c, i32* %r2.global-to-local, align 4
  %v1_b120 = and i32 %v4_b118, 247
  %v5_b124 = or i32 %v1_b120, %v4_b124
  store i32 %v5_b124, i32* %r3.global-to-local, align 4
  %v1_b128 = trunc i32 %v5_b124 to i8
  store i8 %v1_b128, i8* %v2_b118, align 1
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_b130 = load i32, i32* @r8, align 4
  %v1_b130 = add i32 %v0_b130, 13
  %v2_b130 = inttoptr i32 %v1_b130 to i8*
  %v3_b130 = load i8, i8* %v2_b130, align 1
  %v4_b130 = zext i8 %v3_b130 to i32
  store i32 %v1_b134, i32* %r3.global-to-local, align 4
  %v1_b138 = and i32 %v4_b130, 251
  %v5_b13c = or i32 %v1_b138, %v4_b13c
  store i32 %v5_b13c, i32* %r2.global-to-local, align 4
  %v1_b140 = trunc i32 %v5_b13c to i8
  store i8 %v1_b140, i8* %v2_b130, align 1
  store i32 %v1_aca4, i32* %r1.global-to-local, align 4
  %v0_b148 = load i32, i32* @r8, align 4
  %v1_b148 = add i32 %v0_b148, 13
  %v2_b148 = inttoptr i32 %v1_b148 to i8*
  %v3_b148 = load i8, i8* %v2_b148, align 1
  %v4_b148 = zext i8 %v3_b148 to i32
  store i32 %v1_b14c, i32* %r2.global-to-local, align 4
  %v1_b150 = and i32 %v4_b148, 253
  %v4_b154 = or i32 %v1_b150, %v3_b154
  store i32 %v4_b154, i32* %r3.global-to-local, align 4
  %v1_b158 = trunc i32 %v4_b154 to i8
  store i8 %v1_b158, i8* %v2_b148, align 1
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_b160 = load i32, i32* @r8, align 4
  %v1_b160 = add i32 %v0_b160, 13
  %v2_b160 = inttoptr i32 %v1_b160 to i8*
  %v3_b160 = load i8, i8* %v2_b160, align 1
  %v4_b160 = zext i8 %v3_b160 to i32
  %v1_b168 = and i32 %v4_b160, 254
  store i32 %v1_b168, i32* %r2.global-to-local, align 4
  %v2_b16c = or i32 %v1_b168, %v1_b164
  store i32 %v2_b16c, i32* %r3.global-to-local, align 4
  %v1_b170 = trunc i32 %v2_b16c to i8
  store i8 %v1_b170, i8* %v2_b160, align 1
  %v3_b174 = load i32, i32* @r8, align 4
  %v4_b174 = add i32 %v3_b174, 14
  %v5_b174 = inttoptr i32 %v4_b174 to i16*
  store i16 %v1_b0e0, i16* %v5_b174, align 2
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %v0_b17c = load i32, i32* @r4, align 4
  %v1_b17c = add i32 %v0_b17c, 40
  store i32 %v1_b17c, i32* %r0.global-to-local, align 4
  %v2_b180 = inttoptr i32 %v1_b17c to i16*
  %v3_b180 = call i32 @function_dea8(i16* %v2_b180, i32 %v6_acdc)
  store i32 %v3_b180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aed4

dec_label_pc_b188:                                ; preds = %dec_label_pc_ad48
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_acdc, 40
  br label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_aee8, %dec_label_pc_b188
  %storemerge6.pre-phi = phi i32 [ %v1_afd8, %dec_label_pc_aee8 ], [ %.pre, %dec_label_pc_b188 ]
  %v0_b1ac26 = phi i32 [ %v1_aedc, %dec_label_pc_aee8 ], [ 0, %dec_label_pc_b188 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_acdc, 65536
  %storemerge = add i32 %v6_acdc, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b198 = add i32 %storemerge4, 1310720
  store i32 %v1_b198, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b198, 256
  %v3_b1a0 = and i32 %tmp83, 65280
  store i32 %v3_b1a0, i32* %r3.global-to-local, align 4
  %v4_b1a4 = udiv i32 %v1_b198, 16777216
  %v5_b1a4 = or i32 %v3_b1a0, %v4_b1a4
  store i32 %v5_b1a4, i32* @r8, align 4
  %v2_b2d0 = icmp eq i32 %v1_acfc, 0
  br label %dec_label_pc_b1a8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b2b4, %dec_label_pc_b198
  %v0_b1ac = phi i32 [ %v0_b1ac26, %dec_label_pc_b198 ], [ 0, %dec_label_pc_b2b4 ], [ 0, %dec_label_pc_b1a8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b1ac = icmp eq i32 %v0_b1ac, 0
  store i1 %v2_b1ac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b1ac, label %dec_label_pc_b1a8, label %dec_label_pc_b1b8

dec_label_pc_b1b8:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b2b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1bc

dec_label_pc_b1bc:                                ; preds = %dec_label_pc_b1e4, %dec_label_pc_b1b8
  %v1_b1c4 = phi i32 [ %v1_b2a4, %dec_label_pc_b1e4 ], [ 0, %dec_label_pc_b1b8 ]
  store i32 %v2_ab68, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b1c4 = mul i32 %v1_b1c4, 4
  %v5_b1c4 = add i32 %v4_b1c4, %v2_ab68
  %v6_b1c4 = inttoptr i32 %v5_b1c4 to i32*
  %v7_b1c4 = load i32, i32* %v6_b1c4, align 4
  store i32 %v7_b1c4, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b1cc = load i32, i32* @fp, align 4
  %v9_b1cc = icmp eq i32 %v0_b1cc, 65535
  store i1 %v9_b1cc, i1* %cpsr_z.global-to-local, align 1
  %v1_b1d0 = add i32 %v7_b1c4, 20
  store i32 %v1_b1d0, i32* @r5, align 4
  br i1 %v9_b1cc, label %dec_label_pc_b2c8, label %dec_label_pc_b1d8

dec_label_pc_b1d8:                                ; preds = %dec_label_pc_b1bc
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i1 %v2_b2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2d0, label %dec_label_pc_b1e4, label %dec_label_pc_b2dc

dec_label_pc_b1e4:                                ; preds = %dec_label_pc_b1d8, %dec_label_pc_b2c8, %dec_label_pc_b2dc
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b1e8 = load i32, i32* @r4, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 10
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i16*
  store i16 0, i16* %v4_b1e8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1f0 = load i32, i32* @r4, align 4
  store i32 %v0_b1f0, i32* @r0, align 4
  %v2_b1f4 = call i32 @function_c848(i32 %v0_b1f0, i32 20)
  %v3_b1f4 = trunc i32 %v2_b1f4 to i16
  store i32 %v2_b1f4, i32* %r0.global-to-local, align 4
  %v3_b1f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_ab58, i32* %r2.global-to-local, align 4
  %v3_b200 = mul i32 %v3_b1f8, 16
  %v2_b204 = add i32 %v3_b200, %v2_ab58
  store i32 %v2_b204, i32* %r1.global-to-local, align 4
  %v1_b208 = add i32 %v2_b204, 4
  %v2_b208 = inttoptr i32 %v1_b208 to i32*
  %v3_b208 = load i32, i32* %v2_b208, align 4
  %v3_b20c = mul i32 %v3_b208, 65536
  store i32 %v3_b20c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b208, 256
  %v1_b214 = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.21 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_b208, 256
  %v4_b218 = urem i32 %tmp86, 256
  %v5_b218 = or i32 %v4_b218, %v1_b214
  store i32 %v5_b218, i32* %r3.global-to-local, align 4
  %v1_b21c = add i32 %v3_b208, 1
  store i32 %v1_b21c, i32* %r2.global-to-local, align 4
  store i32 %v1_b21c, i32* %v2_b208, align 4
  %v0_b224 = load i32, i32* %r3.global-to-local, align 4
  %v1_b224 = load i32, i32* @r5, align 4
  %v2_b224 = add i32 %v1_b224, 4
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v0_b224, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* %r1.global-to-local, align 4
  %v1_b228 = add i32 %v0_b228, 8
  %v2_b228 = inttoptr i32 %v1_b228 to i32*
  %v3_b228 = load i32, i32* %v2_b228, align 4
  %tmp87 = mul i32 %v3_b228, 256
  %v1_b234 = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.21 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_b228, 256
  %v4_b238 = urem i32 %tmp88, 256
  %v5_b238 = or i32 %v4_b238, %v1_b234
  %v1_b23c = load i32, i32* @r5, align 4
  %v2_b23c = add i32 %v1_b23c, 8
  %v3_b23c = inttoptr i32 %v2_b23c to i32*
  store i32 %v5_b238, i32* %v3_b23c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b244 = load i32, i32* @r4, align 4
  %v4_b244 = add i32 %v3_b244, 10
  %v5_b244 = inttoptr i32 %v4_b244 to i16*
  store i16 %v3_b1f4, i16* %v5_b244, align 2
  %v0_b248 = load i32, i32* @r5, align 4
  store i32 %v0_b248, i32* @r1, align 4
  %v0_b24c = load i32, i32* %r3.global-to-local, align 4
  %v1_b24c = trunc i32 %v0_b24c to i16
  %v3_b24c = add i32 %v0_b248, 16
  %v4_b24c = inttoptr i32 %v3_b24c to i16*
  store i16 %v1_b24c, i16* %v4_b24c, align 2
  %v0_b250 = load i32, i32* @r8, align 4
  store i32 %v0_b250, i32* %r2.global-to-local, align 4
  %v0_b254 = load i32, i32* @sl, align 4
  store i32 %v0_b254, i32* %r3.global-to-local, align 4
  %v0_b258 = load i32, i32* @r4, align 4
  store i32 %v0_b258, i32* %r0.global-to-local, align 4
  %v4_b25c = call i32 @function_c898(i32 %v0_b258, i32 %v0_b248, i32 %v0_b250, i32 %v0_b254)
  %v5_b25c = trunc i32 %v4_b25c to i16
  store i32 %v4_b25c, i32* %r0.global-to-local, align 4
  %v3_b260 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b260, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_b268 = mul i32 %v3_b260, 32
  store i32 %v3_b268, i32* %lr.global-to-local, align 4
  %v3_b26c = load i32, i32* @r5, align 4
  %v4_b26c = add i32 %v3_b26c, 16
  %v5_b26c = inttoptr i32 %v4_b26c to i16*
  store i16 %v5_b25c, i16* %v5_b26c, align 2
  %v0_b270 = load i32, i32* %lr.global-to-local, align 4
  %v1_b270 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_b270, -8
  %v5_b270 = add i32 %v0_b270, %tmp105
  store i32 %v5_b270, i32* %lr.global-to-local, align 4
  %v0_b274 = load i32, i32* @r5, align 4
  %v1_b274 = add i32 %v0_b274, 2
  %v2_b274 = inttoptr i32 %v1_b274 to i16*
  %v3_b274 = load i16, i16* %v2_b274, align 2
  %v1_b278 = load i32, i32* %ip.global-to-local, align 4
  %v2_b278 = add i32 %v1_b278, %v5_b270
  store i32 %v2_b278, i32* @lr, align 4
  %v3_b27c = add i32 %v2_b278, 2
  %v4_b27c = inttoptr i32 %v3_b27c to i16*
  store i16 %v3_b274, i16* %v4_b27c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b288 = load i32, i32* @r4, align 4
  store i32 %v0_b288, i32* %r1.global-to-local, align 4
  %v0_b28c = load i32, i32* @sb, align 4
  store i32 %v0_b28c, i32* %r0.global-to-local, align 4
  %v0_b290 = load i32, i32* @r7, align 4
  store i32 %v0_b290, i32* %r2.global-to-local, align 4
  %v0_b294 = load i32, i32* @lr, align 4
  %v6_b29c = call i32 @function_110e4(i32 %v0_b28c, i32 %v0_b288, i32 %v0_b290, i32 16384, i32 %v0_b294, i32 16)
  %v3_b2a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2a0, i32* %r3.global-to-local, align 4
  %v1_b2a4 = add i32 %v3_b2a0, 1
  store i32 %v1_b2a4, i32* %r0.global-to-local, align 4
  %v0_b2a8 = load i32, i32* @r6, align 4
  %v9_b2a8 = icmp eq i32 %v0_b2a8, %v1_b2a4
  store i1 %v9_b2a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b2a4, i32* %stack_var_-44, align 4
  %v8_b2b0 = icmp sgt i32 %v0_b2a8, %v1_b2a4
  br i1 %v8_b2b0, label %dec_label_pc_b1bc, label %dec_label_pc_b2b4

dec_label_pc_b2b4:                                ; preds = %dec_label_pc_b1e4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2b8 = icmp eq i32 %v0_b2a8, 0
  store i1 %v2_b2b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b2b8, label %dec_label_pc_b1a8, label %dec_label_pc_b1b8

dec_label_pc_b2c8:                                ; preds = %dec_label_pc_b1bc
  %v0_b2c8 = call i32 @function_dd14()
  %v1_b2c8 = trunc i32 %v0_b2c8 to i16
  store i32 %v0_b2c8, i32* %r0.global-to-local, align 4
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i1 %v2_b2d0, i1* %cpsr_z.global-to-local, align 1
  %v3_b2d4 = load i32, i32* @r4, align 4
  %v4_b2d4 = add i32 %v3_b2d4, 4
  %v5_b2d4 = inttoptr i32 %v4_b2d4 to i16*
  store i16 %v1_b2c8, i16* %v5_b2d4, align 2
  br i1 %v2_b2d0, label %dec_label_pc_b1e4, label %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge

dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge:    ; preds = %dec_label_pc_b2c8
  %v0_b2dc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b2dc

dec_label_pc_b2dc:                                ; preds = %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge, %dec_label_pc_b1d8
  %v0_b2dc = phi i32 [ %v0_b2dc.pre, %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge ], [ %v7_b1c4, %dec_label_pc_b1d8 ]
  %v1_b2dc = add i32 %v0_b2dc, 40
  store i32 %v1_b2dc, i32* %r0.global-to-local, align 4
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %v2_b2e4 = inttoptr i32 %v1_b2dc to i16*
  %v3_b2e4 = call i32 @function_dea8(i16* %v2_b2e4, i32 %v6_acdc)
  store i32 %v3_b2e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1e4

; uselistorder directives
  uselistorder i32 %v0_b2c8, { 1, 0 }
  uselistorder i32 %v1_b2a4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b270, { 1, 0 }
  uselistorder i32 %v4_b25c, { 1, 0 }
  uselistorder i32 %v3_b228, { 1, 0 }
  uselistorder i32 %v3_b208, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b1f4, { 1, 0 }
  uselistorder i1 %v2_b2d0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b0e0, { 1, 0 }
  uselistorder i32 %v0_b018, { 1, 0 }
  uselistorder i32 %v3_afb4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_af88, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_af6c, { 1, 0 }
  uselistorder i32 %v0_af28, { 0, 2, 1, 3 }
  uselistorder i32 %v1_aed8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_aec4, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_ae50, { 1, 0 }
  uselistorder i32 %v6_ae48, { 0, 2, 1, 3 }
  uselistorder i1 %v9_ae78, { 1, 0 }
  uselistorder i32 %v4_ae8c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_add4, { 1, 0, 2 }
  uselistorder i32 %v0_af84, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_adc4, { 1, 0 }
  uselistorder i1 %v7_adbc, { 1, 0, 2 }
  uselistorder i1 %v7_ad70, { 1, 0 }
  uselistorder i32 %v3_ad6c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b14c, { 1, 0 }
  uselistorder i32 %v1_b134, { 1, 0 }
  uselistorder i32 %v1_b11c, { 1, 0 }
  uselistorder i32 %v1_b104, { 1, 0 }
  uselistorder i32 %v1_b0ec, { 1, 0 }
  uselistorder i32 %v3_ae84, { 1, 0 }
  uselistorder i1 %v2_aea0, { 1, 0 }
  uselistorder i32 %v1_ae9c, { 1, 0 }
  uselistorder i32 %v4_ae98, { 2, 0, 1 }
  uselistorder i32 %v2_adac, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_ad48, { 1, 0 }
  uselistorder i1 %v7_ad40, { 1, 0 }
  uselistorder i1 %v7_ad14, { 1, 0 }
  uselistorder i32 %v3_ad10, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_acfc, { 2, 3, 1, 0 }
  uselistorder i32 %v6_acdc, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_aca4, { 1, 0 }
  uselistorder i32 %v1_ac84, { 1, 0 }
  uselistorder i32 %v1_ac64, { 1, 0 }
  uselistorder i32 %v1_ac44, { 1, 0 }
  uselistorder i32 %v1_ac24, { 1, 0 }
  uselistorder i32 %v6_ac00, { 1, 0 }
  uselistorder i32 %v1_abe8, { 1, 0 }
  uselistorder i8 %v5_aba0, { 1, 0 }
  uselistorder i32 %v6_ab80, { 1, 0 }
  uselistorder i32 %v2_ab68, { 0, 3, 1, 2 }
  uselistorder i32 %v2_ab58, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b1e4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b1b8, { 1, 0 }
  uselistorder label %dec_label_pc_b1a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b198, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_af04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aed4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae10, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_adcc, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_ad7c, { 1, 0 }
  uselistorder label %dec_label_pc_ad60, { 1, 0 }
}

define i32 @function_b2f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b2f0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_b2f0 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_b30c = call i32 @function_11cd0(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b318 = load i32, i32* @r6, align 4
  store i32 %v0_b318, i32* %r0.global-to-local, align 4
  %v2_b31c = call i32 @function_11cd0(i32 %v0_b318, i32 4)
  %v0_b320 = load i32, i32* @r5, align 4
  store i32 %v0_b320, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b330 = load i32, i32* @r4, align 4
  store i32 %v0_b330, i32* %r0.global-to-local, align 4
  %v5_b334 = inttoptr i32 %v0_b320 to i32*
  %v6_b334 = call i32 @function_8570(i32 %v0_b330, i32* %v5_b334, i32 2, i32 0)
  %v1_b340 = urem i32 %v6_b334, 256
  store i32 %v1_b340, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b34c = load i32, i32* @r5, align 4
  store i32 %v0_b34c, i32* %r1.global-to-local, align 4
  %v0_b350 = load i32, i32* @r4, align 4
  store i32 %v0_b350, i32* %r0.global-to-local, align 4
  %v5_b354 = trunc i32 %v6_b334 to i8
  %v6_b358 = inttoptr i32 %v0_b34c to i32*
  %v7_b358 = call i32 @function_8570(i32 %v0_b350, i32* %v6_b358, i32 3, i32 65535)
  %v0_b35c = load i32, i32* @r5, align 4
  store i32 %v0_b35c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b358, i32* @r7, align 4
  %v0_b36c = load i32, i32* @r4, align 4
  store i32 %v0_b36c, i32* %r0.global-to-local, align 4
  %v4_b370 = inttoptr i32 %v0_b35c to i32*
  %v5_b370 = call i32 @function_8570(i32 %v0_b36c, i32* %v4_b370, i32 4, i32 64)
  %v1_b378 = urem i32 %v5_b370, 256
  store i32 %v1_b378, i32* %ip.global-to-local, align 4
  %v0_b37c = load i32, i32* @r5, align 4
  store i32 %v0_b37c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b388 = load i32, i32* @r4, align 4
  store i32 %v0_b388, i32* %r0.global-to-local, align 4
  %v6_b390 = inttoptr i32 %v0_b37c to i32*
  %v7_b390 = call i32 @function_8570(i32 %v0_b388, i32* %v6_b390, i32 5, i32 1)
  %v1_b39c = urem i32 %v7_b390, 256
  store i32 %v1_b39c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b3a4 = load i32, i32* @r5, align 4
  store i32 %v0_b3a4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3ac = load i32, i32* @r4, align 4
  store i32 %v0_b3ac, i32* %r0.global-to-local, align 4
  %v5_b3b4 = inttoptr i32 %v0_b3a4 to i32*
  %v6_b3b4 = call i32 @function_8570(i32 %v0_b3ac, i32* %v5_b3b4, i32 7, i32 65535)
  %v0_b3b8 = load i32, i32* @r5, align 4
  store i32 %v0_b3b8, i32* %r1.global-to-local, align 4
  %v3_b3bc = mul i32 %v6_b3b4, 65536
  store i32 %v3_b3bc, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @r4, align 4
  store i32 %v0_b3c8, i32* %r0.global-to-local, align 4
  %v3_b3cc = urem i32 %v6_b3b4, 65536
  store i32 %v3_b3cc, i32* @sl, align 4
  %v4_b3d0 = inttoptr i32 %v0_b3b8 to i32*
  %v5_b3d0 = call i32 @function_8570(i32 %v0_b3c8, i32* %v4_b3d0, i32 11, i32 0)
  %v1_b3d8 = urem i32 %v5_b3d0, 256
  store i32 %v1_b3d8, i32* %ip.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r5, align 4
  store i32 %v0_b3dc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3e8 = load i32, i32* @r4, align 4
  store i32 %v0_b3e8, i32* %r0.global-to-local, align 4
  %v5_b3f0 = inttoptr i32 %v0_b3dc to i32*
  %v6_b3f0 = call i32 @function_8570(i32 %v0_b3e8, i32* %v5_b3f0, i32 12, i32 1)
  %v1_b3f8 = urem i32 %v6_b3f0, 256
  store i32 %v1_b3f8, i32* %ip.global-to-local, align 4
  %v0_b3fc = load i32, i32* @r5, align 4
  store i32 %v0_b3fc, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r4, align 4
  store i32 %v0_b408, i32* %r0.global-to-local, align 4
  %v5_b410 = inttoptr i32 %v0_b3fc to i32*
  %v6_b410 = call i32 @function_8570(i32 %v0_b408, i32* %v5_b410, i32 13, i32 1)
  %v1_b418 = urem i32 %v6_b410, 256
  store i32 %v1_b418, i32* %ip.global-to-local, align 4
  %v0_b41c = load i32, i32* @r5, align 4
  store i32 %v0_b41c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b41c to i32*
  %v6_b430 = call i32 @function_8570(i32 %v0_b428, i32* %v5_b430, i32 14, i32 0)
  %v1_b438 = urem i32 %v6_b430, 256
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b448 = load i32, i32* @r4, align 4
  store i32 %v0_b448, i32* %r0.global-to-local, align 4
  %v5_b450 = inttoptr i32 %v0_b43c to i32*
  %v6_b450 = call i32 @function_8570(i32 %v0_b448, i32* %v5_b450, i32 15, i32 0)
  %v1_b458 = urem i32 %v6_b450, 256
  store i32 %v1_b458, i32* %ip.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b45c to i32*
  %v6_b470 = call i32 @function_8570(i32 %v0_b468, i32* %v5_b470, i32 16, i32 0)
  %v1_b478 = urem i32 %v6_b470, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b484 = load i32, i32* @r5, align 4
  store i32 %v0_b484, i32* %r1.global-to-local, align 4
  %v0_b488 = load i32, i32* @r4, align 4
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b484 to i32*
  %v6_b490 = call i32 @function_8570(i32 %v0_b488, i32* %v5_b490, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b4a0 = load i32, i32* @r5, align 4
  store i32 %v0_b4a0, i32* %r1.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r4, align 4
  store i32 %v0_b4a4, i32* %r0.global-to-local, align 4
  %v4_b4a8 = inttoptr i32 %v0_b4a0 to i32*
  %v5_b4a8 = call i32 @function_8570(i32 %v0_b4a4, i32* %v4_b4a8, i32 1, i32 1)
  %v1_b4b0 = urem i32 %v5_b4a8, 256
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b4c4 = call i32 @function_11168(i32 2, i32 3, i32 6)
  store i32 %v3_b4c4, i32* %r0.global-to-local, align 4
  %v7_b4c8 = icmp eq i32 %v3_b4c4, -1
  store i1 %v7_b4c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b4c4, i32* @sb, align 4
  br i1 %v7_b4c8, label %dec_label_pc_b6b8, label %dec_label_pc_b4d4

dec_label_pc_b4d4:                                ; preds = %dec_label_pc_b2f0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b4dc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b4dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b4f0 = call i32 @function_11124(i32 %v3_b4c4, i32 0, i32 3, i32 %v6_b4dc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b4f0, i32* %r0.global-to-local, align 4
  %v7_b4f4 = icmp eq i32 %v5_b4f0, -1
  store i1 %v7_b4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4f4, label %dec_label_pc_b6b0, label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %dec_label_pc_b4d4
  %v0_b4fc = load i32, i32* @r7, align 4
  %v3_b4fc = mul i32 %v0_b4fc, 65536
  store i32 %v3_b4fc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_b504 = load i32, i32* @r6, align 4
  %v2_b504 = icmp eq i32 %v0_b504, 0
  store i1 %v2_b504, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_b50c = urem i32 %v0_b4fc, 65536
  store i32 %v3_b50c, i32* @fp, align 4
  br i1 %v2_b504, label %dec_label_pc_b93c, label %dec_label_pc_b514.preheader

dec_label_pc_b514.preheader:                      ; preds = %dec_label_pc_b4fc
  %v2_b560 = ptrtoint i32* %stack_var_-144 to i32
  %v2_b5a4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b5dc = ptrtoint i32* %stack_var_-80 to i32
  %v2_b5e8 = ptrtoint i32* %stack_var_-336 to i32
  %v2_b5ec = ptrtoint i32* %stack_var_-48 to i32
  %v4_b64c = zext i8 %tmp to i32
  %v1_b650 = and i32 %v4_b64c, 18
  %v2_b654 = icmp eq i32 %v1_b650, 18
  %v4_b7f8 = sext i8 %v5_b354 to i32
  %sext = mul i32 %v5_b370, 16777216
  %v4_b808 = sdiv i32 %sext, 16777216
  %v3_b638 = sext i16 %tmp61 to i32
  %v1_b65c = and i32 %v4_b64c, 5
  %v2_b65c = icmp eq i32 %v1_b65c, 0
  %v4_b59c = add i32 %v2_b560, 82
  %v5_b59c = inttoptr i32 %v4_b59c to i16*
  %v1_b78c = add i32 %v6_b490, 40
  %v1_b8a0 = urem i32 %v5_b3d0, 2
  %tmp97 = sub nsw i32 0, %v1_b8a0
  %v4_b8a8 = and i32 %tmp97, 32
  %v1_b8b8 = urem i32 %v6_b3f0, 2
  %tmp98 = sub nsw i32 0, %v1_b8b8
  %v4_b8c0 = and i32 %tmp98, 16
  %v1_b8d0 = urem i32 %v6_b410, 2
  %tmp99 = sub nsw i32 0, %v1_b8d0
  %v4_b8d8 = and i32 %tmp99, 8
  %v1_b8e8 = urem i32 %v6_b430, 2
  %tmp100 = sub nsw i32 0, %v1_b8e8
  %v4_b8f0 = and i32 %tmp100, 4
  %v1_b900 = urem i32 %v6_b450, 2
  %tmp101 = sub nsw i32 0, %v1_b900
  %v3_b908 = and i32 %tmp101, 2
  %v1_b918 = urem i32 %v6_b470, 2
  br label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %dec_label_pc_b514.preheader, %dec_label_pc_b688
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b688 ], [ %tmp34, %dec_label_pc_b514.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b688 ], [ %tmp37, %dec_label_pc_b514.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b520 = call i32 @function_11168(i32 2, i32 1, i32 0)
  store i32 %v3_b520, i32* %r0.global-to-local, align 4
  %v7_b524 = icmp eq i32 %v3_b520, -1
  store i1 %v7_b524, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b520, i32* @r5, align 4
  br i1 %v7_b524, label %dec_label_pc_b688, label %dec_label_pc_b530

dec_label_pc_b530:                                ; preds = %dec_label_pc_b514, %dec_label_pc_b664
  %v0_b538 = phi i32 [ %v3_b678, %dec_label_pc_b664 ], [ %v3_b520, %dec_label_pc_b514 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b664 ], [ %stack_var_-62.0, %dec_label_pc_b514 ]
  %stack_var_-60.1 = phi i32 [ %v0_b738, %dec_label_pc_b664 ], [ %stack_var_-60.0, %dec_label_pc_b514 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b538 = call i32 @function_107f4(i32 %v0_b538, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b540 = or i32 %v2_b538, 2048
  store i32 %v1_b540, i32* %r2.global-to-local, align 4
  %v0_b544 = load i32, i32* @r5, align 4
  store i32 %v0_b544, i32* %r0.global-to-local, align 4
  %v2_b548 = call i32 @function_107f4(i32 %v0_b544, i32 4)
  %v3_b54c = load i32, i32* %stack_var_-44, align 4
  %v5_b554 = mul i32 %v3_b54c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_b560, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_b568 = add i32 %v5_b554, %arg2
  store i32 %v2_b568, i32* %r3.global-to-local, align 4
  %v1_b56c = add i32 %v2_b568, 20
  %v2_b56c = inttoptr i32 %v1_b56c to i8*
  %v3_b56c = load i8, i8* %v2_b56c, align 1
  %v4_b56c = zext i8 %v3_b56c to i32
  store i32 %v4_b56c, i32* %r2.global-to-local, align 4
  %v2_b570 = icmp ugt i8 %v3_b56c, 30
  %v7_b570 = icmp eq i8 %v3_b56c, 31
  store i1 %v7_b570, i1* %cpsr_z.global-to-local, align 1
  %v2_b574 = xor i1 %v7_b570, true
  %v3_b574 = and i1 %v2_b570, %v2_b574
  br i1 %v3_b574, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_b530
  %v5_b574 = add i32 %v2_b568, 16
  %v6_b574 = inttoptr i32 %v5_b574 to i32*
  %v7_b574 = load i32, i32* %v6_b574, align 4
  store i32 %v7_b574, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_b530, %bb
  %v4_b578 = phi i32 [ %v2_b568, %dec_label_pc_b530 ], [ %v7_b574, %bb ]
  %v4_b578.stack_var_-60.1 = select i1 %v3_b574, i32 %v4_b578, i32 %stack_var_-60.1
  %v2_b57c = xor i1 %v2_b570, true
  %v3_b57c = or i1 %v7_b570, %v2_b57c
  br i1 %v3_b57c, label %dec_label_pc_b6c4, label %dec_label_pc_b580

dec_label_pc_b580:                                ; preds = %bb71, %dec_label_pc_b6c4
  %v0_b738 = phi i32 [ %v5_b714, %dec_label_pc_b6c4 ], [ %v4_b578.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b588 = load i32, i32* @sl, align 4
  %v9_b588 = icmp eq i32 %v0_b588, 65535
  store i1 %v9_b588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b588, label %dec_label_pc_b720, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_b580
  %v4_b58c = udiv i32 %v0_b588, 256
  %v2_b590 = urem i32 %v0_b588, 256
  store i32 %v2_b590, i32* %r2.global-to-local, align 4
  %v5_b594 = mul nuw nsw i32 %v2_b590, 256
  %v6_b594 = or i32 %v5_b594, %v4_b58c
  store i32 %v6_b594, i32* %r3.global-to-local, align 4
  store i32 %v2_b560, i32* %r0.global-to-local, align 4
  %v2_b59c = trunc i32 %v6_b594 to i16
  store i16 %v2_b59c, i16* %v5_b59c, align 2
  br label %dec_label_pc_b5a4

dec_label_pc_b5a4:                                ; preds = %.thread9, %dec_label_pc_b720
  %stack_var_-62.2 = phi i16 [ %v1_b720, %dec_label_pc_b720 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_b5a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r5, align 4
  store i32 %v0_b5ac, i32* %r0.global-to-local, align 4
  %v3_b5b0 = call i32 @function_10f84(i32 %v0_b5ac, i32 %v2_b5a4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b5b8 = call i32 @function_10640(i32* null)
  store i32 %v2_b5b8, i32* %r0.global-to-local, align 4
  store i32 %v2_b5b8, i32* @r4, align 4
  %v9_b618 = icmp eq i32 %tmp35, %v0_b738
  %v4_b640 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_b618 to i32
  %v9_b62c = icmp eq i1 %v9_b618, false
  %v9_b644 = icmp eq i32 %v3_b638, %v4_b640
  br label %dec_label_pc_b5d4

dec_label_pc_b5c4:                                ; preds = %.thread, %dec_label_pc_b634, %dec_label_pc_b65c, %bb75
  %v2_b5c4 = call i32 @function_10640(i32* null)
  %v0_b5c8 = load i32, i32* @r4, align 4
  %v2_b5c8 = sub i32 %v2_b5c4, %v0_b5c8
  store i32 %v2_b5c8, i32* %r0.global-to-local, align 4
  %v7_b5cc = icmp eq i32 %v2_b5c8, 10
  store i1 %v7_b5cc, i1* %cpsr_z.global-to-local, align 1
  %v8_b5d0 = icmp sgt i32 %v2_b5c8, 10
  br i1 %v8_b5d0, label %dec_label_pc_b664, label %dec_label_pc_b5d4

dec_label_pc_b5d4:                                ; preds = %dec_label_pc_b5c4, %dec_label_pc_b5a4
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_b5e8, i32* %r1.global-to-local, align 4
  store i32 %v2_b5ec, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b5f4 = load i32, i32* @sb, align 4
  store i32 %v0_b5f4, i32* %r0.global-to-local, align 4
  %v6_b5fc = call i32 @function_11070(i32 %v0_b5f4, i32 %v2_b5e8, i32 256, i32 16384, i32 %v2_b5dc, i32 %v2_b5ec)
  store i32 %v6_b5fc, i32* %r2.global-to-local, align 4
  %v7_b604 = icmp eq i32 %v6_b5fc, -1
  store i1 %v7_b604, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b604, label %dec_label_pc_b6b8, label %dec_label_pc_b610

dec_label_pc_b610:                                ; preds = %dec_label_pc_b5d4
  store i32 %v0_b738, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b624 = icmp eq i32 %v6_b5fc, 40
  store i1 %v7_b624, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_b5fc, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_b610
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b5c4

bb75:                                             ; preds = %dec_label_pc_b610
  store i1 %v9_b62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b62c, label %dec_label_pc_b5c4, label %dec_label_pc_b634

dec_label_pc_b634:                                ; preds = %bb75
  store i32 %v3_b638, i32* @lr, align 4
  store i32 %v2_b560, i32* @r3, align 4
  store i32 %v4_b640, i32* %r2.global-to-local, align 4
  store i1 %v9_b644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b644, label %dec_label_pc_b64c, label %dec_label_pc_b5c4

dec_label_pc_b64c:                                ; preds = %dec_label_pc_b634
  store i32 %v4_b64c, i32* %r2.global-to-local, align 4
  store i32 %v1_b650, i32* @r3, align 4
  store i1 %v2_b654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b654, label %dec_label_pc_b730, label %dec_label_pc_b65c

dec_label_pc_b65c:                                ; preds = %dec_label_pc_b64c
  store i1 %v2_b65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b65c, label %dec_label_pc_b5c4, label %dec_label_pc_b664

dec_label_pc_b664:                                ; preds = %dec_label_pc_b65c, %dec_label_pc_b5c4
  %v0_b664 = load i32, i32* @r5, align 4
  store i32 %v0_b664, i32* %r0.global-to-local, align 4
  %v1_b668 = call i32 @function_109c0(i32 %v0_b664)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b678 = call i32 @function_11168(i32 2, i32 1, i32 0)
  store i32 %v3_b678, i32* %r0.global-to-local, align 4
  %v3_b67c = icmp eq i32 %v3_b678, -1
  %v8_b67c = icmp eq i32 %v3_b678, -1
  store i1 %v8_b67c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b678, i32* @r5, align 4
  br i1 %v3_b67c, label %dec_label_pc_b688, label %dec_label_pc_b530

dec_label_pc_b688:                                ; preds = %dec_label_pc_b664, %dec_label_pc_b514, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b514 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_b664 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b514 ], [ %v0_b738, %bb82 ], [ %v0_b738, %dec_label_pc_b664 ]
  %v3_b688 = load i32, i32* %stack_var_-44, align 4
  %v1_b68c = add i32 %v3_b688, 1
  store i32 %v1_b68c, i32* @r3, align 4
  %v1_b690 = load i32, i32* @r6, align 4
  %v9_b690 = icmp eq i32 %v1_b68c, %v1_b690
  store i1 %v9_b690, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b68c, i32* %stack_var_-44, align 4
  %v5_b698 = icmp slt i32 %v1_b68c, %v1_b690
  br i1 %v5_b698, label %dec_label_pc_b514, label %dec_label_pc_b69c

dec_label_pc_b69c:                                ; preds = %dec_label_pc_b688
  store i32 %v6_b490, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b94c

dec_label_pc_b6b0:                                ; preds = %dec_label_pc_b4d4
  %v0_b6b0 = load i32, i32* @sb, align 4
  store i32 %v0_b6b0, i32* %r0.global-to-local, align 4
  %v1_b6b4 = call i32 @function_109c0(i32 %v0_b6b0)
  store i32 %v1_b6b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6b8

dec_label_pc_b6b8:                                ; preds = %dec_label_pc_b5d4, %dec_label_pc_b2f0, %dec_label_pc_b6b0
  %v1_b6c0 = phi i32 [ %v3_b4c4, %dec_label_pc_b2f0 ], [ %v1_b6b4, %dec_label_pc_b6b0 ], [ 0, %dec_label_pc_b5d4 ]
  store i32 %v27_b2f0, i32* %lr.global-to-local, align 4
  ret i32 %v1_b6c0

dec_label_pc_b6c4:                                ; preds = %bb71
  %v1_b6c4 = add i32 %v4_b578, 16
  %v2_b6c4 = inttoptr i32 %v1_b6c4 to i32*
  %v3_b6c4 = load i32, i32* %v2_b6c4, align 4
  store i32 %v3_b6c4, i32* @r4, align 4
  %v0_b6c8 = call i32 @function_dd14()
  store i32 %v0_b6c8, i32* %r0.global-to-local, align 4
  %v3_b6cc = load i32, i32* %stack_var_-44, align 4
  %v5_b6d4 = mul i32 %v3_b6cc, 24
  %v0_b6dc = load i32, i32* @r4, align 4
  %v1_b6dc = and i32 %v0_b6dc, 16711680
  store i32 %v1_b6dc, i32* %ip.global-to-local, align 4
  %v3_b6e0 = udiv i32 %v0_b6dc, 16777216
  %v2_b6e4 = add i32 %v5_b6d4, %arg2
  store i32 %v2_b6e4, i32* %r1.global-to-local, align 4
  %v4_b6e8 = udiv i32 %v1_b6dc, 256
  %v5_b6e8 = or i32 %v4_b6e8, %v3_b6e0
  store i32 %v5_b6e8, i32* %r2.global-to-local, align 4
  %v1_b6ec = and i32 %v0_b6dc, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_b6ec, i32* %r3.global-to-local, align 4
  %v1_b6f0 = add i32 %v2_b6e4, 20
  %v2_b6f0 = inttoptr i32 %v1_b6f0 to i8*
  %v3_b6f0 = load i8, i8* %v2_b6f0, align 1
  %v4_b6f0 = zext i8 %v3_b6f0 to i32
  store i32 %v4_b6f0, i32* %ip.global-to-local, align 4
  %v4_b6f4 = mul i32 %v1_b6ec, 256
  %v4_b6f8 = mul i32 %v0_b6dc, 16777216
  %v5_b6f4 = or i32 %v4_b6f4, %v4_b6f8
  %v5_b6f8 = or i32 %v5_b6f4, %v5_b6e8
  %v7_b6fc = lshr i32 %v0_b6c8, %v4_b6f0
  %v8_b6fc = add i32 %v7_b6fc, %v5_b6f8
  store i32 %v8_b6fc, i32* %r2.global-to-local, align 4
  %v1_b700 = and i32 %v8_b6fc, 16711680
  store i32 %v1_b700, i32* %r0.global-to-local, align 4
  %v1_b70c = and i32 %v8_b6fc, 65280
  store i32 %v1_b70c, i32* %r1.global-to-local, align 4
  %v5_b714 = call i32 @llvm.bswap.i32(i32 %v8_b6fc)
  store i32 %v5_b714, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b580

dec_label_pc_b720:                                ; preds = %dec_label_pc_b580
  %v0_b720 = call i32 @function_dd14()
  %v1_b720 = trunc i32 %v0_b720 to i16
  store i32 %v0_b720, i32* %r0.global-to-local, align 4
  store i32 %v2_b560, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5a4

dec_label_pc_b730:                                ; preds = %dec_label_pc_b64c
  %v3_b730 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b730, i32* @r4, align 4
  store i32 %v2_b30c, i32* %ip.global-to-local, align 4
  %v5_b738 = mul i32 %v3_b730, 16
  %v6_b738 = add i32 %v5_b738, %v2_b30c
  %v7_b738 = inttoptr i32 %v6_b738 to i32*
  store i32 %v0_b738, i32* %v7_b738, align 4
  %v0_b73c = load i32, i32* @r8, align 4
  %v1_b73c = add i32 %v0_b73c, 4
  %v2_b73c = inttoptr i32 %v1_b73c to i32*
  %v3_b73c = load i32, i32* %v2_b73c, align 4
  store i32 %v3_b73c, i32* %r1.global-to-local, align 4
  %v3_b744 = udiv i32 %v3_b73c, 16777216
  %v1_b748 = and i32 %v3_b73c, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_b748, i32* %r2.global-to-local, align 4
  %v1_b740 = udiv i32 %v3_b73c, 256
  %v4_b74c = and i32 %v1_b740, 65280
  store i32 %v2_b30c, i32* %r0.global-to-local, align 4
  %v4_b754 = mul i32 %v1_b748, 256
  %v0_b758 = load i32, i32* @r4, align 4
  %v3_b758 = mul i32 %v0_b758, 16
  %v2_b75c = add i32 %v3_b758, %v2_b30c
  store i32 %v2_b75c, i32* %ip.global-to-local, align 4
  %v4_b760 = mul i32 %v3_b73c, 16777216
  %v5_b74c = or i32 %v4_b760, %v3_b744
  %v5_b754 = or i32 %v5_b74c, %v4_b74c
  %v5_b760 = or i32 %v5_b754, %v4_b754
  store i32 %v5_b760, i32* %r3.global-to-local, align 4
  %v2_b764 = add i32 %v2_b75c, 4
  %v3_b764 = inttoptr i32 %v2_b764 to i32*
  store i32 %v5_b760, i32* %v3_b764, align 4
  %v0_b768 = load i32, i32* @r8, align 4
  %v1_b768 = add i32 %v0_b768, 8
  %v2_b768 = inttoptr i32 %v1_b768 to i32*
  %v3_b768 = load i32, i32* %v2_b768, align 4
  store i32 %v3_b768, i32* %r1.global-to-local, align 4
  %v1_b76c = and i32 %v3_b768, 16711680
  store i32 %v1_b76c, i32* %r0.global-to-local, align 4
  %v3_b770 = udiv i32 %v3_b768, 16777216
  %v1_b774 = and i32 %v3_b768, ptrtoint (i32* @global_var_ff00.21 to i32)
  %v4_b778 = udiv i32 %v1_b76c, 256
  %v4_b77c = mul i32 %v1_b774, 256
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v4_b784 = mul i32 %v3_b768, 16777216
  %v5_b778 = or i32 %v4_b784, %v3_b770
  %v5_b77c = or i32 %v5_b778, %v4_b778
  %v5_b784 = or i32 %v5_b77c, %v4_b77c
  store i32 %v5_b784, i32* %r3.global-to-local, align 4
  %v1_b788 = add i32 %v0_b768, 2
  %v2_b788 = inttoptr i32 %v1_b788 to i16*
  %v3_b788 = load i16, i16* %v2_b788, align 2
  %v4_b788 = zext i16 %v3_b788 to i32
  store i32 %v4_b788, i32* %r1.global-to-local, align 4
  store i32 %v1_b78c, i32* @r7, align 4
  %v0_b790 = load i32, i32* @lr, align 4
  %v1_b790 = trunc i32 %v0_b790 to i16
  %v2_b790 = load i32, i32* %ip.global-to-local, align 4
  %v3_b790 = add i32 %v2_b790, 14
  %v4_b790 = inttoptr i32 %v3_b790 to i16*
  store i16 %v1_b790, i16* %v4_b790, align 2
  %v0_b794 = load i32, i32* %r1.global-to-local, align 4
  %v1_b794 = trunc i32 %v0_b794 to i16
  %v2_b794 = load i32, i32* %ip.global-to-local, align 4
  %v3_b794 = add i32 %v2_b794, 12
  %v4_b794 = inttoptr i32 %v3_b794 to i16*
  store i16 %v1_b794, i16* %v4_b794, align 2
  %v0_b798 = load i32, i32* %r3.global-to-local, align 4
  %v1_b798 = load i32, i32* %ip.global-to-local, align 4
  %v2_b798 = add i32 %v1_b798, 8
  %v3_b798 = inttoptr i32 %v2_b798 to i32*
  store i32 %v0_b798, i32* %v3_b798, align 4
  %v0_b79c = load i32, i32* @r7, align 4
  store i32 %v0_b79c, i32* @r0, align 4
  %v0_b7a0 = call i32 @function_113b0()
  store i32 %v0_b7a0, i32* %r0.global-to-local, align 4
  store i32 %v2_b31c, i32* %r3.global-to-local, align 4
  %v2_b7ac = load i32, i32* @r4, align 4
  %v5_b7ac = mul i32 %v2_b7ac, 4
  %v6_b7ac = add i32 %v5_b7ac, %v2_b31c
  %v7_b7ac = inttoptr i32 %v6_b7ac to i32*
  store i32 %v0_b7a0, i32* %v7_b7ac, align 4
  %v3_b7b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b7b0, i32* %r2.global-to-local, align 4
  %v0_b7b4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b7b4 = mul i32 %v3_b7b0, 4
  %v5_b7b4 = add i32 %v0_b7b4, %v4_b7b4
  %v6_b7b4 = inttoptr i32 %v5_b7b4 to i32*
  %v7_b7b4 = load i32, i32* %v6_b7b4, align 4
  store i32 %v7_b7b4, i32* @r4, align 4
  %v1_b7b8 = inttoptr i32 %v7_b7b4 to i8*
  %v2_b7b8 = load i8, i8* %v1_b7b8, align 1
  %tmp103 = urem i8 %v2_b7b8, 16
  %v1_b7bc = zext i8 %tmp103 to i32
  %v1_b7c0 = or i32 %v1_b7bc, 64
  store i32 %v1_b7c0, i32* %r3.global-to-local, align 4
  %v1_b7c4 = trunc i32 %v1_b7c0 to i8
  store i8 %v1_b7c4, i8* %v1_b7b8, align 1
  %v0_b7c8 = load i32, i32* @r4, align 4
  %v1_b7c8 = inttoptr i32 %v0_b7c8 to i8*
  %v2_b7c8 = load i8, i8* %v1_b7c8, align 1
  %v0_b7cc = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b7cc, 256
  %v1_b7d4 = and i8 %v2_b7c8, -16
  %v1_b7d8 = or i8 %v1_b7d4, 5
  %v1_b7dc = and i32 %tmp77, and (i32 ptrtoint (i32* @global_var_ff00.21 to i32), i32 16776960)
  %tmp78 = udiv i32 %v0_b7cc, 256
  %v4_b7e0 = urem i32 %tmp78, 256
  %v5_b7e0 = or i32 %v4_b7e0, %v1_b7dc
  store i32 %v5_b7e0, i32* %r2.global-to-local, align 4
  %v0_b7e4 = load i32, i32* @fp, align 4
  %v1_b7e4 = urem i32 %v0_b7e4, 256
  store i32 %v1_b7e4, i32* %r0.global-to-local, align 4
  store i32 %v1_b39c, i32* %ip.global-to-local, align 4
  %v3_b7ec = udiv i32 %v0_b7e4, 256
  store i32 %v3_b7ec, i32* %r1.global-to-local, align 4
  store i8 %v1_b7d8, i8* %v1_b7c8, align 1
  %v0_b7f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b7f4 = load i32, i32* %r0.global-to-local, align 4
  %v4_b7f4 = mul i32 %v1_b7f4, 256
  %v5_b7f4 = or i32 %v4_b7f4, %v0_b7f4
  store i32 %v5_b7f4, i32* %r1.global-to-local, align 4
  store i32 %v4_b7f8, i32* %r0.global-to-local, align 4
  %v2_b7fc = load i32, i32* @r4, align 4
  %v3_b7fc = add i32 %v2_b7fc, 1
  %v4_b7fc = inttoptr i32 %v3_b7fc to i8*
  store i8 %v5_b354, i8* %v4_b7fc, align 1
  %v0_b800 = load i32, i32* %r1.global-to-local, align 4
  %v1_b800 = trunc i32 %v0_b800 to i16
  %v2_b800 = load i32, i32* @r4, align 4
  %v3_b800 = add i32 %v2_b800, 4
  %v4_b800 = inttoptr i32 %v3_b800 to i16*
  store i16 %v1_b800, i16* %v4_b800, align 2
  %v0_b804 = load i32, i32* %ip.global-to-local, align 4
  %v2_b804 = icmp eq i32 %v0_b804, 0
  store i1 %v2_b804, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b808, i32* %r1.global-to-local, align 4
  %v0_b80c = load i32, i32* %r2.global-to-local, align 4
  %v1_b80c = trunc i32 %v0_b80c to i16
  %v2_b80c = load i32, i32* @r4, align 4
  %v3_b80c = add i32 %v2_b80c, 2
  %v4_b80c = inttoptr i32 %v3_b80c to i16*
  store i16 %v1_b80c, i16* %v4_b80c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b804, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_b730
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_b730, %bb79
  %v0_b818 = load i32, i32* %r1.global-to-local, align 4
  %v1_b818 = trunc i32 %v0_b818 to i8
  %v2_b818 = load i32, i32* @r4, align 4
  %v3_b818 = add i32 %v2_b818, 8
  %v4_b818 = inttoptr i32 %v3_b818 to i8*
  store i8 %v1_b818, i8* %v4_b818, align 1
  %v0_b81c = load i32, i32* %r3.global-to-local, align 4
  %v1_b81c = trunc i32 %v0_b81c to i8
  %v2_b81c = load i32, i32* @r4, align 4
  %v3_b81c = add i32 %v2_b81c, 9
  %v4_b81c = inttoptr i32 %v3_b81c to i8*
  store i8 %v1_b81c, i8* %v4_b81c, align 1
  %v0_b820 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b820, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b820 = load i32, i32* %r2.global-to-local, align 4
  %v2_b820 = trunc i32 %v1_b820 to i16
  %v3_b820 = load i32, i32* @r4, align 4
  %v4_b820 = add i32 %v3_b820, 6
  %v5_b820 = inttoptr i32 %v4_b820 to i16*
  store i16 %v2_b820, i16* %v5_b820, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_205a0.46 to i32), i32* %r2.global-to-local, align 4
  %v2_b828 = load i32, i32* @global_var_205a0.46, align 4
  store i32 %v2_b828, i32* %r1.global-to-local, align 4
  %v1_b82c = load i32, i32* @r4, align 4
  %v2_b82c = add i32 %v1_b82c, 12
  %v3_b82c = inttoptr i32 %v2_b82c to i32*
  store i32 %v2_b828, i32* %v3_b82c, align 4
  %v3_b830 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b830, i32* %r3.global-to-local, align 4
  store i32 %v2_b30c, i32* %ip.global-to-local, align 4
  %v4_b838 = mul i32 %v3_b830, 16
  %v5_b838 = add i32 %v4_b838, %v2_b30c
  %v6_b838 = inttoptr i32 %v5_b838 to i32*
  %v7_b838 = load i32, i32* %v6_b838, align 4
  store i32 %v7_b838, i32* %r2.global-to-local, align 4
  store i32 %v5_b838, i32* %r3.global-to-local, align 4
  %v1_b844 = load i32, i32* @r4, align 4
  %v2_b844 = add i32 %v1_b844, 16
  %v3_b844 = inttoptr i32 %v2_b844 to i32*
  store i32 %v7_b838, i32* %v3_b844, align 4
  %v0_b848 = load i32, i32* %r3.global-to-local, align 4
  %v1_b848 = add i32 %v0_b848, 12
  %v2_b848 = inttoptr i32 %v1_b848 to i16*
  %v3_b848 = load i16, i16* %v2_b848, align 2
  %v4_b848 = zext i16 %v3_b848 to i32
  store i32 %v4_b848, i32* %r0.global-to-local, align 4
  %v1_b84c = add i32 %v0_b848, 8
  %v2_b84c = inttoptr i32 %v1_b84c to i32*
  %v3_b84c = load i32, i32* %v2_b84c, align 4
  store i32 %v3_b84c, i32* %r1.global-to-local, align 4
  %v2_b850 = load i32, i32* @r4, align 4
  %v3_b850 = add i32 %v2_b850, 20
  %v4_b850 = inttoptr i32 %v3_b850 to i16*
  store i16 %v3_b848, i16* %v4_b850, align 2
  %v0_b854 = load i32, i32* @r4, align 4
  %v1_b854 = add i32 %v0_b854, 20
  store i32 %v1_b854, i32* @r8, align 4
  %v1_b858 = add i32 %v0_b854, 33
  %v2_b858 = inttoptr i32 %v1_b858 to i8*
  %v3_b858 = load i8, i8* %v2_b858, align 1
  %v4_b858 = zext i8 %v3_b858 to i32
  store i32 %v4_b858, i32* %r2.global-to-local, align 4
  %v0_b85c = load i32, i32* %r1.global-to-local, align 4
  %v2_b85c = add i32 %v0_b854, 24
  %v3_b85c = inttoptr i32 %v2_b85c to i32*
  store i32 %v0_b85c, i32* %v3_b85c, align 4
  %v0_b860 = load i32, i32* %r2.global-to-local, align 4
  %v1_b860 = or i32 %v0_b860, 1
  store i32 %v1_b860, i32* %r2.global-to-local, align 4
  %v0_b864 = load i32, i32* %r3.global-to-local, align 4
  %v1_b864 = add i32 %v0_b864, 4
  %v2_b864 = inttoptr i32 %v1_b864 to i32*
  %v3_b864 = load i32, i32* %v2_b864, align 4
  store i32 %v3_b864, i32* %r1.global-to-local, align 4
  %v1_b868 = add i32 %v0_b864, 14
  %v2_b868 = inttoptr i32 %v1_b868 to i16*
  %v3_b868 = load i16, i16* %v2_b868, align 2
  %v4_b868 = zext i16 %v3_b868 to i32
  store i32 %v4_b868, i32* %r3.global-to-local, align 4
  %v1_b86c = trunc i32 %v1_b860 to i8
  %v2_b86c = load i32, i32* @r8, align 4
  %v3_b86c = add i32 %v2_b86c, 13
  %v4_b86c = inttoptr i32 %v3_b86c to i8*
  store i8 %v1_b86c, i8* %v4_b86c, align 1
  %v0_b870 = load i32, i32* %r3.global-to-local, align 4
  %v1_b870 = trunc i32 %v0_b870 to i16
  %v2_b870 = load i32, i32* @r8, align 4
  %v3_b870 = add i32 %v2_b870, 2
  %v4_b870 = inttoptr i32 %v3_b870 to i16*
  store i16 %v1_b870, i16* %v4_b870, align 2
  %v0_b874 = load i32, i32* @r8, align 4
  %v1_b874 = add i32 %v0_b874, 12
  %v2_b874 = inttoptr i32 %v1_b874 to i8*
  %v3_b874 = load i8, i8* %v2_b874, align 1
  %v4_b874 = zext i8 %v3_b874 to i32
  store i32 %v4_b874, i32* %r3.global-to-local, align 4
  %v1_b878 = add i32 %v0_b874, 13
  %v2_b878 = inttoptr i32 %v1_b878 to i8*
  %v3_b878 = load i8, i8* %v2_b878, align 1
  %v4_b878 = zext i8 %v3_b878 to i32
  %tmp104 = urem i8 %v3_b874, 16
  %v1_b87c = zext i8 %tmp104 to i32
  %v1_b880 = or i32 %v1_b87c, 128
  store i32 %v1_b880, i32* %r3.global-to-local, align 4
  %v1_b884 = or i32 %v4_b878, 16
  store i32 %v1_b884, i32* %r2.global-to-local, align 4
  %v0_b888 = load i32, i32* %r1.global-to-local, align 4
  %v2_b888 = add i32 %v0_b874, 8
  %v3_b888 = inttoptr i32 %v2_b888 to i32*
  store i32 %v0_b888, i32* %v3_b888, align 4
  %v0_b88c = load i32, i32* %r3.global-to-local, align 4
  %v1_b88c = trunc i32 %v0_b88c to i8
  %v2_b88c = load i32, i32* @r8, align 4
  %v3_b88c = add i32 %v2_b88c, 12
  %v4_b88c = inttoptr i32 %v3_b88c to i8*
  store i8 %v1_b88c, i8* %v4_b88c, align 1
  %v0_b890 = load i32, i32* %r2.global-to-local, align 4
  %v1_b890 = trunc i32 %v0_b890 to i8
  %v2_b890 = load i32, i32* @r8, align 4
  %v3_b890 = add i32 %v2_b890, 13
  %v4_b890 = inttoptr i32 %v3_b890 to i8*
  store i8 %v1_b890, i8* %v4_b890, align 1
  %v0_b894 = call i32 @function_dd14()
  %v1_b894 = trunc i32 %v0_b894 to i16
  store i32 %v0_b894, i32* %r0.global-to-local, align 4
  store i32 %v1_b3d8, i32* %r1.global-to-local, align 4
  %v0_b89c = load i32, i32* @r8, align 4
  %v1_b89c = add i32 %v0_b89c, 13
  %v2_b89c = inttoptr i32 %v1_b89c to i8*
  %v3_b89c = load i8, i8* %v2_b89c, align 1
  %v4_b89c = zext i8 %v3_b89c to i32
  store i32 %v1_b8a0, i32* %r2.global-to-local, align 4
  %v1_b8a4 = and i32 %v4_b89c, 223
  %v5_b8a8 = or i32 %v1_b8a4, %v4_b8a8
  store i32 %v5_b8a8, i32* %r3.global-to-local, align 4
  %v1_b8ac = trunc i32 %v5_b8a8 to i8
  store i8 %v1_b8ac, i8* %v2_b89c, align 1
  store i32 %v1_b3f8, i32* %ip.global-to-local, align 4
  %v0_b8b4 = load i32, i32* @r8, align 4
  %v1_b8b4 = add i32 %v0_b8b4, 13
  %v2_b8b4 = inttoptr i32 %v1_b8b4 to i8*
  %v3_b8b4 = load i8, i8* %v2_b8b4, align 1
  %v4_b8b4 = zext i8 %v3_b8b4 to i32
  store i32 %v1_b8b8, i32* %r3.global-to-local, align 4
  %v1_b8bc = and i32 %v4_b8b4, 239
  %v5_b8c0 = or i32 %v1_b8bc, %v4_b8c0
  store i32 %v5_b8c0, i32* %r2.global-to-local, align 4
  %v1_b8c4 = trunc i32 %v5_b8c0 to i8
  store i8 %v1_b8c4, i8* %v2_b8b4, align 1
  store i32 %v1_b418, i32* %r1.global-to-local, align 4
  %v0_b8cc = load i32, i32* @r8, align 4
  %v1_b8cc = add i32 %v0_b8cc, 13
  %v2_b8cc = inttoptr i32 %v1_b8cc to i8*
  %v3_b8cc = load i8, i8* %v2_b8cc, align 1
  %v4_b8cc = zext i8 %v3_b8cc to i32
  store i32 %v1_b8d0, i32* %r2.global-to-local, align 4
  %v1_b8d4 = and i32 %v4_b8cc, 247
  %v5_b8d8 = or i32 %v1_b8d4, %v4_b8d8
  store i32 %v5_b8d8, i32* %r3.global-to-local, align 4
  %v1_b8dc = trunc i32 %v5_b8d8 to i8
  store i8 %v1_b8dc, i8* %v2_b8cc, align 1
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b8e4 = load i32, i32* @r8, align 4
  %v1_b8e4 = add i32 %v0_b8e4, 13
  %v2_b8e4 = inttoptr i32 %v1_b8e4 to i8*
  %v3_b8e4 = load i8, i8* %v2_b8e4, align 1
  %v4_b8e4 = zext i8 %v3_b8e4 to i32
  store i32 %v1_b8e8, i32* %r3.global-to-local, align 4
  %v1_b8ec = and i32 %v4_b8e4, 251
  %v5_b8f0 = or i32 %v1_b8ec, %v4_b8f0
  store i32 %v5_b8f0, i32* %r2.global-to-local, align 4
  %v1_b8f4 = trunc i32 %v5_b8f0 to i8
  store i8 %v1_b8f4, i8* %v2_b8e4, align 1
  store i32 %v1_b458, i32* %r1.global-to-local, align 4
  %v0_b8fc = load i32, i32* @r8, align 4
  %v1_b8fc = add i32 %v0_b8fc, 13
  %v2_b8fc = inttoptr i32 %v1_b8fc to i8*
  %v3_b8fc = load i8, i8* %v2_b8fc, align 1
  %v4_b8fc = zext i8 %v3_b8fc to i32
  store i32 %v1_b900, i32* %r2.global-to-local, align 4
  %v1_b904 = and i32 %v4_b8fc, 253
  %v4_b908 = or i32 %v1_b904, %v3_b908
  store i32 %v4_b908, i32* %r3.global-to-local, align 4
  %v1_b90c = trunc i32 %v4_b908 to i8
  store i8 %v1_b90c, i8* %v2_b8fc, align 1
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b914 = load i32, i32* @r8, align 4
  %v1_b914 = add i32 %v0_b914, 13
  %v2_b914 = inttoptr i32 %v1_b914 to i8*
  %v3_b914 = load i8, i8* %v2_b914, align 1
  %v4_b914 = zext i8 %v3_b914 to i32
  %v1_b91c = and i32 %v4_b914, 254
  store i32 %v1_b91c, i32* %r2.global-to-local, align 4
  %v2_b920 = or i32 %v1_b91c, %v1_b918
  store i32 %v2_b920, i32* %r3.global-to-local, align 4
  %v1_b924 = trunc i32 %v2_b920 to i8
  store i8 %v1_b924, i8* %v2_b914, align 1
  %v3_b928 = load i32, i32* @r8, align 4
  %v4_b928 = add i32 %v3_b928, 14
  %v5_b928 = inttoptr i32 %v4_b928 to i16*
  store i16 %v1_b894, i16* %v5_b928, align 2
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %v0_b930 = load i32, i32* @r4, align 4
  %v1_b930 = add i32 %v0_b930, 40
  store i32 %v1_b930, i32* %r0.global-to-local, align 4
  %v2_b934 = inttoptr i32 %v1_b930 to i16*
  %v3_b934 = call i32 @function_dea8(i16* %v2_b934, i32 %v6_b490)
  store i32 %v3_b934, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b688

dec_label_pc_b93c:                                ; preds = %dec_label_pc_b4fc
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_b490, 40
  br label %dec_label_pc_b94c

dec_label_pc_b94c:                                ; preds = %dec_label_pc_b69c, %dec_label_pc_b93c
  %storemerge6.pre-phi = phi i32 [ %v1_b78c, %dec_label_pc_b69c ], [ %.pre, %dec_label_pc_b93c ]
  %v0_b96026 = phi i32 [ %v1_b690, %dec_label_pc_b69c ], [ 0, %dec_label_pc_b93c ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_b490, 65536
  %storemerge = add i32 %v6_b490, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b94c = add i32 %storemerge4, 1310720
  store i32 %v1_b94c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b94c, 256
  %v3_b954 = and i32 %tmp83, 65280
  store i32 %v3_b954, i32* %r3.global-to-local, align 4
  %v4_b958 = udiv i32 %v1_b94c, 16777216
  %v5_b958 = or i32 %v3_b954, %v4_b958
  store i32 %v5_b958, i32* @r8, align 4
  %v2_ba84 = icmp eq i32 %v1_b4b0, 0
  br label %dec_label_pc_b95c

dec_label_pc_b95c:                                ; preds = %dec_label_pc_b95c, %dec_label_pc_ba68, %dec_label_pc_b94c
  %v0_b960 = phi i32 [ %v0_b96026, %dec_label_pc_b94c ], [ 0, %dec_label_pc_ba68 ], [ 0, %dec_label_pc_b95c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b960 = icmp eq i32 %v0_b960, 0
  store i1 %v2_b960, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b960, label %dec_label_pc_b95c, label %dec_label_pc_b96c

dec_label_pc_b96c:                                ; preds = %dec_label_pc_b95c, %dec_label_pc_ba68
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b970

dec_label_pc_b970:                                ; preds = %dec_label_pc_b998, %dec_label_pc_b96c
  %v1_b978 = phi i32 [ %v1_ba58, %dec_label_pc_b998 ], [ 0, %dec_label_pc_b96c ]
  store i32 %v2_b31c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b978 = mul i32 %v1_b978, 4
  %v5_b978 = add i32 %v4_b978, %v2_b31c
  %v6_b978 = inttoptr i32 %v5_b978 to i32*
  %v7_b978 = load i32, i32* %v6_b978, align 4
  store i32 %v7_b978, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b980 = load i32, i32* @fp, align 4
  %v9_b980 = icmp eq i32 %v0_b980, 65535
  store i1 %v9_b980, i1* %cpsr_z.global-to-local, align 1
  %v1_b984 = add i32 %v7_b978, 20
  store i32 %v1_b984, i32* @r5, align 4
  br i1 %v9_b980, label %dec_label_pc_ba7c, label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b970
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i1 %v2_ba84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ba84, label %dec_label_pc_b998, label %dec_label_pc_ba90

dec_label_pc_b998:                                ; preds = %dec_label_pc_b98c, %dec_label_pc_ba7c, %dec_label_pc_ba90
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b99c = load i32, i32* @r4, align 4
  %v3_b99c = add i32 %v2_b99c, 10
  %v4_b99c = inttoptr i32 %v3_b99c to i16*
  store i16 0, i16* %v4_b99c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b9a4 = load i32, i32* @r4, align 4
  store i32 %v0_b9a4, i32* @r0, align 4
  %v2_b9a8 = call i32 @function_c848(i32 %v0_b9a4, i32 20)
  %v3_b9a8 = trunc i32 %v2_b9a8 to i16
  store i32 %v2_b9a8, i32* %r0.global-to-local, align 4
  %v3_b9ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b30c, i32* %r2.global-to-local, align 4
  %v3_b9b4 = mul i32 %v3_b9ac, 16
  %v2_b9b8 = add i32 %v3_b9b4, %v2_b30c
  store i32 %v2_b9b8, i32* %r1.global-to-local, align 4
  %v1_b9bc = add i32 %v2_b9b8, 4
  %v2_b9bc = inttoptr i32 %v1_b9bc to i32*
  %v3_b9bc = load i32, i32* %v2_b9bc, align 4
  %v3_b9c0 = mul i32 %v3_b9bc, 65536
  store i32 %v3_b9c0, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b9bc, 256
  %v1_b9c8 = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.21 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_b9bc, 256
  %v4_b9cc = urem i32 %tmp86, 256
  %v5_b9cc = or i32 %v4_b9cc, %v1_b9c8
  store i32 %v5_b9cc, i32* %r3.global-to-local, align 4
  %v1_b9d0 = add i32 %v3_b9bc, 1
  store i32 %v1_b9d0, i32* %r2.global-to-local, align 4
  store i32 %v1_b9d0, i32* %v2_b9bc, align 4
  %v0_b9d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b9d8 = load i32, i32* @r5, align 4
  %v2_b9d8 = add i32 %v1_b9d8, 4
  %v3_b9d8 = inttoptr i32 %v2_b9d8 to i32*
  store i32 %v0_b9d8, i32* %v3_b9d8, align 4
  %v0_b9dc = load i32, i32* %r1.global-to-local, align 4
  %v1_b9dc = add i32 %v0_b9dc, 8
  %v2_b9dc = inttoptr i32 %v1_b9dc to i32*
  %v3_b9dc = load i32, i32* %v2_b9dc, align 4
  %tmp87 = mul i32 %v3_b9dc, 256
  %v1_b9e8 = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.21 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_b9dc, 256
  %v4_b9ec = urem i32 %tmp88, 256
  %v5_b9ec = or i32 %v4_b9ec, %v1_b9e8
  %v1_b9f0 = load i32, i32* @r5, align 4
  %v2_b9f0 = add i32 %v1_b9f0, 8
  %v3_b9f0 = inttoptr i32 %v2_b9f0 to i32*
  store i32 %v5_b9ec, i32* %v3_b9f0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b9f8 = load i32, i32* @r4, align 4
  %v4_b9f8 = add i32 %v3_b9f8, 10
  %v5_b9f8 = inttoptr i32 %v4_b9f8 to i16*
  store i16 %v3_b9a8, i16* %v5_b9f8, align 2
  %v0_b9fc = load i32, i32* @r5, align 4
  store i32 %v0_b9fc, i32* @r1, align 4
  %v0_ba00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba00 = trunc i32 %v0_ba00 to i16
  %v3_ba00 = add i32 %v0_b9fc, 16
  %v4_ba00 = inttoptr i32 %v3_ba00 to i16*
  store i16 %v1_ba00, i16* %v4_ba00, align 2
  %v0_ba04 = load i32, i32* @r8, align 4
  store i32 %v0_ba04, i32* %r2.global-to-local, align 4
  %v0_ba08 = load i32, i32* @sl, align 4
  store i32 %v0_ba08, i32* %r3.global-to-local, align 4
  %v0_ba0c = load i32, i32* @r4, align 4
  store i32 %v0_ba0c, i32* %r0.global-to-local, align 4
  %v4_ba10 = call i32 @function_c898(i32 %v0_ba0c, i32 %v0_b9fc, i32 %v0_ba04, i32 %v0_ba08)
  %v5_ba10 = trunc i32 %v4_ba10 to i16
  store i32 %v4_ba10, i32* %r0.global-to-local, align 4
  %v3_ba14 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba14, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_ba1c = mul i32 %v3_ba14, 32
  store i32 %v3_ba1c, i32* %lr.global-to-local, align 4
  %v3_ba20 = load i32, i32* @r5, align 4
  %v4_ba20 = add i32 %v3_ba20, 16
  %v5_ba20 = inttoptr i32 %v4_ba20 to i16*
  store i16 %v5_ba10, i16* %v5_ba20, align 2
  %v0_ba24 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba24 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_ba24, -8
  %v5_ba24 = add i32 %v0_ba24, %tmp105
  store i32 %v5_ba24, i32* %lr.global-to-local, align 4
  %v0_ba28 = load i32, i32* @r5, align 4
  %v1_ba28 = add i32 %v0_ba28, 2
  %v2_ba28 = inttoptr i32 %v1_ba28 to i16*
  %v3_ba28 = load i16, i16* %v2_ba28, align 2
  %v1_ba2c = load i32, i32* %ip.global-to-local, align 4
  %v2_ba2c = add i32 %v1_ba2c, %v5_ba24
  store i32 %v2_ba2c, i32* @lr, align 4
  %v3_ba30 = add i32 %v2_ba2c, 2
  %v4_ba30 = inttoptr i32 %v3_ba30 to i16*
  store i16 %v3_ba28, i16* %v4_ba30, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ba3c = load i32, i32* @r4, align 4
  store i32 %v0_ba3c, i32* %r1.global-to-local, align 4
  %v0_ba40 = load i32, i32* @sb, align 4
  store i32 %v0_ba40, i32* %r0.global-to-local, align 4
  %v0_ba44 = load i32, i32* @r7, align 4
  store i32 %v0_ba44, i32* %r2.global-to-local, align 4
  %v0_ba48 = load i32, i32* @lr, align 4
  %v6_ba50 = call i32 @function_110e4(i32 %v0_ba40, i32 %v0_ba3c, i32 %v0_ba44, i32 16384, i32 %v0_ba48, i32 16)
  %v3_ba54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba54, i32* %r3.global-to-local, align 4
  %v1_ba58 = add i32 %v3_ba54, 1
  store i32 %v1_ba58, i32* %r0.global-to-local, align 4
  %v0_ba5c = load i32, i32* @r6, align 4
  %v9_ba5c = icmp eq i32 %v0_ba5c, %v1_ba58
  store i1 %v9_ba5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ba58, i32* %stack_var_-44, align 4
  %v8_ba64 = icmp sgt i32 %v0_ba5c, %v1_ba58
  br i1 %v8_ba64, label %dec_label_pc_b970, label %dec_label_pc_ba68

dec_label_pc_ba68:                                ; preds = %dec_label_pc_b998
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ba6c = icmp eq i32 %v0_ba5c, 0
  store i1 %v2_ba6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba6c, label %dec_label_pc_b95c, label %dec_label_pc_b96c

dec_label_pc_ba7c:                                ; preds = %dec_label_pc_b970
  %v0_ba7c = call i32 @function_dd14()
  %v1_ba7c = trunc i32 %v0_ba7c to i16
  store i32 %v0_ba7c, i32* %r0.global-to-local, align 4
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i1 %v2_ba84, i1* %cpsr_z.global-to-local, align 1
  %v3_ba88 = load i32, i32* @r4, align 4
  %v4_ba88 = add i32 %v3_ba88, 4
  %v5_ba88 = inttoptr i32 %v4_ba88 to i16*
  store i16 %v1_ba7c, i16* %v5_ba88, align 2
  br i1 %v2_ba84, label %dec_label_pc_b998, label %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge

dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge:    ; preds = %dec_label_pc_ba7c
  %v0_ba90.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ba90

dec_label_pc_ba90:                                ; preds = %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge, %dec_label_pc_b98c
  %v0_ba90 = phi i32 [ %v0_ba90.pre, %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge ], [ %v7_b978, %dec_label_pc_b98c ]
  %v1_ba90 = add i32 %v0_ba90, 40
  store i32 %v1_ba90, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %v2_ba98 = inttoptr i32 %v1_ba90 to i16*
  %v3_ba98 = call i32 @function_dea8(i16* %v2_ba98, i32 %v6_b490)
  store i32 %v3_ba98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b998

; uselistorder directives
  uselistorder i32 %v0_ba7c, { 1, 0 }
  uselistorder i32 %v1_ba58, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ba24, { 1, 0 }
  uselistorder i32 %v4_ba10, { 1, 0 }
  uselistorder i32 %v3_b9dc, { 1, 0 }
  uselistorder i32 %v3_b9bc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b9a8, { 1, 0 }
  uselistorder i1 %v2_ba84, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b894, { 1, 0 }
  uselistorder i32 %v0_b7cc, { 1, 0 }
  uselistorder i32 %v3_b768, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_b73c, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_b720, { 1, 0 }
  uselistorder i32 %v0_b6dc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_b68c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b678, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b604, { 1, 0 }
  uselistorder i32 %v6_b5fc, { 0, 2, 1, 3 }
  uselistorder i1 %v9_b62c, { 1, 0 }
  uselistorder i32 %v4_b640, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b588, { 1, 0, 2 }
  uselistorder i32 %v0_b738, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_b578, { 1, 0 }
  uselistorder i1 %v7_b570, { 1, 0, 2 }
  uselistorder i1 %v7_b524, { 1, 0 }
  uselistorder i32 %v3_b520, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b900, { 1, 0 }
  uselistorder i32 %v1_b8e8, { 1, 0 }
  uselistorder i32 %v1_b8d0, { 1, 0 }
  uselistorder i32 %v1_b8b8, { 1, 0 }
  uselistorder i32 %v1_b8a0, { 1, 0 }
  uselistorder i32 %v3_b638, { 1, 0 }
  uselistorder i1 %v2_b654, { 1, 0 }
  uselistorder i32 %v1_b650, { 1, 0 }
  uselistorder i32 %v4_b64c, { 2, 0, 1 }
  uselistorder i32 %v2_b560, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_b4fc, { 1, 0 }
  uselistorder i1 %v7_b4f4, { 1, 0 }
  uselistorder i1 %v7_b4c8, { 1, 0 }
  uselistorder i32 %v3_b4c4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_b4b0, { 2, 3, 1, 0 }
  uselistorder i32 %v6_b490, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_b478, { 1, 0 }
  uselistorder i32 %v1_b458, { 1, 0 }
  uselistorder i32 %v1_b438, { 1, 0 }
  uselistorder i32 %v1_b418, { 1, 0 }
  uselistorder i32 %v1_b3f8, { 1, 0 }
  uselistorder i32 %v1_b3d8, { 1, 0 }
  uselistorder i32 %v6_b3b4, { 1, 0 }
  uselistorder i32 %v1_b39c, { 1, 0 }
  uselistorder i8 %v5_b354, { 1, 0 }
  uselistorder i32 %v6_b334, { 1, 0 }
  uselistorder i32 %v2_b31c, { 0, 3, 1, 2 }
  uselistorder i32 %v2_b30c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 6, 8, 7, 10, 9, 12, 11, 17, 13, 14, 15, 16, 20, 18, 19, 22, 21, 23, 26, 25, 24, 27, 28, 29, 31, 32, 30, 33, 35, 34, 36, 37, 38, 40, 39, 1, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.21 to i32), i32 16776960), { 1, 2, 0, 4, 5, 3 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b998, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b96c, { 1, 0 }
  uselistorder label %dec_label_pc_b95c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b94c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_b6b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b688, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b5c4, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b5a4, { 1, 0 }
  uselistorder label %dec_label_pc_b580, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_b530, { 1, 0 }
  uselistorder label %dec_label_pc_b514, { 1, 0 }
}

define i32 @function_baa4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_baa4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_baa4 = load i32, i32* @sb, align 4
  %v24_baa4 = load i32, i32* @fp, align 4
  %v27_baa4 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_bac0 = call i32 @function_11cd0(i32 %arg1, i32 4)
  %v0_bac4 = load i32, i32* @r5, align 4
  store i32 %v0_bac4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bad4 = load i32, i32* @r4, align 4
  store i32 %v0_bad4, i32* %r0.global-to-local, align 4
  %v5_bad8 = inttoptr i32 %v0_bac4 to i32*
  %v6_bad8 = call i32 @function_8570(i32 %v0_bad4, i32* %v5_bad8, i32 2, i32 0)
  %v1_bae4 = urem i32 %v6_bad8, 256
  store i32 %v1_bae4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_baf0 = load i32, i32* @r5, align 4
  store i32 %v0_baf0, i32* %r1.global-to-local, align 4
  %v0_baf4 = load i32, i32* @r4, align 4
  store i32 %v0_baf4, i32* %r0.global-to-local, align 4
  %v6_bafc = inttoptr i32 %v0_baf0 to i32*
  %v7_bafc = call i32 @function_8570(i32 %v0_baf4, i32* %v6_bafc, i32 3, i32 65535)
  %v0_bb00 = load i32, i32* @r5, align 4
  store i32 %v0_bb00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bafc, i32* %sb.global-to-local, align 4
  %v0_bb10 = load i32, i32* @r4, align 4
  store i32 %v0_bb10, i32* %r0.global-to-local, align 4
  %v4_bb14 = inttoptr i32 %v0_bb00 to i32*
  %v5_bb14 = call i32 @function_8570(i32 %v0_bb10, i32* %v4_bb14, i32 4, i32 64)
  %v1_bb1c = urem i32 %v5_bb14, 256
  store i32 %v1_bb1c, i32* %ip.global-to-local, align 4
  %v0_bb20 = load i32, i32* @r5, align 4
  store i32 %v0_bb20, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb2c = load i32, i32* @r4, align 4
  store i32 %v0_bb2c, i32* %r0.global-to-local, align 4
  %v6_bb34 = inttoptr i32 %v0_bb20 to i32*
  %v7_bb34 = call i32 @function_8570(i32 %v0_bb2c, i32* %v6_bb34, i32 5, i32 0)
  %v1_bb40 = urem i32 %v7_bb34, 256
  store i32 %v1_bb40, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bb4c = load i32, i32* @r5, align 4
  store i32 %v0_bb4c, i32* %r1.global-to-local, align 4
  %v0_bb50 = load i32, i32* @r4, align 4
  store i32 %v0_bb50, i32* %r0.global-to-local, align 4
  %v5_bb58 = inttoptr i32 %v0_bb4c to i32*
  %v6_bb58 = call i32 @function_8570(i32 %v0_bb50, i32* %v5_bb58, i32 6, i32 65535)
  %v0_bb60 = load i32, i32* @r5, align 4
  store i32 %v0_bb60, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bb58, i32* @r6, align 4
  %v0_bb70 = load i32, i32* @r4, align 4
  store i32 %v0_bb70, i32* %r0.global-to-local, align 4
  %v4_bb74 = inttoptr i32 %v0_bb60 to i32*
  %v5_bb74 = call i32 @function_8570(i32 %v0_bb70, i32* %v4_bb74, i32 7, i32 65535)
  %v0_bb7c = load i32, i32* @r5, align 4
  store i32 %v0_bb7c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_bb74, i32* @sl, align 4
  %v0_bb8c = load i32, i32* @r4, align 4
  store i32 %v0_bb8c, i32* %r0.global-to-local, align 4
  %v4_bb90 = inttoptr i32 %v0_bb7c to i32*
  %v5_bb90 = call i32 @function_8570(i32 %v0_bb8c, i32* %v4_bb90, i32 17, i32 65535)
  %v0_bb9c = load i32, i32* @r5, align 4
  store i32 %v0_bb9c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bba8 = load i32, i32* @r4, align 4
  store i32 %v0_bba8, i32* %r0.global-to-local, align 4
  %v5_bbac = inttoptr i32 %v0_bb9c to i32*
  %v6_bbac = call i32 @function_8570(i32 %v0_bba8, i32* %v5_bbac, i32 18, i32 65535)
  %v0_bbb0 = load i32, i32* @r5, align 4
  store i32 %v0_bbb0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbc0 = load i32, i32* @r4, align 4
  store i32 %v0_bbc0, i32* %r0.global-to-local, align 4
  %v5_bbc4 = inttoptr i32 %v0_bbb0 to i32*
  %v6_bbc4 = call i32 @function_8570(i32 %v0_bbc0, i32* %v5_bbc4, i32 11, i32 0)
  %v0_bbc8 = load i32, i32* @r5, align 4
  store i32 %v0_bbc8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bbd8 = load i32, i32* @r4, align 4
  store i32 %v0_bbd8, i32* %r0.global-to-local, align 4
  %v5_bbdc = inttoptr i32 %v0_bbc8 to i32*
  %v6_bbdc = call i32 @function_8570(i32 %v0_bbd8, i32* %v5_bbdc, i32 12, i32 1)
  %v0_bbe0 = load i32, i32* @r5, align 4
  store i32 %v0_bbe0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbf0 = load i32, i32* @r4, align 4
  store i32 %v0_bbf0, i32* %r0.global-to-local, align 4
  %v5_bbf4 = inttoptr i32 %v0_bbe0 to i32*
  %v6_bbf4 = call i32 @function_8570(i32 %v0_bbf0, i32* %v5_bbf4, i32 13, i32 0)
  %v0_bbf8 = load i32, i32* @r5, align 4
  store i32 %v0_bbf8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc08 = load i32, i32* @r4, align 4
  store i32 %v0_bc08, i32* %r0.global-to-local, align 4
  %v5_bc0c = inttoptr i32 %v0_bbf8 to i32*
  %v6_bc0c = call i32 @function_8570(i32 %v0_bc08, i32* %v5_bc0c, i32 14, i32 0)
  %v0_bc10 = load i32, i32* @r5, align 4
  store i32 %v0_bc10, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc20 = load i32, i32* @r4, align 4
  store i32 %v0_bc20, i32* %r0.global-to-local, align 4
  %v5_bc24 = inttoptr i32 %v0_bc10 to i32*
  %v6_bc24 = call i32 @function_8570(i32 %v0_bc20, i32* %v5_bc24, i32 15, i32 0)
  %v0_bc28 = load i32, i32* @r5, align 4
  store i32 %v0_bc28, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc38 = load i32, i32* @r4, align 4
  store i32 %v0_bc38, i32* %r0.global-to-local, align 4
  %v5_bc3c = inttoptr i32 %v0_bc28 to i32*
  %v6_bc3c = call i32 @function_8570(i32 %v0_bc38, i32* %v5_bc3c, i32 16, i32 0)
  %v0_bc40 = load i32, i32* @r5, align 4
  store i32 %v0_bc40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bc50 = load i32, i32* @r4, align 4
  store i32 %v0_bc50, i32* %r0.global-to-local, align 4
  %v5_bc54 = inttoptr i32 %v0_bc40 to i32*
  %v6_bc54 = call i32 @function_8570(i32 %v0_bc50, i32* %v5_bc54, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc64 = load i32, i32* @r5, align 4
  store i32 %v0_bc64, i32* %r1.global-to-local, align 4
  %v0_bc68 = load i32, i32* @r4, align 4
  store i32 %v0_bc68, i32* %r0.global-to-local, align 4
  %v4_bc6c = inttoptr i32 %v0_bc64 to i32*
  %v5_bc6c = call i32 @function_8570(i32 %v0_bc68, i32* %v4_bc6c, i32 1, i32 1)
  %v2_bc78 = load i32, i32* @global_var_205a0.46, align 4
  store i32 %v2_bc78, i32* %r3.global-to-local, align 4
  %v1_bc7c = urem i32 %v5_bc6c, 256
  store i32 %v1_bc7c, i32* %ip.global-to-local, align 4
  %v0_bc80 = load i32, i32* @r5, align 4
  store i32 %v0_bc80, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bc88 = load i32, i32* @r4, align 4
  store i32 %v0_bc88, i32* %r0.global-to-local, align 4
  %v5_bc90 = inttoptr i32 %v0_bc80 to i32*
  %v6_bc90 = call i32 @function_8504(i32 %v0_bc88, i32* %v5_bc90, i32 25, i32 %v2_bc78, i32 %v1_bc7c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bca4 = call i32 @function_11168(i32 2, i32 3, i32 6)
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v7_bca8 = icmp eq i32 %v3_bca4, -1
  store i1 %v7_bca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bca8, label %dec_label_pc_c170, label %dec_label_pc_bcb4

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_baa4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bcbc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bcbc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bcd0 = call i32 @function_11124(i32 %v3_bca4, i32 0, i32 3, i32 %v6_bcbc, i32 4)
  store i32 %v5_bcd0, i32* %r0.global-to-local, align 4
  %v7_bcd4 = icmp eq i32 %v5_bcd0, -1
  store i1 %v7_bcd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bcd4, label %dec_label_pc_c168, label %dec_label_pc_bcdc

dec_label_pc_bcdc:                                ; preds = %dec_label_pc_bcb4
  %v0_bcdc = load i32, i32* %sb.global-to-local, align 4
  %v3_bcdc = mul i32 %v0_bcdc, 65536
  store i32 %v3_bcdc, i32* @r5, align 4
  %v0_bce0 = load i32, i32* @r6, align 4
  %v0_bce4 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_bcec = urem i32 %v0_bcdc, 65536
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  %v3_bcf0 = urem i32 %v0_bce0, 65536
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v3_bcf4 = urem i32 %v0_bce4, 65536
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v0_bcf8 = load i32, i32* @r7, align 4
  %v2_bcf8 = icmp eq i32 %v0_bcf8, 0
  store i1 %v2_bcf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bcf8, label %dec_label_pc_c17c, label %dec_label_pc_bd10

dec_label_pc_bd10:                                ; preds = %dec_label_pc_bcdc
  %v3_bd14 = mul i32 %v6_bc54, 65536
  %v1_bd18 = add i32 %v3_bd14, 2621440
  store i32 %v1_bd18, i32* @lr, align 4
  %tmp59 = mul i32 %v0_bce0, 256
  %v3_bd3c = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bce4, 256
  %v3_bd40 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bce0, 256
  %v4_bd44 = urem i32 %tmp61, 256
  %v5_bd44 = or i32 %v4_bd44, %v3_bd3c
  store i32 %v5_bd44, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_bce4, 256
  %v4_bd48 = urem i32 %tmp62, 256
  %v5_bd48 = or i32 %v4_bd48, %v3_bd40
  store i32 %v5_bd48, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_bd18, 256
  %v3_bd5c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_bcdc, 256
  %v3_bd60 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v5_bb90, 256
  %v3_bd64 = and i32 %tmp65, 65280
  %v1_bd68 = urem i32 %v6_bbc4, 2
  %v1_bd6c = urem i32 %v6_bbdc, 2
  %tmp66 = udiv i32 %v5_bb90, 256
  %v4_bd70 = urem i32 %tmp66, 256
  %v5_bd70 = or i32 %v4_bd70, %v3_bd64
  %v4_bd74 = udiv i32 %v1_bd18, 16777216
  %v5_bd74 = or i32 %v3_bd5c, %v4_bd74
  store i32 %v5_bd74, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_bcdc, 256
  %v4_bd78 = urem i32 %tmp67, 256
  %v5_bd78 = or i32 %v4_bd78, %v3_bd60
  store i32 %v5_bd78, i32* @fp, align 4
  %v1_bd94 = urem i32 %v6_bbf4, 2
  store i32 %v1_bd94, i32* %r2.global-to-local, align 4
  %v1_bd98 = urem i32 %v6_bc0c, 2
  store i32 %v1_bd98, i32* %r3.global-to-local, align 4
  %v1_bd9c = urem i32 %v6_bc24, 2
  store i32 %v1_bd9c, i32* %ip.global-to-local, align 4
  %v1_bda0 = urem i32 %v6_bc3c, 2
  store i32 %v1_bda0, i32* %r0.global-to-local, align 4
  %v1_bda4 = urem i32 %v6_bbf4, 256
  store i32 %v1_bda4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_bad8, 16777216
  %v4_be18 = sdiv i32 %sext, 16777216
  %sext3 = mul i32 %v5_bb14, 16777216
  %v4_be24 = sdiv i32 %sext3, 16777216
  %tmp = sub nsw i32 0, %v1_bd6c
  %v4_be90 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_bd94
  %v4_beac = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_bd98
  %v4_bec0 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_bd9c
  %v3_bed4 = and i32 %tmp74, 2
  %v2_bef8 = icmp eq i32 %v1_bda4, 0
  %v1_be20 = trunc i32 %v4_be18 to i8
  %extract.t = trunc i32 %v4_be24 to i8
  br label %dec_label_pc_bdc4

dec_label_pc_bdc4:                                ; preds = %bb70, %dec_label_pc_bd10
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_bdd0 = call i32 @function_11cd0(i32 1510, i32 1)
  store i32 %v2_bdd0, i32* %r0.global-to-local, align 4
  %v2_bdd8 = load i32, i32* @r4, align 4
  %v5_bdd8 = mul i32 %v2_bdd8, 4
  %v6_bdd8 = add i32 %v5_bdd8, %v2_bac0
  %v7_bdd8 = inttoptr i32 %v6_bdd8 to i32*
  store i32 %v2_bdd0, i32* %v7_bdd8, align 4
  %v3_bddc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bddc, i32* %r2.global-to-local, align 4
  %v5_bde4 = mul i32 %v3_bddc, 24
  %v1_bde8 = load i32, i32* @r8, align 4
  %v2_bde8 = add i32 %v1_bde8, %v5_bde4
  store i32 %v2_bde8, i32* %r1.global-to-local, align 4
  store i32 %v2_bac0, i32* %r3.global-to-local, align 4
  %v4_bdf0 = mul i32 %v3_bddc, 4
  %v5_bdf0 = add i32 %v4_bdf0, %v2_bac0
  %v6_bdf0 = inttoptr i32 %v5_bdf0 to i32*
  %v7_bdf0 = load i32, i32* %v6_bdf0, align 4
  store i32 %v7_bdf0, i32* @r5, align 4
  %v1_bdf4 = inttoptr i32 %v7_bdf0 to i8*
  %v2_bdf4 = load i8, i8* %v1_bdf4, align 1
  %tmp75 = urem i8 %v2_bdf4, 16
  %v1_bdf8 = zext i8 %tmp75 to i32
  %v1_bdfc = or i32 %v1_bdf8, 64
  store i32 %v1_bdfc, i32* %r3.global-to-local, align 4
  %v1_be00 = trunc i32 %v1_bdfc to i8
  store i8 %v1_be00, i8* %v1_bdf4, align 1
  %v0_be04 = load i32, i32* @r5, align 4
  %v1_be04 = inttoptr i32 %v0_be04 to i8*
  %v2_be04 = load i8, i8* %v1_be04, align 1
  %v1_be08 = and i8 %v2_be04, -16
  %v1_be0c = or i8 %v1_be08, 5
  store i32 %v1_bb40, i32* %ip.global-to-local, align 4
  store i8 %v1_be0c, i8* %v1_be04, align 1
  store i32 %v4_be18, i32* %r0.global-to-local, align 4
  %v0_be1c = load i32, i32* %ip.global-to-local, align 4
  %v2_be1c = icmp eq i32 %v0_be1c, 0
  store i1 %v2_be1c, i1* %cpsr_z.global-to-local, align 1
  %v2_be20 = load i32, i32* @r5, align 4
  %v3_be20 = add i32 %v2_be20, 1
  %v4_be20 = inttoptr i32 %v3_be20 to i8*
  store i8 %v1_be20, i8* %v4_be20, align 1
  store i32 %v4_be24, i32* %r2.global-to-local, align 4
  %v0_be28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be28, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bdc4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_be2c = load i32, i32* @r5, align 4
  %v4_be2c = add i32 %v3_be2c, 6
  %v5_be2c = inttoptr i32 %v4_be2c to i16*
  store i16 64, i16* %v5_be2c, align 2
  %v0_be34.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_be34.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bdc4, %bb
  %v0_be34.off0 = phi i8 [ %extract.t, %dec_label_pc_bdc4 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_be34 = load i32, i32* @r5, align 4
  %v3_be34 = add i32 %v2_be34, 8
  %v4_be34 = inttoptr i32 %v3_be34 to i8*
  store i8 %v0_be34.off0, i8* %v4_be34, align 1
  %v0_be38 = load i32, i32* %r3.global-to-local, align 4
  %v1_be38 = trunc i32 %v0_be38 to i8
  %v2_be38 = load i32, i32* @r5, align 4
  %v3_be38 = add i32 %v2_be38, 9
  %v4_be38 = inttoptr i32 %v3_be38 to i8*
  store i8 %v1_be38, i8* %v4_be38, align 1
  store i32 %v6_bc90, i32* %ip.global-to-local, align 4
  %v1_be40 = load i32, i32* @r5, align 4
  %v2_be40 = add i32 %v1_be40, 12
  %v3_be40 = inttoptr i32 %v2_be40 to i32*
  store i32 %v6_bc90, i32* %v3_be40, align 4
  %v0_be44 = load i32, i32* %r1.global-to-local, align 4
  %v1_be44 = add i32 %v0_be44, 16
  %v2_be44 = inttoptr i32 %v1_be44 to i32*
  %v3_be44 = load i32, i32* %v2_be44, align 4
  store i32 %v3_be44, i32* %r3.global-to-local, align 4
  %v0_be48 = load i32, i32* @sb, align 4
  %v1_be48 = trunc i32 %v0_be48 to i16
  %v2_be48 = load i32, i32* @r5, align 4
  %v3_be48 = add i32 %v2_be48, 2
  %v4_be48 = inttoptr i32 %v3_be48 to i16*
  store i16 %v1_be48, i16* %v4_be48, align 2
  %v0_be4c = load i32, i32* @fp, align 4
  %v1_be4c = trunc i32 %v0_be4c to i16
  %v2_be4c = load i32, i32* @r5, align 4
  %v3_be4c = add i32 %v2_be4c, 4
  %v4_be4c = inttoptr i32 %v3_be4c to i16*
  store i16 %v1_be4c, i16* %v4_be4c, align 2
  %v0_be50 = load i32, i32* %r3.global-to-local, align 4
  %v1_be50 = load i32, i32* @r5, align 4
  %v2_be50 = add i32 %v1_be50, 16
  %v3_be50 = inttoptr i32 %v2_be50 to i32*
  store i32 %v0_be50, i32* %v3_be50, align 4
  %v0_be54 = load i32, i32* @r6, align 4
  %v1_be54 = trunc i32 %v0_be54 to i16
  %v2_be54 = load i32, i32* @r5, align 4
  %v3_be54 = add i32 %v2_be54, 20
  %v4_be54 = inttoptr i32 %v3_be54 to i16*
  store i16 %v1_be54, i16* %v4_be54, align 2
  %v0_be58 = load i32, i32* @r5, align 4
  %v1_be58 = add i32 %v0_be58, 20
  store i32 %v1_be58, i32* @r4, align 4
  %v1_be5c = add i32 %v0_be58, 32
  %v2_be5c = inttoptr i32 %v1_be5c to i8*
  %v3_be5c = load i8, i8* %v2_be5c, align 1
  %v4_be5c = zext i8 %v3_be5c to i32
  store i32 %v4_be5c, i32* %r3.global-to-local, align 4
  %v1_be60 = add i32 %v0_be58, 33
  %v2_be60 = inttoptr i32 %v1_be60 to i8*
  %v3_be60 = load i8, i8* %v2_be60, align 1
  %v4_be60 = zext i8 %v3_be60 to i32
  store i32 %v1_bd68, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_be5c, 16
  %v1_be68 = zext i8 %tmp76 to i32
  %v1_be6c = or i32 %v1_be68, 80
  store i32 %v1_be6c, i32* %r3.global-to-local, align 4
  %v1_be70 = and i32 %v4_be60, 223
  store i32 %v1_be70, i32* %r2.global-to-local, align 4
  %v1_be74 = trunc i32 %v1_be6c to i8
  store i8 %v1_be74, i8* %v2_be5c, align 1
  %v0_be78 = load i32, i32* %r2.global-to-local, align 4
  %v1_be78 = load i32, i32* %r0.global-to-local, align 4
  %v4_be78 = mul i32 %v1_be78, 32
  %v5_be78 = or i32 %v4_be78, %v0_be78
  store i32 %v5_be78, i32* %r2.global-to-local, align 4
  store i32 %v5_bd70, i32* %r1.global-to-local, align 4
  %v1_be80 = trunc i32 %v5_be78 to i8
  %v2_be80 = load i32, i32* @r4, align 4
  %v3_be80 = add i32 %v2_be80, 13
  %v4_be80 = inttoptr i32 %v3_be80 to i8*
  store i8 %v1_be80, i8* %v4_be80, align 1
  %v0_be84 = load i32, i32* @r4, align 4
  %v1_be84 = add i32 %v0_be84, 13
  %v2_be84 = inttoptr i32 %v1_be84 to i8*
  %v3_be84 = load i8, i8* %v2_be84, align 1
  %v4_be84 = zext i8 %v3_be84 to i32
  store i32 %v1_bd6c, i32* %r2.global-to-local, align 4
  %v1_be8c = and i32 %v4_be84, 239
  %v5_be90 = or i32 %v1_be8c, %v4_be90
  store i32 %v5_be90, i32* %r3.global-to-local, align 4
  %v0_be94 = load i32, i32* %r1.global-to-local, align 4
  %v2_be94 = add i32 %v0_be84, 4
  %v3_be94 = inttoptr i32 %v2_be94 to i32*
  store i32 %v0_be94, i32* %v3_be94, align 4
  %v0_be98 = load i32, i32* @sl, align 4
  %v1_be98 = trunc i32 %v0_be98 to i16
  %v2_be98 = load i32, i32* @r4, align 4
  %v3_be98 = add i32 %v2_be98, 2
  %v4_be98 = inttoptr i32 %v3_be98 to i16*
  store i16 %v1_be98, i16* %v4_be98, align 2
  %v0_be9c = load i32, i32* %r3.global-to-local, align 4
  %v1_be9c = trunc i32 %v0_be9c to i8
  %v2_be9c = load i32, i32* @r4, align 4
  %v3_be9c = add i32 %v2_be9c, 13
  %v4_be9c = inttoptr i32 %v3_be9c to i8*
  store i8 %v1_be9c, i8* %v4_be9c, align 1
  %v0_bea0 = load i32, i32* @r4, align 4
  %v1_bea0 = add i32 %v0_bea0, 13
  %v2_bea0 = inttoptr i32 %v1_bea0 to i8*
  %v3_bea0 = load i8, i8* %v2_bea0, align 1
  %v4_bea0 = zext i8 %v3_bea0 to i32
  store i32 %v1_bd94, i32* %r3.global-to-local, align 4
  %v1_bea8 = and i32 %v4_bea0, 247
  %v5_beac = or i32 %v1_bea8, %v4_beac
  store i32 %v5_beac, i32* %r2.global-to-local, align 4
  %v1_beb0 = trunc i32 %v5_beac to i8
  store i8 %v1_beb0, i8* %v2_bea0, align 1
  %v0_beb4 = load i32, i32* @r4, align 4
  %v1_beb4 = add i32 %v0_beb4, 13
  %v2_beb4 = inttoptr i32 %v1_beb4 to i8*
  %v3_beb4 = load i8, i8* %v2_beb4, align 1
  %v4_beb4 = zext i8 %v3_beb4 to i32
  store i32 %v1_bd98, i32* %ip.global-to-local, align 4
  %v1_bebc = and i32 %v4_beb4, 251
  %v5_bec0 = or i32 %v1_bebc, %v4_bec0
  store i32 %v5_bec0, i32* %r3.global-to-local, align 4
  %v1_bec4 = trunc i32 %v5_bec0 to i8
  store i8 %v1_bec4, i8* %v2_beb4, align 1
  %v0_bec8 = load i32, i32* @r4, align 4
  %v1_bec8 = add i32 %v0_bec8, 13
  %v2_bec8 = inttoptr i32 %v1_bec8 to i8*
  %v3_bec8 = load i8, i8* %v2_bec8, align 1
  %v4_bec8 = zext i8 %v3_bec8 to i32
  store i32 %v1_bd9c, i32* %r0.global-to-local, align 4
  %v1_bed0 = and i32 %v4_bec8, 253
  %v4_bed4 = or i32 %v1_bed0, %v3_bed4
  store i32 %v4_bed4, i32* %r2.global-to-local, align 4
  %v1_bed8 = trunc i32 %v4_bed4 to i8
  store i8 %v1_bed8, i8* %v2_bec8, align 1
  %v0_bedc = load i32, i32* @r4, align 4
  %v1_bedc = add i32 %v0_bedc, 13
  %v2_bedc = inttoptr i32 %v1_bedc to i8*
  %v3_bedc = load i8, i8* %v2_bedc, align 1
  %v4_bedc = zext i8 %v3_bedc to i32
  store i32 %v1_bda0, i32* %r1.global-to-local, align 4
  %v1_bee4 = and i32 %v4_bedc, 254
  %v2_bee8 = or i32 %v1_bee4, %v1_bda0
  store i32 %v2_bee8, i32* %r3.global-to-local, align 4
  %v1_beec = trunc i32 %v2_bee8 to i8
  store i8 %v1_beec, i8* %v2_bedc, align 1
  %v0_bef0 = call i32 @function_dd14()
  %v1_bef0 = trunc i32 %v0_bef0 to i16
  store i32 %v0_bef0, i32* %r0.global-to-local, align 4
  store i32 %v1_bda4, i32* %r2.global-to-local, align 4
  store i1 %v2_bef8, i1* %cpsr_z.global-to-local, align 1
  %v3_bf04.pre = load i32, i32* @r4, align 4
  br i1 %v2_bef8, label %.thread4, label %bb68

bb68:                                             ; preds = %.thread
  %v2_befc = add i32 %v3_bf04.pre, 13
  %v3_befc = inttoptr i32 %v2_befc to i8*
  %v4_befc = load i8, i8* %v3_befc, align 1
  %v5_befc = zext i8 %v4_befc to i32
  %v2_bf00 = or i32 %v5_befc, 8
  store i32 %v2_bf00, i32* @r3, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread, %bb68
  %v4_bf04 = add i32 %v3_bf04.pre, 14
  %v5_bf04 = inttoptr i32 %v4_bf04 to i16*
  store i16 %v1_bef0, i16* %v5_bf04, align 2
  store i32 %v6_bc54, i32* %r1.global-to-local, align 4
  %v0_bf0c = load i32, i32* @r5, align 4
  %v1_bf0c = add i32 %v0_bf0c, 40
  store i32 %v1_bf0c, i32* %r0.global-to-local, align 4
  br i1 %v2_bef8, label %bb70, label %bb69

bb69:                                             ; preds = %.thread4
  %v1_bf10 = load i32, i32* @r3, align 4
  %v2_bf10 = trunc i32 %v1_bf10 to i8
  %v3_bf10 = load i32, i32* @r4, align 4
  %v4_bf10 = add i32 %v3_bf10, 13
  %v5_bf10 = inttoptr i32 %v4_bf10 to i8*
  store i8 %v2_bf10, i8* %v5_bf10, align 1
  br label %bb70

bb70:                                             ; preds = %.thread4, %bb69
  %v2_bf14 = inttoptr i32 %v1_bf0c to i16*
  %v3_bf14 = call i32 @function_dea8(i16* %v2_bf14, i32 %v6_bc54)
  store i32 %v3_bf14, i32* %r0.global-to-local, align 4
  %v3_bf18 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf18, i32* %r3.global-to-local, align 4
  %v1_bf1c = add i32 %v3_bf18, 1
  store i32 %v1_bf1c, i32* @r4, align 4
  %v1_bf20 = load i32, i32* @r7, align 4
  %v9_bf20 = icmp eq i32 %v1_bf1c, %v1_bf20
  store i1 %v9_bf20, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf1c, i32* %stack_var_-44, align 4
  %v5_bf28 = icmp slt i32 %v1_bf1c, %v1_bf20
  br i1 %v5_bf28, label %dec_label_pc_bdc4, label %dec_label_pc_bf2c

dec_label_pc_bf2c:                                ; preds = %bb70
  store i32 %v6_bc54, i32* %r3.global-to-local, align 4
  %v1_bf30 = add i32 %v6_bc54, 20
  store i32 %v1_bf30, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_bf38

dec_label_pc_bf38:                                ; preds = %dec_label_pc_c17c, %dec_label_pc_bf2c
  %v0_bf508 = phi i32 [ %v1_bf20, %dec_label_pc_bf2c ], [ 0, %dec_label_pc_c17c ]
  %stack_var_-140.0 = phi i32 [ %v3_bd14, %dec_label_pc_bf2c ], [ %v3_c188, %dec_label_pc_c17c ]
  %storemerge = add i32 %v6_bc54, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_bf3c = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_bf3c, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_bf3c, 256
  %v3_bf44 = and i32 %tmp71, 65280
  store i32 %v3_bf44, i32* %r3.global-to-local, align 4
  %v4_bf48 = udiv i32 %v1_bf3c, 16777216
  %v5_bf48 = or i32 %v3_bf44, %v4_bf48
  store i32 %v5_bf48, i32* @sl, align 4
  %v3_c0e8 = icmp eq i32 %v3_bcec, 65535
  %v2_c14c = icmp eq i32 %v1_bc7c, 0
  %v2_bf88 = icmp eq i32 %v6_bc90, -1
  %v7_bf88 = icmp eq i32 %v6_bc90, -1
  br label %dec_label_pc_bf4c

dec_label_pc_bf4c:                                ; preds = %dec_label_pc_bf4c, %dec_label_pc_c064, %dec_label_pc_bf38
  %v0_bf50 = phi i32 [ %v0_bf508, %dec_label_pc_bf38 ], [ 0, %dec_label_pc_c064 ], [ 0, %dec_label_pc_bf4c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bf50 = icmp eq i32 %v0_bf50, 0
  store i1 %v2_bf50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bf50, label %dec_label_pc_bf4c, label %dec_label_pc_bf5c

dec_label_pc_bf5c:                                ; preds = %dec_label_pc_bf4c, %dec_label_pc_c064
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf60

dec_label_pc_bf60:                                ; preds = %dec_label_pc_bfe0, %dec_label_pc_bf5c
  %v1_bf74 = phi i32 [ %v1_c054, %dec_label_pc_bfe0 ], [ 0, %dec_label_pc_bf5c ]
  %v5_bf64 = mul i32 %v1_bf74, 24
  %v1_bf68 = load i32, i32* @r8, align 4
  %v2_bf68 = add i32 %v1_bf68, %v5_bf64
  store i32 %v2_bf68, i32* %r3.global-to-local, align 4
  store i32 %v2_bac0, i32* %ip.global-to-local, align 4
  %v1_bf70 = add i32 %v2_bf68, 20
  %v2_bf70 = inttoptr i32 %v1_bf70 to i8*
  %v3_bf70 = load i8, i8* %v2_bf70, align 1
  %v4_bf70 = zext i8 %v3_bf70 to i32
  store i32 %v4_bf70, i32* %r2.global-to-local, align 4
  %v4_bf74 = mul i32 %v1_bf74, 4
  %v5_bf74 = add i32 %v4_bf74, %v2_bac0
  %v6_bf74 = inttoptr i32 %v5_bf74 to i32*
  %v7_bf74 = load i32, i32* %v6_bf74, align 4
  store i32 %v7_bf74, i32* @r5, align 4
  %v7_bf78 = icmp eq i8 %v3_bf70, 31
  store i1 %v7_bf78, i1* %cpsr_z.global-to-local, align 1
  %v1_bf7c = add i32 %v7_bf74, 20
  store i32 %v1_bf7c, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_bf70, 32
  br i1 %tmp77, label %dec_label_pc_c078, label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_bf60
  store i32 %v6_bc90, i32* %r0.global-to-local, align 4
  store i1 %v7_bf88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bf88, label %dec_label_pc_c0d8, label %dec_label_pc_bf90

dec_label_pc_bf90:                                ; preds = %dec_label_pc_c078, %dec_label_pc_bf84
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c0e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c0e8, label %dec_label_pc_c0f4, label %dec_label_pc_bfa4

dec_label_pc_bfa4:                                ; preds = %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge, %dec_label_pc_bf90
  %v1_bfa8 = phi i32 [ %v1_bfa8.pre, %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge ], [ 65535, %dec_label_pc_bf90 ]
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v9_bfa8 = icmp eq i32 %v3_bcf0, %v1_bfa8
  store i1 %v9_bfa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfa8, label %dec_label_pc_c108, label %dec_label_pc_bfb0

dec_label_pc_bfb0:                                ; preds = %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge, %dec_label_pc_bfa4
  %v1_bfb4 = phi i32 [ %v1_bfb4.pre, %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge ], [ %v1_bfa8, %dec_label_pc_bfa4 ]
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v9_bfb4 = icmp eq i32 %v3_bcf4, %v1_bfb4
  store i1 %v9_bfb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfb4, label %dec_label_pc_c11c, label %dec_label_pc_bfbc

dec_label_pc_bfbc:                                ; preds = %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge, %dec_label_pc_bfb0
  %v1_bfc0 = phi i32 [ %v1_bfc0.pre, %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge ], [ %v1_bfb4, %dec_label_pc_bfb0 ]
  store i32 %v5_bb90, i32* %ip.global-to-local, align 4
  %v9_bfc0 = icmp eq i32 %v5_bb90, %v1_bfc0
  store i1 %v9_bfc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfc0, label %dec_label_pc_c130, label %dec_label_pc_bfc8

dec_label_pc_bfc8:                                ; preds = %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge, %dec_label_pc_bfbc
  %v1_bfcc = phi i32 [ %v1_bfcc.pre, %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge ], [ %v1_bfc0, %dec_label_pc_bfbc ]
  store i32 %v6_bbac, i32* %r0.global-to-local, align 4
  %v9_bfcc = icmp eq i32 %v6_bbac, %v1_bfcc
  store i1 %v9_bfcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfcc, label %dec_label_pc_c144, label %dec_label_pc_bfd4

dec_label_pc_bfd4:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfc8
  store i32 %v1_bc7c, i32* %r1.global-to-local, align 4
  store i1 %v2_c14c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c14c, label %dec_label_pc_bfe0, label %dec_label_pc_c158

dec_label_pc_bfe0:                                ; preds = %dec_label_pc_bfd4, %dec_label_pc_c144, %dec_label_pc_c158
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_bfe4 = load i32, i32* @r5, align 4
  %v3_bfe4 = add i32 %v2_bfe4, 10
  %v4_bfe4 = inttoptr i32 %v3_bfe4 to i16*
  store i16 0, i16* %v4_bfe4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bfec = load i32, i32* @r5, align 4
  store i32 %v0_bfec, i32* @r0, align 4
  %v2_bff0 = call i32 @function_c848(i32 %v0_bfec, i32 20)
  %v3_bff0 = trunc i32 %v2_bff0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_bff8 = load i32, i32* @r5, align 4
  %v4_bff8 = add i32 %v3_bff8, 10
  %v5_bff8 = inttoptr i32 %v4_bff8 to i16*
  store i16 %v3_bff0, i16* %v5_bff8, align 2
  %v0_bffc = load i32, i32* @r6, align 4
  store i32 %v0_bffc, i32* @r1, align 4
  %v0_c000 = load i32, i32* %r3.global-to-local, align 4
  %v1_c000 = trunc i32 %v0_c000 to i16
  %v3_c000 = add i32 %v0_bffc, 16
  %v4_c000 = inttoptr i32 %v3_c000 to i16*
  store i16 %v1_c000, i16* %v4_c000, align 2
  %v0_c004 = load i32, i32* @sl, align 4
  store i32 %v0_c004, i32* %r2.global-to-local, align 4
  %v0_c008 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_c008, i32* %r3.global-to-local, align 4
  %v0_c00c = load i32, i32* @r5, align 4
  store i32 %v0_c00c, i32* %r0.global-to-local, align 4
  %v4_c010 = call i32 @function_c898(i32 %v0_c00c, i32 %v0_bffc, i32 %v0_c004, i32 %v0_c008)
  %v5_c010 = trunc i32 %v4_c010 to i16
  store i32 %v4_c010, i32* %r0.global-to-local, align 4
  %v3_c014 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c014, i32* %r3.global-to-local, align 4
  %v3_c018 = mul i32 %v3_c014, 32
  store i32 %v3_c018, i32* %lr.global-to-local, align 4
  %v3_c01c = load i32, i32* @r6, align 4
  %v4_c01c = add i32 %v3_c01c, 16
  %v5_c01c = inttoptr i32 %v4_c01c to i16*
  store i16 %v5_c010, i16* %v5_c01c, align 2
  %v0_c020 = load i32, i32* %lr.global-to-local, align 4
  %v1_c020 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_c020, -8
  %v5_c020 = add i32 %v0_c020, %tmp78
  store i32 %v5_c020, i32* %lr.global-to-local, align 4
  %v0_c024 = load i32, i32* @r6, align 4
  %v1_c024 = add i32 %v0_c024, 2
  %v2_c024 = inttoptr i32 %v1_c024 to i16*
  %v3_c024 = load i16, i16* %v2_c024, align 2
  %v1_c028 = load i32, i32* @r8, align 4
  %v2_c028 = add i32 %v1_c028, %v5_c020
  store i32 %v2_c028, i32* @lr, align 4
  %v3_c02c = add i32 %v2_c028, 2
  %v4_c02c = inttoptr i32 %v3_c02c to i16*
  store i16 %v3_c024, i16* %v4_c02c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c038 = load i32, i32* @r5, align 4
  store i32 %v0_c038, i32* %r1.global-to-local, align 4
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v0_c040 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c040, i32* %r2.global-to-local, align 4
  %v0_c044 = load i32, i32* @lr, align 4
  %v6_c04c = call i32 @function_110e4(i32 %v3_bca4, i32 %v0_c038, i32 %v0_c040, i32 16384, i32 %v0_c044, i32 16)
  %v3_c050 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c050, i32* %r3.global-to-local, align 4
  %v1_c054 = add i32 %v3_c050, 1
  store i32 %v1_c054, i32* %r0.global-to-local, align 4
  %v1_c058 = load i32, i32* @r7, align 4
  %v9_c058 = icmp eq i32 %v1_c054, %v1_c058
  store i1 %v9_c058, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c054, i32* %stack_var_-44, align 4
  %v5_c060 = icmp slt i32 %v1_c054, %v1_c058
  br i1 %v5_c060, label %dec_label_pc_bf60, label %dec_label_pc_c064

dec_label_pc_c064:                                ; preds = %dec_label_pc_bfe0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c068 = icmp eq i32 %v1_c058, 0
  store i1 %v2_c068, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c068, label %dec_label_pc_bf4c, label %dec_label_pc_bf5c

dec_label_pc_c078:                                ; preds = %dec_label_pc_bf60
  %v1_c078 = add i32 %v2_bf68, 16
  %v2_c078 = inttoptr i32 %v1_c078 to i32*
  %v3_c078 = load i32, i32* %v2_c078, align 4
  %v0_c07c = call i32 @function_dd14()
  store i32 %v0_c07c, i32* %r0.global-to-local, align 4
  %v3_c080 = load i32, i32* %stack_var_-44, align 4
  %v5_c088 = mul i32 %v3_c080, 24
  %v1_c08c = and i32 %v3_c078, 16711680
  store i32 %v1_c08c, i32* %ip.global-to-local, align 4
  %v3_c090 = udiv i32 %v3_c078, 16777216
  %v4_c094 = udiv i32 %v1_c08c, 256
  %v5_c094 = or i32 %v4_c094, %v3_c090
  store i32 %v5_c094, i32* %r2.global-to-local, align 4
  %v1_c098 = load i32, i32* @r8, align 4
  %v2_c098 = add i32 %v1_c098, %v5_c088
  store i32 %v2_c098, i32* %r1.global-to-local, align 4
  %v1_c09c = and i32 %v3_c078, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_c09c, i32* %r3.global-to-local, align 4
  %v1_c0a0 = add i32 %v2_c098, 20
  %v2_c0a0 = inttoptr i32 %v1_c0a0 to i8*
  %v3_c0a0 = load i8, i8* %v2_c0a0, align 1
  %v4_c0a0 = zext i8 %v3_c0a0 to i32
  store i32 %v4_c0a0, i32* %ip.global-to-local, align 4
  %v4_c0a4 = mul i32 %v1_c09c, 256
  %v4_c0a8 = mul i32 %v3_c078, 16777216
  %v5_c0a4 = or i32 %v4_c0a4, %v4_c0a8
  %v5_c0a8 = or i32 %v5_c0a4, %v5_c094
  %v7_c0ac = lshr i32 %v0_c07c, %v4_c0a0
  %v8_c0ac = add i32 %v7_c0ac, %v5_c0a8
  store i32 %v8_c0ac, i32* %r2.global-to-local, align 4
  %v1_c0bc = and i32 %v8_c0ac, 65280
  store i32 %v1_c0bc, i32* %r1.global-to-local, align 4
  store i32 %v6_bc90, i32* %r0.global-to-local, align 4
  %v5_c0c8 = call i32 @llvm.bswap.i32(i32 %v8_c0ac)
  store i32 %v5_c0c8, i32* %r3.global-to-local, align 4
  store i1 %v7_bf88, i1* %cpsr_z.global-to-local, align 1
  %v1_c0d0 = load i32, i32* @r5, align 4
  %v2_c0d0 = add i32 %v1_c0d0, 16
  %v3_c0d0 = inttoptr i32 %v2_c0d0 to i32*
  store i32 %v5_c0c8, i32* %v3_c0d0, align 4
  br i1 %v2_bf88, label %dec_label_pc_c0d8, label %dec_label_pc_bf90

dec_label_pc_c0d8:                                ; preds = %dec_label_pc_c078, %dec_label_pc_bf84
  %v0_c0d8 = call i32 @function_dd14()
  store i32 %v0_c0d8, i32* %r0.global-to-local, align 4
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c0e8, i1* %cpsr_z.global-to-local, align 1
  %v1_c0ec = load i32, i32* @r5, align 4
  %v2_c0ec = add i32 %v1_c0ec, 12
  %v3_c0ec = inttoptr i32 %v2_c0ec to i32*
  store i32 %v0_c0d8, i32* %v3_c0ec, align 4
  br i1 %v3_c0e8, label %dec_label_pc_c0f4, label %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge

dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge:    ; preds = %dec_label_pc_c0d8
  %v1_bfa8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfa4

dec_label_pc_c0f4:                                ; preds = %dec_label_pc_c0d8, %dec_label_pc_bf90
  %v0_c0f4 = call i32 @function_dd14()
  %v1_c0f4 = trunc i32 %v0_c0f4 to i16
  store i32 %v0_c0f4, i32* %r0.global-to-local, align 4
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v1_c0fc = load i32, i32* @r4, align 4
  %v9_c0fc = icmp eq i32 %v3_bcf0, %v1_c0fc
  store i1 %v9_c0fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c100 = load i32, i32* @r5, align 4
  %v4_c100 = add i32 %v3_c100, 4
  %v5_c100 = inttoptr i32 %v4_c100 to i16*
  store i16 %v1_c0f4, i16* %v5_c100, align 2
  br i1 %v9_c0fc, label %dec_label_pc_c108, label %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge

dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge:    ; preds = %dec_label_pc_c0f4
  %v1_bfb4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfb0

dec_label_pc_c108:                                ; preds = %dec_label_pc_c0f4, %dec_label_pc_bfa4
  %v0_c108 = call i32 @function_dd14()
  %v1_c108 = trunc i32 %v0_c108 to i16
  store i32 %v0_c108, i32* %r0.global-to-local, align 4
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v1_c110 = load i32, i32* @r4, align 4
  %v9_c110 = icmp eq i32 %v3_bcf4, %v1_c110
  store i1 %v9_c110, i1* %cpsr_z.global-to-local, align 1
  %v3_c114 = load i32, i32* @r5, align 4
  %v4_c114 = add i32 %v3_c114, 20
  %v5_c114 = inttoptr i32 %v4_c114 to i16*
  store i16 %v1_c108, i16* %v5_c114, align 2
  br i1 %v9_c110, label %dec_label_pc_c11c, label %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge

dec_label_pc_c108.dec_label_pc_bfbc_crit_edge:    ; preds = %dec_label_pc_c108
  %v1_bfc0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfbc

dec_label_pc_c11c:                                ; preds = %dec_label_pc_c108, %dec_label_pc_bfb0
  %v0_c11c = call i32 @function_dd14()
  %v1_c11c = trunc i32 %v0_c11c to i16
  store i32 %v0_c11c, i32* %r0.global-to-local, align 4
  store i32 %v5_bb90, i32* %ip.global-to-local, align 4
  %v1_c124 = load i32, i32* @r4, align 4
  %v9_c124 = icmp eq i32 %v5_bb90, %v1_c124
  store i1 %v9_c124, i1* %cpsr_z.global-to-local, align 1
  %v3_c128 = load i32, i32* @r6, align 4
  %v4_c128 = add i32 %v3_c128, 2
  %v5_c128 = inttoptr i32 %v4_c128 to i16*
  store i16 %v1_c11c, i16* %v5_c128, align 2
  br i1 %v9_c124, label %dec_label_pc_c130, label %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge

dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge:    ; preds = %dec_label_pc_c11c
  %v1_bfcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfc8

dec_label_pc_c130:                                ; preds = %dec_label_pc_c11c, %dec_label_pc_bfbc
  %v0_c130 = call i32 @function_dd14()
  %v1_c134 = load i32, i32* @r6, align 4
  %v2_c134 = add i32 %v1_c134, 4
  %v3_c134 = inttoptr i32 %v2_c134 to i32*
  store i32 %v0_c130, i32* %v3_c134, align 4
  store i32 %v6_bbac, i32* %r0.global-to-local, align 4
  %v1_c13c = load i32, i32* @r4, align 4
  %v9_c13c = icmp eq i32 %v6_bbac, %v1_c13c
  store i1 %v9_c13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c13c, label %dec_label_pc_c144, label %dec_label_pc_bfd4

dec_label_pc_c144:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfc8
  %v0_c144 = call i32 @function_dd14()
  store i32 %v0_c144, i32* %r0.global-to-local, align 4
  store i32 %v1_bc7c, i32* %r1.global-to-local, align 4
  store i1 %v2_c14c, i1* %cpsr_z.global-to-local, align 1
  %v1_c150 = load i32, i32* @r6, align 4
  %v2_c150 = add i32 %v1_c150, 8
  %v3_c150 = inttoptr i32 %v2_c150 to i32*
  store i32 %v0_c144, i32* %v3_c150, align 4
  br i1 %v2_c14c, label %dec_label_pc_bfe0, label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_bfd4, %dec_label_pc_c144
  %v0_c158 = load i32, i32* @r5, align 4
  %v1_c158 = add i32 %v0_c158, 40
  store i32 %v1_c158, i32* %r0.global-to-local, align 4
  store i32 %v6_bc54, i32* %r1.global-to-local, align 4
  %v2_c160 = inttoptr i32 %v1_c158 to i16*
  %v3_c160 = call i32 @function_dea8(i16* %v2_c160, i32 %v6_bc54)
  store i32 %v3_c160, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfe0

dec_label_pc_c168:                                ; preds = %dec_label_pc_bcb4
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v1_c16c = call i32 @function_109c0(i32 %v3_bca4)
  store i32 %v1_c16c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c170

dec_label_pc_c170:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_c168
  %v1_c178 = phi i32 [ %v3_bca4, %dec_label_pc_baa4 ], [ %v1_c16c, %dec_label_pc_c168 ]
  store i32 %v18_baa4, i32* %sb.global-to-local, align 4
  store i32 %v24_baa4, i32* %fp.global-to-local, align 4
  store i32 %v27_baa4, i32* %lr.global-to-local, align 4
  ret i32 %v1_c178

dec_label_pc_c17c:                                ; preds = %dec_label_pc_bcdc
  store i32 %v6_bc54, i32* %r0.global-to-local, align 4
  %v1_c184 = add i32 %v6_bc54, 20
  store i32 %v1_c184, i32* %sb.global-to-local, align 4
  %v3_c188 = mul i32 %v6_bc54, 65536
  store i32 %v3_c188, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bf38

; uselistorder directives
  uselistorder i32 %v0_c11c, { 1, 0 }
  uselistorder i32 %v0_c108, { 1, 0 }
  uselistorder i32 %v0_c0f4, { 1, 0 }
  uselistorder i32 %v5_c0c8, { 1, 0 }
  uselistorder i32 %v3_c078, { 3, 1, 2, 0 }
  uselistorder i32 %v1_c054, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c020, { 1, 0 }
  uselistorder i32 %v4_c010, { 1, 0 }
  uselistorder i1 %v7_bf88, { 2, 1, 0 }
  uselistorder i1 %v2_c14c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c0e8, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_bf1c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bef0, { 1, 0 }
  uselistorder i32 %v1_bda4, { 1, 2, 0 }
  uselistorder i32 %v1_bda0, { 2, 1, 0 }
  uselistorder i32 %v1_bd9c, { 2, 0, 1 }
  uselistorder i32 %v1_bd98, { 2, 0, 1 }
  uselistorder i32 %v1_bd94, { 2, 0, 1 }
  uselistorder i32 %v1_bd6c, { 1, 0 }
  uselistorder i32 %v3_bd14, { 1, 0 }
  uselistorder i32 %v3_bcec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bce4, { 1, 0, 2 }
  uselistorder i32 %v0_bce0, { 1, 0, 2 }
  uselistorder i32 %v0_bcdc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bcd4, { 1, 0 }
  uselistorder i1 %v7_bca8, { 1, 0 }
  uselistorder i32 %v3_bca4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bc90, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_bc7c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bc54, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_bbac, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bb90, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bb40, { 1, 0 }
  uselistorder i32 %v2_bac0, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i16 64, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c170, { 1, 0 }
  uselistorder label %dec_label_pc_c158, { 1, 0 }
  uselistorder label %dec_label_pc_bfe0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bf5c, { 1, 0 }
  uselistorder label %dec_label_pc_bf4c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c19c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c19c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c19c = load i32, i32* @r4, align 4
  %v24_c19c = load i32, i32* @fp, align 4
  %v27_c19c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c1b8 = call i32 @function_11cd0(i32 %arg1, i32 4)
  %v0_c1bc = load i32, i32* @r5, align 4
  store i32 %v0_c1bc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c1b8, i32* @sb, align 4
  %v0_c1cc = load i32, i32* @r4, align 4
  store i32 %v0_c1cc, i32* %r0.global-to-local, align 4
  %v4_c1d0 = inttoptr i32 %v0_c1bc to i32*
  %v5_c1d0 = call i32 @function_8570(i32 %v0_c1cc, i32* %v4_c1d0, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c1e8 = load i32, i32* @r5, align 4
  store i32 %v0_c1e8, i32* %r1.global-to-local, align 4
  %v0_c1ec = load i32, i32* @r4, align 4
  store i32 %v0_c1ec, i32* %r0.global-to-local, align 4
  %v5_c1f0 = trunc i32 %v5_c1d0 to i8
  %v6_c1f4 = inttoptr i32 %v0_c1e8 to i32*
  %v7_c1f4 = call i32 @function_8570(i32 %v0_c1ec, i32* %v6_c1f4, i32 3, i32 65535)
  %v0_c1f8 = load i32, i32* @r5, align 4
  store i32 %v0_c1f8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c208 = load i32, i32* @r4, align 4
  store i32 %v0_c208, i32* %r0.global-to-local, align 4
  %v5_c20c = inttoptr i32 %v0_c1f8 to i32*
  %v6_c20c = call i32 @function_8570(i32 %v0_c208, i32* %v5_c20c, i32 4, i32 64)
  %v1_c214 = urem i32 %v6_c20c, 256
  %v0_c218 = load i32, i32* @r5, align 4
  store i32 %v0_c218, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c224 = load i32, i32* @r4, align 4
  store i32 %v0_c224, i32* %r0.global-to-local, align 4
  %v6_c22c = inttoptr i32 %v0_c218 to i32*
  %v7_c22c = call i32 @function_8570(i32 %v0_c224, i32* %v6_c22c, i32 5, i32 1)
  %v1_c238 = urem i32 %v7_c22c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c244 = load i32, i32* @r5, align 4
  store i32 %v0_c244, i32* %r1.global-to-local, align 4
  %v0_c248 = load i32, i32* @r4, align 4
  store i32 %v0_c248, i32* %r0.global-to-local, align 4
  %v5_c250 = inttoptr i32 %v0_c244 to i32*
  %v6_c250 = call i32 @function_8570(i32 %v0_c248, i32* %v5_c250, i32 6, i32 65535)
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c250, i32* %fp.global-to-local, align 4
  %v0_c268 = load i32, i32* @r4, align 4
  store i32 %v0_c268, i32* %r0.global-to-local, align 4
  %v4_c26c = inttoptr i32 %v0_c258 to i32*
  %v5_c26c = call i32 @function_8570(i32 %v0_c268, i32* %v4_c26c, i32 7, i32 65535)
  %v0_c274 = load i32, i32* @r5, align 4
  store i32 %v0_c274, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c26c, i32* @r6, align 4
  %v0_c284 = load i32, i32* @r4, align 4
  store i32 %v0_c284, i32* %r0.global-to-local, align 4
  %v4_c288 = inttoptr i32 %v0_c274 to i32*
  %v5_c288 = call i32 @function_8570(i32 %v0_c284, i32* %v4_c288, i32 17, i32 65535)
  %v0_c28c = load i32, i32* @r5, align 4
  store i32 %v0_c28c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c29c = load i32, i32* @r4, align 4
  store i32 %v0_c29c, i32* %r0.global-to-local, align 4
  %v5_c2a0 = inttoptr i32 %v0_c28c to i32*
  %v6_c2a0 = call i32 @function_8570(i32 %v0_c29c, i32* %v5_c2a0, i32 18, i32 0)
  %v0_c2a4 = load i32, i32* @r5, align 4
  store i32 %v0_c2a4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2b4 = load i32, i32* @r4, align 4
  store i32 %v0_c2b4, i32* %r0.global-to-local, align 4
  %v5_c2b8 = inttoptr i32 %v0_c2a4 to i32*
  %v6_c2b8 = call i32 @function_8570(i32 %v0_c2b4, i32* %v5_c2b8, i32 11, i32 0)
  %v0_c2bc = load i32, i32* @r5, align 4
  store i32 %v0_c2bc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2cc = load i32, i32* @r4, align 4
  store i32 %v0_c2cc, i32* %r0.global-to-local, align 4
  %v5_c2d0 = inttoptr i32 %v0_c2bc to i32*
  %v6_c2d0 = call i32 @function_8570(i32 %v0_c2cc, i32* %v5_c2d0, i32 12, i32 0)
  %v0_c2d4 = load i32, i32* @r5, align 4
  store i32 %v0_c2d4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  store i32 %v0_c2e4, i32* %r0.global-to-local, align 4
  %v5_c2e8 = inttoptr i32 %v0_c2d4 to i32*
  %v6_c2e8 = call i32 @function_8570(i32 %v0_c2e4, i32* %v5_c2e8, i32 13, i32 0)
  %v0_c2ec = load i32, i32* @r5, align 4
  store i32 %v0_c2ec, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2fc = load i32, i32* @r4, align 4
  store i32 %v0_c2fc, i32* %r0.global-to-local, align 4
  %v5_c300 = inttoptr i32 %v0_c2ec to i32*
  %v6_c300 = call i32 @function_8570(i32 %v0_c2fc, i32* %v5_c300, i32 14, i32 0)
  %v0_c304 = load i32, i32* @r5, align 4
  store i32 %v0_c304, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c314 = load i32, i32* @r4, align 4
  store i32 %v0_c314, i32* %r0.global-to-local, align 4
  %v5_c318 = inttoptr i32 %v0_c304 to i32*
  %v6_c318 = call i32 @function_8570(i32 %v0_c314, i32* %v5_c318, i32 15, i32 1)
  %v0_c31c = load i32, i32* @r5, align 4
  store i32 %v0_c31c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c32c = load i32, i32* @r4, align 4
  store i32 %v0_c32c, i32* %r0.global-to-local, align 4
  %v5_c330 = inttoptr i32 %v0_c31c to i32*
  %v6_c330 = call i32 @function_8570(i32 %v0_c32c, i32* %v5_c330, i32 16, i32 0)
  %v2_c33c = load i32, i32* @global_var_205a0.46, align 4
  store i32 %v2_c33c, i32* %r3.global-to-local, align 4
  %v0_c340 = load i32, i32* @r5, align 4
  store i32 %v0_c340, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c348 = load i32, i32* @r4, align 4
  store i32 %v0_c348, i32* %r0.global-to-local, align 4
  %v5_c34c = inttoptr i32 %v0_c340 to i32*
  %v6_c34c = call i32 @function_8504(i32 %v0_c348, i32* %v5_c34c, i32 25, i32 %v2_c33c, i32 %v6_c330)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c360 = call i32 @function_11168(i32 2, i32 3, i32 6)
  store i32 %v3_c360, i32* %r0.global-to-local, align 4
  %v7_c364 = icmp eq i32 %v3_c360, -1
  store i1 %v7_c364, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c360, i32* @sl, align 4
  br i1 %v7_c364, label %dec_label_pc_c838, label %dec_label_pc_c370

dec_label_pc_c370:                                ; preds = %dec_label_pc_c19c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c378 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c378, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c38c = call i32 @function_11124(i32 %v3_c360, i32 0, i32 3, i32 %v6_c378, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c38c, i32* %r0.global-to-local, align 4
  %v7_c390 = icmp eq i32 %v5_c38c, -1
  store i1 %v7_c390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c390, label %dec_label_pc_c830, label %dec_label_pc_c398

dec_label_pc_c398:                                ; preds = %dec_label_pc_c370
  %v3_c3a0 = mul i32 %v7_c1f4, 65536
  store i32 %v3_c3a0, i32* %r0.global-to-local, align 4
  %v0_c3a4 = load i32, i32* %fp.global-to-local, align 4
  %v3_c3a4 = mul i32 %v0_c3a4, 65536
  store i32 %v3_c3a4, i32* %r4.global-to-local, align 4
  %v0_c3a8 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c2b8, i32* %r2.global-to-local, align 4
  %v3_c3b4 = urem i32 %v7_c1f4, 65536
  store i32 %v3_c3b4, i32* %r3.global-to-local, align 4
  %v3_c3b8 = urem i32 %v0_c3a4, 65536
  %v3_c3bc = urem i32 %v0_c3a8, 65536
  store i32 %v3_c3bc, i32* %r1.global-to-local, align 4
  %v0_c3c0 = load i32, i32* @r7, align 4
  %v2_c3c0 = icmp eq i32 %v0_c3c0, 0
  store i1 %v2_c3c0, i1* %cpsr_z.global-to-local, align 1
  %v1_c3d0 = urem i32 %v6_c2b8, 256
  store i32 %v1_c3d0, i32* @fp, align 4
  br i1 %v2_c3c0, label %dec_label_pc_c624.preheader, label %dec_label_pc_c3d8

dec_label_pc_c3d8:                                ; preds = %dec_label_pc_c398
  %tmp52 = mul i32 %v5_c288, 256
  %v3_c3f0 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_c1f4, 256
  %v3_c3f4 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v5_c288, 256
  %v4_c3fc = urem i32 %tmp54, 256
  %v5_c3fc = or i32 %v4_c3fc, %v3_c3f0
  store i32 %v5_c3fc, i32* @lr, align 4
  %v1_c3f8 = mul i32 %v7_c1f4, 256
  %v4_c400 = and i32 %v1_c3f8, 65280
  %v5_c400 = or i32 %v4_c400, %v3_c3f4
  %tmp55 = mul i32 %v0_c3a4, 256
  %v3_c40c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_c3a8, 256
  %v3_c410 = and i32 %tmp56, 65280
  %v1_c414 = urem i32 %v6_c2b8, 2
  %v1_c418 = urem i32 %v6_c2d0, 2
  %tmp57 = udiv i32 %v0_c3a4, 256
  %v4_c41c = urem i32 %tmp57, 256
  %v5_c41c = or i32 %v4_c41c, %v3_c40c
  store i32 %v5_c41c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_c3a8, 256
  %v4_c420 = urem i32 %tmp58, 256
  %v5_c420 = or i32 %v4_c420, %v3_c410
  store i32 %v5_c420, i32* @r5, align 4
  %v1_c43c = urem i32 %v6_c2e8, 2
  store i32 %v1_c43c, i32* %r2.global-to-local, align 4
  %v1_c440 = urem i32 %v6_c300, 2
  store i32 %v1_c440, i32* %r3.global-to-local, align 4
  %v1_c444 = urem i32 %v6_c318, 2
  store i32 %v1_c444, i32* %r0.global-to-local, align 4
  %v1_c448 = urem i32 %v6_c330, 2
  store i32 %v1_c448, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext4 = mul nuw i32 %v5_c400, 65536
  %v4_c4d0 = sdiv i32 %sext4, 65536
  %tmp = sub nsw i32 0, %v1_c418
  %v4_c534 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_c43c
  %v4_c548 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_c440
  %v4_c560 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_c444
  %v3_c574 = and i32 %tmp64, 2
  %v1_c4c4 = trunc i32 %v6_c20c to i8
  br label %dec_label_pc_c468

dec_label_pc_c468:                                ; preds = %bb61, %dec_label_pc_c3d8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c470 = call i32 @function_11cd0(i32 128, i32 1)
  store i32 %v2_c470, i32* %r0.global-to-local, align 4
  %v3_c474 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c474, i32* %r2.global-to-local, align 4
  %v1_c478 = load i32, i32* @sb, align 4
  %v2_c478 = load i32, i32* @r4, align 4
  %v5_c478 = mul i32 %v2_c478, 4
  %v6_c478 = add i32 %v5_c478, %v1_c478
  %v7_c478 = inttoptr i32 %v6_c478 to i32*
  store i32 %v2_c470, i32* %v7_c478, align 4
  %v0_c47c = load i32, i32* %r2.global-to-local, align 4
  %v3_c47c = mul i32 %v0_c47c, 32
  store i32 %v3_c47c, i32* %r3.global-to-local, align 4
  %v0_c480 = load i32, i32* @sb, align 4
  %v4_c480 = mul i32 %v0_c47c, 4
  %v5_c480 = add i32 %v0_c480, %v4_c480
  %v6_c480 = inttoptr i32 %v5_c480 to i32*
  %v7_c480 = load i32, i32* %v6_c480, align 4
  store i32 %v7_c480, i32* %r4.global-to-local, align 4
  %v5_c484 = mul i32 %v0_c47c, 24
  store i32 %v5_c484, i32* %r3.global-to-local, align 4
  %v1_c488 = load i32, i32* @r8, align 4
  %v2_c488 = add i32 %v1_c488, %v5_c484
  store i32 %v2_c488, i32* %r0.global-to-local, align 4
  %v1_c48c = inttoptr i32 %v7_c480 to i8*
  %v2_c48c = load i8, i8* %v1_c48c, align 1
  %tmp65 = urem i8 %v2_c48c, 16
  %v1_c490 = zext i8 %tmp65 to i32
  %v1_c494 = or i32 %v1_c490, 64
  store i32 %v1_c494, i32* %r3.global-to-local, align 4
  %v1_c498 = trunc i32 %v1_c494 to i8
  store i8 %v1_c498, i8* %v1_c48c, align 1
  %v0_c49c = load i32, i32* %r4.global-to-local, align 4
  %v1_c49c = inttoptr i32 %v0_c49c to i8*
  %v2_c49c = load i8, i8* %v1_c49c, align 1
  %v1_c4a0 = and i8 %v2_c49c, -16
  %v1_c4a4 = or i8 %v1_c4a0, 5
  store i32 %v1_c238, i32* %r3.global-to-local, align 4
  store i8 %v1_c4a4, i8* %v1_c49c, align 1
  %v2_c4b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4b4 = add i32 %v2_c4b4, 1
  %v4_c4b4 = inttoptr i32 %v3_c4b4 to i8*
  store i8 %v5_c1f0, i8* %v4_c4b4, align 1
  store i32 %v1_c214, i32* %r2.global-to-local, align 4
  %v0_c4bc = load i32, i32* %r3.global-to-local, align 4
  %v2_c4bc = icmp eq i32 %v0_c4bc, 0
  store i1 %v2_c4bc, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_c4c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4c4 = add i32 %v2_c4c4, 8
  %v4_c4c4 = inttoptr i32 %v3_c4c4 to i8*
  store i8 %v1_c4c4, i8* %v4_c4c4, align 1
  %v0_c4c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4c8 = trunc i32 %v0_c4c8 to i16
  %v2_c4c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4c8 = add i32 %v2_c4c8, 2
  %v4_c4c8 = inttoptr i32 %v3_c4c8 to i16*
  store i16 %v1_c4c8, i16* %v4_c4c8, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_c4d0, i32* %r1.global-to-local, align 4
  %v0_c4d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4d4, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_c468
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_c468, %bb
  %v2_c4d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4d8 = add i32 %v2_c4d8, 9
  %v4_c4d8 = inttoptr i32 %v3_c4d8 to i8*
  store i8 6, i8* %v4_c4d8, align 1
  %v0_c4dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4dc, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_c4dc = load i32, i32* %r2.global-to-local, align 4
  %v2_c4dc = trunc i32 %v1_c4dc to i16
  %v3_c4dc = load i32, i32* %r4.global-to-local, align 4
  %v4_c4dc = add i32 %v3_c4dc, 6
  %v5_c4dc = inttoptr i32 %v4_c4dc to i16*
  store i16 %v2_c4dc, i16* %v5_c4dc, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_c34c, i32* %r2.global-to-local, align 4
  %v1_c4e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c4e4 = add i32 %v1_c4e4, 12
  %v3_c4e4 = inttoptr i32 %v2_c4e4 to i32*
  store i32 %v6_c34c, i32* %v3_c4e4, align 4
  %v0_c4e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_c4e8 = add i32 %v0_c4e8, 16
  %v2_c4e8 = inttoptr i32 %v1_c4e8 to i32*
  %v3_c4e8 = load i32, i32* %v2_c4e8, align 4
  store i32 %v3_c4e8, i32* %r3.global-to-local, align 4
  %v0_c4ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c4ec = trunc i32 %v0_c4ec to i16
  %v2_c4ec = load i32, i32* %r4.global-to-local, align 4
  %v3_c4ec = add i32 %v2_c4ec, 4
  %v4_c4ec = inttoptr i32 %v3_c4ec to i16*
  store i16 %v1_c4ec, i16* %v4_c4ec, align 2
  %v0_c4f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_c4f0 = add i32 %v1_c4f0, 16
  %v3_c4f0 = inttoptr i32 %v2_c4f0 to i32*
  store i32 %v0_c4f0, i32* %v3_c4f0, align 4
  %v0_c4f4 = load i32, i32* @r6, align 4
  %v1_c4f4 = trunc i32 %v0_c4f4 to i16
  %v2_c4f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 20
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i16*
  store i16 %v1_c4f4, i16* %v4_c4f4, align 2
  %v0_c4f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c4f8 = add i32 %v0_c4f8, 20
  store i32 %v1_c4f8, i32* %r1.global-to-local, align 4
  %v1_c4fc = add i32 %v0_c4f8, 32
  %v2_c4fc = inttoptr i32 %v1_c4fc to i8*
  %v3_c4fc = load i8, i8* %v2_c4fc, align 1
  %v4_c4fc = zext i8 %v3_c4fc to i32
  store i32 %v4_c4fc, i32* %r3.global-to-local, align 4
  %v1_c500 = add i32 %v0_c4f8, 33
  %v2_c500 = inttoptr i32 %v1_c500 to i8*
  %v3_c500 = load i8, i8* %v2_c500, align 1
  %v4_c500 = zext i8 %v3_c500 to i32
  store i32 %v1_c414, i32* %r0.global-to-local, align 4
  %v1_c508 = urem i8 %v3_c4fc, 16
  %v1_c50c = or i8 %v1_c508, -96
  %v1_c510 = and i32 %v4_c500, 223
  store i32 %v1_c510, i32* %r2.global-to-local, align 4
  store i8 %v1_c50c, i8* %v2_c4fc, align 1
  %v0_c518 = load i32, i32* %r2.global-to-local, align 4
  %v1_c518 = load i32, i32* %r0.global-to-local, align 4
  %v4_c518 = mul i32 %v1_c518, 32
  %v5_c518 = or i32 %v4_c518, %v0_c518
  store i32 %v5_c518, i32* %r2.global-to-local, align 4
  store i32 %v5_c3fc, i32* %r3.global-to-local, align 4
  %v1_c520 = trunc i32 %v5_c518 to i8
  %v2_c520 = load i32, i32* %r1.global-to-local, align 4
  %v3_c520 = add i32 %v2_c520, 13
  %v4_c520 = inttoptr i32 %v3_c520 to i8*
  store i8 %v1_c520, i8* %v4_c520, align 1
  %v0_c524 = load i32, i32* %r3.global-to-local, align 4
  %v1_c524 = load i32, i32* %r1.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 4
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v0_c524, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* %r1.global-to-local, align 4
  %v1_c528 = add i32 %v0_c528, 13
  %v2_c528 = inttoptr i32 %v1_c528 to i8*
  %v3_c528 = load i8, i8* %v2_c528, align 1
  %v4_c528 = zext i8 %v3_c528 to i32
  store i32 %v1_c418, i32* %r0.global-to-local, align 4
  %v1_c530 = and i32 %v4_c528, 239
  %v5_c534 = or i32 %v1_c530, %v4_c534
  store i32 %v5_c534, i32* %r3.global-to-local, align 4
  %v1_c538 = trunc i32 %v5_c534 to i8
  store i8 %v1_c538, i8* %v2_c528, align 1
  %v0_c53c = load i32, i32* %r1.global-to-local, align 4
  %v1_c53c = add i32 %v0_c53c, 13
  %v2_c53c = inttoptr i32 %v1_c53c to i8*
  %v3_c53c = load i8, i8* %v2_c53c, align 1
  %v4_c53c = zext i8 %v3_c53c to i32
  store i32 %v1_c43c, i32* %r3.global-to-local, align 4
  %v1_c544 = and i32 %v4_c53c, 247
  %v5_c548 = or i32 %v1_c544, %v4_c548
  store i32 %v5_c548, i32* %r2.global-to-local, align 4
  %v0_c54c = load i32, i32* @r5, align 4
  %v1_c54c = trunc i32 %v0_c54c to i16
  %v3_c54c = add i32 %v0_c53c, 2
  %v4_c54c = inttoptr i32 %v3_c54c to i16*
  store i16 %v1_c54c, i16* %v4_c54c, align 2
  %v0_c550 = load i32, i32* %r2.global-to-local, align 4
  %v1_c550 = trunc i32 %v0_c550 to i8
  %v2_c550 = load i32, i32* %r1.global-to-local, align 4
  %v3_c550 = add i32 %v2_c550, 13
  %v4_c550 = inttoptr i32 %v3_c550 to i8*
  store i8 %v1_c550, i8* %v4_c550, align 1
  %v0_c554 = load i32, i32* %r1.global-to-local, align 4
  %v1_c554 = add i32 %v0_c554, 13
  %v2_c554 = inttoptr i32 %v1_c554 to i8*
  %v3_c554 = load i8, i8* %v2_c554, align 1
  %v4_c554 = zext i8 %v3_c554 to i32
  store i32 %v1_c440, i32* %r0.global-to-local, align 4
  %v1_c55c = and i32 %v4_c554, 251
  %v5_c560 = or i32 %v1_c55c, %v4_c560
  store i32 %v5_c560, i32* %r3.global-to-local, align 4
  %v1_c564 = trunc i32 %v5_c560 to i8
  store i8 %v1_c564, i8* %v2_c554, align 1
  %v0_c568 = load i32, i32* %r1.global-to-local, align 4
  %v1_c568 = add i32 %v0_c568, 13
  %v2_c568 = inttoptr i32 %v1_c568 to i8*
  %v3_c568 = load i8, i8* %v2_c568, align 1
  %v4_c568 = zext i8 %v3_c568 to i32
  store i32 %v1_c444, i32* %r3.global-to-local, align 4
  %v1_c570 = and i32 %v4_c568, 253
  %v4_c574 = or i32 %v1_c570, %v3_c574
  store i32 %v4_c574, i32* %r2.global-to-local, align 4
  %v1_c578 = trunc i32 %v4_c574 to i8
  store i8 %v1_c578, i8* %v2_c568, align 1
  %v0_c57c = load i32, i32* %r1.global-to-local, align 4
  %v1_c57c = add i32 %v0_c57c, 13
  %v2_c57c = inttoptr i32 %v1_c57c to i8*
  %v3_c57c = load i8, i8* %v2_c57c, align 1
  %v4_c57c = zext i8 %v3_c57c to i32
  store i32 %v1_c448, i32* %r0.global-to-local, align 4
  %v1_c584 = and i32 %v4_c57c, 254
  %v2_c588 = or i32 %v1_c584, %v1_c448
  store i32 %v2_c588, i32* %r3.global-to-local, align 4
  %v1_c58c = trunc i32 %v2_c588 to i8
  store i8 %v1_c58c, i8* %v2_c57c, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_c598 = load i32, i32* %r4.global-to-local, align 4
  %v3_c598 = add i32 %v2_c598, 40
  %v4_c598 = inttoptr i32 %v3_c598 to i8*
  store i8 2, i8* %v4_c598, align 1
  %v0_c59c = load i32, i32* %r2.global-to-local, align 4
  %v1_c59c = trunc i32 %v0_c59c to i8
  %v2_c59c = load i32, i32* %r4.global-to-local, align 4
  %v3_c59c = add i32 %v2_c59c, 41
  %v4_c59c = inttoptr i32 %v3_c59c to i8*
  store i8 %v1_c59c, i8* %v4_c59c, align 1
  %v0_c5a0 = call i32 @function_dd14()
  %v1_c5a4 = urem i32 %v0_c5a0, 16
  %v1_c5a8 = or i32 %v1_c5a4, 1392
  %tmp66 = mul nuw nsw i32 %v1_c5a8, 256
  %v3_c5b4 = add nuw nsw i32 %tmp66, 2048
  %v1_c5b8 = and i32 %v3_c5b4, ptrtoint (i32* @global_var_ff00.21 to i32)
  %v5_c5bc = or i32 %v1_c5b8, 5
  %v1_c5c0 = trunc i32 %v5_c5bc to i16
  %v2_c5c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5c0 = add i32 %v2_c5c0, 42
  %v4_c5c0 = inttoptr i32 %v3_c5c0 to i16*
  store i16 %v1_c5c0, i16* %v4_c5c0, align 2
  %v2_c5c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5c8 = add i32 %v2_c5c8, 44
  %v4_c5c8 = inttoptr i32 %v3_c5c8 to i8*
  store i8 4, i8* %v4_c5c8, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_c5d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 46
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 8, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5dc = trunc i32 %v0_c5dc to i8
  %v2_c5dc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5dc = add i32 %v2_c5dc, 47
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v0_c5e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_c5e0 = trunc i32 %v0_c5e0 to i8
  %v2_c5e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5e0 = add i32 %v2_c5e0, 45
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i8*
  store i8 %v1_c5e0, i8* %v4_c5e0, align 1
  %v0_c5e4 = call i32 @function_dd14()
  store i32 %v0_c5e4, i32* %r0.global-to-local, align 4
  %v2_c5ec = load i32, i32* %r4.global-to-local, align 4
  %v3_c5ec = add i32 %v2_c5ec, 59
  %v4_c5ec = inttoptr i32 %v3_c5ec to i8*
  store i8 6, i8* %v4_c5ec, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c5fc = load i32, i32* %r4.global-to-local, align 4
  %v2_c5fc = add i32 %v1_c5fc, 48
  %v3_c5fc = inttoptr i32 %v2_c5fc to i32*
  store i32 %v0_c5e4, i32* %v3_c5fc, align 4
  %v0_c600 = load i32, i32* %r3.global-to-local, align 4
  %v1_c600 = load i32, i32* %r4.global-to-local, align 4
  %v2_c600 = add i32 %v1_c600, 52
  %v3_c600 = inttoptr i32 %v2_c600 to i32*
  store i32 %v0_c600, i32* %v3_c600, align 4
  %v0_c604 = load i32, i32* %r2.global-to-local, align 4
  %v1_c604 = trunc i32 %v0_c604 to i8
  %v2_c604 = load i32, i32* %r4.global-to-local, align 4
  %v3_c604 = add i32 %v2_c604, 56
  %v4_c604 = inttoptr i32 %v3_c604 to i8*
  store i8 %v1_c604, i8* %v4_c604, align 1
  %v0_c608 = load i32, i32* %r1.global-to-local, align 4
  %v1_c608 = trunc i32 %v0_c608 to i8
  %v2_c608 = load i32, i32* %r4.global-to-local, align 4
  %v3_c608 = add i32 %v2_c608, 58
  %v4_c608 = inttoptr i32 %v3_c608 to i8*
  store i8 %v1_c608, i8* %v4_c608, align 1
  %v0_c60c = load i32, i32* %r1.global-to-local, align 4
  %v1_c60c = trunc i32 %v0_c60c to i8
  %v2_c60c = load i32, i32* %r4.global-to-local, align 4
  %v3_c60c = add i32 %v2_c60c, 57
  %v4_c60c = inttoptr i32 %v3_c60c to i8*
  store i8 %v1_c60c, i8* %v4_c60c, align 1
  %v3_c610 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c610, i32* %r3.global-to-local, align 4
  %v1_c614 = load i32, i32* %r2.global-to-local, align 4
  %v2_c614 = add i32 %v1_c614, %v3_c610
  store i32 %v2_c614, i32* @r4, align 4
  %v1_c618 = load i32, i32* @r7, align 4
  %v9_c618 = icmp eq i32 %v2_c614, %v1_c618
  store i1 %v9_c618, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c614, i32* %stack_var_-44, align 4
  %v5_c620 = icmp slt i32 %v2_c614, %v1_c618
  br i1 %v5_c620, label %dec_label_pc_c468, label %dec_label_pc_c624.preheader

dec_label_pc_c624.preheader:                      ; preds = %bb61, %dec_label_pc_c398
  %v0_c6286 = phi i32 [ 0, %dec_label_pc_c398 ], [ %v1_c618, %bb61 ]
  %v3_c7a0 = icmp eq i32 %v6_c34c, -1
  %v8_c7a0 = icmp eq i32 %v6_c34c, -1
  %v3_c670 = icmp eq i32 %v3_c3b4, 65535
  br label %dec_label_pc_c624

dec_label_pc_c624:                                ; preds = %dec_label_pc_c624, %dec_label_pc_c734, %dec_label_pc_c624.preheader
  %v0_c628 = phi i32 [ %v0_c6286, %dec_label_pc_c624.preheader ], [ 0, %dec_label_pc_c734 ], [ 0, %dec_label_pc_c624 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c628 = icmp eq i32 %v0_c628, 0
  store i1 %v2_c628, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c628, label %dec_label_pc_c624, label %dec_label_pc_c634

dec_label_pc_c634:                                ; preds = %dec_label_pc_c624, %dec_label_pc_c734
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c638

dec_label_pc_c638:                                ; preds = %dec_label_pc_c6b0, %dec_label_pc_c634
  %v1_c648 = phi i32 [ %v1_c724, %dec_label_pc_c6b0 ], [ 0, %dec_label_pc_c634 ]
  %v5_c63c = mul i32 %v1_c648, 24
  %v1_c640 = load i32, i32* @r8, align 4
  %v2_c640 = add i32 %v1_c640, %v5_c63c
  store i32 %v2_c640, i32* %r3.global-to-local, align 4
  %v1_c644 = add i32 %v2_c640, 20
  %v2_c644 = inttoptr i32 %v1_c644 to i8*
  %v3_c644 = load i8, i8* %v2_c644, align 1
  %v4_c644 = zext i8 %v3_c644 to i32
  store i32 %v4_c644, i32* %r2.global-to-local, align 4
  %v0_c648 = load i32, i32* @sb, align 4
  %v4_c648 = mul i32 %v1_c648, 4
  %v5_c648 = add i32 %v0_c648, %v4_c648
  %v6_c648 = inttoptr i32 %v5_c648 to i32*
  %v7_c648 = load i32, i32* %v6_c648, align 4
  store i32 %v7_c648, i32* @r5, align 4
  %v7_c64c = icmp eq i8 %v3_c644, 31
  store i1 %v7_c64c, i1* %cpsr_z.global-to-local, align 1
  %v1_c650 = add i32 %v7_c648, 20
  store i32 %v1_c650, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_c644, 32
  br i1 %tmp67, label %dec_label_pc_c748, label %dec_label_pc_c658

dec_label_pc_c658:                                ; preds = %dec_label_pc_c638
  store i32 %v6_c34c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c7a0, label %dec_label_pc_c7a8, label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %dec_label_pc_c748, %dec_label_pc_c658
  store i32 %v3_c3b4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c670, label %dec_label_pc_c7c4, label %dec_label_pc_c678

dec_label_pc_c678:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_c664
  %v1_c67c = phi i32 [ %v1_c7b8, %dec_label_pc_c7a8 ], [ 65535, %dec_label_pc_c664 ]
  store i32 %v3_c3b8, i32* %r1.global-to-local, align 4
  %v9_c67c = icmp eq i32 %v3_c3b8, %v1_c67c
  store i1 %v9_c67c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c67c, label %dec_label_pc_c7d8, label %dec_label_pc_c684

dec_label_pc_c684:                                ; preds = %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge, %dec_label_pc_c678
  %v1_c688 = phi i32 [ %v1_c688.pre, %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge ], [ %v1_c67c, %dec_label_pc_c678 ]
  store i32 %v3_c3bc, i32* %r2.global-to-local, align 4
  %v9_c688 = icmp eq i32 %v3_c3bc, %v1_c688
  store i1 %v9_c688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c688, label %dec_label_pc_c7ec, label %dec_label_pc_c690

dec_label_pc_c690:                                ; preds = %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge, %dec_label_pc_c684
  %v1_c694 = phi i32 [ %v1_c694.pre, %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge ], [ %v1_c688, %dec_label_pc_c684 ]
  store i32 %v5_c288, i32* %r3.global-to-local, align 4
  %v9_c694 = icmp eq i32 %v5_c288, %v1_c694
  store i1 %v9_c694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c694, label %dec_label_pc_c800, label %dec_label_pc_c69c

dec_label_pc_c69c:                                ; preds = %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge, %dec_label_pc_c690
  %v1_c6a0 = phi i32 [ %v1_c6a0.pre, %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge ], [ %v1_c694, %dec_label_pc_c690 ]
  store i32 %v6_c2a0, i32* %r0.global-to-local, align 4
  %v9_c6a0 = icmp eq i32 %v6_c2a0, %v1_c6a0
  store i1 %v9_c6a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6a0, label %dec_label_pc_c814, label %dec_label_pc_c6a8

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c69c
  %v0_c6a8 = load i32, i32* @fp, align 4
  %v2_c6a8 = icmp eq i32 %v0_c6a8, 0
  store i1 %v2_c6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6a8, label %dec_label_pc_c6b0, label %dec_label_pc_c824

dec_label_pc_c6b0:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c814, %dec_label_pc_c824
  %v2_c6b4 = load i32, i32* @r5, align 4
  %v3_c6b4 = add i32 %v2_c6b4, 10
  %v4_c6b4 = inttoptr i32 %v3_c6b4 to i16*
  store i16 0, i16* %v4_c6b4, align 2
  %v0_c6b8 = load i32, i32* @r5, align 4
  store i32 %v0_c6b8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c6c0 = call i32 @function_c848(i32 %v0_c6b8, i32 20)
  %v3_c6c0 = trunc i32 %v2_c6c0 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c6c8 = load i32, i32* @r5, align 4
  %v4_c6c8 = add i32 %v3_c6c8, 10
  %v5_c6c8 = inttoptr i32 %v4_c6c8 to i16*
  store i16 %v3_c6c0, i16* %v5_c6c8, align 2
  %v0_c6cc = load i32, i32* @r6, align 4
  store i32 %v0_c6cc, i32* @r1, align 4
  %v0_c6d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6d0 = trunc i32 %v0_c6d0 to i16
  %v3_c6d0 = add i32 %v0_c6cc, 16
  %v4_c6d0 = inttoptr i32 %v3_c6d0 to i16*
  store i16 %v1_c6d0, i16* %v4_c6d0, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c6dc = load i32, i32* @r5, align 4
  store i32 %v0_c6dc, i32* %r0.global-to-local, align 4
  %v4_c6e0 = call i32 @function_c898(i32 %v0_c6dc, i32 %v0_c6cc, i32 10240, i32 40)
  %v5_c6e0 = trunc i32 %v4_c6e0 to i16
  store i32 %v4_c6e0, i32* %r0.global-to-local, align 4
  %v3_c6e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c6e4, i32* %r3.global-to-local, align 4
  %v3_c6e8 = mul i32 %v3_c6e4, 32
  store i32 %v3_c6e8, i32* %lr.global-to-local, align 4
  %v3_c6ec = load i32, i32* @r6, align 4
  %v4_c6ec = add i32 %v3_c6ec, 16
  %v5_c6ec = inttoptr i32 %v4_c6ec to i16*
  store i16 %v5_c6e0, i16* %v5_c6ec, align 2
  %v0_c6f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_c6f0 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_c6f0, -8
  %v5_c6f0 = add i32 %v0_c6f0, %tmp68
  store i32 %v5_c6f0, i32* %lr.global-to-local, align 4
  %v0_c6f4 = load i32, i32* @r6, align 4
  %v1_c6f4 = add i32 %v0_c6f4, 2
  %v2_c6f4 = inttoptr i32 %v1_c6f4 to i16*
  %v3_c6f4 = load i16, i16* %v2_c6f4, align 2
  %v1_c6f8 = load i32, i32* @r8, align 4
  %v2_c6f8 = add i32 %v1_c6f8, %v5_c6f0
  store i32 %v2_c6f8, i32* @lr, align 4
  %v3_c6fc = add i32 %v2_c6f8, 2
  %v4_c6fc = inttoptr i32 %v3_c6fc to i16*
  store i16 %v3_c6f4, i16* %v4_c6fc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c708 = load i32, i32* @r5, align 4
  store i32 %v0_c708, i32* %r1.global-to-local, align 4
  %v0_c70c = load i32, i32* @sl, align 4
  store i32 %v0_c70c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c714 = load i32, i32* @lr, align 4
  %v6_c71c = call i32 @function_110e4(i32 %v0_c70c, i32 %v0_c708, i32 60, i32 16384, i32 %v0_c714, i32 16)
  %v3_c720 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c720, i32* %r3.global-to-local, align 4
  %v1_c724 = add i32 %v3_c720, 1
  store i32 %v1_c724, i32* %r0.global-to-local, align 4
  %v1_c728 = load i32, i32* @r7, align 4
  %v9_c728 = icmp eq i32 %v1_c724, %v1_c728
  store i1 %v9_c728, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c724, i32* %stack_var_-44, align 4
  %v5_c730 = icmp slt i32 %v1_c724, %v1_c728
  br i1 %v5_c730, label %dec_label_pc_c638, label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c6b0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c738 = icmp eq i32 %v1_c728, 0
  store i1 %v2_c738, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c738, label %dec_label_pc_c624, label %dec_label_pc_c634

dec_label_pc_c748:                                ; preds = %dec_label_pc_c638
  %v1_c748 = add i32 %v2_c640, 16
  %v2_c748 = inttoptr i32 %v1_c748 to i32*
  %v3_c748 = load i32, i32* %v2_c748, align 4
  store i32 %v3_c748, i32* %r4.global-to-local, align 4
  %v0_c74c = call i32 @function_dd14()
  store i32 %v0_c74c, i32* %r0.global-to-local, align 4
  %v3_c750 = load i32, i32* %stack_var_-44, align 4
  %v5_c758 = mul i32 %v3_c750, 24
  %v0_c75c = load i32, i32* %r4.global-to-local, align 4
  %v1_c75c = and i32 %v0_c75c, 16711680
  %v3_c760 = udiv i32 %v0_c75c, 16777216
  %v4_c764 = udiv i32 %v1_c75c, 256
  %v5_c764 = or i32 %v4_c764, %v3_c760
  store i32 %v5_c764, i32* %r2.global-to-local, align 4
  %v1_c768 = load i32, i32* @r8, align 4
  %v2_c768 = add i32 %v1_c768, %v5_c758
  store i32 %v2_c768, i32* %r1.global-to-local, align 4
  %v1_c76c = and i32 %v0_c75c, ptrtoint (i32* @global_var_ff00.21 to i32)
  store i32 %v1_c76c, i32* %r3.global-to-local, align 4
  %v1_c770 = add i32 %v2_c768, 20
  %v2_c770 = inttoptr i32 %v1_c770 to i8*
  %v3_c770 = load i8, i8* %v2_c770, align 1
  %v4_c770 = zext i8 %v3_c770 to i32
  %v4_c774 = mul i32 %v1_c76c, 256
  %v4_c778 = mul i32 %v0_c75c, 16777216
  %v5_c774 = or i32 %v4_c774, %v4_c778
  %v5_c778 = or i32 %v5_c774, %v5_c764
  %v7_c77c = lshr i32 %v0_c74c, %v4_c770
  %v8_c77c = add i32 %v7_c77c, %v5_c778
  store i32 %v8_c77c, i32* %r2.global-to-local, align 4
  %v1_c780 = and i32 %v8_c77c, 16711680
  store i32 %v1_c780, i32* %r0.global-to-local, align 4
  %v1_c78c = and i32 %v8_c77c, 65280
  store i32 %v1_c78c, i32* %r1.global-to-local, align 4
  %v5_c794 = call i32 @llvm.bswap.i32(i32 %v8_c77c)
  %v1_c798 = load i32, i32* @r5, align 4
  %v2_c798 = add i32 %v1_c798, 16
  %v3_c798 = inttoptr i32 %v2_c798 to i32*
  store i32 %v5_c794, i32* %v3_c798, align 4
  store i32 %v6_c34c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c7a0, label %dec_label_pc_c7a8, label %dec_label_pc_c664

dec_label_pc_c7a8:                                ; preds = %dec_label_pc_c748, %dec_label_pc_c658
  %v0_c7a8 = call i32 @function_dd14()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c7b0 = load i32, i32* @r5, align 4
  %v2_c7b0 = add i32 %v1_c7b0, 12
  %v3_c7b0 = inttoptr i32 %v2_c7b0 to i32*
  store i32 %v0_c7a8, i32* %v3_c7b0, align 4
  store i32 %v3_c3b4, i32* %r0.global-to-local, align 4
  %v0_c7b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c7b8 = add i32 %v0_c7b8, -1
  store i32 %v1_c7b8, i32* @r4, align 4
  %v9_c7bc = icmp eq i32 %v3_c3b4, %v1_c7b8
  store i1 %v9_c7bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7bc, label %dec_label_pc_c7c4, label %dec_label_pc_c678

dec_label_pc_c7c4:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_c664
  %v0_c7c4 = call i32 @function_dd14()
  %v1_c7c4 = trunc i32 %v0_c7c4 to i16
  store i32 %v0_c7c4, i32* %r0.global-to-local, align 4
  store i32 %v3_c3b8, i32* %r1.global-to-local, align 4
  %v1_c7cc = load i32, i32* @r4, align 4
  %v9_c7cc = icmp eq i32 %v3_c3b8, %v1_c7cc
  store i1 %v9_c7cc, i1* %cpsr_z.global-to-local, align 1
  %v3_c7d0 = load i32, i32* @r5, align 4
  %v4_c7d0 = add i32 %v3_c7d0, 4
  %v5_c7d0 = inttoptr i32 %v4_c7d0 to i16*
  store i16 %v1_c7c4, i16* %v5_c7d0, align 2
  br i1 %v9_c7cc, label %dec_label_pc_c7d8, label %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge

dec_label_pc_c7c4.dec_label_pc_c684_crit_edge:    ; preds = %dec_label_pc_c7c4
  %v1_c688.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c684

dec_label_pc_c7d8:                                ; preds = %dec_label_pc_c7c4, %dec_label_pc_c678
  %v0_c7d8 = call i32 @function_dd14()
  %v1_c7d8 = trunc i32 %v0_c7d8 to i16
  store i32 %v0_c7d8, i32* %r0.global-to-local, align 4
  store i32 %v3_c3bc, i32* %r2.global-to-local, align 4
  %v1_c7e0 = load i32, i32* @r4, align 4
  %v9_c7e0 = icmp eq i32 %v3_c3bc, %v1_c7e0
  store i1 %v9_c7e0, i1* %cpsr_z.global-to-local, align 1
  %v3_c7e4 = load i32, i32* @r5, align 4
  %v4_c7e4 = add i32 %v3_c7e4, 20
  %v5_c7e4 = inttoptr i32 %v4_c7e4 to i16*
  store i16 %v1_c7d8, i16* %v5_c7e4, align 2
  br i1 %v9_c7e0, label %dec_label_pc_c7ec, label %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge

dec_label_pc_c7d8.dec_label_pc_c690_crit_edge:    ; preds = %dec_label_pc_c7d8
  %v1_c694.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c690

dec_label_pc_c7ec:                                ; preds = %dec_label_pc_c7d8, %dec_label_pc_c684
  %v0_c7ec = call i32 @function_dd14()
  %v1_c7ec = trunc i32 %v0_c7ec to i16
  store i32 %v0_c7ec, i32* %r0.global-to-local, align 4
  store i32 %v5_c288, i32* %r3.global-to-local, align 4
  %v1_c7f4 = load i32, i32* @r4, align 4
  %v9_c7f4 = icmp eq i32 %v5_c288, %v1_c7f4
  store i1 %v9_c7f4, i1* %cpsr_z.global-to-local, align 1
  %v3_c7f8 = load i32, i32* @r6, align 4
  %v4_c7f8 = add i32 %v3_c7f8, 2
  %v5_c7f8 = inttoptr i32 %v4_c7f8 to i16*
  store i16 %v1_c7ec, i16* %v5_c7f8, align 2
  br i1 %v9_c7f4, label %dec_label_pc_c800, label %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge

dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge:    ; preds = %dec_label_pc_c7ec
  %v1_c6a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c69c

dec_label_pc_c800:                                ; preds = %dec_label_pc_c7ec, %dec_label_pc_c690
  %v0_c800 = call i32 @function_dd14()
  %v1_c804 = load i32, i32* @r6, align 4
  %v2_c804 = add i32 %v1_c804, 4
  %v3_c804 = inttoptr i32 %v2_c804 to i32*
  store i32 %v0_c800, i32* %v3_c804, align 4
  store i32 %v6_c2a0, i32* %r0.global-to-local, align 4
  %v1_c80c = load i32, i32* @r4, align 4
  %v9_c80c = icmp eq i32 %v6_c2a0, %v1_c80c
  store i1 %v9_c80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c80c, label %dec_label_pc_c814, label %dec_label_pc_c6a8

dec_label_pc_c814:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c69c
  %v0_c814 = call i32 @function_dd14()
  store i32 %v0_c814, i32* %r0.global-to-local, align 4
  %v0_c818 = load i32, i32* @fp, align 4
  %v2_c818 = icmp eq i32 %v0_c818, 0
  store i1 %v2_c818, i1* %cpsr_z.global-to-local, align 1
  %v1_c81c = load i32, i32* @r6, align 4
  %v2_c81c = add i32 %v1_c81c, 8
  %v3_c81c = inttoptr i32 %v2_c81c to i32*
  store i32 %v0_c814, i32* %v3_c81c, align 4
  br i1 %v2_c818, label %dec_label_pc_c6b0, label %dec_label_pc_c824

dec_label_pc_c824:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c814
  %v0_c824 = call i32 @function_dd14()
  %v1_c824 = trunc i32 %v0_c824 to i16
  store i32 %v0_c824, i32* %r0.global-to-local, align 4
  %v3_c828 = load i32, i32* @r6, align 4
  %v4_c828 = add i32 %v3_c828, 18
  %v5_c828 = inttoptr i32 %v4_c828 to i16*
  store i16 %v1_c824, i16* %v5_c828, align 2
  br label %dec_label_pc_c6b0

dec_label_pc_c830:                                ; preds = %dec_label_pc_c370
  %v0_c830 = load i32, i32* @sl, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  %v1_c834 = call i32 @function_109c0(i32 %v0_c830)
  store i32 %v1_c834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c19c, %dec_label_pc_c830
  %v1_c840 = phi i32 [ %v3_c360, %dec_label_pc_c19c ], [ %v1_c834, %dec_label_pc_c830 ]
  store i32 %v3_c19c, i32* %r4.global-to-local, align 4
  store i32 %v24_c19c, i32* %fp.global-to-local, align 4
  store i32 %v27_c19c, i32* %lr.global-to-local, align 4
  ret i32 %v1_c840

; uselistorder directives
  uselistorder i32 %v0_c824, { 1, 0 }
  uselistorder i32 %v0_c7ec, { 1, 0 }
  uselistorder i32 %v0_c7d8, { 1, 0 }
  uselistorder i32 %v0_c7c4, { 1, 0 }
  uselistorder i32 %v1_c7b8, { 1, 2, 0 }
  uselistorder i32 %v0_c75c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_c724, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c6f0, { 1, 0 }
  uselistorder i32 %v4_c6e0, { 1, 0 }
  uselistorder i1 %v3_c670, { 1, 0 }
  uselistorder i32 %v2_c614, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c47c, { 1, 2, 0 }
  uselistorder i32 %v1_c448, { 2, 1, 0 }
  uselistorder i32 %v1_c444, { 2, 0, 1 }
  uselistorder i32 %v1_c440, { 2, 0, 1 }
  uselistorder i32 %v1_c43c, { 2, 0, 1 }
  uselistorder i32 %v1_c418, { 1, 0 }
  uselistorder i32 %v3_c3b4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c3a8, { 1, 0, 2 }
  uselistorder i32 %v0_c3a4, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c390, { 1, 0 }
  uselistorder i1 %v7_c364, { 1, 0 }
  uselistorder i32 %v3_c360, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c34c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_c2a0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c288, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c20c, { 1, 0 }
  uselistorder i32 %v7_c1f4, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_8570, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 95, 96, 97, 98, 99, 100, 101, 102, 91, 92, 93, 94, 103, 104, 105, 106 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c838, { 1, 0 }
  uselistorder label %dec_label_pc_c824, { 1, 0 }
  uselistorder label %dec_label_pc_c6b0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c634, { 1, 0 }
  uselistorder label %dec_label_pc_c624, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @function_c848(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c848:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c86c, label %dec_label_pc_c854

dec_label_pc_c854:                                ; preds = %dec_label_pc_c848
  %v0_c85c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c858

dec_label_pc_c858:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c854
  %v0_c864 = phi i32 [ %v2_c864, %dec_label_pc_c858 ], [ 0, %dec_label_pc_c854 ]
  %v0_c85c = phi i32 [ %v5_c85c, %dec_label_pc_c858 ], [ %v0_c85c.pre, %dec_label_pc_c854 ]
  %v0_c858 = phi i32 [ %v1_c858, %dec_label_pc_c858 ], [ %arg1, %dec_label_pc_c854 ]
  %v1_c858 = add i32 %v0_c858, -2
  %v1_c85c = inttoptr i32 %v0_c85c to i16*
  %v2_c85c = load i16, i16* %v1_c85c, align 2
  %v3_c85c = zext i16 %v2_c85c to i32
  %v5_c85c = add i32 %v0_c85c, -2
  store i32 %v5_c85c, i32* @r0, align 4
  %v2_c864 = add i32 %v3_c85c, %v0_c864
  %v1_c858.cmp = icmp ugt i32 %v1_c858, 1
  br i1 %v1_c858.cmp, label %dec_label_pc_c858, label %dec_label_pc_c86c.loopexit

dec_label_pc_c86c.loopexit:                       ; preds = %dec_label_pc_c858
  br label %dec_label_pc_c86c

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c848, %dec_label_pc_c86c.loopexit
  %v1_c874 = phi i32 [ %v2_c864, %dec_label_pc_c86c.loopexit ], [ 0, %dec_label_pc_c848 ]
  %v0_c86c = phi i32 [ %v1_c858, %dec_label_pc_c86c.loopexit ], [ %arg1, %dec_label_pc_c848 ]
  %v7_c86c = icmp eq i32 %v0_c86c, 1
  br i1 %v7_c86c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c86c
  %v1_c870 = load i32, i32* @r0, align 4
  %v2_c870 = inttoptr i32 %v1_c870 to i8*
  %v3_c870 = load i8, i8* %v2_c870, align 1
  %v4_c870 = zext i8 %v3_c870 to i32
  %v3_c874 = add i32 %v1_c874, %v4_c870
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c86c, %bb
  %v0_c878 = phi i32 [ %v1_c874, %dec_label_pc_c86c ], [ %v3_c874, %bb ]
  %v3_c87c = urem i32 %v0_c878, 65536
  %v4_c880 = udiv i32 %v0_c878, 65536
  %v5_c880 = add nuw nsw i32 %v4_c880, %v3_c87c
  %v4_c884 = udiv i32 %v5_c880, 65536
  %v5_c884 = add nuw nsw i32 %v4_c884, %v5_c880
  %v1_c888 = urem i32 %v5_c884, 65536
  %v3_c890 = xor i32 %v1_c888, 65535
  ret i32 %v3_c890

; uselistorder directives
  uselistorder i32 %v5_c880, { 1, 0 }
  uselistorder i32 %v5_c85c, { 1, 0 }
  uselistorder i32 %v1_c858, { 1, 0, 2 }
  uselistorder i32 %v0_c85c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c86c, { 1, 0 }
}

define i32 @function_c898(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c898:
  %v1_c8a8 = add i32 %arg1, 12
  %v2_c8a8 = inttoptr i32 %v1_c8a8 to i32*
  %v3_c8a8 = load i32, i32* %v2_c8a8, align 4
  %v1_c8ac = add i32 %arg1, 16
  %v2_c8ac = inttoptr i32 %v1_c8ac to i32*
  %v3_c8ac = load i32, i32* %v2_c8ac, align 4
  %v7_c8b0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8b0, label %dec_label_pc_c8bc.preheader, label %dec_label_pc_c8d0

dec_label_pc_c8bc.preheader:                      ; preds = %dec_label_pc_c898
  %v0_c8c0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8bc

dec_label_pc_c8bc:                                ; preds = %dec_label_pc_c8bc.preheader, %dec_label_pc_c8bc
  %v0_c8c8 = phi i32 [ 0, %dec_label_pc_c8bc.preheader ], [ %v2_c8c8, %dec_label_pc_c8bc ]
  %v0_c8c0 = phi i32 [ %v0_c8c0.pre, %dec_label_pc_c8bc.preheader ], [ %v5_c8c0, %dec_label_pc_c8bc ]
  %v0_c8bc = phi i32 [ %arg3, %dec_label_pc_c8bc.preheader ], [ %v1_c8bc, %dec_label_pc_c8bc ]
  %v1_c8bc = add nsw i32 %v0_c8bc, -2
  %v1_c8c0 = inttoptr i32 %v0_c8c0 to i16*
  %v2_c8c0 = load i16, i16* %v1_c8c0, align 2
  %v3_c8c0 = zext i16 %v2_c8c0 to i32
  %v5_c8c0 = add i32 %v0_c8c0, -2
  store i32 %v5_c8c0, i32* @r1, align 4
  %v2_c8c8 = add i32 %v3_c8c0, %v0_c8c8
  %v8_c8cc = icmp sgt i32 %v1_c8bc, 1
  br i1 %v8_c8cc, label %dec_label_pc_c8bc, label %dec_label_pc_c8d0.loopexit

dec_label_pc_c8d0.loopexit:                       ; preds = %dec_label_pc_c8bc
  br label %dec_label_pc_c8d0

dec_label_pc_c8d0:                                ; preds = %dec_label_pc_c8d0.loopexit, %dec_label_pc_c898
  %v1_c8dc = phi i32 [ %v2_c8c8, %dec_label_pc_c8d0.loopexit ], [ 0, %dec_label_pc_c898 ]
  %v0_c8d0 = phi i32 [ %v1_c8bc, %dec_label_pc_c8d0.loopexit ], [ %arg3, %dec_label_pc_c898 ]
  %v7_c8d0 = icmp eq i32 %v0_c8d0, 1
  br i1 %v7_c8d0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c8d0
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c8d0
  %v1_c8d4 = load i32, i32* @r1, align 4
  %v2_c8d4 = inttoptr i32 %v1_c8d4 to i8*
  %v3_c8d4 = load i8, i8* %v2_c8d4, align 1
  %v4_c8d4 = zext i8 %v3_c8d4 to i32
  %v3_c8dc = add i32 %v4_c8d4, %v1_c8dc
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c904 = phi i32 [ %v1_c8dc, %.thread ], [ %v3_c8dc, %bb ]
  %v0_c8e4 = mul i32 %v3_c8a8, 65536
  %v3_c8e4 = udiv i32 %v0_c8e4, 65536
  %v3_c8e8 = urem i32 %v3_c8ac, 65536
  %v4_c8f0 = udiv i32 %v3_c8a8, 65536
  %v2_c8ec = add nuw nsw i32 %v3_c8e8, %v4_c8f0
  %v5_c8f0 = add nuw nsw i32 %v2_c8ec, %v3_c8e4
  %v1_c8f4 = add i32 %arg1, 9
  %v2_c8f4 = inttoptr i32 %v1_c8f4 to i8*
  %v3_c8f4 = load i8, i8* %v2_c8f4, align 1
  %v4_c8f4 = zext i8 %v3_c8f4 to i32
  %v4_c8f8 = udiv i32 %v3_c8ac, 65536
  %v3_c900 = mul nuw nsw i32 %v4_c8f4, 256
  %v5_c8f8 = add i32 %v4_c8f8, %arg2
  %v2_c8fc = add i32 %v5_c8f8, %v1_c904
  %v2_c904 = add i32 %v2_c8fc, %v5_c8f0
  %v2_c908 = add i32 %v2_c904, %v3_c900
  %tmp = icmp ult i32 %v2_c908, 65536
  br i1 %tmp, label %dec_label_pc_c928, label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %bb19, %dec_label_pc_c914
  %v2_c91c5 = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206.in = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206 = udiv i32 %v3_c9206.in, 65536
  %v3_c918 = urem i32 %v2_c91c5, 65536
  %v2_c91c = add nuw nsw i32 %v3_c918, %v3_c9206
  %tmp20 = icmp ult i32 %v2_c91c, 65536
  br i1 %tmp20, label %dec_label_pc_c928.loopexit, label %dec_label_pc_c914

dec_label_pc_c928.loopexit:                       ; preds = %dec_label_pc_c914
  br label %dec_label_pc_c928

dec_label_pc_c928:                                ; preds = %dec_label_pc_c928.loopexit, %bb19
  %v0_c928 = phi i32 [ %v2_c91c, %dec_label_pc_c928.loopexit ], [ %v2_c908, %bb19 ]
  %v1_c928 = urem i32 %v0_c928, 65536
  %v3_c930 = xor i32 %v1_c928, 65535
  ret i32 %v3_c930

; uselistorder directives
  uselistorder i32 %v2_c91c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c908, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c8dc, { 1, 0 }
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v0_c8c0, { 1, 0 }
  uselistorder i32 %v3_c8a8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c914, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8bc, { 1, 0 }
}

define i32 @function_c93c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c93c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c93c = load i32, i32* @r4, align 4
  %v6_c93c = load i32, i32* @r5, align 4
  %v9_c93c = load i32, i32* @r6, align 4
  %v12_c93c = load i32, i32* @r7, align 4
  %v15_c93c = load i32, i32* @r8, align 4
  %v18_c93c = load i32, i32* @sb, align 4
  %v21_c93c = load i32, i32* @sl, align 4
  %v24_c93c = load i32, i32* @fp, align 4
  %v27_c93c = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c958 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c958, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_c984 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c984, i32* @fp, align 4
  %v3_c990 = call i32 @function_10e40(i8* nonnull %stack_var_-585, i32 0)
  %v2_c994 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c994, i32* @sl, align 4
  %v0_c998 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9a4 = bitcast i32* %stack_var_-8777 to i8*
  %v3_c9a4 = call i32 @function_10e40(i8* %v2_c9a4, i32 %v0_c998)
  %v0_c9ac = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9b8 = bitcast i32* %stack_var_-4681 to i8*
  %v3_c9b8 = call i32 @function_10e40(i8* %v2_c9b8, i32 %v0_c9ac)
  %v2_c9bc = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9bc, i32* @sb, align 4
  %v0_c9c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9c0 = udiv i32 %v0_c9c0, 256
  %v1_c9c4 = urem i32 %v0_c9c0, 256
  store i32 %v1_c9c4, i32* @r4, align 4
  %v3_c9d4 = trunc i32 %v3_c9c0 to i8
  %v4_c9d4 = call i32 @function_10360(i8 %v3_c9d4, i32 16, i32 %v2_c9bc)
  %v2_c9dc = call i32 @function_ff00(i8* nonnull %stack_var_-72)
  %v7_c9e0 = icmp eq i32 %v2_c9dc, 2
  br i1 %v7_c9e0, label %dec_label_pc_cea4, label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %dec_label_pc_c93c, %dec_label_pc_cea4
  %v1_c9ec = call i32 @function_f9c0(i32 13)
  %v1_c9f4 = call i32 @function_f9c0(i32 14)
  %v1_c9fc = call i32 @function_f9c0(i32 15)
  %v1_ca04 = call i32 @function_f9c0(i32 17)
  %v0_ca08 = load i32, i32* @r5, align 4
  %v2_ca10 = inttoptr i32 %v0_ca08 to i32*
  %v3_ca10 = call i32 @function_f8fc(i32 17, i32* %v2_ca10)
  %v0_ca14 = load i32, i32* @r5, align 4
  %v2_ca18 = call i32 @function_105cc(i32 %v3_ca10, i32 %v0_ca14)
  %v7_ca1c = icmp eq i32 %v2_ca18, -1
  store i32 %v2_ca18, i32* @r8, align 4
  br i1 %v7_ca1c, label %bb, label %dec_label_pc_ca2c.preheader

bb:                                               ; preds = %dec_label_pc_c9e8
  %v1_ca24 = load i32, i32* @r5, align 4
  store i32 %v1_ca24, i32* @r4, align 4
  br label %dec_label_pc_ce40

dec_label_pc_ca2c.preheader:                      ; preds = %dec_label_pc_c9e8
  %v4_ca3856 = call i32 @function_10160(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca18)
  %v2_ca3c58 = icmp eq i32 %v4_ca3856, 0
  br i1 %v2_ca3c58, label %dec_label_pc_cbc4.loopexit, label %dec_label_pc_ca44.lr.ph

dec_label_pc_ca44.lr.ph:                          ; preds = %dec_label_pc_ca2c.preheader
  %v2_ca8c = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca44

dec_label_pc_ca44:                                ; preds = %dec_label_pc_ca44.lr.ph, %dec_label_pc_ca2c.backedge
  %v3_ca48 = load i8, i8* %stack_var_-585, align 1
  %v4_ca48 = sext i8 %v3_ca48 to i32
  %v2_ca4c = icmp eq i8 %v3_ca48, 0
  br i1 %v2_ca4c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca44
  %v8_ca50 = icmp eq i8 %v3_ca48, 58
  br i1 %v8_ca50, label %.thread8, label %dec_label_pc_ca64

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_ca7c

bb126:                                            ; preds = %dec_label_pc_ca44
  br label %dec_label_pc_ca7c

dec_label_pc_ca64:                                ; preds = %bb125
  %v1_ca6c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ca68

dec_label_pc_ca68:                                ; preds = %bb127, %dec_label_pc_ca64
  %v0_ca68 = phi i32 [ %v1_ca68, %bb127 ], [ 0, %dec_label_pc_ca64 ]
  %v1_ca68 = add i32 %v0_ca68, 1
  %v2_ca6c = add i32 %v1_ca68, %v1_ca6c.pre
  %v3_ca6c = inttoptr i32 %v2_ca6c to i8*
  %v4_ca6c = load i8, i8* %v3_ca6c, align 1
  %v6_ca6c = zext i8 %v4_ca6c to i32
  %v2_ca70 = icmp eq i8 %v4_ca6c, 0
  br i1 %v2_ca70, label %dec_label_pc_ca7c, label %bb127

bb127:                                            ; preds = %dec_label_pc_ca68
  %v8_ca74 = icmp eq i8 %v4_ca6c, 58
  br i1 %v8_ca74, label %dec_label_pc_ca7c, label %dec_label_pc_ca68

dec_label_pc_ca7c:                                ; preds = %dec_label_pc_ca68, %bb127, %bb126, %.thread8
  %v1_caa8 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_ca68, %bb127 ], [ %v1_ca68, %dec_label_pc_ca68 ]
  %v0_ca7c = phi i32 [ %v4_ca48, %.thread8 ], [ %v4_ca48, %bb126 ], [ %v6_ca6c, %bb127 ], [ %v6_ca6c, %dec_label_pc_ca68 ]
  %v2_ca7c = icmp eq i32 %v0_ca7c, 0
  br i1 %v2_ca7c, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_ca84

dec_label_pc_ca2c.backedge:                       ; preds = %dec_label_pc_ca7c, %dec_label_pc_cb4c, %dec_label_pc_cb98, %dec_label_pc_cac8
  %v0_ca34 = load i32, i32* @r8, align 4
  %v4_ca38 = call i32 @function_10160(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca34)
  %v2_ca3c = icmp eq i32 %v4_ca38, 0
  br i1 %v2_ca3c, label %dec_label_pc_cbc4.loopexit, label %dec_label_pc_ca44

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca7c
  %v1_ca88 = add i32 %v1_caa8, 2
  %v2_ca90 = add i32 %v1_ca88, %v2_ca8c
  %v1_ca94 = add i32 %v2_ca90, -545
  %v2_ca94 = inttoptr i32 %v1_ca94 to i8*
  %v3_ca94 = load i8, i8* %v2_ca94, align 1
  %v2_ca98 = icmp eq i8 %v3_ca94, 0
  br i1 %v2_ca98, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_ca84
  %v8_ca9c = icmp eq i8 %v3_ca94, 32
  br i1 %v8_ca9c, label %.thread13, label %dec_label_pc_caa8

.thread13:                                        ; preds = %bb128
  store i32 %v1_ca88, i32* @r5, align 4
  br label %dec_label_pc_cac8

bb129:                                            ; preds = %dec_label_pc_ca84
  store i32 %v1_ca88, i32* @r5, align 4
  br label %dec_label_pc_cac8

dec_label_pc_caa8:                                ; preds = %bb128
  %v0_caa8 = load i32, i32* @r6, align 4
  %v2_caa8 = add i32 %v0_caa8, %v1_caa8
  br label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %bb130, %dec_label_pc_caa8
  %v0_cabc16 = phi i32 [ %v1_cabc, %bb130 ], [ %v1_ca88, %dec_label_pc_caa8 ]
  %v0_cac018 = phi i32 [ %v1_cac0, %bb130 ], [ %v2_caa8, %dec_label_pc_caa8 ]
  %v1_cab0 = add i32 %v0_cac018, 3
  %v2_cab0 = inttoptr i32 %v1_cab0 to i8*
  %v3_cab0 = load i8, i8* %v2_cab0, align 1
  %v2_cab4 = icmp eq i8 %v3_cab0, 0
  br i1 %v2_cab4, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cab0
  %v1_cabc17 = add i32 %v0_cabc16, 1
  store i32 %v1_cabc17, i32* @r5, align 4
  br label %dec_label_pc_cac8

bb130:                                            ; preds = %dec_label_pc_cab0
  %v8_cab8 = icmp eq i8 %v3_cab0, 32
  %v1_cabc = add i32 %v0_cabc16, 1
  store i32 %v1_cabc, i32* @r5, align 4
  %v1_cac0 = add i32 %v0_cac018, 1
  br i1 %v8_cab8, label %dec_label_pc_cac8, label %dec_label_pc_cab0

dec_label_pc_cac8:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cad4 = phi i32 [ %v1_cabc17, %.thread15 ], [ %v1_ca88, %.thread13 ], [ %v1_ca88, %bb129 ], [ %v1_cabc, %bb130 ]
  %v0_cac8 = load i32, i32* @r6, align 4
  %v2_cac8 = add i32 %v0_cac8, %v1_ca88
  store i32 %v2_cac8, i32* @r4, align 4
  %v2_cad4 = add i32 %v1_cad4, %v2_ca8c
  store i32 0, i32* @r7, align 4
  %v3_cadc = add i32 %v2_cad4, -545
  %v4_cadc = inttoptr i32 %v3_cadc to i8*
  store i8 0, i8* %v4_cadc, align 1
  %v0_cae0 = load i32, i32* @r4, align 4
  %v1_cae4 = inttoptr i32 %v0_cae0 to i8*
  %v2_cae4 = call i32 @function_ff00(i8* %v1_cae4)
  store i32 %v2_cae4, i32* @r1, align 4
  %v0_caf0 = load i32, i32* @r4, align 4
  %v3_caf4 = inttoptr i32 %v0_caf0 to i8*
  %v4_caf4 = call i32 @function_10250(i8* %v3_caf4, i32 %v2_cae4, i32 %v2_c9bc)
  %v7_caf8 = icmp eq i32 %v4_caf4, -1
  br i1 %v7_caf8, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cb14.preheader

dec_label_pc_cb14.preheader:                      ; preds = %dec_label_pc_cac8
  %v1_cafc = load i32, i32* @r7, align 4
  %v1_cb00 = load i32, i32* @r6, align 4
  %v2_cb00 = load i32, i32* @r5, align 4
  %v3_cb00 = add i32 %v2_cb00, %v1_cb00
  store i32 %v1_cafc, i32* @lr, align 4
  %v1_cb1448 = add i32 %v3_cb00, 2
  %v2_cb1449 = inttoptr i32 %v1_cb1448 to i8*
  %v3_cb1450 = load i8, i8* %v2_cb1449, align 1
  %v2_cb1852 = icmp eq i8 %v3_cb1450, 0
  %v1_cb1c54 = add i32 %v2_cb00, 2
  br i1 %v2_cb1852, label %dec_label_pc_cb4c, label %dec_label_pc_cb24

dec_label_pc_cb24:                                ; preds = %dec_label_pc_cb14.preheader, %dec_label_pc_cb14.backedge
  %v0_cb4c83 = phi i32 [ %v0_cb4c81, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_cb34.pr = phi i32 [ %v0_cb34.pr70, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_ce54 = phi i32 [ %v0_ce5473, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_cb1c78 = phi i32 [ %v1_cb1c, %dec_label_pc_cb14.backedge ], [ %v1_cb1c54, %dec_label_pc_cb14.preheader ]
  %v0_cb44 = phi i32 [ %v0_cb14, %dec_label_pc_cb14.backedge ], [ %v3_cb00, %dec_label_pc_cb14.preheader ]
  %v1_cb28.in = phi i8 [ %v3_cb14, %dec_label_pc_cb14.backedge ], [ %v3_cb1450, %dec_label_pc_cb14.preheader ]
  %v7_cb24 = icmp eq i8 %v1_cb28.in, 9
  br i1 %v7_cb24, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb24
  %v8_cb28 = icmp eq i8 %v1_cb28.in, 32
  br i1 %v8_cb28, label %.thread27, label %dec_label_pc_cb34

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb40

bb132:                                            ; preds = %dec_label_pc_cb24
  br label %dec_label_pc_cb40

dec_label_pc_cb34:                                ; preds = %bb131
  %v7_cb34 = icmp eq i32 %v0_cb34.pr, 1
  br i1 %v7_cb34, label %dec_label_pc_ce54, label %dec_label_pc_cb3c

dec_label_pc_cb3c:                                ; preds = %dec_label_pc_ce54, %dec_label_pc_cb34
  %v0_cb4075 = phi i32 [ %v1_ce54, %dec_label_pc_ce54 ], [ %v0_ce54, %dec_label_pc_cb34 ]
  br label %dec_label_pc_cb40

dec_label_pc_cb40:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb3c
  %v0_cb40 = phi i32 [ %v0_ce54, %.thread27 ], [ %v0_ce54, %bb132 ], [ %v0_cb4075, %dec_label_pc_cb3c ]
  %v0_cb34.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb3c ]
  %v7_cb48 = icmp sgt i32 %v0_cb40, 6
  br i1 %v7_cb48, label %dec_label_pc_cb4c, label %dec_label_pc_cb14.backedge

dec_label_pc_cb4c:                                ; preds = %dec_label_pc_cb14.backedge, %dec_label_pc_cb40, %dec_label_pc_cb14.preheader
  %v1_cb9c = phi i32 [ %v1_cb1c54, %dec_label_pc_cb14.preheader ], [ %v1_cb1c, %dec_label_pc_cb14.backedge ], [ %v0_cb1c78, %dec_label_pc_cb40 ]
  %v0_cb4c = phi i32 [ %v1_cafc, %dec_label_pc_cb14.preheader ], [ %v0_cb4c81, %dec_label_pc_cb14.backedge ], [ %v0_cb4c83, %dec_label_pc_cb40 ]
  %v2_cb4c = icmp eq i32 %v0_cb4c, 0
  br i1 %v2_cb4c, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cb58

dec_label_pc_cb58:                                ; preds = %dec_label_pc_cb4c
  %v2_cb60 = add i32 %v1_cb9c, %v2_ca8c
  %v1_cb64 = add i32 %v2_cb60, -545
  %v2_cb64 = inttoptr i32 %v1_cb64 to i8*
  %v3_cb64 = load i8, i8* %v2_cb64, align 1
  %v2_cb68 = icmp eq i8 %v3_cb64, 0
  br i1 %v2_cb68, label %dec_label_pc_cb98, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb58
  %v8_cb6c = icmp eq i8 %v3_cb64, 32
  br i1 %v8_cb6c, label %dec_label_pc_cb98, label %dec_label_pc_cb74

dec_label_pc_cb74:                                ; preds = %bb133
  %v2_cb74 = add i32 %v1_cb9c, %v1_cb00
  br label %dec_label_pc_cb78

dec_label_pc_cb78:                                ; preds = %bb134, %dec_label_pc_cb74
  %v0_cb8430 = phi i32 [ %v1_cb84, %bb134 ], [ %v1_cb9c, %dec_label_pc_cb74 ]
  %v0_cb78 = phi i32 [ %v1_cb78, %bb134 ], [ %v2_cb74, %dec_label_pc_cb74 ]
  %v1_cb78 = add i32 %v0_cb78, 1
  %v2_cb78 = inttoptr i32 %v1_cb78 to i8*
  %v3_cb78 = load i8, i8* %v2_cb78, align 1
  %v2_cb7c = icmp eq i8 %v3_cb78, 0
  br i1 %v2_cb7c, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cb78
  %v1_cb8431 = add i32 %v0_cb8430, 1
  br label %dec_label_pc_cb8c

bb134:                                            ; preds = %dec_label_pc_cb78
  %v8_cb80 = icmp eq i8 %v3_cb78, 32
  %v1_cb84 = add i32 %v0_cb8430, 1
  br i1 %v8_cb80, label %dec_label_pc_cb8c, label %dec_label_pc_cb78

dec_label_pc_cb8c:                                ; preds = %bb134, %.thread29
  %v1_cb94 = phi i32 [ %v1_cb8431, %.thread29 ], [ %v1_cb84, %bb134 ]
  %v2_cb94 = add i32 %v1_cb94, %v2_ca8c
  br label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb58, %bb133, %dec_label_pc_cb8c
  %v2_cba4 = phi i32 [ %v2_cb60, %dec_label_pc_cb58 ], [ %v2_cb60, %bb133 ], [ %v2_cb94, %dec_label_pc_cb8c ]
  %v2_cb9c = add i32 %v1_cb9c, %v1_cb00
  store i32 %v2_cb9c, i32* @r4, align 4
  %v3_cba4 = add i32 %v2_cba4, -545
  %v4_cba4 = inttoptr i32 %v3_cba4 to i8*
  store i8 0, i8* %v4_cba4, align 1
  %v1_cba8 = inttoptr i32 %v2_cb9c to i8*
  %v2_cba8 = call i32 @function_ff00(i8* %v1_cba8)
  %v8_cbb0 = icmp sgt i32 %v2_cba8, 15
  br i1 %v8_cbb0, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %dec_label_pc_cb98
  %v0_cbb8 = load i32, i32* @r4, align 4
  %v2_cbbc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbbc, i32* @r0, align 4
  %v2_cbc0 = bitcast i32* %stack_var_-56 to i8*
  %v3_cbc0 = call i32 @function_ff28(i8* %v2_cbc0, i32 %v0_cbb8)
  br label %dec_label_pc_cbc4

dec_label_pc_cbc4.loopexit:                       ; preds = %dec_label_pc_ca2c.backedge, %dec_label_pc_ca2c.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cbc4.loopexit, %dec_label_pc_cbb4
  %v1_cbd4.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cbc4.loopexit ], [ %v2_cbc0, %dec_label_pc_cbb4 ]
  %v2_cbd0.pre-phi = phi i32 [ %.pre, %dec_label_pc_cbc4.loopexit ], [ %v2_cbbc, %dec_label_pc_cbb4 ]
  %v0_cbc4 = load i32, i32* @r8, align 4
  %v1_cbc8 = call i32 @function_109c0(i32 %v0_cbc4)
  %v2_cbd4 = call i32 @function_ff00(i8* %v1_cbd4.pre-phi)
  store i32 %v2_cbd4, i32* @r4, align 4
  %v2_cbd8 = icmp eq i32 %v2_cbd4, 0
  br i1 %v2_cbd8, label %dec_label_pc_ce80, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cbc4
  %v3_cbe8 = call i32 @function_f8fc(i32 13, i32* null)
  %v1_cbec = call i32 @function_10bbc(i32 %v3_cbe8)
  store i32 %v1_cbec, i32* @sb, align 4
  %v2_cbf0 = icmp eq i32 %v1_cbec, 0
  br i1 %v2_cbf0, label %dec_label_pc_ce20, label %dec_label_pc_cc00.preheader

dec_label_pc_cc00.preheader:                      ; preds = %dec_label_pc_cbe0
  store i32 0, i32* @r5, align 4
  %v1_cc0443 = inttoptr i32 %v1_cbec to i32*
  %v2_cc0444 = call i32 @function_10d00(i32* %v1_cc0443)
  %v2_cc0846 = icmp eq i32 %v2_cc0444, 0
  br i1 %v2_cc0846, label %dec_label_pc_ce14, label %dec_label_pc_cc10.preheader

dec_label_pc_cc00.loopexit:                       ; preds = %dec_label_pc_cc18, %dec_label_pc_cc28, %dec_label_pc_cc94
  %v0_cc00 = load i32, i32* @sb, align 4
  %v1_cc04 = inttoptr i32 %v0_cc00 to i32*
  %v2_cc04 = call i32 @function_10d00(i32* %v1_cc04)
  %v2_cc08 = icmp eq i32 %v2_cc04, 0
  br i1 %v2_cc08, label %dec_label_pc_ce14, label %dec_label_pc_cc10.preheader

dec_label_pc_cc10.preheader:                      ; preds = %dec_label_pc_cc00.preheader, %dec_label_pc_cc00.loopexit
  %v0_cc1891 = phi i32 [ %v2_cc04, %dec_label_pc_cc00.loopexit ], [ %v2_cc0444, %dec_label_pc_cc00.preheader ]
  br label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cc10.preheader, %dec_label_pc_cdfc
  %v0_cc30 = phi i32 [ %v0_cc1891, %dec_label_pc_cc10.preheader ], [ %v2_ce08, %dec_label_pc_cdfc ]
  %v0_cc10 = load i32, i32* @r5, align 4
  %v2_cc10 = icmp eq i32 %v0_cc10, 0
  br i1 %v2_cc10, label %dec_label_pc_cc18, label %dec_label_pc_ce14

dec_label_pc_cc18:                                ; preds = %dec_label_pc_cc10
  %v1_cc18 = add i32 %v0_cc30, 11
  %v2_cc18 = inttoptr i32 %v1_cc18 to i8*
  %v3_cc18 = load i8, i8* %v2_cc18, align 1
  %v4_cc18 = zext i8 %v3_cc18 to i32
  %v1_cc1c = add nsw i32 %v4_cc18, -48
  %tmp = icmp ugt i32 %v1_cc1c, 9
  br i1 %tmp, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_cc28

dec_label_pc_cc28:                                ; preds = %dec_label_pc_cc18
  store i32 %v1_cc18, i32* @r7, align 4
  %v3_cc34 = call i32 @function_f8fc(i32 13, i32* null)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cc40 = call i32 @function_ff28(i8* %v2_c9b8, i32 %v3_cc34)
  %v2_cc48 = call i32 @function_ff00(i8* %v2_c9b8)
  %v0_cc4c = load i32, i32* @r7, align 4
  %v1_cc50 = load i32, i32* @sl, align 4
  %v2_cc50 = add i32 %v1_cc50, %v2_cc48
  store i32 %v2_cc50, i32* @r0, align 4
  %v2_cc54 = inttoptr i32 %v2_cc50 to i8*
  %v3_cc54 = call i32 @function_ff28(i8* %v2_cc54, i32 %v0_cc4c)
  %v2_cc5c = call i32 @function_ff00(i8* %v2_c9b8)
  %v0_cc60 = load i32, i32* @r5, align 4
  store i32 %v2_cc5c, i32* @r4, align 4
  %v2_cc6c = inttoptr i32 %v0_cc60 to i32*
  %v3_cc6c = call i32 @function_f8fc(i32 14, i32* %v2_cc6c)
  %v0_cc74 = load i32, i32* @r4, align 4
  %v1_cc74 = load i32, i32* @sl, align 4
  %v2_cc74 = add i32 %v1_cc74, %v0_cc74
  store i32 %v2_cc74, i32* @r0, align 4
  %v2_cc78 = inttoptr i32 %v2_cc74 to i8*
  %v3_cc78 = call i32 @function_ff28(i8* %v2_cc78, i32 %v3_cc6c)
  %v3_cc88 = call i32 @function_10724(i32 %v2_c994, i32 %v2_c984, i32 4096)
  %v7_cc8c = icmp eq i32 %v3_cc88, -1
  br i1 %v7_cc8c, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cc28
  %v0_cc94 = load i32, i32* @r5, align 4
  %v2_cc9c = inttoptr i32 %v0_cc94 to i32*
  %v3_cc9c = call i32 @function_f8fc(i32 13, i32* %v2_cc9c)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cca8 = call i32 @function_ff28(i8* %v2_c9b8, i32 %v3_cc9c)
  %v2_ccb0 = call i32 @function_ff00(i8* %v2_c9b8)
  %v0_ccb4 = load i32, i32* @r7, align 4
  %v1_ccb8 = load i32, i32* @sl, align 4
  %v2_ccb8 = add i32 %v1_ccb8, %v2_ccb0
  store i32 %v2_ccb8, i32* @r0, align 4
  %v2_ccbc = inttoptr i32 %v2_ccb8 to i8*
  %v3_ccbc = call i32 @function_ff28(i8* %v2_ccbc, i32 %v0_ccb4)
  %v2_ccc4 = call i32 @function_ff00(i8* %v2_c9b8)
  %v0_ccc8 = load i32, i32* @r5, align 4
  store i32 %v2_ccc4, i32* @r4, align 4
  %v2_ccd4 = inttoptr i32 %v0_ccc8 to i32*
  %v3_ccd4 = call i32 @function_f8fc(i32 15, i32* %v2_ccd4)
  %v0_ccdc = load i32, i32* @r4, align 4
  %v1_ccdc = load i32, i32* @sl, align 4
  %v2_ccdc = add i32 %v1_ccdc, %v0_ccdc
  store i32 %v2_ccdc, i32* @r0, align 4
  %v2_cce0 = inttoptr i32 %v2_ccdc to i8*
  %v3_cce0 = call i32 @function_ff28(i8* %v2_cce0, i32 %v3_ccd4)
  %v1_cce8 = call i32 @function_10bbc(i32 %v2_c994)
  store i32 %v1_cce8, i32* @r8, align 4
  %v2_ccec = icmp eq i32 %v1_cce8, 0
  br i1 %v2_ccec, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_ccf4.preheader

dec_label_pc_ccf4.preheader:                      ; preds = %dec_label_pc_cc94
  %v1_ccf838 = inttoptr i32 %v1_cce8 to i32*
  %v2_ccf839 = call i32 @function_10d00(i32* %v1_ccf838)
  store i32 %v2_ccf839, i32* @r6, align 4
  %v2_ccfc41 = icmp eq i32 %v2_ccf839, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_ccfc41, label %dec_label_pc_cdfc, label %dec_label_pc_cd0cthread-pre-split

dec_label_pc_ccf4.loopexit:                       ; preds = %dec_label_pc_cd14, %dec_label_pc_cdac
  %v0_ccf4 = load i32, i32* @r8, align 4
  %v1_ccf8 = inttoptr i32 %v0_ccf4 to i32*
  %v2_ccf8 = call i32 @function_10d00(i32* %v1_ccf8)
  store i32 %v2_ccf8, i32* @r6, align 4
  %v2_ccfc = icmp eq i32 %v2_ccf8, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_ccfc, label %dec_label_pc_cdfc, label %dec_label_pc_cd0cthread-pre-split

dec_label_pc_cd0cthread-pre-split:                ; preds = %dec_label_pc_ccf4.preheader, %dec_label_pc_ccf4.loopexit
  %v0_cd0c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd0c

dec_label_pc_cd0c:                                ; preds = %dec_label_pc_cd0cthread-pre-split, %dec_label_pc_cdd4
  %v0_cd0c = phi i32 [ %v0_cd0c.pr, %dec_label_pc_cd0cthread-pre-split ], [ 1, %dec_label_pc_cdd4 ]
  %v2_cd0c = icmp eq i32 %v0_cd0c, 0
  br i1 %v2_cd0c, label %dec_label_pc_cd14, label %dec_label_pc_cdfc

dec_label_pc_cd14:                                ; preds = %dec_label_pc_cd0c
  %v0_cd14 = call i32 @function_ff94()
  %v0_cd18 = load i32, i32* @r5, align 4
  %v2_cd20 = inttoptr i32 %v0_cd18 to i32*
  %v3_cd20 = call i32 @function_f8fc(i32 13, i32* %v2_cd20)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cd2c = call i32 @function_ff28(i8* %v2_c9b8, i32 %v3_cd20)
  %v2_cd34 = call i32 @function_ff00(i8* %v2_c9b8)
  %v0_cd38 = load i32, i32* @r7, align 4
  %v1_cd3c = load i32, i32* @sl, align 4
  %v2_cd3c = add i32 %v1_cd3c, %v2_cd34
  store i32 %v2_cd3c, i32* @r0, align 4
  %v2_cd40 = inttoptr i32 %v2_cd3c to i8*
  %v3_cd40 = call i32 @function_ff28(i8* %v2_cd40, i32 %v0_cd38)
  %v2_cd48 = call i32 @function_ff00(i8* %v2_c9b8)
  %v0_cd4c = load i32, i32* @r5, align 4
  store i32 %v2_cd48, i32* @r4, align 4
  %v2_cd58 = inttoptr i32 %v0_cd4c to i32*
  %v3_cd58 = call i32 @function_f8fc(i32 15, i32* %v2_cd58)
  %v0_cd60 = load i32, i32* @r4, align 4
  %v1_cd60 = load i32, i32* @sl, align 4
  %v2_cd60 = add i32 %v1_cd60, %v0_cd60
  store i32 %v2_cd60, i32* @r0, align 4
  %v2_cd64 = inttoptr i32 %v2_cd60 to i8*
  %v3_cd64 = call i32 @function_ff28(i8* %v2_cd64, i32 %v3_cd58)
  %v2_cd6c = call i32 @function_ff00(i8* %v2_c9b8)
  %v1_cd74 = load i32, i32* @sl, align 4
  %v2_cd74 = add i32 %v1_cd74, %v2_cd6c
  store i32 %v2_cd74, i32* @r0, align 4
  %v2_cd78 = inttoptr i32 %v2_cd74 to i8*
  %v3_cd78 = call i32 @function_ff28(i8* %v2_cd78, i32 ptrtoint (i32* @global_var_15cec.58 to i32))
  %v2_cd80 = call i32 @function_ff00(i8* %v2_c9b8)
  %v0_cd84 = load i32, i32* @r6, align 4
  %v1_cd84 = add i32 %v0_cd84, 11
  %v1_cd88 = load i32, i32* @sl, align 4
  %v2_cd88 = add i32 %v1_cd88, %v2_cd80
  store i32 %v2_cd88, i32* @r0, align 4
  %v2_cd8c = inttoptr i32 %v2_cd88 to i8*
  %v3_cd8c = call i32 @function_ff28(i8* %v2_cd8c, i32 %v1_cd84)
  %v3_cd9c = call i32 @function_10724(i32 %v2_c994, i32 %v2_c984, i32 4096)
  %v7_cda0 = icmp eq i32 %v3_cd9c, -1
  br i1 %v7_cda0, label %dec_label_pc_ccf4.loopexit, label %dec_label_pc_cdac

dec_label_pc_cdac:                                ; preds = %dec_label_pc_cd14
  %v2_cdac = call i32 @function_ff00(i8* %v2_c9a4)
  store i32 %v2_cdac, i32* @r1, align 4
  %v4_cdc0 = call i32 @function_10250(i8* %v2_c9a4, i32 %v2_cdac, i32 %v2_cbd0.pre-phi)
  %v7_cdc4 = icmp eq i32 %v4_cdc0, -1
  br i1 %v7_cdc4, label %dec_label_pc_ccf4.loopexit, label %dec_label_pc_cdd4

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cdac
  %v0_cdcc = load i32, i32* @r7, align 4
  %v2_cdd4 = inttoptr i32 %v0_cdcc to i8*
  %v3_cdd4 = call i32 @function_10024(i8* %v2_cdd4, i32 10)
  %v2_cddc = call i32 @function_1078c(i32 %v3_cdd4, i32 9)
  %v0_cde0 = load i32, i32* @r8, align 4
  %v1_cde4 = inttoptr i32 %v0_cde0 to i32*
  %v2_cde4 = call i32 @function_10d00(i32* %v1_cde4)
  store i32 %v2_cde4, i32* @r6, align 4
  %v2_cde8 = icmp eq i32 %v2_cde4, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_cde8, label %dec_label_pc_cdfc, label %dec_label_pc_cd0c

dec_label_pc_cdfc:                                ; preds = %dec_label_pc_ccf4.loopexit, %dec_label_pc_cdd4, %dec_label_pc_cd0c, %dec_label_pc_ccf4.preheader
  %v0_cdfc = load i32, i32* @r8, align 4
  %v1_ce00 = inttoptr i32 %v0_cdfc to i32*
  %v2_ce00 = call i32 @function_109f4(i32* %v1_ce00)
  %v0_ce04 = load i32, i32* @sb, align 4
  %v1_ce08 = inttoptr i32 %v0_ce04 to i32*
  %v2_ce08 = call i32 @function_10d00(i32* %v1_ce08)
  %v2_ce0c = icmp eq i32 %v2_ce08, 0
  br i1 %v2_ce0c, label %dec_label_pc_ce14, label %dec_label_pc_cc10

dec_label_pc_ce14:                                ; preds = %dec_label_pc_cc00.loopexit, %dec_label_pc_cdfc, %dec_label_pc_cc10, %dec_label_pc_cc00.preheader
  %v0_ce14 = load i32, i32* @sb, align 4
  %v1_ce18 = inttoptr i32 %v0_ce14 to i32*
  %v2_ce18 = call i32 @function_109f4(i32* %v1_ce18)
  %v0_ce1c = load i32, i32* @r5, align 4
  %v1_ce1c = urem i32 %v0_ce1c, 256
  br label %dec_label_pc_ce20

dec_label_pc_ce20:                                ; preds = %dec_label_pc_cbe0, %dec_label_pc_ce14
  %storemerge = phi i32 [ %v1_ce1c, %dec_label_pc_ce14 ], [ 0, %dec_label_pc_cbe0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce24 = call i32 @function_12a74(i32 1)
  %v1_ce2c = call i32 @function_f920(i32 13)
  %v1_ce34 = call i32 @function_f920(i32 14)
  %v1_ce3c = call i32 @function_f920(i32 15)
  br label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %bb, %dec_label_pc_ce80, %dec_label_pc_ce20
  %v0_ce40 = load i32, i32* @r4, align 4
  store i32 %v3_c93c, i32* @r4, align 4
  store i32 %v6_c93c, i32* @r5, align 4
  store i32 %v9_c93c, i32* @r6, align 4
  store i32 %v12_c93c, i32* @r7, align 4
  store i32 %v15_c93c, i32* @r8, align 4
  store i32 %v18_c93c, i32* @sb, align 4
  store i32 %v21_c93c, i32* @sl, align 4
  store i32 %v24_c93c, i32* @fp, align 4
  store i32 %v27_c93c, i32* @lr, align 4
  ret i32 %v0_ce40

dec_label_pc_ce54:                                ; preds = %dec_label_pc_cb34
  %v1_ce54 = add i32 %v0_ce54, 1
  %v7_ce58 = icmp eq i32 %v0_ce54, 0
  br i1 %v7_ce58, label %dec_label_pc_ce60, label %dec_label_pc_cb3c

dec_label_pc_ce60:                                ; preds = %dec_label_pc_ce54
  %v1_ce60 = add i32 %v0_cb44, 3
  %v2_ce60 = inttoptr i32 %v1_ce60 to i8*
  %v3_ce60 = load i8, i8* %v2_ce60, align 1
  %v7_ce64 = icmp eq i8 %v3_ce60, 65
  br i1 %v7_ce64, label %dec_label_pc_ce78, label %dec_label_pc_ce6c

dec_label_pc_ce6c:                                ; preds = %dec_label_pc_ce60, %dec_label_pc_ce78
  %v0_cb4c82 = phi i32 [ %v0_cb4c83, %dec_label_pc_ce60 ], [ 1, %dec_label_pc_ce78 ]
  br label %dec_label_pc_cb14.backedge

dec_label_pc_cb14.backedge:                       ; preds = %dec_label_pc_ce6c, %dec_label_pc_cb40
  %v0_cb4c81 = phi i32 [ %v0_cb4c82, %dec_label_pc_ce6c ], [ %v0_cb4c83, %dec_label_pc_cb40 ]
  %v0_ce5473 = phi i32 [ %v1_ce54, %dec_label_pc_ce6c ], [ %v0_cb40, %dec_label_pc_cb40 ]
  %v0_cb34.pr70 = phi i32 [ 0, %dec_label_pc_ce6c ], [ %v0_cb34.pr71, %dec_label_pc_cb40 ]
  %v0_cb14 = add i32 %v0_cb44, 1
  %v1_cb14 = add i32 %v0_cb44, 3
  %v2_cb14 = inttoptr i32 %v1_cb14 to i8*
  %v3_cb14 = load i8, i8* %v2_cb14, align 1
  %v2_cb18 = icmp eq i8 %v3_cb14, 0
  %v1_cb1c = add i32 %v0_cb1c78, 1
  br i1 %v2_cb18, label %dec_label_pc_cb4c, label %dec_label_pc_cb24

dec_label_pc_ce78:                                ; preds = %dec_label_pc_ce60
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ce6c

dec_label_pc_ce80:                                ; preds = %dec_label_pc_cbc4
  %v1_ce84 = call i32 @function_f920(i32 13)
  %v1_ce8c = call i32 @function_f920(i32 14)
  %v1_ce94 = call i32 @function_f920(i32 15)
  %v1_ce9c = call i32 @function_f920(i32 17)
  br label %dec_label_pc_ce40

dec_label_pc_cea4:                                ; preds = %dec_label_pc_c93c
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_c9e8

; uselistorder directives
  uselistorder i32 %v1_cb1c, { 1, 0 }
  uselistorder i8 %v3_cb14, { 1, 0 }
  uselistorder i32 %v0_cb4c81, { 1, 0 }
  uselistorder i32 %v1_ce54, { 1, 0 }
  uselistorder i32 %v2_ce08, { 1, 0 }
  uselistorder i32 %v1_cb78, { 1, 0 }
  uselistorder i32 %v0_cb8430, { 1, 0 }
  uselistorder i32 %v1_cb9c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb40, { 1, 0 }
  uselistorder i32 %v0_cb1c78, { 1, 0 }
  uselistorder i32 %v0_ce54, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb4c83, { 1, 2, 0 }
  uselistorder i32 %v1_cb1c54, { 1, 0 }
  uselistorder i32 %v2_cb00, { 1, 0 }
  uselistorder i32 %v1_cafc, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cabc, { 0, 2, 1 }
  uselistorder i32 %v0_cabc16, { 1, 0 }
  uselistorder i32 %v1_ca88, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca18, { 1, 2, 0 }
  uselistorder i32 %v0_c9c0, { 1, 0 }
  uselistorder i32 %v2_c9bc, { 1, 0, 2 }
  uselistorder i8* %v2_c9a4, { 1, 0, 2 }
  uselistorder i32 %v2_c984, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_10160, { 1, 0 }
  uselistorder label %dec_label_pc_ce6c, { 1, 0 }
  uselistorder label %dec_label_pc_ce40, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce20, { 1, 0 }
  uselistorder label %dec_label_pc_ce14, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cdfc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd0c, { 1, 0 }
  uselistorder label %dec_label_pc_cd0cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_ccf4.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc10, { 1, 0 }
  uselistorder label %dec_label_pc_cc10.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc00.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb98, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb24, { 1, 0 }
  uselistorder label %dec_label_pc_cac8, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca2c.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ca7c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca44, { 1, 0 }
  uselistorder label %dec_label_pc_c9e8, { 1, 0 }
}

define i32 @function_ced0(i32 %arg1) local_unnamed_addr {
dec_label_pc_ced0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8384 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %v3_ced0 = load i32, i32* @r4, align 4
  %v6_ced0 = load i32, i32* @r5, align 4
  %v9_ced0 = load i32, i32* @r6, align 4
  %v12_ced0 = load i32, i32* @r7, align 4
  %v15_ced0 = load i32, i32* @r8, align 4
  %v18_ced0 = load i32, i32* @sb, align 4
  %v21_ced0 = load i32, i32* @sl, align 4
  %v24_ced0 = load i32, i32* @fp, align 4
  %v27_ced0 = load i32, i32* @lr, align 4
  %v2_cee0 = call i32 @function_10640(i32* null)
  store i32 %v2_cee0, i32* @r0, align 4
  store i32 %v2_cee0, i32* @r7, align 4
  %v0_cee8 = call i32 @function_106b0()
  %v7_ceec = icmp eq i32 %v0_cee8, -1
  %. = zext i1 %v7_ceec to i32
  %tmp125 = icmp slt i32 %v0_cee8, 1
  %storemerge96 = select i1 %tmp125, i32 %., i32 1
  store i32 %storemerge96, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_205a8.60 to i32), i32* %r3.global-to-local, align 4
  %v2_cf08 = icmp eq i32 %storemerge96, 0
  store i32 %v0_cee8, i32* @global_var_205a8.60, align 4
  br i1 %v2_cf08, label %dec_label_pc_cf24, label %dec_label_pc_cf14

dec_label_pc_cf14:                                ; preds = %dec_label_pc_d044, %dec_label_pc_cf24, %dec_label_pc_ced0
  %v1_cf20 = phi i32 [ %v2_cfdc, %dec_label_pc_cf24 ], [ %v0_cee8, %dec_label_pc_ced0 ], [ 0, %dec_label_pc_d044 ]
  store i32 %v3_ced0, i32* @r4, align 4
  store i32 %v6_ced0, i32* @r5, align 4
  store i32 %v9_ced0, i32* @r6, align 4
  store i32 %v12_ced0, i32* @r7, align 4
  store i32 %v15_ced0, i32* @r8, align 4
  store i32 %v18_ced0, i32* @sb, align 4
  store i32 %v21_ced0, i32* @sl, align 4
  store i32 %v24_ced0, i32* @fp, align 4
  store i32 %v27_ced0, i32* @lr, align 4
  ret i32 %v1_cf20

dec_label_pc_cf24:                                ; preds = %dec_label_pc_ced0
  %v1_cf28 = call i32 @function_12a74(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_cf30 = call i32 @function_113b0()
  store i32 ptrtoint (i32* @global_var_1e51c.62 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_205a4.64 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_cf30, i32* %r2.global-to-local, align 4
  %v0_cf40 = load i32, i32* @r5, align 4
  %v1_cf40 = trunc i32 %v0_cf40 to i8
  %v3_cf40 = inttoptr i32 %v0_cf30 to i8*
  store i8 %v1_cf40, i8* %v3_cf40, align 1
  %v0_cf48 = load i32, i32* @r5, align 4
  %v1_cf48 = load i32, i32* %r3.global-to-local, align 4
  %v2_cf48 = inttoptr i32 %v1_cf48 to i32*
  store i32 %v0_cf48, i32* %v2_cf48, align 4
  %v0_cf4c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf4c = load i32, i32* %r1.global-to-local, align 4
  %v2_cf4c = inttoptr i32 %v1_cf4c to i32*
  store i32 %v0_cf4c, i32* %v2_cf4c, align 4
  %v1_cf50 = call i32 @function_f9c0(i32 13)
  %v1_cf58 = call i32 @function_f9c0(i32 14)
  %v2_cf60 = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_cf60, i32* %r2.global-to-local, align 4
  %v0_cf64 = load i32, i32* @r5, align 4
  store i32 %v0_cf64, i32* %r1.global-to-local, align 4
  %v2_cf70 = inttoptr i32 %v0_cf64 to i32*
  %v3_cf70 = call i32 @function_f8fc(i32 13, i32* %v2_cf70)
  %v1_cf78 = add i32 %v2_cf60, -24
  store i32 %v1_cf78, i32* %r3.global-to-local, align 4
  store i32 %v3_cf70, i32* %r1.global-to-local, align 4
  store i32 %v1_cf78, i32* @r0, align 4
  %v2_cf88 = inttoptr i32 %v1_cf78 to i8*
  %v3_cf88 = call i32 @function_ff28(i8* %v2_cf88, i32 %v3_cf70)
  store i32 %v3_cf88, i32* @r0, align 4
  store i32 %v1_cf78, i32* %r1.global-to-local, align 4
  %v2_cf90 = add i32 %v3_cf88, %v1_cf78
  store i32 %v2_cf90, i32* @r4, align 4
  %v0_cf94 = call i32 @function_1062c()
  %v2_cf9c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_cf9c, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_cfa4 = trunc i32 %v0_cf94 to i8
  %v4_cfa4 = call i32 @function_10360(i8 %v3_cfa4, i32 10, i32 %v2_cf9c)
  store i32 %v4_cfa4, i32* %r1.global-to-local, align 4
  %v0_cfac = load i32, i32* @r4, align 4
  store i32 %v0_cfac, i32* @r0, align 4
  %v2_cfb0 = inttoptr i32 %v0_cfac to i8*
  %v3_cfb0 = call i32 @function_ff28(i8* %v2_cfb0, i32 %v4_cfa4)
  %v0_cfb4 = load i32, i32* @r5, align 4
  store i32 %v0_cfb4, i32* %r1.global-to-local, align 4
  %v1_cfb8 = load i32, i32* @r4, align 4
  %v2_cfb8 = add i32 %v1_cfb8, %v3_cfb0
  store i32 %v2_cfb8, i32* @r4, align 4
  %v2_cfc0 = inttoptr i32 %v0_cfb4 to i32*
  %v3_cfc0 = call i32 @function_f8fc(i32 14, i32* %v2_cfc0)
  store i32 %v3_cfc0, i32* %r1.global-to-local, align 4
  %v0_cfc8 = load i32, i32* @r4, align 4
  store i32 %v0_cfc8, i32* @r0, align 4
  %v2_cfcc = inttoptr i32 %v0_cfc8 to i8*
  %v3_cfcc = call i32 @function_ff28(i8* %v2_cfcc, i32 %v3_cfc0)
  %v0_cfd0 = load i32, i32* @r5, align 4
  store i32 %v0_cfd0, i32* %r1.global-to-local, align 4
  store i32 %v3_cfcc, i32* @r6, align 4
  %v2_cfdc = call i32 @function_105cc(i32 %v1_cf78, i32 %v0_cfd0)
  %v7_cfe0 = icmp eq i32 %v2_cfdc, -1
  br i1 %v7_cfe0, label %dec_label_pc_cf14, label %dec_label_pc_cfe8

dec_label_pc_cfe8:                                ; preds = %dec_label_pc_cf24
  %v1_cfe8 = call i32 @function_109c0(i32 %v2_cfdc)
  %v1_cff0 = call i32 @function_f920(i32 13)
  %v1_cff8 = call i32 @function_f920(i32 14)
  store i32 ptrtoint (i32* @global_var_205a4.64 to i32), i32* %r3.global-to-local, align 4
  %v2_d004 = load i32, i32* @global_var_205a4.64, align 4
  store i32 %v2_d004, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d010 = call i32 @function_10724(i32 %v1_cf78, i32 %v2_d004, i32 4095)
  %v7_d014 = icmp eq i32 %v3_d010, -1
  br i1 %v7_d014, label %.thread9, label %bb128

bb128:                                            ; preds = %dec_label_pc_cfe8
  store i32 ptrtoint (i32* @global_var_205a4.64 to i32), i32* %r1.global-to-local, align 4
  %v3_d01c = load i32, i32* @global_var_205a4.64, align 4
  store i32 %v3_d01c, i32* %r3.global-to-local, align 4
  %v1_d020 = load i32, i32* @r5, align 4
  %v2_d020 = trunc i32 %v1_d020 to i8
  %v5_d020 = add i32 %v3_d01c, %v3_d010
  %v6_d020 = inttoptr i32 %v5_d020 to i8*
  store i8 %v2_d020, i8* %v6_d020, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_cfe8, %bb128
  store i32 %v1_cf78, i32* %r2.global-to-local, align 4
  %v0_d028 = load i32, i32* @r6, align 4
  %v1_d028 = load i32, i32* @r4, align 4
  %v1_cf78.neg = sub i32 24, %v2_cf60
  %v2_d028 = add i32 %v1_cf78.neg, %v0_d028
  %v2_d02c = add i32 %v2_d028, %v1_d028
  store i32 %v2_d02c, i32* @r1, align 4
  store i32 %v1_cf78, i32* @r0, align 4
  %v0_d034 = call i32 @function_ff94()
  %v0_d038 = load i32, i32* @r7, align 4
  store i32 %v0_d038, i32* @r4, align 4
  %v0_d03c = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d168 = ptrtoint i32* %stack_var_-128 to i32
  %v2_d174 = bitcast i32* %stack_var_-128 to i8*
  %v2_d1b8 = ptrtoint i32* %stack_var_-192 to i32
  %v2_d1bc = bitcast i32* %stack_var_-192 to i8*
  %v2_d308 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d31c = ptrtoint i32* %stack_var_-48 to i32
  %v2_d330 = ptrtoint i32* %stack_var_-8384 to i32
  %v2_d34c = ptrtoint i32* %stack_var_-208 to i32
  br label %dec_label_pc_d044

dec_label_pc_d044:                                ; preds = %dec_label_pc_d130, %.thread9
  %stack_var_-8388.0 = phi i32 [ %v0_d03c, %.thread9 ], [ %stack_var_-8388.3, %dec_label_pc_d130 ]
  %v1_d048 = call i32 @function_f9c0(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d054 = call i32 @function_f8fc(i32 13, i32* null)
  %v1_d058 = call i32 @function_10bbc(i32 %v3_d054)
  store i32 %v1_d058, i32* @sb, align 4
  %v2_d05c = icmp eq i32 %v1_d058, 0
  br i1 %v2_d05c, label %dec_label_pc_cf14, label %dec_label_pc_d064

dec_label_pc_d064:                                ; preds = %dec_label_pc_d044
  %v1_d068 = call i32 @function_f920(i32 13)
  %v1_d074 = call i32 @function_c93c(i32 58811)
  %v1_d080 = call i32 @function_c93c(i32 50951)
  %v1_d08c = call i32 @function_c93c(i32 14853)
  %v0_d09060 = load i32, i32* @sb, align 4
  %v1_d09461 = inttoptr i32 %v0_d09060 to i32*
  %v2_d09462 = call i32 @function_10d00(i32* %v1_d09461)
  %v2_d09864 = icmp eq i32 %v2_d09462, 0
  br i1 %v2_d09864, label %dec_label_pc_d130, label %dec_label_pc_d0a0.preheader

dec_label_pc_d0a0.preheader:                      ; preds = %dec_label_pc_d064, %dec_label_pc_d090.backedge
  %v0_d0a072 = phi i32 [ %v2_d094, %dec_label_pc_d090.backedge ], [ %v2_d09462, %dec_label_pc_d064 ]
  %stack_var_-8388.165 = phi i32 [ %stack_var_-8388.1.be, %dec_label_pc_d090.backedge ], [ %stack_var_-8388.0, %dec_label_pc_d064 ]
  br label %dec_label_pc_d0a0

dec_label_pc_d0a0:                                ; preds = %dec_label_pc_d0a0.preheader, %dec_label_pc_d118
  %v0_d0b0 = phi i32 [ %v2_d124, %dec_label_pc_d118 ], [ %v0_d0a072, %dec_label_pc_d0a0.preheader ]
  %stack_var_-8388.2 = phi i32 [ %v1_d0c4, %dec_label_pc_d118 ], [ %stack_var_-8388.165, %dec_label_pc_d0a0.preheader ]
  %v1_d0a0 = add i32 %v0_d0b0, 11
  %v2_d0a0 = inttoptr i32 %v1_d0a0 to i8*
  %v3_d0a0 = load i8, i8* %v2_d0a0, align 1
  %v4_d0a0 = zext i8 %v3_d0a0 to i32
  %v1_d0a4 = add nsw i32 %v4_d0a0, -48
  store i32 %v1_d0a4, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d0a4, 9
  br i1 %tmp, label %dec_label_pc_d090.backedge, label %dec_label_pc_d0b0

dec_label_pc_d0b0:                                ; preds = %dec_label_pc_d0a0
  store i32 %v1_d0a0, i32* @r6, align 4
  store i32 %v1_d0a0, i32* @r0, align 4
  %v1_d0b8 = call i32 @function_127c0(i32 %v1_d0a0)
  %v0_d0c0 = load i32, i32* @r5, align 4
  %v1_d0c4 = add i32 %stack_var_-8388.2, 1
  store i32 %v1_d0c4, i32* %r3.global-to-local, align 4
  store i32 %v1_d0b8, i32* @r8, align 4
  %v5_d0d0 = icmp slt i32 %v0_d0c0, %v1_d0b8
  %v2_d140 = call i32 @function_10640(i32* null)
  br i1 %v5_d0d0, label %dec_label_pc_d13c, label %dec_label_pc_d0d4

dec_label_pc_d0d4:                                ; preds = %dec_label_pc_d0b0
  %v0_d0dc = load i32, i32* @r4, align 4
  %v2_d0dc = sub i32 %v2_d140, %v0_d0dc
  %v7_d0e4 = icmp slt i32 %v2_d0dc, 601
  br i1 %v7_d0e4, label %dec_label_pc_d0ec, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d0d4
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d090.backedge

dec_label_pc_d0ec:                                ; preds = %dec_label_pc_d0d4
  %v0_d0ec = load i32, i32* @r8, align 4
  %v7_d0f0 = icmp slt i32 %v0_d0ec, 401
  br i1 %v7_d0f0, label %dec_label_pc_d090.backedge, label %dec_label_pc_d0f4

dec_label_pc_d0f4:                                ; preds = %dec_label_pc_d0ec
  %v3_d0fc = zext i32 %v1_d0c4 to i64
  %v4_d0fc = mul nuw i64 %v3_d0fc, 3435973837
  %v7_d0fc = trunc i64 %v4_d0fc to i32
  store i32 %v7_d0fc, i32* %r1.global-to-local, align 4
  %v3_d1001 = udiv i64 %v4_d0fc, 34359738368
  %v3_d1043 = mul nuw nsw i64 %v3_d1001, 8
  %v3_d104 = trunc i64 %v3_d1043 to i32
  store i32 %v3_d104, i32* %r3.global-to-local, align 4
  %v2_d1085 = mul nuw nsw i64 %v3_d1001, 2
  %v2_d108 = trunc i64 %v2_d1085 to i32
  %v2_d10c = add i32 %v3_d104, %v2_d108
  store i32 %v2_d10c, i32* %r2.global-to-local, align 4
  %v9_d110 = icmp eq i32 %v1_d0c4, %v2_d10c
  br i1 %v9_d110, label %dec_label_pc_d118, label %dec_label_pc_d090.backedge

dec_label_pc_d118:                                ; preds = %dec_label_pc_d0f4
  %v1_d11c = call i32 @function_12a74(i32 1)
  %v0_d120 = load i32, i32* @sb, align 4
  %v1_d124 = inttoptr i32 %v0_d120 to i32*
  %v2_d124 = call i32 @function_10d00(i32* %v1_d124)
  %v2_d128 = icmp eq i32 %v2_d124, 0
  br i1 %v2_d128, label %dec_label_pc_d130, label %dec_label_pc_d0a0

dec_label_pc_d130:                                ; preds = %dec_label_pc_d090.backedge, %dec_label_pc_d118, %dec_label_pc_d064
  %stack_var_-8388.3 = phi i32 [ %stack_var_-8388.0, %dec_label_pc_d064 ], [ %v1_d0c4, %dec_label_pc_d118 ], [ %stack_var_-8388.1.be, %dec_label_pc_d090.backedge ]
  %v0_d130 = load i32, i32* @sb, align 4
  %v1_d134 = inttoptr i32 %v0_d130 to i32*
  %v2_d134 = call i32 @function_109f4(i32* %v1_d134)
  br label %dec_label_pc_d044

dec_label_pc_d13c:                                ; preds = %dec_label_pc_d0b0
  %v1_d14c = call i32 @function_f9c0(i32 13)
  %v1_d154 = call i32 @function_f9c0(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d160 = call i32 @function_f8fc(i32 13, i32* null)
  store i32 %v2_d168, i32* @fp, align 4
  store i32 %v3_d160, i32* %r1.global-to-local, align 4
  store i32 %v2_d168, i32* @r0, align 4
  %v3_d174 = call i32 @function_ff28(i8* %v2_d174, i32 %v3_d160)
  %v1_d178 = load i32, i32* @fp, align 4
  %v2_d178 = add i32 %v1_d178, %v3_d174
  store i32 %v2_d178, i32* %r5.global-to-local, align 4
  %v0_d17c = load i32, i32* @r6, align 4
  store i32 %v0_d17c, i32* %r1.global-to-local, align 4
  store i32 %v2_d178, i32* @r0, align 4
  %v2_d184 = inttoptr i32 %v2_d178 to i8*
  %v3_d184 = call i32 @function_ff28(i8* %v2_d184, i32 %v0_d17c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d194 = call i32 @function_f8fc(i32 14, i32* null)
  store i32 %v3_d194, i32* %r1.global-to-local, align 4
  %v1_d19c = load i32, i32* %r5.global-to-local, align 4
  %v2_d19c = add i32 %v1_d19c, %v3_d184
  store i32 %v2_d19c, i32* @r0, align 4
  %v2_d1a0 = inttoptr i32 %v2_d19c to i8*
  %v3_d1a0 = call i32 @function_ff28(i8* %v2_d1a0, i32 %v3_d194)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d1ac = call i32 @function_f8fc(i32 13, i32* null)
  store i32 %v3_d1ac, i32* %r1.global-to-local, align 4
  store i32 %v2_d1b8, i32* @r0, align 4
  %v3_d1bc = call i32 @function_ff28(i8* %v2_d1bc, i32 %v3_d1ac)
  store i32 %v2_d1b8, i32* %r2.global-to-local, align 4
  %v2_d1c8 = add i32 %v3_d1bc, %v2_d1b8
  store i32 %v2_d1c8, i32* @r5, align 4
  %v0_d1cc = load i32, i32* @r6, align 4
  store i32 %v0_d1cc, i32* %r1.global-to-local, align 4
  store i32 %v2_d1c8, i32* @r0, align 4
  %v2_d1d4 = inttoptr i32 %v2_d1c8 to i8*
  %v3_d1d4 = call i32 @function_ff28(i8* %v2_d1d4, i32 %v0_d1cc)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d1d4, i32* @r4, align 4
  %v3_d1e4 = call i32 @function_f8fc(i32 29, i32* null)
  store i32 %v3_d1e4, i32* %r1.global-to-local, align 4
  %v0_d1ec = load i32, i32* @r4, align 4
  %v1_d1ec = load i32, i32* @r5, align 4
  %v2_d1ec = add i32 %v1_d1ec, %v0_d1ec
  store i32 %v2_d1ec, i32* @r0, align 4
  %v2_d1f0 = inttoptr i32 %v2_d1ec to i8*
  %v3_d1f0 = call i32 @function_ff28(i8* %v2_d1f0, i32 %v3_d1e4)
  %v1_d1f8 = call i32 @function_f920(i32 13)
  %v1_d200 = call i32 @function_f920(i32 14)
  store i32 %v1_cf78, i32* %r1.global-to-local, align 4
  store i32 4095, i32* @r2, align 4
  %v3_d214 = call i32 @function_10724(i32 %v2_d168, i32 %v1_cf78, i32 4095)
  %v7_d218 = icmp eq i32 %v3_d214, -1
  store i32 %v3_d214, i32* @r5, align 4
  br i1 %v7_d218, label %dec_label_pc_d2dc, label %dec_label_pc_d224

dec_label_pc_d224:                                ; preds = %dec_label_pc_d13c
  store i32 %v1_cf78, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d22c = add i32 %v3_d214, %v1_cf78
  %v5_d22c = inttoptr i32 %v4_d22c to i8*
  store i8 0, i8* %v5_d22c, align 1
  %v1_d234 = call i32 @function_f9c0(i32 30)
  %v0_d238 = load i32, i32* @r4, align 4
  store i32 %v0_d238, i32* %r1.global-to-local, align 4
  %v2_d240 = inttoptr i32 %v0_d238 to i32*
  %v3_d240 = call i32 @function_f8fc(i32 30, i32* %v2_d240)
  %v0_d244 = load i32, i32* @r5, align 4
  %v1_d244 = add i32 %v0_d244, -1
  store i32 %v1_d244, i32* @r1, align 4
  store i32 %v3_d240, i32* %r2.global-to-local, align 4
  %v4_d250 = call i32 @function_10250(i8* %v2_cf88, i32 %v1_d244, i32 %v3_d240)
  %v7_d254 = icmp eq i32 %v4_d250, -1
  br i1 %v7_d254, label %dec_label_pc_d270, label %dec_label_pc_d25c

dec_label_pc_d25c:                                ; preds = %dec_label_pc_d224
  %v1_d260 = call i32 @function_10598(i32 %v1_cf78)
  %v0_d264 = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d26c = call i32 @function_1078c(i32 %v0_d264, i32 9)
  br label %dec_label_pc_d270

dec_label_pc_d270:                                ; preds = %dec_label_pc_d224, %dec_label_pc_d25c
  %v1_d274 = call i32 @function_f920(i32 30)
  store i32 %v1_d274, i32* @r0, align 4
  %v0_d278 = call i32 @function_1062c()
  store i32 %v0_d278, i32* @r0, align 4
  %v1_d27c = load i32, i32* @r8, align 4
  %v9_d27c = icmp eq i32 %v0_d278, %v1_d27c
  br i1 %v9_d27c, label %dec_label_pc_d2a8, label %dec_label_pc_d284

dec_label_pc_d284:                                ; preds = %dec_label_pc_d270
  %v0_d284 = call i32 @function_10584()
  %v1_d288 = load i32, i32* @r8, align 4
  %v9_d288 = icmp eq i32 %v0_d284, %v1_d288
  br i1 %v9_d288, label %dec_label_pc_d2a8, label %dec_label_pc_d290

dec_label_pc_d290:                                ; preds = %dec_label_pc_d284
  store i32 ptrtoint (i32* @global_var_205a4.64 to i32), i32* %r2.global-to-local, align 4
  %v2_d298 = load i32, i32* @global_var_205a4.64, align 4
  store i32 %v2_d298, i32* %r1.global-to-local, align 4
  %v4_d29c = call i32 @function_102e0(i8* %v2_cf88, i32 %v2_d298, i32 ptrtoint (i32* @global_var_205a4.64 to i32))
  %v2_d2a0 = icmp eq i32 %v4_d29c, 0
  br i1 %v2_d2a0, label %dec_label_pc_d2b4, label %dec_label_pc_d290.dec_label_pc_d2a8_crit_edge

dec_label_pc_d290.dec_label_pc_d2a8_crit_edge:    ; preds = %dec_label_pc_d290
  %v0_d2ac.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d2a8

dec_label_pc_d2a8:                                ; preds = %dec_label_pc_d290.dec_label_pc_d2a8_crit_edge, %dec_label_pc_d284, %dec_label_pc_d270
  %v0_d2ac = phi i32 [ %v0_d2ac.pre, %dec_label_pc_d290.dec_label_pc_d2a8_crit_edge ], [ %v0_d284, %dec_label_pc_d284 ], [ %v0_d278, %dec_label_pc_d270 ]
  store i32 %v2_d140, i32* @r4, align 4
  store i32 %v0_d2ac, i32* @r5, align 4
  br label %dec_label_pc_d090.backedge

dec_label_pc_d090.backedge:                       ; preds = %dec_label_pc_d0f4, %dec_label_pc_d0ec, %dec_label_pc_d0a0, %dec_label_pc_d2a8, %dec_label_pc_d408, %.thread10
  %stack_var_-8388.1.be = phi i32 [ %v1_d0c4, %dec_label_pc_d408 ], [ %v1_d0c4, %dec_label_pc_d2a8 ], [ %v1_d0c4, %.thread10 ], [ %stack_var_-8388.2, %dec_label_pc_d0a0 ], [ %v1_d0c4, %dec_label_pc_d0ec ], [ %v1_d0c4, %dec_label_pc_d0f4 ]
  %v0_d090 = load i32, i32* @sb, align 4
  %v1_d094 = inttoptr i32 %v0_d090 to i32*
  %v2_d094 = call i32 @function_10d00(i32* %v1_d094)
  %v2_d098 = icmp eq i32 %v2_d094, 0
  br i1 %v2_d098, label %dec_label_pc_d130, label %dec_label_pc_d0a0.preheader

dec_label_pc_d2b4:                                ; preds = %dec_label_pc_d290
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d2bc = call i32 @function_105cc(i32 %v1_cf78, i32 0)
  %v7_d2c0 = icmp eq i32 %v2_d2bc, -1
  store i32 %v2_d2bc, i32* @r4, align 4
  br i1 %v7_d2c0, label %bb129, label %.thread12

bb129:                                            ; preds = %dec_label_pc_d2b4
  store i32 9, i32* %r1.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d2b4, %bb129
  store i32 ptrtoint (i32* @global_var_d2d4.67 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d2c0, i32 ptrtoint (i32* @global_var_1078c.66 to i32))
  %v0_d2d4 = load i32, i32* @r4, align 4
  %v1_d2d8 = call i32 @function_109c0(i32 %v0_d2d4)
  br label %dec_label_pc_d2dc

dec_label_pc_d2dc:                                ; preds = %dec_label_pc_d13c, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d2e4 = call i32 @function_105cc(i32 %v2_d168, i32 0)
  %v7_d2e8 = icmp eq i32 %v2_d2e4, -1
  store i32 %v2_d2e4, i32* @sl, align 4
  br i1 %v7_d2e8, label %dec_label_pc_d408, label %dec_label_pc_d2f4

dec_label_pc_d2f4:                                ; preds = %dec_label_pc_d2dc
  %v1_d2f8 = call i32 @function_f9c0(i32 18)
  %v1_d300 = call i32 @function_f9c0(i32 19)
  store i32 %v2_d308, i32* %r1.global-to-local, align 4
  %v3_d310 = call i32 @function_f8fc(i32 18, i32* nonnull %stack_var_-44)
  store i32 %v3_d310, i32* @r6, align 4
  store i32 %v2_d31c, i32* %r1.global-to-local, align 4
  %v3_d324 = call i32 @function_f8fc(i32 19, i32* nonnull %stack_var_-48)
  store i32 %v3_d324, i32* @r7, align 4
  store i32 %v2_d330, i32* @r4, align 4
  %v0_d33456 = load i32, i32* @sl, align 4
  store i32 %v2_d330, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d34057 = call i32 @function_10758(i32 %v0_d33456)
  %tmp130 = icmp slt i32 %v1_d34057, 1
  br i1 %tmp130, label %dec_label_pc_d438, label %dec_label_pc_d34c

dec_label_pc_d34c:                                ; preds = %dec_label_pc_d2f4, %dec_label_pc_d334.backedge
  %v0_d38047 = phi i32 [ %v1_d340, %dec_label_pc_d334.backedge ], [ %v1_d34057, %dec_label_pc_d2f4 ]
  store i32 %v2_d34c, i32* %r3.global-to-local, align 4
  %v3_d350 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d350, i32* @r5, align 4
  %v5_d358 = icmp slt i32 %v0_d38047, %v3_d350
  br i1 %v5_d358, label %dec_label_pc_d368, label %dec_label_pc_d3bc.lr.ph

dec_label_pc_d3bc.lr.ph:                          ; preds = %dec_label_pc_d34c
  %v1_d3b439 = add i32 %v0_d38047, -1
  store i32 %v1_d3b439, i32* %r1.global-to-local, align 4
  %v0_d3bc.pre = load i32, i32* @r6, align 4
  %v1_d3c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d3bc

dec_label_pc_d368:                                ; preds = %dec_label_pc_d3b4.backedge, %dec_label_pc_d34c
  store i32 %v2_d34c, i32* %r1.global-to-local, align 4
  %v3_d36c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d36c, i32* @lr, align 4
  %v5_d374 = icmp slt i32 %v0_d38047, %v3_d36c
  br i1 %v5_d374, label %dec_label_pc_d334.backedge, label %.thread25

dec_label_pc_d334.backedge:                       ; preds = %dec_label_pc_d39c, %.thread25, %dec_label_pc_d368
  %v0_d334 = load i32, i32* @sl, align 4
  store i32 %v2_d330, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d340 = call i32 @function_10758(i32 %v0_d334)
  %tmp131 = icmp slt i32 %v1_d340, 1
  br i1 %tmp131, label %dec_label_pc_d438, label %dec_label_pc_d34c

.thread25:                                        ; preds = %dec_label_pc_d368
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d38049 = icmp eq i32 %v0_d38047, 0
  br i1 %v2_d38049, label %dec_label_pc_d334.backedge, label %dec_label_pc_d388.lr.ph

dec_label_pc_d388.lr.ph:                          ; preds = %.thread25
  %v0_d388.pre = load i32, i32* @r7, align 4
  %v1_d38c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d388

dec_label_pc_d388:                                ; preds = %dec_label_pc_d39c, %dec_label_pc_d388.lr.ph
  %v0_d380.in = phi i32 [ %v0_d38047, %dec_label_pc_d388.lr.ph ], [ %v0_d380, %dec_label_pc_d39c ]
  %v0_d39c = phi i32 [ 0, %dec_label_pc_d388.lr.ph ], [ %v1_d39c, %dec_label_pc_d39c ]
  %v1_d388 = phi i32 [ 0, %dec_label_pc_d388.lr.ph ], [ %v1_d38886, %dec_label_pc_d39c ]
  %v0_d380 = add i32 %v0_d380.in, -1
  %v2_d388 = add i32 %v1_d388, %v0_d388.pre
  %v3_d388 = inttoptr i32 %v2_d388 to i8*
  %v4_d388 = load i8, i8* %v3_d388, align 1
  %v6_d388 = zext i8 %v4_d388 to i32
  store i32 %v6_d388, i32* %r2.global-to-local, align 4
  %v2_d38c = add i32 %v0_d39c, %v1_d38c.pre
  %v3_d38c = inttoptr i32 %v2_d38c to i8*
  %v4_d38c = load i8, i8* %v3_d38c, align 1
  %v6_d38c = zext i8 %v4_d38c to i32
  store i32 %v6_d38c, i32* %r3.global-to-local, align 4
  %v9_d390 = icmp eq i8 %v4_d38c, %v4_d388
  br i1 %v9_d390, label %dec_label_pc_d3d8, label %bb132

bb132:                                            ; preds = %dec_label_pc_d388
  br label %dec_label_pc_d39c

dec_label_pc_d39c:                                ; preds = %bb132, %dec_label_pc_d3d8
  %v1_d38886 = phi i32 [ %v1_d3d8, %dec_label_pc_d3d8 ], [ 0, %bb132 ]
  %v1_d39c = add i32 %v0_d39c, 1
  store i32 %v1_d39c, i32* %r1.global-to-local, align 4
  %v2_d380 = icmp eq i32 %v0_d380, 0
  br i1 %v2_d380, label %dec_label_pc_d334.backedge, label %dec_label_pc_d388

dec_label_pc_d3a4:                                ; preds = %dec_label_pc_d3bc
  %v1_d3a4 = add i32 %v1_d3bc, 1
  store i32 %v1_d3a4, i32* @lr, align 4
  %v9_d3a8 = icmp eq i32 %v3_d350, %v1_d3a4
  br i1 %v9_d3a8, label %dec_label_pc_d3e4, label %dec_label_pc_d3b4.backedge

dec_label_pc_d3b4.backedge:                       ; preds = %dec_label_pc_d3a4, %dec_label_pc_d3d0
  %v1_d3bc77 = phi i32 [ 0, %dec_label_pc_d3d0 ], [ %v1_d3a4, %dec_label_pc_d3a4 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d3b4 = add i32 %v0_d3b4, -1
  store i32 %v1_d3b4, i32* %r1.global-to-local, align 4
  %v2_d3b4 = icmp eq i32 %v0_d3b4, 0
  br i1 %v2_d3b4, label %dec_label_pc_d368, label %dec_label_pc_d3bc

dec_label_pc_d3bc:                                ; preds = %dec_label_pc_d3b4.backedge, %dec_label_pc_d3bc.lr.ph
  %v0_d3b4 = phi i32 [ %v1_d3b439, %dec_label_pc_d3bc.lr.ph ], [ %v1_d3b4, %dec_label_pc_d3b4.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d3bc.lr.ph ], [ %storemerge, %dec_label_pc_d3b4.backedge ]
  %v1_d3bc = phi i32 [ 0, %dec_label_pc_d3bc.lr.ph ], [ %v1_d3bc77, %dec_label_pc_d3b4.backedge ]
  %v2_d3bc = add i32 %v1_d3bc, %v0_d3bc.pre
  %v3_d3bc = inttoptr i32 %v2_d3bc to i8*
  %v4_d3bc = load i8, i8* %v3_d3bc, align 1
  %v6_d3bc = zext i8 %v4_d3bc to i32
  store i32 %v6_d3bc, i32* %r2.global-to-local, align 4
  %v2_d3c0 = add i32 %storemerge.in, %v1_d3c0.pre
  %v3_d3c0 = inttoptr i32 %v2_d3c0 to i8*
  %v4_d3c0 = load i8, i8* %v3_d3c0, align 1
  %v6_d3c0 = zext i8 %v4_d3c0 to i32
  store i32 %v6_d3c0, i32* %r3.global-to-local, align 4
  %v9_d3c4 = icmp eq i8 %v4_d3c0, %v4_d3bc
  br i1 %v9_d3c4, label %dec_label_pc_d3a4, label %dec_label_pc_d3d0

dec_label_pc_d3d0:                                ; preds = %dec_label_pc_d3bc
  br label %dec_label_pc_d3b4.backedge

dec_label_pc_d3d8:                                ; preds = %dec_label_pc_d388
  %v1_d3d8 = add i32 %v1_d388, 1
  %v9_d3dc = icmp eq i32 %v3_d36c, %v1_d3d8
  br i1 %v9_d3dc, label %dec_label_pc_d3e4, label %dec_label_pc_d39c

dec_label_pc_d3e4:                                ; preds = %dec_label_pc_d3a4, %dec_label_pc_d3d8
  %v1_d3e8 = call i32 @function_f920(i32 18)
  %v1_d3f0 = call i32 @function_f920(i32 19)
  %v0_d3f4 = load i32, i32* @sl, align 4
  %v1_d3f8 = call i32 @function_109c0(i32 %v0_d3f4)
  %v0_d3fc = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d404 = call i32 @function_1078c(i32 %v0_d3fc, i32 9)
  br label %dec_label_pc_d408

dec_label_pc_d408:                                ; preds = %dec_label_pc_d2dc, %dec_label_pc_d438, %dec_label_pc_d3e4
  store i32 %v2_d168, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d410 = call i32 @function_ff94()
  store i32 %v2_d1b8, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d420 = call i32 @function_ff94()
  %v1_d428 = call i32 @function_12a74(i32 1)
  store i32 %v2_d140, i32* @r4, align 4
  %v0_d430 = load i32, i32* @r8, align 4
  store i32 %v0_d430, i32* @r5, align 4
  br label %dec_label_pc_d090.backedge

dec_label_pc_d438:                                ; preds = %dec_label_pc_d334.backedge, %dec_label_pc_d2f4
  %v1_d43c = call i32 @function_f920(i32 18)
  %v1_d444 = call i32 @function_f920(i32 19)
  %v0_d448 = load i32, i32* @sl, align 4
  %v1_d44c = call i32 @function_109c0(i32 %v0_d448)
  br label %dec_label_pc_d408

; uselistorder directives
  uselistorder i32 %v1_d3d8, { 1, 0 }
  uselistorder i32 %v1_d39c, { 1, 0 }
  uselistorder i32 %v1_d388, { 1, 0 }
  uselistorder i32 %v0_d39c, { 1, 0 }
  uselistorder i32 %v1_d340, { 1, 0 }
  uselistorder i32 %v2_d2e4, { 1, 0 }
  uselistorder i1 %v7_d2c0, { 1, 0 }
  uselistorder i32 %v2_d2bc, { 1, 0 }
  uselistorder i32 %v2_d094, { 1, 0 }
  uselistorder i32 %stack_var_-8388.1.be, { 1, 0 }
  uselistorder i32 %v3_d214, { 1, 2, 0 }
  uselistorder i32 %v2_d124, { 1, 0 }
  uselistorder i32 %v1_d0c4, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d0a0, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8388.0, { 1, 0 }
  uselistorder i32 %v2_d330, { 1, 0, 2 }
  uselistorder i32 %v2_d1b8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d010, { 1, 0 }
  uselistorder i32 %v2_cfdc, { 2, 0, 1 }
  uselistorder i32 %v1_cf78, { 3, 2, 0, 4, 6, 5, 8, 7, 9, 10, 1, 11, 12, 13, 14 }
  uselistorder i32 %storemerge96, { 1, 0 }
  uselistorder i32 %v0_cee8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 0, 7, 6, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40 }
  uselistorder i32 (i32*)* @function_10d00, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_c93c, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_10bbc, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10724, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_205a4.64, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d408, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d3e4, { 1, 0 }
  uselistorder label %dec_label_pc_d3b4.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d39c, { 1, 0 }
  uselistorder label %dec_label_pc_d34c, { 1, 0 }
  uselistorder label %dec_label_pc_d2dc, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d090.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d270, { 1, 0 }
  uselistorder label %dec_label_pc_d0a0, { 1, 0 }
  uselistorder label %dec_label_pc_d0a0.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @function_d464(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d464:
  store i32 54396, i32* inttoptr (i32 123736 to i32*), align 8
  ret i32 %arg1
}

define i32 @function_d47c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d47c:
  %v1_d484 = call i32 @function_f9c0(i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_15cf0.71 to i32), i32* @r0, align 4
  %v2_d48c = call i32 @function_10f24(i32 ptrtoint ([14 x i8]* @global_var_15cf0.71 to i32))
  store i32 ptrtoint (i16** @global_var_205ac.73 to i32), i32* @r4, align 4
  store i32 %v2_d48c, i32* @global_var_205b0.74, align 4
  %v3_d4a0 = call i32 @function_f8fc(i32 1, i32* null)
  %v4_d4a0 = inttoptr i32 %v3_d4a0 to i16*
  %v3_d4a4 = load i16, i16* %v4_d4a0, align 2
  store i16 %v3_d4a4, i16* bitcast (i32* @global_var_205ae.75 to i16*), align 4
  %v1_d4b0 = call i32 @function_f920(i32 1)
  ret i32 %v1_d4b0
}

define i32 @function_d4c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d4c4:
  %stack_var_-20 = alloca i32, align 4
  %v3_d4c4 = load i32, i32* @r4, align 4
  %v6_d4c4 = load i32, i32* @r5, align 4
  %v9_d4c4 = load i32, i32* @lr, align 4
  %v0_d4cc = call i32 @function_106b0()
  %v7_d4d0 = icmp eq i32 %v0_d4cc, -1
  %. = zext i1 %v7_d4d0 to i32
  %tmp11 = icmp slt i32 %v0_d4cc, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d4ec = icmp eq i32 %storemerge4, 0
  store i32 %v0_d4cc, i32* @global_var_1e520.77, align 4
  br i1 %v2_d4ec, label %dec_label_pc_d504, label %dec_label_pc_d4f8

dec_label_pc_d4f8:                                ; preds = %dec_label_pc_d4c4
  store i32 %v3_d4c4, i32* @r4, align 4
  store i32 %v6_d4c4, i32* @r5, align 4
  store i32 %v9_d4c4, i32* @lr, align 4
  ret i32 %v0_d4cc

dec_label_pc_d504:                                ; preds = %dec_label_pc_d4c4
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d510 = call i32 @function_f9c0(i32 23)
  %v1_d518 = call i32 @function_f9c0(i32 24)
  %v0_d51c = load i32, i32* @r5, align 4
  %v2_d524 = inttoptr i32 %v0_d51c to i32*
  %v3_d524 = call i32 @function_f8fc(i32 23, i32* %v2_d524)
  %v2_d52c = call i32 @function_105cc(i32 %v3_d524, i32 2)
  %v7_d530 = icmp eq i32 %v2_d52c, -1
  store i32 %v2_d52c, i32* @r4, align 4
  br i1 %v7_d530, label %dec_label_pc_d578, label %dec_label_pc_d53c

dec_label_pc_d53c:                                ; preds = %dec_label_pc_d578, %dec_label_pc_d504
  %v0_d548 = phi i32 [ %v2_d588, %dec_label_pc_d578 ], [ %v2_d52c, %dec_label_pc_d504 ]
  %v2_d54c = ptrtoint i32* %stack_var_-20 to i32
  %v3_d550 = call i32 @function_10934(i32 %v0_d548, i32 -2147199228, i32 %v2_d54c)
  br label %dec_label_pc_d554

dec_label_pc_d554:                                ; preds = %dec_label_pc_d554, %dec_label_pc_d53c
  %v0_d560 = load i32, i32* @r4, align 4
  %v3_d568 = call i32 @function_10934(i32 %v0_d560, i32 -2147199227, i32 0)
  %v1_d570 = call i32 @function_12a74(i32 10)
  br label %dec_label_pc_d554

dec_label_pc_d578:                                ; preds = %dec_label_pc_d504
  %v0_d578 = load i32, i32* @r5, align 4
  %v2_d580 = inttoptr i32 %v0_d578 to i32*
  %v3_d580 = call i32 @function_f8fc(i32 24, i32* %v2_d580)
  %v2_d588 = call i32 @function_105cc(i32 %v3_d580, i32 2)
  %v3_d58c = icmp eq i32 %v2_d588, -1
  store i32 %v2_d588, i32* @r4, align 4
  br i1 %v3_d58c, label %dec_label_pc_d598, label %dec_label_pc_d53c

dec_label_pc_d598:                                ; preds = %dec_label_pc_d578
  %v1_d59c = call i32 @function_f920(i32 23)
  %v1_d5a4 = call i32 @function_f920(i32 24)
  %v0_d5a8 = load i32, i32* @r5, align 4
  %v1_d5ac = call i32 @function_129bc(i32 %v0_d5a8)
  %v0_d5b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d5b0, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d598
  %v5_d5b0 = udiv i32 %v1_d5ac, 1024
  %v6_d5b0 = and i32 %v5_d5b0, 2
  store i32 %v6_d5b0, i32* @lr, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d598, %bb14
  ret i32 %v1_d5ac

; uselistorder directives
  uselistorder i32 %v1_d5ac, { 1, 0 }
  uselistorder i32 %v2_d588, { 1, 2, 0 }
  uselistorder i32 %v2_d52c, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d4cc, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_d5b4(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_d5b4:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1416 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-392 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v15_d5b4 = load i32, i32* @r8, align 4
  %v2_d5c0 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d5c0, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d5d8 = call i32 @function_11200(i32* nonnull %stack_var_-64)
  store i32 %v2_d5c0, i32* @r0, align 4
  %v2_d5e4 = call i32 @function_111bc(i32 %v2_d5c0, i32 2)
  %v0_d5e8 = load i32, i32* @r5, align 4
  store i32 %v0_d5e8, i32* %r2.global-to-local, align 4
  %v3_d5f4 = call i32 @function_10988(i32 %v0_d5e8, i32 %v2_d5c0, i32 %v0_d5e8)
  %v2_d600 = call i32 @function_11214(i32 17, i32 1)
  %v2_d60c = call i32 @function_11214(i32 5, i32 54372)
  %v0_d610 = call i32 @function_101bc()
  store i32 ptrtoint (i16** @global_var_205ac.73 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_205b0.74, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d610, i32* @global_var_205a0.46, align 4
  store i16 5888, i16* bitcast (i32* @global_var_205ae.75 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_205ac.73 to i16*), align 4
  %v6_d638 = call i32 @function_fa60(i32 %v0_d610, i32 ptrtoint (i32* @global_var_205a0.46 to i32), i32 ptrtoint (i16** @global_var_205ac.73 to i32), i32 5888)
  store i32 54396, i32* %r3.global-to-local, align 4
  store i32 123736, i32* @lr, align 4
  store i32 54396, i32* inttoptr (i32 123736 to i32*), align 8
  %v1_d648 = call i32 @function_dd70(i32 %v6_d638)
  %v2_d650 = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_d650, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d658 = call i32 @function_ff94()
  %v0_d65c = load i32, i32* @r6, align 4
  %v7_d65c = icmp eq i32 %v0_d65c, 2
  br i1 %v7_d65c, label %dec_label_pc_d794, label %dec_label_pc_d664

dec_label_pc_d664:                                ; preds = %dec_label_pc_d794, %dec_label_pc_d5b4, %dec_label_pc_d7a4
  %v0_d664 = call i32 @function_dd14()
  store i32 %v0_d664, i32* @r6, align 4
  %v0_d66c = load i32, i32* @r8, align 4
  %v1_d66c = inttoptr i32 %v0_d66c to i32*
  %v2_d66c = load i32, i32* %v1_d66c, align 4
  %v1_d670 = inttoptr i32 %v2_d66c to i8*
  %v2_d670 = call i32 @function_ff00(i8* %v1_d670)
  %v0_d678 = load i32, i32* @r8, align 4
  %v1_d678 = inttoptr i32 %v0_d678 to i32*
  %v2_d678 = load i32, i32* %v1_d678, align 4
  %v1_d67c = inttoptr i32 %v2_d678 to i8*
  %v2_d67c = call i32 @function_ff00(i8* %v1_d67c)
  %v1_d680 = sub i32 20, %v2_d670
  store i32 %v2_d67c, i32* @r4, align 4
  %v0_d688 = load i32, i32* @r6, align 4
  %v2_d68c = call i32 @function_10558(i32 %v0_d688, i32 %v1_d680)
  %v2_d694 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_d694, i32* @r5, align 4
  %v0_d698 = load i32, i32* @r4, align 4
  %v2_d698 = add i32 %v0_d698, %v1_d680
  store i32 %v2_d698, i32* @r4, align 4
  %v2_d6a4 = call i32 @function_ddd8(i32 %v2_d694, i32 %v2_d698)
  %v2_d6ac = ptrtoint i32* %stack_var_-40 to i32
  %v1_d6b0 = load i32, i32* @r4, align 4
  %v2_d6b0 = add i32 %v1_d6b0, %v2_d6ac
  store i32 %v2_d6b0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_d6bc = load i32, i32* @r8, align 4
  %v1_d6bc = inttoptr i32 %v0_d6bc to i32*
  %v2_d6bc = load i32, i32* %v1_d6bc, align 4
  store i32 %v2_d6bc, i32* @r0, align 4
  %v3_d6c0 = add i32 %v2_d6b0, -64
  %v4_d6c0 = inttoptr i32 %v3_d6c0 to i8*
  store i8 0, i8* %v4_d6c0, align 1
  %v2_d6c4 = inttoptr i32 %v2_d6bc to i8*
  %v3_d6c4 = call i32 @function_ff28(i8* %v2_d6c4, i32 %v2_d694)
  store i32 32, i32* @r1, align 4
  store i32 %v2_d694, i32* @r0, align 4
  %v0_d6d0 = call i32 @function_ff94()
  %v0_d6d4 = call i32 @function_dd14()
  store i32 %v0_d6d4, i32* @r7, align 4
  %v0_d6dc = load i32, i32* @r8, align 4
  %v1_d6dc = inttoptr i32 %v0_d6dc to i32*
  %v2_d6dc = load i32, i32* %v1_d6dc, align 4
  %v1_d6e0 = inttoptr i32 %v2_d6dc to i8*
  %v2_d6e0 = call i32 @function_ff00(i8* %v1_d6e0)
  store i32 %v2_d6e0, i32* @r6, align 4
  %v0_d6e8 = load i32, i32* @r8, align 4
  %v1_d6e8 = inttoptr i32 %v0_d6e8 to i32*
  %v2_d6e8 = load i32, i32* %v1_d6e8, align 4
  %v1_d6ec = inttoptr i32 %v2_d6e8 to i8*
  %v2_d6ec = call i32 @function_ff00(i8* %v1_d6ec)
  %v0_d6f0 = load i32, i32* @r6, align 4
  %v1_d6f0 = sub i32 20, %v0_d6f0
  store i32 %v2_d6ec, i32* @r4, align 4
  %v0_d6f8 = load i32, i32* @r7, align 4
  %v2_d6fc = call i32 @function_10558(i32 %v0_d6f8, i32 %v1_d6f0)
  %v0_d700 = load i32, i32* @r4, align 4
  %v2_d700 = add i32 %v0_d700, %v1_d6f0
  store i32 %v2_d700, i32* @r4, align 4
  %v2_d70c = call i32 @function_ddd8(i32 %v2_d694, i32 %v2_d700)
  store i32 %v2_d6ac, i32* %r2.global-to-local, align 4
  %v1_d718 = load i32, i32* @r4, align 4
  %v2_d718 = add i32 %v1_d718, %v2_d6ac
  store i32 %v2_d718, i32* %r3.global-to-local, align 4
  %v0_d71c = load i32, i32* @sb, align 4
  %v1_d71c = trunc i32 %v0_d71c to i8
  %v3_d71c = add i32 %v2_d718, -64
  %v4_d71c = inttoptr i32 %v3_d71c to i8*
  store i8 %v1_d71c, i8* %v4_d71c, align 1
  %v4_d728 = call i32 @function_10670(i32 15, i32 %v2_d694, i32 %v2_d6ac, i32 %v2_d718)
  %v1_d730 = call i32 @function_f9c0(i32 3)
  %v3_d73c = call i32 @function_f8fc(i32 3, i32* nonnull %stack_var_-48)
  %v3_d740 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d740, i32* %r2.global-to-local, align 4
  %v2_d74c = call i32 @function_108cc(i32 1, i32 %v3_d73c)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_d75c = call i32 @function_108cc(i32 1, i32 ptrtoint (i32* @global_var_15d00.85 to i32))
  %v1_d764 = call i32 @function_f920(i32 3)
  %v1_d768 = call i32 @function_85e0(i32 %v1_d764)
  %v1_d76c = call i32 @function_ced0(i32 %v1_d768)
  store i32 %v1_d76c, i32* @r0, align 4
  %v1_d770 = call i32 @function_d4c4(i32 %v1_d76c)
  store i32 %v1_d770, i32* @r0, align 4
  %v0_d774 = call i32 @function_106b0()
  %v1_d778 = load i32, i32* @sb, align 4
  %v7_d77c = icmp sgt i32 %v0_d774, %v1_d778
  br i1 %v7_d77c, label %dec_label_pc_d780, label %dec_label_pc_d7d0

dec_label_pc_d780:                                ; preds = %dec_label_pc_d664
  store i32 %v15_d5b4, i32* %r8.global-to-local, align 4
  ret i32 %v1_d778

dec_label_pc_d794:                                ; preds = %dec_label_pc_d5b4
  %v0_d794 = load i32, i32* @r8, align 4
  %v1_d794 = add i32 %v0_d794, 4
  %v2_d794 = inttoptr i32 %v1_d794 to i32*
  %v3_d794 = load i32, i32* %v2_d794, align 4
  %v1_d798 = inttoptr i32 %v3_d794 to i8*
  %v2_d798 = call i32 @function_ff00(i8* %v1_d798)
  %v8_d7a0 = icmp sgt i32 %v2_d798, 31
  br i1 %v8_d7a0, label %dec_label_pc_d664, label %dec_label_pc_d7a4

dec_label_pc_d7a4:                                ; preds = %dec_label_pc_d794
  %v0_d7a8 = load i32, i32* @r8, align 4
  %v1_d7a8 = add i32 %v0_d7a8, 4
  %v2_d7a8 = inttoptr i32 %v1_d7a8 to i32*
  %v3_d7a8 = load i32, i32* %v2_d7a8, align 4
  store i32 %v2_d650, i32* @r0, align 4
  %v2_d7b0 = bitcast i32* %stack_var_-136 to i8*
  %v3_d7b0 = call i32 @function_ff28(i8* %v2_d7b0, i32 %v3_d7a8)
  %v0_d7b4 = load i32, i32* @r8, align 4
  %v1_d7b4 = add i32 %v0_d7b4, 4
  %v2_d7b4 = inttoptr i32 %v1_d7b4 to i32*
  %v3_d7b4 = load i32, i32* %v2_d7b4, align 4
  %v1_d7bc = inttoptr i32 %v3_d7b4 to i8*
  %v2_d7bc = call i32 @function_ff00(i8* %v1_d7bc)
  store i32 %v2_d7bc, i32* @r1, align 4
  store i32 %v3_d7b4, i32* @r0, align 4
  %v0_d7c8 = call i32 @function_ff94()
  br label %dec_label_pc_d664

dec_label_pc_d7d0:                                ; preds = %dec_label_pc_d664
  %v1_d7d0 = call i32 @function_10900(i32 %v0_d774)
  %v0_d7d4 = load i32, i32* @sb, align 4
  %v1_d7d8 = call i32 @function_109c0(i32 %v0_d7d4)
  %v1_d7e0 = call i32 @function_109c0(i32 1)
  %v1_d7e8 = call i32 @function_109c0(i32 2)
  %v1_d7ec = call i32 @function_85e0(i32 %v1_d7e8)
  %v1_d7f0 = call i32 @function_ced0(i32 %v1_d7ec)
  store i32 %v1_d7f0, i32* @r0, align 4
  %v1_d7f4 = call i32 @function_d4c4(i32 %v1_d7f0)
  store i32 %v1_d7f4, i32* @r0, align 4
  %v1_d7f8 = call i32 @function_e1ac(i32 %v1_d7f4)
  store i32 123732, i32* @sl, align 4
  store i32 ptrtoint (i8** @global_var_1e524.88 to i32), i32* @fp, align 4
  %v2_d80c = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_d80c, i32* @r6, align 4
  %v2_d810 = ptrtoint i32* %stack_var_-392 to i32
  store i32 %v2_d810, i32* @r7, align 4
  %v2_d8f4 = ptrtoint i32* %stack_var_-72 to i32
  %v2_d93c = ptrtoint i32* %stack_var_-144 to i32
  %v2_dbfc = ptrtoint i8** %stack_var_-42 to i32
  %v2_da98 = ptrtoint i32* %stack_var_-1416 to i32
  %v2_db90 = ptrtoint i32* %stack_var_-52 to i32
  %v2_db94 = ptrtoint i32* %stack_var_-56 to i32
  %v1_dc4c = bitcast i32* %stack_var_-136 to i8*
  br label %dec_label_pc_d814

dec_label_pc_d814:                                ; preds = %dec_label_pc_dc10, %dec_label_pc_dc44, %bb44, %dec_label_pc_dab0, %dec_label_pc_d9f4, %dec_label_pc_d9e4, %bb41, %dec_label_pc_dccc, %dec_label_pc_dcb0, %dec_label_pc_dc98, %dec_label_pc_dc20, %dec_label_pc_dbb8, %dec_label_pc_db08, %dec_label_pc_d998, %dec_label_pc_d7d0
  store i32 0, i32* %stack_var_-264, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d820

dec_label_pc_d820:                                ; preds = %dec_label_pc_d820, %dec_label_pc_d814
  %v1_d824 = phi i32 [ %v1_d828, %dec_label_pc_d820 ], [ 4, %dec_label_pc_d814 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_d824 = load i32, i32* @r6, align 4
  %v3_d824 = add i32 %v2_d824, %v1_d824
  %v4_d824 = inttoptr i32 %v3_d824 to i32*
  store i32 0, i32* %v4_d824, align 4
  %v0_d828 = load i32, i32* %r3.global-to-local, align 4
  %v1_d828 = add i32 %v0_d828, 4
  store i32 %v1_d828, i32* %r3.global-to-local, align 4
  %v7_d82c = icmp eq i32 %v1_d828, 128
  br i1 %v7_d82c, label %dec_label_pc_d834, label %dec_label_pc_d820

dec_label_pc_d834:                                ; preds = %dec_label_pc_d820
  %v0_d834 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_d834, i32* %stack_var_-392, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d83c

dec_label_pc_d83c:                                ; preds = %dec_label_pc_d83c, %dec_label_pc_d834
  %v1_d840 = phi i32 [ %v1_d844, %dec_label_pc_d83c ], [ 4, %dec_label_pc_d834 ]
  store i32 0, i32* @r4, align 4
  %v2_d840 = load i32, i32* @r7, align 4
  %v3_d840 = add i32 %v2_d840, %v1_d840
  %v4_d840 = inttoptr i32 %v3_d840 to i32*
  store i32 0, i32* %v4_d840, align 4
  %v0_d844 = load i32, i32* %r3.global-to-local, align 4
  %v1_d844 = add i32 %v0_d844, 4
  store i32 %v1_d844, i32* %r3.global-to-local, align 4
  %v7_d848 = icmp eq i32 %v1_d844, 128
  br i1 %v7_d848, label %dec_label_pc_d850, label %dec_label_pc_d83c

dec_label_pc_d850:                                ; preds = %dec_label_pc_d83c
  store i32 123728, i32* %r3.global-to-local, align 4
  %v2_d854 = load i32, i32* inttoptr (i32 123728 to i32*), align 16
  %v7_d858 = icmp eq i32 %v2_d854, -1
  br i1 %v7_d858, label %dec_label_pc_d888, label %dec_label_pc_d860

dec_label_pc_d860:                                ; preds = %dec_label_pc_d850
  %v3_d860 = udiv i32 %v2_d854, 32
  %v3_d868 = mul nuw nsw i32 %v3_d860, 4
  store i32 %v2_d6ac, i32* %ip.global-to-local, align 4
  %v2_d870 = add i32 %v3_d868, %v2_d6ac
  store i32 %v2_d870, i32* %r3.global-to-local, align 4
  %v1_d874 = add i32 %v2_d870, -224
  %v2_d874 = inttoptr i32 %v1_d874 to i32*
  %v3_d874 = load i32, i32* %v2_d874, align 4
  %v1_d878 = urem i32 %v2_d854, 32
  %v7_d880 = shl i32 1, %v1_d878
  %v8_d880 = or i32 %v3_d874, %v7_d880
  store i32 %v8_d880, i32* %r2.global-to-local, align 4
  store i32 %v8_d880, i32* %v2_d874, align 4
  br label %dec_label_pc_d888

dec_label_pc_d888:                                ; preds = %dec_label_pc_d850, %dec_label_pc_d860
  %v0_d888 = load i32, i32* @sl, align 4
  %v1_d888 = inttoptr i32 %v0_d888 to i32*
  %v2_d888 = load i32, i32* %v1_d888, align 4
  store i32 %v2_d888, i32* @r3, align 4
  %v7_d88c = icmp eq i32 %v2_d888, -1
  store i32 123732, i32* %r8.global-to-local, align 4
  br i1 %v7_d88c, label %dec_label_pc_db14, label %dec_label_pc_d898

dec_label_pc_d898:                                ; preds = %dec_label_pc_db14, %dec_label_pc_d888, %bb43
  %v2_d898 = load i8, i8* bitcast (i8** @global_var_1e524.88 to i8*), align 4
  %v3_d898 = zext i8 %v2_d898 to i32
  store i32 %v3_d898, i32* %r3.global-to-local, align 4
  %v2_d89c = icmp eq i8 %v2_d898, 0
  %v0_d9b4 = load i32, i32* @sl, align 4
  %v1_d9b4 = inttoptr i32 %v0_d9b4 to i32*
  %v2_d9b4 = load i32, i32* %v1_d9b4, align 4
  store i32 %v2_d9b4, i32* %ip.global-to-local, align 4
  %v3_d9bc = udiv i32 %v2_d9b4, 32
  br i1 %v2_d89c, label %dec_label_pc_d9b4, label %dec_label_pc_d8a4

dec_label_pc_d8a4:                                ; preds = %dec_label_pc_d898
  %v3_d8b4 = mul nuw nsw i32 %v3_d9bc, 4
  %v2_d8b8 = add i32 %v3_d8b4, %v2_d6ac
  store i32 %v2_d8b8, i32* %r3.global-to-local, align 4
  %v1_d8bc = add i32 %v2_d8b8, -352
  %v2_d8bc = inttoptr i32 %v1_d8bc to i32*
  %v3_d8bc = load i32, i32* %v2_d8bc, align 4
  %v1_d8c0 = urem i32 %v2_d9b4, 32
  %v7_d8c8 = shl i32 1, %v1_d8c0
  %v8_d8c8 = or i32 %v3_d8bc, %v7_d8c8
  store i32 %v8_d8c8, i32* %r2.global-to-local, align 4
  store i32 %v8_d8c8, i32* %v2_d8bc, align 4
  br label %dec_label_pc_d8d0

dec_label_pc_d8d0:                                ; preds = %dec_label_pc_d9b4, %dec_label_pc_d8a4
  store i32 123728, i32* %r3.global-to-local, align 4
  %v2_d8d4 = load i32, i32* inttoptr (i32 123728 to i32*), align 16
  %v0_d8d8 = load i32, i32* %ip.global-to-local, align 4
  %v5_d8dc = icmp slt i32 %v0_d8d8, %v2_d8d4
  br i1 %v5_d8dc, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_d8d0
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_d8d0, %bb
  %v0_d8f8 = phi i32 [ %v2_d8d4, %dec_label_pc_d8d0 ], [ %v0_d8d8, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-72, align 4
  store i32 %v2_d8f4, i32* %ip.global-to-local, align 4
  %v1_d8f8 = add i32 %v0_d8f8, 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_d810, i32* %r2.global-to-local, align 4
  %v5_d910 = call i32 @function_106e4(i32 %v1_d8f8, i32 %v2_d80c, i32 %v2_d810, i32 0, i32 %v2_d8f4)
  %v8_d914 = icmp eq i32 %v5_d910, -1
  br i1 %v8_d914, label %dec_label_pc_d814, label %dec_label_pc_d91c

dec_label_pc_d91c:                                ; preds = %bb41
  %v6_d910 = trunc i32 %v5_d910 to i16
  %v3_d91c = icmp eq i16 %v6_d910, 0
  br i1 %v3_d91c, label %dec_label_pc_d924, label %dec_label_pc_d950

dec_label_pc_d924:                                ; preds = %dec_label_pc_d91c
  %v2_d928 = load i32, i32* @sb, align 4
  %v5_d92c = srem i32 %v2_d928, 6
  %v4_d934 = sub i32 %v2_d928, %v5_d92c
  store i32 %v4_d934, i32* %r3.global-to-local, align 4
  store i32 %v5_d92c, i32* %r2.global-to-local, align 4
  %v2_d940 = icmp eq i32 %v5_d92c, 0
  %v7_d944 = inttoptr i32 %v5_d910 to i8*
  store i8* %v7_d944, i8** %stack_var_-42, align 4
  %v1_d948 = add i32 %v2_d928, 1
  store i32 %v1_d948, i32* @sb, align 4
  br i1 %v2_d940, label %dec_label_pc_dbf4, label %dec_label_pc_d950

dec_label_pc_d950:                                ; preds = %dec_label_pc_d91c, %dec_label_pc_d924, %dec_label_pc_dbf4
  %v2_d950 = load i8, i8* bitcast (i8** @global_var_1e524.88 to i8*), align 4
  %v3_d950 = zext i8 %v2_d950 to i32
  store i32 %v3_d950, i32* @r4, align 4
  %v2_d954 = icmp eq i8 %v2_d950, 0
  %v0_d9e4 = load i32, i32* @sl, align 4
  %v1_d9e4 = inttoptr i32 %v0_d9e4 to i32*
  %v2_d9e4 = load i32, i32* %v1_d9e4, align 4
  br i1 %v2_d954, label %dec_label_pc_d9e4, label %dec_label_pc_d95c

dec_label_pc_d95c:                                ; preds = %dec_label_pc_d950
  %v3_d964 = udiv i32 %v2_d9e4, 32
  store i32 %v2_d6ac, i32* %r2.global-to-local, align 4
  %v3_d96c = mul nuw nsw i32 %v3_d964, 4
  %v2_d970 = add i32 %v3_d96c, %v2_d6ac
  store i32 %v2_d970, i32* %r3.global-to-local, align 4
  %v1_d974 = add i32 %v2_d970, -352
  %v2_d974 = inttoptr i32 %v1_d974 to i32*
  %v3_d974 = load i32, i32* %v2_d974, align 4
  %v1_d978 = urem i32 %v2_d9e4, 32
  %v6_d97c = lshr i32 %v3_d974, %v1_d978
  store i32 %v6_d97c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e524.88 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_d988 = urem i32 %v6_d97c, 2
  %v2_d988 = icmp eq i32 %v1_d988, 0
  store i8 0, i8* bitcast (i8** @global_var_1e524.88 to i8*), align 4
  store i32 123732, i32* @r4, align 4
  br i1 %v2_d988, label %dec_label_pc_d998, label %dec_label_pc_db80

dec_label_pc_d998:                                ; preds = %dec_label_pc_d95c
  store i32 55712, i32* @lr, align 4
  %v1_d99c = icmp ne i32 %v2_d9e4, -1
  call void @__pseudo_cond_branch(i1 %v1_d99c, i32 ptrtoint (i32* @global_var_109c0.91 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d9a4 = load i32, i32* @r4, align 4
  %v2_d9a4 = inttoptr i32 %v1_d9a4 to i32*
  store i32 -1, i32* %v2_d9a4, align 4
  %v1_d9ac = call i32 @function_12a74(i32 1)
  br label %dec_label_pc_d814

dec_label_pc_d9b4:                                ; preds = %dec_label_pc_d898
  store i32 %v2_d6ac, i32* %r2.global-to-local, align 4
  %v3_d9c4 = mul nuw nsw i32 %v3_d9bc, 4
  %v2_d9c8 = add i32 %v3_d9c4, %v2_d6ac
  store i32 %v2_d9c8, i32* %r3.global-to-local, align 4
  %v1_d9cc = add i32 %v2_d9c8, -224
  %v2_d9cc = inttoptr i32 %v1_d9cc to i32*
  %v3_d9cc = load i32, i32* %v2_d9cc, align 4
  %v1_d9d0 = urem i32 %v2_d9b4, 32
  %v7_d9d8 = shl i32 1, %v1_d9d0
  %v8_d9d8 = or i32 %v3_d9cc, %v7_d9d8
  store i32 %v8_d9d8, i32* %r2.global-to-local, align 4
  store i32 %v8_d9d8, i32* %v2_d9cc, align 4
  br label %dec_label_pc_d8d0

dec_label_pc_d9e4:                                ; preds = %dec_label_pc_d950
  %v7_d9e8 = icmp eq i32 %v2_d9e4, -1
  store i32 123732, i32* @r8, align 4
  br i1 %v7_d9e8, label %dec_label_pc_d814, label %dec_label_pc_d9f4

dec_label_pc_d9f4:                                ; preds = %dec_label_pc_d9e4
  %v3_d9f4 = udiv i32 %v2_d9e4, 32
  store i32 %v2_d6ac, i32* %r2.global-to-local, align 4
  %v3_da00 = mul nuw nsw i32 %v3_d9f4, 4
  %v2_da04 = add i32 %v3_da00, %v2_d6ac
  store i32 %v2_da04, i32* %r3.global-to-local, align 4
  %v1_da08 = add i32 %v2_da04, -224
  %v2_da08 = inttoptr i32 %v1_da08 to i32*
  %v3_da08 = load i32, i32* %v2_da08, align 4
  %v1_da0c = urem i32 %v2_d9e4, 32
  %v6_da10 = lshr i32 %v3_da08, %v1_da0c
  store i32 %v6_da10, i32* %r2.global-to-local, align 4
  %v1_da14 = urem i32 %v6_da10, 2
  %v2_da14 = icmp eq i32 %v1_da14, 0
  br i1 %v2_da14, label %dec_label_pc_d814, label %dec_label_pc_da1c

dec_label_pc_da1c:                                ; preds = %dec_label_pc_d9f4
  store i32 %v2_d93c, i32* %r3.global-to-local, align 4
  %v6_da20 = inttoptr i32 %v3_d950 to i8*
  store i8* %v6_da20, i8** %stack_var_-42, align 4
  %v0_da24 = call i32 @function_10de8()
  %v0_da28 = load i32, i32* @r4, align 4
  %v2_da28 = inttoptr i32 %v0_da24 to i32*
  store i32 %v0_da28, i32* %v2_da28, align 4
  store i32 %v0_da24, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_da3c = load i32, i32* @r8, align 4
  %v1_da3c = inttoptr i32 %v0_da3c to i32*
  %v2_da3c = load i32, i32* %v1_da3c, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_da48 = call i32 @function_11038(i32 %v2_da3c, i32 %v2_dbfc, i32 2, i32 16386)
  %v7_da4c = icmp eq i32 %v4_da48, -1
  br i1 %v7_da4c, label %dec_label_pc_dc10, label %dec_label_pc_da54

dec_label_pc_da54:                                ; preds = %dec_label_pc_da1c
  %v2_da54 = icmp eq i32 %v4_da48, 0
  br i1 %v2_da54, label %dec_label_pc_dc20, label %dec_label_pc_da5c

dec_label_pc_da5c:                                ; preds = %dec_label_pc_da54
  store i32 %v2_d93c, i32* %ip.global-to-local, align 4
  %v3_da60 = load i8*, i8** %stack_var_-42, align 4
  %v4_da60 = ptrtoint i8* %v3_da60 to i32
  store i32 %v4_da60, i32* %r3.global-to-local, align 4
  %v2_da64 = icmp eq i8* %v3_da60, null
  br i1 %v2_da64, label %dec_label_pc_dcb0, label %dec_label_pc_da6c

dec_label_pc_da6c:                                ; preds = %dec_label_pc_da5c
  %v3_da6c = udiv i32 %v4_da60, 256
  %v1_da70 = urem i32 %v4_da60, 256
  store i32 %v1_da70, i32* %r3.global-to-local, align 4
  %v4_da74 = mul nuw nsw i32 %v1_da70, 256
  %v5_da74 = or i32 %v4_da74, %v3_da6c
  %v6_da74 = trunc i32 %v5_da74 to i16
  store i32 %v5_da74, i32* %r2.global-to-local, align 4
  %v7_da80 = inttoptr i32 %v5_da74 to i8*
  store i8* %v7_da80, i8** %stack_var_-42, align 4
  %tmp45 = icmp ugt i16 %v6_da74, 1024
  br i1 %tmp45, label %dec_label_pc_dccc, label %dec_label_pc_da88

dec_label_pc_da88:                                ; preds = %dec_label_pc_da6c
  %v0_da88 = load i32, i32* @r4, align 4
  %v1_da88 = load i32, i32* @r5, align 4
  %v2_da88 = inttoptr i32 %v1_da88 to i32*
  store i32 %v0_da88, i32* %v2_da88, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_da94 = load i32, i32* @r8, align 4
  %v1_da94 = inttoptr i32 %v0_da94 to i32*
  %v2_da94 = load i32, i32* %v1_da94, align 4
  %v7_da9c = call i32 @function_11038(i32 %v2_da94, i32 %v2_da98, i32 %v5_da74, i32 16386)
  %v7_daa0 = icmp eq i32 %v7_da9c, -1
  br i1 %v7_daa0, label %dec_label_pc_dc10, label %dec_label_pc_daa8

dec_label_pc_daa8:                                ; preds = %dec_label_pc_da88
  %v2_daa8 = icmp eq i32 %v7_da9c, 0
  br i1 %v2_daa8, label %dec_label_pc_dc20, label %dec_label_pc_dab0

dec_label_pc_dab0:                                ; preds = %dec_label_pc_daa8
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_dac0 = load i32, i32* @r8, align 4
  %v1_dac0 = inttoptr i32 %v0_dac0 to i32*
  %v2_dac0 = load i32, i32* %v1_dac0, align 4
  %v4_dac4 = call i32 @function_11038(i32 %v2_dac0, i32 %v2_dbfc, i32 2, i32 16384)
  %v3_dacc = load i8*, i8** %stack_var_-42, align 4
  %v4_dacc = ptrtoint i8* %v3_dacc to i32
  %v3_dad0 = udiv i32 %v4_dacc, 256
  %v1_dad4 = urem i32 %v4_dacc, 256
  store i32 %v1_dad4, i32* %r3.global-to-local, align 4
  %v4_dad8 = mul nuw nsw i32 %v1_dad4, 256
  %v5_dad8 = or i32 %v4_dad8, %v3_dad0
  store i32 %v5_dad8, i32* %ip.global-to-local, align 4
  store i32 %v2_d93c, i32* @lr, align 4
  store i32 %v5_dad8, i32* %r2.global-to-local, align 4
  %v0_dae8 = load i32, i32* @r8, align 4
  %v1_dae8 = inttoptr i32 %v0_dae8 to i32*
  %v2_dae8 = load i32, i32* %v1_dae8, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_daf0 = inttoptr i32 %v5_dad8 to i8*
  store i8* %v6_daf0, i8** %stack_var_-42, align 4
  %v6_daf4 = call i32 @function_11038(i32 %v2_dae8, i32 %v2_da98, i32 %v5_dad8, i32 16384)
  store i32 %v2_d93c, i32* %r2.global-to-local, align 4
  %v3_dafc = load i8*, i8** %stack_var_-42, align 4
  %v3_db00 = icmp eq i8* %v3_dafc, null
  br i1 %v3_db00, label %dec_label_pc_d814, label %dec_label_pc_db08

dec_label_pc_db08:                                ; preds = %dec_label_pc_dab0
  %v4_dafc = ptrtoint i8* %v3_dafc to i32
  %v5_db0c = call i32 @function_82e8(i32* nonnull %stack_var_-1416, i32 %v4_dafc, i32 %v2_d93c)
  br label %dec_label_pc_d814

dec_label_pc_db14:                                ; preds = %dec_label_pc_d888
  %v0_db1c = load i32, i32* @r4, align 4
  store i32 %v0_db1c, i32* %r2.global-to-local, align 4
  %v3_db20 = call i32 @function_11168(i32 2, i32 1, i32 %v0_db1c)
  %v7_db24 = icmp eq i32 %v3_db20, -1
  store i32 %v3_db20, i32* @r5, align 4
  %v1_db2c = load i32, i32* %r8.global-to-local, align 4
  %v2_db2c = inttoptr i32 %v1_db2c to i32*
  store i32 %v3_db20, i32* %v2_db2c, align 4
  br i1 %v7_db24, label %dec_label_pc_d898, label %dec_label_pc_db34

dec_label_pc_db34:                                ; preds = %dec_label_pc_db14
  %v0_db34 = load i32, i32* @r4, align 4
  store i32 %v0_db34, i32* %r2.global-to-local, align 4
  %v2_db3c = call i32 @function_107f4(i32 %v3_db20, i32 3)
  %v1_db44 = or i32 %v2_db3c, 2048
  store i32 %v1_db44, i32* %r2.global-to-local, align 4
  %v0_db48 = load i32, i32* @r5, align 4
  %v2_db4c = call i32 @function_107f4(i32 %v0_db48, i32 4)
  %v2_db54 = load i32, i32* inttoptr (i32 123736 to i32*), align 8
  store i32 %v2_db54, i32* %r3.global-to-local, align 4
  %v2_db58 = icmp eq i32 %v2_db54, 0
  br i1 %v2_db58, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_db34
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_db34, %bb42
  %v2_db60 = xor i1 %v2_db58, true
  call void @__pseudo_cond_branch(i1 %v2_db60, i32 %v2_db54)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_db68 = load i32, i32* %r8.global-to-local, align 4
  %v1_db68 = inttoptr i32 %v0_db68 to i32*
  %v2_db68 = load i32, i32* %v1_db68, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v2_db74 = load i32, i32* @fp, align 4
  %v3_db74 = inttoptr i32 %v2_db74 to i8*
  store i8 1, i8* %v3_db74, align 1
  %v4_db78 = call i32 @function_10f84(i32 %v2_db68, i32 ptrtoint (i16** @global_var_205ac.73 to i32), i32 16)
  br label %dec_label_pc_d898

dec_label_pc_db80:                                ; preds = %dec_label_pc_d95c
  store i32 4, i32* @r5, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_db90, i32* %r3.global-to-local, align 4
  store i32 %v2_db94, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_dba8 = call i32 @function_10ff4(i32 %v2_d9e4, i32 1, i32 4, i32 %v2_db90, i32 %v2_db94)
  %v3_dbac = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_dbac, i32* %r3.global-to-local, align 4
  %v2_dbb0 = icmp eq i32 %v3_dbac, 0
  br i1 %v2_dbb0, label %dec_label_pc_dc44, label %dec_label_pc_dbb8

dec_label_pc_dbb8:                                ; preds = %dec_label_pc_db80
  %v0_dbb8 = load i32, i32* @r4, align 4
  %v1_dbb8 = inttoptr i32 %v0_dbb8 to i32*
  %v2_dbb8 = load i32, i32* %v1_dbb8, align 4
  %v1_dbbc = call i32 @function_109c0(i32 %v2_dbb8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dbc4 = load i32, i32* @r4, align 4
  %v2_dbc4 = inttoptr i32 %v1_dbc4 to i32*
  store i32 -1, i32* %v2_dbc4, align 4
  %v0_dbc8 = call i32 @function_dd14()
  %v3_dbd0 = zext i32 %v0_dbc8 to i64
  %v4_dbd0 = mul nuw i64 %v3_dbd0, 3435973837
  %v7_dbd0 = trunc i64 %v4_dbd0 to i32
  store i32 %v7_dbd0, i32* @lr, align 4
  %v3_dbd41 = udiv i64 %v4_dbd0, 34359738368
  %v3_dbd83 = mul nuw nsw i64 %v3_dbd41, 8
  %v3_dbd8 = trunc i64 %v3_dbd83 to i32
  store i32 %v3_dbd8, i32* %r2.global-to-local, align 4
  %v2_dbdc5 = mul nuw nsw i64 %v3_dbd41, 2
  %v2_dbdc = trunc i64 %v2_dbdc5 to i32
  %v2_dbe0 = add i32 %v3_dbd8, %v2_dbdc
  store i32 %v2_dbe0, i32* %r3.global-to-local, align 4
  %v2_dbe4 = sub i32 %v0_dbc8, %v2_dbe0
  %v1_dbe8 = add i32 %v2_dbe4, 1
  %v1_dbec = call i32 @function_12a74(i32 %v1_dbe8)
  br label %dec_label_pc_d814

dec_label_pc_dbf4:                                ; preds = %dec_label_pc_d924
  %v0_dbf8 = load i32, i32* @sl, align 4
  %v1_dbf8 = inttoptr i32 %v0_dbf8 to i32*
  %v2_dbf8 = load i32, i32* %v1_dbf8, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_dc08 = call i32 @function_110ac(i32 %v2_dbf8, i32 %v2_dbfc, i32 2, i32 16384)
  br label %dec_label_pc_d950

dec_label_pc_dc10:                                ; preds = %dec_label_pc_da88, %dec_label_pc_da1c
  %v0_dc10 = load i32, i32* @r5, align 4
  %v1_dc10 = inttoptr i32 %v0_dc10 to i32*
  %v2_dc10 = load i32, i32* %v1_dc10, align 4
  store i32 %v2_dc10, i32* %r3.global-to-local, align 4
  %v7_dc14 = icmp eq i32 %v2_dc10, 4
  br i1 %v7_dc14, label %dec_label_pc_d814, label %bb44

bb44:                                             ; preds = %dec_label_pc_dc10
  %v8_dc18 = icmp eq i32 %v2_dc10, 11
  br i1 %v8_dc18, label %dec_label_pc_d814, label %dec_label_pc_dc20

dec_label_pc_dc20:                                ; preds = %bb44, %dec_label_pc_daa8, %dec_label_pc_da54
  %v0_dc20 = load i32, i32* @sl, align 4
  %v1_dc20 = inttoptr i32 %v0_dc20 to i32*
  %v2_dc20 = load i32, i32* %v1_dc20, align 4
  store i32 56364, i32* @lr, align 4
  %v1_dc28 = icmp ne i32 %v2_dc20, -1
  call void @__pseudo_cond_branch(i1 %v1_dc28, i32 ptrtoint (i32* @global_var_109c0.91 to i32))
  store i32 123732, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 123732 to i32*), align 4
  %v1_dc3c = call i32 @function_12a74(i32 1)
  br label %dec_label_pc_d814

dec_label_pc_dc44:                                ; preds = %dec_label_pc_db80
  %v2_dc4c = call i32 @function_ff00(i8* %v1_dc4c)
  %sext = mul i32 %v2_dc4c, 16777216
  %v1_dc50 = sdiv i32 %sext, 16777216
  %v7_dc50 = inttoptr i32 %v1_dc50 to i8*
  store i8* %v7_dc50, i8** %stack_var_-42, align 4
  %v0_dc54 = call i32 @function_101bc()
  %v0_dc5c = load i32, i32* @r5, align 4
  store i32 %v0_dc5c, i32* %r2.global-to-local, align 4
  store i32 %v0_dc54, i32* @global_var_205a0.46, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_dc6c = load i32, i32* @r4, align 4
  %v1_dc6c = inttoptr i32 %v0_dc6c to i32*
  %v2_dc6c = load i32, i32* %v1_dc6c, align 4
  %v4_dc70 = call i32 @function_110ac(i32 %v2_dc6c, i32 ptrtoint (i32* @global_var_15d04.94 to i32), i32 %v0_dc5c, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_dc7c = load i32, i32* @r4, align 4
  %v1_dc7c = inttoptr i32 %v0_dc7c to i32*
  %v2_dc7c = load i32, i32* %v1_dc7c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_dc88 = call i32 @function_110ac(i32 %v2_dc7c, i32 %v2_dbfc, i32 1, i32 16384)
  %v3_dc8c = load i8*, i8** %stack_var_-42, align 4
  %v4_dc8c = ptrtoint i8* %v3_dc8c to i32
  store i32 %v4_dc8c, i32* %r2.global-to-local, align 4
  %v3_dc90 = icmp eq i8* %v3_dc8c, null
  br i1 %v3_dc90, label %dec_label_pc_d814, label %dec_label_pc_dc98

dec_label_pc_dc98:                                ; preds = %dec_label_pc_dc44
  %v0_dc9c = load i32, i32* @r4, align 4
  %v1_dc9c = inttoptr i32 %v0_dc9c to i32*
  %v2_dc9c = load i32, i32* %v1_dc9c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_dca8 = call i32 @function_110ac(i32 %v2_dc9c, i32 %v2_d650, i32 %v4_dc8c, i32 16384)
  br label %dec_label_pc_d814

dec_label_pc_dcb0:                                ; preds = %dec_label_pc_da5c
  %v0_dcb4 = load i32, i32* @r8, align 4
  %v1_dcb4 = inttoptr i32 %v0_dcb4 to i32*
  %v2_dcb4 = load i32, i32* %v1_dcb4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_dcc0 = add i32 %v4_da60, 16384
  store i32 %v1_dcc0, i32* %r3.global-to-local, align 4
  %v4_dcc4 = call i32 @function_11038(i32 %v2_dcb4, i32 %v2_dbfc, i32 2, i32 %v1_dcc0)
  br label %dec_label_pc_d814

dec_label_pc_dccc:                                ; preds = %dec_label_pc_da6c
  %v0_dccc = load i32, i32* @r8, align 4
  %v1_dccc = inttoptr i32 %v0_dccc to i32*
  %v2_dccc = load i32, i32* %v1_dccc, align 4
  %v1_dcd0 = call i32 @function_109c0(i32 %v2_dccc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dcd8 = load i32, i32* @r8, align 4
  %v2_dcd8 = inttoptr i32 %v1_dcd8 to i32*
  store i32 -1, i32* %v2_dcd8, align 4
  br label %dec_label_pc_d814

; uselistorder directives
  uselistorder i32 %v3_db20, { 1, 3, 2, 0 }
  uselistorder i8* %v3_dafc, { 1, 0 }
  uselistorder i32 %v5_dad8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_dacc, { 1, 0 }
  uselistorder i32 %v7_da9c, { 1, 0 }
  uselistorder i32 %v5_da74, { 1, 0, 3, 2 }
  uselistorder i32 %v4_da60, { 2, 1, 0, 3 }
  uselistorder i32 %v4_da48, { 1, 0 }
  uselistorder i32 %v2_d9e4, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_d92c, { 1, 0, 2 }
  uselistorder i32 %v2_d928, { 2, 0, 1 }
  uselistorder i32 %v5_d910, { 1, 2, 0 }
  uselistorder i32 %v2_d854, { 2, 1, 0 }
  uselistorder i32 %v1_d844, { 1, 2, 0 }
  uselistorder i32 %v1_d828, { 1, 2, 0 }
  uselistorder i32 %v2_dbfc, { 2, 0, 4, 3, 1 }
  uselistorder i32 %v2_d93c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v2_d810, { 1, 0, 2 }
  uselistorder i32 %v2_d6ac, { 0, 10, 1, 11, 2, 9, 3, 4, 8, 7, 5, 12, 6 }
  uselistorder i32 %v2_d694, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_d5c0, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-136, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 6, 3, 4, 7, 8 }
  uselistorder i8* null, { 2, 0, 1 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @function_12a74, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e524.88 to i8*), { 0, 2, 1 }
  uselistorder i32 123728, { 1, 0, 2 }
  uselistorder i8** @global_var_1e524.88, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e524.88 to i32), { 1, 0 }
  uselistorder i32 (i32)* @function_d4c4, { 1, 0 }
  uselistorder i32 (i32)* @function_ced0, { 1, 0 }
  uselistorder i32 (i32)* @function_85e0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_ddd8, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_205ac.73 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @function_11214, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_d950, { 2, 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_d898, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d888, { 1, 0 }
  uselistorder label %dec_label_pc_d814, { 7, 8, 9, 1, 10, 2, 0, 11, 12, 3, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_d664, { 2, 0, 1 }
}

define i32 @function_dd04(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_dd04:
  %cpsr_c.global-to-local = alloca i1, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v0_dd04 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_dd04, label %bb, label %dec_label_pc_dd04._crit_edge

dec_label_pc_dd04._crit_edge:                     ; preds = %dec_label_pc_dd04
  %v0_dd08.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb2

bb:                                               ; preds = %dec_label_pc_dd04
  %v4_dd04 = add i32 %arg3, -1
  %v5_dd04 = shl i32 1, %v4_dd04
  %v6_dd04 = and i32 %v5_dd04, %arg1
  %v7_dd04 = icmp ne i32 %v6_dd04, 0
  store i1 %v7_dd04, i1* %cpsr_c.global-to-local, align 1
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_dd04._crit_edge, %bb
  %v0_dd08 = phi i1 [ %v0_dd08.pre, %dec_label_pc_dd04._crit_edge ], [ %v7_dd04, %bb ]
  call void @__pseudo_cond_branch(i1 %v0_dd08, i32 -22313028)
  %v0_dd10 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_dd10, label %bb3, label %bb4

bb3:                                              ; preds = %bb2
  %v2_dd10 = load i32, i32* @r4, align 4
  %v3_dd10 = and i32 %v2_dd10, 64
  %v4_dd10 = icmp ne i32 %v3_dd10, 0
  store i1 %v4_dd10, i1* %cpsr_c.global-to-local, align 1
  br label %bb4

bb4:                                              ; preds = %bb2, %bb3
  ret i32 %arg1

; uselistorder directives
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_dd14() local_unnamed_addr {
dec_label_pc_dd14:
  %v2_dd20 = load i32, i32* @global_var_1e528.96, align 4
  %v2_dd24 = load i32, i32* @global_var_1e534.98, align 4
  %v4_dd30 = mul i32 %v2_dd20, 2048
  %v5_dd30 = xor i32 %v4_dd30, %v2_dd20
  store i32 %v5_dd30, i32* @r3, align 4
  %v4_dd34 = udiv i32 %v2_dd24, 524288
  %v5_dd34 = xor i32 %v4_dd34, %v2_dd24
  %v2_dd38 = load i32, i32* @global_var_1e52c.100, align 4
  %v2_dd3c = load i32, i32* @global_var_1e530.102, align 4
  %v2_dd40 = xor i32 %v5_dd34, %v5_dd30
  %v4_dd44 = udiv i32 %v5_dd30, 256
  %v5_dd44 = xor i32 %v2_dd40, %v4_dd44
  store i32 %v2_dd38, i32* @global_var_1e528.96, align 4
  store i32 %v2_dd3c, i32* @global_var_1e52c.100, align 4
  store i32 %v2_dd24, i32* @global_var_1e530.102, align 4
  store i32 %v5_dd44, i32* @global_var_1e534.98, align 4
  ret i32 %v5_dd44

; uselistorder directives
  uselistorder i32 %v2_dd24, { 2, 1, 0 }
  uselistorder i32 %v2_dd20, { 1, 0 }
}

define i32 @function_dd70(i32 %arg1) local_unnamed_addr {
dec_label_pc_dd70:
  %v2_dd7c = call i32 @function_10640(i32* null)
  store i32 %v2_dd7c, i32* @r0, align 4
  store i32 %v2_dd7c, i32* @global_var_1e528.96, align 4
  %v0_dd88 = call i32 @function_1062c()
  store i32 %v0_dd88, i32* @r0, align 4
  %v0_dd90 = call i32 @function_10584()
  %v2_dd98 = xor i32 %v0_dd88, %v0_dd90
  store i32 %v2_dd98, i32* @global_var_1e52c.100, align 4
  %v1_dda0 = call i32 @function_10e04(i32 %v2_dd98)
  %v2_dda4 = load i32, i32* @global_var_1e52c.100, align 4
  %v2_ddb0 = xor i32 %v2_dda4, %v1_dda0
  store i32 %v2_ddb0, i32* @global_var_1e534.98, align 4
  store i32 %v1_dda0, i32* @global_var_1e530.102, align 4
  ret i32 %v1_dda0

; uselistorder directives
  uselistorder i32 %v1_dda0, { 1, 2, 0 }
  uselistorder i32 ()* @function_10584, { 2, 1, 0 }
}

define i32 @function_ddd8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ddd8:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_ddd8 = load i32, i32* @r4, align 4
  %v6_ddd8 = load i32, i32* @r5, align 4
  %v9_ddd8 = load i32, i32* @r6, align 4
  %v12_ddd8 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_ddec = call i32 @function_f9c0(i32 28)
  %v3_ddf8 = call i32 @function_f8fc(i32 28, i32* null)
  store i32 %v3_ddf8, i32* @r1, align 4
  %v2_de04 = bitcast i32* %stack_var_-72 to i8*
  %v3_de04 = call i32 @function_10f00(i8* %v2_de04, i32 %v3_ddf8)
  %v2_de08 = icmp eq i32 %arg2, 0
  br i1 %v2_de08, label %dec_label_pc_de84, label %dec_label_pc_de10

dec_label_pc_de10:                                ; preds = %dec_label_pc_ddd8
  store i32 ptrtoint (i32* @global_var_1e528.96 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e52c.100 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e530.102 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1e534.98 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_de68 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_de24

dec_label_pc_de24:                                ; preds = %dec_label_pc_de24.dec_label_pc_de24_crit_edge, %dec_label_pc_de10
  %v1_de48 = phi i32 [ %v1_de48.pre, %dec_label_pc_de24.dec_label_pc_de24_crit_edge ], [ ptrtoint (i32* @global_var_1e528.96 to i32), %dec_label_pc_de10 ]
  %v2_de24 = load i32, i32* @global_var_1e534.98, align 4
  store i32 %v2_de24, i32* %r2.global-to-local, align 4
  %v2_de28 = load i32, i32* @global_var_1e528.96, align 4
  %v4_de2c = udiv i32 %v2_de24, 524288
  %v5_de2c = xor i32 %v4_de2c, %v2_de24
  %v4_de30 = mul i32 %v2_de28, 2048
  %v5_de30 = xor i32 %v4_de30, %v2_de28
  %v2_de34 = xor i32 %v5_de2c, %v5_de30
  %v2_de38 = load i32, i32* @global_var_1e52c.100, align 4
  %v2_de3c = load i32, i32* @global_var_1e530.102, align 4
  store i32 %v2_de3c, i32* %ip.global-to-local, align 4
  %v4_de40 = udiv i32 %v5_de30, 256
  %v5_de40 = xor i32 %v2_de34, %v4_de40
  store i32 %v5_de40, i32* @r4, align 4
  %v2_de48 = inttoptr i32 %v1_de48 to i32*
  store i32 %v2_de38, i32* %v2_de48, align 4
  %v0_de4c = load i32, i32* %ip.global-to-local, align 4
  %v1_de4c = load i32, i32* %r8.global-to-local, align 4
  %v2_de4c = inttoptr i32 %v1_de4c to i32*
  store i32 %v0_de4c, i32* %v2_de4c, align 4
  %v0_de50 = load i32, i32* %r2.global-to-local, align 4
  %v1_de50 = load i32, i32* @r7, align 4
  %v2_de50 = inttoptr i32 %v1_de50 to i32*
  store i32 %v0_de50, i32* %v2_de50, align 4
  %v0_de54 = load i32, i32* @r4, align 4
  %v1_de54 = load i32, i32* @r6, align 4
  %v2_de54 = inttoptr i32 %v1_de54 to i32*
  store i32 %v0_de54, i32* %v2_de54, align 4
  %v2_de58 = call i32 @function_ff00(i8* %v2_de04)
  %v0_de60 = load i32, i32* @r4, align 4
  %v2_de64 = call i32 @function_10558(i32 %v0_de60, i32 %v2_de58)
  %v2_de6c = add i32 %v2_de58, %v2_de68
  %v1_de70 = add i32 %v2_de6c, -32
  %v2_de70 = inttoptr i32 %v1_de70 to i8*
  %v3_de70 = load i8, i8* %v2_de70, align 1
  %v2_de74 = load i32, i32* @r5, align 4
  %v3_de74 = load i32, i32* %fp.global-to-local, align 4
  %v4_de74 = add i32 %v3_de74, %v2_de74
  %v5_de74 = inttoptr i32 %v4_de74 to i8*
  store i8 %v3_de70, i8* %v5_de74, align 1
  %v0_de78 = load i32, i32* @r5, align 4
  %v1_de78 = add i32 %v0_de78, 1
  store i32 %v1_de78, i32* @r5, align 4
  %v1_de7c = load i32, i32* %sb.global-to-local, align 4
  %v9_de7c = icmp eq i32 %v1_de78, %v1_de7c
  br i1 %v9_de7c, label %dec_label_pc_de84, label %dec_label_pc_de24.dec_label_pc_de24_crit_edge

dec_label_pc_de24.dec_label_pc_de24_crit_edge:    ; preds = %dec_label_pc_de24
  %v1_de48.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_de24

dec_label_pc_de84:                                ; preds = %dec_label_pc_de24, %dec_label_pc_ddd8
  %v1_de88 = call i32 @function_f920(i32 28)
  store i32 %v3_ddd8, i32* @r4, align 4
  store i32 %v6_ddd8, i32* @r5, align 4
  store i32 %v9_ddd8, i32* @r6, align 4
  store i32 %v12_ddd8, i32* @r7, align 4
  ret i32 %v1_de88

; uselistorder directives
  uselistorder i32 %v2_de28, { 1, 0 }
  uselistorder i32 %v2_de24, { 1, 0, 2 }
}

define i32 @function_dea8(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_dea8:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_dea8 = load i32, i32* %r1.global-to-local, align 4
  %v3_deac = load i32, i32* @r4, align 4
  store i32 %v3_deac, i32* %stack_var_-28, align 4
  %v0_deb0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_deb0, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_dea8, 1
  br i1 %tmp16, label %dec_label_pc_df58, label %dec_label_pc_deb8

dec_label_pc_deb8:                                ; preds = %dec_label_pc_dea8
  store i32 ptrtoint (i32* @global_var_1e534.98 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e530.102 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e52c.100 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e528.96 to i32), i32* %r6.global-to-local, align 4
  %v2_dec8 = load i32, i32* @global_var_1e534.98, align 4
  store i32 %v2_dec8, i32* %lr.global-to-local, align 4
  %v2_decc = load i32, i32* @global_var_1e530.102, align 4
  store i32 %v2_decc, i32* %r4.global-to-local, align 4
  %v2_ded0 = load i32, i32* @global_var_1e52c.100, align 4
  store i32 %v2_ded0, i32* %r0.global-to-local, align 4
  %v2_ded4 = load i32, i32* @global_var_1e528.96, align 4
  br label %dec_label_pc_def8

dec_label_pc_dedc:                                ; preds = %dec_label_pc_df18
  %v1_dedc = trunc i32 %v5_df08 to i16
  %v3_dedc = inttoptr i32 %v9_df0c to i16*
  store i16 %v1_dedc, i16* %v3_dedc, align 2
  %v4_dedc = load i32, i32* %r5.global-to-local, align 4
  %v5_dedc = add i32 %v4_dedc, -2
  store i32 %v5_dedc, i32* %r5.global-to-local, align 4
  %v0_dee0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_dee0

dec_label_pc_dee0:                                ; preds = %.thread, %dec_label_pc_dedc
  %v0_dee0 = phi i32 [ %v9_df10, %.thread ], [ %v0_dee0.pre, %dec_label_pc_dedc ]
  %v2_dedc5 = phi i32 [ %v12_df0c, %.thread ], [ %v5_dedc, %dec_label_pc_dedc ]
  %tmp17 = icmp slt i32 %v0_dee0, 1
  br i1 %tmp17, label %dec_label_pc_df60, label %dec_label_pc_deec

dec_label_pc_deec:                                ; preds = %dec_label_pc_dee0
  %v0_dee4 = load i32, i32* %r0.global-to-local, align 4
  %v0_deec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_deec, i32* %r0.global-to-local, align 4
  %v0_def0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_def0, i32* %r4.global-to-local, align 4
  %v0_def4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_def4, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_def8

dec_label_pc_def8:                                ; preds = %dec_label_pc_deb8, %dec_label_pc_deec
  %v0_df44 = phi i32 [ %v2_ded0, %dec_label_pc_deb8 ], [ %v0_deec, %dec_label_pc_deec ]
  %v9_df0c = phi i32 [ %v0_deb0, %dec_label_pc_deb8 ], [ %v2_dedc5, %dec_label_pc_deec ]
  %v0_df24 = phi i32 [ %v0_dea8, %dec_label_pc_deb8 ], [ %v0_dee0, %dec_label_pc_deec ]
  %v0_df38 = phi i32 [ %v2_dec8, %dec_label_pc_deb8 ], [ %v0_def4, %dec_label_pc_deec ]
  %v0_df34 = phi i32 [ %v2_ded4, %dec_label_pc_deb8 ], [ %v0_dee4, %dec_label_pc_deec ]
  %v4_def8 = mul i32 %v0_df34, 2048
  %v5_def8 = xor i32 %v4_def8, %v0_df34
  %v4_defc = udiv i32 %v0_df38, 524288
  %v5_defc = xor i32 %v4_defc, %v0_df38
  %v2_df00 = xor i32 %v5_defc, %v5_def8
  %v4_df08 = udiv i32 %v5_def8, 256
  %v5_df08 = xor i32 %v2_df00, %v4_df08
  store i32 %v5_df08, i32* %r3.global-to-local, align 4
  %v7_df0c = icmp sgt i32 %v0_df24, 3
  br i1 %v7_df0c, label %.thread, label %dec_label_pc_df18

.thread:                                          ; preds = %dec_label_pc_def8
  %v10_df0c = inttoptr i32 %v9_df0c to i32*
  store i32 %v5_df08, i32* %v10_df0c, align 4
  %v11_df0c = load i32, i32* %r5.global-to-local, align 4
  %v12_df0c = add i32 %v11_df0c, 4
  store i32 %v12_df0c, i32* %r5.global-to-local, align 4
  %v8_df10 = load i32, i32* %r1.global-to-local, align 4
  %v9_df10 = add i32 %v8_df10, -4
  store i32 %v9_df10, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_dee0

dec_label_pc_df18:                                ; preds = %dec_label_pc_def8
  %v7_df24 = icmp eq i32 %v0_df24, 1
  store i32 %v5_df08, i32* %r3.global-to-local, align 4
  %v1_df2c = add i32 %v0_df24, -2
  store i32 %v1_df2c, i32* %r1.global-to-local, align 4
  br i1 %v7_df24, label %dec_label_pc_df34, label %dec_label_pc_dedc

dec_label_pc_df34:                                ; preds = %dec_label_pc_df18
  store i32 %v5_df08, i32* %r3.global-to-local, align 4
  %v1_df44 = load i32, i32* %r6.global-to-local, align 4
  %v2_df44 = inttoptr i32 %v1_df44 to i32*
  store i32 %v0_df44, i32* %v2_df44, align 4
  %v0_df48 = load i32, i32* %r4.global-to-local, align 4
  %v1_df48 = load i32, i32* %r7.global-to-local, align 4
  %v2_df48 = inttoptr i32 %v1_df48 to i32*
  store i32 %v0_df48, i32* %v2_df48, align 4
  %v0_df4c = load i32, i32* %lr.global-to-local, align 4
  %v1_df4c = load i32, i32* %r8.global-to-local, align 4
  %v2_df4c = inttoptr i32 %v1_df4c to i32*
  store i32 %v0_df4c, i32* %v2_df4c, align 4
  %v0_df50 = load i32, i32* %r3.global-to-local, align 4
  %v1_df50 = load i32, i32* %sl.global-to-local, align 4
  %v2_df50 = inttoptr i32 %v1_df50 to i32*
  store i32 %v0_df50, i32* %v2_df50, align 4
  %v0_df54 = load i32, i32* %r3.global-to-local, align 4
  %v1_df54 = trunc i32 %v0_df54 to i8
  %v2_df54 = load i32, i32* %r5.global-to-local, align 4
  %v3_df54 = inttoptr i32 %v2_df54 to i8*
  store i8 %v1_df54, i8* %v3_df54, align 1
  br label %dec_label_pc_df58

dec_label_pc_df58:                                ; preds = %dec_label_pc_dea8, %dec_label_pc_df60, %dec_label_pc_df34
  %v2_df58 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_df58, i32* @r4, align 4
  %v1_df5c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_df5c

dec_label_pc_df60:                                ; preds = %dec_label_pc_dee0
  %v0_df60 = load i32, i32* %r3.global-to-local, align 4
  %v1_df60 = load i32, i32* %sl.global-to-local, align 4
  %v2_df60 = inttoptr i32 %v1_df60 to i32*
  store i32 %v0_df60, i32* %v2_df60, align 4
  %v0_df64 = load i32, i32* %lr.global-to-local, align 4
  %v1_df64 = load i32, i32* %r8.global-to-local, align 4
  %v2_df64 = inttoptr i32 %v1_df64 to i32*
  store i32 %v0_df64, i32* %v2_df64, align 4
  %v0_df68 = load i32, i32* %r4.global-to-local, align 4
  %v1_df68 = load i32, i32* %r7.global-to-local, align 4
  %v2_df68 = inttoptr i32 %v1_df68 to i32*
  store i32 %v0_df68, i32* %v2_df68, align 4
  %v0_df6c = load i32, i32* %r0.global-to-local, align 4
  %v1_df6c = load i32, i32* %r6.global-to-local, align 4
  %v2_df6c = inttoptr i32 %v1_df6c to i32*
  store i32 %v0_df6c, i32* %v2_df6c, align 4
  br label %dec_label_pc_df58

; uselistorder directives
  uselistorder i32 %v9_df10, { 1, 0 }
  uselistorder i32 %v12_df0c, { 1, 0 }
  uselistorder i32 %v5_df08, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_df34, { 1, 0 }
  uselistorder i32 %v0_df38, { 1, 0 }
  uselistorder i32 %v0_df24, { 1, 0, 2 }
  uselistorder i32 %v0_dee0, { 1, 0 }
  uselistorder i32 %v0_dea8, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1e528.96, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1e528.96 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1e52c.100, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1e530.102, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1e534.98, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_df58, { 1, 2, 0 }
  uselistorder label %dec_label_pc_def8, { 1, 0 }
}

define i32 @function_df84() local_unnamed_addr {
dec_label_pc_df84:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_df84 = load i32, i32* @r4, align 4
  store i32 %v3_df84, i32* %stack_var_-16, align 4
  %v12_df84 = load i32, i32* @lr, align 4
  %v0_df88 = load i32, i32* @r0, align 4
  store i32 %v0_df88, i32* %r5.global-to-local, align 4
  %v1_df8c = add i32 %v0_df88, 4
  %v2_df8c = inttoptr i32 %v1_df8c to i32*
  %v3_df8c = load i32, i32* %v2_df8c, align 4
  store i32 %v3_df8c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 57264, i32* @lr, align 4
  %v1_dfac = icmp ne i32 %v3_df8c, -1
  call void @__pseudo_cond_branch(i1 %v1_dfac, i32 ptrtoint (i32* @global_var_109c0.91 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_dfbc = call i32 @function_11168(i32 2, i32 1, i32 0)
  store i32 %v3_dfbc, i32* %r0.global-to-local, align 4
  %v7_dfc0 = icmp eq i32 %v3_dfbc, -1
  %v1_dfc4 = load i32, i32* %r5.global-to-local, align 4
  %v2_dfc4 = add i32 %v1_dfc4, 4
  %v3_dfc4 = inttoptr i32 %v2_dfc4 to i32*
  store i32 %v3_dfbc, i32* %v3_dfc4, align 4
  br i1 %v7_dfc0, label %dec_label_pc_df84.dec_label_pc_e03c_crit_edge, label %dec_label_pc_dfcc

dec_label_pc_df84.dec_label_pc_e03c_crit_edge:    ; preds = %dec_label_pc_df84
  %v1_e044.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e03c

dec_label_pc_dfcc:                                ; preds = %dec_label_pc_df84
  %v2_df90 = ptrtoint i32* %stack_var_-32 to i32
  %v0_dfcc = load i32, i32* %r5.global-to-local, align 4
  %v1_dfcc = add i32 %v0_dfcc, 28
  store i32 %v1_dfcc, i32* @r0, align 4
  %v0_dfd0 = load i32, i32* %r6.global-to-local, align 4
  %v2_dfd0 = add i32 %v0_dfcc, 24
  %v3_dfd0 = inttoptr i32 %v2_dfd0 to i32*
  store i32 %v0_dfd0, i32* %v3_dfd0, align 4
  store i32 256, i32* @r1, align 4
  %v0_dfd8 = call i32 @function_ff94()
  store i32 %v0_dfd8, i32* %r0.global-to-local, align 4
  %v0_dfdc = load i32, i32* %r5.global-to-local, align 4
  %v1_dfdc = add i32 %v0_dfdc, 4
  %v2_dfdc = inttoptr i32 %v1_dfdc to i32*
  %v3_dfdc = load i32, i32* %v2_dfdc, align 4
  store i32 %v3_dfdc, i32* %r4.global-to-local, align 4
  %v0_dfe0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_dfe0, i32* %r2.global-to-local, align 4
  store i32 %v3_dfdc, i32* %r0.global-to-local, align 4
  %v2_dfec = call i32 @function_107f4(i32 %v3_dfdc, i32 3)
  %v1_dff4 = or i32 %v2_dfec, 2048
  store i32 %v1_dff4, i32* %r2.global-to-local, align 4
  %v0_dff8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_dff8, i32* %r0.global-to-local, align 4
  %v2_dffc = call i32 @function_107f4(i32 %v0_dff8, i32 4)
  store i32 %v2_dffc, i32* %r0.global-to-local, align 4
  %v2_e004 = load i32, i32* @global_var_1e56c.116, align 4
  store i32 %v2_e004, i32* %r2.global-to-local, align 4
  %v1_e00c = load i32, i32* %r5.global-to-local, align 4
  %v2_e00c = add i32 %v1_e00c, 12
  %v3_e00c = inttoptr i32 %v2_e00c to i32*
  store i32 1, i32* %v3_e00c, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e018 = load i32, i32* %r2.global-to-local, align 4
  %v1_e018 = load i32, i32* %r5.global-to-local, align 4
  %v2_e018 = add i32 %v1_e018, 8
  %v3_e018 = inttoptr i32 %v2_e018 to i32*
  store i32 %v0_e018, i32* %v3_e018, align 4
  %v0_e01c = load i32, i32* %r5.global-to-local, align 4
  %v1_e01c = add i32 %v0_e01c, 16
  %v2_e01c = inttoptr i32 %v1_e01c to i32*
  %v3_e01c = load i32, i32* %v2_e01c, align 4
  store i32 %v3_e01c, i32* @ip, align 4
  %v1_e020 = add i32 %v0_e01c, 4
  %v2_e020 = inttoptr i32 %v1_e020 to i32*
  %v3_e020 = load i32, i32* %v2_e020, align 4
  store i32 %v3_e020, i32* %r0.global-to-local, align 4
  %v1_e024 = add i32 %v0_e01c, 20
  %v2_e024 = inttoptr i32 %v1_e024 to i16*
  %v3_e024 = load i16, i16* %v2_e024, align 2
  %v4_e024 = zext i16 %v3_e024 to i32
  store i32 %v4_e024, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e038 = call i32 @function_10f84(i32 %v3_e020, i32 %v2_df90, i32 16)
  store i32 %v3_e038, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e03c

dec_label_pc_e03c:                                ; preds = %dec_label_pc_df84.dec_label_pc_e03c_crit_edge, %dec_label_pc_dfcc
  %v1_e044 = phi i32 [ %v1_e044.pre, %dec_label_pc_df84.dec_label_pc_e03c_crit_edge ], [ %v3_e038, %dec_label_pc_dfcc ]
  %v2_e040 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e040, i32* @r4, align 4
  store i32 %v12_df84, i32* @lr, align 4
  ret i32 %v1_e044

; uselistorder directives
  uselistorder i32 %v3_dfbc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_ff94, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e03c, { 1, 0 }
}

define i32 @function_e04c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e04c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e04c = load i32, i32* @r4, align 4
  %v6_e04c = load i32, i32* @r5, align 4
  %v9_e04c = load i32, i32* @r6, align 4
  %v12_e04c = load i32, i32* @r7, align 4
  %v15_e04c = load i32, i32* @r8, align 4
  %v18_e04c = load i32, i32* @sb, align 4
  %v21_e04c = load i32, i32* @sl, align 4
  %v24_e04c = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1e538.118 to i32), i32* @fp, align 4
  %v2_e054 = load i32, i32* @global_var_1e538.118, align 4
  store i32 ptrtoint (i32* @global_var_1e564.120 to i32), i32* @sl, align 4
  %v1_e060 = add i32 %v2_e054, 1
  store i32 %v1_e060, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e06c = load i32, i32* @global_var_1e564.120, align 4
  store i32 %v2_e06c, i32* %r0.global-to-local, align 4
  %v3_e070 = mul i32 %v1_e060, 16
  store i32 %v3_e070, i32* %r1.global-to-local, align 4
  %v4_e078 = inttoptr i32 %v2_e06c to i32*
  %v5_e078 = call i32 @function_11e04(i32* %v4_e078, i32 %v3_e070, i32 %arg3, i32 %v1_e060)
  %v2_e07c = load i32, i32* @global_var_1e538.118, align 4
  store i32 %v2_e07c, i32* %r2.global-to-local, align 4
  store i32 %v5_e078, i32* @r8, align 4
  %v0_e084 = load i32, i32* @r5, align 4
  store i32 %v0_e084, i32* %r0.global-to-local, align 4
  %v1_e08c = load i32, i32* @sl, align 4
  %v2_e08c = inttoptr i32 %v1_e08c to i32*
  store i32 %v5_e078, i32* %v2_e08c, align 4
  %v1_e090 = inttoptr i32 %v0_e084 to i8*
  %v2_e090 = call i32 @function_ff00(i8* %v1_e090)
  %sext = mul i32 %v2_e090, 16777216
  %v1_e094 = sdiv i32 %sext, 16777216
  %v2_e094 = add nsw i32 %v1_e094, 1
  store i32 %v2_e094, i32* @r4, align 4
  store i32 %v1_e094, i32* @r7, align 4
  store i32 %v2_e094, i32* @r0, align 4
  %v0_e0a0 = call i32 @function_113b0()
  store i32 %v0_e0a0, i32* %r0.global-to-local, align 4
  %v0_e0a4 = load i32, i32* @r5, align 4
  store i32 %v0_e0a4, i32* %r1.global-to-local, align 4
  %v0_e0a8 = load i32, i32* @r4, align 4
  store i32 %v0_e0a8, i32* %r2.global-to-local, align 4
  store i32 %v0_e0a0, i32* %r6.global-to-local, align 4
  %v3_e0b0 = call i32 @function_ff70(i32 %v0_e0a0, i32 %v0_e0a4, i32 %v0_e0a8)
  store i32 %v3_e0b0, i32* %r0.global-to-local, align 4
  %v0_e0b4 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e0b4, 1
  %extract.t6 = trunc i32 %v0_e0b4 to i8
  br i1 %tmp22, label %dec_label_pc_e0d8, label %dec_label_pc_e0bc

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_e04c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e0c0

dec_label_pc_e0c0:                                ; preds = %dec_label_pc_e0c0, %dec_label_pc_e0bc
  %v2_e0c8 = phi i32 [ %v1_e0cc, %dec_label_pc_e0c0 ], [ 0, %dec_label_pc_e0bc ]
  %v1_e0c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_e0c0 = add i32 %v1_e0c0, %v2_e0c8
  %v3_e0c0 = inttoptr i32 %v2_e0c0 to i8*
  %v4_e0c0 = load i8, i8* %v3_e0c0, align 1
  %v6_e0c0 = zext i8 %v4_e0c0 to i32
  %v1_e0c4 = xor i32 %v6_e0c0, 84
  store i32 %v1_e0c4, i32* %r3.global-to-local, align 4
  %v1_e0c8 = trunc i32 %v1_e0c4 to i8
  store i8 %v1_e0c8, i8* %v3_e0c0, align 1
  %v0_e0cc = load i32, i32* %r2.global-to-local, align 4
  %v1_e0cc = add i32 %v0_e0cc, 1
  store i32 %v1_e0cc, i32* %r2.global-to-local, align 4
  %v1_e0d0 = load i32, i32* @r7, align 4
  %v9_e0d0 = icmp eq i32 %v1_e0cc, %v1_e0d0
  br i1 %v9_e0d0, label %dec_label_pc_e0d8.loopexit, label %dec_label_pc_e0c0

dec_label_pc_e0d8.loopexit:                       ; preds = %dec_label_pc_e0c0
  %extract.t = trunc i32 %v1_e0cc to i8
  br label %dec_label_pc_e0d8

dec_label_pc_e0d8:                                ; preds = %dec_label_pc_e0d8.loopexit, %dec_label_pc_e04c
  %v0_e0e8.off0 = phi i8 [ %extract.t, %dec_label_pc_e0d8.loopexit ], [ %extract.t6, %dec_label_pc_e04c ]
  %v2_e0d8 = load i32, i32* @global_var_1e538.118, align 4
  %v2_e0dc = load i32, i32* @global_var_1e564.120, align 4
  %v3_e0e0 = mul i32 %v2_e0d8, 16
  store i32 %v3_e0e0, i32* @sb, align 4
  %v2_e0e4 = add i32 %v2_e0dc, %v3_e0e0
  store i32 %v2_e0e4, i32* %r2.global-to-local, align 4
  %v3_e0e8 = add i32 %v2_e0e4, 12
  %v4_e0e8 = inttoptr i32 %v3_e0e8 to i8*
  store i8 %v0_e0e8.off0, i8* %v4_e0e8, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e07c, i32* %r3.global-to-local, align 4
  %v0_e0f4 = load i32, i32* %r6.global-to-local, align 4
  %v1_e0f4 = load i32, i32* @r8, align 4
  %v5_e0f4 = mul i32 %v2_e07c, 16
  %v6_e0f4 = add i32 %v1_e0f4, %v5_e0f4
  %v7_e0f4 = inttoptr i32 %v6_e0f4 to i32*
  store i32 %v0_e0f4, i32* %v7_e0f4, align 4
  %v2_e0f8 = load i32, i32* @global_var_1e564.120, align 4
  store i32 %v2_e0f8, i32* @r7, align 4
  %v1_e0fc = inttoptr i32 %arg2 to i8*
  %v2_e0fc = call i32 @function_ff00(i8* %v1_e0fc)
  %sext1 = mul i32 %v2_e0fc, 16777216
  %v1_e100 = sdiv i32 %sext1, 16777216
  %v2_e100 = add nsw i32 %v1_e100, 1
  store i32 %v2_e100, i32* @r4, align 4
  store i32 %v1_e100, i32* @r6, align 4
  store i32 %v2_e100, i32* @r0, align 4
  %v0_e10c = call i32 @function_113b0()
  store i32 %v0_e10c, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e114 = load i32, i32* @r4, align 4
  store i32 %v0_e114, i32* %r2.global-to-local, align 4
  store i32 %v0_e10c, i32* %r5.global-to-local, align 4
  %v3_e11c = call i32 @function_ff70(i32 %v0_e10c, i32 %arg2, i32 %v0_e114)
  store i32 %v3_e11c, i32* %r0.global-to-local, align 4
  %v0_e120 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e120, 1
  %extract.t8 = trunc i32 %v0_e120 to i8
  br i1 %tmp23, label %dec_label_pc_e144, label %dec_label_pc_e128

dec_label_pc_e128:                                ; preds = %dec_label_pc_e0d8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e12c

dec_label_pc_e12c:                                ; preds = %dec_label_pc_e12c, %dec_label_pc_e128
  %v2_e134 = phi i32 [ %v1_e138, %dec_label_pc_e12c ], [ 0, %dec_label_pc_e128 ]
  %v1_e12c = load i32, i32* %r5.global-to-local, align 4
  %v2_e12c = add i32 %v1_e12c, %v2_e134
  %v3_e12c = inttoptr i32 %v2_e12c to i8*
  %v4_e12c = load i8, i8* %v3_e12c, align 1
  %v6_e12c = zext i8 %v4_e12c to i32
  %v1_e130 = xor i32 %v6_e12c, 84
  store i32 %v1_e130, i32* %r3.global-to-local, align 4
  %v1_e134 = trunc i32 %v1_e130 to i8
  store i8 %v1_e134, i8* %v3_e12c, align 1
  %v0_e138 = load i32, i32* %r2.global-to-local, align 4
  %v1_e138 = add i32 %v0_e138, 1
  store i32 %v1_e138, i32* %r2.global-to-local, align 4
  %v1_e13c = load i32, i32* @r6, align 4
  %v9_e13c = icmp eq i32 %v1_e138, %v1_e13c
  br i1 %v9_e13c, label %dec_label_pc_e144.loopexit, label %dec_label_pc_e12c

dec_label_pc_e144.loopexit:                       ; preds = %dec_label_pc_e12c
  %extract.t7 = trunc i32 %v1_e138 to i8
  br label %dec_label_pc_e144

dec_label_pc_e144:                                ; preds = %dec_label_pc_e144.loopexit, %dec_label_pc_e0d8
  %v0_e154.off0 = phi i8 [ %extract.t7, %dec_label_pc_e144.loopexit ], [ %extract.t8, %dec_label_pc_e0d8 ]
  %v2_e144 = load i32, i32* @global_var_1e538.118, align 4
  store i32 %v2_e144, i32* %r0.global-to-local, align 4
  %v2_e148 = load i32, i32* @global_var_1e564.120, align 4
  %v3_e14c = mul i32 %v2_e144, 16
  store i32 %v3_e14c, i32* %r1.global-to-local, align 4
  %v2_e150 = or i32 %v3_e14c, 13
  %v3_e154 = add i32 %v2_e150, %v2_e148
  %v4_e154 = inttoptr i32 %v3_e154 to i8*
  store i8 %v0_e154.off0, i8* %v4_e154, align 1
  store i32 ptrtoint (i16** @global_var_1e568.122 to i32), i32* %r4.global-to-local, align 4
  %v2_e160 = load i16, i16* bitcast (i16** @global_var_1e568.122 to i16*), align 4
  %v3_e160 = zext i16 %v2_e160 to i32
  store i32 %v3_e160, i32* %lr.global-to-local, align 4
  %v2_e168 = load i32, i32* @global_var_1e564.120, align 4
  store i32 %v2_e168, i32* %r2.global-to-local, align 4
  %v0_e170 = load i32, i32* %r1.global-to-local, align 4
  %v2_e170 = add i32 %v0_e170, %v2_e168
  store i32 %v2_e170, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1e568.122 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_e178 = load i32, i32* @sb, align 4
  %v1_e178 = load i32, i32* @r7, align 4
  %v2_e178 = add i32 %v1_e178, %v0_e178
  store i32 %v2_e178, i32* %ip.global-to-local, align 4
  %v0_e17c = load i32, i32* %r0.global-to-local, align 4
  %v1_e17c = add i32 %v0_e17c, 1
  store i32 %v1_e17c, i32* %r0.global-to-local, align 4
  %v3_e180 = add i32 %v2_e170, 10
  %v4_e180 = inttoptr i32 %v3_e180 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1e568.122 to i32), i32 16), i32 16) to i16), i16* %v4_e180, align 2
  %v0_e184 = load i32, i32* %lr.global-to-local, align 4
  %v1_e184 = trunc i32 %v0_e184 to i16
  %v2_e184 = load i32, i32* %r1.global-to-local, align 4
  %v3_e184 = add i32 %v2_e184, 8
  %v4_e184 = inttoptr i32 %v3_e184 to i16*
  store i16 %v1_e184, i16* %v4_e184, align 2
  %v0_e188 = load i32, i32* %r5.global-to-local, align 4
  %v1_e188 = load i32, i32* %ip.global-to-local, align 4
  %v2_e188 = add i32 %v1_e188, 4
  %v3_e188 = inttoptr i32 %v2_e188 to i32*
  store i32 %v0_e188, i32* %v3_e188, align 4
  %v1_e18c = load i32, i32* @fp, align 4
  %v2_e18c = inttoptr i32 %v1_e18c to i32*
  store i32 %v1_e17c, i32* %v2_e18c, align 4
  %v0_e190 = load i32, i32* %r3.global-to-local, align 4
  %v1_e190 = trunc i32 %v0_e190 to i16
  %v2_e190 = load i32, i32* %r4.global-to-local, align 4
  %v3_e190 = inttoptr i32 %v2_e190 to i16*
  store i16 %v1_e190, i16* %v3_e190, align 2
  store i32 %v3_e04c, i32* @r4, align 4
  store i32 %v6_e04c, i32* @r5, align 4
  store i32 %v9_e04c, i32* @r6, align 4
  store i32 %v12_e04c, i32* @r7, align 4
  store i32 %v15_e04c, i32* @r8, align 4
  store i32 %v18_e04c, i32* @sb, align 4
  store i32 %v21_e04c, i32* @sl, align 4
  store i32 %v24_e04c, i32* @fp, align 4
  ret i32 %v1_e17c

; uselistorder directives
  uselistorder i32 %v3_e14c, { 1, 0 }
  uselistorder i32 %v1_e138, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e10c, { 1, 0, 2 }
  uselistorder i32 %v3_e0e0, { 1, 0 }
  uselistorder i32 %v1_e0cc, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e0a0, { 1, 0, 2 }
  uselistorder i32 %v2_e07c, { 1, 0, 2 }
  uselistorder i32 %v3_e070, { 1, 0 }
  uselistorder i32 %v1_e060, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_ff00, { 0, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_e1ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_e1ac:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %v6_e1ac = load i32, i32* @r5, align 4
  %v0_e1b8 = call i32 @function_106b0()
  store i32 %v0_e1b8, i32* %r0.global-to-local, align 4
  %v7_e1bc = icmp eq i32 %v0_e1b8, -1
  %. = zext i1 %v7_e1bc to i32
  %tmp369 = icmp slt i32 %v0_e1b8, 1
  %storemerge329 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_205c4.124 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e1d8 = icmp eq i32 %storemerge329, 0
  store i1 %v2_e1d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e1b8, i32* @global_var_205c4.124, align 4
  br i1 %v2_e1d8, label %dec_label_pc_e1f4, label %dec_label_pc_e1e4

dec_label_pc_e1e4:                                ; preds = %dec_label_pc_e1ac
  store i32 %v6_e1ac, i32* @r5, align 4
  ret i32 %v0_e1b8

dec_label_pc_e1f4:                                ; preds = %dec_label_pc_e1ac
  %v0_e1f4 = call i32 @function_101bc()
  store i32 %v0_e1f4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_205a0.46 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e1f4, i32* @global_var_205a0.46, align 4
  %v1_e200 = call i32 @function_dd70(i32 %v0_e1f4)
  %v0_e204 = load i32, i32* @r4, align 4
  store i32 %v0_e204, i32* %r0.global-to-local, align 4
  %v1_e208 = inttoptr i32 %v0_e204 to i32*
  %v2_e208 = call i32 @function_10640(i32* %v1_e208)
  store i32 ptrtoint (i32* @global_var_1e56c.116 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e208, i32* @global_var_1e56c.116, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e21c = call i32 @function_11cd0(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_205bc.128 to i32), i32* %r3.global-to-local, align 4
  %v0_e224 = load i32, i32* @r4, align 4
  store i32 %v0_e224, i32* %stack_var_-52, align 4
  store i32 %v2_e21c, i32* @global_var_205bc.128, align 4
  store i32 %v0_e224, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e230

dec_label_pc_e230:                                ; preds = %dec_label_pc_e230.dec_label_pc_e230_crit_edge, %dec_label_pc_e1f4
  %v2_e23c = phi i32 [ %v2_e23c.pre, %dec_label_pc_e230.dec_label_pc_e230_crit_edge ], [ %v2_e21c, %dec_label_pc_e1f4 ]
  %v0_e244 = phi i32 [ %v0_e274, %dec_label_pc_e230.dec_label_pc_e230_crit_edge ], [ %v0_e224, %dec_label_pc_e1f4 ]
  %v3_e238 = mul i32 %v0_e244, 256
  store i32 %v3_e238, i32* %ip.global-to-local, align 4
  %v2_e24c = mul i32 %v0_e244, 288
  %v1_e254 = add i32 %v0_e244, 1
  store i32 %v1_e254, i32* %r0.global-to-local, align 4
  %v2_e258 = add i32 %v2_e24c, %v2_e23c
  store i32 %v2_e258, i32* %r2.global-to-local, align 4
  store i32 %v2_e258, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_e26c = add i32 %v2_e258, 4
  %v3_e26c = inttoptr i32 %v2_e26c to i32*
  store i32 -1, i32* %v3_e26c, align 4
  %v0_e270 = load i32, i32* @r5, align 4
  %v1_e270 = load i32, i32* %r1.global-to-local, align 4
  %v2_e270 = add i32 %v1_e270, 12
  %v3_e270 = inttoptr i32 %v2_e270 to i32*
  store i32 %v0_e270, i32* %v3_e270, align 4
  %v0_e274 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e274, i32* %stack_var_-52, align 4
  %v7_e278 = icmp sgt i32 %v1_e254, 255
  br i1 %v7_e278, label %dec_label_pc_e27c, label %dec_label_pc_e230.dec_label_pc_e230_crit_edge

dec_label_pc_e230.dec_label_pc_e230_crit_edge:    ; preds = %dec_label_pc_e230
  %v2_e23c.pre = load i32, i32* @global_var_205bc.128, align 4
  br label %dec_label_pc_e230

dec_label_pc_e27c:                                ; preds = %dec_label_pc_e230
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_e288 = call i32 @function_11168(i32 2, i32 3, i32 6)
  store i32 %v3_e288, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_205c0.130 to i32), i32* %r2.global-to-local, align 4
  %v2_e290 = icmp eq i32 %v3_e288, -1
  store i1 %v2_e290, i1* %cpsr_c.global-to-local, align 1
  %v7_e290 = icmp eq i32 %v3_e288, -1
  store i1 %v7_e290, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e288, i32* @r4, align 4
  store i32 %v3_e288, i32* @global_var_205c0.130, align 4
  br i1 %v7_e290, label %dec_label_pc_e27c.dec_label_pc_f850_crit_edge, label %dec_label_pc_e2a0

dec_label_pc_e27c.dec_label_pc_f850_crit_edge:    ; preds = %dec_label_pc_e27c
  %.pre283 = ptrtoint i8* %stack_var_-56 to i32
  br label %dec_label_pc_f850

dec_label_pc_e2a0:                                ; preds = %dec_label_pc_e27c
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e2a4 = load i32, i32* @r5, align 4
  store i32 %v0_e2a4, i32* %r2.global-to-local, align 4
  %v2_e2a8 = call i32 @function_107f4(i32 %v3_e288, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e2b0 = or i32 %v2_e2a8, 2048
  store i32 %v1_e2b0, i32* %r2.global-to-local, align 4
  %v0_e2b4 = load i32, i32* @r4, align 4
  store i32 %v0_e2b4, i32* %r0.global-to-local, align 4
  %v2_e2b8 = call i32 @function_107f4(i32 %v0_e2b4, i32 4)
  %v2_e2c0 = load i32, i32* @global_var_205c0.130, align 4
  store i32 %v2_e2c0, i32* %r0.global-to-local, align 4
  %v2_e2c4 = ptrtoint i8* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_e2cc = load i32, i32* @r5, align 4
  store i32 %v0_e2cc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_e2d4 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e2d4, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_e2e4 = call i32 @function_11124(i32 %v2_e2c0, i32 %v0_e2cc, i32 3, i32 %v2_e2d4, i32 4)
  store i32 %v5_e2e4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e2e8 = icmp eq i32 %v5_e2e4, 0
  store i1 %v2_e2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2e8, label %dec_label_pc_e2f0, label %dec_label_pc_f844

dec_label_pc_e2f0:                                ; preds = %dec_label_pc_e2a0, %dec_label_pc_e2f0
  %v0_e2f0 = call i32 @function_dd14()
  %v3_e2f4 = mul i32 %v0_e2f0, 65536
  store i32 %v3_e2f4, i32* %r0.global-to-local, align 4
  %v1_e2fc = mul i32 %v0_e2f0, 256
  %v3_e300 = and i32 %v1_e2fc, 65280
  %tmp372 = udiv i32 %v0_e2f0, 256
  %v4_e304 = urem i32 %tmp372, 256
  %v5_e304 = or i32 %v4_e304, %v3_e300
  store i32 %v5_e304, i32* %r3.global-to-local, align 4
  %v2_e308 = icmp ugt i32 %v5_e304, 1023
  store i1 %v2_e308, i1* %cpsr_c.global-to-local, align 1
  %v7_e308 = icmp eq i32 %v5_e304, 1024
  store i1 %v7_e308, i1* %cpsr_z.global-to-local, align 1
  %v3_e310 = icmp ult i32 %v5_e304, 1022
  br i1 %v3_e310, label %dec_label_pc_e2f0, label %dec_label_pc_e314

dec_label_pc_e314:                                ; preds = %dec_label_pc_e2f0
  %v5_e30c.le = trunc i32 %v0_e2f0 to i16
  store i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32* %r0.global-to-local, align 4
  %v2_e318 = load i8, i8* bitcast (i8** @global_var_1e53c.132 to i8*), align 4
  %v3_e318 = zext i8 %v2_e318 to i32
  %v1_e31c = and i32 %v3_e318, 240
  %v1_e320 = or i32 %v1_e31c, 5
  store i32 %v1_e320, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1e53c.132 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1e53e.133 to i16*), align 4
  %v0_e340 = call i32 @function_dd14()
  %v1_e340 = trunc i32 %v0_e340 to i16
  %v3_e348 = load i8, i8* @global_var_1e55c.136, align 1
  store i32 ptrtoint (i16* @global_var_1e550.135 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32* %ip.global-to-local, align 4
  %v1_e358 = urem i8 %v3_e348, 16
  store i16 %v1_e340, i16* bitcast (i32* @global_var_1e540.137 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_e368 = or i8 %v1_e358, 80
  store i8 64, i8* bitcast (i32* @global_var_1e544.138 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1e545.139 to i8*), align 4
  store i8 %v1_e368, i8* @global_var_1e55c.136, align 1
  %v4_e378 = sext i16 %v5_e30c.le to i32
  store i32 %v4_e378, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_1e552.140, align 2
  store i16 %v5_e30c.le, i16* @global_var_1e550.135, align 2
  %v0_e388 = call i32 @function_dd14()
  %v1_e388 = trunc i32 %v0_e388 to i16
  %v3_e390 = load i8, i8* @global_var_1e55d.141, align 1
  %v4_e390 = zext i8 %v3_e390 to i32
  store i32 ptrtoint (i16* @global_var_1e550.135 to i32), i32* %ip.global-to-local, align 4
  %v1_e398 = or i32 %v4_e390, 2
  store i32 %v1_e398, i32* %r3.global-to-local, align 4
  store i16 %v1_e388, i16* bitcast (i32* @global_var_1e55e.142 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_15d10.144 to i32), i32* %r1.global-to-local, align 4
  %v1_e3a4 = trunc i32 %v1_e398 to i8
  store i8 %v1_e3a4, i8* @global_var_1e55d.141, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e3b0 = call i32 @function_e04c(i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32 ptrtoint (i32* @global_var_15d10.144 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d14.148 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e3c0 = call i32 @function_e04c(i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d14.148 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d1c.150 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e3d0 = call i32 @function_e04c(i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d1c.150 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_15d28.152 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15d28.152 to i32), i32* %r1.global-to-local, align 4
  %v5_e3e0 = call i32 @function_e04c(i32 ptrtoint ([7 x i8]* @global_var_15d28.152 to i32), i32 ptrtoint ([7 x i8]* @global_var_15d28.152 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_15d30.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.144 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e3f0 = call i32 @function_e04c(i32 ptrtoint ([8 x i8]* @global_var_15d30.154 to i32), i32 ptrtoint (i32* @global_var_15d10.144 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d38.156 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e400 = call i32 @function_e04c(i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d38.156 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_15d44.158 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15d44.158 to i32), i32* %r1.global-to-local, align 4
  %v5_e410 = call i32 @function_e04c(i32 ptrtoint ([6 x i8]* @global_var_15d44.158 to i32), i32 ptrtoint ([6 x i8]* @global_var_15d44.158 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15d4c.160 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e420 = call i32 @function_e04c(i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32 ptrtoint ([6 x i8]* @global_var_15d4c.160 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_15d54.162 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d54.162 to i32), i32* %r1.global-to-local, align 4
  %v5_e430 = call i32 @function_e04c(i32 ptrtoint ([8 x i8]* @global_var_15d54.162 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d54.162 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d30.154 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e440 = call i32 @function_e04c(i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d30.154 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d5c.164 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_e450 = call i32 @function_e04c(i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32 ptrtoint (i32* @global_var_15d5c.164 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15d6c.166 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e460 = call i32 @function_e04c(i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), i32 ptrtoint ([6 x i8]* @global_var_15d6c.166 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15d74.168 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d74.168 to i32), i32* %r1.global-to-local, align 4
  %v5_e470 = call i32 @function_e04c(i32 ptrtoint ([5 x i8]* @global_var_15d74.168 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d74.168 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15d74.168 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15d6c.166 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e480 = call i32 @function_e04c(i32 ptrtoint ([5 x i8]* @global_var_15d74.168 to i32), i32 ptrtoint ([6 x i8]* @global_var_15d6c.166 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_15d30.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d7c.170 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e490 = call i32 @function_e04c(i32 ptrtoint ([8 x i8]* @global_var_15d30.154 to i32), i32 ptrtoint (i32* @global_var_15d7c.170 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_15d30.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d88.172 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e4a0 = call i32 @function_e04c(i32 ptrtoint ([8 x i8]* @global_var_15d30.154 to i32), i32 ptrtoint (i32* @global_var_15d88.172 to i32), i32 15)
  store i32 %v4_e4a0, i32* %r0.global-to-local, align 4
  %v2_e4a8 = ptrtoint i32* %stack_var_-1866 to i32
  %v1_e7d4 = add i32 %v2_e4a8, 20
  %v1_e828 = add i32 %v2_e4a8, 16
  %v2_e828 = inttoptr i32 %v1_e828 to i32*
  %v1_e83c = add i32 %v2_e4a8, 9
  %v2_e83c = inttoptr i32 %v1_e83c to i8*
  %v1_e8d0 = add i32 %v2_e4a8, 12
  %v2_e8d0 = inttoptr i32 %v1_e8d0 to i32*
  %v2_eab4 = ptrtoint i32* %stack_var_-40 to i32
  %v2_eafc = ptrtoint i32* %stack_var_-68 to i32
  %v2_eb00 = ptrtoint i32* %stack_var_-224 to i32
  %v2_eb04 = ptrtoint i32* %stack_var_-352 to i32
  %v2_f4d8 = ptrtoint i32* %stack_var_-45 to i32
  %v2_f4ec = ptrtoint i32* %stack_var_-77 to i32
  %v2_f444 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f600 = ptrtoint i32* %stack_var_-104 to i32
  %v2_e4d0 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e4b0

dec_label_pc_e4b0:                                ; preds = %dec_label_pc_ec98, %dec_label_pc_e314
  %stack_var_-1876.0 = phi i32 [ %tmp334, %dec_label_pc_e314 ], [ %stack_var_-1876.1, %dec_label_pc_ec98 ]
  store i32 ptrtoint (i32* @global_var_1e56c.116 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  %v2_e4b8 = load i32, i32* @global_var_1e56c.116, align 4
  store i32 %v2_e4b8, i32* @r4, align 4
  %v3_e4bc = icmp uge i32 %stack_var_-1876.0, %v2_e4b8
  store i1 %v3_e4bc, i1* %cpsr_c.global-to-local, align 1
  %v9_e4bc = icmp eq i32 %stack_var_-1876.0, %v2_e4b8
  store i1 %v9_e4bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e4bc, label %dec_label_pc_e7c4, label %dec_label_pc_e4c4

dec_label_pc_e4c4:                                ; preds = %dec_label_pc_e4b0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_e4d4

dec_label_pc_e4d4:                                ; preds = %bb405, %dec_label_pc_e4c4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e4e8 = call i32 @function_dd14()
  %v1_e4e8 = trunc i32 %v0_e4e8 to i16
  store i32 %v0_e4e8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_205a0.46 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32* %ip.global-to-local, align 4
  %v2_e4f4 = load i32, i32* @global_var_205a0.46, align 4
  store i32 %v2_e4f4, i32* %r3.global-to-local, align 4
  store i16 %v1_e4e8, i16* bitcast (i32* @global_var_1e540.137 to i16*), align 4
  store i32 %v2_e4f4, i32* @global_var_1e548.173, align 4
  br label %dec_label_pc_e500

dec_label_pc_e500:                                ; preds = %dec_label_pc_e658, %dec_label_pc_e530, %dec_label_pc_e68c, %dec_label_pc_e680, %dec_label_pc_e674, %dec_label_pc_e668, %.thread48, %.thread32, %.thread28, %.thread24, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_e5cc, %dec_label_pc_e5c4, %bb383, %dec_label_pc_e594, %dec_label_pc_e570, %bb376, %dec_label_pc_e540, %bb375, %dec_label_pc_e528, %bb374, %bb400, %dec_label_pc_e4d4
  %v0_e500 = call i32 @function_dd14()
  store i32 %v0_e500, i32* %r0.global-to-local, align 4
  %v1_e504 = urem i32 %v0_e500, 256
  store i32 %v1_e504, i32* %r1.global-to-local, align 4
  %v3_e508 = udiv i32 %v0_e500, 256
  store i32 %v3_e508, i32* %r3.global-to-local, align 4
  %v3_e50c = udiv i32 %v0_e500, 65536
  store i32 %v3_e50c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e510 = icmp eq i32 %v1_e504, 0
  store i1 %v2_e510, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e510, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_e500
  %v3_e514 = icmp ugt i32 %v1_e504, 126
  store i1 %v3_e514, i1* %cpsr_c.global-to-local, align 1
  %v8_e514 = icmp eq i32 %v1_e504, 127
  store i1 %v8_e514, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_e500, %bb373
  %v0_e524 = phi i1 [ true, %dec_label_pc_e500 ], [ %v8_e514, %bb373 ]
  %v1_e518 = urem i32 %v3_e508, 256
  store i32 %v1_e518, i32* %ip.global-to-local, align 4
  %v1_e51c = urem i32 %v3_e50c, 256
  store i32 %v1_e51c, i32* %r2.global-to-local, align 4
  %v1_e520 = and i32 %v0_e500, 8388608
  %v2_e520 = icmp ne i32 %v1_e520, 0
  store i1 %v2_e520, i1* %cpsr_c.global-to-local, align 1
  %v3_e520 = udiv i32 %v0_e500, 16777216
  store i32 %v3_e520, i32* %r0.global-to-local, align 4
  br i1 %v0_e524, label %dec_label_pc_e500, label %dec_label_pc_e528

dec_label_pc_e528:                                ; preds = %bb374
  %v2_e528 = icmp ugt i32 %v1_e504, 2
  store i1 %v2_e528, i1* %cpsr_c.global-to-local, align 1
  %v7_e528 = icmp eq i32 %v1_e504, 3
  store i1 %v7_e528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e528, label %dec_label_pc_e500, label %dec_label_pc_e530

dec_label_pc_e530:                                ; preds = %dec_label_pc_e528
  %v1_e530 = add nsw i32 %v1_e504, -15
  store i32 %v1_e530, i32* %r3.global-to-local, align 4
  %v2_e534 = icmp ugt i32 %v1_e504, 55
  store i1 %v2_e534, i1* %cpsr_c.global-to-local, align 1
  %v7_e534 = icmp eq i32 %v1_e504, 56
  store i1 %v7_e534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e534, label %dec_label_pc_e500, label %bb375

bb375:                                            ; preds = %dec_label_pc_e530
  %v3_e538 = icmp ne i32 %v1_e530, 0
  store i1 %v3_e538, i1* %cpsr_c.global-to-local, align 1
  %v8_e538 = icmp eq i32 %v1_e530, 1
  store i1 %v8_e538, i1* %cpsr_z.global-to-local, align 1
  %v2_e53c = xor i1 %v3_e538, true
  %v3_e53c = or i1 %v8_e538, %v2_e53c
  br i1 %v3_e53c, label %dec_label_pc_e500, label %dec_label_pc_e540

dec_label_pc_e540:                                ; preds = %bb375
  %v2_e540 = icmp ugt i32 %v1_e504, 9
  store i1 %v2_e540, i1* %cpsr_c.global-to-local, align 1
  %v7_e540 = icmp eq i32 %v1_e504, 10
  store i1 %v7_e540, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e540, label %dec_label_pc_e500, label %dec_label_pc_e548

dec_label_pc_e548:                                ; preds = %dec_label_pc_e540
  %v2_e548 = icmp ugt i32 %v1_e504, 191
  store i1 %v2_e548, i1* %cpsr_c.global-to-local, align 1
  %v7_e548 = icmp eq i32 %v1_e504, 192
  store i1 %v7_e548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e548, label %bb376, label %dec_label_pc_e554

bb376:                                            ; preds = %dec_label_pc_e548
  %v3_e54c = icmp ugt i32 %v1_e518, 167
  store i1 %v3_e54c, i1* %cpsr_c.global-to-local, align 1
  %v8_e54c = icmp eq i32 %v1_e518, 168
  store i1 %v8_e54c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e54c, label %dec_label_pc_e500, label %dec_label_pc_e554

dec_label_pc_e554:                                ; preds = %dec_label_pc_e548, %bb376
  %v7_e554 = icmp eq i32 %v1_e504, 172
  %.459 = zext i1 %v7_e554 to i32
  store i32 %.459, i32* %r3.global-to-local, align 4
  %v2_e560 = icmp ugt i32 %v1_e518, 14
  store i1 %v2_e560, i1* %cpsr_c.global-to-local, align 1
  %v7_e560 = icmp eq i32 %v1_e518, 15
  store i1 %v7_e560, i1* %cpsr_z.global-to-local, align 1
  %v2_e564 = xor i1 %v2_e560, true
  %v3_e564 = or i1 %v7_e560, %v2_e564
  br i1 %v3_e564, label %.thread8, label %bb379

.thread8:                                         ; preds = %dec_label_pc_e554
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e578

bb379:                                            ; preds = %dec_label_pc_e554
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e568 = icmp eq i1 %v7_e554, false
  store i1 %v2_e568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e568, label %dec_label_pc_e578, label %dec_label_pc_e570

dec_label_pc_e570:                                ; preds = %bb379
  %v2_e570 = icmp ugt i32 %v1_e518, 30
  store i1 %v2_e570, i1* %cpsr_c.global-to-local, align 1
  %v7_e570 = icmp eq i32 %v1_e518, 31
  store i1 %v7_e570, i1* %cpsr_z.global-to-local, align 1
  %v2_e574 = xor i1 %v2_e570, true
  %v3_e574 = or i1 %v7_e570, %v2_e574
  br i1 %v3_e574, label %dec_label_pc_e500, label %dec_label_pc_e578

dec_label_pc_e578:                                ; preds = %.thread8, %dec_label_pc_e570, %bb379
  %v7_e578 = icmp eq i32 %v1_e504, 100
  %.460 = zext i1 %v7_e578 to i32
  store i32 %.460, i32* %r3.global-to-local, align 4
  %v2_e584 = icmp ugt i32 %v1_e518, 62
  store i1 %v2_e584, i1* %cpsr_c.global-to-local, align 1
  %v7_e584 = icmp eq i32 %v1_e518, 63
  store i1 %v7_e584, i1* %cpsr_z.global-to-local, align 1
  %v2_e588 = xor i1 %v2_e584, true
  %v3_e588 = or i1 %v7_e584, %v2_e588
  br i1 %v3_e588, label %.thread13, label %bb382

.thread13:                                        ; preds = %dec_label_pc_e578
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e59c

bb382:                                            ; preds = %dec_label_pc_e578
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e58c = icmp eq i1 %v7_e578, false
  store i1 %v2_e58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e58c, label %dec_label_pc_e59c, label %dec_label_pc_e594

dec_label_pc_e594:                                ; preds = %bb382
  %v2_e594 = icmp ugt i32 %v1_e518, 125
  store i1 %v2_e594, i1* %cpsr_c.global-to-local, align 1
  %v7_e594 = icmp eq i32 %v1_e518, 126
  store i1 %v7_e594, i1* %cpsr_z.global-to-local, align 1
  %v2_e598 = xor i1 %v2_e594, true
  %v3_e598 = or i1 %v7_e594, %v2_e598
  br i1 %v3_e598, label %dec_label_pc_e500, label %dec_label_pc_e59c

dec_label_pc_e59c:                                ; preds = %.thread13, %dec_label_pc_e594, %bb382
  %v2_e59c = icmp ugt i32 %v1_e504, 168
  store i1 %v2_e59c, i1* %cpsr_c.global-to-local, align 1
  %v7_e59c = icmp eq i32 %v1_e504, 169
  store i1 %v7_e59c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e59c, label %bb383, label %dec_label_pc_e5a8

bb383:                                            ; preds = %dec_label_pc_e59c
  %v3_e5a0 = icmp eq i32 %v1_e518, 255
  store i1 %v3_e5a0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e5a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e5a0, label %dec_label_pc_e500, label %dec_label_pc_e5a8

dec_label_pc_e5a8:                                ; preds = %dec_label_pc_e59c, %bb383
  %v7_e5a8 = icmp eq i32 %v1_e504, 198
  %.461 = zext i1 %v7_e5a8 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_e5b4 = icmp ugt i32 %v1_e518, 16
  store i1 %v2_e5b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e5b4 = icmp eq i32 %v1_e518, 17
  store i1 %v7_e5b4, i1* %cpsr_z.global-to-local, align 1
  %v2_e5b8 = xor i1 %v2_e5b4, true
  %v3_e5b8 = or i1 %v7_e5b4, %v2_e5b8
  br i1 %v3_e5b8, label %.thread19, label %bb386

.thread19:                                        ; preds = %dec_label_pc_e5a8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e5cc

bb386:                                            ; preds = %dec_label_pc_e5a8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5bc = icmp eq i1 %v7_e5a8, false
  store i1 %v2_e5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5bc, label %dec_label_pc_e5cc, label %dec_label_pc_e5c4

dec_label_pc_e5c4:                                ; preds = %bb386
  %v2_e5c4 = icmp ugt i32 %v1_e518, 18
  store i1 %v2_e5c4, i1* %cpsr_c.global-to-local, align 1
  %v7_e5c4 = icmp eq i32 %v1_e518, 19
  store i1 %v7_e5c4, i1* %cpsr_z.global-to-local, align 1
  %v2_e5c8 = xor i1 %v2_e5c4, true
  %v3_e5c8 = or i1 %v7_e5c4, %v2_e5c8
  br i1 %v3_e5c8, label %dec_label_pc_e500, label %dec_label_pc_e5cc

dec_label_pc_e5cc:                                ; preds = %.thread19, %dec_label_pc_e5c4, %bb386
  %v2_e5cc = icmp ugt i32 %v1_e504, 222
  store i1 %v2_e5cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e5cc = icmp eq i32 %v1_e504, 223
  store i1 %v7_e5cc, i1* %cpsr_z.global-to-local, align 1
  %v2_e5d0 = xor i1 %v7_e5cc, true
  %v3_e5d0 = and i1 %v2_e5cc, %v2_e5d0
  br i1 %v3_e5d0, label %dec_label_pc_e500, label %dec_label_pc_e5d4

dec_label_pc_e5d4:                                ; preds = %dec_label_pc_e5cc
  %v7_e5d4 = icmp eq i32 %v1_e504, 106
  %.462 = zext i1 %v7_e5d4 to i32
  %v2_e5e0 = icmp ugt i32 %v1_e518, 185
  store i1 %v2_e5e0, i1* %cpsr_c.global-to-local, align 1
  %v7_e5e0 = icmp eq i32 %v1_e518, 186
  store i1 %v7_e5e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5e0, label %bb389, label %dec_label_pc_e5ec

bb389:                                            ; preds = %dec_label_pc_e5d4
  %v2_e5d4 = icmp ugt i32 %v1_e504, 105
  store i1 %v2_e5d4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e5d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5d4, label %dec_label_pc_e500, label %dec_label_pc_e5ec

dec_label_pc_e5ec:                                ; preds = %dec_label_pc_e5d4, %bb389
  %v2_e5ec = icmp ugt i32 %v1_e518, 186
  store i1 %v2_e5ec, i1* %cpsr_c.global-to-local, align 1
  %v7_e5ec = icmp eq i32 %v1_e518, 187
  store i1 %v7_e5ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5ec, label %.thread24, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_e5ec
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e600

.thread24:                                        ; preds = %dec_label_pc_e5ec
  store i32 %.462, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5f8 = icmp eq i1 %v7_e5d4, false
  store i1 %v2_e5f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5f8, label %dec_label_pc_e600, label %dec_label_pc_e500

dec_label_pc_e600:                                ; preds = %.thread25, %.thread24
  %v2_e600 = icmp ugt i32 %v1_e518, 184
  store i1 %v2_e600, i1* %cpsr_c.global-to-local, align 1
  %v7_e600 = icmp eq i32 %v1_e518, 185
  store i1 %v7_e600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e600, label %.thread28, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_e600
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e614

.thread28:                                        ; preds = %dec_label_pc_e600
  store i32 %.462, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e60c = icmp eq i1 %v7_e5d4, false
  store i1 %v2_e60c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e60c, label %dec_label_pc_e614, label %dec_label_pc_e500

dec_label_pc_e614:                                ; preds = %.thread29, %.thread28
  %v2_e614 = icmp ugt i32 %v1_e518, 183
  store i1 %v2_e614, i1* %cpsr_c.global-to-local, align 1
  %v7_e614 = icmp eq i32 %v1_e518, 184
  store i1 %v7_e614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e614, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e614
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e628

.thread32:                                        ; preds = %dec_label_pc_e614
  store i32 %.462, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e620 = icmp eq i1 %v7_e5d4, false
  store i1 %v2_e620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e620, label %dec_label_pc_e628, label %dec_label_pc_e500

dec_label_pc_e628:                                ; preds = %.thread33, %.thread32
  %v2_e628 = icmp ugt i32 %v1_e504, 149
  store i1 %v2_e628, i1* %cpsr_c.global-to-local, align 1
  %v7_e628 = icmp eq i32 %v1_e504, 150
  store i1 %v7_e628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e628, label %bb390, label %dec_label_pc_e634

bb390:                                            ; preds = %dec_label_pc_e628
  %v3_e62c = icmp ugt i32 %v1_e518, 30
  store i1 %v3_e62c, i1* %cpsr_c.global-to-local, align 1
  %v8_e62c = icmp eq i32 %v1_e518, 31
  store i1 %v8_e62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e62c, label %dec_label_pc_e500, label %dec_label_pc_e634

dec_label_pc_e634:                                ; preds = %dec_label_pc_e628, %bb390
  %v2_e634 = icmp ugt i32 %v1_e504, 48
  store i1 %v2_e634, i1* %cpsr_c.global-to-local, align 1
  %v7_e634 = icmp eq i32 %v1_e504, 49
  store i1 %v7_e634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e634, label %bb391, label %dec_label_pc_e640

bb391:                                            ; preds = %dec_label_pc_e634
  %v3_e638 = icmp ugt i32 %v1_e518, 50
  store i1 %v3_e638, i1* %cpsr_c.global-to-local, align 1
  %v8_e638 = icmp eq i32 %v1_e518, 51
  store i1 %v8_e638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e638, label %dec_label_pc_e500, label %dec_label_pc_e640

dec_label_pc_e640:                                ; preds = %dec_label_pc_e634, %bb391
  %v2_e640 = icmp ugt i32 %v1_e504, 177
  store i1 %v2_e640, i1* %cpsr_c.global-to-local, align 1
  %v7_e640 = icmp eq i32 %v1_e504, 178
  store i1 %v7_e640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e640, label %bb392, label %dec_label_pc_e64c

bb392:                                            ; preds = %dec_label_pc_e640
  %v3_e644 = icmp ugt i32 %v1_e518, 61
  store i1 %v3_e644, i1* %cpsr_c.global-to-local, align 1
  %v8_e644 = icmp eq i32 %v1_e518, 62
  store i1 %v8_e644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e644, label %dec_label_pc_e500, label %dec_label_pc_e64c

dec_label_pc_e64c:                                ; preds = %dec_label_pc_e640, %bb392
  %v2_e64c = icmp ugt i32 %v1_e504, 159
  store i1 %v2_e64c, i1* %cpsr_c.global-to-local, align 1
  %v7_e64c = icmp eq i32 %v1_e504, 160
  store i1 %v7_e64c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e64c, label %bb393, label %dec_label_pc_e658

bb393:                                            ; preds = %dec_label_pc_e64c
  %v3_e650 = icmp ugt i32 %v1_e518, 12
  store i1 %v3_e650, i1* %cpsr_c.global-to-local, align 1
  %v8_e650 = icmp eq i32 %v1_e518, 13
  store i1 %v8_e650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e650, label %dec_label_pc_e500, label %dec_label_pc_e658

dec_label_pc_e658:                                ; preds = %dec_label_pc_e64c, %bb393
  %v1_e658 = add nsw i32 %v1_e504, -6
  store i32 %v1_e658, i32* %r3.global-to-local, align 4
  %v2_e65c = icmp ugt i32 %v1_e504, 10
  store i1 %v2_e65c, i1* %cpsr_c.global-to-local, align 1
  %v7_e65c = icmp eq i32 %v1_e504, 11
  store i1 %v7_e65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e65c, label %dec_label_pc_e500, label %bb394

bb394:                                            ; preds = %dec_label_pc_e658
  %v3_e660 = icmp ne i32 %v1_e658, 0
  store i1 %v3_e660, i1* %cpsr_c.global-to-local, align 1
  %v8_e660 = icmp eq i32 %v1_e658, 1
  store i1 %v8_e660, i1* %cpsr_z.global-to-local, align 1
  %v2_e664 = xor i1 %v3_e660, true
  %v3_e664 = or i1 %v8_e660, %v2_e664
  br i1 %v3_e664, label %dec_label_pc_e500, label %dec_label_pc_e668

dec_label_pc_e668:                                ; preds = %bb394
  %v2_e668 = icmp ugt i32 %v1_e504, 21
  store i1 %v2_e668, i1* %cpsr_c.global-to-local, align 1
  %v7_e668 = icmp eq i32 %v1_e504, 22
  store i1 %v7_e668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e668, label %dec_label_pc_e500, label %bb395

bb395:                                            ; preds = %dec_label_pc_e668
  %v3_e66c = icmp ugt i32 %v1_e504, 20
  store i1 %v3_e66c, i1* %cpsr_c.global-to-local, align 1
  %v8_e66c = icmp eq i32 %v1_e504, 21
  store i1 %v8_e66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e66c, label %dec_label_pc_e500, label %dec_label_pc_e674

dec_label_pc_e674:                                ; preds = %bb395
  %v2_e674 = icmp ugt i32 %v1_e504, 27
  store i1 %v2_e674, i1* %cpsr_c.global-to-local, align 1
  %v7_e674 = icmp eq i32 %v1_e504, 28
  store i1 %v7_e674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e674, label %dec_label_pc_e500, label %bb396

bb396:                                            ; preds = %dec_label_pc_e674
  %v3_e678 = icmp ugt i32 %v1_e504, 25
  store i1 %v3_e678, i1* %cpsr_c.global-to-local, align 1
  %v8_e678 = icmp eq i32 %v1_e504, 26
  store i1 %v8_e678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e678, label %dec_label_pc_e500, label %dec_label_pc_e680

dec_label_pc_e680:                                ; preds = %bb396
  %v2_e680 = icmp ugt i32 %v1_e504, 29
  store i1 %v2_e680, i1* %cpsr_c.global-to-local, align 1
  %v7_e680 = icmp eq i32 %v1_e504, 30
  store i1 %v7_e680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e680, label %dec_label_pc_e500, label %bb397

bb397:                                            ; preds = %dec_label_pc_e680
  %v3_e684 = icmp ugt i32 %v1_e504, 28
  store i1 %v3_e684, i1* %cpsr_c.global-to-local, align 1
  %v8_e684 = icmp eq i32 %v1_e504, 29
  store i1 %v8_e684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e684, label %dec_label_pc_e500, label %dec_label_pc_e68c

dec_label_pc_e68c:                                ; preds = %bb397
  %v2_e68c = icmp ugt i32 %v1_e504, 54
  store i1 %v2_e68c, i1* %cpsr_c.global-to-local, align 1
  %v7_e68c = icmp eq i32 %v1_e504, 55
  store i1 %v7_e68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e68c, label %dec_label_pc_e500, label %bb398

bb398:                                            ; preds = %dec_label_pc_e68c
  %v3_e690 = icmp ugt i32 %v1_e504, 32
  store i1 %v3_e690, i1* %cpsr_c.global-to-local, align 1
  %v8_e690 = icmp eq i32 %v1_e504, 33
  store i1 %v8_e690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e690, label %dec_label_pc_e500, label %dec_label_pc_e698

dec_label_pc_e698:                                ; preds = %bb398
  %v2_e698 = icmp ugt i32 %v1_e504, 214
  store i1 %v2_e698, i1* %cpsr_c.global-to-local, align 1
  %v7_e698 = icmp eq i32 %v1_e504, 215
  store i1 %v7_e698, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e698, label %.thread48, label %bb399

bb399:                                            ; preds = %dec_label_pc_e698
  %v3_e69c = icmp ugt i32 %v1_e504, 213
  store i1 %v3_e69c, i1* %cpsr_c.global-to-local, align 1
  %v8_e69c = icmp eq i32 %v1_e504, 214
  store i1 %v8_e69c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e69c, label %bb400, label %dec_label_pc_e6ac

.thread48:                                        ; preds = %dec_label_pc_e698
  br label %dec_label_pc_e500

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_e500

dec_label_pc_e6ac:                                ; preds = %bb399
  %v5_e6b8 = call i32 @llvm.bswap.i32(i32 %v0_e500)
  store i32 %v5_e6b8, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_e500, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_e6c0 = udiv i32 %v5_e6b8, 16777216
  %v1_e6c4 = and i32 %v5_e6b8, ptrtoint (i32* @global_var_ff00.21 to i32)
  %v4_e6c8 = udiv i32 %tmp402, 256
  %v4_e6cc = mul i32 %v1_e6c4, 256
  store i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32* @r0, align 4
  %tmp403 = and i32 %v0_e500, 65536
  %v3_e6d4 = icmp ne i32 %tmp403, 0
  store i1 %v3_e6d4, i1* %cpsr_c.global-to-local, align 1
  %v4_e6d4 = mul i32 %v5_e6b8, 16777216
  %v5_e6c8 = or i32 %v4_e6d4, %v3_e6c0
  %v5_e6cc = or i32 %v5_e6c8, %v4_e6c8
  %v5_e6d4 = or i32 %v5_e6cc, %v4_e6cc
  store i32 %v5_e6d4, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1e546.174 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_e6d4, i32* @global_var_1e54c.175, align 4
  %v3_e6e4 = call i32 @function_c848(i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32 20)
  %v4_e6e4 = trunc i32 %v3_e6e4 to i16
  store i32 %v3_e6e4, i32* %r0.global-to-local, align 4
  %v3_e6e8 = load i32, i32* %stack_var_-52, align 4
  %v5_e6f8 = sdiv i32 %v3_e6e8, 10
  %v3_e6fc = mul i32 %v5_e6f8, 8
  store i32 %v3_e6fc, i32* %r2.global-to-local, align 4
  %v2_e704 = mul i32 %v5_e6f8, 10
  store i32 %v2_e704, i32* %r3.global-to-local, align 4
  %v3_e708 = icmp uge i32 %v3_e6e8, %v2_e704
  store i1 %v3_e708, i1* %cpsr_c.global-to-local, align 1
  %v9_e708 = icmp eq i32 %v3_e6e8, %v2_e704
  store i1 %v9_e708, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_e708, label %bb404, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_e6ac
  store i32 ptrtoint (i16* @global_var_1e550.135 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_e6e4, i16* bitcast (i32* @global_var_1e546.174 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e550.135 to i32), i32 2) to i16*), align 2
  %v4_e728 = load i32, i32* @global_var_1e54c.175, align 4
  store i32 %v4_e728, i32* @global_var_1e554.177, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb405

bb404:                                            ; preds = %dec_label_pc_e6ac
  store i16 %v4_e6e4, i16* bitcast (i32* @global_var_1e546.174 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32* %r0.global-to-local, align 4
  %v4_e72854 = load i32, i32* @global_var_1e54c.175, align 4
  store i32 ptrtoint (i16* @global_var_1e550.135 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_e72854, i32* @global_var_1e554.177, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e550.135 to i32), i32 2) to i16*), align 2
  br label %bb405

bb405:                                            ; preds = %.thread60, %bb404
  store i16 0, i16* bitcast (i32* @global_var_1e560.178 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_1e550.135 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_e754 = call i32 @function_c898(i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32 sext (i16 ptrtoint (i16* @global_var_1e550.135 to i16) to i32), i32 5120, i32 20)
  %v7_e754 = trunc i32 %v6_e754 to i16
  store i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32* %r1.global-to-local, align 4
  %v2_e760 = load i32, i32* @global_var_205c0.130, align 4
  store i16 %v7_e754, i16* bitcast (i32* @global_var_1e560.178 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_f600, i32* %ip.global-to-local, align 4
  store i32 %v2_e760, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_e7a8 = call i32 @function_110e4(i32 %v2_e760, i32 ptrtoint (i8** @global_var_1e53c.132 to i32), i32 40, i32 16384, i32 %v2_e4d0, i32 16)
  store i32 %v7_e7a8, i32* %r0.global-to-local, align 4
  %v3_e7ac = load i32, i32* %stack_var_-52, align 4
  %v1_e7b0 = add i32 %v3_e7ac, 1
  store i32 %v1_e7b0, i32* %r3.global-to-local, align 4
  %v3_e7b4 = icmp ugt i32 %v1_e7b0, 383
  store i1 %v3_e7b4, i1* %cpsr_c.global-to-local, align 1
  %v8_e7b4 = icmp eq i32 %v1_e7b0, 384
  store i1 %v8_e7b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e7b0, i32* %stack_var_-52, align 4
  %v5_e7bc = icmp slt i32 %v1_e7b0, 384
  br i1 %v5_e7bc, label %dec_label_pc_e4d4, label %dec_label_pc_e7c0

dec_label_pc_e7c0:                                ; preds = %bb405
  %v0_e7c0 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e4b0, %dec_label_pc_e7c0
  %stack_var_-1876.1 = phi i32 [ %stack_var_-1876.0, %dec_label_pc_e4b0 ], [ %v0_e7c0, %dec_label_pc_e7c0 ]
  %v0_e7c4 = call i32 @function_10de8()
  store i32 %v0_e7c4, i32* %fp.global-to-local, align 4
  store i32 %v2_e4a8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_e7d4, i32* @r4, align 4
  br label %dec_label_pc_e7d8

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e898, %dec_label_pc_e890, %dec_label_pc_e888, %dec_label_pc_e864, %dec_label_pc_e854, %dec_label_pc_e838, %dec_label_pc_e820, %dec_label_pc_e880, %dec_label_pc_e874, %dec_label_pc_e818, %dec_label_pc_e950, %dec_label_pc_e7c4
  %v1_e7dc = phi i32 [ %v0_e7c4, %dec_label_pc_e7c4 ], [ %v1_e7dc.pre.pre, %dec_label_pc_e950 ], [ %v0_e80c, %dec_label_pc_e818 ], [ %v0_e80c, %dec_label_pc_e874 ], [ %v0_e80c, %dec_label_pc_e880 ], [ %v0_e80c, %dec_label_pc_e820 ], [ %v0_e80c, %dec_label_pc_e838 ], [ %v0_e80c, %dec_label_pc_e854 ], [ %v0_e80c, %dec_label_pc_e864 ], [ %v0_e80c, %dec_label_pc_e888 ], [ %v0_e80c, %dec_label_pc_e890 ], [ %v0_e80c, %dec_label_pc_e898 ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_e7dc = inttoptr i32 %v1_e7dc to i32*
  store i32 0, i32* %v2_e7dc, align 4
  %v2_e7e8 = load i32, i32* @global_var_205c0.130, align 4
  store i32 %v2_e7e8, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_e4a8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e7f8 = load i32, i32* %ip.global-to-local, align 4
  %v6_e800 = call i32 @function_11070(i32 %v2_e7e8, i32 %v2_e4a8, i32 1514, i32 16384, i32 %v0_e7f8, i32 %v0_e7f8)
  store i32 %v6_e800, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e804 = icmp eq i32 %v6_e800, 0
  store i1 %v2_e804, i1* %cpsr_z.global-to-local, align 1
  %tmp406 = icmp slt i32 %v6_e800, 1
  br i1 %tmp406, label %dec_label_pc_e960, label %dec_label_pc_e80c

dec_label_pc_e80c:                                ; preds = %dec_label_pc_e7d8
  %v0_e80c = load i32, i32* %fp.global-to-local, align 4
  %v1_e80c = inttoptr i32 %v0_e80c to i32*
  %v2_e80c = load i32, i32* %v1_e80c, align 4
  store i32 %v2_e80c, i32* %r3.global-to-local, align 4
  %v2_e810 = icmp ugt i32 %v2_e80c, 10
  store i1 %v2_e810, i1* %cpsr_c.global-to-local, align 1
  %v7_e810 = icmp eq i32 %v2_e80c, 11
  store i1 %v7_e810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e810, label %dec_label_pc_e960, label %dec_label_pc_e818

dec_label_pc_e818:                                ; preds = %dec_label_pc_e80c
  %v2_e818 = icmp ugt i32 %v6_e800, 38
  store i1 %v2_e818, i1* %cpsr_c.global-to-local, align 1
  %v7_e818 = icmp eq i32 %v6_e800, 39
  store i1 %v7_e818, i1* %cpsr_z.global-to-local, align 1
  %v2_e81c = xor i1 %v2_e818, true
  %v3_e81c = or i1 %v7_e818, %v2_e81c
  br i1 %v3_e81c, label %dec_label_pc_e7d8, label %dec_label_pc_e820

dec_label_pc_e820:                                ; preds = %dec_label_pc_e818
  store i32 %v2_e4a8, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_205a0.46 to i32), i32* %ip.global-to-local, align 4
  %v3_e828 = load i32, i32* %v2_e828, align 4
  store i32 %v3_e828, i32* %r2.global-to-local, align 4
  %v2_e82c = load i32, i32* @global_var_205a0.46, align 4
  store i32 %v2_e82c, i32* %r3.global-to-local, align 4
  %v3_e830 = icmp uge i32 %v3_e828, %v2_e82c
  store i1 %v3_e830, i1* %cpsr_c.global-to-local, align 1
  %v9_e830 = icmp eq i32 %v3_e828, %v2_e82c
  store i1 %v9_e830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e830, label %dec_label_pc_e838, label %dec_label_pc_e7d8

dec_label_pc_e838:                                ; preds = %dec_label_pc_e820
  %v3_e83c = load i8, i8* %v2_e83c, align 1
  %v4_e83c = zext i8 %v3_e83c to i32
  store i32 %v4_e83c, i32* %r3.global-to-local, align 4
  %v2_e840 = icmp ugt i8 %v3_e83c, 5
  store i1 %v2_e840, i1* %cpsr_c.global-to-local, align 1
  %v7_e840 = icmp eq i8 %v3_e83c, 6
  store i1 %v7_e840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e840, label %dec_label_pc_e848, label %dec_label_pc_e7d8

dec_label_pc_e848:                                ; preds = %dec_label_pc_e838
  %v0_e848 = load i32, i32* @r4, align 4
  %v1_e848 = inttoptr i32 %v0_e848 to i16*
  %v2_e848 = load i16, i16* %v1_e848, align 2
  %v3_e848 = zext i16 %v2_e848 to i32
  store i32 %v3_e848, i32* %ip.global-to-local, align 4
  %v2_e84c = icmp ugt i16 %v2_e848, 5887
  store i1 %v2_e84c, i1* %cpsr_c.global-to-local, align 1
  %v7_e84c = icmp eq i16 %v2_e848, 5888
  store i1 %v7_e84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e84c, label %dec_label_pc_e864, label %dec_label_pc_e854

dec_label_pc_e854:                                ; preds = %dec_label_pc_e848
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_e85c = icmp ugt i16 %v2_e848, 4872
  store i1 %v3_e85c, i1* %cpsr_c.global-to-local, align 1
  %v9_e85c = icmp eq i16 %v2_e848, 4873
  store i1 %v9_e85c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e85c, label %dec_label_pc_e864, label %dec_label_pc_e7d8

dec_label_pc_e864:                                ; preds = %dec_label_pc_e854, %dec_label_pc_e848
  %v1_e864 = add i32 %v0_e848, 2
  %v2_e864 = inttoptr i32 %v1_e864 to i16*
  %v3_e864 = load i16, i16* %v2_e864, align 2
  %v4_e864 = zext i16 %v3_e864 to i32
  store i32 %v4_e864, i32* %r3.global-to-local, align 4
  store i32 %v4_e378, i32* %r0.global-to-local, align 4
  %v3_e86c = icmp uge i32 %v4_e864, %v4_e378
  store i1 %v3_e86c, i1* %cpsr_c.global-to-local, align 1
  %v9_e86c = icmp eq i32 %v4_e864, %v4_e378
  store i1 %v9_e86c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e86c, label %dec_label_pc_e874, label %dec_label_pc_e7d8

dec_label_pc_e874:                                ; preds = %dec_label_pc_e864
  %v1_e874 = add i32 %v0_e848, 13
  %v2_e874 = inttoptr i32 %v1_e874 to i8*
  %v3_e874 = load i8, i8* %v2_e874, align 1
  %v4_e874 = zext i8 %v3_e874 to i32
  store i32 %v4_e874, i32* %r3.global-to-local, align 4
  %v1_e878 = and i32 %v4_e874, 2
  %v2_e878 = icmp eq i32 %v1_e878, 0
  store i1 %v2_e878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e878, label %dec_label_pc_e7d8, label %dec_label_pc_e880

dec_label_pc_e880:                                ; preds = %dec_label_pc_e874
  %v1_e880 = and i32 %v4_e874, 16
  %v2_e880 = icmp eq i32 %v1_e880, 0
  store i1 %v2_e880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e880, label %dec_label_pc_e7d8, label %dec_label_pc_e888

dec_label_pc_e888:                                ; preds = %dec_label_pc_e880
  %v1_e888 = and i32 %v4_e874, 4
  %v2_e888 = icmp eq i32 %v1_e888, 0
  store i1 %v2_e888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e888, label %dec_label_pc_e890, label %dec_label_pc_e7d8

dec_label_pc_e890:                                ; preds = %dec_label_pc_e888
  %tmp = urem i8 %v3_e874, 2
  %v2_e890 = icmp eq i8 %tmp, 0
  store i1 %v2_e890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e890, label %dec_label_pc_e898, label %dec_label_pc_e7d8

dec_label_pc_e898:                                ; preds = %dec_label_pc_e890
  %v1_e898 = add i32 %v0_e848, 8
  %v2_e898 = inttoptr i32 %v1_e898 to i32*
  %v3_e898 = load i32, i32* %v2_e898, align 4
  %v3_e8a0 = udiv i32 %v3_e898, 16777216
  %v1_e8a4 = and i32 %v3_e898, ptrtoint (i32* @global_var_ff00.21 to i32)
  %v1_e89c = udiv i32 %v3_e898, 256
  %v4_e8a8 = and i32 %v1_e89c, 65280
  %v4_e8ac = mul i32 %v1_e8a4, 256
  %v4_e8b0 = mul i32 %v3_e898, 16777216
  %v5_e8a8 = or i32 %v4_e8b0, %v3_e8a0
  %v5_e8ac = or i32 %v5_e8a8, %v4_e8a8
  %v5_e8b0 = or i32 %v5_e8ac, %v4_e8ac
  %v1_e8b4 = add i32 %v5_e8b0, -1
  store i32 %v1_e8b4, i32* %r2.global-to-local, align 4
  %v1_e8b8 = and i32 %v1_e8b4, 16711680
  store i32 %v1_e8b8, i32* %r0.global-to-local, align 4
  %v3_e8bc = udiv i32 %v1_e8b4, 16777216
  %v4_e8c4 = udiv i32 %v1_e8b8, 256
  %v5_e8c4 = or i32 %v4_e8c4, %v3_e8bc
  %v1_e8c0 = mul i32 %v1_e8b4, 256
  %v4_e8c8 = and i32 %v1_e8c0, 16711680
  %v5_e8c8 = or i32 %v5_e8c4, %v4_e8c8
  store i32 %v5_e8c8, i32* %r3.global-to-local, align 4
  store i32 %v2_e4a8, i32* %r1.global-to-local, align 4
  %v3_e8d0 = load i32, i32* %v2_e8d0, align 4
  store i32 %v3_e8d0, i32* @lr, align 4
  %v5_e8d4 = call i32 @llvm.bswap.i32(i32 %v1_e8b4)
  store i32 %v5_e8d4, i32* %r3.global-to-local, align 4
  %v3_e8d8 = icmp uge i32 %v5_e8d4, %v3_e8d0
  store i1 %v3_e8d8, i1* %cpsr_c.global-to-local, align 1
  %v9_e8d8 = icmp eq i32 %v5_e8d4, %v3_e8d0
  store i1 %v9_e8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e8d8, label %dec_label_pc_e8e0, label %dec_label_pc_e7d8

dec_label_pc_e8e0:                                ; preds = %dec_label_pc_e898
  %v0_e8e0 = load i32, i32* @r5, align 4
  %v2_e8e0 = icmp ugt i32 %v0_e8e0, 254
  store i1 %v2_e8e0, i1* %cpsr_c.global-to-local, align 1
  %v7_e8e0 = icmp eq i32 %v0_e8e0, 255
  store i1 %v7_e8e0, i1* %cpsr_z.global-to-local, align 1
  %v8_e8e4 = icmp sgt i32 %v0_e8e0, 255
  br i1 %v8_e8e4, label %dec_label_pc_e960, label %dec_label_pc_e8e8

dec_label_pc_e8e8:                                ; preds = %dec_label_pc_e8e0
  %v2_e8f0 = load i32, i32* @global_var_205bc.128, align 4
  store i32 %v2_e8f0, i32* %r1.global-to-local, align 4
  %v3_e8f4 = mul i32 %v0_e8e0, 256
  store i32 %v3_e8f4, i32* %r2.global-to-local, align 4
  %v2_e8f8 = mul i32 %v0_e8e0, 288
  store i32 %v2_e8f8, i32* %r3.global-to-local, align 4
  %v2_e8fc = add i32 %v2_e8f0, %v2_e8f8
  store i32 %v2_e8fc, i32* @r0, align 4
  %v1_e900 = add i32 %v2_e8fc, 12
  %v2_e900 = inttoptr i32 %v1_e900 to i32*
  %v3_e900 = load i32, i32* %v2_e900, align 4
  store i32 %v3_e900, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e904 = icmp eq i32 %v3_e900, 0
  store i1 %v2_e904, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e904, label %dec_label_pc_e948, label %dec_label_pc_e924.preheader

dec_label_pc_e924.preheader:                      ; preds = %dec_label_pc_e8e8
  %v2_e908 = add i32 %v0_e8e0, 1
  %v2_e910 = and i32 %v2_e908, 134217728
  %v3_e910 = icmp ne i32 %v2_e910, 0
  store i1 %v3_e910, i1* %cpsr_c.global-to-local, align 1
  %v3_e914 = mul i32 %v2_e908, 288
  %v3_e918 = add i32 %v2_e8f0, %v3_e914
  store i32 %v3_e918, i32* %r3.global-to-local, align 4
  store i32 %v0_e8e0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e924

dec_label_pc_e924:                                ; preds = %dec_label_pc_e924.preheader, %dec_label_pc_e930
  %v0_e930 = phi i32 [ %v3_e918, %dec_label_pc_e924.preheader ], [ %v1_e93c, %dec_label_pc_e930 ]
  %v0_e924 = phi i32 [ %v0_e8e0, %dec_label_pc_e924.preheader ], [ %v1_e924, %dec_label_pc_e930 ]
  %v1_e924 = add i32 %v0_e924, 1
  store i32 %v1_e924, i32* %r2.global-to-local, align 4
  %v7_e928 = icmp eq i32 %v1_e924, 256
  br i1 %v7_e928, label %dec_label_pc_e960.loopexit, label %dec_label_pc_e930

dec_label_pc_e930:                                ; preds = %dec_label_pc_e924
  store i32 %v0_e930, i32* @r0, align 4
  %v1_e934 = add i32 %v0_e930, 12
  %v2_e934 = inttoptr i32 %v1_e934 to i32*
  %v3_e934 = load i32, i32* %v2_e934, align 4
  %v2_e938 = icmp eq i32 %v3_e934, 0
  %v1_e93c = add i32 %v0_e930, 288
  store i32 %v1_e93c, i32* %r3.global-to-local, align 4
  br i1 %v2_e938, label %dec_label_pc_e944, label %dec_label_pc_e924

dec_label_pc_e944:                                ; preds = %dec_label_pc_e930
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e924, i32* @r5, align 4
  br label %dec_label_pc_e948

dec_label_pc_e948:                                ; preds = %dec_label_pc_e8e8, %dec_label_pc_e944
  %v1_e950 = phi i32 [ %v2_e8fc, %dec_label_pc_e8e8 ], [ %v0_e930, %dec_label_pc_e944 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e948 = icmp eq i32 %v1_e950, 0
  store i1 %v2_e948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e948, label %dec_label_pc_e960, label %dec_label_pc_e950

dec_label_pc_e950:                                ; preds = %dec_label_pc_e948
  %v2_e950 = add i32 %v1_e950, 16
  %v3_e950 = inttoptr i32 %v2_e950 to i32*
  store i32 %v3_e8d0, i32* %v3_e950, align 4
  %v0_e954 = load i32, i32* %ip.global-to-local, align 4
  %v1_e954 = trunc i32 %v0_e954 to i16
  %v2_e954 = load i32, i32* @r0, align 4
  %v3_e954 = add i32 %v2_e954, 20
  %v4_e954 = inttoptr i32 %v3_e954 to i16*
  store i16 %v1_e954, i16* %v4_e954, align 2
  %v0_e958 = call i32 @function_df84()
  store i32 %v0_e958, i32* %r0.global-to-local, align 4
  %v1_e7dc.pre.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_e7d8

dec_label_pc_e960.loopexit:                       ; preds = %dec_label_pc_e924
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e960

dec_label_pc_e960:                                ; preds = %dec_label_pc_e948, %dec_label_pc_e8e0, %dec_label_pc_e80c, %dec_label_pc_e7d8, %dec_label_pc_e960.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_e980511 = load i32, i32* @sp, align 4
  %v3_e980512 = add i32 %v2_e980511, 1676
  %v4_e980513 = inttoptr i32 %v3_e980512 to i32*
  store i32 0, i32* %v4_e980513, align 4
  br label %dec_label_pc_e96c.dec_label_pc_e96c_crit_edge

dec_label_pc_e96c.dec_label_pc_e96c_crit_edge:    ; preds = %dec_label_pc_e960, %dec_label_pc_e96c.dec_label_pc_e96c_crit_edge
  %v0_e96c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e970 = add i32 %v0_e96c.pre, 4
  store i32 %v1_e970, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e978 = add i32 %v0_e96c.pre, 1672
  store i32 %v1_e978, i32* %ip.global-to-local, align 4
  %v7_e97c = icmp eq i32 %v1_e970, 128
  %v2_e980 = load i32, i32* @sp, align 4
  %v3_e980 = add i32 %v2_e980, %v1_e978
  %v4_e980 = inttoptr i32 %v3_e980 to i32*
  store i32 0, i32* %v4_e980, align 4
  br i1 %v7_e97c, label %dec_label_pc_e988, label %dec_label_pc_e96c.dec_label_pc_e96c_crit_edge

dec_label_pc_e988:                                ; preds = %dec_label_pc_e96c.dec_label_pc_e96c_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e988 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e988, i32* %stack_var_-352, align 4
  %v1_e994514 = add i32 %v0_e988, 8
  store i32 %v1_e994514, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_e99c515 = add i32 %v0_e988, 1548
  store i32 %v1_e99c515, i32* @lr, align 4
  %v7_e9a0516 = icmp eq i32 %v1_e994514, 128
  %v2_e9a4517 = load i32, i32* @sp, align 4
  %v3_e9a4518 = add i32 %v2_e9a4517, %v1_e99c515
  %v4_e9a4519 = inttoptr i32 %v3_e9a4518 to i32*
  store i32 0, i32* %v4_e9a4519, align 4
  br i1 %v7_e9a0516, label %dec_label_pc_e9ac, label %dec_label_pc_e990.dec_label_pc_e990_crit_edge

dec_label_pc_e990.dec_label_pc_e990_crit_edge:    ; preds = %dec_label_pc_e988, %dec_label_pc_e990.dec_label_pc_e990_crit_edge
  %v0_e990.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_e994 = add i32 %v0_e990.pre, 4
  store i32 %v1_e994, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_e99c = add i32 %v0_e990.pre, 1544
  store i32 %v1_e99c, i32* @lr, align 4
  %v7_e9a0 = icmp eq i32 %v1_e994, 128
  %v2_e9a4 = load i32, i32* @sp, align 4
  %v3_e9a4 = add i32 %v2_e9a4, %v1_e99c
  %v4_e9a4 = inttoptr i32 %v3_e9a4 to i32*
  store i32 0, i32* %v4_e9a4, align 4
  br i1 %v7_e9a0, label %dec_label_pc_e9ac, label %dec_label_pc_e990.dec_label_pc_e990_crit_edge

dec_label_pc_e9ac:                                ; preds = %dec_label_pc_e990.dec_label_pc_e990_crit_edge, %dec_label_pc_e988
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e9ac = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e9ac, i32* @r6, align 4
  store i32 %v0_e9ac, i32* @r5, align 4
  store i32 %v0_e9ac, i32* %stack_var_-52, align 4
  br label %dec_label_pc_ea08

dec_label_pc_e9bc:                                ; preds = %dec_label_pc_ea38
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ea24, i1* %cpsr_z.global-to-local, align 1
  %v1_eaa8 = add i32 %v2_ea1c, 4
  %v2_eaa8 = inttoptr i32 %v1_eaa8 to i32*
  %v3_eaa8 = load i32, i32* %v2_eaa8, align 4
  br i1 %v7_ea24, label %dec_label_pc_eaa8, label %dec_label_pc_e9c4

dec_label_pc_e9c4:                                ; preds = %dec_label_pc_e9bc
  store i32 %v3_eaa8, i32* %ip.global-to-local, align 4
  %v3_e9c8 = udiv i32 %v3_eaa8, 32
  store i32 %v2_eab4, i32* %r0.global-to-local, align 4
  %v3_e9d0 = mul nuw nsw i32 %v3_e9c8, 4
  %v2_e9d4 = add i32 %v3_e9d0, %v2_eab4
  store i32 %v2_e9d4, i32* %r3.global-to-local, align 4
  %v1_e9d8 = add i32 %v2_e9d4, -184
  %v2_e9d8 = inttoptr i32 %v1_e9d8 to i32*
  %v3_e9d8 = load i32, i32* %v2_e9d8, align 4
  %v1_e9dc = urem i32 %v3_eaa8, 32
  store i32 %v1_e9dc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_e9e4 = shl i32 1, %v1_e9dc
  %v8_e9e4 = or i32 %v3_e9d8, %v7_e9e4
  store i32 %v8_e9e4, i32* %r2.global-to-local, align 4
  store i32 %v8_e9e4, i32* %v2_e9d8, align 4
  %v0_e9ec = load i32, i32* @r6, align 4
  %v1_e9ec = load i32, i32* %ip.global-to-local, align 4
  %v3_e9ec = icmp uge i32 %v0_e9ec, %v1_e9ec
  store i1 %v3_e9ec, i1* %cpsr_c.global-to-local, align 1
  %v9_e9ec = icmp eq i32 %v0_e9ec, %v1_e9ec
  store i1 %v9_e9ec, i1* %cpsr_z.global-to-local, align 1
  %v5_e9f0 = icmp slt i32 %v0_e9ec, %v1_e9ec
  br i1 %v5_e9f0, label %bb407, label %bb408

bb407:                                            ; preds = %dec_label_pc_e9c4
  store i32 %v1_e9ec, i32* @r6, align 4
  br label %bb408

bb408:                                            ; preds = %.thread75, %bb414, %bb412, %bb416, %dec_label_pc_ea9c, %dec_label_pc_e9c4, %bb407
  %v3_e9f4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_e9f4, i32* %r3.global-to-local, align 4
  %v1_e9f8 = add i32 %v3_e9f4, 1
  store i32 %v1_e9f8, i32* %r2.global-to-local, align 4
  %v2_e9fc = icmp ugt i32 %v1_e9f8, 254
  store i1 %v2_e9fc, i1* %cpsr_c.global-to-local, align 1
  %v7_e9fc = icmp eq i32 %v1_e9f8, 255
  store i1 %v7_e9fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e9f8, i32* %stack_var_-52, align 4
  %v8_ea04 = icmp sgt i32 %v1_e9f8, 255
  br i1 %v8_ea04, label %dec_label_pc_ead8, label %dec_label_pc_ea08

dec_label_pc_ea08:                                ; preds = %bb408, %dec_label_pc_e9ac
  %v0_ea14 = phi i32 [ %v1_e9f8, %bb408 ], [ %v0_e9ac, %dec_label_pc_e9ac ]
  store i32 ptrtoint (i32* @global_var_205bc.128 to i32), i32* %r0.global-to-local, align 4
  %v3_ea0c = mul i32 %v0_ea14, 256
  store i32 %v3_ea0c, i32* %r3.global-to-local, align 4
  %v2_ea10 = load i32, i32* @global_var_205bc.128, align 4
  store i32 %v2_ea10, i32* %r1.global-to-local, align 4
  %v2_ea18 = mul i32 %v0_ea14, 288
  store i32 %v2_ea18, i32* %r2.global-to-local, align 4
  %v2_ea1c = add i32 %v2_ea10, %v2_ea18
  store i32 %v2_ea1c, i32* @r4, align 4
  %v1_ea20 = add i32 %v2_ea1c, 12
  %v2_ea20 = inttoptr i32 %v1_ea20 to i32*
  %v3_ea20 = load i32, i32* %v2_ea20, align 4
  store i32 %v3_ea20, i32* %ip.global-to-local, align 4
  %v2_ea24 = icmp ne i32 %v3_ea20, 0
  store i1 %v2_ea24, i1* %cpsr_c.global-to-local, align 1
  %v7_ea24 = icmp eq i32 %v3_ea20, 1
  store i1 %v7_ea24, i1* %cpsr_z.global-to-local, align 1
  %v2_ea28 = xor i1 %v2_ea24, true
  %v3_ea28 = or i1 %v7_ea24, %v2_ea28
  br i1 %v3_ea28, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_ea08
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb410

bb410:                                            ; preds = %dec_label_pc_ea08, %bb409
  %v1_ea48215 = phi i32 [ %v2_ea10, %dec_label_pc_ea08 ], [ 5, %bb409 ]
  %v2_ea2c = xor i1 %v7_ea24, true
  %v3_ea2c = and i1 %v2_ea24, %v2_ea2c
  br i1 %v3_ea2c, label %bb411, label %bb412

bb411:                                            ; preds = %bb410
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb412

bb412:                                            ; preds = %bb410, %bb411
  %v1_ea48 = phi i32 [ %v1_ea48215, %bb410 ], [ 30, %bb411 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea30 = icmp eq i32 %v3_ea20, 0
  store i1 %v2_ea30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea30, label %bb408, label %dec_label_pc_ea38

dec_label_pc_ea38:                                ; preds = %bb412
  store i32 ptrtoint (i32* @global_var_1e56c.116 to i32), i32* %r2.global-to-local, align 4
  %v2_ea3c = load i32, i32* @global_var_1e56c.116, align 4
  store i32 %v2_ea3c, i32* %r3.global-to-local, align 4
  %v1_ea40 = add i32 %v2_ea1c, 8
  %v2_ea40 = inttoptr i32 %v1_ea40 to i32*
  %v3_ea40 = load i32, i32* %v2_ea40, align 4
  store i32 %v3_ea40, i32* %r2.global-to-local, align 4
  %v2_ea44 = sub i32 %v2_ea3c, %v3_ea40
  store i32 %v2_ea44, i32* %r3.global-to-local, align 4
  %v3_ea48 = icmp uge i32 %v2_ea44, %v1_ea48
  store i1 %v3_ea48, i1* %cpsr_c.global-to-local, align 1
  %v9_ea48 = icmp eq i32 %v2_ea44, %v1_ea48
  store i1 %v9_ea48, i1* %cpsr_z.global-to-local, align 1
  %v2_ea4c = xor i1 %v3_ea48, true
  %v3_ea4c = or i1 %v9_ea48, %v2_ea4c
  br i1 %v3_ea4c, label %dec_label_pc_e9bc, label %dec_label_pc_ea50

dec_label_pc_ea50:                                ; preds = %dec_label_pc_ea38
  %v1_ea50 = add i32 %v2_ea1c, 4
  %v2_ea50 = inttoptr i32 %v1_ea50 to i32*
  %v3_ea50 = load i32, i32* %v2_ea50, align 4
  store i32 %v3_ea50, i32* %r0.global-to-local, align 4
  %v1_ea54 = call i32 @function_109c0(i32 %v3_ea50)
  store i32 %v1_ea54, i32* %r0.global-to-local, align 4
  %v0_ea58 = load i32, i32* @r4, align 4
  %v1_ea58 = add i32 %v0_ea58, 12
  %v2_ea58 = inttoptr i32 %v1_ea58 to i32*
  %v3_ea58 = load i32, i32* %v2_ea58, align 4
  store i32 %v3_ea58, i32* %r3.global-to-local, align 4
  %v2_ea5c = icmp ugt i32 %v3_ea58, 1
  store i1 %v2_ea5c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea5c = icmp eq i32 %v3_ea58, 2
  store i1 %v7_ea5c, i1* %cpsr_z.global-to-local, align 1
  %v2_ea60 = xor i1 %v2_ea5c, true
  %v3_ea60 = or i1 %v7_ea5c, %v2_ea60
  br i1 %v3_ea60, label %bb413, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_ea50
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ea68298302 = add i32 %v0_ea58, 4
  %v3_ea68299303 = inttoptr i32 %v2_ea68298302 to i32*
  store i32 -1, i32* %v3_ea68299303, align 4
  br label %bb414

bb413:                                            ; preds = %dec_label_pc_ea50
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ea68295 = add i32 %v0_ea58, 4
  %v3_ea68296 = inttoptr i32 %v2_ea68295 to i32*
  store i32 -1, i32* %v3_ea68296, align 4
  %v4_ea6c = load i32, i32* %r3.global-to-local, align 4
  %v5_ea6c = load i32, i32* @r4, align 4
  %v6_ea6c = add i32 %v5_ea6c, 12
  %v7_ea6c = inttoptr i32 %v6_ea6c to i32*
  store i32 %v4_ea6c, i32* %v7_ea6c, align 4
  %v4_ea70 = load i32, i32* %r3.global-to-local, align 4
  %v5_ea70 = trunc i32 %v4_ea70 to i8
  %v6_ea70 = load i32, i32* @r4, align 4
  %v7_ea70 = add i32 %v6_ea70, 284
  %v8_ea70 = inttoptr i32 %v7_ea70 to i8*
  store i8 %v5_ea70, i8* %v8_ea70, align 1
  %v0_ea74.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ea74.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb414

bb414:                                            ; preds = %.thread301, %bb413
  %v1_ea74 = phi i1 [ %v1_ea74.pre, %bb413 ], [ %v2_ea5c, %.thread301 ]
  %v0_ea74 = phi i1 [ %v0_ea74.pre, %bb413 ], [ false, %.thread301 ]
  %v2_ea74 = xor i1 %v1_ea74, true
  %v3_ea74 = or i1 %v0_ea74, %v2_ea74
  br i1 %v3_ea74, label %bb408, label %dec_label_pc_ea78

dec_label_pc_ea78:                                ; preds = %bb414
  %v0_ea78 = load i32, i32* @r4, align 4
  %v1_ea78 = add i32 %v0_ea78, 284
  %v2_ea78 = inttoptr i32 %v1_ea78 to i8*
  %v3_ea78 = load i8, i8* %v2_ea78, align 1
  %v4_ea78 = zext i8 %v3_ea78 to i32
  %v1_ea7c = add nuw nsw i32 %v4_ea78, 1
  %v1_ea80 = urem i32 %v1_ea7c, 256
  store i32 %v1_ea80, i32* %r3.global-to-local, align 4
  %v2_ea84 = icmp ugt i32 %v1_ea80, 9
  store i1 %v2_ea84, i1* %cpsr_c.global-to-local, align 1
  %v7_ea84 = icmp eq i32 %v1_ea80, 10
  store i1 %v7_ea84, i1* %cpsr_z.global-to-local, align 1
  %v1_ea88 = trunc i32 %v1_ea7c to i8
  store i8 %v1_ea88, i8* %v2_ea78, align 1
  %v0_ea8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ea8c, label %.thread75, label %dec_label_pc_ea9c

.thread75:                                        ; preds = %dec_label_pc_ea78
  %v1_ea8c = load i32, i32* %r3.global-to-local, align 4
  %v2_ea8c = add i32 %v1_ea8c, -10
  store i32 %v2_ea8c, i32* %r3.global-to-local, align 4
  %v2_ea90 = load i32, i32* @r4, align 4
  %v3_ea90 = add i32 %v2_ea90, 12
  %v4_ea90 = inttoptr i32 %v3_ea90 to i32*
  store i32 %v2_ea8c, i32* %v4_ea90, align 4
  %v1_ea94 = load i32, i32* %r3.global-to-local, align 4
  %v2_ea94 = trunc i32 %v1_ea94 to i8
  %v3_ea94 = load i32, i32* @r4, align 4
  %v4_ea94 = add i32 %v3_ea94, 284
  %v5_ea94 = inttoptr i32 %v4_ea94 to i8*
  store i8 %v2_ea94, i8* %v5_ea94, align 1
  %v0_ea98.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ea98.pr.pr, label %bb408, label %dec_label_pc_ea9c

dec_label_pc_ea9c:                                ; preds = %dec_label_pc_ea78, %.thread75
  %v0_ea9c = load i32, i32* @r4, align 4
  store i32 %v0_ea9c, i32* @r0, align 4
  %v0_eaa0 = call i32 @function_df84()
  store i32 %v0_eaa0, i32* %r0.global-to-local, align 4
  br label %bb408

dec_label_pc_eaa8:                                ; preds = %dec_label_pc_e9bc
  store i32 %v3_eaa8, i32* %r0.global-to-local, align 4
  %v3_eaac = udiv i32 %v3_eaa8, 32
  %v3_eab0 = mul nuw nsw i32 %v3_eaac, 4
  store i32 %v2_eab4, i32* @lr, align 4
  %v2_eab8 = add i32 %v3_eab0, %v2_eab4
  store i32 %v2_eab8, i32* %r3.global-to-local, align 4
  %v1_eabc = add i32 %v2_eab8, -312
  %v2_eabc = inttoptr i32 %v1_eabc to i32*
  %v3_eabc = load i32, i32* %v2_eabc, align 4
  %v1_eac0 = urem i32 %v3_eaa8, 32
  store i32 %v1_eac0, i32* %r1.global-to-local, align 4
  %v7_eac4 = shl i32 1, %v1_eac0
  %v8_eac4 = or i32 %v3_eabc, %v7_eac4
  store i32 %v8_eac4, i32* %r2.global-to-local, align 4
  %v0_eac8 = load i32, i32* @r5, align 4
  %v3_eac8 = icmp uge i32 %v0_eac8, %v3_eaa8
  store i1 %v3_eac8, i1* %cpsr_c.global-to-local, align 1
  %v9_eac8 = icmp eq i32 %v0_eac8, %v3_eaa8
  store i1 %v9_eac8, i1* %cpsr_z.global-to-local, align 1
  %v5_eacc = icmp slt i32 %v0_eac8, %v3_eaa8
  br i1 %v5_eacc, label %bb415, label %bb416

bb415:                                            ; preds = %dec_label_pc_eaa8
  store i32 %v3_eaa8, i32* @r5, align 4
  br label %bb416

bb416:                                            ; preds = %dec_label_pc_eaa8, %bb415
  store i32 %v8_eac4, i32* %v2_eabc, align 4
  br label %bb408

dec_label_pc_ead8:                                ; preds = %bb408
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_eae4 = load i32, i32* @r5, align 4
  %v1_eae4 = load i32, i32* @r6, align 4
  %v3_eae4 = icmp uge i32 %v0_eae4, %v1_eae4
  store i1 %v3_eae4, i1* %cpsr_c.global-to-local, align 1
  %v9_eae4 = icmp eq i32 %v0_eae4, %v1_eae4
  store i1 %v9_eae4, i1* %cpsr_z.global-to-local, align 1
  %v5_eae8 = icmp slt i32 %v0_eae4, %v1_eae4
  %storemerge155 = select i1 %v5_eae8, i32 %v1_eae4, i32 %v0_eae4
  store i32 %v2_eafc, i32* %ip.global-to-local, align 4
  store i32 %v2_eb00, i32* %r1.global-to-local, align 4
  store i32 %v2_eb04, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_eb0c = add i32 %storemerge155, 1
  store i32 %v1_eb0c, i32* %r0.global-to-local, align 4
  %v5_eb18 = call i32 @function_106e4(i32 %v1_eb0c, i32 %v2_eb00, i32 %v2_eb04, i32 0, i32 %v2_eafc)
  %v0_eb1c = load i32, i32* @r4, align 4
  store i32 %v0_eb1c, i32* %r0.global-to-local, align 4
  %v1_eb20 = inttoptr i32 %v0_eb1c to i32*
  %v2_eb20 = call i32 @function_10640(i32* %v1_eb20)
  store i32 %v2_eb20, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e56c.116 to i32), i32* @lr, align 4
  %v0_eb28 = load i32, i32* @r4, align 4
  store i32 %v0_eb28, i32* %stack_var_-52, align 4
  store i32 %v2_eb20, i32* @global_var_1e56c.116, align 4
  br label %dec_label_pc_eb30

dec_label_pc_eb30:                                ; preds = %dec_label_pc_ec98, %dec_label_pc_ead8
  %v0_eb3c = phi i32 [ %v1_ec9c, %dec_label_pc_ec98 ], [ %v0_eb28, %dec_label_pc_ead8 ]
  store i32 ptrtoint (i32* @global_var_205bc.128 to i32), i32* %r0.global-to-local, align 4
  %v3_eb34 = mul i32 %v0_eb3c, 256
  store i32 %v3_eb34, i32* %r3.global-to-local, align 4
  %v2_eb38 = load i32, i32* @global_var_205bc.128, align 4
  store i32 %v2_eb38, i32* %r1.global-to-local, align 4
  %v2_eb40 = mul i32 %v0_eb3c, 288
  store i32 %v2_eb40, i32* %r2.global-to-local, align 4
  %v2_eb44 = add i32 %v2_eb38, %v2_eb40
  store i32 %v2_eb44, i32* @r6, align 4
  %v1_eb48 = add i32 %v2_eb44, 4
  %v2_eb48 = inttoptr i32 %v1_eb48 to i32*
  %v3_eb48 = load i32, i32* %v2_eb48, align 4
  store i32 %v3_eb48, i32* %r0.global-to-local, align 4
  %v2_eb4c = icmp eq i32 %v3_eb48, -1
  store i1 %v2_eb4c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb4c = icmp eq i32 %v3_eb48, -1
  store i1 %v7_eb4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb4c, label %dec_label_pc_ec98, label %dec_label_pc_eb54

dec_label_pc_eb54:                                ; preds = %dec_label_pc_eb30
  %v3_eb54 = udiv i32 %v3_eb48, 32
  store i32 %v2_eab4, i32* %r1.global-to-local, align 4
  %v3_eb5c = mul nuw nsw i32 %v3_eb54, 4
  store i32 %v3_eb5c, i32* @ip, align 4
  %v2_eb60 = add i32 %v3_eb5c, %v2_eab4
  store i32 %v2_eb60, i32* %r2.global-to-local, align 4
  %v1_eb64 = add i32 %v2_eb60, -312
  %v2_eb64 = inttoptr i32 %v1_eb64 to i32*
  %v3_eb64 = load i32, i32* %v2_eb64, align 4
  %v1_eb68 = urem i32 %v3_eb48, 32
  store i32 %v1_eb68, i32* %r1.global-to-local, align 4
  %v2_eb6c = add nsw i32 %v1_eb68, -1
  %v3_eb6c = shl i32 1, %v2_eb6c
  %v4_eb6c = and i32 %v3_eb64, %v3_eb6c
  %v5_eb6c = icmp ne i32 %v4_eb6c, 0
  store i1 %v5_eb6c, i1* %cpsr_c.global-to-local, align 1
  %v6_eb6c = lshr i32 %v3_eb64, %v1_eb68
  store i32 %v6_eb6c, i32* %r3.global-to-local, align 4
  %v1_eb70 = urem i32 %v6_eb6c, 2
  %v2_eb70 = icmp eq i32 %v1_eb70, 0
  store i1 %v2_eb70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb70, label %dec_label_pc_eb78, label %dec_label_pc_f6a0

dec_label_pc_eb78:                                ; preds = %dec_label_pc_eb54, %dec_label_pc_f74c
  %v1_eb84 = phi i32 [ %v1_eb68, %dec_label_pc_eb54 ], [ %v1_eb84.pre, %dec_label_pc_f74c ]
  %v0_eb7c = phi i32 [ %v3_eb5c, %dec_label_pc_eb54 ], [ %v0_eb7c.pre, %dec_label_pc_f74c ]
  store i32 %v2_eab4, i32* @lr, align 4
  %v2_eb7c = add i32 %v0_eb7c, %v2_eab4
  store i32 %v2_eb7c, i32* %r2.global-to-local, align 4
  %v1_eb80 = add i32 %v2_eb7c, -184
  %v2_eb80 = inttoptr i32 %v1_eb80 to i32*
  %v3_eb80 = load i32, i32* %v2_eb80, align 4
  %v2_eb84 = add i32 %v1_eb84, -1
  %v3_eb84 = shl i32 1, %v2_eb84
  %v4_eb84 = and i32 %v3_eb80, %v3_eb84
  %v5_eb84 = icmp ne i32 %v4_eb84, 0
  store i1 %v5_eb84, i1* %cpsr_c.global-to-local, align 1
  %v6_eb84 = lshr i32 %v3_eb80, %v1_eb84
  store i32 %v6_eb84, i32* %r3.global-to-local, align 4
  %v1_eb88 = urem i32 %v6_eb84, 2
  %v2_eb88 = icmp eq i32 %v1_eb88, 0
  store i1 %v2_eb88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb88, label %dec_label_pc_ec98, label %dec_label_pc_eb90.preheader

dec_label_pc_eb90.preheader:                      ; preds = %dec_label_pc_eb78
  %v0_eb90176 = load i32, i32* @r6, align 4
  %v1_eb90177 = add i32 %v0_eb90176, 12
  %v2_eb90178 = inttoptr i32 %v1_eb90177 to i32*
  %v3_eb90179 = load i32, i32* %v2_eb90178, align 4
  store i32 %v3_eb90179, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb94175181 = icmp eq i32 %v3_eb90179, 0
  store i1 %v2_eb94175181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb94175181, label %dec_label_pc_ec98, label %dec_label_pc_eb9c.lr.ph

dec_label_pc_eb90.loopexit:                       ; preds = %dec_label_pc_f5a4, %dec_label_pc_f3a8
  %v0_eb90 = load i32, i32* @r6, align 4
  %v1_eb90 = add i32 %v0_eb90, 12
  %v2_eb90 = inttoptr i32 %v1_eb90 to i32*
  %v3_eb90 = load i32, i32* %v2_eb90, align 4
  store i32 %v3_eb90, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb94175 = icmp eq i32 %v3_eb90, 0
  store i1 %v2_eb94175, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb94175, label %dec_label_pc_ec98, label %dec_label_pc_eb9c.lr.ph

dec_label_pc_eb9c.lr.ph:                          ; preds = %dec_label_pc_eb90.preheader, %dec_label_pc_eb90.loopexit
  %v0_eb9c231 = phi i32 [ %v0_eb90, %dec_label_pc_eb90.loopexit ], [ %v0_eb90176, %dec_label_pc_eb90.preheader ]
  br label %dec_label_pc_eb9c

dec_label_pc_eb9c:                                ; preds = %dec_label_pc_eb94.backedge.thread, %dec_label_pc_eb94.backedge, %dec_label_pc_eb94.backedge.thread559, %dec_label_pc_eb9c.lr.ph
  %v0_f670 = phi i32 [ %v0_eb9c231, %dec_label_pc_eb9c.lr.ph ], [ %v0_eb9c228, %dec_label_pc_eb94.backedge ], [ %v0_ec10, %dec_label_pc_eb94.backedge.thread ], [ %v0_ec10, %dec_label_pc_eb94.backedge.thread559 ]
  %v1_eb9c = add i32 %v0_f670, 24
  %v2_eb9c = inttoptr i32 %v1_eb9c to i32*
  %v3_eb9c = load i32, i32* %v2_eb9c, align 4
  store i32 %v3_eb9c, i32* @r3, align 4
  %v2_eba0 = icmp ugt i32 %v3_eb9c, 255
  store i1 %v2_eba0, i1* %cpsr_c.global-to-local, align 1
  %v7_eba0 = icmp eq i32 %v3_eb9c, 256
  store i1 %v7_eba0, i1* %cpsr_z.global-to-local, align 1
  %.pre282 = add i32 %v0_f670, 28
  store i32 %.pre282, i32* %sb.global-to-local, align 4
  br i1 %v7_eba0, label %dec_label_pc_f670, label %dec_label_pc_ebac

dec_label_pc_ebac:                                ; preds = %dec_label_pc_eb9c, %dec_label_pc_f670
  store i32 0, i32* @r5, align 4
  %v1_ebb0 = load i32, i32* %fp.global-to-local, align 4
  %v2_ebb0 = inttoptr i32 %v1_ebb0 to i32*
  store i32 0, i32* %v2_ebb0, align 4
  %v0_ebb4 = load i32, i32* @r6, align 4
  %v1_ebb4 = add i32 %v0_ebb4, 24
  %v2_ebb4 = inttoptr i32 %v1_ebb4 to i32*
  %v3_ebb4 = load i32, i32* %v2_ebb4, align 4
  store i32 %v3_ebb4, i32* %r2.global-to-local, align 4
  %v0_ebb8 = load i32, i32* %sb.global-to-local, align 4
  %v2_ebb8 = add i32 %v0_ebb8, %v3_ebb4
  store i32 %v2_ebb8, i32* @r4, align 4
  %v1_ebbc = add i32 %v0_ebb4, 4
  %v2_ebbc = inttoptr i32 %v1_ebbc to i32*
  %v3_ebbc = load i32, i32* %v2_ebbc, align 4
  store i32 %v3_ebbc, i32* %r0.global-to-local, align 4
  %v1_ebc0 = sub i32 256, %v3_ebb4
  store i32 %v1_ebc0, i32* %r2.global-to-local, align 4
  store i32 %v2_ebb8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ebcc = call i32 @function_11038(i32 %v3_ebbc, i32 %v2_ebb8, i32 %v1_ebc0, i32 16384)
  store i32 %v4_ebcc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebd0 = icmp eq i32 %v4_ebcc, 0
  store i1 %v2_ebd0, i1* %cpsr_z.global-to-local, align 1
  %tmp417 = icmp slt i32 %v4_ebcc, 1
  br i1 %tmp417, label %dec_label_pc_ec48, label %dec_label_pc_ebd8

dec_label_pc_ebd8:                                ; preds = %dec_label_pc_ebac
  %v0_ebd8 = load i32, i32* @r5, align 4
  store i32 %v0_ebd8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ebdc

dec_label_pc_ebdc:                                ; preds = %.thread82, %dec_label_pc_ebd8
  %v3_ebe8 = phi i32 [ %v1_ebec, %.thread82 ], [ %v0_ebd8, %dec_label_pc_ebd8 ]
  %v1_ebdc = load i32, i32* @r4, align 4
  %v2_ebdc = add i32 %v1_ebdc, %v3_ebe8
  %v3_ebdc = inttoptr i32 %v2_ebdc to i8*
  %v4_ebdc = load i8, i8* %v3_ebdc, align 1
  %v6_ebdc = zext i8 %v4_ebdc to i32
  store i32 %v6_ebdc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebe0 = icmp eq i8 %v4_ebdc, 0
  store i1 %v2_ebe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebe0, label %bb418, label %.thread82

bb418:                                            ; preds = %dec_label_pc_ebdc
  %v2_ebe4 = add nuw nsw i32 %v6_ebdc, 65
  store i32 %v2_ebe4, i32* %r3.global-to-local, align 4
  %v2_ebe8 = trunc i32 %v2_ebe4 to i8
  store i8 %v2_ebe8, i8* %v3_ebdc, align 1
  %v0_ebec.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread82

.thread82:                                        ; preds = %dec_label_pc_ebdc, %bb418
  %v0_ebec = phi i32 [ %v3_ebe8, %dec_label_pc_ebdc ], [ %v0_ebec.pre, %bb418 ]
  %v1_ebec = add i32 %v0_ebec, 1
  store i32 %v1_ebec, i32* %r2.global-to-local, align 4
  %v3_ebf0 = icmp uge i32 %v1_ebec, %v4_ebcc
  store i1 %v3_ebf0, i1* %cpsr_c.global-to-local, align 1
  %v9_ebf0 = icmp eq i32 %v1_ebec, %v4_ebcc
  store i1 %v9_ebf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebf0, label %dec_label_pc_ebf8, label %dec_label_pc_ebdc

dec_label_pc_ebf8:                                ; preds = %.thread82, %dec_label_pc_ec4c
  store i32 ptrtoint (i32* @global_var_1e56c.116 to i32), i32* %r1.global-to-local, align 4
  %v0_ebfc = load i32, i32* @r6, align 4
  %v1_ebfc = add i32 %v0_ebfc, 24
  %v2_ebfc = inttoptr i32 %v1_ebfc to i32*
  %v3_ebfc = load i32, i32* %v2_ebfc, align 4
  %v2_ec00 = load i32, i32* @global_var_1e56c.116, align 4
  store i32 %v2_ec00, i32* %r2.global-to-local, align 4
  %v2_ec04 = add i32 %v3_ebfc, %v4_ebcc
  store i32 %v2_ec04, i32* %r3.global-to-local, align 4
  store i32 %v2_ec04, i32* %v2_ebfc, align 4
  %v0_ec0c = load i32, i32* %r2.global-to-local, align 4
  %v1_ec0c = load i32, i32* @r6, align 4
  %v2_ec0c = add i32 %v1_ec0c, 8
  %v3_ec0c = inttoptr i32 %v2_ec0c to i32*
  store i32 %v0_ec0c, i32* %v3_ec0c, align 4
  br label %dec_label_pc_ec10

dec_label_pc_ec10:                                ; preds = %dec_label_pc_ed2c, %dec_label_pc_ebf8
  %v0_ec10 = load i32, i32* @r6, align 4
  %v1_ec10 = add i32 %v0_ec10, 12
  %v2_ec10 = inttoptr i32 %v1_ec10 to i32*
  %v3_ec10 = load i32, i32* %v2_ec10, align 4
  store i32 %v3_ec10, i32* %r0.global-to-local, align 4
  %v1_ec14 = add i32 %v3_ec10, -2
  store i32 %v1_ec14, i32* @r3, align 4
  %v7_ec18 = icmp eq i32 %v1_ec14, 8
  store i1 %v7_ec18, i1* %cpsr_z.global-to-local, align 1
  %v5_ec1c = and i32 %v1_ec14, 1073741824
  %v6_ec1c = icmp ne i32 %v5_ec1c, 0
  store i1 %v6_ec1c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_ec10, label %dec_label_pc_eb94.backedge [
    i32 2, label %dec_label_pc_eefc
    i32 3, label %dec_label_pc_f3b4
    i32 4, label %dec_label_pc_f2c0
    i32 5, label %dec_label_pc_f0a0
    i32 6, label %dec_label_pc_efcc
    i32 7, label %dec_label_pc_f1ec
    i32 8, label %dec_label_pc_ee28
    i32 9, label %dec_label_pc_ed54
    i32 10, label %dec_label_pc_ecb0
  ]

dec_label_pc_ec48:                                ; preds = %dec_label_pc_ebac
  br i1 %v2_ebd0, label %dec_label_pc_f7a0, label %dec_label_pc_ec4c

dec_label_pc_ec4c:                                ; preds = %dec_label_pc_ec48
  %v3_ec4c = icmp eq i32 %v4_ebcc, -1
  store i1 %v3_ec4c, i1* %cpsr_c.global-to-local, align 1
  %v8_ec4c = icmp eq i32 %v4_ebcc, -1
  store i1 %v8_ec4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ec4c, label %dec_label_pc_ec54, label %dec_label_pc_ebf8

dec_label_pc_ec54:                                ; preds = %dec_label_pc_ec4c
  %v0_ec54 = load i32, i32* %fp.global-to-local, align 4
  %v1_ec54 = inttoptr i32 %v0_ec54 to i32*
  %v2_ec54 = load i32, i32* %v1_ec54, align 4
  store i32 %v2_ec54, i32* %r3.global-to-local, align 4
  %v2_ec58 = icmp ugt i32 %v2_ec54, 10
  store i1 %v2_ec58, i1* %cpsr_c.global-to-local, align 1
  %v7_ec58 = icmp eq i32 %v2_ec54, 11
  store i1 %v7_ec58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec58, label %dec_label_pc_ec98, label %dec_label_pc_ec60

dec_label_pc_ec60:                                ; preds = %dec_label_pc_ec54, %dec_label_pc_f7a0
  %v0_ec60 = load i32, i32* @r6, align 4
  %v1_ec60 = add i32 %v0_ec60, 4
  %v2_ec60 = inttoptr i32 %v1_ec60 to i32*
  %v3_ec60 = load i32, i32* %v2_ec60, align 4
  store i32 %v3_ec60, i32* %r0.global-to-local, align 4
  %v1_ec64 = call i32 @function_109c0(i32 %v3_ec60)
  store i32 %v1_ec64, i32* %r0.global-to-local, align 4
  %v0_ec68 = load i32, i32* @r6, align 4
  %v1_ec68 = add i32 %v0_ec68, 284
  %v2_ec68 = inttoptr i32 %v1_ec68 to i8*
  %v3_ec68 = load i8, i8* %v2_ec68, align 1
  %v4_ec68 = zext i8 %v3_ec68 to i32
  %v1_ec6c = add nuw nsw i32 %v4_ec68, 1
  %v1_ec70 = urem i32 %v1_ec6c, 256
  store i32 %v1_ec70, i32* %r3.global-to-local, align 4
  %v2_ec74 = icmp ugt i32 %v1_ec70, 8
  store i1 %v2_ec74, i1* %cpsr_c.global-to-local, align 1
  %v7_ec74 = icmp eq i32 %v1_ec70, 9
  store i1 %v7_ec74, i1* %cpsr_z.global-to-local, align 1
  %v1_ec78 = trunc i32 %v1_ec6c to i8
  store i8 %v1_ec78, i8* %v2_ec68, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_ec80 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_ec80 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_ec80 = xor i1 %v1_ec80, true
  %v3_ec80 = and i1 %v0_ec80, %v2_ec80
  br i1 %v3_ec80, label %bb419, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_ec60
  %v1_ec84309314 = load i32, i32* @r6, align 4
  %v2_ec84310315 = add i32 %v1_ec84309314, 4
  %v3_ec84311316 = inttoptr i32 %v2_ec84310315 to i32*
  store i32 -1, i32* %v3_ec84311316, align 4
  br label %bb420

bb419:                                            ; preds = %dec_label_pc_ec60
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ec84305 = load i32, i32* @r6, align 4
  %v2_ec84306 = add i32 %v1_ec84305, 4
  %v3_ec84307 = inttoptr i32 %v2_ec84306 to i32*
  store i32 -1, i32* %v3_ec84307, align 4
  %v4_ec88 = load i32, i32* %r3.global-to-local, align 4
  %v5_ec88 = load i32, i32* @r6, align 4
  %v6_ec88 = add i32 %v5_ec88, 12
  %v7_ec88 = inttoptr i32 %v6_ec88 to i32*
  store i32 %v4_ec88, i32* %v7_ec88, align 4
  %v4_ec8c = load i32, i32* %r3.global-to-local, align 4
  %v5_ec8c = trunc i32 %v4_ec8c to i8
  %v6_ec8c = load i32, i32* @r6, align 4
  %v7_ec8c = add i32 %v6_ec8c, 284
  %v8_ec8c = inttoptr i32 %v7_ec8c to i8*
  store i8 %v5_ec8c, i8* %v8_ec8c, align 1
  %v0_ec90.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ec90.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb420

bb420:                                            ; preds = %.thread313, %bb419
  %v1_ec94 = phi i1 [ %v1_ec90.pre, %bb419 ], [ %v0_ec80, %.thread313 ]
  %v0_ec94 = phi i1 [ %v0_ec90.pre, %bb419 ], [ %v1_ec80, %.thread313 ]
  %v2_ec90 = xor i1 %v1_ec94, true
  %v3_ec90 = or i1 %v0_ec94, %v2_ec90
  br i1 %v3_ec90, label %bb421, label %bb422

bb421:                                            ; preds = %bb420
  %v4_ec90 = load i32, i32* @r6, align 4
  store i32 %v4_ec90, i32* %r0.global-to-local, align 4
  br label %bb422

bb422:                                            ; preds = %bb420, %bb421
  store i32 60568, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_ec90, i32 ptrtoint (i32* @global_var_df84.180 to i32))
  br label %dec_label_pc_ec98

dec_label_pc_ec98:                                ; preds = %dec_label_pc_eb90.loopexit, %dec_label_pc_eb94.backedge, %dec_label_pc_eb90.preheader, %dec_label_pc_ec54, %dec_label_pc_eb78, %dec_label_pc_eb30, %dec_label_pc_f784, %bb422
  %v3_ec98 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ec98, i32* %r3.global-to-local, align 4
  %v1_ec9c = add i32 %v3_ec98, 1
  store i32 %v1_ec9c, i32* @r4, align 4
  %v2_eca0 = icmp ugt i32 %v1_ec9c, 254
  store i1 %v2_eca0, i1* %cpsr_c.global-to-local, align 1
  %v7_eca0 = icmp eq i32 %v1_ec9c, 255
  store i1 %v7_eca0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ec9c, i32* %stack_var_-52, align 4
  %v7_eca8 = icmp slt i32 %v1_ec9c, 256
  br i1 %v7_eca8, label %dec_label_pc_eb30, label %dec_label_pc_e4b0

dec_label_pc_ecb0:                                ; preds = %dec_label_pc_ec10
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_ecb4 = call i32 @function_f9c0(i32 10)
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_ecc4 = call i32 @function_f8fc(i32 10, i32* nonnull %stack_var_-60)
  %v3_ecc8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ecc4, i32* %r2.global-to-local, align 4
  %v1_ecd0 = add i32 %v3_ecc8, -1
  store i32 %v1_ecd0, i32* %r3.global-to-local, align 4
  %v0_ecd4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ecd4, i32* %r0.global-to-local, align 4
  %v0_ecd8 = load i32, i32* @r6, align 4
  %v1_ecd8 = add i32 %v0_ecd8, 24
  %v2_ecd8 = inttoptr i32 %v1_ecd8 to i32*
  %v3_ecd8 = load i32, i32* %v2_ecd8, align 4
  store i32 %v3_ecd8, i32* %r1.global-to-local, align 4
  %v4_ecdc = call i32 @function_ffb8(i32 %v0_ecd4, i32 %v3_ecd8, i32 %v3_ecc4, i32 %v1_ecd0)
  %v2_ece0 = icmp eq i32 %v4_ecdc, -1
  store i1 %v2_ece0, i1* %cpsr_c.global-to-local, align 1
  %v7_ece0 = icmp eq i32 %v4_ecdc, -1
  store i1 %v7_ece0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_ecdc, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f5a8 = call i32 @function_f920(i32 10)
  br i1 %v7_ece0, label %dec_label_pc_f5a4, label %dec_label_pc_ecec

dec_label_pc_ecec:                                ; preds = %dec_label_pc_ecb0
  store i32 %v1_f5a8, i32* %r0.global-to-local, align 4
  %v0_ecf4 = load i32, i32* @r6, align 4
  %v1_ecf4 = add i32 %v0_ecf4, 4
  %v2_ecf4 = inttoptr i32 %v1_ecf4 to i32*
  %v3_ecf4 = load i32, i32* %v2_ecf4, align 4
  store i32 %v3_ecf4, i32* %r0.global-to-local, align 4
  %v1_ecf8 = call i32 @function_109c0(i32 %v3_ecf4)
  store i32 %v1_ecf8, i32* %r0.global-to-local, align 4
  %v0_ecfc = load i32, i32* @r6, align 4
  %v1_ecfc = add i32 %v0_ecfc, 284
  %v2_ecfc = inttoptr i32 %v1_ecfc to i8*
  %v3_ecfc = load i8, i8* %v2_ecfc, align 1
  %v4_ecfc = zext i8 %v3_ecfc to i32
  %v1_ed00 = add nuw nsw i32 %v4_ecfc, 1
  %v1_ed04 = urem i32 %v1_ed00, 256
  store i32 %v1_ed04, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ed0c = icmp ugt i32 %v1_ed04, 9
  store i1 %v2_ed0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed0c = icmp eq i32 %v1_ed04, 10
  store i1 %v7_ed0c, i1* %cpsr_z.global-to-local, align 1
  %v2_ed10 = add i32 %v0_ecfc, 4
  %v3_ed10 = inttoptr i32 %v2_ed10 to i32*
  store i32 -1, i32* %v3_ed10, align 4
  %v0_ed14 = load i32, i32* @r3, align 4
  %v1_ed14 = trunc i32 %v0_ed14 to i8
  %v2_ed14 = load i32, i32* @r6, align 4
  %v3_ed14 = add i32 %v2_ed14, 284
  %v4_ed14 = inttoptr i32 %v3_ed14 to i8*
  store i8 %v1_ed14, i8* %v4_ed14, align 1
  %v0_ed18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ed18, label %dec_label_pc_ed1c, label %dec_label_pc_f694

dec_label_pc_ed1c:                                ; preds = %dec_label_pc_ecec
  store i32 0, i32* @r3, align 4
  %v1_ed20 = load i32, i32* @r6, align 4
  %v2_ed20 = add i32 %v1_ed20, 12
  %v3_ed20 = inttoptr i32 %v2_ed20 to i32*
  store i32 0, i32* %v3_ed20, align 4
  %v0_ed24 = load i32, i32* @r3, align 4
  %v1_ed24 = trunc i32 %v0_ed24 to i8
  %v2_ed24 = load i32, i32* @r6, align 4
  %v3_ed24 = add i32 %v2_ed24, 284
  %v4_ed24 = inttoptr i32 %v3_ed24 to i8*
  store i8 %v1_ed24, i8* %v4_ed24, align 1
  br label %dec_label_pc_ed28

dec_label_pc_ed28:                                ; preds = %dec_label_pc_f694, %dec_label_pc_ed1c
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_ed2c

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_f3a8, %dec_label_pc_f268, %dec_label_pc_f11c, %dec_label_pc_f048, %dec_label_pc_eea4, %dec_label_pc_edd0, %dec_label_pc_ed28
  %v0_ed2c = load i32, i32* @r6, align 4
  %v1_ed2c = add i32 %v0_ed2c, 24
  %v2_ed2c = inttoptr i32 %v1_ed2c to i32*
  %v3_ed2c = load i32, i32* %v2_ed2c, align 4
  %v0_ed30 = load i32, i32* @r7, align 4
  %v2_ed30 = sub i32 %v0_ed30, %v3_ed2c
  %v3_ed30 = icmp uge i32 %v0_ed30, %v3_ed2c
  store i1 %v3_ed30, i1* %cpsr_c.global-to-local, align 1
  %v4_ed30 = xor i32 %v0_ed30, %v3_ed2c
  %v5_ed30 = xor i32 %v2_ed30, %v0_ed30
  %v6_ed30 = and i32 %v5_ed30, %v4_ed30
  %v7_ed30 = icmp slt i32 %v6_ed30, 0
  %v8_ed30 = icmp slt i32 %v2_ed30, 0
  %v9_ed30 = icmp eq i32 %v0_ed30, %v3_ed2c
  store i1 %v9_ed30, i1* %cpsr_z.global-to-local, align 1
  %v2_ed34 = xor i1 %v8_ed30, %v7_ed30
  %v0_ed30.v3_ed2c = select i1 %v2_ed34, i32 %v0_ed30, i32 %v3_ed2c
  store i32 %v0_ed30.v3_ed2c, i32* %r1.global-to-local, align 4
  %v2_ed3c = sub i32 %v3_ed2c, %v0_ed30.v3_ed2c
  store i32 %v2_ed3c, i32* @r2, align 4
  store i32 %v2_ed3c, i32* %v2_ed2c, align 4
  %v0_ed44 = load i32, i32* %sb.global-to-local, align 4
  %v1_ed44 = load i32, i32* %r1.global-to-local, align 4
  %v2_ed44 = add i32 %v1_ed44, %v0_ed44
  store i32 %v2_ed44, i32* @r1, align 4
  store i32 %v0_ed44, i32* @r0, align 4
  %v3_ed4c = call i32 @function_10ee0(i32 %v0_ed44, i32 %v2_ed44, i32 %v2_ed3c)
  store i32 %v3_ed4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ec10

dec_label_pc_ed54:                                ; preds = %dec_label_pc_ec10
  %v1_ed54 = add i32 %v0_ec10, 24
  %v2_ed54 = inttoptr i32 %v1_ed54 to i32*
  %v3_ed54 = load i32, i32* %v2_ed54, align 4
  store i32 %v3_ed54, i32* %r2.global-to-local, align 4
  %v1_ed58 = add i32 %v3_ed54, -1
  store i32 %v1_ed58, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed5c = icmp eq i32 %v1_ed58, 0
  store i1 %v2_ed5c, i1* %cpsr_z.global-to-local, align 1
  %tmp425 = icmp slt i32 %v1_ed58, 1
  br i1 %tmp425, label %dec_label_pc_eb94.backedge.thread, label %dec_label_pc_ed64

dec_label_pc_ed64:                                ; preds = %dec_label_pc_ed54
  %v2_ed64 = add i32 %v1_ed58, %v0_ec10
  store i32 %v2_ed64, i32* %r3.global-to-local, align 4
  %v1_ed68 = add i32 %v2_ed64, 28
  %v2_ed68 = inttoptr i32 %v1_ed68 to i8*
  %v3_ed68 = load i8, i8* %v2_ed68, align 1
  %v4_ed68 = zext i8 %v3_ed68 to i32
  store i32 %v4_ed68, i32* %r3.global-to-local, align 4
  %v2_ed6c = icmp ugt i8 %v3_ed68, 61
  store i1 %v2_ed6c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed6c = icmp eq i8 %v3_ed68, 62
  store i1 %v7_ed6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed6c, label %dec_label_pc_edd0, label %bb426

bb426:                                            ; preds = %dec_label_pc_ed64
  %v3_ed70 = icmp ugt i8 %v3_ed68, 57
  store i1 %v3_ed70, i1* %cpsr_c.global-to-local, align 1
  %v8_ed70 = icmp eq i8 %v3_ed68, 58
  store i1 %v8_ed70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ed70, label %dec_label_pc_edd0, label %dec_label_pc_ed78

dec_label_pc_ed78:                                ; preds = %bb426
  %v2_ed78 = icmp ugt i8 %v3_ed68, 35
  store i1 %v2_ed78, i1* %cpsr_c.global-to-local, align 1
  %v7_ed78 = icmp eq i8 %v3_ed68, 36
  store i1 %v7_ed78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed78, label %dec_label_pc_edd0, label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %dec_label_pc_ed78
  %v2_ed80 = icmp ugt i8 %v3_ed68, 34
  store i1 %v2_ed80, i1* %cpsr_c.global-to-local, align 1
  %v7_ed80 = icmp eq i8 %v3_ed68, 35
  store i1 %v7_ed80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed80, label %dec_label_pc_edd0, label %dec_label_pc_ed88

dec_label_pc_ed88:                                ; preds = %dec_label_pc_ed80
  %v2_ed88 = icmp ugt i8 %v3_ed68, 36
  store i1 %v2_ed88, i1* %cpsr_c.global-to-local, align 1
  %v7_ed88 = icmp eq i8 %v3_ed68, 37
  store i1 %v7_ed88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed88, label %dec_label_pc_edd0, label %dec_label_pc_edb8.preheader

dec_label_pc_edb8.preheader:                      ; preds = %dec_label_pc_ed88
  %v3_ed8c = add i32 %v0_ec10, 28
  %v2_ed90 = add i32 %v3_ed8c, %v3_ed54
  store i32 %v2_ed90, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_edb8

dec_label_pc_ed9c:                                ; preds = %bb427
  %v2_ed9c = icmp ugt i8 %v3_edc0, 35
  store i1 %v2_ed9c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed9c = icmp eq i8 %v3_edc0, 36
  store i1 %v7_ed9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed9c, label %dec_label_pc_edd0, label %dec_label_pc_eda4

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ed9c
  %v2_eda4 = icmp ugt i8 %v3_edc0, 34
  store i1 %v2_eda4, i1* %cpsr_c.global-to-local, align 1
  %v7_eda4 = icmp eq i8 %v3_edc0, 35
  store i1 %v7_eda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eda4, label %dec_label_pc_edd0, label %dec_label_pc_edac

dec_label_pc_edac:                                ; preds = %dec_label_pc_eda4
  %v2_edac = icmp ugt i8 %v3_edc0, 36
  store i1 %v2_edac, i1* %cpsr_c.global-to-local, align 1
  %v7_edac = icmp eq i8 %v3_edc0, 37
  store i1 %v7_edac, i1* %cpsr_z.global-to-local, align 1
  %v1_edb0 = add i32 %v0_edb0, -1
  store i32 %v1_edb0, i32* %r3.global-to-local, align 4
  br i1 %v7_edac, label %dec_label_pc_edd0, label %dec_label_pc_edb8

dec_label_pc_edb8:                                ; preds = %dec_label_pc_edb8.preheader, %dec_label_pc_edac
  %v0_edb0 = phi i32 [ %v2_ed90, %dec_label_pc_edb8.preheader ], [ %v1_edb0, %dec_label_pc_edac ]
  %v0_edb8 = phi i32 [ %v1_ed58, %dec_label_pc_edb8.preheader ], [ %v1_edb8, %dec_label_pc_edac ]
  %v1_edb8 = add i32 %v0_edb8, -1
  store i32 %v1_edb8, i32* %r1.global-to-local, align 4
  %v2_edb8 = icmp ne i32 %v0_edb8, 0
  store i1 %v2_edb8, i1* %cpsr_c.global-to-local, align 1
  %v7_edb8 = icmp eq i32 %v0_edb8, 1
  store i1 %v7_edb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edb8, label %dec_label_pc_eb94.backedge.thread559, label %dec_label_pc_edc0

dec_label_pc_edc0:                                ; preds = %dec_label_pc_edb8
  %v1_edc0 = add i32 %v0_edb0, -2
  %v2_edc0 = inttoptr i32 %v1_edc0 to i8*
  %v3_edc0 = load i8, i8* %v2_edc0, align 1
  %v4_edc0 = zext i8 %v3_edc0 to i32
  store i32 %v4_edc0, i32* %r2.global-to-local, align 4
  %v2_edc4 = icmp ugt i8 %v3_edc0, 61
  store i1 %v2_edc4, i1* %cpsr_c.global-to-local, align 1
  %v7_edc4 = icmp eq i8 %v3_edc0, 62
  store i1 %v7_edc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edc4, label %dec_label_pc_edd0, label %bb427

bb427:                                            ; preds = %dec_label_pc_edc0
  %v3_edc8 = icmp ugt i8 %v3_edc0, 57
  store i1 %v3_edc8, i1* %cpsr_c.global-to-local, align 1
  %v8_edc8 = icmp eq i8 %v3_edc0, 58
  store i1 %v8_edc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_edc8, label %dec_label_pc_edd0, label %dec_label_pc_ed9c

dec_label_pc_edd0:                                ; preds = %dec_label_pc_edc0, %bb427, %dec_label_pc_edac, %dec_label_pc_eda4, %dec_label_pc_ed9c, %dec_label_pc_ed88, %dec_label_pc_ed64, %dec_label_pc_ed80, %dec_label_pc_ed78, %bb426
  %v0_edd4 = phi i32 [ %v1_ed58, %dec_label_pc_ed88 ], [ %v1_ed58, %dec_label_pc_ed64 ], [ %v1_ed58, %dec_label_pc_ed80 ], [ %v1_ed58, %dec_label_pc_ed78 ], [ %v1_ed58, %bb426 ], [ %v1_edb8, %dec_label_pc_ed9c ], [ %v1_edb8, %dec_label_pc_eda4 ], [ %v1_edb8, %dec_label_pc_edac ], [ %v1_edb8, %bb427 ], [ %v1_edb8, %dec_label_pc_edc0 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_edd4 = add i32 %v0_edd4, 1
  store i32 %v1_edd4, i32* @r7, align 4
  %v1_edd8 = call i32 @function_f9c0(i32 8)
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_ede8 = call i32 @function_f8fc(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_ede8, i32* %r0.global-to-local, align 4
  %v3_edec = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_edec, i32* %r2.global-to-local, align 4
  store i32 %v3_ede8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_edf8 = load i32, i32* @r6, align 4
  %v1_edf8 = add i32 %v0_edf8, 4
  %v2_edf8 = inttoptr i32 %v1_edf8 to i32*
  %v3_edf8 = load i32, i32* %v2_edf8, align 4
  store i32 %v3_edf8, i32* %r0.global-to-local, align 4
  %v4_edfc = call i32 @function_110ac(i32 %v3_edf8, i32 %v3_ede8, i32 %v3_edec, i32 16384)
  store i32 %v4_edfc, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ee0c = load i32, i32* @r6, align 4
  %v1_ee0c = add i32 %v0_ee0c, 4
  %v2_ee0c = inttoptr i32 %v1_ee0c to i32*
  %v3_ee0c = load i32, i32* %v2_ee0c, align 4
  store i32 %v3_ee0c, i32* %r0.global-to-local, align 4
  %v4_ee10 = call i32 @function_110ac(i32 %v3_ee0c, i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_ee18 = call i32 @function_f920(i32 8)
  store i32 %v1_ee18, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_ee20 = load i32, i32* @r6, align 4
  %v2_ee20 = add i32 %v1_ee20, 12
  %v3_ee20 = inttoptr i32 %v2_ee20 to i32*
  store i32 10, i32* %v3_ee20, align 4
  br label %dec_label_pc_ed2c

dec_label_pc_ee28:                                ; preds = %dec_label_pc_ec10
  %v1_ee28 = add i32 %v0_ec10, 24
  %v2_ee28 = inttoptr i32 %v1_ee28 to i32*
  %v3_ee28 = load i32, i32* %v2_ee28, align 4
  store i32 %v3_ee28, i32* %r2.global-to-local, align 4
  %v1_ee2c = add i32 %v3_ee28, -1
  store i32 %v1_ee2c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee30 = icmp eq i32 %v1_ee2c, 0
  store i1 %v2_ee30, i1* %cpsr_z.global-to-local, align 1
  %tmp428 = icmp slt i32 %v1_ee2c, 1
  br i1 %tmp428, label %dec_label_pc_eb94.backedge.thread, label %dec_label_pc_ee38

dec_label_pc_ee38:                                ; preds = %dec_label_pc_ee28
  %v2_ee38 = add i32 %v1_ee2c, %v0_ec10
  store i32 %v2_ee38, i32* %r3.global-to-local, align 4
  %v1_ee3c = add i32 %v2_ee38, 28
  %v2_ee3c = inttoptr i32 %v1_ee3c to i8*
  %v3_ee3c = load i8, i8* %v2_ee3c, align 1
  %v4_ee3c = zext i8 %v3_ee3c to i32
  store i32 %v4_ee3c, i32* %r3.global-to-local, align 4
  %v2_ee40 = icmp ugt i8 %v3_ee3c, 61
  store i1 %v2_ee40, i1* %cpsr_c.global-to-local, align 1
  %v7_ee40 = icmp eq i8 %v3_ee3c, 62
  store i1 %v7_ee40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee40, label %dec_label_pc_eea4, label %bb429

bb429:                                            ; preds = %dec_label_pc_ee38
  %v3_ee44 = icmp ugt i8 %v3_ee3c, 57
  store i1 %v3_ee44, i1* %cpsr_c.global-to-local, align 1
  %v8_ee44 = icmp eq i8 %v3_ee3c, 58
  store i1 %v8_ee44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee44, label %dec_label_pc_eea4, label %dec_label_pc_ee4c

dec_label_pc_ee4c:                                ; preds = %bb429
  %v2_ee4c = icmp ugt i8 %v3_ee3c, 35
  store i1 %v2_ee4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee4c = icmp eq i8 %v3_ee3c, 36
  store i1 %v7_ee4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee4c, label %dec_label_pc_eea4, label %dec_label_pc_ee54

dec_label_pc_ee54:                                ; preds = %dec_label_pc_ee4c
  %v2_ee54 = icmp ugt i8 %v3_ee3c, 34
  store i1 %v2_ee54, i1* %cpsr_c.global-to-local, align 1
  %v7_ee54 = icmp eq i8 %v3_ee3c, 35
  store i1 %v7_ee54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee54, label %dec_label_pc_eea4, label %dec_label_pc_ee5c

dec_label_pc_ee5c:                                ; preds = %dec_label_pc_ee54
  %v2_ee5c = icmp ugt i8 %v3_ee3c, 36
  store i1 %v2_ee5c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee5c = icmp eq i8 %v3_ee3c, 37
  store i1 %v7_ee5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee5c, label %dec_label_pc_eea4, label %dec_label_pc_ee8c.preheader

dec_label_pc_ee8c.preheader:                      ; preds = %dec_label_pc_ee5c
  %v3_ee60 = add i32 %v0_ec10, 28
  %v2_ee64 = add i32 %v3_ee60, %v3_ee28
  store i32 %v2_ee64, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ee8c

dec_label_pc_ee70:                                ; preds = %bb430
  %v2_ee70 = icmp ugt i8 %v3_ee94, 35
  store i1 %v2_ee70, i1* %cpsr_c.global-to-local, align 1
  %v7_ee70 = icmp eq i8 %v3_ee94, 36
  store i1 %v7_ee70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee70, label %dec_label_pc_eea4, label %dec_label_pc_ee78

dec_label_pc_ee78:                                ; preds = %dec_label_pc_ee70
  %v2_ee78 = icmp ugt i8 %v3_ee94, 34
  store i1 %v2_ee78, i1* %cpsr_c.global-to-local, align 1
  %v7_ee78 = icmp eq i8 %v3_ee94, 35
  store i1 %v7_ee78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee78, label %dec_label_pc_eea4, label %dec_label_pc_ee80

dec_label_pc_ee80:                                ; preds = %dec_label_pc_ee78
  %v2_ee80 = icmp ugt i8 %v3_ee94, 36
  store i1 %v2_ee80, i1* %cpsr_c.global-to-local, align 1
  %v7_ee80 = icmp eq i8 %v3_ee94, 37
  store i1 %v7_ee80, i1* %cpsr_z.global-to-local, align 1
  %v1_ee84 = add i32 %v0_ee84, -1
  store i32 %v1_ee84, i32* %r3.global-to-local, align 4
  br i1 %v7_ee80, label %dec_label_pc_eea4, label %dec_label_pc_ee8c

dec_label_pc_ee8c:                                ; preds = %dec_label_pc_ee8c.preheader, %dec_label_pc_ee80
  %v0_ee84 = phi i32 [ %v2_ee64, %dec_label_pc_ee8c.preheader ], [ %v1_ee84, %dec_label_pc_ee80 ]
  %v0_ee8c = phi i32 [ %v1_ee2c, %dec_label_pc_ee8c.preheader ], [ %v1_ee8c, %dec_label_pc_ee80 ]
  %v1_ee8c = add i32 %v0_ee8c, -1
  store i32 %v1_ee8c, i32* %r1.global-to-local, align 4
  %v2_ee8c = icmp ne i32 %v0_ee8c, 0
  store i1 %v2_ee8c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee8c = icmp eq i32 %v0_ee8c, 1
  store i1 %v7_ee8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee8c, label %dec_label_pc_eb94.backedge.thread559, label %dec_label_pc_ee94

dec_label_pc_ee94:                                ; preds = %dec_label_pc_ee8c
  %v1_ee94 = add i32 %v0_ee84, -2
  %v2_ee94 = inttoptr i32 %v1_ee94 to i8*
  %v3_ee94 = load i8, i8* %v2_ee94, align 1
  %v4_ee94 = zext i8 %v3_ee94 to i32
  store i32 %v4_ee94, i32* %r2.global-to-local, align 4
  %v2_ee98 = icmp ugt i8 %v3_ee94, 61
  store i1 %v2_ee98, i1* %cpsr_c.global-to-local, align 1
  %v7_ee98 = icmp eq i8 %v3_ee94, 62
  store i1 %v7_ee98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee98, label %dec_label_pc_eea4, label %bb430

bb430:                                            ; preds = %dec_label_pc_ee94
  %v3_ee9c = icmp ugt i8 %v3_ee94, 57
  store i1 %v3_ee9c, i1* %cpsr_c.global-to-local, align 1
  %v8_ee9c = icmp eq i8 %v3_ee94, 58
  store i1 %v8_ee9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee9c, label %dec_label_pc_eea4, label %dec_label_pc_ee70

dec_label_pc_eea4:                                ; preds = %dec_label_pc_ee94, %bb430, %dec_label_pc_ee80, %dec_label_pc_ee78, %dec_label_pc_ee70, %dec_label_pc_ee5c, %dec_label_pc_ee38, %dec_label_pc_ee54, %dec_label_pc_ee4c, %bb429
  %v0_eea8 = phi i32 [ %v1_ee2c, %dec_label_pc_ee5c ], [ %v1_ee2c, %dec_label_pc_ee38 ], [ %v1_ee2c, %dec_label_pc_ee54 ], [ %v1_ee2c, %dec_label_pc_ee4c ], [ %v1_ee2c, %bb429 ], [ %v1_ee8c, %dec_label_pc_ee70 ], [ %v1_ee8c, %dec_label_pc_ee78 ], [ %v1_ee8c, %dec_label_pc_ee80 ], [ %v1_ee8c, %bb430 ], [ %v1_ee8c, %dec_label_pc_ee94 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_eea8 = add i32 %v0_eea8, 1
  store i32 %v1_eea8, i32* @r7, align 4
  %v1_eeac = call i32 @function_f9c0(i32 7)
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_eebc = call i32 @function_f8fc(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_eebc, i32* %r0.global-to-local, align 4
  %v3_eec0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_eec0, i32* %r2.global-to-local, align 4
  store i32 %v3_eebc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eecc = load i32, i32* @r6, align 4
  %v1_eecc = add i32 %v0_eecc, 4
  %v2_eecc = inttoptr i32 %v1_eecc to i32*
  %v3_eecc = load i32, i32* %v2_eecc, align 4
  store i32 %v3_eecc, i32* %r0.global-to-local, align 4
  %v4_eed0 = call i32 @function_110ac(i32 %v3_eecc, i32 %v3_eebc, i32 %v3_eec0, i32 16384)
  store i32 %v4_eed0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_eee0 = load i32, i32* @r6, align 4
  %v1_eee0 = add i32 %v0_eee0, 4
  %v2_eee0 = inttoptr i32 %v1_eee0 to i32*
  %v3_eee0 = load i32, i32* %v2_eee0, align 4
  store i32 %v3_eee0, i32* %r0.global-to-local, align 4
  %v4_eee4 = call i32 @function_110ac(i32 %v3_eee0, i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_eeec = call i32 @function_f920(i32 7)
  store i32 %v1_eeec, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_eef4 = load i32, i32* @r6, align 4
  %v2_eef4 = add i32 %v1_eef4, 12
  %v3_eef4 = inttoptr i32 %v2_eef4 to i32*
  store i32 9, i32* %v3_eef4, align 4
  br label %dec_label_pc_ed2c

dec_label_pc_eefc:                                ; preds = %dec_label_pc_ec10
  %v1_eefc = add i32 %v0_ec10, 24
  %v2_eefc = inttoptr i32 %v1_eefc to i32*
  %v3_eefc = load i32, i32* %v2_eefc, align 4
  store i32 %v3_eefc, i32* %r1.global-to-local, align 4
  %v0_ef00 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ef00, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_ef08166 = icmp eq i32 %v3_eefc, 0
  store i1 %v3_ef08166, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_ef08166, i1* %cpsr_z.global-to-local, align 1
  %v6_ef0c173 = icmp sgt i32 %v3_eefc, 0
  br i1 %v6_ef0c173, label %dec_label_pc_ef10.preheader, label %dec_label_pc_efbc

dec_label_pc_ef08.loopexit:                       ; preds = %dec_label_pc_ef2c
  %v2_ef34 = add i32 %v1_ef34, 2
  store i32 %v2_ef34, i32* @r4, align 4
  %v2_ef38 = add i32 %v1_ef38, 2
  store i32 %v2_ef38, i32* @r7, align 4
  %v3_ef08 = icmp uge i32 %v2_ef38, %v1_ef08
  store i1 %v3_ef08, i1* %cpsr_c.global-to-local, align 1
  %v9_ef08 = icmp eq i32 %v2_ef38, %v1_ef08
  store i1 %v9_ef08, i1* %cpsr_z.global-to-local, align 1
  %v6_ef0c = icmp slt i32 %v2_ef38, %v1_ef08
  br i1 %v6_ef0c, label %dec_label_pc_ef10.preheader, label %dec_label_pc_efbc

dec_label_pc_ef10.preheader:                      ; preds = %dec_label_pc_eefc, %dec_label_pc_ef08.loopexit
  %v6_efc4273 = phi i32 [ %v6_efc4274, %dec_label_pc_ef08.loopexit ], [ %v0_ec10, %dec_label_pc_eefc ]
  %v1_ef38262 = phi i32 [ %v2_ef38, %dec_label_pc_ef08.loopexit ], [ 0, %dec_label_pc_eefc ]
  %v1_ef1c260 = phi i32 [ %v1_ef08, %dec_label_pc_ef08.loopexit ], [ %v3_eefc, %dec_label_pc_eefc ]
  %v0_ef10258 = phi i32 [ %v2_ef34, %dec_label_pc_ef08.loopexit ], [ %v0_ef00, %dec_label_pc_eefc ]
  br label %dec_label_pc_ef10

dec_label_pc_ef10:                                ; preds = %dec_label_pc_ef10.preheader, %dec_label_pc_efa0
  %v6_efc4274 = phi i32 [ %v6_efc4273, %dec_label_pc_ef10.preheader ], [ %v0_efa8, %dec_label_pc_efa0 ]
  %v1_ef38 = phi i32 [ %v1_ef38262, %dec_label_pc_ef10.preheader ], [ %v1_efac, %dec_label_pc_efa0 ]
  %v1_ef08 = phi i32 [ %v1_ef1c260, %dec_label_pc_ef10.preheader ], [ %v3_efa8, %dec_label_pc_efa0 ]
  %v1_ef34 = phi i32 [ %v0_ef10258, %dec_label_pc_ef10.preheader ], [ %v1_efb4, %dec_label_pc_efa0 ]
  %v1_ef10 = inttoptr i32 %v1_ef34 to i8*
  %v2_ef10 = load i8, i8* %v1_ef10, align 1
  %v3_ef10 = zext i8 %v2_ef10 to i32
  store i32 %v3_ef10, i32* @r3, align 4
  %v2_ef14 = icmp eq i8 %v2_ef10, -1
  store i1 %v2_ef14, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_ef14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef14, label %dec_label_pc_ef1c, label %dec_label_pc_efbc

dec_label_pc_ef1c:                                ; preds = %dec_label_pc_ef10
  %v0_ef1c = load i32, i32* %sb.global-to-local, align 4
  %v2_ef1c = add i32 %v0_ef1c, %v1_ef08
  store i32 %v2_ef1c, i32* %r2.global-to-local, align 4
  %v1_ef20 = add i32 %v1_ef34, 1
  store i32 %v1_ef20, i32* @r5, align 4
  %v3_ef24 = icmp uge i32 %v2_ef1c, %v1_ef20
  store i1 %v3_ef24, i1* %cpsr_c.global-to-local, align 1
  %v9_ef24 = icmp eq i32 %v2_ef1c, %v1_ef20
  store i1 %v9_ef24, i1* %cpsr_z.global-to-local, align 1
  %v2_ef28 = xor i1 %v3_ef24, true
  %v3_ef28 = or i1 %v9_ef24, %v2_ef28
  br i1 %v3_ef28, label %dec_label_pc_efbc, label %dec_label_pc_ef2c

dec_label_pc_ef2c:                                ; preds = %dec_label_pc_ef1c
  %v2_ef2c = inttoptr i32 %v1_ef20 to i8*
  %v3_ef2c = load i8, i8* %v2_ef2c, align 1
  %v4_ef2c = zext i8 %v3_ef2c to i32
  store i32 %v4_ef2c, i32* @r3, align 4
  %v2_ef30 = icmp eq i8 %v3_ef2c, -1
  store i1 %v2_ef30, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_ef30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef30, label %dec_label_pc_ef08.loopexit, label %dec_label_pc_ef40

dec_label_pc_ef40:                                ; preds = %dec_label_pc_ef2c
  %v2_ef40 = icmp ugt i8 %v3_ef2c, -4
  store i1 %v2_ef40, i1* %cpsr_c.global-to-local, align 1
  %v7_ef40 = icmp eq i8 %v3_ef2c, -3
  store i1 %v7_ef40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef40, label %dec_label_pc_f4d4, label %dec_label_pc_ef48

dec_label_pc_ef48:                                ; preds = %dec_label_pc_ef40
  %v1_ef48 = add i32 %v1_ef34, 2
  store i32 %v1_ef48, i32* @r3, align 4
  %v3_ef4c = icmp uge i32 %v2_ef1c, %v1_ef48
  store i1 %v3_ef4c, i1* %cpsr_c.global-to-local, align 1
  %v9_ef4c = icmp eq i32 %v2_ef1c, %v1_ef48
  store i1 %v9_ef4c, i1* %cpsr_z.global-to-local, align 1
  %v2_ef50 = xor i1 %v3_ef4c, true
  %v3_ef50 = or i1 %v9_ef4c, %v2_ef50
  br i1 %v3_ef50, label %dec_label_pc_efbc, label %dec_label_pc_ef54

dec_label_pc_ef54:                                ; preds = %dec_label_pc_f538, %bb452, %.thread138, %dec_label_pc_ef48
  %v0_ef54 = load i32, i32* @r5, align 4
  %v1_ef54 = inttoptr i32 %v0_ef54 to i8*
  %v2_ef54 = load i8, i8* %v1_ef54, align 1
  %v3_ef54 = zext i8 %v2_ef54 to i32
  store i32 %v3_ef54, i32* %r3.global-to-local, align 4
  %v2_ef58 = icmp ugt i8 %v2_ef54, -4
  store i1 %v2_ef58, i1* %cpsr_c.global-to-local, align 1
  %v7_ef58 = icmp eq i8 %v2_ef54, -3
  store i1 %v7_ef58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef58, label %.thread96, label %dec_label_pc_ef68

.thread96:                                        ; preds = %dec_label_pc_ef54
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_ef54, align 1
  %v0_ef64.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ef64.pr.pr, label %.thread99, label %.thread96.dec_label_pc_ef68thread-pre-split_crit_edge

.thread96.dec_label_pc_ef68thread-pre-split_crit_edge: ; preds = %.thread96
  %v0_ef68.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ef68

dec_label_pc_ef68:                                ; preds = %dec_label_pc_ef54, %.thread96.dec_label_pc_ef68thread-pre-split_crit_edge
  %v0_ef68.pr = phi i32 [ %v0_ef68.pr.pre, %.thread96.dec_label_pc_ef68thread-pre-split_crit_edge ], [ %v3_ef54, %dec_label_pc_ef54 ]
  %v2_ef68 = icmp ugt i32 %v0_ef68.pr, 250
  store i1 %v2_ef68, i1* %cpsr_c.global-to-local, align 1
  %v7_ef68 = icmp eq i32 %v0_ef68.pr, 251
  store i1 %v7_ef68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef68, label %bb431, label %.thread99

bb431:                                            ; preds = %dec_label_pc_ef68
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_ef70 = load i32, i32* @r5, align 4
  %v4_ef70 = inttoptr i32 %v3_ef70 to i8*
  store i8 -3, i8* %v4_ef70, align 1
  br label %.thread99

.thread99:                                        ; preds = %dec_label_pc_ef68, %.thread96, %bb431
  %v0_ef74 = load i32, i32* @r4, align 4
  %v1_ef74 = add i32 %v0_ef74, 2
  %v2_ef74 = inttoptr i32 %v1_ef74 to i8*
  %v3_ef74 = load i8, i8* %v2_ef74, align 1
  %v4_ef74 = zext i8 %v3_ef74 to i32
  store i32 %v4_ef74, i32* %r3.global-to-local, align 4
  %v2_ef78 = icmp ugt i8 %v3_ef74, -4
  store i1 %v2_ef78, i1* %cpsr_c.global-to-local, align 1
  %v7_ef78 = icmp eq i8 %v3_ef74, -3
  store i1 %v7_ef78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef78, label %.thread100, label %dec_label_pc_ef88

.thread100:                                       ; preds = %.thread99
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_ef74, align 1
  %v0_ef84.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ef84.pr.pr, label %.thread103, label %.thread100.dec_label_pc_ef88thread-pre-split_crit_edge

.thread100.dec_label_pc_ef88thread-pre-split_crit_edge: ; preds = %.thread100
  %v0_ef88.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ef88

dec_label_pc_ef88:                                ; preds = %.thread99, %.thread100.dec_label_pc_ef88thread-pre-split_crit_edge
  %v0_ef88.pr = phi i32 [ %v0_ef88.pr.pre, %.thread100.dec_label_pc_ef88thread-pre-split_crit_edge ], [ %v4_ef74, %.thread99 ]
  %v2_ef88 = icmp ugt i32 %v0_ef88.pr, 250
  store i1 %v2_ef88, i1* %cpsr_c.global-to-local, align 1
  %v7_ef88 = icmp eq i32 %v0_ef88.pr, 251
  store i1 %v7_ef88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef88, label %bb432, label %.thread103

bb432:                                            ; preds = %dec_label_pc_ef88
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_ef90 = load i32, i32* @r4, align 4
  %v4_ef90 = add i32 %v3_ef90, 2
  %v5_ef90 = inttoptr i32 %v4_ef90 to i8*
  store i8 -3, i8* %v5_ef90, align 1
  br label %.thread103

.thread103:                                       ; preds = %dec_label_pc_ef88, %.thread100, %bb432
  %v0_ef94 = load i32, i32* @r6, align 4
  %v1_ef94 = add i32 %v0_ef94, 4
  %v2_ef94 = inttoptr i32 %v1_ef94 to i32*
  %v3_ef94 = load i32, i32* %v2_ef94, align 4
  store i32 %v3_ef94, i32* %r0.global-to-local, align 4
  %v0_ef98 = load i32, i32* @r4, align 4
  br label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %dec_label_pc_f64c, %.thread103
  %v0_efa4 = phi i32 [ %v3_f660, %dec_label_pc_f64c ], [ %v3_ef94, %.thread103 ]
  %storemerge4 = phi i32 [ %v2_f4ec, %dec_label_pc_f64c ], [ %v0_ef98, %.thread103 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_f64c ], [ 3, %.thread103 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_efa4 = call i32 @function_110ac(i32 %v0_efa4, i32 %storemerge4, i32 %storemerge3, i32 16384)
  store i32 %v4_efa4, i32* %r0.global-to-local, align 4
  %v0_efa8 = load i32, i32* @r6, align 4
  %v1_efa8 = add i32 %v0_efa8, 24
  %v2_efa8 = inttoptr i32 %v1_efa8 to i32*
  %v3_efa8 = load i32, i32* %v2_efa8, align 4
  store i32 %v3_efa8, i32* %r1.global-to-local, align 4
  %v0_efac = load i32, i32* @r7, align 4
  %v1_efac = add i32 %v0_efac, 3
  store i32 %v1_efac, i32* @r7, align 4
  %v3_efb0 = icmp uge i32 %v1_efac, %v3_efa8
  store i1 %v3_efb0, i1* %cpsr_c.global-to-local, align 1
  %v9_efb0 = icmp eq i32 %v1_efac, %v3_efa8
  store i1 %v9_efb0, i1* %cpsr_z.global-to-local, align 1
  %v0_efb4 = load i32, i32* @r4, align 4
  %v1_efb4 = add i32 %v0_efb4, 3
  store i32 %v1_efb4, i32* @r4, align 4
  %v5_efb8 = icmp slt i32 %v1_efac, %v3_efa8
  br i1 %v5_efb8, label %dec_label_pc_ef10, label %dec_label_pc_efbc

dec_label_pc_efbc:                                ; preds = %dec_label_pc_ef08.loopexit, %dec_label_pc_ef10, %dec_label_pc_efa0, %dec_label_pc_ef48, %dec_label_pc_ef1c, %dec_label_pc_eefc, %dec_label_pc_f4d4.dec_label_pc_efbc.loopexit_crit_edge
  %v6_efc4 = phi i32 [ %v0_f504, %dec_label_pc_f4d4.dec_label_pc_efbc.loopexit_crit_edge ], [ %v0_ec10, %dec_label_pc_eefc ], [ %v6_efc4274, %dec_label_pc_ef10 ], [ %v0_efa8, %dec_label_pc_efa0 ], [ %v6_efc4274, %dec_label_pc_ef48 ], [ %v6_efc4274, %dec_label_pc_ef1c ], [ %v6_efc4274, %dec_label_pc_ef08.loopexit ]
  %v0_efbc = phi i32 [ %v0_efbc.pre.pre, %dec_label_pc_f4d4.dec_label_pc_efbc.loopexit_crit_edge ], [ 0, %dec_label_pc_eefc ], [ %v1_ef38, %dec_label_pc_ef10 ], [ %v1_efac, %dec_label_pc_efa0 ], [ %v1_ef38, %dec_label_pc_ef48 ], [ %v1_ef38, %dec_label_pc_ef1c ], [ %v2_ef38, %dec_label_pc_ef08.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efbc = icmp eq i32 %v0_efbc, 0
  store i1 %v2_efbc, i1* %cpsr_z.global-to-local, align 1
  %tmp433 = icmp slt i32 %v0_efbc, 1
  br i1 %tmp433, label %dec_label_pc_f3a8, label %bb434

bb434:                                            ; preds = %dec_label_pc_efbc
  store i32 3, i32* @r3, align 4
  %v7_efc4 = add i32 %v6_efc4, 12
  %v8_efc4 = inttoptr i32 %v7_efc4 to i32*
  store i32 3, i32* %v8_efc4, align 4
  br label %dec_label_pc_f3a8

dec_label_pc_efcc:                                ; preds = %dec_label_pc_ec10
  %v1_efcc = add i32 %v0_ec10, 24
  %v2_efcc = inttoptr i32 %v1_efcc to i32*
  %v3_efcc = load i32, i32* %v2_efcc, align 4
  store i32 %v3_efcc, i32* %r2.global-to-local, align 4
  %v1_efd0 = add i32 %v3_efcc, -1
  store i32 %v1_efd0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efd4 = icmp eq i32 %v1_efd0, 0
  store i1 %v2_efd4, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v1_efd0, 1
  br i1 %tmp435, label %dec_label_pc_eb94.backedge.thread, label %dec_label_pc_efdc

dec_label_pc_efdc:                                ; preds = %dec_label_pc_efcc
  %v2_efdc = add i32 %v1_efd0, %v0_ec10
  store i32 %v2_efdc, i32* %r3.global-to-local, align 4
  %v1_efe0 = add i32 %v2_efdc, 28
  %v2_efe0 = inttoptr i32 %v1_efe0 to i8*
  %v3_efe0 = load i8, i8* %v2_efe0, align 1
  %v4_efe0 = zext i8 %v3_efe0 to i32
  store i32 %v4_efe0, i32* %r3.global-to-local, align 4
  %v2_efe4 = icmp ugt i8 %v3_efe0, 61
  store i1 %v2_efe4, i1* %cpsr_c.global-to-local, align 1
  %v7_efe4 = icmp eq i8 %v3_efe0, 62
  store i1 %v7_efe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efe4, label %dec_label_pc_f048, label %bb436

bb436:                                            ; preds = %dec_label_pc_efdc
  %v3_efe8 = icmp ugt i8 %v3_efe0, 57
  store i1 %v3_efe8, i1* %cpsr_c.global-to-local, align 1
  %v8_efe8 = icmp eq i8 %v3_efe0, 58
  store i1 %v8_efe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_efe8, label %dec_label_pc_f048, label %dec_label_pc_eff0

dec_label_pc_eff0:                                ; preds = %bb436
  %v2_eff0 = icmp ugt i8 %v3_efe0, 35
  store i1 %v2_eff0, i1* %cpsr_c.global-to-local, align 1
  %v7_eff0 = icmp eq i8 %v3_efe0, 36
  store i1 %v7_eff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eff0, label %dec_label_pc_f048, label %dec_label_pc_eff8

dec_label_pc_eff8:                                ; preds = %dec_label_pc_eff0
  %v2_eff8 = icmp ugt i8 %v3_efe0, 34
  store i1 %v2_eff8, i1* %cpsr_c.global-to-local, align 1
  %v7_eff8 = icmp eq i8 %v3_efe0, 35
  store i1 %v7_eff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eff8, label %dec_label_pc_f048, label %dec_label_pc_f000

dec_label_pc_f000:                                ; preds = %dec_label_pc_eff8
  %v2_f000 = icmp ugt i8 %v3_efe0, 36
  store i1 %v2_f000, i1* %cpsr_c.global-to-local, align 1
  %v7_f000 = icmp eq i8 %v3_efe0, 37
  store i1 %v7_f000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f000, label %dec_label_pc_f048, label %dec_label_pc_f030.preheader

dec_label_pc_f030.preheader:                      ; preds = %dec_label_pc_f000
  %v3_f004 = add i32 %v0_ec10, 28
  %v2_f008 = add i32 %v3_f004, %v3_efcc
  store i32 %v2_f008, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f030

dec_label_pc_f014:                                ; preds = %bb437
  %v2_f014 = icmp ugt i8 %v3_f038, 35
  store i1 %v2_f014, i1* %cpsr_c.global-to-local, align 1
  %v7_f014 = icmp eq i8 %v3_f038, 36
  store i1 %v7_f014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f014, label %dec_label_pc_f048, label %dec_label_pc_f01c

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f014
  %v2_f01c = icmp ugt i8 %v3_f038, 34
  store i1 %v2_f01c, i1* %cpsr_c.global-to-local, align 1
  %v7_f01c = icmp eq i8 %v3_f038, 35
  store i1 %v7_f01c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f01c, label %dec_label_pc_f048, label %dec_label_pc_f024

dec_label_pc_f024:                                ; preds = %dec_label_pc_f01c
  %v2_f024 = icmp ugt i8 %v3_f038, 36
  store i1 %v2_f024, i1* %cpsr_c.global-to-local, align 1
  %v7_f024 = icmp eq i8 %v3_f038, 37
  store i1 %v7_f024, i1* %cpsr_z.global-to-local, align 1
  %v1_f028 = add i32 %v0_f028, -1
  store i32 %v1_f028, i32* %r3.global-to-local, align 4
  br i1 %v7_f024, label %dec_label_pc_f048, label %dec_label_pc_f030

dec_label_pc_f030:                                ; preds = %dec_label_pc_f030.preheader, %dec_label_pc_f024
  %v0_f028 = phi i32 [ %v2_f008, %dec_label_pc_f030.preheader ], [ %v1_f028, %dec_label_pc_f024 ]
  %v0_f030 = phi i32 [ %v1_efd0, %dec_label_pc_f030.preheader ], [ %v1_f030, %dec_label_pc_f024 ]
  %v1_f030 = add i32 %v0_f030, -1
  store i32 %v1_f030, i32* %r1.global-to-local, align 4
  %v2_f030 = icmp ne i32 %v0_f030, 0
  store i1 %v2_f030, i1* %cpsr_c.global-to-local, align 1
  %v7_f030 = icmp eq i32 %v0_f030, 1
  store i1 %v7_f030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f030, label %dec_label_pc_eb94.backedge.thread559, label %dec_label_pc_f038

dec_label_pc_f038:                                ; preds = %dec_label_pc_f030
  %v1_f038 = add i32 %v0_f028, -2
  %v2_f038 = inttoptr i32 %v1_f038 to i8*
  %v3_f038 = load i8, i8* %v2_f038, align 1
  %v4_f038 = zext i8 %v3_f038 to i32
  store i32 %v4_f038, i32* %r2.global-to-local, align 4
  %v2_f03c = icmp ugt i8 %v3_f038, 61
  store i1 %v2_f03c, i1* %cpsr_c.global-to-local, align 1
  %v7_f03c = icmp eq i8 %v3_f038, 62
  store i1 %v7_f03c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f03c, label %dec_label_pc_f048, label %bb437

bb437:                                            ; preds = %dec_label_pc_f038
  %v3_f040 = icmp ugt i8 %v3_f038, 57
  store i1 %v3_f040, i1* %cpsr_c.global-to-local, align 1
  %v8_f040 = icmp eq i8 %v3_f038, 58
  store i1 %v8_f040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f040, label %dec_label_pc_f048, label %dec_label_pc_f014

dec_label_pc_f048:                                ; preds = %dec_label_pc_f038, %bb437, %dec_label_pc_f024, %dec_label_pc_f01c, %dec_label_pc_f014, %dec_label_pc_f000, %dec_label_pc_efdc, %dec_label_pc_eff8, %dec_label_pc_eff0, %bb436
  %v0_f04c = phi i32 [ %v1_efd0, %dec_label_pc_f000 ], [ %v1_efd0, %dec_label_pc_efdc ], [ %v1_efd0, %dec_label_pc_eff8 ], [ %v1_efd0, %dec_label_pc_eff0 ], [ %v1_efd0, %bb436 ], [ %v1_f030, %dec_label_pc_f014 ], [ %v1_f030, %dec_label_pc_f01c ], [ %v1_f030, %dec_label_pc_f024 ], [ %v1_f030, %bb437 ], [ %v1_f030, %dec_label_pc_f038 ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f04c = add i32 %v0_f04c, 1
  store i32 %v1_f04c, i32* @r7, align 4
  %v1_f050 = call i32 @function_f9c0(i32 6)
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f060 = call i32 @function_f8fc(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f060, i32* %r0.global-to-local, align 4
  %v3_f064 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f064, i32* %r2.global-to-local, align 4
  store i32 %v3_f060, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f070 = load i32, i32* @r6, align 4
  %v1_f070 = add i32 %v0_f070, 4
  %v2_f070 = inttoptr i32 %v1_f070 to i32*
  %v3_f070 = load i32, i32* %v2_f070, align 4
  store i32 %v3_f070, i32* %r0.global-to-local, align 4
  %v4_f074 = call i32 @function_110ac(i32 %v3_f070, i32 %v3_f060, i32 %v3_f064, i32 16384)
  store i32 %v4_f074, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f084 = load i32, i32* @r6, align 4
  %v1_f084 = add i32 %v0_f084, 4
  %v2_f084 = inttoptr i32 %v1_f084 to i32*
  %v3_f084 = load i32, i32* %v2_f084, align 4
  store i32 %v3_f084, i32* %r0.global-to-local, align 4
  %v4_f088 = call i32 @function_110ac(i32 %v3_f084, i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f090 = call i32 @function_f920(i32 6)
  store i32 %v1_f090, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f098 = load i32, i32* @r6, align 4
  %v2_f098 = add i32 %v1_f098, 12
  %v3_f098 = inttoptr i32 %v2_f098 to i32*
  store i32 7, i32* %v3_f098, align 4
  br label %dec_label_pc_ed2c

dec_label_pc_f0a0:                                ; preds = %dec_label_pc_ec10
  %v1_f0a0 = add i32 %v0_ec10, 24
  %v2_f0a0 = inttoptr i32 %v1_f0a0 to i32*
  %v3_f0a0 = load i32, i32* %v2_f0a0, align 4
  store i32 %v3_f0a0, i32* %r2.global-to-local, align 4
  %v1_f0a4 = add i32 %v3_f0a0, -1
  store i32 %v1_f0a4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0a8 = icmp eq i32 %v1_f0a4, 0
  store i1 %v2_f0a8, i1* %cpsr_z.global-to-local, align 1
  %tmp438 = icmp slt i32 %v1_f0a4, 1
  br i1 %tmp438, label %dec_label_pc_eb94.backedge.thread, label %dec_label_pc_f0b0

dec_label_pc_f0b0:                                ; preds = %dec_label_pc_f0a0
  %v2_f0b0 = add i32 %v1_f0a4, %v0_ec10
  store i32 %v2_f0b0, i32* %r3.global-to-local, align 4
  %v1_f0b4 = add i32 %v2_f0b0, 28
  %v2_f0b4 = inttoptr i32 %v1_f0b4 to i8*
  %v3_f0b4 = load i8, i8* %v2_f0b4, align 1
  %v4_f0b4 = zext i8 %v3_f0b4 to i32
  store i32 %v4_f0b4, i32* %r3.global-to-local, align 4
  %v2_f0b8 = icmp ugt i8 %v3_f0b4, 61
  store i1 %v2_f0b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0b8 = icmp eq i8 %v3_f0b4, 62
  store i1 %v7_f0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0b8, label %dec_label_pc_f11c, label %bb439

bb439:                                            ; preds = %dec_label_pc_f0b0
  %v3_f0bc = icmp ugt i8 %v3_f0b4, 57
  store i1 %v3_f0bc, i1* %cpsr_c.global-to-local, align 1
  %v8_f0bc = icmp eq i8 %v3_f0b4, 58
  store i1 %v8_f0bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0bc, label %dec_label_pc_f11c, label %dec_label_pc_f0c4

dec_label_pc_f0c4:                                ; preds = %bb439
  %v2_f0c4 = icmp ugt i8 %v3_f0b4, 35
  store i1 %v2_f0c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0c4 = icmp eq i8 %v3_f0b4, 36
  store i1 %v7_f0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0c4, label %dec_label_pc_f11c, label %dec_label_pc_f0cc

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f0c4
  %v2_f0cc = icmp ugt i8 %v3_f0b4, 34
  store i1 %v2_f0cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0cc = icmp eq i8 %v3_f0b4, 35
  store i1 %v7_f0cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0cc, label %dec_label_pc_f11c, label %dec_label_pc_f0d4

dec_label_pc_f0d4:                                ; preds = %dec_label_pc_f0cc
  %v2_f0d4 = icmp ugt i8 %v3_f0b4, 36
  store i1 %v2_f0d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0d4 = icmp eq i8 %v3_f0b4, 37
  store i1 %v7_f0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0d4, label %dec_label_pc_f11c, label %dec_label_pc_f104.preheader

dec_label_pc_f104.preheader:                      ; preds = %dec_label_pc_f0d4
  %v3_f0d8 = add i32 %v0_ec10, 28
  %v2_f0dc = add i32 %v3_f0d8, %v3_f0a0
  store i32 %v2_f0dc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f104

dec_label_pc_f0e8:                                ; preds = %bb440
  %v2_f0e8 = icmp ugt i8 %v3_f10c, 35
  store i1 %v2_f0e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0e8 = icmp eq i8 %v3_f10c, 36
  store i1 %v7_f0e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0e8, label %dec_label_pc_f11c, label %dec_label_pc_f0f0

dec_label_pc_f0f0:                                ; preds = %dec_label_pc_f0e8
  %v2_f0f0 = icmp ugt i8 %v3_f10c, 34
  store i1 %v2_f0f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f0 = icmp eq i8 %v3_f10c, 35
  store i1 %v7_f0f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0f0, label %dec_label_pc_f11c, label %dec_label_pc_f0f8

dec_label_pc_f0f8:                                ; preds = %dec_label_pc_f0f0
  %v2_f0f8 = icmp ugt i8 %v3_f10c, 36
  store i1 %v2_f0f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f8 = icmp eq i8 %v3_f10c, 37
  store i1 %v7_f0f8, i1* %cpsr_z.global-to-local, align 1
  %v1_f0fc = add i32 %v0_f0fc, -1
  store i32 %v1_f0fc, i32* %r3.global-to-local, align 4
  br i1 %v7_f0f8, label %dec_label_pc_f11c, label %dec_label_pc_f104

dec_label_pc_f104:                                ; preds = %dec_label_pc_f104.preheader, %dec_label_pc_f0f8
  %v0_f0fc = phi i32 [ %v2_f0dc, %dec_label_pc_f104.preheader ], [ %v1_f0fc, %dec_label_pc_f0f8 ]
  %v0_f104 = phi i32 [ %v1_f0a4, %dec_label_pc_f104.preheader ], [ %v1_f104, %dec_label_pc_f0f8 ]
  %v1_f104 = add i32 %v0_f104, -1
  store i32 %v1_f104, i32* %r1.global-to-local, align 4
  %v2_f104 = icmp ne i32 %v0_f104, 0
  store i1 %v2_f104, i1* %cpsr_c.global-to-local, align 1
  %v7_f104 = icmp eq i32 %v0_f104, 1
  store i1 %v7_f104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f104, label %dec_label_pc_eb94.backedge.thread559, label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %dec_label_pc_f104
  %v1_f10c = add i32 %v0_f0fc, -2
  %v2_f10c = inttoptr i32 %v1_f10c to i8*
  %v3_f10c = load i8, i8* %v2_f10c, align 1
  %v4_f10c = zext i8 %v3_f10c to i32
  store i32 %v4_f10c, i32* %r2.global-to-local, align 4
  %v2_f110 = icmp ugt i8 %v3_f10c, 61
  store i1 %v2_f110, i1* %cpsr_c.global-to-local, align 1
  %v7_f110 = icmp eq i8 %v3_f10c, 62
  store i1 %v7_f110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f110, label %dec_label_pc_f11c, label %bb440

bb440:                                            ; preds = %dec_label_pc_f10c
  %v3_f114 = icmp ugt i8 %v3_f10c, 57
  store i1 %v3_f114, i1* %cpsr_c.global-to-local, align 1
  %v8_f114 = icmp eq i8 %v3_f10c, 58
  store i1 %v8_f114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f114, label %dec_label_pc_f11c, label %dec_label_pc_f0e8

dec_label_pc_f11c:                                ; preds = %dec_label_pc_f10c, %bb440, %dec_label_pc_f0f8, %dec_label_pc_f0f0, %dec_label_pc_f0e8, %dec_label_pc_f0d4, %dec_label_pc_f0b0, %dec_label_pc_f0cc, %dec_label_pc_f0c4, %bb439
  %v0_f120 = phi i32 [ %v1_f0a4, %dec_label_pc_f0d4 ], [ %v1_f0a4, %dec_label_pc_f0b0 ], [ %v1_f0a4, %dec_label_pc_f0cc ], [ %v1_f0a4, %dec_label_pc_f0c4 ], [ %v1_f0a4, %bb439 ], [ %v1_f104, %dec_label_pc_f0e8 ], [ %v1_f104, %dec_label_pc_f0f0 ], [ %v1_f104, %dec_label_pc_f0f8 ], [ %v1_f104, %bb440 ], [ %v1_f104, %dec_label_pc_f10c ]
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f120 = add i32 %v0_f120, 1
  store i32 %v1_f120, i32* @r7, align 4
  %v1_f124 = call i32 @function_f9c0(i32 5)
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_f134 = call i32 @function_f8fc(i32 5, i32* nonnull %stack_var_-60)
  store i32 %v3_f134, i32* %r0.global-to-local, align 4
  %v3_f138 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f138, i32* %r2.global-to-local, align 4
  store i32 %v3_f134, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f144 = load i32, i32* @r6, align 4
  %v1_f144 = add i32 %v0_f144, 4
  %v2_f144 = inttoptr i32 %v1_f144 to i32*
  %v3_f144 = load i32, i32* %v2_f144, align 4
  store i32 %v3_f144, i32* %r0.global-to-local, align 4
  %v4_f148 = call i32 @function_110ac(i32 %v3_f144, i32 %v3_f134, i32 %v3_f138, i32 16384)
  store i32 %v4_f148, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f158 = load i32, i32* @r6, align 4
  %v1_f158 = add i32 %v0_f158, 4
  %v2_f158 = inttoptr i32 %v1_f158 to i32*
  %v3_f158 = load i32, i32* %v2_f158, align 4
  store i32 %v3_f158, i32* %r0.global-to-local, align 4
  %v4_f15c = call i32 @function_110ac(i32 %v3_f158, i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f164 = call i32 @function_f920(i32 5)
  store i32 %v1_f164, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f16c = load i32, i32* @r6, align 4
  %v2_f16c = add i32 %v1_f16c, 12
  %v3_f16c = inttoptr i32 %v2_f16c to i32*
  store i32 6, i32* %v3_f16c, align 4
  br label %dec_label_pc_ed2c

dec_label_pc_f1ec:                                ; preds = %dec_label_pc_ec10
  %v1_f1ec = add i32 %v0_ec10, 24
  %v2_f1ec = inttoptr i32 %v1_f1ec to i32*
  %v3_f1ec = load i32, i32* %v2_f1ec, align 4
  store i32 %v3_f1ec, i32* %r2.global-to-local, align 4
  %v1_f1f0 = add i32 %v3_f1ec, -1
  store i32 %v1_f1f0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1f4 = icmp eq i32 %v1_f1f0, 0
  store i1 %v2_f1f4, i1* %cpsr_z.global-to-local, align 1
  %tmp441 = icmp slt i32 %v1_f1f0, 1
  br i1 %tmp441, label %dec_label_pc_eb94.backedge.thread, label %dec_label_pc_f1fc

dec_label_pc_f1fc:                                ; preds = %dec_label_pc_f1ec
  %v2_f1fc = add i32 %v1_f1f0, %v0_ec10
  store i32 %v2_f1fc, i32* %r3.global-to-local, align 4
  %v1_f200 = add i32 %v2_f1fc, 28
  %v2_f200 = inttoptr i32 %v1_f200 to i8*
  %v3_f200 = load i8, i8* %v2_f200, align 1
  %v4_f200 = zext i8 %v3_f200 to i32
  store i32 %v4_f200, i32* %r3.global-to-local, align 4
  %v2_f204 = icmp ugt i8 %v3_f200, 61
  store i1 %v2_f204, i1* %cpsr_c.global-to-local, align 1
  %v7_f204 = icmp eq i8 %v3_f200, 62
  store i1 %v7_f204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f204, label %dec_label_pc_f268, label %bb442

bb442:                                            ; preds = %dec_label_pc_f1fc
  %v3_f208 = icmp ugt i8 %v3_f200, 57
  store i1 %v3_f208, i1* %cpsr_c.global-to-local, align 1
  %v8_f208 = icmp eq i8 %v3_f200, 58
  store i1 %v8_f208, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f208, label %dec_label_pc_f268, label %dec_label_pc_f210

dec_label_pc_f210:                                ; preds = %bb442
  %v2_f210 = icmp ugt i8 %v3_f200, 35
  store i1 %v2_f210, i1* %cpsr_c.global-to-local, align 1
  %v7_f210 = icmp eq i8 %v3_f200, 36
  store i1 %v7_f210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f210, label %dec_label_pc_f268, label %dec_label_pc_f218

dec_label_pc_f218:                                ; preds = %dec_label_pc_f210
  %v2_f218 = icmp ugt i8 %v3_f200, 34
  store i1 %v2_f218, i1* %cpsr_c.global-to-local, align 1
  %v7_f218 = icmp eq i8 %v3_f200, 35
  store i1 %v7_f218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f218, label %dec_label_pc_f268, label %dec_label_pc_f220

dec_label_pc_f220:                                ; preds = %dec_label_pc_f218
  %v2_f220 = icmp ugt i8 %v3_f200, 36
  store i1 %v2_f220, i1* %cpsr_c.global-to-local, align 1
  %v7_f220 = icmp eq i8 %v3_f200, 37
  store i1 %v7_f220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f220, label %dec_label_pc_f268, label %dec_label_pc_f250.preheader

dec_label_pc_f250.preheader:                      ; preds = %dec_label_pc_f220
  %v3_f224 = add i32 %v0_ec10, 28
  %v2_f228 = add i32 %v3_f224, %v3_f1ec
  store i32 %v2_f228, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f250

dec_label_pc_f234:                                ; preds = %bb443
  %v2_f234 = icmp ugt i8 %v3_f258, 35
  store i1 %v2_f234, i1* %cpsr_c.global-to-local, align 1
  %v7_f234 = icmp eq i8 %v3_f258, 36
  store i1 %v7_f234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f234, label %dec_label_pc_f268, label %dec_label_pc_f23c

dec_label_pc_f23c:                                ; preds = %dec_label_pc_f234
  %v2_f23c = icmp ugt i8 %v3_f258, 34
  store i1 %v2_f23c, i1* %cpsr_c.global-to-local, align 1
  %v7_f23c = icmp eq i8 %v3_f258, 35
  store i1 %v7_f23c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f23c, label %dec_label_pc_f268, label %dec_label_pc_f244

dec_label_pc_f244:                                ; preds = %dec_label_pc_f23c
  %v2_f244 = icmp ugt i8 %v3_f258, 36
  store i1 %v2_f244, i1* %cpsr_c.global-to-local, align 1
  %v7_f244 = icmp eq i8 %v3_f258, 37
  store i1 %v7_f244, i1* %cpsr_z.global-to-local, align 1
  %v1_f248 = add i32 %v0_f248, -1
  store i32 %v1_f248, i32* %r3.global-to-local, align 4
  br i1 %v7_f244, label %dec_label_pc_f268, label %dec_label_pc_f250

dec_label_pc_f250:                                ; preds = %dec_label_pc_f250.preheader, %dec_label_pc_f244
  %v0_f248 = phi i32 [ %v2_f228, %dec_label_pc_f250.preheader ], [ %v1_f248, %dec_label_pc_f244 ]
  %v0_f250 = phi i32 [ %v1_f1f0, %dec_label_pc_f250.preheader ], [ %v1_f250, %dec_label_pc_f244 ]
  %v1_f250 = add i32 %v0_f250, -1
  store i32 %v1_f250, i32* %r1.global-to-local, align 4
  %v2_f250 = icmp ne i32 %v0_f250, 0
  store i1 %v2_f250, i1* %cpsr_c.global-to-local, align 1
  %v7_f250 = icmp eq i32 %v0_f250, 1
  store i1 %v7_f250, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f250, label %dec_label_pc_eb94.backedge.thread559, label %dec_label_pc_f258

dec_label_pc_f258:                                ; preds = %dec_label_pc_f250
  %v1_f258 = add i32 %v0_f248, -2
  %v2_f258 = inttoptr i32 %v1_f258 to i8*
  %v3_f258 = load i8, i8* %v2_f258, align 1
  %v4_f258 = zext i8 %v3_f258 to i32
  store i32 %v4_f258, i32* %r2.global-to-local, align 4
  %v2_f25c = icmp ugt i8 %v3_f258, 61
  store i1 %v2_f25c, i1* %cpsr_c.global-to-local, align 1
  %v7_f25c = icmp eq i8 %v3_f258, 62
  store i1 %v7_f25c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f25c, label %dec_label_pc_f268, label %bb443

bb443:                                            ; preds = %dec_label_pc_f258
  %v3_f260 = icmp ugt i8 %v3_f258, 57
  store i1 %v3_f260, i1* %cpsr_c.global-to-local, align 1
  %v8_f260 = icmp eq i8 %v3_f258, 58
  store i1 %v8_f260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f260, label %dec_label_pc_f268, label %dec_label_pc_f234

dec_label_pc_f268:                                ; preds = %dec_label_pc_f258, %bb443, %dec_label_pc_f244, %dec_label_pc_f23c, %dec_label_pc_f234, %dec_label_pc_f220, %dec_label_pc_f1fc, %dec_label_pc_f218, %dec_label_pc_f210, %bb442
  %v0_f26c = phi i32 [ %v1_f1f0, %dec_label_pc_f220 ], [ %v1_f1f0, %dec_label_pc_f1fc ], [ %v1_f1f0, %dec_label_pc_f218 ], [ %v1_f1f0, %dec_label_pc_f210 ], [ %v1_f1f0, %bb442 ], [ %v1_f250, %dec_label_pc_f234 ], [ %v1_f250, %dec_label_pc_f23c ], [ %v1_f250, %dec_label_pc_f244 ], [ %v1_f250, %bb443 ], [ %v1_f250, %dec_label_pc_f258 ]
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f26c = add i32 %v0_f26c, 1
  store i32 %v1_f26c, i32* @r7, align 4
  %v1_f270 = call i32 @function_f9c0(i32 4)
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_f280 = call i32 @function_f8fc(i32 4, i32* nonnull %stack_var_-60)
  store i32 %v3_f280, i32* %r0.global-to-local, align 4
  %v3_f284 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f284, i32* %r2.global-to-local, align 4
  store i32 %v3_f280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f290 = load i32, i32* @r6, align 4
  %v1_f290 = add i32 %v0_f290, 4
  %v2_f290 = inttoptr i32 %v1_f290 to i32*
  %v3_f290 = load i32, i32* %v2_f290, align 4
  store i32 %v3_f290, i32* %r0.global-to-local, align 4
  %v4_f294 = call i32 @function_110ac(i32 %v3_f290, i32 %v3_f280, i32 %v3_f284, i32 16384)
  store i32 %v4_f294, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f2a4 = load i32, i32* @r6, align 4
  %v1_f2a4 = add i32 %v0_f2a4, 4
  %v2_f2a4 = inttoptr i32 %v1_f2a4 to i32*
  %v3_f2a4 = load i32, i32* %v2_f2a4, align 4
  store i32 %v3_f2a4, i32* %r0.global-to-local, align 4
  %v4_f2a8 = call i32 @function_110ac(i32 %v3_f2a4, i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f2b0 = call i32 @function_f920(i32 4)
  store i32 %v1_f2b0, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_f2b8 = load i32, i32* @r6, align 4
  %v2_f2b8 = add i32 %v1_f2b8, 12
  %v3_f2b8 = inttoptr i32 %v2_f2b8 to i32*
  store i32 8, i32* %v3_f2b8, align 4
  br label %dec_label_pc_ed2c

dec_label_pc_f2c0:                                ; preds = %dec_label_pc_ec10
  %v1_f2c0 = add i32 %v0_ec10, 24
  %v2_f2c0 = inttoptr i32 %v1_f2c0 to i32*
  %v3_f2c0 = load i32, i32* %v2_f2c0, align 4
  store i32 %v3_f2c0, i32* %r2.global-to-local, align 4
  %v1_f2c4 = add i32 %v3_f2c0, -1
  store i32 %v1_f2c4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f2c8 = icmp eq i32 %v1_f2c4, 0
  store i1 %v2_f2c8, i1* %cpsr_z.global-to-local, align 1
  %tmp444 = icmp slt i32 %v1_f2c4, 1
  br i1 %tmp444, label %dec_label_pc_f32c, label %dec_label_pc_f2d0

dec_label_pc_f2d0:                                ; preds = %dec_label_pc_f2c0
  %v2_f2d0 = add i32 %v1_f2c4, %v0_ec10
  store i32 %v2_f2d0, i32* %r3.global-to-local, align 4
  %v1_f2d4 = add i32 %v2_f2d0, 28
  %v2_f2d4 = inttoptr i32 %v1_f2d4 to i8*
  %v3_f2d4 = load i8, i8* %v2_f2d4, align 1
  %v4_f2d4 = zext i8 %v3_f2d4 to i32
  store i32 %v4_f2d4, i32* %r3.global-to-local, align 4
  %v2_f2d8 = icmp ugt i8 %v3_f2d4, 61
  store i1 %v2_f2d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2d8 = icmp eq i8 %v3_f2d4, 62
  store i1 %v7_f2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2d8, label %dec_label_pc_f594, label %bb445

bb445:                                            ; preds = %dec_label_pc_f2d0
  %v3_f2dc = icmp ugt i8 %v3_f2d4, 57
  store i1 %v3_f2dc, i1* %cpsr_c.global-to-local, align 1
  %v8_f2dc = icmp eq i8 %v3_f2d4, 58
  store i1 %v8_f2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2dc, label %dec_label_pc_f594, label %dec_label_pc_f2e4

dec_label_pc_f2e4:                                ; preds = %bb445
  %v2_f2e4 = icmp ugt i8 %v3_f2d4, 35
  store i1 %v2_f2e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2e4 = icmp eq i8 %v3_f2d4, 36
  store i1 %v7_f2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2e4, label %dec_label_pc_f594, label %dec_label_pc_f2ec

dec_label_pc_f2ec:                                ; preds = %dec_label_pc_f2e4
  %v2_f2ec = icmp ugt i8 %v3_f2d4, 34
  store i1 %v2_f2ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f2ec = icmp eq i8 %v3_f2d4, 35
  store i1 %v7_f2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2ec, label %dec_label_pc_f594, label %dec_label_pc_f324.preheader

dec_label_pc_f324.preheader:                      ; preds = %dec_label_pc_f2ec
  %v3_f2f0 = add i32 %v0_ec10, 28
  %v2_f2f4 = add i32 %v3_f2f0, %v3_f2c0
  store i32 %v2_f2f4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f324

dec_label_pc_f300:                                ; preds = %dec_label_pc_f324
  %v1_f300 = add i32 %v0_f31c, -2
  %v2_f300 = inttoptr i32 %v1_f300 to i8*
  %v3_f300 = load i8, i8* %v2_f300, align 1
  %v4_f300 = zext i8 %v3_f300 to i32
  store i32 %v4_f300, i32* %r2.global-to-local, align 4
  %v2_f304 = icmp ugt i8 %v3_f300, 61
  store i1 %v2_f304, i1* %cpsr_c.global-to-local, align 1
  %v7_f304 = icmp eq i8 %v3_f300, 62
  store i1 %v7_f304, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f304, label %dec_label_pc_f594, label %bb446

bb446:                                            ; preds = %dec_label_pc_f300
  %v3_f308 = icmp ugt i8 %v3_f300, 57
  store i1 %v3_f308, i1* %cpsr_c.global-to-local, align 1
  %v8_f308 = icmp eq i8 %v3_f300, 58
  store i1 %v8_f308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f308, label %dec_label_pc_f594, label %dec_label_pc_f310

dec_label_pc_f310:                                ; preds = %bb446
  %v2_f310 = icmp ugt i8 %v3_f300, 35
  store i1 %v2_f310, i1* %cpsr_c.global-to-local, align 1
  %v7_f310 = icmp eq i8 %v3_f300, 36
  store i1 %v7_f310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f310, label %dec_label_pc_f594, label %dec_label_pc_f318

dec_label_pc_f318:                                ; preds = %dec_label_pc_f310
  %v2_f318 = icmp ugt i8 %v3_f300, 34
  store i1 %v2_f318, i1* %cpsr_c.global-to-local, align 1
  %v7_f318 = icmp eq i8 %v3_f300, 35
  store i1 %v7_f318, i1* %cpsr_z.global-to-local, align 1
  %v1_f31c = add i32 %v0_f31c, -1
  store i32 %v1_f31c, i32* %r3.global-to-local, align 4
  br i1 %v7_f318, label %dec_label_pc_f594, label %dec_label_pc_f324

dec_label_pc_f324:                                ; preds = %dec_label_pc_f324.preheader, %dec_label_pc_f318
  %v0_f31c = phi i32 [ %v2_f2f4, %dec_label_pc_f324.preheader ], [ %v1_f31c, %dec_label_pc_f318 ]
  %v0_f324 = phi i32 [ %v1_f2c4, %dec_label_pc_f324.preheader ], [ %v1_f324, %dec_label_pc_f318 ]
  %v1_f324 = add i32 %v0_f324, -1
  store i32 %v1_f324, i32* %r1.global-to-local, align 4
  %v2_f324 = icmp ne i32 %v0_f324, 0
  store i1 %v2_f324, i1* %cpsr_c.global-to-local, align 1
  %v7_f324 = icmp eq i32 %v0_f324, 1
  store i1 %v7_f324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f324, label %dec_label_pc_f32c, label %dec_label_pc_f300

dec_label_pc_f32c:                                ; preds = %dec_label_pc_f324, %dec_label_pc_f2c0
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f330 = call i32 @function_f9c0(i32 25)
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_f340 = call i32 @function_f8fc(i32 25, i32* nonnull %stack_var_-60)
  %v3_f344 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f340, i32* %r2.global-to-local, align 4
  %v1_f34c = add i32 %v3_f344, -1
  store i32 %v1_f34c, i32* %r3.global-to-local, align 4
  %v0_f350 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f350, i32* %r0.global-to-local, align 4
  %v0_f354 = load i32, i32* @r6, align 4
  %v1_f354 = add i32 %v0_f354, 24
  %v2_f354 = inttoptr i32 %v1_f354 to i32*
  %v3_f354 = load i32, i32* %v2_f354, align 4
  store i32 %v3_f354, i32* %r1.global-to-local, align 4
  %v4_f358 = call i32 @function_ffb8(i32 %v0_f350, i32 %v3_f354, i32 %v3_f340, i32 %v1_f34c)
  store i32 %v4_f358, i32* %r0.global-to-local, align 4
  %v1_f35c = add i32 %v4_f358, 1
  store i32 %v1_f35c, i32* @r7, align 4
  %v2_f35c = icmp eq i32 %v4_f358, -1
  store i1 %v2_f35c, i1* %cpsr_c.global-to-local, align 1
  %v7_f35c = icmp eq i32 %v1_f35c, 0
  store i1 %v7_f35c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f35c, label %thread-pre-split124, label %bb447

bb447:                                            ; preds = %dec_label_pc_f32c
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split124

thread-pre-split124:                              ; preds = %dec_label_pc_f32c, %bb447
  %v0_f364 = phi i1 [ false, %bb447 ], [ true, %dec_label_pc_f32c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f364, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f7b0 = call i32 @function_f920(i32 25)
  br i1 %v0_f364, label %dec_label_pc_f7ac, label %dec_label_pc_f374

dec_label_pc_f374:                                ; preds = %thread-pre-split124, %dec_label_pc_f594
  %storemerge = phi i32 [ %v1_f59c, %dec_label_pc_f594 ], [ %v1_f7b0, %thread-pre-split124 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_f374 = load i32, i32* @r6, align 4
  %v1_f374 = inttoptr i32 %v0_f374 to i32*
  %v2_f374 = load i32, i32* %v1_f374, align 4
  store i32 %v2_f374, i32* %r3.global-to-local, align 4
  %v1_f378 = add i32 %v0_f374, 4
  %v2_f378 = inttoptr i32 %v1_f378 to i32*
  %v3_f378 = load i32, i32* %v2_f378, align 4
  store i32 %v3_f378, i32* %r0.global-to-local, align 4
  %v1_f37c = add i32 %v2_f374, 13
  %v2_f37c = inttoptr i32 %v1_f37c to i8*
  %v3_f37c = load i8, i8* %v2_f37c, align 1
  %v4_f37c = zext i8 %v3_f37c to i32
  store i32 %v4_f37c, i32* %r2.global-to-local, align 4
  %v1_f380 = add i32 %v2_f374, 4
  %v2_f380 = inttoptr i32 %v1_f380 to i32*
  %v3_f380 = load i32, i32* %v2_f380, align 4
  store i32 %v3_f380, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f388 = call i32 @function_110ac(i32 %v3_f378, i32 %v3_f380, i32 %v4_f37c, i32 16384)
  store i32 %v4_f388, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f390 = load i32, i32* @r6, align 4
  %v1_f390 = add i32 %v0_f390, 4
  %v2_f390 = inttoptr i32 %v1_f390 to i32*
  %v3_f390 = load i32, i32* %v2_f390, align 4
  store i32 %v3_f390, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f39c = call i32 @function_110ac(i32 %v3_f390, i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32 2, i32 16384)
  store i32 %v4_f39c, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f3a4 = load i32, i32* @r6, align 4
  %v2_f3a4 = add i32 %v1_f3a4, 12
  %v3_f3a4 = inttoptr i32 %v2_f3a4 to i32*
  store i32 5, i32* %v3_f3a4, align 4
  br label %dec_label_pc_f3a8

dec_label_pc_f3a8:                                ; preds = %dec_label_pc_efbc, %bb434, %dec_label_pc_f4b8, %dec_label_pc_f5f0, %dec_label_pc_f55c, %dec_label_pc_f634, %dec_label_pc_f374
  %v0_f3a8 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3a8 = icmp eq i32 %v0_f3a8, 0
  store i1 %v2_f3a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3a8, label %dec_label_pc_eb90.loopexit, label %dec_label_pc_ed2c

dec_label_pc_f3b4:                                ; preds = %dec_label_pc_ec10
  %v1_f3b4 = add i32 %v0_ec10, 24
  %v2_f3b4 = inttoptr i32 %v1_f3b4 to i32*
  %v3_f3b4 = load i32, i32* %v2_f3b4, align 4
  store i32 %v3_f3b4, i32* %r2.global-to-local, align 4
  %v1_f3b8 = add i32 %v3_f3b4, -1
  store i32 %v1_f3b8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3bc = icmp eq i32 %v1_f3b8, 0
  store i1 %v2_f3bc, i1* %cpsr_z.global-to-local, align 1
  %tmp448 = icmp slt i32 %v1_f3b8, 1
  br i1 %tmp448, label %dec_label_pc_f430, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3b4
  %v2_f3c4 = add i32 %v1_f3b8, %v0_ec10
  store i32 %v2_f3c4, i32* %r3.global-to-local, align 4
  %v1_f3c8 = add i32 %v2_f3c4, 28
  %v2_f3c8 = inttoptr i32 %v1_f3c8 to i8*
  %v3_f3c8 = load i8, i8* %v2_f3c8, align 1
  %v4_f3c8 = zext i8 %v3_f3c8 to i32
  store i32 %v4_f3c8, i32* %r3.global-to-local, align 4
  %v2_f3cc = icmp ugt i8 %v3_f3c8, 61
  store i1 %v2_f3cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3cc = icmp eq i8 %v3_f3c8, 62
  store i1 %v7_f3cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3cc, label %dec_label_pc_f548, label %bb449

bb449:                                            ; preds = %dec_label_pc_f3c4
  %v3_f3d0 = icmp ugt i8 %v3_f3c8, 57
  store i1 %v3_f3d0, i1* %cpsr_c.global-to-local, align 1
  %v8_f3d0 = icmp eq i8 %v3_f3c8, 58
  store i1 %v8_f3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f3d0, label %dec_label_pc_f548, label %dec_label_pc_f3d8

dec_label_pc_f3d8:                                ; preds = %bb449
  %v2_f3d8 = icmp ugt i8 %v3_f3c8, 35
  store i1 %v2_f3d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3d8 = icmp eq i8 %v3_f3c8, 36
  store i1 %v7_f3d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3d8, label %dec_label_pc_f548, label %dec_label_pc_f3e0

dec_label_pc_f3e0:                                ; preds = %dec_label_pc_f3d8
  %v2_f3e0 = icmp ugt i8 %v3_f3c8, 34
  store i1 %v2_f3e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3e0 = icmp eq i8 %v3_f3c8, 35
  store i1 %v7_f3e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3e0, label %dec_label_pc_f548, label %dec_label_pc_f3e8

dec_label_pc_f3e8:                                ; preds = %dec_label_pc_f3e0
  %v2_f3e8 = icmp ugt i8 %v3_f3c8, 36
  store i1 %v2_f3e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3e8 = icmp eq i8 %v3_f3c8, 37
  store i1 %v7_f3e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3e8, label %dec_label_pc_f548, label %dec_label_pc_f428.preheader

dec_label_pc_f428.preheader:                      ; preds = %dec_label_pc_f3e8
  %v3_f3ec = add i32 %v0_ec10, 28
  %v2_f3f0 = add i32 %v3_f3ec, %v3_f3b4
  store i32 %v2_f3f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f428

dec_label_pc_f3fc:                                ; preds = %dec_label_pc_f428
  %v1_f3fc = add i32 %v0_f420, -2
  %v2_f3fc = inttoptr i32 %v1_f3fc to i8*
  %v3_f3fc = load i8, i8* %v2_f3fc, align 1
  %v4_f3fc = zext i8 %v3_f3fc to i32
  store i32 %v4_f3fc, i32* %r2.global-to-local, align 4
  %v2_f400 = icmp ugt i8 %v3_f3fc, 61
  store i1 %v2_f400, i1* %cpsr_c.global-to-local, align 1
  %v7_f400 = icmp eq i8 %v3_f3fc, 62
  store i1 %v7_f400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f400, label %dec_label_pc_f548, label %bb450

bb450:                                            ; preds = %dec_label_pc_f3fc
  %v3_f404 = icmp ugt i8 %v3_f3fc, 57
  store i1 %v3_f404, i1* %cpsr_c.global-to-local, align 1
  %v8_f404 = icmp eq i8 %v3_f3fc, 58
  store i1 %v8_f404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f404, label %dec_label_pc_f548, label %dec_label_pc_f40c

dec_label_pc_f40c:                                ; preds = %bb450
  %v2_f40c = icmp ugt i8 %v3_f3fc, 35
  store i1 %v2_f40c, i1* %cpsr_c.global-to-local, align 1
  %v7_f40c = icmp eq i8 %v3_f3fc, 36
  store i1 %v7_f40c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f40c, label %dec_label_pc_f548, label %dec_label_pc_f414

dec_label_pc_f414:                                ; preds = %dec_label_pc_f40c
  %v2_f414 = icmp ugt i8 %v3_f3fc, 34
  store i1 %v2_f414, i1* %cpsr_c.global-to-local, align 1
  %v7_f414 = icmp eq i8 %v3_f3fc, 35
  store i1 %v7_f414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f414, label %dec_label_pc_f548, label %dec_label_pc_f41c

dec_label_pc_f41c:                                ; preds = %dec_label_pc_f414
  %v2_f41c = icmp ugt i8 %v3_f3fc, 36
  store i1 %v2_f41c, i1* %cpsr_c.global-to-local, align 1
  %v7_f41c = icmp eq i8 %v3_f3fc, 37
  store i1 %v7_f41c, i1* %cpsr_z.global-to-local, align 1
  %v1_f420 = add i32 %v0_f420, -1
  store i32 %v1_f420, i32* %r3.global-to-local, align 4
  br i1 %v7_f41c, label %dec_label_pc_f548, label %dec_label_pc_f428

dec_label_pc_f428:                                ; preds = %dec_label_pc_f428.preheader, %dec_label_pc_f41c
  %v0_f420 = phi i32 [ %v2_f3f0, %dec_label_pc_f428.preheader ], [ %v1_f420, %dec_label_pc_f41c ]
  %v0_f428 = phi i32 [ %v1_f3b8, %dec_label_pc_f428.preheader ], [ %v1_f428, %dec_label_pc_f41c ]
  %v1_f428 = add i32 %v0_f428, -1
  store i32 %v1_f428, i32* %r1.global-to-local, align 4
  %v2_f428 = icmp ne i32 %v0_f428, 0
  store i1 %v2_f428, i1* %cpsr_c.global-to-local, align 1
  %v7_f428 = icmp eq i32 %v0_f428, 1
  store i1 %v7_f428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f428, label %dec_label_pc_f430, label %dec_label_pc_f3fc

dec_label_pc_f430:                                ; preds = %dec_label_pc_f428, %dec_label_pc_f3b4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f434 = call i32 @function_f9c0(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f43c = call i32 @function_f9c0(i32 27)
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_f44c = call i32 @function_f8fc(i32 26, i32* nonnull %stack_var_-60)
  store i32 %v3_f44c, i32* @r4, align 4
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_f460 = call i32 @function_f8fc(i32 27, i32* nonnull %stack_var_-60)
  %v3_f464 = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_f460, 16777216
  %v1_f468 = sdiv i32 %sext, 16777216
  store i32 %v1_f468, i32* @r5, align 4
  %v0_f46c = load i32, i32* @r4, align 4
  store i32 %v0_f46c, i32* %r2.global-to-local, align 4
  %v1_f470 = add i32 %v3_f464, -1
  store i32 %v1_f470, i32* %r3.global-to-local, align 4
  %v0_f474 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f474, i32* %r0.global-to-local, align 4
  %v0_f478 = load i32, i32* @r6, align 4
  %v1_f478 = add i32 %v0_f478, 24
  %v2_f478 = inttoptr i32 %v1_f478 to i32*
  %v3_f478 = load i32, i32* %v2_f478, align 4
  store i32 %v3_f478, i32* %r1.global-to-local, align 4
  %v4_f47c = call i32 @function_ffb8(i32 %v0_f474, i32 %v3_f478, i32 %v0_f46c, i32 %v1_f470)
  store i32 %v4_f47c, i32* %r0.global-to-local, align 4
  %v2_f480 = icmp eq i32 %v4_f47c, -1
  store i1 %v2_f480, i1* %cpsr_c.global-to-local, align 1
  %v7_f480 = icmp eq i32 %v4_f47c, -1
  store i1 %v7_f480, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f480, label %dec_label_pc_f490, label %dec_label_pc_f4b8

dec_label_pc_f490:                                ; preds = %dec_label_pc_f430
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f490 = load i32, i32* %stack_var_-60, align 4
  %v0_f494 = load i32, i32* @r5, align 4
  store i32 %v0_f494, i32* %r2.global-to-local, align 4
  %v1_f498 = add i32 %v3_f490, -1
  store i32 %v1_f498, i32* %r3.global-to-local, align 4
  %v0_f49c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f49c, i32* %r0.global-to-local, align 4
  %v0_f4a0 = load i32, i32* @r6, align 4
  %v1_f4a0 = add i32 %v0_f4a0, 24
  %v2_f4a0 = inttoptr i32 %v1_f4a0 to i32*
  %v3_f4a0 = load i32, i32* %v2_f4a0, align 4
  store i32 %v3_f4a0, i32* %r1.global-to-local, align 4
  %v4_f4a4 = call i32 @function_ffb8(i32 %v0_f49c, i32 %v3_f4a0, i32 %v0_f494, i32 %v1_f498)
  store i32 %v4_f4a4, i32* %r0.global-to-local, align 4
  %v1_f4a8 = add i32 %v4_f4a4, 1
  store i32 %v1_f4a8, i32* @r7, align 4
  %v2_f4a8 = icmp eq i32 %v4_f4a4, -1
  store i1 %v2_f4a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4a8 = icmp eq i32 %v1_f4a8, 0
  store i1 %v7_f4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4a8, label %dec_label_pc_f76c, label %dec_label_pc_f4b8

dec_label_pc_f4b8:                                ; preds = %dec_label_pc_f490, %dec_label_pc_f430
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f4bc = call i32 @function_f920(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f4c4 = call i32 @function_f920(i32 27)
  store i32 %v1_f4c4, i32* %r0.global-to-local, align 4
  %v0_f4c8 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f4c8 = icmp eq i32 %v0_f4c8, 0
  store i1 %v2_f4c8, i1* %cpsr_z.global-to-local, align 1
  %tmp451 = icmp slt i32 %v0_f4c8, 1
  br i1 %tmp451, label %dec_label_pc_f3a8, label %dec_label_pc_f55c

dec_label_pc_f4d4:                                ; preds = %dec_label_pc_ef40
  store i32 ptrtoint (i32* @global_var_15da0.184 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f4d8, i32* @r0, align 4
  %v0_f4f0 = call i32 @function_10ef0()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f4ec, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_15d97.186 to i32), i32* @r1, align 4
  %v0_f500 = call i32 @function_10ef0()
  store i32 %v0_f500, i32* %r0.global-to-local, align 4
  %v0_f504 = load i32, i32* @r6, align 4
  %v1_f504 = add i32 %v0_f504, 24
  %v2_f504 = inttoptr i32 %v1_f504 to i32*
  %v3_f504 = load i32, i32* %v2_f504, align 4
  %v0_f508 = load i32, i32* @r4, align 4
  %v1_f508 = add i32 %v0_f508, 2
  store i32 %v1_f508, i32* %r2.global-to-local, align 4
  %v0_f50c = load i32, i32* %sb.global-to-local, align 4
  %v2_f50c = add i32 %v0_f50c, %v3_f504
  store i32 %v2_f50c, i32* @r3, align 4
  %v3_f510 = icmp uge i32 %v2_f50c, %v1_f508
  store i1 %v3_f510, i1* %cpsr_c.global-to-local, align 1
  %v9_f510 = icmp eq i32 %v2_f50c, %v1_f508
  store i1 %v9_f510, i1* %cpsr_z.global-to-local, align 1
  %v2_f514 = xor i1 %v3_f510, true
  %v3_f514 = or i1 %v9_f510, %v2_f514
  br i1 %v3_f514, label %dec_label_pc_f4d4.dec_label_pc_efbc.loopexit_crit_edge, label %dec_label_pc_f518

dec_label_pc_f4d4.dec_label_pc_efbc.loopexit_crit_edge: ; preds = %dec_label_pc_f4d4
  %v0_efbc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_efbc

dec_label_pc_f518:                                ; preds = %dec_label_pc_f4d4
  %v2_f518 = inttoptr i32 %v1_f508 to i8*
  %v3_f518 = load i8, i8* %v2_f518, align 1
  %v4_f518 = zext i8 %v3_f518 to i32
  store i32 %v4_f518, i32* %r3.global-to-local, align 4
  %v2_f51c = icmp ugt i8 %v3_f518, 30
  store i1 %v2_f51c, i1* %cpsr_c.global-to-local, align 1
  %v7_f51c = icmp eq i8 %v3_f518, 31
  store i1 %v7_f51c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f51c, label %dec_label_pc_f64c, label %dec_label_pc_f524

dec_label_pc_f524:                                ; preds = %dec_label_pc_f518
  %v1_f524 = inttoptr i32 %v0_f508 to i8*
  %v2_f524 = load i8, i8* %v1_f524, align 1
  %v3_f524 = zext i8 %v2_f524 to i32
  store i32 %v3_f524, i32* %r3.global-to-local, align 4
  %v2_f528 = icmp ugt i8 %v2_f524, -4
  store i1 %v2_f528, i1* %cpsr_c.global-to-local, align 1
  %v7_f528 = icmp eq i8 %v2_f524, -3
  store i1 %v7_f528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f528, label %.thread138, label %dec_label_pc_f538

.thread138:                                       ; preds = %dec_label_pc_f524
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f524, align 1
  %v0_f534.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f534.pr.pr, label %dec_label_pc_ef54, label %.thread138.dec_label_pc_f538thread-pre-split_crit_edge

.thread138.dec_label_pc_f538thread-pre-split_crit_edge: ; preds = %.thread138
  %v0_f538.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f538

dec_label_pc_f538:                                ; preds = %dec_label_pc_f524, %.thread138.dec_label_pc_f538thread-pre-split_crit_edge
  %v0_f538.pr = phi i32 [ %v0_f538.pr.pre, %.thread138.dec_label_pc_f538thread-pre-split_crit_edge ], [ %v3_f524, %dec_label_pc_f524 ]
  %v2_f538 = icmp ugt i32 %v0_f538.pr, 250
  store i1 %v2_f538, i1* %cpsr_c.global-to-local, align 1
  %v7_f538 = icmp eq i32 %v0_f538.pr, 251
  store i1 %v7_f538, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f538, label %bb452, label %dec_label_pc_ef54

bb452:                                            ; preds = %dec_label_pc_f538
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f540 = load i32, i32* @r4, align 4
  %v4_f540 = inttoptr i32 %v3_f540 to i8*
  store i8 -3, i8* %v4_f540, align 1
  br label %dec_label_pc_ef54

dec_label_pc_f548:                                ; preds = %dec_label_pc_f3fc, %dec_label_pc_f41c, %dec_label_pc_f414, %dec_label_pc_f40c, %bb450, %dec_label_pc_f3e8, %dec_label_pc_f3c4, %dec_label_pc_f3e0, %dec_label_pc_f3d8, %bb449
  %v0_f54c = phi i32 [ %v1_f3b8, %dec_label_pc_f3e8 ], [ %v1_f3b8, %dec_label_pc_f3c4 ], [ %v1_f3b8, %dec_label_pc_f3e0 ], [ %v1_f3b8, %dec_label_pc_f3d8 ], [ %v1_f3b8, %bb449 ], [ %v1_f428, %bb450 ], [ %v1_f428, %dec_label_pc_f40c ], [ %v1_f428, %dec_label_pc_f414 ], [ %v1_f428, %dec_label_pc_f41c ], [ %v1_f428, %dec_label_pc_f3fc ]
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f54c = add i32 %v0_f54c, 1
  store i32 %v1_f54c, i32* @r7, align 4
  %v1_f550 = call i32 @function_f920(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f558 = call i32 @function_f920(i32 27)
  store i32 %v1_f558, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f55c

dec_label_pc_f55c:                                ; preds = %dec_label_pc_f4b8, %dec_label_pc_f548
  %v0_f55c = load i32, i32* @r6, align 4
  %v1_f55c = inttoptr i32 %v0_f55c to i32*
  %v2_f55c = load i32, i32* %v1_f55c, align 4
  store i32 %v2_f55c, i32* %r3.global-to-local, align 4
  %v1_f560 = add i32 %v0_f55c, 4
  %v2_f560 = inttoptr i32 %v1_f560 to i32*
  %v3_f560 = load i32, i32* %v2_f560, align 4
  store i32 %v3_f560, i32* %r0.global-to-local, align 4
  %v1_f564 = add i32 %v2_f55c, 12
  %v2_f564 = inttoptr i32 %v1_f564 to i8*
  %v3_f564 = load i8, i8* %v2_f564, align 1
  %v4_f564 = zext i8 %v3_f564 to i32
  store i32 %v4_f564, i32* %r2.global-to-local, align 4
  %v1_f568 = inttoptr i32 %v2_f55c to i32*
  %v2_f568 = load i32, i32* %v1_f568, align 4
  store i32 %v2_f568, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f570 = call i32 @function_110ac(i32 %v3_f560, i32 %v2_f568, i32 %v4_f564, i32 16384)
  store i32 %v4_f570, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f578 = load i32, i32* @r6, align 4
  %v1_f578 = add i32 %v0_f578, 4
  %v2_f578 = inttoptr i32 %v1_f578 to i32*
  %v3_f578 = load i32, i32* %v2_f578, align 4
  store i32 %v3_f578, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f584 = call i32 @function_110ac(i32 %v3_f578, i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), i32 2, i32 16384)
  store i32 %v4_f584, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f58c = load i32, i32* @r6, align 4
  %v2_f58c = add i32 %v1_f58c, 12
  %v3_f58c = inttoptr i32 %v2_f58c to i32*
  store i32 4, i32* %v3_f58c, align 4
  br label %dec_label_pc_f3a8

dec_label_pc_f594:                                ; preds = %dec_label_pc_f300, %dec_label_pc_f318, %dec_label_pc_f310, %bb446, %dec_label_pc_f2ec, %dec_label_pc_f2d0, %dec_label_pc_f2e4, %bb445
  %v0_f598 = phi i32 [ %v1_f2c4, %dec_label_pc_f2ec ], [ %v1_f2c4, %dec_label_pc_f2d0 ], [ %v1_f2c4, %dec_label_pc_f2e4 ], [ %v1_f2c4, %bb445 ], [ %v1_f324, %bb446 ], [ %v1_f324, %dec_label_pc_f310 ], [ %v1_f324, %dec_label_pc_f318 ], [ %v1_f324, %dec_label_pc_f300 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f598 = add i32 %v0_f598, 1
  store i32 %v1_f598, i32* @r7, align 4
  %v1_f59c = call i32 @function_f920(i32 25)
  br label %dec_label_pc_f374

dec_label_pc_f5a4:                                ; preds = %dec_label_pc_ecb0
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f5b0 = call i32 @function_f9c0(i32 9)
  store i32 %v2_f444, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f5c0 = call i32 @function_f8fc(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f5c0, i32* %r0.global-to-local, align 4
  %v3_f5c4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f5c0, i32* %r2.global-to-local, align 4
  %v1_f5cc = add i32 %v3_f5c4, -1
  store i32 %v1_f5cc, i32* %r3.global-to-local, align 4
  %v0_f5d0 = load i32, i32* @r6, align 4
  %v1_f5d0 = add i32 %v0_f5d0, 24
  %v2_f5d0 = inttoptr i32 %v1_f5d0 to i32*
  %v3_f5d0 = load i32, i32* %v2_f5d0, align 4
  store i32 %v3_f5d0, i32* %r1.global-to-local, align 4
  %v0_f5d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f5d4, i32* %r0.global-to-local, align 4
  %v4_f5d8 = call i32 @function_ffb8(i32 %v0_f5d4, i32 %v3_f5d0, i32 %v3_f5c0, i32 %v1_f5cc)
  store i32 %v4_f5d8, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f5e4 = call i32 @function_f920(i32 9)
  store i32 %v1_f5e4, i32* @r0, align 4
  %v0_f5e8 = load i32, i32* @r7, align 4
  %v2_f5e8 = icmp eq i32 %v0_f5e8, -1
  store i1 %v2_f5e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5e8 = icmp eq i32 %v0_f5e8, -1
  store i1 %v7_f5e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5e8, label %dec_label_pc_eb90.loopexit, label %dec_label_pc_f5f0

dec_label_pc_f5f0:                                ; preds = %dec_label_pc_f5a4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5f0 = icmp eq i32 %v0_f5e8, 0
  store i1 %v2_f5f0, i1* %cpsr_z.global-to-local, align 1
  %tmp453 = icmp slt i32 %v0_f5e8, 1
  br i1 %tmp453, label %dec_label_pc_f3a8, label %dec_label_pc_f5f8

dec_label_pc_f5f8:                                ; preds = %dec_label_pc_f5f0
  %v0_f5f8 = load i32, i32* @r6, align 4
  %v1_f5f8 = add i32 %v0_f5f8, 20
  %v2_f5f8 = inttoptr i32 %v1_f5f8 to i16*
  %v3_f5f8 = load i16, i16* %v2_f5f8, align 2
  %v4_f5f8 = zext i16 %v3_f5f8 to i32
  store i32 %v4_f5f8, i32* %r3.global-to-local, align 4
  %v1_f5fc = add i32 %v0_f5f8, 16
  %v2_f5fc = inttoptr i32 %v1_f5fc to i32*
  %v3_f5fc = load i32, i32* %v2_f5fc, align 4
  store i32 %v3_f5fc, i32* %r2.global-to-local, align 4
  store i32 %v2_f600, i32* @ip, align 4
  store i32 %v4_f5f8, i32* %stack_var_-42, align 4
  store i32 %v3_f5fc, i32* %stack_var_-60, align 4
  %v1_f60c = inttoptr i32 %v0_f5f8 to i32*
  %v2_f60c = load i32, i32* %v1_f60c, align 4
  store i32 %v2_f60c, i32* @r8, align 4
  %v0_f610 = call i32 @function_106b0()
  store i32 %v0_f610, i32* %r0.global-to-local, align 4
  %v7_f614 = icmp eq i32 %v0_f610, -1
  %.463 = zext i1 %v7_f614 to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f620 = icmp eq i32 %v0_f610, 0
  store i1 %v2_f620, i1* %cpsr_z.global-to-local, align 1
  %tmp456 = icmp slt i32 %v0_f610, 1
  br i1 %tmp456, label %bb457, label %.thread144

.thread144:                                       ; preds = %dec_label_pc_f5f8
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f634

bb457:                                            ; preds = %dec_label_pc_f5f8
  store i32 %.463, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f62c = icmp eq i1 %v7_f614, false
  store i1 %v2_f62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f62c, label %dec_label_pc_f7bc, label %dec_label_pc_f634

dec_label_pc_f634:                                ; preds = %.thread144, %bb457
  %v0_f634 = load i32, i32* @r6, align 4
  %v1_f634 = add i32 %v0_f634, 4
  %v2_f634 = inttoptr i32 %v1_f634 to i32*
  %v3_f634 = load i32, i32* %v2_f634, align 4
  store i32 %v3_f634, i32* %r0.global-to-local, align 4
  %v1_f638 = call i32 @function_109c0(i32 %v3_f634)
  store i32 %v1_f638, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_f640 = load i32, i32* @r4, align 4
  %v1_f640 = load i32, i32* @r6, align 4
  %v2_f640 = add i32 %v1_f640, 4
  %v3_f640 = inttoptr i32 %v2_f640 to i32*
  store i32 %v0_f640, i32* %v3_f640, align 4
  %v0_f644 = load i32, i32* @r3, align 4
  %v1_f644 = load i32, i32* @r6, align 4
  %v2_f644 = add i32 %v1_f644, 12
  %v3_f644 = inttoptr i32 %v2_f644 to i32*
  store i32 %v0_f644, i32* %v3_f644, align 4
  br label %dec_label_pc_f3a8

dec_label_pc_f64c:                                ; preds = %dec_label_pc_f518
  store i32 %v2_f4d8, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f658 = add i32 %v0_f504, 4
  %v2_f658 = inttoptr i32 %v1_f658 to i32*
  %v3_f658 = load i32, i32* %v2_f658, align 4
  store i32 %v3_f658, i32* %r0.global-to-local, align 4
  %v4_f65c = call i32 @function_110ac(i32 %v3_f658, i32 %v2_f4d8, i32 3, i32 16384)
  store i32 %v4_f65c, i32* %r0.global-to-local, align 4
  %v0_f660 = load i32, i32* @r6, align 4
  %v1_f660 = add i32 %v0_f660, 4
  %v2_f660 = inttoptr i32 %v1_f660 to i32*
  %v3_f660 = load i32, i32* %v2_f660, align 4
  store i32 %v3_f660, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_efa0

dec_label_pc_f670:                                ; preds = %dec_label_pc_eb9c
  store i32 %.pre282, i32* @r0, align 4
  %v1_f678 = add i32 %v0_f670, 92
  store i32 %v1_f678, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_f680 = call i32 @function_10ee0(i32 %.pre282, i32 %v1_f678, i32 192)
  store i32 %v3_f680, i32* %r0.global-to-local, align 4
  %v0_f684 = load i32, i32* @r6, align 4
  %v1_f684 = add i32 %v0_f684, 24
  %v2_f684 = inttoptr i32 %v1_f684 to i32*
  %v3_f684 = load i32, i32* %v2_f684, align 4
  %v1_f688 = add i32 %v3_f684, -64
  store i32 %v1_f688, i32* %r3.global-to-local, align 4
  store i32 %v1_f688, i32* %v2_f684, align 4
  br label %dec_label_pc_ebac

dec_label_pc_f694:                                ; preds = %dec_label_pc_ecec
  %v0_f694 = load i32, i32* @r6, align 4
  store i32 %v0_f694, i32* @r0, align 4
  %v0_f698 = call i32 @function_df84()
  store i32 %v0_f698, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed28

dec_label_pc_f6a0:                                ; preds = %dec_label_pc_eb54
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_e2c4, i32* %r3.global-to-local, align 4
  store i32 %v2_f444, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i8 0, i8* %stack_var_-56, align 1
  %v5_f6c8 = call i32 @function_10ff4(i32 %v3_eb48, i32 1, i32 4, i32 %v2_e2c4, i32 %v2_f444)
  %v3_f6cc = load i8, i8* %stack_var_-56, align 1
  %v4_f6cc = sext i8 %v3_f6cc to i32
  store i32 %v4_f6cc, i32* %r3.global-to-local, align 4
  %v2_f6d0 = or i32 %v4_f6cc, %v5_f6c8
  store i32 %v2_f6d0, i32* %r0.global-to-local, align 4
  %v4_f6d0 = icmp eq i32 %v2_f6d0, 0
  store i1 %v4_f6d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f6d0, label %dec_label_pc_f6d8, label %dec_label_pc_f784

dec_label_pc_f6d8:                                ; preds = %dec_label_pc_f6a0
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_f6dc = load i32, i32* @r6, align 4
  %v2_f6dc = add i32 %v1_f6dc, 12
  %v3_f6dc = inttoptr i32 %v2_f6dc to i32*
  store i32 2, i32* %v3_f6dc, align 4
  %v0_f6e0 = call i32 @function_dd14()
  store i32 %v0_f6e0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_1e568.122 to i32), i32* %r3.global-to-local, align 4
  %v2_f6e8 = load i16, i16* bitcast (i16** @global_var_1e568.122 to i16*), align 4
  %v3_f6e8 = zext i16 %v2_f6e8 to i32
  store i32 %v3_f6e8, i32* %r1.global-to-local, align 4
  %v3_f6ec = call i32 @function_10558(i32 %v0_f6e0, i32 %v3_f6e8)
  store i32 %v3_f6ec, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e538.118 to i32), i32* %r3.global-to-local, align 4
  %v2_f6f4 = load i32, i32* @global_var_1e538.118, align 4
  store i32 %v2_f6f4, i32* %ip.global-to-local, align 4
  %v1_f6fc = load i32, i32* @r4, align 4
  %v9_f6fc = icmp eq i32 %v2_f6f4, %v1_f6fc
  store i1 %v9_f6fc, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_f6e8, i32* %r1.global-to-local, align 4
  %v7_f704 = icmp sgt i32 %v2_f6f4, %v1_f6fc
  br i1 %v7_f704, label %dec_label_pc_f708, label %dec_label_pc_f748

dec_label_pc_f708:                                ; preds = %dec_label_pc_f6d8
  %v2_f70c = load i32, i32* @global_var_1e564.120, align 4
  store i32 %v2_f70c, i32* %r3.global-to-local, align 4
  store i32 %v1_f6fc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f728

dec_label_pc_f718:                                ; preds = %dec_label_pc_f738, %dec_label_pc_f728
  %v1_f718 = add i32 %v0_f718, 1
  store i32 %v1_f718, i32* %r2.global-to-local, align 4
  %v9_f71c = icmp eq i32 %v1_f718, %v2_f6f4
  %v1_f720 = add i32 %v0_f720, 16
  store i32 %v1_f720, i32* %r3.global-to-local, align 4
  br i1 %v9_f71c, label %dec_label_pc_f748.loopexit, label %dec_label_pc_f728

dec_label_pc_f728:                                ; preds = %dec_label_pc_f718, %dec_label_pc_f708
  %v0_f718 = phi i32 [ %v1_f718, %dec_label_pc_f718 ], [ %v1_f6fc, %dec_label_pc_f708 ]
  %v0_f720 = phi i32 [ %v1_f720, %dec_label_pc_f718 ], [ %v2_f70c, %dec_label_pc_f708 ]
  store i32 %v0_f720, i32* %r0.global-to-local, align 4
  %v1_f72c = add i32 %v0_f720, 8
  %v2_f72c = inttoptr i32 %v1_f72c to i16*
  %v3_f72c = load i16, i16* %v2_f72c, align 2
  %v4_f72c = zext i16 %v3_f72c to i32
  store i32 %v4_f72c, i32* %r3.global-to-local, align 4
  %tmp458 = icmp ugt i16 %v3_f72c, %v2_f6e8
  br i1 %tmp458, label %dec_label_pc_f718, label %dec_label_pc_f738

dec_label_pc_f738:                                ; preds = %dec_label_pc_f728
  %v1_f738 = add i32 %v0_f720, 10
  %v2_f738 = inttoptr i32 %v1_f738 to i16*
  %v3_f738 = load i16, i16* %v2_f738, align 2
  %v4_f738 = zext i16 %v3_f738 to i32
  store i32 %v4_f738, i32* %r3.global-to-local, align 4
  %v3_f73c = icmp uge i16 %v3_f738, %v2_f6e8
  %v9_f73c = icmp eq i16 %v3_f738, %v2_f6e8
  %v2_f740 = xor i1 %v3_f73c, true
  %v3_f740 = or i1 %v9_f73c, %v2_f740
  br i1 %v3_f740, label %dec_label_pc_f718, label %dec_label_pc_f74c.loopexit

dec_label_pc_f748.loopexit:                       ; preds = %dec_label_pc_f718
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_f748.loopexit, %dec_label_pc_f6d8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f74c

dec_label_pc_f74c.loopexit:                       ; preds = %dec_label_pc_f738
  store i1 %v3_f73c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f74c

dec_label_pc_f74c:                                ; preds = %dec_label_pc_f74c.loopexit, %dec_label_pc_f748
  %v0_f760 = phi i32 [ %v0_f720, %dec_label_pc_f74c.loopexit ], [ 0, %dec_label_pc_f748 ]
  %v0_f74c = load i32, i32* @r6, align 4
  %v1_f74c = add i32 %v0_f74c, 4
  %v2_f74c = inttoptr i32 %v1_f74c to i32*
  %v3_f74c = load i32, i32* %v2_f74c, align 4
  %v3_f750 = udiv i32 %v3_f74c, 32
  store i32 %v3_f750, i32* %r2.global-to-local, align 4
  %v1_f754 = urem i32 %v3_f74c, 32
  store i32 %v1_f754, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f758 = mul nuw nsw i32 %v3_f750, 4
  store i32 %v3_f758, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f760 = inttoptr i32 %v0_f74c to i32*
  store i32 %v0_f760, i32* %v2_f760, align 4
  %v0_f764 = load i32, i32* %r3.global-to-local, align 4
  %v1_f764 = load i32, i32* @r6, align 4
  %v2_f764 = add i32 %v1_f764, 24
  %v3_f764 = inttoptr i32 %v2_f764 to i32*
  store i32 %v0_f764, i32* %v3_f764, align 4
  %v0_eb7c.pre = load i32, i32* @ip, align 4
  %v1_eb84.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eb78

dec_label_pc_f76c:                                ; preds = %dec_label_pc_f490
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f770 = call i32 @function_f920(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f778 = call i32 @function_f920(i32 27)
  store i32 %v1_f778, i32* %r0.global-to-local, align 4
  %v0_f77c = load i32, i32* @r6, align 4
  %v1_f77c = add i32 %v0_f77c, 12
  %v2_f77c = inttoptr i32 %v1_f77c to i32*
  %v3_f77c = load i32, i32* %v2_f77c, align 4
  store i32 %v3_f77c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb94.backedge

dec_label_pc_f784:                                ; preds = %dec_label_pc_f6a0
  %v0_f784 = load i32, i32* @r6, align 4
  %v1_f784 = add i32 %v0_f784, 4
  %v2_f784 = inttoptr i32 %v1_f784 to i32*
  %v3_f784 = load i32, i32* %v2_f784, align 4
  store i32 %v3_f784, i32* %r0.global-to-local, align 4
  %v1_f788 = call i32 @function_109c0(i32 %v3_f784)
  store i32 %v1_f788, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_f790 = load i32, i32* @r4, align 4
  %v1_f790 = load i32, i32* @r6, align 4
  %v2_f790 = add i32 %v1_f790, 12
  %v3_f790 = inttoptr i32 %v2_f790 to i32*
  store i32 %v0_f790, i32* %v3_f790, align 4
  %v0_f794 = load i32, i32* %r3.global-to-local, align 4
  %v1_f794 = load i32, i32* @r6, align 4
  %v2_f794 = add i32 %v1_f794, 4
  %v3_f794 = inttoptr i32 %v2_f794 to i32*
  store i32 %v0_f794, i32* %v3_f794, align 4
  %v0_f798 = load i32, i32* @r4, align 4
  %v1_f798 = trunc i32 %v0_f798 to i8
  %v2_f798 = load i32, i32* @r6, align 4
  %v3_f798 = add i32 %v2_f798, 284
  %v4_f798 = inttoptr i32 %v3_f798 to i8*
  store i8 %v1_f798, i8* %v4_f798, align 1
  br label %dec_label_pc_ec98

dec_label_pc_f7a0:                                ; preds = %dec_label_pc_ec48
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_f7a4 = load i32, i32* %fp.global-to-local, align 4
  %v2_f7a4 = inttoptr i32 %v1_f7a4 to i32*
  store i32 104, i32* %v2_f7a4, align 4
  br label %dec_label_pc_ec60

dec_label_pc_f7ac:                                ; preds = %thread-pre-split124
  store i32 %v1_f7b0, i32* %r0.global-to-local, align 4
  %v0_f7b4 = load i32, i32* @r6, align 4
  %v1_f7b4 = add i32 %v0_f7b4, 12
  %v2_f7b4 = inttoptr i32 %v1_f7b4 to i32*
  %v3_f7b4 = load i32, i32* %v2_f7b4, align 4
  store i32 %v3_f7b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb94.backedge

dec_label_pc_eb94.backedge.thread:                ; preds = %dec_label_pc_ed54, %dec_label_pc_ee28, %dec_label_pc_efcc, %dec_label_pc_f0a0, %dec_label_pc_f1ec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb9c

dec_label_pc_eb94.backedge.thread559:             ; preds = %dec_label_pc_f104, %dec_label_pc_f030, %dec_label_pc_f250, %dec_label_pc_ee8c, %dec_label_pc_edb8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb9c

dec_label_pc_eb94.backedge:                       ; preds = %dec_label_pc_ec10, %dec_label_pc_f7ac, %dec_label_pc_f76c
  %v0_eb9c228 = phi i32 [ %v0_f77c, %dec_label_pc_f76c ], [ %v0_f7b4, %dec_label_pc_f7ac ], [ %v0_ec10, %dec_label_pc_ec10 ]
  %v0_eb94.be = phi i32 [ %v3_f77c, %dec_label_pc_f76c ], [ %v3_f7b4, %dec_label_pc_f7ac ], [ %v3_ec10, %dec_label_pc_ec10 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb94 = icmp eq i32 %v0_eb94.be, 0
  store i1 %v2_eb94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb94, label %dec_label_pc_ec98, label %dec_label_pc_eb9c

dec_label_pc_f7bc:                                ; preds = %bb457
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f7c8 = call i32 @function_11168(i32 2, i32 1, i32 0)
  store i32 %v3_f7c8, i32* %r0.global-to-local, align 4
  %v2_f7cc = icmp eq i32 %v3_f7c8, -1
  store i1 %v2_f7cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7cc = icmp eq i32 %v3_f7c8, -1
  store i1 %v7_f7cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f7c8, i32* @r4, align 4
  br i1 %v7_f7cc, label %dec_label_pc_f850, label %dec_label_pc_f7d8

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f7bc
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f7dc = call i32 @function_f9c0(i32 2)
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([14 x i8]* @global_var_15cf0.71 to i32), i32* @r0, align 4
  %v2_f7f0 = call i32 @function_10f24(i32 ptrtoint ([14 x i8]* @global_var_15cf0.71 to i32))
  %v0_f7f4 = load i32, i32* @r5, align 4
  store i32 %v0_f7f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_f800 = inttoptr i32 %v0_f7f4 to i32*
  %v3_f800 = call i32 @function_f8fc(i32 2, i32* %v2_f800)
  store i32 %v2_f600, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f814 = call i32 @function_f920(i32 2)
  %v0_f81c = load i32, i32* @r4, align 4
  store i32 %v0_f81c, i32* %r0.global-to-local, align 4
  store i32 %v2_e4d0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f828 = call i32 @function_10f84(i32 %v0_f81c, i32 %v2_e4d0, i32 16)
  store i32 %v3_f828, i32* %r0.global-to-local, align 4
  %v3_f82c = icmp eq i32 %v3_f828, -1
  store i1 %v3_f82c, i1* %cpsr_c.global-to-local, align 1
  %v8_f82c = icmp eq i32 %v3_f828, -1
  store i1 %v8_f82c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f82c, label %dec_label_pc_f834, label %dec_label_pc_f858

dec_label_pc_f834:                                ; preds = %dec_label_pc_f7d8
  %v0_f834 = load i32, i32* @r4, align 4
  store i32 %v0_f834, i32* %r0.global-to-local, align 4
  %v1_f838 = call i32 @function_109c0(i32 %v0_f834)
  %v0_f83c = load i32, i32* @r5, align 4
  store i32 %v0_f83c, i32* %r0.global-to-local, align 4
  %v1_f840 = call i32 @function_129bc(i32 %v0_f83c)
  store i32 %v1_f840, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f844

dec_label_pc_f844:                                ; preds = %dec_label_pc_e2a0, %dec_label_pc_f834
  store i32 ptrtoint (i32* @global_var_205c0.130 to i32), i32* %ip.global-to-local, align 4
  %v2_f848 = load i32, i32* @global_var_205c0.130, align 4
  store i32 %v2_f848, i32* %r0.global-to-local, align 4
  %v1_f84c = call i32 @function_109c0(i32 %v2_f848)
  store i32 %v1_f84c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f850

dec_label_pc_f850:                                ; preds = %dec_label_pc_e27c.dec_label_pc_f850_crit_edge, %dec_label_pc_f7bc, %dec_label_pc_f858, %dec_label_pc_f844
  %.pre.pre-phi = phi i32 [ %.pre283, %dec_label_pc_e27c.dec_label_pc_f850_crit_edge ], [ %v2_e2c4, %dec_label_pc_f7bc ], [ %v2_f858.pre-phi, %dec_label_pc_f858 ], [ %v2_e2c4, %dec_label_pc_f844 ]
  %v0_f850 = load i32, i32* @r5, align 4
  store i32 %v0_f850, i32* %r0.global-to-local, align 4
  %v1_f854 = call i32 @function_129bc(i32 %v0_f850)
  store i32 %v1_f854, i32* %r0.global-to-local, align 4
  %.pre281 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_f858

dec_label_pc_f858:                                ; preds = %dec_label_pc_f7d8, %dec_label_pc_f850
  %v2_f878.pre-phi = phi i32 [ %v2_f444, %dec_label_pc_f7d8 ], [ %.pre281, %dec_label_pc_f850 ]
  %v2_f858.pre-phi = phi i32 [ %v2_e2c4, %dec_label_pc_f7d8 ], [ %.pre.pre-phi, %dec_label_pc_f850 ]
  store i32 %v2_f858.pre-phi, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f864 = load i32, i32* @r4, align 4
  store i32 %v0_f864, i32* %r0.global-to-local, align 4
  %v0_f868 = load i32, i32* @r5, align 4
  %v6_f868 = trunc i32 %v0_f868 to i8
  store i8 %v6_f868, i8* %stack_var_-56, align 1
  %v6_f86c = call i32 @function_110ac(i32 %v0_f864, i32 %v2_f858.pre-phi, i32 1, i32 16384)
  %v0_f874 = load i32, i32* @r4, align 4
  store i32 %v0_f874, i32* %r0.global-to-local, align 4
  store i32 %v2_f878.pre-phi, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f884 = call i32 @function_110ac(i32 %v0_f874, i32 %v2_f878.pre-phi, i32 4, i32 16384)
  %v0_f88c = load i32, i32* @r4, align 4
  store i32 %v0_f88c, i32* %r0.global-to-local, align 4
  %v2_f890 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_f890, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f89c = call i32 @function_110ac(i32 %v0_f88c, i32 %v2_f890, i32 2, i32 16384)
  %v0_f8a0 = load i32, i32* @r8, align 4
  %v1_f8a0 = add i32 %v0_f8a0, 12
  store i32 %v1_f8a0, i32* %r1.global-to-local, align 4
  %v0_f8a4 = load i32, i32* @r4, align 4
  store i32 %v0_f8a4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8b0 = call i32 @function_110ac(i32 %v0_f8a4, i32 %v1_f8a0, i32 1, i32 16384)
  store i32 %v4_f8b0, i32* %r0.global-to-local, align 4
  %v0_f8b4 = load i32, i32* @r8, align 4
  %v1_f8b4 = inttoptr i32 %v0_f8b4 to i32*
  %v2_f8b4 = load i32, i32* %v1_f8b4, align 4
  store i32 %v2_f8b4, i32* %r1.global-to-local, align 4
  %v1_f8b8 = add i32 %v0_f8b4, 12
  %v2_f8b8 = inttoptr i32 %v1_f8b8 to i8*
  %v3_f8b8 = load i8, i8* %v2_f8b8, align 1
  %v4_f8b8 = zext i8 %v3_f8b8 to i32
  store i32 %v4_f8b8, i32* %r2.global-to-local, align 4
  %v0_f8bc = load i32, i32* @r4, align 4
  store i32 %v0_f8bc, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8c4 = call i32 @function_110ac(i32 %v0_f8bc, i32 %v2_f8b4, i32 %v4_f8b8, i32 16384)
  %v0_f8c8 = load i32, i32* @r8, align 4
  %v1_f8c8 = add i32 %v0_f8c8, 13
  store i32 %v1_f8c8, i32* %r1.global-to-local, align 4
  %v0_f8cc = load i32, i32* @r4, align 4
  store i32 %v0_f8cc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8d8 = call i32 @function_110ac(i32 %v0_f8cc, i32 %v1_f8c8, i32 1, i32 16384)
  %v0_f8dc = load i32, i32* @r4, align 4
  store i32 %v0_f8dc, i32* %r0.global-to-local, align 4
  %v0_f8e0 = load i32, i32* @r8, align 4
  %v1_f8e0 = add i32 %v0_f8e0, 13
  %v2_f8e0 = inttoptr i32 %v1_f8e0 to i8*
  %v3_f8e0 = load i8, i8* %v2_f8e0, align 1
  %v4_f8e0 = zext i8 %v3_f8e0 to i32
  store i32 %v4_f8e0, i32* %r2.global-to-local, align 4
  %v1_f8e4 = add i32 %v0_f8e0, 4
  %v2_f8e4 = inttoptr i32 %v1_f8e4 to i32*
  %v3_f8e4 = load i32, i32* %v2_f8e4, align 4
  store i32 %v3_f8e4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8ec = call i32 @function_110ac(i32 %v0_f8dc, i32 %v3_f8e4, i32 %v4_f8e0, i32 16384)
  %v0_f8f0 = load i32, i32* @r4, align 4
  store i32 %v0_f8f0, i32* %r0.global-to-local, align 4
  %v1_f8f4 = call i32 @function_109c0(i32 %v0_f8f0)
  store i32 %v1_f8f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f850

; uselistorder directives
  uselistorder i32 %v2_f858.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v2_f878.pre-phi, { 1, 0 }
  uselistorder i1 %v7_f7cc, { 1, 0 }
  uselistorder i32 %v3_f7c8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_f74c, { 1, 0 }
  uselistorder i1 %v3_f73c, { 1, 0 }
  uselistorder i32 %v0_f720, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_f6f4, { 0, 2, 1, 3 }
  uselistorder i32 %v3_f660, { 1, 0 }
  uselistorder i1 %v2_f62c, { 1, 0 }
  uselistorder i32 %.463, { 1, 0 }
  uselistorder i1 %v7_f614, { 1, 0 }
  uselistorder i32 %v0_f610, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f5e8, { 1, 0 }
  uselistorder i32 %v0_f5e8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f538.pr, { 1, 0 }
  uselistorder i32 %v0_f504, { 1, 2, 0 }
  uselistorder i32 %v4_f4a4, { 1, 0, 2 }
  uselistorder i1 %v7_f480, { 1, 0 }
  uselistorder i32 %v1_f428, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f428, { 0, 2, 1 }
  uselistorder i32 %v0_f420, { 1, 0 }
  uselistorder i1 %v7_f41c, { 1, 0 }
  uselistorder i1 %v7_f414, { 1, 0 }
  uselistorder i1 %v7_f40c, { 1, 0 }
  uselistorder i1 %v8_f404, { 1, 0 }
  uselistorder i1 %v7_f3e8, { 1, 0 }
  uselistorder i1 %v7_f3e0, { 1, 0 }
  uselistorder i1 %v7_f3d8, { 1, 0 }
  uselistorder i1 %v8_f3d0, { 1, 0 }
  uselistorder i32 %v1_f3b8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v0_f364, { 1, 0 }
  uselistorder i32 %v4_f358, { 1, 0, 2 }
  uselistorder i32 %v1_f324, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f324, { 0, 2, 1 }
  uselistorder i32 %v0_f31c, { 1, 0 }
  uselistorder i1 %v7_f318, { 1, 0 }
  uselistorder i1 %v7_f310, { 1, 0 }
  uselistorder i1 %v8_f308, { 1, 0 }
  uselistorder i1 %v7_f2ec, { 1, 0 }
  uselistorder i1 %v7_f2e4, { 1, 0 }
  uselistorder i1 %v8_f2dc, { 1, 0 }
  uselistorder i32 %v1_f2c4, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_f260, { 1, 0 }
  uselistorder i8 %v3_f258, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f250, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f250, { 0, 2, 1 }
  uselistorder i32 %v0_f248, { 1, 0 }
  uselistorder i1 %v7_f244, { 1, 0 }
  uselistorder i1 %v7_f23c, { 1, 0 }
  uselistorder i1 %v7_f234, { 1, 0 }
  uselistorder i1 %v7_f220, { 1, 0 }
  uselistorder i1 %v7_f218, { 1, 0 }
  uselistorder i1 %v7_f210, { 1, 0 }
  uselistorder i1 %v8_f208, { 1, 0 }
  uselistorder i32 %v1_f1f0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f114, { 1, 0 }
  uselistorder i8 %v3_f10c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f104, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f104, { 0, 2, 1 }
  uselistorder i32 %v0_f0fc, { 1, 0 }
  uselistorder i1 %v7_f0f8, { 1, 0 }
  uselistorder i1 %v7_f0f0, { 1, 0 }
  uselistorder i1 %v7_f0e8, { 1, 0 }
  uselistorder i1 %v7_f0d4, { 1, 0 }
  uselistorder i1 %v7_f0cc, { 1, 0 }
  uselistorder i1 %v7_f0c4, { 1, 0 }
  uselistorder i1 %v8_f0bc, { 1, 0 }
  uselistorder i32 %v1_f0a4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f040, { 1, 0 }
  uselistorder i8 %v3_f038, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f030, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f030, { 0, 2, 1 }
  uselistorder i32 %v0_f028, { 1, 0 }
  uselistorder i1 %v7_f024, { 1, 0 }
  uselistorder i1 %v7_f01c, { 1, 0 }
  uselistorder i1 %v7_f014, { 1, 0 }
  uselistorder i1 %v7_f000, { 1, 0 }
  uselistorder i1 %v7_eff8, { 1, 0 }
  uselistorder i1 %v7_eff0, { 1, 0 }
  uselistorder i1 %v8_efe8, { 1, 0 }
  uselistorder i32 %v1_efd0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_efbc, { 1, 0 }
  uselistorder i32 %v1_efb4, { 1, 0 }
  uselistorder i32 %v1_efac, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_efa8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_efa8, { 0, 2, 1 }
  uselistorder i32 %v0_ef88.pr, { 1, 0 }
  uselistorder i32 %v0_ef68.pr, { 1, 0 }
  uselistorder i1 %v7_ef40, { 1, 0 }
  uselistorder i1 %v2_ef30, { 1, 0, 2 }
  uselistorder i1 %v2_ef14, { 1, 0, 2 }
  uselistorder i32 %v1_ef34, { 1, 2, 3, 0 }
  uselistorder i32 %v1_ef08, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_ef38, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_ee9c, { 1, 0 }
  uselistorder i8 %v3_ee94, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ee8c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ee8c, { 0, 2, 1 }
  uselistorder i32 %v0_ee84, { 1, 0 }
  uselistorder i1 %v7_ee80, { 1, 0 }
  uselistorder i1 %v7_ee78, { 1, 0 }
  uselistorder i1 %v7_ee70, { 1, 0 }
  uselistorder i1 %v7_ee5c, { 1, 0 }
  uselistorder i1 %v7_ee54, { 1, 0 }
  uselistorder i1 %v7_ee4c, { 1, 0 }
  uselistorder i1 %v8_ee44, { 1, 0 }
  uselistorder i32 %v1_ee2c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_edc8, { 1, 0 }
  uselistorder i8 %v3_edc0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_edb8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_edb8, { 0, 2, 1 }
  uselistorder i32 %v0_edb0, { 1, 0 }
  uselistorder i1 %v7_edac, { 1, 0 }
  uselistorder i1 %v7_eda4, { 1, 0 }
  uselistorder i1 %v7_ed9c, { 1, 0 }
  uselistorder i1 %v7_ed88, { 1, 0 }
  uselistorder i1 %v7_ed80, { 1, 0 }
  uselistorder i1 %v7_ed78, { 1, 0 }
  uselistorder i1 %v8_ed70, { 1, 0 }
  uselistorder i32 %v1_ed58, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_ed44, { 1, 2, 0 }
  uselistorder i32 %v2_ed30, { 1, 0 }
  uselistorder i32 %v0_ed30, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_ed2c, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_ed04, { 2, 1, 0 }
  uselistorder i1 %v7_ece0, { 1, 0 }
  uselistorder i32 %v4_ecdc, { 1, 0, 2 }
  uselistorder i32 %v1_ec9c, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_ec80, { 1, 0 }
  uselistorder i32 %v1_ec70, { 2, 1, 0 }
  uselistorder i32 %v1_ec6c, { 1, 0 }
  uselistorder i32 %v0_ec10, { 2, 5, 6, 20, 7, 8, 21, 9, 10, 24, 11, 12, 22, 13, 14, 23, 4, 3, 19, 15, 16, 25, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_ebec, { 1, 2, 3, 0 }
  uselistorder i32 %v3_ebe8, { 1, 0 }
  uselistorder i32 %v4_ebcc, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_ebb8, { 1, 0, 2 }
  uselistorder i32 %v3_ebb4, { 1, 0, 2 }
  uselistorder i32 %v0_f670, { 1, 0, 2 }
  uselistorder i32 %v3_eb80, { 1, 0 }
  uselistorder i32 %v1_eb68, { 3, 2, 1, 0 }
  uselistorder i32 %v3_eb64, { 1, 0 }
  uselistorder i32 %v3_eb5c, { 1, 2, 0 }
  uselistorder i1 %v7_eb4c, { 1, 0 }
  uselistorder i32 %v3_eb48, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_eb3c, { 1, 0 }
  uselistorder i32 %v1_eae4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_eae4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_eac8, { 0, 2, 1 }
  uselistorder i32 %v1_eac0, { 1, 0 }
  uselistorder i32 %v1_ea80, { 2, 1, 0 }
  uselistorder i32 %v1_ea7c, { 1, 0 }
  uselistorder i1 %v2_ea5c, { 1, 0, 2 }
  uselistorder i32 %v0_ea58, { 1, 0, 2 }
  uselistorder i1 %v7_ea24, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_ea24, { 1, 0, 2 }
  uselistorder i32 %v2_ea1c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_ea10, { 1, 0, 2 }
  uselistorder i32 %v0_ea14, { 1, 0 }
  uselistorder i32 %v1_e9f8, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_e9ec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e9ec, { 0, 2, 1 }
  uselistorder i32 %v1_e9dc, { 1, 0 }
  uselistorder i32 %v3_eaa8, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_e93c, { 1, 0 }
  uselistorder i32 %v1_e924, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e930, { 0, 3, 2, 1 }
  uselistorder i32 %v0_e8e0, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_e8d4, { 2, 1, 0 }
  uselistorder i32 %v1_e8b4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v3_e898, { 0, 1, 3, 2 }
  uselistorder i1 %v2_e890, { 1, 0 }
  uselistorder i1 %v9_e85c, { 1, 0 }
  uselistorder i32 %v0_e80c, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e7b0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_e760, { 1, 0 }
  uselistorder i32 %v5_e6f8, { 1, 0 }
  uselistorder i32 %v3_e6e8, { 1, 2, 0 }
  uselistorder i16 %v4_e6e4, { 1, 0 }
  uselistorder i32 %v3_e6e4, { 1, 0 }
  uselistorder i32 %v5_e6b8, { 0, 3, 1, 2 }
  uselistorder i1 %v2_e620, { 1, 0 }
  uselistorder i1 %v2_e60c, { 1, 0 }
  uselistorder i1 %v2_e5f8, { 1, 0 }
  uselistorder i32 %.462, { 2, 1, 0 }
  uselistorder i1 %v7_e5d4, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_e5bc, { 1, 0 }
  uselistorder i1 %v3_e5a0, { 1, 0, 2 }
  uselistorder i1 %v2_e58c, { 1, 0 }
  uselistorder i1 %v2_e568, { 1, 0 }
  uselistorder i32 %v1_e518, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e504, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e500, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v0_e4e8, { 1, 0 }
  uselistorder i32 %stack_var_-1876.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e4d0, { 1, 0, 2 }
  uselistorder i32 %v2_f600, { 1, 2, 0 }
  uselistorder i32 %v2_f444, { 0, 2, 1, 4, 11, 12, 10, 7, 9, 8, 6, 5, 3 }
  uselistorder i32 %v2_f4ec, { 1, 0 }
  uselistorder i32 %v2_eab4, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_e4a8, { 0, 3, 6, 5, 7, 1, 2, 4, 8 }
  uselistorder i32 %v4_e378, { 2, 1, 0, 3 }
  uselistorder i16 %v5_e30c.le, { 1, 0 }
  uselistorder i32 %v0_e2f0, { 3, 2, 0, 1 }
  uselistorder i32 %v2_e2c4, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v7_e290, { 1, 0 }
  uselistorder i32 %v3_e288, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_e274, { 1, 0 }
  uselistorder i32 %v2_e258, { 1, 0, 2 }
  uselistorder i32 %v0_e244, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_e1b8, { 3, 1, 2, 0, 4 }
  uselistorder i8* %stack_var_-56, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 0, 11, 12, 13, 9, 14, 15, 1, 2, 16, 3, 17, 6, 18, 4, 19, 5, 20, 7, 21, 8, 22, 10, 23 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 6, 3, 0, 1, 2, 5, 4, 7, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 77, 79, 80, 81, 83, 82, 84, 85, 35, 122, 61, 62, 0, 1, 2, 36, 37, 38, 39, 40, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60, 63, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 112, 109, 114, 163, 164, 115, 116, 165, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 162, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 145, 148, 147, 156, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161 }
  uselistorder i32* %r2.global-to-local, { 44, 45, 46, 47, 48, 49, 50, 37, 38, 39, 51, 52, 53, 54, 25, 40, 41, 2, 3, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 116, 117, 70, 71, 73, 72, 69, 74, 75, 1, 77, 76, 0, 78, 79, 80, 81, 82, 83, 84, 85, 86, 67, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 118, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115 }
  uselistorder i32* %r1.global-to-local, { 51, 52, 53, 54, 55, 56, 57, 43, 45, 44, 46, 58, 59, 60, 61, 62, 30, 47, 48, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 107, 108, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder i32* %r0.global-to-local, { 110, 109, 111, 112, 113, 115, 114, 116, 117, 118, 119, 121, 122, 120, 84, 83, 85, 87, 86, 88, 89, 90, 92, 91, 23, 25, 126, 123, 1, 3, 2, 4, 124, 125, 127, 129, 128, 93, 131, 59, 61, 60, 95, 94, 96, 97, 98, 100, 99, 101, 26, 6, 5, 8, 7, 10, 9, 11, 62, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 28, 27, 30, 29, 0, 24, 32, 31, 33, 34, 35, 37, 36, 39, 38, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 65, 63, 66, 68, 67, 70, 69, 72, 71, 73, 75, 77, 76, 79, 78, 81, 80, 82, 103, 105, 104, 106, 102, 107, 108, 144, 130, 134, 132, 133, 139, 135, 136, 182, 137, 138, 140, 142, 141, 143, 145, 150, 146, 149, 147, 148, 74, 151, 152, 155, 153, 154, 157, 156, 64, 196, 159, 158, 160, 162, 161, 164, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 184, 186, 191, 187, 188, 189, 190, 192, 193, 194, 195 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 8, 6, 7, 9, 0, 10, 11, 12, 13, 14, 15, 16, 1, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 115, 116, 140, 239, 231, 1, 236, 237, 127, 128, 117, 95, 119, 121, 122, 66, 67, 68, 69, 70, 0, 118, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 120, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 62, 63, 64, 65, 72, 73, 75, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 224, 93, 94, 96, 90, 91, 92, 97, 98, 99, 100, 101, 102, 106, 107, 108, 103, 104, 105, 109, 110, 111, 112, 113, 114, 123, 124, 125, 126, 129, 131, 130, 132, 133, 134, 135, 136, 137, 138, 139, 225, 227, 141, 142, 143, 144, 145, 147, 146, 148, 149, 150, 153, 155, 156, 154, 151, 152, 235, 234, 232, 157, 233, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 86, 196, 197, 80, 198, 199, 76, 200, 201, 202, 203, 204, 205, 74, 206, 207, 208, 209, 210, 71, 211, 212, 213, 61, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 228, 229, 238, 230 }
  uselistorder i1* %cpsr_c.global-to-local, { 114, 115, 137, 0, 225, 2, 124, 228, 229, 125, 116, 94, 117, 119, 120, 68, 69, 70, 71, 1, 88, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 118, 18, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 33, 34, 35, 30, 31, 32, 36, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 60, 54, 55, 56, 61, 62, 63, 65, 66, 67, 73, 74, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 218, 92, 93, 95, 89, 90, 91, 96, 97, 98, 99, 100, 101, 105, 106, 107, 102, 103, 104, 108, 109, 110, 111, 112, 113, 121, 122, 123, 126, 128, 127, 129, 130, 131, 132, 133, 134, 135, 136, 219, 221, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 149, 146, 147, 227, 226, 231, 152, 232, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 81, 189, 190, 77, 191, 192, 75, 193, 194, 195, 196, 197, 198, 72, 199, 200, 201, 202, 203, 64, 204, 205, 206, 59, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 222, 223, 230, 224 }
  uselistorder i32 (i32)* @function_10f24, { 3, 2, 0, 1 }
  uselistorder i32 ptrtoint ([14 x i8]* @global_var_15cf0.71 to i32), { 0, 2, 1, 3 }
  uselistorder i16* bitcast (i16** @global_var_1e568.122 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1e568.122, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1e568.122 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10ff4, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 7, 8, 2, 3, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_15d94.182 to i32), { 5, 7, 6, 8, 2, 9, 0, 10, 1, 11, 3, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_110ac, { 14, 13, 12, 11, 10, 9, 8, 20, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 11 }
  uselistorder i8 34, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 62, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 61, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i32 (i32)* @function_f920, { 26, 39, 38, 25, 32, 37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 24, 2, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_ffb8, { 1, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32*)* @function_f8fc, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 33, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36 }
  uselistorder i32 (i32)* @function_f9c0, { 22, 21, 30, 29, 28, 27, 26, 25, 24, 23, 20, 3, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11038, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_106e4, { 1, 0 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_df84, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_11070, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_110e4, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c898, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_1e554.177, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e550.135 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @function_c848, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_1e546.174 to i16*), { 1, 0, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 62, { 2, 1, 0 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d74.168 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15d6c.166 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15d30.154 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_e04c, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d0c.146 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_15d10.144 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_1e55d.141, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 1, 0, 2 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_1e550.135, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_1e550.135 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_1e55c.136, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_1e53c.132, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e53c.132 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_dd14, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 3, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11124, { 9, 8, 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 2048, { 5, 4, 1, 2, 3, 6, 0, 7, 8, 9 }
  uselistorder i32* @global_var_205c0.130, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_205bc.128, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_1e56c.116, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @function_10640, { 0, 1, 2, 3, 8, 4, 7, 5, 6 }
  uselistorder i32 (i32)* @function_dd70, { 1, 0 }
  uselistorder i32* @global_var_205a0.46, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 14, 11, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_205a0.46 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_101bc, { 2, 1, 0 }
  uselistorder i32 ()* @function_106b0, { 6, 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_f858, { 1, 0 }
  uselistorder label %dec_label_pc_f850, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_f844, { 1, 0 }
  uselistorder label %dec_label_pc_eb94.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_eb94.backedge.thread559, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_eb94.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f634, { 1, 0 }
  uselistorder label %dec_label_pc_f594, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f55c, { 1, 0 }
  uselistorder label %dec_label_pc_f548, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f538, { 1, 0 }
  uselistorder label %dec_label_pc_f428, { 1, 0 }
  uselistorder label %dec_label_pc_f3a8, { 5, 3, 4, 2, 6, 1, 0 }
  uselistorder label %dec_label_pc_f374, { 1, 0 }
  uselistorder label %thread-pre-split124, { 1, 0 }
  uselistorder label %dec_label_pc_f324, { 1, 0 }
  uselistorder label %dec_label_pc_f268, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f250, { 1, 0 }
  uselistorder label %dec_label_pc_f11c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f104, { 1, 0 }
  uselistorder label %dec_label_pc_f048, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f030, { 1, 0 }
  uselistorder label %dec_label_pc_efbc, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ef88, { 1, 0 }
  uselistorder label %.thread99, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ef68, { 1, 0 }
  uselistorder label %dec_label_pc_ef54, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ef10, { 1, 0 }
  uselistorder label %dec_label_pc_ef10.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_eea4, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ee8c, { 1, 0 }
  uselistorder label %dec_label_pc_edd0, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_edb8, { 1, 0 }
  uselistorder label %dec_label_pc_ec98, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %bb420, { 1, 0 }
  uselistorder label %dec_label_pc_ec60, { 1, 0 }
  uselistorder label %dec_label_pc_ebf8, { 1, 0 }
  uselistorder label %.thread82, { 1, 0 }
  uselistorder label %dec_label_pc_ebac, { 1, 0 }
  uselistorder label %dec_label_pc_eb9c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_eb9c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_eb78, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %dec_label_pc_ea9c, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 1, 0 }
  uselistorder label %bb408, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_e990.dec_label_pc_e990_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e96c.dec_label_pc_e96c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e960, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_e948, { 1, 0 }
  uselistorder label %dec_label_pc_e924, { 1, 0 }
  uselistorder label %dec_label_pc_e7d8, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_e7c4, { 1, 0 }
  uselistorder label %bb405, { 1, 0 }
  uselistorder label %dec_label_pc_e658, { 1, 0 }
  uselistorder label %dec_label_pc_e64c, { 1, 0 }
  uselistorder label %dec_label_pc_e640, { 1, 0 }
  uselistorder label %dec_label_pc_e634, { 1, 0 }
  uselistorder label %dec_label_pc_e628, { 1, 0 }
  uselistorder label %dec_label_pc_e614, { 1, 0 }
  uselistorder label %dec_label_pc_e600, { 1, 0 }
  uselistorder label %dec_label_pc_e5ec, { 1, 0 }
  uselistorder label %dec_label_pc_e5cc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e5a8, { 1, 0 }
  uselistorder label %dec_label_pc_e59c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e578, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e554, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_e500, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_e2f0, { 1, 0 }
}

define i32 @function_f8fc(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f8fc:
  store i32 ptrtoint (i32* @global_var_205cc.192 to i32), i32* @r2, align 4
  %v3_f900 = mul i32 %arg1, 8
  %v2_f904 = add i32 %v3_f900, ptrtoint (i32* @global_var_205cc.192 to i32)
  store i32 %v2_f904, i32* @r3, align 4
  %v2_f908 = icmp eq i32* %arg2, null
  br i1 %v2_f908, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_f8fc
  %v3_f9104 = inttoptr i32 %v2_f904 to i32*
  %v4_f9105 = load i32, i32* %v3_f9104, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_f8fc
  %v2_f90c = add i32 %v3_f900, add (i32 ptrtoint (i32* @global_var_205cc.192 to i32), i32 4)
  %v3_f90c = inttoptr i32 %v2_f90c to i16*
  %v4_f90c = load i16, i16* %v3_f90c, align 4
  %v5_f90c = zext i16 %v4_f90c to i32
  store i32 %v5_f90c, i32* @r3, align 4
  %v3_f910 = inttoptr i32 %v2_f904 to i32*
  %v4_f910 = load i32, i32* %v3_f910, align 4
  store i32 %v5_f90c, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_f9106 = phi i32 [ %v4_f9105, %.thread ], [ %v4_f910, %bb ]
  ret i32 %v4_f9106

; uselistorder directives
  uselistorder i32 %v2_f904, { 1, 0, 2 }
  uselistorder i32 %v3_f900, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_f920(i32 %arg1) local_unnamed_addr {
dec_label_pc_f920:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f928 = mul i32 %arg1, 8
  %v2_f92c = add i32 %v3_f928, ptrtoint (i32* @global_var_205cc.192 to i32)
  %v2_f930 = load i32, i32* inttoptr (i32 123740 to i32*), align 4
  %v1_f934 = add i32 %v3_f928, add (i32 ptrtoint (i32* @global_var_205cc.192 to i32), i32 4)
  %v2_f934 = inttoptr i32 %v1_f934 to i16*
  %v3_f934 = load i16, i16* %v2_f934, align 4
  %v3_f938 = udiv i32 %v2_f930, 256
  %v2_f93c = icmp eq i16 %v3_f934, 0
  store i1 %v2_f93c, i1* @cpsr_z, align 1
  %v3_f940 = udiv i32 %v2_f930, 65536
  store i32 %v3_f940, i32* @r3, align 4
  %v3_f944 = load i32, i32* @r4, align 4
  store i32 %v3_f944, i32* %stack_var_-16, align 4
  %v1_f948 = urem i32 %v3_f938, 256
  store i32 %v1_f948, i32* %r6.global-to-local, align 4
  %v1_f94c = urem i32 %v3_f940, 256
  store i32 %v1_f94c, i32* %r5.global-to-local, align 4
  %v3_f950 = udiv i32 %v2_f930, 16777216
  store i32 %v3_f950, i32* %r4.global-to-local, align 4
  %v1_f954 = urem i32 %v2_f930, 256
  store i32 %v1_f954, i32* %lr.global-to-local, align 4
  br i1 %v2_f93c, label %dec_label_pc_f9b0, label %dec_label_pc_f95c

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f920
  store i32 0, i32* @ip, align 4
  %v1_f960 = inttoptr i32 %v2_f92c to i32*
  br label %dec_label_pc_f960

dec_label_pc_f960:                                ; preds = %dec_label_pc_f960.dec_label_pc_f960_crit_edge, %dec_label_pc_f95c
  %v0_f968 = phi i32 [ %v0_f968.pre, %dec_label_pc_f960.dec_label_pc_f960_crit_edge ], [ %v1_f954, %dec_label_pc_f95c ]
  %v2_f96c = phi i32 [ %v1_f9a4, %dec_label_pc_f960.dec_label_pc_f960_crit_edge ], [ 0, %dec_label_pc_f95c ]
  %v2_f960 = load i32, i32* %v1_f960, align 4
  %v2_f964 = add i32 %v2_f960, %v2_f96c
  %v3_f964 = inttoptr i32 %v2_f964 to i8*
  %v4_f964 = load i8, i8* %v3_f964, align 1
  %v6_f964 = zext i8 %v4_f964 to i32
  %v2_f968 = xor i32 %v6_f964, %v0_f968
  %v1_f96c = trunc i32 %v2_f968 to i8
  store i8 %v1_f96c, i8* %v3_f964, align 1
  %v2_f970 = load i32, i32* %v1_f960, align 4
  %v0_f974 = load i32, i32* @ip, align 4
  %v2_f974 = add i32 %v0_f974, %v2_f970
  %v3_f974 = inttoptr i32 %v2_f974 to i8*
  %v4_f974 = load i8, i8* %v3_f974, align 1
  %v6_f974 = zext i8 %v4_f974 to i32
  %v0_f978 = load i32, i32* %r6.global-to-local, align 4
  %v2_f978 = xor i32 %v0_f978, %v6_f974
  %v1_f97c = trunc i32 %v2_f978 to i8
  store i8 %v1_f97c, i8* %v3_f974, align 1
  %v2_f980 = load i32, i32* %v1_f960, align 4
  %v0_f984 = load i32, i32* @ip, align 4
  %v2_f984 = add i32 %v0_f984, %v2_f980
  %v3_f984 = inttoptr i32 %v2_f984 to i8*
  %v4_f984 = load i8, i8* %v3_f984, align 1
  %v6_f984 = zext i8 %v4_f984 to i32
  %v0_f988 = load i32, i32* %r5.global-to-local, align 4
  %v2_f988 = xor i32 %v0_f988, %v6_f984
  %v1_f98c = trunc i32 %v2_f988 to i8
  store i8 %v1_f98c, i8* %v3_f984, align 1
  %v2_f990 = load i32, i32* %v1_f960, align 4
  %v0_f994 = load i32, i32* @ip, align 4
  %v2_f994 = add i32 %v0_f994, %v2_f990
  %v3_f994 = inttoptr i32 %v2_f994 to i8*
  %v4_f994 = load i8, i8* %v3_f994, align 1
  %v6_f994 = zext i8 %v4_f994 to i32
  %v0_f998 = load i32, i32* %r4.global-to-local, align 4
  %v2_f998 = xor i32 %v0_f998, %v6_f994
  store i32 %v2_f998, i32* @r3, align 4
  %v1_f99c = trunc i32 %v2_f998 to i8
  store i8 %v1_f99c, i8* %v3_f994, align 1
  %v3_f9a0 = load i16, i16* %v2_f934, align 4
  %v4_f9a0 = zext i16 %v3_f9a0 to i32
  %v0_f9a4 = load i32, i32* @ip, align 4
  %v1_f9a4 = add i32 %v0_f9a4, 1
  store i32 %v1_f9a4, i32* @ip, align 4
  %v9_f9a8 = icmp eq i32 %v4_f9a0, %v1_f9a4
  store i1 %v9_f9a8, i1* @cpsr_z, align 1
  %v8_f9ac = icmp sgt i32 %v4_f9a0, %v1_f9a4
  br i1 %v8_f9ac, label %dec_label_pc_f960.dec_label_pc_f960_crit_edge, label %dec_label_pc_f9b0.loopexit

dec_label_pc_f960.dec_label_pc_f960_crit_edge:    ; preds = %dec_label_pc_f960
  %v0_f968.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f960

dec_label_pc_f9b0.loopexit:                       ; preds = %dec_label_pc_f960
  %v2_f9b0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_f9b0

dec_label_pc_f9b0:                                ; preds = %dec_label_pc_f9b0.loopexit, %dec_label_pc_f920
  %v2_f9b0 = phi i32 [ %v2_f9b0.pre, %dec_label_pc_f9b0.loopexit ], [ %v3_f944, %dec_label_pc_f920 ]
  store i32 %v2_f9b0, i32* @r4, align 4
  ret i32 %v2_f92c

; uselistorder directives
  uselistorder i32 %v1_f9a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f954, { 1, 0 }
  uselistorder i32 %v3_f940, { 1, 0 }
  uselistorder i32 %v2_f930, { 3, 0, 1, 2 }
  uselistorder i32 %v3_f928, { 1, 0 }
}

define i32 @function_f9c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_f9c0:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f9c8 = mul i32 %arg1, 8
  %v2_f9cc = add i32 %v3_f9c8, ptrtoint (i32* @global_var_205cc.192 to i32)
  %v2_f9d0 = load i32, i32* inttoptr (i32 123740 to i32*), align 4
  %v1_f9d4 = add i32 %v3_f9c8, add (i32 ptrtoint (i32* @global_var_205cc.192 to i32), i32 4)
  %v2_f9d4 = inttoptr i32 %v1_f9d4 to i16*
  %v3_f9d4 = load i16, i16* %v2_f9d4, align 4
  %v3_f9d8 = udiv i32 %v2_f9d0, 256
  %v2_f9dc = icmp eq i16 %v3_f9d4, 0
  %v3_f9e0 = udiv i32 %v2_f9d0, 65536
  %v3_f9e4 = load i32, i32* @r4, align 4
  store i32 %v3_f9e4, i32* %stack_var_-16, align 4
  %v1_f9e8 = urem i32 %v3_f9d8, 256
  store i32 %v1_f9e8, i32* %r6.global-to-local, align 4
  %v1_f9ec = urem i32 %v3_f9e0, 256
  store i32 %v1_f9ec, i32* %r5.global-to-local, align 4
  %v3_f9f0 = udiv i32 %v2_f9d0, 16777216
  store i32 %v3_f9f0, i32* %r4.global-to-local, align 4
  %v1_f9f4 = urem i32 %v2_f9d0, 256
  store i32 %v1_f9f4, i32* %lr.global-to-local, align 4
  br i1 %v2_f9dc, label %dec_label_pc_fa50, label %dec_label_pc_f9fc

dec_label_pc_f9fc:                                ; preds = %dec_label_pc_f9c0
  store i32 0, i32* @ip, align 4
  %v1_fa00 = inttoptr i32 %v2_f9cc to i32*
  br label %dec_label_pc_fa00

dec_label_pc_fa00:                                ; preds = %dec_label_pc_fa00.dec_label_pc_fa00_crit_edge, %dec_label_pc_f9fc
  %v0_fa08 = phi i32 [ %v0_fa08.pre, %dec_label_pc_fa00.dec_label_pc_fa00_crit_edge ], [ %v1_f9f4, %dec_label_pc_f9fc ]
  %v2_fa0c = phi i32 [ %v1_fa44, %dec_label_pc_fa00.dec_label_pc_fa00_crit_edge ], [ 0, %dec_label_pc_f9fc ]
  %v2_fa00 = load i32, i32* %v1_fa00, align 4
  %v2_fa04 = add i32 %v2_fa00, %v2_fa0c
  %v3_fa04 = inttoptr i32 %v2_fa04 to i8*
  %v4_fa04 = load i8, i8* %v3_fa04, align 1
  %v6_fa04 = zext i8 %v4_fa04 to i32
  %v2_fa08 = xor i32 %v6_fa04, %v0_fa08
  %v1_fa0c = trunc i32 %v2_fa08 to i8
  store i8 %v1_fa0c, i8* %v3_fa04, align 1
  %v2_fa10 = load i32, i32* %v1_fa00, align 4
  %v0_fa14 = load i32, i32* @ip, align 4
  %v2_fa14 = add i32 %v0_fa14, %v2_fa10
  %v3_fa14 = inttoptr i32 %v2_fa14 to i8*
  %v4_fa14 = load i8, i8* %v3_fa14, align 1
  %v6_fa14 = zext i8 %v4_fa14 to i32
  %v0_fa18 = load i32, i32* %r6.global-to-local, align 4
  %v2_fa18 = xor i32 %v0_fa18, %v6_fa14
  %v1_fa1c = trunc i32 %v2_fa18 to i8
  store i8 %v1_fa1c, i8* %v3_fa14, align 1
  %v2_fa20 = load i32, i32* %v1_fa00, align 4
  %v0_fa24 = load i32, i32* @ip, align 4
  %v2_fa24 = add i32 %v0_fa24, %v2_fa20
  %v3_fa24 = inttoptr i32 %v2_fa24 to i8*
  %v4_fa24 = load i8, i8* %v3_fa24, align 1
  %v6_fa24 = zext i8 %v4_fa24 to i32
  %v0_fa28 = load i32, i32* %r5.global-to-local, align 4
  %v2_fa28 = xor i32 %v0_fa28, %v6_fa24
  %v1_fa2c = trunc i32 %v2_fa28 to i8
  store i8 %v1_fa2c, i8* %v3_fa24, align 1
  %v2_fa30 = load i32, i32* %v1_fa00, align 4
  %v0_fa34 = load i32, i32* @ip, align 4
  %v2_fa34 = add i32 %v0_fa34, %v2_fa30
  %v3_fa34 = inttoptr i32 %v2_fa34 to i8*
  %v4_fa34 = load i8, i8* %v3_fa34, align 1
  %v6_fa34 = zext i8 %v4_fa34 to i32
  %v0_fa38 = load i32, i32* %r4.global-to-local, align 4
  %v2_fa38 = xor i32 %v0_fa38, %v6_fa34
  %v1_fa3c = trunc i32 %v2_fa38 to i8
  store i8 %v1_fa3c, i8* %v3_fa34, align 1
  %v3_fa40 = load i16, i16* %v2_f9d4, align 4
  %v4_fa40 = zext i16 %v3_fa40 to i32
  %v0_fa44 = load i32, i32* @ip, align 4
  %v1_fa44 = add i32 %v0_fa44, 1
  store i32 %v1_fa44, i32* @ip, align 4
  %v8_fa4c = icmp sgt i32 %v4_fa40, %v1_fa44
  br i1 %v8_fa4c, label %dec_label_pc_fa00.dec_label_pc_fa00_crit_edge, label %dec_label_pc_fa50.loopexit

dec_label_pc_fa00.dec_label_pc_fa00_crit_edge:    ; preds = %dec_label_pc_fa00
  %v0_fa08.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fa00

dec_label_pc_fa50.loopexit:                       ; preds = %dec_label_pc_fa00
  %v2_fa50.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fa50

dec_label_pc_fa50:                                ; preds = %dec_label_pc_fa50.loopexit, %dec_label_pc_f9c0
  %v2_fa50 = phi i32 [ %v2_fa50.pre, %dec_label_pc_fa50.loopexit ], [ %v3_f9e4, %dec_label_pc_f9c0 ]
  store i32 %v2_fa50, i32* @r4, align 4
  ret i32 %v2_f9cc

; uselistorder directives
  uselistorder i32 %v1_fa44, { 1, 2, 0 }
  uselistorder i32 %v1_f9f4, { 1, 0 }
  uselistorder i32 %v2_f9d0, { 3, 0, 1, 2 }
  uselistorder i32 %v3_f9c8, { 1, 0 }
}

define i32 @function_fa60(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fa60:
  %v9_fa60 = load i32, i32* @r6, align 4
  %v12_fa60 = load i32, i32* @r7, align 4
  %v15_fa60 = load i32, i32* @r8, align 4
  %v21_fa60 = load i32, i32* @sl, align 4
  %v24_fa60 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_fa6c = call i32 @function_113b0()
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_205cc.192 to i32), i32* @r4, align 4
  store i32 %v0_fa6c, i32* @r6, align 4
  %v3_fa84 = call i32 @function_ff70(i32 %v0_fa6c, i32 ptrtoint (i32* @global_var_15da4.199 to i32), i32 2)
  %v0_fa88 = load i32, i32* @r5, align 4
  store i32 %v0_fa88, i32* @r0, align 4
  %v0_fa8c = load i32, i32* @r6, align 4
  store i32 %v0_fa8c, i32* @global_var_205d4.200, align 4
  %v1_fa90 = trunc i32 %v0_fa88 to i16
  store i16 %v1_fa90, i16* bitcast (i32* @global_var_205d8.201 to i16*), align 4
  %v0_fa94 = call i32 @function_113b0()
  %v0_fa98 = load i32, i32* @r5, align 4
  store i32 %v0_fa94, i32* @r6, align 4
  %v3_faa4 = call i32 @function_ff70(i32 %v0_fa94, i32 ptrtoint (i32* @global_var_15da8.203 to i32), i32 %v0_fa98)
  store i32 29, i32* @r0, align 4
  %v0_faac = load i32, i32* @r6, align 4
  store i32 %v0_faac, i32* @global_var_205dc.204, align 4
  %v0_fab0 = load i32, i32* @r5, align 4
  %v1_fab0 = trunc i32 %v0_fab0 to i16
  store i16 %v1_fab0, i16* bitcast (i32* @global_var_205e0.205 to i16*), align 4
  %v0_fab4 = call i32 @function_113b0()
  store i32 %v0_fab4, i32* @r5, align 4
  %v3_fac4 = call i32 @function_ff70(i32 %v0_fab4, i32 ptrtoint (i32* @global_var_15f10.207 to i32), i32 29)
  store i32 6, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_205e8.208 to i16*), align 4
  %v0_fad4 = load i32, i32* @r5, align 4
  store i32 %v0_fad4, i32* @global_var_205e4.209, align 4
  %v0_fad8 = call i32 @function_113b0()
  store i32 6, i32* @sb, align 4
  store i32 %v0_fad8, i32* @r5, align 4
  %v4_faec = call i32 @function_ff70(i32 %v0_fad8, i32 ptrtoint ([7 x i8]* @global_var_15dac.211 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r7, align 4
  %v0_faf8 = load i32, i32* @r5, align 4
  store i32 %v0_faf8, i32* @global_var_205ec.212, align 4
  %v0_fafc = load i32, i32* @sb, align 4
  %v1_fafc = trunc i32 %v0_fafc to i16
  store i16 %v1_fafc, i16* bitcast (i32* @global_var_205f0.213 to i16*), align 4
  %v0_fb00 = call i32 @function_113b0()
  %v0_fb08 = load i32, i32* @r7, align 4
  store i32 %v0_fb00, i32* @r5, align 4
  %v4_fb10 = call i32 @function_ff70(i32 %v0_fb00, i32 ptrtoint ([8 x i8]* @global_var_15db4.215 to i32), i32 %v0_fb08)
  %v0_fb14 = load i32, i32* @r7, align 4
  store i32 %v0_fb14, i32* @r0, align 4
  %v0_fb18 = load i32, i32* @r5, align 4
  store i32 %v0_fb18, i32* @global_var_205f4.216, align 4
  %v1_fb1c = trunc i32 %v0_fb14 to i16
  store i16 %v1_fb1c, i16* bitcast (i32* @global_var_205f8.217 to i16*), align 4
  %v0_fb20 = call i32 @function_113b0()
  %v0_fb28 = load i32, i32* @r7, align 4
  store i32 %v0_fb20, i32* @r5, align 4
  %v4_fb30 = call i32 @function_ff70(i32 %v0_fb20, i32 ptrtoint ([8 x i8]* @global_var_15dbc.219 to i32), i32 %v0_fb28)
  store i32 3, i32* @r0, align 4
  %v0_fb38 = load i32, i32* @r5, align 4
  store i32 %v0_fb38, i32* @global_var_205fc.220, align 4
  %v0_fb3c = load i32, i32* @r7, align 4
  %v1_fb3c = trunc i32 %v0_fb3c to i16
  store i16 %v1_fb3c, i16* bitcast (i32* @global_var_20600.221 to i16*), align 4
  %v0_fb40 = call i32 @function_113b0()
  store i32 %v0_fb40, i32* @r5, align 4
  %v4_fb50 = call i32 @function_ff70(i32 %v0_fb40, i32 ptrtoint ([4 x i8]* @global_var_15dc4.223 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_20608.224 to i16*), align 4
  %v0_fb60 = load i32, i32* @r5, align 4
  store i32 %v0_fb60, i32* @global_var_20604.225, align 4
  %v0_fb64 = call i32 @function_113b0()
  store i32 %v0_fb64, i32* @r5, align 4
  %v3_fb74 = call i32 @function_ff70(i32 %v0_fb64, i32 ptrtoint (i32* @global_var_15dc8.227 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_20610.228 to i16*), align 4
  %v0_fb84 = load i32, i32* @r5, align 4
  store i32 %v0_fb84, i32* @global_var_2060c.229, align 4
  %v0_fb88 = call i32 @function_113b0()
  store i32 %v0_fb88, i32* @r5, align 4
  %v3_fb98 = call i32 @function_ff70(i32 %v0_fb88, i32 ptrtoint (i32* @global_var_15ddc.231 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_20618.232 to i16*), align 4
  %v0_fba8 = load i32, i32* @r5, align 4
  store i32 %v0_fba8, i32* @global_var_20614.233, align 4
  %v0_fbac = call i32 @function_113b0()
  store i32 %v0_fbac, i32* @r5, align 4
  %v4_fbbc = call i32 @function_ff70(i32 %v0_fbac, i32 ptrtoint ([10 x i8]* @global_var_15df8.235 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_20620.236 to i16*), align 4
  %v0_fbcc = load i32, i32* @r5, align 4
  store i32 %v0_fbcc, i32* @global_var_2061c.237, align 4
  %v0_fbd0 = call i32 @function_113b0()
  store i32 %v0_fbd0, i32* @r5, align 4
  store i32 16, i32* @sl, align 4
  %v4_fbe4 = call i32 @function_ff70(i32 %v0_fbd0, i32 ptrtoint ([17 x i8]* @global_var_15e04.239 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_fbec = load i32, i32* @r5, align 4
  store i32 %v0_fbec, i32* @global_var_20624.240, align 4
  %v0_fbf0 = load i32, i32* @sl, align 4
  %v1_fbf0 = trunc i32 %v0_fbf0 to i16
  store i16 %v1_fbf0, i16* bitcast (i32* @global_var_20628.241 to i16*), align 4
  %v0_fbf4 = call i32 @function_113b0()
  store i32 %v0_fbf4, i32* @r5, align 4
  %v4_fc04 = call i32 @function_ff70(i32 %v0_fbf4, i32 ptrtoint ([23 x i8]* @global_var_15e18.243 to i32), i32 22)
  %v0_fc0c = load i32, i32* @r7, align 4
  store i32 %v0_fc0c, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_20630.244 to i16*), align 4
  %v0_fc14 = load i32, i32* @r5, align 4
  store i32 %v0_fc14, i32* @global_var_2062c.245, align 4
  %v0_fc18 = call i32 @function_113b0()
  %v0_fc20 = load i32, i32* @r7, align 4
  store i32 %v0_fc18, i32* @r5, align 4
  %v4_fc28 = call i32 @function_ff70(i32 %v0_fc18, i32 ptrtoint ([8 x i8]* @global_var_15e30.247 to i32), i32 %v0_fc20)
  store i32 5, i32* @r0, align 4
  %v0_fc30 = load i32, i32* @r5, align 4
  store i32 %v0_fc30, i32* @global_var_20634.248, align 4
  %v0_fc34 = load i32, i32* @r7, align 4
  %v1_fc34 = trunc i32 %v0_fc34 to i16
  store i16 %v1_fc34, i16* bitcast (i32* @global_var_20638.249 to i16*), align 4
  %v0_fc38 = call i32 @function_113b0()
  store i32 %v0_fc38, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_fc4c = call i32 @function_ff70(i32 %v0_fc38, i32 ptrtoint ([6 x i8]* @global_var_15e38.251 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_fc54 = load i32, i32* @r5, align 4
  store i32 %v0_fc54, i32* @global_var_2063c.252, align 4
  %v0_fc58 = load i32, i32* @fp, align 4
  %v1_fc58 = trunc i32 %v0_fc58 to i16
  store i16 %v1_fc58, i16* bitcast (i32* @global_var_20640.253 to i16*), align 4
  %v0_fc5c = call i32 @function_113b0()
  store i32 %v0_fc5c, i32* @r5, align 4
  %v4_fc6c = call i32 @function_ff70(i32 %v0_fc5c, i32 ptrtoint ([5 x i8]* @global_var_15e40.255 to i32), i32 4)
  %v0_fc74 = load i32, i32* @sb, align 4
  store i32 %v0_fc74, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_20648.256 to i16*), align 4
  %v0_fc7c = load i32, i32* @r5, align 4
  store i32 %v0_fc7c, i32* @global_var_20644.257, align 4
  %v0_fc80 = call i32 @function_113b0()
  %v0_fc88 = load i32, i32* @sb, align 4
  store i32 %v0_fc80, i32* @r5, align 4
  %v4_fc90 = call i32 @function_ff70(i32 %v0_fc80, i32 ptrtoint ([7 x i8]* @global_var_15e48.259 to i32), i32 %v0_fc88)
  store i32 14, i32* @r0, align 4
  %v0_fc98 = load i32, i32* @r5, align 4
  store i32 %v0_fc98, i32* @global_var_2064c.260, align 4
  %v0_fc9c = load i32, i32* @sb, align 4
  %v1_fc9c = trunc i32 %v0_fc9c to i16
  store i16 %v1_fc9c, i16* bitcast (i32* @global_var_20650.261 to i16*), align 4
  %v0_fca0 = call i32 @function_113b0()
  store i32 %v0_fca0, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_fcb4 = call i32 @function_ff70(i32 %v0_fca0, i32 ptrtoint ([15 x i8]* @global_var_15e50.263 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_fcbc = load i32, i32* @r5, align 4
  store i32 %v0_fcbc, i32* @global_var_20654.264, align 4
  %v0_fcc0 = load i32, i32* @r8, align 4
  %v1_fcc0 = trunc i32 %v0_fcc0 to i16
  store i16 %v1_fcc0, i16* bitcast (i32* @global_var_20658.265 to i16*), align 4
  %v0_fcc4 = call i32 @function_113b0()
  store i32 8, i32* @r6, align 4
  store i32 %v0_fcc4, i32* @r5, align 4
  %v4_fcd8 = call i32 @function_ff70(i32 %v0_fcc4, i32 ptrtoint ([9 x i8]* @global_var_15e60.267 to i32), i32 8)
  %v0_fcdc = load i32, i32* @r7, align 4
  store i32 %v0_fcdc, i32* @r0, align 4
  %v0_fce0 = load i32, i32* @r5, align 4
  store i32 %v0_fce0, i32* @global_var_206b4.268, align 4
  %v0_fce4 = load i32, i32* @r6, align 4
  %v1_fce4 = trunc i32 %v0_fce4 to i16
  store i16 %v1_fce4, i16* bitcast (i32* @global_var_206b8.269 to i16*), align 4
  %v0_fce8 = call i32 @function_113b0()
  %v0_fcf0 = load i32, i32* @r7, align 4
  store i32 %v0_fce8, i32* @r5, align 4
  %v4_fcf8 = call i32 @function_ff70(i32 %v0_fce8, i32 ptrtoint ([8 x i8]* @global_var_15e6c.271 to i32), i32 %v0_fcf0)
  %v0_fcfc = load i32, i32* @sl, align 4
  store i32 %v0_fcfc, i32* @r0, align 4
  %v0_fd00 = load i32, i32* @r5, align 4
  store i32 %v0_fd00, i32* @global_var_206bc.272, align 4
  %v0_fd04 = load i32, i32* @r7, align 4
  %v1_fd04 = trunc i32 %v0_fd04 to i16
  store i16 %v1_fd04, i16* bitcast (i32* @global_var_206c0.273 to i16*), align 4
  %v0_fd08 = call i32 @function_113b0()
  %v0_fd10 = load i32, i32* @sl, align 4
  store i32 %v0_fd08, i32* @r5, align 4
  %v4_fd18 = call i32 @function_ff70(i32 %v0_fd08, i32 ptrtoint ([17 x i8]* @global_var_15e74.275 to i32), i32 %v0_fd10)
  %v0_fd1c = load i32, i32* @r6, align 4
  store i32 %v0_fd1c, i32* @r0, align 4
  %v0_fd20 = load i32, i32* @r5, align 4
  store i32 %v0_fd20, i32* @global_var_2065c.276, align 4
  %v0_fd24 = load i32, i32* @sl, align 4
  %v1_fd24 = trunc i32 %v0_fd24 to i16
  store i16 %v1_fd24, i16* bitcast (i32* @global_var_20660.277 to i16*), align 4
  %v0_fd28 = call i32 @function_113b0()
  %v0_fd30 = load i32, i32* @r6, align 4
  store i32 %v0_fd28, i32* @r5, align 4
  %v4_fd38 = call i32 @function_ff70(i32 %v0_fd28, i32 ptrtoint ([9 x i8]* @global_var_15e88.279 to i32), i32 %v0_fd30)
  store i32 21, i32* @r0, align 4
  %v0_fd40 = load i32, i32* @r5, align 4
  store i32 %v0_fd40, i32* @global_var_20664.280, align 4
  %v0_fd44 = load i32, i32* @r6, align 4
  %v1_fd44 = trunc i32 %v0_fd44 to i16
  store i16 %v1_fd44, i16* bitcast (i32* @global_var_20668.281 to i16*), align 4
  %v0_fd48 = call i32 @function_113b0()
  store i32 %v0_fd48, i32* @r5, align 4
  %v3_fd58 = call i32 @function_ff70(i32 %v0_fd48, i32 ptrtoint (i32* @global_var_15f30.283 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_20670.284 to i16*), align 4
  %v0_fd68 = load i32, i32* @r5, align 4
  store i32 %v0_fd68, i32* @global_var_2066c.285, align 4
  %v0_fd6c = call i32 @function_113b0()
  store i32 %v0_fd6c, i32* @r5, align 4
  %v4_fd7c = call i32 @function_ff70(i32 %v0_fd6c, i32 ptrtoint ([18 x i8]* @global_var_15e94.287 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_20678.288 to i16*), align 4
  %v0_fd8c = load i32, i32* @r5, align 4
  store i32 %v0_fd8c, i32* @global_var_20674.289, align 4
  %v0_fd90 = call i32 @function_113b0()
  store i32 %v0_fd90, i32* @r5, align 4
  %v4_fda0 = call i32 @function_ff70(i32 %v0_fd90, i32 ptrtoint ([13 x i8]* @global_var_15ea8.291 to i32), i32 12)
  %v0_fda8 = load i32, i32* @r8, align 4
  store i32 %v0_fda8, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_20680.292 to i16*), align 4
  %v0_fdb0 = load i32, i32* @r5, align 4
  store i32 %v0_fdb0, i32* @global_var_2067c.293, align 4
  %v0_fdb4 = call i32 @function_113b0()
  %v0_fdbc = load i32, i32* @r8, align 4
  store i32 %v0_fdb4, i32* @r5, align 4
  %v4_fdc4 = call i32 @function_ff70(i32 %v0_fdb4, i32 ptrtoint ([15 x i8]* @global_var_15eb8.295 to i32), i32 %v0_fdbc)
  store i32 19, i32* @r0, align 4
  %v0_fdcc = load i32, i32* @r5, align 4
  store i32 %v0_fdcc, i32* @global_var_20684.296, align 4
  %v0_fdd0 = load i32, i32* @r8, align 4
  %v1_fdd0 = trunc i32 %v0_fdd0 to i16
  store i16 %v1_fdd0, i16* bitcast (i32* @global_var_20688.297 to i16*), align 4
  %v0_fdd4 = call i32 @function_113b0()
  store i32 %v0_fdd4, i32* @r5, align 4
  %v4_fde4 = call i32 @function_ff70(i32 %v0_fdd4, i32 ptrtoint ([20 x i8]* @global_var_15ec8.299 to i32), i32 19)
  %v0_fdec = load i32, i32* @r6, align 4
  store i32 %v0_fdec, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_20690.300 to i16*), align 4
  %v0_fdf4 = load i32, i32* @r5, align 4
  store i32 %v0_fdf4, i32* @global_var_2068c.301, align 4
  %v0_fdf8 = call i32 @function_113b0()
  %v0_fe00 = load i32, i32* @r6, align 4
  store i32 %v0_fdf8, i32* @r5, align 4
  %v4_fe08 = call i32 @function_ff70(i32 %v0_fdf8, i32 ptrtoint ([9 x i8]* @global_var_15edc.303 to i32), i32 %v0_fe00)
  %v0_fe0c = load i32, i32* @fp, align 4
  store i32 %v0_fe0c, i32* @r0, align 4
  %v0_fe10 = load i32, i32* @r5, align 4
  store i32 %v0_fe10, i32* @global_var_20694.304, align 4
  %v0_fe14 = load i32, i32* @r6, align 4
  %v1_fe14 = trunc i32 %v0_fe14 to i16
  store i16 %v1_fe14, i16* bitcast (i32* @global_var_20698.305 to i16*), align 4
  %v0_fe18 = call i32 @function_113b0()
  %v0_fe20 = load i32, i32* @fp, align 4
  store i32 %v0_fe18, i32* @r5, align 4
  %v4_fe28 = call i32 @function_ff70(i32 %v0_fe18, i32 ptrtoint ([6 x i8]* @global_var_15ee8.307 to i32), i32 %v0_fe20)
  %v0_fe2c = load i32, i32* @sb, align 4
  store i32 %v0_fe2c, i32* @r0, align 4
  %v0_fe30 = load i32, i32* @r5, align 4
  store i32 %v0_fe30, i32* @global_var_2069c.308, align 4
  %v0_fe34 = load i32, i32* @fp, align 4
  %v1_fe34 = trunc i32 %v0_fe34 to i16
  store i16 %v1_fe34, i16* bitcast (i32* @global_var_206a0.309 to i16*), align 4
  %v0_fe38 = call i32 @function_113b0()
  %v0_fe40 = load i32, i32* @sb, align 4
  store i32 %v0_fe38, i32* @r5, align 4
  %v4_fe48 = call i32 @function_ff70(i32 %v0_fe38, i32 ptrtoint ([7 x i8]* @global_var_15ef0.311 to i32), i32 %v0_fe40)
  store i32 23, i32* @r0, align 4
  %v0_fe50 = load i32, i32* @r5, align 4
  store i32 %v0_fe50, i32* @global_var_206a4.312, align 4
  %v0_fe54 = load i32, i32* @sb, align 4
  %v1_fe54 = trunc i32 %v0_fe54 to i16
  store i16 %v1_fe54, i16* bitcast (i32* @global_var_206a8.313 to i16*), align 4
  %v0_fe58 = call i32 @function_113b0()
  %v4_fe68 = call i32 @function_ff70(i32 %v0_fe58, i32 ptrtoint ([24 x i8]* @global_var_15ef8.315 to i32), i32 23)
  store i32 %v0_fe58, i32* @global_var_206ac.316, align 4
  store i16 23, i16* bitcast (i32* @global_var_206b0.317 to i16*), align 4
  store i32 %v9_fa60, i32* @r6, align 4
  store i32 %v12_fa60, i32* @r7, align 4
  store i32 %v15_fa60, i32* @r8, align 4
  store i32 %v21_fa60, i32* @sl, align 4
  store i32 %v24_fa60, i32* @fp, align 4
  ret i32 %v4_fe68

; uselistorder directives
  uselistorder i32 %v0_fe38, { 1, 0 }
  uselistorder i32 %v0_fe18, { 1, 0 }
  uselistorder i32 %v0_fdf8, { 1, 0 }
  uselistorder i32 %v0_fdb4, { 1, 0 }
  uselistorder i32 %v0_fd28, { 1, 0 }
  uselistorder i32 %v0_fd08, { 1, 0 }
  uselistorder i32 %v0_fce8, { 1, 0 }
  uselistorder i32 %v0_fcc4, { 1, 0 }
  uselistorder i32 %v0_fc80, { 1, 0 }
  uselistorder i32 %v0_fc18, { 1, 0 }
  uselistorder i32 %v0_fb20, { 1, 0 }
  uselistorder i32 %v0_fb00, { 1, 0 }
  uselistorder i32 %v0_fad8, { 1, 0 }
  uselistorder i32 %v0_fa94, { 1, 0 }
  uselistorder i32 %v0_fa6c, { 1, 0 }
  uselistorder i32 23, { 0, 4, 1, 2, 3 }
  uselistorder i32 21, { 0, 5, 6, 4, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 29, { 0, 3, 4, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_ff70, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_205cc.192 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_ff00(i8* %arg1) local_unnamed_addr {
dec_label_pc_ff00:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_ff04 = load i8, i8* %arg1, align 1
  %v2_ff08 = icmp eq i8 %v3_ff04, 0
  %v0_ff0c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_ff08, i32 %v0_ff0c)
  br label %dec_label_pc_ff14

dec_label_pc_ff14:                                ; preds = %dec_label_pc_ff14, %dec_label_pc_ff00
  %v0_ff14 = phi i32 [ %v1_ff14, %dec_label_pc_ff14 ], [ 0, %dec_label_pc_ff00 ]
  %v1_ff14 = add i32 %v0_ff14, 1
  %v2_ff18 = add i32 %v1_ff14, %tmp
  %v3_ff18 = inttoptr i32 %v2_ff18 to i8*
  %v4_ff18 = load i8, i8* %v3_ff18, align 1
  %v2_ff1c = icmp eq i8 %v4_ff18, 0
  br i1 %v2_ff1c, label %dec_label_pc_ff24, label %dec_label_pc_ff14

dec_label_pc_ff24:                                ; preds = %dec_label_pc_ff14
  ret i32 %v1_ff14
}

define i32 @function_ff28(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ff28:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_ff28 = load i8, i8* %arg1, align 1
  %v3_ff28 = zext i8 %v2_ff28 to i32
  store i32 %v3_ff28, i32* @r2, align 4
  %v2_ff2c = icmp eq i8 %v2_ff28, 0
  br i1 %v2_ff2c, label %bb, label %dec_label_pc_ff38

bb:                                               ; preds = %dec_label_pc_ff28
  store i32 %v3_ff28, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff4c

dec_label_pc_ff38:                                ; preds = %dec_label_pc_ff28
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff3c

dec_label_pc_ff3c:                                ; preds = %dec_label_pc_ff3c, %dec_label_pc_ff38
  %v0_ff3c = phi i32 [ %v1_ff3c, %dec_label_pc_ff3c ], [ 0, %dec_label_pc_ff38 ]
  %v1_ff3c = add i32 %v0_ff3c, 1
  store i32 %v1_ff3c, i32* %ip.global-to-local, align 4
  %v2_ff40 = add i32 %v1_ff3c, %tmp
  %v3_ff40 = inttoptr i32 %v2_ff40 to i8*
  %v4_ff40 = load i8, i8* %v3_ff40, align 1
  %v2_ff44 = icmp eq i8 %v4_ff40, 0
  br i1 %v2_ff44, label %dec_label_pc_ff4c, label %dec_label_pc_ff3c

dec_label_pc_ff4c:                                ; preds = %dec_label_pc_ff3c, %bb
  %v0_ff4c = phi i32 [ %v3_ff28, %bb ], [ %v1_ff3c, %dec_label_pc_ff3c ]
  br label %dec_label_pc_ff58

dec_label_pc_ff54:                                ; preds = %dec_label_pc_ff58
  %v0_ff54 = load i32, i32* %r1.global-to-local, align 4
  %v1_ff54 = add i32 %v0_ff54, 1
  %v2_ff54 = inttoptr i32 %v1_ff54 to i8*
  %v3_ff54 = load i8, i8* %v2_ff54, align 1
  %v4_ff54 = zext i8 %v3_ff54 to i32
  store i32 %v4_ff54, i32* @r2, align 4
  store i32 %v1_ff54, i32* %r1.global-to-local, align 4
  %v0_ff58.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %dec_label_pc_ff4c, %dec_label_pc_ff54
  %v0_ff60.off0 = phi i8 [ %v2_ff28, %dec_label_pc_ff4c ], [ %v3_ff54, %dec_label_pc_ff54 ]
  %v0_ff58 = phi i32 [ %v0_ff4c, %dec_label_pc_ff4c ], [ %v0_ff58.pr, %dec_label_pc_ff54 ]
  %v1_ff58 = add i32 %v0_ff58, -1
  store i32 %v1_ff58, i32* @r3, align 4
  %v3_ff5c = icmp eq i32 %v0_ff58, 0
  %v2_ff60 = load i32, i32* @r0, align 4
  %v3_ff60 = inttoptr i32 %v2_ff60 to i8*
  store i8 %v0_ff60.off0, i8* %v3_ff60, align 1
  %v4_ff60 = load i32, i32* @r0, align 4
  %v5_ff60 = add i32 %v4_ff60, 1
  store i32 %v5_ff60, i32* @r0, align 4
  br i1 %v3_ff5c, label %dec_label_pc_ff68, label %dec_label_pc_ff54

dec_label_pc_ff68:                                ; preds = %dec_label_pc_ff58
  %v0_ff68 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_ff68

; uselistorder directives
  uselistorder i32 %v0_ff58, { 1, 0 }
  uselistorder i32 %v1_ff3c, { 0, 1, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_ff58, { 1, 0 }
}

define i32 @function_ff70(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ff70:
  %v2_ff70 = icmp eq i32 %arg3, 0
  %v0_ff74 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_ff70, i32 %v0_ff74)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_ff7c

dec_label_pc_ff7c:                                ; preds = %dec_label_pc_ff7c, %dec_label_pc_ff70
  %v0_ff7c = phi i32 [ %v1_ff84, %dec_label_pc_ff7c ], [ 0, %dec_label_pc_ff70 ]
  %v2_ff7c = add i32 %v0_ff7c, %arg2
  %v3_ff7c = inttoptr i32 %v2_ff7c to i8*
  %v4_ff7c = load i8, i8* %v3_ff7c, align 1
  %v4_ff80 = add i32 %v0_ff7c, %arg1
  %v5_ff80 = inttoptr i32 %v4_ff80 to i8*
  store i8 %v4_ff7c, i8* %v5_ff80, align 1
  %v0_ff84 = load i32, i32* @ip, align 4
  %v1_ff84 = add i32 %v0_ff84, 1
  store i32 %v1_ff84, i32* @ip, align 4
  %v9_ff88 = icmp eq i32 %v1_ff84, %arg3
  br i1 %v9_ff88, label %dec_label_pc_ff90, label %dec_label_pc_ff7c

dec_label_pc_ff90:                                ; preds = %dec_label_pc_ff7c
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_ff84, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_ff94() local_unnamed_addr {
dec_label_pc_ff94:
  %r2.global-to-local = alloca i32, align 4
  %v0_ff94 = load i32, i32* @r1, align 4
  %v2_ff94 = icmp eq i32 %v0_ff94, 0
  %v0_ff98 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_ff94, i32 %v0_ff98)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ffa0

dec_label_pc_ffa0:                                ; preds = %dec_label_pc_ffa0, %dec_label_pc_ff94
  %v2_ffa4 = phi i32 [ %v1_ffa8, %dec_label_pc_ffa0 ], [ 0, %dec_label_pc_ff94 ]
  store i32 0, i32* @r3, align 4
  %v3_ffa4 = load i32, i32* @r0, align 4
  %v4_ffa4 = add i32 %v3_ffa4, %v2_ffa4
  %v5_ffa4 = inttoptr i32 %v4_ffa4 to i8*
  store i8 0, i8* %v5_ffa4, align 1
  %v0_ffa8 = load i32, i32* %r2.global-to-local, align 4
  %v1_ffa8 = add i32 %v0_ffa8, 1
  store i32 %v1_ffa8, i32* %r2.global-to-local, align 4
  %v1_ffac = load i32, i32* @r1, align 4
  %v9_ffac = icmp eq i32 %v1_ffa8, %v1_ffac
  br i1 %v9_ffac, label %dec_label_pc_ffb4, label %dec_label_pc_ffa0

dec_label_pc_ffb4:                                ; preds = %dec_label_pc_ffa0
  %v1_ffb4 = load i32, i32* @r0, align 4
  ret i32 %v1_ffb4

; uselistorder directives
  uselistorder i32 %v1_ffa8, { 1, 2, 0 }
}

define i32 @function_ffb8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ffb8:
  %v7_ffcc = icmp sgt i32 %arg4, %arg2
  br i1 %v7_ffcc, label %dec_label_pc_ffd4, label %dec_label_pc_ffdc

dec_label_pc_ffd4:                                ; preds = %dec_label_pc_fff0, %dec_label_pc_ffdc, %dec_label_pc_ffb8, %dec_label_pc_1001c
  %storemerge = phi i32 [ %v1_1001c, %dec_label_pc_1001c ], [ -1, %dec_label_pc_ffb8 ], [ -1, %dec_label_pc_ffdc ], [ -1, %dec_label_pc_fff0 ]
  ret i32 %storemerge

dec_label_pc_ffdc:                                ; preds = %dec_label_pc_ffb8
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_ffd4, label %dec_label_pc_ffe4

dec_label_pc_ffe4:                                ; preds = %dec_label_pc_ffdc
  br label %dec_label_pc_fffc

dec_label_pc_fff0:                                ; preds = %bb, %dec_label_pc_10010
  %v1_fffc3 = phi i32 [ %v1_10010, %dec_label_pc_10010 ], [ 0, %bb ]
  %v1_fff0 = add i32 %v0_1001c, 1
  %v9_fff4 = icmp eq i32 %v1_fff0, %arg2
  br i1 %v9_fff4, label %dec_label_pc_ffd4, label %dec_label_pc_fffc

dec_label_pc_fffc:                                ; preds = %dec_label_pc_fff0, %dec_label_pc_ffe4
  %v0_1001c = phi i32 [ %v1_fff0, %dec_label_pc_fff0 ], [ 0, %dec_label_pc_ffe4 ]
  %v1_fffc = phi i32 [ %v1_fffc3, %dec_label_pc_fff0 ], [ 0, %dec_label_pc_ffe4 ]
  %v2_fffc = add i32 %v1_fffc, %arg3
  %v3_fffc = inttoptr i32 %v2_fffc to i8*
  %v4_fffc = load i8, i8* %v3_fffc, align 1
  %v2_10000 = add i32 %v0_1001c, %arg1
  %v3_10000 = inttoptr i32 %v2_10000 to i8*
  %v4_10000 = load i8, i8* %v3_10000, align 1
  %v9_10004 = icmp eq i8 %v4_10000, %v4_fffc
  br i1 %v9_10004, label %dec_label_pc_10010, label %bb

bb:                                               ; preds = %dec_label_pc_fffc
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_fff0

dec_label_pc_10010:                               ; preds = %dec_label_pc_fffc
  %v1_10010 = add i32 %v1_fffc, 1
  store i32 %v1_10010, i32* @ip, align 4
  %v9_10014 = icmp eq i32 %v1_10010, %arg4
  br i1 %v9_10014, label %dec_label_pc_1001c, label %dec_label_pc_fff0

dec_label_pc_1001c:                               ; preds = %dec_label_pc_10010
  %v1_1001c = add i32 %v0_1001c, 1
  br label %dec_label_pc_ffd4

; uselistorder directives
  uselistorder i32 %v1_10010, { 1, 2, 0 }
  uselistorder i32 %v1_fffc, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fff0, { 1, 0 }
  uselistorder label %dec_label_pc_ffd4, { 3, 0, 1, 2 }
}

define i32 @function_10024(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10024:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10024 = load i32, i32* @r4, align 4
  %v12_10024 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10034

dec_label_pc_10034:                               ; preds = %.thread, %dec_label_pc_10048, %bb, %dec_label_pc_10024
  %v0_10034 = phi i32 [ %tmp, %dec_label_pc_10024 ], [ %v5_10034, %bb ], [ %v5_10034, %dec_label_pc_10048 ], [ %v5_10034, %.thread ]
  %v1_10034 = inttoptr i32 %v0_10034 to i8*
  %v2_10034 = load i8, i8* %v1_10034, align 1
  %v5_10034 = add i32 %v0_10034, 1
  store i32 %v5_10034, i32* %r5.global-to-local, align 4
  %v7_10038 = icmp eq i8 %v2_10034, 9
  br i1 %v7_10038, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10034
  br label %dec_label_pc_10034

bb:                                               ; preds = %dec_label_pc_10034
  %v3_10034 = zext i8 %v2_10034 to i32
  %v8_1003c = icmp eq i8 %v2_10034, 32
  store i32 %v3_10034, i32* @r4, align 4
  br i1 %v8_1003c, label %dec_label_pc_10034, label %dec_label_pc_10048

dec_label_pc_10048:                               ; preds = %bb
  %v7_10048 = icmp eq i8 %v2_10034, 10
  br i1 %v7_10048, label %dec_label_pc_10034, label %dec_label_pc_10050

dec_label_pc_10050:                               ; preds = %dec_label_pc_10048
  %v7_10050 = icmp eq i8 %v2_10034, 45
  br i1 %v7_10050, label %dec_label_pc_10140, label %dec_label_pc_10058

dec_label_pc_10058:                               ; preds = %dec_label_pc_10050
  %v7_10058 = icmp eq i8 %v2_10034, 43
  br i1 %v7_10058, label %bb44, label %dec_label_pc_10068

bb44:                                             ; preds = %dec_label_pc_10058
  %v2_1005c = inttoptr i32 %v5_10034 to i8*
  %v3_1005c = load i8, i8* %v2_1005c, align 1
  %v4_1005c = zext i8 %v3_1005c to i32
  store i32 %v4_1005c, i32* @r4, align 4
  %v6_1005c = add i32 %v0_10034, 2
  store i32 %v6_1005c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10068

dec_label_pc_10068:                               ; preds = %bb44, %dec_label_pc_10058, %dec_label_pc_10140
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10140 ], [ 2147483647, %dec_label_pc_10058 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10140 ], [ 0, %dec_label_pc_10058 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_10070 = call i32 @function_10558(i32 %storemerge1, i32 %arg2)
  %v0_10074 = load i32, i32* @r7, align 4
  store i32 %v0_10074, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_1007c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1007c, i32* @r1, align 4
  %v0_10080 = call i32 @function_1045c()
  %v0_10090.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10090.outer

dec_label_pc_10090.outer:                         ; preds = %.thread5, %dec_label_pc_10068
  %v2_1010c.ph = phi i32 [ %v5_1010c, %.thread5 ], [ 0, %dec_label_pc_10068 ]
  %v1_100d0.ph = phi i32 [ %v4_10110, %.thread5 ], [ %v0_10090.pre, %dec_label_pc_10068 ]
  %v1_100e8.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_10068 ]
  %v3_100dc = icmp uge i32 %v2_1010c.ph, %v0_10080
  %v9_100dc = icmp eq i32 %v2_1010c.ph, %v0_10080
  %v2_100e0 = xor i1 %v3_100dc, true
  %v3_100e0 = or i1 %v9_100dc, %v2_100e0
  %v2_100e4 = xor i1 %v9_100dc, true
  %v3_100e4 = and i1 %v3_100dc, %v2_100e4
  %v2_10104 = icmp eq i1 %v9_100dc, false
  br label %dec_label_pc_10090

dec_label_pc_10090:                               ; preds = %dec_label_pc_10090.outer, %dec_label_pc_10118
  %v1_100e8 = phi i32 [ -1, %dec_label_pc_10118 ], [ %v1_100e8.ph, %dec_label_pc_10090.outer ]
  %v1_100d0 = phi i32 [ %v3_10118, %dec_label_pc_10118 ], [ %v1_100d0.ph, %dec_label_pc_10090.outer ]
  %v1_10090 = urem i32 %v1_100d0, 256
  %v1_10094 = add nsw i32 %v1_10090, -48
  %v1_1009c = add nsw i32 %v1_10090, -97
  %v1_100a0 = add i32 %v1_100d0, -48
  %v1_100a4 = add nsw i32 %v1_10090, -65
  %tmp75 = icmp ult i32 %v1_10094, 10
  br i1 %tmp75, label %dec_label_pc_100d4, label %dec_label_pc_100ac

dec_label_pc_100ac:                               ; preds = %dec_label_pc_10090
  %v2_100ac = icmp ugt i32 %v1_100a4, 24
  %v7_100ac = icmp eq i32 %v1_100a4, 25
  %v2_100b0 = xor i1 %v7_100ac, true
  %v3_100b0 = and i1 %v2_100ac, %v2_100b0
  br i1 %v3_100b0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_100ac
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_100ac, %bb45
  %v0_100c414 = phi i32 [ %v1_100a0, %dec_label_pc_100ac ], [ 0, %bb45 ]
  %v2_100b4 = xor i1 %v2_100ac, true
  %v3_100b4 = or i1 %v7_100ac, %v2_100b4
  br i1 %v3_100b4, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_100c4 = phi i32 [ %v0_100c414, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_100b0, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_100bc = icmp ugt i32 %v1_1009c, 24
  %v11_100bc = icmp eq i32 %v1_1009c, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_100c0 = phi i1 [ %v7_100ac, %bb48 ], [ %v11_100bc, %bb49 ]
  %v0_100c0 = phi i1 [ %v2_100ac, %bb48 ], [ %v6_100bc, %bb49 ]
  %v2_100c0 = xor i1 %v1_100c0, true
  %v3_100c0 = and i1 %v0_100c0, %v2_100c0
  br i1 %v3_100c0, label %dec_label_pc_10124, label %dec_label_pc_100c4

dec_label_pc_100c4:                               ; preds = %bb50
  %v2_100c4 = icmp eq i32 %v0_100c4, 0
  %. = select i1 %v2_100c4, i32 87, i32 55
  %v2_100d0 = sub i32 %v1_100d0, %.
  br label %dec_label_pc_100d4

dec_label_pc_100d4:                               ; preds = %dec_label_pc_10090, %dec_label_pc_100c4
  %v0_100e829 = phi i32 [ %v1_100a4, %dec_label_pc_10090 ], [ %., %dec_label_pc_100c4 ]
  %v3_1010c = phi i32 [ %v1_100a0, %dec_label_pc_10090 ], [ %v2_100d0, %dec_label_pc_100c4 ]
  %v1_100d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_100d4 = sub i32 %v3_1010c, %v1_100d4
  %v4_100d4 = xor i32 %v1_100d4, %v3_1010c
  %v5_100d4 = xor i32 %v2_100d4, %v3_1010c
  %v6_100d4 = and i32 %v5_100d4, %v4_100d4
  %v7_100d4 = icmp slt i32 %v6_100d4, 0
  %v8_100d4 = icmp slt i32 %v2_100d4, 0
  %v2_100d8 = xor i1 %v8_100d4, %v7_100d4
  br i1 %v2_100d8, label %dec_label_pc_100dc, label %dec_label_pc_10124

dec_label_pc_100dc:                               ; preds = %dec_label_pc_100d4
  br i1 %v3_100e0, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_100dc
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_100dc, %bb53
  %v0_100e828 = phi i32 [ %v0_100e829, %dec_label_pc_100dc ], [ 0, %bb53 ]
  br i1 %v3_100e4, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_100e8 = phi i32 [ %v0_100e828, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_100e8, 0
  %v4_100e8 = zext i1 %tmp76 to i32
  %v5_100e8 = or i32 %v0_100e8, %v4_100e8
  %v7_100e8 = icmp eq i32 %v5_100e8, 0
  br i1 %v7_100e8, label %dec_label_pc_100f0, label %dec_label_pc_10118

dec_label_pc_100f0:                               ; preds = %bb56
  %v1_100fc = load i32, i32* %r8.global-to-local, align 4
  %v2_100fc = sub i32 %v3_1010c, %v1_100fc
  %v4_100fc = xor i32 %v1_100fc, %v3_1010c
  %v5_100fc = xor i32 %v2_100fc, %v3_1010c
  %v6_100fc = and i32 %v5_100fc, %v4_100fc
  %v7_100fc = icmp slt i32 %v6_100fc, 0
  %v8_100fc = icmp slt i32 %v2_100fc, 0
  %v9_100fc = icmp eq i32 %v3_1010c, %v1_100fc
  %v3_10100 = xor i1 %v8_100fc, %v7_100fc
  %v4_10100 = or i1 %v9_100fc, %v3_10100
  br i1 %v4_10100, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_100f0
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_100f0
  br i1 %v2_10104, label %.thread5, label %dec_label_pc_10118

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_1010c = mul i32 %v1_100d4, %v2_1010c.ph
  %v5_1010c = add i32 %v4_1010c, %v3_1010c
  %v1_10110 = load i32, i32* %r5.global-to-local, align 4
  %v2_10110 = inttoptr i32 %v1_10110 to i8*
  %v3_10110 = load i8, i8* %v2_10110, align 1
  %v4_10110 = zext i8 %v3_10110 to i32
  %v6_10110 = add i32 %v1_10110, 1
  store i32 %v6_10110, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10090.outer

dec_label_pc_10118:                               ; preds = %thread-pre-split, %bb56
  %v0_10118 = load i32, i32* %r5.global-to-local, align 4
  %v1_10118 = inttoptr i32 %v0_10118 to i8*
  %v2_10118 = load i8, i8* %v1_10118, align 1
  %v3_10118 = zext i8 %v2_10118 to i32
  %v5_10118 = add i32 %v0_10118, 1
  store i32 %v5_10118, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10090

dec_label_pc_10124:                               ; preds = %dec_label_pc_100d4, %bb50
  %v1_10124 = icmp slt i32 %v1_100e8, 0
  %v0_10150 = load i32, i32* %sl.global-to-local, align 4
  %v2_10150 = icmp eq i32 %v0_10150, 0
  br i1 %v1_10124, label %dec_label_pc_10150, label %dec_label_pc_1012c

dec_label_pc_1012c:                               ; preds = %dec_label_pc_10124
  br i1 %v2_10150, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_1012c
  %v2_10130 = sub i32 0, %v2_1010c.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_1012c, %bb59
  %v1_1013c = phi i32 [ -2147483648, %bb61 ], [ %v2_1010c.ph, %dec_label_pc_1012c ], [ %v2_10130, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_10024, i32* @r4, align 4
  store i32 %v12_10024, i32* @r7, align 4
  ret i32 %v1_1013c

dec_label_pc_10140:                               ; preds = %dec_label_pc_10050
  %v1_10140 = inttoptr i32 %v5_10034 to i8*
  %v2_10140 = load i8, i8* %v1_10140, align 1
  %v3_10140 = zext i8 %v2_10140 to i32
  store i32 %v3_10140, i32* @r4, align 4
  %v5_10140 = add i32 %v0_10034, 2
  store i32 %v5_10140, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10068

dec_label_pc_10150:                               ; preds = %dec_label_pc_10124
  br i1 %v2_10150, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_10150
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_10150
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_10150, { 1, 0 }
  uselistorder i32 %v2_100fc, { 1, 0 }
  uselistorder i32 %v1_100fc, { 1, 0, 2 }
  uselistorder i32 %v2_100d4, { 1, 0 }
  uselistorder i32 %v3_1010c, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_100ac, { 1, 2, 0 }
  uselistorder i1 %v2_100ac, { 1, 0, 2 }
  uselistorder i32 %v1_10090, { 1, 2, 0 }
  uselistorder i32 %v1_100d0, { 1, 2, 0 }
  uselistorder i32 %v1_100e8, { 1, 0 }
  uselistorder i1 %v9_100dc, { 1, 0, 2 }
  uselistorder i1 %v3_100dc, { 1, 0 }
  uselistorder i32 %v2_1010c.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_10080, { 1, 0 }
  uselistorder i32 %v5_10034, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_10034, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_10034, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 20, 21, 5, 12, 2, 11, 3, 13, 4, 14, 10, 6, 15, 0, 16, 7, 8, 17, 9, 18, 1, 19 }
  uselistorder i8 32, { 9, 10, 11, 0, 12, 13, 1, 2, 14, 3, 4, 5, 6, 7, 8 }
  uselistorder i8 9, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_100d4, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_10090, { 1, 0 }
  uselistorder label %dec_label_pc_10068, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10034, { 1, 2, 0, 3 }
}

define i32 @function_10160(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10160:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10160 = load i32, i32* @r4, align 4
  store i32 %v3_10160, i32* %stack_var_-24, align 4
  %v12_10160 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10178

dec_label_pc_10178:                               ; preds = %dec_label_pc_1019c.dec_label_pc_10178_crit_edge, %dec_label_pc_10160
  %v0_1017c = phi i32 [ %v0_1017c.pre, %dec_label_pc_1019c.dec_label_pc_10178_crit_edge ], [ %arg3, %dec_label_pc_10160 ]
  %v1_10184 = call i32 @function_10758(i32 %v0_1017c)
  %v7_10188 = icmp eq i32 %v1_10184, 1
  %v0_10190 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_10188, label %dec_label_pc_10190, label %dec_label_pc_101a8

dec_label_pc_10190:                               ; preds = %dec_label_pc_10178
  %v1_10190 = add i32 %v0_10190, 1
  store i32 %v1_10190, i32* %r5.global-to-local, align 4
  %v1_10194 = load i32, i32* %r8.global-to-local, align 4
  %v6_10198 = icmp slt i32 %v1_10190, %v1_10194
  br i1 %v6_10198, label %dec_label_pc_1019c, label %.loopexit

dec_label_pc_1019c:                               ; preds = %dec_label_pc_10190
  %v0_1019c = load i32, i32* %r4.global-to-local, align 4
  %v1_1019c = inttoptr i32 %v0_1019c to i8*
  %v2_1019c = load i8, i8* %v1_1019c, align 1
  %v5_1019c = add i32 %v0_1019c, 1
  store i32 %v5_1019c, i32* %r4.global-to-local, align 4
  %v7_101a0 = icmp eq i8 %v2_1019c, 10
  br i1 %v7_101a0, label %dec_label_pc_101a8, label %dec_label_pc_1019c.dec_label_pc_10178_crit_edge

dec_label_pc_1019c.dec_label_pc_10178_crit_edge:  ; preds = %dec_label_pc_1019c
  %v0_1017c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10178

dec_label_pc_101a8:                               ; preds = %dec_label_pc_10178, %dec_label_pc_1019c
  %v0_101a8 = phi i32 [ %v1_10190, %dec_label_pc_1019c ], [ %v0_10190, %dec_label_pc_10178 ]
  %v2_101a8 = icmp eq i32 %v0_101a8, 0
  br i1 %v2_101a8, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_101a8
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_10190, %dec_label_pc_101a8, %bb
  %v0_101b0 = load i32, i32* @r7, align 4
  %v2_101b4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_101b4, i32* @r4, align 4
  store i32 %v12_10160, i32* @r7, align 4
  ret i32 %v0_101b0

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_101a8, { 1, 0 }
}

define i32 @function_101bc() local_unnamed_addr {
dec_label_pc_101bc:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_101cc = call i32 @function_10de8()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_101d4 = inttoptr i32 %v0_101cc to i32*
  store i32 0, i32* %v2_101d4, align 4
  %v0_101e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_101e4 = call i32 @function_11168(i32 2, i32 2, i32 %v0_101e0)
  %v7_101e8 = icmp eq i32 %v3_101e4, -1
  store i32 %v3_101e4, i32* %r5.global-to-local, align 4
  br i1 %v7_101e8, label %bb, label %dec_label_pc_101f8

bb:                                               ; preds = %dec_label_pc_101bc
  %v1_101f0 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10244

dec_label_pc_101f8:                               ; preds = %dec_label_pc_101bc
  %v2_10204 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10204, i32* %r4.global-to-local, align 4
  %v0_10210 = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10224 = call i32 @function_10f84(i32 %v3_101e4, i32 %v2_10204, i32 %v0_10210)
  %v2_1022c = ptrtoint i32* %stack_var_-20 to i32
  %v0_10230 = load i32, i32* %r5.global-to-local, align 4
  %v3_10234 = call i32 @function_10fbc(i32 %v0_10230, i32 %v2_10204, i32 %v2_1022c)
  %v1_1023c = call i32 @function_109c0(i32 %v0_10230)
  br label %dec_label_pc_10244

dec_label_pc_10244:                               ; preds = %bb, %dec_label_pc_101f8
  %storemerge = phi i32 [ 134744072, %dec_label_pc_101f8 ], [ %v1_101f0, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_101e4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10f84, { 6, 7, 5, 4, 2, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11168, { 18, 19, 16, 17, 15, 14, 13, 12, 3, 2, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0 }
  uselistorder label %dec_label_pc_10244, { 1, 0 }
}

define i32 @function_10250(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10250:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_10254 = load i8, i8* %tmp, align 1
  %v2_10258 = icmp eq i8 %v3_10254, 0
  br i1 %v2_10258, label %bb, label %dec_label_pc_1026c

bb:                                               ; preds = %dec_label_pc_10250
  %v4_10254 = zext i8 %v3_10254 to i32
  br label %dec_label_pc_10280

dec_label_pc_1026c:                               ; preds = %dec_label_pc_10250
  br label %dec_label_pc_10270

dec_label_pc_10270:                               ; preds = %dec_label_pc_10270, %dec_label_pc_1026c
  %v0_10270 = phi i32 [ %v1_10270, %dec_label_pc_10270 ], [ 0, %dec_label_pc_1026c ]
  %v1_10270 = add i32 %v0_10270, 1
  %v2_10274 = add i32 %v1_10270, %arg2
  %v3_10274 = inttoptr i32 %v2_10274 to i8*
  %v4_10274 = load i8, i8* %v3_10274, align 1
  %v2_10278 = icmp eq i8 %v4_10274, 0
  br i1 %v2_10278, label %dec_label_pc_10280, label %dec_label_pc_10270

dec_label_pc_10280:                               ; preds = %dec_label_pc_10270, %bb
  %v0_102c421 = phi i32 [ %v4_10254, %bb ], [ %v1_10270, %dec_label_pc_10270 ]
  %v0_102882 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_102882, 1
  br i1 %tmp29, label %dec_label_pc_102d8, label %dec_label_pc_10294

dec_label_pc_10294:                               ; preds = %dec_label_pc_10280, %dec_label_pc_10288.backedge
  %v0_1028c.in = phi i32 [ %v0_1028c, %dec_label_pc_10288.backedge ], [ %v0_102882, %dec_label_pc_10280 ]
  %v1_102a0 = phi i32 [ %v1_102a015, %dec_label_pc_10288.backedge ], [ 0, %dec_label_pc_10280 ]
  %v0_10294 = phi i32 [ %v5_10294, %dec_label_pc_10288.backedge ], [ %tmp23, %dec_label_pc_10280 ]
  %v0_1028c = add i32 %v0_1028c.in, -1
  %v1_10294 = inttoptr i32 %v0_10294 to i8*
  %v2_10294 = load i8, i8* %v1_10294, align 1
  %v3_10294 = zext i8 %v2_10294 to i32
  %v5_10294 = add i32 %v0_10294, 1
  %v1_10298 = add nsw i32 %v3_10294, -65
  %v2_102a0 = add i32 %v1_102a0, %arg2
  %v3_102a0 = inttoptr i32 %v2_102a0 to i8*
  %v4_102a0 = load i8, i8* %v3_102a0, align 1
  %v6_102a0 = zext i8 %v4_102a0 to i32
  %v1_102a4 = add nsw i32 %v6_102a0, -65
  %tmp38 = icmp ult i32 %v1_10298, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_10294
  %v5_102a8 = or i32 %v3_10294, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_10294, %bb30
  %v0_102b4 = phi i32 [ %v3_10294, %dec_label_pc_10294 ], [ %v5_102a8, %bb30 ]
  %tmp39 = icmp ult i32 %v1_102a4, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_102b0 = or i32 %v6_102a0, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_102b4 = phi i32 [ %v6_102a0, %bb31 ], [ %v5_102b0, %bb32 ]
  %v9_102b4 = icmp eq i32 %v0_102b4, %v1_102b4
  br i1 %v9_102b4, label %dec_label_pc_102c0, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_10288.backedge

dec_label_pc_10288.backedge:                      ; preds = %bb34, %dec_label_pc_102c0
  %v1_102a015 = phi i32 [ 0, %bb34 ], [ %v1_102c0, %dec_label_pc_102c0 ]
  %tmp35 = icmp slt i32 %v0_1028c, 1
  br i1 %tmp35, label %dec_label_pc_102d8, label %dec_label_pc_10294

dec_label_pc_102c0:                               ; preds = %bb33
  %v1_102c0 = add i32 %v1_102a0, 1
  %v9_102c4 = icmp eq i32 %v0_102c421, %v1_102c0
  br i1 %v9_102c4, label %dec_label_pc_102cc, label %dec_label_pc_10288.backedge

dec_label_pc_102cc:                               ; preds = %dec_label_pc_102c0
  %v2_102cc = sub i32 %v5_10294, %tmp23
  br label %dec_label_pc_102d8

dec_label_pc_102d8:                               ; preds = %dec_label_pc_10288.backedge, %dec_label_pc_10280, %dec_label_pc_102cc
  %storemerge = phi i32 [ %v2_102cc, %dec_label_pc_102cc ], [ -1, %dec_label_pc_10280 ], [ -1, %dec_label_pc_10288.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_102c0, { 1, 0 }
  uselistorder i32 %v0_10294, { 1, 0 }
  uselistorder i32 %v1_102a0, { 1, 0 }
  uselistorder i8 %v3_10254, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 7, 6, 8, 3, 9, 4, 10, 5, 11, 12 }
  uselistorder label %dec_label_pc_102d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10288.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_10294, { 1, 0 }
}

define i32 @function_102e0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_102e0:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_102e0 = load i8, i8* %arg1, align 1
  %v2_102e4 = icmp eq i8 %v2_102e0, 0
  br i1 %v2_102e4, label %bb, label %dec_label_pc_102f0

bb:                                               ; preds = %dec_label_pc_102e0
  %v3_102e0 = zext i8 %v2_102e0 to i32
  br label %dec_label_pc_10304

dec_label_pc_102f0:                               ; preds = %dec_label_pc_102e0
  br label %dec_label_pc_102f4

dec_label_pc_102f4:                               ; preds = %dec_label_pc_102f4, %dec_label_pc_102f0
  %v0_102f4 = phi i32 [ %v1_102f4, %dec_label_pc_102f4 ], [ 0, %dec_label_pc_102f0 ]
  %v1_102f4 = add i32 %v0_102f4, 1
  %v2_102f8 = add i32 %v1_102f4, %tmp
  %v3_102f8 = inttoptr i32 %v2_102f8 to i8*
  %v4_102f8 = load i8, i8* %v3_102f8, align 1
  %v2_102fc = icmp eq i8 %v4_102f8, 0
  br i1 %v2_102fc, label %dec_label_pc_10304, label %dec_label_pc_102f4

dec_label_pc_10304:                               ; preds = %dec_label_pc_102f4, %bb
  %v0_103503 = phi i32 [ %v3_102e0, %bb ], [ %v1_102f4, %dec_label_pc_102f4 ]
  %v1_10304 = inttoptr i32 %arg2 to i8*
  %v2_10304 = load i8, i8* %v1_10304, align 1
  %v3_10304 = zext i8 %v2_10304 to i32
  store i32 %v3_10304, i32* @r3, align 4
  %v2_10308 = icmp eq i8 %v2_10304, 0
  br i1 %v2_10308, label %bb21, label %dec_label_pc_10314

bb21:                                             ; preds = %dec_label_pc_10304
  store i32 %v3_10304, i32* @r2, align 4
  br label %dec_label_pc_10328

dec_label_pc_10314:                               ; preds = %dec_label_pc_10304
  br label %dec_label_pc_10318

dec_label_pc_10318:                               ; preds = %dec_label_pc_10318, %dec_label_pc_10314
  %v0_10318 = phi i32 [ %v1_10318, %dec_label_pc_10318 ], [ 0, %dec_label_pc_10314 ]
  %v1_10318 = add i32 %v0_10318, 1
  store i32 %v1_10318, i32* @r2, align 4
  %v2_1031c = add i32 %v1_10318, %arg2
  %v3_1031c = inttoptr i32 %v2_1031c to i8*
  %v4_1031c = load i8, i8* %v3_1031c, align 1
  %v6_1031c = zext i8 %v4_1031c to i32
  store i32 %v6_1031c, i32* @r3, align 4
  %v2_10320 = icmp eq i8 %v4_1031c, 0
  br i1 %v2_10320, label %dec_label_pc_10328, label %dec_label_pc_10318

dec_label_pc_10328:                               ; preds = %dec_label_pc_10318, %bb21
  %v0_10328 = phi i32 [ %v3_10304, %bb21 ], [ %v1_10318, %dec_label_pc_10318 ]
  %v9_10328 = icmp eq i32 %v0_10328, %v0_103503
  br i1 %v9_10328, label %dec_label_pc_10350.preheader, label %dec_label_pc_10330

dec_label_pc_10350.preheader:                     ; preds = %dec_label_pc_10328
  %v2_103505 = icmp eq i32 %v0_103503, 0
  br i1 %v2_103505, label %dec_label_pc_10358, label %dec_label_pc_10338

dec_label_pc_10330:                               ; preds = %dec_label_pc_10338, %dec_label_pc_10328
  ret i32 0

dec_label_pc_10338:                               ; preds = %dec_label_pc_10348, %dec_label_pc_10350.preheader
  %v0_10350.in = phi i32 [ %v0_10350, %dec_label_pc_10348 ], [ %v0_103503, %dec_label_pc_10350.preheader ]
  %v0_1034c = phi i32 [ %v1_1034c, %dec_label_pc_10348 ], [ %arg2, %dec_label_pc_10350.preheader ]
  %v0_10348 = phi i32 [ %v1_10348, %dec_label_pc_10348 ], [ %tmp, %dec_label_pc_10350.preheader ]
  %v0_10350 = add i32 %v0_10350.in, -1
  %v1_10338 = inttoptr i32 %v0_10348 to i8*
  %v2_10338 = load i8, i8* %v1_10338, align 1
  %v3_10338 = zext i8 %v2_10338 to i32
  store i32 %v3_10338, i32* @r2, align 4
  %v1_1033c = inttoptr i32 %v0_1034c to i8*
  %v2_1033c = load i8, i8* %v1_1033c, align 1
  %v3_1033c = zext i8 %v2_1033c to i32
  store i32 %v3_1033c, i32* @r3, align 4
  %v9_10340 = icmp eq i8 %v2_10338, %v2_1033c
  br i1 %v9_10340, label %dec_label_pc_10348, label %dec_label_pc_10330

dec_label_pc_10348:                               ; preds = %dec_label_pc_10338
  %v1_10348 = add i32 %v0_10348, 1
  %v1_1034c = add i32 %v0_1034c, 1
  %v2_10350 = icmp eq i32 %v0_10350, 0
  br i1 %v2_10350, label %dec_label_pc_10358, label %dec_label_pc_10338

dec_label_pc_10358:                               ; preds = %dec_label_pc_10348, %dec_label_pc_10350.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10318, { 0, 1, 3, 2 }
  uselistorder i8 %v2_102e0, { 1, 0 }
}

define i32 @function_10360(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10360:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_10360 = load i32, i32* @r4, align 4
  %v12_10360 = load i32, i32* @r7, align 4
  %v0_10364 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10364, i32* %r8.global-to-local, align 4
  %v2_10364 = icmp eq i32 %v0_10364, 0
  store i1 %v2_10364, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_10364, label %dec_label_pc_10444, label %dec_label_pc_10374

dec_label_pc_10374:                               ; preds = %dec_label_pc_10360
  %v3_10374 = icmp eq i8 %arg1, 0
  store i1 %v3_10374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10374, label %.thread, label %dec_label_pc_10388

.thread:                                          ; preds = %dec_label_pc_10374
  %v4_1037c = inttoptr i32 %v0_10364 to i8*
  store i8 48, i8* %v4_1037c, align 1
  %v0_10380.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10380.pr.pr, label %.thread1, label %dec_label_pc_10388

.thread1:                                         ; preds = %.thread
  %v4_10380 = load i32, i32* %r8.global-to-local, align 4
  %v5_10380 = add i32 %v4_10380, 1
  %v6_10380 = inttoptr i32 %v5_10380 to i8*
  store i8 0, i8* %v6_10380, align 1
  %v0_10384.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10384.pr.pr, label %dec_label_pc_10444, label %dec_label_pc_10388

dec_label_pc_10388:                               ; preds = %dec_label_pc_10374, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_1038c = icmp eq i32 %arg2, 10
  store i1 %v7_1038c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1038c, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_10388
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_10388
  %v4_10388 = zext i1 %tmp47 to i32
  store i32 %v4_10388, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_103ac8 = sub nsw i32 0, %tmp
  %tmp.v3_103ac8 = select i1 %phitmp, i32 %tmp, i32 %v3_103ac8
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_103ac8, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_103b8 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_103b8, i32* @r7, align 4
  br label %dec_label_pc_103bc

dec_label_pc_103bc:                               ; preds = %bb45, %.thread6
  %v0_103bc = phi i32 [ %v0_103e0, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_103bc, i32* %r0.global-to-local, align 4
  %v0_103c0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_103c0, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_103bc, 16777216
  %v1_103c4 = sdiv i32 %sext, 16777216
  %v3_103c4 = call i32 @function_10558(i32 %v1_103c4, i32 %v0_103c0)
  %v7_103c8 = icmp eq i32 %v0_103c0, 9
  store i1 %v7_103c8, i1* %cpsr_z.global-to-local, align 1
  %v1_103cc = add i32 %v0_103c0, 48
  %v0_103d0 = load i32, i32* @r4, align 4
  store i32 %v0_103d0, i32* @r0, align 4
  %v7_103d4 = icmp sgt i32 %v0_103c0, 9
  %extract.t = trunc i32 %v1_103cc to i8
  br i1 %v7_103d4, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_103bc
  %v9_103d4 = add i32 %v0_103c0, 55
  %extract.t27 = trunc i32 %v9_103d4 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_103bc, %bb44
  %v0_103dc.off0 = phi i8 [ %extract.t, %dec_label_pc_103bc ], [ %extract.t27, %bb44 ]
  %v0_103d8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_103d8, i32* @r1, align 4
  %v2_103dc = load i32, i32* %r5.global-to-local, align 4
  %v3_103dc = load i32, i32* @r7, align 4
  %v4_103dc = add i32 %v3_103dc, %v2_103dc
  %v5_103dc = inttoptr i32 %v4_103dc to i8*
  store i8 %v0_103dc.off0, i8* %v5_103dc, align 1
  %v0_103e0 = call i32 @function_1045c()
  store i32 %v0_103e0, i32* %r0.global-to-local, align 4
  store i32 %v0_103e0, i32* @r4, align 4
  %v2_103e4 = icmp eq i32 %v0_103e0, 0
  store i1 %v2_103e4, i1* %cpsr_z.global-to-local, align 1
  %v0_103e8 = load i32, i32* %r5.global-to-local, align 4
  %v1_103e8 = add i32 %v0_103e8, -1
  store i32 %v1_103e8, i32* %r5.global-to-local, align 4
  br i1 %v2_103e4, label %dec_label_pc_103f0, label %dec_label_pc_103bc

dec_label_pc_103f0:                               ; preds = %bb45
  %v0_103f0 = load i32, i32* %sl.global-to-local, align 4
  %v2_103f0 = icmp eq i32 %v0_103f0, 0
  store i1 %v2_103f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103f0, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_103f0
  %v3_103f4 = ptrtoint i32* %stack_var_-32 to i32
  %v3_103f8 = add i32 %v1_103e8, %v3_103f4
  store i32 %v3_103f8, i32* %r2.global-to-local, align 4
  %v4_10400 = add i32 %v3_103f8, -34
  %v5_10400 = inttoptr i32 %v4_10400 to i8*
  store i8 45, i8* %v5_10400, align 1
  %v0_10404.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10404.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_10404.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_103f0
  %v1_10404 = phi i32 [ %v1_103e8, %dec_label_pc_103f0 ], [ %v1_10404.pre, %.thread11 ]
  %v2_10404 = add i32 %v1_10404, 1
  store i32 %v2_10404, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_10410 = phi i32 [ %v2_10404, %.thread12 ], [ %v1_10404.pre, %.thread11 ]
  %v0_10408 = load i32, i32* @r7, align 4
  %v2_10408 = add i32 %v0_10408, %v1_10410
  %v3_10408 = inttoptr i32 %v2_10408 to i8*
  %v4_10408 = load i8, i8* %v3_10408, align 1
  %v6_10408 = zext i8 %v4_10408 to i32
  %v2_1040c = icmp eq i8 %v4_10408, 0
  store i1 %v2_1040c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10408, i32* %r2.global-to-local, align 4
  br i1 %v2_1040c, label %dec_label_pc_10454, label %dec_label_pc_1041c.preheader

dec_label_pc_1041c.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1041c

dec_label_pc_1041c:                               ; preds = %dec_label_pc_1041c.preheader, %dec_label_pc_1041c
  %v0_1041c = phi i32 [ 0, %dec_label_pc_1041c.preheader ], [ %v1_1041c, %dec_label_pc_1041c ]
  %v1_1041c = add i32 %v0_1041c, 1
  store i32 %v1_1041c, i32* %r1.global-to-local, align 4
  %v2_10420 = add i32 %v1_1041c, %v2_10408
  %v3_10420 = inttoptr i32 %v2_10420 to i8*
  %v4_10420 = load i8, i8* %v3_10420, align 1
  %v2_10424 = icmp eq i8 %v4_10420, 0
  store i1 %v2_10424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10424, label %dec_label_pc_1042c, label %dec_label_pc_1041c

dec_label_pc_1042c:                               ; preds = %dec_label_pc_1041c, %dec_label_pc_10454
  %v0_1043024 = phi i32 [ %v6_10408, %dec_label_pc_10454 ], [ %v1_1041c, %dec_label_pc_1041c ]
  %v0_1042c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1042c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10430

dec_label_pc_10430:                               ; preds = %dec_label_pc_10430.dec_label_pc_10430_crit_edge, %dec_label_pc_1042c
  %v2_1043c = phi i32 [ %v5_1043c, %dec_label_pc_10430.dec_label_pc_10430_crit_edge ], [ %v0_1042c, %dec_label_pc_1042c ]
  %v0_10434 = phi i32 [ %v0_10434.pre, %dec_label_pc_10430.dec_label_pc_10430_crit_edge ], [ %v2_10408, %dec_label_pc_1042c ]
  %v0_10430 = phi i32 [ %v0_10430.pre, %dec_label_pc_10430.dec_label_pc_10430_crit_edge ], [ %v0_1043024, %dec_label_pc_1042c ]
  %v1_10430 = add i32 %v0_10430, -1
  store i32 %v1_10430, i32* %r1.global-to-local, align 4
  %v1_10434 = inttoptr i32 %v0_10434 to i8*
  %v2_10434 = load i8, i8* %v1_10434, align 1
  %v5_10434 = add i32 %v0_10434, 1
  store i32 %v5_10434, i32* %r2.global-to-local, align 4
  %v3_10438 = icmp eq i32 %v0_10430, 0
  store i1 %v3_10438, i1* %cpsr_z.global-to-local, align 1
  %v3_1043c = inttoptr i32 %v2_1043c to i8*
  store i8 %v2_10434, i8* %v3_1043c, align 1
  %v4_1043c = load i32, i32* %r0.global-to-local, align 4
  %v5_1043c = add i32 %v4_1043c, 1
  store i32 %v5_1043c, i32* %r0.global-to-local, align 4
  br i1 %v3_10438, label %dec_label_pc_10444, label %dec_label_pc_10430.dec_label_pc_10430_crit_edge

dec_label_pc_10430.dec_label_pc_10430_crit_edge:  ; preds = %dec_label_pc_10430
  %v0_10430.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10434.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10430

dec_label_pc_10444:                               ; preds = %dec_label_pc_10430, %.thread1, %dec_label_pc_10360
  %v0_10444 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10444, i32* %r0.global-to-local, align 4
  store i32 %v3_10360, i32* @r4, align 4
  store i32 %v12_10360, i32* @r7, align 4
  ret i32 %v0_10444

dec_label_pc_10454:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10408, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1042c

; uselistorder directives
  uselistorder i32 %v5_1043c, { 1, 0 }
  uselistorder i1 %v3_10438, { 1, 0 }
  uselistorder i32 %v0_10434, { 1, 0 }
  uselistorder i32 %v1_1041c, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10408, { 1, 0 }
  uselistorder i32 %v2_10408, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10404.pre, { 1, 0 }
  uselistorder i32 %v1_103e8, { 1, 0, 2 }
  uselistorder i32 %v0_103e0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_103c0, { 2, 0, 1, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_10364, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 9, 10, 11, 12 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_1042c, { 1, 0 }
  uselistorder label %dec_label_pc_1041c, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_10388, { 2, 1, 0 }
}

define i32 @function_1045c() local_unnamed_addr {
dec_label_pc_1045c:
  %r2.global-to-local = alloca i32, align 4
  %v0_1045c = load i32, i32* @r1, align 4
  %v1_1045c = add i32 %v0_1045c, -1
  store i32 %v1_1045c, i32* %r2.global-to-local, align 4
  %v2_1045c = icmp eq i32 %v0_1045c, 0
  %v7_1045c = icmp eq i32 %v0_1045c, 1
  %v0_10460 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_1045c, i32 %v0_10460)
  br i1 %v2_1045c, label %dec_label_pc_10544, label %dec_label_pc_10468

dec_label_pc_10468:                               ; preds = %dec_label_pc_1045c
  %v0_10468 = load i32, i32* @r0, align 4
  %v1_10468 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_10468, %v1_10468
  br i1 %tmp, label %dec_label_pc_10470, label %dec_label_pc_104fc

dec_label_pc_10470:                               ; preds = %dec_label_pc_10468
  %v1_10470 = load i32, i32* %r2.global-to-local, align 4
  %v2_10470 = and i32 %v1_10470, %v1_10468
  %v4_10470 = icmp eq i32 %v2_10470, 0
  br i1 %v4_10470, label %dec_label_pc_10508, label %dec_label_pc_10478

dec_label_pc_10478:                               ; preds = %dec_label_pc_10470
  %v3_10478 = icmp ult i32 %v1_10468, 536870912
  br i1 %v3_10478, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10478
  %v4_1047c = mul i32 %v1_10468, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10478, %.thread
  %v0_1049c.pr36.ph = phi i32 [ %v4_1047c, %.thread ], [ %v1_10468, %dec_label_pc_10478 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10478 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_1049c.pr36 = phi i32 [ %v4_10490, %bb81 ], [ %v0_1049c.pr36.ph, %.preheader.preheader ]
  %v1_10494 = phi i32 [ %v4_10494, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_10488 = icmp ugt i32 %v0_1049c.pr36, 268435455
  br i1 %v2_10488, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_1049cthread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_1048c = icmp ult i32 %v0_1049c.pr36, %v0_10468
  br i1 %v4_1048c, label %bb80, label %dec_label_pc_1049cthread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_10490 = and i32 %v0_1049c.pr36, 268435456
  %v3_10490 = icmp eq i32 %v2_10490, 0
  %v4_10490 = mul i32 %v0_1049c.pr36, 16
  br i1 %v3_10490, label %bb81, label %dec_label_pc_1049c.loopexit

bb81:                                             ; preds = %bb80
  %v2_10494 = and i32 %v1_10494, 268435456
  %v3_10494 = icmp eq i32 %v2_10494, 0
  %v4_10494 = mul i32 %v1_10494, 16
  br i1 %v3_10494, label %.preheader, label %dec_label_pc_1049cthread-pre-split.loopexit.loopexit

dec_label_pc_1049cthread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_104a848.ph = phi i32 [ %v1_10494, %bb ], [ %v4_10494, %bb81 ]
  %v0_1049c.pr38.ph = phi i32 [ %v0_1049c.pr36, %bb ], [ %v4_10490, %bb81 ]
  br label %dec_label_pc_1049cthread-pre-split.loopexit

dec_label_pc_1049cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1049cthread-pre-split.loopexit.loopexit, %.thread2
  %v1_104a848 = phi i32 [ %v1_10494, %.thread2 ], [ %v1_104a848.ph, %dec_label_pc_1049cthread-pre-split.loopexit.loopexit ]
  %v0_1049c.pr38 = phi i32 [ %v0_1049c.pr36, %.thread2 ], [ %v0_1049c.pr38.ph, %dec_label_pc_1049cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1049cthread-pre-split

dec_label_pc_1049cthread-pre-split:               ; preds = %dec_label_pc_1049cthread-pre-split.loopexit, %bb83
  %v1_104a846 = phi i32 [ %v1_104a848, %dec_label_pc_1049cthread-pre-split.loopexit ], [ %v3_104a8, %bb83 ]
  %v0_1049c.pr = phi i32 [ %v0_1049c.pr38, %dec_label_pc_1049cthread-pre-split.loopexit ], [ %v3_104a4, %bb83 ]
  br label %dec_label_pc_1049c

dec_label_pc_1049c.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_1049c

dec_label_pc_1049c:                               ; preds = %dec_label_pc_1049c.loopexit, %dec_label_pc_1049cthread-pre-split
  %v1_104a8 = phi i32 [ %v1_104a846, %dec_label_pc_1049cthread-pre-split ], [ %v1_10494, %dec_label_pc_1049c.loopexit ]
  %v1_104a4 = phi i32 [ %v0_1049c.pr, %dec_label_pc_1049cthread-pre-split ], [ %v4_10490, %dec_label_pc_1049c.loopexit ]
  %v2_1049c = icmp slt i32 %v1_104a4, 0
  br i1 %v2_1049c, label %dec_label_pc_104b0, label %bb82

bb82:                                             ; preds = %dec_label_pc_1049c
  %v4_104a0 = icmp ult i32 %v1_104a4, %v0_10468
  br i1 %v4_104a0, label %bb83, label %dec_label_pc_104b0

bb83:                                             ; preds = %bb82
  %v3_104a4 = mul i32 %v1_104a4, 2
  %v2_104a8 = icmp slt i32 %v1_104a8, 0
  %v3_104a8 = mul i32 %v1_104a8, 2
  br i1 %v2_104a8, label %dec_label_pc_104b0, label %dec_label_pc_1049cthread-pre-split

dec_label_pc_104b0:                               ; preds = %bb82, %dec_label_pc_1049c, %bb83
  %v2_104bc59 = phi i32 [ %v3_104a8, %bb83 ], [ %v1_104a8, %bb82 ], [ %v1_104a8, %dec_label_pc_1049c ]
  %v1_104b451 = phi i32 [ %v3_104a4, %bb83 ], [ %v1_104a4, %bb82 ], [ %v1_104a4, %dec_label_pc_1049c ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_104b4

dec_label_pc_104b4:                               ; preds = %.thread11, %dec_label_pc_104b0
  %v1_104e8 = phi i32 [ %v4_104e8, %.thread11 ], [ %v2_104bc59, %dec_label_pc_104b0 ]
  %v1_104bc = phi i32 [ %v0_104f4, %.thread11 ], [ 0, %dec_label_pc_104b0 ]
  %v1_104ec = phi i32 [ %v4_104ec, %.thread11 ], [ %v1_104b451, %dec_label_pc_104b0 ]
  %v1_104b8 = phi i32 [ %v0_104e4, %.thread11 ], [ %v0_10468, %dec_label_pc_104b0 ]
  %v3_104b4 = icmp ult i32 %v1_104b8, %v1_104ec
  br i1 %v3_104b4, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_104b4
  %v3_104b8 = sub i32 %v1_104b8, %v1_104ec
  %v3_104bc = or i32 %v1_104bc, %v1_104e8
  store i32 %v3_104bc, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_104b4, %bb84
  %v1_104c4 = phi i32 [ %v1_104b8, %dec_label_pc_104b4 ], [ %v3_104b8, %bb84 ]
  %v1_104c8 = phi i32 [ %v1_104bc, %dec_label_pc_104b4 ], [ %v3_104bc, %bb84 ]
  %v4_104c0 = udiv i32 %v1_104ec, 2
  %v6_104c0 = icmp ult i32 %v1_104c4, %v4_104c0
  br i1 %v6_104c0, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_104c4 = urem i32 %v1_104ec, 2
  %v4_104c4 = icmp eq i32 %v3_104c4, 0
  %v6_104c4 = sub i32 %v1_104c4, %v4_104c0
  br i1 %v4_104c4, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_104c8 = udiv i32 %v1_104e8, 2
  %v6_104c8 = or i32 %v1_104c8, %v5_104c8
  store i32 %v6_104c8, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_104d0 = phi i32 [ %v6_104c4, %bb85 ], [ %v1_104c4, %.thread7 ], [ %v6_104c4, %bb86 ]
  %v1_104d4 = phi i32 [ %v1_104c8, %bb85 ], [ %v1_104c8, %.thread7 ], [ %v6_104c8, %bb86 ]
  %v4_104cc = udiv i32 %v1_104ec, 4
  %v6_104cc = icmp ult i32 %v1_104d0, %v4_104cc
  br i1 %v6_104cc, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_104d0 = and i32 %v1_104ec, 2
  %v4_104d0 = icmp eq i32 %v3_104d0, 0
  %v6_104d0 = sub i32 %v1_104d0, %v4_104cc
  br i1 %v4_104d0, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_104d4 = udiv i32 %v1_104e8, 4
  %v6_104d4 = or i32 %v1_104d4, %v5_104d4
  store i32 %v6_104d4, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_104dc = phi i32 [ %v6_104d0, %bb87 ], [ %v1_104d0, %.thread8 ], [ %v6_104d0, %bb88 ]
  %v1_104e0 = phi i32 [ %v1_104d4, %bb87 ], [ %v1_104d4, %.thread8 ], [ %v6_104d4, %bb88 ]
  %v4_104d8 = udiv i32 %v1_104ec, 8
  %v6_104d8 = icmp ult i32 %v1_104dc, %v4_104d8
  br i1 %v6_104d8, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_104dc = and i32 %v1_104ec, 4
  %v4_104dc = icmp eq i32 %v3_104dc, 0
  %v6_104dc = sub i32 %v1_104dc, %v4_104d8
  br i1 %v4_104dc, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_104e0 = udiv i32 %v1_104e8, 8
  %v6_104e0 = or i32 %v1_104e0, %v5_104e0
  store i32 %v6_104e0, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_104f4 = phi i32 [ %v1_104e0, %bb89 ], [ %v1_104e0, %.thread9 ], [ %v6_104e0, %bb90 ]
  %v0_104e4 = phi i32 [ %v6_104dc, %bb89 ], [ %v1_104dc, %.thread9 ], [ %v6_104dc, %bb90 ]
  %v2_104e4 = icmp eq i32 %v0_104e4, 0
  br i1 %v2_104e4, label %dec_label_pc_104f4, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_104e8, 16
  br i1 %tmp138, label %dec_label_pc_104f4, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_104e8 = udiv i32 %v1_104e8, 16
  %v4_104ec = udiv i32 %v1_104ec, 16
  br label %dec_label_pc_104b4

dec_label_pc_104f4:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_104f4

dec_label_pc_104fc:                               ; preds = %dec_label_pc_10468
  %v9_10468 = icmp eq i32 %v0_10468, %v1_10468
  %. = zext i1 %v9_10468 to i32
  ret i32 %.

dec_label_pc_10508:                               ; preds = %dec_label_pc_10470
  %v2_10508 = icmp ugt i32 %v1_10468, 65535
  br i1 %v2_10508, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10508
  %v2_1050c = and i32 %v1_10468, 32768
  %v3_1050c = icmp eq i32 %v2_1050c, 0
  %v4_1050c = udiv i32 %v1_10468, 65536
  br i1 %v3_1050c, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10508
  %v0_1051865 = phi i32 [ %v1_10468, %dec_label_pc_10508 ], [ %v4_1050c, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_1051c = phi i32 [ %v0_1051865, %.thread16 ], [ %v4_1050c, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10518 = icmp ugt i32 %v1_1051c, 255
  br i1 %v2_10518, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_1051c = and i32 %v1_1051c, 128
  %v3_1051c = icmp eq i32 %v2_1051c, 0
  %v4_1051c = udiv i32 %v1_1051c, 256
  br i1 %v3_1051c, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_10520 = or i32 %storemerge, 8
  store i32 %v2_10520, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_1052c = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_10520, %bb98 ]
  %v1_10528 = phi i32 [ %v1_1051c, %bb96 ], [ %v4_1051c, %bb97 ], [ %v4_1051c, %bb98 ]
  %v2_10524 = icmp ugt i32 %v1_10528, 15
  br i1 %v2_10524, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10528 = and i32 %v1_10528, 8
  %v3_10528 = icmp eq i32 %v2_10528, 0
  %v4_10528 = udiv i32 %v1_10528, 16
  br i1 %v3_10528, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_1052c = add nsw i32 %v1_1052c, 4
  store i32 %v2_1052c, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10534 = phi i32 [ %v1_1052c, %.thread17 ], [ %v1_1052c, %bb99 ], [ %v2_1052c, %bb100 ]
  %v5_10538 = phi i32 [ %v1_10528, %.thread17 ], [ %v4_10528, %bb99 ], [ %v4_10528, %bb100 ]
  %v2_10530 = icmp ugt i32 %v5_10538, 3
  %v7_10530 = icmp eq i32 %v5_10538, 4
  %v2_10534 = xor i1 %v7_10530, true
  %v3_10534 = and i1 %v2_10530, %v2_10534
  br i1 %v3_10534, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10534 = add nsw i32 %v4_10534, 3
  store i32 %v5_10534, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10538 = phi i32 [ %v4_10534, %.thread18 ], [ %v5_10534, %bb101 ]
  %v2_10538 = xor i1 %v2_10530, true
  %v3_10538 = or i1 %v7_10530, %v2_10538
  br i1 %v3_10538, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10538 = udiv i32 %v5_10538, 2
  %v9_10538 = add i32 %v4_10538, %v8_10538
  store i32 %v9_10538, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_1053c = phi i32 [ %v4_10538, %bb102 ], [ %v9_10538, %bb103 ]
  %v6_1053c = lshr i32 %v0_10468, %v1_1053c
  ret i32 %v6_1053c

dec_label_pc_10544:                               ; preds = %dec_label_pc_1045c
  %v0_10544 = load i32, i32* @lr, align 4
  %v0_10548 = call i32 @function_10570()
  store i32 %v0_10544, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10538, { 1, 0 }
  uselistorder i1 %v7_10530, { 1, 0 }
  uselistorder i32 %v4_10528, { 1, 0 }
  uselistorder i32 %v1_10528, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10520, { 1, 0 }
  uselistorder i32 %v4_1051c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1051c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1050c, { 1, 0 }
  uselistorder i32 %v0_104e4, { 1, 0 }
  uselistorder i32 %v4_104d8, { 1, 0 }
  uselistorder i32 %v1_104e0, { 1, 2, 0 }
  uselistorder i32 %v4_104cc, { 1, 0 }
  uselistorder i32 %v1_104d4, { 1, 2, 0 }
  uselistorder i32 %v4_104c0, { 1, 0 }
  uselistorder i32 %v1_104c8, { 1, 2, 0 }
  uselistorder i32 %v1_104ec, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_104bc, { 1, 0 }
  uselistorder i32 %v1_104e8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_104a8, { 1, 0 }
  uselistorder i32 %v3_104a4, { 1, 0 }
  uselistorder i32 %v1_104a4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_104a8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_10494, { 1, 0 }
  uselistorder i32 %v4_10490, { 2, 1, 0 }
  uselistorder i32 %v1_10494, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_1049c.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_10468, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_10468, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_1045c, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 65535, { 104, 0, 1, 9, 52, 2, 28, 53, 27, 54, 25, 55, 26, 56, 57, 10, 58, 3, 59, 60, 32, 61, 31, 62, 29, 63, 30, 64, 12, 11, 65, 66, 33, 67, 34, 68, 14, 13, 69, 70, 35, 71, 36, 72, 15, 16, 4, 5, 23, 22, 38, 73, 37, 74, 17, 18, 6, 39, 75, 40, 76, 77, 78, 19, 79, 80, 7, 41, 81, 42, 82, 43, 83, 84, 85, 20, 86, 87, 8, 46, 88, 44, 89, 45, 90, 91, 21, 92, 24, 47, 93, 48, 94, 49, 95, 96, 97, 50, 98, 99, 100, 101, 51, 102, 103 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_104f4, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_104b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1049cthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10558(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10558:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_1055c = call i32 @function_1045c()
  ret i32 %v0_1055c
}

define i32 @function_10570() local_unnamed_addr {
dec_label_pc_10570:
  %v1_10578 = call i32 @function_111a0(i32 8)
  ret i32 %v1_10578
}

define i32 @function_10584() local_unnamed_addr {
dec_label_pc_10584:
  %v1_10594 = load i32, i32* @r0, align 4
  ret i32 %v1_10594
}

define i32 @function_10598(i32 %arg1) local_unnamed_addr {
dec_label_pc_10598:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10598 = load i32, i32* @r7, align 4
  store i32 %v3_10598, i32* %stack_var_-8, align 4
  %v0_105a4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_105a4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_105a4, -4095
  br i1 %tmp, label %dec_label_pc_105c4, label %dec_label_pc_105b4

dec_label_pc_105b4:                               ; preds = %dec_label_pc_10598
  %v0_105b4 = call i32 @function_10de8()
  %v0_105b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_105b8 = sub i32 0, %v0_105b8
  %v2_105bc = inttoptr i32 %v0_105b4 to i32*
  store i32 %v1_105b8, i32* %v2_105bc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_105c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_105c4

dec_label_pc_105c4:                               ; preds = %dec_label_pc_10598, %dec_label_pc_105b4
  %v1_105c8 = phi i32 [ %v0_105a4, %dec_label_pc_10598 ], [ -1, %dec_label_pc_105b4 ]
  %v2_105c4 = phi i32 [ %v3_10598, %dec_label_pc_10598 ], [ %v2_105c4.pre, %dec_label_pc_105b4 ]
  store i32 %v2_105c4, i32* @r7, align 4
  ret i32 %v1_105c8

; uselistorder directives
  uselistorder i32 %v0_105a4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_105c4, { 1, 0 }
}

define i32 @function_105cc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_105cc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_105cc = load i32, i32* @r2, align 4
  %v9_105cc = load i32, i32* @r3, align 4
  store i32 %v9_105cc, i32* %stack_var_-4, align 4
  %v1_105dc = and i32 %arg2, 64
  %v2_105dc = icmp eq i32 %v1_105dc, 0
  br i1 %v2_105dc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_105cc
  %v3_105e4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_105e4, i32* @r3, align 4
  %phitmp = urem i32 %v6_105cc, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_105cc, %bb
  %v0_105e8 = phi i32 [ 0, %dec_label_pc_105cc ], [ %phitmp, %bb ]
  store i32 %v0_105e8, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10618, label %dec_label_pc_10608

dec_label_pc_10608:                               ; preds = %.thread
  %v0_10608 = call i32 @function_10de8()
  %v0_1060c = load i32, i32* %r7.global-to-local, align 4
  %v1_1060c = sub i32 0, %v0_1060c
  store i32 %v1_1060c, i32* @r3, align 4
  %v2_10610 = inttoptr i32 %v0_10608 to i32*
  store i32 %v1_1060c, i32* %v2_10610, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10618

dec_label_pc_10618:                               ; preds = %.thread, %dec_label_pc_10608
  %v0_10618 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_10608 ]
  ret i32 %v0_10618

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10618, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1062c() local_unnamed_addr {
dec_label_pc_1062c:
  %v1_1063c = load i32, i32* @r0, align 4
  ret i32 %v1_1063c
}

define i32 @function_10640(i32* %arg1) local_unnamed_addr {
dec_label_pc_10640:
  %stack_var_-16 = alloca i32, align 4
  %v2_10644 = ptrtoint i32* %stack_var_-16 to i32
  %v2_10654 = call i32 @function_107c0(i32 %v2_10644, i32 0)
  %v2_10658 = load i32, i32* %stack_var_-16, align 4
  %v2_1065c = icmp eq i32* %arg1, null
  br i1 %v2_1065c, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_10640
  store i32 %v2_10658, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_10640, %bb
  ret i32 %v2_10658

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_10670(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10670:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_106a4, label %dec_label_pc_10694

dec_label_pc_10694:                               ; preds = %dec_label_pc_10670
  %v0_10694 = call i32 @function_10de8()
  %v0_10698 = load i32, i32* %r4.global-to-local, align 4
  %v1_10698 = sub i32 0, %v0_10698
  %v2_1069c = inttoptr i32 %v0_10694 to i32*
  store i32 %v1_10698, i32* %v2_1069c, align 4
  br label %dec_label_pc_106a4

dec_label_pc_106a4:                               ; preds = %dec_label_pc_10670, %dec_label_pc_10694
  %v1_106ac = phi i32 [ %arg1, %dec_label_pc_10670 ], [ -1, %dec_label_pc_10694 ]
  ret i32 %v1_106ac

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_106a4, { 1, 0 }
}

define i32 @function_106b0() local_unnamed_addr {
dec_label_pc_106b0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_106b0 = load i32, i32* @r7, align 4
  store i32 %v3_106b0, i32* %stack_var_-8, align 4
  %v0_106bc = load i32, i32* @r0, align 4
  store i32 %v0_106bc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_106bc, -4095
  br i1 %tmp, label %dec_label_pc_106dc, label %dec_label_pc_106cc

dec_label_pc_106cc:                               ; preds = %dec_label_pc_106b0
  %v0_106cc = call i32 @function_10de8()
  %v0_106d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_106d0 = sub i32 0, %v0_106d0
  %v2_106d4 = inttoptr i32 %v0_106cc to i32*
  store i32 %v1_106d0, i32* %v2_106d4, align 4
  %v2_106dc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_106dc

dec_label_pc_106dc:                               ; preds = %dec_label_pc_106b0, %dec_label_pc_106cc
  %v1_106e0 = phi i32 [ %v0_106bc, %dec_label_pc_106b0 ], [ -1, %dec_label_pc_106cc ]
  %v2_106dc = phi i32 [ %v3_106b0, %dec_label_pc_106b0 ], [ %v2_106dc.pre, %dec_label_pc_106cc ]
  store i32 %v2_106dc, i32* @r7, align 4
  ret i32 %v1_106e0

; uselistorder directives
  uselistorder i32 %v0_106bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_106dc, { 1, 0 }
}

define i32 @function_106e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_106e4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10714, label %dec_label_pc_10704

dec_label_pc_10704:                               ; preds = %dec_label_pc_106e4
  %v0_10704 = call i32 @function_10de8()
  %v0_10708 = load i32, i32* %r4.global-to-local, align 4
  %v1_10708 = sub i32 0, %v0_10708
  %v2_1070c = inttoptr i32 %v0_10704 to i32*
  store i32 %v1_10708, i32* %v2_1070c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10714

dec_label_pc_10714:                               ; preds = %dec_label_pc_106e4, %dec_label_pc_10704
  %v0_10714 = phi i32 [ %arg1, %dec_label_pc_106e4 ], [ -1, %dec_label_pc_10704 ]
  ret i32 %v0_10714

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10714, { 1, 0 }
}

define i32 @function_10724(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10724:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10724 = load i32, i32* @r7, align 4
  store i32 %v3_10724, i32* %stack_var_-8, align 4
  %v0_10730 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10730, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10730, -4095
  br i1 %tmp, label %dec_label_pc_10750, label %dec_label_pc_10740

dec_label_pc_10740:                               ; preds = %dec_label_pc_10724
  %v0_10740 = call i32 @function_10de8()
  %v0_10744 = load i32, i32* %r7.global-to-local, align 4
  %v1_10744 = sub i32 0, %v0_10744
  store i32 %v1_10744, i32* @r3, align 4
  %v2_10748 = inttoptr i32 %v0_10740 to i32*
  store i32 %v1_10744, i32* %v2_10748, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10750.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10750

dec_label_pc_10750:                               ; preds = %dec_label_pc_10724, %dec_label_pc_10740
  %v1_10754 = phi i32 [ %v0_10730, %dec_label_pc_10724 ], [ -1, %dec_label_pc_10740 ]
  %v2_10750 = phi i32 [ %v3_10724, %dec_label_pc_10724 ], [ %v2_10750.pre, %dec_label_pc_10740 ]
  store i32 %v2_10750, i32* @r7, align 4
  ret i32 %v1_10754

; uselistorder directives
  uselistorder i32 %v0_10730, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10750, { 1, 0 }
}

define i32 @function_10758(i32 %arg1) local_unnamed_addr {
dec_label_pc_10758:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10758 = load i32, i32* @r7, align 4
  store i32 %v3_10758, i32* %stack_var_-8, align 4
  %v0_10764 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10764, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10764, -4095
  br i1 %tmp, label %dec_label_pc_10784, label %dec_label_pc_10774

dec_label_pc_10774:                               ; preds = %dec_label_pc_10758
  %v0_10774 = call i32 @function_10de8()
  %v0_10778 = load i32, i32* %r7.global-to-local, align 4
  %v1_10778 = sub i32 0, %v0_10778
  %v2_1077c = inttoptr i32 %v0_10774 to i32*
  store i32 %v1_10778, i32* %v2_1077c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10784.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10784

dec_label_pc_10784:                               ; preds = %dec_label_pc_10758, %dec_label_pc_10774
  %v1_10788 = phi i32 [ %v0_10764, %dec_label_pc_10758 ], [ -1, %dec_label_pc_10774 ]
  %v2_10784 = phi i32 [ %v3_10758, %dec_label_pc_10758 ], [ %v2_10784.pre, %dec_label_pc_10774 ]
  store i32 %v2_10784, i32* @r7, align 4
  ret i32 %v1_10788

; uselistorder directives
  uselistorder i32 %v0_10764, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10784, { 1, 0 }
}

define i32 @function_1078c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1078c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1078c = load i32, i32* @r7, align 4
  store i32 %v3_1078c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_107b4, label %dec_label_pc_107a4

dec_label_pc_107a4:                               ; preds = %dec_label_pc_1078c
  %v0_107a4 = call i32 @function_10de8()
  %v0_107a8 = load i32, i32* %r7.global-to-local, align 4
  %v1_107a8 = sub i32 0, %v0_107a8
  %v2_107ac = inttoptr i32 %v0_107a4 to i32*
  store i32 %v1_107a8, i32* %v2_107ac, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_107b8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_107b4

dec_label_pc_107b4:                               ; preds = %dec_label_pc_1078c, %dec_label_pc_107a4
  %v2_107b8 = phi i32 [ %v3_1078c, %dec_label_pc_1078c ], [ %v2_107b8.pre, %dec_label_pc_107a4 ]
  %v0_107b4 = phi i32 [ %arg1, %dec_label_pc_1078c ], [ -1, %dec_label_pc_107a4 ]
  store i32 %v2_107b8, i32* @r7, align 4
  ret i32 %v0_107b4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_107b4, { 1, 0 }
}

define i32 @function_107c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_107c0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_107c0 = load i32, i32* @r7, align 4
  store i32 %v3_107c0, i32* %stack_var_-8, align 4
  %v0_107cc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_107cc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_107cc, -4095
  br i1 %tmp, label %dec_label_pc_107ec, label %dec_label_pc_107dc

dec_label_pc_107dc:                               ; preds = %dec_label_pc_107c0
  %v0_107dc = call i32 @function_10de8()
  %v0_107e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_107e0 = sub i32 0, %v0_107e0
  store i32 %v1_107e0, i32* @r3, align 4
  %v2_107e4 = inttoptr i32 %v0_107dc to i32*
  store i32 %v1_107e0, i32* %v2_107e4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_107ec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_107ec

dec_label_pc_107ec:                               ; preds = %dec_label_pc_107c0, %dec_label_pc_107dc
  %v1_107f0 = phi i32 [ %v0_107cc, %dec_label_pc_107c0 ], [ -1, %dec_label_pc_107dc ]
  %v2_107ec = phi i32 [ %v3_107c0, %dec_label_pc_107c0 ], [ %v2_107ec.pre, %dec_label_pc_107dc ]
  store i32 %v2_107ec, i32* @r7, align 4
  ret i32 %v1_107f0

; uselistorder directives
  uselistorder i32 %v0_107cc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_107ec, { 1, 0 }
}

define i32 @function_107f4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_107f4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_107f4 = load i32, i32* @r3, align 4
  store i32 %v9_107f4, i32* %stack_var_-4, align 4
  %v2_1080c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1080c, i32* @r3, align 4
  %v0_10830 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10830, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10830, -4095
  br i1 %tmp, label %dec_label_pc_10850, label %dec_label_pc_10840

dec_label_pc_10840:                               ; preds = %dec_label_pc_107f4
  %v0_10840 = call i32 @function_10de8()
  %v0_10844 = load i32, i32* %r7.global-to-local, align 4
  %v1_10844 = sub i32 0, %v0_10844
  store i32 %v1_10844, i32* @r3, align 4
  %v2_10848 = inttoptr i32 %v0_10840 to i32*
  store i32 %v1_10844, i32* %v2_10848, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10850

dec_label_pc_10850:                               ; preds = %dec_label_pc_107f4, %dec_label_pc_10840
  %v1_1085c = phi i32 [ %v0_10830, %dec_label_pc_107f4 ], [ -1, %dec_label_pc_10840 ]
  ret i32 %v1_1085c

; uselistorder directives
  uselistorder i32 %v0_10830, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10850, { 1, 0 }
}

define i32 @function_10860(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10860:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_1089c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1089c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1089c, -4095
  br i1 %tmp, label %dec_label_pc_108bc, label %dec_label_pc_108ac

dec_label_pc_108ac:                               ; preds = %dec_label_pc_10860
  %v0_108ac = call i32 @function_10de8()
  %v0_108b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_108b0 = sub i32 0, %v0_108b0
  %v2_108b4 = inttoptr i32 %v0_108ac to i32*
  store i32 %v1_108b0, i32* %v2_108b4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_108bc

dec_label_pc_108bc:                               ; preds = %dec_label_pc_10860, %dec_label_pc_108ac
  %v1_108c8 = phi i32 [ %v0_1089c, %dec_label_pc_10860 ], [ -1, %dec_label_pc_108ac ]
  ret i32 %v1_108c8

; uselistorder directives
  uselistorder i32 %v0_1089c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108bc, { 1, 0 }
}

define i32 @function_108cc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_108cc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_108cc = load i32, i32* @r7, align 4
  store i32 %v3_108cc, i32* %stack_var_-8, align 4
  %v0_108d8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_108d8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_108d8, -4095
  br i1 %tmp, label %dec_label_pc_108f8, label %dec_label_pc_108e8

dec_label_pc_108e8:                               ; preds = %dec_label_pc_108cc
  %v0_108e8 = call i32 @function_10de8()
  %v0_108ec = load i32, i32* %r7.global-to-local, align 4
  %v1_108ec = sub i32 0, %v0_108ec
  %v2_108f0 = inttoptr i32 %v0_108e8 to i32*
  store i32 %v1_108ec, i32* %v2_108f0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_108f8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_108f8

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108cc, %dec_label_pc_108e8
  %v1_108fc = phi i32 [ %v0_108d8, %dec_label_pc_108cc ], [ -1, %dec_label_pc_108e8 ]
  %v2_108f8 = phi i32 [ %v3_108cc, %dec_label_pc_108cc ], [ %v2_108f8.pre, %dec_label_pc_108e8 ]
  store i32 %v2_108f8, i32* @r7, align 4
  ret i32 %v1_108fc

; uselistorder directives
  uselistorder i32 %v0_108d8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108f8, { 1, 0 }
}

define i32 @function_10900(i32 %arg1) local_unnamed_addr {
dec_label_pc_10900:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10900 = load i32, i32* @r7, align 4
  store i32 %v3_10900, i32* %stack_var_-8, align 4
  %v0_1090c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1090c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1090c, -4095
  br i1 %tmp, label %dec_label_pc_1092c, label %dec_label_pc_1091c

dec_label_pc_1091c:                               ; preds = %dec_label_pc_10900
  %v0_1091c = call i32 @function_10de8()
  %v0_10920 = load i32, i32* %r7.global-to-local, align 4
  %v1_10920 = sub i32 0, %v0_10920
  %v2_10924 = inttoptr i32 %v0_1091c to i32*
  store i32 %v1_10920, i32* %v2_10924, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1092c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1092c

dec_label_pc_1092c:                               ; preds = %dec_label_pc_10900, %dec_label_pc_1091c
  %v1_10930 = phi i32 [ %v0_1090c, %dec_label_pc_10900 ], [ -1, %dec_label_pc_1091c ]
  %v2_1092c = phi i32 [ %v3_10900, %dec_label_pc_10900 ], [ %v2_1092c.pre, %dec_label_pc_1091c ]
  store i32 %v2_1092c, i32* @r7, align 4
  ret i32 %v1_10930

; uselistorder directives
  uselistorder i32 %v0_1090c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1092c, { 1, 0 }
}

define i32 @function_10934(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10934:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10934 = load i32, i32* @r3, align 4
  store i32 %v9_10934, i32* %stack_var_-4, align 4
  %v2_10940 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10940, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10974, label %dec_label_pc_10964

dec_label_pc_10964:                               ; preds = %dec_label_pc_10934
  %v0_10964 = call i32 @function_10de8()
  %v0_10968 = load i32, i32* %r7.global-to-local, align 4
  %v1_10968 = sub i32 0, %v0_10968
  store i32 %v1_10968, i32* @r3, align 4
  %v2_1096c = inttoptr i32 %v0_10964 to i32*
  store i32 %v1_10968, i32* %v2_1096c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10974

dec_label_pc_10974:                               ; preds = %dec_label_pc_10934, %dec_label_pc_10964
  %v0_10974 = phi i32 [ %arg1, %dec_label_pc_10934 ], [ -1, %dec_label_pc_10964 ]
  ret i32 %v0_10974

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10974, { 1, 0 }
}

define i32 @function_10988(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10988:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10988 = load i32, i32* @r7, align 4
  store i32 %v3_10988, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_109b4, label %dec_label_pc_109a4

dec_label_pc_109a4:                               ; preds = %dec_label_pc_10988
  %v0_109a4 = call i32 @function_10de8()
  %v0_109a8 = load i32, i32* %r7.global-to-local, align 4
  %v1_109a8 = sub i32 0, %v0_109a8
  %v2_109ac = inttoptr i32 %v0_109a4 to i32*
  store i32 %v1_109a8, i32* %v2_109ac, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_109b8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_109b4

dec_label_pc_109b4:                               ; preds = %dec_label_pc_10988, %dec_label_pc_109a4
  %v2_109b8 = phi i32 [ %v3_10988, %dec_label_pc_10988 ], [ %v2_109b8.pre, %dec_label_pc_109a4 ]
  %v0_109b4 = phi i32 [ %arg1, %dec_label_pc_10988 ], [ -1, %dec_label_pc_109a4 ]
  store i32 %v2_109b8, i32* @r7, align 4
  ret i32 %v0_109b4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_109b4, { 1, 0 }
}

define i32 @function_109c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_109c0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109c0 = load i32, i32* @r7, align 4
  store i32 %v3_109c0, i32* %stack_var_-8, align 4
  %v0_109cc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_109cc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_109cc, -4095
  br i1 %tmp, label %dec_label_pc_109ec, label %dec_label_pc_109dc

dec_label_pc_109dc:                               ; preds = %dec_label_pc_109c0
  %v0_109dc = call i32 @function_10de8()
  %v0_109e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_109e0 = sub i32 0, %v0_109e0
  store i32 %v1_109e0, i32* @r3, align 4
  %v2_109e4 = inttoptr i32 %v0_109dc to i32*
  store i32 %v1_109e0, i32* %v2_109e4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_109ec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_109ec

dec_label_pc_109ec:                               ; preds = %dec_label_pc_109c0, %dec_label_pc_109dc
  %v1_109f0 = phi i32 [ %v0_109cc, %dec_label_pc_109c0 ], [ -1, %dec_label_pc_109dc ]
  %v2_109ec = phi i32 [ %v3_109c0, %dec_label_pc_109c0 ], [ %v2_109ec.pre, %dec_label_pc_109dc ]
  store i32 %v2_109ec, i32* @r7, align 4
  ret i32 %v1_109f0

; uselistorder directives
  uselistorder i32 %v0_109cc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109ec, { 1, 0 }
}

define i32 @function_109f4(i32* %arg1) local_unnamed_addr {
dec_label_pc_109f4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_109f4 = load i32, i32* @r4, align 4
  store i32 %v3_109f4, i32* %stack_var_-24, align 4
  %v9_109f4 = load i32, i32* @r6, align 4
  %v12_109f4 = load i32, i32* @r7, align 4
  %v15_109f4 = load i32, i32* @r8, align 4
  %v18_109f4 = load i32, i32* @lr, align 4
  %v2_109f8 = load i32, i32* %arg1, align 4
  store i32 %v2_109f8, i32* %r4.global-to-local, align 4
  %v3_10a00 = icmp eq i32 %v2_109f8, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 123612, i32* @r6, align 4
  br i1 %v3_10a00, label %dec_label_pc_10a14, label %dec_label_pc_10a28

dec_label_pc_10a14:                               ; preds = %dec_label_pc_109f4
  %v0_10a14 = call i32 @function_10de8()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_10a1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10a1c, i32* %r2.global-to-local, align 4
  %v2_10a20 = inttoptr i32 %v0_10a14 to i32*
  store i32 9, i32* %v2_10a20, align 4
  %v0_10ac8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ac8

dec_label_pc_10a28:                               ; preds = %dec_label_pc_109f4
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_10a2c = add i32 %tmp, 24
  store i32 %v1_10a2c, i32* %r4.global-to-local, align 4
  store i32 %v1_10a2c, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_10a40 = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10a40)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10a58 = load i32, i32* @r6, align 4
  %v2_10a58 = add i32 %v0_10a58, 16
  %v3_10a58 = inttoptr i32 %v2_10a58 to i32*
  %v4_10a58 = load i32, i32* %v3_10a58, align 4
  call void @__pseudo_branch(i32 %v4_10a58)
  %v0_10a64 = load i32, i32* @r7, align 4
  %v1_10a64 = inttoptr i32 %v0_10a64 to i32*
  %v2_10a64 = load i32, i32* %v1_10a64, align 4
  store i32 %v2_10a64, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_10a74 = load i32, i32* @r8, align 4
  store i32 %v0_10a74, i32* %v1_10a64, align 4
  %v0_10a78 = load i32, i32* @r6, align 4
  %v1_10a78 = load i32, i32* %r3.global-to-local, align 4
  %v2_10a78 = add i32 %v1_10a78, %v0_10a78
  %v3_10a78 = inttoptr i32 %v2_10a78 to i32*
  %v4_10a78 = load i32, i32* %v3_10a78, align 4
  store i32 ptrtoint (i32* @global_var_10a84.323 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10a78)
  %v0_10a84 = load i32, i32* @r7, align 4
  %v1_10a84 = add i32 %v0_10a84, 12
  %v2_10a84 = inttoptr i32 %v1_10a84 to i32*
  %v3_10a84 = load i32, i32* %v2_10a84, align 4
  store i32 %v3_10a84, i32* @r0, align 4
  %v0_10a88 = call i32 @function_1241c()
  %v0_10a8c = load i32, i32* @r7, align 4
  store i32 %v0_10a8c, i32* @r0, align 4
  %v0_10a90 = call i32 @function_1241c()
  %v0_10a98 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_10a98, -4095
  br i1 %tmp11, label %dec_label_pc_10ac4, label %dec_label_pc_10ab4

dec_label_pc_10ab4:                               ; preds = %dec_label_pc_10a28
  %v0_10ab4 = call i32 @function_10de8()
  %v0_10ab8 = load i32, i32* @r4, align 4
  %v1_10ab8 = sub i32 0, %v0_10ab8
  store i32 %v1_10ab8, i32* %r3.global-to-local, align 4
  %v2_10abc = inttoptr i32 %v0_10ab4 to i32*
  store i32 %v1_10ab8, i32* %v2_10abc, align 4
  %v0_10ac0 = load i32, i32* @r8, align 4
  br label %dec_label_pc_10ac4

dec_label_pc_10ac4:                               ; preds = %dec_label_pc_10a28, %dec_label_pc_10ab4
  %v0_10ac4 = phi i32 [ %v0_10a98, %dec_label_pc_10a28 ], [ %v0_10ac0, %dec_label_pc_10ab4 ]
  store i32 %v0_10ac4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ac8

dec_label_pc_10ac8:                               ; preds = %dec_label_pc_10a14, %dec_label_pc_10ac4
  %v0_10ac8 = phi i32 [ %v0_10ac8.pre, %dec_label_pc_10a14 ], [ %v0_10ac4, %dec_label_pc_10ac4 ]
  %v2_10ad0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10ad0, i32* @r4, align 4
  store i32 %v9_109f4, i32* @r6, align 4
  store i32 %v12_109f4, i32* @r7, align 4
  store i32 %v15_109f4, i32* @r8, align 4
  store i32 %v18_109f4, i32* @lr, align 4
  ret i32 %v0_10ac8

; uselistorder directives
  uselistorder i32 %v0_10a98, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_10ac8, { 1, 0 }
  uselistorder label %dec_label_pc_10ac4, { 1, 0 }
}

define i32 @function_10adc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10adc:
  %v0_10adc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10adc, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10adc
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10adc, %bb
  %v10_10ae8 = phi i32 [ %arg1, %dec_label_pc_10adc ], [ 0, %bb ]
  ret i32 %v10_10ae8

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10aec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10aec:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10aec = load i32, i32* @r5, align 4
  %v9_10aec = load i32, i32* @r6, align 4
  %v12_10aec = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_10b00 = call i32 @function_113b0()
  %v2_10b08 = icmp eq i32 %v0_10b00, 0
  store i32 123612, i32* @r6, align 4
  br i1 %v2_10b08, label %bb, label %dec_label_pc_10b18

bb:                                               ; preds = %dec_label_pc_10aec
  br label %dec_label_pc_10ba4

dec_label_pc_10b18:                               ; preds = %dec_label_pc_10aec
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_10b1c = load i32, i32* @r4, align 4
  %v2_10b1c = icmp ugt i32 %v0_10b1c, 511
  %v2_10b20 = add i32 %v0_10b00, 4
  %v3_10b20 = inttoptr i32 %v2_10b20 to i32*
  store i32 0, i32* %v3_10b20, align 4
  %v0_10b24 = load i32, i32* %r3.global-to-local, align 4
  %v2_10b24 = add i32 %v0_10b00, 16
  %v3_10b24 = inttoptr i32 %v2_10b24 to i32*
  store i32 %v0_10b24, i32* %v3_10b24, align 4
  %v0_10b28 = load i32, i32* %r3.global-to-local, align 4
  %v2_10b28 = add i32 %v0_10b00, 8
  %v3_10b28 = inttoptr i32 %v2_10b28 to i32*
  store i32 %v0_10b28, i32* %v3_10b28, align 4
  br i1 %v2_10b1c, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_10b18
  %v0_10b302 = load i32, i32* @r4, align 4
  %v2_10b303 = add i32 %v0_10b00, 20
  %v3_10b304 = inttoptr i32 %v2_10b303 to i32*
  store i32 %v0_10b302, i32* %v3_10b304, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_10b18
  %v1_10b2c = load i32, i32* %r3.global-to-local, align 4
  %v2_10b2c = add i32 %v1_10b2c, 512
  store i32 %v2_10b2c, i32* %r3.global-to-local, align 4
  %v0_10b30 = load i32, i32* @r4, align 4
  %v2_10b30 = add i32 %v0_10b00, 20
  %v3_10b30 = inttoptr i32 %v2_10b30 to i32*
  store i32 %v0_10b30, i32* %v3_10b30, align 4
  %v1_10b34 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_10b34, i32* %v3_10b30, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_10b00, i32* @r5, align 4
  %v0_10b3c = load i32, i32* @r7, align 4
  %v2_10b3c = inttoptr i32 %v0_10b00 to i32*
  store i32 %v0_10b3c, i32* %v2_10b3c, align 4
  %v0_10b40 = load i32, i32* @r5, align 4
  %v1_10b40 = add i32 %v0_10b40, 20
  %v2_10b40 = inttoptr i32 %v1_10b40 to i32*
  %v3_10b40 = load i32, i32* %v2_10b40, align 4
  store i32 %v3_10b40, i32* %r1.global-to-local, align 4
  %v2_10b48 = call i32 @function_11cd0(i32 1, i32 %v3_10b40)
  %v2_10b4c = icmp eq i32 %v2_10b48, 0
  store i32 %v2_10b48, i32* @r4, align 4
  %v1_10b54 = load i32, i32* @r5, align 4
  %v2_10b54 = add i32 %v1_10b54, 12
  %v3_10b54 = inttoptr i32 %v2_10b54 to i32*
  store i32 %v2_10b48, i32* %v3_10b54, align 4
  br i1 %v2_10b4c, label %dec_label_pc_10b5c, label %dec_label_pc_10b6c

dec_label_pc_10b5c:                               ; preds = %bb17
  %v0_10b5c = load i32, i32* @r5, align 4
  store i32 %v0_10b5c, i32* @r0, align 4
  %v0_10b60 = call i32 @function_1241c()
  %v0_10b64 = load i32, i32* @r4, align 4
  br label %dec_label_pc_10ba4

dec_label_pc_10b6c:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_10b94 = load i32, i32* @r5, align 4
  %v1_10b94 = add i32 %v0_10b94, 24
  %v1_10b98 = inttoptr i32 %v1_10b94 to i32*
  store i32 0, i32* %v1_10b98, align 4
  %v3_10b98 = add i32 %v0_10b94, 28
  %v4_10b98 = inttoptr i32 %v3_10b98 to i32*
  %v5_10b98 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10b98, i32* %v4_10b98, align 4
  %v6_10b98 = add i32 %v0_10b94, 32
  %v7_10b98 = inttoptr i32 %v6_10b98 to i32*
  %v8_10b98 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_10b98, i32* %v7_10b98, align 4
  %v9_10b98 = add i32 %v0_10b94, 36
  %v10_10b98 = inttoptr i32 %v9_10b98 to i32*
  %v11_10b98 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_10b98, i32* %v10_10b98, align 4
  %v12_10b98 = add i32 %v0_10b94, 40
  %v2_10b9c = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_10ba0 = inttoptr i32 %v12_10b98 to i32*
  store i32 %v2_10b9c, i32* %v1_10ba0, align 4
  %v3_10ba0 = add i32 %v0_10b94, 44
  %v4_10ba0 = inttoptr i32 %v3_10ba0 to i32*
  %v5_10ba0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10ba0, i32* %v4_10ba0, align 4
  %v0_10ba4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10ba4

dec_label_pc_10ba4:                               ; preds = %bb, %dec_label_pc_10b5c, %dec_label_pc_10b6c
  %v0_10ba4 = phi i32 [ 0, %bb ], [ %v0_10b64, %dec_label_pc_10b5c ], [ %v0_10ba4.pre, %dec_label_pc_10b6c ]
  store i32 %v6_10aec, i32* @r5, align 4
  store i32 %v9_10aec, i32* @r6, align 4
  store i32 %v12_10aec, i32* @r7, align 4
  ret i32 %v0_10ba4

; uselistorder directives
  uselistorder i32 %v2_10b48, { 1, 0, 2 }
  uselistorder i32 %v0_10b00, { 2, 1, 6, 0, 5, 3, 4, 7 }
  uselistorder i32* %r3.global-to-local, { 6, 7, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 1, 0 }
  uselistorder i32 512, { 7, 4, 0, 5, 8, 1, 9, 2, 10, 3, 11, 6, 12 }
  uselistorder label %dec_label_pc_10ba4, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_10bbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10bbc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_10bbc = load i32, i32* @r7, align 4
  %v2_10bc4 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_10bec, label %dec_label_pc_10bdc

dec_label_pc_10bdc:                               ; preds = %dec_label_pc_10bbc
  %v0_10bdc = call i32 @function_10de8()
  %v0_10be0 = load i32, i32* @r7, align 4
  %v1_10be0 = sub i32 0, %v0_10be0
  %v2_10be4 = inttoptr i32 %v0_10bdc to i32*
  store i32 %v1_10be0, i32* %v2_10be4, align 4
  br label %dec_label_pc_10c10

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10bbc
  %v1_10bec = icmp slt i32 %arg1, 0
  br i1 %v1_10bec, label %dec_label_pc_10c10, label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bec
  store i32 %v2_10bc4, i32* @r1, align 4
  %v0_10bf8 = call i32 @function_138cc()
  %v1_10bfc = icmp slt i32 %v0_10bf8, 0
  br i1 %v1_10bfc, label %dec_label_pc_10c04, label %dec_label_pc_10c18

dec_label_pc_10c04:                               ; preds = %dec_label_pc_10bf4
  br label %dec_label_pc_10c10

dec_label_pc_10c10:                               ; preds = %dec_label_pc_10c04, %dec_label_pc_10bec, %dec_label_pc_10bdc
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c54

dec_label_pc_10c18:                               ; preds = %dec_label_pc_10bf4
  %v0_10c20 = load i32, i32* @r7, align 4
  %v3_10c24 = call i32 @function_10860(i32 %v0_10c20, i32 2, i32 1)
  %v0_10c28 = load i32, i32* @r7, align 4
  %v2_10c30 = call i32 @function_10aec(i32 %v0_10c28, i32 %tmp)
  store i32 %v2_10c30, i32* %r4.global-to-local, align 4
  %v2_10c34 = icmp eq i32 %v2_10c30, 0
  br i1 %v2_10c34, label %dec_label_pc_10c3c, label %dec_label_pc_10c54

dec_label_pc_10c3c:                               ; preds = %dec_label_pc_10c18
  %v0_10c48 = call i32 @function_10de8()
  %v2_10c50 = inttoptr i32 %v0_10c48 to i32*
  store i32 12, i32* %v2_10c50, align 4
  %v0_10c54.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c54

dec_label_pc_10c54:                               ; preds = %dec_label_pc_10c18, %dec_label_pc_10c10, %dec_label_pc_10c3c
  %v0_10c54 = phi i32 [ %v2_10c30, %dec_label_pc_10c18 ], [ 0, %dec_label_pc_10c10 ], [ %v0_10c54.pre, %dec_label_pc_10c3c ]
  store i32 %v6_10bbc, i32* @r7, align 4
  ret i32 %v0_10c54

; uselistorder directives
  uselistorder i32* %r4.global-to-local, { 1, 2, 0 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_10c54, { 2, 0, 1 }
}

define i32 @function_10c64(i32 %arg1) local_unnamed_addr {
dec_label_pc_10c64:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_10c64 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10c64, label %bb, label %dec_label_pc_10c64._crit_edge

dec_label_pc_10c64._crit_edge:                    ; preds = %dec_label_pc_10c64
  br label %bb11

bb:                                               ; preds = %dec_label_pc_10c64
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_10c64._crit_edge, %bb
  %v2_10c6c = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_10c6c, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_10c78 = call i32 @function_138cc()
  store i32 %v0_10c78, i32* @r5, align 4
  %v2_10c7c = icmp eq i32 %v0_10c78, 0
  br i1 %v2_10c7c, label %dec_label_pc_10c84, label %dec_label_pc_10cec

dec_label_pc_10c84:                               ; preds = %bb11
  %v1_10c88 = and i32 %tmp5, ptrtoint (i32* @global_var_f000.333 to i32)
  store i32 %v1_10c88, i32* @r3, align 4
  %v7_10c8c = icmp eq i32 %v1_10c88, 16384
  br i1 %v7_10c8c, label %dec_label_pc_10ca4, label %dec_label_pc_10c94

dec_label_pc_10c94:                               ; preds = %dec_label_pc_10c84
  %v0_10c94 = call i32 @function_10de8()
  br label %dec_label_pc_10cd0

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10c84
  %v0_10ca4 = load i32, i32* @r4, align 4
  %v2_10cac = call i32 @function_107f4(i32 %v0_10ca4, i32 3)
  %v7_10cb0 = icmp eq i32 %v2_10cac, -1
  br i1 %v7_10cb0, label %dec_label_pc_10cec, label %dec_label_pc_10cb8

dec_label_pc_10cb8:                               ; preds = %dec_label_pc_10ca4
  %v1_10cb8 = urem i32 %v2_10cac, 4
  %v7_10cbc = icmp eq i32 %v1_10cb8, 1
  br i1 %v7_10cbc, label %dec_label_pc_10cc4, label %dec_label_pc_10cd8

dec_label_pc_10cc4:                               ; preds = %dec_label_pc_10cb8
  %v0_10cc4 = call i32 @function_10de8()
  br label %dec_label_pc_10cd0

dec_label_pc_10cd0:                               ; preds = %dec_label_pc_10c94, %dec_label_pc_10cc4
  %storemerge2 = phi i32 [ %v0_10c94, %dec_label_pc_10c94 ], [ %v0_10cc4, %dec_label_pc_10cc4 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_10c94 ], [ 22, %dec_label_pc_10cc4 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_10cd0 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_10cd0, align 4
  %v0_10cf0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10cf0

dec_label_pc_10cd8:                               ; preds = %dec_label_pc_10cb8
  %v0_10cd8 = load i32, i32* @r4, align 4
  %v2_10ce0 = call i32 @function_10aec(i32 %v0_10cd8, i32 %tmp)
  store i32 %v2_10ce0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10cf0

dec_label_pc_10cec:                               ; preds = %bb11, %dec_label_pc_10ca4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10cf0

dec_label_pc_10cf0:                               ; preds = %dec_label_pc_10cd8, %dec_label_pc_10cd0, %dec_label_pc_10cec
  %v0_10cf0 = phi i32 [ %v2_10ce0, %dec_label_pc_10cd8 ], [ %v0_10cf0.pre, %dec_label_pc_10cd0 ], [ 0, %dec_label_pc_10cec ]
  ret i32 %v0_10cf0

; uselistorder directives
  uselistorder i32 %v2_10cac, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10aec, { 1, 0 }
  uselistorder i32 ()* @function_138cc, { 1, 0 }
  uselistorder label %dec_label_pc_10cf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cec, { 1, 0 }
  uselistorder label %dec_label_pc_10cd0, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_10d00(i32* %arg1) local_unnamed_addr {
dec_label_pc_10d00:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_10d00 = load i32, i32* @r4, align 4
  %v6_10d00 = load i32, i32* @r5, align 4
  %v9_10d00 = load i32, i32* @r6, align 4
  %v12_10d00 = load i32, i32* @r7, align 4
  %v15_10d00 = load i32, i32* @lr, align 4
  store i32 123612, i32* @r6, align 4
  %v1_10d14 = add i32 %tmp, 24
  store i32 %v1_10d14, i32* @r4, align 4
  %v4_10d18 = load i32, i32* inttoptr (i32 123648 to i32*), align 256
  store i32 %v4_10d18, i32* %r1.global-to-local, align 4
  store i32 %v1_10d14, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_10d2c = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10d2c)
  %v0_10d40 = load i32, i32* @r6, align 4
  %v2_10d40 = add i32 %v0_10d40, 16
  %v3_10d40 = inttoptr i32 %v2_10d40 to i32*
  %v4_10d40 = load i32, i32* %v3_10d40, align 4
  store i32 %v4_10d40, i32* @ip, align 4
  store i32 68940, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10d40)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_10d50

dec_label_pc_10d50:                               ; preds = %dec_label_pc_10d80, %dec_label_pc_10d00
  %v0_10d50 = load i32, i32* @r5, align 4
  %v1_10d50 = add i32 %v0_10d50, 4
  %v2_10d50 = inttoptr i32 %v1_10d50 to i32*
  %v3_10d50 = load i32, i32* %v2_10d50, align 4
  store i32 %v3_10d50, i32* %r2.global-to-local, align 4
  %v4_10d50 = add i32 %v0_10d50, 8
  %v5_10d50 = inttoptr i32 %v4_10d50 to i32*
  %v6_10d50 = load i32, i32* %v5_10d50, align 4
  %tmp10 = icmp ugt i32 %v6_10d50, %v3_10d50
  br i1 %tmp10, label %dec_label_pc_10d80, label %dec_label_pc_10d5c

dec_label_pc_10d5c:                               ; preds = %dec_label_pc_10d50
  %v1_10d5c = inttoptr i32 %v0_10d50 to i32*
  %v2_10d5c = load i32, i32* %v1_10d5c, align 4
  %v1_10d60 = add i32 %v0_10d50, 12
  %v2_10d60 = inttoptr i32 %v1_10d60 to i32*
  %v3_10d60 = load i32, i32* %v2_10d60, align 4
  store i32 %v3_10d60, i32* %r1.global-to-local, align 4
  %v1_10d64 = add i32 %v0_10d50, 20
  %v2_10d64 = inttoptr i32 %v1_10d64 to i32*
  %v3_10d64 = load i32, i32* %v2_10d64, align 4
  store i32 %v3_10d64, i32* %r2.global-to-local, align 4
  %v4_10d68 = call i32 @function_13838(i32 %v2_10d5c, i32 %v3_10d60, i32 %v3_10d64, i32 %v6_10d50)
  %tmp9 = icmp slt i32 %v4_10d68, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_10d78

.thread:                                          ; preds = %dec_label_pc_10d5c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_10dac

dec_label_pc_10d78:                               ; preds = %dec_label_pc_10d5c
  %v1_10d78 = load i32, i32* @r5, align 4
  %v2_10d78 = add i32 %v1_10d78, 8
  %v3_10d78 = inttoptr i32 %v2_10d78 to i32*
  store i32 %v4_10d68, i32* %v3_10d78, align 4
  %v0_10d7c = load i32, i32* @r7, align 4
  %v1_10d7c = load i32, i32* @r5, align 4
  %v2_10d7c = add i32 %v1_10d7c, 4
  %v3_10d7c = inttoptr i32 %v2_10d7c to i32*
  store i32 %v0_10d7c, i32* %v3_10d7c, align 4
  %v0_10d80.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10d80

dec_label_pc_10d80:                               ; preds = %dec_label_pc_10d50, %dec_label_pc_10d78
  %v1_10d90 = phi i32 [ %v0_10d50, %dec_label_pc_10d50 ], [ %v0_10d80.pre, %dec_label_pc_10d78 ]
  %v1_10d80 = add i32 %v1_10d90, 4
  %v2_10d80 = inttoptr i32 %v1_10d80 to i32*
  %v3_10d80 = load i32, i32* %v2_10d80, align 4
  store i32 %v3_10d80, i32* %r2.global-to-local, align 4
  %v1_10d84 = add i32 %v1_10d90, 12
  %v2_10d84 = inttoptr i32 %v1_10d84 to i32*
  %v3_10d84 = load i32, i32* %v2_10d84, align 4
  store i32 %v3_10d84, i32* %r1.global-to-local, align 4
  %v2_10d88 = add i32 %v3_10d84, %v3_10d80
  store i32 %v2_10d88, i32* @r4, align 4
  %v1_10d8c = add i32 %v2_10d88, 4
  %v2_10d8c = inttoptr i32 %v1_10d8c to i32*
  %v3_10d8c = load i32, i32* %v2_10d8c, align 4
  %v2_10d90 = add i32 %v1_10d90, 16
  %v3_10d90 = inttoptr i32 %v2_10d90 to i32*
  store i32 %v3_10d8c, i32* %v3_10d90, align 4
  %v0_10d94 = load i32, i32* @r4, align 4
  %v1_10d94 = add i32 %v0_10d94, 8
  %v2_10d94 = inttoptr i32 %v1_10d94 to i16*
  %v3_10d94 = load i16, i16* %v2_10d94, align 2
  %v4_10d94 = zext i16 %v3_10d94 to i32
  %v0_10d98 = load i32, i32* %r2.global-to-local, align 4
  %v1_10d98 = load i32, i32* %r1.global-to-local, align 4
  %v2_10d98 = add i32 %v1_10d98, %v0_10d98
  %v3_10d98 = inttoptr i32 %v2_10d98 to i32*
  %v4_10d98 = load i32, i32* %v3_10d98, align 4
  store i32 %v4_10d98, i32* %r1.global-to-local, align 4
  %v2_10d9c = add i32 %v0_10d98, %v4_10d94
  %v2_10da0 = icmp eq i32 %v4_10d98, 0
  %v1_10da4 = load i32, i32* @r5, align 4
  %v2_10da4 = add i32 %v1_10da4, 4
  %v3_10da4 = inttoptr i32 %v2_10da4 to i32*
  store i32 %v2_10d9c, i32* %v3_10da4, align 4
  br i1 %v2_10da0, label %dec_label_pc_10d50, label %dec_label_pc_10dac

dec_label_pc_10dac:                               ; preds = %dec_label_pc_10d80, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_10db8 = load i32, i32* @r6, align 4
  %v2_10db8 = add i32 %v0_10db8, 24
  %v3_10db8 = inttoptr i32 %v2_10db8 to i32*
  %v4_10db8 = load i32, i32* %v3_10db8, align 4
  call void @__pseudo_branch(i32 %v4_10db8)
  %v0_10dc4 = load i32, i32* @r4, align 4
  store i32 %v3_10d00, i32* @r4, align 4
  store i32 %v6_10d00, i32* @r5, align 4
  store i32 %v9_10d00, i32* @r6, align 4
  store i32 %v12_10d00, i32* @r7, align 4
  store i32 %v15_10d00, i32* @lr, align 4
  ret i32 %v0_10dc4

; uselistorder directives
  uselistorder i32 %v1_10d90, { 0, 2, 1 }
  uselistorder i32 %v6_10d50, { 1, 0 }
  uselistorder i32 %v0_10d50, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_10d80, { 1, 0 }
}

define i32 @function_10dd8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10dd8:
  %v0_10dd8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10dd8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10dd8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10dd8, %bb
  %v10_10de4 = phi i32 [ %arg1, %dec_label_pc_10dd8 ], [ 0, %bb ]
  ret i32 %v10_10de4

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10de8() local_unnamed_addr {
dec_label_pc_10de8:
  store i32 123612, i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1e58c.341 to i32)
}

define i32 @function_10e04(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e04:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_10e08 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10e08, i32* @r0, align 4
  %v1_10e10 = call i32 @function_13ca8(i32 %v2_10e08)
  %v2_10e14 = load i32, i32* %stack_var_-24, align 4
  %v2_10e18 = add i32 %v2_10e14, %tmp
  %v2_10e20 = mul i32 %v2_10e18, 10000
  %v1_10e24 = and i32 %v2_10e20, 2147483632
  ret i32 %v1_10e24

; uselistorder directives
  uselistorder i32 %v2_10e08, { 1, 0 }
}

define i32 @function_10e34(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e34:
  %v0_10e34 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10e34, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10e34
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10e34, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10e40(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10e40:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_10e44 = load i32, i32* @r2, align 4
  %v8_10e44 = icmp eq i32 %v0_10e44, 8
  store i1 %v8_10e44, i1* %cpsr_z.global-to-local, align 1
  %v5_10e48 = icmp slt i32 %v0_10e44, 8
  br i1 %v5_10e48, label %dec_label_pc_10ea8, label %dec_label_pc_10e4c

dec_label_pc_10e4c:                               ; preds = %dec_label_pc_10e40
  %v4_10e4c = mul i32 %arg2, 256
  %v5_10e4c = or i32 %v4_10e4c, %arg2
  %v4_10e50 = mul i32 %v5_10e4c, 65536
  %v5_10e50 = or i32 %v4_10e50, %v5_10e4c
  store i32 %v5_10e50, i32* %r1.global-to-local, align 4
  %v1_10e5457 = urem i32 %tmp, 4
  %v2_10e5458 = icmp eq i32 %v1_10e5457, 0
  store i1 %v2_10e5458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_10e5458, label %dec_label_pc_10e64, label %bb

bb:                                               ; preds = %dec_label_pc_10e4c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_10e4c ]
  %v3_10e5859 = phi i32 [ %v6_10e58, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_10e4c ]
  %v4_10e58 = inttoptr i32 %v3_10e5859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_10e58, align 1
  %v5_10e58 = load i32, i32* @r3, align 4
  %v6_10e58 = add i32 %v5_10e58, 1
  store i32 %v6_10e58, i32* @r3, align 4
  %v0_10e5c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10e68.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_10e5c.pr, label %dec_label_pc_10e64, label %.thread

.thread:                                          ; preds = %bb
  %v2_10e5c = add i32 %v0_10e68.pr.pre, -1
  store i32 %v2_10e5c, i32* @r2, align 4
  %v1_10e54 = urem i32 %v6_10e58, 4
  %v2_10e54 = icmp eq i32 %v1_10e54, 0
  store i1 %v2_10e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e54, label %dec_label_pc_10e64, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_10e58.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_10e58.pre to i8
  br label %bb

dec_label_pc_10e64:                               ; preds = %.thread, %bb, %dec_label_pc_10e4c
  %v0_10e7028 = phi i32 [ %tmp, %dec_label_pc_10e4c ], [ %v6_10e58, %bb ], [ %v6_10e58, %.thread ]
  %v0_10e68.pr = phi i32 [ %v0_10e44, %dec_label_pc_10e4c ], [ %v0_10e68.pr.pre, %bb ], [ %v2_10e5c, %.thread ]
  %v0_10e64 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_10e64, i32* @ip, align 4
  %v8_10e6810 = icmp eq i32 %v0_10e68.pr, 8
  store i1 %v8_10e6810, i1* %cpsr_z.global-to-local, align 1
  %v5_10e6c11 = icmp slt i32 %v0_10e68.pr, 8
  br i1 %v5_10e6c11, label %dec_label_pc_10ea8, label %dec_label_pc_10e70.preheader

dec_label_pc_10e70.preheader:                     ; preds = %dec_label_pc_10e64
  %v1_10e7046 = inttoptr i32 %v0_10e7028 to i32*
  store i32 %v0_10e64, i32* %v1_10e7046, align 4
  %v3_10e7047 = add i32 %v0_10e7028, 4
  %v4_10e7048 = inttoptr i32 %v3_10e7047 to i32*
  %v5_10e7049 = load i32, i32* @ip, align 4
  store i32 %v5_10e7049, i32* %v4_10e7048, align 4
  %v6_10e7050 = add i32 %v0_10e7028, 8
  store i32 %v6_10e7050, i32* @r3, align 4
  %v0_10e7451 = load i32, i32* @r2, align 4
  %v1_10e7452 = add i32 %v0_10e7451, -8
  store i32 %v1_10e7452, i32* %r2.global-to-local, align 4
  %v5_10e7c53 = icmp slt i32 %v1_10e7452, 8
  br i1 %v5_10e7c53, label %dec_label_pc_10e70.dec_label_pc_10ea8.loopexit_crit_edge, label %dec_label_pc_10e80

dec_label_pc_10e80:                               ; preds = %dec_label_pc_10e70.preheader, %dec_label_pc_10e68.dec_label_pc_10e70_crit_edge
  %v6_10e7055 = phi i32 [ %v6_10e70, %dec_label_pc_10e68.dec_label_pc_10e70_crit_edge ], [ %v6_10e7050, %dec_label_pc_10e70.preheader ]
  %v0_10e7054 = phi i32 [ %v12_10e9c, %dec_label_pc_10e68.dec_label_pc_10e70_crit_edge ], [ %v0_10e7028, %dec_label_pc_10e70.preheader ]
  %v1_10e80 = inttoptr i32 %v6_10e7055 to i32*
  %v2_10e80 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_10e80, i32* %v1_10e80, align 4
  %v3_10e80 = add i32 %v0_10e7054, 12
  %v4_10e80 = inttoptr i32 %v3_10e80 to i32*
  %v5_10e80 = load i32, i32* @ip, align 4
  store i32 %v5_10e80, i32* %v4_10e80, align 4
  %v6_10e80 = add i32 %v0_10e7054, 16
  store i32 %v6_10e80, i32* @r3, align 4
  %v0_10e84 = load i32, i32* %r2.global-to-local, align 4
  %v1_10e84 = add i32 %v0_10e84, -8
  store i32 %v1_10e84, i32* %r2.global-to-local, align 4
  %v5_10e8c = icmp slt i32 %v1_10e84, 8
  br i1 %v5_10e8c, label %dec_label_pc_10e80.dec_label_pc_10ea8.loopexit_crit_edge, label %dec_label_pc_10e90

dec_label_pc_10e90:                               ; preds = %dec_label_pc_10e80
  %v1_10e90 = inttoptr i32 %v6_10e80 to i32*
  %v2_10e90 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_10e90, i32* %v1_10e90, align 4
  %v3_10e90 = add i32 %v0_10e7054, 20
  %v4_10e90 = inttoptr i32 %v3_10e90 to i32*
  %v5_10e90 = load i32, i32* @ip, align 4
  store i32 %v5_10e90, i32* %v4_10e90, align 4
  %v6_10e90 = add i32 %v0_10e7054, 24
  store i32 %v6_10e90, i32* @r3, align 4
  %v0_10e94 = load i32, i32* %r2.global-to-local, align 4
  %v1_10e94 = add i32 %v0_10e94, -8
  store i32 %v1_10e94, i32* %r2.global-to-local, align 4
  %v5_10e9c = icmp slt i32 %v1_10e94, 8
  br i1 %v5_10e9c, label %dec_label_pc_10e90.dec_label_pc_10ea8.loopexit_crit_edge, label %dec_label_pc_10e68

dec_label_pc_10e68:                               ; preds = %dec_label_pc_10e90
  %v7_10e9c = inttoptr i32 %v6_10e90 to i32*
  %v8_10e9c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_10e9c, i32* %v7_10e9c, align 4
  %v9_10e9c = add i32 %v0_10e7054, 28
  %v10_10e9c = inttoptr i32 %v9_10e9c to i32*
  %v11_10e9c = load i32, i32* @ip, align 4
  store i32 %v11_10e9c, i32* %v10_10e9c, align 4
  %v12_10e9c = add i32 %v0_10e7054, 32
  store i32 %v12_10e9c, i32* @r3, align 4
  %v6_10ea0 = load i32, i32* %r2.global-to-local, align 4
  %v7_10ea0 = add i32 %v6_10ea0, -8
  store i32 %v7_10ea0, i32* %r2.global-to-local, align 4
  %v5_10e6c = icmp slt i32 %v7_10ea0, 8
  br i1 %v5_10e6c, label %dec_label_pc_10e68.dec_label_pc_10ea8.loopexit_crit_edge, label %dec_label_pc_10e68.dec_label_pc_10e70_crit_edge

dec_label_pc_10e68.dec_label_pc_10e70_crit_edge:  ; preds = %dec_label_pc_10e68
  %v2_10e70.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_10e70 = inttoptr i32 %v12_10e9c to i32*
  store i32 %v2_10e70.pre, i32* %v1_10e70, align 4
  %v3_10e70 = add i32 %v0_10e7054, 36
  %v4_10e70 = inttoptr i32 %v3_10e70 to i32*
  %v5_10e70 = load i32, i32* @ip, align 4
  store i32 %v5_10e70, i32* %v4_10e70, align 4
  %v6_10e70 = add i32 %v0_10e7054, 40
  store i32 %v6_10e70, i32* @r3, align 4
  %v0_10e74 = load i32, i32* %r2.global-to-local, align 4
  %v1_10e74 = add i32 %v0_10e74, -8
  store i32 %v1_10e74, i32* %r2.global-to-local, align 4
  %v5_10e7c = icmp slt i32 %v1_10e74, 8
  br i1 %v5_10e7c, label %dec_label_pc_10e70.dec_label_pc_10ea8.loopexit_crit_edge, label %dec_label_pc_10e80

dec_label_pc_10e68.dec_label_pc_10ea8.loopexit_crit_edge: ; preds = %dec_label_pc_10e68
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ea8

dec_label_pc_10e70.dec_label_pc_10ea8.loopexit_crit_edge: ; preds = %dec_label_pc_10e68.dec_label_pc_10e70_crit_edge, %dec_label_pc_10e70.preheader
  %v1_10e74.lcssa = phi i32 [ %v1_10e7452, %dec_label_pc_10e70.preheader ], [ %v1_10e74, %dec_label_pc_10e68.dec_label_pc_10e70_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ea8

dec_label_pc_10e80.dec_label_pc_10ea8.loopexit_crit_edge: ; preds = %dec_label_pc_10e80
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ea8

dec_label_pc_10e90.dec_label_pc_10ea8.loopexit_crit_edge: ; preds = %dec_label_pc_10e90
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ea8

dec_label_pc_10ea8:                               ; preds = %dec_label_pc_10e64, %dec_label_pc_10e68.dec_label_pc_10ea8.loopexit_crit_edge, %dec_label_pc_10e70.dec_label_pc_10ea8.loopexit_crit_edge, %dec_label_pc_10e80.dec_label_pc_10ea8.loopexit_crit_edge, %dec_label_pc_10e90.dec_label_pc_10ea8.loopexit_crit_edge, %dec_label_pc_10e40
  %v0_10eb0 = phi i32 [ %v0_10e44, %dec_label_pc_10e40 ], [ %v1_10e94, %dec_label_pc_10e90.dec_label_pc_10ea8.loopexit_crit_edge ], [ %v1_10e84, %dec_label_pc_10e80.dec_label_pc_10ea8.loopexit_crit_edge ], [ %v1_10e74.lcssa, %dec_label_pc_10e70.dec_label_pc_10ea8.loopexit_crit_edge ], [ %v7_10ea0, %dec_label_pc_10e68.dec_label_pc_10ea8.loopexit_crit_edge ], [ %v0_10e68.pr, %dec_label_pc_10e64 ]
  %v2_10ea8 = icmp eq i32 %v0_10eb0, 0
  store i1 %v2_10ea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ea8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_10ea8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_10ea8
  %v1_10eb0 = sub i32 7, %v0_10eb0
  store i32 %v1_10eb0, i32* %r2.global-to-local, align 4
  %v3_10eb4 = mul i32 %v1_10eb0, 4
  %v4_10eb4 = add i32 %v3_10eb4, ptrtoint (i32* @global_var_10ebc.343 to i32)
  call void @__pseudo_branch(i32 %v4_10eb4)
  %v0_10ebc = load i32, i32* %r1.global-to-local, align 4
  %v1_10ebc = trunc i32 %v0_10ebc to i8
  %v2_10ebc = load i32, i32* @r3, align 4
  %v3_10ebc = inttoptr i32 %v2_10ebc to i8*
  store i8 %v1_10ebc, i8* %v3_10ebc, align 1
  %v4_10ebc = load i32, i32* @r3, align 4
  %v5_10ebc = add i32 %v4_10ebc, 1
  store i32 %v5_10ebc, i32* %r3.global-to-local, align 4
  %v0_10ec0 = load i32, i32* %r1.global-to-local, align 4
  %v1_10ec0 = trunc i32 %v0_10ec0 to i8
  %v3_10ec0 = inttoptr i32 %v5_10ebc to i8*
  store i8 %v1_10ec0, i8* %v3_10ec0, align 1
  %v4_10ec0 = load i32, i32* %r3.global-to-local, align 4
  %v5_10ec0 = add i32 %v4_10ec0, 1
  store i32 %v5_10ec0, i32* %r3.global-to-local, align 4
  %v0_10ec4 = load i32, i32* %r1.global-to-local, align 4
  %v1_10ec4 = trunc i32 %v0_10ec4 to i8
  %v3_10ec4 = inttoptr i32 %v5_10ec0 to i8*
  store i8 %v1_10ec4, i8* %v3_10ec4, align 1
  %v4_10ec4 = load i32, i32* %r3.global-to-local, align 4
  %v5_10ec4 = add i32 %v4_10ec4, 1
  store i32 %v5_10ec4, i32* %r3.global-to-local, align 4
  %v0_10ec8 = load i32, i32* %r1.global-to-local, align 4
  %v1_10ec8 = trunc i32 %v0_10ec8 to i8
  %v3_10ec8 = inttoptr i32 %v5_10ec4 to i8*
  store i8 %v1_10ec8, i8* %v3_10ec8, align 1
  %v4_10ec8 = load i32, i32* %r3.global-to-local, align 4
  %v5_10ec8 = add i32 %v4_10ec8, 1
  store i32 %v5_10ec8, i32* %r3.global-to-local, align 4
  %v0_10ecc = load i32, i32* %r1.global-to-local, align 4
  %v1_10ecc = trunc i32 %v0_10ecc to i8
  %v3_10ecc = inttoptr i32 %v5_10ec8 to i8*
  store i8 %v1_10ecc, i8* %v3_10ecc, align 1
  %v4_10ecc = load i32, i32* %r3.global-to-local, align 4
  %v5_10ecc = add i32 %v4_10ecc, 1
  store i32 %v5_10ecc, i32* %r3.global-to-local, align 4
  %v0_10ed0 = load i32, i32* %r1.global-to-local, align 4
  %v1_10ed0 = trunc i32 %v0_10ed0 to i8
  %v3_10ed0 = inttoptr i32 %v5_10ecc to i8*
  store i8 %v1_10ed0, i8* %v3_10ed0, align 1
  %v4_10ed0 = load i32, i32* %r3.global-to-local, align 4
  %v5_10ed0 = add i32 %v4_10ed0, 1
  store i32 %v5_10ed0, i32* %r3.global-to-local, align 4
  %v0_10ed4 = load i32, i32* %r1.global-to-local, align 4
  %v1_10ed4 = trunc i32 %v0_10ed4 to i8
  %v3_10ed4 = inttoptr i32 %v5_10ed0 to i8*
  store i8 %v1_10ed4, i8* %v3_10ed4, align 1
  %v4_10ed4 = load i32, i32* %r3.global-to-local, align 4
  %v5_10ed4 = add i32 %v4_10ed4, 1
  store i32 %v5_10ed4, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_10e70, { 1, 0 }
  uselistorder i32 %v12_10e9c, { 1, 2, 0 }
  uselistorder i32 %v0_10e7054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_10e68.pr, { 0, 2, 1 }
  uselistorder i32 %v6_10e58, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_10e4c, { 1, 0 }
  uselistorder i32 %v0_10e44, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 2, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 4, 3, 2, 5, 1, 8, 7, 0, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_10ea8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_10e80, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_10ee0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10ee0:
  %v0_10ee0 = call i32 @function_14f20()
  ret i32 %v0_10ee0
}

define i32 @function_10ef0() local_unnamed_addr {
dec_label_pc_10ef0:
  %v0_10ef0 = call i32 @function_14f20()
  ret i32 %v0_10ef0
}

define i32 @function_10f00(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f00:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_10f101 = load i32, i32* @r1, align 4
  %v1_10f102 = inttoptr i32 %v0_10f101 to i8*
  %v2_10f103 = load i8, i8* %v1_10f102, align 1
  %v2_10f145 = icmp eq i8 %v2_10f103, 0
  store i1 %v2_10f145, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_10f103, i8* %arg1, align 1
  br i1 %v2_10f145, label %dec_label_pc_10f20, label %dec_label_pc_10f08

dec_label_pc_10f08:                               ; preds = %dec_label_pc_10f00, %dec_label_pc_10f08
  %v0_10f08 = load i32, i32* @r1, align 4
  %v1_10f08 = add i32 %v0_10f08, 1
  store i32 %v1_10f08, i32* @r1, align 4
  %v0_10f0c = load i32, i32* %r2.global-to-local, align 4
  %v1_10f0c = add i32 %v0_10f0c, 1
  store i32 %v1_10f0c, i32* %r2.global-to-local, align 4
  %v1_10f10 = inttoptr i32 %v1_10f08 to i8*
  %v2_10f10 = load i8, i8* %v1_10f10, align 1
  %v2_10f14 = icmp eq i8 %v2_10f10, 0
  store i1 %v2_10f14, i1* %cpsr_z.global-to-local, align 1
  %v3_10f18 = inttoptr i32 %v1_10f0c to i8*
  store i8 %v2_10f10, i8* %v3_10f18, align 1
  %v0_10f1c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10f1c, label %dec_label_pc_10f20, label %dec_label_pc_10f08

dec_label_pc_10f20:                               ; preds = %dec_label_pc_10f08, %dec_label_pc_10f00
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10f08, { 1, 0 }
}

define i32 @function_10f24(i32 %arg1) local_unnamed_addr {
dec_label_pc_10f24:
  %stack_var_-12 = alloca i32, align 4
  %v2_10f2c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_10f2c, i32* @r1, align 4
  %v0_10f30 = call i32 @function_1578c()
  %v2_10f34 = icmp eq i32 %v0_10f30, 0
  %v4_10f38 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_10f34, i32 -1, i32 %v4_10f38
  ret i32 %storemerge
}

define i32 @function_10f4c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_10f4c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10f4c = load i32, i32* @r7, align 4
  store i32 %v3_10f4c, i32* %stack_var_-8, align 4
  %v0_10f58 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10f58, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10f58, -4095
  br i1 %tmp, label %dec_label_pc_10f78, label %dec_label_pc_10f68

dec_label_pc_10f68:                               ; preds = %dec_label_pc_10f4c
  %v0_10f68 = call i32 @function_10de8()
  %v0_10f6c = load i32, i32* %r7.global-to-local, align 4
  %v1_10f6c = sub i32 0, %v0_10f6c
  %v2_10f70 = inttoptr i32 %v0_10f68 to i32*
  store i32 %v1_10f6c, i32* %v2_10f70, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10f78.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10f78

dec_label_pc_10f78:                               ; preds = %dec_label_pc_10f4c, %dec_label_pc_10f68
  %v1_10f7c = phi i32 [ %v0_10f58, %dec_label_pc_10f4c ], [ -1, %dec_label_pc_10f68 ]
  %v2_10f78 = phi i32 [ %v3_10f4c, %dec_label_pc_10f4c ], [ %v2_10f78.pre, %dec_label_pc_10f68 ]
  store i32 %v2_10f78, i32* @r7, align 4
  ret i32 %v1_10f7c

; uselistorder directives
  uselistorder i32 %v0_10f58, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10f78, { 1, 0 }
}

define i32 @function_10f84(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10f84:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10f84 = load i32, i32* @r7, align 4
  store i32 %v3_10f84, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10fac, label %dec_label_pc_10f9c

dec_label_pc_10f9c:                               ; preds = %dec_label_pc_10f84
  %v0_10f9c = call i32 @function_10de8()
  %v0_10fa0 = load i32, i32* %r7.global-to-local, align 4
  %v1_10fa0 = sub i32 0, %v0_10fa0
  store i32 %v1_10fa0, i32* @r3, align 4
  %v2_10fa4 = inttoptr i32 %v0_10f9c to i32*
  store i32 %v1_10fa0, i32* %v2_10fa4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10fb0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10fac

dec_label_pc_10fac:                               ; preds = %dec_label_pc_10f84, %dec_label_pc_10f9c
  %v2_10fb0 = phi i32 [ %v3_10f84, %dec_label_pc_10f84 ], [ %v2_10fb0.pre, %dec_label_pc_10f9c ]
  %v0_10fac = phi i32 [ %arg1, %dec_label_pc_10f84 ], [ -1, %dec_label_pc_10f9c ]
  store i32 %v2_10fb0, i32* @r7, align 4
  ret i32 %v0_10fac

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10fac, { 1, 0 }
}

define i32 @function_10fbc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10fbc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10fbc = load i32, i32* @r7, align 4
  store i32 %v3_10fbc, i32* %stack_var_-8, align 4
  %v0_10fc8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10fc8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10fc8, -4095
  br i1 %tmp, label %dec_label_pc_10fe8, label %dec_label_pc_10fd8

dec_label_pc_10fd8:                               ; preds = %dec_label_pc_10fbc
  %v0_10fd8 = call i32 @function_10de8()
  %v0_10fdc = load i32, i32* %r7.global-to-local, align 4
  %v1_10fdc = sub i32 0, %v0_10fdc
  %v2_10fe0 = inttoptr i32 %v0_10fd8 to i32*
  store i32 %v1_10fdc, i32* %v2_10fe0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10fe8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10fe8:                               ; preds = %dec_label_pc_10fbc, %dec_label_pc_10fd8
  %v1_10fec = phi i32 [ %v0_10fc8, %dec_label_pc_10fbc ], [ -1, %dec_label_pc_10fd8 ]
  %v2_10fe8 = phi i32 [ %v3_10fbc, %dec_label_pc_10fbc ], [ %v2_10fe8.pre, %dec_label_pc_10fd8 ]
  store i32 %v2_10fe8, i32* @r7, align 4
  ret i32 %v1_10fec

; uselistorder directives
  uselistorder i32 %v0_10fc8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10fe8, { 1, 0 }
}

define i32 @function_10ff4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10ff4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11028, label %dec_label_pc_11018

dec_label_pc_11018:                               ; preds = %dec_label_pc_10ff4
  %v0_11018 = call i32 @function_10de8()
  %v0_1101c = load i32, i32* %r4.global-to-local, align 4
  %v1_1101c = sub i32 0, %v0_1101c
  %v2_11020 = inttoptr i32 %v0_11018 to i32*
  store i32 %v1_1101c, i32* %v2_11020, align 4
  br label %dec_label_pc_11028

dec_label_pc_11028:                               ; preds = %dec_label_pc_10ff4, %dec_label_pc_11018
  %v1_11030 = phi i32 [ %arg1, %dec_label_pc_10ff4 ], [ -1, %dec_label_pc_11018 ]
  ret i32 %v1_11030

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11028, { 1, 0 }
}

define i32 @function_11038(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11038:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11038 = load i32, i32* @r7, align 4
  store i32 %v3_11038, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11060, label %dec_label_pc_11050

dec_label_pc_11050:                               ; preds = %dec_label_pc_11038
  %v0_11050 = call i32 @function_10de8()
  %v0_11054 = load i32, i32* %r7.global-to-local, align 4
  %v1_11054 = sub i32 0, %v0_11054
  %v2_11058 = inttoptr i32 %v0_11050 to i32*
  store i32 %v1_11054, i32* %v2_11058, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11064.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11060

dec_label_pc_11060:                               ; preds = %dec_label_pc_11038, %dec_label_pc_11050
  %v2_11064 = phi i32 [ %v3_11038, %dec_label_pc_11038 ], [ %v2_11064.pre, %dec_label_pc_11050 ]
  %v0_11060 = phi i32 [ %arg1, %dec_label_pc_11038 ], [ -1, %dec_label_pc_11050 ]
  store i32 %v2_11064, i32* @r7, align 4
  ret i32 %v0_11060

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11060, { 1, 0 }
}

define i32 @function_11070(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11070:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11070 = load i32, i32* @r4, align 4
  store i32 %v3_11070, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_110a0, label %dec_label_pc_11090

dec_label_pc_11090:                               ; preds = %dec_label_pc_11070
  %v0_11090 = call i32 @function_10de8()
  %v0_11094 = load i32, i32* %r4.global-to-local, align 4
  %v1_11094 = sub i32 0, %v0_11094
  %v2_11098 = inttoptr i32 %v0_11090 to i32*
  store i32 %v1_11094, i32* %v2_11098, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_110a4.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_110a0

dec_label_pc_110a0:                               ; preds = %dec_label_pc_11070, %dec_label_pc_11090
  %v2_110a4 = phi i32 [ %v3_11070, %dec_label_pc_11070 ], [ %v2_110a4.pre, %dec_label_pc_11090 ]
  %v0_110a0 = phi i32 [ %arg1, %dec_label_pc_11070 ], [ -1, %dec_label_pc_11090 ]
  store i32 %v2_110a4, i32* @r4, align 4
  ret i32 %v0_110a0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_110a0, { 1, 0 }
}

define i32 @function_110ac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_110ac:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110ac = load i32, i32* @r7, align 4
  store i32 %v3_110ac, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_110d4, label %dec_label_pc_110c4

dec_label_pc_110c4:                               ; preds = %dec_label_pc_110ac
  %v0_110c4 = call i32 @function_10de8()
  %v0_110c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_110c8 = sub i32 0, %v0_110c8
  store i32 %v1_110c8, i32* @r3, align 4
  %v2_110cc = inttoptr i32 %v0_110c4 to i32*
  store i32 %v1_110c8, i32* %v2_110cc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_110d8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_110d4

dec_label_pc_110d4:                               ; preds = %dec_label_pc_110ac, %dec_label_pc_110c4
  %v2_110d8 = phi i32 [ %v3_110ac, %dec_label_pc_110ac ], [ %v2_110d8.pre, %dec_label_pc_110c4 ]
  %v0_110d4 = phi i32 [ %arg1, %dec_label_pc_110ac ], [ -1, %dec_label_pc_110c4 ]
  store i32 %v2_110d8, i32* @r7, align 4
  ret i32 %v0_110d4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_110d4, { 1, 0 }
}

define i32 @function_110e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_110e4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_110e4 = load i32, i32* @r4, align 4
  store i32 %v3_110e4, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11114, label %dec_label_pc_11104

dec_label_pc_11104:                               ; preds = %dec_label_pc_110e4
  %v0_11104 = call i32 @function_10de8()
  %v0_11108 = load i32, i32* %r4.global-to-local, align 4
  %v1_11108 = sub i32 0, %v0_11108
  %v2_1110c = inttoptr i32 %v0_11104 to i32*
  store i32 %v1_11108, i32* %v2_1110c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11118.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11114

dec_label_pc_11114:                               ; preds = %dec_label_pc_110e4, %dec_label_pc_11104
  %v2_11118 = phi i32 [ %v3_110e4, %dec_label_pc_110e4 ], [ %v2_11118.pre, %dec_label_pc_11104 ]
  %v0_11114 = phi i32 [ %arg1, %dec_label_pc_110e4 ], [ -1, %dec_label_pc_11104 ]
  store i32 %v2_11118, i32* @r4, align 4
  ret i32 %v0_11114

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11114, { 1, 0 }
}

define i32 @function_11124(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11124:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11158, label %dec_label_pc_11148

dec_label_pc_11148:                               ; preds = %dec_label_pc_11124
  %v0_11148 = call i32 @function_10de8()
  %v0_1114c = load i32, i32* %r4.global-to-local, align 4
  %v1_1114c = sub i32 0, %v0_1114c
  %v2_11150 = inttoptr i32 %v0_11148 to i32*
  store i32 %v1_1114c, i32* %v2_11150, align 4
  br label %dec_label_pc_11158

dec_label_pc_11158:                               ; preds = %dec_label_pc_11124, %dec_label_pc_11148
  %v1_11160 = phi i32 [ %arg1, %dec_label_pc_11124 ], [ -1, %dec_label_pc_11148 ]
  ret i32 %v1_11160

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11158, { 1, 0 }
}

define i32 @function_11168(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11168:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11168 = load i32, i32* @r7, align 4
  store i32 %v3_11168, i32* %stack_var_-8, align 4
  %v0_11174 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11174, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11174, -4095
  br i1 %tmp, label %dec_label_pc_11194, label %dec_label_pc_11184

dec_label_pc_11184:                               ; preds = %dec_label_pc_11168
  %v0_11184 = call i32 @function_10de8()
  %v0_11188 = load i32, i32* %r7.global-to-local, align 4
  %v1_11188 = sub i32 0, %v0_11188
  store i32 %v1_11188, i32* @r3, align 4
  %v2_1118c = inttoptr i32 %v0_11184 to i32*
  store i32 %v1_11188, i32* %v2_1118c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11194.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11194

dec_label_pc_11194:                               ; preds = %dec_label_pc_11168, %dec_label_pc_11184
  %v1_11198 = phi i32 [ %v0_11174, %dec_label_pc_11168 ], [ -1, %dec_label_pc_11184 ]
  %v2_11194 = phi i32 [ %v3_11168, %dec_label_pc_11168 ], [ %v2_11194.pre, %dec_label_pc_11184 ]
  store i32 %v2_11194, i32* @r7, align 4
  ret i32 %v1_11198

; uselistorder directives
  uselistorder i32 %v0_11174, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11194, { 1, 0 }
}

define i32 @function_111a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_111a0:
  store i32 %arg1, i32* @r0, align 4
  %v3_111a0 = load i32, i32* @r4, align 4
  %v0_111a8 = call i32 @function_1062c()
  %v2_111b0 = call i32 @function_1078c(i32 %v0_111a8, i32 %arg1)
  store i32 %v3_111a0, i32* @r4, align 4
  ret i32 %v2_111b0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_1078c, { 0, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_1062c, { 0, 3, 2, 1 }
}

define i32 @function_111bc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_111bc:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_111d4, label %dec_label_pc_111cc

dec_label_pc_111cc:                               ; preds = %dec_label_pc_111bc
  %v7_111d0 = icmp slt i32 %arg1, 65
  br i1 %v7_111d0, label %dec_label_pc_111e8, label %dec_label_pc_111d4

dec_label_pc_111d4:                               ; preds = %dec_label_pc_111cc, %dec_label_pc_111bc
  %v0_111d4 = call i32 @function_10de8()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_111e0 = inttoptr i32 %v0_111d4 to i32*
  store i32 22, i32* %v2_111e0, align 4
  %v0_111f0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_111f0

dec_label_pc_111e8:                               ; preds = %dec_label_pc_111cc
  %v0_111e8 = call i32 @function_112f0()
  store i32 %v0_111e8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_111f0

dec_label_pc_111f0:                               ; preds = %dec_label_pc_111d4, %dec_label_pc_111e8
  %v0_111f0 = phi i32 [ %v0_111f0.pre, %dec_label_pc_111d4 ], [ %v0_111e8, %dec_label_pc_111e8 ]
  ret i32 %v0_111f0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_111f0, { 1, 0 }
}

define i32 @function_11200(i32* %arg1) local_unnamed_addr {
dec_label_pc_11200:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11208 = add i32 %tmp, 4
  %v3_11208 = inttoptr i32 %v2_11208 to i32*
  store i32 0, i32* %v3_11208, align 4
  %v1_1120c = load i32, i32* %r3.global-to-local, align 4
  %v2_1120c = inttoptr i32 %v1_1120c to i32*
  store i32 0, i32* %v2_1120c, align 4
  ret i32 0
}

define i32 @function_11214(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11214:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11214 = load i32, i32* @r4, align 4
  store i32 %v3_11214, i32* %stack_var_-16, align 4
  %v6_11214 = load i32, i32* @r5, align 4
  %v9_11214 = load i32, i32* @r6, align 4
  %v7_1121c = icmp eq i32 %arg2, -1
  br i1 %v7_1121c, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_11214
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_11214
  %v2_11224 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_11240

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11248

dec_label_pc_11240:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_11244 = icmp slt i32 %arg1, 65
  br i1 %v7_11244, label %dec_label_pc_1125c, label %dec_label_pc_11248

dec_label_pc_11248:                               ; preds = %.thread16, %dec_label_pc_11240
  %v0_11248 = call i32 @function_10de8()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11254 = inttoptr i32 %v0_11248 to i32*
  store i32 22, i32* %v2_11254, align 4
  %v0_112b4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_1125c:                               ; preds = %dec_label_pc_11240
  %v2_1125c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_1125c, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11264 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11264, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_11274 = call i32 @function_112f0()
  %v0_1127c = load i32, i32* @r5, align 4
  %v2_11284 = call i32 @function_112cc(i32 ptrtoint (i32* @global_var_206c4.356 to i32), i32 %v0_1127c)
  store i32 %v2_11224, i32* %r2.global-to-local, align 4
  %v0_1129c = load i32, i32* @r5, align 4
  %v3_112a4 = call i32 @function_13700(i32 %v0_1129c, i32 %v2_1125c, i32 %v2_11224)
  %v1_112a8 = icmp slt i32 %v3_112a4, 0
  br i1 %v1_112a8, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_1125c
  %v5_112ac = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_112ac, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_1125c
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_11248, %bb32
  %v0_112b4 = phi i32 [ %v5_112ac, %bb31 ], [ %v0_112b4.pre, %dec_label_pc_11248 ], [ -1, %bb32 ]
  %v2_112bc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_112bc, i32* @r4, align 4
  store i32 %v6_11214, i32* @r5, align 4
  store i32 %v9_11214, i32* @r6, align 4
  ret i32 %v0_112b4

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 ()* @function_112f0, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11248, { 1, 0 }
}

define i32 @function_112cc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_112cc:
  %v1_112cc = add i32 %arg2, -1
  %v3_112d0 = udiv i32 %v1_112cc, 32
  %v4_112d4 = mul nuw nsw i32 %v3_112d0, 4
  %v5_112d4 = add i32 %v4_112d4, %arg1
  %v6_112d4 = inttoptr i32 %v5_112d4 to i32*
  %v7_112d4 = load i32, i32* %v6_112d4, align 4
  %v1_112d8 = urem i32 %v1_112cc, 32
  %v7_112e0 = shl i32 1, %v1_112d8
  %v8_112e0 = and i32 %v7_112d4, %v7_112e0
  %v10_112e0 = icmp ne i32 %v8_112e0, 0
  %. = zext i1 %v10_112e0 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_112cc, { 1, 0 }
}

define i32 @function_112f0() local_unnamed_addr {
dec_label_pc_112f0:
  %v0_112f0 = load i32, i32* @r1, align 4
  %v1_112f0 = add i32 %v0_112f0, -1
  %v3_112f4 = udiv i32 %v1_112f0, 32
  %v0_112f8 = load i32, i32* @r0, align 4
  %v4_112f8 = mul nuw nsw i32 %v3_112f4, 4
  %v5_112f8 = add i32 %v0_112f8, %v4_112f8
  %v6_112f8 = inttoptr i32 %v5_112f8 to i32*
  %v7_112f8 = load i32, i32* %v6_112f8, align 4
  %v1_112fc = urem i32 %v1_112f0, 32
  %v7_11304 = shl i32 1, %v1_112fc
  %v8_11304 = or i32 %v7_112f8, %v7_11304
  store i32 %v8_11304, i32* %v6_112f8, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_112f0, { 1, 0 }
}

define i32 @function_11314(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11314:
  %v1_11314 = add i32 %arg2, -1
  %v3_11318 = udiv i32 %v1_11314, 32
  %v4_1131c = mul nuw nsw i32 %v3_11318, 4
  %v5_1131c = add i32 %v4_1131c, %arg1
  %v6_1131c = inttoptr i32 %v5_1131c to i32*
  %v7_1131c = load i32, i32* %v6_1131c, align 4
  %v1_11320 = urem i32 %v1_11314, 32
  %tmp = shl i32 -1, %v1_11320
  %v8_11328 = add i32 %tmp, -1
  %v9_11328 = and i32 %v7_1131c, %v8_11328
  store i32 %v9_11328, i32* %v6_1131c, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11314, { 1, 0 }
}

define i32 @function_11338(i32 %arg1) local_unnamed_addr {
dec_label_pc_11338:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_11338 = udiv i32 %arg1, 256
  store i32 %v3_11338, i32* %r1.global-to-local, align 4
  %v2_1133c = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_1133c, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11338
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11338, %bb
  %v0_11348 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_1133c, i32 %v0_11348)
  %v0_1134c = load i32, i32* %r1.global-to-local, align 4
  %v1_1134c = add i32 %v0_1134c, 1048320
  %v3_11350 = udiv i32 %v1_1134c, 65536
  %v1_11354 = and i32 %v3_11350, 8
  %v6_11358 = shl i32 %v0_1134c, %v1_11354
  %v1_1135c = add i32 %v6_11358, 520192
  %v3_11360 = udiv i32 %v1_1135c, 65536
  %v1_11364 = and i32 %v3_11360, 4
  %v6_11368 = shl i32 %v6_11358, %v1_11364
  %v1_1136c = add i32 %v6_11368, 245760
  %v3_11370 = udiv i32 %v1_1136c, 65536
  %v1_11374 = and i32 %v3_11370, 2
  %v6_11378 = shl i32 %v6_11368, %v1_11374
  store i32 %v6_11378, i32* %r1.global-to-local, align 4
  %v1_1137c = sub nsw i32 13, %v1_11354
  %v2_11380 = sub nsw i32 %v1_1137c, %v1_11364
  %v3_11384 = udiv i32 %v6_11378, 32768
  %v4_11384 = sub nuw nsw i32 -1, %v3_11384
  %v4_11388 = udiv i32 %v6_11378, 16384
  %v5_11388 = and i32 %v4_11388, %v4_11384
  %v2_1138c = sub nsw i32 %v2_11380, %v1_11374
  %v2_11390 = add nsw i32 %v2_1138c, %v5_11388
  %v1_11394 = add nsw i32 %v2_11390, 6
  %v0_11398 = load i32, i32* %ip.global-to-local, align 4
  %v6_11398 = lshr i32 %v0_11398, %v1_11394
  %v3_1139c = mul nsw i32 %v2_11390, 4
  %v1_113a0 = add nsw i32 %v3_1139c, 32
  %v1_113a4 = urem i32 %v6_11398, 4
  %v2_113a8 = or i32 %v1_113a4, %v1_113a0
  ret i32 %v2_113a8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_113b0() local_unnamed_addr {
dec_label_pc_113b0:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_113b0 = load i32, i32* @r4, align 4
  %v6_113b0 = load i32, i32* @r5, align 4
  %v9_113b0 = load i32, i32* @r6, align 4
  %v12_113b0 = load i32, i32* @r7, align 4
  %v15_113b0 = load i32, i32* @r8, align 4
  %v18_113b0 = load i32, i32* @sb, align 4
  %v21_113b0 = load i32, i32* @sl, align 4
  %v24_113b0 = load i32, i32* @fp, align 4
  %v27_113b0 = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r1.global-to-local, align 4
  %v4_113c4 = load i32, i32* inttoptr (i32 123680 to i32*), align 32
  store i32 %v4_113c4, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_113d0 = load i32, i32* inttoptr (i32 123648 to i32*), align 256
  store i32 %v4_113d0, i32* %r1.global-to-local, align 4
  %v0_113d4 = load i32, i32* @r0, align 4
  store i32 %v0_113d4, i32* @r5, align 4
  store i32 %v4_113c4, i32* %r2.global-to-local, align 4
  %v2_113dc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_113dc, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %ip.global-to-local, align 4
  %v4_113e8 = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  store i32 %v4_113e8, i32* %ip.global-to-local, align 4
  store i32 70644, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_113e8)
  %v0_113f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_113f4, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r1.global-to-local, align 4
  %v4_11400 = load i32, i32* inttoptr (i32 123628 to i32*), align 4
  store i32 %v4_11400, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_1140c.362 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11400)
  %v0_1140c = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_1140c, -32
  br i1 %tmp, label %dec_label_pc_11428, label %dec_label_pc_11414

dec_label_pc_11414:                               ; preds = %dec_label_pc_113b0
  %v0_11414 = call i32 @function_10de8()
  store i32 %v0_11414, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_11420 = inttoptr i32 %v0_11414 to i32*
  store i32 12, i32* %v2_11420, align 4
  br label %dec_label_pc_11ca4

dec_label_pc_11428:                               ; preds = %dec_label_pc_113b0
  %v1_11428 = add i32 %v0_1140c, 11
  store i32 %v1_11428, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r2.global-to-local, align 4
  %v2_11434 = icmp ugt i32 %v1_11428, 14
  %v7_11434 = icmp eq i32 %v1_11428, 15
  %v2_11438 = xor i1 %v7_11434, true
  %v3_11438 = and i1 %v2_11434, %v2_11438
  br i1 %v3_11438, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_11428
  %v5_11438 = and i32 %v1_11428, -8
  store i32 %v5_11438, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_11428, %bb
  %v4_1143c = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_1143c, i32* @r0, align 4
  %v1_11440 = inttoptr i32 %v4_1143c to i32*
  %v2_11440 = load i32, i32* %v1_11440, align 4
  store i32 %v2_11440, i32* @r4, align 4
  %v2_11444 = xor i1 %v2_11434, true
  %v3_11444 = or i1 %v7_11434, %v2_11444
  br i1 %v3_11444, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_11448 = urem i32 %v2_11440, 2
  %v2_11448 = icmp eq i32 %v1_11448, 0
  br i1 %v2_11448, label %dec_label_pc_11450, label %dec_label_pc_11460

dec_label_pc_11450:                               ; preds = %bb140
  %v2_11450 = icmp eq i32 %v2_11440, 0
  br i1 %v2_11450, label %dec_label_pc_11458, label %dec_label_pc_1183c

dec_label_pc_11458:                               ; preds = %dec_label_pc_11450
  %v0_11458 = call i32 @function_12268()
  store i32 %v0_11458, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1183c

dec_label_pc_11460:                               ; preds = %bb140
  %v0_11460 = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_11460, %v2_11440
  br i1 %tmp201, label %dec_label_pc_11488, label %dec_label_pc_11468

dec_label_pc_11468:                               ; preds = %dec_label_pc_11460
  %v1_11468 = add i32 %v4_1143c, -4
  store i32 %v1_11468, i32* %r1.global-to-local, align 4
  %v3_1146c = udiv i32 %v0_11460, 8
  store i32 %v3_1146c, i32* %r2.global-to-local, align 4
  %v4_11470 = mul nuw i32 %v3_1146c, 4
  %v5_11470 = add i32 %v4_11470, %v1_11468
  %v6_11470 = inttoptr i32 %v5_11470 to i32*
  %v7_11470 = load i32, i32* %v6_11470, align 4
  store i32 %v7_11470, i32* %r0.global-to-local, align 4
  %v2_11474 = icmp eq i32 %v7_11470, 0
  br i1 %v2_11474, label %dec_label_pc_11488, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11468
  %v2_11478 = add i32 %v7_11470, 8
  %v3_11478 = inttoptr i32 %v2_11478 to i32*
  %v4_11478 = load i32, i32* %v3_11478, align 4
  store i32 %v4_11478, i32* %r3.global-to-local, align 4
  store i32 %v2_11478, i32* %r0.global-to-local, align 4
  store i32 %v2_11478, i32* %r4.global-to-local, align 4
  store i32 %v4_11478, i32* %v6_11470, align 4
  br label %dec_label_pc_11c88

dec_label_pc_11488:                               ; preds = %dec_label_pc_11468, %dec_label_pc_11460
  %tmp202 = icmp ugt i32 %v0_11460, 255
  br i1 %tmp202, label %dec_label_pc_114d8, label %dec_label_pc_11490

dec_label_pc_11490:                               ; preds = %dec_label_pc_11488
  store i32 123612, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11498 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  %v3_1149c = udiv i32 %v0_11460, 8
  store i32 %v3_1149c, i32* @r7, align 4
  %v4_114a0 = mul nuw i32 %v3_1149c, 8
  %v5_114a0 = add i32 %v4_11498, %v4_114a0
  store i32 %v5_114a0, i32* %r3.global-to-local, align 4
  %v1_114a4 = add i32 %v5_114a0, 44
  store i32 %v1_114a4, i32* %ip.global-to-local, align 4
  %v1_114a8 = add i32 %v5_114a0, 56
  %v2_114a8 = inttoptr i32 %v1_114a8 to i32*
  %v3_114a8 = load i32, i32* %v2_114a8, align 4
  store i32 %v3_114a8, i32* %r0.global-to-local, align 4
  %v9_114ac = icmp eq i32 %v3_114a8, %v1_114a4
  br i1 %v9_114ac, label %dec_label_pc_11638, label %dec_label_pc_114b4

dec_label_pc_114b4:                               ; preds = %dec_label_pc_11490
  %v2_114b4 = add i32 %v3_114a8, %v0_11460
  store i32 %v2_114b4, i32* %r3.global-to-local, align 4
  %v1_114b8 = add i32 %v2_114b4, 4
  %v2_114b8 = inttoptr i32 %v1_114b8 to i32*
  %v3_114b8 = load i32, i32* %v2_114b8, align 4
  store i32 %v3_114b8, i32* %r2.global-to-local, align 4
  %v1_114bc = add i32 %v3_114a8, 12
  %v2_114bc = inttoptr i32 %v1_114bc to i32*
  %v3_114bc = load i32, i32* %v2_114bc, align 4
  store i32 %v3_114bc, i32* %r1.global-to-local, align 4
  %v1_114c0 = or i32 %v3_114b8, 1
  store i32 %v1_114c0, i32* %r2.global-to-local, align 4
  %v1_114c4 = add i32 %v3_114a8, 8
  store i32 %v1_114c4, i32* %r4.global-to-local, align 4
  store i32 %v1_114c0, i32* %v2_114b8, align 4
  %v0_114cc = load i32, i32* %ip.global-to-local, align 4
  %v1_114cc = load i32, i32* %r1.global-to-local, align 4
  %v2_114cc = add i32 %v1_114cc, 8
  %v3_114cc = inttoptr i32 %v2_114cc to i32*
  store i32 %v0_114cc, i32* %v3_114cc, align 4
  %v0_114d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_114d0 = load i32, i32* %ip.global-to-local, align 4
  %v2_114d0 = add i32 %v1_114d0, 12
  %v3_114d0 = inttoptr i32 %v2_114d0 to i32*
  store i32 %v0_114d0, i32* %v3_114d0, align 4
  br label %dec_label_pc_11c88

dec_label_pc_114d8:                               ; preds = %dec_label_pc_11488
  store i32 %v0_11460, i32* %r0.global-to-local, align 4
  %v1_114dc = call i32 @function_11338(i32 %v0_11460)
  store i32 %v1_114dc, i32* %r0.global-to-local, align 4
  %v0_114e0 = load i32, i32* @r4, align 4
  %v1_114e0 = and i32 %v0_114e0, 2
  %v2_114e0 = icmp eq i32 %v1_114e0, 0
  store i32 %v1_114dc, i32* @r7, align 4
  br i1 %v2_114e0, label %dec_label_pc_11638, label %dec_label_pc_114ec

dec_label_pc_114ec:                               ; preds = %dec_label_pc_114d8
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r1.global-to-local, align 4
  %v4_114f4 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_114f4, i32* @r0, align 4
  %v0_114f8 = call i32 @function_12268()
  store i32 %v0_114f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11638

dec_label_pc_11500:                               ; preds = %dec_label_pc_1164c
  %v1_11500 = add i32 %v3_1164c, 4
  %v2_11500 = inttoptr i32 %v1_11500 to i32*
  %v3_11500 = load i32, i32* %v2_11500, align 4
  store i32 %v3_11500, i32* %r3.global-to-local, align 4
  %v0_11504 = load i32, i32* @sl, align 4
  %v1_11508 = and i32 %v3_11500, -4
  store i32 %v1_11508, i32* %r4.global-to-local, align 4
  %v1_1150c = add i32 %v3_1164c, 12
  %v2_1150c = inttoptr i32 %v1_1150c to i32*
  %v3_1150c = load i32, i32* %v2_1150c, align 4
  store i32 %v3_1150c, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_11504, 255
  br i1 %tmp203, label %dec_label_pc_11568, label %dec_label_pc_11514

dec_label_pc_11514:                               ; preds = %dec_label_pc_11500
  %v9_11514 = icmp eq i32 %v3_1150c, %v0_1156c
  br i1 %v9_11514, label %dec_label_pc_1151c, label %dec_label_pc_11568

dec_label_pc_1151c:                               ; preds = %dec_label_pc_11514
  %v0_1151c = load i32, i32* @sb, align 4
  %v1_1151c = add i32 %v0_1151c, 48
  %v2_1151c = inttoptr i32 %v1_1151c to i32*
  %v3_1151c = load i32, i32* %v2_1151c, align 4
  store i32 %v3_1151c, i32* %r3.global-to-local, align 4
  %v9_11520 = icmp eq i32 %v3_1164c, %v3_1151c
  br i1 %v9_11520, label %dec_label_pc_11528, label %dec_label_pc_11568

dec_label_pc_11528:                               ; preds = %dec_label_pc_1151c
  %v1_11528 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_11508, %v1_11528
  br i1 %tmp204, label %dec_label_pc_11530, label %dec_label_pc_11568

dec_label_pc_11530:                               ; preds = %dec_label_pc_11528
  %v2_11530 = sub i32 %v1_11508, %v0_11504
  store i32 %v2_11530, i32* %r2.global-to-local, align 4
  %v2_11534 = add i32 %v0_11504, %v3_1164c
  store i32 %v2_11534, i32* %r3.global-to-local, align 4
  %v1_11538 = or i32 %v0_11504, 1
  store i32 %v1_11538, i32* %r0.global-to-local, align 4
  %v1_1153c = or i32 %v2_11530, 1
  store i32 %v1_1153c, i32* %r1.global-to-local, align 4
  %v1_11540 = add i32 %v3_1164c, 8
  store i32 %v1_11540, i32* %r4.global-to-local, align 4
  %v2_11544 = add i32 %v0_1156c, 8
  %v3_11544 = inttoptr i32 %v2_11544 to i32*
  store i32 %v2_11534, i32* %v3_11544, align 4
  %v0_11548 = load i32, i32* %r3.global-to-local, align 4
  %v1_11548 = load i32, i32* %ip.global-to-local, align 4
  %v2_11548 = add i32 %v1_11548, 12
  %v3_11548 = inttoptr i32 %v2_11548 to i32*
  store i32 %v0_11548, i32* %v3_11548, align 4
  %v0_1154c = load i32, i32* %r0.global-to-local, align 4
  %v1_1154c = load i32, i32* @r6, align 4
  %v2_1154c = add i32 %v1_1154c, 4
  %v3_1154c = inttoptr i32 %v2_1154c to i32*
  store i32 %v0_1154c, i32* %v3_1154c, align 4
  %v0_11550 = load i32, i32* %r3.global-to-local, align 4
  %v1_11550 = load i32, i32* @sb, align 4
  %v2_11550 = add i32 %v1_11550, 48
  %v3_11550 = inttoptr i32 %v2_11550 to i32*
  store i32 %v0_11550, i32* %v3_11550, align 4
  %v0_11554 = load i32, i32* %r2.global-to-local, align 4
  %v1_11554 = load i32, i32* %r3.global-to-local, align 4
  %v3_11554 = add i32 %v1_11554, %v0_11554
  %v4_11554 = inttoptr i32 %v3_11554 to i32*
  store i32 %v0_11554, i32* %v4_11554, align 4
  %v0_11558 = load i32, i32* %r1.global-to-local, align 4
  %v1_11558 = load i32, i32* %r3.global-to-local, align 4
  %v2_11558 = add i32 %v1_11558, 4
  %v3_11558 = inttoptr i32 %v2_11558 to i32*
  store i32 %v0_11558, i32* %v3_11558, align 4
  %v0_1155c = load i32, i32* %ip.global-to-local, align 4
  %v1_1155c = load i32, i32* %r3.global-to-local, align 4
  %v2_1155c = add i32 %v1_1155c, 12
  %v3_1155c = inttoptr i32 %v2_1155c to i32*
  store i32 %v0_1155c, i32* %v3_1155c, align 4
  %v0_11560 = load i32, i32* %ip.global-to-local, align 4
  %v1_11560 = load i32, i32* %r3.global-to-local, align 4
  %v2_11560 = add i32 %v1_11560, 8
  %v3_11560 = inttoptr i32 %v2_11560 to i32*
  store i32 %v0_11560, i32* %v3_11560, align 4
  br label %dec_label_pc_11c88

dec_label_pc_11568:                               ; preds = %dec_label_pc_11528, %dec_label_pc_1151c, %dec_label_pc_11514, %dec_label_pc_11500
  %v9_11568 = icmp eq i32 %v1_11508, %v0_11504
  %v2_1156c = add i32 %v3_1150c, 8
  %v3_1156c = inttoptr i32 %v2_1156c to i32*
  store i32 %v0_1156c, i32* %v3_1156c, align 4
  %v0_11570 = load i32, i32* %ip.global-to-local, align 4
  %v1_11570 = load i32, i32* %r5.global-to-local, align 4
  %v2_11570 = add i32 %v1_11570, 12
  %v3_11570 = inttoptr i32 %v2_11570 to i32*
  store i32 %v0_11570, i32* %v3_11570, align 4
  br i1 %v9_11568, label %dec_label_pc_116c8.loopexit, label %dec_label_pc_11584

dec_label_pc_11584:                               ; preds = %dec_label_pc_11568
  %v0_11584 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_11584, 255
  br i1 %tmp205, label %dec_label_pc_115a8, label %dec_label_pc_1158c

dec_label_pc_1158c:                               ; preds = %dec_label_pc_11584
  store i32 123612, i32* %r2.global-to-local, align 4
  %v1_11590 = load i32, i32* %r8.global-to-local, align 4
  %v2_11590 = add i32 %v1_11590, 123612
  %v3_11590 = inttoptr i32 %v2_11590 to i32*
  %v4_11590 = load i32, i32* %v3_11590, align 4
  %v3_11594 = udiv i32 %v0_11584, 8
  store i32 %v3_11594, i32* %r0.global-to-local, align 4
  %v4_11598 = mul nuw i32 %v3_11594, 8
  %v5_11598 = add i32 %v4_11590, %v4_11598
  store i32 %v5_11598, i32* %r3.global-to-local, align 4
  %v1_1159c = add i32 %v5_11598, 44
  store i32 %v1_1159c, i32* %ip.global-to-local, align 4
  %v1_115a0 = add i32 %v5_11598, 52
  %v2_115a0 = inttoptr i32 %v1_115a0 to i32*
  %v3_115a0 = load i32, i32* %v2_115a0, align 4
  store i32 %v3_115a0, i32* @lr, align 4
  br label %dec_label_pc_11600

dec_label_pc_115a8:                               ; preds = %dec_label_pc_11584
  store i32 %v0_11584, i32* %r0.global-to-local, align 4
  %v1_115ac = call i32 @function_11338(i32 %v0_11584)
  store i32 %v1_115ac, i32* %r0.global-to-local, align 4
  store i32 123612, i32* %ip.global-to-local, align 4
  %v1_115b4 = load i32, i32* %r8.global-to-local, align 4
  %v2_115b4 = add i32 %v1_115b4, 123612
  %v3_115b4 = inttoptr i32 %v2_115b4 to i32*
  %v4_115b4 = load i32, i32* %v3_115b4, align 4
  %v4_115b8 = mul i32 %v1_115ac, 8
  %v5_115b8 = add i32 %v4_115b4, %v4_115b8
  store i32 %v5_115b8, i32* %r3.global-to-local, align 4
  %v1_115bc = add i32 %v5_115b8, 44
  store i32 %v1_115bc, i32* %ip.global-to-local, align 4
  %v1_115c0 = add i32 %v5_115b8, 52
  %v2_115c0 = inttoptr i32 %v1_115c0 to i32*
  %v3_115c0 = load i32, i32* %v2_115c0, align 4
  store i32 %v3_115c0, i32* @lr, align 4
  %v9_115c4 = icmp eq i32 %v3_115c0, %v1_115bc
  br i1 %v9_115c4, label %dec_label_pc_11600, label %dec_label_pc_115cc

dec_label_pc_115cc:                               ; preds = %dec_label_pc_115a8
  %v1_115cc = add i32 %v5_115b8, 56
  %v2_115cc = inttoptr i32 %v1_115cc to i32*
  %v3_115cc = load i32, i32* %v2_115cc, align 4
  store i32 %v3_115cc, i32* %r1.global-to-local, align 4
  %v1_115d0 = add i32 %v3_115cc, 4
  %v2_115d0 = inttoptr i32 %v1_115d0 to i32*
  %v3_115d0 = load i32, i32* %v2_115d0, align 4
  store i32 %v3_115d0, i32* %r3.global-to-local, align 4
  %v0_115d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_115d4 = icmp ult i32 %v0_115d4, %v3_115d0
  br i1 %v3_115d4, label %.thread, label %dec_label_pc_115f0.preheader

.thread:                                          ; preds = %dec_label_pc_115cc
  store i32 %v1_115bc, i32* @lr, align 4
  store i32 %v3_115cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11600

dec_label_pc_115f0.preheader:                     ; preds = %dec_label_pc_115cc
  %v2_115dc = or i32 %v0_115d4, 1
  store i32 %v2_115dc, i32* %r2.global-to-local, align 4
  %v1_115f0179 = add i32 %v3_115c0, 4
  %v2_115f0180 = inttoptr i32 %v1_115f0179 to i32*
  %v3_115f0181 = load i32, i32* %v2_115f0180, align 4
  store i32 %v3_115f0181, i32* %r3.global-to-local, align 4
  %v3_115f4183 = icmp ult i32 %v2_115dc, %v3_115f0181
  br i1 %v3_115f4183, label %dec_label_pc_115ec, label %dec_label_pc_115fc

dec_label_pc_115ec:                               ; preds = %dec_label_pc_115f0.preheader, %dec_label_pc_115ec
  %v0_115fc184 = phi i32 [ %v3_115ec, %dec_label_pc_115ec ], [ %v3_115c0, %dec_label_pc_115f0.preheader ]
  %v1_115ec = add i32 %v0_115fc184, 8
  %v2_115ec = inttoptr i32 %v1_115ec to i32*
  %v3_115ec = load i32, i32* %v2_115ec, align 4
  store i32 %v3_115ec, i32* @lr, align 4
  %v1_115f0 = add i32 %v3_115ec, 4
  %v2_115f0 = inttoptr i32 %v1_115f0 to i32*
  %v3_115f0 = load i32, i32* %v2_115f0, align 4
  store i32 %v3_115f0, i32* %r3.global-to-local, align 4
  %v3_115f4 = icmp ult i32 %v2_115dc, %v3_115f0
  br i1 %v3_115f4, label %dec_label_pc_115ec, label %dec_label_pc_115fc

dec_label_pc_115fc:                               ; preds = %dec_label_pc_115ec, %dec_label_pc_115f0.preheader
  %v0_115fc.lcssa = phi i32 [ %v3_115c0, %dec_label_pc_115f0.preheader ], [ %v3_115ec, %dec_label_pc_115ec ]
  %v1_115fc = add i32 %v0_115fc.lcssa, 12
  %v2_115fc = inttoptr i32 %v1_115fc to i32*
  %v3_115fc = load i32, i32* %v2_115fc, align 4
  store i32 %v3_115fc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11600

dec_label_pc_11600:                               ; preds = %.thread, %dec_label_pc_115a8, %dec_label_pc_1158c, %dec_label_pc_115fc
  %v0_11620 = phi i32 [ %v1_115bc, %dec_label_pc_115a8 ], [ %v1_1159c, %dec_label_pc_1158c ], [ %v3_115fc, %dec_label_pc_115fc ], [ %v3_115cc, %.thread ]
  %v0_11614 = phi i32 [ %v1_115ac, %dec_label_pc_115a8 ], [ %v3_11594, %dec_label_pc_1158c ], [ %v1_115ac, %dec_label_pc_115fc ], [ %v1_115ac, %.thread ]
  %v1_11604 = phi i32 [ %v1_115b4, %dec_label_pc_115a8 ], [ %v1_11590, %dec_label_pc_1158c ], [ %v1_115b4, %dec_label_pc_115fc ], [ %v1_115b4, %.thread ]
  store i32 123612, i32* %r2.global-to-local, align 4
  %v2_11604 = add i32 %v1_11604, 123612
  %v3_11604 = inttoptr i32 %v2_11604 to i32*
  %v4_11604 = load i32, i32* %v3_11604, align 4
  %v3_11608 = sdiv i32 %v0_11614, 32
  store i32 %v3_11608, i32* %r3.global-to-local, align 4
  %v4_1160c = mul nsw i32 %v3_11608, 4
  %v5_1160c = add i32 %v4_11604, %v4_1160c
  store i32 %v5_1160c, i32* %r1.global-to-local, align 4
  %v1_11610 = add i32 %v5_1160c, 820
  %v2_11610 = inttoptr i32 %v1_11610 to i32*
  %v3_11610 = load i32, i32* %v2_11610, align 4
  %v1_11614 = urem i32 %v0_11614, 32
  store i32 %v1_11614, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_1161c = shl i32 1, %v1_11614
  %v8_1161c = or i32 %v3_11610, %v7_1161c
  store i32 %v8_1161c, i32* %r3.global-to-local, align 4
  %v1_11620 = load i32, i32* @r6, align 4
  %v2_11620 = add i32 %v1_11620, 12
  %v3_11620 = inttoptr i32 %v2_11620 to i32*
  store i32 %v0_11620, i32* %v3_11620, align 4
  %v0_11624 = load i32, i32* @lr, align 4
  %v1_11624 = load i32, i32* @r6, align 4
  %v2_11624 = add i32 %v1_11624, 8
  %v3_11624 = inttoptr i32 %v2_11624 to i32*
  store i32 %v0_11624, i32* %v3_11624, align 4
  %v0_11628 = load i32, i32* %r3.global-to-local, align 4
  %v1_11628 = load i32, i32* %r1.global-to-local, align 4
  %v2_11628 = add i32 %v1_11628, 820
  %v3_11628 = inttoptr i32 %v2_11628 to i32*
  store i32 %v0_11628, i32* %v3_11628, align 4
  %v0_1162c = load i32, i32* @r6, align 4
  %v1_1162c = load i32, i32* @lr, align 4
  %v2_1162c = add i32 %v1_1162c, 12
  %v3_1162c = inttoptr i32 %v2_1162c to i32*
  store i32 %v0_1162c, i32* %v3_1162c, align 4
  %v0_11630 = load i32, i32* @r6, align 4
  %v1_11630 = load i32, i32* %ip.global-to-local, align 4
  %v2_11630 = add i32 %v1_11630, 8
  %v3_11630 = inttoptr i32 %v2_11630 to i32*
  store i32 %v0_11630, i32* %v3_11630, align 4
  %v0_1164c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1164c

dec_label_pc_11638:                               ; preds = %dec_label_pc_11490, %dec_label_pc_114d8, %dec_label_pc_114ec
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 123612, i32* %r1.global-to-local, align 4
  %v4_11640 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_11640, i32* @sb, align 4
  %v0_11644 = load i32, i32* @sl, align 4
  %v1_11644 = add i32 %v0_11644, 16
  store i32 %v1_11644, i32* @fp, align 4
  %v1_11648 = add i32 %v4_11640, 52
  store i32 %v1_11648, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1164c

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11600, %dec_label_pc_11638
  %v0_1156c = phi i32 [ %v0_1164c.pre, %dec_label_pc_11600 ], [ %v1_11648, %dec_label_pc_11638 ]
  %v1_1164c = add i32 %v0_1156c, 12
  %v2_1164c = inttoptr i32 %v1_1164c to i32*
  %v3_1164c = load i32, i32* %v2_1164c, align 4
  store i32 %v3_1164c, i32* @r6, align 4
  %v9_11650 = icmp eq i32 %v3_1164c, %v0_1156c
  br i1 %v9_11650, label %dec_label_pc_11658, label %dec_label_pc_11500

dec_label_pc_11658:                               ; preds = %dec_label_pc_1164c
  %v0_11658 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_11658, 256
  %v0_11710.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_11658.dec_label_pc_11710_crit_edge, label %dec_label_pc_11660

dec_label_pc_11658.dec_label_pc_11710_crit_edge:  ; preds = %dec_label_pc_11658
  %.pre200 = mul i32 %v0_11710.pre, 8
  br label %dec_label_pc_11710

dec_label_pc_11660:                               ; preds = %dec_label_pc_11658
  %v4_11660 = mul i32 %v0_11710.pre, 8
  %v5_11660 = add i32 %v4_11660, %v0_1156c
  store i32 %v5_11660, i32* %r3.global-to-local, align 4
  %v1_11664 = add i32 %v5_11660, -8
  store i32 %v1_11664, i32* %r1.global-to-local, align 4
  %v1_11668 = add i32 %v5_11660, 4
  %v2_11668 = inttoptr i32 %v1_11668 to i32*
  %storemerge.pre = load i32, i32* %v2_11668, align 4
  br label %dec_label_pc_11708

dec_label_pc_11670:                               ; preds = %dec_label_pc_11708
  %v1_11670 = add i32 %v1_11698, 4
  %v2_11670 = inttoptr i32 %v1_11670 to i32*
  %v3_11670 = load i32, i32* %v2_11670, align 4
  store i32 %v3_11670, i32* %r3.global-to-local, align 4
  %v1_11674 = and i32 %v3_11670, -4
  store i32 %v1_11674, i32* %r2.global-to-local, align 4
  %v3_11678 = icmp ult i32 %v1_11674, %v0_11658
  %v1_1167c = add i32 %v1_11698, 12
  %v2_1167c = inttoptr i32 %v1_1167c to i32*
  %v3_1167c = load i32, i32* %v2_1167c, align 4
  store i32 %v3_1167c, i32* %r0.global-to-local, align 4
  br i1 %v3_11678, label %dec_label_pc_11708, label %dec_label_pc_11684

dec_label_pc_11684:                               ; preds = %dec_label_pc_11670
  %v1_11684 = add i32 %v1_11698, 8
  %v2_11684 = inttoptr i32 %v1_11684 to i32*
  %v3_11684 = load i32, i32* %v2_11684, align 4
  store i32 %v3_11684, i32* %r1.global-to-local, align 4
  %v1_11688 = add i32 %v3_11684, 12
  %v2_11688 = inttoptr i32 %v1_11688 to i32*
  %v3_11688 = load i32, i32* %v2_11688, align 4
  store i32 %v3_11688, i32* %r3.global-to-local, align 4
  %v9_1168c = icmp eq i32 %v3_11688, %v1_11698
  br i1 %v9_1168c, label %dec_label_pc_11694, label %dec_label_pc_116a0

dec_label_pc_11694:                               ; preds = %dec_label_pc_11684
  %v1_11694 = add i32 %v3_1167c, 8
  %v2_11694 = inttoptr i32 %v1_11694 to i32*
  %v3_11694 = load i32, i32* %v2_11694, align 4
  store i32 %v3_11694, i32* %r3.global-to-local, align 4
  %v9_11698 = icmp eq i32 %v3_11694, %v1_11698
  br i1 %v9_11698, label %dec_label_pc_116a4, label %dec_label_pc_116a0

dec_label_pc_116a0:                               ; preds = %dec_label_pc_11684, %dec_label_pc_11694
  %v0_116a0 = call i32 @function_12698()
  store i32 %v0_116a0, i32* %r0.global-to-local, align 4
  %v0_116a4.pre = load i32, i32* @sl, align 4
  %v1_116a4.pre = load i32, i32* @r2, align 4
  %v0_116ac.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_116a4

dec_label_pc_116a4:                               ; preds = %dec_label_pc_11694, %dec_label_pc_116a0
  %v1_116ac = phi i32 [ %v3_1167c, %dec_label_pc_11694 ], [ %v0_116a0, %dec_label_pc_116a0 ]
  %v0_116ac = phi i32 [ %v3_11684, %dec_label_pc_11694 ], [ %v0_116ac.pre, %dec_label_pc_116a0 ]
  %v1_116a4 = phi i32 [ %v1_11674, %dec_label_pc_11694 ], [ %v1_116a4.pre, %dec_label_pc_116a0 ]
  %v0_116a4 = phi i32 [ %v0_11658, %dec_label_pc_11694 ], [ %v0_116a4.pre, %dec_label_pc_116a0 ]
  %v2_116a4 = sub i32 %v1_116a4, %v0_116a4
  store i32 %v2_116a4, i32* %lr.global-to-local, align 4
  %v2_116ac = add i32 %v1_116ac, 8
  %v3_116ac = inttoptr i32 %v2_116ac to i32*
  store i32 %v0_116ac, i32* %v3_116ac, align 4
  %v0_116b0 = load i32, i32* %r0.global-to-local, align 4
  %v1_116b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_116b0 = add i32 %v1_116b0, 12
  %v3_116b0 = inttoptr i32 %v2_116b0 to i32*
  store i32 %v0_116b0, i32* %v3_116b0, align 4
  %v0_116b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_116b4 = add i32 %v0_116b4, 8
  store i32 %v1_116b4, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_116a4, 15
  br i1 %tmp207, label %dec_label_pc_116d4, label %dec_label_pc_116bc

dec_label_pc_116bc:                               ; preds = %dec_label_pc_116a4
  %v1_116bc = load i32, i32* %r2.global-to-local, align 4
  %v2_116bc = add i32 %v1_116bc, %v0_116b4
  store i32 %v2_116bc, i32* %r2.global-to-local, align 4
  %v1_116c0 = add i32 %v2_116bc, 4
  %v2_116c0 = inttoptr i32 %v1_116c0 to i32*
  %v3_116c0 = load i32, i32* %v2_116c0, align 4
  store i32 %v3_116c0, i32* %r3.global-to-local, align 4
  store i32 %v1_116b4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_116c8

dec_label_pc_116c8.loopexit:                      ; preds = %dec_label_pc_11568
  %v1_11574 = load i32, i32* @r6, align 4
  %v2_11574 = load i32, i32* @sl, align 4
  %v3_11574 = add i32 %v2_11574, %v1_11574
  store i32 %v3_11574, i32* %r2.global-to-local, align 4
  %v2_11578 = add i32 %v3_11574, 4
  %v3_11578 = inttoptr i32 %v2_11578 to i32*
  %v4_11578 = load i32, i32* %v3_11578, align 4
  store i32 %v4_11578, i32* %r3.global-to-local, align 4
  %v2_1157c = add i32 %v1_11574, 8
  store i32 %v2_1157c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_116c8

dec_label_pc_116c8:                               ; preds = %.dec_label_pc_116c8_crit_edge, %dec_label_pc_116c8.loopexit, %dec_label_pc_116bc
  %v1_116cc = phi i32 [ %v4_117f0, %.dec_label_pc_116c8_crit_edge ], [ %v3_11574, %dec_label_pc_116c8.loopexit ], [ %v2_116bc, %dec_label_pc_116bc ]
  %v0_116c8 = phi i32 [ %v7_117f0, %.dec_label_pc_116c8_crit_edge ], [ %v4_11578, %dec_label_pc_116c8.loopexit ], [ %v3_116c0, %dec_label_pc_116bc ]
  %v1_116c8 = or i32 %v0_116c8, 1
  store i32 %v1_116c8, i32* %r3.global-to-local, align 4
  %v2_116cc = add i32 %v1_116cc, 4
  %v3_116cc = inttoptr i32 %v2_116cc to i32*
  store i32 %v1_116c8, i32* %v3_116cc, align 4
  br label %dec_label_pc_11c88

dec_label_pc_116d4:                               ; preds = %dec_label_pc_116a4
  %v1_116d4 = load i32, i32* @sl, align 4
  %v2_116d4 = add i32 %v1_116d4, %v0_116b4
  store i32 %v2_116d4, i32* %r2.global-to-local, align 4
  %v1_116d8 = or i32 %v1_116d4, 1
  store i32 %v1_116d8, i32* %r3.global-to-local, align 4
  %v0_116dc = load i32, i32* %lr.global-to-local, align 4
  %v1_116dc = or i32 %v0_116dc, 1
  store i32 %v1_116dc, i32* %r1.global-to-local, align 4
  store i32 %v1_116b4, i32* %r4.global-to-local, align 4
  %v2_116e4 = add i32 %v0_116b4, 4
  %v3_116e4 = inttoptr i32 %v2_116e4 to i32*
  store i32 %v1_116d8, i32* %v3_116e4, align 4
  %v0_116e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_116e8 = load i32, i32* @r6, align 4
  %v2_116e8 = add i32 %v1_116e8, 8
  %v3_116e8 = inttoptr i32 %v2_116e8 to i32*
  store i32 %v0_116e8, i32* %v3_116e8, align 4
  %v0_116ec = load i32, i32* %r2.global-to-local, align 4
  %v1_116ec = load i32, i32* @r6, align 4
  %v2_116ec = add i32 %v1_116ec, 12
  %v3_116ec = inttoptr i32 %v2_116ec to i32*
  store i32 %v0_116ec, i32* %v3_116ec, align 4
  %v0_116f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_116f0 = load i32, i32* %r2.global-to-local, align 4
  %v3_116f0 = add i32 %v1_116f0, %v0_116f0
  %v4_116f0 = inttoptr i32 %v3_116f0 to i32*
  store i32 %v0_116f0, i32* %v4_116f0, align 4
  %v0_116f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_116f4 = load i32, i32* %r2.global-to-local, align 4
  %v2_116f4 = add i32 %v1_116f4, 4
  %v3_116f4 = inttoptr i32 %v2_116f4 to i32*
  store i32 %v0_116f4, i32* %v3_116f4, align 4
  %v0_116f8 = load i32, i32* @r6, align 4
  %v1_116f8 = load i32, i32* %r2.global-to-local, align 4
  %v2_116f8 = add i32 %v1_116f8, 12
  %v3_116f8 = inttoptr i32 %v2_116f8 to i32*
  store i32 %v0_116f8, i32* %v3_116f8, align 4
  %v0_116fc = load i32, i32* @r6, align 4
  %v1_116fc = load i32, i32* %r2.global-to-local, align 4
  %v2_116fc = add i32 %v1_116fc, 8
  %v3_116fc = inttoptr i32 %v2_116fc to i32*
  store i32 %v0_116fc, i32* %v3_116fc, align 4
  br label %dec_label_pc_11c88

dec_label_pc_11708:                               ; preds = %dec_label_pc_11670, %dec_label_pc_11660
  %v1_11698 = phi i32 [ %storemerge.pre, %dec_label_pc_11660 ], [ %v3_1167c, %dec_label_pc_11670 ]
  store i32 %v1_11698, i32* %ip.global-to-local, align 4
  %v9_11708 = icmp eq i32 %v1_11698, %v1_11664
  br i1 %v9_11708, label %dec_label_pc_11710.loopexit, label %dec_label_pc_11670

dec_label_pc_11710.loopexit:                      ; preds = %dec_label_pc_11708
  br label %dec_label_pc_11710

dec_label_pc_11710:                               ; preds = %dec_label_pc_11658.dec_label_pc_11710_crit_edge, %dec_label_pc_11710.loopexit
  %v4_11740.pre-phi = phi i32 [ %.pre200, %dec_label_pc_11658.dec_label_pc_11710_crit_edge ], [ %v4_11660, %dec_label_pc_11710.loopexit ]
  %v1_11710 = add i32 %v0_11710.pre, 1
  store i32 %v1_11710, i32* %r2.global-to-local, align 4
  %v1_11714 = urem i32 %v1_11710, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 123612, i32* %r0.global-to-local, align 4
  %v6_11720 = shl i32 1, %v1_11714
  store i32 %v6_11720, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11728 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_11728, i32* %r3.global-to-local, align 4
  %v3_1172c = udiv i32 %v1_11710, 32
  store i32 %v3_1172c, i32* @r5, align 4
  %v4_11730 = mul nuw nsw i32 %v3_1172c, 4
  %v5_11730 = add i32 %v4_11728, %v4_11730
  store i32 %v5_11730, i32* %r2.global-to-local, align 4
  %v1_11734 = add i32 %v5_11730, 820
  %v2_11734 = inttoptr i32 %v1_11734 to i32*
  %v3_11734 = load i32, i32* %v2_11734, align 4
  store i32 %v3_11734, i32* @r4, align 4
  %v1_11738 = add i32 %v4_11728, 52
  store i32 %v1_11738, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_11740 = add i32 %v1_11738, %v4_11740.pre-phi
  store i32 %v5_11740, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11744

dec_label_pc_11744:                               ; preds = %dec_label_pc_117ac, %dec_label_pc_11710
  %v1_1174c = phi i32 [ %v1_1174c.pre, %dec_label_pc_117ac ], [ %v3_11734, %dec_label_pc_11710 ]
  %v0_1174c = phi i32 [ %v0_11744.pre, %dec_label_pc_117ac ], [ %v6_11720, %dec_label_pc_11710 ]
  %v1_11744 = sub i32 1, %v0_1174c
  %v2_11744 = icmp ult i32 %v0_1174c, 2
  %v1_11744. = select i1 %v2_11744, i32 %v1_11744, i32 0
  store i32 %v1_11744., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_1174c, %v1_1174c
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_11744
  %v5_11750 = or i32 %v1_11744., 1
  store i32 %v5_11750, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1175c.preheader

bb142:                                            ; preds = %dec_label_pc_11744
  %v2_11754 = icmp eq i32 %v1_11744., 0
  br i1 %v2_11754, label %.dec_label_pc_11798.preheader_crit_edge, label %dec_label_pc_1175c.preheader

.dec_label_pc_11798.preheader_crit_edge:          ; preds = %bb142
  %v0_1179054.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11798.preheader

dec_label_pc_1175c.preheader:                     ; preds = %bb142, %.thread12
  %v0_1175c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1175c

dec_label_pc_1175c:                               ; preds = %dec_label_pc_1175c.preheader, %dec_label_pc_11768
  %v0_1175c = phi i32 [ %v0_1175c.pre, %dec_label_pc_1175c.preheader ], [ %v1_1175c, %dec_label_pc_11768 ]
  %v1_1175c = add i32 %v0_1175c, 1
  store i32 %v1_1175c, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_1175c, 2
  br i1 %tmp208, label %dec_label_pc_1183c.loopexit, label %dec_label_pc_11768

dec_label_pc_11768:                               ; preds = %dec_label_pc_1175c
  store i32 123612, i32* %r3.global-to-local, align 4
  %v1_1176c = load i32, i32* @r8, align 4
  %v2_1176c = add i32 %v1_1176c, 123612
  %v3_1176c = inttoptr i32 %v2_1176c to i32*
  %v4_1176c = load i32, i32* %v3_1176c, align 4
  store i32 %v4_1176c, i32* %r2.global-to-local, align 4
  %v4_11770 = mul i32 %v1_1175c, 4
  %v5_11770 = add i32 %v4_1176c, %v4_11770
  store i32 %v5_11770, i32* %r3.global-to-local, align 4
  %v1_11774 = add i32 %v5_11770, 820
  %v2_11774 = inttoptr i32 %v1_11774 to i32*
  %v3_11774 = load i32, i32* %v2_11774, align 4
  store i32 %v3_11774, i32* @r4, align 4
  %v2_11778 = icmp eq i32 %v3_11774, 0
  br i1 %v2_11778, label %dec_label_pc_1175c, label %dec_label_pc_11780

dec_label_pc_11780:                               ; preds = %dec_label_pc_11768
  %v4_11780 = mul i32 %v1_1175c, 256
  %v5_11780 = add i32 %v4_1176c, %v4_11780
  store i32 %v5_11780, i32* %r3.global-to-local, align 4
  %v1_11784 = add i32 %v5_11780, 44
  store i32 %v1_11784, i32* %r0.global-to-local, align 4
  %v0_11788 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11788, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11798.preheader

dec_label_pc_11798.preheader:                     ; preds = %.dec_label_pc_11798.preheader_crit_edge, %dec_label_pc_11780
  %v0_1179054 = phi i32 [ %v1_11784, %dec_label_pc_11780 ], [ %v0_1179054.pre, %.dec_label_pc_11798.preheader_crit_edge ]
  %v0_117b4 = phi i32 [ %v3_11774, %dec_label_pc_11780 ], [ %v1_1174c, %.dec_label_pc_11798.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_11788, %dec_label_pc_11780 ], [ %v0_1174c, %.dec_label_pc_11798.preheader_crit_edge ]
  %v2_1179851 = and i32 %ip.promoted, %v0_117b4
  %v4_1179853 = icmp eq i32 %v2_1179851, 0
  br i1 %v4_1179853, label %dec_label_pc_11790, label %dec_label_pc_117a0

dec_label_pc_11790:                               ; preds = %dec_label_pc_11798.preheader, %dec_label_pc_11790
  %v2_1179456 = phi i32 [ %v2_11794, %dec_label_pc_11790 ], [ %ip.promoted, %dec_label_pc_11798.preheader ]
  %v0_1179055 = phi i32 [ %v1_11790, %dec_label_pc_11790 ], [ %v0_1179054, %dec_label_pc_11798.preheader ]
  %v1_11790 = add i32 %v0_1179055, 8
  %v2_11794 = mul i32 %v2_1179456, 2
  %v2_11798 = and i32 %v2_11794, %v0_117b4
  %v4_11798 = icmp eq i32 %v2_11798, 0
  br i1 %v4_11798, label %dec_label_pc_11790, label %dec_label_pc_11798.dec_label_pc_117a0_crit_edge

dec_label_pc_11798.dec_label_pc_117a0_crit_edge:  ; preds = %dec_label_pc_11790
  store i32 %v1_11790, i32* %r0.global-to-local, align 4
  store i32 %v2_11794, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_117a0

dec_label_pc_117a0:                               ; preds = %dec_label_pc_11798.dec_label_pc_117a0_crit_edge, %dec_label_pc_11798.preheader
  %v0_117c0 = phi i32 [ %v2_11794, %dec_label_pc_11798.dec_label_pc_117a0_crit_edge ], [ %ip.promoted, %dec_label_pc_11798.preheader ]
  %v0_117e4 = phi i32 [ %v1_11790, %dec_label_pc_11798.dec_label_pc_117a0_crit_edge ], [ %v0_1179054, %dec_label_pc_11798.preheader ]
  %v1_117a0 = add i32 %v0_117e4, 12
  %v2_117a0 = inttoptr i32 %v1_117a0 to i32*
  %v3_117a0 = load i32, i32* %v2_117a0, align 4
  store i32 %v3_117a0, i32* @lr, align 4
  %v9_117a4 = icmp eq i32 %v3_117a0, %v0_117e4
  br i1 %v9_117a4, label %dec_label_pc_117ac, label %dec_label_pc_117cc

dec_label_pc_117ac:                               ; preds = %dec_label_pc_117a0
  store i32 123612, i32* %r0.global-to-local, align 4
  %v1_117b0 = load i32, i32* @r8, align 4
  %v2_117b0 = add i32 %v1_117b0, 123612
  %v3_117b0 = inttoptr i32 %v2_117b0 to i32*
  %v4_117b0 = load i32, i32* %v3_117b0, align 4
  %v2_117b4 = sub i32 -1, %v0_117c0
  %v3_117b4 = and i32 %v0_117b4, %v2_117b4
  store i32 %v3_117b4, i32* @r4, align 4
  %v1_117b8 = load i32, i32* @r5, align 4
  %v4_117b8 = mul i32 %v1_117b8, 4
  %v5_117b8 = add i32 %v4_117b8, %v4_117b0
  store i32 %v5_117b8, i32* %r3.global-to-local, align 4
  %v1_117bc = add i32 %v0_117e4, 8
  store i32 %v1_117bc, i32* %r0.global-to-local, align 4
  %v2_117c0 = mul i32 %v0_117c0, 2
  store i32 %v2_117c0, i32* %ip.global-to-local, align 4
  %v2_117c4 = add i32 %v5_117b8, 820
  %v3_117c4 = inttoptr i32 %v2_117c4 to i32*
  store i32 %v3_117b4, i32* %v3_117c4, align 4
  %v0_11744.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_1174c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11744

dec_label_pc_117cc:                               ; preds = %dec_label_pc_117a0
  %v1_117cc = add i32 %v3_117a0, 4
  %v2_117cc = inttoptr i32 %v1_117cc to i32*
  %v3_117cc = load i32, i32* %v2_117cc, align 4
  store i32 %v3_117cc, i32* %r3.global-to-local, align 4
  %v1_117d0 = and i32 %v3_117cc, -4
  store i32 %v1_117d0, i32* %r2.global-to-local, align 4
  %v0_117d4 = load i32, i32* @sl, align 4
  %v2_117d4 = sub i32 %v1_117d0, %v0_117d4
  store i32 %v2_117d4, i32* %ip.global-to-local, align 4
  %v1_117d8 = add i32 %v3_117a0, 12
  %v2_117d8 = inttoptr i32 %v1_117d8 to i32*
  %v3_117d8 = load i32, i32* %v2_117d8, align 4
  store i32 %v3_117d8, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_117d4, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_117cc
  %v6_117e0 = add i32 %v1_117d0, %v3_117a0
  store i32 %v6_117e0, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_117cc, %bb143
  %v2_117e4 = add i32 %v3_117d8, 8
  %v3_117e4 = inttoptr i32 %v2_117e4 to i32*
  store i32 %v0_117e4, i32* %v3_117e4, align 4
  %v0_117e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_117e8 = load i32, i32* %r0.global-to-local, align 4
  %v2_117e8 = add i32 %v1_117e8, 12
  %v3_117e8 = inttoptr i32 %v2_117e8 to i32*
  store i32 %v0_117e8, i32* %v3_117e8, align 4
  %v4_117ec = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_116c8_crit_edge, label %dec_label_pc_117f8

.dec_label_pc_116c8_crit_edge:                    ; preds = %bb144
  %v5_117ec = add i32 %v4_117ec, 8
  store i32 %v5_117ec, i32* %r4.global-to-local, align 4
  %v4_117f0 = load i32, i32* %r2.global-to-local, align 4
  %v5_117f0 = add i32 %v4_117f0, 4
  %v6_117f0 = inttoptr i32 %v5_117f0 to i32*
  %v7_117f0 = load i32, i32* %v6_117f0, align 4
  store i32 %v7_117f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_116c8

dec_label_pc_117f8:                               ; preds = %bb144
  %v1_117f8 = load i32, i32* @sl, align 4
  %v2_117f8 = add i32 %v1_117f8, %v4_117ec
  store i32 %v2_117f8, i32* %r1.global-to-local, align 4
  %v1_11800 = load i32, i32* @r6, align 4
  %v2_11800 = add i32 %v1_11800, 8
  %v3_11800 = inttoptr i32 %v2_11800 to i32*
  store i32 %v2_117f8, i32* %v3_11800, align 4
  %v0_11804 = load i32, i32* %r1.global-to-local, align 4
  %v1_11804 = load i32, i32* @r6, align 4
  %v2_11804 = add i32 %v1_11804, 12
  %v3_11804 = inttoptr i32 %v2_11804 to i32*
  store i32 %v0_11804, i32* %v3_11804, align 4
  %v0_11808 = load i32, i32* @r6, align 4
  %v1_11808 = load i32, i32* %r1.global-to-local, align 4
  %v2_11808 = add i32 %v1_11808, 8
  %v3_11808 = inttoptr i32 %v2_11808 to i32*
  store i32 %v0_11808, i32* %v3_11808, align 4
  %v0_1180c = load i32, i32* @r6, align 4
  %v1_1180c = load i32, i32* %r1.global-to-local, align 4
  %v2_1180c = add i32 %v1_1180c, 12
  %v3_1180c = inttoptr i32 %v2_1180c to i32*
  store i32 %v0_1180c, i32* %v3_1180c, align 4
  %tmp210 = icmp ult i32 %v1_117f8, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_117f8
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r2.global-to-local, align 4
  %v8_11818 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v8_11818, i32* %r3.global-to-local, align 4
  %v4_1181c = load i32, i32* %r1.global-to-local, align 4
  %v6_1181c = add i32 %v8_11818, 48
  %v7_1181c = inttoptr i32 %v6_1181c to i32*
  store i32 %v4_1181c, i32* %v7_1181c, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_117f8, %bb145
  %v0_11820 = load i32, i32* @sl, align 4
  %v1_11820 = or i32 %v0_11820, 1
  store i32 %v1_11820, i32* %r2.global-to-local, align 4
  %v0_11824 = load i32, i32* %ip.global-to-local, align 4
  %v1_11824 = or i32 %v0_11824, 1
  store i32 %v1_11824, i32* %r3.global-to-local, align 4
  %v0_11828 = load i32, i32* @lr, align 4
  %v1_11828 = add i32 %v0_11828, 8
  store i32 %v1_11828, i32* %r4.global-to-local, align 4
  %v2_1182c = add i32 %v0_11828, 4
  %v3_1182c = inttoptr i32 %v2_1182c to i32*
  store i32 %v1_11820, i32* %v3_1182c, align 4
  %v0_11830 = load i32, i32* %ip.global-to-local, align 4
  %v1_11830 = load i32, i32* %r1.global-to-local, align 4
  %v3_11830 = add i32 %v1_11830, %v0_11830
  %v4_11830 = inttoptr i32 %v3_11830 to i32*
  store i32 %v0_11830, i32* %v4_11830, align 4
  %v0_11834 = load i32, i32* %r3.global-to-local, align 4
  %v1_11834 = load i32, i32* %r1.global-to-local, align 4
  %v2_11834 = add i32 %v1_11834, 4
  %v3_11834 = inttoptr i32 %v2_11834 to i32*
  store i32 %v0_11834, i32* %v3_11834, align 4
  br label %dec_label_pc_11c88

dec_label_pc_1183c.loopexit:                      ; preds = %dec_label_pc_1175c
  br label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %dec_label_pc_1183c.loopexit, %dec_label_pc_11450, %dec_label_pc_11458
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %ip.global-to-local, align 4
  %v4_11844 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_11844, i32* @r0, align 4
  %v1_11848 = add i32 %v4_11844, 44
  %v2_11848 = inttoptr i32 %v1_11848 to i32*
  %v3_11848 = load i32, i32* %v2_11848, align 4
  store i32 %v3_11848, i32* %ip.global-to-local, align 4
  %v1_1184c = add i32 %v3_11848, 4
  %v2_1184c = inttoptr i32 %v1_1184c to i32*
  %v3_1184c = load i32, i32* %v2_1184c, align 4
  %v0_11850 = load i32, i32* @sl, align 4
  %v1_11850 = add i32 %v0_11850, 16
  store i32 %v1_11850, i32* %r1.global-to-local, align 4
  %v1_11854 = and i32 %v3_1184c, -4
  store i32 %v1_11854, i32* %r3.global-to-local, align 4
  %v3_11858 = icmp ult i32 %v1_11854, %v1_11850
  br i1 %v3_11858, label %dec_label_pc_11888, label %dec_label_pc_11864

dec_label_pc_11864:                               ; preds = %dec_label_pc_1183c
  %v2_11864 = sub i32 %v1_11854, %v0_11850
  %v2_11868 = add i32 %v0_11850, %v3_11848
  store i32 %v2_11868, i32* %r1.global-to-local, align 4
  %v1_1186c = or i32 %v2_11864, 1
  store i32 %v1_1186c, i32* %r3.global-to-local, align 4
  %v1_11870 = or i32 %v0_11850, 1
  store i32 %v1_11870, i32* %r2.global-to-local, align 4
  %v1_11874 = add i32 %v3_11848, 8
  store i32 %v1_11874, i32* %r4.global-to-local, align 4
  store i32 %v1_11870, i32* %v2_1184c, align 4
  %v0_1187c = load i32, i32* %r1.global-to-local, align 4
  %v1_1187c = load i32, i32* @r0, align 4
  %v2_1187c = add i32 %v1_1187c, 44
  %v3_1187c = inttoptr i32 %v2_1187c to i32*
  store i32 %v0_1187c, i32* %v3_1187c, align 4
  %v0_11880 = load i32, i32* %r3.global-to-local, align 4
  %v1_11880 = load i32, i32* %r1.global-to-local, align 4
  %v2_11880 = add i32 %v1_11880, 4
  %v3_11880 = inttoptr i32 %v2_11880 to i32*
  store i32 %v0_11880, i32* %v3_11880, align 4
  br label %dec_label_pc_11c88

dec_label_pc_11888:                               ; preds = %dec_label_pc_1183c
  %v1_11888 = inttoptr i32 %v4_11844 to i32*
  %v2_11888 = load i32, i32* %v1_11888, align 4
  store i32 %v2_11888, i32* %r3.global-to-local, align 4
  %v1_1188c = and i32 %v2_11888, 2
  store i32 %v1_1188c, i32* %ip.global-to-local, align 4
  %v2_1188c = icmp eq i32 %v1_1188c, 0
  %v1_11890 = add i32 %v4_11844, 860
  %v2_11890 = inttoptr i32 %v1_11890 to i32*
  %v3_11890 = load i32, i32* %v2_11890, align 4
  store i32 %v3_11890, i32* %r1.global-to-local, align 4
  br i1 %v2_1188c, label %dec_label_pc_118a8, label %dec_label_pc_11898

dec_label_pc_11898:                               ; preds = %dec_label_pc_11888
  %v0_11898 = call i32 @function_12268()
  %v0_1189c = load i32, i32* @sl, align 4
  %v1_1189c = add i32 %v0_1189c, -7
  store i32 %v1_1189c, i32* @r0, align 4
  %v0_118a0 = call i32 @function_113b0()
  store i32 %v0_118a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11c84

dec_label_pc_118a8:                               ; preds = %dec_label_pc_11888
  %v1_118a8 = add i32 %v4_11844, 844
  %v2_118a8 = inttoptr i32 %v1_118a8 to i32*
  %v3_118a8 = load i32, i32* %v2_118a8, align 4
  store i32 %v3_118a8, i32* %r3.global-to-local, align 4
  %v3_118ac = icmp ult i32 %v0_11850, %v3_118a8
  %v1_118b0 = add i32 %v3_11890, -1
  store i32 %v1_118b0, i32* %sb.global-to-local, align 4
  br i1 %v3_118ac, label %dec_label_pc_11984, label %dec_label_pc_118b8

dec_label_pc_118b8:                               ; preds = %dec_label_pc_118a8
  %v1_118b8 = add i32 %v4_11844, 852
  %v2_118b8 = inttoptr i32 %v1_118b8 to i32*
  %v3_118b8 = load i32, i32* %v2_118b8, align 4
  store i32 %v3_118b8, i32* %r2.global-to-local, align 4
  %v1_118bc = add i32 %v4_11844, 848
  %v2_118bc = inttoptr i32 %v1_118bc to i32*
  %v3_118bc = load i32, i32* %v2_118bc, align 4
  store i32 %v3_118bc, i32* %r3.global-to-local, align 4
  %v6_118c4 = icmp slt i32 %v3_118bc, %v3_118b8
  br i1 %v6_118c4, label %dec_label_pc_118c8, label %dec_label_pc_11984

dec_label_pc_118c8:                               ; preds = %dec_label_pc_118b8
  %v1_118c8 = add i32 %v0_11850, 10
  %v2_118cc = add i32 %v1_118c8, %v3_11890
  store i32 %v2_118cc, i32* %r3.global-to-local, align 4
  %v2_118d0 = sub i32 0, %v3_11890
  %v3_118d0 = and i32 %v2_118cc, %v2_118d0
  store i32 %v3_118d0, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_118d0, %v0_11850
  br i1 %tmp211, label %dec_label_pc_118dc, label %dec_label_pc_11984

dec_label_pc_118dc:                               ; preds = %dec_label_pc_118c8
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_118d0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_118f4 = call i32 @function_13698(i32 0, i32 %v3_118d0, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_118f4, i32* %r0.global-to-local, align 4
  %v7_118f8 = icmp eq i32 %v6_118f4, -1
  br i1 %v7_118f8, label %dec_label_pc_118dc.dec_label_pc_11984_crit_edge, label %dec_label_pc_11900

dec_label_pc_118dc.dec_label_pc_11984_crit_edge:  ; preds = %dec_label_pc_118dc
  %v1_119a8.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_11984

dec_label_pc_11900:                               ; preds = %dec_label_pc_118dc
  %v1_11900 = urem i32 %v6_118f4, 8
  store i32 %v1_11900, i32* %r2.global-to-local, align 4
  %v2_11900 = icmp eq i32 %v1_11900, 0
  br i1 %v2_11900, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_11900
  %v2_11904 = sub nsw i32 8, %v1_11900
  store i32 %v2_11904, i32* %r3.global-to-local, align 4
  %v2_11908 = load i32, i32* @r4, align 4
  %v3_11908 = sub i32 %v2_11908, %v2_11904
  %v3_1190c = add i32 %v2_11904, %v6_118f4
  store i32 %v3_1190c, i32* %lr.global-to-local, align 4
  %v2_11914 = or i32 %v3_11908, 2
  store i32 %v2_11914, i32* %r2.global-to-local, align 4
  %v5_1191c = inttoptr i32 %v3_1190c to i32*
  store i32 %v2_11904, i32* %v5_1191c, align 4
  %v1_11920 = load i32, i32* %r2.global-to-local, align 4
  %v2_11920 = load i32, i32* %lr.global-to-local, align 4
  %v3_11920 = add i32 %v2_11920, 4
  %v4_11920 = inttoptr i32 %v3_11920 to i32*
  store i32 %v1_11920, i32* %v4_11920, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_11900
  store i32 %v6_118f4, i32* %lr.global-to-local, align 4
  %v1_1191847 = load i32, i32* @r4, align 4
  %v2_1191848 = or i32 %v1_1191847, 2
  store i32 %v2_1191848, i32* %r3.global-to-local, align 4
  %v3_11924 = inttoptr i32 %v6_118f4 to i32*
  store i32 0, i32* %v3_11924, align 4
  %v1_11928 = load i32, i32* %r3.global-to-local, align 4
  %v2_11928 = load i32, i32* %lr.global-to-local, align 4
  %v3_11928 = add i32 %v2_11928, 4
  %v4_11928 = inttoptr i32 %v3_11928 to i32*
  store i32 %v1_11928, i32* %v4_11928, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 123612, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11934 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_11934, i32* %ip.global-to-local, align 4
  %v1_11938 = add i32 %v4_11934, 848
  %v2_11938 = inttoptr i32 %v1_11938 to i32*
  %v3_11938 = load i32, i32* %v2_11938, align 4
  store i32 %v3_11938, i32* %r3.global-to-local, align 4
  %v1_1193c = add i32 %v4_11934, 856
  %v2_1193c = inttoptr i32 %v1_1193c to i32*
  %v3_1193c = load i32, i32* %v2_1193c, align 4
  store i32 %v3_1193c, i32* %r2.global-to-local, align 4
  %v1_11940 = add i32 %v3_11938, 1
  store i32 %v1_11940, i32* %r3.global-to-local, align 4
  %v7_11948 = icmp sgt i32 %v1_11940, %v3_1193c
  br i1 %v7_11948, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_11940, i32* %v2_1193c, align 4
  %v0_1194c.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_1194c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_1194c = phi i32 [ %v4_11934, %.thread27 ], [ %v1_1194c.pre, %bb147 ]
  %v0_1194c = phi i32 [ %v1_11940, %.thread27 ], [ %v0_1194c.pre, %bb147 ]
  %v2_1194c = add i32 %v1_1194c, 848
  %v3_1194c = inttoptr i32 %v2_1194c to i32*
  store i32 %v0_1194c, i32* %v3_1194c, align 4
  %v0_11950 = load i32, i32* %ip.global-to-local, align 4
  %v1_11950 = add i32 %v0_11950, 868
  %v2_11950 = inttoptr i32 %v1_11950 to i32*
  %v3_11950 = load i32, i32* %v2_11950, align 4
  store i32 %v3_11950, i32* %r3.global-to-local, align 4
  %v1_11954 = add i32 %v0_11950, 880
  %v2_11954 = inttoptr i32 %v1_11954 to i32*
  %v3_11954 = load i32, i32* %v2_11954, align 4
  store i32 %v3_11954, i32* %r2.global-to-local, align 4
  %v0_11958 = load i32, i32* @r4, align 4
  %v2_11958 = add i32 %v0_11958, %v3_11950
  store i32 %v2_11958, i32* %r1.global-to-local, align 4
  %v1_1195c = add i32 %v0_11950, 872
  %v2_1195c = inttoptr i32 %v1_1195c to i32*
  %v3_1195c = load i32, i32* %v2_1195c, align 4
  store i32 %v3_1195c, i32* %r3.global-to-local, align 4
  %v1_11964 = add i32 %v0_11950, 884
  %v2_11964 = inttoptr i32 %v1_11964 to i32*
  %v3_11964 = load i32, i32* %v2_11964, align 4
  store i32 %v3_11964, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_11958, %v3_11954
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_11958, i32* %v2_11954, align 4
  %v0_1196c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_1196c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_1196c = phi i32 [ %v0_11950, %bb148 ], [ %v1_1196c.pre, %bb149 ]
  %v0_1196c = phi i32 [ %v2_11958, %bb148 ], [ %v0_1196c.pre, %bb149 ]
  %v2_1196c = add i32 %v1_1196c, 868
  %v3_1196c = inttoptr i32 %v2_1196c to i32*
  store i32 %v0_1196c, i32* %v3_1196c, align 4
  %v0_11970 = load i32, i32* %r1.global-to-local, align 4
  %v1_11970 = load i32, i32* %r3.global-to-local, align 4
  %v2_11970 = add i32 %v1_11970, %v0_11970
  store i32 %v2_11970, i32* %r1.global-to-local, align 4
  %v1_11974 = load i32, i32* %r2.global-to-local, align 4
  %v0_11978 = load i32, i32* %lr.global-to-local, align 4
  %v1_11978 = add i32 %v0_11978, 8
  store i32 %v1_11978, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_11970, %v1_11974
  br i1 %tmp213, label %bb151, label %dec_label_pc_11c84

bb151:                                            ; preds = %bb150
  %v5_1197c = load i32, i32* %ip.global-to-local, align 4
  %v6_1197c = add i32 %v5_1197c, 884
  %v7_1197c = inttoptr i32 %v6_1197c to i32*
  store i32 %v2_11970, i32* %v7_1197c, align 4
  br label %dec_label_pc_11c84

dec_label_pc_11984:                               ; preds = %dec_label_pc_118c8, %dec_label_pc_118a8, %dec_label_pc_118dc.dec_label_pc_11984_crit_edge, %dec_label_pc_118b8
  %v1_119a8 = phi i32 [ %v1_119a8.pre, %dec_label_pc_118dc.dec_label_pc_11984_crit_edge ], [ %v0_11850, %dec_label_pc_118b8 ], [ %v0_11850, %dec_label_pc_118a8 ], [ %v0_11850, %dec_label_pc_118c8 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %ip.global-to-local, align 4
  %v4_1198c = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_1198c, i32* %r3.global-to-local, align 4
  %v1_11990 = add i32 %v4_1198c, 44
  %v2_11990 = inttoptr i32 %v1_11990 to i32*
  %v3_11990 = load i32, i32* %v2_11990, align 4
  store i32 %v3_11990, i32* %r0.global-to-local, align 4
  %v1_11994 = add i32 %v4_1198c, 864
  %v2_11994 = inttoptr i32 %v1_11994 to i32*
  %v3_11994 = load i32, i32* %v2_11994, align 4
  store i32 %v3_11994, i32* %r2.global-to-local, align 4
  %v1_11998 = add i32 %v4_1198c, 840
  %v2_11998 = inttoptr i32 %v1_11998 to i32*
  %v3_11998 = load i32, i32* %v2_11998, align 4
  store i32 %v3_11998, i32* %r3.global-to-local, align 4
  %v1_1199c = add i32 %v3_11990, 4
  %v2_1199c = inttoptr i32 %v1_1199c to i32*
  %v3_1199c = load i32, i32* %v2_1199c, align 4
  store i32 %v3_1199c, i32* %r1.global-to-local, align 4
  %v1_119a4 = urem i32 %v3_11994, 2
  %v2_119a4 = icmp eq i32 %v1_119a4, 0
  %v1_119a0 = add i32 %v1_119a8, 16
  %v2_119a8 = add i32 %v1_119a0, %v3_11998
  store i32 %v2_119a8, i32* %r3.global-to-local, align 4
  %v1_119ac = and i32 %v3_1199c, -4
  store i32 %v1_119ac, i32* @r8, align 4
  br i1 %v2_119a4, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_11984
  %v3_119b0 = sub i32 %v2_119a8, %v1_119ac
  store i32 %v3_119b0, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_11984, %bb152
  %v0_119b4 = phi i32 [ %v2_119a8, %dec_label_pc_11984 ], [ %v3_119b0, %bb152 ]
  %v1_119b4 = load i32, i32* %sb.global-to-local, align 4
  %v2_119b4 = add i32 %v1_119b4, %v0_119b4
  store i32 %v2_119b4, i32* %r3.global-to-local, align 4
  %v1_119b8 = sub i32 -1, %v1_119b4
  store i32 %v1_119b8, i32* %fp.global-to-local, align 4
  %v2_119bc = and i32 %v2_119b4, %v1_119b8
  store i32 %v2_119bc, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_119bc, 1
  br i1 %tmp154, label %dec_label_pc_119e0, label %dec_label_pc_119cc

dec_label_pc_119cc:                               ; preds = %bb153
  store i32 %v2_119bc, i32* %r0.global-to-local, align 4
  %v1_119d0 = call i32 @function_13924(i32 %v2_119bc)
  store i32 %v1_119d0, i32* %r0.global-to-local, align 4
  %v3_119d4 = icmp eq i32 %v1_119d0, -1
  store i32 %v1_119d0, i32* @r4, align 4
  br i1 %v3_119d4, label %dec_label_pc_119e0, label %dec_label_pc_11a4c

dec_label_pc_119e0:                               ; preds = %dec_label_pc_119cc, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r1.global-to-local, align 4
  %v4_119e8 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_119e8, i32* %r6.global-to-local, align 4
  %v1_119ec = add i32 %v4_119e8, 864
  %v2_119ec = inttoptr i32 %v1_119ec to i32*
  %v3_119ec = load i32, i32* %v2_119ec, align 4
  store i32 %v3_119ec, i32* %r3.global-to-local, align 4
  %v1_119f0 = urem i32 %v3_119ec, 2
  %v2_119f0 = icmp eq i32 %v1_119f0, 0
  br i1 %v2_119f0, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_119e0
  %v1_119f4 = load i32, i32* @r8, align 4
  %v2_119f4 = load i32, i32* %sb.global-to-local, align 4
  %v3_119f4 = add i32 %v2_119f4, %v1_119f4
  %v2_119f8 = load i32, i32* @r5, align 4
  %v3_119f8 = add i32 %v3_119f4, %v2_119f8
  store i32 %v3_119f8, i32* %r3.global-to-local, align 4
  %v2_119fc = load i32, i32* %fp.global-to-local, align 4
  %v3_119fc = and i32 %v2_119fc, %v3_119f8
  store i32 %v3_119fc, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_119e0
  %v0_11a00.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_11a00 = phi i32 [ %v0_11a00.pr, %.thread29thread-pre-split ], [ %v3_119fc, %bb155 ]
  %v2_11a00 = icmp ugt i32 %v0_11a00, 1048575
  br i1 %v2_11a00, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_11a18 = phi i32 [ %v0_11a00, %.thread29 ], [ 1048576, %bb156 ]
  %v1_11a08 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_11a18, %v1_11a08
  br i1 %tmp214, label %dec_label_pc_11a10, label %dec_label_pc_11c74

dec_label_pc_11a10:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_11a18, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11a2c = call i32 @function_13698(i32 0, i32 %v0_11a18, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11a2c, i32* %r0.global-to-local, align 4
  %v3_11a30 = icmp eq i32 %v6_11a2c, -1
  %v8_11a30 = icmp eq i32 %v6_11a2c, -1
  store i32 %v6_11a2c, i32* @r4, align 4
  br i1 %v8_11a30, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_11a10
  %v1_11a38 = load i32, i32* %r6.global-to-local, align 4
  %v2_11a38 = add i32 %v1_11a38, 864
  %v3_11a38 = inttoptr i32 %v2_11a38 to i32*
  %v4_11a38 = load i32, i32* %v3_11a38, align 4
  %v2_11a3c = load i32, i32* @r5, align 4
  %v3_11a3c = add i32 %v2_11a3c, %v6_11a2c
  store i32 %v3_11a3c, i32* %r0.global-to-local, align 4
  %v2_11a40 = and i32 %v4_11a38, -2
  store i32 %v2_11a40, i32* %r3.global-to-local, align 4
  store i32 %v2_11a40, i32* %v3_11a38, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_11a10, %bb158
  br i1 %v3_11a30, label %dec_label_pc_11a4c, label %dec_label_pc_11a50

dec_label_pc_11a4c:                               ; preds = %.thread32, %dec_label_pc_119cc
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11a50

dec_label_pc_11a50:                               ; preds = %.thread32, %dec_label_pc_11a4c
  %v0_11a50 = load i32, i32* @r4, align 4
  %v7_11a50 = icmp eq i32 %v0_11a50, -1
  br i1 %v7_11a50, label %dec_label_pc_11c74, label %dec_label_pc_11a58

dec_label_pc_11a58:                               ; preds = %dec_label_pc_11a50
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r2.global-to-local, align 4
  %v4_11a60 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_11a60, i32* %ip.global-to-local, align 4
  store i32 %v3_11990, i32* %r2.global-to-local, align 4
  %v1_11a68 = add i32 %v4_11a60, 872
  %v2_11a68 = inttoptr i32 %v1_11a68 to i32*
  %v3_11a68 = load i32, i32* %v2_11a68, align 4
  %v1_11a6c = load i32, i32* @r8, align 4
  %v2_11a6c = add i32 %v1_11a6c, %v3_11990
  store i32 %v2_11a6c, i32* %r1.global-to-local, align 4
  %v0_11a70 = load i32, i32* @r5, align 4
  %v2_11a70 = add i32 %v0_11a70, %v3_11a68
  store i32 %v2_11a70, i32* %r3.global-to-local, align 4
  %v9_11a74 = icmp eq i32 %v0_11a50, %v2_11a6c
  br i1 %v9_11a74, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_11a58
  store i32 %v2_11a70, i32* %v2_11a68, align 4
  br label %dec_label_pc_11a90

bb159:                                            ; preds = %dec_label_pc_11a58
  %v1_11a78 = load i32, i32* %r0.global-to-local, align 4
  %v8_11a78 = icmp eq i32 %v1_11a78, -1
  store i32 %v2_11a70, i32* %v2_11a68, align 4
  br i1 %v8_11a78, label %.thread34, label %dec_label_pc_11a90

.thread34:                                        ; preds = %bb159
  %v1_11a80 = load i32, i32* @r5, align 4
  %v2_11a80 = load i32, i32* @r8, align 4
  %v3_11a80 = add i32 %v2_11a80, %v1_11a80
  %v2_11a84 = or i32 %v3_11a80, 1
  store i32 %v2_11a84, i32* %r3.global-to-local, align 4
  %v2_11a88 = load i32, i32* %r2.global-to-local, align 4
  %v3_11a88 = add i32 %v2_11a88, 4
  %v4_11a88 = inttoptr i32 %v3_11a88 to i32*
  store i32 %v2_11a84, i32* %v4_11a88, align 4
  br label %dec_label_pc_11c08

dec_label_pc_11a90:                               ; preds = %bb159, %.thread122
  %v0_11a94.pr = load i32, i32* @r8, align 4
  %v0_11a90 = load i32, i32* %ip.global-to-local, align 4
  %v1_11a90 = add i32 %v0_11a90, 864
  %v2_11a90 = inttoptr i32 %v1_11a90 to i32*
  %v3_11a90 = load i32, i32* %v2_11a90, align 4
  store i32 %v3_11a90, i32* %r2.global-to-local, align 4
  %v2_11a94 = icmp eq i32 %v0_11a94.pr, 0
  br i1 %v2_11a94, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_11a90
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_11a90
  %v2_11a9c = urem i32 %v3_11a90, 2
  store i32 %v2_11a9c, i32* %r3.global-to-local, align 4
  %v2_11aa0 = icmp eq i32 %v2_11a9c, 0
  br i1 %v2_11aa0, label %.thread40, label %dec_label_pc_11aa8

dec_label_pc_11aa8:                               ; preds = %.thread36
  %v0_11aa8 = load i32, i32* @r4, align 4
  %v1_11aa8 = load i32, i32* %r1.global-to-local, align 4
  %v3_11aa8 = icmp ult i32 %v0_11aa8, %v1_11aa8
  br i1 %v3_11aa8, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_11aa8
  %v2_11aac = and i32 %v3_11a90, -2
  store i32 %v2_11aac, i32* %r3.global-to-local, align 4
  store i32 %v2_11aac, i32* %v2_11a90, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_11aa8, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %ip.global-to-local, align 4
  %v4_11abc = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_11abc, i32* @r7, align 4
  %v1_11ac0 = add i32 %v4_11abc, 864
  %v2_11ac0 = inttoptr i32 %v1_11ac0 to i32*
  %v3_11ac0 = load i32, i32* %v2_11ac0, align 4
  store i32 %v3_11ac0, i32* %r3.global-to-local, align 4
  %v1_11ac4 = urem i32 %v3_11ac0, 2
  store i32 %v1_11ac4, i32* @r6, align 4
  %v2_11ac4 = icmp eq i32 %v1_11ac4, 0
  br i1 %v2_11ac4, label %dec_label_pc_11b58, label %dec_label_pc_11acc

dec_label_pc_11acc:                               ; preds = %.thread40
  %v0_11acc = load i32, i32* @r8, align 4
  %v2_11acc = icmp eq i32 %v0_11acc, 0
  br i1 %v2_11acc, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_11acc
  %v2_11ad0 = add i32 %v4_11abc, 872
  %v3_11ad0 = inttoptr i32 %v2_11ad0 to i32*
  %v4_11ad0 = load i32, i32* %v3_11ad0, align 4
  store i32 %v4_11ad0, i32* %r2.global-to-local, align 4
  %v1_11ad4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ad4 = load i32, i32* @r4, align 4
  %v3_11ad4 = sub i32 %v2_11ad4, %v1_11ad4
  %v3_11ad8 = add i32 %v3_11ad4, %v4_11ad0
  store i32 %v3_11ad8, i32* %r3.global-to-local, align 4
  store i32 %v3_11ad8, i32* %v3_11ad0, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_11acc, %bb161
  %v0_11ae0 = load i32, i32* @r4, align 4
  %v1_11ae0 = urem i32 %v0_11ae0, 8
  store i32 %v1_11ae0, i32* %r3.global-to-local, align 4
  %v2_11ae0 = icmp eq i32 %v1_11ae0, 0
  br i1 %v2_11ae0, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_11ae4 = sub nsw i32 8, %v1_11ae0
  store i32 %v2_11ae4, i32* %r3.global-to-local, align 4
  %v3_11ae8 = add i32 %v2_11ae4, %v0_11ae0
  store i32 %v3_11ae8, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_11af0 = phi i32 [ 0, %.thread43 ], [ %v2_11ae4, %bb162 ]
  %v1_11aec = load i32, i32* @r5, align 4
  %v2_11aec = add i32 %v1_11aec, %v0_11ae0
  store i32 %v2_11aec, i32* @r6, align 4
  %v1_11af0 = load i32, i32* @r8, align 4
  %v2_11af0 = add i32 %v2_11aec, %v0_11af0
  %v2_11af4 = add i32 %v2_11af0, %v1_11af0
  store i32 %v2_11af4, i32* %r1.global-to-local, align 4
  %v1_11af8 = load i32, i32* %sb.global-to-local, align 4
  %v2_11af8 = add i32 %v1_11af8, %v2_11af4
  %v1_11afc = load i32, i32* %fp.global-to-local, align 4
  %v2_11afc = and i32 %v1_11afc, %v2_11af8
  store i32 %v2_11afc, i32* %r2.global-to-local, align 4
  %v2_11b00 = sub i32 0, %v2_11aec
  store i32 %v2_11b00, i32* %r3.global-to-local, align 4
  %v2_11b04 = sub i32 %v2_11afc, %v2_11aec
  store i32 %v2_11b04, i32* @r5, align 4
  store i32 %v2_11b04, i32* %r0.global-to-local, align 4
  br i1 %v2_11ae0, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_11ae0, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_11b10 = call i32 @function_13924(i32 %v2_11b04)
  store i32 %v1_11b10, i32* %r0.global-to-local, align 4
  %v3_11b14 = icmp eq i32 %v1_11b10, -1
  br i1 %v3_11b14, label %dec_label_pc_11b1c, label %dec_label_pc_11b2c

dec_label_pc_11b1c:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11b20 = call i32 @function_13924(i32 0)
  store i32 %v1_11b20, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_11b84

dec_label_pc_11b2c:                               ; preds = %bb164
  %v1_11b2c = load i32, i32* @r4, align 4
  %v3_11b2c = icmp ult i32 %v1_11b10, %v1_11b2c
  br i1 %v3_11b2c, label %dec_label_pc_11b34, label %dec_label_pc_11b84

dec_label_pc_11b34:                               ; preds = %dec_label_pc_11b2c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r0.global-to-local, align 4
  %v4_11b3c = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_11b3c, i32* %r2.global-to-local, align 4
  %v1_11b40 = add i32 %v4_11b3c, 864
  %v2_11b40 = inttoptr i32 %v1_11b40 to i32*
  %v3_11b40 = load i32, i32* %v2_11b40, align 4
  %v0_11b44 = load i32, i32* @r6, align 4
  store i32 %v0_11b44, i32* %r0.global-to-local, align 4
  %v1_11b48 = and i32 %v3_11b40, -2
  store i32 %v1_11b48, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_11b48, i32* %v2_11b40, align 4
  br label %dec_label_pc_11b84

dec_label_pc_11b58:                               ; preds = %.thread40
  %v0_11b58 = load i32, i32* %r0.global-to-local, align 4
  %v3_11b58 = icmp eq i32 %v0_11b58, -1
  br i1 %v3_11b58, label %dec_label_pc_11b60, label %dec_label_pc_11b7c

dec_label_pc_11b60:                               ; preds = %dec_label_pc_11b58
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11b64 = call i32 @function_13924(i32 0)
  store i32 %v1_11b64, i32* %r0.global-to-local, align 4
  %v0_11b68 = load i32, i32* @r7, align 4
  %v1_11b68 = add i32 %v0_11b68, 872
  %v2_11b68 = inttoptr i32 %v1_11b68 to i32*
  %v3_11b68 = load i32, i32* %v2_11b68, align 4
  store i32 %v3_11b68, i32* %r2.global-to-local, align 4
  %v0_11b6c = load i32, i32* @r4, align 4
  %v0_11b70 = load i32, i32* @r5, align 4
  %v2_11b6c = add i32 %v3_11b68, %v1_11b64
  %v2_11b70 = sub i32 %v2_11b6c, %v0_11b6c
  %v2_11b74 = sub i32 %v2_11b70, %v0_11b70
  store i32 %v2_11b74, i32* %r3.global-to-local, align 4
  store i32 %v2_11b74, i32* %v2_11b68, align 4
  %v0_11b80.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_11b7c

dec_label_pc_11b7c:                               ; preds = %dec_label_pc_11b58, %dec_label_pc_11b60
  %v0_11b80 = phi i32 [ 0, %dec_label_pc_11b58 ], [ %v0_11b80.pre, %dec_label_pc_11b60 ]
  %v0_11b7c = load i32, i32* @r4, align 4
  store i32 %v0_11b7c, i32* @r7, align 4
  store i32 %v0_11b80, i32* @r5, align 4
  br label %dec_label_pc_11b84

dec_label_pc_11b84:                               ; preds = %dec_label_pc_11b2c, %dec_label_pc_11b34, %dec_label_pc_11b1c, %dec_label_pc_11b7c
  %v0_11b84 = load i32, i32* %r0.global-to-local, align 4
  %v7_11b84 = icmp eq i32 %v0_11b84, -1
  br i1 %v7_11b84, label %dec_label_pc_11c08, label %dec_label_pc_11b8c

dec_label_pc_11b8c:                               ; preds = %dec_label_pc_11b84
  %v1_11b8c = load i32, i32* @r5, align 4
  %v2_11b8c = add i32 %v1_11b8c, %v0_11b84
  %v0_11b90 = load i32, i32* @r7, align 4
  %v2_11b90 = sub i32 %v2_11b8c, %v0_11b90
  %v1_11b94 = or i32 %v2_11b90, 1
  %v2_11b98 = add i32 %v0_11b90, 4
  %v3_11b98 = inttoptr i32 %v2_11b98 to i32*
  store i32 %v1_11b94, i32* %v3_11b98, align 4
  store i32 123612, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11ba4 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_11ba4, i32* @r6, align 4
  %v1_11ba8 = add i32 %v4_11ba4, 872
  %v2_11ba8 = inttoptr i32 %v1_11ba8 to i32*
  %v3_11ba8 = load i32, i32* %v2_11ba8, align 4
  %v0_11bac = load i32, i32* @r8, align 4
  %v2_11bac = icmp eq i32 %v0_11bac, 0
  %v0_11bb0 = load i32, i32* @r5, align 4
  %v2_11bb0 = add i32 %v0_11bb0, %v3_11ba8
  store i32 %v2_11bb0, i32* %r3.global-to-local, align 4
  store i32 %v2_11bb0, i32* %v2_11ba8, align 4
  %v0_11bb8 = load i32, i32* @r7, align 4
  %v1_11bb8 = load i32, i32* @r6, align 4
  %v2_11bb8 = add i32 %v1_11bb8, 44
  %v3_11bb8 = inttoptr i32 %v2_11bb8 to i32*
  store i32 %v0_11bb8, i32* %v3_11bb8, align 4
  br i1 %v2_11bac, label %dec_label_pc_11c08, label %dec_label_pc_11bc0

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11b8c
  %v0_11bc4 = load i32, i32* @r8, align 4
  %v1_11bc4 = add i32 %v0_11bc4, -12
  %v1_11bc8 = and i32 %v1_11bc4, -8
  store i32 %v3_11990, i32* %ip.global-to-local, align 4
  %v2_11bd0 = add i32 %v1_11bc8, %v3_11990
  store i32 %v2_11bd0, i32* %r1.global-to-local, align 4
  %v2_11bd4 = icmp ugt i32 %v1_11bc8, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_11bdc = or i32 %v1_11bc8, 1
  store i32 %v1_11bdc, i32* %r3.global-to-local, align 4
  store i32 %v1_11bdc, i32* %v2_1199c, align 4
  %v0_11be4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11be4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11be4 = add i32 %v1_11be4, 8
  %v3_11be4 = inttoptr i32 %v2_11be4 to i32*
  store i32 %v0_11be4, i32* %v3_11be4, align 4
  %v0_11be8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11be8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11be8 = add i32 %v1_11be8, 4
  %v3_11be8 = inttoptr i32 %v2_11be8 to i32*
  store i32 %v0_11be8, i32* %v3_11be8, align 4
  br i1 %v2_11bd4, label %dec_label_pc_11bf0, label %dec_label_pc_11c08

dec_label_pc_11bf0:                               ; preds = %dec_label_pc_11bc0
  %v0_11bf0 = load i32, i32* @r6, align 4
  %v1_11bf0 = add i32 %v0_11bf0, 836
  %v2_11bf0 = inttoptr i32 %v1_11bf0 to i32*
  %v3_11bf0 = load i32, i32* %v2_11bf0, align 4
  store i32 %v3_11bf0, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_11bf8 = load i32, i32* %ip.global-to-local, align 4
  %v1_11bf8 = add i32 %v0_11bf8, 8
  store i32 %v1_11bf8, i32* @r0, align 4
  store i32 -1, i32* %v2_11bf0, align 4
  %v0_11c00 = call i32 @function_1241c()
  store i32 %v0_11c00, i32* %r0.global-to-local, align 4
  %v0_11c04 = load i32, i32* @r4, align 4
  %v1_11c04 = load i32, i32* @r6, align 4
  %v2_11c04 = add i32 %v1_11c04, 836
  %v3_11c04 = inttoptr i32 %v2_11c04 to i32*
  store i32 %v0_11c04, i32* %v3_11c04, align 4
  br label %dec_label_pc_11c08

dec_label_pc_11c08:                               ; preds = %.thread34, %dec_label_pc_11bc0, %dec_label_pc_11b8c, %dec_label_pc_11b84, %dec_label_pc_11bf0
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r0.global-to-local, align 4
  %v4_11c10 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_11c10, i32* %lr.global-to-local, align 4
  %v1_11c14 = add i32 %v4_11c10, 872
  store i32 %v1_11c14, i32* %r1.global-to-local, align 4
  %v1_11c18 = inttoptr i32 %v1_11c14 to i32*
  %v2_11c18 = load i32, i32* %v1_11c18, align 4
  store i32 %v2_11c18, i32* %r1.global-to-local, align 4
  %v3_11c18 = add i32 %v4_11c10, 876
  %v4_11c18 = inttoptr i32 %v3_11c18 to i32*
  %v5_11c18 = load i32, i32* %v4_11c18, align 4
  store i32 %v5_11c18, i32* %r3.global-to-local, align 4
  %v1_11c20 = add i32 %v4_11c10, 868
  %v2_11c20 = inttoptr i32 %v1_11c20 to i32*
  %v3_11c20 = load i32, i32* %v2_11c20, align 4
  store i32 %v3_11c20, i32* %r3.global-to-local, align 4
  %v1_11c24 = add i32 %v4_11c10, 884
  %v2_11c24 = inttoptr i32 %v1_11c24 to i32*
  %v3_11c24 = load i32, i32* %v2_11c24, align 4
  store i32 %v3_11c24, i32* %r2.global-to-local, align 4
  %v2_11c28 = add i32 %v3_11c20, %v2_11c18
  store i32 %v2_11c28, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_11c18, %v5_11c18
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_11c08
  store i32 %v2_11c18, i32* %v4_11c18, align 4
  %v0_11c30.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11c30.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_11c08, %bb165
  %v1_11c30 = phi i32 [ %v3_11c24, %dec_label_pc_11c08 ], [ %v1_11c30.pre, %bb165 ]
  %v4_11c34 = phi i32 [ %v2_11c28, %dec_label_pc_11c08 ], [ %v0_11c30.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_11c34, %v1_11c30
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_11c34 = load i32, i32* %lr.global-to-local, align 4
  %v6_11c34 = add i32 %v5_11c34, 884
  %v7_11c34 = inttoptr i32 %v6_11c34 to i32*
  store i32 %v4_11c34, i32* %v7_11c34, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_11c38 = load i32, i32* %lr.global-to-local, align 4
  %v1_11c38 = add i32 %v0_11c38, 44
  %v2_11c38 = inttoptr i32 %v1_11c38 to i32*
  %v3_11c38 = load i32, i32* %v2_11c38, align 4
  store i32 %v3_11c38, i32* %ip.global-to-local, align 4
  %v1_11c3c = add i32 %v3_11c38, 4
  %v2_11c3c = inttoptr i32 %v1_11c3c to i32*
  %v3_11c3c = load i32, i32* %v2_11c3c, align 4
  store i32 %v1_11850, i32* %r1.global-to-local, align 4
  %v1_11c44 = and i32 %v3_11c3c, -4
  store i32 %v1_11c44, i32* %r3.global-to-local, align 4
  %v3_11c48 = icmp ult i32 %v1_11c44, %v1_11850
  br i1 %v3_11c48, label %dec_label_pc_11c74, label %dec_label_pc_11c50

dec_label_pc_11c50:                               ; preds = %bb168
  %v0_11c50 = load i32, i32* @sl, align 4
  %v2_11c50 = sub i32 %v1_11c44, %v0_11c50
  %v2_11c54 = add i32 %v0_11c50, %v3_11c38
  store i32 %v2_11c54, i32* %r1.global-to-local, align 4
  %v1_11c58 = or i32 %v2_11c50, 1
  store i32 %v1_11c58, i32* %r3.global-to-local, align 4
  %v1_11c5c = or i32 %v0_11c50, 1
  store i32 %v1_11c5c, i32* %r2.global-to-local, align 4
  %v1_11c60 = add i32 %v3_11c38, 8
  store i32 %v1_11c60, i32* %r0.global-to-local, align 4
  store i32 %v1_11c5c, i32* %v2_11c3c, align 4
  %v0_11c68 = load i32, i32* %r1.global-to-local, align 4
  %v1_11c68 = load i32, i32* %lr.global-to-local, align 4
  %v2_11c68 = add i32 %v1_11c68, 44
  %v3_11c68 = inttoptr i32 %v2_11c68 to i32*
  store i32 %v0_11c68, i32* %v3_11c68, align 4
  %v0_11c6c = load i32, i32* %r3.global-to-local, align 4
  %v1_11c6c = load i32, i32* %r1.global-to-local, align 4
  %v2_11c6c = add i32 %v1_11c6c, 4
  %v3_11c6c = inttoptr i32 %v2_11c6c to i32*
  store i32 %v0_11c6c, i32* %v3_11c6c, align 4
  br label %dec_label_pc_11c84

dec_label_pc_11c74:                               ; preds = %bb157, %bb168, %dec_label_pc_11a50
  %v0_11c74 = call i32 @function_10de8()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_11c7c = inttoptr i32 %v0_11c74 to i32*
  store i32 12, i32* %v2_11c7c, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11c84

dec_label_pc_11c84:                               ; preds = %bb151, %bb150, %dec_label_pc_11c50, %dec_label_pc_11898, %dec_label_pc_11c74
  %v0_11c84 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11c84, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11c88

dec_label_pc_11c88:                               ; preds = %.thread1, %dec_label_pc_11864, %.thread121, %dec_label_pc_116d4, %dec_label_pc_116c8, %dec_label_pc_11530, %dec_label_pc_114b4, %dec_label_pc_11c84
  store i32 %v2_113dc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 123612, i32* %r2.global-to-local, align 4
  %v4_11c98 = load i32, i32* inttoptr (i32 123636 to i32*), align 4
  store i32 %v4_11c98, i32* @ip, align 4
  store i32 72868, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11c98)
  br label %dec_label_pc_11ca4

dec_label_pc_11ca4:                               ; preds = %dec_label_pc_11414, %dec_label_pc_11c88
  %v0_11ca4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11ca4, i32* %r0.global-to-local, align 4
  store i32 %v3_113b0, i32* @r4, align 4
  store i32 %v6_113b0, i32* @r5, align 4
  store i32 %v9_113b0, i32* @r6, align 4
  store i32 %v12_113b0, i32* @r7, align 4
  store i32 %v15_113b0, i32* @r8, align 4
  store i32 %v18_113b0, i32* @sb, align 4
  store i32 %v21_113b0, i32* @sl, align 4
  store i32 %v24_113b0, i32* @fp, align 4
  store i32 %v27_113b0, i32* @lr, align 4
  ret i32 %v0_11ca4

; uselistorder directives
  uselistorder i32 %v0_11c50, { 1, 0, 2 }
  uselistorder i32 %v3_11c38, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11c34, { 1, 0 }
  uselistorder i32 %v2_11c18, { 2, 0, 1, 3 }
  uselistorder i32 %v4_11c10, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_11bc8, { 1, 2, 0 }
  uselistorder i32 %v0_11b90, { 1, 0 }
  uselistorder i32 %v0_11b84, { 1, 0 }
  uselistorder i32 %v2_11b74, { 1, 0 }
  uselistorder i32 %v2_11b04, { 2, 1, 0 }
  uselistorder i32 %v2_11aec, { 1, 2, 0, 3 }
  uselistorder i32 %v2_11ae4, { 1, 0, 2 }
  uselistorder i32 %v1_11ae0, { 2, 1, 0 }
  uselistorder i32 %v0_11ae0, { 3, 1, 2, 0 }
  uselistorder i32 %v1_11ac4, { 1, 0 }
  uselistorder i32 %v2_11a9c, { 1, 0 }
  uselistorder i32 %v3_11a90, { 1, 0, 2 }
  uselistorder i32 %v2_11a70, { 1, 0, 2 }
  uselistorder i32* %v2_11a68, { 1, 0, 2 }
  uselistorder i32 %v0_11a50, { 1, 0 }
  uselistorder i32 %v6_11a2c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11a18, { 2, 1, 0 }
  uselistorder i32 %v0_11a00, { 1, 0 }
  uselistorder i32 %v2_119bc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_119b8, { 1, 0 }
  uselistorder i32 %v3_11990, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_11970, { 1, 0, 2 }
  uselistorder i32 %v2_11958, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11900, { 2, 1, 0 }
  uselistorder i32 %v6_118f4, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_118d0, { 2, 1, 0, 3 }
  uselistorder i32 %v3_11890, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11850, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_11848, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11844, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_11830, { 1, 0 }
  uselistorder i32 %v7_117f0, { 1, 0 }
  uselistorder i32 %v4_117f0, { 1, 0 }
  uselistorder i32 %v0_117c0, { 1, 0 }
  uselistorder i32 %v2_11794, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_1179054, { 1, 0 }
  uselistorder i32 %v1_1175c, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_11744., { 1, 2, 0 }
  uselistorder i32 %v0_1174c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_1174c, { 1, 0 }
  uselistorder i32 %v3_1172c, { 1, 0 }
  uselistorder i32 %v4_11728, { 1, 0, 2 }
  uselistorder i32 %v1_11698, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_116f0, { 1, 0 }
  uselistorder i32 %v1_116d4, { 1, 0 }
  uselistorder i32 %v1_11574, { 1, 0 }
  uselistorder i32 %v0_116b4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_1167c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_11710.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11658, { 2, 1, 0 }
  uselistorder i32 %v3_1164c, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_1156c, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_11614, { 1, 0 }
  uselistorder i32 %v3_11608, { 1, 0 }
  uselistorder i32 %v0_11614, { 1, 0 }
  uselistorder i32 %v3_115ec, { 0, 2, 3, 1 }
  uselistorder i32 %v2_115dc, { 1, 0, 2 }
  uselistorder i32 %v3_11594, { 2, 1, 0 }
  uselistorder i32 %v0_11584, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11554, { 1, 0 }
  uselistorder i32 %v1_11508, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11504, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_114a8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_1149c, { 1, 0 }
  uselistorder i32 %v3_1146c, { 1, 0 }
  uselistorder i32 %v0_11460, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_11440, { 0, 2, 1, 3 }
  uselistorder i1 %v7_11434, { 1, 0 }
  uselistorder i32 %v0_1140c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 10, 0, 1, 2, 3, 4, 6, 5, 14, 15, 7, 16, 8, 9, 11, 12, 13 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 41, 42, 43, 45, 46, 47, 48, 1, 2, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 90, 77, 78, 79, 80, 81, 83, 84, 85, 86, 0, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 107, 108, 109, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 54, 42, 43, 44, 45, 46, 55, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 7, 5, 29, 6, 8, 9, 3, 21, 13, 10, 22, 11, 12, 15, 14, 19, 16, 23, 18, 17, 24, 20, 2, 26, 25, 27, 1, 28, 30, 56, 31, 32, 57, 33, 34, 35, 36, 37, 40, 41, 38, 39, 46, 43, 42, 44, 45, 0, 4, 47, 48, 49, 50, 52, 51, 55, 54, 53 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 11, 10, 12, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 35, 22, 23, 42, 41, 27, 24, 0, 25, 26, 28, 36, 37, 38, 39, 40, 29, 30, 31, 32, 33, 34 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_13698, { 1, 0 }
  uselistorder i32 (i32)* @function_11338, { 1, 0 }
  uselistorder label %dec_label_pc_11ca4, { 1, 0 }
  uselistorder label %dec_label_pc_11c88, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_11c84, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_11c74, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_11c08, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_11b84, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_11b7c, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_11a50, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_11984, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_1183c, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_11790, { 1, 0 }
  uselistorder label %dec_label_pc_11798.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1175c, { 1, 0 }
  uselistorder label %dec_label_pc_11710, { 1, 0 }
  uselistorder label %dec_label_pc_116a4, { 1, 0 }
  uselistorder label %dec_label_pc_116a0, { 1, 0 }
  uselistorder label %dec_label_pc_1164c, { 1, 0 }
  uselistorder label %dec_label_pc_11638, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11600, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_115ec, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_11cb8(i32 %arg1) local_unnamed_addr {
dec_label_pc_11cb8:
  %v0_11cb8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11cb8, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_11cb8
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11cb8, %bb
  %v10_11ccc = phi i32 [ %arg1, %dec_label_pc_11cb8 ], [ 0, %bb ]
  ret i32 %v10_11ccc

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_11cd0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11cd0:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_11cd0 = load i32, i32* @r4, align 4
  %v6_11cd0 = load i32, i32* @r5, align 4
  %v9_11cd0 = load i32, i32* @r6, align 4
  %v12_11cd0 = load i32, i32* @lr, align 4
  %v2_11cd8 = icmp eq i32 %arg1, 0
  store i32 123612, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11ce8 = mul i32 %arg2, %arg1
  store i32 %v2_11ce8, i32* @r6, align 4
  br i1 %v2_11cd8, label %dec_label_pc_11d18, label %dec_label_pc_11cf0

dec_label_pc_11cf0:                               ; preds = %dec_label_pc_11cd0
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_11ce8, i32* @r0, align 4
  %v0_11cf8 = call i32 @function_1045c()
  %v0_11cfc = load i32, i32* @r4, align 4
  %v9_11cfc = icmp eq i32 %v0_11cfc, %v0_11cf8
  br i1 %v9_11cfc, label %dec_label_pc_11cf0.dec_label_pc_11d18_crit_edge, label %dec_label_pc_11d04

dec_label_pc_11cf0.dec_label_pc_11d18_crit_edge:  ; preds = %dec_label_pc_11cf0
  %v0_11d1c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11d18

dec_label_pc_11d04:                               ; preds = %dec_label_pc_11cf0
  %v0_11d04 = call i32 @function_10de8()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_11d10 = inttoptr i32 %v0_11d04 to i32*
  store i32 12, i32* %v2_11d10, align 4
  br label %dec_label_pc_11ddc

dec_label_pc_11d18:                               ; preds = %dec_label_pc_11cf0.dec_label_pc_11d18_crit_edge, %dec_label_pc_11cd0
  %v0_11d34 = phi i32 [ %v0_11d1c.pre, %dec_label_pc_11cf0.dec_label_pc_11d18_crit_edge ], [ 123612, %dec_label_pc_11cd0 ]
  %v2_11d1c = add i32 %v0_11d34, 68
  %v3_11d1c = inttoptr i32 %v2_11d1c to i32*
  %v4_11d1c = load i32, i32* %v3_11d1c, align 4
  store i32 %v4_11d1c, i32* @r4, align 4
  %v2_11d34 = add i32 %v0_11d34, 72
  %v3_11d34 = inttoptr i32 %v2_11d34 to i32*
  %v4_11d34 = load i32, i32* %v3_11d34, align 4
  store i32 %v4_11d34, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11d34)
  %v0_11d48 = load i32, i32* @r5, align 4
  %v2_11d48 = add i32 %v0_11d48, 16
  %v3_11d48 = inttoptr i32 %v2_11d48 to i32*
  %v4_11d48 = load i32, i32* %v3_11d48, align 4
  store i32 %v4_11d48, i32* %ip.global-to-local, align 4
  store i32 73044, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11d48)
  %v0_11d54 = load i32, i32* @r6, align 4
  store i32 %v0_11d54, i32* @r0, align 4
  %v0_11d58 = call i32 @function_113b0()
  store i32 %v0_11d58, i32* %r4.global-to-local, align 4
  %v2_11d5c = icmp eq i32 %v0_11d58, 0
  br i1 %v2_11d5c, label %.thread, label %dec_label_pc_11d64

dec_label_pc_11d64:                               ; preds = %dec_label_pc_11d18
  %v1_11d64 = add i32 %v0_11d58, -4
  %v2_11d64 = inttoptr i32 %v1_11d64 to i32*
  %v3_11d64 = load i32, i32* %v2_11d64, align 4
  %v1_11d68 = and i32 %v3_11d64, 2
  %v2_11d68 = icmp eq i32 %v1_11d68, 0
  br i1 %v2_11d68, label %dec_label_pc_11d70, label %.thread

dec_label_pc_11d70:                               ; preds = %dec_label_pc_11d64
  %v1_11d707 = add i32 %v3_11d64, -4
  %v1_11d74 = and i32 %v1_11d707, -4
  store i32 %v1_11d74, i32* @r2, align 4
  %v3_11d78 = udiv i32 %v1_11d74, 4
  store i32 %v3_11d78, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_11d74, 36
  %v2_11d80 = icmp ult i32 %v1_11d74, 33
  %v3_11d80 = or i1 %tmp, %v2_11d80
  br i1 %v3_11d80, label %dec_label_pc_11d8c, label %dec_label_pc_11d84

dec_label_pc_11d84:                               ; preds = %dec_label_pc_11d70
  %v2_11d84 = inttoptr i32 %v0_11d58 to i8*
  %v3_11d84 = call i32 @function_10e40(i8* %v2_11d84, i32 0)
  br label %.thread

dec_label_pc_11d8c:                               ; preds = %dec_label_pc_11d70
  %tmp8 = icmp eq i32 %v1_11d74, 16
  %v2_11d90 = inttoptr i32 %v0_11d58 to i32*
  store i32 0, i32* %v2_11d90, align 4
  %v1_11d94 = load i32, i32* %r4.global-to-local, align 4
  %v2_11d94 = add i32 %v1_11d94, 4
  %v3_11d94 = inttoptr i32 %v2_11d94 to i32*
  store i32 0, i32* %v3_11d94, align 4
  %v1_11d98 = load i32, i32* %r4.global-to-local, align 4
  %v2_11d98 = add i32 %v1_11d98, 8
  %v3_11d98 = inttoptr i32 %v2_11d98 to i32*
  store i32 0, i32* %v3_11d98, align 4
  %v2_11d9c = icmp ult i32 %v1_11d74, 13
  %v3_11d9c = or i1 %tmp8, %v2_11d9c
  br i1 %v3_11d9c, label %.thread, label %dec_label_pc_11da0

dec_label_pc_11da0:                               ; preds = %dec_label_pc_11d8c
  %v0_11da0 = load i32, i32* %ip.global-to-local, align 4
  %v1_11da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_11da4 = add i32 %v1_11da4, 12
  %v3_11da4 = inttoptr i32 %v2_11da4 to i32*
  store i32 0, i32* %v3_11da4, align 4
  %v1_11da8 = load i32, i32* %r4.global-to-local, align 4
  %v2_11da8 = add i32 %v1_11da8, 16
  %v3_11da8 = inttoptr i32 %v2_11da8 to i32*
  store i32 0, i32* %v3_11da8, align 4
  %tmp9 = icmp ult i32 %v0_11da0, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_11db0

dec_label_pc_11db0:                               ; preds = %dec_label_pc_11da0
  %v0_11db0 = load i32, i32* %ip.global-to-local, align 4
  %v7_11db0 = icmp eq i32 %v0_11db0, 9
  %v1_11db4 = load i32, i32* %r4.global-to-local, align 4
  %v2_11db4 = add i32 %v1_11db4, 20
  %v3_11db4 = inttoptr i32 %v2_11db4 to i32*
  store i32 0, i32* %v3_11db4, align 4
  %v1_11db8 = load i32, i32* %r4.global-to-local, align 4
  %v2_11db8 = add i32 %v1_11db8, 24
  %v3_11db8 = inttoptr i32 %v2_11db8 to i32*
  store i32 0, i32* %v3_11db8, align 4
  br i1 %v7_11db0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11db0
  %v2_11dbc = load i32, i32* %r4.global-to-local, align 4
  %v3_11dbc = add i32 %v2_11dbc, 32
  %v4_11dbc = inttoptr i32 %v3_11dbc to i32*
  store i32 0, i32* %v4_11dbc, align 4
  %v2_11dc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_11dc0 = add i32 %v2_11dc0, 28
  %v4_11dc0 = inttoptr i32 %v3_11dc0 to i32*
  store i32 0, i32* %v4_11dc0, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11db0, %dec_label_pc_11d64, %dec_label_pc_11da0, %dec_label_pc_11d8c, %dec_label_pc_11d18, %dec_label_pc_11d84, %bb
  %v0_11dd0 = load i32, i32* @r5, align 4
  %v2_11dd0 = add i32 %v0_11dd0, 24
  %v3_11dd0 = inttoptr i32 %v2_11dd0 to i32*
  %v4_11dd0 = load i32, i32* %v3_11dd0, align 4
  store i32 %v4_11dd0, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_11dd0)
  br label %dec_label_pc_11ddc

dec_label_pc_11ddc:                               ; preds = %dec_label_pc_11d04, %.thread
  %v0_11ddc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_11cd0, i32* @r4, align 4
  store i32 %v6_11cd0, i32* @r5, align 4
  store i32 %v9_11cd0, i32* @r6, align 4
  store i32 %v12_11cd0, i32* @lr, align 4
  ret i32 %v0_11ddc

; uselistorder directives
  uselistorder i32 %v1_11d74, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_11d58, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ddc, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_11df0(i32 %arg1) local_unnamed_addr {
dec_label_pc_11df0:
  %v0_11df0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11df0, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_11df0
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11df0, %bb
  %v10_11e00 = phi i32 [ %arg1, %dec_label_pc_11df0 ], [ 0, %bb ]
  ret i32 %v10_11e00

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_11e04(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11e04:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11e04 = load i32, i32* @r4, align 4
  %v6_11e04 = load i32, i32* @r5, align 4
  %v9_11e04 = load i32, i32* @r6, align 4
  %v12_11e04 = load i32, i32* @r7, align 4
  %v15_11e04 = load i32, i32* @r8, align 4
  %v18_11e04 = load i32, i32* @sb, align 4
  %v21_11e04 = load i32, i32* @sl, align 4
  %v24_11e04 = load i32, i32* @fp, align 4
  %v27_11e04 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11e10 = icmp eq i32* %arg1, null
  store i32 123612, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_11e10, label %dec_label_pc_11e24, label %dec_label_pc_11e34

dec_label_pc_11e24:                               ; preds = %dec_label_pc_11e04
  store i32 %arg2, i32* @r0, align 4
  %v0_11e28 = call i32 @function_113b0()
  store i32 %v0_11e28, i32* %r0.global-to-local, align 4
  store i32 %v0_11e28, i32* @r4, align 4
  br label %dec_label_pc_1218c

dec_label_pc_11e34:                               ; preds = %dec_label_pc_11e04
  %v2_11e34 = icmp eq i32 %arg2, 0
  br i1 %v2_11e34, label %dec_label_pc_11e3c, label %dec_label_pc_11e48

dec_label_pc_11e3c:                               ; preds = %dec_label_pc_11e34
  %v0_11e3c = call i32 @function_1241c()
  store i32 %v0_11e3c, i32* %r0.global-to-local, align 4
  %v0_11e40 = load i32, i32* @r6, align 4
  store i32 %v0_11e40, i32* @r4, align 4
  br label %dec_label_pc_1218c

dec_label_pc_11e48:                               ; preds = %dec_label_pc_11e34
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_11e50 = load i32, i32* inttoptr (i32 123680 to i32*), align 32
  store i32 %v4_11e50, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_11e50, i32* %r2.global-to-local, align 4
  %v4_11e5c = load i32, i32* inttoptr (i32 123648 to i32*), align 256
  store i32 %v4_11e5c, i32* %r1.global-to-local, align 4
  %v2_11e60 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11e60, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_11e68 = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_11e68)
  %v0_11e74 = load i32, i32* @r4, align 4
  store i32 %v0_11e74, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r1.global-to-local, align 4
  %v4_11e80 = load i32, i32* inttoptr (i32 123628 to i32*), align 4
  store i32 %v4_11e80, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11e8c.376 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11e80)
  %v0_11e8c = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_11e8c, -32
  br i1 %tmp36, label %dec_label_pc_11ea8, label %dec_label_pc_11e94

dec_label_pc_11e94:                               ; preds = %dec_label_pc_11e48
  %v0_11e94 = call i32 @function_10de8()
  store i32 %v0_11e94, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_11ea0 = inttoptr i32 %v0_11e94 to i32*
  store i32 12, i32* %v2_11ea0, align 4
  br label %dec_label_pc_1218c

dec_label_pc_11ea8:                               ; preds = %dec_label_pc_11e48
  %v1_11ea8 = add i32 %v0_11e8c, 11
  store i32 %v1_11ea8, i32* %r0.global-to-local, align 4
  %v0_11eac = load i32, i32* @r5, align 4
  %v1_11eac = add i32 %v0_11eac, -4
  %v2_11eac = inttoptr i32 %v1_11eac to i32*
  %v3_11eac = load i32, i32* %v2_11eac, align 4
  store i32 %v3_11eac, i32* %r2.global-to-local, align 4
  %v2_11eb0 = icmp ugt i32 %v1_11ea8, 14
  %v7_11eb0 = icmp eq i32 %v1_11ea8, 15
  %v2_11eb4 = xor i1 %v2_11eb0, true
  %v3_11eb4 = or i1 %v7_11eb0, %v2_11eb4
  br i1 %v3_11eb4, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_11ea8
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_11ea8, %bb
  %v2_11eb8 = xor i1 %v7_11eb0, true
  %v3_11eb8 = and i1 %v2_11eb0, %v2_11eb8
  br i1 %v3_11eb8, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_11eb8 = and i32 %v1_11ea8, -8
  store i32 %v5_11eb8, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_11ebc = and i32 %v3_11eac, 2
  %v2_11ebc = icmp eq i32 %v1_11ebc, 0
  %v1_11ec0 = add i32 %v0_11eac, -8
  store i32 %v1_11ec0, i32* @sl, align 4
  %v1_11ec4 = and i32 %v3_11eac, -4
  store i32 %v1_11ec4, i32* @r6, align 4
  br i1 %v2_11ebc, label %dec_label_pc_11ecc, label %dec_label_pc_120a4

dec_label_pc_11ecc:                               ; preds = %bb29
  %v1_11ecc = load i32, i32* @sb, align 4
  %v3_11ecc = icmp ult i32 %v1_11ec4, %v1_11ecc
  br i1 %v3_11ecc, label %dec_label_pc_11ed8, label %bb30

bb30:                                             ; preds = %dec_label_pc_11ecc
  store i32 %v1_11ec4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1203c

dec_label_pc_11ed8:                               ; preds = %dec_label_pc_11ecc
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11ee0 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_11ee0, i32* %r0.global-to-local, align 4
  %v1_11ee4 = add i32 %v4_11ee0, 44
  %v2_11ee4 = inttoptr i32 %v1_11ee4 to i32*
  %v3_11ee4 = load i32, i32* %v2_11ee4, align 4
  store i32 %v3_11ee4, i32* %r3.global-to-local, align 4
  %v2_11ee8 = add i32 %v1_11ec4, %v1_11ec0
  store i32 %v2_11ee8, i32* @r4, align 4
  %v9_11eec = icmp eq i32 %v2_11ee8, %v3_11ee4
  %v1_11ef0 = add i32 %v2_11ee8, 4
  %v2_11ef0 = inttoptr i32 %v1_11ef0 to i32*
  %v3_11ef0 = load i32, i32* %v2_11ef0, align 4
  store i32 %v3_11ef0, i32* %r1.global-to-local, align 4
  br i1 %v9_11eec, label %dec_label_pc_11ef8, label %dec_label_pc_11f34

dec_label_pc_11ef8:                               ; preds = %dec_label_pc_11ed8
  %v1_11ef8 = and i32 %v3_11ef0, -4
  %v2_11efc = add i32 %v1_11ef8, %v1_11ec4
  store i32 %v2_11efc, i32* %r1.global-to-local, align 4
  %v1_11f00 = add i32 %v1_11ecc, 16
  store i32 %v1_11f00, i32* %r3.global-to-local, align 4
  %v3_11f04 = icmp ult i32 %v2_11efc, %v1_11f00
  br i1 %v3_11f04, label %dec_label_pc_11f88, label %dec_label_pc_11f0c

dec_label_pc_11f0c:                               ; preds = %dec_label_pc_11ef8
  %v2_11f0c = sub i32 %v2_11efc, %v1_11ecc
  %v1_11f10 = urem i32 %v3_11eac, 2
  %v2_11f14 = add i32 %v1_11ecc, %v1_11ec0
  store i32 %v2_11f14, i32* %r1.global-to-local, align 4
  %v2_11f18 = or i32 %v1_11ecc, %v1_11f10
  store i32 %v2_11f18, i32* %r2.global-to-local, align 4
  %v1_11f1c = or i32 %v2_11f0c, 1
  store i32 %v1_11f1c, i32* %r3.global-to-local, align 4
  store i32 %v0_11eac, i32* @r4, align 4
  store i32 %v2_11f18, i32* %v2_11eac, align 4
  %v0_11f28 = load i32, i32* %r1.global-to-local, align 4
  %v1_11f28 = load i32, i32* %r0.global-to-local, align 4
  %v2_11f28 = add i32 %v1_11f28, 44
  %v3_11f28 = inttoptr i32 %v2_11f28 to i32*
  store i32 %v0_11f28, i32* %v3_11f28, align 4
  %v0_11f2c = load i32, i32* %r3.global-to-local, align 4
  %v1_11f2c = load i32, i32* %r1.global-to-local, align 4
  %v2_11f2c = add i32 %v1_11f2c, 4
  %v3_11f2c = inttoptr i32 %v2_11f2c to i32*
  store i32 %v0_11f2c, i32* %v3_11f2c, align 4
  br label %dec_label_pc_12170

dec_label_pc_11f34:                               ; preds = %dec_label_pc_11ed8
  %v1_11f34 = and i32 %v3_11ef0, -2
  %v2_11f38 = add i32 %v1_11f34, %v2_11ee8
  store i32 %v2_11f38, i32* %r3.global-to-local, align 4
  %v1_11f3c = add i32 %v2_11f38, 4
  %v2_11f3c = inttoptr i32 %v1_11f3c to i32*
  %v3_11f3c = load i32, i32* %v2_11f3c, align 4
  store i32 %v3_11f3c, i32* %r3.global-to-local, align 4
  %v1_11f40 = urem i32 %v3_11f3c, 2
  %v2_11f40 = icmp eq i32 %v1_11f40, 0
  br i1 %v2_11f40, label %dec_label_pc_11f48, label %dec_label_pc_11f88

dec_label_pc_11f48:                               ; preds = %dec_label_pc_11f34
  %v1_11f48 = and i32 %v3_11ef0, -4
  store i32 %v1_11f48, i32* %r3.global-to-local, align 4
  %v2_11f4c = add i32 %v1_11f48, %v1_11ec4
  store i32 %v2_11f4c, i32* %r0.global-to-local, align 4
  %v3_11f50 = icmp ult i32 %v2_11f4c, %v1_11ecc
  br i1 %v3_11f50, label %dec_label_pc_11f88, label %dec_label_pc_11f58

dec_label_pc_11f58:                               ; preds = %dec_label_pc_11f48
  %v1_11f58 = add i32 %v1_11ec4, %v0_11eac
  %v2_11f58 = inttoptr i32 %v1_11f58 to i32*
  %v3_11f58 = load i32, i32* %v2_11f58, align 4
  store i32 %v3_11f58, i32* %r1.global-to-local, align 4
  %v1_11f5c = add i32 %v3_11f58, 12
  %v2_11f5c = inttoptr i32 %v1_11f5c to i32*
  %v3_11f5c = load i32, i32* %v2_11f5c, align 4
  store i32 %v3_11f5c, i32* %r3.global-to-local, align 4
  %v9_11f60 = icmp eq i32 %v3_11f5c, %v2_11ee8
  %v1_11f64 = add i32 %v2_11ee8, 12
  %v2_11f64 = inttoptr i32 %v1_11f64 to i32*
  %v3_11f64 = load i32, i32* %v2_11f64, align 4
  store i32 %v3_11f64, i32* %r2.global-to-local, align 4
  br i1 %v9_11f60, label %dec_label_pc_11f6c, label %dec_label_pc_11f78

dec_label_pc_11f6c:                               ; preds = %dec_label_pc_11f58
  %v1_11f6c = add i32 %v3_11f64, 8
  %v2_11f6c = inttoptr i32 %v1_11f6c to i32*
  %v3_11f6c = load i32, i32* %v2_11f6c, align 4
  store i32 %v3_11f6c, i32* %r3.global-to-local, align 4
  %v9_11f70 = icmp eq i32 %v3_11f6c, %v2_11ee8
  br i1 %v9_11f70, label %dec_label_pc_11f7c, label %dec_label_pc_11f78

dec_label_pc_11f78:                               ; preds = %dec_label_pc_11f58, %dec_label_pc_11f6c
  %v0_11f78 = call i32 @function_12698()
  store i32 %v0_11f78, i32* %r0.global-to-local, align 4
  %v0_11f7c.pre = load i32, i32* @r1, align 4
  %v1_11f7c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_11f7c

dec_label_pc_11f7c:                               ; preds = %dec_label_pc_11f6c, %dec_label_pc_11f78
  %v1_11f7c = phi i32 [ %v3_11f64, %dec_label_pc_11f6c ], [ %v1_11f7c.pre, %dec_label_pc_11f78 ]
  %v0_11f7c = phi i32 [ %v3_11f58, %dec_label_pc_11f6c ], [ %v0_11f7c.pre, %dec_label_pc_11f78 ]
  %v2_11f7c = add i32 %v1_11f7c, 8
  %v3_11f7c = inttoptr i32 %v2_11f7c to i32*
  store i32 %v0_11f7c, i32* %v3_11f7c, align 4
  %v0_11f80 = load i32, i32* %r2.global-to-local, align 4
  %v1_11f80 = load i32, i32* %r1.global-to-local, align 4
  %v2_11f80 = add i32 %v1_11f80, 12
  %v3_11f80 = inttoptr i32 %v2_11f80 to i32*
  store i32 %v0_11f80, i32* %v3_11f80, align 4
  %v1_1203c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1203c

dec_label_pc_11f88:                               ; preds = %dec_label_pc_11ef8, %dec_label_pc_11f48, %dec_label_pc_11f34
  %v1_11f88 = add i32 %v1_11ecc, -7
  store i32 %v1_11f88, i32* @r0, align 4
  %v0_11f8c = call i32 @function_113b0()
  store i32 %v0_11f8c, i32* @r0, align 4
  store i32 %v0_11f8c, i32* %r1.global-to-local, align 4
  %v2_11f90 = icmp eq i32 %v0_11f8c, 0
  br i1 %v2_11f90, label %bb31, label %dec_label_pc_11f9c

bb31:                                             ; preds = %dec_label_pc_11f88
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12170

dec_label_pc_11f9c:                               ; preds = %dec_label_pc_11f88
  %v1_11fa4.pre = load i32, i32* @r4, align 4
  %v1_11f9c = add i32 %v0_11f8c, -4
  %v2_11f9c = inttoptr i32 %v1_11f9c to i32*
  %v3_11f9c = load i32, i32* %v2_11f9c, align 4
  store i32 %v3_11f9c, i32* @r3, align 4
  %v1_11fa0 = add i32 %v0_11f8c, -8
  store i32 %v1_11fa0, i32* @r7, align 4
  %v9_11fa4 = icmp eq i32 %v1_11fa0, %v1_11fa4.pre
  br i1 %v9_11fa4, label %.thread2, label %dec_label_pc_11fb4

.thread2:                                         ; preds = %dec_label_pc_11f9c
  %v2_11fa8 = and i32 %v3_11f9c, -4
  store i32 %v2_11fa8, i32* %r3.global-to-local, align 4
  %v2_11fac = load i32, i32* @r6, align 4
  %v3_11fac = add i32 %v2_11fac, %v2_11fa8
  store i32 %v3_11fac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1203c

dec_label_pc_11fb4:                               ; preds = %dec_label_pc_11f9c
  %v0_11fb4 = load i32, i32* @r6, align 4
  %v1_11fb4 = add i32 %v0_11fb4, -4
  store i32 %v1_11fb4, i32* @r2, align 4
  %v3_11fb8 = udiv i32 %v1_11fb4, 4
  store i32 %v3_11fb8, i32* @ip, align 4
  %tmp37 = and i32 %v1_11fb4, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_11fc0 = icmp ult i32 %v1_11fb4, 36
  %v3_11fc0 = or i1 %tmp38, %v2_11fc0
  %v0_11fd0 = load i32, i32* @r5, align 4
  br i1 %v3_11fc0, label %dec_label_pc_11fd0, label %dec_label_pc_11fc4

dec_label_pc_11fc4:                               ; preds = %dec_label_pc_11fb4
  store i32 %v0_11fd0, i32* @r1, align 4
  %v0_11fc8 = call i32 @function_10ef0()
  store i32 %v0_11fc8, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_11fd0:                               ; preds = %dec_label_pc_11fb4
  %v1_11fd0 = inttoptr i32 %v0_11fd0 to i32*
  %v2_11fd0 = load i32, i32* %v1_11fd0, align 4
  store i32 %v2_11fd0, i32* %r3.global-to-local, align 4
  %v2_11fd4 = inttoptr i32 %v0_11f8c to i32*
  store i32 %v2_11fd0, i32* %v2_11fd4, align 4
  %v0_11fd8 = load i32, i32* @r5, align 4
  %v1_11fd8 = add i32 %v0_11fd8, 4
  %v2_11fd8 = inttoptr i32 %v1_11fd8 to i32*
  %v3_11fd8 = load i32, i32* %v2_11fd8, align 4
  store i32 %v3_11fd8, i32* %r3.global-to-local, align 4
  %v1_11fdc = load i32, i32* %r1.global-to-local, align 4
  %v2_11fdc = add i32 %v1_11fdc, 4
  %v3_11fdc = inttoptr i32 %v2_11fdc to i32*
  store i32 %v3_11fd8, i32* %v3_11fdc, align 4
  %v0_11fe0 = load i32, i32* @r5, align 4
  %v1_11fe0 = add i32 %v0_11fe0, 8
  %v2_11fe0 = inttoptr i32 %v1_11fe0 to i32*
  %v3_11fe0 = load i32, i32* %v2_11fe0, align 4
  store i32 %v3_11fe0, i32* %r3.global-to-local, align 4
  %v0_11fe4 = load i32, i32* @ip, align 4
  %v1_11fe8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11fe8 = add i32 %v1_11fe8, 8
  %v3_11fe8 = inttoptr i32 %v2_11fe8 to i32*
  store i32 %v3_11fe0, i32* %v3_11fe8, align 4
  %tmp39 = icmp ult i32 %v0_11fe4, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_11ff0

dec_label_pc_11ff0:                               ; preds = %dec_label_pc_11fd0
  %v0_11ff0 = load i32, i32* @r5, align 4
  %v1_11ff0 = add i32 %v0_11ff0, 12
  %v2_11ff0 = inttoptr i32 %v1_11ff0 to i32*
  %v3_11ff0 = load i32, i32* %v2_11ff0, align 4
  store i32 %v3_11ff0, i32* %r3.global-to-local, align 4
  %v1_11ff4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ff4 = add i32 %v1_11ff4, 12
  %v3_11ff4 = inttoptr i32 %v2_11ff4 to i32*
  store i32 %v3_11ff0, i32* %v3_11ff4, align 4
  %v0_11ff8 = load i32, i32* @r5, align 4
  %v1_11ff8 = add i32 %v0_11ff8, 16
  %v2_11ff8 = inttoptr i32 %v1_11ff8 to i32*
  %v3_11ff8 = load i32, i32* %v2_11ff8, align 4
  store i32 %v3_11ff8, i32* %r3.global-to-local, align 4
  %v0_11ffc = load i32, i32* @ip, align 4
  %v1_12000 = load i32, i32* %r1.global-to-local, align 4
  %v2_12000 = add i32 %v1_12000, 16
  %v3_12000 = inttoptr i32 %v2_12000 to i32*
  store i32 %v3_11ff8, i32* %v3_12000, align 4
  %tmp40 = icmp ult i32 %v0_11ffc, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_12008

dec_label_pc_12008:                               ; preds = %dec_label_pc_11ff0
  %v0_12008 = load i32, i32* @r5, align 4
  %v1_12008 = add i32 %v0_12008, 20
  %v2_12008 = inttoptr i32 %v1_12008 to i32*
  %v3_12008 = load i32, i32* %v2_12008, align 4
  store i32 %v3_12008, i32* %r3.global-to-local, align 4
  %v1_1200c = load i32, i32* %r1.global-to-local, align 4
  %v2_1200c = add i32 %v1_1200c, 20
  %v3_1200c = inttoptr i32 %v2_1200c to i32*
  store i32 %v3_12008, i32* %v3_1200c, align 4
  %v0_12010 = load i32, i32* @r5, align 4
  %v1_12010 = add i32 %v0_12010, 24
  %v2_12010 = inttoptr i32 %v1_12010 to i32*
  %v3_12010 = load i32, i32* %v2_12010, align 4
  store i32 %v3_12010, i32* %r3.global-to-local, align 4
  %v1_12014 = load i32, i32* %r1.global-to-local, align 4
  %v2_12014 = add i32 %v1_12014, 24
  %v3_12014 = inttoptr i32 %v2_12014 to i32*
  store i32 %v3_12010, i32* %v3_12014, align 4
  %v0_12018 = load i32, i32* @ip, align 4
  %v7_12018 = icmp eq i32 %v0_12018, 9
  br i1 %v7_12018, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_12008
  %v1_1201c = load i32, i32* @r5, align 4
  %v2_1201c = add i32 %v1_1201c, 28
  %v3_1201c = inttoptr i32 %v2_1201c to i32*
  %v4_1201c = load i32, i32* %v3_1201c, align 4
  store i32 %v4_1201c, i32* %r3.global-to-local, align 4
  %v2_12020 = load i32, i32* %r1.global-to-local, align 4
  %v3_12020 = add i32 %v2_12020, 28
  %v4_12020 = inttoptr i32 %v3_12020 to i32*
  store i32 %v4_1201c, i32* %v4_12020, align 4
  %v1_12024 = load i32, i32* @r5, align 4
  %v2_12024 = add i32 %v1_12024, 32
  %v3_12024 = inttoptr i32 %v2_12024 to i32*
  %v4_12024 = load i32, i32* %v3_12024, align 4
  store i32 %v4_12024, i32* %r3.global-to-local, align 4
  %v2_12028 = load i32, i32* %r1.global-to-local, align 4
  %v3_12028 = add i32 %v2_12028, 32
  %v4_12028 = inttoptr i32 %v3_12028 to i32*
  store i32 %v4_12024, i32* %v4_12028, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_12008, %dec_label_pc_11ff0, %dec_label_pc_11fd0, %dec_label_pc_11fc4, %bb32
  %v0_1202c = load i32, i32* @r5, align 4
  store i32 %v0_1202c, i32* @r0, align 4
  %v0_12030 = call i32 @function_1241c()
  store i32 %v0_12030, i32* %r0.global-to-local, align 4
  %v0_12034 = load i32, i32* @r7, align 4
  %v1_12034 = add i32 %v0_12034, 8
  store i32 %v1_12034, i32* @r4, align 4
  br label %dec_label_pc_12170

dec_label_pc_1203c:                               ; preds = %bb30, %.thread2, %dec_label_pc_11f7c
  %v0_12050 = phi i32 [ %v3_11fac, %.thread2 ], [ %v1_11ec4, %bb30 ], [ %v1_1203c.pre, %dec_label_pc_11f7c ]
  %v0_1203c = load i32, i32* @sb, align 4
  %v2_1203c = sub i32 %v0_12050, %v0_1203c
  store i32 %v2_1203c, i32* %r1.global-to-local, align 4
  %v0_12044 = load i32, i32* @sl, align 4
  %v1_12044 = add i32 %v0_12044, 4
  %v2_12044 = inttoptr i32 %v1_12044 to i32*
  %v3_12044 = load i32, i32* %v2_12044, align 4
  %tmp41 = icmp ugt i32 %v2_1203c, 15
  %v1_1206c = urem i32 %v3_12044, 2
  store i32 %v1_1206c, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_1206c, label %dec_label_pc_1204c

dec_label_pc_1204c:                               ; preds = %dec_label_pc_1203c
  %v2_12050 = or i32 %v1_1206c, %v0_12050
  store i32 %v2_12050, i32* %r3.global-to-local, align 4
  store i32 %v2_12050, i32* %v2_12044, align 4
  %v0_12058 = load i32, i32* @sl, align 4
  %v1_12058 = load i32, i32* %r0.global-to-local, align 4
  %v2_12058 = add i32 %v1_12058, %v0_12058
  store i32 %v2_12058, i32* %r2.global-to-local, align 4
  %v1_1205c = add i32 %v2_12058, 4
  %v2_1205c = inttoptr i32 %v1_1205c to i32*
  %v3_1205c = load i32, i32* %v2_1205c, align 4
  %v1_12060 = or i32 %v3_1205c, 1
  store i32 %v1_12060, i32* %r3.global-to-local, align 4
  store i32 %v1_12060, i32* %v2_1205c, align 4
  br label %dec_label_pc_1209c

dec_label_pc_1206c:                               ; preds = %dec_label_pc_1203c
  %v2_12070 = add i32 %v0_12044, %v0_1203c
  store i32 %v2_12070, i32* %r0.global-to-local, align 4
  %v2_12074 = or i32 %v1_1206c, %v0_1203c
  store i32 %v2_12074, i32* %r3.global-to-local, align 4
  %v1_12078 = or i32 %v2_1203c, 1
  store i32 %v1_12078, i32* %r2.global-to-local, align 4
  store i32 %v2_12074, i32* %v2_12044, align 4
  %v0_12080 = load i32, i32* %r2.global-to-local, align 4
  %v1_12080 = load i32, i32* %r0.global-to-local, align 4
  %v2_12080 = add i32 %v1_12080, 4
  %v3_12080 = inttoptr i32 %v2_12080 to i32*
  store i32 %v0_12080, i32* %v3_12080, align 4
  %v0_12084 = load i32, i32* %r0.global-to-local, align 4
  %v1_12084 = load i32, i32* %r1.global-to-local, align 4
  %v2_12084 = add i32 %v1_12084, %v0_12084
  store i32 %v2_12084, i32* %r2.global-to-local, align 4
  %v1_12088 = add i32 %v2_12084, 4
  %v2_12088 = inttoptr i32 %v1_12088 to i32*
  %v3_12088 = load i32, i32* %v2_12088, align 4
  %v1_1208c = or i32 %v3_12088, 1
  store i32 %v1_1208c, i32* %r3.global-to-local, align 4
  store i32 %v1_1208c, i32* %v2_12088, align 4
  %v0_12094 = load i32, i32* %r0.global-to-local, align 4
  %v1_12094 = add i32 %v0_12094, 8
  store i32 %v1_12094, i32* @r0, align 4
  %v0_12098 = call i32 @function_1241c()
  store i32 %v0_12098, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1209c

dec_label_pc_1209c:                               ; preds = %dec_label_pc_1204c, %dec_label_pc_1206c
  %v0_1209c = load i32, i32* @sl, align 4
  %v1_1209c = add i32 %v0_1209c, 8
  store i32 %v1_1209c, i32* @r4, align 4
  br label %dec_label_pc_12170

dec_label_pc_120a4:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r1.global-to-local, align 4
  %v4_120ac = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_120ac, i32* @r8, align 4
  %v2_120b0 = inttoptr i32 %v1_11ec0 to i32*
  %v3_120b0 = load i32, i32* %v2_120b0, align 4
  store i32 %v3_120b0, i32* @r4, align 4
  %v1_120b4 = add i32 %v4_120ac, 860
  %v2_120b4 = inttoptr i32 %v1_120b4 to i32*
  %v3_120b4 = load i32, i32* %v2_120b4, align 4
  %v1_120b8 = add i32 %v3_120b0, 4
  %v1_120bc = add i32 %v3_120b4, -1
  store i32 %v1_120bc, i32* %r2.global-to-local, align 4
  %v2_120c0 = add i32 %v1_120b8, %v1_120bc
  %v1_120c4 = load i32, i32* @sb, align 4
  %v2_120c4 = add i32 %v2_120c0, %v1_120c4
  store i32 %v2_120c4, i32* %r3.global-to-local, align 4
  %v2_120c8 = sub i32 0, %v3_120b4
  %v3_120c8 = and i32 %v2_120c4, %v2_120c8
  store i32 %v3_120c8, i32* @r7, align 4
  %v2_120cc = sub i32 %v3_120c8, %v3_120b0
  store i32 %v2_120cc, i32* @fp, align 4
  %v9_120d0 = icmp eq i32 %v1_11ec4, %v2_120cc
  br i1 %v9_120d0, label %dec_label_pc_12144, label %dec_label_pc_120d8

dec_label_pc_120d8:                               ; preds = %dec_label_pc_120a4
  %v2_120d8 = sub i32 %v1_11ec0, %v3_120b0
  store i32 %v2_120d8, i32* %r0.global-to-local, align 4
  %v2_120dc = add i32 %v3_120b0, %v1_11ec4
  store i32 %v2_120dc, i32* %r1.global-to-local, align 4
  store i32 %v3_120c8, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_120e8 = call i32 @function_13c68(i32 %v2_120d8, i32 %v2_120dc, i32 %v3_120c8, i32 1)
  store i32 %v4_120e8, i32* %r0.global-to-local, align 4
  %v7_120ec = icmp eq i32 %v4_120e8, -1
  br i1 %v7_120ec, label %dec_label_pc_12138, label %dec_label_pc_120f4

dec_label_pc_120f4:                               ; preds = %dec_label_pc_120d8
  %v1_120f4 = load i32, i32* @r4, align 4
  %v2_120f4 = add i32 %v1_120f4, %v4_120e8
  store i32 %v2_120f4, i32* %r0.global-to-local, align 4
  %v0_120f8 = load i32, i32* @fp, align 4
  %v1_120f8 = or i32 %v0_120f8, 2
  store i32 %v1_120f8, i32* %r3.global-to-local, align 4
  %v2_120fc = add i32 %v2_120f4, 4
  %v3_120fc = inttoptr i32 %v2_120fc to i32*
  store i32 %v1_120f8, i32* %v3_120fc, align 4
  %v0_12100 = load i32, i32* @r8, align 4
  %v1_12100 = add i32 %v0_12100, 868
  %v2_12100 = inttoptr i32 %v1_12100 to i32*
  %v3_12100 = load i32, i32* %v2_12100, align 4
  store i32 %v3_12100, i32* %r3.global-to-local, align 4
  %v1_12104 = add i32 %v0_12100, 880
  %v2_12104 = inttoptr i32 %v1_12104 to i32*
  %v3_12104 = load i32, i32* %v2_12104, align 4
  store i32 %v3_12104, i32* %r2.global-to-local, align 4
  %v0_12108 = load i32, i32* @r6, align 4
  %v2_12108 = sub i32 %v3_12100, %v0_12108
  store i32 %v2_12108, i32* %r3.global-to-local, align 4
  %v1_1210c = load i32, i32* @r7, align 4
  %v2_1210c = add i32 %v1_1210c, %v2_12108
  store i32 %v2_1210c, i32* %r1.global-to-local, align 4
  %v1_12110 = add i32 %v0_12100, 872
  %v2_12110 = inttoptr i32 %v1_12110 to i32*
  %v3_12110 = load i32, i32* %v2_12110, align 4
  store i32 %v3_12110, i32* %r3.global-to-local, align 4
  %v1_12118 = add i32 %v0_12100, 884
  %v2_12118 = inttoptr i32 %v1_12118 to i32*
  %v3_12118 = load i32, i32* %v2_12118, align 4
  store i32 %v3_12118, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_1210c, %v3_12104
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_120f4
  store i32 %v2_1210c, i32* %v2_12104, align 4
  %v0_12120.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12120.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_120f4, %bb33
  %v1_12120 = phi i32 [ %v0_12100, %dec_label_pc_120f4 ], [ %v1_12120.pre, %bb33 ]
  %v0_12120 = phi i32 [ %v2_1210c, %dec_label_pc_120f4 ], [ %v0_12120.pre, %bb33 ]
  %v2_12120 = add i32 %v1_12120, 868
  %v3_12120 = inttoptr i32 %v2_12120 to i32*
  store i32 %v0_12120, i32* %v3_12120, align 4
  %v0_12124 = load i32, i32* %r1.global-to-local, align 4
  %v1_12124 = load i32, i32* %r3.global-to-local, align 4
  %v2_12124 = add i32 %v1_12124, %v0_12124
  store i32 %v2_12124, i32* %r1.global-to-local, align 4
  %v1_12128 = load i32, i32* %r2.global-to-local, align 4
  %v0_1212c = load i32, i32* %r0.global-to-local, align 4
  %v1_1212c = add i32 %v0_1212c, 8
  store i32 %v1_1212c, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_12124, %v1_12128
  br i1 %tmp43, label %bb35, label %dec_label_pc_12170

bb35:                                             ; preds = %bb34
  %v5_12130 = load i32, i32* @r8, align 4
  %v6_12130 = add i32 %v5_12130, 884
  %v7_12130 = inttoptr i32 %v6_12130 to i32*
  store i32 %v2_12124, i32* %v7_12130, align 4
  br label %dec_label_pc_12170

dec_label_pc_12138:                               ; preds = %dec_label_pc_120d8
  %v0_12138 = load i32, i32* @sb, align 4
  %v1_12138 = add i32 %v0_12138, 4
  store i32 %v1_12138, i32* %r3.global-to-local, align 4
  %v0_1213c = load i32, i32* @r6, align 4
  %v3_1213c = icmp ult i32 %v0_1213c, %v1_12138
  br i1 %v3_1213c, label %dec_label_pc_1214c, label %dec_label_pc_12138.dec_label_pc_12144_crit_edge

dec_label_pc_12138.dec_label_pc_12144_crit_edge:  ; preds = %dec_label_pc_12138
  %v0_12144.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12144

dec_label_pc_12144:                               ; preds = %dec_label_pc_12138.dec_label_pc_12144_crit_edge, %dec_label_pc_120a4
  %v0_12144 = phi i32 [ %v0_12144.pre, %dec_label_pc_12138.dec_label_pc_12144_crit_edge ], [ %v0_11eac, %dec_label_pc_120a4 ]
  store i32 %v0_12144, i32* @r4, align 4
  br label %dec_label_pc_12170

dec_label_pc_1214c:                               ; preds = %dec_label_pc_12138
  %v1_1214c = add i32 %v0_12138, -7
  store i32 %v1_1214c, i32* @r0, align 4
  %v0_12150 = call i32 @function_113b0()
  store i32 %v0_12150, i32* @r0, align 4
  store i32 %v0_12150, i32* @r4, align 4
  %v2_12154 = icmp eq i32 %v0_12150, 0
  br i1 %v2_12154, label %dec_label_pc_12170, label %dec_label_pc_1215c

dec_label_pc_1215c:                               ; preds = %dec_label_pc_1214c
  %v0_1215c = load i32, i32* @r6, align 4
  %v1_1215c = add i32 %v0_1215c, -8
  store i32 %v1_1215c, i32* @r2, align 4
  %v0_12160 = load i32, i32* @r5, align 4
  store i32 %v0_12160, i32* @r1, align 4
  %v0_12164 = call i32 @function_10ef0()
  %v0_12168 = load i32, i32* @r5, align 4
  store i32 %v0_12168, i32* @r0, align 4
  %v0_1216c = call i32 @function_1241c()
  store i32 %v0_1216c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12170

dec_label_pc_12170:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_1214c, %dec_label_pc_12144, %dec_label_pc_1209c, %.thread6, %dec_label_pc_11f0c, %dec_label_pc_1215c
  store i32 %v2_11e60, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r2.global-to-local, align 4
  %v4_12180 = load i32, i32* inttoptr (i32 123636 to i32*), align 4
  store i32 %v4_12180, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_12180)
  br label %dec_label_pc_1218c

dec_label_pc_1218c:                               ; preds = %dec_label_pc_11e94, %dec_label_pc_11e3c, %dec_label_pc_11e24, %dec_label_pc_12170
  %v0_1218c = load i32, i32* @r4, align 4
  store i32 %v0_1218c, i32* %r0.global-to-local, align 4
  store i32 %v3_11e04, i32* @r4, align 4
  store i32 %v6_11e04, i32* @r5, align 4
  store i32 %v9_11e04, i32* @r6, align 4
  store i32 %v12_11e04, i32* @r7, align 4
  store i32 %v15_11e04, i32* @r8, align 4
  store i32 %v18_11e04, i32* @sb, align 4
  store i32 %v21_11e04, i32* @sl, align 4
  store i32 %v24_11e04, i32* @fp, align 4
  store i32 %v27_11e04, i32* @lr, align 4
  ret i32 %v0_1218c

; uselistorder directives
  uselistorder i32 %v2_12124, { 1, 0, 2 }
  uselistorder i32 %v2_1210c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_120e8, { 1, 0, 2 }
  uselistorder i32 %v3_120c8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1206c, { 2, 1, 0 }
  uselistorder i32 %v2_1203c, { 1, 0, 2 }
  uselistorder i32 %v0_11fd0, { 1, 0 }
  uselistorder i32 %v0_11f8c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_11ef0, { 0, 2, 1, 3 }
  uselistorder i32 %v2_11ee8, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_11ecc, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_11ec4, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_11ec0, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_11eb0, { 1, 0 }
  uselistorder i32 %v0_11eac, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_11e8c, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 11, 7, 8, 9, 10, 21, 12, 14, 13, 20, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_1218c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12170, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_1209c, { 1, 0 }
  uselistorder label %dec_label_pc_1203c, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_11f88, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11f7c, { 1, 0 }
  uselistorder label %dec_label_pc_11f78, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_121a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_121a0:
  %v0_121a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_121a0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_121a0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_121a0, %bb
  %v10_121b4 = phi i32 [ %arg1, %dec_label_pc_121a0 ], [ 0, %bb ]
  ret i32 %v10_121b4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_121b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_121b8:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_121b8 = add i32 %arg2, 44
  %v2_121b8 = inttoptr i32 %v1_121b8 to i32*
  %v3_121b8 = load i32, i32* %v2_121b8, align 4
  %v1_121c0 = add i32 %v3_121b8, 4
  %v2_121c0 = inttoptr i32 %v1_121c0 to i32*
  %v3_121c0 = load i32, i32* %v2_121c0, align 4
  %v1_121c4 = add i32 %arg2, 860
  %v2_121c4 = inttoptr i32 %v1_121c4 to i32*
  %v3_121c4 = load i32, i32* %v2_121c4, align 4
  store i32 %v3_121c4, i32* @r4, align 4
  %v1_121c8 = and i32 %v3_121c0, -4
  store i32 %v1_121c8, i32* @r6, align 4
  %v1_121cc = add i32 %v1_121c8, -17
  %v2_121d0 = add i32 %v1_121cc, %v3_121c4
  store i32 %arg2, i32* @r5, align 4
  %v2_121dc = sub i32 %v2_121d0, %arg1
  store i32 %v2_121dc, i32* @r0, align 4
  store i32 %v3_121c4, i32* @r1, align 4
  %v0_121e4 = call i32 @function_1045c()
  %v1_121e8 = add i32 %v0_121e4, -1
  store i32 %v1_121e8, i32* %r0.global-to-local, align 4
  %v0_121ec = load i32, i32* @r4, align 4
  %v2_121ec = mul i32 %v0_121ec, %v1_121e8
  store i32 %v2_121ec, i32* %r7.global-to-local, align 4
  %v2_121f0 = icmp eq i32 %v2_121ec, 0
  store i1 %v2_121f0, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_121ec, 1
  br i1 %tmp8, label %dec_label_pc_12258, label %dec_label_pc_121f8

dec_label_pc_121f8:                               ; preds = %dec_label_pc_121b8
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_121fc = call i32 @function_13924(i32 0)
  store i32 %v1_121fc, i32* %r0.global-to-local, align 4
  %v0_12200 = load i32, i32* @r5, align 4
  %v1_12200 = add i32 %v0_12200, 44
  %v2_12200 = inttoptr i32 %v1_12200 to i32*
  %v3_12200 = load i32, i32* %v2_12200, align 4
  %v0_12204 = load i32, i32* @r6, align 4
  %v2_12204 = add i32 %v0_12204, %v3_12200
  %v9_12208 = icmp eq i32 %v1_121fc, %v2_12204
  store i1 %v9_12208, i1* @cpsr_z, align 1
  store i32 %v1_121fc, i32* @r4, align 4
  br i1 %v9_12208, label %dec_label_pc_12214, label %dec_label_pc_12258

dec_label_pc_12214:                               ; preds = %dec_label_pc_121f8
  %v0_12214 = load i32, i32* %r7.global-to-local, align 4
  %v1_12214 = sub i32 0, %v0_12214
  store i32 %v1_12214, i32* %r0.global-to-local, align 4
  %v1_12218 = call i32 @function_13924(i32 %v1_12214)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12220 = call i32 @function_13924(i32 0)
  store i32 %v1_12220, i32* %r0.global-to-local, align 4
  %v7_12224 = icmp eq i32 %v1_12220, -1
  store i1 %v7_12224, i1* @cpsr_z, align 1
  br i1 %v7_12224, label %dec_label_pc_12258, label %dec_label_pc_1222c

dec_label_pc_1222c:                               ; preds = %dec_label_pc_12214
  %v0_1222c = load i32, i32* @r4, align 4
  %v2_1222c = sub i32 %v0_1222c, %v1_12220
  store i32 %v2_1222c, i32* %r0.global-to-local, align 4
  %v9_1222c = icmp eq i32 %v0_1222c, %v1_12220
  store i1 %v9_1222c, i1* @cpsr_z, align 1
  br i1 %v9_1222c, label %dec_label_pc_12258, label %dec_label_pc_12234

dec_label_pc_12234:                               ; preds = %dec_label_pc_1222c
  %v0_12234 = load i32, i32* @r5, align 4
  %v1_12234 = add i32 %v0_12234, 872
  %v2_12234 = inttoptr i32 %v1_12234 to i32*
  %v3_12234 = load i32, i32* %v2_12234, align 4
  %v1_12238 = load i32, i32* @r6, align 4
  %v2_12238 = sub i32 %v1_12238, %v2_1222c
  store i32 %v2_12238, i32* %r2.global-to-local, align 4
  %v1_1223c = add i32 %v0_12234, 44
  %v2_1223c = inttoptr i32 %v1_1223c to i32*
  %v3_1223c = load i32, i32* %v2_1223c, align 4
  store i32 %v3_1223c, i32* %r1.global-to-local, align 4
  %v2_12240 = sub i32 %v3_12234, %v2_1222c
  %v1_12244 = or i32 %v2_12238, 1
  store i32 %v1_12244, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_12240, i32* %v2_12234, align 4
  %v0_12250 = load i32, i32* %r2.global-to-local, align 4
  %v1_12250 = load i32, i32* %r1.global-to-local, align 4
  %v2_12250 = add i32 %v1_12250, 4
  %v3_12250 = inttoptr i32 %v2_12250 to i32*
  store i32 %v0_12250, i32* %v3_12250, align 4
  %v1_12264.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1225c

dec_label_pc_12258:                               ; preds = %dec_label_pc_121f8, %dec_label_pc_1222c, %dec_label_pc_12214, %dec_label_pc_121b8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1225c

dec_label_pc_1225c:                               ; preds = %dec_label_pc_12234, %dec_label_pc_12258
  %v1_12264 = phi i32 [ %v1_12264.pre, %dec_label_pc_12234 ], [ 0, %dec_label_pc_12258 ]
  ret i32 %v1_12264

; uselistorder directives
  uselistorder i1 %v7_12224, { 1, 0 }
  uselistorder i32 %v1_12220, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_13924, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_1225c, { 1, 0 }
  uselistorder label %dec_label_pc_12258, { 1, 2, 0, 3 }
}

define i32 @function_12268() local_unnamed_addr {
dec_label_pc_12268:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12268 = load i32, i32* @r4, align 4
  store i32 %v3_12268, i32* %stack_var_-36, align 4
  %v0_1226c = load i32, i32* @r0, align 4
  %v1_1226c = inttoptr i32 %v0_1226c to i32*
  %v2_1226c = load i32, i32* %v1_1226c, align 4
  store i32 %v2_1226c, i32* %r3.global-to-local, align 4
  %v2_12270 = icmp eq i32 %v2_1226c, 0
  store i32 %v0_1226c, i32* @r4, align 4
  br i1 %v2_12270, label %dec_label_pc_123a8.preheader, label %dec_label_pc_12284

dec_label_pc_123a8.preheader:                     ; preds = %dec_label_pc_12268
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_123b025 = add i32 %v0_1226c, 52
  store i32 %v1_123b025, i32* %r3.global-to-local, align 4
  %v2_123b826 = add i32 %v0_1226c, 60
  %v3_123b827 = inttoptr i32 %v2_123b826 to i32*
  store i32 %v1_123b025, i32* %v3_123b827, align 4
  %v0_123bc28 = load i32, i32* %r3.global-to-local, align 4
  %v2_123bc29 = add i32 %v0_123bc28, 12
  %v3_123bc30 = inttoptr i32 %v2_123bc29 to i32*
  store i32 %v0_123bc28, i32* %v3_123bc30, align 4
  br label %dec_label_pc_123a8.dec_label_pc_123a8_crit_edge

dec_label_pc_12284:                               ; preds = %dec_label_pc_12268
  %v1_12284 = and i32 %v2_1226c, -3
  %v3_12288 = udiv i32 %v2_1226c, 8
  store i32 %v3_12288, i32* %r2.global-to-local, align 4
  store i32 %v1_12284, i32* %v1_1226c, align 4
  %v0_12290 = load i32, i32* @r0, align 4
  %v1_12290 = add i32 %v0_12290, -4
  store i32 %v1_12290, i32* %r3.global-to-local, align 4
  %v1_12294 = load i32, i32* %r2.global-to-local, align 4
  %v4_12294 = mul i32 %v1_12294, 4
  %v5_12294 = add i32 %v4_12294, %v1_12290
  store i32 %v5_12294, i32* %sb.global-to-local, align 4
  %v1_12298 = add i32 %v0_12290, 52
  store i32 %v1_12298, i32* %r7.global-to-local, align 4
  %v1_1229c = add i32 %v0_12290, 4
  store i32 %v1_1229c, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_122a4

dec_label_pc_122a4:                               ; preds = %dec_label_pc_123a0, %dec_label_pc_12284
  %v1_1239810 = phi i32 [ %v1_12398, %dec_label_pc_123a0 ], [ %v5_12294, %dec_label_pc_12284 ]
  %v1_122b0 = phi i32 [ %v1_123a0, %dec_label_pc_123a0 ], [ %v1_1229c, %dec_label_pc_12284 ]
  %v1_122a4 = inttoptr i32 %v1_122b0 to i32*
  %v2_122a4 = load i32, i32* %v1_122a4, align 4
  store i32 %v2_122a4, i32* %r1.global-to-local, align 4
  %v2_122a8 = icmp eq i32 %v2_122a4, 0
  br i1 %v2_122a8, label %dec_label_pc_12398, label %dec_label_pc_122b0

dec_label_pc_122b0:                               ; preds = %dec_label_pc_122a4
  %v0_122b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_122b0, i32* %v1_122a4, align 4
  %v0_122b4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_122b4

dec_label_pc_122b4:                               ; preds = %dec_label_pc_1238c, %dec_label_pc_122b0
  %v0_122d0 = phi i32 [ %v0_1238c, %dec_label_pc_1238c ], [ %v0_122b4.pre, %dec_label_pc_122b0 ]
  %v1_122b4 = add i32 %v0_122d0, 4
  %v2_122b4 = inttoptr i32 %v1_122b4 to i32*
  %v3_122b4 = load i32, i32* %v2_122b4, align 4
  store i32 %v3_122b4, i32* %r3.global-to-local, align 4
  %v1_122b8 = and i32 %v3_122b4, -2
  store i32 %v1_122b8, i32* %lr.global-to-local, align 4
  %v2_122bc = add i32 %v1_122b8, %v0_122d0
  store i32 %v2_122bc, i32* @r0, align 4
  %v1_122c0 = urem i32 %v3_122b4, 2
  %v2_122c0 = icmp eq i32 %v1_122c0, 0
  %v1_122c4 = add i32 %v0_122d0, 8
  %v2_122c4 = inttoptr i32 %v1_122c4 to i32*
  %v3_122c4 = load i32, i32* %v2_122c4, align 4
  store i32 %v3_122c4, i32* %sl.global-to-local, align 4
  %v1_122c8 = add i32 %v2_122bc, 4
  %v2_122c8 = inttoptr i32 %v1_122c8 to i32*
  %v3_122c8 = load i32, i32* %v2_122c8, align 4
  store i32 %v3_122c8, i32* %r8.global-to-local, align 4
  br i1 %v2_122c0, label %dec_label_pc_122d0, label %dec_label_pc_12304

dec_label_pc_122d0:                               ; preds = %dec_label_pc_122b4
  %v1_122d0 = inttoptr i32 %v0_122d0 to i32*
  %v2_122d0 = load i32, i32* %v1_122d0, align 4
  store i32 %v2_122d0, i32* %r5.global-to-local, align 4
  %v2_122d4 = sub i32 %v0_122d0, %v2_122d0
  store i32 %v2_122d4, i32* %r3.global-to-local, align 4
  %v1_122d8 = add i32 %v2_122d4, 8
  %v2_122d8 = inttoptr i32 %v1_122d8 to i32*
  %v3_122d8 = load i32, i32* %v2_122d8, align 4
  store i32 %v3_122d8, i32* @ip, align 4
  %v1_122dc = add i32 %v3_122d8, 12
  %v2_122dc = inttoptr i32 %v1_122dc to i32*
  %v3_122dc = load i32, i32* %v2_122dc, align 4
  store i32 %v3_122dc, i32* %r1.global-to-local, align 4
  %v9_122e0 = icmp eq i32 %v3_122dc, %v2_122d4
  %v1_122e4 = add i32 %v2_122d4, 12
  %v2_122e4 = inttoptr i32 %v1_122e4 to i32*
  %v3_122e4 = load i32, i32* %v2_122e4, align 4
  store i32 %v3_122e4, i32* %r2.global-to-local, align 4
  br i1 %v9_122e0, label %dec_label_pc_122ec, label %dec_label_pc_12348

dec_label_pc_122ec:                               ; preds = %dec_label_pc_122d0
  %v1_122ec = add i32 %v3_122e4, 8
  %v2_122ec = inttoptr i32 %v1_122ec to i32*
  %v3_122ec = load i32, i32* %v2_122ec, align 4
  store i32 %v3_122ec, i32* %r3.global-to-local, align 4
  %v9_122f0 = icmp eq i32 %v3_122ec, %v2_122d4
  br i1 %v9_122f0, label %dec_label_pc_122f8, label %dec_label_pc_12348

dec_label_pc_122f8:                               ; preds = %dec_label_pc_122ec
  store i32 %v3_122d8, i32* %v2_122ec, align 4
  %v0_122fc = load i32, i32* %r2.global-to-local, align 4
  %v1_122fc = load i32, i32* @ip, align 4
  %v2_122fc = add i32 %v1_122fc, 12
  %v3_122fc = inttoptr i32 %v2_122fc to i32*
  store i32 %v0_122fc, i32* %v3_122fc, align 4
  %v0_12300 = load i32, i32* %lr.global-to-local, align 4
  %v1_12300 = load i32, i32* %r5.global-to-local, align 4
  %v2_12300 = add i32 %v1_12300, %v0_12300
  store i32 %v2_12300, i32* %lr.global-to-local, align 4
  %v0_12308.pre = load i32, i32* @r0, align 4
  %v0_1230c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12304

dec_label_pc_12304:                               ; preds = %dec_label_pc_122b4, %dec_label_pc_122f8
  %v0_1237c = phi i32 [ %v1_122b8, %dec_label_pc_122b4 ], [ %v2_12300, %dec_label_pc_122f8 ]
  %v0_1230c = phi i32 [ %v3_122c8, %dec_label_pc_122b4 ], [ %v0_1230c.pre, %dec_label_pc_122f8 ]
  %v1_12320 = phi i32 [ %v2_122bc, %dec_label_pc_122b4 ], [ %v0_12308.pre, %dec_label_pc_122f8 ]
  %v0_12304 = load i32, i32* @r4, align 4
  %v1_12304 = add i32 %v0_12304, 44
  %v2_12304 = inttoptr i32 %v1_12304 to i32*
  %v3_12304 = load i32, i32* %v2_12304, align 4
  store i32 %v3_12304, i32* %r3.global-to-local, align 4
  %v9_12308 = icmp eq i32 %v1_12320, %v3_12304
  %v1_1230c = and i32 %v0_1230c, -4
  store i32 %v1_1230c, i32* %r5.global-to-local, align 4
  br i1 %v9_12308, label %dec_label_pc_1237c, label %dec_label_pc_12314

dec_label_pc_12314:                               ; preds = %dec_label_pc_12304
  %v2_12314 = add i32 %v1_12320, %v1_1230c
  store i32 %v2_12314, i32* %r3.global-to-local, align 4
  %v1_12318 = add i32 %v2_12314, 4
  %v2_12318 = inttoptr i32 %v1_12318 to i32*
  %v3_12318 = load i32, i32* %v2_12318, align 4
  store i32 %v3_12318, i32* %r3.global-to-local, align 4
  %v1_1231c = urem i32 %v3_12318, 2
  %v2_1231c = icmp eq i32 %v1_1231c, 0
  %v2_12320 = add i32 %v1_12320, 4
  %v3_12320 = inttoptr i32 %v2_12320 to i32*
  store i32 %v1_1230c, i32* %v3_12320, align 4
  br i1 %v2_1231c, label %dec_label_pc_12328, label %dec_label_pc_12314.dec_label_pc_12358_crit_edge

dec_label_pc_12314.dec_label_pc_12358_crit_edge:  ; preds = %dec_label_pc_12314
  %v0_1235c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12358

dec_label_pc_12328:                               ; preds = %dec_label_pc_12314
  %v0_12328 = load i32, i32* @r0, align 4
  %v1_12328 = add i32 %v0_12328, 8
  %v2_12328 = inttoptr i32 %v1_12328 to i32*
  %v3_12328 = load i32, i32* %v2_12328, align 4
  store i32 %v3_12328, i32* @ip, align 4
  %v1_1232c = add i32 %v3_12328, 12
  %v2_1232c = inttoptr i32 %v1_1232c to i32*
  %v3_1232c = load i32, i32* %v2_1232c, align 4
  store i32 %v3_1232c, i32* %r3.global-to-local, align 4
  %v9_12330 = icmp eq i32 %v3_1232c, %v0_12328
  %v1_12334 = add i32 %v0_12328, 12
  %v2_12334 = inttoptr i32 %v1_12334 to i32*
  %v3_12334 = load i32, i32* %v2_12334, align 4
  store i32 %v3_12334, i32* %r2.global-to-local, align 4
  br i1 %v9_12330, label %dec_label_pc_1233c, label %dec_label_pc_12348

dec_label_pc_1233c:                               ; preds = %dec_label_pc_12328
  %v1_1233c = add i32 %v3_12334, 8
  %v2_1233c = inttoptr i32 %v1_1233c to i32*
  %v3_1233c = load i32, i32* %v2_1233c, align 4
  store i32 %v3_1233c, i32* %r3.global-to-local, align 4
  %v9_12340 = icmp eq i32 %v3_1233c, %v0_12328
  br i1 %v9_12340, label %dec_label_pc_1234c, label %dec_label_pc_12348

dec_label_pc_12348:                               ; preds = %dec_label_pc_12328, %dec_label_pc_122ec, %dec_label_pc_122d0, %dec_label_pc_1233c
  %v0_12348 = call i32 @function_12698()
  store i32 %v0_12348, i32* @r0, align 4
  %v0_1234c.pre = load i32, i32* @ip, align 4
  %v1_1234c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_1234c

dec_label_pc_1234c:                               ; preds = %dec_label_pc_1233c, %dec_label_pc_12348
  %v1_1234c = phi i32 [ %v3_12334, %dec_label_pc_1233c ], [ %v1_1234c.pre, %dec_label_pc_12348 ]
  %v0_1234c = phi i32 [ %v3_12328, %dec_label_pc_1233c ], [ %v0_1234c.pre, %dec_label_pc_12348 ]
  %v2_1234c = add i32 %v1_1234c, 8
  %v3_1234c = inttoptr i32 %v2_1234c to i32*
  store i32 %v0_1234c, i32* %v3_1234c, align 4
  %v0_12350 = load i32, i32* %r2.global-to-local, align 4
  %v1_12350 = load i32, i32* @ip, align 4
  %v2_12350 = add i32 %v1_12350, 12
  %v3_12350 = inttoptr i32 %v2_12350 to i32*
  store i32 %v0_12350, i32* %v3_12350, align 4
  %v0_12354 = load i32, i32* %lr.global-to-local, align 4
  %v1_12354 = load i32, i32* %r5.global-to-local, align 4
  %v2_12354 = add i32 %v1_12354, %v0_12354
  store i32 %v2_12354, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12358

dec_label_pc_12358:                               ; preds = %dec_label_pc_12314.dec_label_pc_12358_crit_edge, %dec_label_pc_1234c
  %v0_1235c = phi i32 [ %v0_1235c.pre, %dec_label_pc_12314.dec_label_pc_12358_crit_edge ], [ %v2_12354, %dec_label_pc_1234c ]
  %v0_12358 = load i32, i32* %r7.global-to-local, align 4
  %v1_12358 = add i32 %v0_12358, 8
  %v2_12358 = inttoptr i32 %v1_12358 to i32*
  %v3_12358 = load i32, i32* %v2_12358, align 4
  store i32 %v3_12358, i32* %r2.global-to-local, align 4
  %v1_1235c = or i32 %v0_1235c, 1
  store i32 %v1_1235c, i32* %r3.global-to-local, align 4
  %v0_12360 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12360, i32* %v2_12358, align 4
  %v0_12364 = load i32, i32* %r1.global-to-local, align 4
  %v1_12364 = load i32, i32* %r2.global-to-local, align 4
  %v2_12364 = add i32 %v1_12364, 12
  %v3_12364 = inttoptr i32 %v2_12364 to i32*
  store i32 %v0_12364, i32* %v3_12364, align 4
  %v0_12368 = load i32, i32* %lr.global-to-local, align 4
  %v1_12368 = load i32, i32* %r1.global-to-local, align 4
  %v3_12368 = add i32 %v1_12368, %v0_12368
  %v4_12368 = inttoptr i32 %v3_12368 to i32*
  store i32 %v0_12368, i32* %v4_12368, align 4
  %v0_1236c = load i32, i32* %r3.global-to-local, align 4
  %v1_1236c = load i32, i32* %r1.global-to-local, align 4
  %v2_1236c = add i32 %v1_1236c, 4
  %v3_1236c = inttoptr i32 %v2_1236c to i32*
  store i32 %v0_1236c, i32* %v3_1236c, align 4
  %v0_12370 = load i32, i32* %r2.global-to-local, align 4
  %v1_12370 = load i32, i32* %r1.global-to-local, align 4
  %v2_12370 = add i32 %v1_12370, 8
  %v3_12370 = inttoptr i32 %v2_12370 to i32*
  store i32 %v0_12370, i32* %v3_12370, align 4
  %v0_12374 = load i32, i32* %r7.global-to-local, align 4
  %v1_12374 = load i32, i32* %r1.global-to-local, align 4
  %v2_12374 = add i32 %v1_12374, 12
  %v3_12374 = inttoptr i32 %v2_12374 to i32*
  store i32 %v0_12374, i32* %v3_12374, align 4
  br label %dec_label_pc_1238c

dec_label_pc_1237c:                               ; preds = %dec_label_pc_12304
  %v2_1237c = add i32 %v1_1230c, %v0_1237c
  %v1_12380 = or i32 %v2_1237c, 1
  store i32 %v1_12380, i32* %r3.global-to-local, align 4
  %v1_12384 = load i32, i32* %r1.global-to-local, align 4
  %v2_12384 = add i32 %v1_12384, 4
  %v3_12384 = inttoptr i32 %v2_12384 to i32*
  store i32 %v1_12380, i32* %v3_12384, align 4
  %v0_12388 = load i32, i32* %r1.global-to-local, align 4
  %v1_12388 = load i32, i32* @r4, align 4
  %v2_12388 = add i32 %v1_12388, 44
  %v3_12388 = inttoptr i32 %v2_12388 to i32*
  store i32 %v0_12388, i32* %v3_12388, align 4
  br label %dec_label_pc_1238c

dec_label_pc_1238c:                               ; preds = %dec_label_pc_12358, %dec_label_pc_1237c
  %v0_1238c = load i32, i32* %sl.global-to-local, align 4
  %v2_1238c = icmp eq i32 %v0_1238c, 0
  store i32 %v0_1238c, i32* %r1.global-to-local, align 4
  br i1 %v2_1238c, label %dec_label_pc_12398.loopexit, label %dec_label_pc_122b4

dec_label_pc_12398.loopexit:                      ; preds = %dec_label_pc_1238c
  %v0_12398.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_12398.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12398

dec_label_pc_12398:                               ; preds = %dec_label_pc_12398.loopexit, %dec_label_pc_122a4
  %v1_12398 = phi i32 [ %v1_12398.pre, %dec_label_pc_12398.loopexit ], [ %v1_1239810, %dec_label_pc_122a4 ]
  %v0_123a0 = phi i32 [ %v0_12398.pre, %dec_label_pc_12398.loopexit ], [ %v1_122b0, %dec_label_pc_122a4 ]
  %v9_12398 = icmp eq i32 %v0_123a0, %v1_12398
  br i1 %v9_12398, label %dec_label_pc_12410, label %dec_label_pc_123a0

dec_label_pc_123a0:                               ; preds = %dec_label_pc_12398
  %v1_123a0 = add i32 %v0_123a0, 4
  store i32 %v1_123a0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_122a4

dec_label_pc_123a8.dec_label_pc_123a8_crit_edge:  ; preds = %dec_label_pc_123a8.preheader, %dec_label_pc_123a8.dec_label_pc_123a8_crit_edge
  %v0_123a8.pre = load i32, i32* @r4, align 4
  %v1_123a8.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_123a8 = mul i32 %v1_123a8.pre, 8
  %v5_123a8 = add i32 %v4_123a8, %v0_123a8.pre
  %v1_123ac = add i32 %v1_123a8.pre, 1
  store i32 %v1_123ac, i32* %r2.global-to-local, align 4
  %v1_123b0 = add i32 %v5_123a8, 44
  store i32 %v1_123b0, i32* %r3.global-to-local, align 4
  %v2_123b8 = add i32 %v5_123a8, 52
  %v3_123b8 = inttoptr i32 %v2_123b8 to i32*
  store i32 %v1_123b0, i32* %v3_123b8, align 4
  %v0_123bc = load i32, i32* %r3.global-to-local, align 4
  %v2_123bc = add i32 %v0_123bc, 12
  %v3_123bc = inttoptr i32 %v2_123bc to i32*
  store i32 %v0_123bc, i32* %v3_123bc, align 4
  %v7_123c0 = icmp sgt i32 %v1_123ac, 95
  br i1 %v7_123c0, label %dec_label_pc_123c4, label %dec_label_pc_123a8.dec_label_pc_123a8_crit_edge

dec_label_pc_123c4:                               ; preds = %dec_label_pc_123a8.dec_label_pc_123a8_crit_edge
  %v0_123c4 = load i32, i32* @r4, align 4
  %v1_123c4 = inttoptr i32 %v0_123c4 to i32*
  %v2_123c4 = load i32, i32* %v1_123c4, align 4
  store i32 %v2_123c4, i32* %r2.global-to-local, align 4
  %v1_123c8 = add i32 %v0_123c4, 864
  %v2_123c8 = inttoptr i32 %v1_123c8 to i32*
  %v3_123c8 = load i32, i32* %v2_123c8, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_123d0 = urem i32 %v2_123c4, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_123d8 = or i32 %v3_123c8, 1
  store i32 %v1_123d8, i32* %r1.global-to-local, align 4
  %v1_123dc = or i32 %v1_123d0, 72
  store i32 %v1_123dc, i32* %r2.global-to-local, align 4
  %v1_123e0 = add i32 %v0_123c4, 52
  store i32 %v1_123e0, i32* @ip, align 4
  %v2_123e4 = add i32 %v0_123c4, 840
  %v3_123e4 = inttoptr i32 %v2_123e4 to i32*
  store i32 0, i32* %v3_123e4, align 4
  %v0_123e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_123e8 = add i32 %v0_123e8, 65536
  store i32 %v1_123e8, i32* %r3.global-to-local, align 4
  %v0_123ec = load i32, i32* %r0.global-to-local, align 4
  %v1_123ec = load i32, i32* @r4, align 4
  %v2_123ec = add i32 %v1_123ec, 836
  %v3_123ec = inttoptr i32 %v2_123ec to i32*
  store i32 %v0_123ec, i32* %v3_123ec, align 4
  %v0_123f0 = load i32, i32* %r0.global-to-local, align 4
  %v1_123f0 = load i32, i32* @r4, align 4
  %v2_123f0 = add i32 %v1_123f0, 844
  %v3_123f0 = inttoptr i32 %v2_123f0 to i32*
  store i32 %v0_123f0, i32* %v3_123f0, align 4
  %v1_123f4 = load i32, i32* @r4, align 4
  %v2_123f4 = add i32 %v1_123f4, 852
  %v3_123f4 = inttoptr i32 %v2_123f4 to i32*
  store i32 %v1_123e8, i32* %v3_123f4, align 4
  %v1_123f8 = load i32, i32* @r4, align 4
  %v2_123f8 = add i32 %v1_123f8, 864
  %v3_123f8 = inttoptr i32 %v2_123f8 to i32*
  store i32 %v1_123d8, i32* %v3_123f8, align 4
  %v1_123fc = load i32, i32* @r4, align 4
  %v2_123fc = inttoptr i32 %v1_123fc to i32*
  store i32 %v1_123dc, i32* %v2_123fc, align 4
  %v0_12400 = load i32, i32* @ip, align 4
  %v1_12400 = load i32, i32* @r4, align 4
  %v2_12400 = add i32 %v1_12400, 44
  %v3_12400 = inttoptr i32 %v2_12400 to i32*
  store i32 %v0_12400, i32* %v3_12400, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_12408 = call i32 @function_12c6c(i32 30, i32 %v1_123d8, i32 %v1_123dc, i32 %v1_123e8)
  store i32 %v4_12408, i32* @r0, align 4
  %v1_1240c = load i32, i32* @r4, align 4
  %v2_1240c = add i32 %v1_1240c, 860
  %v3_1240c = inttoptr i32 %v2_1240c to i32*
  store i32 %v4_12408, i32* %v3_1240c, align 4
  br label %dec_label_pc_12410

dec_label_pc_12410:                               ; preds = %dec_label_pc_12398, %dec_label_pc_123c4
  %v2_12414 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12414, i32* @r4, align 4
  %v1_12418 = load i32, i32* @r0, align 4
  ret i32 %v1_12418

; uselistorder directives
  uselistorder i32 %v0_123c4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_123bc, { 1, 0 }
  uselistorder i32 %v1_123a0, { 1, 0 }
  uselistorder i32 %v0_1238c, { 0, 2, 1 }
  uselistorder i32 %v0_12368, { 1, 0 }
  uselistorder i32 %v1_122b8, { 1, 0, 2 }
  uselistorder i32 %v0_122d0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12290, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 2, 11, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 10, 0, 8, 9, 6, 7, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_12410, { 1, 0 }
  uselistorder label %dec_label_pc_123a8.dec_label_pc_123a8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1238c, { 1, 0 }
  uselistorder label %dec_label_pc_12358, { 1, 0 }
  uselistorder label %dec_label_pc_1234c, { 1, 0 }
  uselistorder label %dec_label_pc_12348, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12304, { 1, 0 }
}

define i32 @function_1241c() local_unnamed_addr {
dec_label_pc_1241c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_1241c = load i32, i32* @r4, align 4
  %v6_1241c = load i32, i32* @r5, align 4
  %v9_1241c = load i32, i32* @r6, align 4
  %v12_1241c = load i32, i32* @r7, align 4
  %v18_1241c = load i32, i32* @lr, align 4
  %v0_12424 = load i32, i32* @r0, align 4
  store i32 %v0_12424, i32* @r6, align 4
  %v2_12424 = icmp eq i32 %v0_12424, 0
  %v2_12428 = ptrtoint i32* %stack_var_-40 to i32
  store i32 123612, i32* @r7, align 4
  br i1 %v2_12424, label %dec_label_pc_12630, label %dec_label_pc_12434

dec_label_pc_12434:                               ; preds = %dec_label_pc_1241c
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_12438 = load i32, i32* inttoptr (i32 123680 to i32*), align 32
  store i32 %v4_12438, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_12438, i32* %r2.global-to-local, align 4
  %v4_12444 = load i32, i32* inttoptr (i32 123648 to i32*), align 256
  store i32 %v4_12444, i32* %r1.global-to-local, align 4
  store i32 %v2_12428, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_12450 = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  store i32 %v4_12450, i32* %ip.global-to-local, align 4
  store i32 74844, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12450)
  %v0_1245c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1245c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_12464 = load i32, i32* @r7, align 4
  %v2_12464 = add i32 %v0_12464, 16
  %v3_12464 = inttoptr i32 %v2_12464 to i32*
  %v4_12464 = load i32, i32* %v3_12464, align 4
  store i32 %v4_12464, i32* %ip.global-to-local, align 4
  store i32 74864, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12464)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12474 = load i32, i32* @r7, align 4
  %v2_12474 = add i32 %v0_12474, 32
  %v3_12474 = inttoptr i32 %v2_12474 to i32*
  %v4_12474 = load i32, i32* %v3_12474, align 4
  store i32 %v4_12474, i32* @lr, align 4
  %v0_12478 = load i32, i32* @r6, align 4
  %v1_12478 = add i32 %v0_12478, -4
  %v2_12478 = inttoptr i32 %v1_12478 to i32*
  %v3_12478 = load i32, i32* %v2_12478, align 4
  store i32 %v3_12478, i32* %r2.global-to-local, align 4
  %v1_1247c = inttoptr i32 %v4_12474 to i32*
  %v2_1247c = load i32, i32* %v1_1247c, align 4
  store i32 %v2_1247c, i32* %r3.global-to-local, align 4
  %v1_12480 = and i32 %v3_12478, -4
  store i32 %v1_12480, i32* %ip.global-to-local, align 4
  %v1_12484 = add i32 %v0_12478, -8
  store i32 %v1_12484, i32* @r5, align 4
  store i32 %v1_12484, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_12480, %v2_1247c
  br i1 %tmp, label %dec_label_pc_124b4, label %dec_label_pc_12494

dec_label_pc_12494:                               ; preds = %dec_label_pc_12434
  %v1_12494 = or i32 %v2_1247c, 3
  store i32 %v1_12494, i32* %r3.global-to-local, align 4
  store i32 %v1_12494, i32* %v1_1247c, align 4
  %v3_12498 = load i32, i32* @lr, align 4
  %v4_12498 = add i32 %v3_12498, -8
  store i32 %v4_12498, i32* %lr.global-to-local, align 4
  %v0_1249c = load i32, i32* %ip.global-to-local, align 4
  %v3_1249c = udiv i32 %v0_1249c, 8
  store i32 %v3_1249c, i32* %r1.global-to-local, align 4
  %v1_124a0 = add i32 %v3_12498, -4
  store i32 %v1_124a0, i32* %r2.global-to-local, align 4
  %v4_124a4 = mul nuw i32 %v3_1249c, 4
  %v5_124a4 = add i32 %v4_124a4, %v1_124a0
  %v6_124a4 = inttoptr i32 %v5_124a4 to i32*
  %v7_124a4 = load i32, i32* %v6_124a4, align 4
  store i32 %v7_124a4, i32* %r3.global-to-local, align 4
  %v1_124a8 = load i32, i32* @r5, align 4
  %v2_124a8 = add i32 %v1_124a8, 8
  %v3_124a8 = inttoptr i32 %v2_124a8 to i32*
  store i32 %v7_124a4, i32* %v3_124a8, align 4
  %v0_124ac = load i32, i32* @r5, align 4
  %v1_124ac = load i32, i32* %r2.global-to-local, align 4
  %v2_124ac = load i32, i32* %r1.global-to-local, align 4
  %v5_124ac = mul i32 %v2_124ac, 4
  %v6_124ac = add i32 %v5_124ac, %v1_124ac
  %v7_124ac = inttoptr i32 %v6_124ac to i32*
  store i32 %v0_124ac, i32* %v7_124ac, align 4
  br label %dec_label_pc_12618

dec_label_pc_124b4:                               ; preds = %dec_label_pc_12434
  %v1_124b4 = and i32 %v3_12478, 2
  %v2_124b4 = icmp eq i32 %v1_124b4, 0
  br i1 %v2_124b4, label %dec_label_pc_124bc, label %dec_label_pc_125f0

dec_label_pc_124bc:                               ; preds = %dec_label_pc_124b4
  %v1_124bc = or i32 %v2_1247c, 1
  store i32 %v1_124bc, i32* %r3.global-to-local, align 4
  store i32 %v1_124bc, i32* %v1_1247c, align 4
  %v0_124c4 = load i32, i32* @r6, align 4
  %v1_124c4 = add i32 %v0_124c4, -4
  %v2_124c4 = inttoptr i32 %v1_124c4 to i32*
  %v3_124c4 = load i32, i32* %v2_124c4, align 4
  store i32 %v3_124c4, i32* %r3.global-to-local, align 4
  %v0_124c8 = load i32, i32* @r5, align 4
  %v1_124c8 = load i32, i32* %ip.global-to-local, align 4
  %v2_124c8 = add i32 %v1_124c8, %v0_124c8
  store i32 %v2_124c8, i32* %lr.global-to-local, align 4
  %v1_124cc = urem i32 %v3_124c4, 2
  %v2_124cc = icmp eq i32 %v1_124cc, 0
  %v1_124d0 = add i32 %v2_124c8, 4
  %v2_124d0 = inttoptr i32 %v1_124d0 to i32*
  %v3_124d0 = load i32, i32* %v2_124d0, align 4
  store i32 %v3_124d0, i32* %r8.global-to-local, align 4
  br i1 %v2_124cc, label %dec_label_pc_124d8, label %dec_label_pc_1250c

dec_label_pc_124d8:                               ; preds = %dec_label_pc_124bc
  %v1_124d8 = add i32 %v0_124c4, -8
  %v2_124d8 = inttoptr i32 %v1_124d8 to i32*
  %v3_124d8 = load i32, i32* %v2_124d8, align 4
  store i32 %v3_124d8, i32* %r1.global-to-local, align 4
  %v2_124dc = sub i32 %v0_124c8, %v3_124d8
  store i32 %v2_124dc, i32* %r3.global-to-local, align 4
  %v1_124e0 = add i32 %v2_124dc, 8
  %v2_124e0 = inttoptr i32 %v1_124e0 to i32*
  %v3_124e0 = load i32, i32* %v2_124e0, align 4
  store i32 %v3_124e0, i32* %r2.global-to-local, align 4
  %v1_124e4 = add i32 %v3_124e0, 12
  %v2_124e4 = inttoptr i32 %v1_124e4 to i32*
  %v3_124e4 = load i32, i32* %v2_124e4, align 4
  store i32 %v3_124e4, i32* %r4.global-to-local, align 4
  %v9_124e8 = icmp eq i32 %v3_124e4, %v2_124dc
  %v1_124ec = add i32 %v2_124dc, 12
  %v2_124ec = inttoptr i32 %v1_124ec to i32*
  %v3_124ec = load i32, i32* %v2_124ec, align 4
  store i32 %v3_124ec, i32* %r0.global-to-local, align 4
  br i1 %v9_124e8, label %dec_label_pc_124f4, label %dec_label_pc_12558

dec_label_pc_124f4:                               ; preds = %dec_label_pc_124d8
  %v1_124f4 = add i32 %v3_124ec, 8
  %v2_124f4 = inttoptr i32 %v1_124f4 to i32*
  %v3_124f4 = load i32, i32* %v2_124f4, align 4
  store i32 %v3_124f4, i32* %r3.global-to-local, align 4
  %v9_124f8 = icmp eq i32 %v3_124f4, %v2_124dc
  br i1 %v9_124f8, label %dec_label_pc_12500, label %dec_label_pc_12558

dec_label_pc_12500:                               ; preds = %dec_label_pc_124f4
  store i32 %v3_124e0, i32* %v2_124f4, align 4
  %v0_12504 = load i32, i32* %r0.global-to-local, align 4
  %v1_12504 = load i32, i32* %r2.global-to-local, align 4
  %v2_12504 = add i32 %v1_12504, 12
  %v3_12504 = inttoptr i32 %v2_12504 to i32*
  store i32 %v0_12504, i32* %v3_12504, align 4
  %v0_12508 = load i32, i32* %ip.global-to-local, align 4
  %v1_12508 = load i32, i32* %r1.global-to-local, align 4
  %v2_12508 = add i32 %v1_12508, %v0_12508
  store i32 %v2_12508, i32* %ip.global-to-local, align 4
  %v0_12518.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1251c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_1250c

dec_label_pc_1250c:                               ; preds = %dec_label_pc_124bc, %dec_label_pc_12500
  %v0_12598 = phi i32 [ %v1_124c8, %dec_label_pc_124bc ], [ %v2_12508, %dec_label_pc_12500 ]
  %v0_1251c = phi i32 [ %v3_124d0, %dec_label_pc_124bc ], [ %v0_1251c.pre, %dec_label_pc_12500 ]
  %v1_12530 = phi i32 [ %v2_124c8, %dec_label_pc_124bc ], [ %v0_12518.pre, %dec_label_pc_12500 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12510 = load i32, i32* @r7, align 4
  %v2_12510 = add i32 %v0_12510, 32
  %v3_12510 = inttoptr i32 %v2_12510 to i32*
  %v4_12510 = load i32, i32* %v3_12510, align 4
  store i32 %v4_12510, i32* %r2.global-to-local, align 4
  %v1_12514 = add i32 %v4_12510, 44
  %v2_12514 = inttoptr i32 %v1_12514 to i32*
  %v3_12514 = load i32, i32* %v2_12514, align 4
  store i32 %v3_12514, i32* %r3.global-to-local, align 4
  %v9_12518 = icmp eq i32 %v1_12530, %v3_12514
  %v1_1251c = and i32 %v0_1251c, -4
  store i32 %v1_1251c, i32* %r0.global-to-local, align 4
  br i1 %v9_12518, label %dec_label_pc_12598, label %dec_label_pc_12524

dec_label_pc_12524:                               ; preds = %dec_label_pc_1250c
  %v2_12524 = add i32 %v1_12530, %v1_1251c
  store i32 %v2_12524, i32* %r3.global-to-local, align 4
  %v1_12528 = add i32 %v2_12524, 4
  %v2_12528 = inttoptr i32 %v1_12528 to i32*
  %v3_12528 = load i32, i32* %v2_12528, align 4
  store i32 %v3_12528, i32* %r3.global-to-local, align 4
  %v1_1252c = urem i32 %v3_12528, 2
  %v2_1252c = icmp eq i32 %v1_1252c, 0
  %v2_12530 = add i32 %v1_12530, 4
  %v3_12530 = inttoptr i32 %v2_12530 to i32*
  store i32 %v1_1251c, i32* %v3_12530, align 4
  br i1 %v2_1252c, label %dec_label_pc_12538, label %dec_label_pc_12524.dec_label_pc_12568_crit_edge

dec_label_pc_12524.dec_label_pc_12568_crit_edge:  ; preds = %dec_label_pc_12524
  %v0_12578.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12568

dec_label_pc_12538:                               ; preds = %dec_label_pc_12524
  %v0_12538 = load i32, i32* %lr.global-to-local, align 4
  %v1_12538 = add i32 %v0_12538, 8
  %v2_12538 = inttoptr i32 %v1_12538 to i32*
  %v3_12538 = load i32, i32* %v2_12538, align 4
  store i32 %v3_12538, i32* %r1.global-to-local, align 4
  %v1_1253c = add i32 %v3_12538, 12
  %v2_1253c = inttoptr i32 %v1_1253c to i32*
  %v3_1253c = load i32, i32* %v2_1253c, align 4
  store i32 %v3_1253c, i32* %r3.global-to-local, align 4
  %v9_12540 = icmp eq i32 %v3_1253c, %v0_12538
  %v1_12544 = add i32 %v0_12538, 12
  %v2_12544 = inttoptr i32 %v1_12544 to i32*
  %v3_12544 = load i32, i32* %v2_12544, align 4
  store i32 %v3_12544, i32* %r2.global-to-local, align 4
  br i1 %v9_12540, label %dec_label_pc_1254c, label %dec_label_pc_12558

dec_label_pc_1254c:                               ; preds = %dec_label_pc_12538
  %v1_1254c = add i32 %v3_12544, 8
  %v2_1254c = inttoptr i32 %v1_1254c to i32*
  %v3_1254c = load i32, i32* %v2_1254c, align 4
  store i32 %v3_1254c, i32* %r3.global-to-local, align 4
  %v9_12550 = icmp eq i32 %v3_1254c, %v0_12538
  br i1 %v9_12550, label %dec_label_pc_1255c, label %dec_label_pc_12558

dec_label_pc_12558:                               ; preds = %dec_label_pc_12538, %dec_label_pc_124f4, %dec_label_pc_124d8, %dec_label_pc_1254c
  %v0_12558 = call i32 @function_12698()
  store i32 %v0_12558, i32* %r0.global-to-local, align 4
  %v0_1255c.pre = load i32, i32* @r1, align 4
  %v1_1255c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_1255c

dec_label_pc_1255c:                               ; preds = %dec_label_pc_1254c, %dec_label_pc_12558
  %v1_1255c = phi i32 [ %v3_12544, %dec_label_pc_1254c ], [ %v1_1255c.pre, %dec_label_pc_12558 ]
  %v0_1255c = phi i32 [ %v3_12538, %dec_label_pc_1254c ], [ %v0_1255c.pre, %dec_label_pc_12558 ]
  %v2_1255c = add i32 %v1_1255c, 8
  %v3_1255c = inttoptr i32 %v2_1255c to i32*
  store i32 %v0_1255c, i32* %v3_1255c, align 4
  %v0_12560 = load i32, i32* %r2.global-to-local, align 4
  %v1_12560 = load i32, i32* %r1.global-to-local, align 4
  %v2_12560 = add i32 %v1_12560, 12
  %v3_12560 = inttoptr i32 %v2_12560 to i32*
  store i32 %v0_12560, i32* %v3_12560, align 4
  %v0_12564 = load i32, i32* %ip.global-to-local, align 4
  %v1_12564 = load i32, i32* %r0.global-to-local, align 4
  %v2_12564 = add i32 %v1_12564, %v0_12564
  store i32 %v2_12564, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12568

dec_label_pc_12568:                               ; preds = %dec_label_pc_12524.dec_label_pc_12568_crit_edge, %dec_label_pc_1255c
  %v0_12578 = phi i32 [ %v0_12578.pre, %dec_label_pc_12524.dec_label_pc_12568_crit_edge ], [ %v2_12564, %dec_label_pc_1255c ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_1256c = load i32, i32* @r7, align 4
  %v2_1256c = add i32 %v0_1256c, 32
  %v3_1256c = inttoptr i32 %v2_1256c to i32*
  %v4_1256c = load i32, i32* %v3_1256c, align 4
  %v1_12570 = add i32 %v4_1256c, 52
  store i32 %v1_12570, i32* %r3.global-to-local, align 4
  %v1_12574 = add i32 %v4_1256c, 60
  %v2_12574 = inttoptr i32 %v1_12574 to i32*
  %v3_12574 = load i32, i32* %v2_12574, align 4
  store i32 %v3_12574, i32* %r1.global-to-local, align 4
  %v1_12578 = or i32 %v0_12578, 1
  store i32 %v1_12578, i32* %r2.global-to-local, align 4
  %v1_1257c = load i32, i32* %r4.global-to-local, align 4
  %v2_1257c = add i32 %v1_1257c, 12
  %v3_1257c = inttoptr i32 %v2_1257c to i32*
  store i32 %v1_12570, i32* %v3_1257c, align 4
  %v0_12580 = load i32, i32* %r1.global-to-local, align 4
  %v1_12580 = load i32, i32* %r4.global-to-local, align 4
  %v2_12580 = add i32 %v1_12580, 8
  %v3_12580 = inttoptr i32 %v2_12580 to i32*
  store i32 %v0_12580, i32* %v3_12580, align 4
  %v0_12584 = load i32, i32* %r2.global-to-local, align 4
  %v1_12584 = load i32, i32* %r4.global-to-local, align 4
  %v2_12584 = add i32 %v1_12584, 4
  %v3_12584 = inttoptr i32 %v2_12584 to i32*
  store i32 %v0_12584, i32* %v3_12584, align 4
  %v0_12588 = load i32, i32* %ip.global-to-local, align 4
  %v1_12588 = load i32, i32* %r4.global-to-local, align 4
  %v3_12588 = add i32 %v1_12588, %v0_12588
  %v4_12588 = inttoptr i32 %v3_12588 to i32*
  store i32 %v0_12588, i32* %v4_12588, align 4
  %v0_1258c = load i32, i32* %r4.global-to-local, align 4
  %v1_1258c = load i32, i32* %r1.global-to-local, align 4
  %v2_1258c = add i32 %v1_1258c, 12
  %v3_1258c = inttoptr i32 %v2_1258c to i32*
  store i32 %v0_1258c, i32* %v3_1258c, align 4
  %v0_12590 = load i32, i32* %r4.global-to-local, align 4
  %v1_12590 = load i32, i32* %r3.global-to-local, align 4
  %v2_12590 = add i32 %v1_12590, 8
  %v3_12590 = inttoptr i32 %v2_12590 to i32*
  store i32 %v0_12590, i32* %v3_12590, align 4
  br label %dec_label_pc_125a8

dec_label_pc_12598:                               ; preds = %dec_label_pc_1250c
  %v2_12598 = add i32 %v1_1251c, %v0_12598
  store i32 %v2_12598, i32* %ip.global-to-local, align 4
  %v1_1259c = or i32 %v2_12598, 1
  store i32 %v1_1259c, i32* %r3.global-to-local, align 4
  %v0_125a0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_125a0, i32* %v2_12514, align 4
  %v0_125a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_125a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_125a4 = add i32 %v1_125a4, 4
  %v3_125a4 = inttoptr i32 %v2_125a4 to i32*
  store i32 %v0_125a4, i32* %v3_125a4, align 4
  br label %dec_label_pc_125a8

dec_label_pc_125a8:                               ; preds = %dec_label_pc_12568, %dec_label_pc_12598
  %v0_125a8 = load i32, i32* %ip.global-to-local, align 4
  %v3_125ac = icmp ult i32 %v0_125a8, 131070
  br i1 %v3_125ac, label %dec_label_pc_12618, label %dec_label_pc_125b0

dec_label_pc_125b0:                               ; preds = %dec_label_pc_125a8
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_125b4 = load i32, i32* @r7, align 4
  %v2_125b4 = add i32 %v0_125b4, 32
  %v3_125b4 = inttoptr i32 %v2_125b4 to i32*
  %v4_125b4 = load i32, i32* %v3_125b4, align 4
  store i32 %v4_125b4, i32* @r4, align 4
  %v1_125b8 = inttoptr i32 %v4_125b4 to i32*
  %v2_125b8 = load i32, i32* %v1_125b8, align 4
  store i32 %v2_125b8, i32* %r3.global-to-local, align 4
  %v1_125bc = and i32 %v2_125b8, 2
  %v2_125bc = icmp eq i32 %v1_125bc, 0
  br i1 %v2_125bc, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_125b0
  store i32 %v4_125b4, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_125b0, %bb
  store i32 75208, i32* @lr, align 4
  %v1_125c4 = xor i1 %v2_125bc, true
  call void @__pseudo_cond_branch(i1 %v1_125c4, i32 ptrtoint (i32* @global_var_12268.385 to i32))
  %v0_125c8 = load i32, i32* @r4, align 4
  %v1_125c8 = add i32 %v0_125c8, 44
  %v2_125c8 = inttoptr i32 %v1_125c8 to i32*
  %v3_125c8 = load i32, i32* %v2_125c8, align 4
  store i32 %v3_125c8, i32* %r3.global-to-local, align 4
  %v1_125cc = add i32 %v3_125c8, 4
  %v2_125cc = inttoptr i32 %v1_125cc to i32*
  %v3_125cc = load i32, i32* %v2_125cc, align 4
  store i32 %v3_125cc, i32* %r3.global-to-local, align 4
  %v1_125d0 = add i32 %v0_125c8, 836
  %v2_125d0 = inttoptr i32 %v1_125d0 to i32*
  %v3_125d0 = load i32, i32* %v2_125d0, align 4
  store i32 %v3_125d0, i32* %r2.global-to-local, align 4
  %v1_125d4 = and i32 %v3_125cc, -4
  store i32 %v1_125d4, i32* %r3.global-to-local, align 4
  %v3_125d8 = icmp ult i32 %v1_125d4, %v3_125d0
  br i1 %v3_125d8, label %dec_label_pc_12618, label %dec_label_pc_125e0

dec_label_pc_125e0:                               ; preds = %bb15
  store i32 %v0_125c8, i32* %r1.global-to-local, align 4
  %v1_125e4 = add i32 %v0_125c8, 840
  %v2_125e4 = inttoptr i32 %v1_125e4 to i32*
  %v3_125e4 = load i32, i32* %v2_125e4, align 4
  store i32 %v3_125e4, i32* %r0.global-to-local, align 4
  %v2_125e8 = call i32 @function_121b8(i32 %v3_125e4, i32 %v0_125c8)
  store i32 %v2_125e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12618

dec_label_pc_125f0:                               ; preds = %dec_label_pc_124b4
  %v2_125f0 = inttoptr i32 %v1_12484 to i32*
  %v3_125f0 = load i32, i32* %v2_125f0, align 4
  store i32 %v3_125f0, i32* %r0.global-to-local, align 4
  %v1_125f4 = add i32 %v4_12474, 848
  %v2_125f4 = inttoptr i32 %v1_125f4 to i32*
  %v3_125f4 = load i32, i32* %v2_125f4, align 4
  store i32 %v3_125f4, i32* %r2.global-to-local, align 4
  %v1_125f8 = add i32 %v4_12474, 868
  %v2_125f8 = inttoptr i32 %v1_125f8 to i32*
  %v3_125f8 = load i32, i32* %v2_125f8, align 4
  %v2_125fc = add i32 %v3_125f0, %v1_12480
  store i32 %v2_125fc, i32* %r1.global-to-local, align 4
  %v1_12600 = add i32 %v3_125f4, -1
  store i32 %v1_12600, i32* %r2.global-to-local, align 4
  %v2_12604 = sub i32 %v3_125f8, %v2_125fc
  store i32 %v2_12604, i32* %r3.global-to-local, align 4
  store i32 %v2_12604, i32* %v2_125f8, align 4
  %v1_1260c = load i32, i32* @lr, align 4
  %v2_1260c = add i32 %v1_1260c, 848
  %v3_1260c = inttoptr i32 %v2_1260c to i32*
  store i32 %v1_12600, i32* %v3_1260c, align 4
  %v0_12610 = load i32, i32* %r0.global-to-local, align 4
  %v1_12610 = load i32, i32* @r5, align 4
  %v2_12610 = sub i32 %v1_12610, %v0_12610
  store i32 %v2_12610, i32* %r0.global-to-local, align 4
  %v4_12614 = call i32 @function_13c00(i32 %v2_12610, i32 %v2_125fc, i32 %v1_12600, i32 %v2_12604)
  store i32 %v4_12614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12618

dec_label_pc_12618:                               ; preds = %bb15, %dec_label_pc_125a8, %dec_label_pc_125e0, %dec_label_pc_12494, %dec_label_pc_125f0
  store i32 %v2_12428, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_12624 = load i32, i32* @r7, align 4
  %v2_12624 = add i32 %v0_12624, 24
  %v3_12624 = inttoptr i32 %v2_12624 to i32*
  %v4_12624 = load i32, i32* %v3_12624, align 4
  store i32 %v4_12624, i32* @ip, align 4
  store i32 75312, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12624)
  br label %dec_label_pc_12630

dec_label_pc_12630:                               ; preds = %dec_label_pc_1241c, %dec_label_pc_12618
  store i32 %v3_1241c, i32* @r4, align 4
  store i32 %v6_1241c, i32* @r5, align 4
  store i32 %v9_1241c, i32* @r6, align 4
  store i32 %v12_1241c, i32* @r7, align 4
  store i32 %v18_1241c, i32* @lr, align 4
  ret i32 %v2_12428

; uselistorder directives
  uselistorder i32 %v0_125c8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_12588, { 1, 0 }
  uselistorder i32 %v1_124c8, { 1, 0 }
  uselistorder i32 %v0_124c8, { 1, 0 }
  uselistorder i32 %v3_1249c, { 1, 0 }
  uselistorder i32 %v1_12480, { 1, 0, 2 }
  uselistorder i32 %v2_1247c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12474, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12424, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 5, 1, 2, 3, 4, 0, 6, 7, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_12630, { 1, 0 }
  uselistorder label %dec_label_pc_12618, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_125a8, { 1, 0 }
  uselistorder label %dec_label_pc_12568, { 1, 0 }
  uselistorder label %dec_label_pc_1255c, { 1, 0 }
  uselistorder label %dec_label_pc_12558, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1250c, { 1, 0 }
}

define i32 @function_12640(i32 %arg1) local_unnamed_addr {
dec_label_pc_12640:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_12640 = load i1, i1* @cpsr_z, align 1
  %v2_12640 = load i32, i32* @r4, align 4
  br i1 %v0_12640, label %bb, label %dec_label_pc_12640..thread4_crit_edge

dec_label_pc_12640..thread4_crit_edge:            ; preds = %dec_label_pc_12640
  %v0_1266c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_12640
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12640..thread4_crit_edge, %bb
  %v0_1266c = phi i32 [ %v0_1266c.pre, %dec_label_pc_12640..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_12640, i32* %stack_var_-12, align 4
  %v6_12658 = load i32, i32* @r5, align 4
  %v9_12658 = load i32, i32* @lr, align 4
  %v4_12668 = load i32, i32* inttoptr (i32 123644 to i32*), align 4
  store i32 %v4_12668, i32* @r5, align 4
  store i32 %v0_1266c, i32* @r4, align 4
  store i32 %v4_12668, i32* @r0, align 4
  %v0_12678 = call i32 @function_12268()
  %v0_1267c = load i32, i32* @r4, align 4
  store i32 %v0_1267c, i32* %r0.global-to-local, align 4
  %v0_12680 = load i32, i32* @r5, align 4
  %v2_12688 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12688, i32* @r4, align 4
  store i32 %v6_12658, i32* @r5, align 4
  store i32 %v9_12658, i32* @lr, align 4
  %v2_1268c = call i32 @function_121b8(i32 %v0_1267c, i32 %v0_12680)
  store i32 %v2_1268c, i32* %r0.global-to-local, align 4
  %v0_12690 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12690, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_12694 = phi i32 [ %v2_1268c, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_12694

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_121b8, { 1, 0 }
  uselistorder i32 ()* @function_12268, { 3, 2, 0, 1 }
  uselistorder i32* inttoptr (i32 123644 to i32*), { 17, 2, 1, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 3 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_12698() local_unnamed_addr {
dec_label_pc_12698:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 123612, i32* @r5, align 4
  %v4_126b0 = load i32, i32* inttoptr (i32 123628 to i32*), align 4
  store i32 75452, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_126b0)
  %v2_126cc = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_126d8 = call i32 @function_10988(i32 1, i32 %v2_126cc, i32 0)
  %v4_126e0 = load i32, i32* @global_var_1e570.393, align 4
  %v2_126e4 = icmp eq i32 %v4_126e0, 0
  br i1 %v2_126e4, label %dec_label_pc_126ec, label %dec_label_pc_1272c

dec_label_pc_126ec:                               ; preds = %dec_label_pc_12698
  store i32 1, i32* @global_var_1e570.393, align 4
  br label %dec_label_pc_126f4

dec_label_pc_126f4:                               ; preds = %dec_label_pc_1273c, %dec_label_pc_126ec
  %v0_126f8 = load i32, i32* @r5, align 4
  %v2_126f8 = add i32 %v0_126f8, 156
  store i32 %v2_126f8, i32* @r4, align 4
  %v2_12704 = add i32 %v0_126f8, 36
  %v3_12704 = inttoptr i32 %v2_12704 to i32*
  %v4_12704 = load i32, i32* %v3_12704, align 4
  call void @__pseudo_branch(i32 %v4_12704)
  %v1_12714 = call i32 @function_111a0(i32 6)
  %v0_12720 = load i32, i32* @r5, align 4
  %v2_12720 = add i32 %v0_12720, 16
  %v3_12720 = inttoptr i32 %v2_12720 to i32*
  %v4_12720 = load i32, i32* %v3_12720, align 4
  store i32 75564, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12720)
  %v4_12730.pre = load i32, i32* @global_var_1e570.393, align 4
  br label %dec_label_pc_1272c

dec_label_pc_1272c:                               ; preds = %dec_label_pc_12698, %dec_label_pc_126f4
  %v0_12740 = phi i32 [ %v4_126e0, %dec_label_pc_12698 ], [ %v4_12730.pre, %dec_label_pc_126f4 ]
  %v7_12734 = icmp eq i32 %v0_12740, 1
  br i1 %v7_12734, label %dec_label_pc_1273c, label %dec_label_pc_12778

dec_label_pc_1273c:                               ; preds = %dec_label_pc_1272c
  %v2_1273c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_1273c, i32* @r4, align 4
  store i32 2, i32* @global_var_1e570.393, align 4
  store i32 20, i32* @r2, align 4
  %v2_12754 = bitcast i32* %stack_var_-28 to i8*
  %v3_12754 = call i32 @function_10e40(i8* %v2_12754, i32 0)
  %v3_12770 = call i32 @function_13700(i32 6, i32 %v2_1273c, i32 0)
  br label %dec_label_pc_126f4

dec_label_pc_12778:                               ; preds = %dec_label_pc_1272c
  %v7_12778 = icmp eq i32 %v0_12740, 2
  br i1 %v7_12778, label %dec_label_pc_12780, label %dec_label_pc_1278c

dec_label_pc_12780:                               ; preds = %dec_label_pc_12778
  store i32 3, i32* @global_var_1e570.393, align 4
  %v0_12788 = call i32 @function_12698()
  %v4_1278c.pre = load i32, i32* @global_var_1e570.393, align 4
  br label %dec_label_pc_1278c

dec_label_pc_1278c:                               ; preds = %dec_label_pc_12778, %dec_label_pc_12780
  %v1_12794 = phi i32 [ %v0_12740, %dec_label_pc_12778 ], [ %v4_1278c.pre, %dec_label_pc_12780 ]
  %v7_12790 = icmp eq i32 %v1_12794, 3
  br i1 %v7_12790, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_1278c
  store i32 4, i32* @global_var_1e570.393, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1278c, %bb
  call void @__pseudo_cond_branch(i1 %v7_12790, i32 ptrtoint (i32* @global_var_13cf0.395 to i32))
  br label %dec_label_pc_127a4

dec_label_pc_127a4:                               ; preds = %dec_label_pc_127a4, %.thread1
  %v0_127a4 = call i32 @function_12698()
  br label %dec_label_pc_127a4

; uselistorder directives
  uselistorder i32 ()* @function_12698, { 1, 0, 5, 4, 6, 3, 2 }
  uselistorder i32 6, { 14, 15, 75, 3, 31, 32, 16, 27, 17, 28, 18, 29, 19, 30, 1, 33, 20, 34, 0, 4, 35, 36, 21, 37, 5, 38, 39, 40, 22, 41, 6, 42, 43, 44, 23, 45, 46, 47, 24, 48, 49, 50, 51, 7, 52, 53, 54, 55, 8, 56, 57, 58, 59, 60, 25, 61, 9, 62, 63, 64, 65, 66, 67, 26, 68, 10, 69, 70, 71, 72, 11, 73, 12, 13, 2, 74 }
  uselistorder i32* @global_var_1e570.393, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 123628 to i32*), { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_1278c, { 1, 0 }
  uselistorder label %dec_label_pc_1272c, { 1, 0 }
}

define i32 @function_127b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_127b0:
  %v0_127b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_127b0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_127b0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_127b0, %bb
  %v4_127bc = phi i32 [ %arg1, %dec_label_pc_127b0 ], [ 0, %bb ]
  ret i32 %v4_127bc

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_127c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_127c0:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_127d0 = call i32 @function_127e0()
  ret i32 %v0_127d0
}

define i32 @function_127e0() local_unnamed_addr {
dec_label_pc_127e0:
  store i32 1, i32* @r3, align 4
  %v0_127ec = call i32 @function_127fc()
  ret i32 %v0_127ec
}

define i32 @function_127fc() local_unnamed_addr {
dec_label_pc_127fc:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v3_127fc = load i32, i32* @r4, align 4
  %v12_127fc = load i32, i32* @r7, align 4
  store i32 220, i32* @lr, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_bac8.397 to i32), i32 75796), i32* %ip.global-to-local, align 4
  %v0_12810 = load i32, i32* @r1, align 4
  store i32 %v0_12810, i32* %fp.global-to-local, align 4
  %v0_12814 = load i32, i32* @r2, align 4
  store i32 %v0_12814, i32* %r5.global-to-local, align 4
  %v0_12818 = load i32, i32* @r0, align 4
  store i32 %v0_12818, i32* @r4, align 4
  %v0_1281c = load i32, i32* @r3, align 4
  br label %dec_label_pc_12828

dec_label_pc_12824:                               ; preds = %dec_label_pc_12828
  %v1_12824 = add i32 %v0_12860, 1
  store i32 %v1_12824, i32* @r4, align 4
  br label %dec_label_pc_12828

dec_label_pc_12828:                               ; preds = %dec_label_pc_127fc, %dec_label_pc_12824
  %v0_12860 = phi i32 [ %v0_12818, %dec_label_pc_127fc ], [ %v1_12824, %dec_label_pc_12824 ]
  %v1_12828 = inttoptr i32 %v0_12860 to i8*
  %v2_12828 = load i8, i8* %v1_12828, align 1
  %v3_12828 = zext i8 %v2_12828 to i32
  %v4_1282c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_bac8.397 to i32), i32 76016) to i32*), align 4
  %v2_12830 = mul nuw nsw i32 %v3_12828, 2
  %v2_12834 = add i32 %v2_12830, %v4_1282c
  %v3_12834 = inttoptr i32 %v2_12834 to i16*
  %v4_12834 = load i16, i16* %v3_12834, align 2
  %v1_12838 = and i16 %v4_12834, 32
  %v2_12838 = icmp eq i16 %v1_12838, 0
  br i1 %v2_12838, label %dec_label_pc_12840, label %dec_label_pc_12824

dec_label_pc_12840:                               ; preds = %dec_label_pc_12828
  %v7_12840 = icmp eq i8 %v2_12828, 43
  br i1 %v7_12840, label %dec_label_pc_12860, label %dec_label_pc_12848

dec_label_pc_12848:                               ; preds = %dec_label_pc_12840
  %v7_12848 = icmp eq i8 %v2_12828, 45
  br i1 %v7_12848, label %dec_label_pc_12860, label %bb

bb:                                               ; preds = %dec_label_pc_12848
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_12864

dec_label_pc_12860:                               ; preds = %dec_label_pc_12840, %dec_label_pc_12848
  %storemerge39 = phi i32 [ 1, %dec_label_pc_12848 ], [ 0, %dec_label_pc_12840 ]
  store i32 %storemerge39, i32* @r7, align 4
  %v1_12860 = add i32 %v0_12860, 1
  store i32 %v1_12860, i32* @r4, align 4
  br label %dec_label_pc_12864

dec_label_pc_12864:                               ; preds = %bb, %dec_label_pc_12860
  %v0_12884 = phi i32 [ %v0_12860, %bb ], [ %v1_12860, %dec_label_pc_12860 ]
  %v1_12864 = and i32 %v0_12814, -17
  %v3_12864 = icmp eq i32 %v1_12864, 0
  br i1 %v3_12864, label %dec_label_pc_12870, label %bb52

bb52:                                             ; preds = %dec_label_pc_12864
  store i32 %v0_12818, i32* %r6.global-to-local, align 4
  br label %bb56

dec_label_pc_12870:                               ; preds = %dec_label_pc_12864
  %v1_12870 = inttoptr i32 %v0_12884 to i8*
  %v2_12870 = load i8, i8* %v1_12870, align 1
  %v7_12874 = icmp eq i8 %v2_12870, 48
  %v1_12878 = add i32 %v0_12814, 10
  store i32 %v1_12878, i32* %r5.global-to-local, align 4
  br i1 %v7_12874, label %dec_label_pc_12884, label %bb53

bb53:                                             ; preds = %dec_label_pc_12870
  store i32 %v0_12818, i32* %r6.global-to-local, align 4
  br label %.thread8

dec_label_pc_12884:                               ; preds = %dec_label_pc_12870
  %v1_12884 = add i32 %v0_12884, 1
  %v2_12884 = inttoptr i32 %v1_12884 to i8*
  %v3_12884 = load i8, i8* %v2_12884, align 1
  %v4_12884 = zext i8 %v3_12884 to i32
  store i32 %v1_12884, i32* @r4, align 4
  %v1_12888 = or i32 %v4_12884, 32
  %v7_1288c = icmp eq i32 %v1_12888, 120
  %v1_12890 = add i32 %v0_12814, 8
  store i32 %v1_12890, i32* %r5.global-to-local, align 4
  store i32 %v1_12884, i32* %r6.global-to-local, align 4
  br i1 %v7_1288c, label %bb54, label %.thread8

bb54:                                             ; preds = %dec_label_pc_12884
  %v3_1289c = mul i32 %v1_12890, 2
  store i32 %v3_1289c, i32* %r5.global-to-local, align 4
  %v2_128a0 = add i32 %v0_12884, 2
  store i32 %v2_128a0, i32* @r4, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12884, %bb53, %bb54
  %v0_128a4 = phi i32 [ %v1_12878, %bb53 ], [ %v3_1289c, %bb54 ], [ %v1_12890, %dec_label_pc_12884 ]
  %v5_128a8 = icmp slt i32 %v0_128a4, 16
  br i1 %v5_128a8, label %bb56, label %bb55

bb55:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %bb52, %.thread8, %bb55
  %v0_128c0 = phi i32 [ %v0_12814, %bb52 ], [ %v0_128a4, %.thread8 ], [ 16, %bb55 ]
  %v1_128ac = add i32 %v0_128c0, -2
  %tmp = icmp ugt i32 %v1_128ac, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_128bc

.thread:                                          ; preds = %bb56
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12968

dec_label_pc_128bc:                               ; preds = %bb56
  %v2_128c4 = call i32 @function_10558(i32 -1, i32 %v0_128c0)
  store i32 -1, i32* @r0, align 4
  %v0_128d0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_128d0, i32* @r1, align 4
  %v1_128d4 = urem i32 %v0_128c0, 256
  store i32 %v1_128d4, i32* %sl.global-to-local, align 4
  %v0_128d8 = call i32 @function_1045c()
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 %v0_128d8, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_128f0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_128f0

dec_label_pc_128ec:                               ; preds = %bb63, %dec_label_pc_1294c
  %v0_128ec = phi i32 [ %v1_1292c36, %bb63 ], [ %v0_128ec.pre, %dec_label_pc_1294c ]
  store i32 %v0_128ec, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_128f0

dec_label_pc_128f0:                               ; preds = %dec_label_pc_128bc, %dec_label_pc_128ec
  %v0_1292c = phi i32 [ %v0_128f0.pre, %dec_label_pc_128bc ], [ %v0_128ec, %dec_label_pc_128ec ]
  %v1_128f0 = inttoptr i32 %v0_1292c to i8*
  %v2_128f0 = load i8, i8* %v1_128f0, align 1
  %v3_128f0 = zext i8 %v2_128f0 to i32
  %v1_128f4 = add nsw i32 %v3_128f0, -48
  %v1_128f8 = urem i32 %v1_128f4, 256
  %v1_12900 = or i32 %v3_128f0, 32
  %tmp71 = icmp ult i32 %v1_128f8, 10
  br i1 %tmp71, label %bb58, label %dec_label_pc_12908

dec_label_pc_12908:                               ; preds = %dec_label_pc_128f0
  %tmp72 = icmp ugt i32 %v1_12900, 96
  br i1 %tmp72, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12908
  %v1_1290c = add nsw i32 %v1_12900, -87
  %v5_12914 = urem i32 %v1_1290c, 256
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_128f0, %dec_label_pc_12908, %bb57
  %v3_12944 = phi i32 [ %v1_128f8, %dec_label_pc_128f0 ], [ 40, %dec_label_pc_12908 ], [ %v5_12914, %bb57 ]
  %v1_12918 = load i32, i32* %r5.global-to-local, align 4
  %v6_1291c = icmp slt i32 %v3_12944, %v1_12918
  br i1 %v6_1291c, label %dec_label_pc_12920, label %dec_label_pc_12968.loopexit

dec_label_pc_12920:                               ; preds = %bb58
  %v0_12920 = load i32, i32* %ip.global-to-local, align 4
  %v1_12920 = load i32, i32* %r8.global-to-local, align 4
  %v9_12920 = icmp eq i32 %v0_12920, %v1_12920
  br i1 %v9_12920, label %.thread31, label %bb59

.thread31:                                        ; preds = %dec_label_pc_12920
  %v1_1292c32 = add i32 %v0_1292c, 1
  store i32 %v1_1292c32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12934

bb59:                                             ; preds = %dec_label_pc_12920
  %v3_12920 = icmp ult i32 %v0_12920, %v1_12920
  %v1_1292c = add i32 %v0_1292c, 1
  store i32 %v1_1292c, i32* %r4.global-to-local, align 4
  br i1 %v3_12920, label %dec_label_pc_12934, label %dec_label_pc_1294c

dec_label_pc_12934:                               ; preds = %bb59, %.thread31
  %v1_1292c36 = phi i32 [ %v1_1292c32, %.thread31 ], [ %v1_1292c, %bb59 ]
  %v4_1293c2235 = phi i32 [ 1, %.thread31 ], [ 0, %bb59 ]
  %v1_12934 = load i32, i32* %sl.global-to-local, align 4
  %v3_12934 = icmp uge i32 %v3_12944, %v1_12934
  %v9_12934 = icmp eq i32 %v3_12944, %v1_12934
  %v2_12938 = xor i1 %v3_12934, true
  %v3_12938 = or i1 %v9_12934, %v2_12938
  br i1 %v3_12938, label %bb60, label %bb61

bb60:                                             ; preds = %dec_label_pc_12934
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_12934, %bb60
  %v4_1293c = phi i32 [ %v4_1293c2235, %dec_label_pc_12934 ], [ 0, %bb60 ]
  %v2_1293c = xor i1 %v9_12934, true
  %v3_1293c = and i1 %v3_12934, %v2_1293c
  br i1 %v3_1293c, label %bb62, label %thread-pre-split

bb62:                                             ; preds = %bb61
  %v5_1293c = urem i32 %v4_1293c, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb61, %bb62
  %v0_12940 = phi i32 [ %v5_1293c, %bb62 ], [ %v4_1293c, %bb61 ]
  %v2_12940 = icmp eq i32 %v0_12940, 0
  br i1 %v2_12940, label %bb63, label %dec_label_pc_1294c

bb63:                                             ; preds = %thread-pre-split
  %v4_12944 = mul i32 %v0_12920, %v1_12918
  %v5_12944 = add i32 %v4_12944, %v3_12944
  store i32 %v5_12944, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_128ec

dec_label_pc_1294c:                               ; preds = %bb59, %thread-pre-split
  %v0_1294c = call i32 @function_10de8()
  %v0_12954 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12954, i32* %ip.global-to-local, align 4
  %v0_12958 = load i32, i32* @r7, align 4
  %v2_12958 = and i32 %v0_12958, %v0_1281c
  store i32 %v2_12958, i32* @r7, align 4
  %v2_12960 = inttoptr i32 %v0_1294c to i32*
  store i32 34, i32* %v2_12960, align 4
  %v0_128ec.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_128ec

dec_label_pc_12968.loopexit:                      ; preds = %bb58
  %v0_12968.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12968

dec_label_pc_12968:                               ; preds = %.thread, %dec_label_pc_12968.loopexit
  %v2_1296c = phi i32 [ %v0_12968.pre, %dec_label_pc_12968.loopexit ], [ %v0_12810, %.thread ]
  %v2_12968 = icmp eq i32 %v2_1296c, 0
  br i1 %v2_12968, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_12968
  %v1_1296c = load i32, i32* %r6.global-to-local, align 4
  %v3_1296c = inttoptr i32 %v2_1296c to i32*
  store i32 %v1_1296c, i32* %v3_1296c, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_12968, %bb64
  %v0_12974 = load i32, i32* @r7, align 4
  %v2_12974 = icmp eq i32 %v0_12974, 0
  %. = select i1 %v2_12974, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v2_12980 = icmp eq i32 %v0_1281c, 0
  %v0_129a4.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12980, label %dec_label_pc_1299c, label %bb68

bb68:                                             ; preds = %bb65
  %tmp73 = icmp ugt i32 %v0_129a4.pre.pre, %.
  br i1 %tmp73, label %dec_label_pc_1298c, label %dec_label_pc_1299c

dec_label_pc_1298c:                               ; preds = %bb68
  %v0_1298c = call i32 @function_10de8()
  %v2_12994 = inttoptr i32 %v0_1298c to i32*
  store i32 34, i32* %v2_12994, align 4
  %v0_12998 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12998, i32* %ip.global-to-local, align 4
  %v0_1299c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1299c

dec_label_pc_1299c:                               ; preds = %bb68, %bb65, %dec_label_pc_1298c
  %v0_129a4.pre = phi i32 [ %v0_129a4.pre.pre, %bb68 ], [ %v0_12998, %dec_label_pc_1298c ], [ %v0_129a4.pre.pre, %bb65 ]
  %v0_1299c = phi i32 [ %v0_12974, %bb68 ], [ %v0_1299c.pre, %dec_label_pc_1298c ], [ %v0_12974, %bb65 ]
  %v2_1299c = icmp eq i32 %v0_1299c, 0
  br i1 %v2_1299c, label %dec_label_pc_1299c._crit_edge, label %bb69

bb69:                                             ; preds = %dec_label_pc_1299c
  %v2_129a0 = sub i32 0, %v0_129a4.pre
  store i32 %v2_129a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1299c._crit_edge

dec_label_pc_1299c._crit_edge:                    ; preds = %dec_label_pc_1299c, %bb69
  %v0_129a4 = phi i32 [ %v2_129a0, %bb69 ], [ %v0_129a4.pre, %dec_label_pc_1299c ]
  store i32 %v3_127fc, i32* @r4, align 4
  store i32 %v12_127fc, i32* @r7, align 4
  ret i32 %v0_129a4

; uselistorder directives
  uselistorder i32 %v0_129a4.pre, { 1, 0 }
  uselistorder i32 %v0_129a4.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_1293c, { 1, 0 }
  uselistorder i1 %v3_12934, { 1, 0 }
  uselistorder i32 %v1_12934, { 1, 0 }
  uselistorder i32 %v1_12900, { 1, 0 }
  uselistorder i32 %v1_128f8, { 1, 0 }
  uselistorder i32 %v0_1292c, { 1, 0, 2 }
  uselistorder i32 %v0_128ec, { 1, 0 }
  uselistorder i32 %v3_1289c, { 1, 0 }
  uselistorder i32 %v1_12890, { 1, 0, 2 }
  uselistorder i32 %v0_12860, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1281c, { 1, 0 }
  uselistorder i32 %v0_12814, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 1, 0, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 ()* @function_1045c, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 (i32, i32)* @function_10558, { 3, 2, 0, 6, 1, 5, 4 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1299c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1299c, { 2, 0, 1 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_12968, { 1, 0 }
  uselistorder label %dec_label_pc_1294c, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_128f0, { 1, 0 }
  uselistorder label %dec_label_pc_128ec, { 1, 0 }
  uselistorder label %bb56, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12864, { 1, 0 }
  uselistorder label %dec_label_pc_12860, { 1, 0 }
  uselistorder label %dec_label_pc_12828, { 1, 0 }
}

define i32 @function_129bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_129bc:
  %stack_var_-16 = alloca i32, align 4
  store i32 123612, i32* @r5, align 4
  %v4_129c8 = load i32, i32* inttoptr (i32 123700 to i32*), align 4
  store i32 %v4_129c8, i32* @r4, align 4
  %v2_129d0 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_129e8 = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_129e8)
  %v0_129fc = load i32, i32* @r5, align 4
  %v2_129fc = add i32 %v0_129fc, 16
  %v3_129fc = inttoptr i32 %v2_129fc to i32*
  %v4_129fc = load i32, i32* %v3_129fc, align 4
  call void @__pseudo_branch(i32 %v4_129fc)
  %v4_12a0c = load i32, i32* @global_var_1e574.405, align 4
  %v2_12a10 = icmp eq i32 %v4_12a0c, 0
  br i1 %v2_12a10, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_129bc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_129bc, %bb
  %v2_12a1c = xor i1 %v2_12a10, true
  call void @__pseudo_cond_branch(i1 %v2_12a1c, i32 %v4_12a0c)
  store i32 %v2_129d0, i32* @r0, align 4
  %v0_12a2c = load i32, i32* @r5, align 4
  %v2_12a2c = add i32 %v0_12a2c, 24
  %v3_12a2c = inttoptr i32 %v2_12a2c to i32*
  %v4_12a2c = load i32, i32* %v3_12a2c, align 4
  call void @__pseudo_branch(i32 %v4_12a2c)
  %v0_12a38 = call i32 @function_13288()
  %v0_12a40 = load i32, i32* @r5, align 4
  %v9_12a40 = icmp eq i32 %v0_12a40, 39864
  br i1 %v9_12a40, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_12a48 = xor i1 %v9_12a40, true
  call void @__pseudo_cond_branch(i1 %v2_12a48, i32 ptrtoint (i32* @global_var_14724.408 to i32))
  %v0_12a4c = load i32, i32* @r6, align 4
  %v1_12a50 = call i32 @function_13cf0(i32 %v0_12a4c)
  %v0_12a54 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12a54, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v3_12a54 = load i32, i32* @sb, align 4
  %v8_12a54 = shl i32 %v1_12a50, %v3_12a54
  %v9_12a54 = and i32 %v8_12a54, %v1_12a50
  store i32 %v9_12a54, i32* @fp, align 4
  %v2_12a58 = load i32, i32* @r8, align 4
  %v2_12a68 = load i32, i32* @r2, align 4
  %v3_12a68 = mul i32 %v2_12a68, %v2_12a58
  %v8_12a6c = shl i32 %v2_12a58, %v3_12a68
  %v9_12a6c = and i32 %v8_12a6c, %v3_12a68
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_12a6c = phi i32 [ %v1_12a50, %bb9 ], [ %v9_12a6c, %bb10 ]
  ret i32 %v10_12a6c

; uselistorder directives
  uselistorder i32 %v2_12a58, { 1, 0 }
  uselistorder i32 %v1_12a50, { 1, 0, 2 }
  uselistorder i1 %v9_12a40, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12a74(i32 %arg1) local_unnamed_addr {
dec_label_pc_12a74:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_12a74 = load i32, i32* @r4, align 4
  %v6_12a74 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_12a78 = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_12a78, label %dec_label_pc_12b0c, label %dec_label_pc_12a88

dec_label_pc_12a88:                               ; preds = %dec_label_pc_12a74
  %v2_12a98 = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_12aac = call i32 @function_13700(i32 17, i32 0, i32 %v2_12a98)
  %v3_12ab0 = load i32, i32* %stack_var_-44, align 4
  %v7_12ab4 = icmp eq i32 %v3_12ab0, 1
  br i1 %v7_12ab4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12a88
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12a88, %bb
  call void @__pseudo_cond_branch(i1 %v7_12ab4, i32 ptrtoint (i32* @global_var_10988.410 to i32))
  %v2_12ac8 = ptrtoint i32* %stack_var_-16 to i32
  %v2_12ad0 = call i32 @function_13c34(i32 %v2_12ac8, i32 %v2_12ac8)
  %v2_12ad4 = icmp eq i32 %v2_12ad0, 0
  br i1 %v2_12ad4, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_12ae8 = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_12ae8, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_12af8 = load i32, i32* %stack_var_-24, align 4
  %v1_12afc = and i32 %v3_12af8, 65536
  %v2_12afc = icmp eq i32 %v1_12afc, 0
  br i1 %v2_12afc, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_12afc, i32 ptrtoint (i32* @global_var_10988.410 to i32))
  %v0_12b0c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b0c

dec_label_pc_12b0c:                               ; preds = %dec_label_pc_12a74, %.thread6
  %v0_12b0c = phi i32 [ %v0_12b0c.pre, %.thread6 ], [ 0, %dec_label_pc_12a74 ]
  store i32 %v3_12a74, i32* @r4, align 4
  store i32 %v6_12a74, i32* @lr, align 4
  ret i32 %v0_12b0c

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_13700, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12b0c, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12b20() local_unnamed_addr {
dec_label_pc_12b20:
  %stack_var_-36 = alloca i32, align 4
  store i32 123612, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15f60.414 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_12b40 = call i32 @function_14164(i32 ptrtoint ([11 x i8]* @global_var_15f60.414 to i32))
  store i32 %v2_12b40, i32* @r6, align 4
  %v2_12b44 = icmp eq i32 %v2_12b40, 0
  br i1 %v2_12b44, label %dec_label_pc_12bc4, label %dec_label_pc_12b4c

dec_label_pc_12b4c:                               ; preds = %dec_label_pc_12b20
  store i32 220, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_15f6c.417 to i32), i32* @r8, align 4
  %v2_12b58 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12b58, i32* @r7, align 4
  br label %bb18

dec_label_pc_12b60:                               ; preds = %bb18
  %v3_12b60 = load i32, i32* %stack_var_-36, align 4
  %v1_12b64 = inttoptr i32 %v3_12b60 to i32*
  %v2_12b64 = load i32, i32* %v1_12b64, align 4
  %v1_12b68 = inttoptr i32 %v2_12b64 to i8*
  %v2_12b68 = load i8, i8* %v1_12b68, align 1
  %v7_12b6c = icmp eq i8 %v2_12b68, 99
  br i1 %v7_12b6c, label %dec_label_pc_12b74, label %.backedge3

dec_label_pc_12b74:                               ; preds = %dec_label_pc_12b60
  %v1_12b74 = add i32 %v2_12b64, 1
  %v2_12b74 = inttoptr i32 %v1_12b74 to i8*
  %v3_12b74 = load i8, i8* %v2_12b74, align 1
  %v7_12b78 = icmp eq i8 %v3_12b74, 112
  br i1 %v7_12b78, label %dec_label_pc_12b80, label %.backedge3

dec_label_pc_12b80:                               ; preds = %dec_label_pc_12b74
  %v1_12b80 = add i32 %v2_12b64, 2
  %v2_12b80 = inttoptr i32 %v1_12b80 to i8*
  %v3_12b80 = load i8, i8* %v2_12b80, align 1
  %v7_12b84 = icmp eq i8 %v3_12b80, 117
  br i1 %v7_12b84, label %dec_label_pc_12b8c, label %.backedge3

dec_label_pc_12b8c:                               ; preds = %dec_label_pc_12b80
  %v1_12b8c = add i32 %v2_12b64, 3
  %v2_12b8c = inttoptr i32 %v1_12b8c to i8*
  %v3_12b8c = load i8, i8* %v2_12b8c, align 1
  %v4_12b8c = zext i8 %v3_12b8c to i32
  %v0_12b90 = load i32, i32* @r4, align 4
  %v1_12b90 = load i32, i32* @sl, align 4
  %v2_12b90 = add i32 %v1_12b90, %v0_12b90
  %v3_12b90 = inttoptr i32 %v2_12b90 to i32*
  %v4_12b90 = load i32, i32* %v3_12b90, align 4
  %v2_12b94 = mul nuw nsw i32 %v4_12b8c, 2
  %v2_12b98 = add i32 %v4_12b90, %v2_12b94
  %v3_12b98 = inttoptr i32 %v2_12b98 to i16*
  %v4_12b98 = load i16, i16* %v3_12b98, align 2
  %v1_12b9c = and i16 %v4_12b98, 8
  %v2_12b9c = icmp eq i16 %v1_12b9c, 0
  br i1 %v2_12b9c, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_12b8c
  %v1_12ba0 = load i32, i32* @r5, align 4
  %v2_12ba0 = add i32 %v1_12ba0, 1
  store i32 %v2_12ba0, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_12b8c, %dec_label_pc_12b60, %dec_label_pc_12b74, %dec_label_pc_12b80
  %v0_12ba4.pre = load i32, i32* @r6, align 4
  %v0_12bb0.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_12b4c
  %v0_12bb0 = phi i32 [ %v0_12bb0.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_15f6c.417 to i32), %dec_label_pc_12b4c ]
  %v0_12ba4 = phi i32 [ %v0_12ba4.pre, %.backedge3 ], [ %v2_12b40, %dec_label_pc_12b4c ]
  %v4_12bb4 = inttoptr i32 %v0_12ba4 to i32*
  %v5_12bb4 = call i32 @function_13e08(i32* %v4_12bb4, i32 %v2_12b58, i32 258, i32 %v0_12bb0)
  %v2_12bb8 = icmp eq i32 %v5_12bb4, 0
  br i1 %v2_12bb8, label %dec_label_pc_12c28, label %dec_label_pc_12b60

dec_label_pc_12bc4:                               ; preds = %dec_label_pc_12b20
  store i32 ptrtoint ([14 x i8]* @global_var_15f70.420 to i32), i32* @r0, align 4
  %v2_12bcc = call i32 @function_14164(i32 ptrtoint ([14 x i8]* @global_var_15f70.420 to i32))
  store i32 %v2_12bcc, i32* @r6, align 4
  %v2_12bd0 = icmp eq i32 %v2_12bcc, 0
  br i1 %v2_12bd0, label %bb19, label %dec_label_pc_12bdc

bb19:                                             ; preds = %dec_label_pc_12bc4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12c28

dec_label_pc_12bdc:                               ; preds = %dec_label_pc_12bc4
  store i32 ptrtoint ([10 x i8]* @global_var_15f80.422 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_15fa4.424 to i32), i32* @r7, align 4
  %v2_12bec = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12bec, i32* @r4, align 4
  br label %bb21

dec_label_pc_12bf4:                               ; preds = %bb21
  %v0_12c20 = load i32, i32* @r8, align 4
  %v1_12c20 = inttoptr i32 %v0_12c20 to i8*
  %v3_12bf4 = load i32, i32* %stack_var_-36, align 4
  %v1_12bf8 = inttoptr i32 %v3_12bf4 to i32*
  %v2_12bf8 = load i32, i32* %v1_12bf8, align 4
  store i32 %v2_12bf8, i32* @r1, align 4
  %v4_12bfc = call i32 @function_15410(i8* %v1_12c20, i32 %v2_12bf8)
  %v2_12c00 = icmp eq i32 %v4_12bfc, 0
  br i1 %v2_12c00, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_12bf4
  %v1_12c04 = load i32, i32* @r5, align 4
  %v2_12c04 = add i32 %v1_12c04, 1
  store i32 %v2_12c04, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_12bf4
  %v0_12c10.pre = load i32, i32* @r7, align 4
  %v0_12c14.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_12bdc
  %v0_12c14 = phi i32 [ %v0_12c14.pre, %.backedge ], [ %v2_12bcc, %dec_label_pc_12bdc ]
  %v0_12c10 = phi i32 [ %v0_12c10.pre, %.backedge ], [ ptrtoint (i32* @global_var_15fa4.424 to i32), %dec_label_pc_12bdc ]
  %v4_12c18 = inttoptr i32 %v0_12c14 to i32*
  %v5_12c18 = call i32 @function_13e08(i32* %v4_12c18, i32 %v2_12bec, i32 459266, i32 %v0_12c10)
  %v2_12c1c = icmp eq i32 %v5_12c18, 0
  br i1 %v2_12c1c, label %dec_label_pc_12c28, label %dec_label_pc_12bf4

dec_label_pc_12c28:                               ; preds = %bb18, %bb21, %bb19
  %v0_12c28 = load i32, i32* @r6, align 4
  %v1_12c2c = inttoptr i32 %v0_12c28 to i32*
  %v2_12c2c = call i32 @function_14130(i32* %v1_12c2c)
  %v0_12c30 = load i32, i32* @r5, align 4
  %v2_12c30 = icmp eq i32 %v0_12c30, 0
  %.v0_12c30 = select i1 %v2_12c30, i32 1, i32 %v0_12c30
  ret i32 %.v0_12c30

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_14164, { 1, 0 }
  uselistorder label %dec_label_pc_12c28, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_12c6c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12c6c:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_13054

bb:                                               ; preds = %dec_label_pc_12c6c
  %v7_12c80 = mul i32 %arg1, 4
  %v8_12c80 = add i32 %v7_12c80, ptrtoint (i32* @global_var_12c88.427 to i32)
  call void @__pseudo_branch(i32 %v8_12c80)
  br label %dec_label_pc_13054

dec_label_pc_13054:                               ; preds = %bb, %dec_label_pc_12c6c
  %v0_13054 = call i32 @function_10de8()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13060 = inttoptr i32 %v0_13054 to i32*
  store i32 22, i32* %v2_13060, align 4
  %v0_13210 = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_13210

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_13288() local_unnamed_addr {
dec_label_pc_132ac.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13288 = load i32, i32* @r4, align 4
  store i32 %v3_13288, i32* %stack_var_-16, align 4
  store i32 123604, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_132ac

dec_label_pc_132ac:                               ; preds = %dec_label_pc_132ac.dec_label_pc_132ac_crit_edge, %dec_label_pc_132ac.lr.ph
  %v1_132ac = phi i32 [ %v1_132b8, %dec_label_pc_132ac.dec_label_pc_132ac_crit_edge ], [ 0, %dec_label_pc_132ac.lr.ph ]
  %v0_132ac = phi i32 [ %v0_132ac.pre, %dec_label_pc_132ac.dec_label_pc_132ac_crit_edge ], [ 123604, %dec_label_pc_132ac.lr.ph ]
  %v4_132ac = mul i32 %v1_132ac, 4
  %v5_132ac = add i32 %v4_132ac, %v0_132ac
  %v6_132ac = inttoptr i32 %v5_132ac to i32*
  %v7_132ac = load i32, i32* %v6_132ac, align 4
  call void @__pseudo_branch(i32 %v7_132ac)
  %v0_132b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_132b8 = add i32 %v0_132b8, -1
  store i32 %v1_132b8, i32* %r4.global-to-local, align 4
  %v2_132b8 = icmp eq i32 %v0_132b8, 0
  br i1 %v2_132b8, label %dec_label_pc_132c0, label %dec_label_pc_132ac.dec_label_pc_132ac_crit_edge

dec_label_pc_132ac.dec_label_pc_132ac_crit_edge:  ; preds = %dec_label_pc_132ac
  %v0_132ac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_132ac

dec_label_pc_132c0:                               ; preds = %dec_label_pc_132ac
  %v4_132c4 = load i32, i32* @global_var_1e584.440, align 4
  %v2_132c8 = icmp eq i32 %v4_132c4, 0
  br i1 %v2_132c8, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_132c0
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_132c0, %bb
  %v2_132d0 = xor i1 %v2_132c8, true
  call void @__pseudo_cond_branch(i1 %v2_132d0, i32 %v4_132c4)
  %v4_132d8 = load i32, i32* @global_var_1e588.442, align 4
  %v2_132dc = icmp eq i32 %v4_132d8, 0
  br i1 %v2_132dc, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_132e4 = xor i1 %v2_132dc, true
  call void @__pseudo_cond_branch(i1 %v2_132e4, i32 %v4_132d8)
  %v2_132e8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_132e8, i32* %r4.global-to-local, align 4
  %v1_132ec = load i32, i32* @r0, align 4
  ret i32 %v1_132ec

; uselistorder directives
  uselistorder i32 %v1_132b8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_13304(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13304:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_13318 = call i32 @function_107f4(i32 %arg1, i32 1)
  %v3_13320 = icmp eq i32 %v2_13318, -1
  store i32 123612, i32* @r3, align 4
  br i1 %v3_13320, label %dec_label_pc_1332c, label %dec_label_pc_13344

dec_label_pc_1332c:                               ; preds = %dec_label_pc_13304
  %v0_13330 = load i32, i32* %r5.global-to-local, align 4
  %v3_13338 = call i32 @function_105cc(i32 ptrtoint ([10 x i8]* @global_var_15fa8.445 to i32), i32 %v0_13330)
  %v1_1333c = load i32, i32* %r4.global-to-local, align 4
  %v1_13340 = icmp ne i32 %v3_13338, %v1_1333c
  call void @__pseudo_cond_branch(i1 %v1_13340, i32 ptrtoint (i32* @global_var_12698.446 to i32))
  br label %dec_label_pc_13344

dec_label_pc_13344:                               ; preds = %dec_label_pc_13304, %dec_label_pc_1332c
  %v1_1334c = phi i32 [ %v2_13318, %dec_label_pc_13304 ], [ %v3_13338, %dec_label_pc_1332c ]
  ret i32 %v1_1334c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13344, { 1, 0 }
}

define i32 @function_13358(i32 %arg1) local_unnamed_addr {
dec_label_pc_13358:
  %r4.global-to-local = alloca i32, align 4
  store i32 123612, i32* %r4.global-to-local, align 4
  %v4_13368 = load i32, i32* inttoptr (i32 123704 to i32*), align 8
  %v1_1336c = inttoptr i32 %v4_13368 to i32*
  %v2_1336c = load i32, i32* %v1_1336c, align 4
  %v2_13370 = icmp eq i32 %v2_1336c, 0
  br i1 %v2_13370, label %dec_label_pc_13378, label %dec_label_pc_133ac

dec_label_pc_13378:                               ; preds = %dec_label_pc_13358
  %v4_1337c = load i32, i32* inttoptr (i32 123664 to i32*), align 16
  %v2_13384 = icmp eq i32 %v4_1337c, 0
  store i32 4096, i32* %v1_1336c, align 4
  br i1 %v2_13384, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13378
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13378, %bb
  %v2_13390 = xor i1 %v2_13384, true
  call void @__pseudo_cond_branch(i1 %v2_13390, i32 %v4_1337c)
  %v0_13398 = load i32, i32* %r4.global-to-local, align 4
  %v2_133a0 = icmp eq i32 %v0_13398, 40020
  br i1 %v2_133a0, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_133a8 = xor i1 %v2_133a0, true
  call void @__pseudo_cond_branch(i1 %v2_133a8, i32 ptrtoint (i32* @global_var_14688.451 to i32))
  br label %dec_label_pc_133ac

dec_label_pc_133ac:                               ; preds = %dec_label_pc_13358, %bb6
  %v1_133b0 = load i32, i32* @r0, align 4
  ret i32 %v1_133b0

; uselistorder directives
  uselistorder i1 %v2_133a0, { 1, 0 }
  uselistorder label %dec_label_pc_133ac, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_133c4(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_133c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %tmp54 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_133cc = add i32 %tmp, 4
  store i32 %v1_133cc, i32* %ip.global-to-local, align 4
  %v2_133d0 = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_aefc.453 to i32), i32 78816), i32* @r6, align 4
  %v3_133dc = mul i32 %arg2, 4
  store i32 %v3_133dc, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_133e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_aefc.453 to i32), i32 78836) to i32*), align 4
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_133ec = ptrtoint i32* %stack_var_-120 to i32
  %v4_133f0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_aefc.453 to i32), i32 78844) to i32*), align 4
  store i32 %v4_133f0, i32* %r4.global-to-local, align 4
  %v2_133f8 = add i32 %v1_133cc, %v3_133dc
  store i32 %v2_133f8, i32* %ip.global-to-local, align 4
  %v9_133fc = icmp eq i32 %v2_133f8, %v2_133d0
  store i1 %v9_133fc, i1* %cpsr_z.global-to-local, align 1
  %v2_13400 = inttoptr i32 %v4_133e4 to i32*
  store i32 %arg7, i32* %v2_13400, align 4
  store i32 684, i32* %r2.global-to-local, align 4
  %v0_1340c = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_133fc, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_133c4
  %v1_13410 = load i32, i32* @r7, align 4
  %v2_13410 = load i32, i32* %r5.global-to-local, align 4
  %v3_13410 = add i32 %v2_13410, %v1_13410
  store i32 %v3_13410, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1e588.442, align 4
  %v0_13418 = load i32, i32* %ip.global-to-local, align 4
  %v1_13418 = load i32, i32* %r4.global-to-local, align 4
  %v2_13418 = inttoptr i32 %v1_13418 to i32*
  store i32 %v0_13418, i32* %v2_13418, align 4
  store i32 120, i32* @r2, align 4
  %v1_13424 = load i32, i32* %r3.global-to-local, align 4
  %v2_13424 = load i32, i32* %r4.global-to-local, align 4
  %v3_13424 = inttoptr i32 %v2_13424 to i32*
  store i32 %v1_13424, i32* %v3_13424, align 4
  br label %bb58

.critedge:                                        ; preds = %dec_label_pc_133c4
  store i32 %arg6, i32* @global_var_1e588.442, align 4
  %v0_13418.c = load i32, i32* %ip.global-to-local, align 4
  %v1_13418.c = load i32, i32* %r4.global-to-local, align 4
  %v2_13418.c = inttoptr i32 %v1_13418.c to i32*
  store i32 %v0_13418.c, i32* %v2_13418.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb58

bb58:                                             ; preds = %.critedge, %bb
  store i32 %v2_133ec, i32* %r0.global-to-local, align 4
  %v2_13430 = bitcast i32* %stack_var_-120 to i8*
  %v3_13430 = call i32 @function_10e40(i8* %v2_13430, i32 0)
  store i32 %v3_13430, i32* %r0.global-to-local, align 4
  %v0_13434 = load i32, i32* %r4.global-to-local, align 4
  %v1_13434 = inttoptr i32 %v0_13434 to i32*
  %storemerge.pre = load i32, i32* %v1_13434, align 4
  br label %dec_label_pc_13440

dec_label_pc_13440:                               ; preds = %dec_label_pc_13440, %bb58
  %storemerge = phi i32 [ %storemerge.pre, %bb58 ], [ %v4_13440, %dec_label_pc_13440 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_13440 = inttoptr i32 %storemerge to i32*
  %v2_13440 = load i32, i32* %v1_13440, align 4
  store i32 %v2_13440, i32* %r3.global-to-local, align 4
  %v4_13440 = add i32 %storemerge, 4
  store i32 %v4_13440, i32* %r2.global-to-local, align 4
  %v2_13444 = icmp eq i32 %v2_13440, 0
  br i1 %v2_13444, label %dec_label_pc_13450, label %dec_label_pc_13440

dec_label_pc_13450:                               ; preds = %dec_label_pc_13440
  store i32 %v4_13440, i32* @r4, align 4
  store i32 %v2_133ec, i32* @r5, align 4
  %v1_1347429 = inttoptr i32 %v4_13440 to i32*
  %v2_1347430 = load i32, i32* %v1_1347429, align 4
  store i32 %v2_1347430, i32* %r3.global-to-local, align 4
  %v2_1347832 = icmp eq i32 %v2_1347430, 0
  store i1 %v2_1347832, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1347832, label %dec_label_pc_13480, label %dec_label_pc_1345c

dec_label_pc_1345c:                               ; preds = %dec_label_pc_13450, %dec_label_pc_13474
  %v5_13460 = phi i32 [ %v2_13474, %dec_label_pc_13474 ], [ %v2_1347430, %dec_label_pc_13450 ]
  %v2_1345c = icmp ugt i32 %v5_13460, 13
  %v7_1345c = icmp eq i32 %v5_13460, 14
  store i1 %v7_1345c, i1* %cpsr_z.global-to-local, align 1
  %v2_13460 = xor i1 %v2_1345c, true
  %v3_13460 = or i1 %v7_1345c, %v2_13460
  br i1 %v3_13460, label %bb59, label %bb60

bb59:                                             ; preds = %dec_label_pc_1345c
  %v4_13460 = load i32, i32* @r5, align 4
  %v6_13460 = and i32 %v5_13460, 536870912
  %v7_13460 = icmp ne i32 %v6_13460, 0
  %v8_13460 = mul i32 %v5_13460, 8
  %v9_13460 = add i32 %v4_13460, %v8_13460
  store i32 %v9_13460, i32* %r0.global-to-local, align 4
  br label %bb60

bb60:                                             ; preds = %dec_label_pc_1345c, %bb59
  %v1_1346c = phi i1 [ %v2_1345c, %dec_label_pc_1345c ], [ %v7_13460, %bb59 ]
  %v2_13464 = xor i1 %v1_1346c, true
  %v3_13464 = or i1 %v7_1345c, %v2_13464
  br i1 %v3_13464, label %bb61, label %dec_label_pc_13474

bb61:                                             ; preds = %bb60
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13474

dec_label_pc_13474:                               ; preds = %bb60, %bb61
  call void @__pseudo_cond_branch(i1 %v3_13464, i32 ptrtoint (i32* @global_var_10ef0.457 to i32))
  %v0_13470 = load i32, i32* @r4, align 4
  %v1_13470 = add i32 %v0_13470, 8
  store i32 %v1_13470, i32* @r4, align 4
  %v1_13474 = inttoptr i32 %v1_13470 to i32*
  %v2_13474 = load i32, i32* %v1_13474, align 4
  store i32 %v2_13474, i32* %r3.global-to-local, align 4
  %v2_13478 = icmp eq i32 %v2_13474, 0
  store i1 %v2_13478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13478, label %dec_label_pc_13480, label %dec_label_pc_1345c

dec_label_pc_13480:                               ; preds = %dec_label_pc_13474, %dec_label_pc_13450
  store i32 %v2_133ec, i32* %r0.global-to-local, align 4
  %v1_13484 = call i32 @function_15884(i32 %v2_133ec)
  store i32 %v1_13484, i32* @r0, align 4
  %v1_13488 = call i32 @function_13358(i32 %v1_13484)
  store i32 %v1_13488, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp54, i32* @r2, align 4
  %v0_13494 = load i32, i32* @r6, align 4
  %v2_13494 = add i32 %v0_13494, 92
  %v3_13494 = inttoptr i32 %v2_13494 to i32*
  %v4_13494 = load i32, i32* %v3_13494, align 4
  store i32 %tmp53, i32* @r3, align 4
  %v2_1349c = icmp eq i32 %tmp54, 0
  store i1 %v2_1349c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1349c, label %bb62, label %bb63

bb62:                                             ; preds = %dec_label_pc_13480
  store i32 4096, i32* @r2, align 4
  br label %bb63

bb63:                                             ; preds = %dec_label_pc_13480, %bb62
  %v0_134a8 = phi i32 [ %tmp54, %dec_label_pc_13480 ], [ 4096, %bb62 ]
  %v3_134a4 = icmp eq i32 %tmp53, -1
  %v8_134a4 = icmp eq i32 %tmp53, -1
  store i1 %v8_134a4, i1* %cpsr_z.global-to-local, align 1
  %v2_134a8 = inttoptr i32 %v4_13494 to i32*
  store i32 %v0_134a8, i32* %v2_134a8, align 4
  br i1 %v3_134a4, label %dec_label_pc_134b0, label %dec_label_pc_134d8

dec_label_pc_134b0:                               ; preds = %bb63
  %v0_134b0 = call i32 @function_137c8()
  store i32 %v0_134b0, i32* @r0, align 4
  store i32 %v0_134b0, i32* @r4, align 4
  %v0_134b8 = call i32 @function_13824()
  store i32 %v0_134b8, i32* @r0, align 4
  %v0_134bc = load i32, i32* @r4, align 4
  %v9_134bc = icmp eq i32 %v0_134bc, %v0_134b8
  store i1 %v9_134bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_134bc, label %dec_label_pc_134c4, label %dec_label_pc_13500

dec_label_pc_134c4:                               ; preds = %dec_label_pc_134b0
  %v1_134c4 = call i32 @function_13990(i32 %v0_134b8)
  store i32 %v1_134c4, i32* @r0, align 4
  store i32 %v1_134c4, i32* @r4, align 4
  %v0_134cc = call i32 @function_13810()
  store i32 %v0_134cc, i32* @r0, align 4
  %v0_134d0 = load i32, i32* @r4, align 4
  %v9_134d0 = icmp eq i32 %v0_134d0, %v0_134cc
  store i1 %v9_134d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_134d0, label %dec_label_pc_134d8, label %dec_label_pc_13500

dec_label_pc_134d8:                               ; preds = %dec_label_pc_134c4, %bb63
  store i32 %tmp53, i32* @r2, align 4
  store i1 %v8_134a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_134a4, label %dec_label_pc_13524, label %dec_label_pc_134e4

dec_label_pc_134e4:                               ; preds = %dec_label_pc_134d8
  store i32 %tmp52, i32* @r3, align 4
  %v9_134e8 = icmp eq i32 %tmp53, %tmp52
  store i1 %v9_134e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_134e8, label %dec_label_pc_134f0, label %dec_label_pc_13500

dec_label_pc_134f0:                               ; preds = %dec_label_pc_134e4
  store i32 %tmp51, i32* @r2, align 4
  store i32 %tmp50, i32* @r3, align 4
  %v9_134f8 = icmp eq i32 %tmp51, %tmp50
  store i1 %v9_134f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_134f8, label %dec_label_pc_13524, label %dec_label_pc_13500

dec_label_pc_13500:                               ; preds = %dec_label_pc_134e4, %dec_label_pc_134c4, %dec_label_pc_134b0, %dec_label_pc_134f0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_13508 = call i32 @function_13304(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_13514 = call i32 @function_13304(i32 1, i32 32770)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_13520 = call i32 @function_13304(i32 2, i32 32770)
  store i32 %v2_13520, i32* @r0, align 4
  br label %dec_label_pc_13524

dec_label_pc_13524:                               ; preds = %dec_label_pc_134f0, %dec_label_pc_134d8, %dec_label_pc_13500
  %v0_13524 = load i32, i32* @r7, align 4
  %v1_13524 = inttoptr i32 %v0_13524 to i32*
  %v2_13524 = load i32, i32* %v1_13524, align 4
  store i32 %v2_13524, i32* %r2.global-to-local, align 4
  store i32 204, i32* %r3.global-to-local, align 4
  %v1_1352c = load i32, i32* @r6, align 4
  %v3_1352c = add i32 %v1_1352c, 204
  %v4_1352c = inttoptr i32 %v3_1352c to i32*
  store i32 %v2_13524, i32* %v4_1352c, align 4
  %v0_13530 = load i32, i32* @r7, align 4
  %v1_13530 = inttoptr i32 %v0_13530 to i32*
  %v2_13530 = load i32, i32* %v1_13530, align 4
  store i32 %v2_13530, i32* @r4, align 4
  %v2_13534 = icmp eq i32 %v2_13530, 0
  store i1 %v2_13534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13534, label %dec_label_pc_135d8.lr.ph, label %dec_label_pc_1353c

dec_label_pc_1353c:                               ; preds = %dec_label_pc_13524
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_13540 = load i32, i32* @r6, align 4
  %v2_13540 = add i32 %v0_13540, 112
  %v3_13540 = inttoptr i32 %v2_13540 to i32*
  %v4_13540 = load i32, i32* %v3_13540, align 4
  store i32 %v4_13540, i32* %r3.global-to-local, align 4
  %v2_13544 = inttoptr i32 %v4_13540 to i32*
  store i32 %v2_13530, i32* %v2_13544, align 4
  %v0_1354c = load i32, i32* @r7, align 4
  %v1_1354c = inttoptr i32 %v0_1354c to i32*
  %v2_1354c = load i32, i32* %v1_1354c, align 4
  store i32 %v2_1354c, i32* %r0.global-to-local, align 4
  %v4_13550 = call i32 @function_154c0(i32 %v2_1354c, i32 47, i32 %v2_13524, i32 %v4_13540)
  store i32 %v4_13550, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_13558 = icmp eq i32 %v4_13550, 0
  store i1 %v2_13558, i1* %cpsr_z.global-to-local, align 1
  %v0_1355c = load i32, i32* @r6, align 4
  %v2_1355c = add i32 %v0_1355c, 60
  %v3_1355c = inttoptr i32 %v2_1355c to i32*
  %v4_1355c = load i32, i32* %v3_1355c, align 4
  store i32 %v4_1355c, i32* %r2.global-to-local, align 4
  br i1 %v2_13558, label %.thread47, label %bb64

.thread47:                                        ; preds = %dec_label_pc_1353c
  %v2_1356448 = inttoptr i32 %v4_1355c to i32*
  store i32 0, i32* %v2_1356448, align 4
  br label %dec_label_pc_135d8.lr.ph

bb64:                                             ; preds = %dec_label_pc_1353c
  %v2_13560 = add i32 %v4_13550, 1
  store i32 %v2_13560, i32* %r3.global-to-local, align 4
  %v2_13564 = inttoptr i32 %v4_1355c to i32*
  store i32 %v4_13550, i32* %v2_13564, align 4
  %v1_13568 = load i32, i32* %r3.global-to-local, align 4
  %v2_13568 = load i32, i32* %r2.global-to-local, align 4
  %v3_13568 = inttoptr i32 %v2_13568 to i32*
  store i32 %v1_13568, i32* %v3_13568, align 4
  br label %dec_label_pc_135d8.lr.ph

dec_label_pc_135d8.lr.ph:                         ; preds = %.thread47, %bb64, %dec_label_pc_13524
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_13580 = load i32, i32* @r6, align 4
  %v2_13580 = add i32 %v0_13580, -12
  store i32 %v2_13580, i32* %r8.global-to-local, align 4
  store i32 680, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1e584.440, align 4
  %v2_135b0 = icmp eq i32 %v0_1340c, 0
  store i1 %v2_135b0, i1* %cpsr_z.global-to-local, align 1
  %v2_135b8 = xor i1 %v2_135b0, true
  call void @__pseudo_cond_branch(i1 %v2_135b8, i32 %v0_1340c)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_135cc = load i32, i32* @r6, align 4
  %v2_135cc = add i32 %v0_135cc, -12
  store i32 %v2_135cc, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_135d8

dec_label_pc_135d8:                               ; preds = %dec_label_pc_135d8.dec_label_pc_135d8_crit_edge, %dec_label_pc_135d8.lr.ph
  %v1_135d8 = phi i32 [ %v1_135e4, %dec_label_pc_135d8.dec_label_pc_135d8_crit_edge ], [ 0, %dec_label_pc_135d8.lr.ph ]
  %v0_135d8 = phi i32 [ %v0_135d8.pre, %dec_label_pc_135d8.dec_label_pc_135d8_crit_edge ], [ %v2_135cc, %dec_label_pc_135d8.lr.ph ]
  %v4_135d8 = mul i32 %v1_135d8, 4
  %v5_135d8 = add i32 %v4_135d8, %v0_135d8
  %v6_135d8 = inttoptr i32 %v5_135d8 to i32*
  %v7_135d8 = load i32, i32* %v6_135d8, align 4
  store i32 %v7_135d8, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_135d8)
  %v0_135e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_135e4 = add i32 %v0_135e4, 1
  store i32 %v1_135e4, i32* %r4.global-to-local, align 4
  %v1_135e8 = load i32, i32* %r5.global-to-local, align 4
  %v3_135e8 = icmp ult i32 %v1_135e4, %v1_135e8
  %v9_135e8 = icmp eq i32 %v1_135e4, %v1_135e8
  store i1 %v9_135e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_135e8, label %dec_label_pc_135d8.dec_label_pc_135d8_crit_edge, label %dec_label_pc_135f0

dec_label_pc_135d8.dec_label_pc_135d8_crit_edge:  ; preds = %dec_label_pc_135d8
  %v0_135d8.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_135d8

dec_label_pc_135f0:                               ; preds = %dec_label_pc_135d8
  %v0_135f4.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_135f4 = add i32 %v0_135f4.pre, 104
  %v3_135f4 = inttoptr i32 %v2_135f4 to i32*
  %v4_135f4 = load i32, i32* %v3_135f4, align 4
  store i32 %v4_135f4, i32* %r2.global-to-local, align 4
  store i32 %v4_135f4, i32* %r3.global-to-local, align 4
  %v2_135fc = icmp eq i32 %v4_135f4, 0
  store i1 %v2_135fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_135fc, label %dec_label_pc_13614, label %dec_label_pc_13604

dec_label_pc_13604:                               ; preds = %dec_label_pc_135f0
  call void @__pseudo_branch(i32 %v4_135f4)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13610 = load i32, i32* @r0, align 4
  %v2_13610 = inttoptr i32 %v1_13610 to i32*
  store i32 0, i32* %v2_13610, align 4
  %v0_13618.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13614

dec_label_pc_13614:                               ; preds = %dec_label_pc_135f0, %dec_label_pc_13604
  %v0_13618 = phi i32 [ %v0_135f4.pre, %dec_label_pc_135f0 ], [ %v0_13618.pre, %dec_label_pc_13604 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_13618 = add i32 %v0_13618, 80
  %v3_13618 = inttoptr i32 %v2_13618 to i32*
  %v4_13618 = load i32, i32* %v3_13618, align 4
  store i32 %v4_13618, i32* %r2.global-to-local, align 4
  store i32 %v4_13618, i32* %r3.global-to-local, align 4
  %v2_13620 = icmp eq i32 %v4_13618, 0
  store i1 %v2_13620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13620, label %dec_label_pc_13638, label %dec_label_pc_13628

dec_label_pc_13628:                               ; preds = %dec_label_pc_13614
  call void @__pseudo_branch(i32 %v4_13618)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13634 = load i32, i32* @r0, align 4
  %v2_13634 = inttoptr i32 %v1_13634 to i32*
  store i32 0, i32* %v2_13634, align 4
  %v0_1363c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13638

dec_label_pc_13638:                               ; preds = %dec_label_pc_13614, %dec_label_pc_13628
  %v0_1363c = phi i32 [ %v0_13618, %dec_label_pc_13614 ], [ %v0_1363c.pre, %dec_label_pc_13628 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_1363c = add i32 %v0_1363c, 28
  %v3_1363c = inttoptr i32 %v2_1363c to i32*
  %v4_1363c = load i32, i32* %v3_1363c, align 4
  store i32 %v4_1363c, i32* %r3.global-to-local, align 4
  %v1_13644 = inttoptr i32 %v4_1363c to i32*
  %v2_13644 = load i32, i32* %v1_13644, align 4
  store i32 %v2_13644, i32* %r2.global-to-local, align 4
  %v0_13648 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_13648, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_13654 = call i32 @function_129bc(i32 %v0_13648)
  store i32 %v1_13654, i32* %r0.global-to-local, align 4
  %v0_13658 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13658, label %bb65, label %.thread8

bb65:                                             ; preds = %dec_label_pc_13638
  %v4_13658 = inttoptr i32 %v1_13654 to i32*
  store i32 %v0_1340c, i32* %v4_13658, align 4
  %v5_13658 = load i32, i32* %ip.global-to-local, align 4
  %v6_13658 = load i32, i32* %r0.global-to-local, align 4
  %v7_13658 = sub i32 %v6_13658, %v5_13658
  %v2_1365c = load i32, i32* %r4.global-to-local, align 4
  %v8_1365c = shl i32 %v2_1365c, %v7_13658
  %v9_1365c = and i32 %v8_1365c, %v7_13658
  %v8_13660 = shl i32 %v5_13658, %v9_1365c
  %v5_13664 = udiv i32 %v5_13658, 32
  %v9_13660 = and i32 %v9_1365c, %v5_13664
  %v6_13664 = and i32 %v9_13660, %v8_13660
  %v8_13668 = ashr i32 %v5_13658, %v6_13664
  %v9_13668 = and i32 %v8_13668, %v6_13664
  %v2_1366c = load i32, i32* %r2.global-to-local, align 4
  %v3_1366c = and i32 %v9_13668, %v2_1366c
  store i32 %v3_1366c, i32* %r8.global-to-local, align 4
  %v5_1367044 = udiv i32 %v5_13658, 2
  %v6_13670 = and i32 %v9_13668, %v5_1367044
  %v5_13674 = sub nsw i32 32, %v6_13670
  %v6_13674 = shl i32 %v6_13670, %v5_13674
  %v9_13674 = and i32 %v6_13674, %v6_13670
  %v8_13678 = lshr i32 %v5_13658, %v9_13674
  %v9_13678 = and i32 %v8_13678, %v9_13674
  store i32 %v9_13678, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13638, %bb65
  %v10_13678 = phi i32 [ %v1_13654, %dec_label_pc_13638 ], [ %v9_13678, %bb65 ]
  ret i32 %v10_13678

; uselistorder directives
  uselistorder i32 %v5_13658, { 2, 0, 3, 1, 4, 5 }
  uselistorder i32 %v0_135f4.pre, { 1, 0 }
  uselistorder i32 %v1_135e8, { 1, 0 }
  uselistorder i32 %v1_135e4, { 3, 2, 1, 0 }
  uselistorder i32 %v4_1355c, { 1, 0, 2 }
  uselistorder i1 %v8_134a4, { 1, 2, 0 }
  uselistorder i32 %v2_13474, { 1, 2, 0 }
  uselistorder i1 %v2_1345c, { 1, 0 }
  uselistorder i32 %v5_13460, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13440, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_1340c, { 2, 1, 0 }
  uselistorder i32 %v2_133ec, { 1, 0, 2, 3 }
  uselistorder i32 %v3_133dc, { 1, 0 }
  uselistorder i32 %tmp53, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp52, { 1, 0 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 6, 5, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 0, 13, 14, 15, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 6, 7, 8, 9, 10, 11, 1, 12, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 1, 18 }
  uselistorder i32 (i32)* @function_129bc, { 0, 5, 6, 4, 3, 2, 1 }
  uselistorder i32 47, { 0, 2, 3, 1 }
  uselistorder i32 (i32, i32)* @function_13304, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_13638, { 1, 0 }
  uselistorder label %dec_label_pc_13614, { 1, 0 }
  uselistorder label %dec_label_pc_135d8.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13524, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13500, { 3, 0, 1, 2 }
  uselistorder label %bb63, { 1, 0 }
  uselistorder label %dec_label_pc_13474, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %dec_label_pc_1345c, { 1, 0 }
}

define i32 @function_13698(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13698:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13698 = load i32, i32* @r4, align 4
  store i32 %v3_13698, i32* %stack_var_-16, align 4
  %v3_136a4 = urem i32 %arg3, 4096
  %v2_136a8 = icmp eq i32 %v3_136a4, 0
  br i1 %v2_136a8, label %dec_label_pc_136c4, label %dec_label_pc_136b0

dec_label_pc_136b0:                               ; preds = %dec_label_pc_13698
  %v0_136b0 = call i32 @function_10de8()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_136bc = inttoptr i32 %v0_136b0 to i32*
  store i32 22, i32* %v2_136bc, align 4
  %v0_136f4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_136f4

dec_label_pc_136c4:                               ; preds = %dec_label_pc_13698
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_136f0, label %dec_label_pc_136e0

dec_label_pc_136e0:                               ; preds = %dec_label_pc_136c4
  %v0_136e0 = call i32 @function_10de8()
  %v0_136e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_136e4 = sub i32 0, %v0_136e4
  %v2_136e8 = inttoptr i32 %v0_136e0 to i32*
  store i32 %v1_136e4, i32* %v2_136e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136f0

dec_label_pc_136f0:                               ; preds = %dec_label_pc_136c4, %dec_label_pc_136e0
  %v0_136f0 = phi i32 [ %arg1, %dec_label_pc_136c4 ], [ -1, %dec_label_pc_136e0 ]
  store i32 %v0_136f0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_136f4

dec_label_pc_136f4:                               ; preds = %dec_label_pc_136b0, %dec_label_pc_136f0
  %v0_136f4 = phi i32 [ %v0_136f4.pre, %dec_label_pc_136b0 ], [ %v0_136f0, %dec_label_pc_136f0 ]
  %v2_136f8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_136f8, i32* @r4, align 4
  ret i32 %v0_136f4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136f4, { 1, 0 }
  uselistorder label %dec_label_pc_136f0, { 1, 0 }
}

define i32 @function_13700(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13700:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13700 = load i32, i32* @r4, align 4
  %v6_13700 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_13708 = icmp eq i32 %arg2, 0
  store i32 123612, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_13708, label %dec_label_pc_1375c, label %dec_label_pc_13720

dec_label_pc_13720:                               ; preds = %dec_label_pc_13700
  %v1_13720 = add i32 %arg2, 4
  %v2_13720 = inttoptr i32 %v1_13720 to i32*
  %v3_13720 = load i32, i32* %v2_13720, align 4
  store i32 %v3_13720, i32* @r3, align 4
  %v1_13724 = and i32 %v3_13720, 67108864
  %v2_13724 = icmp eq i32 %v1_13724, 0
  br i1 %v2_13724, label %dec_label_pc_1372c, label %dec_label_pc_1375c

dec_label_pc_1372c:                               ; preds = %dec_label_pc_13720
  store i32 20, i32* @r2, align 4
  %v2_13730 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13730, i32* @r0, align 4
  %v0_13734 = call i32 @function_10ef0()
  store i32 %v2_13730, i32* @ip, align 4
  %v0_1375c.pre = load i32, i32* @r5, align 4
  %v0_13764.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1375c

dec_label_pc_1375c:                               ; preds = %dec_label_pc_13720, %dec_label_pc_13700, %dec_label_pc_1372c
  %v0_13764 = phi i32 [ %arg3, %dec_label_pc_13720 ], [ %arg3, %dec_label_pc_13700 ], [ %v0_13764.pre, %dec_label_pc_1372c ]
  %v0_13760 = phi i32 [ %arg2, %dec_label_pc_13720 ], [ 0, %dec_label_pc_13700 ], [ %v2_13730, %dec_label_pc_1372c ]
  %v0_1375c = phi i32 [ %arg1, %dec_label_pc_13720 ], [ %arg1, %dec_label_pc_13700 ], [ %v0_1375c.pre, %dec_label_pc_1372c ]
  %v4_1376c = call i32 @function_13cbc(i32 %v0_1375c, i32 %v0_13760, i32 %v0_13764, i32 8)
  store i32 %v3_13700, i32* @r4, align 4
  store i32 %v6_13700, i32* @r5, align 4
  ret i32 %v4_1376c

; uselistorder directives
  uselistorder label %dec_label_pc_1375c, { 2, 0, 1 }
}

define i32 @function_13780(i32 %arg1) local_unnamed_addr {
dec_label_pc_13780:
  %v0_13780 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13780, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13780
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13780, %bb
  %v0_13794 = phi i32 [ %arg1, %dec_label_pc_13780 ], [ 0, %bb ]
  ret i32 %v0_13794

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_137a0() local_unnamed_addr {
dec_label_pc_137a0:
  %v4_137ac = load i32, i32* inttoptr (i32 123704 to i32*), align 8
  %v1_137b0 = inttoptr i32 %v4_137ac to i32*
  %v2_137b0 = load i32, i32* %v1_137b0, align 4
  %v2_137b4 = icmp eq i32 %v2_137b0, 0
  br i1 %v2_137b4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_137a0
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_137a0, %bb
  %v1_137bc = phi i32 [ %v2_137b0, %dec_label_pc_137a0 ], [ 4096, %bb ]
  ret i32 %v1_137bc

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_137c8() local_unnamed_addr {
dec_label_pc_137c8:
  %v1_137d8 = load i32, i32* @r0, align 4
  ret i32 %v1_137d8
}

define i32 @function_137dc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_137dc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137dc = load i32, i32* @r7, align 4
  store i32 %v3_137dc, i32* %stack_var_-8, align 4
  %v0_137e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_137e8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_137e8, -4095
  br i1 %tmp, label %dec_label_pc_13808, label %dec_label_pc_137f8

dec_label_pc_137f8:                               ; preds = %dec_label_pc_137dc
  %v0_137f8 = call i32 @function_10de8()
  %v0_137fc = load i32, i32* %r7.global-to-local, align 4
  %v1_137fc = sub i32 0, %v0_137fc
  %v2_13800 = inttoptr i32 %v0_137f8 to i32*
  store i32 %v1_137fc, i32* %v2_13800, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13808.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13808

dec_label_pc_13808:                               ; preds = %dec_label_pc_137dc, %dec_label_pc_137f8
  %v1_1380c = phi i32 [ %v0_137e8, %dec_label_pc_137dc ], [ -1, %dec_label_pc_137f8 ]
  %v2_13808 = phi i32 [ %v3_137dc, %dec_label_pc_137dc ], [ %v2_13808.pre, %dec_label_pc_137f8 ]
  store i32 %v2_13808, i32* %r7.global-to-local, align 4
  ret i32 %v1_1380c

; uselistorder directives
  uselistorder i32 %v0_137e8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13808, { 1, 0 }
}

define i32 @function_13810() local_unnamed_addr {
dec_label_pc_13810:
  %v1_13820 = load i32, i32* @r0, align 4
  ret i32 %v1_13820
}

define i32 @function_13824() local_unnamed_addr {
dec_label_pc_13824:
  %v1_13834 = load i32, i32* @r0, align 4
  ret i32 %v1_13834
}

define i32 @function_13838(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13838:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_13838 = load i32, i32* @r5, align 4
  %v18_13838 = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13868, label %dec_label_pc_13854

dec_label_pc_13854:                               ; preds = %dec_label_pc_13838
  %v0_13854 = call i32 @function_10de8()
  %v0_13858 = load i32, i32* @r5, align 4
  %v1_13858 = sub i32 0, %v0_13858
  store i32 %v1_13858, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_13860 = inttoptr i32 %v0_13854 to i32*
  store i32 %v1_13858, i32* %v2_13860, align 4
  br label %dec_label_pc_138bc

dec_label_pc_13868:                               ; preds = %dec_label_pc_13838
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13868
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_13870 = add i32 %arg2, %arg1
  store i32 %v3_13870, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13868, %bb
  %v1_138ac4 = phi i32 [ %v18_13838, %dec_label_pc_13868 ], [ %v3_13870, %bb ]
  %v0_138a82 = phi i32 [ 141, %dec_label_pc_13868 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_138bc, label %dec_label_pc_138a8

dec_label_pc_1387c:                               ; preds = %dec_label_pc_138a8
  %v1_1387c = add i32 %v0_1387c, 8
  %v2_1387c = inttoptr i32 %v1_1387c to i16*
  %v3_1387c = load i16, i16* %v2_1387c, align 2
  %v4_1387c = zext i16 %v3_1387c to i32
  %v2_13880 = add i32 %v4_1387c, %v0_1387c
  store i32 %v2_13880, i32* %r3.global-to-local, align 4
  %v1_13884 = add i32 %v2_13880, -1
  %v2_13884 = inttoptr i32 %v1_13884 to i8*
  %v3_13884 = load i8, i8* %v2_13884, align 1
  %v4_13884 = zext i8 %v3_13884 to i32
  store i32 %v4_13884, i32* @r4, align 4
  %v1_13888 = call i32 @function_153b0(i32 %v1_138a8)
  %v0_1388c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1388c, i32* @r1, align 4
  %v1_13890 = add i32 %v1_13888, 1
  store i32 %v1_13890, i32* @r2, align 4
  %v0_13894 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13894, i32* @r0, align 4
  %v3_13898 = call i32 @function_10ee0(i32 %v0_13894, i32 %v0_1388c, i32 %v1_13890)
  %v0_1389c = load i32, i32* %r7.global-to-local, align 4
  %v1_1389c = add i32 %v0_1389c, 8
  %v2_1389c = inttoptr i32 %v1_1389c to i16*
  %v3_1389c = load i16, i16* %v2_1389c, align 2
  %v4_1389c = zext i16 %v3_1389c to i32
  store i32 %v4_1389c, i32* %r3.global-to-local, align 4
  %v0_138a0 = load i32, i32* @r4, align 4
  %v1_138a0 = trunc i32 %v0_138a0 to i8
  %v3_138a0 = add i32 %v0_1389c, 10
  %v4_138a0 = inttoptr i32 %v3_138a0 to i8*
  store i8 %v1_138a0, i8* %v4_138a0, align 1
  %v0_138a4 = load i32, i32* %r7.global-to-local, align 4
  %v1_138a4 = load i32, i32* %r3.global-to-local, align 4
  %v2_138a4 = add i32 %v1_138a4, %v0_138a4
  store i32 %v2_138a4, i32* %r7.global-to-local, align 4
  %v1_138ac.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_138a8

dec_label_pc_138a8:                               ; preds = %.thread, %dec_label_pc_1387c
  %v1_138ac = phi i32 [ %v1_138ac.pre, %dec_label_pc_1387c ], [ %v1_138ac4, %.thread ]
  %v0_1387c = phi i32 [ %v2_138a4, %dec_label_pc_1387c ], [ %v0_138a82, %.thread ]
  %v1_138a8 = add i32 %v0_1387c, 10
  store i32 %v1_138a8, i32* %r6.global-to-local, align 4
  %v3_138ac = icmp ult i32 %v0_1387c, %v1_138ac
  %v1_138b4 = add i32 %v0_1387c, 11
  store i32 %v1_138b4, i32* %r8.global-to-local, align 4
  br i1 %v3_138ac, label %dec_label_pc_1387c, label %dec_label_pc_138bc

dec_label_pc_138bc:                               ; preds = %dec_label_pc_138a8, %.thread, %dec_label_pc_13854
  %v0_138bc = load i32, i32* @r5, align 4
  store i32 %v6_13838, i32* @r5, align 4
  store i32 %v18_13838, i32* @sl, align 4
  ret i32 %v0_138bc

; uselistorder directives
  uselistorder i32 %v1_138a8, { 1, 0 }
  uselistorder i32 %v0_1387c, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_13838, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138a8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_138cc() local_unnamed_addr {
dec_label_pc_138cc:
  %r7.global-to-local = alloca i32, align 4
  %v0_138d4 = load i32, i32* @r1, align 4
  store i32 %v0_138d4, i32* @r3, align 4
  %v0_138e4 = load i32, i32* @r0, align 4
  store i32 %v0_138e4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_138e4, -4095
  br i1 %tmp, label %dec_label_pc_13904, label %dec_label_pc_138f0

dec_label_pc_138f0:                               ; preds = %dec_label_pc_138cc
  %v0_138f0 = call i32 @function_10de8()
  %v0_138f4 = load i32, i32* %r7.global-to-local, align 4
  %v1_138f4 = sub i32 0, %v0_138f4
  store i32 %v1_138f4, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_138fc = inttoptr i32 %v0_138f0 to i32*
  store i32 %v1_138f4, i32* %v2_138fc, align 4
  br label %dec_label_pc_13914

dec_label_pc_13904:                               ; preds = %dec_label_pc_138cc
  %v2_13904 = icmp eq i32 %v0_138e4, 0
  br i1 %v2_13904, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13904
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13904, %bb
  call void @__pseudo_cond_branch(i1 %v2_13904, i32 ptrtoint (i32* @global_var_13b1c.476 to i32))
  br label %dec_label_pc_13914

dec_label_pc_13914:                               ; preds = %dec_label_pc_138f0, %.thread
  %v0_13914 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_13914

; uselistorder directives
  uselistorder i32 %v0_138e4, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13914, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13924(i32 %arg1) local_unnamed_addr {
dec_label_pc_13924:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13924 = load i32, i32* @r4, align 4
  store i32 %v3_13924, i32* %stack_var_-16, align 4
  store i32 123612, i32* %r4.global-to-local, align 4
  %v4_13934 = load i32, i32* @global_var_2059c.479, align 4
  %v2_13938 = icmp eq i32 %v4_13934, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13938, label %dec_label_pc_13944, label %dec_label_pc_13954

dec_label_pc_13944:                               ; preds = %dec_label_pc_13924
  %v1_13948 = call i32 @function_158bc(i32 0)
  %v1_1394c = icmp slt i32 %v1_13948, 0
  br i1 %v1_1394c, label %dec_label_pc_13978, label %dec_label_pc_13954thread-pre-split

dec_label_pc_13954thread-pre-split:               ; preds = %dec_label_pc_13944
  %v0_13958.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_13954.pre = load i32, i32* @global_var_2059c.479, align 4
  br label %dec_label_pc_13954

dec_label_pc_13954:                               ; preds = %dec_label_pc_13954thread-pre-split, %dec_label_pc_13924
  %v0_13964 = phi i32 [ %v4_13954.pre, %dec_label_pc_13954thread-pre-split ], [ %v4_13934, %dec_label_pc_13924 ]
  %v1_13968 = phi i32 [ %v0_13958.pr, %dec_label_pc_13954thread-pre-split ], [ %arg1, %dec_label_pc_13924 ]
  %v2_13958 = icmp eq i32 %v1_13968, 0
  store i32 %v0_13964, i32* %r4.global-to-local, align 4
  br i1 %v2_13958, label %dec_label_pc_1397c, label %dec_label_pc_13964

dec_label_pc_13964:                               ; preds = %dec_label_pc_13954
  %v2_13968 = add i32 %v1_13968, %v0_13964
  %v1_1396c = call i32 @function_158bc(i32 %v2_13968)
  %v1_13970 = icmp slt i32 %v1_1396c, 0
  br i1 %v1_13970, label %dec_label_pc_13978, label %dec_label_pc_13964.dec_label_pc_1397c_crit_edge

dec_label_pc_13964.dec_label_pc_1397c_crit_edge:  ; preds = %dec_label_pc_13964
  %v0_1397c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1397c

dec_label_pc_13978:                               ; preds = %dec_label_pc_13964, %dec_label_pc_13944
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1397c

dec_label_pc_1397c:                               ; preds = %dec_label_pc_13954, %dec_label_pc_13964.dec_label_pc_1397c_crit_edge, %dec_label_pc_13978
  %v0_1397c = phi i32 [ %v0_1397c.pre, %dec_label_pc_13964.dec_label_pc_1397c_crit_edge ], [ -1, %dec_label_pc_13978 ], [ %v0_13964, %dec_label_pc_13954 ]
  %v2_13980 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13980, i32* @r4, align 4
  ret i32 %v0_1397c

; uselistorder directives
  uselistorder i32 %v0_13964, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_158bc, { 1, 0 }
  uselistorder label %dec_label_pc_1397c, { 2, 1, 0 }
}

define i32 @function_13990(i32 %arg1) local_unnamed_addr {
dec_label_pc_13990:
  %v1_139a0 = load i32, i32* @r0, align 4
  ret i32 %v1_139a0
}

define i32 @function_139a4(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_139a4:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_139a4 = load i32, i32* @r4, align 4
  store i32 %v3_139a4, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_139bc = inttoptr i32 %arg2 to i8*
  %v3_139bc = call i32 @function_10e40(i8* %v2_139bc, i32 0)
  %v2_139c0 = load i32, i32* %arg1, align 4
  store i32 %v2_139c0, i32* %r3.global-to-local, align 4
  %v3_139c0 = add i32 %tmp, 4
  %v4_139c0 = inttoptr i32 %v3_139c0 to i32*
  %v5_139c0 = load i32, i32* %v4_139c0, align 4
  store i32 %v5_139c0, i32* %r4.global-to-local, align 4
  %v0_139c4 = load i32, i32* %r5.global-to-local, align 4
  %v1_139c4 = inttoptr i32 %v0_139c4 to i32*
  store i32 %v2_139c0, i32* %v1_139c4, align 4
  %v3_139c4 = add i32 %v0_139c4, 4
  %v4_139c4 = inttoptr i32 %v3_139c4 to i32*
  %v5_139c4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_139c4, i32* %v4_139c4, align 4
  %v0_139c8 = load i32, i32* %r6.global-to-local, align 4
  %v1_139c8 = add i32 %v0_139c8, 12
  %v2_139c8 = inttoptr i32 %v1_139c8 to i32*
  %v3_139c8 = load i32, i32* %v2_139c8, align 4
  %v1_139cc = load i32, i32* %r5.global-to-local, align 4
  %v2_139cc = add i32 %v1_139cc, 12
  %v3_139cc = inttoptr i32 %v2_139cc to i32*
  store i32 %v3_139c8, i32* %v3_139cc, align 4
  %v0_139d0 = load i32, i32* %r6.global-to-local, align 4
  %v1_139d0 = add i32 %v0_139d0, 96
  store i32 %v1_139d0, i32* %r3.global-to-local, align 4
  %v1_139d4 = inttoptr i32 %v1_139d0 to i32*
  %v2_139d4 = load i32, i32* %v1_139d4, align 4
  store i32 %v2_139d4, i32* %r3.global-to-local, align 4
  %v3_139d4 = add i32 %v0_139d0, 100
  %v4_139d4 = inttoptr i32 %v3_139d4 to i32*
  %v5_139d4 = load i32, i32* %v4_139d4, align 4
  store i32 %v5_139d4, i32* %r4.global-to-local, align 4
  %v1_139d8 = add i32 %v0_139d0, 56
  %v2_139d8 = inttoptr i32 %v1_139d8 to i32*
  %v3_139d8 = load i32, i32* %v2_139d8, align 4
  store i32 %v3_139d8, i32* %r2.global-to-local, align 4
  %v1_139dc = load i32, i32* %r5.global-to-local, align 4
  %v2_139dc = add i32 %v1_139dc, 96
  %v3_139dc = inttoptr i32 %v2_139dc to i32*
  store i32 %v2_139d4, i32* %v3_139dc, align 4
  %v0_139e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_139e0 = load i32, i32* %r5.global-to-local, align 4
  %v2_139e0 = add i32 %v1_139e0, 100
  %v3_139e0 = inttoptr i32 %v2_139e0 to i32*
  store i32 %v0_139e0, i32* %v3_139e0, align 4
  %v0_139e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_139e4 = add i32 %v0_139e4, 24
  store i32 %v1_139e4, i32* %ip.global-to-local, align 4
  %v1_139e8 = inttoptr i32 %v1_139e4 to i32*
  %v2_139e8 = load i32, i32* %v1_139e8, align 4
  store i32 %v2_139e8, i32* %ip.global-to-local, align 4
  %v3_139e8 = add i32 %v0_139e4, 28
  %v4_139e8 = inttoptr i32 %v3_139e8 to i32*
  %v5_139e8 = load i32, i32* %v4_139e8, align 4
  store i32 %v5_139e8, i32* %lr.global-to-local, align 4
  %v0_139ec = load i32, i32* %r2.global-to-local, align 4
  %v1_139ec = load i32, i32* %r5.global-to-local, align 4
  %v2_139ec = add i32 %v1_139ec, 56
  %v3_139ec = inttoptr i32 %v2_139ec to i32*
  store i32 %v0_139ec, i32* %v3_139ec, align 4
  %v0_139f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_139f0 = add i32 %v0_139f0, 72
  store i32 %v1_139f0, i32* %r3.global-to-local, align 4
  %v1_139f4 = add i32 %v0_139f0, 32
  store i32 %v1_139f4, i32* %r7.global-to-local, align 4
  %v1_139f8 = inttoptr i32 %v1_139f4 to i32*
  %v2_139f8 = load i32, i32* %v1_139f8, align 4
  store i32 %v2_139f8, i32* %r7.global-to-local, align 4
  %v3_139f8 = add i32 %v0_139f0, 36
  %v4_139f8 = inttoptr i32 %v3_139f8 to i32*
  %v5_139f8 = load i32, i32* %v4_139f8, align 4
  store i32 %v5_139f8, i32* %r8.global-to-local, align 4
  %v1_139fc = inttoptr i32 %v1_139f0 to i32*
  %v2_139fc = load i32, i32* %v1_139fc, align 4
  %v3_139fc = add i32 %v0_139f0, 76
  %v4_139fc = inttoptr i32 %v3_139fc to i32*
  %v5_139fc = load i32, i32* %v4_139fc, align 4
  store i32 %v5_139fc, i32* %r1.global-to-local, align 4
  %v0_13a00 = load i32, i32* %r5.global-to-local, align 4
  %v1_13a00 = add i32 %v0_13a00, 72
  %v1_13a04 = inttoptr i32 %v1_13a00 to i32*
  store i32 %v2_139fc, i32* %v1_13a04, align 4
  %v3_13a04 = add i32 %v0_13a00, 76
  %v4_13a04 = inttoptr i32 %v3_13a04 to i32*
  %v5_13a04 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13a04, i32* %v4_13a04, align 4
  %v0_13a08 = load i32, i32* %r7.global-to-local, align 4
  %v1_13a08 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a08 = add i32 %v1_13a08, 32
  %v3_13a08 = inttoptr i32 %v2_13a08 to i32*
  store i32 %v0_13a08, i32* %v3_13a08, align 4
  %v0_13a0c = load i32, i32* %r8.global-to-local, align 4
  %v1_13a0c = load i32, i32* %r5.global-to-local, align 4
  %v2_13a0c = add i32 %v1_13a0c, 36
  %v3_13a0c = inttoptr i32 %v2_13a0c to i32*
  store i32 %v0_13a0c, i32* %v3_13a0c, align 4
  %v0_13a10 = load i32, i32* %r6.global-to-local, align 4
  %v1_13a10 = add i32 %v0_13a10, 80
  store i32 %v1_13a10, i32* %r3.global-to-local, align 4
  %v1_13a14 = add i32 %v0_13a10, 48
  store i32 %v1_13a14, i32* %r7.global-to-local, align 4
  %v1_13a18 = inttoptr i32 %v1_13a14 to i32*
  %v2_13a18 = load i32, i32* %v1_13a18, align 4
  store i32 %v2_13a18, i32* %r7.global-to-local, align 4
  %v3_13a18 = add i32 %v0_13a10, 52
  %v4_13a18 = inttoptr i32 %v3_13a18 to i32*
  %v5_13a18 = load i32, i32* %v4_13a18, align 4
  store i32 %v5_13a18, i32* %r8.global-to-local, align 4
  %v1_13a1c = inttoptr i32 %v1_13a10 to i32*
  %v2_13a1c = load i32, i32* %v1_13a1c, align 4
  %v3_13a1c = add i32 %v0_13a10, 84
  %v4_13a1c = inttoptr i32 %v3_13a1c to i32*
  %v5_13a1c = load i32, i32* %v4_13a1c, align 4
  store i32 %v5_13a1c, i32* %r1.global-to-local, align 4
  %v1_13a20 = add i32 %v0_13a10, 16
  %v2_13a20 = inttoptr i32 %v1_13a20 to i32*
  %v3_13a20 = load i32, i32* %v2_13a20, align 4
  store i32 %v3_13a20, i32* %r2.global-to-local, align 4
  %v0_13a24 = load i32, i32* %r5.global-to-local, align 4
  %v1_13a24 = add i32 %v0_13a24, 80
  %v1_13a28 = inttoptr i32 %v1_13a24 to i32*
  store i32 %v2_13a1c, i32* %v1_13a28, align 4
  %v3_13a28 = add i32 %v0_13a24, 84
  %v4_13a28 = inttoptr i32 %v3_13a28 to i32*
  %v5_13a28 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13a28, i32* %v4_13a28, align 4
  %v0_13a2c = load i32, i32* %r7.global-to-local, align 4
  %v1_13a2c = load i32, i32* %r5.global-to-local, align 4
  %v2_13a2c = add i32 %v1_13a2c, 48
  %v3_13a2c = inttoptr i32 %v2_13a2c to i32*
  store i32 %v0_13a2c, i32* %v3_13a2c, align 4
  %v0_13a30 = load i32, i32* %r8.global-to-local, align 4
  %v1_13a30 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a30 = add i32 %v1_13a30, 52
  %v3_13a30 = inttoptr i32 %v2_13a30 to i32*
  store i32 %v0_13a30, i32* %v3_13a30, align 4
  %v0_13a34 = load i32, i32* %r2.global-to-local, align 4
  %v1_13a34 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a34 = add i32 %v1_13a34, 16
  %v3_13a34 = inttoptr i32 %v2_13a34 to i32*
  store i32 %v0_13a34, i32* %v3_13a34, align 4
  %v0_13a38 = load i32, i32* %r6.global-to-local, align 4
  %v1_13a38 = add i32 %v0_13a38, 88
  store i32 %v1_13a38, i32* %r3.global-to-local, align 4
  %v1_13a3c = add i32 %v0_13a38, 20
  %v2_13a3c = inttoptr i32 %v1_13a3c to i32*
  %v3_13a3c = load i32, i32* %v2_13a3c, align 4
  store i32 %v3_13a3c, i32* %r2.global-to-local, align 4
  %v1_13a40 = inttoptr i32 %v1_13a38 to i32*
  %v2_13a40 = load i32, i32* %v1_13a40, align 4
  %v3_13a40 = add i32 %v0_13a38, 92
  %v4_13a40 = inttoptr i32 %v3_13a40 to i32*
  %v5_13a40 = load i32, i32* %v4_13a40, align 4
  store i32 %v5_13a40, i32* %r1.global-to-local, align 4
  %v1_13a44 = add i32 %v0_13a38, 64
  store i32 %v1_13a44, i32* %r6.global-to-local, align 4
  %v1_13a48 = inttoptr i32 %v1_13a44 to i32*
  %v2_13a48 = load i32, i32* %v1_13a48, align 4
  store i32 %v2_13a48, i32* %r6.global-to-local, align 4
  %v3_13a48 = add i32 %v0_13a38, 68
  %v4_13a48 = inttoptr i32 %v3_13a48 to i32*
  %v5_13a48 = load i32, i32* %v4_13a48, align 4
  store i32 %v5_13a48, i32* %r7.global-to-local, align 4
  %v0_13a4c = load i32, i32* %r5.global-to-local, align 4
  %v1_13a4c = add i32 %v0_13a4c, 88
  store i32 %v1_13a4c, i32* %r3.global-to-local, align 4
  %v2_13a50 = add i32 %v0_13a4c, 20
  %v3_13a50 = inttoptr i32 %v2_13a50 to i32*
  store i32 %v3_13a3c, i32* %v3_13a50, align 4
  %v0_13a54 = load i32, i32* %ip.global-to-local, align 4
  %v1_13a54 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a54 = add i32 %v1_13a54, 24
  %v3_13a54 = inttoptr i32 %v2_13a54 to i32*
  store i32 %v0_13a54, i32* %v3_13a54, align 4
  %v0_13a58 = load i32, i32* %lr.global-to-local, align 4
  %v1_13a58 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a58 = add i32 %v1_13a58, 28
  %v3_13a58 = inttoptr i32 %v2_13a58 to i32*
  store i32 %v0_13a58, i32* %v3_13a58, align 4
  %v0_13a5c = load i32, i32* %r6.global-to-local, align 4
  %v1_13a5c = load i32, i32* %r5.global-to-local, align 4
  %v2_13a5c = add i32 %v1_13a5c, 64
  %v3_13a5c = inttoptr i32 %v2_13a5c to i32*
  store i32 %v0_13a5c, i32* %v3_13a5c, align 4
  %v0_13a60 = load i32, i32* %r7.global-to-local, align 4
  %v1_13a60 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a60 = add i32 %v1_13a60, 68
  %v3_13a60 = inttoptr i32 %v2_13a60 to i32*
  store i32 %v0_13a60, i32* %v3_13a60, align 4
  %v0_13a64 = load i32, i32* %r3.global-to-local, align 4
  %v1_13a64 = inttoptr i32 %v0_13a64 to i32*
  store i32 %v2_13a40, i32* %v1_13a64, align 4
  %v3_13a64 = add i32 %v0_13a64, 4
  %v4_13a64 = inttoptr i32 %v3_13a64 to i32*
  %v5_13a64 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13a64, i32* %v4_13a64, align 4
  %v2_13a68 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13a68, i32* %r4.global-to-local, align 4
  ret i32 %v2_13a40

; uselistorder directives
  uselistorder i32 %v0_13a38, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_13a10, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13a70(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13a70:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_13a70 = load i32, i32* @r4, align 4
  store i32 %v3_13a70, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13a88 = inttoptr i32 %arg2 to i8*
  %v3_13a88 = call i32 @function_10e40(i8* %v2_13a88, i32 0)
  %v2_13a8c = load i32, i32* %arg1, align 4
  %v3_13a8c = add i32 %tmp, 4
  %v4_13a8c = inttoptr i32 %v3_13a8c to i32*
  %v5_13a8c = load i32, i32* %v4_13a8c, align 4
  store i32 %v5_13a8c, i32* %r4.global-to-local, align 4
  %v0_13a90 = load i32, i32* %r6.global-to-local, align 4
  %v1_13a90 = inttoptr i32 %v0_13a90 to i32*
  store i32 %v2_13a8c, i32* %v1_13a90, align 4
  %v3_13a90 = add i32 %v0_13a90, 4
  %v4_13a90 = inttoptr i32 %v3_13a90 to i32*
  %v5_13a90 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13a90, i32* %v4_13a90, align 4
  %v0_13a94 = load i32, i32* %r5.global-to-local, align 4
  %v1_13a94 = add i32 %v0_13a94, 32
  %v1_13a98 = inttoptr i32 %v1_13a94 to i32*
  %v2_13a98 = load i32, i32* %v1_13a98, align 4
  %v3_13a98 = add i32 %v0_13a94, 36
  %v4_13a98 = inttoptr i32 %v3_13a98 to i32*
  %v5_13a98 = load i32, i32* %v4_13a98, align 4
  store i32 %v5_13a98, i32* %r4.global-to-local, align 4
  %v1_13a9c = add i32 %v0_13a94, 96
  %v2_13a9c = inttoptr i32 %v1_13a9c to i32*
  %v3_13a9c = load i32, i32* %v2_13a9c, align 4
  store i32 %v3_13a9c, i32* %r2.global-to-local, align 4
  %v1_13aa0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13aa0 = add i32 %v1_13aa0, 32
  %v3_13aa0 = inttoptr i32 %v2_13aa0 to i32*
  store i32 %v2_13a98, i32* %v3_13aa0, align 4
  %v0_13aa4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13aa4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13aa4 = add i32 %v1_13aa4, 36
  %v3_13aa4 = inttoptr i32 %v2_13aa4 to i32*
  store i32 %v0_13aa4, i32* %v3_13aa4, align 4
  %v0_13aa8 = load i32, i32* %r2.global-to-local, align 4
  %v1_13aa8 = load i32, i32* %r6.global-to-local, align 4
  %v2_13aa8 = add i32 %v1_13aa8, 12
  %v3_13aa8 = inttoptr i32 %v2_13aa8 to i32*
  store i32 %v0_13aa8, i32* %v3_13aa8, align 4
  %v0_13aac = load i32, i32* %r5.global-to-local, align 4
  %v1_13aac = add i32 %v0_13aac, 48
  %v2_13aac = inttoptr i32 %v1_13aac to i32*
  %v3_13aac = load i32, i32* %v2_13aac, align 4
  %v1_13ab0 = add i32 %v0_13aac, 24
  store i32 %v1_13ab0, i32* %ip.global-to-local, align 4
  %v1_13ab4 = inttoptr i32 %v1_13ab0 to i32*
  %v2_13ab4 = load i32, i32* %v1_13ab4, align 4
  store i32 %v2_13ab4, i32* %ip.global-to-local, align 4
  %v3_13ab4 = add i32 %v0_13aac, 28
  %v4_13ab4 = inttoptr i32 %v3_13ab4 to i32*
  %v5_13ab4 = load i32, i32* %v4_13ab4, align 4
  store i32 %v5_13ab4, i32* %lr.global-to-local, align 4
  %v1_13ab8 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ab8 = add i32 %v1_13ab8, 44
  %v3_13ab8 = inttoptr i32 %v2_13ab8 to i32*
  store i32 %v3_13aac, i32* %v3_13ab8, align 4
  %v0_13abc = load i32, i32* %r5.global-to-local, align 4
  %v1_13abc = add i32 %v0_13abc, 64
  %v2_13abc = inttoptr i32 %v1_13abc to i32*
  %v3_13abc = load i32, i32* %v2_13abc, align 4
  %v1_13ac0 = add i32 %v0_13abc, 56
  %v2_13ac0 = inttoptr i32 %v1_13ac0 to i32*
  %v3_13ac0 = load i32, i32* %v2_13ac0, align 4
  store i32 %v3_13ac0, i32* %r2.global-to-local, align 4
  %v1_13ac4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ac4 = add i32 %v1_13ac4, 52
  %v3_13ac4 = inttoptr i32 %v2_13ac4 to i32*
  store i32 %v3_13abc, i32* %v3_13ac4, align 4
  %v0_13ac8 = load i32, i32* %r2.global-to-local, align 4
  %v1_13ac8 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ac8 = add i32 %v1_13ac8, 48
  %v3_13ac8 = inttoptr i32 %v2_13ac8 to i32*
  store i32 %v0_13ac8, i32* %v3_13ac8, align 4
  %v0_13acc = load i32, i32* %r5.global-to-local, align 4
  %v1_13acc = add i32 %v0_13acc, 72
  %v1_13ad0 = inttoptr i32 %v1_13acc to i32*
  %v2_13ad0 = load i32, i32* %v1_13ad0, align 4
  %v3_13ad0 = add i32 %v0_13acc, 76
  %v4_13ad0 = inttoptr i32 %v3_13ad0 to i32*
  %v5_13ad0 = load i32, i32* %v4_13ad0, align 4
  store i32 %v5_13ad0, i32* %r1.global-to-local, align 4
  %v0_13ad4 = load i32, i32* %r6.global-to-local, align 4
  %v1_13ad4 = add i32 %v0_13ad4, 56
  %v1_13ad8 = inttoptr i32 %v1_13ad4 to i32*
  store i32 %v2_13ad0, i32* %v1_13ad8, align 4
  %v3_13ad8 = add i32 %v0_13ad4, 60
  %v4_13ad8 = inttoptr i32 %v3_13ad8 to i32*
  %v5_13ad8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13ad8, i32* %v4_13ad8, align 4
  %v0_13adc = load i32, i32* %r5.global-to-local, align 4
  %v1_13adc = add i32 %v0_13adc, 80
  %v1_13ae0 = inttoptr i32 %v1_13adc to i32*
  %v2_13ae0 = load i32, i32* %v1_13ae0, align 4
  %v3_13ae0 = add i32 %v0_13adc, 84
  %v4_13ae0 = inttoptr i32 %v3_13ae0 to i32*
  %v5_13ae0 = load i32, i32* %v4_13ae0, align 4
  store i32 %v5_13ae0, i32* %r1.global-to-local, align 4
  %v0_13ae4 = load i32, i32* %r6.global-to-local, align 4
  %v1_13ae4 = add i32 %v0_13ae4, 64
  %v1_13ae8 = inttoptr i32 %v1_13ae4 to i32*
  store i32 %v2_13ae0, i32* %v1_13ae8, align 4
  %v3_13ae8 = add i32 %v0_13ae4, 68
  %v4_13ae8 = inttoptr i32 %v3_13ae8 to i32*
  %v5_13ae8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13ae8, i32* %v4_13ae8, align 4
  %v0_13aec = load i32, i32* %r5.global-to-local, align 4
  %v1_13aec = add i32 %v0_13aec, 16
  %v2_13aec = inttoptr i32 %v1_13aec to i32*
  %v3_13aec = load i32, i32* %v2_13aec, align 4
  %v1_13af0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13af0 = add i32 %v1_13af0, 16
  %v3_13af0 = inttoptr i32 %v2_13af0 to i32*
  store i32 %v3_13aec, i32* %v3_13af0, align 4
  %v0_13af4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13af4 = add i32 %v0_13af4, 88
  %v1_13af8 = add i32 %v0_13af4, 20
  %v2_13af8 = inttoptr i32 %v1_13af8 to i32*
  %v3_13af8 = load i32, i32* %v2_13af8, align 4
  store i32 %v3_13af8, i32* %r2.global-to-local, align 4
  %v1_13afc = inttoptr i32 %v1_13af4 to i32*
  %v2_13afc = load i32, i32* %v1_13afc, align 4
  %v3_13afc = add i32 %v0_13af4, 92
  %v4_13afc = inttoptr i32 %v3_13afc to i32*
  %v5_13afc = load i32, i32* %v4_13afc, align 4
  store i32 %v5_13afc, i32* %r1.global-to-local, align 4
  %v0_13b00 = load i32, i32* %r6.global-to-local, align 4
  %v1_13b00 = add i32 %v0_13b00, 72
  %v1_13b04 = inttoptr i32 %v1_13b00 to i32*
  store i32 %v2_13afc, i32* %v1_13b04, align 4
  %v3_13b04 = add i32 %v0_13b00, 76
  %v4_13b04 = inttoptr i32 %v3_13b04 to i32*
  %v5_13b04 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13b04, i32* %v4_13b04, align 4
  %v0_13b08 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b08 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b08 = add i32 %v1_13b08, 20
  %v3_13b08 = inttoptr i32 %v2_13b08 to i32*
  store i32 %v0_13b08, i32* %v3_13b08, align 4
  %v0_13b0c = load i32, i32* %ip.global-to-local, align 4
  %v1_13b0c = load i32, i32* %r6.global-to-local, align 4
  %v2_13b0c = add i32 %v1_13b0c, 24
  %v3_13b0c = inttoptr i32 %v2_13b0c to i32*
  store i32 %v0_13b0c, i32* %v3_13b0c, align 4
  %v0_13b10 = load i32, i32* %lr.global-to-local, align 4
  %v1_13b10 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b10 = add i32 %v1_13b10, 28
  %v3_13b10 = inttoptr i32 %v2_13b10 to i32*
  store i32 %v0_13b10, i32* %v3_13b10, align 4
  %v2_13b14 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13b14, i32* %r4.global-to-local, align 4
  ret i32 %v2_13afc

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13b1c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13b1c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13b38 = inttoptr i32 %arg2 to i8*
  %v3_13b38 = call i32 @function_10e40(i8* %v2_13b38, i32 0)
  %v1_13b3c = add i32 %tmp, 4
  %v2_13b3c = inttoptr i32 %v1_13b3c to i32*
  %v3_13b3c = load i32, i32* %v2_13b3c, align 4
  %v2_13b40 = load i32, i32* %arg1, align 4
  store i32 %v2_13b40, i32* %r8.global-to-local, align 4
  %v1_13b44 = load i32, i32* %r5.global-to-local, align 4
  %v2_13b44 = add i32 %v1_13b44, 12
  %v3_13b44 = inttoptr i32 %v2_13b44 to i32*
  store i32 %v3_13b3c, i32* %v3_13b44, align 4
  %v0_13b48 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b48 = add i32 %v0_13b48, 20
  %v2_13b48 = inttoptr i32 %v1_13b48 to i32*
  %v3_13b48 = load i32, i32* %v2_13b48, align 4
  %v1_13b4c = add i32 %v0_13b48, 16
  %v2_13b4c = inttoptr i32 %v1_13b4c to i32*
  %v3_13b4c = load i32, i32* %v2_13b4c, align 4
  store i32 %v3_13b4c, i32* %r6.global-to-local, align 4
  %v1_13b50 = load i32, i32* %r5.global-to-local, align 4
  %v2_13b50 = add i32 %v1_13b50, 44
  %v3_13b50 = inttoptr i32 %v2_13b50 to i32*
  store i32 %v3_13b48, i32* %v3_13b50, align 4
  %v0_13b54 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b54 = add i32 %v0_13b54, 24
  %v2_13b54 = inttoptr i32 %v1_13b54 to i32*
  %v3_13b54 = load i32, i32* %v2_13b54, align 4
  %v1_13b58 = load i32, i32* %r5.global-to-local, align 4
  %v2_13b58 = add i32 %v1_13b58, 48
  %v3_13b58 = inttoptr i32 %v2_13b58 to i32*
  store i32 %v3_13b54, i32* %v3_13b58, align 4
  %v0_13b5c = load i32, i32* %r4.global-to-local, align 4
  %v1_13b5c = add i32 %v0_13b5c, 28
  %v2_13b5c = inttoptr i32 %v1_13b5c to i32*
  %v3_13b5c = load i32, i32* %v2_13b5c, align 4
  %v1_13b60 = load i32, i32* %r5.global-to-local, align 4
  %v2_13b60 = add i32 %v1_13b60, 52
  %v3_13b60 = inttoptr i32 %v2_13b60 to i32*
  store i32 %v3_13b5c, i32* %v3_13b60, align 4
  %v0_13b64 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b64 = add i32 %v0_13b64, 32
  %v1_13b68 = inttoptr i32 %v1_13b64 to i32*
  %v2_13b68 = load i32, i32* %v1_13b68, align 4
  %v3_13b68 = add i32 %v0_13b64, 36
  %v4_13b68 = inttoptr i32 %v3_13b68 to i32*
  %v5_13b68 = load i32, i32* %v4_13b68, align 4
  store i32 %v5_13b68, i32* %r1.global-to-local, align 4
  %v0_13b6c = load i32, i32* %r5.global-to-local, align 4
  %v1_13b6c = add i32 %v0_13b6c, 56
  %v1_13b70 = inttoptr i32 %v1_13b6c to i32*
  store i32 %v2_13b68, i32* %v1_13b70, align 4
  %v3_13b70 = add i32 %v0_13b6c, 60
  %v4_13b70 = inttoptr i32 %v3_13b70 to i32*
  %v5_13b70 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13b70, i32* %v4_13b70, align 4
  %v0_13b74 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b74 = add i32 %v0_13b74, 40
  %v1_13b78 = inttoptr i32 %v1_13b74 to i32*
  %v2_13b78 = load i32, i32* %v1_13b78, align 4
  %v3_13b78 = add i32 %v0_13b74, 44
  %v4_13b78 = inttoptr i32 %v3_13b78 to i32*
  %v5_13b78 = load i32, i32* %v4_13b78, align 4
  store i32 %v5_13b78, i32* %r1.global-to-local, align 4
  %v0_13b7c = load i32, i32* %r5.global-to-local, align 4
  %v1_13b7c = add i32 %v0_13b7c, 64
  %v1_13b80 = inttoptr i32 %v1_13b7c to i32*
  store i32 %v2_13b78, i32* %v1_13b80, align 4
  %v3_13b80 = add i32 %v0_13b7c, 68
  %v4_13b80 = inttoptr i32 %v3_13b80 to i32*
  %v5_13b80 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13b80, i32* %v4_13b80, align 4
  %v0_13b84 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b84 = add i32 %v0_13b84, 48
  %v1_13b88 = inttoptr i32 %v1_13b84 to i32*
  %v2_13b88 = load i32, i32* %v1_13b88, align 4
  %v3_13b88 = add i32 %v0_13b84, 52
  %v4_13b88 = inttoptr i32 %v3_13b88 to i32*
  %v5_13b88 = load i32, i32* %v4_13b88, align 4
  store i32 %v5_13b88, i32* %r1.global-to-local, align 4
  %v1_13b8c = add i32 %v0_13b84, 8
  %v2_13b8c = inttoptr i32 %v1_13b8c to i16*
  %v3_13b8c = load i16, i16* %v2_13b8c, align 2
  %v4_13b8c = zext i16 %v3_13b8c to i32
  store i32 %v4_13b8c, i32* %r2.global-to-local, align 4
  %v1_13b90 = add i32 %v0_13b84, 10
  %v2_13b90 = inttoptr i32 %v1_13b90 to i16*
  %v3_13b90 = load i16, i16* %v2_13b90, align 2
  %v4_13b90 = zext i16 %v3_13b90 to i32
  store i32 %v4_13b90, i32* %ip.global-to-local, align 4
  %v1_13b94 = add i32 %v0_13b84, 12
  %v2_13b94 = inttoptr i32 %v1_13b94 to i16*
  %v3_13b94 = load i16, i16* %v2_13b94, align 2
  %v4_13b94 = zext i16 %v3_13b94 to i32
  store i32 %v4_13b94, i32* %lr.global-to-local, align 4
  %v1_13b98 = add i32 %v0_13b84, 14
  %v2_13b98 = inttoptr i32 %v1_13b98 to i16*
  %v3_13b98 = load i16, i16* %v2_13b98, align 2
  %v4_13b98 = zext i16 %v3_13b98 to i32
  store i32 %v4_13b98, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_13ba4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ba4 = add i32 %v0_13ba4, 72
  %v1_13ba8 = inttoptr i32 %v1_13ba4 to i32*
  store i32 %v2_13b88, i32* %v1_13ba8, align 4
  %v3_13ba8 = add i32 %v0_13ba4, 76
  %v4_13ba8 = inttoptr i32 %v3_13ba8 to i32*
  %v5_13ba8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13ba8, i32* %v4_13ba8, align 4
  %v0_13bac = load i32, i32* %r5.global-to-local, align 4
  %v1_13bac = inttoptr i32 %v0_13bac to i32*
  %v2_13bac = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_13bac, i32* %v1_13bac, align 4
  %v3_13bac = add i32 %v0_13bac, 4
  %v4_13bac = inttoptr i32 %v3_13bac to i32*
  %v5_13bac = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_13bac, i32* %v4_13bac, align 4
  %v0_13bb0 = load i32, i32* %r6.global-to-local, align 4
  %v1_13bb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13bb0 = add i32 %v1_13bb0, 32
  %v3_13bb0 = inttoptr i32 %v2_13bb0 to i32*
  store i32 %v0_13bb0, i32* %v3_13bb0, align 4
  %v0_13bb4 = load i32, i32* %r7.global-to-local, align 4
  %v1_13bb4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13bb4 = add i32 %v1_13bb4, 36
  %v3_13bb4 = inttoptr i32 %v2_13bb4 to i32*
  store i32 %v0_13bb4, i32* %v3_13bb4, align 4
  %v0_13bb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_13bb8 = load i32, i32* %r5.global-to-local, align 4
  %v2_13bb8 = add i32 %v1_13bb8, 16
  %v3_13bb8 = inttoptr i32 %v2_13bb8 to i32*
  store i32 %v0_13bb8, i32* %v3_13bb8, align 4
  %v0_13bbc = load i32, i32* %ip.global-to-local, align 4
  %v1_13bbc = load i32, i32* %r5.global-to-local, align 4
  %v2_13bbc = add i32 %v1_13bbc, 20
  %v3_13bbc = inttoptr i32 %v2_13bbc to i32*
  store i32 %v0_13bbc, i32* %v3_13bbc, align 4
  %v0_13bc0 = load i32, i32* %lr.global-to-local, align 4
  %v1_13bc0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13bc0 = add i32 %v1_13bc0, 24
  %v3_13bc0 = inttoptr i32 %v2_13bc0 to i32*
  store i32 %v0_13bc0, i32* %v3_13bc0, align 4
  %v0_13bc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13bc4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13bc4 = add i32 %v1_13bc4, 28
  %v3_13bc4 = inttoptr i32 %v2_13bc4 to i32*
  store i32 %v0_13bc4, i32* %v3_13bc4, align 4
  ret i32 %v2_13b88

; uselistorder directives
  uselistorder i32 %v0_13b84, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 2, 7 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_13bd4() local_unnamed_addr {
dec_label_pc_13bd4:
  %stack_var_-16 = alloca i32, align 4
  %v2_13bd8 = ptrtoint i32* %stack_var_-16 to i32
  %v2_13be4 = call i32 @function_15908(i32 7, i32 %v2_13bd8)
  %v1_13be8 = icmp slt i32 %v2_13be4, 0
  %v5_13bec = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_13be8, i32 256, i32 %v5_13bec
  ret i32 %storemerge
}

define i32 @function_13c00(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13c00:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c00 = load i32, i32* @r7, align 4
  store i32 %v3_13c00, i32* %stack_var_-8, align 4
  %v0_13c0c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13c0c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13c0c, -4095
  br i1 %tmp, label %dec_label_pc_13c2c, label %dec_label_pc_13c1c

dec_label_pc_13c1c:                               ; preds = %dec_label_pc_13c00
  %v0_13c1c = call i32 @function_10de8()
  %v0_13c20 = load i32, i32* %r7.global-to-local, align 4
  %v1_13c20 = sub i32 0, %v0_13c20
  %v2_13c24 = inttoptr i32 %v0_13c1c to i32*
  store i32 %v1_13c20, i32* %v2_13c24, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13c2c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13c2c

dec_label_pc_13c2c:                               ; preds = %dec_label_pc_13c00, %dec_label_pc_13c1c
  %v1_13c30 = phi i32 [ %v0_13c0c, %dec_label_pc_13c00 ], [ -1, %dec_label_pc_13c1c ]
  %v2_13c2c = phi i32 [ %v3_13c00, %dec_label_pc_13c00 ], [ %v2_13c2c.pre, %dec_label_pc_13c1c ]
  store i32 %v2_13c2c, i32* @r7, align 4
  ret i32 %v1_13c30

; uselistorder directives
  uselistorder i32 %v0_13c0c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13c2c, { 1, 0 }
}

define i32 @function_13c34(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c34:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c34 = load i32, i32* @r7, align 4
  store i32 %v3_13c34, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13c5c, label %dec_label_pc_13c4c

dec_label_pc_13c4c:                               ; preds = %dec_label_pc_13c34
  %v0_13c4c = call i32 @function_10de8()
  %v0_13c50 = load i32, i32* %r7.global-to-local, align 4
  %v1_13c50 = sub i32 0, %v0_13c50
  %v2_13c54 = inttoptr i32 %v0_13c4c to i32*
  store i32 %v1_13c50, i32* %v2_13c54, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_13c60.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13c5c

dec_label_pc_13c5c:                               ; preds = %dec_label_pc_13c34, %dec_label_pc_13c4c
  %v2_13c60 = phi i32 [ %v3_13c34, %dec_label_pc_13c34 ], [ %v2_13c60.pre, %dec_label_pc_13c4c ]
  %v0_13c5c = phi i32 [ %arg1, %dec_label_pc_13c34 ], [ -1, %dec_label_pc_13c4c ]
  store i32 %v2_13c60, i32* @r7, align 4
  ret i32 %v0_13c5c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c5c, { 1, 0 }
}

define i32 @function_13c68(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13c68:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13c9c, label %dec_label_pc_13c8c

dec_label_pc_13c8c:                               ; preds = %dec_label_pc_13c68
  %v0_13c8c = call i32 @function_10de8()
  %v0_13c90 = load i32, i32* %r4.global-to-local, align 4
  %v1_13c90 = sub i32 0, %v0_13c90
  %v2_13c94 = inttoptr i32 %v0_13c8c to i32*
  store i32 %v1_13c90, i32* %v2_13c94, align 4
  br label %dec_label_pc_13c9c

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13c68, %dec_label_pc_13c8c
  %v1_13ca4 = phi i32 [ %arg1, %dec_label_pc_13c68 ], [ -1, %dec_label_pc_13c8c ]
  ret i32 %v1_13ca4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13c9c, { 1, 0 }
}

define i32 @function_13ca8(i32 %arg1) local_unnamed_addr {
dec_label_pc_13ca8:
  %v1_13cb8 = load i32, i32* @r0, align 4
  ret i32 %v1_13cb8
}

define i32 @function_13cbc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13cbc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13cbc = load i32, i32* @r7, align 4
  store i32 %v3_13cbc, i32* %stack_var_-8, align 4
  %v0_13cc8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13cc8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13cc8, -4095
  br i1 %tmp, label %dec_label_pc_13ce8, label %dec_label_pc_13cd8

dec_label_pc_13cd8:                               ; preds = %dec_label_pc_13cbc
  %v0_13cd8 = call i32 @function_10de8()
  %v0_13cdc = load i32, i32* %r7.global-to-local, align 4
  %v1_13cdc = sub i32 0, %v0_13cdc
  %v2_13ce0 = inttoptr i32 %v0_13cd8 to i32*
  store i32 %v1_13cdc, i32* %v2_13ce0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13ce8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13ce8

dec_label_pc_13ce8:                               ; preds = %dec_label_pc_13cbc, %dec_label_pc_13cd8
  %v1_13cec = phi i32 [ %v0_13cc8, %dec_label_pc_13cbc ], [ -1, %dec_label_pc_13cd8 ]
  %v2_13ce8 = phi i32 [ %v3_13cbc, %dec_label_pc_13cbc ], [ %v2_13ce8.pre, %dec_label_pc_13cd8 ]
  store i32 %v2_13ce8, i32* @r7, align 4
  ret i32 %v1_13cec

; uselistorder directives
  uselistorder i32 %v0_13cc8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13ce8, { 1, 0 }
}

define i32 @function_13cf0(i32 %arg1) local_unnamed_addr {
dec_label_pc_13cf0:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13cf4.outer

dec_label_pc_13cf4.outer:                         ; preds = %dec_label_pc_13d0c, %dec_label_pc_13cf0
  %v0_13cf4.ph = phi i32 [ %v0_13cf4.pre.pre, %dec_label_pc_13d0c ], [ %arg1, %dec_label_pc_13cf0 ]
  %tmp = icmp ult i32 %v0_13cf4.ph, -4095
  br label %dec_label_pc_13cf4

dec_label_pc_13cf4:                               ; preds = %dec_label_pc_13cf4.outer, %dec_label_pc_13cf4
  br i1 %tmp, label %dec_label_pc_13cf4, label %dec_label_pc_13d0c

dec_label_pc_13d0c:                               ; preds = %dec_label_pc_13cf4
  %v0_13d0c = call i32 @function_10de8()
  %v1_13d10 = sub i32 0, %v0_13cf4.ph
  %v2_13d14 = inttoptr i32 %v0_13d0c to i32*
  store i32 %v1_13d10, i32* %v2_13d14, align 4
  %v0_13cf4.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13cf4.outer

; uselistorder directives
  uselistorder i32 %v0_13cf4.ph, { 1, 0 }
  uselistorder label %dec_label_pc_13cf4, { 1, 0 }
}

define i32 @function_13d1c(i32* %arg1) local_unnamed_addr {
dec_label_pc_13d1c:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 123612, i32* @r6, align 4
  %v1_13d30 = add i32 %tmp, 24
  store i32 %v1_13d30, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_13d48 = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  store i32 %v4_13d48, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13d48)
  %v0_13d5c = load i32, i32* @r6, align 4
  %v2_13d5c = add i32 %v0_13d5c, 16
  %v3_13d5c = inttoptr i32 %v2_13d5c to i32*
  %v4_13d5c = load i32, i32* %v3_13d5c, align 4
  store i32 %v4_13d5c, i32* %ip.global-to-local, align 4
  store i32 81256, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13d5c)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_13d6c

dec_label_pc_13d6c:                               ; preds = %dec_label_pc_13d9c, %dec_label_pc_13d1c
  %v0_13d6c = load i32, i32* @r5, align 4
  %v1_13d6c = add i32 %v0_13d6c, 4
  %v2_13d6c = inttoptr i32 %v1_13d6c to i32*
  %v3_13d6c = load i32, i32* %v2_13d6c, align 4
  %v4_13d6c = add i32 %v0_13d6c, 8
  %v5_13d6c = inttoptr i32 %v4_13d6c to i32*
  %v6_13d6c = load i32, i32* %v5_13d6c, align 4
  %tmp10 = icmp ugt i32 %v6_13d6c, %v3_13d6c
  br i1 %tmp10, label %dec_label_pc_13d9c, label %dec_label_pc_13d78

dec_label_pc_13d78:                               ; preds = %dec_label_pc_13d6c
  %v1_13d78 = inttoptr i32 %v0_13d6c to i32*
  %v2_13d78 = load i32, i32* %v1_13d78, align 4
  %v1_13d7c = add i32 %v0_13d6c, 12
  %v2_13d7c = inttoptr i32 %v1_13d7c to i32*
  %v3_13d7c = load i32, i32* %v2_13d7c, align 4
  %v1_13d80 = add i32 %v0_13d6c, 20
  %v2_13d80 = inttoptr i32 %v1_13d80 to i32*
  %v3_13d80 = load i32, i32* %v2_13d80, align 4
  %v4_13d84 = inttoptr i32 %v3_13d7c to i32*
  %v5_13d84 = call i32 @function_1593c(i32 %v2_13d78, i32* %v4_13d84, i32 %v3_13d80, i32 %v6_13d6c)
  %tmp9 = icmp slt i32 %v5_13d84, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_13d94

.thread:                                          ; preds = %dec_label_pc_13d78
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13dcc

dec_label_pc_13d94:                               ; preds = %dec_label_pc_13d78
  %v1_13d94 = load i32, i32* @r5, align 4
  %v2_13d94 = add i32 %v1_13d94, 8
  %v3_13d94 = inttoptr i32 %v2_13d94 to i32*
  store i32 %v5_13d84, i32* %v3_13d94, align 4
  %v0_13d98 = load i32, i32* @r7, align 4
  %v1_13d98 = load i32, i32* @r5, align 4
  %v2_13d98 = add i32 %v1_13d98, 4
  %v3_13d98 = inttoptr i32 %v2_13d98 to i32*
  store i32 %v0_13d98, i32* %v3_13d98, align 4
  %v0_13d9c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13d9c

dec_label_pc_13d9c:                               ; preds = %dec_label_pc_13d6c, %dec_label_pc_13d94
  %v1_13dc0 = phi i32 [ %v0_13d6c, %dec_label_pc_13d6c ], [ %v0_13d9c.pre, %dec_label_pc_13d94 ]
  %v1_13d9c = add i32 %v1_13dc0, 4
  %v2_13d9c = inttoptr i32 %v1_13d9c to i32*
  %v3_13d9c = load i32, i32* %v2_13d9c, align 4
  %v1_13da0 = add i32 %v1_13dc0, 12
  %v2_13da0 = inttoptr i32 %v1_13da0 to i32*
  %v3_13da0 = load i32, i32* %v2_13da0, align 4
  %v2_13da4 = add i32 %v3_13da0, %v3_13d9c
  store i32 %v2_13da4, i32* @r4, align 4
  %v3_13da8 = inttoptr i32 %v2_13da4 to i32*
  %v4_13da8 = load i32, i32* %v3_13da8, align 4
  %v1_13dac = add i32 %v2_13da4, 4
  %v2_13dac = inttoptr i32 %v1_13dac to i32*
  %v3_13dac = load i32, i32* %v2_13dac, align 4
  %v1_13db0 = add i32 %v2_13da4, 16
  %v2_13db0 = inttoptr i32 %v1_13db0 to i16*
  %v3_13db0 = load i16, i16* %v2_13db0, align 2
  %v4_13db0 = zext i16 %v3_13db0 to i32
  %v1_13db4 = add i32 %v2_13da4, 8
  %v2_13db4 = inttoptr i32 %v1_13db4 to i32*
  %v3_13db4 = load i32, i32* %v2_13db4, align 4
  store i32 %v3_13db4, i32* %ip.global-to-local, align 4
  %v2_13db8 = add i32 %v4_13db0, %v3_13d9c
  %v2_13dbc = or i32 %v3_13dac, %v4_13da8
  %v4_13dbc = icmp eq i32 %v2_13dbc, 0
  store i32 %v2_13db8, i32* %v2_13d9c, align 4
  %v0_13dc4 = load i32, i32* %ip.global-to-local, align 4
  %v1_13dc4 = load i32, i32* @r5, align 4
  %v2_13dc4 = add i32 %v1_13dc4, 16
  %v3_13dc4 = inttoptr i32 %v2_13dc4 to i32*
  store i32 %v0_13dc4, i32* %v3_13dc4, align 4
  br i1 %v4_13dbc, label %dec_label_pc_13d6c, label %dec_label_pc_13dcc

dec_label_pc_13dcc:                               ; preds = %dec_label_pc_13d9c, %.thread
  %v0_13dd8 = load i32, i32* @r6, align 4
  %v2_13dd8 = add i32 %v0_13dd8, 24
  %v3_13dd8 = inttoptr i32 %v2_13dd8 to i32*
  %v4_13dd8 = load i32, i32* %v3_13dd8, align 4
  store i32 %v4_13dd8, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13dd8)
  %v0_13de4 = load i32, i32* @r4, align 4
  ret i32 %v0_13de4

; uselistorder directives
  uselistorder i32 %v2_13da4, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_13dc0, { 1, 0 }
  uselistorder i32 %v6_13d6c, { 1, 0 }
  uselistorder i32 %v0_13d6c, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_13d9c, { 1, 0 }
}

define i32 @function_13df8(i32 %arg1) local_unnamed_addr {
dec_label_pc_13df8:
  %v0_13df8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13df8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13df8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13df8, %bb
  %v10_13e04 = phi i32 [ %arg1, %dec_label_pc_13df8 ], [ 0, %bb ]
  ret i32 %v10_13e04

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_13e08(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13e08:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_13e08 = load i32, i32* @r4, align 4
  %v6_13e08 = load i32, i32* @r5, align 4
  %v9_13e08 = load i32, i32* @r6, align 4
  %v12_13e08 = load i32, i32* @r7, align 4
  %v15_13e08 = load i32, i32* @r8, align 4
  %v18_13e08 = load i32, i32* @sb, align 4
  %v21_13e08 = load i32, i32* @sl, align 4
  %v24_13e08 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_13e0c = icmp eq i32* %arg1, null
  store i1 %v2_13e0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_13e0c, label %dec_label_pc_1411c, label %dec_label_pc_13e24

dec_label_pc_13e24:                               ; preds = %dec_label_pc_13e08
  %v1_13e24 = urem i32 %arg3, 256
  store i32 %v1_13e24, i32* @sb, align 4
  %v1_13e28 = and i32 %arg3, ptrtoint (i32* @global_var_ff00.21 to i32)
  %v3_13e2c = udiv i32 %v1_13e28, 256
  %v3_13e30 = mul nuw nsw i32 %v1_13e24, 4
  %v1_13e38 = or i32 %v3_13e30, 1
  %v1_13e44 = and i32 %arg3, 131072
  %v1_13e48 = add nsw i32 %v1_13e24, -1
  %v1_13e54 = and i32 %arg3, 262144
  store i32 %v1_13e54, i32* %r2.global-to-local, align 4
  %v1_13e58 = and i32 %arg3, 65536
  store i32 %v1_13e58, i32* %r3.global-to-local, align 4
  store i32 %v1_13e58, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_13e68 = add i32 %arg4, 1
  store i32 %v1_13e68, i32* @sl, align 4
  %v2_13fe8 = inttoptr i32 %arg2 to i32*
  %v2_13ff8 = icmp eq i32 %v1_13e44, 0
  %v2_14050 = icmp eq i32 %v1_13e54, 0
  br label %dec_label_pc_13e6c

dec_label_pc_13e6c:                               ; preds = %dec_label_pc_13e6c.backedge, %dec_label_pc_13e24
  %v2_13e88 = phi i32 [ %v0_13e6c.pre, %dec_label_pc_13e6c.backedge ], [ %tmp, %dec_label_pc_13e24 ]
  %v1_13e6c = add i32 %v2_13e88, 4
  %v2_13e6c = inttoptr i32 %v1_13e6c to i32*
  %v3_13e6c = load i32, i32* %v2_13e6c, align 4
  store i32 %v3_13e6c, i32* %r3.global-to-local, align 4
  %v2_13e70 = icmp eq i32 %v3_13e6c, 0
  store i1 %v2_13e70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e70, label %dec_label_pc_13e78, label %dec_label_pc_13ec0

dec_label_pc_13e78:                               ; preds = %dec_label_pc_13e6c
  %v1_13e78 = add i32 %v2_13e88, 16
  %v2_13e78 = inttoptr i32 %v1_13e78 to i32*
  %v3_13e78 = load i32, i32* %v2_13e78, align 4
  store i32 %v3_13e78, i32* %r3.global-to-local, align 4
  %v2_13e7c = icmp eq i32 %v3_13e78, 0
  store i1 %v2_13e7c, i1* %cpsr_z.global-to-local, align 1
  %v1_13e80 = add i32 %v2_13e88, 8
  %v2_13e80 = inttoptr i32 %v1_13e80 to i32*
  %v3_13e80 = load i32, i32* %v2_13e80, align 4
  store i32 %v3_13e80, i32* %r3.global-to-local, align 4
  br i1 %v2_13e7c, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_13e78
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_13e78, align 4
  %v0_13e8c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_13e78, %bb
  %v0_13e8c = phi i32 [ %v0_13e8c.pre, %bb ], [ %v3_13e80, %dec_label_pc_13e78 ]
  %v2_13e8c = icmp eq i32 %v0_13e8c, 0
  store i1 %v2_13e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e8c, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_13e38, i32* %r3.global-to-local, align 4
  %v2_13e94 = load i32, i32* @r5, align 4
  %v3_13e94 = add i32 %v2_13e94, 8
  %v4_13e94 = inttoptr i32 %v3_13e94 to i32*
  store i32 %v1_13e38, i32* %v4_13e94, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_13e98 = load i32, i32* @r5, align 4
  %v1_13e98 = add i32 %v0_13e98, 16
  %v2_13e98 = inttoptr i32 %v1_13e98 to i32*
  %v3_13e98 = load i32, i32* %v2_13e98, align 4
  store i32 %v3_13e98, i32* %r0.global-to-local, align 4
  %v1_13e9c = add i32 %v0_13e98, 8
  %v2_13e9c = inttoptr i32 %v1_13e9c to i32*
  %v3_13e9c = load i32, i32* %v2_13e9c, align 4
  store i32 %v3_13e9c, i32* %r3.global-to-local, align 4
  %v2_13ea0 = add i32 %v3_13e9c, %v3_13e98
  store i32 %v2_13ea0, i32* @r0, align 4
  %v0_13ea4 = call i32 @function_113b0()
  store i32 %v0_13ea4, i32* %r0.global-to-local, align 4
  %v2_13ea8 = icmp eq i32 %v0_13ea4, 0
  store i1 %v2_13ea8, i1* %cpsr_z.global-to-local, align 1
  %v1_13eac = load i32, i32* @r5, align 4
  %v2_13eac = add i32 %v1_13eac, 4
  %v3_13eac = inttoptr i32 %v2_13eac to i32*
  store i32 %v0_13ea4, i32* %v3_13eac, align 4
  br i1 %v2_13ea8, label %dec_label_pc_1411c, label %dec_label_pc_13eb4

dec_label_pc_13eb4:                               ; preds = %.thread
  %v0_13eb4 = load i32, i32* @r5, align 4
  %v1_13eb4 = add i32 %v0_13eb4, 20
  %v2_13eb4 = inttoptr i32 %v1_13eb4 to i32*
  %v3_13eb4 = load i32, i32* %v2_13eb4, align 4
  %v1_13eb8 = or i32 %v3_13eb4, 1
  store i32 %v1_13eb8, i32* %r3.global-to-local, align 4
  store i32 %v1_13eb8, i32* %v2_13eb4, align 4
  %v0_13ec0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13ec0

dec_label_pc_13ec0:                               ; preds = %dec_label_pc_13e6c, %dec_label_pc_13eb4
  %v1_13ec8 = phi i32 [ %v2_13e88, %dec_label_pc_13e6c ], [ %v0_13ec0.pre, %dec_label_pc_13eb4 ]
  %v1_13ec0 = add i32 %v1_13ec8, 4
  %v2_13ec0 = inttoptr i32 %v1_13ec0 to i32*
  %v3_13ec0 = load i32, i32* %v2_13ec0, align 4
  store i32 %v3_13ec0, i32* %r2.global-to-local, align 4
  %v4_13ec0 = add i32 %v1_13ec8, 8
  %v5_13ec0 = inttoptr i32 %v4_13ec0 to i32*
  %v6_13ec0 = load i32, i32* %v5_13ec0, align 4
  %v2_13ec4 = add i32 %v6_13ec0, %v3_13ec0
  store i32 %v2_13ec4, i32* %r3.global-to-local, align 4
  %v2_13ec8 = add i32 %v1_13ec8, 12
  %v3_13ec8 = inttoptr i32 %v2_13ec8 to i32*
  store i32 %v2_13ec4, i32* %v3_13ec8, align 4
  %v0_13ecc = load i32, i32* @fp, align 4
  store i32 %v0_13ecc, i32* @r6, align 4
  br label %dec_label_pc_13ed0

dec_label_pc_13ed0:                               ; preds = %dec_label_pc_13f5c, %dec_label_pc_13f48, %dec_label_pc_13ec0
  %v0_13ed8 = phi i32 [ %v0_13ecc, %dec_label_pc_13ec0 ], [ %v1_13f48, %dec_label_pc_13f48 ], [ %v0_13ed8.pre.pre, %dec_label_pc_13f5c ]
  %v0_13ed0 = load i32, i32* @r5, align 4
  %v1_13ed0 = add i32 %v0_13ed0, 12
  store i32 %v1_13ed0, i32* %r0.global-to-local, align 4
  %v1_13ed4 = inttoptr i32 %v1_13ed0 to i32*
  %v2_13ed4 = load i32, i32* %v1_13ed4, align 4
  store i32 %v2_13ed4, i32* %r0.global-to-local, align 4
  %v3_13ed4 = add i32 %v0_13ed0, 16
  %v4_13ed4 = inttoptr i32 %v3_13ed4 to i32*
  %v5_13ed4 = load i32, i32* %v4_13ed4, align 4
  %v2_13ed8 = add i32 %v2_13ed4, %v0_13ed8
  store i32 %v2_13ed8, i32* %r0.global-to-local, align 4
  %v2_13edc = sub i32 %v5_13ed4, %v0_13ed8
  %v1_13ee0 = inttoptr i32 %v0_13ed0 to i32*
  %v2_13ee0 = load i32, i32* %v1_13ee0, align 4
  store i32 %v2_13ee0, i32* %r2.global-to-local, align 4
  %v3_13ee4 = call i32 @function_14904(i32 %v2_13ed8, i32 %v2_13edc, i32 %v2_13ee0)
  store i32 %v3_13ee4, i32* %r0.global-to-local, align 4
  store i32 %v3_13ee4, i32* %r4.global-to-local, align 4
  %v2_13ee8 = icmp eq i32 %v3_13ee4, 0
  store i1 %v2_13ee8, i1* %cpsr_z.global-to-local, align 1
  %v0_13ef0 = load i32, i32* @r5, align 4
  %v1_13ef0 = add i32 %v0_13ef0, 12
  br i1 %v2_13ee8, label %dec_label_pc_13ef0, label %dec_label_pc_13f08

dec_label_pc_13ef0:                               ; preds = %dec_label_pc_13ed0
  store i32 %v1_13ef0, i32* %r0.global-to-local, align 4
  %v1_13ef4 = inttoptr i32 %v1_13ef0 to i32*
  %v2_13ef4 = load i32, i32* %v1_13ef4, align 4
  store i32 %v2_13ef4, i32* %r0.global-to-local, align 4
  %v3_13ef4 = add i32 %v0_13ef0, 16
  %v4_13ef4 = inttoptr i32 %v3_13ef4 to i32*
  %v5_13ef4 = load i32, i32* %v4_13ef4, align 4
  store i32 %v5_13ef4, i32* @r2, align 4
  %v2_13efc = inttoptr i32 %v2_13ef4 to i8*
  %v3_13efc = call i32 @function_10e40(i8* %v2_13efc, i32 0)
  store i32 %v3_13efc, i32* %r0.global-to-local, align 4
  %v0_13f00 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14120

dec_label_pc_13f08:                               ; preds = %dec_label_pc_13ed0
  %v2_13f08 = inttoptr i32 %v1_13ef0 to i32*
  %v3_13f08 = load i32, i32* %v2_13f08, align 4
  store i32 %v3_13f08, i32* @r4, align 4
  %v1_13f0c = load i32, i32* @r6, align 4
  %v2_13f0c = add i32 %v1_13f0c, %v3_13f08
  store i32 %v2_13f0c, i32* %r0.global-to-local, align 4
  %v1_13f10 = call i32 @function_153b0(i32 %v2_13f0c)
  %v0_13f18 = load i32, i32* @r6, align 4
  %v2_13f18 = add i32 %v0_13f18, %v1_13f10
  store i32 %v2_13f18, i32* @r6, align 4
  %v0_13f1c = load i32, i32* @r4, align 4
  store i32 %v0_13f1c, i32* @r0, align 4
  %v2_13f20 = call i32 @function_155fc(i32 %v0_13f1c, i32 10)
  store i32 %v2_13f20, i32* %r0.global-to-local, align 4
  %v2_13f24 = icmp eq i32 %v2_13f20, 0
  store i1 %v2_13f24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f24, label %dec_label_pc_13f50, label %dec_label_pc_13f2c

dec_label_pc_13f2c:                               ; preds = %dec_label_pc_13f08
  %v1_13f2c = inttoptr i32 %v2_13f20 to i8*
  %v2_13f2c = load i8, i8* %v1_13f2c, align 1
  %v3_13f2c = zext i8 %v2_13f2c to i32
  %v1_13f30 = add nuw nsw i32 %v3_13f2c, 255
  %v1_13f34 = urem i32 %v1_13f30, 256
  store i32 %v1_13f34, i32* %r3.global-to-local, align 4
  %v7_13f38 = icmp eq i32 %v1_13f34, 92
  store i1 %v7_13f38, i1* %cpsr_z.global-to-local, align 1
  %v1_13f3c = trunc i32 %v1_13f30 to i8
  store i8 %v1_13f3c, i8* %v1_13f2c, align 1
  %v0_13f40 = load i32, i32* @r6, align 4
  %v1_13f40 = add i32 %v0_13f40, -1
  store i32 %v1_13f40, i32* @r6, align 4
  %v0_13f44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13f44, label %dec_label_pc_13f48, label %dec_label_pc_13fd4

dec_label_pc_13f48:                               ; preds = %dec_label_pc_13f2c
  %v1_13f48 = add i32 %v0_13f40, -2
  store i32 %v1_13f48, i32* @r6, align 4
  br label %dec_label_pc_13ed0

dec_label_pc_13f50:                               ; preds = %dec_label_pc_13f08
  %v0_13f50 = load i32, i32* @r5, align 4
  %v1_13f50 = add i32 %v0_13f50, 20
  %v2_13f50 = inttoptr i32 %v1_13f50 to i32*
  %v3_13f50 = load i32, i32* %v2_13f50, align 4
  store i32 %v3_13f50, i32* %r3.global-to-local, align 4
  %v2_13f54 = icmp eq i32 %v3_13f50, 0
  store i1 %v2_13f54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f54, label %dec_label_pc_13f8c, label %dec_label_pc_13f5c

dec_label_pc_13f5c:                               ; preds = %dec_label_pc_13f50
  %v1_13f5c = add i32 %v0_13f50, 16
  %v2_13f5c = inttoptr i32 %v1_13f5c to i32*
  %v3_13f5c = load i32, i32* %v2_13f5c, align 4
  store i32 %v3_13f5c, i32* %r3.global-to-local, align 4
  %v1_13f60 = add i32 %v0_13f50, 8
  %v2_13f60 = inttoptr i32 %v1_13f60 to i32*
  %v3_13f60 = load i32, i32* %v2_13f60, align 4
  %v1_13f64 = add i32 %v3_13f5c, 4096
  store i32 %v1_13f64, i32* %r3.global-to-local, align 4
  %v2_13f68 = add i32 %v3_13f60, %v1_13f64
  store i32 %v1_13f64, i32* %v2_13f5c, align 4
  %v0_13f70 = load i32, i32* @r5, align 4
  %v1_13f70 = add i32 %v0_13f70, 4
  %v2_13f70 = inttoptr i32 %v1_13f70 to i32*
  %v3_13f70 = load i32, i32* %v2_13f70, align 4
  store i32 %v3_13f70, i32* %r0.global-to-local, align 4
  %v4_13f74 = inttoptr i32 %v3_13f70 to i32*
  %v5_13f74 = call i32 @function_11e04(i32* %v4_13f74, i32 %v2_13f68, i32 %v2_13ee0, i32 %v1_13f64)
  store i32 %v5_13f74, i32* %r0.global-to-local, align 4
  %v0_13f78 = load i32, i32* @r5, align 4
  %v1_13f78 = add i32 %v0_13f78, 8
  %v2_13f78 = inttoptr i32 %v1_13f78 to i32*
  %v3_13f78 = load i32, i32* %v2_13f78, align 4
  %v2_13f7c = add i32 %v3_13f78, %v5_13f74
  store i32 %v2_13f7c, i32* %r3.global-to-local, align 4
  %v2_13f80 = add i32 %v0_13f78, 12
  %v3_13f80 = inttoptr i32 %v2_13f80 to i32*
  store i32 %v2_13f7c, i32* %v3_13f80, align 4
  %v1_13f84 = load i32, i32* @r5, align 4
  %v2_13f84 = add i32 %v1_13f84, 4
  %v3_13f84 = inttoptr i32 %v2_13f84 to i32*
  store i32 %v5_13f74, i32* %v3_13f84, align 4
  %v0_13ed8.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13ed0

dec_label_pc_13f8c:                               ; preds = %dec_label_pc_13f50, %.dec_label_pc_13f8c_crit_edge
  %v0_13f8c = phi i32 [ %v0_13f8c.pre, %.dec_label_pc_13f8c_crit_edge ], [ %v0_13f50, %dec_label_pc_13f50 ]
  %v1_13f8c = inttoptr i32 %v0_13f8c to i32*
  %v2_13f8c = load i32, i32* %v1_13f8c, align 4
  %v1_13f90 = add i32 %v2_13f8c, 52
  %v2_13f90 = inttoptr i32 %v1_13f90 to i32*
  %v3_13f90 = load i32, i32* %v2_13f90, align 4
  store i32 %v3_13f90, i32* %r3.global-to-local, align 4
  %v2_13f94 = icmp eq i32 %v3_13f90, 0
  store i1 %v2_13f94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f94, label %dec_label_pc_13fc0, label %dec_label_pc_13f9c

dec_label_pc_13f9c:                               ; preds = %dec_label_pc_13f8c
  %v1_13f9c = add i32 %v2_13f8c, 16
  %v2_13f9c = inttoptr i32 %v1_13f9c to i32*
  %v3_13f9c = load i32, i32* %v2_13f9c, align 4
  store i32 %v3_13f9c, i32* %r2.global-to-local, align 4
  %v1_13fa0 = add i32 %v2_13f8c, 24
  %v2_13fa0 = inttoptr i32 %v1_13fa0 to i32*
  %v3_13fa0 = load i32, i32* %v2_13fa0, align 4
  store i32 %v3_13fa0, i32* %r3.global-to-local, align 4
  %v3_13fa4 = icmp ult i32 %v3_13f9c, %v3_13fa0
  %v9_13fa4 = icmp eq i32 %v3_13f9c, %v3_13fa0
  store i1 %v9_13fa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13fa4, label %dec_label_pc_13fc8thread-pre-split, label %dec_label_pc_13fb4

dec_label_pc_13fb4:                               ; preds = %dec_label_pc_13f9c
  store i32 %v2_13f8c, i32* %r0.global-to-local, align 4
  %v1_13fb8 = inttoptr i32 %v2_13f8c to i16*
  %v2_13fb8 = call i32 @function_14d54(i16* %v1_13fb8)
  store i32 %v2_13fb8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13fc8

dec_label_pc_13fc0:                               ; preds = %dec_label_pc_13f8c
  store i32 %v2_13f8c, i32* %r0.global-to-local, align 4
  %v1_13fc4 = call i32 @function_14828(i32 %v2_13f8c)
  store i32 %v1_13fc4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13fc8

dec_label_pc_13fc8thread-pre-split:               ; preds = %dec_label_pc_13f9c
  %v2_13fa8 = inttoptr i32 %v3_13f9c to i8*
  %v3_13fa8 = load i8, i8* %v2_13fa8, align 1
  %v4_13fa8 = zext i8 %v3_13fa8 to i32
  store i32 %v4_13fa8, i32* %r0.global-to-local, align 4
  %v6_13fa8 = add i32 %v3_13f9c, 1
  store i32 %v6_13fa8, i32* %r2.global-to-local, align 4
  store i32 %v6_13fa8, i32* %v2_13f9c, align 4
  %v0_13fc8.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13fc8

dec_label_pc_13fc8:                               ; preds = %dec_label_pc_13fc8thread-pre-split, %dec_label_pc_13fb4, %dec_label_pc_13fc0
  %v1_13fcc = phi i32 [ %v0_13fc8.pr, %dec_label_pc_13fc8thread-pre-split ], [ %v2_13fb8, %dec_label_pc_13fb4 ], [ %v1_13fc4, %dec_label_pc_13fc0 ]
  %v7_13fc8 = icmp eq i32 %v1_13fcc, 10
  store i1 %v7_13fc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13fc8, label %dec_label_pc_13fd4.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_13fc8
  %v8_13fcc = icmp eq i32 %v1_13fcc, -1
  store i1 %v8_13fcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_13fcc, label %dec_label_pc_13fd4.loopexit, label %.dec_label_pc_13f8c_crit_edge

.dec_label_pc_13f8c_crit_edge:                    ; preds = %bb68
  %v0_13f8c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13f8c

dec_label_pc_13fd4.loopexit:                      ; preds = %bb68, %dec_label_pc_13fc8
  %v0_13fd4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13fd4

dec_label_pc_13fd4:                               ; preds = %dec_label_pc_13f2c, %dec_label_pc_13fd4.loopexit
  %v0_13fd4 = phi i32 [ %v0_13fd4.pre, %dec_label_pc_13fd4.loopexit ], [ %v1_13f40, %dec_label_pc_13f2c ]
  %v7_13fd4 = icmp eq i32 %v0_13fd4, -1
  store i1 %v7_13fd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13fd4, label %dec_label_pc_1411c, label %dec_label_pc_13fdc

dec_label_pc_13fdc:                               ; preds = %dec_label_pc_13fd4
  %v0_13fdc = load i32, i32* @r5, align 4
  %v1_13fdc = add i32 %v0_13fdc, 4
  %v2_13fdc = inttoptr i32 %v1_13fdc to i32*
  %v3_13fdc = load i32, i32* %v2_13fdc, align 4
  store i32 %v3_13fdc, i32* %r0.global-to-local, align 4
  store i32 %v3_13e30, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_13fdc, i32* %v2_13fe8, align 4
  %v0_13fec = load i32, i32* @fp, align 4
  %v2_13ff0 = inttoptr i32 %v3_13fdc to i8*
  %v3_13ff0 = call i32 @function_10e40(i8* %v2_13ff0, i32 %v0_13fec)
  store i32 %v3_13ff0, i32* %r0.global-to-local, align 4
  store i32 %v1_13e44, i32* %r2.global-to-local, align 4
  store i1 %v2_13ff8, i1* %cpsr_z.global-to-local, align 1
  %v0_13ffc = load i32, i32* @r5, align 4
  %v1_13ffc = add i32 %v0_13ffc, 12
  %v2_13ffc = inttoptr i32 %v1_13ffc to i32*
  %v3_13ffc = load i32, i32* %v2_13ffc, align 4
  store i32 %v3_13ffc, i32* @r4, align 4
  br i1 %v2_13ff8, label %dec_label_pc_14014, label %dec_label_pc_14004

dec_label_pc_14004:                               ; preds = %dec_label_pc_13fdc
  store i32 %v3_13ffc, i32* @r0, align 4
  %v0_14008 = load i32, i32* @sl, align 4
  %v2_1400c = inttoptr i32 %v3_13ffc to i8*
  %v3_1400c = call i32 @function_15474(i8* %v2_1400c, i32 %v0_14008)
  store i32 %v3_1400c, i32* %r0.global-to-local, align 4
  %v0_14010 = load i32, i32* @r4, align 4
  %v2_14010 = add i32 %v0_14010, %v3_1400c
  store i32 %v2_14010, i32* @r4, align 4
  br label %dec_label_pc_14014

dec_label_pc_14014:                               ; preds = %dec_label_pc_13fdc, %dec_label_pc_14004
  %v0_140ec13 = phi i32 [ %v3_13ffc, %dec_label_pc_13fdc ], [ %v2_14010, %dec_label_pc_14004 ]
  %v1_14014 = inttoptr i32 %v0_140ec13 to i8*
  %v2_14014 = load i8, i8* %v1_14014, align 1
  %v3_14014 = zext i8 %v2_14014 to i32
  store i32 %v3_14014, i32* %r2.global-to-local, align 4
  %v2_14018 = icmp eq i8 %v2_14014, 0
  store i1 %v2_14018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14018, label %dec_label_pc_13e6c.backedge, label %dec_label_pc_14020

dec_label_pc_13e6c.backedge:                      ; preds = %dec_label_pc_14014, %dec_label_pc_14114, %dec_label_pc_14020
  %v0_13e6c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13e6c

dec_label_pc_14020:                               ; preds = %dec_label_pc_14014
  %v0_14020 = load i32, i32* @r7, align 4
  %v1_14020 = inttoptr i32 %v0_14020 to i8*
  %v2_14020 = load i8, i8* %v1_14020, align 1
  %v3_14020 = zext i8 %v2_14020 to i32
  store i32 %v3_14020, i32* %r3.global-to-local, align 4
  %v9_14024 = icmp eq i8 %v2_14020, %v2_14014
  store i1 %v9_14024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14024, label %dec_label_pc_13e6c.backedge, label %dec_label_pc_140ec.preheader

dec_label_pc_140ec.preheader:                     ; preds = %dec_label_pc_14020
  %v1_14028 = load i32, i32* @fp, align 4
  store i32 %v1_14028, i32* @r6, align 4
  %v2_140ec15 = load i8, i8* %v1_14014, align 1
  %v3_140ec16 = zext i8 %v2_140ec15 to i32
  store i32 %v3_140ec16, i32* %r2.global-to-local, align 4
  %v2_140f017 = icmp eq i8 %v2_140ec15, 0
  store i1 %v2_140f017, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140f017, label %dec_label_pc_14108, label %dec_label_pc_140f8.preheader

dec_label_pc_140f8.preheader:                     ; preds = %dec_label_pc_140ec.preheader
  %v2_140f882 = load i8, i8* %v1_14020, align 1
  %v3_140f883 = zext i8 %v2_140f882 to i32
  store i32 %v3_140f883, i32* %r3.global-to-local, align 4
  %v9_140fc86 = icmp eq i8 %v2_140f882, %v2_140ec15
  store i1 %v9_140fc86, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_140fc86, label %dec_label_pc_14108, label %bb74

dec_label_pc_14034:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_14038 = load i32, i32* %v2_13fe8, align 4
  store i32 %v2_14038, i32* %r3.global-to-local, align 4
  store i32 %v1_13e48, i32* %r2.global-to-local, align 4
  %v9_14040 = icmp eq i32 %v2_1404488, %v1_13e48
  store i1 %v9_14040, i1* %cpsr_z.global-to-local, align 1
  %v5_14044 = mul i32 %v2_1404488, 4
  %v6_14044 = add i32 %v2_14038, %v5_14044
  %v7_14044 = inttoptr i32 %v6_14044 to i32*
  store i32 %v0_1404487, i32* %v7_14044, align 4
  br i1 %v9_14040, label %dec_label_pc_1404c, label %dec_label_pc_14058

dec_label_pc_1404c:                               ; preds = %dec_label_pc_14034
  store i32 %v1_13e54, i32* %r3.global-to-local, align 4
  store i1 %v2_14050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14050, label %dec_label_pc_14058, label %dec_label_pc_14078

dec_label_pc_14058:                               ; preds = %dec_label_pc_1404c, %dec_label_pc_14034
  %v0_14058 = load i32, i32* @r7, align 4
  %v1_14058 = inttoptr i32 %v0_14058 to i8*
  %v2_14058 = load i8, i8* %v1_14058, align 1
  %v3_14058 = zext i8 %v2_14058 to i32
  store i32 %v3_14058, i32* %r3.global-to-local, align 4
  %v2_1405c = icmp eq i8 %v2_14058, 0
  store i1 %v2_1405c, i1* %cpsr_z.global-to-local, align 1
  %v0_14060 = load i32, i32* @r4, align 4
  store i32 %v0_14060, i32* @r0, align 4
  %v1_14064 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_1405c, i32 %v1_14064, i32 %v0_14058
  store i32 %storemerge, i32* @r1, align 4
  %v0_1406c = call i32 @function_15430()
  store i32 %v0_1406c, i32* %r0.global-to-local, align 4
  %v0_14070 = load i32, i32* @r4, align 4
  %v2_14070 = add i32 %v0_14070, %v0_1406c
  store i32 %v2_14070, i32* @r4, align 4
  br label %dec_label_pc_140b0

dec_label_pc_14078:                               ; preds = %dec_label_pc_1404c
  %v0_14078 = load i32, i32* @r4, align 4
  store i32 %v0_14078, i32* @r0, align 4
  %v0_1407c = load i32, i32* @r7, align 4
  %v1_1407c = inttoptr i32 %v0_1407c to i8*
  %v2_1407c = load i8, i8* %v1_1407c, align 1
  %v3_1407c = zext i8 %v2_1407c to i32
  %v5_14080 = call i32 @function_15510(i32 %v0_14078, i32 %v3_1407c, i32 %v1_13e48, i32 %v1_13e54)
  store i32 %v5_14080, i32* %r0.global-to-local, align 4
  store i32 %v1_13e44, i32* %r2.global-to-local, align 4
  store i1 %v2_13ff8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_14080, i32* @r4, align 4
  br i1 %v2_13ff8, label %dec_label_pc_140b0, label %dec_label_pc_1409c

dec_label_pc_14098:                               ; preds = %dec_label_pc_1409c
  %v1_14098 = add i32 %v0_140b0.pre, -1
  store i32 %v1_14098, i32* @r4, align 4
  br label %dec_label_pc_1409c

dec_label_pc_1409c:                               ; preds = %dec_label_pc_14078, %dec_label_pc_14098
  %v0_1409c = phi i32 [ %v1_14098, %dec_label_pc_14098 ], [ %v5_14080, %dec_label_pc_14078 ]
  %v1_1409c = add i32 %v0_1409c, -1
  %v2_1409c = inttoptr i32 %v1_1409c to i8*
  %v3_1409c = load i8, i8* %v2_1409c, align 1
  %v4_1409c = zext i8 %v3_1409c to i32
  %v0_140a0 = load i32, i32* @sl, align 4
  store i32 %v0_140a0, i32* @r0, align 4
  %v2_140a4 = call i32 @function_155fc(i32 %v0_140a0, i32 %v4_1409c)
  store i32 %v2_140a4, i32* %r0.global-to-local, align 4
  %v2_140a8 = icmp eq i32 %v2_140a4, 0
  store i1 %v2_140a8, i1* %cpsr_z.global-to-local, align 1
  %v0_140b0.pre = load i32, i32* @r4, align 4
  br i1 %v2_140a8, label %dec_label_pc_140b0, label %dec_label_pc_14098

dec_label_pc_140b0:                               ; preds = %dec_label_pc_1409c, %dec_label_pc_14078, %dec_label_pc_14058
  %v3_140bc = phi i32 [ %v5_14080, %dec_label_pc_14078 ], [ %v2_14070, %dec_label_pc_14058 ], [ %v0_140b0.pre, %dec_label_pc_1409c ]
  %v1_140b0 = inttoptr i32 %v3_140bc to i8*
  %v2_140b0 = load i8, i8* %v1_140b0, align 1
  %v3_140b0 = zext i8 %v2_140b0 to i32
  store i32 %v3_140b0, i32* %r2.global-to-local, align 4
  %v0_140b4 = load i32, i32* @r7, align 4
  %v1_140b4 = inttoptr i32 %v0_140b4 to i8*
  %v2_140b4 = load i8, i8* %v1_140b4, align 1
  %v3_140b4 = zext i8 %v2_140b4 to i32
  store i32 %v3_140b4, i32* %r3.global-to-local, align 4
  %v9_140b8 = icmp eq i8 %v2_140b4, %v2_140b0
  store i1 %v9_140b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_140b8, label %bb71, label %dec_label_pc_140c4

bb71:                                             ; preds = %dec_label_pc_140b0
  %v1_140bc = load i32, i32* @fp, align 4
  %v2_140bc = trunc i32 %v1_140bc to i8
  store i8 %v2_140bc, i8* %v1_140b0, align 1
  %v0_140c0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_140c0.pr, label %bb73, label %.dec_label_pc_140c4_crit_edge

.dec_label_pc_140c4_crit_edge:                    ; preds = %bb71
  %v0_140c4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_140c4

dec_label_pc_140c4:                               ; preds = %.dec_label_pc_140c4_crit_edge, %dec_label_pc_140b0
  %v0_140c4 = phi i32 [ %v0_140c4.pre, %.dec_label_pc_140c4_crit_edge ], [ %v3_140b0, %dec_label_pc_140b0 ]
  %v2_140c4 = icmp eq i32 %v0_140c4, 0
  store i1 %v2_140c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140c4, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_140c4
  %v1_140c8 = load i32, i32* @fp, align 4
  %v2_140c8 = trunc i32 %v1_140c8 to i8
  %v3_140c8 = load i32, i32* @r4, align 4
  %v4_140c8 = inttoptr i32 %v3_140c8 to i8*
  store i8 %v2_140c8, i8* %v4_140c8, align 1
  %v5_140c8 = load i32, i32* @r4, align 4
  %v6_140c8 = add i32 %v5_140c8, 1
  store i32 %v6_140c8, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_140c4, %bb72
  %v2_140cc = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_140cc, i32* %r3.global-to-local, align 4
  %v2_140d0 = icmp eq i32 %v2_140cc, 0
  store i1 %v2_140d0, i1* %cpsr_z.global-to-local, align 1
  %v0_140ec.pre = load i32, i32* @r4, align 4
  br i1 %v2_140d0, label %dec_label_pc_140e8, label %dec_label_pc_140d8

dec_label_pc_140d8:                               ; preds = %bb73
  store i32 %v0_140ec.pre, i32* @r0, align 4
  %v0_140dc = load i32, i32* @sl, align 4
  %v2_140e0 = inttoptr i32 %v0_140ec.pre to i8*
  %v3_140e0 = call i32 @function_15474(i8* %v2_140e0, i32 %v0_140dc)
  store i32 %v3_140e0, i32* %r0.global-to-local, align 4
  %v0_140e4 = load i32, i32* @r4, align 4
  %v2_140e4 = add i32 %v0_140e4, %v3_140e0
  store i32 %v2_140e4, i32* @r4, align 4
  br label %dec_label_pc_140e8

dec_label_pc_140e8:                               ; preds = %bb73, %dec_label_pc_140d8
  %v0_140ec = phi i32 [ %v2_140e4, %dec_label_pc_140d8 ], [ %v0_140ec.pre, %bb73 ]
  %v0_140e8 = load i32, i32* @r6, align 4
  %v1_140e8 = add i32 %v0_140e8, 1
  store i32 %v1_140e8, i32* @r6, align 4
  %v1_140ec = inttoptr i32 %v0_140ec to i8*
  %v2_140ec = load i8, i8* %v1_140ec, align 1
  %v3_140ec = zext i8 %v2_140ec to i32
  store i32 %v3_140ec, i32* %r2.global-to-local, align 4
  %v2_140f0 = icmp eq i8 %v2_140ec, 0
  store i1 %v2_140f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140f0, label %dec_label_pc_14108, label %dec_label_pc_140e8.dec_label_pc_140f8_crit_edge

dec_label_pc_140e8.dec_label_pc_140f8_crit_edge:  ; preds = %dec_label_pc_140e8
  %v0_140f8.pre = load i32, i32* @r7, align 4
  %v1_140f8 = inttoptr i32 %v0_140f8.pre to i8*
  %v2_140f8 = load i8, i8* %v1_140f8, align 1
  %v3_140f8 = zext i8 %v2_140f8 to i32
  store i32 %v3_140f8, i32* %r3.global-to-local, align 4
  %v9_140fc = icmp eq i8 %v2_140f8, %v2_140ec
  store i1 %v9_140fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_140fc, label %dec_label_pc_14108, label %bb74

bb74:                                             ; preds = %dec_label_pc_140f8.preheader, %dec_label_pc_140e8.dec_label_pc_140f8_crit_edge
  %v2_1404488 = phi i32 [ %v1_140e8, %dec_label_pc_140e8.dec_label_pc_140f8_crit_edge ], [ %v1_14028, %dec_label_pc_140f8.preheader ]
  %v0_1404487 = phi i32 [ %v0_140ec, %dec_label_pc_140e8.dec_label_pc_140f8_crit_edge ], [ %v0_140ec13, %dec_label_pc_140f8.preheader ]
  %v2_14100 = load i32, i32* @sb, align 4
  %v3_14100 = sub i32 %v2_1404488, %v2_14100
  %v5_14100 = xor i32 %v2_14100, %v2_1404488
  %v6_14100 = xor i32 %v3_14100, %v2_1404488
  %v7_14100 = and i32 %v6_14100, %v5_14100
  %v8_14100 = icmp slt i32 %v7_14100, 0
  %v9_14100 = icmp slt i32 %v3_14100, 0
  %v10_14100 = icmp eq i32 %v2_1404488, %v2_14100
  store i1 %v10_14100, i1* %cpsr_z.global-to-local, align 1
  %v2_14104 = xor i1 %v9_14100, %v8_14100
  br i1 %v2_14104, label %dec_label_pc_14034, label %dec_label_pc_14108

dec_label_pc_14108:                               ; preds = %dec_label_pc_140f8.preheader, %bb74, %dec_label_pc_140e8, %dec_label_pc_140e8.dec_label_pc_140f8_crit_edge, %dec_label_pc_140ec.preheader
  %v0_1410c = phi i32 [ %v1_14028, %dec_label_pc_140ec.preheader ], [ %v1_14028, %dec_label_pc_140f8.preheader ], [ %v2_1404488, %bb74 ], [ %v1_140e8, %dec_label_pc_140e8 ], [ %v1_140e8, %dec_label_pc_140e8.dec_label_pc_140f8_crit_edge ]
  store i32 %v3_13e2c, i32* %r2.global-to-local, align 4
  %v9_1410c = icmp eq i32 %v0_1410c, %v3_13e2c
  store i1 %v9_1410c, i1* %cpsr_z.global-to-local, align 1
  %v6_14110 = icmp slt i32 %v0_1410c, %v3_13e2c
  br i1 %v6_14110, label %dec_label_pc_14114, label %dec_label_pc_14120

dec_label_pc_14114:                               ; preds = %dec_label_pc_14108
  %v0_14114 = load i32, i32* @r8, align 4
  %v1_14114 = and i32 %v0_14114, 1048576
  %v2_14114 = icmp eq i32 %v1_14114, 0
  store i1 %v2_14114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14114, label %dec_label_pc_13e6c.backedge, label %dec_label_pc_1411c

dec_label_pc_1411c:                               ; preds = %dec_label_pc_14114, %dec_label_pc_13fd4, %.thread, %dec_label_pc_13e08
  br label %dec_label_pc_14120

dec_label_pc_14120:                               ; preds = %dec_label_pc_14108, %dec_label_pc_13ef0, %dec_label_pc_1411c
  %v0_14120 = phi i32 [ %v0_13f00, %dec_label_pc_13ef0 ], [ 0, %dec_label_pc_1411c ], [ %v0_1410c, %dec_label_pc_14108 ]
  store i32 %v0_14120, i32* %r0.global-to-local, align 4
  store i32 %v3_13e08, i32* @r4, align 4
  store i32 %v6_13e08, i32* @r5, align 4
  store i32 %v9_13e08, i32* @r6, align 4
  store i32 %v12_13e08, i32* @r7, align 4
  store i32 %v15_13e08, i32* @r8, align 4
  store i32 %v18_13e08, i32* @sb, align 4
  store i32 %v21_13e08, i32* @sl, align 4
  store i32 %v24_13e08, i32* @fp, align 4
  ret i32 %v0_14120

; uselistorder directives
  uselistorder i32 %v0_14120, { 1, 0 }
  uselistorder i32 %v0_1410c, { 0, 2, 1 }
  uselistorder i32 %v3_14100, { 1, 0 }
  uselistorder i32 %v2_14100, { 1, 0, 2 }
  uselistorder i32 %v2_1404488, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_140fc, { 1, 0 }
  uselistorder i32 %v0_140ec.pre, { 0, 2, 1 }
  uselistorder i32 %v5_14080, { 1, 0, 2, 3 }
  uselistorder i1 %v9_140fc86, { 1, 0 }
  uselistorder i1 %v9_14024, { 1, 0 }
  uselistorder i32 %v3_13ffc, { 0, 2, 1, 3 }
  uselistorder i1 %v7_13fd4, { 1, 0 }
  uselistorder i1 %v8_13fcc, { 1, 0 }
  uselistorder i32 %v3_13f9c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_13f8c, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_13f74, { 1, 0, 2 }
  uselistorder i32 %v1_13f64, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13f50, { 0, 2, 1, 3 }
  uselistorder i32 %v1_13f48, { 1, 0 }
  uselistorder i32 %v1_13f34, { 1, 0 }
  uselistorder i32 %v1_13f30, { 1, 0 }
  uselistorder i32 %v1_13ef0, { 2, 0, 1 }
  uselistorder i32 %v0_13ed8, { 1, 0 }
  uselistorder i32 %v1_13ec8, { 0, 2, 1 }
  uselistorder i1 %v2_13ff8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13e54, { 2, 0, 1, 3 }
  uselistorder i32 %v1_13e48, { 2, 1, 0 }
  uselistorder i32 %v3_13e30, { 1, 0 }
  uselistorder i32 %v3_13e2c, { 2, 1, 0 }
  uselistorder i32 %v1_13e24, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 23, 24, 25, 5, 4, 7, 8, 26, 6, 10, 9, 12, 11, 13, 14, 17, 15, 16, 27, 18, 19, 20, 22, 21, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 12, 13, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 33, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i32*, i32, i32, i32)* @function_11e04, { 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 5 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 (i32)* @function_153b0, { 1, 0 }
  uselistorder i32* @sl, { 8, 9, 10, 11, 12, 13, 14, 40, 0, 41, 42, 15, 16, 102, 103, 104, 105, 106, 107, 108, 109, 110, 1, 111, 112, 113, 114, 115, 116, 118, 2, 117, 120, 119, 121, 122, 123, 124, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 5, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 6, 64, 65, 66, 7, 67, 68, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 3, 86, 87, 88, 89, 4, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 125, 126, 127, 128, 69, 70, 71, 72, 73 }
  uselistorder i32 %arg3, { 2, 3, 1, 5, 0, 4, 6 }
  uselistorder label %dec_label_pc_14120, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14108, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_140e8, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1409c, { 1, 0 }
  uselistorder label %dec_label_pc_13e6c.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14014, { 1, 0 }
  uselistorder label %dec_label_pc_13fd4, { 1, 0 }
  uselistorder label %dec_label_pc_13fc8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13f8c, { 1, 0 }
  uselistorder label %dec_label_pc_13ec0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_14130(i32* %arg1) local_unnamed_addr {
dec_label_pc_14130:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_14134 = icmp eq i32* %arg1, null
  br i1 %v2_14134, label %dec_label_pc_1415c, label %dec_label_pc_1413c

dec_label_pc_1413c:                               ; preds = %dec_label_pc_14130
  %v2_1413c = load i32, i32* %arg1, align 4
  %v1_14140 = inttoptr i32 %v2_1413c to i16*
  %v2_14140 = call i32 @function_141ac(i16* %v1_14140)
  %v0_14144 = load i32, i32* @r4, align 4
  %v1_14144 = add i32 %v0_14144, 20
  %v2_14144 = inttoptr i32 %v1_14144 to i32*
  %v3_14144 = load i32, i32* %v2_14144, align 4
  %v2_14148 = icmp eq i32 %v3_14144, 0
  br i1 %v2_14148, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_1413c
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_1413c, %bb
  store i32 82260, i32* @lr, align 4
  %v1_14150 = xor i1 %v2_14148, true
  call void @__pseudo_cond_branch(i1 %v1_14150, i32 ptrtoint (i32* @global_var_1241c.22 to i32))
  %v0_14154 = load i32, i32* @r4, align 4
  store i32 %v0_14154, i32* @r0, align 4
  %v0_14158 = call i32 @function_1241c()
  br label %dec_label_pc_1415c

dec_label_pc_1415c:                               ; preds = %dec_label_pc_14130, %bb6
  %v1_14160 = phi i32 [ 0, %dec_label_pc_14130 ], [ %v0_14158, %bb6 ]
  ret i32 %v1_14160

; uselistorder directives
  uselistorder i32* null, { 0, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2, 18, 3, 19, 4, 20, 21, 22 }
  uselistorder label %dec_label_pc_1415c, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_14164(i32 %arg1) local_unnamed_addr {
dec_label_pc_14164:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14170 = load i32, i32* @r4, align 4
  store i32 %v3_14170, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_15f88.487 to i32), i32* @r1, align 4
  %v0_14178 = call i32 @function_14360()
  store i32 %v0_14178, i32* %r0.global-to-local, align 4
  store i32 %v0_14178, i32* @r4, align 4
  %v2_1417c = icmp eq i32 %v0_14178, 0
  br i1 %v2_1417c, label %bb, label %dec_label_pc_14188

bb:                                               ; preds = %dec_label_pc_14164
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_14188:                               ; preds = %dec_label_pc_14164
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_14190 = call i32 @function_11cd0(i32 1, i32 24)
  store i32 %v2_14190, i32* %r0.global-to-local, align 4
  %v2_14194 = icmp eq i32 %v2_14190, 0
  br i1 %v2_14194, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_14188
  %v1_14198 = load i32, i32* @r4, align 4
  %v3_14198 = inttoptr i32 %v2_14190 to i32*
  store i32 %v1_14198, i32* %v3_14198, align 4
  %v1_141a0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_14188, %bb4
  %v1_141a0 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_14188 ], [ %v1_141a0.pre, %bb4 ]
  %v2_1419c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1419c, i32* @r4, align 4
  ret i32 %v1_141a0

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_11cd0, { 40, 38, 39, 37, 36, 35, 34, 19, 18, 33, 32, 28, 27, 26, 25, 24, 23, 22, 21, 20, 9, 17, 16, 15, 8, 7, 6, 14, 13, 12, 5, 4, 3, 2, 1, 0, 11, 10, 31, 30, 29 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_141ac(i16* %arg1) local_unnamed_addr {
dec_label_pc_141ac:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_141ac = load i32, i32* @r4, align 4
  store i32 %v3_141ac, i32* %stack_var_-36, align 4
  %v6_141ac = load i32, i32* @r5, align 4
  %v9_141ac = load i32, i32* @r6, align 4
  %v12_141ac = load i32, i32* @r7, align 4
  %v2_141b0 = add i32 %tmp, 52
  %v3_141b0 = inttoptr i32 %v2_141b0 to i32*
  %v4_141b0 = load i32, i32* %v3_141b0, align 4
  %v1_141b8 = sub i32 1, %v4_141b0
  %v2_141b8 = icmp ult i32 %v4_141b0, 2
  br i1 %v2_141b8, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_141ac
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_141ac, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_141b8, %dec_label_pc_141ac ]
  %v0_141c0 = phi i32 [ 0, %bb ], [ %v1_141b8, %dec_label_pc_141ac ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_141c0 = icmp eq i32 %v0_141c0, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 123612, i32* @r6, align 4
  br i1 %v2_141c0, label %dec_label_pc_1420c, label %dec_label_pc_141d4

dec_label_pc_141d4:                               ; preds = %bb18
  %v4_141ec = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_141ec)
  %v0_14200 = load i32, i32* @r6, align 4
  %v2_14200 = add i32 %v0_14200, 16
  %v3_14200 = inttoptr i32 %v2_14200 to i32*
  %v4_14200 = load i32, i32* %v3_14200, align 4
  call void @__pseudo_branch(i32 %v4_14200)
  %v0_1420c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1420c

dec_label_pc_1420c:                               ; preds = %bb18, %dec_label_pc_141d4
  %v1_14214 = phi i32 [ %tmp, %bb18 ], [ %v0_1420c.pre, %dec_label_pc_141d4 ]
  %v1_1420c = inttoptr i32 %v1_14214 to i16*
  %v2_1420c = load i16, i16* %v1_1420c, align 2
  %v3_1420c = zext i16 %v2_1420c to i32
  %v1_14210 = and i32 %v3_1420c, 64
  %v2_14210 = icmp eq i32 %v1_14210, 0
  br i1 %v2_14210, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_1420c
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_1420c, %bb19
  %storemerge26 = phi i32 [ %v1_14214, %bb19 ], [ %v1_14210, %dec_label_pc_1420c ]
  %v1_14218 = xor i1 %v2_14210, true
  call void @__pseudo_cond_branch(i1 %v1_14218, i32 ptrtoint (i32* @global_var_14b48.492 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_14220 = load i32, i32* @r5, align 4
  %v1_14220 = add i32 %v0_14220, 4
  %v2_14220 = inttoptr i32 %v1_14220 to i32*
  %v3_14220 = load i32, i32* %v2_14220, align 4
  %v1_14224 = call i32 @function_109c0(i32 %v3_14220)
  %v0_1422c = load i32, i32* @r6, align 4
  %v2_14238 = add i32 %v0_1422c, 108
  %v3_14238 = inttoptr i32 %v2_14238 to i32*
  %v4_14238 = load i32, i32* %v3_14238, align 4
  store i32 %v4_14238, i32* @r7, align 4
  %v1_14240 = load i32, i32* @r5, align 4
  %v2_14240 = add i32 %v1_14240, 4
  %v3_14240 = inttoptr i32 %v2_14240 to i32*
  store i32 -1, i32* %v3_14240, align 4
  %v0_14248 = load i32, i32* @r6, align 4
  %v2_14248 = add i32 %v0_14248, 72
  %v3_14248 = inttoptr i32 %v2_14248 to i32*
  %v4_14248 = load i32, i32* %v3_14248, align 4
  %v1_14250 = icmp slt i32 %v1_14224, 0
  store i32 %v4_14248, i32* %stack_var_-80, align 4
  br i1 %v1_14250, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_14248)
  %v0_14278 = load i32, i32* @r6, align 4
  %v2_14278 = add i32 %v0_14278, 16
  %v3_14278 = inttoptr i32 %v2_14278 to i32*
  %v4_14278 = load i32, i32* %v3_14278, align 4
  call void @__pseudo_branch(i32 %v4_14278)
  %v0_14288 = load i32, i32* @r6, align 4
  %v2_14288 = add i32 %v0_14288, 12
  %v3_14288 = inttoptr i32 %v2_14288 to i32*
  %v4_14288 = load i32, i32* %v3_14288, align 4
  %v1_1428c = inttoptr i32 %v4_14288 to i32*
  %v2_1428c = load i32, i32* %v1_1428c, align 4
  %v1_14294 = add i32 %v2_1428c, 1
  %v2_14298 = add i32 %v0_14288, 24
  %v3_14298 = inttoptr i32 %v2_14298 to i32*
  %v4_14298 = load i32, i32* %v3_14298, align 4
  store i32 %v4_14298, i32* @r4, align 4
  store i32 %v1_14294, i32* %v1_1428c, align 4
  call void @__pseudo_branch(i32 %v4_14298)
  %v0_142b0 = load i32, i32* @r5, align 4
  %v1_142b0 = inttoptr i32 %v0_142b0 to i16*
  %v2_142b0 = load i16, i16* %v1_142b0, align 2
  %v1_142b4 = and i16 %v2_142b0, 24576
  %v1_142b8 = or i16 %v1_142b4, 48
  %v0_142bc = load i32, i32* %sb.global-to-local, align 4
  %v2_142bc = icmp eq i32 %v0_142bc, 0
  store i16 %v1_142b8, i16* %v1_142b0, align 2
  br i1 %v2_142bc, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_142d0 = xor i1 %v2_142bc, true
  call void @__pseudo_cond_branch(i1 %v2_142d0, i32 %v4_14298)
  %v0_142d4 = load i32, i32* @r5, align 4
  %v1_142d4 = inttoptr i32 %v0_142d4 to i16*
  %v2_142d4 = load i16, i16* %v1_142d4, align 2
  %v1_142d8 = and i16 %v2_142d4, 16384
  %v2_142d8 = icmp eq i16 %v1_142d8, 0
  br i1 %v2_142d8, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_142e0 = xor i1 %v2_142d8, true
  call void @__pseudo_cond_branch(i1 %v1_142e0, i32 ptrtoint (i32* @global_var_1241c.22 to i32))
  %v2_142ec = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_142ec)
  call void @__pseudo_branch(i32 %v4_14278)
  %v0_1430c = load i32, i32* @r6, align 4
  %v2_1430c = add i32 %v0_1430c, 48
  %v3_1430c = inttoptr i32 %v2_1430c to i32*
  %v4_1430c = load i32, i32* %v3_1430c, align 4
  %v1_14310 = inttoptr i32 %v4_1430c to i32*
  %v2_14310 = load i32, i32* %v1_14310, align 4
  %v1_14314 = add i32 %v2_14310, 1
  store i32 %v1_14314, i32* %v1_14310, align 4
  call void @__pseudo_branch(i32 %v4_14298)
  %v0_1432c = call i32 @function_149c0()
  %v0_14330 = load i32, i32* %sl.global-to-local, align 4
  %v2_14338 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14338, i32* @r4, align 4
  store i32 %v6_141ac, i32* @r5, align 4
  store i32 %v9_141ac, i32* @r6, align 4
  store i32 %v12_141ac, i32* @r7, align 4
  ret i32 %v0_14330

; uselistorder directives
  uselistorder i1 %v2_142d8, { 1, 0 }
  uselistorder i32 %v4_14298, { 0, 2, 1, 3 }
  uselistorder i32 %v4_141b0, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_109c0, { 31, 27, 26, 25, 30, 24, 29, 28, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_1420c, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_14344(i32 %arg1) local_unnamed_addr {
dec_label_pc_14344:
  %v0_14344 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14344, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_14344
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14344, %bb
  %v10_1435c = phi i32 [ %arg1, %dec_label_pc_14344 ], [ 0, %bb ]
  ret i32 %v10_1435c

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_14360() local_unnamed_addr {
dec_label_pc_14360:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_14370 = call i32 @function_14380()
  ret i32 %v0_14370
}

define i32 @function_14380() local_unnamed_addr {
dec_label_pc_14380:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14380 = load i32, i32* @r4, align 4
  store i32 %v3_14380, i32* %stack_var_-36, align 4
  %v6_14380 = load i32, i32* @r5, align 4
  %v9_14380 = load i32, i32* @r6, align 4
  %v18_14380 = load i32, i32* @sb, align 4
  %v24_14380 = load i32, i32* @fp, align 4
  %v0_14384 = load i32, i32* @r1, align 4
  %v1_14384 = inttoptr i32 %v0_14384 to i8*
  %v2_14384 = load i8, i8* %v1_14384, align 1
  %v3_14384 = zext i8 %v2_14384 to i32
  store i32 %v3_14384, i32* @ip, align 4
  %v7_1438c = icmp eq i8 %v2_14384, 114
  store i32 123612, i32* @fp, align 4
  %v2_14394 = ptrtoint i32* %stack_var_-72 to i32
  %v0_14398 = load i32, i32* @r0, align 4
  store i32 %v0_14398, i32* @r6, align 4
  %v0_1439c = load i32, i32* @r2, align 4
  store i32 %v0_1439c, i32* @sb, align 4
  %v0_143a0 = load i32, i32* @r3, align 4
  store i32 %v0_143a0, i32* @r5, align 4
  br i1 %v7_1438c, label %dec_label_pc_143ec, label %dec_label_pc_143a8

dec_label_pc_143a8:                               ; preds = %dec_label_pc_14380
  %v7_143a8 = icmp eq i8 %v2_14384, 119
  br i1 %v7_143a8, label %bb, label %dec_label_pc_143b4

bb:                                               ; preds = %dec_label_pc_143a8
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_143f0

dec_label_pc_143b4:                               ; preds = %dec_label_pc_143a8
  %v7_143b4 = icmp eq i8 %v2_14384, 97
  br i1 %v7_143b4, label %bb32, label %dec_label_pc_143c0

bb32:                                             ; preds = %dec_label_pc_143b4
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_143f0

dec_label_pc_143c0:                               ; preds = %dec_label_pc_143b4, %dec_label_pc_14474, %dec_label_pc_14448
  %v0_143c0 = call i32 @function_10de8()
  store i32 %v0_143c0, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_143c8 = load i32, i32* @sb, align 4
  %v2_143c8 = icmp eq i32 %v0_143c8, 0
  %v2_143cc = inttoptr i32 %v0_143c0 to i32*
  store i32 22, i32* %v2_143cc, align 4
  br i1 %v2_143c8, label %dec_label_pc_14640, label %dec_label_pc_143d4

dec_label_pc_143d4:                               ; preds = %dec_label_pc_14498._crit_edge, %dec_label_pc_143c0
  %v0_143d4 = load i32, i32* @sb, align 4
  %v1_143d4 = inttoptr i32 %v0_143d4 to i16*
  %v2_143d4 = load i16, i16* %v1_143d4, align 2
  %v3_143d4 = zext i16 %v2_143d4 to i32
  store i32 %v3_143d4, i32* %r3.global-to-local, align 4
  %v1_143d8 = and i32 %v3_143d4, 8192
  %v2_143d8 = icmp eq i32 %v1_143d8, 0
  br i1 %v2_143d8, label %dec_label_pc_14640, label %dec_label_pc_143e0

dec_label_pc_143e0:                               ; preds = %dec_label_pc_143d4
  store i32 %v0_143d4, i32* @r0, align 4
  %v0_143e4 = call i32 @function_1241c()
  store i32 %v0_143e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14640

dec_label_pc_143ec:                               ; preds = %dec_label_pc_14380
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_143f0

dec_label_pc_143f0:                               ; preds = %bb, %bb32, %dec_label_pc_143ec
  %v1_14408 = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_143ec ]
  %v1_143f0 = add i32 %v0_14384, 1
  %v2_143f0 = inttoptr i32 %v1_143f0 to i8*
  %v3_143f0 = load i8, i8* %v2_143f0, align 1
  %v7_143f4 = icmp eq i8 %v3_143f0, 98
  %v1_143f0.v0_14384 = select i1 %v7_143f4, i32 %v1_143f0, i32 %v0_14384
  store i32 %v1_143f0.v0_14384, i32* %r3.global-to-local, align 4
  %v1_14400 = add i32 %v1_143f0.v0_14384, 1
  %v2_14400 = inttoptr i32 %v1_14400 to i8*
  %v3_14400 = load i8, i8* %v2_14400, align 1
  %v4_14400 = zext i8 %v3_14400 to i32
  store i32 %v4_14400, i32* @r3, align 4
  %v7_14404 = icmp eq i8 %v3_14400, 43
  br i1 %v7_14404, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_143f0
  store i32 %v1_14408, i32* @r3, align 4
  %v2_1440c = add nuw nsw i32 %v1_14408, 1
  store i32 %v2_1440c, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_143f0, %bb35
  %v2_14410 = icmp eq i32 %v0_1439c, 0
  br i1 %v2_14410, label %dec_label_pc_14418, label %dec_label_pc_14440

dec_label_pc_14418:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_1441c = call i32 @function_113b0()
  store i32 %v0_1441c, i32* %r0.global-to-local, align 4
  store i32 %v0_1441c, i32* @sb, align 4
  %v3_14420 = icmp eq i32 %v0_1441c, 0
  br i1 %v3_14420, label %dec_label_pc_14644, label %dec_label_pc_14428

dec_label_pc_14428:                               ; preds = %dec_label_pc_14418
  %v2_1442c = add i32 %v0_1441c, 8
  %v3_1442c = inttoptr i32 %v2_1442c to i32*
  store i32 0, i32* %v3_1442c, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_14434 = load i32, i32* @sb, align 4
  %v3_14434 = inttoptr i32 %v2_14434 to i16*
  store i16 8192, i16* %v3_14434, align 2
  %v0_14438 = load i32, i32* @sb, align 4
  %v1_14438 = add i32 %v0_14438, 56
  store i32 %v1_14438, i32* @r0, align 4
  %v1_1443c = call i32 @function_146f0(i32 %v1_14438)
  store i32 %v1_1443c, i32* %r0.global-to-local, align 4
  %v0_14440.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14440

dec_label_pc_14440:                               ; preds = %.thread3, %dec_label_pc_14428
  %v0_14498 = phi i32 [ %v0_143a0, %.thread3 ], [ %v0_14440.pre, %dec_label_pc_14428 ]
  %v1_14440 = icmp slt i32 %v0_14498, 0
  br i1 %v1_14440, label %dec_label_pc_14498, label %dec_label_pc_14448

dec_label_pc_14448:                               ; preds = %dec_label_pc_14440
  %v0_1444c = load i32, i32* @r4, align 4
  %v2_1444c = and i32 %v0_1444c, ptrtoint (i32* @global_var_20003.501 to i32)
  %v1_14450 = or i32 %v2_1444c, 1
  store i32 %v1_14450, i32* %r2.global-to-local, align 4
  %v0_14454 = load i32, i32* @r6, align 4
  %v1_14454 = add i32 %v0_14454, 1
  %v2_14458 = and i32 %v1_14454, %v1_14450
  store i32 %v2_14458, i32* %r3.global-to-local, align 4
  %v9_1445c = icmp eq i32 %v2_14458, %v1_14450
  %v1_14460 = load i32, i32* @sb, align 4
  %v2_14460 = add i32 %v1_14460, 4
  %v3_14460 = inttoptr i32 %v2_14460 to i32*
  store i32 %v0_14498, i32* %v3_14460, align 4
  br i1 %v9_1445c, label %dec_label_pc_14468, label %dec_label_pc_143c0

dec_label_pc_14468:                               ; preds = %dec_label_pc_14448
  %v0_14468 = load i32, i32* @r4, align 4
  %v1_14468 = load i32, i32* @r6, align 4
  %v2_14468 = sub i32 -1, %v1_14468
  %v3_14468 = and i32 %v0_14468, %v2_14468
  store i32 %v3_14468, i32* @r3, align 4
  %v1_1446c = and i32 %v3_14468, 1024
  %v2_1446c = icmp eq i32 %v1_1446c, 0
  br i1 %v2_1446c, label %dec_label_pc_1448c, label %dec_label_pc_14474

dec_label_pc_14474:                               ; preds = %dec_label_pc_14468
  %v0_14474 = load i32, i32* @r5, align 4
  store i32 %v0_14474, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_14480 = call i32 @function_107f4(i32 %v0_14474, i32 4)
  store i32 %v2_14480, i32* %r0.global-to-local, align 4
  %v2_14484 = icmp eq i32 %v2_14480, 0
  br i1 %v2_14484, label %dec_label_pc_14474.dec_label_pc_1448c_crit_edge, label %dec_label_pc_143c0

dec_label_pc_14474.dec_label_pc_1448c_crit_edge:  ; preds = %dec_label_pc_14474
  %v0_1448c.pre = load i32, i32* @r6, align 4
  %v0_14490.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1448c

dec_label_pc_1448c:                               ; preds = %dec_label_pc_14474.dec_label_pc_1448c_crit_edge, %dec_label_pc_14468
  %v0_14490 = phi i32 [ %v0_14490.pre, %dec_label_pc_14474.dec_label_pc_1448c_crit_edge ], [ %v0_14468, %dec_label_pc_14468 ]
  %v0_1448c = phi i32 [ %v0_1448c.pre, %dec_label_pc_14474.dec_label_pc_1448c_crit_edge ], [ %v1_14468, %dec_label_pc_14468 ]
  %v1_1448c = and i32 %v0_1448c, 131072
  store i32 %v1_1448c, i32* %r3.global-to-local, align 4
  %v2_14490 = or i32 %v1_1448c, %v0_14490
  store i32 %v2_14490, i32* @r4, align 4
  br label %dec_label_pc_144bc

dec_label_pc_14498:                               ; preds = %dec_label_pc_14440
  %v7_14498 = icmp eq i32 %v0_14498, -1
  %v0_144a4.pre = load i32, i32* @r4, align 4
  br i1 %v7_14498, label %dec_label_pc_14498._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_14498
  %v2_1449c = or i32 %v0_144a4.pre, ptrtoint (i32* @global_var_20000.502 to i32)
  store i32 %v2_1449c, i32* @r4, align 4
  br label %dec_label_pc_14498._crit_edge

dec_label_pc_14498._crit_edge:                    ; preds = %dec_label_pc_14498, %bb36
  %v0_144a4 = phi i32 [ %v2_1449c, %bb36 ], [ %v0_144a4.pre, %dec_label_pc_14498 ]
  %v0_144a0 = load i32, i32* @r6, align 4
  store i32 %v0_144a0, i32* %r0.global-to-local, align 4
  store i32 %v0_144a4, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_144ac = call i32 @function_105cc(i32 %v0_144a0, i32 %v0_144a4)
  store i32 %v2_144ac, i32* %r0.global-to-local, align 4
  %v1_144b0 = icmp slt i32 %v2_144ac, 0
  %v1_144b4 = load i32, i32* @sb, align 4
  %v2_144b4 = add i32 %v1_144b4, 4
  %v3_144b4 = inttoptr i32 %v2_144b4 to i32*
  store i32 %v2_144ac, i32* %v3_144b4, align 4
  br i1 %v1_144b0, label %dec_label_pc_143d4, label %.dec_label_pc_144bc_crit_edge

.dec_label_pc_144bc_crit_edge:                    ; preds = %dec_label_pc_14498._crit_edge
  %v0_144c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_144bc

dec_label_pc_144bc:                               ; preds = %.dec_label_pc_144bc_crit_edge, %dec_label_pc_1448c
  %v0_144d8 = phi i32 [ %v0_144c0.pre, %.dec_label_pc_144bc_crit_edge ], [ %v2_14490, %dec_label_pc_1448c ]
  %v0_144bc = load i32, i32* @sb, align 4
  %v1_144bc = inttoptr i32 %v0_144bc to i16*
  %v2_144bc = load i16, i16* %v1_144bc, align 2
  %v3_144bc = zext i16 %v2_144bc to i32
  %v1_144c0 = urem i32 %v0_144d8, 4
  %v1_144c4 = and i32 %v0_144d8, 1024
  %v1_144c8 = and i32 %v3_144bc, 8192
  %v1_144cc = add nuw nsw i32 %v1_144c0, 1
  %v2_144d0 = or i32 %v1_144c8, %v1_144c4
  store i32 %v2_144d0, i32* %r3.global-to-local, align 4
  %v1_144d4 = xor i32 %v1_144cc, 3
  store i32 %v1_144d4, i32* %r1.global-to-local, align 4
  %v1_144d8 = and i32 %v0_144d8, ptrtoint (i32* @global_var_20000.502 to i32)
  store i32 %v1_144d8, i32* %r2.global-to-local, align 4
  %v2_144d8 = icmp eq i32 %v1_144d8, 0
  %v1_144dc = add i32 %v0_144bc, 4
  %v2_144dc = inttoptr i32 %v1_144dc to i32*
  %v3_144dc = load i32, i32* %v2_144dc, align 4
  store i32 %v3_144dc, i32* @r5, align 4
  br i1 %v2_144d8, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_144bc
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_144bc, %bb37
  %v0_144e8 = phi i32 [ 0, %dec_label_pc_144bc ], [ 32768, %bb37 ]
  %v4_144e4 = mul nuw nsw i32 %v1_144d4, 16
  %v5_144e4 = or i32 %v2_144d0, %v4_144e4
  store i32 %v5_144e4, i32* %r3.global-to-local, align 4
  %v2_144e8 = or i32 %v0_144e8, %v5_144e4
  store i32 %v2_144e8, i32* %r2.global-to-local, align 4
  %v8_144ec = icmp eq i32 %v3_144dc, 2147483647
  %v1_144f0 = trunc i32 %v2_144e8 to i16
  store i16 %v1_144f0, i16* %v1_144bc, align 2
  br i1 %v8_144ec, label %dec_label_pc_14520, label %dec_label_pc_144f8

dec_label_pc_144f8:                               ; preds = %bb38
  %v0_144f8 = call i32 @function_10de8()
  store i32 %v0_144f8, i32* @r4, align 4
  %v0_14500 = load i32, i32* @r5, align 4
  store i32 %v0_14500, i32* @r0, align 4
  %v1_14504 = inttoptr i32 %v0_144f8 to i32*
  %v2_14504 = load i32, i32* %v1_14504, align 4
  store i32 %v2_14504, i32* @r5, align 4
  %v1_14508 = call i32 @function_156ec(i32 %v0_14500)
  store i32 %v1_14508, i32* %r0.global-to-local, align 4
  %v2_1450c = icmp eq i32 %v1_14508, 0
  br i1 %v2_1450c, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_144f8
  %v1_14510 = load i32, i32* @sb, align 4
  %v2_14510 = inttoptr i32 %v1_14510 to i16*
  %v3_14510 = load i16, i16* %v2_14510, align 2
  %v4_14510 = zext i16 %v3_14510 to i32
  %v2_14514 = or i32 %v4_14510, 256
  store i32 %v2_14514, i32* %r3.global-to-local, align 4
  %v2_14518 = trunc i32 %v2_14514 to i16
  store i16 %v2_14518, i16* %v2_14510, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_144f8, %bb39
  %v0_1451c = load i32, i32* @r5, align 4
  %v1_1451c = load i32, i32* @r4, align 4
  %v2_1451c = inttoptr i32 %v1_1451c to i32*
  store i32 %v0_1451c, i32* %v2_1451c, align 4
  br label %dec_label_pc_14520

dec_label_pc_14520:                               ; preds = %bb38, %.thread5
  %v0_14520 = load i32, i32* @sb, align 4
  %v1_14520 = add i32 %v0_14520, 8
  %v2_14520 = inttoptr i32 %v1_14520 to i32*
  %v3_14520 = load i32, i32* %v2_14520, align 4
  store i32 %v3_14520, i32* %r3.global-to-local, align 4
  %v2_14524 = icmp eq i32 %v3_14520, 0
  br i1 %v2_14524, label %dec_label_pc_1452c, label %bb40

dec_label_pc_1452c:                               ; preds = %dec_label_pc_14520
  store i32 4096, i32* @r0, align 4
  %v0_14530 = call i32 @function_113b0()
  store i32 %v0_14530, i32* %r0.global-to-local, align 4
  %v2_14534 = icmp eq i32 %v0_14530, 0
  %v1_14544.pre = load i32, i32* @sb, align 4
  br i1 %v2_14534, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1452c
  %v2_14538 = inttoptr i32 %v1_14544.pre to i16*
  %v3_14538 = load i16, i16* %v2_14538, align 2
  %v4_14538 = zext i16 %v3_14538 to i32
  %v2_1453c = add i32 %v0_14530, 4096
  store i32 %v2_1453c, i32* %r2.global-to-local, align 4
  %v2_14540 = or i32 %v4_14538, 16384
  store i32 %v2_14540, i32* %r3.global-to-local, align 4
  %v2_14544 = add i32 %v1_14544.pre, 8
  %v3_14544 = inttoptr i32 %v2_14544 to i32*
  store i32 %v0_14530, i32* %v3_14544, align 4
  %v1_14548 = load i32, i32* %r2.global-to-local, align 4
  %v2_14548 = load i32, i32* @sb, align 4
  %v3_14548 = add i32 %v2_14548, 12
  %v4_14548 = inttoptr i32 %v3_14548 to i32*
  store i32 %v1_14548, i32* %v4_14548, align 4
  %v1_1454c = load i32, i32* %r3.global-to-local, align 4
  %v2_1454c = trunc i32 %v1_1454c to i16
  %v3_1454c = load i32, i32* @sb, align 4
  %v4_1454c = inttoptr i32 %v3_1454c to i16*
  store i16 %v2_1454c, i16* %v4_1454c, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_1452c
  %v2_1454419 = add i32 %v1_14544.pre, 8
  %v3_1454420 = inttoptr i32 %v2_1454419 to i32*
  store i32 0, i32* %v3_1454420, align 4
  %v2_14550 = load i32, i32* @sb, align 4
  %v3_14550 = add i32 %v2_14550, 12
  %v4_14550 = inttoptr i32 %v3_14550 to i32*
  store i32 0, i32* %v4_14550, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_14520, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_1455c = load i32, i32* @fp, align 4
  %v2_1455c = add i32 %v0_1455c, 56
  %v3_1455c = inttoptr i32 %v2_1455c to i32*
  %v4_1455c = load i32, i32* %v3_1455c, align 4
  store i32 %v4_1455c, i32* %r3.global-to-local, align 4
  %v2_14560 = load i32, i32* @sb, align 4
  %v3_14560 = add i32 %v2_14560, 2
  %v4_14560 = inttoptr i32 %v3_14560 to i8*
  store i8 0, i8* %v4_14560, align 1
  %v0_14564 = load i32, i32* @sb, align 4
  %v1_14564 = inttoptr i32 %v0_14564 to i16*
  %v2_14564 = load i16, i16* %v1_14564, align 2
  %v3_14564 = zext i16 %v2_14564 to i32
  store i32 %v3_14564, i32* %r2.global-to-local, align 4
  %v0_14568 = load i32, i32* %r3.global-to-local, align 4
  %v1_14568 = inttoptr i32 %v0_14568 to i32*
  %v2_14568 = load i32, i32* %v1_14568, align 4
  store i32 %v2_14568, i32* %r1.global-to-local, align 4
  %v1_1456c = add i32 %v0_14564, 8
  %v2_1456c = inttoptr i32 %v1_1456c to i32*
  %v3_1456c = load i32, i32* %v2_1456c, align 4
  store i32 %v3_1456c, i32* %r3.global-to-local, align 4
  %v1_14570 = and i32 %v3_14564, 8192
  %v2_14570 = icmp eq i32 %v1_14570, 0
  %v2_14574 = add i32 %v0_14564, 20
  %v3_14574 = inttoptr i32 %v2_14574 to i32*
  store i32 %v3_1456c, i32* %v3_14574, align 4
  %v0_14578 = load i32, i32* %r0.global-to-local, align 4
  %v1_14578 = load i32, i32* @sb, align 4
  %v2_14578 = add i32 %v1_14578, 44
  %v3_14578 = inttoptr i32 %v2_14578 to i32*
  store i32 %v0_14578, i32* %v3_14578, align 4
  %v0_1457c = load i32, i32* %r1.global-to-local, align 4
  %v1_1457c = load i32, i32* @sb, align 4
  %v2_1457c = add i32 %v1_1457c, 52
  %v3_1457c = inttoptr i32 %v2_1457c to i32*
  store i32 %v0_1457c, i32* %v3_1457c, align 4
  %v0_14580 = load i32, i32* %r3.global-to-local, align 4
  %v1_14580 = load i32, i32* @sb, align 4
  %v2_14580 = add i32 %v1_14580, 24
  %v3_14580 = inttoptr i32 %v2_14580 to i32*
  store i32 %v0_14580, i32* %v3_14580, align 4
  %v0_14584 = load i32, i32* %r3.global-to-local, align 4
  %v1_14584 = load i32, i32* @sb, align 4
  %v2_14584 = add i32 %v1_14584, 28
  %v3_14584 = inttoptr i32 %v2_14584 to i32*
  store i32 %v0_14584, i32* %v3_14584, align 4
  %v0_14588 = load i32, i32* %r3.global-to-local, align 4
  %v1_14588 = load i32, i32* @sb, align 4
  %v2_14588 = add i32 %v1_14588, 16
  %v3_14588 = inttoptr i32 %v2_14588 to i32*
  store i32 %v0_14588, i32* %v3_14588, align 4
  br i1 %v2_14570, label %dec_label_pc_14644, label %dec_label_pc_14590

dec_label_pc_14590:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_14594 = load i32, i32* @fp, align 4
  %v2_14594 = add i32 %v0_14594, 36
  %v3_14594 = inttoptr i32 %v2_14594 to i32*
  %v4_14594 = load i32, i32* %v3_14594, align 4
  store i32 %v4_14594, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_1459c = add i32 %v0_14594, 108
  %v3_1459c = inttoptr i32 %v2_1459c to i32*
  %v4_1459c = load i32, i32* %v3_1459c, align 4
  store i32 %v4_1459c, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_145a4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_145a8 = add i32 %v0_14594, 72
  %v3_145a8 = inttoptr i32 %v2_145a8 to i32*
  %v4_145a8 = load i32, i32* %v3_145a8, align 4
  store i32 %v4_14594, i32* %r1.global-to-local, align 4
  store i32 %v4_1459c, i32* %r2.global-to-local, align 4
  store i32 %v2_145a4, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_145a8)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_145c4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_145c4, i32* %r0.global-to-local, align 4
  %v0_145c8 = load i32, i32* @fp, align 4
  %v2_145c8 = add i32 %v0_145c8, 16
  %v3_145c8 = inttoptr i32 %v2_145c8 to i32*
  %v4_145c8 = load i32, i32* %v3_145c8, align 4
  call void @__pseudo_branch(i32 %v4_145c8)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_145d8 = load i32, i32* @fp, align 4
  %v2_145d8 = add i32 %v0_145d8, 96
  %v3_145d8 = inttoptr i32 %v2_145d8 to i32*
  %v4_145d8 = load i32, i32* %v3_145d8, align 4
  store i32 %v4_145d8, i32* %r4.global-to-local, align 4
  %v0_145dc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_145dc, i32* %r1.global-to-local, align 4
  store i32 %v4_145d8, i32* %r2.global-to-local, align 4
  store i32 %v2_14394, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_145a8)
  store i32 %v4_145d8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_145c8)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_14600 = load i32, i32* @fp, align 4
  %v2_14600 = add i32 %v0_14600, 44
  %v3_14600 = inttoptr i32 %v2_14600 to i32*
  %v4_14600 = load i32, i32* %v3_14600, align 4
  store i32 %v4_14600, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_14608 = inttoptr i32 %v4_14600 to i32*
  %v2_14608 = load i32, i32* %v1_14608, align 4
  store i32 %v2_14608, i32* %r2.global-to-local, align 4
  store i32 %v2_14394, i32* %r0.global-to-local, align 4
  %v1_14610 = load i32, i32* @sb, align 4
  %v2_14610 = add i32 %v1_14610, 32
  %v3_14610 = inttoptr i32 %v2_14610 to i32*
  store i32 %v2_14608, i32* %v3_14610, align 4
  %v0_14614 = load i32, i32* @fp, align 4
  %v1_14614 = load i32, i32* %r3.global-to-local, align 4
  %v2_14614 = add i32 %v1_14614, %v0_14614
  %v3_14614 = inttoptr i32 %v2_14614 to i32*
  %v4_14614 = load i32, i32* %v3_14614, align 4
  store i32 %v4_14614, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_1461c = load i32, i32* @sb, align 4
  %v1_1461c = load i32, i32* @ip, align 4
  %v2_1461c = inttoptr i32 %v1_1461c to i32*
  store i32 %v0_1461c, i32* %v2_1461c, align 4
  call void @__pseudo_branch(i32 %v4_14614)
  store i32 %v2_145a4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14614)
  br label %dec_label_pc_14644

dec_label_pc_14640:                               ; preds = %dec_label_pc_143d4, %dec_label_pc_143c0, %dec_label_pc_143e0
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_14644

dec_label_pc_14644:                               ; preds = %dec_label_pc_14418, %bb40, %dec_label_pc_14590, %dec_label_pc_14640
  %v0_14644 = load i32, i32* @sb, align 4
  store i32 %v0_14644, i32* %r0.global-to-local, align 4
  %v2_1464c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1464c, i32* %r4.global-to-local, align 4
  store i32 %v6_14380, i32* @r5, align 4
  store i32 %v9_14380, i32* @r6, align 4
  store i32 %v18_14380, i32* @sb, align 4
  store i32 %v24_14380, i32* @fp, align 4
  ret i32 %v0_14644

; uselistorder directives
  uselistorder i32 %v1_14544.pre, { 2, 1, 0 }
  uselistorder i32 %v0_14530, { 1, 0, 2, 3 }
  uselistorder i32 %v0_144d8, { 1, 2, 0 }
  uselistorder i32 %v0_144a4, { 1, 0 }
  uselistorder i32 %v1_14468, { 1, 0 }
  uselistorder i32 %v0_14468, { 1, 0 }
  uselistorder i32 %v1_14450, { 1, 0, 2 }
  uselistorder i32 %v1_14408, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 0, 1, 2, 3, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 0, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 7, 9, 8, 11, 10, 12, 13, 14, 15, 16, 17, 1, 0, 3, 2, 18, 4, 5, 6 }
  uselistorder i32 16384, { 50, 0, 51, 38, 68, 39, 69, 40, 70, 41, 71, 42, 72, 43, 73, 18, 74, 17, 62, 3, 52, 36, 53, 4, 54, 37, 55, 5, 56, 6, 57, 7, 58, 8, 59, 9, 60, 10, 61, 35, 63, 11, 64, 12, 65, 13, 66, 14, 67, 44, 75, 15, 76, 16, 77, 78, 46, 79, 47, 80, 21, 81, 45, 82, 19, 83, 20, 84, 22, 85, 23, 86, 25, 87, 24, 88, 27, 89, 26, 90, 28, 91, 29, 92, 30, 93, 31, 94, 32, 95, 48, 96, 33, 1, 49, 97, 34, 2 }
  uselistorder i32 4096, { 8, 9, 10, 1, 0, 2, 17, 3, 11, 4, 12, 13, 6, 14, 5, 7, 15, 16 }
  uselistorder i32 32768, { 1, 4, 2, 0, 3 }
  uselistorder i32 (i32, i32)* @function_105cc, { 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_107f4, { 12, 0, 11, 8, 7, 10, 9, 6, 5, 2, 1, 4, 3 }
  uselistorder i32 1024, { 2, 3, 4, 5, 0, 1, 6 }
  uselistorder i32 ()* @function_113b0, { 6, 43, 42, 4, 3, 2, 0, 1, 8, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 7, 5 }
  uselistorder i32 80, { 5, 2, 3, 4, 0, 1, 6 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @function_1241c, { 10, 9, 5, 4, 3, 2, 0, 1, 8, 7, 6 }
  uselistorder i32* @fp, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 94, 81, 82, 83, 84, 85, 87, 86, 88, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 77, 78, 80, 89, 92, 90, 91, 93, 54, 55, 56, 57 }
  uselistorder i32* @sb, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 130, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 121, 122, 124, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 51, 52, 1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 125, 126, 127, 128, 129, 79, 80, 81, 82 }
  uselistorder label %dec_label_pc_14644, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_14640, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14520, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_14498._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_14440, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_143f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_143c0, { 1, 2, 0 }
}

define i32 @function_14658(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14658:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_14658 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14658, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_14658
  %v1_14660 = load i32, i32* %r2.global-to-local, align 4
  %v2_14660 = load i32, i32* %r3.global-to-local, align 4
  %v3_14660 = and i32 %v2_14660, %v1_14660
  %v2_14664 = trunc i32 %v3_14660 to i16
  %v4_14664 = inttoptr i32 %v3_14660 to i16*
  store i16 %v2_14664, i16* %v4_14664, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_14658, %bb
  %v0_1468c = call i32 @function_10de8()
  store i32 %v0_1468c, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_14698 = inttoptr i32 %v0_1468c to i32*
  %v2_14698 = load i32, i32* %v1_14698, align 4
  store i32 %v2_14698, i32* @r6, align 4
  %v1_1469c = call i32 @function_156ec(i32 0)
  %v2_146a4 = icmp eq i32 %v1_1469c, 0
  store i32 123612, i32* @r4, align 4
  br i1 %v2_146a4, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 300, i32* %r2.global-to-local, align 4
  %v5_146b0 = load i16, i16* inttoptr (i32 123912 to i16*), align 8
  %v7_146b0 = zext i16 %v5_146b0 to i32
  %v2_146b4 = xor i32 %v7_146b0, 256
  store i32 %v2_146b4, i32* @r3, align 4
  %v2_146b8 = trunc i32 %v2_146b4 to i16
  store i16 %v2_146b8, i16* inttoptr (i32 123912 to i16*), align 8
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_146c0 = call i32 @function_156ec(i32 1)
  %v2_146c4 = icmp eq i32 %v1_146c0, 0
  br i1 %v2_146c4, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_146cc = load i32, i32* @r4, align 4
  %v3_146cc = add i32 %v1_146cc, 300
  store i32 %v3_146cc, i32* %r2.global-to-local, align 4
  %v2_146d0 = add i32 %v1_146cc, 380
  %v3_146d0 = inttoptr i32 %v2_146d0 to i16*
  %v4_146d0 = load i16, i16* %v3_146d0, align 2
  %v5_146d0 = zext i16 %v4_146d0 to i32
  %v2_146d4 = xor i32 %v5_146d0, 256
  store i32 %v2_146d4, i32* %r3.global-to-local, align 4
  %v2_146d8 = trunc i32 %v2_146d4 to i16
  store i16 %v2_146d8, i16* %v3_146d0, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_146dc = load i32, i32* @r6, align 4
  %v1_146dc = load i32, i32* @r5, align 4
  %v2_146dc = inttoptr i32 %v1_146dc to i32*
  store i32 %v0_146dc, i32* %v2_146dc, align 4
  ret i32 %v1_146c0

; uselistorder directives
  uselistorder i32 %v3_14660, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_156ec, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_146f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_146f0:
  store i32 123612, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_162b4.517 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_1470c = call i32 @function_10ef0()
  ret i32 %v0_1470c
}

define i32 @function_147f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_147f8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_147f8 = load i32, i32* @r4, align 4
  store i32 %v3_147f8, i32* %stack_var_-8, align 4
  %v1_147fc = add i32 %arg1, 8
  %v2_147fc = inttoptr i32 %v1_147fc to i32*
  %v3_147fc = load i32, i32* %v2_147fc, align 4
  %v1_14800 = add i32 %arg1, 16
  %v2_14800 = inttoptr i32 %v1_14800 to i32*
  %v3_14800 = load i32, i32* %v2_14800, align 4
  %v9_14804 = icmp eq i32 %v3_14800, %v3_147fc
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_14804, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_147f8
  store i32 %v3_147fc, i32* %v2_14800, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_147f8, %bb
  %v1_14810 = xor i1 %v9_14804, true
  call void @__pseudo_cond_branch(i1 %v1_14810, i32 ptrtoint (i32* @global_var_15ad8.518 to i32))
  %v0_14814 = load i32, i32* %r4.global-to-local, align 4
  %v1_14814 = add i32 %v0_14814, 8
  %v2_14814 = inttoptr i32 %v1_14814 to i32*
  %v3_14814 = load i32, i32* %v2_14814, align 4
  %v1_14818 = add i32 %v0_14814, 16
  %v2_14818 = inttoptr i32 %v1_14818 to i32*
  %v3_14818 = load i32, i32* %v2_14818, align 4
  %v2_1481c = sub i32 %v3_14818, %v3_14814
  %v2_14820 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14820, i32* @r4, align 4
  ret i32 %v2_1481c

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_14828(i32 %arg1) local_unnamed_addr {
dec_label_pc_14828:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14828 = load i32, i32* @r4, align 4
  store i32 %v3_14828, i32* %stack_var_-16, align 4
  %v6_14828 = load i32, i32* @r5, align 4
  %v12_14828 = load i32, i32* @lr, align 4
  %v1_1482c = add i32 %arg1, 52
  %v2_1482c = inttoptr i32 %v1_1482c to i32*
  %v3_1482c = load i32, i32* %v2_1482c, align 4
  %v2_14834 = icmp eq i32 %v3_1482c, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 123612, i32* %r6.global-to-local, align 4
  br i1 %v2_14834, label %dec_label_pc_1486c, label %dec_label_pc_14848

dec_label_pc_14848:                               ; preds = %dec_label_pc_14828
  %v1_14848 = add i32 %arg1, 16
  %v2_14848 = inttoptr i32 %v1_14848 to i32*
  %v3_14848 = load i32, i32* %v2_14848, align 4
  %v1_1484c = add i32 %arg1, 24
  %v2_1484c = inttoptr i32 %v1_1484c to i32*
  %v3_1484c = load i32, i32* %v2_1484c, align 4
  %v3_14850 = icmp ult i32 %v3_14848, %v3_1484c
  br i1 %v3_14850, label %.thread, label %dec_label_pc_14860

.thread:                                          ; preds = %dec_label_pc_14848
  %v2_14854 = inttoptr i32 %v3_14848 to i8*
  %v3_14854 = load i8, i8* %v2_14854, align 1
  %v4_14854 = zext i8 %v3_14854 to i32
  store i32 %v4_14854, i32* %r4.global-to-local, align 4
  %v6_14854 = add i32 %v3_14848, 1
  store i32 %v6_14854, i32* %v2_14848, align 4
  br label %dec_label_pc_148e0

dec_label_pc_14860:                               ; preds = %dec_label_pc_14848
  %v1_14860 = inttoptr i32 %arg1 to i16*
  %v2_14860 = call i32 @function_14d54(i16* %v1_14860)
  store i32 %v2_14860, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_148e0

dec_label_pc_1486c:                               ; preds = %dec_label_pc_14828
  %v1_14870 = add i32 %arg1, 56
  store i32 %v1_14870, i32* @r4, align 4
  %v4_14884 = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_14884)
  %v0_14898 = load i32, i32* %r6.global-to-local, align 4
  %v2_14898 = add i32 %v0_14898, 16
  %v3_14898 = inttoptr i32 %v2_14898 to i32*
  %v4_14898 = load i32, i32* %v3_14898, align 4
  store i32 84132, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14898)
  %v0_148a4 = load i32, i32* @r5, align 4
  %v1_148a4 = add i32 %v0_148a4, 16
  %v2_148a4 = inttoptr i32 %v1_148a4 to i32*
  %v3_148a4 = load i32, i32* %v2_148a4, align 4
  %v1_148a8 = add i32 %v0_148a4, 24
  %v2_148a8 = inttoptr i32 %v1_148a8 to i32*
  %v3_148a8 = load i32, i32* %v2_148a8, align 4
  %v3_148ac = icmp ult i32 %v3_148a4, %v3_148a8
  br i1 %v3_148ac, label %.thread2, label %dec_label_pc_148bc

.thread2:                                         ; preds = %dec_label_pc_1486c
  %v2_148b0 = inttoptr i32 %v3_148a4 to i8*
  %v3_148b0 = load i8, i8* %v2_148b0, align 1
  %v4_148b0 = zext i8 %v3_148b0 to i32
  store i32 %v4_148b0, i32* %r4.global-to-local, align 4
  %v6_148b0 = add i32 %v3_148a4, 1
  store i32 %v6_148b0, i32* %v2_148a4, align 4
  br label %dec_label_pc_148c8

dec_label_pc_148bc:                               ; preds = %dec_label_pc_1486c
  %v1_148c0 = inttoptr i32 %v0_148a4 to i16*
  %v2_148c0 = call i32 @function_14d54(i16* %v1_148c0)
  store i32 %v2_148c0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_148c8

dec_label_pc_148c8:                               ; preds = %.thread2, %dec_label_pc_148bc
  %v0_148d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_148d4 = add i32 %v0_148d4, 24
  %v3_148d4 = inttoptr i32 %v2_148d4 to i32*
  %v4_148d4 = load i32, i32* %v3_148d4, align 4
  store i32 %v4_148d4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_148d4)
  br label %dec_label_pc_148e0

dec_label_pc_148e0:                               ; preds = %.thread, %dec_label_pc_14860, %dec_label_pc_148c8
  %v0_148e0 = load i32, i32* %r4.global-to-local, align 4
  %v2_148e8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_148e8, i32* @r4, align 4
  store i32 %v6_14828, i32* @r5, align 4
  store i32 %v12_14828, i32* @lr, align 4
  ret i32 %v0_148e0

; uselistorder directives
  uselistorder i32 %v3_148a4, { 1, 0, 2 }
  uselistorder i32 %v3_14848, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 2, 1, 5, 4, 3, 0 }
  uselistorder label %dec_label_pc_148e0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_148c8, { 1, 0 }
}

define i32 @function_148f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_148f4:
  %v0_148f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_148f4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_148f4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_148f4, %bb
  %v10_14900 = phi i32 [ %arg1, %dec_label_pc_148f4 ], [ 0, %bb ]
  ret i32 %v10_14900

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14904(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14904:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_14904 = load i32, i32* @r4, align 4
  store i32 %v3_14904, i32* %stack_var_-28, align 4
  %v6_14904 = load i32, i32* @r5, align 4
  %v9_14904 = load i32, i32* @r6, align 4
  %v12_14904 = load i32, i32* @r7, align 4
  %v21_14904 = load i32, i32* @lr, align 4
  %v1_14908 = add i32 %arg3, 52
  %v2_14908 = inttoptr i32 %v1_14908 to i32*
  %v3_14908 = load i32, i32* %v2_14908, align 4
  %v1_14910 = sub i32 1, %v3_14908
  %v2_14910 = icmp ult i32 %v3_14908, 2
  br i1 %v2_14910, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_14904
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_14904, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_14910, %dec_label_pc_14904 ]
  %v0_14918 = phi i32 [ 0, %bb ], [ %v1_14910, %dec_label_pc_14904 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_14918 = icmp eq i32 %v0_14918, 0
  store i32 123612, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_14918, label %dec_label_pc_1496c, label %dec_label_pc_14934

dec_label_pc_14934:                               ; preds = %bb16
  %v1_14938 = add i32 %arg3, 56
  store i32 %v1_14938, i32* @r4, align 4
  %v4_1494c = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_1494c)
  %v0_14960 = load i32, i32* @r5, align 4
  %v2_14960 = add i32 %v0_14960, 16
  %v3_14960 = inttoptr i32 %v2_14960 to i32*
  %v4_14960 = load i32, i32* %v3_14960, align 4
  store i32 %v4_14960, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_1496c.528 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14960)
  %v0_1496c.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_14970.pre = load i32, i32* @r7, align 4
  %v0_14974.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1496c

dec_label_pc_1496c:                               ; preds = %bb16, %dec_label_pc_14934
  %v0_14974 = phi i32 [ %arg3, %bb16 ], [ %v0_14974.pre, %dec_label_pc_14934 ]
  %v0_14970 = phi i32 [ %arg2, %bb16 ], [ %v0_14970.pre, %dec_label_pc_14934 ]
  %v0_1496c = phi i32 [ %arg1, %bb16 ], [ %v0_1496c.pre, %dec_label_pc_14934 ]
  %v3_14978 = inttoptr i32 %v0_1496c to i8*
  %v4_14978 = call i32 @function_14e80(i8* %v3_14978, i32 %v0_14970, i32 %v0_14974)
  %v0_1497c = load i32, i32* %sl.global-to-local, align 4
  %v2_1497c = icmp eq i32 %v0_1497c, 0
  store i32 %v4_14978, i32* %r4.global-to-local, align 4
  br i1 %v2_1497c, label %dec_label_pc_1496c..thread3_crit_edge, label %bb17

dec_label_pc_1496c..thread3_crit_edge:            ; preds = %dec_label_pc_1496c
  %v0_14998.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_1496c
  %v1_14990 = load i32, i32* @r5, align 4
  %v3_14990 = add i32 %v1_14990, 24
  %v4_14990 = inttoptr i32 %v3_14990 to i32*
  %v5_14990 = load i32, i32* %v4_14990, align 4
  store i32 %v5_14990, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1496c..thread3_crit_edge, %bb17
  %v0_14998 = phi i32 [ %v0_14998.pre, %dec_label_pc_1496c..thread3_crit_edge ], [ %v5_14990, %bb17 ]
  %v2_14998 = xor i1 %v2_1497c, true
  call void @__pseudo_cond_branch(i1 %v2_14998, i32 %v0_14998)
  %v0_1499c = load i32, i32* %r4.global-to-local, align 4
  %v2_149a4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_149a4, i32* %r4.global-to-local, align 4
  store i32 %v6_14904, i32* @r5, align 4
  store i32 %v9_14904, i32* @r6, align 4
  store i32 %v12_14904, i32* @r7, align 4
  store i32 %v21_14904, i32* @lr, align 4
  ret i32 %v0_1499c

; uselistorder directives
  uselistorder i32 %v3_14908, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 9, 10, 11, 12, 13, 3, 14, 7, 8, 4, 16, 17, 1, 18, 0, 19, 20, 5, 6, 15, 2 }
  uselistorder i32 %arg3, { 0, 3, 1, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1496c, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_149b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_149b0:
  %v0_149b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_149b0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_149b0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_149b0, %bb
  %v10_149bc = phi i32 [ %arg1, %dec_label_pc_149b0 ], [ 0, %bb ]
  ret i32 %v10_149bc

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_149c0() local_unnamed_addr {
dec_label_pc_149c0:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_149c0 = load i32, i32* @r4, align 4
  store i32 %v3_149c0, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %r6.global-to-local, align 4
  %v4_149d0 = load i32, i32* inttoptr (i32 123648 to i32*), align 256
  store i32 %v4_149d0, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_149d8 = load i32, i32* inttoptr (i32 123720 to i32*), align 8
  store i32 %v4_149d8, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_149e4 = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  store i32 %v4_149e4, i32* %r7.global-to-local, align 4
  %v2_149f0 = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_149e4)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14a04 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a04 = add i32 %v0_14a04, 16
  %v3_14a04 = inttoptr i32 %v2_14a04 to i32*
  %v4_14a04 = load i32, i32* %v3_14a04, align 4
  store i32 %v4_14a04, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a04)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_14a14 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a14 = add i32 %v0_14a14, 12
  %v3_14a14 = inttoptr i32 %v2_14a14 to i32*
  %v4_14a14 = load i32, i32* %v3_14a14, align 4
  store i32 %v4_14a14, i32* %r3.global-to-local, align 4
  %v1_14a18 = inttoptr i32 %v4_14a14 to i32*
  %v2_14a18 = load i32, i32* %v1_14a18, align 4
  store i32 %v2_14a18, i32* %r3.global-to-local, align 4
  %v7_14a1c = icmp eq i32 %v2_14a18, 1
  br i1 %v7_14a1c, label %dec_label_pc_14a24, label %dec_label_pc_14ae4

dec_label_pc_14a24:                               ; preds = %dec_label_pc_149c0
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_14a28 = add i32 %v0_14a14, 48
  %v3_14a28 = inttoptr i32 %v2_14a28 to i32*
  %v4_14a28 = load i32, i32* %v3_14a28, align 4
  store i32 %v4_14a28, i32* %r3.global-to-local, align 4
  %v1_14a2c = inttoptr i32 %v4_14a28 to i32*
  %v2_14a2c = load i32, i32* %v1_14a2c, align 4
  store i32 %v2_14a2c, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_14a2c, 1
  br i1 %tmp30, label %dec_label_pc_14ae4, label %dec_label_pc_14a38

dec_label_pc_14a38:                               ; preds = %dec_label_pc_14a24
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_14a3c = add i32 %v0_14a14, 96
  %v3_14a3c = inttoptr i32 %v2_14a3c to i32*
  %v4_14a3c = load i32, i32* %v3_14a3c, align 4
  store i32 %v4_14a3c, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_149e4)
  call void @__pseudo_branch(i32 %v4_14a04)
  %v0_14a64 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a64 = add i32 %v0_14a64, 44
  %v3_14a64 = inttoptr i32 %v2_14a64 to i32*
  %v4_14a64 = load i32, i32* %v3_14a64, align 4
  store i32 %v4_14a64, i32* %r3.global-to-local, align 4
  %v1_14a68 = inttoptr i32 %v4_14a64 to i32*
  %v2_14a68 = load i32, i32* %v1_14a68, align 4
  store i32 %v2_14a68, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_14ab411 = icmp eq i32 %v2_14a68, 0
  br i1 %v2_14ab411, label %dec_label_pc_14ac0, label %dec_label_pc_14a78

dec_label_pc_14a78:                               ; preds = %dec_label_pc_14a38, %dec_label_pc_14ab0
  %v0_14a9c2 = phi i32 [ %v0_14ab0, %dec_label_pc_14ab0 ], [ %v2_14a68, %dec_label_pc_14a38 ]
  %v1_14a78 = inttoptr i32 %v0_14a9c2 to i16*
  %v2_14a78 = load i16, i16* %v1_14a78, align 2
  %v3_14a78 = zext i16 %v2_14a78 to i32
  store i32 %v3_14a78, i32* %r3.global-to-local, align 4
  %v2_14a7c = and i32 %v3_14a78, 32816
  %v7_14a80 = icmp eq i32 %v2_14a7c, 48
  %v1_14a84 = add i32 %v0_14a9c2, 32
  %v2_14a84 = inttoptr i32 %v1_14a84 to i32*
  %v3_14a84 = load i32, i32* %v2_14a84, align 4
  store i32 %v3_14a84, i32* %r5.global-to-local, align 4
  br i1 %v7_14a80, label %dec_label_pc_14a90, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_14a78
  store i32 %v0_14a9c2, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14ab0

dec_label_pc_14a90:                               ; preds = %dec_label_pc_14a78
  %v0_14a90 = load i32, i32* %r7.global-to-local, align 4
  %v2_14a90 = icmp eq i32 %v0_14a90, 0
  br i1 %v2_14a90, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_14a90
  %v1_14a94 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a94 = load i32, i32* %r8.global-to-local, align 4
  %v3_14a94 = add i32 %v2_14a94, %v1_14a94
  %v4_14a94 = inttoptr i32 %v3_14a94 to i32*
  %v5_14a94 = load i32, i32* %v4_14a94, align 4
  store i32 %v5_14a94, i32* %r3.global-to-local, align 4
  %v3_14a98 = inttoptr i32 %v5_14a94 to i32*
  store i32 %v3_14a84, i32* %v3_14a98, align 4
  %v0_14a9c = load i32, i32* %r4.global-to-local, align 4
  %v1_14a9c = inttoptr i32 %v0_14a9c to i16*
  %v2_14a9c = load i16, i16* %v1_14a9c, align 2
  %v3_14a9c = zext i16 %v2_14a9c to i32
  store i32 %v3_14a9c, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_14a90
  %v2_14a9c8 = load i16, i16* %v1_14a78, align 2
  %v3_14a9c9 = zext i16 %v2_14a9c8 to i32
  store i32 %v3_14a9c9, i32* %r3.global-to-local, align 4
  %v3_14aa0 = add i32 %v0_14a90, 32
  %v4_14aa0 = inttoptr i32 %v3_14aa0 to i32*
  store i32 %v3_14a84, i32* %v4_14aa0, align 4
  %v0_14aa4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_14aa4 = phi i32 [ %v3_14a9c, %.thread ], [ %v0_14aa4.pre, %bb ]
  %v1_14aa4 = and i32 %v0_14aa4, 8192
  %v2_14aa4 = icmp eq i32 %v1_14aa4, 0
  br i1 %v2_14aa4, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_14aac = xor i1 %v2_14aa4, true
  call void @__pseudo_cond_branch(i1 %v1_14aac, i32 ptrtoint (i32* @global_var_1241c.22 to i32))
  %v0_14ab0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14ab0

dec_label_pc_14ab0:                               ; preds = %.thread21, %bb33
  %v0_14ab0 = phi i32 [ %v0_14ab0.pre, %bb33 ], [ %v3_14a84, %.thread21 ]
  store i32 %v0_14ab0, i32* %r4.global-to-local, align 4
  %v2_14ab4 = icmp eq i32 %v0_14ab0, 0
  br i1 %v2_14ab4, label %dec_label_pc_14ab4.dec_label_pc_14ac0_crit_edge, label %dec_label_pc_14a78

dec_label_pc_14ab4.dec_label_pc_14ac0_crit_edge:  ; preds = %dec_label_pc_14ab0
  %v0_14acc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14ac0

dec_label_pc_14ac0:                               ; preds = %dec_label_pc_14ab4.dec_label_pc_14ac0_crit_edge, %dec_label_pc_14a38
  %v0_14acc = phi i32 [ %v0_14acc.pre, %dec_label_pc_14ab4.dec_label_pc_14ac0_crit_edge ], [ %v0_14a64, %dec_label_pc_14a38 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_14acc = add i32 %v0_14acc, 24
  %v3_14acc = inttoptr i32 %v2_14acc to i32*
  %v4_14acc = load i32, i32* %v3_14acc, align 4
  call void @__pseudo_branch(i32 %v4_14acc)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_14adc = load i32, i32* %r6.global-to-local, align 4
  %v2_14adc = add i32 %v0_14adc, 48
  %v3_14adc = inttoptr i32 %v2_14adc to i32*
  %v4_14adc = load i32, i32* %v3_14adc, align 4
  store i32 %v4_14adc, i32* %r3.global-to-local, align 4
  %v0_14ae0 = load i32, i32* %r4.global-to-local, align 4
  %v2_14ae0 = inttoptr i32 %v4_14adc to i32*
  store i32 %v0_14ae0, i32* %v2_14ae0, align 4
  %v0_14ae8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14ae4

dec_label_pc_14ae4:                               ; preds = %dec_label_pc_149c0, %dec_label_pc_14a24, %dec_label_pc_14ac0
  %v0_14ae8 = phi i32 [ %v0_14a14, %dec_label_pc_149c0 ], [ %v0_14a14, %dec_label_pc_14a24 ], [ %v0_14ae8.pre, %dec_label_pc_14ac0 ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14ae8 = add i32 %v0_14ae8, 12
  %v3_14ae8 = inttoptr i32 %v2_14ae8 to i32*
  %v4_14ae8 = load i32, i32* %v3_14ae8, align 4
  %v1_14aec = inttoptr i32 %v4_14ae8 to i32*
  %v2_14aec = load i32, i32* %v1_14aec, align 4
  %v1_14af0 = add i32 %v2_14aec, -1
  store i32 %v1_14af0, i32* %v1_14aec, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_14b04 = load i32, i32* %r6.global-to-local, align 4
  %v2_14b04 = add i32 %v0_14b04, 24
  %v3_14b04 = inttoptr i32 %v2_14b04 to i32*
  %v4_14b04 = load i32, i32* %v3_14b04, align 4
  call void @__pseudo_branch(i32 %v4_14b04)
  %v2_14b14 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14b14, i32* %r4.global-to-local, align 4
  ret i32 %v2_149f0

; uselistorder directives
  uselistorder i32 %v0_14ab0, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 3, 0, 4, 5, 6, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* inttoptr (i32 123648 to i32*), { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_14ae4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14ab0, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_14a78, { 1, 0 }
}

define i32 @function_14b20(i16* %arg1) local_unnamed_addr {
dec_label_pc_14b20:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_14b20 = load i1, i1* @cpsr_z, align 1
  %v2_14b20 = load i32, i32* @r4, align 4
  br i1 %v0_14b20, label %bb, label %dec_label_pc_14b20..thread8_crit_edge

dec_label_pc_14b20..thread8_crit_edge:            ; preds = %dec_label_pc_14b20
  %v0_14b5c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_14b20
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14b20..thread8_crit_edge, %bb
  %v0_14cfc = phi i32 [ %v0_14b5c.pre, %dec_label_pc_14b20..thread8_crit_edge ], [ 0, %bb ]
  store i32 %v2_14b20, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 123612, i32* %sb.global-to-local, align 4
  %v4_14b58 = load i32, i32* inttoptr (i32 123656 to i32*), align 8
  store i32 %v4_14b58, i32* %r3.global-to-local, align 4
  %v9_14b5c = icmp eq i32 %v0_14cfc, %v4_14b58
  store i32 %v0_14cfc, i32* %fp.global-to-local, align 4
  br i1 %v9_14b5c, label %bb49, label %dec_label_pc_14b74

bb49:                                             ; preds = %.thread8
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_14b84

dec_label_pc_14b74:                               ; preds = %.thread8
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_14b78 = icmp eq i32 %v0_14cfc, 0
  br i1 %v2_14b78, label %dec_label_pc_14b84, label %dec_label_pc_14cec

dec_label_pc_14b84:                               ; preds = %bb49, %dec_label_pc_14b74
  %stack_var_-60.1.in = phi i32 [ 0, %bb49 ], [ 256, %dec_label_pc_14b74 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_14b98 = load i32, i32* inttoptr (i32 123720 to i32*), align 8
  store i32 %v4_14b98, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_14ba0 = ptrtoint i32* %stack_var_-56 to i32
  %v4_14ba4 = load i32, i32* inttoptr (i32 123684 to i32*), align 4
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_14ba0, i32* %r0.global-to-local, align 4
  store i32 %v4_14b98, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14ba4)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14bc4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14bc4, i32* %r0.global-to-local, align 4
  %v0_14bc8 = load i32, i32* %sb.global-to-local, align 4
  %v2_14bc8 = add i32 %v0_14bc8, 16
  %v3_14bc8 = inttoptr i32 %v2_14bc8 to i32*
  %v4_14bc8 = load i32, i32* %v3_14bc8, align 4
  call void @__pseudo_branch(i32 %v4_14bc8)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14bd8 = add i32 %v0_14bc8, 12
  %v3_14bd8 = inttoptr i32 %v2_14bd8 to i32*
  %v4_14bd8 = load i32, i32* %v3_14bd8, align 4
  store i32 %v4_14bd8, i32* %r2.global-to-local, align 4
  %v1_14bdc = inttoptr i32 %v4_14bd8 to i32*
  %v2_14bdc = load i32, i32* %v1_14bdc, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_14be4 = add i32 %v2_14bdc, 1
  store i32 %v1_14be4, i32* %r3.global-to-local, align 4
  %v2_14be8 = add i32 %v0_14bc8, 24
  %v3_14be8 = inttoptr i32 %v2_14be8 to i32*
  %v4_14be8 = load i32, i32* %v3_14be8, align 4
  store i32 %v1_14be4, i32* %v1_14bdc, align 4
  store i32 %v2_14ba0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14be8)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_14c04 = load i32, i32* %sb.global-to-local, align 4
  %v2_14c04 = add i32 %v0_14c04, 96
  %v3_14c04 = inttoptr i32 %v2_14c04 to i32*
  %v4_14c04 = load i32, i32* %v3_14c04, align 4
  store i32 %v4_14c04, i32* @r4, align 4
  store i32 %v4_14c04, i32* %r2.global-to-local, align 4
  store i32 %v2_14ba0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14ba4)
  %v0_14c1c = load i32, i32* @r4, align 4
  store i32 %v0_14c1c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14bc8)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_14c2c = load i32, i32* %sb.global-to-local, align 4
  %v2_14c2c = add i32 %v0_14c2c, 44
  %v3_14c2c = inttoptr i32 %v2_14c2c to i32*
  %v4_14c2c = load i32, i32* %v3_14c2c, align 4
  store i32 %v4_14c2c, i32* %r3.global-to-local, align 4
  store i32 %v2_14ba0, i32* %r0.global-to-local, align 4
  %v1_14c38 = inttoptr i32 %v4_14c2c to i32*
  %v2_14c38 = load i32, i32* %v1_14c38, align 4
  store i32 %v2_14c38, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_14be8)
  %v0_14c44 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_14c44, i32* @r6, align 4
  %v2_14c48 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_14c48, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_14cdc.pr = load i32, i32* @r7, align 4
  %v2_14cdc28 = icmp eq i32 %v0_14cdc.pr, 0
  br i1 %v2_14cdc28, label %dec_label_pc_14ce4, label %dec_label_pc_14c50

dec_label_pc_14c50:                               ; preds = %dec_label_pc_14b84, %dec_label_pc_14cd8
  %v0_14c5c = phi i32 [ %v3_14cd8, %dec_label_pc_14cd8 ], [ %v0_14cdc.pr, %dec_label_pc_14b84 ]
  %v1_14c50 = inttoptr i32 %v0_14c5c to i16*
  %v2_14c50 = load i16, i16* %v1_14c50, align 2
  %v3_14c50 = zext i16 %v2_14c50 to i32
  store i32 %v3_14c50, i32* %r3.global-to-local, align 4
  %v1_14c54 = and i32 %v3_14c50, 64
  %v2_14c54 = icmp eq i32 %v1_14c54, 0
  br i1 %v2_14c54, label %dec_label_pc_14cd8, label %dec_label_pc_14c5c

dec_label_pc_14c5c:                               ; preds = %dec_label_pc_14c50
  %v1_14c5c = add i32 %v0_14c5c, 56
  store i32 %v1_14c5c, i32* @r4, align 4
  store i32 %v1_14c5c, i32* %r2.global-to-local, align 4
  store i32 %v2_14ba0, i32* %r0.global-to-local, align 4
  %v0_14c6c = load i32, i32* %sb.global-to-local, align 4
  %v1_14c6c = load i32, i32* %fp.global-to-local, align 4
  %v2_14c6c = add i32 %v1_14c6c, %v0_14c6c
  %v3_14c6c = inttoptr i32 %v2_14c6c to i32*
  %v4_14c6c = load i32, i32* %v3_14c6c, align 4
  call void @__pseudo_branch(i32 %v4_14c6c)
  %v0_14c78 = load i32, i32* @r4, align 4
  store i32 %v0_14c78, i32* %r0.global-to-local, align 4
  %v0_14c7c = load i32, i32* %sb.global-to-local, align 4
  %v1_14c7c = load i32, i32* @r8, align 4
  %v2_14c7c = add i32 %v1_14c7c, %v0_14c7c
  %v3_14c7c = inttoptr i32 %v2_14c7c to i32*
  %v4_14c7c = load i32, i32* %v3_14c7c, align 4
  call void @__pseudo_branch(i32 %v4_14c7c)
  %v0_14c88 = load i32, i32* @r7, align 4
  %v1_14c88 = inttoptr i32 %v0_14c88 to i16*
  %v2_14c88 = load i16, i16* %v1_14c88, align 2
  %v3_14c88 = zext i16 %v2_14c88 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_14c90 = or i32 %v3_14c88, %stack_var_-60.1.in
  %v1_14c94 = xor i32 %v2_14c90, 320
  store i32 %v1_14c94, i32* %r3.global-to-local, align 4
  %v1_14c98 = and i32 %v1_14c94, 832
  %v2_14c98 = icmp eq i32 %v1_14c98, 0
  br i1 %v2_14c98, label %dec_label_pc_14ca0, label %bb50

dec_label_pc_14ca0:                               ; preds = %dec_label_pc_14c5c
  store i32 %v0_14c88, i32* %r0.global-to-local, align 4
  %v1_14ca4 = call i32 @function_147f8(i32 %v0_14c88)
  store i32 %v1_14ca4, i32* %r0.global-to-local, align 4
  %v2_14ca8 = icmp eq i32 %v1_14ca4, 0
  br i1 %v2_14ca8, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_14ca0
  %v1_14cac = load i32, i32* @r7, align 4
  %v2_14cac = inttoptr i32 %v1_14cac to i16*
  %v3_14cac = load i16, i16* %v2_14cac, align 2
  %v4_14cac = zext i16 %v3_14cac to i32
  store i32 %v4_14cac, i32* %r3.global-to-local, align 4
  %v2_14cb0 = add i32 %v1_14cac, 8
  %v3_14cb0 = inttoptr i32 %v2_14cb0 to i32*
  %v4_14cb0 = load i32, i32* %v3_14cb0, align 4
  store i32 %v4_14cb0, i32* %r2.global-to-local, align 4
  %v2_14cb4 = and i32 %v4_14cac, 65471
  store i32 %v2_14cb4, i32* %r3.global-to-local, align 4
  %v3_14cb8 = add i32 %v1_14cac, 28
  %v4_14cb8 = inttoptr i32 %v3_14cb8 to i32*
  store i32 %v4_14cb0, i32* %v4_14cb8, align 4
  %v1_14cbc = load i32, i32* %r3.global-to-local, align 4
  %v2_14cbc = trunc i32 %v1_14cbc to i16
  %v3_14cbc = load i32, i32* @r7, align 4
  %v4_14cbc = inttoptr i32 %v3_14cbc to i16*
  store i16 %v2_14cbc, i16* %v4_14cbc, align 2
  br label %bb50

.thread17:                                        ; preds = %dec_label_pc_14ca0
  store i32 -1, i32* @r6, align 4
  br label %bb50

bb50:                                             ; preds = %.thread16, %dec_label_pc_14c5c, %.thread17
  store i32 %v2_14ba0, i32* %r0.global-to-local, align 4
  %v0_14ccc = load i32, i32* %sb.global-to-local, align 4
  %v1_14ccc = load i32, i32* %sl.global-to-local, align 4
  %v2_14ccc = add i32 %v1_14ccc, %v0_14ccc
  %v3_14ccc = inttoptr i32 %v2_14ccc to i32*
  %v4_14ccc = load i32, i32* %v3_14ccc, align 4
  call void @__pseudo_branch(i32 %v4_14ccc)
  %v0_14cd8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14cd8

dec_label_pc_14cd8:                               ; preds = %dec_label_pc_14c50, %bb50
  %v0_14cd8 = phi i32 [ %v0_14c5c, %dec_label_pc_14c50 ], [ %v0_14cd8.pre, %bb50 ]
  %v1_14cd8 = add i32 %v0_14cd8, 32
  %v2_14cd8 = inttoptr i32 %v1_14cd8 to i32*
  %v3_14cd8 = load i32, i32* %v2_14cd8, align 4
  store i32 %v3_14cd8, i32* @r7, align 4
  %v2_14cdc = icmp eq i32 %v3_14cd8, 0
  br i1 %v2_14cdc, label %dec_label_pc_14ce4, label %dec_label_pc_14c50

dec_label_pc_14ce4:                               ; preds = %dec_label_pc_14cd8, %dec_label_pc_14b84
  %v0_14ce4 = call i32 @function_149c0()
  store i32 %v0_14ce4, i32* %r0.global-to-local, align 4
  %v0_14d20.pre = load i32, i32* @r6, align 4
  br label %bb52

dec_label_pc_14cec:                               ; preds = %dec_label_pc_14b74
  %v1_14cec = inttoptr i32 %v0_14cfc to i16*
  %v2_14cec = load i16, i16* %v1_14cec, align 2
  %v3_14cec = zext i16 %v2_14cec to i32
  %v1_14cf0 = and i32 %v3_14cec, 64
  store i32 %v1_14cf0, i32* %r3.global-to-local, align 4
  %v2_14cf0 = icmp eq i32 %v1_14cf0, 0
  br i1 %v2_14cf0, label %bb51, label %dec_label_pc_14cfc

bb51:                                             ; preds = %dec_label_pc_14cec
  br label %bb52

dec_label_pc_14cfc:                               ; preds = %dec_label_pc_14cec
  %v1_14cfc = call i32 @function_147f8(i32 %v0_14cfc)
  store i32 %v1_14cfc, i32* %r0.global-to-local, align 4
  %v2_14d00 = icmp eq i32 %v1_14cfc, 0
  br i1 %v2_14d00, label %.thread24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_14cfc
  br label %bb52

.thread24:                                        ; preds = %dec_label_pc_14cfc
  %v1_14d04 = load i32, i32* %fp.global-to-local, align 4
  %v2_14d04 = inttoptr i32 %v1_14d04 to i16*
  %v3_14d04 = load i16, i16* %v2_14d04, align 2
  %v4_14d04 = zext i16 %v3_14d04 to i32
  store i32 %v4_14d04, i32* %r3.global-to-local, align 4
  %v2_14d08 = add i32 %v1_14d04, 8
  %v3_14d08 = inttoptr i32 %v2_14d08 to i32*
  %v4_14d08 = load i32, i32* %v3_14d08, align 4
  store i32 %v4_14d08, i32* %r2.global-to-local, align 4
  %v2_14d0c = and i32 %v4_14d04, 65471
  store i32 %v2_14d0c, i32* %r3.global-to-local, align 4
  %v2_14d10 = trunc i32 %v2_14d0c to i16
  store i16 %v2_14d10, i16* %v2_14d04, align 2
  %v1_14d14 = load i32, i32* %r2.global-to-local, align 4
  %v2_14d14 = load i32, i32* %fp.global-to-local, align 4
  %v3_14d14 = add i32 %v2_14d14, 28
  %v4_14d14 = inttoptr i32 %v3_14d14 to i32*
  store i32 %v1_14d14, i32* %v4_14d14, align 4
  br label %bb52

bb52:                                             ; preds = %bb51, %.thread26, %dec_label_pc_14ce4, %.thread24
  %v0_14d20 = phi i32 [ -1, %.thread26 ], [ 0, %bb51 ], [ %v0_14d20.pre, %dec_label_pc_14ce4 ], [ 0, %.thread24 ]
  store i32 %v0_14d20, i32* %r0.global-to-local, align 4
  %v2_14d28 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14d28, i32* %r4.global-to-local, align 4
  ret i32 %v0_14d20

; uselistorder directives
  uselistorder i32 %v0_14d20, { 1, 0 }
  uselistorder i32 %v3_14cd8, { 1, 2, 0 }
  uselistorder i32 %v0_14c88, { 1, 0, 2 }
  uselistorder i32 %v0_14bc8, { 1, 0, 2 }
  uselistorder i32 %v0_14cfc, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 3, 6, 16, 7, 9, 8, 10, 12, 11, 13, 14, 15, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 56, { 8, 9, 10, 1, 2, 11, 13, 4, 5, 6, 7, 0, 3, 12, 14 }
  uselistorder i32* @r8, { 7, 8, 9, 10, 11, 12, 13, 14, 1, 15, 200, 154, 155, 2, 156, 157, 158, 182, 183, 184, 185, 186, 6, 187, 188, 189, 190, 191, 192, 193, 194, 59, 60, 61, 62, 63, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 16, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 3, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 4, 123, 124, 125, 126, 127, 128, 129, 130, 5, 131, 132, 133, 134, 135, 136, 0, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 195, 196, 197, 198, 199, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 117, 118, 119, 120, 121 }
  uselistorder i32 96, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11 }
  uselistorder i32* inttoptr (i32 123684 to i32*), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb52, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14cd8, { 1, 0 }
  uselistorder label %bb50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14c50, { 1, 0 }
  uselistorder label %dec_label_pc_14b84, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_14d34(i32 %arg1) local_unnamed_addr {
dec_label_pc_14d34:
  %v0_14d34 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14d34, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_14d34
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_14d34, %bb
  %v5_14d50 = phi i32 [ %arg1, %dec_label_pc_14d34 ], [ 0, %bb ]
  ret i32 %v5_14d50

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_14d54(i16* %arg1) local_unnamed_addr {
dec_label_pc_14d54:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_14d54 = load i32, i32* @r4, align 4
  store i32 %v3_14d54, i32* %stack_var_-12, align 4
  %v6_14d54 = load i32, i32* @r5, align 4
  %v9_14d54 = load i32, i32* @lr, align 4
  %v0_14d58 = load i32, i32* @r0, align 4
  %v1_14d58 = add i32 %v0_14d58, 16
  %v2_14d58 = inttoptr i32 %v1_14d58 to i32*
  %v3_14d58 = load i32, i32* %v2_14d58, align 4
  store i32 %v3_14d58, i32* %r2.global-to-local, align 4
  %v1_14d5c = add i32 %v0_14d58, 24
  %v2_14d5c = inttoptr i32 %v1_14d5c to i32*
  %v3_14d5c = load i32, i32* %v2_14d5c, align 4
  %v3_14d60 = icmp ult i32 %v3_14d58, %v3_14d5c
  store i32 %v0_14d58, i32* @r4, align 4
  br i1 %v3_14d60, label %bb, label %dec_label_pc_14d80

bb:                                               ; preds = %dec_label_pc_14d54
  %v2_14d6c = inttoptr i32 %v3_14d58 to i8*
  %v3_14d6c = load i8, i8* %v2_14d6c, align 1
  %v4_14d6c = zext i8 %v3_14d6c to i32
  store i32 %v4_14d6c, i32* %r0.global-to-local, align 4
  %v6_14d6c = add i32 %v3_14d58, 1
  store i32 %v6_14d6c, i32* %r2.global-to-local, align 4
  store i32 %v6_14d6c, i32* %v2_14d58, align 4
  br label %dec_label_pc_14e6c

dec_label_pc_14d80:                               ; preds = %dec_label_pc_14d54
  store i32 123612, i32* @r5, align 4
  %v1_14d80 = inttoptr i32 %v0_14d58 to i16*
  %v2_14d80 = load i16, i16* %v1_14d80, align 2
  %v3_14d80 = zext i16 %v2_14d80 to i32
  %v1_14d84 = and i32 %v3_14d80, 131
  %tmp24 = icmp ugt i32 %v1_14d84, 128
  br i1 %tmp24, label %dec_label_pc_14da0, label %dec_label_pc_14d90

dec_label_pc_14d90:                               ; preds = %dec_label_pc_14d80
  store i32 128, i32* @r1, align 4
  %v0_14d94 = call i32 @function_15bbc()
  store i32 %v0_14d94, i32* %r0.global-to-local, align 4
  %v2_14d98 = icmp eq i32 %v0_14d94, 0
  br i1 %v2_14d98, label %dec_label_pc_14d90.dec_label_pc_14da0_crit_edge, label %dec_label_pc_14e68

dec_label_pc_14d90.dec_label_pc_14da0_crit_edge:  ; preds = %dec_label_pc_14d90
  %v0_14da0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14da0

dec_label_pc_14da0:                               ; preds = %dec_label_pc_14d90.dec_label_pc_14da0_crit_edge, %dec_label_pc_14d80
  %v2_14de0 = phi i32 [ %v0_14da0.pre, %dec_label_pc_14d90.dec_label_pc_14da0_crit_edge ], [ %v0_14d58, %dec_label_pc_14d80 ]
  %v1_14da0 = inttoptr i32 %v2_14de0 to i16*
  %v2_14da0 = load i16, i16* %v1_14da0, align 2
  %v3_14da0 = zext i16 %v2_14da0 to i32
  store i32 %v3_14da0, i32* %r2.global-to-local, align 4
  %v1_14da4 = and i32 %v3_14da0, 2
  %v2_14da4 = icmp eq i32 %v1_14da4, 0
  br i1 %v2_14da4, label %dec_label_pc_14dd0, label %dec_label_pc_14dac

dec_label_pc_14dac:                               ; preds = %dec_label_pc_14da0
  %tmp25 = urem i16 %v2_14da0, 2
  %v1_14dac = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_14dac
  %v4_14db0 = and i32 %tmp21, 4
  %v5_14db0 = add i32 %v4_14db0, %v2_14de0
  %v1_14db4 = add i32 %v5_14db0, 36
  %v2_14db4 = inttoptr i32 %v1_14db4 to i8*
  %v3_14db4 = load i8, i8* %v2_14db4, align 1
  %v4_14db4 = zext i8 %v3_14db4 to i32
  %v1_14db8 = add nsw i32 %v3_14da0, -1
  store i32 %v1_14db8, i32* %r2.global-to-local, align 4
  store i32 %v4_14db4, i32* %r0.global-to-local, align 4
  %v2_14dc4 = add i32 %v2_14de0, 40
  %v3_14dc4 = inttoptr i32 %v2_14dc4 to i32*
  store i32 0, i32* %v3_14dc4, align 4
  %v0_14dc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_14dc8 = trunc i32 %v0_14dc8 to i16
  %v2_14dc8 = load i32, i32* @r4, align 4
  %v3_14dc8 = inttoptr i32 %v2_14dc8 to i16*
  store i16 %v1_14dc8, i16* %v3_14dc8, align 2
  br label %dec_label_pc_14e6c

dec_label_pc_14dd0:                               ; preds = %dec_label_pc_14da0
  %v1_14dd0 = add i32 %v2_14de0, 16
  %v1_14dd4 = inttoptr i32 %v1_14dd0 to i32*
  %v2_14dd4 = load i32, i32* %v1_14dd4, align 4
  %v3_14dd4 = add i32 %v2_14de0, 20
  %v4_14dd4 = inttoptr i32 %v3_14dd4 to i32*
  %v5_14dd4 = load i32, i32* %v4_14dd4, align 4
  %v9_14dd8 = icmp eq i32 %v5_14dd4, %v2_14dd4
  br i1 %v9_14dd8, label %dec_label_pc_14de8, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14dd0
  %v2_14ddc = inttoptr i32 %v2_14dd4 to i8*
  %v3_14ddc = load i8, i8* %v2_14ddc, align 1
  %v4_14ddc = zext i8 %v3_14ddc to i32
  store i32 %v4_14ddc, i32* %r0.global-to-local, align 4
  %v6_14ddc = add i32 %v2_14dd4, 1
  store i32 %v6_14ddc, i32* %v1_14dd4, align 4
  br label %dec_label_pc_14e6c

dec_label_pc_14de8:                               ; preds = %dec_label_pc_14dd0
  %v1_14de8 = add i32 %v2_14de0, 4
  %v2_14de8 = inttoptr i32 %v1_14de8 to i32*
  %v3_14de8 = load i32, i32* %v2_14de8, align 4
  %v7_14dec = icmp eq i32 %v3_14de8, -2
  br i1 %v7_14dec, label %.thread8, label %dec_label_pc_14e00

.thread8:                                         ; preds = %dec_label_pc_14de8
  %v2_14df0 = or i16 %v2_14da0, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_14df0, i16* %v1_14da0, align 2
  br label %dec_label_pc_14e6c

dec_label_pc_14e00:                               ; preds = %dec_label_pc_14de8
  %v1_14e00 = and i32 %v3_14da0, 768
  %v2_14e00 = icmp eq i32 %v1_14e00, 0
  br i1 %v2_14e00, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_14e00
  %v1_14e08 = load i32, i32* @r5, align 4
  %v3_14e08 = add i32 %v1_14e08, 44
  %v4_14e08 = inttoptr i32 %v3_14e08 to i32*
  %v5_14e08 = load i32, i32* %v4_14e08, align 4
  store i32 %v5_14e08, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_14e00, %bb22
  %v1_14e0c = xor i1 %v2_14e00, true
  call void @__pseudo_cond_branch(i1 %v1_14e0c, i32 ptrtoint (i32* @global_var_14b48.492 to i32))
  %v0_14e10 = load i32, i32* @r4, align 4
  %v1_14e10 = add i32 %v0_14e10, 8
  store i32 %v1_14e10, i32* %r2.global-to-local, align 4
  %v1_14e14 = inttoptr i32 %v1_14e10 to i32*
  %v2_14e14 = load i32, i32* %v1_14e14, align 4
  store i32 %v2_14e14, i32* %r2.global-to-local, align 4
  %v3_14e14 = add i32 %v0_14e10, 12
  %v4_14e14 = inttoptr i32 %v3_14e14 to i32*
  %v5_14e14 = load i32, i32* %v4_14e14, align 4
  %v9_14e18 = icmp eq i32 %v5_14e14, %v2_14e14
  br i1 %v9_14e18, label %dec_label_pc_14e4c, label %dec_label_pc_14e20

dec_label_pc_14e20:                               ; preds = %.thread10
  %v2_14e20 = add i32 %v0_14e10, 24
  %v3_14e20 = inttoptr i32 %v2_14e20 to i32*
  store i32 %v2_14e14, i32* %v3_14e20, align 4
  %v0_14e24 = load i32, i32* @r4, align 4
  store i32 %v0_14e24, i32* %r0.global-to-local, align 4
  %v2_14e28 = call i32 @function_15b8c(i32 %v0_14e24)
  store i32 %v2_14e28, i32* %r0.global-to-local, align 4
  %v2_14e2c = icmp eq i32 %v2_14e28, 0
  br i1 %v2_14e2c, label %dec_label_pc_14e68, label %dec_label_pc_14e34

dec_label_pc_14e34:                               ; preds = %dec_label_pc_14e20
  %v0_14e34 = load i32, i32* @r4, align 4
  %v1_14e34 = add i32 %v0_14e34, 20
  %v2_14e34 = inttoptr i32 %v1_14e34 to i32*
  %v3_14e34 = load i32, i32* %v2_14e34, align 4
  %v2_14e38 = add i32 %v0_14e34, 24
  %v3_14e38 = inttoptr i32 %v2_14e38 to i32*
  store i32 %v3_14e34, i32* %v3_14e38, align 4
  %v0_14e3c = load i32, i32* @r4, align 4
  %v1_14e3c = add i32 %v0_14e3c, 16
  %v2_14e3c = inttoptr i32 %v1_14e3c to i32*
  %v3_14e3c = load i32, i32* %v2_14e3c, align 4
  %v1_14e40 = inttoptr i32 %v3_14e3c to i8*
  %v2_14e40 = load i8, i8* %v1_14e40, align 1
  %v3_14e40 = zext i8 %v2_14e40 to i32
  store i32 %v3_14e40, i32* %r0.global-to-local, align 4
  %v5_14e40 = add i32 %v3_14e3c, 1
  store i32 %v5_14e40, i32* %v2_14e3c, align 4
  br label %dec_label_pc_14e6c

dec_label_pc_14e4c:                               ; preds = %.thread10
  %v1_14e4c = inttoptr i32 %v0_14e10 to i16*
  store i32 %v0_14e10, i32* %r0.global-to-local, align 4
  %v2_14e50 = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_14e58 = call i32 @function_15a80(i16* %v1_14e4c, i32 %v2_14e50, i32 1)
  store i32 %v5_14e58, i32* %r0.global-to-local, align 4
  %v2_14e5c = icmp eq i32 %v5_14e58, 0
  br i1 %v2_14e5c, label %dec_label_pc_14e68, label %bb23

bb23:                                             ; preds = %dec_label_pc_14e4c
  %v4_14e60 = load i8, i8* %stack_var_-17, align 1
  %v5_14e60 = sext i8 %v4_14e60 to i32
  store i32 %v5_14e60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14e6c

dec_label_pc_14e68:                               ; preds = %dec_label_pc_14e4c, %dec_label_pc_14d90, %dec_label_pc_14e20
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14e6c

dec_label_pc_14e6c:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_14e34, %dec_label_pc_14dac, %dec_label_pc_14e68
  %v2_14e70 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14e70, i32* @r4, align 4
  store i32 %v6_14d54, i32* @r5, align 4
  store i32 %v9_14d54, i32* @lr, align 4
  %v1_14e74 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_14e74

; uselistorder directives
  uselistorder i32 %v2_14dd4, { 1, 0, 2 }
  uselistorder i32 %v2_14de0, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_14d58, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14d58, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 9, 1, 0, 11, 3, 2, 12, 4, 5, 6, 7, 8, 13, 10 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder i32 128, { 5, 0, 4, 6, 1, 7, 8, 9, 2, 10, 11, 12, 3 }
  uselistorder label %dec_label_pc_14e6c, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_14e68, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_14e80(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14e80:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_14e80 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14e84 = icmp eq i32 %arg2, 0
  store i1 %v2_14e84, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_14f0c, label %dec_label_pc_14ef4.preheader

dec_label_pc_14ef4.preheader:                     ; preds = %dec_label_pc_14e80
  store i32 %tmp, i32* @r5, align 4
  %v1_14ef42 = add i32 %arg2, -1
  store i32 %v1_14ef42, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_14ef48 = icmp eq i32 %arg2, 1
  store i1 %v7_14ef48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14ef48, label %dec_label_pc_14efc, label %dec_label_pc_14ea0

dec_label_pc_14ea0:                               ; preds = %dec_label_pc_14ef4.preheader, %dec_label_pc_14ef4.backedge.dec_label_pc_14ea0_crit_edge
  %v0_14ec4 = phi i32 [ %v0_14ea0.pre, %dec_label_pc_14ef4.backedge.dec_label_pc_14ea0_crit_edge ], [ %arg3, %dec_label_pc_14ef4.preheader ]
  %v1_14ea0 = add i32 %v0_14ec4, 16
  %v2_14ea0 = inttoptr i32 %v1_14ea0 to i32*
  %v3_14ea0 = load i32, i32* %v2_14ea0, align 4
  store i32 %v3_14ea0, i32* %r2.global-to-local, align 4
  %v1_14ea4 = add i32 %v0_14ec4, 24
  %v2_14ea4 = inttoptr i32 %v1_14ea4 to i32*
  %v3_14ea4 = load i32, i32* %v2_14ea4, align 4
  store i32 %v3_14ea4, i32* %r3.global-to-local, align 4
  %v3_14ea8 = icmp uge i32 %v3_14ea0, %v3_14ea4
  store i1 %v3_14ea8, i1* %cpsr_c.global-to-local, align 1
  %v9_14ea8 = icmp eq i32 %v3_14ea0, %v3_14ea4
  store i1 %v9_14ea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14ea8, label %dec_label_pc_14ec4, label %dec_label_pc_14eb0

dec_label_pc_14eb0:                               ; preds = %dec_label_pc_14ea0
  %v1_14eb0 = inttoptr i32 %v3_14ea0 to i8*
  %v2_14eb0 = load i8, i8* %v1_14eb0, align 1
  %v3_14eb0 = zext i8 %v2_14eb0 to i32
  store i32 %v3_14eb0, i32* %r3.global-to-local, align 4
  %v5_14eb0 = add i32 %v3_14ea0, 1
  store i32 %v5_14eb0, i32* %r2.global-to-local, align 4
  %v2_14eb4 = load i32, i32* @r5, align 4
  %v3_14eb4 = inttoptr i32 %v2_14eb4 to i8*
  store i8 %v2_14eb0, i8* %v3_14eb4, align 1
  %v4_14eb4 = load i32, i32* @r5, align 4
  %v5_14eb4 = add i32 %v4_14eb4, 1
  store i32 %v5_14eb4, i32* @r5, align 4
  %v0_14eb8 = load i32, i32* %r3.global-to-local, align 4
  %v2_14eb8 = icmp ugt i32 %v0_14eb8, 9
  store i1 %v2_14eb8, i1* %cpsr_c.global-to-local, align 1
  %v7_14eb8 = icmp eq i32 %v0_14eb8, 10
  store i1 %v7_14eb8, i1* %cpsr_z.global-to-local, align 1
  %v0_14ebc = load i32, i32* %r2.global-to-local, align 4
  %v1_14ebc = load i32, i32* @r4, align 4
  %v2_14ebc = add i32 %v1_14ebc, 16
  %v3_14ebc = inttoptr i32 %v2_14ebc to i32*
  store i32 %v0_14ebc, i32* %v3_14ebc, align 4
  br i1 %v7_14eb8, label %dec_label_pc_14efc, label %dec_label_pc_14ef4.backedge

dec_label_pc_14ec4:                               ; preds = %dec_label_pc_14ea0
  %v1_14ec4 = inttoptr i32 %v0_14ec4 to i16*
  %v3_14ec8 = call i32 @function_14d54(i16* %v1_14ec4)
  %v3_14ecc = icmp eq i32 %v3_14ec8, -1
  store i1 %v3_14ecc, i1* %cpsr_c.global-to-local, align 1
  %v8_14ecc = icmp eq i32 %v3_14ec8, -1
  store i1 %v8_14ecc, i1* %cpsr_z.global-to-local, align 1
  %v1_14ed0 = urem i32 %v3_14ec8, 256
  store i32 %v1_14ed0, i32* %r3.global-to-local, align 4
  br i1 %v3_14ecc, label %dec_label_pc_14ed8, label %dec_label_pc_14ef0

dec_label_pc_14ed8:                               ; preds = %dec_label_pc_14ec4
  %v0_14ed8 = load i32, i32* @r4, align 4
  %v1_14ed8 = inttoptr i32 %v0_14ed8 to i16*
  %v2_14ed8 = load i16, i16* %v1_14ed8, align 2
  %v3_14ed8 = zext i16 %v2_14ed8 to i32
  store i32 %v3_14ed8, i32* %r3.global-to-local, align 4
  %v1_14edc = and i32 %v3_14ed8, 8
  %v2_14edc = icmp eq i32 %v1_14edc, 0
  store i1 %v2_14edc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14edc, label %dec_label_pc_14efc, label %dec_label_pc_14f0c

dec_label_pc_14ef0:                               ; preds = %dec_label_pc_14ec4
  %v1_14ee8 = trunc i32 %v3_14ec8 to i8
  %v2_14ee8 = load i32, i32* @r5, align 4
  %v3_14ee8 = inttoptr i32 %v2_14ee8 to i8*
  store i8 %v1_14ee8, i8* %v3_14ee8, align 1
  %v4_14ee8 = load i32, i32* @r5, align 4
  %v5_14ee8 = add i32 %v4_14ee8, 1
  store i32 %v5_14ee8, i32* @r5, align 4
  %v0_14eec = load i32, i32* %r3.global-to-local, align 4
  %v2_14eec = icmp ugt i32 %v0_14eec, 9
  store i1 %v2_14eec, i1* %cpsr_c.global-to-local, align 1
  %v7_14eec = icmp eq i32 %v0_14eec, 10
  store i1 %v7_14eec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14eec, label %dec_label_pc_14efc, label %dec_label_pc_14ef4.backedge

dec_label_pc_14ef4.backedge:                      ; preds = %dec_label_pc_14ef0, %dec_label_pc_14eb0
  %v0_14ef4 = load i32, i32* %r6.global-to-local, align 4
  %v1_14ef4 = add i32 %v0_14ef4, -1
  store i32 %v1_14ef4, i32* %r6.global-to-local, align 4
  %v2_14ef4 = icmp ne i32 %v0_14ef4, 0
  store i1 %v2_14ef4, i1* %cpsr_c.global-to-local, align 1
  %v7_14ef4 = icmp eq i32 %v0_14ef4, 1
  store i1 %v7_14ef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14ef4, label %dec_label_pc_14efc, label %dec_label_pc_14ef4.backedge.dec_label_pc_14ea0_crit_edge

dec_label_pc_14ef4.backedge.dec_label_pc_14ea0_crit_edge: ; preds = %dec_label_pc_14ef4.backedge
  %v0_14ea0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14ea0

dec_label_pc_14efc:                               ; preds = %dec_label_pc_14ef0, %dec_label_pc_14ef4.backedge, %dec_label_pc_14eb0, %dec_label_pc_14ef4.preheader, %dec_label_pc_14ed8
  %v0_14efc = load i32, i32* @r5, align 4
  %v1_14efc = load i32, i32* @r7, align 4
  %v3_14efc = icmp uge i32 %v0_14efc, %v1_14efc
  store i1 %v3_14efc, i1* %cpsr_c.global-to-local, align 1
  %v9_14efc = icmp eq i32 %v0_14efc, %v1_14efc
  store i1 %v9_14efc, i1* %cpsr_z.global-to-local, align 1
  %v2_14f00 = xor i1 %v9_14efc, true
  %v3_14f00 = and i1 %v3_14efc, %v2_14f00
  br i1 %v3_14f00, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_14efc
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_14f04 = inttoptr i32 %v0_14efc to i8*
  store i8 0, i8* %v7_14f04, align 1
  %v0_14f08.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_14f08.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_14efc, %bb
  %v1_14f08 = phi i1 [ %v1_14f08.pre, %bb ], [ %v9_14efc, %dec_label_pc_14efc ]
  %v0_14f08 = phi i1 [ %v0_14f08.pre, %bb ], [ %v3_14efc, %dec_label_pc_14efc ]
  %v2_14f08 = xor i1 %v1_14f08, true
  %v3_14f08 = and i1 %v0_14f08, %v2_14f08
  br i1 %v3_14f08, label %.dec_label_pc_14f10_crit_edge, label %dec_label_pc_14f0c

.dec_label_pc_14f10_crit_edge:                    ; preds = %.thread14
  %v0_14f10.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14f10

dec_label_pc_14f0c:                               ; preds = %dec_label_pc_14e80, %dec_label_pc_14ed8, %.thread14
  br label %dec_label_pc_14f10

dec_label_pc_14f10:                               ; preds = %.dec_label_pc_14f10_crit_edge, %dec_label_pc_14f0c
  %v0_14f10 = phi i32 [ %v0_14f10.pre, %.dec_label_pc_14f10_crit_edge ], [ 0, %dec_label_pc_14f0c ]
  store i32 %v6_14e80, i32* @r5, align 4
  ret i32 %v0_14f10

; uselistorder directives
  uselistorder i1 %v9_14efc, { 1, 0, 2 }
  uselistorder i32 %v1_14efc, { 1, 0 }
  uselistorder i32 %v0_14efc, { 0, 2, 1 }
  uselistorder i32 %v0_14ef4, { 2, 0, 1 }
  uselistorder i32 %v0_14eec, { 1, 0 }
  uselistorder i32 %v3_14ec8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_14eb8, { 1, 0 }
  uselistorder i32 %v3_14ea0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_14ec4, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 (i16*)* @function_14d54, { 0, 2, 3, 1 }
  uselistorder i1 true, { 0, 1, 69, 101, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 64, 28, 29, 30, 31, 32, 120, 62, 65, 71, 106, 74, 73, 33, 102, 87, 103, 104, 36, 105, 63, 72, 107, 108, 109, 110, 66, 111, 112, 113, 114, 115, 37, 38, 116, 117, 34, 35, 118, 119, 86, 85, 39, 40, 41, 121, 42, 43, 75, 76, 81, 77, 82, 78, 80, 122, 79, 84, 123, 44, 124, 45, 125, 88, 89, 126, 90, 91, 127, 92, 93, 46, 47, 128, 94, 95, 48, 49, 129, 96, 97, 50, 51, 130, 98, 99, 52, 53, 70, 131, 132, 83, 133, 54, 67, 55, 56, 68, 57, 58, 59, 60, 61, 100 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_14f10, { 1, 0 }
  uselistorder label %dec_label_pc_14f0c, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_14efc, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_14ea0, { 1, 0 }
}

define i32 @function_14f20() local_unnamed_addr {
dec_label_pc_14f20:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_14f20 = load i32, i32* @r1, align 4
  %v1_14f20 = load i32, i32* @r0, align 4
  %v2_14f20 = sub i32 %v0_14f20, %v1_14f20
  %v3_14f20 = icmp ult i32 %v0_14f20, %v1_14f20
  %v4_14f20 = xor i32 %v1_14f20, %v0_14f20
  %v5_14f20 = xor i32 %v2_14f20, %v0_14f20
  %v6_14f20 = and i32 %v5_14f20, %v4_14f20
  %v7_14f20 = icmp slt i32 %v6_14f20, 0
  store i1 %v7_14f20, i1* %cpsr_v.global-to-local, align 1
  %v8_14f20 = icmp slt i32 %v2_14f20, 0
  store i1 %v8_14f20, i1* %cpsr_n.global-to-local, align 1
  %v9_14f20 = icmp eq i32 %v0_14f20, %v1_14f20
  store i1 %v9_14f20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14f20, label %dec_label_pc_15174, label %dec_label_pc_14f28

dec_label_pc_14f28:                               ; preds = %dec_label_pc_14f20
  br i1 %v9_14f20, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_14f28
  %merge = phi i32 [ %v0_14f20, %dec_label_pc_14f28 ], [ %v2_15208, %bb150 ], [ %v11_15224, %bb153 ], [ %v7_15224, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_14f28
  %v5_14f2c = inttoptr i32 %v1_14f20 to i8*
  store i8* %v5_14f2c, i8** %stack_var_-8, align 4
  %v8_14f2c = load i32, i32* @lr, align 4
  %v0_14f30 = load i32, i32* @r2, align 4
  %v2_14f30 = add i32 %v0_14f30, -4
  store i32 %v2_14f30, i32* %r2.global-to-local, align 4
  %v4_14f30 = sub i32 3, %v0_14f30
  %v5_14f30 = and i32 %v4_14f30, %v0_14f30
  %v6_14f30 = icmp slt i32 %v5_14f30, 0
  store i1 %v6_14f30, i1* %cpsr_v.global-to-local, align 1
  %v7_14f30 = icmp slt i32 %v2_14f30, 0
  store i1 %v7_14f30, i1* %cpsr_n.global-to-local, align 1
  %v8_14f30 = icmp eq i32 %v0_14f30, 4
  store i1 %v8_14f30, i1* %cpsr_z.global-to-local, align 1
  %v5_14f34 = icmp slt i32 %v0_14f30, 4
  br i1 %v5_14f34, label %bb140, label %dec_label_pc_14f38

dec_label_pc_14f38:                               ; preds = %bb
  %v1_14f38 = urem i32 %v1_14f20, 4
  store i32 %v1_14f38, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14f38 = icmp eq i32 %v1_14f38, 0
  store i1 %v2_14f38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14f38, label %dec_label_pc_14f40, label %dec_label_pc_14fec

dec_label_pc_14f40:                               ; preds = %dec_label_pc_14f38
  %v1_14f40 = urem i32 %v0_14f20, 4
  store i32 %v1_14f40, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14f40 = icmp eq i32 %v1_14f40, 0
  store i1 %v2_14f40, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_14f20 to i2
  br i1 %v2_14f40, label %dec_label_pc_14f48, label %dec_label_pc_1501c

dec_label_pc_14f48:                               ; preds = %dec_label_pc_14f40, %dec_label_pc_15014
  %v0_14f6094 = phi i32 [ %v1_14f20, %dec_label_pc_14f40 ], [ %v0_1513c77, %dec_label_pc_15014 ]
  %v0_14f5c93 = phi i32 [ %v0_14f20, %dec_label_pc_14f40 ], [ %v0_15014, %dec_label_pc_15014 ]
  %v0_14f48 = phi i32 [ %v2_14f30, %dec_label_pc_14f40 ], [ %v2_1500c, %dec_label_pc_15014 ]
  %v1_14f48 = add i32 %v0_14f48, -8
  store i32 %v1_14f48, i32* %r2.global-to-local, align 4
  %v3_14f48 = sub i32 7, %v0_14f48
  %v4_14f48 = and i32 %v3_14f48, %v0_14f48
  %v5_14f48 = icmp slt i32 %v4_14f48, 0
  store i1 %v5_14f48, i1* %cpsr_v.global-to-local, align 1
  %v6_14f48 = icmp slt i32 %v1_14f48, 0
  store i1 %v6_14f48, i1* %cpsr_n.global-to-local, align 1
  %v7_14f48 = icmp eq i32 %v0_14f48, 8
  store i1 %v7_14f48, i1* %cpsr_z.global-to-local, align 1
  %v2_14f4c = xor i1 %v6_14f48, %v5_14f48
  br i1 %v2_14f4c, label %dec_label_pc_14f9c, label %dec_label_pc_14f50

dec_label_pc_14f50:                               ; preds = %dec_label_pc_14f48
  %v1_14f50 = add i32 %v0_14f48, -28
  store i32 %v1_14f50, i32* %r2.global-to-local, align 4
  %v3_14f50 = sub i32 27, %v0_14f48
  %v4_14f50 = and i32 %v3_14f50, %v1_14f48
  %v5_14f50 = icmp slt i32 %v4_14f50, 0
  store i1 %v5_14f50, i1* %cpsr_v.global-to-local, align 1
  %v6_14f50 = icmp slt i32 %v1_14f50, 0
  store i1 %v6_14f50, i1* %cpsr_n.global-to-local, align 1
  %v7_14f50 = icmp eq i32 %v1_14f48, 20
  store i1 %v7_14f50, i1* %cpsr_z.global-to-local, align 1
  %v2_14f54 = xor i1 %v6_14f50, %v5_14f50
  br i1 %v2_14f54, label %dec_label_pc_14f88, label %dec_label_pc_14f58

dec_label_pc_14f58:                               ; preds = %dec_label_pc_14f50
  %v0_14f58 = load i32, i32* @r4, align 4
  store i32 %v0_14f58, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14f5c

dec_label_pc_14f5c:                               ; preds = %dec_label_pc_14f5c.dec_label_pc_14f5c_crit_edge, %dec_label_pc_14f58
  %v0_14f60 = phi i32 [ %v12_14f68, %dec_label_pc_14f5c.dec_label_pc_14f5c_crit_edge ], [ %v0_14f6094, %dec_label_pc_14f58 ]
  %v0_14f5c = phi i32 [ %v0_14f5c.pre, %dec_label_pc_14f5c.dec_label_pc_14f5c_crit_edge ], [ %v0_14f5c93, %dec_label_pc_14f58 ]
  %v1_14f5c = inttoptr i32 %v0_14f5c to i32*
  %v2_14f5c = load i32, i32* %v1_14f5c, align 4
  %v3_14f5c = add i32 %v0_14f5c, 4
  %v4_14f5c = inttoptr i32 %v3_14f5c to i32*
  %v5_14f5c = load i32, i32* %v4_14f5c, align 4
  store i32 %v5_14f5c, i32* %r4.global-to-local, align 4
  %v6_14f5c = add i32 %v0_14f5c, 8
  %v7_14f5c = inttoptr i32 %v6_14f5c to i32*
  %v8_14f5c = load i32, i32* %v7_14f5c, align 4
  store i32 %v8_14f5c, i32* %ip.global-to-local, align 4
  %v9_14f5c = add i32 %v0_14f5c, 12
  %v10_14f5c = inttoptr i32 %v9_14f5c to i32*
  %v11_14f5c = load i32, i32* %v10_14f5c, align 4
  store i32 %v11_14f5c, i32* %lr.global-to-local, align 4
  %v12_14f5c = add i32 %v0_14f5c, 16
  store i32 %v12_14f5c, i32* %r1.global-to-local, align 4
  %v1_14f60 = inttoptr i32 %v0_14f60 to i32*
  store i32 %v2_14f5c, i32* %v1_14f60, align 4
  %v3_14f60 = add i32 %v0_14f60, 4
  %v4_14f60 = inttoptr i32 %v3_14f60 to i32*
  %v5_14f60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14f60, i32* %v4_14f60, align 4
  %v6_14f60 = add i32 %v0_14f60, 8
  %v7_14f60 = inttoptr i32 %v6_14f60 to i32*
  %v8_14f60 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14f60, i32* %v7_14f60, align 4
  %v9_14f60 = add i32 %v0_14f60, 12
  %v10_14f60 = inttoptr i32 %v9_14f60 to i32*
  %v11_14f60 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14f60, i32* %v10_14f60, align 4
  %v12_14f60 = add i32 %v0_14f60, 16
  store i32 %v12_14f60, i32* %r0.global-to-local, align 4
  %v0_14f64 = load i32, i32* %r1.global-to-local, align 4
  %v1_14f64 = inttoptr i32 %v0_14f64 to i32*
  %v2_14f64 = load i32, i32* %v1_14f64, align 4
  store i32 %v2_14f64, i32* @r3, align 4
  %v3_14f64 = add i32 %v0_14f64, 4
  %v4_14f64 = inttoptr i32 %v3_14f64 to i32*
  %v5_14f64 = load i32, i32* %v4_14f64, align 4
  store i32 %v5_14f64, i32* %r4.global-to-local, align 4
  %v6_14f64 = add i32 %v0_14f64, 8
  %v7_14f64 = inttoptr i32 %v6_14f64 to i32*
  %v8_14f64 = load i32, i32* %v7_14f64, align 4
  store i32 %v8_14f64, i32* @ip, align 4
  %v9_14f64 = add i32 %v0_14f64, 12
  %v10_14f64 = inttoptr i32 %v9_14f64 to i32*
  %v11_14f64 = load i32, i32* %v10_14f64, align 4
  store i32 %v11_14f64, i32* %lr.global-to-local, align 4
  %v12_14f64 = add i32 %v0_14f64, 16
  store i32 %v12_14f64, i32* @r1, align 4
  %v1_14f68 = inttoptr i32 %v12_14f60 to i32*
  store i32 %v2_14f64, i32* %v1_14f68, align 4
  %v3_14f68 = add i32 %v0_14f60, 20
  %v4_14f68 = inttoptr i32 %v3_14f68 to i32*
  %v5_14f68 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14f68, i32* %v4_14f68, align 4
  %v6_14f68 = add i32 %v0_14f60, 24
  %v7_14f68 = inttoptr i32 %v6_14f68 to i32*
  %v8_14f68 = load i32, i32* @ip, align 4
  store i32 %v8_14f68, i32* %v7_14f68, align 4
  %v9_14f68 = add i32 %v0_14f60, 28
  %v10_14f68 = inttoptr i32 %v9_14f68 to i32*
  %v11_14f68 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14f68, i32* %v10_14f68, align 4
  %v12_14f68 = add i32 %v0_14f60, 32
  store i32 %v12_14f68, i32* @r0, align 4
  %v0_14f6c = load i32, i32* %r2.global-to-local, align 4
  %v1_14f6c = add i32 %v0_14f6c, -32
  store i32 %v1_14f6c, i32* %r2.global-to-local, align 4
  %v3_14f6c = sub i32 31, %v0_14f6c
  %v4_14f6c = and i32 %v3_14f6c, %v0_14f6c
  %v5_14f6c = icmp slt i32 %v4_14f6c, 0
  %v6_14f6c = icmp slt i32 %v1_14f6c, 0
  %v2_14f70 = xor i1 %v6_14f6c, %v5_14f6c
  br i1 %v2_14f70, label %dec_label_pc_14f74, label %dec_label_pc_14f5c.dec_label_pc_14f5c_crit_edge

dec_label_pc_14f5c.dec_label_pc_14f5c_crit_edge:  ; preds = %dec_label_pc_14f5c
  %v0_14f5c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_14f5c

dec_label_pc_14f74:                               ; preds = %dec_label_pc_14f5c
  %v1_14f74 = add i32 %v0_14f6c, -16
  %v3_14f74 = add i32 %v0_14f6c, 2147483616
  %v4_14f74 = and i32 %v1_14f74, %v3_14f74
  %v5_14f74 = icmp slt i32 %v4_14f74, 0
  store i1 %v5_14f74, i1* %cpsr_v.global-to-local, align 1
  %v6_14f74 = icmp slt i32 %v1_14f74, 0
  store i1 %v6_14f74, i1* %cpsr_n.global-to-local, align 1
  %v7_14f74 = icmp eq i32 %v1_14f74, 0
  store i1 %v7_14f74, i1* %cpsr_z.global-to-local, align 1
  %v2_14f78 = xor i1 %v6_14f74, %v5_14f74
  br i1 %v2_14f78, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_14f74
  %v3_14f78 = load i32, i32* @r1, align 4
  %v4_14f78 = inttoptr i32 %v3_14f78 to i32*
  %v5_14f78 = load i32, i32* %v4_14f78, align 4
  store i32 %v5_14f78, i32* @r3, align 4
  %v6_14f78 = add i32 %v3_14f78, 4
  %v7_14f78 = inttoptr i32 %v6_14f78 to i32*
  %v8_14f78 = load i32, i32* %v7_14f78, align 4
  store i32 %v8_14f78, i32* %r4.global-to-local, align 4
  %v9_14f78 = add i32 %v3_14f78, 8
  %v10_14f78 = inttoptr i32 %v9_14f78 to i32*
  %v11_14f78 = load i32, i32* %v10_14f78, align 4
  store i32 %v11_14f78, i32* @ip, align 4
  %v12_14f78 = add i32 %v3_14f78, 12
  %v13_14f78 = inttoptr i32 %v12_14f78 to i32*
  %v14_14f78 = load i32, i32* %v13_14f78, align 4
  store i32 %v14_14f78, i32* %lr.global-to-local, align 4
  %v15_14f78 = add i32 %v3_14f78, 16
  store i32 %v15_14f78, i32* @r1, align 4
  %v4_14f7c = inttoptr i32 %v12_14f68 to i32*
  store i32 %v5_14f78, i32* %v4_14f7c, align 4
  %v6_14f7c = add i32 %v0_14f60, 36
  %v7_14f7c = inttoptr i32 %v6_14f7c to i32*
  %v8_14f7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_14f7c, i32* %v7_14f7c, align 4
  %v9_14f7c = add i32 %v0_14f60, 40
  %v10_14f7c = inttoptr i32 %v9_14f7c to i32*
  %v11_14f7c = load i32, i32* @ip, align 4
  store i32 %v11_14f7c, i32* %v10_14f7c, align 4
  %v12_14f7c = add i32 %v0_14f60, 44
  %v13_14f7c = inttoptr i32 %v12_14f7c to i32*
  %v14_14f7c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_14f7c, i32* %v13_14f7c, align 4
  %v15_14f7c = add i32 %v0_14f60, 48
  store i32 %v15_14f7c, i32* @r0, align 4
  %v3_14f80 = load i32, i32* %r2.global-to-local, align 4
  %v4_14f80 = add i32 %v3_14f80, -16
  store i32 %v4_14f80, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_14f74, %bb136
  %v3_14f90102111 = phi i32 [ %v15_14f7c, %bb136 ], [ %v12_14f68, %dec_label_pc_14f74 ]
  %v0_14f88.pre = phi i32 [ %v4_14f80, %bb136 ], [ %v1_14f6c, %dec_label_pc_14f74 ]
  %v2_14f84 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14f84, i32* @r4, align 4
  br label %dec_label_pc_14f88

dec_label_pc_14f88:                               ; preds = %dec_label_pc_14f50, %bb137
  %v3_14f90101 = phi i32 [ %v0_14f6094, %dec_label_pc_14f50 ], [ %v3_14f90102111, %bb137 ]
  %v0_14f88 = phi i32 [ %v1_14f50, %dec_label_pc_14f50 ], [ %v0_14f88.pre, %bb137 ]
  %v1_14f88 = add i32 %v0_14f88, 20
  store i32 %v1_14f88, i32* %r2.global-to-local, align 4
  %v3_14f88 = sub i32 0, %v0_14f88
  %v4_14f88 = and i32 %v1_14f88, %v3_14f88
  %v5_14f88 = icmp slt i32 %v4_14f88, 0
  store i1 %v5_14f88, i1* %cpsr_v.global-to-local, align 1
  %v6_14f88 = icmp slt i32 %v1_14f88, 0
  store i1 %v6_14f88, i1* %cpsr_n.global-to-local, align 1
  %v7_14f88 = icmp eq i32 %v1_14f88, 0
  store i1 %v7_14f88, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14f8c

dec_label_pc_14f8c:                               ; preds = %.thread115, %dec_label_pc_14f88
  %v0_14f9c.pre157 = phi i32 [ %v0_14f9c.pre, %.thread115 ], [ %v1_14f88, %dec_label_pc_14f88 ]
  %v3_14f90 = phi i32 [ %v3_14f9099116, %.thread115 ], [ %v3_14f90101, %dec_label_pc_14f88 ]
  %v1_14f94 = phi i1 [ %v1_14f98, %.thread115 ], [ %v5_14f88, %dec_label_pc_14f88 ]
  %v0_14f94 = phi i1 [ %v0_14f98, %.thread115 ], [ %v6_14f88, %dec_label_pc_14f88 ]
  %v2_14f8c = xor i1 %v1_14f94, %v0_14f94
  br i1 %v2_14f8c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_14f8c
  %v3_14f8c = load i32, i32* @r1, align 4
  %v4_14f8c = inttoptr i32 %v3_14f8c to i32*
  %v5_14f8c = load i32, i32* %v4_14f8c, align 4
  store i32 %v5_14f8c, i32* @r3, align 4
  %v6_14f8c = add i32 %v3_14f8c, 4
  %v7_14f8c = inttoptr i32 %v6_14f8c to i32*
  %v8_14f8c = load i32, i32* %v7_14f8c, align 4
  store i32 %v8_14f8c, i32* @ip, align 4
  %v9_14f8c = add i32 %v3_14f8c, 8
  %v10_14f8c = inttoptr i32 %v9_14f8c to i32*
  %v11_14f8c = load i32, i32* %v10_14f8c, align 4
  store i32 %v11_14f8c, i32* %lr.global-to-local, align 4
  %v12_14f8c = add i32 %v3_14f8c, 12
  store i32 %v12_14f8c, i32* @r1, align 4
  %v4_14f90 = inttoptr i32 %v3_14f90 to i32*
  store i32 %v5_14f8c, i32* %v4_14f90, align 4
  %v6_14f90 = add i32 %v3_14f90, 4
  %v7_14f90 = inttoptr i32 %v6_14f90 to i32*
  %v8_14f90 = load i32, i32* @ip, align 4
  store i32 %v8_14f90, i32* %v7_14f90, align 4
  %v9_14f90 = add i32 %v3_14f90, 8
  %v10_14f90 = inttoptr i32 %v9_14f90 to i32*
  %v11_14f90 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14f90, i32* %v10_14f90, align 4
  %v12_14f90 = add i32 %v3_14f90, 12
  store i32 %v12_14f90, i32* @r0, align 4
  %v3_14f94 = load i32, i32* %r2.global-to-local, align 4
  %v4_14f94 = add i32 %v3_14f94, -12
  store i32 %v4_14f94, i32* %r2.global-to-local, align 4
  %v6_14f94 = sub i32 11, %v3_14f94
  %v7_14f94 = and i32 %v6_14f94, %v3_14f94
  %v8_14f94 = icmp slt i32 %v7_14f94, 0
  store i1 %v8_14f94, i1* %cpsr_v.global-to-local, align 1
  %v9_14f94 = icmp slt i32 %v4_14f94, 0
  store i1 %v9_14f94, i1* %cpsr_n.global-to-local, align 1
  %v10_14f94 = icmp eq i32 %v3_14f94, 12
  store i1 %v10_14f94, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_14f8c, %bb138
  %v0_14f9c.pre = phi i32 [ %v4_14f94, %bb138 ], [ %v0_14f9c.pre157, %dec_label_pc_14f8c ]
  %v3_14f9099116 = phi i32 [ %v12_14f90, %bb138 ], [ %v3_14f90, %dec_label_pc_14f8c ]
  %v1_14f98 = phi i1 [ %v8_14f94, %bb138 ], [ %v1_14f94, %dec_label_pc_14f8c ]
  %v0_14f98 = phi i1 [ %v9_14f94, %bb138 ], [ %v0_14f94, %dec_label_pc_14f8c ]
  %v2_14f98 = xor i1 %v1_14f98, %v0_14f98
  br i1 %v2_14f98, label %dec_label_pc_14f9c, label %dec_label_pc_14f8c

dec_label_pc_14f9c:                               ; preds = %.thread115, %dec_label_pc_14f48
  %v4_14fac = phi i32 [ %v0_14f6094, %dec_label_pc_14f48 ], [ %v3_14f9099116, %.thread115 ]
  %v0_14f9c = phi i32 [ %v1_14f48, %dec_label_pc_14f48 ], [ %v0_14f9c.pre, %.thread115 ]
  %v1_14f9c = add i32 %v0_14f9c, 8
  store i32 %v1_14f9c, i32* %r2.global-to-local, align 4
  %v3_14f9c = sub i32 0, %v0_14f9c
  %v4_14f9c = and i32 %v1_14f9c, %v3_14f9c
  %v5_14f9c = icmp slt i32 %v4_14f9c, 0
  store i1 %v5_14f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_14f9c = icmp slt i32 %v1_14f9c, 0
  store i1 %v6_14f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_14f9c = icmp eq i32 %v1_14f9c, 0
  store i1 %v7_14f9c, i1* %cpsr_z.global-to-local, align 1
  %v2_14fa0 = xor i1 %v6_14f9c, %v5_14f9c
  br i1 %v2_14fa0, label %bb140, label %dec_label_pc_14fa4

dec_label_pc_14fa4:                               ; preds = %dec_label_pc_14f9c
  %v1_14fa4 = add i32 %v0_14f9c, 4
  store i32 %v1_14fa4, i32* %r2.global-to-local, align 4
  %v3_14fa4 = sub i32 -5, %v0_14f9c
  %v4_14fa4 = and i32 %v3_14fa4, %v1_14f9c
  %v5_14fa4 = icmp slt i32 %v4_14fa4, 0
  store i1 %v5_14fa4, i1* %cpsr_v.global-to-local, align 1
  %v6_14fa4 = icmp slt i32 %v1_14fa4, 0
  store i1 %v6_14fa4, i1* %cpsr_n.global-to-local, align 1
  %v7_14fa4 = icmp eq i32 %v1_14f9c, 4
  store i1 %v7_14fa4, i1* %cpsr_z.global-to-local, align 1
  %v2_14fa8 = xor i1 %v6_14fa4, %v5_14fa4
  %v3_14fa8 = load i32, i32* @r1, align 4
  %v4_14fa8 = inttoptr i32 %v3_14fa8 to i32*
  %v5_14fa8 = load i32, i32* %v4_14fa8, align 4
  store i32 %v5_14fa8, i32* @r3, align 4
  %v7_14fa8 = add i32 %v3_14fa8, 4
  br i1 %v2_14fa8, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_14fa4
  store i32 %v7_14fa8, i32* @r1, align 4
  %v5_14fac = inttoptr i32 %v4_14fac to i32*
  store i32 %v5_14fa8, i32* %v5_14fac, align 4
  %v6_14fac = load i32, i32* @r0, align 4
  %v7_14fac = add i32 %v6_14fac, 4
  store i32 %v7_14fac, i32* @r0, align 4
  %v0_14fbc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_14fa4
  %v7_14fb0 = inttoptr i32 %v7_14fa8 to i32*
  %v8_14fb0 = load i32, i32* %v7_14fb0, align 4
  store i32 %v8_14fb0, i32* @ip, align 4
  %v9_14fb0 = add i32 %v3_14fa8, 8
  store i32 %v9_14fb0, i32* @r1, align 4
  %v4_14fb4 = inttoptr i32 %v4_14fac to i32*
  store i32 %v5_14fa8, i32* %v4_14fb4, align 4
  %v6_14fb4 = add i32 %v4_14fac, 4
  %v7_14fb4 = inttoptr i32 %v6_14fb4 to i32*
  %v8_14fb4 = load i32, i32* @ip, align 4
  store i32 %v8_14fb4, i32* %v7_14fb4, align 4
  %v9_14fb4 = add i32 %v4_14fac, 8
  store i32 %v9_14fb4, i32* @r0, align 4
  %v3_14fb8 = load i32, i32* %r2.global-to-local, align 4
  %v4_14fb8 = add i32 %v3_14fb8, -4
  store i32 %v4_14fb8, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_14f9c, %bb, %dec_label_pc_1516c, %dec_label_pc_15100, %dec_label_pc_15094, %bb139
  %v0_14fbc = phi i32 [ %v0_14fbc.pre, %.thread122 ], [ %v2_1500c, %.thread128 ], [ %v1_14f9c, %dec_label_pc_14f9c ], [ %v2_14f30, %bb ], [ %v0_14fbc61, %dec_label_pc_1516c ], [ %v0_14fbc60, %dec_label_pc_15100 ], [ %v0_14fbc59, %dec_label_pc_15094 ], [ %v4_14fb8, %bb139 ]
  %v1_14fbc = add i32 %v0_14fbc, 4
  store i32 %v1_14fbc, i32* %r2.global-to-local, align 4
  %v3_14fbc = sub i32 0, %v0_14fbc
  %v4_14fbc = and i32 %v1_14fbc, %v3_14fbc
  %v5_14fbc = icmp slt i32 %v4_14fbc, 0
  store i1 %v5_14fbc, i1* %cpsr_v.global-to-local, align 1
  %v6_14fbc = icmp slt i32 %v1_14fbc, 0
  store i1 %v6_14fbc, i1* %cpsr_n.global-to-local, align 1
  %v7_14fbc = icmp eq i32 %v1_14fbc, 0
  store i1 %v7_14fbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14fbc, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_14fc4.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_14fc0 = load i8*, i8** %stack_var_-8, align 4
  %v4_14fc0 = ptrtoint i8* %v3_14fc0 to i32
  store i32 %v4_14fc0, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_14fc4 = phi i32 [ %v0_14fc4.pre, %bb140.bb142_crit_edge ], [ %v8_14f2c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_14fbc, i32 %v0_14fc4)
  %v0_14fc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_14fc8 = add i32 %v0_14fc8, -2
  %v3_14fc8 = sub i32 1, %v0_14fc8
  %v4_14fc8 = and i32 %v3_14fc8, %v0_14fc8
  %v5_14fc8 = icmp slt i32 %v4_14fc8, 0
  store i1 %v5_14fc8, i1* %cpsr_v.global-to-local, align 1
  %v6_14fc8 = icmp slt i32 %v1_14fc8, 0
  store i1 %v6_14fc8, i1* %cpsr_n.global-to-local, align 1
  %v7_14fc8 = icmp eq i32 %v0_14fc8, 2
  store i1 %v7_14fc8, i1* %cpsr_z.global-to-local, align 1
  %v0_14fcc = load i32, i32* @r1, align 4
  %v1_14fcc = inttoptr i32 %v0_14fcc to i8*
  %v2_14fcc = load i8, i8* %v1_14fcc, align 1
  %v5_14fcc = add i32 %v0_14fcc, 1
  store i32 %v5_14fcc, i32* %r1.global-to-local, align 4
  %v2_14fd0 = load i32, i32* @r0, align 4
  %v3_14fd0 = inttoptr i32 %v2_14fd0 to i8*
  store i8 %v2_14fcc, i8* %v3_14fd0, align 1
  %v4_14fd0 = load i32, i32* @r0, align 4
  %v5_14fd0 = add i32 %v4_14fd0, 1
  store i32 %v5_14fd0, i32* %r0.global-to-local, align 4
  %v0_14fd4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14fd4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14fd4 = xor i1 %v0_14fd4, %v1_14fd4
  br i1 %v2_14fd4, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_14fd4 = load i32, i32* %r1.global-to-local, align 4
  %v4_14fd4 = inttoptr i32 %v3_14fd4 to i8*
  %v5_14fd4 = load i8, i8* %v4_14fd4, align 1
  %v8_14fd4 = add i32 %v3_14fd4, 1
  store i32 %v8_14fd4, i32* %r1.global-to-local, align 4
  %v6_14fd8 = inttoptr i32 %v5_14fd0 to i8*
  store i8 %v5_14fd4, i8* %v6_14fd8, align 1
  %v7_14fd8 = load i32, i32* %r0.global-to-local, align 4
  %v8_14fd8 = add i32 %v7_14fd8, 1
  store i32 %v8_14fd8, i32* %r0.global-to-local, align 4
  %v1_14fdc.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14fdc.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_14fe0 = phi i32 [ %v8_14fd8, %bb143 ], [ %v5_14fd0, %bb142 ]
  %v2_14fe0 = phi i1 [ %v2_14fdc.pre, %bb143 ], [ %v1_14fd4, %bb142 ]
  %v1_14fe0 = phi i1 [ %v1_14fdc.pre, %bb143 ], [ %v0_14fd4, %bb142 ]
  %v0_14fdc = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14fdc = xor i1 %v2_14fe0, %v1_14fe0
  %v4_14fdc = or i1 %v0_14fdc, %v3_14fdc
  br i1 %v4_14fdc, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_14fdc = load i32, i32* %r1.global-to-local, align 4
  %v6_14fdc = inttoptr i32 %v5_14fdc to i8*
  %v7_14fdc = load i8, i8* %v6_14fdc, align 1
  %v10_14fdc = add i32 %v5_14fdc, 1
  store i32 %v10_14fdc, i32* %r1.global-to-local, align 4
  %v8_14fe0 = inttoptr i32 %v7_14fe0 to i8*
  store i8 %v7_14fdc, i8* %v8_14fe0, align 1
  %v9_14fe0 = load i32, i32* %r0.global-to-local, align 4
  %v10_14fe0 = add i32 %v9_14fe0, 1
  store i32 %v10_14fe0, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_14fe4 = load i8*, i8** %stack_var_-8, align 4
  %v3_14fe4 = ptrtoint i8* %v2_14fe4 to i32
  store i32 %v3_14fe4, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_14f2c)
  %v0_14fec.pre = load i32, i32* @ip, align 4
  %v0_14ff4.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_14ff8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_14fec

dec_label_pc_14fec:                               ; preds = %dec_label_pc_14f38, %.thread126
  %v2_14ff8 = phi i32 [ %v1_14f20, %dec_label_pc_14f38 ], [ %v2_14ff8.pre, %.thread126 ]
  %v0_14ff4 = phi i32 [ %v0_14f20, %dec_label_pc_14f38 ], [ %v0_14ff4.pre, %.thread126 ]
  %v0_14fec = phi i32 [ %v1_14f38, %dec_label_pc_14f38 ], [ %v0_14fec.pre, %.thread126 ]
  %v1_14fec = sub i32 4, %v0_14fec
  store i32 %v1_14fec, i32* @ip, align 4
  %v1_14ff0 = add i32 %v1_14fec, -2
  %v3_14ff0 = sub i32 1, %v1_14fec
  %v4_14ff0 = and i32 %v3_14ff0, %v1_14fec
  %v5_14ff0 = icmp slt i32 %v4_14ff0, 0
  store i1 %v5_14ff0, i1* %cpsr_v.global-to-local, align 1
  %v6_14ff0 = icmp slt i32 %v1_14ff0, 0
  store i1 %v6_14ff0, i1* %cpsr_n.global-to-local, align 1
  %v7_14ff0 = icmp eq i32 %v1_14fec, 2
  store i1 %v7_14ff0, i1* %cpsr_z.global-to-local, align 1
  %v1_14ff4 = inttoptr i32 %v0_14ff4 to i8*
  %v2_14ff4 = load i8, i8* %v1_14ff4, align 1
  %v3_14ff4 = zext i8 %v2_14ff4 to i32
  store i32 %v3_14ff4, i32* @r3, align 4
  %v5_14ff4 = add i32 %v0_14ff4, 1
  store i32 %v5_14ff4, i32* @r1, align 4
  %v3_14ff8 = inttoptr i32 %v2_14ff8 to i8*
  store i8 %v2_14ff4, i8* %v3_14ff8, align 1
  %v4_14ff8 = load i32, i32* @r0, align 4
  %v5_14ff8 = add i32 %v4_14ff8, 1
  store i32 %v5_14ff8, i32* @r0, align 4
  %v0_14ffc = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14ffc = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14ffc = xor i1 %v0_14ffc, %v1_14ffc
  br i1 %v2_14ffc, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_14fec
  %v3_14ffc = load i32, i32* @r1, align 4
  %v4_14ffc = inttoptr i32 %v3_14ffc to i8*
  %v5_14ffc = load i8, i8* %v4_14ffc, align 1
  %v6_14ffc = zext i8 %v5_14ffc to i32
  store i32 %v6_14ffc, i32* @r3, align 4
  %v8_14ffc = add i32 %v3_14ffc, 1
  store i32 %v8_14ffc, i32* @r1, align 4
  %v6_15000 = inttoptr i32 %v5_14ff8 to i8*
  store i8 %v5_14ffc, i8* %v6_15000, align 1
  %v7_15000 = load i32, i32* @r0, align 4
  %v8_15000 = add i32 %v7_15000, 1
  store i32 %v8_15000, i32* @r0, align 4
  %v1_15004.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15004.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_14fec, %bb145
  %v7_15008 = phi i32 [ %v8_15000, %bb145 ], [ %v5_14ff8, %dec_label_pc_14fec ]
  %v2_15008 = phi i1 [ %v2_15004.pre, %bb145 ], [ %v1_14ffc, %dec_label_pc_14fec ]
  %v1_15008 = phi i1 [ %v1_15004.pre, %bb145 ], [ %v0_14ffc, %dec_label_pc_14fec ]
  %v0_15004 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15004 = xor i1 %v2_15008, %v1_15008
  %v4_15004 = or i1 %v0_15004, %v3_15004
  br i1 %v4_15004, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_15004 = load i32, i32* @r1, align 4
  %v6_15004 = inttoptr i32 %v5_15004 to i8*
  %v7_15004 = load i8, i8* %v6_15004, align 1
  %v8_15004 = zext i8 %v7_15004 to i32
  store i32 %v8_15004, i32* @r3, align 4
  %v10_15004 = add i32 %v5_15004, 1
  store i32 %v10_15004, i32* @r1, align 4
  %v8_15008 = inttoptr i32 %v7_15008 to i8*
  store i8 %v7_15004, i8* %v8_15008, align 1
  %v9_15008 = load i32, i32* @r0, align 4
  %v10_15008 = add i32 %v9_15008, 1
  store i32 %v10_15008, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_1513c77 = phi i32 [ %v10_15008, %bb146 ], [ %v7_15008, %.thread127 ]
  %v0_1500c = load i32, i32* %r2.global-to-local, align 4
  %v1_1500c = load i32, i32* @ip, align 4
  %v2_1500c = sub i32 %v0_1500c, %v1_1500c
  store i32 %v2_1500c, i32* %r2.global-to-local, align 4
  %v4_1500c = xor i32 %v1_1500c, %v0_1500c
  %v5_1500c = xor i32 %v2_1500c, %v0_1500c
  %v6_1500c = and i32 %v5_1500c, %v4_1500c
  %v7_1500c = icmp slt i32 %v6_1500c, 0
  store i1 %v7_1500c, i1* %cpsr_v.global-to-local, align 1
  %v8_1500c = icmp slt i32 %v2_1500c, 0
  store i1 %v8_1500c, i1* %cpsr_n.global-to-local, align 1
  %v9_1500c = icmp eq i32 %v0_1500c, %v1_1500c
  store i1 %v9_1500c, i1* %cpsr_z.global-to-local, align 1
  %v2_15010 = xor i1 %v8_1500c, %v7_1500c
  br i1 %v2_15010, label %bb140, label %dec_label_pc_15014

dec_label_pc_15014:                               ; preds = %.thread128
  %v0_15014 = load i32, i32* @r1, align 4
  %v1_15014 = urem i32 %v0_15014, 4
  store i32 %v1_15014, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15014 = icmp eq i32 %v1_15014, 0
  store i1 %v2_15014, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_15014 to i2
  br i1 %v2_15014, label %dec_label_pc_14f48, label %dec_label_pc_1501c

dec_label_pc_1501c:                               ; preds = %dec_label_pc_14f40, %dec_label_pc_15014
  %v0_1513c76 = phi i32 [ %v1_14f20, %dec_label_pc_14f40 ], [ %v0_1513c77, %dec_label_pc_15014 ]
  %v0_150a4 = phi i32 [ %v2_14f30, %dec_label_pc_14f40 ], [ %v2_1500c, %dec_label_pc_15014 ]
  %v0_15024.off0 = phi i2 [ %extract.t, %dec_label_pc_14f40 ], [ %extract.t131, %dec_label_pc_15014 ]
  %v0_1501c = phi i32 [ %v0_14f20, %dec_label_pc_14f40 ], [ %v0_15014, %dec_label_pc_15014 ]
  %v1_1501c = and i32 %v0_1501c, -4
  store i32 %v1_1501c, i32* %r1.global-to-local, align 4
  %v1_15020 = inttoptr i32 %v1_1501c to i32*
  %v2_15020 = load i32, i32* %v1_15020, align 4
  store i32 %v2_15020, i32* %lr.global-to-local, align 4
  %v4_15020 = add i32 %v1_1501c, 4
  store i32 %v4_15020, i32* %r1.global-to-local, align 4
  %v1_1509c = add i32 %v0_150a4, -12
  %v3_1509c = sub i32 11, %v0_150a4
  %v4_1509c = and i32 %v3_1509c, %v0_150a4
  %v5_1509c = icmp slt i32 %v4_1509c, 0
  store i1 %v5_1509c, i1* %cpsr_v.global-to-local, align 1
  %v6_1509c = icmp slt i32 %v1_1509c, 0
  store i1 %v6_1509c, i1* %cpsr_n.global-to-local, align 1
  %v7_1509c = icmp eq i32 %v0_150a4, 12
  store i1 %v7_1509c, i1* %cpsr_z.global-to-local, align 1
  %v2_150a0 = xor i1 %v6_1509c, %v5_1509c
  switch i2 %v0_15024.off0, label %dec_label_pc_15030 [
    i2 -1, label %dec_label_pc_15108
    i2 -2, label %dec_label_pc_1509c
  ]

dec_label_pc_15030:                               ; preds = %dec_label_pc_1501c
  br i1 %v2_150a0, label %dec_label_pc_1507c, label %dec_label_pc_15038

dec_label_pc_15038:                               ; preds = %dec_label_pc_15030
  store i32 %v1_1509c, i32* %r2.global-to-local, align 4
  %v3_1503c = load i32, i32* @r4, align 4
  store i32 %v3_1503c, i32* %stack_var_-16, align 4
  %v6_1503c = load i32, i32* @r5, align 4
  store i32 %v6_1503c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15040

dec_label_pc_15040:                               ; preds = %dec_label_pc_15040.dec_label_pc_15040_crit_edge, %dec_label_pc_15038
  %v0_15064 = phi i32 [ %v12_15064, %dec_label_pc_15040.dec_label_pc_15040_crit_edge ], [ %v0_1513c76, %dec_label_pc_15038 ]
  %v0_15044 = phi i32 [ %v0_15044.pre, %dec_label_pc_15040.dec_label_pc_15040_crit_edge ], [ %v4_15020, %dec_label_pc_15038 ]
  %v0_15040 = phi i32 [ %v0_15040.pre, %dec_label_pc_15040.dec_label_pc_15040_crit_edge ], [ %v2_15020, %dec_label_pc_15038 ]
  %v3_15040 = udiv i32 %v0_15040, 256
  %v1_15044 = inttoptr i32 %v0_15044 to i32*
  %v2_15044 = load i32, i32* %v1_15044, align 4
  store i32 %v2_15044, i32* %r4.global-to-local, align 4
  %v3_15044 = add i32 %v0_15044, 4
  %v4_15044 = inttoptr i32 %v3_15044 to i32*
  %v5_15044 = load i32, i32* %v4_15044, align 4
  store i32 %v5_15044, i32* %r5.global-to-local, align 4
  %v6_15044 = add i32 %v0_15044, 8
  %v7_15044 = inttoptr i32 %v6_15044 to i32*
  %v8_15044 = load i32, i32* %v7_15044, align 4
  store i32 %v8_15044, i32* %ip.global-to-local, align 4
  %v9_15044 = add i32 %v0_15044, 12
  %v10_15044 = inttoptr i32 %v9_15044 to i32*
  %v11_15044 = load i32, i32* %v10_15044, align 4
  store i32 %v11_15044, i32* %lr.global-to-local, align 4
  %v12_15044 = add i32 %v0_15044, 16
  store i32 %v12_15044, i32* %r1.global-to-local, align 4
  %v4_15048 = mul i32 %v2_15044, 16777216
  %v5_15048 = or i32 %v4_15048, %v3_15040
  store i32 %v5_15048, i32* @r3, align 4
  %v3_1504c = udiv i32 %v2_15044, 256
  %v4_15050 = mul i32 %v5_15044, 16777216
  %v5_15050 = or i32 %v4_15050, %v3_1504c
  store i32 %v5_15050, i32* %r4.global-to-local, align 4
  %v3_15054 = udiv i32 %v5_15044, 256
  %v4_15058 = mul i32 %v8_15044, 16777216
  %v5_15058 = or i32 %v4_15058, %v3_15054
  store i32 %v5_15058, i32* %r5.global-to-local, align 4
  %v3_1505c = udiv i32 %v8_15044, 256
  %v4_15060 = mul i32 %v11_15044, 16777216
  %v5_15060 = or i32 %v4_15060, %v3_1505c
  store i32 %v5_15060, i32* @ip, align 4
  %v1_15064 = inttoptr i32 %v0_15064 to i32*
  store i32 %v5_15048, i32* %v1_15064, align 4
  %v3_15064 = add i32 %v0_15064, 4
  %v4_15064 = inttoptr i32 %v3_15064 to i32*
  %v5_15064 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15064, i32* %v4_15064, align 4
  %v6_15064 = add i32 %v0_15064, 8
  %v7_15064 = inttoptr i32 %v6_15064 to i32*
  %v8_15064 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15064, i32* %v7_15064, align 4
  %v9_15064 = add i32 %v0_15064, 12
  %v10_15064 = inttoptr i32 %v9_15064 to i32*
  %v11_15064 = load i32, i32* @ip, align 4
  store i32 %v11_15064, i32* %v10_15064, align 4
  %v12_15064 = add i32 %v0_15064, 16
  store i32 %v12_15064, i32* @r0, align 4
  %v0_15068 = load i32, i32* %r2.global-to-local, align 4
  %v1_15068 = add i32 %v0_15068, -16
  store i32 %v1_15068, i32* %r2.global-to-local, align 4
  %v3_15068 = sub i32 15, %v0_15068
  %v4_15068 = and i32 %v3_15068, %v0_15068
  %v5_15068 = icmp slt i32 %v4_15068, 0
  %v6_15068 = icmp slt i32 %v1_15068, 0
  %v2_1506c = xor i1 %v6_15068, %v5_15068
  br i1 %v2_1506c, label %dec_label_pc_15070, label %dec_label_pc_15040.dec_label_pc_15040_crit_edge

dec_label_pc_15040.dec_label_pc_15040_crit_edge:  ; preds = %dec_label_pc_15040
  %v0_15040.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15044.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15040

dec_label_pc_15070:                               ; preds = %dec_label_pc_15040
  %v2_15070 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15070, i32* @r4, align 4
  %v5_15070 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15070, i32* @r5, align 4
  %v1_15074 = add i32 %v0_15068, -4
  store i32 %v1_15074, i32* %r2.global-to-local, align 4
  %v3_15074 = add i32 %v0_15068, 2147483632
  %v4_15074 = and i32 %v1_15074, %v3_15074
  %v5_15074 = icmp slt i32 %v4_15074, 0
  store i1 %v5_15074, i1* %cpsr_v.global-to-local, align 1
  %v6_15074 = icmp slt i32 %v1_15074, 0
  store i1 %v6_15074, i1* %cpsr_n.global-to-local, align 1
  %v7_15074 = icmp eq i32 %v1_15074, 0
  store i1 %v7_15074, i1* %cpsr_z.global-to-local, align 1
  %v2_15078 = xor i1 %v6_15074, %v5_15074
  br i1 %v2_15078, label %dec_label_pc_15094, label %dec_label_pc_1507c

dec_label_pc_1507c:                               ; preds = %dec_label_pc_15070, %dec_label_pc_15030, %dec_label_pc_1507c
  %v1_15088 = phi i32 [ %v4_15088, %dec_label_pc_1507c ], [ %v12_15064, %dec_label_pc_15070 ], [ %v0_1513c76, %dec_label_pc_15030 ]
  %v0_1507c = load i32, i32* %lr.global-to-local, align 4
  %v3_1507c = udiv i32 %v0_1507c, 256
  store i32 %v3_1507c, i32* %ip.global-to-local, align 4
  %v0_15080 = load i32, i32* %r1.global-to-local, align 4
  %v1_15080 = inttoptr i32 %v0_15080 to i32*
  %v2_15080 = load i32, i32* %v1_15080, align 4
  store i32 %v2_15080, i32* %lr.global-to-local, align 4
  %v4_15080 = add i32 %v0_15080, 4
  store i32 %v4_15080, i32* %r1.global-to-local, align 4
  %v4_15084 = mul i32 %v2_15080, 16777216
  %v5_15084 = or i32 %v4_15084, %v3_1507c
  store i32 %v5_15084, i32* @ip, align 4
  %v2_15088 = inttoptr i32 %v1_15088 to i32*
  store i32 %v5_15084, i32* %v2_15088, align 4
  %v3_15088 = load i32, i32* @r0, align 4
  %v4_15088 = add i32 %v3_15088, 4
  store i32 %v4_15088, i32* @r0, align 4
  %v0_1508c = load i32, i32* %r2.global-to-local, align 4
  %v1_1508c = add i32 %v0_1508c, -4
  store i32 %v1_1508c, i32* %r2.global-to-local, align 4
  %v3_1508c = sub i32 3, %v0_1508c
  %v4_1508c = and i32 %v3_1508c, %v0_1508c
  %v5_1508c = icmp slt i32 %v4_1508c, 0
  %v6_1508c = icmp slt i32 %v1_1508c, 0
  %v2_15090 = xor i1 %v6_1508c, %v5_1508c
  br i1 %v2_15090, label %dec_label_pc_15094.loopexit, label %dec_label_pc_1507c

dec_label_pc_15094.loopexit:                      ; preds = %dec_label_pc_1507c
  %v7_1508c = icmp eq i32 %v0_1508c, 4
  store i1 %v5_1508c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_1508c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_1508c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15094

dec_label_pc_15094:                               ; preds = %dec_label_pc_15094.loopexit, %dec_label_pc_15070
  %v0_14fbc59 = phi i32 [ %v1_1508c, %dec_label_pc_15094.loopexit ], [ %v1_15074, %dec_label_pc_15070 ]
  %v0_15094 = load i32, i32* %r1.global-to-local, align 4
  %v1_15094 = add i32 %v0_15094, -3
  store i32 %v1_15094, i32* @r1, align 4
  br label %bb140

dec_label_pc_1509c:                               ; preds = %dec_label_pc_1501c
  br i1 %v2_150a0, label %dec_label_pc_150e8, label %dec_label_pc_150a4

dec_label_pc_150a4:                               ; preds = %dec_label_pc_1509c
  store i32 %v1_1509c, i32* %r2.global-to-local, align 4
  %v3_150a8 = load i32, i32* @r4, align 4
  store i32 %v3_150a8, i32* %stack_var_-16, align 4
  %v6_150a8 = load i32, i32* @r5, align 4
  store i32 %v6_150a8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_150ac

dec_label_pc_150ac:                               ; preds = %dec_label_pc_150ac.dec_label_pc_150ac_crit_edge, %dec_label_pc_150a4
  %v0_150d0 = phi i32 [ %v12_150d0, %dec_label_pc_150ac.dec_label_pc_150ac_crit_edge ], [ %v0_1513c76, %dec_label_pc_150a4 ]
  %v0_150b0 = phi i32 [ %v0_150b0.pre, %dec_label_pc_150ac.dec_label_pc_150ac_crit_edge ], [ %v4_15020, %dec_label_pc_150a4 ]
  %v0_150ac = phi i32 [ %v0_150ac.pre, %dec_label_pc_150ac.dec_label_pc_150ac_crit_edge ], [ %v2_15020, %dec_label_pc_150a4 ]
  %v3_150ac = udiv i32 %v0_150ac, 65536
  %v1_150b0 = inttoptr i32 %v0_150b0 to i32*
  %v2_150b0 = load i32, i32* %v1_150b0, align 4
  store i32 %v2_150b0, i32* %r4.global-to-local, align 4
  %v3_150b0 = add i32 %v0_150b0, 4
  %v4_150b0 = inttoptr i32 %v3_150b0 to i32*
  %v5_150b0 = load i32, i32* %v4_150b0, align 4
  store i32 %v5_150b0, i32* %r5.global-to-local, align 4
  %v6_150b0 = add i32 %v0_150b0, 8
  %v7_150b0 = inttoptr i32 %v6_150b0 to i32*
  %v8_150b0 = load i32, i32* %v7_150b0, align 4
  store i32 %v8_150b0, i32* %ip.global-to-local, align 4
  %v9_150b0 = add i32 %v0_150b0, 12
  %v10_150b0 = inttoptr i32 %v9_150b0 to i32*
  %v11_150b0 = load i32, i32* %v10_150b0, align 4
  store i32 %v11_150b0, i32* %lr.global-to-local, align 4
  %v12_150b0 = add i32 %v0_150b0, 16
  store i32 %v12_150b0, i32* %r1.global-to-local, align 4
  %v4_150b4 = mul i32 %v2_150b0, 65536
  %v5_150b4 = or i32 %v4_150b4, %v3_150ac
  store i32 %v5_150b4, i32* @r3, align 4
  %v3_150b8 = udiv i32 %v2_150b0, 65536
  %v4_150bc = mul i32 %v5_150b0, 65536
  %v5_150bc = or i32 %v4_150bc, %v3_150b8
  store i32 %v5_150bc, i32* %r4.global-to-local, align 4
  %v3_150c0 = udiv i32 %v5_150b0, 65536
  %v4_150c4 = mul i32 %v8_150b0, 65536
  %v5_150c4 = or i32 %v4_150c4, %v3_150c0
  store i32 %v5_150c4, i32* %r5.global-to-local, align 4
  %v3_150c8 = udiv i32 %v8_150b0, 65536
  %v4_150cc = mul i32 %v11_150b0, 65536
  %v5_150cc = or i32 %v4_150cc, %v3_150c8
  store i32 %v5_150cc, i32* @ip, align 4
  %v1_150d0 = inttoptr i32 %v0_150d0 to i32*
  store i32 %v5_150b4, i32* %v1_150d0, align 4
  %v3_150d0 = add i32 %v0_150d0, 4
  %v4_150d0 = inttoptr i32 %v3_150d0 to i32*
  %v5_150d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_150d0, i32* %v4_150d0, align 4
  %v6_150d0 = add i32 %v0_150d0, 8
  %v7_150d0 = inttoptr i32 %v6_150d0 to i32*
  %v8_150d0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_150d0, i32* %v7_150d0, align 4
  %v9_150d0 = add i32 %v0_150d0, 12
  %v10_150d0 = inttoptr i32 %v9_150d0 to i32*
  %v11_150d0 = load i32, i32* @ip, align 4
  store i32 %v11_150d0, i32* %v10_150d0, align 4
  %v12_150d0 = add i32 %v0_150d0, 16
  store i32 %v12_150d0, i32* @r0, align 4
  %v0_150d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_150d4 = add i32 %v0_150d4, -16
  store i32 %v1_150d4, i32* %r2.global-to-local, align 4
  %v3_150d4 = sub i32 15, %v0_150d4
  %v4_150d4 = and i32 %v3_150d4, %v0_150d4
  %v5_150d4 = icmp slt i32 %v4_150d4, 0
  %v6_150d4 = icmp slt i32 %v1_150d4, 0
  %v2_150d8 = xor i1 %v6_150d4, %v5_150d4
  br i1 %v2_150d8, label %dec_label_pc_150dc, label %dec_label_pc_150ac.dec_label_pc_150ac_crit_edge

dec_label_pc_150ac.dec_label_pc_150ac_crit_edge:  ; preds = %dec_label_pc_150ac
  %v0_150ac.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_150b0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_150ac

dec_label_pc_150dc:                               ; preds = %dec_label_pc_150ac
  %v2_150dc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_150dc, i32* @r4, align 4
  %v5_150dc = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_150dc, i32* @r5, align 4
  %v1_150e0 = add i32 %v0_150d4, -4
  store i32 %v1_150e0, i32* %r2.global-to-local, align 4
  %v3_150e0 = add i32 %v0_150d4, 2147483632
  %v4_150e0 = and i32 %v1_150e0, %v3_150e0
  %v5_150e0 = icmp slt i32 %v4_150e0, 0
  store i1 %v5_150e0, i1* %cpsr_v.global-to-local, align 1
  %v6_150e0 = icmp slt i32 %v1_150e0, 0
  store i1 %v6_150e0, i1* %cpsr_n.global-to-local, align 1
  %v7_150e0 = icmp eq i32 %v1_150e0, 0
  store i1 %v7_150e0, i1* %cpsr_z.global-to-local, align 1
  %v2_150e4 = xor i1 %v6_150e0, %v5_150e0
  br i1 %v2_150e4, label %dec_label_pc_15100, label %dec_label_pc_150e8

dec_label_pc_150e8:                               ; preds = %dec_label_pc_150dc, %dec_label_pc_1509c, %dec_label_pc_150e8
  %v1_150f4 = phi i32 [ %v4_150f4, %dec_label_pc_150e8 ], [ %v12_150d0, %dec_label_pc_150dc ], [ %v0_1513c76, %dec_label_pc_1509c ]
  %v0_150e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_150e8 = udiv i32 %v0_150e8, 65536
  store i32 %v3_150e8, i32* %ip.global-to-local, align 4
  %v0_150ec = load i32, i32* %r1.global-to-local, align 4
  %v1_150ec = inttoptr i32 %v0_150ec to i32*
  %v2_150ec = load i32, i32* %v1_150ec, align 4
  store i32 %v2_150ec, i32* %lr.global-to-local, align 4
  %v4_150ec = add i32 %v0_150ec, 4
  store i32 %v4_150ec, i32* %r1.global-to-local, align 4
  %v4_150f0 = mul i32 %v2_150ec, 65536
  %v5_150f0 = or i32 %v4_150f0, %v3_150e8
  store i32 %v5_150f0, i32* @ip, align 4
  %v2_150f4 = inttoptr i32 %v1_150f4 to i32*
  store i32 %v5_150f0, i32* %v2_150f4, align 4
  %v3_150f4 = load i32, i32* @r0, align 4
  %v4_150f4 = add i32 %v3_150f4, 4
  store i32 %v4_150f4, i32* @r0, align 4
  %v0_150f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_150f8 = add i32 %v0_150f8, -4
  store i32 %v1_150f8, i32* %r2.global-to-local, align 4
  %v3_150f8 = sub i32 3, %v0_150f8
  %v4_150f8 = and i32 %v3_150f8, %v0_150f8
  %v5_150f8 = icmp slt i32 %v4_150f8, 0
  %v6_150f8 = icmp slt i32 %v1_150f8, 0
  %v2_150fc = xor i1 %v6_150f8, %v5_150f8
  br i1 %v2_150fc, label %dec_label_pc_15100.loopexit, label %dec_label_pc_150e8

dec_label_pc_15100.loopexit:                      ; preds = %dec_label_pc_150e8
  %v7_150f8 = icmp eq i32 %v0_150f8, 4
  store i1 %v5_150f8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_150f8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_150f8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15100

dec_label_pc_15100:                               ; preds = %dec_label_pc_15100.loopexit, %dec_label_pc_150dc
  %v0_14fbc60 = phi i32 [ %v1_150f8, %dec_label_pc_15100.loopexit ], [ %v1_150e0, %dec_label_pc_150dc ]
  %v0_15100 = load i32, i32* %r1.global-to-local, align 4
  %v1_15100 = add i32 %v0_15100, -2
  store i32 %v1_15100, i32* @r1, align 4
  br label %bb140

dec_label_pc_15108:                               ; preds = %dec_label_pc_1501c
  br i1 %v2_150a0, label %dec_label_pc_15154, label %dec_label_pc_15110

dec_label_pc_15110:                               ; preds = %dec_label_pc_15108
  store i32 %v1_1509c, i32* %r2.global-to-local, align 4
  %v3_15114 = load i32, i32* @r4, align 4
  store i32 %v3_15114, i32* %stack_var_-16, align 4
  %v6_15114 = load i32, i32* @r5, align 4
  store i32 %v6_15114, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15118

dec_label_pc_15118:                               ; preds = %dec_label_pc_15118.dec_label_pc_15118_crit_edge, %dec_label_pc_15110
  %v0_1513c = phi i32 [ %v12_1513c, %dec_label_pc_15118.dec_label_pc_15118_crit_edge ], [ %v0_1513c76, %dec_label_pc_15110 ]
  %v0_1511c = phi i32 [ %v0_1511c.pre, %dec_label_pc_15118.dec_label_pc_15118_crit_edge ], [ %v4_15020, %dec_label_pc_15110 ]
  %v0_15118 = phi i32 [ %v0_15118.pre, %dec_label_pc_15118.dec_label_pc_15118_crit_edge ], [ %v2_15020, %dec_label_pc_15110 ]
  %v3_15118 = udiv i32 %v0_15118, 16777216
  %v1_1511c = inttoptr i32 %v0_1511c to i32*
  %v2_1511c = load i32, i32* %v1_1511c, align 4
  store i32 %v2_1511c, i32* %r4.global-to-local, align 4
  %v3_1511c = add i32 %v0_1511c, 4
  %v4_1511c = inttoptr i32 %v3_1511c to i32*
  %v5_1511c = load i32, i32* %v4_1511c, align 4
  store i32 %v5_1511c, i32* %r5.global-to-local, align 4
  %v6_1511c = add i32 %v0_1511c, 8
  %v7_1511c = inttoptr i32 %v6_1511c to i32*
  %v8_1511c = load i32, i32* %v7_1511c, align 4
  store i32 %v8_1511c, i32* %ip.global-to-local, align 4
  %v9_1511c = add i32 %v0_1511c, 12
  %v10_1511c = inttoptr i32 %v9_1511c to i32*
  %v11_1511c = load i32, i32* %v10_1511c, align 4
  store i32 %v11_1511c, i32* %lr.global-to-local, align 4
  %v12_1511c = add i32 %v0_1511c, 16
  store i32 %v12_1511c, i32* %r1.global-to-local, align 4
  %v4_15120 = mul i32 %v2_1511c, 256
  %v5_15120 = or i32 %v4_15120, %v3_15118
  store i32 %v5_15120, i32* @r3, align 4
  %v3_15124 = udiv i32 %v2_1511c, 16777216
  %v4_15128 = mul i32 %v5_1511c, 256
  %v5_15128 = or i32 %v4_15128, %v3_15124
  store i32 %v5_15128, i32* %r4.global-to-local, align 4
  %v3_1512c = udiv i32 %v5_1511c, 16777216
  %v4_15130 = mul i32 %v8_1511c, 256
  %v5_15130 = or i32 %v4_15130, %v3_1512c
  store i32 %v5_15130, i32* %r5.global-to-local, align 4
  %v3_15134 = udiv i32 %v8_1511c, 16777216
  %v4_15138 = mul i32 %v11_1511c, 256
  %v5_15138 = or i32 %v4_15138, %v3_15134
  store i32 %v5_15138, i32* @ip, align 4
  %v1_1513c = inttoptr i32 %v0_1513c to i32*
  store i32 %v5_15120, i32* %v1_1513c, align 4
  %v3_1513c = add i32 %v0_1513c, 4
  %v4_1513c = inttoptr i32 %v3_1513c to i32*
  %v5_1513c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1513c, i32* %v4_1513c, align 4
  %v6_1513c = add i32 %v0_1513c, 8
  %v7_1513c = inttoptr i32 %v6_1513c to i32*
  %v8_1513c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1513c, i32* %v7_1513c, align 4
  %v9_1513c = add i32 %v0_1513c, 12
  %v10_1513c = inttoptr i32 %v9_1513c to i32*
  %v11_1513c = load i32, i32* @ip, align 4
  store i32 %v11_1513c, i32* %v10_1513c, align 4
  %v12_1513c = add i32 %v0_1513c, 16
  store i32 %v12_1513c, i32* @r0, align 4
  %v0_15140 = load i32, i32* %r2.global-to-local, align 4
  %v1_15140 = add i32 %v0_15140, -16
  store i32 %v1_15140, i32* %r2.global-to-local, align 4
  %v3_15140 = sub i32 15, %v0_15140
  %v4_15140 = and i32 %v3_15140, %v0_15140
  %v5_15140 = icmp slt i32 %v4_15140, 0
  %v6_15140 = icmp slt i32 %v1_15140, 0
  %v2_15144 = xor i1 %v6_15140, %v5_15140
  br i1 %v2_15144, label %dec_label_pc_15148, label %dec_label_pc_15118.dec_label_pc_15118_crit_edge

dec_label_pc_15118.dec_label_pc_15118_crit_edge:  ; preds = %dec_label_pc_15118
  %v0_15118.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1511c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15118

dec_label_pc_15148:                               ; preds = %dec_label_pc_15118
  %v2_15148 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15148, i32* @r4, align 4
  %v5_15148 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15148, i32* @r5, align 4
  %v1_1514c = add i32 %v0_15140, -4
  store i32 %v1_1514c, i32* %r2.global-to-local, align 4
  %v3_1514c = add i32 %v0_15140, 2147483632
  %v4_1514c = and i32 %v1_1514c, %v3_1514c
  %v5_1514c = icmp slt i32 %v4_1514c, 0
  store i1 %v5_1514c, i1* %cpsr_v.global-to-local, align 1
  %v6_1514c = icmp slt i32 %v1_1514c, 0
  store i1 %v6_1514c, i1* %cpsr_n.global-to-local, align 1
  %v7_1514c = icmp eq i32 %v1_1514c, 0
  store i1 %v7_1514c, i1* %cpsr_z.global-to-local, align 1
  %v2_15150 = xor i1 %v6_1514c, %v5_1514c
  br i1 %v2_15150, label %dec_label_pc_1516c, label %dec_label_pc_15154

dec_label_pc_15154:                               ; preds = %dec_label_pc_15148, %dec_label_pc_15108, %dec_label_pc_15154
  %v1_15160 = phi i32 [ %v4_15160, %dec_label_pc_15154 ], [ %v12_1513c, %dec_label_pc_15148 ], [ %v0_1513c76, %dec_label_pc_15108 ]
  %v0_15154 = load i32, i32* %lr.global-to-local, align 4
  %v3_15154 = udiv i32 %v0_15154, 16777216
  store i32 %v3_15154, i32* %ip.global-to-local, align 4
  %v0_15158 = load i32, i32* %r1.global-to-local, align 4
  %v1_15158 = inttoptr i32 %v0_15158 to i32*
  %v2_15158 = load i32, i32* %v1_15158, align 4
  store i32 %v2_15158, i32* %lr.global-to-local, align 4
  %v4_15158 = add i32 %v0_15158, 4
  store i32 %v4_15158, i32* %r1.global-to-local, align 4
  %v4_1515c = mul i32 %v2_15158, 256
  %v5_1515c = or i32 %v4_1515c, %v3_15154
  store i32 %v5_1515c, i32* @ip, align 4
  %v2_15160 = inttoptr i32 %v1_15160 to i32*
  store i32 %v5_1515c, i32* %v2_15160, align 4
  %v3_15160 = load i32, i32* @r0, align 4
  %v4_15160 = add i32 %v3_15160, 4
  store i32 %v4_15160, i32* @r0, align 4
  %v0_15164 = load i32, i32* %r2.global-to-local, align 4
  %v1_15164 = add i32 %v0_15164, -4
  store i32 %v1_15164, i32* %r2.global-to-local, align 4
  %v3_15164 = sub i32 3, %v0_15164
  %v4_15164 = and i32 %v3_15164, %v0_15164
  %v5_15164 = icmp slt i32 %v4_15164, 0
  %v6_15164 = icmp slt i32 %v1_15164, 0
  %v2_15168 = xor i1 %v6_15164, %v5_15164
  br i1 %v2_15168, label %dec_label_pc_1516c.loopexit, label %dec_label_pc_15154

dec_label_pc_1516c.loopexit:                      ; preds = %dec_label_pc_15154
  %v7_15164 = icmp eq i32 %v0_15164, 4
  store i1 %v5_15164, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15164, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15164, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1516c

dec_label_pc_1516c:                               ; preds = %dec_label_pc_1516c.loopexit, %dec_label_pc_15148
  %v0_14fbc61 = phi i32 [ %v1_15164, %dec_label_pc_1516c.loopexit ], [ %v1_1514c, %dec_label_pc_15148 ]
  %v0_1516c = load i32, i32* %r1.global-to-local, align 4
  %v1_1516c = add i32 %v0_1516c, -1
  store i32 %v1_1516c, i32* @r1, align 4
  br label %bb140

dec_label_pc_15174:                               ; preds = %dec_label_pc_14f20
  %v1_15174 = load i32, i32* @r2, align 4
  %v2_15174 = add i32 %v1_15174, %v0_14f20
  store i32 %v2_15174, i32* %r1.global-to-local, align 4
  %v2_15178 = add i32 %v1_15174, %v1_14f20
  store i32 %v2_15178, i32* %r0.global-to-local, align 4
  %v2_1517c = add i32 %v1_15174, -4
  store i32 %v2_1517c, i32* %r2.global-to-local, align 4
  %v4_1517c = sub i32 3, %v1_15174
  %v5_1517c = and i32 %v4_1517c, %v1_15174
  %v6_1517c = icmp slt i32 %v5_1517c, 0
  store i1 %v6_1517c, i1* %cpsr_v.global-to-local, align 1
  %v7_1517c = icmp slt i32 %v2_1517c, 0
  store i1 %v7_1517c, i1* %cpsr_n.global-to-local, align 1
  %v8_1517c = icmp eq i32 %v1_15174, 4
  store i1 %v8_1517c, i1* %cpsr_z.global-to-local, align 1
  %v5_15180 = icmp slt i32 %v1_15174, 4
  br i1 %v5_15180, label %bb150, label %dec_label_pc_15184

dec_label_pc_15184:                               ; preds = %dec_label_pc_15174
  %v1_15184 = urem i32 %v2_15178, 4
  store i32 %v1_15184, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15184 = icmp eq i32 %v1_15184, 0
  store i1 %v2_15184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15184, label %dec_label_pc_1518c, label %dec_label_pc_1522c

dec_label_pc_1518c:                               ; preds = %dec_label_pc_15184
  %v1_1518c = urem i32 %v2_15174, 4
  store i32 %v1_1518c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1518c = icmp eq i32 %v1_1518c, 0
  store i1 %v2_1518c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1518c, label %dec_label_pc_15194, label %dec_label_pc_15258

dec_label_pc_15194:                               ; preds = %dec_label_pc_1518c, %dec_label_pc_15250
  %v0_151ac37 = phi i32 [ %v2_15178, %dec_label_pc_1518c ], [ %v0_152a020, %dec_label_pc_15250 ]
  %v0_151a836 = phi i32 [ %v2_15174, %dec_label_pc_1518c ], [ %v0_15250, %dec_label_pc_15250 ]
  %v0_15194 = phi i32 [ %v2_1517c, %dec_label_pc_1518c ], [ %v2_15248, %dec_label_pc_15250 ]
  %v2_15194 = add i32 %v0_15194, -8
  store i32 %v2_15194, i32* %r2.global-to-local, align 4
  %v4_15194 = sub i32 7, %v0_15194
  %v5_15194 = and i32 %v4_15194, %v0_15194
  %v6_15194 = icmp slt i32 %v5_15194, 0
  store i1 %v6_15194, i1* %cpsr_v.global-to-local, align 1
  %v7_15194 = icmp slt i32 %v2_15194, 0
  store i1 %v7_15194, i1* %cpsr_n.global-to-local, align 1
  %v8_15194 = icmp eq i32 %v0_15194, 8
  store i1 %v8_15194, i1* %cpsr_z.global-to-local, align 1
  %v5_15198 = icmp slt i32 %v0_15194, 8
  br i1 %v5_15198, label %dec_label_pc_151e4, label %dec_label_pc_1519c

dec_label_pc_1519c:                               ; preds = %dec_label_pc_15194
  %v3_1519c = load i32, i32* @r4, align 4
  %v5_1519c = inttoptr i32 %v3_1519c to i8*
  store i8* %v5_1519c, i8** %stack_var_-8, align 4
  %v8_1519c = load i32, i32* @lr, align 4
  %v2_151a0 = add i32 %v0_15194, -28
  store i32 %v2_151a0, i32* %r2.global-to-local, align 4
  %v4_151a0 = sub i32 27, %v0_15194
  %v5_151a0 = and i32 %v4_151a0, %v2_15194
  %v6_151a0 = icmp slt i32 %v5_151a0, 0
  store i1 %v6_151a0, i1* %cpsr_v.global-to-local, align 1
  %v7_151a0 = icmp slt i32 %v2_151a0, 0
  store i1 %v7_151a0, i1* %cpsr_n.global-to-local, align 1
  %v8_151a0 = icmp eq i32 %v2_15194, 20
  store i1 %v8_151a0, i1* %cpsr_z.global-to-local, align 1
  %v5_151a4 = icmp slt i32 %v2_15194, 20
  br i1 %v5_151a4, label %dec_label_pc_151c0, label %dec_label_pc_151a8

dec_label_pc_151a8:                               ; preds = %dec_label_pc_1519c, %dec_label_pc_151a8.dec_label_pc_151a8_crit_edge
  %v0_151ac = phi i32 [ %v1_151b4, %dec_label_pc_151a8.dec_label_pc_151a8_crit_edge ], [ %v0_151ac37, %dec_label_pc_1519c ]
  %v0_151a8 = phi i32 [ %v0_151a8.pre, %dec_label_pc_151a8.dec_label_pc_151a8_crit_edge ], [ %v0_151a836, %dec_label_pc_1519c ]
  %v1_151a8 = add i32 %v0_151a8, -4
  %v2_151a8 = inttoptr i32 %v1_151a8 to i32*
  %v3_151a8 = load i32, i32* %v2_151a8, align 4
  %v4_151a8 = add i32 %v0_151a8, -8
  %v5_151a8 = inttoptr i32 %v4_151a8 to i32*
  %v6_151a8 = load i32, i32* %v5_151a8, align 4
  store i32 %v6_151a8, i32* %r4.global-to-local, align 4
  %v7_151a8 = add i32 %v0_151a8, -12
  %v8_151a8 = inttoptr i32 %v7_151a8 to i32*
  %v9_151a8 = load i32, i32* %v8_151a8, align 4
  store i32 %v9_151a8, i32* %ip.global-to-local, align 4
  %v10_151a8 = add i32 %v0_151a8, -16
  %v11_151a8 = inttoptr i32 %v10_151a8 to i32*
  %v12_151a8 = load i32, i32* %v11_151a8, align 4
  store i32 %v12_151a8, i32* %lr.global-to-local, align 4
  store i32 %v10_151a8, i32* %r1.global-to-local, align 4
  %v1_151ac = add i32 %v0_151ac, -16
  %v2_151ac = inttoptr i32 %v1_151ac to i32*
  store i32 %v3_151a8, i32* %v2_151ac, align 4
  %v4_151ac = add i32 %v0_151ac, -12
  %v5_151ac = inttoptr i32 %v4_151ac to i32*
  %v6_151ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_151ac, i32* %v5_151ac, align 4
  %v7_151ac = add i32 %v0_151ac, -8
  %v8_151ac = inttoptr i32 %v7_151ac to i32*
  %v9_151ac = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_151ac, i32* %v8_151ac, align 4
  %v10_151ac = add i32 %v0_151ac, -4
  %v11_151ac = inttoptr i32 %v10_151ac to i32*
  %v12_151ac = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_151ac, i32* %v11_151ac, align 4
  store i32 %v1_151ac, i32* %r0.global-to-local, align 4
  %v0_151b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_151b0 = add i32 %v0_151b0, -4
  %v2_151b0 = inttoptr i32 %v1_151b0 to i32*
  %v3_151b0 = load i32, i32* %v2_151b0, align 4
  store i32 %v3_151b0, i32* @r3, align 4
  %v4_151b0 = add i32 %v0_151b0, -8
  %v5_151b0 = inttoptr i32 %v4_151b0 to i32*
  %v6_151b0 = load i32, i32* %v5_151b0, align 4
  store i32 %v6_151b0, i32* %r4.global-to-local, align 4
  %v7_151b0 = add i32 %v0_151b0, -12
  %v8_151b0 = inttoptr i32 %v7_151b0 to i32*
  %v9_151b0 = load i32, i32* %v8_151b0, align 4
  store i32 %v9_151b0, i32* @ip, align 4
  %v10_151b0 = add i32 %v0_151b0, -16
  %v11_151b0 = inttoptr i32 %v10_151b0 to i32*
  %v12_151b0 = load i32, i32* %v11_151b0, align 4
  store i32 %v12_151b0, i32* %lr.global-to-local, align 4
  store i32 %v10_151b0, i32* %r1.global-to-local, align 4
  %v1_151b4 = add i32 %v0_151ac, -32
  %v2_151b4 = inttoptr i32 %v1_151b4 to i32*
  store i32 %v3_151b0, i32* %v2_151b4, align 4
  %v4_151b4 = add i32 %v0_151ac, -28
  %v5_151b4 = inttoptr i32 %v4_151b4 to i32*
  %v6_151b4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_151b4, i32* %v5_151b4, align 4
  %v7_151b4 = add i32 %v0_151ac, -24
  %v8_151b4 = inttoptr i32 %v7_151b4 to i32*
  %v9_151b4 = load i32, i32* @ip, align 4
  store i32 %v9_151b4, i32* %v8_151b4, align 4
  %v10_151b4 = add i32 %v0_151ac, -20
  %v11_151b4 = inttoptr i32 %v10_151b4 to i32*
  %v12_151b4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_151b4, i32* %v11_151b4, align 4
  store i32 %v1_151b4, i32* %r0.global-to-local, align 4
  %v0_151b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_151b8 = add i32 %v0_151b8, -32
  store i32 %v2_151b8, i32* %r2.global-to-local, align 4
  %v6_151bc = icmp slt i32 %v0_151b8, 32
  br i1 %v6_151bc, label %dec_label_pc_151c0.loopexit, label %dec_label_pc_151a8.dec_label_pc_151a8_crit_edge

dec_label_pc_151a8.dec_label_pc_151a8_crit_edge:  ; preds = %dec_label_pc_151a8
  %v0_151a8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_151a8

dec_label_pc_151c0.loopexit:                      ; preds = %dec_label_pc_151a8
  %v4_151b8 = sub i32 31, %v0_151b8
  %v5_151b8 = and i32 %v4_151b8, %v0_151b8
  %v6_151b8 = icmp slt i32 %v5_151b8, 0
  %v7_151b8 = icmp slt i32 %v2_151b8, 0
  store i1 %v6_151b8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_151b8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_151c0

dec_label_pc_151c0:                               ; preds = %dec_label_pc_151c0.loopexit, %dec_label_pc_1519c
  %v6_151c8 = phi i32 [ %v1_151b4, %dec_label_pc_151c0.loopexit ], [ %v0_151ac37, %dec_label_pc_1519c ]
  %v0_151d0.pr = phi i32 [ %v2_151b8, %dec_label_pc_151c0.loopexit ], [ %v2_151a0, %dec_label_pc_1519c ]
  %v4_151c0 = add i32 %v0_151d0.pr, 16
  %v6_151c0 = sub i32 0, %v0_151d0.pr
  %v7_151c0 = and i32 %v4_151c0, %v6_151c0
  %v8_151c0 = icmp slt i32 %v7_151c0, 0
  store i1 %v8_151c0, i1* %cpsr_v.global-to-local, align 1
  %v9_151c0 = icmp slt i32 %v4_151c0, 0
  store i1 %v9_151c0, i1* %cpsr_n.global-to-local, align 1
  %v10_151c0 = icmp eq i32 %v4_151c0, 0
  store i1 %v10_151c0, i1* %cpsr_z.global-to-local, align 1
  %v5_151c4 = icmp slt i32 %v0_151d0.pr, -16
  br i1 %v5_151c4, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_151c0
  %v6_151c4 = load i32, i32* %r1.global-to-local, align 4
  %v7_151c4 = add i32 %v6_151c4, -4
  %v8_151c4 = inttoptr i32 %v7_151c4 to i32*
  %v9_151c4 = load i32, i32* %v8_151c4, align 4
  store i32 %v9_151c4, i32* @r3, align 4
  %v10_151c4 = add i32 %v6_151c4, -8
  %v11_151c4 = inttoptr i32 %v10_151c4 to i32*
  %v12_151c4 = load i32, i32* %v11_151c4, align 4
  store i32 %v12_151c4, i32* %r4.global-to-local, align 4
  %v13_151c4 = add i32 %v6_151c4, -12
  %v14_151c4 = inttoptr i32 %v13_151c4 to i32*
  %v15_151c4 = load i32, i32* %v14_151c4, align 4
  store i32 %v15_151c4, i32* @ip, align 4
  %v16_151c4 = add i32 %v6_151c4, -16
  %v17_151c4 = inttoptr i32 %v16_151c4 to i32*
  %v18_151c4 = load i32, i32* %v17_151c4, align 4
  store i32 %v18_151c4, i32* %lr.global-to-local, align 4
  store i32 %v16_151c4, i32* %r1.global-to-local, align 4
  %v7_151c8 = add i32 %v6_151c8, -16
  %v8_151c8 = inttoptr i32 %v7_151c8 to i32*
  store i32 %v9_151c4, i32* %v8_151c8, align 4
  %v10_151c8 = add i32 %v6_151c8, -12
  %v11_151c8 = inttoptr i32 %v10_151c8 to i32*
  %v12_151c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_151c8, i32* %v11_151c8, align 4
  %v13_151c8 = add i32 %v6_151c8, -8
  %v14_151c8 = inttoptr i32 %v13_151c8 to i32*
  %v15_151c8 = load i32, i32* @ip, align 4
  store i32 %v15_151c8, i32* %v14_151c8, align 4
  %v16_151c8 = add i32 %v6_151c8, -4
  %v17_151c8 = inttoptr i32 %v16_151c8 to i32*
  %v18_151c8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_151c8, i32* %v17_151c8, align 4
  store i32 %v7_151c8, i32* %r0.global-to-local, align 4
  %v6_151cc = load i32, i32* %r2.global-to-local, align 4
  %v7_151cc = add i32 %v6_151cc, -16
  store i32 %v7_151cc, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_151c0, %bb147
  %v6_151d8 = phi i32 [ %v7_151c8, %bb147 ], [ %v6_151c8, %dec_label_pc_151c0 ]
  %v0_151d0 = phi i32 [ %v7_151cc, %bb147 ], [ %v0_151d0.pr, %dec_label_pc_151c0 ]
  %v4_151d0 = add i32 %v0_151d0, 20
  store i32 %v4_151d0, i32* %r2.global-to-local, align 4
  %v6_151d0 = sub i32 0, %v0_151d0
  %v7_151d0 = and i32 %v4_151d0, %v6_151d0
  %v8_151d0 = icmp slt i32 %v7_151d0, 0
  store i1 %v8_151d0, i1* %cpsr_v.global-to-local, align 1
  %v9_151d0 = icmp slt i32 %v4_151d0, 0
  store i1 %v9_151d0, i1* %cpsr_n.global-to-local, align 1
  %v10_151d0 = icmp eq i32 %v4_151d0, 0
  store i1 %v10_151d0, i1* %cpsr_z.global-to-local, align 1
  %v5_151d4 = icmp slt i32 %v0_151d0, -20
  br i1 %v5_151d4, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_151d4 = load i32, i32* %r1.global-to-local, align 4
  %v7_151d4 = add i32 %v6_151d4, -4
  %v8_151d4 = inttoptr i32 %v7_151d4 to i32*
  %v9_151d4 = load i32, i32* %v8_151d4, align 4
  store i32 %v9_151d4, i32* @r3, align 4
  %v10_151d4 = add i32 %v6_151d4, -8
  %v11_151d4 = inttoptr i32 %v10_151d4 to i32*
  %v12_151d4 = load i32, i32* %v11_151d4, align 4
  store i32 %v12_151d4, i32* @ip, align 4
  %v13_151d4 = add i32 %v6_151d4, -12
  %v14_151d4 = inttoptr i32 %v13_151d4 to i32*
  %v15_151d4 = load i32, i32* %v14_151d4, align 4
  store i32 %v15_151d4, i32* %lr.global-to-local, align 4
  store i32 %v13_151d4, i32* %r1.global-to-local, align 4
  %v7_151d8 = add i32 %v6_151d8, -12
  %v8_151d8 = inttoptr i32 %v7_151d8 to i32*
  store i32 %v9_151d4, i32* %v8_151d8, align 4
  %v10_151d8 = add i32 %v6_151d8, -8
  %v11_151d8 = inttoptr i32 %v10_151d8 to i32*
  %v12_151d8 = load i32, i32* @ip, align 4
  store i32 %v12_151d8, i32* %v11_151d8, align 4
  %v13_151d8 = add i32 %v6_151d8, -4
  %v14_151d8 = inttoptr i32 %v13_151d8 to i32*
  %v15_151d8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_151d8, i32* %v14_151d8, align 4
  store i32 %v7_151d8, i32* %r0.global-to-local, align 4
  %v6_151dc = load i32, i32* %r2.global-to-local, align 4
  %v7_151dc = add i32 %v6_151dc, -12
  store i32 %v7_151dc, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_151fc45 = phi i32 [ %v6_151d8, %.thread2 ], [ %v7_151d8, %bb148 ]
  %v0_151e443 = phi i32 [ %v4_151d0, %.thread2 ], [ %v7_151dc, %bb148 ]
  %v2_151e0 = load i8*, i8** %stack_var_-8, align 4
  %v3_151e0 = ptrtoint i8* %v2_151e0 to i32
  store i32 %v3_151e0, i32* @r4, align 4
  store i32 %v8_1519c, i32* @lr, align 4
  br label %dec_label_pc_151e4

dec_label_pc_151e4:                               ; preds = %dec_label_pc_15194, %.thread4
  %v7_151f4 = phi i32 [ %v0_151ac37, %dec_label_pc_15194 ], [ %v6_151fc45, %.thread4 ]
  %v0_151e4 = phi i32 [ %v2_15194, %dec_label_pc_15194 ], [ %v0_151e443, %.thread4 ]
  %v2_151e4 = add i32 %v0_151e4, 8
  store i32 %v2_151e4, i32* %r2.global-to-local, align 4
  %v4_151e4 = sub i32 0, %v0_151e4
  %v5_151e4 = and i32 %v2_151e4, %v4_151e4
  %v6_151e4 = icmp slt i32 %v5_151e4, 0
  store i1 %v6_151e4, i1* %cpsr_v.global-to-local, align 1
  %v7_151e4 = icmp slt i32 %v2_151e4, 0
  store i1 %v7_151e4, i1* %cpsr_n.global-to-local, align 1
  %v8_151e4 = icmp eq i32 %v2_151e4, 0
  store i1 %v8_151e4, i1* %cpsr_z.global-to-local, align 1
  %v5_151e8 = icmp slt i32 %v0_151e4, -8
  br i1 %v5_151e8, label %bb150, label %dec_label_pc_151ec

dec_label_pc_151ec:                               ; preds = %dec_label_pc_151e4
  %v6_151ec = add i32 %v0_151e4, 4
  store i32 %v6_151ec, i32* %r2.global-to-local, align 4
  %v8_151ec = sub i32 -5, %v0_151e4
  %v9_151ec = and i32 %v8_151ec, %v2_151e4
  %v10_151ec = icmp slt i32 %v9_151ec, 0
  store i1 %v10_151ec, i1* %cpsr_v.global-to-local, align 1
  %v11_151ec = icmp slt i32 %v6_151ec, 0
  store i1 %v11_151ec, i1* %cpsr_n.global-to-local, align 1
  %v12_151ec = icmp eq i32 %v2_151e4, 4
  store i1 %v12_151ec, i1* %cpsr_z.global-to-local, align 1
  %v5_151f0 = icmp slt i32 %v2_151e4, 4
  %v6_151f0 = load i32, i32* %r1.global-to-local, align 4
  %v7_151f0 = add i32 %v6_151f0, -4
  %v8_151f0 = inttoptr i32 %v7_151f0 to i32*
  %v9_151f0 = load i32, i32* %v8_151f0, align 4
  store i32 %v9_151f0, i32* @r3, align 4
  br i1 %v5_151f0, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_151ec
  store i32 %v7_151f0, i32* %r1.global-to-local, align 4
  %v8_151f4 = add i32 %v7_151f4, -4
  %v9_151f4 = inttoptr i32 %v8_151f4 to i32*
  store i32 %v9_151f0, i32* %v9_151f4, align 4
  %v10_151f4 = load i32, i32* %r0.global-to-local, align 4
  %v11_151f4 = add i32 %v10_151f4, -4
  store i32 %v11_151f4, i32* %r0.global-to-local, align 4
  %v0_15204.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_151ec
  %v10_151f8 = add i32 %v6_151f0, -8
  %v11_151f8 = inttoptr i32 %v10_151f8 to i32*
  %v12_151f8 = load i32, i32* %v11_151f8, align 4
  store i32 %v12_151f8, i32* @ip, align 4
  store i32 %v10_151f8, i32* %r1.global-to-local, align 4
  %v7_151fc = add i32 %v7_151f4, -8
  %v8_151fc = inttoptr i32 %v7_151fc to i32*
  store i32 %v9_151f0, i32* %v8_151fc, align 4
  %v10_151fc = add i32 %v7_151f4, -4
  %v11_151fc = inttoptr i32 %v10_151fc to i32*
  %v12_151fc = load i32, i32* @ip, align 4
  store i32 %v12_151fc, i32* %v11_151fc, align 4
  store i32 %v7_151fc, i32* %r0.global-to-local, align 4
  %v6_15200 = load i32, i32* %r2.global-to-local, align 4
  %v7_15200 = add i32 %v6_15200, -4
  store i32 %v7_15200, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_151e4, %dec_label_pc_15174, %.thread14, %dec_label_pc_153a8, %dec_label_pc_1533c, %dec_label_pc_152d0, %bb149
  %v2_15208 = phi i32 [ %v11_151f4, %.thread8 ], [ %v7_151f4, %dec_label_pc_151e4 ], [ %v2_15178, %dec_label_pc_15174 ], [ %v0_152a020, %.thread14 ], [ %v2_1521453, %dec_label_pc_153a8 ], [ %v2_1521452, %dec_label_pc_1533c ], [ %v2_1521451, %dec_label_pc_152d0 ], [ %v7_151fc, %bb149 ]
  %v0_15204 = phi i32 [ %v0_15204.pre, %.thread8 ], [ %v2_151e4, %dec_label_pc_151e4 ], [ %v2_1517c, %dec_label_pc_15174 ], [ %v2_15248, %.thread14 ], [ %v0_1520449, %dec_label_pc_153a8 ], [ %v0_1520448, %dec_label_pc_1533c ], [ %v0_1520447, %dec_label_pc_152d0 ], [ %v7_15200, %bb149 ]
  %v1_15204 = add i32 %v0_15204, 4
  store i32 %v1_15204, i32* %r2.global-to-local, align 4
  %v3_15204 = sub i32 0, %v0_15204
  %v4_15204 = and i32 %v1_15204, %v3_15204
  %v5_15204 = icmp slt i32 %v4_15204, 0
  store i1 %v5_15204, i1* %cpsr_v.global-to-local, align 1
  %v6_15204 = icmp slt i32 %v1_15204, 0
  store i1 %v6_15204, i1* %cpsr_n.global-to-local, align 1
  %v7_15204 = icmp eq i32 %v1_15204, 0
  store i1 %v7_15204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15204, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_1520c = add i32 %v0_15204, 2
  %v3_1520c = sub i32 -3, %v0_15204
  %v4_1520c = and i32 %v3_1520c, %v1_15204
  %v5_1520c = icmp slt i32 %v4_1520c, 0
  store i1 %v5_1520c, i1* %cpsr_v.global-to-local, align 1
  %v6_1520c = icmp slt i32 %v1_1520c, 0
  store i1 %v6_1520c, i1* %cpsr_n.global-to-local, align 1
  %v7_1520c = icmp eq i32 %v1_15204, 2
  store i1 %v7_1520c, i1* %cpsr_z.global-to-local, align 1
  %v0_15210 = load i32, i32* %r1.global-to-local, align 4
  %v1_15210 = add i32 %v0_15210, -1
  %v2_15210 = inttoptr i32 %v1_15210 to i8*
  %v3_15210 = load i8, i8* %v2_15210, align 1
  %v4_15210 = zext i8 %v3_15210 to i32
  store i32 %v4_15210, i32* @r3, align 4
  store i32 %v1_15210, i32* %r1.global-to-local, align 4
  %v3_15214 = add i32 %v2_15208, -1
  %v4_15214 = inttoptr i32 %v3_15214 to i8*
  store i8 %v3_15210, i8* %v4_15214, align 1
  %v5_15214 = load i32, i32* %r0.global-to-local, align 4
  %v6_15214 = add i32 %v5_15214, -1
  store i32 %v6_15214, i32* %r0.global-to-local, align 4
  %v0_15218 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15218 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15218 = xor i1 %v0_15218, %v1_15218
  br i1 %v2_15218, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_15218 = load i32, i32* %r1.global-to-local, align 4
  %v4_15218 = add i32 %v3_15218, -1
  %v5_15218 = inttoptr i32 %v4_15218 to i8*
  %v6_15218 = load i8, i8* %v5_15218, align 1
  %v7_15218 = zext i8 %v6_15218 to i32
  store i32 %v7_15218, i32* @r3, align 4
  store i32 %v4_15218, i32* %r1.global-to-local, align 4
  %v6_1521c = add i32 %v5_15214, -2
  %v7_1521c = inttoptr i32 %v6_1521c to i8*
  store i8 %v6_15218, i8* %v7_1521c, align 1
  %v8_1521c = load i32, i32* %r0.global-to-local, align 4
  %v9_1521c = add i32 %v8_1521c, -1
  store i32 %v9_1521c, i32* %r0.global-to-local, align 4
  %v1_15220.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15220.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_15224 = phi i32 [ %v9_1521c, %bb152 ], [ %v6_15214, %bb151 ]
  %v2_15224 = phi i1 [ %v2_15220.pre, %bb152 ], [ %v1_15218, %bb151 ]
  %v1_15224 = phi i1 [ %v1_15220.pre, %bb152 ], [ %v0_15218, %bb151 ]
  %v0_15220 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15220 = xor i1 %v2_15224, %v1_15224
  %v4_15220 = or i1 %v0_15220, %v3_15220
  br i1 %v4_15220, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_15220 = load i32, i32* %r1.global-to-local, align 4
  %v6_15220 = add i32 %v5_15220, -1
  %v7_15220 = inttoptr i32 %v6_15220 to i8*
  %v8_15220 = load i8, i8* %v7_15220, align 1
  %v9_15220 = zext i8 %v8_15220 to i32
  store i32 %v9_15220, i32* @r3, align 4
  store i32 %v6_15220, i32* %r1.global-to-local, align 4
  %v8_15224 = add i32 %v7_15224, -1
  %v9_15224 = inttoptr i32 %v8_15224 to i8*
  store i8 %v8_15220, i8* %v9_15224, align 1
  %v10_15224 = load i32, i32* %r0.global-to-local, align 4
  %v11_15224 = add i32 %v10_15224, -1
  store i32 %v11_15224, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_1522c:                               ; preds = %dec_label_pc_15184
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_1522c = icmp eq i32 %v1_15184, 1
  store i1 %v8_1522c, i1* %cpsr_n.global-to-local, align 1
  %v9_1522c = icmp eq i32 %v1_15184, 2
  store i1 %v9_1522c, i1* %cpsr_z.global-to-local, align 1
  %v1_15230 = add i32 %v2_15174, -1
  %v2_15230 = inttoptr i32 %v1_15230 to i8*
  %v3_15230 = load i8, i8* %v2_15230, align 1
  %v4_15230 = zext i8 %v3_15230 to i32
  store i32 %v4_15230, i32* @r3, align 4
  store i32 %v1_15230, i32* %r1.global-to-local, align 4
  %v3_15234 = add i32 %v2_15178, -1
  %v4_15234 = inttoptr i32 %v3_15234 to i8*
  store i8 %v3_15230, i8* %v4_15234, align 1
  %v5_15234 = load i32, i32* %r0.global-to-local, align 4
  %v6_15234 = add i32 %v5_15234, -1
  store i32 %v6_15234, i32* %r0.global-to-local, align 4
  br i1 %v8_1522c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_1522c
  %v6_15238 = load i32, i32* %r1.global-to-local, align 4
  %v7_15238 = add i32 %v6_15238, -1
  %v8_15238 = inttoptr i32 %v7_15238 to i8*
  %v9_15238 = load i8, i8* %v8_15238, align 1
  %v10_15238 = zext i8 %v9_15238 to i32
  store i32 %v10_15238, i32* @r3, align 4
  store i32 %v7_15238, i32* %r1.global-to-local, align 4
  %v9_1523c = add i32 %v5_15234, -2
  %v10_1523c = inttoptr i32 %v9_1523c to i8*
  store i8 %v9_15238, i8* %v10_1523c, align 1
  %v11_1523c = load i32, i32* %r0.global-to-local, align 4
  %v12_1523c = add i32 %v11_1523c, -1
  store i32 %v12_1523c, i32* %r0.global-to-local, align 4
  br i1 %v9_1522c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_15240 = load i32, i32* %r1.global-to-local, align 4
  %v9_15240 = add i32 %v8_15240, -1
  %v10_15240 = inttoptr i32 %v9_15240 to i8*
  %v11_15240 = load i8, i8* %v10_15240, align 1
  %v12_15240 = zext i8 %v11_15240 to i32
  store i32 %v12_15240, i32* @r3, align 4
  store i32 %v9_15240, i32* %r1.global-to-local, align 4
  %v11_15244 = add i32 %v11_1523c, -2
  %v12_15244 = inttoptr i32 %v11_15244 to i8*
  store i8 %v11_15240, i8* %v12_15244, align 1
  %v13_15244 = load i32, i32* %r0.global-to-local, align 4
  %v14_15244 = add i32 %v13_15244, -1
  store i32 %v14_15244, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_1522c, %bb155
  %v0_152a020 = phi i32 [ %v12_1523c, %bb154 ], [ %v6_15234, %dec_label_pc_1522c ], [ %v14_15244, %bb155 ]
  %v0_15248 = load i32, i32* %r2.global-to-local, align 4
  %v1_15248 = load i32, i32* @ip, align 4
  %v2_15248 = sub i32 %v0_15248, %v1_15248
  store i32 %v2_15248, i32* %r2.global-to-local, align 4
  %v4_15248 = xor i32 %v1_15248, %v0_15248
  %v5_15248 = xor i32 %v2_15248, %v0_15248
  %v6_15248 = and i32 %v5_15248, %v4_15248
  %v7_15248 = icmp slt i32 %v6_15248, 0
  store i1 %v7_15248, i1* %cpsr_v.global-to-local, align 1
  %v8_15248 = icmp slt i32 %v2_15248, 0
  store i1 %v8_15248, i1* %cpsr_n.global-to-local, align 1
  %v9_15248 = icmp eq i32 %v0_15248, %v1_15248
  store i1 %v9_15248, i1* %cpsr_z.global-to-local, align 1
  %v5_1524c = icmp slt i32 %v0_15248, %v1_15248
  br i1 %v5_1524c, label %bb150, label %dec_label_pc_15250

dec_label_pc_15250:                               ; preds = %.thread14
  %v0_15250 = load i32, i32* %r1.global-to-local, align 4
  %v1_15250 = urem i32 %v0_15250, 4
  store i32 %v1_15250, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15250 = icmp eq i32 %v1_15250, 0
  store i1 %v2_15250, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15250, label %dec_label_pc_15194, label %dec_label_pc_15258

dec_label_pc_15258:                               ; preds = %dec_label_pc_1518c, %dec_label_pc_15250
  %v0_152a019 = phi i32 [ %v2_15178, %dec_label_pc_1518c ], [ %v0_152a020, %dec_label_pc_15250 ]
  %v0_1534c = phi i32 [ %v2_1517c, %dec_label_pc_1518c ], [ %v2_15248, %dec_label_pc_15250 ]
  %v0_15258 = phi i32 [ %v2_15174, %dec_label_pc_1518c ], [ %v0_15250, %dec_label_pc_15250 ]
  %v0_15260 = phi i32 [ %v1_1518c, %dec_label_pc_1518c ], [ %v1_15250, %dec_label_pc_15250 ]
  %v1_15258 = and i32 %v0_15258, -4
  store i32 %v1_15258, i32* %r1.global-to-local, align 4
  %v1_1525c = inttoptr i32 %v1_15258 to i32*
  %v2_1525c = load i32, i32* %v1_1525c, align 4
  store i32 %v2_1525c, i32* @r3, align 4
  %v7_15260 = icmp ult i32 %v0_15260, 2
  %v2_15344 = add i32 %v0_1534c, -12
  %v4_15344 = sub i32 11, %v0_1534c
  %v5_15344 = and i32 %v4_15344, %v0_1534c
  %v6_15344 = icmp slt i32 %v5_15344, 0
  store i1 %v6_15344, i1* %cpsr_v.global-to-local, align 1
  %v7_15344 = icmp slt i32 %v2_15344, 0
  store i1 %v7_15344, i1* %cpsr_n.global-to-local, align 1
  %v8_15344 = icmp eq i32 %v0_1534c, 12
  store i1 %v8_15344, i1* %cpsr_z.global-to-local, align 1
  %v5_15348 = icmp slt i32 %v0_1534c, 12
  br i1 %v7_15260, label %dec_label_pc_15344, label %dec_label_pc_15268

dec_label_pc_15268:                               ; preds = %dec_label_pc_15258
  %v8_15260 = icmp eq i32 %v0_15260, 2
  br i1 %v8_15260, label %dec_label_pc_152d8, label %dec_label_pc_1526c

dec_label_pc_1526c:                               ; preds = %dec_label_pc_15268
  br i1 %v5_15348, label %dec_label_pc_152b8, label %dec_label_pc_15274

dec_label_pc_15274:                               ; preds = %dec_label_pc_1526c
  store i32 %v2_15344, i32* %r2.global-to-local, align 4
  %v3_15278 = load i32, i32* @r4, align 4
  store i32 %v3_15278, i32* %stack_var_-12, align 4
  %v6_15278 = load i32, i32* @r5, align 4
  %v8_15278 = inttoptr i32 %v6_15278 to i8*
  store i8* %v8_15278, i8** %stack_var_-8, align 4
  %v11_15278 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1527c

dec_label_pc_1527c:                               ; preds = %dec_label_pc_1527c.dec_label_pc_1527c_crit_edge, %dec_label_pc_15274
  %v0_152a0 = phi i32 [ %v1_152a0, %dec_label_pc_1527c.dec_label_pc_1527c_crit_edge ], [ %v0_152a019, %dec_label_pc_15274 ]
  %v0_15280 = phi i32 [ %v0_15280.pre, %dec_label_pc_1527c.dec_label_pc_1527c_crit_edge ], [ %v1_15258, %dec_label_pc_15274 ]
  %v0_1527c = phi i32 [ %v0_1527c.pre, %dec_label_pc_1527c.dec_label_pc_1527c_crit_edge ], [ %v2_1525c, %dec_label_pc_15274 ]
  %v3_1527c = mul i32 %v0_1527c, 256
  store i32 %v3_1527c, i32* %lr.global-to-local, align 4
  %v1_15280 = add i32 %v0_15280, -4
  %v2_15280 = inttoptr i32 %v1_15280 to i32*
  %v3_15280 = load i32, i32* %v2_15280, align 4
  store i32 %v3_15280, i32* @r3, align 4
  %v4_15280 = add i32 %v0_15280, -8
  %v5_15280 = inttoptr i32 %v4_15280 to i32*
  %v6_15280 = load i32, i32* %v5_15280, align 4
  store i32 %v6_15280, i32* %r4.global-to-local, align 4
  %v7_15280 = add i32 %v0_15280, -12
  %v8_15280 = inttoptr i32 %v7_15280 to i32*
  %v9_15280 = load i32, i32* %v8_15280, align 4
  store i32 %v9_15280, i32* %r5.global-to-local, align 4
  %v10_15280 = add i32 %v0_15280, -16
  %v11_15280 = inttoptr i32 %v10_15280 to i32*
  %v12_15280 = load i32, i32* %v11_15280, align 4
  store i32 %v10_15280, i32* %r1.global-to-local, align 4
  %v4_15284 = udiv i32 %v12_15280, 16777216
  %v5_15284 = or i32 %v4_15284, %v3_1527c
  store i32 %v5_15284, i32* %lr.global-to-local, align 4
  %v3_15288 = mul i32 %v12_15280, 256
  %v4_1528c = udiv i32 %v9_15280, 16777216
  %v5_1528c = or i32 %v3_15288, %v4_1528c
  store i32 %v5_1528c, i32* @ip, align 4
  %v3_15290 = mul i32 %v9_15280, 256
  %v4_15294 = udiv i32 %v6_15280, 16777216
  %v5_15294 = or i32 %v3_15290, %v4_15294
  store i32 %v5_15294, i32* %r5.global-to-local, align 4
  %v3_15298 = mul i32 %v6_15280, 256
  %v4_1529c = udiv i32 %v3_15280, 16777216
  %v5_1529c = or i32 %v3_15298, %v4_1529c
  store i32 %v5_1529c, i32* %r4.global-to-local, align 4
  %v1_152a0 = add i32 %v0_152a0, -16
  %v2_152a0 = inttoptr i32 %v1_152a0 to i32*
  store i32 %v5_1529c, i32* %v2_152a0, align 4
  %v4_152a0 = add i32 %v0_152a0, -12
  %v5_152a0 = inttoptr i32 %v4_152a0 to i32*
  %v6_152a0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_152a0, i32* %v5_152a0, align 4
  %v7_152a0 = add i32 %v0_152a0, -8
  %v8_152a0 = inttoptr i32 %v7_152a0 to i32*
  %v9_152a0 = load i32, i32* @ip, align 4
  store i32 %v9_152a0, i32* %v8_152a0, align 4
  %v10_152a0 = add i32 %v0_152a0, -4
  %v11_152a0 = inttoptr i32 %v10_152a0 to i32*
  %v12_152a0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_152a0, i32* %v11_152a0, align 4
  store i32 %v1_152a0, i32* %r0.global-to-local, align 4
  %v0_152a4 = load i32, i32* %r2.global-to-local, align 4
  %v2_152a4 = add i32 %v0_152a4, -16
  store i32 %v2_152a4, i32* %r2.global-to-local, align 4
  %v6_152a8 = icmp slt i32 %v0_152a4, 16
  br i1 %v6_152a8, label %dec_label_pc_152ac, label %dec_label_pc_1527c.dec_label_pc_1527c_crit_edge

dec_label_pc_1527c.dec_label_pc_1527c_crit_edge:  ; preds = %dec_label_pc_1527c
  %v0_1527c.pre = load i32, i32* @r3, align 4
  %v0_15280.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1527c

dec_label_pc_152ac:                               ; preds = %dec_label_pc_1527c
  %v2_152ac = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_152ac, i32* @r4, align 4
  %v5_152ac = load i8*, i8** %stack_var_-8, align 4
  %v6_152ac = ptrtoint i8* %v5_152ac to i32
  store i32 %v6_152ac, i32* @r5, align 4
  store i32 %v11_15278, i32* @lr, align 4
  %v2_152b0 = add i32 %v0_152a4, -4
  store i32 %v2_152b0, i32* %r2.global-to-local, align 4
  %v4_152b0 = add i32 %v0_152a4, 2147483632
  %v5_152b0 = and i32 %v2_152b0, %v4_152b0
  %v6_152b0 = icmp slt i32 %v5_152b0, 0
  store i1 %v6_152b0, i1* %cpsr_v.global-to-local, align 1
  %v7_152b0 = icmp slt i32 %v2_152b0, 0
  store i1 %v7_152b0, i1* %cpsr_n.global-to-local, align 1
  %v8_152b0 = icmp eq i32 %v2_152b0, 0
  store i1 %v8_152b0, i1* %cpsr_z.global-to-local, align 1
  %v5_152b4 = icmp slt i32 %v2_152a4, -12
  br i1 %v5_152b4, label %dec_label_pc_152d0, label %dec_label_pc_152b8

dec_label_pc_152b8:                               ; preds = %dec_label_pc_152ac, %dec_label_pc_1526c, %dec_label_pc_152b8
  %v1_152c4 = phi i32 [ %v5_152c4, %dec_label_pc_152b8 ], [ %v1_152a0, %dec_label_pc_152ac ], [ %v0_152a019, %dec_label_pc_1526c ]
  %v0_152b8 = load i32, i32* @r3, align 4
  %v3_152b8 = mul i32 %v0_152b8, 256
  store i32 %v3_152b8, i32* %ip.global-to-local, align 4
  %v0_152bc = load i32, i32* %r1.global-to-local, align 4
  %v1_152bc = add i32 %v0_152bc, -4
  %v2_152bc = inttoptr i32 %v1_152bc to i32*
  %v3_152bc = load i32, i32* %v2_152bc, align 4
  store i32 %v3_152bc, i32* @r3, align 4
  store i32 %v1_152bc, i32* %r1.global-to-local, align 4
  %v4_152c0 = udiv i32 %v3_152bc, 16777216
  %v5_152c0 = or i32 %v4_152c0, %v3_152b8
  store i32 %v5_152c0, i32* @ip, align 4
  %v2_152c4 = add i32 %v1_152c4, -4
  %v3_152c4 = inttoptr i32 %v2_152c4 to i32*
  store i32 %v5_152c0, i32* %v3_152c4, align 4
  %v4_152c4 = load i32, i32* %r0.global-to-local, align 4
  %v5_152c4 = add i32 %v4_152c4, -4
  store i32 %v5_152c4, i32* %r0.global-to-local, align 4
  %v0_152c8 = load i32, i32* %r2.global-to-local, align 4
  %v2_152c8 = add i32 %v0_152c8, -4
  store i32 %v2_152c8, i32* %r2.global-to-local, align 4
  %v6_152cc = icmp slt i32 %v0_152c8, 4
  br i1 %v6_152cc, label %dec_label_pc_152d0.loopexit, label %dec_label_pc_152b8

dec_label_pc_152d0.loopexit:                      ; preds = %dec_label_pc_152b8
  %v4_152c8 = sub i32 3, %v0_152c8
  %v5_152c8 = and i32 %v4_152c8, %v0_152c8
  %v6_152c8 = icmp slt i32 %v5_152c8, 0
  %v7_152c8 = icmp slt i32 %v2_152c8, 0
  store i1 %v6_152c8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_152c8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_152d0

dec_label_pc_152d0:                               ; preds = %dec_label_pc_152d0.loopexit, %dec_label_pc_152ac
  %v2_1521451 = phi i32 [ %v5_152c4, %dec_label_pc_152d0.loopexit ], [ %v1_152a0, %dec_label_pc_152ac ]
  %v0_1520447 = phi i32 [ %v2_152c8, %dec_label_pc_152d0.loopexit ], [ %v2_152b0, %dec_label_pc_152ac ]
  %v0_152d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_152d0 = add i32 %v0_152d0, 3
  store i32 %v1_152d0, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_152d8:                               ; preds = %dec_label_pc_15268
  br i1 %v5_15348, label %dec_label_pc_15324, label %dec_label_pc_152e0

dec_label_pc_152e0:                               ; preds = %dec_label_pc_152d8
  store i32 %v2_15344, i32* %r2.global-to-local, align 4
  %v3_152e4 = load i32, i32* @r4, align 4
  store i32 %v3_152e4, i32* %stack_var_-12, align 4
  %v6_152e4 = load i32, i32* @r5, align 4
  %v8_152e4 = inttoptr i32 %v6_152e4 to i8*
  store i8* %v8_152e4, i8** %stack_var_-8, align 4
  %v11_152e4 = load i32, i32* @lr, align 4
  br label %dec_label_pc_152e8

dec_label_pc_152e8:                               ; preds = %dec_label_pc_152e8.dec_label_pc_152e8_crit_edge, %dec_label_pc_152e0
  %v0_1530c = phi i32 [ %v1_1530c, %dec_label_pc_152e8.dec_label_pc_152e8_crit_edge ], [ %v0_152a019, %dec_label_pc_152e0 ]
  %v0_152ec = phi i32 [ %v0_152ec.pre, %dec_label_pc_152e8.dec_label_pc_152e8_crit_edge ], [ %v1_15258, %dec_label_pc_152e0 ]
  %v0_152e8 = phi i32 [ %v0_152e8.pre, %dec_label_pc_152e8.dec_label_pc_152e8_crit_edge ], [ %v2_1525c, %dec_label_pc_152e0 ]
  %v3_152e8 = mul i32 %v0_152e8, 65536
  store i32 %v3_152e8, i32* %lr.global-to-local, align 4
  %v1_152ec = add i32 %v0_152ec, -4
  %v2_152ec = inttoptr i32 %v1_152ec to i32*
  %v3_152ec = load i32, i32* %v2_152ec, align 4
  store i32 %v3_152ec, i32* @r3, align 4
  %v4_152ec = add i32 %v0_152ec, -8
  %v5_152ec = inttoptr i32 %v4_152ec to i32*
  %v6_152ec = load i32, i32* %v5_152ec, align 4
  store i32 %v6_152ec, i32* %r4.global-to-local, align 4
  %v7_152ec = add i32 %v0_152ec, -12
  %v8_152ec = inttoptr i32 %v7_152ec to i32*
  %v9_152ec = load i32, i32* %v8_152ec, align 4
  store i32 %v9_152ec, i32* %r5.global-to-local, align 4
  %v10_152ec = add i32 %v0_152ec, -16
  %v11_152ec = inttoptr i32 %v10_152ec to i32*
  %v12_152ec = load i32, i32* %v11_152ec, align 4
  store i32 %v10_152ec, i32* %r1.global-to-local, align 4
  %v4_152f0 = udiv i32 %v12_152ec, 65536
  %v5_152f0 = or i32 %v4_152f0, %v3_152e8
  store i32 %v5_152f0, i32* %lr.global-to-local, align 4
  %v3_152f4 = mul i32 %v12_152ec, 65536
  %v4_152f8 = udiv i32 %v9_152ec, 65536
  %v5_152f8 = or i32 %v3_152f4, %v4_152f8
  store i32 %v5_152f8, i32* @ip, align 4
  %v3_152fc = mul i32 %v9_152ec, 65536
  %v4_15300 = udiv i32 %v6_152ec, 65536
  %v5_15300 = or i32 %v3_152fc, %v4_15300
  store i32 %v5_15300, i32* %r5.global-to-local, align 4
  %v3_15304 = mul i32 %v6_152ec, 65536
  %v4_15308 = udiv i32 %v3_152ec, 65536
  %v5_15308 = or i32 %v3_15304, %v4_15308
  store i32 %v5_15308, i32* %r4.global-to-local, align 4
  %v1_1530c = add i32 %v0_1530c, -16
  %v2_1530c = inttoptr i32 %v1_1530c to i32*
  store i32 %v5_15308, i32* %v2_1530c, align 4
  %v4_1530c = add i32 %v0_1530c, -12
  %v5_1530c = inttoptr i32 %v4_1530c to i32*
  %v6_1530c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_1530c, i32* %v5_1530c, align 4
  %v7_1530c = add i32 %v0_1530c, -8
  %v8_1530c = inttoptr i32 %v7_1530c to i32*
  %v9_1530c = load i32, i32* @ip, align 4
  store i32 %v9_1530c, i32* %v8_1530c, align 4
  %v10_1530c = add i32 %v0_1530c, -4
  %v11_1530c = inttoptr i32 %v10_1530c to i32*
  %v12_1530c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1530c, i32* %v11_1530c, align 4
  store i32 %v1_1530c, i32* %r0.global-to-local, align 4
  %v0_15310 = load i32, i32* %r2.global-to-local, align 4
  %v2_15310 = add i32 %v0_15310, -16
  store i32 %v2_15310, i32* %r2.global-to-local, align 4
  %v6_15314 = icmp slt i32 %v0_15310, 16
  br i1 %v6_15314, label %dec_label_pc_15318, label %dec_label_pc_152e8.dec_label_pc_152e8_crit_edge

dec_label_pc_152e8.dec_label_pc_152e8_crit_edge:  ; preds = %dec_label_pc_152e8
  %v0_152e8.pre = load i32, i32* @r3, align 4
  %v0_152ec.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_152e8

dec_label_pc_15318:                               ; preds = %dec_label_pc_152e8
  %v2_15318 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15318, i32* @r4, align 4
  %v5_15318 = load i8*, i8** %stack_var_-8, align 4
  %v6_15318 = ptrtoint i8* %v5_15318 to i32
  store i32 %v6_15318, i32* @r5, align 4
  store i32 %v11_152e4, i32* @lr, align 4
  %v2_1531c = add i32 %v0_15310, -4
  store i32 %v2_1531c, i32* %r2.global-to-local, align 4
  %v4_1531c = add i32 %v0_15310, 2147483632
  %v5_1531c = and i32 %v2_1531c, %v4_1531c
  %v6_1531c = icmp slt i32 %v5_1531c, 0
  store i1 %v6_1531c, i1* %cpsr_v.global-to-local, align 1
  %v7_1531c = icmp slt i32 %v2_1531c, 0
  store i1 %v7_1531c, i1* %cpsr_n.global-to-local, align 1
  %v8_1531c = icmp eq i32 %v2_1531c, 0
  store i1 %v8_1531c, i1* %cpsr_z.global-to-local, align 1
  %v5_15320 = icmp slt i32 %v2_15310, -12
  br i1 %v5_15320, label %dec_label_pc_1533c, label %dec_label_pc_15324

dec_label_pc_15324:                               ; preds = %dec_label_pc_15318, %dec_label_pc_152d8, %dec_label_pc_15324
  %v1_15330 = phi i32 [ %v5_15330, %dec_label_pc_15324 ], [ %v1_1530c, %dec_label_pc_15318 ], [ %v0_152a019, %dec_label_pc_152d8 ]
  %v0_15324 = load i32, i32* @r3, align 4
  %v3_15324 = mul i32 %v0_15324, 65536
  store i32 %v3_15324, i32* %ip.global-to-local, align 4
  %v0_15328 = load i32, i32* %r1.global-to-local, align 4
  %v1_15328 = add i32 %v0_15328, -4
  %v2_15328 = inttoptr i32 %v1_15328 to i32*
  %v3_15328 = load i32, i32* %v2_15328, align 4
  store i32 %v3_15328, i32* @r3, align 4
  store i32 %v1_15328, i32* %r1.global-to-local, align 4
  %v4_1532c = udiv i32 %v3_15328, 65536
  %v5_1532c = or i32 %v4_1532c, %v3_15324
  store i32 %v5_1532c, i32* @ip, align 4
  %v2_15330 = add i32 %v1_15330, -4
  %v3_15330 = inttoptr i32 %v2_15330 to i32*
  store i32 %v5_1532c, i32* %v3_15330, align 4
  %v4_15330 = load i32, i32* %r0.global-to-local, align 4
  %v5_15330 = add i32 %v4_15330, -4
  store i32 %v5_15330, i32* %r0.global-to-local, align 4
  %v0_15334 = load i32, i32* %r2.global-to-local, align 4
  %v2_15334 = add i32 %v0_15334, -4
  store i32 %v2_15334, i32* %r2.global-to-local, align 4
  %v6_15338 = icmp slt i32 %v0_15334, 4
  br i1 %v6_15338, label %dec_label_pc_1533c.loopexit, label %dec_label_pc_15324

dec_label_pc_1533c.loopexit:                      ; preds = %dec_label_pc_15324
  %v4_15334 = sub i32 3, %v0_15334
  %v5_15334 = and i32 %v4_15334, %v0_15334
  %v6_15334 = icmp slt i32 %v5_15334, 0
  %v7_15334 = icmp slt i32 %v2_15334, 0
  store i1 %v6_15334, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15334, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1533c

dec_label_pc_1533c:                               ; preds = %dec_label_pc_1533c.loopexit, %dec_label_pc_15318
  %v2_1521452 = phi i32 [ %v5_15330, %dec_label_pc_1533c.loopexit ], [ %v1_1530c, %dec_label_pc_15318 ]
  %v0_1520448 = phi i32 [ %v2_15334, %dec_label_pc_1533c.loopexit ], [ %v2_1531c, %dec_label_pc_15318 ]
  %v0_1533c = load i32, i32* %r1.global-to-local, align 4
  %v1_1533c = add i32 %v0_1533c, 2
  store i32 %v1_1533c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_15344:                               ; preds = %dec_label_pc_15258
  br i1 %v5_15348, label %dec_label_pc_15390, label %dec_label_pc_1534c

dec_label_pc_1534c:                               ; preds = %dec_label_pc_15344
  store i32 %v2_15344, i32* %r2.global-to-local, align 4
  %v3_15350 = load i32, i32* @r4, align 4
  store i32 %v3_15350, i32* %stack_var_-12, align 4
  %v6_15350 = load i32, i32* @r5, align 4
  %v8_15350 = inttoptr i32 %v6_15350 to i8*
  store i8* %v8_15350, i8** %stack_var_-8, align 4
  %v11_15350 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15354

dec_label_pc_15354:                               ; preds = %dec_label_pc_15354.dec_label_pc_15354_crit_edge, %dec_label_pc_1534c
  %v0_15378 = phi i32 [ %v1_15378, %dec_label_pc_15354.dec_label_pc_15354_crit_edge ], [ %v0_152a019, %dec_label_pc_1534c ]
  %v0_15358 = phi i32 [ %v0_15358.pre, %dec_label_pc_15354.dec_label_pc_15354_crit_edge ], [ %v1_15258, %dec_label_pc_1534c ]
  %v0_15354 = phi i32 [ %v0_15354.pre, %dec_label_pc_15354.dec_label_pc_15354_crit_edge ], [ %v2_1525c, %dec_label_pc_1534c ]
  %v3_15354 = mul i32 %v0_15354, 16777216
  store i32 %v3_15354, i32* %lr.global-to-local, align 4
  %v1_15358 = add i32 %v0_15358, -4
  %v2_15358 = inttoptr i32 %v1_15358 to i32*
  %v3_15358 = load i32, i32* %v2_15358, align 4
  store i32 %v3_15358, i32* @r3, align 4
  %v4_15358 = add i32 %v0_15358, -8
  %v5_15358 = inttoptr i32 %v4_15358 to i32*
  %v6_15358 = load i32, i32* %v5_15358, align 4
  store i32 %v6_15358, i32* %r4.global-to-local, align 4
  %v7_15358 = add i32 %v0_15358, -12
  %v8_15358 = inttoptr i32 %v7_15358 to i32*
  %v9_15358 = load i32, i32* %v8_15358, align 4
  store i32 %v9_15358, i32* %r5.global-to-local, align 4
  %v10_15358 = add i32 %v0_15358, -16
  %v11_15358 = inttoptr i32 %v10_15358 to i32*
  %v12_15358 = load i32, i32* %v11_15358, align 4
  store i32 %v10_15358, i32* %r1.global-to-local, align 4
  %v4_1535c = udiv i32 %v12_15358, 256
  %v5_1535c = or i32 %v4_1535c, %v3_15354
  store i32 %v5_1535c, i32* %lr.global-to-local, align 4
  %v3_15360 = mul i32 %v12_15358, 16777216
  %v4_15364 = udiv i32 %v9_15358, 256
  %v5_15364 = or i32 %v3_15360, %v4_15364
  store i32 %v5_15364, i32* @ip, align 4
  %v3_15368 = mul i32 %v9_15358, 16777216
  %v4_1536c = udiv i32 %v6_15358, 256
  %v5_1536c = or i32 %v3_15368, %v4_1536c
  store i32 %v5_1536c, i32* %r5.global-to-local, align 4
  %v3_15370 = mul i32 %v6_15358, 16777216
  %v4_15374 = udiv i32 %v3_15358, 256
  %v5_15374 = or i32 %v3_15370, %v4_15374
  store i32 %v5_15374, i32* %r4.global-to-local, align 4
  %v1_15378 = add i32 %v0_15378, -16
  %v2_15378 = inttoptr i32 %v1_15378 to i32*
  store i32 %v5_15374, i32* %v2_15378, align 4
  %v4_15378 = add i32 %v0_15378, -12
  %v5_15378 = inttoptr i32 %v4_15378 to i32*
  %v6_15378 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15378, i32* %v5_15378, align 4
  %v7_15378 = add i32 %v0_15378, -8
  %v8_15378 = inttoptr i32 %v7_15378 to i32*
  %v9_15378 = load i32, i32* @ip, align 4
  store i32 %v9_15378, i32* %v8_15378, align 4
  %v10_15378 = add i32 %v0_15378, -4
  %v11_15378 = inttoptr i32 %v10_15378 to i32*
  %v12_15378 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15378, i32* %v11_15378, align 4
  store i32 %v1_15378, i32* %r0.global-to-local, align 4
  %v0_1537c = load i32, i32* %r2.global-to-local, align 4
  %v2_1537c = add i32 %v0_1537c, -16
  store i32 %v2_1537c, i32* %r2.global-to-local, align 4
  %v6_15380 = icmp slt i32 %v0_1537c, 16
  br i1 %v6_15380, label %dec_label_pc_15384, label %dec_label_pc_15354.dec_label_pc_15354_crit_edge

dec_label_pc_15354.dec_label_pc_15354_crit_edge:  ; preds = %dec_label_pc_15354
  %v0_15354.pre = load i32, i32* @r3, align 4
  %v0_15358.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15354

dec_label_pc_15384:                               ; preds = %dec_label_pc_15354
  %v2_15384 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15384, i32* @r4, align 4
  %v5_15384 = load i8*, i8** %stack_var_-8, align 4
  %v6_15384 = ptrtoint i8* %v5_15384 to i32
  store i32 %v6_15384, i32* @r5, align 4
  store i32 %v11_15350, i32* @lr, align 4
  %v2_15388 = add i32 %v0_1537c, -4
  store i32 %v2_15388, i32* %r2.global-to-local, align 4
  %v4_15388 = add i32 %v0_1537c, 2147483632
  %v5_15388 = and i32 %v2_15388, %v4_15388
  %v6_15388 = icmp slt i32 %v5_15388, 0
  store i1 %v6_15388, i1* %cpsr_v.global-to-local, align 1
  %v7_15388 = icmp slt i32 %v2_15388, 0
  store i1 %v7_15388, i1* %cpsr_n.global-to-local, align 1
  %v8_15388 = icmp eq i32 %v2_15388, 0
  store i1 %v8_15388, i1* %cpsr_z.global-to-local, align 1
  %v5_1538c = icmp slt i32 %v2_1537c, -12
  br i1 %v5_1538c, label %dec_label_pc_153a8, label %dec_label_pc_15390

dec_label_pc_15390:                               ; preds = %dec_label_pc_15384, %dec_label_pc_15344, %dec_label_pc_15390
  %v1_1539c = phi i32 [ %v5_1539c, %dec_label_pc_15390 ], [ %v1_15378, %dec_label_pc_15384 ], [ %v0_152a019, %dec_label_pc_15344 ]
  %v0_15390 = load i32, i32* @r3, align 4
  %v3_15390 = mul i32 %v0_15390, 16777216
  store i32 %v3_15390, i32* %ip.global-to-local, align 4
  %v0_15394 = load i32, i32* %r1.global-to-local, align 4
  %v1_15394 = add i32 %v0_15394, -4
  %v2_15394 = inttoptr i32 %v1_15394 to i32*
  %v3_15394 = load i32, i32* %v2_15394, align 4
  store i32 %v3_15394, i32* @r3, align 4
  store i32 %v1_15394, i32* %r1.global-to-local, align 4
  %v4_15398 = udiv i32 %v3_15394, 256
  %v5_15398 = or i32 %v4_15398, %v3_15390
  store i32 %v5_15398, i32* @ip, align 4
  %v2_1539c = add i32 %v1_1539c, -4
  %v3_1539c = inttoptr i32 %v2_1539c to i32*
  store i32 %v5_15398, i32* %v3_1539c, align 4
  %v4_1539c = load i32, i32* %r0.global-to-local, align 4
  %v5_1539c = add i32 %v4_1539c, -4
  store i32 %v5_1539c, i32* %r0.global-to-local, align 4
  %v0_153a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_153a0 = add i32 %v0_153a0, -4
  store i32 %v2_153a0, i32* %r2.global-to-local, align 4
  %v6_153a4 = icmp slt i32 %v0_153a0, 4
  br i1 %v6_153a4, label %dec_label_pc_153a8.loopexit, label %dec_label_pc_15390

dec_label_pc_153a8.loopexit:                      ; preds = %dec_label_pc_15390
  %v4_153a0 = sub i32 3, %v0_153a0
  %v5_153a0 = and i32 %v4_153a0, %v0_153a0
  %v6_153a0 = icmp slt i32 %v5_153a0, 0
  %v7_153a0 = icmp slt i32 %v2_153a0, 0
  store i1 %v6_153a0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_153a0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_153a8

dec_label_pc_153a8:                               ; preds = %dec_label_pc_153a8.loopexit, %dec_label_pc_15384
  %v2_1521453 = phi i32 [ %v5_1539c, %dec_label_pc_153a8.loopexit ], [ %v1_15378, %dec_label_pc_15384 ]
  %v0_1520449 = phi i32 [ %v2_153a0, %dec_label_pc_153a8.loopexit ], [ %v2_15388, %dec_label_pc_15384 ]
  %v0_153a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_153a8 = add i32 %v0_153a8, 1
  store i32 %v1_153a8, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_1539c, { 0, 2, 1 }
  uselistorder i32 %v3_15390, { 1, 0 }
  uselistorder i32 %v2_15388, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15378, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15358, { 1, 0 }
  uselistorder i32 %v3_15354, { 1, 0 }
  uselistorder i32 %v0_15358, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15378, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15330, { 0, 2, 1 }
  uselistorder i32 %v3_15324, { 1, 0 }
  uselistorder i32 %v2_1531c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_1530c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_152ec, { 1, 0 }
  uselistorder i32 %v3_152e8, { 1, 0 }
  uselistorder i32 %v0_152ec, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1530c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_152c4, { 0, 2, 1 }
  uselistorder i32 %v3_152b8, { 1, 0 }
  uselistorder i32 %v2_152b0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_152a0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15280, { 1, 0 }
  uselistorder i32 %v3_1527c, { 1, 0 }
  uselistorder i32 %v0_15280, { 3, 2, 1, 0 }
  uselistorder i32 %v0_152a0, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15348, { 2, 0, 1 }
  uselistorder i32 %v0_15260, { 1, 0 }
  uselistorder i32 %v0_1534c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_152a019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15250, { 2, 1, 0 }
  uselistorder i32 %v0_15250, { 2, 0, 1 }
  uselistorder i32 %v2_15248, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15248, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15248, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_152a020, { 2, 1, 0 }
  uselistorder i32 %v11_15224, { 1, 0 }
  uselistorder i32 %v7_15224, { 1, 0 }
  uselistorder i32 %v1_15204, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_15204, { 1, 2, 0, 3 }
  uselistorder i32 %v2_15208, { 1, 0 }
  uselistorder i32 %v7_151fc, { 0, 2, 1 }
  uselistorder i32 %v10_151f8, { 1, 0 }
  uselistorder i32 %v9_151f0, { 1, 0, 2 }
  uselistorder i32 %v6_151ec, { 1, 0 }
  uselistorder i32 %v2_151e4, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_151e4, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_151f4, { 0, 3, 2, 1 }
  uselistorder i32 %v7_151d8, { 0, 2, 1 }
  uselistorder i32 %v13_151d4, { 1, 0 }
  uselistorder i32 %v4_151d0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_151d0, { 2, 0, 1 }
  uselistorder i32 %v6_151d8, { 0, 3, 2, 1 }
  uselistorder i32 %v7_151c8, { 0, 2, 1 }
  uselistorder i32 %v16_151c4, { 1, 0 }
  uselistorder i32 %v4_151c0, { 1, 2, 0 }
  uselistorder i32 %v0_151d0.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_151c8, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_151b4, { 0, 3, 2, 1 }
  uselistorder i32 %v10_151b0, { 1, 0 }
  uselistorder i32 %v1_151ac, { 1, 0 }
  uselistorder i32 %v10_151a8, { 1, 0 }
  uselistorder i32 %v0_151a8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_151ac, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_151a0, { 0, 2, 1 }
  uselistorder i32 %v2_15194, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15194, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_151ac37, { 1, 2, 0 }
  uselistorder i32 %v1_1518c, { 2, 1, 0 }
  uselistorder i32 %v1_15184, { 2, 3, 1, 0 }
  uselistorder i32 %v2_1517c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_15178, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_15174, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_15174, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_15164, { 0, 2, 1 }
  uselistorder i32 %v4_15160, { 1, 0 }
  uselistorder i32 %v3_15154, { 1, 0 }
  uselistorder i32 %v1_1514c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15140, { 1, 0 }
  uselistorder i32 %v12_1513c, { 0, 2, 1 }
  uselistorder i32 %v8_1511c, { 1, 0, 2 }
  uselistorder i32 %v5_1511c, { 1, 0, 2 }
  uselistorder i32 %v2_1511c, { 1, 0, 2 }
  uselistorder i32 %v0_1511c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1513c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_150f8, { 0, 2, 1 }
  uselistorder i32 %v4_150f4, { 1, 0 }
  uselistorder i32 %v3_150e8, { 1, 0 }
  uselistorder i32 %v1_150e0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_150d4, { 1, 0 }
  uselistorder i32 %v12_150d0, { 0, 2, 1 }
  uselistorder i32 %v8_150b0, { 1, 0, 2 }
  uselistorder i32 %v5_150b0, { 1, 0, 2 }
  uselistorder i32 %v2_150b0, { 1, 0, 2 }
  uselistorder i32 %v0_150b0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_150d0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1508c, { 0, 2, 1 }
  uselistorder i32 %v4_15088, { 1, 0 }
  uselistorder i32 %v3_1507c, { 1, 0 }
  uselistorder i32 %v1_15074, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15068, { 1, 0 }
  uselistorder i32 %v12_15064, { 0, 2, 1 }
  uselistorder i32 %v8_15044, { 1, 0, 2 }
  uselistorder i32 %v5_15044, { 1, 0, 2 }
  uselistorder i32 %v2_15044, { 1, 0, 2 }
  uselistorder i32 %v0_15044, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15064, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_150a0, { 0, 2, 1 }
  uselistorder i32 %v1_1509c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_15020, { 2, 0, 1, 3 }
  uselistorder i32 %v2_15020, { 2, 0, 1, 3 }
  uselistorder i32 %v0_150a4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1513c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_15014, { 1, 0 }
  uselistorder i32 %v0_15014, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1500c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1500c, { 1, 0, 2 }
  uselistorder i32 %v0_1500c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1513c77, { 1, 0 }
  uselistorder i32 %v1_14fec, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_14ff4, { 1, 0 }
  uselistorder i32 %v0_14fc8, { 3, 0, 1, 2 }
  uselistorder i32 %v1_14fbc, { 1, 2, 0, 3 }
  uselistorder i32 %v5_14fa8, { 1, 0, 2 }
  uselistorder i32 %v1_14fa4, { 1, 0 }
  uselistorder i32 %v1_14f9c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_14f9c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_14f94, { 0, 2, 1 }
  uselistorder i32 %v3_14f94, { 3, 0, 1, 2 }
  uselistorder i1 %v0_14f94, { 1, 0 }
  uselistorder i1 %v1_14f94, { 1, 0 }
  uselistorder i32 %v3_14f90, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14f88, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14f74, { 1, 2, 0 }
  uselistorder i32 %v1_14f6c, { 0, 2, 1 }
  uselistorder i32 %v12_14f68, { 0, 1, 3, 2 }
  uselistorder i32 %v0_14f5c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14f60, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_14f50, { 0, 2, 1 }
  uselistorder i32 %v1_14f48, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_14f48, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_14f40, { 1, 0 }
  uselistorder i32 %v1_14f38, { 2, 1, 0 }
  uselistorder i32 %v2_14f30, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_14f30, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_14f2c, { 1, 0 }
  uselistorder i32 %v2_14f20, { 1, 0 }
  uselistorder i32 %v1_14f20, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_14f20, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 53, 10, 58, 54, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 2, 25, 0, 26, 1, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 15, 16, 17, 0, 26, 1, 27, 18, 19, 4, 20, 5, 21, 6, 7, 8, 9, 10, 11, 12, 13, 22, 14, 23, 2, 24, 3, 25 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 28, 2, 4, 5, 3, 6, 7, 8, 9, 17, 33, 38, 36, 37, 35, 29, 30, 21, 22, 31, 32, 34, 25, 26, 27, 18, 24, 23, 11, 12, 10, 13, 14, 15, 16, 19, 20, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 5, 6, 7, 14, 22, 23, 8, 9, 10, 2, 11, 12, 13, 15, 16, 3, 17, 4, 18, 0, 19, 1, 20, 21 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 2, 4, 12, 3, 5, 6, 13, 14, 8, 9, 10, 11, 18, 19, 20, 15, 16, 7, 17, 1 }
  uselistorder i32 40, { 3, 9, 11, 4, 2, 7, 6, 10, 8, 12, 13, 14, 5, 15, 16, 0, 17, 19, 18, 20, 1, 21, 23, 22, 24 }
  uselistorder i32 36, { 4, 19, 5, 6, 7, 20, 8, 17, 9, 18, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 1, 2, 3, 4, 0 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 24, { 1, 60, 61, 62, 63, 9, 10, 11, 13, 12, 14, 2, 15, 64, 65, 66, 16, 67, 17, 18, 68, 19, 59, 92, 93, 55, 56, 57, 58, 20, 21, 22, 23, 107, 108, 24, 109, 25, 3, 26, 94, 95, 27, 96, 53, 54, 28, 85, 86, 87, 82, 77, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 88, 89, 90, 91, 29, 30, 31, 0, 32, 33, 4, 34, 35, 36, 5, 37, 38, 6, 39, 40, 41, 42, 43, 44, 7, 99, 45, 100, 101, 102, 103, 46, 47, 8, 104, 48, 105, 49, 50, 51, 106, 110, 97, 52, 98 }
  uselistorder i32 27, { 1, 0, 2, 8, 6, 9, 3, 10, 4, 11, 5, 12, 7, 13 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 145, 146, 147, 148, 149, 150, 151, 152, 153, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 70, 71, 33, 154, 155, 12, 13, 118, 119, 120, 121, 122, 123, 115, 116, 117, 124, 137, 138, 125, 126, 127, 128, 129, 130, 131, 1, 132, 133, 135, 136, 134, 39, 40, 41, 42, 43, 44, 139, 140, 141, 45, 104, 72, 14, 15, 16, 17, 18, 0, 22, 23, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 142, 143, 144, 68, 69 }
  uselistorder label %dec_label_pc_15390, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15324, { 2, 0, 1 }
  uselistorder label %dec_label_pc_152b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15258, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_151e4, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_151a8, { 1, 0 }
  uselistorder label %dec_label_pc_15194, { 1, 0 }
  uselistorder label %dec_label_pc_15154, { 2, 0, 1 }
  uselistorder label %dec_label_pc_150e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1507c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1501c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_14fec, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_14f88, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_14f48, { 1, 0 }
}

define i32 @function_153b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_153b0:
  %v1_153b0 = and i32 %arg1, -4
  %v1_153b4 = inttoptr i32 %v1_153b0 to i32*
  %v2_153b4 = load i32, i32* %v1_153b4, align 4
  %v1_153b8 = urem i32 %arg1, 4
  store i32 %v1_153b8, i32* @r3, align 4
  %v2_153b8 = icmp eq i32 %v1_153b8, 0
  %v1_153bc = sub nsw i32 0, %v1_153b8
  br i1 %v2_153b8, label %.preheader.preheader, label %dec_label_pc_153c4

dec_label_pc_153c4:                               ; preds = %dec_label_pc_153b0
  %v1_153c4 = or i32 %v2_153b4, 255
  %v7_153c8 = icmp eq i32 %v1_153b8, 1
  br i1 %v7_153c8, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_153c4
  %v9_153cc = or i32 %v2_153b4, or (i32 ptrtoint (i32* @global_var_ff00.21 to i32), i32 255)
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_153c4, %bb
  %v8_153d4 = phi i32 [ %v1_153c4, %dec_label_pc_153c4 ], [ %v9_153cc, %bb ]
  %v1_153d0 = add nsw i32 %v1_153b8, -2
  store i32 %v1_153d0, i32* @r3, align 4
  %v7_153d4 = icmp eq i32 %v1_153b8, 3
  br i1 %v7_153d4, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_153d4 = or i32 %v8_153d4, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_153b0
  %v1_153e4.ph = phi i32 [ %v2_153b4, %dec_label_pc_153b0 ], [ %v9_153d4, %bb34 ], [ %v8_153d4, %bb33 ]
  %v1_153d838 = urem i32 %v1_153e4.ph, 256
  %v2_153d839 = icmp eq i32 %v1_153d838, 0
  %v2_153dc40 = and i32 %v1_153e4.ph, 65280
  %v3_153dc41 = icmp eq i32 %v2_153dc40, 0
  %or.cond42 = or i1 %v2_153d839, %v3_153dc41
  %v2_153e043 = and i32 %v1_153e4.ph, 16711680
  %v3_153e044 = icmp eq i32 %v2_153e043, 0
  %or.cond3145 = or i1 %v3_153e044, %or.cond42
  %v4_153e446 = icmp ult i32 %v1_153e4.ph, 16777216
  %or.cond3247 = or i1 %v4_153e446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_153f4, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_153e81349 = phi i32 [ %v2_153e814, %.thread4 ], [ %v1_153bc, %.preheader.preheader ]
  %v1_153ec48.in = phi i32 [ %v1_153ec48, %.thread4 ], [ %v1_153b0, %.preheader.preheader ]
  %v1_153ec48 = add i32 %v1_153ec48.in, 4
  %v2_153e814 = add i32 %v1_153e81349, 4
  %v2_153ec = inttoptr i32 %v1_153ec48 to i32*
  %v3_153ec = load i32, i32* %v2_153ec, align 4
  %v1_153d8 = urem i32 %v3_153ec, 256
  %v2_153d8 = icmp eq i32 %v1_153d8, 0
  %v2_153dc = and i32 %v3_153ec, 65280
  %v3_153dc = icmp eq i32 %v2_153dc, 0
  %or.cond = or i1 %v2_153d8, %v3_153dc
  %v2_153e0 = and i32 %v3_153ec, 16711680
  %v3_153e0 = icmp eq i32 %v2_153e0, 0
  %or.cond31 = or i1 %v3_153e0, %or.cond
  %v4_153e4 = icmp ult i32 %v3_153ec, 16777216
  %or.cond32 = or i1 %v4_153e4, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_153f4, label %.thread4

dec_label_pc_153f4:                               ; preds = %.thread4, %.preheader.preheader
  %v1_153e813.lcssa = phi i32 [ %v1_153bc, %.preheader.preheader ], [ %v2_153e814, %.thread4 ]
  %v2_153d8.lcssa = phi i1 [ %v2_153d839, %.preheader.preheader ], [ %v2_153d8, %.thread4 ]
  %v3_153dc.lcssa = phi i1 [ %v3_153dc41, %.preheader.preheader ], [ %v3_153dc, %.thread4 ]
  %v3_153e0.lcssa = phi i1 [ %v3_153e044, %.preheader.preheader ], [ %v3_153e0, %.thread4 ]
  br i1 %v2_153d8.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_153f4
  %v2_153f8 = add i32 %v1_153e813.lcssa, 1
  br i1 %v3_153dc.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_1540017 = add i32 %v1_153e813.lcssa, 2
  br i1 %v3_153e0.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_15408 = add i32 %v1_153e813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_153f4, %bb35, %bb36, %bb37
  %v1_1540c = phi i32 [ %v2_153f8, %bb35 ], [ %v2_1540017, %bb36 ], [ %v2_15408, %bb37 ], [ %v1_153e813.lcssa, %dec_label_pc_153f4 ]
  ret i32 %v1_1540c

; uselistorder directives
  uselistorder i32 %v1_153e813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_153ec, { 3, 2, 1, 0 }
  uselistorder i32 %v1_153e4.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_153b8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 2, 0, 4, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 14 }
  uselistorder i32 -2, { 1, 3, 4, 2, 6, 7, 8, 0, 5, 9, 25, 24, 26, 27, 28, 17, 18, 19, 20, 21, 22, 23, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 -4, { 41, 18, 62, 63, 64, 6, 19, 20, 21, 65, 66, 67, 7, 22, 23, 24, 68, 69, 70, 8, 25, 26, 71, 17, 16, 72, 73, 74, 15, 14, 13, 12, 27, 28, 29, 30, 31, 5, 32, 3, 33, 4, 75, 11, 34, 49, 50, 51, 9, 52, 53, 54, 35, 48, 2, 36, 42, 43, 44, 45, 46, 47, 0, 1, 55, 56, 57, 58, 59, 60, 61, 37, 38, 39, 40, 10 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_15410(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_15414.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_15410

dec_label_pc_15410:                               ; preds = %bb3, %bb
  %v0_15414 = phi i32 [ %v0_15414.pre, %bb ], [ %v5_15414, %bb3 ]
  %v0_15410 = phi i32 [ %tmp, %bb ], [ %v5_15410, %bb3 ]
  %v1_15410 = inttoptr i32 %v0_15410 to i8*
  %v2_15410 = load i8, i8* %v1_15410, align 1
  %v1_15414 = inttoptr i32 %v0_15414 to i8*
  %v2_15414 = load i8, i8* %v1_15414, align 1
  %v3_15414 = zext i8 %v2_15414 to i32
  %v2_15418 = icmp eq i8 %v2_15410, 0
  br i1 %v2_15418, label %.dec_label_pc_15424_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_15410
  %v5_15414 = add i32 %v0_15414, 1
  %v5_15410 = add i32 %v0_15410, 1
  %v3_15410 = zext i8 %v2_15410 to i32
  %v10_1541c = icmp eq i8 %v2_15410, %v2_15414
  br i1 %v10_1541c, label %dec_label_pc_15410, label %dec_label_pc_15424

.dec_label_pc_15424_crit_edge:                    ; preds = %dec_label_pc_15410
  br label %dec_label_pc_15424

dec_label_pc_15424:                               ; preds = %bb3, %.dec_label_pc_15424_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_15424_crit_edge ], [ %v3_15410, %bb3 ]
  %v2_15424.pre-phi = sub nsw i32 %.pn, %v3_15414
  ret i32 %v2_15424.pre-phi

; uselistorder directives
  uselistorder i8 %v2_15410, { 0, 2, 1 }
  uselistorder i32 %v0_15410, { 1, 0 }
  uselistorder i32 %v0_15414, { 1, 0 }
  uselistorder label %dec_label_pc_15424, { 1, 0 }
}

define i32 @function_15430() local_unnamed_addr {
dec_label_pc_15430:
  %stack_var_-16 = alloca i32, align 4
  %v3_15430 = load i32, i32* @r4, align 4
  store i32 %v3_15430, i32* %stack_var_-16, align 4
  %v6_15430 = load i32, i32* @r5, align 4
  %v9_15430 = load i32, i32* @r6, align 4
  %v0_15434 = load i32, i32* @r0, align 4
  %v0_15438 = load i32, i32* @r1, align 4
  store i32 %v0_15438, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_154548 = inttoptr i32 %v0_15434 to i8*
  %v2_154549 = load i8, i8* %v1_154548, align 1
  %v2_1545811 = icmp eq i8 %v2_154549, 0
  store i32 %v0_15438, i32* @r0, align 4
  %v1_1546012 = add i32 %v0_15434, 1
  store i32 %v1_1546012, i32* @r4, align 4
  br i1 %v2_1545811, label %dec_label_pc_15468, label %dec_label_pc_15444

dec_label_pc_15444:                               ; preds = %dec_label_pc_15430, %dec_label_pc_15450
  %v3_1545414.in = phi i8 [ %v2_15454, %dec_label_pc_15450 ], [ %v2_154549, %dec_label_pc_15430 ]
  %v0_1545c13 = phi i32 [ %v0_1545c.pre, %dec_label_pc_15450 ], [ %v0_15438, %dec_label_pc_15430 ]
  %v3_1545414 = zext i8 %v3_1545414.in to i32
  %v2_15444 = call i32 @function_155fc(i32 %v0_1545c13, i32 %v3_1545414)
  %v2_15448 = icmp eq i32 %v2_15444, 0
  %v0_15450 = load i32, i32* @r5, align 4
  br i1 %v2_15448, label %dec_label_pc_15450, label %dec_label_pc_15468

dec_label_pc_15450:                               ; preds = %dec_label_pc_15444
  %v1_15450 = add i32 %v0_15450, 1
  %v0_15454.pre = load i32, i32* @r4, align 4
  %v0_1545c.pre = load i32, i32* @r6, align 4
  store i32 %v1_15450, i32* @r5, align 4
  %v1_15454 = inttoptr i32 %v0_15454.pre to i8*
  %v2_15454 = load i8, i8* %v1_15454, align 1
  %v2_15458 = icmp eq i8 %v2_15454, 0
  store i32 %v0_1545c.pre, i32* @r0, align 4
  %v1_15460 = add i32 %v0_15454.pre, 1
  store i32 %v1_15460, i32* @r4, align 4
  br i1 %v2_15458, label %dec_label_pc_15468, label %dec_label_pc_15444

dec_label_pc_15468:                               ; preds = %dec_label_pc_15450, %dec_label_pc_15444, %dec_label_pc_15430
  %v0_15468 = phi i32 [ 0, %dec_label_pc_15430 ], [ %v0_15450, %dec_label_pc_15444 ], [ %v1_15450, %dec_label_pc_15450 ]
  %v2_1546c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1546c, i32* @r4, align 4
  store i32 %v6_15430, i32* @r5, align 4
  store i32 %v9_15430, i32* @r6, align 4
  ret i32 %v0_15468

; uselistorder directives
  uselistorder i8 %v2_15454, { 1, 0 }
  uselistorder i32 %v0_1545c.pre, { 1, 0 }
  uselistorder i32 %v0_15454.pre, { 1, 0 }
  uselistorder i32* @r6, { 28, 2, 29, 30, 3, 31, 32, 33, 4, 34, 35, 23, 24, 36, 37, 5, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 6, 7, 55, 56, 57, 58, 59, 60, 61, 62, 25, 26, 27, 8, 9, 10, 396, 397, 398, 399, 400, 401, 402, 63, 11, 64, 12, 65, 394, 395, 345, 349, 350, 351, 352, 346, 347, 348, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 353, 378, 379, 380, 354, 355, 356, 357, 358, 13, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 376, 370, 371, 372, 373, 375, 377, 109, 110, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 72, 125, 126, 127, 128, 66, 129, 130, 131, 96, 132, 86, 97, 98, 99, 100, 101, 67, 68, 69, 87, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 106, 107, 108, 133, 134, 135, 1, 0, 136, 137, 138, 139, 140, 141, 142, 19, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 239, 240, 241, 242, 153, 154, 155, 156, 157, 158, 159, 160, 14, 161, 162, 163, 164, 165, 166, 167, 168, 182, 183, 184, 185, 20, 186, 187, 188, 15, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 21, 16, 309, 310, 312, 313, 311, 314, 315, 316, 317, 318, 319, 381, 382, 22, 17, 383, 384, 386, 387, 385, 388, 389, 390, 391, 392, 393, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 18, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238 }
  uselistorder label %dec_label_pc_15444, { 1, 0 }
}

define i32 @function_15474(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15474:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_154a42 = load i32, i32* @r0, align 4
  %v1_154a43 = inttoptr i32 %v0_154a42 to i8*
  %v2_154a44 = load i8, i8* %v1_154a43, align 1
  %v3_154a45 = zext i8 %v2_154a44 to i32
  store i32 %v3_154a45, i32* @ip, align 4
  %v2_154a86 = icmp eq i8 %v2_154a44, 0
  br i1 %v2_154a86, label %dec_label_pc_154b4, label %dec_label_pc_15488.preheader

dec_label_pc_15480:                               ; preds = %dec_label_pc_15488
  %v3_15488 = zext i8 %v2_15488 to i32
  %v1_15490 = add i32 %v0_15490, 1
  %v9_15480 = icmp eq i32 %v0_1548010, %v3_15488
  br i1 %v9_15480, label %dec_label_pc_1549c, label %dec_label_pc_15488

dec_label_pc_15488:                               ; preds = %dec_label_pc_15488.preheader, %dec_label_pc_15480
  %v0_15490 = phi i32 [ %tmp, %dec_label_pc_15488.preheader ], [ %v1_15490, %dec_label_pc_15480 ]
  %v1_15488 = inttoptr i32 %v0_15490 to i8*
  %v2_15488 = load i8, i8* %v1_15488, align 1
  %v2_1548c = icmp eq i8 %v2_15488, 0
  br i1 %v2_1548c, label %dec_label_pc_154b4, label %dec_label_pc_15480

dec_label_pc_1549c:                               ; preds = %dec_label_pc_15480
  %v1_1549c = add i32 %v0_1549c, 1
  %v1_154a0 = add i32 %v0_154a0, 1
  %v1_154a4 = inttoptr i32 %v1_154a0 to i8*
  %v2_154a4 = load i8, i8* %v1_154a4, align 1
  %v3_154a4 = zext i8 %v2_154a4 to i32
  store i32 %v3_154a4, i32* @ip, align 4
  %v2_154a8 = icmp eq i8 %v2_154a4, 0
  br i1 %v2_154a8, label %dec_label_pc_154b4, label %dec_label_pc_15488.preheader

dec_label_pc_15488.preheader:                     ; preds = %dec_label_pc_15474, %dec_label_pc_1549c
  %v0_154a0 = phi i32 [ %v1_154a0, %dec_label_pc_1549c ], [ %v0_154a42, %dec_label_pc_15474 ]
  %v0_1549c = phi i32 [ %v1_1549c, %dec_label_pc_1549c ], [ 0, %dec_label_pc_15474 ]
  %v0_1548010 = phi i32 [ %v3_154a4, %dec_label_pc_1549c ], [ %v3_154a45, %dec_label_pc_15474 ]
  br label %dec_label_pc_15488

dec_label_pc_154b4:                               ; preds = %dec_label_pc_1549c, %dec_label_pc_15488, %dec_label_pc_15474
  %v0_154b4 = phi i32 [ 0, %dec_label_pc_15474 ], [ %v0_1549c, %dec_label_pc_15488 ], [ %v1_1549c, %dec_label_pc_1549c ]
  ret i32 %v0_154b4

; uselistorder directives
  uselistorder i32 %v0_15490, { 1, 0 }
  uselistorder label %dec_label_pc_15488.preheader, { 1, 0 }
}

define i32 @function_154c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_154c0:
  store i32 %arg1, i32* @r0, align 4
  %v1_154c4 = urem i32 %arg2, 256
  store i32 %v1_154c4, i32* @r4, align 4
  %v2_154c4 = icmp eq i32 %v1_154c4, 0
  br i1 %v2_154c4, label %dec_label_pc_154d8, label %dec_label_pc_154ec.preheader

dec_label_pc_154ec.preheader:                     ; preds = %dec_label_pc_154c0
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_154f43 = call i32 @function_155fc(i32 %arg1, i32 %v1_154c4)
  %v2_154f85 = icmp eq i32 %v2_154f43, 0
  br i1 %v2_154f85, label %dec_label_pc_15500, label %dec_label_pc_154e4

dec_label_pc_154d8:                               ; preds = %dec_label_pc_154c0
  %v2_154dc = call i32 @function_155fc(i32 %arg1, i32 0)
  br label %dec_label_pc_15504

dec_label_pc_154e4:                               ; preds = %dec_label_pc_154ec.preheader, %dec_label_pc_154e4
  %v2_154f46 = phi i32 [ %v2_154f4, %dec_label_pc_154e4 ], [ %v2_154f43, %dec_label_pc_154ec.preheader ]
  store i32 %v2_154f46, i32* @r5, align 4
  %v1_154e8 = add i32 %v2_154f46, 1
  store i32 %v1_154e8, i32* @r0, align 4
  %v0_154f0 = load i32, i32* @r4, align 4
  %v2_154f4 = call i32 @function_155fc(i32 %v1_154e8, i32 %v0_154f0)
  %v2_154f8 = icmp eq i32 %v2_154f4, 0
  br i1 %v2_154f8, label %dec_label_pc_15500, label %dec_label_pc_154e4

dec_label_pc_15500:                               ; preds = %dec_label_pc_154e4, %dec_label_pc_154ec.preheader
  %v0_15500 = load i32, i32* @r5, align 4
  br label %dec_label_pc_15504

dec_label_pc_15504:                               ; preds = %dec_label_pc_154d8, %dec_label_pc_15500
  %storemerge = phi i32 [ %v2_154dc, %dec_label_pc_154d8 ], [ %v0_15500, %dec_label_pc_15500 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_154f4, { 1, 0 }
  uselistorder i32 %v1_154e8, { 1, 0 }
  uselistorder i32 %v1_154c4, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_155fc, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15504, { 1, 0 }
  uselistorder label %dec_label_pc_154e4, { 1, 0 }
}

define i32 @function_15510(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15510:
  %v1_15514 = urem i32 %arg1, 256
  %v0_155342 = load i32, i32* @r0, align 4
  %v1_155343 = urem i32 %v0_155342, 4
  %v2_155344 = icmp eq i32 %v1_155343, 0
  br i1 %v2_155344, label %dec_label_pc_1553c, label %dec_label_pc_1551c

dec_label_pc_1551c:                               ; preds = %dec_label_pc_15510, %dec_label_pc_15530
  %v0_15530 = phi i32 [ %v1_15530, %dec_label_pc_15530 ], [ %v0_155342, %dec_label_pc_15510 ]
  %v1_1551c = inttoptr i32 %v0_15530 to i8*
  %v2_1551c = load i8, i8* %v1_1551c, align 1
  %v3_1551c = zext i8 %v2_1551c to i32
  %v9_15520 = icmp eq i32 %v3_1551c, %v1_15514
  br i1 %v9_15520, label %dec_label_pc_155ec, label %dec_label_pc_15528

dec_label_pc_15528:                               ; preds = %dec_label_pc_1551c
  %v2_15528 = icmp eq i8 %v2_1551c, 0
  br i1 %v2_15528, label %dec_label_pc_155ec, label %dec_label_pc_15530

dec_label_pc_15530:                               ; preds = %dec_label_pc_15528
  %v1_15530 = add i32 %v0_15530, 1
  %v1_15534 = urem i32 %v1_15530, 4
  %v2_15534 = icmp eq i32 %v1_15534, 0
  br i1 %v2_15534, label %dec_label_pc_1553c, label %dec_label_pc_1551c

dec_label_pc_1553c:                               ; preds = %dec_label_pc_15530, %dec_label_pc_15510
  %v0_15540 = phi i32 [ %v0_155342, %dec_label_pc_15510 ], [ %v1_15530, %dec_label_pc_15530 ]
  %v4_1553c = mul nuw nsw i32 %v1_15514, 256
  %v5_1553c = or i32 %v4_1553c, %v1_15514
  %v4_15544 = mul i32 %v5_1553c, 65536
  %v5_15544 = or i32 %v4_15544, %v5_1553c
  br label %dec_label_pc_15548

dec_label_pc_15548:                               ; preds = %dec_label_pc_155e4, %dec_label_pc_15584, %dec_label_pc_1553c
  %v0_155ac = phi i32 [ %v0_15540, %dec_label_pc_1553c ], [ %v4_15548, %dec_label_pc_15584 ], [ %v4_15548, %dec_label_pc_155e4 ]
  %v1_15548 = inttoptr i32 %v0_155ac to i32*
  %v2_15548 = load i32, i32* %v1_15548, align 4
  %v4_15548 = add i32 %v0_155ac, 4
  %v2_15550 = xor i32 %v2_15548, %v5_15544
  %v2_15554 = add i32 %v2_15550, 2130640639
  store i32 %v2_15554, i32* @ip, align 4
  %v2_1555c = add i32 %v2_15548, 2130640639
  %v1_15560 = sub i32 -1, %v2_15548
  %v2_15564 = xor i32 %v2_1555c, %v1_15560
  %v2_15570 = and i32 %v2_15564, -2130640640
  %v2_15578 = icmp eq i32 %v2_15570, 0
  br i1 %v2_15578, label %dec_label_pc_15584, label %dec_label_pc_1558c

dec_label_pc_15584:                               ; preds = %dec_label_pc_15548
  %v1_1556c = sub i32 -1, %v2_15550
  %v2_15574 = xor i32 %v2_15554, %v1_1556c
  %v2_1557c = and i32 %v2_15574, -2130640640
  %v2_15584 = icmp eq i32 %v2_1557c, 0
  br i1 %v2_15584, label %dec_label_pc_15548, label %dec_label_pc_1558c

dec_label_pc_1558c:                               ; preds = %dec_label_pc_15548, %dec_label_pc_15584
  %v2_1558c = inttoptr i32 %v0_155ac to i8*
  %v3_1558c = load i8, i8* %v2_1558c, align 1
  %v4_1558c = zext i8 %v3_1558c to i32
  %v9_15590 = icmp eq i32 %v4_1558c, %v1_15514
  br i1 %v9_15590, label %dec_label_pc_155ec, label %dec_label_pc_1559c

dec_label_pc_1559c:                               ; preds = %dec_label_pc_1558c
  %v2_1559c = icmp eq i8 %v3_1558c, 0
  br i1 %v2_1559c, label %dec_label_pc_155ec, label %dec_label_pc_155a4

dec_label_pc_155a4:                               ; preds = %dec_label_pc_1559c
  %v1_155a4 = add i32 %v0_155ac, 1
  %v2_155a4 = inttoptr i32 %v1_155a4 to i8*
  %v3_155a4 = load i8, i8* %v2_155a4, align 1
  %v4_155a4 = zext i8 %v3_155a4 to i32
  %v9_155a8 = icmp eq i32 %v4_155a4, %v1_15514
  br i1 %v9_155a8, label %dec_label_pc_155ec, label %dec_label_pc_155b4

dec_label_pc_155b4:                               ; preds = %dec_label_pc_155a4
  %v2_155b4 = icmp eq i8 %v3_155a4, 0
  br i1 %v2_155b4, label %dec_label_pc_155ec, label %dec_label_pc_155bc

dec_label_pc_155bc:                               ; preds = %dec_label_pc_155b4
  %v1_155bc = add i32 %v0_155ac, 2
  %v2_155bc = inttoptr i32 %v1_155bc to i8*
  %v3_155bc = load i8, i8* %v2_155bc, align 1
  %v4_155bc = zext i8 %v3_155bc to i32
  %v9_155c0 = icmp eq i32 %v4_155bc, %v1_15514
  br i1 %v9_155c0, label %dec_label_pc_155ec, label %dec_label_pc_155cc

dec_label_pc_155cc:                               ; preds = %dec_label_pc_155bc
  %v2_155cc = icmp eq i8 %v3_155bc, 0
  br i1 %v2_155cc, label %dec_label_pc_155ec, label %dec_label_pc_155d4

dec_label_pc_155d4:                               ; preds = %dec_label_pc_155cc
  %v1_155d4 = add i32 %v0_155ac, 3
  %v2_155d4 = inttoptr i32 %v1_155d4 to i8*
  %v3_155d4 = load i8, i8* %v2_155d4, align 1
  %v4_155d4 = zext i8 %v3_155d4 to i32
  %v9_155d8 = icmp eq i32 %v4_155d4, %v1_15514
  br i1 %v9_155d8, label %dec_label_pc_155ec, label %dec_label_pc_155e4

dec_label_pc_155e4:                               ; preds = %dec_label_pc_155d4
  %v2_155e4 = icmp eq i8 %v3_155d4, 0
  br i1 %v2_155e4, label %dec_label_pc_155ec, label %dec_label_pc_15548

dec_label_pc_155ec:                               ; preds = %dec_label_pc_15528, %dec_label_pc_1551c, %dec_label_pc_155e4, %dec_label_pc_155d4, %dec_label_pc_155cc, %dec_label_pc_155bc, %dec_label_pc_155b4, %dec_label_pc_155a4, %dec_label_pc_1559c, %dec_label_pc_1558c
  %v1_155f0 = phi i32 [ %v1_155d4, %dec_label_pc_155e4 ], [ %v1_155d4, %dec_label_pc_155d4 ], [ %v1_155bc, %dec_label_pc_155cc ], [ %v1_155bc, %dec_label_pc_155bc ], [ %v1_155a4, %dec_label_pc_155b4 ], [ %v1_155a4, %dec_label_pc_155a4 ], [ %v0_155ac, %dec_label_pc_1559c ], [ %v0_155ac, %dec_label_pc_1558c ], [ %v0_15530, %dec_label_pc_1551c ], [ %v0_15530, %dec_label_pc_15528 ]
  ret i32 %v1_155f0

; uselistorder directives
  uselistorder i32 %v4_15548, { 1, 0 }
  uselistorder i32 %v2_15548, { 0, 2, 1 }
  uselistorder i32 %v0_155ac, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_1553c, { 1, 0 }
  uselistorder i32 %v1_15530, { 1, 0, 2 }
  uselistorder i32 %v0_155342, { 2, 1, 0 }
  uselistorder i32 %v1_15514, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_155ec, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_1558c, { 1, 0 }
  uselistorder label %dec_label_pc_1551c, { 1, 0 }
}

define i32 @function_155fc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_155fc:
  %v1_15600 = urem i32 %arg1, 256
  %v0_156203 = load i32, i32* @r0, align 4
  %v1_156204 = urem i32 %v0_156203, 4
  %v2_156205 = icmp eq i32 %v1_156204, 0
  br i1 %v2_156205, label %dec_label_pc_15628, label %dec_label_pc_15608

dec_label_pc_15608:                               ; preds = %dec_label_pc_155fc, %dec_label_pc_1561c
  %v0_1561c = phi i32 [ %v1_1561c, %dec_label_pc_1561c ], [ %v0_156203, %dec_label_pc_155fc ]
  %v1_15608 = inttoptr i32 %v0_1561c to i8*
  %v2_15608 = load i8, i8* %v1_15608, align 1
  %v3_15608 = zext i8 %v2_15608 to i32
  %v9_1560c = icmp eq i32 %v3_15608, %v1_15600
  br i1 %v9_1560c, label %dec_label_pc_156dc, label %dec_label_pc_15614

dec_label_pc_15614:                               ; preds = %dec_label_pc_15608
  %v2_15614 = icmp eq i8 %v2_15608, 0
  br i1 %v2_15614, label %dec_label_pc_156d8, label %dec_label_pc_1561c

dec_label_pc_1561c:                               ; preds = %dec_label_pc_15614
  %v1_1561c = add i32 %v0_1561c, 1
  %v1_15620 = urem i32 %v1_1561c, 4
  %v2_15620 = icmp eq i32 %v1_15620, 0
  br i1 %v2_15620, label %dec_label_pc_15628, label %dec_label_pc_15608

dec_label_pc_15628:                               ; preds = %dec_label_pc_1561c, %dec_label_pc_155fc
  %v0_1562c = phi i32 [ %v0_156203, %dec_label_pc_155fc ], [ %v1_1561c, %dec_label_pc_1561c ]
  %v4_15628 = mul nuw nsw i32 %v1_15600, 256
  %v5_15628 = or i32 %v4_15628, %v1_15600
  %v4_15630 = mul i32 %v5_15628, 65536
  %v5_15630 = or i32 %v4_15630, %v5_15628
  br label %dec_label_pc_15634

dec_label_pc_15634:                               ; preds = %dec_label_pc_156d0, %dec_label_pc_15670, %dec_label_pc_15628
  %v0_15698 = phi i32 [ %v0_1562c, %dec_label_pc_15628 ], [ %v4_15634, %dec_label_pc_15670 ], [ %v4_15634, %dec_label_pc_156d0 ]
  %v1_15634 = inttoptr i32 %v0_15698 to i32*
  %v2_15634 = load i32, i32* %v1_15634, align 4
  %v4_15634 = add i32 %v0_15698, 4
  %v2_1563c = xor i32 %v2_15634, %v5_15630
  %v2_15640 = add i32 %v2_1563c, 2130640639
  store i32 %v2_15640, i32* @ip, align 4
  %v2_15648 = add i32 %v2_15634, 2130640639
  %v1_1564c = sub i32 -1, %v2_15634
  %v2_15650 = xor i32 %v2_15648, %v1_1564c
  %v2_1565c = and i32 %v2_15650, -2130640640
  %v2_15664 = icmp eq i32 %v2_1565c, 0
  br i1 %v2_15664, label %dec_label_pc_15670, label %dec_label_pc_15678

dec_label_pc_15670:                               ; preds = %dec_label_pc_15634
  %v1_15658 = sub i32 -1, %v2_1563c
  %v2_15660 = xor i32 %v2_15640, %v1_15658
  %v2_15668 = and i32 %v2_15660, -2130640640
  %v2_15670 = icmp eq i32 %v2_15668, 0
  br i1 %v2_15670, label %dec_label_pc_15634, label %dec_label_pc_15678

dec_label_pc_15678:                               ; preds = %dec_label_pc_15634, %dec_label_pc_15670
  %v2_15678 = inttoptr i32 %v0_15698 to i8*
  %v3_15678 = load i8, i8* %v2_15678, align 1
  %v4_15678 = zext i8 %v3_15678 to i32
  %v9_1567c = icmp eq i32 %v4_15678, %v1_15600
  br i1 %v9_1567c, label %dec_label_pc_156dc, label %dec_label_pc_15688

dec_label_pc_15688:                               ; preds = %dec_label_pc_15678
  %v2_15688 = icmp eq i8 %v3_15678, 0
  br i1 %v2_15688, label %dec_label_pc_156d8, label %dec_label_pc_15690

dec_label_pc_15690:                               ; preds = %dec_label_pc_15688
  %v1_15690 = add i32 %v0_15698, 1
  %v2_15690 = inttoptr i32 %v1_15690 to i8*
  %v3_15690 = load i8, i8* %v2_15690, align 1
  %v4_15690 = zext i8 %v3_15690 to i32
  %v9_15694 = icmp eq i32 %v4_15690, %v1_15600
  br i1 %v9_15694, label %dec_label_pc_156dc, label %dec_label_pc_156a0

dec_label_pc_156a0:                               ; preds = %dec_label_pc_15690
  %v2_156a0 = icmp eq i8 %v3_15690, 0
  br i1 %v2_156a0, label %dec_label_pc_156d8, label %dec_label_pc_156a8

dec_label_pc_156a8:                               ; preds = %dec_label_pc_156a0
  %v1_156a8 = add i32 %v0_15698, 2
  %v2_156a8 = inttoptr i32 %v1_156a8 to i8*
  %v3_156a8 = load i8, i8* %v2_156a8, align 1
  %v4_156a8 = zext i8 %v3_156a8 to i32
  %v9_156ac = icmp eq i32 %v4_156a8, %v1_15600
  br i1 %v9_156ac, label %dec_label_pc_156dc, label %dec_label_pc_156b8

dec_label_pc_156b8:                               ; preds = %dec_label_pc_156a8
  %v2_156b8 = icmp eq i8 %v3_156a8, 0
  br i1 %v2_156b8, label %dec_label_pc_156d8, label %dec_label_pc_156c0

dec_label_pc_156c0:                               ; preds = %dec_label_pc_156b8
  %v1_156c0 = add i32 %v0_15698, 3
  %v2_156c0 = inttoptr i32 %v1_156c0 to i8*
  %v3_156c0 = load i8, i8* %v2_156c0, align 1
  %v4_156c0 = zext i8 %v3_156c0 to i32
  %v9_156c4 = icmp eq i32 %v4_156c0, %v1_15600
  br i1 %v9_156c4, label %dec_label_pc_156dc, label %dec_label_pc_156d0

dec_label_pc_156d0:                               ; preds = %dec_label_pc_156c0
  %v2_156d0 = icmp eq i8 %v3_156c0, 0
  br i1 %v2_156d0, label %dec_label_pc_156d8, label %dec_label_pc_15634

dec_label_pc_156d8:                               ; preds = %dec_label_pc_15614, %dec_label_pc_156d0, %dec_label_pc_156b8, %dec_label_pc_156a0, %dec_label_pc_15688
  br label %dec_label_pc_156dc

dec_label_pc_156dc:                               ; preds = %dec_label_pc_15608, %dec_label_pc_156c0, %dec_label_pc_156a8, %dec_label_pc_15690, %dec_label_pc_15678, %dec_label_pc_156d8
  %v1_156e0 = phi i32 [ 0, %dec_label_pc_156d8 ], [ %v1_156c0, %dec_label_pc_156c0 ], [ %v1_156a8, %dec_label_pc_156a8 ], [ %v1_15690, %dec_label_pc_15690 ], [ %v0_15698, %dec_label_pc_15678 ], [ %v0_1561c, %dec_label_pc_15608 ]
  ret i32 %v1_156e0

; uselistorder directives
  uselistorder i32 %v4_15634, { 1, 0 }
  uselistorder i32 %v2_15634, { 0, 2, 1 }
  uselistorder i32 %v0_15698, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_15628, { 1, 0 }
  uselistorder i32 %v1_1561c, { 1, 0, 2 }
  uselistorder i32 %v0_156203, { 2, 1, 0 }
  uselistorder i32 %v1_15600, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 64, 65, 113, 66, 67, 68, 69, 70, 71, 73, 74, 114, 7, 109, 29, 110, 28, 111, 42, 112, 72, 43, 80, 30, 75, 76, 2, 77, 78, 79, 44, 8, 81, 31, 82, 45, 83, 46, 84, 47, 32, 48, 49, 50, 51, 0, 85, 86, 87, 10, 9, 52, 88, 33, 89, 12, 11, 53, 90, 34, 91, 55, 92, 14, 13, 54, 93, 35, 94, 57, 95, 16, 15, 56, 96, 36, 97, 58, 18, 17, 59, 99, 37, 100, 20, 19, 60, 38, 101, 22, 21, 61, 102, 39, 103, 24, 23, 62, 104, 40, 105, 26, 25, 63, 106, 41, 107, 27, 108, 6, 98 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 142, 146, 141, 147, 26, 27, 28, 29, 30, 31, 32, 33, 140, 34, 35, 36, 2, 37, 0, 3, 38, 39, 41, 40, 1, 44, 42, 43, 45, 143, 47, 46, 50, 51, 52, 48, 49, 53, 54, 56, 57, 58, 55, 59, 144, 60, 62, 61, 64, 63, 65, 145, 66, 68, 67, 70, 69, 75, 71, 76, 72, 77, 73, 74, 78, 79, 80, 81, 83, 84, 82, 139, 86, 85, 89, 90, 91, 87, 88, 92, 99, 93, 100, 94, 101, 95, 102, 96, 103, 97, 98, 105, 104, 106, 107, 108, 109, 114, 110, 115, 111, 116, 112, 113, 118, 117, 119, 120, 121, 124, 122, 125, 123, 126, 127, 128, 129, 130, 132, 133, 131, 134, 136, 137, 135, 138 }
  uselistorder label %dec_label_pc_156dc, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_156d8, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_15678, { 1, 0 }
  uselistorder label %dec_label_pc_15608, { 1, 0 }
}

define i32 @function_156ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_156ec:
  %stack_var_-68 = alloca i32, align 4
  %v2_156f4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_156f4, i32* @r1, align 4
  %v0_156f8 = call i32 @function_15710()
  %v1_156fc = sub i32 1, %v0_156f8
  %v2_156fc = icmp ult i32 %v0_156f8, 2
  br i1 %v2_156fc, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_156ec
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_156ec, %bb
  %v1_1570c = phi i32 [ %v1_156fc, %dec_label_pc_156ec ], [ 0, %bb ]
  ret i32 %v1_1570c

; uselistorder directives
  uselistorder i32 %v0_156f8, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_15710() local_unnamed_addr {
dec_label_pc_15710:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_15710 = load i32, i32* @r4, align 4
  %v6_15710 = load i32, i32* @r5, align 4
  %v2_15718 = ptrtoint i32* %stack_var_-52 to i32
  %v0_1571c = load i32, i32* @r1, align 4
  store i32 %v0_1571c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_15728 = load i32, i32* @r0, align 4
  %v3_15728 = call i32 @function_10934(i32 %v0_15728, i32 21505, i32 %v2_15718)
  store i32 %v3_15728, i32* %r0.global-to-local, align 4
  store i32 %v3_15728, i32* @r5, align 4
  %v2_1572c = icmp eq i32 %v3_15728, 0
  br i1 %v2_1572c, label %dec_label_pc_15734, label %dec_label_pc_15778

dec_label_pc_15734:                               ; preds = %dec_label_pc_15710
  %v4_15740 = zext i8 %tmp to i32
  store i32 %v4_15740, i32* @ip, align 4
  %v3_15744 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_15744, i32* @r3, align 4
  %v1_15748 = load i32, i32* @r4, align 4
  %v2_15748 = add i32 %v1_15748, 4
  %v3_15748 = inttoptr i32 %v2_15748 to i32*
  %v0_1574c = load i32, i32* %r1.global-to-local, align 4
  %v1_1574c = load i32, i32* @r4, align 4
  %v2_1574c = add i32 %v1_1574c, 8
  %v3_1574c = inttoptr i32 %v2_1574c to i32*
  store i32 %v0_1574c, i32* %v3_1574c, align 4
  %v0_15750 = load i32, i32* %r0.global-to-local, align 4
  %v1_15750 = load i32, i32* @r4, align 4
  %v2_15750 = add i32 %v1_15750, 12
  %v3_15750 = inttoptr i32 %v2_15750 to i32*
  store i32 %v0_15750, i32* %v3_15750, align 4
  %v2_15754 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_15754, i32* @r1, align 4
  %v1_1575c = load i32, i32* @r4, align 4
  %v2_1575c = inttoptr i32 %v1_1575c to i32*
  store i32 %v3_15744, i32* %v2_1575c, align 4
  %v0_15760 = load i32, i32* @ip, align 4
  %v1_15760 = trunc i32 %v0_15760 to i8
  %v2_15760 = load i32, i32* @r4, align 4
  %v3_15760 = add i32 %v2_15760, 16
  %v4_15760 = inttoptr i32 %v3_15760 to i8*
  store i8 %v1_15760, i8* %v4_15760, align 1
  %v0_15764 = load i32, i32* @r4, align 4
  %v1_15764 = add i32 %v0_15764, 17
  store i32 %v1_15764, i32* %r0.global-to-local, align 4
  %v4_15768 = call i32 @function_15c54(i32 %v1_15764, i32 %v2_15754, i32 19, i32 %v3_15744)
  store i32 %v4_15768, i32* %r0.global-to-local, align 4
  %v0_1576c = load i32, i32* @r5, align 4
  store i32 %v0_1576c, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_15774 = inttoptr i32 %v4_15768 to i8*
  %v3_15774 = call i32 @function_10e40(i8* %v2_15774, i32 %v0_1576c)
  store i32 %v3_15774, i32* %r0.global-to-local, align 4
  %v0_15778.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15778

dec_label_pc_15778:                               ; preds = %dec_label_pc_15710, %dec_label_pc_15734
  %v0_15778 = phi i32 [ %v3_15728, %dec_label_pc_15710 ], [ %v0_15778.pre, %dec_label_pc_15734 ]
  store i32 %v0_15778, i32* %r0.global-to-local, align 4
  store i32 %v3_15710, i32* @r4, align 4
  store i32 %v6_15710, i32* @r5, align 4
  ret i32 %v0_15778

; uselistorder directives
  uselistorder i32 %v0_15778, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 5, 2, 3, 4 }
  uselistorder i32 (i8*, i32)* @function_10e40, { 2, 3, 4, 8, 0, 1, 11, 10, 9, 5, 6, 7 }
  uselistorder i32 13, { 25, 24, 0, 1, 27, 28, 26, 29, 30, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 4, 3, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 35, 36, 37, 22, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 23, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 5, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 6, 68, 69 }
  uselistorder i32 17, { 14, 1, 4, 15, 16, 5, 17, 6, 7, 8, 9, 2, 18, 3, 19, 20, 10, 21, 11, 22, 23, 24, 0, 25, 12, 26, 13 }
  uselistorder i32 (i32, i32, i32)* @function_10934, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15778, { 1, 0 }
}

define i32 @function_1578c() local_unnamed_addr {
dec_label_pc_1578c:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1578c = load i32, i32* @r4, align 4
  store i32 %v3_1578c, i32* %stack_var_-28, align 4
  %v0_15794 = load i32, i32* @r0, align 4
  %v2_15794 = icmp eq i32 %v0_15794, 0
  %v0_1579c = load i32, i32* @r1, align 4
  br i1 %v2_15794, label %dec_label_pc_15870, label %dec_label_pc_157a4

dec_label_pc_157a4:                               ; preds = %dec_label_pc_1578c
  br label %dec_label_pc_157bc

dec_label_pc_157bc:                               ; preds = %dec_label_pc_157a4, %dec_label_pc_15834
  %v1_15834 = phi i32 [ 0, %dec_label_pc_157a4 ], [ %v5_15834, %dec_label_pc_15834 ]
  %v0_15838 = phi i32 [ 1, %dec_label_pc_157a4 ], [ %v1_15838, %dec_label_pc_15834 ]
  %v0_157bc = phi i32 [ %v0_15794, %dec_label_pc_157a4 ], [ %v0_157bc12, %dec_label_pc_15834 ]
  %v1_157bc = inttoptr i32 %v0_157bc to i8*
  %v2_157bc = load i8, i8* %v1_157bc, align 1
  %v3_157bc = zext i8 %v2_157bc to i32
  %v4_157c0 = load i32, i32* inttoptr (i32 123832 to i32*), align 8
  %v2_157c4 = mul nuw nsw i32 %v3_157bc, 2
  %v2_157c8 = add i32 %v2_157c4, %v4_157c0
  %v3_157c8 = inttoptr i32 %v2_157c8 to i16*
  %v4_157c8 = load i16, i16* %v3_157c8, align 2
  %v1_157cc = and i16 %v4_157c8, 8
  %v2_157cc = icmp eq i16 %v1_157cc, 0
  br i1 %v2_157cc, label %dec_label_pc_15870, label %dec_label_pc_157d4

dec_label_pc_157d4:                               ; preds = %dec_label_pc_157bc
  br label %dec_label_pc_157f4

dec_label_pc_157dc:                               ; preds = %dec_label_pc_157f4
  %v2_157dc = mul i32 %v0_15834, 10
  %v1_157e0 = add i32 %v2_157dc, -48
  %v2_157e4 = add i32 %v3_157f4, %v1_157e0
  %v8_157ec = icmp sgt i32 %v2_157e4, 255
  br i1 %v8_157ec, label %dec_label_pc_15870, label %dec_label_pc_157f0

dec_label_pc_157f0:                               ; preds = %dec_label_pc_157dc
  %v1_157f0 = add i32 %v0_15824, 1
  store i32 %v1_157f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_157f4

dec_label_pc_157f4:                               ; preds = %dec_label_pc_157d4, %dec_label_pc_157f0
  %v0_15834 = phi i32 [ 0, %dec_label_pc_157d4 ], [ %v2_157e4, %dec_label_pc_157f0 ]
  %v0_15824 = phi i32 [ %v0_157bc, %dec_label_pc_157d4 ], [ %v1_157f0, %dec_label_pc_157f0 ]
  %v1_157f4 = inttoptr i32 %v0_15824 to i8*
  %v2_157f4 = load i8, i8* %v1_157f4, align 1
  %v3_157f4 = zext i8 %v2_157f4 to i32
  %v2_157f8 = mul nuw nsw i32 %v3_157f4, 2
  %v2_157fc = add i32 %v2_157f8, %v4_157c0
  %v3_157fc = inttoptr i32 %v2_157fc to i16*
  %v4_157fc = load i16, i16* %v3_157fc, align 2
  %v6_157fc = zext i16 %v4_157fc to i32
  %v1_15800 = and i32 %v6_157fc, 8
  %v2_15800 = icmp eq i32 %v1_15800, 0
  br i1 %v2_15800, label %dec_label_pc_15808, label %dec_label_pc_157dc

dec_label_pc_15808:                               ; preds = %dec_label_pc_157f4
  %v7_15808 = icmp eq i32 %v0_15838, 4
  br i1 %v7_15808, label %dec_label_pc_15820, label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %dec_label_pc_15808
  %v7_15810 = icmp eq i8 %v2_157f4, 46
  br i1 %v7_15810, label %dec_label_pc_15818, label %dec_label_pc_15870

dec_label_pc_15818:                               ; preds = %dec_label_pc_15810
  %v1_15818 = add i32 %v0_15824, 1
  store i32 %v1_15818, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15834

dec_label_pc_15820:                               ; preds = %dec_label_pc_15808
  %v2_15820 = icmp eq i8 %v2_157f4, 0
  %v1_15824 = add i32 %v0_15824, 1
  store i32 %v1_15824, i32* %r0.global-to-local, align 4
  br i1 %v2_15820, label %dec_label_pc_15834, label %dec_label_pc_1582c

dec_label_pc_1582c:                               ; preds = %dec_label_pc_15820
  %v1_1582c = and i32 %v6_157fc, 32
  %v2_1582c = icmp eq i32 %v1_1582c, 0
  br i1 %v2_1582c, label %dec_label_pc_15870, label %dec_label_pc_15834

dec_label_pc_15834:                               ; preds = %dec_label_pc_1582c, %dec_label_pc_15820, %dec_label_pc_15818
  %v0_157bc12 = phi i32 [ %v1_15824, %dec_label_pc_1582c ], [ %v1_15824, %dec_label_pc_15820 ], [ %v1_15818, %dec_label_pc_15818 ]
  %v4_15834 = mul i32 %v1_15834, 256
  %v5_15834 = or i32 %v0_15834, %v4_15834
  %v1_15838 = add nuw nsw i32 %v0_15838, 1
  %v7_15840 = icmp slt i32 %v1_15838, 5
  br i1 %v7_15840, label %dec_label_pc_157bc, label %dec_label_pc_15844

dec_label_pc_15844:                               ; preds = %dec_label_pc_15834
  %v2_15844 = icmp eq i32 %v0_1579c, 0
  br i1 %v2_15844, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_15844
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15874

bb:                                               ; preds = %dec_label_pc_15844
  %v4_15848 = udiv i32 %v5_15834, 16777216
  %v2_1584c = udiv i32 %v5_15834, 256
  %v5_15850 = and i32 %v2_1584c, 65280
  %v2_15854 = and i32 %v5_15834, ptrtoint (i32* @global_var_ff00.21 to i32)
  %v5_15858 = mul i32 %v2_15854, 256
  %v5_1585c = mul i32 %v0_15834, 16777216
  %v6_15850 = or i32 %v4_15848, %v5_1585c
  %v6_15858 = or i32 %v6_15850, %v5_15850
  %v6_1585c = or i32 %v6_15858, %v5_15858
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15868 = inttoptr i32 %v0_1579c to i32*
  store i32 %v6_1585c, i32* %v3_15868, align 4
  %v2_15874.pre = load i32, i32* %stack_var_-28, align 4
  %v1_15878.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15874

dec_label_pc_15870:                               ; preds = %dec_label_pc_15810, %dec_label_pc_1582c, %dec_label_pc_157bc, %dec_label_pc_157dc, %dec_label_pc_1578c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15874

dec_label_pc_15874:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_15870
  %v1_15878 = phi i32 [ %v1_15878.pre, %bb ], [ 0, %dec_label_pc_15870 ], [ 1, %.thread7.thread ]
  %v2_15874 = phi i32 [ %v2_15874.pre, %bb ], [ %v3_1578c, %dec_label_pc_15870 ], [ %v3_1578c, %.thread7.thread ]
  store i32 %v2_15874, i32* @r4, align 4
  ret i32 %v1_15878

; uselistorder directives
  uselistorder i32 %v1_15838, { 1, 0 }
  uselistorder i32 %v5_15834, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15824, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.21 to i32), { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 65280, { 1, 9, 0, 2, 10, 3, 47, 11, 12, 4, 13, 48, 44, 14, 15, 16, 17, 18, 45, 5, 49, 46, 6, 50, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 51, 29, 30, 31, 32, 33, 34, 52, 35, 36, 37, 38, 53, 39, 40, 41, 42, 43, 7, 8 }
  uselistorder i32 16777216, { 0, 1, 99, 98, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 29, 28, 30, 31, 32, 33, 35, 34, 37, 36, 39, 38, 40, 41, 42, 43, 44, 48, 45, 49, 46, 47, 50, 51, 53, 52, 54, 55, 56, 58, 57, 59, 60, 62, 61, 63, 64, 65, 67, 66, 72, 68, 73, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100 }
  uselistorder i32 5, { 14, 0, 47, 4, 27, 28, 15, 23, 16, 24, 17, 25, 18, 26, 2, 1, 29, 30, 19, 20, 21, 5, 31, 6, 32, 33, 7, 34, 35, 8, 36, 40, 9, 41, 10, 42, 11, 43, 12, 44, 13, 45, 3, 46, 37, 22, 38, 39 }
  uselistorder i32 32, { 93, 45, 43, 82, 83, 84, 85, 90, 91, 78, 79, 80, 81, 100, 2, 88, 89, 46, 47, 51, 48, 52, 49, 53, 50, 54, 55, 96, 97, 56, 98, 64, 65, 63, 66, 67, 68, 69, 70, 71, 58, 59, 3, 60, 4, 61, 6, 5, 57, 62, 72, 99, 8, 7, 10, 9, 12, 11, 44, 73, 92, 14, 13, 16, 15, 18, 17, 20, 19, 77, 22, 21, 23, 25, 24, 26, 27, 29, 28, 86, 87, 30, 31, 74, 32, 33, 34, 75, 35, 0, 36, 1, 37, 94, 38, 95, 39, 40, 41, 42, 76 }
  uselistorder i8 0, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 26, 25, 18, 27, 3, 16, 4, 28, 30, 29, 19, 31, 32, 20, 33, 34, 0, 17, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 1, 49, 50, 51, 22, 52, 55, 23, 53, 54, 21, 56, 57, 58, 59, 60, 2, 61, 24, 62, 63, 64, 65, 66, 67, 68 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 6, 4, 15, 7, 0, 1, 2, 10, 12, 11, 8, 13, 9, 14, 3, 5 }
  uselistorder i32 10, { 4, 25, 26, 27, 7, 41, 43, 42, 0, 38, 39, 72, 44, 1, 33, 9, 28, 30, 10, 29, 11, 31, 12, 32, 22, 5, 34, 23, 13, 3, 24, 35, 14, 36, 37, 15, 16, 17, 40, 8, 45, 46, 47, 48, 49, 50, 51, 18, 52, 53, 54, 19, 55, 56, 57, 2, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 6, 71, 20, 73, 21 }
  uselistorder i16 0, { 0, 1, 2, 3, 12, 13, 4, 5, 14, 15, 16, 17, 18, 19, 20, 21, 6, 22, 7, 23, 24, 25, 8, 9, 10, 11, 26, 27 }
  uselistorder i32 2, { 5, 6, 150, 64, 65, 61, 288, 289, 76, 290, 291, 66, 292, 293, 156, 151, 157, 152, 7, 95, 294, 8, 158, 9, 67, 10, 11, 295, 71, 278, 12, 13, 279, 14, 15, 60, 275, 16, 17, 18, 276, 280, 19, 20, 21, 22, 77, 281, 282, 23, 24, 0, 153, 283, 25, 284, 96, 26, 149, 27, 28, 29, 30, 31, 97, 99, 98, 68, 69, 100, 177, 178, 105, 179, 106, 172, 107, 173, 108, 174, 109, 175, 101, 176, 102, 180, 103, 159, 164, 104, 160, 85, 161, 86, 162, 87, 163, 165, 166, 167, 168, 169, 88, 170, 89, 171, 78, 32, 33, 181, 184, 185, 110, 72, 154, 186, 111, 187, 113, 182, 112, 183, 91, 188, 74, 73, 114, 90, 189, 115, 190, 34, 35, 116, 191, 192, 117, 92, 118, 119, 70, 75, 193, 194, 195, 196, 197, 198, 199, 200, 201, 1, 36, 37, 38, 39, 40, 41, 120, 202, 93, 203, 204, 205, 206, 207, 208, 2, 42, 43, 44, 45, 46, 47, 122, 209, 121, 210, 211, 212, 213, 214, 215, 124, 216, 125, 217, 126, 218, 48, 3, 49, 50, 51, 52, 53, 127, 219, 123, 220, 221, 222, 223, 224, 225, 129, 226, 130, 227, 131, 228, 54, 4, 55, 56, 57, 58, 59, 132, 229, 128, 230, 232, 233, 234, 235, 236, 237, 134, 238, 133, 239, 240, 241, 242, 243, 244, 135, 94, 245, 246, 62, 247, 248, 249, 250, 251, 252, 137, 136, 253, 254, 63, 255, 256, 139, 257, 140, 258, 259, 260, 261, 262, 141, 263, 138, 264, 265, 266, 267, 268, 269, 143, 270, 142, 271, 272, 274, 79, 80, 273, 144, 145, 285, 287, 81, 82, 286, 146, 147, 83, 277, 148, 84, 231, 155 }
  uselistorder label %dec_label_pc_15874, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15870, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_157f4, { 1, 0 }
  uselistorder label %dec_label_pc_157bc, { 1, 0 }
}

define i32 @function_15884(i32 %arg1) local_unnamed_addr {
dec_label_pc_15884:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 123612, i32* %r2.global-to-local, align 4
  %v4_15890 = load i32, i32* inttoptr (i32 123712 to i32*), align 64
  %v4_15898 = load i32, i32* inttoptr (i32 123676 to i32*), align 4
  store i32 %v4_15898, i32* %r1.global-to-local, align 4
  %v1_1589c = add i32 %arg1, 44
  %v2_1589c = inttoptr i32 %v1_1589c to i32*
  %v3_1589c = load i32, i32* %v2_1589c, align 4
  %v1_158a0 = add i32 %arg1, 28
  %v2_158a0 = inttoptr i32 %v1_158a0 to i32*
  %v3_158a0 = load i32, i32* %v2_158a0, align 4
  store i32 %v3_158a0, i32* %r2.global-to-local, align 4
  %v2_158a4 = inttoptr i32 %v4_15890 to i32*
  store i32 %v3_1589c, i32* %v2_158a4, align 4
  %v0_158a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_158a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_158a8 = inttoptr i32 %v1_158a8 to i32*
  store i32 %v0_158a8, i32* %v2_158a8, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 39, 0, 1, 3, 4, 5, 2, 6, 7, 8, 12, 9, 13, 11, 23, 24, 25, 26, 27, 28, 20, 21, 22, 18, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 10, 14, 15, 16, 17 }
  uselistorder i32 123612, { 45, 0, 46, 47, 1, 2, 48, 3, 4, 5, 49, 50, 6, 51, 7, 52, 53, 54, 8, 11, 12, 10, 9, 13, 14, 40, 36, 34, 33, 35, 37, 38, 39, 32, 41, 27, 29, 28, 26, 25, 30, 31, 22, 21, 24, 23, 20, 19, 18, 17, 42, 43, 44, 55, 56, 57, 15, 16 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_158b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_158b4:
  %v0_158b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_158b4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_158b4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_158b4, %bb
  %v4_158b8 = phi i32 [ %arg1, %dec_label_pc_158b4 ], [ 0, %bb ]
  ret i32 %v4_158b8

; uselistorder directives
  uselistorder i1* @cpsr_z, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 11, 12, 13, 26, 27, 28, 29, 14, 15, 16, 17, 18, 19, 20, 24, 25, 21, 22, 23, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_158bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_158f8:
  store i32 %arg1, i32* @global_var_2059c.479, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_2059c.479, { 1, 0, 2 }
}

define i32 @function_15908(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15908:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15908 = load i32, i32* @r7, align 4
  store i32 %v3_15908, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15930, label %dec_label_pc_15920

dec_label_pc_15920:                               ; preds = %dec_label_pc_15908
  %v0_15920 = call i32 @function_10de8()
  %v0_15924 = load i32, i32* %r7.global-to-local, align 4
  %v1_15924 = sub i32 0, %v0_15924
  %v2_15928 = inttoptr i32 %v0_15920 to i32*
  store i32 %v1_15924, i32* %v2_15928, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_15934.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15930

dec_label_pc_15930:                               ; preds = %dec_label_pc_15908, %dec_label_pc_15920
  %v2_15934 = phi i32 [ %v3_15908, %dec_label_pc_15908 ], [ %v2_15934.pre, %dec_label_pc_15920 ]
  %v0_15930 = phi i32 [ %arg1, %dec_label_pc_15908 ], [ -1, %dec_label_pc_15920 ]
  store i32 %v2_15934, i32* %r7.global-to-local, align 4
  ret i32 %v0_15930

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15930, { 1, 0 }
}

define i32 @function_1593c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1593c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15940 = load i32, i32* @r4, align 4
  %v6_15940 = load i32, i32* @r5, align 4
  %v12_15940 = load i32, i32* @r7, align 4
  %v1_15944 = add i32 %arg3, 14
  %v2_1594c = ptrtoint i32* %stack_var_-72 to i32
  %v1_15950 = and i32 %v1_15944, -8
  %v2_15954 = sub i32 %v2_1594c, %v1_15950
  %v1_15958 = add i32 %v2_15954, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_15958, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_15994, label %dec_label_pc_15980

dec_label_pc_15980:                               ; preds = %dec_label_pc_1593c
  %v0_15980 = call i32 @function_10de8()
  %v0_15984 = load i32, i32* %r4.global-to-local, align 4
  %v1_15984 = sub i32 0, %v0_15984
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1598c = inttoptr i32 %v0_15980 to i32*
  store i32 %v1_15984, i32* %v2_1598c, align 4
  %v0_1599c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1599c

dec_label_pc_15994:                               ; preds = %dec_label_pc_1593c
  br i1 false, label %dec_label_pc_1599c, label %dec_label_pc_159a4

dec_label_pc_1599c:                               ; preds = %dec_label_pc_15994, %dec_label_pc_15980
  %v0_1599c = phi i32 [ -1, %dec_label_pc_15994 ], [ %v0_1599c.pre, %dec_label_pc_15980 ]
  store i32 %v0_1599c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a70

dec_label_pc_159a4:                               ; preds = %dec_label_pc_15994
  %v2_159a4 = add i32 %v1_15958, %arg1
  %v2_159a8 = add i32 %tmp, %arg3
  store i32 %v2_159a8, i32* @ip, align 4
  store i32 %v1_15958, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_15a58

dec_label_pc_159c4:                               ; preds = %dec_label_pc_15a58
  %v1_159c4 = add i32 %v0_15a18, 16
  %v2_159c4 = inttoptr i32 %v1_159c4 to i16*
  %v3_159c4 = load i16, i16* %v2_159c4, align 2
  %v4_159c4 = zext i16 %v3_159c4 to i32
  %v1_159c8 = add nuw nsw i32 %v4_159c4, 7
  %v1_159cc = and i32 %v1_159c8, 131064
  store i32 %v1_159cc, i32* %r2.global-to-local, align 4
  %v2_159d4 = add i32 %v1_159cc, %v0_15a20
  store i32 %v2_159d4, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_159d4, %v2_159a8
  br i1 %tmp26, label %dec_label_pc_159e0, label %dec_label_pc_15a14

dec_label_pc_159e0:                               ; preds = %dec_label_pc_159c4
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_159e8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_159e8, i32* %r2.global-to-local, align 4
  %v0_159ec = load i32, i32* %sl.global-to-local, align 4
  %v1_159f0 = load i32, i32* @sp, align 4
  %v2_159f0 = inttoptr i32 %v1_159f0 to i32*
  store i32 0, i32* %v2_159f0, align 4
  %v4_159f4 = call i32 @function_15c78(i32 %arg1, i32 0, i32 %v0_159e8, i32 %v0_159ec)
  %v0_159f8 = load i32, i32* @r5, align 4
  %v1_159f8 = load i32, i32* %r6.global-to-local, align 4
  %v9_159f8 = icmp eq i32 %v0_159f8, %v1_159f8
  br i1 %v9_159f8, label %dec_label_pc_15a00, label %dec_label_pc_15a6c

dec_label_pc_15a00:                               ; preds = %dec_label_pc_159e0
  %v0_15a00 = call i32 @function_10de8()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_15a0c = inttoptr i32 %v0_15a00 to i32*
  store i32 22, i32* %v2_15a0c, align 4
  %v0_15a70.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a70

dec_label_pc_15a14:                               ; preds = %dec_label_pc_159c4
  %v1_15a14 = inttoptr i32 %v0_15a18 to i32*
  %v2_15a14 = load i32, i32* %v1_15a14, align 4
  %v3_15a14 = add i32 %v0_15a18, 4
  %v4_15a14 = inttoptr i32 %v3_15a14 to i32*
  %v5_15a14 = load i32, i32* %v4_15a14, align 4
  store i32 %v5_15a14, i32* %r4.global-to-local, align 4
  %v1_15a18 = add i32 %v0_15a18, 8
  store i32 %v1_15a18, i32* %sb.global-to-local, align 4
  %v1_15a1c = inttoptr i32 %v1_15a18 to i32*
  %v2_15a1c = load i32, i32* %v1_15a1c, align 4
  store i32 %v2_15a1c, i32* %sb.global-to-local, align 4
  %v3_15a1c = add i32 %v0_15a18, 12
  %v4_15a1c = inttoptr i32 %v3_15a1c to i32*
  %v5_15a1c = load i32, i32* %v4_15a1c, align 4
  store i32 %v5_15a1c, i32* %sl.global-to-local, align 4
  %v1_15a20 = inttoptr i32 %v0_15a20 to i32*
  store i32 %v2_15a14, i32* %v1_15a20, align 4
  %v3_15a20 = add i32 %v0_15a20, 4
  %v4_15a20 = inttoptr i32 %v3_15a20 to i32*
  %v5_15a20 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15a20, i32* %v4_15a20, align 4
  %v0_15a24 = load i32, i32* @r7, align 4
  %v1_15a24 = add i32 %v0_15a24, 8
  %v1_15a28 = inttoptr i32 %v1_15a24 to i32*
  %v2_15a28 = load i32, i32* %v1_15a28, align 4
  %v3_15a28 = add i32 %v0_15a24, 12
  %v4_15a28 = inttoptr i32 %v3_15a28 to i32*
  %v5_15a28 = load i32, i32* %v4_15a28, align 4
  store i32 %v5_15a28, i32* @r4, align 4
  %v1_15a2c = load i32, i32* @r5, align 4
  %v2_15a2c = add i32 %v1_15a2c, 8
  %v3_15a2c = inttoptr i32 %v2_15a2c to i32*
  store i32 %v2_15a28, i32* %v3_15a2c, align 4
  %v0_15a30 = load i32, i32* @r4, align 4
  %v1_15a30 = load i32, i32* @r5, align 4
  %v2_15a30 = add i32 %v1_15a30, 12
  %v3_15a30 = inttoptr i32 %v2_15a30 to i32*
  store i32 %v0_15a30, i32* %v3_15a30, align 4
  %v0_15a34 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a34 = trunc i32 %v0_15a34 to i16
  %v2_15a34 = load i32, i32* @r5, align 4
  %v3_15a34 = add i32 %v2_15a34, 16
  %v4_15a34 = inttoptr i32 %v3_15a34 to i16*
  store i16 %v1_15a34, i16* %v4_15a34, align 2
  %v0_15a38 = load i32, i32* @r7, align 4
  %v1_15a38 = add i32 %v0_15a38, 18
  %v2_15a38 = inttoptr i32 %v1_15a38 to i8*
  %v3_15a38 = load i8, i8* %v2_15a38, align 1
  %v4_15a38 = zext i8 %v3_15a38 to i32
  store i32 %v4_15a38, i32* @r3, align 4
  %v2_15a3c = load i32, i32* @r5, align 4
  %v3_15a3c = add i32 %v2_15a3c, 18
  %v4_15a3c = inttoptr i32 %v3_15a3c to i8*
  store i8 %v3_15a38, i8* %v4_15a3c, align 1
  %v0_15a40 = load i32, i32* @r7, align 4
  %v1_15a40 = add i32 %v0_15a40, 16
  %v2_15a40 = inttoptr i32 %v1_15a40 to i16*
  %v3_15a40 = load i16, i16* %v2_15a40, align 2
  %v4_15a40 = zext i16 %v3_15a40 to i32
  %v1_15a44 = add nsw i32 %v4_15a40, -19
  store i32 %v1_15a44, i32* @r2, align 4
  %v0_15a48 = call i32 @function_10ef0()
  %v0_15a4c = load i32, i32* @r7, align 4
  %v1_15a4c = add i32 %v0_15a4c, 16
  %v2_15a4c = inttoptr i32 %v1_15a4c to i16*
  %v3_15a4c = load i16, i16* %v2_15a4c, align 2
  %v4_15a4c = zext i16 %v3_15a4c to i32
  %v0_15a50 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15a50, i32* @r5, align 4
  %v2_15a54 = add i32 %v4_15a4c, %v0_15a4c
  store i32 %v2_15a54, i32* @r7, align 4
  br label %dec_label_pc_15a58

dec_label_pc_15a58:                               ; preds = %dec_label_pc_159a4, %dec_label_pc_15a14
  %v0_15a20 = phi i32 [ %tmp, %dec_label_pc_159a4 ], [ %v0_15a50, %dec_label_pc_15a14 ]
  %v0_15a18 = phi i32 [ %v1_15958, %dec_label_pc_159a4 ], [ %v2_15a54, %dec_label_pc_15a14 ]
  %v3_15a5c = icmp ult i32 %v0_15a18, %v2_159a4
  %v1_15a60 = add i32 %v0_15a20, 19
  store i32 %v1_15a60, i32* @r0, align 4
  %v1_15a64 = add i32 %v0_15a18, 19
  store i32 %v1_15a64, i32* @r1, align 4
  br i1 %v3_15a5c, label %dec_label_pc_159c4, label %dec_label_pc_15a6c.loopexit

dec_label_pc_15a6c.loopexit:                      ; preds = %dec_label_pc_15a58
  %v0_15a6c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15a6c

dec_label_pc_15a6c:                               ; preds = %dec_label_pc_15a6c.loopexit, %dec_label_pc_159e0
  %v1_15a6c = phi i32 [ %v0_15a20, %dec_label_pc_15a6c.loopexit ], [ %v0_159f8, %dec_label_pc_159e0 ]
  %v0_15a6c = phi i32 [ %v0_15a6c.pre, %dec_label_pc_15a6c.loopexit ], [ %v1_159f8, %dec_label_pc_159e0 ]
  %v2_15a6c = sub i32 %v1_15a6c, %v0_15a6c
  store i32 %v2_15a6c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a70

dec_label_pc_15a70:                               ; preds = %dec_label_pc_15a00, %dec_label_pc_1599c, %dec_label_pc_15a6c
  %v0_15a70 = phi i32 [ %v0_15a70.pre, %dec_label_pc_15a00 ], [ %v0_1599c, %dec_label_pc_1599c ], [ %v2_15a6c, %dec_label_pc_15a6c ]
  store i32 %v3_15940, i32* %r4.global-to-local, align 4
  store i32 %v6_15940, i32* @r5, align 4
  store i32 %v12_15940, i32* @r7, align 4
  ret i32 %v0_15a70

; uselistorder directives
  uselistorder i32 %v0_15a18, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_15a20, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_15958, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 9, 10, 0, 3, 11, 4, 12, 13, 5, 6, 7, 8, 1, 14, 2, 15 }
  uselistorder i32* @r3, { 7, 8, 51, 52, 83, 84, 2, 85, 86, 87, 3, 88, 89, 90, 4, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 0, 109, 110, 111, 112, 9, 6, 10, 11, 12, 13, 14, 53, 54, 113, 122, 123, 124, 117, 46, 47, 76, 77, 78, 79, 80, 81, 15, 16, 17, 128, 125, 126, 127, 1, 129, 130, 131, 118, 18, 75, 38, 39, 40, 119, 120, 121, 65, 55, 114, 115, 116, 48, 49, 50, 56, 57, 5, 71, 72, 73, 74, 32, 33, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 41, 42, 44, 43, 82, 45, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70 }
  uselistorder i32 18, { 9, 10, 8, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 22, { 1, 0, 11, 2, 3, 4, 5, 6, 7, 12, 13, 8, 14, 9, 15, 10, 16 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 7, { 24, 22, 23, 14, 0, 1, 41, 15, 29, 16, 25, 17, 26, 18, 27, 19, 28, 2, 20, 30, 4, 31, 5, 32, 6, 33, 7, 34, 21, 35, 8, 36, 9, 37, 10, 38, 11, 39, 12, 13, 3, 40 }
  uselistorder i32* @ip, { 7, 8, 9, 66, 10, 11, 6, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 2, 100, 101, 102, 103, 104, 105, 106, 107, 108, 12, 0, 13, 14, 15, 16, 17, 109, 110, 31, 56, 57, 58, 59, 3, 60, 61, 62, 50, 51, 52, 53, 54, 55, 63, 64, 65, 114, 111, 112, 113, 1, 115, 24, 18, 19, 47, 48, 49, 41, 42, 43, 44, 45, 46, 35, 36, 37, 38, 39, 40, 4, 21, 20, 22, 23, 25, 26, 27, 28, 29, 30, 32, 5, 33, 34 }
  uselistorder i1 false, { 0, 25, 26, 27, 38, 21, 24, 39, 40, 41, 42, 43, 2, 1, 28, 31, 30, 29, 32, 4, 6, 5, 18, 37, 22, 23, 10, 35, 17, 19, 20, 9, 8, 7, 11, 12, 13, 33, 3, 14, 15, 16, 36, 34, 44 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 14, { 20, 24, 36, 16, 17, 18, 0, 21, 22, 19, 3, 23, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 25, 26, 15, 27, 28, 29, 30, 1, 31, 32, 33, 34, 2, 35 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15a70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a58, { 1, 0 }
}

define i32 @function_15a80(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15a80:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15a80 = load i32, i32* @r4, align 4
  store i32 %v3_15a80, i32* %stack_var_-12, align 4
  %v0_15a84 = load i32, i32* %r0.global-to-local, align 4
  %v1_15a84 = inttoptr i32 %v0_15a84 to i16*
  %v2_15a84 = load i16, i16* %v1_15a84, align 2
  %v3_15a84 = zext i16 %v2_15a84 to i32
  %v1_15a88 = and i32 %v3_15a84, 4
  store i32 %v1_15a88, i32* %r5.global-to-local, align 4
  %v2_15a88 = icmp eq i32 %v1_15a88, 0
  store i32 %v0_15a84, i32* %r4.global-to-local, align 4
  br i1 %v2_15a88, label %dec_label_pc_15a9c, label %bb

bb:                                               ; preds = %dec_label_pc_15a80
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_15a9c:                               ; preds = %dec_label_pc_15a80
  %v1_15a9c = icmp slt i32 %arg2, 0
  br i1 %v1_15a9c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_15a9c
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_15a9c, %bb18
  %v1_15aa4 = add i32 %v0_15a84, 4
  %v2_15aa4 = inttoptr i32 %v1_15aa4 to i32*
  %v3_15aa4 = load i32, i32* %v2_15aa4, align 4
  store i32 %v3_15aa4, i32* %r0.global-to-local, align 4
  %v1_15aa8 = call i32 @function_10758(i32 %v3_15aa4)
  store i32 %v1_15aa8, i32* %r0.global-to-local, align 4
  %v5_15ab0 = icmp sgt i32 %v1_15aa8, 0
  br i1 %v5_15ab0, label %.thread7, label %dec_label_pc_15ab4

dec_label_pc_15ab4:                               ; preds = %bb19
  %v2_15aac = icmp eq i32 %v1_15aa8, 0
  %v0_15ab4 = load i32, i32* %r4.global-to-local, align 4
  %v1_15ab4 = inttoptr i32 %v0_15ab4 to i16*
  %v2_15ab4 = load i16, i16* %v1_15ab4, align 2
  br i1 %v2_15aac, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_15ab4
  %v2_15ab8 = or i16 %v2_15ab4, 4
  store i16 %v2_15ab8, i16* %v1_15ab4, align 2
  %v1_15ad4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_15ab4
  %v2_15abc = or i16 %v2_15ab4, 8
  store i16 %v2_15abc, i16* %v1_15ab4, align 2
  %v1_15ac8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_15ac8, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_15ad4 = phi i32 [ %v1_15ad4.pre, %bb20 ], [ 0, %bb ], [ %v1_15aa8, %bb19 ], [ %v1_15ac8, %bb21 ]
  %v2_15ad0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15ad0, i32* @r4, align 4
  ret i32 %v1_15ad4

; uselistorder directives
  uselistorder i16 %v2_15ab4, { 1, 0 }
  uselistorder i32 %v1_15aa8, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_10758, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_15ad8(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15ad8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_15ad8 = load i32, i32* @r4, align 4
  store i32 %v3_15ad8, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_15af02 = icmp eq i32 %arg3, 0
  store i1 %v2_15af02, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15af02, label %dec_label_pc_15b80, label %dec_label_pc_15af8

dec_label_pc_15af0thread-pre-split:               ; preds = %dec_label_pc_15af8
  %v3_15b10 = load i32, i32* %r6.global-to-local, align 4
  %v5_15b10 = add i32 %v3_15b10, %v3_15b08
  store i32 %v5_15b10, i32* %r6.global-to-local, align 4
  %v4_15b14 = load i32, i32* %r5.global-to-local, align 4
  %v5_15b14 = sub i32 %v4_15b14, %v3_15b08
  store i32 %v5_15b14, i32* %r5.global-to-local, align 4
  %v2_15af0 = icmp eq i32 %v5_15b14, 0
  store i1 %v2_15af0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15af0, label %dec_label_pc_15af0.dec_label_pc_15b80.loopexit_crit_edge, label %dec_label_pc_15af0thread-pre-split.dec_label_pc_15af8_crit_edge

dec_label_pc_15af0thread-pre-split.dec_label_pc_15af8_crit_edge: ; preds = %dec_label_pc_15af0thread-pre-split
  %v3_15af8.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_15b04.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15af8

dec_label_pc_15af8:                               ; preds = %dec_label_pc_15ad8, %dec_label_pc_15af0thread-pre-split.dec_label_pc_15af8_crit_edge
  %v0_15b04 = phi i32 [ %v0_15b04.pre, %dec_label_pc_15af0thread-pre-split.dec_label_pc_15af8_crit_edge ], [ %tmp, %dec_label_pc_15ad8 ]
  %v0_15b00 = phi i32 [ %v5_15b10, %dec_label_pc_15af0thread-pre-split.dec_label_pc_15af8_crit_edge ], [ %arg2, %dec_label_pc_15ad8 ]
  %v3_15af8 = phi i32 [ %v3_15af8.pre, %dec_label_pc_15af0thread-pre-split.dec_label_pc_15af8_crit_edge ], [ 2147483647, %dec_label_pc_15ad8 ]
  %v0_15afc.in = phi i32 [ %v5_15b14, %dec_label_pc_15af0thread-pre-split.dec_label_pc_15af8_crit_edge ], [ %arg3, %dec_label_pc_15ad8 ]
  %v3_15afc = phi i32 [ %v5_15b14, %dec_label_pc_15af0thread-pre-split.dec_label_pc_15af8_crit_edge ], [ %arg3, %dec_label_pc_15ad8 ]
  %v0_15afc = icmp slt i32 %v0_15afc.in, 0
  %storemerge = select i1 %v0_15afc, i32 %v3_15af8, i32 %v3_15afc
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_15b00, i32* %r1.global-to-local, align 4
  %v1_15b04 = add i32 %v0_15b04, 4
  %v2_15b04 = inttoptr i32 %v1_15b04 to i32*
  %v3_15b04 = load i32, i32* %v2_15b04, align 4
  %v3_15b08 = call i32 @function_108cc(i32 %v3_15b04, i32 %v0_15b00)
  %v1_15b0c = icmp slt i32 %v3_15b08, 0
  %v2_15b0c = icmp eq i32 %v3_15b08, 0
  store i1 %v2_15b0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_15b0c, label %dec_label_pc_15b1c, label %dec_label_pc_15af0thread-pre-split

dec_label_pc_15b1c:                               ; preds = %dec_label_pc_15af8
  %v0_15b1c = load i32, i32* %r4.global-to-local, align 4
  %v1_15b1c = inttoptr i32 %v0_15b1c to i16*
  %v2_15b1c = load i16, i16* %v1_15b1c, align 2
  %v3_15b1c = zext i16 %v2_15b1c to i32
  store i32 %v3_15b1c, i32* %r3.global-to-local, align 4
  %v1_15b20 = add i32 %v0_15b1c, 8
  store i32 %v1_15b20, i32* %r1.global-to-local, align 4
  %v1_15b24 = inttoptr i32 %v1_15b20 to i32*
  %v2_15b24 = load i32, i32* %v1_15b24, align 4
  store i32 %v2_15b24, i32* %r1.global-to-local, align 4
  %v3_15b24 = add i32 %v0_15b1c, 12
  %v4_15b24 = inttoptr i32 %v3_15b24 to i32*
  %v5_15b24 = load i32, i32* %v4_15b24, align 4
  %v1_15b28 = or i32 %v3_15b1c, 8
  store i32 %v1_15b28, i32* %r3.global-to-local, align 4
  %v2_15b2c = sub i32 %v5_15b24, %v2_15b24
  store i32 %v2_15b2c, i32* %r2.global-to-local, align 4
  %v9_15b2c = icmp eq i32 %v5_15b24, %v2_15b24
  store i1 %v9_15b2c, i1* %cpsr_z.global-to-local, align 1
  %v1_15b30 = trunc i32 %v1_15b28 to i16
  store i16 %v1_15b30, i16* %v1_15b1c, align 2
  br i1 %v9_15b2c, label %dec_label_pc_15b1c.dec_label_pc_15b7c_crit_edge, label %dec_label_pc_15b38

dec_label_pc_15b1c.dec_label_pc_15b7c_crit_edge:  ; preds = %dec_label_pc_15b1c
  %v0_15b7c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15b7c

dec_label_pc_15b38:                               ; preds = %dec_label_pc_15b1c
  %v0_15b38 = load i32, i32* %r2.global-to-local, align 4
  %v1_15b38 = load i32, i32* %r5.global-to-local, align 4
  %v3_15b38 = icmp ult i32 %v0_15b38, %v1_15b38
  %v9_15b38 = icmp eq i32 %v0_15b38, %v1_15b38
  store i1 %v9_15b38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15b38, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_15b38
  store i32 %v1_15b38, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_15b38, %bb23
  %v2_15b4c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_15b60
  %v2_15b4c = phi i32 [ %v2_15b4c.pre, %.preheader ], [ %v1_15b64, %dec_label_pc_15b60 ]
  %v0_15b40 = load i32, i32* %r6.global-to-local, align 4
  %v1_15b40 = inttoptr i32 %v0_15b40 to i8*
  %v2_15b40 = load i8, i8* %v1_15b40, align 1
  %v3_15b40 = zext i8 %v2_15b40 to i32
  store i32 %v3_15b40, i32* %r3.global-to-local, align 4
  %v7_15b44 = icmp eq i8 %v2_15b40, 10
  store i1 %v7_15b44, i1* %cpsr_z.global-to-local, align 1
  %v1_15b48 = add i32 %v0_15b40, 1
  store i32 %v1_15b48, i32* %r6.global-to-local, align 4
  %v3_15b4c = inttoptr i32 %v2_15b4c to i8*
  store i8 %v2_15b40, i8* %v3_15b4c, align 1
  %v0_15b50 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15b50, label %dec_label_pc_15b54, label %dec_label_pc_15b60

dec_label_pc_15b54:                               ; preds = %bb24
  %v0_15b54 = load i32, i32* %r4.global-to-local, align 4
  %v1_15b54 = inttoptr i32 %v0_15b54 to i16*
  %v2_15b54 = load i16, i16* %v1_15b54, align 2
  %v3_15b54 = zext i16 %v2_15b54 to i32
  store i32 %v3_15b54, i32* %r3.global-to-local, align 4
  %v1_15b58 = and i32 %v3_15b54, 256
  %v2_15b58 = icmp eq i32 %v1_15b58, 0
  store i1 %v2_15b58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15b58, label %dec_label_pc_15b60, label %dec_label_pc_15b54.dec_label_pc_15b6c_crit_edge

dec_label_pc_15b54.dec_label_pc_15b6c_crit_edge:  ; preds = %dec_label_pc_15b54
  %v0_15b70.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15b6c

dec_label_pc_15b60:                               ; preds = %dec_label_pc_15b54, %bb24
  %v0_15b60 = load i32, i32* %r2.global-to-local, align 4
  %v1_15b60 = add i32 %v0_15b60, -1
  store i32 %v1_15b60, i32* %r2.global-to-local, align 4
  %v7_15b60 = icmp eq i32 %v0_15b60, 1
  store i1 %v7_15b60, i1* %cpsr_z.global-to-local, align 1
  %v0_15b64 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b64 = add i32 %v0_15b64, 1
  store i32 %v1_15b64, i32* %r1.global-to-local, align 4
  br i1 %v7_15b60, label %dec_label_pc_15b60.dec_label_pc_15b6c_crit_edge, label %bb24

dec_label_pc_15b60.dec_label_pc_15b6c_crit_edge:  ; preds = %dec_label_pc_15b60
  %v0_15b6c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15b6c

dec_label_pc_15b6c:                               ; preds = %dec_label_pc_15b54.dec_label_pc_15b6c_crit_edge, %dec_label_pc_15b60.dec_label_pc_15b6c_crit_edge
  %v0_15b70 = phi i32 [ %v1_15b64, %dec_label_pc_15b60.dec_label_pc_15b6c_crit_edge ], [ %v0_15b70.pre, %dec_label_pc_15b54.dec_label_pc_15b6c_crit_edge ]
  %v0_15b6c = phi i32 [ %v0_15b6c.pre, %dec_label_pc_15b60.dec_label_pc_15b6c_crit_edge ], [ %v0_15b54, %dec_label_pc_15b54.dec_label_pc_15b6c_crit_edge ]
  %v1_15b6c = add i32 %v0_15b6c, 8
  %v2_15b6c = inttoptr i32 %v1_15b6c to i32*
  %v3_15b6c = load i32, i32* %v2_15b6c, align 4
  store i32 %v3_15b6c, i32* %r3.global-to-local, align 4
  %v2_15b70 = add i32 %v0_15b6c, 16
  %v3_15b70 = inttoptr i32 %v2_15b70 to i32*
  store i32 %v0_15b70, i32* %v3_15b70, align 4
  %v0_15b74 = load i32, i32* %r3.global-to-local, align 4
  %v1_15b74 = load i32, i32* %r1.global-to-local, align 4
  %v2_15b74 = sub i32 %v1_15b74, %v0_15b74
  store i32 %v2_15b74, i32* %r3.global-to-local, align 4
  %v1_15b78 = load i32, i32* %r5.global-to-local, align 4
  %v2_15b78 = sub i32 %v1_15b78, %v2_15b74
  store i32 %v2_15b78, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15b7c

dec_label_pc_15b7c:                               ; preds = %dec_label_pc_15b1c.dec_label_pc_15b7c_crit_edge, %dec_label_pc_15b6c
  %v0_15b7c = phi i32 [ %v0_15b7c.pre, %dec_label_pc_15b1c.dec_label_pc_15b7c_crit_edge ], [ %v2_15b78, %dec_label_pc_15b6c ]
  %v1_15b7c = load i32, i32* @r7, align 4
  %v2_15b7c = sub i32 %v1_15b7c, %v0_15b7c
  br label %dec_label_pc_15b80

dec_label_pc_15af0.dec_label_pc_15b80.loopexit_crit_edge: ; preds = %dec_label_pc_15af0thread-pre-split
  %v0_15b80.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15b80

dec_label_pc_15b80:                               ; preds = %dec_label_pc_15ad8, %dec_label_pc_15af0.dec_label_pc_15b80.loopexit_crit_edge, %dec_label_pc_15b7c
  %v0_15b80 = phi i32 [ %v2_15b7c, %dec_label_pc_15b7c ], [ %v0_15b80.pre.pre, %dec_label_pc_15af0.dec_label_pc_15b80.loopexit_crit_edge ], [ 0, %dec_label_pc_15ad8 ]
  %v2_15b84 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15b84, i32* %r4.global-to-local, align 4
  ret i32 %v0_15b80

; uselistorder directives
  uselistorder i32 %v0_15b6c, { 1, 0 }
  uselistorder i32 %v1_15b64, { 0, 2, 1 }
  uselistorder i32 %v0_15b60, { 1, 0 }
  uselistorder i32 %v1_15b38, { 0, 2, 1 }
  uselistorder i32 %v0_15b38, { 1, 0 }
  uselistorder i32 %v5_15b24, { 1, 0 }
  uselistorder i32 %v2_15b24, { 1, 0, 2 }
  uselistorder i32 %v3_15b08, { 2, 3, 0, 1 }
  uselistorder i32 %v0_15b00, { 1, 0 }
  uselistorder i32 %v5_15b14, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 5, 3, 2, 6, 7, 8, 0 }
  uselistorder i32 256, { 305, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 297, 306, 303, 304, 307, 36, 37, 38, 296, 39, 40, 41, 0, 302, 1, 42, 43, 44, 45, 47, 48, 49, 46, 51, 52, 53, 50, 54, 300, 55, 308, 309, 56, 57, 58, 311, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 72, 71, 70, 73, 301, 312, 310, 74, 75, 76, 77, 79, 78, 80, 82, 81, 83, 85, 84, 86, 87, 88, 2, 97, 93, 98, 94, 89, 90, 91, 99, 95, 100, 96, 92, 101, 102, 103, 104, 105, 106, 116, 117, 111, 118, 112, 107, 108, 113, 119, 114, 120, 115, 109, 110, 121, 122, 123, 124, 129, 127, 125, 130, 128, 126, 131, 132, 136, 140, 141, 137, 133, 134, 138, 135, 139, 142, 143, 298, 313, 144, 146, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 159, 157, 162, 160, 158, 163, 164, 168, 172, 173, 169, 165, 166, 170, 167, 171, 174, 175, 299, 314, 176, 178, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 315, 189, 316, 198, 193, 199, 194, 195, 190, 191, 200, 196, 192, 197, 201, 202, 203, 204, 205, 206, 207, 208, 215, 212, 216, 213, 217, 214, 209, 210, 211, 218, 219, 220, 221, 222, 227, 234, 228, 235, 229, 223, 224, 236, 230, 225, 231, 237, 232, 226, 233, 238, 239, 240, 241, 242, 243, 244, 249, 256, 250, 257, 251, 245, 246, 258, 252, 247, 253, 259, 254, 248, 255, 260, 261, 262, 263, 264, 265, 266, 276, 272, 267, 277, 273, 278, 274, 268, 269, 270, 279, 275, 271, 280, 281, 282, 283, 284, 285, 286, 287, 3, 288, 289, 290, 291, 292, 4, 293, 294, 295 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_108cc, { 2, 1, 0 }
  uselistorder i32 4, { 200, 201, 202, 194, 195, 327, 203, 451, 5, 6, 204, 7, 8, 67, 0, 9, 75, 70, 71, 10, 452, 72, 453, 58, 11, 12, 73, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 13, 471, 472, 473, 474, 475, 476, 57, 477, 478, 479, 480, 481, 482, 14, 15, 74, 483, 205, 92, 206, 16, 207, 93, 208, 209, 210, 211, 127, 212, 213, 214, 215, 216, 217, 17, 196, 197, 198, 199, 275, 276, 189, 190, 191, 192, 193, 484, 128, 94, 485, 18, 486, 129, 130, 59, 403, 404, 405, 406, 407, 408, 131, 132, 19, 409, 410, 411, 412, 413, 414, 415, 416, 133, 401, 402, 377, 378, 379, 380, 381, 382, 383, 384, 385, 20, 386, 387, 388, 417, 21, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 134, 135, 136, 432, 433, 436, 439, 434, 435, 95, 137, 437, 50, 438, 440, 441, 442, 444, 138, 23, 22, 443, 139, 140, 141, 244, 142, 51, 24, 25, 277, 278, 279, 280, 281, 26, 282, 445, 446, 188, 27, 28, 96, 245, 60, 246, 103, 247, 248, 249, 29, 250, 76, 97, 98, 233, 234, 240, 241, 99, 218, 219, 220, 221, 222, 223, 100, 224, 225, 226, 101, 227, 102, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 242, 243, 53, 52, 251, 68, 252, 30, 253, 31, 55, 54, 255, 32, 254, 256, 257, 262, 104, 264, 105, 265, 106, 266, 267, 263, 258, 107, 259, 260, 261, 447, 268, 65, 64, 63, 269, 108, 33, 34, 35, 36, 37, 270, 62, 61, 271, 66, 109, 272, 273, 274, 283, 284, 143, 285, 286, 287, 144, 145, 1, 110, 288, 77, 289, 290, 291, 146, 292, 293, 147, 148, 2, 111, 294, 78, 295, 79, 296, 297, 298, 299, 149, 300, 301, 150, 151, 302, 303, 112, 304, 3, 305, 80, 306, 113, 307, 308, 309, 310, 152, 311, 312, 153, 154, 313, 314, 114, 315, 4, 316, 81, 317, 115, 318, 38, 328, 329, 330, 155, 331, 332, 333, 334, 156, 157, 116, 335, 117, 337, 82, 338, 339, 340, 158, 341, 342, 159, 160, 343, 83, 344, 84, 345, 346, 347, 348, 161, 349, 350, 162, 163, 119, 351, 118, 352, 85, 353, 86, 354, 355, 356, 357, 358, 359, 121, 360, 122, 361, 164, 362, 56, 363, 165, 166, 123, 364, 120, 365, 87, 366, 88, 367, 368, 369, 167, 370, 371, 168, 169, 372, 124, 373, 89, 374, 170, 171, 172, 375, 376, 125, 90, 173, 174, 175, 448, 449, 126, 91, 176, 39, 389, 177, 40, 390, 178, 41, 391, 179, 42, 392, 180, 43, 393, 181, 69, 44, 394, 395, 182, 45, 396, 183, 46, 397, 184, 47, 398, 185, 48, 399, 186, 49, 400, 450, 319, 320, 321, 322, 323, 324, 325, 187, 326, 336 }
  uselistorder i32 2147483647, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i32* @r7, { 3, 36, 37, 25, 26, 27, 28, 29, 30, 31, 32, 35, 4, 38, 39, 40, 5, 41, 42, 43, 19, 44, 45, 6, 46, 47, 48, 49, 50, 51, 7, 52, 53, 54, 55, 56, 57, 33, 34, 311, 312, 200, 201, 274, 275, 24, 313, 314, 315, 320, 321, 8, 58, 59, 112, 9, 113, 114, 115, 0, 116, 117, 276, 277, 278, 279, 280, 281, 282, 283, 284, 257, 258, 259, 260, 261, 262, 285, 286, 287, 288, 289, 290, 291, 292, 10, 293, 294, 295, 296, 297, 298, 299, 80, 81, 82, 83, 300, 301, 302, 303, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 130, 131, 132, 133, 139, 140, 141, 142, 143, 144, 247, 248, 318, 319, 84, 85, 86, 87, 180, 181, 316, 317, 208, 209, 145, 146, 202, 203, 118, 119, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 304, 305, 21, 306, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 76, 77, 63, 60, 11, 61, 1, 62, 75, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 101, 102, 103, 104, 105, 106, 107, 210, 211, 212, 213, 108, 109, 110, 111, 12, 120, 121, 122, 123, 124, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 22, 175, 176, 177, 178, 179, 182, 23, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 13, 222, 223, 224, 225, 226, 227, 228, 229, 230, 2, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 14, 250, 251, 252, 16, 15, 253, 254, 255, 256, 18, 17, 307, 308, 309, 310, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 190, 188, 189, 20, 191, 192, 193, 194, 195, 196, 197, 198, 199, 204, 205, 206, 207 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_15b80, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15b7c, { 1, 0 }
  uselistorder label %dec_label_pc_15b6c, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_15af8, { 1, 0 }
}

define i32 @function_15b8c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15b8c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15b8c = load i32, i32* @r4, align 4
  store i32 %v3_15b8c, i32* %stack_var_-8, align 4
  %v1_15b90 = add i32 %arg1, 8
  %v1_15b94 = inttoptr i32 %v1_15b90 to i32*
  %v2_15b94 = load i32, i32* %v1_15b94, align 4
  %v3_15b94 = add i32 %arg1, 12
  %v4_15b94 = inttoptr i32 %v3_15b94 to i32*
  %v5_15b94 = load i32, i32* %v4_15b94, align 4
  %v2_15b98 = sub i32 %v5_15b94, %v2_15b94
  store i32 %v2_15b98, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_15ba0 = inttoptr i32 %arg1 to i16*
  %v4_15ba0 = call i32 @function_15a80(i16* %v3_15ba0, i32 %v2_15b94, i32 %v2_15b98)
  %v0_15ba4 = load i32, i32* @r4, align 4
  %v1_15ba4 = add i32 %v0_15ba4, 8
  %v2_15ba4 = inttoptr i32 %v1_15ba4 to i32*
  %v3_15ba4 = load i32, i32* %v2_15ba4, align 4
  store i32 %v3_15ba4, i32* %r2.global-to-local, align 4
  %v2_15ba8 = add i32 %v3_15ba4, %v4_15ba0
  %v2_15bac = add i32 %v0_15ba4, 20
  %v3_15bac = inttoptr i32 %v2_15bac to i32*
  store i32 %v2_15ba8, i32* %v3_15bac, align 4
  %v0_15bb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_15bb0 = load i32, i32* @r4, align 4
  %v2_15bb0 = add i32 %v1_15bb0, 16
  %v3_15bb0 = inttoptr i32 %v2_15bb0 to i32*
  store i32 %v0_15bb0, i32* %v3_15bb0, align 4
  %v2_15bb4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15bb4, i32* @r4, align 4
  ret i32 %v4_15ba0

; uselistorder directives
  uselistorder i32 %v4_15ba0, { 1, 0 }
  uselistorder i32 20, { 30, 113, 3, 114, 115, 1, 116, 31, 7, 32, 33, 34, 35, 29, 44, 45, 25, 26, 27, 28, 117, 8, 118, 108, 109, 110, 2, 46, 9, 47, 48, 0, 36, 38, 4, 40, 10, 41, 24, 39, 37, 42, 43, 49, 50, 11, 51, 52, 53, 54, 55, 56, 57, 58, 12, 59, 60, 61, 62, 63, 64, 13, 65, 66, 14, 67, 68, 69, 70, 15, 71, 72, 16, 73, 74, 75, 76, 78, 17, 79, 80, 81, 82, 83, 84, 18, 85, 86, 87, 88, 19, 20, 89, 5, 90, 21, 91, 92, 93, 94, 6, 95, 22, 96, 97, 98, 99, 100, 23, 101, 102, 103, 104, 105, 106, 107, 111, 112, 77 }
  uselistorder i32 12, { 9, 10, 37, 11, 12, 40, 6, 166, 167, 168, 169, 170, 172, 173, 171, 174, 175, 176, 177, 178, 179, 180, 13, 14, 15, 16, 18, 17, 19, 41, 42, 20, 43, 44, 45, 46, 47, 38, 39, 82, 83, 34, 35, 36, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 3, 120, 121, 122, 123, 124, 21, 125, 143, 22, 23, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 155, 156, 157, 158, 159, 160, 161, 163, 164, 24, 165, 4, 84, 85, 25, 86, 87, 26, 61, 62, 63, 51, 64, 48, 65, 59, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 66, 67, 68, 5, 69, 70, 71, 72, 74, 75, 33, 76, 27, 77, 28, 78, 29, 79, 81, 80, 73, 117, 88, 89, 30, 90, 91, 92, 31, 93, 94, 95, 96, 97, 98, 7, 99, 100, 101, 102, 103, 104, 8, 105, 106, 32, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 0, 1, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_15bbc() local_unnamed_addr {
dec_label_pc_15bbc:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15bbc = load i32, i32* @r4, align 4
  store i32 %v3_15bbc, i32* %stack_var_-12, align 4
  %v0_15bc0 = load i32, i32* @r0, align 4
  %v1_15bc0 = inttoptr i32 %v0_15bc0 to i16*
  %v2_15bc0 = load i16, i16* %v1_15bc0, align 2
  %v3_15bc0 = zext i16 %v2_15bc0 to i32
  store i32 %v3_15bc0, i32* %r3.global-to-local, align 4
  %v0_15bc4 = load i32, i32* @r1, align 4
  %v2_15bc4 = and i32 %v0_15bc4, %v3_15bc0
  %v4_15bc4 = icmp eq i32 %v2_15bc4, 0
  store i32 %v0_15bc0, i32* @r4, align 4
  br i1 %v4_15bc4, label %dec_label_pc_15bd4, label %dec_label_pc_15be4

dec_label_pc_15bd4:                               ; preds = %dec_label_pc_15bbc
  %v1_15bd4 = and i32 %v3_15bc0, 2176
  %v2_15bd4 = icmp eq i32 %v1_15bd4, 0
  br i1 %v2_15bd4, label %dec_label_pc_15bdc, label %dec_label_pc_15bf0

dec_label_pc_15bdc:                               ; preds = %dec_label_pc_15bd4
  %v2_15bdc = or i32 %v0_15bc4, %v3_15bc0
  store i32 %v2_15bdc, i32* %r3.global-to-local, align 4
  %v1_15be0 = trunc i32 %v2_15bdc to i16
  store i16 %v1_15be0, i16* %v1_15bc0, align 2
  %v0_15be4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15be4

dec_label_pc_15be4:                               ; preds = %dec_label_pc_15bbc, %dec_label_pc_15bdc
  %v0_15be4 = phi i32 [ %v0_15bc0, %dec_label_pc_15bbc ], [ %v0_15be4.pre, %dec_label_pc_15bdc ]
  %v1_15be4 = inttoptr i32 %v0_15be4 to i16*
  %v2_15be4 = load i16, i16* %v1_15be4, align 2
  %v3_15be4 = zext i16 %v2_15be4 to i32
  store i32 %v3_15be4, i32* %r3.global-to-local, align 4
  %v1_15be8 = and i32 %v3_15be4, 16
  store i32 %v1_15be8, i32* %r5.global-to-local, align 4
  %v2_15be8 = icmp eq i32 %v1_15be8, 0
  br i1 %v2_15be8, label %dec_label_pc_15c10, label %dec_label_pc_15bf0

dec_label_pc_15bf0:                               ; preds = %dec_label_pc_15bd4, %dec_label_pc_15be4
  %v0_15bf0 = call i32 @function_10de8()
  store i32 %v0_15bf0, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_15bf8 = inttoptr i32 %v0_15bf0 to i32*
  store i32 9, i32* %v2_15bf8, align 4
  br label %dec_label_pc_15bfc

dec_label_pc_15bfc:                               ; preds = %dec_label_pc_15c18, %dec_label_pc_15bf0
  %v0_15bfc = load i32, i32* @r4, align 4
  %v1_15bfc = inttoptr i32 %v0_15bfc to i16*
  %v2_15bfc = load i16, i16* %v1_15bfc, align 2
  %v3_15bfc = zext i16 %v2_15bfc to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_15c04 = or i32 %v3_15bfc, 8
  store i32 %v1_15c04, i32* %r3.global-to-local, align 4
  %v1_15c08 = trunc i32 %v1_15c04 to i16
  store i16 %v1_15c08, i16* %v1_15bfc, align 2
  %v1_15c50.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15c48

dec_label_pc_15c10:                               ; preds = %dec_label_pc_15be4
  %v1_15c10 = and i32 %v3_15be4, 64
  %v2_15c10 = icmp eq i32 %v1_15c10, 0
  br i1 %v2_15c10, label %dec_label_pc_15c38, label %dec_label_pc_15c18

dec_label_pc_15c18:                               ; preds = %dec_label_pc_15c10
  %v0_15c18 = load i32, i32* @r0, align 4
  %v1_15c18 = call i32 @function_147f8(i32 %v0_15c18)
  store i32 %v1_15c18, i32* %r0.global-to-local, align 4
  %v2_15c1c = icmp eq i32 %v1_15c18, 0
  br i1 %v2_15c1c, label %dec_label_pc_15c24, label %dec_label_pc_15bfc

dec_label_pc_15c24:                               ; preds = %dec_label_pc_15c18
  %v0_15c24 = load i32, i32* @r4, align 4
  %v1_15c24 = inttoptr i32 %v0_15c24 to i16*
  %v2_15c24 = load i16, i16* %v1_15c24, align 2
  %v3_15c24 = zext i16 %v2_15c24 to i32
  store i32 %v3_15c24, i32* %r3.global-to-local, align 4
  %v1_15c28 = add i32 %v0_15c24, 8
  %v2_15c28 = inttoptr i32 %v1_15c28 to i32*
  %v3_15c28 = load i32, i32* %v2_15c28, align 4
  %v1_15c2c = and i32 %v3_15c24, 65471
  store i32 %v1_15c2c, i32* %r3.global-to-local, align 4
  %v2_15c30 = add i32 %v0_15c24, 28
  %v3_15c30 = inttoptr i32 %v2_15c30 to i32*
  store i32 %v3_15c28, i32* %v3_15c30, align 4
  %v0_15c34 = load i32, i32* %r3.global-to-local, align 4
  %v1_15c34 = trunc i32 %v0_15c34 to i16
  %v2_15c34 = load i32, i32* @r4, align 4
  %v3_15c34 = inttoptr i32 %v2_15c34 to i16*
  store i16 %v1_15c34, i16* %v3_15c34, align 2
  %v0_15c38.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15c38

dec_label_pc_15c38:                               ; preds = %dec_label_pc_15c10, %dec_label_pc_15c24
  %v2_15c40 = phi i32 [ %v0_15be4, %dec_label_pc_15c10 ], [ %v0_15c38.pre, %dec_label_pc_15c24 ]
  %v1_15c38 = inttoptr i32 %v2_15c40 to i16*
  %v2_15c38 = load i16, i16* %v1_15c38, align 2
  %v3_15c38 = zext i16 %v2_15c38 to i32
  %v1_15c3c = or i32 %v3_15c38, 1
  store i32 %v1_15c3c, i32* %r3.global-to-local, align 4
  %v1_15c40 = trunc i32 %v1_15c3c to i16
  store i16 %v1_15c40, i16* %v1_15c38, align 2
  %v0_15c44 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_15c44, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15c48

dec_label_pc_15c48:                               ; preds = %dec_label_pc_15bfc, %dec_label_pc_15c38
  %v1_15c50 = phi i32 [ %v1_15c50.pre, %dec_label_pc_15bfc ], [ %v0_15c44, %dec_label_pc_15c38 ]
  %v2_15c4c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15c4c, i32* @r4, align 4
  ret i32 %v1_15c50

; uselistorder directives
  uselistorder i32 %v3_15bc0, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 22, 47, 7, 23, 24, 25, 35, 36, 20, 10, 21, 11, 12, 13, 14, 44, 45, 46, 8, 15, 0, 26, 1, 27, 2, 28, 3, 29, 4, 30, 5, 31, 6, 32, 9, 19, 34, 33, 16, 17, 18, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_147f8, { 2, 1, 0 }
  uselistorder i32 64, { 14, 15, 16, 17, 21, 10, 11, 12, 13, 53, 18, 9, 19, 20, 22, 23, 6, 24, 25, 26, 0, 27, 28, 29, 1, 30, 31, 32, 2, 33, 34, 35, 7, 36, 37, 38, 3, 39, 40, 41, 42, 43, 4, 44, 45, 46, 47, 48, 5, 49, 50, 51, 8, 52 }
  uselistorder i32 8, { 71, 72, 73, 74, 75, 76, 77, 64, 65, 66, 67, 139, 78, 220, 34, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 79, 80, 81, 82, 83, 84, 85, 28, 86, 87, 88, 89, 90, 91, 92, 93, 94, 68, 69, 70, 110, 111, 112, 45, 238, 239, 55, 29, 171, 172, 173, 174, 175, 176, 177, 178, 7, 56, 179, 180, 181, 182, 183, 184, 185, 186, 8, 158, 159, 160, 161, 162, 163, 164, 165, 187, 188, 189, 190, 191, 9, 192, 193, 10, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 211, 204, 205, 206, 207, 57, 23, 208, 209, 210, 58, 59, 11, 212, 213, 214, 215, 217, 218, 60, 12, 219, 13, 216, 37, 38, 35, 36, 25, 26, 31, 32, 39, 240, 113, 114, 115, 116, 46, 62, 30, 14, 15, 22, 16, 40, 99, 100, 17, 18, 19, 101, 47, 95, 48, 96, 49, 97, 50, 98, 63, 33, 102, 103, 104, 24, 27, 106, 20, 51, 107, 52, 108, 109, 105, 117, 118, 119, 3, 120, 121, 122, 4, 123, 124, 125, 126, 127, 128, 129, 5, 130, 131, 132, 133, 134, 135, 136, 6, 140, 41, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 166, 42, 167, 43, 168, 44, 169, 53, 170, 0, 1, 61, 21, 137, 54, 138, 2 }
  uselistorder i32 9, { 5, 26, 21, 22, 57, 59, 6, 41, 4, 42, 7, 32, 10, 29, 11, 30, 12, 31, 27, 8, 9, 28, 23, 33, 2, 24, 25, 34, 13, 35, 14, 36, 15, 37, 16, 38, 39, 17, 40, 0, 18, 1, 55, 43, 44, 45, 46, 47, 48, 19, 49, 50, 51, 52, 53, 54, 56, 3, 58, 20 }
  uselistorder i32 16, { 99, 100, 101, 93, 94, 95, 96, 102, 33, 34, 35, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 103, 104, 105, 106, 107, 2, 1, 25, 47, 48, 49, 50, 110, 51, 111, 108, 109, 52, 53, 112, 9, 54, 55, 113, 114, 56, 57, 115, 116, 97, 98, 58, 130, 131, 89, 90, 91, 92, 59, 26, 129, 36, 60, 61, 62, 212, 213, 214, 215, 63, 216, 3, 64, 217, 218, 0, 219, 220, 65, 24, 132, 66, 133, 67, 68, 10, 23, 11, 12, 4, 13, 14, 69, 119, 37, 120, 121, 70, 117, 122, 118, 125, 126, 38, 88, 127, 71, 72, 15, 83, 16, 17, 73, 123, 124, 39, 128, 40, 205, 134, 135, 27, 136, 137, 18, 138, 139, 5, 74, 140, 141, 142, 28, 143, 144, 145, 146, 147, 6, 75, 148, 29, 149, 150, 151, 19, 152, 153, 84, 20, 85, 154, 76, 77, 155, 156, 7, 42, 157, 41, 158, 30, 159, 160, 161, 21, 162, 163, 86, 22, 87, 164, 78, 79, 165, 166, 8, 44, 167, 43, 168, 80, 170, 171, 172, 173, 31, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 201, 203, 204, 206, 207, 32, 208, 209, 210, 211, 81, 45, 221, 82, 46, 169 }
  uselistorder i32* @r1, { 15, 14, 58, 16, 17, 18, 19, 1, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 2, 95, 96, 20, 21, 22, 23, 0, 44, 45, 11, 24, 37, 38, 39, 3, 73, 71, 72, 4, 74, 5, 29, 30, 10, 59, 60, 61, 7, 25, 46, 12, 75, 76, 47, 8, 77, 48, 49, 31, 26, 27, 28, 33, 32, 62, 34, 35, 36, 40, 41, 42, 43, 50, 51, 52, 9, 53, 68, 69, 6, 54, 55, 56, 57, 63, 64, 65, 66, 67, 70, 13 }
  uselistorder label %dec_label_pc_15c48, { 1, 0 }
  uselistorder label %dec_label_pc_15c38, { 1, 0 }
  uselistorder label %dec_label_pc_15bf0, { 1, 0 }
  uselistorder label %dec_label_pc_15be4, { 1, 0 }
}

define i32 @function_15c54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15c54:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_15c54 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_15c64 = call i32 @function_10ef0()
  %v0_15c68 = load i32, i32* @r5, align 4
  %v1_15c68 = load i32, i32* @r4, align 4
  %v2_15c68 = add i32 %v1_15c68, %v0_15c68
  store i32 %v6_15c54, i32* @r5, align 4
  ret i32 %v2_15c68

; uselistorder directives
  uselistorder i32 ()* @function_10ef0, { 6, 7, 3, 0, 2, 1, 5, 4 }
  uselistorder i32* @r5, { 41, 42, 43, 44, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 5, 46, 47, 48, 661, 662, 663, 49, 23, 50, 0, 51, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 19, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 25, 26, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 7, 87, 88, 89, 10, 90, 91, 8, 92, 93, 94, 95, 96, 97, 9, 98, 99, 100, 101, 102, 103, 36, 11, 37, 38, 39, 40, 244, 245, 246, 247, 248, 249, 676, 12, 677, 678, 686, 687, 104, 105, 106, 107, 108, 109, 110, 679, 680, 681, 682, 683, 684, 685, 111, 112, 113, 114, 615, 616, 620, 621, 622, 623, 624, 617, 618, 619, 564, 565, 566, 13, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 625, 626, 649, 14, 650, 651, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 3, 640, 641, 642, 643, 644, 15, 645, 646, 647, 648, 125, 126, 127, 128, 129, 250, 251, 16, 252, 253, 254, 255, 256, 24, 115, 257, 17, 258, 259, 260, 261, 262, 263, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 121, 122, 124, 123, 116, 117, 118, 119, 120, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 208, 209, 199, 200, 201, 202, 203, 419, 420, 421, 422, 423, 424, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 1, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 2, 243, 264, 265, 266, 267, 268, 20, 269, 270, 271, 272, 273, 274, 275, 21, 276, 22, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 425, 426, 18, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 4, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 652, 653, 654, 655, 656, 657, 658, 659, 660, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418 }
  uselistorder i32* @r2, { 7, 10, 11, 39, 40, 12, 13, 14, 15, 16, 17, 28, 8, 9, 29, 41, 46, 47, 48, 49, 1, 52, 42, 22, 23, 43, 2, 3, 36, 37, 4, 38, 5, 0, 50, 6, 51, 44, 45, 24, 25, 26, 30, 31, 35, 21, 18, 19, 20, 27, 32, 33, 34 }
}

define i32 @function_15c78(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15c78:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15cb8, label %dec_label_pc_15ca4

dec_label_pc_15ca4:                               ; preds = %dec_label_pc_15c78
  %v0_15ca4 = call i32 @function_10de8()
  %v0_15ca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_15ca8 = sub i32 0, %v0_15ca8
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_15cb0 = inttoptr i32 %v0_15ca4 to i32*
  store i32 %v1_15ca8, i32* %v2_15cb0, align 4
  %v0_15cc0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15cc0

dec_label_pc_15cb8:                               ; preds = %dec_label_pc_15c78
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_15cb8 = icmp eq i32 %arg1, 0
  br i1 %v2_15cb8, label %dec_label_pc_15ccc, label %dec_label_pc_15cc0

dec_label_pc_15cc0:                               ; preds = %dec_label_pc_15cb8, %dec_label_pc_15ca4
  %v0_15cc0 = phi i32 [ %arg1, %dec_label_pc_15cb8 ], [ %v0_15cc0.pre, %dec_label_pc_15ca4 ]
  br label %dec_label_pc_15cd0

dec_label_pc_15ccc:                               ; preds = %dec_label_pc_15cb8
  br label %dec_label_pc_15cd0

dec_label_pc_15cd0:                               ; preds = %dec_label_pc_15cc0, %dec_label_pc_15ccc
  %v1_15cd8 = phi i32 [ %v0_15cc0, %dec_label_pc_15cc0 ], [ %tmp8, %dec_label_pc_15ccc ]
  ret i32 %v1_15cd8

; uselistorder directives
  uselistorder i32 -1, { 243, 249, 161, 244, 245, 246, 110, 247, 111, 248, 82, 83, 84, 85, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 162, 163, 0, 164, 147, 250, 251, 165, 112, 252, 166, 1, 86, 253, 254, 151, 255, 167, 3, 2, 168, 169, 113, 317, 114, 115, 286, 116, 291, 103, 292, 277, 278, 279, 117, 242, 118, 293, 294, 4, 170, 171, 172, 295, 274, 275, 152, 173, 5, 174, 6, 175, 153, 296, 10, 176, 177, 9, 11, 297, 8, 178, 179, 87, 7, 180, 88, 89, 90, 91, 181, 182, 183, 99, 258, 259, 12, 260, 119, 298, 120, 121, 289, 122, 299, 123, 283, 124, 261, 125, 126, 262, 127, 300, 128, 301, 102, 160, 13, 281, 184, 129, 290, 130, 319, 131, 263, 132, 264, 133, 265, 134, 280, 135, 321, 136, 284, 137, 318, 138, 287, 139, 282, 140, 266, 141, 142, 143, 320, 144, 276, 185, 186, 187, 14, 97, 100, 15, 16, 101, 98, 149, 150, 188, 19, 189, 20, 190, 267, 92, 21, 191, 192, 193, 194, 18, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 256, 145, 257, 22, 220, 221, 105, 104, 268, 17, 222, 223, 224, 23, 225, 108, 109, 106, 107, 226, 24, 227, 146, 269, 93, 25, 26, 159, 154, 270, 155, 271, 28, 156, 272, 27, 29, 30, 31, 157, 273, 32, 33, 34, 35, 228, 36, 94, 229, 37, 148, 38, 39, 40, 230, 41, 42, 43, 95, 44, 45, 46, 47, 48, 231, 49, 232, 50, 51, 52, 233, 53, 54, 55, 234, 56, 57, 58, 59, 60, 235, 61, 62, 63, 64, 65, 66, 236, 67, 158, 288, 68, 69, 70, 237, 71, 72, 73, 238, 74, 75, 76, 239, 77, 78, 79, 80, 240, 241, 285, 81, 96 }
  uselistorder i32 ()* @function_10de8, { 60, 56, 59, 58, 57, 62, 55, 54, 5, 4, 21, 29, 16, 19, 18, 61, 15, 14, 13, 38, 37, 20, 10, 12, 11, 51, 50, 9, 26, 25, 8, 23, 49, 48, 47, 7, 6, 53, 52, 17, 34, 33, 32, 24, 2, 46, 45, 44, 35, 0, 22, 3, 27, 31, 43, 28, 42, 1, 36, 41, 40, 39, 30 }
  uselistorder i32 1, { 268, 267, 788, 618, 350, 351, 352, 619, 181, 789, 790, 791, 620, 284, 286, 285, 287, 282, 289, 283, 288, 621, 40, 39, 41, 622, 44, 45, 42, 48, 46, 43, 47, 623, 312, 280, 279, 441, 469, 442, 987, 988, 989, 990, 454, 624, 346, 626, 625, 415, 416, 792, 627, 445, 1087, 446, 793, 1088, 794, 795, 796, 798, 797, 431, 628, 800, 799, 912, 913, 1089, 447, 1090, 1091, 1092, 1093, 1094, 1095, 784, 1096, 1097, 1098, 1099, 1100, 1101, 785, 610, 630, 629, 418, 419, 424, 426, 425, 420, 417, 421, 423, 422, 804, 801, 802, 803, 467, 448, 66, 63, 64, 65, 67, 510, 805, 806, 807, 808, 631, 611, 85, 86, 809, 634, 633, 632, 87, 90, 88, 91, 92, 93, 89, 511, 810, 636, 635, 400, 398, 401, 397, 399, 402, 811, 637, 212, 211, 210, 812, 813, 638, 84, 83, 639, 151, 512, 787, 110, 111, 814, 815, 816, 817, 513, 818, 819, 820, 449, 642, 641, 640, 354, 353, 356, 357, 355, 358, 821, 822, 823, 644, 643, 217, 218, 514, 824, 645, 309, 825, 826, 827, 828, 829, 515, 646, 261, 265, 262, 264, 263, 516, 266, 340, 647, 253, 252, 159, 648, 54, 649, 311, 310, 650, 113, 118, 112, 117, 121, 120, 116, 119, 114, 115, 651, 128, 127, 125, 124, 126, 122, 123, 652, 94, 95, 102, 103, 99, 100, 98, 101, 96, 97, 653, 139, 140, 345, 914, 199, 202, 200, 201, 654, 209, 208, 655, 17, 656, 302, 303, 1102, 517, 1103, 518, 1104, 657, 35, 30, 36, 34, 32, 37, 31, 38, 33, 71, 519, 242, 241, 658, 389, 390, 281, 434, 830, 831, 832, 659, 985, 662, 661, 660, 138, 663, 443, 899, 444, 900, 901, 435, 902, 382, 383, 381, 384, 385, 388, 387, 386, 903, 1105, 455, 520, 665, 664, 666, 53, 1044, 1047, 1048, 1049, 667, 361, 366, 367, 365, 364, 368, 362, 363, 1050, 1051, 1052, 1053, 668, 406, 412, 405, 411, 410, 404, 414, 413, 408, 403, 407, 409, 1045, 1046, 521, 221, 220, 219, 222, 1037, 522, 1038, 1039, 1040, 1041, 1042, 669, 305, 306, 304, 307, 56, 55, 1054, 1055, 1056, 1057, 1058, 1059, 474, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 524, 1068, 1069, 1070, 1071, 1072, 523, 1073, 1074, 1075, 1076, 1077, 670, 371, 378, 369, 376, 375, 380, 373, 379, 374, 372, 377, 370, 135, 134, 525, 526, 865, 439, 674, 673, 672, 671, 325, 308, 450, 74, 675, 180, 179, 343, 676, 296, 677, 321, 678, 190, 679, 75, 77, 680, 61, 60, 681, 326, 682, 109, 108, 683, 991, 992, 300, 301, 833, 834, 835, 836, 837, 838, 839, 1106, 129, 130, 131, 132, 684, 915, 527, 68, 69, 840, 685, 70, 528, 686, 189, 475, 529, 687, 337, 338, 339, 688, 429, 428, 427, 689, 153, 152, 690, 344, 691, 133, 692, 342, 341, 693, 59, 58, 207, 206, 694, 299, 298, 695, 205, 204, 696, 57, 697, 73, 72, 698, 137, 136, 327, 699, 391, 62, 700, 701, 76, 702, 161, 160, 430, 1078, 359, 916, 917, 918, 919, 433, 920, 704, 703, 320, 318, 317, 315, 316, 313, 314, 319, 0, 904, 905, 906, 907, 993, 451, 994, 452, 995, 706, 705, 348, 347, 349, 921, 922, 923, 707, 16, 15, 13, 14, 1079, 1080, 456, 1, 432, 509, 1081, 10, 9, 11, 12, 859, 860, 861, 530, 924, 360, 1021, 926, 925, 927, 7, 8, 996, 1012, 708, 226, 225, 224, 223, 997, 709, 29, 28, 27, 26, 542, 866, 543, 867, 476, 868, 544, 862, 869, 532, 870, 458, 545, 546, 844, 841, 534, 440, 842, 843, 535, 845, 846, 847, 536, 848, 849, 539, 850, 851, 537, 852, 853, 538, 533, 854, 855, 856, 540, 857, 858, 541, 863, 871, 872, 873, 547, 874, 875, 876, 548, 457, 877, 786, 880, 879, 531, 878, 881, 882, 549, 883, 884, 885, 459, 892, 893, 436, 550, 612, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 243, 247, 250, 251, 246, 245, 244, 248, 249, 886, 887, 551, 888, 889, 552, 890, 891, 145, 144, 143, 149, 146, 147, 148, 142, 141, 553, 554, 723, 722, 394, 395, 392, 393, 396, 1082, 465, 453, 724, 277, 276, 275, 274, 278, 272, 270, 269, 271, 273, 998, 726, 725, 238, 239, 237, 236, 235, 240, 864, 79, 478, 894, 557, 895, 477, 896, 555, 556, 558, 897, 898, 559, 560, 561, 562, 563, 564, 565, 738, 737, 736, 735, 734, 733, 732, 731, 730, 617, 729, 728, 727, 49, 50, 52, 51, 566, 437, 567, 739, 568, 569, 570, 571, 908, 466, 909, 910, 572, 468, 573, 911, 438, 574, 747, 746, 745, 744, 743, 742, 741, 740, 104, 107, 105, 106, 928, 934, 3, 460, 929, 575, 930, 2, 931, 470, 932, 461, 462, 933, 935, 936, 471, 937, 613, 751, 750, 614, 749, 748, 203, 1027, 479, 480, 1028, 4, 5, 6, 938, 939, 940, 576, 941, 577, 578, 942, 481, 943, 752, 192, 196, 197, 198, 195, 191, 194, 193, 944, 945, 946, 579, 947, 580, 483, 482, 581, 948, 582, 949, 753, 331, 334, 335, 336, 333, 328, 332, 329, 330, 950, 951, 952, 953, 954, 583, 955, 584, 956, 585, 488, 487, 586, 957, 484, 958, 485, 959, 486, 960, 759, 758, 757, 756, 755, 754, 257, 258, 260, 259, 254, 256, 255, 961, 962, 963, 964, 965, 587, 966, 588, 967, 589, 497, 496, 590, 968, 495, 969, 494, 970, 489, 971, 490, 972, 491, 973, 492, 974, 493, 975, 765, 764, 763, 762, 761, 760, 185, 186, 188, 187, 182, 184, 183, 999, 1000, 1001, 1002, 1003, 472, 473, 591, 1004, 1005, 592, 1006, 1007, 593, 1008, 1010, 1009, 769, 768, 767, 766, 20, 22, 23, 24, 25, 18, 21, 19, 1013, 1014, 1015, 594, 595, 771, 770, 291, 294, 295, 290, 293, 292, 1016, 1017, 1018, 596, 500, 499, 597, 1019, 498, 1020, 772, 171, 172, 176, 177, 178, 175, 174, 173, 1022, 1023, 1024, 598, 503, 502, 599, 1025, 501, 1026, 777, 776, 775, 774, 773, 162, 163, 168, 169, 170, 167, 166, 165, 164, 1029, 1030, 1031, 600, 1032, 601, 505, 504, 602, 1033, 778, 229, 232, 233, 234, 231, 227, 230, 228, 1034, 1035, 603, 1036, 506, 463, 604, 615, 80, 81, 82, 1083, 1084, 605, 1085, 507, 464, 606, 616, 215, 214, 216, 1043, 508, 607, 779, 324, 322, 323, 1086, 780, 297, 976, 213, 977, 980, 608, 981, 982, 978, 979, 983, 984, 154, 155, 157, 156, 158, 986, 609, 781, 1011, 78, 782, 783, 150 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_15cd0, { 1, 0 }
}

define i32 @function_15cdc() local_unnamed_addr {
entry:
  %v3_15ce0 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_15ce0)
  %v31_15ce8 = load i32, i32* @r0, align 4
  ret i32 %v31_15ce8

; uselistorder directives
  uselistorder i32* @r0, { 31, 28, 25, 61, 60, 187, 18, 4, 5, 221, 6, 30, 7, 62, 0, 63, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 1, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 64, 16, 58, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 21, 13, 153, 154, 10, 27, 11, 248, 250, 251, 50, 51, 52, 53, 54, 55, 56, 57, 12, 23, 79, 80, 249, 137, 138, 81, 205, 26, 48, 49, 206, 2, 207, 208, 209, 204, 198, 45, 199, 200, 201, 46, 202, 203, 17, 217, 218, 210, 211, 212, 213, 214, 215, 216, 87, 88, 22, 89, 9, 24, 155, 156, 157, 158, 186, 14, 15, 19, 219, 159, 220, 20, 160, 161, 162, 163, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 84, 85, 120, 33, 82, 83, 86, 121, 124, 125, 126, 127, 128, 129, 122, 123, 34, 35, 36, 37, 130, 131, 38, 39, 132, 133, 134, 135, 136, 139, 140, 40, 41, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 42, 151, 152, 47, 164, 165, 166, 167, 168, 169, 170, 8, 171, 172, 173, 174, 175, 176, 177, 195, 196, 3, 178, 179, 180, 181, 182, 183, 188, 189, 190, 191, 192, 193, 194, 197, 184, 185, 43, 44, 29, 32 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 59, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 64, 65, 66, 67, 60, 48, 61, 62, 63, 68, 69, 70, 49, 50, 51, 45, 46, 47, 52, 56, 57, 53, 54, 55, 71, 38, 39, 40, 41, 42, 43, 44, 58 }
  uselistorder i32 0, { 565, 566, 575, 576, 577, 578, 579, 103, 580, 581, 582, 0, 583, 290, 66, 584, 361, 585, 586, 587, 320, 321, 567, 568, 573, 1, 104, 105, 929, 930, 931, 932, 138, 139, 933, 588, 140, 106, 1123, 1124, 1125, 291, 589, 590, 591, 292, 1126, 67, 293, 1127, 1128, 84, 41, 42, 592, 75, 2, 98, 99, 778, 76, 77, 78, 779, 780, 1129, 1130, 1131, 1132, 1133, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1134, 1135, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 32, 1154, 1155, 1156, 1157, 1158, 33, 1159, 1160, 1161, 34, 1162, 1163, 1164, 35, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1189, 1190, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 36, 1208, 1209, 1210, 1211, 1212, 37, 1213, 1214, 1215, 1216, 1217, 38, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 141, 593, 543, 594, 595, 596, 597, 598, 362, 363, 599, 600, 107, 108, 109, 601, 602, 606, 603, 604, 605, 294, 307, 607, 608, 110, 142, 611, 609, 610, 295, 612, 111, 613, 614, 3, 4, 112, 615, 559, 560, 364, 561, 616, 617, 618, 68, 69, 619, 620, 621, 143, 622, 623, 624, 625, 626, 365, 627, 628, 629, 630, 631, 632, 113, 633, 634, 635, 636, 5, 6, 144, 146, 637, 145, 638, 147, 639, 114, 640, 645, 646, 641, 642, 643, 648, 649, 650, 148, 651, 652, 653, 654, 655, 644, 647, 656, 115, 569, 570, 571, 1233, 1234, 1036, 923, 1044, 574, 781, 782, 322, 783, 366, 562, 367, 563, 1045, 1046, 1047, 149, 1048, 784, 785, 786, 564, 572, 116, 150, 1235, 1236, 1049, 1050, 368, 1240, 1241, 369, 1242, 1243, 151, 297, 1244, 1245, 370, 70, 1246, 1247, 371, 1254, 1255, 1258, 535, 296, 1259, 372, 1256, 1257, 1237, 1238, 544, 152, 283, 657, 659, 658, 153, 660, 661, 662, 373, 663, 100, 924, 91, 925, 155, 154, 926, 1239, 755, 756, 757, 758, 759, 760, 157, 117, 761, 762, 763, 92, 156, 764, 118, 375, 376, 1249, 374, 119, 542, 120, 158, 1056, 1057, 1058, 1059, 1060, 159, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 160, 1051, 377, 1052, 1053, 378, 1054, 1055, 121, 1037, 379, 161, 1038, 1039, 1040, 1041, 1042, 122, 166, 162, 169, 163, 165, 171, 170, 164, 167, 168, 1068, 1069, 1093, 1094, 123, 1070, 1071, 175, 173, 174, 1072, 1073, 181, 180, 134, 172, 1074, 1075, 1076, 1077, 1078, 1079, 314, 313, 323, 380, 1080, 1081, 1082, 71, 1083, 177, 176, 178, 179, 133, 1084, 1085, 298, 1086, 1087, 101, 1088, 1089, 1090, 1091, 1092, 7, 8, 687, 688, 72, 124, 9, 324, 381, 1095, 1014, 1015, 1096, 892, 689, 690, 691, 1097, 1098, 934, 1260, 1261, 79, 125, 787, 788, 789, 182, 664, 665, 183, 790, 795, 796, 797, 798, 184, 325, 185, 315, 316, 382, 791, 186, 792, 793, 126, 799, 1016, 1250, 692, 693, 694, 794, 1253, 893, 1248, 935, 800, 695, 927, 696, 383, 1251, 95, 1252, 765, 10, 1099, 1100, 96, 1101, 1102, 1103, 1104, 1105, 187, 1106, 536, 545, 537, 538, 1107, 546, 135, 188, 801, 802, 803, 93, 309, 804, 805, 547, 11, 299, 189, 190, 191, 43, 192, 384, 697, 806, 807, 808, 1109, 1108, 1110, 1111, 1112, 1113, 39, 193, 1114, 1115, 1116, 194, 85, 86, 359, 360, 678, 196, 195, 197, 809, 198, 810, 811, 199, 995, 996, 385, 200, 812, 201, 202, 967, 203, 936, 204, 205, 705, 698, 206, 699, 700, 701, 679, 680, 682, 666, 667, 548, 668, 681, 669, 549, 670, 550, 671, 551, 672, 552, 673, 674, 87, 44, 286, 287, 675, 553, 676, 554, 677, 683, 684, 386, 685, 702, 534, 703, 387, 704, 301, 300, 706, 707, 708, 709, 208, 207, 710, 711, 712, 555, 284, 713, 80, 81, 285, 714, 82, 83, 388, 716, 717, 539, 718, 719, 720, 721, 722, 389, 723, 724, 725, 310, 136, 541, 726, 727, 728, 729, 730, 731, 540, 732, 733, 390, 734, 391, 735, 738, 739, 740, 209, 736, 210, 737, 13, 12, 211, 715, 937, 938, 533, 686, 741, 212, 742, 743, 744, 745, 746, 747, 748, 289, 288, 749, 392, 750, 393, 751, 394, 752, 317, 753, 395, 754, 217, 216, 556, 127, 557, 215, 214, 213, 303, 311, 396, 766, 218, 219, 774, 767, 768, 769, 770, 771, 772, 773, 302, 775, 776, 45, 777, 220, 397, 94, 813, 814, 815, 816, 306, 817, 818, 819, 305, 820, 821, 822, 823, 221, 824, 826, 825, 128, 129, 222, 304, 224, 223, 827, 225, 226, 73, 227, 828, 230, 829, 830, 831, 832, 229, 228, 231, 833, 834, 46, 47, 130, 835, 836, 14, 15, 16, 17, 837, 838, 232, 327, 839, 398, 840, 399, 841, 400, 842, 401, 843, 402, 844, 403, 845, 326, 846, 236, 848, 849, 850, 851, 234, 233, 237, 852, 853, 48, 49, 847, 235, 855, 854, 18, 19, 20, 21, 856, 238, 857, 858, 329, 859, 404, 860, 405, 861, 406, 862, 407, 863, 408, 864, 409, 865, 328, 866, 410, 867, 242, 869, 870, 871, 872, 240, 239, 243, 873, 874, 50, 51, 868, 241, 875, 52, 411, 876, 878, 879, 880, 881, 412, 882, 22, 23, 24, 25, 26, 877, 244, 883, 884, 335, 885, 334, 886, 333, 887, 332, 888, 330, 889, 331, 890, 413, 891, 248, 895, 896, 897, 898, 246, 245, 249, 899, 900, 53, 54, 894, 247, 901, 55, 414, 902, 904, 905, 906, 907, 415, 908, 27, 28, 29, 30, 31, 903, 250, 909, 910, 337, 911, 336, 912, 416, 913, 253, 939, 940, 941, 942, 252, 251, 254, 943, 944, 56, 57, 137, 97, 255, 74, 418, 945, 946, 947, 948, 949, 256, 950, 951, 340, 952, 953, 954, 955, 260, 257, 258, 259, 956, 957, 958, 959, 419, 960, 961, 339, 963, 417, 964, 338, 965, 420, 966, 262, 968, 969, 970, 971, 261, 263, 972, 973, 58, 59, 88, 974, 264, 975, 976, 343, 341, 977, 342, 978, 981, 982, 983, 266, 267, 984, 985, 60, 979, 980, 265, 987, 986, 988, 268, 989, 990, 346, 991, 345, 992, 344, 993, 421, 994, 998, 999, 1000, 270, 271, 272, 1002, 1003, 61, 1001, 997, 269, 1005, 1006, 1004, 1007, 273, 1008, 1009, 349, 1010, 348, 1011, 347, 1012, 422, 1013, 277, 1018, 1019, 1020, 1021, 276, 275, 278, 1022, 1023, 62, 63, 1017, 274, 1024, 1025, 279, 1026, 1027, 352, 1028, 351, 1029, 350, 1030, 423, 1031, 425, 89, 64, 1032, 131, 354, 353, 426, 427, 1033, 1034, 1035, 424, 429, 90, 65, 1117, 132, 356, 355, 430, 1118, 1119, 1120, 428, 318, 1043, 1121, 280, 1122, 914, 281, 915, 916, 102, 917, 918, 319, 431, 308, 919, 920, 40, 312, 921, 922, 432, 928, 282, 962, 357, 558, 358, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276 }
  uselistorder i32* @r4, { 35, 48, 49, 50, 6, 51, 52, 53, 7, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 41, 42, 43, 475, 476, 64, 65, 66, 67, 68, 69, 70, 71, 72, 705, 706, 73, 74, 8, 1, 75, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 9, 76, 77, 78, 79, 80, 81, 82, 83, 84, 10, 85, 86, 89, 90, 91, 92, 36, 93, 94, 95, 96, 97, 98, 87, 88, 37, 38, 99, 100, 11, 101, 12, 102, 13, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 14, 123, 124, 125, 15, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 44, 45, 46, 47, 39, 40, 635, 636, 266, 267, 723, 724, 725, 637, 638, 728, 733, 734, 735, 736, 737, 738, 739, 726, 138, 139, 140, 468, 469, 470, 727, 240, 16, 241, 242, 243, 244, 245, 246, 729, 732, 141, 142, 143, 144, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 17, 656, 657, 658, 659, 640, 641, 642, 643, 603, 604, 605, 606, 607, 608, 609, 610, 611, 18, 612, 613, 614, 615, 616, 617, 618, 619, 620, 660, 682, 683, 684, 685, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 33, 674, 675, 0, 676, 677, 678, 679, 680, 681, 165, 166, 167, 730, 731, 574, 575, 412, 413, 268, 269, 270, 271, 272, 273, 274, 145, 146, 147, 275, 276, 277, 5, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 2, 288, 289, 290, 686, 687, 19, 688, 689, 690, 168, 517, 518, 477, 478, 169, 170, 171, 172, 173, 174, 175, 176, 159, 160, 161, 177, 178, 179, 180, 162, 150, 151, 148, 149, 152, 153, 154, 155, 156, 157, 158, 163, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 207, 208, 209, 210, 211, 3, 201, 202, 203, 204, 205, 206, 195, 196, 691, 692, 479, 480, 481, 482, 483, 164, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 247, 20, 21, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 291, 292, 4, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 22, 309, 23, 310, 24, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 25, 335, 26, 336, 27, 337, 28, 338, 339, 340, 341, 29, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 30, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 31, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 32, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 693, 694, 695, 696, 697, 698, 702, 703, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 699, 700, 701, 455, 456, 457, 460, 458, 459, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 34, 704 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
